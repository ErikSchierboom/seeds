{"Data":{" ":["Yeah,","It","Thanks","There's","Well,","Caching.","Looking","Cool.","Indeed,","@romaine:","Thank","new_message","Thanks,","Yep!","Does","Look","`import","Nailed","Works","yeah,","Anyway,","No","Thanks","Thanks","Would","would","not","Thank","Neat!","Nice","Maybe","Otherwise,","Looks","Just","Why","Organization",".isupper()","This","Because","This","Hah,","What","looking","Sure,","Thank","That","I","Looking","Yes,","Do","I","But","I","Something","You","Whoops,","But","Looks","You","Did","All","You've","That","Unless","So","I","Lookin'","How","Thanks!","This","I","this","(also,","This","What","Would","I","Otherwise,","Simple,","Ops.","Looks","this","Dang","Fine","That's","I","Damn.","take","I","I","...","I","oups....","The","Good","How","As","A","Also,","Last","I","*","*","*","*","*","```return","What","(also,","Three","In","Makes","For","Thanks","*","*","*","Sweet","Something","This","Also,","Completely","Note:","```python","def","self.assertEqual(","['ant'],","Anagram('tan').match('tan",")","```","Should","```python","def","self.assertEqual(","['tan'],","Anagram('ant').match('tan",")","```","Edit:","It","Sure,","so","@yesenia:","There's","Actually,","```","======================================================================","FAIL:","----------------------------------------------------------------------","Traceback","File","Anagram('Orchestra').match('cashregister","AssertionError:","```","Are","In","If","Good","-","-","I","Thanks","Added","Nice","The","Ah,","Looks","One","I","You","However,","I","*","*","*","*","If","I","I","I","I'll","Are","Sure,","You'd","I","What","What","How","Also,","The","By","Which","(removed","You","Yeah,","It's","Good","```not","Fair","```python","def","return","```","I","Thanks","Why","The","With","Just","-","-","Also,","I","Is","I'm","I","Checking","For","So","Okay.","In","You","```python","if","message","else:","message","```","…which","I","Good","This","```python","message","```","Since","Looks","Just","It","And","```python","if","print","else:","print","```","would","I","Pretty","I","```python","if","#","```","Hey,","Just","-","-","Instead","Thanks","Heh","Nope,","Yep,","(hint:","I","It's","while","If","For","And","Also,","`Utterance`","That's","1.","2.","That","Splitting","(personal","how","(also,","There's","For","I","Wasn't","I","Have","This","*","*","*","I","(also","I'm","```python","from","import","class","def","if","return","return","```","Or","Hence","Why","I","If","This","I","As","Fair","That's","What","(also,","Doing","That","If","I'm","Separating","-","-","-","This","-","-","While","-","-","-","avoiding","In","What","Hello","Yeah,","Nice","Also,","This","Meh","Looking","This","Is","Fair","@peyton","Very","*","*","I'm","Also,","Consider","Can't","Dropped","Thank","Have","iterating","I","Great!","Nice","yes","Fine","Why","I'm","Could","That","Great!","OK,","You","Try","I","Thank","I","Great!","I","There","PEP8","It's","@therese","Good.","You","`Bob.is_yelling`","Finally!!","Thanks","Looks","I","Thanks,","Yes","Simple","Looks","This","Yay,","Now","Fair","You're","Looks","*","*","Isn't","Thanks!","PEP8","Looks","What","what","Great!","Hej","Looks","@aron","I","Also,","Great!","@raven:","Looks","Agreed","excellent!","FYI","Can","I","Fixed","I'm","But","Ah.","@rhea","Looks","good","Sweet!","I","Hmm.","Mixing","thanks","There","don't","This","I'm","This","{nucleotide:","It's","Comments","That's","Adding","I","I","Why","And","There","@coby:","I","L3:","L5:","L7:","Thanks","Looks","L3:","L5:","L3,","I","*","*","Do","def","if","return","I","Oh,","changed","I","You","Did","Not","Thanks","@estefania:","@estefania:","Also,","Single","CamelCased","I","*","*","*","*","*","The","Otherwise","I","Nice","Nit:","You're","Wouldn't","OK,","About","You","You","Consider","Although","Parts","*","*","*","*","*","*","*","*","*","*","I","@anabel","[PEP","You","Pretty","A","*","*","*","I'm","\u003cblockquote\u003e","I","\u003cbr\u003e\u003cbr\u003e","In","\u003c/blockquote\u003e","Good","Yeah,","I","I'm","Class","@jody","The","\"voice\"","An","I","Does","What","The","The","Your","I","List","No","@corbin","I","Also,","Nope,","I,","&gt;","Disclaimer,","[1]:","Definitely","Helper","I'd","Flagging","I","If","There's","I","That's","@geovanny","Strings","[PEP8","I've","I've","Ah,","Not","if","...","elif","....","is","if","...","elif","...","Is","For","I","This","Someone","I","`question`","I","`if","I","The","Used","Are","Have","Also,","If","Looks","@kurt","Nice.","An","Python","Are","Finally,","Hmm,","Anyway,","Strings/lists","Looks","@jakayla",":)","Just","Ignore","Zoldar,","Do","Class","def","if","return","def","return","How","Zoldar,","Do","Class","def","if","return","def","return","How","It","in","`_ucfirst`","(and","Thanks","1.","2.","I","3.","I","4.","5.","Thanks","QUESTION,","Code","George!","I","Thanks","I'd","Sweet.","Smooth","Please","Colon","What","```python","class","@arnold","def","return","```","or","```python","class","def","self.msg","def","return","```","In","The","```python","__all__","def","#","if","return","properties","if","properties.add(\"question\")","if","properties.add(\"shout\")","return","class","\"\"\"Bob","def","\"\"\"In","msg_properties","if","return","elif","return","elif","return","else:","return","```","or","```python","class","def","self.issilence","self.isquestion","self.isshout","```","Your","(this","To","-","-","I","The","Actually","how","You","```python","class","@dagmar","def","return","#","```","but","It's","Have","Defining","Think","With","By","Testing","Why","Why","Looks","Why","It","If","Another","Nice,","Clear","I","I","That","Couldn't","True,","I","```python","if","return","if","return","```","is","```python","if","return","if","return","```","Also","```python","def","\"\"\"You","return","```","Having","My","A","A","I","On","On","Looks","Generally","@georgette:","I","I","elifs/else","Thanks","No","Looks","occurences","if","Not","For","def","return","Notice","Using","Thanks","Anyhow,","Cool!","Looks","Another","Much","Some","I'm","Your","Good!","Oops!","Please","Could","I'm","thanks","Ah,","I'd","Great!","I","A","*","*","Thanks,","Heh","@caterina","Thanks","Ah,","Do'h,","the","What","What","Which","What","There's","Why","Yes,","As","aren't","`;`","Either","Just","You","All","I","Believe","Tanks","forgot","Oh","Why","Oh,","Thanks!","Should","Have","Looks","The","Derp,","Is","You","Looks","Thank","`self.message","You","Definitely","Someone","You","definitely!","Ok,","Yay","So","ok,","I","That's","me","This","TDD","I","the","To","With","```scheme","(cond","((shouting?","((question?","(else","```","and","```ruby","def","if","1","elsif","2","else","3","end","end","print(hey(\"bar\"),","```","Works","Check","Coincidentally,","BUT","In","One","(also","Well","It","Well,","-","-","-","-","List","would",":S","Looks","Somebody","Okay,","I","It","Once","Ahh","Two","1)","2)","Very","I'm","My","You","Fixed:","*","*","Please","The","The","Are","(Note:","Looks","Pro:","Con:","My","I","For","Indeed","I","I'm","Maybe","FINE","CHILLOUT","etc.","It's","-","-","This","This","-","-","Here's","a","b","assert","That","In","Ah,","I","DNA","RNA","ALL","There's","In","Also","thanks.","I","Ah,","&gt;","There","Or","Will","Thanks","FYI:","Although,","Even","Is","{n:","Might","`\\w+`","I","`endswith`","Looks","Couple","-","-","The","The","You","Last,","Makes","Bit","Why","This","You","You","You","Well,","But","I","Side","Ouch","Two","Oh,","`converse","Do","There's","I","You","`self.message","Someone","Nice.","I","You","Do","I","An","I","I","As","I","You","Instead","Pretty","Some","*","*","*","*","On","logical","return","will","Very","I","I","Also","&gt;","seems","```python","#","elif","return","#","def","return","```","Why","Alternatively","self.message","Other","When","About","Looks","I","I","Also,","You","If","I","You","Someone","I","This","```","try:","if","return","except:","pass","```","What","The","On","On","Nice!","*","*","Instead","```","def","if","return","return","```","```","def","return","```","You","Same","There's","And","I'd","Oh,","Nice!","*","*","I","One","I","Someone","Thanks!","Putting","(Thanks","There","A","*","*","Whoops.","I","```python","def","if","return","```","and","```python","def","answer_if_question(message)","respond_to_statement(message)","respond_to_shout(message)","```","etc....","Would","Thank","Cool,","I","@mara:","I","Or","I","Do","You","Otherwise,","A","*","*","You","50","Some","*","*","@adrien","I","*","*","*","*","*","I","One","You","`if","This","Also,","Simple","Helpers","ok,","the","Parentheses","Hmh,","That's","I","renamed","I","I","Another","Yes,","Ha,","Neat,","Instead","What","I","This","I","In","Out[8]:","In","Out[9]:","You","Of,","Great","Gap","In","Out[8]:","In","Out[9]:","Still","It","*","*","*","Looks","In","Out[48]:","In","Out[49]:","Probably","Depends","I","Just","New","thx","You","Good","You","At","Using","You","Look","Unless","@kitty","You","You","Thank","Have","and","```python","&gt;&gt;&gt;","True","&gt;&gt;&gt;","False","```","-","-","Ah,","In","It","Done.","I","Thank","Sorry.","In","Looks","In","Please","There","IMHO","You","&gt;","And","`import","The","Please","It","Hi.","Your","I'm","Ok,","`\"\".join(map(...`","Giving","This","I'm","But","I'd","My","It's","Enjoy!","Maybe","Zoldar","So","I","My","I","Fair","`is_valid`","It's","Also,","Would","In","Regarding","I","Thanks","I","In","I'm","I","I","I'd","I'd","Look","I","As","This","Here,","Think","I","self.sequence","When","Second,","Ideally,","I","I","And","Think","I","At","Nice.","You","Think","Hey,","Yes,","Also","That","Thank","After","My","Normally","I'll","Also,","I","Beware","Nowhere","If","But","The","```python","if","result","elif","result","else:","result","return","```","I'm","One","Any","I","The","The","I've","The","Once","This","I","Interesting.","Extracted","Awesome","Thank","@mia","Ah,","I","Since","You've","The","I","Oh,","Oh,","You","Ok,","So","Tests","Try","Ok,","Great.","Please","It's","Ah,","Hello","Here","1.","1.","1.","1.","1.","1.",":)","Yes,","How","I've","Combining","Thank","Good.","Good","Oh","I","As","&gt;","I","AttributeError:","I","&gt;","Are","Oh,","Good","That's","You","I","Good.","Makes","Btw,","You","*","*","*","Look","Thanks!","-","-","Thanks","I","I","Maybe","I","I","Hey!","There","Also","Neat","Yeah,","Thanks","There's","I","I'm","You","@marcelino","Thanks","1.","2.","3.","4.","@wilmer:","Also,","If","Smart","Hm...","Tests","Also","I","I","@aniyah's","Well","If","`self.nucleotides.translate(maketrans(\"ACGT\",","Good","Usually","Thanks","I","Looks","Some","1.","1.","1.","1.","I","However,","Also,","Good.","You","An","All","sure,","would","Line","Injecting","Did","http://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references","There","1.","1.","1.","1.","Btw","Good","`translate`","Hmm,","Well,","I","```python","def","def","@lucinda.wraps(f)","def","value","if","value","setattr(self,","return","return","return","```","but","Gee,","I","Sanitization","The","Also","```python","def","return","```","A","Also","Maybe","Parentheses","Nice","There's","Parentheses","Consider","You","`string`","Even","It's","Consider","There's","`replace`","I","I","It","```python","def","cl","@shanny.wraps(f)","def","print","if","cl[1]","cl[0]","return","return","```","for","This","So","class","Ouch,","Thanks","I","I","I","I","I'm","I","There's","`DNA`","Great.","From","And","```python","if","return","elif","return","elif","return","else","return","```","Instead","```python","if","return","elif","return","else","return","```","You","```python","if","return","if","return","return","```","It's","Thanks!","For","I","```python","def","return","```","There","This","maybe","This","The","Hi","Thank","And","Using","and","```python","vocab","(re.compile(r\"^(?:\\s+)?$\"),","#","]","```","I","Also,","This","And","I","Hint","I","@bradley","Given","In","@gerda","Hint,","Awesome.","From","There","```python","Anagram('banana').match(['Banana'])","```","Python","Also","I","You","About","Yes","And","Your","thanks","&gt;","i","&gt;","i","Am","I","I've","Then","I","First","That","a)","b)","It","I'll","Finicky,","How","Oh,","I","I","1.","2.","My","I","Ok","I'm","Question:","Also","```python","whatBobHeard","```","Do","\"Word\"","@hortense","Using","About","Xavier","Actually,","@autumn","`Counter`","Ok","wrt/","-","-","wrt/","-","-","As","Can","Thanks!","The","wrt/","*","*","*","Also","This","I","Hi","My","The","For","Good","*","*","@paxton","It's","When","&gt;","I","Since","I","This","I","Thanks","@rosario:","I'm","Thank","@payton","The","----","I","Now",".replace()?","Your","But","Please","Better","I","Ok,","My","Oh,","The","Hmm.","Yeah.","Also","I'm","*","*","*","*","Polymorphism","Oh","@seth:","I","Now","Oh","Do","I","*","*","*","*","*","*","Well","But","wrt/","I","`__init__`","Also","Ok,","Did","I","If","Argh!","I","I","*","*","*","'maketrans'","Already","Ok","@jerod","@justice:","Ok,","Ok,","Absolutely","didn't","what's","@estelle:","```python","import","from","class","def","self.phrase","def","return","ss","for","s.strip(string.punctuation)","for","in",")","if","))","```","I","Python","It","From","Please","[PEP8](http://www.python.org/dev/peps/pep-0008/)","&gt;","&gt;","@precious","From","As","@rogelio:","Made","Thanks","You","Now","Extracted","Can","Hint","A","I","Don't","So","I","This","My","I","Why","String","Also,","I","Am","Good","A","3","i","+1","if","without","I","Can","Now","Can","While","Remove","Don't","@nickolas","Yes,","List","I","You","I'm","Nice","Added","Have","Ouch,","Without","No","Is","&gt;","Well,","Right","I'll","I","1.","if","return","else:","return","does","2.","3.","4.","5.","6.","7.","Split","I'd","I","+1","+1","Instead","Don't","Remove","Why","First,","Just","The","Oh,","Maybe","I","What","The","say","You","trim","This","This","Fair","Thanks","RealBigB,","Good","Re","Now","Here","1.","2.","3.","-","-","-","-","-","-","-","You","You","-","-","-","-","-","-","-","-","Thanks","Sorry","The","What","The","I","Your","My","I","Each","I","My","From","Awesome,","Moving","You","You","I","I","If","@nadia:","I","I","Why","I","Why","Why?","Roger","Trying","Decoupling","-","-","-","-","&gt;&gt;","Thought","I","I'm","@woodrow:","@woodrow:","-","-","-","There","Use","There's","Thanks","This","Consider","The","Why","Ok","The","Hmm.","I'm","1.","2.","3.","but","What's","Hint","Moving","Also","This","wrt/","wrt/","By","I","Also,","Ack!","Good","Hints:","*","*","*","*","Thanks","that","me","&gt;","&gt;","&gt;","&gt;","&gt;","The","If","comment","is","so","Another","seldom","&gt;","&gt;","&gt;","&gt;","I","in","just","Did","That","that","Making","double-underscores.","I","&gt;","&gt;","Good","I","&gt;","&gt;","&gt;","&gt;","&gt;","I","but","data","each","yes.","Your","Just","You","I","You","Double","Also","Oh","Else,","I","I","`str.format()`","I","I","Feel","You","wrt/","*","*","*","*","*","*","We","-","-","Now","-","-","Also,","If","wrt/","Yes,","recommended","You","Thanks","I","And","I","This","Oh!","It's","A","-","-","-","-","-","The","You","Sorry","Hi","Yes,","Also,","Hi","You","I","I","I","A","How","I","keep","If","What","collections.Counter","`counter.Counter(self._words())`","There","The","Python","It","Line","Btw,","Simplest","Restructuring","`if","return","elif","return","elif","return","else:","return","(Sorry","Very","How","Thank","A","Using","The","What","Oh,","`a","bool(a","bool(not","bool(a)","`","Cheers!","Looking","`","AssertionError:","You","Also","Try","I'm","Cheers","I","Personally","Cheers","What","Quite","Using","All","Nice","Below","If","You","```","I","It","`char","Instead","Setting","```","if","return","if","return","return","```","Thinking","Right","For","Had","Hi.","\"FAILED","If","I","I","Is","Thank","I","Nice","The","Cheers","Thanks,","You","Thanks,","All","Learned","Other","Nice","Nice.","DNA(None).to_rna()","Nice.","The","No","These","I","Minimal","This","Regex","You","```","if","return","if","return","etc.","```","I'm","You","```","if","return","if","return","etc.","```","Python","```","print","```","```","false","```","Not","Doesn't","*","*","*","*","*","*","*","only","*","*","*","*","*","*","*","*","*","This","There","There","I","Are","'Bob","'Bob","'Bob","'Bob","@helen","What's","Since","Basically,","@bennett,","In","Ah,","Two","Updated","I","Did","Realized","I've","First,","Second,","Third,","I","Thanks","```return","if","Thanks","*","*","Now","Oh","*","*","*","*","*","*","*","Why","`re.split()`","You","`(x","An","`return","Very","I","Instead","We","Simplicity","Good","If","I","I'm","I'd","Even","If","About","*","*","*","But","To","My","I","@vicky:","@vicky:","@vicky:","Maybe","Why","Nice","Let's","One","An","An","I","Simple","You","Cheers","Would","What","Good","First","wrt/","wrt/","`collections.Counter`","Good","Thank","Please","The","Cheers","We've","I","One","Nice.","Depending","Clean","Building","Other","`__magic__`","wrt/","You're","wrt/","Can","Using","Using","`all(char.isupper()","This","Python","The","@river:","The","This","Counter","I","\"A","Indeed,","@cleveland:","You","The","You","I","Oh","Good","For","Using","@magnolia:","@brandi:","*","*","*","Mmm...","Just","```","#","class","\"\"\"",":param","the",":param","returns","\"\"\"","def","self.match","self.answer","class","\"\"\"",":params",":param","\"\"\"","def","self._actions","self._default","def","if","input","for","if","return","return","#","#","def","return","def","return","def","return","BOB_SETTINGS","\"actions\"","Action(is_silent,","Action(is_shouting,","Action(is_question,","],","\"default\":","}","def","\"\"\"","No","\"\"\"","return","```","As","Perfect","You","if","I","I","I","This","It","http://docs.python.org/2/library/sets.html","There","You","Nice","Hehe.","http://exercism.io/submissions/523a26542ef81a52490000ac","Very","Look","Looking","I","On","The","if","I","Thanks","Good","@fausto","```","class","responses","(is_shouting,","(is_question,","(lambda","def","return","```","In","```base_chars","@sabryna:","I","1/","If","2/","Now","BUT","@ransom","@ransom","*","*","*","*","*","*","*","*","I","I","(Of","Previously","The","@darian","But","wrt/","wrt/","I","So","You're","This","Part","I","In","I","(How","Very","`class","Cheers","@milford","Thanks","A","The","In","Hardcoding","Do","Finally","@kelley:","@seamus:","About","wrt/","1/","2/","really","I","Somehow","Line","Instead","Line","Line","Line","Read","And","Overall","It's","Can","Have","Could","I","I","In","It","How","In","When","Have","@berenice","*","*","This","@berenice:","*","*","Also","wrt/","Also,","*","*","*","*","@dahlia","I","Why","@amani:","wrt/","`has_anagram`","@javier","Ok,","s/standarize/standardize/g,","I","wrt/","Thanks","I'm","Ok,","But","@virginie","And","def","if","if","if","else:","What","For","Finally,","@judson:","@judson:","@maye:","`Word.really_raw`","Type","`.raw`","Things","And","@howard:","If","If","While","\u003e\u003e\u003e","'Woah,","Indeed,","\u003e","I","*","*","*","Just","About","wrt/","I","Not","What","Since","Good","Why","PEP08","If","Is","Made","*","*","*","*","*","*","Python's","Also,","Thanks","I","Not","Any","Nice","But","You","Have","--spoiler","--spoiler","--spoiler","--spoiler","--spoiler","--spoiler","--spoiler","--spoiler","--spoiler","--spoiler","--spoiler","--spoiler","--spoiler","--spoiler","--spoiler","--spoiler","http://docs.python.org/2/library/stdtypes.html#str.replace","Also","`if","Nice.","A","`return","*","*","Now","You","wrt/","*","*","I","def","msg","#","Nice","Semicolon","In","I","I","While","```python","\u003e\u003e\u003e","'Woah,","```","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","What's","*","*","*","*","a)","b)","c)","d)","Here's","First","Now","*","*","How","I'm","Python","The","Now","We're","As","However,","def","self.assertEqual(","'Fine.",")","..in","..and","To","At","The","Ah,","However,","*","*","*","*","*","*","Now,","@judy","Almost","*","*","*","*","Else","Minor","The","```","#","def","self.school.add(\"James\",","self.school.add(\"Blair\",","self.school.add(\"Paul\",","#","self.assertEqual({2:","#","self.school.db[3].add(\"Bozo\")","self.assertEqual({2:","#","self.school.db[2]","self.assertEqual({2:","#","del","self.assertEqual({2:","#","self.assertRaises(AttributeError,","```","As","It","Testing","Initial","*","*","*","*","```","if","return","if","return","#","if","return","return","```","Looks","There's","Usage","considered","I","Counter(re.findall(r\"\\w+\",","same","otherwise","Check","Thanks!","Something","To","It's","A","*","*","wrt/","Trade-offs","*","For","Since","*","*","*","*","Thanks","`_standard_form`","*","*","*","I'd","I","have","This","Man,","Just","1/","```","_ZERO_BOTTLES","\"No","\"Go",")","```","2/","3/","Have","Is","Also,","Pythonistas?","why","I","I'd","Too","Just","*","*","*","*","*","*","I","I","__Thanks","Counter()","Still","is_singular_noun(),","I","having","You","Thanks","Any","only","On","I","There","If","Else,","@garrick","```","if","return","else:","return","```","I","Maybe","I","I","**Trade-offs**","-","-","Maybe","why","`[^0-9]`","The","You","Using","Also:","*","*","Oh","What,","I","return","if","There","I","It's","Just","Oh.","I","Thanks","A.","Strings","I","Phrase","For","Using","There's","if","return","Is","@annabell","If","However",":)","Try","self.statement","Then","I'm","Positively","Thanks","There","One","I","Nice!","When","Also,","http://stackoverflow.com/a/54873/477048","This","Thanks","@aiyana,","@aiyana,","Unfortunately","Wow","(Stuffing","well","Thanks","I","To","I","I","http://stackoverflow.com/questions/265960/best-way-to-strip-punctuation-from-a-string-in-python","so","You","This","Your","But","Great","Thanks","As","I","I","Hi,","*","*","*","*","```python","return","Shorter","```python","return","*","Hi,","*","*","*","*","next(r","i","Yeah,","Your","Can","I","It","I","So","![Heavy","What","Good","Maybe","Looks","It","It","I","\"Falsy\"","In","Other","I","Explicit","It","All","`Bob`","Methods","@lorenza","Follow","You","Use","Use","You","I","You","Use","You","Hi,","I","It's","You","You","Better","Explicit","You","I","@brigitte","I","I","You","very","Thanks","I","At","I","Somehow","I","I","As","```","Functions","Methods","Separate","Separate","```","I","You","You","It's","I","Explore","You","You","Thanks!","Hi!","I","Explore","I","You","Nice,","You","You","You","I","I","I","I'm","My","Thoughts?","Bold","Interesting","You","It","It's","In","Explore","I","I","I'am","You","I","I","In","Thanks","You're","I","`safe_strip`","In","I","The","I","class","def","message","def","#","nor","class","def","message","@jeanette","def","#","read","Personally,","```","class","def","message","@garry","def","#","```","There","What","Ah","I","You","class","Oh,","Kudos","You","You","I","I","such","They","Maybe","Alternative","Tip","Se","This","I","You","I","I","Thanks","I've","You","You","Interesting","I","`__init__`","You","Generally,","I","Added","It","I","Maybe","Agree","You","@dusty","Still","I","@malachi","You","I","Simple","You","There","Do","As","Not","The","Firstly,","Interesting","Ah,","I","You","It","I","This","This","You","`input`","The","Representing","The","A","There","Finally,","Yes","`to_rna`","Yes,","(The","Is","While","We","The","The","-","-","-","Good","-","-","-","-","Simpler","It's","The","Otherwise","The","Just","A","Subclassing","I'm","```s[-1]","```sanitize```","Does","I","The","Hiding","There","Mis-submission.","Putting","A","Nearly","Again,","Reusing","While","Horner","Not","A","I","I","If","Also,","Creating","Thanks","I'm","I","Looks","Ah,","I","Do","For","May","Hum,","Sorry,","is_silent","I","By","I","lettercount","_silence","I","Make","You","http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes","Remember","http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes","Remember","http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes","Remember","http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes","There","Wow,","In-lining","My","I'd","The","In","Wow,","@jesse","`Phrase._normalize`","Renamed","I","I","See","strip()","Nice","I","Why","Have","I","For","I'm","```","Sparse","```","Or","I","You","It","Regardless","I","I","Thanks","What","@marian,","I","You","You","I","Most","As","I","Have","You","Style","As","I","As","You","Re","Re","Abele","Remember","http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes","Remember","http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes","Remember","http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes","Remember","http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes","Ta!","Sometimes,","(for","```ruby","def","@lisette","end","```","idiom","I","I'd","Another","Last,","@dolly","Yes,","https://github.com/Pylons/pyramid/blob/master/pyramid/decorator.py","@kayli","The","You","def","return","I","I","I","As","More","Finally,","I'd","I","1)","2)","3)","You","Thanks","Remember","http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes","Remember","http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes","The","I","Ack,","A","1)","2)","3)","In","Thanks","When","I","`Phrase.word_count`","You","1.","2.","It's","Because","In","You","You","You","Using","1.","2.","The","Thanks","why","*","*","*","*","*","(I","I","@jamey","Abele","I'll","First","It's","Over","I","My","1.","2.","3.","return","4.","I","not","It's","Looks","if","In","Using","if","return","Finally,","Sorry,","As","Not","1.","2.","3.","4.","I'd","`''.join()`","Thanks!","Much","Clear,","I","It","I","The","Code","It's","Thanks","I","What","I","BinaryFu,","Looks","Thanks","Had","Don't","I","Is","There's","The","Could","Good","I","Thanks,","List","so","I","The","You","Thanks","elif","If","The","Concise,","I","I","I","Thanks","I've","Time","I","Please","You","I","Congratulation","Remove","You","Explore","Have","Thanks","I","You","You","I","You","I","You","Strings","Thanks","I","I","PEP","```python","if","return","elif","return","elif","return","else:","return","```","What","The","Also,","I","I","First","You","Ugh,","I","*","*","*","*","*","Wow!","The","I","KISS!","The","I","Actually,","My","I","You","You","To","I","Why","Using","Those","Yeah,","You","In","You","You","Have","Do","Thanks","Cosmetic","It's","You","You","It","Why","Not","Also","I","Used","Hey,","Otherwise","Considered","Interesting","Handles","Interesting","Thanks","It's","It","Have","Thanks","`isupper`","If","`s`","I","Check","Naming","You","`strand`","You","[PEP","I","Why","`validate`","Have","Tests","I","`None`","Definitely","I","Unique","There's","DocStrings","Thanks","Forgot","I","Looks","At","Did","@hertha:","I","You","I'm","Python's","I'm","This","Why","You","I","You","`DNA.dna`","I","Recently","You","Currently","Thanks,","I","You","You","Why","I","I","It's","I","You","You","I","I","Thanks","It's","`DNA.dna`","I","Recently","You","I","Why","Kudos","Name","You","`no_input`","Why","You","I","You","\u003e","Put","You","Does","..","This","(Apparently","Hi","and","I","My","and","http://www.python.org/dev/peps/pep-0008/","I","I","leak","I","A","def","return","Fixed","I","Fixed","Fixed","About","The","Thanks","I","Quite.","Once","This","I","Some","Communication","Your","Overall,","nucleotides","Maybe","I","Solid","Consider","The","In","Added","I","Instead","rules","for","if","response","break","return","(You","Nice!","Looks","found","Switched","Changed","Check","This","Thanks,","List","Docs","See","I","Interesting","(I","Ah,","With","And","Took","switched","A","For","Could","Maybe","The","These","Nice","It","That's","Not","I","Like","Looking","Also,","I","You","Ah,","See","Looks","*","*","*","I","Very","Initially","It","Use","`responses`","Notes:","*","Notes:","*","*","while","a","*","Wow,","I","In","*","*","*","*","*","*","Looks","*","*","*","*","*","@sabina","This","I","I","One","Nice,","This","Concise","@elijah,","\\*cough\\*","For","I","I'm","def","def","~~","Actually","Also","Finally","I","for","looks","for","this","Also","Ok,","What","1)","2)","took","1)","*","2)","thanks","*","*","*","*","*","I","Pretty","I","*","*","Pretty","I","Nice!","I","Line","Excellent","The","Again,","I","I","Regarding","See:","http://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python","http://docs.python.org/2/reference/datamodel.html","https://wiki.python.org/moin/NewClassVsClassicClass","Initially","I","@emily","To","```#","```#","Because","Complete","Good","After","I","Thank","Thank","As","I'm","*","*","*","@jed:","re.","*","*","*","*","*","*","*","*","`normalize()`","*","*","Well,","@carson","To","Also,","Thanks","I","Re.","Thought","*","*","What","Hmmm,","*","*","*","*","*","No","My","Was","What","Letter","*","*","I","I","```","if","return","```","Finally,","@ivory","@rowan","Refactered","*","*","*","*","Accidentally","*","@janet,","I","This","My","Feedback","\u003eword","lol","@tyson,","Version","I","This","`python","It","....F..F..........","======================================================================","FAIL:","----------------------------------------------------------------------","Traceback","File","'Whatever.',","AssertionError:","======================================================================","FAIL:","----------------------------------------------------------------------","Traceback","File","'Sure.',","AssertionError:","----------------------------------------------------------------------","Ran","FAILED","@carmela","@agnes","What","`sentence.upper()","wow,","This","I'm","@cooper","Neat,","I","Weirder.","Skip","Incorporated","Thanks,","Check","`not","`input.isupper()`","`input.endswith'('?')`","Replaced","I've","Just","If","def","self.sequence","In","`self.string.isupper()","`self.string.strip()","I","Why","Why","That","It'll","Thanks","Moved","If","`\"separator\".join(strings)`","Build","Weird.","it’s","1.","2.","3.","4.","The","The","The","What","def","return","and","I","There","Thanks","Thanks","Has","In","Even","baba-k:","1.","2.","It’s","`str.replace`","I","Imagine","Essentially","Used","Landed","I","I","EDIT:","Try","`word_count`","Imagine","Essentially","are","@golden:","Imagine","Essentially","@javon","Probably","@rhett","*","*","It's","For","Why","Why","On","On","*","---","*","*","*","*","*","Thanks","*","*","I","@kirsten:","*","Alternatively,","def","norm","counts","for","if","counts[word]","return","There's","common,","what","I","*","@bennett","I","```python","return","[self.verse(n)",")","```","How","*","*","**","Thanks!","A","In","I","I","Well,","Let's","I","Of","I","I","I","Is","Good","I","I","In","Use","In","I","1.","2.","3.","4.","5.","P.S.","I","You","The","ANSWERS","'silence':","'shouting':","'question':","'statement':","}","The","I","```python","any(x.isalpha()","```","for","Though","I","That's","Needing","Secondly,","Other","I","I","Also,","```python","if","...","else:","...","```","which","I","Also","This","Only","```python","len(set(s)","```","adds","```python","any(c.isalpha()","```","thought","I","Only","```python","contains_alphas","```","It","Looks","Can","`str`","Thanks","Other","Agreed.","This","Now","Your","I'm","Your","There","You","@bart","@bart","What","I","@eladio","I","Even","Thanks","I","You","I","Ah,","I've","Looks","@owen:","Utterance","Great","very","I'm","The","Oops.","I'd","What","It","I","I","Are","Can","It's","On","Line","Line","How","Have","Very","Grouping","Checking","I","@maximo","Rather","I","Looks","I","Made","Can","Is","Is","I","I","Have","In","On","On","On","Turns","This","I","Also","Cool","Why","Have","Thanks","*","*","*","*","*","In","THANK","pretty","Note","Line","Here","The","On","I","Could","Extra","When","I've","Design","In","I've","```python","def","robot","for","self.assertNotEqual(robot.name,","```","I","line","line","In","on","Overall","*","*","*","I","Imho","Personally","I","Does","Also,","Usually","Nice","1.","2.","If","I","Unfortunately,","You","@ezekiel","@eva","According","\u003eReturn","So,","@sadie","Originally","Wow,","Good,","Okay,","I","The","I'm","In","I","if","return","This","This","Also,","This","I","One","I","I","Why","Agreed.","I","You","I","I","Much","filter","Very","With","Agree","Hey,","I","Try","```python","matches","for","if","matches.append(word)","return","```","And","Then","And","Good","New","Is","Hum,","I'm","Check","In","I'm","Thank","I","Ok,","I","This","I","Had","I","It's","Indeed,","To","You","Still","Well,","You'll","I","It's","`Line","`Line","`Line","`Line","`Line","Did","No,","I","According","There","To","Hey!","I","I","As","I","Can","I","Also,","I","I","The","Ah...I","I'm","I'm","There's","I","@vallie","I","This","The","Amazing!","Could","Sure","https://gist.github.com/cuu508/8426739","*","*","No","If","I","In","Noob","\"#!/usr/bin/python\"","...","I'm","Here","```ruby","class","def","self.assertEqual('C',","def","self.assertEqual('G',","def","self.assertEqual('A',","def","self.assertEqual('U',","def","self.assertEqual(","'ACGUGGUCUUAA',","dna.DNA('ACGTGGTCTTAA').to_rna()",")","```","...","*","*","*","*","Still","For","My","Thanks","I","That","See","You","lines","line","line","These","Looks","[rna_readme]:","You","Some","1.","2.","3.","I","I","No","I","Line","Line","That","Version","Nice","Line","The","I'd","Interesting","Do","Looking","Since","Hey","thanks","About","What","Excuse","Ended","I","Although,","Nice","Interestingly,","That's","What","I","Also,","Ok,","The","Alternatively,","Regular","I","Looks","No","Order","6","```","python","..F.F.........FFFF","======================================================================","FAIL:","----------------------------------------------------------------------","Traceback","File","'Whatever.',","AssertionError:","======================================================================","FAIL:","----------------------------------------------------------------------","Traceback","File","'Whatever.',","AssertionError:","======================================================================","FAIL:","----------------------------------------------------------------------","Traceback","File","'Whatever.',","AssertionError:","======================================================================","FAIL:","----------------------------------------------------------------------","Traceback","File","self.bob.hey('Tom-ay-to,","AssertionError:","======================================================================","FAIL:","----------------------------------------------------------------------","Traceback","File","self.bob.hey(\"Let's","AssertionError:","======================================================================","FAIL:","----------------------------------------------------------------------","Traceback","File","'Whatever.',","AssertionError:","```","Ouch,","Otherwise,","`collections.Counter`","my","Thank","PS:","Wait!","(py27-ticket16883)[zane@santa-MacBook-Pro","..................","----------------------------------------------------------------------","Ran","OK","Looks","Good","On","BUT","Normally","i","check","try","tried","no","I","So","I","\\__init__","Do","uhhmm","The","I","first","imho","Why","Additionally,","I","Overall","Nice,","The","I'm","Nice","Regex","Thanks","The","I'm","Good","Thanks","Hi,","Your","You","Hi,","*","*","Hi,","Pythons","As","Nice","-","Trying","But","Also","Replaced","think","Looks","Overall","There's","I","Thank","concerning","I","You","self._NOCONTENT","Then","in","sentence[len(sentence)-1]","is","sentence[-1]","and","is","sentence.endswith(\"?\")","Hi.","I","If","Also","Excellent,","As","*","*","*","*","but","Some","The","The","In","Hi,","`is_upper()`","When","Nice","Using","You","Nice","To","`question`","Why","Nice","The","You","To","PEP8","Nice","`str`","When","I","Much","Your","You","In","When","And","Lines","RuntimeError:","The","Another","Hi","You","To","Is","Concerning","You","The","I","It","Looks","I","-","-","-","I","I","It","Sorry,","i","the","*","*","*","Also","And","This","-","-","Right?","I","I","When","Resubmitted:","Well","I","I","OK,","Yes,","What","Can","I","Also,","I","Good","Minor","I","[PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations)","Hmm.","class","def","replay","if","reply","elif","reply","elif","reply","return","def","if","return","else:","return","def","if","return","else:","return","def","if","return","else:","return","This","class","Normally","I","Looks","Nah,","The","Thank","I","Normally","Forgot","Named","Also,","Also","```python","\u003e\u003e\u003e","\u003e\u003e\u003e","True","\u003e\u003e\u003e","False","```","```","def","if","return","else:","return","```","I","```","def","return","```","@leon","Thank","figured","probably","since","note","again,","i've","I","Now","Just","1.","prompt.endswith(\"?\")","2.","@sidney","The","{grade:","Since",":+1:","pep","Thank","I","Nice","I","But","I","I've","Almost","I","I","Totally","Thanks,","Ah,","Where","Regex","Just","Cool,","I","The","Also,","Whoops,","Ah,","This","*","*","This","`if","A","1.","2.","@mohammad","Oh,","One","`from","`count_phrase","Please","has_key","`normalized_word","consider","`new_phrase","I","If","In","BTW,","Hi!","Thank","Hi!","The","In","In","The","Also,","Ah,","Code","This,","The","I","The","sum([x0","The","I","\u003e\u003e\u003e","\u003e\u003e\u003e","Counter({'you':","\u003e\u003e\u003e","It","Thanks","Hmm,","The","Also,","I","I","I","Aside","*","*","*","You","Neat","See","As","Ouch,","Looks","`existing_robots`","Yes,","Yes,","But","For","Also,","Try","Also,","I","My","Ah,","Why","If","if","instead","if","which","Also,","I","Your","\u003e\u003e\u003e","\u003e\u003e\u003e","'123'","\u003e\u003e\u003e","\u003e\u003e\u003e","'012'","If","This","***","Your","Something","```","if","return","if","return","```","***","Most","***","Lastly,","I","Awesome,","Ah!","I'll","I","I","```","if","return","```","This","I'd","The","Thanks","The","I","So,","Thank","1.","I","2.","Cool,","I","\u003e","That","\u003e","I","Cool,","Sure,","I","I'm","Not","WIP.","Is","Speling","yer","I","nothing","THERE","if","You","The","This","Should","Could","improved","i","asking","the","Do","No,","stripped","I","Can","Can","I","Thanks","I","I've","```","if","```","I","I","Wow","But,","I","But.","Do","`print","Wow!","Thanks","Oops!!","There","You","`phrase.translate(None,","or","`phrase.translate(None,","of","I","What","You","Booleans","Method","I","Thank","My","Fundamentally","\u003e\u003e\u003e","\u003e\u003e\u003e","DNA('ACGTGGTCTTAA')","\u003e\u003e\u003e","ACGTGGTCTTAA","\u003e\u003e\u003e","12","\u003e\u003e\u003e","\u003e\u003e\u003e","DNA('CCGTGGTCTTAA')","\u003e\u003e\u003e","True","\u003e\u003e\u003e","True","\u003e\u003e\u003e","False","In","``super()``","True,","Hi","I","Many","Wow,","I","I","I've","Totally","thanks","Nice","with","Nice","the","```python","d","```","the","```python","for","```","question","Nice","the","```python","d","```","the","```python","for","```","Nice","the","```python","d","```","instead","```python","if","self.words","```","the","u","So,","But,","In","I'm","i","pep-8","pep-8","maybe","nice","-","-","I","You've","Just","*","*","*","*","*","I","At","Looks","I","Looks","*","*","*","I","*","*","*","You","I","Overall","It","`if","instead","`if(str.strip()","and","`if(re.search(r\"[A-Z]\",str)","can","`if(re.search(r\"[A-Z]\",str)","and","`if(re.search(r\"\\?$\",str))`","should","`if","I","Hi","this","Oh,","This","-","-","-","Any","Your","Do","I","`self.phrase.lower.translate(`","would","Very","line","line","Looks","I'm","Ooh,","The"]," ![Heavy":["Breathing](http://i3.kym-cdn.com/photos/images/newsfeed/000/641/298/448.jpg)"]," \"\"\"":["maps","A","Exercism.io's"]," \"\"\"Bob":["is"]," \"\"\"In":["conversation,"]," \"\"\"You":["cannot"]," \"A":["day"]," \"FAILED":["(failures=2,"]," \"Falsy\"":["string"]," \"Go":["to"]," \"No":["more"]," \"Word\"":["doesn't"]," \"actions\"":[":"]," \"default\":":["\"Whatever.\""]," \"voice\"":["is"]," #":["...","return","...","...","...","...","-*-","I","easier","your","bonus","sanity","trying","trying","trying","trying","...","ignore","...","..."]," &gt;":["In","Is","He","Given","Consider","There's","then","the","Since","use","Limit","What","Double","from","you","pythonic","attribute","Also","attributes","you","and","Oh","has","Else,","dispatch,","(hint:","tests","the"]," &gt;&gt;":["`format`"]," &gt;&gt;&gt;":["\"#!?\"","\"#!?\".isupper()"]," 'Bob":["responds","responds","responds","responds"]," 'Fine.":["Be"]," 'Sure.',":["self.bob.hey('4?')"]," 'Whatever.',":["self.bob.hey('1,","self.bob.hey(u\"\\xdcML\\xe4\\xdcTS!\")","self.bob.hey('1,","self.bob.hey('Ending","self.bob.hey(\"It's"]," 'Woah,":["chill","chill"]," 'maketrans'":["makes"]," 'question':":["'...',"]," 'shouting':":["'...',"]," 'silence':":["'...',"]," 'statement':":["'...',"]," ((question?":["msg)"]," ((shouting?":["msg)"]," (Apparently":["there"]," (How":["would"]," (I":["still","know"]," (Note:":["I"]," (Of":["course,"]," (Sorry":["about"]," (Stuffing":["all"]," (Thanks":["for"]," (The":["umlaut-test"]," (You":["would"]," (also":["really","I've"]," (also,":["having","it","the","look"]," (and":["I"]," (cond":["(((silence?"]," (else":["\"Whatever.\"))"]," (for":["example,"]," (hint:":["you"]," (is_question,":["'Sure.'),"]," (is_shouting,":["'Woah,"]," (lambda":["x:"]," (personal":["bias"]," (py27-ticket16883)[zane@santa-MacBook-Pro":["bob]$"]," (re.compile(r\"^(?:\\s+)?$\"),":["'Fine."]," (removed":["comment"]," (this":["is"]," )":["+\"\\n\""]," *":["I","```string","there's","why","I'm","The","I","I","While","you","I","checkout","This","`if","What","L7:","L9:","L21","L25","L14:","L19:","L6","L9","L11","L12,L14,L16","L14","doc-strings","a","I","Try","If","I","Your","The","Add","I","You","I","You","`str.strip().__len__()","`str[-1]","Documentation","Use","You","You","You","Consider","You","Consider","Consider","you","Put","Put","the","\"Private\"","You","Consider","I","You","You","Is","I","Please","There","Please","Consider","An","There's","`str(text)`","in","Given","why","the","you","in","a","it","good","the","you","also","naming","naming","`__double_underscore`","the","I","the","an","the","the","being","sequences","bare","`dna_string`","the","there's","try","not","try","no","class","The","It","`inp`","you","also","pep08","Python","the","an","if","don't","`not","you","you","`if","an","Python","`None`","if","don't","How","match()","If","Do","What","Don't","just","can","You","You","testing","your","`if","you","it's","also","An","The","you","what","if","the","you","you're","now","Python's","_sanitize()","_is_empty():","_is_shouting():","hey():","general","Good","I","Why","what","You","What's","www.python.org/dev/peps/pep-0008/","python","an","if","you","an","if","there's","I","Ok,","Cool,","Silence","No","you","hysterical","...","I'm","yes,","I","I","Actually","Great,","You","Your","You","Assuming","An","You","Python","`Bob.hey()`",".`responses()`","You","you","extraneous","having","`str.islower()`","the","a","if","`elif`","Using","What","what's","What's","What's","should","a","is","Anagram.source","you","you","pep8","I","pep8","class","you","I","Some","You","Scary","it's","i","I","I","```python","Added","changed","added","renamed","removed","There","This","We","It","In","the","compact","agree","used","could","having","P.S.","there","re.","there","I","The","return:","nice","you","I","I","agree","self.PARAMETERS[\"U\"]","you","`.isupper()`","great","if","comments","need","word","`__init__`","what","it","you","re","there's","counting","clean-up","check","interesting","another","using","dropping","`result","`result","Interesting,","Would","you","you","`for`","could","there","compare","a","what","`.elements()`","check","if","and","re.","all","*","line","re.","re.","added","removed","what","you","that","see","It's","PEP8","Building","Have","The","I","If","And","Well,","How","`G`","`C`","`T`","`A`","I","To","`G`","`C`","`T`","`A`","I","I","I","To","For","I","You","I","You","A","Using","For","You","I","You","I","Instead","The","Are"]," **":["difficult"]," +1":["to","@raquel","to"]," -":["Imports","How","If","Python's","`@angelo`","class","Why","There","Why","It","It's","Should","Why","This","those","tests","methods","`if`","for","truthiness","Maybe","Make","It","**Please**","Why","Have","it","i","I","I","be","is","since","you","the","pep08","the","getting","the","you","the","the","the","an","do","pep08","the","you","early","you","functions","functions","the","a","when","you","If","an","what","don't","If","using","the","an","the","Trade-off","Also,","I","The","Should","In","Typically","You","Keep","I","satisfy","collect","emphasize","giving","removing","instead","Counter.update","I","This","Degrading"]," ----":["EDIT"]," --spoiler":["space--","space--","space--","space--","space--","space--","space--","space--","space--","space--","space--","space--","space--","space--","space--","space--"]," ..":["and"]," ...":["nary","at","and"]," ..and":["in"]," ..in":["part"]," .isupper()":["is"]," 1)":["I'm","*thymidine*","I","Re.","There"]," 1.":["What","The","Run","The","Line","Line","It","Also","Agreed,","Inline","There","PEP8","If","The","Always","There","Always","Why","Construct","```","If","Why","Why","why","Case","You","The","Why","Why","You're","Why","`key","I"]," 1/":["you","Python's","the"]," 2)":["I","No.","Is","Python's","To"]," 2.":["Most","The","Somehow","Why","`elif`s","```","`_replies`","Why","Whats","given","Liked","That","`input`","You","CamelCase","The","\"return","Try","I"]," 2/":["you","I","pep8"]," 3":["tests"]," 3)":["They","Why"]," 3.":["moving","Still","Parentheses","You","An","Since","For","`input.endswith(x)`","text[-1]","Related"]," 3/":["pep8"]," 4.":["What","Normally","Formatting","For","Perhaps","In","*args,"]," 5.":["What","If","Use"]," 50":["points"]," 6":["Tests"]," 6.":["You"]," 7.":["Consider"]," :)":["Thanks!"]," :S":["I"]," :param":["predicate:","answer:","default:"]," :params":["actions:"]," \u003e":["Things","Sparse","If","Clients"]," \u003e\u003e\u003e":["Bob().hey('...')","Bob().hey('...')","from","Anagram.is_anagram('inlets',","Anagram.is_anagram('inlets',","from","Counter(\"hello","p","p.area_code()","p.number","p.area_code()","dna","dna","print(dna)","len(dna)","dna[0]","dna","'A'","'GG'","'GGG'"]," \u003eReturn":["true"]," \u003eword":["for"]," @adrien":["You're"]," @aiyana,":["I","That's"]," @amani:":["personal"]," @anabel":["Thanks!"]," @aniyah's":["right,"]," @annabell":["I"]," @aron":["Thanks"]," @autumn":["How"]," @bart":["I","updated."]," @bennett":["`reduce`"]," @bennett,":["thanks"]," @berenice":[":"]," @bradley":["thank"]," @brigitte":["makes"]," @carmela":["weird,"]," @carson":["thank"]," @caterina":["My"]," @cleveland:":["Good"]," @coby:":["Only"]," @cooper":["you"]," @corbin":["Hm,"]," @dahlia":["-"]," @darian":["Agree,"]," @dolly":["I"]," @dusty":["+1"]," @eladio":["Huh..."]," @elijah,":["yeah"]," @emily":["-"]," @estefania:":["I","In"]," @estelle:":["I'm"]," @eva":["I"]," @ezekiel":["I"]," @fausto":["yep"]," @garrick":["Thanks"]," @georgette:":["good"]," @geovanny":["Maybe"]," @gerda":["Not"]," @golden:":["is"]," @helen":[":"]," @hertha:":["thanks"]," @hortense":["Thanks,"]," @howard:":["your"]," @ivory":["Thanks"]," @jakayla":["You've"]," @jamey":["Ok,"]," @janet,":["good"]," @javier":[":"]," @javon":["you"]," @jed:":["thanks"]," @jerod":[":"]," @jesse":["thanks"]," @jody":["Thank"]," @judson:":["I","it's"]," @judy":["I"]," @justice:":["`str.strip()`"]," @kayli":["-"]," @kelley:":["yes"]," @kirsten:":["about"]," @kitty":["Oh"]," @kurt":["annotation"]," @leon":["i"]," @lisette":["||="]," @lorenza":["explicit"]," @magnolia:":["he's"]," @malachi":["why"]," @mara:":["I'm"]," @marcelino":["From"]," @marian,":["he"]," @maximo":["good"]," @maye:":["I"]," @mia":["thanks"]," @milford":["do"]," @mohammad":["Thanks"]," @nadia:":["I"]," @nickolas":[":"]," @owen:":["good"]," @paxton":["I"]," @payton":["Can"]," @peyton":["thanks!"]," @precious":["thank"]," @ransom":[":",":"]," @raven:":["You"]," @rhea":["Thank"]," @rhett":["Hopefully"]," @river:":["we"]," @rogelio:":["there"]," @romaine:":["there's"]," @rosario:":["don't"]," @rowan":["thanks,"]," @sabina":["You"]," @sabryna:":["the"]," @sadie":["-"]," @seamus:":["what"]," @seth:":["yes"]," @sidney":["-"]," @therese":["Do"]," @tyson,":["thanks,"]," @vallie":["Thanks"]," @vicky:":["I","Oh,","This"]," @virginie":["-"]," @wilmer:":["I"]," @woodrow:":["I","you"]," @yesenia:":["see"]," A":["little","few","little","small","couple","couple","couple","one-liner","matter","more","few","few","few","few","minor","couple","shorter","classic","classic","fairly","few","bit","nice","friend","few"]," ALL":["="]," ANSWERS":["="]," Abele":["Thanks","--"]," About":["the","the","the","the","the","part","your","as","the"]," Absolutely":["no"]," Accidentally":["submitted"]," According":["to","to"]," Ack!":["Markdown"]," Ack,":["the"]," Action(is_question,":["\"Sure.\"),"]," Action(is_shouting,":["\"Woah,"]," Action(is_silent,":["\"Fine."]," Actually":["in","one"]," Actually,":["a","let","these"]," Added":["a","whitespace","single","docstrings."]," Adding":["blank"]," Additionally,":["I'm"]," After":["nitpicking","a"]," Again,":["pretty","solid"]," Agree":["with","with"]," Agreed.":["Other","I'm"]," Ah":["yes,"]," Ah!":["`collections.Counter`!"]," Ah,":["and","thank","good","nice..","I","good","I","forgot","right.","I","this","I","I","I","I","I","good","cool,","that","yeah,"]," Ah.":["Good"]," Ah...I":["started"]," Ahh":["thank"]," All":["those","three","`pep8`","in","in","helper"]," Almost":["there","good"]," Already":["did."]," Also":["to","to","this","according","it","maybe","about","very","you","I","note","though","check","if","remember","try","if","minor","I'm","what","I","moved","normalizing","have","from","`__init__(self)`","works"]," Also,":["there's","what","there's","I'll","it's","this","I'm","if","I","wouldn't","strings","I","you","in","this","```\\w```","I","for","I","I'm","is","there","none","good","I'm","this","the","there's","while","try","you","even","it","the","another","take","Python","I'd","take","have","the","if","I"]," Alternative":["move"]," Alternatively":["you"]," Alternatively,":["you"]," Although":["it's"]," Although,":["would","as"]," Am":["still","I"]," Amazing!":[":D"]," An":["empty","empty","efficiency","empty","easier","empty","empty"]," Anagram('Orchestra').match('cashregister":["carthorse"]," Anagram('ant').match('tan":["stand"]," Anagram('tan').match('tan":["stand"]," And":["if","I","why","for","that's","out","the","default","it's","yes,","there","don't","re:","yes,","if","write","now","a","I"]," Another":["thing,","approach","though","(simpler)","good","hint:"]," Any":["particular","comments?","idea","hints?"]," Anyhow,":["I've"]," Anyway,":["I","I've"]," Are":["you","your","you","you","there","you","you","you"]," Argh!":["I"]," As":["BrianHicks","I","you","for","someone","for","a","far","mentioned","it","far","you","for","for","an","an","it","SysCoder","a","for","it's","a","i've","for"]," Aside":["from"]," AssertionError:":["['carthorse']","'Woah,","'Whatever.'","'Sure.'","'Whatever.'","'Whatever.'","'Whatever.'","'Whatever.'","'Whatever.'","'Whatever.'"]," At":["least","the","the","first","first,","a"]," AttributeError:":["'NoneType'"]," Awesome":["feedback,"]," Awesome,":["thanks.","thanks"]," Awesome.":["I"]," BOB_SETTINGS":["="]," BTW,":["thanks"]," BUT":["there's",":","in"]," Basically,":["I've"]," Because":["for","[PEP8](http://www.python.org/dev/peps/pep-0008/#public-and-internal-interfaces)","sequence"]," Believe":["me"]," Below":["are"]," Better":["in","naming"]," Beware":["of"]," BinaryFu,":["thanks"]," Bit":["more"]," Bold":["rework!"]," Booleans":["are"]," Btw":["all"]," Btw,":["there","loved"]," Build":["broken!"]," Building":["upon"]," But":["isn't","still,","these","hey,","I","with","I",":","it's","what","in","have","that's","dict","why","it"]," But,":["I","no,"]," But.":["It's"]," By":["that","the","decoupling","restructuring"]," CHILLOUT":["="]," Caching.":["Nice."]," CamelCased":["names"]," Can":["someone","you","you","I","you","I","you","you","anyone","you","you","you","you","you","you"]," Can't":["see"]," Changed":["variable"]," Check":["out","out","for","the","out","out"]," Checking":["`len`","for"]," Cheers":["/u","/u","/u","/u","/u","/u"]," Cheers!":["/u"]," Class":["members","Bob:","Bob:"]," Clean":["and"]," Clear":["and"]," Clear,":["concise,"]," Code":["formatting","looks","is"]," Coincidentally,":["I"]," Colon":["in"]," Combining":["list"]," Comments":["in"]," Communication":["-"]," Complete":["list"]," Completely":["missed"]," Con:":["You"]," Concerning":["private"]," Concise":["-"]," Concise,":["I"]," Congratulation":["on"]," Consider":["if","using","getting","getting","using","doc"]," Considered":["making"]," Cool":["that"]," Cool!":["How"]," Cool,":["thanks!","I","isupper()","thanks"]," Cool.":["You've"]," Cosmetic":["changes..."]," Could":["anyone","you","you","you","the","it","you","consider"]," Couldn't":["the"]," Counter":["object!"]," Counter()":["is"]," Counter(re.findall(r\"\\w+\",":["self.words.lower()))"]," Counter({'you':":["2,"]," Couple":["questions:"]," Creating":["a"]," Currently":["`T`"]," DNA":["="]," Damn.":["The"]," Dang":["it!"]," Decoupling":["phrase"]," Defining":["no-op"]," Definitely":["minimal,","understand","_normalize_"]," Depending":["on"]," Depends":["on"]," Derp,":["left"]," Design":["decision:"]," Did":["that","you","you","you","you","you","you","you"]," Disclaimer,":["before"]," Do":["you","you","you","you","you","you","you","you","you","you","you","the","you","you","i","you","you","you"]," Do'h,":["indeed."]," DocStrings":["should"]," Docs":["added."]," Does":["an","a","this","'s'","this"]," Doesn't":["`str.split()`"]," Doing":["this"]," Don't":["like","use","use","worry,"]," Double":["leading"]," Dropped":["the"]," EDIT:":["Ironically"]," Each":["type"]," Edit:":["[PR"]," Either":["that,"]," Else":["this"]," Else,":["congratulation","don't"]," Ended":["up"]," Essentially":["there","there","there"]," Even":["if","though","though","though","if"]," Excellent":["use"]," Excellent,":["thanks"]," Excuse":["my"]," Explicit":["`else`","`else`"]," Explore":["[Python's","[Python's","[Python's","[Python's"]," Extra":["points"]," Extracted":["the","the"]," FAIL:":["test_anagrams_are_case_insensitive","test_only_numbers","test_question_with_only_numbers","test_calmly_speaking_with_umlauts","test_only_numbers","test_statement_containing_question_mark","test_stating_something","test_talking_forcefully","test_using_acronyms_in_regular_speech"]," FAILED":["(failures=2)"]," FINE":["="]," FYI":["I've"]," FYI:":["`isinstance`"]," Fair":["enough.","warning:","warning:","point.","point","enough,"]," Feedback":["welcome."]," Feel":["free"]," File":["\"anagram_test.py\",","\"bob_test.py\",","\"bob_test.py\",","\"bob_test.py\",","\"bob_test.py\",","\"bob_test.py\",","\"bob_test.py\",","\"bob_test.py\",","\"bob_test.py\","]," Finally":["while","I"]," Finally!!":["."]," Finally,":["consider","are","the","in","the","str.isupper()"]," Fine":["by","with"]," Finicky,":["but"]," First":["and","a","shot","time","thought"]," First,":["read","I"]," Firstly,":["I"]," Fixed":[":)","the","new","up"]," Flagging":["as"]," Follow":["[PEP8"]," For":["the","this","some","example,","a","example","isQuestion,","the","that","instance","all","the","the","current","some","me","some","such","what","this","`has_lower_case_chars`,"]," Forgot":["to","to"]," From":["my","my","my","my","my"]," Functions":["in"]," Fundamentally":["DNA"]," Gap":["is"]," Gee,":["thanks"]," Generally":["it's"]," Generally,":["double"]," George!":["I've"]," Given":["this"]," Giving":["name"]," Good":["to","use","call!","to","to","point.",":)","point,","to","luck","idea","practical","suggestions","questions.","call.","thoughts","points.","idea.","point","idea.","practice","point;","call.","call","luck,","point.","luck!","use","call","point"]," Good,":["It's"]," Good.":["You"]," Great":["points,","work!","point,"]," Great.":["My","Going"]," Grouping":["the"]," Ha,":["I've"]," Had":["some","to","to"]," Hah,":["I"]," Handles":["negative"]," Hardcoding":["the"]," Has":["made"]," Have":["you","you","you","you","a","a","a","you","you","fun.","you","you","a","you","you","you","you","you","you","you"]," Having":["nitpicked"]," Heh":["heh,"]," Hehe.":["I"]," Hej":["Henrik!"]," Hello":["again!",":)"]," Helper":["methods"]," Helpers":["are"]," Hence":["why"]," Here":["are","are","I","were"]," Here's":["the","a"]," Here,":["it"]," Hey":["doerth,"]," Hey!":["Thanks"]," Hey,":["you're","I","good"]," Hi":["phadej,","Xavier,","ScottSedgwick!","Oburejin,","there!","@angeline.","Murph,","@barton,"]," Hi!":["Brave","Thanks"]," Hi,":["my","my","it's","just","nice","nice","nice"]," Hi.":["The","Nice"]," Hiding":["the"]," Hint":[":",":",":"]," Hint,":["please!"]," Hm...":["good"]," Hmh,":["I"]," Hmm,":["`capitalize`","aren't","I"]," Hmm.":["And","Now","I","For"]," Hmmm,":["replacing"]," Horner":["evaluation"]," How":["would","about","about","could","could","would","about","would","would","about","would","can","you"]," However":["if"]," However,":["I'm","going","I","just"]," Hum,":["does","seems"]," I":["always","didn't","think","really","like","wonder","wonder","started","tried","have","like","think","disagree","like","definitely","also","could","used","hadn't","could","wouldn't","use","never","mean","think","like","went","like","disagree.","like","think","just","have","don't","don't","like","wonder","could","am","have","did","haven't","did","considered","think","think","am","tend","put","like","don't","think","think","think","think","can","feel","also","think","don't","actually","don't","like","see","wouldn't","don't","hadn't","hope","like","had","like","actually","like","incorporated","believe","was","always","think","like","like","learned","learned","can","also","like","honestly","don't","like","agree","also","like","like","fixed","moved","submitted","guess","had","like","like","went","didn't","like","think","put","doubt","specify","think","like","don't","changed","added","would","like","really","really","lose","played","do","personally","thought","like","chose","forgot","would,","could","know","prefer","agree","prefer","would","got","thought","wouldn't","went","feel","would","thought","realized","tried","usually","wrote","decided","did","decided","would","think","agree.","was","indeed","didn't","haven't","improved","think","just","improved","agree","gave","think","think","find","think","didn't","changed","see","agree","like","wouldn't","think","don't","see.","can","could","think","disagree","agree","like","like","just","don't","think","think","don't","like","like","think","did","agree","know),","should","see","hope","think","would","would","think","like","think","agree","could","assume","also","think","like","was","don't","agree","stared","grabbed","also","use","think","don't","would","wanted","use","can't","still","think","have","am","like","am","do","took","looked","just","thought","will","took","really","love","do","think","didn't","considered","used","agree","personally","know","would","think","already","like","also","Improved","tried","get","used","also","had","think","know","considered","also","was","wasn't","initially","agree","am","disagree.","thought","think","like","like","think","like","am","am","used","used","think","would","like","like","like","would","like","would","tried","would","would","don't","see","don't","like","would","tried","like","am","agree","think","did","don't","used","know,","like","know,","assume","think","just","think","encourage","chose","would","think","think","think","return","was","like","know,","like","like","recommend","like","know,","like","don't","don't","think","would","would","hadn't","think","updated","would","will","don't","think","like","don't","understand","got","didn't","don't","like","would","know,","like","know,","like","like","know,","read","am","always","used","think","got","agree","like","would","always","placed","never","agree,","moved","could","believe","like","would","like","think","like","would","chose","should","would","totally","would","encourage","may","have","considered","was","decided","was","like","very","could","picked","actually","took","was","know","like","like","guess","for","looked","looked","have","was","appreciate","know","have","considered","don't","think","agree","was","find","personally","don't","would","agree","couldn't","have","have","tried","come","will","left","really","like","think","think","really","have","don't","decided","would","kind","feel","took","really","was","like","like","used","like","think","like","tried","think","like","have","like","would","like","like","really","really","like","generally","think","agree","agree","probably","used","stepped","come","think","also","tried","would","like","like","now","tried","know","disagree","think","admire","wouldn't","didn't","took","think","made","haven't","like","do","noticed","hope","started","have","mean,","know","wanted","think","agree","would","Implemented","tried","am","would","think","like","spotted","would","like","prefer","like","think","switched","think","usually","don't","like","like","liked","like","like","found","liked","think","thought","think","think","agree","really","think","didn't","also","feel","am","agree","think","have","think","have","used","agree,","think","think","saw","don't","was","really","agree","don't","like","think","found","find","like","also","am"]," I'am":["not"]," I'd":["get","go","put","argue","suggest","rather","start","suggest","be","love","prefer","never","agree","agree","probably","try","probably","also"]," I'll":["try","disagree","try","fix","admit","try"]," I'm":["not","not","not","not","an","sure","going","going","not","however","fairly","wondering","aware,","not","personally","not","guessing","kinda","also","taking","not","a","really","disagree","with","not","not","submitting","not","not","a","not","not","using","not","admittedly","still","not","not","using","not","really","not","not","really","thinking","not","not","not","using","just","open","a"]," I've":["no","extracted","seen","been","also","got","tried","submitted","been","replaced","learned","added","often","replaced","heard"]," I,":["personally,"]," IMHO":["this"]," Ideally,":["when"]," If":["not,","you","I","the","you're","you","it","you","you","you","you","you","you","the","I","an","you","you","silent","I","you","you're","you","you","you","using","they","you","statement","I","you","there","you're","you","you","exercism.io","you","``number``"]," Ignore":["this"]," Imagine":["if","if","if"]," Imho":["a"]," In":["`match`,","`match`,","what","addition,","this","first","this","addition,","addition,","[8]:","[9]:","[8]:","[9]:","[48]:","[49]:","working","my","this","majority","my","theory,","every","python","earlier","`Phrase.__init__`","Python","fact","fact","my","my","your","this","the","general,","read-me","that","some","terms","any","this","the","Python","`isAllCaps`,","`hey`,","`line","general","contrast,","both","the","general,","retrospect,","all","your","this","function","function","``DNA.__containts__(nucleotides)``,","my"]," In-lining":["method"]," Incorporated":["BrianHicks'"]," Indeed":["I"]," Indeed,":["thanks","didn't","this","thanks"]," Initial":["Q&D"]," Initially":["I","I"]," Injecting":["a"]," Instead":["of","of","of","of","of","of","of","of","of","of"]," Interesting":["trade-off","take","problem!","solution.","solution.","suggestions","approach."]," Interesting.":["I"]," Interestingly,":["you"]," Is":["there","there","that","the","there","this","there","DNA.nucleotides","`speaker`","there","there","there","it","the","there","there","it","line"]," Isn't":["your"]," It":["looks","makes","doesn't","looks","looks","might","turned","looks","would","depends","would","boils","makes","would","would","looks","adds","is","will","will","will","has","kinda","look","turns","is","is","is","still","would","was","fails","removes","might","was","matches","acts","would"]," It'll":["take"]," It's":["true,","all","still","especially","nice","my","up","pythonic","actually","best","more","better","a","ugly","indeed","not","hard","recommended","nice","actually","grate","just","good","also","great","very","bad","grate","great","great","not","great"]," It’s":["a"]," Just":["one","a","something","as","a","wondered","FYI","as","imagine","for","for","a","a","a","generating","did","a","an","some"]," Kudos":["for","for"]," L3,":["L5"]," L3:":["`not","Do"]," L5:":["`message.isupper()`","Python"]," L7:":["`message.endswith(\"?\")`"]," Landed":["here"]," Last":["tip:"]," Last,":["would","I"]," Lastly,":["try"]," Learned":["about"]," Let's":["assume","say"]," Letter":["count"]," Like":["the"]," Line":["12:","13","1:","8:","11:","12:","9,","2.","10.","4","4","21","13"]," Lines":["3"]," List":["comprehension","comprehensions","comprehension","comprehensions","comprehensions"]," Look":["for","at","for","at","into"]," Lookin'":["good!"]," Looking":["nice!","nice.","good!","at","forward","nicer.","back"]," Looks":["good","good!","good","good","great!","good.","good","good","good","great","good","pretty","good","good.","fine,","good.","good","good.","good","good,","good.","good.","good.","great","quite","like","good.","very","like","overcomplicated","good,","better!","good.","good!","good!","great!","exactly","great.","great.","almost","like","good!","good","like","great","good.","so","good","good","good"]," Made":["`is_anagram_of()`","`.number`","the"]," Make":["sure"]," Makes":["sense","sense","sense--could"]," Making":["this"]," Man,":["I've"]," Many":["thanks"]," May":["have"]," Maybe":["the","putting","I","instead","input","you","try","(quite","I","the","they","docstring","these","the"]," Meh":["this"]," Method":["names"]," Methods":["`Bob.hey`","on"]," Might":["be"]," Minimal":["working"]," Minor":["nitpicks","error"]," Mis-submission.":["Please"]," Mixing":["good"]," Mmm...":["Is"]," More":["importantly"]," Most":["linting","of"]," Moved":["sequence"]," Moving":["the","the"]," Much":["better!","more","cleaner","better"]," My":["comments","bad","first","goal","only","problem","issue","idea","argument","first","solution","first","initial","sense","attempt","questions:","first","goals","Goal","first","version","last","``DNA``"]," Nah,":["I"]," Nailed":["it."]," Name":["`input`"]," Named":["`nbottles()`"]," Naming":["around"]," Nearly":["a"]," Neat":["approach!","tricks"]," Neat!":["The"]," Neat,":["I","I"]," Needing":["to"]," New":["style","to"]," Nice":["one!","way","'n","approach.","abstraction","touch","nit!","approach",":)","use","solution.","use","and","imperative","use","work,","an","structure.","usage","and","solution.","and","and","and","and","use","approach","approach.","approach.","approach."]," Nice!":["A","A","I'm","way","Clean"]," Nice,":["concise.","it's","I","short,"]," Nice.":["A","I","We","I"]," Nit:":["strings"]," No":["worries.","admin","worries","no..","special","one","need","more","need","comments"]," No,":["it's","artefact"]," Noob":["question:"]," Nope,":["this","not"]," Normally":["if","I","I'd","I"]," Not":["too","to","everything","many","fond","sure","sure","very","a","too","very","generic"]," Note":["sure"]," Note:":["there's"]," Notice":["how"]," Now":["how","this","could","for","how","that","for","you","that's","you","respects","try","for","it"]," Now,":["good"]," Nowhere":["are"]," OK,":["thanks","thanks","I"]," Of":["course"]," Of,":["I"]," Oh":["wow!","yes,","and","also","and","and","and","and"]," Oh!":["Impressive!"]," Oh,":["so","that","cool.","one","forgot","thank","Counter,","I","I","interesting.","btw.","man.","great!","and"]," Oh.":["Yeah..."]," Ok":["my","you","this","now"]," Ok,":["cool.","thanks","my","thank","this","I","you","we","why","maybe","I","So","I"]," Okay,":["so","figured"]," Okay.":["This"]," On":["the","one","the","line","line","the","a","line","line","line","`line","`line","`line","Line","line"]," Once":["again","you","again"]," One":["cool","more","thing","thing","other","line","suggestion","of","nit","way","very"]," Only":["(and","thing"]," Ooh,":["nice,"]," Oops!":["I"]," Oops!!":["importing"]," Oops.":["I"]," Ops.":["Wrong"]," Or":["something","maybe","I","I"]," Order":["matters"]," Organization":["looks"]," Originally":["planned"]," Other":["than","than","than","than","than","than"]," Otherwise":["looks","very","this"]," Otherwise,":["looks","looks","you","added"]," Ouch":["and"]," Ouch,":["one","scratch","missing","please"]," Out[48]:":["0.04090690612792969"]," Out[49]:":["0.1596670150756836"]," Out[8]:":["7.893460988998413","7.893460988998413"]," Out[9]:":["5.30908203125","5.30908203125"]," Over":["all,"]," Overall":["the","looks","though","I","I"]," Overall,":["solid"]," P.S.":["I"]," PEP":["says"]," PEP08":["(naming"]," PEP8":["says","says","also"]," PS:":["Sorry"]," Parentheses":["around","in","in"]," Part":["2"]," Parts":["of"]," Perfect":["except"]," Personally":["I","I"]," Personally,":["I"]," Phrase":["could"]," Please":["pay","upgrade","use","take","take","feel","argue","take","take","consult","try"]," Polymorphism":["-"]," Positively":["brilliant!"]," Pretty":["sure","clear","concise!","clean,","clean,"]," Previously":["my"]," Pro:":["It's"]," Probably":["object","simpler"]," Put":["`if`"]," Putting":["the","the"]," Python":["strings","attribute","class","has","also","strings","is"]," Python's":["`str`","`isupper()`"]," Pythonistas?":["Anyone?"]," Pythons":["built-in"]," QUESTION,":["SILENECE"]," Question:":["Are"]," Quite":["clean"]," Quite.":["Nicely"]," RNA":["="]," Ran":["18","18"]," Rather":["easy"]," Re":["the","returning","whitespace:"]," Re.":["variable"]," Read":["[PEP8](http://www.python.org/dev/peps/pep-0008/)."]," Realized":["I"]," Recently":["I","I"]," Refactered":["and"]," Regarding":["conversion","the"]," Regardless":["of"]," Regex":["seems","seems","are"]," Regular":["expressions"]," Remember":["to","to","to","to","to","to","to","to","to"]," Remove":["the","the","method"]," Renamed":["local"]," Replaced":["the","Dictionary"]," Representing":["a"]," Restructuring":["the"]," Resubmitted:":["http://exercism.io/submissions/6d3d62f1c953ef9fffe96836"]," Reusing":["the"]," Right":["now,","now"]," Roger":["that."]," RuntimeError:":["maximum"]," Same":["goes"]," Sanitization":["of"]," Se":["others"]," Second,":["as","```greeting.upper()"]," Secondly,":["you"]," See":["e.g.","previous","latest","also:","my"]," Semicolon":["at"]," Separate":["functions","class"]," Separating":["the"]," Setting":["`response`"]," Shorter":["version:"]," Should":["actually","`valid_nucleotides`","use"]," Side":["note,"]," Simple":["and","and","and","docstring"]," Simple,":["clean"]," Simpler":["and"]," Simplest":["possible"]," Simplicity":["for"]," Since":["`message`","you","all","every","you","in","the","this"]," Single":["uderscore"]," Skip":["to"]," Smart":["approach"]," Smooth":["+1"]," So":["true!","the","what","it","you","you","everyone","you're","it","first"]," So,":["there","on","full"]," Solid":["logic"]," Some":["might","nitpicks","nitpicks:","suggestions:","feedback","assorted","suggestions"]," Somebody":["else"]," Somehow":["the","I"]," Someone":["else","left","left","else","told"]," Something":["like","like","wrong","like"]," Sometimes,":["you"]," Sorry":["about","but"]," Sorry,":["the","not","duplicate"]," Sparse":["is"]," Speling":["mistak"]," Split":["is"]," Splitting":["on"]," Still":["in","looking","you","finding","have"]," String":["objects"]," Strings":["have","have","in"]," Strings/lists":["accept"]," Style":["linters"]," Subclassing":["`int`"]," Sure":["can!"]," Sure,":["that","I","but","why"]," Sweet":[":)"]," Sweet!":["You"]," Sweet.":["+1"]," Switched":["translate"]," TDD":["mandates"]," THANK":["YOU!"]," THERE":["IS"]," Tanks":["you"]," Testing":["for","against"]," Tests":["fail","don't","don't"]," Thank":["you!","you.","you.","you","you","you.","you","you.","you.","you","you!","you.","you.","you","you,","you","you","you","you","you","you.","you","your","you","you","you","you","you"]," Thanks":["magopian","for","for","for","for","for","for","for","for","for","Zoldar.","for","for","for","for","for","for","for","again!","for","Ana!","for","for","for","for","for","everyone","for","for","for","for","for","-","for","for","for","for","for","for","a","for","for","@derick","for","for","@jairo","for","for","for","for","for","@sheldon,","for","@amos,","you","for","for","for","@barrett,","for","to","for","for","for","for","to","edliaw","for","for","for","for","a","for","for","for","to","for","to"]," Thanks!":["I","I","I"]," Thanks,":["updated.","that","I","useful","didn't","rsslidnphy.","nice","got","BrianHicks!","that's"]," That":["was","does't","said,","said,","would","being","assertion","code","being","would","makes","first","said.","is"]," That's":["better","definitely","true,","just","fair.","fair!","where","quite","quite","a","a"]," The":["code","documentation","generator","organization","convention","description","description","use","updated","second","fact,","KISS","word_count","built","\"Showing","\"predicate/action\"","`import","declaration","alternative","idea","details","advantage","obvious","input","straightforward","`return","reason","rest","additional","names","Statement","Language","PhraseType","`_replies`","main","double-underscore","character","design","test","`elif`","solution","length","class","tests","first","whole","`re.compile`","`cache_result`","code","most","\"Bonus","is_shouting","only","only","case","`collections.Counter`","silence","is_shouting","first","comment","choice","reason","`clean_phrase`","interface","right","regular","predicate","test","only","list","problem","intent","name","first","'for'","last","`to_rna`","only","second","`ANSWERS`","only","program","solution","UPPER","really","endswith()","list","`defaultdict`","tests","code","`try`/`except`","method","test","closing","reason","requirements","way","code","code","code","code","code","code","code","code","outer","one","most","translate"]," Then":["there","I","about","you"]," There":["is","should","are","are","are","are","are","are","are","is","are","might","is","is","are","are","is","are","is","are","are","is","is","were","is","are","is"]," There's":["an","a","a","a","a","another","a","a","also","more","a","more","a","subtle","some","an","actually","still","a","a"]," These":["trade-offs","are","are"]," They":["are"]," Things":["that"]," Think":["about","about","about","about"]," Thinking":["about"]," Third,":["you"]," This":["seems","is","looks","looks","might","looks","looks","is","is","is","kind","breaks","solution","is","is","is","is","is","is","is","condition","is","minimal","code","is","makes","on","solution","looks","is","looks","section","looks","iteration","implementation","is","`Anagram#_canonicalize`","is","code","is","approach","was","makes","being","may","is","is","was","code","could","implementation","version","is","looks","is","is","is","doesn't","is","is","is","solution","is","gets","is","is","passes","code","is","looks","is","is","isn't","led","is"]," This,":["together"]," Those":["variables"]," Though":["this"]," Thought":["of","about"]," Three":["cheers"]," Time":["to"]," Tip":["from"]," To":["be","return","continue","a","eliminate","avoid","be","answer","make","check","use","test","test","test"]," Too":["much"]," Took":["a"]," Totally":["different","agree"]," Traceback":["(most","(most","(most","(most","(most","(most","(most","(most","(most"]," Trade-offs":["considered"]," True,":["there","but"]," Try":["making","to","to","changing","#2","something","using"]," Trying":["to","to"]," Turns":["out"]," Two":["things:","blank","blank"]," Type":["Checking:"]," Ugh,":["style"]," Unfortunately":["there's"]," Unfortunately,":["this"]," Unique":["name"]," Unless":["I","you"]," Updated":["to"]," Usage":["of"]," Use":["`next`","`is`","[http://docs.python.org/2/library/stdtypes.html#truth-value-testing](http://docs.python.org/2/library/stdtypes.html#truth-value-testing)","better","of","`string.strip()`"]," Used":["negative","internal","if,"]," Using":["a","`Counter`","this","`Counter`","regexp","`not","regexps","a","`getattr`","regexps","`message.strip()`","`str.translate`","`if","`s`","negative"]," Usually":["it's","the"]," Utterance":["is"]," Version":["4","that"]," Very":["cool!","nice","confused","nice","clean","nice.","nice!","nice,","straightforward.","nice","cool!"]," WIP.":["GFY"]," Wait!":["It"]," Was":["inspired"]," Wasn't":["it"]," We":["still","arrived","use"]," We're":["going"]," We've":["arrived"]," Weird.":["Checked"]," Weirder.":["I"]," Well":["typically","we","in","done."]," Well,":["that's","since","I","LOC","I","it's","the","the"]," What":["about","about","about","would","effect","do","do","do","you","you","would","about","about","are","do","happens","would","would","programming","would","if","are","other","a","do","is","do","kind","does","I","about","version","I","version","is","I","about","happens","is"]," What's":["your","the","the"]," What,":["you"]," When":["it","it","I","using","I","making","are","testing","testing","you","both"]," Where":["are"]," Which":["is","method"]," While":["this","I","`_is_shouting`","code","representing","including"]," Whoops,":["meant","ignore"]," Whoops.":["Line"]," Why":["have","would","make","`rstrip`","do","exposing","not","aren't","are","not","the","does","would","did","do","are","did","are","you","is","make","you","didn't","you","do","did","you","not","did","did","not","do","do","you","the","do","do","use"]," Why?":["What's"]," Will":["refactor"]," With":["my","regards","some","regards","that"]," Without":["split"]," Works":["for","for"]," Would":["it","it","that","`collections.Counter`","it"]," Wouldn't":["aliasing"]," Wow":["thanks","you"]," Wow!":["Well","Simple"]," Wow,":["`re.findall`","this","that","you","thanks"]," Xavier":["was"]," Yay":[":)"]," Yay,":["I"]," Yeah,":["really","you","I","constants","I","I","as"]," Yeah.":[":)"]," Yep,":["that's"]," Yes":[",","I","I"]," Yes,":["that's","Bob","but","I","but","in","I","this","PEP-263.","something","I","I'm","I"]," You":["might","could","have","seem","can","should","can","might","can","can","also","can","could","can","can","can","understand","may","must","can","could","don't","don't","can","can","can","can","don't","may","can","could","don't","could","could","comment","still","can","could","could","could","can","can","could","could","can","still","could","could","have","may","may","don't","should","mean","code","may","can","can","may","could","could","could","don't","can","can","can","may","may","could","can","can","want","don't","have","could","could","should","should","could","should","should","could","could","should","also","should","could","should","should","should","could","could","could","could","could","definitely","could","could","also","could","should","should","also","might","could","need","could","could","may","could","are","could","can","could","could","should","could","can","could","have","have","could","could","could","could","could","could","could","should","could","should","don't","could","should","could","could","should","could","could","should","could","should","could","could","could","should","should","are","use","can","could","might","should","can","might","might","could","don't","are","underestimate","ignore","defined","can","can","could","can","might","could"]," You'd":["have"]," You'll":["have"]," You're":["not","right,","still","right.","absolutely"]," You've":["got","nicely","got"]," Your":["shouting","arguments","call","code","code","code","coding","code","code","\"is","ifs","code","if","code","code","suggestion","control","code"]," Zoldar":["nailed"]," Zoldar,":["who","who"]," [1]:":["http://docs.python.org/2.7/howto/functional.html"]," [PEP":["8](http://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements)","8"]," [PEP8":["says](http://www.python.org/dev/peps/pep-0008/#indentation)"]," [PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations)":["has"]," [PEP8](http://www.python.org/dev/peps/pep-0008/)":["recommends"]," [rna_readme]:":["https://github.com/exercism/exercism.io/issues/1310"]," [self.verse(n)":["for"]," \\__init__":["or"]," _ZERO_BOTTLES":["="]," __Thanks":["to"]," __all__":["="]," _silence":["is"]," `":["'Woah,"]," `\"\".join(map(...`":["is"]," `\"separator\".join(strings)`":["is"]," `''.join()`":["and"]," `(x":["for"]," `.raw`":["and"]," `;`":["is"]," `Bob.is_yelling`":["makes"]," `Bob`":["object"]," `Counter`":["is"]," `DNA.dna`":["could","could"]," `DNA`":["being"]," `Line":["4`","8`","10`","16,","13-20`"]," `None`":["and"]," `Phrase._normalize`":["paid"]," `Phrase.word_count`":["looks"]," `Utterance`":["is"]," `Word.really_raw`":["and"]," `[^0-9]`":["can"]," `\\w+`":["will"]," `__init__`":["is","methods"]," `__magic__`":["names"]," `_standard_form`":["is"]," `_ucfirst`":["can"]," ```":["counter.Counter(self._words())","python","python","python"]," ```#":["Would","of"]," ```base_chars":["="]," ```not":["text```"]," ```return":["dict(self.REPLIES).get(reply_type,","(_word"]," ```s[-1]":["=="]," ```sanitize```":["could"]," ``super()``":["allows"]," `a":["="]," `all(char.isupper()":["for"]," `char":["="]," `class":["Bob(object):`"]," `collections.Counter`":["might","and"]," `converse":["is"]," `count_phrase":["="]," `endswith`":["is"]," `existing_robots`":["is"]," `from":["string"]," `has_anagram`":["should"]," `if":["not","converse","self.test_blank():","s.isupper():`","self._checkForNoContent(message)`","not","re.search(r\"\\?$\",str)`"]," `if(re.search(r\"[A-Z]\",str)":["and","and"]," `if(str.strip()":["=="]," `import":["this`.","string`"]," `input.endswith'('?')`":["vs"]," `input.isupper()`":["vs"]," `input`":["is"]," `is_upper()`":["is"]," `is_valid`":["does"]," `isupper`":["is"]," `new_phrase":["="]," `no_input`":["and"]," `normalize()`":["can"]," `normalized_word":["in"]," `not":["input"]," `phrase.translate(None,":["PUNCTUATION)`","string.punctuation)`"]," `print":["self.phrase`"]," `python":["bob_test.py`"]," `question`":["is","might"]," `re.split()`":["returns"]," `replace`":["method"]," `responses`":["shouldn't"]," `return":["(w","phrase.isupper()`"]," `s`":["indeed"]," `safe_strip`":["is"]," `self.message":["=","="]," `self.nucleotides.translate(maketrans(\"ACGT\",":["\"ACGU\"))`"]," `self.string.isupper()":["and"]," `self.string.strip()":["=="]," `sentence.upper()":["=="]," `str.format()`":["is"]," `str.replace`":["would"]," `str`":["is","is"]," `strand`":["is"]," `string`":["module"]," `to_rna`":["is"]," `translate`":["import"]," `validate`":["means"]," `word_count`":["returns"]," a":["=","matter"]," a)":["It","It"]," adds":["an"]," again,":["class"]," and":["that","then","side-note","also","poking","pep8","leave","sentence[-1]","so","..."]," any(c.isalpha()":["for"]," any(x.isalpha()":["for"]," are":["you"]," aren't":["you"]," asking":["a"]," assert":["a._sequence"]," avoiding":["using"]," b":["="]," b)":["It","I'm"]," baba-k:":["Sorry,"]," bool(a":["is"]," bool(a)":["#"]," bool(not":["a)"]," but":["I'm","that","I'm","it's","the"]," c)":["\"It"]," can":["be"]," changed":["get_verse_components()"]," check":["out"]," cl":["="]," cl[0]":["="]," cl[1]":["="]," class":["Carl(Bob):","MessageClassifier(object):","MessageClassifier(object):","Bob(object):","MessageProperties(object):","Bob(object):","methods","Phrase(object):","Action(object):","Bot(object):","Bob(object):","Bob(object):","Bob(object):","Bob(object):","DNA:","DNATests(unittest.TestCase):","Bob:","Bob:"]," collections.Counter":["can"]," comment":["as"]," common,":["next"]," concerning":["the"]," consider":["also"]," considered":["putting"]," contains_alphas":["="]," counts":["="]," counts[word]":["="]," d":["=","=","="]," d)":["\"It"]," data":["structure"]," def":["test_detect_simple_anagram(self):","test_detect_simple_anagram(self):","to_rna(self):","hey(self,","hey(self,","hey(self,","checkend","hey(self,","checkend","issilence(msg):","__init__(self,","isslience():","classify_message(msg):","hey(self,","__init__(self,","__issilence(msg):","is_shouting(str):","dna_to_rna(dna):","hey(msg)","_is_statement(self,","isQuestion(s):","isQuestion(s):","answer_if_question(message):","hey(self,","methodonce(prop):","decorator(f):","wrapper(self,","__is_empty(self,","once(f):","wrapper(*args,","is_empty(self,","__init__(self,","word_count(self):","__init__(self,","__init__(self,","hey(self,","is_silent(input):","is_shouting(input):","is_question(input):","Bob():","hey(self,","hey(self,","hey(self,","test_more_silence(self):","test_cannot_modify_db_outside_accessors(self):","hey(self,","normalize(self,","hey(self,","normalize(message):","hey(self,","_normalize(message):","foo","to_rna(self):","is_leap_year(self):","hey:","yelling(s,","__init__(self,","to_rna(self):","word_count(self):","test_many_robots_still_have_different_names(self):","test_transcribes_cytidine_unchanged(self):","test_transcribes_guanosine_unchanged(self):","test_transcribes_adenosine_unchanged(self):","test_transcribes_thymidine_to_uracil(self):","test_transcribes_all_occurences(self):","hey(self,","_isQuestion(self,","_isYell(self,","_isNothing(self,","_isNothing(self,","_isNothing(self,"]," del":["self.school.db[2]"]," didn't":["realize"]," does":["not"]," don't":["you"]," double-underscores.":["There's"]," each":["predicate"]," elif":["is_question(sentence):","sentence.endswith(\"?\"):","\"shout\"","\"question\"","self._is_statement(stimulus):","bar:","self.is_yelling(msg):","self.is_question(msg):","bar:","self.test_caps():","self.test_question():","statement[-1:]","phrase.is_shout():","phrase.is_question():","self._isQuestion(msg):","self._isNothing(msg):"]," elifs/else":["in"]," else:":["return"]," elsif":["msg"]," excellent!":["I'd"]," figured":["i'd"]," filter":["function"]," first":["you"]," for":["`word_count`,","ss","s","action","r","word","word","word","this.","i","word","word","word"]," forgot":["the"]," found":["\"Counter\""]," from":["bob","collections"]," good":["point,"]," has_key":["syntax"]," have":["you"]," having":["\"composable\""]," how":["about","Bob"]," https://github.com/Pylons/pyramid/blob/master/pyramid/decorator.py":["enjoy!"]," i":["guess","know,","think","think","like","was","hate","like"]," i've":["done"]," idiom":["for"]," if":["message","message:","message","helpers.is_interojection(message):","screamAt(comment):","is_silence(sentence):","sentence","checkend(heard):","checkend(heard):","msg","msg.endswith(\"?\"):","msg.isupper():","\"silence\"","msg","msg.isupper():","msg.isupper():","msg","x","msg","predicate(message):","s[-1]","message.endswith('?'):","foo:","value","not","self.is_empty(msg):","foo:","foo:","bar:","ss","you","[expression","x:","y:","x:","y:","x:","y:","_word)```","not","action.match(input):","`not","word_count","is_silent(msg):","is_shout(msg):","is_question(msg):","a:","b:","z:","len(self.statement.strip()","message","self.statement","not","not","phrase.is_silence():","r[0](input):","self._is_question(msg):","word:","len(what_I_say_to_bob):","shouting()","is_anagram(word):","self._isYell(msg):","msg.endswith('?'):","msg.isupper():","len(msg.strip())","len(msg.strip())","sentence.is_shouting():","Sentence.is_shouting(sentence):","nothingspecial.handles(str):","yellatme.handles(str):","message","not","not","not"]," imho":["_is_yell()"]," import":["helpers","string"]," improved":["whitespace"]," in":["`sing`,","self.phrase.lower().split()","instance","python"]," input":["="]," instead":["of","of","of"]," is":["less","different","\"protected.\"","the","the"]," is_silent":["function"]," is_singular_noun(),":["is_count_zero()"]," iterating":["over"]," it’s":["quite"]," just":["`__foo`."]," keep":["it"]," leak":["through!"]," len(set(s)":["&"]," lettercount":["instead"]," line":["19:","22:","12:","14:","8","10"]," lines":["7-10"]," logical":["checks"]," lol":["wat."]," looking":["good!"]," looks":["really"]," matches":["="]," maybe":["making","you"]," me":["too,","all"]," message":["=","=","=","=","=","="]," msg":["="]," msg_properties":["="]," my":["`word_count`"]," new_message":["="]," next(r":["for"]," nice":["approach,"]," no":["idea"]," norm":["="]," not":["necessarily.","liking"]," note":["the"]," nothing":["clever."]," nucleotides":["is"]," occurences":["instead"]," of":["course"]," ok,":["thanks","fixed"]," on":["line"]," only":["one","that"]," or":["more","maybe"]," otherwise":["nice"]," oups....":["i"]," pep":["8"]," pep-8":["says","also"]," pretty":["simple"]," print":["\"message","\"message","cl","'true'"]," print(hey(\"bar\"),":["\"\\n\")"]," probably":["could"]," prompt.endswith(\"?\")":["rather"]," properties":["="]," python":["bob_test.py"]," question":["is"]," re.":["filter,"]," read":["particularly"]," really":["*REALLY*"]," recommended":["way"]," renamed":["the"]," replay":["="]," reply":["=","=","="]," response":["="]," responses":["="]," result":["=","=","="]," return":["''.join(self.RNA_MAP.get(char)","\"Whoah,","super(Bob,","'Woah,","\"Sure.\"","string.endswish(\"?\"):","\"Sure.\"","string.endswish(\"?\"):","msg","msg","set([\"silence\"])","properties","\"Fine.","\"Woah,","\"Sure.\"","\"Whatever.\"","msg","\"Fine.","\"Woah,","\"Woah,","\"Fine.","str","dna.replace(\"T\",","self.inquiry.endswith('?')","'Whatever.'","stimulus.endswith('.')","response","True","False","s[-1]","'Sure.'","result","value","wrapper","decorator","True","cl[1]","wrapper","'Fine.","'Woah,","'Sure.'","'Whatever.'","bar","foo","baz","bar","foo","baz","not","dict(Counter(","True","False","\"Fine.","\"Woah,","\"Sure.\"","\"Whatever.\"`","a","b","c","a","b","a","b","action.answer","self._default","not","input.isupper()","input.strip().endswith(\"?\")","Bot(**BOB_SETTINGS)","ifilter(lambda","func_a()","func_b()","func_z()","func_default()","True","False","len(self.greeting.strip())","False","re.search('[abcdefghijklmnopqrstuvwxyz]',","bool(re.match('^([^a-z]+)$',","self.dna.replace('T','U')","phrase.translate(trans_table,","'Fine.","'Fine.","'Woah,","'Sure.'","'Whatever.'","self.y","response","\"Sure.\"","self.sequence.replace('T',","counts","\"\\n\".join(","\"....\"","matches","reply","True","False","True","False","True","False","True","False","len(msg.strip())","\"Fine.","\"Woah,","None"]," returns":["True."]," robot":["="]," rules":["="]," s/standarize/standardize/g,":["no"]," same":["advice"]," say":["is"]," seems":["slightly"]," seldom":["used?"]," self._NOCONTENT":["="]," self._actions":["="]," self._default":["="]," self.answer":["="]," self.assertEqual('A',":["dna.DNA('A').to_rna())"]," self.assertEqual('C',":["dna.DNA('C').to_rna())"]," self.assertEqual('G',":["dna.DNA('G').to_rna())"]," self.assertEqual('U',":["dna.DNA('T').to_rna())"]," self.assertEqual({2:":["{\"James\",","{\"James\",","{\"James\",","{\"James\","]," self.assertNotEqual(robot.name,":["Robot().name)"]," self.assertRaises(AttributeError,":["setattr,"]," self.bob.hey(\"Let's":["go"]," self.bob.hey('Tom-ay-to,":["tom-aaaah-to.')"]," self.isquestion":["="]," self.isshout":["="]," self.issilence":["="]," self.match":["="]," self.message":["="]," self.msg":["="]," self.phrase":["="]," self.school.add(\"Blair\",":["2)"]," self.school.add(\"James\",":["2)"]," self.school.add(\"Paul\",":["2)"]," self.school.db[2]":["="]," self.sequence":["is","="]," self.statement":["="]," self.words":["="]," setattr(self,":["prop,"]," should":["be:"]," since":["i"]," so":["much","isn't","I","i"]," strip()":["works"]," stripped":["spaces"]," such":["low"]," sum([x0":["!="]," sure,":["but"]," switched":["to"]," take":["a"]," thanks":["for","for","for","for","for"]," thanks.":["great"]," that":["I","`__foo`"]," the":["logic","working","method","action","continue","initial","whole","other","whole","other","whole","lower()"]," think":["about"]," this":["is","is","way,","is"]," thought":["your"]," thx":["for"]," took":["me"]," tried":["to"]," trim":["seems"]," try":["to"]," u":["can"]," uhhmm":["??"]," value":["=","="]," very":["nice.","different"]," vocab":["="]," well":["I"]," what":["do","about"]," what's":["the"]," whatBobHeard":["="]," which":["is","seems"]," while":["this","the"]," why":["did","not","not"]," will":["return"]," with":["using"]," without":["elif"]," would":["there","print","it","this","have"]," wow,":["theres's"]," wrt/":["general","the","pythonicity:","initializer,","class","the","naming:","MethodDispatcher,","design:","implementation:","implementation,","list","implementation","design:","part","design,","one-liner","`Anagram.match`,","implementation,","implementation:","design:"]," yeah,":["i"]," yer":["ma"]," yes.":["Because"]," {grade:":["tuple(names)"]," {n:":["self.count(n)"]," {nucleotide:":["self.count(nucleotide)"]," …which":["might"],"! 123":["#"],"!). Hope":["this"],"!= \"\"":["and"],"!= 'Woah,":["chill","chill"],"!= None`?":["Also"],"!= b`":["into"],"!= filter":["object"],"!= other._raw`":["instead"],"!= s`":["is"],"!= x1":["for"],"\" \"":["(one"],"\" \",":["you"],"\" \"`":["and"],"\" (one":["space)"],"\" Bob":["answers"],"\"\" ==":["None"],"\"\" and":["str.isupper()"],"\"\" if":["msg"],"\"\" or":["message"],"\"\"\" A":["dead"],"\"\"\" Converts`":["and"],"\"\"\" Exercism.io's":["entry"],"\"\"\" maps":["a"],"\"\"\"Bob is":["a"],"\"\"\"In conversation,":["Bob's"],"\"\"\"You cannot":["shout,"],"\"\").strip()) because":["it"],"\"\"` can":["be"],"\"\"`. Or":["even"],"\"\"``` because":["these"],"\"\"``` is":["a"],"\"\"```, as":["you"],"\"# When":["Bob"],"\"#!?\" ==":["\"#!?\".upper()"],"\"#shout\" comment":["becomes"],"\", you":["are"],"\"1\" from":["a"],"\"?\"\"), I":["don't"],"\"?\". Keep":["up"],"\"?\"` seems":["higher"],"\"?\"` since":["it"],"\"?\"``` is":["a"],"\"A day":["of"],"\"ACGU\")`. If":["you"],"\"Anagram\" -":["it's"],"\"Are you":["sure?\","],"\"Batteries Included.\"":["I"],"\"Be that":["way!\"."],"\"Blair\", \"Paul\"}},":["self.school.db)","self.school.db)","self.school.db)","self.school.db)"],"\"Bonus points\"":["version"],"\"Check if":["the"],"\"Counter\" which":["is"],"\"Counter()\" from":["collections"],"\"DNA is":["a"],"\"FAILED (failures=2,":["errors=1)\""],"\"Falsy\" string":["checking..."],"\"Fine, be":["that"],"\"Fine. Be":["that","that","that","that","that","that","that","that","that","that","that","That"],"\"Go to":["the"],"\"Hey, let's":["make"],"\"I can":["write"],"\"I like":["pie.\""],"\"I need":["to"],"\"In the":["face","face"],"\"Is the":["statement...\""],"\"It is":["better","better"],"\"LOOK OUT!\",":["\"Are"],"\"Language\" used":["in"],"\"Looks great\"":["since"],"\"Make it":["Works\"","right\""],"\"No more":["bottles"],"\"None\" special":["case"],"\"None\" would":["be"],"\"OK, use":["`message`"],"\"Private\" (I":["prefer"],"\"Private\" methods":["are"],"\"Python's fault\"":["-"],"\"Pythonic\" conventions":["and"],"\"Readability counts\".":["`input`"],"\"Return that\"),":["not"],"\"Returns True":["if"],"\"Returns a":["string"],"\"Returns the":["pathname"],"\"Rules Map\"":["was"],"\"Showing off":["/"],"\"Smalltalk Best":["Practice"],"\"Solve the":["problem"],"\"Special cases":["aren't"],"\"T\" and":["replacing","\"U\"","\"U\"","replace"],"\"T\"`, etc.":["If"],"\"The program":["returns"],"\"The summary":["line"],"\"This is":["an"],"\"Thoroughly bikeshedded\"":["definitely"],"\"U\" are":["kind"],"\"U\" because":["those"],"\"U\" to":["make"],"\"U\"))` but":["this"],"\"U\")`. If":["you"],"\"U\", but":["then"],"\"Uhis is":["an"],"\"Whatever\" response":["is"],"\"Whatever\") as":["the"],"\"Whatever.\" case":["is"],"\"Whatever.\" here.":["This"],"\"Whatever.\"? That":["way"],"\"Who moved":["my"],"\"Whoah, are":["you"],"\"Woah, chill":["out!\"","out!\"","out!\"","out!\")","out!\"","out!\"","out!\"),","out!\"","out!\""],"\"Word\" doesn't":["seem"],"\"__main__\"` block":["so"],"\"_is_statement\", but":["you"],"\"` (though":["it's"],"\"` and":["then"],"\"`, which":["would"],"\"`? would":["it"],"\"action\" methods":["would"],"\"actions\" :":["["],"\"advises\" like":["putting"],"\"all upper-case\"":["is"],"\"all uppercase\".":["I"],"\"all_lower_with_underscores\" (ie":[":"],"\"all_lower_with_underscores\"? Surely":["that's"],"\"almost never":["done\""],"\"alphagram\" -":["which"],"\"alphagram\" is":["definitely"],"\"alphagram\". So":["you"],"\"alphagram\". Two":["words"],"\"anagram hash\"":["than"],"\"anagram_test.py\", line":["48,"],"\"answer\") tuples":["and"],"\"application facade\"":["class,"],"\"application\" class":["and","would"],"\"application\" object":["(app"],"\"as is\",":["Q&D,"],"\"bad habit\"":["from"],"\"basestring\" issue":["you"],"\"beauty\" or":["lack"],"\"better answers\"":["even"],"\"better\" is":["kind"],"\"better\" to":["have"],"\"black boxes\"":["to"],"\"blah is":["equal"],"\"blank string":["is"],"\"bob\". Did":["you"],"\"bob_test.py\", line":["59,","64,","79,","59,","89,","15,","39,","44,"],"\"bottle\" or":["not"],"\"c\" it's":["a"],"\"c\", because":["that's"],"\"caching\" part":["in"],"\"calculated fields\"":["than"],"\"canonicalizing\" words":["by"],"\"car :":["bug\"."],"\"cat\" to":["be"],"\"catch all\"":["answer,"],"\"changes\". Good":["point."],"\"clutter other":["predicates\""],"\"community.\" I":["see"],"\"completed\" so":["I"],"\"complexity\" is":["made"],"\"composable\" functions":["only"],"\"cond\" in":["lisp."],"\"configuration\" (the":["list"],"\"continue\". I":["tend"],"\"conversion\" suggests":["an"],"\"converted\" to":["RNA"],"\"db\" at":["all"],"\"declare\" your":["instance"],"\"did I":["miss"],"\"digits\" on":["both"],"\"divide and":["conquer\","],"\"do this":["if"],"\"domain\" class":["at"],"\"elif self._message_is_shouting():\",":["the"],"\"elif\" and":["\"else\"."],"\"elif\" do":["the"],"\"elif\" rather":["than"],"\"elif\", or":["would"],"\"else is":["this"],"\"else\" is":["redundant"],"\"else\". Flat":["is"],"\"employ ugliness":["when"],"\"end\" of":["a"],"\"every method":["always"],"\"exercism fetch\"":["and"],"\"exist\" as":["attributes"],"\"falsey\" strings":["here"],"\"falsey\" values":["should"],"\"felt\" better":["to"],"\"fine-grained\" templating":["stuff"],"\"first item":["such"],"\"first such":["that\","],"\"first\" operator,":["which"],"\"for anything":["else,"],"\"function call\"":["operator"],"\"function pointers\"":["(Python"],"\"generic\" functionality":["if"],"\"global\" namespace":["in"],"\"guide the":["future-you"],"\"hey\" a":["simple"],"\"hey\" actually":["do"],"\"hey\" to":["handle"],"\"hiding\" method":["is"],"\"how can":["I"],"\"hysterical raisins\".":["Haven't"],"\"idiomatic\" way":["to"],"\"idiomatic\". See":["a"],"\"if -&gt;":["return\","],"\"if I":["add"],"\"if __is_empty(message):\"":["reveals"],"\"if message":["else\""],"\"if not":["message:\"","x\"","say\"","self.wordcounter:\"","message\""],"\"if predicate()":["return"],"\"if speech:\"":["test?"],"\"if string.strip()":["=="],"\"if using":["Python"],"\"if x\"":["followed"],"\"if\" and":["\"elif\""],"\"if\" statement":["approach"],"\"if\" when":["connecting"],"\"if\") would":["make"],"\"if\"s? If":["it"],"\"if/elif.../else\" part":["?"],"\"implementation detail,":["not"],"\"implementation\") attributes":["/"],"\"in the":["code\""],"\"input sanitization\"":["part,"],"\"input\" that":["Bob"],"\"intelligence\" about":["how"],"\"intensive\" computation":["right"],"\"interface\" or":["\"action\""],"\"is None\"":["instead","and"],"\"is a\"":["relation"],"\"is all":["you"],"\"is this":["message"],"\"isEmpty()\" etc.":["out"],"\"is_angry\" and":["so"],"\"is_empty_string\" feels":["a"],"\"is_question\" to":["take"],"\"is_yelling\" you'll":["have"],"\"isupper\" method":["in","on"],"\"isupper\", and":["saw"],"\"isupper\". Do":["you"],"\"len(string) \u003e":["0\""],"\"length of":["the"],"\"logic\" is":["_still_"],"\"magic numbers\"":["'T'"],"\"match\" (True":["or"],"\"message ==":["message.upper()\","],"\"message is":["truthy\"","falsy\""],"\"message\" being":["sent"],"\"message\" would":["make"],"\"messy\" part,":["it's"],"\"msg\" or":["\"sentence\""],"\"much less":["satisfying\"."],"\"native\" way":["to"],"\"never\") write":["comments"],"\"new style\"":["classes","classes"],"\"new\" keyword":["-"],"\"new-style classes\"":["in","and","in"],"\"new-style\" class":["(and"],"\"new-style\" classes":["-","by","(introduced","(ie","(ie","which"],"\"no-op\" constructor.":["Do"],"\"not msg\"":["to"],"\"not phrase.strip()\"":["construct"],"\"obj is":["None\""],"\"object\". Short":["explanation:"],"\"obscure magic\"":["involved..."],"\"obvious\" if":["you"],"\"obvious\" that":["`str.translate()`"],"\"oh hey,":["the"],"\"on the":["wall\"."],"\"order\" (\"priority\",":["whatever)"],"\"other method":["to"],"\"phrase and":["phrase[-1]"],"\"phrase\" would":["be"],"\"pointers\"), he's":["just"],"\"precompute\" both":["needed"],"\"predicate :":["answer\""],"\"predicate\" methods":["are","uses"],"\"predicate\" system.":["It"],"\"predicate-&gt;action\" pairs":["in"],"\"predicate-&gt;answer\" dispatch,":["even"],"\"predicate/action\" version.":["A"],"\"premature optimization\"":["part."],"\"preparing\" the":["value"],"\"privacy\" in":["Python"],"\"private\" (=&gt;\"implementation":["detail\")","detail\")"],"\"private\" AND":["get"],"\"private\" and":["single-underscore"],"\"private\" from":["your"],"\"private\" implementation":["details"],"\"private\" method":["for"],"\"private\" names.":["double-underscores"],"\"private\" or":["make"],"\"private\", it's":["only"],"\"private\". Two":["underscores"],"\"protected.\" I":["don't"],"\"protocols\" of":["`dict`."],"\"python bob_test.py\"":["in"],"\"python dna.py\"":["is"],"\"question\" in":["msg_properties:"],"\"questions\", but":["I","I"],"\"raw\" but":["not"],"\"read it\"":["(if"],"\"real\" enum":["support"],"\"respond appropriately.\"":["\"else"],"\"return early\"":["?"],"\"return not":["message.strip()\"","prompt.strip()\""],"\"right to":["the"],"\"rule-based\" way":["of"],"\"rules\", but":["one"],"\"say this":["if"],"\"self\" in":["every"],"\"sentence\" (not":["a"],"\"shebang\") is":["only"],"\"shout\" in":["msg_properties:"],"\"shouting\" and":["\"questions\",","\"questions\","],"\"shouting\" but":["also"],"\"silence\" in":["msg_properties:"],"\"silent failure\"":["issue"],"\"simple code":["with"],"\"simple\" if/elif/else":["branching"],"\"simplest thing":["that"],"\"sorted\" representations":["in"],"\"spacing in":["checks\"?"],"\"special case\"":["for","than","is"],"\"standard\" for":["a"],"\"standardization\" (`standarize`":["AND"],"\"standardized\" and":["\"sorted\""],"\"startswith\" I":["didn't"],"\"str\" or":["\"msg\""],"\"str.isupper()\" ?":["Hint"],"\"strand\" which":["is"],"\"string argument\".":["And"],"\"string\" lib'd":["doc."],"\"string\" or":["\"tape\"."],"\"string\", except":["it"],"\"string\".. just":["for"],"\"sum of":["the"],"\"system\"'s entry":["point."],"\"test\" for":["the"],"\"test_does_not_confuse_different_duplicates\" consistently":["fails."],"\"text ==":["text.upper()","text.upper()\""],"\"the Python":["way\""],"\"the most":["elegant"],"\"this£@!£@roberta!!!@£@roberta\"? Is":["there"],"\"to make":["the"],"\"too much":["going"],"\"transcript\" them,":["but"],"\"translation\" can":["do."],"\"type\" of":["data"],"\"unbound methods\",":["ie"],"\"useless\" on":["empty"],"\"voice\" is":["a"],"\"warranty void":["if"],"\"we need":["to"],"\"we're all":["consenting"],"\"what is":["this","the"],"\"whatever\" answer":["should"],"\"whatever\"? Or":["maybe"],"\"word counting":["stuff\""],"\"word\" is":["just"],"\"work\") is":["just"],"\"working state\").":["Also"],"\"yelling\" you":["could","could"],"# -*-":["coding:utf-8"],"# ;;":["C\".isupper()`"],"# I":["could"],"# bonus":["points"],"# easier":["to"],"# ignore":["self"],"# return":["a"],"# sanity":["check"],"# trying":["to","to","to","to"],"# yelling),":["but"],"# your":["code"],"#1 and":["#2"],"#1. Moving":["on."],"#11 :":["\"In"],"#2 after":["actually"],"#2, so":["I"],"#4, though":["for"],"#6 :":["\"readibility"],"#7 :":["\"Special"],"#7 shorter":["than"],"% 100":["!="],"% 4":["=="],"% 400":["=="],"% dict(bar=2)`":["and","in"],"% formatting":["in","in"],"%(bar)s\" %":["dict(bar=2)`"],"& mutator":["with"],"& subjective":["merits"],"& whether":["I'm"],"&& prompt.endswith(\"?\")`":["work"],"&amp; 2.":["Also"],"&amp; endswith),":["but"],"&gt; (hint:":["a"],"&gt; 0\".":["This"],"&gt; Also":["remember"],"&gt; Consider":["using"],"&gt; Double":["leading"],"&gt; Else,":["congratulation"],"&gt; Given":["a"],"&gt; He":["answers"],"&gt; In":["a"],"&gt; Is":["there"],"&gt; Limit":["all"],"&gt; Oh":["and"],"&gt; Since":["all"],"&gt; There's":["a"],"&gt; What":["would"],"&gt; and":["any"],"&gt; attribute":["is"],"&gt; attributes":["on"],"&gt; dispatch,":["even"],"&gt; from":["being"],"&gt; has":["very"],"&gt; pythonic":["convention"],"&gt; tests":["in"],"&gt; the":["removeAll()","predicates)."],"&gt; then":["you"],"&gt; use":["a"],"&gt; you":["very","really"],"&gt;&gt; `format`":["method"],"&gt;&gt;&gt; \"#!?\"":["=="],"' '":["argument"],"' '.strip()":["else"],"' '`":["really","--"],"' '`.":["I"],"' argument":["to"],"'!' in":["the"],"'!' included":["and"],"'!' which":["passed"],"'# question',":["'#"],"'# silence').":["Defining"],"'# yelling',":["'#"],"'#' or":["'"],"'' as":["a"],"'' but":["I"],"'' is":["probably"],"'' or":["converse.isspace()`"],"''\" that":["means"],"'')` -":["but"],"''.join() is":["common"],"''.join(ch.lower() for":["ch"],"''.join(self.RNA_MAP.get(char) or":["char"],"''\u003c/code\u003e is":["a"],"''` as":["a"],"''` because":["it"],"''` could":["look"],"''` idiom":["in"],"''` in":["`Phrase.is_silence`."],"''` is":["captured","logically"],"''` so":["you","I"],"''`, and":["I"],"''`. Altering":["state"],"''``` can":["be"],"''´ or":["`self.phrase"],"', '')`":["-"],"'.strip() else":["'false'"],"'1' or":["'I'"],"'1, 2,":["3'`)"],"'=' sign":["for"],"'?' ```":["doesn't"],"'?' as":["I"],"'?' at":["the"],"'?' be":["preferred,"],"'?'. And":["also"],"'?'` You":["can"],"'?'`, you":["can"],"'?'``` is":["okay."],"'A' in":["dna"],"'A', 'Z'":["is"],"'ALL CAPS'":["if-statement"],"'ASFSF123213'.isupper() would":["return"],"'Bob responds":["to","to","to","to"],"'Bob' as":["an"],"'Bob.hey` context":["and"],"'Conversation'. Is":["the"],"'Fine. Be":["that","that","that","that","that","that","that","that","that","that","that"],"'Fine...', else":["if"],"'GG' in":["dna"],"'GGG' in":["dna"],"'HEY BRO!?',":["which"],"'I' (uppercase":["'i')."],"'L') are":["really"],"'Language' the":["best"],"'None' is":["unpythonic"],"'NoneType' object":["has"],"'Sure.' !=":["'Woah,"],"'Sure.' Even":["it"],"'Sure.' if":["you"],"'Sure.' when":["the"],"'T' and":["'U'","'U'","'U'.","'U'"],"'T' is":["replaced","replaced"],"'T', but":["I"],"'T'? Or":["a","a"],"'T'`, but":["imho"],"'T's with":["'U's."],"'U' (and":["the"],"'U' and":["'T',","'T'"],"'U' out":["into"],"'U' to":["make"],"'U'. But":["what's","what's"],"'U'. These":["should"],"'U'? I'd":["like"],"'U's. Perhaps":["the"],"'WATCH', etc.":["looks"],"'WHAT', 'WATCH',":["etc."],"'Whatever.' !=":["'Woah,","None","None","None","None","None","None"],"'Whatever.' to":["anything"],"'Whatever.' your":["final"],"'Whatever.', self.bob.hey(\"It's":["OK"],"'Whatever.', self.bob.hey('1,":["2,","2,"],"'Whatever.', self.bob.hey('Ending":["with"],"'Woah, chill":["out!'","out!'","out!'","out!',","out!'","out!'),","out!'","out!'","out!'","out!'","out!'","out!'","out!'"],"'Z' is":["quite"],"'\\W' is":["useful"],"'` --":["take"],"'` really":["looks"],"'`), only":["`scream`"],"'`. I":["wouldn't"],"'a', 'z',":["'A',"],"'aggresive' there":["is"],"'aggressive' spelled":["with"],"'all_lower_with_underscores' for":["anything"],"'and' so":["it"],"'as': 1,":["'carpet':"],"'bad' characters":["(what"],"'car': 1,":["'javascript':"],"'check' function":["does"],"'chill out'":["response"],"'counter' dict":["etc"],"'elifs' if":["you're"],"'empty' constructor,":["but"],"'encapsulate' everything":["in"],"'exceptional circumstance',":["and"],"'falsy' checking":["and","of"],"'fine /":["chill"],"'first' operator,":["which"],"'for' logic":["is"],"'framework'), not":["the"],"'global' object.":["For"],"'hash' calculation":["in"],"'hey =":["answer'"],"'hey' function":["is"],"'hey' function.":["I","Very"],"'i'). Also":["the"],"'if not":["message'"],"'if' and":["the"],"'if' means":["more"],"'if' statements":["toward"],"'ifs'. I'm":["going"],"'interprets_as_question' would":["be"],"'is_question'. On":["the"],"'java': 1,":["'car':"],"'javascript': 1,":["'as':"],"'learn python":["the"],"'letters' really":["a"],"'maketrans' makes":["a"],"'message', 'sentence',":["'discussion'..."],"'minimal initializer":["/"],"'msg.strip' twice":["is"],"'n simple.":["There"],"'new style":["classes"],"'new-style classes'":["for"],"'not something'":["?"],"'pep8' cli":["utility"],"'pep8' which":["-"],"'re' to":["substitute"],"'response list'":["approach."],"'response' variable,":["so"],"'result' variable":["and"],"'ret' dragged":["along"],"'rna' is":["totally"],"'s' stands":["for"],"'s' while":["we're"],"'self'), which":["isn't"],"'self'? May":["be"],"'silent' answer":["when"],"'sorted' one)":["in"],"'str' as":["an"],"'str' of":["the"],"'string'? You":["could"],"'stronger'. In":["the"],"'too much'":["but"],"'true' if":["'"],"'uppering' in":["the"],"'utterance', as":["it"],"'word', 'message',":["'sentence',"],"'words' for":["a"],"'words'. If":["it"],"'yell' and":["`not"],"'you' who":["saying"],"'z', 'A',":["'Z'"],"(\"Do this\",":["\"Return"],"(\"Has Lower":["Case"],"(\"T\",\"U\") space":["requirement..."],"(\"if message":["=="],"(\"looks great\"ed":["by"],"(\"prevent code":["to"],"(\"priority\", whatever)":["param"],"(\"private\") attribute.":["In"],"(\"source\" is":["a"],"(\"why does":["it"],"(#!) here,":["since"],"('ascii') is":["sufficient?"],"(((silence? msg)":["\"Fine."],"((question? msg)":["\"Sure.\")"],"((shouting? msg)":["\"Woah,"],"() instead":["of"],"()` be":["more"],"(**.strip()** could":["help"],"(+ reduce":["won't"],"(... for":["..."],"(1 function":["call"],"(1). I":["hope"],"(2): your":["predicates"],"(2-uples), not":["lists."],"(=&gt;\"implementation detail\")":["attribute"],"(== in":["this"],"(? followed":["by"],"(And I":["can't"],"(And just":["get"],"(Apparently there":["is"],"(Don't Repeat":["Yourself)"],"(Here's a":["[relevant"],"(How would":["anybody"],"(I admit":["that"],"(I am":["still"],"(I did":["use"],"(I didn't":["in"],"(I don't":["like"],"(I got":["an"],"(I know":["that"],"(I may":["be"],"(I mean,":["I"],"(I prefer":["to"],"(I reeeally":["had"],"(I still":["exclusively"],"(I struggled":["with"],"(I think":["I"],"(I would":["expect","use","use"],"(I'd definitely":["do"],"(I'd suggest":["to"],"(I'm exaggerating":["here"],"(I'm new":["to"],"(I'm not":["a"],"(IOW :":["don't","make","make"],"(IOW rename":["it"],"(JavaScript-ish). But":["once"],"(Just so":["I'm"],"(Note: I":["focused"],"(Of course,":["the"],"(PEP08) is":["'all_lower_with_underscores'"],"(Python has":["no"],"(Python strings":["are"],"(Refer to":["PEP-8)"],"(Same with":["single-underscore;"],"(See [Ned":["Batchelder:"],"(Seems fairly":["simple)."],"(Sorry about":["the"],"(Strictly speaking,":["according"],"(Stuffing all":["those"],"(Thanks for":["taking"],"(The decision":["to"],"(The umlaut-test":["still"],"(This isn't":["a"],"(This sort":["of"],"(True or":["False)"],"(You would":["of"],"(Zen of":["Python","Python"],"([Single Responsibility":["Principle]([http://c2.com/cgi/wiki?SingleResponsibilityPrinciple]))"],"([even in":["Python"],"(_word for":["_word"],"(` '1,":["2,"],"(`.isupper()` understands":["that"],"(`BobStockTrader`) could":["simply"],"(`FormattedWord`) is":["a"],"(`STRIP_PUNCTUATION`) since":["it's"],"(`__class__`) to":["no"],"(``is_shouting``, ``is_interrogative``,":["and"],"(``str`` of":["length","length"],"(`bob.hey(\"None\")` should":["return"],"(`capitalize` makes":["the"],"(`collections` module":["in"],"(`from foo":["import"],"(`if ...`).":["Filter"],"(`if len(str.strip())":["=="],"(`is` -":["or"],"(`is`), not":["the","the","the"],"(`isupper` is":["more"],"(`log(len(s))` times)":["more"],"(`pep8`) that":["checks"],"(`salutation[-1]`) unless":["it's"],"(`self._lowercased ==":["other._lowercased"],"(`self.check =":["sorted(word.lower())`,"],"(`signature =":["sorted(self.word)`)."],"(`sort`) that":["you"],"(`standarize` AND":["`sort`)"],"(`standarize`) that":["you"],"(`text.upper()`) and":["comparing"],"(a class":["is"],"(a set":["of"],"(a) `filter()`":["or"],"(actually `nil`":["in"],"(after tossing":["out"],"(again) recommend":["to"],"(aka class":["attribute)"],"(also 23":["and"],"(also I've":["just"],"(also called":["magic"],"(also really":["nitpicky"],"(also, having":["the"],"(also, it":["may"],"(also, look":["at"],"(also, the":["`if..elif`"],"(although your":["code"],"(and Bob":["would"],"(and I":["think"],"(and I'm":["usually"],"(and `is_same`":["-"],"(and a":["couple","bit"],"(and also":["looks"],"(and coding":["in"],"(and didn't":["even"],"(and documented":["in"],"(and don't":["worry"],"(and functionality).":["Current"],"(and isn't":["'aggressive'"],"(and it":["did"],"(and it's":["good"],"(and its":["elifs"],"(and methods)":["are","names"],"(and more":["decoupled)"],"(and name)":["necessary"],"(and perhaps":["extract"],"(and possibly":["final)"],"(and probably":["would"],"(and readable)":["way"],"(and remove":["the"],"(and seriously,":["a)"],"(and similar":["structures"],"(and so":["are"],"(and the":["zen","way","unittests","chain","function","other","rest)."],"(and their":["correlates"],"(and then":["raising","you"],"(and there's":["no"],"(and won't":["be"],"(and you":["do"],"(another way":["is"],"(app entry":["point)."],"(as base":["would"],"(as far":["as"],"(as in":["an"],"(as in,":["\"how"],"(as it's":["easy"],"(as you":["can"],"(at least":["by","under","to"],"(at least,":["to"],"(b) Python":["list"],"(because of":["isupper","memoization)."],"(becoming a":["lot"],"(before splitting)":["rather"],"(beyond the":["docstring,"],"(builtin) and":["list"],"(but TBH":["has"],"(but `endswith`":["is"],"(but it's":["not"],"(but you":["could"],"(by convention,":["the"],"(by filter)":["is"],"(by making":["it"],"(by overfitting":["the"],"(by using":["`u\"foobar\"`)."],"(byte or":["unicode)"],"(calling super()":["methods)"],"(cf pep08":["for"],"(class attribute":["in"],"(code layout":["in"],"(collides with":["important"],"(cond (((silence?":["msg)"],"(cond):` with":["`if"],"(constructor) for":["Counter"],"(couplet and":["stuff)"],"(definitely not":["something"],"(directly making":["`Anagram`"],"(doesn't have":["to"],"(don't need":["self)"],"(double is":["used"],"(e.g. `'A'`":["in"],"(e.g. ``'GG'``":["in"],"(e.g. ``sentence.py``)":["with"],"(e.g. `bob`)":["differently"],"(e.g. between":["`elif"],"(e.g. me)":["has"],"(e.g., `IX=X-I`)":["work"],"(e.g., `def":["is_empty(s):"],"(each in":["a"],"(easy to":["confuse"],"(eg: silent":["treatment"],"(either in":["form"],"(especially since":["the"],"(especially the":["80"],"(even if":["that's","technically","you"],"(even in":["Python","Python","Python","Python","Python","Python","Python","Python"],"(except I":["used"],"(except `hey()`)":["are"],"(except for":["the"],"(except lines":["7-10)"],"(excepting __init__,":["of"],"(first line":["of"],"(flat is":["better"],"(for example":["80"],"(for example,":["None","Ruby","`s.endswith('?')`"],"(for readability":["sake)."],"(function `input()`":["in"],"(generally attributed":["to"],"(given how":["the"],"(good for":["the"],"(granted, the":["generator"],"(guess you":["like"],"(hastily) testing":["this"],"(hence harder":["to"],"(hence make":["your"],"(hey, this":["is"],"(hint :":["polymorphic","plain"],"(hint: CamelCase":["is"],"(hint: Python":["functions","functions","has","functions"],"(hint: `NoneType`":["has"],"(hint: a":["list","list"],"(hint: list":["comprehensions"],"(hint: look":["for"],"(hint: python":["functions"],"(hint: since":["Python"],"(hint: the":["initializer"],"(hint: you":["have","already"],"(hints: python":["functions"],"(hints: use":["the"],"(how could":["he?)"],"(http://clojuredocs.org/clojure_core/clojure.core/frequencies) but":["missed"],"(hysterical raisins,":["google"],"(i was":["sure"],"(i.e. `'":["foo"],"(i.e. `{}`).":["The"],"(i.e. a":["letter)."],"(i.e. gives":["compile"],"(i.e. letters)":["and"],"(i.e. letters).":["So"],"(i.e. removing":["punctuation)"],"(i.e. strings":["are"],"(i.e. why":["not"],"(i.e., creating":["a"],"(ie :":["s/silenceFilter/silence_filter)","`if"],"(ie `Word`":["or"],"(ie `anagram_instance.source`":["to"],"(ie `for":["test,"],"(ie make":["your","your"],"(ie. replace":["the"],"(ie: 'words'":["for"],"(if empty,":["return"],"(if it":["is"],"(if you":["don't","don't","wouldn't"],"(if you're":["using","going"],"(if, elif,":["else)."],"(imho) by":["explicitely"],"(import re).":["Have"],"(in both":["places)"],"(in each":["\"if\")"],"(in my":["view)"],"(in particular":["checkForYelling,"],"(in this":["case"],"(inheriting from":["`object`)"],"(initialized at":["0"],"(inscrutable? possibly":["flawed)"],"(inside of":["itself"],"(instead of":["counting)"],"(intent would":["be"],"(introduced since":["Python"],"(ipython debugger)":["but"],"(is_shouting, 'Woah,":["chill"],"(isosceles check)":["using"],"(isupper() tests":["whether"],"(it did":["mine"],"(it has":["one"],"(it is":["exposed),"],"(it should":["really"],"(it's \"raw\"":["but"],"(it's a":["one"],"(it's an":["example-driven"],"(just like":["`Bob`"],"(just to":["make"],"(lambda x:":["True,"],"(less code,":["less"],"(like @kenyatta":["wrote)."],"(like `+`).":["`_capitalize`"],"(like `dna.DNA('P')`)":["and"],"(like `isQuestion`,":["etc.)"],"(like `text":["="],"(like an":["`if`)."],"(like dict,":["list)"],"(like i":["do,"],"(like is_silence,":["is_question...)."],"(like magic":["numbers)."],"(like umlauts,":["etc.)"],"(like you":["do"],"(limited) support":["for"],"(line 13).":["You're"],"(lists, collections":["etc)"],"(look for":["\"new-style"],"(lower-case 'L')":["are"],"(main() +":["hashbang"],"(making it":["a"],"(map) and":["filter"],"(may be":["he"],"(maybe multiple":["times?)"],"(message or":["'').strip()","\"\").strip())"],"(minus the":["use"],"(modulus, string)":["list"],"(most of":["the"],"(most recent":["call","call","call","call","call","call","call","call","call"],"(msg =":["(message"],"(multiple statements":["on"],"(n vs":["nlogn)."],"(naming conventions):":["variable"],"(newline after":["definition)"],"(nlogn for":["sorting"],"(no access":["to"],"(no change":["to"],"(non-public?) helpers":["with"],"(not a":["great"],"(not tested)":["also"],"(not using":["'self'),"],"(now Bob":["is"],"(object creation":["happens"],"(ok here":["we"],"(once you":["improve"],"(one for":["responses"],"(one import":["statement"],"(one is":["responsible"],"(one space)":["would"],"(optional) third":["argument."],"(or I":["missed"],"(or `__init__`":["if"],"(or `cls._replies`":["if"],"(or `cls`":["for"],"(or `else`)":["after"],"(or `map`)":["or"],"(or a":["new","Teenager"],"(or action-like)":["objects."],"(or all":["lowercase"],"(or any":["compatible"],"(or at":["least"],"(or check":["for"],"(or could":["be)"],"(or from":["14"],"(or implementing":["the"],"(or list)":["of"],"(or list,":["tuple,"],"(or multiple":["calls"],"(or the":["placeholder","like)"],"(or two,":["if"],"(other than":["putting","what"],"(others look":["good)?"],"(per @amiya)":["to"],"(performance), since":["you"],"(personal bias":["check:"],"(plain good":["old"],"(plain old":["module-level"],"(pluralization of":["`\"bottle(s)"],"(pluralizing \"bottle\"":["or"],"(possible expensive)":["response"],"(pre-3) are":["weird."],"(predicate -\u003e":["result"],"(predicate, \"answer\")":["tuples"],"(predicate, answer)":["methods"],"(prefixed with":["a"],"(pretty much":["always)"],"(private) for":["methods."],"(private) helpers":["with"],"(pseudo) constants":["here."],"(put them":["in"],"(py27-ticket16883)[zane@santa-MacBook-Pro bob]$":["python"],"(python doesn't":["make"],"(question, silence,":["shouting)"],"(questions, yelling":["etc),"],"(quite likely?":[":)"],"(rather than":["just"],"(re.compile(r\"^(?:\\s+)?$\"), 'Fine.":["Be"],"(re.compile) to":["avoid"],"(read \"never\")":["write"],"(read I'm":["forced"],"(read about":["\"new-style"],"(regards `__init__`).":["Alternatively"],"(remember that":["Python's"],"(removed comment":["where"],"(responses) to":["separate"],"(return, pass,":["continue),"],"(returning `None`)":["can"],"(rules implementation":["and"],"(see [PEP8](http://www.python.org/dev/peps/pep-0008/#naming-conventions)):":["class"],"(see [Truth":["Value"],"(see http://docs.python.org/2/library/stdtypes.html#str.endswith).":["Also,"],"(see http://ruby-doc.org/core-1.9.3/String.html":["for"],"(see iteration":["4),"],"(self.y %":["4"],"(sensibly) return":["0"],"(sequence types":["methods"],"(sic!) up":["`_clean_phrase`"],"(silence, question,":["shouting,"],"(simple) way":["to"],"(simpler) way":["to"],"(so `dir`":["outputs"],"(so no":["need"],"(so the":["cost"],"(someone could":["use"],"(something like":["'#"],"(sorry lispmachine":[";))."],"(sort of).":["It"],"(specially `normalized`":["which"],"(specially reverse":["indexes)"],"(specifically `str`":["methods)"],"(specifically) is":["to"],"(taking the":["`phrase`"],"(technical object":["required"],"(thanks for":["that)"],"(that all":["chars"],"(that do":["not"],"(that is,":["the"],"(the \"shebang\")":["is"],"(the O":["in"],"(the Python":["way)."],"(the `@filiberto`":["decorator)."],"(the `cache_result`":["function)"],"(the class":["now"],"(the convention":["is"],"(the list":["of"],"(the lowercase":["version"],"(the object,":["not"],"(the program)":["wasn't"],"(the test":["case"],"(then name":["should"],"(there can":["be"],"(they are":["even"],"(this is":["just"],"(this seems":["like"],"(though @davon":["suggested"],"(though generally":["the"],"(though he":["doesn't"],"(though it's":["not"],"(though that":["stuff"],"(though writing":["it"],"(thus being":["called"],"(to avoid":["that"],"(to me)":["readable"],"(to which":["Bob"],"(too little":["time,"],"(top-level `hey`-function":["could"],"(two leading":["underscores"],"(typically, to":["be"],"(unittests sometimes":["being"],"(unless they":["also"],"(unless you":["consider"],"(until I":["have"],"(uppercase 'i').":["Also"],"(using `filter()`":["or"],"(using just":["1"],"(vaguely, in":["the"],"(very nitpicky)":["thing"],"(via list":["comprehensions)."],"(w for":["w"],"(weak) protection":["against"],"(well, ```":["_number_last_part"],"(well, almost":["but"],"(well, you":["could"],"(what do":["we"],"(what if":["i"],"(when you":["have","have","have","have","have"],"(where \"hiding\"":["method"],"(where it's":["an"],"(where, admittedly,":["I"],"(whether bound":["or"],"(whether instance":["methods,"],"(which Counter":["does"],"(which I":["like),"],"(which could":["be"],"(which doesn't":["need"],"(which force":["you"],"(which initially":["led"],"(which is":["mostly"],"(which mirrors":["`dict.items()`"],"(which the":["testcase"],"(which would":["be"],"(whomever you":["are)"],"(with a":["degenerate"],"(with all":["classes"],"(with one":["underscore)"],"(won't change":["anything"],"(word transformed":["to"],"(yes I'm":["lazy"],"(yes, sometimes":["specs"],"(yes, tests":["are"],"(yet). Would":["love"],"(you also":["could"],"(you can":["do","test"],"(yours, mines":["etc)"],"). Also,":["if"],"* \"Private\"":["methods"],"* *":["what"],"* .`responses()`":["returns"],"* 26":["*","*"],"* A":["more"],"* Actually":["that"],"* Add":["a"],"* Added":["docstrings."],"* An":["empty","empty","empty"],"* Anagram.source":["is"],"* And":["one"],"* Are":["you"],"* Assuming":["that"],"* Building":["strings"],"* Consider":["factoring","factoring","factoring","moving","using"],"* Cool,":["will"],"* Do":["you"],"* Documentation":["in"],"* Don't":["you"],"* For":["the","reasons"],"* Given":["your"],"* Good":["catch"],"* Great,":["thanks,"],"* Have":["you"],"* How":["would","about"],"* I":["would","try","prefer","would","don't","think","think","just","don't","learned","dislike","didn't","prefer","can","really","would","think","think","would","don't","like","prefer","appreciate","agree","have","noticed","removed","think","would","would","don't"],"* I'm":["not","afraid"],"* If":["you're","you","you"],"* In":["larger"],"* Instead":["of"],"* Interesting,":["but"],"* Is":["`import"],"* It":["could","might"],"* It's":["good"],"* L11":["add"],"* L12,L14,L16":["Don't"],"* L14":["You"],"* L14:":["You"],"* L19:":["You"],"* L21":["I"],"* L25":["You"],"* L6":["That"],"* L7:":["`message.endswith('?')`"],"* L9":["That"],"* L9:":["`message.isupper()`"],"* No":["reason,"],"* Ok,":["will"],"* P.S.":["we"],"* PEP8":["suggests"],"* Please":["take","read"],"* Put":["them","them"],"* Python":["strings","strings","2.x"],"* Python's":["zen"],"* Scary":["waste"],"* Silence":["will"],"* Some":["of"],"* The":["order","parentheses","parameter","pythonic","first","`__main__`","logic"],"* There":["are","should"],"* There's":["a"],"* This":["doesn't","is"],"* To":["test","check"],"* Try":["running"],"* Use":["`message`"],"* Using":["regex","`str`"],"* We":["have"],"* Well,":["you've"],"* What":["if","about","the"],"* What's":["wrong","the","the"],"* While":["all"],"* Why":["the"],"* Would":["it"],"* You":["call","can","check","can","can","can","don't","can","check","don't","don't","import","can","still","also","have","should","could","can","import","can"],"* Your":["comments","\"logic\""],"* _is_empty():":["an"],"* _is_shouting():":["you"],"* _sanitize()":[":"],"* `.elements()`":["should"],"* `.isupper()`":["can"],"* `A`":["-\u003e","-\u003e"],"* `Bob.hey()`":["is"],"* `C`":["-\u003e","-\u003e"],"* `G`":["-\u003e","-\u003e"],"* `None`":["has"],"* `T`":["-\u003e","-\u003e"],"* `__double_underscore`":["names"],"* `__init__`":["is"],"* ```string":["=="],"* `dna_string`":["and"],"* `elif`":["is"],"* `for`":["cycle"],"* `if":["len(message)",":","not"],"* `inp`":["is"],"* `not":["phrase"],"* `result":["=","="],"* `str(text)`":["then"],"* `str.islower()`":["is"],"* `str.strip().__len__()":["=="],"* `str[-1]":["=="],"* a":["single","Python","`str`","common","good"],"* added":["a","`text.strip()`"],"* agree":["w.","w."],"* all":["other"],"* also":["the","and","please"],"* an":["empty","empty","empty","empty","empty"],"* and":["why"],"* another":["solution"],"* bare":["except"],"* being":["explicit"],"* can":["you"],"* changed":["`phrase_list`"],"* check":["the","comments"],"* checkout":["the"],"* class":["shoud","attributes"],"* clean-up":["of"],"* comments":["to"],"* compact":["indeed!"],"* compare":["which"],"* could":["you","use"],"* counting":["of"],"* doc-strings":["should"],"* don't":["you","you"],"* dropping":["`[`"],"* extraneous":["whitespaces"],"* facepalm":["*"],"* general":["note"],"* good":["point"],"* great":["comments,"],"* having":["multiple","many"],"* hey():":["early"],"* hysterical":["raisins,"],"* i":["think"],"* if":["you're","you're","you're","a","you","Python","you","you"],"* in":["Python,","Python,"],"* interesting":["re."],"* is":["there"],"* it":["looks","is"],"* it's":["indeed","personal"],"* just":["a"],"* line":["20"],"* match()":["always"],"* naming":["convention","convention"],"* need":["to"],"* nice":["and"],"* no":["comments"],"* not":["pep8"],"* now":["that"],"* pep08":[":"],"* pep8":[":","again"],"* python":["2.x"],"* re":["`if"],"* re.":["text.strip()","line","line","encoding"],"* removed":["the","boilerplate"],"* renamed":["the"],"* return:":["I"],"* see":["how"],"* self.PARAMETERS[\"U\"]":["is"],"* sequences":["(lists,"],"* should":["`zero_bottles`,"],"* testing":["against"],"* that":["looks"],"* the":["convention","communication","`removeAll()`","`return`","idiomatic","`str`","`return`","naming","idiomatic","test","identity","test"],"* there":["is","are","is"],"* there's":["the","only","an","a"],"* try":["pyflakes","pyflakes"],"* used":["1"],"* using":["`''.join(...)`"],"* what":["use","jotjotjes","if","about","did","it"],"* what's":["the"],"* why":["isn't","all"],"* word":["counting"],"* www.python.org/dev/peps/pep-0008/":[":\"Compound"],"* yes,":["just"],"* you":["are","can","test","don't","seem","could","import","may","import","don't","have","prefer","don't","don't","don't","expose","could","don't","don't","don't","could","don't"],"* you're":["creating"],"* your":["memoizer"],"** difficult":["to"],"***insert code":["from"],"**.endswith()** to":["identify"],"**.isupper()** and":["**.endswith()**"],"**DNA** to":["**RNA**."],"**Please** don't":["catch"],"**Reaction** makes":["me"],"**and** suffixes":["were"],"**explicit else":["statement**."],"**interesting phrasing":["for"],"**kwargs aren't":["necessary."],"**named parameters**":["and"],"**please** don't":["use"],"**really absolutely":["need**"],"**short** and":["has"],"**short**, has":["**trailing"],"**str** as":["well"],"**trailing comma**":["in"],"**unicode**, you":["may"],"*Given the":["actual"],"*REALLY* minor":["but"],"*`). However":["it's"],"*absence* of":["something;"],"*all* in":["`count`?"],"*almost never*":["see"],"*are meant":["to"],"*args, **kwargs":["aren't"],"*best* but":["a"],"*class* methods.":["What"],"*dense* but":["I"],"*don't* want":["as"],"*each* branch":["of"],"*has* to":["be"],"*he* interprets":["messages."],"*inside* the":["comprehension"],"*is* my":["logic"],"*list comprehensions*":["are"],"*method* rather":["than"],"*much* cleaner":["overall."],"*must* be":["longer"],"*needs* to":["use"],"*normalize* or":["*sanitize*."],"*only* inside":["`__init__`,"],"*presence* of":["something,"],"*really* like":["`Maybe`"],"*really* private":["in"],"*really* writing":["this"],"*setting* stuff":["in"],"*statement* is":["a"],"*strand* or":["*dna"],"*test* this":["one,"],"*that* valuable":["and"],"*thymidine* and":["*uracil*"],"*uppercase* and":["*yelling*"],"*uppercase* means":["*yelling*."],"*uracil* are":["has"],"*was* a":["namespace?"],"*why* you're":["sorting"],"*without* `self`.":["It's"],"*yelling* even":["without"],"*yelling*. But":["since"],"+ better":["have"],"+ encoding)":["are"],"+ hashbang":["+"],"+ sort":["being"],"+1 Nice":["documentation"],"+1 to":["remove","remove"],"+= 1`,":["using"],", for":["example,"],", it":["would"],", the":["`\"\".join(map(...))`"],"- \"In":["the"],"- 'word',":["'message',"],"- **Please**":["don't"],"- 1.":["helper"],"- 17.":["And"],"- Also,":["if"],"- CamelCased":["names","is","is"],"- Can":["you"],"- Counter.update":["allows"],"- Degrading":["performance"],"- Dynamic":["typing](http://docs.python-guide.org/en/latest/writing/structure/#dynamic-typing)"],"- Have":["all","to"],"- How":["would"],"- I":["tried","didn't","was","probably","would","tend","can't","never","wasn't","wish","didn't","wasn't","traded","come","found"],"- I'd":["forgotten"],"- I'm":["worried","waiting"],"- If":["you're","you're","you're"],"- Imports":["should"],"- In":["Python"],"- It":["avoids","seems"],"- It's":["clearly","not"],"- Keep":["in"],"- Make":["the"],"- Maybe":["use"],"- Python's":["\"falsey\""],"- Should":["`BlahResponder`","there"],"- The":["use"],"- There":["is"],"- This":["is","is"],"- Trade-off":["with"],"- Typically":["in"],"- Welcome":["to"],"- Why":["is","compare","is","are","are"],"- You":["don't","gave"],"- _none_":["of"],"- `@angelo`":["is"],"- `Bob.hey()`":["calls"],"- ```":["endswith","Bob","FormattedWord"],"- `checkend`":["still"],"- `endswith()`":["`startswith()`"],"- `if`":["doesn't"],"- `isquiet()`":["already"],"- `replace`":["included."],"- `return`":["already","already"],"- `sanitize`":["and"],"- `someword.is_anagram_of(otherword)`":["makes"],"- `to_rna`":["will","is"],"- a":["double","string","string"],"- an":["empty","empty","empty"],"- and":["that","not","I'm","be","again,","just","there's","appease"],"- are":["you"],"- as":["a","it","it's","far"],"- at":["least","least","least"],"- be":["consistent"],"- both":["work"],"- but":["it","you","you","first","then","well,"],"- by":["extending"],"- checks":["and"],"- class":["methods"],"- clients":["may"],"- collect":["all"],"- comparing":["the"],"- could":["you","you"],"- create":["it"],"- deciding":["what"],"- definitely":["useful"],"- description":["from"],"- dictionary":["somehow"],"- do":["you"],"- don't":["burden","you"],"- early":["returns"],"- emphasize":["that"],"- except":["for"],"- explicitly":["checking"],"- for":["example","example","reference","`isQuestion`,","example"],"- functions":["are","(plain","in"],"- generally":["avoid"],"- getting":["rid"],"- giving":["names"],"- good":["to"],"- have":["you","a"],"- hence":["using"],"- how":["expensive","the"],"- however":["that"],"- however,":["you"],"- i":["like"],"- i.e.,":["I"],"- ie,":["the"],"- if":["not"],"- in":["Python","this"],"- instead":["of"],"- is":["this","'letters'","there"],"- it":["might","makes","felt","isn't","works","uses","makes","real","turns","makes","will"],"- it's":["IMO","_not_","IMHO","a","a","a","a","alphagram","a"],"- just":["one","focusing","check","don't","that","get"],"- like":["`self.chain`"],"- like,":["if"],"- look":["into"],"- looks":["like"],"- make":["use"],"- makes":["the"],"- maybe":["some"],"- meaning":["that"],"- methods":["should"],"- might":["indeed"],"- more":["can"],"- most":["Python","Python","would"],"- much":["more"],"- neither":["question"],"- nice.":["Although"],"- no":["need","tabs"],"- not":["intended","\"The"],"- now":["it"],"- on":["separate"],"- one":["could"],"- or":["`is"],"- parentheses":["are"],"- pep08":[":",":"],"- perhaps":["one"],"- please":["refer"],"- question":["will"],"- removing":["dependency"],"- return":["statements","statement"],"- satisfy":["the"],"- see":["Python"],"- simple":["and"],"- since":["you're"],"- so":["that","that","what's"],"- some":["caching","consider"],"- somewhat":["dated"],"- sort/sorted":["being"],"- strange":["things"],"- sweet,":["thanks!"],"- take":["a"],"- tests":["aren't"],"- that":["`len`","was","would"],"- that's":["why","not","very"],"- thats":["a"],"- the":["latter","code","Python","same","constructor","helper","`__init__`","`for`","`str`","`str`","`str`","idiomatic","\"predicate-&gt;action\"","`for`","idiomatic","`str`","1st"],"- then":["it","a"],"- there":["will","already","are"],"- there's":["a"],"- they":["don't"],"- this":["is","iteration"],"- those":["methods","have"],"- truthiness":["in"],"- try":["to","instanciating"],"- tuple":["unpacking"],"- unless":["you"],"- using":["anything"],"- usually":["in"],"- we":["do"],"- what":["would","if"],"- what's":["the"],"- when":["handed","you"],"- where":["have"],"- which":["could","is","should","you"],"- with":["such"],"- would":["\"phrase","it"],"- wrong":["design"],"- you":["fetch","can","split","can","could","may","don't","don't","don't","may","will","could","store","can","would","could","can"],"- your":["feedback"],"-&gt; converse":["because"],"-&gt; return\",":["but"],"-*- coding:utf-8":["-*-"],"-, the":["test"],"-- @marielle":["http://exercism.io/submissions/521b5b8554e11cdba8000295"],"-- Bob":["is"],"-- Docstring":["Conventions](http://www.python.org/dev/peps/pep-0257/)","Conventions](http://www.python.org/dev/peps/pep-0257/).","Conventions]([http://www.python.org/dev/peps/pep-0257/)"],"-- I":["don't","had","find","think","haven't"],"-- I'd":["use"],"-- I'm":["off","no"],"-- Style":["Guide","Guide","Guide","Guide","Guide","Guide","Guide"],"-- _message_is_shouting,":["for"],"-- agreed":["you"],"-- although":["`word_count`"],"-- and":["I","then"],"-- at":["times"],"-- being":["set"],"-- but":["you"],"-- consider":["factoring","making"],"-- could":["be"],"-- hardcoding":["the"],"-- he's":["on"],"-- here's":["[a"],"-- if":["either","you"],"-- in":["Py"],"-- is":["sticking"],"-- just":["strip()"],"-- no":["need","parens"],"-- normally":["`main()`"],"-- probably":["same"],"-- take":["a"],"-- thanks":["for"],"-- that":["could","might"],"-- the":["elses","logic"],"-- this":["was","or"],"-- using":["`str.count`"],"-- well,":["wordcounter"],"-- you":["want","fill"],"---- EDIT":["----"],"--\u003e removed":["unnecessary"],"-1)]`. Does":["`_next_verse`"],"-10)` it":["will"],"-1`, as":["I"],"-\u003e result":["pairs)"],"-instance to":["classify"],". Also":["what's","what's"],". Anyway,":["I","this"],". However":["you"],". I´m":["little"],". Other":["than"],". So":["it's"],". To":["stay"],".. and":["I"],".. etcetc.":["A"],"... --":["at"],"... I'm":["only"],"... and":["shrink","...","...`?","they"],"... at":["the"],"... but":["nice"],"... can":["you"],"... elif":["...","...`?","...","...`","...","...","...","..."],"... else":["...`"],"... else`":["conditional"],"... if":["...","...)`."],"... import":["Counter`"],"... in":["...)"],"... it":["looks"],"... nary":["a"],"... return":["A","B","C"],"... your":["code"],"...\" or":["make"],"...\", I":["prefer"],"...) and":["only"],"...)` is":["also"],"...., _otherwise_":["return"],"...==2` and":["`else:`."],"...` as":["it"],"...` construction":["instead"],"...` in":["`_is_silence`?"],"...` would":["be"],"...`). Filter":["wins"],"...`? You":["would"],"..and in":["part"],"..in part":["also"],"./bob.py`. Since":["this"],".`responses()` returns":["a"],".isupper method":["for"],".isupper() function":["and"],".isupper() is":["a"],".isupper() method":["for"],".upper() to":["set"],"/ chill":["out"],"/ closures":["/"],"/ control":["flow"],"/ count":["process,"],"/ elif":["/","/"],"/ else```":["flow."],"/ formatting":["points:"],"/ is":["not"],"/ lazy":["computation"],"/ methods":["are"],"/ optimisation":["-"],"/ over":["engineered\""],"/ partial":["application"],"/ properties.":["Here"],"/ removals":["to"],"/ sure'":["responses"],"/ tips":["how"],"/ two":["ending"],"0 =\u003e":["the"],"0 and":["then","self.y"],"0 as":["default","default","default"],"0 at":["this","this"],"0 for":["non-existent"],"0 instead":["of"],"0 is":["already","redundant"],"0 length.":["Is"],"0 or":["(self.y","message.isspace()`"],"0 so":["people"],"0\" in":["the"],"0\". This":["way"],"0's in":["constructor"],"0) +":["1"],"0)`. I've":["changed"],"0, is":["that"],"0.001s. I":["have"],"0008](http://www.python.org/dev/peps/pep-0008/#function-names) to":["use"],"0:` and":["`if"],"0:` is":["usually"],"0:`, you":["would"],"0` You":["use"],"0` as":["described"],"0` doesn't":["need"],"0` is":["the"],"0` test":["(`.isupper()`"],"0` to":["make"],"0` versus":["`sentence"],"0`) that":["may"],"0``` is":["equivalent"],"1 &amp;":["2."],"1 (e.g.":["`'A'`"],"1 and":["0."],"1 as":["per"],"1 better":["than"],"1 by":["subclass"],"1 can":["be","be","be"],"1 function":["call)?"],"1 line":["of"],"1 or":["greater?"],"1 return":["statement"],"1) *thymidine*":["and"],"1) I":["think"],"1) I'm":["very"],"1) Re.":["PARAMETERS"],"1) There":["is"],"1) as":["an"],"1) with":["the"],"1, 'as':":["1,"],"1, 'car':":["1,"],"1, 'carpet':":["1}"],"1, 'java':":["1,"],"1, 'javascript':":["1,"],"1-to-1 translate":["method"],"1. Agreed,":["I've"],"1. Also":["docstrings"],"1. Always":["surround","use"],"1. Case":["statement"],"1. Construct":["like:"],"1. I":["wanted"],"1. If":["you","`_replies`"],"1. Inline":["comments"],"1. It":["is"],"1. Line":["5:","7:"],"1. PEP8":["recommends"],"1. Run":["the"],"1. The":["comments","last","passed","`re`"],"1. There":["is","exists"],"1. What":["if"],"1. Why":["would","didn't","didn't","do","do","not"],"1. You":["can"],"1. You're":["using"],"1. ```":["something"],"1. `key":["=="],"1. helper":["methods,"],"1. in":["its'"],"1. why":["define"],"1.8, where":["the"],"1/ Python's":["classes"],"1/ having":["two"],"1/ the":["verse"],"1/ you":["expose"],"10 could":["be"],"10 data":["structures.\"","structures.\""],"10 for":["glueing"],"10 functions":["on","on"],"10 lines":["to"],"10 thru":["12"],"10 you":["assume"],"10-17 in":["this"],"10. Too":["complicated,"],"100 !=":["0)"],"100 and":["400,"],"100 functions":["operate","operate"],"100% compatible":["(like"],"100% correct.":["Any"],"100% sold":["on"],"100% sure":["it"],"100% with":["you."],"100000 loops,":["best","best","best","best"],"10000~ `Phrase`":["objects"],"10` @emmanuelle":["I"],"10` and":["`=="],"10th line,":["so"],"11 (by":["filter)"],"11 it's":["now"],"11, it":["isn't"],"11: If":["text"],"11` in":["`pretty`."],"12 --":["could"],"12 and":["16."],"12 could":["probably"],"12 is":["confusing."],"12-14 with":["a"],"123 #":[";;"],"12: There":["is"],"12: You":["check"],"12: the":["\u003e0"],"13 -":["17."],"13 and":["14,","16,"],"13 is":["necessary?"],"13 out":["into"],"13 would":["become"],"13). You're":["building"],"13+ years":["of"],"13-20` I":["agree"],"13` when":["`sorted`"],"14 to":["42,"],"14, so":["I"],"14. See:":["http://docs.python.org/2.7/library/re.html#re.UNICODE"],"14. That":["feels"],"14: If":["something"],"15, in":["test_stating_something"],"16 is":["still"],"16, 17`":["You"],"16, I":["don't"],"160 MB":["of"],"17 instead":["of"],"17 shouldn't":["be"],"17. And":["if"],"17? Then":["you"],"17` You":["could"],"18 overwrites":["the"],"18 tests":["in","in"],"19 is":["a"],"19 you":["need"],"1900 in":["order"],"19: return":["words[-1:]"],"1: New":["style"],"1: function":["names"],"1: you":["mostly"],"1` you":["should"],"1`, using":["`0`"],"1st argument":["says"],"2 GB":["memory,"],"2 blank":["lines","lines","lines."],"2 classes":["is"],"2 empty":["lines"],"2 expressions":["to"],"2 for":["me."],"2 function":["calls"],"2 newlines":["between"],"2 of":["your"],"2 statements":["on"],"2 to":["3"],"2) I":["do"],"2) Is":["there"],"2) No.":["It's"],"2) Python's":["easy"],"2) To":["answer"],"2, 'hello':":["2})"],"2, 3'`)":["though."],"2, and":["tabs"],"2, because":["in"],"2, there":["are"],"2-space indentation.":["How"],"2. \"return":["not"],"2. Also":["there's"],"2. CamelCase":["is"],"2. I":["believe","think"],"2. If":["it"],"2. Liked":["the"],"2. Most":["Python"],"2. Somehow":["I"],"2. That":["other"],"2. The":["import","question"],"2. There":["should"],"2. Try":["to"],"2. Was":["there"],"2. Whats":["your"],"2. Why":["is","are"],"2. You":["don't"],"2. `_replies`":["is"],"2. ```":["something.strip()[-1]"],"2. `elif`s":["are"],"2. `input`":["is"],"2. given":["that"],"2. readability":["could"],"2.2 usec":["per"],"2.2). It":["makes"],"2.42 usec":["per"],"2.7 (and":["won't"],"2.7 for":["my"],"2.7 on":["my"],"2.7 so":["the"],"2.7 tests":["pass"],"2.7, so":["I"],"2.7. I":["made","guess"],"2.7.3, which":["I"],"2.x GoodPractice":[":"],"2.x GoodPractice:":["make"],"2.x by":["extending","extending","extending","extending","extensing","extending","extending","extending"],"2.x code?":["Any"],"2.x it's":["a","generally"],"2.x versions,":["the"],"2.x you":["have"],"2.x) you":["should"],"2.x, better":["to","to","to","to","to","to","to"],"2.x, it":["is","is"],"2.x, it's":["better","better","better"],"2.x. More":["on","on","on","on","on"],"2.x/3.x features":["and"],"2/ I":["was"],"2/ having":["that"],"2/ pep8":["recommend"],"2/ you":["definitly"],"20 helps":["separate"],"20, is":["very"],"20, what":["the"],"200+ lines":["long,"],"21 :":["Bob"],"21 you":["may"],"21. I":["think"],"22 should":["be"],"22, your":["conditional"],"22--25 by":["reducing"],"22: return":["words.strip()"],"22: you":["need"],"23 -":["good"],"23 and":["25),"],"23 if":["you"],"23 would":["be"],"23, comment":["counts"],"24, I":["lost"],"25), since":["you're"],"25, which":["could"],"256 byte":["string,"],"257 --":["Docstring","Docstring","Docstring"],"257! (And":["just"],"26 *":["26","2):"],"26*26*1000, endless":["loop"],"29... Also,":["with"],"2: avoid":["overridding"],"3 `intertools.ifilter`":["is"],"3 and":["I","4","4"],"3 at":["all"],"3 checks":["to"],"3 compatible":["implementation."],"3 conditions":["not"],"3 easier,":["your"],"3 exercises":[":)"],"3 helper":["methods"],"3 if":["statements"],"3 lambdas":["each"],"3 lines":["in"],"3 of":["the"],"3 parts":["is"],"3 solutions":["there."],"3 tests":["fail,"],"3 this":["is"],"3 to":["get"],"3) They":["are"],"3) Why":["would"],"3), is":["recommended","recommended","recommended","recommended","recommended"],"3), that's":["recommended","recommended","recommended"],"3). `\"\\n\".join()`":["would"],"3, all":["classes"],"3, and":["should","should"],"3, as":["I"],"3, but":["I"],"3, you":["don't","could"],"3. An":["instance"],"3. As":["you"],"3. Current":["code"],"3. Currently":["you","you"],"3. For":["your"],"3. In":["such"],"3. It's":["optional","optional"],"3. Just":["wanted"],"3. Parentheses":["wrapping"],"3. Perhaps":["one"],"3. Related":["to"],"3. Since":["the"],"3. Still":["learning"],"3. You":["might","use","could"],"3. `input.endswith(x)`":["is"],"3. moving":["check"],"3. text[-1]":["can"],"3.9 usec":["per"],"3.x ONLY":["new-style"],"3.x compatibility,":["you"],"3.x is":["different..."],"3.x? --":["in"],"3/ pep8":["(again)"],"31 you":["call"],"31--34 by":["choosing"],"350 MB":["memory."],"39, in":["test_talking_forcefully"],"3: 2.2":["usec"],"3: 2.42":["usec"],"3: 3.9":["usec"],"3: 5.11":["usec"],"3:) I":["wish"],"3rd iteration":["better,"],"4 ==":["0"],"4 and":["4","9"],"4 could":["probably"],"4 does":["on"],"4 had":["the"],"4 lines":["long"],"4 now":["define"],"4 nucleotides":["to"],"4 of":["the"],"4 returns":["or"],"4 should":["be"],"4 spaces":["of"],"4 tests":["in"],"4 times":["in"],"4 to":["define","address"],"4 useless.":["This"],"4 would":["be"],"4), but":["I"],"4, because":["then"],"4, while":["javascript"],"4-fold increase":["in"],"4. *args,":["**kwargs"],"4. For":["that"],"4. Formatting":["is"],"4. In":["Python,"],"4. Normally":["I"],"4. Perhaps":["you"],"4. What":["do"],"400 ==":["0"],"400, the":["solutions"],"400k robots.":["This"],"42 (or":["from"],"42 chars":["long"],"42, since":["4"],"42s but":["used"],"44, in":["test_using_acronyms_in_regular_speech"],"48, in":["test_anagrams_are_case_insensitive"],"4` Is":["that"],"4` is":["great,"],"5 and":["leave"],"5 both":["more"],"5 functions":["would"],"5 not":["superfluous?"],"5. If":["you"],"5. Use":["new-style"],"5. What":["is"],"5.11 usec":["per"],"50 points":["for"],"50% more":["code,"],"59, in":["test_only_numbers","test_only_numbers"],"5: parentheses":["are"],"5` what":["does"],"5x faster":["that"],"6 Tests":["fail:"],"6 is":["buried","overkill.","not","not","good","actually"],"6 it's":["probably"],"6 months":["or","and"],"6 not":["cover"],"6, 12":["and"],"6, 9`,":["you"],"6. You":["are"],"64, in":["test_question_with_only_numbers"],"6; compared":["to"],"7 even":["simpler"],"7 is":["great."],"7 read":["a"],"7 there":["should"],"7-10 :":["The"],"7-10) and":["its"],"7. Consider":["getting"],"74 s":["and"],"79, in":["test_calmly_speaking_with_umlauts"],"7: slicing":["is"],"7` it's":["not"],"8 --":["Style","Style","Style","Style","Style","Style","Style"],"8 and":["got"],"8 could":["be"],"8 methods":["which"],"8 really":["necessary?"],"8 suggests":["http://www.python.org/dev/peps/pep-0008/#naming-conventions"],"8 years.":["Please","Please"],"8, I":["believe"],"8-9` in":["separate"],"80 char":["limit"],"80 character":["line","rule?","rule?","limit,"],"80+ character":["lines!"],"89, in":["test_statement_containing_question_mark"],"8: In":["Python"],"8](http://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements) says":["not"],"8` why":["do"],"9 (isosceles":["check)"],"9 look":["pretty"],"9 to":["your"],"9, `msg`":["is"],"9, why":["is"],"9.4 in":["python's"],"9000 test":["cases?"],"99 bottles":["of"],"99 or":["to"],"9`, you":["are"],": \"In":["the"],": \"Readability":["counts\"."],": \"Special":["cases"],": \"The":["summary"],": \"readibility":["counts\")"],": 2":["statements"],": Bob":["should"],": I":["have","guess","would"],": The":["logic"],": You":["don't"],": `\"A":["!"],": `Bob.Responses`":["should"],": `if":["n"],": `string.translate`":["is"],": an":["empty"],": answer\"":["dispatch."],": as":["far"],": don't":["use","break"],": if":["you're","usung"],": in":["Python"],": it's":["IMHO"],": make":["your","your","your"],": methods":["(whether"],": plain":["old"],": please":["check"],": polymorphic":["dispatch)"],": read":["the"],": return":["True"],": the":["Anagram","`string`","main"],": try":["`\"foo"],": type":["this"],": variables":["should","names"],": well,":["since"],": what":["are"],": why":["the"],": you":["should"],": your":["first","class"],":\"Compound statements":["(multiple"],":) (and":["I'm"],":) And":["found"],":) But":["you're"],":) Good":["job."],":) Haven't":["thought"],":) I":["would","feel","have"],":) I'm":["just","quite","completely","just"],":) I've":["used"],":) Keep":["up!"],":) My":["first"],":) Thanks!":["I"],":) The":["whole","same"],":) This":["isn't"],":) Wow,":["`str.maketrans`"],":) You":["could","make"],":) `_action`,":["`_bottles`"],":-) -":["just"],":S I":["really"],":p It":["works,"],":p Thanks":["for"],":param answer:":["the"],":param default:":["the"],":param predicate:":["a"],":params actions:":["a"],";( Thanks":["anyway"],";) Looks":["good"],";)). Having":["a"],";-) ).":["Also,"],";; C\".isupper()`":["-"],";;), two":["of"],"\u003c- ding":["me"],"\u003ca href=\"http://docs.python.org/3/library/collections.html#counter-objects\"\u003ecollections.Counter\u003c/a\u003e":["to"],"\u003ca href='http://docs.python.org/2/library/stdtypes.html#str.isupper'\u003eisupper()\u003c/a\u003e":["that"],"\u003ccode\u003e_is_shouting\u003c/code\u003e I'm":["unfamiliar"],"\u003ccode\u003eany\u003c/code\u003e and":["had"],"\u003ccode\u003ehey\u003c/code\u003e being":["order"],"\u003ccode\u003ehey\u003c/code\u003e is":["order"],"\u003ccode\u003eif\u003c/code\u003e statements":["instead?"],"\u003ccode\u003eis alpha\u003c/code\u003e.":["Also,"],"\u003ccode\u003ematch\u003c/code\u003e was":["working"],"\u003ccode\u003emessage.endswith('?')\u003c/code\u003e. You":["can"],"\u003ccode\u003emessage.isupper()\u003c/code\u003e to":["check"],"\u003ccode\u003ewords.strip() ==":["''\u003c/code\u003e"],"= \"\"":["if"],"= \"\"```,":["as"],"= \"(012)":["345-6789\""],"= \"?\"```":["is"],"= \"Fine.":["Be"],"= \"T\"`,":["etc."],"= ''.join(ch.lower()":["for"],"= ''`,":["and"],"= 'Fine.":["Be","Be"],"= 'T'`,":["but","etc."],"= 'Woah,":["chill","chill"],"= (message":["or","or"],"= -1`,":["as"],"= ...`":["as"],"= DNA":["|"],"= None`":["is","and","is"],"= Phone(\"(123)":["456-7890\")"],"= T`":["on"],"= [(is_silent,":["'Fine."],"= [(lambda":["input:"],"= [False,":["None]"],"= [item":["for"],"= [normalize_word(w)":["for"],"= answer'":["line"],"= any(c.isalpha()":["for"],"= blah`":["and"],"= count_phrase.translate(None,":["punctuation)`"],"= counts.get(word,":["0)"],"= f(*args,":["**kwds)"],"= f(self,":["*args,"],"= filter(lambda":["item:"],"= getattr(self,":["prop)"],"= greeting":["or"],"= message":["or","or","or","or","if"],"= msg":["=="],"= re.findall(r\"[\\w']+\",":["self.phrase)"],"= self.phrase.translate(None,":["string.punctuation)`"],"= sorted(word.lower())`,":["etc.)"],"= statement":["or","or"],"= text":["or","or"],"= whatBobHeard":["or"],"= {}`":["with"],"=) I":["was"],"=) [Here":["it"],"=) for":["`s"],"=). The":["comment"],"== \"\"":["or"],"== \"\"`":["can"],"== \"\"```":["is"],"== \"?\".":["Keep"],"== \"?\"`":["since","seems"],"== \"__main__\"`":["block"],"== '":["'`"],"== ''":["but"],"== ''\"":["that"],"== ''\u003c/code\u003e":["is"],"== ''`":["could","in","idiom","because","is"],"== ''```":["can"],"== '?'":["be","```","as"],"== '?'`":["You"],"== '?'`,":["you"],"== '?'```":["is"],"== 'None'":["is"],"== 0":["or","and","or"],"== 0)`.":["I've"],"== 0,":["is"],"== 0:`":["and"],"== 0:`,":["etc.)","you"],"== 0`":["You","is","versus","to","doesn't","as"],"== 0`)":["that"],"== 0```":["is"],"== 10`":["and"],"== Counter(word)`":["for"],"== None":["or","?","or"],"== None`":["?","is"],"== None`,":["you","since"],"== None`.":["Use"],"== greeting```":["may"],"== inputString`,":["you"],"== message.upper()":["then"],"== message.upper()\",":["but"],"== message.upper().":["By"],"== message.upper():":["#"],"== other._lowercased":["and"],"== other._sorted`)":["eventually"],"== s":["and"],"== said.upper`":["(`isupper`"],"== sentence`":["should"],"== signature,":["anagram_list)`"],"== text.upper()":["and"],"== text`":["into"],"== x`":["instead"],"=\u003e asking":["if"],"=\u003e the":["\"len(string)"],"\u003e 0":["is"],"\u003e 0\"":["in"],"\u003e 0:`":["is"],"\u003e 0`":["test"],"\u003e Clients":["should"],"\u003e If":["number"],"\u003e Sparse":["is"],"\u003e Things":["that"],"\u003e methods":["in","in","in"],"\u003e0 isn't":["needed,"],"\u003e\u003e\u003e 'A'":["in"],"\u003e\u003e\u003e 'GG'":["in"],"\u003e\u003e\u003e 'GGG'":["in"],"\u003e\u003e\u003e Anagram.is_anagram('inlets',":["'listen')","'banana')"],"\u003e\u003e\u003e Counter(\"hello":["hello"],"\u003e\u003e\u003e dna":["="],"\u003e\u003e\u003e dna[0]":["="],"\u003e\u003e\u003e from":["anagram","collections"],"\u003e\u003e\u003e p":["="],"\u003e\u003e\u003e p.number":["="],"\u003eReturn true":["if"],"\u003eword for":["word"],"? (Zen":["of"],"? (and":["isn't"],"? (hint":[":",":"],"? (hint:":["look","the","Python","Python","Python","python"],"? (hints:":["python"],"? A":["few"],"? And":["what"],"? Can":["you"],"? Do":["you"],"? Hint":[":",":"],"? Hint:":["Python","all"],"? How":["could","could","could"],"? I":["think","think"],"? If":["yes,","the"],"? In":["a"],"? Inlining":["them"],"? Look":["at"],"? Looks":["more"],"? Note":["the","that"],"? Or":["are"],"? What's":["wrong"],"? Why":["do","make"],"? Will":["your"],"? Wouldn't":["a"],"? You":["don't","could"],"? `is_anagram`":["(and"],"? at":["the","the"],"? means":["a"],"??? Or":["is"],"@adrien You're":["right,"],"@agustina) i":["would"],"@aiyana, I":["had"],"@aiyana, That's":["a"],"@amani: personal":["opinions"],"@amely's feedback,":["I"],"@amiya) to":["test"],"@amos, you're":["right."],"@anabel Thanks!":["That's"],"@angeline. Simple":["and"],"@aniyah's right,":["but"],"@annabell I":["can't"],"@aron Thanks":["a"],"@autumn How":["do"],"@barrett, great":["tip!"],"@bart I":["think"],"@bart updated.":["Could"],"@bennett `reduce`":["iterates"],"@bennett, thanks":["for"],"@berenice :":["I"],"@bradley thank":["you"],"@breanne completely.":["Exalent"],"@brigitte makes":["interesting"],"@brown. Factoring":["out"],"@carmela weird,":["tests"],"@carson thank":["you"],"@caterina My":["thought"],"@chris! I":["didn't"],"@cleveland: Good":["idea."],"@coby: Only":["trailing"],"@cooper you":["probably"],"@corbin Hm,":["I"],"@dagmar's suggestion,":["assuming"],"@dahlia -":["not"],"@dahlia IRL":["might"],"@darian Agree,":["the"],"@davon re.":["new"],"@davon suggested":["getting"],"@derick for":["taking"],"@dewitt, I":["looked"],"@dolly I":["don't"],"@eladio Huh...":["You're"],"@elijah, yeah":["this"],"@emily -":["Welcome"],"@emmanuelle I":["prefer"],"@emmanuelle about":["switching"],"@estefania: I":["will"],"@estefania: In":["the"],"@estelle: I'm":["ok"],"@eva I":["just"],"@ezekiel I":["just"],"@fausto yep":["I"],"@garrick Thanks":["a"],"@georgette. Not":["sure"],"@georgette: good":["call"],"@geovanny Maybe":["the"],"@geovany mentioned,":["`input`"],"@gerda Not":["quite"],"@golden: is":["the"],"@helen :":["please"],"@hertha: thanks":["for"],"@hortense Thanks,":["I"],"@howard: your":["initializer"],"@ignatius's nitpicks.":["Also,"],"@ivory Thanks":["again"],"@jairo and":["@jairo"],"@jairo for":["the"],"@jakayla You've":["chosen"],"@jamey Ok,":["good"],"@janet, good":["points."],"@javier :":["well,"],"@javon you":["are"],"@jed: thanks":["for"],"@jerod :":["as"],"@jesse thanks":["for"],"@jody Thank":["you!"],"@judson: I":["fail"],"@judson: it's":["good"],"@judy I":["think"],"@justice: `str.strip()`":["might"],"@katherine on":["the"],"@kayli -":["sweet,"],"@kaylin -":["where"],"@kelley: yes":["I"],"@kirsten: about":["\"to"],"@kitty Oh":["my"],"@kurt annotation":["creates"],"@lacey. I":["know,"],"@leon i":["like"],"@lisette ||=":["calc_foo"],"@lorenza explicit":["else"],"@mabel. I'm":["submitting"],"@magnolia: he's":["not"],"@malachi why":["shouldn't"],"@mara: I'm":["not"],"@marcelino From":["http://www.python.org/dev/peps/pep-0257/#multi-line-docstrings"],"@marian, he":["is"],"@maximo good":["point,"],"@maye: I":["was"],"@mia thanks":["for"],"@milford do":["you"],"@mohammad Thanks":["for"],"@molly meant":["is"],"@nadia: I":["think"],"@nickolas :":["the"],"@noemy and":["@noemy."],"@noemy. I'll":["go"],"@owen: good":["point."],"@paxton 's":["mention."],"@paxton I":["think"],"@payton Can":["you"],"@precious thank":["you."],"@quinton. I":["think"],"@ransom :":["it's"],"@raven: You":["doesn't"],"@rhea Thank":["you!"],"@rhett Hopefully":["you"],"@rhett from":["my"],"@river: we":["don't"],"@rocky's suggestion":["of"],"@rogelio: there":["are"],"@romaine: there's":["another"],"@rosario: don't":["spoil"],"@rowan thanks,":["didn't"],"@sabina You":["are"],"@sabryna: the":["one-liner"],"@sadie -":["I"],"@seamus: what":["I"],"@sebastian, is":["this"],"@seth: yes":["an"],"@sheldon, I":["didn't"],"@sidney -":["You"],"@summer decorators":["versus"],"@therese Do":["you"],"@torrey on":["first"],"@tyson, thanks,":["those"],"@vallie Thanks":["for"],"@vicky: I":["don't"],"@vicky: Oh,":["I"],"@vicky: This":["doesn't"],"@virginie -":["Have"],"@wilma [version](http://exercism.io/anntzer/python/rna-transcription).":["It's"],"@wilmer: I":["like"],"@woodrow, somehow.":["Hmm."],"@woodrow: I":["totally"],"@woodrow: you":["choosed"],"@yesenia: see":["our"],"@yessenia, a":["few"],"A \"word\"":["is"],"A Native](http://bit.ly/1cMNib6)":["for"],"A Native](http://nedbatchelder.com/text/iter.html)":["as","by"],"A ``DNA``":["object"],"A `not":["message`"],"A bit":["more","verbose"],"A class":["would","decorator,"],"A classic":["use","exercise"],"A client":["could"],"A comment":["could","explaining"],"A couple":["of","of","of","small","other"],"A dead":["simple"],"A docstring":["is"],"A elif":["..."],"A fairly":["extensible"],"A few":["notes","things","comments","things:","things","global","hints:","typos","notes","notes:","pointer","more","other","things:"],"A first":["time"],"A flatter":["structure"],"A friend":["linked"],"A general":["rule"],"A language":["is"],"A list":["comprehension"],"A little":["hint:","tip:"],"A matter":["of"],"A minor":["thing:"],"A more":["theoretical","generic","idiomatic"],"A nice":["clean"],"A noun":["like"],"A one-liner":["method"],"A shorter":["solution"],"A small":["side"],"A solution":["where"],"A well-written":["initializer"],"A-&gt;A, G-&gt;G,":["C-&gt;C,"],"ALL =":["DNA"],"ALL CAPS.":["After"],"ALL non-alphanumerics":["and"],"ALL of":["the"],"AND `sort`)":["could"],"AND get":["rid"],"AND independant":["from"],"AND totally":["unpythonic."],"AND utterance":["parsing),"],"ANSWERS =":["{"],"API (you":["can"],"API ?":["Or"],"API and":["they're"],"API by":["one"],"API can":["be"],"API is":["`word_count`.","what","debatable,"],"API or":["would","to","are"],"API reference?":["In"],"API should":["be"],"API\", you":["just"],"API, IMHO":["in"],"API. Also,":["for"],"API. Consider":["clarifying"],"API. Even":["regex"],"API. My":["only"],"API. Other":["than"],"API. They":["can"],"API. `elif`/`else`":["in"],"API. ifs":["in"],"API: What":["if"],"API: http://docs.python.org/2/library/stdtypes.html#string-methods":["."],"API? Or":["maybe"],"ASCII sometimes":["isn't"],"Abele --":["thanks"],"Abele Thanks":["for"],"About as":["DRY"],"About part":["1:"],"About the":["double","exception","`MethodDispatcher`","code","regular","comments...with"],"About your":["docstrings,"],"Absolutely no":["reason"],"Accidentally submitted":["a"],"According to":["Zed","the","[PEP"],"Ack! Markdown":["fail."],"Ack, the":["double-underscores"],"Action(is_shouting, \"Woah,":["chill"],"Action(is_silent, \"Fine.":["Be"],"Actually in":["the"],"Actually one":["advantage"],"Actually that":["*is*"],"Actually, a":["list"],"Actually, let":["me"],"Actually, these":["aren't"],"Add a":["space"],"Added a":["new"],"Added caching":["in"],"Added case":["insensitivity"],"Added docstrings.":["Are"],"Added single":["underscore"],"Added them":["to"],"Added whitespace":["to"],"Adding blank":["lines"],"Adding variables":["doesn't"],"Additional documentation":["(either"],"Additionally you":["can"],"Additionally, I'm":["not"],"Additionally, conventionally":["leading"],"Additionally, these":["filters"],"After a":["lot"],"After all,":["it's"],"After nitpicking":["some"],"After some":["back"],"After these":["changes"],"Again, pretty":["much"],"Again, solid":["solution,"],"Agree with":["@torrey","pretty"],"Agree, the":["simpler"],"Agreed, I've":["cleaned"],"Agreed. I'm":["not"],"Agreed. Other":["than"],"Ah I":["see"],"Ah yes,":["underscore"],"Ah! `collections.Counter`!":["I"],"Ah, I":["was","was","see.","like","like","didn't","see","missed"],"Ah, and":["I"],"Ah, cool,":["I"],"Ah, forgot":["about"],"Ah, good":["call.","point","question."],"Ah, nice..":["you"],"Ah, right.":["Looks"],"Ah, thank":["you."],"Ah, that":["makes"],"Ah, this":["is"],"Ah, yeah,":["that"],"Ah. Good":["idea."],"Ah...I started":["off"],"Ahh thank":["you"],"All `pep8`":["told"],"All helper":["methods"],"All in":["all","all"],"All instance":["members"],"All those":["selfs!"],"All three":["of"],"All you":["need","need"],"Almost good":["..."],"Almost there":[";)"],"Already did.":["No"],"Also I":["like","find"],"Also I'm":["not","not"],"Also `__init__(self)`":["is"],"Also `dirtyInput`":["is"],"Also about":["the"],"Also according":["to"],"Also came":["up"],"Also check":["`str.isupper`"],"Also consider":["if","if","getting"],"Also default":["action"],"Also docstrings":["are"],"Also from":["PEP8"],"Also have":["to"],"Also if":["you","you're"],"Also in":["you","combination"],"Also it":["is"],"Also maybe":["try","helpers"],"Also minor":["but"],"Also moved":["the"],"Also normalizing":["and"],"Also note":["that"],"Also precalculated":["the"],"Also remember":["that","that"],"Also removed":["subclassing,"],"Also short":["docstring"],"Also since":["`rawinput`"],"Also subclass":["`object`,"],"Also the":["`Anagram.match()`"],"Also there":["should","is"],"Also there's":["no","more"],"Also this":["condition:"],"Also though":["about"],"Also to":["renaming","make"],"Also try":["to"],"Also use":["of","of"],"Also using":["regexps","filter"],"Also very":["grateful"],"Also what":["is"],"Also what's":["the","the"],"Also works":["as"],"Also you":["still","can","may"],"Also, I":["will","factored","like","think","started","had","don't"],"Also, I'd":["suggest"],"Also, I'll":["note"],"Also, I'm":["not","interested","told"],"Also, I've":["seen","added"],"Also, In":["python"],"Also, Python":["format"],"Also, ```":["is_silent"],"Also, ```\\w```":["includes"],"Also, `re.split`":["drops"],"Also, `self.phrase":["is"],"Also, a":["string"],"Also, an":["emply"],"Also, another":["thing"],"Also, assuming":["you"],"Also, consider":["reading"],"Also, could":["the"],"Also, do":["you"],"Also, don't":["use"],"Also, even":["for"],"Also, explicit":["use"],"Also, for":["Python","'aggresive'"],"Also, good":["point"],"Also, have":["you"],"Also, if":["you","you","you're","you"],"Also, in":["python","`#is_valid`,"],"Also, is":["really"],"Also, it":["can","might"],"Also, it's":["a"],"Also, none":["of"],"Also, python":["uses"],"Also, python's":["`collections`"],"Also, so":["much"],"Also, something":["lile"],"Also, strings":["have"],"Also, take":["another","a"],"Also, that":["semicolon"],"Also, the":["'T'","`else`","`if","normalization","init","`upper()`","one"],"Also, there":["is"],"Also, there's":["no","more","some"],"Also, they're":["easier"],"Also, this":["may","keeps","was"],"Also, to":["make"],"Also, try":["to"],"Also, use":["of"],"Also, usually":["private"],"Also, what":["would"],"Also, while":["I"],"Also, why":["are","the"],"Also, with":["a"],"Also, wouldn't":["extracting"],"Also, you":["might","can","could","misspelled","can"],"Also, your":["code"],"Also–I'm new":["to"],"Altering state":["of"],"Alternative move":["would"],"Alternatively to":["sub"],"Alternatively you":["could","can"],"Alternatively, you":["can","could","could"],"Although \"sum":["of"],"Although I":["have"],"Although I'd":["prefer"],"Although it":["is"],"Although it's":["nothing"],"Although, I":["suppose"],"Although, as":["you"],"Although, would":["it"],"Always better":["to"],"Always surround":["comparisons"],"Always use":["`startswith()`"],"Am I":["missing","missing","missing"],"Am still":["trying"],"Amazing feedback.":["I'll"],"An `__init__`":["should"],"An `if`":["will"],"An alternative":["name"],"An easier":["way"],"An efficiency":["concern:"],"An empty":["string","string","string","string","string","string","string","string"],"An exception":["would"],"An instance":["method"],"Ana! Great":["suggestions"],"Anagram ```,":["but"],"Anagram class":["already"],"Anagram('Orchestra').match('cashregister carthorse":["radishes'.split())"],"Anagram('ant').match('tan stand":["at'.split())"],"Anagram('tan').match('tan stand":["at'.split())"],"Anagram.source is":["public"],"And I":["do","just","suggest","would","created"],"And Python":["has"],"And `s`":["is"],"And `str.isupper`":["treats"],"And a":["last","`isYelling`"],"And also":["make"],"And default":["answer"],"And don't":["forget"],"And for":["`isShouting()`,"],"And found":["```endswith()```"],"And if":["you","the","you","you"],"And imho":["it"],"And in":["that"],"And indeed,":["returning"],"And it":["reads"],"And it's":["not","more"],"And now":["I'm"],"And of":["course","course"],"And once":["you"],"And one":["last"],"And out":["of"],"And re:":["one-liner"],"And simply":["use"],"And thank":["you!"],"And that":["in"],"And that's":["exactly","rather","pretty"],"And the":["functional","tests","last"],"And there":["is"],"And there's":["no"],"And well,":["since"],"And what":["if","the"],"And why":["did"],"And write":["all"],"And yes":["indeed","there's"],"And yes,":["it","it","implementation"],"And yet":["I"],"And your":["functions"],"And, I":["like"],"And, adjusted":["the"],"Another (simpler)":["way"],"Another approach":["would"],"Another good":["reason,"],"Another hint:":["`IsEmpty`"],"Another minor":["nitpick,"],"Another recommendation":["is","would"],"Another solutions":["would"],"Another thing,":["is"],"Another though":[":"],"Another update":["incoming..."],"Any chance":["of"],"Any feedback":["is","is","is","is"],"Any idea":["on"],"Any ideas":["are"],"Any of":["them"],"Any particular":["reason"],"Any reason":["to"],"Any tips":["on"],"Anyhow, I've":["made"],"Anyway, I":["submitted","don't","agree","won't"],"Anyway, I'm":["probably"],"Anyway, I've":["dropped"],"Anyway, elifs":["are"],"Anyway, looks":["good."],"Anyway, this":["looks"],"Are nested":["functions"],"Are there":["better"],"Are they":["recommended?","descriptive?"],"Are you":["referring","still","sure","sure","are","using","trying","using","sure"],"Are your":["if/elif/else"],"Argh! I":["had"],"As BrianHicks":["pointed,"],"As I":["said"],"As SysCoder":["says,"],"As a":["last","general","matter","side"],"As an":["aside,","aside,"],"As far":["as","as","as"],"As for":["the","the","the","```.strip()```,","`strand`","speed","encoding,","the","the","the"],"As i've":["seen"],"As it":["maintains","happens","is"],"As it's":["seen,"],"As long":["as","as"],"As mentioned":["elsewhere,"],"As someone":["else","pointed"],"As such,":["the"],"As this":["can"],"As to":["wether"],"As usual":["with"],"As usual,":["subclassing"],"As you":["said,","wish.","point","can","currently"],"Aside from":["that,"],"Ask yourself:":["why"],"AssertionError: 'Sure.'":["!="],"AssertionError: 'Whatever.'":["!=","!=","!=","!=","!=","!=","!="],"AssertionError: 'Woah,":["chill"],"AssertionError: ['carthorse']":["!="],"Assuming that":["passing","the"],"At a":["high"],"At any":["rate,"],"At first":["I"],"At first,":["I"],"At least":["it's","It","I"],"At the":["same","same","same"],"AttributeError: 'NoneType'":["object"],"Awesome feedback,":["thanks!"],"Awesome, thanks":["for"],"Awesome. I":["like"],"B elif":["..."],"BOB_SETTINGS =":["{"],"BOOLs for":["their"],"BOTH make":["implementation"],"BRO!?', which":["I"],"BTW, thanks":["for"],"BUT :":["your"],"BUT an":["empty"],"BUT in":["this"],"BUT there's":["no"],"Bad(tm). You":["only"],"Bah. Some":["people"],"Basically, I've":["just"],"Batchelder for":["some"],"Batchelder post":["[Loop"],"Batchelder presentation":["[Loop"],"Batchelder: Loop":["Like"],"Be That":["Way\""],"Be gentle.":[":)",";-)"],"Be that":["way.\"`","way.\"","way.\"","way.\"","way.\")","way.'","way\".","way.'","way!'","way!'),","way.'","way!\",","way!`.","way.\"","way!`.","way!\",","way.\"),","way!'),","way!'","way!,","way!\"","way!'","way.'","way!\")]","way!\"","way!'"],"Because [PEP8](http://www.python.org/dev/peps/pep-0008/#public-and-internal-interfaces)":["recommends"],"Because for":["some"],"Because it":["lists"],"Because my":["first"],"Because sequence":["is"],"Because that":["work"],"Because the":["test-cases"],"Beck's classic":["tome"],"Been here,":["done"],"Believe me":["when"],"Below are":["some"],"Besides, it":["actually"],"Best Practice":["Patterns\""],"Better in":["terms"],"Better naming":["for"],"Better would":["be"],"Better yet,":["name"],"Beware of":["side"],"Bill and":["Fred"],"BinaryFu, thanks":["for"],"Bit more":["on"],"Blank line":["after"],"Bob (now":["Bob"],"Bob (or":["a"],"Bob AND":["utterance"],"Bob API":[":)"],"Bob API:":["What"],"Bob ```":["provides"],"Bob and":["Statement,","Sentence"],"Bob answers":["'Sure.'"],"Bob anything":["with"],"Bob class":["is","it's","and","should","100000","to","inherits"],"Bob could":["utilize"],"Bob doesn't":["receives"],"Bob exercise":["and","and"],"Bob exercise,":["I"],"Bob exercises":["on"],"Bob gets,":["and"],"Bob he":["will","will","will"],"Bob if":["that's"],"Bob in":["any","python,","the"],"Bob instead":["of"],"Bob interface,":["mostly"],"Bob is":["yelled","not","being","the","awesome.","really","only","also","trying","being","not","yelled","a","forgotten),"],"Bob needed":["to"],"Bob object":["to"],"Bob object.":["I"],"Bob object?":["The"],"Bob only":["has"],"Bob problem,":["and"],"Bob reacts":["on"],"Bob really":["a"],"Bob should":["respond","probably"],"Bob submission.":["I"],"Bob tests":["to"],"Bob to":["say","collaborate"],"Bob was":["given"],"Bob who":["would"],"Bob will":["respond,","reply","take"],"Bob would":["need","be","always"],"Bob's answers":["as"],"Bob's attitude":["through"],"Bob's ears":["can't"],"Bob's initializer.":["A"],"Bob's interface.":["If"],"Bob's internal":["state"],"Bob's internals":["doesn't"],"Bob's name":["in"],"Bob's perspective":["he"],"Bob's public":["interface."],"Bob's replies":["to"],"Bob's response":["behavior?","will"],"Bob's responses":["are","are","in"],"Bob's state,":["and"],"Bob()` --":["here's"],"Bob(object). It":["is"],"Bob(object)` instead":["of"],"Bob(object)`. In":["Python"],"Bob, since":["nobody"],"Bob, such":["as"],"Bob. Right":["now"],"Bob. Since":["you're"],"Bob.answers['question']` or":["something,"],"Bob.hey seems":["to"],"Bob.hey(text) and":["you"],"Bob.hey, it's":["the"],"Bob.no_lowercase or":["Bob.question."],"Bob.question. Should":["you"],"Bob.theTests rather":["than"],"Bobs answers":["(I"],"Bold rework!":["I"],"Booleans are":["automatically"],"Both fetch":["the"],"Both these":["recommendations"],"Brandon Rhodes":["presentation","presentation","presentation"],"Brave first":["steps"],"Brian's suggestion":["might"],"BrianHicks pointed,":["this"],"BrianHicks! Good":["suggestions."],"BrianHicks' suggestions":["from"],"Btw all":["the"],"Btw, loved":["your"],"Btw, there":["is"],"Build broken!":["Penalty"],"Building strings":["by"],"Building upon":["hostmaster's"],"Built-in String":["Types"],"But :":["`string.translate`"],"But I":["realize","did","think,","didn't","understand","have","can","think"],"But a":["few"],"But as":["I've"],"But at":["the"],"But changing":["the"],"But definitely":["it"],"But dict":["is"],"But doing":["as"],"But even":["if"],"But extra":["bonus"],"But for":["a","all"],"But generally":["sort"],"But have":["a"],"But here,":["`filter`"],"But hey,":["it's"],"But if":["it","you","converse"],"But in":["nature,","this","case","this","this"],"But isn't":["that"],"But it":["definitely"],"But it's":["very","worth","too"],"But lambdas":["are"],"But lowercasing":["and"],"But now":["you"],"But once":["I"],"But since":["you"],"But some":["tweaked"],"But sometimes,":["thinking"],"But still,":["```''"],"But that":["is","seemed"],"But that's":["rather","all","getting"],"But the":["usual"],"But then":["I'd","I"],"But there":["is"],"But there's":["still"],"But these":["are"],"But this":["way","code","never","check"],"But usage":["of"],"But we":["usually"],"But what":["can","does"],"But what's":["a","a"],"But while":["this"],"But why":["are"],"But with":["your"],"But you":["could","could"],"But you're":["correct;"],"But, I":["think","think"],"But, for":["sure,"],"But, in":["this"],"But, no,":["I"],"But, that's":["a"],"But, they":["are"],"But, this":["failed"],"But, yes,":["I"],"But. It's":["good."],"By decoupling":["predicates"],"By extracting":["even"],"By having":["a"],"By naming":["the"],"By restructuring":["it"],"By that":["I","you"],"By the":["better"],"C -":["at"],"C ]":["solution"],"C a":["lot."],"C and":["getting","much"],"C before.":["It's"],"C in":["any"],"C instead":["-"],"C to":["write"],"C\".isupper()` -":["and"],"C), so":["it's"],"C++ nor":["Java."],"C++ not":["Java,"],"C++/Java parlance":["for"],"C-&gt;C, but":["T-&gt;U."],"C/C++/Java days,":["and"],"CAPITALIZE_CONSTANTS. You":["might"],"CAPS' if-statement":["simpler."],"CAPS. After":["some"],"CASE SHOUTING":["case"],"CHILLOUT =":["'Woah,"],"CPython caches":["small"],"Calling the":["module"],"CamelCase is":["reserved","rather"],"CamelCased is":["reserved","reserved","generally"],"CamelCased names":["are","are","are","are"],"Can I":["justify","have","see"],"Can anyone":["think"],"Can someone":["else"],"Can that":["process"],"Can you":["think","think","think","explain","think","think","come","think","recommend","think","elaborate","find","think","instantiate","simplify","think","simplify","simplify","make","simplify","remove"],"Can't see":["how"],"Can't we":["require"],"CapWords, capitalize":["all"],"Care to":["exemplify?"],"Case Characters.\"":["Is"],"Case statement":["-"],"Certainly, when":["you"],"Chained if-elif-else":["is"],"Changed variable":["names"],"Characters.\" Is":["just"],"Check for":["anagram"],"Check in":["`is_question`"],"Check out":["the","`Counter`.","`str.endswith()`","how","some","http://docs.python.org/2/library/stdtypes.html#str.isupper","`collections.defaultdict`"],"Check the":["latest,"],"Checked both":["python2.7"],"Checking `if":["not"],"Checking `len`":["is"],"Checking for":["the"],"Checking: OK,":["cool."],"Checkout \"Counter()\"":["from"],"Class `":["and"],"Class is":["overly"],"Class members":["being"],"Clean Code.":["So"],"Clean and":["intuitive"],"Clear and":["concise,"],"Clear, concise,":["but"],"Clients should":["use"],"Clojure version).":["However,"],"Clojure's `frequencies`":["(http://clojuredocs.org/clojure_core/clojure.core/frequencies)"],"Code formatting":["is"],"Code is":["fine"],"Code looks":["nice"],"Code should":["not"],"Code. So":["`wordlist`"],"Code: Naming":["Styles](http://www.python.org/dev/peps/pep-0008/#descriptive-naming-styles)."],"Code](http://www.python.org/dev/peps/pep-0008/) for":["details."],"Code](http://www.python.org/dev/peps/pep-0008/) on":["how","how"],"Code](http://www.python.org/dev/peps/pep-0008/) recommends":["documenting"],"Code](http://www.python.org/dev/peps/pep-0008/], between":["import"],"Coding Convention":["on"],"Coincidentally, I":["might"],"Colon in":["`is_query`"],"Combined with":["pkoch's"],"Combining list":["into"],"Comments become":["stale/misleading"],"Comments in":["helpers"],"Communication -":["Why"],"Complete list":["is"],"Completely missed":["the"],"Con: You":["have"],"Concerning private":["members:"],"Concise -":["I"],"Concise, I":["like"],"Congratulation on":["brave"],"Consider avoiding":["repeatedly"],"Consider building":["strings"],"Consider clarifying":["what"],"Consider doc":["string"],"Consider factoring":["the","out","out"],"Consider getting":["into","into","into","into","into","into","into","into","into","into","into"],"Consider if":["helper","helpers"],"Consider moving":["the"],"Consider using":["string","`strip()`","```strip()```","re.findall","a"],"Considered making":["a"],"Constructor won't":["be"],"Consult PEP8":["per"],"Convention on":["Github)"],"Conventions]([http://www.python.org/dev/peps/pep-0257/) examples":["show"],"Conventions](http://rhodesmill.org/brandon/slides/2013-03-pycon/) presentation":["slides"],"Conventions](http://www.python.org/dev/peps/pep-0257/) on":["how"],"Conversation kind":["of"],"Converts` and":["of"],"Cool that":["you"],"Cool! How":["about"],"Cool, I":["think"],"Cool, isupper()":["seems"],"Cool, looks":["like"],"Cool, thanks":["for"],"Cool, thanks!":[":)"],"Cool, will":["make"],"Cool. You've":["clearly"],"Cosmetic changes...":["but"],"Could I":["ask"],"Could anyone":["vote","explain"],"Could consider":["having"],"Could it":["be","be","be"],"Could just":["use"],"Could simplify":["your"],"Could that":["be"],"Could the":["regex","method"],"Could you":["be","put","avoid","somehow","consider","think","precalculate","do","name","extract","take","make","change"],"Couldn't the":["comments"],"Couldn't you":["just"],"Counter and":["cast"],"Counter counts":["chars!"],"Counter does":["as"],"Counter doesn't":["count"],"Counter for":["`self.word`"],"Counter from":["collections","collections.","the"],"Counter is":["more","implemented","great","a","used"],"Counter object!":["It"],"Counter seems":["to"],"Counter should":["be","be"],"Counter to":["dict"],"Counter works,":["maybe"],"Counter(\"hello hello":["you"],"Counter() is":["extremely"],"Counter(word)` for":["word"],"Counter({'you': 2,":["'hello':"],"Counter, but":["now"],"Counter, initialize":["dictionary"],"Counter, nice":[":)"],"Counter. I":["suppose","am"],"Counter.update allows":["you"],"Counter\\n[Counter(\"sadfasdfagrregwfagfregawgfresafafewrf\") for":["x"],"Counter\\n[Counter(\"sadfasdfagrregwfagfregawgfresafafewrf\"*10000) for":["x","x"],"Counter` to":["make"],"Couple of":["minor"],"Couplet concept?":["I"],"Create an":["issue"],"Creating a":["separate"],"Critique welcome":["in"],"Current access":["using"],"Current code":["doesn't"],"Current tests":["will"],"Currently `T`":["and"],"Currently it":["seams"],"Currently they":["are"],"Currently you":["don't","don't"],"Currently, the":["function"],"DFA by":["hand)."],"DNA (at":["least,"],"DNA (e.g.":["``'GG'``"],"DNA =":["set(\"GCAT\")"],"DNA and":["RNA","RNA.","RNA"],"DNA but":["it's","it's","it's"],"DNA class":["describes","with"],"DNA class,":["I"],"DNA class.":["Fix"],"DNA dict":["itself"],"DNA instance":["?","as"],"DNA instance?":["Another"],"DNA is":["\"converted\"","some","a"],"DNA object":["is","wrap"],"DNA objects":["can"],"DNA sequence":["-","itself,","as","as"],"DNA strand":["representation."],"DNA strand,":["its"],"DNA string":["to","to"],"DNA to":["RNA","class"],"DNA transcription":["to"],"DNA transcription.":["Certainly,"],"DNA transformer,":["but"],"DNA version.":["While"],"DNA with":["the"],"DNA |":["RNA"],"DNA(object)``` in":["python2.x."],"DNA, but":["the"],"DNA, then":["replace"],"DNA-&gt;RNA transcription":["in"],"DNA-&gt;RNA transcription,":["I'm"],"DNA-&gt;RNA transcription.":["Here,"],"DNA-sequence once":["and"],"DNA. Calling":["the"],"DNA. That's":["was"],"DNA. This":["doesn't"],"DNA.nucleotides really":["a"],"DNA/RNA. I've":["heard"],"DRY (Don't":["Repeat"],"DRY and":["generic"],"DRY. A":["general"],"DSL argument":["-"],"DSL but":["it's"],"DSL for":["such"],"DSL. I":["read"],"DSLs in":["python"],"Damn. The":["spec"],"Dang it!":["I've"],"Dealing with":["the"],"Decoupling phrase":["identification"],"Defining additional":["methods"],"Defining no-op":["constructor"],"Definitely _normalize_":["and"],"Definitely looks":["better"],"Definitely minimal,":["and"],"Definitely understand":["what"],"Degrading performance":["when"],"Depending on":["context,","the","how","which"],"Depends on":["the"],"Derp, left":["that"],"Design decision:":["Assuming"],"Dictionary from":["Iteration"],"Did not":["want"],"Did that":["in"],"Did you":["mean","consider","mean","read","mean","consider","consider","know","try"],"Didn't know":["that","that","about","of","that.","that"],"Disclaimer, before":["this"],"Disclaimer: not":["a"],"Dive into":["Python"],"Django applications,":["and"],"Do I":["have","just","just"],"Do i":["need"],"Do the":["tests"],"Do you":["think","need","think","mean","really","mean","mean","mean","mean","mean","feel","think","mean","have","notice","really","really","think","really","really","need","really","mean","use","need","need","need","need","really","really"],"Do'h, indeed.":["Thanks!"],"DocStrings should":["be"],"Docstring Conventions]([http://www.python.org/dev/peps/pep-0257/)":["examples"],"Docstring Conventions](http://www.python.org/dev/peps/pep-0257/)":["on"],"Documentation in":["triple"],"Does 's'":["stands"],"Does `_next_verse`":["behave"],"Does a":["default"],"Does an":["empty"],"Does it":["pass","have","look"],"Does line":["6"],"Does that":["make"],"Does this":["code","even"],"Doesn't `str.split()`":["split"],"Doesn't make":["sense"],"Doesn't my":["formatting"],"Doing DSLs":["in"],"Doing `NothingSpecial.handle(str)`":["is"],"Doing that":["means"],"Doing the":["'uppering'"],"Doing this":["exercises"],"Don't forget":["the"],"Don't have":["so"],"Don't know":["if"],"Don't like":["the"],"Don't put":["spaces"],"Don't use":["`var","`elif`"],"Don't worry,":["I'm"],"Don't you":["think"],"Double leading":["underscores","underscores"],"Double underscore":["is","may","is","aka"],"Dropped the":["bonus"],"Ducks: Where":["Dynamic","Dynamic","Dynamic","Dynamic"],"Ducks](http://rhodesmill.org/brandon/slides/2013-03-pycon/) by":["Brandon"],"Dynamic Types":["Meet","Meet","Meet","Meet"],"Dynamic typing](http://docs.python-guide.org/en/latest/writing/structure/#dynamic-typing)":["for"],"Dynamically creating":["the"],"EDIT: Ah":["I"],"EDIT: Ironically":["I"],"END with":["a"],"ETL exercise":["saves"],"Each type":["of"],"Edit: [PR":["pending](https://github.com/kytrinyx/exercism.io/pull/485)"],"Either compile":["it"],"Either documenting":["checks"],"Either that,":["or"],"Either they're":["just"],"Either you":["could"],"Else better":["to"],"Else this":["is"],"Else, congratulation":["for","for"],"Else, don't":["you"],"Ended up":["being"],"English language":["however"],"English word":["I"],"English, nor":["the"],"Especially naming":["something"],"Essentially there":["is","is","is"],"Europe and":["now"],"Even better":["would"],"Even changing":["the"],"Even if":["not,","not","the","str"],"Even it":["was"],"Even regex":["version"],"Even then,":["that"],"Even though":["that","I'm","I","it's"],"Every time":["a"],"Everything else":["belongs","operates","is"],"Everything you":["declare"],"Ex: `def":["hey(self,"],"Excellent use":["of"],"Excellent, thanks":[":)"],"Except for":["these"],"Excuse my":["english"],"Exercism.io's entry":["point."],"Explicit `else`":["statement","statement"],"Explore [Python's":["standard","standard","standard","standard"],"Extra points":["for"],"Extracted the":["translation","anagram"],"Extracting logic":["to"],"FAIL: test_anagrams_are_case_insensitive":["(__main__.AnagramTests)"],"FAIL: test_calmly_speaking_with_umlauts":["(__main__.BobTests)"],"FAIL: test_only_numbers":["(__main__.BobTests)","(__main__.BobTests)"],"FAIL: test_question_with_only_numbers":["(__main__.BobTests)"],"FAIL: test_statement_containing_question_mark":["(__main__.BobTests)"],"FAIL: test_stating_something":["(__main__.BobTests)"],"FAIL: test_talking_forcefully":["(__main__.BobTests)"],"FAIL: test_using_acronyms_in_regular_speech":["(__main__.BobTests)"],"FINE =":["'Fine."],"FINE` together":["so"],"FP (and":["a"],"FP in":["general"],"FP try":["very"],"FP-inspired idioms)":["it's"],"FWIW -":["except"],"FWIW both":["OOP"],"FWIW), and":["limiting"],"FWIW, empty":["strings,"],"FWIW, the":["current"],"FWIW, they":["are"],"FYI I've":["filed"],"FYI [Old":["style"],"FYI: `isinstance`":["may"],"Factoring out":["pieces"],"Fair enough,":["when"],"Fair enough.":["But"],"Fair point":["about"],"Fair point.":["Looks"],"Fair warning:":["I'm","I'm"],"False because":["of"],"False depending":["on"],"False when":["`other`"],"False) then":["use"],"False, so":["you"],"False, you":["could"],"False... couldn't":["these"],"False` at":["the"],"False` is":["better"],"Falsy, so":["you"],"Falsy. (Refer":["to"],"Feedback welcome.":["Thanks."],"Feel free":["to","to"],"Fighting against":["the"],"File \"anagram_test.py\",":["line"],"File \"bob_test.py\",":["line","line","line","line","line","line","line","line"],"Filter wins":["in"],"Finally I":["don't"],"Finally while":["`collections.defaultdict`"],"Finally!! .":["I´m"],"Finally, are":["`Word.raw`"],"Finally, consider":["extracting"],"Finally, in":["your"],"Finally, str.isupper()":["already"],"Finally, the":["`verse`","second"],"Finally, you":["could"],"Fine by":["me,"],"Fine with":["me."],"FineManual for":["the"],"FineManuel for":["more"],"Finicky, but":["it"],"First a":["note"],"First and":["foremost,"],"First is":["the"],"First shot":["\"as"],"First thought":["of"],"First time":["through,"],"First, DNA":["is"],"First, I":["would"],"First, read":["the"],"First, why":["do"],"Firstly, I":["did"],"Fix it":["or"],"Fixed in":["the"],"Fixed new":["style"],"Fixed the":["top"],"Fixed up":["the"],"Flagging as":["\"Looks"],"Flat is":["better"],"Follow [PEP8":["Style"],"For `has_lower_case_chars`,":["you"],"For a":["moment,"],"For all":["three"],"For current":["set"],"For example":["making","`str.replace`","literate","questions"],"For example,":["if","in","you","`len(message.strip())","in","shouted","if","you","`maketrans`","you"],"For instance":["if","msg.endswith(\"?\")","if","you"],"For instance,":["we","someone","how","the","the","why"],"For isQuestion,":["one"],"For learning,":["I"],"For me":["that","`re`","it"],"For me,":["it's","making"],"For module":["level"],"For more":["information"],"For reasons":["that"],"For reference":["about"],"For reusability,":["the"],"For some":["reason,","reason,","things"],"For such":["small"],"For testing":["whether"],"For that":["matter,","matter,"],"For the":["record,","rest,","logic","\"badly","typechecking","problem","space","silence"],"For this":["exercise,","one,","code"],"For variables/method":["names/function"],"For what":["purpose"],"For your":["first"],"For-loop with":["break"],"Forgot to":["use","subclass"],"FormattedWord ```":["class","ans","argument.","argument,","is"],"FormattedWord instance":["for"],"Formatting is":["off"],"Forth is":["really"],"Fortunately, there":["are"],"Fred classes":["if"],"From Bob's":["perspective"],"From a":["code"],"From http://www.python.org/dev/peps/pep-0257/#multi-line-docstrings":[":"],"From my":["point","point","point","point","point","point","point"],"From section":["9.4"],"From the":["logical","first"],"Functionally, the":["result"],"Functions in":["closure"],"Fundamentally DNA":["is"],"Funny how":["sometimes"],"Furthermore, are":["you"],"G-&gt;G, C-&gt;C,":["but"],"GB memory,":["the"],"GUI might":["be"],"Gap is":["smaller"],"Gee, thanks":[":)"],"Generally a":["simple"],"Generally it's":["better"],"Generally, I":["try"],"Generally, double":["leading"],"Generally, it's":["better"],"George! I've":["been"],"Get it?":["`word`s."],"GitHub and":["it","it"],"GitHub directly.":["I'll"],"Github) shows":["that"],"Given a":["DNA"],"Given how":["short"],"Given this":["is"],"Given your":["implementation,"],"Giving name":["to"],"Go over":["the"],"Goal is":["to"],"Going further.":["From"],"Going through":["all"],"Good call":["on","about"],"Good call!":["I"],"Good call.":["I"],"Good catch":["on"],"Good idea":["to"],"Good idea.":["Added","i'm"],"Good job":[":)"],"Good job.":[";)"],"Good luck":[":)"],"Good luck,":["we"],"Good point":["RealBigB,","on"],"Good point,":["and"],"Good point.":["You","Thank","I"],"Good point;":["I"],"Good points.":["I"],"Good practical":["points"],"Good practice":[":"],"Good questions.":["I"],"Good suggestions":["all."],"Good thoughts":["all"],"Good to":["go","know.","go.","go","go"],"Good use":["of","of","of","of"],"Good, It's":["better"],"Good. You":["could"],"GoodPractice :":["make"],"GoodPractice: make":["your"],"Google for":["\"new-style"],"Googling and":["a"],"Got the":["same"],"Great naming":["and"],"Great point,":["Malikari."],"Great points,":["I"],"Great suggestions":["there."],"Great, thanks,":["will"],"Great. Going":["further."],"Great. My":["version"],"Greeting (which":["could"],"Greeting? This":["seems"],"Grouping the":["question"],"Guide -":["Dynamic"],"Guide for":["Python","Python","Python","Python","Python","Python","Python","Python"],"Guide http://www.python.org/dev/peps/pep-0008/":[")"],"Guide to":["Python!](http://docs.python-guide.org/en/latest/writing/style/)","Python!](http://python-guide.org)"],"Guide, aka":["PEP8","PEP8."],"Guidelines, aka":["PEP8.","PEP8.","PEP8.","PEP8","PEP8.","PEP8.","PEP8."],"Guido's desires":["for"],"HELL WERE":["YOU"],"HTML where":["you"],"HTTPServerError is":["better"],"Ha, I've":["got"],"Had I":["used"],"Had some":["trouble"],"Had to":["remove","look"],"Hah, I":["suppose"],"Handles negative":["values"],"Happy New":["Year!"],"Hardcoding the":["class"],"Has made":["it"],"Haskell lately,":["so"],"Haskell version":["(where"],"Haskell, I":["have"],"Haskellic, and":["I"],"Have a":["look","look","look","look","look","look","look"],"Have all":["your"],"Have to":["disagree"],"Have you":["looked","considered","considered","considered","actually","thought","come","seen","considered","considered","considered","considered","considered","considered","seen","considered","considered","considered","considered","considered","tried"],"Haven't heard":["it"],"Haven't seen":["it"],"Haven't thought":["of"],"Having `None`":["for"],"Having a":["proper"],"Having nitpicked":["your"],"He answers":["'Whatever.'"],"Heh heh,":["I"],"Hehe. I":["didn't"],"Hej Henrik!":["One"],"Hello again!":["And"],"Helper methods":["have","in","already"],"Helpers are":["good"],"Hence I":["need"],"Hence line":["4"],"Hence why":["I'm"],"Hence, if":["you"],"Henrik! One":["more"],"Here I":["assume"],"Here are":["some","some","some"],"Here comes":["a"],"Here were":["the"],"Here you":["can","have"],"Here's a":["another","another","good"],"Here's an":["example"],"Here's the":["problem"],"Here, a":["string"],"Here, it":["looks"],"Here, the":["'T'"],"Hey! Thanks":["for"],"Hey, I":["think"],"Hey, good":["job."],"Hey, you're":["getting"],"Hi @angeline.":["Simple"],"Hi there!":["I'm"],"Hi! Brave":["first"],"Hi! Thanks":["for"],"Hi, it's":["interesting"],"Hi, just":["a"],"Hi, my":["notes:","notes:"],"Hi, nice":["and","solution.","and"],"Hi-la-ri-ous, I":["tell"],"Hi. Nice":["and"],"Hi. The":["code"],"Hiding the":["database"],"Hint :":["the","read","the","an","type","try"],"Hint, please!":[":P"],"Hint: Python":["has","functions"],"Hint: all":["your"],"Hitchhiker’s Guide":["to","to"],"Hm, I":["wouldn't"],"Hm... good":["point."],"Hmh, I":["did"],"Hmm, I":["guess"],"Hmm, `capitalize`":["is"],"Hmm, aren't":["you"],"Hmm. And":["simply"],"Hmm. For":["testing"],"Hmm. I":["think"],"Hmm. Now":["that"],"Hmmm, replacing":["methods"],"Hope this":["was"],"Hopefully you":["have"],"Horner evaluation":["ftw."],"How about":["making","something","replacing","using","you?","naming","`from"],"How bad":["is"],"How can":["I"],"How could":["that","that","I","you","you","you","you"],"How do":["you","I","I"],"How does":["the"],"How would":["breaking","naming","that","that","you","you","you","you","the","I","you"],"How you":["considered"],"However `if":["self.sequence`"],"However argument":["name"],"However if":["you"],"However in":["the"],"However it's":["generally"],"However that's":["OK"],"However this":["does"],"However you":["don't"],"However! :)":["I'm"],"However, I":["chose","forgot","still","have"],"However, I'm":["not"],"However, `not":["text`"],"However, breaking":["it"],"However, going":["back"],"However, in":["my"],"However, just":["for"],"However, since":["you"],"However, there":["can"],"However, this":["is","is","seems","may"],"However, we":["still"],"However, when":["I've","(hastily)"],"However, you're":["no"],"However,I'm just":["trying"],"However: if":["dna_strand"],"Huh... You're":["right."],"Hum, does":["your"],"Hum, seems":["reasonable."],"I *really*":["like"],"I Implemented":["the"],"I Improved":["the"],"I [understood](http://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references)":["that"],"I _definitely_":["don't"],"I achieved":["this"],"I actually":["tend","like","meant","dislike"],"I add":["one","the"],"I added":["descriptions","docstring","a","a"],"I admire":["the"],"I admit":["that"],"I agree":["that","with","that","with","that","that","to","with","on","with","with","that","that","if","with","that","-","that","all","about","in","that","that","that","with","with","with","with","on","with","with","with","that","this","about","about"],"I agree,":["it","this","I"],"I agree.":["Adding","On"],"I almost":["forgot","inlined"],"I already":["have),","think"],"I also":["disagree","wonder","still","added","objected","used","thought","think","like","treat","wanted","didn't","like","considered","used","like","like","think","disagree","don't","forgot","think","just"],"I always":["found","found","forget","preferred","needed","try","had"],"I am":["missing?","not","probably","starting","doing","not","getting","not","doing","a","still","using","not","wrong","not","not","not","not","not","thinking","from","used","doing","on","on","not","still","just","now","count","not","surprised","tracking","aware","missing","not","uncomfortable","not","now","not","not","referring"],"I appreciate":["all","the","the"],"I approve":["this"],"I ask":["you"],"I ask,":["why"],"I assume":["that's","you're","the","that","that"],"I assumed":["that"],"I believe":["it","that","all","you","the","strongly","that","is","it","that"],"I bet":["you"],"I bet!)":["http://exercism.io/submissions/520e3c31d908bde1ea000276"],"I came":["to","back","here","to"],"I can":["sort","add","make","try","see","definitely","see","bundle","make","come","think","borrow","think","live","help","change","pick","foresee","call","classify","imagine","see","understand","see","generate","imagine","think","see","improve","give","see"],"I can't":["see?","say","use","be","put","believe","think","look","tell","find","think","think","call","think","see","imagine","speak","think"],"I can.":["As"],"I care":["about"],"I changed":["it","`self.sequence`","double","splitting","those.","that.","it."],"I cheat":["a"],"I check":["against"],"I checked":["how"],"I choose":["this"],"I choosed":["to"],"I chose":["functional","at","to","to","translate","to","`str[-1:]`","to","defaultdict","a"],"I coded":["python"],"I come":["from","from","from"],"I complete":["the"],"I consider":["the"],"I considered":["using","moving","your","going","using","this","making","list"],"I contend":["that"],"I continue":["to"],"I continued":["to"],"I convert":["only"],"I converted":["`collections.Counter`","the"],"I correctly":["understood"],"I could":["still","move","come","still","went","keep","just","introduce","just","easily","just","remove","change.","do.","publish","definitely","move","have","just","see","come","go","simply","name","get","have","use","let","get","find.","see","think","remove","craft","probably","do","not","write","have","have","end"],"I could,":["I","I'm"],"I couldn't":["decide","figure","figure","ever","think","quite"],"I create":["one","a"],"I created":["a","a","the","a","a"],"I currently":["only"],"I decided":["it","I","that","to","to","it","to","to","to","to","to","to","to","to"],"I decides":["what"],"I definitely":["disagree","see","prefer"],"I devised":["in"],"I did":["not","consider","that.","not","in","that","this,","something","the","want","think","do","so,","have","Bob","see","my","not","the","some","that","have","have","it,","differently","wrong","not","at"],"I didn't":["even","really","trim","want","here.","realize","I","like","know","know","realize","check","want","want","think","wait","realize","get","like","handle","think","knew","really","want","know","know","know","use","miss","even","get","found","know","know","realize","even","know","normalize","see","know","know","intend","think","follow","include","think","know","know","know"],"I disagree":["with","with","with"],"I disagree.":["I","I"],"I dislike":["the","the"],"I do":["agree","consider","appreciate","agree","see","agree","about","not","well","think","like","not","think","like","try","it","think","prefer","like","not"],"I do,":["so"],"I don't":["force","get","know","like","see","feel","see","think","think","inherit","know","see","see","like","need","see","understand,","think","know,","have","disagree","know","really","have","know,","think","think","think","know","think","see","think","see","know","think","see","see","see","feel","like","think","really","see","like","like","think","see","have","do","intend","see","think","know","please","see","find","like","find","think","agree","have","like","really","really","have","see","like","like","see","know","test","like","like","feel","think","see","like","like","really","know","think","like","think","think","think","know","think","like","think","do","see","love","really","think","find","have","have","really","know.","really","think"],"I don't.":["Any"],"I dont":["know"],"I doubt":["`Counter`"],"I dropped":["that"],"I encountered":["the"],"I encourage":["you","all"],"I ended":["up","up"],"I entangled":["my"],"I even":["like"],"I ever":["wrote"],"I expect":["from"],"I experimented":["for","with"],"I extracted":["check","three"],"I factored":["out"],"I fail":["the","to"],"I feel":["that","like","like","that","that","like","like","that","like","like","`is_upper`","like","like","like","like","like"],"I felt":["it"],"I fetched":["an"],"I figure":["out","type","it"],"I figured":["I'd","I","that","I'd","returning"],"I find":["this","it","they","this","the","it","with","your","fewer","it","`if","separator.join(strings)","it","it","this","this"],"I first":["learned","looked"],"I fixed":["this"],"I focused":["on"],"I followed":["the"],"I for":["one"],"I forgot":["about","to","to","to","to","to","in","to"],"I forgot!":["I"],"I found":["the","out","helpful:","after","it","an","enough","`str.isupper`","that","a","it","while","version","using","it"],"I found.":["So"],"I frequently":["skip"],"I gave":["a","it"],"I generally":["try"],"I get":["for","home.","around","the","this","here,"],"I give":["in,"],"I got":["the","on","pylint","many","it,","[mine](https://gist.github.com/7814969)","from","distracted"],"I grabbed":["the"],"I guess":["you're","I",":)","with","I'll","I","it",";)","`str.isspace()`","we","it","I","re.finditer()","Py","I","it's","you","`translation_table`","you"],"I guess!":["Once"],"I had":["thought","to","before","to","the","similar","a","to","a","some","written","\"too","to","been","the","a","was","to","it","to","to","hoped","to","it","never","a","no","to","to"],"I hadn't":["seen","realized","considered","thought","thought"],"I have":["the","Python2","been","avoided","just","been","to","to","the","to","with","to","re-introduced","stuff","a","isspace","discovered","an","written","in","done","no","made","to","a","to","got","a","another","to","no","setup","a","learned","to","not","seen","some","experience","to","just","never","learned","a","improved","both","separated","several","is","seen","an","an","two","to","to","seen","just","to","some","a","just","a","inlined","to","received","completed","chosen","difficulties","just","with","is"],"I have:":["http://gist.github.com/7814647"],"I haven't":["written","used","benchmarked","done","thought","found.","done","really"],"I honestly":["prefer"],"I hope":["I","`Counter`","I","these","you","this","this","the","the"],"I imagine":["some","anything"],"I improved":["```","```"],"I incorporated":["the","that."],"I indeed":["came","think"],"I initially":["considered"],"I intentionally":["used"],"I introduce":["another"],"I involuntarily":["ask"],"I just":["submitted","have","recalled","found","don't","don't","don't","don't","feel","noticed:","want","noticed","made","realised","thought","want","prefix","define","wasn't","assumed.","realized","had","underestimated","need","assumed","went","went","prefer","wanted","have","looked"],"I justify":["that"],"I kept":["it","it","it"],"I kind":["of","of","of"],"I knew":["I'd","about","that","Bob","a"],"I know":["what","the","long","that","python's","you","@dahlia","it","the","about","about","it's","how","NO","editor","that","that","what","this","this","its"],"I know),":["so"],"I know,":["it","it","it","it","it","it","it","it"],"I know...)":["and"],"I learned":["from","when","when","when","something","something","quite","a"],"I learnt":["quite"],"I left":["it","the","in"],"I like":["the","what","the","to","that","that","the","that","it","the","this","that","this,","the","the","regular","a","this!","the","this.","a","this!","that","it","the","this","the","this!","the","the","self","the","at","that","the","it","the","how","the","the","the","to","the","the","this,","Tone","this","the","this","`not","the","the","it","that","most.","dirtyinput.","it.","to","to","that","that","that","explicit","helper","it","it","that","that","that","that","very","the","the","using","having","that","that","it","use","that","that","this","that","that","the","how","the","the","it.","it.","use","that","explicit","that","explicit","that","use","that","that","that","that","that","the","it.","the","the","the","the","the","better.","about","separating","the","the","@dagmar's","this","elimisteve's","that","it.","how","your","that","that","the","seeing","this","the","that","that","how","how","your","to","how","how","how","how","how","how","this","how","this","the","to","to","to","best.","it","the","the","how","this."],"I like),":["you"],"I like,":["but"],"I liked":["the","the","the"],"I look":["at","back"],"I looked":["at","at","into","at","at"],"I lose":["the"],"I lost":["it."],"I love":["regexps,","Python's"],"I made":["those","the","intent-revealing","all","it","it","the","another","them"],"I make":["sure","changes"],"I may":["be","have","have","expand","well","refactor","be"],"I mean":["doing","your","`Bob.is_empty('Hello')`","is"],"I mean,":["I","who","i"],"I meant":["the","that","is","\"in","`str.lower()`","is","`_nucleotide_sequence`."],"I meant.":["Not","As"],"I mentioned":["in"],"I mentionned":["removing"],"I might":["keep","well","be","have","have","write"],"I misread":["the"],"I miss":["something?","anything,"],"I missed":["that","that.","that","it)"],"I missing":["smth?","any","something?","the"],"I mostly":["agree"],"I moved":["some","message","them"],"I must":["have","have"],"I need":["getter","it,","to","more","to","for","to","more","to"],"I needed":["them,"],"I neglected":["to"],"I never":["claimed","reassign","considered"],"I normally":["use","do"],"I not":["understanding"],"I noticed":["you","that"],"I now":["know","see"],"I often":["write"],"I only":["had","have","know","have"],"I opted":["for"],"I originally":["tried"],"I painted":["myself"],"I pass":["a"],"I personally":["think","think","dislike","would","find"],"I picked":["that","this"],"I placed":["words"],"I plan":["to"],"I played":["with","this","around"],"I prefer":["classes","to","it","simple","the","longer","`__all__`","the","to","them","the","having","this","`filter`","to","not","adding","to"],"I preferred":["staying"],"I prettify":["that?"],"I prevent":["it"],"I probably":["could","didn't","would","wouldn't","should"],"I put":["Nucleotides","it","back","up","the"],"I rarely":["see"],"I rather":["prefer"],"I read":["on","this","`return`","PEP","that"],"I realised":["that","that"],"I realize":["that","that","that"],"I realized":["that","after"],"I really":["like","need","can't","needed","like","like","only","have","dislike","like","don't","like,","like","like","like","want","like","like","appreciate","like","appreciate"],"I really,":["really"],"I recieved,":["and"],"I recommend":["moving","you"],"I removed":["a","the"],"I replace":["the"],"I replaced":["the"],"I return":["plain"],"I said":["in"],"I said,":["your"],"I saw":["no","a","some","that","too","other"],"I saw:":["there's"],"I say":["that"],"I see":["splitting","that","you","you","now,","that","an","your","you","now","a","these","other","it","this","you","is","how","that","it","some","that"],"I see.":["However,","When","Personally,"],"I separated":["hey()"],"I should":["make","care.","avoid","just","strip","probably","put","take","use","use","mark","alias","have","have","not","know","first"],"I should,":["but"],"I shouldn't":["be","have"],"I simplified":["them"],"I simply":["hadn't"],"I solved":["the"],"I somewhat":["dislike"],"I sort":["of"],"I specify":["the"],"I spotted":["some"],"I stared":["coding"],"I started":["thinking","fiddling","with","off","using"],"I stepped":["over"],"I still":["abbreviated","have","think","consider","want","prefer","think"],"I submitted":["a","another","it","earlier","another","a"],"I submitted.":["The"],"I suggest":["this"],"I suggested":["that"],"I suppose":["that's","minimizing","that","my","that","I'm","that","I'm","the"],"I suppose.":["If","^_^"],"I switched":["over"],"I take":["them","it"],"I tell":["them","you!"],"I tend":["to","to","to","to","not","to","to"],"I then":["looked"],"I think":["I","this","we've","you","code","they'll","you're","it's","that","it","they","that","`self._phrase.strip()","I","I","you","I","you","that","you","this","extracting","this","the","I","it's","it's","that","more","I'm","you","you","I","it's","it's","it","having","we","that","that","is","this","that","this","it","I","they","it","it","it's","you","same","it's","assigning","I","I","I'll","that","I've","you","he","the","that","language","of","that","there's","you","this","It","it","you've","it","it's","you","It's","that","it","Brian's","your","you","it","it's","your","there's","it","it","this","it","this","writing","pep8","you'll","you","you","that","this","I'll","expanding","`silence`","if","normalization","there","I","of","`str[-1:]`","I'm","creating","that's","you","it","it","that","the","your","it's","the","this","question","they","this","it","you","that","it","I","documenting","a","we","the","it","I","it","it","that","the","this","I","most","it","is","so..","could","you","you","it's","that","I","the","that","the","I","the","you","you","this","the","this","you're","there's","you","is","the","it's","you","sivhollup","it","your","it","this","the","this","there","that's","you","also,","that","this","using","this","it's","I","if","this","this","the","the","more","this","using","this","is","this","comparing","that"],"I think,":["using"],"I think.":["`self.string`","I","(I"],"I though":["for","\"Hey,","I"],"I thought":["that","I","about","`re.findall`","about","about","about","I'd","about","it","the","it","the","that","it","it","maybe","I","my","it","it","that","it"],"I thought.":["It","I"],"I throw":["at"],"I took":["this","a","RealBigB's","to","out","@rocky's","another","it,"],"I totally":["understand:","disagree","agree","see"],"I traded":["memory","condensity"],"I tried":["various","it","resubmitting","to","to","putting","it","searching","to","to","to","doing","to","for","to","to","to","to","to"],"I try":["to","to","to","to","to","to"],"I understand":["the","functional","but","your","what","old","now","your","your","it","what","your","everything"],"I understand,":["it's"],"I understood":["you"],"I understood.":["wonder"],"I updated":["the","my","my"],"I upgraded":["to"],"I use":["[pyenv](http://github.com/yyuu/pyenv)","`string.translate()`","`string.translate()`?","```re.split```","`collections.Counter`","`is_silence`","it","C","it"],"I use?":["Checking"],"I used":["replace","more","split.","regexes.","if...elseif","list","python3,","straightforward","all","variable","`self.__class__`","set","them.","```map```","to","text.strip()","`message.strip()`","re.findall","a","elif,","regular"],"I usually":["would","make","only","use","don't"],"I very":["rarely","rarely"],"I visited":["the"],"I want":["to","each","here,","to","to","to","to","it","to","the","making","to"],"I wanted":["to","your","to","to","to","to","to","to","to","it","to","to","to","to"],"I was":["coding","getting","talking","talking","thinking","submitting","looking","doing","string","still","suggesting","(vaguely,","thinking:","thinking","testing","telling","working","looking","going","a","just","thinking","not","struggling","at","the","thinking","labouring","*really*","told","thinking","not","focussing","surprised","worried","hoping.","looking","looking","surprised","able","thinking","unsure","surprised","also","testing","thinking","thinking","using","trying","just","trying","passing:","able","stumped","using","writing","constrained","bothered"],"I wasn't":["aware","sure","sure","sure","sure","sure","aware","sure","really"],"I went":["with","straight","ahead","out","back","ahead","to","along."],"I were":["to","to","using","to","to"],"I will":["update","add","leave","look","look","take","look","check","say,","work","change","be","have"],"I wish":["I'd","the","I'd","I","the"],"I won't":["hold","insist"],"I wonder":["if","if","if","if","if","if","why","if","if","if"],"I wont":["comment"],"I work":["a"],"I would":["use","look","probably","have","just","have","need","like","personally","have","choose","like","give","wrap","put","also","have","treat","have","like","do","rather","prefer","like","use","put:","appreciate","rather","change","prefer","consider","be","prefer","recommend","appreciate","like","avoid","have","like","do","rather","BOTH","personnaly","never","mark","avoid","have","try","see","create","agree","place","use","use","use","not","consider","delete","also","extract","recommend","extract","add","probably","suggest","change","take","call","like","place","use","choose","at","choose","use","appreciate","get","have","have","do","rather","save","do","publish","rather","suggest","try","suggest","say","personally","never","still","take","totally","suggest","have","suggest","have","argue","consider","like","extract","have","prefer","love","add:","just","write","prefer","uppercase","use","use"],"I would,":["but"],"I wouldn't":["worry","claim","be","have","drop","call","be","have","be","have","use","convert","use","include","have"],"I write":["```"],"I wrote":["you","this","the","over","the","this.","it,"],"I'am not":["sure"],"I'd actually":["like"],"I'd agree":["with","with"],"I'd also":["uppercase","suggest"],"I'd argue":["that"],"I'd be":["happy","all","surprised","tempted"],"I'd borrow":["something"],"I'd call":["it","word_count()"],"I'd consider":["improving"],"I'd do":["that"],"I'd done":["`text.strip()`"],"I'd drop":["the"],"I'd forgotten":["about"],"I'd get":["rid","rid"],"I'd go":["for"],"I'd have":["done","to","to"],"I'd just":["mention"],"I'd keep":["the"],"I'd leave":["it"],"I'd like":["to","to","to","to","to","it"],"I'd lova":["to"],"I'd love":["to","to"],"I'd move":["those"],"I'd never":["receive","heard"],"I'd not":["considered."],"I'd only":["have"],"I'd personally":["create"],"I'd prefer":["use","being","not"],"I'd probably":["initialize","use","put","follow","not"],"I'd put":["the"],"I'd rather":["call","keep","make"],"I'd recommend":["fixing"],"I'd replace":["the"],"I'd say":["that"],"I'd seen":["it"],"I'd start":["with"],"I'd stick":["with"],"I'd suggest":["going","marking","using","taking","using","just"],"I'd tend":["to"],"I'd think,":["but"],"I'd thought":["of!)","of"],"I'd try":["to","the","it"],"I'd use":["a"],"I'd want":["to","Bob","to"],"I'll admit":["I"],"I'll change":["it","my"],"I'll disagree":["with"],"I'll fix":["the","that"],"I'll give":["you"],"I'll go":["have"],"I'll look":["into"],"I'll make":["the","the"],"I'll mull":["it"],"I'll note":["that"],"I'll probably":["keep"],"I'll remove":["it."],"I'll research.":["Thanks!"],"I'll revisit":["it"],"I'll rewrite":["my"],"I'll settle":["for"],"I'll start":["calling"],"I'll stick":["to"],"I'll submit":["something","another"],"I'll think":["about"],"I'll try":["and","out","to","that","one","to","a"],"I'll upload":["a"],"I'm REALLY":["nitpicking,"],"I'm a":["rubyist","rubyist","bit","Ruby","big","total","total"],"I'm adding":["another"],"I'm admittedly":["not"],"I'm afraid":["your"],"I'm afraid.":["As","I"],"I'm also":["bothered"],"I'm an":["admin,"],"I'm attempting":["to"],"I'm aware,":["I'm"],"I'm back":["to"],"I'm being":["overly"],"I'm breaking":["some"],"I'm calling":["this"],"I'm catching":["type"],"I'm checking":["out","for."],"I'm completely":["unaware"],"I'm concerned":["it's","are","is","I","I"],"I'm concerned,":[",","and","I"],"I'm curious":["to","about"],"I'm disagree":["with"],"I'm divided":["here"],"I'm doing":["when","something","extra"],"I'm doing?":["If"],"I'm essentially":["casting"],"I'm fairly":["new"],"I'm forced":["to),"],"I'm getting":["the"],"I'm glad":["you"],"I'm going":["to","to","to","to","for","to","to","to"],"I'm guessing":["that","you"],"I'm here":["learning"],"I'm however":["not"],"I'm in":["no","doubt"],"I'm interested":["in"],"I'm just":["not","going","not","now","being","overcomplicating","now","curious","missing"],"I'm kinda":["new"],"I'm lazy":["I"],"I'm mainly":["a"],"I'm merely":["standing"],"I'm missing":["a"],"I'm more":["used"],"I'm no":["authority","Python"],"I'm not":["that","100%","sure.","too","declaring","too","sure","too","convinced","sure","doing","sure","fan","100%","sure","sure","sure","sure","sure","sure","completely","sure","really","overly","sure","sure","sure","really","sure","a","even","sure","sure","sure","sure","sure","a","the","shadowing","sure","too","totally","totally","sure","sure","a","that","convinced","suggesting","sure","convinced","sure","very","a","really","sure","really","sure","sure","a","quite","sure","native","sure,","sure","quite","a","sure","sure","sure,","used","sure","so","sure","sure"],"I'm off":["to"],"I'm ok":["with"],"I'm only":["wondering","cleaning"],"I'm open":["to","to"],"I'm outside":["of"],"I'm particularly":["interested"],"I'm personally":["bothered"],"I'm pretty":["sure","sure","happy"],"I'm probably":["getting"],"I'm quite":["happy","comfortable"],"I'm reading":["too"],"I'm really":["enjoying","curious","looking","happy","not"],"I'm right":["in"],"I'm somewhat":["less"],"I'm sorry,":["I"],"I'm still":["deciding","wondering","not","not","not","trying","not"],"I'm submitting":["anyway","version"],"I'm sure":["this","break","there's"],"I'm taking":["the"],"I'm talking":["about"],"I'm thinking":["I","about","something"],"I'm told":["that"],"I'm unfamiliar":["with"],"I'm using":["the","Python","that","these","2.7.5","`__query`"],"I'm usually":["not"],"I'm very":["excited"],"I'm voting":["for","for"],"I'm waiting":["for"],"I'm weird.":["Fortunately,"],"I'm with":["you"],"I'm wondering":["about","about","why"],"I'm wondering,":["though,"],"I'm worried":["I'm"],"I'm writing":["this"],"I've added":["a","a","this","a"],"I've addressed":["a"],"I've also":["replaced","added","introduced"],"I've been":["lazy.","meaning","commenting","thinking","working","writing"],"I've changed":["it","to"],"I've cleaned":["most","up"],"I've completely":["isolated"],"I've done":["some","a"],"I've dropped":["`_ucfirst`"],"I've ended":["up"],"I've extracted":["them"],"I've filed":["an"],"I've gone":["ahead"],"I've got":["no","what","three"],"I've gotten":["with"],"I've heard":["of","two"],"I've just":["concluded","got","got","been"],"I've learned":["from","recently"],"I've made":["both","the","the"],"I've modified":["the"],"I've moved":["the","it"],"I've never":["had","seen","_actually_"],"I've no":["idea"],"I've often":["heard"],"I've realized":["that","that"],"I've replaced":["it","the","it"],"I've reverted":["to"],"I've reviewed":["a"],"I've seen":["this","in","a","scenarios","`s.strip()","this","`return"],"I've submitted":["this"],"I've switched":["to","back"],"I've taken":["functions"],"I've thought":["that"],"I've tried":["to"],"I've used":["a","a","Python"],"I've written":["Python,","anything"],"I've written.":["Be"],"I've wrote":["such"],"I, personally,":["don't"],"I... wasn't":["really"],"IF those":["cases"],"IF to":["handle"],"IMHO -,":["the"],"IMHO a":["good"],"IMHO if-elif-elif-else":["approach"],"IMHO in":["line"],"IMHO is":["an"],"IMHO the":["cleanest","more"],"IMHO this":["is"],"IMHO), at":["least"],"IMHO. And":["well,"],"IMHO. But":["even","I"],"IMHO. Now":["to"],"IMO a":["little"],"IMO an":["underutilized"],"IMO even":["clearer,"],"IMO functions":["should"],"IMO it'd":["be"],"IMO, than":["providing"],"IMO. What":["you're"],"IO difficult.":["I"],"IOW: it":["should"],"IRL might":["go"],"IS an":["endswith."],"IT student,":["I"],"Ideally, when":["someone"],"If I":["were","were","can","did","had","do","were","could,","were","knew","found","get","do"],"If `_replies`":["becomes"],"If ``number``":["were"],"If a":["client","class"],"If an":["integer"],"If any":["nitpicker"],"If anything":["I'd"],"If each":["character"],"If exercism.io":["supported"],"If i":["got"],"If in":["doubt,"],"If it":["was","there","was","does,"],"If not,":["this"],"If number":["were"],"If object":["had"],"If one's":["easier"],"If silent":["it"],"If so":["I'll","I'll","I"],"If so,":["feel","how","is"],"If something":["is","has"],"If statement":["length"],"If text":["was"],"If the":["problem","methods","message","class","latter,","function","replace","input"],"If there":["were","are","were"],"If they":["were"],"If they're":["not,"],"If this":["was","were","was"],"If using":["python"],"If we":["were"],"If yes,":["why"],"If you":["think","think","want","don't","are","do","are","change","define","want","ever","just","ever","have","have","are","return","put","want","disagree","are","want","really","don't","use","are","use","really","\"precompute\"","don't","choose","go","don't","just","already","mean","do","want","want","want","add","like","test","simply"],"If you're":["going","on","implementing","checking","going","using","using","new","removing","trying","going"],"Ignore this":["-"],"Imagine if":["you","you","you"],"Imho a":["dict"],"Imho the":["former"],"Implemented the":["spec"],"Import at":["the"],"Import your":["`Phrase`"],"Imports should":["generally"],"Impressive! :)":["Haven't"],"Improved the":["implementation"],"In 'Bob.hey`":["context"],"In 2.x":["versions,"],"In Python":["we","it","the","3","there"],"In Python,":["people"],"In Ruby,":["I"],"In [48]:":["timeit.timeit('[\"\".join(sorted(\"sadfasdfagrregwfagfregawgfresafafewrf\"))"],"In [49]:":["timeit.timeit('from"],"In [8]:":["timeit.timeit('from","timeit.timeit('from"],"In [9]:":["timeit.timeit('[\"\".join(sorted(\"sadfasdfagrregwfagfregawgfresafafewrf\"*10000))","timeit.timeit('[\"\".join(sorted(\"sadfasdfagrregwfagfregawgfresafafewrf\"*10000))"],"In [PEP":["257"],"In `Phrase.__init__`":["you"],"In ``DNA.__containts__(nucleotides)``,":["the"],"In `hey`,":["you"],"In `isAllCaps`,":["`return"],"In `line":["1`"],"In `match`,":["would","you"],"In a":["large","bigger","way,"],"In addition,":["how","why","try","you","you","it"],"In all":["other","three"],"In any":["case","case"],"In both":["cases,","lines"],"In combination":["with"],"In context":["of"],"In contrast,":["to"],"In current":["context"],"In earlier":["incarnations,"],"In every":["test"],"In fact":["`None`","that's","it"],"In fact,":["even","in","you"],"In first":["case,"],"In function":["is_question(),","is_exclamation(),"],"In future,":["consider"],"In general":["the"],"In general,":["I","checking","methods"],"In larger":["projects"],"In line":["6"],"In majority":["of"],"In my":["eyes","opinion","opinion","opinion","opinion,","experience","code,"],"In other":["words,","context"],"In python":["string","there"],"In read-me":["file","we"],"In reality,":["these"],"In retrospect":["I"],"In retrospect,":["I"],"In ruby":["we"],"In some":["inheritance","cases"],"In statically":["typed"],"In such":["simple","case"],"In terms":["of"],"In that":["particular","case,","case,","case","case","case,","case","way","case,"],"In the":["Ruby","future","other","case","end","previous","United","case"],"In theory,":["Counter"],"In this":["case,","particular","context","case,","case","case","case","case,","case,","case","case,","case","exercise","case","case","case","code"],"In what":["way?"],"In working":["through"],"In your":["opinion,","`IsSomething`"],"In-lining method":["calls"],"Included.\" I":["would"],"Incorporated BrianHicks'":["suggestions"],"Indeed I":["could"],"Indeed, didn't":["tested"],"Indeed, thanks":["for","for"],"Indeed, this":["approach"],"IndexError on":["empty","empty"],"Inheritance would":["be"],"Initial Q&D":["minimal"],"Initially I":["wrote","tried"],"Initially, I":["thought"],"Injecting a":["property"],"Inline comments":["are"],"Inlining them":["in"],"Instead of":["a","`None","`text[-1]","writing:","the","using","using","attempting","checking","`reversed([...","a","creating"],"Instead, I":["created","could"],"Instead, during":["the"],"Instead, you":["use"],"Interesting approach.":["For"],"Interesting solution.":["Going","It"],"Interesting suggestions":["though,"],"Interesting take":["using"],"Interesting trade-off":["is"],"Interesting, but":["seems"],"Interesting. I":["didn't"],"Interestingly, you":["are"],"Interpreting the":["phrase"],"Ironically I":["realized"],"Is DNA.nucleotides":["really"],"Is `import":["string`"],"Is `speaker`":["an"],"Is it":["possible","considered","better","readable?","necessary","more","preferable","me"],"Is just":["a"],"Is line":["5"],"Is raising":["an"],"Is that":["right?","a","what"],"Is the":["`for`","phrase","`try`/`except`"],"Is there":["another","a","anybody","a","a","a","a","a","a","a","a","a","a","a","a","a","an","a","a","a","any","a","a","a","a","a","a","a","a"],"Is this":["a","to"],"Isn't `str.translate()`":["a"],"Isn't it":["string?"],"Isn't your":["`is_quiet`"],"It acts":["like"],"It adds":["the"],"It allows":["you"],"It already":["does"],"It also":["felt"],"It avoids":["the"],"It boils":["down"],"It can":["be"],"It could":["also","be","happen."],"It depends":["actually."],"It didn't":["occur"],"It does":["not","seem"],"It doesn't":["equal","change","break"],"It even":["includes"],"It fails":["`test_only_numbers`"],"It has":["good"],"It is":["something","shorter","better","the","the","not","interesting","more","seems","good","such","neat","recommended","conflating","better.","weary","superfluous.","checking"],"It isn't":["as"],"It kinda":["looks"],"It look":["simple"],"It looks":["like","like","like","good","like","like","like","like","like","like","like"],"It makes":["sense","them","little","the","good"],"It matches":["my"],"It may":["look","have","be","be","be"],"It means":["more"],"It might":["make","be","be","make","make","make","be","not"],"It of":["course"],"It only":["points"],"It prescribes":["the"],"It reads":["well,","much"],"It really":["depends"],"It reminds":["me"],"It removes":["an"],"It seemed":["like"],"It seems":["like","to","perfectly"],"It should":["be","be","cut"],"It shows":["that","that"],"It starts":["to"],"It still":["could"],"It surprises":["me"],"It turned":["out"],"It turns":["out"],"It was":["hard","unclear","easy","unclear"],"It wasn't":["very"],"It will":["answer","happen","be","be","be","work","stop"],"It works":["on"],"It works,":["but"],"It would":["make","be","be","be","be","be","be","be","be","be","be","simplify","be","help","also","not","be","mean","be"],"It wouldn't":["change"],"It'll take":["a"],"It's \"standard\"":["for"],"It's a":["very","built-in","habit","bit"],"It's actually":["up","`.isupper()`"],"It's all":["about"],"It's already":["an"],"It's also":["a"],"It's always":["cool","\"felt\""],"It's an":["extra"],"It's another":["way"],"It's bad":["that"],"It's been":["a","a"],"It's best":["to"],"It's better":["for","to","to","using","then"],"It's clearly":["extensible,"],"It's concise":["and"],"It's distinct":["from"],"It's easier":["to"],"It's easy":["and"],"It's especially":["useful"],"It's generally":["preferred"],"It's good":["for","that","that"],"It's grate":["that","that"],"It's great":["for","that","that","that","that"],"It's hard":["to"],"It's implicitly":["handling"],"It's indeed":["better..."],"It's interesting":["that"],"It's just":["not","a","as","a"],"It's just,":["well,"],"It's maybe":["not"],"It's more":["concise","evident","pythonic"],"It's my":["first"],"It's never":["used"],"It's nice":["that","that"],"It's not":["only","necessary","really","a","only,","really","too","quite","cheating"],"It's only":["habit."],"It's optional":["because","because"],"It's possible":["that"],"It's pretty":["good."],"It's pythonic":["to"],"It's quite":["common"],"It's recommended":["to"],"It's still":["grouped"],"It's the":["most","special"],"It's true,":["and"],"It's ugly":["as"],"It's unnecessary":["to"],"It's up":["to"],"It's very":["compact,"],"It's worth":["considering"],"Iteration 1":["by"],"It’s a":["bit"],"Ive been":["stipid."],"I´m little":["tired"],"I– and":["potentially"],"JS and":["prefix"],"Java :)":["The"],"Java days,":["which"],"Java, LISP":["or"],"Java, you":["don't"],"Java. There's":["_no_"],"JavaScript properties":["here,"],"Javascript and":["Ruby"],"Javascript version,":["and"],"Just FYI":["[Old","https://gist.github.com/hostmaster/6387329"],"Just a":["few","couple","quick","question,","thought","few","few","quick","few","few"],"Just an":["idea"],"Just as":["an","a"],"Just browse":["through"],"Just did":["it"],"Just didn't":["know"],"Just enough":["code."],"Just for":["the","the"],"Just generating":["all"],"Just goes":["to"],"Just imagine":["the"],"Just keep":["in"],"Just one":["style","small","more"],"Just overkill":["for"],"Just return":["the"],"Just so":["long"],"Just some":["small","small"],"Just something":["to"],"Just to":["give","see"],"Just try":["it"],"Just trying":["different"],"Just two":["remarks:"],"Just use":["`not","`self.string.isupper()`."],"Just wanted":["to"],"Just wondered":["if"],"Keep in":["mind","mind"],"Keep up":["the"],"Kent Beck's":["classic"],"KeyError:...` (or":["check"],"Knowing the":["method"],"Kudos for":["class","using"],"Kwpolska for":["pointing"],"Kwpolska. Wasn't":["aware"],"L is":["a"],"L11 add":["a"],"L12,L14,L16 Don't":["put"],"L14 You":["want"],"L14: You":["could"],"L19: You":["could"],"L21 I":["think"],"L25 You":["can"],"L3, L5":["and"],"L3: Do":["you"],"L3: `not":["message`"],"L5 and":["L7:"],"L5: Python":["style"],"L5: `message.isupper()`":["method"],"L6 That":["import"],"L7: `message.endswith(\"?\")`":["would"],"L7: parentheses":["in"],"L9 That":["pass"],"LINQ 'first'":["operator,"],"LINQs \"first\"":["operator,"],"LISP and":["Ruby"],"LISP or":["Ruby,"],"LOC is":["not"],"LOT of":["Googling"],"LSP for":["no"],"Lambdas are":["cool"],"Landed here":["after"],"Language class":["is"],"Language doesn't":["really"],"Last tip:":["if"],"Last, I":["would"],"Last, would":["be"],"Lastly, don't":["forget"],"Lastly, try":["to"],"Learned about":["`staticmethod`"],"Leaving it":["public"],"Leaving them":["in"],"Let me":["submit"],"Let the":["class"],"Let's assume":["someone"],"Let's say":["Bob","for"],"Letter count":["could"],"Like @geovany":["mentioned,"],"Like A":["Native](http://nedbatchelder.com/text/iter.html).","Native](http://nedbatchelder.com/text/iter.html)","Native](http://bit.ly/1cMNib6)","Native](http://nedbatchelder.com/text/iter.html)"],"Like if":["they"],"Like the":["class"],"Like we":["arent"],"Liked the":["use"],"Limit all":["lines"],"Line 10":["you"],"Line 10.":["Too"],"Line 11:":["If"],"Line 12:":["There","You"],"Line 13":["would","and"],"Line 17":["shouldn't"],"Line 1:":["New"],"Line 2.":["There"],"Line 21":[":"],"Line 31":["you"],"Line 4":["could","should"],"Line 5:":["parentheses"],"Line 7:":["slicing"],"Line 8:":["In"],"Line 9,":["why"],"Lines 3":["and"],"List comprehension":["is","is","starts"],"List comprehensions":["are","(and","are"],"Look at":["methods","`Counter`","what","`Counter`","how","the"],"Look for":["some","a"],"Look into":["`isupper`"],"Looking at":["the"],"Looking back":["at"],"Looking forward":["to"],"Looking nice.":["One"],"Looking nicer.":["You"],"Looks almost":["like"],"Looks better!":["You"],"Looks exactly":["like"],"Looks fine,":["but"],"Looks fine.":["It"],"Looks good":["organization-wise!","to","to","organization-wise!","to","to","to","to","to","enough","and","although","to","to","to","otherwise"],"Looks good!":["Only","Have"],"Looks good,":["but","although"],"Looks good.":["One","Two","In","Depending","I","Minor"],"Looks great":["otherwise.","otherwise.","so"],"Looks great.":["I","Using"],"Looks like":["there","you","it's","we've","a","my"],"Looks more":["like"],"Looks much":["cleaner"],"Looks overcomplicated":["for"],"Looks pretty":["neat!"],"Looks quite":["good"],"Looks so":["much"],"Looks very":["nice"],"Loop Like":["A"],"Lower Case":["Characters.\""],"Lowercase, underscore":["delimited"],"MB memory.":["I'm"],"MB of":["book"],"Made `.number`":["a"],"Made `is_anagram_of()`":["raise"],"Made the":["tests"],"Main point":["to"],"Make sure":["you"],"Make the":["conditions"],"Makes sense":["to","but"],"Makes sense--could":["always"],"Makes the":["control"],"Making this":["change"],"Man, I've":["been"],"Many thanks":["again."],"Map\" was":["bugging"],"Markdown fail.":["What's"],"May I":["ask,"],"May be":["in"],"May have":["gone"],"Maybe ''.join()":["is"],"Maybe (quite":["likely?"],"Maybe I":["should","would","am","should","just"],"Maybe I'm":["weird."],"Maybe `response_to`?":["**Reaction**"],"Maybe a":["passed","few"],"Maybe docstring":["for"],"Maybe input":["sanitization"],"Maybe instead":["of"],"Maybe it":["would","would","is"],"Maybe mapping":["them"],"Maybe more":["accurate"],"Maybe putting":["the"],"Maybe someone":["else"],"Maybe something":["like"],"Maybe that":["logic"],"Maybe the":["`RNA_LOOKUP`","Nucleotides","methods","name","comment"],"Maybe there":["are"],"Maybe there's":["an"],"Maybe these":["functions"],"Maybe they":["could"],"Maybe try":["pylint"],"Maybe use":["a","elif","some"],"Maybe you":["should"],"Meet Smart":["Conventions](http://bit.ly/1eJPGCG)","Conventions](http://rhodesmill.org/brandon/slides/2013-03-pycon/)","Conventions](http://rhodesmill.org/brandon/slides/2013-03-pycon/).","Conventions](http://rhodesmill.org/brandon/slides/2013-03-pycon/)."],"Meh this":["task"],"Message ```":["implementation","class,"],"Message ```,":["where"],"Message class":["idea.","doesn't","that"],"Message class.":["It"],"Message or":["Sentence"],"Meta class":["capabilities"],"Method names":["like","beginning","now"],"MethodDispatcher ```":["is","doesn't"],"MethodDispatcher ```.":["I'm"],"MethodDispatcher(self._responses(message), self._neutral_response).dispatch()":["```,"],"MethodDispatcher(self._responses(message), self._neutral_response).dispatch()`":["one-liner"],"MethodDispatcher, you":["seem"],"Methods `Bob.hey`":["argument"],"Methods on":["Bob"],"Might be":["a","too"],"Might have":["stolen"],"Might still":["be"],"Minimal working":["implementation"],"Minor error":["in"],"Minor nitpicks":[":"],"Minor point:":["it's"],"Mis-submission. Please":["ignore."],"Mixing good":["parts"],"Mmm... Is":["there"],"Modifying those":["attributes"],"More about":["it","that","that"],"More importantly":["that"],"More info":["[here](http://stackoverflow.com/questions/14247373/python-none-comparison-should-i-use-is-or)."],"More on":["it","code","code","this","this","this","this","this","caveats","this","this","this","this","that","this","formatting/naming","this","that","this","this","that","style"],"Moreover the":["style"],"Moreover, converting":["`self.number`"],"Most Python":["programmers"],"Most editors":["should"],"Most linting":["programs"],"Most names":["should"],"Most of":["these"],"Most probably,":["the"],"Moved sequence":["initialization"],"Moving checks":["to"],"Moving the":["`return","answers"],"Much advice":["desired."],"Much better":["than","now."],"Much better!":["And"],"Much cleaner":["with"],"Much more":["idiomatic"],"Much simpler":["without"],"My 'check'":["function"],"My Goal":["is"],"My Python-fu":["is"],"My ``DNA``":["class"],"My argument":["for"],"My attempt":["to"],"My bad":["on"],"My code":["demonstrates"],"My comments":["would"],"My first":["Python","nitpicks!","implementation","try","try","attempt","attempt"],"My goal":["was"],"My goals":["were"],"My huge":["stipulations"],"My idea":["was"],"My implementation":["of"],"My initial":["thoughts"],"My issue":["with"],"My last":["nit"],"My objects":["don't"],"My only":["style","remark","real"],"My problem":["is"],"My real":["goal"],"My sense":["is"],"My solution":["here","has"],"My take":["on"],"My thought":["is"],"My understanding":["is"],"My version":["is","is"],"NO Python,":["so"],"NOT exposed":["as"],"NOT using":["nested"],"Nah, I":["don't"],"Name `input`":["seems"],"Name could":["be"],"Named `nbottles()`":["after"],"Names beginning":["with"],"Naming Styles](http://www.python.org/dev/peps/pep-0008/#descriptive-naming-styles).":["Double"],"Naming around":["hashes"],"Naming of":["Ducks:","Ducks:","Ducks:","Ducks:","Ducks](http://rhodesmill.org/brandon/slides/2013-03-pycon/)"],"Native](http://bit.ly/1cMNib6) for":["cool,"],"Native](http://nedbatchelder.com/text/iter.html) as":["inspiration."],"Native](http://nedbatchelder.com/text/iter.html) by":["Ned"],"Nearly a":["copy-paste"],"Neat approach!":["Nothing"],"Neat tricks":["with"],"Neat! The":["`collections`"],"Neat, I":["didn't","didn't"],"Ned Batchelder":["presentation","post","for"],"Needing to":["call"],"Nested ifs":["suggest"],"Nevermind, good":["job."],"New style":["classes","class"],"New to":["Python"],"New-style classes":["all"],"Nice 'n":["simple."],"Nice abstraction":["here"],"Nice an":["clean"],"Nice and":["clean.","clean.","simple","short","short","well","short"],"Nice approach":["all","with"],"Nice approach.":["one","one","one"],"Nice imperative":["approach."],"Nice job":["investigating."],"Nice solution.":["I"],"Nice touch":["with"],"Nice usage":["of"],"Nice use":["of","of","of","of"],"Nice way":["of"],"Nice work,":["a"],"Nice! A":["few","few"],"Nice! Clean":["implementation."],"Nice! I'm":["not"],"Nice! way":["more"],"Nice, I":["like"],"Nice, concise.":["+1"],"Nice, it's":["more"],"Nice, short,":["readable"],"Nice. A":["couple"],"Nice. I":["like","learned"],"Nice. We":["solved"],"Nit #1.":["Moving"],"Nit: strings":["have"],"No \"obscure":["magic\""],"No admin":["wants"],"No comments":["but"],"No ifs,":["loops,"],"No more":["naughty"],"No need":["to","to"],"No no..":["See"],"No one":["ever"],"No point":["of"],"No quite":["sure"],"No reason,":["i"],"No reordering":["will"],"No special":["consideration"],"No worries":[":)"],"No worries.":["I'm"],"No, artefact":["of"],"No, it's":["better"],"No, they":["are"],"No, you":["do.\","],"No. It's":["a"],"Nobody form":["outside"],"None ?":["In"],"None [it's":["better](http://jaredgrubb.blogspot.co.il/2009/04/python-is-none-vs-none.html)"],"None ```.":["Also,"],"None and":["expects","empty","you","then","checking"],"None at":["all.","all,"],"None before":["you"],"None checks":["return"],"None else":["msg.strip()"],"None if":["the"],"None in":["`is_question`","all"],"None is":["\"obj"],"None later":["needs"],"None of":["them"],"None or":["not","message","converse","if","not","not"],"None value":["of"],"None values,":["which"],"None\" and":["re"],"None\" instead":["of"],"None) #":["True"],"None, I":["can't"],"None, then":["there"],"None, we":["simply"],"None. Python":["zen"],"None. You":["could"],"None? It":["looks","wasn't"],"NoneType objects":["do"],"None` (Zen":["of"],"None` (ie.":["replace"],"None` and":["then"],"None` check":["in"],"None` from":["the"],"None` in":["your"],"None` instead":["of","of"],"None` instead.":["More"],"None` is":["necessary","usually","often","checked","redundant,"],"None` or":["`not"],"None` which":["would"],"None`, I":["think"],"None`, but":["not"],"None`, since":["an"],"None`, you":["should"],"None`. Python":["is"],"None`. There":["are"],"None`. Use":["`var"],"None`. You":["could"],"None`? Also":["you"],"None``` evaluates":["to"],"None``` would":["be"],"Noob question:":["Is"],"Nope, not":["stuck"],"Nope, this":["works"],"Normally I":["would","wouldn't","would"],"Normally I'd":["probably"],"Normally if":["the"],"Not a":["major","python"],"Not everything":["has"],"Not fond":["of"],"Not in":["low-level"],"Not least":["because"],"Not many":["of","improvements"],"Not only":["ok"],"Not quite":["sure","sure"],"Not so":["clear"],"Not sure":["what","how","about","about","I","if","how"],"Not technically":["important"],"Not to":["be"],"Not too":["happy","happy"],"Not very":["efficient","high-performance"],"Note sure":["if"],"Note that":["we","it","this"],"Note the":["third"],"Note: there's":["a"],"Nothing for":["me"],"Notice how":["I"],"Now I":["need"],"Now I've":["ended"],"Now additional":["queries"],"Now could":["you"],"Now for":["the","the","a","the","the","something"],"Now given":["that"],"Now how":["would","would","could"],"Now it":["works"],"Now it's":["not"],"Now respects":["the"],"Now that":["you","I"],"Now that's":["the"],"Now the":["code"],"Now there's":["no"],"Now this":["looks"],"Now to":["be"],"Now try":["getting"],"Now you":["do","create","can"],"Now, good":["point"],"Now, it's":["ugly."],"Nowhere are":["messages"],"NucleotideString class":["to"],"Nucleotides at":["the"],"Nucleotides should":["also"],"O in":["SOLID)"],"O(n lg":["n)."],"O(n) instead":["of"],"O(n). Using":["a"],"OCD :)":["This"],"OK if":["you"],"OK in":["Python.","Python"],"OK to":["me"],"OK'd by":["a"],"OK, I":["have"],"OK, thanks":["you","for"],"OK. Also,":["why"],"OK. I":["did"],"ONLY new-style":["exists"],"OO approach.":["However,"],"OO by":["sitting"],"OO language":["so"],"OO paradigm":["and"],"OO type-based":["polymorphic"],"OO with":["all"],"OOP and":["FP"],"OOP boilerplate.":["Of"],"OOP here,":["but"],"OOP style.":["It"],"OTOH, I":["feel"],"OUT!\", \"Are":["you"],"Object](http://c2.com/cgi/wiki?ValueObject) with":["query","query"],"Occam's Razor":["and"],"Of cause":["a"],"Of course":["if","it","that's","we","the","in"],"Of course,":["you"],"Of, I":["didn't"],"Oh also":["I"],"Oh and":["yes,","yes:","yes:","yes:","yes,","yes","yes:"],"Oh my":["gosh."],"Oh wow!":["That"],"Oh yes,":["all"],"Oh! Impressive!":[":)"],"Oh, Counter,":["nice"],"Oh, I":["almost","see.","didn't"],"Oh, and":["a"],"Oh, btw.":["What"],"Oh, cool.":["`.isupper()`"],"Oh, forgot":["to"],"Oh, great!":["I'm"],"Oh, interesting.":["Counter"],"Oh, man.":["I"],"Oh, one":["thing"],"Oh, so":["Python"],"Oh, thank":["you!"],"Oh, that":["was"],"Oh. Yeah...":["I"],"Ok my":["bad,"],"Ok now":["this"],"Ok this":["one"],"Ok you":["factored"],"Ok, I":["think","give","can"],"Ok, So":["I"],"Ok, cool.":["I'm"],"Ok, good":["point."],"Ok, maybe":["having"],"Ok, my":["wrong,"],"Ok, thank":["you."],"Ok, thanks":["for"],"Ok, this":["is"],"Ok, we":["still"],"Ok, why":["do"],"Ok, will":["do"],"Ok, you":["found"],"Okay, figured":["out"],"Okay, so":["I"],"Okay. This":["is"],"On Line":["10"],"On `line":["6,","7`","5`"],"On a":["related"],"On line":["8,","9,","23,","20,","6","19","22,"],"On one":["hand"],"On the":["other","returns:","other","class","other"],"On this":["case,"],"Once again":["thanks","Python"],"Once more":["into"],"Once you":["have"],"One True":["Way(tm)"],"One cool":["thing"],"One could":["argue"],"One empty":["line"],"One last":["thing:","thing:","pointer."],"One line":["methods"],"One might":["argue"],"One more":["small","thing"],"One nit":["--"],"One of":["the"],"One option":["is"],"One other":["nit:"],"One suggestion":["is"],"One thing":["to","--","that","I'm"],"One very":["clean"],"One way":["of","of","around","to"],"One would":["expect"],"Only (and":["seriously,"],"Only reason":["I"],"Only thing":["you","I"],"Only trailing":["whitespace"],"Ooh, nice,":["thanks."],"Oops! I":["wish"],"Oops!! importing":["re"],"Oops. I":["added"],"Open your":["Python"],"Open/Closed principle":["(the"],"Ops. Wrong":["assignment."],"Or I":["could","could","could"],"Or a":["'U'?","'U'?"],"Or am":["I"],"Or an":["expression?"],"Or are":["there","they"],"Or create":["verbose"],"Or even":["better","better,"],"Or going":["fully"],"Or if":["I"],"Or is":["that","my"],"Or just":["call"],"Or maybe":["you","you","that"],"Or something":["approaching."],"Or that":["we"],"Or they":["could"],"Or was":["your"],"Or you":["could","are"],"Order matters":["when"],"OrderedDict as":["implemented"],"Organization looks":["good"],"Originally I":["just"],"Originally planned":["to"],"Originally, I":["converted"],"Other than":["that,","that,","that,","that,","that,","that,","that,","that,","that,","that","that,","the","that,"],"Other that":["that,"],"Otherwise I":["would"],"Otherwise looks":["great!"],"Otherwise the":["code"],"Otherwise this":["is"],"Otherwise very":["simple"],"Otherwise you":["would"],"Otherwise, a":["set"],"Otherwise, added":["comments"],"Otherwise, it":["looks","looks"],"Otherwise, looks":["neat","nice!"],"Otherwise, that's":["partly"],"Otherwise, you":["can"],"Ouch and":["one"],"Ouch, missing":["a"],"Ouch, one":["more"],"Ouch, please":["ignore"],"Ouch, scratch":["that,"],"Over all,":["this"],"Overall I":["like","like"],"Overall looks":["pretty"],"Overall the":["code"],"Overall though":["your","it"],"Overall, solid":["code."],"P.S. I":["hope"],"P.S. we":["need"],"PARAMETERS -":["you"],"PARAMETERS dict":["if"],"PARAMETERS dictionary":["gain"],"PARAMETERS thing":["but"],"PEP 8":["=)","suggests","and"],"PEP 8:":["http://www.python.org/dev/peps/pep-0008/#documentation-strings"],"PEP says":["it's"],"PEP-263. I":["am"],"PEP-8 is":["a"],"PEP-8 suggests":["snake"],"PEP. Now":["I"],"PEP08 (naming":["conventions):"],"PEP422 to":["statically"],"PEP8 -":["return"],"PEP8 a":["class"],"PEP8 also":["recommends","suggests"],"PEP8 and":["can't","gives","gives","I"],"PEP8 comes":["the"],"PEP8 is":["just"],"PEP8 per":["@bernardo's"],"PEP8 recommends":["to"],"PEP8 says":["two","separate"],"PEP8 suggests":["only"],"PEP8 violation:":["You"],"PEP8 which":["I"],"PEP8, `_field_name`":["is"],"PEP8, but":["that"],"PEP8. Also":["consider"],"PEP8. Consider":["getting","if"],"PEP8. In":["this"],"PEP8. There":["are"],"PEP8. There's":["also","also","even"],"PHP has":["lead"],"PHP thing":["and"],"POV but":["that's"],"PS: Sorry":["about"],"Parentheses around":["checks"],"Parentheses in":["case","`message_is_empty`","`is_shut_up`"],"Parentheses wrapping":["conditional"],"Part 2":["of"],"Part of":["me"],"Parts of":["check"],"Passing None?":["It"],"Patterns\" called":["intention-revealing"],"Per the":["[single"],"Perfect except":["that"],"Perhaps a":["different"],"Perhaps as":["a"],"Perhaps it's":["just"],"Perhaps not":["idiomatic"],"Perhaps one":["might"],"Perhaps that":["the","there's"],"Perhaps the":["docstring"],"Perhaps there":["could"],"Perhaps you":["can","don't"],"Perhaps your":["default"],"Personally I":["think","prefer"],"Personally, I":["feel","find","don't"],"Phone(object):` syntax,":["the"],"Phrase class":["constructed","besides","there.","is"],"Phrase class,":["but"],"Phrase class?":["Why"],"Phrase could":["be"],"Phrase order":["independent."],"Phrase) should":["handle"],"Phrase.phrase to":["lowercase"],"PhraseText class,":["my"],"PhraseType class":["doesn't"],"Plain old":["`if`s"],"Please also":["pay","pay","pay"],"Please argue":["for"],"Please consult":["[PEP"],"Please disregard":["if"],"Please do":["call","call"],"Please feel":["free"],"Please pay":["attention","attention"],"Please read":["about"],"Please refer":["to","to"],"Please take":["a","a","a","a","a"],"Please try":["to"],"Please upgrade":["your"],"Please use":["space"],"Plus there":["is"],"Polymorphism -":["at"],"Positively brilliant!":["It"],"Practice Patterns\"":["called"],"Pretty clean,":["I","I"],"Pretty clear":["so"],"Pretty concise!":["good"],"Pretty sure":["there's"],"Previously my":["comment"],"Principle](http://c2.com/cgi/wiki?SingleResponsibilityPrinciple) -":["on"],"Principle](http://c2.com/cgi/wiki?SingleResponsibilityPrinciple) for":["`Bob`"],"Print statement":["was"],"Pro: It's":["concise"],"Probably not":["as"],"Probably object":["instantiation"],"Probably simpler":["implemented"],"Probably the":["easiest"],"Processing inputs":["on"],"ProductOwner comes":["up"],"Prototyping technique":["(JavaScript-ish)."],"Put `if`":["conditional"],"Put them":["inside","in"],"Putting the":["helper","year"],"Py 2.7":["tests"],"Py 2.7.":["I"],"Py 3.x":["is"],"Python \"the":["most"],"Python #6":[":"],"Python #7":[":"],"Python (cf":["pep257)"],"Python (even":["if"],"Python (except":["for"],"Python (see":["[PEP8](http://www.python.org/dev/peps/pep-0008/#naming-conventions)):"],"Python (they":["are"],"Python -":["CamelCased","how"],"Python 2":["to"],"Python 2.2).":["It"],"Python 2.7":["so","for"],"Python 2.x":["by","it's","you","GoodPractice:"],"Python 2.x)":["you"],"Python 2.x,":["it's","it's","better","better","better","better","better","better","better"],"Python 3":["to","this","compatible","`intertools.ifilter`","maybe?","and"],"Python 3),":["that's","that's","that's","is","is","is","is","is"],"Python 3).":["`\"\\n\".join()`"],"Python 3,":["you","as","and","and","all"],"Python 3.":["Just","Perhaps","It's","It's","As","In","Currently","Currently","Current","You"],"Python 3.x?":["--"],"Python 3:)":["I"],"Python API":["reference?"],"Python Bob":["tests"],"Python Code:":["Naming"],"Python Code](http://www.python.org/dev/peps/pep-0008/)":["on","on","recommends","for"],"Python Code](http://www.python.org/dev/peps/pep-0008/],":["between"],"Python I've":["written."],"Python Style":["Guidelines,","Guidelines,","Guidelines,","Guidelines,","Guidelines,","Guide,","Guide,","Guide","Guidelines,","Guidelines,"],"Python `str`,":["which"],"Python a":["couple"],"Python also":["does"],"Python and":["we","very","inputs","when","writing","not"],"Python are":["appreciated."],"Python as":["a","a"],"Python assignment.":["I"],"Python attribute":["lookup"],"Python book":["had"],"Python builtins":["(function"],"Python by":["syntax"],"Python class":["attribute",":)"],"Python classes.":["I"],"Python code":["will","style","is","that's","to"],"Python code.":["It"],"Python community":["feel"],"Python concepts,":["thank"],"Python conventions":["or"],"Python conventions!":["Thanks"],"Python devs":["know"],"Python dicts":["are"],"Python discussion":["list"],"Python docs":["at"],"Python documentation":["even","even","even","even"],"Python documentation,":["`str.isupper()`"],"Python exercises":["here,"],"Python experience":["just"],"Python expert":["in"],"Python expert,":["so","so"],"Python fan,":["so"],"Python fits":["well"],"Python for":["boolean","a"],"Python format":["strings"],"Python function":["that"],"Python functions":["and","and","are","(and","are"],"Python has":["a","\"unbound","a","a","a","a","support","no","a","a","quite"],"Python idioms":["are","to"],"Python implodes":["because"],"Python in":["some","some","my","a"],"Python is":["both","to","not","still","none","how"],"Python it":["is"],"Python just":["by"],"Python list":["comprehension"],"Python makes":["lazy"],"Python method":["called"],"Python moderators":["are"],"Python newbie,":["so"],"Python noob.":["Much"],"Python not":["C"],"Python or":["what's"],"Python problem.":["I've"],"Python program.":["This"],"Python programmers":["will"],"Python programs":["is"],"Python proves":["that"],"Python shell":["and","and"],"Python shell.":["In"],"Python so":["let","up"],"Python standard":["library:","library"],"Python string":["is","method"],"Python strings":["have","have","have","are","are","are"],"Python style":["guide"],"Python that":["can"],"Python the":["first"],"Python there":["isn't","should"],"Python to":["keep","solve","start"],"Python version":["to"],"Python versions":["does"],"Python versions.":["It"],"Python very":["well,"],"Python way":["instead"],"Python way\"":["either."],"Python way).":["Import","2."],"Python we":["have","don't"],"Python well":["–"],"Python while":["working","sort"],"Python will":["not","use"],"Python you":["may","explicitly"],"Python zen":["#11"],"Python —":["not"],"Python! You":["could"],"Python!](http://python-guide.org) for":["tips"],"Python's \"falsey\"":["values"],"Python's Built-in":["String"],"Python's String":["library"],"Python's ['falsy'":["operations](http://docs.python.org/2/library/stdtypes.html#truth-value-testing).","operations](http://docs.python.org/2/library/stdtypes.html#truth-value-testing)"],"Python's `isupper()`":["function"],"Python's `str`":["type"],"Python's ability":["to"],"Python's builtins,":["which"],"Python's classes":["are","are"],"Python's collections":["(http://docs.python.org/2/library/collections.html)"],"Python's comprehensions":["though."],"Python's easy":["to"],"Python's fault,":["not"],"Python's functions":["and"],"Python's input":["built-in"],"Python's nature,":["which"],"Python's regexp":["functions?"],"Python's standard":["library.","library."],"Python's tokenizer":["module."],"Python's zen":[":"],"Python, I":["was"],"Python, I'm":["thinking"],"Python, Ruby":["and"],"Python, an":["empty","empty"],"Python, and":["so","generally"],"Python, but":["I","hey,"],"Python, can":["you"],"Python, consider":["e.g."],"Python, it's":["more"],"Python, not":["C++"],"Python, people":["tend"],"Python, so":["you","for","tips","if","they'll","this"],"Python, the":["preferred"],"Python--I think":["working"],"Python-esque than":["what"],"Python-fu is":["admittedly"],"Python. Any":["feedback"],"Python. Are":["they"],"Python. For":["this"],"Python. I'll":["change"],"Python. If":["any"],"Python. It":["is"],"Python. Looks":["like"],"Python. Method":["names"],"Python. Not":["only"],"Python. Thanks":["a"],"Python. This":["should"],"Python. What":["could"],"Python2 and":["Python3","Python3"],"Python2.x to":["use"],"Python3 installed":["but"],"Python3. Subclassing":["string,"],"Python: Sparse":["is"],"Python? I'm":["thinking"],"Python? I've":["switched"],"Python](http://www.python.org/dev/peps/pep-0020/) because":["they"],"Pythonesque ideal":["however."],"Pythonic conventions,":["with"],"Pythonic in":["these"],"Pythonic style":["--"],"Pythonic to":["me","do"],"Pythonic way":["to"],"Pythonic. ```los```":["stands"],"Pythons 'falsy'":["checking.","checking"],"Pythons built-in":["string"],"Pythons check":["for"],"Pythons falsy":["values"],"Pythons isupper()":["function?"],"Q&D minimal":["implementation"],"Q&D, passes":["all"],"QUESTION, SILENECE":["etc."],"Question: Are":["you"],"Quite clean":["approach."],"Quite. Nicely":["done."],"README confused":["me,"],"README file,":["specifically"],"README.md disagree":["from"],"README? It's":["just"],"REALLY nitpicking,":["but"],"REPLIES, you":["could"],"RESPONSE_RULES, much":["better!"],"RNA =":["set(\"GCAU\")"],"RNA are":["put"],"RNA but":["not"],"RNA by":["transcription."],"RNA class":["just","if","as"],"RNA conversion,":["but"],"RNA in":["a"],"RNA involves":["creating"],"RNA is":["simply","created,","a"],"RNA sequence":["being","back","is."],"RNA sequence.":["For"],"RNA strand":["is"],"RNA string":["if"],"RNA string.":["It"],"RNA version":["the","in"],"RNA. So":["we"],"Ran 18":["tests","tests"],"Rather easy":["task,"],"Rationale was":["the"],"Razor and":["go"],"Re returning":["a"],"Re the":["calls"],"Re whitespace:":["http://www.python.org/dev/peps/pep-0008/#blank-lines"],"Re. PARAMETERS":["-"],"Re. variable":["names"],"Read [PEP8](http://www.python.org/dev/peps/pep-0008/).":["For"],"Read the":["doc"],"Readability counts":["and"],"RealBigB (whomever":["you"],"RealBigB's advice":["from"],"RealBigB, I'll":["try"],"Realized I":["had"],"Really liking":["the"],"Recently I":["am","am"],"Reduce can":["be"],"Refactered and":["removed"],"Regarding conversion":["issue,"],"Regarding the":["`class"],"Regardless of":["whether"],"Regex are":["great,"],"Regex seems":["a","to"],"Regular expressions":["are"],"Related to":["(2):"],"Remember that":["Python's"],"Remember to":["inherit","inherit","inherit","inherit","inherit","inherit","inherit","inherit","inherit"],"Reminder :":["methods"],"Remove method":["`Bob.Bob`"],"Remove the":["unnecessary","unnecessary"],"Renamed local":["variables"],"Renamed to":["RESPONSE_RULES,"],"Replaced Dictionary":["from"],"Replaced the":["list"],"Replacing what":["I"],"Representing a":["DNA"],"Research on":["that"],"Reserving them":["for"],"Response class":["to"],"Responsibility Principle](http://c2.com/cgi/wiki?SingleResponsibilityPrinciple)":["for","-"],"Restructuring the":["if"],"Reusing the":["transformation"],"Rhodes presentation":["[The","[The","[The"],"Right now":["you","their"],"Right now,":["any"],"Ruby 1.8,":["where"],"Ruby a":["few"],"Ruby and":["other","FP"],"Ruby as":["well,"],"Ruby community,":["and"],"Ruby doesn't":["do"],"Ruby for":["about"],"Ruby guy,":["and"],"Ruby has":["the"],"Ruby in":["anything"],"Ruby iterations":["but"],"Ruby programmer":["by"],"Ruby version":["of"],"Ruby version.":["Will"],"Ruby version...I":["ported"],"Ruby where":["it's"],"Ruby will":["obviously"],"Ruby world":["at"],"Ruby world,":["so"],"Ruby years":["ago"],"Ruby). I":["plan"],"Ruby, I":["would"],"Ruby, and":["while"],"Ruby, but":["I"],"Ruby, if":["it's"],"Ruby, so":["I'm","I'm"],"Ruby, where":["functional"],"Ruby. I":["wanted"],"Run the":["tests"],"RuntimeError: maximum":["recursion"],"SHOUTING case":["could"],"SILENECE etc.":["would"],"SOLID) in":["this"],"SPOT operation":["with"],"SQL or":["HTML"],"STILL have":["a"],"Same goes":["for"],"Sanitization of":["data"],"Scary waste":["of"],"Scheme's `cond`":["(and"],"Se others":["in"],"Second, ```greeting.upper()":["=="],"Second, as":["this"],"Second, why":["call"],"Secondly, you":["have"],"See [Loop":["Like"],"See [PEP":["8","8","257","8"],"See [PEP8](http://www.python.org/dev/peps/pep-0008/#id9)":["for"],"See [Python":["Guide"],"See [The":["Naming"],"See a":["[discussion"],"See also:":["http://stackoverflow.com/questions/6908143/should-i-put-shebang-in-python-scripts"],"See e.g.":["http://hg.python.org/cpython/file/3.3/Lib/ipaddress.py#l1285,"],"See http://www.artima.com/weblogs/viewpost.jsp?thread=98196.":["But"],"See latest":["revision,"],"See my":["next"],"See newly":["submitted"],"See previous":["versions."],"See the":["last"],"See tutorial":["on"],"Seems a":["bit"],"Seems like":["it'd","an"],"Seems this":["is"],"Semicolon at":["line"],"Sentence felt":["like"],"Sentence or":["Message"],"Sentence stuff.":["It"],"Sentence would":["be"],"Sentence, then":["you"],"Separate class":["100000"],"Separate functions":["in"],"Separating the":["checks"],"Setting `response`":["initially"],"Several submissions":["call"],"Shall I":["use"],"Shaw to":["avoid","avoid","avoid"],"Shaw, it":["is"],"Short explanation":["can"],"Short explanation:":["http://stackoverflow.com/a/54873/477048"],"Should I":["convert","create"],"Should `BlahResponder`":["subclass"],"Should `valid_nucleotides`":["be"],"Should actually":["be:"],"Should be":["more"],"Should there":["be"],"Should use":["OrderedDict","endswith"],"Should you":["decide"],"Shouts will":["always"],"Side note,":["I"],"Silence is":["no"],"Silence will":["never"],"Silently failing":["(returning"],"Similarly you":["won't"],"Similarly, you":["don't"],"Simple and":["easy","intuitive.","straight","very","readable!!!"],"Simple docstring":["for","for"],"Simple yet":["it"],"Simple, clean":["implementation"],"Simpler and":["Python"],"Simplest possible":["implementation."],"Simplicity for":["the"],"Since `existing_robots`":["is"],"Since `message`":["will"],"Since all":["of","of"],"Since every":["class"],"Since in":["this"],"Since it's":["a"],"Since the":["test","point","only","functions"],"Since these":["are"],"Since this":["code","is"],"Since we're":["returning"],"Since you":["can","ask,"],"Since you're":["returning","doing"],"Single uderscore":["prefix"],"Single underscore":["prefix"],"Skip to":["the"],"Smart Conventions](http://rhodesmill.org/brandon/slides/2013-03-pycon/)":["presentation"],"Smart approach":["to"],"So I":["didn't","wanted","wrote","am","traded","had","was"],"So `wordlist`":["would"],"So at":["least"],"So even":["with"],"So everyone":["is"],"So far,":["my"],"So first":["submission"],"So from":["my"],"So have":["you"],"So if":["this","you","you"],"So in":["the"],"So it":["really","makes","is,","will"],"So it's":["good","up","certainly"],"So maybe":["that's"],"So my":["solution"],"So now":["a"],"So the":["code","RNA","comment","return"],"So there":["are"],"So this":["abstracts"],"So true!":["I"],"So we":["might"],"So what":["happens"],"So when":["it's"],"So with":["my"],"So you":["can","mean","have","don't","don't","could","don't","don't","don't"],"So you're":["suggesting"],"So, for":["this"],"So, full":["disclosure"],"So, in":["the"],"So, on":["this"],"So, the":["test"],"So, there":["is"],"So, they":["have"],"So, to":["simplify"],"Solid logic":["test"],"Solution: two":["adjacent"],"Some argue":["that"],"Some assorted":["comments:"],"Some feedback":["thoughts:"],"Some ideas":["I"],"Some might":["argue"],"Some nitpicks":["for"],"Some of":["the","methods"],"Some people":["don't"],"Some possible":["reasons"],"Some regex":["magic"],"Some suggestions":["to"],"Some things":["to"],"Some thoughts":["are:"],"Some would":["argue","prefer"],"Somebody else":["has"],"Somehow I":["missed","want","don't"],"Somehow the":["first"],"Someone else":["also","told"],"Someone left":["me","me","[this"],"Someone reading":["this"],"Someone told":["me"],"Something like":["this?","`WORDS_RE`","making","Message","`normalized_words","this,"],"Something wrong":["with"],"Sometimes, you":["gotta"],"Sorry about":["the","some"],"Sorry but":["I"],"Sorry for":["that.","being"],"Sorry, duplicate":["submit"],"Sorry, no.":["This"],"Sorry, not":["having"],"Sorry, the":["conversation"],"Space is":["ommitted"],"Sparse is":["better","better","better"],"Speling mistak":["in"],"Split is":["unnecessary."],"Splitting on":["words"],"Statement (excepting":["__init__,"],"Statement class":["non-public","was"],"Statement doesn't":["seem"],"Statement is":["responsible","stateless."],"Statement methods":["can"],"Statement, but":["does"],"States we":["typically"],"Sticking to":["these"],"Still finding":["these"],"Still have":["to"],"Still in":["favor"],"Still learning":["my"],"Still looking":["for","for"],"Still you":["could"],"Storing strand":["as"],"String Types":["as"],"String ```":["method,"],"String has":["iterator","iterator"],"String library":["had"],"String methods":["instead?"],"String objects":["have"],"String to":["do"],"String#endswith method,":["and"],"String#translate wasn't":["very"],"Strings have":["an","a"],"Strings in":["python"],"Strings/lists accept":["negative"],"Style Guide":["http://www.python.org/dev/peps/pep-0008/","for","for","for","for","for","for","for","for"],"Style Guide,":["aka","aka"],"Style Guidelines,":["aka","aka","aka","aka","aka","aka","aka"],"Style linters":["would"],"Styles](http://www.python.org/dev/peps/pep-0008/#descriptive-naming-styles). Double":["underscore"],"Subclassing `int`":["avoids"],"Subclassing string,":["yay!"],"Sublime's new":["class"],"Such a":["function"],"Sure can!":["Think"],"Sure, I":["guess"],"Sure, but":["being"],"Sure, that":["makes"],"Sure, why":["not."],"Surely that's":["just"],"Sweet :)":["I'm"],"Sweet! You":["may"],"Sweet. +1":["Nice"],"Switched translate":["to"],"SysCoder says,":["your"],"T to":["U,"],"T with":["U,","U"],"T's with":["U's?"],"T-&gt;U. You":["don't"],"TBH has":["always"],"TDD happening":["once"],"TDD mandates":["that"],"THANK YOU!":["Amazing"],"THE HELL":["WERE"],"THERE IS":["an"],"T` on":["the"],"Take a":["look","look","look","look"],"Taking into":["account"],"Tanks you":["for"],"Teenager base":["class)."],"Tell me":["if","also"],"Testing against":["an","`None`"],"Testing for":["all"],"Testing](http://docs.python.org/2/library/stdtypes.html#truth-value-testing)). I":["bet"],"Tests don't":["cover","check"],"Tests fail":["in"],"Thank you":["for","for","all.","phrodod","for","for","for","for","for","for","for","for","very","for","for","for"],"Thank you!":["My"],"Thank you,":["I"],"Thank you.":["I","It","I've","It"],"Thank your":["for"],"Thankfully we":["live"],"Thanks -":["definitely"],"Thanks @amos,":["you're"],"Thanks @barrett,":["great"],"Thanks @derick":["for"],"Thanks @jairo":["and"],"Thanks @sheldon,":["I"],"Thanks Ana!":["Great"],"Thanks Zoldar.":["I"],"Thanks a":["lot!","lot!","bunch.","bunch!","lot","bunch"],"Thanks again":["-"],"Thanks again!":["I've"],"Thanks anyway":[":)"],"Thanks edliaw":["and"],"Thanks everyone":["for"],"Thanks for":["the","the","the","your","asking","the","comments.","nitpicking!","the","the","the","the","the","the","the","your","your","that!","the","the","the","the","the","the","your","the","the","the","the","the","the","the","the","pointing","the","the","the","the","the","those","the","the","the","the","pointing","the","the","pointing","the","the","a","_flake8_.","this","the","the","the","feedback,","the","comments!","the","the","the","the","the","the","pointing","your","the","the","the","your","the","your","the","that","the"],"Thanks magopian":[":)"],"Thanks to":["@dewitt,","Kwpolska","@amely's","RealBigB"],"Thanks you":["for"],"Thanks! I":["care","often","will","was"],"Thanks! I'll":["submit"],"Thanks! That's":["much"],"Thanks, BrianHicks!":["Good"],"Thanks, I":["suppose","knew"],"Thanks, didn't":["know"],"Thanks, got":["it."],"Thanks, nice":["feedback."],"Thanks, rsslidnphy.":["I"],"Thanks, that":["helps!"],"Thanks, that's":["very"],"Thanks, useful":["as"],"That assertion":["will"],"That being":["said,","said,","spoken"],"That code":["must"],"That could":["incidentally"],"That does't":["really"],"That feedback":["makes"],"That feels":["hacky"],"That first":["line"],"That helps":[":)","to","to","to","to"],"That import":["is"],"That is":["definitely","kind","indeed"],"That is,":["the"],"That makes":["them","a","code","sense;"],"That may":["really"],"That means":["your"],"That might":["make"],"That other":["check"],"That pass":["is"],"That really":["shortened"],"That said,":["`len`","both","this"],"That said.":["What"],"That seems":["like"],"That then":["obviates"],"That was":["actually"],"That way":["the","it","all","you","it","if","you"],"That way,":["different"],"That would":["have","be","make","make","be","help","make","make","normally"],"That's a":["really","good","big","great","good"],"That's already":["the"],"That's better":["but"],"That's definitely":["a"],"That's fair!":["I"],"That's fair.":["I"],"That's just":["a"],"That's much":["clearer"],"That's quite":["succint,","a"],"That's really":["a"],"That's the":["nice"],"That's true,":["but"],"That's was":["something"],"That's what":["source"],"That's where":["I"],"That's why":["I","i","I"],"The \"Bonus":["points\""],"The \"Showing":["off"],"The \"all":["upper-case\""],"The \"predicate/action\"":["version."],"The \"whatever\"":["answer"],"The 'for'":["logic"],"The KISS":["version."],"The Language":["class"],"The PhraseType":["class"],"The Statement":["methods"],"The UPPER":["CASE"],"The `ANSWERS`":["variable"],"The `Anagram`":["class","class"],"The `__main__`":["check"],"The `_replies`":["pseudo-dict"],"The ```":["else"],"The ```sequence```":["variable"],"The `cache_result`":["decorator's"],"The `clean_phrase`":["function"],"The `collections.Counter`":["class"],"The `collections`":["module"],"The `defaultdict`":["works"],"The `elif`":["statements"],"The `getattr`":["syntax"],"The `import":["re`"],"The `re.compile`":["in"],"The `re`":["import"],"The `return":["MethodDispatcher(self._responses(message),"],"The `str`":["type"],"The `to_rna`":["method"],"The `try`/`except`":["is"],"The additional":["class"],"The additionnal":["test:"],"The advantage":["to"],"The alternative":["is"],"The big":["problem"],"The built":["in"],"The case":["where"],"The character":["set"],"The choice":["of"],"The class":["attribute"],"The closing":["`\"\"\"`"],"The code":["does","looks","layout","is","is","is","is","looks","is","is","is","is","is","is"],"The comment":["that","indentation"],"The commented":["out"],"The comments":["are"],"The convention":["for"],"The current":["solution","\"complexity\""],"The declaration":["of"],"The description":["of","of"],"The design":["owes"],"The details":["of","of"],"The difference":["with"],"The doc":["comment","comment"],"The documentation":["patches"],"The double-leading":["underscore"],"The double-underscore":["seems"],"The elif/else":["where"],"The endswith()":["suggestion"],"The fact":["I","that"],"The fact,":["that"],"The first":["spec","test","is","`if`","if","case","if-clause"],"The following":["code"],"The for":["loop"],"The generator":["comprehension"],"The goal":["of"],"The idea":["here"],"The import":["is","in"],"The initial":["thought"],"The input":["string"],"The instructions":["are"],"The intent":["of"],"The interface":["to"],"The is_shouting":["and","is"],"The last":["`else`","pair","line,"],"The length":["check"],"The less":["complexity"],"The list":["comprehension","at"],"The logic":["here","for","of"],"The loop":["and"],"The main":["smells","and","difference"],"The mapping":["is"],"The message":["is","could"],"The method":["addressing","`isupper`"],"The more":["\"idiomatic\""],"The most":["frustration","difficult"],"The name":["\"Rules"],"The names":["of"],"The no-op":["constructor"],"The object-orientivism":["`Bob`"],"The obvious":["straightforward"],"The one":["line","thing"],"The only":["reason","thing","remaining","problem","thing","method","nit","issue","thing","thing","kind-of-tricky","(very","thing","real"],"The order":["does","is","of"],"The organization":["of"],"The other":["one","methods","two","two"],"The outer":["level"],"The parameter":["name"],"The parentheses":["around"],"The passed":["parameters"],"The pattern":["'\\W'"],"The perils":["of"],"The phrase":["itself"],"The predicate":["used"],"The problem":["I","has"],"The program":["to"],"The python":["way"],"The pythonic":["way","convention","way"],"The question":["of","predicate"],"The really":["strange"],"The reason":["I","I","your"],"The regex":["module"],"The regular":["expressions","expressions"],"The requirements":["were"],"The rest":["of","seem"],"The right":["hand"],"The same":["concept","expression","with"],"The second":["case,","part","concern"],"The short":["version"],"The silence":["check"],"The solution":["look","is"],"The spec":["is"],"The statement":["one"],"The straightforward":["solution"],"The string":["class"],"The syntax":["of","appears"],"The test":["suite","suite","case","cases","in"],"The tests":["do","are","pass,"],"The trade-offs":["were;"],"The translate":["method"],"The translation":["table"],"The underscore":["is"],"The updated":["version"],"The usage":["of"],"The use":["of","of","of"],"The way":["the"],"The whole":["check","point"],"The word_count":["function"],"Then I":["think","painted"],"Then `Carl`":["could"],"Then about":["naming,"],"Then again,":["I"],"Then based":["on"],"Then for":["example"],"Then it":["reads,"],"Then the":["body","version","whole"],"Then there":["was"],"Then wouldn't":["need"],"Then you":["wouldn't","probably","can","could"],"Then, if":["you've"],"Then, the":["unit"],"There are":["more","well","more","many","probably,","definitely","some","some","several","several","a","a","of","two","a","3","two","more","couple","some","several","a"],"There didn't":["seem"],"There exists":["a"],"There is":["a","a","amazingly","more","a","no","no","actually","also","some","no","a","some","no","a","no","special","a","no","a","no","so"],"There might":["be"],"There should":["be","be","be","be","be","be"],"There were":["two"],"There's _no_":["\"privacy\""],"There's a":["ton","pattern","great","simpler","method","comment","string","useful","useful","bit","more","built-in","built-in","reason"],"There's actually":["an"],"There's also":["a","a","a","a","a"],"There's always":["tradeoff"],"There's an":["object","actual"],"There's another":["method"],"There's even":["command"],"There's more":["succint","succint","succint"],"There's no":["state","overriding","weird"],"There's one":["that"],"There's some":["backlog","repetition"],"There's still":["a"],"There's subtle":["(inscrutable?"],"There's such":["thing"],"Therefore, wouldn't":["it"],"These are":["things","just","kind","minor"],"These functions":["are"],"These methods":["have"],"These should":["at"],"These trade-offs":["are"],"They all":["seemed","seemed"],"They are":["(or","distinct","instance","ace.","really","only","quite","class","still"],"They can":["be"],"They know":["quite"],"They should":["be"],"They would":["be","have"],"They're not":["necessarily","the","supposed"],"They're quite":["hard"],"Things that":["are","are"],"Think \"what":["is"],"Think about":["making","how","reducing","using"],"Thinking about":["performance"],"Third, you":["may"],"This `Anagram#_canonicalize`":["is"],"This approach":["creates"],"This being":["said"],"This breaks":["LSP"],"This class":["simplifies"],"This code":["is","doesn't","makes","is"],"This comes":["from"],"This condition":["becomes"],"This could":["be","be","be"],"This doesn't":["seem","have","really","work,"],"This function":["could"],"This gets":["the"],"This gives":["you"],"This idea":["is","is"],"This implementation":["of","is","is"],"This is":["quite","a","a","probably","why","an","kind","a","one","a","IMO","clear","looking","nice","especially","a","a","a","a","just","a","the","the","an","really","Python","Python,","a","a","simply","my","passing","as","bad","very","my","recommended","important","exactly","much","along","new","the","solid,","my","my","because","basically","similar","the","why","Python","not","pretty","almost","a","almost","definitely","just","a","simple","another","more","a","just","a","hard:","nowhere"],"This isn't":["a","very"],"This iteration":["just"],"This kind":["of"],"This led":["to"],"This looks":["good!","pretty","good!","good,","way","good.","great.","good,","good!"],"This makes":["sense,","sense"],"This may":["be","not"],"This means":["that"],"This might":["make"],"This minimal":["implementation"],"This on":["is"],"This or":["go"],"This passes":["the"],"This probably":["makes"],"This problem":["often"],"This section":["is"],"This seems":["a","to","like","kind"],"This should":["also","imho","also"],"This site":["is"],"This solution":["is","seems","attempts","makes"],"This thinking":["falls"],"This tip":["should"],"This uselessly":["increases"],"This version":["is","has"],"This was":["alot","really","the"],"This way":["you're","looking","you"],"This way,":["a"],"This would":["be","save"],"This, and":["(if"],"This, however,":["did:"],"This, together":["with"],"Those are":["definitely"],"Those names":["could"],"Those variables":["at"],"Those were":["hiding"],"Though I":["guess"],"Though this":["is"],"Though you":["will"],"Though, if":["you"],"Though, it":["would"],"Thought about":["filter"],"Thought of":["that"],"Three cheers":["for"],"Thumbs up":[":)"],"Thus HTTPServerError":["is"],"Thus, it":["means"],"Time to":["do"],"Tip from":["Zen"],"To a":["great"],"To answer":["your","your"],"To avoid":["executing"],"To be":["exact:","an","more","clear,","honest,"],"To check":["\"yelling\"","\"yelling\"","the","for"],"To continue":["where"],"To eliminate":["the"],"To make":["the","your"],"To me":["it","it"],"To me,":["I","I"],"To my–very":["limited–knowledge,"],"To not":["use"],"To return":["early"],"To stay":["consistent,"],"To test":["for","a","for","strings"],"To the":["first"],"To use":["for"],"Tokenizer, although":["more"],"Too complicated,":["you"],"Too much":["coupling,","of"],"Took a":["shot"],"Totally agree":["with"],"Totally different":["thing:"],"Traceback (most":["recent","recent","recent","recent","recent","recent","recent","recent","recent"],"Trade-off with":["`elif"],"Trade-offs considered":[":"],"True Way(tm)":["or"],"True and":["isUppercase`"],"True else":["return"],"True else:":["return"],"True if":["text","message","all","message"],"True or":["False,","False"],"True, I'm":["reading"],"True, but":["explicit"],"True, for":["me"],"True, there":["is"],"True` in":["`Bob._validate`?"],"True`. But":["this"],"Try \"Returns":["True"],"Try #2":["after"],"Try calling":["`int()`"],"Try changing":["line"],"Try it":["with"],"Try looking":["on","up"],"Try making":["short"],"Try running":["`pep8`"],"Try something":["like"],"Try to":["run","come","read","use","make","re-factor"],"Try using":["a"],"Try writing":["`not"],"Trying to":["do","use"],"Turns out":["inequality"],"Two blank":["lines","lines"],"Two minor":["things"],"Two things":["though"],"Two things,":["though:"],"Two underscores":["invoke"],"Two words":["are"],"Type Checking:":["OK,"],"Types Meet":["Smart","Smart","Smart","Smart"],"Types as":["previously"],"Typically in":["Python"],"U doesn't":["convey"],"U's? For":["example,"],"U, in":["regards"],"U, you're":["creating"],"UI for":["approvals"],"UPPER CASE":["SHOUTING"],"US phone":["number"],"UTF-8 encoding":["(and"],"Ugh, style":["discussion"],"Ultimately it's":["a"],"Unfortunately there's":["no"],"Unfortunately, exercism.io":["does"],"Unfortunately, the":["tests"],"Unfortunately, this":["doesn't"],"Unfortunately, when":["I"],"Unicode characters":["in"],"Unicode string":["that"],"Unicode threw":["me."],"Unicode, so":["splitting"],"Unique name":["creation"],"United States":["we"],"Unless I":["not"],"Unless of":["cause"],"Unless you":["are"],"Updated to":["use"],"Updated. Thanks":["for"],"Uracil must":["necessarily"],"Usage of":["s.strip()"],"Use [http://docs.python.org/2/library/stdtypes.html#truth-value-testing](http://docs.python.org/2/library/stdtypes.html#truth-value-testing)":["and"],"Use `is`":["statement"],"Use `message`":["as"],"Use `next`":["to"],"Use `string.strip()`":["to"],"Use `var":["is"],"Use better":["name"],"Use new-style":["classes:"],"Use of":["all"],"Used if,":["elif"],"Used internal":["Response"],"Used negative":["list"],"Using `Counter`":["instead","or"],"Using `getattr`":["here"],"Using `if":["not`"],"Using `itertools.count`":["expresses"],"Using `message.strip()`":["might"],"Using `not":["message`"],"Using `s`":["for"],"Using `str.translate`":["doesn't"],"Using `str`":["as"],"Using a":["structure","method","`dict`,","mapping","dict"],"Using any":["non-trivial"],"Using it":["as"],"Using negative":["indices"],"Using regex":["instead"],"Using regexp":["might","is"],"Using regexps":["when","to"],"Using the":["replace"],"Using these":["inside"],"Using this":["approach"],"Usually it's":["a"],"Usually prefixing":["method"],"Usually the":["convention"],"Utterance class":["(becoming"],"Utterance class,":["but"],"Utterance is":["great!"],"Value Testing](http://docs.python.org/2/library/stdtypes.html#truth-value-testing)).":["I"],"ValueError exception":["(I"],"ValueError if":["the"],"Version 4":["does"],"Version that":["doesn't"],"Very clean":["solution."],"Very confused":["by"],"Very cool!":["Thumbs"],"Very cool.":["Ruby"],"Very little":["of"],"Very new":["to"],"Very nice":["work,","work","code."],"Very nice!":["One"],"Very nice,":["I"],"Very nice.":["A"],"WERE YOU":["THINKING?')"],"WHY you":["care."],"Wait! It":["works!"],"Was able":["to"],"Was inspired":["after"],"Was there":["a"],"Wasn't aware":["of"],"Wasn't it":["for"],"Way(tm) or":["anything"],"We arrived":["at"],"We certainly":["don't"],"We discussed":["using"],"We do":["this"],"We have":["strong"],"We just":["need"],"We solved":["this"],"We still":["have"],"We use":["the"],"We're going":["to"],"We've arrived":["at"],"Weird. Checked":["both"],"Weirder. I":["don't"],"Welcome to":["learning"],"Well done!":["Much"],"Well done.":["I"],"Well explaned.":["Thanks"],"Well in":["this"],"Well ok,":["in"],"Well typically":["you'd"],"Well we":["might"],"Well when":["you"],"Well, I":["could","didn't"],"Well, LOC":["is"],"Well, it's":["quite"],"Well, since":["you're"],"Well, that's":["very"],"Well, the":["intention","execution"],"Well, you've":["gotta"],"Were you":["thinking"],"Wether the":["second"],"What I":["mean","like","would","forgot"],"What I'd":["like"],"What a":["glorious"],"What about":["other","breaking","a","moving","moving","a","decoupling","a","a","ways","the"],"What are":["you","`Word.really_raw`"],"What could":["you"],"What do":["you","you","you","you","you","you","you","you","you","you","you","they"],"What does":["using"],"What effect":["would"],"What happens":["if","if"],"What if":["you","I","you","you","you"],"What is":["\"no-op\"","the","the","a","the","`toBob.isupper()`","`input.isupper()`","`phrase.isupper()`","the","the"],"What it":["does"],"What kind":["of"],"What other":["names"],"What programming":["background"],"What purpose":["does"],"What the":["point"],"What version":["of","of"],"What will":["happen"],"What would":["moving","it","it","this","this","you","be","happen","happen","be"],"What you":["want","mean","basically"],"What you're":["doing"],"What you've":["written"],"What's the":["benefit","truthy/falsey","motivation?","right","point","reason?","use","point","point","tradeoffs"],"What's wrong":["with","with"],"What's your":["problem"],"What, you":["don't"],"Whats your":["thought"],"When Bob":["is"],"When I":["look","did","was","see","did","first"],"When RNA":["is"],"When `input_string`":["is"],"When are":["names"],"When both":["results"],"When it":["eventually","comes","comes"],"When making":["my"],"When no":["test"],"When somebody":["tries"],"When testing":["a","a"],"When the":["ProductOwner"],"When using":["abbreviations"],"When you":["mix","test"],"Whenever you":["use"],"Where Dynamic":["Types","Types","Types","Types"],"Where are":["you"],"Where else":["might"],"Where the":["connection"],"Which do":["you"],"Which is":["not"],"Which method":["on"],"Which way":["to"],"While I":["realize","could"],"While `_is_shouting`":["in"],"While all":["the"],"While code":["in"],"While including":["more"],"While it's":["semantically"],"While more":["true"],"While representing":["a"],"While this":["is"],"While using":["a"],"While you're":["making"],"Whoops, ignore":["this"],"Whoops, meant":["to"],"Whoops. Line":["17"],"Why `rstrip`":["and"],"Why are":["you","you","you","the","you","you","we"],"Why aren't":["these"],"Why compare":["length"],"Why did":["you","you","you","you","you"],"Why didn't":["you","you","you"],"Why do":["you","you","you","you","you","you","you","you","you","you"],"Why does":["it","the"],"Why exposing":["more"],"Why have":["you"],"Why is":["`strn`","`response`","so","it"],"Why list":["the"],"Why make":["an","local","them","them"],"Why normalize":["twice?"],"Why not":["subclass","work","trying","give","using","also","make","a","just","make","make","directly","use"],"Why the":["nested","`None`","use"],"Why use":["getattr()","static"],"Why would":["I","I","it","that","I"],"Why you":["need","chose","didn't","didn't","use"],"Why? Well":["when"],"Why? What's":["the"],"Will change":["=)"],"Will definitely":["pick"],"Will implement":["here"],"Will it":["ever"],"Will make":["these"],"Will refactor":["`nucleotide_counts`"],"Will the":["right"],"Will try":["it"],"Will update":["when","and"],"Will your":["code"],"With a":["conditional","regex"],"With it":["being"],"With message":["classifiers"],"With my":["interpretation,","method,"],"With names":["in"],"With one":["minor"],"With regards":["to","to"],"With some":["functional"],"With that":["said,"],"With the":["one-liners,","unicode"],"Without split":["don't"],"Without this":["call"],"Woke up":["and"],"Word class":["(just"],"Word). So,":["for"],"Working on":["the"],"Works for":["me.","me."],"Would `collections.Counter`":["help"],"Would be":["worthwhile","much"],"Would it":["be","be","even","be","be","match","be","match","be","also","work"],"Would love":["an"],"Would that":["even"],"Would you":["still"],"Wouldn't a":["`str.isupper"],"Wouldn't aliasing":["nucleotide"],"Wouldn't it":["make","be"],"Wow thanks":["so"],"Wow you":["used"],"Wow! Simple":["and"],"Wow! Well":["explaned."],"Wow, `re.findall`":["gets"],"Wow, `str.maketrans`":["drops"],"Wow, thanks":["for"],"Wow, that":["is"],"Wow, this":["code"],"Wow, you":["used"],"Writing the":["structure"],"X==Y into":["methods?"],"Xavier was":["right,"],"YAGNI applies":["here."],"YAGNI, and":["caching"],"YAGNI. These":["methods"],"YOU! Amazing":["feedback."],"Yay :)":["I'm"],"Yay, I":["wasn't"],"Yeah, I":["suppose","originally","normally"],"Yeah, as":["an"],"Yeah, constants":["would"],"Yeah, really":["smart"],"Yeah, you":["could"],"Yeah... I":["knew"],"Yep, that's":["what"],"Yes ,":["thanks"],"Yes I":["meant","meant"],"Yes it's":["possibly"],"Yes, Bob":["is"],"Yes, I":["was","made","like","agree"],"Yes, I'm":["sorry,"],"Yes, PEP-263.":["I"],"Yes, but":["every","the"],"Yes, in":["it's"],"Yes, it's":["inconvenient"],"Yes, one":["often"],"Yes, something":["like"],"Yes, that's":["it."],"Yes, the":["code"],"Yes, this":["is"],"You already":["do"],"You also":["don't","missed","could","could","could"],"You are":["like","passing","given","then","calling","right","right","checking"],"You call":["`text.strip()`"],"You can":["clarify","of","just","use","also","use","use","use","use","take","rewrite","use","now","use","use","just","use","use","use","do","put","use","also","use","definitely","give","return","probably","simply","safely","still","take","use","have","avoid","skip","create","simplify","use","do","live","find","use","use","remove","rephrase","still","solve","also","read","use","get","simplify","make","just","omit","omit"],"You check":["`type(data)","that","if"],"You code":["is"],"You comment":["is"],"You could":["also","spread","do","use","use","have","move","maybe","invoke","make","use","consider","sanitize","utilize","do","consider","just","do","short","be","lowercase","try","use","also","also","give","probably","of","rearrange","also","create","as","use","use","make","wrap","apply","use","mark","consider","have","consider","change","have","pick","have","use","imagine","`str.replace`","have","checkout","have","simplify","return","have","have","guard","consult","have","define","move","name","use","have","use","mark","use","use","use","name","mark","create","add","reduce","use","add","use","extract","use","use","nest","also","extract","just","also","either","change","simplify","instead","also","extract","consider","use"],"You define":["\"_is_statement\","],"You defined":["methods"],"You definitely":["should"],"You doesn't":["need"],"You don't":["need","need","need","need","need","have","need","need","mimic","need","have","have","need","need","need","need","use","_need_","necessarily","need","need","need","need","actually"],"You even":["noticed"],"You follow":["this"],"You gave":["a"],"You have":["a","to","\"if","this","`.number`","superfluous","over-complicated","very","missing","done"],"You ignore":["some"],"You import":["the","`re`"],"You inspired":["me"],"You know":["that","how"],"You make":["good"],"You may":["want","be","want","want","want","want","have","want","want","want","want","want","want","want","be","also"],"You mean":["because"],"You might":["want","want","want","also","also","want","lift","want","take","look","know"],"You must":["come"],"You need":["to"],"You only":["want"],"You seem":["to","to","to"],"You should":["be","have","have","return","use","remove","use","use","better","consider","make","be","make","[inherit","use","[inherit","make","always","add","use","make","move","use","look","use","use","look","read","use","look","check"],"You still":["can","don't","import"],"You then":["end"],"You underestimate":["the"],"You understand":["correctly"],"You use":["`len()`","```","the","comments"],"You used":["regexp"],"You want":["to","to"],"You will":["have"],"You would":["have","have"],"You'd have":["to"],"You'll be":["able"],"You'll have":["to"],"You're absolutely":["right","right."],"You're building":["up"],"You're not":["using"],"You're reinventing":["a"],"You're right":["that","it","I","about"],"You're right,":["my","that","it's"],"You're right.":["That","Didn't"],"You're second":["statement"],"You're still":["making"],"You're trying":["to"],"You're using":["`re.compile`"],"You've chosen":["a"],"You've clearly":["put"],"You've got":["it!","a","the"],"You've nicely":["factored"],"You've used":["somewhat"],"Your \"is":["None\""],"Your \"logic\"":["is"],"Your `hey()`":["method"],"Your `match`":["function"],"Your arguments":["are"],"Your call":[";)"],"Your code":["is","looks","is","looks","will","is","is","is","passes","is","looks"],"Your coding":["style"],"Your comments":["for","are","explain"],"Your control":["flow"],"Your doc":["comments"],"Your feedback":["is"],"Your if":["statement"],"Your ifs":["for"],"Your isBlank":["method"],"Your other":["points"],"Your program":["should"],"Your proposition":["is"],"Your shouting":["regexp"],"Your suggestion":["is","is"],"Your taste":["isn't"],"Zed Shaw":["to","to","to"],"Zed Shaw,":["it"],"Zen of":["Python.","Python:","Python](http://www.python.org/dev/peps/pep-0020/)"],"Zoldar nailed":["it"],"Zoldar, who":["sounded","sounded"],"Zoldar. I":["totally"],"[ if":["..."],"['carthorse'] !=":["filter"],"['falsy' operations](http://docs.python.org/2/library/stdtypes.html#truth-value-testing)":["to"],"['falsy' operations](http://docs.python.org/2/library/stdtypes.html#truth-value-testing).":["In"],"[(is_silent, 'Fine.":["Be"],"[(lambda input:":["not"],"[*name mangling*](http://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references),":["effectively"],"[... for":["w"],"[48]: timeit.timeit('[\"\".join(sorted(\"sadfasdfagrregwfagfregawgfresafafewrf\"))":["for"],"[49]: timeit.timeit('from":["collections"],"[8]: timeit.timeit('from":["collections","collections"],"[9]: timeit.timeit('[\"\".join(sorted(\"sadfasdfagrregwfagfregawgfresafafewrf\"*10000))":["for","for"],"[Alphagrams](http://en.wikipedia.org/wiki/Alphagram), where":["in"],"[Here it":["is](exercism.io/submissions/52101ce59701fa85bd000026)"],"[IPython](http://ipython.org/ipython-doc/stable/interactive/tutorial.html) to":["quickly"],"[Loop Like":["A","A","A"],"[Ned Batchelder:":["Loop"],"[Old style":["and"],"[PEP 0008](http://www.python.org/dev/peps/pep-0008/#function-names)":["to"],"[PEP 257":["--","--","--"],"[PEP 8":["--","--","--","--","--","--","--"],"[PEP 8](http://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements)":["says"],"[PEP-263](http://www.python.org/dev/peps/pep-0263/)? I":["have"],"[PEP-8 guideline":["for"],"[PEP-8](http://www.python.org/dev/peps/pep-0008) and":["change","[PEP-20](http://www.python.org/dev/peps/pep-0020/)."],"[PEP8 Style":["Guide"],"[PEP8 says](http://www.python.org/dev/peps/pep-0008/#indentation)":["4"],"[PEP8](http://www.python.org/dev/peps/pep-0008/#id9) for":["more"],"[PEP8](http://www.python.org/dev/peps/pep-0008/#naming-conventions)): class":["names"],"[PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations) has":["a"],"[PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations) recommends":["using","to","making","to"],"[PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations) suggests":["to"],"[PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations). Another":["recommendation"],"[PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations). Lastly,":["don't"],"[PEP8](http://www.python.org/dev/peps/pep-0008/#public-and-internal-interfaces) recommends":["documenting"],"[PEP8](http://www.python.org/dev/peps/pep-0008/) recommends":["that","to"],"[PEP8](http://www.python.org/dev/peps/pep-0008/). For":["instance"],"[Python Guide":["-"],"[Python's standard":["library](http://docs.python.org)","library](http://docs.python.org)","library](http://docs.python.org)","library](http://docs.python.org)"],"[Single Responsibility":["Principle](http://c2.com/cgi/wiki?SingleResponsibilityPrinciple)","Principle](http://c2.com/cgi/wiki?SingleResponsibilityPrinciple)"],"[The Hitchhiker’s":["Guide","Guide"],"[The Naming":["of","of","of","of","of"],"[The Zen":["of"],"[Truth Value":["Testing](http://docs.python.org/2/library/stdtypes.html#truth-value-testing))."],"[Value Object](http://c2.com/cgi/wiki?ValueObject)":["with","with"],"[], and":["no"],"[`collections.Counter`](http://docs.python.org/3/library/collections.html#collections.Counter) (unless":["you"],"[`endswith()`](http://docs.python.org/2/library/stdtypes.html#str.endswith) test":["for"],"[`set`](http://docs.python.org/2/library/stdtypes.html#set) or":["`collections.Counter`"],"[a built-in":["function](http://docs.python.org/2/library/functions.html#input),"],"[a more":["spartan"],"[a relevant":["stackoverflow"],"[discussion on":["the"],"[docstring style](https://docs.djangoproject.com/en/1.5/internals/contributing/writing-code/coding-style/#python-style),":["but"],"[duck typing](https://en.wikipedia.org/wiki/Duck_typing).":[":-)"],"[expression evaluating":["to"],"[flake8](https://pypi.python.org/pypi/flake8) and":["it"],"[functional-HOWTO][1]. I":["don't"],"[http://docs.python.org/2/library/stdtypes.html#truth-value-testing](http://docs.python.org/2/library/stdtypes.html#truth-value-testing) and":["[str.isspace](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isspace)"],"[http://sideeffect.kr/popularconvention#python](Popular Coding":["Convention"],"[inherit from":["`object`](http://stackoverflow.com/a/54873/314685)","`object`](http://stackoverflow.com/a/54873/314685)"],"[inherited from":["`object`](http://stackoverflow.com/a/54873/314685)"],"[inheriting from":["`object`](http://stackoverflow.com/a/54873/314685)","`object`](http://stackoverflow.com/a/54873/314685)","`object`](http://stackoverflow.com/a/54873/314685)","`object`](http://stackoverflow.com/a/54873/314685)"],"[it's better](http://jaredgrubb.blogspot.co.il/2009/04/python-is-none-vs-none.html)":["to"],"[item for":["item"],"[link](http://exercism.io/submissions/52101ce59701fa85bd000026) for":["the"],"[my anagram](http://exercism.io/hostmaster/python/anagram).":["So"],"[new style":["classes](http://realmike.org/blog/2010/07/18/introduction-to-new-style-classes-in-python/)."],"[normalize_word(w) for":["w"],"[old-style classes":["and"],"[on the":["bugtracker](https://github.com/kytrinyx/exercism.io/issues)."],"[one](https://github.com/kytrinyx/exercism.io/blob/master/assignments/python/bob/example.py) provided":["as"],"[pyenv](http://github.com/yyuu/pyenv) to":["easily"],"[regex](https://pypi.python.org/pypi/regex) package":["which"],"[relevant stackoverflow":["question](http://stackoverflow.com/questions/5753597/is-it-pythonic-to-use-list-comprehensions-for-just-side-effects).)"],"[self documenting":["code](http://en.wikipedia.org/wiki/Self-documenting)."],"[self.verse(n) for":["n"],"[single responsibility":["principle](http://en.wikipedia.org/wiki/Single_responsibility_principle),"],"[single return":["statement](http://stackoverflow.com/questions/36707/should-a-function-have-only-one-return-statement),"],"[something a":["bit"],"[special methods](http://docs.python.org/2/reference/datamodel.html#special-method-names)":["(also"],"[str.endswith](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.endswith), [str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper)":["and","and","and","and"],"[str.isspace](http://docs.python.org/2/library/stdtypes.html?highlight=isspace#str.isspace) that":["could"],"[str.isspace](http://docs.python.org/2/library/stdtypes.html?highlight=isspace#str.isspace) to":["be","be","be","be"],"[str.isspace](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isspace) to":["simplify"],"[str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper) and":["[str.isspace](http://docs.python.org/2/library/stdtypes.html?highlight=isspace#str.isspace)","[str.isspace](http://docs.python.org/2/library/stdtypes.html?highlight=isspace#str.isspace)","[str.isspace](http://docs.python.org/2/library/stdtypes.html?highlight=isspace#str.isspace)","[str.isspace](http://docs.python.org/2/library/stdtypes.html?highlight=isspace#str.isspace)"],"[str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper) to":["check","check"],"[str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper). All":["you","you"],"[string methods]":["(http://docs.python.org/3/library/stdtypes.html#string-methods)"],"[string methods](http://docs.python.org/2/library/stdtypes.html#string-methods)":["like"],"[subclasing `object`](http://stackoverflow.com/a/54873/314685)":["(even"],"[subclassing from":["`object`](http://stackoverflow.com/a/54873/314685)","`object`](http://stackoverflow.com/a/54873/314685)","`object`](http://stackoverflow.com/a/54873/314685)","`object`](http://stackoverflow.com/a/54873/314685)"],"[this blog":["post](http://julien.danjou.info/blog/2013/guide-python-static-class-abstract-methods)."],"[this comment":["about","about"],"[this nitpick":["about"],"[this nitpick](http://exercism.io/submissions/520f71575bbbe84dc50001ed)":["on"],"[two blank":["lines](http://www.python.org/dev/peps/pep-0008/#blank-lines)"],"[understood](http://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references) that":["double"],"[version](http://exercism.io/anntzer/python/rna-transcription). It's":["another"],"\\__init__ or":["\\__name__"],"\\w find":["words"],"\\w regex":["like:"],"] solution":["is"],"_. I've":["also"],"_DONT_ need":["the"],"_ZERO_BOTTLES =":["("],"__Thanks to":["jbasalone.__"],"__all__ =":["[\"Bob\"]"],"__all__ limits":["the"],"__dict__ to":["see"],"__explicit else":["statement__."],"__init__ (I":["am"],"__init__ but":["people"],"__init__ function,":["per"],"__init__ method":["when"],"__init__ method.":["It"],"__init__ would":["make"],"__init__(self):pass? If":["so"],"__init__(self, actions,":["default):"],"__init__(self, predicate,":["answer):"],"__init__, of":["course)."],"__intention explaining":["helper"],"__is_empty(message):\" reveals":["that"],"__is_question and":["__is_shouting"],"__is_shouting methods":["entirely."],"__name__ ==":["...`?"],"__short__, have":["__intention"],"_accidentaly_ overridden.":["I"],"_actually_ written":["a"],"_ambiguous_ for":["determining"],"_and_ it":["doesn't"],"_clean_phrase to":["handle"],"_definitely_ don't":["think"],"_dna_strand privatish":["here?"],"_do_ need":["the"],"_easiest_ and":["efficient"],"_flake8_. I":["submitted"],"_if and":["when"],"_is_empty(): an":["empty"],"_is_shouting(): you":["should"],"_is_yell() should":["only"],"_is_yelling that":["simply"],"_message inside":["your"],"_message_is functions":["inside"],"_message_is_shouting, for":["example"],"_much_ smarter":["than"],"_need_ a":["domain"],"_neutral_response ```":["is"],"_no_ \"privacy\"":["in"],"_none_ of":["the"],"_normalize_ and":["_sanitize_"],"_not_ an":["\"anagram\""],"_not_ being":["factored"],"_number_last_part ```":["isn't"],"_otherwise_ return":["'Whatever')."],"_points ```":["each"],"_public_ attribute":["???"],"_really_ going":["to"],"_reduce_ readability":["and"],"_sanitize() :":["I"],"_sanitize_ are":["more"],"_silence is":["doing"],"_still_ flawed.":["Silence"],"_two_ methods":["with"],"_way_ over":["the"],"_word in":["split(r'\\W+',"],"_words ```":["method"],"` \"\"\"":["Converts`"],"` 'Woah,":["chill"],"` (it":["has"],"` and":["`"],"` isupper()`method.":["This"],"`!`s since":["it"],"`\" \"`,":["which"],"`\"\"\" Class":["`"],"`\"\"\"Sets the":["phrase\"\"\"`"],"`\"\"\"` of":["a"],"`\"\".join(list)` seems":["kinda"],"`\"\".join(map(...))` is":["reinventing"],"`\"\".join(map(...` is":["quite"],"`\"\"` and":["a"],"`\"(&%$(%\"` would":["be"],"`\"12345\"`, which":["is"],"`\"?\" =":["x`."],"`\"?\" ==":["x`"],"`\"?\"` to":["a"],"`\"A !":["123"],"`\"Fine. Be":["that","that"],"`\"Sure.\"`). There":["are"],"`\"Whatever.\"` case.":["It"],"`\"Whatever.\"`). The":["pythonic"],"`\"\\n\".join()` would":["suffice."],"`\"bottle(s) of":["beer\"`,","beer\"`)"],"`\"foo %(bar)s\"":["%"],"`\"foo\" %":["dict(bar=2)`"],"`\"separator\".join(strings)` is":["only"],"`\"some question":["here?"],"`\"something? \"`":["(though"],"`\"something? \"`?":["would"],"`#is_valid`, if":["you"],"`#replace` for":["this"],"`' foo":["'`),"],"`''.join()` and":["so"],"`''.join(...)` or":["`\"{}\".format(...)`"],"`''` when":["`self.sequence"],"`''`. Just":["use"],"`'A'` in":["``'A'"],"`'T'` is":["just"],"`'foo'`, not":["`u'foo'`)."],"`(\"ACGT\", \"ACGU\")`.":["If"],"`(is_default, \"Whatever\")":["as"],"`(predicate, response)`":["in"],"`(predicate, value)`":["pairs"],"`(x for":["x"],"`*args` when":["you"],"`+`). `_capitalize`":["is"],"`./bob.py` instead":["of"],"`.Hey()` should":["be"],"`._sanitize` a":["classmethod"],"`._standard_form()`. Can":["you"],"`.decode` is":["necessary."],"`.elements()` are":["removed"],"`.elements()` should":["not"],"`.endswith() and":[".isupper()`"],"`.endswith()` as":["proposed"],"`.endswith()` instead":["of","of","of","of","of","of"],"`.endswith()` is":["more"],"`.endswith()` string":["method,"],"`.endswith()` to":["check"],"`.endswith()` when":["checking"],"`.endswith` method":["which"],"`.format(n, n,":["n"],"`.hey()` ?":["Can"],"`.hey()`, which":["wouldn't"],"`.hey()`. Why":["not"],"`.hey` will":["break"],"`.is_shouted_at()`. That":["way"],"`.isspace()` in":["Python"],"`.isspace()`, you":["can"],"`.isspace`, which":["is"],"`.isupper()` ...":["but"],"`.isupper()` basically":["does"],"`.isupper()` can":["be"],"`.isupper()` is":["handy."],"`.isupper()` method":["=)","=)"],"`.isupper()` method.":["It"],"`.join(s for":["s"],"`.lower()` and":["two"],"`.lower()` to":["the"],"`.normalized()` ?":["And"],"`.number` a":["computed"],"`.number` and":["`.parts`"],"`.number` as":["a"],"`.parts` as":["public"],"`.raw` and":["`.standard_form`:"],"`.replace` with":["`.isspace`,"],"`.silent()` (which":["doesn't"],"`.sort`, all":["iterables"],"`.source` \"private\"":["or"],"`.split()` into":["normalize"],"`.standard_form`: No,":["they"],"`.strip()` in":["the"],"`.strip()` instead":["of"],"`.strip()` string":["method"],"`.strip` on":["a"],"`.super()`, and":["other"],"`.words()` now":["you"],"`0` as":["the"],"`0` be":["the"],"`0` is":["overly"],"`0`, which":["is"],"`0`. Thus,":["it"],"`;` is":["not"],"`== 11`":["in"],"`== None`,":["I"],"`==`, but":["I'm"],"`?!`... but":["neither"],"`?` it":["might"],"`@alexis` should":["deal"],"`@angelo` is":["for"],"`@anika` decorators;":["moves"],"`@constantin` method":["with"],"`@dixie` insted":["of"],"`@filiberto` decorator).":["Doing"],"`@garry` and":["`@garry`"],"`@garry` in":["[this"],"`@jabari` decorator,":["but"],"`@jairo` or":["`@jairo`."],"`@jairo`. (This":["sort"],"`@lucienne` decorator,":["since"],"`@margarita` could":["be"],"`@mohamed` to":["define"],"`@pamela` or":["`@pamela`."],"`ALL_UPPER` for":["(pseudo)"],"`ANSWERS.items()` returns":["a"],"`ANSWERS` tuple":["list"],"`ANSWERS` variable":["is"],"`A` -\u003e":["`U`","`U`"],"`ActionDispatcher`'s code)":["that"],"`Action` (or":["action-like)"],"`Anagram#_canonicalize` is":["O(n)"],"`Anagram('banana').match(['Banana'])`. Does":["it"],"`Anagram('tan').match('ant stand":["at'.split())`."],"`Anagram.alphagram`? For":["me"],"`Anagram.match()` argument":["is"],"`Anagram.match`, a":["list"],"`Anagram.word` as":["non-public"],"`Anagram.word` in":["each"],"`Anagram` a":["subclass"],"`Anagram` as":["you"],"`Anagram` can":["have"],"`Anagram` class":["API","is","is"],"`AttributeError`) if":["the"],"`BOB_VOCAB =":["...`"],"`Beer().sing(1, -10)`":["it"],"`Beer` class":["is"],"`Beer` class.":["These","So"],"`BlahResponder` subclass":["something"],"`Bob.Bob` on":["line"],"`Bob.Responses` are":["pairs"],"`Bob.Responses` should":["be"],"`Bob.__foo` instead":["of"],"`Bob.__replies` in":["`hey()`."],"`Bob._is_silence` etc,":["which"],"`Bob._is_yell`, because":["tests"],"`Bob._replies` in":["`hey()`?"],"`Bob._validate`? I":["don't"],"`Bob.check` method":["reminded"],"`Bob.hey()` a":["classmethod."],"`Bob.hey()` calls":["`NothingSpecial.handle()`"],"`Bob.hey()` is":["an"],"`Bob.hey()`. You":["know"],"`Bob.hey` argument":["doesn't","to"],"`Bob.hey` argument.":["Bob","`s`"],"`Bob.hey` arguments.":[":)"],"`Bob.hey` as":["Bob's"],"`Bob.hey` attribute":["to"],"`Bob.hey` because":["they","they"],"`Bob.hey` contains":["main"],"`Bob.hey` is":["responsible"],"`Bob.hey` method":["better","and","every","on"],"`Bob.hey` method.":["Good"],"`Bob.isEmpty`, I'd":["suggest"],"`Bob.isQuestion` and":["`Bob.isEmpty`,"],"`Bob.is_empty('Hello')` doesn't":["make"],"`Bob.is_shout` doesn't":["make"],"`Bob.is_yelling` makes":["it"],"`Bob.reaction_to`. Maybe":["`response_to`?"],"`Bob.responders` could":["be"],"`Bob.responses` (all":["lower)"],"`Bob.responses` as":["a"],"`Bob.vocab` looks":["like."],"`Bob` -instance":["to"],"`Bob` and":["extract"],"`Bob` because":["`Bob.is_shout`"],"`Bob` callable":["that"],"`Bob` class":["override","with","\u003e","here?","is","is"],"`Bob` class,":["or","self-documents,","it","because"],"`Bob` class.":["Currently"],"`Bob` exercise,":["but"],"`Bob` had":["to"],"`Bob` instance":["not"],"`Bob` instead":["of"],"`Bob` is":["dictated","unnecessary.","trying","very","a","used."],"`Bob` object":["shouldn't"],"`Bob` one":["that"],"`Bob` privates,":["there"],"`Bob` though":["I'm"],"`Bob` twice":["and"],"`Bob`'s responsability":["to"],"`Bob`, I":["prefer","moved"],"`Bob`, but":["I'd"],"`Bob`, maybe":["they"],"`Bob`, or":["the"],"`Bob`. Also,":["to"],"`Bob`. They":["should"],"`Bob`. You":["could"],"`C` -\u003e":["`G`","`G`"],"`CamelCase`, constants":["in"],"`Carl` could":["change"],"`Carl` idea,":["I"],"`Carl`'s case":["I'd"],"`Carl`, who":["responds","responds"],"`Counter()` object.":["I've"],"`Counter(iterable)` instead":[";)"],"`Counter(self._word) ==":["Counter(word)`"],"`Counter` -":["a","have"],"`Counter` --":["but"],"`Counter` also":["has"],"`Counter` by":["doing"],"`Counter` can":["be"],"`Counter` for":["`self.word`"],"`Counter` from":["`collections`.","`collections`","`collections`.","`collections`.","`collections`","`collections`.","http://docs.python.org/2/library/collections.html"],"`Counter` here":["to"],"`Counter` in":["`collections`."],"`Counter` instead":["of"],"`Counter` is":["considerably","a","perfect","pretty"],"`Counter` object":["from","returned"],"`Counter` or":["`sorted`"],"`Counter` returns":["a"],"`Counter` supports":["all"],"`Counter` to":["`dict`?"],"`Counter`, as":["I"],"`Counter`. Consider":["avoiding"],"`Counter`. I":["was"],"`Counter`. Should":["I"],"`Counter`: technically,":["`Counter`"],"`Counter`s constructor":["can"],"`DNA |":["RNA`."],"`DNA.__dict__`. Current":["access"],"`DNA.__init__` argument":["is"],"`DNA.__init__` argument?":["I"],"`DNA.__init__` method":["argument."],"`DNA._dna_str` as":["sequence"],"`DNA.count` is":["called."],"`DNA.dna` as":["non-public","non-public"],"`DNA.dna` could":["be","be"],"`DNA.nucleotides` as":["non-public"],"`DNA.sequence` as":["non-public?"],"`DNA.thymidine` to":["access,"],"`DNA.to_rna` it":["would"],"`DNA.to_rna` method.":["See"],"`DNA` (or":["multiple"],"`DNA` being":["the"],"`DNA` class":["but","and","public","and","could"],"`DNA` class,":["but","no","no"],"`DNA` instance":["could"],"`DNA`? That's":["a"],"`DefaultResponder` comes":["last."],"`Discussion.empty()` but":["assume"],"`Enum`. So":["my"],"`False` (see":["[Truth"],"`False` and":["others","if"],"`False` are":["covered"],"`False` explicitly.":["Why"],"`False` for":["`is_empty`."],"`False` if":["there"],"`False` in":["a"],"`False`, and":["on"],"`False`, as":["recommended"],"`False`, whenever":["you"],"`False`, you":["will"],"`False`. Another":["recommendation"],"`False`. Couldn't":["you"],"`False`. PEP8":["also"],"`False`. Then":["based"],"`Fine, be":["that","that"],"`Fine. Be":["that","that"],"`FormattedWord.__init__`, what's":["the"],"`FormattedWord._sorted` a":["string"],"`FormattedWord.is_anagram_of` taking":["a"],"`FormattedWord` as":["argument.","argument"],"`FormattedWord` subclass":["of"],"`G` -\u003e":["`C`","`C`"],"`IX=X-I`) work":["may"],"`IndexError` from":["running"],"`IsEmpty` can":["be"],"`IsSomething` functions":["you"],"`KeyError` here.":["Look"],"`KeyError`. So":["it's"],"`LOCALE` settings,":["so"],"`Language` class,":["is"],"`Line 10`":["@emmanuelle"],"`Line 13-20`":["I"],"`Line 16,":["17`"],"`Line 4`":["Is"],"`Line 8`":["why"],"`Maybe` types,":["but"],"`Message.__init__()` is":["at"],"`Message.__init__`, and":["you"],"`Message.content` is":["not"],"`Message.content` would":["be"],"`Message.content`? It's":["never"],"`Message.is_silent(msg)` is":["the"],"`MessageClassifier` for":["every"],"`MessageClassifier` wraps":["the"],"`Message` ?":["Why"],"`Message` class":["at","but"],"`Message` class,":["yes."],"`Message` inside":["`Bob`?"],"`MethodDispatcher` class":["?","makes"],"`MethodDispatcher` class:":["do"],"`NUCLEOTIDES`? Also,":["you"],"`None ==":["inputString`,"],"`NoneType` has":["no"],"`None` (and":["then"],"`None` (specifically)":["is"],"`None` (the":["object,"],"`None` ?":["(hint:"],"`None` and":["an","call","empty","blank","`False`"],"`None` as":["input","input","argument"],"`None` at":["the"],"`None` check":["in"],"`None` default":["value"],"`None` for":["the","each"],"`None` has":["no","absolutely"],"`None` if":["I","not"],"`None` in":["`Discussion.empty()`"],"`None` input?":["The"],"`None` instead":["of"],"`None` is":["equal","the","to","the","to","usually","idiomatically"],"`None` makes":["sense."],"`None` object.":["And"],"`None` or":["an","a","a","use","blank","empty.","any"],"`None` the":["condition"],"`None` up":["front."],"`None` value":["doesn't.","are"],"`None` value.":["When"],"`None` value?":["Try"],"`None` values":["as","from"],"`None` values.":["For"],"`None` with":["`is`"],"`None`) can":["be"],"`None`, but":["both"],"`None`, not":["'null'","to"],"`None`, the":["expression"],"`None`, you":["know"],"`None`. Also,":["a"],"`None`. An":["`__init__`"],"`None`. I":["*really*"],"`None`. So":["the"],"`None`. You":["could"],"`None`? Very":["cool."],"`None`? What":["is"],"`NothingSpecial.handle()` which":["calls"],"`NothingSpecial.handle(str)` is":["simpler"],"`Nucleotides` out":["of"],"`Person` and":["have"],"`Phrase.__init__` as":["you"],"`Phrase.__init__` because":["currently"],"`Phrase.__init__` you":["have"],"`Phrase.__init__`? Or":["you"],"`Phrase._normalize` could":["be"],"`Phrase._normalize` paid":["off"],"`Phrase.clean_phrase` because":["class"],"`Phrase.clean_phrase` does":["exactly"],"`Phrase.clean_phrase` it's":["more"],"`Phrase.get_words` name":["explains"],"`Phrase.phrase` attribute":["and"],"`Phrase.phrase` string":["to"],"`Phrase.rawinput` as":["a"],"`Phrase.rawinput`, which":["is"],"`Phrase.rex` ought":["to"],"`Phrase.strip_punctuation` on":["line"],"`Phrase.word_count()` results,":["you"],"`Phrase.word_count()` to":["return"],"`Phrase.word_count` a":["simple"],"`Phrase.word_count` looks":["a"],"`Phrase.word_count` method,":["though"],"`Phrase.word_count` seems":["to"],"`Phrase.word_count`, so":["other"],"`Phrase.wordcounter is":["None`."],"`Phrase.wordcounter` has":["no"],"`Phrase.words` is":["useless."],"`PhraseTest` as":["a"],"`PhraseTest` should":["know"],"`Phrase` class":["in"],"`Phrase` class,":["because"],"`Phrase` hashable":["or"],"`Phrase` instance,":["not"],"`Phrase` objects":["were"],"`Phrase` rather":["than"],"`Phrase` receives":["string,"],"`Phrase` which":["has"],"`RNA(self.replace(\"T\", \"U\"))`":["but"],"`RNA_LOOKUP` classvar":["should"],"`RNA` class,":["but"],"`RNA` subclass":["of"],"`Responder.__subclasses__()`, since":["the"],"`Responder`? In":["that"],"`Responses` dictionary.":["Then"],"`Statement.anything` and":["you"],"`Statement` and":["`Bob`"],"`Statement` you":["should"],"`String#translate`? Could":["simplify"],"`String.endswith()`? Will":["update"],"`Sure`. But":["then"],"`THYMADINE =":["\"T\"`,"],"`THYMIDINE =":["T`","'T'`,"],"`THYMIDINE` and":["`URACIL`"],"`THYMINE =":["'T'`,"],"`T` -\u003e":["`A`","`A`"],"`T` and":["`U`"],"`T` with":["`U`?"],"`True` as":["well."],"`True` avoiding":["type"],"`True` if":["there"],"`True` or":["`False`,","`False`","`False`.","`False`."],"`True` to":["return","`.hey`"],"`True` values,":["it's"],"`True`, which":["is"],"`UPPERCASE_WITH_UNDERSCORES` and":["just"],"`URACIL` for":["\"T\""],"`U` are":["magic"],"`U`? These":["are"],"`Utterance` is":["the"],"`VALID_RNA_NUCLEOTIDES` constant":["in"],"`ValueError` instead":["of"],"`WORDS_RE` would":["be"],"`WORDS` compiled":["regex"],"`Whatever.` case":["to"],"`Whatever` case.":["This"],"`Whatever` instead":["of"],"`Word.__init__`, no":["chance"],"`Word.is_anagram_of()`, the":["call"],"`Word.normalize` (it's":["a"],"`Word.normalized` ought":["to"],"`Word.original` and":["`Word.normalized`"],"`Word.raw` and":["`Word.standard_form`"],"`Word.really_raw` and":["`Word.string()`","`Word.string()`:"],"`Word.standard_form` really":["part"],"`Word.string()` for":["?"],"`Word.string()`: I":["though"],"`Word` class":["-","myself","with"],"`Word` class,":["why"],"`Word` instance":["?","(or","yet"],"`Word` instance,":["not"],"`Word` is":["as"],"`Word` or":["something"],"`Word`). You":["may"],"`YellAtMe.handle()` ..":["etcetc."],"`[-1]` to":["check"],"`[... range(start,":["end,"],"`[^0-9]` can":["be"],"`[^a-z0-9_\\n\\r\\t\\v]` but":["it"],"`[` and":["`]`","`]`."],"`\\D`. Other":["than"],"`\\W`. Also,":["`re.split`"],"`\\w+` instead":["of"],"`\\w+` pattern":["in"],"`\\w+` will":["cover"],"`]` (making":["it"],"`]`. (guess":["you"],"`^\\w` is":["the"],"`_RESPONSE`. `__...__`":["is"],"`__...__` is":["a"],"`__all__`. Other":["than"],"`__class__` accesses":["class"],"`__class__` to":["access"],"`__double_underscore` names":["is"],"`__eq__`) should":["both"],"`__field_name` –":["for"],"`__foo` is":["a"],"`__foo`. (Same":["with"],"`__init__(self)` is":["not"],"`__init__` as":["just"],"`__init__` constructor":["for"],"`__init__` if":["you"],"`__init__` instead":["of"],"`__init__` is":["superfluous","just","perfectly","totally","not"],"`__init__` method":["here:",":-)"],"`__init__` method,":["but"],"`__init__` methods":["argument"],"`__init__` should":["never"],"`__init__` since":["you"],"`__init__` to":["check","be"],"`__init__`). Alternatively":["to"],"`__init__`, having":["to"],"`__init__`, you":["won't"],"`__init__`. It":["looks"],"`__init__`. It's":["unnecessary"],"`__init__`? Will":["it"],"`__init__`? `word_count`":["method"],"`__magic__` names":["(two"],"`__main__` check":["does"],"`__name__ ==":["\"__main__\"`"],"`__new__` (or":["`__init__`"],"`__query` instead":["of","of"],"`__repr__` and":["all."],"`__responses` is":["static"],"`_` as":["a"],"`_` to":["indicate"],"`_action`, `_bottles`":["and"],"`_alphagram`. Didn't":["know"],"`_blank` method,":["but"],"`_bottles` and":["`_next_of`"],"`_capitalize` is":["an"],"`_check*` methods":["you"],"`_checkForNoContent` works":["fine"],"`_clean_phrase` a":["bit."],"`_clean` in":["the"],"`_counter`? Wouldn't":["it"],"`_field_name` is":["for"],"`_is_shouting` and":["`is_asking_politely`"],"`_is_shouting` gives":["a"],"`_is_shouting` in":["this"],"`_is_shouting` method.":["Because"],"`_is_silence`'s declaration":["is"],"`_is_silent`, `_is_shouting`":["and"],"`_isyelling(text)` is":["doing:"],"`_isyelling`, to":["emphasize"],"`_lower` since":["it's"],"`_match_word` instead":["of"],"`_multiple_bottles` as":["a"],"`_next_of` doesn't":["deal"],"`_next_verse` behave":["correctly"],"`_normalize_silence` as":["method."],"`_nucleotide_sequence`. Currently":["it"],"`_nucleotide_sequence`? It":["does"],"`_phrase` to":["denote"],"`_query` (with":["one"],"`_raw` to":["`Counter`"],"`_replies` becomes":["an"],"`_replies` is":["still"],"`_replies` pseudo-dict":["looks"],"`_responses`) and":["make"],"`_s` to":["indicate"],"`_sanitize()` but":["going"],"`_sequence` *only*":["inside"],"`_sequence` outside":["of"],"`_silence()` seems":["rather"],"`_standard_form` is":["an"],"`_standardized` renamed":["as"],"`_str`, as":["imho"],"`_ucfirst` and":["used"],"`_ucfirst` can":["be"],"`_wc` nor":["`l`"],"`_word_to_sorted_list`: \"alphagram\"":["-"],"`_words` should":["be"],"``'A' in":["dna``)."],"``'GG' in":["dna``)."],"``'GG'`` in":["``'GG'"],"``'T'`` and":["``'U'``"],"``'U'`` means":["here."],"``DNA.__containts__(nucleotides)``, the":["``nucleotides``"],"``DNA`` class":["can","more","provides","behave"],"``DNA`` object":["will"],"``DNA``'s base":["class"],"``__init__()`` is":["misleading."],"``` Anagram":["```,"],"``` Bob":["```"],"``` FormattedWord":["```","```","```","```","```"],"``` Message":["```","```","```,"],"``` MethodDispatcher":["```","```.","```"],"``` None":["```.","```."],"``` String":["```"],"``` _neutral_response":["```"],"``` _number_last_part":["```"],"``` _points":["```"],"``` _words":["```"],"``` and":["the"],"``` ans":["I"],"``` argument,":["where"],"``` argument.":["To"],"``` at":["the"],"``` class":["to"],"``` class,":["which"],"``` clause":["is","and"],"``` could":["be"],"``` counter.Counter(self._words())":["```"],"``` dict.get":["```"],"``` dispatch":["```"],"``` doesn't":["look","have"],"``` each":["time"],"``` else":["```","```"],"``` endswith":["```,"],"``` final_response":["```"],"``` hey":["```"],"``` implementation":["-"],"``` is":["simplified","not","indeed","not","a","a","much","a","indeed","redundant.","called."],"``` is_anagram_of":["```","```"],"``` is_silent":["```"],"``` isn't":["the"],"``` message":["```"],"``` method":["to","is"],"``` method,":["so"],"``` nucleotide_counts":["```."],"``` provides":["the"],"``` responses":["```"],"``` return":["MethodDispatcher(self._responses(message),"],"``` score":["```"],"``` should":["take"],"``` something":["```"],"``` something.strip()[-1]":["=="],"``` str()":["```"],"``` strip":["```"],"``` test_forceful_questions":["```,"],"``` text":["```"],"``` two":["times,"],"``` would":["be"],"```# Would":["it"],"```# of":["sequence.replace?```"],"```'' is":["None```"],"```, but":["the","would"],"```, it":["doesn't"],"```, where":["the"],"```, you":["can"],"```. Also,":["```"],"```. But":["there"],"```. I'm":["really"],"```.isupper()```, but":["I"],"```.strip()```, you":["make"],"```?``` or":["```123```"],"```AttributeError``` will":["be"],"```False```, so":["```len(string.strip())"],"```None``` possibility":["often"],"```REPLIES``` a":["dict?"],"```REPLIES```, and":["on"],"```\\w``` includes":["underscores,","underscores,"],"```^.*\\?$``` is":["identical"],"```_extract_words()``` instead":["of"],"````None```` is":["basically"],"````nil```` in":["Ruby"],"````statement```` isn't":["None"],"```and```s and":["```or```s"],"```answer =":["\"\"```,"],"```base_chars =":["sorted(self.base_word)```"],"```bob.hey(5)```, an":["```AttributeError```"],"```check_upper``` could":["have"],"```class DNA(object)```":["in"],"```contains_alphas``` without":["using"],"```elif``` nesting":["in"],"```endswith()``` too":["while"],"```getaddr``` is":["fairly"],"```greeting or":["\"\"```"],"```greeting.upper() ==":["greeting```"],"```greeting```. If":["a"],"```hey``` as":["an"],"```hey``` because":["each"],"```hey``` method,":["but"],"```if /":["elif"],"```if input":["is"],"```if not":["text```,","string```"],"```if x":["="],"```if``` block":["returns"],"```if``` statements":["were"],"```input_string``` for":["```hey```"],"```isupper()``` method":["that"],"```len(string.strip()) ==":["0```"],"```len(text) ==":["0```?"],"```los``` stands":["for"],"```lower(), upper(),":["strip(),"],"```map``` in":["```word_count```"],"```message.strip() ==":["''```"],"```not text```":["intuitively"],"```nucleotide_count``` method,":["because"],"```object``` in":["Python2.x"],"```object```, you":["may"],"```or```s in":["the"],"```re.split``` to":["filter"],"```replace``` instead":["of"],"```return (_word":["for"],"```return dict(self.REPLIES).get(reply_type,":["'Whatever.')```"],"```return``` statement":["should"],"```s.endswith('?')``` might":["be"],"```s[-1] ==":["'?'```"],"```sanitize``` could":["be"],"```self.phrase```. But":["then"],"```sequence``` variable":["has"],"```string ==":["\"\"```"],"```string```, which":["is"],"```strip()``` just":["once"],"```try-except``` trick":["for"],"```word_count``` to":["create"],"```words``` definition,":["which"],"``answer`` (or":["the"],"``answer``) because":["the"],"``hey`` available":["(by"],"``hey`` is":["not"],"``hey``. ``hey``":["is"],"``is_interrogative()``, and":["``is_silent()``"],"``is_interrogative``, and":["``is_silent``)"],"``is_shouting()``, ``is_interrogative()``,":["and"],"``is_silent()`` as":["its"],"``is_silent``) plain":["functions,"],"``list.__contains__(nucleotide)`` returns":["exactly"],"``list.__contains__`` does":["not"],"``list``. I":["tried"],"``list``. ``list.__contains__(nucleotide)``":["returns"],"``nucleotides`` parameter":["should","is"],"``nucleotides`` sequence":["and"],"``number`` as":["well"],"``number`` into":["a"],"``number`` were":["not"],"``number`` would":["be"],"``p.area_code()`` would":["return"],"``sentence.py``) with":["``is_shouting()``,"],"``str`` turns":["out"],"``super()`` allows":["us"],"`a !=":["b`"],"`a =":["None"],"`all(char.isupper() for":["char"],"`all` existed":[":)"],"`alphagram` a":["static","plain"],"`alphagram` function":["where"],"`alphagram` in":["the"],"`alphagram` just":["being"],"`anagram_candidates` could":["be"],"`anagram_instance.source` to":["be"],"`anagram` namespace":["because"],"`and`. You":["don't"],"`answer =":["''`"],"`any()` clause":["of"],"`any(is_yelled(...) ...)`":["is"],"`anything_else` branches":["would"],"`area_code` and":["`pretty`","`pretty`"],"`asking` methods,":["why"],"`base_word` in":["chars"],"`base_word` once":["and"],"`basestring` prevents":["other"],"`basestring` to":["handle"],"`bob` and":["main"],"`bob` module":["and"],"`bob`) differently":["than"],"`bottle_count` where":["I"],"`break` statement":["and"],"`cache_result` decorator's":["implementation"],"`cache_result` function)":["has"],"`candidate` in":["the","the"],"`candidates` (yes":["I'm"],"`capitalize` is":["not"],"`chain` on":["class"],"`char =":["words.pop()`"],"`char` method":["-"],"`char` to":["`word`"],"`char` type":["in"],"`checkend` still":["does"],"`class Bob()`":["--"],"`class Bob(object)`":[":D","instead"],"`class Bob(object)`.":["In"],"`class Phone(object):`":["syntax,"],"`class` isn't":["necessary."],"`class` statement":["(which"],"`classmethod` as":["it"],"`classmethod`) as":["first"],"`classmethod`) is":["to"],"`classmethod`s used":["like"],"`clean_number` to":["make"],"`clean_number`. That":["way"],"`clean_phrase` function":["is"],"`clean_phrase` method":["to"],"`clean_words`, `do_word_count`":["and"],"`cls._replies` if":["you"],"`cls` for":["a"],"`cls` where":["it"],"`cmp` -":["just"],"`collection.Counter` or":["a"],"`collections.Count` and":["thus"],"`collections.Counter` -":["nice."],"`collections.Counter` I":["guess"],"`collections.Counter` and":["test","*list"],"`collections.Counter` as":["you","`_anagram_hash`?"],"`collections.Counter` class":["is","for","(`collections`"],"`collections.Counter` class,":["that"],"`collections.Counter` help":["simplify"],"`collections.Counter` here":[":)","to"],"`collections.Counter` in":["the"],"`collections.Counter` instead":["of"],"`collections.Counter` library...":["batteries"],"`collections.Counter` might":["have"],"`collections.Counter` to":["`dict`?","`dict`"],"`collections.Counter`! I":["had"],"`collections.Counter`) is":["a"],"`collections.Counter`, and":["I"],"`collections.Counter`, because":["standard"],"`collections.Counter`. Just":["a"],"`collections.Counter`. This":["class"],"`collections.Counter`. Though,":["it"],"`collections.defaultdict(set)` for":["the"],"`collections.defaultdict` for":["a"],"`collections.defaultdict` is":["a"],"`collections.defaultdict` or":["even"],"`collections` and":["think"],"`collections` for":["further","the"],"`collections` module":["did","has","to","for"],"`collections` module,":["you"],"`collections` standards":["library"],"`collections` that":["might"],"`collections` would":["be"],"`cond` (and":["similar"],"`contains_alphas` more":["readily"],"`content` isn't":["just"],"`continue`, it":["is"],"`converse is":["''`"],"`converse.endswith(\"?\")` instead":["of"],"`converse.isspace()`, so":["you"],"`converse[-1] ==":["\"?\"`"],"`count_phrase =":["count_phrase.translate(None,"],"`count` and":["`nucleotide_counts`"],"`count` method,":["and"],"`counter`, which":["I"],"`couplet` class":["is"],"`d[word] +=":["1`,"],"`data.isupper()` to":["check"],"`data` isn't":["better"],"`decode` is":["to"],"`def foo(param1,":["param2=\"abc\"):`."],"`def hey(self,":["message)`"],"`def is_empty(s):":["return"],"`def is_question(message):":["return"],"`defaultdict(int)` instead":["of"],"`defaultdict` method.":["In"],"`defaultdict` works":["just"],"`del self.words['']`":["in"],"`del` is":["a"],"`del` statement":["is"],"`deletechars`, so":["in"],"`dict((rna, dna)":["for"],"`dict()` are":["technically"],"`dict.get()`, note":["that"],"`dict.get(key[, default])`":["?"],"`dict.items()` to":["avoid"],"`dict` and":["you're"],"`dict` as":["well","`Counter`"],"`dict` because":["I"],"`dict` calls":["are"],"`dict` lookup)":["but"],"`dict` of":["the"],"`dict`, as":["indexing"],"`dict`, calling":["`ANSWERS.items()`"],"`dict`, so":["I"],"`dict`. Also,":["so"],"`differences` method":["was"],"`digits` as":["an"],"`dir` outputs":["only"],"`dirtyInput` is":["both"],"`dirtyinput` is":["a"],"`dispatch(self, num)`":["which"],"`dispatch` function":["is"],"`dna.DNA('P')`) and":["a"],"`dna.THYMIDINE`, `dna.URACIL`":["etc."],"`dna_str`. This":["idea","idea"],"`dna_string` and":["`rna_string`"],"`dna_string` or":["something."],"`dna_to_rna` since":["it's"],"`dna` data":["attribute"],"`dna` instance":["attribute"],"`dna` to":["just"],"`do_word_count` and":["`word_count`."],"`elif ...==2`":["and"],"`elif not":["s.strip()`."],"`elif text.endswith('?')`":["is"],"`elif/else` -":["is"],"`elif/else` statements":["as","when","when","as"],"`elif` (else":["if)."],"`elif` (or":["`else`)"],"`elif` a":["bit"],"`elif` and":["`else`","final"],"`elif` is":["not","useless"],"`elif` nor":["`else`."],"`elif` or":["`else`"],"`elif` since":["each"],"`elif` statements":["as","as","could"],"`elif` structure":["too"],"`elif`. It":["might"],"`elif`. Similarly,":["you"],"`elif`/`else` in":["`hey`"],"`elif`/`else` makes":["it"],"`elif`s are":["rather","redundant","redundant","redundant"],"`elif`s matching":["either"],"`elif`s) by":["returning"],"`else:`. Could":["it"],"`else` as":["they"],"`else` at":["all."],"`else` branch":["and"],"`else` branch,":["it"],"`else` clause":["nor","for"],"`else` clauses":["too"],"`else` for":["normal"],"`else` in":["the"],"`else` is":["correct,"],"`else` statement":["as","have","have","to","to","because","usage","(when"],"`else` statement,":["because"],"`else` statements":["as","and","everywhere","everywhere","everywhere"],"`else` to":["handle"],"`else`) after":["a"],"`else`), because":["you"],"`else`). So":["you","you","you","you"],"`else`. Since":["we're"],"`else`/`elif`? I":["prefer"],"`else`s or":["`elif`s"],"`end_verse` and":["reassigning"],"`endsWith` method":["as"],"`endswith()` -":["this"],"`endswith()` They":["would"],"`endswith()` and":["`isupper()`,"],"`endswith()` methods":["of"],"`endswith()`, it":["is"],"`endswith` in":["your"],"`endswith` is":["often","nicer"],"`endswith` method":["which","of","for"],"`endswith` methods":["on"],"`endswith`, and":["`isspace`."],"`endswith`, since":["it"],"`endswith`. Will":["update"],"`except:`, always":["supply"],"`exercism fetch`":["is"],"`existing_robots` is":["updated","a"],"`expression`, because":["they"],"`filter()` ?":["Wouldn't"],"`filter()` or":["(b)","list","list","list"],"`filter()`. Lambdas":["are"],"`filter(None, iterable)`":["does."],"`filter(None..` and":["use"],"`filter(fn, xs)`":["is"],"`filter` being":["used,"],"`filter` is":["a"],"`filter` might":["be"],"`filter` takes":["you"],"`filter` when":["others"],"`filter` you":["could"],"`filter`, but":["in"],"`filter`, though":["I"],"`filter`. One":["way"],"`filter`? Or":["even"],"`findall` and":["don't"],"`findall` regexp":["function!"],"`findall` version":["took"],"`findall` with":["`Counter`"],"`findall`, which":["is"],"`finditer` now,":["I"],"`finditer` version":["ran"],"`foo(bar=baaz)`, not":["foo(bar"],"`for test,":["response"],"`for word":["in"],"`for` cycle":["and","can"],"`for` loop":["line","has","is","is","has","?"],"`for` loop's":["`else`"],"`format` method":["is"],"`formulate_prioritised_reply()` from":["`hey()`"],"`frequencies` (http://clojuredocs.org/clojure_core/clojure.core/frequencies)":["but"],"`from ...":["import"],"`from collections":["import"],"`from string":["import"],"`from_rna` which":["converts"],"`functools` so":["it"],"`funtools` and":["`itertools`"],"`get_words()`, but":["earlier"],"`get_words` by":["aliasing"],"`getattr` and":["naming"],"`getattr` here":["for"],"`getattr` lookup":["to"],"`getattr` syntax":["is"],"`greeting` instance":["directly"],"`greeting` to":["every"],"`greeting` with":["simple"],"`hamming_distance` to":["a"],"`has_anagram` should":["really"],"`has_lower_case_chars`, you":["really"],"`help(alphagram)`), whereas":["if"],"`help(instance_or_type_or_module)` in":["your"],"`help(str)` to":["find"],"`help(str)` will":["tell"],"`hey()` ?":["(hint"],"`hey()` a":["`classmethod`)"],"`hey()` doesn't":["need"],"`hey()` method":["runs.","is","mention"],"`hey()` might":["be"],"`hey()` of":["course"],"`hey()` to":["assume"],"`hey()`) are":["really"],"`hey()`. Could":["you","you"],"`hey()`. From":["the"],"`hey()`. None":["of"],"`hey()`? Some":["possible"],"`hey_message()` when":["you"],"`hey` also":["have"],"`hey` are":["redundant"],"`hey` function":["body"],"`hey` function?":["Just"],"`hey` is":["a","appropriate"],"`hey` method":["a","is","probably","will","was","with"],"`hey` to":["separate"],"`hey` with":["a"],"`hey`, you":["can"],"`hey`-function could":["do"],"`hey`. Makes":["the"],"`i =":["0`?"],"`i is":["None"],"`i`, for":["the"],"`if (cond):`":["with"],"`if ...":["and","elif","elif","elif","elif"],"`if :":["return"],"`if __name__":["=="],"`if cond`":["--"],"`if converse":["is"],"`if input":["is"],"`if len(message)":["=="],"`if len(sentence)":["=="],"`if len(somestring)":["\u003e"],"`if len(str.strip())":["=="],"`if lword":["in"],"`if message.is_something():":["return"],"`if n":["not"],"`if not":["message:`","sentence`","question`.","input_string`","speech`","wordcounter:","word:","xxx","somestr:`.","message`?","self.sequence:","message:`,","key`","str.strip():`","str.strip()`"],"`if not`":["is"],"`if phrase:`":["statement"],"`if predicate":["return"],"`if predicate():":["return","return"],"`if predicate:":["return"],"`if s.isupper():`":["is"],"`if s.strip():`":["because"],"`if s:`":["feels"],"`if self._checkForNoContent(message)`":["without"],"`if self.sequence`":["only","evaluates"],"`if sentence":["=="],"`if somestring:`.":["BUT"],"`if statement":["=="],"`if talker_is_shouting(message):":["...`"],"`if text":["is","!="],"`if word":["in"],"`if x":["is"],"`if x`,":["so"],"`if xxx":["not"],"`if(re.search(r\"[A-Z]\",str) and":["re.search(r\"[a-z]\",str)","not"],"`if(str.strip() ==":["'')`"],"`if..elif..` blocks":["with"],"`if..elif` caseish":["statement"],"`if..elif` construct":["was"],"`if..else` blocks,":["it"],"`if_anagram` IMHO.":["And"],"`if` and":["`return`"],"`if` as":["it"],"`if` blocks":["formatting"],"`if` chaining":["give"],"`if` clause":["on"],"`if` clauses":["instead"],"`if` conditional":["and"],"`if` doesn't":["require"],"`if` in":["my"],"`if` instead":["of","of"],"`if` is":["a"],"`if` statement":["and","using","check","formatting","in","in","check","on","would"],"`if` statements":["since","are","need","nesting"],"`if` statements,":["they"],"`if` structure,":["but"],"`if` there":["always","always","always","always","always"],"`if` to":["test","test"],"`if` will":["work"],"`if`s are":["sufficient."],"`if`s instead":["of"],"`if`s should":["be"],"`if`s. It":["wouldn't"],"`if`to decide":["which"],"`import dna`":["and"],"`import re`":["isn't","as"],"`import string`":["doing","is"],"`in` keyword":["would"],"`inp` is":["not"],"`input()` in":["this"],"`input.endswith'('?')` vs":["`input[-1]=='?'`"],"`input.endswith(x)` is":["preferred"],"`input.isupper()` attempting":["to"],"`input.isupper()` instead":["was"],"`input.isupper()` is":["attempting"],"`input.isupper()` twice.":["Could"],"`input.isupper()` vs":["`input==input.upper()`"],"`inputString is":["None`"],"`input[-1] ==":["x`."],"`input[-1]`. Even":["better"],"`input[len(input)-1:]` could":["be"],"`input_string` is":["`None`"],"`input` is":["not","a","a","not"],"`input` seems":["to"],"`input` to":["avoid"],"`int()` and":["you"],"`int` avoids":["a"],"`int` function.":["Try"],"`interpret_query` being":["an"],"`intertools.ifilter` is":["changed"],"`ipt` and":["is"],"`isAllCaps`, `return":["True"],"`isBlank` simpler":[":-)."],"`isEmpty` and":["`isQuestion`"],"`isEmpty` as":["`Bob.isQuestion`"],"`isEmpty`, `isQuestion`,":["`isShooting`"],"`isQuestion` and":["`isEmpty`"],"`isQuestion` but":["no"],"`isQuestion`, `isShooting`":["methods"],"`isQuestion`, there's":["actually"],"`isShooting` methods":["should"],"`isShouting()`, you":["can"],"`isSilence` would":["actually"],"`isYelling` method":["would"],"`is_*` methods":["on"],"`is_...` methods":["under"],"`is_aggressive` or":["`is_question`"],"`is_anagram_of()` raise":["a"],"`is_anagram_of(other_word)` method":["?"],"`is_anagram_of` becomes":["a"],"`is_anagram_of` should":["take"],"`is_anagram_of`. It's":["not"],"`is_anagram` (and":["`is_same`"],"`is_anagram` function.":["Then,"],"`is_anagram` is":["called."],"`is_asking_politely` conditions":["mutually"],"`is_default()` predicate":["that"],"`is_empty` could":["be"],"`is_empty`, `is_interrogative`":["and"],"`is_empty`. You":["can"],"`is_empty`? What's":["the"],"`is_exclamatory` are":["not"],"`is_interrogative` and":["`is_exclamatory`"],"`is_only_numbers` thanks":["to"],"`is_query` is":["unnecessary."],"`is_question()`, to":["make"],"`is_question` ?":["If"],"`is_question` and":["`is_shouting`?"],"`is_question` but":["not"],"`is_question` does":["not"],"`is_question` method.":["For"],"`is_question` on":["the","an"],"`is_question` or":["`is_silence`?"],"`is_question` quite":["simple."],"`is_question` takes":["precedence"],"`is_question`? Also,":["don't"],"`is_quiet` check":["the"],"`is_same` -":["which"],"`is_scream(text)`-like thing.":["Did"],"`is_shooting` and":["`is_question`"],"`is_shout()` first":["to"],"`is_shout()`, and":["`is_silence()`"],"`is_shout`, `is_silent`,":["etc."],"`is_shouting` clearer,":["have"],"`is_shouting` very":["simple."],"`is_shouting` would":["require"],"`is_shouting` you":["could"],"`is_shut_up` are":["unnecessary."],"`is_silence()` could":["be"],"`is_silence` above":["`is_shouting`"],"`is_silence` and":["`message`"],"`is_silence` are":["implemented"],"`is_silence` instead":["of"],"`is_silence`, have":["you"],"`is_silence`? That":["would"],"`is_silent` function":["to"],"`is_silent` in":["`is_shooting`"],"`is_silent` so":["that"],"`is_silent`, etc.":["all"],"`is_silent`? And":["what"],"`is_silent`? If":["you"],"`is_upper()` is":["more"],"`is_upper` and":["`contains_alphas`"],"`is_upper`. Probably":["the"],"`is_valid` does":["not"],"`is_valid` will":["short-circuit"],"`is_yell` check":["in"],"`is_yelld` or":["`is_silence`"],"`is_yelled` though":["I"],"`is` (identity":["operator)."],"`is` operator":["to"],"`is` rather":["than"],"`is` should":["be"],"`is` statement":["to"],"`is`, but":["maybe"],"`is`. Also,":["an"],"`isalnum` method":["of"],"`isalpha` -":["you"],"`isinstance()` instead,":["or,"],"`isinstance` in":["conjunction"],"`isinstance` may":["do"],"`isquiet()` already":["tells"],"`isshouting` et.":["al."],"`isspace` and":["`isupper`."],"`isspace` but":["`strip`"],"`isspace` instead":["of"],"`isspace` method,":["instead"],"`isspace` too,":["but"],"`isspace`, I'd":["have"],"`isupper()` =)":["for"],"`isupper()` I":["think"],"`isupper()` a":["little"],"`isupper()` and":["`endswith()`","`endswith()`"],"`isupper()` are":["super-explicit"],"`isupper()` function":["has"],"`isupper()` has":["a"],"`isupper()` in":["Python"],"`isupper()` method":["on"],"`isupper()` method,":["amazingly"],"`isupper()` method;":["thanks"],"`isupper()` string":["method"],"`isupper()` would":["handle"],"`isupper()`, it":["appears"],"`isupper()`, which":["both"],"`isupper/0, endswith/1,":["isspace/0`"],"`isupper` I":["can't"],"`isupper` and":["`endswith`","Pythons","`endswith`"],"`isupper` is":["much","a","robust"],"`isupper` method":["in"],"`isupper` on":["`None`"],"`isupper` to":["further","see"],"`isupper` would":["return"],"`isupper`). A":["well-written"],"`isupper`, I":["was"],"`isupper`, `endswith`,":["and"],"`isupper`. Thanks!":["I'll"],"`itertools.count` expresses":["the"],"`itertools.izip` instead":["of"],"`itertools` modules":["because"],"`join()` to":["get"],"`join` call":["on"],"`join` just":["glues"],"`joke`, `riddle`.":["But"],"`key ==":["\"\"`"],"`key in":["dict`"],"`key not":["in"],"`l` (lower-case":["'L')"],"`latin-1`, before":["then"],"`len()` here":["instead"],"`len(letters) \u003e":["0`"],"`len(message) ==":["0"],"`len(message.strip() ==":["0`"],"`len(message.strip()) ==":["0`"],"`len(newnumber) ==":["10`"],"`len(phrase) ==":["0`","0`"],"`len(sentence.strip()) ==":["0`"],"`len` instead":["of"],"`len` is":["more"],"`len` on":["strings"],"`len` with":["list"],"`len` works":["just"],"`letters.lower()` call":["?"],"`line 13`":["when"],"`line 1`":["you"],"`line 4`":["is"],"`line 5`":["what"],"`line 6,":["9`,"],"`line 7`":["it's"],"`line 8-9`":["in"],"`list()` and":["`.elements()`"],"`list()` in":["sorted()"],"`list` of":["it"],"`list` to":["pass"],"`los` stands":["for?"],"`lower()` and":["`Counter`)"],"`lower()` on":["`self.sentence`"],"`lower` call":["and"],"`lower` computed":["twice"],"`lower` method":["already"],"`lower` on":["the"],"`lowercase_with_underscores`. Sticking":["to"],"`main()` would":["include"],"`maketrans` It":["should"],"`maketrans` and":["`translate`"],"`maketrans` from":["`string`,"],"`maketrans` solution":["isn't"],"`map` and":["`filter`,"],"`map` to":["gain"],"`map` work.":["But"],"`map`) or":["just"],"`match` (hint:":["list"],"`match` could":["be"],"`match` function":["is"],"`match` function.":["I"],"`match` is":["quite"],"`match`, would":["a"],"`match`, you":["don't"],"`match`? Even":["if"],"`matches.append`. See":["[Loop"],"`message ==":["None`,","None`.","None","None`","\"\""],"`message is":["falsy`","None`","None`","True`.","True`"],"`message.endswith(\"?\")` would":["be"],"`message.isspace()`, which":["is"],"`message.isupper()` method":["is"],"`message.split()` (hey,":["this"],"`message.strip()` in":["the"],"`message.strip()` might":["be"],"`message_` prefix":["justifies"],"`message_is_*()` methods":["is"],"`message_is_empty` are":["unnecessary."],"`message` as":["a"],"`message` etc.":["are"],"`message` for":["fitting"],"`message` if":["it's"],"`message` in":["`Phrase.__init__`"],"`message` is":["`None`.","either","`None`.","`None`."],"`message` isn't":["a"],"`message` to":["each"],"`message` was":["`None`"],"`message` will":["be"],"`most_common` make":["this"],"`msg ==":["None`"],"`msg is":["None`","None`."],"`msg.is_silent()`. In":["this"],"`msg.isspace()` instead":["of"],"`msg` instead":["of"],"`msg` is":["always","`None`"],"`msg` or":["`expression`,"],"`msg` was":["always"],"`msg`, `greeting`,":["etc."],"`n=0` and":["`n\u003e=1`."],"`nbottles()` after":["`ngettext()`."],"`new_phrase =":["self.phrase.translate(None,"],"`next` to":["skip"],"`nil` in":["Ruby)."],"`no_input` and":["`uppercase`"],"`normalize()` can":["be"],"`normalize(word)`, when":["you"],"`normalize_word` a":["method"],"`normalize` is":["more","to"],"`normalized_word in":["word_counter`"],"`normalized_words =":["[normalize_word(w)"],"`normalized_words` might":["be"],"`normalized` which":["could"],"`not input":["or"],"`not inputString`,":["according"],"`not len(text)`":["in"],"`not message":["or"],"`not message`":["will","could","is","would","would"],"`not msg`":["to"],"`not phrase":["is"],"`not phrase`":["instead"],"`not s`":["instead"],"`not said`":["might"],"`not saying":["anything`"],"`not self._raw":["=="],"`not self.phrase`":["part"],"`not self.string":["or"],"`not something.strip()`":["a"],"`not statement`":["instead"],"`not text`":["is","instead"],"`not word`":["check"],"`not words":["or"],"`not` instead":["of"],"`nothing()` functions":["here"],"`nucleic_acids` or":["something"],"`nucleotide_counts` and":["that"],"`nucleotide_counts` just":["be"],"`nucleotide_counts` method.":["I"],"`nucleotide_counts` to":["use"],"`nucleotide_sequence` as":["internal"],"`nucleotides_seq` or":["`dna_str`.","`dna_str`."],"`nucleotides` etc,":["and"],"`nucleotides` is":["very"],"`nucleotides` without":["`_str`,"],"`num` would":["also"],"`number` field":["comes"],"`number` is":["a"],"`object` ([even":["in"],"`object` (hysterical":["raisins,"],"`object` (look":["for"],"`object` (read":["about"],"`object` and":["point"],"`object` as":["it's"],"`object` because":["it","it"],"`object` in":["`line"],"`object` on":["`line"],"`object` or":["another"],"`object` to":["have","have"],"`object`, and":["why"],"`object`. Hence":["line"],"`object`. More":["about","on","on","on","on","on","on","on","on","on","on"],"`object`. Research":["on"],"`object`. See:":["http://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python"],"`object`. Short":["explanation"],"`object`. That":["makes"],"`object`. `nucleotides`":["is"],"`object`](http://stackoverflow.com/a/54873/314685) (even":["in","in","in","in","in","in","in","in"],"`object`](http://stackoverflow.com/a/54873/314685) because":["it"],"`object`](http://stackoverflow.com/a/54873/314685) is":["recommended","recommended","recommended"],"`one_bottle`, `two_bottles`":["and"],"`or` to":["default"],"`order`, `joke`,":["`riddle`."],"`original` might":["not"],"`other` is":["not"],"`pass` instead.":["I"],"`pass` or":["removed"],"`pass`. --":["normally"],"`pep8` cli":["utility"],"`pep8` on":["your"],"`pep8` told":["me"],"`phrase is":["None`,","not","/"],"`phrase.isupper()` attempting":["to"],"`phrase.isupper()` instead":["was"],"`phrase.isupper()` is":["attempting"],"`phrase.isupper()`. And":["I"],"`phrase.upper() ==":["phrase`"],"`phrase_list` to":["`word_list`"],"`phrase_list`, because":["`Phrase.clean_phrase`"],"`phrase_list`, but":["that"],"`phrase_list`, that":["clearly"],"`phrase` field":["with"],"`phrase` instead":["of"],"`phrase` is":["`None`"],"`phrase` part":["in"],"`phrase` string":["as"],"`pretty` methods":["is."],"`python ./bob.py`.":["Since"],"`qualify` method,":["which"],"`query =":["None`"],"`query` is":["a"],"`query` to":["denote"],"`query`; would":["certainly"],"`question here?":["`"],"`question()`, `nothing()`":["functions"],"`question` does.":["In"],"`question` is":["definitely","a"],"`question` might":["not"],"`r'[^\\w\\s]'` is":["good"],"`r'\\w+'` groups":["(or"],"`raise`, meaning:":["If"],"`rawinput` is":["public,"],"`rawinput` so":["your"],"`re.UNICODE` as":["a"],"`re.compile` for":["your"],"`re.compile` in":["`Phrase.words`"],"`re.findall()` instead":["--"],"`re.findall` also":["returned"],"`re.findall` because":["`Phrase.get_words`"],"`re.findall` gets":["rid"],"`re.findall` to":["simplify","split","get","get"],"`re.findall` with":["the"],"`re.findall` would":["look","be","be"],"`re.finditer` in":["case"],"`re.finditer`. That's":["why"],"`re.match(pattern, string)`":["and"],"`re.match`, which":["may"],"`re.match`. This":["is"],"`re.search(pattern, string)`":["instead"],"`re.search` if":["you"],"`re.search`; keep":["in"],"`re.split()` rather":["than"],"`re.split()` returns":["a"],"`re.split` and":["one"],"`re.split` drops":["everything"],"`re.split` rather":["than"],"`re.split` you":["won't"],"`re.split`, although":["`re.findall`"],"`re.sub()` call":["in"],"`re` but":["don't","don't"],"`re` import":["is"],"`re` module":["saves","take","but","but","is"],"`re` that":["you"],"`reduce()` on":["line"],"`reduce` iterates":["over"],"`removeAll()` function":["is"],"`replace()` method":["on"],"`replace()`, since":["the"],"`replace` could":["do,"],"`replace` included.":["There"],"`replace` method":["already","on","you're"],"`replace` or":["`maketrans`/`translate`."],"`replace` to":["it,"],"`respond_calmly` inlined":[":)"],"`response =":["blah`"],"`response_for`, for":["example,"],"`response_to`? **Reaction**":["makes"],"`response` initially":["and"],"`response` on":["the"],"`response` variable":["and"],"`response` with":["just"],"`response`. Finally,":["you"],"`responses` (predicate":["-\u003e"],"`responses` list":["on"],"`responses` really":["be"],"`responses` shouldn't":["be"],"`responses` to":["class"],"`result =":["None`","filter(lambda","[item"],"`return (w":["for"],"`return Bob.answers['question']`":["or"],"`return FINE`":["together"],"`return False`":["at"],"`return MethodDispatcher(self._responses(message),":["self._neutral_response).dispatch()`"],"`return True":["and"],"`return action()`":["statement"],"`return if":["text"],"`return message":["or"],"`return not":["self.phrase_text`.","message","self.sentence","is_shout(prompt)"],"`return not(message":["and"],"`return not`":["enough"],"`return phrase.isupper()`":["is"],"`return response`,":["but"],"`return self.__query[-1]":["=="],"`return self.phrase.strip()":["=="],"`return` already":["breaks","breaks","breaks","breaks"],"`return` breaks":["the"],"`return` in":["line","each"],"`return` statement":["makes","makes"],"`return` statement.":["According","It"],"`return` statements":["were","on","as","as"],"`return` which":["breaks","terminates"],"`return`, I":["wonder"],"`returns a":["list"],"`reversed()` rather":["than"],"`reversed([... range(end,":["start)])`"],"`riddle`. But":["for"],"`rna_string` are":["constants,"],"`round`, and":["this"],"`rstrip` and":["not"],"`rstrip`. Generally,":["I"],"`s ==":["s.upper()`"],"`s is":["None`"],"`s.endswith(\"?\")` here":["instead"],"`s.endswith(\"?\")` instead":["of"],"`s.endswith('?')` and":["`\"Sure.\"`)."],"`s.isupper()` to":["check"],"`s.strip() ==":["''`"],"`s.upper() ==":["s"],"`s[-1] ==":["'?'`"],"`s[-1]` would":["throw"],"`s` because":["it"],"`s` doesn't":["says"],"`s` for":["string"],"`s` indeed":["stands"],"`s` is":["not","the"],"`s` something":["more"],"`s` were":["empty.","empty,"],"`s`, `string`,":["`msg`,"],"`s`, `text`,":["`message`"],"`s`. (This":["isn't"],"`safe_strip` function.":["Also"],"`safe_strip` is":["more"],"`safe_strip` naming.":["Could"],"`said ==":["said.upper`"],"`said==said.upper()` but":["`said"],"`same_chars` more":["efficient"],"`sanitize` and":["`words`."],"`sanitize` could":["be"],"`scream` and":["`anything_else`"],"`screaming`. Just":["browse"],"`self.RNA_MAP.get(char) or":["char`"],"`self.RNA_MAP.get(char, char)`":["with"],"`self.__class__.method_name()`, which":["you"],"`self.__class__.thymidine` to":["access"],"`self.__class__` to":["access"],"`self.__foo` will":["resolve"],"`self.__sequence`, and":["whether"],"`self._phrase.strip() ==":["''`"],"`self._raw !=":["other._raw`"],"`self._replies` (or":["`cls._replies`"],"`self._replies` instead":["of"],"`self._sequence`. I'm":["not"],"`self._text =":["text","text"],"`self._tokenize(self._phrase)`, why":["not"],"`self._wordcount` so":["its"],"`self.chain` is.":["More"],"`self.counter` (directly":["making"],"`self.greeting =":["greeting"],"`self.hey_message` in":["the"],"`self.message =":["message","message`"],"`self.message` against":["`None`"],"`self.message`, an":["instance"],"`self.normalized` is":["just"],"`self.nucleotides.replace(\"T\",\"U\")` would":["definitely"],"`self.number` to":["a"],"`self.phrase =":["message","message","phrase`?"],"`self.phrase is":["None`"],"`self.rawinput` and":["manage"],"`self.sentence` before":["passing"],"`self.sequence =":["''`,"],"`self.sequence.replace` is":["that"],"`self.sequence` is":["a","a"],"`self.sequence` to":["`self._sequence`."],"`self.sequence` will":["throw"],"`self.statement =":["statement"],"`self.string.isupper() and":["not"],"`self.string.strip() ==":["''`"],"`self.string` is":["explicit"],"`self.strip_punctuation`, to":["make"],"`self.text ==":["'None'"],"`self.text_phrase ==":["''`?"],"`self.thymidine` could":["mean"],"`self.word` for":["every"],"`self.word` just":["once"],"`self.word` so":["you"],"`self.word`. And,":["adjusted"],"`self` (or":["`cls`"],"`self` argument).":["And"],"`self` argument,":["but"],"`self` argument.":["What"],"`self` for":["different"],"`self` is":["unused."],"`self` or":["even"],"`self` rather":["than"],"`self` to":["everything,"],"`self` you":["can"],"`self`, but":["given"],"`self`, you":["can"],"`self`. I":["could"],"`self`. It's":["good"],"`sentence ==":["\"\"`?"],"`sentence and":["...`"],"`sentence.upper() ==":["sentence`"],"`sentence`, but":["I"],"`sentence`, which":["is"],"`sequence` in":["the"],"`shouting` and":["`asking`"],"`sides` list,":["maybe"],"`silence()` less":["complex"],"`silence` in":["Python"],"`silence` would":["be"],"`silent` `shouting`":["and"],"`silent`-function could":["use"],"`sing` methods":["just"],"`sing`, would":["it"],"`someword.is_anagram_of(otherword)` makes":["more"],"`sort()` on":["it,"],"`sort` methods":["?"],"`sort`) could":["be"],"`sort`, but":["I've"],"`sorted(seq)` function":["(builtin)"],"`sorted` is":["really"],"`sorted` on":["the"],"`sorted` than":["the"],"`sorted` to":["check"],"`sorted` transformation":["is"],"`sorted` works":["with"],"`sorted` wrt/":["performances,"],"`sorted`. That":["might"],"`source_word` to":["`x`"],"`speaker` an":["accurate"],"`split()`. In":["fact"],"`split` as":["a"],"`split` method.":["Maybe"],"`standardize` and":["`sort`"],"`startswith()` and":["`endswith()`"],"`statement ==":["''`"],"`statement.anything` makes":["more"],"`statement`'s methods":["?"],"`statement`, but":["there"],"`staticmethod` by":["reading"],"`staticmethod` is":["appropriate."],"`step =":["-1`,"],"`str or":["''`"],"`str(self.text)` for":["in"],"`str(statement)` expression":["in"],"`str(text)` in":["`Message.__init__`,"],"`str(text)` then":["`self.text"],"`str.capitalize()`. Having":["`None`"],"`str.capitalize` takes":["care,"],"`str.count` in":["the"],"`str.endswith()` for":["that."],"`str.endswith` as":["well."],"`str.endswith` instead":["of"],"`str.endswith`, `str.isspace`,":["and"],"`str.format()` is":["the"],"`str.format` method.":["Moreover,"],"`str.islower()` is":["a"],"`str.isspace()` -":["I'd"],"`str.isspace()` would":["be"],"`str.isspace` method":["to"],"`str.isspace`, and":["`str.isupper`"],"`str.isupper ()`":["be"],"`str.isupper()` method":["it","that"],"`str.isupper()` method,":["which"],"`str.isupper()` works":["for"],"`str.isupper(sentence)`, use":["`sentece.isupper()`."],"`str.isupper` and":["`str.endswith`","`str.endswith`."],"`str.isupper` by":["peeking"],"`str.isupper` does":["exactly"],"`str.isupper` from":["the"],"`str.isupper` that":["does"],"`str.isupper` to":["check","check"],"`str.isupper` treats":["non"],"`str.join` on":["`line"],"`str.lower()` (hint:":["you"],"`str.lower()` sorry.":["And"],"`str.lower` on":["whole"],"`str.maketrans(\"T\", \"U\")`.":["If"],"`str.maketrans` drops":["quite"],"`str.maketrans`? The":["syntax"],"`str.replace(' ',":["'')`"],"`str.replace()` is":["the"],"`str.replace()` method":["here"],"`str.replace` in":["my"],"`str.replace` is":["good"],"`str.replace` or":["`self.sequence`"],"`str.replace` to":["translate","replace"],"`str.replace` would":["be"],"`str.split()` really":["do"],"`str.split()` split":["on"],"`str.split()` to":["`.normalized()`"],"`str.strip().__len__() ==":["0`"],"`str.strip()` might":["not"],"`str.translate()` a":["bit"],"`str.translate()` can":["also"],"`str.translate` and":["`string.punctuation`-"],"`str.translate` doesn't":["translates"],"`str.translate` more":["compatible"],"`str1`? Is":["there"],"`str2` I":["should"],"`str[-1:]` can":["be"],"`str[-1:]` over":["`str[-1]`"],"`str[-1] ==":["'?'`"],"`str[-1]` as":["the"],"`str[-1]`; you":["could"],"`str_is_upper` to":["`is_shouting`"],"`str` -":["which"],"`str` allows":["us"],"`str` and":["return"],"`str` as":["a"],"`str` both":["conceptually"],"`str` class":["has","has","to","documentation"],"`str` comment,":["this"],"`str` could":["make"],"`str` in":["the"],"`str` is":["a","python's"],"`str` knows":["what"],"`str` method":["that","for"],"`str` method,":["not"],"`str` methods":["again","is","are"],"`str` methods)":["for"],"`str` object":["it"],"`str` or":["`unicode`"],"`str` seems":["by"],"`str` that":["would","can","may","could","would","could","can","will","would","will"],"`str` to":["simplify","see"],"`str` type":["is","already","knows","already","is"],"`str` type,":["it","it","it","it","it","so"],"`str` which":["might"],"`str`), but":["this"],"`str`, as":["it"],"`str`, though.":["Just"],"`str`, which":["is"],"`str`. I":["think"],"`str`. Most":["probably,"],"`str`. That":["is,"],"`strand` being":["public,"],"`strand` is":["a"],"`strand` or":["`nucleotides`"],"`strand` parameter":["name"],"`string.isupper` but":["forgot"],"`string.maketrans` is":["the"],"`string.maketrans` since":["that"],"`string.punctuation` but":["it's"],"`string.punctuation`- but":["then"],"`string.replace` instead":["of"],"`string.replace` when":["if"],"`string.strip()` to":["make"],"`string.translate()` is":["the"],"`string.translate()`? If":["I"],"`string.translate` ?":["Note"],"`string.translate` had":["been"],"`string.translate` is":["the"],"`string.translate` to":["get"],"`string` as":["a"],"`string` class":["attribute"],"`string` doesn't":["help"],"`string` for":["my"],"`string` module":["-","is","has","but"],"`string` should":["be"],"`string` you":["could"],"`string`, `msg`,":["`greeting`,"],"`string`, as":["that"],"`string`, it's":["a"],"`string`. There":["is"],"`strip() ==":["''`."],"`strip()` into":["your"],"`strip()` just":["once"],"`strip()` the":["variable"],"`strip()`, `upper()`":["or"],"`strip` won't":["fail"],"`strip` works":["just"],"`strip`, but":["the"],"`strn` the":["name?"],"`sum(1 for":["..."],"`sum` over":["a"],"`sum`. Then":["it"],"`super` and":["properties"],"`super` call.":["If"],"`super` or":["other"],"`super` which":["only","only"],"`super`, properties":["and","and"],"`super`, property":["annotations"],"`talker_is_shouting`, etc.,":["since"],"`test_detect_simple_anagram`, where":["the"],"`test_only_numbers` and":["`test_question_with_only_numbers`:"],"`text =":["text.strip()`)"],"`text.isupper()` tests":["for"],"`text.strip()` 4":["times"],"`text.strip()` beforehand.":["that"],"`text.strip()` in":["the"],"`text.strip()` which":["improves"],"`text.upper() ==":["text`"],"`text[-1:] ==":["'?'`"],"`text[-1] ==":["'?'`,"],"`text` in":["statement","the"],"`text`, `message`":["etc."],"`this` if":["you"],"`timedelta` with":["`seconds`","seconds"],"`timeit`-module. Cool,":["looks"],"`toBob.isupper()` attempting":["to"],"`toBob.isupper()` instead":["was"],"`toBob.isupper()` is":["attempting"],"`to_rna()` on":["the"],"`to_rna` is":["called","really","quite"],"`to_rna` method":["has","is","to"],"`to_rna` so":["only"],"`to_rna` very":["often."],"`to_rna` was":["expressive"],"`to_rna` will":["only"],"`to_rna`, because":["it"],"`to_rna`, so":["why"],"`to_rna`. Or":["I"],"`trans_table` out":["of"],"`translate` but":["the"],"`translate` here,":["`str.replace()`"],"`translate` import":["is"],"`translate` method":["of","got"],"`translate`, which":["would"],"`translation_table` should":["probably"],"`trimmed_phrase` really":["be"],"`true` if":["a"],"`try:... except":["KeyError:...`"],"`try`/`except` is":["to"],"`two_bottles` and":["`responses`"],"`type()` doesn't":["return"],"`type(data) is":["str`"],"`type` belongs":["to"],"`u\"foobar\"`). Hence":["I"],"`unicode` is":["passed."],"`unicode` with":["standardization"],"`upper()` on":["the"],"`upper()` or":["`split()`."],"`upper()` transforms":["are"],"`uppercase` doesn't":["expresses"],"`utterance`, which":["is"],"`valid_nucleotides` be":["in"],"`validate` means":["only"],"`var ==":["None`."],"`var is":["None`"],"`verse(self, num)`":["and"],"`verse_num:verse_string` dict":["as"],"`verse` and":["`sing`"],"`word ==":["self._word`"],"`word is":["None`"],"`word.split()` for":["splitting"],"`word_count()` will":["be"],"`word_count()`, a":["generator"],"`word_count()`, which":["is"],"`word_count()`. You":["don't"],"`word_count` (maybe":["multiple"],"`word_count` and":["makes"],"`word_count` is":["never"],"`word_count` method":["seems"],"`word_count` now":["have"],"`word_count` returns":["a"],"`word_count` will":["either"],"`word_count` would":["reflect"],"`word_count`, but":["you"],"`word_count`, so":["you"],"`word_count`, they'd":["have"],"`word_count`, which":["gets"],"`word_count`. Either":["you"],"`word_count`. The":["only"],"`word_counter` you":["could"],"`word_list` and":["inline"],"`word_list` not":["`phrase_list`,"],"`word_list` to":["be"],"`word_sort` method":["private,"],"`word` and":["`source_word`"],"`word` is":["a"],"`word` over":["and"],"`word`s. Get":["it?"],"`word`s. Hi-la-ri-ous,":["I"],"`wordcounter =":["{}`","None`"],"`wordcounter` being":["just"],"`wordlist` would":["become"],"`words_re` and":["`words`"],"`words` is":["doing","a"],"`words` non-public":["if"],"`words` parameter":["everywhere."],"`words`. I":["like"],"`words`. That":["then"],"`x ==":["\"?\"`"],"`x for":["x"],"`x.isupper()` would":["make"],"`x` and":["`y`s.","`y`"],"`x` to":["better"],"`xxx?!`, then":["Bob"],"`y` is":["bad."],"`y`s. Those":["names"],"`yelling()`, `question()`,":["`nothing()`"],"`yelling`, since":["the"],"`yield` the":["cleaned"],"`yield`s. I":["wonder"],"`zero_bottles`, `one_bottle`,":["`two_bottles`"],"`zip` (pretty":["much"],"`zip` and":["implicit"],"`zip` just":["works"],"`zip` though.":["I"],"`{}` be":["returned"],"`{}`). The":["main"],"`||=` would":["be"],"a \"?\"\"),":["I"],"a \"bad":["habit\""],"a \"domain\"":["class"],"a \"global\"":["namespace"],"a \"isupper\"":["method"],"a \"new-style\"":["class"],"a \"phrase\"":["would"],"a \"private\"":["method"],"a \"return":["saywat.isupper()\""],"a \"special":["case\"","case\""],"a '?'":["at"],"a 'T'?":["Or","Or"],"a 'U'.":["But","But"],"a 'U'?":["I'd"],"a 'pep8'":["cli"],"a 'response'":["variable,"],"a 'result'":["variable"],"a (weak)":["protection"],"a *method*":["rather"],"a .isupper":["method"],"a .isupper()":["method"],"a 1-to-1":["translate"],"a 256":["byte"],"a 4":["lines"],"a 42":["chars"],"a =":["DNA(\"GATTACA\")"],"a ?":["at"],"a DNA":["strand,","class,","instance","instance","sequence","sequence"],"a DNA-sequence":["once"],"a DSL":["for"],"a Java":["background."],"a LOT":["of"],"a None":["object."],"a PEP.":["Now"],"a Phrase":["class"],"a PhraseText":["class,"],"a Python":["string","class","string","developer.","shell","`str`,","program.","expert,","expert"],"a Ruby":["programmer","guy,"],"a SPOT":["operation"],"a Sentence,":["then"],"a Teenager":["base"],"a Unicode":["string"],"a Utterance":["class,"],"a ValueError":["exception","if"],"a Word":["class"],"a [discussion":["on"],"a [known":["issue][rna_readme]."],"a [relevant":["stackoverflow"],"a [single":["return"],"a _public_":["attribute"],"a `.isupper()`":["method","method"],"a `@alexis`":["should"],"a `@constantin`":["method"],"a `Bob.hey`":["method"],"a `Bob`":["exercise,","class,","callable","class"],"a `Counter`":["for","-"],"a `Counter`:":["technically,"],"a `DNA`":["instance","class"],"a `FormattedWord`":["as"],"a `KeyError`":["here."],"a `KeyError`.":["So"],"a `Message`":["class"],"a `MethodDispatcher`":["class","class"],"a `None`":["input?","value?","value"],"a `None`.":["So"],"a `RNA`":["class,"],"a `Statement`":["object?"],"a `T`":["with"],"a `ValueError`":["instead"],"a `Word`":["class","instance,","instance","instance"],"a `Word`).":["You"],"a `_`":["to"],"a `_counter`?":["Wouldn't"],"a ```":["String"],"a `basestring`":["prevents"],"a `char`":["method"],"a `class`":["statement"],"a `classmethod`":["as"],"a `classmethod`)":["is","as"],"a `collection.Counter`":["or"],"a `collections.Counter`":["in","here"],"a `collections.defaultdict(set)`":["for"],"a `dict`":["lookup)","and"],"a `dict`,":["calling"],"a `dna`":["instance"],"a `filter`?":["Or"],"a `for`":["loop."],"a `has_letters`":["function."],"a `if":["..."],"a `isYelling`":["method"],"a `is_anagram_of(other_word)`":["method"],"a `list`":["of"],"a `lower`":["call","modifier."],"a `pass`":["or"],"a `pep8`":["cli"],"a `response":["="],"a `response`":["variable"],"a `return":["response`,","False`"],"a `return`,":["I"],"a `staticmethod`":["is"],"a `str.isupper":["()`"],"a `str.isupper()`":["method"],"a `str2`":["I"],"a `str`":["method","method...","method","method,","knows","in"],"a `super`":["call."],"a `timedelta`":["with"],"a `try:...":["except"],"a `tuple`":["type"],"a `unicode`":["is"],"a `verse_num:verse_string`":["dict"],"a age":["where"],"a an":["[`endswith()`](http://docs.python.org/2/library/stdtypes.html#str.endswith)"],"a another":["shot.","shot."],"a bad":["variable","practice","idea?","name,","taste.","variable","thing","habit"],"a base":["class","class."],"a beautiful":["solution,"],"a beer":["song"],"a beginner":[":)"],"a better":["interface","way","name","fit?","option","way","way","job","way","method","way","method","optimization","idea.","describer","way","choice?","suited","option.","implementation","way?","idea","decomposition","way","approach","approach?","way","argument","solution,","way","name","name.","way","idea","choice"],"a big":["enough","fan","deal","deal,","no","Python","switch"],"a bigger":["program,","codebase","picture,","program"],"a bit":["fragile","too","brittle,","better","simpler:","confused","of","forced","here?","better","differently","too","too","of","less","broken,","more","of","easier","smelly","problematic.","misleading","cleaner.","more.","different","messed.","more","more","more","more","more","opaque.","redundant","more","off","less","influenced","of","at","over","procedural,","of","redundant","on","overkill","expensive","of","shorter,","of","of","wasteful.","differently","overkill","of","with","hacky,","of","dogmatic)","overkill.","more","over","far","difficult","long","clearer","to","of","more:","hacky","opaque.","inefficient.","more","harder","beyond","in","more","more","of","too","'too","wasteful","redundant.","over-the-top","misleading.","unnatural"],"a bit,":["but","thinking","thinking"],"a bit.":["Will","This","For","You","Overall"],"a blank":["line"],"a book":[";)"],"a boolean":["context","so","context","test","test","test.","context","test","test","test","context","context","context,","context.","context.","context","context.","context","context","context,","context.","context.","like","context;"],"a boolean,":["so"],"a boolean.":["Otherwise"],"a bound":["method"],"a broken":["example"],"a bug":["in","in"],"a built":["in"],"a built-in":["counting","type","type","data","python","Python","function","class."],"a builtin":["string","function."],"a bunch":["of","of","of","of","of","of","for"],"a bunch.":["Unfortunately,"],"a call,":["I"],"a callable":["taking"],"a case":["of","of","in","stmt.","of"],"a cased":["character"],"a catch-all":["method,"],"a catchall":["lambda"],"a certain":["pattern?","mood"],"a chance":["to"],"a change":["in"],"a character":["to","at"],"a child":["class.","class."],"a class":["doctring","*without*","for","in","body","member,","member","definition","should","for","but","here","?","attribute).","at","when","methods","attribute).","when","only","attribute","attribute","attribute","or","attribute","called","to","member.","for",";-)","for","as","were"],"a class!":["I"],"a class,":["which","but","either,","the","I"],"a class-level":["constant.","constant"],"a class.":["To"],"a classmethod":["since","or","as"],"a classmethod.":["Except"],"a clean":["and","solution?","approach","approach"],"a clean,":["simple,"],"a cleaner":["way","solution.","way.","way"],"a clear":["public","motivation","and"],"a cli":["tool"],"a client":["writes","could"],"a clue":["about"],"a code":["reading","pattern","pattern","pattern","readability","readability"],"a colon":["-"],"a comma":["in","and"],"a command":["(\"Do","line."],"a comment":["on","on","that","describing","(\"if","to","I","re.","on","and"],"a comment:":["http://exercism.io/CaptSolo/python/beer-song"],"a common":["convention"],"a complete":["newb","overkill."],"a completed":["version","version"],"a completely":["different"],"a complicated":["class"],"a compliment":[":)"],"a comprehension":["list","for","you"],"a comprehension,":["and"],"a comprehensive":["nitpick!"],"a computed":["attribute,","attribute"],"a concern)":["but"],"a conditional":["you"],"a constant":["value","value.","(well,","for"],"a constant,":["but","but"],"a contest":["for"],"a context":["where"],"a convenient":["and","location"],"a convention":["in"],"a conversation?":["Conversation"],"a conversion.":["So"],"a cool":["name","approach,"],"a copy":["of","of"],"a copy,":["leaving","not"],"a copy-paste":["of"],"a copying":["process","operation,"],"a corner.":[":("],"a correct":["result.","approach."],"a count":["of"],"a couple":["methods","things:","of","of","methods","things","useless","hints","of","of","FP-inspired","of"],"a crack":["at"],"a creative":["solution,"],"a culture":["and"],"a data":["structure"],"a data,":["it"],"a datatype":["`counter`,"],"a debate":["where"],"a debug":["statement."],"a decorator":["called","-"],"a dedicated":["class"],"a def":["statement"],"a default":["value","answer","answer.","parameter","for","value","value","case"],"a default.":["Probably"],"a definite":["readability"],"a definitive":["`else`","answer"],"a degenerate":["regex)"],"a derived":["noun"],"a description;":["e.g."],"a descriptive":["name","name","keyword,"],"a design":["that"],"a detail":["but"],"a detail.":["We"],"a developer":["should"],"a dialog":["like"],"a dict":["at","for","if","comprehension","of","comprehension,","comprehension","with","comprehension","should","or"],"a dict,":["forgetting","so","then"],"a dict?":["Then"],"a dictionary":["of","of","and","instead","and","with","of","with","with","instead"],"a dictionary,":["`key"],"a dictionary.":["I"],"a difference":["between"],"a different":["name","response","way,","test","name,","level","contract","way","approach?","name","order","way).","class","default"],"a direct":["copy-paste"],"a distinct":["representation","`Word`","function"],"a docString,":["but"],"a docstring":["spanning","for","should"],"a docstring,":["so"],"a domain":["one.","class","class","class"],"a double":["undrrscore","underscore"],"a double-underscore,":["so"],"a downside":["to"],"a dozen":["lines","one-liner"],"a empty":["string,"],"a explicit":["else"],"a failure":["of"],"a fair":["bit"],"a fairly":["recent"],"a false":["value","value","value","value","value","value","value","value","value","positive.","value","value","value","value","value","value","value","value","value","value"],"a fan":["of","of","of","of","of"],"a fantastic":["name!"],"a fast":["way"],"a feature":["if","you","such"],"a feeling":["there'd"],"a few":["counterpoints:","nitpicks","comments","habits","handy","handy","more","useful","times,","of","simple","seconds","minor","minor","weeks","lines","roundabout","small","ideas","nitpicks.","lines","notes:","interesting","remarks:","things","remarks:","minor","minor","minor","remarks:","quick","comments","lines","months,","notes","points:"],"a file":["-","encoding","*was*"],"a filter":["instead"],"a first":["piece"],"a flag":["in"],"a float":["number"],"a for":["loop","loop,","loop).","loop...","loop.","loop","loop:"],"a form":["of"],"a format":["specification"],"a full":["string,","verse"],"a function":["and","are","(no","that","to","to","\u003ca","for","of","is","with","for","in","for","with","declaration.","built","to","that"],"a function)":["you"],"a function,":["I","that"],"a function.":["A","This","With"],"a functional":["way","style","programming"],"a future":["insight."],"a general":["rule,"],"a generator":["expression","from","in","expression)","comprehension.","method,","expression"],"a generator.":["I"],"a genuine":["\"is"],"a getter":["here"],"a getter,":["not"],"a given":["module,","grade"],"a glance,":["but"],"a glorious":["language..."],"a good":["approach.","reference","starting","start.)","point","way","habit","name.","name","thing.","style","crash","idea,","way","idea","idea","point,","habit","idea","design","practice).","choice,","stackoverflow","way","thing","thing...","Python","point.","read.","read.","read.","idea","idea,","practice","read.","name","solution?","idea.","idea","way","habit","idea","win","usage","class-constant."],"a google":["for"],"a grain":["of"],"a great":["idea)","benefit","name","boost","name","idea.","deal","improvement,","design","extent","question."],"a greeting?":["Or"],"a guard":["clause"],"a habbit":["picked"],"a habit":["of","of","on","I'm"],"a half":["a"],"a hard":["habit"],"a helper":["methods/functions","for","(word","with"],"a helper.":["Otherwise,"],"a hidden":["method,"],"a high":["level,"],"a hint":["for"],"a homebrew":["formula"],"a horrible":["variable"],"a huge":["difference","overkill).","fan","deal,"],"a human":["to"],"a instance":["dictionary"],"a internal":["constant.","representation","representation"],"a judgement":["about"],"a key":["exists","that"],"a kick":["using","using"],"a kind":["of"],"a kinda":["follow"],"a lackadaisical":["teenager.\"\"\""],"a lambda":["expression"],"a lambda,":["though,"],"a language":["with","is","where","that"],"a large":["program,","trade-off,"],"a larger":["work,","code","codebase."],"a last":["hint:","minor"],"a lasting":["comment,"],"a law":["of"],"a lazy":["iterator"],"a lazy,":["on-demand"],"a leading":["`_`","\"1\""],"a len()":["can"],"a length":["of"],"a level":["of"],"a library,":["it"],"a line":["each.","by"],"a line,":["consider"],"a link":["to"],"a list":["first","first?","comprehension","before","comprehension","-","comprehension","of","of","comprehension","comprehension","comprehension?","comprehension","comprehension","of","of","as","comprehension:","of","of","of","of","comprehension","of","of","from","?","comprehension","isn't","object,","of","comprehension.","of","in","of","of","of","that","comprehension,","comprehension,","comprehension:","with","of","for","on","and"],"a list!":["This"],"a list).":["As"],"a list,":["then"],"a list.":["You"],"a list?":["Or"],"a little":["better","bit","more","more","too","over-engineered,","clearer.","nicer","bit.","when","confusing.","made-up","sense","more","inefficient.","heavy","unefficient","on","more","long,","hard","*dense*","more","more","more","more","short.","nuts","bit","odd"],"a little,":["or"],"a little.":["not"],"a local":["variable,","variable","variable","variable"],"a long":["nitpick","time","way","function.","time."],"a longer":["time"],"a look":["at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at",":)","at","at","at","at","at","at","at","at","at","at","at","at","at","and","at","at","at","at","at","at","at","at"],"a loop":["to"],"a lot":["more","of","of","of","of","more","of","of","of","clearer!)","of","instances","and","of","of","of","cleaner.","of","of","of","of","of","about","about","of","less","of","more","of","of","of","of","of","and","of","simpler.","of","for","about","of","of","of","of","from","more","of","in","of","of"],"a lot!":["I"],"a lot,":["didn't"],"a lot.":["You","So","The"],"a lower":["level"],"a lowercase":["version"],"a lowercased":["version"],"a maintainer":["(ok"],"a major":["problem"],"a majority":["of"],"a manually":["built"],"a map":["method"],"a map.":["Renamed"],"a mapping":["between","is"],"a match.":["Unless"],"a matching":["pattern"],"a matter":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"],"a maximum":["of"],"a meaningful":["name","name.","object,","context."],"a mechanism":["for"],"a member":["function"],"a memoized":["method"],"a mere":["function","two-terms"],"a mess":["-"],"a mess,":["I"],"a message":["of","is","to","being"],"a method":["on","that","and","that","on","on","on","`isupper()`","makes","on","with","with","of","on","on","on","for","on","for","`isupper()`","in","that","called","for","or","is","comparing","to","which","to","or","should","returning","returning","returning","?","named","for","such","of","that","and","on","on","and","that","that","that","or"],"a method,":["or","I","which"],"a method;":["the"],"a million":["ways"],"a minor":["glitch.","thing:","point."],"a mirror":["of"],"a mix-up":["in"],"a model":["domain"],"a module":["level","for","level","level","level"],"a moment,":["imagine","I"],"a moot":["point"],"a more":["complicated","involved","generic","flexible","fully","complicated","fitting","full-blown","descriptive","elegant","elegant","idiomatic","general","suited","performant","generic","concrete","pythonic","declarative","declarative","complex","\"fine-grained\"","functional","paranoid","\"native\"","complicated","pythonic","self-explanatory","idiomatic","conventional","direct"],"a move":["in"],"a msg":["to"],"a much":["more","simpler","more","more","clearer"],"a mutable":["public"],"a name":["(eg.","mangling","to","of","you've","for","to","for","that"],"a named":["function"],"a namespace":["and"],"a namespace?":["So"],"a naming":["convention"],"a native":["speaker."],"a near":["4-fold"],"a neat":["approach","way"],"a need":["for"],"a negation,":["since"],"a negative":["list","number"],"a new":["version.","test","object","one?)","class?)","method","class?","class?","object","function","function","Utterance","class,","class","upper-case","list","revision.","phrase.","FormattedWord","constant","version","version","version","list?","rev","robot","revision","instance"],"a new,":["independent"],"a new-style":["class"],"a newbie":["in","pythonner)."],"a nice":["docstring","access","term","list","middle-ground,","one,","and"],"a nicer":["way","way"],"a nit":["so"],"a nitpick":["but"],"a nitpick:":["while"],"a nod":["to"],"a non-\"personal\"":["opinion."],"a non-alpha":["or"],"a normal":["dictionary"],"a normalized":["version"],"a note":["about","here"],"a noun":["instead","too","and"],"a null":["function"],"a number":["of"],"a of":["method"],"a one":["liner","time"],"a one-file":["app"],"a one-liner":["too,"],"a one-liner,":["`return"],"a parameter":["each","in"],"a part":["of","of","of","of","of","of","of"],"a particular":["substring.","substring.","substring,","method.","instance.","idea","idea","way.","way.","way.","reason"],"a passed":["index"],"a pattern":["in","of","in","to"],"a pause/silence":["before"],"a pep8":["on"],"a per-character":["basis?"],"a performance":["perspective"],"a period.":["It"],"a personal":["point,"],"a philosophy.":["If"],"a phrase":["from","(i.e.","ending"],"a physical":["process."],"a piece":["of"],"a place":["for"],"a plain":["attribute","function","`if","`dict`,","old","old"],"a possible":["alternative"],"a possibly":["useless"],"a potential":["for"],"a predicate":["got","to"],"a predicate,":["e.g."],"a preference":["not","of","rather"],"a presumably":["pure"],"a pretty":["good","good","specific","heavy","good","safe","neat","direct"],"a previous":["commenter","solution."],"a private":["function","member","method,","method","(IOW","field","variable."],"a problem":["in","with","with","in","as","this"],"a problem.":["```","(I","From"],"a program":["more"],"a programmer":["error","you"],"a programming":["error,","error,"],"a project-basis,":["since"],"a prolonged":["silence"],"a proper":["domain","functional","statement,"],"a property":["into","to","is","so"],"a property,":["but","but","the","the"],"a public":["attribute,","API","API).","member","member","attribute,","instance","attribute","attribute),","attribute","attribute","attribute","attribute","attribute","attribute","attribute","attribute"],"a pure":["function,"],"a purpose":["in","in","in"],"a pylint":["in"],"a python":["keyword,","enum","guru","class","function,","background,"],"a question":["of","if","mark.","mark","if","mark","mark","mark","of","mark\"","by","mark","or","mark\".","or","is","is"],"a question\"":["-"],"a question).":["Dealing"],"a question,":["maybe","it's","I'm","or","etc?","take"],"a question.":["There's","Why","There"],"a question;":["however,"],"a quick":["solution","first","and","python"],"a rabbit":["from","trail"],"a range":["instead"],"a rather":["declarative"],"a readability/organization":["standpoint,"],"a reader":["the","(e.g."],"a ready":["reference"],"a real":["one","hassle.","case","conversation","nitpick"],"a real-life":["implementation"],"a really":["unusual","good","really","trivial"],"a reason":["that","to","to","for","to","why","I"],"a recursion":["approach,"],"a refactor":["or","where"],"a refactor.":["I"],"a reference":["on"],"a regex":["in","that","or","you","for","method","seems","u","for"],"a regex,":["and"],"a regex.":["The"],"a regular":["expression","expression."],"a related":["note"],"a reliable":["way"],"a repeat":["of"],"a replace":["function..."],"a representation":["of","of"],"a response":["variable,"],"a restricted":["alphabet,"],"a result":["of"],"a return":["value","statement"],"a revision":["incorporating"],"a risk":["of"],"a robot":["controller,"],"a routine,":["and"],"a row":["in"],"a rubyist":["who","who"],"a rule":["class","in"],"a safer":["way"],"a same":["line,"],"a sane":["state","goal,"],"a sanity":["check"],"a scientist":["wants"],"a screen":["easier."],"a script":["that"],"a second":["template","iteration.","function","look"],"a semantic":["mapping"],"a sensible":["way","name.","level","place"],"a sentence":["is"],"a sentence,":["there's"],"a separate":["class?","function","class,","function","method?","method","method","class,","object","queries,","class","line.","function","function","function","method,","module.","class"],"a separator":["as"],"a seperate":["module"],"a sequence":["of","of","of","of","of","(or"],"a sequential":["lookup"],"a series":["of","of","of","of","of","of"],"a set":["of","difference","of","of","of","of"],"a set,":["but","you"],"a setter":["and"],"a setter.":["The"],"a short":["solution.","solution."],"a shot":["at","at"],"a shout":["so"],"a shout.":["I"],"a shouted":["message."],"a shouty-question":["properly."],"a side":["note","note,"],"a sign":["that"],"a silence":["neither"],"a similar":["result","solution.","fashion"],"a simple":["problem.","function.","function","regex","function","context.","comment","regex","`replace`","string.replace.","sorted","case","test","plural","test","function","module","wrapper.","function","iteration","test","`for`","task.","`not","string","string","task..."],"a simpler":["test","way","way","way","way","way","conditional","way"],"a single":["character","function,","space,","underscore).","underscore","file/module.","_.","character.","underscore.","underscore","case.","place;","underscore","ubderscore","line","underscore","space","responsibility","call.","leading","leading","leading","leading","line","leading","expression","expression","underscore","class","line","call.","return","line.","loop","translation.","check,","statement","function,","underscore.","line","regexp?","instance","return"],"a situation":["where"],"a slight":["abuse,"],"a slightly":["more"],"a small":["number","amount,","piece"],"a smell":["to"],"a solid":["solution.","argument"],"a solution":["using","not","I"],"a sort":["of"],"a sorted":["list"],"a space":["after","after","after"],"a space.":["Ex:"],"a special":["detail"],"a specialist":["in"],"a specific":["sequence"],"a spin,":["and"],"a split":["and"],"a spot":["in"],"a standalone":["function","method:"],"a standard":["statement.","form"],"a standard:":["http://www.python.org/dev/peps/pep-0008/"],"a stateless":["class"],"a statement":["that","is","which","like"],"a static":["attribute,","method","attribute.","method"],"a staticmethod":["?"],"a step":["forward","forward,"],"a strange":["use"],"a string":["full","is","method","is","representation","replacement","just","to","-","methods","in","is","to","is","but","starts","starts","starts","or","is","is","method","and","is","and","?","an","is","(byte","or","is","can","or","method,","that","value.","needs","with","and","method","method","method","and","replacement.","name.","it's","ends","is","for","for","with","(or","for","for","for","is","is"],"a string's":["suffix."],"a string).":["Perhaps"],"a string,":["if","and","in","it","which"],"a string.":["It's","This","As","Also,","One","Then,","But","If"],"a structure":["similar"],"a stupid":["type"],"a style":["choice,","choice,","choice,"],"a sub-class":["of"],"a subclass":["and","of","of","of","of","of","(`BobStockTrader`)","of","of"],"a suffix":["of"],"a suggestion":["but","from"],"a super":["cool"],"a superclass',":["not"],"a superfluous":["else."],"a surprise":["for"],"a sweet":["suggestion;"],"a syntax":["error"],"a table":["containing:"],"a technical":["POV"],"a temporary":["variable."],"a test":["with","for","case"],"a test.":["If"],"a text":["(couplet"],"a theoretical":["example."],"a thing.":[":)"],"a third":["party","thing:"],"a thought":["--"],"a time":["then","with"],"a time.":["Of"],"a tiny":["bit","bit","wee"],"a ton":["of","of"],"a too":["obscure"],"a top-level":["constant"],"a total":["Python","Python"],"a trade":["off"],"a tradeoff":["here."],"a translation":["table","table","table","table","class,"],"a translation,":["piece"],"a transtable,":["I"],"a troll":["and"],"a troll.":["The"],"a troll;":["I'm"],"a true":["condition."],"a try.":["Disclaimer:"],"a try/except":["block,","block"],"a tuple":["is"],"a tuple.":["If"],"a type":["it"],"a typed":["dictionary","dictionary","dictionary"],"a unicode":["object"],"a uniform":["and"],"a unit":["test"],"a unused":["import?"],"a usable":["object,"],"a useful":["string","string","part","function"],"a user":["of"],"a valid":["use","way","instance","way","solution.","DNA","input.","word.","string."],"a validation":["method?"],"a valuable":["mental","way."],"a value":["is","for","rather","be","to"],"a variable":["here","introduced,","to","is","that","name.","by","name.","called","and","to","here,","and","name"],"a variable,":["as"],"a verb,":["so"],"a verb.":["A"],"a version":["with"],"a very":["idiomatic","trivial","good","doubtful","trivial","nice","little","minor","overcomplexified","debatable","minor","specific","simple"],"a violation.":["Could"],"a visual":["hint","standpoint,"],"a voice":["recording","input"],"a waist":["of"],"a waste":["of","or"],"a way":["to","you","to","to","to","that","to","that","to","to","to","to","to","to","to","to","to","to","to","that","to","to","to","that","you","to","to","to","to","to","to","to","to","to","I","to","to"],"a way,":["that's"],"a way.":["Didn't"],"a weakness":["of"],"a weird":["variable"],"a well-named":["private"],"a while":["ago","since","loop","to","to"],"a while,":["but","when","but"],"a while.":["I"],"a whole":["lot","range","being","more","integer"],"a wider":["range","range."],"a word":["(like","on","mattered"],"a word,":["which"],"a wrapper":["`Message`"],"a wrong":["encoding"],"a year,":["you'll"],"a yell,":["why"],"a\" relation":["between"],"a) #":["True"],"a) It":["shows","reminds"],"a) never":["do"],"a) nitpick":["I"],"a) violates":["the"],"a._sequence ==":["\"CAT\""],"abbreviated msg":["for"],"abbreviation. Thus":["HTTPServerError"],"abbreviations in":["CapWords,"],"abele on":["all"],"abele that":["you"],"ability to":["express"],"able to":["remove","access","understand","work","reduce","implement","use","easily","encode","call","put","replace","see","map","use","think","work","avoid","solve","delete"],"about \"if":["using"],"about \"new-style":["classes\""],"about \"other":["method"],"about \"to":["make"],"about 2":["GB"],"about 350":["MB"],"about \u003ccode\u003ehey\u003c/code\u003e":["being"],"about =)":["[Here"],"about Python":["as"],"about Python--I":["think"],"about [duck":["typing](https://en.wikipedia.org/wiki/Duck_typing)."],"about `\"":["\"`,"],"about `Language`":["class,"],"about `_normalize_silence`":["as"],"about ```.isupper()```,":["but"],"about ```if":["not"],"about `collections.Counter`":["-"],"about `collections.Counter`,":["and"],"about `collections.defaultdict`":["or"],"about `endswith`.":["Will"],"about `from":["..."],"about `isupper`.":["Thanks!"],"about `phrase":["is"],"about `safe_strip`":["naming."],"about `self`.":["I"],"about `staticmethod`":["by"],"about `strand.replace()`":["?"],"about `timeit`-module.":["Cool,"],"about a":["statement","million","dedicated","`Word`","domain","classmethod","better","list"],"about all":["these"],"about an":["unknow"],"about and":["work"],"about another":["assignemt."],"about anything":["else"],"about as":["pythonic"],"about attaching":["helper"],"about balance.":["At"],"about being":["a"],"about better,":["but"],"about boolean":["truths"],"about breaking":["out","your"],"about calculating":["the"],"about capital":["constants."],"about checking":["the"],"about collections":["and"],"about comments:":["it's"],"about context":["but","in"],"about converting":["this"],"about could":["help."],"about decorators,":["but"],"about decoupling":["the"],"about doing":["that"],"about early":["returns](http://exercism.io/submissions/52101ce59701fa85bd000026)","return","returns](http://exercism.io/submissions/52101ce59701fa85bd000026)"],"about edge":["cases,"],"about extra":["*class*"],"about extracting":["the","both"],"about filter":["vs.","is"],"about filtering":["out"],"about function":["name"],"about generators.":["Taking"],"about getting":["the"],"about having":["the"],"about how":["accessible","you","you","to","roman","our"],"about inconsistency":["of"],"about indexing":["(specially"],"about isupper(),":["so","I"],"about it":["without","for","too","here:","myself,","myself.","either,","to","in","right?","here"],"about it,":["because"],"about it.":["You've","Where","I'm","That"],"about its":["tone,"],"about line":["29..."],"about list":["comprehensions"],"about making":["comments","`is_*`","this","`Statement`","hey","good","`FormattedWord`","things"],"about memory":["footprint,"],"about message":["processing"],"about more":["functional"],"about moving":["that","that","the","the","it","the","the","the"],"about my":["solution","solution","solution"],"about name":["space"],"about naming":["class"],"about naming,":["I"],"about naming.":["Might"],"about naming:":["neither"],"about new":["style"],"about new-style":["classes:"],"about one":["more","new"],"about other":["questions,"],"about our":["white"],"about passing":["the"],"about performance":["is"],"about private":["methods"],"about putting":["the"],"about readability.":["IMHO"],"about reading":["that"],"about reducing":["the"],"about replacing":["the"],"about response":["constants."],"about return":["statements."],"about returning":["`Counter`."],"about returns](http://exercism.io/submissions/52101ce59701fa85bd000026)":["on"],"about sequences":["of"],"about short":["helper"],"about single":["space"],"about some":["metaprogramming","possible"],"about something":["like"],"about speech":["being"],"about standard":["constructors"],"about storing":["```input_string```"],"about stretching":["yourself"],"about style":["readability"],"about stylistic":["python,"],"about switching":["from"],"about text":["manipulation","processing"],"about that":[":/","can","can","one,","stuff.","though.","one."],"about that.":["But","I"],"about the":["intent","example","validation","intent.","predicates","Bob","helper","intent","mangled","opposite.","error,","extra","logic","line","extra","\"Language\"","argument","indentation,","details.","`isupper()`","decorated","current","situation,","last","pep8.","complexity","`collections`","tests","text.upper()","allCaps","different","counting","docstrings.","difference","first","name","way","number","\"silent","only"],"about them":["as"],"about them?":["You"],"about themselves":["-"],"about themselves.":["Like"],"about these":["python"],"about this":["a","?","behaviour:","whole","```try-except```","exercise","solution.","than"],"about thrice":["in"],"about thymidine":["and"],"about truthiness":["-"],"about using":["`@mohamed`","dict","`self._replies`","maketrans.","the","the","`re.findall`","booleans"],"about ways":["to","to"],"about what":["it","`str.split()`","can","is"],"about you?":["I'm"],"about your":["code.","code","issues"],"about, and":["also"],"about, even":["if"],"about. Good":["job!"],"about. One":["last","could"],"above `is_shouting`":["you"],"above checks,":["but"],"above half":["the"],"above it":["from"],"above the":["line"],"above) dict":["?"],"above, I":["have"],"above, should":["make"],"above. Bah.":["Some"],"absence of":["proper"],"absolutely necessary.":["Python"],"absolutely need**":["the"],"absolutely no":["public","state,"],"absolutely redundant.":["Or"],"absolutely right":["about"],"absolutely right.":["I"],"abstract 'T'":["and"],"abstract and":["hide"],"abstract away":["things"],"abstract concept":["of"],"abstract this":["?","?"],"abstracted each":["response"],"abstracting something":["as"],"abstraction behind":["which"],"abstraction but":["I've"],"abstraction called":["\"alphagram\"."],"abstraction for":["me."],"abstraction here":[":)"],"abstraction level,":["you"],"abstraction levels":["in"],"abstraction than":["10"],"abstraction, and":["`words`"],"abstraction. Everything":["else"],"abstraction. In":["that"],"abstractions in":["place,"],"abstractions that":["are"],"abstractization, I":["might"],"abstracts everything":["within"],"abundantly clear":["with"],"abuse a":["class"],"abuse, it":["fits"],"accept None":["at"],"accept either":["`None`"],"accept input":["interfaces"],"accept it,":["or"],"accept multiple":["arguments"],"accept negative":["indexes"],"accept the":["same"],"acceptable, or":["reviled?"],"accepted naming":["conventions"],"accepted solution,":["seems"],"access (`salutation[-1]`)":["unless"],"access `Message.content`":["would"],"access a":["key"],"access class":["attributes.","attributes."],"access on":["the"],"access the":["public","current"],"access these.":["It"],"access through":["a"],"access to":["`self`.","the","class","it","the"],"access using":["`self.thymidine`"],"access, but":["then"],"access. They":["are"],"accesses class":["attribute"],"accessible though.":["There"],"accessible your":["functions"],"accessor &":["mutator"],"accessor for":["phrase"],"accidental logic":["processing"],"accidental overridding":["of"],"accidental semicolon":["in"],"accidentally muted":["it"],"accidentaly overridden":["in","in"],"accompanying read-me":["file,","file."],"accomplish the":["same","task","same"],"accomplish this":["same"],"according to":["[PEP","PEP8","zoldar","PEP8,","PEP8.","the","the","the"],"account dealing":["with"],"account of":["not"],"account other":["white"],"account that,":["my"],"account words":["like"],"account, and":["took"],"accounting for":["a","what"],"accurate and":["is"],"accurate but":["silly."],"accurate description":["of"],"accurate function":["names"],"accurate in":["this"],"accurate name":["for"],"accurate than":["'is_question'."],"achieve it":["with"],"achieve similar":["effect."],"achieve that":["goal?"],"achieve what":["you"],"achieved more":["easily"],"achieved rather":["by"],"achieved this":["with"],"acronyms etc.":["Much"],"acronyms instead":["of"],"acronyms, and":["that"],"across different":["languages,"],"across projects":["is"],"across properly":["named"],"across the":["`isupper`"],"act like":["they're","they're"],"act of":["\"conversion\""],"action in":["self._actions:","separate"],"action matches":["the"],"action on":["phrase","line"],"action should":["apply."],"action()` statement":["on"],"actions and":["method"],"actions: a":["sequence"],"activity in":["the"],"acts like":["a"],"actual approach":["is"],"actual benchmarks,":["I've"],"actual context.":["That's"],"actual goal":["of"],"actual list":["of"],"actual measurements":["comes"],"actual names":["if"],"actual operation":["of"],"actual production":["of"],"actual real":["word"],"actual requirements*":["(that"],"actual word":["or"],"actually `.isupper()`":["..."],"actually a":["method","method"],"actually an":["even"],"actually are":["uppercase"],"actually be":["preferred"],"actually being":["checked"],"actually call":["them"],"actually clearer,":["IMO,"],"actually come":["up"],"actually dislike":["that"],"actually do":["-","a"],"actually does":["without",":)"],"actually does,":["either"],"actually done.":["Of"],"actually easier":["to"],"actually go":["on"],"actually helpful":["as"],"actually is":["part"],"actually just":["spelling"],"actually like":["this","to"],"actually looking":["at"],"actually makes":["this","this","me"],"actually meant":["```.endswith()```."],"actually muddies":["the"],"actually my":["first"],"actually necessary":["here."],"actually necessary,":["since"],"actually need":["to"],"actually pass":["the"],"actually passes":["a"],"actually ran":["the"],"actually reading":["the"],"actually tend":["to"],"actually the":["default,"],"actually up":["to"],"actually use":["the"],"actually what":["it's"],"actually works.":["It"],"actually. But":["changing"],"actually. Furthermore,":["are"],"actually. I":["think"],"add 2":["newlines"],"add `.lower()`":["to"],"add a":["space","lot","comment","grade","function","lot"],"add an":["additional","underscore"],"add and":["one"],"add another":["method,"],"add apart":["from"],"add arguments":["to"],"add attributes":["to"],"add case":["insensitivity."],"add documentation":["for","for"],"add encoding":["on","at"],"add file":["encoding"],"add inline":["comments"],"add mappings":["to"],"add much":["to"],"add new":["instance"],"add nucleotide":["categorization"],"add one":["more"],"add or":["change"],"add self":["as"],"add simulated":["errors"],"add some":["docstrings","spaces"],"add space":["around"],"add that":["the"],"add the":["others","2","functionality","extra"],"added `text.strip()`":["which"],"added a":["new","bit","private","translation","test","test","unit","note"],"added additional":["whitespace"],"added an":["`@lucienne`"],"added bonus":["that"],"added comments":["about","to"],"added complexity":["with","and"],"added descriptions":["of"],"added docstring":["to"],"added encoding":["information"],"added file":["encoding"],"added on":["my"],"added purpose":["of"],"added some":["comments!"],"added these":["test"],"added this":["test:"],"added to":["`names`?"],"addidtional class,":["let"],"adding another":["`if`"],"adding doc":["strings,"],"adding docstring's":["for"],"adding expressive":["docstrings"],"adding extra":["methods"],"adding helper":["methods"],"adding interface":["in"],"adding new":["interpretation","code"],"adding the":["extra","PARAMETERS"],"adding this":["kind"],"adding unnecessary":["complexity."],"addition of":["extra"],"addition to":["just","the"],"addition, how":["do"],"addition, it":["does"],"addition, try":["reading"],"addition, why":["the"],"addition, you":["currently","can"],"additional clarity":["that"],"additional class":["would"],"additional comments":["which"],"additional mechanisms":["like"],"additional method":["`from_rna`"],"additional methods":["for"],"additional methods,":["that"],"additional methods?":["comments?"],"additional opportunity":["to"],"additional queries":["can"],"additional whitespace":["between"],"address all":["of"],"addressed a":["couple"],"addressed later.":["The"],"addressed with":["careful"],"addressing all":["the"],"addressing him":["with"],"addressing or":["is"],"addressing should":["be"],"adds a":["level"],"adds an":["extra"],"adds the":["advantage"],"adds to":["the"],"adenine maps":["to"],"adjacent litteral":["strings"],"adjust the":["values."],"adjusted the":["formatting"],"admin wants":["to"],"admin, and":["I"],"admirable, but":["in"],"admire the":["work"],"admit I":["frequently"],"admit that":["it's","I","I","I","if"],"admittedly not":["a"],"admittedly very":["weak"],"admittedly, I":["didn't"],"ads to":["the"],"adults here\"":["and"],"advance and":["keep"],"advance anyway":["(re.compile)"],"advantage of":["the","\"falsey\"","it's","what","having","the"],"advantage to":["this"],"advertise every":["method"],"advice about":["generators.","making"],"advice above,":["should"],"advice desired.":["k-thx-bai"],"advice from":["the"],"advice lately":["that"],"advice to":["change"],"advice, it":["does"],"advices again.":["Your"],"advices. I":["take"],"advisable not":["to"],"advise against":["it,"],"affect the":["decision"],"afraid of":["using"],"afraid your":["logic"],"afraid. As":["long"],"afraid. I":["think"],"after I":["changed","complete","changed"],"after `class`":["isn't"],"after `if`":["statement"],"after `object`.":["Short","That"],"after a":["comma","`return`,","`return`","phrase"],"after actually":["reading"],"after all":[":)"],"after being":["standardized"],"after class,":["method"],"after comma":["in"],"after commas":["in","in"],"after each":["filter."],"after fetching":["this"],"after first":["occurrence"],"after having":["an"],"after modules,":["class"],"after questionmark":["`\"something?"],"after reaching":["0"],"after reading":["again","other"],"after seeing":["@luis"],"after several":["months","months","months"],"after solving":["in"],"after the":["'?'.","fact.","other","import,","first","class.","?"],"after what":["they"],"after your":["nitpick"],"afterwards (this":["seems"],"afterwards, sipping":["needless"],"afterwards. I'd":["leave"],"again -":["your"],"again :":["you"],"again Python":["proves"],"again afterwards":["(this"],"again and":["again","again."],"again have":["to"],"again in":["the"],"again newly":["discovered"],"again thanks":["for"],"again the":["README."],"again to":["find"],"again! And":["thank"],"again! I've":["moved"],"again, I":["am"],"again, class":["isnt"],"again, this":["is"],"again. Your":["feedback"],"against None":["in"],"against `None`":["(the","in","is","is","is","is","is","(specifically)","is"],"against `True`":["avoiding"],"against a":["negative","set"],"against an":["empty","obscure,"],"against duck":["typing."],"against extracting":["lots"],"against having":["that"],"against inaccurate":["types"],"against it,":["in"],"against pep08":["(code"],"against tampering.":["While"],"against the":["pep8.","language"],"against their":["own"],"against unlikely":["behavior,"],"age where":["we"],"agent. I":["was"],"aggregated to":["`Interaction`"],"agile -":["much"],"agnostic, simple":["purpose"],"ago and":["I","the"],"ago on":["my"],"ago. Any":["feedback"],"agree -":["hence"],"agree about":["context","using","using","the"],"agree all":["@dante"],"agree if":["that"],"agree in":["most"],"agree on":["all","passing","extracting"],"agree that":["a","this","the","you","using","most","this","the","I","this","I","filter","`self.nucleotides.replace(\"T\",\"U\")`","`elif`/`else`"],"agree this":["looks"],"agree to":["keeping","disagree"],"agree w.":["@kaylin","@davon"],"agree with":["you","you","@katherine","your","your","the","@breanne","@brown.","you","you","your","@lacey.","abele","abele","the","the","@ignatius's","@emmanuelle","you","you","you","you"],"agree, I":["just"],"agree, it":["reads"],"agree, this":["code"],"agree. Adding":["variables"],"agree. But":["I"],"agree. On":["this"],"agreed you":["have"],"agreed, though,":["that"],"ahead and":["submitted","did","updated"],"aimed at":["a"],"aka PEP8":["-"],"aka PEP8.":["There","Consider","Consider","Also","There's","There's","There's"],"aka dunder":["is"],"al. to":["the"],"alas this":["is"],"albeit there":["is"],"algebraic types":["or"],"algorithm required":["in"],"algorithm when":["much"],"algorithm. I":["will"],"algorithm. The":["only"],"alias `collections.Counter`":["as"],"alias to":["your","``answer``)"],"aliases of":["`statement`'s"],"aliasing a":["bound"],"aliasing nucleotide":["characters"],"align variable":["declarations"],"alike. Maybe":["that"],"all 'T's":["with"],"all 3":["conditions"],"all @dante":["points."],"all FWIW":["-","?"],"all I":["know"],"all Python":["exercises"],"all `r'\\w+'`":["groups"],"all `return`":["statements"],"all a":["`staticmethod`","bit"],"all about":["balance.","text","checking"],"all accept":["the"],"all are":["I"],"all attributes":["of"],"all be":["swapped"],"all builtin":["class"],"all caps":["means","-","and","questions"],"all caps,":["so"],"all caps.":["Depending"],"all cased":["characters","characters","characters"],"all characters":["in"],"all chars":["are","are","are"],"all classes":["new-style!)","are"],"all conditions":["into"],"all consenting":["adults"],"all could":["be"],"all ears!":[":)"],"all examples":["by"],"all fail":["it"],"all fairly":["minor"],"all falsey":["inputs"],"all going":["through"],"all good":["suggestions"],"all have":["a"],"all helper":["methods","methods"],"all helpers":["methods"],"all if/looping":["structures"],"all in":["all.","all.","one"],"all inherit":["from"],"all into":["the","one"],"all it":["requires"],"all iterables":["will"],"all letters":["are"],"all lines":["to"],"all list":["of"],"all loops/ifs":["by"],"all lowercase":["etc)"],"all matches":["of"],"all means":["should"],"all more.":["nothing."],"all my":["submissions"],"all names":["from","in"],"all needed":["variables"],"all new":["2.x"],"all nitpicks":["the"],"all nits":["and"],"all nor":["done"],"all objects":["have"],"all occurrences":["of"],"all of":["that","them?","these","the","the","them.","which","the","the","the","the","the","them"],"all other":["cases","things"],"all permutations":["seems"],"all possible":["names","names"],"all provide":["strings"],"all public":["API,","interface"],"all quite":["nice.","subjective."],"all references":["in"],"all related":["return"],"all required":["checks."],"all responses":["appear","to"],"all returning":["False,"],"all see":["unnecessary"],"all seemed":["like","like"],"all set":["to"],"all should":["use."],"all sides":["have"],"all start":["with"],"all strings":["it"],"all subclasses\".":["Bob"],"all tests":["pass."],"all than":["to"],"all that":["whitespace","translate","readable."],"all the":["nucleotides","tests","tests","stuff","time","rest","tests","stuff","'bad'","suggestions","work","processing","methods","static","feedback.","same.","way.","words.","words","tests","variables","\"intensive\"","methods","time","letters","logic","tests","benefits","useful","excellent","links.","fragments","methods","required","comments","logic","built-in","tests.","components","phrase","details","tests,","bits,","test","tests,","relevant","same,","logic","feedback!","criteria?","detailed,","counting","work"],"all there":["was"],"all these":["@woodrow,","methods.","other"],"all this":["class"],"all those":["links"],"all three":["cases","comments.","points.","`_check*`"],"all typecheking,":["expect"],"all unknown":["keys"],"all upper":["case","case","case.","case"],"all upper-case;":["it"],"all uppercase":["(or","and"],"all uppercase.":["Consider","There","`if`","CamelCased"],"all very":["nice."],"all we're":["left"],"all when":["`word"],"all whitespace":["when"],"all whitespace.":["In","I"],"all words":["in"],"all written":["with"],"all you":["have","have"],"all your":["responses","submissions","points,","predicates","predicates","help,","predicates","methods"],"all\" answer,":["which"],"all, but":["well,"],"all, it's":["not"],"all, so":["I've"],"all, this":["good,"],"all, you":["don't"],"all-caps and":["it"],"all-caps). Consider":["getting"],"all. I":["considered","am"],"all. So":["in"],"all. This,":["and"],"all. Very":["intuitive."],"all. When":["somebody"],"allCaps function.":["I"],"all_lower for":["everything"],"allocation of":["an"],"allow acronyms,":["and"],"allow for":["such","spaces","much"],"allow it":["to"],"allow one":["person"],"allow outside":["parties"],"allow someone":["to"],"allow you":["to","to"],"allow your":["constructor"],"allowed alphabet":["but"],"allowed us":["to"],"allows us":["to","not"],"allows you":["to","to"],"almost a":["completely"],"almost all":["examples"],"almost always":["better","can"],"almost but":["cf"],"almost character-for-character":["the"],"almost everything":["about"],"almost forgot":["to"],"almost inlined":["all"],"almost like":["my"],"almost never":["see","using"],"almost only":["conventions,"],"almost seemed":["superficial."],"almost similar":["names","names,"],"alone in":["this"],"along a":["long"],"along the":["way.","lines","lines"],"along with":["the","list","`\\w+`","the"],"alot cleaner":["than"],"alpha character":["in","so"],"alpha in":["the"],"alpha symbols":["as"],"alpha\u003c/code\u003e. Also,":["I"],"alphabet but":["that's"],"alphabet, so":["I"],"alphabetic character":["to"],"alphagram (see":["[Alphagram](https://en.wikipedia.org/wiki/Alphagram))?"],"alphagram and":["lowercase","lowercase"],"alphagram before":["either"],"alphagram checking":["as"],"alphagram for":["original","original"],"alphagram function":["in"],"alphagram into":["its"],"alphagram is":["check"],"alphagram not":["a"],"alphagram of":["`self.word`","`self.word`."],"alphagram to":["find"],"alphagram variable":["for"],"alphagramming the":["word"],"alphanumeric chars:":["`\\w`"],"alphanumerical characters.":["There"],"already But":["this"],"already Just":["keep"],"already _way_":["over"],"already a":["mechanism","list","sequence"],"already an":["iterable."],"already been":["run."],"already breaks":["the","the","the","the","the","the"],"already checked":["that"],"already checks":["for"],"already computed":["attributes."],"already defined":["in"],"already do":["the"],"already does":["the","what"],"already excellent":["code"],"already existing":["constructor."],"already falsy,":["so"],"already have":["these"],"already have),":["which"],"already human-readable":["(because"],"already in":["`words`."],"already know":["that","about"],"already knows":["if","if"],"already located":["in"],"already makes":["a"],"already provides":["the"],"already resolve":["to"],"already returned":["if"],"already sanitized":["the"],"already says":["what"],"already seen":["this"],"already serves":["as"],"already takes":["into"],"already taking":["place"],"already tells":["a"],"already tests":["all"],"already the":["case"],"already think":["`words`"],"already too":["complex"],"already upper":["case."],"already use":["a"],"already, although":["your"],"already. I":["definitely"],"already. So":["there"],"alreeady know":["you"],"alright in":["vim,"],"alright. I":["haven't"],"also I":["don't","just"],"also a":["more","method","method","'pep8'","`pep8`","cli","method","culture","good"],"also added":["an","additional"],"also and":["FWIW,"],"also be":["considered","used","static,","the","expressed","readable","complicated","possible","a","simplified","simplified"],"also because":["nothing","if"],"also bothered":["by"],"also call":["it","`lower()`"],"also check":["for"],"also commented":["that"],"also consider":["moving","that"],"also considered":["`elif"],"also cool":["because"],"also could":["use","use","move","have","know"],"also counted":["in"],"also counts":["for"],"also create":["a"],"also deals":["with"],"also description":["of"],"also didn't":["understand"],"also disagree":["with","with"],"also does":["the"],"also don't":["need","understand"],"also equals":["with"],"also exist":["as"],"also fail,":["and"],"also felt":["more"],"also fix":["the"],"also forgot":["to"],"also get":["rid","rid"],"also give":["location"],"also gives":["you"],"also go":["to"],"also good":["if","to"],"also has":["implications","a"],"also have":["the","non-standard","an","to"],"also helpful":["(as"],"also ignore":["the"],"also in":["order?"],"also inconsistant":["-"],"also introduced":["a"],"also involve":["unicode"],"also just":["now"],"also like":["the","that","the","the"],"also look":["at","into"],"also looks":["cool)."],"also lower-level":["concepts"],"also make":["`is_question`","the","an"],"also missed":["the"],"also more":["confusing"],"also move":["the"],"also need":["to"],"also not":["that","use"],"also objected":["pretty"],"also pay":["attention","attention","attention"],"also please":["avoid"],"also questioning":["the"],"also rather":["loaded"],"also raw-string":["notion"],"also reasonable:":["keeps"],"also recommends":["to"],"also replace":["`len(message)"],"also replaced":["the","`.replace`"],"also requires":["more"],"also return":["`\"Fine.","true"],"also returned":["a"],"also says":["that"],"also stateless,":["so"],"also still":["have"],"also suggest":["just"],"also suggests":["to"],"also take":["advantage","a"],"also test":["separately"],"also thank":["you"],"also that":["how"],"also the":["ordering","pairs"],"also think":["it's","that","that"],"also thought":["of"],"also translate":["uppercase"],"also treat":["functions"],"also uppercase":["it"],"also use":["the","`s.endswith(\"?\")`","`not","`str.endswith(u\"?\")`.","method","`not`","list","regular"],"also used":["the","'falsy'"],"also using":["translate"],"also want":["to"],"also wanted":["my"],"also what":["do"],"also why":["abstract"],"also wonder":["if"],"also write":["checks"],"also, you":["can"],"alternate syntax.":["Maybe"],"alternative I":["could"],"alternative for":["the"],"alternative is":["to"],"alternative might":["be"],"alternative name":["might"],"alternative ways":["to","to"],"alternative would":["be","be"],"alternative you":["could"],"alternatively `filter()`":["or"],"alternatives since":["this"],"alternatives. For":["instance"],"although I":["consider","wouldn't"],"although `re.findall`":["would"],"although `word_count`":["is"],"although finditer":["is"],"although idiomatic":["slicing"],"although it":["would"],"although more":["robust"],"although the":["refactoring","comments"],"although your":["`silent`-function"],"altogether -":["however,"],"altogether. Not":["least"],"always \"felt\"":["better"],"always a":["good","string."],"always above":["half"],"always add":["file"],"always answer":["`'Sure.'`)."],"always be":["answered"],"always better":["to"],"always bugged":["me)"],"always can":["improve"],"always come":["first,"],"always cool":["to"],"always deals":["with"],"always end":["up"],"always forget":["about"],"always found":["translate","it"],"always had":["problems"],"always has":["comments\""],"always have":["string","spaces"],"always inherit":["from"],"always is":["`else`).","`else`),","`else`).","`else`).","`else`)."],"always more":["things"],"always needed":["to"],"always passes":["a"],"always practical":["`collections.Counter`)"],"always preferred":["that"],"always recalculate":["alphagram"],"always return":["``False``."],"always returns":["`True`"],"always searches":["at"],"always select":["the"],"always stay":["in"],"always supply":["the"],"always the":["natural","same."],"always tradeoff":["between"],"always truthy":["since"],"always try":["to"],"always use":["a"],"am I":["wrong?","missing"],"am a":["complete"],"am aware":["that"],"am count":["doing"],"am curious":["about:"],"am doing":["wrong.","several","the"],"am from":["Europe"],"am getting":["this"],"am just":["learning"],"am missing":["a"],"am not":["really","sure","so","trying","sure","on","sure","sure","sure","really","fully","really","sure","sure","sure"],"am now":["using","refactoring"],"am on":["a","a"],"am probably":["writing"],"am referring":["to"],"am starting":["the"],"am still":["unsure","not","surprised."],"am struggling":["with"],"am surprised":["how"],"am thinking":["they"],"am tracking":["the"],"am uncomfortable":["with"],"am used":["to"],"am using":["2.7,"],"am wrong":["about"],"amazingly an":["`isupper()`"],"ambiguity, refuse":["the","the"],"among a":["number"],"amount of":["code","activity","newlines","definitions"],"amount, and":["every"],"amounts of":["whitespace"],"an \"alphagram\".":["So"],"an \"anagram":["hash\""],"an \"application":["facade\""],"an \"application\"":["object"],"an \"order\"":["(\"priority\","],"an 'exceptional":["circumstance',"],"an IT":["student,"],"an OO":["language"],"an RNA":["sequence","sequence","sequence","class","string","class"],"an [`endswith()`](http://docs.python.org/2/library/stdtypes.html#str.endswith)":["test"],"an `.endswith`":["method"],"an `@lucienne`":["decorator,"],"an `AttributeError`)":["if"],"an `__init__`":["constructor","method"],"an ```AttributeError```":["will"],"an `elif`":["(or"],"an `else`":["clause.","clause","clause)."],"an `if":["..."],"an `if`":["structure,","statement"],"an `isupper()`":["string","method,"],"an abstraction":["behind"],"an accepted":["solution,"],"an accessor":["for"],"an accidental":["semicolon"],"an accurate":["name"],"an actual":["list","word","real"],"an added":["bonus."],"an addition":["list."],"an additional":["method","opportunity"],"an admin,":["and"],"an alias":["to","to"],"an alpha":["character"],"an alphagram":["before","into","variable","function"],"an alternative":["would","would"],"an anagram":["you","of"],"an anagram,":["the"],"an analog":["to"],"an api":["for"],"an appearance":["later."],"an appropriate":["level","name,","docstring"],"an arguably":["unneeded"],"an argument":["to","to","to","named"],"an array":["of"],"an array.":["In"],"an aside,":["whenever","when"],"an assignment":["statement"],"an attribute":["is","or","of","of","of","of","of","--","but"],"an clean":["solution."],"an earlier":["revision,"],"an easier":["way?","way"],"an easy":["assignment"],"an elephant\"?":["I"],"an elif":["to"],"an else":["statement"],"an emply":["string"],"an empty":["string","string,","string","string.","string.","string.","string?","string","hat","sentence","message.","message","string","string","string","string","string","string","string","string","string","string","string","string","string","string.","string","string","string","string,","string","string","string","string","string.","string.","string.","string","string","string","string.","string","string","string"],"an end":["of"],"an endswith.":["my"],"an environment":["with"],"an equally":["performant"],"an equivalent":["regular"],"an error":["because","if","which","a","if","if","like"],"an error...":["can"],"an error?":["Second,"],"an even":["simpler"],"an exact":["duplicate"],"an example":["of","to"],"an example-driven":["rather"],"an exception":["either","on","of"],"an exception.":["In"],"an exceptional":["case,"],"an exchange":["of"],"an exercise":["in"],"an exercise,":["it"],"an explanation":["on"],"an explicit":["pairing","test","len"],"an expression,":["which"],"an extra":["object","RNA","conversion","dependency"],"an extremely":["minor"],"an has":["more"],"an hour":["of"],"an idea":["does"],"an if":["statement","are"],"an if/elif":["chain"],"an if/elif/else":["with"],"an illusionist":["has"],"an implementation":["detail,","detail,","detail,","detail","artifact","(\"private\")","detail,","that"],"an implied":["one."],"an import,":["I"],"an important":["distinction"],"an in-place,":["mutating"],"an index":["of"],"an indication":["of"],"an individual":["character"],"an inexperienced":["python"],"an inherited":["`Responses`"],"an initializer":["other"],"an inner":["class."],"an input":["of"],"an instance":["of","variable.","variable","member.","variable,","method","method.","method","variable,","variable.","variable,","of"],"an instance,":["and"],"an instance.":["Then"],"an instance;":["a"],"an integer":["was","was"],"an interesting":["bit","idea."],"an internal":["count"],"an invalid":["value,"],"an is_silent":["function?"],"an issue":["about","describing","on","here,","where"],"an issue.":["Your"],"an item":["in"],"an iterable":["so"],"an iterable.":["The","This"],"an iteration.":["You'll"],"an iterative":["approach?"],"an non-existent":["key"],"an object":["in","property?","hiding","seems","implementing","(rather"],"an object,":["but"],"an obscure,":["arbitrary"],"an obvious":["thing","copy.","code"],"an odd":["name"],"an old":["style","version...I","version...I"],"an old-style":["class","class.","class"],"an older":["`Bob`","version"],"an operation":["be"],"an outdated":["test"],"an overkill":["to"],"an returning":["whether"],"an sandpit":["in"],"an underscore":["(or","or","to","and","are,"],"an underscore,":["so"],"an understanding":["if"],"an underutilized":["part"],"an unknow":["input."],"an unnecessary":["indirection.","method,"],"an unqualified":["`except:`,"],"an unused":["one."],"an uppercase":["letter","letter","in"],"anagram and":["make","a"],"anagram characters":["as"],"anagram check":["to"],"anagram could":["be"],"anagram detection":["in"],"anagram import":["Anagram"],"anagram is":["equal"],"anagram list":["to"],"anagram of":["word."],"anagram than":["sorting"],"anagram was":["getting"],"anagram were":["represented"],"anagram you":["don't"],"anagram, the":["other"],"anagram-wise comparison":["is"],"anagram. Also":["there's"],"anagram. This":["implementation"],"anagram](http://exercism.io/hostmaster/python/anagram). So":["have"],"anagram_list if":["sorted(item.lower())"],"anagrams of":["each","each"],"anagrams or":["to"],"anagrams were":["looked"],"anagrams, and":["implementation"],"analog to":["dot"],"analysing the":["contents"],"analysis in":["`type`"],"analysis is":["therefore"],"analysis of":["input","the"],"analysis to":["assist"],"ancestor class,":["or"],"and \"U\"":["are","to"],"and \"elif\"":["do"],"and \"else\".":["Flat"],"and \"protocols\"":["of"],"and \"questions\",":["but","but"],"and \"sorted\"":["representations"],"and \"warranty":["void"],"and 'T'":["characters."],"and 'T',":["but"],"and 'U'":["out","to","(and"],"and 'U'.":["These"],"and 'learn":["python"],"and (if":["you're"],"and **.endswith()**":["to"],"and **interesting":["phrasing"],"and *list":["comprehensions*"],"and *uracil*":["are"],"and *yelling*":["even"],"and ...":["and"],"and ...`":["in"],"and .isupper()`":["for"],"and 14,":["so"],"and 16,":["I"],"and 2":["blank"],"and 2/":["having"],"and 25),":["since"],"and 3.x":["compatibility,"],"and 4":["nucleotides","now","useless."],"and 400,":["the"],"and 9":["look"],"and @agustina)":["i"],"and @jairo":["for"],"and @noemy.":["I'll"],"and Bob":["is"],"and Counter":["should"],"and FP":["try","in"],"and FWIW,":["empty"],"and Fred":["classes"],"and I":["don't","see","always","approve","like","wanted","found","like","understand","think","got","am","may","found","think","like","always","agree,","was","don't","don't","thought","prefer","removed","didn't","currently","went","still","agree","may","don't","don't","really","like","would","gave","thought","shouldn't","forgot","figure","see","came","refuse.","find","like","didn't","can't","don't","would","really","think","learned","am","would"],"and I'm":["pretty","not","not","just","still"],"and I've":["made"],"and IF":["those"],"and Kwpolska.":["Wasn't"],"and L7:":["parentheses"],"and None":["later"],"and OO.":[";)"],"and Python":["3","idioms"],"and Python3":["installed"],"and Pythonic":["way"],"and Pythons":["falsy"],"and RNA":["are","conversion,"],"and RNA.":["So"],"and Ruby":["and","where"],"and Sentence":["felt"],"and Statement,":["but"],"and [str.isspace](http://docs.python.org/2/library/stdtypes.html?highlight=isspace#str.isspace)":["to","to","to","to"],"and [str.isspace](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isspace)":["to"],"and __is_shouting":["methods"],"and _sanitize_":["are"],"and `":["\"\"\""],"and `\"Sure.\"`).":["There"],"and `\"foo\"":["%"],"and `.elements()`":["are"],"and `.parts`":["as"],"and `.standard_form`:":["No,"],"and `==":["11`"],"and `@garry`":["in"],"and `Anagram`":["can"],"and `Bob.hey`":["contains"],"and `Bob.isEmpty`,":["I'd"],"and `Bob`":["is"],"and `Counter`":["constructor!"],"and `DNA.to_rna`":["method."],"and `False`":["are"],"and `None`":["values."],"and `URACIL`":["for"],"and `U`":["are"],"and `Word.normalized`":["ought"],"and `Word.standard_form`":["really"],"and `Word.string()`":["for"],"and `Word.string()`:":["I"],"and `]`":["(making"],"and `]`.":["(guess"],"and `__field_name`":["–"],"and `_next_of`":["doesn't"],"and `_standardized`":["renamed"],"and ``'U'``":["means"],"and ```":["dispatch"],"and ```or```s":["in"],"and ``is_silent()``":["as"],"and ``is_silent``)":["plain"],"and `anything_else`":["branches"],"and `asking`":["methods,"],"and `contains_alphas`":["more"],"and `dispatch(self,":["num)`"],"and `else:`.":["Could"],"and `else`":["statement"],"and `endswith()`":["methods","-","They"],"and `endswith`":["methods","in"],"and `filter`,":["but"],"and `if":["not"],"and `isEmpty`":["as"],"and `isQuestion`":["but"],"and `is_asking_politely`":["conditions"],"and `is_exclamatory`":["are"],"and `is_question`":["?"],"and `is_shout`,":["`is_silent`,"],"and `is_silence()`":["could"],"and `isupper()`,":["which"],"and `itertools`":["modules"],"and `message`":["was"],"and `not":["saying"],"and `nucleotide_counts`":["just"],"and `original`":["might"],"and `pretty`":["methods","generic."],"and `re.search(pattern,":["string)`"],"and `responses`":["really"],"and `return`":["statements"],"and `rna_string`":["are"],"and `s`,":["`text`,"],"and `sing`":["methods"],"and `sort`":["methods"],"and `source_word`":["to"],"and `str.isspace`":["method"],"and `str.isupper`":["from"],"and `string.punctuation`-":["but"],"and `translate`":["here,"],"and `uppercase`":["doesn't"],"and `word_count`.":["The"],"and `wordcounter`":["being"],"and `words`":["non-public","is"],"and `words`.":["I"],"and `y`":["is"],"and `y`s.":["Those"],"and a":["`super`","couple","space.","for","`dict`","\"domain\"","`None`","`for`","for","tiny","philosophy.","dict","sorted","function","lot","bit","len()","compliment","getter","third"],"and abstraction":["level,"],"and accurate":["function"],"and action":["in"],"and actual":["measurements"],"and add":["space"],"and added":["a","purpose","a"],"and again":["newly"],"and again,":["this"],"and against":["having"],"and agile":["-"],"and all":["the","characters","of"],"and allow":["for"],"and alphagramming":["the"],"and also":["because","I","that","gives","raw-string"],"and always":["return"],"and an":["empty"],"and another":["one"],"and answers,":["but"],"and any":["instance","instance","extra"],"and apparently":["there"],"and appease":["the"],"and argument":["name."],"and as":["such,","such"],"and associated":["return"],"and assume":["that","it","you're"],"and assumes":["too"],"and attributes":["could"],"and avoid":["the","early","stray","`matches.append`."],"and b)":["you'd","disguise"],"and be":["enlightened","done"],"and been":["encouraged"],"and being":["silent"],"and believe":["they"],"and blank":["string"],"and branching":["in"],"and brutal":["feedback"],"and buy":["some"],"and by":["all","using"],"and caching":["the","(like"],"and call":["any","the","`to_rna`"],"and calling":["a"],"and can":["easily"],"and can't":["see"],"and capitalization).":["Combined"],"and cast":["to"],"and chances":["are"],"and change":["your"],"and characteristics.":["The"],"and check":["how"],"and checking":["to","that"],"and chose":["good"],"and class":["definition.","definition.","names"],"and class.":["Will"],"and classes":["to"],"and classify":["them"],"and clean":["method"],"and clean.":["I","Couple"],"and cleaner":["but"],"and cleaning":["up"],"and cleanup":["is"],"and clear":["to","processing."],"and clearly":["written.","written."],"and closed":["for"],"and code":["should"],"and cohesive":["objects"],"and collections.Counter":["are"],"and compact":["and"],"and compact.":["I'm"],"and compare":["those"],"and compared":["my","my"],"and comparing":["it"],"and complex.":["Something"],"and concise,":["as"],"and conquer\",":["but"],"and consistent":["style"],"and constants":["that"],"and constructing":["a"],"and convert":["the"],"and convert.":["Why"],"and count":["in","char"],"and crazy,":["but"],"and decided":["to","change"],"and deciding":["whether"],"and definitely":["a"],"and delegation":["going"],"and dictionaries)":["are"],"and dictionary":["for"],"and did":["some"],"and difficult":["to","to"],"and digits":["are"],"and direct":["assignment"],"and discrete":["set"],"and do":["the","that","the"],"and documented":["public"],"and does":["not"],"and doesn't":["have","convey","have","need","seem"],"and doesnt":["error"],"and doing":["so"],"and don't":["need","bother"],"and double":["only","blank","check"],"and draws":["my"],"and drop":["the"],"and e.g.":["atm"],"and each":["candidate."],"and easier":["to"],"and easy":["to","to","to","to"],"and effectively":["setting"],"and efficient":["way","using","code."],"and elegant":["version"],"and embedding":["high"],"and empty":["string","string"],"and end":["of","with,"],"and especially":["no"],"and even":["loops,","went","potentially","allow"],"and every":["time.","'if'"],"and everything":["has"],"and evident":["the"],"and expects":["\"Be"],"and explain":["what"],"and expose":["an"],"and express":["what"],"and expresses":["code"],"and expressive":["using","code,"],"and extend":["it"],"and extract":["text"],"and figure":["out"],"and filter":["are"],"and filtering":["to"],"and final":["`else`"],"and find":["a"],"and first":["point","method."],"and fix":["the","the"],"and focused":["reusable"],"and for":["2.x/3.x","me","no"],"and foremost,":["in"],"and forgot":["`methodonce`","almost"],"and forth":["unable","I"],"and functions":["are"],"and generally":["make","discouraged."],"and generic":["as"],"and get":["rid","rid","rid","rid","rid","the","rif"],"and getting":["rid","wrong"],"and gives":["the","class","class"],"and go":["for"],"and good":["use"],"and google,":["but"],"and got":["bogged","a"],"and grammar":["so"],"and grammar,":["it's"],"and group":["them"],"and guides.":["I"],"and had":["to","not"],"and harder":["to"],"and has":["some","**explicit","intention","explaining","good"],"and have":["the","been","verified","the","a"],"and having":["a","`count`"],"and hide":["the"],"and high":["as"],"and his/her":["commit"],"and hope":["to","to"],"and i":["wonder"],"and idiomatic":["Python","approach"],"and idiomatic.":["(See"],"and if":["it","it","they","it","having","you","you"],"and imperative":["steps."],"and implementation":["details"],"and implicit":["conversion"],"and in":["a","your","the","fact","python","solution"],"and inconsistent":["with"],"and indicates":["that"],"and inline":["`self._normalize`"],"and input":["was"],"and inputs":["validations"],"and instantiated":["a"],"and interesting,":["I'm"],"and into":["the","a"],"and introduced":["constants"],"and intuitive":["solution."],"and inverting":["it,"],"and is":["generally","generally","not","the","quite","a","much","expected","even","much","very","it"],"and isUppercase`":["is"],"and is_question":["functions"],"and it":["would","won't","would","cut","should","isn't","has","is","would","should","does","could","just","will","is","seemed","might","would","seemed","works","doesn't","appears","appears","always","strikes","ignores","returns","is","won't"],"and it's":["ok","better","awesome.","badly","mostly","not","`DNA`","easier","not"],"and its":["already","immediately"],"and just":["serves","had","raise","get","try","return","return.","assumed","about"],"and keep":["a"],"and known":["that"],"and learn":["more"],"and learning.":["For"],"and leave":["to","it","out"],"and len(text.strip())":["&gt;"],"and less":["complected","readable."],"and lets":["it"],"and limiting":["a"],"and lines":["of"],"and list":["comprehension","comprehensions","comprehensions,"],"and listing":["them"],"and localised":["change"],"and logic":["are"],"and logic:":["I"],"and looked":["for"],"and looking":["at"],"and lower-case":["L"],"and lowercase":["the","attributes"],"and lowercasing":["char","a"],"and made":["`._sanitize`"],"and main":["logic"],"and maintain)":["for"],"and maintainability":["by"],"and make":["the","it","the","`Phrase.word_count`","`Bob.hey()`","sure","clearer","those"],"and makes":["control","sense","line"],"and making":["a","use"],"and manage":["your"],"and many":["experienced"],"and matching":["a"],"and may":["be"],"and meaningful":["`endswith`","strings"],"and memoization":["will"],"and message.strip())`":["doesn't"],"and method":["names","calls."],"and methods":["to","in","(whether","are","are","are","very","such"],"and mine":["just"],"and modify":["nucleotide","if"],"and modular;":["isn't"],"and more":["concise","about","complexity.","complicated","objecty.","intent-oriented","pythonic.","to","intuitive,","readable","readable,","readable"],"and most":["beginner"],"and mostly":["in","in"],"and move":["the"],"and moving":["checks"],"and much":["more"],"and my":["current","efficiency."],"and naming":["convention","conventions","conventions.","it"],"and need":["to"],"and neither":["is"],"and new":["style"],"and new-style":["classes](http://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python),"],"and newlines":["I"],"and nits":["on"],"and no":["one","one","'ifs'.","trailing","need"],"and non-space":["characters"],"and none":["of","handling."],"and normalization":["could"],"and not":["just","garanteed","the","in","as","plain","strings,","what","a","sure","comprehending","evaluate","slavish","make","my","elif","self.string.islower()`","really","according","their","required","re.seach(r\"[a-z]\","],"and nothing":["at"],"and now":["that","it","it's"],"and numeric":["zeros"],"and obscure":["the"],"and obvious":["now."],"and of":["course"],"and often":["easier"],"and on":["the","line","that"],"and one":["more","blank","from","single","for"],"and only":["interpret","resort","some","have","one","at","if","if","if","`yield`"],"and operation":["starts"],"and optimizing":["for"],"and order-independant":["scheme"],"and other":["languages","python","inheritance"],"and others":["to"],"and otherwise":["non-idiomatic","non-idiomatic"],"and over":["with","again.","again.","you"],"and override":["classify"],"and par":["of"],"and passing":["a"],"and pep8":["formatting"],"and persists":["for"],"and philosophy,":["you"],"and phrase[-1]":["=="],"and play":["a"],"and point":["interface"],"and poking":["at"],"and poor":["style,"],"and potentially":["the"],"and powerful":["functionalities"],"and practically.":["In"],"and precise":["name."],"and preference.":["Generally,"],"and prefix":["`is`,"],"and private,":["it"],"and procedural":["solution."],"and process/sanitize":["string"],"and projects":["like"],"and properties":["but"],"and property":["names"],"and property.":["Ah"],"and provide":["a"],"and providing":["access"],"and pseudo-code":["as"],"and putting":["formatting"],"and python":["now"],"and python3.3":["and"],"and query":["methods"],"and questions":["private","and"],"and re":["notes"],"and re.findall":["could"],"and re.search(r\"[a-z]\",str)":["=="],"and read":["nicer"],"and readable":["as",":-D","solution."],"and readable,":["good","just"],"and realized":["that"],"and reassign":["along"],"and reassigning":["it"],"and recommended":["in"],"and redundant.":["Other"],"and refactored":["```"],"and refreshing.":["It's"],"and remove":["the","punctuation"],"and removed":["the"],"and replace":["the","is","it"],"and replacing":["with"],"and require":["that"],"and requires":["new"],"and resetting":["it","so"],"and response":["(for","labels"],"and responses":["at"],"and responses.":["Per"],"and return":["`None`","on","that","instantly?","statements","`RNA(self.replace(\"T\",","as","it"],"and returning":["once","the","result","it","it,"],"and returns":["another","answers","on"],"and running":["fewer"],"and s.lower()":["!="],"and sanitize":["`message`"],"and saw":["it"],"and say":["it's"],"and say()":["are"],"and secondly":["to"],"and see":["if","a","what","if"],"and segregated":["them,"],"and self":["explanatory."],"and self-describing.":["What"],"and self-documenting":["to","to"],"and self-documenting.":["I","You"],"and self._sorted":["=="],"and self.y":["%"],"and sentence[-1]":["=="],"and separate":["the"],"and setter":["methods","methods,"],"and setters":["since"],"and settled":["on"],"and short":["code,","solution,","solution.","solution."],"and should":["be","be"],"and shout":["could"],"and shrink":["to_dna"],"and side-note":["about"],"and signals":["any"],"and silence":["exceptions"],"and simple":[":D","`DNA.to_rna`","solution.","solution.","solution."],"and simply":["returning","do","iterate"],"and since":["all"],"and skip":["`filter`"],"and slightly":["misleading"],"and so":["the","on","is","using","on","shouldn't","is","goes"],"and some":["simple"],"and something":["else"],"and sort":["them"],"and sorting":["would","them"],"and spaces":["on"],"and specially":["NOT"],"and specific":["name"],"and speed":["things"],"and started":["creating"],"and starts":["to"],"and statement":["predicates"],"and stop":["execution."],"and store":["it,","them","the"],"and str.translate,":["regexp,"],"and straight":["forward","forward.","forward"],"and straightforward":["so","as"],"and straightforward,":["which"],"and string":["conversion"],"and string-specific":["methods)"],"and struggling":["to"],"and stuff)":["?"],"and stuff).":["Why"],"and submit":["it."],"and submitted":["a"],"and subsequently":["serving"],"and succinct":["code."],"and sufficiently":["clear."],"and sweet.":["The"],"and syntax.":["\"I"],"and tabs":["vs."],"and tbh,":["I'm"],"and tell":["me"],"and test":["`Counter(self._word)"],"and testable":["solution"],"and tests":["only"],"and that":["only","why","is","the","will","there","they","potentially","a","they","is","internal","it","will","would","had","sent","is"],"and that's":["a","why"],"and the":["meaning.","parts","comments","answers","second","simple","RNA","underlying","efficiency","response","second","variable","implementation","failure","punctuation","kitchen","style",".endswith('?')","`for`","predicate-&gt;answer","`findall`","`for`","tests)","dispatcher","initializer","class","\"function","function's","'sorted'","code","method.","tests","function","normalization","'and'","fact","new","new","response","shouting","re","complexity","list","second"],"and then":["reference","you","make","accidentally","check","a","mixed","I","use","you","check","look","Python","updated","just","operate","perform","make","use","bob","just","one","discarding","decide","calling","returning","calling"],"and there":["are","is","is","are","is"],"and there's":["also","no","at"],"and there.":["Great!"],"and therefore":["more","the","be"],"and they":["aren't","are","don't"],"and they're":["not"],"and think":["about"],"and third":["if","`if`"],"and this":["feels","approach"],"and those":["methods"],"and thus":["avoid","appended","has"],"and to":["me","the","hide","express","view"],"and too":["unwieldy"],"and took":["about","out"],"and totally":["unpythonic."],"and trailing":["characters.","whitespace,"],"and translate":["over"],"and treats":["translates"],"and try":["`Phrase.wordcounter","out"],"and trying":["out"],"and two":["calls","classes"],"and type":["`help(str)`"],"and unbound":["methods)"],"and underscore":["delimited."],"and understand.":["By"],"and understandable":["from"],"and unions":["are"],"and unless":["you"],"and unnecessarily":["converting"],"and update":[":)"],"and updated":["my"],"and uploaded":["a"],"and uracil,":["but"],"and usage":["(i.e."],"and use":["the","the","of","it","`not","it","split","regexp"],"and used":["such","a","small,","split"],"and uses":["__explicit"],"and using":["the","standard","a"],"and verb,":["or"],"and very":["very","readable"],"and want":["to"],"and was":["used"],"and we":["don't","don't","don't"],"and well":["structured.","structured.","documented"],"and were":["easy"],"and what":["they","is","the","happens"],"and when":["needed_,","it"],"and whenever":["I"],"and where":["it","you'd"],"and whether":["the"],"and which":["kind"],"and while":["we're","it"],"and whole":["type-system","type-system"],"and why":["import","in","map"],"and will":["change","never","give"],"and winds":["up"],"and with":["undesirable","concise","a"],"and won't":["need"],"and wondering":["if"],"and word_count":["invokes","all"],"and words":["now,"],"and work":["with."],"and would":["be","delete","force","not"],"and wouldn't":["break"],"and wrapping":["it"],"and write":["```"],"and writing":["a"],"and yelled":["question"],"and yes":[":"],"and yes,":["when","as"],"and yes:":["there's","you","you","if"],"and you":["spoiled","should","*almost","instantly","could","don't","lower","can","returned,","can","could","never","still","could","won't","don't","shouldn't","won't","cannot","don't","can","will","can"],"and you'll":["just","see"],"and you're":["set.","totally"],"and/or additional":["comments"],"angle yet.":["I"],"annotation creates":["only"],"annotations and":["a"],"anonymous functions":["is"],"anonymous functions.":["Don't"],"another `Anagram`":["instance."],"another `FormattedWord`":["as"],"another `RNA`":["subclass"],"another `Word`":["instance"],"another ```":["FormattedWord"],"another `if`":["statement"],"another class":["is"],"another developer":["looked"],"another function":["that","and"],"another good":["reason"],"another if,":["because"],"another iteration":["that"],"another look":["at","at","at","at"],"another method":["on","which","on","on"],"another method,":["or"],"another module":["as"],"another module,":["eg.:"],"another new-style":["class,"],"another one":["with","(`sort`)"],"another person":["I'd"],"another solution":["used"],"another string.":["Since"],"another submission,":["which"],"another thing":["I've"],"another update":[":)"],"another use":["for"],"another value":["(it"],"another version":["but"],"another way":["to","how","to"],"another weird":["character"],"another's page?":["EDIT:"],"another, or":["how"],"another/different class":["(different"],"ans I":["think"],"answer (or":["I"],"answer false":["if"],"answer from":["map()."],"answer hardwired":["in"],"answer if":["no"],"answer is":["not","more"],"answer should":["be"],"answer strings":["in"],"answer when":["`message`"],"answer your":["first","comment","question:","questions."],"answer' line":["to"],"answer) methods":["instead"],"answer, but":["that"],"answer, which":["should"],"answer: the":["string"],"answerd hardcoded":["into"],"answered before":["others,"],"answers 'Sure.'":["if"],"answers 'Whatever.'":["to"],"answers (I":["didn't"],"answers and":["the"],"answers are":["given"],"answers as":["a"],"answers combined":["in"],"answers to":["this"],"answers would":["make"],"answers you":["are"],"answers\" even":["after"],"answers, but":["there's"],"answers. Shouts":["will"],"answers. Then":["you"],"anwer. Read":["the"],"any TDD":["happening"],"any added":["complexity"],"any alpha":["character"],"any better":["name)."],"any case":["in","where","I","when"],"any chance":["I'd"],"any changes,":["consider"],"any circumstances,":["and"],"any comments,":["since"],"any compatible":["type)"],"any compelling":["reason"],"any departure":["from"],"any extra":["tests"],"any feed":["back!"],"any feedback":["on","is"],"any flaws":["in"],"any function":["you"],"any given":["time,"],"any ideas":["/"],"any in":["Python"],"any indication":["of"],"any instance":["when","when"],"any iterable":["you"],"any kind":["of"],"any kind.":["It's"],"any language":["with"],"any language's":["\"beauty\""],"any languages\"":["syndrom..."],"any limitations":["to"],"any loss":["there."],"any lower":["case"],"any more":["complicated,"],"any more.":["The"],"any nitpicker":["could"],"any non-empty":["words"],"any non-trivial":["anonymous"],"any number":["of","of"],"any object":["offers"],"any of":["the","these","the","new-class","new-class","new"],"any other":["reason","predicate","way?","predicate-\u003eresult","way.","type.","false"],"any overhead":["like"],"any passed":["tests"],"any problems":["with"],"any projects":["where"],"any pyflakes/PEP8":["issues;"],"any python":["dev"],"any question":["that"],"any rate,":["I've"],"any reason":["to"],"any safety":["checks"],"any sense":["in"],"any simpler":["way"],"any special":["requirement"],"any state":["or"],"any thoughts":["about"],"any type":["or"],"any umlaut":["tests,"],"any unknow":["input"],"any use.":["on"],"any useful":["information"],"any validation),":["having"],"any visible":["benefits,"],"any way":["to"],"any way,":["they"],"any way.":["Why"],"any white-box":["testing"],"any would":["respond."],"any(c.isalpha() for":["c","c"],"any(x.isalpha() for":["x"],"any), i.e.":["doesn't"],"anybody learn":["this"],"anybody out":["there?"],"anymore. I":["used"],"anymore? Will":["the"],"anyone explain":["those"],"anyone think":["of"],"anyone vote":["for"],"anyone working":["with"],"anything I'd":["be"],"anything about":["the"],"anything and":["b)","it's"],"anything as":["far"],"anything bare":["class"],"anything but":["Ruby"],"anything else":["than","than","in"],"anything else,":["...\","],"anything else.":["Maybe","In"],"anything except":["a"],"anything from":["a"],"anything here":["but"],"anything in":["that","Python,","particular","an"],"anything like":["that."],"anything since":["they"],"anything that":["evaluates","fails"],"anything that's":["not"],"anything then":["you"],"anything there":["(object"],"anything to":["unlock","two"],"anything when":["run"],"anything with":["a","a"],"anything) AND":["independant"],"anything). But":["now"],"anything, just":["makes"],"anything, maybe":["the"],"anything, so":["if"],"anything` which":["could"],"anytime soon),":["so"],"anyway (I":["don't"],"anyway (easy":["to"],"anyway (re.compile)":["to"],"anyway and":["it"],"anyway because":["I"],"anyway is":["that"],"anyway, but":["they"],"anyway, this":["code"],"anyway, you":["only"],"anyway. Could":["just"],"anyway. I":["imagine"],"anyway. Plain":["old"],"anywhere else":["in"],"apart (as":["in,"],"apart from":["Bob"],"api for":["classifying","Bob."],"api. Usually":["prefixing"],"app like":["it"],"app nucleotides":["could"],"apparent without":["reading"],"apparently involved":["an"],"apparently there":["are","is"],"appeal of":["having"],"appear in":["the","the"],"appeared in":["each"],"appears I":["have","have"],"appears pretty":["straightforward"],"appears that":["it"],"appease the":["gods","unit"],"appended to":["the"],"appending other":["strings"],"appending single":["underscore"],"appends itself":["to"],"applicable? This":["could"],"application class":["(technical"],"application entry":["point,"],"application that":["will"],"application to":["get"],"application. There":["didn't"],"applications, and":["I"],"applied and":["you"],"applied on":["a"],"applied to,":["and"],"applies here.":["With"],"apply [Single":["Responsibility"],"apply here":["too."],"apply the":["clue","Open/Closed"],"apply things":["you've"],"apply. I":["think"],"applying `replace`":["to"],"applying the":["first"],"appreciate all":["the"],"appreciate feedback":["on"],"appreciate it":["if"],"appreciate pointing":["that"],"appreciate the":["clarity","feedback.","defensive"],"appreciate your":["comment,","feedback"],"appreciated. Definitely":["looks"],"approach (though":["@davon"],"approach I":["would"],"approach I'm":["missing?","missing?"],"approach actually":["makes"],"approach all":["in"],"approach and":["it's"],"approach at":["the"],"approach because":["it"],"approach but":["the"],"approach could":["be"],"approach creates":["a"],"approach in":["`match`","Python"],"approach is":["just","growing","fun","much","really","favored,"],"approach it.":["I'll"],"approach keeping":["code"],"approach made":["it"],"approach this":["problem."],"approach to":["it.","the","express","filtering","the","use"],"approach where":["`MessageClassifier`"],"approach with":["using"],"approach works":["exactly"],"approach would":["be","probably"],"approach you":["won't"],"approach you're":["taking"],"approach! Nothing":["for"],"approach, and":["sufficiently","mine"],"approach, as":["well,"],"approach, but":["having","clean","not"],"approach, especially":["the"],"approach, though":["I"],"approach, you":["don't"],"approach. For":["the"],"approach. Generally":["a"],"approach. However,":["there"],"approach. I":["considered","really"],"approach. Why":["are"],"approach. You":["could"],"approach. one":["minor","minor","minor"],"approachable either).":["It"],"approachable, the":["one"],"approached with":["*text*."],"approaches and":["settled"],"approaches for":["same"],"approaches to":["problems"],"approaches; the":["GUI"],"approaching. It's":["always"],"appropriate because":["in"],"appropriate data":["structure","structure"],"appropriate docstring":[";-)"],"appropriate for":["code"],"appropriate if":["statement"],"appropriate in":["each"],"appropriate level":["of"],"appropriate method":["names,"],"appropriate name":["than"],"appropriate name,":["I"],"appropriate response":["for"],"appropriate responses":["for"],"appropriate than":["the"],"appropriate to":["the","use"],"appropriate value":["in"],"appropriate. The":["doc"],"appropriately and":["then"],"appropriately be":["made"],"appropriately.\" \"else":["is"],"appropriatly (hint:":["Python"],"approval process,":["though..."],"approvals or":["rather"],"approve it.":["There's"],"approve this":["solution","though."],"approved, you":["can"],"arbitrarily overcomplexified":["way"],"arbitrary all":["the"],"arbitrary number":["of"],"arbitrary specification":["-"],"are (or":["could"],"are 1/":["having"],"are 3":["solutions"],"are Bad(tm).":["You"],"are I":["think"],"are OK":["in","in"],"are YAGNI,":["and"],"are _ambiguous_":["for"],"are `'foo'`,":["not"],"are `DNA":["|"],"are `False`":["in"],"are `Word.raw`":["and"],"are `Word.really_raw`":["and"],"are a":["couple","bit","bit","string","bunch","bit","lot","lot","bit","lot","little","habbit","bit","few"],"are able":["to"],"are about":["a"],"are actually":["done."],"are all":["set","good","written"],"are already":["used."],"are also":["cool"],"are always":["more"],"are anagrams":["of","of"],"are another":["way"],"are appreciated":[":)"],"are associated":["with"],"are automagically":["concatenated"],"are automatically":["converted"],"are available":["for","yet!"],"are avoiding":["work"],"are based":["on"],"are best":["left"],"are better":["preserved"],"are both":["false."],"are bound":["and"],"are built":["at"],"are called":["(yes,"],"are calling":["`.strip`"],"are caps":["-"],"are chain-able,":["why"],"are characters":["replacements."],"are checking":["punctuation,","for"],"are class":["attributes.","attributes"],"are clear":["enough,"],"are comments":["to"],"are comments,":["but"],"are concise":["and"],"are conflated":["in"],"are considered":["GoodPractice(tm)"],"are constantly":["learning,"],"are constants,":["and"],"are converting":["all"],"are cool":["too",":)"],"are correctly":["put"],"are couple":["other"],"are covered":["by"],"are creating":["addidtional","a"],"are cryptic":["(like"],"are curios":["there"],"are dealing":["with."],"are definitely":["arguments","simpler"],"are distinct":["entities."],"are doing":["the","the"],"are doing,":["but"],"are dynamic":["or"],"are edge":["cases."],"are enough":["is"],"are equally":["valid,"],"are essentially":["equivalent."],"are even":["first-class"],"are exceptional.":["I"],"are expandable":["for"],"are expressive,":["for"],"are false,":["as"],"are faster":["in"],"are flawed":["here)."],"are for":["the"],"are formulating":["Bob's"],"are functional":["and"],"are functionally":["equivalent"],"are functions":["that"],"are generally":["reserved","reserved","discouraged.\""],"are given":["DNA,","directly"],"are going":["to","to","to","to","to","to","to","the","to"],"are good":["for","to"],"are great,":["but"],"are guiding":["principles"],"are hard":["to"],"are has":["more"],"are here.":["In"],"are hinting":["that"],"are implemented":["and"],"are implementing?":["Would"],"are in":["one","`bob`","ipdb","this"],"are included":["in"],"are incosistient":["in"],"are instance":["attributes"],"are intending":["to"],"are internal":["and"],"are interpreted":["in"],"are just":["methods","two","few","those","a","things"],"are kind":["of","of","of"],"are laid":["out","out"],"are left":["in"],"are letters":["and"],"are like":["an"],"are limited":["to"],"are located":["below"],"are logically":["grouped"],"are lost.":["So"],"are made":["for","in"],"are magic":["constants."],"are many":["more"],"are marked":["with","as","as"],"are maybe":["my"],"are meant":["to","to"],"are mentioned":["in"],"are messages":["defined"],"are minor":["improvements"],"are missing":["abstraction"],"are module":["*private*"],"are more":["succint","succint","complex,","readable","types","lines","appropriate.","pythonic","important","than"],"are most":["correct/important.","familiar","of"],"are much":["more"],"are my":["thoughts."],"are named":["after"],"are names":["added"],"are nearly":["useless,"],"are necessary":["in"],"are necessary,":["I"],"are needed":[":)"],"are never":["passed"],"are new-style":["classes."],"are nice":["from"],"are nice,":["but"],"are no":["side","extra","characters.","instance"],"are not":["as","well","so","really","necessary","cool,","supposed","relevant","syntactically","neccessarily","associated","defined","defined","public.","required","useful,","required","useful,","immediately","using","using","using","really","needed","really","uppercase)."],"are not.":["The"],"are now":["easier"],"are nuisances":["to"],"are objects":["too,","(and","too).","too).","on","on","on","too","too).","too)","too)"],"are objects,":["and"],"are of":["course","cause"],"are often":["simpler"],"are ok":["in"],"are on":["the"],"are only":["implementation","used","implementation","implementation","symbols","defined"],"are ordered":["prompts"],"are other":["solutions","string"],"are otherwise":["two"],"are pairs":["(2-uples),"],"are passing":["the"],"are perfectly":["aware"],"are picked":["up"],"are possibly":["a"],"are practicing":["implementing"],"are prefixed":["with"],"are pretty":["slow","much","vague","redundant,"],"are probably,":["though"],"are put":["together"],"are quick,":["but"],"are quite":["redundant","smart,","generic"],"are rather":["redundant","redundant","smarts,"],"are re-using":["the"],"are really":["saying","complex","class-level","class-level","meaningful,","methods","dead","implementation","functions,"],"are redundant":["because","because","(other","-","-"],"are redundnat.":["Single"],"are registered,":["which"],"are relegated":["to"],"are removed":["from"],"are replacing":["a"],"are reserved":["for","for","for","for"],"are reusing":["instance"],"are right":["regarding","about"],"are right,":["a"],"are saying":["something,"],"are searching":["for."],"are set":["up"],"are several":["simpler","things","functions"],"are short":["enough"],"are shouted":["are"],"are simple":["I'd"],"are simpler":["ways"],"are smart)":["-"],"are smart.":["They"],"are so":["widely"],"are some":["unnecessary","unnecessary","suggestions:","tips","suggestions","that","pretty","how","remarks:"],"are somehow":["named,"],"are sound.":["Now"],"are still":["on","useless.","accessible"],"are subject":["to"],"are super-explicit":["and"],"are supposed":["to"],"are sure":["that"],"are technically":["tuples,","correct","the"],"are tested":["in"],"are testing":["for,","for"],"are the":["methods","same,","ones","`str(self.text)`","responses","responsability","most","most","same","most","same","same","same","only","test","same,","only"],"are then":["taking"],"are there":["any"],"are they":["implementation","implementation","readable?"],"are things":["built"],"are to":["be"],"are too":["long.","dissimilar.","many"],"are trying":["to"],"are two":["\"concepts\":","distinct","links","points","answers"],"are typically":["named"],"are unlikely":["to"],"are unnecessary":["and","given"],"are unnecessary.":["The","For","There's","Also"],"are unordered.":["Should"],"are upper":["or"],"are upper-case.":["There's"],"are uppercase":["and","letters","and"],"are uppercase,":["what","but"],"are uppercase.":["You"],"are used":["for"],"are used,":["which"],"are useful":["documentation"],"are useless":["here"],"are using":["a","new-style","new-style","single","`dict.get()`,"],"are usually":["named"],"are valid,":["but"],"are very":["simple,","limited.\"\"\"","worthwhile","few","very","strong"],"are we":["unicode","translating?"],"are weird.":["I'm"],"are welcome,":["documenting"],"are well":["fitting","named,"],"are well-known,":["and"],"are you":["converting","converting","on","saying","nesting","talking","making","expecting","using","accounting","converting","trying","using","sure","updating"],"are you're":["just"],"are) for":["all"],"are, by":["convention,"],"are, maybe":["```"],"are, would":["it"],"are/is rather":["redundant,"],"area_code a":["property,","property,"],"aren't \"obvious\"":["if"],"aren't 100%":["compatible"],"aren't approached":["with"],"aren't declaring":["result"],"aren't digits,":["it"],"aren't imho":["restricted"],"aren't in":["the"],"aren't my":["first"],"aren't necessary.":["Leaving"],"aren't special":["enough"],"aren't these":["helper"],"aren't those":["functions"],"aren't written":["by"],"aren't you":["really","getting"],"arent really":["checking"],"args on":["the"],"arguably more":["readable"],"arguably unneeded":["dependency."],"argue for":["and"],"argue that":["giving","for","isShouting","your","the","they","using"],"argued that":["there"],"argument (but":["it's"],"argument -":["comparing","dictionary"],"argument .":["So"],"argument `deletechars`,":["so"],"argument `string`":["should"],"argument `string`,":["as"],"argument at":["the"],"argument being":["returned"],"argument checking.":["But,"],"argument doesn't":["fit"],"argument for":["one","one","the","either"],"argument intact":["in"],"argument is":["expected","provided?","a","`self`,","`string`","being","good."],"argument lists":["and"],"argument name":["is","that"],"argument name,":["life"],"argument name.":["That"],"argument named":["`string`"],"argument of":["a"],"argument says":["what"],"argument syntax":["instead"],"argument to":["`hey()`.","the","be","`.Hey()`","Bob.hey,","`clean_number`.","something","subroutines","split()","a"],"argument when":["passed"],"argument\". And":["that's"],"argument), decorate":["this"],"argument). And":["there's"],"argument, but":["that's"],"argument, ie":["`foo(bar=baaz)`,"],"argument, is":["there"],"argument, specially":["when"],"argument, where":["initializer"],"argument. Bob":["doesn't"],"argument. Doing":["the"],"argument. Especially":["naming"],"argument. Then":["the"],"argument. To":["be"],"argument. What":["do"],"argument. `s`":["doesn't"],"argument? I":["would"],"arguments (that":["is,"],"arguments `*args`":["when"],"arguments and":["if"],"arguments are":["sound."],"arguments for/against":["adding"],"arguments instead":["of"],"arguments is":["to"],"arguments of":["method"],"arguments to":["function"],"arguments). In":["this"],"arguments. Also,":["do"],"arguments. guess":["I"],"around 400k":["robots."],"around PEP8,":["but"],"around `(predicate,":["response)`"],"around `candidate`":["in"],"around a":["bit."],"around checks":["in"],"around hashes":["is"],"around in":["`DNA`"],"around loosely":["bug"],"around operators":["(cf","(like"],"around operators.":["See"],"around that,":["but","but"],"around the":["if/elif","equals.","if","```words```","expression","`phrase","'='","conditionals","generator"],"around this":["would"],"around to":["fixing"],"around upper-case":["letters"],"around with":["class,","it.","`isupper()`"],"around, being":["the"],"around? Seems":["like"],"arrangement, though":["it"],"array access":["on"],"array of":["strings"],"array. In":["the"],"arrive at":["a"],"arrived at":["very","quite"],"artefact of":["a"],"articulate why,":["so"],"artifact it":["really"],"as \"Looks":["great\""],"as \"calculated":["fields\""],"as \"completed\"":["so"],"as \"implementation":["detail,"],"as \"private\",":["it's"],"as \"return":["x\"?"],"as 'not":["something'"],"as **unicode**,":["you"],"as Bob's":["interface."],"as Counter.":["I"],"as DNA":["transformer,"],"as DRY":["and"],"as I":["only","have","should,","have","find","thought.","was","could","think","think","am","could.","believe","went","was","said,"],"as I'm":["concerned","concerned,","concerned","concerned","concerned","concerned","concerned,","concerned.","concerned,","using"],"as I've":["been"],"as O(n).":["Using"],"as Python":["makes","builtins"],"as Python,":["consider"],"as [flake8](https://pypi.python.org/pypi/flake8)":["and"],"as [old-style":["classes"],"as `\"?\"":["="],"as `./bob.py`":["instead"],"as `Bob.isQuestion`":["and"],"as `Bob`":["privates,"],"as `Counter`":["supports"],"as `Person`":["and"],"as `[^a-z0-9_\\n\\r\\t\\v]`":["but"],"as `\\W`.":["Also,"],"as `_lower`":["since"],"as `_nucleotide_sequence`?":["It"],"as ```not":["message.strip()```."],"as `candidates`":["(yes"],"as `if":["not","not"],"as `input[-1]`.":["Even"],"as `message.isspace()`,":["which"],"as `most_common`":["make"],"as `msg.is_silent()`.":["In"],"as `question`":["does."],"as `replace`":["or"],"as `sum`":["over"],"as `word_count`":["will"],"as a":["standard:","question;","negation,","separate","module","question.","part","part","local","surprise","failure","visual","string","copying","module","bunch","voice","class-level","standalone","lazy,","separate","part","class","`str`","docString,","preference","static","side","list","valid","public","public","whole","troll.","language","non-\"personal\"","false","\"global\"","shout.","class","private","class","method","public","programmer","Python","word.","for","fast","variable","subclass","dict","flag","`str`","part","variable","name","whole","local","command","description;","stupid","sign","noun","previous","book","class","pure","concept?","concept?","concept?","list","few","single","variable","constant,","standalone","namespace","question.","variable"],"as above,":["I"],"as all":["the"],"as alternative":["you"],"as an":["aside:","inner","object","instance","'exceptional","exercise,","argument","argument","identifier)","\"application\"","instance","alias","argument","attribute","instance","inexperienced","IT","item"],"as anything":["as"],"as argument":["-","to"],"as argument),":["decorate"],"as argument.":["Then"],"as arguments":["of"],"as as":["over-engineering."],"as at":["the"],"as attributes":["of"],"as attributes,":["`is_anagram_of`"],"as basically":["strings"],"as beautiful":["as"],"as calculating":["a"],"as class":["level"],"as class-level":["variables,"],"as clean":["as","as"],"as comments":["on"],"as comparing":["chars."],"as concept":["on"],"as constants":["with"],"as constants?":["In"],"as could":["be."],"as cryptic":["to"],"as decorators,":["the"],"as default":["value","value","value"],"as described":["in","in"],"as does":["`.format(n,"],"as done":["by"],"as done,":["then"],"as easily":["cache"],"as far":["as","as","as","as","as","as"],"as fast":["as"],"as first":["argument"],"as follows:":["I've"],"as for":["the","internal"],"as good":["as"],"as group":["of"],"as hell":["AND"],"as if":["they"],"as imho":["it's"],"as implemented":["here"],"as in":["my","Bob.no_lowercase"],"as indexing":["with"],"as indices":["is"],"as input":["(actually","so","to"],"as insane":["in"],"as instance":["attributes","attributes"],"as integers.":["You"],"as internal":["attribute."],"as is!":[":)"],"as it":["does","really","pleases","always","should.","can","can","decoupled","must","gets","could","is","overwrites","seem","will","is","is","stands.","stands."],"as it's":["a","very","not","recommended","not","idiomatic"],"as its":["module-level"],"as just":["a","\"U\""],"as literals":["in"],"as little":["as"],"as long":["as","and","as"],"as many":["calls","times"],"as method":["or"],"as methods":["on"],"as most":["answers"],"as much":["as","happening","repeated","explicit","as","as"],"as namespace.":["See"],"as no-public":["use."],"as non":["being"],"as non-public":["to","appending","because","because","because"],"as non-public?":["It's"],"as obvious":["that","as"],"as one":["of","of","can","can"],"as one!":["Try"],"as opposed":["to","to","to"],"as orbital":["periods."],"as par":["of","of"],"as per":["good","burtlo's","PEP8"],"as performant,":["but"],"as pointed":["out"],"as possible":["and","in","without","(it","and"],"as possible,":["and","favoring","specially","only","hence"],"as possible:":["it"],"as possible?":["In"],"as predicate":["for"],"as previously":["mentioned"],"as private":["methods."],"as private,":["because"],"as private.":["Or"],"as proposed":["in"],"as providing":["the"],"as public":["attributes...","attributes."],"as pythonic":["as"],"as questioning,":["so"],"as quickly":["as","as"],"as recommended":["by","by","in"],"as rules":["but"],"as saying":["that"],"as sequence":["is","of"],"as short":["as"],"as shouting.":["This"],"as signaling":["that"],"as simple":["as","as","as","as","and","and","as","as"],"as simply":["as"],"as sin,":["but"],"as single":["arguments."],"as single-line":["originally"],"as small":["as"],"as soon":["as","as","and"],"as specific":["as"],"as standalone":["functions."],"as standard":["ascii)."],"as string":["of","of"],"as such":["they","(by"],"as such,":["they"],"as suggested,":["but"],"as suggested.":["I","I"],"as text,":["your"],"as thanks":["for"],"as that":["is","should"],"as the":["default","first","test","test","predicate","set","opening","if","default","first","last","one","latter","code","assignment","key:value","divisor","first","underscore","example.","first","coding.","regexes","spec"],"as their":["content"],"as there":["have"],"as these":["would"],"as they":["don't","imply","are.","are."],"as they're":["quite"],"as this":["is","is","one","is"],"as this.":["When"],"as to":["map","how"],"as valid":["function"],"as variable":["names.","names."],"as versed":["in"],"as we":["need","have"],"as we're":["respectful"],"as well":["moved","as","for","use","as","be",":)","as","so","inline","have","reuse","and","use","as","be","as","as","too.","as","as"],"as well)":["to"],"as well,":["in","though","why","so","and","because"],"as well.":["Using","Here,","One","I","Is"],"as well?":["To","There"],"as wide":["as"],"as would":["`\"12345\"`,"],"as written":["reflects"],"as yelling,":["asking","not"],"as you":["considered","return","return","will","return","return","return","iterate.","hit","return","think.","have","want,","can","already","suggest.","suggested.","did","have"],"as you've":["coded."],"as your":["`is_shout()`,","method,"],"as?\" What":["if"],"ascii encoding":["has"],"ascii input":["correctly."],"ascii inputs":["in"],"ashamed i":["did"],"aside, when":["ever"],"aside, whenever":["you"],"ask about":["stylistic"],"ask for":["clarification","any"],"ask him":["a"],"ask myself":["\"did"],"ask this":["question:"],"ask you":["which"],"ask, `Word`":["is"],"ask, why":["I"],"ask: Why":["does"],"asked a":["question\"?"],"asked, I":["can't"],"asked. Thanks":["for"],"asking a":["question","question"],"asking about":["conventions:"],"asking etc.":["That"],"asking for":["\"is_question\"","the"],"asking if":["len(letters)"],"asking me":["to"],"aspect, and":["word_count"],"aspect. With":["one"],"assert a._sequence":["=="],"assertion will":["pass."],"assertions of":["the"],"assign the":["`sides`"],"assign to":["a"],"assignements to":["`self.rawinput`"],"assignemt a":["bit"],"assigning `\"?\"`":["to"],"assigning it":["a"],"assigning to":["a"],"assignment :)":["`_action`,"],"assignment in":["the"],"assignment operator.":["For"],"assignment statement":["that","for"],"assignment step":["as"],"assignment such":["as"],"assignment to":["have","``number``","it","it"],"assignment, perhaps":["it"],"assignment, so":["I'd"],"assignment. I":["wonder"],"assignment. The":["\"whatever\""],"assist with":["future"],"associate case":["with"],"associated constant.":["Another"],"associated return":["values)."],"associated with":["`Beer`","them."],"associates the":["different"],"assume `query`":["is"],"assume and":["make"],"assume it":["is"],"assume it's":["a"],"assume someone":["would"],"assume that":["it's","was","anything","`word`","someone","the","the"],"assume that's":["new"],"assume the":["`decode`"],"assume you":["have","have","have","have","have"],"assume you're":["recommending","doing"],"assume. Open":["your"],"assumed it":["should"],"assumed that":["it's"],"assumed you":["could"],"assumed. You":["know"],"assumes too":["much"],"assuming \"\"":["=="],"assuming it's":["not"],"assuming you":["change"],"asymptotically optimal.":["Can"],"at ...\"":["or"],"at 0":["and"],"at Bob":["he","he","he"],"at PEP8":["and"],"at Python":["and"],"at Python,":["I'm","I"],"at [PEP":["8"],"at [PEP8](http://www.python.org/dev/peps/pep-0008/)":["recommendations"],"at `.strip()`":["string"],"at `Counter`":["from","from","from","from","from","from"],"at `Counter`,":["as"],"at `Counter`:":["http://docs.python.org/2/library/collections.html#collections.Counter"],"at `collections.Counter`":["I",";)","class,"],"at `endswith`":["method"],"at `findall`,":["which"],"at `is_silent`?":["And"],"at `isspace`":["and"],"at `isupper()`":["and"],"at `maketrans`":["It"],"at `re.findall`":["to"],"at `str.isupper()`":["method"],"at `word_count`,":["they'd"],"at a":["glance,","library,","lower","Python","more","time.","different","time","clear","time"],"at all":["times...","costs?","than","that","when","a","FWIW","FWIW","?","nor","more."],"at all,":["so","but","you"],"at all.":["When","So","This,"],"at any":["given"],"at best":["-","useless"],"at border":["of"],"at built-in":["types"],"at cobbling":["together"],"at code":["and"],"at different":["levels."],"at error":["messages"],"at first":["=).","convert","glance"],"at hand,":["this"],"at hey()":["would"],"at how":["`Counter`","you"],"at initialize":["time"],"at it":["now","again.\"","carefully","?)",":)","`anagram_candidates`","for","with"],"at it,":["see"],"at it.":["I"],"at its":["docs."],"at least":["for","more","you'll","for","cache","as","using","be","twice","in","OO","two","use","now","two","works","marked","one","shorten","one","one","too","one","one","for"],"at line":["19"],"at making":["a"],"at methods":["on"],"at mine":["(where,"],"at my":["solution","first"],"at nitpicking":["what"],"at odds":["with"],"at once":["(before","to"],"at one":["point"],"at python.":["Be"],"at quite":["similar"],"at roughly":["the"],"at saywat.isupper(0)":["?"],"at sensible":["levels"],"at some":["point.","point,"],"at someone":["else's"],"at start":["of"],"at string":["class'","class'"],"at that":["time.","point","class"],"at that.":["If"],"at the":["end","head","docs","sacrifice","docs.","docs","bottom?","docs","moment.","bottom","top","wrong","condition","end.","end.","method","other","examples","exercise","original","same","beginning","beginning","same","bottom.","same","end","same","same","top","start","end.","end","input","tokenization","beginning","last","class","same","assertions","same","`isspace`","other","start","same","same","class","top-level","end).","end","build","sheer,","end","time;","documentation.","end","cost","`str.format`","`collections.Counter`","problem","`collections.Counter`","'if'","end","end","class","end","beginning","end","if","if","format","end","beginning","top.","end.","problem","borders","start","`endsWith`","`endswith`","first","end","Bob","beginning","top","methods","beginning","top","beginning","documentation","string","translate()","methods","translate","end.","assignment","time","assignment","assignment","method","idiomatic","same"],"at them":["from"],"at this":["point","point","point","point","code","code","code","point.","and","point","point","point,"],"at those.":["I'm"],"at times":["I"],"at times.":["The"],"at top":["of","of","of","of"],"at top,":["everything"],"at using":["a","a"],"at very":["similar"],"at what":["`Counter`s","`Bob.vocab`"],"at with":["the"],"at you":["use"],"at your":["discretion","code","code."],"atm python":["suite"],"attached to":["its","`Bob`."],"attaching helper":["methods"],"attack. Can":["you"],"attempt at":["a","python.","a","cobbling","Python"],"attempt to":["document"],"attempt! I":["like"],"attempt. I":["would"],"attempting to":["follow","cast","pass","capture","express","capture","express","capture","express"],"attempts to":["decouple"],"attention especially":["to"],"attention to":["naming","the","the","code","naming","my","my"],"attitude through":["external"],"attribute 'rna'":["is"],"attribute (class":["attribute"],"attribute (which":["the"],"attribute --":["you"],"attribute `isupper`).":["A"],"attribute accessor":["&"],"attribute and":["get","has","you"],"attribute as":["\"implementation"],"attribute being":["generated"],"attribute but":["make"],"attribute by":["the"],"attribute can":["make"],"attribute gotcha":["here"],"attribute in":["the","this"],"attribute is":["looked","a","a"],"attribute lookup":["rules,","rules","worked"],"attribute mapping":["its"],"attribute names":["so"],"attribute of":["the","any","the","a","your","dna","the"],"attribute only":["once."],"attribute or":["method","class"],"attribute outside":["the"],"attribute resolution":["mechanism","mechanism"],"attribute static":["(aka"],"attribute to":["ensure","something"],"attribute when":["there's"],"attribute with":["two"],"attribute won't":["be"],"attribute) in":["this"],"attribute), and":["made"],"attribute, Python":["has"],"attribute, there":["could"],"attribute, to":["much"],"attribute, which":["means"],"attribute, without":["needing"],"attribute. In":["both"],"attribute. Modifying":["those"],"attribute. Not":["a"],"attribute. That":["makes"],"attributed to":["Rich"],"attributes (and":["methods)"],"attributes (as":["far"],"attributes --":["well,"],"attributes /":["methods"],"attributes and":["call","by","par"],"attributes are":["still"],"attributes as":["class"],"attributes at":["all,"],"attributes because":["it's"],"attributes can":["be"],"attributes could":["be"],"attributes from":["being"],"attributes in":["the","classes","`__init__`","`__init__`"],"attributes of":["course).","a","a"],"attributes on":["the","each","the","each","their"],"attributes so":["no"],"attributes to":["that","it."],"attributes were":["public"],"attributes with":["care"],"attributes would":["add"],"attributes), or":["just"],"attributes, I":["need"],"attributes, `is_anagram_of`":["becomes"],"attributes, giving":["your"],"attributes, yes":["you'll"],"attributes. That":["would"],"attributes. The":["first"],"attributes. They":["are"],"attributes... They":["are"],"audience intended":["for"],"authority on":["Python"],"automagically concatenated":["so"],"automated linting":["or"],"automatic linting?":["You"],"automatically also":["deals"],"automatically converted":["to"],"available (by":["making"],"available for":["the","**str**"],"available, please":["do"],"average outperform":["this"],"avoid \"advises\"":["like"],"avoid `None`":["if"],"avoid `matches.append`.":["See"],"avoid a":["possibly"],"avoid accidental":["overridding","logic"],"avoid all":["loops/ifs","if/looping"],"avoid colliding":["with"],"avoid collisions":["-"],"avoid created":["classes"],"avoid defensive":["coding"],"avoid early":["returns,"],"avoid executing":["(possible"],"avoid expressions":["like"],"avoid extra":["work"],"avoid guards":["like"],"avoid hard-coding":["the","the"],"avoid having":["to"],"avoid if":["statements"],"avoid implicit":["logic","logic"],"avoid incidental":["programming"],"avoid is":["explicit"],"avoid keeping":["an"],"avoid logic":["bugs."],"avoid meta-programming":["in"],"avoid name":["clashes","clashes","space","clashes).","conflicts","mangling,"],"avoid naming":["your"],"avoid overridding":["builtin"],"avoid problems":["with"],"avoid programming":["errors.","error."],"avoid recalculation.":["A"],"avoid regex.":["Maybe"],"avoid regexes":["completely"],"avoid repeating":["the"],"avoid situations":["like"],"avoid stray":["comments.","comments."],"avoid testing":["against"],"avoid that":["ugly","but","(and","gotcha"],"avoid the":["unnecessary","extra","allocation","possibility","`elif`","`if","if","`filter(None..`","regex"],"avoid them":["at"],"avoid this":["naming","special","mistake"],"avoid unecessary":["repetition"],"avoid unnecessary":["work."],"avoid using":["methods","\"string\"..","`string`","a","the"],"avoid weird":["inheritance"],"avoided as":["much"],"avoided by":["using","using","using"],"avoided hardcoding":["the"],"avoided that":["sort"],"avoiding adding":["extra"],"avoiding iteration":["over"],"avoiding repeatedly":["processing"],"avoiding type":["conversion?"],"avoiding unnecessary":["code"],"avoiding using":["magic"],"avoiding work":["on"],"avoids a":["lot"],"avoids naming":["the"],"avoids nested":["logic"],"avoids the":["`if..elif`"],"aware it":["supported"],"aware of":["`isspace`,","the"],"aware of.":["Nevermind,","Such"],"aware that":["the","the"],"aware, I'm":["just"],"away from":["that."],"away here":["with"],"away things":["like"],"away what":["this"],"away with":["the"],"away without":["using"],"away, eliminating":["the"],"away, then":["probably"],"awere of":["the"],"awesome. Good":["job."],"awhile to":["figure"],"awkward syntatically.":["string.join(separator)"],"awkward until":["you"],"awkward, since":["it:"],"b =":["DNA(\"CAT\")"],"b) I'm":["a"],"b) It":["shows"],"b) disguise":["intent."],"b) you'd":["end"],"b` into":["1"],"baba-k: Sorry,":["no."],"back and":["forth.","forth","say","forth"],"back at":["mine","my"],"back in":["the","the"],"back into":["a"],"back my":["claim"],"back of":["my"],"back to":["setting","DNA.","thinking","the","it","the","`dict`","99","my"],"back when":["I"],"back. Sorry":["for"],"back. That":["means"],"back?\". Functionally,":["the"],"background do":["you"],"background i":["like"],"background, but":["to"],"backlog on":["the"],"backslash in":["a"],"backstory. Let's":["say"],"backwards in":["regards"],"bad because":["the"],"bad for":["a"],"bad form":["to"],"bad habit":["to"],"bad is":["it"],"bad name,":["and"],"bad on":["the"],"bad ones.":["That"],"bad practice":["to","in","to","in","(first"],"bad style":["in"],"bad that":["you"],"bad thing":["to."],"bad to":["keep"],"bad variable":["name","name."],"bad, a":["blank"],"bad, this":["is"],"bad. I":["rarely"],"badly done.":["I"],"baffles me":["a"],"balance between":["conciseness"],"balance. At":["any"],"balancing that":["against"],"bare class":["names."],"bare except":["clauses"],"bare functions.":["Any"],"barring a":["lot"],"base (as":["base"],"base class":["vital","than"],"base class.":["It"],"base would":["only"],"base_words if":["normalize_word(w)]`."],"based around":["upper-case"],"based decorator":["-"],"based on":["what","[PEP8](http://www.python.org/dev/peps/pep-0008/).","input.","two","this","the","my","the"],"based solely":["on"],"based. ```check_upper```":["could"],"bases. In":["[PEP"],"basically ````nil````":["in"],"basically captured":["the"],"basically does":["the"],"basically forced":["into"],"basically have":["there"],"basically saying":["\"OK,"],"basically strings":["with"],"basically the":["same","meat"],"basis you":["either"],"bat. Processing":["inputs"],"battle. I":["understand"],"be \"Returns":["a"],"be \"all_lower_with_underscores\"":["(ie"],"be \"all_lower_with_underscores\"?":["Surely"],"be \"better\"":["to"],"be \"much":["less"],"be \"obvious\"":["that"],"be '!'":["in"],"be (`log(len(s))`":["times)"],"be (most":["of"],"be 0":["at","at"],"be 2":["blank"],"be IMO":["even"],"be OO":["by"],"be True":["if"],"be [string":["methods](http://docs.python.org/2/library/stdtypes.html#string-methods)"],"be _accidentaly_":["overridden."],"be `Bob.responses`":["(all"],"be `Bob`'s":["responsability"],"be `False`":["for"],"be `class":["Bob(object)`."],"be `if":["not"],"be `not":["self.phrase`."],"be `return":["not","not"],"be `reversed(range(end_verse,":["start_verse+1)`."],"be a":["way","class","valid","Phrase","part","space","one-file","matter","whole","more","couple","little","very","mess","good","valuable","matter","bit","question","very","class","function.","great","series","better","bit","function","nitpick:","better","kinda","class","string","programmer","method","problem.","class,","bit","better","concern)","domain","class...","clean","```","question","silence","good","`Word`","`Word`).","big","more","wrong","boolean","hard","bit","better","lasting","noun","bad","good","string.","good","better","one-liner,","bit","bit","good","better","`pass`","bit","better","string."],"be able":["to","to","to","to","to","to","to","to","to","to","to","to"],"be accidentally":["altered."],"be achieved":["more"],"be actually":["easier"],"be addressed":["with","later."],"be afraid":["of"],"be aggregated":["to"],"be all":["ears!"],"be all-caps).":["Consider"],"be also":["good","good"],"be an":["object.","improvement.","error","implementation","issue.","anagram,","exercise","appropriate","attribute"],"be answered":["before"],"be any":["better?","way","added","more"],"be applied":["on","and"],"be as":["well","many","simple","short"],"be at":["the","least","least"],"be attached":["to"],"be avoided":["as","by","by","by"],"be avoiding":["adding"],"be basically":["forced"],"be best":["to"],"be better":["to","to","to","in","public.","if","to","to","to","to","to","than","made","for","than","as","now!","if","name","here","written","to","written"],"be better.":["Nested"],"be better?":["What","What"],"be bothered":["with","to"],"be calculated":["only"],"be called":["on","or","*tokenize*?","something","something"],"be careful":["if"],"be cases":["where"],"be changed":["to"],"be changing":["the"],"be checked":["first."],"be class":["documentation","Bob(object):"],"be cleaner":["to","to","if"],"be clear":["and","enough.","from"],"be clear,":["this"],"be clearer":["in","to","in"],"be clearer.":["Think"],"be clearer;":["I"],"be clearly":["more"],"be closer":["to"],"be cluttering":["the"],"be combined":["with","with"],"be complicated":["compared"],"be confused":["about","with"],"be confusing,":["so"],"be considered":["relevant","a","a","all","shouts,","as","shouting."],"be consistent":["in"],"be consistent.":["You"],"be constructed":["in"],"be convinced":["that"],"be correctly":["interpreted"],"be created":["but","every"],"be created,":["be"],"be created?":["If"],"be crystal-clear.":["I"],"be dealt":["with"],"be declarative,":["decoupled,"],"be declared":["on","non-public","in"],"be delimited":["with"],"be dependent":["on"],"be different":["than","from"],"be docstring":["or"],"be doing":["too"],"be done":["with","in","in","with","better.","and","in","that","with"],"be easier":["to","to","to","ways","in","to","to"],"be easily":["confused","read","improved","missed."],"be easy":["to"],"be either":["a"],"be elif":["msg.endswith('?')","not"],"be enlightened":[";)"],"be enough":["to"],"be entirely":["clear,"],"be equivalent":["to"],"be even":["less","simpler."],"be executable":["on"],"be executed":["anyway.","from"],"be expensive":["-"],"be explained,":["as"],"be explicit":["that","re."],"be explicit,":["sub","which"],"be exposed":["as","as","as"],"be expressed":["in"],"be extracted":["to","into","out"],"be factored":["out.","out"],"be falsy":["if"],"be faster":["and"],"be fine":["unless","for"],"be fine,":["but"],"be fine.":["but"],"be following":["the"],"be for":["the","the"],"be found":["in","in","in","here:","in","in","in","here:","in"],"be fragile":["(in"],"be fully":["initialized"],"be fun":[":)"],"be functionally":["equivalent"],"be further":["imporved","shortened"],"be gaming":["the"],"be generic,":["but"],"be getting":["some"],"be given":["to"],"be good":["to","in","to","to","for"],"be good,":["I'm","however,"],"be great":["to",":-)"],"be greatly":["improved"],"be handled":["with","differently,"],"be handy.":["Of"],"be happy":["to","with"],"be he":["will"],"be helpful":["to","to","if,"],"be hidden":["(at"],"be honest":["I"],"be honest,":["this"],"be implemented":["with","using"],"be implicit":["as"],"be imported":["from"],"be improved":["by","by","slightly","in","by","is","to"],"be in":["the","`__init__`?","there.","the","the","some","next","the"],"be independent":["of"],"be informative.":[";)"],"be initialized":["as"],"be initialized.":["You"],"be inlined":["--"],"be inside":["`Beer.verse`."],"be interested":["in","to"],"be interpreted":["the","by","by"],"be its":["own"],"be just":["a","a","overkill.","a","a","fine","if."],"be justified":["-","in"],"be justified.":["Anyway,"],"be keep":["as"],"be lacking":["something."],"be learning":["too,"],"be left":["in"],"be less":["confusion","text"],"be like":["calling"],"be listed":["in"],"be located":["right"],"be longer":["than"],"be looked":["up","in"],"be looking":["in"],"be lowercase":["and"],"be made":["hidden","private.","shorter","much","shorter.","even","much"],"be maintained":["along"],"be making":["use"],"be memoized,":["so"],"be missing":["something"],"be more":["readable","idiomatic,","idiomatic","readable","readable","readable","specific.","clear","compact.","self-documenting.","easily","concisely","optimal.","than","explicit?","efficient","accurate","flexible.","succinctly","picky.","clear","effective","consistent","expectable/readable.","elegant","suitable","pythonic","in","efficient","intuitive","clear","efficient.","pythonic.","intuitive","appropriate","expressive.","expressive.","expressive.","like","in","than","compatible","readable","expressive","readable","expressive","idiomatic","readable","efficent.","expressive.","idiomatic","explicit","natural","complicated.","complicated.","readable","Pythonic.","general.","descriptive.","specific","appropriate?","self-descriptive","idiomatic?","clearly","readable.","readable,","appropriate","Pythonic","readable"],"be most":["obscure"],"be moved":["to","to","into"],"be much":["improved.","more","better","more","easier"],"be multiple":["sentences)"],"be my":["last","favourite"],"be n":["(I"],"be named":["isSilent?","constants.","better.","better.","better","better"],"be necessary":["since"],"be needed":["frequently?"],"be negative":["=\u003e"],"be nervous":["or"],"be nice":["to","to","if","if","if","to","of","to"],"be nicer,":["but"],"be object-oriented":["while"],"be on":["their","it's","the","single","a"],"be one":["of","return,","return","and","way"],"be one-liners,":["I"],"be open":["to"],"be optimal.":["If"],"be ordered,":["and"],"be organized":["at"],"be outside":["of"],"be overkill":["for","in","though","here."],"be overkill.":["100%"],"be overly":["resistant"],"be part":["of","of","of","of","of","of","of","of","of","of","of"],"be placed":["at","in"],"be possible":["to","to","to","to","to"],"be possibly":["reused"],"be preferred":["here,","to","to"],"be preferred,":["acceptable,"],"be prefixed":["with","with"],"be prepended":["with"],"be present.":["I"],"be presenting":["you"],"be preserved.":["I"],"be pretty":["elegant","useless."],"be printed":["to"],"be pseudocode":["for"],"be pushy,":["but"],"be put":["into","into"],"be python3":["(with"],"be quite":["confident","expensive","convenient"],"be raised,":["which"],"be readable":["and"],"be really":["useful.","smart"],"be recomputed":["every"],"be recounting":["and"],"be redefined":["on"],"be refactored":["out"],"be reflected":["in"],"be related":["to"],"be religious":["about"],"be removed?":["It"],"be renamed":["to","to"],"be replaced":["with","by","with","with","with","by","by","with","by"],"be returned":["if","to","even"],"be reusing":["those"],"be robust,":["reliable,"],"be rooting":["for"],"be roughly":["the"],"be safer":["for"],"be seen":["as"],"be self":["(also"],"be self-contained":["and"],"be self-explanatory":["here,"],"be sent":["messages"],"be separated":["by","by"],"be seperate":["from"],"be set":["by","in"],"be shortened":["as","(and"],"be shouting,":["as"],"be shown":["more"],"be silence,":["so"],"be simple":["so"],"be simpler":["to","to","if"],"be simplified":["to","to","if","by","by"],"be simply":["\"return"],"be small":["at"],"be smth":["like"],"be so":["permissive","critical"],"be some":["motivation","middle","cases"],"be something":["that","like","like","like:"],"be somewhat":["heavy-weight"],"be special-cased":["as"],"be spelled":["`if_anagram`","`__eq__`)"],"be static":["(or"],"be static,":["I"],"be still":["solved"],"be strange":["to"],"be stripped":["to"],"be subclassed.":["It"],"be subclasses":["of"],"be substituted":["for"],"be succinct":["and"],"be sufficient":["for"],"be superiour.":[":-)"],"be sure":["that","to"],"be surprised":["if"],"be swapped":["out."],"be symptoms":["that"],"be taken":["care"],"be teaching":["python,"],"be technically":["correct,"],"be tempted":["to","to"],"be tested":["first."],"be tested.":["Then"],"be that":["way.\".","way.`","way.`","your","there"],"be that.":["Instead,"],"be the":["go-to","case","case","full","expected","returned","obvious","caller's","caller's","best","case","best","default.","'stronger'.","first","case","best","best"],"be there":["if"],"be there.":["Thanks"],"be tightly":["coupled"],"be to":["prefix","solve","just","strip","define","use","do","replace","iterate","test.","loop","use","use","make","pull"],"be too":["much","complicated","heavy","verbose,"],"be treated":["as","as","as"],"be tried":["in"],"be true,":["that"],"be turned":["into"],"be two":["blank","blank","blank","blank","different"],"be undefined.":["When"],"be unnecessary,":["since"],"be updated":["when"],"be upgrading":["anytime"],"be uppercase,":["but"],"be uppercase.":["How"],"be use":["to"],"be used":["for","where","to","for","for","for","for","outside","only","by","but","instead","for","as"],"be useful":["there.","for","for","for","for","if","for","for","in","for"],"be useless":["code."],"be using":["`self.__sequence`,","`is`","attribute"],"be very":["awkward,","concise","talkative","useful","clear","useful,","easy","awkward","obvious."],"be violated":["at","at"],"be working":["with"],"be worth":["splitting","caching"],"be worthwhile":["if","in"],"be wrapped":["in"],"be wrapping":["whole"],"be written":["using","in","to","as","in"],"be wrong,":["but"],"be your":["ticket,"],"be\" rather":["than"],"be) reusable,":["they're"],"be* private.":["Names"],"be, and":["for"],"be, right":["now"],"be, that":["you"],"be, which":["would"],"be. A":["`not"],"be. I'm":["talking"],"be. Now":["for"],"beautiful as":["could"],"beautiful solution,":["may"],"beautifully conveys":["the"],"became any":["longer."],"became clear":["that"],"became more":["complex.","complex,","beautiful"],"became part":["of"],"because *statement*":["is"],"because Bob's":["internals"],"because DNA":["transcription"],"because Happy":["New"],"because I":["like","know","would","want","tried","don't","chose","knew","like","wanted","usually","think"],"because NoneType":["objects"],"because Statement":["is"],"because `Bob.is_shout`":["doesn't"],"because `None`":["and"],"because `Phrase.clean_phrase`":["does"],"because `Phrase.get_words`":["name"],"because `dict`":["calls"],"because `return`":["already","already","breaks"],"because `s[-1]`":["would"],"because a":["majority"],"because any":["passed"],"because both":["are"],"because choose":["it's"],"because class":["name"],"because currently":["all","you","calling","you","you"],"because despite":["its"],"because each":["```if```"],"because empty":["sequences","string"],"because everybody":["has"],"because if":["I"],"because in":["Python","conversation"],"because it":["also","would","returns","leaves","lists","seams","changed","will","believed","doesn't","kinda","is","is","would","should","looks","is","doesn't","is","reduces","fits","has","doesn't","doesn't","is","describes","is","isn't","was","is","looked","is","inherits","will","is"],"because it's":["more","not","somethings","evaluated","simple,","easier","easier","recommended","less","easier","constant","simpler","not","more"],"because len(None)":["is"],"because message":["came","could"],"because module":["is"],"because nothing":["is"],"because now":["I","`Bob`","it's"],"because of":["that","tests","the","additional","performance","how","the","the"],"because return":["already","already"],"because standard":["library","Counter"],"because t":["does"],"because tests":["define"],"because that":["seemed","helps","takes","keeps","requires","helps"],"because that's":["the","what","what","good","more"],"because the":["code","string","purpose","initializer","seemed","name","names","test","exercise"],"because then":["you"],"because there":["is","are","are","is"],"because there's":["no"],"because these":["are"],"because they":["don't","needed","are","are","are","better"],"because they're":["more","functions"],"because those":["are"],"because we":["are"],"because we're":["all"],"because when":["reading"],"because which":["nucleotide"],"because you":["return","don't","don't","are","can"],"become `words`":[":)"],"become a":["`lower`"],"become abundantly":["clear"],"become large.":["Of"],"become more":["complex."],"become stale/misleading":["more"],"becomes a":["method","dialog","mere"],"becomes an":["instance","attribute"],"becomes clear":["--"],"becomes kind":["of"],"becomes unneeded":["fluff."],"been a":["while","long","better","problem."],"been best":["to"],"been commenting":["to"],"been deceived":["by"],"been deprecated":["in"],"been discouraged":["of"],"been encouraged":["to"],"been factored":["in"],"been given":["longer"],"been lazy.":["It's"],"been learning":["to"],"been meaning":["to"],"been more":["complicated,"],"been ported":["as"],"been recommended":["by","by","by"],"been reduced,":["so"],"been replaced":["inline."],"been simplified":["by"],"been some":["significant"],"been telling":["everyone"],"been the":["case"],"been thinking":["in"],"been to":["use","use"],"been told":["to"],"been two-space-indents?":["I'm"],"been working":["with"],"been writing":["the","Haskell"],"beer down,":["the","or"],"beer on":["the","the"],"beer song":["generator"],"beer\"`) is":["factored"],"beer\"`, and":["deciding"],"before (see":["iteration"],"before I":["can"],"before and":["methods"],"before applying":["`replace`"],"before breaking":["up"],"before calling":["`self.sequence.replace`"],"before checking":["whether"],"before class":["definitions","declaration","definition."],"before comparing.":["Your"],"before doing":["any"],"before each":["if"],"before either":["until"],"before explicitly":["creating"],"before loop":["-"],"before loop,":["you"],"before my":["eyes"],"before or":["after"],"before others,":["for"],"before passing":["it","it"],"before processing":["and"],"before seen":["a"],"before sorting?":["`sorted`"],"before start":["of"],"before storing":["it"],"before the":["`_is_silence`'s","check"],"before then":["normalizing."],"before this":["turns","and"],"before you":["even","get"],"before, and":["just","words"],"before, didn't":["we"],"before. I":["like"],"before. It's":["quite"],"before. Maybe":["a"],"before. Perhaps":["a"],"beforehand. that":["would"],"begin to":["feel"],"begin with":["an","a"],"beginner :)":["Keep"],"beginner programmers":["should"],"beginning after":["reaching"],"beginning and":["end","trailing"],"beginning is":["also","also"],"beginning isn't":["that"],"beginning makes":["the"],"beginning of":["the","file","the","`_checkForYelling`."],"beginning or":["ending"],"beginning with":["an","one","two"],"beginning, but":["later"],"behave correctly":["when"],"behave like":["``list``:"],"behaves when":["you"],"behavior and":["characteristics."],"behavior depending":["on"],"behavior of":["DNA"],"behavior that":["I","changes"],"behavior, and":["IF"],"behavior. Maybe":["a"],"behavior? If":["so,"],"behaviour became":["more"],"behaviour with":["a"],"behaviour: if":["I"],"behind but":["are"],"behind converting":["`collections.Counter`"],"behind the":["various","gym!\")"],"behind which":["you"],"being a":["result","translation,","subclass","method","question"],"being able":["to","to"],"being accidentaly":["overridden","overridden"],"being all":["whitespace."],"being an":["implementation","object,"],"being asked,":["I"],"being asked.":["Thanks"],"being at":["least"],"being both":["the"],"being called":["on"],"being changed":["in"],"being checked":["in"],"being clearer":["than"],"being considered":["when"],"being constants,":["I"],"being dense":["and"],"being difficult":["to"],"being easier":["to"],"being explicit":["is"],"being factored":["in","out."],"being first-class":["citizens"],"being foisted":["upon"],"being generated":["at"],"being implemented":["in","in"],"being just":["an"],"being methods":["of"],"being much":["longer"],"being named":["\"Anagram\""],"being order":["dependent."],"being overly":["pedantic"],"being part":["of","of"],"being passed":["in."],"being placed":["into"],"being public,":["I"],"being really":["pedantic,"],"being returned":["as"],"being said":["I"],"being said,":["it's","this"],"being sent":["in"],"being separate,":["but"],"being set":["in"],"being short":["enough"],"being shouted":["at."],"being silent":["labelled"],"being spoken":["for,"],"being standardized":["must"],"being the":["self-deprecating","only","driving","best"],"being transcribed,":["nor"],"being treated":["as"],"being ugly":["as"],"being ugly,":["but"],"being upper":["case."],"being used":["in"],"being used,":["it","though"],"being vague.":["I","with"],"being very":["explicit,","efficient,"],"being yelled":["and"],"belief that":["`isupper`"],"believe all":["my"],"believe is":["not"],"believe it":["would","can"],"believe strongly":["in"],"believe that":["abstracting","same","a"],"believe the":["dictionary","number"],"believe they":["are"],"believe you":["can"],"believed to":["be"],"belong there":["as"],"belong to":["a"],"belong). However!":[":)"],"belongs to":["`Bob`?","methods","the"],"below `Bob.hey`":["because","because"],"below `Bob`":["class,"],"below helper":["methods."],"below main":["logic.","programs"],"benchmarked it,":["but"],"benchmarks, I've":["realized"],"benefit comes":["from"],"benefit in":["doing"],"benefit of":["leaving","maketrans","using","precompilation","the"],"benefit to":["keeping"],"benefits from":["being","`Counter()`"],"benefits it":["brings,"],"benefits, but":["it"],"benefits. Comments":["become"],"beside not":["being"],"besides counting":["words."],"best -":["it","just"],"best English":["word"],"best approach.":["I"],"best code":["is"],"best for":["this."],"best left":["where"],"best name":["for","for","for","for"],"best name.":["Don't"],"best naming":["for"],"best of":["3:","3:","3:","3:"],"best one,":["since"],"best practices":["of"],"best put":["import"],"best to":["keep","create","add"],"best useless":["and"],"best uses":["for"],"best way":["to","to","to","to"],"best would":["have"],"best. You":["have"],"bet you":["already"],"better `self._text":["="],"better algorithm.":["The"],"better an":["has"],"better and":["replace","read"],"better anyway.":["I"],"better approach":["you"],"better argument":["name,"],"better as":["a","a"],"better because":["it","of","it","it","`s[-1]`"],"better but":["try"],"better choice":["for"],"better communicate":["meaning"],"better decomposition":["into"],"better define":["what"],"better describer":["for"],"better design":["(minus"],"better for":["the","its"],"better have":["a"],"better here":["since"],"better idea":["of","to"],"better idea.":["Additionally,"],"better if":["they","it"],"better implementation":["choice"],"better in":["this","an","constructor?","Haskell,"],"better indicate":["the"],"better interface":["-"],"better job":["than"],"better made":["public"],"better method":["for","for"],"better name":["for","for","for","for","my","for"],"better naming":["for"],"better not":["to"],"better now.":["I"],"better on":["some"],"better optimization":["since"],"better option":["I","for"],"better or":["not."],"better preserved":["as"],"better results":["than"],"better show":["what's"],"better since":["it"],"better solution,":["I"],"better spelled":["`return"],"better story":["maybe"],"better suited":["class"],"better templates":["actually"],"better than":["nested).","the","the","nested).","nested!","the","this.","[Example](https://github.com/kytrinyx/exercism.io/blob/master/assignments/python/word-count/example.py)","scanning","what","letting","HttpServerError.","importing","dense.","incrementing","dense.","dense.","having","using","my","just","the","version","implicit"],"better that":["iterating"],"better the":["context"],"better then":["before."],"better to":["do","create","split","implement","me","keep","use","move","just","have","handle","keep","have","use","use","keep","put","use","make","say","limit","write","use","use","have","have","use","make","use","make","make","make","have","have","make","inherit","inherit","fit","use","inherit","do","look","run"],"better use":["```class"],"better using":["if"],"better way":["of","to","to","to","to","to","to","to","to","that"],"better ways":["to","to","to"],"better with":["the","`Counter`","a","the"],"better without":["them"],"better would":["be"],"better written":["as","as:"],"better! And":["indeed,"],"better! You":["have"],"better), or":["query"],"better, IMHO.":["But"],"better, a":["list"],"better, because":["it's"],"better, but":["extra","I'm","that"],"better, much":["more"],"better, skip":["all"],"better, this":["would"],"better, though":["the"],"better. Also":["came"],"better. Feel":["free"],"better. I":["have"],"better. Maybe":["`_tokanize`?"],"better. My":["first"],"better. Nested":["ifs"],"better. You":["can","could","could"],"better... minus":["I"],"better? Also,":["why"],"better? What":["would","would"],"better](http://jaredgrubb.blogspot.co.il/2009/04/python-is-none-vs-none.html) to":["use"],"between *uppercase*":["and"],"between 4":["returns"],"between Python":["versions."],"between `\"\"\"":["Class"],"between `@garry`":["and"],"between `Bob.hey`":["arguments."],"between `Statement`":["and"],"between `elif":["...==2`"],"between a":["message","method"],"between class":["definitions.","definitions.","definitions.","definitions.","definition"],"between classes":["in","per","in"],"between cleverness":["and"],"between conciseness":["and"],"between each":["`if`"],"between functions.":["I"],"between if/elif":["blocks"],"between import":["statement","statement","statements"],"between initialization":["and"],"between method":["declarations.","definitions","calls","arguments."],"between methods":["and","would"],"between methods,":["though"],"between methods.":["More"],"between the":["implementation","classes.","imports","cases","predicate"],"between them.":["This"],"between theory":["and"],"between top-level":["definitions."],"beyond my":["current"],"beyond that,":["I"],"beyond the":["docstrings"],"bias check:":["I"],"big IF":["to"],"big Python":["fan,"],"big and":["complex."],"big changes":["will"],"big deal":["with"],"big deal,":["but"],"big enough":["app"],"big fan":["of"],"big line":["didn't"],"big no":["no."],"big problem":["that"],"big switch":["statement"],"bigger codebase":["it's"],"bigger picture,":["where"],"bigger program":["I'd"],"bigger program,":["but"],"bikeshedded this.":[";)"],"bikeshedded\" definitely":["applies"],"binary operators":["with"],"binds a":["lambda"],"bit 'too":["much'"],"bit at":["odds"],"bit better":["and","here."],"bit beyond":["my"],"bit bloated,":["but"],"bit brittle,":["how"],"bit broken,":["I"],"bit clearer":["what"],"bit confused":["over"],"bit different":["Just"],"bit differently":["still,","-"],"bit difficult":["to"],"bit dogmatic)":["IMHO."],"bit easier":["to"],"bit expensive":["for"],"bit far":["from"],"bit forced":["solution,"],"bit hacky":["and"],"bit hacky,":["but"],"bit harder":["for"],"bit in":["this"],"bit inefficient.":["Can"],"bit influenced":["by"],"bit less":["than","static"],"bit long":["-"],"bit messed.":["If"],"bit misleading":["and"],"bit more":["verbose,","succint","complicated,","readable.","succint","generalizable](http://exercism.io/submissions/521f5b4f090dbbe6fd000238),","easily","succint","readable.","involved","thinking","spacing.","difficult"],"bit of":["Python.","a","course","work","advice","a","a","C","a","documentation.","Python","it.","logic","the","code","improvements"],"bit off":["-"],"bit on":["the"],"bit opaque.":["Maybe"],"bit over":["the","board."],"bit over-the-top":["with"],"bit overkill":["here","for"],"bit problematic.":["You"],"bit procedural,":["but"],"bit redundant":["here?"],"bit redundant.":["You"],"bit shorter":["and"],"bit smelly":["to"],"bit to":["have","make"],"bit too":["opaque.","generic","low","much."],"bit unnatural":["to"],"bit verbose":["and"],"bit wasteful":["to"],"bit wasteful.":["Also,"],"bit with":["`str.isupper()`"],"bit, but":["I"],"bit, thinking":["of","of"],"bit. For":["instance"],"bit. Is":["there"],"bit. Overall":["though"],"bit. This":["or"],"bit. Will":["experiment!"],"bit. You":["could"],"bit? Can":["you"],"bits of":["code"],"bits, not":["just"],"blah will":["do."],"blah\" is":["less"],"blah` and":["then"],"blank first":["or"],"blank line":["between","between","after","between"],"blank lines":["between","between","between","between","before","before","between","between","between","between","between","before","before","between"],"blank lines](http://www.python.org/dev/peps/pep-0008/#blank-lines)":["around"],"blank message":["using"],"blank string":["return","in"],"bleed at":["the"],"bloated code,":["so"],"bloated, but":["that's"],"block ...":["it"],"block doesn't":["matter."],"block ends,":["and"],"block in":["`is_question`?"],"block returns":["so"],"block returns.":["Or"],"block so":["geneticists"],"block with":["a"],"block, and":["you"],"blocks formatting":["is"],"blocks is":["rarely"],"blocks with":["explicit"],"blocks, it":["doesn't"],"blow my":["mind."],"blow your":["mind"],"board. I":["was"],"boarders and":["sanitize"],"bob had":["appropriate"],"bob import":["Bob"],"bob receives,":["since"],"bob, and":["input"],"bob.py but":["am"],"bob]$ python":["bob_test.py"],"bob_test.py\" in":["the"],"body as":["well"],"body becomes":["a"],"body consitently":["in"],"body into":["a"],"body mostly":["obsolete"],"body of":["the","the"],"body to":["contain"],"body with":["comments"],"body's brain":["to"],"bogged down":["in"],"boilerplate code":["(...","below"],"boilerplate to":["avoid"],"boilerplate(?) code":["in"],"boilerplate. Of":["course"],"boils down":["to"],"boldface are":["available"],"bonus point":["for"],"bonus that":["the","offsets"],"bonus underscore":["on"],"book data,":["and"],"book had":["great"],"book this":["code"],"book) and":["I"],"bool(a is":["None)"],"bool(a) #":["False"],"bool(not a)":["#"],"boolean `phrase.isupper()`.":["And"],"boolean context":["(like"],"boolean context,":["so","so"],"boolean context.":["Testing"],"boolean context;":["instead"],"boolean false,":["so"],"boolean like":["hasletter"],"boolean method":["for"],"boolean methods":["like"],"boolean result":["of"],"boolean to":["return."],"boolean truths":["and"],"boolean type.":["Just"],"boolean value":["message"],"boolean, so":["it's"],"boolean. Otherwise":["the"],"booleans as":["integers."],"booleans to":["integers"],"boost with":["figuring"],"border of":["`Bob.hey`"],"borders `line":["4`"],"borders are":["also"],"borders of":["the"],"borders where":["they"],"boring, so":["I"],"borrow something":["I've"],"borrow the":["C++/Java"],"bot class,":["takes"],"bot's \"configuration\"":["(the"],"bot's implementation":["itself"],"both \"if\"":["and"],"both None":["and"],"both OOP":["and"],"both Python2":["and"],"both `.number`":["and"],"both `None`":["and","and"],"both ```and```s":["and"],"both `list()`":["and"],"both accomplish":["the"],"both are":["valid."],"both cases,":["`Phrase.wordcounter`"],"both checks":["for"],"both classes":["in"],"both clojure":["and"],"both conceptually":["and"],"both functional":["and"],"both inconsistent":["wrt/"],"both lines":["there"],"both methods":["in","`verse(self,"],"both more":["concise"],"both my":["readability"],"both needed":["representations"],"both of":["these","them"],"both paradigms":["in"],"both places)":["if"],"both points":["with"],"both python2.7":["and"],"both results":["of"],"both seem":["Pythonic"],"both setter":["and"],"both sides":["of"],"both sides?":["If"],"both standardization":["and"],"both strings":["length"],"both take":["a"],"both that":["there"],"both the":["checks","science","target","uppercase","\"application\"","splitting","gem"],"both these":["things"],"both versions":["would"],"both very":["much"],"both work":["and"],"both? Perhaps":["as"],"bother to":["strip"],"bother with":["iterating"],"bothered by":["this.","the","the","the"],"bothered to":["upgrade,"],"bothered with":["encoding.","a","a"],"bottle of":["beer","beer"],"bottles of":["beer","beer.\\n\"","beer"],"bottles: pluralizing":["`\"bottle(s)"],"bottom so":["the"],"bottom. My":["code"],"bottom? That":["way"],"bound and":["unbound"],"bound method":["--"],"bound or":["unbound)"],"boxes\" to":["check"],"brain to":["empty"],"branch and":["only"],"branch of":["the"],"branch that":["satisfies"],"branch to":["a"],"branch you":["are"],"branch, `if`s":["are"],"branch, it":["makes"],"branches be":["replaced"],"branches in":["your","your"],"branches setting":["the"],"branches to":["separate"],"branches would":["work."],"branching ?":["(hint:"],"branching as":["possible,"],"branching code":["?"],"branching even":["though"],"branching in":["`Bob.hey()`.","`_sanitize()`"],"branching is":["ok","the"],"branching of":["code"],"branching scheme.":["FWIW"],"branching), less":["coupled,"],"branching, you":["dont"],"branching? (I'm":["new"],"brave first":["steps"],"break after":["first"],"break anything":["since"],"break before":["start"],"break down":["what"],"break if":["you"],"break it":["out","for"],"break out":["from"],"break say":["at"],"break something.":["The"],"break the":["camel's","rules.\")","\"Pythonic\"","code."],"break those":["into"],"break when":["`msg`","`phrase`"],"break with":["the"],"break, so":["more"],"break. Got":["the"],"break. Now":["there's"],"breaking at":["the"],"breaking it":["in"],"breaking old":["code"],"breaking out":["the","the","the"],"breaking some":["old"],"breaking the":["logic"],"breaking their":["code."],"breaking these":["pieces"],"breaking up":["the"],"breaking your":["code"],"breaks LSP":["for"],"breaks for":["me."],"breaks the":["flow.","flow.","flow.","flow","flow.","flow.","program","function"],"brief on":["both"],"brilliant! It":["didn't"],"bring myself":["to"],"brings, that":["it"],"brings. I":["guess"],"brittle (hint:":["`NoneType`"],"brittle at":["best"],"brittle, how":["about"],"brittle. I":["added"],"broader perspective":["I"],"broadly defined":["response,"],"broken example":["-"],"broken out":["the"],"broken wrt/":["specs"],"broken! Penalty":["pot!"],"broken, I":["visited"],"browse the":["methods"],"browse through":["the"],"brush up":["on"],"brutally straightforward":["so"],"btw). Space":["is"],"btw. What":["would"],"bug in":["the","the"],"bug me":["a"],"bugging me,":["because"],"buggy and":["I"],"bugs crop":["in."],"bugs in":["future"],"bugs, when":["code","code","code","code","code"],"build a":["sequence"],"build in":["methods"],"build it's":["cache"],"build mapping":["in"],"build responses,":["but"],"build the":["dict","`responses`"],"building a":["list","list"],"building and":["passing"],"building composable/private":["tasks"],"building strings":["through"],"building the":["complement"],"building things":["like"],"building two":["separate"],"building up":["a"],"built 'counter'":["dict"],"built at":["the"],"built in":["on","regex","string","string","string","check","interfaces","String"],"built in,":["great"],"built into":["the","Python,"],"built-in Python":["function"],"built-in class.":["Most"],"built-in count":["method"],"built-in counting":["dictionary"],"built-in data":["type."],"built-in function":["for"],"built-in function](http://docs.python.org/2/library/functions.html#input),":["so"],"built-in or":["common"],"built-in python":["function."],"built-in string":["method?","functions","methods","methods","method","type."],"built-in type":["in","in"],"built-in types":["for"],"built-in. That's":["a"],"builtin `str`":["type,","type,","type,"],"builtin class":["methods"],"builtin function":["`sorted`"],"builtin methods":["if"],"builtin solution":["when"],"builtin string":["methods.","method","method"],"builtin types":["or"],"builtins (function":["`input()`"],"builtins, which":["in"],"bunch for":["any"],"bunch of":["properly","underscores","if","if-then","if-elif-else","if","transformation"],"bunch. Unfortunately,":["when"],"bundle the":["functions"],"burden it":["with"],"buried in":["the","details"],"business being":["part"],"business logic":["for","instead"],"business with":["80+"],"but \"python":["dna.py\""],"but Bob":["only"],"but EAFP,":["etc.)."],"but I":["thought","think","somewhat","may","didn't","wonder","feel","wouldn't","can","decided","don't","don't","don't","tried","don't","won't","do","have","tried","don't","liked","think","don't","don't","actually","think","didn't","dropped","know","agree","decided","don't","still","understand","felt","think","thought","find","had","don't","thought","can't","like","think","believe","came","couldn't","didn't","had","can't","put","find","had","had","figured","couldn't","couldn't","think","like","can","don't","think","figure","was","think","wasn't","think","wanted","don't","like","don't.","wonder","wish","think","do","try","think","can","prefer","don't","think","imagine","think","think","have","think","have","figured","was","think","decided","couldn't","wasn't","wrote","am","don't","totally"],"but I'd":["want","personally","love","like"],"but I'll":["fix","research."],"but I'm":["pretty","wondering","not","not","attempting","not","not","no","not","not","not","not","not","going","wondering","not"],"but I've":["never","never","been","switched"],"but IMO":["it'd"],"but Ruby":["will"],"but T-&gt;U.":["You"],"but [inheriting":["from","from","from","from"],"but [subclasing":["`object`](http://stackoverflow.com/a/54873/314685)"],"but [subclassing":["from","from","from"],"but `Bob`":["is"],"but `^\\w`":["is"],"but ```\\w```":["includes"],"but `said":["=="],"but `self.normalized`":["is"],"but `strip`":["works"],"but a":["42","valuable","regex"],"but according":["to"],"but actually":["looking"],"but after":["fetching"],"but alas":["this"],"but all":["the"],"but also":["lower-level","the"],"but am":["curious","struggling"],"but an":["empty"],"but any":["python"],"but anyway,":["this"],"but are":["correctly","you","they"],"but as":["an","alternative"],"but assign":["to"],"but assume":["it's"],"but at":["the","least","the","least","that"],"but avoiding":["unnecessary"],"but because":["of"],"but being":["able"],"but better.":["Also"],"but beyond":["that,"],"but both":["`None`","seem"],"but by":["adding"],"but can":["be"],"but certainly":["not"],"but cf":["above)"],"but clean":["and"],"but consider":["getting","adding"],"but conveys":["the"],"but could":["end","check","you"],"but couldn't":["figure","think","think"],"but decided":["that","to","to"],"but definitely":["agree"],"but devil":["is"],"but didn't":["understand"],"but disagree":["with:"],"but do":["you","you"],"but does":["it","hey","it","not"],"but don't":["use","have","use","use","know","use"],"but dont":["use"],"but earlier":["you"],"but even":["more"],"but every":["other"],"but exactly":["for"],"but exercism":["thought"],"but exercism.io":["is"],"but explicit":["is"],"but extra":["vars"],"but finally":["I've"],"but first":["make"],"but for":["an"],"but forgot":["to"],"but found":["this"],"but get":["lost"],"but gets":["the"],"but given":["that","line"],"but going":["for"],"but haven't":["gotten"],"but having":["the"],"but here":["no.","that","are","it"],"but here's":["two"],"but hey,":["we"],"but hopefully":["that"],"but i":["was","think"],"but if":["I","I","I","you","we","there","you","you","you","you","you'd"],"but imho":["in"],"but in":["this","broader","this","my","doing","high-level","my","this","a","my","my","my","this","line","python's"],"but instead":["replace"],"but introducing,":["for"],"but is":["it","there","more","there","there","rather"],"but isn't":["the"],"but it":["seems","looks","would","probably","doesn't","looks","doesn't","was","was","is","don't","is","would","doesn't","would","made","could","doesn't","at","looks","seemed","complicates","is","got","took","feels","could","may"],"but it's":["at","not.","a","still","not","still","only","still","readable.","strange","good","really","a","a","a","something","good","only","only","a","not","not","overkill","good","a","still","the"],"but its":["probably"],"but just":["to"],"but keeping":["`hamming_distance`"],"but later":["instead","changed"],"but like":["that,"],"but lines":["10"],"but looking":["at"],"but looks":["quite"],"but made":["it"],"but make":["sure"],"but man":["would"],"but managed":["to"],"but maybe":["the","there's","that","moving","not","the","I'm"],"but might":["for"],"but missed":["it."],"but more":["of"],"but my":["first"],"but named":["functions"],"but neither":["of"],"but never":["indicate"],"but nice":["catch."],"but no":["`else`s","equivalent"],"but not":["DNA.","afterwards.","`is_shout`","for","sure","\"dirty\").","to","on","real","necessarily","the","obvious,"],"but note":["that"],"but now":["they're","they","if","I"],"but on":["requirements"],"but one":["have","that"],"but only":["input","some","if"],"but otherwise":["use","this"],"but overall":["I'm"],"but part":["of"],"but people":["said"],"but perhaps":["didn't"],"but personally":["for","I"],"but probably":["should"],"but provide":["different"],"but python":["has"],"but really,":["the"],"but removing":["it"],"but s":["steps!"],"but seem":["odd"],"but seems":["too","like"],"but should":["you","not"],"but silencing":["the"],"but since":["it","it"],"but some":["sort","tests","test"],"but somehow,":["that"],"but sticking":["to"],"but still":["relevant:","have","think"],"but technically":["you"],"but testing":["if"],"but that":["might","may","link","may","definitely","starts","comment","is","feels","felt","workaround","is","seemed","not","was"],"but that's":["a","matter","not","most","good","not","maybe","the","not","enough","really","Python's","definitly","minor","trade-off","really","usually","probably","totally","probably","a"],"but the":["creation","convention","early","dual","result","code","comments","style","first","two-line","name","way","`None`","```","good","main","'framework'),","logical","function","function","tests","tuple","code","tests","shouting","intent","README","test_cases","other","use"],"but then":["I'm","I","quite","you","one","it's","it's","you","I"],"but there":["are","may","is","feels","is","might","is"],"but there's":["a","nothing","no"],"but they":["make"],"but they'll":["still"],"but they're":["also"],"but think":["about","of"],"but this":["is","approach","example's","is","looks","can","seems","solution","seems","is","doesn't","has","is","move"],"but to":["make","me","me"],"but try":["to","-"],"but underscores":[":-)"],"but used":["about"],"but very":["clean"],"but was":["talked","this"],"but well,":["that's","this","Python","I"],"but what":["do","do","led"],"but whatever":[":)"],"but when":["I"],"but why":["aren't"],"but will":["not","probably"],"but with":["current"],"but won't":["be"],"but works.":["I"],"but would":["you","it","make","emphasize"],"but wouldn't":["it","it"],"but yes":["it"],"but you":["almost","can","could","can","could","never","have","drop","still","really","managed","could","still","don't","calculate","have","should","are","don't","could"],"but you'd":["happily"],"but you're":["saying","right,"],"but your":["code"],"but, as":["I"],"but: 1.":["in"],"buy into":["that"],"buy some":["more,"],"by \"if":["not"],"by \"return":["early\""],"by \"spacing":["in"],"by \"we":["need"],"by 0.001s.":["I"],"by Brandon":["Rhodes."],"by NOT":["using"],"by Ned":["Batchelder"],"by PEP422":["to"],"by PEP8":["and","and"],"by Python":["developers."],"by Zed":["Shaw","Shaw","Shaw"],"by [PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations).":["Lastly,"],"by [Single":["Responsibility"],"by [subclassing":["from"],"by `\\D`.":["Other"],"by `converse.isspace()`,":["so"],"by `return":["message"],"by a":["bunch","single","new","'U'.","'U'.","PEP.","try/except","single","list"],"by adding":["new"],"by aliasing":["a"],"by all":["means"],"by appending":["other"],"by asking":["for"],"by breaking":["out"],"by changing":["the","the"],"by choosing":["a"],"by conditional":["script?"],"by convention":["-","-","(the"],"by convention,":["\"private\"."],"by convention.":["Double","More","Lowercase,","There","Leaving"],"by day":[";)"],"by default":["and"],"by default,":["but"],"by definition":["it"],"by denoting":["the"],"by doing":["this?","this","a"],"by downcasing":["and"],"by drilling":["in"],"by either":["the"],"by explicitely":["building"],"by exploiting":["properties"],"by extending":["`object`.","`object`.","`object`.","`object`.","`object`.","`object`.","`object`.","`object`.","`object`."],"by extensing":["`object`."],"by extracting":["all"],"by far":["the"],"by first":["making","generating"],"by humans.":[":)"],"by incorporating":["your"],"by inheriting":["\"object\".","after"],"by iterative?":["(Just"],"by itself,":["the","if"],"by itself.":["The"],"by just":["returning"],"by keeping":["literal"],"by key.":["I'm"],"by living":["in"],"by localizing":["changes."],"by looking":["at"],"by machines.":["However,"],"by making":["yours","sure","use","the"],"by me,":["just","and"],"by module":["names"],"by moving":["the","the","checks","tests","hey","line"],"by multiple":["functions"],"by new":["style"],"by nitpicking":["on"],"by official":["documentation.","documentation.","documentation.","documentation.","documentation.","documentation.","documentation.","documentation","documentation","documentation","documentation","documentation"],"by one":["line.","function"],"by passing":["in"],"by peeking":["at"],"by piece.":["So"],"by prefixing":["names"],"by pulling":["the"],"by putting":["it","them"],"by reading":["your"],"by reducing":["the"],"by reference,":["this"],"by replacing":["all"],"by returning":["in"],"by scientists":["and"],"by simply":["making"],"by sitting":["inside"],"by spaces)":["and"],"by specification":["(top-level"],"by stamping":["on"],"by subclasing":["`object`","`object`"],"by subclass":["Counter"],"by subclassing":["`object`.","`object`","`object`"],"by syntax":["(as"],"by taking":["the"],"by test":["cases"],"by tests.":["The","The"],"by the":["zen","way.","computer","uracil","shortness","dependency","other","initializer.","same","specs","fact","specs","testcase,","else","official","official","official","isupper()","comment","\"Woah,","official","requirement","test","uppercase","methods","tests.","negative"],"by transcription.":["So"],"by transforming":["phrase"],"by typing":["\"python"],"by use":["of"],"by using":["simple","str.endswith","a","`Counter`.","that","`Phrase`","`phrase`","`Counter`","the","the","a","regex","a","\\w","a","regex"],"by what":["the","it"],"by yelling":["the"],"by you":["I"],"by your":["reviewers,","reviewers."],"byte string,":["but"],"c in":["s)","sentence)"],"c) \"It":["is"],"cache appropriatly":["(hint:"],"cache for":["whatever"],"cache into":["explicitly,"],"cache key":["based"],"cache that":["in"],"cache the":["result,","result"],"cached value":["on","on"],"caches small":["integers"],"caching (like":["you"],"caching could":["be"],"caching in":["next"],"caching logic":["away."],"caching of":["`self.counter`"],"caching result":["on"],"caching the":["computation","result"],"caching/memoizing. If":["there"],"calculate them":["anyway."],"calculated only":["once"],"calculating a":["value"],"calculating the":["Counter"],"calculation in":["initialization"],"calculation with":["caching/memoizing."],"call \"test_does_not_confuse_different_duplicates\"":["consistently"],"call 'msg.strip'":["twice"],"call (i.e.,":["creating"],"call `Beer().sing(1,":["-10)`"],"call `cmp`":["-"],"call `hey`":["with"],"call `isQuestion`":["and"],"call `isupper`":["on"],"call `len`":["on"],"call `lower()`":["on"],"call `string.replace`":["instead"],"call `text.strip()`":["4"],"call `to_rna`":["very"],"call `upper()`":["on"],"call about":["the"],"call and":["subsequently","a"],"call any":["other"],"call decode":["on"],"call expect":["the"],"call form":["was","was"],"call from":["two"],"call hey":["with"],"call in":["`ascii_lowercase()`)."],"call inside":["the"],"call is":["mostly"],"call it":["`this`","synonymous.","`sorted_lower`","`_phrase`","that:","multiple","`statement`,","once","lazy"],"call len":["on"],"call me":["out","out"],"call method":["`get_words()`,"],"call on":["the","not","line"],"call one":["of"],"call perhaps)":["to"],"call should":["not"],"call split?":["due"],"call the":["methods.","argument","function","builtin"],"call them":["externally","non-public."],"call to":["normalize.","`word_count()`,","`str(text)`","`text.strip()`","str.upper","just","`self.hey_message`","`str.upper`","`hey_message()`","`.strip()`","`type()`","`str.split()`","`.silent()`","`.hey()`,","`list`","`strip()`","be","elements()","`round`,","`hey`.","`answer`."],"call two":["times"],"call with":["good,"],"call word_count()":["more"],"call! I":["used"],"call\" operator":["is"],"call, I":["meant"],"call, I'm":["voting"],"call, so":["as"],"call. However":["`if"],"call. I":["found"],"call. If":["they're"],"call. No":["\"obscure"],"call. one":["sec"],"callable taking":["a"],"callable that":["returns"],"called \"alphagram\".":["Two"],"called 'ret'":["dragged"],"called (yes,":["sometimes"],"called Greeting?":["This"],"called ```":["Message"],"called `endswith()`,":["it"],"called `isalpha`":["-"],"called counter":["in"],"called intention-revealing":["message."],"called it":["might"],"called magic":["methods)."],"called more":["than"],"called nitpicks":["so"],"called on":["objects","them,","an"],"called or":["not,"],"called rehey,":["but"],"called something":["like","else."],"called the":["hey"],"called those":["nested"],"called while":["loosing"],"called with":["the"],"called, this":["would"],"called. If":["you"],"called. Not":["nice."],"caller actually":["passes"],"caller is":["the"],"caller responsible":["for"],"caller's responsability":["to","to"],"calling Python":["\"the"],"calling `.strip`":["on"],"calling `ANSWERS.items()`":["returns"],"calling `int()`":["and"],"calling `self.__class__.method_name()`,":["which"],"calling `self.sequence.replace`":["is"],"calling `sort()`":["on"],"calling a":["method"],"calling it":["something"],"calling itself.":["That"],"calling methods":["out"],"calling the":["resond_to"],"calling this":["case"],"calls (which":["would"],"calls `NothingSpecial.handle()`":["which"],"calls `YellAtMe.handle()`":[".."],"calls and":["only"],"calls are":["pretty"],"calls at":["runtime."],"calls doesn't":["hurt"],"calls each":["method"],"calls on":["the"],"calls per":["char."],"calls to":["`normalize(word)`,","`.lower()`","`._standard_form()`.","is_silent","`to_rna()`"],"calls would":["be"],"came back":["to"],"came here":["looking"],"came in":["as"],"came to":["the","the","my","returning","like"],"came up":["with"],"camel or":["snake"],"camel's back?\".":["Functionally,"],"camelCase but":["underscores"],"camelCase for":["method"],"can I":["tell","do","prettify"],"can accomplish":["the"],"can actually":["call"],"can add":["another","an","arguments"],"can affect":["the"],"can all":["be"],"can also":["write","create","use","call","translate","be","test","use","be","be","get"],"can apply.":["I"],"can assume":["`query`"],"can avoid":["that","regexes"],"can be":["initialized.","addressed","found","found","found","found","quite","easily","replaced","found","(most","found","more","hidden","cases","prepended","some","made","sent","seen","a","more","more","found","found","done","addressed","made","found","treated","avoided?","replaced","looked","used","extracted","looked","aggregated","simplified","created,","implemented","done","a","done","done","made","used","simplified","used.","further","replaced","imported","on","applied","turned","better","0","easily","helpful","avoided","avoided","avoided","better"],"can be.":["Now"],"can borrow":["the"],"can break":["say"],"can build":["mapping"],"can bundle":["the"],"can call":["`len`","it"],"can cause":["distractions."],"can change":["Bob's","depending","the","those"],"can check":["a","the"],"can clarify":["it"],"can classify":["my"],"can come":["as","up","up"],"can comment":["on"],"can consider":["getting"],"can continue":["to"],"can count":["occurrences"],"can create":["a","constants"],"can declare":["hey"],"can definitely":["see","write"],"can do":["something","the","it","both","without","this","away","something","`[...","something","more"],"can drop":["the","the"],"can easily":["swap","strip","tested"],"can either":["make"],"can even":["extract"],"can factor":["out"],"can find":["some","more","a","what"],"can foresee":["a"],"can further":["summarize"],"can generate":["the"],"can get":["idea","rid","the","better","rid","rid","discussion","rid"],"can get.":["The"],"can give":["nucleotides","you","it"],"can group":["functions"],"can handle":["recognizing","`None`"],"can have":["your","your","has","a"],"can help":["you","it.","here."],"can imagine":["a","a"],"can improve":["that","on","it"],"can index":["\"backwards\"","a"],"can inline":["both"],"can just":["use","use","check","check","do","sort","use","use","do","get","call"],"can keep":["singing!"],"can live":["with","with"],"can make":["that","the","similar","code","the","your"],"can merge":["what"],"can never":["get","be"],"can not":["be"],"can now":["approve"],"can of":["course"],"can omit":["the","the"],"can only":["enter","be"],"can pick":["is"],"can probably":["get","reduce"],"can process":["strings"],"can push":["your"],"can put":["both","functions"],"can read":["about"],"can readily":["see"],"can refactor":["hack"],"can rely":["on"],"can remove":["or","the"],"can rephrase":["this"],"can replace":["your","the","`if","both"],"can return":["the","self._NOCONTENT"],"can review":["others'"],"can rewrite":["the","this"],"can run":["your"],"can safely":["get","get","get","write:","access","assume"],"can save":["you"],"can see":["how","the","yourself).","the","in","that","the","how","are,"],"can set":["a"],"can share":["the"],"can simplify":["this","it","your","your","your"],"can simply":["use"],"can skip":["the"],"can solve":["that"],"can sometimes":["be"],"can sort":["it."],"can still":["initialize","normalize"],"can take":["advantage","advantage","a"],"can test":["the"],"can think":["of","of","anything).","of"],"can try":["a","using"],"can understand":["that"],"can use":["`endswith`.","python's","`re.match(pattern,","underscore","`.endswith()`","`.endswith(\"?\")`","the","the","`len`","`.endswith()","`data.isupper()`","`data.endswith(\"?\")`","`s.isupper()`","`.isupper()`","`.endswith(\"?\")`","`staticmethod`","`s.endswith(\"?\")`","`converse.endswith(\"?\")`","`.endswith(\"?\")`","for","for","`if`","Counter","it","[`set`](http://docs.python.org/2/library/stdtypes.html#set)","`DNA.thymidine`","message.isUpper()","the","standard","\u003ccode\u003emessage.isupper()\u003c/code\u003e","without","a","the","the"],"can what":["will"],"can write":["C"],"can you":["clarify","think","see","elaborate","run","find"],"can! Think":["`Phrase=type(*goodies)`"],"can't be":["bothered"],"can't believe":["the"],"can't call":["decode"],"can't do":["without,"],"can't exploit":["the"],"can't find":["anything"],"can't handle":["(for"],"can't hear":["something"],"can't imagine":["how"],"can't just":["run"],"can't look":["at"],"can't put":["my"],"can't say":["right"],"can't see":["a","how","how"],"can't speak":["for"],"can't tell":["for"],"can't think":["of","of","of","of","of"],"can't use":["the"],"can. Also,":["your"],"can. As":["someone"],"candidate for":["anagram.","anagram."],"cannot change":["that"],"cannot ends":["with"],"cannot shout,":["if"],"canonical \"simplest":["thing"],"canonical idiom":["is"],"canonicalized phone":["number"],"capabilities for":["creating"],"capabilities it's":["more"],"capitalization (the":["convention"],"capitalization). Combined":["with"],"capitalization. The":["second"],"capitalize all":["the"],"capitalized chars":["in"],"capitals to":["letters"],"caps -":["research","`isupper()`"],"caps and":["return"],"caps means":["shouting"],"caps questions":["should"],"caps, so":["this"],"caps. Depending":["on"],"capsed senteces.":["My"],"capture or":["define","define","define"],"capture seperately":["if"],"capture that":["better?"],"capture what":["a"],"captured by":["`converse.isspace()`,"],"captured groups":["for"],"captured the":["story"],"capturing all":["`r'\\w+'`"],"caracters (i.e.":["letters)."],"care -":["clients"],"care about":["naming.","the","that","message","the"],"care for":["regexes"],"care how":["`is_yelld`"],"care if":["the"],"care of":["everything","in","setting","compilation"],"care that":["much"],"care when":["it"],"care, later,":["of"],"care. \"if":["__is_empty(message):\""],"care. From":["a"],"careful code":["organization."],"careful if":["reusing"],"carefully to":["work"],"cares if":["its"],"carried away":["here"],"carries clear":["meaning."],"case \"better\"":["is"],"case (to":["which"],"case (with":["a"],"case -":["we"],"case ?":["(Zen"],"case I":["think","checked","guess"],"case I'd":["prefer"],"case I'm":["only","not"],"case `Fine,":["be"],"case `statement.anything`":["makes"],"case a":["simple","predicate","`MethodDispatcher`"],"case analysis":["in"],"case and":["I","then"],"case anything)":["AND"],"case as":["\"return"],"case btw).":["Space"],"case but":["you","it's","it's"],"case can":["be"],"case characters\"":["or"],"case chars":["while"],"case checking":["for"],"case clearly":["illustrate"],"case closed":[":-)."],"case consistent;":["PEP-8"],"case could":["have","probably"],"case doesn't":["expect"],"case drove":["the"],"case for":["`rawinput`","me","that","wrong"],"case had":["the"],"case has":["a"],"case here":["-"],"case here.":["So"],"case however":["I"],"case if":["you"],"case impose":["this"],"case in":["your","real","day-to-day","which"],"case insensitivity":["by"],"case insensitivity.":["Print"],"case is":["the","a","quite"],"case it":["doesn't","seems","doe","would","really"],"case it's":["ever","a"],"case mandates":["a","that"],"case of":["if","CPython.","real","silence","premature","an","\"is","unicode","familiar","your","a"],"case on":["line"],"case only":["for"],"case out":["of"],"case since":["the"],"case statement":["does."],"case statement.":["this"],"case string":["may"],"case that":["isn't","would"],"case the":["user","extra"],"case there":["are"],"case they":["should","would"],"case though":["I"],"case though,":["I"],"case to":["create","avoid"],"case using":["plain"],"case variable":["name"],"case when":["method","using"],"case where":["`message`","`message`","a","`query","input","the"],"case which":["would"],"case with":["result.","**DNA**"],"case words":["-"],"case would":["improve","be","be"],"case you":["could","were","like","wouldn't","could","don't","assume","could","don't"],"case you'll":["need"],"case you're":["only"],"case\" for":["the"],"case\" is":["having"],"case\" than":["shouting"],"case) (and":["don't"],"case) binary":["operators"],"case, I":["prefer","tend","do.","would"],"case, I'm":["not"],"case, IMHO":["is"],"case, `Bob.responders`":["could"],"case, ``list.__contains__``":["does"],"case, `help(str)`":["will"],"case, an":["argument"],"case, and":["none"],"case, but":["at","I","still","I","if"],"case, it":["shouldn't","doesn't"],"case, please":["pay"],"case, since":["the"],"case, some":["part"],"case, sorry":["about"],"case, that's":["the"],"case, the":["fact","point"],"case, what":["they"],"case, you":["just","might"],"case. Additionally":["you"],"case. And":["I"],"case. Good":["to"],"case. I":["want"],"case. I'd":["try"],"case. It":["would"],"case. The":["regex"],"case. This":["is"],"case. Unfortunately,":["the"],"case: {'':":["1,"],"cased caracters":["(i.e."],"cased character":["(i.e."],"cased character,":["which","false"],"cased characters":["are","are","in","(i.e."],"caseish statement":["that"],"cases (question,":["silence,"],"cases a":["None."],"cases all":["provide"],"cases and":["therefore"],"cases are":["pretty","some","ordered"],"cases aren't":["special"],"cases but":["still","can"],"cases can":["assume"],"cases enforce":["it."],"cases expect,":["but"],"cases for":["`\"Fine."],"cases happen":["to"],"cases here":["into"],"cases in":["this"],"cases it":["is","will"],"cases like":["\"car"],"cases of":["some","shouting,"],"cases pass.":["Also,"],"cases really":["are"],"cases regarding":["UTF-8"],"cases require":["the","both"],"cases showed":["that"],"cases that":["fewer"],"cases threw":["an"],"cases where":["it","there","you","`self.sequence`","a"],"cases). The":["\"all"],"cases, `Phrase.wordcounter`":["has"],"cases, `n=0`":["and"],"cases, a":["single"],"cases, but":["it"],"cases, what":["about"],"cases. (eg:":["silent"],"cases. Anyway,":["I"],"cases. However,":["this","this"],"cases. I'd":["lova"],"cases. They're":["not"],"cases. Though,":["if"],"cases. While":["I"],"cast it":["just"],"cast the":["input"],"cast to":["dict"],"casting the":["string"],"catch a":["`KeyError`"],"catch all":["falsey"],"catch an":["`ImportError`"],"catch and":["silence"],"catch both":["None"],"catch here?":["Is"],"catch on":["the"],"catch the":["numeric","`IndexError`"],"catch-all method,":["instead"],"catchall lambda":["that"],"catchall, that":["must"],"catchall. I":["thought"],"catches! The":["elif/else"],"catching type":["errors,"],"categories but":["provide"],"categorization as":["in"],"categorize the":["incoming"],"category of":["the"],"category-check functions":["to"],"caught by":["the"],"cause a":["client","lot"],"cause an":["error."],"cause exception.":["In"],"cause no":["problems."],"cause problems":["with"],"cause the":["anagram","problem"],"caused by":["changing"],"caused empty":["string"],"causes one":["test"],"causes tests":["to"],"caveats here:":["http://stackoverflow.com/a/12409963/477048"],"central class":["comes"],"certain mood":["which"],"certain parts":["of"],"certain responses":["are"],"certainly don't":["need","want"],"certainly increase":["readability."],"certainly not":["the","the"],"certainly up":["to"],"cf above)":["dict"],"cf http://c2.com/cgi/wiki?YouArentGonnaNeedIt":[".","."],"ch in":["self.phrase"],"ch.isalnum() or":["ch.isspace())"],"chain ?":["How","How"],"chain conditionals":["when"],"chain if":["you're"],"chain of":["`elif`s)","responsibility?"],"chain, and":["the"],"chain-able, why":["not"],"chain-of-responsibility to":["dispatch"],"chaining give":["a"],"chaining was":["being"],"chaining. Initially,":["I"],"chance I'd":["call"],"chance of":["making"],"chance to":["see","break"],"chances are":["YAGNI,"],"chances the":["domain"],"change (\"source\"":["is"],"change (one":["import"],"change (something":["like"],"change ;;),":["two"],"change Bob's":["attitude"],"change _if":["and"],"change `Bob.hey`":["method"],"change ``number``":["into"],"change also":["has"],"change and":["submit","will","you"],"change anything":["in","from","here"],"change anything,":["just"],"change anytime":["soon),"],"change class":["DNA"],"change code":["execution"],"change depending":["on"],"change doesn't":["force"],"change easier.":["But"],"change features":["to"],"change for":["the"],"change format_string":["to"],"change frequently.":["Other"],"change in":["`Word.__init__`,","specs","a"],"change is":["the"],"change it":["with","for","though","for"],"change my":["`__init__`","code","code","code."],"change over":["time."],"change so":["the","I"],"change that":["to","without"],"change that.":["But"],"change the":["responses","reader's","order","structure.","class","regexp","first","variable","responses","underlying","underlying","names","order"],"change this":["value","method","line."],"change those":["to"],"change to":["the"],"change with":["time."],"change your":["code","code.","if","code"],"change, you":["could"],"change. Maybe":["more"],"changed `phrase_list`":["to"],"changed `self.sequence`":["to"],"changed data":["structures"],"changed double":["underscore"],"changed get_verse_components()":["to"],"changed in":["a","the"],"changed it":["and","to"],"changed it.":["I'll"],"changed my":["mind"],"changed since":["then.","I"],"changed since),":["then"],"changed so":["that"],"changed splitting":["logic"],"changed that.":["And"],"changed the":["order"],"changed those.":["Also,"],"changed to":["a","simple","`elif`","'utterance',","string.isupper()"],"changed? Could":["you"],"changes and":["I","tbh,","I"],"changes his":["habits"],"changes in":["the","responses."],"changes made":["code"],"changes the":["`hey`","nature","result"],"changes to":["the"],"changes were":["made"],"changes will":["happen"],"changes, I":["forgot"],"changes, and":["`wordcounter`"],"changes, consider":["looking"],"changes. I'll":["submit"],"changes. Is":["that"],"changes. This":["tip"],"changes. What's":["the"],"changes. When":["the"],"changes... but":["devil"],"changing data.":["You"],"changing line":["18"],"changing the":["method","body","meaning","precedence","code","original","for","code."],"changing? could":["just"],"chapter of":["the"],"char by":["char."],"char for":["char"],"char in":["self.chain)","msg"],"char limit":["does"],"char occurrence":["on"],"char with":["max."],"char)` with":["the"],"char, so":["you"],"char. I":["don't"],"char.isalpha())` looks":["like"],"char` with":["just"],"character (i.e.":["a"],"character and":["it"],"character appeared":["in"],"character at":["a"],"character checking":["can","can"],"character codes":["of"],"character in":["the","the","message","the","the"],"character is":["a","by"],"character limit,":["because"],"character line":["limit)"],"character long,":["it"],"character of":["the","the","a","a"],"character replacements":["/"],"character rule?":[":-)",":-)"],"character set":["you"],"character so":["it"],"character string,":["something"],"character strings.":["Nice"],"character to":["change","be","itself?"],"character uppercase,":["then"],"character, false":["otherwise."],"character, which":["for"],"character-for-character the":["same"],"character. There's":["also"],"characteristics. The":["message"],"characters (i.e.":["letters)"],"characters (what":["if"],"characters I":["want"],"characters and":["constructing","convert"],"characters are":["uppercase.","uppercase."],"characters as":["the"],"characters but":["found"],"characters explicitly,":["rather"],"characters from":["the"],"characters in":["string","code","the","the","the"],"characters of":["the"],"characters replacements.":["Maybe"],"characters to":["proper","themselves"],"characters which":["don't"],"characters\" or":["something."],"characters, but":["to"],"characters, if":["nothing"],"characters, not":["words"],"characters. Because":["that"],"characters. Hence,":["if"],"characters. Not":["sure"],"characters. There":["is"],"chars (how":["could"],"chars and":["sort"],"chars are":["uppercase\":","caps","uppercase"],"chars in":["a"],"chars long":["function"],"chars while":["they"],"chars with":["others."],"chars(sorted,lowered) basically":["the"],"chars, but":["then"],"chars, thats":["why"],"chars. If":["I"],"chars. Is":["there"],"cheaper to":["leave"],"cheat a":["bit"],"cheating for":["this","this"],"cheating to":["be"],"chech in":["a"],"check \"if":["string.strip()"],"check \"not":["msg\""],"check \"yelling\"":["you","you"],"check `i":["is"],"check `if":["input","text"],"check `msg`":["value."],"check `not":["s`"],"check `str.isupper`":["and"],"check `type(data)":["is"],"check a":["string"],"check addressing":["or"],"check against":["`True`"],"check and":["simply"],"check as":["well"],"check at":["this"],"check before":["calling"],"check comments":["on"],"check does":["nothing"],"check doesn't":["take"],"check examples":["of"],"check explicitly":["since"],"check expresses":["the"],"check expressions":["should"],"check for":["empty","an","empty","silence","equality","anagram","```","yelling","question","None.","length","string","`None`","both","equality","`None`","`?`","`None`.","silence,","`None`","silence.","anagrams","whitespace","presence","yelling,","silence,","blank","uppercase,","word","truth.","if","the","that","`True`","the","string-suffixes","a","a"],"check from":["iteration"],"check further":["(hints:"],"check how":["you"],"check if":["text","string","it's","the","it's","it's","all","string","string","string","string","your","string","input","text","message","string","a","the","a","a"],"check in":["`screaming`.","string","the","1","the","`if`","`_silence()`","separate","separate","small"],"check input":["validity"],"check is":["pretty","for.","if","pythonic","if"],"check it":["in","to","out","once?"],"check makes":["validation"],"check method.":["To"],"check on":["line","line","its"],"check only":["a"],"check or":["shouting"],"check out":["how","the"],"check so":["I"],"check string":["for"],"check that":["the","the","`s`"],"check the":["wrong","ratio","code","type","end","`collections`","tests","last","string's"],"check this":["on"],"check to":["helpers","guard","a","a"],"check whether":["Bob","string","it's"],"check your":["facts"],"check) using":["s,"],"check, but":["Bob"],"check, instead":["opting"],"check, python":["makes"],"check. Additional":["documentation"],"check. Also,":["In"],"check. If":["i"],"check: I":["don't"],"check? I":["think"],"checkForYelling, which":["would"],"checked everything,":["that"],"checked everything.":["That","That","That","That"],"checked first.":["It"],"checked how":["both"],"checked in":["your"],"checked out":["first"],"checked that":["in"],"checked to":["see","see","see"],"checked, canonicalized":["phone"],"checker a":["little."],"checker as":["[flake8](https://pypi.python.org/pypi/flake8)"],"checking \"text":["=="],"checking against":["an"],"checking all":["the","caps"],"checking and":["use","cleanup"],"checking as":["method"],"checking can":["also","also"],"checking for":["anagram","anagram","empty","`word","shouting.","None","validity","missing","a","a","`input.isupper()`","the","an","the","the"],"checking for.":["(like","Not"],"checking if":["text","a","all","the","a","word"],"checking inputs":["on"],"checking is":["for","the"],"checking it":["for"],"checking of":["capitalized","strings.","end"],"checking out":["Exercism,"],"checking over":["my"],"checking punctuation,":["I"],"checking that":["length","`message`"],"checking the":["type","length","last","suffix","input"],"checking to":["see"],"checking whether":["it","the"],"checking. But,":["in"],"checking... I":["think"],"checkout Ned":["Batchelder"],"checkout the":["docs","`str.isupper()`"],"checks \"is_angry\"":["and"],"checks -":["please"],"checks and":["signals"],"checks are":["actually"],"checks down":["the"],"checks for":["yelling/","`return","all","compliance.","both","an","anything","the"],"checks if":["a","all"],"checks in":["`hey`","string","ifs","their","helper","different","lower"],"checks into":["separate","separate","separate","functions,","functions","methods,"],"checks makes":["it"],"checks more":["succintly."],"checks much":["more"],"checks only":["if"],"checks return":["a","either"],"checks to":["a","(private)","helpers","helpers","1?"],"checks whether":["the"],"checks with":["regards","inline","functions,"],"checks\"? I":["looked"],"checks, but":["that's"],"checks. And":["`str.isupper`"],"cheers for":["open"],"child class.":["This","This"],"chill out":["/"],"chill out!\"":["response?","control."],"chill out!'":["!="],"chill out!',":["self.bob.hey('WHAT"],"chillout? No,":["you"],"choice IMHO":["-,"],"choice IMHO),":["at"],"choice for":["``DNA``'s"],"choice of":["putting"],"choice or":["ask","another,"],"choice than":["`sorted`"],"choice to":["decouple","a"],"choice, but":["I"],"choice, there":["is","is","is"],"choices, and":["not"],"choose `_RESPONSE`.":["`__...__`"],"choose a":["different"],"choose for":["this"],"choose it's":["easier"],"choose non-public;":["it's"],"choose this":["solution.","solution"],"choose to":["use","do","use","use","mark","mark","use"],"choosed to":["make","mark"],"choosing a":["different"],"chose `str[-1:]`":["over"],"chose a":["list"],"chose at":["this"],"chose defaultdict":["for"],"chose functional":["style"],"chose good":["names"],"chose this,":["because"],"chose to":["implement","check","return","use","make"],"chose translate":["instead"],"chosen a":["broken"],"chunks as":["small"],"circuit the":["sanitizing"],"circular imports,":["however"],"circulation will":["be"],"circumstance anyway":["(I"],"circumstance', and":["since"],"circumstances where":["10000~"],"circumstances, and":["in"],"citizens has":["to"],"cl =":["[False,"],"cl[0] =":["True"],"cl[1] =":["f(*args,"],"claim that":["it's","\"DNA","Counter"],"claimed otherwise?":["I"],"clarification in":["a"],"clarify -":["are"],"clarify for":["me?"],"clarify it":["in"],"clarify rational":["for"],"clarify the":["\"shouting\"","code."],"clarify things.":["I"],"clarify this":["with"],"clarify when":["each"],"clarify why":["you"],"clarify your":["intent","concerns."],"clarifying that":["it's"],"clarifying what":["the"],"clarity and":["readability."],"clarity it":["brings."],"clarity that":["comes"],"clarity would":["be"],"clarity, but":["I"],"clash with":["member","a"],"clashes in":["some","some"],"class (`collections`":["module"],"class (and":["it's","remove"],"class (becoming":["a"],"class (different":["responsibilities.)"],"class (ie":["`Word`"],"class (just":["to"],"class (technical":["object"],"class (thus":["being"],"class (unless":["they"],"class (won't":["change"],"class *without*":["`self`."],"class -":["as","`someword.is_anagram_of(otherword)`","as","so","you"],"class 100000":["loops,","loops,"],"class :)":["I've"],"class \u003e":["methods"],"class ?":["Look"],"class API":["is","?"],"class Bob.":["Since"],"class DNA":["to"],"class `Bob`.":["You"],"class `Phrase`":["which"],"class already":["does"],"class and":["classify","into","a","you","the","modify","`DNA.to_rna`","documented"],"class as":["well.","a","well"],"class at":["all,","the","all"],"class attribute":["gotcha","'rna'","FWIW.","when","?","?","and","mapping","and"],"class attribute)":["in"],"class attribute.":["Modifying"],"class attributes":["(as","can","at","and"],"class attributes,":["yes"],"class attributes.":["That"],"class based":["decorator"],"class based.":["```check_upper```"],"class because":["there"],"class before,":["and"],"class behave":["like"],"class being":["named"],"class besides":["counting"],"class body":["becomes"],"class but":["finally","it","that"],"class called":["Greeting?","counter"],"class can":["handle","do"],"class capabilities":["for"],"class client":["more","more"],"class comes":["first"],"class constants":["-"],"class constructed":["by"],"class could":["also","easily"],"class create":["a"],"class declaration":["and"],"class decorator,":["or"],"class definition":["needs","and"],"class definition,":["and","would"],"class definition.":["More","Have","See","With","I'm"],"class definitions":["would"],"class definitions.":["Blank","`elif`s","Otherwise,"],"class describes":["the"],"class describing":["what"],"class docstring!":["Great"],"class doctring":["if"],"class documentation":["or","for"],"class doesn't":["matter","seem"],"class fairly":["verbose."],"class for":["the","such","doing","a","that","more","this,","everything","sentences","each"],"class functions.":["Alternatively,"],"class has":["some","quite","the","well","no"],"class here":["is"],"class here.":["Not"],"class here?":["Is"],"class idea.":["It's"],"class if":["we","they","they"],"class in":["this","`collections`","the","a"],"class inherit":["from","from","from","from","from","from","from","from"],"class inherits":["from"],"class initialization":["to"],"class initialization,":["you"],"class initialization.":["But"],"class is":["expected),","also","a","analysing","all","sorta","necessarily","really","not","too","really","used,","exactly","to","open","used.","probably"],"class isnt":["necessary"],"class it's":["clear"],"class just":["to"],"class level":["makes","attributes","attributes,","attributes.","because","would","constant."],"class level,":["declares"],"class like":["`BOB_VOCAB"],"class makes":["more"],"class member":["non-public."],"class member,":["not"],"class members,":["I'd"],"class methods":["are","and","for","or","is","rather","(the"],"class methods?":["Either"],"class mimics":["the"],"class more":["useful","versatile"],"class myself":["-"],"class name":["in","or","in","in","already","'Conversation'."],"class names":["-","etc.","that","are"],"class names)":["and"],"class names.":["For","More","Please","You"],"class non-public":["by"],"class not":["to"],"class now":["represents"],"class object":["itself."],"class on":["which"],"class only":["\"exist\""],"class or":["module","'global'","something.)"],"class override":["an"],"class provides":["the"],"class public":["API","interface."],"class published":["API"],"class semantics,":["I"],"class shoud":["initialised"],"class should":["be","inherit"],"class simplifies":["code"],"class since":["you"],"class snippet":["just"],"class so":["you","you"],"class statement,":["you"],"class stuff.":["Thanks!"],"class such":["as"],"class than":["`Bob`","``list``."],"class that":["says","has"],"class then":["they"],"class then.":["`elif`s"],"class there.":["Interpreting"],"class thing,":["but"],"class to":["enforce","private","represent","give","be","be","enable","encapsulate","see"],"class vital":["part"],"class was":["not","larger,"],"class were":["aimed","to"],"class when":["a","a"],"class which":["will"],"class will":["work","have","not"],"class with":["helper","a","some"],"class without":["making","having"],"class would":["only","have","be","be"],"class wouldn't":["so","hurt","hurt"],"class wrapping":["round"],"class write":["something"],"class yet.":[";)"],"class! I":["kept"],"class' API.":["ifs","Consider","Other","Even","`elif`/`else`"],"class' API:":["http://docs.python.org/2/library/stdtypes.html#string-methods"],"class' constructor":["using"],"class' public":["API.","API"],"class). This":["would"],"class, I":["wanted","decided"],"class, and":["allow"],"class, because":["module","now"],"class, but":["IMO","I","if","decided","made","I","does","that","decided","I"],"class, constant":["and"],"class, either,":["but"],"class, even":["though"],"class, for":["example"],"class, in":["line"],"class, is":["it"],"class, it":["expects"],"class, it's":["a"],"class, let":["it"],"class, method":["or"],"class, module":["or"],"class, my":["next"],"class, no":["pythoneer","one"],"class, not":["a","in","the"],"class, or":["to","done"],"class, self-documents,":["that"],"class, so":["you"],"class, takes":["inputs"],"class, that":["could"],"class, the":["function"],"class, use":["a"],"class, which":["now","isn't"],"class, why":["are","not"],"class, would":["not"],"class, yes.":["You're"],"class, you":["can","could"],"class-level \"constants\"":["?","?"],"class-level constant":["to"],"class-level variables,":["but"],"class. (The":["decision"],"class. But":["that's"],"class. Currently":["they"],"class. Fix":["it"],"class. I":["don't"],"class. I've":["used"],"class. In":["other","addition,","this"],"class. It":["doesn't","can"],"class. Maybe":["use"],"class. Most":["editors"],"class. Reminder":[":"],"class. See":["tutorial"],"class. So":["from"],"class. These":["functions"],"class. They":["are"],"class. This":["is","is"],"class. To":["my–very"],"class. Will":["make"],"class. You":["could"],"class: do":["you"],"class? How":["do"],"class? Something":["like"],"class? They're":["not"],"class? Why":["not"],"classes (IOW":[":",":"],"classes (e.g.":["`Bob`)."],"classes (ie":["make","make"],"classes (inheriting":["from"],"classes (introduced":["since"],"classes -":["by"],"classes `msg`":["belongs"],"classes all":["inherit"],"classes and":["new-style","it"],"classes are":["the","objects","objects","the","new-style"],"classes because":["it","it's","it"],"classes by":["convention.","inheriting","convention.","inheriting","extending","making","subclassing","official","[subclassing","subclassing","subclassing","subclasing","subclasing"],"classes can":["sometimes"],"classes designed":["to"],"classes for":["python","each","collections,"],"classes from":["```object```","the","the","the","the","the","the","the","the","the"],"classes have":["no"],"classes if":["they"],"classes in":["the","Python","my","the","python","Python","Python](http://stackoverflow.com/a/54873/1488781)","python'","python","python","python","python","python","python","python","python","python","my","python","python."],"classes inherit":["from","from","from","from"],"classes instead":["of"],"classes is":["better","that"],"classes myself":["so"],"classes over":["functions"],"classes per":["PEP8."],"classes right":["of"],"classes than":["necessary"],"classes that":["I","could","implement"],"classes this":["could"],"classes to":["inherit","communicate"],"classes vs":["new"],"classes which":["are"],"classes with":["two","methods,"],"classes\" and":["Counter(iterable)"],"classes\" in":["the","the"],"classes' for":["more)."],"classes, but":["I'd","this"],"classes, so":["you"],"classes. I":["was","like","tried"],"classes. I'll":["try"],"classes. In":["2.x"],"classes. It's":["always"],"classes. More":["on"],"classes. Most":["names"],"classes. New-style":["classes"],"classes. See":["newly"],"classes. Take":["a"],"classes. Will":["change"],"classes. see":["http://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python"],"classes: Bob(object).":["It"],"classes](http://realmike.org/blog/2010/07/18/introduction-to-new-style-classes-in-python/). In":["fact,"],"classes](http://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python), and":["for"],"classic exercise":["that"],"classic tome":["\"Smalltalk"],"classic use":["of"],"classification routines":["(``is_shouting``,"],"classifiers as":["`Bob`"],"classifiers out":["of"],"classify messages,":["so"],"classify my":["solution."],"classify sentences":["outside"],"classify them":["there."],"classify to":["have"],"classifying part":["decoupled"],"classifying part.":["And"],"classifying that":["phrase"],"classmethod as":["you"],"classmethod or":["a"],"classmethod since":["it"],"classmethod. Except":["for"],"classvar should":["be"],"clause and":["string","returns"],"clause by":["using"],"clause for":["handling"],"clause is":["not"],"clause is.":["I"],"clause nor":["the"],"clause of":["line"],"clause on":["`_match_word`"],"clauses are":["Bad(tm)."],"clauses instead":["of"],"clauses to":["use"],"clauses too":["but"],"clean (sic!)":["up"],"clean /":["manageable"],"clean and":["Pythonic","direct.","easy"],"clean approach":["I'm","I'm"],"clean approach.":["You"],"clean as":["possible.","I"],"clean code.":["I"],"clean implementation":["of"],"clean implementation,":["I"],"clean initial":["attempt."],"clean it":["up","up.","up"],"clean looking":["'silence'"],"clean method":["for"],"clean solution.":["Two"],"clean solution?":["To"],"clean up":["word_count","the","the"],"clean way":["I"],"clean, I":["would","would"],"clean, but":["I","some"],"clean, simple,":["direct"],"clean-up of":["the"],"clean. Couple":["of"],"clean. I":["like"],"cleaned most":["of"],"cleaned up":["most"],"cleaned word":["if"],"cleaner but":["don't"],"cleaner if":["the"],"cleaner overall.":["I"],"cleaner than":["mine."],"cleaner this":["way."],"cleaner to":["me.","pass","use"],"cleaner way":["to","to"],"cleaner way.":["I"],"cleaner with":["all"],"cleaner. Also":["using"],"cleaner. I":["do"],"cleaner. I've":["also"],"cleaner. Thanks":["for"],"cleanest one.":["The"],"cleanest solution":["to"],"cleaning the":["phrase"],"cleaning up":["the","the","the","inputs"],"cleanly if":["all"],"cleanly separated":["from"],"cleanly. They":["all","all"],"cleans that":["up."],"cleans things":["up"],"cleanup in":["a"],"cleanup is":["performed"],"clear --":["you"],"clear about":["the"],"clear and":["succinct","self-documenting.","consistent.","readable"],"clear as":["`sum`"],"clear enough":["for","that"],"clear enough,":["but"],"clear enough.":["Just","Otherwise"],"clear for":["the"],"clear from":["the","the"],"clear if":["`toBob.isupper()`","`input.isupper()`","`phrase.isupper()`"],"clear meaning.":["And"],"clear motivation":["(typically,"],"clear on":["why"],"clear public":["api."],"clear so":["far!"],"clear than":["```len(text)","\"blah","\u003ccode\u003enot","trying"],"clear that":["the","the","the","the"],"clear the":["best"],"clear things":["up"],"clear this":["up"],"clear to":["me."],"clear what":["gets","they're","they're","is","``'T'``","is","steps","I'm"],"clear what's":["going","going"],"clear where":["they"],"clear why":["certain","each"],"clear with":["the"],"clear without":["resorting","comments"],"clear, I":["decided"],"clear, but":["is","I"],"clear, concise,":["and"],"clear, the":["second"],"clear, this":["isn't"],"clear, why":["are"],"clear. A":["comment"],"clear. Do":["you"],"clear. I":["just"],"clear. It's":["just"],"clear. The":["one","other"],"clear?. For":["example"],"clearer and":["more","easier","evident"],"clearer before.":["Maybe"],"clearer in":["`match`?","that"],"clearer than":["what","using"],"clearer to":["use"],"clearer way":["to"],"clearer what":["they","it's","result"],"clearer whats":["going"],"clearer, IMO,":["than"],"clearer, don't":["be"],"clearer, have":["you"],"clearer, in":["my"],"clearer, so":["now"],"clearer. Could":["you"],"clearer. I":["like","feel"],"clearer. Think":["\"what"],"clearer; I":["think"],"clearer; `isupper/0,":["endswith/1,"],"clearest alternative":["I"],"clearest solution":["possible."],"clearly associates":["the"],"clearly extensible,":["and"],"clearly illustrate":["any"],"clearly more":["Python-esque"],"clearly put":["enough"],"clearly reflects":["what's"],"clearly searching":["for"],"clearly show":["the"],"clearly shows":["its"],"clearly signifying":["required"],"clearly stated.":["Good"],"clearly that":["translating"],"clearly written.":["The","The"],"clearly. After":["these"],"clearly. You":["can"],"clearly? (I":["struggled"],"clever ;)":["Looks"],"clever and":["interesting,"],"clever. A":["list"],"clever. nothing":["expressive."],"cleverness and":["simplicity."],"cli tool":["named"],"cli utility":["(at","that"],"client -":["I'm"],"client could":["easily","just"],"client more":["context","context"],"client writes":["something"],"clients may":["mess"],"clojure and":["python"],"clojure example":["had"],"clojure how":["to"],"clone the":["exercism"],"close every":["block"],"close to":["the","the"],"closed for":["modification"],"closer to":["`Bob`,"],"closing `\"\"\"`":["of"],"closure 100000":["loops,"],"closure \u003e":["methods"],"closures /":["partial"],"clue about":["that."],"clue hammer":["liberally"],"clutter the":["other","predicates"],"clutter up":["the"],"cluttered with":["low"],"cluttering the":["`Bob`","class"],"cobbling together":["a"],"code (...":["for"],"code (and":["functionality)."],"code -":["in"],"code --":["[str.format](http://docs.python.org/2/library/stdtypes.html#str.format)"],"code ?":["I"],"code I":["ever","would","submitted.","would","like"],"code `self.phrase":["="],"code a":["bit","lot","breeze.","bit.","tiny"],"code above":["it"],"code actually":["does,","does","pass"],"code and":["comment","obscure","see","you","separate","response","not","the"],"code as":["I","suggested."],"code at":["one"],"code bases.":["In"],"code became":["monstrous:)"],"code because":["when","of"],"code being":["ugly","difficult"],"code below":["it"],"code both":["\"if\""],"code break.":["Now"],"code but":["I'm","not","the","would"],"code can":["only","handle"],"code change":["(something"],"code clean":["/"],"code cleaner.":["I"],"code clearer;":["`isupper/0,"],"code clearly.":["After"],"code comments.":["It's"],"code conventions":["all"],"code could":["read","be","actually"],"code defaults":["to","to","to","to","to"],"code demonstrates":["what"],"code does":["not","not.","exactly"],"code does,":["you"],"code doesn't":["allow","pass","seem","pass","pass","use","do"],"code duplication":["regarding"],"code easier":["to","to","to","to","to"],"code easier.":["I'm"],"code efficient":["while"],"code even":["better.","more","more.","shorter"],"code exactly":["duplicates"],"code execution":["since","but"],"code faster":["because"],"code first":["came"],"code for":["this.","the","ways","conformance","trivial","this","the","the","the","such"],"code formatting":["standards","and"],"code formatting/naming":["can"],"code from":["do_count_words***`","a"],"code handle":["the"],"code harder":["to","to"],"code has":["a"],"code here":["to"],"code if":["you","you","you"],"code in":["functional","6","the","split_phrase","this","the","well","other","the"],"code instead":["of"],"code intent":["clear."],"code into":["internal","functions"],"code is":["too","looking","really","unidiomatic?","readable","very","very","concise","concise","a","doing.","very","clearer","a","very","very","overkill","written","ok).","quite","elaborate","nice","clear","at","clear,","doing.","immediately","something","hard.","straight","clear.","nice","self-explanatory","readable","very","very","fine.","quite","longer,","too","fine","fine.","fine","fine","fine","fine","fine","great"],"code is,":["someone","to"],"code isn't":["that"],"code it":["this"],"code itself":["of"],"code itself:":["you","there"],"code just":["became","because"],"code later":["(even"],"code layout":["is"],"code less":["legible.","readable"],"code like":["this,"],"code looked":["better"],"code looks":["good","great.","much","great.","quite","fine,","great,","better.","great,"],"code makes":["it","a","it"],"code more":["self","expressive","readable.","readable,","verbose","self-documenting","clear?.","succint","clear?","than","succint.","readable.","complex","expressive","readable.","pythonic","readable,","general","pep8"],"code much":["more","cleaner."],"code must":["have"],"code needs":["another/different","to","more","refactoring"],"code nice":["and"],"code now?":[":P"],"code of":["this"],"code on":["line"],"code or":["resorting"],"code organization.":["Or"],"code passes":["the","all"],"code pattern":["in","crying","?","in","in"],"code plain":["`'T'`"],"code possible.":["But,"],"code pretending":["to"],"code probably":["wasn't"],"code readability":["could","penalty","or"],"code reading":["perspective"],"code reads":["in"],"code really":["does"],"code repetition.":["Perhaps"],"code run":["as"],"code runnable":["on"],"code seems":["to"],"code self-describing;":["i.e."],"code shorter":["and","and"],"code should":["have","look","be"],"code shouldn't":["be"],"code snippet":["there,"],"code so":["it","well","that"],"code speak":["for"],"code split":["into"],"code style":["conventions."],"code styling,":["especially"],"code tests":["for"],"code than":["necessary"],"code that":["makes","most","just","will","have","makes"],"code that's":["meant"],"code they":["describe"],"code through":["the","appropriate"],"code to":["make","speak","see","conform","directly","get","minimum.","complete","categorize","use","be","handle","make"],"code to,":["because"],"code totally":["un-pythonically."],"code twice":["as"],"code using":["`sentence.isupper()`","default"],"code was":["already"],"code went":["from"],"code what":["your"],"code which":["determines"],"code will":["omit","be","be","work","break","hate","be","also","be"],"code with":["just","just","any","the","it."],"code without":["resorting"],"code won't":["take","let"],"code work":["with"],"code works":["pretty"],"code would":["understand","however","be","break,","be"],"code you":["wrote?","submitted","make"],"code! I":["have","hope"],"code\" -":["there"],"code) that":["predicates"],"code). I":["also"],"code); however,":["since"],"code, I":["indeed","learnt","didn't"],"code, I'd":["only"],"code, although":["the"],"code, and":["not","I'm","speed","to","avoid","no"],"code, but":["might","I","are","exercism.io","it","it's","the"],"code, by":["moving"],"code, it's":["the"],"code, just":["a"],"code, less":["branching),"],"code, no":["more,"],"code, rather":["than"],"code, see":["Ned"],"code, so":["I","I","maybe","for"],"code, try":["adding"],"code, which":["I"],"code, while":["the"],"code. And":["if"],"code. Didn't":["know","know"],"code. Don't":["forget"],"code. First,":["DNA"],"code. How":["do"],"code. However,":["this"],"code. I":["know","think","have","hope"],"code. If":["you"],"code. In":["current"],"code. It":["surprises"],"code. It's":["better","not"],"code. Maybe":["it","it"],"code. Not":["sure"],"code. Readability":["counts"],"code. Should":["be"],"code. So":["at"],"code. So,":["they"],"code. That's":["what"],"code. The":["loop","same"],"code. There":["is"],"code. Very":["little"],"code. When":["I"],"code. While":["it's"],"code. Why":["not"],"code. Will":["try"],"code. Writing":["the"],"code. Your":["other","isBlank"],"code. `\"\".join(list)`":["seems"],"code. `len(phrase)":["=="],"code? Any":["reason"],"code? In":["reality,"],"code? Would":["it"],"codeacademy and":["'learn"],"codebase it's":["quite"],"codebase. Consider":["using"],"coded as":["a"],"coded python":["last"],"codes of":["'a',"],"codes, that's":["simple."],"coding can":["save"],"coding in":["Python.","Python","Python","general)"],"coding it":["directly"],"coding style":["uses"],"coding styles":[";)"],"coding, would":["you"],"coding. Thank":["you."],"coerce inputs":["into"],"coersion and":["guards?"],"coersion as":["much"],"coersion avoids":["nested"],"cohesive objects":["(one"],"collect all":["the"],"collection and":["the"],"collection classes.":["Take"],"collection library,":["you"],"collection. It":["would"],"collections and":["used"],"collections as":["a"],"collections etc)":["of"],"collections here":["but"],"collections import":["Counter\\n[Counter(\"sadfasdfagrregwfagfregawgfresafafewrf\"*10000)","Counter\\n[Counter(\"sadfasdfagrregwfagfregawgfresafafewrf\"*10000)","Counter\\n[Counter(\"sadfasdfagrregwfagfregawgfresafafewrf\")","Counter","Counter`","Counter"],"collections rather":["than"],"collections that":["might"],"collections, thanks":["for"],"collections. I":["did"],"collections.Counter are":["great!"],"collections.Counter can":["take"],"collections.Counter would":["be"],"collections.Counter! I":["have"],"colliding with":["the"],"collisions -":["then"],"colon -":["you"],"combination with":["[str.isspace](http://docs.python.org/2/library/stdtypes.html?highlight=isspace#str.isspace)","[str.isspace](http://docs.python.org/2/library/stdtypes.html?highlight=isspace#str.isspace)"],"combined in":["a"],"combined with":["```is_silent```","`is_silent`?"],"combines non-alpha":["chars"],"combining different":["programming"],"combo to":["avoid"],"come across":["the"],"come as":["a"],"come built":["in"],"come down":["to"],"come first,":["so"],"come from":["a","Ruby,","the","the"],"come to":["mind:"],"come up":["with","with.","with","with","for"],"come with":["over-engineered","a"],"comes a":["new"],"comes first":["–"],"comes from":["the","intent-revealing","the","the","a"],"comes into":["system"],"comes last.":["This"],"comes n":["Python"],"comes the":["suggestion"],"comes to":["Python","how","how","reuse,","answers."],"comes up":["for","tomorrow"],"comfort zone":["with"],"comfortable with":["the","regular"],"comma and":["a"],"comma in":["function's","function/method"],"comma** in":["dictionary"],"command (\"Do":["this\","],"command had":["a"],"command line":["utility","agent.","as"],"commas in":["arguments","argument"],"comment (\"if":["message"],"comment -":["one"],"comment I":["take","would"],"comment `\"\"\"Sets":["the"],"comment `endswith`":["'?'"],"comment about":["early","inconsistency","early","the"],"comment almost":["seemed"],"comment and":["is","a"],"comment as":["saying"],"comment at":["the","the"],"comment becomes":["unneeded"],"comment but":["does"],"comment collections":["as"],"comment could":["go"],"comment counts":["as"],"comment describing":["what"],"comment explaining":["what"],"comment for":["that."],"comment idea":["explaining"],"comment indentation":["shows"],"comment is":["very","wrong."],"comment liberally":["but"],"comment next":["to"],"comment on":["line","the","early","this.","the","the","the","line","line"],"comment re.":["what"],"comment that":["someone","changed"],"comment to":["make"],"comment was":["backwards"],"comment where":["I"],"comment, I'm":["breaking"],"comment, but":["definitely","I"],"comment, this":["looks"],"comment, which":["is"],"comment. At":["the"],"comment. From":["the"],"comment. The":["goal"],"comment. You":["could"],"comment: iff":["should"],"commented out":["portion","code."],"commented that":["separating"],"commenter suggested,":["defining"],"commenters. Also,":["the"],"commenting (beyond":["the"],"commenting the":["code."],"commenting to":["others,"],"commenting) because":["I"],"comments :)":["I"],"comments about":["the"],"comments above":["checks,"],"comments anymore.":["I"],"comments are":["useless","quite","very","not"],"comments at":["all"],"comments based":["on"],"comments before":["each"],"comments beyond":["the"],"comments but":["very"],"comments by":["a"],"comments explain":["what","your"],"comments for":["the","the"],"comments from":["me."],"comments gone?":[":D"],"comments here?":["If"],"comments in":["the","the","the","there","the"],"comments is":["unnecessary","a"],"comments like":["\"#","this"],"comments mainly":["because"],"comments near":["each"],"comments next":["to"],"comments obviously":["need"],"comments of":["by","sivhollup."],"comments on":["another's","your","previous","your","versions"],"comments or":["moving","by"],"comments sprinkled":["here"],"comments to":["your","the","tell","describe","clarify"],"comments which":["are"],"comments while":["balancing"],"comments would":["thus","have"],"comments you":["provide"],"comments! I":["definitely"],"comments\" habits.":["The"],"comments, I":["see"],"comments, but":["it"],"comments, especially":["on"],"comments, it":["got"],"comments, since":["the"],"comments. I":["like","find"],"comments. In":["the"],"comments. It's":["only"],"comments. Maybe":["something"],"comments. This":["is"],"comments. You're":["right"],"comments. Your":["doc"],"comments. `x.isupper()`":["would"],"comments...with the":["top"],"comments/docstrings or":["helpers)"],"comments: it's":["not"],"committed to":["let"],"common acronyms":["instead"],"common convention":["is"],"common enough":["that"],"common functions":["as"],"common in":["C"],"common misleading":["widely"],"common string":["interface"],"common to":["prefix"],"common typos":["such"],"common, next":["task!"],"common-sense design":["of"],"communicate meaning":["of"],"communicate more":["clearly."],"communicate the":["intent"],"communicate what's":["happening"],"communicated in":["the"],"communication context":["or"],"communication pattern":["between"],"communicative why":["it"],"community feel":["about"],"community has,":["in"],"community, and":["they"],"comp to":["build"],"compact and":["well"],"compact code":["for"],"compact however":["it"],"compact, dense":["and"],"compact. I'm":["curious"],"compact. Please":["also"],"compare a":["string"],"compare already":["computed"],"compare and":["convert."],"compare each":["individual"],"compare in":["Python"],"compare itself":["with"],"compare length":["in"],"compare the":["two."],"compare those":["(`signature"],"compare to":["Clojure","empty"],"compare which":["is"],"compared my":["test","test"],"compared to":["a","the","the","having"],"compared with":["the"],"comparing against":["a"],"comparing file":["md5"],"comparing for":["anagrams,"],"comparing it":["to"],"comparing itself":["to"],"comparing message":["to"],"comparing sorted":["strings"],"comparing the":["lowercased"],"comparing to":["''","empty"],"comparing with":["None","the"],"comparing. Your":["code"],"comparison (`self._lowercased":["=="],"comparison at":["all."],"comparison is":["not"],"comparisons (==":["in"],"comparisons in":["one","is_anagram"],"comparisons to":["tell"],"compatibility, you":["should"],"compatible (like":["`defaultdict`)?"],"compatible type)":["and"],"compatible with":["the","other","Python","Python"],"compelling reason":["to"],"compilation and":["caching"],"compile a":["regex,"],"compile it":["at"],"compile the":["same"],"compile them":["advance"],"compile time":["instead"],"compiled regex":["name,"],"compiler you've":["got"],"compiling and":["matching"],"complain a":["lot."],"complain about":["one","single"],"complain about.":["One"],"complain if":["you"],"complected code":["base."],"complement like":["in"],"complete arguments":["and"],"complete instead":["of"],"complete newb":["at"],"complete the":["\"Make","same"],"complete this":["exercise"],"complete with":["`__repr__`"],"completed the":["entire"],"completed version":["soon!","soon!"],"completely and":["return"],"completely different":["approach."],"completely different!":["I"],"completely for":["basic"],"completely happy":["with"],"completely isolated":["it"],"completely orthogonal":["concern,"],"completely sure":["if"],"completely tangential":["stuff"],"completely unaware":["of"],"completely. Exalent":["point"],"complex (if":["you're"],"complex -":["is"],"complex enough":["that"],"complex for":["no","little"],"complex initializer":["having"],"complex pattern":["matching,"],"complex version":["in"],"complex, and":["most"],"complex, in":["this"],"complex, it's":["also"],"complex, method":["extraction"],"complex, then":["the"],"complex. I":["would"],"complex. Maybe":["use"],"complex. Perhaps":["there"],"complex. Something":["like"],"complexity and":["is","duplication."],"complexity isn't":["needed"],"complexity of":["nlogn","your","the"],"complexity the":["better,"],"complexity with":["`FormattedWord.is_anagram_of`"],"complexity, by":["first"],"complexity. And":["that"],"complexity. Else":["better"],"complexity. How":["could"],"complexity. I've":["seen"],"compliance. Of":["course"],"complicate the":["code"],"complicated (hence":["harder"],"complicated (or":["at"],"complicated I":["can"],"complicated `once`":["for"],"complicated and":["using"],"complicated class":["that"],"complicated compared":["to"],"complicated construct,":["I"],"complicated for":["this","such"],"complicated inheritance":["model."],"complicated ones":["exist)."],"complicated situation":["I'd"],"complicated solution":["using"],"complicated structure":["for"],"complicated than":["it"],"complicated then":["yes,"],"complicated, but":["I"],"complicated, having":["a"],"complicated, you":["can"],"complicated, your":["regex-based"],"complicated. I":["think"],"complicated. Is":["there","there"],"complicated. Should":["I"],"complicated. To":["check"],"complicates code":["a"],"complies to":["PEP8."],"comply to":["PEP8"],"comply. Your":["taste"],"component parts":["that"],"components being":["considered"],"components involved":["in"],"composable/private tasks":["in"],"composition (unittests":["sometimes"],"composition and":["delegation"],"composition, or":["mixins."],"comprehend. You":["might"],"comprehending your":["advice"],"comprehension (I'd":["suggest"],"comprehension (or":["`map`)"],"comprehension [],":["and"],"comprehension a":["bit"],"comprehension and":["see","it","avoid"],"comprehension as":["a"],"comprehension can":["be"],"comprehension could":["be","clean"],"comprehension for":["a","clarity."],"comprehension here.":["String"],"comprehension in":["`Anagram.match`.","`match`","the"],"comprehension instead":["of"],"comprehension is":["what","nice","pretty","much","here","a"],"comprehension list":["instead"],"comprehension may":["be"],"comprehension on":["line"],"comprehension or":["`map`."],"comprehension should":["be"],"comprehension so":["much"],"comprehension starts":["with"],"comprehension syntax.":["It"],"comprehension to":["do","manage"],"comprehension with":["filtering."],"comprehension work":["better?"],"comprehension would":["be","be"],"comprehension you":["can"],"comprehension) -":["that"],"comprehension, and":["then"],"comprehension, but":["keeping","I"],"comprehension, to":["make"],"comprehension, with":["the"],"comprehension, you'd":["be"],"comprehension. It's":["not"],"comprehension. That":["would"],"comprehension. You":["could"],"comprehension. this":["time"],"comprehension? Then":["wouldn't"],"comprehensions (and":["their"],"comprehensions (line":["13)."],"comprehensions -":["it's"],"comprehensions are":["nice,","quick,","more"],"comprehensions but":["both"],"comprehensions each":["with"],"comprehensions instead":["of","of"],"comprehensions over":["`map`"],"comprehensions readable,":["expressive,"],"comprehensions so":["wanted"],"comprehensions though.":["They"],"comprehensions wherever":["possible."],"comprehensions with":["filtering)."],"comprehensions! I":["think"],"comprehensions* are":["great."],"comprehensions, like":["the"],"comprehensions, whether":["you"],"comprehensive. Maybe":["`self.normalized_phrase`?"],"comps with":["string"],"computation and":["do"],"computation being":["factored"],"computation is":["required?"],"computation on":["object"],"computation option),":["yet"],"computation result":["would"],"computation right":["in"],"computation time":["by"],"computation until":["the"],"computations each":["time"],"compute your":["sequence's"],"computed attribute":["to"],"computed attribute,":["Python"],"computed attributes":["so"],"computed attributes),":["or"],"computed twice":["for"],"computer science":["language"],"computer with":["the"],"computing (taking":["the"],"computing a":["lot"],"concatenated so":["you"],"concatinate strings":["with"],"concept ?":["(and"],"concept exists":["in"],"concept of":["readability","Word)."],"concept on":["its"],"concept? I":["think"],"concepts in":["this","this"],"concepts like":["\"shouting\"","\"all"],"concepts to":["me."],"concepts) and":["do"],"concepts, each":["with"],"concepts, thank":["you"],"conceptually and":["practically."],"concern is":["that"],"concern) but":["there"],"concern, so":["I've"],"concern: My":["understanding"],"concerned I":["see","would"],"concerned are":["1/"],"concerned is":["that"],"concerned it's":["only"],"concerned, ,":["the"],"concerned, I":["wouldn't"],"concerned, and":["while"],"concerning the":["constants."],"concerns -":["```"],"concerns here,":["the"],"concise (isupper()":["tests"],"concise and":["in","clearly","clearly","short","often","more","pythonic."],"concise for":["me,"],"concise looks":["line"],"concise! good":["start."],"concise, and":["self-documenting."],"concise, as":["recommended"],"concise, but":["at","not"],"concise. I":["guess"],"concisely a":["statement"],"concisely phrased":["in"],"conciseness and":["readability."],"conciseness of":["your"],"conciseness, but":["I"],"concluded that":["for"],"conclusion that":["everybody"],"concrete class":["to"],"concrete concept":["of"],"concrete vars":["from"],"cond` --":["no"],"condensity for":["readability"],"condition \"text":["=="],"condition `if":["not"],"condition at":["first"],"condition becomes":["kind"],"condition checks":["into"],"condition if":["I"],"condition in":["the"],"condition of":["that"],"condition uses":["`return`"],"condition you":["can"],"condition, but":["not"],"condition, without":["executable"],"condition. So":["you"],"condition. You":["could"],"conditional and":["it","action"],"conditional branch":["to"],"conditional branches":["to","be"],"conditional chain":["here."],"conditional expressions":["are"],"conditional in":["is_anagram()"],"conditional is":["unclear."],"conditional script?":["`if"],"conditional statement,":["instead"],"conditional statement.":["The"],"conditional statements":["there.","there.","there.","or"],"conditional statements.":["Does"],"conditional that":["has"],"conditional you":["can"],"conditional, you":["should"],"conditional. This":["means"],"conditionals (`if":["len(str.strip())"],"conditionals and":["putting"],"conditionals are":["not"],"conditionals in":["`hey()`","`hey`"],"conditionals into":["class","methods"],"conditionals when":["you're"],"conditionals, you":["can"],"conditionals. I":["think"],"conditionals. The":["logic"],"conditions \"blank":["string"],"conditions (that":["all"],"conditions are":["unnecessary.","somehow","a","too"],"conditions don't":["commute,"],"conditions for":["good/bad"],"conditions into":["some","methods.","a","domain-y","three"],"conditions like":["`isupper()`,"],"conditions mutually":["exclusive"],"conditions non":["overlapping"],"conditions not":["only"],"conditions on":["the"],"conditions or":["the"],"conditions with":["`and`."],"conditions without":["adding"],"conditions you're":["testing"],"conditions, and":["starts"],"conditions. I'm":["not"],"confident it's":["not"],"configurations or":["markers"],"configured. Is":["it"],"confirmation that":["my"],"conflated in":["pythons"],"conflating two":["responsibilities."],"conflict makes":["perfect"],"conflicts with":["attributes"],"conform to":["PEP","it."],"conformance with":["python","these"],"confuse it":["with"],"confuse the":["reader,"],"confuse with":["'1'"],"confused about":["what","the"],"confused by":["what"],"confused me,":["showing"],"confused over":["multiple"],"confused with":["an","a"],"confusing (at":["least"],"confusing `del`":["statement"],"confusing if":["you"],"confusing that":["just"],"confusing to":["read","me"],"confusing, not":["less"],"confusing, so":["perhaps"],"confusing, why":["don't"],"confusing. I":["think"],"confusion has":["been"],"confusion prone":["imho."],"congratulation for":["having","having"],"conjunction with":["`basestring`"],"connecting conditions":["with"],"connecting multiple":["conditional"],"connection between":["a","*uppercase*"],"conquer\", but":["for"],"consenting adults":["here\""],"consider \"cat\"":["to"],"consider `_query`":["(with"],"consider `s`,":["`string`,"],"consider a":["message"],"consider adding":["helper","this","doc"],"consider also":["using"],"consider breaking":["at"],"consider defining":["constants"],"consider e.g.":["debugging."],"consider extracting":["certain","that"],"consider factoring":["out"],"consider getting":["into","into","into","into"],"consider good":["style"],"consider having":["a"],"consider if":["helpers","helpers","helpers"],"consider implementing":["`__eq__`."],"consider improving":["though."],"consider is":["if","maybe"],"consider it":["more","should","to","cheating"],"consider looking":["through"],"consider making":["it","module"],"consider moving":["them","the"],"consider other":["name","name"],"consider putting":["the"],"consider reading":["[PEP-20](http://www.python.org/dev/peps/pep-0020/)."],"consider removing":["the"],"consider rewriting":["if"],"consider singing":["into"],"consider something":["like:"],"consider storing":["the"],"consider that":["\"T\"","commenting)","cheating"],"consider that,":["but"],"consider the":["\"special","readability","solution"],"consider using":["[str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper).","the"],"consider wrapping":["each"],"consider. `msg":["=="],"considerably faster,":["or"],"consideration is":["taken"],"considerations in":["mind."],"considerations, but":["that"],"considered 're'":["to"],"considered Falsy,":["so"],"considered Pythons":["isupper()"],"considered `elif":["not"],"considered `if..elif..`":["blocks"],"considered a":["programming","programming","correct"],"considered adding":["docstring's"],"considered all":["caps,","uppercase"],"considered an":["attribute"],"considered as":["shouting."],"considered bad":["style","practice","practice"],"considered breaking":["out"],"considered documenting":["public"],"considered extracting":["query","query","dispatch","`line"],"considered going":["for"],"considered it.":[";)"],"considered list":["comprehensions"],"considered making":["them","`alphagram`"],"considered marking":["`DNA.sequence`"],"considered moving":["the","each","message"],"considered naming":["`Bob.hey`"],"considered putting":["words"],"considered relevant":["to"],"considered shouts,":["not"],"considered that":["particular"],"considered the":["starting"],"considered this":["the"],"considered too":["much"],"considered using":["a","chain-of-responsibility","more","string.uppercase"],"considered very":["bad"],"considered when":["checking"],"considered your":["feedback"],"considering using":["```replace```"],"considering you":["would"],"considers cased":["caracters","characters"],"considers truthy":["to"],"consistency of":["the"],"consistent in":["your","your"],"consistent style":["across"],"consistent usage":["of"],"consistent, why":["not"],"consistent, you":["can"],"consistent. You":["could"],"consistent; PEP-8":["suggests"],"consisting of":["more"],"consists of":["properly","`if..else`","uppercase","more"],"consitently in":["a"],"const the":["strings"],"constant (then":["name"],"constant (well,":["almost"],"constant I":["would"],"constant and":["method"],"constant for":["that"],"constant in":["the"],"constant string":["each"],"constant strings":["?"],"constant that":["doesn't"],"constant to":["me."],"constant value":["is"],"constant value.":["Wouldn't"],"constant would":["be"],"constant, but":["not","that's"],"constant. Another":["update"],"constant. I":["don't"],"constant. That":["way,"],"constant. Would":["be"],"constantly learning,":["right?"],"constants (all":["caps)."],"constants -":["it"],"constants as":["class-level"],"constants for":["the","Bobs"],"constants here.":["As"],"constants in":["`UPPERCASE_WITH_UNDERSCORES`"],"constants inside":["the"],"constants instead":["of"],"constants like":["`THYMIDINE`","`THYMADINE"],"constants or":["even"],"constants spread":["across"],"constants straight":["off."],"constants that":["never","help"],"constants to":["clarify"],"constants with":["full"],"constants would":["probably","be"],"constants, I":["would"],"constants, and":["so"],"constants. Constructor":["won't"],"constants. Helper":["methods"],"constants. I":["assume"],"constants? In":["that"],"constrained to":["abuse"],"constraints this":["looks"],"construct that":["list"],"construct the":["whole"],"construct to":["determine"],"construct was":["clearer,"],"construct, I":["would"],"constructed by":["passing"],"constructed in":["place"],"constructed it":["appends"],"constructing a":["regex"],"constructing counter":["instance)."],"construction instead":["of"],"construction of":["the"],"construction, an":["\"alphagram\"."],"constructor -":["like"],"constructor and":["make","process/sanitize","simply","get"],"constructor can":["accept."],"constructor for":["this","free."],"constructor i":["would"],"constructor in":["`Bob`","the"],"constructor now":["is"],"constructor somehow":["I'd"],"constructor to":["accept"],"constructor unnecessary.":["Moving"],"constructor using":["private"],"constructor with":["`self._text"],"constructor would":["deal"],"constructor, I":["think"],"constructor, but":["I'm"],"constructor. Do":["you"],"constructor. Every":["time"],"constructor. Sublime's":["new"],"constructor? Either":["documenting"],"constructors -":["it"],"constructors but":["I've"],"constructors named":["after"],"consult Python":["Style"],"consult [PEP":["8"],"consult [The":["Hitchhiker’s"],"consume the":["`self`"],"contain a":["question","proper"],"contain could":["be"],"contain edge":["cases"],"contain the":["word"],"contain unicode":["characters."],"contained in":["the"],"container for":["methods"],"containing only":["whitespace"],"contains a":["question"],"contains characters":["which"],"contains main":["logic"],"contains numbers":["or"],"contains spaces":["after"],"contains two":["sentences,"],"contains_alphas =":["any(c.isalpha()"],"contend that":["in"],"content is":["`\"","against"],"contents of":["the","that"],"contest for":["the"],"context (if":["you"],"context (like":["an"],"context and":["apparently","abstraction"],"context but":["only"],"context here;":["it"],"context in":["which","which"],"context of":["another","dna/nucletode","building","problem.","`DNA.to_rna`","one","DNA.","class","a","a"],"context on":["how","how"],"context or":["something"],"context those":["are"],"context where":["a"],"context, and":["i"],"context, computation":["on"],"context, so":["`if","the"],"context. From":["Bob's"],"context. Testing":["against"],"context. That's":["why"],"context. The":["import"],"context; instead":["of"],"continue in":["line"],"continue statement":["in"],"continue to":["make","struggle"],"continue where":["mewmew"],"continue), but":["I'm"],"continue` in":["the"],"continued to":["disagree"],"contract than":["a"],"contracts aren't":["100%"],"contrary since":["all"],"contrast, to":["speed"],"contributors to":["comply."],"control flow":["easy","mechanisms.","way","is"],"control is":["for."],"control-flow to":["the"],"controlled by":["the"],"controller, and":["None"],"convenient `collections.Counter`":["library..."],"convenient and":["meaningful","```"],"convenient if":["the"],"convenient location":["to"],"convention (PEP08)":["is"],"convention (hint:":["CamelCase"],"convention (the":["Python"],"convention -":["the","see"],"convention 1:":["function"],"convention 2:":["avoid"],"convention and/or":["formatting."],"convention for":["default","\"private\"","\"private\"","most"],"convention in":["Python","python","Python"],"convention is":["to","to"],"convention rather":["than"],"convention would":["be"],"convention, \"private\".":["Two"],"convention, ```_extract_words()```":["instead"],"convention, but":["in"],"convention, the":["Python"],"convention. Double":["underscore"],"convention. However,":["I"],"convention. Leaving":["it"],"convention. Lowercase,":["underscore"],"convention. More":["on"],"convention. There":["should"],"convention: to":["mark"],"convention? Imho":["the"],"conventional method":["of"],"conventionally leading":["double"],"conventions -":["CamelCased","CamelCased"],"conventions all":["should"],"conventions and":["doesn't"],"conventions in":["Python","Python"],"conventions or":["optimizations"],"conventions please":["consult"],"conventions! Thanks":["for"],"conventions): variable":["names"],"conventions, \"we're":["all"],"conventions, even":["for"],"conventions, with":["one"],"conventions. PEP-8":["is"],"conversation about":["my"],"conversation at":["this"],"conversation module":["didn't"],"conversation with":["someone."],"conversation you":["aren't"],"conversation's type":["tests,"],"conversation, Bob's":["responses"],"conversation? Conversation":["kind"],"converse because":["*statement*"],"converse is":["None","''"],"converse was":["None,"],"converse.isspace()` and":["it"],"conversion are":["necessary,"],"conversion having":["the"],"conversion issue,":["I"],"conversion it's":["name"],"conversion of":["booleans"],"conversion to":["`str`","`dict`"],"conversion, but":["it"],"conversion. So":["the"],"convert `a":["!="],"convert back":["to"],"convert it":["to"],"convert only":["when"],"convert the":["set","string","phrase"],"convert to":["a","lower"],"convert. Why":["list"],"converted `collections.Counter`":["to"],"converted it":["to"],"converted the":["anagram"],"converted to":["int,"],"converting `Counter`":["to"],"converting `collections.Counter`":["to"],"converting `self.number`":["to"],"converting all":["the"],"converting nucleotides":["from"],"converting the":["lower-cased","Counter","sequence"],"converting this":["representation"],"converting to":["a"],"converts the":["representation"],"convey that":["we're"],"convey the":["meaning","names","components"],"convey well":["context"],"conveying the":["meaning"],"conveys the":["intent","meaning"],"convinced I":["achieved"],"convinced about":["returning"],"convinced me":["on"],"convinced that":["these","using","there"],"convoluted code,":["while"],"cool Python":["method"],"cool and":["is"],"cool approach,":["and"],"cool because":["you"],"cool name":["for"],"cool thing":["that"],"cool things":["too."],"cool to":["have"],"cool too":[":)"],"cool! Thumbs":["up"],"cool, I":["didn't"],"cool, and":["so"],"cool, but":["`self.normalized`"],"cool, idiomatic":["looping)"],"cool. I'm":["in"],"cool. Ruby":["doesn't"],"cool. `.isupper()`":["is"],"cope very":["well"],"cope with":["really","really"],"copy of":["DNA","`self._wordcount`"],"copy operation,":["A-&gt;A,"],"copy the":["DNA,","string"],"copy, leaving":["the"],"copy, not":["a"],"copy-paste of":["the","the"],"copy. I":["dislike"],"copying dna":["to"],"copying is":["needed."],"copying operation":["to"],"copying operation,":["I'd"],"copying process":["that"],"correct a":["function"],"correct answer,":["but"],"correct implementations":["of"],"correct order":["of"],"correct order.":["A"],"correct result.":["But"],"correct statement":["if"],"correct translation":["is"],"correct way":["to"],"correct, but":["the"],"correct, it":["should"],"correct. Any":["tips"],"correct; `self`":["is"],"correctly =)":["I"],"correctly by":["the"],"correctly identifying":["capsed"],"correctly if":["you"],"correctly interpreted":["by"],"correctly put":["into"],"correctly spotting":["that"],"correctly understood":["the"],"correctly when":["you","`i"],"correctly. check":["examples"],"correlates for":["sets"],"correspond to":["a"],"cost by":["drilling"],"cost of":["the","the","de-referencing","higher"],"cost to":["using"],"cost would":["become"],"costly from":["a"],"could I":["get"],"could `str.replace`":["to"],"could actually":["do"],"could add":["an","documentation","documentation"],"could also":["use","be","be","check","call","take","be","use","use","move","could","replace","use","use","look","be","use","consider"],"could apply":["[Single"],"could argue":["that"],"could as":["well","well","well"],"could avoid":["testing","hard-coding"],"could be":["`return","symptoms","simplified","a","much","as","use","its","multiple","more","refactored","declared","more","outside","handy.","still","improved","improved","a","tested.","too","put","a","improved:","self-explanatory","None.","renamed","factored","improved","more","substituted","better.","moved","left","to","replaced","more","a","done","replaced","shortened","greatly","dealt","just","wrapped","attached","subclasses","useful","prefixed","placed","more","shortened","combined","a","named","prefixed","put","combined","extracted","fine,","easily","named","named","'silence`.","called","renamed","improved","implicit","made","placed","shown","improved","as","more","set","clearer","implemented","written","clearer.","considered","considered","elif","elif"],"could be)":["reusable,"],"could be.":["I'm"],"could become":["more"],"could belong":["to"],"could cause":["exception."],"could change":["the","over","the","your"],"could check":["for","`not","only"],"could checkout":["Ned"],"could choose":["to"],"could clarify":["-","why"],"could clean":["up"],"could come":["with","up"],"could consider":["if","making","other","other","using","removing","is","extracting"],"could const":["the"],"could consult":["[The"],"could couple":["that"],"could craft":["a"],"could create":["it","alphagram"],"could defend":["your"],"could define":["`DNA.nucleotides`"],"could definitely":["implement"],"could determine":["if"],"could do":["something","the","simple","generic","it","`return"],"could do,":["but"],"could duplicate":["that"],"could easily":["get","cache","avoid","forget","miss"],"could either":["clarify"],"could end":["up","the"],"could even":["do","more"],"could explain":["on","this"],"could express":["you"],"could extract":["them","`responses`","alphagram","the"],"could factor":["out"],"could filter":["the"],"could find":["where"],"could get":["expensive.","rid","rid","rid","rid","it."],"could give":["the"],"could go":["with","a"],"could guard":["the"],"could have":["them","used","been","been","use","avoid","used","been","used","used","[inherited","added","added","a","used","omitted","used","converted","used","used","used","one","lived","made","abstracted","gotten"],"could have,":["it's"],"could he?)":["and"],"could help":["with","you","clarify","you","readability.","but","here)."],"could imagine":["naming"],"could improve":["it"],"could incidentally":["override"],"could inline":["`Word.normalize`"],"could instead":["write"],"could introduce":["a"],"could invoke":["`lower`"],"could iterate":["over"],"could just":["keep","clone","hold","use","as","extract","be","replace","use","as","make"],"could keep":["it","it"],"could know":["about"],"could leave":["it"],"could let":["it"],"could live":["as"],"could look":["cleaner"],"could lowercase":["the"],"could make":["this","the","message","`same_chars`","it","the","the","use","clean","this"],"could mark":["helper","all","`Anagram.word`"],"could maybe":["make"],"could mean":["instance"],"could migrate":["to"],"could move":["the","processing","on","`trans_table`","non-public","the"],"could name":["it","`Bob.hey`","it","it"],"could nest":["the"],"could normalize":["the"],"could not":["be","use"],"could occur!":["Nice"],"could of":["course","course"],"could only":["have"],"could override":["it,"],"could pass":["the"],"could pick":["better"],"could possibly":["move","work\""],"could preserve":["both"],"could prevent":["bugs"],"could probably":["make","sort","save","be","be","be"],"could publish":["the"],"could read":["better"],"could rearrange":["your"],"could reduce":["the","`if`"],"could refactor":["out.","it"],"could remove":["one","your","the"],"could represent":["a"],"could return":["straight"],"could reuse":["the"],"could rewrite":["this"],"could sanitize":["`text`"],"could see":["them","a"],"could set":["`THYMIDINE"],"could short":["circuit"],"could shorten":["line"],"could significantly":["simplify"],"could simplify":["this","this"],"could simply":["leave","add","use","be"],"could skip":["the"],"could solve":["this"],"could spread":["the"],"could still":["submit","make","use","defer"],"could take":["a"],"could tell":["`re`","better"],"could that":["be","be"],"could the":["construction"],"could think":["of"],"could try":["to","to","to"],"could use":["http://docs.python.org/2/library/stdtypes.html#str.endswith","http://docs.python.org/2/library/stdtypes.html#str.isupper","a","`isalnum`","findall","__dict__","new","`isupper`","a","a","`msg.isspace()`","sorted()","functions","plain","a","this","instead","'Bob'","the","`return","explicit","`self.__class__.thymidine`","module","the","a","`self.phrase","`return","some","new-style","Pythons","docstrings","`re.findall`","something","`str.isupper`","argument","a","str.replace(string,","list","`from","that.","a","a"],"could used":["[str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper).","[str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper)."],"could utilize":["`Counter`","the"],"could very":["well"],"could went":["with"],"could work":["I"],"could wrap":["input"],"could write":["a","a","one"],"could you":["resubmit","think","rewrite","handle","abstract","abstract","do","decouple","extract","extract","find","make","solve"],"could, I":["would"],"could, I'm":["sure"],"couldn't decide":["between"],"couldn't ever":["bring"],"couldn't figure":["a","it","out","out"],"couldn't get":["rid"],"couldn't quite":["articulate"],"couldn't these":["be"],"couldn't think":["of","of","of"],"count 4":["times"],"count and":["was","just"],"count char":["occurrence"],"count could":["be"],"count data":["might"],"count doing":["counts"],"count function":["from"],"count in":["it's"],"count indicies":["and"],"count it":["if"],"count method":["and"],"count not":["present"],"count occurrences":["-"],"count of":["characters,"],"count process,":["but"],"count the":["number"],"count_words() a":["method"],"count` more":["readable"],"counted in":["one"],"counter as":["an"],"counter for":["the"],"counter in":["collections"],"counter instance":["could"],"counter instance).":["`match`"],"counter once":["--"],"counter to":["be"],"counter.Counter(self._words()) ```":["is"],"counting ''":["as"],"counting *all*":["in"],"counting bit?":["Can"],"counting dictionary":["you"],"counting is":["simple"],"counting logic,":["without"],"counting nucleotides":["in"],"counting of":["words"],"counting stuff":["into"],"counting stuff\"":["in"],"counting up":["or","front"],"counting words.":["So"],"counting) and":["compare"],"counting. Have":["a"],"counts (initialized":["at"],"counts =":["{}"],"counts and":["consistent"],"counts as":["valid"],"counts for":["whitespace"],"counts of":["each"],"counts\". `input`":["is"],"counts.get(word, 0)":["+"],"counts[word] =":["counts.get(word,"],"couple FP-inspired":["idioms)"],"couple code":["bases."],"couple hints":["to"],"couple methods":["on","in"],"couple of":["keystrokes","other","small","nitpicks:","options","days","the","assignments!","questions:","classes"],"couple other":["hints:","ways"],"couple small":["things:"],"couple that":["with"],"couple things":["to"],"couple useless":["lines,"],"coupled and":["difficult"],"coupled, more":["testable"],"coupling, I":["make"],"coupling, precedence":["rules"],"course ?":["Hint:"],"course also":["thank"],"course be":["as"],"course but":["well,"],"course do":["it"],"course doesn't":["change"],"course for":["the"],"course if":["anyone"],"course in":["useful","that"],"course it":["could"],"course making":["use"],"course probably":["want"],"course test":["whether"],"course that's":["nothing"],"course the":["best","docstring"],"course use":["something"],"course valid":["too."],"course we":["can"],"course, the":["other"],"course, you":["could"],"course. But":["generally"],"cover `True`":["as"],"cover `message":["=="],"cover all":["the"],"cover functionality":["in"],"cover that":["use"],"cover what":["you"],"coverage and":["as"],"coverage on":["the"],"coverage wouldn't":["be"],"covered by":["`return"],"coworkers who":["are"],"crack at":["making"],"craft a":["similar"],"crash course":["in"],"crazy and":["decided"],"crazy, but":["works."],"create a":["more","series","helper","new","new","separate","meaningful","new","generator","DNA-sequence","new","validation","new"],"create alphagram":["for"],"create an":["instance","extra","abstraction","RNA","old","\"anagram"],"create another":["`RNA`"],"create bob.py":["but"],"create constants":["like"],"create instance":["of"],"create it":["as","only"],"create namespace":["for"],"create new":["objects","DNA","```self.phrase```."],"create one":["single"],"create the":["very","very","dictionary.","alphagram","required"],"create two":["lists,"],"create verbose":["indices"],"created a":["private","dictionary","null","default"],"created an":["alphagram"],"created and":["only"],"created but":["only"],"created by":["your"],"created classes":["myself"],"created each":["time,"],"created every":["time"],"created helper":["methods."],"created the":["NucleotideString"],"created this":["as"],"created, be":["done"],"created, it's":["a"],"created? If":["you"],"createroboname() to":["reset()?"],"creates a":["`Counter`","256"],"creates only":["a"],"creating 8":["methods"],"creating a":["new","more","new","correct","separate","new","generator","new","new","list"],"creating addidtional":["class,"],"creating an":["instance."],"creating classes":["for"],"creating smaller":["methods"],"creating the":["translation","RNA","methods","alphagram"],"creating with":["`_word_to_sorted_list`:"],"creation happens":["before"],"creation may":["not"],"creation of":["the","an"],"creation starts":["to"],"creative solution,":["but"],"critical in":["such"],"criticize here,":["really"],"crying to":["be"],"cryptic (like":["magic"],"cryptic to":["me"],"crystal-clear. I":["feel"],"cues you":["forget"],"culture and":["a","philosophy,"],"curios there":["is"],"curiosity, does":["it"],"curious about":["this","what","the"],"curious to":["see"],"current \"complexity\"":["is"],"current (and":["possibly"],"current `Bob`":["instance"],"current capabilities":["it's"],"current context":["of"],"current form":["it","it's"],"current implementation":["does"],"current implementation,":["you'd"],"current instance":["nor"],"current instance.":["Do","What"],"current knowledge":["level."],"current set":["of"],"current solution":["but","is"],"current structure":["but"],"current test":["case"],"current value":["of"],"currently all":["helper"],"currently calling":["methods"],"currently don't":["use"],"currently have":["details"],"currently only":["have"],"currently used":["is"],"currently you":["don't","don't","always"],"custom configurations":["or"],"custom descriptors,":["which"],"cut down":["a"],"cut off":["much"],"cycle and":["you"],"cycle can":["be"],"cyclomatic complexity.":["And"],"cyphers and":["stuff)."],"d =":["defaultdict(int)","defaultdict(int)","defaultdict(int)"],"d) \"It":["is"],"d` check":["and"],"dabble in":["python."],"daily Python":["programming."],"dangerous and":["poor"],"data abstraction":["than"],"data and":["it's","the"],"data at":["the"],"data attribute":["static"],"data attributes":["with"],"data encoded":["as?\""],"data in":["this","the","the","one"],"data is":["stored"],"data might":["be"],"data of":["`Beer`"],"data so":["I"],"data structure":["in","that","(hint:","than","around."],"data structures":["better."],"data structures.\"":["—Alan","(generally"],"data type.":["I"],"data types.":["In"],"data, and":["I","the"],"data, it":["carries"],"data, so":["they"],"data-driven rather":["than"],"data. In":["that"],"data. You":["could"],"database in":["a"],"database may":["seem"],"database, which":["is"],"datastructures are":["prevalent."],"datatype `counter`,":["which"],"dated example":["but"],"day job":["for"],"day of":["coding"],"days ago.":["Any"],"days, and":["many"],"days, which":["makes"],"de-referencing a":["method"],"dead code.":["That's"],"dead simple":["bot","one-liners"],"deal to":["jvns"],"deal with":["that).","punctuation,","multiple","the","striping","internal","an","a","formatting","`None`","few","`None`","the","the","inputs","those","invalid"],"deal, but":["it's","if"],"dealing with":["the","multibyte","```","non-letters."],"dealing with.":["It"],"deals with":["`None`","strings","them."],"dealt with":["then."],"debatable statement.":["The"],"debatable, but":["if"],"debate where":["to"],"debug, but":["yes"],"debugger) but":["s"],"deceived by":["the"],"decide between":["4"],"decide if":["this"],"decide to":["make","refactor"],"decide which":["boolean","one","version"],"decided I":["wanted"],"decided change":["the"],"decided it":["was","was"],"decided that":["the","each","the"],"decided to":["add","have","with","write","lose","just","rename","look","take","go","go","change","make"],"decides what":["is"],"deciding about":["the"],"deciding what":["the","was"],"deciding whether":["to"],"decision about":["how"],"decision but":["I"],"decision logic,":["so"],"decision making":["could"],"decision to":["have"],"decision which":["way"],"decision: Assuming":["that"],"declaration and":["one"],"declaration for":["nuceotides,"],"declaration is":["excessive."],"declaration of":["`chain`"],"declaration. I":["know"],"declarations (like":["`text"],"declarative \"rule-based\"":["way"],"declarative (and":["more"],"declarative way":["using"],"declarative, decoupled":["and"],"declarative, decoupled,":["scalable,"],"declare at":["the"],"declare hey":["as"],"declare static":["methods,"],"declare the":["magic"],"declared in":["constructor"],"declared non-public":["(by"],"declared on":["top"],"declares a":["class"],"declaring `__all__`.":["Other"],"declaring result":["twice"],"declaring these":["private,"],"decode on":["it."],"decoding, white-space":["and"],"decomposition as":["insane"],"decomposition into":["classes"],"decorate this":["function,"],"decorated function":["and"],"decorated function.":["A"],"decorator (the":["`cache_result`"],"decorator -":["somewhat","```"],"decorator called":["```"],"decorator's implementation":["is"],"decorator). Doing":["`NothingSpecial.handle(str)`"],"decorator, but":["in"],"decorator, or":["later"],"decorator, since":["it's"],"decorators so":["I"],"decorators versus":["having"],"decorators, but":["don't"],"decorators, the":["use"],"decorators; moves":["the"],"decouple input":["sanitization"],"decouple phrase":["identification"],"decouple the":["bot's","domain"],"decoupled and":["cohesive","interchangeable.","testable"],"decoupled the":["general"],"decoupled) dispatch":["mechanism"],"decoupled, scalable,":["lazy"],"decoupling predicates":["from"],"decoupling the":["`responses`"],"decrease in":["readability."],"decyphering the":["code"],"dedicated class":["for"],"dedicated functions":["enhance"],"dedicating a":["distinct"],"deduct that":["your"],"deep -":["`Bob.hey()`"],"deep into":["nil"],"def __init__(self):pass?":["If"],"def __init__(self,":["msg):","msg):","phrase):","predicate,","actions,","value=None):"],"def __is_empty(self,":["message):"],"def _isNothing(self,":["msg):","msg):","msg):"],"def _isQuestion(self,":["msg):"],"def _isYell(self,":["msg):"],"def _is_statement(self,":["stimulus):"],"def checkend":["(string)","(string)"],"def hey(self,":["message):","comment):","heard):","heard):","msg):","message):","input):","statement):","msg):","msg):","message):","message):","message):","msg):"],"def is_empty(self,":["message):"],"def normalize(self,":["message):"],"def statement":["instead"],"def wrapper(*args,":["**kwds):"],"def wrapper(self,":["*args,"],"def yelling(s,":["what):"],"default ('ascii')":["is"],"default action":["on"],"default and":["then","require"],"default answer":["is","if","hardwired"],"default answerd":["hardcoded"],"default argument":["when","syntax","values."],"default arguments":["is"],"default ascii":["encoding"],"default case":["?","(with"],"default dicts.":["just"],"default encoding":["is"],"default for":["`end_verse`","an"],"default function":["parameters"],"default if":["the"],"default parameter":["for"],"default to":["a","non-public"],"default value":["for","for","in","anyway","of","of","for","of","of","of"],"default values":["for"],"default, but":["they're","perhaps"],"default, hence":["you"],"default. I":["didn't"],"default. Instead":["of"],"default. Probably":["not"],"default: the":["default"],"defaultdict but":["I"],"defaultdict collection":["and"],"defaultdict for":["sanity."],"defaulted to":["2"],"defaults from":["a"],"defaults to":["`return`","`return`","`return`","`return`","`return`"],"defence, pep8":["(the"],"defend your":["choice"],"defensive approach":["at"],"defensive coding":["in"],"defensive programming":["in"],"defer the":["computation"],"deff interesting,":["I'll"],"define \"_is_statement\",":["but"],"define `DNA.nucleotides`":["as"],"define `_sequence`":["*only*"],"define a":["clear","list","`dict`","function"],"define as":["a","a","a"],"define classes":["with"],"define different":["response"],"define it":["outside"],"define msg":["or"],"define normalize":["outside"],"define one":["of"],"define only":["`Bob.hey`"],"define shouting":["by"],"define the":["business","business"],"define what":["hey()"],"define words":["getter?"],"defined `get_words`":["by"],"defined after":["`if`"],"defined based":["on"],"defined constants":["for"],"defined in":["the","the","the","the","the"],"defined internal":["frameworks!"],"defined it":["(and"],"defined methods":["`isEmpty`"],"defined on":["the","the"],"defined once":["and"],"defined response,":["and"],"defined some":["variables"],"defined what":["you"],"definetely go":["off"],"defining Bob's":["responses"],"defining `_sequence`":["outside"],"defining at":["the"],"defining constants":["that"],"defining default":["function"],"definite readability":["cost"],"definitely a":["valid","valid","good","cleaner"],"definitely accomplish":["the"],"definitely agree":["that"],"definitely applies":["here."],"definitely arguments":["for/against"],"definitely cleans":["that"],"definitely depends":["on"],"definitely disagree":["with"],"definitely do":["that"],"definitely implement":["the"],"definitely it":["a"],"definitely made":["the"],"definitely more":["pythonic,","concise,","readable"],"definitely non-standard":["so"],"definitely not":["a"],"definitely pick":["this"],"definitely prefer":["using"],"definitely see":["how","you"],"definitely should":["include"],"definitely simpler":["and"],"definitely the":["simplest"],"definitely useful":["pointers."],"definition according":["to"],"definition and":["first"],"definition for":["readability?"],"definition it":["will","said"],"definition look":["symmetrical,"],"definition needs":["2"],"definition of":["an"],"definition would":["be"],"definition, and":["specially"],"definition, see":["[PEP"],"definition, which":["is"],"definition, would":["that"],"definition. Have":["a"],"definition. I'm":["not"],"definition. More":["on"],"definition. See":["[PEP"],"definition. With":["names"],"definition. i.e.":["why"],"definitions and":["double"],"definitions as":["well."],"definitions become":["large."],"definitions on":["one"],"definitions would":["help"],"definitions. *":["facepalm"],"definitions. Blank":["line"],"definitions. Otherwise,":["it"],"definitions. `elif`s":["are"],"definitive `else`":["for"],"definitive answer":["(or"],"definitly _DONT_":["need"],"definitly not":["\"Python's"],"definitly read":["the"],"defs, you":["know"],"degenerate regex)":["in"],"delegation going":["on"],"delete `is_only_numbers`":["thanks"],"delete it":["because"],"delete the":["extraneous","associated"],"deletes chars,":["thats"],"delicate topic,":["and"],"delimited names":["are"],"delimited with":["a"],"delimited. More":["about"],"demand in":["word_count"],"demanded a":["DNA"],"demonstrates what":["that"],"demonstrations use":["of"],"denote that":["it","it's"],"denoting the":["character"],"dense and":["not","easy"],"departure from":["standards"],"depend on":["Bob's","it's"],"dependency of":["the"],"dependency on":["regex"],"dependency when":["you"],"dependent on":["libraries","the"],"dependent. It":["will"],"dependent. Thanks":["for"],"depending on":["how","`LOCALE`","if","the","the","its"],"depends actually.":["I"],"depends on":["the","the","the","the"],"deployed robots":["nears"],"deprecated in":["Python,"],"deprecated. It's":["better"],"depth of":["Python"],"derived noun":["property"],"describe into":["a"],"describe that.":["The"],"describe the":["meaning,","cases."],"described in":["introduction","[PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations)."],"describer for":["that"],"describes context":["in"],"describes the":["to_rna"],"describes well":["what"],"describes what":["better"],"describes what's":["going"],"describing the":["problem"],"describing things":["in"],"describing what":["an","it"],"description ,":["for"],"description from":["README."],"description of":["the","the","the","your"],"description. So":["with"],"description; e.g.":["don't"],"descriptions of":["what"],"descriptive and":["specific"],"descriptive for":["the"],"descriptive keyword,":["just"],"descriptive like":["`strand`"],"descriptive method":["names,"],"descriptive name":["that","in","for","instead?"],"descriptive name,":["but"],"descriptive names":["would","-","(where"],"descriptive names.":["Do","Well"],"descriptive than":["striping"],"descriptive variable":["names"],"descriptive, it's":["better"],"descriptive. I":["like"],"descriptive. The":["```"],"descriptors, which":["will"],"design (minus":["the"],"design as":["written"],"design choice":["IMHO),","to","IMHO"],"design of":["the","Python"],"design owes":["a"],"design that":["has"],"design to":["decouple"],"design, but":["the"],"design, the":["explicit"],"design: The":["order"],"design: now":["could"],"design: the":["expressions"],"design: this":["looks"],"designed for":["the"],"designed to":["be"],"desired. k-thx-bai":[":)"],"desires for":["Pythonic"],"despite its":["ugliness"],"detail /":["optimisation"],"detail and":["`Bob.hey`"],"detail as":["it"],"detail but":["an"],"detail could":["be"],"detail of":["using"],"detail that":["can","is"],"detail\") attribute":["is"],"detail, and":["unless"],"detail, but":["part"],"detail, not":["part","a"],"detail, where":["calling"],"detail. Note":["that"],"detail. We":["certainly"],"detailed, insightful,":["invaluable"],"details \"private\"":["AND"],"details (rules":["implementation"],"details ?":["If"],"details and":["were"],"details are":["implemented.","more"],"details at":["different"],"details don't":["matter."],"details in":["code","comments","the"],"details of":["how","the","what","what","decoding,"],"details than":["simple"],"details, he":["will"],"details, such":["as"],"detect assignements":["to"],"detection in":["it's"],"determine if":["the","the","it"],"determine silence,":["and"],"determine what":["actually"],"determine whether":["or"],"determines the":["message"],"determining a":["question"],"determining his":["responses"],"determining that":["empty"],"determining the":["type"],"determining whether":["the"],"dev having":["to"],"developer looked":["at"],"developer should":["have"],"developer who":["might"],"developers would":["like"],"device instead":["of"],"devil is":["in"],"devised in":["Ruby."],"devs hating":["me!","you"],"devs know":["it's"],"dialog like":["\"is"],"dict (I":["think"],"dict ?":["You"],"dict as":["a"],"dict at":["the"],"dict comprehension":["to","could","in"],"dict comprehension,":["with"],"dict etc":["without"],"dict for":["translation","the"],"dict i":["the"],"dict if":["you","it"],"dict in":["`word_count()`,"],"dict is":["sorted"],"dict itself":["but"],"dict of":["counts"],"dict or":["list"],"dict should":["make"],"dict with":["integers","default","default","default"],"dict(bar=2)` and":["`\"foo\""],"dict(bar=2)` in":["your"],"dict, forgetting":["that"],"dict, list)":["under"],"dict, since":["I"],"dict, so":["you"],"dict, then":["didn't"],"dict.get ```":["is"],"dict? Then":["you"],"dict` is":["more"],"dict` per":["`dict.get(key,"],"dictated by":["specification"],"dictionaries) are":["maybe"],"dictionary (i.e.":["`{}`)."],"dictionary and":["returning","**interesting","override","I"],"dictionary approach":["actually"],"dictionary approach,":["you"],"dictionary as":["opposed"],"dictionary for":["storing","counting."],"dictionary gain":["you"],"dictionary instead":["of","of"],"dictionary of":["translations,","translations.","responses,"],"dictionary somehow":["makes"],"dictionary that":["got","got","got"],"dictionary to":["be"],"dictionary variable,":["thought"],"dictionary with":["a","0's","a","the"],"dictionary would":["contain"],"dictionary you":["might"],"dictionary, `key":["in"],"dictionary, but":["get"],"dictionary, iterating":["over"],"dictionary. A":["first"],"dictionary. I":["don't"],"dictionary. So,":["the"],"dictionary. Then":["`Carl`"],"dictionary. What":["it"],"dictionary/for loop":["combo"],"dictionary? Are":["you"],"dictionary? Or":["that"],"dicts and":["numeric"],"dicts are":["unordered."],"dicts. just":["a"],"dicussion on":["iteration"],"did Bob":["in"],"did I":["miss"],"did and":["what"],"did at":["my"],"did consider":["that,"],"did differently":["is"],"did do":["a"],"did have":["the","it","to"],"did in":["`bottle_count`","your"],"did it":["as"],"did it,":["leave"],"did it.":["i've"],"did mine":["when"],"did my":["inline"],"did not":["exist","point","use","when","used","used","realize","specify","understand"],"did only":["oen"],"did see":["someone"],"did so,":["is"],"did some":["refactoring","tests"],"did something":["very"],"did striping":["of"],"did that":["in","on"],"did the":["same","same."],"did there,":["with"],"did think":["made"],"did this,":["I"],"did use":["Python"],"did want":["to"],"did with":["the"],"did wrong":["here,"],"did you":["put","create","factor","add","choose","choose","use?","choose","mean"],"did, I'd":["move"],"did. No":["quite"],"didn't I":["would"],"didn't abstract":["away"],"didn't check":["it"],"didn't cope":["very"],"didn't dig":["this"],"didn't even":["knew","bother","consider","look"],"didn't follow":["the"],"didn't found":["a"],"didn't get":["things","that","re-inlined"],"didn't give":["a"],"didn't go":["in"],"didn't handle":["this"],"didn't hurt":["readability."],"didn't in":["my"],"didn't include":["commenting"],"didn't intend":["it"],"didn't just":["use"],"didn't knew":["`string.translate`"],"didn't know":["if","about","about","about","that.","about","about","about","it","about","this","about","that","about","there","about"],"didn't like":["having","the"],"didn't match":["that"],"didn't miss":["anything."],"didn't need":["to","the","them"],"didn't normalize":["Phrase.phrase"],"didn't occur":["to"],"didn't realize":["isupper()","Counter","that","that","`isupper()`"],"didn't really":["try","think"],"didn't required":["one"],"didn't scroll,":["in"],"didn't see":["your"],"didn't seem":["to"],"didn't tested":["that"],"didn't think":["it","of","hard","it","about","of","of"],"didn't trim":["in"],"didn't understand":["the","the"],"didn't upload.":["I"],"didn't use":["a"],"didn't wait":["for"],"didn't want":["to.","to","to","my"],"didn't we":["?"],"didn't work,":["and"],"didn't work.":["This,"],"didn't wrap":["`if`","each"],"didn't you":["normalize","use","consider"],"didn't, then":["kept"],"die on":["empty"],"difference and":["won't"],"difference between":["the","theory","initialization","a"],"difference but":["it"],"difference for":["words."],"difference is":["the","old","how"],"difference is,":["but"],"difference operation":["to"],"difference since":["`is_valid`"],"difference to":["the"],"difference with":["yours"],"differences between":["`@garry`"],"differences\" sounds":["fine"],"differences\". Although":["\"sum"],"different Just":["FYI"],"different `self`":["for"],"different amounts":["of"],"different and":["more"],"different approach,":["but"],"different approach.":["I"],"different approaches":["and","for"],"different approaches;":["the"],"different behavior":["depending"],"different cases":["are","and"],"different cases,":["but"],"different cases.":["(eg:"],"different class":["than"],"different conditions":["on"],"different contract":["than"],"different cues":["you"],"different data":["types."],"different default":["value"],"different from":["this:","mine,","`str`"],"different functions,":["which,"],"different instances":["of"],"different languages":["on"],"different languages,":["and"],"different level":["of"],"different levels.":["With"],"different message":["types"],"different methods":["for"],"different methods,":["I"],"different name":["than","for"],"different name,":["you'd"],"different order":["the"],"different path":["setting"],"different people":["use"],"different programming":["paradigms."],"different response":["to","than"],"different sections":["might"],"different statement":["types."],"different test":["suite"],"different tests?":["This"],"different than":["standardized"],"different thing:":["Did"],"different versions,":["but"],"different views":["on"],"different way":["of"],"different way).":["I"],"different way,":["it"],"different ways":["Bob","--"],"different ways.":["I'm"],"different! I":["entangled"],"differentiate `len(newnumber)":["=="],"differentiator is":["this"],"differently -":["looks"],"differently is":["that"],"differently still,":["in"],"differently than":["classes"],"differently to":["shouted"],"differently, depending":["on"],"differently. I":["probably"],"difficult part":["of"],"difficult to":["read","extend.","add","read,","follow","compare","explain.","debug,"],"difficult, but":["try"],"difficult. I":["tried"],"difficulties decyphering":["the"],"dig this":["deep"],"digits are":["the"],"digits before.":["Perhaps"],"digits, it":["wasn't"],"ding me":["on"],"direct assignment":["to"],"direct copy-paste":["of"],"direct operation.":["Where"],"direct string":["position"],"direct way":["to"],"direction since":["I"],"direction, but":["then"],"directional, so":["if"],"directly as":["an"],"directly impact":["the"],"directly in":["the","`Message.__init__`","the","`hey`?"],"directly into":["the"],"directly mutate":["school.db\")."],"directly on":["the"],"directly return":["the"],"directly reuse":["the"],"directly to":["a","`collections.Count`"],"directly, preventing":["later"],"directly. Also,":["that"],"directly. I'll":["rewrite"],"directly? Seems":["like"],"disagree for":["a"],"disagree from":["the"],"disagree on":["this"],"disagree or":["don't"],"disagree with":["your","the","\"almost","the","@rhett","you.","you","you","you","the","your","@quinton."],"disagree. I":["believe","think"],"discarding it.":["I"],"disclosure -":["I"],"discouraged in":["Python"],"discouraged of":["this"],"discouraged. Consider":["building"],"discovered by":["nitpicking"],"discovered isupper":["(thanks"],"discovery at":["this"],"discrete set":["of"],"discrete types":["of"],"discretion --":["if"],"discuss and":["try"],"discuss the":["objective"],"discussed using":["`translate`"],"discussion and":["pointers."],"discussion are":["the"],"discussion is":["more"],"discussion list":["about"],"discussion with":["other"],"discussion. DNA":["is"],"disguise intent.":["No"],"dislike Python.":["Method"],"dislike that":["projection"],"dislike the":["\"magic","explicit","reliance"],"dislike them,":["especially"],"dispatch -":["might"],"dispatch /":["control"],"dispatch ```":["is"],"dispatch correct":["answer,"],"dispatch does":["the"],"dispatch mechanism":["that","you"],"dispatch mechanism,":["but"],"dispatch style":["with"],"dispatch table.":["I"],"dispatch to":["separate"],"dispatch, but":["you"],"dispatch, even":["if","if"],"dispatcher as":["a"],"dispatcher deals":["with"],"dispatching to":["another"],"dispatching would":["make"],"disregard if":["you"],"distinct `Word`":["class"],"distinct from":["`word_count`"],"distinct function":["doing"],"distinct places":["and"],"distinct representation":["to"],"distinct steps":["when"],"distinction is":["based"],"distinction or":["a"],"distracted by":["the"],"disturbing as":["the"],"divide work":["into"],"divided here":["because"],"divided the":["code"],"divisor otherwise":["I"],"dna =":["DNA('ACGTGGTCTTAA')"],"dna mapping":["dictionary,"],"dna to":["rna","rna:","rna","rna","its"],"dna too,":["I"],"dna with":["rna"],"dna) for":["dna,"],"dna, rna":["in"],"dna.py\" is":["still"],"dna/nucletode related":["code"],"dna[0] =":["'C'"],"dna_strand contains":["characters"],"dna` and":["then"],"dna``). In":["that"],"dna``). On":["the"],"do -":["so","it","you","what's"],"do Haskellic,":["and"],"do I":["prevent","check","make"],"do Ruby":["in"],"do Ruby,":["so"],"do `.join(s":["for"],"do `[...":["range(start,"],"do ```if":["not"],"do `d[word]":["+="],"do `if":["not"],"do `join()`":["to"],"do `message":["is"],"do `return":["Bob.answers['question']`"],"do `str.capitalize()`.":["Having"],"do a":["bit","better","bunch","test","sequential","lot","lot","split"],"do about":["this?","it..."],"do after":["reading"],"do agree":["with","with","that"],"do all":["the"],"do anything":["to","and","in","there)","there","when"],"do appreciate":["the"],"do away":["with"],"do blockquotes":["here?"],"do both":["the"],"do call":["me","me"],"do consider":["adding"],"do everything":["in"],"do generic":["memoization"],"do have":["functions","a","attributes","a"],"do here":["is"],"do if":["Bob"],"do in":["that","the","fact","eg."],"do is":["to"],"do it":["at","the","than","by","is","this","was","to","in","as","in","without","without","unless","in","as"],"do it,":["and","because"],"do it.":["This","Instead,","Is"],"do just":["t."],"do keep":["them"],"do know":["a","if"],"do like":["to","python's","the"],"do more":["powerful","than","than"],"do much":["defensive"],"do multiple":["`return`"],"do my":["comparisons"],"do not":["have","need","need","know.","ask","add","need","check"],"do now)":["is"],"do one":["of:"],"do prefer":["`#replace`"],"do pretty":["much"],"do quite":["the"],"do require":["a"],"do sanitization,":["wouldn't"],"do see":["what"],"do simple":["`word.split()`"],"do so":["?","in","you","I"],"do so.":["But"],"do some":["refactoring.","housecleaning"],"do something":["like","similar","like:","like","better.","like"],"do that":["instead.","a","check","gimmick.","if","would","yet!","efficiently",":)"],"do that!":["There"],"do that.":["Care","Neither:"],"do the":["equivalent.","job","`is_yell`","exercises","\"caching\"","mapping","other","specs.","same","conversion","\"Make","work","substitution.","same"],"do they":["work?","represent?"],"do things":["without","the"],"do think":["Python","it","there's"],"do this":["in","even","type","sort","kind","would","off","wherever","using","without","with","before."],"do this.":["Why?"],"do to":["avoid"],"do too":["much."],"do try":["to"],"do was":["to"],"do we":["do"],"do well":["understand"],"do with":["edge","unknown","that.","unknown","the","it?"],"do within":["the"],"do without":["importing","some"],"do without,":["could"],"do write":["a"],"do you":["need","think","feel","think","think","think","think","think","mean","think","think?","store","feel","mean","think","think","mean","think?","need","like","have","really","think","think","think","really","use","think?","have?","?","have","need","think","think?","mean","mean","use","think","explicitly","use","make","think","think","instantiate","want","use","use","use","define","need","need","care"],"do), not":["sure"],"do, and":["@agustina)"],"do, but":["this"],"do, so":["I"],"do, which":["is"],"do. I":["must"],"do. In":["retrospect"],"do. Similarly":["you"],"do. Tokenizer,":["although"],"do.\", this":["method"],"do? Not":["in"],"do_count_words***` in":["`word_counter`"],"doc `to_rna`.":["Or"],"doc about":["indexing"],"doc comment":["on","at","at"],"doc comments":["obviously"],"doc for":["the","`string.translate`","the","the","the","the","the","the","the","the","the"],"doc string":["comments"],"doc strings,":["to"],"doc strings.":["This"],"doc's and":["assume"],"doc-strings should":["be"],"doc. But":["the"],"docString, but":["that"],"docs at":["built-in"],"docs for":["`elif`.","string.","`str`.","`str`"],"docs on":["how"],"docs. `isupper`":["is"],"docstring (\"Has":["Lower"],"docstring and":["those"],"docstring can":["be"],"docstring consists":["of"],"docstring could":["explain"],"docstring for":["that","class","class","class","for","the"],"docstring is":["missing,","a"],"docstring or":["no"],"docstring says":["it."],"docstring should":["be"],"docstring spanning":["multiple"],"docstring to":["`to_rna`,"],"docstring! Great":["naming"],"docstring's for":["public"],"docstring, if":["you"],"docstring, so":["he"],"docstrings are":["welcome,","not"],"docstrings for":["`DNA`","this"],"docstrings only":["in"],"docstrings though":[";-)"],"docstrings to":["the","your"],"docstrings, I":["continue"],"docstrings, or":["even"],"docstrings, please":["read"],"docstrings, which":["is"],"docstrings. Are":["they"],"docstrings. I'm":["not"],"docstrings; I":["know"],"doctoring for":["the"],"doctring if":["you"],"document `Phrase.word_count`":["seems"],"document all":["public"],"document it":["as"],"document public":["interfaces."],"document the":["intent"],"document what":["the"],"document your":["design,","code,","code."],"documentation (either":["in"],"documentation (i":["was"],"documentation and":["see","added","learn"],"documentation even":["for","for","in","for","in","for","for","for","for"],"documentation for":["public","public","a","`isupper`"],"documentation if":["you"],"documentation is":["one"],"documentation lines":["are"],"documentation on":["string"],"documentation or":["function"],"documentation patches":["the"],"documentation writing.":[":)"],"documentation, is":["it?"],"documentation, though":["I"],"documentation. I":["just"],"documentation. I've":["added"],"documented everything":["very"],"documented in":["the"],"documented public":["interface"],"documented solution.":["I"],"documenting -":["the"],"documenting all":["public"],"documenting as":["suggested."],"documenting checks":["with"],"documenting code":["more","approach."],"documenting public":["interfaces?","interfaces.","interfaces"],"documenting what":["the"],"documenting your":["code"],"documenting. However":["that's"],"doe not":["matter"],"does \"hey\"":["actually"],"does (`if":["...`)."],"does `.format(n,":["n,"],"does `los`":["stands"],"does `return":["not"],"does all":["required","the"],"does as":["well,"],"does blow":["my"],"does check":["the"],"does determine":["if"],"does exactly":["in","what","what"],"does half":["the"],"does have":["some"],"does hey":["need"],"does in":["fact","fact"],"does is":["it"],"does it":["really","serve?","check","check","convey","make","mean"],"does make":["the"],"does matter,":["especially"],"does not":["make","express","mean","tell","expose","need","reference","contain","do","make","meet","meet","respect","have","garanty","have","seem","use","require","sound","return","need","support","look","work"],"does nothing":["when","for"],"does on":["average"],"does seem":["sort","to"],"does something":["by"],"does the":["Python","lower","PHP","job,","functions","trick,","same","transcription"],"does using":["the"],"does what":["you","your"],"does without":["jumping"],"does work":["syntactically."],"does would":["help."],"does your":["code"],"does't really":["[work](http://img38.imageshack.us/i/cwfq.png/)."],"does, I'll":["change"],"does, and":["then"],"does, either":["with"],"does, you":["could"],"does. And":["yet"],"does. In":["read-me"],"does. It's":["the"],"does. List":["comprehension"],"does.... that":["is"],"does? agreed,":["though,"],"doesn't allow":["one"],"doesn't break":["with","the"],"doesn't care":["about","about"],"doesn't change":["anything","with","anything","and"],"doesn't construct":["the"],"doesn't contain":["a"],"doesn't convey":["that","well"],"doesn't count":["not"],"doesn't deal":["with"],"doesn't dependent":["on"],"doesn't directly":["impact"],"doesn't do":["the","anything"],"doesn't equal":["to"],"doesn't exactly":["reflect"],"doesn't exist,":["either"],"doesn't expect":["a"],"doesn't expresses":["purpose"],"doesn't fit":["in"],"doesn't force":["anything"],"doesn't fully":["represents","represents"],"doesn't give":["you"],"doesn't have":["any),","to","to","to","to","the","explicit","a","external"],"doesn't help":["the"],"doesn't hurt":["so"],"doesn't just":["obfuscate"],"doesn't look":["really","elegant:"],"doesn't make":["sense","sense.","sense","surprises","sense."],"doesn't matter":["to"],"doesn't mean":["you","you"],"doesn't meet":["the"],"doesn't meter":["so"],"doesn't necessarily":["requires"],"doesn't need":["`Bob`","to","the","access","comments.","to"],"doesn't pass":["the","```","the","the","the","all"],"doesn't pick":["up","that"],"doesn't provide":["that"],"doesn't really":["matter.","change","make","matter","fit.","need","matter"],"doesn't receives":["text,"],"doesn't require":["parens,","comment"],"doesn't respect":["the"],"doesn't return":["what"],"doesn't says":["a"],"doesn't seem":["to","to","more","like","very","to","like"],"doesn't take":["much","up"],"doesn't translates":["well"],"doesn't use":["it.","any","`@anika`"],"doesn't work":["because"],"doesn't work,":["you"],"doesn't. Is":["there"],"doesnt error":["with"],"dogmatic) IMHO.":["Now"],"doing (I":["mean,"],"doing -":["and"],"doing TDD":[";)"],"doing `message":["=="],"doing a":["single","simple"],"doing all":["the","the"],"doing any":["checks?"],"doing anything":["here?"],"doing as":["much"],"doing because":["I"],"doing both?":["Perhaps"],"doing counts":["of"],"doing extra":["work"],"doing great":["up"],"doing is":["fine."],"doing it":["that","over","over","the","the","on","though","on","on"],"doing it.":["So"],"doing like":["I"],"doing several":["languages,"],"doing so":["I","could","doesn't","or"],"doing so,":["you"],"doing so.":["Since"],"doing some":["work"],"doing something":["that's","like"],"doing that":["in"],"doing that,":["you'll","instead"],"doing the":["following:","checks?","computing","count","same","right","regex"],"doing this":["exercise","exercise","exercise","exercise","exercise,","kind","with"],"doing too":["much,","much"],"doing two":["things,","things,"],"doing unnecessary":["iterations."],"doing when":["it"],"doing, but":["will"],"doing. But":["usage"],"doing. For":["instance,"],"doing. The":["problem"],"doing. Try":["looking"],"doing: it":["can"],"doing? If":["so"],"domain (others":["look"],"domain class":["-","(ie","-","since"],"domain model":["(`FormattedWord`)","from"],"domain of":["the","the"],"domain one.":["What"],"domain term":["for"],"domain will":["change"],"domain would":["be"],"domain, I":["think"],"domain-y private":["methods?"],"domain. What":["about"],"domain. You":["don't"],"don't *do*":["anything!"],"don't _need_":["a"],"don't actually":["need"],"don't agree":["with"],"don't assume":["you","you","you","you","you"],"don't at":["your"],"don't be":["afraid"],"don't bother":["with"],"don't break":["expectations."],"don't burden":["it"],"don't care":["about","for"],"don't catch":["and"],"don't check":["for","explicitly"],"don't commute,":["i.e."],"don't complain":["if"],"don't consume":["the"],"don't cover":["that"],"don't depend":["on"],"don't disagree":["=)"],"don't do":["much","the","anything","anything","it"],"don't enforce":["the"],"don't even":["keep","need"],"don't feel":["too","strongly","that"],"don't find":["the","the","the"],"don't force":["the"],"don't forget":["to","the"],"don't fully":["understand"],"don't get":["why","the"],"don't have":["to","those.","to","to","all","to","to","to","to","to","to","an","to","enough","to","anything","to","to","any","any","to","to","any","to","have","to","a"],"don't inherit":["from"],"don't instantiate":["the"],"don't intend":["to"],"don't know":["so","Python","of","Python!","Ruby,","what","how","how","why","what","if","how","how","why."],"don't know,":["on","it"],"don't learn":["the","the"],"don't like":["unnecessary","how","multiple","this","the","this","defensive","it","my","that","`alphagram`","the","relying","passing","comments","self,","the","if","building","using"],"don't love":["how"],"don't mean":["the"],"don't meet":["the"],"don't mimic":["that,"],"don't necessarily":["need","need"],"don't need":["to","to","static","access","it.","both.","the","the","the","to","the","to","list","to","to","to","to","the","`else`","the","it","the","enums","to","an","an","the","the","to","the","the","a","the","the","the","the","to","to","the","blank","`not","any","`__init__`","`list()`","to","changing?","`reduce()`","to","a","to","the","to"],"don't please":["apply"],"don't read":["`ActionDispatcher`'s","the"],"don't really":["handle","agree","know","see","need","know,","know","understand","feel"],"don't represent":["nucleotides,"],"don't see":["any","the","those","those","a","it","much","much","the","the","any","a","any","your","it","any","test","a","it"],"don't seem":["to","to","to","to"],"don't spoil":["the"],"don't subscribe":["to"],"don't test":["case"],"don't think":["I","you","having","YAGNI","is","it's","`result","that","it's","it's","this","you","I","there's","it","a","that","I","it's","you","separating","the","converting"],"don't understand":["the","the","a","the"],"don't understand,":["but"],"don't use":["maketrans,","the","pokémon","'str'","it","it","them","it","properties","properties","properties,","any","any","an","it."],"don't use,":["and"],"don't want":["to","to","to","to"],"don't we":["get"],"don't work":["on"],"don't worry":["about"],"don't write":["\"Returns"],"don't you":["think","think","spot","spot","spot","spot","use"],"don't. Any":["suggestions?"],"done \"exercism":["fetch\""],"done (and":["there's"],"done Python":["in"],"done `text.strip()`":["beforehand."],"done a":["new"],"done and":["that"],"done any":["white-box","projects"],"done at":["the"],"done better.":["Feel"],"done by":["your"],"done in":["the","the","so"],"done much":["with"],"done some":["actual"],"done that":["by","way",":-)"],"done that,":["still"],"done the":["pythonic"],"done this":["exercise"],"done using":["`is`","the"],"done when":["property"],"done with":["the","the","simple","them","it."],"done without":["any"],"done! Much":["better"],"done\" --":["this"],"done, but":["I"],"done, then":["going"],"done. I":["wont","like"],"done. Instead,":["during"],"done. Of":["course"],"dont have":["to","any"],"dont know":["why"],"dont need":["neither","`Statement.anything`"],"dont use":["it."],"dot net's":["LINQ"],"double blank":["lines"],"double check":["`msg`"],"double equals":["with"],"double leading":["underscores"],"double only":["where"],"double ticks.":["Also"],"double underscore":["prefix","prefixes","is","to","in"],"double underscore:":["I"],"double underscores":["are"],"double undrrscore":["may"],"double when":["needed,"],"double-leading underscore":["scheme"],"double-leading-underscore is":["not,"],"double-underscore is":["\"private\""],"double-underscore prefixed-only":["form,"],"double-underscore seems":["to"],"double-underscore very":["very"],"double-underscore, so":["it'll"],"double-underscores are":["reserved","going"],"double-underscores. There's":["no"],"doubling the":["size"],"doubt `Counter`":["is"],"doubt about":["line","the"],"doubt, choose":["non-public;"],"doubtful improvement.":["What"],"down --":["I"],"down a":["few","rabbit"],"down in":["acronyms"],"down into":["your"],"down the":["line."],"down to":["if's,","\"guide","a"],"down what":["you"],"down, or":["go"],"down, the":["remaining"],"downcasing and":["sorting"],"download https://github.com/exercism/cli/releases.":["Please"],"downside to":["the"],"dozen lines":["function"],"dozen one-liner":["functions"],"dragged along":["a"],"draws my":["attention."],"drill down":["into"],"drilled-down kata,":["but"],"drilling in":["string"],"driving force":["FWIW),"],"drop `elif`":["or"],"drop non-alphanum-or-space":["characters"],"drop the":["final","\"elif\"","elif's","else","branching","__is_question"],"dropped `_ucfirst`":["and"],"dropped that":["early"],"dropping `[`":["and"],"drops everything":["in"],"drops quite":["a"],"drove the":["order"],"drunk -":["you"],"dual type":["python"],"duck typing":["-"],"due to":["recent","pythons"],"dunder is":["used"],"duplicate `msg.strip()`":["expressions."],"duplicate of":["the"],"duplicate submit":["(shell"],"duplicate that":["for"],"duplicate the":["\"Fine...\"","call"],"duplicated logic":["in"],"duplicated. You":["could"],"duplicates it,":["then"],"duplication after":["copying."],"duplication and":["making"],"duplication in":["the"],"duplication of":["logic"],"duplication regarding":["the"],"duplication. Any":["chance"],"during my":["changes"],"during the":["copy"],"dynamic or":["change"],"e.g. \"first":["such"],"e.g. atm":["python"],"e.g. compare":["to"],"e.g. define":["shouting"],"e.g. don't":["write"],"e.g. http://hg.python.org/cpython/file/3.3/Lib/ipaddress.py#l1285,":["a"],"e.g. the":["test"],"e.g. whitespace":["was"],"each \"if\")":["would"],"each ```if```":["block"],"each `if`":["as","block:","statement","statement","statement","statement"],"each and":["every","any"],"each block":["returns."],"each call":["to","to","to"],"each call,":["so"],"each case":["as","statement"],"each char":["with"],"each character":["of","in","in"],"each chech":["in"],"each condition,":["without"],"each condition.":["You"],"each conditional":["branch"],"each duplicate":["the"],"each element,":["check"],"each helper":["method"],"each if":["test","clause"],"each if.":["I"],"each individual":["nucleotide"],"each item":["in"],"each iteration":["of"],"each method":["call","once,"],"each nucleotide":["(``str``"],"each of":["the","the","the","the","the","those","these","your"],"each one":["starting"],"each other":["if","if"],"each other,":["why"],"each other.":["The"],"each part":["without"],"each person":["has"],"each predicate":["to"],"each reaction":["be"],"each response":["is","compared","is","into"],"each string":["element."],"each string.":["I"],"each subroutine,":["even"],"each test":["is","explaining","should"],"each time":["someone","someone","(and","`DNA.count`","```"],"each time,":["but"],"each time.":["If"],"each type":["of","of"],"each with":["it's","their"],"each word":["in","at","and"],"each word,":["thanks","which"],"each word.":["If"],"earlier albeit":["there"],"earlier incarnations,":["I"],"earlier revision,":["that"],"earlier you":["have"],"early (in":["each"],"early looks":["to"],"early on.":["However,"],"early or":["not"],"early return":["in","statements,","statements","would","better.","style"],"early return.":["I"],"early returns":["that","as","make","(which","as","are","are","instead"],"early returns,":["I"],"early returns](http://exercism.io/submissions/52101ce59701fa85bd000026)":["that","a"],"ears can't":["hear"],"earth years":["allowed"],"easier for":["you","the"],"easier in":["the","the"],"easier than":["dealing"],"easier to":["see","understand","understand","test.","read","read","get","understand","extend","comprehend.","read.","read.","grok","test","associate","tell","understand","understand.","read","read","make","make","make","make","make","make","reason","see","understand","understand","understand","understand","declare","make","avoid","understand","read.","reason"],"easier way":["to","to"],"easier ways":["to"],"easier, your":["Bob"],"easier. But":["you"],"easier. I'm":["still"],"easiest way":["there","to"],"easily (granted,":["the"],"easily avoid":["repeating"],"easily cache":["the","the"],"easily confused":["with"],"easily done":["with"],"easily express":["this"],"easily forget":["to"],"easily generalizable":["than"],"easily get":["around"],"easily improved":["by"],"easily in":["the"],"easily miss":["that"],"easily missed.":["An"],"easily read":["but"],"easily strip":["the"],"easily swap":["one"],"easily switch":["between"],"easily tested":["if"],"easily than":["code."],"easily using":["a"],"easy and":["simple."],"easy assignment":["such"],"easy enough":["to","to"],"easy task":["and"],"easy task,":["but"],"easy task.":["I"],"easy that":["would"],"easy to":["read.","follow.","assume","understand.","miss","read.","extend","grok.","grasp","change","test","learn","get","understand.","understand","check","read.","follow"],"economical to":["create"],"edge case,":["I"],"edge cases":["in","regarding"],"edge cases,":["what"],"edge cases.":["They're"],"edit every":["if"],"editor is":["configured."],"editor plugins":["complete"],"editors should":["highlight"],"edliaw and":["Kwpolska."],"effect as":["a"],"effect of":["doubling"],"effect would":["breaking"],"effective at":["the"],"effective than":["sort"],"effective way":["of"],"effectively hiding":["them"],"effectively setting":["the"],"effects by":["changing"],"effects caused":["by"],"effects in":["list"],"efficiency concern:":["My"],"efficiency for":["not"],"efficiency of":["the"],"efficiency. I":["only"],"efficient --":["this"],"efficient algorithm":["when"],"efficient but":["gets"],"efficient by":["using"],"efficient code.":["I"],"efficient for":["normalization"],"efficient since":["the"],"efficient than":["just","sort:","creating","stripping"],"efficient to":["do"],"efficient using":["Python's"],"efficient way":["in"],"efficient while":["at"],"efficient, at":["the"],"efficient, makes":["the"],"efficiently in":["Python"],"effort but":["was"],"effort of":["determining"],"eg `THYMINE":["="],"eg. Ruby,":["but"],"eg. Scheme's":["`cond`"],"eg. in":["clojure)"],"eg: \"on":["the"],"either True":["or"],"either `@pamela`":["or"],"either `None`":["or","or","or"],"either `True`":["or","or"],"either a":["string","non-alpha"],"either already":["too"],"either approach,":["and"],"either be":["to"],"either clarify":["this"],"either count_words()":["a"],"either detect":["assignements"],"either do":["the"],"either has":["to"],"either here,":["but"],"either it":["would"],"either level.":["Therefore,"],"either make":["`Phrase`","`.source`"],"either repeat":["the"],"either return":["`True`"],"either side.":["Moreover"],"either sprinkle":["the"],"either the":["empty","conditions","sorted"],"either true":["or"],"either until":["someone"],"either upon":["counting."],"either way":["-","(especially"],"either when":["reading"],"either with":["help"],"either). It":["really"],"either, but":["that's","its"],"either, until":["I"],"either. Create":["an"],"either. I":["know"],"either. I'm":["going"],"elaborate a":["little"],"elaborate about":["\"if"],"elaborate enough":["(sorry"],"elaborate would":["be"],"elegant -":["there's"],"elegant and":["general."],"elegant checking":["of"],"elegant programming":["language\""],"elegant solution":["it"],"elegant than":["creating"],"elegant version":["of"],"elegant way":["to","of"],"elegantly. `Counter`":["is"],"element -":["it"],"element, check":["whether"],"element. I":["agree"],"elements() in":["the"],"elephant\"? I":["realize"],"elif \"question\"":["in"],"elif \"shout\"":["in"],"elif ...":["return","return","elif","elif","elif","else`","elif","else"],"elif ...`":["would"],"elif ...`?":["You"],"elif /":["elif","else```"],"elif and":["else."],"elif instead":["of"],"elif is":["redundant"],"elif not":["msg.strip()"],"elif statement[-1:]":["=="],"elif to":["state","get"],"elif unless":["the"],"elif use":["i"],"elif was":["stupid,"],"elif's didn't":["need"],"elif's down":["to"],"elif's looks":["better."],"elif, I":["would"],"elif, but":["on"],"elif, else).":["I"],"elif-statements point":["out"],"elif/else where":["leftover"],"elif/else, and":["I"],"elif: len(letters)":["can","can"],"elifs are":["rather"],"elifs of":["course)."],"elifs the":["string"],"elifs/else in":["hey"],"eliminate comments.":["Your"],"eliminate the":["if","`for`","empty"],"eliminates the":["need"],"eliminating the":["need"],"elimisteve's suggestions":["of"],"else ''`":["so"],"else ...`":["construction"],"else I":["could"],"else ```":["clause","clause"],"else added":["on"],"else also":["commented"],"else at":["the"],"else because":["I"],"else belongs":["to"],"else can":["comment"],"else cases.":["However,","However,"],"else entirely":["because"],"else for":["symmetry,"],"else has":["to"],"else if":["....,"],"else implements":["it."],"else in":["each","the","`lowercase_with_underscores`."],"else is":["much","redundant.","self-explanatory.","going","necessary"],"else might":["consider","such"],"else operates":["at"],"else picks":["up"],"else return":["False..."],"else said":["“because"],"else statement":["around","to","have"],"else statement.":["It's"],"else statements":["more"],"else than":["`self`","`None`"],"else think":["is"],"else this":["weekend."],"else to":["look","get"],"else told":["me"],"else uses":["these","it),"],"else vote":["for"],"else who":["extracted"],"else –":["I've"],"else\" is":["hard"],"else). I":["can"],"else, ...\",":["I"],"else, and":["would"],"else, but":["I"],"else, which":["is"],"else-branch ads":["to"],"else-branch refers":["to"],"else. Although":["it"],"else. I":["would"],"else. In":["this"],"else. It":["is"],"else. Maybe":["someone"],"else: return":["False`","'Whatever.'"],"else` conditional":["chain"],"elses because":["it"],"elses together":["with"],"elsewhere, I":["suppose."],"elsewhere, one":["should"],"elsewhere, parts":["of"],"elsif msg":["=="],"elucidation of":["the"],"em...coming from":["PHP"],"emacs 24,":["I"],"emacs but":["it","when"],"emacs to":["know"],"embedded directly":["in"],"embedded knowledge":["into"],"embedding answer":["strings"],"embedding high":["Unicode"],"emphasise that":["the"],"emphasize that":["e.g.","*uppercase*","it's"],"emphasize the":["mutual"],"emply string":["has"],"emptiness [PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations)":["recommends"],"emptiness you":["should"],"emptiness, [PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations)":["recommends","recommends"],"emptiness, [PEP8](http://www.python.org/dev/peps/pep-0008/)":["recommends"],"emptiness, you":["should"],"empty (I":["reeeally"],"empty I'd":["probably"],"empty __init__":["method."],"empty `return`":["in"],"empty a":["grade"],"empty became":["more"],"empty dicts":["and"],"empty is":["to"],"empty key,":["which"],"empty line":["to","would","at"],"empty lines":["between"],"empty lists,":["empty"],"empty matches":["anymore?"],"empty message":["looks"],"empty message.":["In"],"empty or":["not.","only"],"empty sentence":["or"],"empty sequences":["are"],"empty string":["also","are","is","is","method","will","evaluates","evaluates","has","has","has","evals","has","has","has","`\"\"`","has","has","has","cannot","has","and","at","STILL","is","case","has","as","has","has","still","is","has","(but","input.","in","in","issues","or","in","it","is","[PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations)","evaluates","you","is","is","is"],"empty string,":["or","so","such","but","while"],"empty string.":["It","otherwise","I've","nothing","In"],"empty string?":["How"],"empty strings":["to","(although","get","would","are","evaluate","evaluate","evaluate","evaluate","evaluate","evaluate","evaluate","are"],"empty strings,":["empty","it"],"empty strings.":["But","You"],"empty tuples,":["empty"],"empty, and":["you"],"empty, but":["it's"],"empty, return":["'Fine...',"],"empty. In":["fact,"],"empty. This":["is"],"empty?\" \"respond":["appropriately.\""],"enable static":["analysis"],"enamored with":["the"],"encapsulate data":["and"],"encapsulate the":["string."],"encapsulated message":["processing"],"encapsulates the":["logic"],"encapsulating all":["of"],"encapsulating the":["message"],"encapsulation for":["a"],"encapsulation is":["always"],"encode it":["first"],"encode that":["logic"],"encode the":["strings."],"encoded as?\"":["What"],"encoding (and":["it"],"encoding --":["probably"],"encoding a":["parameter"],"encoding at":["top","top"],"encoding has":["not"],"encoding in":["the"],"encoding information":["on"],"encoding is":["different"],"encoding on":["top","top","top"],"encoding to":["overcome"],"encoding when":["the"],"encoding) are":["a"],"encoding, do":["you"],"encoding, you":["wouldn't"],"encoding. KISS.":["YAGNI."],"encountered the":["yelling"],"encourage all":["nits"],"encourage you":["to"],"encouraged to":["instead"],"end (not":["tested)"],"end I":["decided"],"end ethe":["logic"],"end instead":["of"],"end is":["better?"],"end of":["```hey()```","a","method.","the","the","your","line","the","the","the","the","string:","string"],"end or":["having"],"end that":["all"],"end the":["test","`hey`"],"end up":["with","with","with","getting","being","with","with"],"end with":["'Sure.'"],"end with,":["etc..."],"end, -1)]`.":["Does"],"end, that's":["a"],"end. Could":["the"],"end. I":["think"],"ended up":["with","with","with"],"ending characters,":["if"],"ending in":["a"],"ending underscores)":["are"],"ending up":["computing"],"ending with":["a","one."],"endless loop":["when"],"endpoint when":["it"],"ends up":["meaning","being"],"ends with":["a","a","a","a","a","a","a","a"],"ends with.":["Also,"],"ends, and":["what"],"endswith ```,":["you"],"endswith for":["the"],"endswith suggestion,":["as"],"endswith() method":["on"],"endswith() suggestion":["was"],"endswith), but":["I"],"endswith. my":["stars!!!"],"endswith/1, isspace/0`":["all"],"enforce private":["members"],"enforce the":["invariants"],"enforced by":["tests.","tests."],"engine didn't":["cope"],"engineered\" version.":["Just"],"engineering in":["this"],"english please":["I'm"],"english rusty":["?"],"english speaker;":["the"],"enhance readability":["here?"],"enhance understanding":["the"],"enjoy the":["trip."],"enjoying this":["back-and-forth!)"],"enough (sorry":["lispmachine"],"enough Python":["experience"],"enough about":["the","it"],"enough and":["embedding"],"enough app":["nucleotides"],"enough code":["to"],"enough code.":[":)"],"enough for":["the","making","me."],"enough in":["clarifying"],"enough is":["not"],"enough not":["to"],"enough on":["new"],"enough reason.":["Sorry!"],"enough so":["there"],"enough that":["you're","I","you","its","messages"],"enough thought":["into"],"enough times":["in"],"enough to":["me.","me.","me.","me.","be","be","know","not","break","know","let","create","get","be"],"enough), as":["it"],"enough, but":["consider"],"enough, when":["I"],"enough. But":["you"],"enough. In":["some"],"enough. Just":["didn't"],"enough. Otherwise":["I"],"ensure it":["always","passes"],"ensure resuability":["and"],"ensure sanitization":["(the"],"ensure that":["phrase"],"ensure the":["instance's","instance"],"ensure this":["except"],"ensure unique":["validity."],"entangled my":["responses"],"enter in":["one"],"entire input":["string."],"entire map?":["If"],"entire problem":["inside","yet,"],"entire yelling":["case"],"entirely because":["you"],"entirely clear,":["I"],"entirely lost.":["In"],"entirely sure":["of"],"entry point).":["*Given"],"entry point,":["it"],"entry point.":["IOW:"],"enum -":["I"],"enum support":["that"],"enum type.":["Yes,"],"enumerations in":["python,"],"environment with":["different"],"equal to":["`None`,","an","blah\"","blank","the","the"],"equality -":["that's"],"equality with":["None,"],"equality. The":["fact"],"equally important,":["but"],"equally performant":["and"],"equally valid,":["there"],"equals to":["\"T\""],"equals with":["\"None\"","`is`)."],"equals. i.e.":["`message=''`"],"equivalent for":["me."],"equivalent method":["for"],"equivalent of":["a"],"equivalent regular":["expression"],"equivalent strings":["of"],"equivalent to":["```not","the","`not","`return","\"cats\"?"],"error -":["as"],"error a":["good"],"error because":["the"],"error if":["I","you","`s`"],"error in":["python","comment:"],"error like":["this,"],"error messages":["for"],"error which":["probably"],"error with":[".strip()"],"error, and":["I"],"error, so":["no"],"error, the":["`str(statement)`"],"error... can":["you"],"error? Second,":["why"],"errors in":["copying"],"errors when":["unknown"],"errors, in":["case"],"escaping the":["string?"],"especially as":["Python","it"],"especially disturbing":["as"],"especially no":["mixing"],"especially not":["when"],"especially odd,":["since"],"especially on":["`class"],"especially since":["I","that"],"especially that":["`DefaultResponder`"],"especially the":["|"],"especially to":["spacing"],"especially useful":["because"],"especially when":["all"],"especially with":["regards"],"essence of":["the"],"essentially \"first":["item"],"essentially casting":["the"],"essentially string.replace.":["The"],"et. al.":["to"],"etc then":["use"],"etc without":["breaking"],"etc) but":["it"],"etc) of":["items"],"etc) on":["any"],"etc), maybe":["those"],"etc, and":["naming"],"etc, but":["I"],"etc, which":["is"],"etc. But,":["they"],"etc. I":["think"],"etc. If":["we"],"etc. It":["means"],"etc. More":["on"],"etc. Much":["simpler"],"etc. Name":["could"],"etc. That":["would"],"etc. all":["see"],"etc. are":["functionally"],"etc. looks":["arbitrary"],"etc. out":["of"],"etc. would":["look"],"etc.) from":["the"],"etc., since":["Bob"],"etcetc. A":["flatter"],"ethe logic":["of"],"evals to":["false"],"evaluate it":["in"],"evaluate the":["others."],"evaluate to":["`False`","`False`.","`False`.","`False`.","`False`","`False`,","`False`,"],"evaluated only":["once."],"evaluates to":["false","```False```,","false,","`True`,","`False`,","`False`.","either","`False`."],"evaluating to":["boolean]:","False"],"evaluation is":["true"],"evaluation order":["in"],"evaluation to":["a"],"evaluation, so":["i"],"even `cls`":["where"],"even after":["having"],"even allow":["someone"],"even better":["ways","`self._text","an","than","`collections.Counter`"],"even better),":["or"],"even better,":["a","skip"],"even bother":["to"],"even clearer":["and"],"even clearer,":["don't"],"even code":["comments."],"even command":["line"],"even consider":["implementing"],"even do":["a"],"even effect":["things?"],"even extract":["words"],"even first-class":["citizen)"],"even for":["Python","Python","Python","Python","Python","Python","Python","small","non","this"],"even further.":["Take"],"even having":["to"],"even if":["you","not","you","you","someone","you","it's","that","`self.text_phrase"],"even in":["Python","Python"],"even includes":["some"],"even keep":["a"],"even knew":["that"],"even know":["wether"],"even less":["maintainable","expressive."],"even like":["to"],"even look":["at"],"even loops,":["just"],"even methods":["in"],"even more":["maintainable","obvious,","bloated.","enjoyable","descriptive.","if","simplify"],"even more.":["Try"],"even need":["to","to"],"even noticed":["how"],"even out":["of"],"even potentially":["harmful"],"even putting":["\"private\""],"even s":["for"],"even shorter":["if","with","(but"],"even simpler":["way"],"even simpler.":["Looks"],"even sure":["it"],"even the":["names","docstring"],"even though":["I","you","it","it's","it's","they're"],"even throw":["an"],"even to":["someone"],"even very":["simple"],"even went":["so"],"even with":["simple","`alphagram`"],"even without":["small","docstrings."],"even work":["for"],"even work?":["Or"],"eventually do":["more"],"eventually gets":["approved,"],"eventually wrapped":["by"],"ever be":["silence,"],"ever bring":["myself"],"ever changed":["to"],"ever need":["to"],"ever needed":["to"],"ever python":["program."],"ever said":["`Bob`"],"ever use":["the"],"ever write":["it,"],"ever wrote":["in"],"ever you":["initialize"],"every 'if'":["means"],"every `is_anagra`":["call."],"every block":["with"],"every body's":["brain"],"every branch,":["`if`s"],"every call":["to"],"every candidate":["for","for"],"every character":["in","of"],"every class":["is"],"every condition":["at","uses"],"every detail":["as"],"every expected":["input"],"every function":["call?"],"every if":["as"],"every message.":["But"],"every method":["definition","-","as"],"every other":["solution"],"every piece":["of"],"every single":["bit"],"every test":["you"],"every time":["the","the","`is_anagram`","it","something"],"every time,":["actually."],"every word":["passed"],"everybody has":["opinions!"],"everybody is":["indeed"],"everyone about":["=)"],"everyone else":["think"],"everyone for":["the"],"everyone is":["going"],"everything about":["Python--I"],"everything and":["persists","the"],"everything else":["below.",":P"],"everything except":["class"],"everything for":["this"],"everything has":["to","its"],"everything in":["getters/setters).","the","one"],"everything jamert":["said,"],"everything matching":["only"],"everything once":["--"],"everything public":["by"],"everything so":["far."],"everything very":["well."],"everything what":["we"],"everything with":["self..."],"everything within":["one"],"everything, joining":["an"],"everything, that":["helps"],"everything. That":["helps","helps","helps","helps"],"everywhere (when":["you","you","you"],"everywhere. It":["might"],"everywhere. That":["being"],"evidence (if":["you"],"evident but":["if"],"evident in":["cases"],"evident the":["code"],"evident what":["kind"],"exact duplicate":["of"],"exact regexp":["over"],"exact same":["parameters."],"exactly as":["you"],"exactly designed":["for"],"exactly duplicates":["it,"],"exactly for":["such"],"exactly in":["inline"],"exactly intuitive,":["at"],"exactly like":["the"],"exactly reflect":["the"],"exactly the":["same"],"exactly what":["each","is","I","it","I","I","we"],"exactly you're":["testing"],"exaggerating here":["a"],"examining your":["code"],"example -":["description","`checkend`"],"example --":["that"],"example 80":["char"],"example Sentence":["or"],"example `is_question`":["or"],"example `str.replace`":["is"],"example and":["forgot"],"example but":["still"],"example didn't":["just"],"example file":["to"],"example had":["hit"],"example if":["you"],"example in":["PEP","the"],"example is":["the"],"example it":["could"],"example literate":["programming"],"example making":["the"],"example of":["over-engineering."],"example questions":["like"],"example that":["you","you"],"example the":["sequence"],"example to":["create","illustrate"],"example usage":["but"],"example you":["linked"],"example's pretty":["specific"],"example, None":["if"],"example, Ruby":["has"],"example, ``str``":["turns"],"example, `len(message.strip())":["=="],"example, `maketrans`":["solution"],"example, `nucleotides_seq`":["or","or"],"example, `phrase`":["or`utterance`."],"example, `s.endswith('?')`":["and"],"example, and":["return"],"example, but":["I"],"example, if":["the","another"],"example, in":["this","your"],"example, polymorphism":["seems"],"example, shouted":["questions"],"example, so":["I"],"example, you":["test","can","could"],"example-driven rather":["than"],"example. I'm":["open"],"example. The":["commented"],"examples (it's":["an"],"examples I":["don't"],"examples by":["multiple"],"examples created":["by"],"examples like":["this"],"examples of":["its"],"examples show":["double"],"examples, that":["isupper()"],"excellent code":["even"],"excellent help":["and"],"excellent! I'd":["be"],"except I":["don't"],"except KeyError:...`":["(or"],"except a":["string"],"except by":["putting"],"except class":["names)"],"except clauses":["are"],"except for":["`hey()`","the"],"except in":["a"],"except it":["wouldn't"],"except that":["you'd"],"except to":["discovery"],"exception (I":["would"],"exception either":["upon"],"exception handling:":["I'm"],"exception like":["that"],"exception of":["some"],"exception on":["the"],"exception propagate":["anyway"],"exception than":["ignoring"],"exception type":["you"],"exception would":["make"],"exception. In":["general,","all"],"exceptional case,":["and"],"exceptional circumstance":["anyway"],"exceptional. I":["think"],"exceptions like":["that."],"exceptions. It's":["worth"],"exceptions. You're":["trying"],"excessive. One":["empty"],"exchange and":["google,"],"exchange for":["`not"],"exchange of":["several"],"excited about":["reading"],"exclamation mark.":["This"],"exclamation marks":["are"],"exclusive I":["think"],"exclusive so":["that"],"exclusively for":["class"],"exclusively use":["Python"],"exclusiveness of":["the"],"executable code":["change"],"executable on":["the"],"execute the":["lines"],"executed anyway.":["Plain"],"executed from":["command"],"executing (possible":["expensive)"],"execution but":["would"],"execution is":["clear."],"execution of":["the","\u003ccode\u003ehey\u003c/code\u003e"],"execution since":["you"],"execution. I":["also"],"exercice as":["\"completed\""],"exercise (by":["overfitting"],"exercise -":["could","it"],"exercise I":["think"],"exercise I'll":["probably"],"exercise and":["I","I"],"exercise as":["done,","done","a"],"exercise based":["on"],"exercise but":["if"],"exercise check":["out"],"exercise every":["time"],"exercise in":["frustration...","in"],"exercise is":["to","in","quite"],"exercise rather":["than"],"exercise requires.":["For"],"exercise saves":["some"],"exercise specification":["there"],"exercise that":["strings","in","in","Python","requires"],"exercise trying":["to"],"exercise was":["not","surprising.","having","trying"],"exercise without":["addressing"],"exercise you":["check"],"exercise, I":["thought","got"],"exercise, but":["some","exercism","just"],"exercise, it":["really"],"exercise, it's":["not"],"exercise, not":["learning"],"exercise, so":["all"],"exercise, the":["unit"],"exercise, then":["promptly"],"exercise, there":["is"],"exercise. Any":["feedback"],"exercise. For":["me,"],"exercise. Uracil":["must"],"exercise. Your":["`hey()`"],"exercise? If":["so,"],"exercises are":["really"],"exercises here,":["the"],"exercises in":["parallel"],"exercises is":["less"],"exercises on":["this"],"exercises. It's":["\"standard\""],"exercism by":["doing"],"exercism command":["line"],"exercism gem,":["as"],"exercism source":["and"],"exercism thought":["I"],"exercism.io code":["doesn't"],"exercism.io didn't":["give"],"exercism.io does":["not"],"exercism.io is":["sandbox"],"exercism.io supported":["multiple"],"exhibit unexpected":["behavior."],"exist as":["instance"],"exist back":["when"],"exist). Using":["`itertools.count`"],"exist, either":["when"],"existed :)":["The"],"existed at":["least"],"existed, and":["is"],"existence of":["a"],"existing code.":["In"],"existing robots":["because"],"exists a":["more"],"exists in":["Go:","a"],"exists regardless,":["and"],"expand tests":["or"],"expand them":["on"],"expandable for":["further"],"expanding test":["suite"],"expect `Phrase.word_count()`":["to"],"expect a":["string","`Bob`","`Word`"],"expect as":["the"],"expect from":["Python"],"expect it":["to"],"expect that":["`word_count`"],"expect the":["sequences","initializer,","initializer"],"expect their":["argument"],"expect to":["start"],"expect translate":["to"],"expect, but":["it's"],"expect. In":["statically"],"expect. This":["function"],"expected argument,":["specially"],"expected input":["needs"],"expected output":["if","in"],"expected to":["be","be"],"expected values":["as"],"expected), I":["would"],"expected. It's":["great"],"expecting to":["catch"],"expects \"Be":["that"],"expects a":["list).","`Bob`"],"expensive -":["some"],"expensive for":["a"],"expensive is":["class"],"expensive operations":["and"],"expensive) response":["functions"],"expensive. With":["my"],"experience in":["this","other"],"experience just":["yet."],"experience solving":["this"],"experience splitting":["up"],"experienced developers":["would"],"experienced in":["python,"],"experienced programmers":["do"],"experimentation and":["learning."],"experimented for":["[this"],"experimented with":["using"],"expert in":["any"],"expert, so":["it","I"],"explain on":["why"],"explain the":["purpose","interpretation"],"explain this":["better,"],"explain those":["a"],"explain what":["the","you","are","they"],"explain your":["intent,"],"explain. There":["are"],"explained, as":["it's"],"explaining helper":["methods__"],"explaining the":["slightly"],"explaining what":["it's","the"],"explaining why":["not"],"explains enough":["so"],"explanation can":["be"],"explanation of":["old"],"explanation on":["that."],"explanations, @noemy":["and"],"explanatory. Only":["reason"],"explaned. Thanks":["for"],"explicit (and":["name)"],"explicit (good":["for"],"explicit -":["`isquiet()`"],"explicit `else`":["statements","statement","statements","statement,","statement","statement","statements","statements","statement","to"],"explicit and":["indicates","express"],"explicit branching":["anyway","as","is","?","in","even"],"explicit branching,":["you"],"explicit branching?":["(I'm"],"explicit else":["at","statement"],"explicit enough":["in"],"explicit helper":["method"],"explicit is":["fine","better"],"explicit len":["check"],"explicit one-line":["method,"],"explicit ordering":["of"],"explicit pairing":["of"],"explicit re.":["meaning"],"explicit references":["to"],"explicit return":["statement"],"explicit test":["that"],"explicit that":["adenine","it's"],"explicit unicode":["strings"],"explicit use":["`else`","of"],"explicit what":["they"],"explicit, but":["really,"],"explicit, sub":["`(\"ACGT\","],"explicit, which":["isn't"],"explicit, you":["could"],"explicit? The":["difference"],"explicitely building":["a"],"explicitely compile":["a"],"explicitely inherit":["from"],"explicitly call":["`cmp`"],"explicitly can":["what"],"explicitly checking":["that"],"explicitly clear":["from"],"explicitly creating":["a"],"explicitly give":["the"],"explicitly inherit":["one's"],"explicitly iterating":["over"],"explicitly pass":["`self`","`message`"],"explicitly return":["from","`True`"],"explicitly set":["encoding"],"explicitly since":["Python"],"explicitly subclass":["from"],"explicitly, i":["just"],"explicitly, rather":["than"],"explicitly. Why":["not"],"explicitness that":["brings."],"explicits calls":["to"],"exploit the":["details"],"exploiting properties":["inherent"],"explore the":["uses"],"explored a":["lot","lot"],"expose `Phrase.rawinput`":["as"],"expose an":["api"],"expose both":["`.number`"],"expose it":["to"],"expose that,":["but"],"exposed as":["a","a","a","public"],"exposed except":["to"],"exposed the":["class","\"db\""],"exposed), and":["then"],"exposing more":["public"],"exposing what":["should"],"expresisons I":["still"],"express concisely":["a"],"express meaning":["of","of"],"express that":["when","when","when"],"express the":["intent","logic","same"],"express their":["meaning"],"express things.":[";)"],"express this":["kind"],"express what":["code"],"express you":["thoughts","thoughts"],"express your":["thoughts"],"expressed in":["the"],"expresses code":["in"],"expresses purpose":["of"],"expresses the":["intent","intent"],"expressing helper":["methods"],"expressing intent":["through"],"expression (and":["Bob"],"expression (before":["`if`)."],"expression `message":["=="],"expression could":["also"],"expression directly":["to"],"expression if":["it's"],"expression in":["the","an","`Message.__init__()`","a"],"expression inside":["the"],"expression is":["enough","rather"],"expression on":["line"],"expression or":["method"],"expression seems":["to"],"expression to":["check","remove"],"expression with":["the"],"expression, which":["is","evaluates"],"expression. But":["it's"],"expression. Could":["you"],"expression. With":["a"],"expressions (import":["re)."],"expressions -":["there"],"expressions allow":["for"],"expressions are":["unnecessary.","a"],"expressions because":["I"],"expressions in":["your"],"expressions like":["```greeting"],"expressions may":["be"],"expressions or":["indexing.","list"],"expressions over":["and"],"expressions should":["be"],"expressions themselves":["-"],"expressions throughout":["if"],"expressions to":["understand"],"expressions were":["trying"],"expressions when":["they're"],"expressions you":["used"],"expressions, I":["just"],"expressions, be":["sure"],"expressions, but":["you"],"expressions. I":["might"],"expressions. In":["my"],"expressive and":["readable.","cleaner.","explain","idiomatic."],"expressive code":["to,"],"expressive code,":["try"],"expressive docstrings":["to"],"expressive or":["readable,"],"expressive than":["simply"],"expressive the":["string"],"expressive using":["variable"],"expressive, etc.":["But,"],"expressive, for":["a"],"expressive. enough":["code"],"extend -":["at"],"extend in":["case"],"extend it":["if"],"extend pass":["column"],"extend the":["`object`.","class"],"extend. This":["solution"],"extending `object`.":["More","More","More","More","More","More","More","More","More","More"],"extending the":["method."],"extensible solution":["as"],"extensible!\". Now,":["it's"],"extensible, and":["the"],"extensible, but":["it"],"extensible. I":["can"],"extensing `object`.":["More"],"extension and":["closed"],"extent I":["agree"],"extent it's":["modeled)."],"external access.":["They"],"external functions.":["Currently,"],"external measures?":["Just"],"external modules":["makes"],"external specification":["and/or"],"externally if":["you"],"extra *class*":["methods."],"extra RNA":["class"],"extra attributes":["in"],"extra bonus":["point"],"extra class.":["(The"],"extra code":["is"],"extra complexity.":["Else"],"extra conversion":["step."],"extra dependency":["when"],"extra empty":["line"],"extra exclamation":["marks"],"extra fields.":["Also"],"extra item":["lookup."],"extra lines,":["I'm"],"extra methods":["to","the"],"extra methods.":["It"],"extra mile":["to"],"extra object":["every"],"extra object,":["so"],"extra space":["at"],"extra spaces":["to"],"extra tests":["I"],"extra vars":["don't"],"extra verbiage":["(`__class__`)"],"extra whitespaces":["in"],"extra work":["in","with"],"extract `responses`":["to"],"extract a":["constant","function","method","rule"],"extract all":["the"],"extract alphagram":["checking"],"extract any":["of"],"extract it":["into"],"extract only":["words."],"extract some":["name"],"extract text":["processing"],"extract the":["conditions","code","code","conditionals"],"extract them":["as"],"extract words":["and"],"extracted a":["`Message`"],"extracted check":["in"],"extracted into":["a"],"extracted out":["into"],"extracted them":["in"],"extracted three":["discrete"],"extracted to":["separate","its"],"extracting `line":["8-9`"],"extracting a":["class","function,"],"extracting all":["conditions"],"extracting both":["the"],"extracting certain":["parts"],"extracting dispatch":["to"],"extracting even":["very"],"extracting every":["piece"],"extracting lots":["of"],"extracting matching":["function"],"extracting out":["methods","the"],"extracting query":["tests","tests"],"extracting tests":["to"],"extracting that":["out"],"extracting the":["test"],"extraction would":["be"],"extraneous whitespaces":["go","to"],"extreme (and":["a"],"extremely minor":["nit"],"eyes start":["to"],"eyes the":["predicates"],"f(self, *args,":["**kwds)"],"facade\" class,":["not"],"face of":["ambiguity,","ambiguity,"],"face when":["punctuation"],"facilitates refactoring.":["If"],"facing. I":["like"],"fact I":["know"],"fact `None`":["has"],"fact convey":["the"],"fact greatly":["_reduce_"],"fact it":["is"],"fact lead":["to"],"fact preserve":["the"],"fact simpler":["(less"],"fact that":["all","you","this","Counter","you","we","you","CPython","it's","empty","a","empty","empty","empty","empty","empty","empty","empty"],"fact that's":["what"],"fact very":["pythonic."],"fact, even":["the"],"fact, in":["Python"],"fact, that":["message","it","an"],"fact, this":["task"],"fact, you":["could","are"],"factor out":["the","the","the","some"],"factor this":["out","into"],"factored in":["a","a"],"factored out":["the","the","the","?","the","those","in"],"factored out.":["Remember"],"factoring out":["your","the","\"generic\"","the"],"factoring the":["checks"],"factory function?":["What"],"facts -":["in"],"fail and":["it"],"fail around":["400k"],"fail cleanly":["if"],"fail if":["a","I","there"],"fail in":["your"],"fail it":["just"],"fail on":["a"],"fail some":["of"],"fail the":["test"],"fail to":["see"],"fail with":["an"],"fail, and":["I"],"fail, you":["run"],"fail. Even":["changing"],"fail. What's":["the"],"failed tests":["and"],"failed the":["tests"],"failed, no?":["Line"],"failing (returning":["`None`)"],"failing because":["they"],"fails `test_only_numbers`":["and"],"fails if":["the"],"fails this":["would"],"fails, `str.replace`":["or"],"fails, but":["this"],"failure of":["the","the"],"failure\" issue":["(definitely"],"fair bit":["of"],"fair! I":["don't"],"fair. I":["_definitely_"],"fairly clean,":["but"],"fairly clear.":["Do"],"fairly extensible":["solution"],"fairly minor":["points"],"fairly new":["to"],"fairly opaque.":["I"],"fairly recent":["addition"],"fairly simple).":["They"],"fairly simple,":["for"],"fall on":["\"hey\""],"fall short":["of"],"fall through":["case"],"falls on":["its"],"false for":["an"],"false if":["there"],"false in":["a"],"false to":["claim"],"false value":["in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in"],"false, as":["recommended"],"false, so":["saying","you"],"false-y stuff":["to"],"false. So":["now"],"falsey inputs":["in"],"falsy if":["it's"],"falsy in":["Python,","Python,"],"falsy string":["behavior."],"falsy values":["to"],"falsy, so":["a"],"falsy` if":["`message`"],"familiar interface":["and"],"familiar vs":["unfamiliar"],"familiar with":["python's","Python","Python's","python"],"familiar with?":["It"],"familiarising yourself":["with"],"familiarity and":["preference."],"fan of":["static","prematurely","direct","LISP","the","using","regexp","side"],"fan, so":["the"],"fantastic name!":["I"],"far and":["chances"],"far as":["I'm","I'm","I'm","I'm","I'm","to","I'm","I'm","I'm","I'm"],"far from":["the"],"far into":["the"],"far more":["fluidity."],"far the":["most"],"far, even":["if"],"far, my":["experience"],"far. Just":["one"],"fashion (if,":["elif,"],"fashion, that":["they"],"fast as":["Counter."],"fast way":["to"],"faster and":["more"],"faster because":["it's"],"faster in":["execution."],"faster than":["an"],"faster that":["using"],"faster) by":["making"],"faster, or":["it"],"fault\" -":["unless"],"fault, not":["yours."],"favor `len(sentence.strip())":["=="],"favor of":["sort","some"],"favored, and":["I"],"favoring more":["generic"],"favorite feature":["in"],"favourite feature":["of"],"feature if":["the"],"feature in":["python."],"feature of":["python"],"feature such":["as"],"feature too":["and"],"feature you":["very"],"featured templating":["abstraction"],"features and":["3.x"],"features like":["`super`,","`super`,","`super`"],"features to":["the"],"feeble attempt":["at"],"feed back.":["Sorry"],"feedback --":["I'm"],"feedback @sebastian,":["is"],"feedback @yessenia,":["a"],"feedback I":["got","recieved,"],"feedback and":["introduced"],"feedback is":["much","appreciated","very","welcome.","greatly","welcome.","really"],"feedback makes":["a"],"feedback on":["my","my","how","clarity","the","this."],"feedback things,":["they"],"feedback thoughts:":["Do"],"feedback! I":["really","had"],"feedback! Is":["it"],"feedback! You're":["right,"],"feedback! re.findall":["and"],"feedback, @chris!":["I"],"feedback, @mohammad":[":)"],"feedback, I":["guess","find","agree","think"],"feedback, I've":["done"],"feedback, You're":["right"],"feedback, can":["you"],"feedback, especially":["@dedric."],"feedback, would":["you"],"feedback, you":["could"],"feedback. As":["for"],"feedback. I":["guess","think","went","am"],"feedback. I'll":["look"],"feedback. I'm":["not"],"feedback. I've":["addressed"],"feedback. Looks":["much"],"feedback. This":["site"],"feedback. To":["be","the"],"feedback. You're":["absolutely"],"feel `is_upper`":["and"],"feel about":["it.","making","extracting","truthiness"],"feel as":["cryptic"],"feel free":["to","to","to"],"feel like":["it,","each","having","having","doing","the","the","the","there","I","you","this","this","it","doing"],"feel my":["code"],"feel really":["overengineered"],"feel sad":[":-("],"feel strongly":["about","either"],"feel that":["simply","it's","this","\"return","that","phrase.split()"],"feel too":["good"],"feeling about":["our"],"feeling as":["I"],"feeling my":["way"],"feeling of":["checking"],"feeling there'd":["be"],"feeling you":["still"],"feels a":["bit"],"feels hacky":["to"],"feels like":["it","cheating","a","there"],"feels more":["obvious"],"feels very":["jarring"],"felt as":["as"],"felt it":["was"],"felt like":["separate","the"],"felt more":["readable"],"felt wrong":["being"],"fetch a":["single"],"fetch the":["same"],"fetch\" and":["I"],"fetch` is":["not"],"fetched an":["older"],"fetching this":["exercise,"],"few cases":["where"],"few chances":["the"],"few comments":["next","would","from","based"],"few global":["variables"],"few habits":["in"],"few handy":["methods...","methods..."],"few ideas":["what"],"few interesting":["collection"],"few language-inforced":["restriction,"],"few lines":["of","of","out"],"few minor":["layout","things","points:","remarks:","remarks:"],"few months,":["but"],"few months.":[":)"],"few more":["hints:","hints"],"few nitpicks":["from"],"few notes":["though:","about","to"],"few of":["your"],"few other":["responses:"],"few pointer":["you"],"few quick":["things:"],"few references,":["but"],"few roundabout":["ways"],"few seconds":["before"],"few simple":["regular"],"few small":["feedback"],"few things":["I'd"],"few times,":["and"],"few typos":["have"],"few useful":["methods,"],"few weeks":["ago."],"fewer lines":["generally"],"fewer statements":["and"],"fewer tests":["as"],"fewer unnecessary":["lines"],"fiddling with":["enumerations"],"field and":["providing"],"field comes":["from"],"field that":["stores"],"field with":["`None`,"],"field. (Strictly":["speaking,"],"fields\" than":["anything"],"fields. Also":["subclass"],"figure a":["neat"],"figure it":["out)","would"],"figure out":["this","a","anything","any","what","that","how","what"],"figure something":["out"],"figure type":["checking"],"figured I":["should"],"figured I'd":["borrow","try"],"figured i'd":["make"],"figured out":["a"],"figured returning":["\"None\""],"figured that":["the"],"figuring out":["how","which"],"file *was*":["a"],"file -":["checks"],"file I":["have:"],"file an":["issue"],"file and":["tests"],"file encoding":["at","on","on","issue.)"],"file is":["called?"],"file it":["is"],"file md5":["sums."],"file to":["walk"],"file, instead":["of"],"file, like":["*strand*"],"file, specifically":["regarding"],"file, the":["one"],"file. Also":["use"],"file. I":["have"],"file/module. Here":["you"],"filed an":["issue"],"files yet.":["So"],"files, I":["might"],"fill it":["up"],"filter are":["conflated"],"filter for":["clarity."],"filter function":["cleans"],"filter instead":["of"],"filter is":["new","that","more"],"filter matches,":["because"],"filter object":["at"],"filter out":["extra","empty","a","None"],"filter punctuation":["symbols."],"filter result":["to"],"filter step.":["Were"],"filter the":["list"],"filter vs.":["list"],"filter() in":["order"],"filter(lambda item:":["sorted(item.lower())"],"filter) is":["needed"],"filter, map,":["..."],"filtered list":["of"],"filtered result":["to"],"filtering but":["will"],"filtering expression":["(before"],"filtering out":["alphanumerical","`None`"],"filtering to":["clean","achieve","retain"],"filtering. You":["could"],"filters at":["the"],"filters), but":["it's"],"final \"else\"":["is"],"final `else`":["clauses"],"final conditional":["check."],"final conversion":["having"],"final else,":["which"],"final function":["choice"],"final point,":["I"],"final return,":["controlled"],"final) solution":["is:"],"final_response ```":["at"],"finally I've":["thought"],"find ```contains_alphas```":["without"],"find `if":["lword"],"find a":["way","better","clean","nice","way","way","way","way","safer"],"find anything":["and"],"find fewer":["lines"],"find for":["a"],"find it":["much","much","really","useful,","quite","much","so"],"find list":["comprehensions"],"find more":["fitting"],"find out":["more...","that","that"],"find out)":["it"],"find separator.join(strings)":["to"],"find some":["ideas"],"find something":["that","like"],"find the":["`if`","privacy","use","'hey"],"find they":["are"],"find this":["pretty","perfectly","straightforward","easy"],"find useful":[";)"],"find what":["I"],"find where":["the"],"find with":["Python"],"find words":["independent"],"find you":["can"],"find your":["first"],"findall with":["`\\w+`."],"finding a":["matching"],"finding these":["all"],"finditer is":["probably"],"fine as":["well.","they"],"fine but":["a","to","you","the","in","a","lines","isn't","wouldn't"],"fine by":["taking"],"fine for":["a"],"fine the":["code","way"],"fine to":["do"],"fine unless":["you"],"fine when":["both"],"fine with":["me","`elif`"],"fine without":["it"],"fine, although":["I"],"fine, but":["you","what","by","I'm"],"fine, e.g.":["compare"],"fine, just":["use"],"fine. But":["at"],"fine. I":["just"],"fine. I'd":["just"],"fine. It":["doesn't"],"fine. No":["point"],"fine. but":["since"],"finger on":["why,"],"first 3":["exercises"],"first =).":["The"],"first I":["wanted"],"first Python":["I've","script."],"first `if":["phrase:`"],"first `if`":["condition.","is"],"first `if`'s":["condition."],"first and":["effectively","assume","it"],"first argument":["(but","of","to"],"first attempt":["at","at","at"],"first attempt!":["I"],"first before":["I"],"first branch":["that"],"first call":["to"],"first came":["to"],"first case":["could"],"first case,":["it"],"first cases":["but"],"first caused":["empty"],"first chapter":["of"],"first character":["uppercase,"],"first class":["functions."],"first condition,":["but"],"first convert":["to"],"first element":["-"],"first elif:":["len(letters)","len(letters)"],"first evaluation":["is"],"first ever":["python"],"first feeble":["attempt"],"first fix":["the"],"first generating":["all"],"first glance":["but"],"first if":["look","is","and","to"],"first if-clause":["could"],"first implementation":["was","used"],"first in":["the"],"first is":["required"],"first iteration,":["though,","although","that","I"],"first iterations.":["But"],"first learned":["Python"],"first line":["joins","to","of","(the"],"first line.":["You"],"first look":["is:"],"first looked":["at"],"first make":["sure"],"first making":["sure"],"first method":["call"],"first nit":["to"],"first occurrence":["would"],"first on":["the"],"first one":["has","modifies","that"],"first option":["to"],"first or":["have"],"first parameter":["for"],"first part":["(pluralization"],"first picked":["nit!"],"first piece":["in"],"first point":["about"],"first python":["i've"],"first question.":["I"],"first result.":["For-loop"],"first set":["membership"],"first so":["that"],"first spec":["part"],"first stab":["had"],"first steps":["in","in","in"],"first submission":["when","from",":-)","keeps"],"first test":["could"],"first test,":["an","```if"],"first that":["match)"],"first then":["it"],"first thing":["I"],"first thought":["was"],"first thought:":["Why"],"first three":["points."],"first time":["I've","(because","for","nitpicking,","I","or","or","or"],"first to":["go.","get","watch","avoid"],"first try":["and","was","which","block"],"first try,":["but"],"first version":["was","was","is","with"],"first version,":["but"],"first you":["check"],"first –":["so"],"first, I":["used"],"first, but":["EAFP,"],"first, so":["there's"],"first-class citizens":["has"],"first-try. Might":["be"],"first. It":["is"],"first. What":["is"],"first. just":["define"],"first? Or":["are"],"firstly, ensure":["that"],"fit better":["on","in"],"fit for":["this"],"fit in":["conversation","with","with"],"fit their":["purposes"],"fit. Something":["like"],"fits better":["with"],"fits on":["a"],"fits perfectly":["the"],"fits well":["for"],"fits you":["just"],"fitting in":["with"],"fitting method":["for"],"fitting methods":["for","for"],"fitting to":["the"],"fix that":[":)"],"fix the":["pep8","issues","failing","situation","test"],"fixed em...coming":["from"],"fixed in":["second"],"fixed it":["now."],"fixed them":["all..."],"fixed this":["by"],"fixes now.":["As"],"fixing it,":["but"],"fixing this":["just"],"flag in":["line"],"flag re.UNICODE":["seems"],"flame war":["battle."],"flat is":["better"],"flatter structure":["would"],"flawed -":["question"],"flawed) logic":["buried"],"flawed. Silence":["is"],"flaws in":["the"],"flesh out":["the"],"flexibility, though":["in"],"flexible and":["less"],"flipped DSL.":["I"],"float number":["as"],"floating around":["loosely"],"flow easy":["to"],"flow either":["way"],"flow is":["really"],"flow way":["less"],"flow-control. No":["ifs,"],"flow. \"is_empty_string\"":["feels"],"flow. Consider":["getting"],"flow. Please":["also"],"flow. `interpret_query`":["being"],"fluidity. As":["you"],"fn body":["to"],"fn(x)`. `filter(fn,":["xs)`"],"focused on":["python"],"focused reusable":["functions."],"focusing on":["something"],"focussing on":["making"],"foisted upon":["the"],"follow PEP8.":["In"],"follow it":["to"],"follow overall":["--"],"follow the":["example","code.","logic.","imperative","translation"],"follow this":["convention"],"follow to":["create"],"follow up":["for"],"follow, I'd":["stick"],"follow, some":["have"],"followed by":["\"if","spaces)"],"followed the":["advice"],"follower, I":["wouldn't"],"following `elif`":["redundant"],"following code":["would"],"following methods":["that"],"following methods:":["`clean_words`,"],"following the":["```if"],"following unit":["test"],"following way:":["msg.isupper()"],"following will":["answer"],"followings will":["clarify"],"follows: I've":["never"],"fond of":["inheritance","putting","cluttering","them)","some","the"],"foo '`),":["only"],"foo import":["*`)."],"foo(bar =":["baaz)`."],"foo(param1, param2=\"abc\"):`.":["You"],"fooling around":["with"],"footprint of":["the"],"footprint, raw":["speed"],"for \"T\"":["and","and"],"for \"bob\".":["Did"],"for \"is_question\"":["to"],"for \"new-style":["classes\"","classe\"."],"for \"private\"":["names.","(=&gt;\"implementation","(=&gt;\"implementation"],"for \"string":["argument\"."],"for 'T'":["and"],"for 'aggresive'":["there"],"for 'string'?":["You"],"for (pseudo)":["constants"],"for **str**":["as"],"for ...":["if","in","if"],"for 1900":["in"],"for 2.x/3.x":["features"],"for ?":["You"],"for ALL":["CAPS."],"for Bill":["and"],"for Bob":["to"],"for Bobs":["answers"],"for Counter":["works,"],"for DNA/RNA.":["I've"],"for FP":["(and"],"for None":["is","and"],"for None.":["You"],"for Python":["2.x","2.7","Code](http://www.python.org/dev/peps/pep-0008/).","Code:","Code](http://www.python.org/dev/peps/pep-0008/).","Code](http://www.python.org/dev/peps/pep-0008/)","3.","Code](http://www.python.org/dev/peps/pep-0008/)","3.","3.","Code](http://www.python.org/dev/peps/pep-0008/)","3.","3.","Code](http://www.python.org/dev/peps/pep-0008/)","3.","3.","Code](http://www.python.org/dev/peps/pep-0008/],"],"for Python's":["design."],"for Pythonic":["style"],"for [special":["methods](http://docs.python.org/2/reference/datamodel.html#special-method-names)"],"for [this":["issue](https://github.com/kytrinyx/exercism.io/issues/476))"],"for _flake8_.":["I"],"for _is_yelling":["that"],"for _word":["in"],"for `\"Fine.":["Be"],"for `(object)`":[":)"],"for `?`":["it"],"for `Anagram.word`":["in"],"for `Bob.hey`":["argument.","method","method?","argument."],"for `Bob.reaction_to`.":["Maybe"],"for `Bob`":["and"],"for `DNA.__init__`":["method","argument?"],"for `DNA`":["class"],"for `Message.content`?":["It's"],"for `None`":["at","with","or"],"for `True`":["values,"],"for ``DNA``'s":["base"],"for ```":["None"],"for ```.strip()```,":["you"],"for ```hey```":["as"],"for `elif`.":["It"],"for `end_verse`":["and"],"for `filter`":["you"],"for `finditer`":["now,"],"for `hey()`":["of","to"],"for `input.isupper()`":["twice."],"for `isQuestion`,":["there's"],"for `isShouting()`,":["you"],"for `is_shout()`":["first"],"for `is_silence`,":["have"],"for `is_silent`":["in"],"for `isupper`":["I","to"],"for `lower()`":["and"],"for `not":["message`"],"for `phrase_list`,":["but"],"for `rawinput`":["so"],"for `return":["FINE`"],"for `s":["=="],"for `self.word`":["for","just"],"for `str`":["to"],"for `str`.":["I"],"for `strand`":["being"],"for `string.translate`":["?"],"for `word":["is"],"for `word_count`,":["but"],"for `x`":["to"],"for a":["function","more","more","wider","wider","more","reason.","more","full","better","maintainer","while,","way","while,","replace","string.","moment,","text","format","sequence","few","`classmethod`)","simple","while,","user","new","beginner","lowercased","more","situation","nicer","string","problem","problem","dictionary","sort","comprehensive","long","spin,","variable,","more","homebrew","`has_letters`","human","empty","set","way","while","useful","blank.","yell,","string's","suffix","question,","few"],"for about":["the"],"for action":["in"],"for addressing":["him"],"for all":["upper","of","caps.","unknown","your","matches","the","the","responses","I","the","the"],"for an":["empty","empty","empty","easy","empty","empty","example).","analog","alpha","instance","appropriate","empty","empty","empty","empty"],"for anagram":["than","and","could","was"],"for anagram.":["Also"],"for anagrams":["or"],"for anagrams,":["and"],"for and":["against"],"for any":["statement.","validation),","feed"],"for anything":["bare","that"],"for approvals":["or"],"for argument":["is"],"for asking":["me"],"for basic":["stuff."],"for being":["vague.","vague."],"for blank":["message"],"for boolean":["methods","type."],"for both":["`None`","of"],"for building":["things"],"for c":["in","in"],"for cases.":["While"],"for ch":["in"],"for char":["in","in","checks."],"for checking":["if","if","if","if","for","of","the"],"for checks":["in"],"for clarification":["in"],"for class":["names).","names.","names.","names","names.","attributes","docstring!","wouldn't","wouldn't","wouldn't"],"for classes":["by","by","to"],"for classes.":["Most"],"for classifying":["that"],"for clear":["and"],"for code":["of"],"for collections,":["thanks"],"for comments":["on"],"for comments!":[":)"],"for comparing":["for"],"for compliance.":["Of"],"for composition":["(unittests"],"for computed":["attributes","attributes),"],"for conformance":["with"],"for confusion":["has"],"for constructing":["counter"],"for constructors":["but"],"for cool,":["idiomatic"],"for counting":["*all*"],"for creating":["a"],"for current":["program"],"for cyphers":["and"],"for dealing":["with"],"for decorators":["so"],"for default":["arguments"],"for determining":["the","his","a","whether"],"for dict":["creation."],"for different":["conditions","`Phrase`s."],"for discussion.":["DNA"],"for dispatch":["does"],"for dna,":["rna"],"for doing":["the"],"for each":["conditional","of","type","string.","case.","response","item","word","part","of","response.","of","word","call"],"for either":["choice."],"for emptiness":["[PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations)","you"],"for emptiness,":["[PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations)","[PEP8](http://www.python.org/dev/peps/pep-0008/)","[PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations)","you"],"for empty":["matches","strings.","strings"],"for encoding,":["do"],"for equality":["-","with"],"for every":["message.","condition","condition.","instance.","word"],"for everything":["except","so"],"for example":["-","if","the","Sentence","--","it","`is_question`","that"],"for example,":["and","polymorphism","`nucleotides_seq`","`nucleotides_seq`","`phrase`","``str``"],"for extension":["and"],"for extra":["documentation."],"for feedback":[":)"],"for feedback,":["@mohammad"],"for figuring":["out"],"for filtering":["but"],"for filters),":["but"],"for finding":["a"],"for first":["attempt!"],"for fitting":["in"],"for fn":["body"],"for for":["`Phrase.clean`?"],"for formatting":["each"],"for free.":["It"],"for functions,":["methods"],"for further":["development","simplify"],"for future":["use"],"for given":["words,"],"for giving":["me"],"for glueing":["parts"],"for going":["with"],"for good/bad":["numbers."],"for grade,":["names"],"for grammar":["to"],"for groups":["of"],"for habit.":["Checkout"],"for handling":["the"],"for having":["used","thought","thought"],"for hints,":["I've"],"for how":["tests"],"for i":["in"],"for identifying":["the"],"for identity":["testing,"],"for if":["there"],"for in":["`Message`"],"for including":["the"],"for inner":["DNA"],"for instance":["methods"],"for instance.":["There","Might"],"for interface.":["Now"],"for internal":["representation","functions.","use"],"for invalid":["numbers)"],"for is_question":["(see"],"for is_shouting,":["and"],"for issilence()":["and"],"for it":["to","here."],"for it)":["so"],"for item":["in"],"for its":["`__init__`"],"for itself.":["It's"],"for large":["strings"],"for larger":["problems"],"for length":["to"],"for line":["3.","6;","20."],"for lines":["13"],"for list":["comprehension?","of"],"for little":["real"],"for local":["variable"],"for loop":["to","-","and","version","in","to","you","written"],"for loop).":["I"],"for loop,":["in"],"for making":["method","this"],"for marking":["private_methods"],"for matching":["alphanumeric"],"for me":["it","is","to","-",".","it","it","and","in","to","and"],"for me,":["but","so:"],"for me.":["Python","Maybe","For","-","Is","I","It's","What","And"],"for message":["in"],"for method":["names.","naming](http://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables)."],"for methods":["like"],"for methods,":["parameters,"],"for methods.":["See"],"for missing":["keys."],"for modification":["(sort"],"for more":["generic","than","infos","awesomeness.","details.","details."],"for most":["of"],"for much":["flexibility,"],"for multiple":["conditions,"],"for my":["variable","liking","next","own","first"],"for n":["in","in"],"for name":["mangling"],"for named":["argument,"],"for new":["style","style"],"for nitpicking!":["Working"],"for nitpicks),":["I"],"for no":["good","obvious","good","real","obvious"],"for non":["public"],"for non-existent":["keys"],"for non-public":["methods"],"for normal":["statements."],"for normalization":["step."],"for not":["null","having"],"for nuceotides,":["though"],"for nucleotide":["in"],"for one":["style","style","function!","have"],"for open":["source!"],"for original":["word","word"],"for other":["languages."],"for our":["conversation"],"for over-engineering,":["i"],"for overdoing":["it."],"for passing":["in"],"for people":["who"],"for performing":["the"],"for phrase":["if"],"for pointing":["that","that","that","out","out","out","out","that"],"for predicates":["would"],"for presence":["first,"],"for private,":["but"],"for processing.":["If"],"for protected":["members"],"for public":["interface","interface","interface?"],"for publishing":["comment"],"for punctuation":["removal"],"for putting":["this"],"for python":["2.x.","2.7.3,"],"for question":["check","since"],"for questions,":["but"],"for r":["in","in"],"for rather":["than"],"for readability.":["Otherwise","Doesn't"],"for readability?":["With"],"for reference":["please"],"for responses":["and"],"for return":["statements**."],"for s":["in"],"for same":["exercise"],"for second":["approach"],"for seemed":["like"],"for sentences":["instead"],"for sets":["and"],"for short.":["This"],"for silence":["with","in","etc."],"for silence,":["because","because"],"for silence.":["It's","For"],"for simple":["string","programs"],"for single":["blank"],"for small":["examples"],"for some":["methods","reason,","relatively","ideas."],"for something":["as","more","like","that'll","completely"],"for sorting":["vs"],"for spaces":["after"],"for special":["cases.","uses","class"],"for speed":["-"],"for splitting":["strings"],"for ss":["in"],"for storing":["reactions."],"for string":["being","variables"],"for string-suffixes":["using"],"for string.":["there"],"for strings":["`something.isupper()`","like"],"for strings:":["http://docs.python.org/2/library/stdtypes.html#string-methods"],"for strings;":["it's"],"for students":["of"],"for substring":["matches"],"for such":["simple","a","purposes","easy","easy","a","a","things","a"],"for sure,":["use"],"for symmetry,":["but"],"for taking":["the","interest.","the"],"for test_only_numbers":["(`"],"for testing":["the","object","strings"],"for that":["and","case","parameter.","in","is","and","particular","matter.","purpose.","exception,","if","link"],"for that!":["I"],"for that)":["the"],"for that,":["but"],"for that:":["http://stackoverflow.com/a/1695250/477048"],"for the":["feedback","rna","tips.","tips.","shouting...","wrong","feedback","code.","catchall.","catchall,","original","life","second","argument","helpful","functions","requirements.","comments.","problem","`==","feedback.","feedback.","`isEmpty`,","request","message","\"sentence\"","message","first","parameter?","conversation's","check","Python","feedback","feedback!","analysis","sake","feedback","feedback.","sake","suggestion.","storing","tip.","nucleotides?","early-return","comments!","next","feedback.","second","helper","nucleotides.","`string`","conditions","Phrase","future,","code","tip!","\"Sure.\"","\"Sure.\"","single-line","string","feedback!","regexps","nit:","parameter","other","stdlib's","review!","separate","fun,..","feedback.","nitpick","module's","`str`","confirmation","pythonic","code","simplest","exercise","sake","feedback","builtin","builtin","feedback,","counting.","predicate-&gt;answer","feedback.","str","`str`","`sorted(seq)`","dna","concept","feedback,","trivial","entire","sake","reader","advice","advices","win","language.","`collections`","`str`","pythonic","more","record:","current","wordcount,","tip,","\"predicate","feedback,","'minimal","feedback.","sake","input","functional-like","thorough","docstrings","\"messy\"","predicates,","loop-based","contents","feedback.","review","comments.","constructor.","feedback!","class","comments!","internal","conditionals","nitpicks!","discussion","purpose","\"shouting\"","database","upper","nits,","link,","info!","same","naming","others.","feedback!","feedback.","class,","review.","second","feedback!","feedback.","init","tips!","great","silence","shout","default","comment!","feedback,","original","advice","link,","reader.","various","if's","words,","test?","test","pointer.","various","parameter","comments!","final","feedback.","first","first","first","lack","feedback.","great","empty","advice,","dict","logging","heads","heads","most","rest","\"community.\"","endswith","suggestion,","defaultdict","feed","input","actual","helpful","'chill","*presence*","nitpick.","missing","feedback.","feedback,","class,","method","suffix","helpful","different","specifically","string","suffix","several","texts","predicate,","silence","shouting.","review.","isupper()","PEP8","note!","`continue`,","answers.","recommendation!","help!","final","shout","feedback.","second","remarks","entire"],"for their":["integer"],"for them":["to"],"for them,":["it"],"for these":["comments","two","one-liners"],"for things":["that"],"for this":["particular","exercise:","exercise","simple","kind","example","check","particular","one.","exercise","exercise","example.","example.","assignment.","case.","solution.","kind","kind","too.","problem,","drilled-down","BTW?","exceptional","exercise.","and","assignment.","case.)","feedback,","kind","feedback,","particular","case.","example","case.","file","one","exercise","problem...).","problem.","reason","a","particular","simple"],"for this,":["accept","or","but"],"for this.":["It"],"for those":["other","notes."],"for thymidine.":["In"],"for tips":["and"],"for tokenizing":["than"],"for transcribing":["DNA"],"for translation":["along"],"for trivial":["problem"],"for two":["checks."],"for uppercase":["seems"],"for uppercase,":["so"],"for usage":["is"],"for using":["the","single"],"for validity":["not"],"for value":["object."],"for various":["reasons,"],"for w":["in","in","in"],"for ways":["to","to"],"for what":["the","ought","you're","you","is"],"for whatever":["the","function"],"for when":["you"],"for whitespace":["after","only"],"for word":["in","anagram.","in","in","in","in","in","in","in"],"for words.":["I"],"for wrong":["input"],"for x":["in","in","in","in","in","in","in","in","in"],"for x0,x1":["in"],"for yelling":["using","before"],"for yelling,":["because"],"for yelling.":["One","This"],"for yelling/":["screaming"],"for you":["to","as","as","since","to","on"],"for you,":["as"],"for you.":["From","Some"],"for you?":["With"],"for your":["feedback,","suggestion","comment","helpful","hints,","good","other","tips.","explanations,","comments,","feedback.","clarification","advices.","previous","feedback.","input.","comment!","comments","regular","comments!","feedback.","attention","attention"],"for, I'm":["divided"],"for, and":["why.","what"],"for, as":["an"],"for, is":["it?"],"for. (like":["`isQuestion`,"],"for. For":["example"],"for. Not":["quite"],"for. Python's":["ability"],"for. Since":["these"],"for/against adding":["the"],"force FWIW),":["and"],"force anything":["to"],"force conversion":["to"],"force filter":["result"],"force it":["to"],"force me":["to"],"force on":["you"],"force the":["result"],"force you":["into"],"forced into":["it."],"forced solution,":["but"],"forced to),":["I"],"forces me":["to"],"forefront, there":["was"],"foremost, in":["my"],"foresee a":["case"],"forget about":["`endswith`."],"forget how":["to"],"forget the":["basics","docstrings","docstrings;"],"forget to":["document","change"],"forgetting that":["Counter"],"forgot `methodonce`":["there."],"forgot about":["one","```.isupper()```,"],"forgot almost":["everything"],"forgot in":["my"],"forgot the":["naming"],"forgot to":["remove","change","answer","mention","subclass","modify","change","delete","remove","do"],"forgot! I":["like"],"forgotten about":["that"],"forgotten some":["of"],"forgotten), rendering":["lines"],"form (ie:":["'words'"],"form Python":["2"],"form `if":["..."],"form `object`":["([even"],"form and":["the"],"form it":["is"],"form it's":["a"],"form may":["pass"],"form of":["[self","comments/docstrings","a","the","what","list"],"form outside":["should"],"form passes":["test"],"form read-me":["file.","description"],"form to":["do"],"form was":["enforced","enforced"],"format method":["of"],"format parameters":["and"],"format specification":["seem"],"format strings":["need"],"format your":["code."],"format_string to":["reflect"],"formatted word,":["so"],"formatting -":["return"],"formatting \u003c-":["ding"],"formatting all":["into"],"formatting and":["naming"],"formatting each":["word,"],"formatting in":["new","new","one"],"formatting is":["not","a","better,"],"formatting looks":["more"],"formatting readable,":["and"],"formatting sins.":["I'm"],"formatting so":["that"],"formatting standards":["can"],"formatting words":["would"],"formatting. CamelCased":["names"],"formatting. Though":["I"],"formatting/naming can":["be"],"formatting/naming standards":["can"],"formed by":["replacing"],"former reads":["better."],"formula to":["get"],"formulate_prioritised_reply(), and":["that"],"formulating Bob's":["replies"],"forth I":["decided"],"forth unable":["to"],"forward -":["but"],"forward and":["readable."],"forward solution.":["It"],"forward thinking":["optimization"],"forward to":["reading"],"forward using":["standard"],"forward, great":["variable"],"forward, you":["really"],"found \"Counter\"":["which"],"found ```endswith()```":["too"],"found `str.isupper`":["by"],"found `string.punctuation`":["but"],"found a":["function","better"],"found after":["testing."],"found an":["older"],"found enough":["on"],"found here:":["http://stackoverflow.com/a/54873/477048","http://stackoverflow.com/a/54873/477048"],"found in":["Python","Python","Python","the","Python","python","Python","DNA"],"found it":["more","pretty","more","really"],"found out":["about","from"],"found that":["unnecessary"],"found the":["method"],"found this":["thread:"],"found translate":["a"],"found using":["operator"],"found version":["1"],"found while":["reviewing"],"found. So":["it's"],"four cases":["are"],"fragile (in":["particular"],"framework and":["discrete"],"framework-like stuff.":["The","The"],"free to":["file","ignore","express","express","comment."],"free. It":["may"],"frequently skip":["writing"],"frequently. Other":["that"],"friend linked":["me"],"friends' updates":["here"],"from 10":["lines"],"from 14":["to"],"from Bob":["who"],"from Bob's":["responses."],"from Brandon":["Rhodes","Rhodes","Rhodes"],"from C),":["so"],"from DNA":["string"],"from Europe":["and"],"from Iteration":["1"],"from Nit":["#1."],"from OO":["paradigm"],"from PEP8":["which","comes"],"from PHP":["has"],"from Python":["code."],"from Ruby":["1.8,"],"from Ruby,":["where"],"from String":["to"],"from T":["to"],"from Zen":["of"],"from [The":["Naming"],"from `Counter()`":["object."],"from `Enum`.":["So"],"from ```":["FormattedWord"],"from ```object```":["in"],"from `collections`":["for","and","would"],"from `filter`.":["One"],"from `functools`":["so"],"from `hey()`":["might"],"from `hey`.":["Makes"],"from `object`":["to","(look","to","(read","(hysterical","or"],"from `object`.":["Research","Hence","See:"],"from `object`](http://stackoverflow.com/a/54873/314685)":["(even","(even","(even","(even","(even","(even","(even","is","is","is","because"],"from `re.findall`":["because"],"from `re.split`":["and"],"from `re`":["module"],"from `str`":["both"],"from `string`,":["it's"],"from `word_count`":["and"],"from a":["performance","refactor.","Java","routine,","visual","given","readability/organization","technical","Python","string","LOT","string","command","dict"],"from accompanying":["read-me","read-me"],"from an":["empty"],"from anagram":["import"],"from another":["submission,","module,"],"from being":["implemented","accidentaly","accidentaly","used."],"from bob":["import"],"from clojure":["how"],"from collections":["import","import"],"from collections.":["I"],"from command":["line"],"from createroboname()":["to"],"from dna":["to"],"from do_count_words***`":["in"],"from doing":["this"],"from each":["if"],"from external":["access."],"from formulate_prioritised_reply(),":["and"],"from good":["`word`"],"from http://docs.python.org/2/library/collections.html":["module."],"from inherited":["class."],"from intent-revealing":["names."],"from it":["was"],"from it.":["To"],"from iteration":["1."],"from line":["14."],"from map().":["Ideas?"],"from me.":["Take"],"from mine,":["but"],"from my":["point","point","native"],"from now),":["you'd"],"from object,":["like","otherwise"],"from object.\"?":["This"],"from one":["I","of","language","to"],"from other":["modules,","people"],"from outside.":["But"],"from precedence":["rules,"],"from public":["to"],"from reading":["your"],"from response":["is"],"from response?":["Statement"],"from responses.":["Now","Also,"],"from running":["`is_question`"],"from someone":["else","else."],"from standards":["in"],"from statement":["-&gt;"],"from string":["class'"],"from strings.":["I"],"from that":["list."],"from that,":["some"],"from that.":["We"],"from the":["standard","other","class.","additional","fact","pattern","actual","conditionals,","input","instance,","original","list.","regexp","soruce","class","\"predicate\"","ordering.","bot's","implementation","last","technical","standard","input","beginning","specs","object","object","object","object","object","object","object","object","object","Pythonesque","object","beginning","initialization","previous","boilerplate","main","tuple","code","code","Ruby","naming","back.","unit","reader","last","collections","counting","previous","input.","case","Ruby","first"],"from them.":["If"],"from this":["exercise"],"from two":["distinct"],"from what's":["already"],"from when":["I"],"from your":["post.","code."],"from, to)":["instead"],"front in":["one"],"front. Also,":["use"],"frustration thing":["I"],"fugly and":["totally"],"full OO":["with"],"full disclosure":["-"],"full doc":["about"],"full names.":["It"],"full of":["whitespace?"],"full phrase":["then"],"full potential":["?"],"full spec":["of"],"full string,":["not"],"full verse":["which"],"full-blown DSL":["but"],"fully by":["[Single"],"fully comply":["to"],"fully featured":["templating"],"fully initialized":["with"],"fully represents":["DNA","DNA"],"fully satisfy.":["If"],"fully understand":["the"],"fun :(":[":)"],"fun :)":["I"],"fun ;(":["Thanks"],"fun to":["see"],"function (builtin)":["and"],"function (no":["access"],"function \u003ca":["href='http://docs.python.org/2/library/stdtypes.html#str.isupper'\u003eisupper()\u003c/a\u003e"],"function Bob":["is"],"function _clean_phrase":["to"],"function `sorted`":["on"],"function actually":["does"],"function and":["you","segregated","the","wrapping","the","use"],"function application.":["There"],"function are":["nuisances"],"function as":["well?"],"function because":["there's","that's"],"function body":["into"],"function built":["into"],"function call":["perhaps)","form","form"],"function calls":["and","per"],"function choice":["to"],"function cleans":["things"],"function could":["just"],"function declaration.":["I"],"function definition":["according"],"function definition,":["see"],"function definitions":["become"],"function defs,":["you"],"function do":["the"],"function does":["the"],"function doesn't":["have"],"function doing":["the"],"function for":["every","every","it)","the","that,","the","transcribing","checking","each"],"function from":["String","a"],"function has":["its"],"function in":["`Anagram`.","Python,"],"function instead":["of"],"function into":["external"],"function is":["not","called","useless","useless","unnecessary","enough.","doing","certainly","`to_rna`,","useful,","not","too","not","called:"],"function is_exclamation(),":["I"],"function is_question(),":["you"],"function it's":["applied"],"function itself":["is"],"function later":["without"],"function name":["with","is","`to_rna`","conventions,"],"function name.":["Try"],"function names":["is","are"],"function naming":["makes"],"function of":["its"],"function on":["line"],"function or":["method","method","method's","method","method"],"function parameters":["like"],"function passed":["to"],"function pointers":["?"],"function recursively":["(inside"],"function so":["there"],"function split":["into"],"function than":["making"],"function that":["I","returns","takes","operates","just","returns","would","is"],"function to":["make","a","remove","a","make","make"],"function using":["named"],"function were":["more"],"function where":["it"],"function while":["still"],"function with":["a","a","many","an"],"function would":["do","do."],"function you":["put"],"function! If":["anything"],"function's arguments).":["In"],"function) has":["nothing"],"function) you":["could"],"function, I":["was"],"function, and":["I","even","make"],"function, but":["I","I","that's","the"],"function, is":["it?"],"function, it":["is"],"function, it's":["not"],"function, per":["last"],"function, that":["could"],"function, which":["would"],"function. A":["class","more"],"function. Also":["in"],"function. I":["wanted","think","would","made"],"function. That":["way"],"function. Then,":["if"],"function. There's":["no","one"],"function. This":["is","way","may"],"function. Try":["calling"],"function. Very":["clean."],"function. With":["it"],"function. not":["required"],"function/method argument":["lists"],"function? Just":["a"],"function? What":["purpose"],"function](http://docs.python.org/2/library/functions.html#input), so":["I"],"functional and":["OO.","can"],"functional approach":["in","is"],"functional dispatch":["mechanism","style"],"functional language":["neither."],"functional programming":["as","background","approach","and"],"functional style":["for","(though"],"functional than":["object-oriented"],"functional version":["is"],"functional vs":["object-oriented"],"functional way":["with"],"functional, for":["example."],"functional-like dispatch":["mechanism,"],"functionalities of":["``list``."],"functionality can":["be"],"functionality if":["it"],"functionality in":["the"],"functionality to":["remove"],"functionality without":["having"],"functionality). Current":["tests"],"functionally \"length":["of"],"functionally equivalent":["for","to"],"functions (IOW":[":"],"functions (and":["methods)"],"functions (e.g.":["`bob`)"],"functions (plain":["good","old"],"functions (until":["I"],"functions -":["`endswith()`"],"functions /":["closures"],"functions I":["mentioned"],"functions and":["methods","constants","not","methods","methods","methods","methods","classes"],"functions are":["objects","not","objects","ok","OK","called","objects","objects","well","clear"],"functions as":["well...","calculating","variable"],"functions because":["they're"],"functions being":["first-class"],"functions directly?":["Seems"],"functions do":["it"],"functions enhance":["understanding"],"functions floating":["around"],"functions for":["identifying"],"functions from":["strings."],"functions get":["re-defined"],"functions has":["a"],"functions here":["will"],"functions in":["the","the","modules,","iteration","module","module","the","`funtools`"],"functions increase":["the"],"functions inside":["a"],"functions instead":["of","of"],"functions into":["the","a"],"functions is":["discouraged"],"functions isupper":["and"],"functions like":["`yelling`,","`is_question()`,"],"functions make":["for","sense"],"functions members":["of"],"functions methods":["of"],"functions more":["verbose."],"functions multiple":["times"],"functions next":["to"],"functions not":["being"],"functions on":["the","10","10","strings"],"functions only":["makes"],"functions operate":["on","on"],"functions or":["methods","methods","methods,","to"],"functions outside":["the"],"functions rather":["than"],"functions really":["so"],"functions short":["too,"],"functions should":["be","take"],"functions static":["methods."],"functions that":["only","talk","could","don't"],"functions to":["obviate","separate","make","make","express","methods","make","minimize","match"],"functions up":["with"],"functions use":["instance"],"functions will":["use,","indeed"],"functions with":["descriptive"],"functions would":["make"],"functions you":["could","use"],"functions) are":["ok"],"functions, and":["functions"],"functions, because":["it's"],"functions, in":["which"],"functions, makes":["the"],"functions, methods":["and"],"functions, not":["methods,"],"functions, so":["instead"],"functions, to":["make","make"],"functions, which":["are"],"functions, which,":["beside"],"functions, you":["should"],"functions. Also,":["they're"],"functions. Alternatively,":["you"],"functions. And":["your"],"functions. Any":["of"],"functions. Currently,":["the"],"functions. Do":["you"],"functions. Don't":["have"],"functions. Have":["you"],"functions. I":["should"],"functions. Some":["would"],"functions. This":["seems"],"functions/methods may":["be"],"further (hints:":["use"],"further imporved":["so"],"further shortened":["by:"],"further simplify":["the","your","if"],"further summarize":["you"],"further, it's":["very"],"further. From":["my"],"further. Take":["a"],"future calls":["on"],"future developer":["who"],"future if":["that"],"future maintenance":["and"],"future revisions":["if"],"future this":["would"],"future use":["is"],"future, I'd":["recommend"],"future, consider":["getting"],"future, it":["would"],"future, the":["decision"],"future, to":["refactor"],"future-proof coding,":["would"],"future-you who":["needs"],"gain (I'd":["definitely"],"gain (given":["how"],"gain an":["understanding"],"gain you":["when"],"gain. But,":["yes,"],"gaming the":["tests."],"garanteed to":["be"],"garanty name":["uniqueness"],"garbage collection.":["It"],"gathering input,":["doing"],"gave a":["link","sweet"],"gave it":["a","`\"some"],"gem and":["the"],"gem, as":["there"],"gem, which":["is"],"gem. Both":["fetch"],"general coding":["style:"],"general for":["the","this"],"general implementation":["(a"],"general it":["would"],"general meaning":["so"],"general note":[":"],"general rule":["in"],"general rule,":["we"],"general solution":["IMO"],"general the":["`to_rna`"],"general where":["a"],"general) so":["I'm"],"general) to":["significantly"],"general, I":["think"],"general, checking":["inputs"],"general, methods":["`@margarita`"],"general-purpose datastructures":["are"],"generalizable than":["that,"],"generalizable](http://exercism.io/submissions/521f5b4f090dbbe6fd000238), but":["this"],"generally a":["bad"],"generally avoid":["this"],"generally be":["organized"],"generally can":["be"],"generally discouraged.":["Consider"],"generally good":["practice"],"generally improves":["understandability"],"generally make":["it"],"generally preferred":["to"],"generally reserved":["for","for","for","for"],"generally shouldn't":["happen"],"generally sort":["has"],"generally standard":["of"],"generally the":["code"],"generally try":["to"],"generate all":["names"],"generate the":["inverse"],"generated at":["initialize"],"generating all":["names","possible"],"generator ()":["instead"],"generator after":["all"],"generator comprehension":["is"],"generator currently":["used"],"generator expression":["is","on","if","or"],"generator expressions":["or"],"generator from":["that"],"generator in":["the"],"generator method,":["and"],"generator, which":["is"],"generator. I":["like"],"generators could":["be"],"generators may":["seem"],"generators. Taking":["into"],"generic and":["doesn't"],"generic as":["I"],"generic class":["such"],"generic coding":["styles."],"generic dispatch":["/"],"generic memoization":["simply"],"generic memoizer":["would"],"generic so":["they"],"generic to":["my"],"generic way":["that"],"generic, but":["the"],"geneticists can":["run"],"genuine \"is":["a\""],"get a":["count","list","similar","simple","return","little","whole","member"],"get all":["words"],"get anything":["else."],"get around":["that,","that?"],"get at":["the","them"],"get back":["to"],"get base":["(as"],"get better":["than"],"get created":["each"],"get discussion":["started."],"get exception":["here."],"get expensive.":["With"],"get for":["being"],"get here,":["something"],"get idea":["about"],"get into":["the"],"get it":["to","done."],"get it.":["Feedback"],"get lost":["when"],"get more":["dry.","in","out"],"get quick":["help"],"get re-defined":["each"],"get re-inlined":["after"],"get rid":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"],"get rif":["of"],"get smth":["like"],"get something":["submitted."],"get that":["attributes"],"get the":["hell","picture","job","phrase","\"end\"","first","intent","same","Python","tests","formatting","list","nucleotides","equivalent","functions","benefit","formatting"],"get there).":["Knowing"],"get things":["100%"],"get this":["sort","feedback."],"get to":["the","those","that"],"get used":["to","to"],"get why":["you"],"get you":["to","started"],"get() with":["a"],"get. The":["only"],"get_verse_components() to":["use"],"get_words, which":["would"],"getattr() instead":["of"],"gets \"right":["to"],"gets a":["bit"],"gets approved,":["you"],"gets different":["`self`"],"gets easier":["in"],"gets huge":["and"],"gets rid":["of"],"gets the":["job","job"],"gets used":["in"],"gets, and":["it"],"getter and":["setter","setter"],"getter here":["overkill?"],"getter to":["the"],"getter, not":["a"],"getter? Also,":["something"],"getters and":["setters"],"getting `None`":["(and"],"getting a":["bit","bit"],"getting at":["with"],"getting into":["the","a","a","the","the","the","the","the","the","the","the","the","the","the","the"],"getting quite":["heavy."],"getting rather":["long"],"getting read":["of"],"getting rid":["of","of","of"],"getting some":["new"],"getting the":["proper","tendency"],"getting this":["based"],"getting too":["carried"],"getting wrong":["results."],"getwords for":["a"],"git repository":["and"],"give a":["name","much","name","definitive"],"give in,":["added"],"give it":["a","a","a"],"give location":["for"],"give nucleotides":["names,"],"give priority":["to"],"give reasons":["for"],"give the":["tests","encoding"],"give them":["names."],"give us":["an"],"give you":["one:","a","any","a","IndexError","IndexError","the"],"given DNA,":["actually."],"given by":["the"],"given context.":["The"],"given directly":["in"],"given grade":["would"],"given in":["the"],"given intent-revealing":["names"],"given line":["length"],"given longer":["names."],"given module,":["the"],"given orders,":["told"],"given tests":["pass."],"given that":["these","those","string","the"],"given the":["tests,","way"],"given time,":["I"],"given to":["any","the"],"given words,":["in"],"gives a":["name"],"gives an":["indication"],"gives class":["client","client"],"gives compile":["time"],"gives information":["about"],"gives the":["impression","constructor"],"gives yelling":["higher"],"gives you":["a","a","a"],"giving a":["presumably"],"giving me":["a"],"giving names":["to"],"giving nucleotides":["more"],"giving your":["self"],"glad you":["thought"],"glance but":["I"],"glance, but":["I"],"glitch. There":["is"],"global namespace":["like"],"global namespace.":["I"],"global nature":["of"],"global variables":["for"],"global, I":["don't"],"glueing parts":["together"],"glues strings.":["Reduce"],"gnarly case":["statement."],"go a":["long","little"],"go against":["pep08"],"go back":["to"],"go count":["indicies"],"go down":["=)"],"go for":["me.","me.","second","over-engineering,","me.","the"],"go from":["one"],"go have":["a"],"go in":["another","that"],"go make":["out"],"go off":["for"],"go on":["the"],"go some":["way"],"go that":["way,"],"go through":["`__class__`"],"go thru":["the"],"go to":["the","the","the"],"go up":["and"],"go with":["a","either"],"go, but":["it"],"go-to method":["of"],"goal of":["counting","this","this"],"goal of:":["`if"],"goal to":["be"],"goal was":["not","to"],"goal, but":["the"],"goal. But":["I"],"goals were":["a"],"gods of":["the"],"goes for":["your"],"goes to":["show"],"goes with":["which",":"],"goes. Updated.":["Thanks"],"going and":["looking"],"going back":["to"],"going for":["`finditer`","the","a","something"],"going fully":["by"],"going into":["too"],"going on":["in","here","to","is","in","and","in","in","in","in","with","with"],"going on\"":["in"],"going on.":["When","See"],"going on?":["I'd"],"going the":["python"],"going through":["this"],"going to":["unlock","be","pass","do","think","approve","quote","pass","take","lead","go","change","have","cope","keep","convert","write","be","tell","cope","be","have","use","be","be","be","be","use","change","have","try","call"],"going with":["one"],"going wrong,":["because"],"gone a":["bit"],"gone ahead":["and"],"gone from":["the"],"gone with":["just","either"],"good -":["just","simple"],"good ...":["can"],"good Python":["API"],"good `word`":["and"],"good about":["all"],"good already":["Just"],"good already,":["although"],"good already.":["So","I"],"good although":["I"],"good and":["clear","simple.","precise"],"good approach.":["Why"],"good as":["anything"],"good call":["on"],"good call.":["one"],"good characters":["explicitly,"],"good choice,":["but"],"good code":["for"],"good comments":[":)"],"good coverage":["on"],"good crash":["course"],"good design":["choice","to"],"good enough":["to","to","to","to","for","reason."],"good fit":["for"],"good for":["constructors","readability.","larger"],"good habit":["to","to","to","to","to"],"good idea":["as","-","for","for","using","to"],"good idea,":["one","since","too,"],"good if":["they"],"good in":["a","general."],"good job":["on"],"good job.":["Like"],"good name":["for","in"],"good name.":["I've"],"good names":["for"],"good news":["is"],"good ok,":["but"],"good old":["module-level"],"good or":["not."],"good otherwise":[":)"],"good overall!":["I"],"good parts":["of"],"good point":["though","-","for","for","for"],"good point,":["thanks","and","removing"],"good point.":["I","it"],"good points.":["Thanks."],"good practice":["for","to","to","to","to","to"],"good practise":["to"],"good question.":["That"],"good read.":["You","You","You","You"],"good reason":["to","for","to"],"good reason,":["looking"],"good reason.":["If"],"good reference":["to"],"good solution.":["I"],"good stackoverflow":["elucidation"],"good starting":["point."],"good style":["there","\"preparing\""],"good sub-classing":["attributes"],"good suggestions":["in"],"good support":["for"],"good tdd":["practice"],"good that":["you're","you","you're"],"good thing":["is"],"good thing...":["I"],"good to":["me!","me,","me!","move","me","me","me.","me","me.","go","me.","leave","make","keep","me.","know.","know).","know","think","me.","me.","me."],"good usage":["of"],"good use":["of","of","of","of","of"],"good variable":["names,","names,"],"good way":["to","to","to","to","to"],"good win":["in"],"good work!":[":)"],"good! Have":["you"],"good! However,":["you're"],"good! Only":["thing"],"good! Two":["minor"],"good)? The":["question"],"good, I'm":["voting"],"good, although":["idiomatic"],"good, and":["using"],"good, but":["there's","consider","you","I"],"good, here's":["a"],"good, how":["do"],"good, however,":["to"],"good, intention":["revealing"],"good. Depending":["on"],"good. Have":["you"],"good. I":["like"],"good. In":["future,"],"good. It":["is"],"good. It's":["possible"],"good. Minor":["point:"],"good. One":["thing"],"good. Since":["you're"],"good. The":["translation"],"good. Two":["things"],"good. You're":["reinventing"],"good/bad numbers.":["Any"],"google 'new-style":["classes'"],"google for":["\"alphagrams\"."],"google, but":["if"],"gosh. This":["is"],"got 0":["as","as","as"],"got None,":["I"],"got [mine](https://gist.github.com/7814969)":["today."],"got a":["good","couple","message","couple"],"got an":["error"],"got bogged":["down"],"got distracted":["by"],"got from":["[The"],"got here":["(and"],"got it,":["I"],"got it.":["I"],"got many":["problems"],"got me":["thinking","on"],"got no":["idea"],"got on":["the"],"got pretty":["big"],"got pulled":["out"],"got pylint":["in"],"got so":["used"],"got taken":["out"],"got the":["idea","structure"],"got there":[";)"],"got this":["right,"],"got three":["small"],"got to":["point","go!"],"got what":["you"],"gotcha from":["C),"],"gotcha here":["-"],"gotta do":["a"],"gotta write":["it,"],"gotten around":["to"],"gotten away":["without"],"gotten with":["respect"],"grabbed the":["most"],"gracefully, so":["if"],"grade would":["then"],"grade, names":["in"],"grades must":["be"],"grain of":["salt,"],"grammar and":["syntax."],"grammar so":["I"],"grammar to":["make"],"grammar, it's":["also"],"granular separation":["of"],"grasp I":["think."],"grasp the":["purpose"],"grate that":["you","now"],"grateful for":["your"],"great (\"looks":["great\"ed"],"great as":["it"],"great benefit":["to"],"great boost":["with"],"great built-in":["string"],"great catches!":["The"],"great comments,":["especially"],"great deal":["to"],"great design":["choice"],"great examples":["(it's"],"great extent":["I"],"great for":["first"],"great idea.":["I"],"great improvement,":["but"],"great name":["–","for"],"great question.":["The"],"great so":["far."],"great suggestions":["@mabel."],"great suggestions.":["Those"],"great that":["you've","you","you","you","you"],"great tip!":["Because"],"great to":["keep","me!","get","me.","me."],"great up":["until"],"great use":["of"],"great variable":["names,"],"great! I":["didn't"],"great! I'm":["mainly"],"great\" since":["you've"],"great\"ed by":["you"],"great, I":["just"],"great, about":["the"],"great, because":["there"],"great, but":["the","do","seems"],"great. However,I'm":["just"],"great. I":["am","like"],"great. The":["only"],"great. Using":["a"],"greatly _reduce_":["readability"],"greatly enhance":["readability."],"greatly improved":["(imho)"],"greedily always":["select"],"greeting or":["''`."],"greeting? Or":["an"],"greeting``` may":["be"],"grew from":["here."],"gritty logic":["to"],"grok your":["code"],"gross, its":["literally"],"ground that":["reads"],"group functions":["in"],"group of":["people"],"group them":["together","together"],"grouped inside":["one"],"grouped on":["the"],"grouping of":["sticking"],"grouping parentheses":["in","in"],"groups (or":["implementing"],"groups for":["processing."],"groups of":["word"],"growing on":["me"],"guaranteed in":["Python,"],"guard ```if":["input:```"],"guard against":["unlikely","inaccurate"],"guard clause":["is."],"guard on":["line"],"guard people":["like"],"guard the":["boarders"],"guards like":["the"],"guess I":["didn't","should","could","need","forgot"],"guess I'll":["mull"],"guess Py":["3.x"],"guess `str.isspace()`":["would"],"guess `translation_table`":["should"],"guess after":["the"],"guess it":["doesn't","needs"],"guess it's":["fine."],"guess re.finditer()":["would"],"guess we":["can"],"guess with":["a"],"guess you":["mean","could","could"],"guess you're":["using"],"guess! Once":["more"],"guessing that":["you"],"guessing you":["saw"],"guidance with":["regards"],"guide could":["be"],"guide recommends":["two"],"guide, aka":["PEP8."],"guideline for":["method"],"guidelines aka":["PEP8."],"guidelines, aka":["PEP8."],"guidelines. Anyway,":["looks"],"guidelines. Consider":["getting"],"guides. I":["like"],"guiding principles":["for"],"guru myself,":["but"],"guy I":["am."],"guy, and":["I'm"],"habbit picked":["up"],"habit I'm":["going"],"habit of":["using","using","using","using","using","using","adding","using","using","using","using","using","using","using","using","using","using"],"habit on":["my"],"habit to":["use","document","break.","develop.","develop.","develop.","resort","develop."],"habit\" from":["Ruby"],"habit. Checkout":["\"Counter()\""],"habit. I":["do"],"habits in":["my"],"habits. The":["rest"],"hack out":["of"],"hacky and":["crazy,"],"hacky to":["me,"],"hacky, as":["does"],"hacky, but":["I"],"had \"too":["much"],"had `word_count`":["(maybe"],"had a":["lot","list","sanity","`response","single","pylint","feeling","feeling","kind"],"had already":["returned."],"had appropriate":["responses"],"had been":["ported","writing"],"had before":["(see"],"had considered":["that"],"had factored":["out"],"had great":["examples"],"had hit":["on"],"had hoped":["Python's"],"had it":["as","in","typed"],"had more":["methods"],"had never":["before"],"had no":["idea."],"had not":["yet"],"had offered":["a"],"had one":["return."],"had problems":["with"],"had similar":["problems"],"had some":["repetitive"],"had that":["long"],"had the":["same","original","logic","DNA","same","logic"],"had thought":["I"],"had to":["convert","use","maintain","code","be","check","convert","test","do","download","use","edit","make","get"],"had too":["much"],"had two":["str"],"had unicode":["source"],"had used":["four."],"had was":["regarding"],"had wished":["the"],"had written":["this"],"hadn't considered":["the"],"hadn't realized":["that"],"hadn't seen":["any"],"hadn't thought":["of","about","about"],"half a":["dozen","dozen"],"half the":["work.","number"],"half way":["with"],"hammer liberally":[":)"],"hand I":["agree"],"hand `Beer`":["class"],"hand it's":["not"],"hand side":["of"],"hand, moving":["the"],"hand, my":["`ANSWERS`"],"hand, shows":["the"],"hand, there":["may"],"hand, this":["simple"],"handed a":["file"],"handle (for":["example,"],"handle `None`":["values.","values"],"handle `Whatever`":["case."],"handle `is_upper`.":["Probably"],"handle a":["`None`","shouty-question"],"handle analysis":["of"],"handle fall":["through"],"handle input":["that"],"handle it":["in"],"handle non":["ascii"],"handle of":["text"],"handle plain":["ascii"],"handle questions":["and"],"handle recognizing":["what"],"handle that":["aspect,","problem","problem"],"handle the":["case","`None`","spaces","empty","entire","umlaut"],"handle this":["was","in"],"handle this,":["rather"],"handle unicode":["as"],"handled differently,":["depending"],"handled with":["more"],"handling None":["values,"],"handling exceptions.":["It's"],"handling more":["uniform"],"handling of":["the","questions"],"handling that":["is"],"handling the":["`\"Whatever.\"`","three"],"handling two":["versions"],"handling: I'm":["catching"],"hands of":["Python's"],"hands! thanks":[";)"],"handy because":["you"],"handy methods":["to","to","to","for"],"handy things":["in"],"handy. I":["agree"],"handy. Of":["course"],"happen if":["you","you","the","someone","the","two"],"happen in":["well"],"happen soon,":["and"],"happen to":["be"],"happened to":["include"],"happening in":["your","the"],"happening once":["you"],"happening with":["the","those"],"happening, even":["to"],"happens I":["was"],"happens before":["this"],"happens if":["you","you"],"happens next?":["Do"],"happens then":["(return,"],"happens, especially":["not"],"happily translate":["it"],"happy about":["this"],"happy to":["help"],"happy with":["having","that","it","having","that,","the","the","this.","this"],"hard enough":["about"],"hard habit":["to"],"hard it":["is"],"hard to":["wrap","parse.)","remove","buy","understand.","figure","follow,","read,","summarize,","get"],"hard, makes":["the"],"hard-code the":["name"],"hard-coded default.":["I"],"hard-coding the":["class","default"],"hardcode the":["class"],"hardcoded in":["the"],"hardcoded into":["`hey()`."],"hardcoding precedence":["rules"],"hardcoding the":["character","predicates"],"harder for":["a"],"harder than":["it"],"harder to":["understand.","maintain","understand.","understand","type","follow","understand."],"hardest to":["test"],"hardwired in":["`.hey()`.","every"],"harsh (if":["it"],"has \"unbound":["methods\","],"has **explicit":["else"],"has **trailing":["comma**"],"has 12":["tests."],"has a":["nice","method","false","false","false","`tuple`","built-in","false","false","false","`str.isupper()`","an","false","false","false","false","pretty","false",".isupper",".isupper()","false","false","false","false","Unicode","different","built","lot","very","code","special","hint"],"has absolutely":["no"],"has actually":["come"],"has all":["the"],"has already":["been"],"has always":["bugged"],"has an":["`else`","`else`"],"has any":["use.","lower"],"has been":["reduced,","deprecated:","deprecated"],"has changed":["since),","in","since"],"has comments\"":["habits."],"has complexity":["of"],"has conversation":["with"],"has couple":["of"],"has everything":["what"],"has explaining":["name."],"has far":["more"],"has fewer":["statements"],"has four":["cases."],"has good":["use","sub-classing"],"has got":["to"],"has implications":["for"],"has intention":["expressing"],"has iterator":["built-in.","built-in."],"has its":["own","own","own"],"has lead":["to"],"has len":["=="],"has many":["instances"],"has more":["logic.","general"],"has no":["attribute","attribute","regular","method","notion","business","\"new\"","state,"],"has not":["yet"],"has nothing":["to"],"has one":["extra"],"has only":["three"],"has opinions!":[":)"],"has pulled":["a"],"has quite":["a","a","a","often","a"],"has some":["functions","handy","code","logical"],"has spaces":["-"],"has super-awesome":["functions"],"has support":["for"],"has the":["unfortunate","method","following","generator","`replace`"],"has to":["be","approve","be","do","execute","go","test","be"],"has very":["handy","handy"],"has well":["suited"],"has, in":["recent"],"has_key syntax":["has"],"hash\" than":["using"],"hashable or":["have"],"hashbang +":["encoding)"],"hashes is":["weird."],"hasletter or":["something"],"hasn't touched":["Python","Python"],"hate multiple":["return"],"hating me!":["I"],"hating you":["but"],"have \"elif":["self._message_is_shouting():\","],"have \"if":["x\""],"have \"simple":["code"],"have 100":["functions","functions"],"have 2.7":["on"],"have 3":["lambdas"],"have 4":["tests"],"have Python2":["and"],"have [inherited":["from"],"have __intention":["explaining"],"have _two_":["methods"],"have `.number`":["as"],"have `.sort`,":["all"],"have `0`":["be"],"have `None`,":["not"],"have `if`":["there","there","there","there","there"],"have `is_aggressive`":["or"],"have `lower`":["computed"],"have a":["good","catch-all","look","convenient","method","very","catchall","`.isupper()`","`.isupper()`","crack","look","clue","docstring","[single","really","look","method","hint?","clear","method","different","false","\"new-style\"","rather","look","false","new-style","ready","particular","distinct","look","particular","look","uniform","false","`verse_num:verse_string`","half","need","function","better","docstring,","look","look","look","look","semantic","google","comment","few","very","completed","completed","dictionary","dictionary","few","few","few","single","nit","second","look"],"have absolutely":["no"],"have abstracted":["each"],"have added":["these","file","encoding","comments"],"have additional":["responses."],"have agnostic,":["simple"],"have all":["this","the"],"have already":["returned"],"have an":["`isupper()`","`.endswith`","underscore","old-style","`else`","anagram","extra","alphagram","outdated","old","old"],"have another":["use"],"have any":["ideas","state","problems","umlaut","visible"],"have any),":["i.e."],"have anything":["in"],"have attributes":["on"],"have avoid":["the"],"have avoided":["that"],"have bare":["functions."],"have been":["discouraged","told","some","telling","deceived","Tone.","a","given","simplified","factored","replaced","recommended","recommended","recommended","best","to","to","the"],"have both":["classes","the"],"have bothered":["with","with"],"have changed":["since"],"have checked":["everything.","everything.","everything,","everything.","everything."],"have chosen":["here."],"have completed":["the"],"have converted":["it"],"have created":["an","this"],"have details":["at"],"have different":["versions,"],"have difficulties":["decyphering"],"have discovered":["isupper"],"have discussion":["with"],"have do":["the"],"have done":["that","\"exercism","that.","that"],"have each":["reaction"],"have early":["returns"],"have enough":["Python"],"have everything":["and"],"have experience":["in"],"have explicit":["branching"],"have exposed":["the","the"],"have external":["dependencies."],"have factored":["out"],"have failed,":["no?"],"have forgotten":["some"],"have functions":["(plain"],"have gone":["with","a","with"],"have got":["so"],"have gotten":["away"],"have had":["to"],"have has":["many"],"have have":["to"],"have higher":["precedence"],"have if":["and"],"have improved":["my"],"have in":["my","the"],"have inlined":["\"c\","],"have is":["something","a","that","that"],"have isspace":[":)"],"have it":["it","together","now","in"],"have just":["updated","as","written","a","two","a","a"],"have leading":["prefixes"],"have learned":["tough","a"],"have legitimate":["reasons"],"have liked":["to"],"have lived":["in"],"have made":["\"hey\"","sense","this","your","area_code","area_code","my","them"],"have many":["repetitions?"],"have meant":["too"],"have mentioned,":["I"],"have methods":["for"],"have missing":["space"],"have more":["complicated","than","mental"],"have multiple":["return","character"],"have named":["the","the"],"have nested":["'if'"],"have never":["used"],"have no":["idea).","comments","reason","real","place","state),","tests","objections","instance"],"have non-standard":["formatting"],"have not":["done"],"have of":["the"],"have omitted":["`phrase`"],"have on":["the","the"],"have one":["single","extra","method","blank","condition","issue"],"have only":["4,","indirect","3"],"have other":["usage"],"have outdated/misleading":["ones."],"have over-complicated":["check"],"have passed":["the"],"have positive":["lengths"],"have preferred":["the"],"have problems":["overriding"],"have put":["a"],"have re-introduced":["the"],"have reached":["that"],"have received":["at"],"have regexes,":["and"],"have returns,":["you","you"],"have saved":["a"],"have seen":["some","single","some"],"have separated":["the","out"],"have setup":["git"],"have several":["comments/questions:"],"have simple":["code"],"have simple,":["readable,"],"have slipped":["in:"],"have so":["much"],"have some":["projects","benefits.","(limited)","doubt","remarks:"],"have something":["similar","really"],"have space":["between"],"have spaces":["around","around"],"have stolen":["this"],"have string":["in"],"have strong":["feeling"],"have stuff":["from"],"have submitted":["the"],"have suffice,":["not"],"have sufficed":["-"],"have superfluous":["parentheses"],"have tests":["for"],"have that":["problem.","much","function"],"have the":["feeling","upside","right","`Bob`","same","following","same","isspace","hey","dispatcher","right","default","t-shirt...","attributes","expected","default","same","ruby-doc","Phrase","following","most","latest","same","same"],"have them":["all","as"],"have there":["is"],"have these":["two","abstractions"],"have this":["`Word`","`is_default()`"],"have those.":[":)"],"have thoughts":["on"],"have to":["follow","force","write","pass","worry","break","use","be","do","read","pass","agree","act","return","use","use","be","correspond","look","check","probably","remember","roll","lower","use","find","explicitly","look","make","make","go","rewrite","be","\"divide","worry","explicitely","parse","filter","sort","be","maintain","either","special","say,","create","model","\"declare\"","disagree","compare","memoize","deal","reorder","be","reorder","agree","build","read","resubmit.","expand","maintain","admit","use","look","wrap","recalculate","fit","use","special-case","use","be","keep","do","worry","make","drill","disagree","be","admit","walk","worry","care","work","admit","add","rethink","ask:","puzzle","import","change"],"have two":["blank","blank","separate","explicits","methods","calls","branches","list","string","questions,"],"have use":["lambdas"],"have used":["a","a","something","regular","it","C","predicate","`self._raw","`return","`nucleotide_sequence`","`re.findall`","keyword","`str.replace`","`str.isupper`","better"],"have verified":["that"],"have very":["precisely"],"have with":["`if","this"],"have written":["a","any"],"have you":["made","considered","tried","looked","any","taken","considered"],"have your":["tests"],"have “conditional":["script”"],"have), which":["could"],"have). I":["don't"],"have, it's":["very"],"have? \"I":["like"],"have? I":["have"],"haven't benchmarked":["it,"],"haven't done":["much","Python"],"haven't gotten":["around"],"haven't really":["seen"],"haven't thought":["of?"],"haven't used":["coersion"],"haven't written":["much"],"having \"composable\"":["functions"],"having 2":["classes"],"having 5":["functions"],"having `None`":["instead"],"having `count`":["and"],"having a":["method","class","simple","method","method","comment","question","simple","method","class","single","?","single","'result'","single"],"having access":["to"],"having all":["upper","of"],"having an":["accepted"],"having another":["class"],"having both":["methods"],"having different":["path"],"having elif":["was"],"having it":["in","all"],"having many":["return"],"having methods":["returning"],"having multiple":["statements"],"having only":["one"],"having some":["kind"],"having that":["extra","much"],"having the":["responses","tests","`VALID_RNA_NUCLEOTIDES`","mapping.","`if`to","replies","program"],"having them":["inside"],"having thought":["of","of"],"having to":["consider","prefix","pass","return","change","rely","explicitly","use","read","step","make","check","deal"],"having two":["distinct","methods"],"having used":["`str.translate`"],"havoc with":["my"],"he can't":["just"],"he doesn't":["have","care"],"he has":["conversation"],"he is":["using"],"he knew":["his","his"],"he means":["make"],"he use":["`_dna_strand`?"],"he will":["just","respond","respond","respond","be"],"he's just":["using"],"he's not":["using"],"he's on":["the"],"he?) and":["in"],"head around,":["being"],"head of":["the","creating"],"head that":["a"],"hear about":["a"],"hear more":["about"],"hear something":["well."],"hear what":["you"],"hear your":["opinion"],"heard it":["before."],"heard of":["doing","an"],"heard that":["it's"],"heard two":["schools"],"heated ones":["because"],"heavily on":["the"],"heavy for":["this","something"],"heavy processing,":["why"],"heavy use":["of"],"heavy way":["of"],"heavy-weight for":["simple"],"heck is":["that?"],"heh, I":["think"],"hell AND":["totally"],"hell out":["of"],"hello you":["you\".split())"],"help and":["pointers!"],"help but":["well,"],"help clarify":["`isQuestion`"],"help explain":["the"],"help here).":["Since"],"help here.":["Extracting"],"help in":["`_isQuestion`."],"help more":["than"],"help of":["inline"],"help on":["any"],"help readability":["and","to"],"help readability.":["Consider"],"help simplify":["this?"],"help someone":["reading"],"help the":["list","reader"],"help to":["avoid"],"help with":["the"],"help you":["clarify","clarify","clear","out"],"help), so":["I"],"help, much":["appreciated."],"helped in":["general."],"helper (word":["transformed"],"helper class":["can"],"helper for":["silence."],"helper functions":["in","to","into","to"],"helper functions,":["to"],"helper method":["and","`Phrase.get_words`.","names"],"helper method...":["That"],"helper methods":["should","to","all","should","in","with","(another","take","would","operates","operates","or","to","attached","names","that","as","below","too","to","works","below","below","wrapping"],"helper methods,":["I","not"],"helper methods.":["If","The","My","E.g.,"],"helper methods/functions":["with"],"helper methods__":["and"],"helper names":["to"],"helper with":["a"],"helper. Otherwise,":["that's"],"helpers are":["redundnat.","functional"],"helpers because":["I"],"helpers imported":["from"],"helpers in":["Phrase"],"helpers into":["`Bob`"],"helpers methods":["as"],"helpers private":["is"],"helpers should":["be","be","be","be"],"helpers shouldn't":["be"],"helpers so":["that"],"helpers to":["the"],"helpers with":["names","descriptive","descriptive","descriptive","meaningful","single"],"helpers) gives":["information"],"helpers, which":["may"],"helpers. I":["didn't"],"helpful (as":["in"],"helpful as":["one"],"helpful comments":["of"],"helpful if,":["for"],"helpful to":["avoid","abstract"],"helpful! I'll":["make"],"helps a":["bit."],"helps emacs":["to"],"helps separate":["useful"],"helps to":["define","prevent","avoid","prevent","prevent","prevent","prevent"],"helps! I":["changed"],"hence keeping":["the"],"hence many":["functions?"],"hence no":["explicit"],"hence the":["name.","split"],"hence using":["`collections.Counter`!"],"hence you":["do"],"here (and":["didn't"],"here -":["you","try"],"here :)":["(and"],"here a":["bit"],"here about":["your"],"here after":["solving"],"here again":["have"],"here already":["But"],"here and":["avoid","there.","that"],"here anyway,":["you"],"here are":["my"],"here because":["the"],"here but":["it's","not","didn't"],"here for":["dispatch"],"here http://docs.python.org/2/library/string.html":["for"],"here if":["grades"],"here instead":["of"],"here into":["separate","separate"],"here is":["admirable,","very","fine,","to","absolutely","simple","just:"],"here it":["would","is"],"here learning":["it"],"here looking":["for,"],"here overkill?":["I"],"here pointed":["it"],"here since":["I","it"],"here that":["would","only"],"here to":["good","make","simplify","help","remove","make"],"here we":["have"],"here will":["be"],"here with":["subclassing.","completely"],"here\" and":["\"warranty"],"here's [a":["relevant"],"here's a":["few"],"here's two":["thoughts,"],"here). Since":["the"],"here, I":["think."],"here, IMO.":["What"],"here, `filter`":["might"],"here, `str.replace()`":["is"],"here, a":["bit"],"here, and":["I","I"],"here, are":["faster"],"here, but":["there","I","this","why","that","it's","I","after","think"],"here, done":["that,"],"here, is":["..."],"here, just":["blah"],"here, maybe":["`not"],"here, really":["(other"],"here, since":["this"],"here, something":["went"],"here, the":["language","`Anagram`"],"here. (Here's":["a"],"here. Also,":["the","python"],"here. Any":["hints?"],"here. As":["for"],"here. But":["there's"],"here. Extracting":["logic"],"here. Have":["you"],"here. However,":["when"],"here. In":["Ruby,"],"here. Just":["enough"],"here. Look":["at"],"here. Not":["technically"],"here. So":["if"],"here. Some":["things"],"here. String":["has"],"here. This":["is"],"here. With":["message"],"here. Yes,":["the"],"here. You":["even"],"here. alternatively":["`filter()`"],"here: http://stackoverflow.com/a/54873/477048":["."],"here: http://stackoverflow.com/a/54873/477048.":["self.strand","Also"],"here: http://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables":["."],"here: if":["you"],"here; it":["is"],"here? \"`":["?"],"here? If":["there"],"here? Is":["there","there"],"here? Plus":["there"],"here? You":["already"],"here? `":["(it"],"hey ```":["method"],"hey are/is":["rather"],"hey as":["a"],"hey could":["also"],"hey function,":["and"],"hey into":["a"],"hey method":["to","simply","with"],"hey method's":["logic"],"hey method,":["but","but"],"hey method.":["One","I"],"hey need":["to"],"hey with":["None?"],"hey() a":["classmethod"],"hey() from":["formulate_prioritised_reply(),"],"hey() is":["responsible","assuming"],"hey() just":["a"],"hey() method,":["no"],"hey() should":["do"],"hey() would":["need"],"hey(): early":["returns"],"hey, I":["thought"],"hey, it's":["a"],"hey, the":["programmer"],"hey, we":["are"],"hidden (at":["least"],"hidden by":["convention"],"hidden method,":["as"],"hide the":["details","`silent`","implementation"],"hideous ugliness":["of"],"hiding in":["there?"],"hiding the":["implementation"],"hiding them":["from"],"high Unicode":["characters"],"high as":["we","possible?"],"high level,":["one"],"high-level terms":["like"],"high-performance for":["large"],"higher complexity,":["by"],"higher precedence":["than","in"],"higher than":["simply"],"highlight it":["for"],"highly unpythonic.":["If"],"him a":["question\""],"him with":["silence."],"hint for":["testing"],"hint that":["I"],"hint to":["other"],"hint: `IsEmpty`":["can"],"hint: str.isupper":["is"],"hint: you":["may"],"hinting that":["I"],"hints and":["considerations:"],"hints to":["start"],"hints, I've":["modified"],"hints, i":["think"],"his comment.":["At"],"his habits":[";)"],"his responses":["to"],"his stuff,":["recommended","recommended"],"his/her commit":["http://exercism.io/submissions/523a26542ef81a52490000ac"],"hit a":["true"],"hit on":["this"],"hold as":["a"],"hold on":["to"],"hold that":["constant."],"hold true.":["Try"],"hold you":["off"],"holds the":["predicates."],"homebrew formula":["to"],"honest I":["don't"],"honest, this":["is"],"honestly prefer":["my"],"hope I":["understood","didn't"],"hope `Counter`":["object"],"hope the":["followings","following"],"hope these":["changes"],"hope this":["does","helps"],"hope to":["have","have"],"hope you":["enjoy"],"hoped Python's":["String"],"hopefully that":["gives"],"hoping. I":["was"],"horizontal complexity":["of"],"horrible variable":["name"],"hostmaster's comment.":["You"],"hour of":["Googling.\""],"housecleaning in":["__init__."],"how \u003ccode\u003ematch\u003c/code\u003e":["was"],"how Bob":["reacts","will"],"how I":["decides","don't","can","could","thought","ended","can","did","could","had","wrote"],"how `Counter`":["can"],"how `_is_shouting`":["gives"],"how `is_yelld`":["or"],"how `isupper()`":["has"],"how about":["```if","moving","making","a"],"how accessible":["your"],"how attribute":["lookup"],"how both":["versions"],"how brittle.":["I"],"how concise":["looks"],"how could":["you"],"how do":["you","you","they"],"how easy":["that"],"how else":["to"],"how expensive":["is"],"how expressive":["the"],"how hard":["it"],"how it":["works.","is","would","would","looks","plays","actually","would","behaves","makes"],"how it's":["done.","doing"],"how many":["later","ifs"],"how much":["clearer"],"how my":["editor"],"how often":["`to_rna`"],"how other":["parts"],"how others":["did"],"how our":["code"],"how roman":["numerals"],"how short":["they"],"how shortening":["the"],"how sometimes":["being"],"how tests":["are"],"how that":["goes."],"how the":["\"Whatever\"","details","class","data","initializer","Counter"],"how they":["play"],"how this":["one","has","scenario"],"how those":["checks"],"how to":["do","interpret","determine","react","get","ensure","handle","make","do","compare","do","split","apply","approach","style","make","weigh","use","make","format","do","define","use","use","use","achieve","use","update","do","simplify","make","solve","pare","deal"],"how using":["conditionals"],"how well":["this","this"],"how would":["you","you","you","they"],"how you":["documented","feel","want:","can","\"read","would","want","could","use","should","communicate","defined","divided","give","defined","basically","defined","are","pulled","name"],"how you'd":["get"],"how you've":["separated","defined"],"however I":["thought","found"],"however it":["will"],"however not":["that"],"however that":["may","generally","join"],"however the":["instructions"],"however, it":["should"],"however, since":["exercism.io"],"however, to":["move"],"however, you":["would"],"however. Too":["far?"],"href=\"http://docs.python.org/3/library/collections.html#counter-objects\"\u003ecollections.Counter\u003c/a\u003e to":["simplify"],"href='http://docs.python.org/2/library/stdtypes.html#str.isupper'\u003eisupper()\u003c/a\u003e that":["checks"],"http://c2.com/cgi/wiki?YouArentGonnaNeedIt .":["Also","Also"],"http://docs.python.org/2/library/collections.html module.":["Alternatively"],"http://docs.python.org/2/library/stdtypes.html#str.endswith). Also,":["usually"],"http://docs.python.org/2/library/stdtypes.html#str.isupper for":["information."],"http://docs.python.org/2/library/stdtypes.html#string-methods .":["To"],"http://docs.python.org/2/library/string.html for":["`isupper`"],"http://exercism.io/submissions/2e65cefbc3a7a259f18fbbdf, which":["I"],"http://hg.python.org/cpython/file/3.3/Lib/ipaddress.py#l1285, a":["fairly"],"http://ruby-doc.org/core-1.9.3/String.html for":["an"],"http://stackoverflow.com/a/1988826/477048. It":["would"],"http://stackoverflow.com/a/54873/477048 .":["Other"],"http://stackoverflow.com/a/54873/477048. Also":["maybe"],"http://stackoverflow.com/a/54873/477048. self.strand":["is"],"http://www.artima.com/weblogs/viewpost.jsp?thread=98196. But":["lambdas"],"http://www.python.org/dev/peps/pep-0008/ .":["However"],"http://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables .":["Anyway,","Anyway,"],"http://www.python.org/dev/peps/pep-0257/ for":["the"],"http://www.python.org/dev/peps/pep-0257/#multi-line-docstrings :":["\"The"],"https://github.com/exercism/cli/releases. Please":["disregard"],"huge and":["operation"],"huge deal,":["but"],"huge difference":["but"],"huge fan":["of"],"huge input":["`re.findall`"],"huge input.":["But"],"huge stipulations":["with"],"huge, so":["perhaps"],"human to":["parse"],"human-readable (because":["of"],"humble opinion":["is"],"hundred percent":["sure"],"hurt so":["much"],"hybrid object-oriented":["and"],"hysterical raisins,":["really."],"i did":["it."],"i discovered":["by"],"i do,":["and"],"i feel":["like"],"i got":["None,"],"i guess":["you","after"],"i hate":["multiple"],"i in":["range(1000"],"i just":["move","don't"],"i know,":["i'm"],"i like":["eg.","`else`","your","your","the"],"i make":["the"],"i missed":["\"isupper\","],"i must":["use"],"i need":["it","them"],"i python...":["what"],"i separated":["the"],"i submitted":["it"],"i the":["return."],"i think":["i've","the","that","it's","it's"],"i wanted":["to"],"i was":["surprised","confused"],"i will":["pass"],"i wonder":["if"],"i would":["do","suggest","rather"],"i wouldn't":["use"],"i'd make":["the"],"i'd say":["that"],"i'm a":["newbie"],"i'm ashamed":["i"],"i'm fine":["with"],"i'm pretty":["unsure"],"i've done":["this"],"i've fixed":["them","it"],"i've seen":["other"],"i've written.":["would"],"i.e. doesn't":["change"],"i.e. make":["a"],"i.e. only":["consists"],"i.e. why":["test"],"i.e., I":["am"],"i.strip()`. And":["Python"],"icky feeling":["as"],"idea -":["those"],"idea about":["it"],"idea as":["well."],"idea does":["`return"],"idea explaining":["unicode."],"idea for":["me","internal","an"],"idea here":["is"],"idea in":["mind?","mind."],"idea is":["from","from"],"idea of":["making","\"employ","splitting","moving","what","using","defining","using"],"idea on":["how"],"idea that":["its"],"idea to":["separate","take","just"],"idea using":["`Counter`"],"idea was":["that"],"idea what":["the","I'm"],"idea, I":["would"],"idea, one":["I"],"idea, since":["it"],"idea, too,":["because"],"idea. Added":["caching"],"idea. Additionally,":["these"],"idea. I":["had"],"idea. It's":["an"],"idea. Just":["goes"],"idea. Why":["not"],"idea. i'm":["a"],"ideal however.":["Too"],"ideas /":["tips"],"ideas I":["got"],"ideas are":["appreciated"],"ideas for":["that:"],"ideas what":["to"],"identical method":["and"],"identical to":["your","```\\?$```"],"identification from":["response","responses."],"identifies as":["such"],"identify equivalent":["strings"],"identify strings":["containing"],"identify yells":["and"],"identifying capsed":["senteces."],"identifying common":["acronyms"],"identifying questions.":["Check"],"identifying the":["input"],"identifying words":["is"],"identity operator":["(`is`),","(`is`),","(`is`),","(`is`)","(`is`","`is`.","`is`"],"identity test":["\"work\")"],"identity testing,":["not"],"idiom I'm":["missing)"],"idiom for":["this"],"idiom in":["other"],"idiom is":["to"],"idiomatic Python":["are"],"idiomatic `endswith`":["method"],"idiomatic approach":["to"],"idiomatic for":["testing","Python"],"idiomatic format":["method"],"idiomatic in":["Python"],"idiomatic of":["Guido's"],"idiomatic or":["perhaps"],"idiomatic python.":["You","Everything"],"idiomatic slicing":["of"],"idiomatic than":["explicitly"],"idiomatic to":["python.","write","use","write"],"idiomatic way":["to","to","to","to","to","to"],"idiomatic —":["in"],"idiomatic, but":["is"],"idiomatic. (See":["[Ned"],"idiomatic. However,":["`not"],"idiomatic. Please":["pay"],"idiomatic? I'd":["actually"],"idiomatically done":["using"],"idioms are":["here."],"idioms to":["check"],"idioms) it's":["not"],"idioms. This":["is"],"idomatic approach":["in"],"ie `Message.is_silent(msg)`":["is"],"ie `foo(bar=baaz)`,":["not"],"ie, the":["specs"],"if \"silence\"":["in"],"if '":["'.strip()"],"if (and":["its"],"if ...":["and","return"],"if ....,":["_otherwise_"],"if Bob":["needed"],"if I":["can.","were","don't","pass","really,","could.","should","really","didn't","put","can","write","wrote","was","can","had","did","introduce","use","feel","used","could","could","had","want","think","can","would"],"if I'd":["done"],"if I'm":["writing","right","doing"],"if Python":["2.x,"],"if X==Y":["into"],"if [expression":["evaluating"],"if `DNA.__init__`":["argument"],"if ```":["is_anagram_of","FormattedWord"],"if `if":["self.sequence`"],"if `input.isupper()`":["instead"],"if `message`":["is"],"if `not":["words"],"if `phrase.isupper()`":["instead"],"if `r'[^\\w\\s]'`":["is"],"if `s`":["were","were"],"if `self.text_phrase":["=="],"if `toBob.isupper()`":["instead"],"if a":["statement","sentence","string","string","string","`unicode`","change","key","string","third","string"],"if all":["`return`","chars","chars","cased","cased","possible","cased","of","letters"],"if an":["integer"],"if and":["return","elif.","only","only","only","a"],"if another":["developer"],"if any":["would"],"if anyone":["working"],"if are":["the"],"if as":["I"],"if asked":["a"],"if at":["this"],"if block":["doesn't"],"if ch.isalnum()":["or"],"if char.isalpha())`":["looks"],"if clause":["and","anyway."],"if clauses":["to"],"if conditions":["are"],"if content":["is"],"if converse":["was"],"if directly":["in"],"if dna_strand":["contains"],"if either":["the"],"if else":["statement","sentence.","is","statement!!"],"if fn(x)`.":["`filter(fn,"],"if grades":["must"],"if having":["a"],"if helper":["methods"],"if helpers":["should","should","should","should"],"if hey()":["is"],"if i":["will"],"if input":["is","is"],"if is":["entirely","about","there"],"if is_question(msg):":["return"],"if is_shout(msg):":["return"],"if is_silent(msg):":["return"],"if it":["ends","ends","ends","grew","would","doesn't","only","contains","has","had","has","wasn't","looks","is","did","looks","maps","is","were"],"if it's":["there,","`None`,","not","a","all","uppercase","shouting","optimal)","yelling.","all","all","all","upper","necessary","\"useless\"","the","not","the"],"if its":["an"],"if len(letters)":["\u003e"],"if len(msg.strip())":["==","=="],"if len(self.statement.strip()":["=="],"if logic":["in","in"],"if look":["nicer."],"if makes":["the"],"if message":["is","is","else","is","only","==","is","==","is","else","has","=="],"if messages":["are"],"if msg":["==","==","==","==","is"],"if my":["```if```"],"if necessary.":["Would"],"if no":["action"],"if normalize_word(w)]`.":["Why"],"if not":["applicable?","all","cl[0]:","neccessary,","input:","message","message","str","said.strip()","said","self.words:"],"if not,":["wouldn't"],"if nothing":["is"],"if repetition.":["I"],"if reusing":["variable"],"if s.isalnum())`.":["This"],"if s[-1]":["=="],"if self.statement":["is"],"if sentence":["=="],"if silence":["wasn't"],"if some":["part"],"if someone":["were","is","called","sets"],"if something":["isn't"],"if sorted(item.lower())":["=="],"if statement":["might","because","checking","such","structure","in"],"if statements":["are","are","and","and","were","nested","could","a"],"if statements,":["but","I"],"if statements.":["It's"],"if statements?":["I"],"if str":["weren't"],"if string":["is","is","is","is","is","is","is"],"if technically":["legal)."],"if test":["in","may"],"if text":["is","is","is","is","or"],"if that":["overhead","existed.","was","is","is","theme","makes"],"if that's":["the","you","the"],"if the":["query","key","test","statement...\"","specifications","helper","tests","string","predicate","input","implementation","message","tests","check","string","message","string","programmer","last","behaviour","method","matchers","precedence","specs","system","`hey`","return","built","predicate","object","intializer","question","character","logic","false-y","strip()","nothing_special/yell_at_me/question","sentence","predicate","string,","statement","teenager","statement","statement","intent","'hey'","message","test","docstring","original","length","``DNA``"],"if there":["is","were","are","existed","actually","is","are","were","is"],"if there's":["something","some","a"],"if they":["were","made","have","all","are","are","are","are","are","are","wanted","were","aren't","have","put","have","were"],"if this":["extra","class","is","message","is"],"if to":["make","use","see"],"if tree":["in"],"if two":["robots"],"if unsealed\".":["If"],"if using":["Python"],"if usung":["Python"],"if value":["is"],"if was":["false."],"if we":["had","did,","have","need","decided"],"if whole":["phrase","phrase"],"if with":["an"],"if word":["is"],"if word_count":["was"],"if x":["return"],"if you":["had","really","couldn't","do","like","ask","are","want","refer","pass","needed","**really","needed","had","use","feel","prefer.","go","are","have","could","leave","have","want","like","classify","use","were","are","want","had","meant","feel","had","were","don't","look","pass","do.","think","call","decide","really","break","did","did","could","want","use","wish.","wish","rename","replace","had","searched","ever","make","put","insist","compile","have","will","have","don't","ask","do","tell","choose","see","are","write","write","write","want","want","just","have","can.","give","used","wanted.","wanted.","call","try","normalize","made","want","use","want","keep","use","gave","made","looked","looked","looked","have","use","used","went","consider","want","don't","do","test","change","can't","can","move","are"],"if you'd":["like","like"],"if you're":["returning","returning","using","using","using","using","using","going"],"if you've":["got"],"if your":["text","function"],"if\", that's":["a"],"if's I":["don't"],"if's, and":["drop"],"if's? I've":["seen"],"if, because":["any"],"if, elif":["to"],"if, for":["example,"],"if-clause could":["simply"],"if-elif-elif-else approach":["works"],"if-elif-else is":["more","more","simple"],"if-elif-else structure":["is"],"if-else seems":["a"],"if-else statements":["have","have"],"if-statement of":["the"],"if-statements and":["not"],"if-statements in":["methods"],"if-then statements":["and"],"if. I":["don't"],"if...elseif statements)":["and"],"if..elif tree.":[";)"],"if/elif altogether":["-"],"if/elif and":["returning"],"if/elif blocks":["is"],"if/elif chain":["if"],"if/elif/else branching":["scheme."],"if/elif/else statements":["clear"],"if/elif/else with":["just"],"if/else statements":["better.","but"],"if/looping structures":["(via"],"iff should":["be"],"ifilter(lambda x:":["x[0](statement),"],"ifs are":["unnecessary."],"ifs for":["the"],"ifs in":["`hey`"],"ifs much":["simpler"],"ifs suggest":["connecting"],"ifs there":["are"],"ifs, loops,":["or"],"ignore all":["the"],"ignore self":["..."],"ignore some":["widely"],"ignore the":["exception.","endpoint"],"ignore this":["one.","submission."],"ignore what":["I'm"],"ignores anything":["that's"],"illusionist has":["pulled"],"illustrate any":["special"],"illustrate what":["I"],"imagine a":["complicated","solid"],"imagine anything":["that"],"imagine how":["you'd"],"imagine naming":["`s`"],"imagine some":["might"],"imagine that":["the"],"imagine the":["test"],"imho (specially":["`normalized`"],"imho _is_yell()":["should"],"imho be":["good,"],"imho in":["context"],"imho it":["should"],"imho it's":["against"],"imho restricted":["to"],"immediate return,":["I'd"],"immediately aware":["of."],"immediately clear":["why"],"immediately clear.":["A"],"immediately grasp":["the"],"immediately how":["Bob"],"immediately know":["how"],"immediately more":["readable."],"immediately obvious":["what"],"immediately obvious.":["If"],"immutable strings":["in"],"impact comprehension":["here?"],"impact on":["the"],"impact the":["quality"],"imparted by":["the"],"imperative programming":["methodology"],"imperative steps.":["I"],"implement `Carl`,":["who","who"],"implement `response_for`,":["for"],"implement another":["person"],"implement here":["too."],"implement it":["as"],"implement it.":["Any"],"implement the":["entire","functionality","requried"],"implement this":["if"],"implementation (\"private\")":["attribute."],"implementation (a":["set"],"implementation (well,":["you"],"implementation -":["the"],"implementation :":["You"],"implementation :p":["It"],"implementation and":["the","associated"],"implementation artifact":["it"],"implementation attributes":["(and"],"implementation choice":["than"],"implementation detail":["could","/","that","and"],"implementation detail,":["but","where","and","not"],"implementation details":["in","are","(rules","\"private\"","and","?","?","don't"],"implementation does":["in","not"],"implementation from":["the"],"implementation is":["brittle","5x","short"],"implementation it's":["a"],"implementation itself":["?"],"implementation may":["be"],"implementation might":["not"],"implementation of":["a","anagram-wise","```","total_after()"],"implementation passing":["the","tests."],"implementation please":["do"],"implementation stuff":["imho"],"implementation that":["is"],"implementation to":["that"],"implementation used":["a"],"implementation was":["identical"],"implementation would":["do","respond"],"implementation, I":["like"],"implementation, but":["that's"],"implementation, do":["you"],"implementation, you":["should","have"],"implementation, you'd":["never"],"implementation-oriented, `normalize`":["is"],"implementation. For":["example,"],"implementation: the":["test"],"implementations into":["methods"],"implementations of":["the"],"implemented and":["that"],"implemented here":["if"],"implemented in":["pure","Python","pure"],"implemented using":["`sorted`","`.strip()`"],"implemented with":["a","them."],"implementing `PhraseTest`":["as"],"implementing a":["memoized"],"implementing the":["resulting","correct"],"implementing this":["was"],"implementing? Would":["it"],"implements it.":["The"],"implements the":["algorithm"],"implication that":["you"],"implications for":["your"],"implicit as":["single"],"implicit conversion":["of"],"implicit logic":["bugs.","bugs."],"implicit return":["values"],"implicitly communicated":["in"],"implicitly handling":["None"],"implies a":["certain"],"implies it":["is"],"implies that":["all"],"implodes because":["len(None)"],"imply it":["either"],"imply that":["conditions"],"import *`).":["However"],"import Counter\\n[Counter(\"sadfasdfagrregwfagfregawgfresafafewrf\")":["for"],"import Counter\\n[Counter(\"sadfasdfagrregwfagfregawgfresafafewrf\"*10000)":["for","for"],"import Counter`":["to","?"],"import `maketrans`":["from"],"import `re`":["but","but"],"import in":["self"],"import is":["unnecessary","not","unnecessary.","unnecessary."],"import statement":["to","and","and","and"],"import statements":["-","and"],"import string.":["You"],"import the":["`re`","`re`","`string`","string"],"import, I":["choose"],"import, and":["2"],"import, you":["can"],"import. Otherwise,":["it"],"import. That":["could"],"import. That's":["the"],"important code":["is"],"important distinction":["or"],"important for":["such"],"important here":["but"],"important logical":["parts"],"important not":["because"],"important than":["the"],"important words":["like"],"important, but":["there's","the","at"],"importantly that":["those"],"imported from":["another","`functools`"],"importing re":["at","is"],"importing the":["re"],"imports (`from":["foo"],"imports and":["class."],"imports at":["all.","the"],"imports from":["the"],"imports, however":["that"],"imporved so":["that"],"impose this":["`DNA`"],"impossible to":["do"],"impression that":["it's"],"improve how":["the"],"improve it":["by","by","a"],"improve on":["this."],"improve readability":["even"],"improve that":["code,"],"improved (imho)":["by"],"improved ```":["Message","Message"],"improved by":["moving","moving","simply","using"],"improved in":["the"],"improved is":["the"],"improved my":["usage"],"improved slightly":["by"],"improved to":["be"],"improved whitespace":["checker"],"improved. Very":["cool!"],"improvement, but":["the"],"improvement. What":["do"],"improvements I":["did","can","can"],"improvements in":["mind."],"improvements though.":["The"],"improvements. Moving":["on!"],"improves handling":["of"],"improves understandability":["more"],"improving though.":["First"],"in \"ACTGU\":":["...`)."],"in #4,":["though"],"in 'GFY'":["abreviasion"],"in (1).":["I"],"in ...)":["and"],"in 1":["line"],"in 13+":["years"],"in 3":["parts"],"in 3.x":["ONLY"],"in 6":["months"],"in Bob":["object?"],"in Bob's":["initializer."],"in Bob.no_lowercase":["or"],"in C":["to","and"],"in C.":[":)"],"in CapWords,":["capitalize"],"in Clean":["Code."],"in DNA":["(e.g."],"in DNA-&gt;RNA":["transcription,","transcription."],"in English,":["nor"],"in Go:":["http://play.golang.org/p/r-49FrHZOE"],"in Haskell,":["I"],"in JS":["and"],"in Javascript":["and"],"in Kent":["Beck's"],"in PEP":["8:"],"in Phrase":["order"],"in Py":["2.7.","2.7"],"in Python":["yet!","anyway.","Style","2.x","Style","Style","-","to","versions","Style","for","strings","strings","that","3?","by","while","3,","is","and","3,","a","2.x","Style","and","we","(even","(they","and","(cf","anyway.","conventions","3](http://stackoverflow.com/a/54873/314685))","3),","3),","3),","3),","3),","3),","3.","you","3","3),","3),","3,","or","there","3.","3.","profiler...","to","3).","3:)","though.","programs","(except","code","docs","(see"],"in Python!":["You"],"in Python's":["documentation.","collections"],"in Python,":["Ruby","so","so","an","so","an","but","so","but","it's","and","the"],"in Python.":[":)","Looks","Are","I'll","What","Not","Any","For"],"in Python2.x":["to"],"in Python?":["I've","I'm"],"in Ruby":["as","a"],"in Ruby).":["I"],"in Ruby.":["I"],"in SOLID)":["in"],"in Statement":["(excepting"],"in String":["methods"],"in [...":["for"],"in [PEP":["0008](http://www.python.org/dev/peps/pep-0008/#function-names)"],"in [PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations).":["Another"],"in [The":["Hitchhiker’s"],"in [my":["anagram](http://exercism.io/hostmaster/python/anagram)."],"in [this":["blog"],"in __init__.":["Oops."],"in _assesMessage":[":)"],"in `#is_valid`,":["if"],"in `.hey()`":["?"],"in `.hey()`.":["Why"],"in `Anagram.match`":["method."],"in `Bob.Responses`":["are"],"in `Bob._validate`?":["I"],"in `Bob.hey()`.":["You"],"in `Bob`":["is","class"],"in `Bob`,":["maybe"],"in `CamelCase`,":["constants"],"in `Carl`'s":["case"],"in `DNA`":["class"],"in `Discussion.empty()`":["but"],"in `FormattedWord.__init__`,":["what's"],"in `Message.__init__()`":["is"],"in `Message.__init__`,":["and"],"in `Message`":["?"],"in `NUCLEOTIDES`?":["Also,"],"in `Phrase.__init__`":["because"],"in `Phrase.__init__`?":["Or"],"in `Phrase.clean_phrase`":["because","it's"],"in `Phrase.is_silence`":["method."],"in `Phrase.phrase`":["attribute"],"in `Phrase.words`":["is"],"in `UPPERCASE_WITH_UNDERSCORES`":["and"],"in `Word.__init__`,":["no"],"in `Word.is_anagram_of()`,":["the"],"in `__init__`":["is","is","instead"],"in `__init__`.":["It"],"in `__init__`?":["Will"],"in `_checkForNoContent`":["works"],"in `_sanitize()`":["but"],"in `_silence()`":["seems"],"in ``'A'":["in"],"in ``'GG'":["in"],"in ```":["Anagram"],"in ```hey```":["because"],"in ```word_count```":["to"],"in `anagram`":["module."],"in `bob`":["module"],"in `bottle_count`":["where"],"in `collections.Counter`":["here"],"in `collections`":["that","for"],"in `funtools`":["and"],"in `hey()`":["?"],"in `hey()`.":["Could"],"in `hey()`?":["Some"],"in `hey`":["to","also","are","is","is"],"in `if`":["statement."],"in `isSilence`":["would"],"in `is_anagram_of`.":["It's"],"in `is_empty`.":["You"],"in `is_empty`?":["What's"],"in `is_query`":["is"],"in `is_question`":["and","does","but"],"in `is_question`?":["Also,"],"in `is_shooting`":["and"],"in `is_shut_up`":["are"],"in `line":["6`."],"in `lowercase_with_underscores`.":["Sticking"],"in `match`":["(hint:","is"],"in `match`?":["Even"],"in `message_is_empty`":["are"],"in `nucleotide_counts`":["and"],"in `safe_strip`":["function."],"in `screaming`.":["Just"],"in `self._tokenize(self._phrase)`,":["why"],"in `sing`,":["would"],"in `str`":["that"],"in `type`":["belongs"],"in `word_count()`,":["a"],"in `word_count()`.":["You"],"in `word_count`,":["so"],"in `word_counter`":["you"],"in a":["tuple","separate","boolean","valid","word","sensible","bigger","functional","bigger","context","functional","set,","tuple.","parameter","sentence,","single","single","class","new","way","way","class","class","string","separate","real","different","boolean","`Statement`","boolean","single","sane","method","comment.","string","boolean","boolean","boolean","child","child","boolean","more","boolean","boolean","boolean","dictionary","boolean","boolean","boolean","new","more","boolean","4","more","method","Python","boolean","row","boolean","boolean","boolean","way","refactor","boolean","boolean","boolean","list","function.","method)","method;","private","way","function","`try:...","single","period.","comprehension","function","different","different","particular","similar","single","particular","particular","more","language","single","dictionary,","way","while.","function","age","larger","separate","module","separate","regex","boolean"],"in acronyms":["etc."],"in addition":["to"],"in advance":["and"],"in all":["new","very","quite","your","subclasses.","subclasses\".","caps.","caps.","forms!"],"in all.":["Very"],"in almost":["all"],"in an":["RNA","`if`","earlier","initializer","appearance"],"in anagram_list":["if"],"in another":["module"],"in any":["case","way,","language","way.","languages\"","way.","circumstances,","way."],"in anything":["but"],"in anyway":["and"],"in argument":["lists"],"in as":["a"],"in ascending":["order."],"in assigning":["it"],"in attribute":["names"],"in base_words":["if"],"in between":["them."],"in boldface":["are"],"in both":["of","clojure","Python2"],"in broader":["perspective"],"in case":["of","a","it's","of","of","of","you","there"],"in cases":["where","of","like"],"in chars":["and"],"in check":["for"],"in checks":["-"],"in checks\"?":["I"],"in circulation":["will"],"in clarifying":["that"],"in class":["so"],"in class'":["constructor"],"in class,":["module"],"in classes":["designed"],"in closure":["\u003e","100000"],"in code":["works","is"],"in code?":["In"],"in collections":["that"],"in combination":["with"],"in combining":["different"],"in comment:":["iff"],"in comments":["is"],"in communication":["context"],"in conjunction":["with"],"in constants":["would"],"in constructor":["-","and"],"in constructor?":["Either"],"in context":["of","of","of"],"in conversation":["context.","you","context?"],"in copying":["dna"],"in count`":["more"],"in couple":["code"],"in d`":["check"],"in day-to-day":["practice."],"in declaring":["`__all__`."],"in definition":["it"],"in details":["of"],"in details,":["right?"],"in dict`":["is","per"],"in dictionary":["and"],"in different":["methods,"],"in directly":["in"],"in dna_nucleotides_to_rna)":["`"],"in dna``).":["On","In"],"in documentation":["(i","and"],"in doesn't":["have"],"in doing":["so","so.","so"],"in doubt":["about"],"in doubt,":["choose"],"in each":["method","case","statement.","`if`","word.","iteration","of","if.","of","condition.","subroutine,","`if`"],"in eg.":["Ruby,"],"in either":["approach,","language."],"in emacs":["but"],"in encapsulating":["all"],"in every":["method","body's"],"in exchange":["for"],"in execution.":["I"],"in explicit":["return"],"in expressing":["intent"],"in fact":["convey","preserve","simpler","very","greatly","lead"],"in fact,":["you"],"in favor":["of","of"],"in first":["3"],"in form":["of"],"in framework-like":["stuff.","stuff."],"in function's":["arguments."],"in function/method":["argument"],"in functional":["style"],"in future":["revisions"],"in general":["for","where","for"],"in general)":["to","so"],"in get_words,":["which"],"in hand,":["my"],"in helper":["names","methods"],"in helpers":["are"],"in hey":["are/is"],"in high-level":["terms"],"in how":["it"],"in if":["statements"],"in ifs":["are"],"in in":["order","both"],"in initialization":["because"],"in inline":["comments","comments."],"in instance":["methods,","methods"],"in interactive":["mode."],"in interfaces":["some"],"in introduction":["section"],"in ipdb":["(ipython"],"in is_anagram()":["as"],"in is_silence,":["try"],"in it":["would"],"in it's":["initializer.","own","current"],"in iteration":["1:","#2,"],"in its":["internal"],"in its'":["current"],"in javascript":["mode."],"in last":["position."],"in line":["with","3,","14.","7","with","22","21","12.","5","25,","14.","6"],"in list":["so","comprehension.","comprehensions"],"in low-level":["terms"],"in lower":["layers."],"in many":["tutorials.","places.","places"],"in memory":["first?"],"in message":["is"],"in method!":["I"],"in methods":["python","so"],"in methods.":["These"],"in mind":["while","that","that","if","when","that","that"],"in mind.":["Now","The"],"in mind:":["If"],"in mind?":["I"],"in module":["\u003e","100000"],"in modules,":["probably"],"in more":["functional"],"in most":["languages,","cases"],"in msg":["if"],"in my":["solution,","opinion.","local","Ruby","Ruby,","defence,","coding","Haskell","versions","opinion,","first","emacs","book","opinion","test","file.","opinion.","opinion.","opinion","book.","head","opinion.","opinion","opinion","implementation.","opinion.","own","variable","code","opinion","solution,","opinion","python","code","opinion."],"in naming":["convention"],"in nature,":["that"],"in new":["code","code."],"in next":["revision.","iteration.","version,"],"in no":["rush."],"in normalization,":["but"],"in on":["`str`,"],"in one":["of","section.","place","string.","definition?","method","massive","place","place.","case:","place","place"],"in order":["to","to","to","to","to","to","to","not","to","to","to","to"],"in order,":["and","applying"],"in other":["Bob","classes.","places,","languages,","solution"],"in others.":["Which"],"in our":["dictionary?"],"in parallel":["with"],"in part":["because","because"],"in particular":["to"],"in phrase":["because"],"in place":["or","of"],"in place,":["but"],"in point":["1"],"in pointing":["out"],"in practice":["just"],"in production":["code);"],"in pure":["C.","C"],"in python":["2.x","next.","2.x","is","2.x.","2.x.","2.x.","2.x.","2.x","style","2.x","2.x","2.x","2.x","is","2.x","like","(to","have","you","you"],"in python's":["world","tutorial:"],"in python,":["but","which","I","and"],"in python.":["Additionally,","Even","That"],"in python2.x.":["You"],"in pythons":["form"],"in random":["`x`"],"in range(100)]',":["number=1)","number=1)","number=1)","number=1)"],"in range(1000":["*"],"in range(10000)]',":["number=1)","number=1)"],"in range(start,":["stop-1,"],"in re.":["Thanks"],"in re.findall(r'[\\w]+',":["self.s):","self.phrase):"],"in re.finditer(r'\\w+',":["self.text):"],"in readability":["in"],"in readability.":["But,"],"in real":["life"],"in recent":["years,"],"in regards":["to","to"],"in regex":["flag"],"in region":["where"],"in repeating":["what"],"in responsibilities":["here?","of"],"in roughly":["the"],"in scripting":["language"],"in second":["iteration."],"in self":["unused."],"in self,":["which"],"in self.phrase":["if"],"in self.responders":["if"],"in separate":["variables","[Value","class.","object,","method,","method.","lines","method","methods"],"in separating":["the"],"in sight!":["This"],"in signature":["suggests"],"in similar":["situations"],"in small":["function","methods","function"],"in so":["many"],"in solution":["they"],"in some":["8","8","inheritance","inheritance","inheritance","places","other","cases","cases"],"in specs":["mandates"],"in split(r'\\W+',":["self._normalize_phrase)"],"in split_phrase":["with"],"in statement":["constructor"],"in stone":["(especially"],"in string":["class'","class'","class'","-","methods.","methods","methods","processing"],"in strings,":["I"],"in style":["(newline"],"in sub-classes.":["`__class__`"],"in submission":["2.","2."],"in such":["fashion,","a","a","a","a"],"in terms":["of","of"],"in that":["particular","particular","particular","direction","case","we","case","case","case","point..."],"in the":["Ruby","next","example?","method's","correct","code","README","tests","depth","same","readme,","argument,","C/C++/Java","previous","next","constructor.","unit","phrase","library","Ruby","first","same","constructor","domain","lines","`DNA`","Ruby","shape","same","same","same","Python","same","exercise","given","`Bob`","name","conditional","`_blank`","code.","context","lambda","back","if/elif","order","same","first","function","Bob","implementation,","init","code,","method","code.","problem","tests,","spec.","language","code,","very","if","habit","end,","tests","`__init__`?","method","domain","`__new__`","list","'Fine.","initializer","hands","most","initializer","word_count","inializer","words","initializer","overhead","Greeting","other","`if","Message","initializer,","init?","init.","initializer.","bob","first","same","public","public","rest","other","for","message,","other","`dispatch`","expected","`match`","`collections`","method,","predicates","predicates,","dispatch","required","required","predicates).","\"if","readme","`string`","test","API","for","same","following","`if","the","`hey`","first","`if","same","search().","anagram","word,","hey()","\"application\"","`is_anagram`","doc).","next","hey","end","__init__","__init__","class","initializer,","minimal","initializer,","case","end","right","initializer","initializer,","initializer","initalizer","list","__init__","initializer","silence","main","responses","`for`","explicit","FineManuel","silent","shouting","`__init__`","10th","first","splitting","future,","first","context","if","test.)","DNA","`number`","test","specs.","ETL","test","constructor,","initializer.","example","top-level","`anagram`","`to_rna`","class.","rna","next","phrase`.","idea","test","code,","list","list","class","`area_code`","end.","expression.","repository","hey","hey","long","parsing","parsing","variable),","string","strings.","return","`__init__`","```hey```","conditional","string","string","conditional","conditional","exercise","sequence.","beginning,","string,","string,","previous","future.","README?","case","`_is_shouting`","last","string","last","code","context","`is_anagram`","same","online","future,","parameter","logic,","shorter","README.md","example,","tests","subroutines","same","readme,","other","second","types","appropriate","docstring","global","list","reactions.","README.md","sort()","last","getter","constructor.","test","big","way","body","constructor","`count`","`nucleotide_counts`","legacy"],"in their":["own","own"],"in them,":["you"],"in there":["though."],"in these":["ways."],"in theses":["exercises"],"in this":["case,","assignment,","case,","case","case.","language","code.","code.","trivial","case","to","case)","case","instance.","case","case.","case)","case","case","case.","case,","case,","particular","context.","case","case,","case)","case.","case","form","form","case","case","particular","case","order,","case.","case","context.)","iteration.","case","case)","case","case,","case,","case,","case,","exercise","case","case.","simple","case","class,","example.."],"in those":["conditional"],"in to":["be"],"in to_rna,":["but"],"in triple":["quotes."],"in two":["ways:","different","cases,","different"],"in unit":["tests.","tests"],"in units":["of"],"in use":["and"],"in useful":["Python"],"in using":["`filter()`."],"in value":["object"],"in variable":["names."],"in various":["ways"],"in vim,":["but"],"in well":["organised","known"],"in what":["you","is","is","is"],"in which":["case","to","case","seems","case","your","case","`Bob`","I","`Bob`"],"in with":["conversation","conversation","existing"],"in word":["tokens.","if"],"in word_count":["like:"],"in word_seq":["(after"],"in words.":["Can"],"in wrapping":["nucleotides"],"in xs":["if"],"in you":["code.","code.","case"],"in your":["code.","code?","exercises.","top-level","case.","initializer.","use","if-else","if-else","use","\"if","python","predicates,","first","initializer.","`if`","Python","Python","code","function.","class","first","namespace.","solution.","3rd"],"in yours":["hands!"],"in yyy`":["is","(readability"],"in zip(sequence,":["self.sequence)])"],"in, \"how":["can"],"in, added":["some"],"in, great":["use"],"in-place, mutating":["change."],"in. Thanks":["for"],"in. You":["may"],"in: `Fine,":["be"],"inaccurate types":["or"],"inaccurate, as":["I'm"],"incarnations, I":["did"],"incidental nulls":["vs."],"incidental programming":["errors."],"incidentally override":["module"],"include Bob's":["name"],"include a":["explicit"],"include commenting":["(beyond"],"include empty":["string"],"include file":["encoding"],"include some":["example"],"include the":["type"],"include yelling":["with"],"included and":["no"],"included in":["Python."],"included module":["level"],"included. There":["should"],"includes some":["documentation"],"includes underscores,":["which","which"],"including more":["\"intelligence\""],"including the":["__init__"],"incoming messages.":["This"],"inconsistant -":["you"],"inconsistency of":["methods."],"inconsistent with":["my"],"inconsistent wrt/":["capitalization"],"inconsistent: in":["one","some"],"inconsistent? Would":["it"],"inconvenient to":["deal"],"incorporated the":["feedback"],"incorporating your":["suggestions.","feedback"],"incosistient in":["style"],"increase both":["my"],"increase in":["code?"],"increase readability.":["Here's"],"increase the":["complexity.","readablilty","readability"],"increases the":["predicates"],"incrementing a":["variable"],"indeed be":["a"],"indeed better...":["minus"],"indeed came":["to"],"indeed encapsulating":["the"],"indeed get":["created"],"indeed much":["more"],"indeed not":["necessary."],"indeed stands":["for"],"indeed think":["you"],"indeed true,":["but"],"indeed ugly,":["but"],"indeed you":["need"],"indeed, returning":["early"],"indeed... but":["it's"],"indent, will":["that"],"indentation shows":["up"],"indentation, couldn't":["figure"],"indentation. How":["bad"],"indentations didn't":["hurt"],"indents. At":["least"],"independant from":["the"],"independantly) and":["in"],"independent from":["the"],"independent if":["is"],"independent of":["each"],"independent. You":["can"],"index \"backwards\"":["so:"],"index a":["string"],"index is":["also"],"index of":["the"],"index rather":["than"],"indexes and":["there's"],"indexes) -":["no"],"indexing (specially":["reverse"],"indexing with":["an"],"indexing. This":["is"],"indexing. ```s.endswith('?')```":["might"],"indexing/slicing when":["checking","checking"],"indexing/slicing. Both":["these"],"indicate that":["there","you're","it",":-)"],"indicate that.":["I"],"indicate the":["purpose"],"indicates that":["```"],"indication of":["what","WHY","*why*"],"indices for":["the"],"indices is":["confusing,"],"indices you":["can"],"indicies and":["figure"],"indirect test":["coverage"],"individual character":["appeared"],"individual functions":["rather"],"individual nucleotide":["(``str``"],"individual sides":["before"],"individual steps":["and"],"individual, so":["making"],"inefficient though,":["because"],"inefficient. Can":["you"],"inefficient. You":["can"],"inequality implies":["that"],"inexperienced python":["user,"],"inflexible. For":["example"],"influenced by":["the"],"info in":["units"],"inforce this":["invariant."],"information about":["the"],"information imparted":["by"],"information on":["proper","top"],"information provided":["in"],"information that":["is"],"infos on":["this)"],"inherent to":["the"],"inherit after":["`object`."],"inherit from":["`Enum`.","`object`)","`object`)","`object`)","`object`","`object`)","`object`","`object`","object,","`object`.","`object`.","`object`","`object`","`object`","`object`","`object`","`object`","`object`.","`object`.","`object`","the","object.\"?"],"inherit one's":["classes"],"inherit your":["classes","classes","classes","classes","classes","classes","classes","classes","classes"],"inheritance (read":["I'm"],"inheritance and":["I","whenever"],"inheritance as":["well,"],"inheritance model.":["There's"],"inheritance scenarios":["a","in"],"inheritance scenarios)":["but"],"inheritance scenarios.":["CamelCased"],"inherited `Responses`":["dictionary."],"inherited class.":["But"],"inheriting \"object\".":["Short"],"inheriting after":["`object`."],"inherits ``list``.":["``list.__contains__(nucleotide)``"],"inherits from":["object,"],"inializer --":["and"],"init function,":["but"],"init method":["is"],"init method,":["the"],"init? Is":["there"],"initalizer and":["just"],"initial \"if":["speech:\""],"initial attempt.":["I"],"initial implementation":[":p"],"initial strip":["only"],"initial thought":["process"],"initial thoughts":["were"],"initialised the":["value"],"initialization and":["resetting"],"initialization because":["it"],"initialization before":["loop"],"initialization function.":["I"],"initialization to":["a","the"],"initialization, you":["return"],"initialization. But":["that's"],"initialize ```answer":["="],"initialize `answer":["="],"initialize `vocab`":["once,"],"initialize an":["array."],"initialize dictionary":["with"],"initialize it":["in"],"initialize the":["`phrase`"],"initialize time":["is"],"initialize variable":["before"],"initialize, then":["use"],"initialized as":["an"],"initialized with":["a"],"initialized. You":["should"],"initializer (constructor)":["for"],"initializer /":["lazy"],"initializer ?":["Will"],"initializer and":["you'll","store","direct"],"initializer having":["different"],"initializer is":["either"],"initializer other":["than"],"initializer should":["try","make","be"],"initializer takes":["a"],"initializer will":["take"],"initializer would":["deal"],"initializer) because":["of"],"initializer, and":["you"],"initializer, before":["you"],"initializer, but":["technically"],"initializer, if":["the"],"initializer, my":["humble"],"initializer, part":["of"],"initializer. A":["\"word\""],"initializer. Ask":["yourself:"],"initializer. But":["doing"],"initializer. Oh":["and"],"initializer. That's":["already"],"initializer. This":["is"],"initializing at":["the"],"initializing the":["dict","dict","dict"],"initially and":["resetting"],"initially considered":["'re'"],"initially led":["me"],"injection by":["keeping"],"inline `Word.normalize`":["(it's"],"inline `self._normalize`":["call."],"inline both":["methods"],"inline comments":["of","is","above","or","right.","near"],"inline comments.":["I"],"inline documentation":["is"],"inline it":["(ie"],"inline. Added":["them"],"inlined \"c\",":["because"],"inlined --":["I"],"inlined all":["the"],"inlined the":["`alphagram`"],"inner DNA":["strand"],"inner loop":["at"],"input (actually":["`nil`"],"input (like":["`dna.DNA('P')`)"],"input -":["but"],"input =":["\"\""],"input Bob":["gets,"],"input I":["figured"],"input `re.findall`":["would"],"input against":["a"],"input and":["the","expose"],"input as":["little"],"input at":["start"],"input before":["passing","doing"],"input built-in":["function."],"input checks":["in"],"input could":["be","be"],"input data":["at"],"input data,":["and"],"input device":["instead"],"input ending":["with"],"input ends":["with"],"input if":["it"],"input in":["class","`__init__`"],"input interfaces":["as"],"input into":["`findall`"],"input is":["None`.","\"This","all","None```","`True`.","`\"something?","well-formed,"],"input needs":["to"],"input of":["course.","```?```"],"input on":["the"],"input or":["input.isspace()`"],"input really":["make"],"input sanitization":["would","rather","a","(in","so"],"input so":["you","you"],"input string":["is","by"],"input text":["should"],"input than":["`str1`?"],"input that":["only"],"input to":["string","it","remove"],"input transformed":["to"],"input validity":["latter"],"input was":["the","shouting."],"input will":["return"],"input with":["no"],"input, \"Fine.":["Be"],"input, doing":["some"],"input, why":["not"],"input. And":["I"],"input. But":["in"],"input. I":["just"],"input. I'll":["think"],"input. If":["you"],"input. Instead":["of"],"input. You":["would"],"input. didn't":["need"],"input.isspace()` vs":["`input.strip()==''`"],"input: not":["input,"],"input? The":["string"],"input? Would":["it","it"],"inputString`, according":["to"],"inputString`, you":["should"],"input_string` would":["hold"],"inputs and":["returns"],"inputs as":["soon"],"inputs at":["top"],"inputs in":["this","addition"],"inputs into":["their"],"inputs on":["borders","borders","borders"],"inputs validations":["are"],"insane in":["this"],"insensitivity by":["transforming"],"insensitivity. Print":["statement"],"inside Bob.hey":["seems"],"inside `__init__`,":["you"],"inside a":["separate"],"inside an":["`__init__`"],"inside functions/methods":["may"],"inside one":["single"],"inside the":["parentheses","method,","Bob","transcription","hey","comprehension,","class"],"inside your":["routine.","routine"],"inside-out, not":["left"],"insightful, invaluable":["feedback"],"insist (there":["can"],"insist on":["using","memoizing"],"inspect what":["a","a","a"],"inspired after":["seeing"],"inspired me":[":)"],"installed but":["\"python"],"instance (or":["any"],"instance (so":["no"],"instance -":["usually"],"instance ?":["Looks"],"instance as":["a"],"instance attribute":["?","anyway.","by","or","with"],"instance attributes":["of","on","on","?","and","in"],"instance could":["be","not"],"instance dictionary":["variable,"],"instance directly":["as"],"instance field":["that"],"instance for":["`Anagram.word`"],"instance if":["you","you"],"instance in":["the","any"],"instance is":["in"],"instance member.":["All"],"instance members":["should"],"instance method":["should","(don't","when","but"],"instance methods":["?","?","on","is"],"instance methods,":["class","I"],"instance msg.endswith(\"?\")":["or"],"instance nor":["class,"],"instance not":["class"],"instance of":["message","the","`MessageClassifier`","the","the"],"instance that":["takes"],"instance then":["on"],"instance variable":["so","as"],"instance variable,":["`hey()`","especially","it's"],"instance variables":["of","to","as"],"instance variables,":["are"],"instance was":["set"],"instance when":["they","they"],"instance yet":["the"],"instance you":["must"],"instance's state":["is","is"],"instance) can":["share"],"instance), part":["of"],"instance). `match`":["could"],"instance, and":["the"],"instance, how":["would"],"instance, no":["need"],"instance, not":["somewhere","a"],"instance, someone":["else"],"instance, the":["reasoning","string"],"instance, we":["could"],"instance, why":["do"],"instance. Also–I'm":["new"],"instance. Do":["you","you"],"instance. I'd":["also"],"instance. Might":["still"],"instance. Then":["again,"],"instance. There":["are"],"instance. What":["about"],"instance... To":["me"],"instance; a":["`@alexis`"],"instance; it's":["just"],"instance? Another":["solutions"],"instances of":["`Anagram`","`DNA`"],"instances would":["be"],"instanciating `Bob`":["twice"],"instantiate Bob":["in"],"instantiate a":["`timedelta`"],"instantiate the":["`timedelta`"],"instantiated a":["Sentence,"],"instantiating it":["and"],"instantiating them":["to"],"instantiation overhead":["+"],"instantly understand":["that"],"instantly? Also":["there"],"instead -":["but"],"instead --":["no"],"instead but":["there"],"instead could":["be"],"instead if":["you"],"instead keep":["it"],"instead of":["in","verbs","a","doing","`message","independent","returning","partial.","classes.","counting","`filter`,","line","calling","regexes","`text[-1:]","having","occurrences","`__len__`.","`sum`.","`self.message`,","if","comparing","regular","`s[-1]","`converse[-1]","sorting","magic","new-style","as","coding","text,","`upper()`?","a","just","trying","simply","`message`","just","wrapping","`elif`.","returning","an","returning","`elif`s.","having","`Bob._replies`","O(n","`x","`re.split`","`strip()","pyflakes,","splitting","`sort`,","findall.","`msg.strip()`","the","`s","the","resorting","a","a","the","`not","`Sure`.","mapping","an","calling","comparing","your","\"==","raising","creating","compiling","`silence`","the","functions","run","`s`","`statement","pythons","list","a","`phrase.upper()","```extract_words()```.","filter.","doing","using","making","two-stage","the","calculating","methods","relying","comparing","re.finditer.","throwing","`self.data.replace`?","doing","realizing","`python","just","simply","`query`","`len(phrase)","regexes.","indexing/slicing.","indexing/slicing","`if","indexing/slicing","indexing.","a","using","the","a","`defaultdict(lambda:","`self.strip_punctuation`,","`not","a","`str`.","doing","concatinate","assigning","`if","`class","`zip`","the","your"],"instead opting":["for"],"instead replace":["one"],"instead was":["a","a","a"],"instead write":["`sum(1"],"instead, as":["all"],"instead, or,":["even"],"instead. I":["think"],"instead. More":["info"],"insted of":["`@dixie`."],"instructions are":["pretty"],"instructions did":["not"],"int, otherwise":["looks"],"intact in":["case"],"intact. Your":["program"],"integer value,":["but"],"integer was":["passed","passed,"],"integers (hence":["make"],"integers as":["indices"],"integers to":["write"],"integers. You":["could"],"integrity of":["``number``","number"],"intend it":["that"],"intend of":["the"],"intend to":["ever"],"intended as":["a"],"intended for":["the"],"intended to":["be\"","do?","be"],"intending to":["guard","initialize","allow"],"intent -":["ie,"],"intent a":["bit"],"intent becomes":["clear"],"intent behind":["the"],"intent better":["than"],"intent clear.":["The"],"intent clearer.":["Could"],"intent clearly.":["You"],"intent more":["precisely."],"intent of":["the","the","this","the","the","what","`s.upper()","the"],"intent that":["they"],"intent through":["code."],"intent to":["a"],"intent would":["be"],"intent, but":["the"],"intent-oriented naming":["and"],"intent-oriented. I":["could"],"intent-revealing methods":["--"],"intent-revealing names":["to"],"intent-revealing names.":["\"if"],"intent. No":["reordering"],"intent. `is_question`":["on"],"intent... or":["am"],"intent: it's":["shouting"],"intention expressing":["helper"],"intention revealing":["name."],"intention was":["to"],"intention-revealing message.":["The"],"intentional nulls":["vs."],"intentionally used":["the"],"interested if":["I'm"],"interested in":["`collections.Counter`","what"],"interested to":["know"],"interesting approach":["to"],"interesting approach.":["Generally"],"interesting bit":["of"],"interesting code!":["I"],"interesting collection":["classes."],"interesting idea.":["Why"],"interesting point":["about"],"interesting problem":["than"],"interesting re.":["use"],"interesting solution":["treating"],"interesting submissions":["I've"],"interesting task.":["Simple"],"interesting that":["`return"],"interesting, I'll":["try"],"interesting, I'm":["not"],"interesting. Counter":["seems"],"interface -":["have"],"interface according":["to"],"interface afterwards,":["sipping"],"interface and":["powerful"],"interface as":["par","par"],"interface because":["it","it"],"interface in":["variable","attribute"],"interface is":["`Phrase.word_count`,"],"interface means":["less"],"interface of":["objects"],"interface right":["off"],"interface so":["smaller"],"interface to":["Bob"],"interface, but":["that"],"interface, mostly":["because"],"interface. I":["picked"],"interface. If":["in"],"interface. Main":["point"],"interface. Method":["names"],"interface. Now":["additional"],"interface? I":["know"],"interfaces as":["wide"],"interfaces or":["classes"],"interfaces some":["times."],"interfaces. You":["could"],"internal Response":["class"],"internal and":["private,"],"internal constant.":["I"],"internal count":["and"],"internal data":["of"],"internal functions.":["This"],"internal helpers":["because"],"internal list":["somewhere"],"internal methods":["and","using","private"],"internal representation":["without","as","as"],"internal state":["(though","wouldn't"],"internal use":["(private)","only?"],"internals doesn't":["care"],"interpret the":["query","message."],"interpretation of":["the","sentence","`text`"],"interpretation, when":["you"],"interpreted by":["machines.","humans.","Bob."],"interpreted in":["various"],"interpreted the":["same"],"interpreter will":["throw"],"interprets messages.":["For"],"interrobangs? If":["the"],"interrobangs? Inheritance":["would"],"intersection, but":["some"],"intializer remains":["the"],"into 1":["and"],"into \u003ca":["href=\"http://docs.python.org/3/library/collections.html#counter-objects\"\u003ecollections.Counter\u003c/a\u003e"],"into Pocket":[":)"],"into Python":["standard","book"],"into Python,":["and"],"into [Alphagrams](http://en.wikipedia.org/wiki/Alphagram),":["where"],"into `Bob`":["though"],"into `Counter`":["in"],"into `collections`":["standards"],"into `findall`":["and"],"into `hey()`.":["Could"],"into `is_message_type_A,B,C`":["functions?"],"into `is_scream(text)`-like":["thing."],"into a":["method","habit","habit","list!","class.","separate","separate","string","computed","simple","DSL","well-named","method,","function","*method*","function","return","separate","corner.","one-liner","generator","property","method."],"into account":["that,","dealing","other","words"],"into account,":["and"],"into an":["object","environment"],"into another":["method"],"into chunks":["as"],"into class":["methods"],"into classes":["that"],"into domain-y":["private"],"into explicitly,":["i"],"into external":["functions."],"into extra":["methods."],"into functional":["vs"],"into functions":["or","or","like","to"],"into functions,":["to"],"into half":["a"],"into hardcoding":["precedence"],"into helper":["functions,"],"into individual":["steps"],"into internal":["methods"],"into it's":["own"],"into its":["own"],"into methods":["whose","or","but"],"into methods,":["to"],"into methods?":["It"],"into more":["lines"],"into negative":["numbers?"],"into nil":["vs."],"into normalize":["as"],"into one":["definition"],"into property)":["could"],"into separate":["methods","methods?","methods?","methods","methods","methods?","functions.","methods?","methods?","methods","methods?","methods?","methods","functions"],"into some":["well"],"into something":["more"],"into standalone":["functions"],"into system":["removes"],"into that":["DSL"],"into the":["object.","standard","breach...","habit","habit","`differences`","habit","function","habit","Bob","module","routine,","habit","habit","habit","habit","habit","habit","habit","habit","habit","future","word_count","habit","constructor","bob","code,","presentation","simple"],"into their":["own","own","own","expected","own","own"],"into these":["\"new-style"],"into this":["implementation!"],"into this,":["but"],"into this.":[";)"],"into three":["subroutines."],"into too":["much"],"into two":["-"],"into using":["`isspace`"],"into variables":["or"],"into words":["in"],"into your":["normalization","`to_rna`","first"],"introduce a":["variable"],"introduce another":["weird"],"introduce the":["translate."],"introduced a":["python"],"introduced constants":["for"],"introduced, I":["tend"],"introducing undesired":["whitespace"],"introducing, for":["example,"],"introduction section":["of"],"intuitive i":["think:"],"intuitive if":["you"],"intuitive solution.":["I"],"intuitive than":["`message.split()`"],"intuitive, at":["least"],"intuitively seems":["to"],"intuitively solve":["the"],"invalid input":["I"],"invalid numbers)":["as"],"invalid value,":["``'(01'``."],"invalid, just":["unusual."],"invaluable feedback":["on"],"invaluable. [http://sideeffect.kr/popularconvention#python](Popular":["Coding"],"invariants if":["someone"],"invariants maintained":["by"],"invariants. Wether":["the"],"inverse map":["from"],"inverted regexp":["instead"],"inverting it,":["but"],"inverting the":["first"],"investigate the":["`translate`"],"invisible characters,":["but"],"invite you":["here"],"invoke `lower`":["on"],"invoke name":["mangling,"],"invokes it":["to"],"involuntarily ask":["myself"],"involve multiple":["returns."],"involve unicode":["data"],"involved an":["import,"],"involved in":["the"],"involved or":["changed."],"involved then":["it"],"involves creating":["the"],"ipdb (ipython":["debugger)"],"irrelevant for":["a"],"irrelevant, orthogonal":["details."],"irreverent tone":["of"],"is \"Batteries":["Included.\""],"is \"Fine,":["be"],"is \"This":["is"],"is \"converted\"":["to"],"is \"no-op\"":["constructor."],"is \"obj":["is"],"is \"private\"":["and"],"is \"protected.\"":["I"],"is ''":["or"],"is ''`":["is"],"is 'all_lower_with_underscores'":["for"],"is 'letters'":["really"],"is 'you'":["who"],"is *much*":["cleaner"],"is *really*":["private"],"is -":["deciding","I"],"is ...":["misleading."],"is /":["is"],"is 1":["or"],"is 2.x":["only)."],"is 5x":["faster"],"is :":["don't"],"is Falsy.":["(Refer"],"is IMO":["a"],"is None":["or","or","or","else","or"],"is None)":["#"],"is None`":["(ie.","instead","check","or","instead.","is","from","which","is"],"is None`,":["but"],"is None`.":["There","You","Python"],"is None```":["evaluates","would"],"is O(n)":["instead"],"is OK.":["Also,"],"is Python":["and","not",":)","3"],"is Python,":["not","can"],"is True`":["in"],"is True`.":["But"],"is _easiest_":["and"],"is _much_":["smarter"],"is _really_":["going"],"is _still_":["flawed."],"is `\"":["\"`?"],"is `\"something?":["\"`?"],"is `.isupper()`":["method."],"is `Bob._is_silence`":["etc,"],"is `None`":["the","or"],"is `None`.":["You"],"is `Phrase.word_count`,":["so"],"is `else`),":["because"],"is `else`).":["So","So","So","So"],"is `input.isupper()`":["attempting"],"is `isupper`,":["I"],"is `latin-1`,":["before"],"is `pass`.":["--"],"is `phrase.isupper()`":["attempting"],"is `response`":["on"],"is `self`,":["you"],"is `str.endswith`":["as"],"is `string`":["you"],"is `strn`":["the"],"is `toBob.isupper()`":["attempting"],"is `to_rna`,":["so"],"is `word_count`.":["Either"],"is `xxx?!`,":["then"],"is a":["possible","good","little","pretty","good","beautiful","method","python","bit","method","pretty","of","little","personal","method","better","nice","valid","form","good","lackadaisical","matter","bit","lot","Counter\".","little","neat","good","bit","good","bit","bad","question,","risk","good","public","public","copy,","copying","bit","better","very","pretty","better","bit","very","bit","default","better","question","nod","subclass","step","bit","question","weird","method","default","sane","SPOT","feature","single","class","little","feature","single","bit","string,","bit","little","matter","definite","syntax","really","list","bad","method,","great","step","question.","super","move","good","public","tiny","minor","\"special","plain","stateless","`str`","sensible","hammer\".","string","standard","internal","good","name","string.","slight","bit","(weak)","string","class","pretty","built-in","good","subclass","valid","bit","bad","nice","good","phrase","fantastic","much","law","string","horrible","potential","debate","string","string,","purpose","purpose","purpose","bit","bit","function","thing.","generator","quick","little","really","moot","simpler","class,","creative","cleaner","simpler","more","list","huge","second","bit","bit","sequence","nice"],"is about":["as","could"],"is absolutely":["redundant."],"is accurate":["but"],"is achieved":["rather"],"is actually":["being","a","the","clearer,","intelligible","necessary,"],"is adding":["unnecessary"],"is admirable,":["but"],"is admittedly":["very"],"is advisable":["not"],"is after":["each"],"is against":["the"],"is all":["caps","uppercase.","uppercase.","uppercase.","uppercase.","about","upper-case;","caps.","caps.","upper"],"is almost":["always","a","character-for-character"],"is along":["the"],"is already":["_way_","defined","a","falsy,","upper"],"is also":["reasonable:","more","in","appropriate.","appropriate.","stateless,","a","rather","helpful","counted"],"is always":["a","truthy","the","above"],"is amazingly":["an"],"is an":["explicit","interesting","old-style","explicit","example","important","elephant\"?","elephant\".","extremely","iterable.","iterable","anagram","instance","odd","accidental","error.","unnecessary","empty","interesting","instance","issue","end"],"is analysing":["the"],"is another":["good"],"is any":["alpha"],"is appreciated":[":)"],"is appropriate":["for","in"],"is appropriate.":["The"],"is arguably":["more"],"is as":["simple","good","follows:"],"is asking":["a"],"is assuming":["\"\""],"is at":["best","top,","least","the"],"is attempting":["to","to","to"],"is awesome.":["Good"],"is bad":["because"],"is based":["around","on"],"is basically":["````nil````","the"],"is because":["Statement","t"],"is being":["shouted","really","addressed.","yelled.","asked."],"is better":["than","than","than","than","to","to","since","spelled","to","because","than","to","to","than","than","than","than","than","because","than"],"is better,":["but"],"is bit":["bloated,"],"is blank":["first"],"is both":["functional","inconsistent"],"is brittle":["at"],"is buried":["in"],"is by":["itself?","itself.","doing:"],"is called":["those","nitpicks","it","while"],"is called.":["Not","If"],"is captured":["by"],"is certainly":["not"],"is changed":["to"],"is check":["for"],"is checked":["out"],"is checking":["for","for"],"is class":["creation?"],"is cleanly":["separated"],"is clear":["enough","and","without"],"is clear,":["the","concise,"],"is clear.":["Cheers!"],"is clever":["and"],"is common":["enough","to"],"is complete":["instead"],"is concise":["and","and"],"is configured.":["Is"],"is conflating":["two"],"is confusing":["if","(at"],"is confusing,":["why"],"is considerably":["faster,"],"is considered":["unpythonic.","very","bad","bad","a","all","Falsy,"],"is constructed":["it"],"is cool,":["and"],"is correct":["a","translation"],"is correct,":["but"],"is create":["a"],"is created,":["it's"],"is darn":["confusing."],"is debatable,":["but"],"is deff":["interesting,"],"is defined":["in","in","in"],"is definitely":["more","more","not","non-standard","the"],"is dictated":["by"],"is different":["then","from"],"is difficult,":["but"],"is discouraged":["in"],"is doing":["(I","because","too","two","two"],"is doing.":["Try","The","For"],"is doing:":["it"],"is done":["at"],"is double-underscore":["very"],"is duplicated.":["You"],"is easier":["to"],"is easy":["enough","to"],"is either":["the","`None`","already","`None`","`True`"],"is elaborate":["enough"],"is empty":["or","or","I'd","is"],"is enough":["for"],"is enough.":["In"],"is entirely":["lost.","appropriate."],"is equal":["to","to","to","to"],"is equivalent":["to","to"],"is especially":["disturbing","odd,"],"is essentially":["\"first","string.replace."],"is evaluating":["to"],"is even":["better","simpler."],"is exactly":["designed","what","what"],"is excessive.":["One"],"is expected":["to","to"],"is expected),":["I"],"is explicit":["references","enough"],"is exposed),":["and"],"is extremely":["cool."],"is factored":["out"],"is fairly":["clean,","clear.","opaque."],"is falsy":["in","in"],"is falsy`":["if"],"is favored,":["and"],"is fine":["with","but","but","but","but","but","but","but","but"],"is fine,":["but"],"is fine.":["I'd","I"],"is fixed":["in"],"is flawed":["-"],"is for":["when","protected","decorators"],"is for.":["Python's"],"is forgotten),":["rendering"],"is formed":["by"],"is found":["in"],"is from":["Brandon","Brandon"],"is fun":[":)"],"is generally":["standard","reserved","reserved"],"is given":["to"],"is going":["to","to","away.","on","to","on.","wrong,"],"is gone":["from"],"is good":["or","that","fit","habit","habit","use"],"is good.":["The","It","It's"],"is great":["practice.","as"],"is great!":["I"],"is great,":["because"],"is great.":["I"],"is greatly":["appreciated."],"is growing":["on"],"is guaranteed":["in"],"is handling":["exceptions."],"is handy":["because"],"is handy.":["I"],"is happening":["there."],"is happening,":["even"],"is hard":["to"],"is having":["`None`"],"is here":["already"],"is here:":["http://docs.python.org/2/library/stdtypes.html#string-methods"],"is highly":["unpythonic."],"is how":["hard","I","it"],"is identical":["to"],"is idiomatic":["to"],"is idiomatically":["done"],"is if":["the","whole","whole"],"is immediately":["more"],"is implementation":["detail."],"is implemented":["in"],"is implicitly":["communicated"],"is important":["not","here"],"is important,":["but","but"],"is in":["the","Bob's","a","fact","all","all","details,","English,","order.","expressing"],"is inconsistent:":["in"],"is inconsistent?":["Would"],"is indeed":["encapsulating","not","much","true,"],"is intending":["to"],"is interesting":["solution"],"is invaluable.":["[http://sideeffect.kr/popularconvention#python](Popular"],"is it":["more","really","a","better","bad","if","\"digits\"","initialised","better"],"is iterable":["of"],"is itself":["separated"],"is just":["using","a","overkill.","as","fine","a","not","reading","one","plain","totally","a","an","guidelines","to","one","fine.","a"],"is kind":["of","of","of","of"],"is lazy":["evaluation,"],"is less":["about","readable","clear","efficient","efficient"],"is like":["restricted"],"is located":["below","in"],"is logically":["equivalent"],"is longer,":["and"],"is looked":["first"],"is looking":["good.","really"],"is looks":["better"],"is made":["non-public.","obvious"],"is maybe":["extracting"],"is meant":["to"],"is minor),":["but"],"is misleading":["2."],"is misleading.":["You","Reserving"],"is missing":["a"],"is missing,":["but"],"is more":["explicit","just","succint","complicated,","efficient","readable","readable.","suitable","succinct,","compact","confusing","what","readable","explicit","of","confusing.","than","readable","duplication.","implementation-oriented,","intent-oriented.","readable","expressive","useful","readable,","efficient","readable","readable","pythonic.","readable?","efficient","pragmatic.","idiomatic","powerful","readable.","robust","robust","idiomatic","clear,","clear"],"is mostly":["an","syntactic"],"is much":["better.","better.","better.","less","better.","more","better","better","appreciated.","more","more","cleaner.","more","easier","more","longer"],"is my":["personal","second","first","english","first","preferred","attempt","clean","first","fault!"],"is named":["`bob`"],"is neat":["way"],"is neat,":["like"],"is necessarily":["a"],"is necessary":["(so","in","here","in","after","for"],"is necessary.":["I"],"is needed":["here.","because"],"is needed.":["When"],"is never":["None...","called"],"is new":["project","to"],"is nice":["here,","too.","boolean","and","habit","and"],"is nice,":["but","but","but"],"is nicer":["so"],"is nitpicking":[";-)"],"is no":["inheritance","cased","need","such","strong","strong","strong","such","need","more","difference","need","point","benefit","longer","use","need","letter","(simple)","use"],"is none":["of"],"is not":["exactly","super","the","to","None:","apparent","merely","supposed","only","really","used","idiomatic.","required","used","None","required","required","necessary.","very","the","None`","needed","really","the","considered","the","what","really","necessary,","DRY.","asymptotically","a","a","really","evident","None`","pythonic.","really","the","None`","C++","upper","a","used","harder","necessary","necessarily","too","so","identifies","for","brutally","yelling","200+","needed","necessary.","effective.","needed.","necessarily","the","going","the","needed,","directional,","a","to","necessary.","in","the","empty,","what","a","necessary","necessary","a","considered"],"is not,":["is","and"],"is not.":["For"],"is nothing":["special."],"is now":["line","called"],"is now,":["are"],"is nowhere":["near"],"is of":["what","type","length"],"is off":["in"],"is often":["not","more","written"],"is ok":["here,"],"is ok,":["but"],"is okay.":["I"],"is old":["style"],"is ommitted":["when"],"is one":["of","of","way","other","large"],"is only":["one","responsible","awkward","needed","is"],"is open":["for"],"is operating":["at"],"is opportunity":["to"],"is order":["dependent."],"is out":["there"],"is overkill":["for"],"is overkill.":["You","At"],"is overly":["complicated","verbose,","complicated."],"is part":["of","of","of"],"is passed":["as"],"is passed.":["But"],"is passing":["all"],"is perfect":["solution.","fit."],"is perfectly":["fine,"],"is performed":["at"],"is playing":["havoc"],"is preferred":["over"],"is pretty":["good","explicit","good,","clean.","straightforward,","cool"],"is private":["to","field."],"is private,":["you"],"is probably":["a","more","lazy.","a","re-factoring","hardwired","over"],"is procedural":["or","code"],"is provided?":["It"],"is public":["and","and"],"is public,":["one"],"is python's":["built-in"],"is pythonic":["and"],"is questionable":["in"],"is quite":["clear","short,","long,","confusing.","complicated","inconsistent:","impossible","short.","alright.","structured.","simple","long","readable,","simple"],"is rarely":["used.","used"],"is rather":["deprecated.","extreme","high","uncommon","odd.","inflexible."],"is readable":["and","(except"],"is really":["necessary","necessary","a","implementation","a","a","a","'Language'","the","your","useful,","a","a","open","just","KISS.]","helpful","deep"],"is recognised":["properly"],"is recommended":["to","to","to","to","by","by","by","by","by","by","by","way","way","way","to","way","by","by","way","for","way"],"is recursively":["calling"],"is redundant":["and","since",";-)"],"is redundant,":["as"],"is redundant.":["Just"],"is regex":["so"],"is reinventing":["the"],"is replaced":["by","by"],"is required":["in","by","to"],"is required)":["and"],"is required?":["Of"],"is reserved":["exclusively","for","for"],"is responsible":["for","to","for","for","for","gathering"],"is right":["for","in"],"is robust":["enough"],"is room":["to"],"is safe":["to"],"is sandbox":["experimentation"],"is seems":["to"],"is self-descriptive,":["which"],"is self-explanatory":["and"],"is self-explanatory.":["Chained"],"is separated":["from"],"is sexy,":["imo."],"is short":["and","enough."],"is shortcut":["for"],"is should":["be"],"is shouting":["or"],"is shouting,":["a"],"is significant":["in"],"is silence,":["the"],"is silent,":["shouldn't"],"is similar":["to","to"],"is simple":["and","using","enough","code.","and"],"is simple,":["readable,"],"is simpler":["using","than"],"is simplest":["thing"],"is simplified":["and"],"is simplistic":["and"],"is simply":["a","personal"],"is slightly":["inaccurate,"],"is small":["and"],"is smaller":["with"],"is smart":["enough","enough"],"is so":["simple...","much","small,","much","pythonic","short.","short","much","much"],"is solid,":["clean"],"is some":["overhead","handy","standard","good","kind","duplication."],"is something":["like","like","in","that","new","wrong"],"is sorta":["\"interface\""],"is sorted":["by","wrong"],"is special":["method"],"is specific":["to"],"is specified":["it"],"is spelled":["`str.replace('","`()`."],"is spot":["on"],"is stateless.":["As"],"is static":["so"],"is sticking":["to"],"is still":["defaulted","not","there,","necessary","not","considered","mainly","fugly","contained","a"],"is stored":["is"],"is str`":["in"],"is straight":["forward"],"is succinct.":["Also,"],"is such":["a","a"],"is sufficient":["and"],"is superfluous":["here."],"is superfluous.":["I"],"is supposed":["to"],"is surely":["a"],"is sweet.":["I"],"is taken":["to"],"is tested":["for"],"is that":["this","there's","non-public","code","the","the","overkill?","It","the","the","python","the","it","Greeting","it","at","it","in","with","IMHO","if","not","(even","it's","passing","it","it","`self.sequence`","if","makes","I","the","the","Python","line","I","I'm","you're","you're"],"is the":["best","data","one","important","second","first","sexiest","point","right","standard?","T-U","naming","true","same,","implication","same","standard","case","first","obvious","consensus.","(optional)","first","identity","new","\"system\"'s","use","better","new","translation","identity","expected","very","what","plain","`string`","special","issue","most","same","same","more","right","over","first","shortest!","first","use","identical","same","test","argument","addition","class","goal","best","duplication","same","same","right","first","name","`del","simplest","benefit","most","only"],"is there":["a","a","a","a","a","an","mainly","another","a","a"],"is there).":["Looks"],"is therefore":["separated"],"is this":["intended","what","more","message","syntax,"],"is to":["be","not","use","use","use","make","create","write","keep","test","build","make","avoid","use","use","make","use","not","make","use","move","do","use","just","make","wrap","move","deal","strip","return","return","have","catch","emphasise","use","identify","appease","just","write"],"is too":["much","much","cluttered","verbose,","verbose.","complex,"],"is totally":["useless","fine."],"is trivial":["peace"],"is true":[","],"is trying":["to","to","to"],"is ugly":["-"],"is ultimately":["better"],"is unclear":["why"],"is unclear.":["Whenever"],"is undefined.":["That"],"is unnecessary":["and","since"],"is unnecessary.":["There's","Check","Other","String"],"is unofficially":["to"],"is unpythonic":["_and_"],"is unused.":["I"],"is updated":["in"],"is uppercase":["or","and","and","because","as"],"is used":["to","to","in","for","there)."],"is used,":["the","the"],"is useful":["if","to"],"is useful,":["but"],"is useless":["(and","IMHO","IMHO","after"],"is useless.":["Either"],"is using":["generator,"],"is usually":["spelled","spelled","done","spelled","a","`self`"],"is valid":["for"],"is valid,":["since"],"is very":["popular","gross,","limited,","close","delicate","worthwhile","common","good","succinct,","individual,","clear.","data-driven","good","seldom","good","good","usefull","minor,","good","readable","clear,","interesting","wide,","slow","similar","logical.","simple.","readable"],"is viewed":["by"],"is was":["a"],"is wasteful,":["I"],"is weary":["to"],"is weird.":["Maybe"],"is well-formed,":["i.e."],"is what":["I","the","the"],"is why":["I","it","I","I","I","the"],"is with":["a","list"],"is writen":["in"],"is written":["with",":)"],"is written,":["the"],"is yelled":["at","at"],"is yelling,":["a"],"is you":["might"],"is your":["friend","reasoning","naming"],"is zero":["you'll"],"is\", Q&D,":["passes"],"is, but":["I"],"is, not":["overly"],"is, rather":["than"],"is, so":["you"],"is, someone":["might"],"is, the":["decorated","class"],"is, to":["make"],"is. Does":["that"],"is. I":["think","think"],"is. Just":["one"],"is. More":["on"],"isAllCaps do":["you"],"isBlank method":["could"],"isQuestion, one":["of"],"isSilent? Better":["yet,"],"isUppercase` is":["equivalent"],"is_* methods":["out","are"],"is_anagram() as":["I"],"is_anagram_of ```":["could","should"],"is_count_zero() and":["say()"],"is_empty(s): return":["len(s)"],"is_exclamation(), I":["started"],"is_exclamatory method":["would"],"is_question (see":["http://docs.python.org/2/library/stdtypes.html#str.endswith)."],"is_question functions":["increase"],"is_question() would":["become"],"is_question(), you":["can"],"is_question(message): return":["message[-1]"],"is_question(msg): return":["'Sure.'"],"is_shout(msg): return":["'Woah,"],"is_shout(prompt) &&":["prompt.endswith(\"?\")`"],"is_shouting and":["is_question"],"is_shouting is":["more"],"is_shouting, and":["I"],"is_silence, try":["checking"],"is_silent ```":["is"],"is_silent function":["is"],"is_silent in":["the"],"is_silent(msg): return":["'Fine."],"is_singular_noun(), is_count_zero()":["and"],"islower check":["on"],"isn't 'aggressive'":["spelled"],"isn't None":["before"],"isn't ```REPLIES```":["a"],"isn't a":["problem","valid","big","nitpick","`basestring`"],"isn't actually":["necessary","helpful"],"isn't an":["exact","issue"],"isn't as":["if"],"isn't better":["choose."],"isn't compatible":["with"],"isn't done":["the"],"isn't enough":["and"],"isn't good":["enough"],"isn't how":["it's"],"isn't immediately":["obvious."],"isn't intended":["to"],"isn't it":["better"],"isn't just":["an"],"isn't likely":["to"],"isn't mandatory":["constructors"],"isn't necessarily":["an"],"isn't necessary":["to","here,"],"isn't necessary.":["Consider"],"isn't needed":["for"],"isn't needed,":["spoke.endswith"],"isn't needed.":["I"],"isn't nice":["either."],"isn't one":["of"],"isn't our":["goal."],"isn't really":["a"],"isn't sensitive":["to"],"isn't that":["kind","bad","hard,"],"isn't the":["case","case.","most","use"],"isn't used":["anywhere."],"isn't very":["meaningful.","pythonic."],"isn't working":["for"],"isn't. I":["would"],"isolated it":["out"],"issilence() and":["not"],"isspace method.":["This"],"isspace/0` all":["of"],"issue (definitely":["not"],"issue -":["I"],"issue I":["had","have","have"],"issue about":["the"],"issue and":["I"],"issue as":["far"],"issue describing":["the"],"issue here,":["I"],"issue on":["the"],"issue where":["each"],"issue with":["programming...","putting","it,"],"issue you":["stated."],"issue, I":["think"],"issue. Your":["suggestion"],"issues in":["a","cases"],"issues with":["\u003ccode\u003e_is_shouting\u003c/code\u003e."],"issues; did":["I"],"isupper &amp;":["endswith),"],"isupper (thanks":["for"],"isupper and":["endswith"],"isupper function":["than"],"isupper() already":["takes","tests"],"isupper() and":["strip()."],"isupper() built":["in,"],"isupper() on":["the"],"isupper() seems":["to"],"isupper() tip,":["I"],"isupper() would":["deal"],"isupper(), I":["just"],"isupper(), so":["I"],"isupper()`method. This":["is"],"isupper, which":["will"],"it \"digits\"":["on"],"it \"private\"":["here."],"it (`STRIP_PUNCTUATION`)":["since"],"it (and":["the"],"it (ie":["`for",":"],"it (python":["doesn't"],"it (which":["Counter"],"it *needs*":["to"],"it :)":["Cheers!"],"it Works\"":["state."],"it _not_":["being"],"it `\"some":["question"],"it `_phrase`":["to"],"it `_responses`)":["and"],"it `_s`":["to"],"it `anagram_candidates`":["could"],"it `sorted_lower`":[":-)"],"it `statement`,":["but"],"it `this`":["if"],"it a":["dict","bit","bit","name","bit","little","bit","bad","distinct","property","different","valid","subclass","hidden","dictionary.","method","bit","trade","generator","dict?","try.","local","spot","bit?"],"it about":["thrice"],"it actually":["is","muddies","makes","works."],"it adds":["to"],"it after":["several","several","several"],"it again":["in"],"it all":["the"],"it along":["the"],"it already":["provides"],"it also":["counts","requires","be"],"it always":["the","passes","failed."],"it an":["attribute","alias"],"it and":["I","for","it","have:","you'll","would","the","then"],"it apparently":["involved"],"it appears":["that","I","I"],"it appends":["itself"],"it as":["one!","a","simple","an","a","a","single-line","is.","simple","an","DNA","a","many","a","you've","simple","simply","a","a","per"],"it at":["that","the","least","the","that."],"it back":["and"],"it bad":["practice"],"it be":["better","better","possible","better","better","clearer","better","better","better","any","possible","a","better","more","something","improved?","simpler","that","simpler"],"it became":["clear","straightforward."],"it because":["it's","now","it's"],"it becomes":["a"],"it before.":["I"],"it behaves":["when"],"it being":["global?","a","a"],"it believed":["to"],"it better":["now.","now.","now?","to","to","not"],"it brings,":["that"],"it brings.":["I"],"it by":["moving","incorporating","prefixing","a"],"it came":["to"],"it can":["be","change","get.","cause","be.","be","be","be","be","process","replace"],"it can't":["handle"],"it carefully":["to"],"it carries":["clear"],"it causes":["tests"],"it changed":["the"],"it cheaper":["to"],"it cheating":["for"],"it check":["that","if"],"it checks":["for","only"],"it clear":["that","that","what"],"it clearer":["what"],"it comes":["to","to","to","to","to"],"it complicates":["code"],"it considered":["bad"],"it consistent,":["why"],"it contains":["a"],"it convey":["the"],"it could":["be","be","be","represent","prevent","be","be","be","be","just","be","be"],"it cut":["off"],"it decoupled":["the"],"it definitely":["depends"],"it demonstrations":["use"],"it describes":["what"],"it did":["not","only"],"it didn't":["need","work,"],"it differently.":["I"],"it directly":["into"],"it directly.":["Also,"],"it doe":["not"],"it does":["not","work","not","not","not","have","(`if","make","is","not","not"],"it does,":["and","I'll"],"it does.":["List"],"it doesn't":["contain","really","make","really","pick","mean","respect","pass","pass","matter.","have","necessarily","have","mean","take","meter","require","fully","need","fully","construct","look","provide"],"it don't":["subscribe"],"it each":["time"],"it easier":["to","for","to","to","to"],"it easy":["to","to"],"it either":["has"],"it either,":["until"],"it encapsulates":["the"],"it ends":["up","with","with","with","with."],"it even":["effect","clearer","out","further.","more","more"],"it eventually":["gets"],"it ever":["change?"],"it every":["time","time,"],"it existed":[";)"],"it expects":["a"],"it explicitly":["clear"],"it extensible!\".":["Now,"],"it facilitates":["refactoring."],"it fail":["cleanly"],"it feels":["very","like"],"it felt":["wrong","like"],"it first":["and"],"it fits":["perfectly","better","on"],"it follows":["kiss"],"it for":["the","this","how","the","more","grammar","given","each","readability.","the","you"],"it from":["other","the"],"it further,":["it's"],"it gets":["used","\"right"],"it gives":["an"],"it got":["me","taken","pretty"],"it grew":["from"],"it had":["a"],"it happens":["I"],"it harder":["to"],"it has":["changed","any","quite","quite","the","very","already","couple","everything","to"],"it have":["many"],"it helps":["to"],"it here":["anyway,","\u003ca\u003ehttp://www.tutorialspoint.com/python/string_endswith.htm\u003c/a\u003e"],"it here:":["http://stackoverflow.com/a/54873/477048","http://stackoverflow.com/a/54873/477048"],"it if":["you","you","necessary.","the","I"],"it ignores":["anything"],"it implements":["the"],"it in":["the","two","any","a","the","the","that","the","terms","the","3","a","a","my","Python?","next","Python?","interactive","the","first","a","list","a","either","`word_count`,","order","a"],"it in.":["Thanks"],"it inherits":["``list``."],"it initialised":["the"],"it instead":["of"],"it into":["a","the","a"],"it is":["some","viewed","now,","there).","doing","part","misleading","just","recommended","more","not","very","succinct.","supposed","-","better","just","recommended","recommended","not","much","not","better","smart","a","called.","much","almost","called","rarely","usually","guaranteed","to","a","a","not","not","sufficient","private","`latin-1`,","used,","`len(num)`.","operating","checking","empty.","written,","still","doing.","private","really","simplest","required","recommended","recommended","nice","easy","small","recommended","good","recommended","recommended","recommended","good","unclear","so","more","advisable","yelling,","not","that","-","'you'","not","recommended","common","not.","more","short","looks","so","not","the","more","necessary","doing.","the"],"it is,":["so","not","rather"],"it isn't":["sensitive","intended","needed.","really","necessary"],"it it":["really"],"it just":["made","looks","returns.","before","won't","looked","checks"],"it keeps":["them"],"it kinda":["more"],"it later":["is"],"it latter":["-"],"it lazy":["on"],"it leaves":["the"],"it less":["misleading."],"it like":["a","that?","that."],"it lists":["all","all"],"it locally":["was"],"it look":["very","nicer","nicer","nicer","nicer","nicer","nicer","nicer"],"it looked":["more"],"it looks":["pretty","good","good.","to","like","good.","even","like","any","a","great!","good","great","better","cleaner","nicer","nicer","cleaner.","confusing."],"it made":["some","the","the"],"it maintains":["no"],"it make":["more","sense","some","sense","sense"],"it makes":["difference","definition","it","sense","a","it","the","reading","sense","it","it","sense","the","things","sense."],"it maps":["characters"],"it match":["the","the"],"it matters":["that"],"it matters.":["If"],"it may":["clear","be","be","simply","be"],"it me":["or"],"it mean":["a"],"it means":["nothing,","to","you"],"it might":["be","not","be","make","even","be","be","be"],"it misses":["out"],"it modifies":["the"],"it more":["explicit,","readable/understandable.","clear","readable.","confusing,","readable","clear","resdable","self","clear","clear","effective","readable.","modular","readable,","pythonic,","clearly?","readable.","clear","clear","clear","of","elegant","obvious","expressive","readable,","clear.","explicit"],"it much":["better","more","easier","simpler","better"],"it multiple":["times"],"it must":["not"],"it myself,":["but"],"it named":["that"],"it necessary":["to"],"it needs":["handling","to","to","to","to","to","to"],"it nicely":["pythonic"],"it no":["more"],"it not":["to","be"],"it now":["I","is"],"it now,":["splitting"],"it now.":["lesson"],"it obfuscates":["the"],"it on":["every","a","purpose"],"it once":["and"],"it only":["ends","does","once...","returns","considers","considers"],"it or":["don't"],"it out":["of","from","the","barring","to","to","into"],"it outside":["the"],"it over":[":P","and","and"],"it overwrites":["a"],"it pass":["?"],"it passes":["a","and"],"it plays":["out."],"it pleases":["me"],"it possible":["that"],"it preferable":["or"],"it pretty":["helpful."],"it prevents":["common"],"it private:":["self._strand."],"it probably":["wouldn't","wasn't"],"it provides":["to","robustness."],"it public":["gives","later","later","later","later","later","later","later"],"it quite":["a","concise.","easy"],"it reaches":["that"],"it readable?":["Does"],"it reads":["a","better.","very"],"it reads,":["functionally"],"it real":["fun"],"it really":["matter","happens,","depends","doesn't","needed?","wants","baffles","shouldn't","useful.","belongs","hard"],"it reduces":["cyclomatic"],"it regardless":["because"],"it required":["more"],"it requires":["is","rarely"],"it returns":["anyway,","match","a","`0`.","`False`"],"it right\"":["phase."],"it right?":["If"],"it run":["faster,"],"it said":["that"],"it says":["on"],"it seams":["that","like","as"],"it seem":["like","to"],"it seemed":["appropriate","like","natural","to"],"it seems":["to","to","to","pointless.","overkill","that","like","like"],"it self":["documenting."],"it semantically,":["especially"],"it short":["and"],"it shorter":["by"],"it should":["rather","treat","be","be","be","be","only","be","return","return","pick","be","be","also","be","be","be","not"],"it shouldn't":["matter.",":)"],"it simper":["and"],"it simple":["for"],"it simple.":[":)"],"it simpler?":["Or"],"it slide,":["but"],"it so":["far","straightforward?"],"it something":["appropriate"],"it split":["words"],"it starts":["or","or"],"it still":["requires"],"it strays":["too"],"it strikes":["me"],"it string?":["I'm"],"it supported":["tuples."],"it synonymous.":["__all__"],"it than":["to","this"],"it that":["way.","way.","way","all","way","way).","way."],"it that:":["`order`,"],"it the":["right","Python","other"],"it there":["was"],"it there,":["since"],"it this":["way","way:"],"it though":[";-)","with"],"it through":["the","a"],"it to":["a","the","a","`if","separate","get","\"Uhis","be","be","pass","process","be.","the","the","be","make","it's","be","be:","the","be","the","catch","keep","lowercase","`0`","all","the","some","clean"],"it together":["at"],"it too":["much."],"it took":["me"],"it turns":["out"],"it typed":["up"],"it understands":["what"],"it unless":["there's"],"it up":["a","into","completely","a"],"it up.":["I"],"it useful,":["though,"],"it uses":["the"],"it very":["easily","clear","obvious"],"it was":["simple","just","necessary","clearer","a","tough","how","*that*","over-engineering","fine.","how","a","just","to","there.","words","the","something","maybe"],"it wasn't":["for","digits"],"it way":["more"],"it were":["you"],"it what":["separates"],"it while":["nitpicking"],"it will":["be","be","be","do","really","always","work","remove","return","complain","just","be","be","return","return","work","do","represent","collapse","be","compare"],"it with":["a","a","less","`sentence`,","his","a","multiple","a","an","an","unexpected","a","the","\"U\"","your"],"it within":["a"],"it without":["resorting","the","string,","testing"],"it won't":["cause","increase","need"],"it work":["correctly"],"it works":["great.","much","with","in","just","in"],"it works.":["Is"],"it worth":["learning"],"it would":["work","make","make","be","be","strictly","be","look","be","be","be","be","be","be","be","help","exhibit","begin","be","pass","be","be","fail","be","be","be","be","be","be","be","be","reduce","return","be","only","greatly","always","be","be","be,","be","be","return","be","read","be","be","be","no","work","be","be","probably","make","make","be","be","be","be","make","be","clean"],"it wouldn't":["be"],"it wouldnt":["let"],"it! I've":["wrote"],"it\" (if":["empty,"],"it'd be":["overkill"],"it'd return":["false"],"it'll be":["mangled."],"it'll clean":["up"],"it'll return":["True"],"it's \"useless\"":["on"],"it's **short**":["and"],"it's **short**,":["has"],"it's IMHO":["the","a"],"it's IMO":["an"],"it's OK.":["I"],"it's __short__,":["have"],"it's _not_":["an"],"it's `DNA`":["class"],"it's `None`,":["the"],"it's `is_anagram_of`":["should"],"it's a":["method","bit","bit","subclass","real","cool","good","huge","good","matter","copy","good","string","mess","verb.","false","very","design","case","good","troll","one-liner:","little","good","good","good","good","small","string","little","bad","good","good","private","habit","little","constant.","constant,"],"it's about":["shouting."],"it's absolutely":["necessary."],"it's against":["duck"],"it's all":["caps","uppercase...","uppercase","uppercase.","that","about"],"it's almost":["only"],"it's alphagram":["not"],"it's also":["inconsistant","a"],"it's an":["exceptional","obvious","empty","instance","empty","attribute"],"it's applied":["to,"],"it's arguments":["(that"],"it's at":["times."],"it's bad":["form","to"],"it's badly":["done."],"it's basically":["saying"],"it's better":["to","to","to","to","to","to","to","to","to"],"it's cache":["key"],"it's certainly":["up"],"it's clear":["where","what","enough"],"it's clearly":["optional."],"it's coded":["as"],"it's completely":["orthogonal"],"it's constant":["that"],"it's current":["form"],"it's definitely":["made","more"],"it's doing":["it.","-"],"it's done.":["Instead,"],"it's easier":["to","to","to","to","to","to","to","to"],"it's easy":["to","to","to","to"],"it's either":["true"],"it's equals":["to"],"it's evaluated":["only"],"it's even":["more"],"it's ever":["reused."],"it's false":["to"],"it's fine":["the"],"it's for,":["is"],"it's full":["potential"],"it's generally":["good","a"],"it's good":["practise","practice","practice","to","design","practice","to","to"],"it's great":["that","to"],"it's harder":["than"],"it's how":["my"],"it's idiomatic":["in","—","python."],"it's implemented":["with"],"it's inconvenient":["to"],"it's indeed":["ugly,"],"it's initializer.":["Oh"],"it's intended":["to"],"it's interesting":["approach"],"it's invalid,":["just"],"it's irrelevant":["for"],"it's items":["and"],"it's just":["a","the","it","text"],"it's less":["efficient","difficult","method"],"it's looking":["for"],"it's me":["who's"],"it's more":["clear","readable","descriptive.","clean","semantic","pythonic","natural","like","expressive","clearer","of","verbose,","expressive.","idiomatic"],"it's mostly":["what"],"it's name":["implies"],"it's necessary":["-","to","to"],"it's nice":["to"],"it's not":["the","compatible","very","a","modified","used","a","as","passing","obvios","exposed","that","that","a","obvious","just","really","part","explicitly","required.","used","immediately","clear","required","meaningful","tested","significantly","very","idiomatic","building","immediately","empty."],"it's nothing":["bad,"],"it's now":["list."],"it's obvious":["what"],"it's often":["very"],"it's ok":["to","to","to","to","to"],"it's only":["for","about","part","a","a"],"it's ordering,":["so","so"],"it's overall":["clearer."],"it's overkill":["for"],"it's own":["`Word`","line","predicate","method?"],"it's perfect":["as"],"it's personal":["taste"],"it's possibly":["a"],"it's premature":["optimization"],"it's prescribed":["in"],"it's primary":["feature"],"it's probably":["string"],"it's quite":["vital.","self-documenting..","a"],"it's really":["kind","what"],"it's recommended":["to","in","way"],"it's safer":["to"],"it's second":["nature"],"it's seen,":["there"],"it's semantically":["accurate"],"it's shouting":["if"],"it's simple,":["short"],"it's simpler":["that"],"it's simpler,":["even"],"it's some":["simple"],"it's something":["to"],"it's somethings":["that"],"it's somewhat":["more"],"it's state":["(may"],"it's still":["not","brittle","good","very"],"it's straight":["forward"],"it's strange":["to"],"it's string":["representation)"],"it's talking":["about"],"it's testing":["for."],"it's the":["One","best","string","`int`","right","proper","only"],"it's there,":["but"],"it's time":["to"],"it's too":["complicated","complex..."],"it's unnecessary":["for"],"it's up":["to"],"it's upper":["or"],"it's useful":["to"],"it's usually":["consider","better","frowned"],"it's very":["clever","very","interesting","readable.","obvious","solid","idiomatic."],"it's way":["out"],"it's working":["with?"],"it's worth":["reading.","the","familiarising","while."],"it's your":["call,"],"it) -":["makes"],"it) as":["to"],"it) so":["that"],"it), and":["`original`"],"it, I":["think","should"],"it, I'm":["not"],"it, an":["alternative"],"it, and":["optimizing","all"],"it, as":["one"],"it, because":["it","I"],"it, but":["as","think","according","it's","looking","I","maybe","that's"],"it, in":["the"],"it, just":["learn"],"it, leave":["a"],"it, only":["one"],"it, or":["nitpick?"],"it, see":["next"],"it, since":["the"],"it, so":["that","I"],"it, then":["changes"],"it, which":["is"],"it, you":["can","can"],"it. Also":["precalculated"],"it. Also,":["consider","explicit"],"it. And":["once"],"it. Any":["feedback"],"it. Been":["here,"],"it. Dive":["into"],"it. Feedback":["welcome!"],"it. I":["really","see","also","like","can't","guess"],"it. I'd":["say"],"it. I'll":["try","upload"],"it. I'm":["not"],"it. I've":["just"],"it. Instead,":["I","you"],"it. Is":["there"],"it. So":["I"],"it. That":["helps"],"it. The":["syntax"],"it. There's":["some"],"it. This":["is"],"it. To":["be"],"it. Too":["much"],"it. What":["is","is","is"],"it. Where":["the"],"it. You've":["got"],"it. i've":["fixed"],"it. the":["tag"],"it.... so":["I"],"it: a)":["violates"],"it: you":["could"],"it? Check":["out"],"it? `word`s.":["Hi-la-ri-ous,"],"item in":["the","the","anagram_list","its"],"item such":["that"],"item: sorted(item.lower())":["=="],"items and":["inverting"],"items are":["usually"],"iterable (`self.check":["="],"iterable of":["char,"],"iterable so":["you"],"iterable you":["throw"],"iterable)` does.":["It's"],"iterable. The":["`str`"],"iterable. This":["is"],"iterables will":["work"],"iterate over":["an","all","it","each"],"iterate through":["strand's"],"iterates over":["range,"],"iterating and":["lowercasing"],"iterating over":["a","each","it's","the","each","the"],"iteration #2,":["so"],"iteration 4),":["but"],"iteration and":["filtering","just"],"iteration better,":["because"],"iteration definitely":["passes."],"iteration is":["bit","clever"],"iteration just":["uses"],"iteration more":["Pythonic"],"iteration of":["the"],"iteration over":["each"],"iteration that":["renamed"],"iteration vs.":["a"],"iteration will":["be"],"iteration's conditions":["like"],"iteration, I":["extracted","still"],"iteration, although":["the"],"iteration, but":["I'm"],"iteration, that":["all"],"iteration, though,":["so"],"iteration. Thank":["you"],"iteration. This":["is"],"iteration. You'll":["be"],"iteration; it":["got"],"iterations but":["haven't"],"iterations. But":["while"],"iterations. I":["will","had"],"iterations. Just":["trying"],"iterative? (Just":["so"],"iterator or":["something,"],"iterators nicely":["and"],"its `__init__`":["to"],"its a":["\"private\""],"its already":["located"],"its an":["actual"],"its elifs":["of"],"its face":["when"],"its formatting.":["Though"],"its immediately":["obvious"],"its intent":["clearer."],"its internal":["list"],"its length.":["A"],"its literally":["the"],"its module-level":["functions."],"its or":["represent"],"its own":["module.","is","name","function","definition","and","class.","method.","opinion."],"its own.Regex":["in"],"its probably":["the"],"its responses":["a"],"its result":["is"],"its tedious":[";-)"],"its tone,":["for"],"its transcribed":["RNA"],"its ugliness":["I"],"its usage.":["then"],"its' current":["form"],"its' general":["rules."],"itself --":["I'm"],"itself ?":["Note"],"itself but":["should"],"itself is":["made","quite"],"itself of":["course..."],"itself separated":["in"],"itself to":["another","that"],"itself with":["another"],"itself, and":["it's"],"itself, if":["the"],"itself, the":["shebang"],"itself, while":["thymine"],"itself. And":["it"],"itself. Import":["your"],"itself. It's":["better"],"itself. That":["would"],"itself. The":["first"],"itself: there":["are"],"itself: you":["have"],"it’s quite":["unpythonic."],"jamert said,":["all"],"jarring to":["be"],"java and":["want"],"java lately,":["fixed."],"javascript mode.":[":)"],"javascript solution,":["I"],"javascript version":["has","of"],"jbasalone's single":["line"],"job done":["without","(and"],"job done,":["but"],"job for":["a"],"job investigating.":[":D"],"job just":["fine,"],"job on":["that."],"job than":["your"],"job, but":["personally"],"job. I":["think","rather"],"job. Like":["@geovany"],"join is":["kind"],"join on":["an"],"join then":["resplit..."],"joining an":["array"],"joins letters":["and"],"jokes, or":["presented"],"jotjotjes said":["(Python"],"judgement about":["Python"],"jump to":["3","a"],"jumping through":["the"],"jumps off":["from"],"just 1":["function"],"just Python":["—"],"just `None`.":["Also,"],"just `__foo`.":["(Same"],"just `if":["x`,"],"just `import":["dna`"],"just `nucleotides`":["without"],"just `self.RNA_MAP.get(char,":["char)`"],"just a":["beer","suggestion","question","question,","first","single","bit","convenient","series","representation","matter","matter","matter","detail","waste","\"return","data,","test.","function)","few","case","few","mirror","few","few","preference","repeat","little","minor","few","little","matter"],"just about":["anything"],"just an":["implementation","`if`","implementation","implementation"],"just as":["obvious.","much","literals","easily","fine.","well,","well?","well.","well"],"just assumed":["it","you"],"just assumed.":["You"],"just be":["`not","two"],"just became":["more"],"just because":["of","it"],"just been":["learning"],"just before":["returning."],"just being":["dense","foisted"],"just blah":["will"],"just by":["looking"],"just call":["it","split?","it","the"],"just check":["truthiness?","for","`i","`i.isupper()`."],"just checks":["whether"],"just clone":["the"],"just concluded":["that"],"just container":["for"],"just contains":["numbers"],"just curious":["about"],"just define":["it","a"],"just did":["striping"],"just didn't":["go"],"just do":["`if","`str.capitalize()`.","this"],"just doing":["a","something"],"just don't":["understand","understand","know","know","complain","know"],"just ending":["with"],"just evaluate":["it"],"just extract":["all"],"just feel":["that"],"just few":["comments"],"just find":["for"],"just fine":["the","by","to"],"just fine,":["e.g."],"just focusing":["on"],"just for":["me.","you,","habit.","privacy.","debug."],"just found":["out"],"just functions,":["in"],"just get":["more","rid","rid","rid"],"just glues":["strings."],"just going":["to"],"just got":["to","a"],"just had":["the","the","that"],"just happened":["to"],"just have":["the","to","`0`","one"],"just having":["the"],"just hold":["on"],"just ignore":["the"],"just inlined":["the"],"just instantiating":["them"],"just intending":["to"],"just it":["seems"],"just jump":["to"],"just keep":["the","it"],"just learn":["a"],"just learning":["python"],"just leave":["them"],"just like":["I","a","the"],"just list":["of"],"just looked":["messy","up"],"just looks":["like"],"just made":["the","the"],"just make":["them","it"],"just makes":["usage"],"just map":["it"],"just mapping":["a"],"just me,":["I"],"just mention":["that"],"just methods":["on"],"just missing":["your"],"just move":["caching","them"],"just need":["two","to","to","to"],"just normal":["functions."],"just not":["entirely","\"idiomatic\".","sure","very","pythonic,"],"just noticed":[":"],"just noticed:":["You"],"just now":["noticing","starting","noticed"],"just obfuscate":["concepts"],"just once":["rather","rather","instead"],"just one":["thing","word,","special"],"just overcomplicating":["things."],"just passes":["the"],"just passing":["a"],"just picking":["an"],"just plain":["useless."],"just prefer":["to"],"just preference.":["As"],"just prefix":["it","them"],"just prepending":["the"],"just put":["all"],"just raise":["a"],"just read":["the"],"just reading":["state?"],"just realised":["the"],"just realized":["that"],"just recalled":["the"],"just replace":["what"],"just replacing":["the","`response`"],"just return":["at","the","the"],"just returning":["`msg.isupper()`","the"],"just returning,":["it'll"],"just returns.":["Doesn't"],"just rewrite":["to"],"just right":["-"],"just run":["`help(alphagram)`),"],"just serves":["to"],"just set":["them"],"just sort":["letters"],"just specifies":["them"],"just spelling":["or"],"just start":["the"],"just stop":["exposing"],"just strip()":["the"],"just submitted":["a"],"just testing":["self.silent()"],"just text":["and"],"just that":["the"],"just the":["values,","same","same","one"],"just things":["to"],"just thinking":["that"],"just those":["4"],"just thought":["about"],"just three":["if","if\","],"just to":["hold","split","make","greedily","get","practice"],"just totally":["unpythonic."],"just try":["to"],"just trying":["to"],"just two":["separate","remarks:"],"just type":["`help(instance_or_type_or_module)`"],"just underestimated":["Python's"],"just updated":["this"],"just use":["module","regular","a","another","it",".upper()","`collections.Counter`","if","`str.lower`","`stimulus.isupper()`.","the"],"just uses":["built"],"just using":["the","module","it","functions,","the"],"just wait":["longer..."],"just want":["it","to","to"],"just wanted":["to"],"just wants":["to"],"just wasn't":["awere"],"just went":["and","and"],"just won't":["properly"],"just works":["with"],"just write":["```class","out"],"just written":["a"],"just yesterday":["in"],"just yet,":["will"],"just yet.":["Any"],"just, well,":["`None`,"],"justified -":["for"],"justified in":["order"],"justified. Anyway,":["I"],"justifies creating":["a"],"justify that":["if"],"jvns and":["his/her"],"kata, but":["it's"],"keep `_multiple_bottles`":["as"],"keep a":["reference","set"],"keep as":["clean"],"keep cached":["value"],"keep dead":["code."],"keep imports":["at"],"keep in":["mind:","mind","mind","mind"],"keep inline":["comments"],"keep it":["as","within","as","simper","simple","an"],"keep its":["formatting."],"keep module":["level"],"keep my":["functions","functions"],"keep string":["constants"],"keep that":["in","in"],"keep the":["else","logic","counter","code","tests","body","current","captured","code","call","tests"],"keep them":["in","under"],"keep this":["code","brief"],"keep to":["its'"],"keep usage":["of"],"keep writing":["comments"],"keep, rather":["than"],"keeping `hamming_distance`":["to"],"keeping an":["internal"],"keeping code":["to"],"keeping it":["with","readable."],"keeping literal":["strings"],"keeping the":["performance.","`standardize`","same"],"keeping things":["private"],"keeping track":["of"],"keeps it":["simple."],"keeps it's":["ordering,","ordering,"],"keeps right":["level"],"keeps the":["meaning","test","category"],"keeps them":["where"],"keeps things":["simple."],"kept it":["as","as","in."],"kept me":["thinking"],"kept the":["elif/else,"],"kept them":["because"],"key based":["solely"],"key exists":["in"],"key is":["undefined."],"key that":["doesn't"],"key will":["(sensibly)"],"key with":["the"],"key, which":["isn't"],"key. I'm":["sure"],"key:value pair.":["But,"],"keys in":["`d`."],"keys rather":["than"],"keystrokes for":["`(object)`"],"keyword (i.e.":["why"],"keyword -":["which"],"keyword `all`":["existed"],"keyword argument":["`deletechars`,"],"keyword would":["be"],"keyword, just":["like"],"keyword, maybe":["\"str\""],"keywords in":["in"],"kick using":["interface","interface"],"kind of":["cheaty?","guy","class","hard","object","like","position","hybrid","message","strong","verbose","overengineering","problem.","subjective","response","problems","problems","work.","like","value","thing","an","behaviour","broken","type","validation","construction,","automated","automatic","magic","problems,","like","makes","\"magical\"","ugly,","unsymmetric.","weird.","icky"],"kind-of-tricky part":["about"],"kind. It's":["just,"],"kinda follow":["up"],"kinda hacky,":["as"],"kinda looks":["like"],"kinda more":["descriptive"],"kinda new":["i"],"kitchen sink":["in"],"knew Bob":["was"],"knew I'd":["seen"],"knew `string.translate`":["had"],"knew a":["more"],"knew about":["list","isupper(),"],"knew his":["stuff,","stuff,"],"knew that":["was","`Counter`"],"know @dahlia":["IRL"],"know NO":["Python,"],"know Python":["well","very"],"know Ruby,":["if"],"know a":["lot","few"],"know about":["`.isspace()`.","`timeit`-module.","it.","the","collections","it","`collections.Counter`","the","the","these","it","thymidine","`filter`!","`self`.","`isupper`.","`collections.Counter`,"],"know editor":["plugins"],"know how":["to","to","to","to","that","to","to","to","to"],"know if":["you","this","it's","it's","they","there's","I","this"],"know immediately":["how"],"know is":["why"],"know it":["is","existed"],"know it's":["\"private\".","just"],"know its":["tedious"],"know long":["var"],"know more":["about","about"],"know of":["the","that"],"know python's":["not"],"know quite":["a"],"know re.":["comments."],"know so":["much"],"know that":["when","it's","different","the","the","Python","isn't",";)","there's","if","generators","this","two","was"],"know that.":["I"],"know the":["details,","exercise","convention:","logic"],"know there":["were"],"know this":["existed,","is","isn't"],"know wether":["`word_count()`"],"know what":["it","other","to","the","to","tools"],"know where":["to","the"],"know whether":["a","a"],"know why":["that","it"],"know you":["don't","like"],"know), so":["what's"],"know, i'm":["pretty"],"know, it":["doesn't","look","look","look","look","look","looks","looks","look"],"know, on":["one"],"know, what's":["the"],"know. I":["have","saw"],"know. The":["perils"],"know...) and":["`_standardized`"],"knowing how":["to"],"knowledge into":["the"],"knowledge level.":["I"],"knowledge of":["python"],"knowledge simplifies":["and"],"known manner.":["I"],"known that":["I"],"knows how":["I"],"knows if":["it's","it's"],"knows what":["it","it"],"labeling for":["the"],"labelled in":["the"],"labels make":["this"],"labouring under":["the"],"lack of":["have","existence"],"lacks some":["documentation,"],"laid out":["(a","in"],"lambda at":["all."],"lambda expression":["directly"],"lambda style,":["but"],"lambda that":["always"],"lambda would":["be","be"],"lambda(s) would":["be"],"lambda, though,":["I"],"lambdas are":["cool"],"lambdas but":["named"],"lambdas each":["time."],"language I":["think"],"language analysis":["is"],"language can":["only"],"language however":["the"],"language in":["another.","the"],"language inside":["the"],"language is":["very","ugly","more"],"language neither.":["Fighting"],"language of":["the"],"language so":["classes"],"language such":["as"],"language that":["would","supports"],"language where":["it"],"language with":["proper","implicit"],"language would":["be"],"language you":["are"],"language's \"beauty\"":["or"],"language, only":["the"],"language-inforced restriction,":["it's"],"language. \"Private\"":["(I"],"languages I'm":["more"],"languages on":["here?"],"languages that":["didn't"],"languages today.":["Perhaps"],"languages\" syndrom...":[";)"],"languages, and":["the","it"],"languages, not":["just"],"languages, so":["that"],"large conditional":["statement."],"large program,":["different"],"large statement":["with"],"large strings":["but"],"large trade-off,":["but"],"large. Of":["course,"],"larger code":["base."],"larger problems":["when"],"larger projects":["you"],"larger work,":["but"],"larger, I'd":["rather"],"largest possible":["symbol"],"last 6":["months"],"last `else`":["is"],"last character":["is","of","of"],"last else-branch":["refers"],"last exercise,":["then"],"last few":["months."],"last hint:":["you"],"last if-else":["seems"],"last item":["in"],"last iteration":["and"],"last iteration's":["conditions"],"last iteration;":["it"],"last line":["as","upwards."],"last line,":["use:","20,"],"last little":["nitpick,"],"last merge":["into"],"last minor":["point:"],"last nit":["is"],"last nitpick":["since"],"last one..":["I..."],"last opinion":["about"],"last pair":["in"],"last pointer.":["To"],"last question:":["why"],"last thing:":["where","do"],"last three":["methods.","methods"],"last time.":["Sorry"],"last try-except-else":["block"],"last. This":["is"],"lasting comment,":["but"],"lately that":["suggests"],"lately, so":["I'm"],"later (even":["if"],"later cases":["can"],"later changed":["to"],"later instead":["of"],"later is":["a"],"later modifying":["the"],"later needs":["to"],"later on?":["additional"],"later projects":["you"],"later statements":["to"],"later than":["to","to","to","to","to","to","to"],"later without":["even","breaking"],"later\" so":["I"],"later, of":["proper"],"later. It":["would"],"later. The":["main"],"latest exercism":["command"],"latest revision,":["thanks"],"latest, I":["think"],"latter -":["but"],"latter automatically":["also"],"latter in":["program."],"latter is":["my"],"latter raises":["an"],"latter, you":["may"],"law of":["demeter"],"layout /":["formatting"],"layout in":["`responses`)"],"layout is":["still"],"lazy I":["know...)"],"lazy and":["not"],"lazy computation":["option),"],"lazy evaluation,":["so"],"lazy iterator":["or"],"lazy on":["demand"],"lazy property":["initialization"],"lazy, on-demand":["calculation"],"lazy. It's":["just"],"lead to":["unexpected","a","more","an"],"leading \"1\"":["from"],"leading `_`":["as"],"leading double":["underscores"],"leading prefixes":["to"],"leading underscore.":["Also","It"],"leading underscores":["are","are","/","should"],"learn a":["bit"],"learn and":["projects"],"learn more":["than"],"learn my":["stdlib"],"learn the":["culture","language,"],"learn this":["if"],"learned Python":["while"],"learned a":["lot","lot."],"learned from":["another","clojure"],"learned quite":["a"],"learned recently":["is"],"learned something":["new","new"],"learned tough":["lesson"],"learned when":["doing","doing","doing"],"learning it":["regardless"],"learning my":["way"],"learning python":["(and","I"],"learning to":["use"],"learning too,":["but"],"learning, I":["decided"],"learning, right?":["Thanks"],"learning. For":["example"],"learnt from":["one"],"learnt quite":["useful"],"least I":["don't"],"least It":["is"],"least OO":["type-based"],"least as":["long"],"least be":["named"],"least because":["that"],"least by":["convention"],"least cache":["that"],"least for":["me.","python","the"],"least in":["case"],"least it's":["how"],"least marked":["as"],"least more":["meaningful"],"least my":["approaches"],"least now":["I"],"least one":["alphabetic","char)","letter","alpha","cased"],"least shorten":["it"],"least to":["a"],"least too":["long)."],"least twice":["as"],"least two":["of","of"],"least under":["linux)"],"least use":["`dict.items()`"],"least using":["named"],"least works":["this"],"least you'll":["end"],"least, to":["the"],"leave a":["comment:"],"leave alone":["in"],"leave also":["description"],"leave it":["out","out","out.","there,","named","at"],"leave nitpicks":["here"],"leave out":["the","the"],"leave the":["`None`","final","optional"],"leave them":["as","exposed?","as","out,"],"leave to":["garbage"],"leave triple":["quotes"],"leaves the":["original"],"leaving it":["out?"],"leaving the":["value"],"led me":["to"],"led to":["modifying"],"led you":["to"],"left [this":["nitpick"],"left in":["the","responsibilities","the"],"left it":["as"],"left me":["[this","about","[this"],"left off:":["```if"],"left that":["over"],"left the":["checks"],"left to":["right,","do"],"left where":["they"],"left which":["are"],"leftover from":["a"],"legacy code":["just"],"legitimate reasons":["-"],"len ==":["0,"],"len check":["expresses"],"len on":["the"],"len() can":["never"],"len() conditional":["in"],"len(None) is":["an"],"len(letters) \u003e":["0"],"len(letters) can":["not","be"],"len(message) ==":["0:`"],"len(msg.strip()) ==":["0:","0:","0:"],"len(s) ==":["0`)"],"len(self.greeting.strip()) ==":["0"],"len(self.statement.strip() ==":["0):"],"len(sentence) ==":["0)`."],"len(set(s) &":["set(string.letters))"],"len(somestring) \u003e":["0:`"],"len(str.strip()) ==":["0:`,","0:`,"],"len(text)` in":["line"],"len(text.strip()) &gt;":["0\"."],"length 1":["(e.g."],"length 1)":["as","with"],"length check":["doesn't"],"length constraints":["this"],"length in":["`is_empty`?"],"length is":["zero"],"length of":["self.statement.strip().","0","the"],"length on":["account"],"length really":["looks"],"length to":["get","avoid"],"length zero":["evaluates"],"length. A":["``DNA``"],"length. However,":["breaking"],"length. Is":["there"],"length/complexity where":["the"],"lengths --\u003e":["removed"],"lengths info":["in"],"less --":["if"],"less about":["passing"],"less branching),":["less"],"less clear":["than"],"less complected":["code"],"less complexity":["the"],"less confusion":["prone"],"less coupled,":["more"],"less difficult":["to"],"less documentation":["writing."],"less efficient":["than","to","since"],"less enamored":["with"],"less maintainable":["in"],"less method":["calls."],"less of":["a"],"less readable":["than","(in"],"less satisfying":["than"],"less satisfying\".":["Why"],"less static":["and"],"less text":["for"],"less than":["the"],"less ugly":["than"],"less worries,":["and"],"lesson learned":["me."],"lesson not":["to"],"let empty":["strings"],"let it":["make","slide,"],"let me":["remove","know","call"],"let other":["Python"],"let the":["`re`","code"],"let user":["of"],"let you":["know."],"let's make":["it"],"lets it":["fail"],"lets you":["know"],"letter (`capitalize`":["makes"],"letter (for":["example"],"letter and":["that"],"letter at":["all."],"letter that":["I–"],"letter-value mappings":["&"],"lettercount instead":["could"],"letters (instead":["of"],"letters I":["replaced"],"letters and":["the","all"],"letters are":["upper-case.","uppercase,"],"letters everywhere.":["It"],"letters in":["a","the"],"letters of":["the"],"letters) and":["it"],"letters). So":["you"],"letting the":["exception"],"level \"if":["message"],"level -":["maybe"],"level `words_re`":["and"],"level attributes":["are"],"level attributes,":["I"],"level attributes.":["They"],"level because":["it's"],"level constant":["(then","I"],"level constant.":["That"],"level constants":["(all-caps).","spread","(all"],"level constants.":["Constructor"],"level details,":["such"],"level documentation":["and"],"level function":["and"],"level functions":["next"],"level global,":["I"],"level makes":["it"],"level of":["overhead","abstractization,","detail.","detail.","abstraction","encapsulation","abstraction.","abstraction."],"level or":["class"],"level text":["processing."],"level would":["be"],"level, declares":["a"],"level, one":["issue"],"level, or":["let"],"level, whereas":["line"],"level, you":["shouldn't"],"level. I":["understand"],"level. If":["the"],"level. Then":["for"],"level. Therefore,":["wouldn't"],"level. Using":["these"],"level? I":["kind"],"levels in":["`Anagram.match`"],"levels of":["abstraction,"],"levels. With":["the"],"leverage in":["the"],"lib'd doc.":["But"],"liberally but":["now"],"libraries being":["installed."],"libraries. I":["try"],"library (specifically":["`str`"],"library `isupper`":["and"],"library and":["Python"],"library because":["there"],"library had":["offered"],"library in":["your"],"library knowledge":["simplifies"],"library method":["`str.isupper`"],"library module,":["because"],"library modules":["like"],"library section.":["It"],"library well":["with"],"library, it":["would"],"library, so":["they're"],"library, you":["might"],"library. A":["few"],"library. I":["appreciate","hope"],"library... batteries":["included!"],"library: setting":["various"],"library](http://docs.python.org) -":["it's","it's","it's","it's"],"life gets":["easier"],"life of":["Bob."],"life production":["code)."],"life very":["pleasant"],"lift the":["call"],"like \"#":["When"],"like \"LOOK":["OUT!\","],"like \"Who":["moved"],"like \"all":["uppercase\"."],"like \"car":[":"],"like \"is":["this"],"like \"message\"":["would"],"like \"say":["this"],"like \"shouting\"":["and","and","but"],"like \"string\"":["or"],"like \"this£@!£@roberta!!!@£@roberta\"?":["Is"],"like \"whatever\"?":["Or"],"like '#":["yelling',"],"like 'HEY":["BRO!?',"],"like 'if":["statements')","not"],"like **.isupper()**":["and"],"like *strand*":["or"],"like @dagmar's":["suggestion,"],"like Bob":["is"],"like Bob.hey(text)":["and"],"like Clojure's":["`frequencies`"],"like Counter":["is"],"like DNA":["class"],"like I":["did","need","prefer"],"like LINQs":["\"first\""],"like Message":["or"],"like SQL":["or"],"like Tone":["better."],"like `?!`...":["but"],"like `Anagram('banana').match(['Banana'])`.":["Does"],"like `BOB_VOCAB":["="],"like `Bob._is_yell`,":["because"],"like `Bob`":["FWIW)."],"like `Maybe`":["types,"],"like `Responder`?":["In"],"like `THYMADINE":["="],"like `THYMIDINE`":["and"],"like `WORDS_RE`":["would"],"like `__init__`,":["having"],"like ```bob.hey(5)```,":["an"],"like ```greeting":["or"],"like ```lower(),":["upper(),"],"like `alphagram`":["just"],"like `any(is_yelled(...)":["...)`"],"like `def":["foo(param1,"],"like `else`":["branch,"],"like `i`,":["for"],"like `if":["not"],"like `is_question()`,":["to"],"like `isupper()`":["are"],"like `isupper()`,":["it"],"like `isupper`,":["`endswith`,"],"like `normalized_words":["="],"like `not":["something.strip()`"],"like `question":["here?"],"like `re.finditer`.":["That's"],"like `self.chain`":["is."],"like `strand`":["or"],"like `super`":["and"],"like `super`,":["property","properties","properties"],"like `text.upper()":["=="],"like `words`.":["That"],"like `x":["for"],"like `yelling`,":["since"],"like `||=`":["would"],"like a":["standard","much","lot.","lot","bunch","functional","code","complete","good","reliable","very","useful","class-level","lot","nice","pretty","large","[known","normal","strange","dict,"],"like about":["filter"],"like an":["implementation","illusionist","unnecessary","overkill"],"like are":["left"],"like at":["least"],"like best.":["You"],"like boolean":["`phrase.isupper()`."],"like building":["two","and"],"like calling":["`self.__class__.method_name()`,"],"like chain":["of"],"like cheating":["haha."],"like comments":["mainly"],"like compared":["with"],"like comparing":["file"],"like dangerous":["and"],"like defensive":["programming)..."],"like doing":["so,","all"],"like each":["of"],"like eg.":["Scheme's"],"like elimisteve's":["suggestions"],"like explicit":["`else`","`else`","helper"],"like good":["compromise."],"like hasletter":["or"],"like having":["5","a","to","it","all"],"like he":["knew","knew"],"like helper":["methods"],"like how":["you","the","this","you","you","you've","you","you","you","shortening","`_is_shouting`","you","you","you","you've"],"like if":["repetition."],"like in":["`self._tokenize(self._phrase)`,","the"],"like it":["better.","better","is","better","is","much","needs","needs","would","would","that",";)","short","because","because","even","makes","semantically,","is"],"like it'd":["return"],"like it's":["an","me","some"],"like it,":["you"],"like it.":["Also","I'd"],"like java":["and"],"like just":["testing"],"like making":["a"],"like me":["against"],"like mine":["solution"],"like much":["overhead,"],"like multiple":["return"],"like my":["code","mysterious","own","initial"],"like namespace":["-"],"like needless":["repetition"],"like over-engineering":["in"],"like overkill":["to"],"like passing":["self"],"like pie.\"":["for"],"like premature":["optimisation"],"like putting":["the"],"like python's":["negative"],"like reduce":["just"],"like regular":["expressions,"],"like relying":["on"],"like restricted":["library"],"like seeing":["`filter`"],"like self":["documenting"],"like self,":["or"],"like separate":["concrete","concepts"],"like separating":["small"],"like some":["science"],"like split_phrase_into_array(phrase)?":["Why"],"like tellBob":["would"],"like that":["you've","you've","a","you","is","you","you've","this","this","you","it's","it's","it's","you","you","most","main","the","helpers","it's","you","you","you","you","you've","you","you","you","it","you","you","you","the","this","you","you","you","you","you"],"like that's":["very"],"like that,":["they"],"like that.":["Yes,"],"like the":["improvements.","\"cond\"","possibility","approach","grouping","approach,","fact","structure!","consistency","responses","structure!","'response","overall","assert!","simplicity!","fact","meaning","early","look","way","way","global","future","responsibility","one","idea","class","seperation","idea","separation","fact","fact","use","test","sets","phrase","use","use","typical","idea","suggestion","use","join","simplest","one","'.upper()'","comment","comment","original","nested","conciseness","labeling","simplicity","simplicity","nested","pairing","\"not","overall","idea","way","tuples","solution,","way","idea","solution","way","empty","explicitness","shorter","separation","structure"],"like them":["being","or"],"like there":["is","are","is"],"like these":["small"],"like these?":["I"],"like they":["could","would","would"],"like they're":["in","in"],"like this":["better","version","version","approach","being","approach","code","list","make","there","syntax.","a","I","is","for","version","much","is","is"],"like this,":["and","as","once","I","maybe:","but,"],"like this.":["It","The"],"like this?":["http://docs.python.org/release/2.5.2/lib/boolean.html"],"like to":["split","do","get","test","see","see","see","end","keep","suggest","coerce","hear","get","separate","make","keep","keep","make","push","specify","hear","know","know","make","emphasize","use","work","close","use","discuss","get","make"],"like unnecessarily":["bloated"],"like unnecessary":["negation,"],"like use":["of","of","of"],"like using":["a","BOOLs"],"like very":["straight"],"like vocabulary":["and"],"like we've":["already"],"like what":["you"],"like you":["can","might","are","went"],"like you're":["not"],"like you've":["submitted","duplicated"],"like your":["suggestions","solution:","code,","`_isyelling`,","suggestion"],"like) knowing":["how"],"like) rather":["than"],"like), you":["may"],"like, but":["I"],"like, if":["they"],"like, so":["I'm"],"like. Also":["using"],"like. I'm":["not"],"like. It's":["not"],"liked the":["readability","explicit","use"],"liked to":["`strip()`"],"likely if":["it's"],"likely to":["change"],"likely? :)":["I'm"],"liking but":["it's"],"liking the":["gnarly","common-sense"],"liking) this":["would"],"lile `normalized_words`":["might"],"limit does":["not"],"limit the":["interface"],"limit their":["scope?"],"limit) but":["it's"],"limit, because":["Happy"],"limitations to":["Python's","how"],"limited to":["a"],"limited, so":["please"],"limited–knowledge, any":["function"],"limiting a":["function"],"limits the":["scope"],"line #7":["shorter"],"line (the":["\"shebang\")"],"line 10":["for","could"],"line 11":["it's","(by"],"line 11,":["it"],"line 12":["is","--"],"line 12,":["using:"],"line 12:":["the"],"line 13":["out","is"],"line 14":["unnecessary."],"line 14.":["See:","That"],"line 14:":["If"],"line 15,":["in"],"line 16":["is"],"line 17":["instead"],"line 17?":["Then"],"line 18":["to:","overwrites"],"line 19":["is","you"],"line 19:":["return"],"line 2,":["because","and"],"line 20":["helps"],"line 20,":["what"],"line 21":["you"],"line 21.":["I"],"line 22":["should"],"line 22,":["your"],"line 22:":["return","you"],"line 23":["if","-","would"],"line 23,":["comment"],"line 25,":["which"],"line 29...":["Also,"],"line 3,":["you"],"line 3.":["You"],"line 39,":["in"],"line 4":["to","would"],"line 4,":["because"],"line 4.":[":("],"line 44,":["in"],"line 48,":["in"],"line 5":["both","and","not"],"line 59,":["in","in"],"line 6":["is","is","it's","is","is","is","not","is"],"line 64,":["in"],"line 6;":["compared"],"line 7":["read","there","is","even"],"line 79,":["in"],"line 8":["really","could"],"line 8,":["I"],"line 89,":["in"],"line 9":["to","(isosceles"],"line 9,":["`msg`"],"line after":["`class`","the"],"line agent.":["I"],"line as":["their","the","the","the","`./bob.py`","it"],"line at":["the"],"line between":["if/elif","method","methods.","import","the","class","methods,"],"line break":["before"],"line by":["itself,"],"line didn't":["scroll,"],"line is":["considered","considered","sweet."],"line joins":["letters"],"line length":["constraints"],"line length.":["However,"],"line limit)":["but"],"line may":["be"],"line methods":["are"],"line of":["code","code","`Word.is_anagram_of()`","code,","code","attack.","code"],"line part":["of"],"line should":["read"],"line to":["some","keep","be"],"line upwards.":["Had"],"line using":["some"],"line utility":["(`pep8`)"],"line with":["def.","the","what"],"line would":["be","be"],"line you":["see"],"line) are":["generally"],"line, 20,":["is"],"line, as":["they're","this"],"line, so":["I"],"line. Good":["use"],"line. I":["would"],"line. It's":["implicitly"],"line. Please":["refer"],"line. You":["can"],"line.\" So,":["in"],"line? What's":["the"],"lined up":["in"],"liner and":["no"],"liner is":["definitely"],"lines (regards":["`__init__`)."],"lines 10":["thru"],"lines 10-17":["in"],"lines 12-14":["with"],"lines 13":["and","-"],"lines 18-19":["too."],"lines 22--25":["by"],"lines 3":["and"],"lines 31--34":["by"],"lines 4":["and"],"lines 7-10":[":"],"lines 7-10)":["and"],"lines and":["it","lines","add","with"],"lines are":["for"],"lines before":["class","and","class","class"],"lines between":["classes.","classes","methods","classes","classes","method","top-level","class","class","class","class"],"lines extend":["pass"],"lines function":["split"],"lines generally":["improves"],"lines in":["each"],"lines long":["method"],"lines long,":["that"],"lines of":["code,","boilerplate","code","code","the","*normalize*","code","code.","conditional"],"lines out":["of"],"lines separating":["the"],"lines there":["are"],"lines to":["42","a"],"lines using":["Counter"],"lines without":["introducing"],"lines, I'm":["a"],"lines, but":["this"],"lines, it":["would"],"lines. `__responses`":["is"],"lines](http://www.python.org/dev/peps/pep-0008/#blank-lines) around":["the"],"link explaining":["why"],"link isn't":["working"],"link the":["various"],"link to":["explanation"],"link was":["just"],"link, that":["was"],"link, that's":["a"],"linked does....":["that"],"linked me":["to"],"linked to":["Bob","be"],"links into":["Pocket"],"links to":["string"],"linters would":["complain"],"linting or":["style"],"linting programs":["would"],"linting? You":["have"],"linux) that":["makes"],"lispmachine ;)).":["Having"],"list -":["create"],"list about":["this](http://mail.python.org/pipermail/python-list/2011-April/601204.html)."],"list and":["making","then"],"list any":["other"],"list as":["input","needed."],"list at":["the"],"list before":["sorting?"],"list clearly":["associates"],"list comp":["to"],"list comprehension":["work","is","and","is","would","may","to","here.","or","with","(or","should","for","in","expressions.","would","instead","expression","so","in","is","[],","syntax.","(I'd","can","a","and","and","on"],"list comprehension)":["-"],"list comprehension,":["you'd","but","but"],"list comprehension.":["You","It's","this","That"],"list comprehension?":["Then"],"list comprehensions":["-","with","each","readable,","instead","instead","but","are","wherever","over","(line"],"list comprehensions!":["I"],"list comprehensions,":["whether","like"],"list comps":["with"],"list constructor":["in"],"list first":["before"],"list for":["internal","the"],"list from":["what's"],"list in":["[my","Py"],"list index":["rather"],"list instead":["of"],"list into":["a"],"list is":["a","here:"],"list isn't":["actually"],"list object,":["not"],"list of":["words.","matcher","characters?","differences\".","submissions","pairs","tests","tuples","tuples","strings,","anagrams.","`(predicate,","strings,","predicate-\u003eanswer","(predicate,","(predicate,","them","objects","the","the","anagrams?","predicate/response","words","words","tuples","tuples","tuples","strings.","'WHAT',","the"],"list on":["each","line"],"list so":["you","I"],"list somewhere":["because"],"list that":["is"],"list the":["actual"],"list to":["a","count."],"list version":["or"],"list with":["a","one"],"list! This":["is"],"list) of":["nucleotides."],"list) under":["the"],"list). As":["this"],"list, maybe":["one"],"list, then":["all"],"list, tuple,":["etc.)"],"list, without":["having"],"list. See":["[Python"],"list. Since":["`existing_robots`"],"list. You":["are","should"],"list? Or":["create"],"listed in":["ascending"],"listing them":["vertically"],"lists all":["the","the"],"lists and":["spaces"],"lists, empty":["tuples,"],"lists, one":["from"],"lists, so":["the"],"lists. Hint:":["Python"],"literal strings":["and"],"literal/constant on":["the"],"literally the":["first"],"literals in":["the"],"literate programming":["is"],"litteral strings":["are"],"little *dense*":["but"],"little as":["possible."],"little better":["because"],"little bit":["to","of"],"little bit.":["Is"],"little difference":["between"],"little gain":["(I'd"],"little hard":["to"],"little heavy":["for"],"little hint:":["str.isupper"],"little inefficient.":["You"],"little long,":["I"],"little made-up":["backstory."],"little methods":["(e.g.,"],"little more":["stable.","verbose","concise,","DRY","and","intuitive","clear","simply"],"little nicer":["by"],"little nit,":["perfect"],"little nitpick,":["within"],"little nuts":["with"],"little odd":["at"],"little of":["which"],"little on":["what"],"little over-engineered,":["you're"],"little real":["gain."],"little sense":["to","to"],"little short.":["And"],"little snippet,":["trying"],"little time,":["too"],"little tip:":["there's"],"little tired":["of"],"little too":["clever."],"little unefficient":["to"],"little when":["it"],"little, or":["at"],"little. not":["much."],"live as":["standalone"],"live in":["separate","a"],"live on":["the"],"live with":["python","python"],"lived in":["the"],"living in":["region"],"loaded and":["has"],"local aliases":["of"],"local to":["the"],"local variable":["`words`.","and","instead","there."],"local variable,":["instead"],"local variables":["to"],"localised change":["(one"],"locally was":["the"],"locate the":["words,"],"located below":["main","helper"],"located in":["there.","`anagram`"],"located right":["after"],"location for":["extra"],"location to":["set"],"logging module":[";-))."],"logic -":["neither"],"logic I":["think"],"logic a":["bit."],"logic all":["into"],"logic among":["a"],"logic are":["a"],"logic because":["it"],"logic been":["more"],"logic behind":["but"],"logic branches":["together."],"logic buried":["in"],"logic by":["localizing"],"logic checks":["in"],"logic could":["be"],"logic embedded":["directly"],"logic even":["if"],"logic extracted":["to"],"logic for":["each","line","different","counting","the","determining","current","the","formatting"],"logic from":["```","createroboname()"],"logic harder":["to"],"logic here":["is","into","is"],"logic in":["`is_question`","those","`is_empty`.","this","this","the","the","the","the","a"],"logic instead":["of"],"logic into":["separate","separate","separate","separate","separate","helper","the"],"logic is":["procedural","more","flawed","located","located","very","based"],"logic more":["readable"],"logic of":["*each*","the","this","the","the","your","the","hey","the","identifying","\"canonicalizing\""],"logic on":["line"],"logic out":["into","into","into","of"],"logic over":["multiple"],"logic processing":["errors."],"logic should":["be"],"logic test":["chain,"],"logic to":["private","its"],"logic which":["is"],"logic wrt":["the"],"logic, but":["I"],"logic, so":["it"],"logic, without":["any"],"logic. I":["have"],"logic. You":["can"],"logic: I":["understand"],"logical checks":["return"],"logical essence":["of"],"logical flaws.":["Reasoning:"],"logical parts":["into"],"logical point":["of"],"logically equivalent":["to"],"logically grouped":["inside"],"long -":["would","could"],"long and":["less"],"long as":["you","possible:","the","the","we're"],"long function":["name"],"long line":["as"],"long method":["but"],"long name":["for"],"long nitpick":["and"],"long so":["I"],"long time":["since"],"long var":["names"],"long way":["to","here."],"long). How":["could"],"long, I":["still"],"long, it":["only"],"long, probably":["buggy"],"long, that":["is."],"long. Solution:":["two"],"longer dealing":["with"],"longer in":["use"],"longer name":["is"],"longer names.":["In","I've"],"longer need":["an"],"longer than":["it","first-try.","0"],"longer time":["ago"],"longer, and":["the"],"longer... I":["found"],"look -":["I'm"],"look a":["bit"],"look accurate":["and"],"look and":["tell"],"look at":["how","the","the","the","the","`collections.Counter`","string","string","`Counter`","code","`endswith`","`Counter`","`str.isupper()`","`isupper()`","the","the","the","`Counter`","hey()","it","what","`maketrans`","`Counter`","it","its","[PEP8](http://www.python.org/dev/peps/pep-0008/)","the","the","`isspace`","`collection.Counter`.","`collections.Counter`","the","it!","it","saywat.isupper(0)","those.","the","the","the","str.format!","`re.findall`","the","[PEP","`collections.Counter`","using","`.strip()`","the","the","this","the","`Counter`,","`Counter`:","`findall`,","the","the","the","the","the","it","the"],"look back":["at"],"look better":["as","in"],"look cleaner":["here."],"look economical":["to"],"look for":["`lower()`","the","it."],"look good":["enough"],"look good)?":["The"],"look in":["Python","documentation"],"look into":["`Counter`","these","Python","`collections`","\u003ca","the","`str.replace`."],"look like":["over-engineering"],"look like.":["I'm"],"look nicer":["but","but","but","now","now","but","to"],"look of":["what"],"look pretty":["alike."],"look really":["nice,"],"look simple":["and"],"look symmetrical,":["and"],"look this":["stuff"],"look through":["the"],"look up":["DNA-&gt;RNA","alphagram","solution"],"look up.":["I"],"look very":["much"],"look, and":["to"],"looked at":["PEP8","using","the","the","this","this","this","`word_count`,","the"],"looked better":["and"],"looked first":["on"],"looked for":["it?","a"],"looked in":["the","class,"],"looked into":["[Alphagrams](http://en.wikipedia.org/wiki/Alphagram),"],"looked messy":[":-)"],"looked more":["concise"],"looked up":["the","directly","\u003ccode\u003eis","`str.isspace()`"],"looked up,":["and"],"looked wrong":["to"],"looking 'silence'":["checking."],"looking at":["`is_silent`?","the","it","the","the","your","your","the"],"looking for":["yelling.","an","rather","\"T\"","clear","a","a","something","an","that"],"looking for,":["as"],"looking good.":["You're"],"looking in":["the"],"looking into":["using"],"looking on":["other"],"looking only":["at"],"looking really":["good"],"looking through":["the"],"looking towards":["the"],"looking up":["python"],"looks a":["lot","lot"],"looks any":["nicer."],"looks arbitrary":["all"],"looks better":["than","or","than"],"looks better.":["You",":)"],"looks cleaner":["this"],"looks confusing.":["I"],"looks even":["better"],"looks fine,":["but"],"looks good":["to","enough","enough","to","in","already.","-","to","overall!"],"looks good!":["However,","Two"],"looks good,":["how","but"],"looks good.":["Since"],"looks great":["(\"looks","to","to","to"],"looks great,":["but","I","about"],"looks great.":["However,I'm","The"],"looks like":["you've","you've","they","a","it","it's","compared","are","a","you're","it","a","you","premature","a","the","the","mine","good","you","a","that's"],"looks like.":["Also"],"looks line":["12."],"looks more":["readable"],"looks much":["better."],"looks neat":[":)"],"looks nice":["and"],"looks nicer":["but","but"],"looks nicer!":["I"],"looks pretty":["good,","good.","to","good,"],"looks quite":["well","clean,"],"looks rather":["procedural."],"looks really":["ugly"],"looks smart...":["until"],"looks to":["me","them"],"looks way":["too"],"looks weird":["to"],"lookup ?":["What's"],"lookup attributes":["on"],"lookup rules":["will"],"lookup rules,":["overly"],"lookup to":["get"],"lookup worked":["at"],"lookup) but":["I"],"loop -":["tuple","you"],"loop ?":["(hint:"],"loop and":["replace","skip"],"loop at":["all"],"loop back":["to"],"loop combo":["to"],"loop has":["an","an"],"loop here.":["(Here's"],"loop in":["the"],"loop is":["meant","your"],"loop line":["8"],"loop through":["the"],"loop to":["accomplish","create","use"],"loop version":["is"],"loop when":["it"],"loop written":["in"],"loop you":["could","could"],"loop's `else`":["clause)"],"loop). I":["think"],"loop, in":["which"],"loop, you":["almost"],"loop-based dispatch,":["but"],"looping through":["your"],"loops, best":["of","of","of","of"],"loops, just":["to"],"loops, or":["imports"],"loops/ifs by":["use"],"loose `[`":["and"],"loosely bug":["me"],"loosely model":["all"],"lose that":["context."],"lose the":["love","sense"],"lose them":["for"],"loses the":["underlying"],"loss there.":["No?"],"lost it.":["I"],"lost when":["it's"],"lost. In":["fact,"],"lost. So":["when"],"lot about":["themselves.","themselves","context"],"lot and":["have","has"],"lot cleaner.":["I've"],"lot for":["your"],"lot from":["it."],"lot in":["Javascript"],"lot instances":["would"],"lot less":["ugly"],"lot more":["confusing","than","composable.","sense"],"lot of":["code.","things","use","thought","coding.","different","submissions.","code.","classes,","comments","sense.","things","redundant","time","redundant","different","alternatives","pointless","other","time","added","great","OOP","work","better","sense,","staring","methods","failed","repetition","that,","information"],"lot! I":["might"],"lot, didn't":["think"],"lot. So":["maybe"],"lot. The":["only"],"lot. You":["will"],"lots of":["little","values"],"lova to":["hear"],"love Python's":["comprehensions"],"love a":["little"],"love an":["explanation"],"love any":["feedback"],"love how":["many"],"love regexps,":["but"],"love to":["hear","know","be"],"loved your":["solution!"],"low level":["-","text","details,"],"low-level terms":["of"],"lower and":["count","count"],"lower case":["chars","words","and","characters\"","?"],"lower case,":["what"],"lower complexity.":["I've"],"lower level":["of"],"lower the":["strings"],"lower() call":["should"],"lower(); i":["need"],"lower-case L":["is"],"lower-cased string":["to"],"lower-level concepts":["like"],"lowercase and":["underscore","then"],"lowercase attributes":["in"],"lowercase because":["I"],"lowercase before":["breaking"],"lowercase in":["order"],"lowercase input,":["why"],"lowercase names.":["Also"],"lowercase regex":["check?"],"lowercase the":["whole","word"],"lowercase version":["of","and"],"lowercased version":["of"],"lowercased words":["works"],"lowercasing a":["word."],"lowercasing and":["alphagramming"],"lowercasing char":["by"],"lowks' advice":["above,"],"luck, we":["will"],"lword in":["count`"],"mac. (And":["I"],"machinery here,":["and"],"machines. However,":["we"],"made \"hey\"":["a"],"made _dna_strand":["privatish"],"made `._sanitize`":["a"],"made `normalize_word`":["a"],"made all":["the"],"made another":["version"],"made area_code":["a","a"],"made both":["checks"],"made code":["easier"],"made even":["shorter"],"made for":["the"],"made from":["T"],"made hidden":["by"],"made in":["this"],"made intent-revealing":["methods"],"made it":["a","a","a","much","easier"],"made much":["more","more"],"made my":["code"],"made non-public":["(prefixed"],"made non-public.":["That"],"made obvious":["by"],"made public":["or"],"made sense":["in","if","were"],"made shorter":["using"],"made shorter.":["I"],"made some":["sense"],"made the":["code","changes","whole","code","changes.","test","solution","code","encoding","predicates","'ALL"],"made them":["static","functions","regular"],"made this":["more"],"made those":["changes"],"made your":["helper"],"made-up backstory.":["Let's"],"magic (I":["would"],"magic constants.":["I"],"magic from":["`re`"],"magic numbers":["as"],"magic numbers,":["but"],"magic strings,":["but"],"magic strings?":["What"],"magic values":["here"],"main and":["first"],"main conditional":["and"],"main difference":["is"],"main function":["were"],"main logic":["is","is","for"],"main method":["as"],"main point":["is"],"main programs":["logic."],"main reason":["I"],"main smells":["as"],"mainly a":["Ruby"],"mainly an":["OO"],"mainly as":["a"],"mainly because":["I"],"maintable, and":["modular;"],"maintain (as":["it's"],"maintain invariants.":["Wether"],"maintain it.":["Been"],"maintain some":["state"],"maintain the":["invariants."],"maintain your":["code"],"maintain) for":["no"],"maintainability bonus":["that"],"maintainability by":["pulling"],"maintainable and":["agile"],"maintainable code":["-"],"maintainable in":["a"],"maintainable is":["to"],"maintainable than":["versions"],"maintained along":["with"],"maintained by":["the"],"maintainer (ok":["here"],"maintains no":["state,"],"maintains order.":["Using"],"maintenance and":["usage"],"major problem":["in"],"majority of":["cases,","them"],"make `.source`":["\"private\""],"make `Bob.hey()`":["a"],"make `Phrase.word_count`":["a"],"make `Phrase`":["hashable"],"make `__anagram_key`":["clearer?"],"make `alphagram`":["a"],"make `area_code`":["and"],"make `dna`":["data"],"make `hey()`":["a"],"make `isBlank`":["simpler"],"make `is_question`":["quite"],"make `is_shouting`":["very","clearer,"],"make `same_chars`":["more"],"make `silence()`":["less"],"make `str.translate`":["more"],"make a":["wrapper","method","huge","class","good","list","`list`","Word","judgement","public","public","public","public","public","public","lot","public","named","class"],"make all":["the","tests","your","the"],"make an":["accessor","is_silent"],"make any":["sense"],"make both":["work?"],"make changes":["to"],"make clean":["looking"],"make clear":["that"],"make clearer":["what"],"make code":["more","harder","more","more"],"make counting":["simpler"],"make each":["of"],"make empty":["__init__"],"make everything":["public"],"make for":["a"],"make fruitful":["discussion!"],"make good":["use"],"make hey()":["just","a"],"make implementation":["details"],"make it":["more","a","easier","look","more","a","consistent,","less","more","even","more","a","more","more","more","more","more","self","a","more","clear","clear","\"private\"","more","more","extensible!\".","easier","as","worth","clearer","a","a","a","harder","a","public","a","public","public","clear","public","public","public","shorter?","even","simpler?","simpler?","easier","more","easier","more","more","a","public","explicitly","more","run","split","more","a"],"make its":["intent"],"make line":["7","5","#7"],"make lines":["using"],"make local":["aliases"],"make me":["think"],"make mentally.":["On"],"make message":["assignemt"],"make method":["non-public","static"],"make more":["methods","sense","sense","sense.","sense,"],"make my":["if/else"],"make new-style":["classes"],"make no":["difference"],"make one":["triply-`and`ed"],"make out":["behind"],"make phrase":["non-public"],"make sence,":["but"],"make sense":["outside","in","to","of","to","if","(though","if","to","to","to","to"],"make sense,":["thanks.","and"],"make sense.":["So"],"make sense?":["Can't"],"make seperate":["functions,"],"make similar":["improvements"],"make since":["of"],"make some":["sense","references"],"make something":["like"],"make sure":["you","that","the","some","the","that","we","that","you","I","````statement````","that","that","that","number-only","it's","you"],"make surprises":["about"],"make that":["much","clear.","change","change","public,"],"make the":["first","tests","`hey`","jump","code","clearest","helpers","change.","code","code","code","method","methods","handle","code","code","code","structure","operation","code","code","whole","classifying","caller","code","other","code","`word_sort`","input","transition","ifs","code","split","intent","code","`_is_silent`,","comprehension","code","same","code","code","code","code","subroutines","tests","class","next","simplified_phrase()","classification","name","tests","``DNA``","``DNA``","string"],"make them":["easier","all-caps","functions","instance","methods","private","private,","more"],"make these":["individual","changes"],"make things":["non-public,","much"],"make this":["a","more","clearer?","shorter","shorter.","really","happen.","a","even","more","self-documenting.","spaghetti-like,","pass","more","class","problem","work","work","even"],"make those":["functions"],"make uppercase":["test"],"make use":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"],"make you":["class"],"make your":["very","already","class","class","classes","classes","classes","class","class","class","class","classes","identity","code","code","code"],"makes a":["copy,","lot","more","little","program","lot","ton"],"makes checks":["with"],"makes code":["more","faster"],"makes control":["flow"],"makes definition":["look"],"makes difference":["for"],"makes good":["use"],"makes heavy":["use"],"makes interesting":["point"],"makes it":["seem","a","more","prevents","very","nicely","clear.","easy","more","easy","quite","more","more","more","very"],"makes lazy":["property"],"makes life":["very"],"makes line":["7","14"],"makes little":["sense"],"makes me":["feel","want","think","think"],"makes more":["sense.","sense","sense."],"makes perfect":["sense,"],"makes reading":["the"],"makes sense":["to","move","if","to","by","when","to","to"],"makes sense,":["but"],"makes sense.":["Just","I","I've"],"makes sense;":["it's"],"makes tests":["pass."],"makes that":["change"],"makes the":["first","transcription","following","`elif`","predicate","code","logic","call","code","code","code","code","code","code","code","code","given","checks"],"makes them":["\"new-style\"","able"],"makes things":["simpler?","overly"],"makes this":["a","clearer,"],"makes total":["sense."],"makes up":["some"],"makes usage":["of"],"makes validation":["complicated."],"maketrans and":["translate"],"maketrans to":["make"],"maketrans, yes,":["making"],"maketrans. Seems":["a"],"making 'Whatever.'":["your"],"making Statement":["class"],"making `Anagram`":["a"],"making `FormattedWord._sorted`":["a"],"making `FormattedWord`":["subclass"],"making `Statement`":["\"private\"."],"making `alphagram`":["a"],"making `is_*`":["methods"],"making a":["translation","*namespace*?","`_counter`?","Utterance","new","translation"],"making any":["changes,"],"making comments":["in"],"making could":["become"],"making good":["variable"],"making helpers":["private"],"making hey":["method's"],"making into":["the"],"making it":["private:","even","way","modular","shorter","an"],"making method":["non-public"],"making module":["level"],"making my":["changes,"],"making one":["string","on"],"making short":["helper"],"making suitable":["getter"],"making sure":["that","`msg`"],"making the":["second","code","robot","code","internal"],"making them":["methods","\"private\"","methods","class"],"making things":["non-public."],"making this":["a","a","complete"],"making those":["functions","functions"],"making use":["of","of","of","of","of"],"making yours":["extend"],"man would":["that"],"man. I":["didn't"],"manage the":["nucleotide_counts"],"manage your":["cache"],"managed to":["surprise","avoid"],"mandates a":["`RNA`"],"mandates that":["one","`number`","you"],"mandatory constructors":["named"],"mangled helper":["method..."],"mangled.) Besides,":["it"],"mangling mechanism":["kicks"],"mangling when":["you"],"mangling*](http://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references), effectively":["hiding"],"mangling, but":["that's"],"mangling, which":["isn't"],"manipulate Bob's":["response"],"manipulate the":["input"],"manipulating on":["immutable"],"manipulation and":["in"],"manipulation, indeed...":["but"],"manner. I":["like"],"manually built":["'counter'"],"many `word`s.":["Get"],"many calls":["at"],"many different":["ways."],"many experienced":["programmers"],"many ifs":["there"],"many improvements":["I"],"many instances":["of"],"many later":["projects"],"many lines":["separating"],"many methods,":["and"],"many more":["tests"],"many of":["these"],"many people.":["Even"],"many places":["to"],"many places.":["Consult"],"many problems":["with"],"many return":["statements","statements"],"many returns":["in"],"many scripts":["with"],"many times":["as"],"many tutorials.":["Good"],"many well-named":["functions."],"map from":["the"],"map it":["to"],"map lower":["case"],"map method":["so"],"map of":["differences\""],"map rna":["to"],"map snd":["over"],"map the":["nucleotides"],"map, ...":["--"],"map. Renamed":["to"],"map? If":["so"],"mapping (which":["force"],"mapping a":["character"],"mapping at":["the"],"mapping between":["the","the"],"mapping dictionary,":["iterating"],"mapping in":["class'"],"mapping is":["an","complete","cool,"],"mapping it":["like"],"mapping its":["responses"],"mapping them":["to"],"mapping with":["list"],"mapping. I":["then"],"mappings &":["whether"],"mappings to":["the"],"maps a":["predicate"],"maps characters":["to"],"maps to":["itself,","uracil."],"mark `Anagram.word`":["as"],"mark `Bob.responses`":["as"],"mark `DNA.dna`":["as","as"],"mark a":["method"],"mark all":["helpers"],"mark an":["attribute"],"mark anyway":[";)"],"mark helper":["methods"],"mark helpers":["with"],"mark in":["it."],"mark instead":["of","of"],"mark is":["by"],"mark should":["be"],"mark the":["exercice"],"mark\" but":["in"],"mark\". Code":["should"],"mark. This":["should"],"marked as":["private.","private.","no-public"],"marked with":["a"],"markers in":["code."],"marking `DNA.sequence`":["as"],"marking instance":["variables"],"marking private_methods":["and"],"marking this":["exercise"],"marks are":["picked"],"massive method":["with"],"match method":["in"],"match objects":["and"],"match patterns,":["split"],"match that":["description."],"match the":["story","good","story","rules","spec?"],"match this":["scenario,"],"match() always":["searches"],"match) from":["the"],"match. Unless":["of"],"matched all":["the"],"matcher objects,":["like"],"matchers are":["dynamic"],"matches =":["[]"],"matches anymore?":["Will"],"matches empty":["strings."],"matches my":["feeling"],"matches of":["`\\w+`"],"matches the":["input."],"matches, because":["that"],"matches, in":["order"],"matching a":["regex."],"matching alphanumeric":["chars:"],"matching either":["level."],"matching function":["or"],"matching only":["a"],"matching pattern":["when"],"matching, algebraic":["types"],"matching, but":["I"],"matter for":["the"],"matter much":["how","as"],"matter of":["preference.","taste.","preference","context,","style,","replacing","context.","taste?","preference","preference","taste.","familiarity","style?","personal","personal","personal","fact,","style,","taste","preference","style"],"matter to":["the"],"matter too":["much."],"matter, Bob":["is"],"matter, especially":["that"],"matter, you":["could"],"matter. I":["prefer"],"mattered in":["assigning"],"matters that":["variables"],"matters when":["looping"],"matters. If":["one's"],"max. 2":["function"],"maximum of":["79"],"maximum recursion":["depth"],"may also":["look"],"may as":["well","well"],"may be":["applied","missing","possibly","better","just","a","justified","just","used","on","a","interested","more","helpful","a","presenting","on","justified","a","confused.)","quite","further","less","a","made","achieved","a","just","written","able","a","learning","some"],"may clear":["things"],"may come":["down"],"may contain":["unicode"],"may do":["a"],"may drop":["the"],"may expand":["them"],"may get":["more"],"may have":["forgotten","legitimate","a","do","been"],"may just":["write"],"may look":["like"],"may make":["it"],"may mess":["up"],"may not":["make","be","immediately","know","want","be","be","even"],"may pass":["test"],"may provide":["a"],"may really":["confuse"],"may refactor":["this"],"may reflect":["the"],"may seem":["natural,","better,","unfamiliar"],"may simply":["return"],"may want":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to"],"may we":["use"],"may well":["be"],"maybe \"str\"":["or"],"maybe I'm":["just"],"maybe ```":["message"],"maybe `not":["message`"],"maybe a":["bit"],"maybe by":["using"],"maybe extracting":["out"],"maybe having":["another"],"maybe helpers":["shouldn't"],"maybe it's":["idiomatic","fine"],"maybe just":["me."],"maybe lacks":["some"],"maybe make":["line"],"maybe making":["it"],"maybe message":["type"],"maybe more":["classes"],"maybe moving":["anagram"],"maybe my":["favorite"],"maybe next":["time","i'll"],"maybe not":["as","everything"],"maybe one":["that"],"maybe play":["with"],"maybe some":["name"],"maybe that":["just","consistent"],"maybe that's":["why"],"maybe the":["\"Whatever.\"","code","middle","guide","else"],"maybe there's":["something"],"maybe they":["should","are"],"maybe this":["approach"],"maybe those":["are"],"maybe try":["cleaning"],"maybe using":["more"],"maybe you":["could","have","can"],"me (each":["in"],"me -":["as","this","and"],"me [this":["comment","comment"],"me `re`":["module"],"me a":["little)","little","bit)","good","bit","comment"],"me about":["early"],"me against":["their"],"me all":["the"],"me also":["what"],"me and":["just","got","draws","I"],"me as":["well.","the"],"me awhile":["to"],"me call":["len"],"me down":["a"],"me either.":["Create"],"me feel":["sad"],"me for":["this","such","`hey()`"],"me from":["a"],"me if":["you"],"me in":["python","practice"],"me is":["OK.","the","that"],"me it":["just","really","would","obfuscates","seems","seams","seems","reads"],"me know":["if"],"me of":["my","programming"],"me on":["the","this","line"],"me or":["are"],"me out":["on","on"],"me recently,":["you're"],"me remove":["the"],"me submit":["one"],"me than":["one-method","`if"],"me that":["`Message.content`","returning","````None````","seems","these"],"me the":["longer","behavior"],"me they":["think"],"me think":["that","of","it"],"me thinking":["about","was"],"me through":["this."],"me to":["take","criticize","do","be","have","think","move","be","http://exercism.io/submissions/2e65cefbc3a7a259f18fbbdf,","make","remove"],"me too,":["thanks"],"me want":["to"],"me wants":["something"],"me what":["I","you"],"me when":["I"],"me where":["else"],"me who's":["playing"],"me! I":["don't"],"me) has":["to"],"me) readable":["more"],"me, I":["wouldn't","played","feel"],"me, and":["e.g.","I"],"me, because":["it"],"me, but":["if","if","I","I"],"me, by":["the"],"me, if":["you"],"me, it's":["basically"],"me, just":["using"],"me, making":["the"],"me, once":["you"],"me, showing":["a"],"me, so:":["Yeah"],"me, though.":["You"],"me, well":["done"],"me. -":["I"],"me. A":["few"],"me. And":["`s`"],"me. For":["reference"],"me. Funny":["how"],"me. Good":["job"],"me. I":["would","am","would"],"me. If":["I"],"me. Is":["it","there"],"me. It's":["distinct"],"me. Just":["some"],"me. Maybe":["I","the"],"me. My":["only"],"me. Personally,":["I"],"me. Python":["is"],"me. Some":["argue"],"me. Take":["a"],"me. The":["test"],"me. This":["is"],"me. What":["you"],"me... but":["that's"],"me: `str.maketrans(\"T\",":["\"U\")`."],"mean Python's":["tokenizer"],"mean [PEP-263](http://www.python.org/dev/peps/pep-0263/)?":["I"],"mean `Bob.is_empty('Hello')`":["doesn't"],"mean `THYMIDINE":["="],"mean `sanitize`":["could"],"mean a":["real-life"],"mean about":["\u003ccode\u003ehey\u003c/code\u003e"],"mean because":["it"],"mean by":["iterative?","\"spacing","a","\"return","new","\"we","conditional"],"mean def":["__init__(self):pass?"],"mean doing":["the"],"mean having":["a"],"mean instance":["attribute"],"mean is":["that"],"mean just":["prepending"],"mean lower();":["i"],"mean more":["lines"],"mean moving":["the"],"mean naming":["as"],"mean something":["in","like:","like:"],"mean that":["`None`","`self.__foo`"],"mean the":["\"Woah,"],"mean to":["do","specify","modify"],"mean you":["have","shouldn't"],"mean your":["code"],"mean, I":["know","know"],"mean, can":["you"],"mean, i":["make"],"mean, who":["really"],"mean. If":["I"],"mean. Seems":["this"],"meaning as":["well."],"meaning hence":["many"],"meaning intact.":["Your"],"meaning is":["given"],"meaning of":["what's","message","code.","code.","code.","\u003ccode\u003ewords.strip()"],"meaning pretty":["well."],"meaning so":["you"],"meaning that":["the"],"meaning to":["invite","still"],"meaning without":["commenting"],"meaning, you":["can"],"meaning. And":["it's"],"meaning. By":["extracting"],"meaning: If":["I"],"meaningful `endswith`":["method."],"meaningful context.":["From"],"meaningful name":["?","-"],"meaningful name.":["Then"],"meaningful names":["makes","(is_silence,","(like","could"],"meaningful names,":["to"],"meaningful object,":["not"],"meaningful strings":["seperate,"],"meaningful variable":["names"],"meaningful without":["a"],"meaningful, and":["lower-case"],"meaningful. How":["about"],"means *yelling*.":["But"],"means I'm":["essentially"],"means `String.endswith()`?":["Will"],"means a":["question.')"],"means it's":["ok"],"means less":["documentation"],"means make":["them"],"means more":["thinking","code,"],"means nothing,":["it"],"means only":["checking"],"means should":["be"],"means shouting":["is"],"means that":["your","in"],"means to":["shout"],"means you":["have"],"means your":["`input[len(input)-1:]`"],"meant \"in":["the"],"meant `_nucleotide_sequence`.":["Currently"],"meant `str.lower()`":["sorry."],"meant functinos:":["http://legacy.python.org/dev/peps/pep-0008/#function-names"],"meant is":["that","that","that"],"meant that":["either"],"meant the":["logic","initializer)"],"meant to":["*test*","iterate","protect","protect","check","be","be*"],"meant too":["many"],"meant. As":["far"],"meant. Not":["sure"],"measurements comes":["from"],"measures? Just":["a"],"meat of":["the"],"meatware related":["(too"],"mechanics. The":["usage"],"mechanism for":["that"],"mechanism kicks":["in."],"mechanism that":["avoided"],"mechanism will":["lookup","lookup"],"mechanism you":["used"],"mechanism, but":["it"],"mechanism. And":["yes,"],"mechanisms like":["`super`,"],"meet the":["other","reqs","api.","specification:","specification:"],"member attribute":["being"],"member from":["inherited"],"member function":["from"],"member non-public.":["Double"],"member variable":["--","is"],"member variable,":["which"],"member, not":["an"],"member. All":["instance"],"members and":["`__field_name`"],"members being":["constants,"],"members in":["Python."],"members of":["a","`Bob`,"],"members should":["be","be"],"members, I'd":["be"],"members: names":["beginning"],"membership operation":["that"],"memoization but":["the"],"memoization of":["the"],"memoization simply":["based"],"memoization will":["outweight"],"memoize it":["so"],"memoize the":["word"],"memoize them":["using"],"memoized method":["to"],"memoized, so":["that"],"memoizer decorator":["(the"],"memoizer would":["build"],"memoizing `Phrase.word_count()`":["results,"],"memoizing. Even":["then,"],"memory efficiency":["for"],"memory first?":["Or"],"memory footprint":["of"],"memory footprint,":["raw"],"memory, the":["`finditer`"],"memory. I'm":["going"],"mental cost":["of","by"],"mental effort":["of"],"mental exercise.":["For"],"mentally. On":["line"],"mention English":["language"],"mention it,":["I"],"mention make":["your"],"mention that":["an","since"],"mention what":["that"],"mentioned by":["@jacklyn"],"mentioned case":["the"],"mentioned elsewhere,":["one"],"mentioned in":["boldface","[PEP8](http://www.python.org/dev/peps/pep-0008/)."],"mentioned only":["to"],"mentioned the":["redundancy"],"mentioned, I":["would"],"mentioned, `input`":["is"],"mentioned. I":["just"],"mentioning. I":["just"],"mentionned removing":["a"],"mentionning you":["had"],"mentions terms":["like","like"],"mere function":["would"],"mere two-terms":["comparison"],"merely an":["implementation"],"merely standing":["on"],"merge into":["your"],"merge what":["you"],"merits or":["otherwise"],"mess -":["that's"],"mess up":["invariants"],"mess with":["pythonistas","implementation","your"],"mess, I":["have"],"message =":["message.strip()","''","(message","self.normalize(message)","Bob.normalize(message)","self._normalize(message)"],"message ==":["''`","message.upper():","message.upper().","None`,","message.upper():","message.upper()","None"],"message Class":["is"],"message ```":["would"],"message and":["the"],"message assignemt":["a"],"message at":["border","the"],"message being":["yelled"],"message came":["in"],"message classes":["`msg`"],"message classifiers":["as","out"],"message classifying":["part."],"message could":["be","determine"],"message else":["False","''`"],"message else\"":["is"],"message empty?\"":["\"respond"],"message from":["the","responses."],"message has":["any"],"message if":["message"],"message implies":["a"],"message in":["the","Bob","some","anyway","separate"],"message inside":["your"],"message is":["not","None","not","of","silence,","shouted.","very","yelled.","None","`None`","already","either","uppercase"],"message it's":["working"],"message logic.":["I"],"message looks":["like"],"message must":["END"],"message of":["a"],"message only":["contains"],"message or":["''","'","'","not","message.strip():","not","message.strip()","not","''´","''`"],"message processing":["([Single","by","in","to"],"message rather":["than"],"message shouted?\"":["..."],"message to":["be","message.upper().","be"],"message type":["(silence,","logic"],"message type.":["Would"],"message types":["are","with"],"message using":["Pythons"],"message was":["shouted"],"message with":["the"],"message\" cleanup":["though."],"message' and":["then"],"message, and":["which"],"message, hence":["the"],"message, so":["it's"],"message. But":["if"],"message. If":["you"],"message. In":["addition,"],"message. It":["may"],"message. The":["short"],"message.isUpper() for":["the"],"message.is_something(): return":["self._something()`"],"message.isspace()` with":["`len(message.strip()"],"message.strip()\" is":["a"],"message.strip())` doesn't":["work"],"message.strip(), thanks":["for"],"message.strip()` would":["suffice."],"message.strip()`. It's":["interesting"],"message.upper() then":["every"],"message.upper()\", but":["never"],"message.upper(). By":["naming"],"message.upper(): #":["yelling),"],"message:\" doesn't":["give"],"message:` would":["have"],"message:`, because":["empty"],"message[-1] ==":["\"?\"`"],"message_is_... functions":["that"],"message_is_empty after":["the"],"message` could":["be"],"message` is":["a"],"message` will":["cover"],"message` would":["be","allow"],"messages are":["to"],"messages defined":["based"],"messages for":["a"],"messages that":["are"],"messages to":["query"],"messages weren't":["caught"],"messages, so":["why"],"messages. For":["instance,"],"messages. This":["way,"],"messages? It":["could"],"messaging relay.":["And"],"messed. If":["you"],"meta-classes you":["must"],"meta-programming in":["a"],"metaprogramming here":["and"],"meter so":["much."],"method (`standarize`)":["that"],"method (don't":["need"],"method -":["make","and"],"method --":["I"],"method ?":["Hint"],"method `.endswith()`":["instead"],"method `.is_shouted_at()`.":["That"],"method `.isspace()`":["in"],"method `.isupper()`":["basically"],"method `Bob.Bob`":["on"],"method ``answer``":["(or"],"method `from_rna`":["which"],"method `get_words()`,":["but"],"method `isspace`":["instead"],"method `isupper()`":["in","=)","I"],"method `isupper`":["is"],"method `str.isspace()`":["too."],"method `str.isupper`":["that"],"method `strip`,":["but"],"method `translate`,":["which"],"method a":["little","`classmethod`"],"method addressing":["should"],"method already":["makes","in"],"method always":["has"],"method and":["use","a","normalization","argument","good","a","verb,","then"],"method argument":["`string`,"],"method argument.":["Especially"],"method arguments.":["Also,"],"method as":["quickly","\"private\",","a","per","predicate","opposed","well."],"method at":["a"],"method be":["named"],"method became":["any"],"method because":["message","it"],"method better":["to"],"method but":["in","`Bob`"],"method call":["(i.e.,","and","with"],"method called":["`isalpha`","`endswith()`,"],"method calls":["(which","doesn't"],"method can":["help"],"method chaining":["was"],"method chaining.":["Initially,"],"method checks":["\"is_angry\""],"method comparing":["itself"],"method could":["use"],"method count":["and"],"method declarations.":[":)"],"method definition":["would"],"method definitions":["and"],"method does.":["And"],"method every":["time"],"method extraction":["would"],"method fails,":["`str.replace`"],"method for":["silence.","this","issilence()","each","_is_yelling","checking","checking","this","this","strings","checking","strings.","strings.","line","the","checking","performing","is_question","yelling."],"method from":["the"],"method got":["pulled"],"method has":["some"],"method here":["to"],"method here:":["if"],"method in":["my","exchange","`hey`","`_shouting`.","the","strings,"],"method instead":["of","of"],"method is":["called.","better","achieved","that","the","highly","a","also","much","not"],"method it":["should","still"],"method itself.":["And"],"method makes":["that"],"method mention":["English"],"method name":["to"],"method name,":["fixed."],"method named":["`strip()`,","`def"],"method names":["mangled.)","would","w/","to","that","and","capture","begin"],"method names,":["variable","..."],"method naming":["convention,"],"method non-public":["by","and"],"method of":["`str`.","solving","the","`str`","string","the","marking","a","a","string"],"method on":["`str`","`str`","string","a","`str`","`str`","Bob,","`str`.","string","string","`str`","`str`","strings","`str`","`str`","`str`","the","string","`Phrase`?","an","`Phrase`","line","strings"],"method once,":["so"],"method only":["consists"],"method or":["function","a","attribute","function","`Anagram.alphagram`?","methods","function"],"method pretty":["much"],"method private,":["since"],"method probably":["needs"],"method rather":["than"],"method re.split().":["The"],"method reminded":["me"],"method returning":["a","a","a"],"method seems":["to"],"method should":["deal","be"],"method signature":["shouldn't"],"method simple":["enough"],"method simply":["return"],"method so":["`Bob.hey`","you","that"],"method static":["when"],"method str.isupper()":["instead"],"method string.endswith('?')":["instead"],"method such":["as"],"method that":["may","i","would","can","could","returns","is","describes","doesn't","checks","can","checked","checked","checked"],"method to":["the","get","check","check","check","check","check","lower","return","get","handle","handle","return","`_clean`","test","`_alphagram`.","check","fix","filter","split"],"method too":["but"],"method translate()":["together"],"method type?":["Do"],"method was":["definitely","called"],"method when":["it","it's"],"method which":["adds","may","is","checks"],"method will":["be"],"method with":["more","more","a","static","doc.","descriptive","some","`raise`,"],"method without":["worrying"],"method won't":["die"],"method would":["treat","be","be","be","work","be","clearly"],"method you":["mentioned.","can","can"],"method you're":["trying"],"method! I":["like"],"method's body":["with","mostly"],"method's effect":["as"],"method's logic":["among","more"],"method, I":["create","want"],"method, after":["your"],"method, amazingly":[":)"],"method, and":["added","in","class","shout","only","using"],"method, as":["it's"],"method, because":["standard"],"method, but":["otherwise","it","there","I'm","I","the"],"method, can":["just"],"method, even":["for"],"method, for":["example"],"method, instead":["of","of"],"method, isupper,":["which"],"method, no":["?"],"method, not":["a"],"method, or":["moving","a"],"method, so":["you","I"],"method, the":["reasoning"],"method, though":["wouldn't"],"method, though,":["since"],"method, which":["yields","you","relied","I"],"method, you":["simply"],"method. Because":["the"],"method. For":["example,"],"method. Good":["use"],"method. I":["am","can","feel"],"method. In":["a","the"],"method. It":["would","should","will","already"],"method. Maybe":["there"],"method. Moreover,":["converting"],"method. One":["option"],"method. See":["[PEP"],"method. Somehow":["I"],"method. This":["problem"],"method. To":["check"],"method. Your":["`match`"],"method... That":["would"],"method; thanks":["\"batteries"],"method; the":["use"],"method? Also,":["python's"],"methods (another":["way"],"methods (e.g.,":["`def"],"methods (except":["`hey()`)"],"methods (or":["a"],"methods (per":["@amiya)"],"methods (sequence":["types"],"methods (the":["`@filiberto`"],"methods (whether":["instance","bound"],"methods -":["they"],"methods --":["_message_is_shouting,"],"methods /":["properties."],"methods ?":["Inlining","Do","Why"],"methods `@margarita`":["could"],"methods `isEmpty`":["and"],"methods `isupper()`":["and"],"methods `verse(self,":["num)`"],"methods act":["like"],"methods actually":["use"],"methods again":["to"],"methods all":["accept"],"methods already":["says"],"methods and":["naming","double","where","property","other","have","string-specific","\"protocols\"","attributes","chose","doesn't","see","instantiated"],"methods any":["object"],"methods are":["just","on","module","typically","set","not","objects,","objects","objects","a","marked","enough","one-liners.","really","incosistient","simple.","chain-able,","internal"],"methods argument":["`string`"],"methods as":["you","private,","non-public"],"methods at":["all","all"],"methods attached":["to"],"methods available":["for"],"methods because":["the","they're"],"methods below":["main","`Bob`","`Bob.hey`","`Bob.hey`"],"methods but":["that's"],"methods by":["stamping"],"methods can":["be"],"methods class":["methods?"],"methods could":["be"],"methods don't":["meet"],"methods expect":["it"],"methods for":["`Message.content`?","checking","checks","all","more","strings","the","silence","predicates","figuring"],"methods from":["string","being"],"methods generally":["can"],"methods have":["on","on","some","only"],"methods if":["you"],"methods impact":["clarity?"],"methods in":["the","the","`str`","Python.","a","```","the","Statement","all","all","`Bob`","closure","separate","the","your"],"methods instead":["of","of","of"],"methods instead,":["as"],"methods is":["not","usually","actually","that","better","not","too"],"methods isupper()":["and"],"methods just":["put"],"methods like":["these?","`isupper()`","namespace","just","```lower(),","**.isupper()**","your"],"methods makes":["the"],"methods might":["be"],"methods names":["and"],"methods of":["the","`Bob`,","the","the","the"],"methods on":["`str`","`str`","the","`Bob`","Bob?","`str`","`dict`","`String`?","the","it.","it.","`string`.","Bob."],"methods operates":["on","on"],"methods or":["static","variables,","functions"],"methods out":["as","is","of"],"methods private":["or","for"],"methods private,":["so"],"methods python":["provides"],"methods rather":["than","than"],"methods returning":["constant"],"methods should":["be","be","be","be"],"methods so":["that"],"methods static":["is"],"methods such":["as"],"methods take":["the"],"methods than":["necessary?","method"],"methods that":["begin","don't","should","are","might","it","more"],"methods the":["best"],"methods there":["is"],"methods to":["\"transcript\"","`Bob`,","make","the","check","check","clarify","make","inspect","inspect","inspect","express","`Bob`"],"methods too":["complicated."],"methods under":["a"],"methods uses":["the"],"methods using":["the"],"methods very":["small."],"methods violate":["the"],"methods were":["significantly","enough),","all"],"methods which":["each"],"methods whose":["names"],"methods with":["meaningful","descriptive","meaningful","similar","almost","almost","descriptive","descriptive","names","lambda(s)"],"methods within":["the"],"methods works":["well","on"],"methods would":["impact","help","fit","make","give","be","clutter","be"],"methods wrapping":["`if`"],"methods you":["fall","use"],"methods! One":["thing"],"methods\", ie":["`Message.is_silent(msg)`"],"methods) are":["class","objects"],"methods) for":["ways"],"methods) in":["the"],"methods) names":["are"],"methods) or":["use"],"methods, I":["think","always","think"],"methods, and":["I","group"],"methods, but":["I"],"methods, class":["methods"],"methods, it":["would"],"methods, like":["`.endswith()`."],"methods, not":["being"],"methods, parameters,":["variables"],"methods, since":["you're"],"methods, that":["you"],"methods, they":["can"],"methods, though":["PEP8"],"methods, to":["make"],"methods, until":["I"],"methods, using":["only"],"methods, why":["not"],"methods, with":["meaningful"],"methods, you":["override"],"methods. A":["class"],"methods. Everything":["else"],"methods. However":["this"],"methods. I":["chose","could,"],"methods. If":["you"],"methods. It":["starts"],"methods. More":["on"],"methods. My":["take"],"methods. See":["[PEP"],"methods. The":["code"],"methods. These":["are"],"methods. They're":["not"],"methods. This":["is"],"methods. Try":["looking"],"methods. What":["do"],"methods/functions with":["more"],"methods: `clean_words`,":["`do_word_count`"],"methods? Either":["they're"],"methods? How":["would","would"],"methods? It":["would"],"methods? This":["way"],"methods? We":["do"],"methods? comments?":["tests?"],"methods] (http://docs.python.org/3/library/stdtypes.html#string-methods)":["like:"],"methods](http://docs.python.org/2/library/stdtypes.html#string-methods) like":["`isupper`,"],"methods](http://docs.python.org/2/reference/datamodel.html#special-method-names) (also":["called"],"methods__ and":["uses"],"metric here,":["maybe"],"mewmew left":["off:"],"middle ground":["that"],"middle lambda":["at"],"middle one":["is"],"might also":["have","want","consider"],"might argue":["that","that"],"might as":["well"],"might be":["easily","clearer.","written","object-oriented","a","your","good,","python3","for","interested","sure","easier","a","good","worth","more","some","safer","useful.","my","that","easier","to","unnecessary,","easier","helpful","able","gaming","a","more","a","fragile","a","a","nicer,"],"might clean":["it"],"might consider":["something","a"],"might consider.":["`msg"],"might even":["throw"],"might fail":["if"],"might find":["useful"],"might for":["a"],"might go":["wrong.","some"],"might have":["been","used","used","been","to"],"might indeed":["be"],"might keep":["the"],"might know":["more"],"might lift":["the"],"might look":["at","through"],"might make":["this","the","the","`__anagram_key`","it","sense","the","it","it","it"],"might more":["appropriately"],"might need":["it,"],"might not":["be","be","be","work","realise","be","be","find","be","be"],"might prefer":["the"],"might set":["rawinput"],"might such":["an"],"might take":["a"],"might think":["of"],"might think.":["It"],"might wanna":["fix"],"might want":["to","to","to","to","to","to","to","to","to","to","to"],"might well":["be."],"might write":["a"],"migrate to":["separate"],"migrated more":["and"],"mile to":["provide"],"million ways":["to"],"mimic that,":["but"],"mimics the":["real-life"],"mind (it":["did"],"mind checking":["over"],"mind if":["your"],"mind just":["didn't"],"mind that":["`re.findall`","regular","you","your"],"mind was":["[this"],"mind when":["reading"],"mind while":["reading."],"mind) wondering":["if"],"mind. I":["assume"],"mind. Now":["I've"],"mind. The":["`Anagram`"],"mind: If":["you're"],"mind? I":["can't"],"mine (where,":["admittedly,"],"mine just":["specifies"],"mine solution":["and"],"mine when":["I"],"mine, but":["I"],"mine. Didn't":["know"],"mines etc)":["on"],"minimal \"working":["state\")."],"minimal implementation":["does","passing"],"minimal transformation":["capabilities."],"minimal, and":["the"],"minimize flow-control.":["No"],"minimizing the":["if"],"minor and":["localised"],"minor but":["could","python"],"minor change":["(\"source\""],"minor glitch.":["There"],"minor improvements":["though."],"minor layout":["/"],"minor nit":["that","to"],"minor nitpick,":["you"],"minor point:":["why"],"minor points":["though."],"minor points:":["You"],"minor thing:":["Python"],"minor things":[":","I"],"minor), but":["what"],"minor, but":["`^\\w`"],"minus I":["forgot"],"mirror of":["the"],"mirrors `dict.items()`":["FWIW)"],"misleading (it's":["\"raw\""],"misleading 2.":["If"],"misleading and":["is"],"misleading widely":["used"],"misleading. Reserving":["them"],"misleading. You":["are"],"misread the":["doc's"],"miss anything,":["maybe"],"miss out":["one"],"miss some":["tests"],"miss that":["there"],"missed \"isupper\",":["and"],"missed it)":["as"],"missed that":["one!","part!"],"missed that.":["I"],"missed the":["\"isupper\"","`str.isupper()`"],"missed. An":["exception"],"misses out":["on"],"missing a":["prolonged","lot","word","rule"],"missing abstraction":["called"],"missing any":["other"],"missing from":["it"],"missing key":["with"],"missing something":[":)"],"missing space":["between"],"missing the":["hint"],"missing your":["point"],"missing, but":["in"],"misspelled `candidate`":["in"],"mistak in":["'GFY'"],"mistake in":["submission"],"mistaken belief":["that"],"mix abstraction":["levels"],"mix those":["two,"],"mix-up in":["responsibilities"],"mixed up":["the"],"mixing of":["two."],"mixins. Or":["if"],"model (`FormattedWord`)":["is"],"model all":["the"],"model domain":["class"],"model every":["detail"],"model from":["the"],"model the":["domain."],"model transcribing":["as"],"model your":["domain"],"model. There's":["such"],"modeled of":["whats"],"modeling or":["describing"],"moderators are":["needed"],"modification (sort":["of)."],"modified at":["all?"],"modified the":["code"],"modifies the":["variable.","input"],"modify `is_silent`":["so"],"modify if":["the"],"modify methods":["in","in"],"modify nucleotide":["sequence,"],"modify the":["database,","top"],"modifying the":["class,","input"],"modular and":["to"],"modular; isn't":["it?"],"module (e.g.":["``sentence.py``)"],"module (just":["like"],"module -":["you"],"module 100000":["loops,"],"module \u003e":["methods"],"module `nucleic_acids`":["or"],"module and":["that's","two"],"module as":["soon"],"module at":["some"],"module but":["it","don't","dont","don't"],"module context":["here;"],"module did":["not"],"module didn't":["upload."],"module for":["`Nucleotides`.","a","something"],"module has":["some","a","been"],"module in":["general)"],"module is":["rather","to","like","named"],"module level":["constants","constant","constants","constants.","functions","constant","\"constants\"","`words_re`","global,","function","constants","documentation","or"],"module level,":["or"],"module level.":["Then","Using"],"module names":["you"],"module or":["separate"],"module saves":["a"],"module seems":["like"],"module take":["care"],"module to":["do"],"module with":["the"],"module's functions":["now."],"module, because":["it"],"module, the":["only"],"module, you":["may"],"module-level functions)":["are","too."],"module. Alternatively":["you"],"module. But":["if"],"module. Could":["anyone"],"module. I":["have"],"module. I've":["just"],"module. Simple":["docstring"],"module. Unfortunately,":["exercism.io"],"modules because":["it"],"modules like":["Counter"],"modules makes":["a"],"modules you":["import,"],"modules, class":["names"],"modules, probably":["not."],"modules, then":["you"],"modules. In":["that"],"modulo 100":["and"],"moment, I":["understand"],"moment, imagine":["that"],"moment. I'm":["curious"],"months and":["forgot"],"months from":["now),"],"months later.":["It"],"months of":["neglecting","neglecting","neglecting"],"months or":["a"],"months, but":["this"],"months. :)":["I"],"mood which":["it"],"moot point":["considering"],"more \"fine-grained\"":["templating"],"more \"idiomatic\"":["way"],"more \"intelligence\"":["about"],"more \"native\"":["way"],"more -":["take"],"more DRY":["(Don't"],"more Python":["moderators"],"more Python-esque":["than"],"more Pythonic":["in","to"],"more Pythonic.":["```los```"],"more a":["\"special"],"more about":["stretching","what","the","extracting","this"],"more accurate":["description","than"],"more and":["more","realized"],"more approachable,":["the"],"more appropriate":["name","because","than"],"more appropriately":["be"],"more arbitrarily":["overcomplexified"],"more beautiful":[":)"],"more bottles":["of","of"],"more can":["be"],"more clarity,":["but"],"more classes":["than"],"more clean":["for"],"more clear":["than","without","what","what","what","what's","as","what","if","if","if","than","than"],"more clear,":["but"],"more clear.":["The"],"more clear?.":["For"],"more clearer":["whats"],"more clearly":["stated."],"more clearly?":["(I"],"more code":["than"],"more code,":["and","but"],"more comments":["in"],"more compact":["however"],"more compact.":["Please"],"more compatible":["with","with"],"more complex":["version","pattern","initializer","for","for"],"more complex,":["then","method"],"more complex.":["I","Perhaps"],"more complexity.":["How"],"more complicated":["inheritance","then","situation","checks.","`once`","than","(hence","ones","solution"],"more complicated,":["having","unfortunately.","but","your"],"more complicated.":["Is","Is"],"more concise":["for","and","and","(isupper()"],"more concise,":["but"],"more concisely":["phrased"],"more concrete":["concept"],"more confusing":["to","to","that"],"more confusing,":["not"],"more consistent":["in"],"more context":["on","on"],"more convenient":["and"],"more conventional":["method"],"more convoluted":["code,"],"more declarative":["way","(and"],"more declarative,":["decoupled"],"more decoupled)":["dispatch"],"more descriptive":["names?","name","name","name","like","and","than","variable"],"more descriptive.":["The"],"more difficult":["to","to"],"more direct":["way"],"more easily":["than","done","generalizable","using","in"],"more effective":["way","at","than"],"more efficient":["than","by","for","than","algorithm","--","than"],"more efficient,":["at"],"more elaborate":["would"],"more elegant":["way","checking","solution","than"],"more elegantly.":["`Counter`"],"more enjoyable":[":)"],"more evident":["in"],"more experienced":["developers"],"more explicit":["(good","and","and","that"],"more explicit,":["but"],"more explicit?":["The"],"more expressive":["and","and","code","than","and"],"more extensible,":["but"],"more extensible.":["I"],"more fitting":["method","methods","to"],"more flexible":["and"],"more fluidity.":["As"],"more for":["char"],"more full-blown":["DSL"],"more fully":["featured"],"more functional":["than","approach","dispatch","dispatch"],"more general":["solution","meaning","it"],"more generalizable](http://exercism.io/submissions/521f5b4f090dbbe6fd000238),":["but"],"more generic":["class","use.","way","dispatch","memoizer"],"more hints":["and"],"more idiomatic":["for","way","for","or","python.","Python.","way?","to","to","than","to","way"],"more idiomatic,":["but"],"more idiomatic.":["However,"],"more idiomatic?":["I'd"],"more if":["that"],"more implementation-oriented,":["`normalize`"],"more important":["logical","than"],"more in":["the","the","line","context"],"more indent,":["will"],"more information":["on"],"more infos":["on"],"more intent-oriented":["naming"],"more intent-oriented.":["I"],"more interesting":["submissions","problem"],"more into":["the"],"more intuitive":["if","than","i"],"more intuitive,":["perfect."],"more intuitively":["solve"],"more involved":["project?","then"],"more just":["preference."],"more knowledge":["of"],"more leverage":["in"],"more like":["a","DNA","`normalization`?"],"more lines":["of","of","and"],"more maintainable":["than","is"],"more meaningful":["variable","names","name"],"more mental":["cost"],"more methods":["because","than"],"more modular":["and"],"more natural":["way","place","even","to"],"more naughty":["business"],"more nitpick:":["when"],"more nuance":["but"],"more obvious":["and","where","than"],"more obvious,":["and"],"more of":["a","a","a","a"],"more on":["the"],"more optimal.":["Anyway,"],"more out":["of"],"more paranoid":["set"],"more pathologic":["regexes"],"more people":["to"],"more pep8":["compliant."],"more performant":["one?"],"more powerful":["object-oriented","than"],"more practice":["with"],"more pragmatic.":["However,"],"more preferable":["than"],"more processing":["and"],"more public":["methods"],"more pythonic":["-","solution:)","to","to","you","and","way","ways"],"more pythonic,":["really","but"],"more pythonic.":["Always"],"more readable":["that","and","and","if","than","moving","(like","if","and","so","to","end","IMHO.","in","this","form","as","and","and","when","if","than:","to","than","if","in","than","than","to","and","in"],"more readable,":["the","but","and","but","too.","expressive","although","not"],"more readable.":["But","However","Perhaps","It's","For","Or","In","I","Some"],"more readable/understandable.":["The"],"more readily":["convey"],"more robust":["when","solution","and","and"],"more self":["documenting","documenting"],"more self-descriptive":["if"],"more self-documenting":["(intent"],"more self-explanatory":["member"],"more semantic":["in"],"more sense":["to","if","IMHO.","to"],"more sense,":["here."],"more simple":["than"],"more simplify":["the"],"more simply":["than"],"more small":["PEP8"],"more spaces":["to"],"more spacing.":["Thankfully"],"more spartan":["style](http://ssdl-wiki.cs.technion.ac.il/wiki/index.php/Spartan_programming)'s"],"more specific":["about"],"more straightforward":["(and"],"more strictly":["object"],"more string":["helper"],"more succinct,":["I"],"more succinctly":["said"],"more succint":["methods","methods","for","although","like","with","method","method","method","method"],"more succint.":["I"],"more succintly.":["There"],"more suitable":["data","I"],"more suited":["class"],"more testable":["(you"],"more tests":["in"],"more than":["you","having","once","comments","the","syntax","a","a","a","many","once,","a","expected.","one","one","one","one","once","what","once"],"more then":["if/elif/elif/else."],"more theoretical":["thought:"],"more thing":["I","-"],"more thing.":["Consider"],"more things":["you"],"more thinking":["for","to","from"],"more thought.":["It"],"more to":["[new"],"more true":["to"],"more types":["of"],"more understandable":["seemed"],"more uniform":["(doesn't"],"more used":["to"],"more useful":["if","since"],"more useful.":["I"],"more useless":["code."],"more verbose":["that","and"],"more verbose,":["easier","I"],"more versatile":["because"],"more what":["you","I"],"more zen":["like."],"more, 99":["bottles"],"more, no":["less."],"more. The":["last"],"more. Try":["writing"],"more. nothing.":["maybe"],"most Python":["code","code"],"most answers":["to"],"most appropriate":["data","data"],"most beginner":["programmers"],"most broadly":["defined"],"most cases":["that"],"most clearly":["reflects"],"most descriptive":["name,"],"most difficult":["part"],"most elegant":["-","programming"],"most expressive":["or"],"most familiar":["with?"],"most frustration":["thing"],"most heated":["ones"],"most idomatic":["approach"],"most important":["code"],"most languages,":["not"],"most likely":["if"],"most natural":["representation,"],"most obscure":["thing"],"most obvious":["way"],"most obvious.":["Your"],"most of":["these","these","the","your","what","projects","answers","this","my"],"most part,":["however"],"most pythonic":["way","code"],"most readable":["way","code"],"most recent":["tests"],"most straightforward":["approach."],"most understand":["that"],"most unsurprising":["way"],"most would":["put"],"mostly agree":["with"],"mostly an":["added"],"mostly because":["they"],"mostly in":["framework-like","framework-like"],"mostly obsolete":["and"],"mostly syntactic":["sugar)"],"mostly understood":["what"],"mostly what":["one"],"motivation (typically,":["to"],"motivation to":["leave"],"move `Nucleotides`":["out"],"move `isshouting`":["et."],"move `trans_table`":["out"],"move caching":["logic"],"move helper":["methods"],"move in":["the"],"move it":["to"],"move non-public":["methods"],"move on":["to"],"move processing":["to"],"move some":["of"],"move the":["methods","implementation","logic","\"word","call","handling","helper","`.split()`","reversed","code","logic"],"move them":["out.","out"],"move those":["to"],"move was":["very"],"move would":["be"],"moved 'T'":["and"],"moved into":["the"],"moved it":["out."],"moved message":["processing"],"moved my":["cheese?\""],"moved on":["from"],"moved some":["of"],"moved the":["is_*","call","check"],"moved them":["outside"],"moved to":["a","a","a"],"moves the":["`is_...`"],"moving anagram":["check"],"moving check":["to"],"moving checks":["to","to","to"],"moving each":["`if`"],"moving hey":["method"],"moving it":["to"],"moving line":["9"],"moving message":["processing"],"moving some":["of"],"moving strings":["(responses)"],"moving tests":["to"],"moving that":["logic","logic"],"moving the":["logic","statement","logic","logic","logic","logic","logic","logic","if","logic","logic","checks","the","condition","intent","methods","whole","helpers"],"moving them":["out","to"],"msg =":["\"\""],"msg ==":["\"\":","\"\"","\"\"","\"\":","\"\":","\"foo\"","\"bar\":"],"msg ===":["\"\"","\"\""],"msg for":["message"],"msg if":["char.isalpha())`"],"msg is":["None"],"msg or":["_message"],"msg to":["the"],"msg\" to":["catch"],"msg) \"Fine.":["Be"],"msg) \"Woah,":["chill"],"msg.endswith(\"?\") or":["msg[-1]"],"msg[-1] ==":["\"?\"."],"msg_properties =":["classify_message(msg)"],"msg` to":["check"],"much I":["know"],"much a":["direct"],"much about":["that.","memory","the","how"],"much all":["of"],"much appreciated.":["Definitely"],"much as":["I","possible,","I","the","it","a"],"much better":["with","with","to","that","in","anyway.","than"],"much better,":["much","though"],"much better.":["You"],"much cleaner":["now."],"much cleaner.":["Thanks","Also"],"much clearer":["and","than","and","way"],"much code":["for"],"much coupling,":["precedence"],"much defensive":["programming"],"much details":["in"],"much does":["all"],"much easier":["to","to","to","to"],"much equally":["important,"],"much everything":["jamert"],"much explicit":["branching"],"much fit":["their"],"much flexibility,":["though"],"much fooling":["around"],"much for":["this","one","all"],"much from":["the"],"much going":["on","on?","on\"","on"],"much happening":["in","in"],"much how":["the"],"much improved.":["Very"],"much is":["going"],"much java":["lately,"],"much just":["for"],"much less":["satisfying"],"much like":["the"],"much longer":["than","than"],"much machinery":["here,"],"much more":["interesting","maintainable","difficult","natural","extensible,","zen","than","readable","preferable","declarative,","readable.","complicated","readable","convenient","efficient,","complicated","simple","clear!","pythonic","optimized.","complex","easily","readable"],"much of":["the","a","a","a"],"much other":["responsibilities"],"much overhead,":["so"],"much point":["in","in"],"much power":["in"],"much python":["code,"],"much repeated":["code."],"much sense).":["In"],"much simpler":["one.","by","to"],"much slower":["than"],"much space,":["only"],"much to":["complain","clarity."],"much whitespace":["for"],"much whitespace...":["but"],"much with":["python,"],"much' but":["the"],"much, even":["the"],"much. I":["simplified"],"much. Ive":["been"],"much. You":["seem"],"much. just":["a"],"muddies the":["waters."],"mull it":["over"],"multibyte characters":["and"],"multiple @summer":["decorators"],"multiple `return`":["statements"],"multiple arguments":["instead"],"multiple calls":["to"],"multiple character":["replacements"],"multiple characters.":["Because"],"multiple comparisons":["in"],"multiple conditional":["statements."],"multiple conditions,":["and"],"multiple functions":["in","has"],"multiple lines":["without"],"multiple lines,":["it"],"multiple responsibilities":["-"],"multiple return":["points,","statements","statements.","statements."],"multiple sentences)":["is"],"multiple source":["files,","files"],"multiple statements":["in","on"],"multiple times":["when","without"],"multiple times?)":["called"],"must END":["with"],"must always":["stay"],"must avoid":["using"],"must be":["different","listed"],"must come":["from"],"must have":["failed,","been","used","one"],"must inherit":["from"],"must necessarily":["be"],"must not":["appear"],"must use":["a"],"mutable public":["attribute"],"mutable value":["(like"],"mutate school.db\").":["The"],"mutating change.":["Maybe"],"mutation and":["imperative"],"mutator with":["`@jabari`"],"muted it":["and"],"mutual exclusiveness":["of"],"mutually exclusive":["I","so"],"my Bob":["exercise","exercise","submission."],"my Haskell":["version"],"my Java":["days,"],"my OCD":[":)"],"my Python.":["Thanks"],"my Ruby":["iterations"],"my Ruby,":["so"],"my `ANSWERS`":["tuple"],"my `__init__`":["to"],"my ```if```":["statements"],"my ```nucleotide_count```":["method,"],"my ```return```":["statement"],"my `word_count`":["now"],"my approach":["to"],"my approaches":["to"],"my attempt":["at"],"my attempts":[":)"],"my bad,":["this"],"my bad.":["I"],"my book":["this"],"my category-check":["functions"],"my changes":["and"],"my changes,":["I"],"my claim":["that"],"my clean":["initial"],"my code":["is","now?","looked","will","as","and","much","is,","because"],"my code!":["I"],"my code,":["I","I'd"],"my code.":["Thanks!","I"],"my coding":["styles"],"my comfort":["zone"],"my comment":["was"],"my comments.":["In"],"my comparisons":["in"],"my current":["solution","(and","knowledge"],"my day":["job"],"my defence,":["pep8"],"my editor":["is"],"my efficiency.":["I"],"my elif's":["didn't"],"my emacs":["but"],"my english":["rusty","please"],"my experience":["in","splitting"],"my eyes":["the","start"],"my favorite":["feature"],"my favourite":["feature"],"my feeling":["of"],"my file.":["I"],"my finger":["on"],"my first":["version,","try","stab","nit","attempt","time","steps","thought","feeble","ever","picked","try,"],"my formatting":["looks"],"my functions":["and","short"],"my gosh.":["This"],"my head":["around,","that"],"my humble":["opinion"],"my if/else":["statements"],"my implementation.":["For"],"my initial":["implementation"],"my inline":["comments"],"my interpretation,":["when"],"my last":["nitpick","exercise,","iteration;"],"my latest":["submission?"],"my liking":["but"],"my liking)":["this"],"my list":["of"],"my local":["copy."],"my logic":["-","is"],"my mac.":["(And"],"my method":["it"],"my method,":["I"],"my mind":["just","was"],"my mind)":["wondering"],"my mind.":["I"],"my mysterious":["nature?"],"my native":["language"],"my next":["iteration","iteration.","submission,"],"my opinion":["it's","the","it","it","it's","it","it","there","separating"],"my opinion,":["coersion","you"],"my opinion.":["This","You"],"my other":["Python"],"my own":["projects.)","first","code.","experience"],"my part":["by"],"my personal":["preference"],"my point":["of","of","of","of","of","of","of","of","of"],"my preferred":["answer."],"my python":["code"],"my readability":["and"],"my regex":["appropriately"],"my responses":["with"],"my script":["you"],"my second":["try"],"my self":["through"],"my senses":["and"],"my solution":["seems","is","of","as","as","to","I"],"my solution,":["it's","but"],"my solution.":["Is"],"my solutions,":["and"],"my stdlib":["much"],"my style":["above."],"my submissions":["were"],"my test":["case","suite","suite","suite","suite"],"my tests":["were","were"],"my thought":["process."],"my usage":["of"],"my variable":["name","name."],"my variables":["after"],"my versions":["for"],"my view)":["-"],"my way":["around","to","around"],"my work":["might"],"my wrong,":["sorry."],"myself \"did":["I"],"myself -":["it"],"myself doing":["TDD"],"myself if":["it"],"myself in":["using"],"myself into":["a"],"myself so":["far"],"myself to":["use"],"myself, but":["that","I","here"],"myself. I":["am"],"mysterious nature?":[":)"],"mystery bugs":["crop"],"my–very limited–knowledge,":["any"],"n (I":["admit"],"n +":["1)`."],"n Python":["3,"],"n for":["constructing"],"n in":["self.NUCLEOTIDES[\"all\"]}","range(start,"],"n not":["in"],"n, n":["+"],"nailed it":["with"],"name \"Rules":["Map\""],"name \"c\"":["it's"],"name 'Conversation'.":["Is"],"name 'str'":["of"],"name 'words'.":["If"],"name (collides":["with"],"name (eg.":["`strmap`)."],"name (for":["readability"],"name (well,":["```"],"name -":["it's"],"name Bob":["(now"],"name Language":["doesn't"],"name `Bob.hey`":["argument"],"name ``hey``":["available"],"name `data`":["isn't"],"name `message`":["for"],"name `sentence`,":["but"],"name `str`,":["as"],"name `to_rna`":["was"],"name `utterance`":["=)"],"name already":["serves"],"name anyway":["(easy"],"name as":["it's"],"name change":["doesn't"],"name changes.":["Is"],"name clash":["with"],"name clashes":["in","in"],"name conflicts":["with"],"name conventions,":["even"],"name creation":["starts"],"name explains":["enough"],"name for":["a","the","this","the","what","the","the","the","`x`","`Bob.hey`","`DNA.__init__`","`DNA.__init__`","this","`Bob.hey`","the","a","argument","the","the","the"],"name from":["someone","accompanying","accompanying"],"name functions":["(e.g."],"name if":["you"],"name implies":["it"],"name in":["string","the","a","a","context","the"],"name is":["more","a","fixed"],"name it":["`is_silent`.","with","along","with","more"],"name mangling":["mechanism","when"],"name mangling,":["but","which"],"name might":["have"],"name more":["fitting"],"name my":["variables","regex"],"name now":["that"],"name of":["the","[a","the","variable","a","a"],"name or":["extend"],"name shadows":["the"],"name should":["be"],"name simple":["expressions."],"name space":["pollution,","in"],"name than":["`input`","`nothing`."],"name that":["can","describes","describes"],"name them":["somehow?","somehow?"],"name things":["-","by"],"name to":["define","the","each","``__init__()``","signify","use","the"],"name uniqueness":["in"],"name what":["it's"],"name with":["a"],"name you've":["overridden"],"name –":["it"],"name! I":["also"],"name) necessary":["transformation,"],"name, I":["thought"],"name, and":["the"],"name, but":["I"],"name, for":["example,","example,"],"name, life":["gets"],"name, like":["`Bob._is_yell`,"],"name, which":["might"],"name, you'd":["need"],"name. Also,":["assuming"],"name. Don't":["know"],"name. I've":["replaced"],"name. In":["'Bob.hey`"],"name. It":["is"],"name. It's":["not","a"],"name. Several":["submissions"],"name. That":["may"],"name. The":["`getattr`"],"name. Then":["the"],"name. Try":["\"Returns"],"name? That":["seems"],"named \"Anagram\"":["-"],"named 'pep8'":["which"],"named `bob`":["and"],"named `def":["is_question(message):"],"named `string`":["doesn't"],"named `strip()`,":["`upper()`"],"named after":["what","the"],"named argument,":["ie"],"named better":["because","because"],"named better.":["I","Maybe"],"named constants":["instead","like"],"named function":["for"],"named functions":["are","to"],"named functions,":["so"],"named isSilent?":["Better"],"named modules.":["In"],"named predicates,":["I"],"named private":["methods,"],"named query":["methods?","methods?"],"named that":["way,"],"named the":["internal","method"],"named using":["a"],"named variables":["in"],"named with":["a"],"named, good":["job"],"named, to":["explicit"],"namely the":["`is_question`"],"names (is_silence,":["is_question...)"],"names (like":["is_silence,"],"names (put":["them"],"names (two":["leading"],"names (where":["\"hiding\""],"names -":["more","the"],"names --":["agreed"],"names added":["to"],"names and":["that","then","that"],"names are":["reserved","reserved","used","generally","not","generally","more","\"all_lower_with_underscores\"","prefixed","already","supposed"],"names begin":["with"],"names beginning":["with","with"],"names capture":["that"],"names clash":["with"],"names clearly":["signifying"],"names could":["help","be"],"names describe":["the"],"names descriptive":["for"],"names enhance":["readability"],"names etc.":["Name"],"names for":["'T'","them,"],"names from":["the"],"names if":["they"],"names in":["hand,","advance","self.db.iteritems()}"],"names into":["something"],"names is":["a","not"],"names like":["`__init__`,"],"names makes":["code"],"names mangled.)":["Besides,"],"names now":["add"],"names of":["modules","the","the","the","the"],"names on":["the"],"names please":["use"],"names should":["be","be","be"],"names so":["you","I"],"names that":["tell","are","are","try","are"],"names to":["make","the","try","avoid","the"],"names w/":["an"],"names with":["a"],"names would":["enhance","make","be","you"],"names you":["import."],"names) and":["slightly"],"names, ...":["I'm"],"names, and":["comments.","2/"],"names, but":["I"],"names, descriptive":["method"],"names, eg":["`THYMINE"],"names, it":["would","does"],"names, simple":["`DNA.to_rna`"],"names, to":["make"],"names, variable":["names,"],"names. \"if":["not"],"names. Also":["consider"],"names. But":["in"],"names. Can":["you"],"names. Do":["you"],"names. For":["variables/method"],"names. I've":["added"],"names. In":["this"],"names. It":["would"],"names. More":["about"],"names. Please":["refer"],"names. Well":["ok,"],"names. You":["follow","may"],"names. double-underscores":["are"],"names/function names":["please"],"namespace -":["there"],"namespace and":["make"],"namespace because":["that's"],"namespace for":["all"],"namespace in":["Python,"],"namespace like":["that."],"namespace. I":["think"],"namespace. See":["[The"],"namespace. That":["way"],"namespace? So":["even"],"naming `Bob.hey`":["attribute"],"naming `s`":["something"],"naming and":["pseudo-code","simple"],"naming as":["`_nucleotide_sequence`?"],"naming choices,":["and"],"naming class":["`DNA`?"],"naming conflict":["makes"],"naming convention":["(hint:","rather","and/or","1:","2:","(PEP08)"],"naming convention,":["but","```_extract_words()```"],"naming convention.":["However,"],"naming convention?":["Imho"],"naming conventions":["-","in","-","please","in"],"naming could":["probably","be"],"naming for":["a","`Bob.hey`","`Bob.reaction_to`."],"naming is":["a"],"naming it":["`_s`"],"naming makes":["it"],"naming something":["by"],"naming that":["we"],"naming the":["if","individual"],"naming things":["aspect."],"naming your":["variables","method"],"naming, I":["would"],"naming. Could":["it"],"naming. Might":["have"],"naming: neither":["`_wc`"],"nary a":["regex"],"native english":["speaker;"],"native functions":["on"],"native language":["would"],"natural even":["without"],"natural place":["to","to"],"natural representation,":["and"],"natural thing":["to"],"natural to":["me","do"],"natural way":["to"],"natural, queries":["for"],"nature of":["that","the"],"nature to":["add"],"nature, that":["isn't"],"nature, which":["is"],"naughty business":["with"],"near 4-fold":["increase"],"near each":["condition,"],"near thread-safe":["-"],"nearly useless,":["but"],"nears 26*26*1000,":["endless"],"neat approach":["to"],"neat way":["to","to","to"],"neat, like":["comparing"],"neccessarily mutually":["exclusive"],"neccessary, maybe":["they"],"necessarily a":["subclass","good"],"necessarily an":["attribute"],"necessarily be":["special-cased"],"necessarily going":["to"],"necessarily need":["an","to"],"necessarily requires":["subclassing"],"necessarily reusable":["outside"],"necessarily the":["most"],"necessarily. This":["is"],"necessary (so":["`dir`"],"necessary -":["for"],"necessary --":["is"],"necessary after":["all?\""],"necessary and":["there"],"necessary at":["least"],"necessary for":["a","me","this"],"necessary here,":["but"],"necessary here.":["Just"],"necessary in":["such","this","cases","either"],"necessary since":["\\w"],"necessary there.":["However,"],"necessary to":["make","copy","cast","re-`join`","have","expose","test","use"],"necessary transformation,":["but"],"necessary when":["empty."],"necessary, I":["find","want"],"necessary, but":["if","is"],"necessary, since":["`zip`"],"necessary. An":["`if`"],"necessary. Consider":["getting"],"necessary. I":["made"],"necessary. Leaving":["them"],"necessary. More":["on"],"necessary. Python":["has"],"necessary. Thanks":["for"],"necessary. Would":["be"],"necessary? It's":["not"],"need `Bob`":["-instance"],"need `Statement.anything`":["and"],"need `__init__`":["since"],"need `elif`":["statements","statements"],"need `else`":["at"],"need `if`":["statement"],"need `list()`":["in"],"need `message":["=="],"need `not":["self.phrase`"],"need `reduce()`":["on"],"need a":["colon","`MethodDispatcher`","class,","model","way","comment","regex","`lower`","`return","separate"],"need access":["to","to"],"need an":["instance","if/elif","`__init__`","argument."],"need and":["re.findall"],"need any":["safety"],"need blank":["line"],"need changing?":["could"],"need comments.":["This"],"need explicitly":["pass"],"need for":["the","it","composition","the","local","lines","line","a"],"need getter":["and"],"need instance":["methods"],"need it":["to","to","here"],"need it,":["as","but"],"need list":["comprehension"],"need maketrans":["to"],"need methods":["at"],"need more":["explanation:","practice","for"],"need neither":["the"],"need only":["one/and"],"need self)":["you"],"need self.blah":["here,"],"need static":["types,"],"need the":["Bob","line","`__init__`","whole","elses","`else`","list","list","string","comparison","extra","to","parens","parens","parens","instance.","parens","`Message`","parens","backslash","call","re","initial","first","lowercase","shebang","import.","`sentence","\"elif\",","counter","import"],"need them":["?","here?"],"need to":["initialize","make","chillout?","import","check","be","initialize","start","create","have","use","model","build","be","read","replace","compare","be","memoize","work","see","use","use","be","compute","test","check","change.","refer","create","create","have","be","use","turn","'encapsulate'","explicitely","check","force","clutter","\"clutter","hardcode","update","modify","modify","check","provide","encode","do","use","differentiate","make","go","be","check","know","write","drop","filter","do","force","check","define","know","wrap","make","be","check","mix","make","realize/check,","deduct","recalculate","be","know","declare","add","do","practice","care","have","adjust","truncate","check","check","be","be","go","learn","nest","import"],"need two":["comparisons","args"],"need** the":["method"],"need. We":["just"],"needed (if":["you"],"needed -":["it's"],"needed any":["more."],"needed because":["you"],"needed for":["what"],"needed if":["you"],"needed in":["this"],"needed representations":["(the"],"needed some":["variety"],"needed them,":["then"],"needed to":["implement","implement","convert","change","respond","say","return"],"needed variables":["as"],"needed, as":["pointed","we"],"needed, spoke.endswith":["will"],"needed. I":["even"],"needed. If":["you"],"needed. When":["I"],"needed_, so":["it's"],"needing review":["go"],"needing to":["refactor"],"needing words":["as"],"needless `None`":["checks."],"needless repetition":["until"],"needs 2":["blank"],"needs a":["better"],"needs another/different":["class"],"needs at":["least"],"needs more":["thought."],"needs refactoring":["a"],"needs to":["know","manage","represent","be","be,","respond","be.","be","be","be,"],"negating the":["need"],"negation, and":["I"],"negation, but":["I've"],"negation, since":["you're"],"negative =\u003e":["asking"],"negative indexes":["and"],"negative indexing.":["```s.endswith('?')```"],"negative indices":["you"],"negative list":["index","index"],"negative number":["is"],"negative numbers?":["Although,"],"negative translate":["in"],"negative values":["gracefully,"],"neglected to":["doc"],"neglecting it.":["What","What","What"],"neither -":["and"],"neither `_wc`":["nor"],"neither is":["the"],"neither of":["those"],"neither question":["nor"],"neither the":["current"],"neither. Fighting":["against"],"nervous or":["drunk"],"nest the":["methods","rest"],"nested \"if\"":["statement"],"nested 'if'":["statements"],"nested conditionals.":["The"],"nested function":["defs,"],"nested functions":["really","get"],"nested in":["the"],"nested logic":["which"],"nesting `Message`":["inside"],"nesting because":["it"],"nesting in":["```hey```"],"net's LINQ":["'first'"],"never _actually_":["written"],"never access":["the"],"never be":["undefined.","a","a","negative"],"never became":["part"],"never before":["seen"],"never called":["more"],"never change":["and"],"never claimed":["otherwise?"],"never considered":["extracting"],"never do":["anything"],"never done\"":["--"],"never get":["to"],"never had":["a"],"never have":["a"],"never heard":["of"],"never indicate":["that"],"never passed":["to"],"never raises":["an"],"never reassign":["variables"],"never receive":["any"],"never return":["anything,"],"never see":["`classmethod`s"],"never seen":["`split`"],"never send":["`None`"],"never throw":["in"],"never use":["it."],"never used":["outside","Counter,"],"never using":["it,"],"never* see":["them."],"new 2.x":["code?"],"new DNA":["instance?"],"new FormattedWord":["instance"],"new Utterance":["class"],"new ```self.phrase```.":["But"],"new and":["refreshing."],"new class":["called","snippet"],"new class,":["for"],"new class?":["Something"],"new client":["-"],"new code":["--","at"],"new code.":["[Link](http://docs.python.org/2/library/stdtypes.html#string-formatting)"],"new constant":["string"],"new contributors":["to"],"new features":["like"],"new from":["your","reading"],"new function":["for","for"],"new i":["python..."],"new in":["Python"],"new instance":["variables.","of"],"new interpretation":["of"],"new line":["between"],"new list":["with"],"new logic":["for"],"new method":["for"],"new object":["from","you","for"],"new objects":["if"],"new once":["I"],"new perspectives,":["but"],"new project":["and"],"new rev":["right"],"new revision":[":)"],"new revision.":["Some"],"new robot":["is"],"new standard":["in","in"],"new style":["classes","classes","classes","classes","classes","classes,","classes","classes","classes","classes","classes","classes","classes","classes","classes","classes","classes?","class","classes.","classes","classes","python","objects","classes","objects","classes.","classes.","classes.","classes","object","classes","classes.","classes","classes","classes"],"new syntax":["is"],"new test":["for"],"new to":["Python.","python–those","Python","Python","me","this."],"new upper-case":["string"],"new version":["which","accounting","that"],"new, independent":["if"],"new-class features":["like","like"],"new-style class":["thing,","(won't","and"],"new-style class,":["and"],"new-style classes":["by","and","by","by","because","because","right","because","by"],"new-style classes.":["Will","More","see","New-style"],"new-style classes:":["http://stackoverflow.com/a/54873/477048","Bob(object)."],"new-style classes](http://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python),":["and"],"new-style exists":["regardless,"],"new_message =":["message"],"new_word still":["causes"],"newb at":["Python,"],"newbie in":["re."],"newbie, so":["I'm"],"newer-named class,":["but"],"newlines I":["think"],"newlines before":["the"],"newlines between":["functions."],"newly discovered":["nucleotides."],"newly submitted":["code."],"news is":["that"],"newstyle classes":["(IOW","(IOW"],"next but":["I'd"],"next calls":["would"],"next couple":["of"],"next i'll":["RTFM"],"next iteration":["will","more"],"next iteration,":["but"],"next line.\"":["So,"],"next line?":[":)"],"next one.":["\"Thoroughly"],"next revision.":["Also"],"next submission,":["I"],"next task!":[":)"],"next time":["add"],"next to":["classes)","the","each"],"next version,":["Bob's"],"next(r for":["r"],"next? Do":["I"],"nice access":["through"],"nice and":["simple","readable,","compact.","compact.","readable,","compact","efficient","simple","simple"],"nice approach,":["especially"],"nice boolean":["method"],"nice catch.":["Thanks!"],"nice clean":["implementation,"],"nice code.":["I"],"nice docstring":["for"],"nice either.":["I'm"],"nice feedback.":["Looks"],"nice from":["a"],"nice habit":["to"],"nice here,":["but"],"nice if":["you","you","you"],"nice list":["of"],"nice middle-ground,":["thanks."],"nice of":["that"],"nice one,":["shorter"],"nice solution.":["The"],"nice suggestion":["but"],"nice term":["for"],"nice that":["there","you"],"nice thing":["about"],"nice to":["use","capture","cover","already","separate"],"nice work":["all"],"nice work,":["but"],"nice! One":["last"],"nice, I":["like"],"nice, but":["should","here's","there","the"],"nice, thanks.":["Really"],"nice, there":["is"],"nice. A":["few"],"nice. Although":["I'd"],"nice. Could":["I"],"nice. One":["last"],"nice. You":["may"],"nice.. you":["means"],"nicely --":["the"],"nicely and":["is"],"nicely decoupled":["and"],"nicely factored":["out"],"nicely pythonic":["in"],"nicer after":["I"],"nicer but":["[inheriting","[inheriting","[inheriting","[subclassing","[subclassing","[subclassing"],"nicer by":["using"],"nicer now":["but","but"],"nicer so":["I'm"],"nicer to":["use"],"nicer way":["to","of"],"nicer! I":["don't"],"nicer, but":["I"],"nicer. You":["can"],"niceties, it's":["clearly"],"nil vs.":["null"],"nit --":["Bob"],"nit I":["can"],"nit about":["isupper(),"],"nit at":["this"],"nit is":["that"],"nit so":["much"],"nit that":["can"],"nit to":["that","pick."],"nit, perfect":["otherwise:"],"nit: You":["define"],"nitpick ...":["your"],"nitpick I":["have"],"nitpick I've":["realized","gotten"],"nitpick about":["returns](http://exercism.io/submissions/52101ce59701fa85bd000026)"],"nitpick and":["then"],"nitpick but":["more"],"nitpick is":["that"],"nitpick of":["your"],"nitpick since":["I'm"],"nitpick, within":["the"],"nitpick, you":["could"],"nitpick. I'm":["not"],"nitpick: when":["checking"],"nitpick: while":["the"],"nitpick](http://exercism.io/submissions/520f71575bbbe84dc50001ed) on":["my"],"nitpicked your":["javascript"],"nitpicker could":["explain"],"nitpicking :)":[")"],"nitpicking ;-)":[")."],"nitpicking on":["some"],"nitpicking others'":["code"],"nitpicking some":["other"],"nitpicking what":["we"],"nitpicking! Working":["on"],"nitpicking, but":["I"],"nitpicking, keep":["that"],"nitpicks :":["I"],"nitpicks for":["you:"],"nitpicks from":["me:"],"nitpicks here":["about"],"nitpicks so":["two"],"nitpicks the":["last"],"nitpicks), I":["did"],"nitpicks. Also,":["I've"],"nitpicks. First,":["why"],"nitpicky here,":["but"],"nitpicky) thing":["I"],"nitpicky, it's":["prescribed"],"nits and":["brutal"],"nits are":["all"],"nits on":["style"],"nitty gritty":["logic"],"nlogn and":["Counter"],"nlogn). However,":["when"],"no \"new\"":["keyword"],"no \"test\"":["for"],"no 'ifs'.":["I'm"],"no (simple)":["way"],"no ???":["Or"],"no Python":["expert,"],"no `char`":["type"],"no `else`s":["or"],"no action":["matches"],"no argument":["is"],"no attribute":["'strip'","`isupper`)."],"no authority":["on"],"no benefit":["in"],"no big":["changes"],"no business":["being"],"no cased":["character,"],"no chance":["to"],"no comments":["at"],"no default":["and"],"no difference":["between","to"],"no equivalent":["method"],"no explicit":["unicode"],"no extra":["fields."],"no functions":["use"],"no good":["reason.","reason.","reason"],"no idea":["what","what","for"],"no idea.":["Just"],"no impact":["on"],"no inheritance":["and"],"no instance":["attribute","variables","variables,"],"no letter":["at"],"no limitations":["to"],"no longer":["dealing","need","in"],"no method":["named"],"no mixing":["of"],"no more":["a","bottles","comments."],"no more,":["no"],"no need":["to","to","to","to","to","to","for","to","to","to","for","to","to","to","more"],"no notion":["of"],"no objections":["to"],"no obvious":["evidence","gain.","gain."],"no one":["would","else","else"],"no overriding":["for"],"no parens":["necessary."],"no place":["here"],"no point":["in","of","adding"],"no problems.":["However"],"no public":["attribute"],"no pythoneer":["would"],"no real":["reason","performance"],"no reason":["to","to"],"no regular":["expressions."],"no risk":["of"],"no rush.":[":)"],"no side":["effects"],"no state":["to","to"],"no state),":["or"],"no state,":["I","none","none"],"no strong":["argument","argument","argument"],"no such":["test,","thing","thing","test"],"no tabs":["and"],"no test":["case"],"no tests":["for"],"no trailing":["'!'"],"no transformation,":["then"],"no use":["for","re."],"no way":["I'd"],"no weird":["`getattr`"],"no, I":["would"],"no-op constructor":["unnecessary.","in"],"no-public use.":["Also"],"no. This":["is"],"no.. See":["the"],"no? Line":["31"],"nobody knows":["how"],"nod to":["the"],"non alpha":["symbols"],"non ascii":["input"],"non being":["upper"],"non overlapping":["to"],"non public":["meant"],"non-alpha chars":["with"],"non-alpha or":["an"],"non-alphanum-or-space characters":["and"],"non-alphanumeric and":["non-space"],"non-alphanumerics and":["dictionary"],"non-empty words":["so"],"non-existent key":["will"],"non-existent keys":["rather"],"non-public (by":["convention,"],"non-public (prefixed":["with"],"non-public and":["only"],"non-public appending":["single"],"non-public attributes":["because"],"non-public attributes,":["giving"],"non-public because":["choose","it's","it's"],"non-public by":["convention.","convention.","convention."],"non-public if":["they"],"non-public methods":["and","generally","below"],"non-public to":["encapsulate"],"non-public use.":["See"],"non-public, but":["you're"],"non-public. And":["that's"],"non-public. Double":["underscore"],"non-public. I":["usually"],"non-public. That":["way"],"non-public; it's":["easier"],"non-public? It's":["easier"],"non-space characters":["from"],"non-standard formatting":["-"],"non-standard so":["a"],"non-trivial anonymous":["functions"],"none of":["the","your","your","your","Java,","the"],"nonetheless in":["comments"],"nonsense. Some":["ideas"],"noob. Much":["advice"],"nor Java.":["There's"],"nor `else`.":["Since"],"nor `l`":["(lower-case"],"nor class,":["use"],"nor does":["it"],"nor done":["any"],"nor shouting":["will"],"nor the":["call","predicates","code"],"norm =":["''.join(ch.lower()"],"normal dictionary":["(i.e."],"normal statements.":["And,"],"normalization (and":["perhaps"],"normalization and":["`str.isspace`"],"normalization could":["be"],"normalization plus":["an"],"normalization together,":["and"],"normalization will":["fail"],"normalization, but":["at"],"normalization. Also,":["could"],"normalize Phrase.phrase":["to"],"normalize and":["more"],"normalize as":["well."],"normalize message":["at"],"normalize outside":["of"],"normalize phrase,":["because"],"normalize the":["text","whole","whole"],"normalize twice?":["That's"],"normalize whole":["`Phrase.phrase`"],"normalize your":["input"],"normalize. I":["have"],"normalize_word(w)]`. Why":["normalize"],"normalized version":["elsewhere,"],"normalizing and":["cleaning"],"normally `main()`":["would"],"normally do":["Ruby,"],"normally lead":["to"],"normally methods":["act"],"normally use":["new"],"not \"Python's":["fault\""],"not \"The":["program"],"not \"idiomatic\".":["See"],"not 'null'":[";)"],"not 100%":["sure","sold"],"not 200+":["lines"],"not C":[";)"],"not C++":["nor","not"],"not DNA.":["Calling"],"not DRY.":["A"],"not Java":[":)"],"not Java,":["you"],"not None":["in"],"not None`":["instead","(Zen","in"],"not `phrase_list`,":["because"],"not `said==said.upper()`":["but"],"not a":["problem.","great","`Bob`","good","setter.","question","fan","conversion.","problem","problem","great","huge","list","domain","nitpick.","troll;","string.","proper","`char`","part","specialist","fan","string.","hash.","big","plain","fan","real","fan","Python","native","Python","script","cased","property,","name","property,"],"not able":["to"],"not accept":["None"],"not according":["to"],"not actually":["what"],"not add":["the","much","`.lower()`"],"not advertise":["every"],"not afterwards.":["I'd"],"not all":["objects"],"not also":["take","make"],"not an":["instance"],"not apparent":["without"],"not appear":["in"],"not applicable?":["This"],"not as":["versed","performant,","obvious","beautiful","obvious","questioning,","a"],"not ask":["for"],"not associated":["with"],"not asymptotically":["optimal."],"not aware":["it"],"not be":["Pythonesque.","optimal.","entirely","\"obvious\"","fully","ok.","the","a","the","changing","returned","needed","so","correctly","0","the","in","different","necessary","better"],"not because":["of"],"not being":["methods","part","very"],"not brutally":["straightforward"],"not building":["the"],"not but":["I"],"not call":["`upper()`"],"not changing":["data."],"not cheating":["to"],"not check":["at"],"not class":["-"],"not clear":["on","why"],"not code":["for"],"not compare":["to"],"not compatible":["with"],"not completely":["happy","sure"],"not comprehending":["your"],"not considered":["pythonic.","too"],"not considered.":["Kudos."],"not contain":["edge"],"not convinced":["that","about","that"],"not cool,":["but"],"not count":["it"],"not cover":["all"],"not declaring":["these"],"not defined":["on","on"],"not directional,":["so"],"not directly":["return"],"not do":["quite"],"not doing":["that."],"not done":["any"],"not elif":["statements."],"not empty,":["and"],"not enter":["there."],"not entirely":["sure"],"not equality.":["The"],"not etc)":["but"],"not evaluate":["the"],"not even":["sure","need"],"not every":["expected"],"not everything":["else"],"not evident":["what"],"not exactly":["intuitive,"],"not exist":["back"],"not explicitly":["required?"],"not expose":["that,"],"not exposed":["except"],"not express":["the"],"not extracting":["out"],"not fan":["of"],"not find":["list"],"not fond":["of","of"],"not foo(bar":["="],"not for":["any","`tableMap'.","me."],"not fully":["satisfy."],"not garanteed":["to"],"not garanty":["name"],"not give":["priority"],"not going":["to","to","to"],"not harder":["to"],"not have":["a","spaces","a","the","to","two","that","to","bothered"],"not having":["to","elif","to"],"not i.strip()`.":["And"],"not identifies":["as"],"not idiomatic":["of","python."],"not idiomatic.":["Please"],"not immediately":["know","aware","clear.","clear"],"not in":["the","others.","yyy`","\"ACTGU\":","dict`","the","`__init__`..."],"not include":["empty"],"not initializing":["at"],"not input,":["\"Fine."],"not input_string`":["would"],"not intended":["as"],"not is":["very"],"not is_shout(prompt)":["&&"],"not isinstance(message,":["basestring):"],"not it's":["string"],"not just":["`strip`?","leave","Python","container","use","a","for","call","the"],"not know":["the"],"not know.":["The"],"not learning":["Python."],"not left":["to"],"not less":["--"],"not liking":["the"],"not linked":["to"],"not lists,":["so"],"not lists.":["Hint:"],"not look":["economical"],"not make":["that","a","the","more","any","it","them","hey()","it"],"not matter":["much"],"not mean":["that"],"not meaningful":["without"],"not meet":["the","the"],"not merely":["an"],"not message":["or","or","or","or"],"not message\"":["cleanup"],"not message'":["and"],"not message.strip()\"":["is"],"not message.strip(),":["thanks"],"not message.strip()`":["would"],"not message.strip()`.":["It's"],"not message:\"":["doesn't"],"not message:`":["would"],"not message:`,":["because"],"not methods,":["and"],"not modified":["at"],"not move":["it"],"not much.":["just"],"not my":["comments."],"not name":["simple"],"not native":["english"],"not neccessarily":["mutually"],"not neccessary,":["maybe"],"not necessarily":["reusable","a","going","the"],"not necessarily.":["This"],"not necessary":["to","and","to","here.","when","there."],"not necessary,":["but"],"not necessary.":["An","Thanks"],"not need":["a","to","to","to","a","to"],"not needed":["any","(if","-","in"],"not needed,":["as"],"not needing":["words"],"not nitpicks.":["First,"],"not null":["will"],"not null,":["and"],"not obvios":["at"],"not obvious":["to"],"not obvious,":["and"],"not on":["hundred","the"],"not only":["on","responsible","for","that","the","be","bunch","for"],"not only,":["complex,"],"not overly":["familiar","worried"],"not part":["of","of"],"not pass":["None"],"not passing":["some"],"not pep8":["compatible"],"not plain":["strings?"],"not point":["out"],"not present":["chars"],"not probably":["the"],"not prompt.strip()\"":["would"],"not public.":["Do"],"not pythonic,":["and"],"not pythonic.":["You"],"not questions.":["So,"],"not quite":["right,","as","sure","sure,"],"not re-used":["in"],"not re.seach(r\"[a-z]\",":["str))`"],"not real":["satisfying."],"not realise":["when"],"not realize":["that"],"not really":["experienced","the","part","sure","necessary,","a","descriptive,","representing","happy","a","pythonic,","pretty","necessary","versed","happy","sure","proud","supposed","happy","needed.","a"],"not refer":["to"],"not reference":["`self`"],"not referenced":["in"],"not relevant":["to","to"],"not relying":["on"],"not repeat":["cleaning"],"not require":["such","`__init__`)"],"not required":["in","any","here.","by","by","by","(and","by"],"not respect":["the"],"not return":["multiple"],"not right":["to"],"not s.strip()`.":["There's"],"not said":["or"],"not said.strip()":["is"],"not say\"":["line."],"not seem":["readable"],"not self.phrase_text`.":["For"],"not self.sentence":["or"],"not self.sequence:":["return"],"not self.string.islower()`":["is"],"not self.wordcounter:\"":["is"],"not sentence`":["is"],"not shadowing":["Python's"],"not significantly":["slower"],"not slavish":["to"],"not so":["complex,","familiar","bad","sure"],"not something":["you'd","you'd"],"not somewhere":["else."],"not sound":["too"],"not specify":["that"],"not speech`":["as"],"not str":["or"],"not strings,":["so"],"not stuck":["-"],"not subclass":["from"],"not submit":["it..."],"not suggesting":["not"],"not super":["approachable"],"not superfluous?":["Does"],"not support":["multiple"],"not supposed":["to","to","to"],"not sure":["you","I","why","it's","if","it","that","it's","whats","I","that","how","it","if","why","how","I","which","about","if","if","`Word.original`","making","if","I","of","actually.","how","about","about","about","about","the","that","why","how","how","how","packing","if","which","what's","what","why","I","it's","you","that","if","what","what"],"not sure,":["but","though,"],"not sure.":["Doing"],"not syntactically":["necessary,"],"not taking":["your"],"not tell":["anything"],"not tested":["for)"],"not text```,":["it'll"],"not that":["comfortable","uncommon.","sure","important.","evident","bothered."],"not the":["case,","one","default,","others","only","best","pythonic","right","equality","equality","equality","case","most","domain.","one","most","best","*best*","intend","others?","instance.","input"],"not their":["names,"],"not to":["say","use","put","get","chain","have","rerun","create","the","have","name","create","rely","confuse","use","forget","use","include","include","read","cause","do","hard-code","mention"],"not too":["fond","fond","fond","familiar","hard","huge,"],"not totally":["convinced","clear"],"not trigger":["an"],"not try":["and"],"not trying":["doing","to"],"not understand":["it","how"],"not understanding":["what"],"not upper":["and"],"not use":["regular","extraneous","whitespaces","else","```elif```","it.","'self'?","built-in","Counter,","the"],"not used":["outside","anywhere","the","the","at","in","to"],"not useful,":["cf","cf"],"not using":["that","\"function","it","`(is_default,","list","correctly.","`datetime.date`.","datetime.date.","them"],"not valid":[":P"],"not very":["well","comprehensive.","clear","familiar","descriptive."],"not want":["to","to"],"not well":["versed"],"not what":["it","everyone","I","is"],"not when":["I","it's"],"not word:":["continue`"],"not wordcounter:":["***insert"],"not words":["though,"],"not work":["with","exactly","because"],"not wrap":["the"],"not write":["more"],"not x\"":["which"],"not xxx":["in"],"not yelling":["or"],"not yet":["been","looked"],"not(message and":["message.strip())`"],"not, and":["neither"],"not, is":["the"],"not, it's":["a"],"not, right?":["Like"],"not, they":["still"],"not, this":["is"],"not, which":["is"],"not, wouldn't":["you"],"not. But":["what"],"not. For":["instance,"],"not. It's":["maybe"],"not. The":["statement"],"not. ```":["MethodDispatcher"],"not` enough":["times"],"not` is":["a"],"note -":["most","Can"],"note :":["in","your"],"note about":["naming:"],"note here":["to"],"note that":["by","when","Python","you"],"note the":["useless"],"note! I":["think"],"note, I":["think"],"note, [PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations)":["recommends"],"note---I had":["it"],"note: if":["you"],"notes (though":["generally"],"notes about":["your"],"notes are":["good"],"notes to":["improve:"],"nothing at":["all"],"nothing bad,":["a"],"nothing clever.":["nothing"],"nothing expressive.":["enough"],"nothing for":["this"],"nothing in":["the"],"nothing is":["*really*","specified"],"nothing set":["in"],"nothing special.":["Some"],"nothing to":["do"],"nothing when":["you"],"nothing wrong":["there,"],"nothing, it":["ends"],"nothing. maybe":["next"],"nothing_special/yell_at_me/question methods":["were"],"notice it":["returns"],"notice something":["like"],"notice the":["exclamation"],"noticed :":["what"],"noticed I":["forgot"],"noticed how":["`isupper()`"],"noticed that":["the"],"noticed you":["do"],"noticed: You":["don't"],"notion for":["the"],"notion of":["\"pointers\"),"],"noun and":["property."],"noun instead":["of"],"noun like":["\"message\""],"noun property":["for"],"noun too":["and"],"nouns instead":["of"],"now :)":["Wow,"],"now I":["think","understand.","have","can"],"now I'm":["back","REALLY"],"now `Bob`":["class"],"now a":["new,"],"now add":["a"],"now always":["deals"],"now and":["I"],"now approve":["yourself."],"now but":["[inheriting","[subclasing"],"now called":["rehey,"],"now could":["you"],"now define":["a"],"now easier":["to"],"now have":["only"],"now if":["I"],"now is":["responsible","that"],"now it":["just","checks"],"now it's":["second","even"],"now know":["that"],"now line":["10)"],"now list.":["See"],"now noticed":["I"],"now noticing":["it!"],"now refactoring":["it"],"now represents":["Bob"],"now see":["what"],"now starting":["to"],"now that":["I","in","the","you","it's","I"],"now their":["signature"],"now they":["have","are"],"now they're":["testing"],"now this":["is"],"now unneeded":["\"import"],"now using":["the"],"now we":["can"],"now you":["have","moved","are","committed"],"now) is":["itself"],"now), you'd":["like"],"now, I":["think"],"now, any":["unknow"],"now, are":["you"],"now, as":["the"],"now, splitting":["first"],"now, the":["link"],"now, what's":["changed?"],"now. As":["for"],"now. I":["see"],"now. lesson":["learned"],"nowhere near":["thread-safe"],"nuance but":["overall"],"nuceotides, though":["it"],"nucleotide (``str``":["of","of"],"nucleotide categorization":["as"],"nucleotide characters":["to"],"nucleotide goes":["with"],"nucleotide in":["self.VALID_DNA_NUCLEOTIDES}"],"nucleotide is":["not","1"],"nucleotide replaced":["by"],"nucleotide sequence,":["why"],"nucleotide symbols":["outside"],"nucleotide_counts ```.":["But"],"nucleotide_counts method.":["It"],"nucleotides and":["methods","have"],"nucleotides are":["lost."],"nucleotides as":["well)"],"nucleotides being":["transcribed,"],"nucleotides could":["be","be"],"nucleotides from":["dna"],"nucleotides in":["a","two"],"nucleotides involved":["or"],"nucleotides is":["a","found"],"nucleotides isn't":["necessarily"],"nucleotides more":["meaningful"],"nucleotides names,":["eg"],"nucleotides that":["don't"],"nucleotides to":["DNA","compare"],"nucleotides, the":["result"],"nucleotides. Isn't":["it"],"nucleotides. So":["it"],"nucleotides? It":["isn't"],"nuisances to":["the"],"null function":["with"],"null vs.":["empty"],"null will":["suffice."],"null, and":["secondly"],"nulls vs.":["incidental","emptiness)"],"num)` and":["`dispatch(self,"],"num)` which":["are"],"number (or":["the"],"number as":["the"],"number is":["valid,"],"number of":["helpers","times","times","abstractions","general-purpose","bottles:","robots","robots","possible","arguments","`!`s","spaces","classes.","classes.","deployed"],"number system":["and"],"number were":["not"],"number would":["be"],"number-only messages":["weren't"],"numbers as":["orbital"],"numbers or":["specials"],"numbers\" 'T'":["and"],"numbers) as":["a"],"numbers, but":["is"],"numbers. Any":["suggestions?"],"numbers? Although,":["I"],"numerals (e.g.,":["`IX=X-I`)"],"numeric test":["cases."],"numeric zeros":["all"],"nuts with":["it."],"obfuscate concepts":["like"],"obfuscates the":["intent"],"object ([Value":["Object](http://c2.com/cgi/wiki?ValueObject))."],"object (app":["entry"],"object (not":["using"],"object (rather":["than"],"object API.":["My"],"object and":["calling","query","remove"],"object as":["the","they"],"object at":["0x1032ba950"],"object base":["class"],"object class,":["even"],"object creation":["may"],"object every":["time"],"object for":["the","None"],"object from":["one","`collections`"],"object had":["more"],"object has":["no"],"object hiding":["in"],"object implementing":["the"],"object in":["`collections`"],"object instantiation":["overhead"],"object is":["just"],"object it":["should"],"object itself.":["Import"],"object offers":["and"],"object oriented":["code","\"self.sequence.translate(TO_RNA)\"."],"object passed":["in"],"object required":["but"],"object returned":["by"],"object seemed":["appropriate."],"object seems":["somewhat"],"object shouldn't":["care"],"object to":["test","clean","get"],"object will":["store"],"object wrap":["a"],"object you":["could"],"object! It":["is"],"object, because":["currently"],"object, but":["I"],"object, especially":["as"],"object, for":["various"],"object, is":["there"],"object, like":["in","so:"],"object, not":["it's","just","a"],"object, otherwise":["you"],"object, so":["that's"],"object, that":["is"],"object-oriented and":["procedural"],"object-oriented flame":["war"],"object-oriented programming":["(calling"],"object-oriented while":["the"],"object-oriented. Perhaps":["that"],"object-orientivism `Bob`":["is"],"object. And":["in"],"object. For":["example,"],"object. I":["mean","will"],"object. I've":["used"],"object. Now":["it's"],"object. What's":["the"],"object.\"? This":["is"],"object? The":["message"],"objected pretty":["strongly"],"objections to":["multiple"],"objective &":["subjective"],"objective of":["this"],"objects (and":["so"],"objects (one":["is"],"objects -":["`replace`"],"objects and":["not"],"objects but":["decided"],"objects can":["be"],"objects do":["not"],"objects don't":["*do*"],"objects have":["`.sort`,","a"],"objects if":["they"],"objects of":["that"],"objects on":["their","their","their"],"objects to":["what"],"objects too":["and"],"objects too).":["Also"],"objects too,":["and"],"objects were":["created"],"objects when":["you"],"objects, and":["the"],"objects, like":["`re.finditer`."],"objects. As":["usual"],"obscure magic":["(I"],"obscure the":["intent..."],"obscure thing":["in"],"obscure, arbitrary":["specification"],"obscures the":["fact"],"obsolete and":["moving"],"obviate the":["need"],"obviates the":["need"],"obvios at":["all"],"obvious (and":["documented"],"obvious and":["it"],"obvious as":["`[^a-z0-9_\\n\\r\\t\\v]`"],"obvious by":["the"],"obvious code":["pattern"],"obvious copy.":["I"],"obvious evidence":["(if"],"obvious gain.":["But,"],"obvious here":["that"],"obvious pythonic":["solution.","solution."],"obvious solution":["but"],"obvious straightforward":["solution"],"obvious than":["`if"],"obvious that":["the"],"obvious thing":["to"],"obvious to":["me"],"obvious way":["to"],"obvious what":["they're","it"],"obvious where":["the"],"obvious, and":["wouldn't","added"],"obvious. If":["you're"],"obvious. Someone":["reading"],"obvious. Your":["comments"],"obviously be":["\"much"],"obviously need":["to"],"occur to":["me."],"occur! Nice":["job"],"occurences instead":["of"],"occurrence on":["both"],"occurrence would":["be"],"occurrences -":["that"],"occurrences is":["playing"],"occurrences of":["thymine"],"od concerns":["-"],"odd at":["first"],"odd name":["now"],"odd to":["leave"],"odd, since":["it"],"odds with":["that"],"of \"==":["None\""],"of \"black":["boxes\""],"of \"canonicalizing\"":["words"],"of \"conversion\"":["suggests"],"of \"do":["this"],"of \"employ":["ugliness"],"of \"falsey\"":["strings"],"of \"if":["I"],"of \"input\"":["that"],"of \"is":["all"],"of \"isupper\".":["Do"],"of \"magical\"":["values…"],"of \"pointers\"),":["he's"],"of \"startswith\"":["I"],"of 'WHAT',":["'WATCH',"],"of 'a',":["'z',"],"of 'word'":["items)"],"of 'yell'":["and"],"of (predicate,":["\"answer\")","answer)"],"of **named":["parameters**"],"of *each*":["branch"],"of *normalize*":["or"],"of *why*":["you're"],"of 0":["is","for"],"of 1":["can","can","can"],"of 3":["lines"],"of 3:":["3.9","2.42","2.2","5.11"],"of 79":["characters"],"of \u003ccode\u003ehey\u003c/code\u003e":["is"],"of \u003ccode\u003ewords.strip()":["=="],"of Bob":["class","instead","and","(or","could"],"of Bob's":["public","answers"],"of C":["and"],"of Counter":["from"],"of DNA":["transcription.","(at","with"],"of DNA.":["That's"],"of Ducks:":["Where","Where","Where","Where"],"of Ducks](http://rhodesmill.org/brandon/slides/2013-03-pycon/)":["by"],"of Googling":["and"],"of Guido's":["desires"],"of Java,":["LISP"],"of LISP":["and"],"of O(n":["lg"],"of OOP":["boilerplate."],"of Prototyping":["technique"],"of Python":["will","#6","#7","just","3.","stdlib"],"of Python's":["nature,","Built-in"],"of Python.":["It","This",":)"],"of Python:":["Sparse"],"of Python](http://www.python.org/dev/peps/pep-0020/)":["because"],"of Pythons":["check"],"of RNA":["but"],"of T":["with"],"of UI":["for"],"of Unicode":["threw"],"of WHY":["you"],"of Word).":["So,"],"of YAGNI.":["These"],"of Zen":["of"],"of [a":["more","built-in"],"of [functional-HOWTO][1].":["I"],"of [self":["documenting"],"of [str.endswith](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.endswith),":["[str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper)","[str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper)","[str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper)","[str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper)"],"of `!`s":["since"],"of `\"bottle(s)":["of"],"of `(predicate,":["value)`"],"of `.super()`,":["and"],"of `.words()`":["now"],"of `0`,":["which"],"of `Action`":["(or"],"of `Anagram`":["as"],"of `Beer`":["class."],"of `Bob.__replies`":["in"],"of `Bob._replies`":["in"],"of `Bob.check`":["method"],"of `Bob.hey`":["method.","method"],"of `Bob`,":["I","I"],"of `DNA.__dict__`.":["Current"],"of `DNA.to_rna`":["it"],"of `DNA`":["(or"],"of `DNA`?":["That's"],"of `MessageClassifier`":["for"],"of `None":["=="],"of `None`":["makes"],"of `Phrase.rawinput`,":["which"],"of `Sure`.":["But"],"of `\\w+`":["instead"],"of `__init__`":["as"],"of `__init__`.":["It's"],"of ```":["nucleotide_counts"],"of ```?```":["or"],"of ```REPLIES```,":["and"],"of ```greeting```.":["If"],"of ```object```,":["you"],"of ``list``.":["I"],"of ``number``":["would"],"of `chain`":["on"],"of `class":["Bob()`"],"of `clean_number`":["to"],"of `collections.Counter`.":["Just"],"of `converse[-1]":["=="],"of `defaultdict(lambda:":["0)`."],"of `dict`,":["so"],"of `dict`.":["Also,"],"of `elif/else`":["statements","statements"],"of `elif`":["and"],"of `elif`.":["Similarly,"],"of `elif`s)":["by"],"of `filter`,":["though"],"of `findall`":["with"],"of `greeting`":["with"],"of `if":["...","len(str.strip())"],"of `if..else`":["blocks,"],"of `isspace`,":["great!"],"of `isupper`":["and"],"of `len(phrase)":["=="],"of `map`":["work."],"of `message":["=="],"of `message_`":["prefix"],"of `msg`":["or"],"of `normalize`":["is"],"of `not":["self._raw","len(text)`"],"of `num`":["would"],"of `phrase.upper()":["=="],"of `python":["./bob.py`."],"of `query`":["to"],"of `re.split`":["you"],"of `re.split`,":["although"],"of `reversed([...":["range(end,"],"of `s":["is"],"of `s.upper()":["=="],"of `s[-1]":["=="],"of `s`":["because"],"of `self._wordcount`":["so"],"of `self.counter`":["(directly"],"of `self.message`,":["an"],"of `self.strip_punctuation`,":["to"],"of `self.word`":["so"],"of `self.word`.":["And,"],"of `silence`":["in"],"of `sort`,":["but"],"of `statement":["=="],"of `statement`'s":["methods"],"of `str":["or"],"of `str.capitalize`":["takes"],"of `str`":["object","or","seems","and"],"of `str`),":["but"],"of `str`.":["Most"],"of `strip()":["=="],"of `sum`.":["Then"],"of `text[-1:]":["=="],"of `text[-1]":["=="],"of `text`":["in"],"of `to_rna`":["so"],"of `word_list`":["and"],"of `x":["=="],"of `zip`":["though.","and","(pretty"],"of a":["simple","comment.","PhraseText","\"bad","public","class.","public","string.","type","private","separate","function","way","simpler","way","smell","way","base","mix-up","solution","cleaner","lot","lot","method","system.","string.","theoretical","waste","way","class","particular","`class`","way","word,","method","method","DNA","loop","way","string,","good","way","way","class","module.","given","method","better","`Bob.hey`","problem.","list","dictionary","different","verb,","different","thanks.","case","good","way","nicer","msg","reason","way","greeting?","larger","string","better","string,","string.","docstring","string.","string.","for","string?","string.","series","string.","setter","dict,","list","built-in","python","problem.","previous","base","benefit.","word"],"of abstraction":["for"],"of abstraction,":["and"],"of abstraction.":["Everything","In"],"of abstractions":["that"],"of abstractization,":["I"],"of activity":["in"],"of added":["complexity"],"of adding":["docstrings...)"],"of additional":["methods,"],"of advice":["lately"],"of all":["these","builtin"],"of alternative":["ways","ways"],"of alternatives":["since"],"of ambiguity,":["refuse","refuse"],"of an":["RNA","RNA","assignment","addition","\"application","empty","implied","alphagram","alphagram","uppercase","if"],"of anagram-wise":["comparison"],"of anonymous":["functions."],"of another":["function"],"of answers":["you"],"of any":["case","kind.","simpler","flaws","TDD"],"of arguments":["`*args`"],"of as":["text,"],"of assigning":["to"],"of assignment":["operator."],"of attack.":["Can"],"of attempting":["to"],"of automated":["linting"],"of automatic":["linting?"],"of beer":["on","on","down,","down,"],"of beer\"`)":["is"],"of beer\"`,":["and"],"of behaviour":["with"],"of being":["easier","very"],"of better":["ways"],"of boilerplate":["to"],"of book":["data,"],"of booleans":["to"],"of both":["paradigms","setter"],"of bottles:":["pluralizing"],"of broken":["wrt/"],"of building":["a","composable/private"],"of builtin":["string"],"of by":["moving"],"of caching":["result"],"of calculating":["days?"],"of calling":["compile.","the"],"of camel":["or"],"of capitalized":["chars"],"of capitals":["to"],"of capturing":["all"],"of cases,":["a"],"of cause":["the","a"],"of char,":["so"],"of characters,":["not"],"of chars(sorted,lowered)":["basically"],"of check":["expressions"],"of checking":["for","whether","all","against","for"],"of class":["yet.","like","initialization","`Bob`."],"of class'":["public","public"],"of classes":["that"],"of classes,":["but"],"of classes.":["It's","I'll","I"],"of cluttering":["the"],"of code":["(and","using","seems","and","should","makes","but","so","`self.phrase","that","but","probably","to"],"of code,":["I","and","by","but","but"],"of code.":["Very","Writing"],"of coding":["it","can"],"of coding.":["Thank"],"of coersion":["and"],"of collections":["here"],"of comments":["to"],"of comments/docstrings":["or"],"of comparing":["against","message","to"],"of compilation":["and"],"of compiling":["and"],"of concatinate":["strings"],"of conditional":["statements"],"of conditions.":["I'm"],"of constants":["to"],"of construction,":["an"],"of constructor":["and"],"of context,":["and"],"of context.":["Good."],"of converting":["nucleotides"],"of counting":["up","words."],"of counting)":["and"],"of counts":["(initialized"],"of course":["use","do","but","be","valid","test","doesn't","?","making","the","probably","also","for"],"of course.":["But"],"of creating":["the","an","classes","strings.","a"],"of curiosity,":["does"],"of daily":["Python"],"of data":["in","in"],"of days":["ago."],"of de-referencing":["a"],"of decoding,":["white-space"],"of defining":["Bob's"],"of definitions":["as"],"of demeter":["violation."],"of deployed":["robots"],"of detail.":["Note"],"of determining":["that"],"of dictionary.":["So,"],"of differences\"":["sounds"],"of differences\".":["Although"],"of different":["stuff.","approaches"],"of direct":["string"],"of dna":["itself."],"of dna/nucletode":["related"],"of documentation.":["I've"],"of doing":["`message","it","so","this","it","things:)","it","it","that,","the"],"of doubling":["the"],"of each":["other,","character","other","other","other."],"of early":["returns"],"of earth":["years"],"of encapsulation":["for"],"of end":["of"],"of enum":["type."],"of even":["better"],"of everything":["and"],"of execution":["is"],"of existence":["of"],"of explicit":["`else`","`else`","`else`"],"of extra":["methods"],"of fact,":["this"],"of failed":["tests"],"of familiar":["vs"],"of familiarity":["and"],"of feedback,":["you"],"of filtering":["to"],"of first":["class"],"of for":["this."],"of formatting.":["CamelCased"],"of forward":["thinking"],"of free":["names."],"of function":["calls"],"of functions":["instead","more","in"],"of future":["calls"],"of general-purpose":["datastructures"],"of great":["built-in"],"of guy":["I"],"of handling":["two","that","the"],"of hard":["to"],"of have":["no"],"of having":["some","them","two","the","access","both","methods","a"],"of helper":["methods","method"],"of helpers":["so"],"of hey":["method.","into"],"of higher":["complexity,"],"of how":["those","you","to","you","to"],"of hybrid":["object-oriented"],"of icky":["feeling"],"of identifying":["common","words"],"of if":["statements","to","tests.","statements","makes"],"of if-elif-else":["is"],"of if-then":["statements"],"of implementing":["a","this","```has_letters```.","it."],"of improvements":["I"],"of in":["methods.","normalization,"],"of independent":["functions?"],"of indexing.":["This"],"of indexing/slicing":["when","when"],"of individual":["elements."],"of information":["that"],"of inheritance":["as"],"of injection":["by"],"of inline":["comments"],"of input":["and","of","Bob"],"of isAllCaps":["do"],"of isupper":["&amp;"],"of it":["in","_not_","if","required"],"of it's":["primary"],"of it)":["-"],"of it,":["I'm","an"],"of it.":["Also,"],"of it....":["so"],"of it:":["you"],"of items":["are"],"of iterators":["nicely"],"of its":["own","usage."],"of itself":["--"],"of just":["ending","`if","replacing"],"of keeping":["the"],"of keystrokes":["for"],"of lambda":["would"],"of leaving":["it"],"of length":["1)","1","1)"],"of like":["the","them","this."],"of line":["5.","20?","13?"],"of lines":["4","18-19"],"of list":["comprehension","comprehension"],"of little":["methods"],"of logic":["out","wrt","in"],"of looking":["at"],"of magic":["strings,","strings?"],"of main":["class."],"of makes":["me"],"of maketrans":["and"],"of making":["helpers","them","those","it","the"],"of manipulating":["on"],"of mapping":["it"],"of marking":["instance"],"of matcher":["objects,"],"of me":["wants"],"of mentioning.":["I"],"of message":["with","classes","is","inside","rather","implies"],"of message,":["and"],"of messaging":["relay."],"of method":["on","so"],"of methods":["are","for","that","there"],"of methods.":["I"],"of minor":["points:"],"of module.":["Simple","I"],"of modules":["you"],"of more":["useless","than","than"],"of moving":["strings"],"of my":["comfort","mind)","solutions,","way","nitpick.","code,","Java","code","```nucleotide_count```","logic"],"of name":["clash"],"of name,":["for","for"],"of native":["functions"],"of neglecting":["it.","it.","it."],"of nested":["comprehensions."],"of new":["features","style"],"of new-class":["features","features"],"of new-style":["classes."],"of newlines":["before"],"of nitty":["gritty"],"of nlogn":["and"],"of not":["having","taking","every"],"of nucleotides":["being","isn't","is"],"of nucleotides.":["Isn't","So"],"of number":["would"],"of object":["oriented","creation:"],"of objects":["to","when"],"of occurrences":["is"],"of official":["documentation."],"of old":["vs"],"of one":["module"],"of operations":["on"],"of options":["for"],"of order":["could"],"of original":["form"],"of other":["goodies.","cool","comments"],"of over-engineering.":["I"],"of overengineering":["is"],"of overhead":["to"],"of pairs":["for"],"of people":["that"],"of performance":["and","but"],"of personal":["preference.","preference.","tastes)"],"of pointless":["plumbing"],"of polymorphism":["is"],"of position":["might"],"of possible":["names,"],"of precedence":["when"],"of precompilation":["(performance),"],"of predicate-\u003eanswer":["pairs)"],"of predicate/response":["pairs"],"of preference":["with",":)","-","though."],"of preference.":["Also","Also,"],"of premature":["optimization"],"of prematurely":["factoring"],"of problem":["(but"],"of problem.":["```"],"of problems":["-",";)"],"of problems,":["any"],"of processing":["`word`"],"of programming":["in"],"of projects":["complies"],"of proper":["declaration","capitalization."],"of properly":["named","named"],"of providing":["a","docstrings,"],"of public":["interface,","API"],"of punctuation":["by"],"of putting":["these","the"],"of pyflakes,":["it"],"of python":["over","states","(flat","too","did"],"of pythons":["slicing"],"of qualifications":["from"],"of questions":["(?"],"of raising":["a"],"of re.finditer.":["So"],"of readability":["worth"],"of real":["huge"],"of realizing":["the"],"of reasonable":["to"],"of redundant":["tests","tests"],"of regexes":["http://docs.python.org/2/library/stdtypes.html#string-methods"],"of regexes.":["Although"],"of regexp":["either,"],"of regexps":["doesn't","where"],"of regexs":["here."],"of regular":["expressions","expression","expressions"],"of relying":["on"],"of removing":["the"],"of repeating":["work)."],"of repetition":["(e.g."],"of replacing":["all","T's"],"of requirements":["I"],"of requiring":["more"],"of resorting":["to"],"of response":["it","in"],"of responses,":["how"],"of responsibilities.":["But"],"of returning":["at","in","False"],"of robots":["in","is"],"of rules":["to"],"of run":["time"],"of s.strip()":["is"],"of salt,":["and"],"of see":["why"],"of self":["documenting"],"of self.contains_uppercase(message)":["is"],"of semantically":["checks"],"of sense,":["and","especially"],"of sentence":["is"],"of setting":["the"],"of several":["phrases."],"of shouting,":["questioning,"],"of side":["effects","effects"],"of silence":["it's"],"of simple":["and"],"of simply":["having","`query`;"],"of sivhollup.":["I"],"of small":["points."],"of solving":["this"],"of some":["simple","more","naming","actions","sort?"],"of something":["that's"],"of something,":["rather"],"of something;":["e.g."],"of sort":["though."],"of sorting":["would"],"of space.":["I'd"],"of spaces":["would","in"],"of spaghetti":["if/elif"],"of specification":["(I'm"],"of speech":["that"],"of splitting":["message","with"],"of standard":["installation.","library","functions","library.","libraries","library"],"of staring":["at"],"of statement":["that"],"of static":["methods,"],"of steps,":["so"],"of sticking":["them"],"of string":["object","object","method....."],"of string:":["str.endswith('?')."],"of strings":["with"],"of strings,":["not","then"],"of strings.":["Tell"],"of stripping":["out"],"of strong":["coupling,"],"of style":["I"],"of style,":["I","probably,"],"of subjective":["I"],"of submissions":["needing"],"of tests":["and",":/","to"],"of text":["IO","you"],"of text,":["you'd"],"of text[-1]":["=="],"of that":["for","class'","class.","could",":)","branch","class).","duplication","analysis.","myself,","code.","variable?","word,","one","one.","parameter.","language."],"of that!":["I'd"],"of that,":["too."],"of the":["class.","if..elif","magic","ones","client","`WORDS`","best","file,","class.","methods","class.","transtable","cases","code?","documentation","object","Bob","Bob","input?","more","ancestor","intent?","public","PEP8","object","public","tests","problem","falsy","`elif/else`","method","four","problem","problem","`else`","empty","function","code","`Bob`","times)","specification","same","zen","string","filtered","map","many","class,","test","branches.","`elif/else`","predicate,","'fine","program","logic","tests?","else","logic","`str`","DNA,","process","4","DNA","class","class","method","DNA","RNA","original","nucleotides","nucleotides","code","translation","message","problem","method","context","problem","code","public","order","tests.","sequence","input","call","statement","test","word_counter.","punctuation,","`letters.lower()`","`else`","message","output.","branches","branches","what","object","phrase.","branching","call","computation","formatting","right","input","anwer.","`str`","parsing","comments","filtering","code","old","code.","last","public","tests.","built","string.","message,","conditions","`if`","assignment","instance;","\"predicate-&gt;answer\"","predicate","\"predicate-&gt;answer\"","following","parentheses","test","if","`if","function.","conditions.","expression","system's","method","string","issues","variables","algorithm.","`Anagram`","non-alpha","code.","\"if","whole","public","public","for","middle","path)","class","memoization","class","file.","abbreviation.","different","class","public","property","function","list","original","`elif`","explicit","\"None\"","predicates.","class","quote:","explicit","predicates","explicit","language's","pattern","\"rules\",","hash","class","reused","\"string\"","API","fact,","methods","things","possibility","adding","word","helpers.","file.","number","exercise.","special","spec.","spec.","function,","test","object,","file","function","public","words","`Counter`","anagram","Phrase","class?","problem","feedback","lines","match","\"Fine...\"","code","80","argument.)","bat.","comments","list","need","string.","conditions.","function.","function,","built-in","solution.","solution","class.","way","exercise.","string","phrase","line","[string","input","string","gem.","problem","string","responses","operations","form","'hey'","control-flow","characters","string","message","first","dictionary/for","code","verses","code","code,","logic","process","DNA,","`Phrase.word_count`","public","test","last","world.","problem","dictionary","string.","tests.","data","letters","submission","commented","`str`","class","class","class.","subroutines","`findall`","functions.","first","fact","`split`","fact","fact","tests,","`.isupper()`","fact","fact","fact,","fact","try/except","fact","fact","ifs?","anagram","doc","built","tests","regexp.","class,","robots","options","docstring","function","class","exercise","short","punctuation","nucleotide","super()","code","list","different"],"of their":["methods."],"of them":["are","will","will","at","try","are","for","are"],"of them.":["Just"],"of these":["exercises","returns","up","are","attributes","conditions","types","classes"],"of thing":["all","for","has"],"of things":["that","aren't","like"],"of thinking":["about"],"of this":["design:","code,","code?","site,","in","exercise,","context.","out","exercise.","code.","being","without","exercise","task.","length/complexity","exercise,","class","name","exercise","revision","is","program.","is","site"],"of this,":["but"],"of this.":["However:"],"of those":["two,","helper","really","who","statements,"],"of thought":["into","on"],"of throwing":["an"],"of thymine":["with"],"of time":["for","anyway","and"],"of times":["an","in"],"of total_after()":["uses"],"of transcribing,":["it"],"of transformation":["so"],"of transforming":["the"],"of translations,":["where"],"of translations.":["The"],"of trying":["to"],"of tuples":["(which","keeps","keeps","first.","because","which"],"of two-stage":["checking."],"of two.":["When"],"of type":["not","string,"],"of ugly,":["in"],"of underscore-named":["functions."],"of underscores":["and"],"of unicode":["-"],"of unneeded":["variable."],"of unsymmetric.":["And"],"of uppercase":["characters."],"of uppercasing":["a"],"of use":["for"],"of using":["\"new-style\"","imports","\"new","\"new","new","new","new","string.replace","new","new","new","new","new","new","new","new","new","symbolic","new","a","replace","a","named","not","methods","comments","regular","`Counter`.","the"],"of validation":["should"],"of value":["it"],"of values":["to"],"of variable":["will"],"of verbose":["--"],"of verbs":["better"],"of view":["if-elif-else","your","short","your","it","the","if-elif-else","`couplet`","they"],"of view,":["a"],"of ways":["to"],"of weird.":["Let"],"of well":["defined"],"of what":["type.","the","we","you","an","it","you're","python","might","you","a","I","the","your","`filter(None,"],"of what's":["going","going","going"],"of whats":["going"],"of when":["something"],"of whether":["you"],"of which":["seems","returns"],"of whitespace":[":)"],"of whitespace?":["This"],"of whitespaces":["around","around","in","at"],"of wildcard":["imports"],"of wonders,":["it"],"of word":["chars?"],"of words":["and","in","be","is","(using"],"of work":["to","to"],"of work.":["Go"],"of wrapping":["the"],"of writing":["is","`msg.isupper()`","lines","line"],"of your":["code","previous","code.","predicates","code","method.","suggestions","answer","\"predicate\"","methods","\"predicate\"","code.","conditional","regexes.","class.","file.","code","class","work,","predicates.","code,","code.","code,","`if`s."],"of). It":["is"],"of. Nevermind,":["good"],"of. Such":["a"],"of: `if":["not"],"of: moving":["the"],"of? I":["think"],"off -":["parentheses"],"off /":["over"],"off a":["line,"],"off because":["now"],"off for":["test_only_numbers"],"off from":["the"],"off in":["many"],"off just":["because"],"off much":["of"],"off the":["bat."],"off this":["exercise"],"off to":["read"],"off when":["I"],"off with":["a"],"off: ```if":["x"],"offer a":["few"],"offered a":["map"],"offers and":["to"],"official Python":["documentation","documentation","documentation","documentation"],"official documentation":["even","even","even","even","even"],"often `to_rna`":["is"],"often comes":["up"],"often easier":["to"],"often gets":["a"],"often heard":["that"],"often in":["my"],"often more":["idiomatic"],"often not":["a"],"often proved":["to"],"often simpler":["alternatives."],"often used":["approach"],"often very":["useful"],"often write":["`if"],"often written":["`msg"],"often. Could":["you"],"ok FWIW,":["they"],"ok here,":["a"],"ok in":["Python)."],"ok to":["just","talk","mutate","rebind","break"],"ok with":["my"],"ok, but":["what","exactly"],"ok, fixed":["em...coming"],"ok, in":["case"],"ok, thanks":[":)"],"ok. It's":["been"],"okay. I":["do"],"old \"every":["method"],"old `if`s":["should"],"old code":["using"],"old function":["`alphagram`?"],"old function,":["but"],"old functions":["?","are"],"old module-level":["functions)","functions)"],"old style":["except","is","`str.isupper(sentence)`,","class","classes"],"old version...I":["was","was"],"old vs":["new"],"old-style class":["because","here."],"old-style class.":["Maybe"],"old-style classes":["instead"],"older `Bob`":["one"],"older version":["a"],"omit caching":["of"],"omit the":["parentheses","parentheses","parens"],"omitted `phrase`":["part"],"ommitted when":["defining"],"on \"hey\"":["to"],"on 10":["data","data"],"on 2.7":["(and"],"on 6,":["12"],"on Bob":["class"],"on Bob's":["state,"],"on Bob,":["since"],"on Bob.":["Right"],"on GitHub":["directly.","and","and"],"on Github)":["shows"],"on Python":["3,","so"],"on [Class":["Objects](http://docs.python.org/2/tutorial/classes.html#class-definition-syntax)"],"on `Bob`":["instead"],"on `LOCALE`":["settings,"],"on `None`":["object."],"on `None`.":["I"],"on `Phrase`":["instance,","rather"],"on `_match_word`":["instead"],"on `class":["Bob(object)`"],"on `dict`":["as"],"on `line":["13`","3`."],"on `re.sub()`":["?"],"on `self.sentence`":["before"],"on `self`,":["but"],"on `str`":["that","to","that","that","that","that","could","that","-","that","that","that"],"on `str`,":["though."],"on `string`.":["There"],"on a":["full","single","project-basis,","class","None","lowercase","same","list","kick","kick","screen","line","per-character","line"],"on account":["of"],"on all":["your","three","three"],"on an":["instance,","empty","object","empty"],"on and":["why","I've"],"on another's":["page?"],"on any":["language's","type"],"on are":["nearly"],"on average":["outperform"],"on borders":["where","are","`line"],"on both":["sides","the","points","strings","sides?"],"on brave":["first"],"on caveats":["here:"],"on clarity":["and"],"on class":["level,"],"on code":["formatting/naming","formatting"],"on comments.":["Maybe"],"on common":["string"],"on computation":["and"],"on conditionals.":["I"],"on context,":["computation"],"on conveying":["the"],"on demand":["in"],"on e.g.":["whitespace"],"on each":["type","and","case:","call","call,"],"on early":["return"],"on either":["side."],"on empty":["strings","string,","strings.","string.","string."],"on evaluation":["order"],"on every":["`is_anagra`","branch,","function"],"on exercism":["(?)."],"on extracting":["every","matching"],"on first":["method","three"],"on formatting/naming":["standards"],"on from":["this"],"on here":["with","pointed"],"on here?":["Plus"],"on how":["you","to","often","this","to","to","to","to","to","to","to"],"on hundred":["percent"],"on if":["you"],"on immutable":["strings"],"on implementation":["detail."],"on in":["your","DNA-&gt;RNA","DNA-&gt;RNA","the","the","your"],"on inheritance":["and"],"on input.":["You"],"on is":["the","much"],"on it":["here:","and","would"],"on it's":["way","own","arguments","state"],"on it,":["you"],"on it.":["I"],"on iteration":["3."],"on its":["own","own.Regex","face","length."],"on libraries":["being"],"on line":["20.","4","7","2,","12","6","11","13.","11","6","6","7","10","4,","17?","16.","3.","22:","11,","2,","4.","12,","17","13","6","13","7."],"on lines":["13"],"on making":["those","suitable","it"],"on me":["a"],"on memoization":["of"],"on memoizing":["`Phrase.word_count()`"],"on methods":["that"],"on module":["level."],"on my":["Bob","Python.","Bob","Bob","mac.","part","last","last","own"],"on named":["predicates,"],"on new":["style"],"on next":["calls"],"on not":["needing"],"on object":["creation"],"on objects":["of"],"on one":["line...","side","of","that","data","data","line"],"on other":["peoples'"],"on passing":["`self`"],"on phrase":["because"],"on previous":["check"],"on proper":["code"],"on purpose":["to"],"on python":["2.7.","3,"],"on regex":["makes"],"on requirements":["change,"],"on rubyisms":["and","and"],"on s,":["but"],"on same":["data","data,","data."],"on seems":["like"],"on separate":["[Value"],"on single":["line."],"on some":["other's","new","rusty"],"on someone's":["recommendation"],"on something":["else"],"on stack":["exchange"],"on sticking":["to"],"on string":["objects.","objects.","that","would","methods!"],"on strings":["to","such","too.",";-)","consisting"],"on style":["and","can"],"on that":["here:","can","here:","and","part.","basis"],"on that.":["I"],"on the":["last","audience","Python","readability","readability","people","class,","message","negation,","`Bob`","class?","class,","responders","private","module","top","same","fixes","page...","early","raw","string","other","Bob's","DNA","naming","empty","approval","one","pep8","Javascript","verbose","github","class","object","string","size","situation","DNA","first","level","same","next","same","instance","class.","instance...","other","tradeoff","first","dict,","predicates","class","instance.","class","instance.","verbose","right","standard","previous","right","\"premature","instance","same","same","`import","same","contrary","wall,","wall.\\n\"","object,","same","instance","question","shoulders","differences","value","web.","empty","object.","tin","string.","filter","receiving","Bob","string.","input","command","called","rules","class,","same","actual","previous","\"if","best","full","same","iterable"],"on their":["own","own","own","own,","own,","own.","data"],"on them,":["that"],"on this":["site,","here:","here:","here:","here:","here:","here:","here:","here:","here:","here:","here:","here:","here:","issue","-","one","please!","result","one","one."],"on this,":["I"],"on this.":["Well","You're"],"on tips":["how"],"on to":["look","list","something"],"on too":["many"],"on top":["of","of","of","of","of"],"on two":["questions:","points"],"on upper":["elif,"],"on using":["a"],"on versions":["#1"],"on what":["you","was","you"],"on which":["it","is"],"on whitespace":["sequences"],"on whole":["string,"],"on why":["you","you","this"],"on why,":["and"],"on with":["that","DNA"],"on words":["works,"],"on you":["the"],"on your":["code.","code","own.","functions","code"],"on\" in":["the"],"on-demand calculation":["with"],"on. However,":["I"],"on. See":["http://www.artima.com/weblogs/viewpost.jsp?thread=98196."],"on. When":["RNA"],"on? I'd":["like"],"on? additional":["methods?"],"once (before":["splitting)"],"once --":["and","although","I'd"],"once I":["figure","saw"],"once and":["call","store","it","you","store"],"once at":["the"],"once because":["currently"],"once from":["`hey`."],"once in":["the"],"once instead":["of"],"once rather":["than","than"],"once the":["function"],"once to":["get"],"once you":["complete","loose","introduce"],"once, I":["would"],"once, so":["there's"],"once, without":["sacrificing"],"once. Let":["the"],"one !).":["Hope"],"one (`sort`)":["that"],"one I":["wish","already","like","experimented"],"one I'm":["afraid."],"one `None`":["for"],"one `word_count`,":["which"],"one advantage":["of"],"one again":["and"],"one alpha":["in"],"one alphabetic":["character"],"one and":["only"],"one at":["a","the"],"one big":["line"],"one blank":["line","line"],"one bottle":["of"],"one call":["to","expect"],"one can":["replace","call"],"one case:":["{'':"],"one cased":["character,"],"one character":["and","long,"],"one choice":["or"],"one computation":["is"],"one condition":["if"],"one could":["be","use"],"one data":["structure","abstraction"],"one definition":["for"],"one else":["uses","uses"],"one ever":["said"],"one except":["for"],"one extra":["space","empty"],"one for":["the","the","filters),","the"],"one from":["`re.split`","`filter`."],"one function":["that","while"],"one function!":["If"],"one hand":["I"],"one has":["far","to"],"one have":["to","no"],"one here,":["are"],"one in":["each"],"one is":["to","_really_","the","especially"],"one issue":["with","I"],"one it":["can"],"one language":["in"],"one large":["conditional","statement"],"one last":["question:","little"],"one letter":["and"],"one liked":["above."],"one line":["of","is","between","part"],"one liner":["is","and"],"one little":["nit,"],"one massive":["method"],"one may":["as"],"one mentionning":["you"],"one method":["(`standarize`)","can"],"one might":["want"],"one minor":["change","point:","point:","point:"],"one modifies":["the"],"one module":["and"],"one more":["thing.","-","thing","indent,","nitpick:"],"one new":["line"],"one of":["the","the","those","the","the","the","the","my","the","the","the","Bob's","the","the","their"],"one of:":["moving"],"one often":["used"],"one on":["lines","your","GitHub","GitHub"],"one or":["two"],"one other":["solution"],"one person":["to"],"one place":["you","separate","(Bob.reactions)","and"],"one place.":["Have"],"one point":["you"],"one proposed":["by"],"one return":["angle","is","from","at"],"one return,":["at"],"one routine":["at"],"one should":["not","explicitly"],"one shouting.":["I"],"one side":["i'd"],"one single":["instance","call","\"translation\"","character","if","statement"],"one small":["thing:"],"one special":["case"],"one starting":["with"],"one string":["replacement,"],"one style":["note","over","over"],"one test":["to"],"one that":["works","looks","fits","increase","avoids","lets","changes.","I"],"one thing":["though","I","I"],"one time":["thing"],"one to":["ask","another?"],"one triply-`and`ed":["if-statement"],"one trying":["to"],"one underscore":["suggest"],"one underscore)":["to"],"one way":["to","to","of"],"one with":["those","the","`respond_calmly`"],"one without":["regular"],"one word,":["while"],"one would":["use","expect","expect","expect"],"one yelling,":["but"],"one! Try":["it"],"one's classes":["from"],"one's easier":["for"],"one) in":["the"],"one, I":["did"],"one, but":["```\\w```"],"one, not":["submit"],"one, shorter":["and"],"one, since":["it"],"one, will":["add"],"one-file app":["like"],"one-line method,":["which"],"one-liner `if`":["statements,"],"one-liner functions":["(until"],"one-liner if":["statements,"],"one-liner method":["in"],"one-liner sure":["looks"],"one-liner too,":["by"],"one-liner works":["for"],"one-liner, `return":["self.__query[-1]"],"one-liners and":["no"],"one-liners of":["course)."],"one-liners, I":["think"],"one-liners, it":["becomes"],"one-method classes,":["but"],"one. \"Thoroughly":["bikeshedded\""],"one. As":["you"],"one. I":["left"],"one. In":["my"],"one. Part":["of"],"one. The":["only"],"one. Was":["able"],"one. What":["about"],"one.. I...":["wasn't"],"one/and first":["result."],"one: `is_empty`":["could"],"ones I":["want"],"ones because":["everybody"],"ones exist).":["Using"],"ones extending":["`object`."],"ones you":["have?"],"ones. That":["makes"],"oneself a":["couple"],"online documentation,":["is"],"only \"exist\"":["as"],"only \"if\"s?":["If"],"only (very":["nitpicky)"],"only 3":["lines."],"only 4,":["while"],"only `Bob.hey`":["as"],"only `if`":["in"],"only `if`s":["instead"],"only `scream`":["and"],"only `yield`":["the"],"only a":["certain","single","getter,","internal","internal","character"],"only about":["getting"],"only after":["I"],"only argument":["is","to"],"only at":["the","the"],"only attempting":["to"],"only awkward":["until"],"only be":["one","one","useful","called","an","technically","used","True"],"only bunch":["of"],"only calls":["each"],"only change":["my"],"only changes":["were"],"only checking":["for"],"only checks":["for"],"only cleaning":["up"],"only considers":["cased","cased"],"only consists":["of","of"],"only contained":["spaces."],"only contains":["spaces."],"only conventions,":["\"we're"],"only defined":["once"],"only difference":["is"],"only does":["half"],"only done":["when"],"only double":["underscore"],"only ends":["up"],"only ensure":["the"],"only enter":["in"],"only for":["the","functions,","name","people"],"only guidance":["with"],"only habit.":["I"],"only had":["one"],"only has":["four","spaces"],"only have":["one.","2.7","one","4","a","to"],"only if":["the","they","they","they","there"],"only implementation":["detail","detail.","detail"],"only in":["couple"],"only indirect":["test"],"only input":["ending"],"only interpret":["the"],"only invisible":["characters,"],"only is":["regex"],"only issue":["I"],"only kind-of-tricky":["part"],"only know":["a"],"only make":["sense"],"only makes":["sense","sense"],"only making":["one"],"only method":["that"],"only module":["level"],"only need":["one?","to"],"only needed":["if"],"only nit":["I"],"only oen":["thing."],"only ok":["FWIW,"],"only on":["a"],"only once":["and"],"only one":["return","`word_count`,","call","single","little","computation","way","line","liners.","of"],"only one/and":["first"],"only part":["of"],"only points":["out"],"only problem":["is"],"only public":["interface"],"only real":["nit","reason","issue"],"only reason":["to"],"only relevant":["metric"],"only remaining":["issue"],"only remark":["is"],"only removes":["the"],"only resort":["to"],"only responsible":["for","for"],"only return":["once","the"],"only returns":["`True`"],"only separately":["is"],"only set":["the"],"only show":["a"],"only sign":["of"],"only some":["were","had"],"only sort":["the"],"only specify":["the"],"only split":["it?"],"only style":["related"],"only submitted":["this"],"only symbols":["that"],"only that":["it","I"],"only the":["parameters","last.","allowed","grammar"],"only there":["to"],"only thing":["I","missing","that","you","I","that"],"only three":["if"],"only to":["avoid","find"],"only two":["lines"],"only update":["the"],"only uracil":["for"],"only use":["new-style","new-style","`re.search`"],"only used":["to"],"only want":["to","to"],"only what":["is"],"only when":["contracts"],"only where":["necessary."],"only whitespace":["(**.strip()**"],"only wondering":["if"],"only words.":["This"],"only work":["for"],"only works":["for","for"],"only, complex,":["it's"],"onto multiple":["lines"],"onto something":["with"],"opaque. I":["can't"],"opaque. Maybe":["I"],"open for":["discussion.","extension"],"open to":["criticisms.","manipulation,","other"],"opening quotes":["or"],"operate on":["one","one","that?"],"operates at":["the"],"operates on":["strings.","same","same"],"operating at":["a"],"operation be":["needed"],"operation may":["be"],"operation more":["clear."],"operation of":["transcribing,"],"operation starts":["to"],"operation that":["fails."],"operation to":["determine","be"],"operation with":["no"],"operation, A-&gt;A,":["G-&gt;G,"],"operation, I'd":["like"],"operation. Where":["else"],"operations and":["that"],"operations is":["significant"],"operations on":["the"],"operations themselves,":["I"],"operations](http://docs.python.org/2/library/stdtypes.html#truth-value-testing) to":["check"],"operations](http://docs.python.org/2/library/stdtypes.html#truth-value-testing). In":["combination"],"operator (`is`":["-"],"operator (`is`),":["not","not","not"],"operator `is`":["should"],"operator `is`.":["Also,"],"operator is":["spelled"],"operator overloading":["for"],"operator to":["check"],"operator, which":["is","takes"],"operator. For":["more"],"operators (cf":["pep08"],"operators (like":["`+`)."],"operators with":["a"],"operators. See":["[PEP"],"opinion about":["readability."],"opinion is":["that"],"opinion it":["is","would","is","is"],"opinion it's":["more","easier"],"opinion on":["why"],"opinion separating":["`formulate_prioritised_reply()`"],"opinion the":["DNA"],"opinion there":["are"],"opinion, coersion":["avoids"],"opinion, what":["would"],"opinion, you":["have"],"opinion. I":["like"],"opinion. This":["is"],"opinion. You":["can"],"opinions (yours,":["mines"],"opportunity to":["clarify","better"],"opposed to":["setting","just","using"],"opposite. Can":["I"],"opted for":["a"],"optimal. Anyway,":["I'm"],"optimal. Can":["you"],"optimal. If":["object"],"optimisation -":["both"],"optimisation to":["me"],"optimization IMHO.":["But"],"optimization and":["been","it's"],"optimization since":["you"],"optimization\" part.":["For"],"optimizations (yet).":["Would"],"optimizing for":["usage"],"opting for":["two"],"option I":["suppose"],"option for":["tokenizing"],"option is":["create"],"option to":["be"],"option), yet":["it"],"optional because":["currently","currently"],"optional keywords":["in"],"options can":["apply."],"options for":["the"],"or \"":["\"`","\""],"or \"\").strip())":["because"],"or \"\"`.":["Or"],"or \"\"```":["because"],"or \"Check":["if"],"or \"action\"":["class"],"or \"msg\"":["or"],"or \"sentence\"":["..."],"or '":["'`","'","'`."],"or ''`":["as","so"],"or ''`.":["Altering"],"or ''´":["or"],"or 'I'":["(uppercase"],"or 'global'":["object."],"or (b)":["Python"],"or (self.y":["%"],"or *dna":["string*."],"or Bob.question.":["Should"],"or False":["depending"],"or False)":["then"],"or False,":["so"],"or HTML":["where"],"or Message":["class"],"or None.":["Python"],"or Ruby,":["and"],"or Sentence":["would"],"or \\__name__":["...."],"or _message":["inside"],"or `@jairo`.":["(This"],"or `Anagram.alphagram`?":["For"],"or `False`":["explicitly."],"or `False`,":["and"],"or `False`.":["Then","Couldn't"],"or `None`":["as"],"or ```123```":["?"],"or `collections.Counter`":["as"],"or `dna_str`.":["This","This"],"or `elif`s":["matching"],"or `else`":["as"],"or `expression`,":["because"],"or `is":["not`)."],"or `is_question`":["takes"],"or `is_silence`":["are"],"or `is_silence`?":["That"],"or `not":["inputString`,"],"or `nucleotides`":["etc,"],"or `self.phrase":["="],"or `self.sequence`":["will"],"or `sorted`":["is"],"or `split()`.":["In"],"or `super`":["which","which"],"or `unicode`":["with"],"or a":["public","new","detail.","year,","string.","class,","`collection.Counter`","manually","string","shout","staticmethod"],"or after":["a"],"or am":["I"],"or an":["empty","uppercase"],"or another":["new-style"],"or another,":["or"],"or any":["other"],"or anything":["like"],"or are":["they","the"],"or ask":["for"],"or at":["least"],"or attribute":["as"],"or blank":["string"],"or by":["making"],"or change":["it","frequently.","features"],"or char":["for"],"or char`":["with"],"or class":["attribute.","level"],"or classes":["can"],"or common":["functions"],"or converse":["is"],"or converse.isspace()`":["and"],"or coverage":["wouldn't"],"or custom":["descriptors,"],"or define":["as","as","as"],"or delivered":["normally."],"or describing":["things"],"or do":["some"],"or don't":["at","understand"],"or done":["individually."],"or drunk":["-"],"or edge":["case,"],"or empty":["became"],"or empty.":["In"],"or ending":["characters,"],"or ends":["with","with","with...","with...","with."],"or endswith,":["etc"],"or even":["better","code","`cls`","s","methods"],"or extend":["the"],"or function":["name","definition,","definition","and"],"or functional,":["for"],"or functions":["(IOW","to"],"or go":["with","to"],"or have":["a","to","each"],"or having":["all"],"or helpers)":["gives"],"or how":["to"],"or if":["it","it's","message"],"or imports":["necessary."],"or input.isspace()`":["vs"],"or is":["blank"],"or it":["makes"],"or just":["use","stop"],"or lack":["of"],"or later":["modifying"],"or let":["the"],"or list":["comprehension","comprehension)","comprehension","comprehensions"],"or logic":["for"],"or lower":["case,"],"or maintain":["your"],"or maintainability":["bonus"],"or make":["code","it"],"or markers":["in"],"or message":["==","=="],"or message.isspace()`":["with"],"or message.strip()":["=='':"],"or method":["to","as","names","that","with","to","instead"],"or method's":["effect"],"or methods":["with","with","is"],"or methods,":["with"],"or mixins.":["Or"],"or module":["level,","is"],"or more":["spaces","like:"],"or moving":["the","them"],"or msg[-1]":["=="],"or no":["space."],"or not":["message.strip():","is","message.strip()`.","etc)","message.strip()`","message.strip():","wrap","i.strip()`.","but","to","isinstance(message,","the"],"or not,":["they","which","right?"],"or not.":["```","It's"],"or on":["the"],"or one":["large"],"or only":["has"],"or optimizations":["(yet)."],"or other":["methods.","niceties,"],"or otherwise":["of"],"or outside":["of"],"or parameter":["to"],"or perhaps":["the"],"or presented":["with"],"or processor":["cycles."],"or query":["it"],"or question":["and"],"or questioning":["by","or"],"or rather":["meatware"],"or readable,":["stringing"],"or removed":["altogether."],"or rename":["or"],"or represent":["the"],"or resorting":["to"],"or returned":["to","to","to"],"or self.sentence.isspace()`":["to"],"or separate":["class."],"or setting":["the"],"or shouting":["check."],"or silence,":["and"],"or silent":["--"],"or snake":["case"],"or some":["unrelated"],"or something":["could","like)","but","form"],"or something,":["but","negating"],"or something.":["Not"],"or spaces":["only"],"or specials":["chars."],"or static":["methods)"],"or style":["checker"],"or t":["for"],"or tail":["recursion"],"or text.isspace()`":["to"],"or the":["README.","`PhraseTest`","replies","None","previous"],"or to":["make","have","support","split","omit","raise","express"],"or two":["lines"],"or two.":["What"],"or unbound)":["are"],"or unicode)":["should"],"or use":["Python's","meta-classes"],"or variables,":["so"],"or voice":["recognition"],"or what":["it"],"or what's":["the"],"or word_counts":["as"],"or would":["it","you","\"if\""],"or writing":["to"],"or, even":["better,"],"order and":["get","get"],"order as":["the"],"order but":["it"],"order could":["cause"],"order dependent.":["It","Thanks"],"order does":["matter,"],"order doesn't":["really"],"order here":["it"],"order in":["`verse`.","which","the"],"order independent.":["You"],"order is":["important,"],"order not":["to"],"order of":["the","words","the","the","execution","precedence","the","the"],"order that":["anagrams"],"order the":["code"],"order they":["are"],"order to":["make","avoid","avoid","avoid","avoid","get","pass","make","avoid","make","make"],"order, and":["so","that"],"order, applying":["the"],"order-independant scheme":["for"],"order. A":["few"],"order. Using":["a"],"ordered prompts":["you"],"ordered, and":["unions"],"ordering and":["responses."],"ordering of":["the"],"ordering, so":["you","you"],"orders, told":["jokes,"],"organised codebase.":["Consider"],"organization of":["your"],"organization. Or":["they"],"organized at":["the"],"oriented code":["that"],"original and":["the"],"original argument":["intact"],"original can":["be"],"original code).":["I"],"original example":["in"],"original form":["of"],"original implementation":["would"],"original intent":["to"],"original problem":["statement,"],"original string":["but"],"original text":["just"],"original variable":["intact."],"original way":["is"],"original word":["once","for"],"original word.":["Also","I"],"original, so":["I"],"originally and":["then"],"originally tried":["[something"],"orthogonal concern,":["so"],"other Bob":["exercises"],"other Python":["assignment.","devs"],"other after":["the"],"other cases":["where"],"other check":["on"],"other classes":["that"],"other codes,":["that's"],"other comments":["for"],"other comments.":["You're"],"other considerations,":["but"],"other context":["(if"],"other cool":["things"],"other elifs":["the"],"other examples,":["that"],"other false":["value."],"other functions":["will"],"other hand":["it's","`Beer`"],"other hand,":["shows","moving","there"],"other if":["and","and"],"other inheritance":["issues."],"other languages":["today.","that","I'm"],"other languages,":["so"],"other libraries.":["I"],"other methods":["private","are","and","is"],"other modules,":["then"],"other name":["for","`message`"],"other names":["would"],"other niceties,":["it's"],"other nit:":["You"],"other nucleotides":["as"],"other one":["is","again"],"other part":["with","with"],"other parts":["of"],"other people":["that","what"],"other peoples'":["code."],"other pieces":["of"],"other place":["you"],"other places,":["it"],"other points":["are"],"other predicate":["?"],"other predicate-\u003eresult":["set"],"other predicates":["with"],"other predicates\"":["to"],"other predicates.":["What"],"other python":["specific"],"other questions,":["like"],"other reason":["not"],"other responses.":["A"],"other responsibilities":["etc.)."],"other rna":["nucleotides"],"other side,":["having"],"other solution":["I","that","like"],"other solutions":["that","to"],"other string":["methods"],"other strings":["is"],"other tests":["fail","-"],"other tests,":["the"],"other than":["`string`","set","as"],"other things":["(main()"],"other two":["are","are","answers"],"other type.":["It"],"other usage":["outside"],"other uses":["there"],"other way":["is","would"],"other ways":["how"],"other white":["characters."],"other without":["breaking"],"other word":["after"],"other words,":["`content`"],"other's code":[";)"],"other, why":["shouldn't"],"other. --":["@marielle"],"other. Note":["that"],"other. The":["method"],"other._lowercased and":["self._sorted"],"other._raw` instead":["of"],"other._sorted`) eventually":["wrapped"],"others (and":["the"],"others did":["it."],"others fairly":["simple,"],"others in":["[The"],"others is":["to","inconsistent?"],"others suggest":["list"],"others to":["`True`."],"others' code":[";)"],"others' submissions":["to"],"others, I":["think"],"others, for":["instance."],"others. Which":["way"],"otherwise I":["would"],"otherwise looks":["great!!!","great!"],"otherwise nice":["and"],"otherwise non-idiomatic":["code.","code."],"otherwise of":["the"],"otherwise this":["looks"],"otherwise two":["steps"],"otherwise use":["this"],"otherwise you":["create"],"otherwise: it's":["good"],"otherwise? I":["suggested"],"ought to":["be","be","be"],"oups.... i":["submitted"],"our code":["will"],"our conversation":["about"],"our dictionary?":["Or"],"our dicussion":["on"],"our goal.":["But"],"our new":["logic"],"our patterns":["won't"],"our white":["space"],"out \"generic\"":["functionality"],"out (a":["class"],"out /":["sure'"],"out ?":["(hint:"],"out None":["then"],"out `None`":["values"],"out `collections.Counter`.":["This"],"out `collections.defaultdict`":["for"],"out `str.endswith()`":["for"],"out a":["way","sequence.","cleaner"],"out about":["it):"],"out all":["nitpicks"],"out alphanumerical":["characters."],"out any":["better"],"out anything":["better."],"out as":["suggested,","well."],"out barring":["a"],"out behind":["the"],"out changing":["the"],"out concrete":["vars"],"out different":["approaches"],"out during":["my"],"out each":["chech"],"out empty":["matches?"],"out exact":["match)."],"out extra":["whitespaces"],"out first":["so"],"out from":["doing","the","OO"],"out here.":[":)"],"out here:":["http://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables"],"out how":["it","to","to","the","others","it"],"out http://docs.python.org/2/library/stdtypes.html#str.isupper":["for"],"out in":["such","a"],"out inequality":["implies"],"out into":["separate","separate","a","separate","their","separate","methods.","it's","another","a","a"],"out is":["useful"],"out methods":["for"],"out of":["```REPLIES```,","the","the","`DNA`?","the","curiosity,","class","my","it","the","the","it.","class","order","the","the","this..."],"out on":["rubyisms","rubyisms","conveying"],"out one":["of"],"out pieces":["of"],"out portion":["is"],"out some":["of","processing","of"],"out stuff":["and"],"out that":["line","simply","`Phrase._normalize`","it","I","it's","the","the","list"],"out the":["logic","tests","methods","logic","tests","methods","class","predicates","checks","conditions","predicates.","conditionals","\"input","logic","last","Couplet","hard-coded","predicates","creation","flaws.","`__name__","endswith()","`message_is_*()`","various","'","loop","`len(letters)"],"out there":["somewhere,"],"out there's":["a"],"out things":["to"],"out this":["new"],"out those":["tests","regexes"],"out to":["other","me","me","see","me","be"],"out what":["is","I","the"],"out what's":["happening"],"out when":["I"],"out which":["type"],"out with":["the","me,"],"out with,":["but"],"out without":["doing","the"],"out your":["conditions","checks"],"out!\" response?":["Replacing"],"out!' !=":["'Sure.'`"],"out!', self.bob.hey('WHAT":["THE"],"out' response":["is"],"out) it":["gives"],"out, I":["didn't"],"out, ```":["dict.get"],"out, and":["have:"],"out, the":["method"],"out. I":["like","see"],"out. Remember":["that"],"out. Using":["regexp"],"out: **please**":["don't"],"outdated test":["then,"],"outer level":["\"if"],"outperform this":["version"],"output if":["someone"],"output in":["such"],"output) instead":["of"],"output. Two":["remarks:"],"outputs only":["what"],"outside `Bob`.":["Also,"],"outside class":["-"],"outside of":["that","my","a","this","`__init__`.","`__init__`:","hey","Bob","the"],"outside parties":["to"],"outside should":["poke"],"outside the":["class?","initializer.","class","class","class."],"outside this":["function,","class,","class."],"outside world,":["so"],"outside. But":["a"],"outweight the":["cost"],"over \"is_yelling\"":["you'll"],"over 80":["character"],"over 9000":["test"],"over `input[-1]":["=="],"over `is_silence`":["and"],"over `map`":["and"],"over `str[-1]`":["as"],"over a":["range","`filter`?"],"over all":["list"],"over an":["iterable."],"over and":["over","over","over","over","over."],"over board.":["I"],"over comment,":["but"],"over each":["word,","string","element,","char"],"over engineered\"":["version."],"over engineering":["in"],"over from":["when","the"],"over functions":["because"],"over generic":["coding"],"over head":["of"],"over it":["(which"],"over it's":["items"],"over multiple":["@summer","functions"],"over my":["latest"],"over range,":["while"],"over replace":["@carmela?"],"over the":["other.","other.","top","top.","documentation","filtered","string.","words"],"over to":["Python3."],"over with":["every"],"over you":["might"],"over-complicated check":["method."],"over-engineered OOP":["here,"],"over-engineered solutions":["and"],"over-engineered, you're":["right."],"over-engineering for":["this"],"over-engineering in":["this"],"over-engineering, i":["would"],"over-engineering. I":["would"],"over-the-top with":["the"],"overall --":["I"],"overall I'm":["pretty"],"overall clearer.":["I"],"overall conciseness,":["but"],"overall structure.":["Some"],"overall! I":["just"],"overall. I":["didn't"],"overcome the":["special"],"overcomplexified way":["of","to"],"overcomplicated for":["me."],"overcomplicated things":["was"],"overdoing it.":["I"],"overengineered to":["me"],"overengineered: the":["term"],"overengineering is":["not"],"overexposure to":["functional-pattern-matching"],"overfitting the":["test"],"overhead +":["sort"],"overhead but":["it's"],"overhead is":["really"],"overhead like":["building"],"overhead of":["processing","creating","the"],"overhead to":["the"],"overhead, so":["I"],"overkill for":["this","what","the","this","now."],"overkill here":["?"],"overkill here.":["Have"],"overkill in":["this","this"],"overkill though":[":p"],"overkill to":["me,","remove"],"overkill. 100%":["with"],"overkill. At":["least"],"overkill. You":["then"],"overkill? I":["guess"],"overlapping to":["make"],"overloading for":["this"],"overloading hey,":["I"],"overly complex.":["Maybe"],"overly complicated":["and"],"overly complicated.":["I"],"overly familiar":["with"],"overly pedantic":["suggesting"],"overly resistant":["to"],"overly simplified":["version:"],"overly verbose,":["just"],"overly worried":["about"],"overridden in":["a","a"],"overridden the":["built-in."],"overridden. I":["must"],"overridding builtin":["types"],"overridding of":["a"],"override an":["inherited"],"override classify":["to"],"override it,":["but"],"override module":["object."],"override names":["of"],"overriding for":["class"],"overriding these":["values"],"overwrite the":["whole"],"overwrites a":["builtin"],"overwrites the":["name"],"owes a":["great"],"own `Word`":["class"],"own and":["its"],"own behavior":["and"],"own code.":["Your"],"own decision":["which"],"own dedicated":["functions?","functions?"],"own definition":["of"],"own experience":["solving"],"own first":["submission"],"own function":["to","to"],"own is":["that"],"own line":["would"],"own lines":["(regards"],"own lines.":["`__responses`"],"own method.":["Your"],"own methods.":["However"],"own module.":["But"],"own name":["(well,"],"own named":["functions"],"own opinion.":["I"],"own predicate":["in"],"own right.":["As"],"own routines":["as"],"own stupidity.":[":)"],"own, and":["the"],"own, do":["you"],"own. Everything":["you"],"own. The":["python"],"own.Regex in":["general"],"p =":["Phone(\"(123)"],"p.number =":["\"(012)"],"package which":["supports"],"package, you":["don't"],"packing the":["logic"],"page and":["that"],"page? EDIT:":["Ah"],"paid off":["when"],"painted myself":["into"],"pair in":["the"],"pair. But,":["this"],"pairing of":["tests","nucleotides"],"pairs (2-uples),":["not"],"pairs (aka,":["\"rules\")?"],"pairs and":["a"],"pairs for":["`vocab`"],"pairs in":["`Bob.Responses`"],"pairs passed":["to"],"pairs) from":["the","the"],"par of":["`DNA.__dict__`.","name,","name,"],"paradigm and":["use"],"paradigms in":["a"],"paradigms. The":["object-orientivism"],"parallel with":["codeacademy"],"param could":["help"],"param2=\"abc\"):`. You":["can"],"parameter \"message\"":["being"],"parameter each":["time."],"parameter everywhere.":["That"],"parameter for":["instance","`expected_encoding`."],"parameter in":["the"],"parameter is":["in","of"],"parameter name":["to","from"],"parameter name.":["Several"],"parameter should":["be"],"parameter that":["is"],"parameter to":["define"],"parameter? After":["all,"],"parameters and":["listing"],"parameters like":["`def"],"parameters should":["be"],"parameters they":["need."],"parameters** and":["**lambdas**."],"parameters, don't":["you"],"parameters, variables":["etc."],"parameters. Maybe":["there's"],"paranoid set":["of"],"pare them":["down..."],"parens BTW)":["useless."],"parens around":["the","the","`candidate`","`(predicate,","the"],"parens so":["the"],"parens, and":["you"],"parent class":["then"],"parentheses are":["not","unnecessary","not"],"parentheses around":["the","the","the"],"parentheses in":["if","you","you","the","each"],"parentheses is":["difficult,"],"parentheses surrounding":["it"],"parentheses will":["return"],"parenthesis on":["the"],"parlance for":["a"],"parse 2":["expressions"],"parse this":["way."],"parse through":["each"],"parsed first":["in"],"parsing (i.e.":["removing"],"parsing process":["quite","quite"],"parsing), and":["b)"],"part (pluralization":["of"],"part (what":["do"],"part 1:":["you"],"part 2,":["there"],"part ?":["(hints:"],"part about":["this"],"part also":["because"],"part because":["that's","I"],"part by":["living"],"part decoupled":["and"],"part if":["with:"],"part in":["the","`Word.is_anagram_of()`,","`Phrase.clean_phrase`","`Phrase.is_silence`"],"part is":["clear,"],"part of":["Python!","that","the","the","the","the","the","a","RNA","the","class'","a","class'","standard","public","Bob","public","the","the","it","the","the","the","the","it","the","the","the","the","the","the","the","the","Bob's","the","the","the","the"],"part with":["initializing","character","initializing","character","initializing"],"part without":["regexes"],"part, however":["that"],"part, it's":["a"],"part, which":["is"],"part. And":["the"],"part. For":["the"],"part: while":["the"],"partial application":["to"],"partial function":["application."],"particular case":["but","a","it"],"particular case,":["please"],"particular case.":["Good","Unfortunately,"],"particular checkForYelling,":["which"],"particular domain,":["I"],"particular idea":["in","in"],"particular method.":["In"],"particular operation":["may"],"particular order":["but"],"particular reason":["to","to"],"particular statement,":["not"],"particular substring,":["take"],"particular substring.":["Take","`elif`s"],"particular to":["remark"],"particular way.":["It","It","It"],"particularly interested":["if"],"particularly well":["to"],"parties to":["manipulate"],"partly a":["matter"],"parts can":["all"],"parts into":["variables"],"parts is":["really"],"parts of":["it","the","both","the","my","the"],"parts that":["are"],"parts together":["(+"],"party reading":["this"],"pass '#'":["or"],"pass ALL":["of"],"pass None":["at"],"pass `None`":["and"],"pass `_raw`":["to"],"pass ```":["test_forceful_questions"],"pass `digits`":["as"],"pass `message`":["to"],"pass `self`":["to"],"pass a":["string"],"pass all":["the","of"],"pass and":["nothing"],"pass column":["71."],"pass fine":["when"],"pass for":["me."],"pass in":["a","a"],"pass is":["unnecessary"],"pass test":["suite,"],"pass the":["message","property","`words`","unit","following","test_normalize_case(),","test,","`greeting`","result","tests.","tests?","tests...","tests"],"pass them.":["Which"],"pass though":["I'm"],"pass without":["the"],"pass, and":["is"],"pass, but":["I'm","this"],"pass, continue),":["but"],"pass, some":["of"],"pass. Also,":["I've"],"pass. As":["long"],"pass. But":["I"],"pass. I":["am"],"pass. If":["you"],"pass. Now":["you"],"passed `None`?":["Very"],"passed as":["an"],"passed in":["it","which","doesn't"],"passed in.":["You"],"passed index":["is"],"passed messages?":["It"],"passed parameters":["should"],"passed tests":["had"],"passed the":["statement"],"passed to":["`dict()`","```is_question```.","the"],"passed with":["out"],"passed, it":["would"],"passed. But":["extra"],"passes None":["and"],"passes a":["string","string.","string"],"passes all":["the","the","the"],"passes and":["doesnt"],"passes test":["suite,"],"passes the":["unit","tests","tests.","tests,"],"passing `True`":["to"],"passing ```":["FormattedWord"],"passing `self`":["or"],"passing a":["variable","data"],"passing all":["the"],"passing anything":["except"],"passing in":["the","the","self,"],"passing it":["to","to"],"passing self":["to"],"passing some":["tests,"],"passing tests.":["The"],"passing the":["requirements","same","tests."],"passing! I":["updated","updated"],"patches the":["absence"],"path setting":["the"],"path) so":["it's"],"pathname ...\".":[":)"],"pathologic regexes":["that"],"pattern '\\W'":["is"],"pattern ?":["Hint:"],"pattern before,":["didn't"],"pattern between":["`Statement`"],"pattern could":["have"],"pattern crying":["to"],"pattern in":["Kent","order","the","the","the","the","`hey()`.","`.hey()`"],"pattern matches,":["in"],"pattern matching,":["algebraic","but"],"pattern of":["caching"],"pattern to":["solve"],"pattern when":["hey()"],"patterns as":["rules"],"patterns won't":["match"],"patterns, split":["strings,"],"pause/silence before":["or"],"pay attention":["especially","to","to","to","to","to"],"peace of":["code,"],"pedantic suggesting":["that"],"pedantic, so":["feel"],"peeking at":["someone"],"penalty so":["I"],"people can":["keep"],"people don't":["like"],"people like":["me"],"people said":["I"],"people tend":["to"],"people that":["argued","is"],"people thinking":["about"],"people to":["add"],"people unfamiliar":["with"],"people use":["different"],"people using":["string.isupper()"],"people what":["code"],"people who":["will","don't"],"people won't":["be"],"people. Even":["though"],"pep-8 also":["says"],"pep-8 says":["something"],"pep08 (code":["layout"],"pep08 :":["variables","`Bob.Responses`","variables"],"pep08 for":["the"],"pep8 (again)":["recommend"],"pep8 (the":["program)"],"pep8 :":["2"],"pep8 again":[":"],"pep8 formatting":["\u003c-"],"pep8 on":["your"],"pep8 recommend":["to"],"pep8 says":["you"],"pep8 stuff..":["I"],"pep8. But":["that"],"per @bernardo's":["advice."],"per PEP8":["and"],"per `dict.get(key,":["default)`."],"per burtlo's":["suggestion."],"per char.":["I"],"per good":["tdd"],"per last":["nitpick."],"per word,":["for"],"percent sure":["about"],"perfect as":["far"],"perfect otherwise:":["it's"],"perfect sense,":["and"],"perfect solution.":["Storing"],"perfectly aware":["of."],"perfectly fine,":["although"],"perfectly readable.":["If"],"perfectly reasonable":["to"],"perfectly the":["purpose"],"perform action":["on"],"perform the":["tests"],"performance and":["readability."],"performance but":["because"],"performance gain":["(given"],"performance is":["important,"],"performance perspective":["that"],"performance when":["number"],"performances, but":["the"],"performant and":["elegant"],"performant, but":["looks"],"performed at":["the"],"performing a":["sequence","string"],"performing the":["look"],"perhaps 'interprets_as_question'":["would"],"perhaps didn't":["think"],"perhaps extract":["a"],"perhaps it":["has"],"perhaps it's":["OK."],"perhaps one":["return"],"perhaps the":["guard"],"perhaps) to":["determine"],"perils of":["not"],"period. It":["prescribes"],"permissive about":["what"],"permutations I":["used"],"permutations seems":["inefficient"],"persists for":["the"],"person I'd":["want"],"person has":["its"],"person to":["view"],"personal opinions":["(yours,"],"personal point,":["but"],"personal preference":[":)"],"personal preference.":["I","One"],"personal taste":["but"],"personal tastes)":["and"],"personally I":["would"],"personally advise":["against"],"personally bothered":["by"],"personally create":["a"],"personally dislike":["the"],"personally find":["it"],"personally for":["me"],"personally think":["the","that"],"personally use":["spaces"],"personally would":["avoid"],"personally, don't":["see"],"personnaly not":["accept"],"perspective I":["think"],"perspective I've":["taken"],"perspective he":["doesn't"],"perspective that":["I"],"perspectives, but":["you"],"pesky MatchObject":["instances."],"philosophy, you":["don't"],"philosophy. If":["you"],"phone number":["(or","system"],"phrase \"hysterical":["raisins\"."],"phrase (i.e.":["`'"],"phrase and":["be"],"phrase as":["yelling,"],"phrase at":["once","once"],"phrase because":["it's","it"],"phrase before":["storing","processing"],"phrase can":["be"],"phrase class":["would"],"phrase ending":["in"],"phrase from":["the"],"phrase identification":["from","from"],"phrase if":["it's"],"phrase in":["word","order"],"phrase inside":["Bob.hey"],"phrase is":["None`","in","in","in"],"phrase itself":["is"],"phrase logic":["extracted"],"phrase needed":["some"],"phrase non-public":["by"],"phrase said":["to"],"phrase splitting":["in"],"phrase that":["can"],"phrase then":["only"],"phrase to":["count.","lowercase","lower."],"phrase was":["not"],"phrase\"\"\"` above":["the"],"phrase, because":["Bob's"],"phrase. Bob":["should"],"phrase.isupper()` is":["a"],"phrase.split() is":["a"],"phrase.strip()\" construct":["to"],"phrase:` statement":["--"],"phrase[-1] ==":["'?'"],"phrase` instead":["of"],"phrased in":["each"],"phrases. Is":["it"],"phrasing for":["return"],"pick better":["name"],"pick is":["to"],"pick out":["concrete"],"pick that":["up."],"pick this":["up"],"pick up":["the","on"],"picked that":["up"],"picked this":["approach"],"picked up":["when","correctly"],"picking an":["unused"],"picks up":["this"],"picture of":["what"],"picture, where":["there"],"pie.\" for":["instance?"],"piece by":["piece."],"piece in":["a"],"piece of":["feedback,","nitty","code,"],"piece. So":["I"],"pieces of":["logic","code,","code"],"pkoch's suggestion":["you"],"place and":["having"],"place for":["value"],"place helper":["methods","methods"],"place here":["IMHO."],"place in":["documentation","`__new__`?"],"place of":["the"],"place or":["outside"],"place separate":["from"],"place the":["check"],"place to":["normalize","put","put"],"place you":["use","don't."],"place, but":["it's"],"place. Have":["you"],"place; with":["the"],"placed at":["that"],"placed in":["the"],"placed into":["an"],"placed words":["'hash'"],"placeholder for":["invalid"],"places and":["not","another"],"places to":["use"],"places) if":["the"],"places, it":["is"],"places. Consult":["PEP8"],"plain `'T'`":["is"],"plain `dict`,":["as"],"plain `if":["not"],"plain `if`":["instead"],"plain `str`":["methods"],"plain ascii":["inputs"],"plain attribute":["(class"],"plain dictionary":["to"],"plain function":["is"],"plain functions,":["not"],"plain functions.":["Do"],"plain obvious":["solution"],"plain old":["functions","functions","function","function,"],"plain strings?":["Also,"],"plan on":["making"],"plan to":["change"],"planned to":["just"],"play -":["it"],"play a":["bit"],"play with":["it","if"],"played around":["with"],"played this":["more"],"played with":["the"],"playing a":["smartass..."],"playing havoc":["with"],"pleasant (see":["http://ruby-doc.org/core-1.9.3/String.html"],"please I'm":["not"],"please apply":["the"],"please avoid":["\"advises\""],"please check":["your"],"please consult":["Python"],"please do":["-","share."],"please ignore":["this"],"please pay":["attention"],"please read":["this"],"please refer":["to"],"please see":["http://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables"],"please tell":["me"],"please use":["underscored,"],"pleases me":["from"],"plugins complete":["arguments"],"plumbing to":["do"],"plural form":["(ie:"],"pluralizing `\"bottle(s)":["of"],"plus an":["explicit"],"point (someone":["could"],"point -":["I"],"point 1":["as"],"point I":["have"],"point RealBigB,":["I'll"],"point about":["capital","using","return","short"],"point adding":["the"],"point because":["of"],"point considering":["you"],"point for":["having","the","the","the"],"point if":["the"],"point in":["that","repeating","declaring","the"],"point interface":["in"],"point is":["that","a",":"],"point just":["return"],"point of":["this","view","exercism.io.","view,","view","view","view","having","view","view","using","view","view","view","the","the","a","a","using","having","having","having","providing","writing","`normalize`","the"],"point on":["making","memoization","toupper()."],"point out":["all","the"],"point out,":["the"],"point that":["out."],"point the":["tests"],"point this":["out:"],"point though":["regarding"],"point to":["not","mention"],"point with":["any"],"point you":["would"],"point\" -":["the"],"point). *Given":["the"],"point, I":["think"],"point, Malikari.":["Thanks!"],"point, and":["now","the"],"point, but":["I'd","it","it"],"point, even":["though"],"point, it":["doesn't"],"point, one":["of"],"point, removing":["that."],"point, thanks":[";)"],"point. Fixed":["in"],"point. I":["wasn't","thought"],"point. I've":["changed"],"point. IOW:":["it"],"point. Looks":["fine."],"point. Thank":["you!"],"point. You":["are"],"point. it":["is"],"point: it's":["somewhat"],"point: why":["do"],"point; I":["hadn't"],"pointed it":["out"],"pointed out":["here:","to"],"pointed, this":["will"],"pointer you":["might"],"pointer. To":["make"],"pointers ?":["I"],"pointers\" (Python":["has"],"pointers. I":["haven't"],"pointing out":["`collections.Counter`.","how","that","the","that"],"pointing that":["out.","out.","out,","out,","out."],"pointless plumbing":["to"],"pointless when":["I"],"pointless. My":["objects"],"points I":["want"],"points are":["of"],"points for":["using","making"],"points it's":["perfect"],"points out":["that"],"points where":["we"],"points with":["a"],"points\" version":["(\"prevent"],"points, I":["didn't"],"points, but":["do"],"points, depending":["on"],"points. Forth":["is"],"points. I":["chose"],"points: You":["don't"],"poke around":["with","in"],"poking at":["Python!"],"pokémon exceptions.":["You're"],"pollution, and":["that"],"polymorphic dispatch":["-"],"polymorphism is":["very"],"polymorphism seems":["to"],"poor style,":["since"],"poorly written":["in"],"popular in":["the"],"ported as":["a"],"ported them":["to"],"portion is":["how"],"portion where":["I"],"position access":["(`salutation[-1]`)"],"position might":["be"],"positive lengths":["--\u003e"],"possibility for":["confusion"],"possibility of":["injection"],"possibility often":["gets"],"possibility that,":["in"],"possibility to":["add"],"possible (it":["should"],"possible alternative":["for"],"possible and":["stop","return"],"possible english":["mistakes."],"possible in":["order"],"possible names":["are","and"],"possible names,":["it"],"possible reasons":["come"],"possible responses":["in"],"possible symbol":["and"],"possible that":["the","generators"],"possible to":["document","further","change","do","get"],"possible without":["using"],"possible\". To":["me,"],"possible, and":["also"],"possible, favoring":["more"],"possible, hence":["the"],"possible, only":["attempting"],"possible, specially":["when"],"possible. But,":["for"],"possible. I":["could"],"possible. Not":["many"],"possible: it":["facilitates"],"possible? In":["such"],"possibly a":["couple","bit"],"possibly final)":["solution"],"possibly flawed)":["logic"],"possibly move":["the"],"possibly reused":["elsewhere,"],"possibly useless":["computation."],"possibly work\"":["implementation"],"post [Loop":["Like"],"potential ?":["`is_anagram`"],"potential for":["publishing"],"potentially could":["change"],"potentially the":["reader–"],"power in":["yours"],"power of":["first","the"],"powerful functionalities":["of"],"powerful object-oriented":["programming"],"powerful than":["you"],"practical `collections.Counter`)":["is"],"practical points":["above."],"practically. In":["addition,"],"practice (first":["line"],"practice :":["if"],"practice for":["classes"],"practice in":["Python","Python"],"practice just":["yesterday"],"practice responsible":["future-proof"],"practice these":["as"],"practice to":["use","only","only","use","have","use","always"],"practice with":["Python"],"practices of":["that"],"practicing implementing":["classes."],"practise to":["use"],"pragmatic. However,":["since"],"precalculate the":["alphagram"],"precalculated the":["alphagram"],"precedence in":["the"],"precedence is":["a"],"precedence over":["\"is_yelling\"","`is_silence`"],"precedence rules":["were","are","in","hardcoded"],"precedence rules,":["changing"],"precedence than":["questions,"],"precedence when":["it"],"precisely modeled":["of"],"precompilation (performance),":["since"],"precompute anything":["then"],"precompute the":["\"standardized\""],"predicate *inside*":["the"],"predicate code":["and"],"predicate expects":["a"],"predicate for":["list"],"predicate functions":["as","are"],"predicate got":["a"],"predicate handling":["more"],"predicate has":["to"],"predicate in":["two","part"],"predicate is":["simple","self-descriptive,"],"predicate logic":["into"],"predicate on":["line"],"predicate return":["value`"],"predicate that":["you"],"predicate to":["be","an"],"predicate unexpected":["stateful"],"predicate used":["in"],"predicate() return":["some_answer\""],"predicate(): return":["value`","value`"],"predicate, I":["think"],"predicate, I'd":["like"],"predicate, e.g.":["\"first"],"predicate-&gt;answer mapping":["at","(which"],"predicate-\u003eanswer pairs)":["from"],"predicate-\u003eresult set":["?"],"predicate/response pairs":["(aka,"],"predicate: a":["callable"],"predicate: return":["value`"],"predicates (and":["the"],"predicates -":["wrong","_none_","with"],"predicates accept":["either"],"predicates and":["logic:","branching"],"predicates are":["tested","short","not."],"predicates at":["least"],"predicates being":["short"],"predicates by":["making"],"predicates complexity":["and"],"predicates dont":["have"],"predicates expect":["their"],"predicates from":["precedence"],"predicates helper":["methods."],"predicates independantly)":["and"],"predicates into":["their"],"predicates might":["be"],"predicates nor":["the"],"predicates on":["s,"],"predicates should":["really"],"predicates with":["code"],"predicates would":["make"],"predicates\" to":["have"],"predicates, I":["agree"],"predicates, and":["I"],"predicates, in":["my"],"predicates, quite":["on"],"predicates. I":["think"],"predicates. Now":["how"],"predicates. What":["will"],"prefer `#replace`":["for"],"prefer `__all__`":["definition."],"prefer `filter`":["when"],"prefer `msg`":["instead"],"prefer `re.finditer`":["in"],"prefer adding":["interface"],"prefer an":["if/elif/else"],"prefer and":["why."],"prefer being":["able"],"prefer classes":["over"],"prefer early":["return"],"prefer generator":["expressions"],"prefer having":["a"],"prefer it":["that","that"],"prefer longer":["names."],"prefer my":["approach"],"prefer not":["to","to"],"prefer simple":["\"if"],"prefer that":["the"],"prefer the":["else,","regexp.","string","early"],"prefer them":["this"],"prefer them.":["In"],"prefer this":["or"],"prefer to":["limit","see","leave","say","divide","keep","not","write","use","run"],"prefer use":["composition,"],"prefer using":["`reversed()`"],"prefer. This":["is"],"preferable or":["not"],"preferable than":["the"],"preference -":["some"],"preference :)":["You"],"preference for":["interface."],"preference not":["to"],"preference of":["[a"],"preference rather":["than"],"preference with":["regards"],"preference. Also":["consider"],"preference. Also,":["in"],"preference. As":["for"],"preference. Generally,":["it's"],"preference. I":["like"],"preference. One":["might"],"preferred here,":["IMO."],"preferred over":["`input[-1]"],"preferred staying":["with"],"preferred that":["project's"],"preferred the":["code"],"preferred to":["use","the","the"],"preferred way":["to","of"],"preferred, acceptable,":["or"],"prefix `is`,":["but"],"prefix could":["be"],"prefix everything":["with"],"prefix is":["enough"],"prefix it":["with"],"prefix justifies":["creating"],"prefix should":["be"],"prefix them":["with","with","with"],"prefix would":["suffice"],"prefixed it":["with"],"prefixed with":["a","single","single"],"prefixed-only form,":["though."],"prefixes **and**":["suffixes"],"prefixes to":["suggest"],"prefixing method":["or"],"prefixing names":["with"],"premature optimisation":["to"],"premature optimization":["IMHO.","and"],"prematurely factoring":["out"],"prepended with":["just"],"prepending the":["method"],"prescribed in":["[PEP"],"prescribes the":["function"],"presence first,":["but"],"present chars":["(how"],"present. I":["could"],"presentation [Loop":["Like"],"presentation [The":["Naming","Naming","Naming"],"presentation slides":["on"],"presentation you":["linked"],"presented with":["riddles,"],"presenting you":["with"],"preserve both":["the"],"preserve the":["original,"],"preserved as":["constants?"],"preserved. I":["admit"],"presumably pure":["predicate"],"presume that":["cleaning"],"pretending to":["be"],"pretty alike.":["Maybe"],"pretty big":["and"],"pretty clearly":["that"],"pretty cool":["and"],"pretty direct":["operation."],"pretty elegant":["and"],"pretty explicit":["-"],"pretty good":["idea,","solution.","ok,","support"],"pretty good,":["but","but","here's"],"pretty good.":["Have"],"pretty handy":["things"],"pretty happy":["with"],"pretty heavy":["way"],"pretty much":["all","equally","a","I","everything","does"],"pretty neat":["way"],"pretty neat.":[":)"],"pretty redundant,":["because"],"pretty safe":["thing"],"pretty simple":["solution"],"pretty slow":["comparatively."],"pretty specific":["(and","problem,"],"pretty straightforward":["to"],"pretty straightforward,":["just"],"pretty strongly":["to"],"pretty sure":["it's","there's"],"pretty that":["one"],"pretty to":["me,"],"pretty unsure":["myself"],"pretty useless.":["Am"],"pretty vague":["so"],"pretty well.":["I'd"],"prevent bugs":["in"],"prevent bugs,":["when","when","when","when","when"],"prevent counting":["''"],"prevent it":["being"],"prevent this.":["I"],"preventing later":["statements"],"prevents common":["typos"],"prevents other":["classes"],"previous `qualify`":["method,"],"previous check":["in"],"previous comment":["about"],"previous commenter":["suggested,"],"previous comments,":["I"],"previous effort":["but"],"previous exercise,":["but"],"previous iteration,":["I"],"previous iterations.":["Just","I"],"previous line":["?"],"previous one.":["In"],"previous solution.":["bah"],"previous two":["commenters."],"previous version":["(once"],"previous version,":["what","but"],"previous versions":[":-)"],"previous versions.":["String#translate"],"previously mentioned":["only"],"primary feature":["too"],"principle (the":["class","O"],"principle](http://en.wikipedia.org/wiki/Single_responsibility_principle), some":["of"],"principles for":["Python's"],"print \"message":["is","is"],"print 'true'":["if"],"print `message":["is"],"printed to":["their"],"priority to":["checking"],"privacy it":["provides"],"private (IOW":["rename"],"private as":["long","well"],"private field":["and"],"private field.":["(Strictly"],"private for":["instance."],"private function":["_clean_phrase"],"private helper":["methods","methods"],"private in":["Python"],"private is":["still"],"private member":["variable"],"private members":["in"],"private members:":["names"],"private method":["on","for","naming","names"],"private method,":["and"],"private methods":["in","in","makes"],"private methods,":["using"],"private or":["do"],"private to":["the"],"private variable.":["I'm"],"private with":["two"],"private, as":["these"],"private, because":["it's"],"private, but":["I"],"private, it":["encapsulates"],"private, since":["the","they're"],"private, so":["I"],"private, you":["can"],"private. Names":["beginning"],"private. Or":["going"],"private_methods and":["refactored"],"privates, there":["would"],"probably I":["fetched"],"probably a":["weakness","better","matter"],"probably actually":["go"],"probably allow":["for","you"],"probably be":["following","improved","a","handled","self","superiour.","replaced"],"probably buggy":["and"],"probably could":["have","have"],"probably create":["a"],"probably didn't":["think"],"probably due":["to"],"probably follow":["PEP8."],"probably get":["rid"],"probably getting":["too"],"probably hardwired":["in"],"probably have":["an"],"probably initialize":["the"],"probably keep":["it"],"probably make":["sense,","it"],"probably makes":["line"],"probably more":["approachable,"],"probably needs":["a"],"probably not":["advertise","have"],"probably not.":["But"],"probably over":["engineering"],"probably put":["some"],"probably rather":["get"],"probably re-factoring":["before"],"probably read":["the"],"probably reduce":["the"],"probably religious":["war"],"probably same":["reason"],"probably save":["some"],"probably should":["have","have)."],"probably sort":["`base_word`"],"probably string":["and"],"probably the":["`elif`","goal","easiest"],"probably use":["class","if-statements"],"probably want":["to"],"probably was":["actually"],"probably wasn't":["the","*strictly*"],"probably would":["run","have","not"],"probably wouldn't":["be","have"],"probably writing":["this"],"probably, as":["most"],"probably, the":["class"],"probably, though":["it"],"problem (but":["TBH"],"problem -":["the"],"problem I":["see"],"problem [on":["the"],"problem and":["extend","that's"],"problem as":["simple"],"problem at":["hand,"],"problem because":["we"],"problem cleanly.":["They","They"],"problem could":["be"],"problem domain":["would","(others"],"problem has":["changed"],"problem in":["combining","the","python","a"],"problem inside":["the"],"problem instead":["of"],"problem is":["so","that","that","easy","easier"],"problem it's":["a"],"problem language":["in"],"problem level,":["whereas"],"problem mentioned":["by"],"problem mentions":["terms","terms"],"problem more":["elegantly."],"problem of":["UI"],"problem often":["comes"],"problem space":["it"],"problem statement,":["then","but"],"problem than":["'bob')."],"problem that":["sticks"],"problem the":["symbols"],"problem this":["simple."],"problem trivial":["so"],"problem using":["simple"],"problem was":["more","only","tested"],"problem with":["the","defining","specialized","python."],"problem yet,":["I'll"],"problem you":["describe."],"problem, I":["suppose."],"problem, I'll":["stick"],"problem, and":["wondering"],"problem, but":["all"],"problem, however":["I"],"problem, where":["self.statement.strip()"],"problem. (I":["did"],"problem. A":["docstring"],"problem. For":["example,"],"problem. From":["section"],"problem. I":["will"],"problem. I've":["made"],"problem. Try":["to"],"problem. ```":["str()","MethodDispatcher"],"problem? I":["like"],"problematic. You":["don't"],"problems -":["```"],"problems overriding":["these"],"problems should":["be"],"problems when":["you"],"problems with":["my","circular","*setting*","correctly","elegant","any"],"problems you":["do"],"problems, any":["ideas?"],"problems. However":["argument"],"procedural code":["pretending"],"procedural or":["functional,"],"procedural, but":["introducing,"],"procedural. The":["`Anagram`"],"process `Whatever.`":["case"],"process be":["called"],"process behind":["converting"],"process everything":["once"],"process in":["the"],"process input":["so","at"],"process inputs":["at"],"process of":["DNA","converting"],"process quite":["a","a"],"process strings":["that"],"process that":["is","doesn't"],"process was:":["If"],"process, but":["it's"],"process, though...":["I"],"process/sanitize string":["once."],"processing ([Single":["Responsibility"],"processing `word`":["over"],"processing and":["would","get"],"processing by":["using"],"processing details":["than"],"processing each":["time"],"processing from":["the"],"processing helper":["methods"],"processing in":["separate","`Phrase.__init__`?"],"processing logic":["is"],"processing the":["word"],"processing to":["a","`Phrase.__init__`"],"processing, why":["would"],"processing. If":["you"],"processing. So":["I"],"produce an":["implementation"],"produce the":["output)"],"production code);":["however,"],"production of":["the"],"program I'd":["have"],"program does":["would"],"program does?":["agreed,"],"program fails":["if"],"program more":["clear.","readable."],"program only":["show"],"program returns":["'Sure.'"],"program should":["communicate"],"program to":["make"],"program works":["anyway"],"program) wasn't":["bothered"],"program, but":["I"],"program, different":["sections"],"program. This":["comes"],"programmer by":["day"],"programmer error":["-"],"programmer is":["intending","going"],"programmer who":["wrote"],"programmer would":["like"],"programmer you":["dont"],"programmers do":["this"],"programmers should":["be"],"programmers will":["avoid"],"programming (calling":["super()"],"programming and":["I"],"programming approach":["and"],"programming as":["described"],"programming background":["i","do"],"programming error,":["so","the"],"programming in":["Python.","C."],"programming is":["a"],"programming language\"":[":)"],"programming methodology":["here."],"programming paradigms.":["The"],"programming... intentional":["nulls"],"programs is":["not"],"programs like":["this,"],"programs would":["complain"],"project and":["you"],"project which":["makes"],"project's [docstring":["style](https://docs.djangoproject.com/en/1.5/internals/contributing/writing-code/coding-style/#python-style),"],"project-basis, since":["I"],"projection (map)":["and"],"projects complies":["to"],"projects is":["invaluable."],"projects left":["which"],"projects like":["this"],"projects where":["we've"],"projects you":["could","will"],"prolonged silence":["test"],"prompt.endswith(\"?\") rather":["than"],"prompt.endswith(\"?\")` work":["?"],"prompt.strip()\" would":["as"],"prompt[-1] ==":["\"?\""],"promptly forgot":["it."],"prompts you":["to"],"propagate anyway":["?"],"proper capitalization.":["The"],"proper code":["formatting"],"proper declaration":["for"],"proper domain":["model"],"proper functional":["language"],"proper representation":["of"],"proper statement,":["even"],"proper support":["for"],"proper variable":["names"],"proper way":["to"],"properly document":["your"],"properly named":["query","modules.","private"],"properly now,":["as"],"properly work":["as"],"properly, would":["complicate"],"properly. apparently":["there"],"properties =":["set([])"],"properties and":["whole","whole"],"properties but":["I"],"properties here,":["but"],"properties inherent":["to"],"properties or":["custom","`super`","`super`"],"properties, `super`":["or"],"properties. Here":["you"],"property and":["memoization"],"property annotations":["and"],"property as":["a"],"property for":["the"],"property initialization":["difficult."],"property into":["an"],"property is":["a"],"property names":["btw.","clash"],"property of":["`zip`"],"property so":["that"],"property to":["a","cache","handle","inforce"],"property) could":["make"],"property, but":["the","the"],"property, the":["integrity","integrity"],"property. Ah":["well."],"proposed by":["PEP422"],"proposed in":["[PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations)."],"proposition is":["neat,"],"protect some":["vital","vital"],"protected members":["and"],"protection against":["tampering."],"proud of":["my"],"proved to":["be"],"proverbial square":["wheel."],"proves that":["it"],"provide `None`":["or"],"provide a":["better","`@constantin`"],"provide are":["useful"],"provide different":["behavior","responses."],"provide docstrings,":["which"],"provide more":["clarity,"],"provide strings":["to"],"provide that":["much"],"provided as":["example."],"provided doesn't":["seem"],"provided in":["the"],"provided? It":["seemed"],"provides for":["strings:"],"provides the":["obvious","```","familiar"],"provides to":["be"],"providing a":["slightly"],"providing access":["to"],"providing docstrings,":["I"],"providing the":["computer"],"providing them":["one"],"pseudo-code as":["you"],"pseudo-dict looks":["like"],"pseudocode for":["`Bob.hey`"],"public (I":["got"],"public API":["or","can","(you","or","and","neither.","or"],"public API\",":["you"],"public API,":["IMHO"],"public API.":["Also,","They"],"public API?":["Or"],"public and":["what","is"],"public api":["for"],"public api.":["Usually"],"public attribute":["of","???","of","(which","non-public.","non-public.","non-public.","non-public.","non-public.","non-public.","non-public."],"public attribute),":["and"],"public attribute,":["without","which"],"public attributes":["and"],"public attributes.":["The"],"public attributes...":["They"],"public by":["default"],"public gives":["the"],"public instance":["method"],"public interface":["is","so","because","right","because","according"],"public interface,":["but"],"public interface.":["Main","Method"],"public interface?":["I"],"public interfaces":["or"],"public interfaces.":["You"],"public later":["than","than","than","than","than","than","than"],"public meant":["functinos:"],"public member":["variable","variable,"],"public methods":["than"],"public or":["not."],"public to":["non-public"],"public, I":["don't"],"public, one":["would"],"public, though":["now"],"public. Do":["I"],"public? Would":["it"],"publish the":["readme"],"published API":["?"],"publishing comment":["collections"],"puke to":["look"],"pull that":["out"],"pull the":["generator"],"pulled a":["rabbit"],"pulled out":["things","when"],"pulling the":["two"],"punctuation and":["decided","digits"],"punctuation by":["using"],"punctuation characters":["but"],"punctuation cleanup":["in"],"punctuation in":["a"],"punctuation is":["by"],"punctuation mark":["is"],"punctuation removal":["to"],"punctuation then":["the"],"punctuation) is":["done"],"punctuation, I":["would"],"punctuation, and":["`Counter`"],"punctuation, why":["not"],"punctuation. It":["may"],"punctuations? I":["mean,"],"pure C":["-"],"pure function,":["but"],"pure predicate":["unexpected"],"purpose and":["focused"],"purpose does":["it"],"purpose in":["what","what","what"],"purpose is":["so"],"purpose of":["this","the","code","the","the","that","this","replacing"],"purpose to":["represent"],"purpose you":["have"],"purposes here.":["You"],"purposes python":["has"],"push anything":["here."],"push back":["and"],"push your":["preference"],"pushy, but":["you're"],"put Nucleotides":["at"],"put `is_silence`":["above"],"put a":["lot"],"put all":["the"],"put back":["my"],"put both":["the"],"put enough":["thought"],"put extra":["spaces"],"put functions":["into"],"put import":["statements"],"put in":["a","an"],"put into":["a","property)","a"],"put it":["through"],"put line":["break"],"put message_is_empty":["after"],"put my":["finger"],"put no":["default"],"put nucleotide":["symbols"],"put some":["more"],"put spaces":["before"],"put the":["logic","`msg","word","points","constants"],"put them":["at","somewhere"],"put those":["checks"],"put together":["isn't"],"put up":["a"],"putting \"private\"":["implementation"],"putting [two":["blank"],"putting all":["the"],"putting formatting":["in"],"putting it":["in"],"putting the":["response","_message_is","return","if","`if`","checked,"],"putting them":["into"],"putting these":["helpers,"],"putting this":["up,"],"putting words":["and"],"puzzle out":["what's"],"pydoc. So":["if"],"pyflakes doesn't":["pick"],"pyflakes for":["comments"],"pyflakes, it":["should"],"pyflakes/PEP8 issues;":["did"],"pylint in":["emacs","my"],"pylint instead":["of"],"python (and":["coding"],"python (flat":["is"],"python (to":["avoid"],"python 2.7.":["I"],"python 2.7.3,":["which"],"python 2.x":["it's","by","by","by","by","by","by","by","GoodPractice"],"python 2.x,":["it","it","it's"],"python 2.x.":["More","More","More","More","More"],"python 3,":["but"],"python I":["hope"],"python background,":["but"],"python class":["before,","methods"],"python code":["I"],"python code,":["so"],"python community":["has,"],"python considers":["truthy"],"python dev":["having"],"python devs":["hating","hating"],"python did":["you"],"python encoding":["to"],"python enum":["-"],"python function,":["it's"],"python function.":["There's"],"python functions":["and","are"],"python guru":["myself,"],"python has":["super-awesome","a"],"python have":["the"],"python i've":["written."],"python idioms.":["This"],"python is":["to","much"],"python keyword,":["maybe"],"python last":[";)"],"python like":["it"],"python makes":["it"],"python methods":["like"],"python now":["and"],"python over":["generic"],"python provides":["for"],"python refresher":["and"],"python shell":[":","and"],"python specific":["special"],"python specifics":["for"],"python states":["that"],"python string":["make","is","methods.","documentation."],"python style":["guidelines.","guidelines,","guidelines","guide,"],"python suite":["have"],"python the":["hard"],"python there":["is"],"python too":[":-)"],"python track.":["So"],"python user,":["it's"],"python uses":["duck"],"python way":["is","with"],"python you":["can","can"],"python's `collections`":["module"],"python's built-in":["string"],"python's default":["argument"],"python's isupper()":["already"],"python's negative":["indexing."],"python's not":["the"],"python's object":["model."],"python's world":["this"],"python, I":["was"],"python, and":["by"],"python, but":["I","it","it's"],"python, so":["feeling","any"],"python, which":["(pre-3)"],"python. Additionally,":["conventionally"],"python. Be":["gentle."],"python. Even":["if"],"python. Everything":["else"],"python. That":["feedback"],"python. What":["I"],"python. You":["could"],"python... what":["do"],"python2.7 and":["python3.3"],"python2.x. You":["could"],"python3 (with":["all"],"python3, hence":["no"],"python3.3 and":["it"],"pythoneer would":["use"],"pythonic -":["and"],"pythonic and":["readable","I","generally"],"pythonic as":["it"],"pythonic code":["you"],"pythonic coding":["conventions)."],"pythonic convention":["for","for"],"pythonic in":["my"],"pythonic part:":["while"],"pythonic to":["CAPITALIZE_CONSTANTS.","write","leave"],"pythonic way":["is","to","to","to","to","to"],"pythonic way,":["I"],"pythonic ways":["of"],"pythonic you":["could"],"pythonic, and":["too"],"pythonic, better":["to"],"pythonic, but":["sticking"],"pythonic, really":["depends"],"pythonic. Always":["better"],"pythonic. Silently":["failing"],"pythonic. Yes":["it's"],"pythonic. You":["may"],"pythons class":["semantics,"],"pythons form":["of"],"pythons slicing":["syntax"],"python–those functions":["floating"],"qualifications from":["the"],"quality of":["this"],"queries can":["be"],"queries for":["students"],"queries, it":["is"],"query about":["its"],"query it":["for"],"query methods":["could","on","on"],"query tests":["into","into"],"query was":["\"I"],"question (\"why":["does"],"question and":["it","yelled"],"question being":["asked,"],"question by":["yelling"],"question check":["or"],"question here?":["\"`"],"question if":["it","it"],"question is":["`xxx?!`,","less","just","recognised","only"],"question mark":["should","instead","instead","in","anyway"],"question mark\"":["but"],"question mark\".":["Code"],"question nor":["shouting"],"question of":["preference.","making","\"if"],"question or":["a","empty"],"question predicate":["is"],"question since":["it"],"question that":["doesn't"],"question whether":["the"],"question will":["never"],"question would":["be"],"question\" -":["not"],"question', '#":["silence')."],"question). Dealing":["with"],"question, I'm":["not"],"question, it's":["an"],"question, maybe":["it's"],"question, or":["silence,"],"question, shouting,":["rest)"],"question, take":["another"],"question. I":["was"],"question. That":["is"],"question. The":["order"],"question. There":["is"],"question. There's":["a"],"question. Why":["not"],"question: Is":["it"],"question: why":["is","is"],"question; however,":["it"],"questionable in":["any"],"questioning by":["using"],"questioning or":["silent"],"questioning the":["PARAMETERS"],"questioning, and":["being"],"questioning, so":["the"],"questionmark `\"something?":["\"`"],"questions (?":["followed"],"questions and":["capitalization).","find"],"questions etc.":["It"],"questions like":["\"LOOK"],"questions private":["method"],"questions should":["be","be"],"questions than":["regular"],"questions with":["spaces"],"questions, but":["that"],"questions, like":["\"Who"],"questions, not":["nitpicks."],"questions, so":["even"],"questions. Check":["out"],"questions. I":["do"],"questions. So,":["to"],"quick and":["clean"],"quick first":["thought:"],"quick help":["on"],"quick python":["refresher"],"quick solution":["for"],"quick string":["methods"],"quick, but":["are"],"quickly as":["possible","possible"],"quickly browse":["the"],"quite a":["lot","few","few","few","lot","few","bit","bit","bit,","bit,","mess,","few","few"],"quite alright.":["I"],"quite articulate":["why,"],"quite as":["clean"],"quite clean":["code."],"quite clean,":["but"],"quite clear":["enough."],"quite comfortable":["with"],"quite common":["in"],"quite complicated":["construct,"],"quite concise.":["I"],"quite confident":["it's"],"quite convenient":["if"],"quite easy":["to"],"quite expensive":["operations"],"quite generic":["so"],"quite good":["already,"],"quite happy":["with"],"quite hard":["to"],"quite impossible":["to"],"quite inconsistent:":["in"],"quite long":["-"],"quite long,":["probably"],"quite nice.":["You"],"quite often":["proved"],"quite on":["the"],"quite readable,":["but"],"quite redundant":["(in"],"quite right,":["but"],"quite self-documenting..":["It"],"quite short,":["but"],"quite short.":["Keep"],"quite short?":["Just"],"quite similar":["solutions."],"quite simple":["and","as"],"quite smart,":["they"],"quite structured.":["You"],"quite succint,":["but"],"quite sure":["how","what","what","it's"],"quite sure,":["if"],"quite the":["same"],"quite useful":["things."],"quite well":["on"],"quote a":["comment"],"quote doc":["comment."],"quotes in":["their"],"quotes or":["on"],"r in":["self.responders","rules:"],"rabbit from":["an"],"rabbit trail":["of"],"raise a":["`ValueError`","ValueError","ValueError"],"raise an":["exception"],"raised, which":["might"],"raises an":["exception","error..."],"raising a":["`KeyError`."],"raising an":["`AttributeError`)","error"],"raisins\". Haven't":["heard"],"raisins, google":["'new-style"],"raisins, really.":["Google"],"ran 74":["s"],"ran the":["submitted"],"random `x`":["and"],"range instead":["of"],"range of":["inputs.","operations"],"range(1000 *":["26"],"range(end, start)])`":["you"],"range(start, end,":["-1)]`."],"range(start, stop-1,":["-1)]"],"range, while":["`join`"],"range. That":["said,"],"rare case":["in"],"rarely (read":["\"never\")"],"rarely rely":["on"],"rarely see":["the"],"rarely used":["in","reflection"],"rarely used.":["Anyway,"],"rate, I've":["seen"],"rather a":["naming"],"rather be":["a"],"rather by":["convention"],"rather call":["them","it"],"rather declarative":["\"rule-based\""],"rather deprecated.":["It's"],"rather either":["do"],"rather extreme":["(and"],"rather get":["a"],"rather have":["created"],"rather high":["as"],"rather inflexible.":["For"],"rather keep":["string"],"rather loaded":["and"],"rather long":["so"],"rather make":["a"],"rather meatware":["related"],"rather pass":["the"],"rather pointless":["when"],"rather prefer":["to"],"rather procedural.":["The"],"rather put":["no"],"rather raise":["a"],"rather rare":["case"],"rather redundant":["because","because"],"rather redundant,":["because"],"rather smarts,":["they"],"rather than":["\"what","a","str.endswith","regular","camelCase","the","some","the","doing","doing","how","trying","a","object-oriented.","at","one","the","just","the","the","having","`==`,","`s`.","have","just","a","each","a","external","`step","if's?","syntax-driven","simply","the","what","prompt[-1]","a","\"if\"","``hey``."],"rather that":["performing"],"rather uncommon":["in"],"ratio of":["capitals"],"rational for":["cases."],"raw speed":["etc"],"raw tests,":["or"],"raw-string notion":["for"],"rawinput to":["another"],"re `if":["statement"],"re at":["all."],"re is":["too","my"],"re module":["for","with"],"re module.":["Could"],"re notes":["are"],"re package,":["you"],"re! Me,":["too!"],"re). Have":["a"],"re-`join` the":["sorted"],"re-compile them":["with"],"re-defined each":["and"],"re-factor your":["last"],"re-factoring before":["necessary."],"re-inlined after":["I"],"re-introduced the":["Phrase"],"re-used in":["the"],"re-using the":["name"],"re. comments.":["I"],"re. encoding":["--"],"re. filter,":["map,"],"re. line":["12","23"],"re. meaning":["hence"],"re. new":["style"],"re. text.strip()":["-"],"re. use":["of"],"re. what":["to_rna()"],"re.UNICODE seems":["great,"],"re.findall along":["with"],"re.findall and":["collections.Counter"],"re.findall could":["make"],"re.findall instead":["of"],"re.finditer() would":["be"],"re.finditer. So":["I"],"re.search('[abcdefghijklmnopqrstuvwxyz]', self.sentence)":["=="],"re.search(r\"[a-z]\",str) ==":["None)`"],"re.split(). The":["pattern"],"re: one-liner":["if"],"re` as":["it's"],"re` isn't":["used"],"reached that":["point"],"reaches that":["limit."],"reaching 0":["so"],"react to":["a"],"reaction be":["independent"],"reaction list.":["You"],"reaction. I":["find"],"reactions. Haven't":["seen"],"reacts on":["each"],"read 257!":["(And"],"read PEP":["8"],"read [PEP-8](http://www.python.org/dev/peps/pep-0008)":["and"],"read `ActionDispatcher`'s":["code)"],"read `Anagram('tan').match('ant":["stand"],"read `return`":["statements"],"read a":["little","little"],"read about":["new","`collections.defaultdict`","it"],"read and":["understand."],"read better":["without"],"read but":["that's","won't"],"read for":["no"],"read http://www.python.org/dev/peps/pep-0257/":["for"],"read in":["my"],"read it":["every"],"read more":["natural"],"read nicer":["after"],"read of":["the"],"read on":["someone's"],"read or":["maintain"],"read particularly":["well"],"read that":["in"],"read the":["whole","doc","docs","doc.","state","state.","FineManual","doc","doc","[PEP-8](http://www.python.org/dev/peps/pep-0008)","documentation","full","doc","doc","whole","whole","doc","doc","doc","specs","Readme?"],"read this":["code","submission:",":"],"read through":["[The"],"read up":["about"],"read well.":["Doing"],"read when":["someone"],"read, and":["you"],"read, too.":["I'd"],"read-me description":[","],"read-me file":["and"],"read-me file,":["like"],"read-me file.":["Also"],"read-me we":["see"],"read. But":["for"],"read. Though":["you"],"read. You":["should","should","should","should","could"],"readability (like":["i"],"readability and":["is","makes","my"],"readability cost":["to"],"readability could":["be","be"],"readability even":["more."],"readability in":["this","this"],"readability of":["the","this","not","the","the"],"readability or":["maintainability"],"readability penalty":["so"],"readability to":["always"],"readability with":["multiple"],"readability worth":["a"],"readability. But,":["that's"],"readability. Consider":["getting"],"readability. Doesn't":["my"],"readability. Here's":["an"],"readability. IMHO":["if-elif-elif-else"],"readability. Otherwise":["you"],"readability/organization standpoint,":["and"],"readability? With":["a"],"readable (except":["lines"],"readable (in":["my"],"readable (like":["is_question())"],"readable (to":["me)."],"readable and":["self-documenting","self-documenting","straightforward","idiomatic","expressive.","expressive","efficient","straightforward.","doesn't","well","understandable","expressive"],"readable as":["possible","decoded.is_upper()"],"readable code":["possible."],"readable code.":["Don't"],"readable end":["ethe"],"readable form":["of"],"readable if":["all","you","you","you"],"readable in":["my","this","my"],"readable more":["then"],"readable moving":["checks"],"readable so":["I"],"readable solution.":["Critique","Some"],"readable than":["indexing.","`if","your","indexing/slicing."],"readable that":["way"],"readable this":["way."],"readable to":["me.","many","me."],"readable way":["to"],"readable when":["meaning"],"readable) way":["to"],"readable, although":["it"],"readable, and":["I","I'm"],"readable, but":["I","I","I"],"readable, expressive":["and"],"readable, expressive,":["etc."],"readable, good":["variable"],"readable, just":["a"],"readable, maintable,":["and"],"readable, maintainable":["code"],"readable, not":["only"],"readable, stringing":["together"],"readable, the":["code"],"readable. But":["that"],"readable. For":["instance,"],"readable. However":["in"],"readable. I":["work","would"],"readable. If":["I"],"readable. In":["this"],"readable. It's":["more"],"readable. Or":["just"],"readable. Perhaps":["it's"],"readable. Some":["would"],"readable/understandable. The":["mapping"],"readable? Does":["it"],"readablilty of":["your"],"reader (e.g.":["me)"],"reader as":["well"],"reader immediately":["grasp"],"reader the":["mental"],"reader to":["link","determine"],"reader's view":["of"],"reader, and":["it"],"reader, which":["is"],"reader. If":["you"],"readers to":["have"],"reader– are":["not"],"readily convey":["the"],"readily see":["why"],"reading [PEP-20](http://www.python.org/dev/peps/pep-0020/).":[":P"],"reading again":["the"],"reading code":["like"],"reading or":["writing"],"reading other":["examples,"],"reading out":["your"],"reading perspective":["I've"],"reading that":["comment"],"reading the":["tests","code","python","code."],"reading this":[":p","class","would"],"reading too":["far"],"reading your":["code.","code.","solutions"],"readme and":["the"],"readme for":["the"],"readme, namely":["the"],"reads a":["lot"],"reads in":["order,"],"reads much":["more"],"reads very":["nicely","nicely."],"reads well,":["but"],"reads, functionally":["\"length"],"ready reference":["available,"],"real case":["(https://gist.github.com/hostmaster/6354972)"],"real conversation":["at"],"real fun":["to"],"real goal":["was"],"real huge":["input."],"real issue":["I"],"real life":["production"],"real nit":["at"],"real nitpick":["..."],"real one":["for"],"real performance":["gain"],"real reason":["to","to"],"real word":["for"],"real-life behavior":["of"],"real-life implementation":["would"],"realise when":["extending"],"realised that":["the","I"],"realised the":["final"],"reality, these":["conditionals"],"realize Counter":["counts"],"realize `isupper()`":["would"],"realize isupper()":["would"],"realize that":["this","that","was","is","the","this"],"realize/check, that":["words[len(words)-1]"],"realized after":["reading"],"realized that":["it's","there","my","both","`str.isupper`","it"],"realized, a":["pattern"],"realizing the":["intent:"],"really \"optimize\"":["much."],"really 'Language'":["the"],"really (other":["than"],"really *REALLY*":["minor"],"really a":["robot","class","meaningful","style","style","style","descriptive","matter","mutable","one-liner.","case","map.","conversation?","matter","fan"],"really agree":["with"],"really appreciate":["your","your"],"really are":["edge","minor:"],"really baffles":["me"],"really be":["created?","spelled","spelled","part"],"really belongs":["to"],"really can't":["see"],"really care":["that"],"really cares":["if"],"really change":["anything,"],"really checking":["it"],"really class-level":["\"constants\"","\"constants\""],"really complex":["enough"],"really confuse":["the"],"really curious":["about"],"really dead":["simple"],"really deep":["-"],"really depends":["on","on","on"],"really descriptive,":["it's"],"really dislike":["Python."],"really does":["determine"],"really doesn't":["matter."],"really doing":["great"],"really don't":["need","know"],"really dont":["need"],"really enjoying":["this"],"really expect":["a"],"really experienced":["in"],"really feel":["strongly"],"really fit.":["Something"],"really functions,":["and"],"really good":["-","reason"],"really handle":["plain"],"really happens,":["especially"],"really happy":["with","with","about","with"],"really hard":["to"],"really have":["used","to"],"really huge":["input","input"],"really implementation":["detail","stuff"],"really insist":["on"],"really just":["a","to"],"really kind":["of"],"really know":["Python","what"],"really know,":["what's"],"really like":["how","that","that","the","the","having","the","the","that","the"],"really like,":["so"],"really looking":["for"],"really looks":["better.","like"],"really make":["sense?","the"],"really matter":["?","much","too","for"],"really meaningful,":["and"],"really methods":["-"],"really model":["transcribing"],"really must":["avoid"],"really necessary":["--","for","to"],"really necessary,":["but"],"really need":["`elif`","`elif`","`message","to","a","to","to","to","to","a","instance","the","the","a","maketrans"],"really needed":["to"],"really needed.":["If"],"really nice,":["there"],"really nitpicky":["here,"],"really nitpicky,":["it's"],"really not":["a"],"really only":["submitted","set"],"really open":["for"],"really overengineered":["to"],"really part":["of","of"],"really pedantic,":["so"],"really pretty":["that"],"really proud":["of"],"really pythonic,":["better"],"really really":["terrible"],"really representing":["the"],"really see":["how"],"really seen":["someone"],"really shortened":["it!"],"really shouldn't":["be"],"really simple":["I"],"really smart":["compiler",":)"],"really so":["costly"],"really strange":["thing"],"really subclassing":["`Counter`"],"really supposed":["to"],"really sure":["this","it's","if"],"really terrible":["name"],"really the":["same","application"],"really think":["about","`Phrase.rex`"],"really trivial":["exercise,"],"really try":["to"],"really ugly":["to"],"really understand":["the"],"really unusual":["arrangement,"],"really useful,":["but"],"really useful.":["My","May"],"really versed":["in"],"really want":["inheritance","to","to","to"],"really wants":["to"],"really well.":["The"],"really what":["it"],"really your":["application"],"really, really":["want"],"really, the":["problem"],"really. Google":["for"],"rearrange your":["if"],"reason -":["what"],"reason I":["made","use","added","like","separated"],"reason about":["and"],"reason about,":["even"],"reason for":["this","the","overdoing"],"reason not":["to"],"reason that":["those"],"reason to":["add","ever","use","avoid","use","make","exist.","want","keep","do","explicitly","construct","favor","name","go"],"reason why":["you"],"reason you":["have"],"reason your":["program"],"reason, I":["had","thought"],"reason, i":["just"],"reason, it":["wouldnt"],"reason, looking":["towards"],"reason. If":["you"],"reason. Sorry!":[":)"],"reason? Given":["how"],"reasonable to":["me,","make","me"],"reasonable: keeps":["things"],"reasoning for":["the","including"],"reasoning is":["as"],"reasons -":["just"],"reasons come":["to"],"reasons for":["going"],"reasons that":["are"],"reasons, which":["is"],"reassign along":["the"],"reassign variables":["if"],"reassigning it":["to"],"rebind it":["latter"],"recalculate ```":["_points"],"recalculate alphagram":["for"],"recalculate it":["for"],"recalculating result.":["How"],"recalculation. A":["client"],"recalled the":["preferred"],"receive any":["feedback."],"received at":["exercism.io."],"receives string,":["so"],"receives text,":["he"],"receives, since":["it"],"receiving end.":["Could"],"recent addition":["to"],"recent call":["last):","last):","last):","last):","last):","last):","last):","last):","last):"],"recent overexposure":["to"],"recent tests":["from"],"recent years,":["migrated"],"recently and":["list"],"recently is":["that"],"recently, you're":["using"],"recieved, and":["I"],"recode this":["to"],"recognised properly":["now,"],"recognition system.":["True,"],"recognizing what":["kind"],"recombining it":["back"],"recommend fixing":["it,"],"recommend me":["a"],"recommend moving":["the"],"recommend that":["you"],"recommend to":["not","not"],"recommend you":["to","to"],"recommendation back":["in"],"recommendation is":["to"],"recommendation would":["be"],"recommendations are":["mentioned"],"recommended by":["the","Zed","Zed","Zed","official","official","official","official","official","official","official","PEP8","PEP8","[PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations)."],"recommended for":["clarity."],"recommended in":["Python's","[PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations).","[PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations)."],"recommended the":["same.","same."],"recommended to":["use","use","use","use","avoid","subclass","document"],"recommended way":["for","by","by","of","to","by","by","by","by","by","by"],"recommended? If":["so,"],"recommending that":["I"],"recommends documenting":["all","public"],"recommends making":["use"],"recommends to":["not","make","make","use","make"],"recommends two":["or"],"recommends using":["`.endswith()`"],"recomputed every":["time."],"record, I":["mostly"],"record: I":["choosed"],"recording instead":["of"],"recounting and":["getting"],"recursion approach,":["though"],"recursion depth":["exceeded"],"recursion to":["write"],"recursively (inside":["of"],"recursively calling":["itself."],"redefined on":["each"],"reduce `if`":["statements"],"reduce function":["calls"],"reduce just":["like"],"reduce repetition":["while"],"reduce the":["repetition","repetition","horizontal","API","memory","`is_silent`","amount"],"reduce won't":["work"],"reduce, but":["I"],"reduced, so":["a"],"reduces cyclomatic":["complexity."],"reducing the":["overhead","3"],"redundancy with":["`elif/else`"],"redundant (in":["both"],"redundant (other":["than"],"redundant -":["`return`","`return`"],"redundant and":["inconsistent"],"redundant because":["`return`","return","`return`","`return`"],"redundant here?":["You"],"redundant since":["if"],"redundant tests":["in","in"],"redundant, as":["it"],"redundant, because":["return","the"],"redundant. Just":["use"],"redundant. Or":["am"],"redundant. Other":["than"],"redundant. You":["can"],"redundantly and":["with"],"redundnat. Single":["underscore"],"reeeally had":["wished"],"refactor `nucleotide_counts`":["to"],"refactor any":["of"],"refactor hack":["out"],"refactor into":["`is_message_type_A,B,C`"],"refactor it":["into","out"],"refactor or":["something"],"refactor out.":["I"],"refactor the":["code.","class"],"refactor this":["to"],"refactor where":["I"],"refactor your":["conditionals"],"refactor. I":["couldn't"],"refactored ```":["hey"],"refactored out":["to"],"refactoring a":["bit"],"refactoring and":["uploaded"],"refactoring into":["the"],"refactoring it":["in"],"refactoring. If":["something"],"refer to":["the","the","Python","python","python","the","them.","the"],"reference `self`":["anywhere."],"reference about":["new-style"],"reference available,":["please"],"reference on":["the"],"reference please":["see"],"reference self":["instead."],"reference the":["values"],"reference to":["hold"],"reference, this":["seems"],"reference? In":["ruby"],"referenced in":["the"],"references in":["your"],"references to":["members","Bob,"],"references, but":["it's"],"referring to":["`str.maketrans`?","line"],"refers to":["all"],"reflect changed":["data"],"reflect changes,":["and"],"reflect our":["new"],"reflect the":["intent","original"],"reflected here.":["Also,"],"reflected in":["the"],"reflection techniques.":["In"],"reflects the":["understanding","test"],"reflects what's":["going"],"refresher and":["that"],"refreshing. It's":["easy"],"refuse the":["temptation","temptation"],"regarding UTF-8":["encoding"],"regarding the":["\"catch","catchall.","umlauts.","comment,","input"],"regardless because":["despite"],"regardless, and":["the"],"regards to":["spacing","readability.","the","conformance","what","the","extracting","dna"],"regex appropriately":["and"],"regex be":["removed?"],"regex check?":["I"],"regex engine":["didn't"],"regex flag":["re.UNICODE"],"regex for":["that.","the"],"regex in":["sight!","line"],"regex instead":["of"],"regex magic":["from"],"regex makes":["it"],"regex method":["to"],"regex module":["seems"],"regex name,":["which"],"regex on":["the"],"regex or":["voice"],"regex per":["word,"],"regex remove":["that"],"regex seems":["to"],"regex so":["much"],"regex stuff":["I"],"regex that":["matched"],"regex u":["could"],"regex using":["a"],"regex version":["could"],"regex with":["`\\w+`"],"regex work":["in"],"regex would":["do."],"regex you":["can"],"regex) in":["the"],"regex, and":["doing"],"regex, so":["you"],"regex-based approach":["would"],"regex. Maybe":["I'm"],"regex. The":["same"],"regexes are":["testing","cryptic"],"regexes as":["that"],"regexes completely":["for"],"regexes here.":["Any"],"regexes into":["methods"],"regexes that":["could","is"],"regexes, and":["it's"],"regexes. Although":["I"],"regexes. For":["example,"],"regexp directly":["to"],"regexp either,":["but"],"regexp function.":["That"],"regexp in":["your"],"regexp instead":["of"],"regexp is":["not"],"regexp matches":["empty"],"regexp might":["be"],"regexp or":["not."],"regexp over":["and"],"regexp patterns":["as"],"regexp so":["that"],"regexp, full":["OO"],"regexps doesn't":["just"],"regexps for":["things"],"regexps to":["remove"],"regexps when":["plain"],"regexps where":["simple"],"regexps, but":["maybe"],"regexs here.":["alternatively"],"region where":["ASCII"],"registered, which":["can"],"regular collections":["rather"],"regular expresisons":["I"],"regular expression":["to","(and","engine:","to"],"regular expression.":["With","But"],"regular expressions":["because","or","throughout","may","over","themselves","you","-","when","allow","were","(import"],"regular expressions,":["I","be","but"],"regular expressions.":["I"],"regular method":["would"],"regular methods":["and"],"regular string":["methods,","methods"],"rehey, but":["then"],"reinventing a":["lot"],"reinventing the":["proverbial"],"related (too":["little"],"related code":["plain"],"related nitpick":["is"],"related note":["-"],"related return":["statements"],"related to":["the"],"relation between":["the"],"relatively simple":["and"],"relay. And":["the"],"relegated to":["a"],"relevant data":["in"],"relevant metric":["here,"],"relevant stackoverflow":["question](http://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python)."],"relevant to":["anything","Bob","the"],"relevant: http://stackoverflow.com/a/1988826/477048.":["It"],"reliable way":["of"],"reliable, maintainable":["and"],"reliance on":["evaluation"],"relied on":["conditionals."],"religious about":["the"],"religious war":["territory.)"],"rely on":["the","inheritance","common","implementation"],"rely too":["heavily"],"relying on":["`re.sub()`","`self`,","comments."],"remaining bottle":["of"],"remaining issue":["as"],"remains the":["same,"],"remark about.":["Good"],"remark is":["that"],"remarks: you":["don't"],"remember that":["the","the"],"remember there":["is"],"remind myself.":["I"],"reminded me":["of"],"reminds me":["of"],"removal to":["make"],"removals to":["do,"],"remove ALL":["non-alphanumerics"],"remove a":["lot","grade","leading","debug"],"remove all":["whitespaces.","whitespace"],"remove as":["much"],"remove chars,":["but"],"remove is":["already"],"remove lines":["31--34"],"remove one":["call"],"remove or":["rename"],"remove punctuation":["then","in","is"],"remove punctuation.":["It"],"remove that":["need?"],"remove the":["None-check...","property.","`self`","punctuations?","line","`import","len()","`for`.","now"],"remove trailing":["beginning"],"remove unused":["`_is_statement`"],"remove values":["that"],"remove your":["`re.sub`"],"removeAll() function":["is"],"removed a":["superfluous"],"removed altogether.":["Not"],"removed boilerplate":["code"],"removed from":["one","line"],"removed subclassing,":["it"],"removed the":["conversion","Counter.","\"continue\"."],"removed unnecessary":["check"],"removed? It":["looks"],"removes an":["arguably"],"removes the":["beginning"],"removes useless":["checks"],"removing a":["call,"],"removing dependency":["on"],"removing it":["causes"],"removing punctuation)":["is"],"removing the":["duplication","things","duplicate"],"rename `char`":["to"],"rename `dna`":["to"],"rename it":["`_responses`)"],"rename or":["change"],"rename them":["to"],"renamed as":["`_lower`"],"renamed the":["variable","`clean_phrase`","method"],"renamed to":["Phrase)","be"],"renaming `str_is_upper`":["to"],"rendering lines":["3"],"reorder the":["predicates","order","if"],"reordering will":["cause"],"repeat cleaning":["up"],"repeat it":["each"],"repeat of":["the"],"repeat the":["computations"],"repeated code.":["Will"],"repeatedly processing":["the"],"repeating the":["'silent'"],"repeating what":["code"],"repetition (e.g.":["between"],"repetition in":["NUCLEOTIDES?","`NUCLEOTIDES`?"],"repetition of":["response"],"repetition until":["I"],"repetition while":["keeping"],"repetition you":["could"],"repetition. I":["try"],"repetition. Perhaps":["you"],"repetitive code":["in"],"rephrase this":["simply"],"replace T":["with"],"replace `if":["(cond):`"],"replace `len(message)":["=="],"replace `wordcounter":["="],"replace again":["and"],"replace both":["tests)"],"replace in":["the","line"],"replace is":["probably"],"replace it":["with"],"replace lines":["12-14"],"replace method":["fails,","in"],"replace one":["with"],"replace only":["uracil"],"replace reduce,":["but"],"replace static":["method"],"replace the":["`self.RNA_MAP.get(char)","double","composition","three","(modulus,"],"replace what":["needs"],"replace your":["logic","code"],"replace. Not":["sure"],"replaced `.replace`":["with"],"replaced by":["extracting","the","a","a","either","`\\D`.","a"],"replaced inline.":["Added"],"replaced it":["with","with:"],"replaced the":["array","variable","stdlib"],"replaced with":["a","`Fine.","`Fine.","`if`","`filter()`"],"replacement by":["denoting"],"replacement function":["using"],"replacement of":["T"],"replacement, it":["would"],"replacements /":["removals"],"replacements. Maybe":["mapping"],"replacing 'U'":["and"],"replacing T's":["with"],"replacing `response`":["with"],"replacing a":["`T`"],"replacing all":["'T's","occurrences"],"replacing methods":["with"],"replacing the":["comments","second","THYMIDINE?"],"replacing with":["\"U\","],"replay =":["'Whatever.'"],"replies in":["them,"],"replies live":["in"],"replies to":["shouting,"],"replies were":["complicated"],"reply \"chill":["out...\"."],"reply =":["'Woah,","'Sure.'","'Fine."],"reply `Whatever`":["instead"],"repository and":["trying"],"repository of":["exercism.io"],"represent a":["phrase","larger"],"represent an":["exchange"],"represent nucleotides,":["the"],"represent the":["dna"],"represent when":["Bob's"],"represent word,":["how"],"represent? Could":["that"],"representation as":["string","string"],"representation of":["an","the","the","an","the","the"],"representation to":["it","a"],"representation without":["recombining"],"representation) in":["directly"],"representation, and":["gives"],"representation. Nobody":["form"],"representations (the":["lowercase"],"representations in":["`FormattedWord.__init__`,"],"represented the":["same"],"representing a":["DNA"],"representing the":["message"],"represents Bob":["AND"],"represents DNA":["but","but"],"reqs defined":["in"],"request input":["really"],"require a":["temporary","`DNA`"],"require both":["that"],"require changing":["the"],"require comment":["and"],"require keeping":["track"],"require parens,":["and"],"require such":["sophisticated"],"require that":["a"],"require the":["\"if/elif.../else\"","`DNA`","code"],"required (and":["you"],"required any":["more"],"required but":["the"],"required by":["the","the","the","test","the"],"required checks.":["And"],"required functionality":["can"],"required in":["python.","the","the"],"required interface.":["I"],"required methods.":["A"],"required more":["complex"],"required one":["?"],"required order":["and","and"],"required to":["make","document","translate"],"required) and":["`is_shout`,"],"required? Of":["cause"],"requirement or":["edge"],"requirement to":["allow"],"requirements I":["used"],"requirements and":["more"],"requirements change,":["you"],"requirements were":["somewhat"],"requirements would":["be"],"requirements* (that":["do"],"requires is":["to"],"requires more":["processing","thinking"],"requires new":["contributors"],"requires no":["more"],"requires rarely":["used"],"requires subclassing":["(hint:"],"requires that":["parameter"],"requires), but":["you"],"requires. For":["learning,"],"requires. shouting":["parsed"],"requiring more":["knowledge"],"requried methods":["from"],"rerun the":["whole"],"reserved exclusively":["for"],"reserved for":["classes.","classes","classes","class","special","class","class","special","class","the"],"resetting it":["later"],"resetting so":["one"],"resistant to":["changes."],"resolution mechanism":["will","will"],"resolve statement":["is"],"resolve to":["the","a"],"resond_to functions":["directly?"],"resort to":["double","them"],"resorting to":["-","the","some","some","`getattr`"],"respect the":["specs","specs","80"],"respect to":["this."],"respectful of":["each"],"respects the":["specs."],"resplit... Can":["you"],"respond differently":["to"],"respond how":["you"],"respond in":["a","a","a","a"],"respond to":["the","an","anything"],"respond to.":["By"],"respond, even":["though"],"respond. My":["Python-fu"],"responders public?":["Would"],"responds to":["interrobangs?","interrobangs?","shouting'","questions'","statements'","silence'"],"responsability of":["the"],"responsability to":["ensure","ensure","not"],"response (for":["example,"],"response =":["r[1]"],"response at":["roughly"],"response behavior?":["If"],"response compared":["to"],"response constants.":["Helper"],"response for":["each"],"response functions":["multiple"],"response in":["the","the","self.Responses:`)","names."],"response into":["a"],"response is":["given?","separated","\"Fine,","a","appropriate","overly"],"response it":["is"],"response labels":["make"],"response should":["contain"],"response so":["it's"],"response strings":["together"],"response texts":["in"],"response than":["one"],"response to":["a"],"response variable,":["because"],"response will":["depend"],"response)` in":["the"],"response, and":["therefore"],"response? Replacing":["what"],"response? Statement":["doesn't"],"response`, but":["I"],"responses =":["[(is_silent,"],"responses ```":["and"],"responses a":["subclass"],"responses and":["one"],"responses appear":["in"],"responses are":["well-known,","very","in","exceptional.","associated"],"responses at":["the"],"responses for":["each"],"responses functions":["and"],"responses in":["a","one","one"],"responses later":["without"],"responses lined":["up"],"responses list":["?"],"responses or":["logic"],"responses should":["be"],"responses to":["different","the","avoid"],"responses with":["my"],"responses, but":["if"],"responses, how":["about"],"responses. A":["solution"],"responses. Also,":["I"],"responses. Now":["for"],"responses. Per":["the"],"responses. There's":["no"],"responsibilities -":["the"],"responsibilities of":["main"],"responsibilities. But":["definitely"],"responsibilities. I":["did"],"responsibility -":["for"],"responsibility principle](http://en.wikipedia.org/wiki/Single_responsibility_principle),":["some"],"responsibility would":["fall"],"responsible for":["the","the","finding","dealing","determining","determining","passing"],"responsible future-proof":["coding,"],"responsible gathering":["input,"],"responsible to":["produce"],"rest lower":["case.)"],"rest of":["the","the","the","the","your"],"rest seem":["more"],"rest) doesn't":["dependent"],"rest, you":["should"],"restricted alphabet,":["so"],"restricted library":["section."],"restricted to":["Bob."],"restriction, it's":["almost"],"restructuring it":["in"],"resuability and":["maintainability"],"resubmit with":["the"],"resubmitting the":["previous"],"result (ie":["`anagram_instance.source`"],"result (no":["change"],"result -":["but","that's"],"result =":["bar","foo","baz"],"result and":["not"],"result from":["the"],"result in":["each"],"result is":["quite","the","after","safe"],"result of":["transforming","that","the","`to_rna`","future"],"result on":["first"],"result pairs)":["from"],"result right":["away,"],"result though":["so"],"result to":["a","avoid","get","a"],"result twice":["and"],"result will":["as"],"result would":["be"],"result you":["explicitly"],"result, so":["this"],"result, with":["the"],"result, you":["could"],"result. But":["in"],"result. For-loop":["with"],"result. How":["would"],"resulting DFA":["by"],"results directly,":["preventing"],"results of":["an"],"results than":["comparing"],"results, you":["have"],"retain correct":["order"],"rethink the":["order"],"retrospect I":["think"],"retrospect, I":["probably"],"return \"Fine.":["Be","Be","Be","Be","Be","Be","Be"],"return \"Whatever.\"?":["That"],"return \"Whoah,":["are"],"return \"Woah,":["chill","chill","chill","chill","chill"],"return ''.join(self.RNA_MAP.get(char)":["or"],"return 'Fine.":["Be","Be","Be","Be","Be"],"return 'Fine...',":["else"],"return 'Woah,":["chill","chill","chill","chill"],"return 0":["instead"],"return A":["elif"],"return B":["elif"],"return C":["]"],"return False":["because"],"return False...":["couldn't"],"return False`":["is"],"return MethodDispatcher(self._responses(message),":["self._neutral_response).dispatch()"],"return True":["if","else","or","if","else:"],"return True,":["for"],"return `\"Fine.":["Be"],"return `\"Whatever.\"`).":["The"],"return `''`":["when"],"return `False`":["(see"],"return `None`":["if"],"return `None`.":["An"],"return `RNA(self.replace(\"T\",":["\"U\"))`"],"return `True`":["or","or"],"return ```":["final_response"],"return a":["set","boolean","constant","dict,","dictionary.","`None`.","string,","string.","boolean,"],"return already":["breaks","breaks"],"return an":["empty","RNA","invalid"],"return angle":["yet."],"return anything,":["so"],"return as":["soon","specific"],"return at":["the","the"],"return bool(re.match('^([^a-z]+)$',":["self.sentence))```"],"return dna.replace(\"T\",":["\"U\")"],"return early":[":)","here?","here.","here.","or"],"return either":["True"],"return false":["for"],"return from":["a","each"],"return ifilter(lambda":["x:"],"return in":["similar"],"return instantly?":["Also"],"return is":["clearer."],"return it":["in"],"return len(msg.strip())":["=="],"return len(s)":["=="],"return len(self.greeting.strip())":["=="],"return message[-1]":["=="],"return msg":["===","===","=="],"return multiple":["characters."],"return not":["message","input.strip()"],"return on":["the"],"return once":["from"],"return phrase.translate(trans_table,":["punctuation).lower()"],"return plain":["dictionary"],"return points,":["depending"],"return re.search('[abcdefghijklmnopqrstuvwxyz]',":["self.sentence)"],"return results":["directly,"],"return s[-1]":["=="],"return self._NOCONTENT":["in"],"return self._something()`":["that"],"return self.sequence.replace('T',":["'U')"],"return self.y":["%"],"return some_answer\"":["thing"],"return statement":["shouldn't","was","in","on","in","to","at","is","will"],"return statement.":["Without","Also"],"return statement](http://stackoverflow.com/questions/36707/should-a-function-have-only-one-return-statement),":["I'd"],"return statements":["should","that","on","but","are","on","makes","does"],"return statements**.":["And"],"return statements,":["but"],"return statements.":["But","If","i'm"],"return str":["!="],"return straight":["from"],"return style":["though"],"return super(Bob,":["self).hey(message);"],"return that":["at","result,"],"return the":["result","result","appropriate","evaluated","boolean","counter","wordcount","answer","result","result","correct","value","expression?","tested"],"return true":["for","for"],"return type":["is"],"return unless":["you"],"return value":["as","of"],"return value`":["chain","chain","pattern","code"],"return values":["I"],"return values).":["You"],"return what":["you"],"return when":["`key"],"return words.strip()":["=="],"return words[-1:]":["=="],"return would":["be"],"return\", but":["maybe"],"return, I'd":["probably"],"return, at":["the"],"return, controlled":["by"],"return. Added":["case"],"return. I":["like"],"return: I":["prefer"],"returned a":["list"],"returned as":["the"],"returned by":["`word_count`"],"returned even":["if"],"returned if":["the","`s`"],"returned to":["the","it","it","it"],"returned value":["if"],"returned, then":["why"],"returning \"None\"":["would"],"returning False":["when"],"returning False,":["you"],"returning `Counter`.":["Should"],"returning a":["value","_public_","public","constant","`Counter`:","negative"],"returning at":["the"],"returning constant":["strings"],"returning early":["(in","looks"],"returning for":["each"],"returning from":["them.","the"],"returning in":["each","each"],"returning it":["at"],"returning it,":["but"],"returning on":["every","each"],"returning once":["at"],"returning result":["-"],"returning right":["away,"],"returning the":["appropriate","string?"],"returning them":["may"],"returning, it'll":["clean"],"returns 'Sure.'":["when"],"returns (which":["I"],"returns None":["and"],"returns `0`.":["Thus,"],"returns `False`":["if"],"returns `True`":["to","if"],"returns `true`":["if"],"returns a":["list.","constant","string.","datatype","boolean.","copy","list"],"returns an":["enum.","object"],"returns another":["string."],"returns anyway,":["but"],"returns are":["a","equally","pythonic","OK"],"returns as":["signaling","an"],"returns exactly":["what"],"returns in":["the"],"returns instead":["of"],"returns make":["me"],"returns match":["objects"],"returns on":["the"],"returns or":["setting"],"returns so":["the"],"returns that":["somebody"],"returns the":["boolean"],"returns true":["if"],"returns, I":["just"],"returns, you":["do","do"],"returns. Doesn't":["make"],"returns. Or":["you"],"returns: Someone":["left"],"returns](http://exercism.io/submissions/52101ce59701fa85bd000026) a":["while"],"returns](http://exercism.io/submissions/52101ce59701fa85bd000026) on":["one"],"returns](http://exercism.io/submissions/52101ce59701fa85bd000026) that":["I"],"reusability, the":["first"],"reusable functions.":["Also,"],"reusable outside":["`Bob`."],"reusable, they're":["not"],"reuse the":["same","Sentence","already","other.","information"],"reuse, I'm":["not"],"reused code":["and"],"reused elsewhere,":["parts"],"reusing instance":["attribute"],"reusing those":["regular"],"reusing variable":["names."],"rev right":["now"],"revealing name.":["In"],"reveals that":["you're"],"reverse indexes)":["-"],"reversed call":["to"],"reverted to":["that,"],"review go":["down"],"review of":["my"],"review others'":["submissions"],"review! I":["wasn't"],"review. Now":["the"],"review. Originally,":["I"],"reviewed a":["lot"],"reviewers, because":["we're"],"reviewers. This":["gives"],"reviewing code":["here"],"revision incorporating":["your"],"revision was":["to"],"revision, thanks":["for"],"revision, that":["was"],"revision. Also":["removed"],"revision. Some":["of"],"revisions if":["the"],"revisit it":["later."],"rework! I":["like"],"rewrite all":["your"],"rewrite my":["code."],"rewrite the":["example"],"rewrite this":["to","as:","to"],"rewrite to":["make"],"rewriting if":["the"],"rid of":["the","`elif`","the","the","the","spaghetti","the","`elif/else`","`elif/else`","the","the","the","the","the","the","the","iteration.","whitespaces","whitespaces","a","a","the","the","the","the","them.","the","all","3","more","`word_list`","lines","the","it)","unneeded","this,","the","the","the","the","it,","the","punctuation"],"riddles, I'd":["call"],"rif of":["both"],"right -":["and"],"right I":["could"],"right about":["the","the","the"],"right after":["class,"],"right amount":["of"],"right away":["what"],"right away,":["then","eliminating"],"right balance":["between"],"right concepts)":["and"],"right direction,":["but"],"right for":["you."],"right hand":["side.","side"],"right in":["the","doing","pointing"],"right it":["doesn't"],"right level":["of"],"right names":["on"],"right now":["they",":)"],"right of":["the"],"right off":["the"],"right regarding":["the"],"right regex":["remove"],"right that":["it"],"right thing":["to"],"right thing.":["I","`if"],"right to":["me..."],"right type":["-"],"right way":["to","to","to"],"right, a":["method"],"right, and":["I'm"],"right, but":["better.","I'm","hopefully"],"right, doing":["it"],"right, it's":["unnecessary"],"right, my":["bad."],"right, see":["where"],"right, that":["does"],"right, the":["Statement"],"right. As":["to"],"right. But":["it's"],"right. Didn't":["know"],"right. I":["should"],"right. It":["reads"],"right. Looks":["better."],"right. That":["would"],"right? I":["personally"],"right? If":["I"],"right? Like":["we"],"right? Thanks":["a"],"rigid mechanism.":["And"],"risk of":["name","repeating"],"rna in":["dna_nucleotides_to_rna)","a"],"rna nucleotides":["could"],"rna to":["dna"],"rna transcription.":["Using"],"rna transform.":["It"],"rna translation.":["Isn't"],"rna: in":["that"],"robot =":["Robot()"],"robot controller,":["and"],"robot is":["constructed"],"robot name":["longer."],"robot's name":["changes."],"robots and":["not"],"robots are":["built"],"robots because":["that"],"robots in":["circulation"],"robots is":["always"],"robots nears":["26*26*1000,"],"robots. This":["could"],"robust and":["more","recommended"],"robust enough":["not"],"robust solution":["is"],"robust when":["used"],"robust, reliable,":["maintainable"],"roll slightly":["different"],"roman numerals":["(e.g.,"],"room to":["comment."],"rooting for":["you."],"roughly the":["same","same","same"],"roundabout ways":["to"],"routine (msg":["="],"routine at":["the"],"routine, and":["it"],"routine, because":["DNA"],"routine, the":["intent"],"routine. Better":["would"],"routines (``is_shouting``,":["``is_interrogative``,"],"routines as":["well."],"row in":["`is_anagram_of`."],"rsslidnphy. I":["submitted"],"ruby we":["have"],"ruby-doc project":["which"],"rubyisms and":["otherwise","otherwise"],"rubyist who":["hasn't","hasn't"],"rule class":["or"],"rule in":["Python","the"],"rule) and":["therefore"],"rule, we":["avoid"],"rules =":["[(lambda"],"rules are":["necessary"],"rules but":["you"],"rules for":["single"],"rules given":["in"],"rules hardcoded":["in"],"rules in":["the"],"rules of":["when"],"rules to":["be"],"rules were":["to"],"rules will":["already"],"rules would":["improve"],"rules, changing":["the"],"rules, overly":["simplified"],"run `help(alphagram)`),":["whereas"],"run a":["pep8"],"run as":["O(n)."],"run by":["itself,"],"run faster)":["by"],"run faster,":["O(1)."],"run test":["by"],"run the":["regex","regex"],"run them":["and"],"run time":["errors"],"run your":["python","code"],"runnable on":["python"],"running `is_question`":["on"],"running `pep8`":["on"],"running fewer":["tests"],"rusty skills--at":["least"],"s and":["took","s.lower()"],"s for":["that"],"s in":["word"],"s steps!":["I"],"s, but":["actually"],"s, m,":["l?"],"s.isalnum())`. This":["is"],"s.isupper():` is":["so"],"s.lower() !=":["s`"],"s.strip() is":["something"],"s.strip():` because":["that"],"s.strip()`. There's":["always"],"s/standarize/standardize/g, no":["???"],"s:` feels":["more"],"s[-1] ==":["'?':","'?'"],"s` instead":["of"],"s` is":["not"],"sacrifice of":["requiring"],"safe thing":["to"],"safe to":["mutate."],"safely access":["the"],"safely assume":["that"],"safely get":["rid","rid","rid"],"safer for":["empty"],"safer to":["use"],"safer way":["to"],"safety checks":["down"],"said (Python":["strings"],"said I":["had","agree"],"said `Bob`":["had"],"said as":["```not"],"said in":["iteration"],"said is":["spot"],"said or":["said.isspace():"],"said that":["alphagram"],"said to":["make","Bob"],"said “because":["it"],"said, I":["don't"],"said, `len`":["works"],"said, all":["fairly"],"said, both":["these"],"said, it's":["your"],"said, the":["tests"],"said, this":["is","is"],"said, your":["code"],"said. What":["you've"],"said.strip() is":["confusing"],"said.upper` (`isupper`":["is"],"said` might":["be"],"sake of":["YAGNI.","being","this","simplicity.","it:"],"salt, and":["assume"],"same \"Fine.":["Be"],"same \"changes\".":["Good"],"same @paxton":["'s"],"same `greeting`":["to"],"same advice":["to"],"same alphagram":["(see"],"same amount":["of"],"same as":["`msg.is_silent()`.","above,","`message.isspace()`,","`\\W`.","just","Python","'not"],"same attribute":["can"],"same attribute.":["Not"],"same cache":["for"],"same call":["is"],"same categories":["but"],"same check":["in"],"same class":["is"],"same code":["with","with","I"],"same concept":["exists"],"same conditional,":["you"],"same count":["data"],"same data":["so"],"same data,":["so"],"same data.":["In"],"same exact":["regexp"],"same exercise":["-"],"same exercise.":["Cheers!"],"same expression":["could"],"same feedback":["on"],"same for":["a","question","questions,","every","consistency.","consistency."],"same if":["I"],"same instance":["attributes","attributes"],"same instance)":["can"],"same issue":["and"],"same job.":["I","I"],"same kind":["of"],"same level":["of"],"same level.":["If"],"same line":["as","with","as","as","is"],"same line)":["are"],"same line,":["as","as"],"same line?":["What's"],"same method":["?"],"same module":["but"],"same name":["of","(for"],"same number":["of"],"same object,":["like"],"same order":["as"],"same parameters,":["don't"],"same parameters.":["Maybe"],"same problem,":["where"],"same problems":["you"],"same reaction.":["I"],"same reason":["you"],"same result":["(ie"],"same result,":["with"],"same task,":["but"],"same tests":["file,"],"same thing":["as","using","as"],"same time":["modeling","(nlogn","-","the","it's"],"same time,":["I","I","i'm"],"same time.":["In"],"same way":["in","but","as","I"],"same way.":["The"],"same when":["checking"],"same with":["identifying"],"same without":["the"],"same, but":["now","you"],"same, do":["you"],"same, it":["won't"],"same, with":["the"],"same. I":["just","just"],"same. Your":["code"],"sandbox experimentation":["and"],"sandpit in":["which"],"sane goal,":["but"],"sane state":["so"],"sanitization (in":["this"],"sanitization (the":["test"],"sanitization /":["count"],"sanitization a":["bit"],"sanitization rather":["than"],"sanitization so":["predicates"],"sanitization would":["look"],"sanitization\" part,":["which"],"sanitization, wouldn't":["that"],"sanitize `message`":["in"],"sanitize `text`":["in"],"sanitized the":["input"],"sanitizing of":["`greeting`"],"sanity check":["to"],"sanity checking":["and"],"satisfies the":["conditional."],"satisfy the":["tests,"],"satisfy. If":["I"],"satisfying than":["in"],"satisfying\". Why":["not"],"save a":["reader"],"save some":["computation"],"save space,":["eg:"],"save tally{}":["as"],"save you":["an","the"],"saved a":["lot"],"saves a":["lot"],"saves some":["typing..."],"saw a":["place"],"saw it":["while","differently."],"saw no":["point"],"saw other":["codes,"],"saw some":["people"],"saw that":["method"],"saw too":["many"],"saw: there's":["a"],"say \"":["\","],"say \"Whatever.\"":["here."],"say \"implementation\")":["attributes"],"say \"strand\"":["which"],"say Bob":["is"],"say `Bob.__foo`":["instead"],"say `if":["text"],"say `self._replies`":["instead"],"say at":["the"],"say for":["example"],"say is":["a","you"],"say it's":["invalid,","useful"],"say right":["away"],"say that":["no","I","you"],"say to":["bob,"],"say\" line.":["It's"],"say() are":["functions"],"say, jbasalone's":["single"],"say, with":["partial"],"saying \"OK,":["use"],"saying ```message.strip()":["=="],"saying a":["top-level"],"saying about":["the"],"saying and":["will"],"saying anything`":["which"],"saying in":["(1)."],"saying something":["to"],"saying something,":["so"],"saying that":["double-underscore"],"says \"":["Bob"],"says \"for":["anything"],"says a":["lot"],"says if":["a"],"says it's":["ok"],"says not":["to"],"says on":["the"],"says separate":["classes"],"says something":["about"],"says that":["an"],"says two":["blank"],"says what":["each","it"],"says you":["should"],"says, your":["code"],"says](http://www.python.org/dev/peps/pep-0008/#indentation) 4":["spaces"],"scalable, lazy":["and"],"scanning for":["groups"],"scenario can":["be"],"scenario, and":["this"],"scenarios a":["double"],"scenarios in":["order"],"scenarios where":["I"],"scenarios) but":["it"],"scenarios. CamelCased":["is"],"scheme for":["the"],"scheme is":["very"],"scheme. FWIW":["both"],"school.db\"). The":["additionnal"],"schools of":["thought"],"science and":["the"],"science application":["that"],"science is":["entirely"],"science language":["inside"],"scientist wants":["to"],"scientists and":["it's"],"scope of":["wildcard"],"score ```":["is"],"scratch that,":["sorry,"],"screaming and":["questions"],"script that":["does"],"script to":["be"],"script you":["just"],"script? `if":["__name__"],"scripting language":["such"],"scripts with":["a"],"scroll, in":["a"],"seams as":["concept"],"seams like":["some"],"seams that":["DNA"],"search() then":["```^.*\\?$```"],"searched for":["all"],"searches at":["the"],"searching for":["the"],"searching for.":["For"],"searching through":["here"],"second Phrase":["class"],"second ``p.area_code()``":["would"],"second and":["third","third"],"second approach":["where"],"second argument":["being"],"second case,":["IMHO"],"second code":["snippet"],"second concern":["is"],"second condition":["\"text"],"second conditional":["too:"],"second elif":["is"],"second function":["defined."],"second if":["statement"],"second is":["responsible"],"second isn't.":["I"],"second iteration.":["This","Thank"],"second look":["at"],"second nature":["to"],"second nitpick":["I've"],"second part":["(what"],"second predicate":["on"],"second question":["(\"why"],"second return":["statement"],"second rule)":["and"],"second should":["be"],"second splits":["words."],"second statement":["is"],"second template":["variable"],"second try":["at"],"second way,":["you"],"secondly to":["ensure"],"seconds before":["my"],"seconds instead":["of"],"section 9.4":["in"],"section is":["called"],"section of":["[functional-HOWTO][1]."],"section. It":["was"],"sections might":["be"],"see @wilma":["[version](http://exercism.io/anntzer/python/rna-transcription)."],"see Ned":["Batchelder"],"see Python":["Style"],"see [PEP":["257"],"see `classmethod`s":["used"],"see a":["problem","violation.","variable","reason","tradeoff","function","reason"],"see an":["`elif`"],"see any":["other","reason","pyflakes/PEP8","compelling"],"see are,":["would"],"see early":["returns"],"see how":["it","this","it","it","to","much","it","they","using","other","I","I","it","it"],"see http://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables":["."],"see if":["you","there's","it","it","I","I","the","the","the","there's","you","that","you"],"see in":["the","the"],"see is":["that"],"see it":["here.","as","to","now,","that"],"see much":["point","point"],"see next":["revision."],"see not":["only"],"see now":["that"],"see now,":["the"],"see other":["solutions?"],"see our":["dicussion"],"see some":["benchmarks.","indication","super"],"see someone":["else"],"see something":["more","I"],"see splitting":["on"],"see test":["case"],"see that":["Python","somehow","there's","that","it","would","you"],"see the":["point","double-underscore","appeal","innards)","point","point","logic","only","benefit"],"see them":["being"],"see there":["are"],"see these":["as"],"see this":["3","works."],"see those":["concepts","concepts"],"see unnecessary":["on"],"see use":["of"],"see variable":["initialization"],"see what":["does","you're","they","you","the","it","is","you"],"see where":["there","`filter`"],"see why":["the","you"],"see you":["kept","have","moved","FP","point"],"see your":["point.","decomposition","previous","submission"],"see. However,":["this"],"see. Personally,":["I"],"see. When":["no"],"seeing @luis":["submission"],"seeing `filter`":["being"],"seem Pythonic":["to"],"seem better,":["this"],"seem like":["Bob","it","a","much"],"seem more":["readable","useful."],"seem natural,":["queries"],"seem odd":["to"],"seem readable":["(to"],"seem sort":["of"],"seem to":["have","have","be","handle","help.","be","imply","be","be","be","capture","make","follow","match","need"],"seem unfamiliar":["to"],"seem very":["natural"],"seemed (to":["me)"],"seemed appropriate":["to"],"seemed cleaner":["to"],"seemed even":["less"],"seemed like":["unnecessarily","needless","a","a","the","they","they","a"],"seemed natural":["place"],"seemed superficial.":["But"],"seemed to":["work","be"],"seems a":["bit","too","little","bit","bit","bit"],"seems better":["than"],"seems by":["far"],"seems complex":["-"],"seems great,":["but"],"seems higher":["than"],"seems inefficient":["though,"],"seems it's":["not"],"seems kind":["of"],"seems kinda":["hacky,"],"seems like":["an","a","the","a","overkill","an","dangerous","these","a","it"],"seems more":["readable"],"seems overkill":["in"],"seems perfectly":["reasonable"],"seems pointless.":["My"],"seems rather":["pointless","unnecessary."],"seems reasonable":["to"],"seems slightly":["different"],"seems somewhat":["not"],"seems that":["```"],"seems to":["be","be","me","be","show","be","me","be","be","me","be","simplify","me","have","work","also","be","be","be","me","generic","be","be","be"],"seems too":["complicated"],"seen `String#translate`?":["Could"],"seen `return":["not`"],"seen `s.strip()":["=="],"seen `split`":["as"],"seen a":["fair","for"],"seen any":["in"],"seen as":["a"],"seen in":["JS"],"seen it":["somewhere.","before."],"seen other":["solutions"],"seen scenarios":["where"],"seen single":["tick"],"seen some":["weird","boilerplate(?)"],"seen someone":["do"],"seen this":["without","pattern","in"],"seen, there":["is"],"segregated them,":["and"],"seldom use,":["and","and"],"seldom used":["because"],"select the":["largest"],"self (also":["23"],"self as":["the"],"self documenting":["-","as","code","code"],"self documenting.":["However"],"self explanatory.":["Only"],"self more":["leverage"],"self through":["with"],"self to":["a"],"self unused.":["The"],"self) you":["can"],"self, or":["even"],"self, which":["is"],"self-contained and":["self-describing."],"self-deprecating kind":["of"],"self-describing. What":["do"],"self-describing; i.e.":["make"],"self-descriptive if":["they"],"self-descriptive, which":["is"],"self-documenting (intent":["would"],"self-documenting to":["name","name"],"self-documenting. I":["also"],"self-documenting. You":["use"],"self-documenting.. It":["makes"],"self-documents, that":["message"],"self-explanatory and":["doesn't"],"self-explanatory here,":["but"],"self-explanatory member":["function."],"self-explanatory. Chained":["if-elif-else"],"self-nitpick, that":["normally"],"self... still":["that's"],"self.PARAMETERS[\"U\"] is":["the"],"self._NOCONTENT =":["\"Fine."],"self._NOCONTENT in":["the"],"self.__query[-1] ==":["'?'`."],"self._actions =":["actions"],"self._checkForNoContent(message)` without":["the"],"self._default =":["default"],"self._message_is_shouting():\", the":["\"#shout\""],"self._neutral_response).dispatch() ```,":["it"],"self._neutral_response).dispatch()` one-liner":["works"],"self._raw ==":["other._raw`"],"self._something()` that":["could"],"self._sorted ==":["other._sorted`)"],"self.answer =":["answer"],"self.assertEqual({2: {\"James\",":["\"Blair\",","\"Blair\",","\"Blair\",","\"Blair\","],"self.assertRaises(AttributeError, setattr,":["self.school,"],"self.blah here,":["just"],"self.bob.hey(\"It's OK":["if"],"self.bob.hey(\"Let's go":["make"],"self.bob.hey('1, 2,":["3')","3')"],"self.bob.hey('Ending with":["?"],"self.bob.hey('WHAT THE":["HELL"],"self.contains_uppercase(message) is":["redundant"],"self.count(n) for":["n"],"self.count(nucleotide) for":["nucleotide"],"self.isquestion =":["msg.endsWith(\"?\")"],"self.isshout =":["msg.isupper()"],"self.issilence =":["msg"],"self.match =":["predicate"],"self.message =":["message"],"self.msg =":["msg"],"self.phrase =":["phrase"],"self.phrase if":["ch.isalnum()"],"self.phrase.strip() ==":["''`"],"self.phrase_text`. For":["the"],"self.phrase` part":["in"],"self.responders if":["r.answers(message)).response()```"],"self.school, \"db\",":["dict())"],"self.school.db[2] =":["set()"],"self.sentence or":["self.sentence.isspace()`"],"self.sentence) ==":["None```"],"self.sentence.isspace()` to":["check"],"self.sequence =":["value"],"self.sequence is":["a"],"self.sequence: return":["''`?"],"self.sequence` evaluates":["to"],"self.sequence` only":["checks"],"self.silent() in":["the"],"self.statement =":["statement"],"self.statement is":["None:"],"self.statement.strip() returns":["None"],"self.strand is":["a"],"self.string or":["self.string.isspace()`."],"self.string.islower()` is":["redundant."],"self.wordcounter:\" is":["to"],"self.words =":["re.findall(r\"[\\w']+\","],"self.words['']` in":["line"],"self.y %":["400","100"],"selfs! They're":["quite"],"semantic in":["this"],"semantic mapping":["between"],"semantically accurate":["in"],"semantically checks":["with"],"semantically, especially":["since"],"semantics, I":["don't"],"semicolon has":["got"],"semicolon in":["the"],"sence, but":["here"],"send `None`":["as"],"sense (though":["writing"],"sense -":["don't"],"sense I":["used"],"sense but":["you"],"sense by":["itself."],"sense if":["you","you","it","the","you"],"sense in":["the","the","any"],"sense is":["that"],"sense move":["them"],"sense of":["this","this"],"sense outside":["of"],"sense to":["me.","me,","at","me","return","split","make","me,","strip","break","have","move","strip","me.","generate"],"sense were":["the"],"sense when":["you"],"sense). In":["that"],"sense, and":["avoid","I","response"],"sense, but":["i"],"sense, especially":["since"],"sense, here.":["Also,"],"sense, thanks.":["I"],"sense--could always":["use"],"sense. Here":["comes"],"sense. I":["would"],"sense. I've":["gone"],"sense. Just":["so"],"sense. So":["it"],"sense; it's":["not"],"sense? Can't":["we"],"senses and":["looked"],"sensible level":["of"],"sensible levels":["of"],"sensible place":["to"],"sensible way":["is"],"sensitive to":["sentences."],"sent in":["to"],"sent me":["down"],"sent messages":["to"],"senteces. My":["'check'"],"sentence ==":["\"\":","\"\"`"],"sentence is":["a","rather","all"],"sentence or":["if"],"sentence, there's":["definitely"],"sentence[-1] ==":["\"?\""],"sentence` is":["also"],"sentence` should":["definetely"],"sentences instead":["of"],"sentences outside":["of","of"],"sentences) is":["a"],"sentences, each":["one"],"sentences. An":["alternative"],"separate [Value":["Object](http://c2.com/cgi/wiki?ValueObject)","Object](http://c2.com/cgi/wiki?ValueObject)"],"separate `if`":["clauses"],"separate cases":["for"],"separate class":["for","for"],"separate class,":["why","but"],"separate classes":["with","is"],"separate code":["and"],"separate concepts":["to"],"separate concrete":["class"],"separate from":["the"],"separate function":["as","or","for","for","with"],"separate functions":["to"],"separate functions,":["because"],"separate functions.":["Have"],"separate line.":["Please"],"separate lines":["and"],"separate method":["for","at","so","as"],"separate method,":["for","but"],"separate method.":["Somehow"],"separate methods":["impact","have","have","works","would","(or","would","like"],"separate methods?":["This","We","How","How"],"separate module":["at"],"separate module.":["Unfortunately,"],"separate named":["ones?"],"separate object":["seemed","([Value"],"separate object,":["because"],"separate out":["each"],"separate queries,":["it"],"separate tables":["(one"],"separate the":["interpretation","more"],"separate useful":["code"],"separate values":["but:"],"separate variables":["rather"],"separate, but":["I"],"separated by":["a","one"],"separated from":["the","Bob's","the"],"separated hey()":["from"],"separated in":["two"],"separated out":["the"],"separated the":["filter","implementation","various"],"separately is":["more"],"separately modulo":["100"],"separately, if":["I"],"separates concerns":["better."],"separates the":["things"],"separating `formulate_prioritised_reply()`":["from"],"separating out":["the"],"separating small":["bits"],"separating the":["tests","concerns","logic","last"],"separating things":["would"],"separation od":["concerns"],"separation of":["responsibilities.","semantically"],"separator as":["it"],"separator.join(strings) to":["be"],"seperate from":["response?"],"seperate functions,":["you"],"seperate module":["(e.g."],"seperate types":["for"],"seperate, but":["in"],"seperately if":["the"],"seperation of":["Bob"],"sequence (or":["list)"],"sequence -":["so"],"sequence and":["always"],"sequence as":["a","a"],"sequence back":["to"],"sequence being":["a"],"sequence gets":["huge"],"sequence initialization":["to"],"sequence is":["not","of"],"sequence is.":["I"],"sequence itself,":["and"],"sequence of":["tuples","'word'","spaces?","`Action`","steps,","individual","nucleotides"],"sequence string":["looking"],"sequence to":["a"],"sequence's length":["to"],"sequence, why":["not"],"sequence. For":["instance,"],"sequence.replace is":["essentially"],"sequences (lists,":["collections"],"sequences are":["false,"],"sequences of":["nucleotides"],"sequences to":["look"],"sequences when":["no"],"sequential lookup":["?"],"series of":["functions","checks?","function","words","builtin","if"],"seriously, a)":["nitpick"],"serves as":["namespace."],"serves to":["give"],"serving cached":["value"],"set `THYMIDINE":["="],"set a":["response","default","value"],"set all":["the"],"set and":["list"],"set any":["of"],"set back":["into"],"set by":["the"],"set default":["values"],"set defaults":["from"],"set difference":["since","operation"],"set encoding":["information?"],"set in":["stone","the","`__init__`."],"set instance":["variables"],"set intersection,":["but"],"set it":["instead"],"set membership":["operation"],"set of":["message","spaces","rules","conditionals.","requirements","free","conditions.","nucleotides.","patterns"],"set rawinput":["to"],"set the":["instance"],"set them":["on"],"set them.":["(Seems"],"set to":["public.","the"],"set up":["all","as","a"],"set you":["want"],"set, but":["now"],"set, you":["may"],"setattr(self, prop,":["value)"],"setattr, self.school,":["\"db\","],"sets and":["dictionaries)"],"sets in":["general"],"sets module":["has"],"sets the":["attribute"],"setter and":["a","getter"],"setter methods":["for"],"setter methods,":["it"],"setter. The":["phrase"],"setters since":["you"],"setting a":["variable"],"setting the":["response","response","instance","same","same","attribute"],"setting various":["extra"],"settings, so":["is"],"settle for":["this"],"settled on":["one"],"setup git":["repository"],"several '!'":["included"],"several different":["cases,"],"several functions":["to"],"several languages,":["and"],"several months":["of","of","of"],"several phrases.":["Is"],"several simpler":["ways"],"several things":["that"],"sexiest code":["I"],"shadowing Python's":["input"],"shadows the":["builtin"],"shape of":["enum"],"share the":["table"],"shave off":["a"],"shebang (#!)":["here,"],"shebang not":["necessary"],"sheer, hideous":["ugliness"],"shell :":["`\"A"],"shell and":["try","play","type"],"shell. In":["this"],"short and":["has","with","sweet.","obvious"],"short as":["a"],"short circuit":["the"],"short code,":["which"],"short docstring":["can"],"short enough":["to","to"],"short helper":["functions","methods."],"short names":["are"],"short of":["mentioning."],"short solution,":["but"],"short solution.":["As","I","Just"],"short they":["all"],"short too,":["but"],"short variable":["names."],"short version":["is"],"short, but":["I"],"short, readable":["code."],"short-circuit and":["return"],"short-circuit the":["call"],"short. And":["imho"],"short. I":["saw"],"short. Keep":["in"],"short. This":["is"],"short? Just":["to"],"shortcut for":["matching"],"shorten it":["by"],"shorten line":["23"],"shorten your":["is_exclamatory"],"shortened (and":["probably"],"shortened as":["`candidates`"],"shortening the":["code"],"shorter (but":["you"],"shorter (using":["just"],"shorter and":["cleaner","a","lets","more"],"shorter by":["exploiting"],"shorter form":["and"],"shorter if":["I'd"],"shorter solution":["would"],"shorter than":["80"],"shorter using":["some"],"shorter version":["is"],"shorter way,":["specially"],"shorter with":["the"],"shorter. I":["think"],"shortness of":["implementation."],"shot \"as":["is\","],"shot at":["nitpicking","it,"],"should I":["use?"],"should [inherit":["from","from"],"should `trimmed_phrase`":["really"],"should `zero_bottles`,":["`one_bottle`,"],"should add":["encoding"],"should alias":["`collections.Counter`"],"should also":["return","go","be","be"],"should always":["add"],"should arrive":["at"],"should at":["least"],"should avoid":["them","naming"],"should be":["declared","able","given","\"Whatever.\".","uppercase,","sufficient","able","closer","enough.","part","part","a","lowercase","on","all-caps).","part","public.","separated","part","triple-quoted","used","consistent.","treated","exposed","`all_lower_case_with_underscores`","constructed","useful","n","much","useful","declared","useful","part","separated","at","delimited","two","two","two","two","`return","'!'","more","useful","succinct","moved","\"all_lower_with_underscores\"","`Bob.responses`","preferred","`Bob`'s","overridden,","preferred","replaced","replaced","keep","all_lower_with_underscores","taken","static","the","an","set","the","avoided","as","\"all_lower_with_underscores\"","considered","considered","used","better","part","at","using","named","used","treated","(`log(len(s))`","docstring","there.","one","calculated","located","memoized,","faster","able","possible","one","considered","class","for","2","enough","class","clear","called","on","unnecessary?","just","handled"],"should be,":["right"],"should better":["naming"],"should both":["take"],"should care.":["From"],"should check":["addressing"],"should communicate":["what's"],"should consider":["using"],"should contain":["could"],"should cut":["down"],"should deal":["with","with"],"should definetely":["go"],"should definitly":["read"],"should do":["with","`message"],"should explicitly":["inherit"],"should extract":["the"],"should first":["fix"],"should flesh":["out"],"should fully":["comply"],"should generally":["be"],"should group":["them"],"should handle":["analysis"],"should have":["a","two","leading","a","an","one","passed","created","named","added","named"],"should have).":["I"],"should highlight":["it"],"should imho":["be"],"should include":["a","file"],"should inherit":["from","from"],"should just":["wait"],"should know":["more","about?"],"should look":["at","like.","into","into","into","at"],"should make":["the","your","sure","use","use","use","use","use","use","use","it","the"],"should mark":["helpers"],"should move":["the","helper"],"should name":["what","things"],"should never":["return"],"should not":["write","only","trigger","be","use","be","be"],"should only":["be","be","ensure","be"],"should pick":["up"],"should poke":["around"],"should probably":["read","allow","be","be","actually"],"should put":["the","them"],"should rather":["be"],"should read":["`Anagram('tan').match('ant","through"],"should really":["expect","only","be","be"],"should refer":["to"],"should remove":["unused"],"should replace":["static"],"should respond":["to"],"should return":["`\"Whatever.\"`).","the","\"Fine.","unless"],"should run":["your"],"should strip":["out"],"should take":["only","this","another","another"],"should treat":["it"],"should try":["to"],"should use":["the","`inputString","new","\"is","[str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper)","[str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper)","single","`word_list`","filtering","`message","new-style","new-style","new-style","new-style","new-style","data"],"should use.":["It"],"should worry":["about"],"should you":["get"],"should, but":["it"],"shoulders of":["those"],"shouldn't also":["have"],"shouldn't be":["in","bothered","in","using","part","a","exposed.","redefined","used"],"shouldn't care":["about","how"],"shouldn't change":["`Bob.hey`"],"shouldn't duplicate":["the"],"shouldn't happen":["in"],"shouldn't have":["done"],"shouldn't he":["use"],"shouldn't maintain":["invariants."],"shouldn't the":["method"],"shouldn't we":["discuss"],"shout are":["relegated"],"shout condition":["you","in"],"shout could":["use"],"shout so":["by"],"shout, if":["you"],"shout. I":["now"],"shouted are":["more"],"shouted or":["delivered"],"shouted questions":["than","should"],"shouting and":["statement"],"shouting by":["what"],"shouting check.":["Additional"],"shouting distinction":["is"],"shouting if":["all"],"shouting is":["not"],"shouting or":["questioning","question"],"shouting parsed":["first"],"shouting regexp":["matches"],"shouting will":["ever"],"shouting) the":["string"],"shouting, a":["question,"],"shouting, as":["would"],"shouting, questioning,":["and"],"shouting, questions":["etc."],"shouting, rest)":["doesn't"],"shouting. I":["believe"],"shouting. Look":["at"],"shouting. The":["initial"],"shouting. This":["thinking"],"shouts, not":["questions."],"shouty-question properly.":["apparently"],"show I":["need"],"show a":["mapping"],"show double":["ticks."],"show pretty":["clearly"],"show that":["line"],"show the":["connection"],"show what's":["going"],"showed that":["I"],"showing a":["table"],"shown more":["clearly?"],"shows its":["interface."],"shows that":["our","there","most"],"shows the":["intent"],"shows up":["alright"],"shrink to_dna":["to"],"side effects":["by","caused","in"],"side i'd":["say"],"side note":[":"],"side note,":["[PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations)"],"side note:":["if"],"side of":["lines"],"side, also":["why"],"side, having":["a"],"side-note about":["\"other"],"side. Moreover":["the"],"sides before":["explicitly"],"sides have":["positive"],"sides of":["assignment"],"sides? If":["you're"],"sight! This":["is"],"sign for":["named"],"sign of":["any"],"sign that":["the"],"signaling that":["the"],"signals any":["departure"],"signature is":["`Bob._is_silence`"],"signature shouldn't":["also"],"signature suggests":["that"],"significant in":["my"],"significantly faster":["than"],"significantly simplify":["`Phrase.word_count`","word"],"significantly slower":["than"],"signify internal":["use","use."],"signify non-public":["use."],"signify that":["it"],"signifying required":["interface."],"silence *has*":["to"],"silence check":["is"],"silence check.":["Also,"],"silence etc.":["I"],"silence exceptions":["like"],"silence in":["the"],"silence it's":["not"],"silence neither":["-"],"silence predicate":["in"],"silence test":["-","you"],"silence test,":["an"],"silence wasn't":["tested"],"silence with":["`isspace`."],"silence'). Defining":["additional"],"silence, and":["then","I"],"silence, because":["`None`","it"],"silence, shouting)":["the"],"silence, so":["silence"],"silence, the":["response"],"silence. For":["me"],"silence. It's":["generally"],"silencing the":["exception"],"silent --":["he's"],"silent definition.":["i.e."],"silent it":["should"],"silent labelled":["in"],"silent treatment":["or"],"silent, shouldn't":["the"],"similar fashion":["(if,"],"similar here":[";)"],"similar improvements":["there."],"similar in":["Ruby"],"similar names":["(put","?"],"similar names,":["and"],"similar problems":["with"],"similar result":["-"],"similar situations":["in"],"similar solution.":["Ultimately"],"similar solutions.":[":)","I"],"similar structures":["eg."],"similar to":["REPLIES,","what","a","\"string\",","what"],"simper and":["readable"],"simple \"if":["-&gt;"],"simple I":["can't"],"simple I'd":["get"],"simple `DNA.to_rna`":["implementation.","implementation."],"simple `for`":["loop"],"simple `not":["message"],"simple `replace`":["could"],"simple `self.greeting":["="],"simple `str`":["methods"],"simple `word.split()`":["for"],"simple and":["accurate","don't","to","clear","straightforward","readable","straight","self","straightforward,","well-understood."],"simple as":["possible.","this","this.","possible","this.","possible,","it"],"simple bot":["class,"],"simple case":["but","you"],"simple case,":["but"],"simple code":["that","with"],"simple code,":["but"],"simple code.":["`len(phrase)"],"simple comment":["next"],"simple decorator":["like:"],"simple enough":["that","that","to"],"simple example,":["but"],"simple expressions.":["In"],"simple for":["now."],"simple function":["because","would","that","that"],"simple function.":["There's"],"simple functions":["make"],"simple implementations":["into"],"simple indeed":[":)"],"simple iteration":["vs."],"simple method":["call"],"simple module":["level"],"simple one-liners":["and"],"simple plural":["form"],"simple problem.":["A"],"simple programs":["like"],"simple purpose":["and"],"simple regex":["would","with"],"simple regular":["collections"],"simple so":["didn't"],"simple solution":["seems"],"simple solution.":["I","Here","Just"],"simple solutions":["that"],"simple sorted":["list"],"simple string":["methods","substitution,","methods","methods,","replace.","replacement","replacement","returns."],"simple structure":["is"],"simple test":["for","such","methods","framework"],"simple than":["I"],"simple using":["Counter()"],"simple). They":["would"],"simple, direct":["implementation"],"simple, for":["each"],"simple, readable,":["maintable,","maintainable"],"simple, short":["and"],"simple, so":["it's"],"simple. But":["some"],"simple. But,":["I"],"simple. There":["is"],"simpler (less":["code,"],"simpler alternatives.":["For"],"simpler and":["more"],"simpler by":["NOT"],"simpler conditional":["that"],"simpler if":["you"],"simpler implemented":["using"],"simpler one.":["Part"],"simpler test":["for"],"simpler than":["instantiating"],"simpler that":["regular"],"simpler the":["better."],"simpler to":["use","read","make"],"simpler using":["the"],"simpler way":["to","to","(1","to","of","to","to","of"],"simpler ways":["to","to"],"simpler without":["it."],"simpler, even":["though"],"simpler. Looks":["good"],"simpler? Or":["was"],"simplest approach,":["but"],"simplest code":["that"],"simplest solution.":["What"],"simplest thing":["that","to"],"simplest way":["to"],"simplicity of":["the","the"],"simplicity! But":["we"],"simplified and":["now"],"simplified by":["first","using","using"],"simplified if":["you"],"simplified them":["and"],"simplified to":["`Responder.__subclasses__()`,","`str[-1]`;"],"simplified version:":["an"],"simplified_phrase() method":["simple"],"simplifies and":["expresses"],"simplifies code":["a"],"simplify `Bob._is_silence`":["method."],"simplify `Phrase.word_count`":["method."],"simplify checking":["for"],"simplify even":["more?"],"simplify if":["you"],"simplify it":["even"],"simplify line":["9"],"simplify lines":["22--25"],"simplify phrase":["splitting"],"simplify that":["as"],"simplify the":["code","code,","operations","generation","code.","code,"],"simplify this":["by","a","even","using"],"simplify word":["counting"],"simplify your":["conditions","logic","code","normalization.","code","code","`_check*`","code","code"],"simplistic and":["there"],"simply \"return":["message.isupper()\"."],"simply `query`;":["would"],"simply `str.isupper()`":["works"],"simply a":["matter"],"simply add":["attributes"],"simply as":["I"],"simply based":["on"],"simply be":["`if"],"simply count":["the"],"simply do":["`d[word]"],"simply hadn't":["thought"],"simply having":["a"],"simply iterate":["through"],"simply leave":["it"],"simply made":["them"],"simply making":["the"],"simply performing":["a"],"simply personal":["preference."],"simply replacing":["'U'"],"simply return":["the","the"],"simply returning":["them"],"simply returns":["the"],"simply say":["`if"],"simply see":["that","what"],"simply than":["the"],"simply use":["\u003ccode\u003eif\u003c/code\u003e","`not","`self.dna.replace('T',"],"simply using":["`or`"],"simulated errors":["in"],"sin, but":["that's"],"since 4":["of"],"since Bob":["is"],"since I":["also","wanted","assumed","coded","see","think","don't","took"],"since I'm":["still"],"since I've":["written"],"since Python":["2.2).","has","dicts"],"since \\w":["find"],"since `is_valid`":["will"],"since `rawinput`":["is"],"since `zip`":["just"],"since all":["of","it"],"since an":["empty"],"since each":["block"],"since every":["condition"],"since exercism.io":["didn't"],"since i":["must"],"since if":["message"],"since it":["apparently","may","keeps","seems","makes","could","is","didn't","could","provides","doesn't","just","only","being"],"since it's":["static.","really","a","a"],"since it:":["a)"],"since nobody":["knows"],"since of":["what"],"since someone":["might"],"since that":["creates","slightly"],"since the":["order","functions","`replace`","statement","only","it's","only","class","conditions","code","tests","test","test","objective"],"since then.":["I"],"since they":["are"],"since they're":["not","not"],"since this":["is","is"],"since you":["prefixed","avoid","have","have","don't","are","re-compile","explicitly","explain"],"since you're":["telling","asking","using","using","giving","not","passing"],"since you've":["explored","already"],"since your":["second"],"since), then":["the"],"singing into":["negative"],"single \"translation\"":["can"],"single _.":["I've"],"single bit":["of"],"single blank":["lines"],"single call":["to"],"single call.":["No"],"single character":["string,","to"],"single character.":["There's"],"single check,":["instead"],"single class":["?."],"single expression":["in","is"],"single file/module.":["Here"],"single function,":["and","which"],"single if":["(and"],"single instance":["that","field"],"single leading":["underscore.","underscore.","underscore.","underscore.","underscore."],"single line":["between","using","of","is","of"],"single loop":["through"],"single place;":["with"],"single responsibility":["-"],"single return":["statement","statement","statement.","call."],"single space":["on","between"],"single space,":["so"],"single statement":["to","is."],"single tick":["docstrings"],"single translation.":["This"],"single ubderscore":["is"],"single underscore":["prefix","for","to","is","-","for","to","for","to","for","to","to","and"],"single underscore.":["Double","Another"],"single-line note---I":["had"],"single-line originally":["and"],"single-responsibility principle":["(the"],"single-underscore; just":["checked)"],"sink in":["the"],"sins. I'm":["still"],"sipping needless":["`None`"],"site is":["such","to"],"site, I":["guess!"],"site, so":["I"],"sitting inside":["an"],"situation I'd":["do"],"situation could":["occur!"],"situation when":["the"],"situation where":["the"],"situation you're":["facing."],"situation, where":["both"],"situations in":["Python."],"situations like":["`?!`..."],"sivhollup is":["right"],"sivhollup. I":["followed"],"six months":["from"],"size of":["input","that"],"skills--at least":["my"],"skin this.":["I'm"],"skip `filter`":["altogether."],"skip all":["typecheking,"],"skip an":["iteration."],"skip the":["'elifs'","assignment"],"skip writing":["docstrings,"],"slavish to":["the"],"sleep. Woke":["up"],"slicing (and":["also"],"slicing in":["the"],"slicing is":["ok,"],"slicing of":["`num`"],"slicing syntax":["because"],"slide, but":["you"],"slides on":["tips"],"slight abuse,":["it"],"slightly by":["moving"],"slightly confusing":["`del`"],"slightly different":["from","and"],"slightly inaccurate,":["as"],"slightly irreverent":["tone"],"slightly misleading":["(it's"],"slightly more":["efficient"],"slightly overengineered:":["the"],"slipped in:":["`Fine,"],"slow in":["Python,"],"slower than":["`re.match`,","iterating"],"small PEP8":["violation:"],"small amount,":["and"],"small and":["straight"],"small as":["possible,"],"small at":["any"],"small bits":["of"],"small examples":["I","like"],"small feedback":["things,"],"small function":["or","or"],"small helper":["methods"],"small integers":["(hence"],"small methods":["with","would"],"small notes":["(though"],"small number":["of"],"small piece":["of"],"small python-specific":["nits:"],"small side":["note:"],"small thing:":["`is_empty`,"],"small, and":["the"],"small, descriptive":["functions."],"smaller interface":["means"],"smaller methods":["with"],"smaller with":["bigger"],"smart :)":["Thanks"],"smart compiler":["you've"],"smart enough":["to","to"],"smart) -":["`to_rna`"],"smart, they":["do"],"smart. They":["know"],"smart... until":["you"],"smarter than":["you"],"smarts, they":["do"],"smell to":["me."],"smells as":["far"],"smelly to":["me:"],"smth like":["that:","`question"],"snake case":["consistent;","only"],"snake_case rather":["than"],"snd over":["the"],"snippet just":["happened"],"snippet there,":["except"],"snippet, trying":["to"],"so ?":["(hint"],"so I":["have","am","see","think","did","kept","made","try","incorporated","only","preferred","suppose","fail","would","have","would","don't","don't","like","though","have","would","created","don't","could","will","decided","can't","tend","have","chose","saw","wouldn't","suppose","may","extracted","thought","will","have","know","tried","guess","left","could","don't","kept","don't","may"],"so I'd":["want","tend"],"so I'll":["make","remove"],"so I'm":["clear?)","not","not","merely","using","using","getting","calling","particularly"],"so I've":["completely","moved"],"so Python":["will"],"so `Bob.hey`":["is"],"so ```len(string.strip())":["=="],"so `if":["len(somestring)"],"so `strip`":["won't"],"so a":["simple","simple","reader"],"so all":["we're"],"so any":["kind","feedback"],"so are":["bound"],"so as":["a"],"so bad":[";-)"],"so by":["definition"],"so classes":["are"],"so clear":["for"],"so complex,":["and"],"so costly":["from"],"so could":["be"],"so critical":["in"],"so didn't":["abstract"],"so doesn't":["make"],"so even":["putting","if"],"so familiar":["with"],"so far":["and",":)","as"],"so far,":["even"],"so far.":["Just",":)"],"so feel":["free"],"so feeling":["my"],"so for":["the","the","the"],"so geneticists":["can"],"so goes":["with"],"so good":["work!"],"so he":["can't"],"so hey":["could"],"so i":["guess","feel"],"so if":["something","there","you","I"],"so in":["instance","`Phrase.clean_phrase`"],"so instead":["of"],"so is":["it","the","handling"],"so is_question()":["would"],"so isn't":["it"],"so it":["could","seemed","works","may","could","fits","will","is","can"],"so it'll":["be"],"so it's":["easy","more","premature","talking","more","not","usually","either","a","usually"],"so its":["result"],"so let":["me"],"so long":["as"],"so making":["this"],"so many":["different"],"so maybe":["next","it's"],"so more":["robust"],"so most":["of"],"so much":["power","clearer","about","going","to","for","as","whitespace...","better","better,","as","machinery","code","slower"],"so no":["need","need"],"so not":["`said==said.upper()`"],"so now":["I'm"],"so on":["are","seems"],"so one":["may"],"so only":["one"],"so or":["not"],"so other":["methods"],"so passing":["```"],"so people":["won't","can"],"so perhaps":["'interprets_as_question'","it's"],"so permissive":["about"],"so please":["tell"],"so predicates":["dont"],"so pythonic":["and"],"so saying":["```message.strip()"],"so short":["and"],"so short.":["I"],"so shouldn't":["be"],"so silence":["*has*"],"so small,":["and"],"so smaller":["interface"],"so splitting":["on"],"so sure":["if"],"so that":["it","somebody","dedicating","you'd","we","you","you","their","questions","later","it","none","may","I","I","it","you","the"],"so that's":["very","something"],"so the":["code","central","logic","canonical","pythonic","tests","else","`.decode`","succinctness","second","order"],"so there":["are","is"],"so there's":["no","comment","no","no"],"so they":["all","can","could"],"so they'll":["stay"],"so they're":["not"],"so this":["is","helped","is","is","was"],"so tips":["and"],"so two":["improvements"],"so up":["to"],"so used":["to"],"so using":["class","the"],"so wanted":["to"],"so well":["as"],"so what's":["the","wrong"],"so why":["restrict","not"],"so widely":["used"],"so you":["don't","could","can","don't","don't","don't","might","can","don't","can","can","can","can","don't","can","could","could","can","here","could","can","can","could","don't","always","don't","wouldn't","explicitly","can","aren't","would","don't","can","could"],"so your":["code"],"so, feel":["free"],"so, how":["do"],"so, is":["the","there"],"so, you":["could"],"so. But":["sometimes,"],"so. Since":["it's"],"so.. I":["can't"],"so: Yeah":["me!"],"so? I":["could"],"sold on":["the"],"solely on":["it's"],"solid argument":["for"],"solid as":["is!"],"solid solution,":["and"],"solid, clean":["and"],"solution I":["though","devised","used"],"solution and":["I"],"solution as":["well.","well.","one"],"solution attempts":["to"],"solution but":["was","certainly"],"solution for":["the","the","each"],"solution given":["the"],"solution has":["no"],"solution here":["is"],"solution is":["good.","even","fine.","quite","in","correct","out","pretty","just"],"solution isn't":["compatible"],"solution it":["seems"],"solution look":["accurate"],"solution makes":["it"],"solution mechanics.":["The"],"solution much":["more"],"solution not":["relying"],"solution of":["the"],"solution out":["without"],"solution possible.":["Not"],"solution seems":["reasonable","to","to"],"solution should":["be"],"solution slightly":["overengineered:"],"solution that":["can"],"solution they":["need"],"solution to":["this","be"],"solution treating":["`DNA._dna_str`"],"solution used":["`re.findall()`"],"solution using":["`replace()`,","`map`"],"solution when":["you"],"solution where":["all"],"solution with":["a","dictionary?"],"solution would":["have"],"solution! You":["inspired"],"solution, I":["see","would"],"solution, and":["there"],"solution, but":["in","probably","I","could"],"solution, it's":["very"],"solution, may":["we"],"solution, seems":["it's"],"solution, some":["things"],"solution. As":["usual,"],"solution. Critique":["welcome"],"solution. Going":["through"],"solution. Helper":["methods"],"solution. Here":["are"],"solution. I":["like","don't","like","only","have","have"],"solution. Is":["it","this"],"solution. It":["even","would"],"solution. Just":["a","two"],"solution. My":["implementation"],"solution. Some":["remarks:"],"solution. Storing":["strand"],"solution. The":["regular"],"solution. Two":["things,"],"solution. Ultimately":["it's"],"solution. What":["would"],"solution: it":["follows"],"solution? To":["me"],"solutions and":["some"],"solutions are":["essentially"],"solutions that":["strip()","just"],"solutions there.":["I"],"solutions to":["the","this,"],"solutions would":["be"],"solutions, and":["I"],"solutions. I":["like"],"solve that":["without"],"solve the":["problem","problem.","problem.","problem?","exercise"],"solve this":["problem","problem","kind","problem.","problem.","problem"],"solved in":["a"],"solved the":["javascript"],"solved this":["assignment"],"solving in":["a"],"solving this":["type","problem."],"some \"better":["answers\""],"some (limited)":["support"],"some 8":["years.","years."],"some abstract":["concept"],"some actions":["and"],"some actual":["benchmarks,"],"some additional":["mechanisms"],"some attribute":["won't"],"some back":["and"],"some backlog":["on"],"some benefits.":["Comments"],"some boilerplate(?)":["code"],"some boolean":["logic?"],"some caching":["could"],"some cases":["it","it","a","where"],"some code":["repetition.","duplication"],"some compact":["code"],"some computation":["time"],"some consider":["it"],"some coworkers":["who"],"some custom":["configurations"],"some docstrings":["to"],"some documentation":[":)"],"some documentation,":["though"],"some doubt":["about"],"some duplication":["of"],"some duplication.":["Any"],"some example":["usage"],"some expression,":["which"],"some external":["specification."],"some functional":["programming"],"some functions":["and"],"some good":["coverage"],"some had":["`word_count`"],"some handy":["methods","methods"],"some have":["regexes,"],"some housecleaning":["in"],"some how":["brittle."],"some ideas":["for"],"some idiom":["I'm"],"some indication":["of"],"some inheritance":["scenarios.","scenarios)","scenarios","scenarios"],"some kind":["of","of","of","of"],"some logical":["flaws."],"some metaprogramming":["here"],"some method":["`.is_shouted_at()`."],"some methods":["on"],"some middle":["ground"],"some might":["not"],"some minimal":["transformation"],"some more":["pathologic","comments"],"some more,":["99"],"some motivation":["to"],"some mutable":["value"],"some name":["more","from"],"some naming":["choices,"],"some new":["object","perspectives,"],"some normalization":["and"],"some of":["the","that","Zen","the","the","the","the","the","the","the","the","the","the","this"],"some old":["\"every"],"some other":["pieces","languages."],"some other's":["code"],"some overhead":["but"],"some part":["of","of"],"some pattern":["in","in"],"some people":["using"],"some places":["and"],"some point,":["but"],"some possible":["english"],"some pretty":["handy"],"some processing":["from"],"some projects":["left"],"some quick":["string"],"some reason,":["I","I","it"],"some refactoring":["and"],"some references":["to"],"some relatively":["simple"],"some repetition":["you"],"some repetitive":["code"],"some rigid":["mechanism."],"some robot's":["name"],"some rusty":["skills--at"],"some science":["application"],"some sense":["I","-"],"some significant":["improvements."],"some simple":["string","code","solutions"],"some small":["python-specific","nits:"],"some sort":["of","of","of"],"some spaces":["and"],"some standard":["syntax"],"some state":["between"],"some suggestions":["if"],"some super":["over-engineered"],"some terrible":["regex"],"some test":["cases"],"some tests":["for","failed:","recently"],"some tests,":["should"],"some that":["you"],"some things":["to","that"],"some times.":["I"],"some tiny":["nits:"],"some tips":["you"],"some trouble":["deciding"],"some tweaked":["naming"],"some unnecessary":["grouping","grouping"],"some unrelated":["bug)."],"some variables":["for"],"some variety":["of"],"some vital":["attributes","attributes"],"some way":["to"],"some weird":["mystery"],"some weird,":["flipped"],"some well":["named"],"some were":["realized,"],"some widely":["accepted"],"some work":["and"],"some_answer\" thing":["?"],"somebody can":["get"],"somebody else":["added"],"somebody tries":["to"],"somehow I'd":["think,"],"somehow makes":["up"],"somehow named,":["to"],"somehow reflected":["here."],"somehow store":["the"],"somehow, that":["looked"],"someone called":["the"],"someone do":["this"],"someone else":["implements","said","vote","–","can","picks","might","who"],"someone else's":["solution;"],"someone else.":["Although"],"someone is":["just","asking"],"someone just":["wants"],"someone left":["me"],"someone might":["set","want"],"someone not":["really"],"someone on":["here"],"someone pointed":["out"],"someone reading":["the"],"someone sets":["the"],"someone suggested":["to"],"someone to":["set"],"someone were":["to"],"someone who":["read","uses"],"someone with":["less"],"someone would":["create"],"someone's recommendation":["back"],"somestring:`. BUT":["an"],"something I":["could","don't"],"something I've":["seen"],"something ```":["is"],"something a":["bit"],"something about":["function"],"something approaching.":["It's"],"something appropriate":["to"],"something as":["simple","simple"],"something better.":["You"],"something but":["at"],"something by":["module","itself."],"something changes":["in"],"something completely":["different!"],"something could":["work"],"something else":["in","this","is"],"something else,":["but"],"something else.":["It"],"something form":["read-me","read-me"],"something has":["len"],"something in":["the","the","conversation","communication"],"something is":["private,","shouting,"],"something isn't":["done"],"something like":["```\"FOO\".isupper()```.","\"whatever\"?","`x","this?","this:","`Responder`?","a","`if","```bob.hey(5)```,","`||=`","`i`,","chain","LINQs","split_phrase_into_array(phrase)?","`words`.","Bob.hey(text)","Clojure's","this:","\"string\"","'HEY","tellBob","'if"],"something like)":["knowing"],"something lile":["`normalized_words`"],"something more":["emphatic:","elaborate","descriptive","appropriate","clear."],"something new":["once","from","from","and"],"something other":["than"],"something out":["without"],"something really":["simple"],"something similar":["here","in"],"something slightly":["different:"],"something submitted.":["Very"],"something that":["could","will","could","should","I'd"],"something that'll":["make"],"something that's":["more","even","very"],"something to":["keep","parse","keep","Bob?"],"something very":["similar"],"something well.":["I"],"something went":["wrong"],"something with":["your"],"something wrong":["with"],"something you'd":["typically","want"],"something, but":["personally"],"something, negating":["the"],"something, rather":["than"],"something, so":["I'd"],"something. Not":["so"],"something. The":["double-leading"],"something.strip()[-1] ==":["'?'"],"something.strip()` a":["lot,"],"something; e.g.":["define"],"somethings that":["makes"],"sometimes be":["very"],"sometimes being":["the","placed"],"sometimes isn't":["enough"],"sometimes it":["makes"],"sometimes specs":["change"],"sometimes, thinking":["about"],"somewhat dated":["example"],"somewhat different":["methods"],"somewhat dislike":["them,"],"somewhat heavy-weight":["for"],"somewhat less":["enamored"],"somewhat more":["idiomatic"],"somewhat not":["right"],"somewhere because":["it"],"somewhere else.":["I"],"somewhere other":["than"],"somewhere, maybe":["using"],"song generator":["after"],"song over":["from"],"soon and":["high"],"soon as":["possible,","you"],"soon! Thanks":["for","for"],"soon), so":["this"],"soon, and":["we"],"sophisticated techniques,":["but"],"sorry about":["that","that."],"sorry, I":["was","missed"],"sorry. And":["yes"],"sort (n":["vs"],"sort `base_word`":["once"],"sort being":["implemented"],"sort benefits":["from"],"sort has":["complexity"],"sort it":["every"],"sort letters":["(instead"],"sort of":["forward","messaging","specification","`map`","thing","reasonable","Prototyping","feedback.","self","see"],"sort the":["source"],"sort them":["on"],"sort() method":["instead"],"sort/sorted being":["at"],"sorta \"interface\"":["or"],"sorted by":["key."],"sorted list":["in","version","of"],"sorted strings":["like"],"sorted wrong":["and"],"sorted() on":["it"],"sorted(item.lower()) ==":["signature,","signature]`"],"sorted, lower":["case"],"sorting and":["lowercasing"],"sorting characters":["in"],"sorting them":["is"],"sorting vs":["n"],"sorting would":["be","be"],"sorting? `sorted`":["works"],"soruce on":["GitHub"],"sound too":["harsh"],"sound. Now":["given"],"sounded like":["he","he"],"sounds fine":["as"],"source and":["do","so"],"source control":["is"],"source files":["yet."],"source files,":["I"],"source word":["once,"],"space -":["no"],"space after":["a","commas","commas","comma"],"space around":["operators."],"space as":["an"],"space at":["the"],"space between":["import","`Bob.hey`","`\"\"\""],"space check,":["python"],"space in":["theses"],"space it":["felt"],"space on":["either"],"space pollution,":["and"],"space requirement...":["interesting."],"space) would":["not"],"space, eg:":["\"on"],"space, only":["two"],"space, so":["not"],"space. Ex:":["`def"],"space. I'd":["drop"],"spaces (you":["also"],"spaces -":["if"],"spaces after":["the","questionmark"],"spaces and":["newlines"],"spaces are":["the"],"spaces around":["the","operators"],"spaces at":["the"],"spaces before":["colons."],"spaces between":["method"],"spaces from":["the"],"spaces got":["me"],"spaces in":["between"],"spaces of":["indentation."],"spaces on":["both"],"spaces only":["separately"],"spaces to":["separate","align"],"spaces would":["also"],"spaces) and":["makes"],"spaces) to_bob[-1]":["would"],"spaces, other":["place"],"spacing between":["methods"],"spacing in":["checks"],"spacing. Thankfully":["we"],"spaghetti if/elif":["altogether"],"spaghetti-like, I":["think."],"spanning multiple":["lines,"],"spare oneself":["a"],"spartan style](http://ssdl-wiki.cs.technion.ac.il/wiki/index.php/Spartan_programming)'s":["follower,"],"speak for":["itself.","the","itself."],"speaker; the":["translation"],"speaking, according":["to"],"spec according":["to"],"spec has":["changed"],"spec is":["always"],"spec of":["a"],"spec part":["is"],"spec requires.":["shouting"],"spec. For":["example,"],"special case":["?","anything)","out","that","(to"],"special cases.":["Anyway,"],"special character":["issue."],"special class":["methods"],"special consideration":["is"],"special detail":["that"],"special enough":["to"],"special functions.":["Some"],"special method":["for"],"special requirement":["or"],"special uses":["(like"],"special values":["-"],"special-case empty":["string."],"special-cased as":["it"],"special. Some":["thoughts"],"specialist in":["Python"],"specialized classes":["?","for"],"specially NOT":["exposed"],"specially for":["simple"],"specially when":["the","the"],"specials chars.":["If"],"specific (and":["the"],"specific about":["your"],"specific as":["possible."],"specific name":["for"],"specific problem,":["I"],"specific sequence":["of"],"specific special":["values"],"specific to":["the"],"specifically OK'd":["by"],"specifically `test_detect_simple_anagram`,":["where"],"specifically mentioned":["case"],"specifically regarding":["the"],"specification (I'm":["exaggerating"],"specification (top-level":["`hey`-function"],"specification -":["meaning"],"specification and/or":["additional"],"specification reflects":["the"],"specification seem":["like"],"specification so":["I"],"specification there":["are"],"specifications change":["so"],"specifications in":["the"],"specifics for":["the"],"specified it":["will"],"specifies them":["redundantly"],"specify `re.UNICODE`":["as"],"specify all":["needed"],"specify that":["all","the"],"specify the":["property","good","characters"],"specify which":["Python"],"specs (`bob.hey(\"None\")`":["should"],"specs (yes,":["tests"],"specs FWIW,":["the"],"specs and":["the"],"specs are":["not","not"],"specs change":[";;),","in"],"specs changed":["so"],"specs in":["the"],"specs mandates":["that"],"specs says":["\""],"specs. Dynamically":["creating"],"specs. I'm":["still"],"specs. Now":["for"],"speech being":["the"],"speech that":["it"],"speech:\" test?":["It"],"speech` as":["one"],"speed -":["functions"],"speed etc":["then"],"speed things":["up"],"speed up":["the"],"spell \"str.isupper()\"":["?"],"spelled `__eq__`)":["should"],"spelled `if":["somestring:`.","xxx"],"spelled `if_anagram`":["IMHO."],"spelled `phrase":["is"],"spelled `return":["`"],"spelled `str.replace('":["',"],"spelled with":["two"],"spelling or":["some"],"spin, and":["it"],"split `base_word`":["in"],"split and":["use"],"split apart":["(as"],"split at":["sensible"],"split don't":["we"],"split instead":["of"],"split into":["half","words","more"],"split it":["again","up","in"],"split on":["whitespace"],"split phrase":["in"],"split strings,":["etc,"],"split the":["tests","strings"],"split then":["join"],"split those":["strings"],"split without":["a"],"split words":["with"],"split() to":["make"],"split? due":["to"],"split_phrase with":["something"],"split_phrase_into_array(phrase)? Why":["not"],"splitting and":["the"],"splitting first":["caused"],"splitting in":["words."],"splitting logic":["by"],"splitting message":["from"],"splitting on":["e.g.","what"],"splitting regex,":["so"],"splitting strings":["into"],"splitting up":["though.","the"],"splitting with":["`\\W`?"],"splitting) rather":["than"],"spoil the":["fun"],"spoiled the":["fun"],"spoke.endswith will":["return"],"spoken for,":["I'm"],"spot a":["pattern","code"],"spot in":["our"],"spot on":["and"],"spot some":["pattern","pattern"],"spotted some":["code"],"spotting that":["I'm"],"spread across":["properly"],"spread the":["method's"],"sprinkle the":["method's"],"sprinkled here":["and"],"square wheel.":["Hint"],"ss in":["("],"stab had":["a"],"stack exchange":["and"],"stackoverflow elucidation":["of"],"stale/misleading more":["easily"],"stamping on":["their"],"standalone function":["because"],"standalone functions":["or"],"standard Counter":["doesn't"],"standard back":["in"],"standard builtin":["solution"],"standard constructors":["-"],"standard form":["of"],"standard functions":["isupper"],"standard in":["Python","Python"],"standard libraries":["`str.replace`."],"standard library":["in","`isupper`","well","knowledge","modules","because","and","method"],"standard library,":["so"],"standard library.":["A","I","I"],"standard library:":["setting"],"standard library](http://docs.python.org)":["-","-","-","-"],"standard methods":["from"],"standard of":["formatting."],"standard should":["be"],"standard string":["method"],"standard syntax":["for"],"standard: http://www.python.org/dev/peps/pep-0008/":["."],"standardization already":["taking"],"standardization and":["sorting"],"standardized formatted":["word,"],"standardized must":["be"],"standards can":["be","be"],"standards in":["naming"],"standards library":["module,"],"standing on":["the"],"standpoint, and":["I"],"standpoint, but":["I"],"stands for":["\"string","'string'?","list"],"stared coding":["in"],"staring at":["error"],"start and":["end"],"start appreciating":["it."],"start calling":["Python"],"start of":["a","the","the","`clean_number`","a","the"],"start or":["endswith,"],"start out":["with,"],"start the":["song"],"start to":["bleed"],"start using":["new-style"],"start with":["\"Is","looking","and"],"start)])` you":["can"],"started creating":["smaller"],"started fiddling":["with"],"started off":["with","this"],"started thinking":["about"],"started using":["the"],"started with":[":)"],"starting and":["trailing"],"starting point.":["Fixed"],"starting the":["python"],"starting to":["steal","dabble"],"starting with":["an"],"starts or":["ends","ends","ends","ends","ends"],"starts to":["be","make","be","get","fail"],"starts with":["boilerplate"],"state (may":["be"],"state (though":["he"],"state between":["method"],"state is":["what","ok)"],"state of":["the","the"],"state or":["parameter"],"state so":["you"],"state that":["the"],"state to":["be","be"],"state wouldn't":["be"],"state\"). Also":["in"],"state), or":["have"],"state, I":["saw"],"state, and":["they"],"state, none":["of","of"],"stated. Good":["luck!"],"stated. If":["a"],"stateful behavior":["that"],"stateless class":["and"],"stateless, so":["hey"],"stateless. As":["it"],"statement (when":["you"],"statement (which":["is"],"statement -":["It's"],"statement -&gt;":["converse"],"statement --":["just"],"statement ==":["'"],"statement and":["more","the","class","class","I"],"statement approach":["(though"],"statement around":["it"],"statement as":["you"],"statement at":["the"],"statement because":["NoneType","that's"],"statement check":["in","in"],"statement checking":["for"],"statement constructor":["with"],"statement evaluation":["to"],"statement expression":["seems"],"statement for":["`phrase_list`,"],"statement formatting":["is"],"statement functions":["in"],"statement have":["been","been","been"],"statement if":["message"],"statement in":["the","small","small","method!","_assesMessage","line"],"statement instead":["of","of"],"statement is":["silent,","doing","slightly","better","gone"],"statement is.":["Does"],"statement length":["is"],"statement like":["`any(is_yelled(...)"],"statement makes":["the","the"],"statement might":["clean"],"statement on":["it's","line","line"],"statement one":["is"],"statement or":["'","''"],"statement predicates":["are"],"statement says":["\"for"],"statement should":["be"],"statement shouldn't":["be"],"statement structure":["should"],"statement such":["as"],"statement that":["isn't","seems","was","binds"],"statement to":["get","add","change","check","handle","process","the","keep"],"statement type":["checking"],"statement usage":["(when"],"statement using":["them."],"statement was":["removed","just"],"statement which":["is"],"statement will":["return"],"statement with":["others"],"statement would":["be"],"statement, because":["that"],"statement, but":["conveys"],"statement, even":["if"],"statement, instead":["of"],"statement, not":["for"],"statement, then":["looking"],"statement, you":["just"],"statement. According":["to"],"statement. Also":["default"],"statement. It":["is"],"statement. It's":["the"],"statement. The":["current","instructions"],"statement. Without":["this"],"statement. this":["is"],"statement...\" or":["\"Check"],"statement...\" rather":["than"],"statement[-1:] ==":["'?':"],"statement](http://stackoverflow.com/questions/36707/should-a-function-have-only-one-return-statement), I'd":["keep"],"statement` instead":["of"],"statements (multiple":["statements"],"statements -":["most"],"statements a":["bit."],"statements and":["if","a","even","use","code","will"],"statements are":["redundant","unnecessary.","logically","technically"],"statements as":["you","you","you","you","you","comments","opposed"],"statements but":["I","couldn't"],"statements clear":["about"],"statements could":["make","be"],"statements does":["not"],"statements everywhere":["(when","(when","(when"],"statements have":["returns,","returns,"],"statements in":["the"],"statements makes":["the"],"statements more":["readable."],"statements need":["to"],"statements nested":["in"],"statements nesting":["because"],"statements on":["the","a","the","the","one","the"],"statements or":["one"],"statements should":["be"],"statements since":["every"],"statements that":["I"],"statements there.":["`toBob.isupper()`","`input.isupper()`","`phrase.isupper()`"],"statements to":["be"],"statements toward":["the"],"statements were":["on","fine","in"],"statements when":["you","you"],"statements) and":["I"],"statements**. And":["of"],"statements, I":["contend"],"statements, but":["that","somehow,"],"statements, they":["do"],"statements, though.":["It's"],"statements. And,":["I"],"statements. But":["in"],"statements. Does":["it"],"statements. If":["the"],"statements. It's":["a"],"statements. i'm":["ashamed"],"statements? I":["could"],"states that":["flat"],"static (aka":["class"],"static (or":["functions)."],"static analysis":["to"],"static and":["more"],"static attribute,":["to"],"static attribute.":["That"],"static is":["because"],"static method":["`@jonathon`","with","or","because"],"static methods":["instead","because"],"static methods)":["are"],"static methods,":["they","since"],"static property":["as"],"static so":["it"],"static types,":["pattern"],"static when":["regular"],"static, I":["suppose."],"statically create":["the"],"statically typed":["language"],"stay close":["to"],"stay consistent,":["you"],"stay in":["last"],"stay local":["to"],"staying with":["the"],"stdlib much":["better."],"stdlib re":["module"],"stdlib's `collections`":["package."],"steal thunder":["from"],"step (which":["initially"],"step as":["well"],"step forward":["-"],"step forward,":["you"],"step through":["the"],"step. Were":["you"],"stepped over":["80"],"steps and":["reassign"],"steps in":["Python!","Python!","Python,"],"steps required":["to"],"steps that":["you"],"steps when":["one"],"steps you":["follow"],"steps! I":["tend"],"steps, so":["I"],"steps. I":["have"],"stick to":["Occam's","this","the"],"stick with":["the","it."],"sticking them":["inside"],"sticking to":["some","Pythonic","the"],"sticks out":["to"],"still a":["code","lot","way"],"still abbreviated":["msg"],"still accessible":["though."],"still are":["the"],"still be":["crystal-clear.","overkill"],"still brittle":["(hint:"],"still can":["get"],"still causes":["one"],"still consider":["it"],"still considered":["an"],"still contained":["in"],"still could":["tell"],"still deciding":["about"],"still defaulted":["to"],"still defer":["the"],"still does":["not"],"still don't":["fully","need"],"still exclusively":["use"],"still fails,":["but"],"still fugly":["and"],"still good":["practice"],"still grouped":["on"],"still have":["some","two","just","an","these","the","to","the","a","to","the","to"],"still import":["the"],"still in":["javascript"],"still initialize":["`vocab`"],"still keeping":["the"],"still leave":["nitpicks"],"still like":["to"],"still looks":["weird"],"still mainly":["an"],"still make":["it"],"still making":["it"],"still necessary":["at"],"still normalize":["the"],"still not":["quite","in","valid","clear","fond","completely","sure","happy."],"still on":["2.7"],"still prefer":["them."],"still relevant:":["http://stackoverflow.com/a/1988826/477048."],"still rely":["on"],"still requires":["that"],"still solved":["in"],"still something":["that"],"still stuck":["submitting"],"still submit":["some"],"still surprised.":["Nicely"],"still that's":["the"],"still there,":["but"],"still think":["that","list","that"],"still trying":["to","to"],"still unsure":["what"],"still use":["helpers"],"still useless.":["Also"],"still very":["readable"],"still want":["to"],"still wondering":["wether"],"still, ```''":["is"],"still, in":["more"],"stipulations with":["this"],"stolen this":["name"],"stone (especially":["the"],"stop at":["the"],"stop exposing":["what"],"stop-on-shortest-argument property":["of"],"store and":["buy"],"store each":["nucleotide"],"store it,":["so"],"store on":["computation"],"store the":["message","result","translation","letter-value"],"store them":["as"],"store. For":["reusability,"],"stored is":["implementation"],"stores `str`.":["That"],"storing ```input_string```":["for"],"storing it":["locally"],"storing reactions.":["Haven't"],"storing the":["phrase","possible"],"story Bob":["is"],"story `Bob`":["is"],"story by":["asking"],"story maybe":["by"],"story of":["what's","what's"],"str !=":["\"\""],"str arguments.":["guess"],"str or":["str.isspace()"],"str type,":["it"],"str weren't":["a"],"str() ```":["is"],"str.endswith instead":["of"],"str.endswith('?'). In":["other"],"str.isupper is":["a"],"str.isupper() already":["checks"],"str.isupper() instead":["of"],"str.maketrans and":["str.translate,"],"str.replace(string, from,":["to)"],"str.translate, regexp,":["full"],"str` in":["the"],"straight forward":["solution.","implementation.","and","using"],"straight forward,":["great"],"straight from":["`re.findall`"],"straight off.":["F.ex:"],"straight with":["this"],"straightforward (and":["readable)"],"straightforward and":["easy"],"straightforward approach":["keeping"],"straightforward as":["it"],"straightforward so":["any","there's"],"straightforward solution":["given","with"],"straightforward to":["me:"],"straightforward, just":["doing"],"straightforward, which":["makes"],"strand as":["a"],"strand is":["formed"],"strand representation.":["Nobody"],"strand's chars.":["Is"],"strand, its":["transcribed"],"strange thing":["to"],"strange things":["will"],"strange to":["me","poke"],"strange use":["of"],"strays too":["much"],"stretching yourself":["to"],"strictly need":["to"],"strictly object":["oriented"],"strictness of":["text[-1]"],"strikes me":["that"],"string (`text.upper()`)":["and"],"string (but":["`endswith`"],"string (byte":["or"],"string (or":["list,"],"string *must*":["be"],"string -":["look","`isupper()`"],"string I":["would"],"string STILL":["have"],"string [PEP8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations)":["suggests"],"string `\"\"`":["and"],"string `\"(&%$(%\"`":["would"],"string also":["equals"],"string an":["returning"],"string and":["returns","then","it","if","on","thus","all"],"string are":["`False`","uppercase"],"string as":["argument),","a"],"string at":["the"],"string before":["applying","checking","comparing."],"string being":["all","passed"],"string but":["could","testing"],"string by":["reference,"],"string can":["do."],"string cannot":["ends"],"string case":["which"],"string casting/length":["calculation:"],"string checking...":["I"],"string class":["has","has"],"string class'":["API.","API.","API:","API.","API.","API."],"string comments":["on"],"string constants":["as"],"string conversion":["are"],"string each":["time"],"string element.":["I"],"string ends":["with","with","with"],"string evals":["to"],"string evaluates":["to","to","to"],"string first":["to"],"string for":["emptiness","emptiness,","emptiness,","emptiness","emptiness,","emptiness,"],"string full":["of"],"string functions":["you"],"string has":["a","a","a","a","a","a","a","a","a","a","a","a","a","a","a"],"string helper":["functions"],"string if":["the"],"string import":["punctuation`"],"string in":["a","the","`safe_strip`","to_rna,","`Phrase.phrase`","list","`is_saying_nothing`."],"string input":["into"],"string input.":["And"],"string interface":["afterwards,"],"string is":["uppercase","falsy","falsy","equal","shouting","_easiest_","`None`:","all","passed","all","all","all","all","empty","smart","spelled","an","all","uppercase.","an","iterable","considered","really","a","already","blank.","empty.","uppercase","not","empty","also","empty","considered","Falsy.","evaluating","empty"],"string issues":["in"],"string it":["is"],"string it's":["safer"],"string just":["to"],"string looking":["for"],"string lower":["case"],"string make":["the"],"string may":["contain","not"],"string method":["`translate`,",":)","name,","`.isspace()`","you","you","to","to","to","`isspace`","`str.isspace()`","that","would","that","`.isupper()`","`.endswith()`","string.endswith('?')","translate()"],"string method,":["isupper,","and"],"string method?":["Also,"],"string methods":["instead","and","you","rather","`isupper()`","to","were","as","were","(sequence","are","instead,","and","like","isupper()","that","and"],"string methods!":["One"],"string methods,":["you","until"],"string methods.":["I","This"],"string module":["first."],"string module's":["split?"],"string name.":["The"],"string needs":["at"],"string object":["API.","to"],"string objects":["-"],"string of":["text","nucleotides.","nucleotides."],"string once.":["Let"],"string or":["None.","`None`","to","spaces"],"string position":["access"],"string processing":["details"],"string replace.":["Not"],"string replacement":["of","by","function"],"string replacement,":["it"],"string representation":["of"],"string representation)":["in"],"string return":["`False`"],"string slicing":["(and","in"],"string so":["I","the"],"string starts":["or","or","or"],"string still":["have"],"string substitution,":["and"],"string suffixes":["`.endswith()`"],"string that":["you","will","combines","is","are","bob"],"string to":["a","something","start","`''`.","the","a","RNA","lowercase"],"string type.":["Using"],"string uses":["only"],"string variables":["is"],"string was":["0","all"],"string were":["either"],"string will":["not"],"string with":["the","a","isupper()?","length"],"string without":["the"],"string would":["make"],"string you":["should"],"string) list":["as"],"string). Perhaps":["that"],"string)` and":["`re.search(pattern,"],"string)` instead":["of"],"string, and":["we"],"string, avoiding":["iteration"],"string, but":["it's","I"],"string, if":["an"],"string, in":["some"],"string, it":["will"],"string, not":["only"],"string, or":["```None```."],"string, sequence.replace":["is"],"string, so":["`strip`","you","you"],"string, something":["like"],"string, such":["that"],"string, that":["works"],"string, when":["stripped,"],"string, which":["eliminates","is"],"string, while":["comparing"],"string-specific methods)":["in"],"string-suffixes using":["`.endswith()`"],"string. Also,":["the"],"string. And":["yes"],"string. As":["a","such,"],"string. But":["this"],"string. Check":["out"],"string. I":["also"],"string. I've":["seen"],"string. If":["this"],"string. In":["this"],"string. It":["does","would"],"string. It's":["already"],"string. One":["would"],"string. Since":["the"],"string. Still":["looking"],"string. The":["less"],"string. Then,":["the"],"string. This":["uselessly"],"string. You":["don't"],"string. nothing":["wrong"],"string. otherwise":["looks"],"string. there":["is"],"string.endswith('?') instead":["of"],"string.isupper() because":["it"],"string.isupper() though":["which"],"string.join(separator) would":["make"],"string.replace does":["in"],"string.replace. The":["```sequence```"],"string.strip() ==":["''\""],"string.upper() method":["too"],"string.uppercase and":["string.digits?"],"string: str.endswith('?').":["In"],"string? How":["does"],"string? I":["sort"],"string? I'm":["not"],"string? You":["may"],"string` doing":["anything"],"string` is":["not"],"stringing together":["a"],"strings (although":["your"],"strings (i.e.":["strings"],"strings (responses)":["to"],"strings (so":["the"],"strings and":["write","meaningful"],"strings are":["smart.","rather","quite","smart)","too","automagically","`'foo'`,","never","not"],"strings but":["this"],"strings by":["appending"],"strings consisting":["of"],"strings containing":["only"],"strings evaluate":["to","to","to","to","to","to","to"],"strings for":["emptiness","emptiness."],"strings get":["there)."],"strings given":["by"],"strings have":["a","a","a","an","a","a"],"strings here":["to"],"strings in":["inline","Python."],"strings into":["the","lists."],"strings is":["very"],"strings it":["might"],"strings length":["really"],"strings like":["boolean","this"],"strings need":["a"],"strings of":["chars(sorted,lowered)"],"strings onto":["multiple"],"strings seperate,":["but"],"strings such":["as"],"strings that":["are"],"strings through":["`''.join(...)`"],"strings to":["make","boolean","`hey()`.","save"],"strings together":["like"],"strings with":["a","`''.join(chars)`...","+"],"strings would":["save"],"strings, I":["was"],"strings, but":["beyond"],"strings, empty":["lists,"],"strings, etc,":["but"],"strings, it":["might"],"strings, not":["a"],"strings, so":["I"],"strings, then":["use"],"strings, to":["be"],"strings. But":["this"],"strings. I":["was","played"],"strings. Nice":["touch!"],"strings. Reduce":["can"],"strings. Tell":["me"],"strings. This":["version"],"strings. You":["can"],"strings; it's":["more"],"strings? Also,":["the"],"strings? What":["do"],"strip ```":["two"],"strip non-alphanumeric":["and"],"strip only":["removes"],"strip out":["those","as"],"strip punctuation":["and"],"strip spaces)":["to_bob[-1]"],"strip the":["string","string","string","input"],"strip() the":["argument","phrase"],"strip() to":["check"],"strip() works":["to"],"strip(), replace()```":["etc..."],"striping and":["comparing."],"striping of":["characters."],"striping passed":["messages?"],"stripped spaces":["from"],"stripped to":["find"],"stripped, is":["an"],"stripping and":["checking"],"stripping out":["the"],"strong argument":[".","for","for"],"strong coupling,":["I"],"strong feeling":["about"],"strong on":["extracting"],"strongly about":["it"],"strongly either":["way"],"strongly in":["separating"],"strongly to":["creating"],"structure (hint:":["a"],"structure but":["assign"],"structure down":["--"],"structure for":["such"],"structure in":["`collections`."],"structure is":["lost.","more"],"structure of":["the","your"],"structure should":["probably"],"structure similar":["to"],"structure than":["10"],"structure that":["holds"],"structure to":["make"],"structure too":[":)"],"structure would":["make"],"structure, but":["my"],"structure. I've":["reverted"],"structure. Some":["nitpicks:"],"structured code":["first"],"structured. Nice":["idea."],"structured. You":["might"],"structures (via":["list"],"structures eg.":["in"],"structures.\" (generally":["attributed"],"structures.\" —Alan":["Perlis"],"struggle writing":["these,"],"struggled with":["the"],"struggling to":["do"],"struggling with":["this","the"],"stuck -":["just"],"stuck submitting":["the"],"student, I":["use"],"students of":["a"],"stuff (pluralizing":["\"bottle\""],"stuff I":["went"],"stuff and":["then"],"stuff from":["other"],"stuff imho":["(specially"],"stuff in":["the"],"stuff into":["the"],"stuff that":["you'd","the"],"stuff to":["be"],"stuff up":["on"],"stuff which":["you"],"stuff would":["help),"],"stuff\" in":["`word_count()`."],"stuff) ?":["A"],"stuff). Why":["would"],"stuff, recommended":["the","the"],"stuff. It":["also"],"stuff. The":["pythonic"],"stuff.. I":["was"],"stumped on":["how"],"stupid type":["check."],"stupid, not":["sure"],"style \"preparing\"":["the"],"style (newline":["after"],"style (though":["that"],"style --":["I"],"style I":["think."],"style `str.isupper(sentence)`,":["use"],"style above.":["Bah."],"style across":["projects"],"style and":["idiomatic","new","logic"],"style can":["be"],"style checker":["as"],"style choice,":["there","there","there"],"style class":["stuff.","inherit","which"],"style classes":["for","by","in","in","in","are","in","in","in","in","in","in","in","in","in","in","in","by","in","in","by","vs","(inheriting","by","by"],"style classes,":["so"],"style classes.":["See","I","In"],"style classes](http://realmike.org/blog/2010/07/18/introduction-to-new-style-classes-in-python/).":["In"],"style conventions.":["PEP-8"],"style discussion":["are"],"style except":["compatibility?"],"style for":["the"],"style guide":["recommends"],"style guide,":["aka"],"style guidelines":["aka"],"style guidelines,":["aka"],"style guidelines.":["Anyway,"],"style in":["Python?"],"style is":["quite","going","the"],"style note":["-"],"style object":["inheritance."],"style objects":["but"],"style over":["the","the"],"style python":["classes:"],"style readability":["with"],"style related":["nitpick"],"style there":["or"],"style though":["in"],"style uses":["too"],"style with":["a"],"style your":["Python"],"style\" classes":["in","by"],"style, I":["guess."],"style, but":["silencing"],"style, probably,":["as"],"style, since":["you're"],"style. It":["may"],"style](http://ssdl-wiki.cs.technion.ac.il/wiki/index.php/Spartan_programming)'s follower,":["I"],"style](https://docs.djangoproject.com/en/1.5/internals/contributing/writing-code/coding-style/#python-style), but":["I"],"styling, especially":["with"],"stylistic python,":["but"],"sub `(\"ACGT\",":["\"ACGU\")`."],"sub to":["prevent"],"sub you":["could"],"sub-class of":["Bob"],"sub-classes. `__class__`":["accesses"],"sub-classing attributes":["to"],"subclasing `object`":["in","on"],"subclass (`BobStockTrader`)":["could"],"subclass Counter":["and"],"subclass `object`":["and","as"],"subclass `object`,":["and"],"subclass `str`":["again."],"subclass and":["a"],"subclass form":["`object`"],"subclass from":["`object`?","`object`."],"subclass object":["and"],"subclass of":["`dict`,","```object```,","`str`","str","`str`","`str`","`str`),","dictionary.","dict)."],"subclass something":["like"],"subclassed. It":["could"],"subclasses of":["Bob"],"subclasses\". Bob":["and"],"subclassing (hint:":["since"],"subclassing `Counter`":["by"],"subclassing `object`":["because","because"],"subclassing `object`.":["`nucleotides`"],"subclassing `str`":["allows"],"subclassing, it":["probably"],"subclassing. I":["very"],"subject to":["[*name"],"subjective I":["guess"],"subjective merits":["or"],"submission 2.":["I"],"submission from":["a"],"submission keeps":["it"],"submission only":["after"],"submission when":["it"],"submission, I":["almost"],"submission, which":["doesn't"],"submission. I":["continued"],"submission. It's":["broken."],"submissions I've":["seen!"],"submissions been":["two-space-indents?"],"submissions call":["it"],"submissions needing":["review"],"submissions to":["help"],"submissions were":["using"],"submit (shell":["fumble)."],"submit another":["update"],"submit command":["had"],"submit it...":["sigh!"],"submit one":["with"],"submit some":["\"better"],"submit something":["new"],"submitted a":["real","new","much","new","refactor"],"submitted another":["one","iteration"],"submitted code":["through"],"submitted code.":["Not"],"submitted earlier":["albeit"],"submitted it":["for","then."],"submitted so":["far,"],"submitted the":["test"],"submitted this":["for","for","code"],"submitted. The":["only"],"submitted. Very":["new"],"submitting anyway":["because"],"submitting the":["exercise?","new"],"submitting version":["4"],"subroutine, even":["though"],"subroutines \"private\"":["though."],"subroutines are":["pretty"],"subroutines on":["6,"],"subroutines should":["be"],"subscribe to":["it.","friends'"],"subsequently serving":["cached"],"substitute punctuation":["characters"],"substitute strings":["to"],"substituted for":["some"],"substitution, and":["the"],"substring matches":[":)"],"substring, take":["a"],"substring. Take":["a"],"substring. `elif`s":["are"],"subtle (inscrutable?":["possibly"],"succinct and":["clear."],"succinct code.":["Should"],"succinct, I":["think"],"succinct, and":["it"],"succinct. Also,":["it"],"succinctly said":["as"],"succinctness of":["this"],"succint although":["finditer"],"succint for":["that"],"succint like":["that:"],"succint method":["to","to","to","to"],"succint methods":["to","to"],"succint with":["list"],"succint, but":["maybe"],"succint. I":["don't"],"succintly. There":["are"],"such (by":["using"],"such a":["nice","cool","simple","feature","simple","great","case?","simple","waist","way.","small","simple"],"such an":["operation"],"such as":["`Person`","Python,","[`isupper`](http://docs.python.org/2/library/stdtypes.html#str.isupper).","this","`\"?\"","`if","in","`replace`","the","`word_count`","`most_common`","comparing"],"such case":["you"],"such easy":["task","task."],"such fashion,":["that"],"such irrelevant,":["orthogonal"],"such long":["name"],"such low":["level"],"such purposes":["python"],"such simple":["case.","case"],"such small":["examples"],"such sophisticated":["techniques,"],"such test":["example"],"such test,":["but"],"such that":["if","XYZ\"."],"such that\",":["but"],"such they":["do"],"such thing":["as","as","as"],"such things":["as"],"such, the":["`not"],"such, they":["are"],"suffice (double":["is"],"suffice, not":["to"],"sufficed -":["now"],"sufficient and":["winds"],"sufficient for":["`is_silence`,"],"sufficiently clear.":["I"],"suffix of":["a","a","a","a"],"suffixes `.endswith()`":["is"],"suffixes were":["for"],"sugar) becomes":["an"],"suggest connecting":["conditions"],"suggest going":["on"],"suggest just":["replacing","doing"],"suggest list":["comprehension)"],"suggest making":["'Whatever.'"],"suggest marking":["this"],"suggest moving":["some"],"suggest replacing":["the"],"suggest taking":["a","a"],"suggest that":["they"],"suggest they're":["private?"],"suggest this":["small"],"suggest to":["explore","change"],"suggest using":["only","str.endswith('?').","either"],"suggest you":["a"],"suggest. Maybe":["it"],"suggest? I'm":["not"],"suggested getting":["rid"],"suggested in":["the"],"suggested that":["instead"],"suggested to":["me"],"suggested, but":["I"],"suggested, defining":["at"],"suggested. I":["considered","also"],"suggesting making":["them"],"suggesting not":["using"],"suggesting that":["copying"],"suggesting that,":["given"],"suggestion but":["you","I"],"suggestion from":["someone"],"suggestion in":["point"],"suggestion is":["to","to","exactly"],"suggestion might":["be"],"suggestion of":["removing"],"suggestion to":["use","check"],"suggestion very":["much."],"suggestion was":["pretty"],"suggestion you":["should"],"suggestion, as":["well"],"suggestion, assuming":["it's"],"suggestion, there's":["no"],"suggestion. Is":["there"],"suggestion; code":["just"],"suggestions @georgette.":["Not"],"suggestions @mabel.":["I'm"],"suggestions all.":["I"],"suggestions are":["based"],"suggestions from":["Nit"],"suggestions if":["you"],"suggestions in":["the"],"suggestions into":["account,"],"suggestions of":["`msg`"],"suggestions though,":["thanks."],"suggestions to":["simplify"],"suggestions. Those":["are"],"suggests an":["in-place,"],"suggests examining":["your"],"suggests only":["one"],"suggests snake":["case"],"suggests that":["they"],"suggests to":["make","use"],"suitable I":["think."],"suitable data":["structure"],"suitable getter":["and"],"suite and":["hope","hope"],"suite does":["not"],"suite for":["this"],"suite forces":["me"],"suite gives":["yelling"],"suite have":["only"],"suite in":["Python"],"suite is":["missing"],"suite isn't":["our"],"suite only":["calls"],"suite to":["me","the","the"],"suite was":["looking"],"suite, but":["anyway,"],"suite, if":["it"],"suite, it":["does","does"],"suite. The":["other"],"suited class":["in","in"],"suited methods":["with"],"sum([x0 !=":["x1"],"summarize you":["regex"],"summarize, you":["would"],"summary line":["may"],"super approachable":["either)."],"super cool":["Python"],"super over-engineered":["solutions"],"super() keyword":["(i.e."],"super() methods)":["or"],"super-awesome functions":["-"],"super-explicit and":["you"],"superclass', not":["just"],"superficial. But":["I"],"superfluous parentheses":["in"],"superfluous. I":["think"],"superfluous? Does":["line"],"supply the":["exception"],"support code":["reuse)."],"support for":["boolean","computed","computed","FP"],"support multiple":["source"],"support that":["comes"],"supported multiple":["source"],"supports all":["the"],"supports them,":["so"],"supports unicode":["character"],"suppose I'm":["being","not"],"suppose minimizing":["the"],"suppose my":["mind"],"suppose that":["you","would","the"],"suppose that's":["what"],"suppose the":["alternative"],"suppose. If":["this"],"supposed to":["have","be","do","be","be","be"],"sure I":["understand","understand","like","understand","understand","agree","correctly"],"sure `Word.original`":["and"],"sure ````statement````":["isn't"],"sure `msg`":["was"],"sure about":["style","using","`_normalize_silence`","text","response","`safe_strip`","attaching","speech"],"sure actually.":["But"],"sure break":["those"],"sure how":["you","I","I","you","attribute","many","to","expressive","I","easy","else","to"],"sure if":["that","I","`r'[^\\w\\s]'`","we","```","```","I'm","I","I","I'm","it's","we","any"],"sure it":["would","is","would","adds","matters.","will","is"],"sure it's":["not","easy","worth","simpler,","clear","clear","all"],"sure looks":["smart..."],"sure making":["`FormattedWord._sorted`"],"sure number-only":["messages"],"sure of":["the","what"],"sure packing":["the"],"sure some":["attribute"],"sure that":["`question`","there's","an","I","I","no","```","your","the","I'm","was","your","`Phrase`","it's"],"sure the":["indentations","instance's","best","guard"],"sure there's":["a","a","a"],"sure this":["is","was"],"sure to":["specify"],"sure we":["have"],"sure what":["the","else","to","the","I","to","it","some"],"sure what's":["the"],"sure whats":["the"],"sure which":["are","way"],"sure why":["I","I","I","you"],"sure you":["knew","really","don't","_do_","pass","need","only"],"sure' responses":["are"],"sure, but":["that's","I"],"sure, if":["I"],"sure, though,":["that"],"sure, use":["of"],"sure. Doing":["that"],"sure?\", or":["\""],"surely a":["better"],"surprise for":["a"],"surprised at":["first."],"surprised by":["the"],"surprised how":["concise"],"surprised if":["the"],"surprised that":["in"],"surprised to":["see"],"surprised. Nicely":["done."],"surprises about":["standard"],"surprises me":["and"],"surprising. My":["huge"],"surprising. To":["me,"],"surround comparisons":["(=="],"surrounding it":["to"],"swap one":["for"],"swapped out.":["I"],"sweet suggestion;":["code"],"sweet. I":["hadn't"],"sweet. The":["big"],"switch between":["Python"],"switch statement":["instead"],"switch to":["avoid"],"switched back":["and"],"switched over":["to"],"switched to":["Ruby","a"],"switching from":["good"],"symbol and":["use"],"symbolic (pseudo)":["constants"],"symbols as":["non"],"symbols outside":["class"],"symbols that":["changes."],"symbols themselves":["are"],"symmetrical, and":["also"],"symmetry, but":["I'll"],"symptoms that":["the"],"synonymous. __all__":["limits"],"syntactic sugar)":["becomes"],"syntactically necessary,":["I"],"syntatically. string.join(separator)":["would"],"syntax (as":["you"],"syntax and":["grammar,"],"syntax appears":["pretty"],"syntax because":["it"],"syntax error":["in"],"syntax for":["that."],"syntax has":["been"],"syntax instead":["of"],"syntax is":["recommended","a"],"syntax of":["creating"],"syntax, in":["3.x"],"syntax, the":["difference"],"syntax-driven book)":["and"],"syntax. \"I":["can"],"syntax. It":["is"],"syntax. Maybe":["''.join()"],"system and":["not"],"system removes":["useless"],"system wanted":["a"],"system's entry":["point."],"system. It":["makes"],"system. True,":["I'm"],"t does":["nothing"],"t for":["short."],"t-shirt... The":["for"],"table and":["it"],"table as":["a"],"table for":["punctuation"],"table in":["a"],"table instead":["of"],"table is":["not","darn"],"table to":["explicit"],"table would":["be"],"table. Do":["you"],"table. I":["kind"],"tables (one":["for"],"tabs and":["especially"],"tabs vs.":["spaces"],"tag member":["attribute"],"tail recursion":["to"],"take (questions,":["yelling"],"take a":["look","look","look","look","look","look","look","look","list","look","look","`Word`","lot","look","look","look","while","look","look","look","look"],"take advantage":["of","of","of","of"],"take another":["look","`FormattedWord`","```","look","look"],"take care":["of","of"],"take into":["account","account"],"take it":["as","further,"],"take much":["space,"],"take on":["it"],"take one":["bottle"],"take only":["the"],"take precedence":["over"],"take that":["with"],"take the":["exact","re","\"isEmpty()\""],"take them":["for"],"take this":["approach,","all"],"take up":["space"],"take using":["named"],"taken a":["look"],"taken care":["of"],"taken functions":["that"],"taken out":["during"],"taken to":["guard"],"takes a":["string","string.","predicate,"],"takes care":["of"],"takes care,":["later,"],"takes inputs":["and"],"takes into":["account"],"takes precedence":["over"],"takes up":["less"],"takes you":[":)"],"taking a":["string","`FormattedWord`","look","look"],"taking here,":["but"],"taking place":["in"],"taking that":["list"],"taking the":["time","long","dna","time"],"taking your":["time!"],"talk about":["converting","it."],"talkative for":["it"],"talked away":["from"],"talking about":["extra","storing","sequences","better,","`Language`","the"],"talking about,":["and"],"talking about.":["One"],"tally{} as":["a"],"tampering. While":["using"],"tangential stuff":["which"],"target and":["each"],"task and":["not"],"task in":["roughly"],"task involve":["multiple"],"task is":["simplistic"],"task was":["much"],"task you":["are"],"task, but":["I","I'm"],"task. I":["can't"],"task. Simple":["yet"],"tasks in":["[fabric](http://fabfile.org).)"],"taste but":["i"],"taste isn't":["good"],"tastes) and":["it's"],"taught me":["that"],"tbh, I'm":["not"],"teaching python,":["so"],"technical POV":["but"],"technical objects.":["As"],"technically correct":["implementations"],"technically correct,":["it"],"technically important":["for"],"technically the":["very"],"technically tuples,":["not"],"technically you":["can"],"technically, `Counter`":["also"],"technique (JavaScript-ish).":["But"],"techniques, but":["whatever"],"techniques. In":["this"],"teenager changes":["his"],"teenager would":["reply"],"tell Bob":["anything"],"tell `re`":["that"],"tell an":["anagram."],"tell anything":["about"],"tell better":["story"],"tell for":["sure..."],"tell me":["what","what"],"tell that":["Bob"],"tell them":["apart?\")"],"tell user":["of"],"tell what":["they"],"tell you":["to","most"],"tellBob would":["be"],"telling everyone":["about"],"telling it":["what"],"telling to":["try"],"tells a":["lot"],"tells the":["story","story"],"template variable":["to"],"templates actually":["makes"],"templating abstraction":["but"],"templating stuff":["(pluralizing"],"temptation to":["guess.\"","guess.\""],"tempted to":["set","split"],"tend not":["to"],"tend to":["stick","see","have","think","over","stick","do","do","leave"],"tendency to":["use"],"term \"alphagram\"":["is"],"term for":["this.","a"],"terminates the":["execution"],"terms like":["\"shouting\"","\"shouting\"","\"say"],"terms of":["performance","\"do","what","other"],"terrible name":["anyway"],"terrible regex":["stuff"],"test \"message":["=="],"test \"work\")":["is"],"test (`.isupper()`":["understands"],"test -":["you"],"test `Counter(self._word)":["=="],"test `self.message`":["against"],"test `text.isupper()`":["tests"],"test a":["string","string","string"],"test against":["`None`","`None`","`None`","`None`","`None`","`None`"],"test an":["expression,"],"test and":["the","that"],"test by":["typing"],"test case":["but","impose","clearly","`Fine,","doesn't","mandates","mandates","has","where","for","drove","for"],"test cases":["threw","expect,","require","all","showed","included.","but","require","pass.","wrong?","are","enforce"],"test cases).":["The"],"test cases.":["I'd","Though,"],"test cases?":[":)"],"test chain,":["and"],"test conditions":["without"],"test could":["have"],"test coverage":["and"],"test demanded":["a"],"test every":["character"],"test example":["here."],"test explaining":["what"],"test file":["I"],"test for":["your","yelling","not","`is_silent`","strings;","`is_shout()`","an","silence","multiple","uppercase","ALL","1900","an","an"],"test framework":["and"],"test functions":["to","should","do"],"test helpers":["to"],"test if":["all","the"],"test in":["the","`_checkForNoContent`"],"test is":["about?","written"],"test like":["`Anagram('banana').match(['Banana'])`."],"test may":["be"],"test methods":["like","are"],"test on":["both"],"test provided":["doesn't"],"test requirements":["would"],"test separately":["modulo"],"test shorter":["(using"],"test should":["name"],"test some":["expression,"],"test sorry":["about"],"test string":["suffixes"],"test strings":["for"],"test such":["as"],"test suite":["for","in","does","to","gives","is","isn't","was","to","and","to","and","forces","only"],"test suite,":["it","it","but","if"],"test suite.":["The"],"test that":["uses"],"test the":["string?","predicates","silence","phrase","last"],"test them":["separately,"],"test then,":["I"],"test thing,":["I"],"test to":["fail.","include","match"],"test when":["I"],"test where":["string"],"test whether":["the"],"test with":["160"],"test you":["check","can"],"test, ```if":["input"],"test, an":["alternative","empty"],"test, because":["it's"],"test, but":["your"],"test, not":["sure"],"test, response":["in"],"test-cases also":["involve"],"test-cases this":["breaks"],"test. If":["I"],"test? Am":["I"],"test? It":["looks"],"test_cases didn't":["match"],"test_forceful_questions ```,":["but"],"test_normalize_case(), don't":["i?"],"test_only_numbers (`":["'1,"],"testable (you":["can"],"testable solution":["for"],"testcase requires),":["but"],"testcase, but":["it"],"tested expression":["directly?"],"tested first":["then"],"tested first.":["What"],"tested for":["too."],"tested if":["needed."],"tested in":["the"],"tested that":["'ASFSF123213'.isupper()"],"tested using":["method"],"tested) also":["work."],"tested. Then":["the"],"testing -":["how"],"testing a":["string","string"],"testing against":["None","`None`"],"testing all":["characters."],"testing for":["the","a","an"],"testing for,":["and","and"],"testing for.":["Since"],"testing if":["the"],"testing object":["for"],"testing self.silent()":["in"],"testing strings":["for"],"testing the":["end","example"],"testing this":["out,"],"testing to":["see"],"testing whether":["a"],"testing, not":["equality."],"tests -":["that"],"tests I":["have","throw"],"tests a":["statement"],"tests all":["of"],"tests and":["answers,","the","responses","fix","struggling","not"],"tests are":["laid","very","the","laid","flawed","kind","made","all","simple"],"tests aren't":["written"],"tests as":["you"],"tests at":["all."],"tests because":["it"],"tests but":["seem","does","maybe"],"tests consider":["it"],"tests could":["be"],"tests define":["only"],"tests didn't":["required"],"tests do":["require"],"tests fail":["on"],"tests fail,":["you"],"tests failing":["because"],"tests fails:":["self.bob.hey('4?')"],"tests feel":["as"],"tests file,":["the"],"tests for":["this","this","this","it.","that","a"],"tests from":["PEP8","the"],"tests functions":["make","instead"],"tests had":["already"],"tests have":["changed"],"tests in":["the","the","the","the","'bob_test.py':","0.001s","0.001s","separate"],"tests into":["functions","their","their","functions","standalone"],"tests on":["the"],"tests only":["public"],"tests or":["the","coverage"],"tests out":["into"],"tests pass":["without","for","fine","and"],"tests pass,":["but","some","but","and"],"tests pass.":["As","But","Now","I"],"tests passes":["None"],"tests recently":["and"],"tests seemed":["to"],"tests specify":["that"],"tests that":["I"],"tests to":["dedicated","private","be","pass","fail."],"tests were":["poorly","class","passing!","passing!"],"tests when":["there"],"tests whether":["there"],"tests will":["cover"],"tests with":["umlauts"],"tests would":["make","fail"],"tests) that":["the"],"tests, I":["would"],"tests, and":["any"],"tests, but":["also","would","is","I","avoiding"],"tests, it":["became","makes"],"tests, or":["would"],"tests, probably":["I"],"tests, should":["be"],"tests, so":["good"],"tests, specifically":["`test_detect_simple_anagram`,"],"tests, the":["other"],"tests, you'd":["lose"],"tests. But":["as"],"tests. If":["you"],"tests. The":["tests","other","other"],"tests. When":["I"],"tests. While":["you're"],"tests? I":["suppose","have"],"tests? Parentheses":["in"],"tests? Perhaps":["your"],"tests? This":["is"],"text !=":["None`?"],"text (couplet":["and"],"text IO":["difficult."],"text ```":["is"],"text and":["`s`,"],"text as":["`phrase`."],"text contains":["spaces"],"text for":["you"],"text in":["the"],"text is":["either","uppercase","uppercase","None`.","not","all"],"text just":["contains"],"text manipulation":["and"],"text or":["\"\"`.","\"","text.isspace()`"],"text processing":["in","helper"],"text processing.":["So"],"text should":["be,"],"text was":["None"],"text you":["say"],"text, he":["has"],"text, you'd":["know"],"text, your":["helper"],"text.endswith('?')` is":["that"],"text.isspace()` to":["check"],"text.strip() -":["you"],"text.strip() ==":["''"],"text.upper() and":["len(text.strip())"],"text.upper() make":["the"],"text[-1] ==":["'?'"],"text[-1] can":["give"],"text` instead":["of"],"text` into":["`is_scream(text)`-like"],"text` is":["valid"],"text``` intuitively":["seems"],"text```, it'll":["return"],"texts in":["constants"],"texts which":["will"],"than \"blah":["is"],"than \"if\"":["when"],"than \"what":["is"],"than 'is_question'.":["On"],"than 0":["=\u003e"],"than 10":["functions","functions"],"than 80":["chars?"],"than \u003ccode\u003enot":["words.strip()\u003c/code\u003e."],"than I":["thought.","do,"],"than `==`,":["but"],"than `Bob`":["because"],"than `None`":["or"],"than ```len(text)":["=="],"than ``hey``.":["``hey``"],"than `if":["len(sentence)","count.get(lword)`.","s.strip():`"],"than `input`":["to"],"than `ipt`":["and"],"than `message.split()`":["(hey,"],"than `re.findall`":["?"],"than `re.match`,":["which"],"than `s`.":["(This"],"than `self`":["(or"],"than `sorted`":["wrt/"],"than `step":["="],"than `str1`?":["Is"],"than `string`":["for"],"than a":["mixture.","regex","few","single","`Bob`","plain","function.","function,","single","simple","real"],"than an":["equivalent"],"than anything":["else)"],"than as":["methods"],"than at":["the"],"than camelCase":["for"],"than classes":["(e.g."],"than code.":["And"],"than comments":["sprinkled"],"than comparing":["with"],"than creating":["a","8"],"than dealing":["with"],"than doing":["it","it"],"than each":["word"],"than expected.":["It's"],"than explicitly":["iterating"],"than external":["modules"],"than first-try.":["Might"],"than have":["to"],"than having":["a","to","it"],"than how":["it's"],"than if's?":["I've"],"than ignoring":["it?"],"than implicit":[":P"],"than importing":["re"],"than in":["Ruby."],"than incrementing":["a"],"than indexing/slicing.":["Both"],"than instantiating":["it"],"than it":["was.","needs","needs"],"than iterating":["over"],"than just":["passing","as","having","a","using"],"than letting":["the"],"than making":["one"],"than many":["well-named"],"than method":["count"],"than mine.":["Didn't"],"than my":["attempts"],"than necessary":["to","for"],"than necessary?":["It's"],"than object-oriented":["way:"],"than object-oriented.":["Perhaps"],"than once":["sentence.","in","--"],"than once,":["I"],"than one":["function","string.","!).","character","line.","character"],"than one-method":["classes,"],"than prompt[-1]":["=="],"than providing":["them"],"than putting":["[two"],"than questions,":["so"],"than regular":["expressions.","shouting?"],"than scanning":["for"],"than set":["instance"],"than shouting":["or"],"than simple":["method"],"than simply":["see","replacing","performing"],"than some":["rigid"],"than sort":["(n"],"than sorting":["characters"],"than standardized":["formatted"],"than striping":["and"],"than stripping":["and"],"than syntax":["and"],"than syntax-driven":["book)"],"than that":["it"],"than that,":["it","looks","well,","but","interesting","looks","looks","quite","your","it","looks","looks"],"than the":["more","first","first","previous","DNA","bad","built-in","ones","string","\"simple\"","string","alternative","Counter","`str`","online","*absence*","others","more","`result`"],"than this":["--"],"than this.":["Look"],"than to":["spare","have","make","make","make","make","make","make","make"],"than trying":["to","to"],"than using":["`@jairo`","a","if"],"than version":["2."],"than versions":["1"],"than what":["I","I'm","is","I","it","this"],"than you":["actually","assume.","might"],"than your":["type","first"],"thank you":["for",":D","for","kindly","for"],"thank you!":[";)","I"],"thank you.":["I","It's","Your"],"thanks \"batteries":["included\"!"],"thanks for":["the","the","your","your","the","your","the","the","pointing","pointing","all","pointing","the","the","the","the","the","your","feedback","the","the","giving","all","the","the","taking","the"],"thanks so":["much"],"thanks to":["`string.isupper`"],"thanks you":["both"],"thanks! :)":["My"],"thanks, didn't":["know"],"thanks, those":["were"],"thanks, will":["do."],"thanks. I":["was"],"thanks. Really":["liking"],"thanks. great":["catches!"],"that \"DNA":["is"],"that \"T\"":["and"],"that \"return":["not"],"that 'ASFSF123213'.isupper()":["would"],"that (and":["the"],"that (even":["if"],"that *is*":["my"],"that *uppercase*":["means"],"that :)":["Good"],"that Bob":["is","will"],"that CPython":["caches"],"that Counter":["is","is","is"],"that DNA":["objects"],"that DSL":["argument"],"that Greeting":["(which"],"that I":["learned","am","meant","don't","could","did","like","should","like","agree.","didn't","shouldn't","look","should","have","would","want","use","would","didn't","think","have","haven't","should","am","did","can","could","have","could","put","cheat","haven't","was","should","am","have"],"that I'd":["not"],"that I'm":["outside","not","not"],"that IMHO":["the"],"that It":["will"],"that I–":["and"],"that Python":["fits","has","has","functions","has"],"that Python's":["functions","classes"],"that Statement":["is"],"that `Counter`":["returns"],"that `DefaultResponder`":["comes"],"that `Message.content`":["is"],"that `None`":["is"],"that `Phrase._normalize`":["could"],"that `Phrase`":["receives"],"that `__foo`":["is"],"that `_words`":["should"],"that ```":["_neutral_response","text","is_anagram_of"],"that ````None````":["is"],"that ```getaddr```":["is"],"that `dirtyinput`":["is"],"that `elif`/`else`":["makes"],"that `isupper`":["would"],"that `len`":["with"],"that `message`":["isn't"],"that `number`":["is"],"that `question`":["is"],"that `re.findall`":["would"],"that `return":["not(message"],"that `s`":["is"],"that `self.__foo`":["will"],"that `self.nucleotides.replace(\"T\",\"U\")`":["would"],"that `self.sequence`":["is"],"that `str.isupper`":["does"],"that `str.translate()`":["can"],"that `translate`":["method"],"that `word_count`":["would"],"that `word`":["is"],"that a":["lot.","bit","simple","string","file","value","unused","string","developer"],"that abstracting":["something"],"that adenine":["maps"],"that against":["extracting"],"that all":["caps","related","attributes","the","helper","caps","sides"],"that alphagram":["is"],"that always":["returns"],"that an":["empty","empty","empty","empty"],"that anagrams":["were"],"that and":["used","update","even"],"that anything":["else"],"that approach":["is"],"that are":["included","not","not","a","located","the","named","expressive,","the","shouted","more","_ambiguous_","hard"],"that aren't":["digits,"],"that argued":["that"],"that as":["a","well?"],"that aspect,":["and"],"that at":["the","least"],"that attributes":["were"],"that avoided":["hardcoding"],"that avoids":["naming"],"that bad":["for"],"that basis":["you"],"that be":["useless","good","better?","better?","better","clarified?","more"],"that begin":["with"],"that binds":["a"],"that bob":["receives,"],"that both":["accomplish"],"that branch":["you"],"that branching":["is"],"that break":["the"],"that but":["couldn't"],"that by":["breaking","default,"],"that can":["replace","be","be","accomplish","be","count","help","continue","be","be","also","be","be","be","check"],"that case":["btw).","would","you","you","you","you'll","it","you"],"that case,":["`Bob.responders`","that's","you","``list.__contains__``"],"that change":["and","the","easier."],"that changed":["my"],"that changes":["the"],"that changes.":["This","What's"],"that cheating":["for"],"that check":["for","on"],"that checked":["to","to","to"],"that checks":["for","if","for"],"that class":["initialization."],"that class'":["API."],"that class).":["This"],"that cleaning":["the"],"that clearly":["shows"],"that code":["readability"],"that code,":["see"],"that combines":["non-alpha"],"that come":["built"],"that comes":["from","n"],"that comfortable":["with"],"that comment":["on","almost"],"that commenting)":["because"],"that comments":["beyond"],"that conditions":["don't"],"that consistent":["usage"],"that constant.":["Would"],"that copying":["is"],"that cost":["of"],"that could":["help","help","be","help","be","be","be","be","as","be","possibly","have","make","significantly","solve","be"],"that creates":["a"],"that decision":["but"],"that dedicating":["a"],"that definitely":["cleans"],"that describes":["what's","context","well"],"that description.":["So"],"that dictionary":["and"],"that didn't":["dig","work."],"that different":["people"],"that direction":["since"],"that documenting":["what"],"that does":["blow","check","not","not","all","something"],"that doesn't":["meet","exactly","use","change","use","exist,"],"that don't":["work","need","need"],"that double":["underscore"],"that double-underscore":["is"],"that duplication":["after"],"that e.g.":["the"],"that each":["test"],"that early":["on."],"that effect":["clarity?"],"that efficiently":["in"],"that either":["it"],"that embedding":["answer"],"that empty":["strings","strings","strings","strings","strings","strings","strings","strings","string","strings"],"that evaluates":["to"],"that even":["work?"],"that everybody":["is"],"that evident":["but"],"that exception,":["however."],"that extra":["class."],"that fails":["this"],"that feels":["like"],"that felt":["as"],"that fewer":["unnecessary"],"that filter":["is"],"that fits":["you"],"that flat":["is"],"that for":["you.","this","the","the"],"that function":["do"],"that generally":["shouldn't"],"that generators":["could","may"],"that gives":["you"],"that giving":["nucleotides"],"that goes.":["Updated."],"that going":["into"],"that got":["0","0","0"],"that gotcha":["from"],"that had":["two"],"that hard,":["makes"],"that has":["quite","a","fewer"],"that have":["a"],"that help":["explain"],"that helpers":["are"],"that helps":["to","to","emacs"],"that helps!":["I"],"that here:":["http://stackoverflow.com/a/54873/477048","http://stackoverflow.com/a/54873/477048"],"that holds":["the"],"that how":["you"],"that i":["discovered"],"that if":["hey()","the","silence","the","my","`if","there","the"],"that implement":["the"],"that import.":["Otherwise,"],"that in":["the","all","`__init__`?","mind","Python","Python","the","my","the","this","python.","my","the","this","mind","Python","explicit","Clean","the"],"that increase":["the"],"that instead":["of"],"that internal":["state"],"that is":["more","pointless.","deff","going","with","2.x","in","was","the","required","the","clear","probably","OK.","not","not","a","wasteful,","now","very","`pass`.","sorted","to","recursively","important","to","specific"],"that isn't":["one","an","how","a","the","immediately"],"that isupper()":["already"],"that it":["will","is","would","is","implements","checks","will","should","is","returns","doesn't","feels","will","is","looks","is","is","returns","needs","is","modifies","shouldn't","is","has","would","will","seems","will","gets","only","works","would"],"that it's":["the","a","obvious","completely","harder","false","not","about","ok","implemented","__short__,","**short**","**short**,","straight","less","an","quite","an","a","all","bad","an","overall"],"that iterating":["over"],"that its":["a","clear."],"that join":["is"],"that jumps":["off"],"that just":["me.","passes","using","did","work."],"that keeps":["the","right"],"that kept":["me"],"that kind":["of"],"that later":["cases"],"that length":["on"],"that lets":["you"],"that line":["to","16","18"],"that link":["isn't","explaining"],"that list":["and","any","comprehension,"],"that list.":["Since"],"that logic":["into","into","could","in"],"that long":["line"],"that looked":["wrong"],"that looks":["great","like","pretty"],"that main":["logic"],"that make":["sense?"],"that makes":["sense.","heavy","checks","tests","the","things","sense.","total","the"],"that match)":["from"],"that matched":["all"],"that matter,":["Bob","you"],"that matter.":["I"],"that may":["be","provide","be","be","be","make"],"that maybe":["the","this"],"that means":["I'm","that"],"that message":["classifiers","type"],"that messages":["that"],"that method":["chaining"],"that might":["make","not","make","be","make"],"that more":["intuitively"],"that most":["clearly","of","important","of"],"that much":["sense).","going","happening","about","of"],"that must":["always"],"that my":["elif's","solution"],"that myself,":["but"],"that naming":["could"],"that never":["became"],"that no":["functions","big"],"that non-public":["methods"],"that none":["of"],"that normally":["methods"],"that not":["extracting","what"],"that now":["you"],"that offsets":["this."],"that often":["in"],"that on":["my"],"that one":["should","has","big"],"that one,":["but"],"that one.":[":)"],"that only":["double","make","contained","one"],"that operates":["on"],"that our":["patterns"],"that out":["into","into"],"that out,":["I","```"],"that out.":["Using"],"that over":["from"],"that overhead":["is"],"that parameter":["\"message\""],"that particular":["API.","case,","case","case.","case.","operation","case."],"that passing":["anything","`True`"],"that performing":["a"],"that phrase":["as","was"],"that phrase.split()":["is"],"that point":["just","the","with"],"that potentially":["could"],"that predicates":["are"],"that problem":["cleanly.","cleanly."],"that process":["be"],"that project's":["[docstring"],"that projection":["(map)"],"that public,":["though"],"that python":["methods"],"that python's":["isupper()"],"that questions":["with"],"that readable.":["I"],"that reads":["better."],"that regular":["expressions","expression."],"that renamed":["the"],"that requires":["no","more"],"that result,":["you"],"that returning":["early","a"],"that returns":["an","`true`","an","true"],"that right?":["I"],"that said,":["I"],"that same":["name"],"that satisfies":["the"],"that says":["if"],"that seemed":["cleaner","(to","even"],"that seems":["to","cleaner."],"that semicolon":["has"],"that sent":["me"],"that separating":["things","the"],"that should":["be","be","be"],"that simple":["functions"],"that simply":["using","returns","`str.isupper()`"],"that since":["the"],"that slightly":["confusing"],"that somebody":["can","else"],"that somehow":["reflected"],"that someone":["left","suggested","who"],"that sort":["of"],"that starts":["to"],"that sticks":["out"],"that stores":["`str`."],"that string":["methods"],"that strings":["have"],"that strip()":["the"],"that stuff":["would"],"that suggests":["examining"],"that supports":["them,"],"that sure":["it"],"that takes":["care","a","up"],"that talk":["about"],"that tell":["what"],"that that":["isn't","was","would"],"that that,":["I"],"that the":["code","latter","comment","programmer","programmer","exercise","Message","exercism.io","code","other","variable","`yelling()`,","string","conditions","phrase","detail","doc","design","act","benefit","details","decision","code","message","difference","case","`for`","last","parentheses","first","precedence","attribute","attribute","argument","```","`in`","if","problem","keyword","caller","code","python","function","predicate","test","code","phrase","specification","input","spaces","number","situation","spec","nits","tests","example","same","order","checks","comments","regexes","tests","regular","sanity","case"],"that their":["order"],"that theme":["were"],"that there":["are","are","was","should","is","are","will","is","is","is"],"that there's":["a","a","a","a","very"],"that these":["cases","3","methods"],"that they":["are","could","force","are","provide","are","are","*are"],"that this":["code:","is","is","version","code","loses","code","was","code","iteration","problem","implementation","keeps","is","is"],"that those":["members","None","things,"],"that though.":["You're"],"that to":["`dna_string`"],"that translate":["deletes"],"that translating":["DNA"],"that try":["to"],"that two":["words"],"that ugly":["hack."],"that uncommon.":["I"],"that unnecessary":["in"],"that up":["from"],"that use":["case,"],"that uses":["`None`"],"that using":["elif's","`collections.Counter`.","all","such","`if"],"that variables":["be"],"that was":["a","possible.","simple","specifically","a","all","uttered,","there","called,","necessary.","written","a","interesting!","possible.","my"],"that way":["too:","obscures","but","too.","they"],"that way!\",":["which","notice"],"that way!,":["self.bob.hey(None)"],"that way\".":["It"],"that way,":["you","which"],"that way.\".":["So"],"that way.'":["twice."],"that way.`":["should","should"],"that we":["don't","create","don't","should","are","wanted"],"that we're":["talking"],"that went":["into"],"that what":["@molly","you"],"that when":["comparing","the","you","you","you"],"that whitespace":["still"],"that why":["prefer"],"that will":["clarify","help","help","make","be","be","a)","be","allow"],"that with":["iteration","this","a"],"that within":["the"],"that without":["`re`.","breaking"],"that word,":["but"],"that words[len(words)-1]":["does"],"that work":["just"],"that workaround":["would"],"that works":["for","well."],"that would":["also","make","make","help","make","make","require","be","be","be","be","have","eliminate","be","also","read","nonsense.","simplify","be","have"],"that wouldn't":["require"],"that yet!":["Do"],"that you":["gave.","wanted","only","create","mean","went","might","used","can","can","can","mention","are","don't","check","don't","were","have","call","call","precompute","reorder","would","don't","created","used","try","have","only","use","subclass","subclass","should","use","used","use","shouldn't","encapsulated","use","use","are","process","used","are","process","can't","can","are","are","want","normalize","normalize","went","use","need","can","embedded","included","use","leave","used","only","also","can"],"that you'd":["except","have","better"],"that you're":["not","looking","looking","meant","using","using","counting","iterating"],"that you've":["broken","moved","given","explored","used"],"that your":["code","way","string","Bob","`if`","testing","original"],"that –":["uracil"],"that! I":["first"],"that! I'd":["rather"],"that! There":["is"],"that\"), not":["as"],"that\", but":["this"],"that'll blow":["your"],"that'll make":["counting"],"that's OK":["to"],"that's Python's":["fault,"],"that's a":["matter","matter","very","very","meaningful","sensible","pretty","minor"],"that's all":["quite"],"that's clearer.":["I"],"that's definitly":["not"],"that's enough":["to"],"that's even":["more"],"that's exactly":["what"],"that's getting":["quite"],"that's good":["enough","way"],"that's just":["a"],"that's matter":["of"],"that's maybe":["just"],"that's meant":["to"],"that's minor":["details."],"that's more":["Python-like.","obvious"],"that's most":["likely"],"that's new":["in"],"that's nitpicking":[":)"],"that's not":["actually","something","Java","probably","a"],"that's nothing":["set"],"that's partly":["a"],"that's pretty":["much"],"that's probably":["a","religious"],"that's rather":["rare","a"],"that's really":["a","nitpicking."],"that's recommended":["way","way","way"],"that's something":["I"],"that's starting":["to"],"that's the":["point","problem","problem","pythonic","way","way","canonical"],"that's totally":["just"],"that's trade-off":["I"],"that's usually":["only"],"that's very":["clear!","intentional.","granular","possible","non-idiomatically","helpful!"],"that's what":["I","I","PEP","the","the"],"that's why":["I",":)","I"],"that's you":["six"],"that) the":["possibility"],"that). Please":["also"],"that, I":["guess","find"],"that, and":["I"],"that, but":["I","only","instead","then","this","wouldn't","the"],"that, given":["the"],"that, in":["the"],"that, instead":["of"],"that, interesting":["approach."],"that, it":["looks","looks"],"that, looks":["good.","good.","good","great","great"],"that, my":["```return```"],"that, or":["a"],"that, quite":["clean"],"that, some":["tiny"],"that, sorry,":["I"],"that, still":["have"],"that, they":["are"],"that, too.":["For"],"that, well,":["inline"],"that, you'll":["also"],"that, your":["solution"],"that. And":["of"],"that. But":["I","lowercasing"],"that. Care":["to"],"that. I":["could","would","dont","just","can"],"that. If":["the"],"that. Instead,":["I"],"that. That's":["really"],"that. The":["underscore"],"that. We":["discussed"],"that. Yes,":["it's"],"that: `order`,":["`joke`,"],"thats a":["one"],"thats why":["i"],"the \"#shout\"":["comment"],"the \"Fine...\"":["message.","strings."],"the \"Language\"":["used"],"the \"Make":["it","it"],"the \"None\"":["special"],"the \"Pythonic\"":["conventions"],"the \"Sure.\"":["response.","response."],"the \"Whatever\"":["response"],"the \"Whatever.\"":["case"],"the \"Woah,":["chill","chill"],"the \"action\"":["methods"],"the \"application\"":["class","class"],"the \"badly":["done\":"],"the \"basestring\"":["issue"],"the \"caching\"":["part"],"the \"catch":["all\""],"the \"community.\"":["I"],"the \"cond\"":["in"],"the \"continue\".":["I"],"the \"db\"":["at"],"the \"elif\"":["and"],"the \"elif\",":["or"],"the \"end\"":["of"],"the \"function":["call\""],"the \"if":["predicate()","not","not"],"the \"if/elif.../else\"":["part"],"the \"input":["sanitization\""],"the \"intensive\"":["computation"],"the \"isEmpty()\"":["etc."],"the \"isupper\"":["method"],"the \"len(string)":["\u003e"],"the \"magic":["numbers\""],"the \"messy\"":["part,"],"the \"not":["phrase.strip()\""],"the \"predicate":[":"],"the \"predicate\"":["system."],"the \"predicate-&gt;action\"":["pairs"],"the \"predicate-&gt;answer\"":["dispatch,"],"the \"premature":["optimization\""],"the \"real\"":["enum"],"the \"rules\",":["but"],"the \"sentence\"":["(not"],"the \"shouting\"":["response.","case."],"the \"silent":["failure\""],"the \"simple\"":["if/elif/else"],"the \"special":["case\""],"the \"standardized\"":["and"],"the \"string\"":["lib'd"],"the \"system\"'s":["entry"],"the \"type\"":["of"],"the \"word":["counting"],"the %":["formatting","formatting"],"the '":["'"],"the '.upper()'":["protection."],"the '='":["sign"],"the '?'.":["And"],"the 'ALL":["CAPS'"],"the 'Fine.":["Be"],"the 'Pythonic'":["way."],"the 'T'":["is","is"],"the 'U'":["and"],"the '_is_shouting'":["function..."],"the 'and'":["so"],"the 'bad'":["characters"],"the 'chill":["out'"],"the 'elifs'":["if"],"the 'empty'":["constructor,"],"the 'fine":["/"],"the 'framework'),":["not"],"the 'hey":["="],"the 'hey'":["function.","function"],"the 'if'":["and"],"the 'minimal":["initializer"],"the 'new":["style"],"the 'response":["list'"],"the 'silent'":["answer"],"the 'sorted'":["one)"],"the 'stronger'.":["In"],"the 'uppering'":["in"],"the (\"T\",\"U\")":["space"],"the (modulus,":["string)"],"the (optional)":["third"],"the *absence*":["of"],"the *best*":["but"],"the *presence*":["of"],"the .endswith('?')":["function"],"the .isupper()":["function"],"the 10th":["line,"],"the 1st":["argument"],"the 2":["empty"],"the 3":["if","checks"],"the 4":["had"],"the 5th..":[":P"],"the 80":["character","character","character"],"the \u003e0":["isn't"],"the ?":["at"],"the API":["should","is","by","is"],"the API:":["http://docs.python.org/2/library/stdtypes.html#string-methods"],"the Anagram":["class"],"the Bob":["object","API:","API","interface,","class","class","class","problem,","object.","class","instance.","exercise,"],"the Bob's":["internal"],"the C++/Java":["parlance"],"the C/C++/Java":["days,"],"the Counter":["to","is","for","library.","from"],"the Counter.":["I"],"the Couplet":["concept?"],"the DNA":["sequence","version.","class","class.","sequence\".","object","sequence","object","dict"],"the DNA,":["but","then","or?"],"the ETL":["exercise"],"the FineManual":["for"],"the FineManuel":["for"],"the GUI":["might"],"the Greeting":["class."],"the Javascript":["version,"],"the Message":["class","class","class."],"the None":["value"],"the NucleotideString":["class"],"the Nucleotides":["should"],"the OO":["approach."],"the OOP":["style."],"the One":["True"],"the Open/Closed":["principle"],"the PARAMETERS":["dictionary","dict","thing"],"the PEP8":[":)","references!"],"the PHP":["thing"],"the Phrase":["class","class,","class","class?"],"the ProductOwner":["comes"],"the Python":["code","discussion","idioms","problem.","way).","Style","Style","way).","community","way","Bob","standard","documentation,"],"the Pythonesque":["ideal"],"the README":["file,","confused"],"the README.md":["description.","disagree"],"the README?":["It's"],"the RNA":["in","version","version","sequence.","is"],"the Ruby":["version.","world","version","version...I","community,","world,"],"the Sentence":["stuff."],"the Statement":["class"],"the String#endswith":["method,"],"the T-U":["nucleotide."],"the US":["phone"],"the United":["States"],"the VoiceAnalysis":[";)"],"the [":["if"],"the [PEP-8":["guideline"],"the [PEP-8](http://www.python.org/dev/peps/pep-0008)":["and"],"the [one](https://github.com/kytrinyx/exercism.io/blob/master/assignments/python/bob/example.py)":["provided"],"the [regex](https://pypi.python.org/pypi/regex)":["package"],"the [single":["responsibility"],"the [string":["methods]"],"the __init__":["but","(I","would","method","function,"],"the __is_question":["and"],"the _message_is":["functions"],"the `":["isupper()`method."],"the `\"\".join(map(...))`":["is"],"the `\"Whatever.\"`":["case."],"the `.decode`":["is"],"the `.isupper()`":["method."],"the `.split()`":["into"],"the `==":["None`,"],"the `Anagram.match()`":["argument"],"the `Anagram`":["API.","class"],"the `Bob`":["class,","class","class.","class","class,","class?","class."],"the `Carl`":["idea,"],"the `Counter`":["constructor.","object"],"the `DNA`":["class,","class,"],"the `IndexError`":["from"],"the `Message`":["class"],"the `MethodDispatcher`":["class:"],"the `None`":["value","value.","default","check"],"the `Phrase.word_count`":["method,"],"the `PhraseTest`":["should"],"the `RNA_LOOKUP`":["classvar"],"the `Statement`":["you"],"the `VALID_RNA_NUCLEOTIDES`":["constant"],"the `WORDS`":["compiled"],"the `__init__`":["method","is","method,","function:"],"the `__init__`?":["`word_count`"],"the `__name__":["=="],"the `__new__`":["(or"],"the `_blank`":["method,"],"the `_is_shouting`":["method."],"the `_is_silence`'s":["declaration"],"the `_is_silent`,":["`_is_shouting`"],"the ``DNA``":["class","class","class"],"the ```":["else","responses","_words"],"the ```None```":["possibility"],"the ```hey```":["method,"],"the ```if":["/"],"the ```isupper()```":["method"],"the ```words```":["definition,"],"the ``nucleotides``":["parameter","parameter"],"the `alphagram`":["function"],"the `anagram`":["namespace"],"the `any()`":["clause"],"the `area_code`":["and"],"the `break`":["statement"],"the `class":["Phone(object):`"],"the `clean_phrase`":["method"],"the `clean_words`":["implementation:"],"the `collections.Counter`":["class","class"],"the `collections`":["module","module.","module,","module","module"],"the `continue`,":["it"],"the `count`":["method,"],"the `decode`":["is"],"the `defaultdict`":["method."],"the `del":["self.words['']`"],"the `del`":["is"],"the `differences`":["method"],"the `dispatch`":["function"],"the `elif/else`":["statements","statements"],"the `elif`":["is","a","and","since"],"the `else`":["statements","clause","branch","in"],"the `else`/`elif`?":["I"],"the `endsWith`":["method"],"the `endswith`":["method"],"the `filter()`":["?"],"the `filter(None..`":["and"],"the `findall`":["version","regexp"],"the `finditer`":["version"],"the `for`":["loop","loop","loop","loop","loop's","loop","loop","cycle"],"the `greeting`":["instance"],"the `hey()`":["method","method"],"the `hey`":["method","method","method","method","method","function?","function","method"],"the `if":["message.is_something():","word","predicate():","predicate():","predicate","predicate:"],"the `if..elif`":["construct","caseish"],"the `if`":["clause","chaining","and"],"the `if`to":["decide"],"the `import":["re`","re`"],"the `in`":["keyword"],"the `int`":["function."],"the `isEmpty`,":["`isQuestion`,"],"the `isSilence()`":["method"],"the `is_...`":["methods"],"the `is_anagram`":["method.","function."],"the `is_question`":["method."],"the `is_silent`":["function"],"the `is_yell`":["check"],"the `isspace`":["method,"],"the `isupper()`":["method","method;"],"the `isupper`":["method","and"],"the `join`":["call"],"the `len(letters)":["\u003e"],"the `letters.lower()`":["call"],"the `lower`":["method"],"the `match`":["function."],"the `message_is_*()`":["methods"],"the `msg":["is"],"the `not":["word`","said`"],"the `nucleotide_counts`":["method."],"the `number`":["field"],"the `phrase":["is"],"the `phrase`":["string","field"],"the `re.sub()`":["call"],"the `re`":["module","module","module"],"the `removeAll()`":["function"],"the `replace()`":["method"],"the `replace`":["method","method"],"the `response`.":["Finally,"],"the `responses`":["(predicate","list"],"the `result`":["variable."],"the `return":["action()`"],"the `return`":["statement","statement","in"],"the `self.RNA_MAP.get(char)":["or"],"the `self`":["argument.","argument,","argument)."],"the `sentence":["and"],"the `sides`":["list,"],"the `silent`":["`shouting`"],"the `sorted(seq)`":["function"],"the `split`":["method."],"the `standardize`":["and"],"the `str(self.text)`":["for"],"the `str(statement)`":["expression"],"the `str.format`":["method."],"the `str.isupper()`":["method,","method."],"the `str.replace()`":["method"],"the `str`":["methods","object.","type,","type.","type","type","type","class","type,","class","type,","comment,","class","class"],"the `string`":["module","module","module.","class","module"],"the `timedelta`":["with"],"the `to_rna`":["function:","method"],"the `translate`":["method"],"the `try`/`except`":["necessary?"],"the `upper()`":["transforms"],"the `verse`":["and"],"the `word_sort`":["method"],"the `words`":["parameter"],"the `yelling()`,":["`question()`,"],"the abbreviation.":["Thus"],"the absence":["of"],"the act":["of"],"the action":["should"],"the actual":["goal","operation","production","requirements*","approach","names","exercise!","context."],"the added":["bonus"],"the adding":["new"],"the addition":["of"],"the additional":["clarity"],"the advantage":["of"],"the advice":["about","about"],"the advice,":["it"],"the advices":["again."],"the algorithm":["required"],"the algorithm.":["I"],"the allCaps":["function."],"the allocation":["of"],"the allowed":["alphabet"],"the alphagram":["and","and","of","of"],"the already":["existing"],"the alternate":["syntax."],"the alternative":[":-)","might"],"the always":["practical"],"the amount":["of","of"],"the anagram":["detection","were","is","list","and","characters","\"detecting\""],"the analysis":["of"],"the ancestor":["class,"],"the answer":["from"],"the answers":["would","and"],"the answers.":["Then"],"the anwer.":["Read"],"the appeal":["of"],"the application":["entry"],"the approach":["you're"],"the approach,":["but"],"the appropriate":["response","value","if"],"the approval":["process,"],"the argument":["checking.","is","to","at","is"],"the argument,":["is"],"the array":["access"],"the assertions":["of"],"the assignment":[":)","statement","step","to","to","to"],"the assignment.":["The"],"the associated":["constant."],"the attribute":["in","resolution","resolution","only","lookup","outside"],"the attribute,":["there"],"the attributes":["--"],"the audience":["intended"],"the back":["of"],"the back.":["That"],"the backslash":["in"],"the bad":["ones."],"the basics":[":)"],"the bat.":["Processing"],"the beginning":["is","is","and","isn't","after","of","of","of","makes","of","and"],"the beginning,":["but"],"the behavior":["that"],"the behaviour":["became"],"the benefit":["of","comes","of","of","of","of"],"the benefits":["from","it"],"the best":["uses","name","one,","for","name","naming","English","way","way","name.","would","approach.","name","way","code","way","name","choice.","practices"],"the better":["templates","option","algorithm."],"the better,":["IMHO."],"the better.":["My"],"the big":["IF"],"the bits,":["not"],"the block":["ends,"],"the boarders":["and"],"the bob":["directory.","module"],"the body":["as","of","consitently","of"],"the boilerplate":["code"],"the bonus":["underscore"],"the boolean":["value","result"],"the borders":["of"],"the bot's":["\"configuration\"","implementation"],"the bottom":["so"],"the bottom.":["My"],"the bottom?":["That"],"the branches":["in","in"],"the branching":["of","code"],"the build":["in"],"the built":["in","in","in","in"],"the built-in":["function.","string","count","string","string"],"the built-in.":["That's"],"the builtin":["`str`","`str`","string","`str`","function"],"the business":["logic","logic"],"the call":["to","to","to","to","to","to","to","to","to","to","to","to","to"],"the called":["subroutines."],"the caller":["responsible","is","actually"],"the caller's":["responsability","responsability"],"the calls":["to"],"the camel's":["back?\"."],"the canonical":["idiom","\"simplest"],"the captured":["groups"],"the case":["where","where","in","if","analysis","here","-","here.","for","of","using","of","with","had","where","of","behavior","of"],"the case,":["sorry"],"the cases":["here","of"],"the catchall,":["that"],"the catchall.":["I"],"the category":["of"],"the central":["class"],"the chain":["of"],"the changes":["and"],"the changes.":["I'll"],"the character":["codes","is","strings."],"the characters":["I","of","in"],"the check":["in","is","for","for","is","for"],"the checked,":["canonicalized"],"the checks":["into","into","into","for","into","in","for","unchanged.","makes","much"],"the clarity":["would","it"],"the class":["then.","will","(thus","without","mimics","and","being","create","was","name","name","without","level","(unless","if","attribute?","if","`Phrase`","level","so","level","attribute","definition,","or","name","published","object","statement,","is","public","is","(and","API","name","to","and","to","is","constants","level","definition.","name","definition.","definition,","Bob.","describing","more","will","will","for","itself?)."],"the class,":["you","it's","but","would","in","or?","you","not","not"],"the class.":["They","In","I've","Reminder","See","I","You","In"],"the class?":["They're","How"],"the classification":["routines"],"the classifying":["part"],"the cleaned":["word"],"the cleanest":["solution","one."],"the clearest":["solution","alternative"],"the client":["code."],"the clojure":["example"],"the clue":["hammer"],"the code":["to","you","went","has","needs","more","actually","reads","could","a","does","more","twice","clearly.","needs","more","more","will","and","actually","or","itself","shouldn't","was","runnable","can","more","more","more","intent","but","here.","is","exactly","that","to","efficient","through","without","for","more","really","itself:","looks","itself:","is","is","more","is","shorter","is,","isn't","becomes.","more","even","much","to","won't","less","is","should","shorter","is","in","doesn't","so","easier","into","a","clearer;","is","into","needs","they","clean","less","more","tests","would","would","easier","easier","easier","to","significantly.","on","cleaner.","more","harder","instead","could","what","to","self-describing;","nice","split","is","speak","execution","which","makes","a","looks","run","in","because","being"],"the code\"":["-"],"the code,":["no","but","so","and","rather","and","but","and"],"the code.":["If","The","It's","It's","First,","When","So,","However,","How","So"],"the collection":["library,"],"the collections":["Counter:","library."],"the command":["line"],"the comment":["`endswith`","is","about","idea","on","on","`\"\"\"Sets"],"the comment,":["I'm"],"the commented":["out"],"the comments":["by","explain","in","you","before","?","here?","gone?","in","are"],"the comments!":[":-)","I"],"the comments...with":["the"],"the common-sense":["design"],"the communication":["pattern"],"the comparison":["at"],"the complement":["like"],"the complexity":["of","isn't"],"the components":["being","involved"],"the composition":["and"],"the comprehension":["could","as"],"the comprehension,":["to"],"the computation":["result","until","being"],"the computations":["each"],"the computer":["science","with"],"the computing":["(taking"],"the concept":["?"],"the concerns":["here,"],"the conciseness":["of"],"the conclusion":["that"],"the condition":["of","checks","`if"],"the conditional":["branches","statements","statements","statements"],"the conditional.":["This"],"the conditionals":["in","in","into","(`if"],"the conditionals,":["you"],"the conditions":["or","non","into","are","into","into","you're","for","are"],"the confirmation":["that"],"the connection":["between","between"],"the consistency":["of"],"the constants":["inside","straight"],"the construction":["of"],"the constructor":["and","now","would","somehow","for","and","i"],"the constructor,":["I"],"the constructor.":["Sublime's","Every"],"the contents":["of","of"],"the context":["of","and","of","of","of"],"the continue":["in","statement"],"the contrary":["since"],"the control":["flow"],"the control-flow":["to"],"the convenient":["`collections.Counter`"],"the convention":["would","in","there?","in"],"the convention:":["to"],"the conversation":["module"],"the conversation's":["type"],"the conversion":["it's","to"],"the copy":["operation,"],"the copying":["operation"],"the correct":["order.","way","API).","statement"],"the cost":["would","of","of"],"the count":["4","function"],"the counter":["as","for","to","once"],"the counting":["bit?","logic,","up"],"the counting.":["Have"],"the creation":["of","of"],"the culture":["and"],"the current":["structure","test","instance","value","`Bob`","instance.","instance.","implementation"],"the data":["encoded","is","in"],"the database":["in","may"],"the database,":["which"],"the decision":["logic,","about","making"],"the decorated":["function.","function"],"the decrease":["in"],"the default":["if","argument","value","answerd","case","answer","answer","ascii","('ascii')","for","dicts."],"the default,":["but","hence"],"the default.":["Instead"],"the defaultdict":["collection"],"the defensive":["approach"],"the dependency":["of"],"the depth":["of"],"the design":["as","of"],"the detail":["of"],"the detailed,":["insightful,"],"the details":["of","are","of","in",";-)"],"the details,":["he"],"the dict":["in","directly.","with","with","with"],"the dict,":["since"],"the dictionary":["approach","would","approach,","as"],"the dictionary,":["but"],"the dictionary.":["A","What"],"the dictionary/for":["loop"],"the difference":["between","is,","is","and"],"the differences":["between"],"the different":["ways","languages","message","cases.","cases","cases"],"the differentiator":["is"],"the discussion":["and","is"],"the dispatch":["table."],"the dispatcher":["as","deals"],"the divisor":["otherwise"],"the dna":["to","mapping","with"],"the doc":["for","comment","for","for","for","for","for","for","for","for","strings.","string."],"the doc's":["and"],"the docs":["for","for","for","for","on"],"the docs.":["`isupper`"],"the docstring":["could","says","is","consists","and","(\"Has"],"the docstring,":["if"],"the docstrings":["conventions.","for","though","are"],"the docstrings.":["I'm"],"the docstrings;":["I"],"the doctoring":["for"],"the documentation":["lines","on","and","for"],"the documentation.":["I"],"the domain":["of","of","will","model","term"],"the domain.":["What","You"],"the double":["equals","underscore:"],"the double-leading-underscore":["is"],"the double-underscore":["prefixed-only"],"the double-underscores":["are"],"the driving":["force"],"the dual":["type"],"the duplicate":["`msg.strip()`"],"the duplication":["and","in"],"the early":["returns","returns","return","return.","return","return"],"the early-return":["comment."],"the easiest":["way","way"],"the efficiency":["of"],"the elif":["unless"],"the elif's":["down"],"the elif-statements":["point"],"the elif/else,":["and"],"the else":["for","statements","entirely","is","statement.","is"],"the else,":["and"],"the else-branch":["ads"],"the elses":["together","because"],"the empty":["string,","key,","line","string","string","string","string","strings,","`return`"],"the encapsulation":["is"],"the encoding":["a","when"],"the end":["of","of","of","instead","I","that","of","of","(not","of","of","or","the","is","of","of","of","with"],"the end,":["that's"],"the end.":["I"],"the endpoint":["when"],"the endswith":["suggestion,"],"the endswith()":["method"],"the entire":["problem","map?","yelling","problem","input"],"the equality":["operator","operator","operator"],"the equals.":["i.e."],"the equivalent":["of"],"the error,":["and"],"the evaluated":["expression."],"the exact":["same"],"the example":["that","as:","and","in","you","file","didn't"],"the example,":["so"],"the example.":["The"],"the examples":["created"],"the excellent":["help"],"the exception":["like","handling:","than","propagate","type"],"the exclamation":["mark."],"the execution":["of","of"],"the exercice":["as"],"the exercise":["was","specification","but","as","as","rather","is","based","was","is"],"the exercise's":["description."],"the exercise.":["Uracil","Any"],"the exercise?":["If"],"the exercises":[":P"],"the exercism":["source"],"the exercism.io":["code"],"the existing":["robots"],"the expected":["argument,","output","output","attributes."],"the explicit":["branching","branching","branching","branching","branching?","branching...","ordering","use"],"the explicitness":["that"],"the expression":["inside","`message","in","with","in"],"the expression.":["Could"],"the expressions":["in"],"the extent":["it's"],"the external":["specification"],"the extra":["mile","methods.","object,","lines,","item","complexity.","verbiage","exclamation"],"the extraneous":["function."],"the face":["of","of"],"the fact":["that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that"],"the fact,":["that","that"],"the factory":["function?"],"the failing":["ones"],"the failure":["of"],"the false-y":["stuff"],"the falsy":["string"],"the familiar":["interface"],"the feed":["back."],"the feedback":[":)","@yessenia,","@sebastian,","I","--","I"],"the feedback!":["I","Is","You're","re.findall",":)","I"],"the feedback,":["especially","would","@chris!","can","I"],"the feedback.":["I","I","This","I'm","I","As","I","You're","To"],"the feeling":["you"],"the file":["it","is"],"the file,":["instead"],"the filter":["for","step."],"the filtered":["list","result"],"the filtering":["expression"],"the final":["else,","conversion","\"else\"","function","point,","conditional"],"the first":["if","argument","submission.","Python","iteration,","one","test,","character","iteration,","condition,","time","set","line","call","to","`if`","`if`'s","one","line.","submission","submission","element","time","that","version","chapter","iteration,","line","part","parameter","evaluation","python","time","block:)","`if","thing","time","time","time","line","version","branch","argument","elif:","if","if","elif:","one","look"],"the fixes":["now."],"the flow":["either"],"the flow.":["Please","`interpret_query`","\"is_empty_string\"","Consider"],"the following":["nitpicks:","unit","`elif`","code:","methods:","way:","methods","will"],"the followings":["will"],"the for":["loop","loop:","loop","loop","loop.","...","loop"],"the forefront,":["there"],"the form":["`if"],"the format":["parameters"],"the formatting":["sins.","all","so","readable,"],"the former":["reads"],"the four":["cases"],"the fragments":["together."],"the full":["doc","spec","phrase"],"the fun":[";(",":("],"the function":["into","is","actually","so","is","on","already.","call).","doesn't","is","name","or","recursively","naming","is","call","call","passed","is","Bob","name."],"the function's":["arguments)."],"the function,":["it","but"],"the function.":["This","not"],"the functional":["version"],"the functional-like":["dispatch"],"the functionality":["without","to"],"the functions":["not","will","in","up","being","from","I"],"the future":["developer","if","this"],"the future,":["I'd","the","to","it"],"the future-you":["who"],"the gem":["and"],"the gem,":["which"],"the gem.":["Both"],"the general":["implementation"],"the generation":["code."],"the generator":["currently","()","expression","expression"],"the getter":["to"],"the github":["project?"],"the given":["context.","tests"],"the global":["nature","namespace","namespace."],"the gnarly":["case"],"the go-to":["method"],"the goal":["of","of:"],"the gods":["of"],"the good":["characters.","characters","work.","news"],"the grammar":["and"],"the great":["suggestions","suggestions."],"the grouping":["of"],"the guard":["```if","on"],"the guide":["could"],"the habit":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"],"the handle":["of"],"the handling":["of"],"the hands":["of"],"the hard":["way'."],"the hard-coded":["default."],"the hardest":["to"],"the head":["of"],"the heads":["up!","up!"],"the heck":["is"],"the hell":["out"],"the help!":[":)"],"the helper":["methods","functions","methods","methods.","class","functions"],"the helpers":["in","into"],"the helpers.":["I"],"the helpful":["feedback!","comment.","comments"],"the hey":["method","method,","method","function,","method.","method,"],"the hey()":["method,"],"the hint":["that"],"the horizontal":["complexity"],"the idea":["of","of","of","of","that","of","of","of"],"the identical":["method"],"the identity":["operator","operator","operator","operator","operator","operator","operator"],"the idiomatic":["way","way","way","way","format"],"the if":["statement","conditions","X==Y","was","test","statement","statements,","statements","statements.","at","clause","statements?","tree","block","statements","is","logic","logic"],"the if's":["I"],"the if..elif":["tree."],"the if/elif":["conditions.","and"],"the if/else":["statements"],"the ifs":["much"],"the imperative":["programming"],"the implementation":["to","and","details","might","details.","details","details","of","from"],"the implementation,":["but"],"the implication":["that"],"the import":["statement"],"the import,":["and"],"the import.":["That's"],"the important":["case."],"the imports":["and"],"the impression":["that"],"the improvements.":["Moving"],"the incoming":["messages."],"the indentation":["stops."],"the indentation,":["couldn't"],"the indentations":["didn't"],"the individual":["sides"],"the information":["provided"],"the inializer":["--"],"the init":["function,","method,","method"],"the init?":["Is"],"the initalizer":["and"],"the initial":["\"if","strip"],"the initialization":["function."],"the initializer":["IMHO.","?","should","will","should","and","and","?","takes","and","(constructor)"],"the initializer)":["because"],"the initializer,":["and","part","but","before","if"],"the initializer.":["That's","But"],"the inner":["loop"],"the input":["as","text","is","-","and","data,","sanitization","on","sanitization","to","if","sanitization","ends","before","string","before","string.","is","than","in","against","cleaning.","was","transformed","with","could","to","could"],"the input.":["didn't"],"the instance":["then","is","attribute","was","-","in","in","(so"],"the instance's":["state","state"],"the instance),":["part"],"the instance,":["no"],"the instance.":["Do","Do","I'd"],"the instance...":["To"],"the instance;":["it's"],"the instructions":["did"],"the integrity":["of","of"],"the intend":["of"],"the intent":["clearly.","that","behind","a","of","of","of","becomes","of","of","-","clear.","more","of","better","of","would"],"the intent.":["`is_question`"],"the intent...":["or"],"the intent:":["it's"],"the intention":["was"],"the interface":["of"],"the internal":["helpers","methods","methods"],"the interpretation":["of","of"],"the intializer":["remains"],"the invariants":["if"],"the inverse":["map"],"the inverted":["regexp"],"the is_*":["methods"],"the isalnum()":["checks."],"the islower":["check"],"the isspace":["method."],"the issue":["-"],"the issues":[":)","in"],"the isupper":["function"],"the isupper()":["built","tip,"],"the it's":["irrelevant"],"the iterable":["(`self.check"],"the javascript":["version"],"the job":["just","done","done","done,"],"the job,":["but"],"the join":["on"],"the jump":["to"],"the key":["is"],"the key:value":["pair."],"the keyword":["`all`"],"the kitchen":["sink"],"the labeling":["for"],"the lack":["of"],"the lambda":["style,","would"],"the language":["of","analysis","can"],"the language's":["specification."],"the language,":["only"],"the language.":["\"Private\""],"the largest":["possible"],"the last":["line,","time.","opinion","character","else-branch","one..","three","three","item","iteration","item","6","line?","iteration's","few","character","character","line","line","line.","character.","merge","if-else"],"the latest":["exercism"],"the latest,":["I"],"the latter":["is","automatically","raises"],"the latter,":["you"],"the legacy":["code"],"the len()":["conditional"],"the length":["of","of"],"the letter":["(for"],"the letter-value":["mappings"],"the letters":["of","are","everywhere."],"the level":["of"],"the library":["(specifically"],"the life":["of"],"the like)":["rather"],"the line":["should","length.","between","of","you"],"the line.":["Good"],"the lines":["of","10-17","of","extend","of"],"the link":["was"],"the link,":["that's","that"],"the list":["of","is","comp","constructor","comprehension.","comprehension.","to","comprehension","of","of","of","comps","so","of","comprehension"],"the list,":["without"],"the literal/constant":["on"],"the logging":["module"],"the logic":["for","of","out","all","into","of","into","out","checks","into","in","is","branches","for","here","in","here","of","into","for","in","embedded","I","of","even","of","of","from","harder","behind","for","nicely!","in","out","of","of","been","over","from","because","a","of"],"the logic,":["but"],"the logic.":["You"],"the logical":["point","essence"],"the long":["way","run."],"the longer":["name"],"the look":["of","up."],"the loop":["here."],"the loop-based":["dispatch,"],"the love":["a"],"the lower":["and"],"the lower()":["call"],"the lower-cased":["string"],"the lowercase":["regex"],"the lowercased":["words"],"the magic":["values?","numbers","numbers,"],"the main":["reason","point","conditional","method","function"],"the mangled":["helper"],"the many":["methods,"],"the map":["of"],"the mapping":["is","with"],"the mapping.":["I"],"the match":["method"],"the matchers":["are"],"the meaning":["pretty","as","intact.","of","to","of","of"],"the meaning,":["you"],"the meaning.":["By"],"the meat":["of"],"the memoization":["but"],"the memory":["footprint"],"the mental":["cost","effort"],"the message":["it's","in","logic.","in","classifying","type.",":(","type.","is","is","is","must","from","in","Class","and","is","at","to"],"the message,":["so","hence"],"the message.":["It","If"],"the message_is_...":["functions"],"the method":["you","name","type?","names","be","as","a","checks","`isupper()`","would","signature","would","names","names","itself.","became","`strip`,","without","won't","to","names","as","from","``answer``","does.","re.split()."],"the method's":["body","logic","body"],"the method,":["though,","so"],"the methods":["don't","to","to","are","class","would","private,","on","out","static","are","in","is","and","in","of","any","on","by"],"the methods.":["Everything"],"the middle":["lambda","one"],"the minimal":["\"working"],"the missing":["key"],"the mistaken":["belief"],"the module":["level.","`nucleic_acids`","root.","(just","context"],"the module's":["functions"],"the moment.":["I'm"],"the more":["interesting","complex","arbitrarily","functional","important","readable","strictly","readable:"],"the most":["unsurprising","appropriate","appropriate","readable","recent","pythonic","elegant","obvious","pythonic","natural","expressive","broadly","descriptive","heated","understand","readable","idomatic","part,","obvious.","straightforward"],"the motivation":["there.","there."],"the mutual":["exclusiveness"],"the name":["of","Language","`data`","of","'words'.","Bob","\"c\"","of","``hey``","of"],"the name.":["It's"],"the name?":["That"],"the names":["of","of","of","into"],"the naming":["conventions","things","convention,","convention.","convention","conflict","convention?","that"],"the natural":["thing"],"the nature":["of"],"the need":["for","for","for","for","to","to"],"the negation,":["but"],"the negative":["translate"],"the nested":["function","\"if\"","conditionals."],"the new":["one.","one.","standard","standard","style","syntax","client"],"the new-style":["class"],"the next":["iteration.","one.","iteration,","\"level\"?","revision.","line.\"","version...","couple","iteration.","submission!","error.","iteration"],"the nice":["thing"],"the nit":["about"],"the nitpick":["of","part:"],"the nitpick.":["I'm"],"the nits":["are"],"the nits,":["@solon."],"the non-alpha":["characters."],"the normalization":["will","together,"],"the note!":["I"],"the nothing_special/yell_at_me/question":["methods"],"the now":["unneeded"],"the nucleotide":["is"],"the nucleotide_counts":["method."],"the nucleotides":["and","and","involved","are","to","that"],"the nucleotides?":["It"],"the number":["of","of","of","of","of","of","of","of"],"the numeric":["test"],"the object":["as","as","(not","and","passed","type.","type.","type.","base","type.","type.","type.","type.","type.","class,"],"the object,":["is","for"],"the object.":["What's","I"],"the objective":["&","of"],"the obvious":["pythonic","solution.","pythonic"],"the official":["Python","Python","Python","Python"],"the old":["style","style"],"the one":["shouting.","liner","that","yelling,","return","on","mentionning","to","proposed","here,","liked","on","on","that","line"],"the one-liner":["sure"],"the one-liners,":["it"],"the ones":["you","extending","I"],"the online":["documentation,","documentation?"],"the only":["difference","guidance","relevant","module","argument","real","invisible","changes","input.","argument","thing","sign"],"the opening":["quotes"],"the operation":["more"],"the operations":["is","themselves,"],"the operator":["`not`."],"the opposite.":["Can"],"the optional":["keywords"],"the options":["can"],"the order":["doesn't","here","they","of","in","that","of","of","of","of","of"],"the ordering":["and"],"the original":["code).","can","and","variable","problem","argument","intent","word.","word.","string","example","text"],"the original,":["so"],"the other":["cases.","responses.","hand,","side,","functions","solutions.","after","hand,","tests,","tests","hand","languages","without","predicates.","tests","hand","methods","submissions...","way","word","one","predicates","languages","way","rna","functions.","nucleotides","elifs","two","hand,","part","part"],"the other.":["--","Note"],"the others":["is","is","(and"],"the output)":["instead"],"the output.":["Two"],"the outside":["world,"],"the over":["head"],"the overall":["structure.","conciseness,"],"the overhead":["of","of","of"],"the page":["and"],"the pairing":["of"],"the pairs":["passed"],"the parameter":["that","is","name."],"the parameter?":["After"],"the parameters":["they"],"the parens":["around","around","around","BTW)","around","around"],"the parent":["class"],"the parentheses":["around","will","are","is","surrounding","around"],"the parsing":["(i.e.","process","process"],"the parts":["can"],"the path)":["so"],"the pathname":["...\"."],"the pattern":["matchers.","matches,"],"the people":["who"],"the pep8":["violation.","stuff.."],"the pep8.":["But"],"the phrase":["text.","that","needed","before","to","\"hysterical","inside","class","and","is","to","can","in","said","logic"],"the phrase\"\"\"`":["above"],"the phrase.":["Bob"],"the picture":["of"],"the placeholder":["for"],"the plain":["obvious"],"the point":["of","in","of","of","of","of","of","of","of","of","of","of","I","of","of"],"the point\"":["-"],"the points":["I"],"the possibility":["to","for","of","that,"],"the possible":["responses"],"the power":["of","of"],"the precedence":["rules","rules","is"],"the predicate":["is","expects","logic","handling","code","*inside*","has"],"the predicate,":["I","I'd"],"the predicate-&gt;answer":["mapping","mapping"],"the predicates":["being","are","on","complexity","-","and","nor","unittests.","independantly)","should","and","at","-","-","into","helper"],"the predicates,":["in","quite"],"the predicates.":["Now","I"],"the preferred":["way","way"],"the presentation":["you"],"the previous":["effort","exercise,","one.","comments,","line","version","iteration,","`qualify`","iterations.","two","version,","iterations."],"the privacy":["it"],"the private":["methods.","method"],"the problem":["is","was","domain","it's","domain.","the","mentions","because","mentions","[on","domain","with","of","statement,","instead","-","in","was","is","you","at","level,","is","mentioned","space","could","language"],"the problem,":["but"],"the problem.":["Try"],"the problem?":["I"],"the process":["that","of","of","in"],"the processing":["logic","each"],"the program":["more","flow.","only","does?","does","fails"],"the programmer":["is","would","is","who"],"the proper":["representation","way"],"the property":["to","to","and"],"the proverbial":["square"],"the public":["API.","API.","API?","attributes","API","API","api","API","API\",","API.","interface.","interface"],"the punctuation":["cleanup","mark","using:"],"the punctuation,":["why","right?"],"the punctuations?":["I"],"the purpose":["is","of","of","of","of","of","of"],"the python":["track.","community","string","way"],"the pythonic":["way.","way,","way","coding","part:","way"],"the quality":["of"],"the query":["was","once."],"the question":["response.)","is","being","and"],"the quote:":["http://stackoverflow.com/questions/6016271/why-is-it-better-to-have-100-functions-operate-on-one-data-structure-than-10-fun"],"the ratio":["of"],"the raw":["tests,"],"the re":["package,","import.","module","module."],"the readability":["of","of","of","in","(like","of","of"],"the readablilty":["of"],"the reader":["as","to","immediately","to"],"the reader's":["view"],"the reader,":["which","and"],"the reader.":["If"],"the reader–":["are"],"the readme":["for","and"],"the readme,":["namely","or?"],"the real-life":["behavior"],"the reason":["for"],"the reason?":["Given"],"the reasoning":["for","is"],"the receiving":["end."],"the record,":["I"],"the record:":["I"],"the redundancy":["with"],"the refactoring":["into"],"the regex":["engine","be","using","work","per","on"],"the regexes":["are","are","here."],"the regexp":["function.","directly","so"],"the regular":["expressions","string","expressions"],"the relevant":["data"],"the reliance":["on"],"the remaining":["bottle"],"the removeAll()":["function"],"the repetition":["in","in"],"the replace":["method","method"],"the replies":["were","live","in"],"the repository":["of"],"the representation":["of"],"the reqs":["defined"],"the request":["input"],"the required":["order","order","methods.","functionality"],"the requirement":["to"],"the requirements":["and"],"the requried":["methods"],"the resolve":["statement"],"the resond_to":["functions"],"the responders":["public?"],"the responsability":["of"],"the response":["texts","in","so","at","is","should","strings"],"the responses":["lined","or","should","functions","list","later","in"],"the responsibility":["would"],"the rest":["lower","of","of","of","of"],"the rest,":["you"],"the result":["to","is","directly.","right","is","of","from","of","to","though","in","and","of","will","(no"],"the result,":["so"],"the resulting":["DFA"],"the return":["value","statements","statement","statement.","type","is."],"the return.":["Added"],"the returned":["value","list."],"the returns":["are"],"the returns:":["Someone"],"the reused":["code"],"the reversed":["call"],"the review":[":)"],"the review.":["Originally,","Now"],"the right":["regex","regex)","way.","way","amount","type","way","names","concepts)","hand","thing","direction,","balance","thing.","thing.","way"],"the rna":[";)","transform."],"the robot":["name"],"the robots":["and"],"the routine,":["the"],"the ruby-doc":["project"],"the rules":["for","provided?","of"],"the sacrifice":["of"],"the sake":["of","of","of","of","of"],"the same":["object.","result,","file.","line","kind","class","for","line","check","parameters,","amount","extent.","object,","reaction.","problems","module","time,","thing","time","time,","level.","level.","level","time","way","line","time,","for","line","for","way","time","as","call","`greeting`","for","time.","time","way.","way","number","code","time:","time.","without","exact","cache","attribute.","attribute","name.","line,","line?","line)","time","result","line","if","problem,","as","code","issue","as","as","\"Fine.","effect.","feedback","thing)","when","\"changes\".","as","for","for","way","as","thing","name","job.","tests","exercise.","categories","alphagram.","code","order","alphagram","as","conditional,","effect...","thing","as:","as:","job.","instance)","count","time."],"the same,":["but","with","but","it","but","do"],"the same.":["I","I",":-)","Your"],"the sanitizing":["of"],"the sanity":["checking"],"the science":["and"],"the scope":["of"],"the script":["to"],"the second":["argument","rule)","code","is","isn't.","nitpick","condition","question","if","splits","and","should","conditional","and","predicate","Phrase","elif","``p.area_code()``","way,"],"the seemed":["like"],"the self-deprecating":["kind"],"the sense":["of"],"the sentence":["is"],"the separate":["classes"],"the separation":["od","of"],"the seperation":["of"],"the sequence":["gets","string","to"],"the sequences":["to"],"the set":["back","difference"],"the sets":["module"],"the several":["different"],"the sexiest":["code"],"the shape":["of"],"the shebang":["not","(#!)"],"the sheer,":["hideous"],"the short":["variable"],"the shorter":["form","way,"],"the shortness":["of"],"the shoulders":["of"],"the shout":["condition","condition"],"the shouting":["definition","distinction","and"],"the shouting.":["Look"],"the silence":["predicate","case?","test","check.","test,"],"the silent":["definition."],"the simple":["structure","string"],"the simpler":["the"],"the simplest":["thing","way","solution.","approach,","code"],"the simplicity":["of","of"],"the simplicity!":["But"],"the simplified_phrase()":["method"],"the single-line":["note---I"],"the single-responsibility":["principle"],"the situation":["you're","when","could"],"the situation,":["where"],"the size":["of","of"],"the slightly":["irreverent"],"the solution":["much","slightly","mechanics."],"the solution,":["some"],"the solutions":["are"],"the song":["over"],"the sort()":["method"],"the sorted":["list","strings."],"the sorted,":["lower"],"the soruce":["on"],"the source":["word"],"the space":["check,"],"the spaces":["(you","are"],"the spec":["has","according","requires."],"the spec.":["For"],"the special":["case.","functions.","character","case"],"the specifically":["mentioned"],"the specification":["so","reflects"],"the specifications":["in","change"],"the specs":["(`bob.hey(\"None\")`","changed","are","are","(yes,","change","and","says","in"],"the specs.":["Now","I'm","Dynamically"],"the split":["at","into"],"the splitting":["regex,","and"],"the standard":["library,","back","library","builtin","library.","library.","library","should","string"],"the start":["of","of","of","of"],"the starting":["and"],"the state":["of"],"the statement":["evaluation","type","says","functions","expression","to","`isYelling(toBob)`","`isYelling(input)`","`is_yelling(phrase)`"],"the statement...\"":["or","rather"],"the static":["methods"],"the stdlib":["re"],"the stdlib's":["`collections`"],"the steps":["required"],"the stop-on-shortest-argument":["property"],"the store":["and"],"the store.":["For"],"the storing":["the"],"the story":["`Bob`","of","of","Bob","by"],"the str":["type,"],"the strictness":["of"],"the string":["method","to","with","methods","was","ends","ends","input","before","before","is","objects","is","in","casting/length","was","module's","so","methods","class","that","uses","before","slicing","first","of","to","method","slicing","without","so","methods.","and","were","with","being","are","is","`\"(&%$(%\"`","*must*","methods","that","method","methods","method","module","lower"],"the string's":["length."],"the string,":["when","which","so"],"the string.":["And","The","Still","Check"],"the string.upper()":["method"],"the string?":["I","You"],"the strings":["into","(so","given"],"the strings.":["I"],"the strip()":["to"],"the structure":["of","to","of","down"],"the structure.":["I've"],"the stuff":["that","that"],"the style":["and","is","is"],"the sub":["to"],"the submission":["file?"],"the submit":["command"],"the submitted":["code"],"the subroutines":["are","should","\"private\""],"the succinctness":["of"],"the suffix":["of","of","of"],"the suggestion":["to","to"],"the suggestion,":["there's"],"the suggestions":["are"],"the super()":["keyword"],"the symbols":["themselves"],"the system":["wanted"],"the system's":["entry"],"the t-shirt...":["The"],"the table":["and"],"the tag":["member"],"the target":["and"],"the task":["in","you"],"the technical":["objects."],"the teenager":["would","changes"],"the temptation":["to","to"],"the tendency":["to"],"the term":["\"alphagram\""],"the test":["suite","functions","functions","functions","suite","cases","and","where","when","case","pass.","like","cases:","cases.","demanded","is","cases","on","cases","suite","case","case","suite.","suite...","cases!","sorry","suite.","suite","methods","cases","for","case","cases","file","suite,","cases.","cases).","cases","requirements","cases.","`text.isupper()`","cases","to","cases","suite","suite,","cases","suite"],"the test,":["not","because"],"the test-cases":["also"],"the test_cases":["didn't"],"the test_normalize_case(),":["don't"],"the testcase":["requires),"],"the testcase,":["but"],"the tested":["expression"],"the tests":["out","pass,","into","for","fail:","pass,","or","from","on","passes","are","are","and","functions","are","would","into","pass.","and","didn't","and","but","I","a","but","would","consider","are","with","pass","were","because","have","failing","but","with","were","could","functions","seemed","are","that","at","pass,","are","in","and","feel","fails:","pass"],"the tests)":["that"],"the tests,":["you'd","but","I","and","so","but","but","but"],"the tests.":["If","When"],"the tests?":["Parentheses","I","I"],"the text":["in","as","contains"],"the text.upper()":["make"],"the texts":["which"],"the the":["return","call","purpose"],"the thing":["in"],"the things":["you'd","I","that"],"the think":[":D"],"the third":["(optional)","suggestion."],"the thorough":["review"],"the three":["first","part"],"the thymine":["nucleotide"],"the time":["in","to","`.isspace()`,","of","to"],"the time;":["I"],"the times)":["just"],"the tin":["`returns"],"the tip,":["I"],"the tips!":["Shall"],"the tips.":["Here's","Here's"],"the to":["set"],"the to_rna":["method"],"the tokenization":["step"],"the tokenize":["method,"],"the top":["level?","but","is","-","on","here.","comment","comment.","of","of","comment"],"the top,":["but","which"],"the top-level":["of","of"],"the top.":["I"],"the tradeoff":["of"],"the tradeoffs":["here,","of"],"the transcription":["routine,","an","in"],"the transformation":["suggested"],"the transition":["form"],"the translate":["function","method"],"the translate()":["method"],"the translate,":["punctuation,"],"the translate.":["I"],"the translation":["table","become","table","table.","from","rules","table"],"the transtable":["is"],"the trick,":["but"],"the trivial":["problem,"],"the trouble":["in"],"the true":["python"],"the truthy/falsey":["value"],"the try/except":["clause"],"the tuple":["with","list"],"the tuples":["did"],"the two":["variable","parts"],"the two-line":["version"],"the two.":["we"],"the type":["in","of","of","in"],"the typechecking":["part"],"the types":["of"],"the typical":["use"],"the umlaut":["tests?"],"the umlauts.":["I"],"the umlauts...":["I"],"the underlying":["science","what's","encoding,","representation"],"the underscore":["naming"],"the understanding":["you"],"the unfortunate":["effect"],"the unicode":["test-cases"],"the unit":["tests,","tests,","tests.","tests.","tests","test","test?","test."],"the unittests":["too).","myself"],"the unittests,":["so"],"the unnecessary":["elif","parentheses","parenthesis"],"the upper":["case"],"the uppercase":["transformation","check"],"the uppercased":["version"],"the upside":["of"],"the uracil":["nucleotide."],"the use":["of","of","of","of","of","of","if","of","of","if","of","of","of","of","of","of","of","of","of"],"the useful":["feedback,"],"the useless":["object,"],"the user":["would"],"the uses":["of"],"the usual":["way"],"the validation":["process"],"the value":["of","`None`?","first","of","of","for"],"the values":["through"],"the values,":["but"],"the values.":["Depending"],"the variable":["will","name","name","from","`sequence`","name","in","to","name","name"],"the variable),":["hence"],"the variable.":["I'm"],"the variables":["have","private"],"the various":["test","methods","responses","conditions","tests,","conditions","if-statements"],"the verbose":["side,","side."],"the verse":["strings"],"the verses":["into"],"the version":["with","using"],"the very":["next","same","same","first","same"],"the wall\".":["Then"],"the wall,":["no"],"the waters.":["Bob's"],"the way":["*he*","DNA","your","you","you","the","the","you","you","you","it","you","to","I"],"the way.":["I'm",":-)","Originally"],"the what":["you","you"],"the whole":["thing","thing","if","thing","check","phrase","doc","doc","exercise","sanitization","\"standardization\"","db","phrase","phrase","list.","``nucleotides``","part","part","part"],"the win":[":)"],"the word":["with","count?","counting","in","along","that","is"],"the word,":["it","in"],"the word_count":["method.","method"],"the word_counter.":["If"],"the wordcount":["for"],"the wordcount,":["but"],"the words":["sequence","in","in","in","more"],"the words,":["depending","separates"],"the words.":["I"],"the words.count(word)":["expression."],"the work":["in","yourself.","that","for"],"the work.":["The"],"the working":["[link](http://exercism.io/submissions/52101ce59701fa85bd000026)"],"the wrong":["exercise,","way","place"],"the year":["lengths"],"the yelling":["portion"],"the zen":["of","of","of"],"the |":["with"],"their argument":["to"],"their content":["is"],"their correlates":["for"],"their data":["attributes."],"their expected":["values"],"their integer":["value,"],"their meaning":["without"],"their methods.":["Try"],"their name,":["like"],"their names,":["it"],"their order":["in"],"their own":["variables.","dedicated","lines.","line.","dedicated","stupidity.","routines","lines","function","right.","named","behavior","methods.","methods."],"their own,":["do","and"],"their own.":["Everything"],"their purposes":["here."],"their responses.":["There's"],"their signature":["is"],"them \"new-style\"":["classes"],"them \"private\"":["from"],"them able":["to"],"them advance":["anyway"],"them all":["start"],"them all-caps":["and"],"them and":["fix","leave","believe"],"them anyway.":["Could"],"them are":["valid,","unlikely","upper-case."],"them as":["a","they","instance","attributes,","constants","\"calculated","the"],"them at":["all","http://docs.python.org/2/library/stdtypes.html#string-methods.","the"],"them because":["the"],"them being":["separate,","changed"],"them class":["members,"],"them easier":["to"],"them externally":["if"],"them for":["my","readability.","this","me.","future"],"them from":["the","external"],"them functions":["with","outside"],"them in":["`Bob`,","my","a","one)","the","signature"],"them inside":["`Nucleotides`.","the","the"],"them instance":["methods"],"them into":["extra"],"them is":["duplicated."],"them like":["it's"],"them may":["be"],"them methods":["on","of","at"],"them more":["meaningful?"],"them non-public.":["And"],"them on":["every","the","exercism"],"them one":["at"],"them or":["not,"],"them out":["of","of"],"them out,":["and"],"them outside":["the","the"],"them private":["with"],"them private,":["since"],"them redundantly":["and"],"them regular":["methods"],"them separately,":["if"],"them somewhere":["other"],"them static":["methods"],"them this":["way"],"them to":["`talker_is_shouting`,","at","Python","(non-public?)","make","live","call"],"them together":["with","in"],"them try":["to"],"them under":["the"],"them using":["properties"],"them vertically":["on"],"them where":["they're"],"them will":["break","break"],"them with":["an","an","a","every"],"them, and":["also"],"them, but":["man"],"them, especially":["when"],"them, it":["makes"],"them, so":["it's"],"them, that":["would"],"them, then":["didn't,"],"them, you":["can"],"them. (Seems":["fairly"],"them. A":["comment"],"them. For":["instance,"],"them. If":["you"],"them. In":["this"],"them. Just":["try"],"them. They":["are"],"them. This":["probably"],"them. Which":["do"],"them. You've":["used"],"them. Your":["proposition"],"them? You":["seem"],"theme were":["applied"],"themselves (like":["@kenyatta"],"themselves -":["like,"],"themselves are":["so"],"themselves, I":["chose"],"themselves. Like":["if"],"then (return,":["pass,"],"then Bob":["will"],"then I":["came","want","realised","decided"],"then I'd":["have"],"then I'm":["adding"],"then Python":["implodes"],"then ```^.*\\?$```":["is"],"then `self.text":["=="],"then a":["name","`return"],"then accidentally":["muted"],"then all":["the"],"then bob":["had"],"then call":["inside"],"then calling":["it.","`sort()`"],"then changes":["the"],"then check":["for","isspace"],"then decide":["which"],"then didn't":["get"],"then didn't,":["then"],"then discarding":["it."],"then end":["up"],"then every":["character"],"then going":["and"],"then it":["will","would","needs"],"then it's":["a","`is_anagram_of`"],"then join":["then"],"then just":["picking","map"],"then kept":["them"],"then look":["for"],"then looked":["up"],"then looking":["at"],"then make":["hey()","things"],"then mixed":["up"],"then modify":["the"],"then obviates":["the"],"then on":["the"],"then one":["would","in"],"then only":["split"],"then operate":["on"],"then perform":["action"],"then probably":["the"],"then promptly":["forgot"],"then quite":["a"],"then raising":["an"],"then refactor":["into"],"then reference":["the"],"then replace":["T"],"then resplit...":["Can"],"then returning":["right"],"then set":["all"],"then taking":["that"],"then the":["code","encapsulation","dictionary","input"],"then there":["would"],"then they":["could"],"then updated":["using"],"then use":["an","C","first","`re.match`.","`pass`","it"],"then why":["do"],"then yes,":["dispatching"],"then you":["just","can","could","could","are","either","don't","would","won't","should","don't","would"],"then, I":["got"],"then, that":["particular"],"then. I":["like"],"then. `elif`s":["are"],"theoretical thought:":["do"],"theory and":["actual"],"theory, Counter":["should"],"there (object":["creation"],"there a":["good","better","way","better","convention","more","way","way","better","good","preference","way","way","way","contest","downside","reason","way","better","better","reason","way","simpler","clean","clean","reason","better","simpler","more","`str2`","way","more","particular"],"there actually":["are"],"there already":["a"],"there always":["is","is","is","is","is"],"there an":["easier","easier"],"there another":["function","way"],"there any":["limitations","useful"],"there anybody":["out"],"there are":["no","a","about","two","comments,","no","just","just","very","possibly","very","often","two","more","no","no","a","most","some","other","always","much","otherwise","comments","letters","simpler","other","too","in"],"there as":["private"],"there be":["a","more"],"there better":["ways"],"there can":["be"],"there could":["be","be"],"there existed":["at"],"there feels":["like"],"there have":["been"],"there if":["you"],"there is":["a","no","an","`isupper`,","`str.endswith`","nothing","no","a","a","shortcut","one","only","`.isupper()`","opportunity","no","no","no","a","nice","some","a","a","no","an","more","procedural","no","room","a","no","a","a","a","a","a","no","some","no","something","at","still","one.","one","no","a","a","any","a","an","so"],"there is.":["Just"],"there isn't":["mandatory"],"there mainly":["as"],"there may":["be","be"],"there might":["be","be","be"],"there or":["not."],"there should":["only","only","be","be","be"],"there somewhere,":["maybe"],"there though.":["one"],"there to":["give"],"there to,":["firstly,"],"there was":["a","some","as","much","to"],"there were":["circumstances","more","lots","any","more","specialized"],"there will":["of","be"],"there would":["be","be","be","be"],"there! I'm":["checking"],"there'd be":["a"],"there's a":["method","bug","bug","difference","\"isupper\"","genuine","method","better","different","bit","`str`","better","much","name","string","way","simpler","simpler","code"],"there's actually":["a"],"there's also":["a"],"there's an":["object","obvious"],"there's another":["method"],"there's any":["loss"],"there's at":["least"],"there's comment":["for"],"there's definitely":["a"],"there's enough":["about"],"there's more":["straightforward","effective"],"there's no":["need","\"test\"","state","way","obvious","instance","need","need","such","`char`","good","point","need","limitations","risk"],"there's nothing":["in"],"there's only":["one"],"there's some":["idiom","duplication"],"there's something":["that","that's"],"there's still":["a","something"],"there's the":["```isupper()```"],"there's value":["in"],"there's very":["little"],"there). Knowing":["the"],"there). Looks":["like"],"there). wondering":["how"],"there, but":["otherwise","I"],"there, except":["I"],"there, in":["fact,"],"there, since":["I"],"there, with":["the"],"there. Alternatively,":["you"],"there. However,":["in"],"there. I":["thought"],"there. Interpreting":["the"],"there. Thanks":["for"],"there. This":["was"],"there. `input.isupper()`":["is"],"there. `phrase.isupper()`":["is"],"there. `toBob.isupper()`":["is"],"therefore be":["more"],"therefore it":["is"],"therefore more":["idiomatic."],"therefore separated":["from"],"therefore the":["hardest"],"theres's no":["such"],"these \"new-style":["classes\""],"these 3":["helper"],"these @woodrow,":["somehow."],"these abstractions":["in"],"these all":["a"],"these are":["characters","redundant","not","interpreted"],"these aren't":["my"],"these as":["basically","well"],"these attributes":["as"],"these be":["more"],"these cases":["really"],"these changes":["the","in","made"],"these classes":["have"],"these comments":[":]"],"these conditionals":["are"],"these conditions":["(that"],"these exercises":["are","in"],"these filters":["at"],"these functions":["are","or"],"these guidelines.":["Consider"],"these helper":["methods"],"these helpers,":["which"],"these individual":["functions"],"these inside":["functions/methods"],"these may":["be"],"these methods":["now...","might"],"these one-liners":["of"],"these other":["methods"],"these pieces":["of"],"these private,":["as"],"these python":["string"],"these recommendations":["are"],"these returns":["are"],"these rules":["would"],"these small":["methods"],"these test":["helpers"],"these things":["can"],"these two":["points:","points"],"these types":["of"],"these up":["-"],"these values":["in"],"these would":["go"],"these, and":["need"],"these. It":["would"],"these? I":["figured"],"theses exercises":[":)"],"they *are":["meant"],"they all":["could","fail","are"],"they also":["exist"],"they are":["implementing?","not","registered,","all","expandable","checking.","not","just","nice","not","really","not","really","upper","uppercase,","uppercase...","not","really","considered","marked","in","best","concise","marked","only","only","guiding","used,","very","only","now"],"they are,":["maybe"],"they aren't":["imho","needed?"],"they belong).":["However!"],"they better":["indicate"],"they can":["be","be"],"they comes":["into"],"they compare":["in"],"they could":["be","live","belong","very","also","migrate","be","override"],"they describe":["into"],"they did":["and"],"they do":["know","know","have","in"],"they do.":["In"],"they don't":["depend","use","consume","care","seem"],"they force":["on"],"they have":["to","to","no","the","the"],"they implementation":["details","details"],"they imply":["that"],"they made":["sense"],"they make":["the"],"they might":["be"],"they need":["to"],"they needed":["to"],"they play":["out."],"they provide":["more"],"they put":["in"],"they really":["are"],"they recommended?":["If"],"they represent?":["Could"],"they should":["be","be","have"],"they shouldn't":["be"],"they start":["and","or"],"they still":["are"],"they think":["of"],"they wanted":["to"],"they were":["made","talking","all","defined","clearly"],"they would":["increase","be","be"],"they'd have":["to"],"they'll be":["informative."],"they'll stay":["local"],"they'll still":["leave"],"they're also":["not"],"they're checking":["for","for."],"they're doing.":["But"],"they're easier":["to"],"they're functions":["that"],"they're in":["a","a"],"they're just":["functions,"],"they're more":["extensible."],"they're not":["going","linked","relevant","re-used","needed","referenced"],"they're not,":["it's"],"they're only":["one"],"they're quite":["short?"],"they're testing":["for"],"they're used":["(I'm"],"thing -":["try"],"thing --":["the"],"thing ?":["How"],"thing I":["saw:","just","would","find","would","would","think","did","am"],"thing I'm":["wondering,"],"thing I've":["learned"],"thing about":["[duck"],"thing all":["the"],"thing and":["treats","I"],"thing as":["[old-style","the","a","a","your"],"thing but":["I"],"thing for":["building"],"thing has":["actually"],"thing in":["a","solution)"],"thing inside-out,":["not"],"thing is":["not"],"thing missing":["from"],"thing more":["readable."],"thing read":["well."],"thing that":["I","someone","will","could","kept","jumps"],"thing though":["that'll"],"thing to":["consider","do),","do.","do","do","do","me"],"thing to.":["Is"],"thing using":["list"],"thing you":["could","might"],"thing, I":["am"],"thing, but":["I'll"],"thing, is":["there"],"thing. Consider":["getting"],"thing. Did":["not"],"thing. I":["would"],"thing. `if":["s:`"],"thing... I":["do"],"thing: Did":["you"],"thing: Python":["has"],"thing: `is_empty`,":["`is_interrogative`"],"thing: do":["you"],"thing: since":["the"],"thing: where":["should"],"things (main()":["+"],"things -":["'word',"],"things 100%":["correct."],"things I":["would","would"],"things I'd":["consider"],"things aren't":["\"obvious\""],"things as":["decorators,"],"things aspect.":["With"],"things built":["into"],"things by":["putting"],"things can":["be"],"things in":["a","Python's"],"things like":["vocabulary","SQL","`text.upper()"],"things much":["easier"],"things non-public,":["but"],"things non-public.":["I"],"things overly":["complex."],"things private":["as"],"things simple.":["But"],"things that":["come","could","can","aren't","would"],"things the":["'Pythonic'"],"things though":["-"],"things to":["think","say:","consider:","play","give"],"things up":["a","a"],"things was":["probably"],"things will":["happen"],"things without":["mutation"],"things would":["be"],"things you":["\"could\""],"things you'd":["like"],"things you've":["learnt"],"things, checking":["if"],"things, it":["is"],"things, they":["really"],"things, though,":["you"],"things. I":["personally"],"think \"oh":["hey,"],"think (remember":["that"],"think Brian's":["suggestion"],"think I":["found","prefer","need","like","have","understand","like","wrote","found","can","may","agree","was","was","should","opted","like","can","read","like"],"think I'll":["settle","start"],"think I'm":["going","just"],"think I've":["cleaned"],"think It":["would"],"think It's":["pretty"],"think Python":["as"],"think YAGNI":["applies"],"think `Phrase.rex`":["ought"],"think `filter`":["is"],"think `result":["="],"think `self._phrase.strip()":["=="],"think `silence`":["would"],"think `str[-1:]`":["can"],"think `words`":["is"],"think a":["list","dict","default"],"think about":["edge","them?","moving","moving","making","moving","moving","how","moving","more","the","an","having","it","it","this","the"],"think also,":["you"],"think anything).":["But"],"think assigning":["`\"?\"`"],"think code":["is"],"think comparing":["sorted"],"think converting":["the"],"think could":["be"],"think creating":["the"],"think documenting":["public"],"think expanding":["test"],"think extracting":["a"],"think hard":["enough"],"think having":["2","only"],"think he":["means"],"think i've":["fixed"],"think if":["the","you'd"],"think is":["necessary","should","right","overkill.","more","adding","more"],"think it":["would","*needs*","actually","was","was","misses","is","should","was","would","demonstrations","strays","is","would","made","looks","is","would","would","looks","makes","can","is","is","makes","would","will","would","would"],"think it's":["recommended","better","definitely","worth","ok","the","very","too","necessary","idiomatic","more","great","worth","good","a","definitely","a","easier","nice","more"],"think language":["I"],"think list":["comprehensions"],"think made":["sense"],"think more":["Python","experienced"],"think most":["of"],"think moving":["the","the"],"think normalization":["plus"],"think of":["stripping","early","doing","the","a","a","a","a","any","capturing","a","things","a","for","a","how","a","a","a","one.","a","some","that.","it,","a","a","a","a","a","a","something","that","any","a","any","providing","making"],"think pep8":["says"],"think question":["would"],"think same":["@paxton"],"think separating":["out"],"think sivhollup":["is"],"think so..":["I"],"think so?":["I"],"think someone":["who"],"think that":["simple","separating","within","maybe","they","it's","embedding","it","what","going","the","branching","this","naming","it","the","`dirtyinput`","cost","it","would","check","`_words`","returning","using","```getaddr```","the","the","`translate`","you"],"think that's":["a","clearer."],"think the":["clarity","first","better","amount","elif-statements","else-branch","predicates","tests","discussion","test","code","exercise","second","meaning","best","comments","last","`del`","`return`","`not"],"think there":["might","are"],"think there's":["a","enough","any","value","a"],"think they":["could","could","might"],"think they'll":["be"],"think this":["is","shorter","code","beautifully","would","is","only","code","does","is","is","can","is","might","is","looks","code","way","looks","is","is","is","is","reads"],"think too":["much"],"think up":["more"],"think using":["`string.maketrans`","re"],"think we":["miss","should"],"think we've":["thoroughly"],"think working":["through"],"think would":["be"],"think writing":["the"],"think you":["could","can","should","mean","can","can","can","should","are","need","may","should","code","can","need","could","should","should","could","should","are","are","could","should","might","need","can","are","can"],"think you'll":["find"],"think you're":["correctly","onto"],"think you've":["convinced"],"think your":["first","code","use","solution"],"think, but":["given"],"think, using":["if"],"think. (I":["would"],"think. I":["also"],"think. It":["works"],"think. `self.string`":["is"],"think? I'm":["in"],"thinking I":["didn't"],"thinking JavaScript":["properties"],"thinking about":["ways","it","how","this","the","making","another","the","decorators,","them","some"],"thinking falls":["on"],"thinking for":["the"],"thinking from":["the"],"thinking in":["wrapping"],"thinking it":["should"],"thinking more":["about"],"thinking of":["`__init__`","the","a","alternative","alternative"],"thinking optimization":["and"],"thinking something":["like"],"thinking that":["python's"],"thinking they":["are"],"thinking to":["figure"],"thinking was":["whether"],"thinking? Is":["there"],"third (optional)":["argument."],"third `if`":["statements"],"third argument.":["Doing"],"third if":["with"],"third party":["reading"],"third suggestion.":["Is"],"third thing:":["since"],"this \"the":["Python"],"this -":["I","it's"],"this --":["hardcoding"],"this 3":["times:"],"this :":["http://www.python.org/dev/peps/pep-0257/"],"this ?":["(hint:","(hint:"],"this I":["wouldn't"],"this `DNA`":["class,"],"this `Word`":["class,"],"this ```try-except```":["trick"],"this `is_default()`":["predicate"],"this a":["whole","series","lot","bit","part","joke?","little","little,","lot.","little"],"this abstracts":["everything"],"this all":["the"],"this and":["I","does","you're"],"this approach":["is","could","I","but","to","is","because","made"],"this approach,":["as"],"this as":["a"],"this assignment":["in"],"this assignment,":["so","perhaps"],"this based":["on"],"this be":["more"],"this beautifully":["conveys"],"this behaviour:":["if"],"this being":["a","an"],"this better":["with"],"this better,":["but"],"this breaks":["for"],"this brief":["on"],"this by":["just","using"],"this call":["\"test_does_not_confuse_different_duplicates\""],"this can":["be","be","be"],"this case":["I","is","to","I","is","a","\"better\"","it","checking","since","they","you're","and","when","would","though","it","I'm","though,","closed","however","it","you","I'm","that"],"this case)":["binary","(and"],"this case,":["it","the","I'm","since","I","some","I","you","`help(str)`","I","the","IMHO.","but","an","but"],"this case.":["And","I","I'd"],"this change":["also"],"this check":["as","makes"],"this class":["wrapping","were","not","fairly","could"],"this class,":["so","but"],"this clearer,":["so"],"this code":["totally","could","for","in","is","later","is","is","would","doesn't","will","is","as","is","I","handle","is","to","became","for","for","for","passes","doesn't","I","is","both"],"this code,":["but"],"this code.":["Maybe","Maybe","`\"\".join(list)`"],"this complete":["with"],"this context":["those"],"this convention":["for"],"this could":["be"],"this deep":["into"],"this default":["value"],"this design:":["The"],"this do":["with","with"],"this does":["what","not","seem"],"this doesn't":["really","pass"],"this drilled-down":["kata,"],"this easy":["to"],"this empty":["string\"."],"this even":["with","better),","work","more.","shorter"],"this example":["to","is","though."],"this example's":["pretty"],"this example.":["I'm"],"this except":["by"],"this exceptional":["circumstance"],"this exercise":["-","that","that","that","that","is",";)","as","without","I'll","was","check","you","was","(by","I","trying","in","requires."],"this exercise,":["it's","there","not","so","the"],"this exercise.":["Your"],"this exercises":["is"],"this existed,":["and"],"this extra":["code"],"this failed":["the"],"this feedback,":["You're","I"],"this feels":["like"],"this for":["\"bob\".","the","the"],"this form":["may","passes"],"this function,":["is","and"],"this good,":["and"],"this has":["only","a"],"this helped":["in"],"this helps":["a"],"this here:":["http://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables","http://stackoverflow.com/a/54873/477048","http://stackoverflow.com/a/54873","http://stackoverflow.com/a/54873/477048","http://stackoverflow.com/a/54873/477048","http://stackoverflow.com/a/54873/477048.","http://stackoverflow.com/a/54873/477048","http://stackoverflow.com/a/54873/477048.","http://stackoverflow.com/a/54873/477048","http://stackoverflow.com/a/54873/477048","http://stackoverflow.com/a/54873/477048","http://stackoverflow.com/a/54873/477048","http://stackoverflow.com/a/54873/477048"],"this if":["the","asked","I","it"],"this implementation":["it's","may"],"this in":["Python,","other","a","your","unit"],"this instance.":["Also–I'm"],"this instead":["of"],"this intended":["to"],"this into":["a"],"this is":["a","fairly","nice,","Python","one","an","overkill.","fairly","a","very","the","less","very","perfect","being","an","a","that","probably","a","the","my","still","really","really","more","already","needed","about","much","more","Python","bad).","considered","not","the","the","nitpicking","the","tested","actually","the","my","very","considered","close.","cleaner.","pretty","more","trivial","a","a","actually","not","not","my","the","Python,","*much*","good.","not","an","the","doing.","clearer.","that","the","a"],"this isn't":["a","necessary"],"this issue":["with"],"this iteration":["definitely","is","is"],"this just":["yet,"],"this keeps":["the","the"],"this kind":["of","of","of","of","of","of","of","of","of","of"],"this language":["is"],"this length/complexity":["where"],"this line.":["I"],"this list":["comprehension"],"this little":["snippet,"],"this looks":["good","good","good.","better.","rather","like","great.","great,","good","nicer!"],"this loses":["the"],"this make":["it"],"this may":["not","come"],"this message":["was","empty?\"","shouted?\""],"this method":["would","because"],"this might":["be"],"this mistake":["in"],"this more":["readable,","what","in","idiomatic","python-esque.","understandable"],"this move":["was"],"this much":["better."],"this name":["from","if"],"this naming":["scheme."],"this never":["raises"],"this new":["style"],"this off":["hand."],"this on":["upper"],"this one":["could","is","it","trying","I'm","except","I"],"this one,":["not","will","I"],"this one.":["Was","I"],"this only":["makes"],"this or":["t","the"],"this order,":["and"],"this out":["into","with","?"],"this out:":["**please**"],"this particular":["statement,","case","domain,","case","order","problem.","problem...)"],"this pass":["the"],"this passes":["the"],"this pattern":["before,"],"this perfectly":["readable."],"this point":["to","is","(someone","is","because","if"],"this point,":["one"],"this point.":["I've"],"this pretty":["clear."],"this problem":["was","more","using","trivial","and"],"this problem,":["I'll"],"this problem.":["For","I"],"this property":["to"],"this question:":["why"],"this reads":["very"],"this really":["nitpicky,"],"this reason":["-"],"this representation":["to"],"this result":["you"],"this revision":["was"],"this right,":["see"],"this same":["task,"],"this scenario":["can"],"this scenario,":["and"],"this seems":["a","a","to","like"],"this shorter":["version"],"this simple":["example,","solution","case,","exercise."],"this simple.":["But,"],"this simply":["as:"],"this site":["is"],"this site,":["I","so"],"this small":["improvment:"],"this solution":[":p","should","with","out"],"this solution.":["My"],"this sort":["of","of"],"this spaghetti-like,":["I"],"this special":["case"],"this straightforward":["and"],"this stuff":["up"],"this submission.":["It's"],"this syntax,":["in"],"this task":["is","was","involve"],"this tells":["the","the"],"this than":["a","I"],"this the":["simplest"],"this there":["is"],"this thinking":["about"],"this though.":[";)"],"this time":["used"],"this to":["separate","get","get","respect","avoid","take"],"this trivial":["case,"],"this turns":["into"],"this type":["of","of"],"this up":["again","even"],"this up,":["I"],"this using":["string.replace","[`collections.Counter`](http://docs.python.org/3/library/collections.html#collections.Counter)"],"this value":["later\""],"this version":["a","better","makes","by","best"],"this was":["the","a","surprising.","right,","a","about","two","my","helpful!","the"],"this way":["it","to","as","is"],"this way,":["you"],"this way:":["`self.statement"],"this weekend.":["Will"],"this were":["heavy"],"this what":["you","you"],"this wherever":["you"],"this whole":["test"],"this will":["only"],"this with":["`is_yelled`","list","comments","the"],"this without":["people","as","the","doing"],"this work":["with","with"],"this works":["really"],"this works,":["I"],"this works.":["I"],"this would":["be","be","fit","be","be","be","be","in","require","find"],"this\", \"Return":["that\"),"],"this, I":["created","made","involuntarily"],"this, accept":["it,"],"this, and":["I"],"this, as":["you"],"this, because":["both"],"this, but":["removing","the","I"],"this, but,":["as"],"this, my":["work"],"this, once":["the"],"this, or":["nitpick?"],"this, rather":["than"],"this. Are":["nested"],"this. However:":["if"],"this. I":["am"],"this. I'm":["just"],"this. It":["seems","reads","was"],"this. Look":["at"],"this. The":["trade-offs","only"],"this. Well":["done!"],"this. What":["I'd"],"this. When":["it"],"this. Why?":["Well"],"this. You're":["right"],"this. `exercism":["fetch`"],"thorough review":["of"],"thoroughly bikeshedded":["this."],"those (`signature":["="],"those 3":["functions?"],"those 4":["and"],"those None":["checks"],"those `yield`s.":["I"],"those a":["little"],"those are":["just","only","better"],"those attributes":["would"],"those cases":["happen"],"those changes":["and"],"those checks":["are","in"],"those concepts":["in","in"],"those conditional":["branches"],"those considerations":["in"],"those functions":["methods","on","members","static"],"those have":["to"],"those helper":["methods"],"those into":["individual"],"those links":["into"],"those members":["should"],"those methods":["are","would"],"those nested":["functions"],"those other":["comments."],"those pesky":["MatchObject"],"those really":["matter"],"those regexes":["into"],"those regular":["expressions"],"those selfs!":["They're"],"those statements,":["though."],"those strings":["onto"],"those tests":["into"],"those things,":["though,"],"those to":["their","reference"],"those two,":["or","interpreter"],"those were":["great"],"those who":["taught"],"those. Also,":["`self.phrase"],"those. I'm":["not"],"though \"Hey,":["let's"],"though -":["1."],"though :":["why"],"though :p":["Thanks"],"though I":["think","would","don't","know","needed","do","neglected","would","am"],"though I'm":["quite","not","not"],"though PEP8":["is"],"though about":["that."],"though for":["a","seemed"],"though in":["this","my","my"],"though it":["should","does","would","actually","doesn't"],"though it's":["not","more","shorter."],"though now":["that"],"though regarding":["the"],"though so":["it's"],"though sometimes":["it"],"though that":["approach"],"though that'll":["blow"],"though the":["last"],"though they're":["only"],"though which":["seems"],"though with":["your"],"though wouldn't":["`{}`"],"though you":["may"],"though your":["code"],"though, I":["created","don't"],"though, because":["a"],"though, for":["fn"],"though, is":["why"],"though, since":["they're"],"though, so":["I'm"],"though, that":["documenting","this"],"though, you":["really"],"though, zoldar?":["(I"],"though. First":["is"],"though. I":["learned"],"though. It's":["more"],"though. Just":["to"],"though. The":["code"],"though. There":["is"],"though. They":["are"],"though. You":["can"],"though. You're":["second"],"though. one":["at"],"though... I":["think"],"thought --":["that"],"thought I":["had","could","was","might"],"thought I'd":["never"],"thought `re.findall`":["also"],"thought about":["it,","doing","putting","that","it.","a","`phrase","being","using","comments:"],"thought into":["this.","this"],"thought is":["that"],"thought it":["was","would","cheaper","could","would","would","was"],"thought maybe":["the"],"thought my":["code"],"thought of":["even","implementing","the","the","that!","using","implementing","this."],"thought of?":["I"],"thought on":["too"],"thought process":["behind","was:"],"thought that":["was","maybe","all","would"],"thought the":["`hey`","3","problem"],"thought was":["permutations"],"thought your":["original"],"thought. I":["just"],"thought. It":["will","only"],"thought: Why":["use"],"thought: do":["you"],"thoughts about":["this","my","my"],"thoughts all":["around."],"thoughts nonetheless":["in"],"thoughts on":["the"],"thoughts were":["to"],"thoughts, respond":["how"],"thoughts: Do":["you"],"thread-safe -":["strange"],"three `_check*`":["methods"],"three cases":["(question,"],"three comments.":["`x.isupper()`"],"three discrete":["types"],"three first":["cases"],"three if":["statements","directly"],"three if\",":["that's"],"three methods":["violate"],"three methods.":["They're"],"three of":["those"],"three part":["if"],"three points.":["Forth"],"three small":["notes"],"threw an":["error"],"threw me.":["The"],"thrice in":["13+"],"through [The":["Zen"],"through `''.join(...)`":["or"],"through `__class__`":["to"],"through `dna.THYMIDINE`,":["`dna.URACIL`"],"through a":["instance","property"],"through all":["permutations"],"through appropriate":["method"],"through case":["on"],"through code.":["While"],"through each":["character"],"through external":["measures?"],"through here":["http://docs.python.org/2/library/string.html"],"through strand's":["chars."],"through the":["`str`","API:","tests?","code","second","unit","logic.","characters","`str`"],"through these":["may"],"through this":["together."],"through this.":["What"],"through with":["the"],"through your":["reaction"],"through, I":["converted"],"throughout if":["some"],"throw an":["error","exception.","error"],"throw at":["it.","it."],"throw in":["random"],"throwing an":["error?"],"thru 12":["could"],"thru the":["inner"],"thunder from":["the"],"thus appended":["to"],"thus apply":["here"],"thus avoid":["the"],"thus has":["the"],"thx for":["hints,"],"thymidine and":["uracil,"],"thymidine. In":["context"],"thymine maps":["to"],"thymine nucleotide":["replaced"],"thymine with":["uracil."],"tick docstrings":["only"],"ticket, and":["then"],"ticks. Also":["short"],"tightly coupled":["and"],"time (and":["then"],"time (because":["of"],"time (nlogn":["for"],"time -":["sort/sorted"],"time I":["get"],"time I've":["written"],"time `.isspace()`,":["you"],"time `DNA.count`":["is"],"time ```":["score"],"time `is_anagram`":["is"],"time a":["new"],"time add":["some"],"time ago":["and"],"time and":["requires"],"time anyway":[":)"],"time by":["doing"],"time errors":["when"],"time for":["you","me,"],"time in":["unit"],"time instead":["of"],"time is":["to"],"time it":["is"],"time it's":["often"],"time modeling":["or"],"time nitpicking,":["keep"],"time of":["object"],"time or":["returned","returned","returned"],"time since":["I've"],"time someone":["just","is"],"time something":["changes"],"time the":["`hey`","`hey()`","API"],"time then":["you"],"time thing":["and"],"time through,":["I"],"time to":["work","update","review!"],"time used":["filter()"],"time with":["it."],"time, I":["agree","didn't","am"],"time, actually.":["Furthermore,"],"time, but":["I"],"time, i'm":["fine"],"time, too":["much"],"time. IMO":["functions"],"time. If":["you're"],"time. In":["that"],"time. Of":["course"],"time. Sorry":["for"],"time; I":["can"],"timeit.timeit('[\"\".join(sorted(\"sadfasdfagrregwfagfregawgfresafafewrf\")) for":["x"],"timeit.timeit('[\"\".join(sorted(\"sadfasdfagrregwfagfregawgfresafafewrf\"*10000)) for":["x","x"],"timeit.timeit('from collections":["import","import","import"],"times I":["wonder"],"times an":["individual"],"times as":["possible."],"times in":["the","a","`nucleotide_counts`","Python"],"times when":["overloading"],"times without":["recalculating"],"times) just":["normal"],"times) more":["efficient."],"times, and":["my"],"times, maybe":["message"],"times. I":["probably"],"times. The":["more"],"times?) called":["on"],"tin `returns":["a"],"tiny bit":["shorter","more"],"tiny wee":["bit."],"tip should":["be"],"tip! Because":["my"],"tip, I":["misread","changed"],"tip: if":["you"],"tip: there's":["a"],"tips and":["nits","guides."],"tips how":["I","to"],"tips on":["style?"],"tips you":["may"],"tips! Shall":["I"],"tips. Here's":["a","a"],"tired of":["the"],"to \"Solve":["the"],"to \"T\"":["and"],"to \"Uhis":["is"],"to \"align\"":["code"],"to \"clutter":["other"],"to \"declare\"":["your"],"to \"divide":["and"],"to \"guide":["the"],"to \"match\"":["(True"],"to \"string\",":["except"],"to \"transcript\"":["them,"],"to ''":["is"],"to 'encapsulate'":["everything"],"to 'utterance',":["as"],"to (2):":["your"],"to (non-public?)":["helpers"],"to (private)":["helpers"],"to *test*":["this"],"to -":["for"],"to 2":["for"],"to 2-space":["indentation."],"to 3":["at","easier,"],"to 42":["(or"],"to 42,":["since"],"to 99":["or"],"to @amely's":["feedback,"],"to @dewitt,":["I"],"to Bob":["in","if","would","really"],"to Bob,":["such"],"to Bob.hey,":["it's"],"to CAPITALIZE_CONSTANTS.":["You"],"to Clojure":["version)."],"to DNA":["and"],"to DNA.":["This"],"to Kwpolska":["for"],"to Occam's":["Razor"],"to PEP":["8"],"to PEP8":["a","because:"],"to PEP8,":["`_field_name`"],"to Phrase)":["should"],"to Python":["in","Style","conventions!","you","so","3.","and"],"to Python!](http://python-guide.org)":["for"],"to Python's":["regexp"],"to Python.":["If"],"to Python3.":["Subclassing"],"to Pythonic":["conventions,"],"to REPLIES,":["you"],"to RESPONSE_RULES,":["much"],"to RNA":["is","involves","by","string."],"to RealBigB":["(whomever"],"to Rich":["Hickey)."],"to Ruby":["years"],"to U,":["in"],"to Zed":["Shaw,"],"to [*name":["mangling*](http://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references),"],"to [PEP":["8](http://www.python.org/dev/peps/pep-0008/#programming-recommendations)","8"],"to [new":["style"],"to `''`.":["Just"],"to `.Hey()`":["should"],"to `._standard_form()`.":["Can"],"to `.hey()`,":["which"],"to `.hey`":["will"],"to `.lower()`":["and"],"to `.normalized()`":["?"],"to `.silent()`":["(which"],"to `.strip()`":["in"],"to `0`":["is"],"to `Bob`":["class."],"to `Bob`,":["but","or"],"to `Bob`.":["They"],"to `Counter`":["-"],"to `False`":["and","and"],"to `False`,":["you","whenever","as"],"to `False`.":["Another","PEP8"],"to `Interaction`":["class."],"to `None`,":["but"],"to `Phrase.__init__`":["as"],"to `Responder.__subclasses__()`,":["since"],"to `True`,":["which"],"to `_alphagram`.":["Didn't"],"to `_clean`":["in"],"to ``__init__()``":["is"],"to ```False```,":["so"],"to ```not":["string.strip()```."],"to ``answer``)":["because"],"to ``number``":["as"],"to `clean_number`.":["That"],"to `collections.Count`":["and"],"to `dict()`":["are"],"to `dict`":["as","of","because"],"to `dna_string`":["or"],"to `elif`":["(else"],"to `getattr`":["and"],"to `hey()`.":["From","None"],"to `hey_message()`":["when"],"to `if":["sentence"],"to `is_shouting`":["would"],"to `list`":["to"],"to `normalize(word)`,":["when"],"to `not":["self.string"],"to `return":["isUppercase`."],"to `return`":["statement.","statement.","statement.","statement.","statement."],"to `round`,":["and"],"to `self._sequence`.":["I'm"],"to `self.hey_message`":["in"],"to `self.rawinput`":["and"],"to `str(text)`":["in"],"to `str.maketrans`?":["The"],"to `str.split()`":["to"],"to `str[-1]`;":["you"],"to `str`":["which"],"to `string.isupper`":["but"],"to `strip()`":["the","into"],"to `talker_is_shouting`,":["etc.,"],"to `text.strip()`":["in"],"to `to_rna()`":["on"],"to `to_rna`,":["because"],"to `type()`":["doesn't"],"to `word_count()`,":["which"],"to `word_list`":["to"],"to `word`":["in:"],"to `x`":["and"],"to a":["method,","separate","list","list","helper","list","list,","list","value","module","single","particular","new","method","separate","few","set,","representation","physical","voice","private","shouted","message","helper","`response`","variable","name.","maximum","helper.","helper","decorator","very","matter","class","single","simple","single","string","static","unicode","list","dictionary","method","comprehension","derived","list","solution","single","language","newbie","variable","function","list"],"to abstract":["'T'"],"to abuse":["a"],"to accept":["input","multiple"],"to access":["`Message.content`","class","class","these.","a"],"to access,":["but"],"to accomplish":["this"],"to achieve":["that","similar","it","this?","what"],"to act":["like"],"to add":["mappings","the","a","2","a","apart","and","a","encoding","or","simulated","inline","self","case"],"to address":["all"],"to adjust":["the"],"to admit":["that","that","that"],"to agree":["with","to"],"to align":["variable"],"to all":["3","strings"],"to allow":["outside","your","acronyms,"],"to almost":["never"],"to already":["have"],"to also":["be"],"to always":["inherit","have"],"to an":["empty","input","answer.","error"],"to another":["method","`Anagram`","value"],"to answer":["your"],"to answers.":["Shouts"],"to any":["question"],"to anything":["else.","else.","with"],"to appease":["the"],"to apply":["things","the"],"to approach":["it.","this"],"to approve":["this","it."],"to approve?":[":-("],"to ask":["this","about"],"to ask:":["Why"],"to assign":["the"],"to assist":["with"],"to associate":["case"],"to assume":["that","that"],"to at":["least","least"],"to avoid":["`None`","name","colliding","name","name","collisions","name","problems","that","if","guards","accidental","that","hard-coding","the","created","the","extra","unnecessary","recalculation.","the","situations","is","unecessary","implicit","logic","implicit","keeping","incidental","programming","name","weird","this.","name","accidental","programming","bugs.","all","the","all","stray","having","this","meta-programming","the","regex.","the","using"],"to be":["explicit,","dependent","more","explicit,","avoiding","preserved.","the","to","executed","true,","pushy,","preserved.","expensive","an","ordered,","inlined","related","generic,","a","much","inlined.","maintained","reflected","explicit","there","a","interpreted","doing","exposed","more","too","that.","very","pretty","a","a","a","used","too","factored","a","in","pretty","in","seperate","part","order-dependent.","inside","a","self-contained","either","a","a","the","confused","making","very","a","reusing","a","robust,","a","any","part","tried","exposed","sure.","checked","tested","basically","a","a","honest","simple","an","used","more","more","very","more","clearer;","fine","subclassed.","considered","a","easy","moved","lacking","more","OO","initialized","a","more","changed","declarative,","more","more","used","teaching","clear","a","`reversed(range(end_verse,","careful","explicit","very","a","the","executed","able","able","stripped","present.","more","more","part","written","looking","more","able","explained,","made","executable","interpreted","overkill","written","the","printed","convinced","deleted.","overkill","recomputed","updated","an","very","really","a","a","functionally"],"to be\"":["rather"],"to be*":["private."],"to be,":["and","which"],"to be.":["A"],"to best":["put"],"to better":["define","communicate"],"to blah\"":["is"],"to blank":["string\"."],"to bleed":["at"],"to bob,":["and"],"to boolean":["false,"],"to break":["out","the","anything).","down","it","it"],"to break.":["Got"],"to brush":["up"],"to build":["responses,","the","a","the"],"to buy":["into"],"to cache":["into"],"to call":["`hey`","the","`isupper`","the","'msg.strip'","`isQuestion`","one"],"to call.":["However"],"to capture":["seperately","or","or","or","what"],"to care":["when","about"],"to cast":["it","the"],"to catch":["a","here?","an","both","all","the","the"],"to categorize":["the"],"to cause":["problems"],"to chain":["conditionals"],"to change":["my","this","this","anytime","the","your","for","the","in","class","that.","the","this","the","it","the","``number``","format_string"],"to changes.":["When"],"to check":["whether","for","if","if","`if","that","if","the","if","if","if","for","if","if","if","if","string","further","the","\"not","for","`if","it","for","for","if","for","if","if","for","for","for","is","if","for","for","is","for","for","for","for","if","whether","the","before","for","for","input","if","if","if","for","for","it","for","the","if"],"to check,":["but"],"to checking":["all"],"to checkout":["the"],"to chillout?":["No,"],"to choose":["a","for"],"to claim":["that"],"to clarify":["when","the","things.","rational"],"to class":["on","DNA(object):","level"],"to classify":["messages,"],"to clean":["(sic!)","it","up"],"to close":["every"],"to clutter":["the","the"],"to code":["styling,","it"],"to coerce":["inputs"],"to collaborate":["with…"],"to come":["with"],"to comment":["liberally"],"to comment.":["From"],"to communicate":["more"],"to compare":["a","itself","already","and","the"],"to compile":["them"],"to complain":["about."],"to complete":["the"],"to comply.":["Your"],"to comprehend.":["You"],"to compute":["your"],"to conform":["to","to"],"to conformance":["with"],"to confuse":["with","it"],"to consider":["the","is","singing","`s`,","\"cat\""],"to constants":["or"],"to construct":["that"],"to contain":["a"],"to convert":["it","`a","the","to","the"],"to cope":["with","with"],"to copy":["the"],"to correspond":["to"],"to counter":["instance"],"to cover":["`True`"],"to create":["an","an","instance","a","a","the","the","an","new","the","the","another","new","an","one?","new","bob.py","a"],"to creating":["a"],"to criticize":["here,"],"to dabble":["in"],"to deal":["with","with","with","with","with","with","with","with","with","with"],"to debug,":["but"],"to decide":["if","which"],"to declare":["the","static"],"to decouple":["phrase","input","the"],"to dedicated":["functions"],"to deduct":["that"],"to default":["to","to"],"to define":["the","the","words","a","msg","different","classes","a"],"to delete":["`is_only_numbers`","the"],"to denote":["that","that"],"to describe":["that.","the"],"to determine":["validity.","if","this?","silence,","what","whether"],"to dict":["(I","i"],"to different":["statement"],"to differentiate":["`len(newnumber)"],"to directly":["mutate","reuse"],"to disagree":["for","with","with","on","with"],"to discovery":["at"],"to discuss":["and"],"to dispatch":["correct"],"to divide":["work"],"to dna":["too,","to"],"to do":["that?","one","it!","sanitization,","it,","this","it.","anything","this)","this","that.","that","it","it.","so.","it,","was","-","in","after","Ruby","this","blockquotes","something","this","within","Haskellic,","with","this","that","things","so","so","it","that.","is","this.","this.","anything","so","it.","anything.","the","things","to","that.","just","it","this","everything","`join()`","my","it","multiple","more","it","the","that","`.join(s","things","the","this","that!","it.","too","it","that","about","it","this:","some"],"to do),":["not"],"to do,":["which"],"to do.":["I"],"to do?":["Not"],"to doc":["`to_rna`."],"to document":["the","your","your","it","`Phrase.word_count`","all","public","what"],"to dot":["net's"],"to double":["when"],"to download":["https://github.com/exercism/cli/releases."],"to drill":["down"],"to drop":["non-alphanum-or-space"],"to each":["test","of","helper"],"to easily":["switch","express"],"to edit":["every"],"to either":["detect","make","`True`"],"to elements()":["in"],"to eliminate":["comments.","that?","the"],"to emacs":["24,"],"to emphasise":["that"],"to emphasize":["that","that"],"to empty":["strings.","a","string.","string"],"to enable":["static"],"to encapsulate":["data","the"],"to encode":["the","it","that"],"to end":["up."],"to enforce":["this.","private"],"to ensure":["this","the","unique","it","it","sanitization","resuability"],"to ever":["use","write"],"to every":["method"],"to everything,":["joining"],"to execute":["the"],"to exemplify?":[":)"],"to expand":["tests"],"to expect.":["In"],"to explain":["what"],"to explain.":["There"],"to explaining":["the"],"to explanation":["of"],"to explicit":["(and","what"],"to explicitely":["inherit","compile"],"to explicitly":["call","pass","give"],"to explore":["it)","the"],"to expose":["them...","it"],"to express":["things.","the","your","you","meaning","meaning","concisely","their","the","that","that","that"],"to extend":["-","in"],"to extend.":["This"],"to extract":["a","a","only"],"to extracting":["a"],"to factor":["this","this"],"to fail":["around"],"to fail.":["Even"],"to false":["in"],"to false,":["so"],"to favor":["`len(sentence.strip())"],"to feel":["really"],"to figure":["out","something","out","out","out"],"to file":["an"],"to filter":["out","punctuation","out","out","out","matches,"],"to filtering":["out"],"to find":["something","a","a","a","out","out)","a","```contains_alphas```","out","out","something"],"to fit":["in","in"],"to fix":["it."],"to fixing":["this"],"to follow":["it","the","the","the","the","overall"],"to follow,":["I'd","some"],"to force":["it","conversion","filter"],"to forget":["how"],"to format":["your"],"to friends'":["updates"],"to function":["later"],"to functional-pattern-matching":["erlangohaskells."],"to functions":["like"],"to further":["simplify","simplify"],"to gain":["an"],"to garbage":["collection."],"to generate":["all"],"to generic":["and"],"to get":["the","the","more","the","you","anything","it","into","rid","rid","rid","rid","rid","at","rid","the","a","the","rid","a","rid","a","the","quick","the","the","this","the","a","all","rid","the","base","rid","used","the","rid","a","the","it","something","you","rid","back","the"],"to getwords":["for"],"to give":["you","a","us","it","them"],"to go":["for","for","for","back",":)","thru","up","through","with","to","a","from","count"],"to go,":["but"],"to good":["effect."],"to grasp":["I"],"to greedily":["always"],"to grok":["your"],"to group":["them?"],"to guard":["against","people","against"],"to handle":["the","non","it","that","this,","the","`None`","input","the","questions","unicode","`Whatever`","that","that","fall","this.","a"],"to hard-code":["the"],"to hardcode":["the"],"to have":["multiple","bare","submitted","put","agnostic,","other","two","3","methods","two","a","more","of","no","outdated/misleading","the","two","a","it","`lower`","that","them","higher","a","simple","simple,","a","\"simple","a","a","if","a","100","100","to","the","more","the","additional","a","a","a","a","an","the","a","a","to","a"],"to having":["a"],"to hear":["your","more","about","what"],"to help":["too","the","someone"],"to helpers":["with","with","with"],"to hide":["the"],"to hold":["as","that"],"to how":["well","well","I","to"],"to http://exercism.io/submissions/2e65cefbc3a7a259f18fbbdf,":["which"],"to identify":["yells","strings","equivalent"],"to if's,":["and"],"to ignore":["what","all"],"to illustrate":["what"],"to implement":["`Carl`,","`Carl`,","`response_for`,","it","the","it.","another"],"to imply":["it"],"to import":["`maketrans`","string?","the"],"to improve":["it"],"to include":["it.","the","yelling"],"to increase":["both"],"to indicate":["that","that.","that","that"],"to inforce":["this"],"to inherit":["after","from","from","your","your","your","your","your","your","your","your","your","from"],"to initialize":["```answer","`answer","an"],"to initialize,":["then"],"to inspect":["what","what","what"],"to instead":["keep"],"to int,":["otherwise"],"to integers":["to"],"to interpret":["the"],"to interrobangs?":["Inheritance","If"],"to investigate":["the"],"to invite":["you"],"to is_silent":["in"],"to it":["would","quite","and","through","after","after","after","and"],"to it's":["full","bad"],"to it,":["since","but"],"to it.":["I've","Also,","Too","Dive"],"to iterate":["over","over","over"],"to its":["class.","own","own","or"],"to its'":["general"],"to itself,":["while"],"to just":["do","check","ignore","read","type","`None`.","keep","`nucleotides`","rewrite","returning","call","evaluate"],"to jvns":["and"],"to keep":["in","the","module","them","usage","that","inline","this","the","the","cached","imports","the","this","to","`_multiple_bottles`","my","my","in","the","its","the","the","the","dead"],"to keep,":["rather"],"to keeping":["things","it"],"to kiss":[";-)"],"to know":["the","that","if","if","if","how","where","re.","what","is","how","about","where","whether"],"to know.":["I","I"],"to lead":["to"],"to learn":["and","my"],"to learning":["python"],"to leave":["them","alone","triple","them","the","the","them","the","out"],"to let":["other","user","you"],"to letters":["in"],"to like":["this"],"to limit":["the","their"],"to line":["21."],"to link":["the"],"to list":["for"],"to live":["on"],"to locate":["the"],"to look":["at","like.","up","at","at.","at","at","-","up","for","up","in","in"],"to loop":["back"],"to loosely":["model"],"to lose":["the","them"],"to lower":["and","the","case"],"to lowercase":["and","because","before","in"],"to maintain":["some","it.","(as","the"],"to make":["it","it","that","it","sure","a","this","a","it","the","them","method","the","this","this","all","clear","the","this","it","it","it","it","more","it","it","it","the","it","a","this","sense","your","phrase","it","it","sure","`dna`","it","it","it","these","a","all","the","a","`hey()`","sure","sure","sure","both","sure","the","it","the","your","my","sure","all","a","your","your","it","your","you","it","the","the","sure","it","sure","it","the","that","sure","fruitful","`str.translate`","this","the","it","a","new-style","it","it","a","it","a","it","it","a","it","a","`alphagram`","it","a","something","its","uppercase","it","lines","the","`isBlank`","empty","sure","one","`silence()`","this","this","this","it","a","the","mentally.","since","use","it","this","this","them","the","sure","use","use","use","use","use","it","a","it","it","seperate","the","the","the","`area_code`","the","the","this","the"],"to manage":["change\"","the"],"to manipulate":["the","Bob's"],"to manipulation,":["indeed..."],"to many":["people."],"to map":["snd","rna"],"to mark":["an","the","a","`DNA.dna`","`DNA.dna`"],"to match":["the","the","patterns,","the"],"to me":["than","that","too","than","in",":/","either.","for","for","recently,",":)","the","to","and","the","to","-","-","where",":-)","to","for","is","as","(each","is","it","as","it"],"to me,":["well","but","but","and","though.","if","once","but"],"to me.":["Some","Maybe","My","Good","A","I","Funny","If","Is","This",":-)","Personally,","I","Just"],"to me...":["but"],"to me:":["`str.maketrans(\"T\","],"to meet":["the"],"to members":["of"],"to memoize":["the","it","them"],"to mention":["that","what","make"],"to mess":["with","with","with"],"to methods":["/","within"],"to minimize":["flow-control."],"to miss":["out"],"to mix":["abstraction"],"to model":["every","the","your"],"to modify":["methods","methods","`is_silent`","the"],"to modifying":["the"],"to more":["convoluted"],"to move":["`isshouting`","the","`Nucleotides`","some","the","the","the"],"to much":["java"],"to multiple":["return"],"to mutate":["it."],"to my":["liking)","senses","code.","day","code!"],"to name":["them","them","my","functions"],"to naming":["conventions","conventions"],"to need":["one.","the"],"to nest":["the"],"to no":["effect?"],"to non-public":["attributes","attributes,"],"to normalize":["phrase,"],"to normalize.":["I"],"to not":["have","make","compare","require","repeat","pass","use","use","count","initializing","name"],"to obviate":["the"],"to offer":["a"],"to omit":["caching"],"to one":["line."],"to only":["sort","use","specify","use"],"to other":["functions.","coders.","considerations,"],"to others,":["I"],"to over":["comment,"],"to overcome":["the"],"to overwrite":["the"],"to pare":["them"],"to parse":["through","2","this"],"to pass":["the","them.","the","the","in","the","`_raw`","`digits`","though","tests","all"],"to people":["unfamiliar"],"to perform":["the"],"to pick":["out"],"to place":["the"],"to play":["-","with"],"to point":["this","that"],"to poke":["around"],"to practice":["responsible","these"],"to precompute":["anything"],"to prefix":["everything","them","them"],"to presume":["that"],"to prevent":["counting","bugs,","bugs,","bugs,","bugs,","bugs,","this."],"to private":["helper","methods","methods"],"to probably":["use"],"to problems":["should"],"to process":["everything","`Whatever.`","input"],"to produce":["the","an"],"to proper":["variable"],"to properly":["document"],"to protect":["some","some"],"to provide":["docstrings,","different","`None`"],"to puke":["to"],"to pull":["that","the"],"to push":["anything","back"],"to put":["extra","those","line","it...","it.","the"],"to puzzle":["out"],"to python":["style","style"],"to pythons":["class"],"to python–those":["functions"],"to query":["about"],"to question":["whether"],"to quickly":["browse"],"to quote":["a"],"to raise":["an"],"to re-`join`":["the"],"to re-factor":["your"],"to react":["to"],"to read":["when","but","and","the","the","257!","the","the","for","the","the","the","the","the","the","the","up","the","about","http://www.python.org/dev/peps/pep-0257/","or","the","[PEP-8](http://www.python.org/dev/peps/pep-0008)","now.","in","now.","it","the"],"to read,":["and","too."],"to read.":["But","Though","You"],"to reading":["your"],"to realize/check,":["that"],"to reason":["about,","about"],"to rebind":["it"],"to recalculate":["it","```"],"to recent":["overexposure"],"to recode":["this"],"to reduce":["function","the","the","repetition","the","the"],"to refactor":["any","the","it","the","your"],"to refer":["to","to"],"to reference":["self"],"to reflect":["changed","our"],"to rely":["too","on"],"to remark":["about."],"to remember":["there"],"to remind":["myself."],"to remove":["a","the","chars,","_is_statement","_is_statement","is","as","a","the","punctuation","a","trailing","punctuation.","a","the","ALL","punctuation","the","values","all"],"to rename":["them","`dna`"],"to renaming":["`str_is_upper`"],"to reorder":["the","the"],"to repeat":["it"],"to replace":["again","your","only","lines","reduce,"],"to represent":["when","word,","a"],"to rerun":["the"],"to resort":["to"],"to respect":["the"],"to respond":["differently","to."],"to retain":["correct"],"to rethink":["the"],"to return":["\"Whatever.\"?","twice","'Fine.","an","```","a","the","the","that","a","a","when"],"to returning":["a"],"to reuse":["the","the"],"to reuse,":["I'm"],"to review!":["I"],"to rewrite":["all"],"to right,":["and"],"to rna":["translation.","in","transcription."],"to rna:":["in"],"to roll":["slightly"],"to run":["them","the","the"],"to save":["space,"],"to say":["it's","\"Whatever.\"","`self._replies`","`Bob.__foo`","\"implementation\")"],"to say,":["with"],"to see":["what","if","how","early","some","what","not","that","some","it?","something","the","if","where","how","how","there","if","@wilma","this","if","what","if","if","if","if","your","if","if","if"],"to sentences.":["An"],"to separate":["methods","named","methods","code","methods?","methods?","the","functions,","concerns.","object","module","method","out"],"to set":["up","a","default","any","them.","it","it...","up","a","defaults"],"to setting":["the","a"],"to shave":["off"],"to shorten":["it.","your"],"to shout":["are"],"to shouted":["questions"],"to shouting,":["questions"],"to show":["that","pretty","I"],"to significantly":["simplify"],"to signify":["that","internal","internal","non-public"],"to simple":["`filter`."],"to simplify":["your","your","checking","the","`Bob._is_silence`","phrase","`word_count`.","the","the","the","this","your"],"to simply":["count"],"to single":["underscore"],"to skin":["this."],"to skip":["an"],"to sleep.":["Woke"],"to solve":["the","the","this","this","this","the","this","this"],"to some":["coworkers","abstract","sort","external","method"],"to someone":["not","with"],"to something":["else","else,","more","in","like"],"to sort":["it"],"to spacing":["between","in"],"to spare":["oneself"],"to speak":["for"],"to special":["case"],"to special-case":["empty"],"to specify":["which","the","`re.UNICODE`","all"],"to speed":["up"],"to spell":["\"str.isupper()\""],"to split":["the","apart","it","`base_word`","those","it","it","phrase","the"],"to split()":["to"],"to start":["using","with","out","with:","appreciating"],"to state":["that"],"to statically":["create"],"to stay":["close"],"to steal":["thunder"],"to step":["through"],"to stick":["with","to","to"],"to still":["be"],"to store":["the"],"to string":["I","methods"],"to string.isupper()":["because"],"to strip":["out","the","punctuation","punctuation...","the","non-alphanumeric","the"],"to struggle":["writing"],"to style":["your"],"to sub":["you"],"to subclass":["form","object","`str`"],"to subroutines":["on"],"to subscribe":["to"],"to substitute":["punctuation","strings"],"to suggest":["they're","you"],"to summarize,":["you"],"to support":["code"],"to switch":["to"],"to take":["another","advantage","this","precedence","a","one","it","the","into","into","that"],"to talk":["about"],"to tell":["you","an","user","that"],"to test":["the","them","against","against","for","against","against","against","against","for","for","the","for.","if","for","and","for","the","every","some","an","the"],"to that":["form.","assignment.","dictionary","point","list."],"to that,":["and"],"to the":["Python","letter","list,","`Bob`","nitpick","class?","process","problem","text","top","second","Bob","Python","naming","external","tokenize","problem","top","tests","outside","actual","[one](https://github.com/kytrinyx/exercism.io/blob/master/assignments/python/bob/example.py)","readability","lambda","actual","nucleotides","extent","conclusion","elif","forefront,","class/method.","previous","point.","Bob","reader,","idea","`response`.","result","instance),","readability","problem.","%","predicates.","double-leading-underscore","class","class","%","original.","expression","regexp","different","word,","next","for","translation.","first","module","explicit","store","point","start","public.","decrease","instance.","`Counter`","store.","rest","Python","code,","class","'U'","returned","end","OOP","class.","string.","`hey()`","\"type\"","point\"","caller)","next","__init__","other","top,","magic","problem?","unittests,","one","one","Python","string.","class,","dictionary.","`defaultdict`","DMV.\")","kiss-principle","code","tests","README.","checks","constructor","input","class","US"],"to their":["own","name,","own"],"to them":["like","as"],"to them.":["You've"],"to themselves":["(like"],"to these":["rules"],"to think":["\"simplistic\".","about:","\"oh","about","that","of","up","of","about:","of","about."],"to thinking":["about"],"to this":["is","kind","solution.","task"],"to this,":["my"],"to this.":["Are","It"],"to those":["3"],"to train":["myself"],"to translate":["from","dna"],"to triple":["quote"],"to truncate":["the"],"to try":["the","using","to","a","and","`Counter(iterable)`","next","without."],"to turn":["it","the"],"to two":["lines"],"to type":["than"],"to understand":["exactly","what","at","what","the","the","the","and","and","months","and","months","later","every","this"],"to understand.":["I","For"],"to unexpected":["behavior."],"to unlock":["the","the"],"to update":["this","all","this."],"to upgrade,":["as"],"to uppercase":["was"],"to uracil.":["I"],"to use":["a","on","`message","it","\"new-style\"","`rstrip`.","get()","that","`capitalize`.","single","an","a","Meta","\"self\"","some","'is","lower_case_method_names.","`count`.","`self`","snake_case","a","variable","inline","a","new","a","wildcard","methods","simple","`str.lower()`","else","else","`maketrans`","variables'","the","\"new-style\"","\"new-style\"","regexp","this","`if","`for","the","the","newstyle","new-style","exercism","new-style","newstyle","function","all_lower","a","check","\"new-style\"","`isspace`","`@dixie`","the","`isinstance()`","explicit","specialized","`str.replace`","`ALL_UPPER`","`[-1]`","new","a","dictionary","some","`sorted`","`re.search`;","regular","a","the","`string.replace`","class","builtin","namespaces.","variable,","double","`endswith`,","instead","some","`isspace`,","more","static","this","this","them","in","a","variable","these","it.","new_word","list","Bob.theTests","named","a","camelCase","the","of","isupper()","that","the","\u003ccode\u003emessage.endswith('?')\u003c/code\u003e.","methods","regular","a","[IPython](http://ipython.org/ipython-doc/stable/interactive/tutorial.html)","`.endswith()`","`.endswith()`","`.endswith()`","`.endswith()`","a","the","\"elif\"","only","`string.maketrans`","a","only","a","my"],"to using":["them.","an"],"to view":["comments","their"],"to walk":["me","my"],"to want":["seperate"],"to watch":["your"],"to weigh":["them."],"to wether":["it"],"to what":["is","you've","is","you"],"to with":["a"],"to work":["with","this","on","out","best.","it?","out.","this","around","with","on.","on"],"to worry":["about","about","and","too"],"to wrap":["my","input","the","it"],"to write":["good","getters","this","code","something","something","some","`\"?\"","the","a","a","a","a","it","`not","the",":","`defaultdict(int)`","in","readable"],"to you":["to","prefer",":-)"],"to you.":["I","OTOH,"],"to your":["code,","(except","newer-named","return","class"],"to zoldar":["using"],"to) instead":["but"],"to), I":["could"],"to, and":["assumes"],"to, because":["the"],"to, firstly,":["ensure"],"to. By":["having"],"to. Is":["there"],"to. Tell":["me"],"to_bob[-1] would":["give"],"to_dna to":["one"],"to_rna method":["rather"],"to_rna() is":["doing)"],"to_rna, but":["it"],"today. Perhaps":["not"],"together (+":["reduce"],"together a":["series","Python"],"together at":["some"],"together in":["a"],"together isn't":["likely"],"together like":["the"],"together so":["you"],"together with":["the","parens","lowks'","string.punctuation?"],"together, and":["into"],"tokenization step":["(which"],"tokenize method,":["after"],"tokenizer module.":["I've"],"tokenizing than":["`re.findall`"],"told jokes,":["or"],"told me":["that","they","to"],"told that":["you're"],"told to":["triple","read"],"tome \"Smalltalk":["Best"],"tomorrow asking":["for"],"ton of":["ways","sense,"],"tone of":["my"],"tone, for":["Bob"],"too :-)":["-"],"too and":["get","as","it"],"too boring,":["so"],"too but":["that's","later"],"too carried":["away"],"too clever.":["A"],"too cluttered":["with"],"too complex":["(if"],"too complex,":["in"],"too complicated":["for","structure","for","(or"],"too complicated.":["To"],"too familiar":["with"],"too far":["into"],"too fond":["of","of","of"],"too generic":["to"],"too good":["about"],"too happy":["with","with"],"too hard":["to"],"too harsh":["(if"],"too heavily":["on"],"too heavy":["for"],"too huge,":["so"],"too long).":["How"],"too long.":["Solution:"],"too low":["level"],"too many":["scripts","`word`s.","lines","returns"],"too much":["elaborate.","other","details","for","is","whitespace","from","about","going","just","for","about","of"],"too much,":["even"],"too much.":["You","I"],"too obscure":["magic"],"too unwieldy":["to"],"too verbose,":["but","though"],"too verbose.":["How"],"too while":["I"],"too). Also":["you"],"too, I":["can"],"too, and":["that"],"too, because":["it"],"too, but":["couldn't","not","there"],"too, by":["using"],"too, thanks":["for"],"too. For":["example,"],"too. I'd":["suggest"],"too: `if":["talker_is_shouting(message):"],"took 42s":["but"],"took @rocky's":["suggestion"],"took RealBigB's":["advice"],"took a":["few"],"took about":["350"],"took another":["look"],"took different":["approaches."],"took it,":["but"],"took me":["awhile","a"],"took out":["the","some"],"took this":["assignment,"],"took to":["see"],"tool named":["'pep8'"],"tools are":["available"],"top -":["then"],"top but":["that"],"top comment":["I"],"top comment.":["The"],"top here.":["But"],"top is":["unused."],"top level?":["I"],"top of":["the","your","the","module.","a","module.","module.","`Bob.check`","`Bob.hey`","the","the"],"top on":["module"],"top, but":["no"],"top, everything":["else"],"top, which":["made"],"top-level constant":["would"],"top-level definitions.":["*"],"top-level method,":["you"],"top-level of":["a","the"],"top. I":["really"],"topic, and":["you"],"tossing out":["exact"],"total Python":["newbie,","noob."],"total sense.":["Here"],"total_after() uses":["functional"],"totally agree":["on"],"totally agree.":["But"],"totally clear":["the"],"totally convinced":["I"],"totally disagree":["with"],"totally fine.":["No"],"totally just":["a"],"totally right.":["It"],"totally see":["how"],"totally unpythonic.":["I'll","A"],"totally useless":["-"],"touch with":["making"],"touched Python":["in","in"],"tough lesson":["not"],"tough to":["choose"],"toward the":["top,"],"towards the":["future,"],"track of":["original"],"track. So":["far,"],"tracking the":["existing"],"trade off":["because"],"trade-off I":["took"],"trade-off is":["to"],"trade-off, but":["one"],"trade-offs are":["made"],"trade-offs were;":["one"],"traded condensity":["for"],"traded memory":["efficiency"],"tradeoff between":["cleverness"],"tradeoff here.":["Yes,"],"tradeoff of":["coersion"],"tradeoffs here,":["and"],"tradeoffs of":["doing"],"trail of":["identifying"],"trailing '!'":["which"],"trailing beginning":["or"],"trailing whitespace":["can"],"trailing whitespace,":["therefore"],"train myself":["in"],"transcribed RNA":["strand"],"transcribed, nor":["does"],"transcribing DNA":["but"],"transcribing as":["a"],"transcribing, it":["also"],"transcription an":["obvious"],"transcription in":["order","the"],"transcription routine,":["because"],"transcription to":["RNA"],"transcription, I'm":["somewhat"],"transcription. Certainly,":["when"],"transcription. Here,":["the"],"transcription. So":["the"],"transcription. Using":["the"],"transform. It":["is"],"transformation and":["the"],"transformation is":["enough?"],"transformation so":["using"],"transformation suggested":["in"],"transformation, but":["since"],"transformation, then":["the"],"transformed to":["counter","uppercase"],"transformer, but":["with"],"transforming phrase":["to"],"transforming the":["DNA"],"transforms are":["unnecessary"],"transition form":["Python"],"translate a":["lot"],"translate deletes":["chars,"],"translate dna":["to"],"translate from":["DNA"],"translate function":["instead"],"translate in":["submission"],"translate it":["to"],"translate method":["and","of","pretty"],"translate on":["line"],"translate over":["replace"],"translate to":["be","a"],"translate uppercase":["to"],"translate() method":["of"],"translate() together":["with"],"translate, punctuation,":["and"],"translate. I":["also"],"translates empty":["strings"],"translates well":["to"],"translating DNA":["to"],"translating? Passing":["None?"],"translation along":["with"],"translation become":["abundantly"],"translation class,":["but"],"translation from":["my"],"translation is":["correct."],"translation rules":["given"],"translation table":["is","is","would","to","instead","as","for","in"],"translation table.":["Do"],"translation, piece":["by"],"translation. Isn't":["`str.translate()`"],"translation. This":["is"],"translations, where":["3"],"translations. The":["details"],"transtable is":["confusing"],"transtable, I":["can"],"treat functions":["as"],"treat it":["as","like","as"],"treated as":["a","a","a","yelling,"],"treating `DNA._dna_str`":["as"],"treatment or":["yelling)"],"treats non":["alpha"],"treats translates":["empty"],"tree in":["is_silence,"],"trick for":["dict"],"trick, but":["I"],"tricks with":["the"],"tried [something":["a"],"tried doing":["this"],"tried for":["a"],"tried in":["order,"],"tried it":["and","in"],"tried putting":["the"],"tried resubmitting":["the"],"tried searching":["through"],"tried the":["string"],"tried to":["handle","be","produce","write","make","solve","ensure","do","write","stick","make","use"],"tried various":["ways:"],"tries to":["pick"],"trigger an":["exception"],"trim in":["the"],"trim seems":["rather"],"triple quote":["doc"],"triple quotes":["in"],"triply-`and`ed if-statement":["of"],"trivial case,":["but"],"trivial change":["_if"],"trivial code,":["and"],"trivial exercise,":["but"],"trivial peace":["of"],"trivial problem":["and"],"trivial problem,":["however"],"trivial so":["maybe"],"troll and":["not"],"troll. The":["fact"],"troll; I'm":["here"],"trouble deciding":["what"],"trouble in":["Python."],"true ,":["it"],"true condition.":["So"],"true for":["is_shouting,","an"],"true if":["all","and"],"true or":["false."],"true python":["way."],"true to":["the"],"true! I":["think"],"true, and":["definitely"],"true, but":["the","in"],"true, that":["the"],"true. Try":["to"],"truncate the":["message"],"truthiness -":["would"],"truthiness in":["`isSilence`"],"truths and":["`None`"],"truthy since":["you've"],"truthy to":["shorten"],"truthy/falsey value":["of"],"try -":["most"],"try `\"foo":["%(bar)s\""],"try `Counter(iterable)`":["instead"],"try `Phrase.wordcounter":["is"],"try a":["nitpick:","recursion","revision"],"try adding":["expressive"],"try and":["move","there","make","get"],"try at":["Python,"],"try block":["?"],"try checking":["the"],"try cleaning":["up"],"try getting":["read"],"try instanciating":["`Bob`"],"try inverting":["the"],"try it":["later.","and","out."],"try next":["but"],"try one":["without"],"try out":["how","stuff"],"try pyflakes":["for"],"try pylint":["instead"],"try reading":["out"],"try that":["in"],"try the":["`Carl`","string"],"try to":["stay","avoid","write","manipulate","keep","match","get","keep","ensure","place","figure","use","test","avoid","process","accept","use","provide","default","call","explain","think","find","work","avoid","avoid","use","access","kiss","use","use","take","avoid"],"try using":["a","it."],"try very":["hard"],"try was":["way"],"try which":["overcomplicated"],"try, but":["I"],"try-except-else block":["..."],"try. Disclaimer:":["not"],"try/except block":["in"],"try/except block,":["and"],"try/except clause":["by"],"trying different":["ideas."],"trying doing":["it"],"trying out":["different"],"trying to":["improve","tell?","catch","ignore","set","understand","find","tell?","find","push","add","empty","remove","overwrite","achieve.","deal","make","avoid","figure","call.","think","eliminate","find","substitute","do","determine","encode"],"tuple is":["a"],"tuple list":["works.","clearly"],"tuple unpacking":["works"],"tuple with":["`dict((rna,"],"tuple(names) for":["grade,"],"tuple, etc.)":["from"],"tuple. If":["you"],"tuples (which":["mirrors"],"tuples and":["a"],"tuples because":["which"],"tuples did":["in"],"tuples first.":["just"],"tuples keeps":["it's","it's"],"tuples which":["maintains"],"tuples, empty":["dicts"],"tuples, not":["lists,"],"turn it":["into"],"turn the":["`hey`"],"turned into":["a"],"turned out":["that"],"turns into":["functional"],"turns out":["that","there's","to"],"tutorial on":["[Class"],"tutorials. Good":["point."],"tweaked naming":["could"],"twice and":["have","make"],"twice as":["long","fast"],"twice for":["each"],"twice is":["a"],"twice. But":["if"],"twice. Could":["you"],"twice? That's":["why"],"two 's'":["while"],"two -":["`sanitize`"],"two adjacent":["litteral"],"two answers":["combined","are"],"two are":["the","the"],"two args":["on"],"two blank":["lines","lines.","lines","lines","lines","lines","lines","lines"],"two branches":["setting"],"two calls":["to","to"],"two cases,":["`n=0`"],"two classes":["this"],"two commenters.":["Also,"],"two comparisons":["to"],"two concepts,":["each"],"two different":["functions,","data","ways","views"],"two distinct":["steps","points.","places"],"two ending":["underscores)"],"two explicits":["calls"],"two improvements":["I"],"two lines":["here.","and","of"],"two links":["to"],"two list":["comprehensions"],"two lists,":["one"],"two methods":["with","with"],"two nicely":["decoupled"],"two of":["your","them","them"],"two or":["more"],"two other":["nitpicks."],"two parts":["of"],"two points":[":","it's","where"],"two questions,":["not"],"two remarks:":["you"],"two responsibilities.":["I"],"two robots":["are"],"two schools":["of"],"two sentences,":["each"],"two separate":["cases","values","tables"],"two set":["intersection,"],"two steps":["that"],"two str":["arguments."],"two string":["that"],"two things,":["it","checking"],"two thoughts,":["respond"],"two times":["in"],"two times,":["maybe"],"two underscores":["are"],"two variable":["definitions"],"two versions":["in"],"two ways:":["either"],"two words":["are"],"two, if":["you"],"two, interpreter":["will"],"two, or":["to"],"two-line version":["works"],"two-space indents.":["At"],"two-space-indents? I'm":["just"],"two-terms comparison":["(`self._lowercased"],"two. What":["is"],"two. When":["you"],"two. we":["took"],"type (silence,":["question,"],"type -":["\"In"],"type `help(instance_or_type_or_module)`":["in"],"type `help(str)`":["to"],"type already":["knows","knows"],"type check":["here."],"type check.":["If"],"type checking":["the","is"],"type errors,":["in"],"type in":["the","Python","python,","python.","my"],"type is":["an","_much_","inconsistent:"],"type it":["can't"],"type knows":["what"],"type logic":["should"],"type not":["only"],"type of":["thing","problem","message,","message","statement","message","```greeting```.","input"],"type or":["module"],"type python":["string"],"type string,":["sequence.replace"],"type tests,":["but"],"type than":["`ipt`"],"type this":["in"],"type you":["expect."],"type) and":["just"],"type, it":["already","has","has","has","is"],"type, so":["it's"],"type-based polymorphic":["dispatch"],"type-system but":["in","in"],"type. I":["can't"],"type. It":["seems"],"type. Just":["return"],"type. The":["first"],"type. Using":["it"],"type. Would":["you"],"type. Yes,":["one"],"type? Do":["you"],"typechecking part":["in"],"typecheking, expect":["a"],"typed dictionary":["that","that","that"],"typed language":["that"],"typed up":["first"],"types are":["used)."],"types for":["DNA/RNA.","maketrans."],"types methods":["and"],"types of":["speech","messages.","qualifications","\"input\""],"types or":["tail","functions","the"],"types with":["their"],"types, but":["alas"],"types, pattern":["matching,"],"types. In":["line"],"typical use":["of"],"typically named":["with"],"typically say":["\"strand\""],"typically want":["to"],"typically write":["`if","`class"],"typically you'd":["write"],"typing \"python":["bob_test.py\""],"typing -":["explicitly"],"typing](http://docs.python-guide.org/en/latest/writing/structure/#dynamic-typing) for":["more"],"typos have":["slipped"],"typos such":["as"],"u can":["also"],"u could":["even"],"ubderscore is":["enough."],"uderscore prefix":["would"],"ugliness I":["think"],"ugliness of":["it...."],"ugliness when":["your"],"ugly -":["and"],"ugly as":["sin,","hell"],"ugly than":["the"],"ugly to":["me,"],"ugly, but":["that's","then"],"ugly, in":["my"],"ultimately better":["than"],"umlaut tests,":["probably"],"umlaut tests?":["Perhaps"],"umlaut-test still":["fails,"],"umlauts to":["pass."],"umlauts. I":["was"],"umlauts... I":["found"],"unable to":["decide"],"unaware of":["how"],"unbound methods":["and"],"unbound) are":["objects"],"unclear what":["is"],"unclear whether":["you"],"unclear why":["do"],"unclear. Whenever":["you"],"uncomfortable with":["is"],"uncommon in":["Python"],"uncommon. I":["feel"],"undefined. That":["is"],"undefined. When":["I"],"under a":["different"],"under linux)":["that"],"under the":["hood.","attribute,","mistaken"],"underestimate the":["power"],"underestimated Python's":["standard"],"underlying encoding,":["you"],"underlying representation":["of"],"underlying science":["is"],"underlying what's":["going"],"underscore (or":["two,"],"underscore -":["a"],"underscore aka":["dunder"],"underscore and":["provide","not"],"underscore are,":["by"],"underscore delimited":["names"],"underscore delimited.":["More"],"underscore for":["non-public","marking","the","inner"],"underscore in":["helper","this"],"underscore is":["used","the","necessary","used","to"],"underscore may":["be"],"underscore naming":["is","convention."],"underscore on":["the"],"underscore or":["two."],"underscore prefix":["is","could","should"],"underscore prefixes":["**and**"],"underscore scheme":["is"],"underscore suggest":["that"],"underscore to":["make","single","the","signify","signify","signify","their"],"underscore) to":["be"],"underscore, so":["even"],"underscore. Also":["`dirtyInput`"],"underscore. Another":["minor"],"underscore. Double":["underscore"],"underscore. It":["of"],"underscore: I":["[understood](http://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references)"],"underscored, lowercase":["names."],"underscores /":["two"],"underscores and":["the"],"underscores are":["meant","meant","only","subject"],"underscores invoke":["name"],"underscores should":["be"],"underscores) are":["reserved"],"underscores, which":["aren't","I"],"understand a":["piece"],"understand and":["maintain)","everything","modify"],"understand at":["a"],"understand but":["disagree"],"understand correctly":["=)"],"understand every":["single"],"understand everything":["for"],"understand exactly":["what"],"understand functional":["programming"],"understand how":["\u003ccode\u003ematch\u003c/code\u003e"],"understand it":["very","in"],"understand later":["on?"],"understand months":["later.","later\":"],"understand now":["that"],"understand old":["style"],"understand that":["it","I","you"],"understand the":["assignment.","new-style","motivation","motivation","benefits","think","logic","'empty'","'_is_shouting'","continue","\"basestring\""],"understand this":["than"],"understand what":["they","exactly","you're","you","it's","you're"],"understand your":["point,","point,","point","viewpoint"],"understand, but":["am"],"understand, it's":["just"],"understand. By":["that"],"understand. For":["example,"],"understand. I":["like"],"understandability more":["than"],"understandable from":["outside."],"understandable seemed":["like"],"understanding if":["I"],"understanding is":["that"],"understanding the":["code"],"understanding what":["you"],"understanding you":["want"],"understands that":["empty"],"understands what":["a"],"understood the":["problem,"],"understood what":["I"],"understood you":["correctly"],"understood. wonder":["of"],"underutilized part":["of"],"undesired whitespace":["in"],"undrrscore may":["be"],"unecessary repetition":["of"],"unefficient to":["iterate"],"unexpected behavior.":["Maybe"],"unexpected stateful":["behavior"],"unfamiliar to":["someone"],"unfamiliar with":["\u003ccode\u003eany\u003c/code\u003e","python,"],"unfortunate effect":["of"],"unicode -":["thats"],"unicode as":["well"],"unicode character":["ranges:"],"unicode characters.":["Hence,"],"unicode data":["and"],"unicode escaping":["the"],"unicode object":["to"],"unicode source":["and"],"unicode strings":["(i.e."],"unicode test-cases":["this"],"unicode) should":["be"],"uniform (doesn't":["have"],"uniform and":["order-independant"],"unions are":["`DNA"],"unique validity.":["Otherwise,"],"uniqueness in":["any"],"unit test":["provided","to"],"unit test.":["http://youtu.be/o9pEzgHorH0"],"unit test?":["Am"],"unit tests":["specify","when"],"unit tests,":["specifically","it"],"unit tests.":["While","But"],"units of":["earth"],"unittests myself":["doing"],"unittests, so":["it"],"unknow input":["will"],"unknow input.":["I"],"unknown input?":["Would","Would"],"unknown keys":["in"],"unknown message":["types"],"unless it's":["absolutely"],"unless the":["if"],"unless there's":["a"],"unless you":["plan","are","know","wanted"],"unlikely behavior,":["and"],"unlikely to":["be"],"unlock the":["next","next"],"unnatural to":["people"],"unnecessarily bloated":["code,"],"unnecessarily converting":["the"],"unnecessary and":["redundant.","it's"],"unnecessary check":["from"],"unnecessary elif":["and"],"unnecessary for":["this"],"unnecessary given":["that"],"unnecessary grouping":["parentheses","parentheses"],"unnecessary in":["Python"],"unnecessary iterations.":["I"],"unnecessary lines":["of"],"unnecessary method,":["can"],"unnecessary negation,":["and"],"unnecessary on":["the"],"unnecessary parentheses":["in"],"unnecessary parenthesis":["on"],"unnecessary since":["you're"],"unnecessary to":["have"],"unnecessary, since":["your"],"unnecessary. Also":["there"],"unnecessary. Check":["in"],"unnecessary. For":["module"],"unnecessary. Moving":["checks"],"unnecessary. Other":["than"],"unnecessary. String":["has"],"unnecessary. The":["test"],"unnecessary. There's":["also","more"],"unneeded \"import":["re\"."],"unofficially to":["\"Solve"],"unordered. Should":["use"],"unpacking works":["fine,"],"unpythonic _and_":["it"],"unpythonic. A":["language"],"unpythonic. I'll":["give"],"unpythonic. If":["you"],"unqualified `except:`,":["always"],"unsealed\". If":["you"],"unsure myself":["if"],"unsure of":["how"],"unsure what":["how"],"unsurprising way":["possible\"."],"unsymmetric. And":["a"],"until I":["realised","read","encountered"],"until someone":["on"],"until the":["first","5th.."],"until you":["have","get"],"unused `_is_statement`":["method."],"unused. I":["wonder"],"unused. The":["no-op"],"unusual arrangement,":["though"],"unwieldy to":["do"],"up -":["I"],"up \u003ccode\u003eis":["alpha\u003c/code\u003e."],"up DNA-&gt;RNA":["transcription"],"up `_clean_phrase`":["a"],"up `str.isspace()`":["-"],"up a":["little","bit.","bit.","version","usable","list","bit."],"up about":["boolean"],"up again":["afterwards"],"up all":["the"],"up alphagram":["to"],"up alright":["in"],"up and":["check","started"],"up as":["a"],"up being":["used","treated","clearer","much"],"up completely":["and"],"up computing":["a"],"up correctly":["by"],"up directly":["on"],"up even":["nicer."],"up first":["and"],"up for":["me","our","me"],"up from":["Brandon"],"up front":["in"],"up front.":["Also,"],"up getting":["`None`"],"up in":["a"],"up inputs":["on"],"up into":["two"],"up invariants":["maintained"],"up less":["memory."],"up meaning":["anything”."],"up more":["descriptive"],"up most":["of"],"up on":["methods","stack","some"],"up or":["down?"],"up python":["class"],"up solution":["for"],"up some":["weird,"],"up space":["as"],"up the":["RNA","(\"T\",\"U\")","attribute","rules","good","input","words","doc","the","result","process","logic","code","logic"],"up this":["code"],"up to":["you","you.","you","you","you."],"up tomorrow":["asking"],"up until":["the"],"up when":["writing"],"up with":["dispatching","`utterance`,","two","methods","the","50%","response","an","a","component","to","any","maybe"],"up word_count":["a"],"up, I":["have"],"up, and":["thus"],"up. I":["thought","had"],"update all":["references"],"update and":["resubmit."],"update the":["counter"],"update this":["code"],"update this.":["`exercism"],"update to":["take"],"update when":["I"],"updated in":["the"],"updated my":["test","test","code."],"updated the":["code"],"updated this":["little"],"updated using":["the"],"updated version":["consists"],"updated when":["some"],"updated. Could":["you"],"updates here":[":)"],"upgrade your":["exercism"],"upgrade, as":["I"],"upgraded to":["emacs"],"upgrading anytime":["soon)."],"upload a":["new"],"upload. I":["guess"],"uploaded a":["second"],"upon hostmaster's":["comment."],"upon the":["global"],"upper and":["is"],"upper case":["can","variable","string","would"],"upper case.":["Additionally","The"],"upper elif,":["but"],"upper or":["lower","what"],"upper(), strip(),":["replace()```"],"upper-case letters":["I"],"upper-case string":["(`text.upper()`)"],"upper-case\" is":["surely"],"upper-case. There's":["a"],"upper-case; it":["would"],"uppercase (or":["all"],"uppercase `dna_to_rna`":["since"],"uppercase and":["if","if","if","there's","there"],"uppercase as":["well."],"uppercase because":["it's"],"uppercase check":["so"],"uppercase in":["a"],"uppercase input.":["If"],"uppercase it":["(`STRIP_PUNCTUATION`)"],"uppercase letter":["(`capitalize`","that"],"uppercase letters":["in"],"uppercase or":["if"],"uppercase seems":["complex"],"uppercase test":["shorter"],"uppercase to":["lowercase)."],"uppercase transformation":["and"],"uppercase was":["equal"],"uppercase\". I":["love"],"uppercase, but":["I","maybe"],"uppercase, so":["for"],"uppercase, then":["set"],"uppercase, what":["they"],"uppercase. CamelCased":["names"],"uppercase. Consider":["getting"],"uppercase. How":["would"],"uppercase. There":["should"],"uppercase. You":["could"],"uppercase. `if`":["blocks"],"uppercased version":["-"],"uppercasing a":["string)."],"upside of":["being"],"upwards. Had":["I"],"uracil for":["thymidine."],"uracil is":["part"],"uracil, but":["as"],"uracil. I":["believe"],"us an":["sandpit"],"us not":["to"],"us to":["reuse","directly"],"usable object,":["especially"],"usage (i.e.":["gives"],"usage (when":["you"],"usage but":["here"],"usage is":["nice,"],"usage of":["simple","functions","camel","`message_`","Counter","`findall`","constants","the"],"usage outside":["this"],"usage. then":["you"],"use \"elif\"":["rather"],"use \"is":["None\""],"use \"new-style\"":["classes","classes","classes","classes"],"use \"self\"":["in"],"use 'Bob'":["as"],"use 'is":["None'."],"use 'self'?":["May"],"use 'str'":["as"],"use (a)":["`filter()`"],"use (private)":["for"],"use .upper()":["to"],"use \u003ccode\u003eif\u003c/code\u003e":["statements"],"use \u003ccode\u003emessage.endswith('?')\u003c/code\u003e.":["You"],"use \u003ccode\u003emessage.isupper()\u003c/code\u003e":["to"],"use Bob.theTests":["rather"],"use C":["instead","a"],"use Counter":["from"],"use Counter,":["initialize"],"use Meta":["class"],"use OrderedDict":["as"],"use Python":["3","2.7"],"use Python's":["['falsy'","['falsy'"],"use Pythons":["'falsy'"],"use [IPython](http://ipython.org/ipython-doc/stable/interactive/tutorial.html)":["to"],"use [`set`](http://docs.python.org/2/library/stdtypes.html#set)":["or"],"use [pyenv](http://github.com/yyuu/pyenv)":["to"],"use [str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper)":["to","to"],"use __dict__":["to"],"use `.endswith(\"?\")`":["instead."],"use `.endswith()":["and"],"use `.endswith()`":["instead","instead","as","when","instead"],"use `@anika`":["decorators;"],"use `@dixie`":["insted"],"use `ALL_UPPER`":["for"],"use `DNA.thymidine`":["to"],"use `[-1]`":["to"],"use `__query`":["instead"],"use ```":["strip"],"use ```class":["DNA(object)```"],"use ```elif```":["nesting"],"use ```re.split```":["to"],"use ```string```,":["which"],"use `collections.Counter`":["instead","and"],"use `collections.Counter`,":["because"],"use `collections.Counter`.":["Though,"],"use `converse.endswith(\"?\")`":["instead"],"use `data.isupper()`":["to"],"use `dict.items()`":["to"],"use `elif`":["nor"],"use `else`":["statement"],"use `endswith`,":["since"],"use `for":["word"],"use `from":["collections"],"use `if":["not"],"use `if`":["instead","to","to"],"use `inputString":["is"],"use `is_silence`":["instead"],"use `isalnum`":["method"],"use `isinstance()`":["instead,"],"use `isinstance`":["in"],"use `isspace`":["but"],"use `isspace`,":["I'd"],"use `isupper`":["to"],"use `itertools.izip`":["instead"],"use `len()`":["here"],"use `len`":["instead"],"use `maketrans`":["and"],"use `message":["is","is","is"],"use `message`":["if"],"use `msg.isspace()`":["instead"],"use `not":["message.strip()`","message.strip()`","msg`","statement`"],"use `not`":["instead"],"use `pass`":["instead."],"use `re.findall`":["with","to"],"use `re.match(pattern,":["string)`"],"use `re.match`.":["This"],"use `re.search`":["if"],"use `re.search`;":["keep"],"use `re.split()`":["rather"],"use `return":["if","self.phrase.strip()"],"use `rstrip`.":["Generally,"],"use `s.endswith(\"?\")`":["here","instead"],"use `s.isupper()`":["to"],"use `self.__class__.thymidine`":["to"],"use `self.dna.replace('T',":["'U')`?"],"use `self.phrase":["="],"use `self`":["you"],"use `sorted`":["to"],"use `startswith()`":["and"],"use `staticmethod`":["http://docs.python.org/2/library/functions.html#staticmethod"],"use `str.endswith`":["instead"],"use `str.isupper`":["to"],"use `str.join`":["on"],"use `str.lower()`":["(hint:"],"use `str.lower`":["on"],"use `str.replace`":["in"],"use `string.maketrans`":["since"],"use `string.replace`":["when"],"use `string.translate()`":["is"],"use `string.translate()`?":["If"],"use `var":["=="],"use `word_list`":["not"],"use a":["transtable,","new","single","bit","regular","set","translation","normalized","single","simple","`str`","class","def","`staticmethod`","Python","string","plain","class","lambda,","more","DNA","single","feature","definitive","local","separate","better","float","list","list?","try/except","variable","regex","`if","class,","dict","lazy","pattern","`collections.Counter`","generator"],"use all_lower":["for"],"use alphagram":["abstraction."],"use an":["iterative","else","if","unqualified","`if"],"use and":["had"],"use another":["if,"],"use any":["of","of","of"],"use arbitrary":["number"],"use argument":["name"],"use both":["```and```s"],"use built-in":["or"],"use builtin":["methods"],"use camelCase":["but"],"use case,":["but"],"use check":["for"],"use class":["based","attributes"],"use comments":["in"],"use composition,":["or"],"use comprehensions":["so"],"use data":["attributes"],"use dictionary":["for"],"use different":["amounts"],"use docstring":["for"],"use docstrings":["for"],"use double":["underscore"],"use early":["returns"],"use elif":["instead"],"use else":["cases.","cases.","either.","because"],"use endswith":["for"],"use exercism":["by"],"use explicit":["branching,","`else`","`else`","`else`","`else`","one-line"],"use extraneous":["whitespaces"],"use filtering":["to"],"use findall":["with"],"use first":["to"],"use for":["it.","the","the","these","them","loop"],"use function":["pointers"],"use functions":["/"],"use get()":["with"],"use getattr()":["instead"],"use helpers":["imported"],"use i":["wouldn't"],"use if":["the","the","and"],"use if-statements":["and"],"use in":["a"],"use inline":["comments."],"use instance":["variable"],"use instead":["of","if"],"use is":["the","questionable"],"use isupper()":["on"],"use it":["than","from","(ie","without","no","as","as","in","with","like","in"],"use it,":["only"],"use it.":["Instead,","And"],"use just":["list"],"use lambdas":["but"],"use list":["comprehensions","comprehensions","comprehension"],"use maketrans,":["yes,"],"use message.isUpper()":["for"],"use meta-classes":["you"],"use method":["str.isupper()"],"use methods":["available","like"],"use module":["level","level"],"use more":["meaningful"],"use my":["method"],"use named":["functions,"],"use new":["style","style","style","style","style","style","style"],"use new-style":["classes.","classes.","classes).","classes","classes","classes","classes","classes","classes","classes"],"use new_word":["still"],"use newstyle":["classes","classes"],"use of":["`collections.Counter`.","the","polymorphism","regexps","string","a","whitespaces","whitespaces","constructor","`Bob.__replies`","iterators","anonymous","`.strip()`.","it.","`zip`","regexps","keeping","`.words()`","building","standard","[str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper).","Python","helper","[str.endswith](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.endswith),","[str.endswith](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.endswith),","[str.endswith](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.endswith),","`str","underscore-named","native","`str.capitalize`","Unicode","nested","`re.split`,","helper","a","`.super()`,","self.contains_uppercase(message)","standard","methods","explicit","[str.endswith](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.endswith),","explicit","this","explicit","\"black","standard","standard","standard","'yell'","a","well","the","\"startswith\"","regexs","lambda","regular","Pythons","Python's","the","the","new","comments!","the","the","the","the","the","the","the","the","the","the","\"isupper\".","`isupper`","a","collections","a"],"use old-style":["classes."],"use on":["a"],"use only":["\"if\"s?","`if`"],"use parts":["of"],"use plain":["`if`"],"use pokémon":["exceptions."],"use properties":["or","or"],"use properties,":["`super`"],"use pydoc.":["So"],"use python":["encoding"],"use python's":["default"],"use regexp":["or","in"],"use regular":["expressions","string","expressions,","expression","expressions"],"use search()":["then"],"use separate":["`if`"],"use simple":["decorator"],"use single":["underscore","underscore"],"use snake_case":["rather"],"use some":["quick","sort","kind","custom","normalization","kind","of"],"use something":["slightly","in"],"use sorted()":["on"],"use space":["after"],"use spaces":["between"],"use spaces,":["other"],"use specialized":["classes!"],"use split":["without"],"use standard":["library"],"use static":["method","methods?"],"use str.replace(string,":["from,"],"use that":["in","often"],"use that.":["That's"],"use the":["string","new","method","`self`","default","old","power","`str.replace()`","`replace()`","\"real\"","`break`","identity","`lower`","`isupper`","identity","identity","current","built-in","standard","stop-on-shortest-argument","isupper","builtin","`","dictionary","collection","example","islower","constants","more","fact","standard"],"use them":["anywhere...","for"],"use these":["functions"],"use this":["empty","property","instead","class.","class."],"use to":["avoid"],"use underscore":["in"],"use underscored,":["lowercase"],"use variable":["names","names"],"use variable,":["method,"],"use variables'":["names"],"use whitespaces":["around"],"use wildcard":["imports"],"use without":["checking"],"use, and":["mostly","mostly","you"],"use, but":["that's"],"use. Also":["use"],"use. It":["is"],"use. See":["[PEP8](http://www.python.org/dev/peps/pep-0008/#id9)"],"use. on":["the"],"use? Checking":["`if"],"use? Python":["3"],"usec per":["loop","loop","loop","loop"],"used 'falsy'":["checking"],"used (I'm":["not"],"used 1":["return"],"used C":["before."],"used Counter,":["but"],"used Python":["for"],"used [str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper).":["All","All"],"used `.endswith()`":["instead","string"],"used ```map```":["in"],"used `message.strip()`":["in"],"used `nucleotide_sequence`":["as"],"used `phrase_list`,":["that"],"used `re.findall()`":["instead"],"used `re.findall`":["to"],"used `return":["not"],"used `self.__class__`":["to"],"used `self._raw":["!="],"used `str.endswith`,":["`str.isspace`,"],"used `str.isupper`":["to"],"used `str.replace`":["to"],"used `str.translate`":["and"],"used `strand`":["parameter"],"used a":["module","second","simple","class","simple","more","builtin","list"],"used about":["2"],"used all":["upper"],"used and":["known"],"used anywhere":["else"],"used approach":["is"],"used are":["a"],"used as":["variable"],"used at":["all"],"used because":["there"],"used better":["name"],"used but":["you"],"used by":["scientists"],"used coersion":["as"],"used elif,":["I"],"used filter()":["in"],"used for":["methods,","\"private\"","cyphers","substring","identity","comparing","[special","filtering"],"used if":["else"],"used if...elseif":["statements)"],"used in":["a","a","many","some","the","your","Python","almost","the","this"],"used instead":["of"],"used is":["not"],"used it":["about"],"used keyword":["argument"],"used like":["this."],"used list":["comprehension"],"used more":["string"],"used new-style":["class"],"used only":["to"],"used outside":["of","this","this"],"used predicate":["functions"],"used properly,":["would"],"used python":["specifics"],"used python3,":["hence"],"used re!":["Me,"],"used re.findall":["instead"],"used reflection":["techniques."],"used regexp":["patterns"],"used regular":["expressions","expression."],"used replace":["in"],"used set":["and"],"used small,":["descriptive"],"used some":["of"],"used something":["other"],"used somewhat":["different"],"used split":["instead"],"used straightforward":["approach"],"used such":["a"],"used text.strip()":["=="],"used the":["variable","most","most","alternate","translate"],"used them.":["Your"],"used there).":["wondering"],"used to":["avoid","avoid","remove","almost","it's","avoid","2-space","comment","not","it.","a"],"used variable":["names"],"used where":["it's"],"used, it":["became"],"used, the":["overhead","code"],"used, though":["sometimes"],"used, which":["is"],"used. Anyway,":["elifs"],"useful Python":["concepts,"],"useful as":["well"],"useful because":["`dict`"],"useful code":["above"],"useful documentation":["if"],"useful feedback,":["I've"],"useful for":["you.","you.","you.","you","you.","you.","Bill","me"],"useful function":["that"],"useful if":["messages","you","you"],"useful in":["many"],"useful information":["imparted"],"useful methods,":["like"],"useful part":["of"],"useful pointers.":["I"],"useful since":["the"],"useful string":["method","method"],"useful to":["apply","have","extract"],"useful when":["compared"],"useful, but":["that's","I"],"useful, cf":["http://c2.com/cgi/wiki?YouArentGonnaNeedIt","http://c2.com/cgi/wiki?YouArentGonnaNeedIt"],"useful, it":["can"],"useful, though,":["for"],"useful. I":["also"],"useful. May":["I"],"useful. My":["real"],"usefull to":["my"],"useless (and":["the"],"useless -":["`to_rna`"],"useless after":["a"],"useless and":["even"],"useless checks":["in"],"useless lines,":["but"],"useless object,":["that"],"useless, but":["like"],"useless. Also":["since"],"useless. Am":["I"],"useless. Either":["compile"],"useless. This":["is"],"uselessly increases":["the"],"user of":["the","this","your"],"user would":["probably"],"user, it's":["great"],"uses (like":["`__init__`)."],"uses __explicit":["else"],"uses `DNA`":["class"],"uses `None`":["as"],"uses `return`":["which"],"uses built":["in"],"uses duck":["typing"],"uses for":["`filter`"],"uses functional":["programming"],"uses it),":["and"],"uses of":["**named"],"uses only":["the"],"uses the":["same","instance"],"uses there":["might"],"uses these":["methods"],"uses too":["much"],"using \"function":["pointers\""],"using \"new":["style\"","style\""],"using \"new-style\"":["classes"],"using \"string\"..":["just"],"using 'self'),":["which"],"using 2.7,":["so"],"using BOOLs":["for"],"using Counter":["shorter"],"using Python":["3.","2.x,","2.x,","2.x,","2.x)","2.x,","2.x,","2.x,","2.7","2.x,","3.x?"],"using Python's":["builtins,"],"using Pythons":["'falsy'"],"using [`collections.Counter`](http://docs.python.org/3/library/collections.html#collections.Counter)":["(unless"],"using \\w":["regex"],"using `''.join(...)`":["instead"],"using `(is_default,":["\"Whatever\")"],"using `.endswith()`":["to","instead"],"using `.strip()`":["instead"],"using `0`":["as"],"using `@jairo`":["or"],"using `@mohamed`":["to"],"using `Counter`":["from","--"],"using `Counter`.":["Consider","I"],"using `Phrase`":["class,"],"using `__query`":["instead"],"using ```replace```":["instead"],"using ```strip()```":["just"],"using `dict.get()`,":["note"],"using `filter()`.":["Lambdas"],"using `if":["..."],"using `is`":["(identity","operator"],"using `isspace`":["too,"],"using `map`":["to"],"using `or`":["to"],"using `phrase`":["instead"],"using `re.compile`":["for"],"using `re.findall`":["to"],"using `re.split`":["rather"],"using `replace()`,":["since"],"using `return`":["which"],"using `reversed()`":["rather"],"using `self.__sequence`,":["and"],"using `self._replies`":["(or"],"using `self.thymidine`":["could"],"using `sentence.isupper()`":["=)"],"using `sorted`":["than"],"using `str.count`":["in"],"using `string.maketrans`":["is"],"using `string.translate`":["to"],"using `string`":["as"],"using `strip()`":["just"],"using `translate`":["but"],"using `u\"foobar\"`).":["Hence"],"using a":["comment","comprehension","translation","'response'","language","list","dict","simple","while","list","filter","dict","`collections.defaultdict(set)`","default","dictionary","regular","`Counter`","class","built-in","big","dictionary","generator.","regex","typed","typed","typed","`collections.Counter`"],"using abbreviations":["in"],"using all":["these"],"using an":["index"],"using anything":["else"],"using attribute":["accessor"],"using booleans":["as"],"using chain-of-responsibility":["to"],"using class":["for"],"using collections.Counter":["would"],"using collections.Counter!":["I"],"using comments":["to"],"using conditionals":["and"],"using correctly.":["check"],"using default":["argument"],"using defaultdict":["but"],"using dict":["for"],"using different":["approaches;","tests?"],"using either":["`@pamela`"],"using elif's":["looks"],"using filter":["is"],"using functions,":["which"],"using generator,":["which"],"using if":["else","else","statements."],"using immediate":["return,"],"using imports":["from"],"using interface":["as","as"],"using it":["directly.","to"],"using it,":["and"],"using list":["comprehensions!","comprehension."],"using magic":["values"],"using maketrans.":["Seems"],"using method":["chaining."],"using methods":["that","(per"],"using module":["level"],"using more":["descriptive","regex."],"using named":["constants","variables.","variables","constants"],"using nested":["ifs."],"using new":["style","style","style","style","style","style","style","style","style","style","style","style","style","style","style"],"using new-style":["classes.","classes","classes"],"using not":["message.strip(),"],"using old-style":["classes"],"using only":["a","`if`s"],"using operator":["overloading"],"using plain":["functions."],"using private":["helper"],"using properties":["or"],"using python":["2.x,","2.x,","2.x,"],"using re":["is"],"using re.findall":["along"],"using regex":["like:"],"using regexes":["that"],"using regexps":["for"],"using regular":["expressions"],"using replace":["in"],"using s,":["m,"],"using simple":["string","string"],"using single":["return","return"],"using some":["of","boolean"],"using standard":["methods","library","library."],"using str.endswith":["instead"],"using str.maketrans":["and"],"using string":["methods"],"using string.isupper()":["though"],"using string.replace":["does","instead```"],"using string.uppercase":["and"],"using such":["long"],"using symbolic":["(pseudo)"],"using that":["import.","now.)","as"],"using the":["convenient","variable","identity","statement","new","sub","module","default","always","regular","PARAMETERS","private","`collections`","count","gem,","letters","operator","string","dict","string.upper()","variable"],"using them":["outside"],"using them.":["They"],"using these":["exercises"],"using translate":["on"],"using two-space":["indents."],"using unbound":["methods"],"using variable":["or"],"using. Those":["were"],"usual way":["to"],"usual with":["all"],"usual, subclassing":["`str`"],"usually `self`":["rather"],"usually a":["bad"],"usually better":["to"],"usually consider":["good"],"usually don't":["like"],"usually done":["using"],"usually frowned":["upon."],"usually in":["the"],"usually make":["everything"],"usually named":["using"],"usually not":["fond"],"usually only":["done","change"],"usually prefer":["that"],"usually private":["method"],"usually spelled":["`phrase","`if","`if"],"usually use":["comprehensions"],"usually would":["do"],"usung Python":["2.x,"],"utility (`pep8`)":["that"],"utility (at":["least"],"utility that":["does"],"utilize `Counter`":["here"],"utilize the":["same"],"utterance parsing),":["and"],"uttered, and":["Bob"],"vague so":["there's"],"vague. I":["meant"],"vague. with":["\u003ccode\u003e_is_shouting\u003c/code\u003e"],"valid DNA":["string"],"valid for":["a"],"valid function":["body."],"valid input.":["Instead"],"valid instance":["of"],"valid solution.":["Helper"],"valid string.":["As"],"valid use":["of"],"valid way":["to","to"],"valid word.":["So"],"valid, but":["you"],"valid, since":["someone"],"valid, there":["should"],"validation complicated.":["Should"],"validation process":["https://github.com/kytrinyx/exercism.io/issues/504"],"validation should":["I"],"validation), having":["a"],"validations are":["the"],"validity latter":["in"],"validity not":["changing"],"validity. Otherwise,":["a"],"valuable and":["would"],"valuable mental":["exercise."],"value (it":["is"],"value (like":["dict,"],"value =":["getattr(self,","f(self,"],"value `None`?":["What"],"value anyway":["?"],"value are":["both"],"value as":["well,"],"value be":["given."],"value doesn't.":["Is"],"value first":["and"],"value for":["the","all","addressing","the","e?"],"value if":["message"],"value in":["a","a","a","a","a","a","a","a","the","a","a","a","a","a","a","the","a","a","a","a","a","encapsulating"],"value is":["often","None:","not"],"value it":["should"],"value later\"":["so"],"value message":["=="],"value object":["and"],"value object.":["Now"],"value of":["the","the","sequence.","`Phrase.rawinput`,","the","0","the","`None`","`0`,","1","1","1"],"value on":["next","`Phrase`"],"value rather":["that"],"value to":["return"],"value)` pairs":["and"],"value, but":["hey!"],"value. When":["`input_string`"],"value. Wouldn't":["it"],"value? Try":["to"],"value` chain":["?","?"],"value` code":["pattern"],"value` pattern":["could"],"values -":["generally"],"values I":["would"],"values as":["quickly","well."],"values but:":["1."],"values for":["the"],"values from":["the"],"values gracefully,":["so"],"values here":["is"],"values in":["sub-classes."],"values should":["be"],"values that":["are"],"values through":["`dna.THYMIDINE`,"],"values to":["check","check,"],"values). You":["used"],"values, but":["here"],"values, it's":["very"],"values, which":["you"],"values. Depending":["on"],"values. For":["instance:"],"var names":["are"],"variable --":["consider"],"variable `sequence`":["in"],"variable and":["return","unnecessarily","returning","having","returning"],"variable as":["sequence"],"variable before":["loop,"],"variable by":["hand."],"variable called":["'ret'"],"variable declarations":["(like"],"variable definitions":["on"],"variable for":["the"],"variable from":["statement"],"variable has":["all"],"variable here":["and"],"variable here,":["is"],"variable in":["the"],"variable initialization":["before"],"variable instead":["of"],"variable introduced,":["I"],"variable is":["appropriate.","more","an"],"variable name":["`sentence`,","`utterance`","(collides","change","as","to","to","'str'","`str`,","shadows"],"variable name.":["It's","Also,","It"],"variable names":["would","enhance","for","should","clearly","to","that","so","--"],"variable names,":["and","but","descriptive","simple"],"variable names.":["But","You","Can"],"variable or":["method"],"variable so":["they"],"variable that":["was"],"variable there.":["Alternatively,"],"variable to":["use","functions","something","refer"],"variable will":["never","cause"],"variable), hence":["keeping"],"variable, `hey()`":["doesn't"],"variable, as":["it"],"variable, because":["that"],"variable, especially":["as"],"variable, instead":["of"],"variable, it's":["usually"],"variable, method,":["and"],"variable, so":["I"],"variable, thought":["the"],"variable, which":["might"],"variable. I'm":["not","not"],"variables after":["modules,"],"variables as":["arguments","for"],"variables at":["top"],"variables be":["\"all_lower_with_underscores\"?"],"variables doesn't":["really"],"variables etc.":["More"],"variables for":["a","the"],"variables have":["been"],"variables if":["I"],"variables in":["the"],"variables is":["your"],"variables names":["should"],"variables nouns":["instead"],"variables of":["the"],"variables or":["other"],"variables private":["as"],"variables rather":["than"],"variables should":["be"],"variables to":["reflect","initialize,"],"variables' names":["that"],"variables, are":["you're"],"variables, but":["I"],"variables, so":["you"],"variables/method names/function":["names"],"variety of":["filtering"],"various conditions":["are","into"],"various extra":["attributes"],"various if-statements":["in"],"various methods":["expect"],"various reasons,":["which"],"various responses":["to"],"various test":["conditions"],"various tests,":["it"],"various ways":["across"],"various ways:":["using"],"vars don't":["seem"],"vars from":["a"],"verb, or":["word_counts"],"verb, so":["it"],"verb. A":["noun"],"verbiage (`__class__`)":["to"],"verbose --":["consider"],"verbose and":["harder","difficult"],"verbose indices":["for"],"verbose side,":["also"],"verbose that":["it"],"verbose, I":["feel"],"verbose, but":["I"],"verbose, easier":["to"],"verbose, just":["have"],"verbose, though":["in"],"verbose. How":["about"],"verbs better":["show"],"verified that":["the"],"versatile because":["the"],"verse strings":["are"],"verse which":["contains"],"versed in":["the","how","Python."],"verses into":["their"],"version (\"prevent":["code"],"version (once":["you"],"version (where":["it's"],"version -":["it"],"version 1":["better"],"version 2.":["Was"],"version 4":["to"],"version I":["like"],"version a":["bit","longer"],"version accounting":["for"],"version and":["the"],"version best":["-"],"version better":["than"],"version but":["I'm"],"version by":["0.001s."],"version consists":["of"],"version could":["be"],"version elsewhere,":["I"],"version has":["12","the"],"version in":["#4,","place"],"version is":["that","simple,","ultimately","a","much","better","trying","at"],"version makes":["the"],"version of":["this","the","this","the","the","python","isAllCaps"],"version or":["a"],"version ran":["74"],"version soon!":["Thanks","Thanks"],"version that":["does"],"version the":["same,"],"version to":["use"],"version took":["42s"],"version using":["regexes"],"version was":["the","better"],"version which":["doesn't"],"version with":["list","normalize","'message'."],"version works":["ok."],"version). However,":["I"],"version, Bob's":["response"],"version, and":["used"],"version, but":["I","I'm"],"version, what":["I"],"version. A":["bit"],"version. Just":["overkill"],"version. While":["more"],"version. Will":["implement"],"version...I ported":["them"],"version...I was":["wondering","wondering"],"version: an":["attribute"],"versions #1":["and"],"versions 1":["&amp;"],"versions does":["not"],"versions for":["other"],"versions in":["the"],"versions would":["look,"],"versions, but":["in"],"versions, the":["differentiator"],"versions. It":["allows"],"versions. String#translate":["wasn't"],"versus `sentence":["=="],"versus having":["to"],"vertically on":["a"],"very awkward":["syntatically."],"very awkward,":["since"],"very bad":["practice"],"very clean":["code.","way"],"very clear":["what","what","what's"],"very clear,":["why","but"],"very clear.":["It's"],"very clever":[";)"],"very close":["to"],"very common":["misleading"],"very communicative":["why"],"very compact,":["dense"],"very comprehensive.":["Maybe"],"very concise":["and"],"very data-driven":["rather"],"very debatable":["statement."],"very delicate":["topic,"],"very descriptive.":["I"],"very different":["approach,"],"very doubtful":["improvement."],"very easily":["(granted,"],"very easy":["to"],"very efficient":["but"],"very efficient,":["makes"],"very excited":["about"],"very explicit,":["you"],"very familiar":["with"],"very few":["chances","language-inforced","cases","parenthesis."],"very first":["example."],"very good":["already.","habit.","and","already","already.","and"],"very granular":["separation"],"very grateful":["for"],"very gross,":["its"],"very handy":["methods","methods"],"very hard":["to"],"very helpful!":["I'll"],"very high-performance":["for"],"very idiomatic":["`endswith`"],"very individual,":["so"],"very interesting":["code!","task."],"very jarring":["to"],"very limited,":["so"],"very little":["gain","difference"],"very meaningful.":["How"],"very minor":["and","nit"],"very minor,":["but"],"very much":["like","fit"],"very much.":["Ive"],"very natural":["to"],"very next":["line?"],"very nice":[":)","suggestion"],"very nice.":["Could"],"very nicely":["--"],"very non-idiomatically":["Python."],"very obvious":["(and","here"],"very obvious.":["Someone"],"very often.":["Could"],"very overcomplexified":["way"],"very own":["decision"],"very pleasant":["(see"],"very popular":["in"],"very possible":["here!"],"very precisely":["modeled"],"very pythonic.":["Yes","Silently"],"very rarely":["rely","(read"],"very readable":["and","and","and","solution."],"very same":["instance","instance","method"],"very seldom":["used","use,","use,"],"very similar":["to","solutions.","to"],"very simple":["implementations","and","test"],"very simple,":["so"],"very slow":["in"],"very solid":["as"],"very specific":["functionality."],"very straight":["forward,"],"very strong":["on"],"very succinct,":["and"],"very talkative":["for"],"very trivial":["code,","change"],"very useful":["to","when","for"],"very useful,":["it"],"very usefull":["to"],"very very":["clear.","few","few","seldom","seldom"],"very weak":["haha."],"very well":["defined","with","belong"],"very well,":["so"],"very wide,":["consider"],"very worthwhile":["as","always."],"view `couplet`":["class"],"view comments":["on"],"view if-elif-else":["is","structure"],"view it":["makes"],"view of":["the"],"view short":["names"],"view the":["code"],"view their":["docstring."],"view they":["shouldn't"],"view your":["is_*","solution"],"view) -":["perhaps"],"view, a":["class"],"viewed by":["Python"],"viewpoint on":["named"],"views on":["the"],"vim, but":["not"],"violate the":["[PEP-8"],"violated at":["the","the"],"violates the":["single-responsibility"],"violation. Could":["you"],"violation: You":["should"],"visible benefits,":["but"],"visited the":["page"],"visual hint":["to"],"visual standpoint,":["but"],"vital attributes":["from"],"vocab =":["["],"vocabulary and":["grammar"],"voice input":["device"],"voice recognition":["system."],"voice recording":["instead"],"void if":["unsealed\"."],"vote for":["this,","this,"],"voting for":["it.","this"],"vs n":["for"],"vs new":["style","style"],"vs nlogn).":["However,"],"vs object-oriented":["flame"],"vs unfamiliar":["styles."],"vs. a":["more"],"vs. empty":["(I"],"vs. incidental":["nulls"],"vs. list":["comprehension"],"vs. null":["vs."],"vs. spaces":["got"],"w in":["self._normalize_phrase().split())`","base_words","words]"],"w. @davon":["re."],"w. @kaylin":["-"],"w/ an":["`_`?"],"waist of":["time"],"wait for":["nitpicks),"],"wait longer...":["I"],"waiting for":["a"],"walk me":["through"],"walk my":["self"],"wall\". Then":["I"],"wall, no":["more"],"wanna fix":["that."],"want Bob":["to"],"want as":["negation)"],"want each":["call"],"want here,":["though."],"want inheritance":["(read"],"want is":["something"],"want it":["to","not"],"want making":["into"],"want my":["list"],"want seperate":["types"],"want the":["copying","Bob","script"],"want to":["investigate","be","pull","rename","make","try","choose","check","think","check","have","mess","read","presume","lose","know","properly","do","make","have","repeat","read","have","get","read","read","read","look","mess","make","read","read","read","catch","make","remove","keep,","remove?","use","use","check","avoid","look","compile","read","have","try","use","read","break","have","use","expose","precompute","read","clutter","leave","puke","either","turn","reuse","avoid","extract","keep","\"match\"","use","have","use","do.","have","extract","take","shave","consider","set","check","add","be","think","consider","be","check","checkout","allow","be","go","leave","write"],"want to.":["Tell"],"want your":["readers"],"want, and":["`Anagram`"],"want, when":["the"],"want... but":["I"],"wanted a":["more"],"wanted everything":["matching"],"wanted it":["to"],"wanted my":["solution"],"wanted to":["make","reduce","be","try","point","avoid","create","make","getwords","make","document","change","train","see","explore","use","offer","make","consider"],"wanted your":["feedback"],"wants something":["a"],"wants to":["approve?","be","read","know"],"war battle.":["I"],"warning: I'm":["a","a"],"was \"I":["need"],"was (vaguely,":["in"],"was *really*":["writing"],"was *that*":["valuable"],"was 0":["length."],"was None":["and"],"was None,":["then"],"was [this":["nitpick](http://exercism.io/submissions/520f71575bbbe84dc50001ed)"],"was `None`":["?"],"was a":["bit","big","way","question).","suggestion","bit","static","pretty","match.","variable","file","method","method","method"],"was able":["to","to"],"was about":["using"],"was actually":["my","just"],"was all":["there","whitespace."],"was alot":["cleaner"],"was already":["human-readable"],"was also":["questioning"],"was always":["a"],"was as":["group"],"was at":["it"],"was backwards":["in"],"was being":["used,"],"was better":["design"],"was bothered":["by"],"was bugging":["me,"],"was called":["with"],"was called,":["this"],"was clearer":["before."],"was clearer,":["in"],"was coding":["in"],"was confused":["about"],"was constrained":["to"],"was definitely":["a"],"was doing":["like"],"was easier":["than"],"was easy":["enough"],"was enforced":["by","by"],"was equal":["to"],"was expressive":["enough."],"was false.":["So"],"was focussing":["on"],"was getting":["a","rather"],"was given":["orders,"],"was going":["to"],"was hard":["to"],"was having":["to"],"was hoping.":["I"],"was how":["I","to"],"was identical":["to"],"was in":["the"],"was just":["me,","a","intending","not","thinking","for"],"was labouring":["under"],"was larger,":["I'd"],"was looking":["at","into","for","for","for"],"was maybe":["a"],"was more":["complicated"],"was much":["fooling","more"],"was my":["first","thought"],"was necessary":["in"],"was not":["a","to","really","aware","null,","able"],"was only":["there"],"was over-engineering":["for"],"was passed":["in"],"was passed,":["it"],"was permutations":["I"],"was pretty":["neat."],"was probably":["due"],"was really":["just"],"was regarding":["the"],"was removed":["from"],"was right,":["but","the"],"was set":["to"],"was shouted":["or"],"was shouting.":["The"],"was simple":["enough","indeed"],"was some":["mutable"],"was something":["form","like"],"was specifically":["OK'd"],"was still":["in"],"was string":["building."],"was struggling":["with"],"was stumped":["on"],"was stupid,":["not"],"was submitting":["the"],"was suggesting":["making"],"was sure":["it"],"was surprised":["at","that","by","to"],"was surprising.":["To","My"],"was talked":["away"],"was talking":["about.","about"],"was telling":["to"],"was tested":["using"],"was testing":["the","to"],"was that":["Statement"],"was the":["standard","correct","cleanest","most","one","same","best","clearest","most","parent"],"was there":["to,"],"was there.":["This"],"was thinking":["JavaScript","of","about","about","of","more","it","about"],"was this":["what"],"was to":["question","add","it,","not","switch","loosely"],"was told":["to"],"was tough":["to"],"was trying":["to","to","to"],"was two":["set"],"was unclear":["what","whether"],"was unsure":["of"],"was used":["in"],"was using":["the","a"],"was uttered,":["and"],"was very":["useful"],"was way":["too"],"was whether":["or"],"was wondering":["why","why"],"was words":["before,"],"was working":["on","in"],"was worried":["about"],"was writing":["out"],"was written":["as"],"was your":["goal"],"was: If":["the"],"wasn't *strictly*":["necessary..."],"wasn't aware":["of","that"],"wasn't awere":["of"],"wasn't bothered":["by"],"wasn't digits":["before."],"wasn't for":["exercism.io!)"],"wasn't really":["doing","sure"],"wasn't sure":["if","how","what","how","how","what"],"wasn't tested":["first"],"wasn't the":["right"],"wasn't very":["clear,","communicative"],"waste of":["space.","regular"],"waste or":["processor"],"wasteful to":["use"],"wasteful, I":["will"],"wasteful. Also,":["you"],"watch your":["code"],"waters. Bob's":["responses"],"way (1":["function"],"way (especially":["since"],"way *he*":["interprets"],"way -":["however"],"way DNA":["and"],"way I":["solved","understood.","found","have"],"way I'd":["replace"],"way all":["your"],"way around":["PEP8,","this","a"],"way around?":["Seems"],"way as":["a","I"],"way but":["it","any"],"way by":["official","official","official","official","the","the","the","the"],"way for":["testing"],"way how":["to"],"way if":["you"],"way in":["scripting","other"],"way instead":["?-)"],"way is":["fine","to","to","with","\"Batteries","sexy,","better.","more"],"way it":["can","works","doesn't","is."],"way less":["obvious."],"way looking":["only"],"way more":["complicated","elegant."],"way obscures":["the"],"way of":["handling","looking","checking","handling","uppercasing","doing","writing","checking","handling","writing","official","manipulating","thinking","doing","doing","implementing","checking","writing"],"way out":["here."],"way possible\".":["To"],"way that":["isn't","keeps","wouldn't","you","does","I"],"way the":["mapping","test","code","test"],"way there":["is."],"way they":["are"],"way to":["only","indicate","check","write","do","do","perform","deal","make","do","convert","do","reduce","reduce","do","deal","group","make","do","make","keep","do","go.","you","check","reduce","avoid","understand","factor","filter","get","get","remind","mark","test","meet","read.","do","test","ask","test","only","make","handle","strip","implement","set","test","do","filter","spell","avoid","get","reduce","test","explaining","model","recode","test","brush","strip","get","factor","make","refactor","approach","do","indicate","deal","test","catch","do","do","avoid","make","do","check","deal","create","go.","work","make","subscribe","prevent","check","document","replace","do","work","eliminate","find","achieve","assign","simplify","get","shorten","simplify","do","achieve","do","do","identify","enforce","do","check","test","go,","store","do","check"],"way too":["complicated","boring,"],"way too:":["`if"],"way using":["a"],"way with":["memoizing.","separating","`endswith()`"],"way would":["be"],"way you":["could","prefer","think.","do","could","end","could","have","wrote","handle","would","used"],"way you're":["ending"],"way your":["methods"],"way!\", notice":["the"],"way!\", which":["is"],"way\" either.":["I"],"way\". It":["would"],"way). 2.":["readability"],"way). I":["usually"],"way). Import":["at"],"way, I":["would"],"way, a":["sub-class"],"way, different":["instances"],"way, it":["would"],"way, specially":["for"],"way, that's":["starting"],"way, they":["don't"],"way, which":["maybe"],"way, you":["could","will","have"],"way. Didn't":["know"],"way. I":["think"],"way. I'm":["really"],"way. It":["might","might","might"],"way. Originally":["I"],"way. The":["following"],"way. Why":["make"],"way.\". So":["this"],"way.' twice.":["But"],"way.` should":["be","be"],"way: `self.statement":["="],"way? For":["me,"],"ways --":["using"],"ways Bob":["is"],"ways across":["different"],"ways how":["to"],"ways of":["implementing"],"ways to":["express","make","skin","simplify","do","achieve","eliminate","solve","locate","increase","do","handle","handle","make","solve"],"ways. I'm":["still"],"ways: either":["sprinkle"],"ways: using":["str.maketrans"],"we are":["limited","constantly","formulating"],"we arent":["really"],"we avoid":["defensive"],"we can":["safely","also","get"],"we could":["add"],"we create":["two"],"we decided":["that"],"we did,":["I'd"],"we discuss":["the"],"we do":["have","now)"],"we don't":["have","need","need","need","do","check","want","have"],"we expect":["the"],"we get":["a"],"we had":["one."],"we have":["both","the","different","`None`,","the","tests"],"we live":["in"],"we might":["think","be"],"we miss":["some"],"we need":["to","to","a","a"],"we need.":["We"],"we require":["input?"],"we see":["use"],"we should":["have","probably"],"we simply":["say"],"we still":["have","have"],"we took":["different"],"we translating?":["Passing"],"we typically":["say"],"we unicode":["escaping"],"we use":["parts"],"we usually":["prefer"],"we want":["to"],"we want,":["when"],"we wanted":["to"],"we were":["going"],"we will":["be"],"we're all":["going"],"we're at":["it","it"],"we're left":["to"],"we're respectful":["of"],"we're returning":["on"],"we're talking":["about"],"we've already":["seen"],"we've had":["unicode"],"we've thoroughly":["bikeshedded"],"weakness of":["this"],"weary to":["read"],"weekend. Will":["definitely"],"weigh them.":["For"],"weird `getattr`":["lookup"],"weird character":["in"],"weird inheritance":["problems."],"weird mystery":["bugs"],"weird to":["me"],"weird variable":["name"],"weird, flipped":["DSL."],"weird, tests":["pass"],"weird. Fortunately,":["there"],"weird. I'm":["not"],"weird. Let":["me"],"weird. Maybe":["I"],"welcome in":["all"],"welcome, documenting":["your"],"well :)":["And"],"well I":["mean,"],"well and":["just"],"well as":["for","providing","standard","`question`","the","the","**unicode**,","at","your"],"well be":["a","wrong,","a"],"well belong":["there"],"well context":["of"],"well defined":["what","internal"],"well documented":["solution."],"well done":["with"],"well fitting":["methods"],"well for":["FP.","a"],"well have":["a"],"well here.":["Some"],"well inline":["it"],"well known":["manner."],"well moved":["to"],"well named":["query"],"well named,":["good"],"well on":["the"],"well organised":["codebase."],"well reuse":["the"],"well so":["people"],"well structured.":["Nice"],"well suited":["methods"],"well this":["tells","tells"],"well to":["me.","Python"],"well understand":["your"],"well use":["a","`collections.Counter`."],"well versed":["in"],"well what":["the"],"well with":["Unicode,","`str.isupper`"],"well –":["do"],"well) to":["constants"],"well, I":["don't"],"well, Python":["is"],"well, `None`,":["you"],"well, and":["methods"],"well, because":["I"],"well, but":["it"],"well, in":["`Carl`'s"],"well, inline":["documentation"],"well, since":["you","the"],"well, so":["is_question()","I"],"well, that's":["nitpicking"],"well, this":["is"],"well, though":["I"],"well, why":["not"],"well, wordcounter":["--"],"well-formed, i.e.":["only"],"well-known, and":["simply"],"well-named functions.":["And"],"well-named private":["method?"],"well-written initializer":["should"],"well. Doing":["DSLs"],"well. Here,":["a"],"well. I":["feel","see"],"well. I'd":["suggest"],"well. Is":["raising"],"well. One":["way"],"well. The":["only"],"well. Using":["any"],"well? There":["are"],"well? To":["not"],"went ahead":["and","and"],"went and":["compared","compared"],"went back":["to"],"went crazy":["and"],"went from":["10","public"],"went half":["way"],"went into":["this,"],"went out":["of"],"went so":["far"],"went straight":["with"],"went the":["extra"],"went to":["sleep."],"went with":["an","a"],"went wrong":["-"],"were a":["clean,"],"were aimed":["at"],"were all":["returning","private."],"were any":["chance"],"were applied":["consistently."],"were circumstances":["where"],"were class":["based."],"were clearly":["searching"],"were complicated":["I"],"were created":["and"],"were defined":["after"],"were doing":["all"],"were easy":["to"],"were either":["a"],"were empty,":["but"],"were empty.":["This"],"were enough),":["as"],"were fine":["as"],"were for":["special"],"were going":["to","to"],"were great":["comments!"],"were heavy":["processing,"],"were hiding":["the"],"were in":["a"],"were looked":["up,"],"were looking":["for?"],"were lots":["of"],"were made":["non-public","from"],"were more":["people","readable.","than"],"were not":["a","a"],"were on":["their"],"were passing!":["I","I"],"were poorly":["written"],"were public":["(I"],"were realized,":["a"],"were represented":["the"],"were required":["to"],"were saying":["in"],"were significantly":["faster"],"were somewhat":["unclear."],"were specialized":["classes"],"were talking":["about,"],"were the":[".isupper()","tests"],"were thinking?":["Is"],"were to":["show","try","change.","call","simply","implement","use","use"],"were trying":["to"],"were two":["concepts,"],"were using":["two-space","unbound","a"],"were using.":["Those"],"were you":["would"],"were; one":["or"],"weren't a":["python"],"weren't caught":["by"],"wether `word_count()`":["will"],"wether it":["would"],"wether the":["\"action\""],"what @molly":["meant"],"what I":["get","had","meant","was","am","found.","have","meant.","started","meant","meant.","mean:","submitted","need","came","expect","like","did","mean.","did"],"what I'm":["doing?","doing","saying.","checking"],"what PEP":["8"],"what `Bob.vocab`":["looks"],"what `Counter`s":["constructor"],"what ``'T'``":["and"],"what `filter(None,":["iterable)`"],"what `str.split()`":["really"],"what a":["guard","string","string","string","string","single"],"what about":["`\"","calculating","`strand.replace()`"],"what actually":["happens,"],"what an":["RNA","empty"],"what are":["the","you"],"what better":["the"],"what can":["I","be"],"what code":["does","conventions","does,"],"what did":["you"],"what do":["you","you","you","you","you"],"what does":["\"hey\"","the","`los`"],"what each":["test","case"],"what else":["I"],"what everyone":["else"],"what exactly":["you're"],"what gets":["returned."],"what happens":["next?","then"],"what hey()":["should"],"what how":["to"],"what if":["content","input","we"],"what is":["necessary","required)","what.","in","now","public","not,","happening","actually","happening,","implicitly","your","considered","a","going","defined","defined","defined","being","writen"],"what it":["is,","is","means","is","starts","ends","is.","starts","says","does.","does","is","does.","is,","is","does,","is"],"what it's":["testing","for,","looking","intended","doing"],"what jotjotjes":["said"],"what kind":["of","of"],"what led":["you"],"what might":["go"],"what needs":["replacing."],"what one":["would"],"what other":["uses"],"what ought":["to"],"what purpose":["you"],"what python":["considers"],"what result":["is"],"what separates":["the"],"what should":["be"],"what some":["of"],"what source":["control"],"what steps":["you"],"what that":["looks","it"],"what the":["code","code","Python","code","function","resolve","difference","various","response","test","use","tests","check","code","file","regexes","if","program","program","heck","other","standard","return","method"],"what they":["do.","are","did","were","are,","start","start","mean?","are/do.","do."],"what they're":["doing.","checking","checking"],"what this":["code","exercise"],"what to":["call","think","try","expect.","do"],"what to_rna()":["is"],"what tools":["are"],"what type.":["The"],"what use":["is"],"what was":["in","the"],"what way?":["For"],"what we":["did.","expect","need.","want,"],"what will":["be"],"what would":["you","happen","be"],"what you":["are","did","should","*don't*","were","were","need","mean.","mean,","expect","mean","said","were","can","think","said","were","think","want...","mean.","mean","said.","think.","think?","mean","need","are","have","meant?"],"what you're":["saying","saying","talking","getting","creating"],"what you've":["got"],"what your":["code","transfer","`_isyelling(text)`"],"what's a":["'T'?","'T'?"],"what's already":["a"],"what's changed?":["Could"],"what's going":["on","on.","on","on.","on","on","on","on.","on?"],"what's happening":["with","with"],"what's the":["benefit","convention","point","point","use","reason","point","naming","most","domain"],"what's wrong":["with"],"whatBobHeard =":["whatBobHeard"],"whatBobHeard or":["\"\""],"whatever function":["it's"],"whatever the":["instance"],"whatever) param":["could"],"whats going":["on","on"],"whats the":["'new"],"wheel. Hint":[":"],"when (hastily)":["testing"],"when Bob's":["ears"],"when I":["was","found","get","say","was","took","mentionned","didn't","upgraded","have","think","replace","changed","was"],"when I've":["done"],"when `i":["="],"when `key":["not"],"when `message`":["is"],"when `msg`":["is"],"when `other`":["is"],"when `phrase`":["is"],"when `self.sequence":["="],"when `sorted`":["transformation"],"when `word":["=="],"when a":["mere","plain"],"when all":["you"],"when both":["`list()`"],"when checking":["\"text","is","for","the","for","for","for"],"when code":["defaults","defaults","defaults","defaults","defaults"],"when compared":["to"],"when comparing":["with"],"when connecting":["multiple"],"when contracts":["aren't"],"when defining":["default"],"when doing":["this","this","this"],"when each":["response"],"when ever":["you"],"when extending":["the"],"when handed":["a"],"when hey()":["is"],"when if":["`DNA.__init__`"],"when it":["comes","comes","came","just","is","is","has","comes","reaches"],"when it's":["less","time","coded","not"],"when looping":["through"],"when meaning":["is"],"when method":["only"],"when much":["better,"],"when needed,":["as"],"when needed_,":["so"],"when no":["argument"],"when number":["of"],"when one":["single"],"when others":["suggest"],"when overloading":["hey,"],"when passed":["`None`?"],"when plain":["`str`"],"when property":["names"],"when punctuation":["and"],"when reading":["this","or","code"],"when regular":["method"],"when run":["by"],"when some":["robot's"],"when someone":["else","else"],"when something":["is"],"when stripped,":["is"],"when structured":["code"],"when the":["function","caller","attribute","input","default","text","``nucleotides``"],"when there":["were"],"when there's":["no"],"when they":["are","are"],"when they're":["not"],"when unknown":["message"],"when used":["properly,"],"when using":["immediate"],"when writing":["Python"],"when you":["say","want","mentioned","return","return","copy","could","have","have","alreeady","have","already","have","need","eventually","are","yell","yell","yell","can","only","try"],"when you're":["returning","just"],"when your":["code"],"whenever I":["do"],"whenever you":["see","are"],"where 10000~":["`Phrase`"],"where 3":["of"],"where ASCII":["sometimes"],"where I":["experimented","was","think","went","had","was"],"where `MessageClassifier`":["wraps"],"where `filter`":["takes"],"where `message`":["is","is"],"where `query":["="],"where `self.sequence`":["is"],"where a":["lot","`DNA`","small","scientist"],"where all":["responses"],"where both":["standardization"],"where calling":["it"],"where each":["person"],"where else":["to"],"where functional":["approach"],"where have":["all"],"where in":["definition"],"where initializer":["would"],"where input":["is"],"where it":["may","made","is","isn't","requires"],"where it's":["necessary","easy"],"where leftover":["from"],"where mewmew":["left"],"where necessary.":["More"],"where self.statement.strip()":["returns"],"where should":["`trimmed_phrase`"],"where simple":["string"],"where string":["is"],"where the":["line","regex","constructor","punctuation","phrase","mental","number","block","indentation"],"where there":["would","is","would"],"where they":["belong).","are.","comes"],"where they're":["used"],"where to":["look","best"],"where we":["need","don't"],"where we've":["had"],"where you":["really","want"],"where you'd":["like"],"whereas if":["you"],"whereas line":["6"],"wherever possible.":["I"],"wherever you":["want."],"whether Bob":["is"],"whether I'm":["doing"],"whether a":["string","string","specific"],"whether it":["was"],"whether it's":["equals"],"whether or":["not","not"],"whether string":["is"],"whether the":["design","variable","string","string","string","input"],"whether there":["is"],"whether to":["take"],"whether you":["like","want","were"],"which (pre-3)":["are"],"which -":["when"],"which Bob":["would"],"which I":["read","found","figured","like,","simply","use","really","think","believe","think"],"which Python":["version"],"which `Bob`":["is","class"],"which adds":["a"],"which are":["still","another","most","objects","preferable.","technically"],"which aren't":["in"],"which boolean":["to"],"which both":["very"],"which breaks":["the"],"which calls":["`YellAtMe.handle()`"],"which can":["come"],"which case":["they","it's","`statement.anything`","the"],"which checks":["if"],"which contains":["two"],"which converts":["the"],"which could":["get","help","be","be","also"],"which determines":["the"],"which doesn't":["directly","break"],"which don't":["represent"],"which each":["duplicate"],"which eliminates":["the"],"which evaluates":["to"],"which for":["me"],"which gets":["different"],"which has":["the"],"which improves":["handling"],"which in":["this"],"which is":["a","useless","still","accurate","arguably","idiomatic","minor),","a","a","unofficially","a","a","the","not","never","not","a","just","more","why","unacceptable.","why","lazy","essentially","a","more","not","no","misleading.","more","very","better","nice,","rather","an","handy","similar","correct","either","more","that","the","a"],"which isn't":["very","actually","nice","the","an"],"which it":["would","is"],"which kind":["of"],"which language":["you"],"which made":["the"],"which maintains":["order."],"which makes":["me","life","it"],"which may":["be","reflect","be"],"which maybe":["lacks"],"which means":["it's"],"which might":["be","more","not","fail"],"which now":["always"],"which nucleotide":["goes","is"],"which one":["I"],"which only":["works","works"],"which overcomplicated":["things"],"which passed":["with"],"which probably":["was"],"which relied":["on"],"which returns":["a"],"which seemed":["like"],"which seems":["to","a","better","more"],"which should":["be","really"],"which supports":["unicode"],"which takes":["a"],"which terminates":["the"],"which to":["play"],"which type":["of"],"which version":["I"],"which way":["you","is"],"which will":["makes","test","behave","be"],"which would":["be","do","handle","short-circuit","increase","be","have","increase","fail"],"which wouldn't":["be"],"which yields":["better"],"which you":["hide","are","might","certainly","then","could"],"which your":["predicate"],"which, beside":["not"],"while I":["was","think"],"while `collections.defaultdict`":["is"],"while `join`":["just"],"while a":["\"phrase\""],"while ago":["on"],"while at":["the"],"while balancing":["that"],"while comparing":["to"],"while it":["does"],"while javascript":["version"],"while keeping":["it"],"while loop":["you"],"while loosing":["nothing."],"while nitpicking":["others'"],"while reviewing":["code"],"while since":["I"],"while sort":["benefits"],"while still":["keeping"],"while the":["processing","test","test","actual","["],"while they":["should"],"while this":["works,","iteration"],"while thymine":["maps"],"while to":["get","make"],"while we're":["at","at"],"while working":["with"],"while, but":["I","managed"],"while, when":["structured"],"while. I":["normally"],"white characters.":["Not"],"white space":["-"],"white-box testing":["-"],"white-space and":["none"],"whitespace (**.strip()**":["could"],"whitespace after":["the"],"whitespace between":["each"],"whitespace can":["affect"],"whitespace checker":["a"],"whitespace for":["my"],"whitespace in":["them."],"whitespace only":["strings."],"whitespace sequences":["when"],"whitespace still":["looks"],"whitespace to":["conform"],"whitespace was":["easier"],"whitespace when":["checking"],"whitespace, therefore":["it"],"whitespace. I":["would"],"whitespace. In":["any"],"whitespace... but":["that's"],"whitespace? This":["should"],"whitespaces around":["operators","operators","the"],"whitespaces at":["the"],"whitespaces go":["against"],"whitespaces in":["the","a"],"whitespaces to":["\"align\""],"who are":["not"],"who don't":["care"],"who extracted":["a"],"who hasn't":["touched","touched"],"who might":["look"],"who needs":["to"],"who read":["this"],"who really":["cares"],"who responds":["to","to"],"who saying":["something"],"who sounded":["like","like"],"who taught":["me"],"who uses":["`DNA`"],"who will":["be"],"who would":["respond"],"who wrote":["it"],"who's playing":["a"],"whole \"standardization\"":["(`standarize`"],"whole `Phrase.phrase`":["string"],"whole ``nucleotides``":["sequence"],"whole being":["ugly,"],"whole check":["to","for"],"whole doc":["for","for"],"whole exercise":["every"],"whole if":["else"],"whole integer":["returned"],"whole lot":["easier."],"whole message":["in"],"whole more":["readable?"],"whole part":["with","with","with"],"whole phrase":["before","is","is","at","at"],"whole point":["of"],"whole range":["of"],"whole sanitization":["/"],"whole string,":["avoiding"],"whole test":["thing,"],"whole thing":["more","inside-out,","read"],"whole type-system":["but","but"],"whose names":["describe"],"why I":["didn't","used","didn't","submitted","recommend","made","wanted","forgot!","should","intentionally","like","ended"],"why I'm":["not"],"why abstract":["and"],"why all":["the"],"why are":["you","the","we","two"],"why aren't":["those"],"why call":["`string.replace`"],"why certain":["responses"],"why define":["normalize"],"why did":["you","you"],"why do":["you","you","you","I","you","you","you","you"],"why don't":["you"],"why each":["response"],"why i":["wanted","separated"],"why import":["string."],"why in":["favor"],"why is":["it","double-underscore","it"],"why isn't":["```REPLIES```"],"why it":["matters","passes","was"],"why map":["the"],"why my":["tests","tests"],"why not":["have","make","have","just","also","using","just","to","have","try","add","call","move","to","refer"],"why prefer":["early"],"why pyflakes":["doesn't"],"why restrict":["yourself?"],"why shouldn't":["we","he"],"why test":["for"],"why that":["didn't"],"why the":["factory","`filter()`","`else`/`elif`?","early","program"],"why this":["is"],"why would":["we"],"why you":["map","chose","have","might","don't","are","use","used"],"why, and":["it"],"why, so":["I"],"wide as":["possible"],"wide, consider":["breaking"],"widely accepted":["naming"],"widely used":["and","in"],"wider range":["of"],"wider range.":["That"],"wildcard imports":["(`from","at"],"will (sensibly)":["return"],"will a)":["never"],"will add":["the","nucleotide"],"will allow":["you"],"will already":["resolve"],"will also":["fail,","get"],"will always":["come","be"],"will answer":["false","your"],"will as":["well."],"will avoid":["using"],"will be":["easier","working","falsy","a","actually","more","easier","created","even","my","overly","raised,","able","returned","called","nice","nice","nice","used","more","done","at","uppercase.","very","rooting","able","nervous","small","interpreted","printed.","quite"],"will behave":["differently.."],"will break":["if","when","when","the"],"will cause":["the","no"],"will change":["it","so","my"],"will check":["it"],"will clarify":["the","your"],"will collapse":["whitespace."],"will compare":["each"],"will complain":["a"],"will cover":["`message","functionality","what"],"will depend":["on"],"will do":["all","-","nothing)."],"will do.":["Similarly"],"will either":["be"],"will ever":["be"],"will fail":["if"],"will get":["smth"],"will give":["you"],"will happen":["soon,","if","if","if"],"will hate":["you"],"will have":["to","a","a"],"will help":["you.","in"],"will indeed":["get"],"will initialize":["it"],"will just":["jump","start"],"will leave":["it"],"will look":["into","this","at"],"will lookup":["attributes"],"will make":["all","that"],"will makes":["the"],"will never":["change","be","be","be"],"will not":["understand","enter","be","be"],"will notice":["it"],"will obviously":["be"],"will of":["course"],"will omit":["the"],"will only":["work","be"],"will outweight":["the"],"will pass":["'#'"],"will pass.":["If"],"will probably":["allow"],"will really":["\"optimize\""],"will remove":["all"],"will reply":["`Whatever`"],"will represent":["an"],"will resolve":["to"],"will respond":["in","in","in"],"will respond,":["even"],"will return":["an","True","\"Fine.","the","a","a","a","`''`","a"],"will say,":["jbasalone's"],"will see":["in"],"will short-circuit":["and"],"will stop":["at"],"will store":["each"],"will take":["care","a","(questions,"],"will tell":["you"],"will test":["if"],"will that":["break"],"will throw":["exception.","an"],"will update":["to"],"will use":["the","some"],"will use,":["but"],"will work":["with","fine.","fine.","just","just","on","in","fine"],"win :)":["Nice."],"win in":["a"],"winds up":["being"],"wins in":["readability"],"wish I":["knew"],"wish I'd":["thought","thought"],"wish the":["submit","main"],"wish to":["refactor"],"wished the":["clojure"],"with \"Is":["the"],"with \"U\"":["because"],"with \"U\",":["but"],"with \"almost":["never"],"with '1'":["or"],"with 'Sure.'":["Even"],"with 'U's.":["Perhaps"],"with **DNA**":["to"],"with *setting*":["stuff"],"with +":["better"],"with 0's":["in"],"with 160":["MB"],"with 50%":["more"],"with 80+":["character"],"with \u003ccode\u003e_is_shouting\u003c/code\u003e":["I'm"],"with \u003ccode\u003eany\u003c/code\u003e":["and"],"with ?":["means"],"with @breanne":["completely."],"with @brown.":["Factoring"],"with @emmanuelle":["about"],"with @ignatius's":["nitpicks."],"with @katherine":["on"],"with @lacey.":["I"],"with @quinton.":["I"],"with @rhett":["from"],"with @torrey":["on"],"with DNA":["and"],"with Django":["applications,"],"with None":["[it's"],"with None,":["we"],"with None?":["It"],"with Python":["classes.","-","is","3.","to","3."],"with Python's":["standard"],"with Ruby":["for"],"with U":["doesn't"],"with U's?":["For"],"with U,":["you're"],"with Unicode,":["so"],"with [str.isspace](http://docs.python.org/2/library/stdtypes.html?highlight=isspace#str.isspace)":["that"],"with `''.join(chars)`...":["yuck."],"with `.isspace`,":["which"],"with `@jabari`":["decorator,"],"with `Beer`":["class."],"with `Counter`":["is"],"with `Fine.":["Be","Be"],"with `FormattedWord.is_anagram_of`":["taking"],"with `None`":["messages","up"],"with `None`,":["not"],"with `U`?":["These"],"with `\\w+`":["pattern.","pattern"],"with `__repr__`":["and"],"with `_word_to_sorted_list`:":["\"alphagram\""],"with ```":["None"],"with ``is_shouting()``,":["``is_interrogative()``,"],"with `alphagram`":["in"],"with `and`.":["You"],"with `basestring`":["to"],"with `collections.Counter`":["?"],"with `dict((rna,":["dna)"],"with `dict.get(key[,":["default])`"],"with `elif":["text.endswith('?')`"],"with `elif/else`":["-"],"with `elif`":["structure"],"with `endswith()`":["and"],"with `filter()`":["or"],"with `if":["string.isupper():`.","cond`"],"with `if`":["statements"],"with `is_silent`?":["If"],"with `is_yelled`":["though"],"with `is`":["rather"],"with `isupper()`":["a"],"with `len(message.strip()":["=="],"with `raise`,":["meaning:"],"with `respond_calmly`":["inlined"],"with `seconds`":["directly?"],"with `self._text":["="],"with `sentence`,":["which"],"with `sorted`.":["That"],"with `str.isupper()`":["?"],"with `str.isupper`":["and"],"with `utterance`,":["which"],"with `wordcounter":["="],"with a":["list","double-underscore,","more","particular","particular","particular","default.","single","method","question","bigger","\"?\"\"),","`.`?","leading","simple","single","dictionary","comment","solution","future","single","comma","single","question","bunch","little","`dna`","meaningful","more","class.","sequence","`None`","regex.","comprehension,","restricted","question","`is_anagram_of(other_word)`","single","single","sensible","single","list","few","question","counter.","pause/silence","length","better","superclass',","dict","descriptive","noun","variable","single","`_`","built-in","class","single","for","for","'?'","sub-string.","quick","bit","default","class","descriptive","grain"],"with abele":["on","that"],"with all":["the","Python","the"],"with almost":["similar","similar"],"with an":["actual","`AttributeError`.","underscore,","old-style","underscore","uppercase","additional","equally","elif","instance;","underscore?","underscore","non-existent","underscore","empty","appropriate"],"with and":["where"],"with another":["`Word`"],"with any":["iterable","other","non-empty","other","number","number"],"with attributes":["in"],"with bigger":["input:"],"with boilerplate":["code"],"with break":["after"],"with caching/memoizing.":["If"],"with care":["-"],"with careful":["code"],"with character":["checking","checking"],"with circular":["imports,"],"with class,":["constant"],"with code":["that"],"with codeacademy":["and"],"with comments":["like","or"],"with completely":["tangential"],"with component":["parts"],"with concise":["naming."],"with conversation":["context.","context."],"with correctly":["identifying"],"with current":["capabilities"],"with default":["value","value","value"],"with defining":["`_sequence`"],"with descriptive":["names.","names","names","names","names","names.","names?","name?"],"with dictionary?":["Are"],"with different":["cues"],"with dispatching":["to"],"with doc.":["Hm."],"with edge":["cases"],"with either":["here,","count_words()"],"with elegant":["way"],"with encoding.":["KISS."],"with enumerations":["in"],"with every":["candidate","candidate","call"],"with existing":["code."],"with explicit":["`else`"],"with few":["references,"],"with figuring":["out"],"with filtering.":["You"],"with formatting":["words"],"with full":["names."],"with functions,":["makes"],"with future":["maintenance"],"with good,":["intention"],"with having":["the","a"],"with help":["of"],"with helper":["methods,"],"with his":["comment."],"with identifying":["questions."],"with if":["you"],"with implementation":["please"],"with implicit":["return"],"with important":["words"],"with initializing":["the","the","the"],"with inline":["comments"],"with inputs":["as"],"with integers":["as"],"with internal":["data"],"with invalid":["input"],"with is":["the"],"with it":["too.","in"],"with it's":["own"],"with it,":["which"],"with it.":["the"],"with iterating":["and"],"with iteration":["and"],"with just":["`self.RNA_MAP.get(char,","a","an","the","three","three","returning,"],"with lambda(s)":["would"],"with length":["zero"],"with less":["worries,","of"],"with list":["comprehension","comprehension","comprehension","comprehension","comprehension","comprehensions.)","comprehension"],"with looking":["at"],"with low":["level"],"with lowercase":["input,"],"with lowks'":["advice"],"with making":["Statement"],"with many":["return"],"with max.":["2"],"with maybe":["more"],"with me":["too."],"with me,":["by"],"with meaningful":["names,","names","names","names"],"with member":["from"],"with memoizing.":["Even"],"with methods":["that"],"with methods,":["but"],"with more":["descriptive","descriptive","descriptive","nuance"],"with multibyte":["characters"],"with multiple":["statements","responsibilities","comparisons"],"with my":["OCD","other","current","style","category-check","script"],"with names":["descriptive","that"],"with no":["impact","transformation,"],"with normalize":["and"],"with one":["last","choice","underscore","`None`"],"with one.":["As"],"with other":["libraries.","people"],"with others":["fairly"],"with others.":["Thx!"],"with out":["changing"],"with over-engineered":["OOP"],"with parens":["so"],"with partial":["function"],"with pkoch's":["suggestion"],"with plain":["old"],"with pretty":["much"],"with programming...":["intentional"],"with proper":["support"],"with punctuation,":["thanks."],"with putting":["all"],"with python":["style","devs","devs","idioms."],"with python's":["object"],"with python,":["so","but"],"with python.":["What"],"with pythonistas":[";)"],"with query":["methods","methods"],"with really":["huge","huge"],"with regards":["to","to","to","to"],"with regular":["expresisons"],"with respect":["to"],"with response":["in"],"with riddles,":["I'd"],"with rna":["nucleotide"],"with seconds":["instead"],"with self...":["still"],"with separating":["the"],"with sets":["in"],"with several":["'!'"],"with similar":["names"],"with simple":["code,","`self.greeting","`str`"],"with single":["underscore","underscore","underscore"],"with single-underscore;":["just"],"with some":["additional","minimal","terrible"],"with something":["like:"],"with spaces":["at"],"with specialized":["classes"],"with standardization":["already"],"with static":["property"],"with string":["methods."],"with strings":["and"],"with striping":["passed"],"with subclassing.":["I"],"with such":["irrelevant,"],"with that":["–","decision","`str.translate`."],"with that).":["Please"],"with that,":["either."],"with the":["message","VoiceAnalysis","statement","empty","specifications","Message","code","second","code.","one","case","added","question","built-in","two","String#endswith","code","`isupper()`","code","nit","exception","`isSilence()`","returns","functions","class","obvious.","other","final","code.","reader","steps","thymine","code.","tradeoffs","dictionary,","comment","early","```None```","current","exercise's","value","inverted","string","literal/constant","`re.sub()`","for","third","uppercased","punctuation,","same","umlauts...","test","anagram","if/else","conditions","task","same","built","words.count(word)","strictness","others?","docstrings","test,","[regex](https://pypi.python.org/pypi/regex)","previous","next","examples.","function","replies","collections","translate,","Counter","number","whole","default"],"with their":["own","responses."],"with them":["and"],"with them.":["A"],"with these":["guidelines."],"with this":["one,","one","implementation","default","example","code.","is"],"with those":["considerations","pesky","`yield`s."],"with time.":["IMO"],"with to":["describe"],"with two":["blank","nicely","'s'","underscores?","different","underscores"],"with umlauts":["to"],"with undesirable":["coupling."],"with unexpected":["results."],"with unknown":["input?","input?"],"with uppercase":["input."],"with using":["a","collections.Counter!","a"],"with very":["few"],"with what":["is"],"with which":["nucleotide"],"with you":["on","on","about","on","on","here.","on","I'm","on","that","that","on"],"with you.":["Refactoring,","They"],"with your":["point","comment","self-nitpick,","current","two","code","``ANSWERS``","'not'","thought","improvements"],"with yours":["is"],"with, but":["you'd"],"with. Also,":["you"],"with. It":["would"],"with? It":["looks"],"within a":["single"],"within one":["routine"],"within the":["`Statement`","class","`Bob`","`join`"],"without `_str`,":["as"],"without a":["sequence.","separator"],"without adding":["comments?"],"without addressing":["all"],"without any":["regexp.","overhead"],"without as":["much"],"without breaking":["anything.","`is_anagram`).","their","old"],"without checking":["for"],"without commenting":["the"],"without comments":["while"],"without doing":["unnecessary","both?"],"without elif":["use"],"without even":["having"],"without executable":["code"],"without having":["to","to","to"],"without importing":["the"],"without introducing":["undesired"],"without it":["(python"],"without jumping":["through"],"without making":["them"],"without mutation":["and"],"without needing":["to"],"without people":["thinking"],"without reading":["the"],"without recalculating":["result."],"without recombining":["it"],"without regexes":["as"],"without regular":["expressions."],"without resorting":["to","to","to"],"without sacrificing":["readability?"],"without small":["helper"],"without some":["of"],"without string,":["that"],"without testing":["all"],"without the":["for","tests,","class","`any()`","problem","use","parentheses"],"without them":["here?"],"without using":["regexps","regex?","defaultdict"],"without worrying":["about"],"without, could":["you"],"won't be":["upgrading","accidentally","cluttering","_accidentaly_","tempted","able"],"won't cause":["an"],"won't die":["on"],"won't end":["up"],"won't fail":["with"],"won't have":["that","to"],"won't hold":["you"],"won't increase":["complexity."],"won't insist":["(there"],"won't let":["empty"],"won't match":["this"],"won't need":["to","to","two","the","to"],"won't properly":["work"],"won't take":["a"],"won't work":["in"],"wonder if":["you","you","this","that","the","the","that's","the","to","the","a"],"wonder of":["wonders,"],"wonder why":["pyflakes"],"wondered if":["you"],"wondering about":["the","private"],"wondering how":["would"],"wondering if":["I","I","it's"],"wondering wether":["the"],"wondering why":["my","my","you"],"wondering, though,":["is"],"wonders, it":["didn't"],"wont comment":["on"],"word (like":["umlauts,"],"word I":["could"],"word after":["being"],"word along":["with"],"word anagram.":["This"],"word and":["then"],"word at":["a"],"word counting":["stuff","code.","is"],"word for":["what","each"],"word if":["s.isalnum())`.","it's"],"word in":["words`.","d`","the","word_seq","`word_list`.","[...","re.finditer(r'\\w+',","words","norm.split():","wordlist:","re.findall(r'[\\w]+',","re.findall(r'[\\w]+',"],"word is":["a","a"],"word mattered":["in"],"word on":["line"],"word once":["because"],"word once,":["without"],"word or":["not,"],"word passed":["in"],"word that":["can"],"word with":["every"],"word, but":["I"],"word, for":["this"],"word, how":["about"],"word, in":["which"],"word, it":["was"],"word, so":["passing"],"word, thanks":["for"],"word, which":["would","I"],"word, while":["a"],"word. Also":["I'm"],"word. I":["did"],"word. If":["each"],"word. So":["if"],"word: continue`":["in"],"word_count a":["bit,"],"word_count all":["in"],"word_count function":["itself"],"word_count invokes":["it"],"word_count method":["is"],"word_count method.":["I"],"word_count was":["a"],"word_count() more":["than"],"word_counter. If":["this"],"word_counts as":["a"],"word_seq (after":["tossing"],"word` check":["in"],"wordcount for":["whatever"],"wordcount, but":["it"],"wordcounter --":["being"],"wordcounter: ***insert":["code"],"words 'hash'":["calculation"],"words (using":["`filter()`"],"words -":["it"],"words and":["may","word_count","remove"],"words are":["anagrams","anagrams"],"words as":["a"],"words be":["extracted"],"words before,":["and"],"words by":["downcasing"],"words getter?":["Also,"],"words in":["memory","the","get_words,","list.","phrase","the"],"words independent":["from"],"words is":["simpler","cleanly"],"words like":["'if","\"this£@!£@roberta!!!@£@roberta\"?"],"words more":["than"],"words now,":["what's"],"words or":["statement.is_silence()`"],"words sequence":["?"],"words so":["you"],"words though,":["zoldar?"],"words with":["any"],"words works":["just"],"words works,":["but"],"words would":["require"],"words, `content`":["isn't"],"words, depending":["on"],"words, in":["which"],"words, separates":["concerns"],"words. Can":["that"],"words. I":["would","would"],"words. So":["I"],"words. This":["would"],"words.strip() ==":["''"],"words[-1:] ==":["'?'"],"words[len(words)-1] does":["not"],"work I":["suppose."],"work a":["lot"],"work all":["in"],"work and":["you","returning"],"work around":["that,"],"work as":["an"],"work because":["message","it"],"work better":["to"],"work better?":["Also,"],"work correctly":["if"],"work exactly":["as"],"work fine":["without"],"work fine.":["But"],"work for":["this","you?","you"],"work in":["the","the","Python","Python","the"],"work into":["chunks"],"work it?":["Check"],"work just":["the","find","fine","as","as"],"work may":["seem"],"work might":["be"],"work on":["the","a","that","empty","that."],"work out":["what"],"work that":["went"],"work this":["out","solution"],"work to":["make","set"],"work with":["some","sets","`sorted`.","this","a","a","lowercase","that."],"work yourself.":["http://docs.python.org/3.3/library/stdtypes.html#str.isupper"],"work\" implementation":["(well,"],"work, a":["solid"],"work, and":["I"],"work, but":["note","this"],"work, now":["we"],"work, you":["need"],"work. But":["here,"],"work. Go":["over"],"work. Rationale":["was"],"work. The":["current"],"work. This,":["however,"],"work? Or":["is"],"workaround would":["make"],"worked at":["the"],"working [link](http://exercism.io/submissions/52101ce59701fa85bd000026)":["for"],"working for":["me."],"working implementation":["passing"],"working in":["the"],"working on":["this,"],"working through":["the","these"],"working with":["the","the","Django","Ruby"],"works anyway":["is"],"works as":["a"],"works exactly":["the"],"works fine":["but"],"works fine,":["just"],"works for":["a","me","checking","new","new"],"works in":["both","both"],"works just":["fine.","as","fine.","fine.","like"],"works much":["better"],"works ok.":["It's"],"works on":["same","strings"],"works pretty":["well."],"works really":["well."],"works this":["way."],"works to":["remove"],"works well":["here."],"works with":["any","the","iterables."],"works, I":["was"],"works, but":["is","I'm"],"works, maybe":["play"],"works. I":["am","chose"],"works. Is":["there"],"works. It":["may"],"world at":["the"],"world this":["is"],"world, so":["I","most"],"worried I'm":["missing"],"worried about":["that","the"],"worries :)":["You"],"worries, and":["running"],"worries. I'm":["glad"],"worry about":["it","name","making","filtering","breaking"],"worry and":["double"],"worry too":["much"],"worry, I'm":["not"],"worrying about":["the"],"worth a":["near"],"worth caching":["the"],"worth considering":["using"],"worth familiarising":["yourself"],"worth learning":["some."],"worth splitting":["up"],"worth the":["trouble"],"worthwhile as":["always"],"worthwhile if":["it"],"worthwhile in":["a"],"would \"if\"":["suffice?"],"would \"phrase":["and"],"would BOTH":["make"],"would I":["need","want","add","do"],"would `\"12345\"`,":["which"],"would a":["list"],"would actually":["be"],"would add":["that","new"],"would agree":["about"],"would allow":["it"],"would also":["make","have","return","not","ignore","give","fix"],"would always":["end","answer"],"would anybody":["learn"],"would appreciate":["pointing","it","feedback"],"would argue":["that","that"],"would as":["well"],"would at":["first"],"would avoid":["expressions","using","using"],"would be":["`False`","less","more","a","good","one","useful","to","improved","clearer?","clearer.","better","overkill.","clearer","IMO","more","more","more","a","clearly","worthwhile","worth","to","roughly","also","more","a","justified.","good","to","great.","created","more","an","great","better","very","an","more","better","a","really","slower.","\"Returns","to","easier","simply","confusing,","more","good","smth","also","nice","useful","a","the","open","helpful.","a","more","a","more","nice","more","better","more","overkill.","a","better","getting","useful","fine","a","a","in","tightly","the","more","possible","used","equivalent","more","to","a","something","to","much","more","better","the","\"better\"","fine.","an","more","any","done","just","simpler","useful.","faster.","cleaner","more","warranted.","pseudocode","wrapping","strange","using","`class","cleaner","better","even","like","more","great","more","[string","cleaner","more","more","more","a","very","nice","easier","a","better","nice","the","a","to","better","more","more","more","fun","interesting.","more","the","enough.","most","best","to","useful","something","nice","more","shouting,","somewhat","any","clear","more","to","more","more","one-liners,","to","a","something","to","recounting","violated","violated","more","safest.","more"],"would be,":["that"],"would become":["a","`Counter(self.words())`","`words`"],"would begin":["to"],"would break,":["so"],"would breaking":["the","these"],"would build":["it's"],"would call":["it"],"would certainly":["increase"],"would change":["is","that"],"would choose":["`_RESPONSE`.","to","to"],"would clean":["it"],"would clearly":["show"],"would clutter":["up"],"would complain":["about","about"],"would complicate":["the"],"would consider":["rewriting","moving","`_query`"],"would contain":["the"],"would create":["a","namespace"],"would deal":["with","with","with"],"would definitely":["accomplish"],"would delete":["the","it"],"would do":["pretty","that","in","something","a","it","so","in","here"],"would do.":["Tokenizer,"],"would eliminate":["the"],"would emphasize":["the"],"would enhance":["readability?"],"would exhibit":["unexpected"],"would expect":["translate","that","`Phrase.word_count()`","as","the"],"would extract":["a","some","the"],"would fail":["some","and","if"],"would fall":["on"],"would find":["it"],"would fit":["better","better"],"would force":["me"],"would get":["a"],"would give":["it","you","you"],"would go":["in"],"would greatly":["enhance"],"would handle":["the","the"],"would happen":["if","if","if"],"would have":["made","the","saved","used","to","no","sufficed","to","liked","gone","to","made","just","to","to","used","been","been","problems","discussion","gone","made","made","made","been","already","preferred","separated","to","had","meant","suffice,"],"would help":["readability","more","you","readability.","to","readability"],"would help),":["so"],"would hold":["true."],"would however":["assert:"],"would impact":["comprehension"],"would improve":["readability.","readability"],"would in":["fact"],"would include":["some"],"would increase":["the","readability.","readability"],"would it":["be","add?","add?","be","be","be","be","be","make","make","not"],"would just":["make","write"],"would let":["the"],"would like":["to","to","to","to","to","to","to","to","to","it."],"would look":["at","good","better","a","better"],"would look,":["and"],"would love":["any","to"],"would make":["it","it","`is_shouting`","sence,","`is_shouting`","the","it","the","the","it","sense,","the","each","sense.","the","the","more","sense","the","the","line","code","a","it","this","code","sense","this","no","things","more"],"would mark":["`Bob.responses`"],"would mean":["more"],"would moving":["the"],"would naming":["your"],"would need":["to","to","to"],"would never":["send","throw"],"would no":["longer"],"would nonsense.":["Some"],"would normally":["lead"],"would not":["code","use","add","include","be","have","need","be"],"would of":["course"],"would only":["be","return","be"],"would pass":["the"],"would personally":["advise","use"],"would personnaly":["not"],"would place":["helper","helper"],"would prefer":["`msg`","an","`re.finditer`","to","generator","to"],"would print":["`message"],"would probably":["create","make","rather","not","be","be"],"would publish":["it..."],"would put":["nucleotide","them"],"would rather":["either","pass","raise","put","have","call"],"would read":["more","a"],"would really":["model"],"would recommend":["you","that"],"would reduce":["the"],"would reflect":["changes,"],"would reply":["\"chill"],"would require":["changing","a","keeping","the"],"would respond":["in","to"],"would respond.":["My"],"would return":["True,","False","true","the","an"],"would run":["faster)"],"would save":["a","tally{}","you"],"would say":["is"],"would see":["the"],"would short-circuit":["the"],"would simplify":["code.","your"],"would still":["like"],"would strictly":["need"],"would suffice":["(double"],"would suggest":["replacing","making","using","moving","to","taking"],"would take":["a","the"],"would that":["be","change","effect","be","be"],"would the":["specs"],"would then":["modify"],"would there":["be"],"would they":["compare"],"would this":["do","be","do"],"would throw":["an"],"would thus":["apply"],"would totally":["agree."],"would treat":["it","it"],"would try":["to","to"],"would typically":["write","write"],"would understand":["what"],"would uppercase":["`dna_to_rna`"],"would use":["```string```,","just","a","a","`isinstance`","a","Python's","explicit","explicit","`str.endswith`","early","`itertools.izip`","an"],"would we":["want"],"would work":["better","just","just"],"would work.":["Rationale"],"would wrap":["sentences"],"would write":["`Phrase.strip_punctuation`"],"would you":["think","feel","then","factor","really","do","do","mind","handle","consider","implement","respond","suggest?","make","consider"],"would, but":["in"],"wouldn't `{}`":["be"],"wouldn't be":["happy","the","religious","so","the","complete.","mutated.","confused"],"wouldn't break":["anything"],"wouldn't call":["it"],"wouldn't change":["code"],"wouldn't claim":["that"],"wouldn't convert":["back"],"wouldn't drop":["`elif`"],"wouldn't extracting":["tests"],"wouldn't have":["added","factored","exposed","to","bothered","written"],"wouldn't hurt":["ether.","ether."],"wouldn't include":["Bob's"],"wouldn't it":["be","be","be"],"wouldn't need":["to","explicitly","`if`","to"],"wouldn't require":["the"],"wouldn't so":["bad."],"wouldn't strip":["spaces)"],"wouldn't that":["be"],"wouldn't use":["else","it","old-style"],"wouldn't worry":["about"],"wouldn't you":["think"],"wouldnt let":["me"],"wow! That":["really"],"wow, theres's":["no"],"wrap `if`":["statement"],"wrap a":["simple"],"wrap each":["`if`"],"wrap input":["checks","in"],"wrap it":["in"],"wrap my":["head"],"wrap sentences":["outside"],"wrap the":["thing","checks"],"wrapped by":["a"],"wrapped in":["value"],"wrapper `Message`":["class,"],"wrapper(self, *args,":["**kwds):"],"wrapping `if`":["statements."],"wrapping conditional":["expressions"],"wrapping each":["`if`"],"wrapping it":["in"],"wrapping nucleotides":["in"],"wrapping round":["it?"],"wrapping the":["string"],"wrapping whole":["message"],"wraps the":["message."],"write \"Returns":["the"],"write C":["in"],"write `\"?\"":["=="],"write `Phrase.strip_punctuation`":["on"],"write ```":["MethodDispatcher","return"],"write ```class":["Bob:```"],"write `class":["Bob(object)`"],"write `defaultdict(int)`":["instead"],"write `if":["x","not"],"write `not":["phrase`"],"write `sum(1":["for"],"write a":["list","decorator","short","short","comment","new","1-to-1","docstring","seperate"],"write all":["the"],"write checks":["more"],"write code":["in"],"write comments":["anymore."],"write getters":["and"],"write good":["code"],"write in":["production"],"write it":["in"],"write it,":["just","too."],"write more":["code"],"write one":["for"],"write out":["the"],"write readable":["and"],"write some":["compact","docstrings.","docstrings."],"write something":["like:","to","like"],"write the":["expression","doctoring","method"],"write this":["would"],"writen in":["the"],"writes something":["like"],"writing Haskell":["lately,"],"writing Python":["code"],"writing `not":["text`"],"writing a":["class!"],"writing comments":["like"],"writing docstrings,":["or"],"writing is":["better"],"writing it":["that"],"writing line":["23"],"writing lines":["and"],"writing out":["that"],"writing the":["message","unittests"],"writing these,":["and"],"writing this":["code","code","\"the"],"writing to":["the"],"written :)":["But"],"written Python,":["so"],"written `msg":["is"],"written a":["bit","simple","python"],"written any":["comments,"],"written anything":["in"],"written as":["a","`input[-1]`.","`if"],"written by":["me,"],"written in":["that","C","such","`CamelCase`,"],"written much":["python"],"written passes":["all"],"written reflects":["the"],"written this":["without"],"written to":["need"],"written using":["different"],"written with":["very","uppercase"],"written, the":["code"],"written. Be":["gentle."],"written. The":["doc","use"],"written. would":["love"],"wrong -":["i.e.,"],"wrong about":["this"],"wrong and":["something"],"wrong being":["both"],"wrong design":["choice"],"wrong encoding":["in"],"wrong exercise,":["I"],"wrong here,":["but"],"wrong input":["(like"],"wrong place":["in"],"wrong there,":["in"],"wrong to":["me."],"wrong way":["around?"],"wrong with":["plain","`collections.Counter`","`str.isupper()`","`dict.get(key[,","the"],"wrong, because":["empty"],"wrong, but":["I"],"wrote in":["python."],"wrote it":["understands"],"wrote it,":["so"],"wrote over":["9000"],"wrote such":["a"],"wrote the":["message_is_...","version"],"wrote this":["thinking"],"wrote this.":["The"],"wrote you":["a","'hey'"],"wrt the":["sorted,"],"wrt/ MethodDispatcher,":["you"],"wrt/ `Anagram.match`,":["a"],"wrt/ capitalization":["(the"],"wrt/ class":["attributes,"],"wrt/ design,":["the"],"wrt/ design:":["this","now","the"],"wrt/ general":["coding"],"wrt/ implementation":[":"],"wrt/ implementation,":["you","you"],"wrt/ implementation:":["the"],"wrt/ initializer,":["my"],"wrt/ list":["comprehensions,"],"wrt/ one-liner":["`if`"],"wrt/ part":["2,"],"wrt/ performances,":["but"],"wrt/ specs":["FWIW,"],"wrt/ the":["`clean_words`","predicates"],"www.python.org/dev/peps/pep-0008/ :\"Compound":["statements"],"x =":["\"?\"```"],"x in":["xs","range(100)]',","range(100)]',","range(100)]',","range(100)]',","range(10000)]',","range(10000)]',","list)`","msg)"],"x is":["not"],"x return":["True"],"x\" followed":["by"],"x\" which":["seemed"],"x0,x1 in":["zip(sequence,"],"x1 for":["x0,x1"],"x: True,":["'Whatever.')]"],"x: x[0](statement),":["self.responses).next()[1]"],"x` instead":["of"],"x`, so":["this"],"xs if":["fn(x)`."],"xs)` is":["so"],"xxx in":["yyy`"],"xxx not":["in"],"yeah this":["passes"],"yeah, i":["missed"],"yeah, that":["makes"],"year lengths":["info"],"year, you'll":["have"],"years ago":["and"],"years allowed":["us"],"years of":["daily"],"years, migrated":["more"],"years. Please":["do","do"],"yell at":["Bob","Bob","Bob"],"yell, why":["not"],"yelled and":["the"],"yelled at":["...\"","you"],"yelled question":["is"],"yelling before":["the"],"yelling case":["for"],"yelling etc),":["maybe"],"yelling higher":["precedence"],"yelling or":["questioning"],"yelling portion":["where"],"yelling the":["teenager"],"yelling using":["standard"],"yelling with":["several"],"yelling', '#":["question',"],"yelling), but":["even"],"yelling, a":["question,"],"yelling, asking":["etc."],"yelling, because":["it"],"yelling, but":["it's"],"yelling, not":["as"],"yelling. One":["way"],"yelling. This":["seems"],"yelling/ screaming":["and"],"yells and":["questions"],"yep I":["understand,"],"yes :":["if"],"yes I":["have"],"yes an":["\"order\""],"yes indeed":["you"],"yes it":["would"],"yes there's":["a"],"yes you'll":["get"],"yes, I":["see"],"yes, all":["that"],"yes, as":["a"],"yes, dispatching":["would"],"yes, implementation":["attributes"],"yes, it":["helps","might"],"yes, just":["move"],"yes, making":["a"],"yes, underscore":["naming"],"yes, when":["I"],"yes, why":["?"],"yes. Because":["it"],"yes. You're":["right"],"yes: if":["using"],"yes: there's":["still"],"yes: you":["may","may"],"yesterday in":["the"],"yet I":["had"],"yet been":["a"],"yet it":["only","can"],"yet looked":["up"],"yet the":["initializer"],"yet! Do":["I"],"yet, I'll":["revisit"],"yet, name":["it"],"yet, will":["do!"],"yet. Any":["ideas"],"yet. I":["do"],"yet. So":["I"],"yields better":["results"],"you \"could\"":["do!"],"you \"precompute\"":["both"],"you \"read":["it\""],"you 'hey'":["function."],"you **really":["absolutely"],"you *almost":["never*"],"you *don't*":["want"],"you FP":["background."],"you I":["bet!)"],"you I'm":["afraid."],"you IndexError":["on","on"],"you _do_":["need"],"you a":["chance","shot","long","great","more","better","couple"],"you about":["the"],"you abstract":["this","this"],"you accounting":["for"],"you actually":["need.","ran"],"you add":["a","some"],"you all.":["I"],"you almost":["never","always"],"you already":["use","sanitized","noticed.","know","know"],"you alreeady":["know"],"you also":["replaced"],"you always":["have","recalculate"],"you an":["hour"],"you any":["indication","thoughts"],"you are":["really","using","going","not","saying","going","silent.\"\"\"","perfectly","sure","going","going","curios","hinting","intending","creating","going","most","able","creating","going","checking","using","searching","trying","reusing","dealing","using","avoiding","re-using","doing","in","not","practicing","right,","using","not","not","missing","replacing","using","converting","doing","doing,","testing","going","going"],"you are)":["for"],"you aren't":["approached","declaring"],"you as":["well.","well"],"you ask":["me.","him"],"you ask,":["`Word`"],"you assume":["and","that"],"you assume.":["Open"],"you avoid":["a","this"],"you basically":["have","captured"],"you be":["more"],"you break":["something."],"you but":["they'll"],"you calculate":["them"],"you call":["method","hey","from","two","`Beer().sing(1,"],"you can":["actually","make","consider","drop","safely","find","safely","be","remove","also","find","build","do","use","safely","check","get","review","simplify","use","use","put","also","use","get","use","use","see","drop","never","readily","group","use","use","change","easily","use","do","safely","try","come","change","have","have","declare","use","do","see","avoid","either","do","easily","make","inline","rewrite","factor","get","see","add","refactor","push","rely","do","use","probably","even","just","just","do","get","break","just","just","replace","think","add","do","do","use","set","create","just","simplify","use","use","use","return","index","index","find","merge","use","just","simplify","improve","just","further"],"you can't":["do","exploit"],"you can.":["Also,"],"you cannot":["change"],"you care":["if"],"you care.":["\"if"],"you case":["you"],"you certainly":["don't"],"you change":["the","the","your","the"],"you check":["for","for","this","\"if"],"you choose":["to","to","to","this","to"],"you choosed":["to"],"you chose":["this,","to"],"you clarify":["`is_question`.","your","for"],"you class":["inherit"],"you classify":["sentences"],"you clear":["this"],"you code":["is"],"you come":["up","across"],"you committed":["to"],"you communicate":["the"],"you compile":["the"],"you complete":["this"],"you consider":["adding","the","storing","putting","wrapping","that","defining","that","it"],"you considered":["it.","them?","making","extracting","extracting","breaking","using","moving","naming","documenting","moving","Pythons","`if..elif..`","adding","marking","extracting","`string.replace`?","using"],"you converting":["the","to","`Counter`"],"you copy":["the"],"you correctly":["when"],"you could":["improve","leave","have,","even","still","tell","normalize","shorten","of","introduce?","get","factor","clarify","const","make","preserve","use","only","still","possibly","get","use","get","defend","couple","express","pass","try","make","reduce","avoid","use","easily","avoid","reuse","check","use","use","have","have","use","inline","use","use","as","refactor","refactor","use","use","remove","find","used","have","also","make","simply","use","skip","also","duplicate","consider","rewrite","choose","used","consider","use","have","consider","extract","name","use","write","use","filter","easily","check","clarify","also","also","iterate","set","take","write","use","move","try","do","just","keep","also"],"you couldn't":["get"],"you create":["an","a","a","an"],"you created":["helper"],"you currently":["have","don't"],"you decide":["to","to"],"you declare":["at"],"you decouple":["the"],"you define":["`_sequence`","one"],"you defined":["it","constants","some"],"you definitly":["_DONT_"],"you did":["there,","not","not","with"],"you didn't":["wrap","wrap"],"you disagree":["or"],"you divided":["the"],"you do":["```if","keep","with","it?","not","not","if","it","have","that","with","a","not","it","without","have","a","write"],"you do.\",":["this"],"you documented":["everything"],"you don't":["have","use","have","need","have","read","need","need","have","mean","even","read","need","need","need","need","have","have","need","have","need","need","seem","have","have","have","want","need","need","learn","learn","use,","need","like","need","need","enforce","like","assume","need","need","have","use","use","assume","assume","have","assume","assume","have","need","use","need","use","really","do","need","do","need","need","need","instantiate","have","get","need","want","even","need","necessarily","seem"],"you dont":["need","have"],"you drop":["the"],"you either":["repeat","return"],"you elaborate":["a","about"],"you embedded":["knowledge"],"you encapsulated":["message"],"you end":["up"],"you enjoy":["the"],"you even":["know"],"you eventually":["do"],"you ever":["needed","changed","need"],"you expect":["to"],"you expect.":["This"],"you expecting":["to"],"you explain":["what","the"],"you explicitly":["subclass","can","set","return","return"],"you expose":["`Phrase.rawinput`","both"],"you extract":["any","the","it"],"you factor":["out","out"],"you factored":["out"],"you fall":["short"],"you feel":["about","about","about","like","my","like","like"],"you fetch":["a"],"you fill":["it"],"you find":["a","a","a"],"you follow":["to"],"you for":["your","your","the","these","your","those","all","your","this","comments.","putting","the","the","the","the","the","your","your"],"you forget":["the"],"you found":["`string.punctuation`"],"you gave":["it"],"you get":["rid","to","used"],"you getting":["a"],"you give":["reasons","a"],"you go":["for","that"],"you gotta":["do"],"you had":["considered","a","used","to","factored","too"],"you handle":["this","a","`is_upper`."],"you have":["is","the","something","early","to","something","any","`_get_words()`","\"elif","reached","a","to","to","to","thoughts","two","_two_","multiple","everything","a","to","to","exposed","to","to","to","a","a","two","this","one","no","two","absolutely","to","a","is","made","`if`","checked","more","to","`if`","checked","`if`","checked","`if`","checked","`if`","checked","space","it","to","the","that.","“conditional","it","nested","mentioned,","a","in","to"],"you have?":["\"I","I"],"you here":["since","again"],"you here.":["However,"],"you hide":["the"],"you hit":["a"],"you implement":["this"],"you import":["`re`","the"],"you import,":["you"],"you import.":["That"],"you improve":["how"],"you included":["module"],"you initialize":["variable"],"you insist":["on"],"you instantiate":["a","Bob"],"you instantly":["understand"],"you into":["hardcoding"],"you introduce":["the"],"you just":["`import","had","right","need","prefix","set","want","inlined","need","return"],"you keep":["writing"],"you kept":["the"],"you kindly":[":)"],"you knew":["about"],"you know":["that","this.","?-)","that","whether"],"you leave":["it","also"],"you like":["it","java","my","to","them","separate","reduce","to"],"you linked":["does....","to"],"you look":["at"],"you looked":["in","for","at","at","at"],"you loose":["`[`"],"you lower":["complexity."],"you made":["_dna_strand","`normalize_word`","the"],"you make":["a","the","some","it","it","method","line","them"],"you making":["a"],"you managed":["to"],"you map":["lower"],"you may":["drop","as","not","want","get","consider:","want","have","want","want","just","want","not","want","want","not","want","not","want"],"you mean":["to","`THYMIDINE","by","something","`isShouting`.","something","something","moving","by","def","by","Python's","having","to","by","just","lower();","by","that","by","naming","[PEP-263](http://www.python.org/dev/peps/pep-0263/)?","`sanitize`","to","by","about"],"you mean,":["can"],"you mean.":["Seems","If"],"you means":["`String.endswith()`?"],"you meant":["the"],"you mention":["it,"],"you mentioned":["the"],"you mentioned.":["I"],"you might":["find","consider","wanna","not","want","have","want","consider.","prefer","need","want","want","as","be","think."],"you mind":["checking"],"you misspelled":["`candidate`"],"you mix":["those"],"you most":["of"],"you mostly":["understood"],"you move":["the"],"you moved":["on","the"],"you must":["have","inherit"],"you name":["it","things"],"you need":["the","to","and","it","to","them","^","to","to","methods","only","to","to","the","to","to","to","to","there.","self.blah","the","the","it?","the","the","to"],"you needed":["to","to"],"you nesting":["`Message`"],"you never":["use","access"],"you normalize":["whole","the","message","your"],"you notice":["something"],"you off":["just"],"you on":["`None`.","the","crack?\"","this","sticking","two","all","the","this"],"you one:":["`is_empty`"],"you only":["return","want","use","need","need","update"],"you out":["with"],"you override":["names"],"you pass":["in","`None`","ALL"],"you phrodod":[":)"],"you plan":["on"],"you point":["out,","about"],"you precalculate":["the"],"you precompute":["the"],"you prefer":["and","to","it"],"you prefer.":["This"],"you prefixed":["it"],"you probably":["have","would"],"you process":["input","inputs"],"you provide":["are"],"you pulled":["out"],"you put":["`elif`/`else`?","the","in","message_is_empty","`is_silence`"],"you re-compile":["them"],"you read":["the"],"you really":["need","need","need","subclassing","have","need","don't","need","insist","want","need","need","need","dont","care","think","want","need","need","must","need","need:","need"],"you recommend":["me"],"you refer":["to"],"you referring":["to"],"you regex":["in"],"you remove":["lines"],"you rename":["`char`"],"you reorder":["the"],"you replace":["`wordcounter"],"you respond":["to"],"you resubmit":["with"],"you return":["early","early","results","early","early","early.","early.","as","early.","the","`None`."],"you returned,":["then"],"you rewrite":["this"],"you run":["test","a"],"you said":["is","to"],"you said,":["the"],"you saw":["it"],"you say":["\"","to"],"you saying":["a"],"you searched":["for"],"you see":["something","variable","why?","what"],"you seem":["to","to"],"you seen":["`str.replace()`?","`String#translate`?"],"you should":["use","look","do","do","worry","refer","make","use","move","name","extract","have","arrive","definitly","inherit","run","have","include","use","replace","avoid","fully","look","be","use","flesh","group","make","make","make","put"],"you shouldn't":["maintain","care","duplicate","change"],"you simplify":["line","that","even","lines"],"you simply":["see","made"],"you since":["it"],"you six":["months"],"you solve":["the"],"you somehow":["store"],"you split":["then"],"you spoiled":["the"],"you spot":["a","some","some","a"],"you started":[":)"],"you stated.":["If"],"you still":["don't","rely","stuck","have","have","have","have"],"you store":["the","on"],"you subclass":["`object`","`object`"],"you submitted":["so"],"you suggest.":["Maybe"],"you suggest?":["I'm"],"you sure":["that","you","it","the"],"you sure?\",":["or"],"you take":["a"],"you taken":["a"],"you talking":["about"],"you tell":["Bob"],"you test":["\"message","`self.message`","a","a","string"],"you that":["comments","the"],"you the":["OO","same","isalnum()"],"you then":["refactor","call"],"you think":["about","it","of","it","about","about","the","would","moving","about","about","about","a","`filter`","that","about","moving","about","of","of","of","of","you","too","of","someone","the","of","about","you","the","of","of","so?","(remember","of","of","about","of","is","you","of"],"you think?":["I'm"],"you thinking":["of"],"you thought":["of","about"],"you thoughts":["about","about"],"you throw":["at"],"you to":["specify","add","decide","memoize","follow,","put","take","have","see","mess","remove","write","let","set"],"you tried":["them?","the"],"you try":["to","to","to","inverting"],"you trying":["to","to"],"you updating":["existing_robots?"],"you use":["it","pydoc.","an","spaces,","it,","`re.split()`","the","`re.findall`","search()","python","`collections.Counter`,","docstring","a","explicit","new","some","`message","a","(a)","the","hasbang?","explicit","alphagram","`str.join`","a","new","arbitrary","both","a","`__query`","`if`","separate","`if`"],"you use?":["Python"],"you used":["`.endswith()`","in","`str.endswith`,","`phrase_list`,","are","`.endswith()`","new-style","some","if","`strand`","python","the","re!"],"you using":["different","`re.split`","Python","`datetime.date`?"],"you very":["very","very","much."],"you want":["to","it.","to","is","to","to","your","the","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","the"],"you want,":["and"],"you want...":["but"],"you wanted":["everything","to"],"you went":["the","half","from","crazy"],"you were":["thinking?","thinking?","going","using","looking","saying","doing","using.","required"],"you when":["you're"],"you which":["language"],"you will":["initialize","be","see","get","use","also","return","notice"],"you wish":["to"],"you with":["an"],"you won't":["have","have","need","be","end","need","need"],"you would":["have","have","really","have","have","have","not","not","have","let","be","have:","typically","typically"],"you wouldn't":["need","need","need","strip","have"],"you write":["the","some","some"],"you wrote":["you"],"you yell":["at","at","at"],"you! I":["was"],"you! My":["solution"],"you'd be":["just"],"you'd better":["use"],"you'd end":["up"],"you'd except":["in"],"you'd get":["to"],"you'd happily":["translate"],"you'd have":["`is_aggressive`"],"you'd know":["immediately"],"you'd like":["to","to","the","to","to"],"you'd lose":["that"],"you'd need":["to"],"you'd never":["have"],"you'd typically":["want"],"you'd want":["to"],"you'd write":["a"],"you'll also":["need"],"you'll end":["up"],"you'll find":["you"],"you'll get":["at","exception"],"you'll have":["to","to"],"you'll just":["have"],"you'll need":["to"],"you'll see":["how"],"you're asking":["about"],"you're checking":["if"],"you're correct;":["`self`"],"you're correctly":["spotting"],"you're counting":["nucleotides"],"you're creating":["a","a","with"],"you're doing":["is","that,","it"],"you're ending":["up"],"you're facing.":["I"],"you're getting":["it!","at"],"you're giving":["a"],"you're going":["to","to","for","to","to"],"you're implementing":["`PhraseTest`"],"you're iterating":["over"],"you're just":["mapping","instantiating"],"you're looking":["for","for"],"you're making":["any"],"you're meant":["to"],"you're new":["to"],"you're no":["longer"],"you're not":["going","sure","using"],"you're on":["Python"],"you're only":["making"],"you're onto":["something"],"you're passing":["in"],"you're recommending":["that"],"you're removing":["the"],"you're returning":["from","from","on","for"],"you're right,":["doing"],"you're right.":["But"],"you're saying":["that","about","and"],"you're sorting":["and"],"you're suggesting":["that,"],"you're taking":["here,"],"you're talking":["about"],"you're telling":["it"],"you're testing":["for,","for."],"you're totally":["right."],"you're trying":["to","to"],"you're using":["Python","old-style","`string.translate`","`return`","python","python","Python","Python","Python","Python","Python","Python","new","new"],"you've already":["checked"],"you've broken":["out"],"you've convinced":["me"],"you've defined":["`get_words`"],"you've duplicated":["logic"],"you've explored":["a","a"],"you've given":["intent-revealing"],"you've got":["there","here","this"],"you've gotta":["write"],"you've learnt":["from"],"you've moved":["'T'"],"you've overridden":["the"],"you've separated":["the"],"you've submitted":["this"],"you've used":["a"],"you've written":["passes"],"you, I":["learned"],"you, as":["thanks"],"you. From":["my"],"you. I":["think","wasn't","mean"],"you. I've":["got"],"you. It":["should","looks"],"you. It's":["been"],"you. OTOH,":["I"],"you. Some":["regex"],"you. They":["are"],"you. Your":["comments"],"you? I'm":["guessing"],"you? With":["the"],"your \"if":["not"],"your \"predicate\"":["methods","methods"],"your 'not'":["suggestion."],"your (except":["I"],"your 3rd":["iteration"],"your Bob":["class","class"],"your Python":["shell","shell","shell.","code."],"your `IsSomething`":["functions"],"your `Phrase`":["class"],"your `_check*`":["methods:"],"your `_isyelling(text)`":["is"],"your `_isyelling`,":["to"],"your ``ANSWERS``":["constant."],"your `if`":["statements","statement"],"your `if`s.":["It"],"your `input[len(input)-1:]`":["could"],"your `is_quiet`":["check"],"your `is_shout()`,":["and"],"your `re.sub`":["altogether."],"your `silent`-function":["could"],"your `to_rna`":["method"],"your advice":["properly."],"your advices.":["I"],"your already":["excellent"],"your answer":["is"],"your application":["class"],"your attention":["to","to"],"your cache":["appropriatly"],"your call,":["I'm"],"your checks":["into"],"your choice":["or"],"your class":["inherit","inherit","inherit","inherit","inherit","has","inherit","initialization,","write","as"],"your class.":["In"],"your classes":["inherit","inherit","inherit","inherit","from","from","from","from","from","from","from","from","from"],"your code":["is","to","for","looks","is","doesn't","needs","to","but","if","can","in","if","if","is","will","work","here","will","break.","being","you","is","won't","actually","would","will","and","easier.","more","from","greatly.","with","is","so","?","looks","there.","even","even","is","more"],"your code,":["although","so","it's","I","just"],"your code.":["Your","Didn't","The","Didn't","There","Why","Readability"],"your code?":["Would"],"your comment":["but","about","-"],"your comment,":["which"],"your comments":[":)"],"your comments,":["it"],"your conditional":["statement,","is"],"your conditionals":["into"],"your conditions":["here.","\"blank"],"your constructor":["to"],"your current":["implementation,"],"your decomposition":["as"],"your default":["encoding"],"your design,":["but"],"your discretion":["--"],"your docstrings,":["please"],"your domain":["here."],"your exercises.":["It's"],"your exercism":["gem,"],"your explanations,":["@noemy"],"your facts":["-"],"your feedback":["on","and","is",":)","on"],"your feedback,":["I"],"your feedback.":["I've","To"],"your final":["return,"],"your first":["question.","version","implementation","version","option","test,","iteration,","iterations.","try"],"your for":["my"],"your function":["definitions"],"your function.":["This"],"your functions":["for","are","and"],"your goal":["to"],"your good":["comments"],"your help,":["much"],"your helper":["methods","methods"],"your helpful":["feedback!"],"your hints,":["i"],"your identity":["test"],"your if":["statements","clauses"],"your if-else":["statements","statements"],"your if/elif/else":["statements"],"your implementation,":["do"],"your improvements":["in"],"your initializer":["is"],"your initializer.":["Ask","This"],"your input":["data"],"your input.":["I'll"],"your instance":["attributes"],"your intent":["here?"],"your intent,":["but"],"your is_*":["methods"],"your is_exclamatory":["method"],"your issues":["with"],"your javascript":["solution,"],"your last":["try-except-else"],"your logic":["on","in","is"],"your memoizer":["decorator"],"your method":["argument"],"your method,":["even"],"your method.":["It"],"your methods":["are","actually","(except"],"your mind":["(it"],"your namespace.":["That"],"your naming":["convention?"],"your newer-named":["class,"],"your nitpick":["I've"],"your normalization":["(and"],"your normalization.":["Also,"],"your opinion":["on"],"your opinion,":["what"],"your original":["way","implementation"],"your other":["functions."],"your own.":["The"],"your point":["on","on","here."],"your point,":["even","but"],"your point.":[":)"],"your points,":["but"],"your predicate":["functions"],"your predicates":["accept","expect","(and","by","might"],"your predicates,":["and"],"your preference":["for"],"your previous":["version,","comment","versions"],"your problem":["with"],"your program":["works"],"your python":["shell","shell"],"your reaction":["list."],"your readers":["to"],"your reasoning":["for"],"your regex-based":["approach"],"your regexes.":["For"],"your regular":["expressions,"],"your responses":["are"],"your return":["statement"],"your reviewers,":["because"],"your reviewers.":["This"],"your routine":["(msg"],"your routine.":["Better"],"your second":["return"],"your self":["more"],"your self-nitpick,":["that"],"your sequence's":["length"],"your solution":["is","is","is"],"your solution!":["You"],"your solution.":["Is"],"your solution:":["it"],"your solutions":["to"],"your string":["may"],"your submission":["only"],"your submissions":["been"],"your suggestion":["in","very"],"your suggestions":["into","@georgette."],"your testing":["for"],"your tests":["in"],"your text":["is"],"your thought":["process","about"],"your thoughts":["nonetheless"],"your ticket,":["and"],"your top-level":["method,"],"your transfer":["represents."],"your two":["other"],"your type":["check"],"your use":["of","of","of"],"your variables":["nouns"],"your very":["own"],"your viewpoint":["on"],"your way":["of"],"your work,":["now"],"yours extend":["the"],"yours hands!":["thanks"],"yours is":["that"],"yourself to":["make"],"yourself with":["the"],"yourself: why":["do"],"yyy` (readability":["counts)."],"yyy` is":["usually"],"zen #11":[":"],"zen :":["\"Readability"],"zen like.":["It's"],"zen of":["python","Python.","python"],"zero evaluates":["to"],"zero you'll":["get"],"zeros all":["have"],"zoldar using":["collections.Counter"],"zoldar? (I":["may"],"zone with":["Python"],"{\"James\", \"Blair\",":["\"Paul\"}},","\"Paul\"}},","\"Paul\"}},","\"Paul\"}},"],"{'': 1,":["'java':"],"{grade: tuple(names)":["for"],"{n: self.count(n)":["for"],"{nucleotide: self.count(nucleotide)":["for"],"{}` with":["`wordcounter"],"| with":["the"],"– I've":["reviewed"],"– do":["you"],"– for":["private,"],"– it":["could"],"– so":["that's"],"– uracil":["is"],"— in":["most"],"— not":["to"],"“because it":["means"],"“conditional script”":["stanza?"],"…which might":["also"]},"prefix_len":2}