{"Data":{" ":["Very","Good","Looks","Very","Nice!","Coming","I","The","Haha,","Nice,","Neat!","If","Nice!","I","I'm","This","Awesome!","Check","Character","I","I","Right","Dude,","No","Very","Nice!","Love","How","Yeah,","Perfect","Good","Are","Ah,","Nice!","You","Hrm,","Are","2","Might","Is","I've","Maybe","You","Thanks,","I","-","-","Good","Could","It","I","This","Maybe","Nice!","Check","Very","I","Thanks","`Enum.filter`","This","Nice,","*","*","Nice,","You","Also,","Nice,","You","Also,","Does","sentence","???","This","Oh,","Consider","At","Very","I","Nice!","I","Have","Well","You","I","Good","I","Would","Thanks!","Interesting...","Good","Isn't","Nice!","I","What","Would","Great","Oooh,","Awesome.","Neat!","*","*","Will","Ok,","You","I","Nice","Is","duh","my","flexible","i'm","I'm","Cool","I","Yeah,","Looks","Thanks!","Wonderful!","Try","Great","It's","Great","I","Nice","yeah","tnx,","Could","Nice","Your're","Great","Good","*that*","Is","I","Do","Looks","Hmm,","Um,","That","=","It","The","This","Now","Done..","Nice!","I","I","I","You","If","Fixed.","Good","Thanks!","Perfect","Perfect","Interesting","Love","Nice!!!","This","I","Oh,","Looks","Nice!","*","*","Looks","Oh","Good","You're","`def","Thanks","Once","Couldn't","I","Does","This","Nice!","Is","Also","Very","Is","I","I","Ooh,","Got","You","```","defp","...","end","defp","...","end","```","\"Why","Because","To","I","Check","Good","While","Do","I","I","Something","I","Readability","I'll","Elixir","Thanks","Sure,","However","Nice!","If","Well","Thanks!","I","Nice!","Couldn't","Well","As","Great","You've","It's","Goodluck!","Well","Great","Good","You're","The","Good","Nice,","Easier","One","Nope","Any","Nicely","I","Nice!","I","Very","Do","Sorry,","From","Ok,","Thank","This","Another","The","\u003ccode\u003eis_forceful?\u003c/code\u003e","Much","Check","Do","Thanks","Thanks","Was","i","Probably","Good","Fair","I","Minor","\"The","gotcha!","You","good","Do","Also,","Good","Imagine","Good","Is","Maybe","Looks","When","Look","Also,","Why","Pretty","Great","Can","Hi","Would","Do","Great,","I","Let's","I","Good","Hi","Nice","Do","Could","Did","Also,","Thanks","I","Regarding","Clever,Thanks","Btw","One","else","and","Hey","1)","2)","Sweet!","Awesome!","This","I","Sorry,","The","At","concise","I","Yep,","Which","The","You","Have","Good","While","If","You","Good","Is","Thank","Do","Example:","Btw.","Thank","Thanks","Since","Nice","Is","This","One","Also,","Good","Love","Now,","While","I","Thanks","I","I","Looks","Might","\u003ccode\u003eDict.update(...)","Looks","Check","I","I","Nice","Perhaps","Additionally,","By","I","Looks","The","Do","Nice!","I","Could","Thanks","You","bah","Thanks","I","Thanks","Lines","What","1.","2.","3.","Much","Doctests","In","Was","Check","I","The","I","This","Really","It","Good","Is","I","My","ooh","Submitted","Great.","```","@anabel","blah","##","Responds","iex\u003e","\"Sure.","\"\"\"","```","But","Appreciated!","Would","Nice!","do","I","I","Basically","```","def","def","```","So","I","If","Looks","Nice,","Great","Is","Could","Could","In","Cool,","This","It","I","Nice!","A","Nice!","Using","`Enum.filter","You","The","Looks","IMO","Interesting,","Thanks,","Good","Haha","Great!","You've","Definitely","Thanks!","Just","Awesome!","Thanks!","This","Indeed.","I'd","I'll","I","I","I","Also,","Excellent!","Ok,","Ok,","Thanks","Looks","`Dict.update(scores,",":)","Thanks","you","That's","Good","I","Thanks","See","Great!","You","Good","Well","Why","Fixed","Ah,","Yes,","You","I'll","Very","Ha","Please","just","I","Nice","How","Thanks","And","`build_dictionary`,","I","You","Nice!","Oh","Oh","PS,","How","Thanks,","Looks","Good","Hmm,","Well","Have","Done!","I","Would","Reusable","This","Great!","Great!","First","Very","ahah","Also,","Nice","Thanks.","\\m/","Thanks","Nothing","Out","Ah.","I'm","`msg","That's","It's","OK,",":O","Oops,","I'm","*","*","I","Sure.","That","Have","*","Great","we","sorry,","I","I","Have","might","Also","Have","Can","Is","You","s/this/this","I'd","Good","Have","Very","Yeah","Just","Or","Do","I","Trying","What","Ok","Yup","Nice!","Have","Well","There's","Ah","Looks","thanks!","So...","bump...","That","Thank","Seriously,","Agreed,","I","I","Nice","I","I","I","and","new","I","By","That","What","Looks","Yeah,","Would","I","Looking","Not","Ah,","Tried","Very","I","Beautiful!","Oh,","I'm","It","Good","Do","The","Good","Great","That's","That","Hi","Would","Well","Love","Great!","Just","I","Perfect!","What","Thanks!","Nice!","Have","Aha,","Oh,","Awesome!","I","Hi","Did","Huh.","I'm","For","Consider","```elixir","cond","empty?","shouting?","question?","true","end","```","Actually,","Let's","```elixir","def","def","def","def","```","Certainly","I","```elixir","def","def","def","```","but","```elixir","def","def","def","```","Big","Sorry,","I","Hehe,","I","MOTHER","I","http://exercism.io/submissions/52017503f42c6ad670000480","Thanks","You","def","Yes,","I'd","Ah,","Great!","Going","Did","How","On","```elixir","Enum.reduce","```","might","Yea","or","def","something","…","end","But","I","Generally","Great","I","```elixir","true","false","```","construct,","Re:","Have","Looks","I","Did","I'd","You","This","The","With","Hey","You","Another","Nowhere.","The","I","But","```elixir","def","possible_anagrams","end","```","\u003e","Where","I've","Your","Yea","Great!!","One","Great","But","And","That's","Consider","I","Why","Same","fire","```","iex(1)\u003e","**",":erl_eval.expr/3","iex(1)\u003e","nil","```","I","However","Line","Now","Just","like","defp","true","end","defp","\"\"","end","To","I","This","of","Looks","I","If","I've","I","```elixir","sentence","```","Just","I","You","By","Cool,","Looks","Sorry,","I","Nice","\u003e","Less","\u003e","Because,","You","Why","That's","But","I","About","`to_words`","What","`_empty?(nil)`","Moreover,","```elixir","def","def","```","What","This","I","I","Overall,","I","I","I","As","The","I","That's","You","@trisha's","Ah","Well","I'd","-","-","-","Hi","Did","This","I","Sorry,","Well","Have","Also,","Have","My","Yeah,","See:","Hi","Have","You","Wow.","For","Since","The","That's","It's","Yes,","One","This","Oops,","right,","Thanks","Also","I","```elixir","defp","```","Neat!","Do","I","I'm","In","The","```elixir","defp","defp","```","Doh,","Good","Hi","Another","Love","Hi","Would","Should","Given","Thanks!","What","```","str","```","Or","```","String.downcase(str)","```","This","1)","2)","pattern","Here's","```","def","[]","end","def","....","end","```","You","It","Have","Sadly,","Thanks.","There","Great","Could","I","https://groups.google.com/forum/#!msg/elixir-lang-talk/ndmhWFlVczo/EcMPQGNG-wQJ","I","Let's","I","By","The","That's","But","\u003e","Ok,","Cool,","I","Now","Also,","Have","What","I","Have","The","I'm","I","I","I","The","No","I","Do","Great!","What","```elixir","msg","```","That","How","```elixir","defp","msg","end","```","That's","I'll","I've","I'm","This","If","If","This","Good","Good","Yes","You're","Nice!","You","Also","Great","Could","Similar","So","Sorry","There's","The","As","Again","phrase","My","The","In","I","My","I","P.S.","You","Cool.","*","*","Looks","Thanks.","I'll","No","There","Hmm,","Great","I","Also,","Definitively","I","There","Also,","Thank","@carlee:","Naming","Alas,","You","Just","I","For","That's","Expanding","Also,","Doh","```hey(\"\")```","Looks","Very","Nice,","It","I","This","cond","I","Looks","*","*","Well","*","*","*","*","Wouldn't","It'd","There's","Naming","I'd","I'm","Well","*","*","*","Well","Have","Also,","Good","The","As","My","I","Also,","This","That's","private","Thanks!","I","Good.","Looks","Also,","Tried","Right,","```","iex\u003e","[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"]","```","I","I'm","Scan","Regex.scan(%r/\\d/,","This","Cool.","Might","Why","This","Aha,","My","True,","Let","The","But","Nice,","thanks,","Nice","Now","I'm","Nice,","I","Hi,","I","Overall","While","But","Surely","You","Well,","Nice!","One","Check","Cool.","Surely","(At","Is","I","The","About","Just","I'm","So","Hi","Looking","Your","Would","Looks","I","I","Looks","Looks","Very","Hope","Julien:","I","Along","My","Given","Well,","Interesting!","I","I'm","Elixir","is_question","is_shouting","On","I","Forced","Good","3.","2.","4.","1.","I","I'll","Excellent!","I","I","I","Let's","1.","2.","3.","4.","Great","Yup","Hi","It","This","I","Can","message.ends_with?(\"?\")","Since","That's","Looking","respond_to","Also,","respond_to","You","Nice.","Great!","Nice!","Do","Expounded","I","Having","I","For","And","Very","Hi","Would","Could","The","Example:","\u003ccode\u003e","def","def","def","\u003c/code\u003e","Just","@florencio,","Have","Also","In","You","```","iex\u003e","HashDict.new","```","About","About","Looking","Any","Do","Haha,","There","Nice!","You","I","I","Nice,","Nice,","Also,","While","I","Did","\u003ccode\u003edef","\u003ccode\u003edef","Cool,","Also,","\u003ccode\u003edef","\u003ccode\u003edef","Then","That","Thanks,","Agreed,","Will","Still","The","Great","Not","Very","Does","Also","Thank","I","And","Looks","My","No","What","Oh,","Ah","Looks","That's","The","is_something","Yeah,","If","I","I","That's","Nil","Sounds","Cool!","Nice","For","Reimplemented","Thanks","Another","Thanks,","Don't","I","I","Great!","Oh,","Look","_(","Good","I'd","Very","I'm","It's","I","Good","Thanks,","Check","Ah,","Ah","Ok","I","Haha,","Look","Oh","Thank","Nice!","That's","That's","Sorry,","I","Thanks","I","ah,","Looks","Seems","The","You","Goot","I","Ignore","...for","^","I","Ah,","Looks","Good","Looks","Checkout","How","Trying","Sorry","Functional","Thanks,","If","I","I","If","Good","Ah","Agreed!","Nice!","Did","I","You","Nice","Great","You","Awesome.","Awesome!","I","Thanks","Looks","Thanks,","Thanks!","Good","Updated","This","Did","Ok","Nice!","Sorry","Thanks!","Thanks","What's","Really","I","Ignore","Looks","I","http://exercism.io/submissions/520264412e0a71dcb50002e2","Is","I","I'm","Following","&amp;1","is","fn(v1,","Does","Hi,","```elixir","Enum.filter","is_anagram?(word,","end","```","Turns","```elixir","Enum.filter","```","It's","For","I","I","In","I","I'm","I","It's","If","What","Hi","I","Secondly,","Elixir","It","np,","Ah,","Tests","```bash","$","Erlang","Elixir","```","Interesting,","When","I'm","I'm","```","Before","[submission","[submission","List.flatten","I","In","Is","I","Merging","Does","Is","Your","Stylistic","Thanks","I","1)","2)","Thanks","I'm","Are","The","```elixir","def","do_map(list,","end","def","...","end","```","I","Conventionally","Without","However,","Here's","```","defmodule","@stanley","def","def","sequence","end","def","@stanley","end","defp","Regex.replace(%r/[^#{nucleotide}]/,","end","end","```","Have","Can","Wow,","One","I","The","There's","@royce:","This","I","I","You","Looks","It's","Not","In","The","Have","Checking","Everything","Do","Other","Hey!","Just","My","Quick","```elixir","defp","```","can","```elixir","defp","```","The","The","Very","Yeah,","I","Well,","I","https://github.com/kytrinyx/exercism.io/commit/4f5c26f204dec40a034a8796eb1ad52c8409861c#commitcomment-3835719","You're","I","It","I","Your","&gt;","My","First","The","As","I'm","I","One","Using","Your","If","Thanks","I","I","I","The","Does","You","Thanks,","I","Have","Within","For","It","I","Thanks","Just","Will","The","I","I'm","Wouldn't","`Regex.run`","If","I'm","Haha,","Thanks.","A","Nice","The","-","-","-","You","Looks","I","I'm","I","Thank","I","I've","The","Also,","Yeah","I","Looking","I'd","For","For","/me","Oh,","```elixir","defmodule","def","anagrams","end","defp","sort(word1)","end","defp","word","|&gt;","end","end","```","I","Thanks.","I","```elixir","iex&gt;","\"one","iex&gt;","[[\"one\"],","```","I've","Nice!","Thanks!","You","wrightling","Getting","1.","2.","Looks","Why","`defp","Nice","*","*","Will","Yeah,","1.","```elixir","sorted_word","anagrams","```","2.","Similar","Hey,","in","Is","String.codepoints","So","Why","I","The","I'm","Agreed","Hi","1.","2.","Nice","1.","2.","Hi","1.","2.","Oh,","You","But","Is","I","test","assert","end","Say","I","I","I","Nice!","Agreed,","Hi","No,","It","I","Is","I'm","What","Looks","I","That's","As","In","Yes,","Would","I","I","I","FWIW,","Not","I","I","This","Compare","I","I'd","+1","A","1)","2)","It","In","Have","I","I'm","No.","I","This","@marisol","Any","There's","I","```elixir","String.first(String.strip(content))","```","reads","```elixir","Regex.match?(%r/^\\s*$/,","```","Maybe","The","```elixir","def","value","end","test(1)","test()","test(nil)","```","I","*","*","Looks","I","*","*","They're","@travon,","I","Looks","Excellent","This","Looking","*","Yeah","Is","Good","Yes.","You","```","defmodule","import","...","```","I","```elixir","defmodule","import","...","```","Thank","It","Looks","*","*","*","Ok","See,","Nice!","The","I","You","```","iex(25)\u003e","```","```","[208,","```","this","in","```","16\u003e","```","```","[1076,1072,32,1085,1077,1090]","```","this","or,","```","iex(27)\u003e","```","```","[1076,","```","but","You","This","Is","There","Strictly","Nice!","Minor","I","Also,","The","Finally,","Would","I","Would","Super-picky,","I","I","I","Would","I","I","Maybe","Hmmm","Due","Thanks!","Awesome,","This","Did","Getting","Nice","To","I","This","This","Also,","Have","Thanks,","Hey,","Clever","The","The","One","I","Also,","Funny","```","if","upcase(speech)","else","false","end","```","can","This","This","While","Small","even","Have","I","Anyways,","Not","Hey","Thanks","I've","Great!","I","It","I","When","When","Thank","Wow,","Thanks!","Implemented","Any","@isac","I","yep,","This","Looks","Thanks!","Thanks","Thanks","I've","Quite","No","Love","This","Please","Yes","Totally","This","Also,","Great","the","There","Cool,","uploaded","Thanks","I","Yeah,","I","That","Neat!","Nice","Not","Very","Though,","Yeah,","Thanks","Okay,","Oeps","I","Ok","I","Would","It","Nice!","Couldn't","Appreciate","This","Oops,","Thanks","Fair","Oh,","Maybe","Looks","What","You","Much","Hmm,","Would","This","Ah","Submitted","Looks","Have","The","Unless","Aha,","You're","List.concat","Looks","Ah","Thanks,","I","Probably","Empty","Other","Yes,","My","Perhaps","Like","What","There's","Are","Elixir","Thank","&gt;","4","I","I","(Looking","Some","Did","This","Same","There's","If","I'm","Yeah,","Not","Is","Neat!","Much","In","Helper","@howard","Heh,","Thanks!","Wouldn't","I","Thanks","A","Seeing","Also,","`List.concat`","There","```","defp","```","The","catching","Should","Line","@ernestina","I'm","Good","Thoughts:","Should","Is","`shouty?`","I'm","You","`reticent?`","Elixir","To","Simplified","The","Ah.","```","|&gt;","```","...","```","**","```","Help?","Right","I","I","Looks","Would","Something","There","Using","I've","I'm","I","Yup,","Can","You","You","I'm","```elixir","defmodule","def","def","def","bottles_left","first_part_of_verse(bottles)","Take","\"\"\"","end","def","verses","verses","end","defp","\"#{bottles}","end","defp","defp","end","```","I'm","Generally,","```elixir","defp","defp","#","end","```","Also,","Fair","Nice","```","```","```","If","This","Also,","This","This","I","Very","Is","I","The","I","Do","Just","You","I","I'd","I","I","I","`List.concat`","That","```","word","|&gt;","|&gt;","```","Subsequently","Ha","Thanks","Maybe","Yeah...","I","Maybe","Why","I","Semantically","List.concat","Can","&amp;(sorted_base_letters","I'll","You","I","Nice,","Here's","I","This","For","So,","Ah,","I","Is","Also,","Could","Nice","This","I","Elixir","Thanks","I","You","You","Ah","I'd","Edit:","OK,","I","I","First","I","What","Thanks!","Thanks","I","I've","Not","Nice","I","I","Better","Do","What","@jan:","Do","Yeah,","So","I","```","[[\"car\"],","```","Without","I","I","Do","How","Renamed","Ah,","I'm","Please","You","This","Thanks","@lukas-w","All","Thanks","Ah,","You","Just","Otherwise,","I","Applied","Oops.","Indeed!","`@jerad`","On","I","Check","Can","It","Submitted","Boom.","Could","What","I","IMO,",":thumbsup:","I","I","@mattie","@mattie","Iteration","It","How","Appreciated,","/me","Yup,","Thank","Ah,","Is","Hrmm.","That's","Why","It's","That's","Very","From","Ah,","I'll","Thanks","I'm","`Enum.reduce(words,","Where","As","I","Ah,","Yeah,","Thanks","Nice","As","`Enum.filter(candidates,","but","Any","This","Couple","*","*","A","More","Still","Hah,","Now,","Looks","Is","What","I","I","I","That","After","Init","\u003cpre\u003eHasDict.new([])\u003c/pre\u003e","And","\u003cpre\u003e\u003ccode\u003e","#when","defp","dict","end","defp","#code","end","\u003c/code\u003e\u003c/pre\u003e","The","I","I","Hmm,","I'll","For","You","Thanks","Yeah!","```elixir","defmodule","def","String.downcase(word)","end","def","Enum.reject(list,","|&gt;","end","end","```","Ah,","OK,","Just","There's","It","You've","I","Thanks","A","I","I","`bottle_phrase`","That's","It's","I'd","Coding","Pulling","The","Now","What","Other","I","The","`not_same_word?`","Without","I","Overall,","I","Having","In","The","The","It","But","Top-notch","You","Do","I","I","Maybe","Consider","Your","How","From","The","The","I","Nice","I","It","Your","The","This","I","I","I","I","How","I","The","Thank","About","```","**","stacktrace:","/Users/kimhyunkang/usr/src/elixir/lib/elixir/lib/hash_dict.ex:123:","/Users/kimhyunkang/usr/src/elixir/lib/elixir/lib/list.ex:111:","word-count_test.exs:33:","```","I","I'm","@theodore","If","If","That's","Take","Also,","Generally,","```elixir","foo(bar)","```","becomes:","```elixir","foo(1),","```","Also,","From","Parens","Guards","Why","Would","Super","Great","I","I","Do","I","Ah,","Thanks!","Looks","I","(is_silence?(sentence)","||","||","||","This","I'm","I","is_silence?","And","Come","Awesome","You","```","iex&gt;","\"Whatever.\"","```","I","check","What","`String.strip(msg)","just","What","Building","There's","to_list","And","I","Nice","One","```","I'm","Also,","```dict","I'm","It's","Incorporated","Also","Still","Could","That'd","I","Thanks.","Big","What","You","It","```","defp","```","Additionally,","That's","The","`'A'`","Why","Just","Just","You","Even","```Regex.replace","Now","I","This","Also,","When","Thanks","Looks","Just","This","I","Thanks,","Good","It's","Really","\"\"","Thanks!","No,","And","\"\"","Actually,","two","1)","2)","Other","Look","For","&gt;","Tried","Are","A","Here's","```","Enum.map","```","can","```","Enum.map","```","Thanks","I","If","```elixir","defp","do_silence(sentence)","end","defp","defp","defp","defp","```","@seamus","Good","I'm","I","I","Not","Actually,","`...","Aha,","Inexperience","to_char_list","I","As","I","Another","this","One","You","There","I","empty?","Interesting,","Good","Consider","You're","The","Also,","I","Mainly","Please","The","`List.flatten(Regex.scan(%r/[^","is","`String.split(string)`","When","One","Nice","If","I","Are","(You","In","This","It","Looks","What's","It","Ah,","Moved","I","Is","Thanks","`defp","Good","Very","I'm","In","Pushing","I","@amira",":)","I","It's","You","```","fn(candidate)","```","can","```","is_anagram(word,","```","Also,","This","One","This","I","Would","That's","If","I","Looks","-","-","-","Can","Not","I'm","Brand","Ignore","Ignore","Correct.","Very","I","Also,","|&gt;","http://elixir-lang.org/docs/stable/Kernel.html#|&gt;/2","You","Alright,","I","Thanks","Your","_Two","-","-","This","defp","You","So,","Your","The","defp","These","Thanks","Indeed.","On","You","Also,","Good","I'm","Great","```elixir","%r/\\A\\s*\\z/","```","Yes,","@marilyne,","`Regex.scan`","I","I","I","However,","There","Consider","I","I'm","Although","I","There","I'm","Not","Ideas","Do","@therese","I","Hey,","I","I","Great","Oh","After","Thanks","When","Nice!","In","Also,","After","I","Looks","```elixir","fn","{_a,","{_a,","end","```","`Enum.zip`","It's","Ok","Code","This","-","-","-","-","-","If","Looks","You","Another","This","I","You","There's","As","Enum.zip","Enum.count","Oops,","I","-","-","-","-","-","It","Cleaned","That","I","John,","I","Yep,","What","Also,","Personally,","I","Good","Yeah,","Having","This","@kendall:","@kendall:","Thnx","In","```elixir","def","clean(words)","|&gt;","|&gt;","|&gt;","|&gt;","end","```","Nice","InputCategory","silence?","`s`","I","I","Yep,","One","Edit:","Nice","If","I","```elixir","def","```","could","```elixir","def","```","It","Good","Wouldn't","You","And","Much","Yes","What","Cool,",":math.pow/2","Also:","I","Hey","I'm","Good","Can","I","Should","Very","I","I","Elixir","ya","Oh,","p.s.","Good","Yes,","Thanks","Also","Thanks","But","I","True,","Also,","defp","Brilliant!","Thanks","Nice","A","Great","First","This","You","Hey","You're","Would","You","Otherwise","You","`defp","Also,","I'm","I","I","Okey","Conditionals","I","Thanks","This","Your","If","I","Very","Thanks","As","I'll","Not","Ahh,","Looks","I've","Right","I","defp","defp","That","Anyways,","You","You","You","You","\u003cpre\u003e","Regex.scan(%r/\\w+/g,","|&gt;","\u003c/pre\u003e","And","\u003cpre\u003e","defp","HashDict.update(dict,","end","\u003c/pre\u003e","I","I","compiler","```","text","```","```","**","```","Have","Thanks","I","This","I","Last,","Looks","Looks","You","```elixir","def","greeting","end","def","(greeting","end","```","edit","Hey","So,","Thanks","This","The","Also","This","This","This","Using","The","Hey,","Looks","First","When","While","Thanks","I","Thanks","This","`Regex.scan(...)","Thanks,","*","*","*","Here's","```","Enum.filter(candidates,","```","Long","Have","Granted,","Submitted","I","The","That","Thanks","Well","*","*","*","I","This","Previous","In","Nice","IMHO","But","Seems","Also,","Great","I","You","Notice","Good","Thanks.","Ugh,","Very","okay.","I'm","Thanks","All","@haleigh,","Why","defp","What","My","A","You","Check","Are","Normalize","Ergh,","This","Nice","Phew,","One","It's","sooo","Much","love","I","I'm","I","Variables","Interesting","For","Consider","https://github.com/kytrinyx/exercism.io/blob/master/assignments/shared/bob.md","You","You","Looks","Thanks","Hi,","I","Great","```clean_string","On","```Regex.scan(%r/\\w/,","As","```","I'm","Ok...","On","Also,","Could","Other","You","You","But","Thanks","I'll","Brilliant!","For","Not","@johnson","Looks","I'm","Hey","The","Also,","The","In","I","Sorry","def","def","def","`Enum.map_join/3`","I'm","You","\u003cpre\u003e","Enum.map_join(from..to,","\u003c/pre\u003e","This","Thanks","The","Thanks","The","Also","You","If","You","I","defp","Much","I","clean_list","+1","You","you","\u003cpre\u003e","List.foldl(list(words),","\u003c/pre\u003e","Changing","Good","It","@makayla","Also","Please","You","\\w","For","Also,","Thanks","Looks","My","It's","Is","\u003cpre\u003e","Enum.filter(","|&gt;","\u003c/pre\u003e","And","Gotcha...","Always","@terrence","Yes,","This","Right","Thanks","I","This","@gail","@gail","Could","Apart","Sorry","For","```","def","```","Other","What","Hi.","*","*","Thanks!","One","But","Good","IMHO","Is","You","That","@brisa","```elixir","@brisa","My","##","iex&gt;","\"rab\"","\"\"\"","```","@wyatt","Looks","You","```elixir","defp","```","Yeah,","I","+1","For","I","However,","```elixir","HashDict.update(hash,","```","I'm","Thanks","I'll","Could","Also","Nice","@marion","Thanks","@roxanne","I","Personally,","It","This","Hi","Thanks","You","Also",":lists.sort","This","@sylvan,","@sylvan,","Yeah,","Next","Nice","You","Is","@candida,","Looks","Much","I","Try","Yeah,","Looks","Instead","I","Only","For","```","defp","```","Other","That's","My","Other","Thanks","An","Instead","Thanks","Good","Whitespace","Thanks","Thanks","String","Consider","the","Consider","You","@rose,","```","iex(1)\u003e","iex(2)\u003e","[\"car\",","```","As","You","I've","I","@chelsey","On","Ok,","1.","2.","Looks","One","For","I'm","You","I","Thanks","Very","You","Is","*","*","*","*","```&```","That","If","```elixir","def","num","end","```","you","```elixir","HashDict.update(counter,","```","I","I","Nice.","Anyway,","This","Yep","Thanks","A","Thanks","It","I","`:lists.append`","You","You","Ok","That","(I","You","Sorry","I'm","That","There's","def","Try","Try","In","Try","Try","Ok","Thanks","Good","List.zip","I","Was","I","Not","I","My","Ah,","I","What","seejee","Thanks","Yup,","Ah,","`Enum.count(List.zip([as,","I","Ah,","New","I","By","I'm","I","Nice","No","Not","I'd","Aside","No","def","potential_anagrams","|\u003e","|\u003e","end","Sorry","def","potential_anagrams","|\u003e","|\u003e","end","you","defp","word_a","end","@lou,","Hadn't","Added","`&(not_same?/1)`","This","I","That","I'd","You're","Pretty","Sounds","I'd","e.g:","```elixir","def","phrase","words_in","Enum.reduce(HashDict.new...)","end","```","`HashDict.update/4`","You","Also,","Aside","Thanks","One","@damion","At","@bernadette","It","The","This","I","For","If","Very","Check","I'll","Thanks","Nice!!","defp","First","at","Try","https://en.wikipedia.org/wiki/Tail_call","http://stackoverflow.com/questions/310974/what-is-tail-call-optimization","In","text","The","@keyshawn","You","Although","Also","1.","2.","3.","I'm","Be","Also,","You're","Looks","BUT.","So","Ah,","EDIT:","It's","Sorting","It","Thank","\"Idiomatic\"","I","Hmm..","Thanks","Instead","It's","I","Why","The","As","They","The","`cond`","@francesco","It","I'm","Ok","This","As","The","You","It's","I'm","As","@bennie","I","Also,","There's","Interestingly","Have","With","Sometimes","So","def","phrase","end","...and","Do","Yo","Thanks","Well","Looking","As","The","In","Your","Have","You","@krystel","While","I","`''`","`String.strip(callout)","Thanks","Realized","Looks","You","@kayli","Yeah,","@kailyn","Passes","For","It","Ta,","`Enum.zip`","Your","Thanks","Thank","My","Why","Should","Shouldn't","I'd","Ok","Doh!","Thanks","Ah,","There","@allen","Have","Also,","@dolores","The","Well,","@lorenz","It's","Also","You're","Have","Just","`Dict.get`","`Enum.first/1`","I","I","Why","@chesley","True","this","-","-","(Edit:","`String.codepoints`","I'd","Hey","While","Concerning","Using","Your","Also,","You're","A","I'm","What","There's","Why","These","Hey","Are","Yeah,","No","Ah,","@oma","The","A","The","@dylan","I","@karli","Re:","If","I'm","Well","```elixir","@velva","@velva","Return","\"\"\"","@velva","def","Enum.reduce(dna,","Dict.update(counts,","end)","end","```","That","You","The","If","For","Heh,","I'd","@obie","I'd","I","This","Ugh...","I","Thanks","Do","Other","Note","@myrtle","@maximillia","@maximillia","\u003c\u003c","@susanna","Also,","Your","This","Use","You'll","Thanks","One","Again,","@mckayla:","Thanks","Well","Odds","[This](http://elixir-lang.org/docs/master/Kernel.SpecialForms.html#%3C%3C%3E%3E/1)","@brando","`one_or_it`","```elixir","defp","defp","```","In","@loyce","Thanks","As","\"DO","I'll","`String.last(text)","Gotcha.","Looks","Thanks","I","Much","Have","Looks","@herminia","You're","Regexes","Have","It´s","*","*","*","*","@cayla","Thanks","Why","You","I","Thanks","@providenci,","@providenci,","As","I'm","So,","In","@nathanial","A","The","I","Looks","One","The","Otherwise,","Thanks,","When","The","https://github.com/elixir-lang/elixir/blob/6a770579105f7b58877ac1a0e0b039513a8e85fc/lib/elixir/lib/kernel.ex#L3027","I","Line","Pipelines","That","This","Updated","@camryn","Thanks,","I","I'm","Most","Secondly,","Also,","Stylistically","You","\"word\"","{","\"one","{","\"one","{","\"car","{\"car\",","\"testing,","{\"testing\",","\"go","{\"go\",","The","I","I","Thanks","`List.flatten/1`","`List.flatten/1`","`import`","You","A","Why","It's","`String.reverse(s)","Have","What","Why","1)","`x","Together,","`x","2)","I","You","https://github.com/gvaughn/elixir_kata/blob/master/roman/roman_numerals.exs#L11",":-)","I'm","Good","`List.zip`","The","Will","Are","`[[\"one\"],","I","I'm","Is","I'm","@zechariah","No","But","That's","You","There","Do","Not","You","I","Agreed.","Sometimes","Btw,","I","At","`String.length(...)","You","Why","As","The","Thanks","Check","Thanks","That","I","What","Take","Yup,","Interesting.","I","This","you","And","On","Why","A","*","*","*","Nothing","And","Thanks","I'm","No","update_word_count([word],","I've","Why?","`String.strip(phrase)","I'd","Also,","@caesar","Thanks","Thank","It's","Whereas","That's","@terry","Very","ELSE","What","If","I","`cond`","In","Yep,","but","Check","Very","In","Why","Why","My","Pulling","Oh,","@patsy","Regarding","@stanton","I","@lemuel","+1,","Not","Yup,","Maybe","I","This","I'm,","I","Tests","Actually","Thanks","I","But","You're","I'm","I'd","Ah,","Thanks","Thanks","I'm","One","I","Also,","Yes","Please","I","Sloppy,","Looks","You","Nice","The","I","Consider","For","I","I","I","Also","I","For","Good","Incorporated","Switched","Ok","Just","In","I","I","Good","Thanks!","It","I","I","`String.graphemes`","You","Stylistically","You","`sing`","I'd","There's","Why","`List.foldl`","It's","A","@meagan,",":-D","So,","Thanks","So","Thanks","I","Not","I","I","You","Otherwise","Pretty","I","```","def","...","o","...","```","In","HashDicts","It's","I","I","Thanks!","@charity","I","Also,","\"It's","That's","\"In","Nice.","Thanks","I","I","Regarding","I","Do","Ok,","Take","It's","Now","It","This","I","Yup,","Graphemes","You","Hé","I","On","Comme","Aussi,","Je","You","Thanks,","And","Yep,","Despite","...maybe","This","I've","...to","I","I'm","Plus,","Any","To","```elixir","@trisha","bla","\"\"\"","```","Just","There","How","Oops","Thanks.","My","For","Importing","If","For","Have","Have","On","Importing","Have","This","@rosalia","You","```","String.at(s,","```","to","```","String.last(s)","```","I","Hi","Yup,","Anyway,","Thanks","I","Integrated","Most","Noticed","The","Conciseness","Thought","As","Why","I","While","```","def","```","(But","Thanks,","Instead","Yes,","Why","And","What","In","Will","Thanks,","The","@marjorie","@tatum","Just","I","Alternatively","Thanks,","Thanks","From","It's","This","The","Would","Do","Thanks","Will","Regarding","Yeah,","Btw,","Thanks","I'd","I","The","The","By","The","It","Interesting.","Thanks,","I'll","This","You","```elixir","fn","{","a","end","```","Some","\"Why","How","Be","p.s.","p.p.s.","Analyzing","At","`String.last(string)","I","`String.strip(string)","I","`String.upcase(string)","The","You","That","In","The","```","Enum.map_join","beer_counts(first,",")","```","But","Finally,","This","One","You","Can","What","Is","This","The","Good","Tip:","Gotcha.","Why","It's","It","I'm","@rudy","Re:","Re:","That's","Take","Did","It's","The","Your","My","Line","You","`@wava","To","@rosario,","I","I","One","It's","Parentheses","It's","Ah.","What","You","`u`","Regarding","Yes","I'd","With","Character","If","@rowena","Parentheses","```elixir","Enum.reduce","fn(x,hh)","...","end","```","Yes","`Enum.first","It","This","Thanks","IMHO","Nice","Only","I've","I","Thanks.","I'm","Even","@nathanael","I","```","prompt[/\\?$/]","```","instead","```","String.last(prompt)","```","ah,","I'm","Why","Personally,","You","```elixir","defmodule","@ibrahim","Calculate","\"\"\"","#","@ibrahim","@ibrahim","@ibrahim","@ibrahim","@ibrahim","@ibrahim","@ibrahim","@ibrahim","@ibrahim","@ibrahim","lc","def","do:","end","lc","lc","def","do:","end","end","lc","def","fifth_date","month,","if","fifth_date","else","unquote(binary_to_atom(\"fourth_#{dp}day\"))(month,","end","end","end","#","#","defp","#","#","d","d,",":calendar.day_of_the_week(year,","d","else","nil","end","_,","end)","if","end","end","```","That","Hmm,","I'm","Oh","Thanks","This","There","I'll","```elixir","defmodule","@greta","Calculate","\"\"\"","#","@greta","@greta","@greta","@greta","@greta","@greta","@greta","@greta","@greta","@greta","lc","def","do:","end","lc","lc","def","do:","end","end","lc","def","fifth_date","month,","if","fifth_date","else","unquote(binary_to_atom(\"fourth_#{dp}day\"))(month,","end","end","end","#","#","defp","#","#","d","d,",":calendar.day_of_the_week(year,","d","else","nil","end","_,","end)","if","end","end","```","Btw,","[EDIT:","Nice","It","`contains_char`","Consider","I","Well,","The","Ugh,","Your","I","Oh","That's","I","I","Just","I","Really,","Error","Moved","Ok","`&Kernel.!=/2`","@darrel","-","-","-","Cheers","For","You","Check","This","`String.ends_with(phrase,","That","Did","Overall","Can","Tip:","In","In","Writing","```elixir","defp","defp","```","Do","Err,","Just","Take","And","On","Also,","Ok","Having","Ooh,","I'm","Now","This","Why","`String.at(a,","Can","Did","Well,","Note","Or","I'd","Yes,","`\"(\\\\1)","`%r/(.{3})(.{3})(.{4})/`","I'd","For","```elixir","@joey","```","And","The","`|\u003e","`from`","I","Thanks","One","What","I've","It's","Mm,","@cyril","I've","Didn't","Off","Don´t","Well","I","Though","Why","The","```elixir","defmodule","def","matches","Enum.reduce(matches,","Dict.update(d,","end)","end","end","```","Should","That","Your","My","I","Thanks","To","Hum,","Figured","This","`Enum.reverse(:lists.seq(to,","`reduce`","Why","Yes,","While","Part","You","```elixir","def","do:","```","@rickey","As","Thank","This","I","I'm","Did","Now","I","Generally","Wow,","Well...","Remember","Also,","Thanks","I'm","First","I","I've","I","Great","@maegan","I'd","`&({&1,0})`","I","I","I","Also,","```","@price","```","Finally,","Are","For","It","Your","Only","Ha!","Browsing","I","I've","Mm,","I'd","I","You're","While","On","In","\u003e","~","I","Unfortunately,","```","comparisons","|\u003e","|\u003e","|\u003e","```","\u003e","Yeah,","I'd","Doing","They","Consider","Consider","I","@pedro","Well","You","You","The","Any","Isn't","Overall","I","I'd","Do","I","A","I","```","def","```","than","```","def","```","But","Good","I","I","Regarding","I","It's","Using","I","I'm","Anything","How","I","Did","I'd","Very","&[...]","Looks","Minor","I","About","I","Ideally","But","Using","It","Is","Fixed","The","I","The","Is","OK.","No,","There's","Another","I'm","I'm","Pushed","I","I","I","Nope,","That's","`String.last(s)","`String.length(s)","@mable","`String.graphemes`","To","Added","@michaela","`Regex.match?(%r/\\p{Lu}/,","@oswaldo","Optimizing","Notice","Check","I","Is","I","I","I","Much","A","Enum.filter(words,","But","No","Yeah,","I","Thanks","I","You","@kayli","And","def","There's","With","Looks","Beyond","I","Dang,","Good","Verse","The","Aha.","Ah,","But","Thanks","Few","There","In","I","You","Is","No,","Yup.","I","Thanks.","Personally","I","What","I","Nice","Haha!","I","The","I'll","That","Look","I","There's","You're","I'm","Functions","I've","Is","That","Thanks.","The","The","```elixir","def","map_values","Enum.sort(roster)","end","end","defp","Dict.merge","fun.(roster)","end","end","```","That","@renee","I","Minor","Good","I","With","verses","iolist_to_binary","@josiane","Giving","Initially","@beth","@selena","Take","You","You","I","Got","A","I","@natalia","@peyton","iex(2)\u003e","true","The","`Enum.map(...)","I'm","Thanks,","Is","```elixir","defp","acc","end","```","And","In","In","```elixir","Enum.reduce(split_lowercased_words,","HashDict.update(tally,","end)","```","I","`Enum.reduce`","Those","@tremayne","If","@cortez","Very","To","There's","The","Yikes.","Another","Ah,","I'm","This","I","Even","Or","Thanks","In","agreed.","@darion","bitstring_to_list,","Here's","```elixir","def","String.upcase(word)","|\u003e","|\u003e","c,","acc","_,","end)","end","scores","{8,","defp","unquote(Macro.escape(","(lc","|\u003e","|\u003e","|\u003e","))","end","```","Here's","```elixir","values","{","{","{","{","{","{","{","]","#","Enum.flat_map(values,","fn","Enum.map(chars,","defp","end)","end)","defp","def","String.upcase(word)","|\u003e","|\u003e","|\u003e","end","```","@devante","@sabrina","@juliana","I'd","Just","I'm","I","You","Ambitious","I","As","You","Quick","(And","I'd","`&({","`bitstring_to_list`","Can","@mandy","You","@miles","Sometimes,","It","The","I","`Enum.map","`Enum.map","`bitstring_to_list`","`@amelia[char]`","```elixir","anagram","```","And","What","A","You","In","I'm","Yeah,","Very","@melyssa","Regarding","Put","Good:","Good:","Bad:","The","@georgianna","Thanks","I'll","As","I'm","This","iex(1)\u003e","roman.exs:1:","==","**",":lists.keyfind(:import,","roman.exs:17:","Previous","I","Today","Tried","```elixir","Cell.add_enzyme(cell,","Cell.signal(cell,","RNAPolymerase.product(cell)","```","Maybe","Oh!","It","I've","Agreed.","@dax","@dax,","Ah,","Looks","Sometimes/often","```elixir","def","l","HashDict.new","do:","end","```","Only","Looks","This","I'd","Yup,","I'd","Module","You","@ernestine","It's","@constance","@constance","In","To","`HashDict.put(...,","Note","Hum,","Sure.","In","Fair","Agreed.","Did","I'm","I'd","Also,","It","What's","I","The","Of","Yeah,","If","@randal","Here's","`:math.pow`","There","Nice,","A","Kept","It","Perhaps","Oh","More","But","I","Could","Ah,","It","This","I","@abby","Thanks","@jewel","But","Now","It's","The","@greta","Straight","If","Personally,","Well,","Yup.","@delfina","For","Just","@cassie","defp","which","defp","...","end","defp","...","end","which","What's","Well,","I","@simone","It's","Does","Rather","I'm","Not","Oops,","Ok,","In","Take","`do_count`","Your","In","Your","@coleman,","No","```elixir","def","Enum.reduce(stop..start,","[verse(x),","end)","end","```","@tavares","Is","Using","Ok","The","Not","Thoughts","It","Passing","For","It's","Instead","I","Congratulations","Thanks.","I","So,","Is","Well","Well,","I","Renaming","`&([student|&1])`","Thanks","I","Thanks","Stop","Btw,","If","Ok","```","If","the","```","And","There","There","Odd","Things","I","```elixir","defp","defp","defp","```","Not","I","Gotcha.",":-D","OK.","There","Once","Oh,","`Stream.with_index","`elem(t,","Creating","Haha.","For","elem","It","José","Also","@stephon","Guards!","You're","If","I'm","On","This","This","I","That","Stream.concat","If","Woohoo,","I","Convention","All","I","The","`d==2","I've","OK.","No,","OK.","That's","I","`fn(count)","You","Style","Only","Replace","According","Ah,","Although...","Nope,","@emelia","@emelia","Precedence","I","Yup,","When","Nope,","You","Yep,","I","Went","It's","`&({","Ok,","Thanks!","I","Good","I","You're","Importing","I","This","Using","First","If","That","This","Just","When","Sorry","Ok...","@ebony","Also,","Hmmm...","Oh,","hahahah","I","Did","I","`&(&1","You","```elixir","defp","defp","```","(`rem`","You","I'd","@nadia","You","@liza","Maybe","@bette","I","This","Do","So,","Also,","```","defp","defp","```","If","Just","What","I","The","This","The","You","@theresia","On","Did","`find_answer`","It","I","Thanks","BTW,","This","`cond`","But","```","cond","allCaps(input)","empty(input)","...","end","```","Just","One","Wouldn't","`allergic_to`","If","It","`cond`","Awesome,","Aha.","Very","I","Ah,","@madaline","##","Keep","provided","Solve","Yup,","I","I","I'm","But","This","-","-","-","-","@abraham","I","https://github.com/elixir-lang/elixir","That's","In","Thanks.","I","Looks","Did","This","I","I","At","That's","The","Usually","`List.t`","Thanks","This","Well","@gene","Did","Gotcha.","I","A","The","I","My","@hillard",":-D","Well,","You","I","@hattie","Wanting","This","The","The","The","I","The","OK.","Object","The","That","@levi","Yeah,","I've","I","This","This","Your","*","*","*","*","The","I","Did","Nice.","One","Another","I","Looks","Your","I","@earlene","I","I'm","They","Also,","This","I'm","I","This","```elixir","def","Enum.reduce(coll,","end","```","Wouldn't","In","You","@keyshawn","@keyshawn","Run","I","My","Works","Please","I","Beautiful,","Very","Good","Thanks!","Looks","This","Erlang","I","Looks","I","Minor","A","Looks","I'm","Your","A","Thanks","It's","Enum.join(","I'm","Pretty","I","```","def","from","|\u003e","|\u003e","|\u003e","end","```","While","Just","Do","Your","You","For","@howard","I","It's","I'm","Why","Try","You","Here,","The","Agree","This","This","I","Anyway,","I","This","Elixir","In","Submitted","```elixir","defp","defp","```","etc.","Instead","```elixir","defp","``","Let's","```elixir","score_data","lc","defp","end","```","You","There's","You","Minor","Yeah,","You","This","@pearl","```elixir","defmodule","def","def","end","[","{","{","{","IO.puts(\"good","```","Thanks,","When","Can't","`calculate_score`","```elixir","defp","{","Enum.map(chars,","end","```","(No","I'd","I","To","Thanks","There's","Very","Wow.","The","Using","Now","This","Elixir's","What","What","Btw,","I","Trying","Also,","Thanks","I","By","I","I'm","Yes,","The","`Code.eval_quoted`","I'd","Don't","Nice.","This","I'm","Yup,","Could","Also,","`import","`{","About","I","Looks","Yup,","Looks","One","Looks","Thanks,","That's","And","Have","You're","I","Looks","Btw,","I'm","Reusing","just","Sigh,","Having","As","Regarding","I'm","You","The","```elixir","defimpl","import","import","def","concat","end","end","```","Using","Looks","Thank","Ah,","You","Instead","Oh!","If","Thanks.","The","I'll","I","The","Alternative","Alternative","Alternative","As","@dasia","I","Your","A","```elixir","@deshawn","defp","set(list:","end","defp","set(s,","end","```","(Makes","Looks","The","```","[]","[1]","[1,","[1,","...","```","Append","So","There","Yeah,","I","Thank","I","Alrighty.","That","OK,","FYI:","Oh,","About","Yeah,","In","A","The","Looms","But","Ah","Thanks!","You","Oh,","Thanks","Nope,","Looks","Great,","Generally","You","Instead","Thanks","I","Based","You're","Also","As","Looks","Initially","```elixir","def","accumulate(collection,","end","defp","defp","processed_element","accumulate(tail,","end","```","It","Great","Changed","Nice.","Looks","Did","Instead","In","More","Not","Warning:","I've","What","Hi","Thank","Regarding","```elixir","test","assert","end","```","Because","I","Let","Here's","I","I'm","Of","`return`","With","Could","`Dict.update`","Btw,","Using","Obviously","Does","The","This","Yes,","Having","I","```","iex(1)\u003e","1..4","iex(2)\u003e","1","iex(3)\u003e","4","```","Btw,","Ok,","Maybe","\"head\"","Evaluating","Looks","In","`String.last(input)","In","Can","Definitely","I","Is","Well","As","It","No","This","This","As","You","This","This","I'm","I","I'm","I","You'd","I'm","I","Cool,","```","def","keep(collection,","end","```","For","http://exercism.io/submissions/b3d649a860627c3f1f0f8bec","I","For","For","Just","Thanks","-","-","-","I","To","You","As","I","It's","A","Bear","That","`Dict`","The","If","Looks","You","Insisting","The","Mmm...","@carole,","Thanks","As","@florine","I","Btw,","Looks","The","```","[]","[1]","[1,","[1,","...","```","Append","So","There","Thanks!","Slight","Hum,","Thanks","In","In","`fn(val)","Gotcha.","Just","1.","2.","Other","Thanks","@imani,","@garret,","`List.flatten`","Usually","Took","What","I","An","Your","You're","Ah,","@rasheed,","Thank","Thanks","That's","@eldora","Looks","There","I","test","assert","end","Yes,","Looks","One","Oh,","```","reduce(ll,","append(reverse(l),","end)","|\u003e","```","That","Was","Not","It","The","```elixir","Enum.map_reduce","{","end","```","To","Ah,","```elixir","def","```","Single","@rosetta","So","```elixir","@dejon","@dejon","```","@zella","@elias","This","Take","```elixir","def","case","[]","[_|t]","rest","1","end","end","```","Here's","*","*","*","*","*","*","*","*","*","*","*","*","*","Note","There","```elixir","def","defp","case","[]","[_|t]","end","end","```","Now","*","*","*","*","*","*","*","*","*","*","*","*","*","Using","Very","Most","@stephanie","The","It","@jennifer","I","I","I'm","I'm","@irwin,","Thanks","I","in","Looks","A","Typically","```elixir","def","defp","defp","```","Your","The","Looks","You're","`reduce`","I","That's","Both","I'll","Looks","Alternatively","It","Not","Many","Hint:","@concepcion,","```","def","cond","f.(head)","true","end","end","```","I","Great,","I'm","I","I'll","You","The","Just","Yea,","I'm","Over-engineered","Looks","@betty","Tail","This","Thanks.","Nice.","Thanks.","Looks","Your","It's","This","Btw,","As","Also,","This","Looks","Pattern","You","@bill,","You","That's","```elixir","case","[]","[h|t]","end","```","Oh,","Just","Ugh,","I","Instead","Looks","A","`func","Helper","You","```elixir","case","[]","[head|tail]","end","```","Also","```elixir","def","def","```","It's","This","This","Take","```elixir","def","case","[]","[_|t]","rest","1","end","end","```","Here's","*","*","*","*","*","*","*","*","*","*","*","*","*","Note","There","```elixir","def","defp","case","[]","[_|t]","end","end","```","Now","*","*","*","*","*","*","*","*","*","*","*","*","*","Using","Looks","One","Ah,","Good","About","```elixir","def","...","end","```","And","Looks","One","Quality","I","Looks","One","Learned","Heh,","Welcome","You","Also","`","I","I","Good","You","I","Looks","Only","With","This","Defaults","Try","Btw,","*","*","In","Looks","Just","A","(1)","(2)","(3)","That's","(1)","(2)","(3)","```elixir","case",":teenth",":teenth",":first","...","end","```","Unfortunately","I","I","I","Well","You","Elixir's","Alternatively","A","Where","+1","Yeah","Looks","A","1.","2.","There","I","The","A","1.","2.","In","`lc`","Playing","Let","```elixir","@cole","{","{","{","{","{","{","{","]","```","Keep","You","```elixir","lc","```","This","Nice","You","Ooh,","nothing","Thanks","@ettie,","I'm","I'm","Quick","Ok,","I","Based","Trying","Also","Also","Nice","Just","1.","2.","3.","Ah,","While","As","1.","2.","I","I","Cool,","I","Thanks","Regarding","Looks","Doesn't","You","Typically","Instead","I'd","I","As","There","Your","There","Looks","pminten:","People","Using","Cool,","As","As","Thanks","Yeah,","Thanks","Wouldn't","Your","I","Unfortunately","Cool,","Ah...","Using","Cool.","Looks","Often","Hi,","1.","2.","3.","Thanks","P.S.","Looks","There","Looks","`\\w`","`List.first`","Hi,","1.","2.","Reviewing","Btw,","@jacinto,","Welcome","Thanks","Looks","You","For","Take","I'm","A","I","The","This","I","new","Indeed.","Two","```elixir","def","defp","defp","```","This","A","Odd,","@micheal","I","Thank","now","Again,","neat","Nice","1)","2)","@khalid","Thanks.","Sure,","LOL;","Well","The","And","@raphael","Also,","A","Good","@ayden,","Excellent","Is","Looks","Check","I","Please","Great","The","Considering","This","I","I","I","No","After","Nice!","Thanks","On","Thanks","So,","Maybe","Wouldn't","I","It","Took","The","I","```elixir","Enum.filter_map(@ryann,","```","A","```elixir","Enum.flat_map(@ryann,","if","end)","```","HashDicts","They","Btw,","Thanks","What","`Enum.map","Other","Well","Your","That","Not","Cleaned","The","Thanks","I","You","Thanks","I'm","You","Oh,","Btw,","Alternatively","Something","Exactly.","I","Looks","The","And","Cool,","Supervisor","quick","Let","This","Take","```elixir","def","case","[]","[_|t]","rest","1","end","end","```","Here's","*","*","*","*","*","*","*","*","*","*","*","*","*","Note","There","```elixir","def","defp","case","[]","[_|t]","end","end","```","Now","*","*","*","*","*","*","*","*","*","*","*","*","*","Using","Looks","A","*","*","Thanks","This","Thanks","Also,","I","Seems","That's","Parens","Your","Also","Taking","**","stacktrace:","(elixir)","word_count.exs:6:","word_count_test.exs:38:","`close_bank`","You","On","It's","`Dict.update`","Instead","A","Thanks","I","Thanks","Thanks","Welcome","*","*","*","*","Well","You","Be","\"co-operative\"","Nope,","Your","Thanks","I","Ok,","1.","2.","Feedback","I","I","I","Gotcha.","Just","I'd","It's","I","Your","If","*","*","*","Notice","Now","The","Looks","A","In","Also","You","Also","Interesting,","Thanks!","Algorithmically","My","Thanks","I","I","I","You","Your","With","Realised","I","@marisa","I","What","I","it","Looks","Typically","Also,","Does","I","I","Nice","I","For","For","Why","Did","Yeah,","As","```","multiple_of?(year,","(multiple_of?(year,","```","Hmm...","Thanks","I","I","yeah,","No,","I","I",":)","Well,","Nice!","As","Another","Thanks!","I","1.","2.","The","In","That's","Since","First","Of","Ok,","This","One","```elixir","def","def","```","I","Other","Note","Probably","Suggestions","In","I","I","I","Another","Hope","Looks","This","Does","Hmmm","Thanks","I'm","There's","I'm","Btw,","Also","Well","The","Let's","*","*","*","*","*","*","*","And","*","*","*","*","*","*","*","Here's","Because","Thanks","Thanks","Do","Also:","Instead","Also","Wow.","While","I've","Haha.","Same","In","Btw.","Hey","looks","Hi","Do","`:lists.sort`","Thanks","This","Take","```elixir","def","case","[]","[_|t]","rest","1","end","end","```","Here's","*","*","*","*","*","*","*","*","*","*","*","*","*","Note","There","```elixir","def","defp","case","[]","[_|t]","end","end","```","Now","*","*","*","*","*","*","*","*","*","*","*","*","*","Using","Did","Different","The","Let's","*","*","*","*","*","*","*","And","*","*","*","*","*","*","*","Here's","Because","Good","A","Oh,","```elixir","test","#","#","end","```","I","I","I'm","Thank-you","Sorry","You're","I'm","Looks","The","```elixir","if","```","And","The","@nina","I'm","In","Instead","It's","You","`List.zip`","Instead","Btw,","Why","Huh,","Did","I","As","Just","Other","I","I","Definitely","```elixir","def","cond","silence?(input)","...","end","end","defp","```","You","```elixir","defp","String.strip(input)","end","```","Hope","Looks","One","Also,","Made","Yeah,","This","Take","```elixir","def","case","[]","[_|t]","rest","1","end","end","```","Here's","*","*","*","*","*","*","*","*","*","*","*","*","*","Note","There","```elixir","def","defp","case","[]","[_|t]","end","end","```","Now","*","*","*","*","*","*","*","*","*","*","*","*","*","Using","Not","Computing","Ist","`Enum.take`","Yeah,","Not","Could","Hmm.","You","Your","Looks","Thanks","Looks","Yep,","Is","```elixir","iex\u003e","\"13035551212\"","#","test","assert","end","#","```","You","Additionally","Although","Please","Hi","I","I","I","So,","Just","```elixir","input","String.upcase(input)","```","Upcasing","Yeah,","Updated","Looks","```elixir","String.upcase(input)","```","That's","Looks","Line","You","Thanks,","Very","Yes,","First","Also","Funny,","Looks","I","Instead","I'd","Looks","Yeah,","You","String.match?","I","And","Thanks!","For","Oops","You","```","defp","defp","```","Not","Instead","Now","Let","Not","Why","Did","This","This","Is","Oh,","Thanks!","(He","Looks","Just","Yes,","Thanks","Just","So,","Regardless","If","@leatha","A","Thanks,","A","I","http://www.regular-expressions.info/unicode.html","I","I","Stylistically:","```elixir","String.downcase(sentence)","|\u003e","|\u003e","|\u003e","Dict.update(dict,","end)","```","Be","@lindsay","In","Some","I","I","Both","Take","Do","@kaci","```|\u003e","does","What","Would","Not","What","To","Look","One","Looks","One","```elixir","def","def","```","If","```","def","def","def","```","Thanks","Looks","Your","I","I","Looks","Line","Similarly","And","```elixir","Enum.reduce(strand,","```","@hilton","Looks","There's","In","Creating","Oh","The","Exercism","If","Updated","Definitely","Much","For","Is","Mm,","The","I","There","Think","What","Finally,","#","Ok.","Would","`f","Personally","``elixir","Enum.each","...","end","```","I","I","Beyond","I","I","I","I","Amazing","A","I"]," \"\"":["==","might","might"]," \"#{bottles}":["#{bottle_classifier(bottles)}"]," \"DO":["it"]," \"Idiomatic\"":["means"]," \"In":["other"]," \"It's":["not"]," \"The":["character"]," \"Why":["would","do"]," \"car":[":"]," \"co-operative\"":["exist."]," \"go":["Go"]," \"head\"":["and"]," \"one":["fish","of","fish"]," \"testing,":["1,"]," #":["...","Aliases","Get","where","There","this","Aliases","Get","where","There","this","For","Hopefully","assert","Preserve","Discard","Iteration"]," ##":["Examples","Examples","Restrictions"]," #code":["for"]," #when":["empty"]," $":["⮀"]," &[...]":["is"]," &amp;(sorted_base_letters":["=="]," &amp;1":["*"]," &gt;":["I'm","how","Are"]," (1)":["Can","Nope."]," (2)":["Is","Using"]," (3)":["Are","You"]," (And":["for"]," (At":["the"]," (But":["be"]," (Edit:":["just"]," (He":["says,"]," (I":["did"]," (Looking":["closer,"]," (Makes":["the"]," (No":["need"]," (You":["might"]," (`rem`":["is"]," (elixir)":["unicode/unicode.ex:126:"]," (greeting":["|&gt;"]," (is_silence?(sentence)":["&amp;&amp;"]," (lc":["{n,"]," (multiple_of?(year,":["400)"]," *":["I","You","No.","Oh,","Is","You","Thanks","I've","What","There","I","Have","Does","A","Is","There","Is","You","There","What","Why","It's","How","Could","Check","I","Have","Would","What","I","You","You","Do","Predicate","Thanks","normally","in","you","On","On","For","The","The","You","you","like","you","you","It's","`&normalize_word(&1)`","`fn(word)","`[]","`[1]","`[1,2]","`[1,2,3]","New","Case","Second","Recursion,","Case","Second","Recursion,","Case","First","`rest`","return","`rest`","return","`do_call(l,","New","Case","Second","`acc","Tail","Case","Second","`acc","Recursion,","Case","First","Because","New","Case","Second","Recursion,","Case","Second","Recursion,","Case","First","`rest`","return","`rest`","return","`do_call(l,","New","Case","Second","`acc","Tail","Case","Second","`acc","Recursion,","Case","First","Because","`[?]`","`[a-z,","New","Case","Second","Recursion,","Case","Second","Recursion,","Case","First","`rest`","return","`rest`","return","`do_call(l,","New","Case","Second","`acc","Tail","Case","Second","`acc","Recursion,","Case","First","Because","You","You","You","The","Your","Why","`[]","`[1,2]","`[1,2,3,4]","`acc`","Compute","`acc`","Compute","`acc`","Compute","`acc`","`acc`","Compute","`acc`","Compute","`acc`","Compute","`acc`","New","Case","Second","Recursion,","Case","Second","Recursion,","Case","First","`rest`","return","`rest`","return","`do_call(l,","New","Case","Second","`acc","Tail","Case","Second","`acc","Recursion,","Case","First","Because","`acc`","Compute","`acc`","Compute","`acc`","Compute","`acc`","`acc`","Compute","`acc`","Compute","`acc`","Compute","`acc`","New","Case","Second","Recursion,","Case","Second","Recursion,","Case","First","`rest`","return","`rest`","return","`do_call(l,","New","Case","Second","`acc","Tail","Case","Second","`acc","Recursion,","Case","First","Because"]," **":["(MatchError)","(SyntaxError)","(FunctionClauseError)","(ArgumentError)","(ArgumentError)","(FunctionClauseError)"]," *that*":["was"]," +1":["for","defp","to"]," +1,":["it'll"]," -":["how","maybe","silence","question","???","normalizing","classifying","responding","Someone","You","You","Do","In","downcasing","creating","accumulating","flattening","incrementing","In","You","Do","`Enum.zip/2`","The","`String.codepoints`","Sorting","I","I","I","`defp`...","change","`Regex.scan`...","Pipe","Regarding","It's","The"]," ...":["but","etc"]," ...and":["then"]," ...for":["loose"]," ...maybe":["that's"]," ...to":["be"]," /Users/kimhyunkang/usr/src/elixir/lib/elixir/lib/hash_dict.ex:123:":["HashDict.update(#HashDict,"]," /Users/kimhyunkang/usr/src/elixir/lib/elixir/lib/list.ex:111:":["List.\"-foldl/3-lists^foldl/2-0-\"/3"]," /me":["went","slaps"]," 1":["+","+","+","+","+"]," 1)":["I","`String`","why","does","`[^a-z0-9","`x","why"]," 1.":["What","I","You","Just","`anagram_for?`","Have","How","Did","`HashDict.update`","When","Using","You","It","I'm","It's","this","The","tried","The"]," 16\u003e":["unicode:characters_to_list(\u003c\u003c"]," 2":["things,"]," 2)":["I","Piping","Could","is","`[^[:alnum:]","`(String.strip","elixir"]," 2.":["Check","Probably.","You","Will","Sorry,","There","Would","Should","The","`x`","For","Character","It","I","I","let","You","`append`","Thinking"]," 3.":["Do","Awesome.","Check","Your","What","i"]," 4":["strings."]," 4.":["I'm","It"]," :-D":["OK","Thanks."]," :calendar.day_of_the_week(year,":["month,","month,"]," :first":["-\u003e"]," :lists.keyfind(:import,":["1,"]," :lists.sort":["String.codepoints"]," :math.pow/2":["worked"]," :teenth":["when","-\u003e"]," \u003c\u003c":["head"]," \u003ccode\u003eDict.update(...)":["|\u003e"]," \u003ccode\u003edef":["verse(0)\u003c/code\u003e","verse(1)\u003c/code\u003e","verse(2)\u003c/code\u003e","verse(n)\u003c/code\u003e"]," \u003ccode\u003eis_forceful?\u003c/code\u003e":["is"]," ==":["Compilation"]," \u003e":["added","You","Why","Is","You're","In"]," @abby":["I"]," @abraham":["Once"]," @allen":["I"]," @amira":["I've"]," @anabel":["\"\"\"\""]," @ayden,":["if"]," @bennie":["Argh."]," @bernadette":["nice,"]," @beth":["That's"]," @bette":["I"]," @betty":["thanks"]," @bill,":["sadly,"]," @brando":["import"]," @brisa":[":","\"\"\""]," @caesar":["I"]," @camryn":["Thank"]," @candida,":["thanks"]," @carlee:":["For"]," @carole,":["as"]," @cassie":["regarding"]," @cayla":["I"]," @charity":["Regarding"]," @chelsey":["sorry"]," @chesley":["Hmmm..."]," @cole":["["]," @coleman,":["@coleman"]," @concepcion,":["about"]," @constance":["Not","I"]," @cortez":["I"]," @cyril":["-"]," @damion":["looks"]," @darion":["I"]," @darrel":["-"]," @dasia":["it"]," @dax":["so"]," @dax,":["what"]," @dejon":["to_rna(char)","to_rna([char])"]," @delfina":["There's"]," @deshawn":["{"]," @devante":["There"]," @dolores":["It's"]," @dylan":["Confirmed."]," @earlene":["@earlene"]," @ebony":["thanks."]," @eldora":["thanks"]," @elias":["awesome,"]," @emelia":["that's","I"]," @ernestina":["thanks"]," @ernestine":["Binary"]," @ettie,":["this"]," @florencio,":["maybe"]," @florine":["Good"]," @francesco":["-"]," @gail":["So","Thanks!"]," @garret,":["thank"]," @gene":["I"]," @georgianna":["OK..."]," @greta":["\"\"\"","1","2","3","4","5","6","7","13","19","[\"mon\",","thanks"]," @haleigh,":["@haleigh:"]," @hattie":["Yup,"]," @herminia":["Why"]," @hillard":["Queue"]," @hilton":["Ugh..."]," @howard":["true,","Of"]," @ibrahim":["\"\"\"","1","2","3","4","5","6","7","13","19","[\"mon\","]," @imani,":["thank"]," @irwin,":["@irwin,"]," @isac":["awesome"]," @jacinto,":["yeah,"]," @jan:":["I'm"]," @jennifer":["Good"]," @jewel":["I'm"]," @joey":["HashDict.new"]," @johnson":["Fantastic"]," @josiane":["Jose"]," @juliana":["This"]," @kaci":["I"]," @kailyn":["Sometimes"]," @karli":["-"]," @kayli":["Thanks","31557600"]," @kendall:":["One","It"]," @keyshawn":["Thanks","filter","reduce_with(Enum.t,"]," @khalid":["you"]," @krystel":["because"]," @leatha":["Generally"]," @lemuel":["See"]," @levi":["neato!"]," @lindsay":["thanks"]," @liza":[":D"]," @lorenz":["+1"]," @lou,":["yes,"]," @loyce":["I"]," @lukas-w":["How"]," @mable":["It's"]," @madaline":["From"]," @maegan":["Good"]," @makayla":["Awesome"]," @mandy":["Thanks,"]," @marilyne,":["yep"]," @marion":["["]," @marisa":["Thanks"]," @marisol":["I"]," @marjorie":["`Regex.match?(%r/\\pL/,"]," @mattie":["-","-"]," @maximillia":["Imagine","a"]," @mckayla:":["\u003c\u003c\u003e\u003e"]," @meagan,":["you"]," @melyssa":["I"]," @michaela":["Thanks,"]," @micheal":["it"]," @miles":[":)"]," @myrtle":["Why"]," @nadia":["divides?"]," @natalia":["neat"]," @nathanael":["perhaps"]," @nathanial":["I"]," @nina":["covered"]," @obie":["I'm"]," @oma":["`Enum.reduce`"]," @oswaldo":["Yes"]," @patsy":["OK..."]," @pearl":["Try"]," @pedro":["Took"]," @peyton":["I"]," @price":["'ACGT'"]," @providenci,":["as","I"]," @randal":["more"]," @raphael":["Often"]," @renee":["I"]," @rickey":["I'm"]," @rosalia":["I"]," @rosario,":["Thanks,"]," @rose,":["I"]," @rosetta":["good"]," @rowena":["Thanks,"]," @roxanne":["significant"]," @royce:":["Sorry,"]," @rudy":["I"]," @sabrina":["call"]," @selena":["thanks"]," @simone":["Even"]," @stanley":["HashDict.new","|&gt;"]," @stanton":["I"]," @stephanie":["thanks"]," @stephon":["I"]," @susanna":["Well"]," @sylvan,":["I","thanks,"]," @tatum":["Thanks!,"]," @tavares":["cool!"]," @terrence":["I'd"]," @terry":["Yep,"]," @theodore":["Oh"]," @therese":["agreed"]," @theresia":["That"]," @travon,":["thanks"]," @tremayne":["thanks!"]," @trisha":["\"\"\""]," @trisha's":["suggestion"]," @velva":["'ATCG'","\"\"\"","nucleotide_counts([char])"]," @wyatt":["thanks!"]," @zechariah":["I"]," @zella":["That’s"]," A":["pipeline","little","couple","small","couple","range","good","minor","more","minor","different","style","range","few","few","`Dict.get`","good","minor","cond","while","cond","couple","`Dict.put(...,","few","little","bit","small","few","few","pretty","Bitwise-based","few","couple","variable","second","little","bit","few","function","good","fairly","little","very","big"]," About":["aliasing,","this","the","the","`HashDict.update/4`,","`include_letters?`:","your","indenting","multiple"]," According":["to"]," Actually":["the"]," Actually,":["that","I","given"]," Added":["some","two"]," Additionally":["to"]," Additionally,":["you","you"]," After":["submitting,","looking","giving","a"]," Again":["sorry"]," Again,":["thanks","thanks"]," Agree":["with"]," Agreed":["with"]," Agreed!":["http://exercism.io/submissions/5202a10a75d94dd0c300015d"]," Agreed,":["much","as","I"]," Agreed.":["It","They're","I'm"]," Ah":["-","yes!","cool,","much","good","indeed,","indeed!","nice,","yes,"]," Ah,":["I","I","your","that's","nice;","you're","thanks","I","hadn't","thanks!","indeed,","cool.","nice!","thanks.","now","cool.","cool!","cool.","I","thank","I","cool.","yes,","yes,","cool.","yes.","yes,","nice..","yeah,","good","gotcha.","gotcha.","I","that's"]," Ah.":["Thanks","I","Thanks."]," Ah...":["`Stream.with_index`..."]," Aha,":["great","I","my","after"]," Aha.":["so","I"]," Ahh,":["good"]," Alas,":["you"]," Algorithmically":["this"]," All":["right!","test","the"]," Along":["the"]," Alright,":["time"]," Alrighty.":["Done."]," Also":["it's","consider","really","there","you","you","fixed","take","a","you","it","check","you","I","it","I","it","your","you","it's","for","count_words","instead","you","`if(cond,","you","`Dict.update`","think"]," Also,":["you","you","do","check","small","in","some","thanks!","`arg`","it","its","checking","check","finding","I","there","posted","is","it","if","look","I","there","how","although","for","I","is","I","in","yes,","Enum.each","how","do","I'd","I","I'm","I","think","not","I","as","`defp`","consider","please","yeah,","it's","use","how","take","you","I","take","beware","take","note","the","do","it","I'm","before","take","I","it","did","it's","you"]," Also:":["Closed-form","I"]," Alternative":["to","to","to"]," Alternatively":["something","it's","because","you"]," Although":["checking","from","it"]," Although...":["there"]," Always":["a"]," Amazing":["to"]," Ambitious":[":-)"]," An":["alternative","alternative"]," Analyzing":["the"]," And":["there","the","you're","yes,","use","that's","the","thanks","you","with","in","line","the","thank","why","I","write","I","any","then","that's","merry","you","the","by","here's","here's","then","now","if"]," Another":["way","thing","\"readability\"","suggestion","question:","potential","de-duplication:","alternative","observation","performance","suggestion"]," Any":["feedback?","reason","particular","chance","help","input","particular"]," Anything":["I"]," Anyway,":["I","I","I'm"]," Anyways,":["these","thank"]," Apart":["from"]," Append":["`++`","`++`"]," Applied":["a"]," Appreciate":["the"]," Appreciated!":["This"]," Appreciated,":["@reva."]," Are":["you","there","you","you","silence?/question?/shout?","you","you","you","you","there"]," As":["we","for","a","I","someone","a","for","far","this","a","far","well","you","far","@manuela","for","for","I","far","for","of","I","I","said","for","for","a","for","someone","far","far","I","far","for","far","far","far","far","far"]," Aside":["from","from"]," At":["first","this","line","this","a","the"]," Aussi,":["`Regex.run"]," Awesome":["use"]," Awesome!":["Thanks","It's","I","I'll"]," Awesome,":["completely","great"]," Awesome.":["`Enum.filter`","I"]," BTW,":["I"]," BUT.":["One"]," Bad:":["`HashDict.get`"]," Based":["on","on"]," Basically":["pattern"]," Be":["gentle..","the","aware","aware"]," Bear":["in"]," Beautiful!":["Except"]," Beautiful,":["readable"]," Because":["I","`alphabetize`","the","the"]," Because,":["if"]," Before":["flattening"]," Better":["and"]," Beyond":["that,","that,"]," Big":["oops,","+1"]," Both":["are","of"]," Brand":["new"]," Brilliant!":["One"]," Browsing":["through"]," Btw":["do"]," Btw,":["to","with","this","if","it","I","it's","`x..y`","my","this","I","it's","you","`&(String.from_char_list!(&1))`","there","it's"]," Btw.":["I","you"]," Building":["that"]," But":["other","if","I",",","when","why","this","yes,","using","this","what","are","is","is","I","in","then","these","I","is","it's","it's","memoization","basically","in","can"]," By":["the","the","the","the","the","all","\"update"]," Calculate":["meetup","meetup"]," Can":["you","you","you","you","you","you","you","you","I","you","you","you","you","you"]," Can't":["help"]," Cell.add_enzyme(cell,":["RNAPolymerase,"]," Cell.signal(cell,":[":do_transription)"]," Certainly":["the"]," Changed":["to"]," Changing":["\u003ccode\u003eupdate_count\u003c/code\u003e"]," Character":["lists","category"]," Check":["out","out","out","out","out","out","out","out","out","out","out","out","of","out","out","it"]," Checking":["for"]," Checkout":["the"]," Cleaned":["up","up"]," Clever":["how"]," Clever,Thanks":["for"]," Code":["reuse"]," Coding":["the"]," Come":["to"]," Coming":["from"]," Comme":["en"]," Compare":["to"]," Computing":["length"]," Concerning":["the"]," Conciseness":["vs."]," Conditionals":["are"]," Congratulations":["on"]," Consider":["looking","the","extracting","using","`cond`","using","how","renaming","if","Dict.update","using","inlining","using"]," Considering":["the"]," Convention":["for"]," Conventionally":["these"]," Cool":["use"]," Cool,":["I","thanks","thanks.","no?","I","makes","sorry,","no","thanks","thanks","now"]," Cool.":["We're","If","I","Yeah,"]," Correct.":["I"]," Could":["`Enum.zip`","you","the","`Regex.scan`","the","the","the","the","you","we","you","you","you","use","you","I","you","you","eliminate"]," Couldn't":["you","you","you"]," Couple":["of"]," Creating":["a","the"]," Dang,":["last"]," Defaults":["arguments"]," Definitely":["the","a","feel","not"]," Definitively":["makes"]," Despite":["the"]," Dict.merge":["db,"]," Dict.update(counts,":["nt,"]," Dict.update(d,":["String.downcase(w),"]," Dict.update(dict,":["word,"]," Did":["you","you","you","you","you","you","you","you","you","you","you","you","I","you","you","you","you","you","you","the","not","you","you","you","you","you"]," Didn't":["realise"]," Different":["one."]," Do":["you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","note","you","all","you","you","you"]," Doctests":["don't"]," Does":["it","delegating","it","that","that","your","this","anyone","this","this"]," Doesn't":["look"]," Doh!":["Names"]," Doh,":["nice"]," Doing":["the"]," Don't":["forget","get"]," Done!":["(just"]," Don´t":["you"]," Dude,":["that's"]," Due":["to"]," EDIT:":["nevermind,"]," ELSE":["is"]," Easier":["to"]," Edit:":["lol,","that"]," Elixir":["is","allows","has","0.10.1","does","allows","didn't","is","supports"]," Elixir's":["AST","library"]," Empty":["parens"]," Enum.count":["looks"]," Enum.each":["l,"]," Enum.filter":["list,","list,"]," Enum.filter(":["anagrams,"]," Enum.filter(candidates,":["&amp;is_anagram?(source,"]," Enum.filter(words,":["&anagrams?(downcase(word),"]," Enum.filter_map(@ryann,":["&flag_set(score,"]," Enum.flat_map(@ryann,":["fn"]," Enum.join(":["[\"*\","]," Enum.map":["[1,2,3],","[1,2,3],"]," Enum.map(chars,":["fn","&score_letter)"]," Enum.map_join":["("]," Enum.map_join(from..to,":["\"\\n\","]," Enum.map_reduce":["matches,"]," Enum.reduce":["words,","HashDict.new([{?A,"]," Enum.reduce(coll,":["[],"]," Enum.reduce(dna,":["HashDict.new(Enum.map(@velva,"]," Enum.reduce(matches,":["HashDict.new(),"]," Enum.reduce(split_lowercased_words,":["HashDict.new,"]," Enum.reduce(stop..start,":["\"\","]," Enum.reduce(strand,":["dict,"]," Enum.reject(list,":["fn(test_same)"]," Enum.zip":["has"]," Ergh,":["just"]," Erlang":["R16B01","doesn't"]," Err,":["correction."]," Error":["in"]," Evaluating":["code"]," Even":["if","though","so,"]," Everything":["else"]," Example:":["is_question?(msg)"]," Excellent":["point","points"]," Excellent!":["But","Isn't"]," Exercism":["does"]," Expanding":["on"]," Expounded":["a"]," FWIW,":["I"]," FYI:":["on"]," Fair":["point,","enough.","enough.","point!"]," Feedback":["is"]," Few":["surprises"]," Figured":["out"]," Finally,":["is","for","look","you"]," First":["Elixir","pass.","Elixir","example","I","ever","pass.","stab","you","I'd"]," Fixed":["typo","the"]," Following":["up"]," For":["the","a","the","my","the","this","a","some","example,","the","the","the","example,","me","functions","the","example,","the","the","me","count","stuff","bonus","this","predicates","the","me","slightly","me,","example","details","an","`concat`","even","`count`,","`nucleotide_counts`,","the","the","the","`not_saying_anything`","chunking"]," Forced":["to"]," From":["what","what","the","version","[`List`](http://elixir-lang.org/docs/stable/List.html),"]," Functional":["language"]," Functions":["in"]," Funny":["I"]," Funny,":["on"]," Generally":["I","speaking","`Enum.reduce`"]," Generally,":["the","prefer"]," Getting":["the","closer!"]," Given":["my","the"]," Giving":["a"]," Going":["to"]," Good":["point!","point,","job!","point.","job!","work.","points,","point","job!","Job!","point.","idea!","job!","job!","work.","job!","job!","job!","work!","work!","point.","point.","point.","call","job!","job.","point!","idea","call.","point.","points!","idea,","point.","catch.","point!","catch","point","start","catch.","point","predicate","job","start!","first","feedback.","points","suggestion.","question","points.","attempt!!","to","point,","question","feedback;","idea,","point!","point,","point","point!","catch","job!","suggestions.","point.","points","point,"]," Good.":["Have"]," Good:":["`HashDict.new`","`Dict.get`"]," Goot":["catch,"]," Got":["it.","rid"]," Gotcha.":["Thanks","Thanks","Thanks","That's","I","That"]," Gotcha...":["Okay,"]," Granted,":["it's"]," Graphemes":["are"]," Great":["job!","job!","work!","job.","Job!","Job!","job!","job","nudge","feedback,","!","job!","job","idea!","work!","catch","idea,","start","nit!","job,","ideas,","function","job!","first","feedback,","advice,","idea."]," Great!":["Very","Only","Thanks"]," Great,":["thanks","thanks!","thanks."]," Great.":["If"]," Guards":["on"]," Ha":["ha,","ha"]," Ha!":["As"]," Hadn't":["considered"]," Hah,":["the"]," Haha":["feels"]," Haha!":["Yes,"]," Haha,":["clever!","i'm","done","nice"]," Haha.":["Sometimes","Nope"]," HashDict.new":["[{'G',","(lc"]," HashDict.update(counter,":["word,"]," HashDict.update(dict,":["word,"]," HashDict.update(hash,":["word,"]," HashDict.update(tally,":["word,"]," HashDicts":["cannot","don't"]," Have":["you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","a","you","you","you","you","you","you","you","a","you","you","you","you","you","you","you","you","you","you"]," Having":["tried","`next_phrase`","a","defined","slightly","said"]," Heh,":["I","didn't","my"]," Hehe,":["every"]," Helper":["functions","functions"]," Here's":["pattern","the","the","an","that","a","another","a","a","happens","happens","happens","the","happens","the","happens"]," Here,":["I've"]," Hey":["(no","Mike,","Alan!!!","Gabe,","Ben,","@darian,","@phyllis,","@reva,","@trent,","Richard,"]," Hey!":["Great"]," Hey,":["thanks","me"]," Hi":["there,","Julien,","Don.","Patrick!!!!!!!","Jason,","Svyatov,","there","there.","Alan,","there.","Matt,","there","there","there","there","drueck,","pminten,","@kara,","@freddie,","@caesar,"]," Hi,":["pattern","thanks","thanks","a"]," Hi.":["Thanks"]," Hint:":["You"]," Hmm,":["I","the","submitted","lemme","I","come"]," Hmm.":["What"]," Hmm..":["I"]," Hmm...":["yeah,"]," Hmmm":["José","sorry"]," Hmmm...":["I"]," Hope":["you","that","that"]," How":["about","about","about","about","about","does","about","about","would","about","to","about","about"]," However":["I","I"]," However,":["if","I","you"]," Hrm,":["perhaps"]," Hrmm.":["Seems"]," Huh,":["I"]," Huh.":["character"]," Hum,":["I'm","I","I"]," Hé":["hé,"]," I":["like","think","don't","like","followed","have","like","think","would","like","tried","love","like","think","did","like","like","like","can't","would","think","like","like","probably","didn't","think","did,","think","think","think","think","like","was","agree","think","kind","know","like","would","like","like","looked","like","tried","can","like","didn't","understand","guess","don't","went","guess","agree","went","think","didn't","think","did","have","think","think","was","went","understand","did","see","like","think","like","do","don't","actually","like","think","really","just","think","hated","am","recognize","think","really","do","don't","actually","don't","can't","will","like","hate","extracted","also","forgot","am","like","think","usually","failed","used","would","could","see","thought","didn't","prefer","liked","agree","originally","can't","am","don't","actually","wanted","need","mean","think","can","find","like","initially","looked","submitted","agreed","suppose","discovered","think","love","also","also","have","wanted","was","thought","think","`do_like_it_better`","love","think","just","see","like","do","wouldn't","think","am","was","know","missed","think","would","think","added","notice","like","agree","don't","don't","like","agree","think","got","got","*think*","might","didn't","was","tracked","don't","don't","don't","aggree","think","like","really","have","can","agree","think","think","see","agree,","completely","do","was","submitted","thought","just","like","looked","don't","think","think","know,","was","set","feel","like","agree","agree","think","think","hadn't","think","think","like","was","personally","think","did","guess","also","would","like","recommended","wrote","love","must","think","think","believe","wanted","really","see","debated","couldn't","like","could","would","like","managed","did","like","feel","also","personally","feel","like","think","toyed","don't","submitted","tried","have","used","like","don't","was","am","think","know","reverted","agree;","would","am","really","think","don't","was","originally","am","was","like","like","don't","personally","like","think","find","don't","haven't","don't","like","wanted","thought","suppose","deemed","checked","like","dot","like","had","think","would","also","tried","don't","like","wasn't","used","like","don't","find","hadn't","don't","struggled","think","would","have","would","like","can","really","dig","would","disagree","would","also","couldn't","fiddled","think","don't","originally","like","tried","could","think","didn't","honestly","think","originally","think","would","didn't","usually","feel","like","have","may","did","originally","had","checked","feel,","had","think","like","like","am","like","agree","also","have","like","think","don't","think","had","think","really","was","usually","believe.","like","pulled","wanted","found","find","find","went","agree","am","tried","like","expect","don't","think","originally","don't","wouldn't","do","do","was","tried","surprised","saw","just","actually","did","was","guess","can","think","modified","guess","see.","think","don't","agree","feel","think","would","want","don't","wonder","am","found","started","wanted","wouldn't","like","don't","think","think","second","haven't","missed","was","suggest","did","chose","tried","think","tried","like","think","finally","like","understand","looked","could","guess","took","had","assume","keep","will","was","was","would","don't","like","don't","do","kinda","notice","assume","agree.","really","like","disagree,","think","did","was","only","see","somewhat","tend","thought","did","played","did","wonder","used","didn't","like","need","still","expected","think","can't","did","think","thought","started","may","personally","tend","used","was","definitely","like","don't","was","feel","found","used","may","thought","don't","don't","don't","don't","think","think","suspect","like","was","actually","liked","used","started","think","did","help","have","think","wouldn't","got","don't","agree","guess","don't","wanted","come","have","bet","think","would","meant","wasn't","was","had","didn't","really","used","don't","don't","fully","disagree","think","think","am","was","am","recognized","haven't","think","incorporated","was","don't","believe","guess","actually","also","didn't","initially","actually","think","like","think","looked","understand","think","have","did","see","was","think","think","think","should","think","like","added","found","admit","think","just","find","hate","wonder","suspect","recently","may","fixed","just","couldn't","admit","expect","forgot","think","would","had","like","ended","am","am","think","tested","realized","know","tried","suspect","was","don't","thought","opted","think","re-extracted","opted","might","extracted","see","didn't","can't","*think*the","was","am","will","like","really","like","did","went","like","like","opted","don't","think","would","would","see","like","like","liked","will","think","actually","like","guess","can","had","am","am","like","think","did","do","would","tried","wanted","like","like","like","strongly","*think*"]," I'd":["say","say","make","just","only","rather","move","also","love","normally","just","switch","use","really","look","keep","write","say","just","remove","like","jus","break","also","probably","put","do","filter","recommend","say","recommend","do","probably","use","factor","encourage","probably","write","say","go","probably","probably"]," I'll":["take","see","go","definitely","refactor","refactor","resubmit.","also","write","submit","submit","submit","consider","refactor","give","just","second","submit","go","amend!","also"]," I'm":["quite","curious:","struggling","out","complete","sure","the","looking","interested","more","not","thinking","sure","actually","having","having","not","not","flattening","definitely","just","guessing","tempted","using","tempted","not","not","curious:","interested","a","not","really","sure","not","just","not","not","not","pretty","still","still","not","making","with","novice","new","pretty","figuring","liking","new","still","not","not","trying","getting","going","being","not","not","quite","also","about","having","actually","not","assuming","not","curious","by","still","still","not","aware","a","sure","actually","not","pretty","also","aware","interested","pretty","curious","going","not","pleasantly","not","not","not","not","curious","not","probably","not","not","still","working","much","a","sure","not","still","having","not","also","still","also","guessing","mainly","not","submitting","wondering","not","not","guessing","sure"]," I'm,":["frankly,"]," I've":["just","made","just","been","added","also","updated","updated","removed","only","just","used","tried","just","been","worked","had","also","changed","send","also","taken","been","seen","used"]," IMHO":[":","It","the"]," IMO":["you"]," IMO,":["this"]," IO.puts(\"good":["time:"]," Ideally":["I'd"]," Ideas":["welcome"]," If":["you","it's","you","I","you","something","you","you","I","you","the","you're","you","there","I","there's","you","you","I","you","you","you","you","you","you","you","you","I","you","you","your","you","I","it","you","you","your","the","you","you","I","I","I","you're","`concat`","you","you","you"]," Ignore":["this.","this."]," Imagine":["for"]," Implemented":["the"]," Importing":["functions","functions","specific"]," In":["general","Elixir,","the","any","the","regards","the","Elixir,","this","this","case","`first_line`,","the","general","your","count,","line","the","this","the","Elixir","other","my","`shouting?`","general","your","other","this","the","Elixir,","the","`same_word?`","`count`","general","this","the","this","any","general","general","general","`list`","my","my","`difference`,","`shouting?`","Elixir","`input","general","sanitize","`nucleotide_counts`","general","this","the","general","general","general","general","general"]," Incorporated":["the","some"]," Indeed.":["I","You've"]," Inexperience":["with"]," Init":["HasDict"]," Initially":["I","I"]," InputCategory":["-"]," Insisting":["on"]," Instead":["of","of","of","of","of","it","of","of","of","of","of","of","of","of","of","of","of"]," Integrated":["@kayli's"]," Interesting":["use","approach,"]," Interesting!":["As"]," Interesting,":["I","I","I","I"]," Interesting.":["I","I"]," Interesting...":["I'll"]," Interestingly":["enough"]," Is":["there","there","the","there","there","there","using","there","there","there","this","there","that","the","the","the","the","there","your","there","there","the","the","the","there","there","there","this","it","it","a","\"10!\"","\"something_with_underscores\"","there","there","the","`thymidineToUracil`","there","there","it","there","this","it","this","there","there"]," Isn't":["the","`newline_appender`"]," Ist":["`Enum.take`"]," It":["happened","seems","felt","seems","seems","is","works","helps","seems","might","seems","can","seems","was","probably","is","might","seems","might","might","seems","might","does","does","looks","seems","was","also","might","would","would","would","might","is","seems","is","seems","is","ends","may","seems","is","may","feels","is","reminds","is","was","looks","actually","worked","is","might","seems","breathes","**is**"]," It'd":["be"]," It's":["kind","possible","just","possible","[here](http://elixir-lang.org/docs/stable/),","beautiful","a","a","to","actually","true","legit.","probably","more","possible","a","probably","not","uncommon","good","common","a","common","generally","common","probably","common","valid","deprecated","common","inconsistent","way","not","a","not","common","pretty","a","very","a","common","also","generally","common","pretty"]," Iteration":["#2"]," It´s":["much"]," Je":["ne"]," John,":["I"]," José":["confirmed"]," Julien:":["Thanks"]," Just":["`?`","submitted","so","a","a","one","started","an","two","started","asking.","noticed","noticed","treat","one","a","because","curious,","a","remember","out","learning","finished","encode","a","kind","a","looked","a","a","noticed","starting","updated","a","playing","a","to","another","one"]," Keep":["your","in"]," Kept":["the"]," LOL;":["my"]," Last,":["the"]," Learned":["more"]," Less":["of"]," Let":["me","me","me","me","the"]," Let's":["look","see","just","consider","see.","take","take"]," Like":["this"]," Line":["20","7","16","10","21","17"]," Lines":["9-11"]," List.concat":["would","would"]," List.flatten":["is"]," List.foldl(list(words),":["HashDict.new,"]," List.zip":["to"]," Long":["story"]," Look":["at","great!","through","at","at","good."]," Looking":["good!","very","great.","good!","good!","good.","at"]," Looks":["good.","good!","good!","pretty","pretty","good.","good.","really","good!","good!","great!","good","great!","like","good!","good.","good!","great,","nice.","good.","good.","nice.","like","like","like","good!","really","great.","nice!","great!","good!","great!","really","good,","good.","great.","good!","great","great.","pretty","pretty","great.","good,","great!","like","like","good!","great!","pretty","good.","pretty","good","nice!","good.","like","good!","good.","good","good.","almost","very","pretty","pretty","like","good.","pretty","great.","good","good","like","good.","like","nice.","good","good.","great,","quite","pretty","awesome.","great.","good.","good,","good,","good.","pretty","good.","pretty","good.","good,","good.","good.","good.","good.","great.","good","great.","pretty","pretty","good.","a","good.","good.","good.","fairly","great.","pretty","good.","great.","great.","pretty","good.","good","good.","good.","good","pretty","good!","pretty","pretty","pretty","great.","nice.","good.","nice.","pretty","good.","great.","pretty","good."]," Looms":["good."]," Love":["it.","the","the","it!","this","the"]," MOTHER":["OF"]," Made":["small"]," Mainly":["I"]," Many":["tail-call"]," Maybe":["you","you","consider","I","there","declare","try","I'm","there's","there","it's","this","it's","I'm"]," Merging":["is"]," Might":["there","consider","\u003ccode\u003eEnum.reduce\u003c/code\u003e"]," Minor":["point,","point,","point:","nit,","style","stylistic"]," Mm,":["yeah,","in","probably"]," Mmm...":["sorry,"]," Module":["attributes"]," More":["idiomatic","idiomatic","importantly"]," Moreover,":["you"]," Most":["obviously,","importantly,","people"]," Moved":["the","anonymous"]," Much":["simpler.","better","clearer","nicer.","better!","Better!","better!","better!!","better!!","better!","better."]," My":["question","solution","biggest","only","first","only","personal","only","last","suggestion","first","first","only","super","only","guess","mind","first","opinion","personal","apologies.","problem","first","initial"]," Naming":["the","a"]," Neat!":["I","Thanks"]," New":["version"]," Next":["is"]," Nice":["--","job","work.","job!","use","work!","--","and","use","tips,","use","use","work.","use","--","suggestion:","job","work,","suggestion","docs","addition,","use","breakdown","use","solution!","solution","refactor.","solution!!","solution!!",",","recursive","attempt!","-","and","use","use","work,","use"]," Nice!":["I","I","I'm","Looks","I","One","I","You","But","updated","I","This","Looking","I"]," Nice!!":[","]," Nice!!!":["Love"]," Nice,":["thanks.","we","I","I","I","I","that","I","I","the","I","I'd","you've"]," Nice.":["Have","I","I","I","There's","Looks"]," Nicely":["done!"]," Nil":["checking"]," No":["I","I","bad","problem!","more","that",",",",","idea","if","idea","need","function","prob,"]," No,":["sorry","actually","there's","I","I","perfect."]," No.":["In"]," Nope":["-"]," Nope,":["exercises","none","not","`cond`","there"]," Normalize":["is"]," Not":["sure","sure","really","sure","at","sure","sure","bad,","sure","totally","sure","sure","perfectly","sure","worth,","really","sure","bad.","matching","a","sure","very","sure","super","quite","that","that","sure.","much","really."]," Note":["that","also","that","how","how","how","that","how","how"]," Nothing":["to","wrong"]," Notice":["how","that","how"]," Noticed":["that"]," Now":["I","that","that","I'm","you've","uses","that","I'm","I","the","I","look","look","look","consider","look","look","all"]," Now,":["unto","if"]," Nowhere.":["I"]," OK,":["back","so","I","this"]," OK.":["I","Let","I've","I've","I"]," Object":["style"]," Obviously":["not"]," Odd":["indeed."]," Odd,":["that"]," Odds":["are"]," Of":["course","course,","course"]," Off":["the"]," Often":["code"]," Oh":["sorry,","great,","sure.","right,","wow,","I","my,","nice,","yes,"]," Oh!":["and","Thanks"]," Oh,":["awesome,","very","by","I","also,","I","I","and","nice","really?","right!","no","nevermind...","nice,","did","I","correct,","yeah,","sorry,","good"]," Ok":["I","I","this","thanks","thanks","thanks",",","I",",","thanks","it","thanks","!!","so,","this"]," Ok,":["still","now","I've","I've","think","just","I","long","on","interesting","I'm","this","I"]," Ok.":["That's"]," Ok...":["I","I'll"]," Okay,":["that's"]," Okey":["dokey."]," On":["line","line","`question?`,","line","line","line","the","the","a","the","the","the","the","the","your","the"]," Once":["an","you"]," One":["last","readability","thing","thing","comment","alternative","thing","result","of","thing:","of","small","small","other","of","thing","thing","way","thing","thing","tiny","nit","question","thing","final","possibility","more","thing","small","little","small","small","small","tiny","small"]," Only":["thing","one","-","ugly","nitpick","`count`"]," Ooh,":["good","or","thanks."]," Oooh,":["nice"]," Oops":[":)","just"]," Oops,":["no,","I've","I","looks","sorry"]," Oops.":["Just"]," Optimizing":["code"]," Or":["message","`%r\\(.{3})(.{3})(.{4})/`","you"]," Other":["than","than","points","stuff:","than","than","than","than","than","than","than","than","than"]," Otherwise":["this","looks"]," Otherwise,":["looking","this"]," Out":["of"]," Over-engineered":["`concat`"]," Overall":["solution","though","this"]," Overall,":["I'm","very"]," P.S.":["I","i"]," PS,":["stoked"]," Parens":["all","are"]," Parentheses":["around","are"]," Part":["of"]," Passes":["all"]," Passing":["a"]," Pattern":["matching"]," People":["will"]," Perfect":["IMO!","IMO.","IMO"]," Perhaps":["you","there","\"client-code\""]," Personally":["I'd","I"]," Personally,":["I","I","I","I"]," Phew,":["this"]," Pipelines":["certainly"]," Playing":["with"]," Please":["see","upgrade","upgrade","upgrade","implement","don't","suggest","share","look"]," Plus,":["and"]," Precedence":["can"]," Pretty":["cool!","much","much,","much"]," Previous":["version","exercises"]," Probably":["it","a","doesn't"]," Pulling":["out","out"]," Pushed":["an"]," Pushing":["a"]," Put":["the"]," Quality":["copy"]," Quick":["Elixir","follow","cleanup"]," Quite":["happy"]," Rather":["than"]," Re:":["```empty?/1```,","constants","imports","paretheses"]," Readability":["is"]," Realised":["I'd"]," Realized":["my"]," Really":["clean.","nice!","minor"]," Really,":["I"]," Regarding":["#2","your","one","strings","`blank?`","the","the","new,","`shouting?`,","`anything_else`,"]," Regardless":["of"]," Regex.match?(%r/^\\s*$/,":["content)"]," Regex.replace(%r/[^#{nucleotide}]/,":["sequence,"]," Regex.scan(%r/\\d/,":["dirty_number)"]," Regex.scan(%r/\\w+/g,":["String.downcase(text)"]," Regexes":["are"]," Reimplemented":["using"]," Remember":["that"]," Renamed":["blank?"]," Renaming":["stuff."]," Replace":["it"]," Responds":["to"]," Return":["a"]," Reusable":["`clasify`"]," Reusing":["the"]," Reviewing":["the"]," Right":["on!","now,","on!","you"]," Right,":["but"]," Run":["of"]," Sadly,":["the"]," Same":["goes",":)","problem"]," Say":["should"]," Scan":["converts"]," Secondly,":["your","and"]," See":["next"]," See,":["how"]," See:":["http://elixir-lang.org/getting_started/4.html"]," Seeing":["deeply"]," Seems":["great.","a","that"]," Semantically":["I"]," Seriously,":["nothing"]," Should":["some","the","`hey`","I","\"DO","a"]," Shouldn't":["`equal_pairs?`"]," Sigh,":["I"]," Similar":["question","to"]," Similarly":["line"]," Simplified":["this"]," Since":["you","you","message","this"]," Single":["characters"]," Slight":["optimization:"]," Sloppy,":["forgot"]," Small":["nit:"]," So":["the","that","feel","much","following","basically","for","I","for","for","this"]," So,":["I'm","this","I","I","do","are","you","I","you","does"]," So...":["send"]," Solve":["this"]," Some":["of","constructive","people"]," Something":["else","feels","like"]," Sometimes":["to","the"]," Sometimes,":["I"]," Sometimes/often":["when"]," Sorry":["if",",","if","but","you've","for",",","to","for"]," Sorry,":["it","couldn't","I","I","I","my"]," Sorting":["is"]," Sounds":["good","right"]," Still":["not","have","not"]," Stop":["making"]," Straight":["forward,"]," Stream.concat":["is"]," Strictly":["speaking,"]," String":["has"]," String.at(s,":["-1)"]," String.codepoints":["may"]," String.downcase(str)":["|\u003e"]," String.downcase(word)":["|&gt;"]," String.first(String.strip(content))":["=="]," String.last(prompt)":["=="]," String.last(s)":["=="]," String.match?":["would"]," String.strip(input)":["=="]," String.upcase(input)":["==","=="]," Style":["feedback"]," Stylistic":["minor"]," Stylistically":["I","the"]," Stylistically:":["I'd"]," Submitted":["new","in","in","in","this"]," Subsequently":["I've"]," Suggestions":["on"]," Super":["picky,"]," Super-picky,":["but"]," Supervisor":["as"]," Sure,":["I","this"]," Sure.":["I"]," Surely":["I","I"]," Sweet!":["I"]," Switched":["to"]," Ta,":["looks"]," Tail":["recursive"]," Take":["one","a","a","a","a","a","a","a","a","a","a","a","a","a","a"]," Taking":["off"]," Tests":["are","for"]," Thank":["you","you","you","you","you","you","you","you","you","you","you.","you","you","you","you","you","you","you!","you","you","you","you,"]," Thank-you":["for"]," Thanks":["for","for","redmar,","for","for","for","-","for","for","for","again!","for","for","for","for","for","for","for","for","for","for","for","for","in","for","for","for",";)","for","for","@hardy!!","for","for","for","for",":)","for","again!","for","for","for","for","@isabelle","-","very","for","@erna.","@rocky","to","for","@kevin-w","again","for","again","for","@melyna","for","for","guys!","for","for","again","@cade","very","for","for","for","@margie,","@lucius","@melody","for","@keyon","for","for","@chesley","for","to","@stacey","for","for","for","for","@haley,","for","for","for","again","for","again.","@providenci","for","for","to","for","again.","for","for","to","for","again","again.","for","for","for","for","@jaylin!","for","@larue.","again","for","for","for","for","for","for","for","as","@vincent","pminten","for","-","for","for","pminten.","for","for",":)","guys.","again","for","for","for","again!","as","for","for","for","for","for","for","for","so","@weston!","again","for","for","for","for","for","@derick!","for","for","@linwood!","for","for","for"]," Thanks!":["It's","I","I've","What","That","My","That's","that","I"]," Thanks,":["I","comes","and","I've","that's","great","I'm","@peter!","I","just","I'll","and","@anjali.","@treva.","@marcelle!","pminten,","fixed","already","@lavinia!","got","@jayda.","@larissa.","knew","that"]," Thanks.":[":-)","I",":)","I","I","I","I","I'm","I've","Yeah,","Good",":)"]," That":["was","makes","is","does","sounds","is","said...","comes","I","`zip`","mess","may","being","only","being","doesn't","looks","was","is,","said,","tightened","is","said,","`%r/[a-z|A-Z]/`","pipeline","make","`Dict.merge`","Dict.merge","docstring","said","Range","README","won't","does","makes"]," That'd":["certainly"]," That's":["more","it","a","neat","a","a","already","already","a","very","good,","weird,","a","pretty","a","a","all","good.","probably","pretty","interesting","good.","a","a","fine","an","good","how","just","just","not","what","what","completely","how","not","where","much","a","cool","probably"]," The":["'summerize'","update","idea","same","point","problem","use","\u003ccode\u003edef","main","same","downside","first","reduce","method","result","old","heart","`is_shouting?`","goal","reason","main","Erlang","`defp","markdown","pipeline","Elixir","one","`do_`","offending","nested","test","test","rubyist","function","construction","hey","Dict.update","[`Enum`](http://elixir-lang.org/docs/stable/Enum.html)","problem","only","reuse","update","intent","three","case","latest","newer","next","reject","pipe-rocket","math","`@mallory","`rearranages_into?/2`","shorthand","character_set","only","rule","first","string","only","predicates","pipeline","way","way","extra","way","verse","code","`count`","reason","current","choice","general","only","`initial_counts`","`(&1","everything","downside","one-liner","one-liner","regex","parentheses","major","nitpicks:","biggest","idea","Unicode","idea","linebreak","`not_letters_or_yelling`","L12","awkward","trailing","parenless","Erlang","difference","`Regex.scan`","points","first","conditional","main","only","tests","`Dict.merge`","tests","`total`","downside","only","main","code","inter-dependency","zipper","regex","`&(&1","point","tests","trick","intention","only","from_tree","`from_tree`","time","sorting","most","big","`Inspect`","reason","reason","problem","idea","idea","idea","good","problem","indentation","shorthand","if-statement","if","way","russian","`question?`","test","exercise","outer","OTP","`concat`","hardest","issue","issue","way","only","virtue","previous"]," Then":["you"]," There":["is","is","is","could","aren't","is","is","is","is","is","is","are","is","is","are","is","is","is","is","were","is","is","is","is","is","are","is","is","is","is","is","is","are"]," There's":["also","no","no","no","an","always","no","a","also","nothing","a","a","a","nothing","one","just","nothing","a","currently","always","really","a"]," These":["are","way"]," They":["are","call","said","work"]," They're":["not"]," Things":["like"]," Think":["about"]," This":["looks","looks","is","is","is","is","is","is","makes","looks","isn't","wasn't","one's","code","is","is","was","might","could","could","is","is","looks","is","is","looks","brings","is","is","is","is","looks","looks","is","is","is","is","looks","is","seems","looks","looks","is","passes","is","is","is","just","is","works","looks","implementation","looked","is","is","is","looks","is","looks","is","is","doesn't","looks","looks","looks","has","looks","is","is","is","is","looks","is","looks","looks","else/if","is","looks","will","still","is","is","looks","most","one","is","first","is","looks","looks","looks","looks","code","may","feels","is","is","is","was","will","one","is","works,","is","is","is","is","is","is","second","pipe","exercise","feels","looks","actually","exercise","time","is","time","time","time","looks","is","is","is","confuses","is","answers","feels","seemed","exercise","is","doesn't","is","is","exercise","style","is","is","has","kind","exercise","version","looks","is","exercise","exercise","looks","is"]," Thnx":["for"]," Those":["were"]," Though":["the"]," Though,":["hmm,"]," Thought":["about"]," Thoughts":["about"]," Tip:":["\\p","Erlang"]," To":["be","be","me","me,","make","get","be","match","your","avoid","be","select","reduce","get"]," Today":["I"]," Together,":["this"]," Took":["@keegan's","me"]," Top-notch":["work!"]," Totally":["forgot"]," Tried":["suggesting","to","this","to"]," True":["enough,"]," True,":["I","but"]," Try":["to","to","using","using","using","using","to","using","looking"]," Trying":["the","out","out","to"]," Turns":["into"]," Two":["tiny"]," Typically":["the","helper","predicate"]," Ugh,":["bad","another","I"]," Ugh...":["this"]," Um,":["i"]," Unfortunately":["not,","having"]," Unfortunately,":["the"]," Unless":["I'm"]," Upcasing":["characters"]," Updated":["as","to","based","the"]," Use":["of"]," Using":["the","multiple","string","a","`Dict.update`","`count`","the","`end","a","guards.","`Inspect.Algebra`","`reduce`","tail","tail","`if`","`Stream.with_index`","tail","tail","tail"]," Usually":["we","the"]," Variables":["and"]," Verse":["2"]," Very":["nice","nice.","nice.","clear!","nice!","nice","nice","clean","nice!","clean.","clean.","nice!","clean.","good","good!","nice.","nice.","nice!","concise!","nice.","nice!","good","nice.","nice!","sorry","verbose,","nice","minor:","minor","interesting.","nice.","boring,","simplified","nice","interesting","minor,","rough"]," Wanting":["to"]," Warning:":["this"]," Was":["thinking","the","able","there"]," Welcome":["to","to","to"]," Well":["thanks!","the","on","done!","done!","done!","done!","done.","this","done!","done!","done!","done!",",","\\w","how","it","I'm","for","I","the","I","I've","you","readability","instead","`&append/2`"]," Well,":["the","looking","maybe","you","you're","that's","I","here's","let","there's","I"]," Well...":["it"]," Went":["for"]," What":["I","about","do","do","if","the","do","do","you","do","do","would","I","do","other","I","are","about","would","would","does","happens","version","would","was","you","would","I","are","are","would","happens","happens","happens","does","a","about","an","do","I","I'm","would","do","do","do","is","I","is"]," What's":["the","the","pretty","up"]," When":["you","I","I","you","I","I","you","I","I","I","trying","I"]," Where":["do","`count`","do"]," Whereas":["\"the"]," Which":["alternative"]," While":["the","your","the","do","I","I","you","you're","looking","your","we're","certainly","there","I","we"]," Whitespace":["fix..."]," Why":["two","do","not","not","\u003ccode\u003eString.split/1\u003c/code\u003e","use","not","did","count","use","`binary_to_list`","define","are","not","do","don't","the","`(filter","`(String.strip","do","do","in","do","do","do","not","do","are","run","doesn't","`:lists.sort`","do","the","`:lists.seq`","did"]," Why?":["In"]," Will":["do.","revert","check","search","rewrite","fix","fix"]," With":["that","regards","the","regards","pminten's","regard","`acc`","regard"]," Within":["your"]," Without":["putting","the","seeing"]," Woohoo,":["I"]," Works":["but"]," Would":["it","it","it","it","you","it","it","judicious","it","it","it","it","`String.codepoints`","a","it","declaring","it","it","it","it","you","really","love"]," Wouldn't":["let","it","declaring","the","it","`if`","`Stream.with_index","it"]," Wow,":["very","thank","that's"]," Wow.":["Really","This","@cecile"]," Writing":["some"]," Yea":["but","I"]," Yea,":["I"]," Yeah":["absolutely.","-","it","that"]," Yeah!":["Something"]," Yeah,":["I","much","the","one","since","defensive","I","I","this","me","I've","I","I","the","I'd","very","except","if","I","I","I'm","passing","the","the","not","I","I","I","I","that's","exactly.","I","there"]," Yeah...":["I"]," Yep":[","]," Yep,":["I","typo.","that's","I","I","that's","I"]," Yes":["all","it",",","-","you're","it"]," Yes,":["that","I","readability","a","I","I","my","pipeline","explicit","you're","any","I","I","that's","good","it"]," Yikes.":["That's"]," Yo":["could"]," You":["are","could","might","might","could","are","could","can","are","are","right,","could","could","are","are","should","may","can","may","might","are","have","might","may","have","should","should","are","are","don't","can","can","mean","might","could","have","might","might","may","can","can","are","should","can","can","could","can","should","correct","can","should","shouldn't","can","are","can","could","could","could","have","might","can","don't","could","do","might","could","could","can","can","can","could","can","can","could","could","could","betcha!","might","could","could","could","could","could","could","could","maybe","could","could","maybe","can","could","are","could","should","should","are","could","could","were","could","might","can't","can","have","may","got","have","can","could","have","could","could","could","could","could","could","can","could","might","could","gained","end","could","could","can","could","could","could","could","laser-focused","need","could","could","are","can","could","could","could","can","don't","could","can","could","can","might","are","could","might","sometimes","can","could","might","could","can","can","avoided","may","do","can","actually","know","could","can","could","could","can","could","could","don't","could","might","actually","can","can","still","might","could","can","can"]," You'd":["just"]," You'll":["want"]," You're":["right,","right","right;","right,","right,","doing","probably","right","on","having","still","iterating","using","doing","scanning","missing","mixing","using","searching","recomputing","a","on"]," You've":["created","got","got"]," Your":["suggestion","three","implementation","answer","`count`","argument","identical","`match_word`","parenthesis","silence","isSilence","`zip/2`","regex","string","use","code","`same_letters`","`nucleotide_counts`","use","`filter_valid`","filter","regex","overall","code","code","`String.split`","`append`","`has_letters?`","`count_words`","typespec","current","word","submission","`append`","`concat`","code","`allergic_to?`"]," Your're":["totally"]," Yup":["-","still"]," Yup,":["the","I","that's","looks","that","that's","code","that's","the","function","definitely","parens"]," Yup.":["It's","List"]," [":["s"]," [\"car\",":["\"carpet\","]," [1,":["2]","2,","2]","2,"]," [1076,":["1072,"]," [1]":["++","++"]," [208,":["180,"]," [EDIT:":["Accidentally"]," [This](http://elixir-lang.org/docs/master/Kernel.SpecialForms.html#%3C%3C%3E%3E/1)":["should"]," [[\"car\"],":["[\"carpet\"],"]," [[\"one\"],":["[\"fish\"],"]," []":["++","++","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e"]," [_|t]":["-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e"]," [head|tail]":["-\u003e"]," [h|t]":["-\u003e"]," [submission":["2](http://exercism.io/submissions/5203b9feb49ec8867a000367)","3](http://exercism.io/submissions/5204f0ae6867e95b1b000190)"]," [verse(x),":["\"\\n\","]," \\w":["is`"]," ^":["those"]," _(":["My"]," _,":["d","d","acc"]," _Two":["other"]," `":["reduce(ll,"]," `\"(\\\\1)":["\\\\2-\\\\3\"`"]," `%r/(.{3})(.{3})(.{4})/`":["looks"]," `&(&1":["+"]," `&([student|&1])`":["can"]," `&(not_same?/1)`":["is"]," `&({":["String.downcase(&1),","&1,"]," `&({&1,0})`":["can"]," `&Kernel.!=/2`":["should"]," `''`":["is"]," `'A'`":["is"]," `:lists.append`":["is"]," `:lists.sort`":["is"]," `:math.pow`":["is"]," `@amelia[char]`":["is"]," `@jerad`":["Much"]," `@wava":["HashDict.new('ATCG',"]," `Code.eval_quoted`":["turns"]," `Dict.get`":["and"]," `Dict.update(scores,":["word,"]," `Dict.update`":["might","might"]," `Dict`":["vs"]," `Enum.count(List.zip([as,":["bs]),"]," `Enum.filter":["words,"]," `Enum.filter(candidates,":["&amp;anagrams?(word,"]," `Enum.filter`":["simplifies"]," `Enum.first":["Regex.scan"]," `Enum.first/1`":["isn't"]," `Enum.map":["|\u003e","|\u003e","|\u003e"]," `Enum.map(...)":["|\u003e"]," `Enum.map_join/3`":["is"]," `Enum.reduce(words,":["HashDict.new,"]," `Enum.reduce`":["is"]," `Enum.reverse(:lists.seq(to,":["from))`"]," `Enum.take`":["is"]," `Enum.zip`":["would","has"]," `HashDict.put(...,":["...,"]," `HashDict.update/4`":["is"]," `List.concat`":["is","is"]," `List.first`":["could"]," `List.flatten(Regex.scan(%r/[^":["]+/,"]," `List.flatten/1`":["is","is"]," `List.flatten`":["or"]," `List.foldl`":["is"]," `List.t`":["is"]," `List.zip`":["actually","might"]," `Regex.match?(%r/\\p{Lu}/,":["string)"]," `Regex.run`":["could"]," `Regex.scan(...)":["|\u003e"]," `Regex.scan`":["would"]," `Stream.with_index":["|\u003e"]," `String.at(a,":["0)"]," `String.codepoints`":["is"]," `String.ends_with(phrase,":["[\"?\"])`"]," `String.graphemes`":["might","would"]," `String.last(input)":["=="]," `String.last(s)":["=="]," `String.last(string)":["=="]," `String.last(text)":["=="]," `String.length(...)":["\u003e"]," `String.length(s)":["=="]," `String.reverse(s)":["|\u003e"]," `String.strip(callout)":["=="]," `String.strip(msg)":["=="]," `String.strip(phrase)":["|\u003e"]," `String.strip(string)":["=="]," `String.upcase(string)":["=="]," `[[\"one\"],":["[\"fish\"],"]," `\\w`":["is"]," `_empty?(nil)`":["will"]," ```":["[[\"one\"],","pun","logograph","cipher","elixir","elixir","assert","Regex.scan(%r/\\w+/,"]," ```&```":["isn't"]," ```Regex.replace":["%r/\\s/,"]," ```Regex.scan(%r/\\w/,":["string)```."]," ```clean_string":["|&gt;"]," ```dict":["="]," ```hey(\"\")```":["could"]," ```|\u003e":["Regex.split(%r{\\W+})```"]," `allergic_to`":["can"]," `bitstring_to_list`":["is","is"]," `bottle_phrase`":["OTOH"]," `build_dictionary`,":["`count_frequencies`"]," `calculate_score`":["could"]," `close_bank`":["looks"]," `cond`":["with","is","is","is"]," `contains_char`":["is"]," `d==2":["&&"]," `def":["reverse(string),"]," `defp":["increment_count(\"\",","count([],","same?(word,"]," `do_count`":["fails"]," `elem(t,":["0)`"]," `f":["x"]," `find_answer`":["could"]," `fn(count)":["-\u003e"]," `fn(val)":["-\u003e"]," `from`":["could"]," `func":["="]," `import":["Enum`"]," `import`":["is"]," `lc`":["(list"]," `msg":["=="]," `not_same_word?`":["fails"]," `one_or_it`":["could"]," `reduce`":["is","doesn't"]," `reticent?`":["is"]," `return`":["is"]," `s`":["is"]," `shouty?`":["seems"]," `sing`":["could"]," `to_words`":["is"]," `u`":["is"]," `x":["!=","=="]," `{":[":ok,"]," `|\u003e":["+"]," a":["-\u003e"]," acc":["+"]," accumulate(collection,":["function,"]," accumulate(tail,":["function,"]," ah,":["makes","List.zip"]," ahah":["true,"]," allCaps(input)":["-\u003e"]," anagram":["="]," anagrams":["|&gt;","|&gt;"]," and":["then","one"]," append(reverse(l),":["acc)"]," assert":["Teenager.hey(\"","Teenager.hey(\"1,","Teenager.hey(\"УХОДИТЬ\")","\"1234567890\""]," at":["line"]," bah":["I"]," beer_counts(first,":["last),"]," bitstring_to_list,":["while"]," bla":["bla"]," bottles_left":["="]," bump...":["is"]," but":["not","since","it","it"]," c,":["acc"]," can":["be","be","be","be"]," case":["l","l","l","list","l","l","schedule","l","l","l","l","l","l"]," catching":["nil/false"]," check":["out"]," clean_list":["function"]," compiler":["rejected"]," concat":["[\"#\u003cCustomSet"]," concise":["and"]," cond":["do","is","do","do","do"]," construct,":["but"]," could":["be"]," d":["=","="]," d,":["nil","nil"]," def":["fact(0),","fact(n),","empty?(nil),","empty?(message),","shouting?(message),","question?(message),","empty?(nil),","plus_one(number),","controlling_shares(stock),","empty?(message),","even?(number),","send_message(chan,","hey(something","hey(something)","match(word,","hey(nil),","hey(\"\"),","match(_word,","match(word,","number_of_bottles(0),","number_of_bottles(1),","number_of_bottles(n),","map(list,","do_map(list,","count('',","count(sequence,","nucleotide_counts(sequence)","match(word,","test(value","verse(0),","verse(1),","verse(bottles)","sing(from_bottles,","sorted_cp_list","match","count(words)","foo(x)","foo(1),","asking?(greeting)","ignoring?(greeting)","verse(0),","verse(1),","verse(num),","sing(start_verse,","inc(num)","sing(start_verse,","match(word,","match(word,","count(phrase)","count","nucleotide_counts(dna)","creates_new_under_the_hood(mod)","sum(a,b),","unquote(binary_to_atom(dp","unquote(binary_to_atom(\"#{nth}_#{dp}day\"))(month,","unquote(binary_to_atom(\"last_#{dp}day\"))(month,","unquote(binary_to_atom(dp","unquote(binary_to_atom(\"#{nth}_#{dp}day\"))(month,","unquote(binary_to_atom(\"last_#{dp}day\"))(month,","count(s)","area_code(digits),","sum","sum","age_on(:mercury,","sort(db)","score(word)","score(word)","transform(input)","sing(start,","to_list(coll),","hamming_distance(from,to)","good(e),","bad(e),","inspect(s,","accumulate(collection,","discard(collection,","concat(ll),","count(l)","count(l),","reverse(l),","filter([head","reverse([],","reverse([head|tail],","count(l)","count(l),","foo(a,","count(l),","count(l)","count(l),","count([]),","count([_|t]),","count(l)","count(l),","hey(input)","count(l)","count(l),","reduce([],","reduce([h|t],","reduce(l,","reduce([],","reduce([h|t],"]," defimpl":["Inspect,"]," defmodule":["DNA","Anagram","Teenager","Teenager","Beer","Anagram","Meetup","Meetup","Words","Test"]," defp":["sing_verse(1)","sing_verse(2)","quiet?(something)","quiet?(something)","silence?(nil),","function_name(\"something","function_name(word),","yelling?(msg)","extract_nucleotide(sequence,","is_nothing?(str)","is_nothing?(nil),","anagrams?(word1,","sort(word)","increment(current_value),","first_part_of_verse(bottles)","bottle_classifier(1),","bottle_classifier(_),","count([],","count([word","update(\"\",","update(word,","is_silence?(instruction),","silence?(sentence)","do_silence(\"\"),","do_silence(\"","do_silence(\"","do_silence(_),","shouting?(phrase),","question?(statement),","same?(_word,","anagrams?(word1,","anagrams?(word1,","update(word,","silence?(message),","asking?(greeting),","question?(s),","dna_to_rna(?T),","are_not_identical?(word_a,","non_matching_pair?({nucleotide,","one_or_it(n)","one_or_it(_),","dow_in_range(first,","dow_in_range(first,","is_sublist([],","is_sublist(_,","map_values(db,","count_words([],","table","char_value(unquote(char)),","char_value(_),","bottleize(0),","line2(n)","line2(n)","convert(c)","convert(c)","convert(_),","pling(n)","pling(_),","do_hamming_distance([n1","do_hamming_distance([n1","score_letter(?a),","score_letter(?e),","score_letter(letter),","score_letter(unquote(letter)),","calculate_score(word)","wrap(l)","unwrap(s)","accumulate([],","accumulate([","do_count(l,","do_reverse([],","do_reverse([h|t],","do_count(l,","do_count([],","do_count([_|t],","do_count(l,","do_count(l,","silence?(input),","silence?(input)","do_count(l,","action(0),","action(beer_count),"]," do":["you"]," do:":["dow_in_range(@ibrahim,","dow_in_range(unquote(1+7*ni),","dow_in_range(@greta,","dow_in_range(unquote(1+7*ni),","number(digits)","{"]," do_map(list,":["f,"]," does":["not"]," duh":["```''```is"]," edit":["-"]," elem":["is"]," else":["=="]," empty(input)":["-\u003e"]," empty?":["message","has"]," end)":["|\u003e"]," even":["if"]," f.(head)":["-\u003e"]," fifth_date":["=","="]," fire":["up"]," first_part_of_verse(bottles)":["%b\"\"\""]," flexible":["may"]," fn":["{"]," fn(candidate)":["-&gt;"]," fn(v1,":["v2)"]," fn(x,hh)":["-\u003e"]," foo(1),":["do:"]," foo(bar)":["when"]," good":["job!"]," gotcha!":["guess"]," greeting":["|&gt;"]," hahahah":["no"]," http://elixir-lang.org/docs/stable/Kernel.html#|&gt;/2":["Replace"]," i":["was"]," i'm":["curious,"]," iex&gt;":["words","words","Teenager.hey(\"A","Super.reverse(\"bar\")"]," iex(1)\u003e":["nil","nil","str","c(\"roman.exs\")","a..b"]," iex(2)\u003e":["Regex.split(%r/\\W+/,",":math.pow(2,64)","a"]," iex(25)\u003e":["binary_to_list"]," iex(27)\u003e":[":unicode.characters_to_list(\"да"]," iex(3)\u003e":["b"]," iex\u003e":["Teenager.hey","Regex.scan(%r/\\d/,","DNA.nucleotide_counts('GATTACA')","Phone.number(\"+1"]," if":["!silence?(speech)","fifth_date","d,","fifth_date","d,","flag_set(score,","f.(h)"]," import":[":functions,","Message,","Kernel,","Inspect.Algebra"]," in":["my","erlang","the"]," input":["="]," instead":["of"]," iolist_to_binary":["dug"]," is":["expanded","much"]," is_anagram(word,":["&amp;1)"]," is_anagram?(word,":["candidate)"]," is_question":["=\u003e"]," is_shouting":["=\u003e"]," is_silence?":["||"]," is_something":["looks"]," it":["does"]," just":["what","seems","learning"]," keep(collection,":["fn(x)"]," l":["="]," lc":["{","{","{","{","{","{","{","{","{","{letters,"]," like":["such?"]," looks":["pretty"]," love":["that"]," map_values":["db,"]," matches":["="]," message.ends_with?(\"?\")":["and"]," might":["not","be"]," month,":["year)","year)"]," msg":["==","=="]," multiple_of?(year,":["4)"]," my":["bad"]," neat":["!"]," new":["version","to"]," nothing":["fancy,"]," now":["for"]," np,":["due"]," num":["+"]," o":["="]," of":["people"]," okay.":["I'll"]," ooh":["shiny!"]," or":["do"]," or,":["translated"]," p.p.s.":["Code"]," p.s.":["I","but"]," pattern":["matching"]," phrase":["isn't","|\u003e","|\u003e"]," pminten:":["good"]," possible_anagrams":["|&gt;"]," private":["helper"]," processed_element":["="]," provided":["by"]," question?":["message"]," quick":["hint,"]," reads":["better"]," reduce(ll,":["[],"]," respond_to":["could","could"]," rest":["=","=","=","=","="]," right,":["i"]," roman.exs:17:":["Kernel.access/2"]," roman.exs:1:":["redefining"]," s/this/this":["is/"]," score_data":["="]," scores":["="]," seejee":["-"]," sentence":["|\u003e","|&gt;"]," sequence":["|&gt;"]," set(list:":["l)"]," set(s,":[":list)"]," shouting?":["message"]," silence?":["and"]," silence?(input)":["-\u003e"]," something":["="]," sooo":["…"]," sorry,":["not"]," sort(word1)":["=="]," sorted_word":["="]," str":["|\u003e"]," test":["\"silence2\"","\"only","\"shouting","\"shouting","\"valid"]," test()":["#"]," test(1)":["#"]," test(nil)":["#"]," text":["|&gt;","|\u003e"]," than":["I"]," thanks,":["that"]," the":["function","is_question","school's"]," this":["is","is","is","is"]," tnx,":["i've"]," to_char_list":["returns"]," to_list":["="]," true":["-\u003e","-&gt;","-\u003e"]," two":["things"]," unquote(binary_to_atom(\"fourth_#{dp}day\"))(month,":["year)","year)"]," upcase(speech)":["=="]," update_word_count([word],":["words)"]," uploaded":["a"]," values":["["]," verses":["=","\"\\n\"","|\u003e"]," we":["are"]," which":["is","is"]," word":["|&gt;","|&gt;"]," word-count_test.exs:33:":["WordsTest.\"test"]," word_a":["!="]," word_count.exs:6:":["Words.count/1"]," word_count_test.exs:38:":["WordsTest.\"test"]," words_in":["|\u003e"]," wrightling":["means"]," ya":["I'm"]," yeah":["it"]," yeah,":["you"]," yep,":["you're"]," you":["don't","could","could","have","could"]," {":["\"word\",","\"one\",","\"one\",","a,","'AEIOULNRST',","'DG',","'BCMP',","'FHVWY',","'K',","'JX',","'QZ',","n,","good_time,","bad_time,",":ok,","word,","'AEIOULNRST',","'DG',","'BCMP',","'FHVWY',","'K',","'JX',","'QZ',"]," {\"car\",":["1},"]," {\"go\",":["3}"]," {\"testing\",":["2},"]," {8,":["'JX'},"]," {_a,":["_a}","_b}"]," |&gt;":["Enum.sort","Enum.reduce(HashDict.new,","String.codepoints","Enum.sort","Enum.filter(fn(test_match)","String.split","Enum.uniq","Enum.map(fn(x)","HashDict.new","List.foldl(","Enum.filter("]," |\u003e":["Enum.filter(","Enum.filter(","Enum.filter(","Enum.filter(","Enum.map(&(String.downcase(&1)))","Enum.reject(&(target","Enum.filter(&(is_anagram_match?(target_letters,","String.to_char_list!","Enum.reduce(0,","Enum.sort(&(elem(&1,","Enum.map(&(elem(&1,","list_to_tuple()","String.to_char_list!()","Stream.map(&char_value/1)","Enum.reduce(0,","zip(to)","take(count(to))","count(fn","reverse","Regex.split(%r{\\W+})","Enum.reject(&(&1","Enum.reduce(HashDict.new,"]," ||":["is_question?(sentence)","is_shout?(sentence)",":other)"]," ~":["``pminten``"],"! (":["it"],"!! Thanks":["for"],"!(100 &amp;&amp;":["!(400)`."],"!(400)`. This":["version"],"!= String.downcase(word)`":["that"],"!= String.downcase(x)":["and"],"!= String.downcase(x)`:":["String"],"!= b":["end)`","end)`,"],"!= candidate":["is"],"!= nil`":["check"],"!= nil`est":["équivalent"],"!= right":["end)"],"!@#$%^&*() and":["really"],"!Regex.match?(%r/\\p{Ll}/, string)`":["could"],"!shouting?(message), would":["you"],"!silence? by":["reordering"],"\" \"":["to","or","or"],"\" \")`":["instead"],"\" \",":["and"],"\" \".":["Though"],"\" Hey":["I'm"],"\" What?":["\""],"\" and":["\""],"\" or":["\"","something"],"\" rest),":["do:"],"\" simple,":["readable,"],"\" to":["Teenager.hey()?"],"\" will":["work"],"\"!\" check":["in"],"\"!\" in":["`check_ending`?"],"\"!\" is":["because"],"\"!\") and":["(word","word"],"\"!\") en":["fin"],"\"!\"). If":["P"],"\"\" ==":["something","something","\"\"```","String.strip(phrase)"],"\"\" as":["pretty","silence).","the"],"\"\" because":["\"\""],"\"\" case":["inside","as"],"\"\" depending":["on"],"\"\" is":["not"],"\"\" might":["be","now"],"\"\" not":["being"],"\"\" or":["speech"],"\"\" produces":["an"],"\"\" rather":["than"],"\"\" }":["="],"\"\")) #":["Shorthand"],"\"\", \"":["\","],"\"\", do:":["to_string(number),"],"\"\", fn(x,":["song)"],"\"\". I'm":["not"],"\"\". That":["might"],"\"\"` (I":["suspect"],"\"\"` and":["friends","`String.last(s)","doing"],"\"\"` for":["now"],"\"\"` in":["the"],"\"\"` instead":["of"],"\"\"` is":["more","more","a","more"],"\"\"` to":["find"],"\"\"`)? Is":["there"],"\"\"`, it":["just"],"\"\"``` is":["useful"],"\"\"```. Pattern":["matching"],"\"#{bottles} #{bottle_classifier(bottles)}":["of"],"\"#{first_part_of_verse(1)}Take it":["down"],"\"#{num} bottles":["of"],"\"&amp;1 +":["1\"...","1\""],"\"(CompileError) bob.exs:13:":["function"],"\") &&":["String.ends_with(\""],"\") ==":["\"Fine.","\"Fine."],"\") but,":["both"],"\"), do:":["true"],"\")` instead":["of"],"\"*\" (it":["might"],"\"*\" be":["considered"],"\"*\" to":["\"+\""],"\"+\" in":["your"],"\", Kernel.inspect(CustomSet.to_list(s),":["opts),"],"\", and":["\""],"\",\", &inspect/1":["|\u003e"],"\",\", &inspect/1)":["|\u003e"],"\",\", (&inspect/1":["|\u003e"],"\"-\" (even":["though"],"\"-\" does":["not"],"\"-\" is":["not"],"\"-\", such":["as"],"\". Such":["an"],"\". Though":["I"],"\"1\" be":["considered"],"\"1\", replace":["is"],"\"1, 2,":["3.\"","3\""],"\"1234567890\" ==":["Phone.number(\"11234567890\")"],"\"27 presses":["of"],"\"?\" (alone)":["shows"],"\"?\" (et":["des"],"\"?\" at":["the","the","the","the"],"\"?\" but":["it"],"\"?\" formulation.":["Thanks!"],"\"?\" methods":["are"],"\"?\" should":["be"],"\"?\" which":["can"],"\"?\")` in":["`question`"],"\"?\")` instead":["of"],"\"?\", at":["least"],"\"?\", both":["because"],"\"?\"` as":["`String.ends_with?(s,"],"\"?\"` can":["be","also"],"\"?\"` you":["can"],"\"?\"`). One":["thing"],"\"?\"```. I":["think"],"\"@#$%#\" or":["\"12345\")"],"\"A\" |\u003e":["Enum.count`"],"\"A#{x \u003c\u003e":["y}D\"`"],"\"Am I":["the"],"\"B\"; y":["="],"\"BOB WHO":["EVEN"],"\"Bob, are":["you"],"\"C\", [[[\"D\"]]]])`":["=="],"\"C\"; \"A#{x":["\u003c\u003e"],"\"Child\" module":["with"],"\"Compiling\"` left":["in"],"\"Cond\" on":["that"],"\"CustomSet\" and":["the"],"\"DO it":["now?\"","now?\""],"\"DRY\" principle.":["If"],"\"Do you":["think"],"\"Enum.sort\" and":["\"(String.codepoints(word))\""],"\"Enum.sort\" into":["a"],"\"Fine. Be":["that","that","that","that","that","that","that","that"],"\"Go to":["the"],"\"Greeting.classify\" function":["that"],"\"Grownup\" or":["\"Child\""],"\"HEY MAN\")`":["will"],"\"HEY YOu\"":["would"],"\"Hey Bob,":["how"],"\"Hey, is":["this"],"\"How it":["works"],"\"I can":["do"],"\"I don't":["care"],"\"I think":["this"],"\"I've seen":["2"],"\"Idiomatic\" means":["\"the"],"\"If message":["is"],"\"In other":["words"],"\"It's not":["possible"],"\"No more":["bottles","bottles"],"\"No more\"":["or"],"\"Ok, I'm":["done."],"\"One bottle":["of"],"\"SHOUT\" to":["the"],"\"Sure\"\" etc":["etc"],"\"Take the":["phrase,"],"\"The Teenager":["Heard"],"\"The character":["'!'"],"\"This should":["probably"],"\"Verse\" generation":["in"],"\"What? \"":["will"],"\"Why String.split/1":["and"],"\"Why do":["you"],"\"Why should":["I"],"\"Why would":["you"],"\"Woah, chill":["out!\"","out!\"","out!\"","out!\"","out!\".","out!\""],"\"ZOMG THE":["%^*@#$(*^"],"\"\\n\" in":["the"],"\"\\n\" seems":["to"],"\"\\n\", fn(count)":["-\u003e"],"\"_\" count":["as"],"\"_\" instead":["of"],"\"_\" on":["the"],"\"_\" over":["true,"],"\"_\" to":["be","be"],"\"_speak\" wasn't":["immediately"],"\"_speak\" which":["evaluates"],"\"_speak\", but":["if"],"\"_whatever\" ```":[":)","or","or"],"\"` or":["`nil`"],"\"` to":["be"],"\"a list":["of"],"\"a\", (5":["|\u003e"],"\"a\", 5":["|\u003e"],"\"ah, it's":["the"],"\"alike\" while":["being"],"\"anagrams\" parameter":["to"],"\"apply\" has":["a"],"\"apply_accumulate\" as":["a"],"\"are these":["all"],"\"as\", \"java\",":["\"javascript\","],"\"bang\" versions":["of"],"\"bare words\"":["approach,","fits"],"\"bc\" where":["the"],"\"beautiful Elixir\"...":["Elixir"],"\"beer\" in":["a","multiple","many"],"\"being quiet\".":["I"],"\"best\" code":["possible"],"\"better\" solution":["to"],"\"better\" solution?":["Interested"],"\"billion dollar":["mistake\""],"\"bob\" is":["the"],"\"bob\" level,":["I"],"\"bob\" submissions.":["And"],"\"bob\" you":["can"],"\"boolean\" function.":["I"],"\"bottle#{s}\" and":["s"],"\"by stopping":["being"],"\"candidate\" or":["\"potential\","],"\"car :":["carpet","carpet"],"\"carpet\", \"as\",":["\"java\","],"\"catch-all\" clause":["of"],"\"change\" an":["object,"],"\"clean\" function?":["Reading"],"\"clean\" way":["to"],"\"clever\", it's":["considerably"],"\"client-code\" is":["a"],"\"co-operative\" exist.":["\"_\""],"\"co-operative\" would":["be"],"\"completed\" right":["now"],"\"completed\" status":["fool"],"\"concat of":["huge"],"\"cond\" expression,":["I"],"\"cond\" expressions":["is"],"\"cond\" section":["there."],"\"condition private":["functions\""],"\"constructor\" of":["HashDicts)"],"\"cryptic abbreviations\"...":["but"],"\"d, m,":["y\""],"\"day, month,":["year\""],"\"def\"/\"defp\" and":["\"do\")."],"\"default\" or":["\"else\"."],"\"deprecated\" as":["long"],"\"desired\" characters.":["That"],"\"dictionary\" was,":["for"],"\"dna\" is":["right"],"\"do ...":["end\""],"\"do\" and":["\"end\"."],"\"do:\" but":["a"],"\"do_\" help":["you"],"\"do_X\" pattern":["for"],"\"domain\" of":["this"],"\"each\", 1":["}"],"\"else\" in":["Elixir/Erlang"],"\"else\". The":["purpose"],"\"empty silence\"`)":["will"],"\"empty\" could":["mean"],"\"end\". That":["just"],"\"exchange (number)\"":["and"],"\"f\" and":["\"r\","],"\"falsy\" value":["so"],"\"finished\" this,":["but"],"\"fish\", 4":["},"],"\"flow\". I":["downcase"],"\"fn (val)":["-&gt;","-&gt;"],"\"fn -\u003e":["...\""],"\"foo\". Did":["you"],"\"for\") because":["it"],"\"for\"; 2":["remains"],"\"for_iter\" and":["up"],"\"forceful\" sentences":["and"],"\"fri\", \"satur\",":["\"sun\"]","\"sun\"]"],"\"function value":["of"],"\"functional\" --":["it's"],"\"functional\" enough;":["in"],"\"functions\" not":["\"methods\","],"\"funs with":["names\","],"\"für\" (German":["for","for","for","for","for","for"],"\"get out\",":["according"],"\"give away":["the"],"\"go Go":["GO\""],"\"go away\".":["I"],"\"go\", 0,":["function(Kernel.+/2))"],"\"graph with":["attributes\""],"\"greater than\"":["symbol.)"],"\"ground clause\"":["(when"],"\"head\" and":["\"tail\"","\"tail\""],"\"hey\" --":["it"],"\"hey\" function.":["What"],"\"idiomatic elixir\"":["involves"],"\"idiomatic\" Elixir?":["It"],"\"idiomatic\" gets":["thrown"],"\"idiomatic\" way":["of"],"\"idiomatic\", don't":["be"],"\"iex\", I":["see"],"\"if message":["is"],"\"if\" might":["be"],"\"if\" statement":["in"],"\"import String\"":["for"],"\"inline conditions\"":["and"],"\"instance\" in":["elixir"],"\"is\" like":["`is_silent`."],"\"is_\" and":["drop"],"\"is_\" is":["redundant.","a","redundant","a"],"\"is_\" looked":["more"],"\"is_\" prefix":["is"],"\"is_\" prefix.":["So"],"\"is_\" shows":["the"],"\"is_\", at":["least"],"\"is_XXX\" methods":["are"],"\"is_question\" and":["\"question?\""],"\"is_question\"? When":["I"],"\"is_silence\" or":["\"silence?\"."],"\"is_…?\" is":["a"],"\"java\", \"javascript\",":["\"\"]"],"\"just because":["you"],"\"kleuren-tv\" (Dutch":["for"],"\"lc\" and":["\"bc\""],"\"length\", \"strip\",":["etc."],"\"looks great!\"":["I"],"\"lower_case()\" function.":["I"],"\"magic numbers\"":["lying"],"\"magic\" characters":["is"],"\"major-elect\" is":["not"],"\"map\" and":["\"reduce\""],"\"match\" again":["for"],"\"message\" object":["by"],"\"methods\" of":["that"],"\"methods\", right?":[";-)"],"\"might be":["words\""],"\"msg |\u003e":["interpret"],"\"my local":["function"],"\"n\" to":["the"],"\"nitpicks\" so":["allow"],"\"no letters":["test\","],"\"no more":["bottles\"","beers\"","bottles\""],"\"noisy\" punctuation-type":["characters,"],"\"notation\" and":["avoid"],"\"obvious\" way":["of","of"],"\"of\", 1":["},"],"\"official\" style":["seems"],"\"ok, I'm":["done\"."],"\"one fish":["two","two","two"],"\"one of":["each\""],"\"one\", 1":["},","},"],"\"only numbers\"":["do"],"\"only\" the":["re-exported"],"\"open\" one":["for"],"\"or\" clause":["to"],"\"or\"). However,":["this"],"\"otherwise\" in":["Elixir"],"\"pad\" anything":["with"],"\"phrase\" or":["something"],"\"picked clean\"":["as"],"\"pipe\" the":["value"],"\"pipeline operator":["for"],"\"pop\" for":["the"],"\"possible_words\" parameter":["doesn't"],"\"potential\", but":["this"],"\"premature optimization\"":["because"],"\"preprocess\" function":["that"],"\"prolonged silence\"":["test"],"\"public api\"":["methods"],"\"question?\" because":["my"],"\"question?\" or":["\"is_question\"?"],"\"r\", but":["you're"],"\"readability\" nit":["-"],"\"readable\" elixir":["code."],"\"real\", the":["fact"],"\"red\", 1":["},"],"\"reduce\" parts":["of"],"\"resolve\" the":["conflict"],"\"right\" answer":["here.)"],"\"right\". I":["think"],"\"root\" word":["once.","once"],"\"s\" or":["\"\""],"\"s\" parameter":["-"],"\"s\"} of":["beer"],"\"same\" words,":["which"],"\"second\", \"third\",":["\"fourth\"])","\"fourth\"])"],"\"sentence\" is":["too"],"\"shape\" of":["`concat_`,"],"\"shouting in":["russian","Russian\"","Russian\""],"\"shouting\"? Artifact":["left"],"\"silence?\" appears":["after"],"\"silence?\" functions,":["one"],"\"silence?\". One":["qualm"],"\"silence?(param)\" (the":["form"],"\"silent?\" ?":["Similar"],"\"silent?\" and":["\"yelled?\"?"],"\"silent?\" is":["a"],"\"silent?\" since":["the"],"\"simpler\" by":["using"],"\"something or":["`null`\""],"\"something_with_underscores\" a":["valid"],"\"split_words\" and":["it"],"\"standard\" Elixir":["to"],"\"story\" a":["little"],"\"string\" parameter":["-","-"],"\"style\"-related issues...":["when"],"\"style\". I've":["not"],"\"subscriber number\",":["respectively."],"\"syntax ceremony\"":["right"],"\"tail\" on":["a","a"],"\"talking forcefully":["test\"."],"\"tdd\" and":["if"],"\"teen\" as":["in"],"\"tell its":["story\""],"\"testing, 1,":["2"],"\"the @":["reminds"],"\"the Haskell":["school","school"],"\"the number":["of"],"\"the way":["the"],"\"third\", \"fourth\"])":["do","do"],"\"this clause":["is"],"\"this is":["a"],"\"thought\" with":["the"],"\"thurs\", \"fri\",":["\"satur\",","\"satur\","],"\"treat invalid":["input"],"\"truthy\" in":["elixir."],"\"tues\", \"wednes\",":["\"thurs\",","\"thurs\","],"\"two\", 1":["},"],"\"understanding it":["in"],"\"unformatted_phone_number\" is":["descriptive"],"\"unicode character":["properties\""],"\"unquote called":["outside"],"\"upcase\" is;":["(most)"],"\"update the":["record"],"\"update\" a":["value,"],"\"usually\" carry":["with"],"\"valid when":["11"],"\"valley\" in":["`count`"],"\"wednes\", \"thurs\",":["\"fri\",","\"fri\","],"\"what are":["the"],"\"what did":["merge"],"\"why\" of":["what"],"\"without them":["using"],"\"word character\",":["instead","instead"],"\"word\" character":["class"],"\"word\" chars),":["don't"],"\"word\" for":["every"],"\"word\" once":["for"],"\"word\" parameter":["to"],"\"word\", 1":["}"],"\"word, word\"":["to"],"\"words\" in":["the"],"\"x bottles":["of"],"\"y\" to":["\"year\""],"\"year\" here":["anyway,"],"\"yelled?\"? Similar":["question"],"\"you can":["use"],"\"|&gt;\" operator":["in","is"],"\"£\")` and":["`String.upcase(\"£\")"],"\"£\")` is":["true","false"],"\"£\"` are":["true."],"\"ÑÉØ\". Otherwise,":["looks"],"\"é\" with":["two"],"\"УХОДИТЬ\" (Russian":["for"],"\"да нет\"":["/"],"# =&gt;":["1","2","nil"],"# Aliases":["for","for"],"# Discard":["leading"],"# For":["efficiency"],"# Get":["the","the"],"# Hopefully":["this"],"# Iteration":["2"],"# Preserve":["leading"],"# Shorthand":["for"],"# There":["is","is"],"# assert":["Teenager.hey(\"УХОДИТЬ\")"],"# h":["="],"# this":["exercise","exercise"],"# what":["you"],"# where":["the","the"],"#1). Not":["sure"],"#1, i":["uploaded"],"#2 --":["i"],"#2 and":["this."],"#2 avoids":["the"],"#2 to":["me."],"#20 is":["to"],"#3, compare":["to"],"#5, but":["actually"],"#6... I":["suppose"],"#Function\u003c0.55315932 in":["DNA.nucleotide_counts/1\u003e"],"#alphabetize), and":["have"],"#anagram? where":["you"],"#anagram_for return":["a"],"#anagram_for? and":["pass"],"#anagram_for? answer":["completely"],"#anagram_for? as":["a"],"#anagrams? works":["into"],"#bottles and":["do"],"#capitalize thrown":["in."],"#code for":["HashDict.update/4"],"#command and":["#verse"],"#contains, #next_grapheme,":["and"],"#elixir-lang on":["freenode"],"#letters call":["as"],"#lexical_sort to":["accept"],"#match a":["bit."],"#match, but":["that"],"#n_bottles function":["be"],"#next_grapheme, and":["#replace"],"#prepare_entry for":["one)?"],"#question? .":["Also"],"#replace function":["calls"],"#response, by":["the"],"#scream? and":["#question?"],"#verse more":["readable."],"#when empty":["accumulator"],"#{bottle_classifier(bottles)} of":["beer","beer.\\n\""],"#{bottle_classifier(bottles_left)} of":["beer"],"#{bottles_left} #{bottle_classifier(bottles_left)}":["of"],"#{bottles} #{bottle_classifier(bottles)}":["of"],"#{code}\"`? That":["might"],"#{good_time}, bad":["time:"],"#{num-1} bottle#{if":["num"],"#{num} bottles":["of"],"$ ⮀":["~"],"%^*@#$(*^ ZOMBIES":["ARE"],"%r and":["not"],"%r/[A-Z]+/` you":["don't"],"%r/\\p{Lu}/` is":["true,","false."],"%r/\\p{L}/ (any":["unicode"],"%r/\\p{L}/` is":["true,","false."],"%r/\\s/, statement,":["\"\""],"%r/\\w+/,input` gets":["all"],"%r{[^a-zA-Z0-9]+}) |&gt;":["List.foldl(&amp;1,"],"%r{\\w+} |&gt;":["Regex.scan"],"& (see":["how"],"& I'm":["not"],"& everything":["seems"],"& notation":["in"],"& syntax":["to","for","for","but"],"& unless":["I"],"&& !Regex.match?(%r/\\p{Ll}/,":["string)`"],"&& 3":["||"],"&& :calendar.valid_date(fifth_date)":["do","do"],"&& String.downcase(input)":["!="],"&& String.downcase(s)":["!="],"&& String.ends_with(\"":["\")"],"&& b":["=="],"&& text":["=="],"&( )":["is"],"&(&1 +":["1).","&2))`","1)","&2))`","1))","1))`."],"&(&1 -&1":["+"],"&(&1 ==":["nucleotide))`","nucleotide))`"],"&(&1+&2))` =":["499999500000."],"&(&1+1) syntax":["yet"],"&(&1, String.downcase(&1))":["|\u003e"],"&(&2 ++":["[&1]))"],"&(), but":["it"],"&(...) syntax":["for"],"&([&1|&2])) |\u003e":["Enum.reverse"],"&(are_not_identical? word,":["&1)","&1)"],"&(contains_all_chars? word,":["&1)","&1)"],"&-based function":["definition"],"&1 +":["1)`","1"],"&1 syntax,":["in"],"&1 to":["create"],"&1 without":["a"],"&1) +":["&2`"],"&1) })`":["can"],"&1) }`.":["The"],"&1))` as":["`Enum.filter(candidates,"],"&1)` could":["have"],"&1)`, but":["that"],"&1)`. Pipelines":["are"],"&1)})` can":["be"],"&1)}`. The":["parentheses"],"&1+1)` should":["help"],"&1, count(dna_chars,":["&1)","&1)"],"&1` is":["rather"],"&1`. Appreciate":["it"],"&2 +":["1)`."],"&2))` (==":["55)","55)"],"&2)` and":["`&(&1)`"],"&2)` which":["would"],"&2]` should":["work"],"&2` and":["give"],"&[&1, ?\\n])":["|\u003e"],"&[&1|&2]` it's":["a"],"&[...] is":["a"],"&amp; as":["well."],"&amp; capture":["operator"],"&amp; lambdas":["now,"],"&amp; n.":["3"],"&amp; notation":["is","for"],"&amp; shorthand":["for","for"],"&amp;&amp; !(100":["&amp;&amp;"],"&amp;&amp; !(400)`.":["This"],"&amp;(&amp;1 +":["1)","1))"],"&amp;() syntax":["is"],"&amp;(...) newish":["syntax?"],"&amp;(Regex.split %/r\\W+/,":["&amp;1)"],"&amp;(sorted_base_letters ==":["sorted_letters(&amp;1))"],"&amp;1 *":["&amp;2","2"],"&amp;1 +":["1","1)`","1...","1)","1"],"&amp;1 could":["simplify"],"&amp;1 in":["Anagram#match"],"&amp;1 to":["#anagram_for?"],"&amp;1))` can":["be"],"&amp;1))``` It":["saves"],"&amp;1, &amp;2":["notation"],"&amp;1, 1,":["fn(x)"],"&amp;2 notation":["for"],"&amp;2)\u003c/code\u003e inside":["\u003ccode\u003eList.foldl/3\u003c/code\u003e"],"&amp;2)` but":["this"],"&amp;2)` with":["`&amp;add_or_increment/2'."],"&amp;String.strip/1` gives":["`invalid"],"&amp;increment/1. Otherwise":["I"],"&amp;is_anagram?(source, &amp;1))```":["It"],"&amp;update/2 and":["&amp;increment/1."],"&anagram?(word, normalized,":["&1)`."],"&append/2 syntax":["would"],"&elem(&1, 1))`":["to"],"&encode_char/1` breaks":["for"],"&flag_set(score, elem(&1,":["1)),"],"&gt; 1":["do"],"&gt; 2":[",do:"],"&gt; Are":["silence?/question?/shout?"],"&gt; I'm":["interested"],"&gt; how":["many"],"&gt; in":["this"],"&inspect/1 |\u003e":["String.reverse`"],"&inspect/1) |\u003e":["String.reverse`."],"&invert_index/1) |\u003e":["HashDict.new`"],"&lt;void space&gt;_.":["However,"],"&mutation?/1)` -":["I"],"&mutation?/1)` and":["not"],"&score_letter/1)` though.":["`String.to_char_list!/1`"],"&transcribe/1)`. `&transcribe/1`":["is"],"&{&1, 0})),":["fn"],"&{&1, 0})`":["(remember"],"'!' is":["called"],"'-\u003e' and":["'end'."],"'2' case":["is"],"'?' at":["the"],"'AEIOULNRST', 1":["},","},"],"'AEIOULNRST'}, {2,":["'DG'},"],"'ATCG'` (`'ATCG'`":["=="],"'BCMP', 3":["},","},"],"'BCMP'}, {4,":["'FHVWY'},"],"'Bob' would":["only"],"'Cause if":["this"],"'DG', 2":["},","},"],"'DG'}, {3,":["'BCMP'},"],"'Enum`. It's":["definitely"],"'FHVWY', 4":["},","},"],"'FHVWY'}, {5,":["'K'},"],"'Generic Character":["Types'"],"'JX', 8":["},","},"],"'JX'}, {10,":["'QZ'}]"],"'K', 5":["},","},"],"'QZ', 10":["}","}"],"'^\\s\\+|\u003e' **/*.ex`":["to"],"'abcd', fn(n)":["-\u003e"],"'abcde' which":["confused"],"'abcde'} instead":["of"],"'acc, l'":["vs."],"'all_caps?' version.":["I"],"'any' is":["to"],"'cause it":["feels"],"'cause then":["I"],"'empty' isn't":["as"],"'end'. I":["understand"],"'exercism fetch":["elixir"],"'exercism fetch'":["doesn't"],"'fix' the":["`contact`"],"'forceful' messages":["were"],"'future readers',":["but"],"'general case'":["solution."],"'hey'. The":["name"],"'if' too":["far?"],"'if', that's":["why"],"'l,acc' is":["exactly"],"'one-liner functions'":["suggestion"],"'peeked' for":["the"],"'query', 'request',":["'string'"],"'reimplementing the":["wheel'"],"'request', 'string'":["or"],"'s altogether":["when"],"'s' that":["makes"],"'s' to":["something"],"'some pointers',":["as"],"'string' or":["some"],"'summerize' method":["is"],"'thought' there":["was"],"'transcribe' which":["takes"],"'ugly' at":["first"],"'understand' speech":["(i.e."],"'up', so":["I"],"'use Bitwise'":["instead"],"'words' or":["the"],"'words' to":["'statements'?"],"( ;P":[")"],"( `|&gt;`":[")."],"( http://exercism.io/submissions/522faad3b432ab395a000265":[")"],"( it":["was"],"( like,":["is_shouting?)"],"( maybe":["this"],"( or":["you"],"( |\u003e":[")",")."],"(\"für\") it's":["still"],"(\"what's at":["the"],"(%S doesn't":["do"],"(&amp;1 |&gt;":["sorted"],"(&append/1) this":["doesn't"],"(&inspect/1 |\u003e":["String.reverse)`."],"(/u) for":["that"],"(0.10.1+, I":["think)"],"(0.10.2, and":["it"],"(1 argument)":["and"],"(1 bottle":["of"],"(1 element":["in","in"],"(1) Can":["I"],"(1) Nope.":["The"],"(1) splitting":["the"],"(2) Is":["it"],"(2) Using":["a"],"(2) is":["returned","returned","returned","returned","returned"],"(2) keeping":["count."],"(3) Are":["all"],"(3) You":["can"],"(4) where":["I"],"(5 |\u003e":["Enum.map(&String.upcase/1))"],"(65), so":["you"],"(\u003c\u003c \u003e\u003e\u003e)":["with"],"(== 55)":["units","units"],"(Although, map_reduce":["returns"],"(And for":["future"],"(ArgumentError) Unsupported":["expression"],"(ArgumentError) argument":["error"],"(At the":["risk"],"(BadArityError) bad":["arity"],"(But I":["could","could"],"(But be":["sure"],"(But that's":["probably"],"(Check the":["discussion"],"(Dec 2013)":[":)"],"(Dict.put is":["the"],"(Did I":["mention"],"(Double-quoted strings":["are"],"(Dutch for":["color"],"(Edit: just":["noticed"],"(Embarrassingly I":["used"],"(Enum instead":["of"],"(Erlang's flat_map)":["and"],"(Forgive me":["if"],"(FunctionClauseError) no":["function","function","function","function"],"(German for":["\"for\")?","\"for\")?","\"for\")?","\"for\")?","\"for\").","\"for\")"],"(He says,":["begrudgingly"],"(Hint: cond":["evaluates"],"(I can't":["actually"],"(I consider":["it"],"(I did":["try"],"(I followed":["the"],"(I had":["a","exactly","a"],"(I have":["no"],"(I haven't":["checked"],"(I hope":["this"],"(I know":["it's"],"(I see":["that"],"(I suspect":["this","it"],"(I think":[":).","they"],"(I think...)":["instead"],"(I tried),":["but"],"(I want":["to"],"(I wish":["I"],"(I'd rather":["transform"],"(I'm not":["sure"],"(I'm really":["asking"],"(I've submitted":["a"],"(I've tested":["both"],"(IMO are":["redundant"],"(If I":["can"],"(If you":["copy/paste"],"(Ignore 2":["and"],"(In Ruby,":["by"],"(In particular":["the"],"(It's the":["\"prolonged"],"(Katrina herself":["actually)"],"(Kernel.inspect) things":["start"],"(L10) to":["be"],"(L16 and":["conditionals"],"(Lines 3":["and"],"(Lines 5":["and"],"(Looking closer,":["I"],"(Makes the":["code"],"(Markdown isn't":["helping"],"(MatchError) no":["match"],"(No need":["for"],"(Note it's":["common"],"(O(n^2)). Consider":["what"],"(Only works":["on"],"(Q and":["P)`.","P)`"],"(Russian for":["\"get"],"(Sorry to":["be"],"(String.length(message) ==":["0)"],"(String.upcase(phrase) ==":["phrase),"],"(Symbol, currency)).":["Never"],"(SyntaxError) /tmp/exercism.io/exercises/elixir/word-count/word-count.exs:5:":["invalid"],"(That's also":["why"],"(The answer":["may"],"(The other":["way"],"(There are":["likely"],"(There is":["not","also"],"(Though if":["anyone"],"(Unicode general":["category"],"(We're all":["new"],"(You might":["not"],"([see for":["example"],"(_, dc)":["-\u003e","-\u003e"],"(`&`) explicitly:":["`&{&1,"],"(`&`) is":["deprecated"],"(`&`) that":["runs"],"(`&amp;1+1`) in":["your"],"(`&hd/1` =":["`&hd(&1)`"],"(`'ATCG'` ==":["`[?A,"],"(`===`) is":["used"],"(`==`) and":["for"],"(`?A`) to":["`iolist_to_binary`"],"(`@carrie`) for":["constants."],"(`Enum.slice([], 1..-1)":["#=\u003e"],"(`Regex.scan`) for":["groups","groups"],"(`Stream.map(...) |\u003e":["Enum.filter(...)`"],"(`String.ends_with? word,":["\"!\")."],"(`String.length(foo) ==":["0`"],"(`String.split`) that":["is"],"(`[|]`) is":["the"],"(`\\P{x}` is":["the"],"(`\\p{L}` =":["any"],"(`\\p{}` matches":["a"],"(`\\w`) in":["the"],"(`^`) reverses":["the"],"(````|\u003e````) to":["shorten"],"(`aggressive?` and":["`interrogative?`)"],"(`allCaps` and":["`empty`)"],"(`cond` is":["just"],"(`def`) instead":["of"],"(`def`)? To":["make"],"(`defp` instead":["of"],"(`defp`) and":["named","named"],"(`defp`) from":["`count`"],"(`defp`) in":["`Teenager`."],"(`defp`) instead":["of"],"(`do_count`) if":["you"],"(`do_foo` is":["a"],"(`downcase` and":["`merge`,"],"(`first_sentence(0)` vs":["`first_sentence(n)`)"],"(`fn ...":["-\u003e"],"(`fn`) instead":["of"],"(`if` and":["`unless`"],"(`if` is":["an"],"(`isSpace`, `isUpper`),":["etc"],"(`lc`) instead":["of"],"(`m` for":["the"],"(`question`) is":["more"],"(`reduce`) over":["them"],"(`reduce`) while":["your"],"(`rem` is":["allowed"],"(`right` in":["the"],"(`something |\u003e":["operation1"],"(`word ==":["String.upcase"],"(`word |\u003e":["String.codepoints"],"(`x` must":["be"],"(`{key, value}`":["tuples)"],"(`|\u003e` is":["a"],"(`|\u003e`) shape":["but"],"(a falsy":["value)"],"(a lot":["of"],"(a small":["one):"],"(a |\u003e":["b)`."],"(ab)using Exercism":["to"],"(acceptable and":["good)"],"(according to":["the"],"(actually, even":["that"],"(after the":["`def`)."],"(alone) shows":["a"],"(also known":["as"],"(although I":["might"],"(although there":["are"],"(an Erlang":["binary"],"(and Dict.update)":["return"],"(and I":["learn","try"],"(and a":["good"],"(and all":["other"],"(and also":["def,"],"(and avoids":["the"],"(and being":["UTF-8"],"(and did":["it"],"(and easier":["to"],"(and everything":["else"],"(and friends)":["would"],"(and fun)":["they"],"(and honestly":["had"],"(and is":["a"],"(and lack":["of"],"(and line":["8"],"(and not":["idiomatic"],"(and optional)":["thing:"],"(and submitting":["a"],"(and switched":["to"],"(and then":["deleting"],"(and there's":["no"],"(and thus":["in"],"(and watching":["a"],"(and will":["still"],"(and you're":["doing"],"(anonymous function).":["Why"],"(any -\u003e":["as_boolean(term))"],"(any character,":["codepoint"],"(any unicode":["letter)"],"(apparently) doesn't":["have"],"(apparently). I":["also"],"(are they":["called"],"(as all":["strings"],"(as in":["the"],"(as opposed":["to"],"(as the":["regex"],"(as written)":["would"],"(aside from":["line"],"(assuming `f":["=","="],"(assuming the":["exercise"],"(at least":["on"],"(au moins)":["la"],"(b ++":["(c"],"(b ==":["4)`"],"(basically), too,":["which"],"(because `&&1`":["gets"],"(before normalizing)":["isn't"],"(before the":["`-\u003e`)."],"(both in":["the"],"(both with":["the"],"(but agree":["that"],"(but much":["less"],"(but not":["vice-versa)."],"(by that":["I"],"(c ++":["(d"],"(c -":["?a)"],"(case) is":["better"],"(caseless) option":["is"],"(chars hinting":["at"],"(code points)":["and"],"(collection |\u003e":["reduce"],"(collections), but":["string"],"(compare with":["iteration"],"(consider the":["number"],"(correct me":["if"],"(correctly) written":["`concat`","`concat`"],"(d ++":["e))))`"],"(dare I":["suggest"],"(defp question?(phrase),":["defp(phrase)"],"(defp), but":["on"],"(descrs instead":["of"],"(different parentheses":["placement):"],"(do: ...":["vs."],"(doesn't build":["an"],"(doing away":["with"],"(dunno why":["thought"],"(e.g. `Enum.map":["&encode_char/1`"],"(e.g. `statement`":["or"],"(e.g. in":["your"],"(e.g. nothing?":["instead"],"(e.g. when":["checking"],"(effectively the":["\"constructor\""],"(elixir) unicode/unicode.ex:126:":["String.Unicode.split([])"],"(empty string)":["and"],"(erts-5.10.2) [source]":["[64-bit]"],"(et des":["\"!\")"],"(even though":["there"],"(except for":["`new`)"],"(extra parentheses":["you"],"(far) more":["efficient"],"(feel free":["to"],"(feeling a":["bit"],"(filter -\u003e":["(list"],"(filter and":["map)"],"(first rule":["of"],"(for example":["if","a","`Enum.zip`","`some_call_that_returns_a_list()","by","using","it"],"(for now)":["many"],"(for this":["exercise)","exercise)."],"(for which,":["thanks)."],"(forgive me":["if"],"(from `test":["\"empty"],"(from the":["perspective"],"(functions that":["return"],"(getting the":["length","unicode"],"(going back":["to"],"(grade) closer":["together"],"(greeting |&gt;":["String.strip)"],"(happy, because":["it","it","it"],"(head), t":["="],"(hence the":["example"],"(hint in":["the"],"(hint: think":["of"],"(http://elixir-lang.org/docs/stable/String.html#split/1) .":["It"],"(https://github.com/elixir-lang/elixir/blob/master/lib/elixir/priv/unicode.ex), among":["other"],"(i.e. \"@#$%#\"":["or"],"(i.e. String.last,":["String.upcase,"],"(i.e. `\"\\000\",":["\"\\001\","],"(i.e. `\\P{L}`":["=="],"(i.e. `def":["transform(extract)"],"(i.e. `to_list`).":["`Dict`"],"(i.e. a":["`pow`","record"],"(i.e. e":["and"],"(i.e. filter":["out"],"(i.e. focused":["on"],"(i.e. if":["it's"],"(i.e. not":["just"],"(i.e. only":["call"],"(i.e. save":["as"],"(i.e. shouting,":["asking,"],"(i.e. strings,":["which"],"(i.e. tests":["in"],"(i.e. that":["only"],"(i.e. yelling":["would"],"(i.e. you":["don't"],"(ie String.length(text)":["=="],"(ie String.upcase(input)":["=="],"(ie implementing":["reduce)"],"(ie speech":["=="],"(if I":["understand"],"(if I'm":["not"],"(if any)":["of"],"(if that":["function"],"(if the":["EVM"],"(if you":["want)"],"(imagine bad":["number"],"(imo) more":["concise"],"(imo) that":["words"],"(imported through":["`import"],"(in `a":["++"],"(in `words`,":["for"],"(in fact":["perhaps","all"],"(in general,":["don't"],"(in one":["of"],"(in ruby":["I"],"(in this":["context);","case,","case,"],"(in your":["whatever"],"(including the":["base)"],"(input list":["is","is","is"],"(inside `kind`),":["though"],"(instead of":["doing"],"(interpret \"\"":["as"],"(is_silence?(sentence) &amp;&amp;":[":silence"],"(it always":["has"],"(it makes":["the"],"(it might":["be"],"(it works":["fine"],"(it's `O(n)`)":["but"],"(it's actually":["implemented"],"(it's been":["a"],"(it's pretty":["much"],"(it's the":["default"],"(iteration three)[http://exercism.io/submissions/5200f77aa402f8c7930002b7]":["but"],"(iterations passim).":["Why"],"(just learned":["about"],"(keep in":["mind"],"(lc {":["c,"],"(lc {n,":["cs}"],"(letters and":["the"],"(like Haskell's":["fromEnum)?"],"(like `Enum.map`)":["will"],"(like perhaps":["an"],"(like the":["russian)"],"(line 23)":["and"],"(list -\u003e":["list)))"],"(list comprehensions)":["might"],"(list)` method.":["That's"],"(makes it":["easy"],"(match variables,":["etc.),"],"(maybe instead":["of"],"(meaning you've":["probably"],"(methods that":["return"],"(might very":["well"],"(more intention":["revealing)."],"(most stuff":["that"],"(most) teenagers":["do"],"(mostly for":["legacy"],"(much) later":["down"],"(multiple_of?(year, 400)":["||"],"(my mistake),":["pretty"],"(n -":["1)`)"],"(namely that":["the"],"(naming is":["hard"],"(nearly) identical.":["The"],"(no 0),":["spaces"],"(no `case`)":["so"],"(no protocol":["dispatch)"],"(no pun":["intended)"],"(no tail":["recursion","recursion"],"(not joining":["the"],"(not needed":["for"],"(not only":["by"],"(not that":["it"],"(not using":["built","`=="],"(note that":["question"],"(note the":["space)."],"(null references),":["so"],"(number)\" and":["\"subscriber"],"(of, say,":["smaller"],"(officially time":["complexity)"],"(often useful":["in"],"(omitting the":["`&`"],"(on average":["it"],"(once for":["every"],"(once in":["the"],"(once you":["understand"],"(one for":["the"],"(one less":["function"],"(one or":["more"],"(or Joe":["Armstrong's?)"],"(or `Enum.count(&equal_pairs?/1)`.":["Omitting"],"(or `Regex.scan(phone_pattenr,":["unformatted)"],"(or `hd`":["and"],"(or a":["`case`)","conditional)"],"(or anyone's)":["on"],"(or anything":["else"],"(or even":["`[roman"],"(or inlining":["them)"],"(or just":["`to_char_list`)"],"(or lacks":["thereof)"],"(or more":["exactly"],"(or most)":["punctuation,"],"(or no":["lowercase"],"(or not)":["consistently."],"(or simply":["not"],"(or to":["reverse"],"(or two).":["Note,"],"(otherwise there'd":["be"],"(outside of":["a"],"(outside the":["Enum.each)"],"(pattern matching":["them)"],"(perhaps `p`":["or"],"(perhaps the":["text"],"(personal preference":["again)"],"(please don't":["care"],"(private) function?":["Might"],"(probably needlessly)":["that"],"(probably reuse":["the"],"(rather than":["a"],"(re)implementation in":["the"],"(regexen?), there's":["[a"],"(remember that":["`'ATCG'","`ATCG`"],"(reminds me":["too"],"(removing nested":["function"],"(return value":["of","of","of","of","of","of","of","of","of","of"],"(roughly) `Enum.reduce(1..10,":["0,","0,"],"(roughly) linearly":["related","related"],"(ruby version":["has"],"(same O(n":["log"],"(saves a":["conversion):"],"(see how":["I"],"(see http://elixir-lang.org/getting_started/2.html,":["section"],"(see lines":["5"],"(see submission":["3)"],"(separated by":["underscores)"],"(sequence of":["bits),"],"(sequences of":["word"],"(shortening them":["with"],"(shouting, question)":["seem"],"(single quoted)":["are"],"(size of":["phone"],"(slightly) larger":["overhead"],"(someone correct":["me"],"(something done":["correctly"],"(sometimes an":["alias"],"(sorry @kayla!)":["and"],"(sounds like":["unfortunately)"],"(stops it":["from"],"(strings are":["not"],"(such as":["`HashDict`),","in","what","needing"],"(super nitpicky)":["comment"],"(temporarily) than":["the"],"(thanks a":["lot!)."],"(thanks for":["the"],"(that actually":["works"],"(that have":["an"],"(the 8th":["line"],"(the `?`":["is"],"(the actual":["implementation"],"(the entire":["left","left"],"(the first)":["argument","argument"],"(the form":["most"],"(the function":["named"],"(the left":["argument)"],"(the number":["of"],"(the part":["between"],"(the testing":["library)"],"(there are":["ways"],"(there isn't":["a"],"(therefore no":["longer"],"(things that":["are"],"(think about":["it"],"(this isn't":["Python)."],"(those are":["private"],"(though in":["this"],"(though not":["a"],"(though your":["code"],"(through Erlang)":["supports","supports","supports","supports","supports"],"(through `Enum.count`),":["for"],"(throws exception":["if"],"(tip: use":["Erlang's"],"(to me)":["error:"],"(to use":["rather"],"(truly nit-picky)":["thing...in"],"(twice, as":["you"],"(typespecs don't":["count,"],"(under Elixir":["0.10.0),"],"(unfortunately there's":["no"],"(unless abuse":["of"],"(unlike all_caps?":["and"],"(unlike using":["\"or\")."],"(uppercase, lowercase)?":["That"],"(used on":["line"],"(using Unicode":["character"],"(using an":["accumulator"],"(using and":["and"],"(using the":["`&amp;`"],"(usually in":["the"],"(val) -&gt;":["val","val"],"(versus `String.codepoints`":["returning"],"(very contrived,":["I"],"(very) new":["0.11.0"],"(w and":["w/o"],"(w, h)":["-\u003e"],"(was in":["a"],"(we don't":["have"],"(well... Dict.update":["now)"],"(what you'd":["think"],"(when from":["=="],"(when is":["0,"],"(where ranges":["did"],"(where the":["value"],"(which I":["don't"],"(which allows":["passing"],"(which also":["results"],"(which are":["two"],"(which basically":["does"],"(which doesn't":["seem"],"(which follow":["it)."],"(which has":["changed"],"(which hurts":["readability)"],"(which is":["the","once","more","pretty","the","the","very","unlikely)","extremely","what","extremely","what","what"],"(which means":["`list(any)`)."],"(which precedes":["it)"],"(which probably":["ends"],"(which they":["are),"],"(which used":["an"],"(which would":["appear"],"(with `def`),":["but"],"(with a":["space"],"(with filtering":["out"],"(with subtly":["different"],"(with the":["/2","exception","cons"],"(within a":["`downcase`,"],"(within the":["module)"],"(without `!`)":["method,"],"(without regexes)":["to"],"(without sacrificing":["*too*"],"(word ==":["String.upcase"],"(works on":["ranges"],"(x |\u003e":["g)`"],"(x, acc)":["-\u003e"],"(yes, it":["makes"],"(yes, it's":["a"],"(you can":["do"],"(you define":["them"],"(you do":["the"],"(you don't":["need"],"(you're likely":["thinking"],"(you're missing":["the"],"(yours will":["only"],"(zero or":["more"],"({a, b})":["-\u003e"],"(|\u003e) into":["count_all"],"(ü for":["example)."],") I've":["reimplemented"],") do`":["but"],") is":["probably","required"],") when":["it","the"],"). I":["think"],"). That's":["the"],")` could":["be"],")` in":["line"],")instead of":["`cond`"],"* 1.000.000":["=","="],"* 2":["end"],"* 24`":["to"],"* 60":["*"],"* A":["separate"],"* Because":["the","the","the","the","the"],"* Case":["match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match"],"* Check":["out"],"* Compute":["`[]","`[1,","`[1,","`[5,","`[3,","`[1,","`[]","`[1,","`[1,","`[5,","`[3,","`[1,"],"* Could":["you"],"* Do":["you"],"* Does":["the"],"* First":["case","case","case","case","case","case","case","case","case","case"],"* For":["me"],"* Have":["you","you"],"* How":["do"],"* I":["think","like","believe","don't"],"* I've":["renamed"],"* Is":["there","a","there"],"* It's":["possible","common"],"* New":["stack","stack","stack","stack","stack","stack","stack","stack","stack","stack"],"* No.":["Remnants"],"* Oh,":["awesome!"],"* On":["line","lines"],"* Predicate":["functions:"],"* Recursion,":["new","new","no","new","new","no","new","new","no","new","new","no","new","new","no"],"* Second":["case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case"],"* Tail":["recursion,","recursion,","recursion,","recursion,","recursion,"],"* Thanks":["for","for"],"* The":["function","function","`is_silence?`"],"* There":["is","is","is"],"* What":["do","teenager","happens"],"* Why":["reimplement","do"],"* Would":["it"],"* You":["might","can","have","can","can","could","could","could","can"],"* Your":["`is_yelling?`"],"* `&normalize_word(&1)`":["might"],"* `[1,2,3,4]":["++"],"* `[1,2,3]":["++"],"* `[1,2]":["++","++"],"* `[1]":["++"],"* `[?]`":["is"],"* `[]":["++","++"],"* `[a-z,":["A-Z,"],"* `acc":["+","+","+","+","+","+","+","+","+","+"],"* `acc`":["=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","="],"* `do_call(l,":["0)`","0)`","0)`","0)`","0)`"],"* `fn(word)":["-\u003e"],"* `rest`":["=","=","=","=","=","=","=","=","=","="],"* fact(n":["-"],"* in":["elixir"],"* like":["says"],"* log":["n)"],"* normally":["is"],"* return":["value","value","value","value","value","value","value","value","value","value"],"* v2":["end"],"* you":["could","could","could","could"],"** (ArgumentError)":["Unsupported","argument"],"** (FunctionClauseError)":["no","no","no","no"],"** (MatchError)":["no"],"** (SyntaxError)":["/tmp/exercism.io/exercises/elixir/word-count/word-count.exs:5:"],"**/*.ex` to":["find"],"**DRY** where":["possible"],"**is** sort":["of"],"**literal**ly a":["much"],"**note** concat":["doesn't"],"**word_count** exercise,":["but"],"*a lot*":["to"],"*all the":["letters*"],"*always* the":["most"],"*can* be":["used"],"*content* rather":["than"],"*could* do":["if"],"*defensive programming*":["as"],"*do* think":["about"],"*does* rather":["than"],"*elixir-fu-ninja-stylez*, but":["an"],"*everything* through":["methods,"],"*function capture*":["syntax."],"*how* he":["makes"],"*in general":["terms*"],"*in* the":["DNA"],"*inside* of":["function"],"*invalid* chars":["from"],"*is* often":["the"],"*is* something":["I've"],"*is* still":["pre"],"*list* pattern":["matching"],"*meaning* of":["the"],"*much* better.":["See"],"*not* how":["they"],"*not* pipeline":["something"],"*quite* got":["the"],"*really* like":["that"],"*really* loving":["Elixir."],"*really* new":["to"],"*reason* for":["doing"],"*shortest* implementation,":["but"],"*that* guy)":["`alphabetize`"],"*that* was":["the"],"*think* it":["would"],"*think* the":["code"],"*think*the `concat`":["function"],"*to* like":["about"],"*too* DRY":[":-)"],"*too* much":["clarity)?"],"*unpacked* them":["(line"],"*what* `String.downcase`":["does,"],"*why* Bob":["responds"],"*why* we're":["doing"],"*why* you":["might"],"*why*, exactly,":["it"],"*wrong*, just":["think"],"+ &2":["+"],"+ &2))`":["(==","(=="],"+ &2)`":["and","which"],"+ &2`":["and"],"+ ...":["+","+","+"],"+ 1":["end`","end`","end\u003c/code\u003e",")`","end",")`","end\"","end\"","should",")","end`","end`","end`","=","=","end`","=","=","=","=","end`","+","+","=","=","+","=","="],"+ 1\"":["which"],"+ 1\"...":["should"],"+ 1)":["has"],"+ 1).":["In"],"+ 1)`":["?","must","looks","isn't","(something","due"],"+ 1)`.":["This","It's"],"+ 1)```":["is"],"+ 1...":["how"],"+ 1\u003c/code\u003e?":["Cool,"],"+ 1`":["is","into","on","in","is","is","is","is","is","is","is","is","is","is"],"+ 2":["+","+","+"],"+ 2`":["(`if`"],"+ 3":["+","+","+"],"+ 4":["+","+"],"+ 7":["\u003e"],"+ 999":["=","="],"+ 999999,":["or"],"+ @durward`":["is"],"+ `HashDict.update`.":["`HashDict.update`"],"+ combining":["mark"],"+ elem(table,":["c"],"+ filter":["thing"],"+ list/binary":["now."],"+ sum":["xs","rest_of_list"],"+ x":["end)","end`"],"++ (b":["++"],"++ (c":["++"],"++ (d":["++"],"++ [1,":["2]`","2]`"],"++ [3,":["4]`","4.","4]`","4."],"++ [5,":["6]`","6]`","6]`","6]`"],"++ acc]`":["as"],"++ b)":["++"],"++ b`":["that"],"++ c)":["++"],"++ collection`":["you"],"++ d)":["++"],"++ e))))`":["and"],"++ e)`":["because"],"+1 for":["asking","using","Elixir"],"+1 to":["what","that."],"+1, it'll":["make"],", I":["haven´t","usually","think","will","think","will","prefer"],", It":["is"],", Why":["don't"],", `String.split/1`":["splits"],", a":["few"],", also":["sort"],", and":["then"],", but":["`blank?`","because","if","are"],", for":["me","that"],", i":["thought"],", if":["you","you"],", ignore":["this,"],", in":["this"],", is":["this","the","ugly"],", it":["would","can"],", it´s":["not"],", no":["use"],", one":["when","for","when"],", only":["check"],", perhaps":["the"],", so":["I'd"],", the":["names","guards"],", think":["on"],", when":["you"],", you":["could","could","could","could","don't","also","have","could"],", your":["\u003ccode\u003equiet?\u003c/code\u003e","code"],",_} -\u003e":["false"],",do: \"s\"}":["of"],",do: nucleotide":["!="],",do` (it's":["pretty"],",is a":["trick"],",separates with":["the"],",the private":["functions"],"- \"Do":["you"],"- &1`":["is"],"- &1`.":["Appreciate"],"- (c":["-"],"- 1)`":["selects"],"- 1`":["was"],"- ???":["(to"],"- Do":["you","you"],"- Elixir":["is"],"- I":["like","had","appreciate","particularly","saw","need","have","think","actually","can","think","hadn't","should","think","mean","actually"],"- I'd":["totally"],"- I'll":["look"],"- I'm":["finding","sure"],"- I've":["refactored"],"- IMHO":["-"],"- In":["your","`to_rna`,"],"- It's":["the"],"- Looked":["through"],"- Pipe":["convention..."],"- Regarding":["`count`:"],"- Someone":["else"],"- Sorting":["the"],"- Thank":["you."],"- Thanks":["for","for"],"- The":["foldl","`Dict`"],"- You":["can","can","could"],"- `Enum.zip/2`":["is"],"- `Regex.scan`...":["fantastic"],"- `String.codepoints`":["is"],"- `defp`...":["will"],"- a":["couple","couple","better"],"- all":["the"],"- and":["there","it"],"- are":["you"],"- but":["it","your","given"],"- can":["you","any"],"- change":["name"],"- classifying":["phrase"],"- could":["that","that","that","it","you"],"- creating":["an"],"- doh!":["Should've"],"- flattening":["the"],"- haven't":["considered"],"- helps":["me"],"- how":["about"],"- if":["you"],"- implementation":["just"],"- incrementing":["the"],"- is":["that","that","there","there","there","this"],"- it":["does","took","feels","would"],"- it's":["more"],"- just":["because"],"- like":["\"_speak\","],"- looking":["good"],"- looks":["much"],"- maybe":["you","you"],"- more":["readable."],"- multiple":["versions"],"- nice":["work","work"],"- nit":["is"],"- normalizing":["the"],"- not":["necessarily","a"],"- once":["for"],"- one":["that"],"- or":["at","if","if"],"- removed":["it"],"- responding":["to"],"- so":["if"],"- still":["not"],"- thanks,":["will"],"- that":["works,","was"],"- that's":["definitely","how","just"],"- the":["\"possible_words\""],"- they":["provide"],"- they're":["a"],"- things":["are"],"- this":["doesn't","one","is"],"- tiny,":["minor"],"- to":["import"],"- totally":["agree"],"- ugh,":["the"],"- uploaded":["another"],"- very":["simple."],"- wasn't":["sure"],"- well,":["almost"],"- what":["we"],"- why":["prefix"],"- wonder":["if"],"- yeah,":["refactored"],"- yes,":["it"],"- you":["have","can"],"-&1 +":["&2"],"-&gt; String.downcase(test_same)":["=="],"-&gt; `words`":["naming"],"-&gt; anagram_match(word,":["word2)"],"-&gt; case?":["As"],"-&gt; end`":["spiel."],"-&gt; is_anagram(word,":["candidate)"],"-&gt; returns":["on"],"-&gt; sorted_cp_list(test_match)":["=="],"-&gt; sorted_word":["=="],"-&gt; v1":["*"],"-&gt; val":["+","+"],"-&gt; x":["*"],"-&gt; x+1":["end)`"],"-&gt; {k,":["count(sequence,"],"-&gt; {x,":["accumulate(x,"],"-&gt; …":["end`"],"-- I":["did","think","like","would","think","think","hadn't","think"],"-- It":["took"],"-- also":["you"],"-- an":["elevator"],"-- any":["way"],"-- are":["there"],"-- by":["adding"],"-- computers":["know"],"-- dictionary":["vs"],"-- great":["job!"],"-- how":["many"],"-- i":["added","can"],"-- is":["there"],"-- it":["seemed","makes","would","could"],"-- it's":["not","not","just","not"],"-- just":["wanted"],"-- less":["to"],"-- maybe":["the"],"-- much":["better"],"-- only":["a"],"-- seems":["like"],"-- so":["I"],"-- starting":["with"],"-- still":["very"],"-- that":["\"?\"","looks"],"-- that's":["neat!"],"-- the":["`\\w`"],"-- they":["have"],"-- those":["regexes"],"-- using":["the"],"-- very":["clever!"],"-- we":["have","don't"],"-- what":["is"],"-- which":["is"],"-- you":["should"],"--- I'll":["fix"],"-1 on":["line"],"-1 pattern":["match"],"-1 that":["mapped"],"-1) ==":["\"?\""],"-1)` doesn't":["sound"],"-1)` or":["just"],"-1)`, have":["you"],"-\u003e !function.(x)":["end)"],"-\u003e \"#{verse(count)}\\n\"":["end"],"-\u003e \"Fine.":["Be","Be","Be"],"-\u003e \"Woah,":["chill","chill"],"-\u003e #":["what","h"],"-\u003e (http://elixir-lang.org/docs/stable/String.html#split/1)":["."],"-\u003e (list":["-\u003e"],"-\u003e ...":["end`","end`)","end`","end)`."],"-\u003e ...\"":["when"],"-\u003e ...;":["false"],"-\u003e ...`":["is"],"-\u003e 1":["+","+"],"-\u003e String.length(word)":["=="],"-\u003e [":["head"],"-\u003e [x|acc]":["end))"],"-\u003e ```.":["The"],"-\u003e a":["!=","+","!="],"-\u003e acc":["+","\u003c\u003c\u003c"],"-\u003e acc`,":["this"],"-\u003e append(acc,":["l))","l))","l))"],"-\u003e c":["+"],"-\u003e case":["condition2"],"-\u003e count+1":["end`"],"-\u003e do_count(t,":["acc","acc","acc","acc","acc"],"-\u003e false":["end`"],"-\u003e filter(tail,":["f)"],"-\u003e first":["+","+"],"-\u003e hd(l)":["end`)."],"-\u003e if":[":calendar.valid_date(year,",":calendar.valid_date(year,","divides?(n,"],"-\u003e is_anagram_match?(target,":["dc)"],"-\u003e is_superlist(t,":["b,"],"-\u003e left":["!="],"-\u003e list)))":["::"],"-\u003e reverse(tail,":["[head|reversed_list])"],"-\u003e same_word(target,":["dc)"],"-\u003e true":["end)`:"],"-\u003e true;":["{_"],"-\u003e val":["+"],"-\u003e value":["+","+"],"-\u003e variety":["for"],"-\u003e word":["=="],"-\u003e x":["+","+","+","end):","end):"],"-\u003e {":[":ok,",":ok,"],"-\u003e\u003c/code\u003e is":["basically"],"-\u003e` up,":["added"],"-\u003e`, though,":["can"],". Also":["the"],". And":["you","then"],". But":["the"],". I":["know"],". Is":["it"],". It":["could"],". Now":["that"],". Thanks":["for"],". That":["`Enum.take`"],". The":["tests"],". q.v.":["http://elixir-lang.org/docs/stable/Kernel.SpecialForms.html#&amp;/1"],".(is my":["Groovy"],".. Only":["one"],".. but":["is"],".. else":[".."],".. end`":["inside"],"... +":["999999,","999","999"],"... -\u003e":["..."],"... ]`":["and"],"... but":["if"],"... else":["raise_invalid_stmt(stmt)","if","if","..."],"... end":["end`,"],"... end\"":["block"],"... end),":["but"],"... end`":["to","in"],"... end`)":["but"],"... end`.":["Some"],"... etc":["..."],"... indeed,":["that"],"... is":["there"],"... looks":["great!"],"... vs.":["do"],"... will":["fix!"],"...\" when":["using"],"...) instead":["of"],"...) works":["without"],"...)` works":["fine."],"...)`. Guess":["at"],"..., ...)`":["works"],"..., Dict.get(...))`":["expression","using"],"..., HashDict.get(...))`":["can"],"..., b:":["...)","...]`","...]`"],"...; false":["-\u003e"],"...] (assuming":["`f","`f"],"...]` syntax.":["I"],"...` form":["to"],"...` is":["usually"],"...` kind":["of"],"...`, the":["below"],"...`. Also,":["I"],"...and then":["try"],"...for loose":["definitions"],"...maybe that's":["just"],"...to be":["more"],".1s to":["execute"],".3s or":[".4s."],".An also":["you"],".But for":["this"],".You could":["change"],".ends_with and":[".strip"],".new() in":["the"],".strip for":["instance."],"/ 2":["+"],"/ 24`.":["To","Consider"],"/ 60":["/","/","/","/"],"/ Elixir":["way."],"/ Elixir.":["But"],"/ HashDict's":["that"],"/ clarity.":["Plus"],"/ elixir":["convertion"],"/ lists":["of"],"/ splitting":["functions."],"/ succinctness":["and"],"/ utf8":["\u003e\u003e)."],"// \"\")":["do"],"// 0)":["do","do","do","do"],"/2 to":["show"],"/Users/kimhyunkang/usr/src/elixir/lib/elixir/lib/hash_dict.ex:123: HashDict.update(#HashDict,":["\"go\","],"/me slaps":["himself"],"/me went":["reading"],"/tmp/exercism.io/exercises/elixir/word-count/word-count.exs:5: invalid":["token:"],"/u is":["no"],"0 &&":["text"],"0 (input":["list"],"0 (return":["value","value","value","value","value"],"0 +":["1","1","1","1","1","1","1","1"],"0 and":["ending","1"],"0 case":["and"],"0 end`":["may"],"0 if":["it"],"0 is":["not","fine,"],"0 look":["like?"],"0 maybe":["put"],"0 units":["of","of"],"0) +":["1`"],"0) \u003c":["elem(&2,"],"0) ==":["b`"],"0) in":["to","to"],"0)) |\u003e":["Enum.join`"],"0))`, though":["that's"],"0), spaces":["and"],"0), the":["cost"],"0)` is":["called","called","called","called","called"],"0)` selects":["the"],"0)`. That":["works"],"0)`. This":["is"],"0, &(&1":["+","+"],"0, &(&1+&2))`":["="],"0, 3),":["String.slice(number,"],"0, do:":["\"Pling\""],"0, line":["4"],"0, rather":["than"],"0, when":["is"],"0-9 or":["space."],"0. I":["had"],"0. If":["that"],"0. Without":["numbers"],"0.\" So":["you"],"0.0s regardless":["of"],"0.10 at":["work."],"0.10.0 so":["I"],"0.10.0), an":["exception"],"0.10.1 there's":["a","a"],"0.10.1) to":["get"],"0.10.1, check":["out"],"0.10.2 of":["elixir"],"0.11 and":["indeed"],"0.11.0 release":["the"],"0.12.2 and":["it"],"0.12.2: `%r/\\p{L}/u`":["(`\\p{L}`"],"0.12.3-dev version":["of"],"0.1s, so":["I"],"0.3s to":["0.1s,"],"0.9 on":["my"],"0.9.1 -":["is"],"0` as":["`s","`s"],"0` can":["be","be","be","also"],"0` could":["be"],"0` is":["not","always"],"0` or":["`String.strip(greeting)"],"0` vs":["`foo"],"0`, but":["I"],"0`, result":["is","is","is","is","is"],"0`. But":["I'll"],"0`. Even":["better,"],"0`. Only":["the"],"0`. The":["casual"],"0``` you":["can"],"0s in":["two"],"0} worked":["just"],"0})), fn":["nt,"],"0})` (remember":["that"],"0}, {?C,":["0},","0},","0},","0},"],"0}, {?G,":["0}]","0}]`,","0}]),","0},"],"0}, {?T,":["0},","0},","0},","0}]"],"0}]`, use":["`@oma`"],"0}` by":["itself."],"1 (return":["value","value","value","value","value"],"1 *":["1.000.000","1.000.000"],"1 +":["x","x","rest","1","rest","1","rest","1","2","count(t)","2","rest","1","2","rest","1"],"1 ,":["you"],"1 =":["1","2","1","2","1","2","1","2","1","2"],"1 and":["2"],"1 arg":["ones."],"1 argument":["version"],"1 bottles":["of"],"1 element":["lists."],"1 end":[")`"],"1 end\"":["as","with"],"1 end\u003c/code\u003e":["can"],"1 end`":["to","to","works","is","could","in","as"],"1 or":["more","n","more"],"1 pass:":["you"],"1 should":["be"],"1 to":["9"],"1 unit":["of","of"],"1 |||":["convert(x)"],"1 },":["{","{","{","{","{"],"1\" which":["is"],"1\"... should":["I"],"1) I":["would"],"1) `String`":["had"],"1) `[^a-z0-9":["]`"],"1) `x":["=="],"1) does":["this"],"1) has":["a"],"1) swapping":["the"],"1) why":["should","are"],"1)), &elem(&1,":["0))"],"1))` as":["`baz"],"1))` to":["abbreviate,"],"1). In":["general"],"1)` (something":["done"],"1)` due":["to"],"1)` isn't":["particularly"],"1)` looks":["rather"],"1)` must":["be"],"1)` returns":["a"],"1)` selects":["the"],"1)`, which":["works"],"1)`. It's":["probably"],"1)`. This":["is"],"1)``` is":["how"],"1, &(&1":["+","+"],"1, &1":["+","+"],"1, &1+1)`":["should"],"1, &amp;1":["+","+","+"],"1, 2":["testing\""],"1, 2,":["3"],"1, 3,":["or"],"1, do:":["...","...","\"one\""],"1, fn(c)":["-\u003e"],"1, fn(x)":["-&gt;","-\u003e"],"1, init":["is"],"1, last:":["3]`","4]`"],"1, question?:":["1]"],"1, shouting?:":["1,"],"1, so":["it's"],"1, unwrap:":["1"],"1, when":["is"],"1,000,000 times":["as"],"1-9]` is":["the"],"1. Did":["you"],"1. Have":["you"],"1. How":["is"],"1. I":["suggested","have"],"1. I'm":["curious"],"1. It":["would"],"1. It's":["probably"],"1. Just":["for"],"1. The":["tests","test"],"1. Using":["`collection`"],"1. What":["does"],"1. When":["using"],"1. You":["have","can"],"1. `HashDict.update`":["takes"],"1. `anagram_for?`":["returns"],"1. silence,":["2."],"1. this":["might"],"1. tried":["to"],"1..-1) #=\u003e":["nil`)."],"1... how":["would"],"1..4; r.x`":["and"],"1.0 yet":[":-)"],"1.0, and":["I'm"],"1.000.000 =":["1.000.000","1.000.000"],"1.000.000 steps":["but","but"],"1.000.000 steps.":["The","The"],"1.0` is":["true"],"1.0} do":["{a,"],"10 and":["11"],"10 by":["moving"],"10 contains":["a"],"10 digits":["list","we're"],"10 elements":["the","the"],"10 won't":["match"],"10. At":["that"],"10.2-dev and":["see"],"100 words":["in","100"],"100% credit":["for"],"100% sure":["they"],"100, subtract":["that"],"1000 elements":["it's","takes","it's","takes"],"1000 times":["as"],"1000`, `./bench.ex":["10000`)."],"100` thing":["is"],"100`, `./bench.ex":["1000`,"],"1024 nucleotide":["sequence"],"1072, 32,":["1085,"],"1085, 1077,":["1090]"],"11 and":["13","then"],"11 bytes":["because"],"11 comes":["from."],"11 digits":["and"],"11 seem":["prime"],"11, I":["was"],"111 you":["will"],"12 -\u003e":["first"],"12 as":["I"],"12 you":["are","have"],"12-16. Have":["you"],"13 are":["probably"],"13 tests":["pass."],"13 using":["`HashDict.new(enumerable,"],"14 ,":["is"],"14 your":["Regex"],"14, 18":["and"],"14-22 and":["also"],"15 and":["16."],"15 doesn't":["improve"],"15 twice":["(once"],"15) I":["also"],"15), I":["decided"],"15. You're":["using"],"16 and":["18"],"16 as":["`&amp;Kernel.+(&amp;1,"],"16 improves":["performance"],"16 should":["have"],"16. I":["tried"],"16. If":["the"],"16. Submitting":["a"],"16. These":["functions"],"16: The":["pipe"],"16\u003e unicode:characters_to_list(\u003c\u003c":["\"да"],"17 could":["be"],"176, 32,":["208,"],"18 I":["would"],"18 and":["22,"],"18 would":["make"],"18-20, I":["tried"],"180, 208,":["176,"],"181, 209,":["130]"],"189, 208,":["181,"],"19 (the":["8th"],"19 required?":["Could"],"19 seems":["to"],"19 to":["make"],"1\u003c/code\u003e? Cool,":["eh?"],"1]`, and":["just"],"1_000_000_000 /":["60"],"1_000_000_000) /":["60"],"1` in":["the"],"1` into":["an"],"1` is":["clever.","computed,","computed,","computed,","computed,","computed,","computed,","computed,","computed,","computed,","computed,"],"1` on":["line"],"1` was":["wrong"],"1`, result":["is","is","is","is","is"],"1st list":["to"],"1st one.":["I"],"1}, {\"2\",":["1}"],"1}, {\"as\",":["1},"],"1}, {\"carpet\",":["1},"],"1}, {\"java\",":["1},"],"1}, {\"javascript\",":["1}"],"1}, {'A',":["3},"],"1}, {'DG',":["2},"],"2 &amp;":["n."],"2 (input":["list"],"2 +":["1","3","3","3"],"2 ,do:":["\"s\"}"],"2 a":["special"],"2 and":["4."],"2 arguments).":["I"],"2 arguments.":["In"],"2 arithmetic.":["So,"],"2 because":["they"],"2 days":["ago","ago."],"2 for":["a"],"2 functions":["can"],"2 goals,":["but"],"2 helpers":["with"],"2 hours,":["but"],"2 in":["`for`"],"2 is":["the","slightly"],"2 like":["this:"],"2 main":["styles:","styles:"],"2 methods":["I"],"2 methods.":["But"],"2 parameters":["that"],"2 params.":["How"],"2 pattern":["matchings."],"2 remains":["a"],"2 sides":["are"],"2 spaces":["would","for","for","per","instead","per"],"2 tests,":["but"],"2 than":["this"],"2 things":["I"],"2 things,":["both"],"2 times":["as","as"],"2 to":["`count`","`count`","`count`","`count`","`count`"],"2 versions":["of","of"],"2 x":["5"],"2 you":["can"],"2) ==":["0"],"2) Could":["have"],"2) I":["think"],"2) Piping":["multiple"],"2) `(String.strip":["x)`"],"2) `[^[:alnum:]":["]`,"],"2) elixir":["has"],"2) is":["there"],"2) projecting":["the"],"2), the":["cost"],"2, 3":["if's","(i.e."],"2, 3\"":["has"],"2, 3\")":["=="],"2, 3\"`,":["which"],"2, 3,":["4,","4,","4]`,","4]","4,","4,","4]`,","4]","4,","4,"],"2, 3.\"":["as"],"2, 3]":["++","++"],"2, 3`":["case"],"2, I":["could"],"2, do:":["3,"],"2, then":["3,","3,"],"2-argument version":["of"],"2-space indentation,":["but"],"2. Character":["literals"],"2. Check":["out"],"2. For":["composing"],"2. I":["noticed","don't"],"2. It":["feels"],"2. Probably.":["I"],"2. Should":["your"],"2. Sorry,":["don't"],"2. The":["`&`"],"2. There":["is"],"2. Thinking":["about"],"2. Will":["do,"],"2. Would":["it"],"2. You":["are","have"],"2. `append`":["and"],"2. `x`":["isn't"],"2. asking,":["3."],"2. let":["me"],"2.000.000 is":["still","still"],"2.6.2 section":["of"],"20 actually":["reads"],"20 can":["be"],"20 of":["your"],"20, such":["as"],"20000000 which":["is"],"208, 176,":["32,"],"208, 181,":["209,"],"208, 189,":["208,"],"21 is":["getting"],"22 with":["`String.ends_with?`"],"22, despite":["the"],"22. Also":["you"],"23 you":["don´t"],"23) and":["then"],"24 and":["replace"],"24` to":["avoid"],"24`. Consider":["adding"],"24`. To":["my"],"25. (But":["I"],"256 plus":["the"],"256-tuple lookup":["table."],"26 and":["27"],"26 presses":["of"],"27 in":["to"],"27 presses":["of"],"28 with":["`[_|t]"],"2] ++":["[3]","[3]","[3,","[3,","[3,","[3,"],"2]) =\u003e":["\"*2\""],"2])` gives":["`\"a2\"`."],"2], [3,":["4],","4],"],"2]`, `l`":["=","="],"2^64-1 is":["a"],"2` (`if`":["is"],"2` clause":["in"],"2` guard":["clauses"],"2nd list.":["Wasn't"],"2nd param":["of"],"2nd version":["is"],"2}, {\"1\",":["1},"],"2}, {'C',":["1}]"],"3 &amp;":["10."],"3 (":["http://exercism.io/submissions/522faad3b432ab395a000265"],"3 (i.e.":["`\"\\000\","],"3 +":["...","4","4"],"3 and":["15)","once","4?"],"3 checks,":["so"],"3 components":["of"],"3 could":["be"],"3 helper":["functions"],"3 languages":["=)"],"3 methods":["is_saying_nothing?,","you"],"3 pipelines":["on"],"3 places":["in"],"3 private":["methods"],"3 sides":["are"],"3 times,":["but"],"3 vs":["2"],"3 ||":["d+2`,"],"3\" has":["to"],"3\") ==":["\"Whatever.\""],"3\"`, which":["is"],"3) ==":["0,"],"3), String.slice(number,":["3,","6,"],"3)\u003c/code\u003e? A":["\u003ccode\u003ewhen\u003c/code\u003e"],"3, 3),":["String.slice(number,"],"3, 4,":["...]","...]","5,","5,","5,","5,"],"3, 4]":["++","++"],"3, 4]`,":["`l`","`l`"],"3, I":["just"],"3, or":["5."],"3, or:":["d"],"3, then":["4,","4,"],"3. Awesome.":["I'm"],"3. Check":["out"],"3. Do":["you"],"3. What":["would"],"3. Your":["`map`"],"3. i":["will"],"3. shouting,":["4."],"3.\" as":["shouting."],"30 and":["one"],"30, I'm":["wondering"],"30, and":["make"],"30-35. They":["are"],"31557600 would":["make"],"32 could":["be"],"32, 1085,":["1077,"],"32, 208,":["189,"],"32, you":["could"],"3X slower":["than"],"3] ++":["[4]","[4]"],"3]` (which":["is"],"3` case":["and"],"3rd iteration":["along"],"3}, {'T',":["2},"],"4 (input":["list"],"4 +":["...","..."],"4 ,":["you"],"4 a":["little"],"4 and":["12"],"4 but":["perhaps"],"4 can":["probably"],"4 if":["letter_freq(source)"],"4 is":["confusing,"],"4 strings.":["But"],"4 times":["on"],"4 times;":["could"],"4 was":["an"],"4 would":["be"],"4 },":["{"],"4) then":["the"],"4)` for":["me,"],"4, ...]":["(assuming","(assuming"],"4, 400":["and"],"4, 5,":["6]`","6]`,","6]`","6]`","6]`,","6]`"],"4, could":["you"],"4, how":["would"],"4. 5,":["6]`","6]`"],"4. Even":["though"],"4. I'm":["not"],"4. It":["may"],"4. They":["were"],"4. anything":["else."],"400 and":["100?"],"400 exception":["out"],"400) ||":["!multiple_of?(year,"],"44 you":["could"],"499.999.500.000 steps.":["The","The"],"499999500000. There":["exists"],"4] ++":["[5,","[5,","[5,","[5,"],"4], [5,":["6]]`.","6]]`."],"4]` (i.e.":["a"],"4]`, `l`":["=","="],"4` always":["parses"],"5 and":["11)","15)","line"],"5 as":["well"],"5 days,":["did"],"5 factors":["list)."],"5 letter":["chunks."],"5 multiple.":["That's"],"5 orders":["of"],"5 refers":["to"],"5 to":["name"],"5 |\u003e":["Enum.map(&String.upcase/1)"],"5) |\u003e":["Enum.map(&String.upcase/1)`."],"5, 6]`,":["`l`","`l`"],"5, but":["you"],"5, didn't":["seem"],"5, hash_dict":["is"],"5. (Ignore":["2"],"5. The":["pipeline"],"50`), and":["now"],"52). Yes,":["I"],"55) units":["of","of"],"6 and":["7"],"6 digit":["limit"],"6 iterations":["to"],"6, 4)]`":["?"],"6.7 at":["http://elixir-lang.org/getting_started/6.html."],"60 *":["60","24`"],"60 /":["60","24`.","60","24`."],"6: !shouting?(message),":["would"],"6] ++":["[]`","[]`"],"6]]`. Here's":["what","what"],"6]`, `l`":["=","=","=","="],"7 \u003e":["12"],"7 are":["indented"],"7 because":["it"],"7 is":["a"],"7 submissions":["into"],"7, do":["you"],"7, you":["could"],"7but ASCII,":["this"],"8 all":["the"],"8 and":["9,","10"],"8 element":["list,"],"8 in":["terms"],"8 is":["not","the"],"8 lines":["by"],"8 picking":["up"],"8 working,":["but"],"8-minute mark":["in"],"8. It":["does"],"80 char":["limit."],"80 character":["rule?!"],"80 characters":["it's","it's"],"80 chars":["line"],"86400 in":["a"],"8th line":["of"],"9 (no":["0),"],"9 and":["line"],"9 lines":["(inside"],"9 test":["cases."],"9, but":["other"],"9-11 don't":["seem"],"99 bottles":["of","of"],"99. I":["changed"],"999 =":["499.999.500.000","499.999.500.000"],"999999, or":["`Enum.reduce(0..999999,"],": I":["felt"],": If":["you"],": carpet":["as","as"],": is":["more"],":) (Only":["works"],":) .":["But"],":) ...":["indeed,"],":) Anyway":["after"],":) Consider":["this"],":) Glad":["I"],":) Hope":["you"],":) I":["have","would","could"],":) I'll":["go"],":) I'm":["still","not"],":) I've":["checked"],":) Just":["in"],":) Looks":["like"],":) Takes":["a"],":) Thanks":["for"],":) Whitespace":["fixed,"],":) Yeah,":["that"],":) and":["yes,"],":), and":["being"],":). Do":["you"],":). Is":["there"],":). Overall":["I'm"],":-) Do":["you"],":-) I":["tried"],":-) I'm":["still"],":-), but":["great"],":-). Here's":["a"],":-D Thanks.":["I'll"],":/ But":["yeah,"],":/ Sorry":["about"],":: (any":["-\u003e"],":: [binary,":["size(1)],","size(10)]\u003e\u003e"],":: any`":["above"],":: any`.":["However"],":: iter`":["and"],":a]` or":["`&foo(&1)`"],":all message":["should"],":a}`, `&[&1,":[":a]`"],":calendar.day_of_the_week(year, month,":["d)","d)"],":calendar.valid_date(year, month,":["d)","d)"],":first -\u003e":["first"],":functions, Statement`":["you"],":inline, wrap:":["1,"],":isosceles }`":["and","clauses"],":kind` terms.":["It"],":list.sort over":["Enum.sort."],":lists.keyfind(:import, 1,":["7)"],":lists.mapfoldl (Erlang's":["flat_map)"],":lists.sort String.codepoints":["word"],":math.pow(2,64) -":["1`"],":math.pow(2,64) ==":["(:math.pow(2,64)-1)"],":math.pow/2 worked":["fine"],":math.pow? That":["is"],":ok, :isosceles":["}`","}`"],":ok, chars":["}","}"],":privmsg, message":["}"],":teenth -\u003e":["first"],":teenth when":["first"],":thumbsup: from":["me"],":timer.tc(Test, :bad,":["[1..n])"],":timer.tc(Test, :good,":["[1..n])"],":whatever ```":["and","to"],";) I":["completely"],";) In":["general"],";). I":["Like"],";). If":["you"],";-) I":["learned"],";-) I'm":["by"],";-) what":["about"],";-). I'm":["still"],";P )":["I've"],"\u003c 256":["plus"],"\u003c elem(&2,":["0)))"],"\u003c value":["do"],"\u003c- {":[":privmsg,"],"\u003c\u003c head":["::"],"\u003c\u003c\u003c (n":["-"],"\u003c\u003c\u003c 1":["|||"],"\u003c\u003c\u003c n)":["-","-"],"\u003c\u003c\u003e\u003e is":["for","used"],"\u003c\u003c\u003e\u003e works":["for"],"\u003c\u003c??\u003e\u003e is":["a"],"\u003c\u003cvar\u003e\u003e will":["match"],"\u003c= ?9,":["do:"],"\u003c= ?Z":["-\u003e"],"\u003c= ?z,":["do:"],"\u003c= end_verse\u003c/code\u003e":["was"],"\u003c\u003e \"teenth\"))(month,":["year),","year),"],"\u003c\u003e chars`":["by"],"\u003c\u003e translate(...)`":["as"],"\u003c\u003e y}D\"`":["(=="],"\u003ccode\u003e fn(value)":["-\u003e"],"\u003ccode\u003e\"\" ==":["string\u003c/code\u003e."],"\u003ccode\u003e&1 +":["1\u003c/code\u003e?"],"\u003ccode\u003e//\u003c/code\u003e for":["the"],"\u003ccode\u003e:shout\u003c/code\u003eing --":["are"],"\u003ccode\u003e\u003c=\u003c/code\u003e implied":["something"],"\u003ccode\u003e==\u003c/code\u003e to":["make"],"\u003ccode\u003e?\u003c/code\u003e and":["remove"],"\u003ccode\u003eBitString\u003c/code\u003e feels":["too"],"\u003ccode\u003eDict.update(...) |\u003e":["generate_counts(tail)\u003c/code\u003e"],"\u003ccode\u003eDict\u003c/code\u003e data":["structure?"],"\u003ccode\u003eEnum.filter/2\u003c/code\u003e for":["match"],"\u003ccode\u003eEnum.map_join/3\u003c/code\u003e for":["\u003ccode\u003esing/2\u003c/code\u003e."],"\u003ccode\u003eEnum.reduce\u003c/code\u003e help":["simplify"],"\u003ccode\u003eHasDict.update/4\u003c/code\u003e ,":["one"],"\u003ccode\u003eHasDict.update/4\u003c/code\u003e and":["\u003ccode\u003eList.foldl/3\u003c/code\u003e"],"\u003ccode\u003eHashDict.put() |\u003e":["count_word(tail)\u003c/code\u003e"],"\u003ccode\u003eHashDict.update/4\u003c/code\u003e -":["it"],"\u003ccode\u003eHashDict.update/4\u003c/code\u003e Might":["simplify"],"\u003ccode\u003eHashDict.update/4\u003c/code\u003e is":["supported"],"\u003ccode\u003eList.foldl/3\u003c/code\u003e and":["\u003ccode\u003eHashDict.update/4\u003c/code\u003e?","\u003ccode\u003eHashDict.update/4\u003c/code\u003e","\u003ccode\u003eHashDict.update/4\u003c/code\u003e"],"\u003ccode\u003eMessage\u003c/code\u003e record":["identify"],"\u003ccode\u003eRegex.scan...\u003c/code\u003e do?":["How"],"\u003ccode\u003eRegex.scan/2\u003c/code\u003e and":["pass"],"\u003ccode\u003eSpeech\u003c/code\u003e say":["as"],"\u003ccode\u003eString.ends_with?\u003c/code\u003e. Do":["they"],"\u003ccode\u003eString.split/1\u003c/code\u003e and":["also"],"\u003ccode\u003eString.upcase/1\u003c/code\u003e and":["\u003ccode\u003eString.ends_with?\u003c/code\u003e."],"\u003ccode\u003e\\w\u003c/code\u003e character":["class?"],"\u003ccode\u003ea,a\u003c/code\u003e and":["\u003ccode\u003ea,b\u003c/code\u003e"],"\u003ccode\u003ea,b\u003c/code\u003e don´t":["say"],"\u003ccode\u003eall_caps?\u003c/code\u003e interprets":["to"],"\u003ccode\u003eanagram?\u003c/code\u003e with":["pattern"],"\u003ccode\u003econd\u003c/code\u003e. Pattern":["matching"],"\u003ccode\u003ecount_fnx\u003c/code\u003e in":["a"],"\u003ccode\u003edef sing(start_verse,":["end_verse)"],"\u003ccode\u003eelse\u003c/code\u003e -":["is"],"\u003ccode\u003eempty?\u003c/code\u003e and":["\u003ccode\u003eupcase?\u003c/code\u003e"],"\u003ccode\u003eexercism submit":["old-exercise-file.exs\u003c/code\u003e."],"\u003ccode\u003efold\u003c/code\u003e or":["\u003ccode\u003ereduce\u003c/code\u003e."],"\u003ccode\u003egenerate_counts\u003c/code\u003e so":["you"],"\u003ccode\u003eguards\u003c/code\u003e here":[".An"],"\u003ccode\u003eguards\u003c/code\u003e or":["pattern"],"\u003ccode\u003eguards\u003c/code\u003e) for":["response"],"\u003ccode\u003ehey\u003c/code\u003e function":["to"],"\u003ccode\u003einterpret\u003c/code\u003edecision vs.":["the"],"\u003ccode\u003einvalid_string?(str)\u003c/code\u003e function":["which"],"\u003ccode\u003eis_\u003c/code\u003e in":["predicate"],"\u003ccode\u003eis_anything_else?(_)\u003c/code\u003e. I":["can"],"\u003ccode\u003eis_forceful?\u003c/code\u003e is":["never"],"\u003ccode\u003eis_nil?\u003c/code\u003e but":["I"],"\u003ccode\u003elast_one\u003c/code\u003e -":["is","is"],"\u003ccode\u003elist\u003c/code\u003e function":["could"],"\u003ccode\u003en-1\u003c/code\u003e to":["verse?"],"\u003ccode\u003equestion: true\u003c/code\u003e.":["Then"],"\u003ccode\u003equestion?\u003c/code\u003e --":["is"],"\u003ccode\u003equiet?\u003c/code\u003e function":["could"],"\u003ccode\u003ereplace\u003c/code\u003e. Replace":["seems"],"\u003ccode\u003erespond\u003c/code\u003e function.":["I"],"\u003ccode\u003erespond_to\u003c/code\u003e decision.":["Very"],"\u003ccode\u003es\u003c/code\u003e doesn´t":["say"],"\u003ccode\u003esing(2, 3)\u003c/code\u003e?":["A"],"\u003ccode\u003esing/2\u003c/code\u003e in":["line"],"\u003ccode\u003etrue -\u003e\u003c/code\u003e":["is"],"\u003ccode\u003eupcase\u003c/code\u003e --":["what"],"\u003ccode\u003eupcase?\u003c/code\u003e that":["describe"],"\u003ccode\u003eupdate_count\u003c/code\u003e to":["\u003ccode\u003eupdate_count(word,"],"\u003ccode\u003eupdate_words(&amp;1, &amp;2)\u003c/code\u003e":["inside"],"\u003ccode\u003ev0.10.0\u003c/code\u003e the":["\u003ccode\u003eHashDict.update/4\u003c/code\u003e"],"\u003ccode\u003everse/1\u003c/code\u003e with":["the"],"\u003ccode\u003eyelling?\u003c/code\u003e and":["one"],"\u003chttps://github.com/elixir-lang/elixir/blob/v0.12.0/lib/elixir/lib/range.ex\u003e: the":["source"],"\u003cname\u003e(\u003cparams\u003e), do:":["\u003caction\u003e"],"= \"B\";":["y"],"= \"C\";":["\"A#{x"],"= \"ZOMG":["THE"],"= \"car":[":"],"= \"one":["fish"],"= %r{\\w+}":["|&gt;"],"= &(&1":["-&1"],"= &[&1|&2]`":["it's"],"= &amp;(Regex.split":["%/r\\W+/,"],"= &amp;String.strip/1`":["gives"],"= 0":["(return","(return","(return","(return","(return"],"= 0`,":["result","result","result","result","result"],"= 1":["(return","(return","(return","(return","(return"],"= 1..4;":["r.x`"],"= 1.000.000":["steps.","steps."],"= 1`,":["result","result","result","result","result"],"= 499.999.500.000":["steps.","steps."],"= 499999500000.":["There"],"= :timer.tc(Test,":[":good,",":bad,"],"= Cell.create`,":["just"],"= Enum.reduce(first..last,":["nil,","nil,"],"= HashDict`":["assignment,"],"= Regex.scan(%r/[\\p{L}\\p{N}]+/,":["s)"],"= String.downcase(anagram)":["|\u003e"],"= String.to_char_list!`.":["In"],"= String.to_char_list(...)`":["can"],"= String.upcase(alphabetize(input))`":["and"],"= [":["..."],"= [String.slice(number,":["0,"],"= [{'AEIOULNRST',":["1},"],"= [{1,":["'AEIOULNRST'},"],"= _count(tail)```":["does"],"= `&hd(&1)`":["="],"= `[1,":["2]`","2]`,","2,","2,","2]`","2,","2]`","2]`,","2,","2,","2]`","2,"],"= `[3,":["4]`","4]`","4,","4]`","4]`","4,"],"= `[5,":["6]`","6]`","6]`,","6]`","6]`","6]`,"],"= `[]`,":["`l`","`l`","`l`","`l`"],"= `fun":["l"],"= a":["-\u003e"],"= a,":["b,"],"= an":["implementation."],"= any":["unicode"],"= bottles":["-"],"= dow_in_range(unquote(1+4*7),":["unquote(7+4*7),","unquote(7+4*7),"],"= first":["element"],"= from_bottles..to_bottles":["|&gt;"],"= fun":["x","x","_,"],"= implementation.":["Exception:","(There"],"= interface,":["`HashDict`","`HashDict`","HashDict"],"= rest":["of"],"= something":["||","||","||","||"],"=) Thanks":["for"],"=) Think":["I"],"=:= is":["generally"],"== \"\"":["or","as","end`.","end"],"== \"\"))":["#"],"== \"\"`":["is","in","and","is","(I","is","and","instead"],"== \"\"`)?":["Is"],"== \"\"`,":["it"],"== \"\"```.":["Pattern"],"== \"?\"":["but"],"== \"?\"`":[".","can","as","you","can"],"== \"?\"`).":["One"],"== \"Fine.":["Be","Be","Be"],"== \"HEY":["MAN\")`"],"== \"Woah,":["chill","chill"],"== \"£\"`":["are"],"== ...`.":["Also,"],"== 0":["maybe","end`"],"== 0)":["in","in"],"== 0,":["do:"],"== 0.":["Without"],"== 0`":["?","vs","or","could","can","can","is","as","can","as"],"== 0`,":["but"],"== 0`.":["The","Only","Even"],"== 0```":["you"],"== 1,":["do:","do:"],"== 1.0`":["is"],"== 2,":["do:"],"== 2`":["clause"],"== 4)`":["for"],"== 4`":["always"],"== :math.pow(2,64)":["-"],"== @amanda":["+","+"],"== Compilation":["error"],"== String.downcase(word)":["end)"],"== String.strip(input)`.":["It"],"== String.strip(phrase)":["```"],"== String.upcase":["msg","msg","word`","word)`.","word`)","word`."],"== String.upcase(message)```":["looks"],"== String.upcase(speech))":["in"],"== String.upcase(text)`":["into"],"== String.upcase(x)`":["alone"],"== String.upcase(x)`:":["String"],"== String.upcase(x)`?":["That"],"== [?A,":["?B,","?T,","?B]`."],"== `[?A,":["?T,","?T,"],"== b":["-\u003e","&&","||"],"== b`":["could"],"== c":["-\u003e"],"== c`":["means","means"],"== dow":["do","do"],"== e`":["can"],"== input":["&&"],"== input)":["in"],"== input`":["reduces"],"== is":["allowed"],"== m":["do"],"== m,":["do:"],"== nil":["?"],"== nil,":["do:"],"== nucleotide))`":["instead","using"],"== nucleotide))`,":["but"],"== nucleotide)`":["should","in"],"== phrase),":["do:"],"== s":["&&"],"== something":["|\u003e","|\u003e"],"== sort(anagram)":["end"],"== sorted_cp_list(word)":["end)"],"== sorted_letters(&amp;1))":["works."],"== sorted_letters(&amp;1)`":["or"],"== sorted_word)":["appears"],"== string```":["but"],"== to)":["would"],"== word)`":["instead","as"],"=== \"\",":["do:"],"=== in":["JavaScript."],"=== is":["because,"],"=`, you":["are"],"=~ %r/[A-Z]+/`":["you"],"=~ %r/\\p{Lu}/`":["is","is"],"=~ %r/\\p{L}/`":["is","is"],"=~ operator.":["But"],"\u003e 0":["&&","do"],"\u003e 0`":["can"],"\u003e 1,":["do:"],"\u003e 12":["-\u003e"],"\u003e In":["same_word?"],"\u003e Is":["there"],"\u003e Why":["not"],"\u003e You":["have"],"\u003e You're":["doing"],"\u003e added":["a"],"\u003e127 to":["it)."],"\u003e= 0":["and"],"\u003e= 0`.":["But"],"\u003e= ?0":["and"],"\u003e= ?A":["and"],"\u003e= ?a":["and"],"\u003e\u003e\u003e) with":["the"],"? Functions":["with"],"? Similar":["question"],"? in":["it"],"?!, yeah?":[":)"],"?. I":["would"],"?0 and":["c"],"?9, do:":["c"],"?\u003ca character\u003e":["returns"],"??? (to":["use"],"?A and":["c"],"?A, ?T,":["?C,"],"?B, ?C]`.":["No"],"?B], \"C\",":["[[[\"D\"]]]])`"],"?B]`. Using":["a"],"?C, ?G":["]"],"?C, ?G]`),":["in"],"?C]`. No":["need"],"?G]`), in":["Elixir"],"?T and":["?U,"],"?T, ?C,":["?G","?G]`)","?G])`","?G]`),"],"?U, but":["I"],"?\\n]) |\u003e":["iolist_to_binary`","iolist_to_binary"],"?a and":["c"],"?z -":["(c"],"?z, do:":["?z"],"@ reminds":["me","me"],"@abby I":["do"],"@abner? Converting":["a"],"@abraham Once":["again,"],"@agustina (for":["which,"],"@ahmad's feedback:":["I"],"@allen I":["see"],"@amanda +":["1`","1`"],"@amira I've":["updated"],"@anabel attribute,":["i.e."],"@annalise processing,":["I"],"@antonette. Nice":["to"],"@ayden is":["very"],"@ayden, if":["you"],"@bailee! I":["might"],"@bennie Argh.":["I've"],"@bernadette nice,":["that'll"],"@bertha response.":["But"],"@beth That's":["definitely"],"@bette I":["hope"],"@betty thanks":["so"],"@beulah said,":["this"],"@bill, sadly,":["right"],"@boris said:":["In"],"@brando import":["is"],"@bridie. I":["didn't"],"@brisa :":["If"],"@cade for":["the"],"@caesar I":["wrote"],"@camryn Thank":["you"],"@candida, thanks":["for"],"@carlee: For":["some"],"@carmel aren't":["atoms,"],"@carole, as":["far"],"@carole, my":["comment"],"@cassie regarding":["the"],"@cayla I":["guess"],"@cecile thank":["you"],"@charity Regarding":["your"],"@chelsey sorry":["but"],"@chesley Hmmm...":["I"],"@coleman thanks,":["that"],"@coleman, @coleman":["thanks,"],"@concepcion, about":["the"],"@constance I":["understand"],"@constance Not":["sure"],"@cortez I":["dispensed"],"@cydney with":["zeros,"],"@cyril -":["Thanks"],"@damion looks":["great."],"@darian, I":["think"],"@darion I":["agree,"],"@darion Thanks":["again"],"@darrel -":["Thanks"],"@daryl. You":["could"],"@dasia it":["looks"],"@dax so":["should"],"@dax, what":["guards"],"@deanna. I":["don't"],"@dee is":["hinting"],"@dejon to_rna([char])":["::"],"@dejon to_rna(char)":["::"],"@delfina There's":["a"],"@denis. I'm":["still"],"@deshawn {":[":inline,"],"@devante There":["will"],"@dolores It's":["things"],"@durward` is":["interesting."],"@dylan Confirmed.":["The"],"@earlene @earlene":["OK..."],"@earlene OK...":["I"],"@ebony thanks.":["I"],"@eldora thanks":["a"],"@elias awesome,":["I"],"@elyssa condition":["still"],"@emelia I":["am"],"@emelia that's":["awesome,"],"@erna. I":["do"],"@ernestina thanks":["for"],"@ernestine Binary":["append"],"@esmeralda suggested":["replaced"],"@esmeralda suggestion":["about"],"@ettie, this":["iteration"],"@fatima, single":["char"],"@florencio, maybe":["that's"],"@florine Good":["point,"],"@francesco -":["totally"],"@franco! Not":["because"],"@freddie, thanks":["for"],"@gail So":["the"],"@garret, thank":["you"],"@gene I":["thought"],"@georgianna OK...":["I"],"@greta [\"mon\",":["\"tues\","],"@greta thanks":["a"],"@greta, unquote(i+1),":["month,"],"@haleigh, @haleigh:":["I"],"@haleigh: I":["can"],"@haley, updated":["with"],"@hanna. Not":["sure"],"@hattie Yup,":["I"],"@herminia Why":["would"],"@hertha! In":["regards"],"@hillard Queue":["up"],"@hilton Ugh...":["I"],"@howard Of":["course."],"@howard true,":["the"],"@ibrahim [\"mon\",":["\"tues\","],"@ibrahim, unquote(i+1),":["month,"],"@imani, thank":["you"],"@isabelle for":["teaching","your"],"@isac awesome":["suggestions,"],"@jacinto explained":["it"],"@jacinto stays":["on"],"@jacinto, yeah,":["the"],"@jackson and":["@jackson."],"@jackson. Thanks":["for"],"@jan: I'm":["sorry,"],"@janessa, that":["conveys"],"@jannie is":["a"],"@jayda. I":["guess"],"@jennifer Good":["catch,"],"@jewel I'm":["not"],"@joey HashDict.new":["[{?A,"],"@johann response.":["But"],"@johnson Fantastic":["advice."],"@josiane Jose":["Valim,"],"@joy for":["the"],"@juliana This":["exercise"],"@juston. I":["didn't"],"@kaci I":["tried"],"@kailyn Sometimes":["I"],"@kamryn. The":["classic"],"@kariane didn't":["slam"],"@karli -":["thanks,"],"@katherine about":["`String.downcase`"],"@kay pointed":["out"],"@kayla here":["(sorry"],"@kayla!) and":["say"],"@kaylah. I'll":["submit"],"@kayleigh, I":["split"],"@kayli Thanks":["for"],"@kayli's hints":["(thanks"],"@keegan's suggestion":["of"],"@kendall: It":["seems"],"@kendall: One":["issue"],"@keshaun in":["from."],"@keyshawn Thanks":["for"],"@keyshawn filter":["::"],"@keyshawn reduce_with(Enum.t,":["filter,"],"@khalid you":["are"],"@khalid. My":["next"],"@kristofer's code":["and"],"@krystel because":["the"],"@lance with":["examples"],"@lance) |\u003e":["iolist_to_binary()`"],"@larissa. I":["was"],"@lavinia! I":["didn't"],"@leatha Generally":["it's"],"@lemuel See":["my"],"@levi neato!":["I"],"@liliane and":["@liliane."],"@liliane, do":["you"],"@liliane. Just":["curious,"],"@lindsay thanks":["for"],"@linwood! Didn't":["think"],"@lorenz +1":["to"],"@lou, yes,":["you're"],"@loyce I":["one-upped"],"@lukas-w How":["about"],"@lura said.":["You"],"@mable It's":["not"],"@madaline From":["the"],"@maegan Good":["point"],"@magali (both":["with"],"@magali and":["invert"],"@makayla Awesome":["point,"],"@mandy Thanks,":["I"],"@manuela said,":["you"],"@marcelle! Yeah,":["I"],"@margie, I":["will"],"@marilyne, yep":["you"],"@marion [":["?A,"],"@marisa Thanks":["for"],"@marisol I":["forgot"],"@marjorie `Regex.match?(%r/\\pL/,":["\"£\")`"],"@mary. In":["this"],"@mattie -":["Thank","Looked"],"@maureen[max_value] and":["instead"],"@maximillia Imagine":["a"],"@maximillia a":["tip"],"@mckayla: \u003c\u003c\u003e\u003e":["is"],"@meagan, you":["are"],"@melody ,":["I"],"@melyssa I":["was"],"@micaela. I":["was"],"@michaela Thanks,":["I"],"@micheal it":["was"],"@miles :)":["Glad"],"@miles was":["actually"],"@mossie and":["@mossie"],"@mossie recommended.":["Thanks!"],"@myrtle Why":["do"],"@nadia divides?":["now"],"@natalia neat":["nit,"],"@nathanael perhaps":["I"],"@nathanial I":["find"],"@nella. Yeah,":["I"],"@nina covered":["the"],"@obie I'm":["generally"],"@oma `Enum.reduce`":["is"],"@oswaldo Yes":["you"],"@patsy OK...":["I"],"@paxton. I":["appreciate"],"@pearl Try":["running"],"@pedro Took":["your"],"@peter! I've":["cleaned"],"@petra says,":["it's"],"@peyton I":["rolled"],"@phyllis said,":["check"],"@phyllis, your":["regex"],"@providenci and":["@providenci"],"@providenci for":["taking"],"@providenci, I":["thought"],"@providenci, as":["I'm"],"@randal more":["than"],"@raphael Often":["functions"],"@renee I":["completely"],"@reva, thanks":["for"],"@reva. I":["took"],"@rickey I'm":["curious"],"@rosalia I":["could"],"@rosario, Thanks,":["once"],"@rose, I":["have"],"@rosetta good":["point!"],"@rowan. ```&(&1":["+"],"@rowena Thanks,":["just"],"@roxanne significant":["step"],"@royce: Sorry,":["I"],"@rudolph's implementation.":["Much"],"@rudy I":["looked"],"@ryleigh for":["the"],"@sabrina call":["versus"],"@sage and":["@sage."],"@selena thanks":["for"],"@simone Even":["the"],"@stanley HashDict.new":["[{?A,"],"@stanley |&gt;":["Enum.map(fn({k,_})"],"@stanton I":["GOT"],"@stephanie thanks":["for"],"@stephon I":["don't"],"@susanna Well":["that's"],"@sven! That":["was"],"@sydnee means":["is"],"@sylvan, I":["initially"],"@sylvan, thanks,":["I've"],"@tabitha --":["using"],"@tatum Thanks!,":["fixed"],"@tavares cool!":["That"],"@terrence I'd":["love"],"@terry Yep,":["that's"],"@theodore Oh":["good"],"@therese agreed":[":)"],"@theresia That":["should"],"@tracey had":["to"],"@travis comments":["for"],"@travon, thanks":["for"],"@tremayne thanks!":["That"],"@trent had":["a"],"@trent, thanks":["for"],"@treva. I":["was"],"@trisha's suggestion":["is"],"@tyler ,":["no"],"@tyler use":["pattern"],"@velva nucleotide_counts([char])":["::"],"@ward ,":["I"],"@zechariah I":["actually"],"@zella That’s":["the"],"A \u003ccode\u003ewhen\u003c/code\u003e":["guard?"],"A Bitwise-based":["solution."],"A `Dict.get`":["followed"],"A `Dict.put(...,":["...,"],"A big":["problem"],"A bit":["hard","more","less"],"A common":["pattern"],"A cond":["with","with"],"A couple":["more","of","of","of","of","improvements","of","of","of"],"A different":["approach,"],"A duplicated":["or"],"A fairly":["quick"],"A few":["questions","nitpicks.","other","very","functions","comments:","small","small","things:","minor","things","additional","pointers:","remarks:","remarks:"],"A function":["like"],"A good":["nit","rule","way"],"A little":["trick","trick","tip:","tip:"],"A minor":["point","point","point"],"A more":["functional"],"A pipeline":["might"],"A plain":["'exercism"],"A pretty":["literal"],"A range":["solves","`1..3`"],"A reader":["trying"],"A regex":["is"],"A second":["minor"],"A separate":["clause"],"A small":["change","tip"],"A statement":["can"],"A style":["point:"],"A tiny":["nit"],"A variable":["name"],"A very":["clean"],"A while":["ago"],"A-Z alphabet,":["so"],"A-Z and":["not"],"A-Z, 1-9]`":["is"],"A-Z. But":["the"],"AFAIK, there's":["not"],"ALL nucleotides":["in"],"API a":["private"],"API design":["in","at"],"API for":["Teenager?"],"API though.":["Make"],"API. I":["suppose"],"API...if you":["check"],"ASCII numbers":["1,"],"ASCII, but":["that's"],"ASCII, this":["is"],"ASCII. Anything":["else"],"AST into":["normal"],"AST is":["not"],"About `HashDict.update/4`,":["the"],"About aliasing,":["I"],"About indenting":["the"],"About multiple":["versions"],"About the":["private","`expected`"],"About this":["matter,","matter"],"About your":["approach"],"Absolutely nothing":["wrong"],"Accidentally included":["the"],"According to":["some"],"Actually the":["delimiters"],"Actually, I":["was"],"Actually, given":["that"],"Actually, that":["reads"],"Added some":["documentation"],"Added two":["more"],"Adding abstractions":["to"],"Additionally to":["what"],"Additionally, how":["about"],"Additionally, with":["`String.Unicode`"],"Additionally, you":["use","could"],"After a":["few"],"After all":["it"],"After giving":["it"],"After looking":["at"],"After submitting,":["I"],"After thinking":["through"],"After trying":["all"],"Again sorry":["if"],"Again, thanks":["so","for"],"Agree with":["an","@carissa"],"Agreed with":["@franco!"],"Agreed, I":["didn't"],"Agreed, as":["my"],"Agreed, much":["easier"],"Agreed. I'm":["just"],"Agreed. It":["seems"],"Agreed. They're":["different."],"Ah -":["yeah,"],"Ah cool,":["thanks!"],"Ah good":["call"],"Ah indeed!":["Thanks"],"Ah indeed,":["thanks!"],"Ah much":["simpler,"],"Ah nice,":["I"],"Ah yes!":["Awesome."],"Ah yes,":["of"],"Ah, I":["now","was","most","see.","see","like"],"Ah, cool!":["Thanks"],"Ah, cool.":["Thanks","Thanks","I'll","I","Thanks,"],"Ah, good":["point"],"Ah, gotcha.":["Things","I"],"Ah, hadn't":["know"],"Ah, indeed,":["let"],"Ah, nice!":["I"],"Ah, nice..":["I"],"Ah, nice;":["I"],"Ah, now":["I"],"Ah, thank":["you."],"Ah, thanks":["for"],"Ah, thanks!":["I"],"Ah, thanks.":["I"],"Ah, that's":["new","much"],"Ah, yeah,":["good"],"Ah, yes,":["I","I","gen_event"],"Ah, yes.":["`foo[bar]`"],"Ah, you're":["right."],"Ah, your":["right."],"Ah. I":["tried"],"Ah. Thanks":["for"],"Ah... `Stream.with_index`...":["cool."],"Aha, I":["wasn't"],"Aha, after":["a"],"Aha, great":["thank"],"Aha, my":["Elixir"],"Aha. I":["see"],"Aha. so":["List.zip"],"Ahh, good":["call."],"Alas, you":["insist"],"Algebra, that":["wasn't"],"Algorithmically this":["looks"],"Aliases for":["the","the"],"All regex":["all"],"All test":["pass"],"All that":["said,"],"All the":["local","languages"],"All your":["tests"],"Almost there!":["Maybe"],"Along the":["way,"],"Along with":["an"],"Alright, time":["to"],"Also @trent":["had"],"Also I":["prefer","think","tried"],"Also String.ends_with?":["as"],"Also `Dict.update`":["might"],"Also `if(cond,":["do:"],"Also a":["noob"],"Also any":["links"],"Also check":["out"],"Also consider":["that","renaming","if","that"],"Also count_words":["maybe"],"Also empty":["lines"],"Also fixed":["is_shouting?"],"Also for":["the"],"Also good":["call"],"Also instead":["of"],"Also integrated":["@esmeralda"],"Also is":["there"],"Also it":["supports","was","seems","would"],"Also it's":["just","common"],"Also one":["cycle"],"Also really":["interesting"],"Also take":["a"],"Also the":["cond"],"Also there":["must"],"Also think":["about"],"Also you":["could","could","could","could","could","can","downcase","can"],"Also your":["regex"],"Also, Enum.each":["is"],"Also, I":["feel","could","couldn't","believe","think","think","think","might","was","could","hadn't","assume","wanted","couldn't","don't"],"Also, I'd":["prefer","make","prefer"],"Also, I'm":["not","curious"],"Also, I've":["seen","seen"],"Also, `arg`":["is"],"Also, `defp`":["is"],"Also, although":["the"],"Also, as":["@phyllis"],"Also, before":["anyone"],"Also, beware":["of"],"Also, check":["out","out","out"],"Also, checking":["if"],"Also, consider":["declaring","whether"],"Also, did":["I"],"Also, do":["you","you","you","you","you"],"Also, finding":["a"],"Also, for":["the"],"Also, have":["you"],"Also, how":["would","would","are","likely"],"Also, if":["you've"],"Also, in":["the","`bottle_text`,"],"Also, is":["there","there","there"],"Also, it":["seems","seems","pattern","wouldn't","looks"],"Also, it's":["a","not"],"Also, its":["boolean"],"Also, look":["into"],"Also, maybe":["there"],"Also, not":["sure"],"Also, note":["that"],"Also, please":["teach"],"Also, posted":["this"],"Also, predicate":["methods"],"Also, small":["nit"],"Also, some":["of"],"Also, super-picky,":["but"],"Also, take":["a","a","a","a"],"Also, the":["method","string"],"Also, there":["is","is"],"Also, there's":["some"],"Also, think":["about"],"Also, use":["2"],"Also, what":["happens"],"Also, yeah,":["busted"],"Also, yes,":["the"],"Also, you":["can","can","could","could","might"],"Also, you're":["computing","computing"],"Also: Closed-form":["solutions"],"Also: I":["intended"],"Alternative to":["`Enum.concat`:","`Enum.sort`:","`Enum.member?`:"],"Alternatively `lc":["[w]"],"Alternatively because":["the"],"Alternatively it's":["possible,"],"Alternatively something":["like"],"Alternatively you":["could","could"],"Alternatively, did":["you"],"Alternatively, look":["in"],"Although checking":["a"],"Although from":["the"],"Although if":["you're"],"Although it":["is"],"Although this":["one"],"Although, I":["just"],"Although... there":["are"],"Always a":["good"],"Am I":["missing","excused","still"],"Amazing to":["get"],"Ambitious :-)":["I'm"],"An `inc`":["function"],"An alternative":["idea","would","would"],"An example":["for"],"Anagram and":["resubmit):"],"Anagram class":["instantiation),"],"Anagram selection":["logic"],"Anagram#match might":["add"],"Analyzing the":["contents"],"And (please":["don't"],"And I":["do","predict","kind","think","prefer","suppose"],"And I'd":["put"],"And I'm":["happy","happy","happy"],"And `&Kernel.+/2`":["is"],"And any":["other"],"And by":["more"],"And cleaned":["up"],"And comparing":["two"],"And either":["approach"],"And even":["then"],"And here's":["what","what"],"And if":["you","you","you"],"And in":["line"],"And it":["would"],"And line":["14"],"And maybe":["there"],"And merry":["Christmas"],"And now":["that","that"],"And one":["guard"],"And pattern":["matching"],"And since":["I'm"],"And thank":["you,"],"And thanks":["for"],"And that's":["probably","why","the"],"And the":["name","more","\u003ccode\u003elist\u003c/code\u003e","attributes","more","@","thought","process","separate"],"And then":["in","don't","just"],"And there":["is"],"And use":["pattern"],"And we":["take"],"And while":["you're"],"And why":["`foldr`?"],"And with":["elixir"],"And write":["`Enum.reduce(@joey)`."],"And yeah,":["the"],"And yes,":["in"],"And you":["maybe","could","could","will"],"And you're":["right,"],"And, I":["thought"],"Another \"readability\"":["nit"],"Another alternative":["is"],"Another common":["bug:"],"Another de-duplication:":["sing/1"],"Another observation":["is"],"Another performance":["improvement"],"Another potential":["area"],"Another question:":["why"],"Another suggestion":["is","is"],"Another thing":["to"],"Another way":["to","you"],"Any and":["all"],"Any chance":["of"],"Any clues":["or"],"Any feedback?":[":)"],"Any help":["or","would"],"Any hints":["on"],"Any idea":["what","how"],"Any input":["is"],"Any nitpicks":["would"],"Any other":["way"],"Any particular":["reason","reason"],"Any reason":["why","`point_compare`"],"Any suggestions":["would"],"Any takes":["on"],"Any thoughts":["on"],"Any tips":["on"],"Any way":["to"],"Anybody out":["there?"],"Anything I":["can"],"Anything else":["is"],"Anyway after":["the"],"Anyway is":["a"],"Anyway, I":["replaced","think","understand"],"Anyway, I'm":["sure"],"Anyway, just":["some"],"Anyway, reverting":["to"],"Anyway, that's":["just"],"Anyway, you":["should"],"Anyway. Pretend":["those"],"Anyways, thank":["you"],"Anyways, these":["things"],"Apart from":["that"],"Apparently when":["you"],"Append `++`":["takes","takes"],"Applied a":["couple"],"Appreciate it":[":)"],"Appreciate the":["suggestion."],"Appreciated! This":["is"],"Appreciated, @reva.":["I"],"Are `is_`":["and"],"Are all":["these"],"Are silence?/question?/shout?":["really","really"],"Are there":["better","any","names"],"Are they":["sort"],"Are you":["stuck?","familiar","aware","familiar","familiar","familiar","familiar","sure","converting","sure","a","helping"],"Argh. I've":["been"],"Armstrong's?) advice":["NOT"],"Artifact left":["over"],"As @manuela":["said,"],"As I":["think","discovered,","know","had","understand","understand","understand","understand"],"As I'm":["just"],"As `case`":["can't"],"As a":["bonus,","community","clarifying","writer,","general","bit"],"As another":["developer,"],"As far":["as","as","as","as","as","as","as","as","as","as","as","as","as"],"As for":["the","the","improvements,","the","the","downcasing","why","learning","the","`generate`","anonymous","Algebra,","iterators,","naming,"],"As it":["is,"],"As it's":["just"],"As much":["as"],"As of":["now,"],"As primarily":["a"],"As said":["in"],"As someone":["at","who","that","else"],"As things":["stand"],"As this":["seems"],"As we":["are","always"],"As well":["you"],"As you":["point","can","correctly","haven't"],"Aside from":["that,","use","line"],"Assignments feel":["to"],"At a":["glance,"],"At first":["I","I"],"At least":["now"],"At line":["7,"],"At that":["point"],"At the":["moment","very","end"],"At this":["point,","simple","point","point"],"Aussi, `Regex.run":["!="],"Awesome point,":["thanks!"],"Awesome use":["of"],"Awesome! I":["just"],"Awesome! I'll":["try"],"Awesome! It's":["wonderful"],"Awesome! Thanks":["for"],"Awesome, completely":["forgot"],"Awesome, great":["to"],"Awesome. I":["missed"],"Awesome. I'm":["still"],"Awesome. That":["and"],"Awesome. `Enum.filter`":["was"],"BEAM VM.":["Iolists"],"BIFs. But":["if"],"BTW do":["you"],"BTW, I":["didn't"],"BUT. One":["thing"],"Bad idioms":["in"],"Banana is":["an"],"Based on":["`words(words)`,","a","the"],"Basically pattern":["matching"],"Basically, once":["you"],"Be aware":["that","btw"],"Be gentle..":["This"],"Be that":["way!\"","way!\"`","way!\"\"","way.\"","way!\"","way!\"","way!\"","way!\""],"Be the":["solicitor"],"Bear in":["mind"],"Beautiful! Except":["the"],"Beautiful, readable":["and"],"Because I":["like"],"Because `alphabetize`":["strips"],"Because it":["basically"],"Because that's":["how"],"Because the":["stack","stack","stack","accumulator","stack","accumulator","stack"],"Because, if":["anyone"],"Beer Song":["to"],"Beer module,":["so"],"Before flattening":["I"],"Before it":["was"],"Before that":["you"],"Being so":["much"],"Ben, remember":["me"],"Benjamin Tan's":["Elixir"],"Besides being":["complicated"],"Best practices":["include"],"Better and":["better."],"Better still,":["use"],"Better! Check":["out"],"Between this":["version"],"Between those":["two"],"Beyond that,":["you've","I"],"Big oops,":["not"],"Binary append":["is"],"Bitwise solution.":["It"],"Bitwise' instead":["of"],"Bitwise, only_operators:":["true`"],"Bob \"Bob,":["are"],"Bob doesn't":["need"],"Bob exercise":["before"],"Bob from":["answering"],"Bob is":["hearing,"],"Bob needs":["to"],"Bob responds":["a"],"Bob thinks":["about"],"Bob to":["shout"],"Bob would":["describe"],"Bob's problem":["is"],"Bob, how":["are"],"Bonus points":["if"],"Boolean, so":["I"],"Boom. That":["eliminates"],"Both are":["valid"],"Both of":["these"],"Both work":["though."],"Brand new":["to"],"Breaking it":["out"],"Brilliant! One":["other"],"Browsing through":["the"],"Btw do":["you"],"Btw, I":["agree","think"],"Btw, `&(String.from_char_list!(&1))`":["doesn't"],"Btw, `x..y`":["is"],"Btw, if":["you"],"Btw, it":["might"],"Btw, it's":["generally","more","common"],"Btw, my":["own"],"Btw, there":["is"],"Btw, this":["exercise","exercise"],"Btw, to":["use"],"Btw, with":["the"],"Btw, you":["don't"],"Btw. I":["think"],"Btw. you":["can"],"Building that":["HashDict"],"But ,":["it´s"],"But I":["agree","can","haven't","prefer","finally","think","guess","don't","don't","was","don't","couldn't","did","could","didn't","can't"],"But I'd":["appreciate"],"But I'll":["refrain","do"],"But I'm":["also","glad","leaving"],"But I've":["found"],"But `_question?(text)`":["method"],"But a":["few"],"But are":["minor"],"But as":["I"],"But basically":["it"],"But can":["you"],"But decided":["that"],"But from":["a"],"But having":["said"],"But hey,":["it's"],"But if":["nil","anyone","you","we","I"],"But in":["the","any","general","that"],"But is":["a","a","a"],"But it":["is","turns","can","didn't"],"But it's":["a","another","up","not"],"But just":["an"],"But memoization":["is"],"But memoizing":["is"],"But no":["I"],"But now":["that","the"],"But other":["then"],"But saying":["a"],"But still,":["I'm"],"But strangely,":["it"],"But that":["string","might"],"But that's":["really","really","pretty"],"But the":["condition","tests","line","symmetry","word","code","test","rest"],"But then":["I","the","I"],"But there's":["a"],"But these":["kinds"],"But this":["is","is"],"But using":["`%{\\w}`"],"But what":["is"],"But when":["I"],"But why":["you've","`display`?"],"But yeah,":["I","other","`Enum.to_list`","I","I","your"],"But yes,":["you"],"But you":["do"],"But you're":["right,"],"But your":["approach"],"But, hey,":["it"],"By \"update":["the"],"By all":["appearances,"],"By default":["a"],"By relying":["on"],"By that":["I"],"By the":["way,","way,","way.","way,","way,"],"By using":["`scan`"],"C code":["in"],"C level":["of"],"C you":["can"],"C# developer":["that"],"CONSTANTS. I":["don't"],"Calculate meetup":["dates.","dates."],"Calling `String.length/1`":["or"],"Can I":["move","tell","convert"],"Can anyone":["show"],"Can it":["be","even"],"Can that":["be"],"Can you":["take","just","explain","help","think","think","think","think","DRY","reduce","talk","fold","collapse","replace","do","write","elaborate?","give","write","give","avoid","avoid","point","think"],"Can't fault":["you"],"Can't help":["but"],"Can't wait":["to"],"Can't you":["do"],"Care to":["elaborate?"],"Categorising phrases":["seemed"],"Cell be":["a"],"Cell functions.":["In"],"Cell.add_enzyme(cell, RNAPolymerase,":["dna)"],"Cell.create`, just":["noticed"],"Certainly the":["Elixir"],"Changed to":["use"],"Changing \u003ccode\u003eupdate_count\u003c/code\u003e":["to"],"Character Types'":["on"],"Character category":["functions"],"Character lists":["(single"],"Character literals":["can"],"Check it":["out:"],"Check of":["there"],"Check out":["the","`Regex.scan`","\u003ccode\u003econd\u003c/code\u003e.","\u003ccode\u003econd\u003c/code\u003e.","\u003ccode\u003eHashDict.update/4\u003c/code\u003e","\u003ccode\u003eHashDict.update/4\u003c/code\u003e","`Enum.map_join`,","iteration","how","\u003ccode\u003eString.upcase/1\u003c/code\u003e","Enum.reduce","the","\u003ccode\u003eList.foldl/3\u003c/code\u003e","the",".ends_with","`List.zip/1`","functions","also","`List.zip/1`","`HashDict.update/4`","also","`List.zip/1`"],"Checking for":["nil"],"Checkout the":["`String`"],"Christmas and":["New","a"],"Cleaned up":["adding","unnecessary"],"Clever how":["you"],"Clever,Thanks for":["the"],"Clojure [reducers](http://clojure.org/reducers)":["that"],"Clojure as":["well,"],"Clojure implementation":["of"],"Clojure that":["can"],"Clojure uses":["the"],"Clojure's frequencies.":["See"],"Clojure. If":["I"],"Closed-form solutions":["are"],"Code gets":["simpler."],"Code looks":["effective"],"Code reuse":["for"],"Code.eval_quoted and":["I'm"],"Coding the":["anonymous"],"Come to":["think"],"Coming from":["Ruby"],"Coming up":["with"],"Comme en":["Ruby"],"Compare to":["my"],"Compilation error":["on"],"Compute `[1,":["2]","2,","2]","2]","2,","2]"],"Compute `[3,":["4]","4]"],"Compute `[5,":["6]","6]"],"Compute `[]":["++","++"],"Computing length":["of"],"Conceptually it":["is"],"Concerning the":["usage"],"Conciseness vs.":["readability"],"Conditionals are":["usually"],"Conditionals should":["be"],"Confirmed. The":["cons"],"Congratulations on":["finding"],"Consider Dict.update":["instead"],"Consider `cond`":["over"],"Consider a":["`compare(list_with_500_000_element,"],"Consider adding":["some"],"Consider extracting":["the"],"Consider how":["you"],"Consider if":["there"],"Consider inlining":["the"],"Consider instead":["of"],"Consider it":["an"],"Consider looking":["at"],"Consider renaming":["the"],"Consider sorting,":["it's"],"Consider the":["cond:"],"Consider this":["the"],"Consider using":["`Enum.map`","the","List.foldl","the"],"Consider what":["happens","happens"],"Considering the":["version"],"Constants are":["relatively"],"Convention for":["private"],"Conventionally these":["boolean"],"Converting a":["list"],"Conway's Game":["of"],"Cool use":["of"],"Cool, I":["like","was"],"Cool, makes":["sense."],"Cool, no":["prob."],"Cool, now":["that"],"Cool, sorry,":["I"],"Cool, thanks":["for","for","for"],"Cool, thanks.":["I've"],"Cool. :)":["Yeah,"],"Cool. I":["think"],"Cool. If":["you"],"Cool. We're":["almost"],"Cool. Yeah,":["I"],"Correct. I":["would"],"Could I":["ask"],"Could `Enum.zip`":["help"],"Could `Regex.scan`":["simplify"],"Could another":["person"],"Could changing":["the"],"Could eliminate":["line"],"Could have":["I"],"Could it":["be","be"],"Could please":["give"],"Could replace":["`accumulate\\3`"],"Could that":["improve"],"Could the":["function","abstractions","name","function","function"],"Could use":["`String.ends_with(phrase,"],"Could we":["remove"],"Could you":["return","comment","explain","separate","break","simplify","separate","possibly","try","gain","do","do","avoid","make","then","make"],"Couldn't you":["just","just","eliminate"],"Couple of":["ideas:","things:"],"Crashing upon":["a"],"Creating a":["tuple"],"Creating the":["HashDict"],"DB directly,":["see"],"DNA can":["get"],"DNA four":["times"],"DNA module":["is"],"DNA module.":["But"],"DNA strand":["(which"],"DNA strings.":[";)"],"DNA\" doesn't":["tell"],"DNA, but":["rather"],"DNA, it's":["not"],"DNA, so":["it"],"DNA. I":["have"],"DNA. Some":["modules"],"DNA.\"-hamming_distance/2-fun-0-\"/1 which":["I"],"DNA.\"-hamming_distance/2-fun-0-\"/1` -":["can"],"DNA.nucleotide_counts/1\u003e called":["with"],"DNA.to_rna. This":["will"],"DRY is":["definitely"],"DRY it":["up","up","a"],"DRY it's":["more"],"DRY that":["up"],"DRY those":["up","out"],"DRY up":["code"],"DRY. I":["think"],"DRY. Imagine":["that"],"DSL is":["important."],"Dang, last":["minute"],"Dave Thomas":["from"],"Dave Thomas'":["book"],"Dave Thomas's":["book,"],"Defaults arguments":["are"],"Define a":["second"],"Definitely a":["good"],"Definitely feel":["free"],"Definitely not":[":)"],"Definitely the":["once"],"Definitively makes":["sense!"],"Despite the":["fact"],"Dict =":["interface,"],"Dict API...if":["you"],"Dict because":["it"],"Dict functions.":["They"],"Dict instead":["of","of"],"Dict module":["instead"],"Dict protocol,":["so"],"Dict sorted,":["you"],"Dict's existence":["entirely."],"Dict, so":["I"],"Dict. It":["will"],"Dict. Since":["the"],"Dict.get for":["your"],"Dict.get(...))` expression":["can"],"Dict.get(...))` using":["another"],"Dict.get(@maureen, max_value).":["I"],"Dict.get/3 works":["with"],"Dict.merge db,":["db,"],"Dict.merge is":["interesting."],"Dict.update ```":["is","method"],"Dict.update as":["an"],"Dict.update for":["some"],"Dict.update instead":["of","of"],"Dict.update method":["can"],"Dict.update might":["more"],"Dict.update now)":["but"],"Dict.update to":["build"],"Dict.update(counts, nt,":["0,"],"Dict.update(d, String.downcase(w),":["1,"],"Dict.update(dict, word,":["1,"],"Dict.update) return":["a"],"Dict.update, so":["I'll"],"Dict.update. It":["allows"],"Dict.update/4, but":["since"],"Dict.update/4. I":["think"],"Dict.update: &(&1":["+"],"Dict`. Instead":["we"],"Did I":["take"],"Did not":["want","know"],"Did the":["README"],"Did this":["pass"],"Did you":["know","consider","consider","consider","see","know","know","consider","consider","know","consider","consider","consider","know","intend","know","consider","try","try","refactor","consider","consider","avoid","mean","intend","know","submit","notice","consider","consider"],"Didn't realise":["```\\w```"],"Didn't realize":["there"],"Didn't think":["to"],"Discard leading":["number"],"Do all":["of"],"Do it":["manually"],"Do note":["that"],"Do the":["names","tests","tests"],"Do they":["make","really"],"Do we":["really","have"],"Do you":["need","think","know","think","need","think","need","think","think","know","need","know","mean","know","think","think","know","think","know","prefer","think","really","know","think","know","mean","think","think","really","consider","think","need","really","gain","thinking","mean","think","know","want","have","think","deliberately","think","think","think","have","have","know","think","like","mean","think","mean","have","happen","mean","think,"],"Doctests don't":["buy"],"Documentation is":["[here](http://www.erlang.org/doc/man/math.html)"],"Does anyone":["know"],"Does bob":["really"],"Does delegating":["from"],"Does implementing":["`keep`"],"Does it":["work","make","make","always","pass"],"Does something":["like"],"Does that":["help?","make","solve","make"],"Does the":["teenager"],"Does this":["pass","pass","pass"],"Does your":["algorithm","test"],"Doesn't look":["too"],"Doesn't make":["much"],"Doesn't matter":["either"],"Doesn't the":["1"],"Doesn't upcase":["just"],"Doh! Names":["are"],"Doh, nice":["catch."],"Doing the":["upcase"],"Don't focus":["too"],"Don't forget":["that"],"Don't get":["me"],"Don't know":["why"],"Don't let":["the"],"Don't mind":["me!"],"Don't see":["how"],"Don't you":["think"],"Don. Love":["the"],"Done! (just":["learned"],"Don´t you":["think"],"Dude, that's":["sweet."],"Due to":["the"],"Dutch, have":["a"],"E.g. tan":["is"],"E.g., \"":["\""],"E.g., `\"":["\"`"],"EDIT: nevermind,":["read"],"ELSE is":["usually"],"EVEN ARE":["YOU!\""],"EVM checks":["the"],"Each implementation":["only"],"Each line":["is"],"Easier to":["read,"],"Easy fix":["to"],"Edit: lol,":["ok,"],"Edit: that":["wrapped"],"Either one":["would"],"Either way,":["it's"],"Either you":["could"],"Elixir (0.10.2,":["and"],"Elixir (apparently)":["doesn't"],"Elixir (as":["all"],"Elixir (through":["Erlang)","Erlang)","Erlang)","Erlang)","Erlang)"],"Elixir (we":["don't"],"Elixir /":["Erlang."],"Elixir 0.10.0),":["an"],"Elixir 0.10.1":["there's","there's"],"Elixir 0.10.1,":["check"],"Elixir 0.9":["on"],"Elixir I'm":["using."],"Elixir PR":["to"],"Elixir Sips":["and"],"Elixir `map/1`":["and"],"Elixir `v10.0.1`":["you"],"Elixir `v10.0.1`,":["which"],"Elixir a":["bit,","bit","lot"],"Elixir adding":["the"],"Elixir after":["a"],"Elixir allows":["you","you","you"],"Elixir also":["isn't"],"Elixir always":["return"],"Elixir and":["I","functional","it's","if","in","play","I","not","pretty","couldn't","Haskell.","Haskell","for"],"Elixir are":["immutable.","you","named"],"Elixir as":["you","a","there"],"Elixir branch!":[":)"],"Elixir btw":["and"],"Elixir can":["be.","confirm"],"Elixir code":["convention?","commonly","typically","that","usually","I've","uses"],"Elixir code,":["I"],"Elixir code:":["https://github.com/jayferd/rouge/issues/89!"],"Elixir code?":["There"],"Elixir codebase":["around"],"Elixir codebases":["they"],"Elixir community":["has"],"Elixir convention":["seems","for"],"Elixir currently":["too"],"Elixir development":["version"],"Elixir did":["have"],"Elixir didn't":["like"],"Elixir docs":["to","use"],"Elixir docs.":[":)"],"Elixir does":["not"],"Elixir doesn't":["really","have","yet","seem"],"Elixir due":["to"],"Elixir either,":["most"],"Elixir ever.":["I"],"Elixir examples,":["but"],"Elixir exercise":["doesn't"],"Elixir exercise.":["I"],"Elixir exercises":["are","from"],"Elixir follows":["the"],"Elixir for":["the"],"Elixir function":["to"],"Elixir has":["some","a","string"],"Elixir idiom":["would"],"Elixir idioms,":["solution","so"],"Elixir in":["ErlangDC","several"],"Elixir is":["a","following","following","how","*really*","great","hard!","an","moving","similar","I'm","that","messing","inspired","a"],"Elixir is.":["Hopefully,"],"Elixir it":["looks"],"Elixir it's":["common"],"Elixir kind":["of"],"Elixir lacks":["any"],"Elixir land,":["but"],"Elixir libraries.":["I"],"Elixir like":["there"],"Elixir long":["enough"],"Elixir makes":["me"],"Elixir master":["at"],"Elixir means":["that"],"Elixir moves":["on"],"Elixir myself,":["but"],"Elixir needs":["to"],"Elixir newbie":["I"],"Elixir noob,":["so"],"Elixir not":["usually"],"Elixir novice":["and"],"Elixir novice,":["so"],"Elixir novice.":["Can"],"Elixir or":["something."],"Elixir patterns":["and"],"Elixir prefers":["2"],"Elixir program":["ever"],"Elixir program!":["Feedback"],"Elixir programmers":["tend"],"Elixir provides":["to","a","a"],"Elixir quite":["a"],"Elixir releases":["(omitting"],"Elixir should":["be","have"],"Elixir since":["`if`"],"Elixir so":["I'm","I'm","please","this","that"],"Elixir solutions?":["I"],"Elixir source":["code."],"Elixir standard":["library.","library","library"],"Elixir style":["so","or","thing..."],"Elixir style,":["proved"],"Elixir style.":["I"],"Elixir supports":["that.","shorthands","heredoc","variant","interpolation,"],"Elixir syntax":["comes","makes","something"],"Elixir system":["doesn't"],"Elixir that":["tends"],"Elixir the":["convention"],"Elixir this":["way","doesn't","doesn't","doesn't","doesn't","doesn't"],"Elixir though,":["the"],"Elixir through":["Exercism."],"Elixir to":["name","me","me.","use","use","just","write","use","use"],"Elixir tools.":["What"],"Elixir track":["is"],"Elixir track.":["So","A"],"Elixir version":["0.10.1.","seems","is"],"Elixir way":[":)","to"],"Elixir we":["tend","usually"],"Elixir what":["has"],"Elixir when":["I"],"Elixir will":["use"],"Elixir with":["your"],"Elixir without":["them","the"],"Elixir yet,":["and"],"Elixir\"... Elixir":["is"],"Elixir's \"bang\"":["versions"],"Elixir's AST":["is"],"Elixir's `|&gt;`":["operator."],"Elixir's attribute":["syntax"],"Elixir's best":["use-case."],"Elixir's built-in":["interpolation"],"Elixir's collection":["system"],"Elixir's convention.":["I"],"Elixir's enumerators":["are"],"Elixir's grammar":["isn't"],"Elixir's heredoc":["implementation"],"Elixir's library":["documentation"],"Elixir's method":["signature"],"Elixir's partial":["application","application"],"Elixir's pattern":["matching.","matching"],"Elixir's pipeline":["operator"],"Elixir's slightly":["awkward"],"Elixir's style":["still"],"Elixir's syntactical":["sugar."],"Elixir's toolchain":["or"],"Elixir) are":["rather"],"Elixir) design":["in"],"Elixir). So":["I'd"],"Elixir, Erlang":["and"],"Elixir, I":["still"],"Elixir, as":["you"],"Elixir, at":["least,"],"Elixir, but":["I","this","It","it"],"Elixir, following":["Ruby."],"Elixir, is":["a"],"Elixir, it's":["typical"],"Elixir, nor":["instances"],"Elixir, so":["I'm","I'm","thanks","I'm","I","I"],"Elixir, something":["surrounded"],"Elixir, when":["using"],"Elixir, you":["can"],"Elixir-lang.org tutorial.":["I've"],"Elixir-like to":["use"],"Elixir-newbie eyes.":["You"],"Elixir. 2":["functions"],"Elixir. Being":["so"],"Elixir. But":["the"],"Elixir. Each":["implementation"],"Elixir. Elixir":["also"],"Elixir. From":["some"],"Elixir. Great":["stuff"],"Elixir. Hope":["you"],"Elixir. I":["think","read","had","need","checked"],"Elixir. If":["there"],"Elixir. It":["makes"],"Elixir. Like":["in,"],"Elixir. Most":["of"],"Elixir. Nullary":["methods"],"Elixir. Seems":["like"],"Elixir. So":["you"],"Elixir. That's":["also"],"Elixir. The":["unicode","normal","common"],"Elixir. This":["seems","kind","is"],"Elixir. Though,":["it's"],"Elixir. Use":["small"],"Elixir. Went":["through"],"Elixir. `Enum.filter`":["is"],"Elixir/Erlang and":["good"],"Elixir/Erlang is)":["be"],"Elixir/Erlang it's":["pretty"],"Elixir/Erlang out":["of"],"Elixir/Erlang you":["end","end","end","end","end"],"Elixir: if":["you"],"Elixir: it's":["no"],"Elixir: strings":["and"],"Elixir; In":["all"],"Elixir? (I":["have"],"Elixir? It":["might"],"Elixirs function":["clauses."],"Elixir… so":["I"],"Elxiir and":["the"],"Empty parens":["do"],"English better":["than"],"English letters,":["uppercase","digits"],"English words":["with","with"],"English-centric. Additionally,":["with"],"English. You":["are"],"Enjoy it":[":D"],"Enum because":["I"],"Enum before":["arriving"],"Enum filter":["function"],"Enum for":["doing"],"Enum functionality":["is"],"Enum method":["caused"],"Enum#reduce ```":["or"],"Enum, which":["I"],"Enum. But":["I"],"Enum.chunk |\u003e":["Enum.map_join`"],"Enum.chunks. I'll":["see"],"Enum.count and":["Regex.scan"],"Enum.count is":["that"],"Enum.count looks":["like"],"Enum.count to":["solve"],"Enum.count(&(&1 ==":["nucleotide))`,"],"Enum.count/2 better":["so"],"Enum.count/2 fits":["more"],"Enum.count` not":["doing"],"Enum.count` will":["be"],"Enum.each is":["swallowing"],"Enum.each l,":["fn"],"Enum.filter anagrams?(word,":["&amp;1)"],"Enum.filter fn":["anagram"],"Enum.filter list,":["fn(candidate)","is_anagram?(word,"],"Enum.filter |\u003e":["Enum.count"],"Enum.filter( &(are_not_identical?":["word,","word,"],"Enum.filter( &(contains_all_chars?":["word,","word,"],"Enum.filter( anagrams,":["anagram?(&amp;1,"],"Enum.filter( same_word?(&amp;1,":["word))"],"Enum.filter(&anagram?(word, normalized,":["&1))`"],"Enum.filter(...)` avoids":["creating"],"Enum.filter(candidates, &amp;is_anagram?(source,":["&amp;1))"],"Enum.filter(fn (_,":["dc)"],"Enum.filter(fn(test_match) -&gt;":["sorted_cp_list(test_match)"],"Enum.filter(fn(word2) -&gt;":["anagram_match(word,"],"Enum.filter(words, &anagrams?(downcase(word),":["downcase(&1))"],"Enum.filter_map which":["is"],"Enum.filter_map(&match?(&1, {1,":["_}),"],"Enum.filter_map(@ryann, &flag_set(score,":["elem(&1,"],"Enum.first` though":["(or"],"Enum.flat_map(@ryann, fn":["{"],"Enum.foldl and":["Dict.update"],"Enum.join like":["you"],"Enum.join takes":["care"],"Enum.join( [\"*\",":["2])"],"Enum.join` (might":["very"],"Enum.map [1,2,3],":["fn(x)","&amp;1"],"Enum.map by":["calling"],"Enum.map doing":["an"],"Enum.map into":["the"],"Enum.map with":["a"],"Enum.map(&String.upcase/1) `":["means"],"Enum.map(&String.upcase/1)) `,":["not"],"Enum.map(&[&1, ?\\n])":["|\u003e"],"Enum.map(&elem(&1, 0))`,":["though"],"Enum.map(&hd/1)` (using":["Unicode"],"Enum.map(&hd/1)` is":["fine."],"Enum.map(&hd/1)` to":["get"],"Enum.map(chars, &score_letter/1)`":["though."],"Enum.map(chars, fn":["char"],"Enum.map(fn x":["-\u003e"],"Enum.map(fn(x) -&gt;":["{x,"],"Enum.map(fn({k,_}) -&gt;":["{k,"],"Enum.map(verse(&amp;1)) |&gt;":["Enum.join(\"\\n\")"],"Enum.map/2 halfway":["down"],"Enum.map_join function":["that"],"Enum.map_join(from..to, \"\\n\",":["verse(&amp;1))"],"Enum.map_join` could":["be"],"Enum.map_join` to":["avoid"],"Enum.map_reduce matches,":["HashDict.new,"],"Enum.map`, `Stream`":["functions"],"Enum.map`, with":["explicit"],"Enum.reduce HashDict.new([{?A,":["0},"],"Enum.reduce and":["Dict.update","HashDict.update."],"Enum.reduce as":["suggested"],"Enum.reduce at":["the"],"Enum.reduce even":["if"],"Enum.reduce instead":["of","of"],"Enum.reduce is":["what","my","the"],"Enum.reduce to":["implement"],"Enum.reduce trick":["from"],"Enum.reduce with":["a"],"Enum.reduce words,":["HashDict.new,"],"Enum.reduce(HashDict.new(), ...)`.":["Guess"],"Enum.reduce(HashDict.new, fn":["word,"],"Enum.reduce(coll, [],":["fn"],"Enum.reduce(dna, HashDict.new(Enum.map(@velva,":["&{&1,"],"Enum.reduce(e, [],":["&([&1|&2]))","&(&2"],"Enum.reduce(first..last, nil,":["fn","fn"],"Enum.reduce(input, ...)":["works"],"Enum.reduce(matches, HashDict.new(),":["fn"],"Enum.reduce(split_lowercased_words, HashDict.new,":["fn"],"Enum.reduce(stop..start, \"\",":["fn(x,"],"Enum.reduce(strand, dict,":["&update_dict/2)"],"Enum.reduce, the":["return"],"Enum.reduce. An":["alternative"],"Enum.reduce. I":["can,"],"Enum.reduce. So,":["why"],"Enum.reduce` be":["an"],"Enum.reduce` can":["be"],"Enum.reduce` than":["to"],"Enum.reduce` to":["avoid"],"Enum.reject(&(&1 ==":["\"\"))"],"Enum.reject(&(target ==":["&1))"],"Enum.reject(fn (_,":["dc)"],"Enum.reject(list, fn(test_same)":["-&gt;"],"Enum.reject; there's":["a"],"Enum.reverse |\u003e":["to_binary`"],"Enum.sort and":["then"],"Enum.sort simplify":["your"],"Enum.sort(&(elem(&1, 0)":["\u003c"],"Enum.sort, Enum.concat,":["Enum.member?"],"Enum.to_list. I":["just"],"Enum.to_list. I'm":["not"],"Enum.with_index([\"first\", \"second\",":["\"third\",","\"third\","],"Enum.with_index, but":["it's"],"Enum.with_index` in":["the"],"Enum.zip has":["the"],"Enum.zip |\u003e":["Enum.filter"],"Enum/Stream. The":["only"],"Enum](http://elixir-lang.org/docs/stable/Enum.html) module,":["there's"],"Enum` is":["not"],"Enumerable does":["cost"],"Enumerable into":["a"],"Enumerable protocol,":["not"],"Enumerable without":["having"],"Enumerable. Maybe":["I"],"Enumerator? Google":["is"],"Enumerators also":["support"],"Eratosthenes process.":["As"],"Ergh, just":["realized"],"Erlang (and":["thus"],"Erlang (yes,":["it"],"Erlang /":["Elixir."],"Erlang Lists":["module"],"Erlang R16B01":["(erts-5.10.2)"],"Erlang R16B01.":["I'm"],"Erlang VM":["can"],"Erlang VM,":["you're"],"Erlang VM.":["There's","I"],"Erlang and":["Elixir.","most","Elixir"],"Erlang bag":["of"],"Erlang based":["languages","languages","languages","languages","languages"],"Erlang binary":["with"],"Erlang code":["I"],"Erlang code,":["which"],"Erlang compiler":["won't","can"],"Erlang documentation](http://www.erlang.org/doc/efficiency_guide/binaryhandling.html)":["repeated"],"Erlang doesn't":["have"],"Erlang ecosystem":["in"],"Erlang efficiency":["guide."],"Erlang experience":[":)"],"Erlang for":["writing","Great"],"Erlang function":["so","that"],"Erlang functions":["and","and"],"Erlang gains":["something"],"Erlang has":["the","different","a"],"Erlang in":["the"],"Erlang into":["Kernel)"],"Erlang itself":["at"],"Erlang level.":["That"],"Erlang list":["sort"],"Erlang lists":["module"],"Erlang look":["something"],"Erlang nor":["in"],"Erlang notation":["for"],"Erlang or":["Haskell,"],"Erlang podcast":["I've"],"Erlang provides":["such"],"Erlang re":["module"],"Erlang syntax,":["and"],"Erlang trick,":["they're"],"Erlang unfortunately":["isn't"],"Erlang uses":["optimized"],"Erlang when":["needed."],"Erlang works":["like"],"Erlang world.":["So"],"Erlang world…":["I"],"Erlang you":["can"],"Erlang's (or":["Joe"],"Erlang's `:io_format`.":["I"],"Erlang's `timer`":["module)."],"Erlang's calendar":["module"],"Erlang's expectations":["of"],"Erlang's lists":["module."],"Erlang's non-unicode":["history"],"Erlang's restrictions":["on"],"Erlang) supports":["tail","tail","tail","tail","tail"],"Erlang, =:=":["is"],"Erlang, but":["that's"],"Erlang, it's":["implemented"],"Erlang. Erlang":["unfortunately"],"Erlang. So":["I"],"Erlang. The":["\"?\"","runtime"],"Erlang. There":["is"],"Erlang/Elixir it":["seems"],"ErlangDC (Dec":["2013)"],"Erlang](http://mostlyerlang.com/) podcast":["that"],"Err, correction.":["That"],"Error in":["submit"],"Especially `new/2`.":["Just"],"Evaluating code":["in"],"Even better,":["`String.length(s)"],"Even if":["you","you"],"Even in":["Elixir/Erlang","Elixir/Erlang","Elixir/Erlang","Elixir/Erlang","Elixir/Erlang"],"Even just":["for"],"Even so,":["you","this"],"Even the":["if"],"Even though":["it's","the","this"],"Even wrapping":["that"],"Everyone is":["just"],"Everything else":["looks","here","looks","here"],"ExDoc documentation":["you"],"ExUnit (the":["testing"],"ExUnit, so":["commenting"],"Example: is_question?(msg)":["or"],"Examples` beginning":["with"],"Excellent point":[":)"],"Excellent points":["as"],"Excellent! But":["why"],"Excellent! Isn't":["the"],"Except the":["extra"],"Exercism does":["indeed"],"Exercism to":["learn"],"Exercism, too.":["I"],"Exercism. I":["should"],"Exercism’s community":["point"],"Expanding on":["@ahmad's"],"Expect another":["iteration"],"Explicit recursion":["is"],"Exposing it":["could"],"Expounded a":["bunch"],"Expression could":["probably"],"Expressions by":["Jeffrey"],"Extremely difficult":["to"],"FP newbie,":["I"],"FWIW, I":["like"],"FYI, not":["really"],"FYI: on":["elixir-lang-talk"],"Fair enough.":[":)","I"],"Fair point,":["functions"],"Fantastic advice.":["I"],"Feedback appreciated":["since"],"Feedback is":["appreciated!"],"Feel free":["to","to"],"Few surprises":["here,"],"Figured out":["how"],"Finally, for":["the"],"Finally, is":["there"],"Finally, look":["at"],"Finally, the":["filter"],"Finally, you":["started"],"First Elixir":["ever.","program"],"First I":["am","care"],"First I'd":["downcase"],"First Program(tm)":["in"],"First case":["is","is","is","is","is","is","is","is","is","is"],"First ever":["Elixir"],"First example":["I've"],"First pass.":["Passes"],"First stab":["at"],"First time":["elixir"],"First you":["add"],"First, you":["probably"],"Firstly, since":["it's"],"Fixed and":["resubmitted."],"Fixed in":["v2.","the","the"],"Fixed the":["odd"],"Fixed typo":["and"],"Focus first":["on"],"Following up":["from"],"For ````silence?````":["and"],"For `concat`":["the"],"For `count`,":["did"],"For `not_saying_anything`":["you"],"For `nucleotide_counts`,":["what"],"For `question?`,":["`String.last`"],"For a":["number","`else","first","better","list","list","list"],"For an":["8"],"For bonus":["points:"],"For chunking":["you"],"For composing":["a"],"For converting":["a"],"For count":["it"],"For details":["of"],"For detecting":["silence","all"],"For efficiency":["use"],"For even":["more"],"For example":["`silence?`","`message`?","`thing.is_xpath?`","```Enum.filter(candidates,","if","if","it","`Enum.zip`","if","they","\"major-elect\"","`iolist_to_binary([[\"A\",","`parallel-letter-frequency`","here's","computing","`\\p{L}`","`count`","\"УХОДИТЬ\"","`map/2`","if","using","`\\p{L}`","you"],"For example,":["the","the","`a","what","the","calling","if","instead","if","if"],"For example:":["`(String.upcase(\"HEY"],"For functions":["with"],"For instance,":["for"],"For lists":["you"],"For me":["is","is","hash","is"],"For me,":["cond","I"],"For module":["attributes"],"For my":["second"],"For particularly":["nasty"],"For predicates":["(functions"],"For short":["functions:"],"For slightly":["faster"],"For some":["strange","reason","reason","reason"],"For starters,":["HashDict"],"For stuff":["inside"],"For the":["cond","sake","first,","purposes","one","private","definition","single","definitions","regex","@annalise","unicode","functions","`pretty`"],"For these":["particular"],"For this":["small","exercise","exercise","exercise,"],"Forced to":["pick"],"Forgive me":["if"],"Forgot about":["that..."],"Forgot to":["remove"],"Friedl to":["be"],"From [`List`](http://elixir-lang.org/docs/stable/List.html),":["I"],"From a":["\"understanding"],"From some":["episodes"],"From the":["elixir","README:"],"From version":["1:"],"From what":["I","I","I"],"Functional elixir":["is"],"Functional language":["paradigms"],"Functions in":["elixir"],"Functions returning":["functions"],"Functions with":["different"],"Funny I":["always"],"Funny that":["Elixir"],"Funny, on":["my"],"Furthermore predicates":["typically"],"Gabe, of":["course"],"Game of":["Life"],"GenEvent structure,":["but"],"GenServer in":["a"],"GenServer makes":["it"],"GenServer version":["last"],"GenServer, but":["I"],"GenServer, or":["using"],"Generally I":["honor"],"Generally `Enum.reduce`":["is"],"Generally it's":["preferable"],"Generally speaking":["it's"],"Generally, prefer":["pattern"],"Generally, the":["function"],"Generally, you":["would"],"German word":["like","like","like"],"Get the":["{year,","{year,"],"Getting closer!":["Line"],"Getting the":["current"],"GitHub and":["submit"],"Given it":["is"],"Given my":["macbook"],"Given that":["you","the"],"Given the":["2.6.2","current"],"Gives me":["a"],"Giving a":["name"],"Glad I":["won't","did","could"],"Glad it's":["being"],"Glad to":["see"],"Going through":["Enumerable"],"Going to":["ask","submit","try"],"Good Job!":["Almost"],"Good call":["-","using"],"Good call.":["I'll"],"Good catch":["with","with"],"Good catch!":["Updating...."],"Good catch,":["I"],"Good catch.":["I"],"Good clear,":["expressive"],"Good code":["often"],"Good feedback.":["Thank"],"Good feedback;":["thanks!"],"Good first":["submission."],"Good idea":["but"],"Good idea!":["What"],"Good idea,":["thanks","I"],"Good improvement.":["Looks"],"Good job":["with"],"Good point":["on","about","on","on","concerning"],"Good point!":["Thanks","Updated","Thanks","I'll","I"],"Good point,":["thanks!","although","I","the","got"],"Good point.":["Updated","I","I","I've","I've","I","Submitted.","I"],"Good points":["guys,","@jackson"],"Good points!":["In"],"Good points,":["thanks"],"Good points.":["I"],"Good predicate":["methods."],"Good question":["about","about"],"Good start":["-"],"Good suggestion.":["I"],"Good suggestions.":["I"],"Good to":["know,","know","know!","hear"],"Good work!":["I"],"Good. Have":["you"],"Good. I'll":["clean"],"Good](http://learnyousomeerlang.com), and":["there"],"Google Translate)":["isn't"],"Google good":["practical"],"Google is":["just"],"Googling for":["ranges"],"Goot catch,":["fixed."],"Got it.":["I"],"Got me":["through"],"Got rid":["of"],"Gotcha. I":["like"],"Gotcha. Thanks":["for","for","for"],"Gotcha. That":["make"],"Gotcha. That's":["sort"],"Gotcha... Okay,":["I'm"],"Granted it":["doesn't"],"Granted, it's":["not"],"Granted, many/most":["people"],"Graph record":["instead","as"],"Graphemes are":["closer"],"Great Good](http://learnyousomeerlang.com),":["and"],"Great Job!":["A","It's"],"Great advice,":["thank"],"Great catch":["about"],"Great feedback,":["thank","thanks!"],"Great first":["try."],"Great function":["\u003ccode\u003eanagram?\u003c/code\u003e"],"Great idea!":["Now"],"Great idea,":["still"],"Great idea.":["I'll"],"Great ideas,":["thanks!"],"Great job":["on","for"],"Great job,":["I'd"],"Great nit!":["I"],"Great nudge":["towards"],"Great start":["-"],"Great stuff":["in"],"Great use":["of"],"Great way":["to"],"Great work!":["Just"],"Great! Only":["thing"],"Great! Thanks":["for"],"Great! Very":["simple"],"Great, thanks":["Mark"],"Great. If":["you"],"Greeting module":["feels","independently."],"Greeting? Is":["there"],"Grrrr) And,":["I"],"Guard clauses":["in"],"Guard statements":["seems"],"Guards on":["singalong"],"Guess I":["got"],"Guess at":["the"],"Guide](http://elixir-lang.org/getting_started/1.html) if":["you"],"Ha ha":[","],"Ha ha,":["thanks"],"Ha! As":["much"],"Hadn't considered":["the"],"Hah, the":["funny"],"Haha feels":["good"],"Haha! Yes,":["guilty"],"Haha, done":["in"],"Haha, i'm":["having"],"Haha, nice":["trick"],"Haha. Nope":["but"],"Haha. Sometimes":["it"],"Hamming distance":["was"],"HasDict like":["this:"],"HashDict 's":["altogether"],"HashDict .":["And"],"HashDict =":["implementation."],"HashDict anew":["for"],"HashDict as":["your"],"HashDict because":["I'm"],"HashDict but":["there"],"HashDict construction":["is"],"HashDict creation,":["though."],"HashDict dictionary.":["The"],"HashDict documentation":["is"],"HashDict due":["to"],"HashDict every":["time"],"HashDict for":["that"],"HashDict from":["that."],"HashDict implements":["the","the"],"HashDict is":["ugly.","passed","definitely","that"],"HashDict is,":["I"],"HashDict nor":["about"],"HashDict or":["ListDict"],"HashDict though,":["getting"],"HashDict to":["`Enum.map`","accumulate"],"HashDict where":["the"],"HashDict with":["the"],"HashDict words":["count,"],"HashDict would":["get"],"HashDict's a":["lot."],"HashDict's that":["might"],"HashDict). As":["primarily"],"HashDict, it":["doesn't"],"HashDict, though":["I"],"HashDict. I'm":["not"],"HashDict.get(...))` can":["be"],"HashDict.merge in":["this"],"HashDict.new (lc":["{"],"HashDict.new [{'G',":["1},"],"HashDict.new [{?A,":["0},","0},","0},"],"HashDict.new('ATCG', &{&1,":["0})`"],"HashDict.new(), fn":["[w],"],"HashDict.new(), update(&amp;1,":["&amp;2))"],"HashDict.new(Enum.map(@velva, &{&1,":["0})),"],"HashDict.new([{?A, 0},":["{?T,"],"HashDict.new, count(&amp;1,":["&amp;2))`"],"HashDict.new, fn":["word,"],"HashDict.new, fn([word],":["acc)"],"HashDict.new, update_count(&amp;1,":["&amp;2)"],"HashDict.new. You":["never"],"HashDict.new/2 and":["it's"],"HashDict.new/2 function.":["I"],"HashDict.new/2 in":["your"],"HashDict.new` here,":["it's"],"HashDict.new`? `HashDict.new`":["doesn't"],"HashDict.to_list(input) required":["for"],"HashDict.update (and":["Dict.update)"],"HashDict.update (well...":["Dict.update"],"HashDict.update ```":["instead"],"HashDict.update and":["be"],"HashDict.update in":["your"],"HashDict.update part":["as"],"HashDict.update(#HashDict, \"go\",":["0,"],"HashDict.update(acc, String.downcase(word),":["1,"],"HashDict.update(counter, word,":["1,"],"HashDict.update(dict, word,":["1,"],"HashDict.update(hash, word,":["&amp;(&amp;1"],"HashDict.update(tally, word,":["1,"],"HashDict.update...they all":["compile"],"HashDict; I":["just"],"HashDict` assignment,":["I'm"],"HashDicts I":["just"],"HashDicts cannot":["be"],"HashDicts come":["into"],"HashDicts don't":["preserve"],"HashDicts up":["until"],"HashDicts) as":["there"],"HashDicts; they":["were"],"HashMap when":["it"],"HashMap/TreeMap in":["Java."],"HashSet and":["records,"],"HashSet is":["necessary"],"Haskell and":["Elixir","Elixir."],"Haskell as":["of"],"Haskell but":["less"],"Haskell exercises":["that"],"Haskell exercises.":["Will"],"Haskell experience":["speaking."],"Haskell has":["an","been"],"Haskell make":["concurrency"],"Haskell much":["then?"],"Haskell school":["of","of","of"],"Haskell where":["imports"],"Haskell wiki":["about"],"Haskell's type":["system"],"Haskell, I":["have"],"Haskell, you":["would"],"Haskell-warped mind":["that"],"Haskell. It":["makes"],"Haskell. Obvious":["questions:"],"Haskell. The":["Elixir"],"Have I":["missed"],"Have a":["look","look"],"Have any":["thoughts?"],"Have you":["checked","looked","considered","checked","considered","considerer","considered","considered","seen","considered","seen","tried","considered","considered","considered","considered","thought","thought","thought","considered","considered","considered","considered","considered","considered","considered","seen","considered","thought","considered","considered","seen","looked","considered","considered","at","considered","consider","thought","thought","thought","thought","looked","thought","looked","considered","looked","considered","considered","considered","tried","looked"],"Haven't played":["with"],"Having `next_phrase`":["way"],"Having a":["lot"],"Having coded":["with"],"Having defined":["`bottle/1`,"],"Having said":["that,","that,"],"Having slightly":["different"],"Having that":["anonymous"],"Having to":["implement"],"Having tried":["out"],"He said":["that"],"Heard yelling,":["so"],"Heard, which":["I"],"Heh, I":["think"],"Heh, didn't":["know"],"Heh, my":["strategy"],"Hehe, every":["nitpick"],"Helper functions":["are","like"],"Hence the":["appending."],"Henceforth, iteration":["#2"],"Here is":["an","what"],"Here's a":["simpler","different","short","bit","'reimplementing","tail","tail","tail","tail","tail"],"Here's an":["example","example","example:","example"],"Here's another":["alternative,"],"Here's happens":["when","when","when","when","when"],"Here's how":["I","I"],"Here's pattern":["matching"],"Here's that":["code"],"Here's the":["non-parallel","cleanest","various","important","important"],"Here's what":["it","would","would"],"Here, I've":["made"],"Hey (no":["pun"],"Hey @darian,":["I"],"Hey @phyllis,":["your"],"Hey @reva,":["thanks"],"Hey @trent,":["thanks"],"Hey Alan!!!":[":-)"],"Hey Ben,":["remember"],"Hey Gabe,":["of"],"Hey I'm":["asking"],"Hey Mike,":["looking"],"Hey! Great":["solution."],"Hey, me":["too!"],"Hey, thanks":["for"],"Hi @freddie,":["thanks"],"Hi Don.":["Love"],"Hi Svyatov,":["this"],"Hi there":["-","-","-","-","-"],"Hi there.":["I","I"],"Hi, a":["few"],"Hi, pattern":["matching"],"Hi, thanks":["for","for"],"Hi. Thanks":["for"],"Hint: You":["can"],"Hint: get":["rid"],"Hint: it":["actually"],"Hint: think":["bits"],"Hint: you":["do"],"Hints: `Enum.reduce`,":["`Dict.update`."],"Hitting \"Looks":["great!\""],"Hmm, I":["didn't","wonder"],"Hmm, come":["to"],"Hmm, lemme":["try"],"Hmm, submitted":["2"],"Hmm, the":["question"],"Hmm. What":["I"],"Hmm.. I":["don't"],"Hmm... yeah,":["maybe"],"Hmmm José":["Valim"],"Hmmm sorry":["it"],"Hmmm... I":["wasn't","suppose"],"Hope that":["helps.","helps.","helps."],"Hope you":["are","are","have"],"Hopefully the":["example"],"Hopefully this":["is"],"Hopefully, I":["can"],"How about":["\"candidates\"?","sentence","hiding","`HashDict.update(dict,","combining","private","making","now?","moving","stripping","something","this?"],"How can":["I","I","I"],"How could":["you"],"How did":["you"],"How do":["you","you","you","I","I"],"How does":["`empty?()`"],"How is":["the"],"How many":["places"],"How to":["avoid"],"How would":["defp","you"],"However Elixir's":["collection"],"However I":["wanted","think","fail","couldn't"],"However both":["completed"],"However there":["must"],"However, I":["don't","would","could","think","had","also","still","do"],"However, for":["most"],"However, here's":["some"],"However, if":["I"],"However, my":["first"],"However, ruby":["also"],"However, that":["has"],"However, the":["first"],"However, this":["code"],"However, with":["that"],"However, you":["can"],"How’s this":["looking"],"Hrm, perhaps":["sentence"],"Hrmm. Seems":["to"],"Huh, I":["was"],"Huh. character":["limit."],"Hum, I":["understand","didn't"],"Hum, I'm":["sorry,"],"Hé hé,":["j'ai"],"I \"finished\"":["this,"],"I \"resolve\"":["the"],"I 'thought'":["there"],"I (feeling":["a"],"I *do*":["think"],"I *really*":["like"],"I *think*":["it","the"],"I *think*the":["`concat`"],"I GOT":["IT!1!1"],"I Like":["it."],"I _am":["pretty"],"I _think_":["I"],"I `do_like_it_better`":[";)"],"I `downcase`":["base"],"I a":["much"],"I abandoned":["the","that"],"I accidentally":["submitted","reintroduced"],"I actually":["like","took","made","assigned","considered","like","have","hate","still","meant","did","wanted","didn't","looked","thought","looked","like"],"I added":["pattern","unicode","a","function"],"I admire":["the"],"I admit":["that","regular"],"I aggree":["on"],"I agree":["with","with","with","about","that","with","about","with","that","and","with","with","that","with","with","with","with","that","completely","that","that"],"I agree,":["it's","in","I","I","only"],"I agree.":["It","Don't","Not"],"I agree;":["I"],"I agreed":["that"],"I almost":["never"],"I already":["'peeked'","have,"],"I also":["changed","moved","tried","love","highly","think","think","used","disagree","think","think","think","wouldn't","played","tried","didn't","wonder","try","tried","realized","have","found","prefer","tried","noticed"],"I always":["followed","use","wrap","use"],"I am":["stuck.","gonna","not","looking","a","finding","also","trying","only","not","no","not","as","actually","thinking","going","not","not","amazed","*really*","not","a","still","not","still","certain","very","saying","learning","somewhat","going","rather","not","looking","new","thinking","also","anxiously","still","somewhat","going","not","unsure","missing","missing,","familiar","sorting","still","still","new","too"],"I am.":["I"],"I amp":["up"],"I analyzed":["the"],"I apologize":["if"],"I appreciate":["seeing","it","you"],"I arrived":["at"],"I ask":["what"],"I asked":["Bob","for"],"I assume":["this","the","you","that","you","there's"],"I assumed":["the","it","alpha"],"I avoid":["that?"],"I avoided":["the"],"I barely":["know,"],"I be":["trying","trying"],"I believe":["the","Elixir","everything","it","that","that","the","the","the","string","will","`[]`"],"I bet":["you","``cond"],"I better":["ship"],"I blame":["the"],"I broke":["exercism's"],"I called":["split/1","it"],"I came":["up","up"],"I can":["think","figure","see","see","see","simplify","move","resubmit","read","and","refine","only","use","match","discuss","avoid","think","offer","stomach","do.","see","see","add","submit","sort","just","see","imagine","use","do","make","learn","use","never","think","understand","look","use","take","improve?","understand","bring","see","see","submit","do","make","see","really","see","see","see","believe","spend","point","come","get","use","visualize","solve","understand","add","see","see","make","make","see"],"I can't":["approve","figure","actually","call","mark","imagine","see","use","see","imagine","figure","figure","figure","find","see","figure","really","imagine","currently","think","figure","follow","(going","figure","believe"],"I can,":["however,"],"I cannot":["judge","go","pass"],"I cant":["really"],"I care":["to","to"],"I change":["`\u003c\u003e`"],"I changed":["it","that","something,","it","the","to","my"],"I checked":["out","out","out"],"I chose":["`_hey`","not","`cond`","String.codepoints,","to","to","the"],"I chosed":["`_otherwise`,"],"I clicked":["the"],"I come":["from"],"I completely":["agree:","agree.","understand"],"I consider":["this","this","to","going"],"I considered":["how"],"I considered:":["I"],"I convert":["the"],"I converted":["the"],"I could":["move","do","be","be","create","just","not","move","extract","just","process","split","use","have","leave","use","do","break.","write","of","remove","get","come","easily","get","use","figure","do","figure","go","also","see","see","probably","just","just","still","think","say","be","use","sacrifice","squeeze","see","look","take","inline","suggest","simply","not","replace","replace","probably","name","achieve","also","have","not","downcase","move","use","contribute,","go","not","get","combine","find","clean","have","probably","find,","not","map","potentially","have","think","encapsulate","use","have","see","go","have","with"],"I couldn't":["figure","quite","figure","find","find","find","find","find","find","get","figure","make","get","work","work","figure","work","think","quite","find","figure","figure","find","come","see","find","think"],"I couldnt":["figure"],"I couldn’t":["recall"],"I created":["`initial_counts`","the"],"I debate":["whether"],"I debated":["whether","readability"],"I decide":["to"],"I decided":["to","explicitly","to","this","I","to","that","to","I"],"I deemed":["it"],"I define":["the"],"I definitely":["do","prefer","like"],"I destroyed":["all"],"I did":["a","in","not","not","not","it.","the","the","that.","in","drop","it","this","this","see","this","this","as","not","not","not","not","a","pretty","consider","this","this","notice","consider","spend","simplify","that","before,","such","in","in","a","with","totally","but","not","it","not","so","not","run","go","hit","in","it","some","it","actually","have","use","this","above,","the","know"],"I did,":["but"],"I didn't":["know","think","use","pattern","know","realize","know","knew","think","know","realise","know","know","mean","realize","think","know","think","know","need","see","think","know","even","have","think","knwo","think","realize","consider","know","know","know","think","know","now!","inline","see","find","think","realize","want","spend","need","realize","know","thought","manage",";-)","think","think","have","end","do","need","realize","quite","think","think","see","think","have","know","expand","really","like","like","do","do","really","expect","want","realize","even","think"],"I dig":["the"],"I disagree":["with","that"],"I disagree,":["though,"],"I discovered":["the","why","unicode","that","it"],"I discovered,":["you"],"I dismissed":["it"],"I dispensed":["with"],"I ditched":["it"],"I do":["think","like","now!","not","it","like","think","not","think","feel","a","agree","understand","remember","coding","not","have","agree",":)","like",":)","think","this?","it","like","wonder","agree","agree","like","tend","believe","understand","if","find","feel","see","like"],"I do,":["however,"],"I do.":["Thanks."],"I does":["slightly"],"I don't":["think","know","understand","know","know","think","know","like","feel","know","know","believe","understand","agree","yet","see","think","think","think","think","flatten","think","follow","know,","think","think","expect","think","agree.","like","care","think","know","end","really","think","know","see","think","do","know","even","know","really","think","like","know","like","think","like","want","like","have","have","think","think","think","think","really","want","know","use","think","like","know","think","have","know","know","want","see","know","know","have","mean","think","think","think","really","expect","think","yet","think","know,","get","like","like","like","like","like","like","think","tend","think","know","need","know","like,","see","think","have","really","think","see","need","want","need","think","know","understand","know,","think","see","match","see","have","think","really","really","like","see","like","care","want","really","use","think","know","have","really","like","think","have","think","have","have","know","recall","know","really","like","see","like","particularly","feel","like","think","think","mind","have","want","know","know","have","mind","know","know","think","think"],"I dont":["think"],"I don´t":["see"],"I dot":["not"],"I doubt":["if","Stream.with_index","I'll","you'd"],"I downcase":["a"],"I dropped":["db"],"I dunno":["though."],"I end":["up","up"],"I ended":["up","up","up","up","up","up","up"],"I ever":["have"],"I excused":["if"],"I expect":["that","that","there's","`anything_else`"],"I expected":["to","the"],"I extracted":["a","it","the"],"I fail":["to"],"I failed":["to","to"],"I failed.":["Jumping"],"I fear":["I"],"I feel":["that","about","like","like","the","that,","like","like","like","like","like","better","like","like","like","about","like","this","is","dumb","like","like","this","about","like"],"I feel,":["however,"],"I felt":["could","it","like","like","that","like","like","the","like","this","that"],"I fetched":["the"],"I fiddled":["around"],"I figured":["it","I","this","since","it","this"],"I finally":["found","decided","think","went","managed"],"I find":["it","the","`List.flatten/1`","myself","the","easier","it","the","that","pipelining","that","that","the","that","the","`silent?(input)`","it","to","myself","the","myself","attributes","the","it","it","it"],"I fired":["up"],"I first":["did","submitted"],"I fixed":["up"],"I flagged":["it"],"I fold":["(`reduce`)"],"I followed":["a"],"I for,":["example,"],"I forget":["why","about"],"I forgot":["Elixir","about","I","about","that","to"],"I found":["Kernel.size/1","the","a","that","it","that","the","to","flat_map","the","Macro.escape,","this","the"],"I fully":["agree"],"I gather":["it's","that"],"I gave":["the"],"I generally":["only","prefer","just","go","like"],"I get":["the","what","the","it.","your","rid","a","a","a","annoyed","a","a","that","quality"],"I go":["about","about","from"],"I got":["it,","suggested","few","twisted","on","sloppy","your","busy","about","what","it.","rid","caught","lucky","stuck","lazy","some","the","to","that","so","a"],"I grant":["you"],"I guess":["that","that","I","I","it's","this","I","this","is","I","I","for","I","a","in","I","I","I","it","not","I","I","I","you","I'm","it's","I","I'm","the","you","I","you're","that's","it's","`result`"],"I guess,":["that","considering"],"I had":["pushed","used","that","to","something","something","`respond_to","to","seen","ideas","to","to","the","some","to","been","a","a","a","originally","tried","submitted","a","to","to","to","to","mentioned","to","set","a","this","was","to","to","not","the","to","a","doubts","been","non-ascii","a","the","to","a","interpreted","one","to","a","to","it","a","problems","an","to"],"I hadn't":["thanks!","seen","known","considered","thought","thought","heard","seen","learnt","learnt","touched","considered"],"I handle":["the"],"I happen":["to"],"I hardly":["know"],"I hate":["having","the","the"],"I hated":["the"],"I have":["almost","seen","seen","used","to","a","now,","done","implemented","strong","submitted","the","to","written","given","no","compared","to","definitely","no","a","one","to","not","Elixir","another","and","no","to","a","no","named","to","seen","have","no","a","Q","some","here,","duplicate","old","to","some","a","the","probably","updated","as","deliberately","been","*a","yet","something","no","a","not","developed","is","used","the","no","a","seen","thought","some","not","the","it","started","had","been","a","more","to"],"I have.":["As"],"I haven't":["picked","wrapped","got","checked","seem","seen","thought","seen","explored","used","successfully","seen","seen","actually","spent","been","spent","personally","really","been","convinced","looked"],"I haven´t":["aversion"],"I hear":["it"],"I heard":["in"],"I help":["out"],"I hesitated":["and"],"I hit":["a","the"],"I honestly":["learn","don't","have","don't","don't"],"I honor":["the"],"I hope":["you'll","there's","that's","this"],"I imagine":["it's"],"I implement":["them"],"I implemented":["`sing`","it:"],"I implemented.":["Look"],"I imported":["it"],"I imposed":["on"],"I included":["the"],"I incorporated":["feedback"],"I initially":["wanted","handled","thought","had"],"I intended":["to"],"I internalised":["the"],"I interpreted":["the"],"I jumped":["into"],"I just":["submitted","removed","really","wanted","used","took","wanted","like","wrote","updated","submitted","tried","pushed","submitted","added","rely","wanted","commented","sent","realized","figured","wanted","don't","don't","caught","verified","set","couldn't","need","wanted","did","wanted","learned","used","caution","know","went","don't","saw,","noticed","grabbed","updated","wonder","fixed","called","slapped","copied","can't"],"I keep":["learning.","finding","wanting"],"I kept":["banging","getting","getting","running"],"I kind":["of","of","of","of","of"],"I kinda":["liked","like","like"],"I knew":["`HashDict`","the","I","how"],"I know":["why","these","that","better","you","the","when","this","you","for","you're","I","you","exercism","what's","what","there","I","to","these"],"I know)":["doesn't"],"I know,":["I","without"],"I know.":["Moving"],"I learn":["a","more"],"I learned":["a","a","regular","that"],"I learnt":["about"],"I left":["the","the","them"],"I like":["the","your","this.","the","this","the","it.","the","that","it!","this.","this.","your","this","to","better.","how","the","it.","it.","the","this!","that","the","the","the","the","it.","it!","this","these:","about","how","the","to","the","the","the","how","how","the","it","the","this","it!","how","your","that","it","the","everything","this","the","this.","that","the","that","the","the","to","the","the","the","this.","that","the","the","how","the","this","the","that","it.","how","it","it,","the","the","that","crazymykl's","that","that","how","that","the","it.","this","`utterance`","the","the","the","how","it","this","your","it","the","the","it.","your","best","how","having","it","Clojure?","to","your","the","the","the","this","the","the","the","the","having","more","to","your","the","Enum.count/2","the","how","it!","the","to","it","the","it.","your","this","that","your","that","your","that","the","the","the","better","most","most","the","this","how","how","that","the","the","the","your","the","that","it","your","`silence?`","the","the","pipelines,","the","little,"],"I like.":["I"],"I liked":["the","it","the","the"],"I look":["at"],"I looked":["high","around","at","back","in","for","at","in","closely","up","at"],"I lose":["the","precision"],"I love":["this.","the","how","how","exercism,","Elixir!","these"],"I made":["it","some","while","the","it","it"],"I made,":["though!"],"I make":["a","a"],"I managed":["to"],"I may":["be","well","be","be","have","be","experiment","revisit","take","have","have","have"],"I mean":["that","any","reversing","updating","well","when"],"I mean,":["if"],"I meant":["to","something","extracting","to","was:","to","to"],"I meant.":["I"],"I mention":["I"],"I mentioned":["that","on","in"],"I messed":["with"],"I might":["extract","have","argue","make","consider","be","pull","try","fix","scan","use","go","like","keep","change","write","be","avoid","submit","have","call","have","be","be"],"I miss":["my"],"I missed":["the","that,","that.","or","that","String.strip","a","something","that","that","what","that"],"I missing":["something?","something?","here?"],"I misunderstood":["line"],"I modified":["it","the"],"I more-or-less":["got"],"I most":["certainly"],"I move":["on?","`HashDict.update(&amp;2,"],"I moved":["validations","on","the"],"I must":["confess","be"],"I need":["to","to","to","to","to","it","to","to","to","to","to","a","to","to","to","to","to","to","to","to","to"],"I needed":["to","it","to"],"I never":["use","would","think"],"I no":["longer"],"I not":["agree","think"],"I notice":["you're","you","is","when","that"],"I noticed":["your","it","right","in","that,","that","in","that","that"],"I noticed,":["that"],"I now":["get"],"I observe":["that"],"I obviously":["need"],"I often":["neglect."],"I one-upped":["you"],"I only":["use","have","have","used"],"I opted":["for","for","not","to","to"],"I originally":["included","did","had","did","had","considered"],"I overthink":["exercises"],"I particularly":["like","like"],"I pass":["them","things"],"I passed":["in"],"I personally":["find","prefer","like","like","find","try","like","prefer","prefer"],"I piped":["it"],"I plan":["to"],"I played":["around","with","with"],"I ported":["this","over"],"I posted":["this."],"I predict":["that"],"I prefer":["the","to","the","the","`String.scan(%r/\\w+/)","to","the","to","to","`&mutation?/1`","the","this","the","to","always","between"],"I presume":["for"],"I probably":["will","just","agree","would"],"I pulled":["down","downcase"],"I pushed":["a"],"I put":["in"],"I qualify":["the"],"I quite":["understand."],"I raised":["my"],"I ran":["it"],"I re-extracted":["the"],"I re-implemented":["`Enum.reduce`"],"I read":["it","about","that","the"],"I realised":["I've"],"I realize":["pipe","that.","that."],"I realized":["I","I","that","I","that","\"teen\"","after"],"I really":["like","like","would","like","like","can't","do","grok","like","like","like","like","disliked","like","learn","enjoyed","should","learned","like","cannot","wish","like","don't","like","appreciate","love","can't","gained","like","wanted","disliked.","wanted","like","can't","like","understand."],"I rearrange":["it."],"I recall":["correctly,"],"I recently":["learned"],"I recognize":["now"],"I recognized":["the"],"I recommend":["going"],"I recommended":["it","it,"],"I reject":["empty"],"I relented":["to"],"I remember":["seeing","correctly,"],"I remembered":["that"],"I remove":["the"],"I removed":["it"],"I replaced":["it"],"I resorted":["to"],"I reversed":["the"],"I reverted":["to"],"I rewrote":["from"],"I rolled":["my"],"I run":["\"iex\",","the","into"],"I said":["from","\"BOB"],"I said,":["in","it"],"I saw":["both","examples","it.","a","them","@kristofer's","that","the","the","a"],"I say":["I","that"],"I second":["gvaughn's","the"],"I see":["now","your","that","is","how","it","the","that","this:","the","is","how","also","you've","that","what","it,","that","I","your","it","guard","guard","the","it,","that","it","what's","what's","Kernel.length","you've","from","you've","you"],"I see.":["Removes","Thanks!"],"I seem":["to"],"I seemed":["to"],"I set":["out"],"I settled":["on","for"],"I shall":["refactor."],"I should":["read","really","have","just","favour","improve","sort","have","have","only","use","go","use","know","use","have","have","be","have","have","add","get","go"],"I should've":["thought"],"I shouldn't":["care"],"I skimmed":["the"],"I skipped":["ahead"],"I slightly":["misinterpreted"],"I solve":["problems"],"I solved":["it","it","the","this","it"],"I sometimes":["forget"],"I somewhat":["disagree"],"I sort":["of"],"I sound":["too"],"I spent":["a","a","some","some"],"I split":["`Words.update/2`","it","it"],"I started":["on","to","writing","out","out","doing","with"],"I stayed":["away"],"I still":["like","think","needed","feel","prefer","think","struggle","missing","find","don't","learned","prefer"],"I stopped":["doing"],"I strongly":["dislike"],"I struggled":["a","with"],"I struggled,":["and"],"I submitted":["new","a","a","a","a","a","that...","a","an","a","a","a","a","a","the","a","the","followed"],"I suggest":["#alphabetize),","is","using"],"I suggested":["pattern","using","wouldn't"],"I suppose":["I","\"is_\"","this","it","they","I","you","here","this","is","I","you","I","the","it"],"I suppose.":["I'll"],"I surprised":["@kariane"],"I suspect":["the","this","any","List.foldr","it's","strict","there","it","not","`list`","it's"],"I suspected":["I"],"I switch":["to"],"I switched":["gears"],"I take":["your","your","the","into"],"I tell":["`String.split`"],"I tend":["to","to","to","to","to","to","to"],"I tested":["one"],"I thank":["you"],"I the":["man?\""],"I there's":["an"],"I think":["this","I","you","I","the","having","about","`HashDict.update`","that","it","you","it's","there","I'll","it's","you've","if","it","that","that","either","it's","a","it","the","more","we","it","this","it","String.split","it","you","if","'?'","this","it","I","I'm","\"is_\"","that","we're","each","so.","this","that","that","this","it","the","it","aliasing","I","your","you","it","you","the","it's","that","it","you","you","you're","for","there","in","strictly-speaking,","I","this","this","about","I","it","this","using","it","it","the","this","you","it's","`String.codepoints`","a","this","I","that","it's","you're","I","it's","it",":)","it","it's","you're","it's","you","it","using","would","you","`split_words`","it's","about","you","I","you","`dict`","@dee","the","this","your","the","I","this","there's","it's","it's","\"silent?\"","you're","that","it","arguments","it","it","that","it's","the","that","that","it","that's","if","in","this","I","this","it","that","`Regex.scan`","it","the","that","that","idiomatic","that","you","the","that","the","Regex","I","reads","it's","you","shorthand","it","`Regex.scan`","I","it","I","the","this","it","this","I","the","you're","it","this","this","it","I","makes","it's","what","the","that","that","that","you","this","the","that","is","you","that","might","for","this","about","I","you","it","is","I","it","that's","those","my","your","it","you","it","reduces","putting","you're","`segment`","the","line","it's","that","you","I'll","the","this","we","it's","that","you'll","this","the","I","the","the","I","using","it","you're","it's","the","the","this","you're","that's","it's","I","it","it's","it's","using","this","reusing","it","you","of","it'll","the","a","this","it","the","it's","you","what","I","it","regex","its","you're","special","this","I'll","perhaps","I","that","I","I","it","snake_case","`split`","it","it's","I'm","get_counts","this","I","what","it's","you'll","that","I","you","it","the","I","list","it's","what","I","having","(it's","sufficiently","the","it's","I","it","you","the","I","I'm","it","maybe","I","these","the","after","I","I","I'll","I","it","it's","it","the","that'll","`[head|tail]`","you've","you","`:alpha:`","the","that","of","I","I've"],"I think)":["of"],"I think.":["Why","`first_line`",":)"],"I thought":["I","about","about","that","about","\"is_\"","assigning","about","do_stuff","about","to","there","about","you","briefly","it","I","I","it","usage","about","I","the","I","those","about","the","it","they","I","part","I","you","passing","somebody","this","the","no","they","this","I'd","because"],"I thought,":["but"],"I took":["out","another","a","this","a","this","my"],"I took.":["Sometimes"],"I totally":["agree","missed"],"I touch":["elixir"],"I toyed":["with"],"I tracked":["down"],"I tried":["pattern","to","using","to","adding","to","to","to","pattern","it","several","to","it","that","replacing","it","to","to","using","`@brianne","to","to","to","to","to","here","to","to","that","to","out","aligning","to","short-circuiting","out","it","to","to","your","a","to","to"],"I try":["to","to","to","to","to"],"I trying":["to"],"I turned":["up"],"I understan":["now."],"I understand":["it","you","those","your","your","correctly,","what","it,","it,","your","it","that","it's","the","that","the","why","it,","that","you","`/\\w+/`","the","of","the","what","the","it,","why","it,"],"I understand,":["there"],"I understand.":["However,","It"],"I understood":["correctly"],"I updated":["this","`validate`","the"],"I uploaded":["a","a"],"I use":["them","that","a","in","the","macros","them","a"],"I use?":["I"],"I used":["a","a","the","String.graphemes","```","a","the","String.strip","them","`Regex.scan`","something","two","for","is","that.","it","a","`Enum#count`","the","`PhoneValidation`","this","the","`grep","`Enum.reduce`","`Graph.update`","HashDict","in"],"I usually":["prefer","prefer.","do","put","forget","prefer","use","indent","think"],"I waffle":["which"],"I want":["to","to","to","here,","to","to","to","to","to","to","to"],"I want.":["I'm"],"I wanted":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","a","to","to","my","some","the","to","more","to","to","to","it"],"I wanted.":["Is"],"I was":["looking","looking","going","going","unable","supposed","looking","able","doing","trying...","trying","looking","actually","mostly","seeing","converting","actually","allowing","trying","concerned","writing","surprised","thinking","wrong.","hoping","delighted","able","reading","really","initially","under","a","thinking","going","talking","trying","experimenting","just","reminded","never","clever","hoping","doing","using","waiting","doing","looking","getting","looking","just","guarding","trying","pretty","using","referring","referring","just","quite","not","wondering","composing","going","not","previously","new","doing","kind","using","able","not","a","just","not","not","missing","not","pretty","conflating","using","being","trying","initially","doing","forgetting!","safe","surprised","inspired","surprised","unaware","trying","hoping","trying","wondering,","too","thinking","having","wondering","thinking","talking","grateful.","hoping","not","wondering","actually","doing","expecting","stumbling","thinking","aware","more","a","pleased","working","leaning","somewhat","unsure","surprised,","going","Googling","guessing","just"],"I wasn't":["sure","sure","not","confident","aware","thinking","clear.","sure","aware","really","too","aware","focused","sure","sure","familiar","totally","sure.","clear","super","sure","sure","sure","sure"],"I welcome":["any"],"I went":["with","with","with","with","for","ahead","down","ahead","with","with","too","the","with","back","with","ahead","for","a","with","about","this","a"],"I went,":["but"],"I were":["seeking"],"I will":["give","try","adjust","rename","take","try","leave","update","mention","be","work","look","need","revise","be","check","try","think","try","submit","make","take","try","definitely","have","have","start","switch","work","keep","make","investigate","stay","trust","try,"],"I wish":["I'd","there"],"I wished":["I"],"I won't":["miss","speak"],"I wonder":["if","whether","whether","if","how","if","if","how","a"],"I wonder,":["however,"],"I wondered":["if"],"I work":["with"],"I worked":["this"],"I worry":["that"],"I would":["assume","probably","assume","also","consider","like","advise","maybe","maybe","look","probably","prefer","change","consider","also","just","choose","probably","suggest","personally","tend","leave","go","say","love","also","keep","have","probably","consider","also","mention","argue","totally","give","do","expect","say","be","have","probably","make","prefer","prefer","follow","probably","use","recommend","love","still","suggest","go","like","need","make","probably","be","agree.","find","change","stick","stick","have","probably","write","make","have","explore","encode","love","like","find","just","focus","appreciate","maybe","do","suggest","get","think","maybe","add:"],"I would't":["use"],"I wouldn't":["use","say","have","put","underscore","have","make","have","say","fault","use","have","give","expect"],"I write":["about","the"],"I written":["a"],"I wrote":["it.","my","that","that","the","the","that),","one.","a"],"I wrote.":["I"],"I yearn":["for"],"I'd actually":["like","thought","go"],"I'd also":["try","like"],"I'd appreciate":["more","thoughts"],"I'd appreciate.":["Thanks"],"I'd argue":["that"],"I'd be":["inclined","confused","curious","glad","keen","surprised","glad"],"I'd better":["repeat"],"I'd break":["this"],"I'd chalk":["in"],"I'd change":["is"],"I'd condense":["some"],"I'd definitely":["go"],"I'd do":["`String.strip(speak)","`Enum.count(fn","`Enum.count(sequence,"],"I'd downcase":["the"],"I'd encourage":["you"],"I'd expect":["it"],"I'd factor":["out"],"I'd filter":["out"],"I'd forgotten":["it"],"I'd go":["with","with","with"],"I'd have":["other"],"I'd jus":["use"],"I'd just":["compare","remove","used","swap","like","merge","reference","always"],"I'd keep":["multiple"],"I'd learned":[":)"],"I'd left":["everything"],"I'd let":["`match`"],"I'd like":["to","to","to","to","to","to","to"],"I'd look":["at","at","at"],"I'd love":["to","feedback","to","to","your","feedback"],"I'd made":["a"],"I'd make":["`scan_words`","`is_question?`,"],"I'd move":["those","the","it"],"I'd much,":["much"],"I'd need":["to"],"I'd normally":["prefer"],"I'd only":["try"],"I'd prefer":["to","to","using"],"I'd probably":["break","separate","use","write","shorten","go","use"],"I'd put":["the","the"],"I'd rather":["not","keep","go","see","adhere"],"I'd really":["appreciate","like","appreciate"],"I'd recommend":["is","making","for","a"],"I'd remove":["`@amanda`"],"I'd say":["it's","this","this","nullary","there","both","unlock","that","that","your"],"I'd still":["like"],"I'd suggest":["looking"],"I'd switch":["to"],"I'd tend":["to","to"],"I'd thought":["of"],"I'd totally":["do","forgotten"],"I'd try":["it"],"I'd urge":["you"],"I'd use":["`x`","the","the","iolist_to_binary","a"],"I'd write":["this","`candidates","this","it","it"],"I'd've thought":["of."],"I'll add":["that","some","that"],"I'll also":["have","have"],"I'll amend":["it."],"I'll back":["off."],"I'll be":["curious","taking"],"I'll change":["that.","them"],"I'll check":["for","that"],"I'll clean":["up"],"I'll consider":["this"],"I'll definitely":["check","look"],"I'll do":["it","one","so","some","that","some"],"I'll fix":["it","it"],"I'll get":["that"],"I'll give":["it","that","it","it"],"I'll go":["for","ahead","and","with","through","ahead","back"],"I'll have":["to","to","to","to","to","to","comments"],"I'll implement":["the"],"I'll just":["use","give"],"I'll keep":["thinking","that","an","looking,"],"I'll leave":["it","String.replace","my"],"I'll let":["you"],"I'll look":["at","into","at","it","for"],"I'll make":["a","that","that"],"I'll play":["with"],"I'll put":["back"],"I'll refactor":["where","the","and","this.","the"],"I'll refrain":["from"],"I'll remove":["that"],"I'll respond":["to"],"I'll resubmit":["with"],"I'll rework":["that"],"I'll rewrite":["it","it","it","it","it"],"I'll second":["what"],"I'll see":["if","what","if","if"],"I'll shift":["to"],"I'll spend":["more"],"I'll spin":["up"],"I'll still":["need"],"I'll stop":["commenting"],"I'll submit":["a","a","a","a","a","a","a","that","a","a","a"],"I'll switch":["to"],"I'll tackle":["trying"],"I'll take":["a","a","another","a","a"],"I'll think":["harder","about","about"],"I'll trust":["the"],"I'll try":[":-)","it","to","out","that!","to","another","that."],"I'll update":["it","that.","that.","the","my"],"I'll upload":["a"],"I'll use":["that"],"I'll usually":["default"],"I'll warm":["to"],"I'll work":["on","on"],"I'll wrap":["that"],"I'll write":["something"],"I'm (ab)using":["Exercism"],"I'm ```String.strip```-ing":["text"],"I'm a":["bit","fan","great","bit","total","bit","bit","long"],"I'm about":["to","to"],"I'm actually":["not","pretty","a"],"I'm already":["familiar"],"I'm also":["wary","slightly","leaning","a","reading"],"I'm ashamed":["I"],"I'm asking":["you"],"I'm assuming":["there","you"],"I'm at":["a"],"I'm aware":["of","of"],"I'm bad":["at"],"I'm being":["truly","dense"],"I'm by":["no","no"],"I'm checking":["the"],"I'm comfortable":["with","with"],"I'm coming":["to"],"I'm complete":["newbie"],"I'm concerned":["with,"],"I'm counting":["multiples"],"I'm curious":["whether","what","if","about","how","why"],"I'm curious,":["do"],"I'm curious:":["why","Did"],"I'm currently":["sorting","rewriting"],"I'm definitely":["going","learning"],"I'm doing":["is","this","on"],"I'm doing...":["coming"],"I'm done.":["I"],"I'm drawing":["a"],"I'm expecting":["a"],"I'm farthest":["ahead"],"I'm figuring":["that"],"I'm finding":["Elixir","my","it"],"I'm flattening":["since"],"I'm flipping":["to"],"I'm generally":["allergic"],"I'm getting":["hot","an"],"I'm glad":["you","to"],"I'm going":["to","abroad","to","to","to","to","to","to","to","through","to"],"I'm guessing":["that","you","this","you"],"I'm happy":["with","with","with","with","to","to","to"],"I'm having":["trouble","trouble","to","a"],"I'm here":["to"],"I'm importing":["every"],"I'm inclined":["to"],"I'm interested":["in","only","only","in","in"],"I'm jumping":["on"],"I'm just":["paraphrasing","giving","learning","learning","learning","trying","getting","not","using","not"],"I'm kind":["of","of"],"I'm least":["happy"],"I'm leaving":["on"],"I'm liking":["how","this"],"I'm looking":["at","at","around"],"I'm mainly":["just"],"I'm making":["my"],"I'm missing":["some","cover","something.","something.","something,"],"I'm mistaken":["this"],"I'm mistaken,":["the"],"I'm more":["of","in","familiar"],"I'm much":["more","happier"],"I'm never":["sure"],"I'm new":["to","to","enough","to","to","to"],"I'm no":["expert"],"I'm not":["sure","a","familiar","taking","entirely","sure","sure","familiar","interested","sure","happy","really","quite","sure,","familiar","sure","so","sure","sure","so","really","a","sure","sure","sure","sure.","very","yet","convinced","sure","so","sure","really","really","convinced","exactly","happy","sure","sure","sure","certain.","sure","sure","sure","sure","aware","at","really","sure","sure","sold","sure","much","sure","completely","sure","excited","sure","sure","completely","happy","sure","sure","as","so","sure","sure","a","sure","sure","really","going","sure","sure","quite","sure","sure","saying","a","a","a","quite","quite","sure","happy","sure","even","completely","sure","sure","sure","exactly","sure","finding","a","finished,","happy","sure","clear","sure","mistaken)","familiar","a","very","super","sure","saying","sure","sure","sure","very","100%","sure","sure","totally","using","very"],"I'm novice":["in"],"I'm ok":["with"],"I'm on":["the","pretty"],"I'm open":["to","to","to"],"I'm out":["of"],"I'm over":["thinking"],"I'm particularly":["curious"],"I'm perfectly":["happy"],"I'm pleasantly":["surprised","surprised"],"I'm pretty":["new","happy","content","new","sure","sure","new","sure"],"I'm probably":["writing","not","missing"],"I'm purposely":["ignoring"],"I'm quite":["lost","new"],"I'm reading":["more"],"I'm ready":["to"],"I'm really":["not","enjoying","not","curious"],"I'm reminded":["of"],"I'm reusing":["the"],"I'm running":["0.10.1-dev.","sequential"],"I'm sadly":["not"],"I'm so":["used"],"I'm somewhat":["torn,"],"I'm sorry,":["I","this"],"I'm still":["new","quite","working","learning","a","learning","learning","looking","getting","trying","fairly","picking","torn","not","not","an","learning","new","trying","rather","very","waiting","learning","trying","finding","interested","in","using,","trying","a"],"I'm struggling":["to","to"],"I'm submitting":["this","a"],"I'm supposed":["to"],"I'm sure":["there","there","there","there's","the","this","I'm","I","there's","Jose","there","we","that","you","there","there"],"I'm taking":["a"],"I'm talking":["about","about"],"I'm tempted":["to","to"],"I'm tending":["to"],"I'm the":["one"],"I'm thinking":["of","maybe:","about"],"I'm told":["there"],"I'm trying":["to","to","to","to"],"I'm unfamiliar":["with"],"I'm used":["to","to.","to"],"I'm using":["it,","0.10.0","both","`defp`","recursion","version","the","it"],"I'm using.":["(That's"],"I'm usually":["perfectly"],"I'm willing":["to"],"I'm with":["yortz."],"I'm wondering":["if","if","if","if"],"I'm working":["on","through"],"I'm writing":["code","is","a"],"I'm wrong),":["but"],"I'm wrong).":["That"],"I'm, frankly,":["not"],"I've *quite*":["got"],"I've actually":["used"],"I've added":["more","parentheses"],"I've also":["edited","seen","tried","done","toyed","changed"],"I've always":["preferred","seen"],"I've become":["a"],"I've been":["reaching","exploring","coding","doing","recommending","adopting","trying","banging","basically","working","bitten","doing","trying","using","working","getting"],"I've broken":["it"],"I've called":["`inc`"],"I've changed":["it"],"I've checked":["the"],"I've cleaned":["up"],"I've crafted":["instead."],"I've dealt":["with,"],"I've described":["above?"],"I've discovered":["Regex.scan,"],"I've done":["with","this","that"],"I've enjoyed":["the"],"I've ever":["written,","written"],"I've finished":["my"],"I've found":["of","conversion","the","Mastering","for"],"I've got":["an","zipper"],"I've gotten":["your"],"I've had":["a"],"I've heard":["of","people"],"I've implemented":["your"],"I've just":["added","taken","realised","had","started","learned","gotten"],"I've learned":["and","a","a"],"I've learnt":["more"],"I've likely":["taken"],"I've made":["a","that","changes","all"],"I've moved":["things","on…"],"I've never":["seen"],"I've not":["been","done"],"I've noticed.":["You"],"I've now":["submitted","figured"],"I've only":["got","ever"],"I've picked":["up"],"I've played":["with"],"I've pushed":["an","a"],"I've put":["in"],"I've read":["that","up"],"I've rebuilt":["`Enum.filter`"],"I've refactored":["my"],"I've reimplemented":["this"],"I've removed":["the","the"],"I've renamed":["the"],"I've seen":["that's","it","with","the","some","of","have","a","2","so","a","this","the","do"],"I've seen,":["so","snakecase"],"I've send":["in","a"],"I've started":["down"],"I've submitted":["a","new","another","my","a","a","a","a","an","a","another","an","another"],"I've taken":["another","with"],"I've then":["needed"],"I've thought":["of"],"I've tried":["to"],"I've typed":["it"],"I've updated":["based","the","my","the"],"I've used":["attributes","the","```count```","Enum.reduce","the","a","that"],"I've worked":["with"],"I've written":["a"],"I've written.":["It's"],"I, too,":["compared"],"I.e. don't":["indiscriminately"],"IMHO -":["like"],"IMHO :":["is"],"IMHO I":["consider"],"IMHO It":["would"],"IMHO is":["more","fine","more"],"IMHO it":["makes"],"IMHO the":["standard","approach"],"IMO is":["more"],"IMO would":["make"],"IMO you":["could"],"IMO, `empty?`":["doesn't"],"IMO, this":["is"],"IMO. I":["debate"],"IMO: `Regex.scan":["%r/\\w+/,input`"],"IMO; have":["you"],"IO.puts(\"good time:":["#{good_time},"],"IRC or":["the"],"Ideally I'd":["like","write"],"Ideas welcome":[":-)"],"Idiomatically `Enum`":["is"],"If I":["for,","used","understand","take","imported","understand","were","was","use","created","remember","remove","understood","am","take","knew","didn't"],"If P":["is"],"If `@judd`":["is"],"If `concat`":["takes"],"If `reverse`":["receives"],"If a":["word"],"If he":["had"],"If in":["doubt,"],"If it":["were"],"If it's":["perfect,","something"],"If most":["of"],"If not":["you","it's"],"If not,":["then","I'd","I'd"],"If people":["think"],"If so":["I"],"If so,":["what","yeah,","can","then","could"],"If something":["is"],"If that":["was","doesn't"],"If the":["function","cases","last","results","function","lists","list"],"If there":["are","aren't","are"],"If there's":["any","a"],"If these":["functions"],"If this":["code","were"],"If we":["accept"],"If we're":["nitpicking,"],"If you":["take","come","would","want","went","prefer","moved","do","squint,","want","do","disagree,","try","have","want","moved","made","are","want","prefer","want","do","can","downcased","check","use","haven't","add","had","could","fed","think","have","want","use","have","do","feel","want","use","do","were","want","want","don't","want","think","didn't","think","allow","ensure","used","call","ever","try","see","didn't","don't","don't","write","want","know"],"If you're":["using","running","using","curious"],"If your":["code","implementation","code"],"Ignore this.":["This","This"],"Imagine a":["large"],"Imagine for":["a"],"Imagine that":["our"],"Imagine there":["are"],"Impatient and":["Busy"],"Implemented the":["v0.10.1"],"Implementing the":["recursive"],"Importing functions":["isn't","and"],"Importing specific":["functions"],"In Elixir":["`v10.0.1`","the","that","it's","adding"],"In Elixir,":["when","at","it's","I","Erlang"],"In Elixir/Erlang":["it's"],"In Erlang":["based","and","based","based","based","based"],"In OCaml":["`|\u003e`"],"In Ruby,":["multi-word"],"In Ruby/Elixir":["sintax"],"In `count`":["you"],"In `difference`,":["line"],"In `first_line`,":["I"],"In `input":["=~"],"In `list`":["you"],"In `nucleotide_counts`":["you"],"In `same_word?`":["you"],"In `shouting?`":["you","note"],"In `to_rna`,":["you"],"In a":["larger","practical"],"In all":["the"],"In any":["case,","case","case","case"],"In both":["cases"],"In case":["you"],"In contrast,":["`blank?`"],"In count,":["every"],"In fact":["I"],"In general":["though,","I","I","it's","it's","if","it's","I'm","`HashDict`","it's","explicit","I'd","it's","it's","it's","in","it's","`|\u003e`","it's"],"In languages":["with"],"In light":["of"],"In line":["4"],"In more":["depth."],"In most":["cases"],"In my":["head,","opinion","implementation","previous","experience,","opinion,"],"In order":["of"],"In other":["words,","words","languages","words,","words,","words"],"In particular":["there's"],"In regards":["to","of"],"In same_word?":["you"],"In sanitize":["you"],"In that":["respect"],"In the":["example","PeepCode","PeepCode","domain","`count`","end","first","sing/2","light","meantime,","meantime,","spirit","specific"],"In this":["case","specific","light,","case","context","exercise,","case,","case","implementation,","exercise","case","particular","particular","case","particular","case,","case,","case,","case","case","case","case"],"In what":["situation"],"In your":["word","`increment_count`","original"],"Incoming with":["Enum.reduce"],"Incorporated some":["of"],"Incorporated the":["great"],"Indeed. I":["like"],"Indeed. You've":["avoided"],"Inexperience with":["Elixir"],"Init HasDict":["like"],"Initially I":["raised","went"],"Initially, I":["tried"],"InputCategory -":["wonder"],"InputCategory, for:":["String`"],"Insisting on":["adding"],"Inspect, for:":["CustomSet"],"Inspect.Algebra for":["beer-song."],"Inspect.Algebra, then":["I"],"Instead it":["appears","returns"],"Instead of":["```String.length","redefining","using","having","writing","replacing","removing","`String.last(input)","using","replacing","replacing","removing","using","`HashDict.fetch!`","`[^\\p{L}]`","replacing"],"Instead we":["usually"],"Instead, just":["use"],"Integrated @kayli's":["hints"],"Interested in":["thoughts"],"Interesting approach,":["but"],"Interesting discoveries":["on"],"Interesting trick":["with"],"Interesting use":["of"],"Interesting! As":["someone"],"Interesting, I":["guess","wonder","would","thought"],"Interesting, but":["feels"],"Interesting, eh?":["And"],"Interesting. I":["definitely","looked","submitted"],"Interesting... I'll":["try"],"Interestingly I":["(feeling"],"Interestingly enough":["`List.zip/1`"],"Iolists are":["pretty","an"],"Is \"10!\"":["yelling?"],"Is \"something_with_underscores\"":["a"],"Is `co-operative`":["a"],"Is `coöperative`":["a"],"Is `thymidineToUracil`":["intended"],"Is a":["separate","better"],"Is it":["faster","possible","possible","not","possible?","not","really","idiomatic","common","possible","ok,","because","okay","just","even"],"Is that":["what","referring","considered","not"],"Is the":["`Enum.join`","regex","elixir","List.flatten","List.flatten","`question?`","`Enum.join`","`hey/0`","`String.from_char_list!`","&amp;(...)","`String.from_char_list!`","HashDict.to_list(input)"],"Is there":["a","a","much","a","a","a","a","a","a","some","a","another","a","a","a","a","any","any","a","a","a","a","a","a","a","other","a","a","a","a","an","a","a","any","something","a","a","a","any","any","a","any","a","a","a","a","a","an","any","any","any","a","a","some","a","a","a","a","a","a","a","a"],"Is this":["what","what","legit?","for","a","what","intentional?"],"Is using":["regexes"],"Is your":["current","`Statement`"],"Isn't `newline_appender`":["more"],"Isn't the":["```is_```","``ìs_```"],"Ist `Enum.take`":["what"],"It **is**":["sort"],"It actually":["translates"],"It adds":["slightly"],"It allows":["you"],"It also":["uses","seems","makes","has","means","gives","makes"],"It breathes":["now"],"It can":["be","simplify","be"],"It certainly":["reads"],"It could":["then","be"],"It depends":["on"],"It did":["seem"],"It does":["not","not","the","handle","seem","read"],"It doesn't":["compile","take","do","pass"],"It ends":["up"],"It fails":["the"],"It feels":["very","a"],"It felt":["to","like","more"],"It guarantees":["that"],"It happened":["in"],"It helps":["to","distinguish"],"It implies":["something"],"It includes":["things"],"It is":["easy","not.","the","not","possible.","_entirely_","an","optimized","only","superficially","indeed"],"It just":["changed"],"It kinda":["bugged"],"It looked":["like","like"],"It looks":["like","like","like","good","nicer","a","a","like"],"It made":["me"],"It makes":["cond","sense,","me","the","it"],"It may":["be","just","have","be"],"It might":["help","help","be","also","also","help","help","be","be","help","get","pass","be","be","be"],"It parses":["as"],"It probably":["is,","belongs"],"It reads":["horribly!"],"It reminds":["me"],"It removes":["the"],"It requires":["close"],"It saves":["you"],"It seemed":["like"],"It seems":["there's","like","like","a","like","like","the","like","like","like","weird","like","like","like","useful","about","a","you","like--as","reminiscent","like","a","a","more","like","like","so"],"It separates":["the"],"It should":["be"],"It sort":["of"],"It sounds":["like"],"It still":["uses"],"It struck":["me"],"It takes":["a"],"It tells":["me"],"It took":["me","more"],"It tried":["to"],"It turns":["out","out","out"],"It uses":["a"],"It was":["left","a","more","a","a","odd"],"It will":["let","use","be","help"],"It worked":["except"],"It works":["because","very"],"It works,":["but"],"It would":["be","be","make","be","be","make","be","be","be","be","be"],"It'd be":["really","a","more","sweet"],"It'll make":["the"],"It's [here](http://elixir-lang.org/docs/stable/),":["the"],"It's a":["good","neat","lot","bit","bit","*function","private","personal","matter","little","shifty","similar","bit","bit","pretty"],"It's actually":["quite"],"It's also":["possible","possible","easier"],"It's always":["a"],"It's an":["interesting"],"It's annoying":["to"],"It's basically":["doing"],"It's beautiful":[":)"],"It's been":["good"],"It's clear":["*what*"],"It's clever,":["but"],"It's common":["to","to","not","to","to","to","to","to","to"],"It's concise,":["but"],"It's definitely":["easier"],"It's deprecated":["in"],"It's duplication,":["and"],"It's generally":["preferred","better"],"It's good":["to"],"It's inconsistent":["to"],"It's indeed":["best"],"It's just":["an","added","that"],"It's kind":["of"],"It's legit.":["If"],"It's like":["naming"],"It's more":["concise,","work","that","powerful","immediately","efficient"],"It's nice":["and"],"It's not":["quite","a","something","really","common","possible","efficient","checking","quite","like","visibility","something","totally","documented","many"],"It's obvious":["that"],"It's often":["better"],"It's one":["of"],"It's only":["a"],"It's perfectly":["legal,","fine","possible"],"It's possible":["to","to","to","to","to","to"],"It's pretty":["succinct,","much","cool","common","uncommon"],"It's probably":["overly","better","more","a","better","a"],"It's quite":["common"],"It's should":["be"],"It's similar":["to"],"It's strange":["that"],"It's style":["matter"],"It's the":["`|`","same","way","second","same"],"It's things":["like"],"It's to":["keep","have"],"It's totally":["fine,"],"It's true":["that"],"It's uncommon":["to"],"It's using":["the"],"It's valid":["Elixir"],"It's very":["concise.","brute"],"It's way":["more"],"It's where":["you"],"It's wonderful":["how"],"It's worth":["to"],"Iteration #2":["submitted."],"Iterator and":["an"],"Its like":["writing"],"It´s much":["better."],"It’s a":["great"],"I’m wondering":["if"],"JS one),":["but"],"Java collection":["interfaces"],"Java doing":["that."],"Java, a":["painful"],"JavaScript because":["you"],"JavaScript dictated":["that"],"Javascript and":["Python"],"Je ne":["connaissais"],"Jeffrey Friedl":["to"],"Jeremy said":["I'm"],"Job! A":["couple"],"Job! Almost":["there!"],"Job! It's":["one"],"Joe Armstrong's?)":["advice"],"John, I":["started"],"Jose Valim":["he"],"Jose Valim,":["the"],"Jose et":["al"],"José Valim":["used","uses","is"],"José actually":["explained"],"José confirmed":["that"],"José's style":["or"],"Julien: Thanks":["for"],"Jumping between":["char"],"Just `?`":["suffixes"],"Just a":["couple","regular","little","couple","quick","couple","couple","minor","string","small","quick","general","couple","couple","couple","couple","tiny","couple","couple"],"Just an":["idea...","FYI,"],"Just another":["Elixir"],"Just asking.":["I"],"Just be":["careful","aware"],"Just because":["pipelines"],"Just curious,":["does","@liliane,","but"],"Just do":["a"],"Just encode":["them"],"Just finished":["watching"],"Just for":["the","the"],"Just in":["case"],"Just kind":["throwing"],"Just learning":["Elixir"],"Just looked":["into"],"Just looking":["at"],"Just my":["two"],"Just noticed":["`occurrences`","you've","your"],"Just one":["last","thing:","little","minor","last"],"Just opening":["up"],"Just out":["of"],"Just pass":["the"],"Just playing":["with"],"Just pushed":["an"],"Just realized":["this"],"Just remember":["to"],"Just so":["you"],"Just started":["out","with"],"Just starting":["on","with","to"],"Just submitted":["with"],"Just to":["push"],"Just treat":["the"],"Just two":["points"],"Just updated":["my"],"Just wanted":["to","to"],"Just wonder":["if"],"Just wondering":["why"],"Katrina Owen":["is"],"Katrina merges":["my"],"Katrina. But":["it"],"Keep in":["mind"],"Keep your":["hands"],"Kept the":["GenEvent"],"Kernel in":["guards"],"Kernel methods.":["Looking"],"Kernel) or":["`blah?`"],"Kernel, call":["is"],"Kernel, except:":["[inspect:"],"Kernel, which":["may"],"Kernel.SpecialForms.import/2. You":["can"],"Kernel.inspect without":["doing"],"Kernel.inspect(CustomSet.to_list(s), opts),":["\"\u003e\"]"],"Kernel.length as":["a"],"Kernel.size/1 for":["the"],"Keyword.keyword? until":["late"],"Keyword.keyword?(kws) do":["..."],"Kind of":["a"],"Kinda crazy.":["Maybe"],"L10's `Regex.match?`":["with:"],"L12 change":["is"],"L12 to":["use"],"L12's `Regex.match?`":["with:"],"L23 is":["cool,"],"L4 are":["L6"],"L9's `Regex.match?`":["with:"],"LISP. Not":["necessarily"],"LOL; my":["bad!"],"Language might":["be"],"Language module":["methods?","is"],"Last, the":["last"],"Lazy Impatient":["and"],"Learned more":["about"],"Less of":["the"],"Let me":["try","know","know","know","know","know","update","know","know","put","know","rephrase","first","push","know","revisit","just"],"Let the":["nitpicking"],"Let's consider":["a"],"Let's just":["fix"],"Let's look":["at"],"Let's see":["how"],"Let's see.":["Here's"],"Let's take":["for","for"],"Life too.":["I"],"Like \"":["Hey"],"Like I":["said,"],"Like Ruby":["symbol-to-proc"],"Like in,":["say,"],"Like manute":["mentioned"],"Like this":["code"],"Like you":["said,"],"Line 10":["contains"],"Line 16":["should","improves"],"Line 17":["could"],"Line 20":["actually","can"],"Line 21":["is"],"Line 7":["is"],"Line 8":["is"],"Lines 10":["and"],"Lines 9-11":["don't"],"List and":["Phrase."],"List append":["is"],"List but":["couldn't"],"List comprehensions":["are"],"List defs":["to"],"List functions":["-"],"List of":["matches"],"List would":["not"],"List#foldl ```":["will"],"List, Dict":["instead"],"List.concat would":["more","be"],"List.concat/1 is":["more"],"List.count, but":["now"],"List.flatten did":["bug"],"List.flatten in":["this"],"List.flatten is":["necessary"],"List.flatten necessary":["or"],"List.flatten necessary?":["Do"],"List.flatten, the":["test"],"List.flatten. I":["was"],"List.flatten... not":["sure"],"List.flatten/1 is":["the"],"List.flatten? I":["can't"],"List.flatten` but":["I"],"List.flatten` can":["often","usually"],"List.foldl instead":["of"],"List.foldl or":["Enum.reduce"],"List.foldl( HashDict.new(),":["update(&amp;1,"],"List.foldl(&amp;1, HashDict.new(),":["Words.update)"],"List.foldl(list(words), HashDict.new,":["update_count(&amp;1,"],"List.foldl/3 and":["HashDict.update/4?"],"List.foldr is":["slightly"],"List.insert_at call,":["but"],"List.zip doesn't":["pad"],"List.zip looks":["better"],"List.zip part":["in"],"List.zip to":["avoid"],"List.zip you":["can"],"List; I":["could"],"ListDict implementation":["based"],"ListDict in":["`allergic_to?`."],"ListDict lookup,":["which"],"ListOps exercise)":["do"],"ListOps exercise.":["2^64-1"],"Lists module":["and"],"Long story":["short,"],"Look at":["your","`Dict.update/3`,","`Enum.reduce`","Dict.get"],"Look in":["`Regex`."],"Look into":["`cond`.","posix"],"Look through":["[the"],"Looked through":["the"],"Looking at":["\"is_\"","\"?\"","the"],"Looking back":["at","I"],"Looking forward":["to","to","to"],"Looking good!":["If"],"Looking great.":["Agree"],"Looking very":["clean!"],"Looks *much*":["better."],"Looks a":["lot"],"Looks almost":["like"],"Looks fairly":["good."],"Looks good":["overall.","to","though.","to","to","to",",","in","in","now.","to","in"],"Looks good!":["I","One","Just"],"Looks good,":["but","but","you've","aside","aside"],"Looks good.":["Personally,","A","One","The","I","You","This","Pretty","One","Just","One","A","Just","You've","There","You've","You","Often","I","You","Just","You","There"],"Looks great":["-","in"],"Looks great!":["You"],"Looks great,":["I","only"],"Looks great.":[":)","I've","Elixir","A","My","Just","A","One","I","There",":)","You've"],"Looks like":["it","good","that's","idiomatic","I","your","I","you're","exercism","you've","a"],"Looks nice!":["The"],"Looks nice.":["Don't","Have","Nice","Just","I"],"Looks pretty":["much","good.","good!","nice!","good.","good","good.","good","good.","good.","good.","good.","good.","good.","good.","good.","nice!","good!","good.","nice","nice.","nice."],"Looks quite":["good."],"Looks really":["good.","neat,","good;"],"Looks very":["complex."],"Love `maintain_buzz`":["as"],"Love the":["is_whatever?","descriptive","use","use","use","increment"],"Love this":["solution"],"MAN\") ==":["\"HEY"],"MAN\")` will":["return"],"MOTHER OF":["GOD!"],"Macro.escape, I":["was"],"Made small":["changes"],"Made them":["easier"],"Mainly I":["think"],"Maintains algorithm":["encapsulation"],"Make sure":["to"],"Make the":["predicate"],"Makes sense":["to"],"Many tail-call":["things"],"Map vs.":["HashMap/TreeMap"],"Mark -":["implementation"],"Mastering Regular":["Expressions"],"Matching on":["the"],"Maybe I":["found","will","should"],"Maybe I'll":["give","try","upload"],"Maybe I'm":["over","missing","not"],"Maybe ```Greeting```":["isn't"],"Maybe `summary`":["?"],"Maybe a":["better","cond?","better"],"Maybe consider":["deleting","putting"],"Maybe declare":["the"],"Maybe get":["my"],"Maybe im":["missing"],"Maybe it":["would"],"Maybe it's":["not","a","a","the","something"],"Maybe just":["do"],"Maybe look":["in"],"Maybe make":["the"],"Maybe reducing":["over"],"Maybe returning":["`false`"],"Maybe someone":["has"],"Maybe that":["should"],"Maybe the":["`count","code","tests"],"Maybe there":["still","should"],"Maybe there's":["a","a"],"Maybe this":["is"],"Maybe try":["`Regex.scan/3`","that"],"Maybe wrapping":["it"],"Maybe you":["could","could","could","could","could","could","could"],"Merging is":["certainly"],"Message fit":["in"],"Message into":["its"],"Message module?":["What"],"Message with":["public"],"Message, only:":["[silent?:"],"Might \u003ccode\u003eEnum.reduce\u003c/code\u003e":["help"],"Might be":["easier","a"],"Might consider":["having"],"Might help":["to"],"Might it":["tell"],"Might just":["bit"],"Might make":["line"],"Might need":["a"],"Might not":["seem"],"Might simplify":["some"],"Might there":["be"],"Mike, looking":["good!"],"Minor nit,":["but"],"Minor point,":["but","but","`Enum`"],"Minor point:":["The"],"Minor style":["point:"],"Minor stylistic":["nit:"],"Missed it":["because"],"Mm, in":["general"],"Mm, probably":["best"],"Mm, yeah,":["I"],"Mmm... sorry,":["@carole,"],"Module attributes":["are"],"More idiomatic":["approach","Elixir"],"More importantly":["though"],"Moreover, it":["seems"],"Moreover, you":["can"],"Most functions":["are"],"Most importantly,":["inverted"],"Most obviously,":["on"],"Most of":["the","this"],"Most people":["would"],"Mostly Erlang":["podcast"],"Moved anonymous":["function"],"Moved the":["functions"],"Much Better!":["Check"],"Much better":["now."],"Much better!!":["I"],"Much better.":["Thanks!","Most"],"Much clearer":["having"],"Much easier":["to"],"Much like":["Ruby"],"Much more":["clear."],"Much nicer.":["I"],"Much simpler":["than"],"My First":["Program(tm)"],"My apologies":["if"],"My apologies.":["I"],"My biggest":["problem","doubt"],"My first":["code","go","attempt","passes","pass","solution","thought","raw"],"My goals":["were"],"My guess":["is"],"My initial":["attempt","instinct"],"My intent":["was"],"My last":["point"],"My mind":["is"],"My next":["question","iteration"],"My only":["thought","other","nitpick","comment","suggestion","other","nit","thought","minor"],"My opinion":["on"],"My other":["concern"],"My personal":["aesthetic","rule"],"My preference":["might"],"My problem":["with"],"My question":["regarding"],"My solution":["was","was"],"My suggestion":["of","is"],"My super":["module"],"My version":["had"],"NOT a":["nitpick."],"NOT to":["use"],"NOT. I":["worry"],"Names are":["hard"],"Naming a":["variable"],"Naming the":["variable"],"Naming them":["slightly"],"Neat! I":["like"],"Neat! Thanks":["for"],"Never even":["noticed."],"Never forget":["the"],"Never seen":["the"],"New Years.":[":)"],"New stack":["entry","entry","entry","entry","entry","entry","entry","entry","entry","entry"],"New version":["up.","coming"],"Next I'll":["tackle"],"Next after":["what?"],"Next is":["to"],"Nice ,":["but"],"Nice -":["that"],"Nice --":["I","still","I"],"Nice addition,":["I"],"Nice and":["concise,","simple,","concise."],"Nice breakdown":["of"],"Nice docs":["and"],"Nice job":["but","separating"],"Nice named":["functions"],"Nice recursive":["solution"],"Nice solution":["!!"],"Nice solution!!":[","],"Nice suggestion":["for"],"Nice suggestion:":["I"],"Nice tips,":["thanks!"],"Nice to":["know"],"Nice use":["of","of","of","of","of","of","of","of","of","of","of","of","of"],"Nice work":["anyway!"],"Nice work,":["If","but"],"Nice work.":["A","I"],"Nice! But":["the"],"Nice! I":["like","like","like","really","would","think"],"Nice! I'm":["not"],"Nice! Looking":["forward"],"Nice! Looks":["good"],"Nice! One":["more"],"Nice! This":["is"],"Nice! You":["can"],"Nice! updated":["code."],"Nice!! ,":["you"],"Nice!!! Love":["the"],"Nice, I":["really","really","really","like","really","really","like"],"Nice, I'd":["move"],"Nice, simple,":["and"],"Nice, that":["makes"],"Nice, the":["`Regex.replace`"],"Nice, we":["handled"],"Nice, you've":["found"],"Nice. Have":["you"],"Nice. I":["like","like","feel"],"Nice. Looks":["good."],"Nice. There's":["a"],"Nil checking":["doesn't"],"Nitpick :)":["and"],"Nitpick help":["page?)."],"Nitpickers never":["remember"],"Nitpicking if":["often"],"No ,":["if","in"],"No I":["hadn't","prefer"],"No a":["fan"],"No bad":["at"],"No function":["that"],"No idea":["to","how"],"No if":["you"],"No more":["duplicated"],"No need":["for","to","for"],"No prob,":["@paxton."],"No problem!":["For"],"No that":["suffers"],"No, I":["don't","have"],"No, actually":["I"],"No, perfect.":["I"],"No, sorry":["I"],"No, there's":["no"],"No. In":["my"],"No. Remnants":["of"],"Nope -":["removed"],"Nope but":["I"],"Nope, `cond`":["and"],"Nope, exercises":["aren't"],"Nope, none":["in"],"Nope, not":["possible"],"Nope, there":["isn't."],"Nope. The":["Elixir"],"Normalize is":["a"],"Normalizing the":["case"],"Not a":["big","big","fan","big","requirement,"],"Not all":["duplication"],"Not at":["all,"],"Not bad,":["I"],"Not because":["the"],"Not even":["sure"],"Not for":["you?"],"Not having":["parentheses"],"Not matching":["all"],"Not much":["hope","of","nits"],"Not necessarily":["the"],"Not perfectly":["happy"],"Not quite":["sure"],"Not really":["a","in"],"Not really.":["The"],"Not so":["much","much"],"Not super":["happy"],"Not sure":["it","about","how","I","if","how","this","about","if","what","of","about","if","if","how","if","if","about","why","it","I","what","I","about","why","I've","which"],"Not sure.":["It's","What","But","Phone-number"],"Not that":["I","I"],"Not totally":["happy"],"Not very":["satisfied"],"Not worth":["defining"],"Not worth,":["uploaded"],"Note also":["that"],"Note how":["for","for","for","for","for"],"Note that":["`size`","you","`\\w`","the","when"],"Note to":["self:"],"Note, I":["don't"],"Nothing spectacular":["going"],"Nothing to":["add."],"Nothing wrong":["with"],"Notice how":["all","the"],"Notice that":["now","this"],"Noticed that":["`&(String.downcase"],"Now I":["know","do.","included"],"Now I'm":["not","ashamed"],"Now all":["13"],"Now consider":["a"],"Now if":["you'll"],"Now it":["just"],"Now look":["at","at","at","at","at"],"Now that":["you","your","I'm","the"],"Now the":["two"],"Now uses":["|&gt;"],"Now you":["have","have","mention","get"],"Now you've":["got"],"Now, if":["I"],"Now, unto":["the"],"Nowhere. I":["just"],"Nullary methods":["can"],"O( n^2":[")"],"O(1), appending":["is"],"O(n *":["log(n)).","log"],"O(n log":["n)"],"O(n) (getting":["the"],"O(n) (with":["a"],"O(n) complexity":["(on"],"O(n) since":["the"],"O(n) time":["where"],"O(n)). Consider":["what"],"O(n), since":["lists"],"O(n^2) algorithm":["when"],"O(n^2) due":["to"],"OCaml `|\u003e`":["is"],"OCaml and":["try","try","try","try","try"],"OCaml not":["making"],"OCaml the":["\"official\""],"OCaml you":["won't"],"OK, I":["can"],"OK, back":["to"],"OK, so":["you"],"OK, this":["one"],"OK. I":["see","see"],"OK. I've":["updated","got"],"OK. It":["certainly"],"OK. Let":["me"],"OK... I":["did","slightly","kinda"],"ONLY place":["the"],"OO Rubyisms":["into"],"OO about":["assignments."],"OO background,":["happy"],"OO code":["smell"],"OO in":["my"],"OO thinking":["or"],"OO versions":["of"],"OO way":["of","of"],"OS X":["10.7.5"],"OTOH is":["totally"],"OTP is":["in"],"OTP to":["start."],"OTP version":["is","as"],"OTP videos":["on"],"OTP with":["a"],"OTP's error":["handling"],"OTP, I":["dropped"],"OTP, but":["the"],"OTP. Thanks":["for"],"Object style":["thinking"],"Obviously not":["ideal"],"Odd, that":["shouldn't"],"Odd. Enum.reduce(input,":["...)"],"Odds are":["you'll"],"Of course":["my","I","in"],"Of course,":["if","you","you'd"],"Of course.":["That"],"Off the":["top"],"Often code":["with"],"Often functions":["like"],"Often people":["put"],"Often there's":["a"],"Often this":["makes"],"Oh I":["see"],"Oh good":["call."],"Oh great,":["thanks."],"Oh how":["I"],"Oh my,":["the"],"Oh nice,":["did"],"Oh right,":["of"],"Oh sorry,":["didn't"],"Oh sure.":["I"],"Oh wow,":["the"],"Oh yes,":["I"],"Oh! Thanks":["so"],"Oh! and":["init"],"Oh, I":["forgot","finally","get","agree,","didn't"],"Oh, also,":["I"],"Oh, and":["`HashDict.update("],"Oh, awesome!":["Forgot"],"Oh, awesome,":["I"],"Oh, by":["the"],"Oh, correct,":["I"],"Oh, did":["not"],"Oh, good":["one."],"Oh, nevermind...":["what"],"Oh, nice":["use"],"Oh, nice,":["I"],"Oh, no":["need"],"Oh, really?":["Cool!"],"Oh, right!":["Thanks."],"Oh, sorry,":["yeah"],"Oh, very":["cool."],"Oh, yeah,":["true."],"Oh, you":["have"],"Ok !!":["Thanks"],"Ok ,":["for","thanks"],"Ok I":["think","see","will"],"Ok it":["is"],"Ok so,":["I"],"Ok thanks":["for","for","@nickolas","@joey"],"Ok this":["test","needs"],"Ok, I":["understand.","hadn't"],"Ok, I'm":["liking"],"Ok, I've":["submitted","removed"],"Ok, interesting":["that"],"Ok, just":["wading"],"Ok, long":["list"],"Ok, now":["I"],"Ok, on":["consideration"],"Ok, still":["stuck."],"Ok, think":["I"],"Ok, this":["was"],"Ok. That's":["better."],"Ok... I":["know"],"Ok... I'll":["stop"],"Okay, I'm":["going"],"Okay, that's":["fine."],"Okey dokey.":["Done."],"Old habits,":["maybe."],"Omitting the":["capture"],"On `question?`,":["you"],"On a":["pareil"],"On line":["7,","30,","32,","14","16:","11,"],"On lines":["18-20,"],"On the":["other","other","whole","whole","whole","other","whole","whole","whole","whole"],"On to":["the"],"On your":["first"],"Once again,":["I"],"Once an":["exercise"],"Once you":["complete"],"One (super":["nitpicky)"],"One alternative":["you"],"One bottle":["of"],"One comment":["from"],"One final":["note"],"One hint":["is"],"One issue":["there:"],"One last":["nitpick"],"One little":["style","tip:"],"One major":["nitpick,"],"One minor":["point:"],"One more":["thing","hint:","consideration,"],"One nit":["about"],"One of":["the","the","the","the"],"One other":["thing","thing,"],"One person's":["solution"],"One possibility":["is"],"One qualm":["with"],"One question":["though,"],"One readability":["hack"],"One result":["of"],"One says":["\u003ccode\u003eyelling?\u003c/code\u003e"],"One small":["nit:","thing:","tip:","thing:","thing:","thing","thing:","(and","note","nit,","thing:"],"One thing":["though",",","I",",the","though:","you","I'm","that","about","though:","I","though:","though:","you"],"One thing:":["the"],"One thought":["exercise:"],"One tiny":["(truly","thing:"],"One very":["minor","minor"],"One way":["to","you"],"Only -":["tiny,"],"Only `count`":["is"],"Only downside":["of"],"Only improvement":["I"],"Only in":["a"],"Only nitpick":["I"],"Only one":["thing","thing"],"Only the":["former"],"Only thing":["I'd","I'd","I","I"],"Only ugly":["bit"],"Ooh, good":["point!"],"Ooh, or":["`String.replace(number,%r/(...)(...)(....)/,\"(\\\\1)"],"Ooh, thanks.":["That's"],"Oooh, nice":["use"],"Oops just":["as"],"Oops, I":["guess"],"Oops, I've":["just"],"Oops, looks":["like"],"Oops, no,":["sorry."],"Oops, sorry":["I"],"Oops. Just":["realized"],"Optimizing code":["usually"],"Or `%r\\(.{3})(.{3})(.{4})/`":["perhaps..."],"Or a":["named"],"Or break":["it"],"Or breaking":["it"],"Or even":["a"],"Or is":["there"],"Or message":["=="],"Or perhaps":["since"],"Or were":["you"],"Or would":["you"],"Or you":["could"],"Other points":["are"],"Other than":["that","that","that,","that,","that,","that","that,","that,","that,","that","that,","that,","that,","that,"],"Otherwise I":["think"],"Otherwise join":["would"],"Otherwise looks":["great!","fine."],"Otherwise my":["first"],"Otherwise this":["looks"],"Otherwise, looking":["good."],"Otherwise, looks":["good!"],"Otherwise, this":["looks"],"Out of":["nitpicks","curiosity,"],"Over-engineered `concat`":["on"],"Overall I":["really"],"Overall I'm":["pretty"],"Overall solution":["is"],"Overall this":["code"],"Overall though":["this"],"Overall you":["did"],"Overall, I'm":["not"],"Overall, very":["clean."],"Overuse of":["pipelines"],"Owen is":["working"],"P (`word":["=="],"P is":["false"],"P)` depends":["solely"],"P)`. The":["thing"],"P, if":["P"],"P.S. I":["get"],"P.S. i":["am"],"POSIX character":["classes,"],"PR for":["that):"],"PR merged":["to","that"],"PR open":["with"],"PR this":["exercise"],"PR to":["use","fix","fix","fix,","add"],"PR when":["I"],"PR. I":["mentioned"],"PS, stoked":["that"],"P`. As":["you"],"Parens all":["over;"],"Parens are":["pretty"],"Parentheses are":["required"],"Parentheses around":["`HashDict.new`"],"Part of":["what's","the"],"Passes all":["the"],"Passes the":["tests;"],"Passing a":["range"],"Passing data":["in"],"Passing in":["the"],"Passing the":["verse"],"Pattern Matching":["on"],"Pattern matching":["on","isn't","is","the","supports","(case)"],"PeepCode episode":["with"],"PeepCode video":["with"],"Peepcode screencast,":["so"],"People will":["more"],"Performance of":["this"],"Perhaps \"client-code\"":["is"],"Perhaps if":["there","I"],"Perhaps pminten":["can"],"Perhaps someone":["more"],"Perhaps there":["are","is"],"Perhaps there's":["a"],"Perhaps you":["could","can","should"],"Perl programmer.":["RegExes"],"Personally I":["always"],"Personally I'd":["do"],"Personally, I":["might","think","think","prefer","wouldn't"],"Phew, this":["one"],"Phone-number is":["one"],"Phone.number(\"+1 (303)":["555-1212\")"],"PhoneValidation will":["still"],"Phrase instead":["of"],"Phrase, or":["Language"],"Phrase. I":["find"],"Pipe convention...":["could"],"Pipe operator":["`|\u003e`"],"Pipe sends":["to"],"Pipelines are":["just"],"Pipelines certainly":["have"],"Piping multiple":["parameters"],"Playing with":["list"],"Please don't":["let"],"Please implement":["String#graphmemes"],"Please let":["me"],"Please look":["at","at"],"Please read":["my"],"Please see":["iteration"],"Please share":["if"],"Please suggest":["how"],"Please upgrade":["your","your","your"],"Plus I":["think","don't"],"Plus I'm":["not"],"Plus, and":["probably"],"Precedence can":["be"],"Predicate functions:":["These"],"Predicates are":["pretty"],"Prepending on":["a"],"Preserve leading":["number"],"Presumably the":["user"],"Pretend those":["make"],"Pretty cool!":["I"],"Pretty much":["everywhere","like"],"Pretty much,":["yes."],"Pretty nice":["implementation"],"Pretty similar":["to"],"Previous exercises":["never"],"Previous version":["was"],"Previously, I":["had"],"Principle and":["make"],"Private functions":["can"],"Probably a":["lot"],"Probably because":["they","of"],"Probably doesn't":["solve"],"Probably it":["would"],"Probably. I":["have"],"Process.register/whereis, which":["reads"],"Process.whereis and":["avoid"],"Process.whereis in":["the"],"Program(tm) in":["elixir"],"Programming Elixir":["here.","and"],"Programming Elixir.":["That's"],"Protocols in":["general"],"Public interface":["first"],"Pulling out":["the","the"],"Pushed an":["updated"],"Pushing a":["new"],"Put differently,":["are"],"Put the":["contents"],"Putting parentheses":["in"],"Python or":["Ruby."],"Python to":["something"],"Q (`String.ends_with?":["word,"],"Q to":["you."],"Quality copy":["pasted"],"Query as":["that"],"Query module.":["I"],"Question is":["whether"],"Queue up":["fascinated_spock.jpg;"],"Quick Elixir":["tip:"],"Quick cleanup":["of"],"Quick follow":["up"],"Quite happy":["with"],"R16B01 (erts-5.10.2)":["[source]"],"R16B01. I'm":["working"],"README \"How":["it"],"README associated":["with"],"README comment":["was"],"README doesn't":["mention"],"README excludes":["the"],"README says":["\"treat","up"],"README so":["performance"],"README tell":["you"],"Range in":["the"],"Range was":["a"],"Range! :)":["(Only"],"Rather than":["doing","the","updating"],"Re: ```empty?/1```,":["thank"],"Re: constants":["-"],"Re: imports":["-"],"Re: paretheses":["-"],"Readability is":["definitely"],"Reading the":["new"],"Reading through":["`hey`,"],"Realised I'd":["made"],"Realized my":["`only:`"],"Really clean.":["I"],"Really interesting":["implementation!"],"Really minor":["nit:"],"Really nice!":["Love"],"Really, I":["just"],"Record.new(a: ...,":["b:"],"Recursion, new":["stack","stack","stack","stack","stack","stack","stack","stack","stack","stack"],"Recursion, no":["new","new","new","new","new"],"Refactoring comes":["later"],"RegEx better":["than"],"RegEx in":["some"],"RegExes don't":["scare"],"RegExp was":["tempting,"],"Regarding #2":["--"],"Regarding `anything_else`,":["I"],"Regarding `blank?`":["-"],"Regarding `count`:":["I've"],"Regarding `shouting?`,":["it"],"Regarding new,":["the"],"Regarding one":["liners"],"Regarding strings":["that"],"Regarding the":["complexity,","lookup,"],"Regarding your":["second","second"],"Regardless of":["if"],"Regardless, just":["getting"],"Regex altogether":["because"],"Regex by":["pattern"],"Regex can":["be"],"Regex comparisons":["in"],"Regex does":["not"],"Regex in":["`valid_number`"],"Regex is":["harmful?","more"],"Regex like":["I"],"Regex match":["in"],"Regex module":["(apparently)."],"Regex overcomplicates":["things"],"Regex pattern":["could"],"Regex should":["be"],"Regex support":["`\\w`,"],"Regex test":["upward."],"Regex that":["will"],"Regex#replace/4 is":["the"],"Regex#scan ```":["method"],"Regex#scan and":["using"],"Regex, but":["couldn't","it"],"Regex, since":["the"],"Regex. Have":["you"],"Regex. I":["could"],"Regex. I'll":["see"],"Regex. There":["is"],"Regex.match? or":["=~"],"Regex.match? when":["you're"],"Regex.match? you":["used"],"Regex.replace and":["pass"],"Regex.replace rather":["than"],"Regex.replace(%r/[^#{nucleotide}]/, sequence,":["'')"],"Regex.scan --":["it"],"Regex.scan and":["I","a"],"Regex.scan but":["I"],"Regex.scan from":["the"],"Regex.scan in":["favour"],"Regex.scan is":["a"],"Regex.scan phone_pattern,":["unformatted`"],"Regex.scan that":["I'm"],"Regex.scan to":["split"],"Regex.scan(%r/\\d/, dirty_number)":["|\u003e"],"Regex.scan(%r/\\w+/g, String.downcase(text)":[")"],"Regex.scan(%r/\\w+/g, string),":["do:"],"Regex.scan, so":["I"],"Regex.scan, to":["satisfy"],"Regex.scan, which":["seems"],"Regex.scan. Also":["it"],"Regex.scan/2. &(":[")"],"Regex.scan/2?\" can":["you"],"Regex](http://elixir-lang.org/docs/master/Regex.html) that":["might"],"Regexes (regexen?),":["there's"],"Regexes are":["in","cool"],"Regular Expression":["could"],"Regular Expressions":["by"],"Regular expressions":["are"],"Reimplemented using":["your"],"Remaining to":["do"],"Remember that":["strings"],"Remnants of":["an"],"Removes the":["need"],"Removing the":["`+`"],"Renamed blank?":["to"],"Renaming stuff.":["I"],"Replace `&gt;`":["with"],"Replace it":["with"],"Replace seems":["more"],"Responds to":["a"],"ResponseChecker.nothing?, once":["you've"],"Responsibility Principle":["and"],"Return a":["new"],"Reusable `clasify`":["method,"],"Reusing the":["Enum.reduce"],"Reviewing the":["code"],"Right now":["the"],"Right now,":["you're"],"Right on!":["I"],"Right you":["are."],"Right, but":["`\\d`"],"Roman values":["are"],"Ruby (au":["moins)"],"Ruby I":["never"],"Ruby and":["being","that's","I'm","didn't"],"Ruby but":["less","for"],"Ruby code":["in"],"Ruby code,":["so"],"Ruby convention":["of","so"],"Ruby does,":["and"],"Ruby implementation":["but"],"Ruby implementation,":["and"],"Ruby in":["that"],"Ruby influence":["and"],"Ruby influenced":["Elixir"],"Ruby on":["Rails."],"Ruby or":["other"],"Ruby projects,":["and"],"Ruby solution":["to"],"Ruby style-wise":["so"],"Ruby symbol-to-proc":["but"],"Ruby tests":["work."],"Ruby to":["use"],"Ruby usage":["is"],"Ruby version":["and","(not"],"Ruby versions":["of"],"Ruby versions,":["but"],"Ruby when":["it","it","it"],"Ruby you":["can"],"Ruby's ActiveSupport":["extension."],"Ruby's `send`,":["so"],"Ruby's instance":["variables"],"Ruby, I":["thought"],"Ruby, and":["in"],"Ruby, but":["I"],"Ruby, by":["contrast,"],"Ruby, multi-word":["methods"],"Ruby, the":["standard"],"Ruby, which":["is"],"Ruby-style to":["me."],"Ruby. Also":["empty"],"Ruby. Also,":["I've","predicate"],"Ruby. As":["for"],"Ruby. Here's":["a"],"Ruby. However,":["I"],"Ruby. I'd":["be"],"Ruby. It":["seems"],"Ruby/Elixir sintax":["is"],"Ruby/Elixir/Javascript switching":["is"],"Ruby: `x":["="],"Rubyisms into":["a"],"Run of":["the"],"Russian for":["\"get"],"Russian shouting":["test"],"Russian test":["are","and"],"Russian test?":["I","It"],"Russian was":["meant"],"Russian\" test?":["The"],"Russian. For":["example"],"Russian. You":["can"],"SHOUTING. Think":["of"],"Sadly, Elixir":["lacks"],"Sadly, the":["number"],"Same for":["sorting","`String.from_char_list`.","`map`"],"Same goes":["for"],"Same problem":["I"],"Say should":["be"],"Say the":["cost"],"Sc (Symbol,":["currency))."],"Scan converts":["it"],"Seattle, but":["I"],"Seattle? ;-)":["I'm"],"Second case":["is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is"],"Secondly, I":["wouldn't"],"Secondly, and":["I'm"],"Secondly, the":["name"],"Secondly, your":["loop_through"],"Section 6.7":["at"],"See [revision":["3](http://exercism.io/submissions/ee287179f64bf9f36e52b5fc)."],"See [this":["submission](http://exercism.io/submissions/24eefe8414acff22fea99fcf)"],"See comments":["there."],"See here:":["https://github.com/alco/elixir/wiki/Contribution-Guidelines#use-of-the-parenthesis-with-functions"],"See if":["```"],"See my":["latest","new"],"See next":["version.","version.","iteration."],"See the":["String","other","gen_server","Erlang"],"See, how":["beautiful"],"See: http://elixir-lang.org/getting_started/4.html":["for"],"Seeing deeply":["nested"],"Seems a":["little","shame"],"Seems like":["it","use","a","they"],"Seems that":["there"],"Seems to":["be"],"Semantically I":["think"],"Sent a":["PR"],"Sentence, Phrase,":["or"],"SentenceRecognizer into":["a"],"Seriously, nothing":["to"],"Seriously. Thanks":["once"],"Server with":["a"],"Shorthand for":["fn"],"Should \"DO":["it"],"Should I":["move","always"],"Should `hey`":["have"],"Should a":["string"],"Should add":["a"],"Should it":["be"],"Should probably":["redo"],"Should some":["of"],"Should the":["boolean","implementation"],"Should they":["be"],"Should those":["methods"],"Should your":["#n_bottles"],"Should've done":["it"],"Shouldn't `equal_pairs?`":["be"],"Sieve of":["Eratosthenes"],"Sigh, I":["need"],"Similar question":["for","for","for"],"Similar to":["the"],"Similarly line":["32"],"Simple problems":["should"],"Simplified it":["a"],"Simplified this":["to"],"Since I'm":["supposed","using"],"Since String.upcase":["on"],"Since `\\w`":["is"],"Since all":["of"],"Since message":["is"],"Since reduce":["is"],"Since the":["tests","test"],"Since there's":["no"],"Since this":["is"],"Since you":["extracted","are","want"],"Single Responsibility":["Principle"],"Single characters":["can"],"Sips and":["felt"],"Slight optimization:":["you"],"Sloppy, forgot":["to"],"Small nit:":["`forcefull`"],"So \"co-operative\"":["would"],"So I":["end","guess","thought","went","went","gather","piped","have","blame"],"So I'd":["go"],"So I'll":["trust"],"So `Enum.reduce(start..finish,":["...,"],"So `silence?`":["instead"],"So basically":["what"],"So far":["the","I"],"So far,":["google"],"So feel":["free"],"So following":["some"],"So for":["this","a","a","100"],"So if":["you"],"So in":["Elixir"],"So is":["there"],"So it":["doesn't","should"],"So maybe":["there's"],"So much":["better"],"So my":["exercise"],"So out":["they"],"So please":["nitpick"],"So rather":["than"],"So that":["you","is"],"So the":["first","\"|&gt;\"","first","time","first","time"],"So there's":["not"],"So think":["that"],"So this":["definition"],"So when":["I"],"So yeah,":["good"],"So yes":["if"],"So you":["need","implemented","don't","can"],"So, I":["submitted","submitted","updated","relented","reversed","felt"],"So, I'll":["shift"],"So, I'm":["submitting","wondering"],"So, `String.downcase`":["can"],"So, `shouting?`":["instead"],"So, addressing":["a"],"So, are":["you"],"So, do":["you"],"So, does":["your"],"So, in":["this"],"So, instead":["of"],"So, please,":["ignore"],"So, theoretically":["if"],"So, there's":["that."],"So, this":["needed","is"],"So, while":["they"],"So, why":["not"],"So, you":["would","eliminated"],"So... send":["it"],"Solve this":["one"],"Some Erlang":["for"],"Some constructive":["criticism"],"Some libraries":["use"],"Some modules":["are"],"Some of":["the","the","them"],"Some people":["like","try"],"Some specific":["nits:"],"Someone else":["suggested","(Katrina"],"Something doesn't":["feel"],"Something else":["I"],"Something feels":["odd"],"Something like":["Message.yelling?(message).","the","`fn"],"Something like:":["phrase,"],"Sometimes I":["think"],"Sometimes it":["feels","takes"],"Sometimes it's":["hard"],"Sometimes splitting":["up"],"Sometimes the":["ugly"],"Sometimes to":["help"],"Sometimes, I":["overthink"],"Sometimes/often when":["writing"],"Song to":["Anagram"],"Sorry ,":["ignore","is"],"Sorry about":["that."],"Sorry but":["I"],"Sorry for":["the","so","the","the"],"Sorry if":["you","I"],"Sorry to":["keep"],"Sorry you've":["been"],"Sorry, I":["think","should","don't","don't"],"Sorry, couldn't":["find"],"Sorry, don't":["get"],"Sorry, it":["was"],"Sorry, my":["mistake"],"Sorting and":["comparing"],"Sorting is":["likely"],"Sorting the":["list"],"Sounds good":["-"],"Sounds like":["I"],"Sounds right":["about"],"Specifically with":["`Enum`"],"SpeechAnalyzer one-liners":["and"],"Started Guide](http://elixir-lang.org/getting_started/1.html)":["if"],"Statement has":["become"],"Statement module,":["it"],"Statement.nothing?). I'm":["not"],"Statement` you":["can"],"Still digging":["into"],"Still exploring/learning":["the"],"Still have":["that"],"Still not":["a","happy"],"Still, I":["would"],"Still, at":["least"],"Stop making":["such"],"Straight forward,":["once"],"Stream module":["functions."],"Stream.chunk |\u003e":["Enum.map_join`"],"Stream.concat is":["great."],"Stream.map(&elem(&1, 0))":["|\u003e"],"Stream.unfold (I":["had"],"Stream.with_index makes":["much"],"Streams. Glad":["to"],"Strictly speaking,":["I","I"],"String and":["Kernel,"],"String binaries":["first"],"String built-in":["functions,"],"String class?":["For"],"String contains":["no","uppercase"],"String for":["checking","scan","stripping"],"String from":["String.length"],"String functions":["that","to","will"],"String functions\".":["I"],"String functions,":["but"],"String has":["a"],"String in":["Ruby","front"],"String instead.":["Duh."],"String is":["a"],"String module":["in.","is","might"],"String module](http://elixir-lang.org/docs/master/String.html)":["and"],"String or":["the"],"String that":["you"],"String type":["instead:"],"String with":["length"],"String you":["could"],"String your":["approach"],"String\" for":["the"],"String#graphmemes -":["I"],"String, [downcase:":["1]`,"],"String, as":["opposed"],"String. \u003cfacepalm":["/\u003e"],"String. You":["could"],"String. prefix":["to","to"],"String.Chars not":["implemented"],"String.Chars protocol's":["interaction"],"String.at(s, -1)":["=="],"String.codepoints could":["be"],"String.codepoints may":["be"],"String.codepoints word":["|&gt;","|&gt;"],"String.codepoints |&gt;":["Enum.sort"],"String.codepoints |\u003e":["Enum.sort`)"],"String.codepoints, but":["glad"],"String.downcase in":["as"],"String.downcase into":["one"],"String.downcase to":["the"],"String.downcase |&gt;":["String.split(&amp;1,"],"String.downcase |\u003e":["tokenize"],"String.downcase(&1)) |\u003e":["Enum.reject(fn"],"String.downcase(&1), letter":["})`","}`."],"String.downcase(anagram) |\u003e":["String.to_char_list!"],"String.downcase(input) !=":["input"],"String.downcase(s) !=":["s`"],"String.downcase(str) |\u003e":["tokenize"],"String.downcase(test_same) ==":["String.downcase(word)"],"String.downcase(w), 1,":["&(&1+1))"],"String.downcase(w), c":["})"],"String.downcase(word) |&gt;":["String.codepoints"],"String.downcase(word), 1,":["fn(x)"],"String.downcase(word)` that":["we"],"String.downcase(x) and":["x"],"String.downcase(x)`: String":["contains"],"String.empty? or":["something,"],"String.ends_with(\" \")":["but,"],"String.ends_with, so":["that'll"],"String.ends_with? \"?\"```.":["I"],"String.ends_with? as":["a"],"String.ends_with? instead":["of","of"],"String.ends_with?, I":["like"],"String.ends_with?, now":["you've"],"String.ends_with?/2 and":["String.upcase/1"],"String.ends_with?/2 for":["the"],"String.ends_with?/2, maybe":["I"],"String.ends_with?/2, otherwise":["this"],"String.ends_with?/2. Everything":["else"],"String.ends_with?/2. I":["also"],"String.first(...) and":["then"],"String.first(String.strip(content)) ==":["nil"],"String.first` can":["be"],"String.from_char_list!, since":["all"],"String.graphemes and":["Enum.sort"],"String.graphemes instead":["of"],"String.graphemes |\u003e":["Enum.reverse"],"String.graphemes. I'm":["not"],"String.last and":["a"],"String.last([phrase) ==":["\"?\""],"String.last(message) ==":["nil"],"String.last(prompt) ==":["\"?\""],"String.last(s) ==":["\"?\""],"String.last, String.upcase,":["String.length)?"],"String.length ==":["0`.","0`.","0`"],"String.length by":["a"],"String.length(String.strip(message)) ==":["0","0"],"String.length(input) ==":["0"],"String.length(message) \u003c":["1"],"String.length(text) ==":["0)"],"String.length(word) ==":["0"],"String.length) ==":["0`","0`."],"String.match? would":["be"],"String.replace arguments":["are"],"String.replace at":["all?"],"String.replace because":["the"],"String.reverse` (very":["contrived,"],"String.reverse`. The":["former"],"String.scan to":["get"],"String.slice that":["takes"],"String.slice(number, 3,":["3),"],"String.slice(number, 6,":["4)]`"],"String.split makes":["it"],"String.split to":["make"],"String.split without":["String.replace"],"String.split(&amp;1, %r{[^a-zA-Z0-9]+})":["|&gt;"],"String.split(&amp;1, sigil_r(&gt;,":["[]))"],"String.split/1 and":["also"],"String.starts_with(\" \")":["&&"],"String.strip for":["is_blank?"],"String.strip when":["I"],"String.strip |\u003e":["String.length)"],"String.strip() function":["for"],"String.strip(...) to":["\"\"?"],"String.strip(input) ==":["\"\"","\"\""],"String.strip(input)`. It":["tells"],"String.strip(instruction) ==":["\"\""],"String.strip(message) ==":["\"\""],"String.strip(phrase) ```":["which"],"String.strip) ==":["\"\""],"String.strip. I":["personally"],"String.strip/1 barf.":["I"],"String.stripped response_for,":["you"],"String.to_char_list and":["sorting"],"String.to_char_list has":["a"],"String.to_char_list! is":["exactly"],"String.to_char_list! |\u003e":["Enum.sort"],"String.to_char_list!`. In":["both"],"String.to_char_list(...)` can":["be"],"String.to_char_list/1 (Double-quoted":["strings"],"String.upcase could":["simplify"],"String.upcase on":["a"],"String.upcase to":["simplify"],"String.upcase word)`.":["Let"],"String.upcase word`":["and"],"String.upcase word`)":["is"],"String.upcase(alphabetize(input))` and":["not"],"String.upcase(input) ==":["input)","input","input"],"String.upcase(message) ==":["message"],"String.upcase(message)``` looks":["easier"],"String.upcase(phrase) ==":["phrase"],"String.upcase(speech)) in":["to"],"String.upcase(text)` into":["a"],"String.upcase(x)` alone":["fails"],"String.upcase(x)`: String":["contains"],"String.upcase(x)`? That":["line"],"String? You":["either"],"StringType to":["something"],"String` but":["only"],"String`) and":["`Kernel.length`"],"Strings are":["UTF-8"],"Strings. _codepoint":["is"],"Style feedback":["also"],"Stylistic minor":["nit...does"],"Stylistically I":["think"],"Stylistically the":["common"],"Stylistically: I'd":["write"],"Submitted in":["error","error","error"],"Submitted new":["revision"],"Submitted this":["even"],"Submitting a":["new","new","new"],"Submitting one":["more"],"Subsequently I've":["discovered"],"Such an":["input"],"Suggestions on":["what"],"Suite link":["on"],"Super easy":["to"],"Super picky,":["but"],"Super-picky, but":["IMO,"],"Supervisor as":["well?","well."],"Supervisor in":["this"],"Sure, I":["could"],"Sure, each":["of"],"Sure, keep":["me"],"Sure, this":["works."],"Sure. I":["just"],"Surely I":["can","could"],"Svyatov, this":["is"],"Sweet! I":["would"],"Sweet. Submitting":["a"],"Switched to":["\"reduce\"."],"TCO and":["Elixir"],"THAT much":["yet...)"],"THE %^*@#$(*^":["ZOMBIES"],"THEN we":["check"],"Ta, looks":["like"],"Tail recursion":["is","means","means","means","means","means"],"Tail recursion,":["no","no","no","no","no"],"Tail recursive":["functions"],"Take \u003ccode\u003eupcase\u003c/code\u003e":["--"],"Take a":["look","look?","look","look","look","look","look","look","nap","look","look","look","look","look","look","look","look"],"Take one":["down"],"Takes a":["while"],"Taking off":["the"],"Tan's Elixir":["for"],"Teenager (rather":["than"],"Teenager Heard":["yelling,"],"Teenager is":["yelling"],"Teenager module":["or","itself,"],"Teenager properties?":["Maybe","Maybe"],"Teenager public":["interface?"],"Teenager responding":["with"],"Teenager that":["the"],"Teenager#silence? in":["#scream?"],"Teenager, they":["describe"],"Teenager, yelling,":["shouting,"],"Teenager. Categorising":["phrases"],"Teenager.hey \"Am":["I"],"Teenager.hey(\" \")":["==","=="],"Teenager.hey(\"1, 2,":["3\")"],"Teenager.hey(\"A typical":["statement\")"],"Teenager.hey(\"УХОДИТЬ\") ==":["\"Woah,","\"Woah,"],"Teenager.hey(nil) ==":["\"Fine."],"Test Suite":["link"],"Tests are":["breaking"],"Tests for":["non-ASCII"],"Thank you":["for","for","for","for","for","for","for","for","for",":)","so","about","to","@sven!","so","@janessa,","all,","very","for","again","for","for"],"Thank you!":[":)"],"Thank you,":["both"],"Thank you.":["I","ends_with?"],"Thank-you for":["your"],"Thanks -":["wasn't","I","I'd"],"Thanks @cade":["for"],"Thanks @erna.":["I"],"Thanks @haley,":["updated"],"Thanks @isabelle":["for"],"Thanks @linwood!":["Didn't"],"Thanks @margie,":["I"],"Thanks @melody":[","],"Thanks @providenci":["and"],"Thanks @ryleigh":["for"],"Thanks again":["for","for","for","for","for","for","for","for","for","for","for"],"Thanks also":["to"],"Thanks as":["always!","always","always","always,"],"Thanks for":["being","the","sharing","your","your","the","the","spotting","the","the","the","the","going","the","really","the","the","pointing","the","the","the","the","the","your","investigating.","pointing","pointing","the","the","the","the","feedback.","letting","the","bringing","the","your","the","the","the","the","the","the","the","the","the","the","the","following","your","the","comment.","the","the","the","following","the","the","the","the","letting","the","the","the","the","the","the","the","the","looking","the","your","taking","the","comments","the","the","the","the","pointing","the","your","the","this.","the","the","the","the","the","the","that","the","throwing","the","the","the","the","the","the","the","the","the","the","all","the","the","the","comments","the","the","the","you","your","the","the","finding","the","those.","the","the","the","pointing","straightening","the","the","the","the","the","the","detailed","the","the","the","that!","the","the","your","the","the","the","the","the","the","the","the","the","the","the","the","the","the","submitting","helping","your","the","the","the","all"],"Thanks guys!":["Will"],"Thanks guys.":["Well,"],"Thanks in":["advance","advance!"],"Thanks once":["again."],"Thanks pminten":["for"],"Thanks pminten.":["I"],"Thanks redmar!":["It"],"Thanks redmar,":["I"],"Thanks so":["much","much!","much"],"Thanks to":["[jeremy-w](http://exercism.io/jeremy-w)","@kayleigh,","@joy","some","some"],"Thanks very":["much.","much"],"Thanks! :":[")"],"Thanks! I":["realized","think"],"Thanks! I've":["implemented"],"Thanks! It's":["should"],"Thanks! My":["first"],"Thanks! That":["makes"],"Thanks! That's":["tremendously"],"Thanks! What":["happens"],"Thanks! cc/":["@hillard"],"Thanks! that":["one"],"Thanks, @jayda.":["I"],"Thanks, @kaylah.":["I'll"],"Thanks, @larissa.":["I"],"Thanks, @lavinia!":["I"],"Thanks, @marcelle!":["Yeah,"],"Thanks, @peter!":["I've"],"Thanks, @treva.":["I"],"Thanks, I":["just","hadn't","added","had"],"Thanks, I'll":["work"],"Thanks, I'm":["new"],"Thanks, I've":["made"],"Thanks, again,":["learning"],"Thanks, already":["did"],"Thanks, and":["thanks","no,"],"Thanks, comes":["from"],"Thanks, fixed":["the"],"Thanks, got":["it!"],"Thanks, great":["hints!"],"Thanks, just":["realised","updated"],"Thanks, knew":["that"],"Thanks, once":["more,"],"Thanks, pminten,":["String.to_char_list!"],"Thanks, that":["would"],"Thanks, that's":["useful."],"Thanks. :)":["I'm"],"Thanks. But":["it"],"Thanks. Good":["to"],"Thanks. I":["think","didn't","cant","like","submitted"],"Thanks. I'll":["be"],"Thanks. I'm":["glad"],"Thanks. I've":["send"],"Thanks. That":["List.flatten"],"Thanks. Yeah,":["I"],"Thanksgiving holiday":["later"],"That Dict.merge":["is"],"That I":["understand."],"That List.flatten":["did"],"That README":["comment"],"That Range":["in"],"That `%r/[a-z|A-Z]/`":["seems"],"That `Dict.merge`":["looks"],"That `Enum.take`":["always"],"That `zip`":["cares"],"That and":["Enum.reduce"],"That approach":["works"],"That being":["said,","said,"],"That can":["help"],"That can't":["happen"],"That combination":["of"],"That comes":["from"],"That conveys":["nicely"],"That could":["make"],"That docstring":["is"],"That does":["seem","look","make"],"That doesn't":["make","seem","work"],"That eliminates":["the"],"That explains":["the"],"That feels":["weird"],"That frees":["up"],"That has":["less"],"That is":["great","great!","a","clearer.","exactly","usually","succinct!","concerning.","a","a"],"That is,":["I"],"That just":["looks"],"That kind":["of"],"That line":["is"],"That looks":["very","very"],"That make":["sense.","sense."],"That makes":["a","sense.","sense.","sense."],"That may":["not"],"That means":["it","that","that"],"That mess":["of"],"That might":["be","be","make","work","just","just","result"],"That only":["works","took"],"That opens":["up"],"That pipeline":["on"],"That probably":["means"],"That really":["messes"],"That reduces":["the"],"That regex":["fails"],"That said":["I"],"That said,":["you'd","I","do","it's"],"That said...":["there"],"That seems":["more","a"],"That should":["work."],"That shoves":["away"],"That sounds":["like"],"That tightened":["it"],"That tightens":["things"],"That was":["an","my","driving","very"],"That way":["you'll","it'll","if","you","it's","I","you","you","less","if"],"That will":["teach"],"That won't":["be"],"That works":["because"],"That would":["definitely","be","require","improve","put","help"],"That'd certainly":["be"],"That's a":["great","good","nice","really","great","lot","good","good","matter","more","cool","good","common"],"That's actually":["my"],"That's all":["very"],"That's already":["much","better"],"That's also":["why"],"That's an":["interesting"],"That's better.":["At"],"That's completely":["normal,"],"That's cool":["that","that","if"],"That's definitely":["the"],"That's fine":["too,"],"That's good":["to","to"],"That's good,":["but"],"That's great":["for"],"That's how":["Elixir","we"],"That's interesting":["about"],"That's just":["a","the"],"That's more":["concise."],"That's mostly":["used"],"That's much":["nicer.","better."],"That's neat":["and"],"That's not":["unusual","exactly","a"],"That's often":["a"],"That's one":["of"],"That's pretty":["tight!","neat.","cool.","powerful..."],"That's probably":["YAGNI,","a","less"],"That's sort":["of"],"That's the":["last","next","core"],"That's tremendously":["useful"],"That's very":["good,"],"That's weird,":["being"],"That's what":["I","I","I","that","exercism","I","we're"],"That's where":["the","pattern"],"That's why":["recursive","it"],"That’s the":["first"],"The \"?\"":["methods"],"The 'summerize'":["method"],"The \u003ccode\u003edef":["sing(start_verse,"],"The @elyssa":["condition"],"The DNA":["module"],"The Dict.update":["method"],"The Elixir":["convention","exercises","docs","system","track"],"The Erlang":["compiler","compiler"],"The HashDict":["construction"],"The L12":["change"],"The OTP":["version"],"The README":["says"],"The Unicode":["`Regex.match`"],"The [`Enum`](http://elixir-lang.org/docs/stable/Enum.html)":["module"],"The `&(&1":["+"],"The `&1":["-"],"The `&`":["lambda"],"The `(&1":["=="],"The `:lists.sort`":["thing"],"The `@mallory":["100`"],"The `Anagram`":["module"],"The `Dict.merge`":["method"],"The `Dict`":["change"],"The `Inspect`":["instance"],"The `Kernel.inspect`":["thing"],"The `List.last`":["part"],"The `Regex.scan`":["approach"],"The `concat`":["test"],"The `cond`":["statement","with"],"The `count`":["function"],"The `defp":["method(args),"],"The `do_`":["convention"],"The `do_foo`":["form"],"The `from_tree`":["function"],"The `hey`":["function"],"The `initial_counts`":["function"],"The `is_`":["prefix"],"The `is_shouting?`":["is"],"The `is_silence?`":["function"],"The `not_letters_or_yelling`":["regex"],"The `pling`,":["`plang`"],"The `question?`":["function"],"The `rearranages_into?/2`":["function"],"The `total`":["can"],"The actual":["sequence"],"The append":["implementation"],"The awkward":["part"],"The barewords":["approach"],"The benefit":["of"],"The best":["you"],"The big":["graph"],"The biggest":["trade-off"],"The caret":["(`^`)"],"The case":["you"],"The casual":["reader"],"The character_set":["maneuver"],"The choice":["of"],"The classic":["one"],"The client":["can"],"The code":["is","looks","looks","is","feels","becomes","is"],"The comment":["starting"],"The comments":["in"],"The common":["way"],"The conditional":["in"],"The cons":["(`[|]`)"],"The cons,":["though:"],"The construction":["`(acc[x]"],"The current":["tests","`anagram?`","test","ones"],"The default":["case"],"The difference":["is","in","is","I"],"The docs":["don't"],"The domain":["is"],"The downside":["is","of","of"],"The elixir":["community"],"The entire":["phrase-to-words"],"The erlang":["documentation"],"The everything":["through"],"The exercise":["would"],"The extra":["`count_word`","newline"],"The fact":["that","that","that","that"],"The fancy":["way"],"The final":["test"],"The first":["version","quiet?/1","check","version","thing","thing"],"The foldl":["is"],"The former":["method,","gets"],"The from_tree":["function"],"The fun":["arg"],"The function":["updating","name","name","`not_same?/2`","`chars/1`"],"The function/f":["and"],"The general":["structure"],"The goal":["is"],"The good":["news"],"The guards":["are"],"The hardest":["part"],"The heart":["of"],"The helper":["function"],"The hey":["method"],"The idea":["was","is","of","about","is","is","is","of","was"],"The if":["statement"],"The if-statement":["is"],"The includes_letters?":["function"],"The indentation":["style"],"The intent":["is","with"],"The intention":["here"],"The inter-dependency":["really"],"The issue":["with","with"],"The language":["I"],"The latest":["stable"],"The linebreak":["on"],"The lines":["are"],"The main":["problem","thing","focus","things","advantage"],"The major":["sticky"],"The markdown":["didn't"],"The math":["in"],"The method":["`_question?(text)`"],"The modularity":["would"],"The module":["reads","is"],"The more":["I","I"],"The most":["challenging","difficult"],"The name":["of"],"The named":["methods"],"The nested":["`Counter`","conditionals"],"The nesting":["is"],"The new":["submission"],"The newer":["versions"],"The next":["release"],"The normal":["syntax"],"The obvious":["way","exception"],"The offending":["test"],"The old":["count"],"The omission":["of"],"The one":["thing","argument"],"The one-liner":["is","is"],"The only":["thing","thing","duplication","time","difference","thing","tiny-tiny","other","place","other","other","other","improvement","other","way","languages","other","thing","thing","reason","nit","hint","thing","other","thing","thing"],"The other":["regexes"],"The outer":["parens"],"The parenless":["stuff"],"The parens":["are","are"],"The parentheses":["around","are"],"The pattern":["matching"],"The pipe":["on","operator"],"The pipe-rocket":["syntax"],"The pipeline":["operator","operator","operator","operator"],"The point":["of","of"],"The points":["you've"],"The predicates":["could"],"The previous":["nit"],"The problem":["with","with","seemed","should","should"],"The pull":["request"],"The purpose":["of"],"The reason":["to","I'm","`&(&1","I'm","for","that"],"The record":["is"],"The reduce":["step"],"The regex":["is","I","is","could"],"The reject":["+"],"The required":["reverse","reverse"],"The result":["is","of"],"The resulting":["function"],"The reuse":["of"],"The reverse":["may","may"],"The reversed":["input"],"The right":["fold","fold"],"The rubyist":["in"],"The rule":["is"],"The runtime":["has","wants"],"The russian":["language"],"The same":["applies","issue","word"],"The shorthand":["for","comes"],"The smaller":["an"],"The sorting":["could"],"The string":["interpolation","manipulation"],"The test":["was","passes","suite","in"],"The tests":["would","are","are","expect","never","often"],"The thing":["here"],"The three":["functions"],"The time":["`++`","needed"],"The total":["cost"],"The tradeoff":["is"],"The trailing":["\"\\n\""],"The trick":["here"],"The two":["commented"],"The type":["system"],"The unicode":["database"],"The update":["method","to"],"The use":["of"],"The verse":["only"],"The virtue":["of"],"The way":["I","I","I","you","you're","you've","you've","you","`Dict`"],"The wrapper":["to"],"The zipper":["exercise"],"Then I":["\"resolve\""],"Then it":["would"],"Then use":["pattern"],"Then you":["don't","can","can","can"],"Then, happily":["I"],"Then, if":["you"],"There are":["just","two","no","just","a","several","just","a","a","some"],"There aren't":["right"],"There could":["be,"],"There exists":["a"],"There is":["a","a","a","a","a","a","no","code","nothing","a","a","also","also","a","**literal**ly","a","a","a","an","probably","probably","a","a","no","a","one","a","a","a","one","a","nothing","a","a","a","an","one","a","a","a","a"],"There isn't":["so","much"],"There might":["be"],"There was":["a"],"There were":["2"],"There will":["be"],"There's a":["very","clear","tradeoff","default","`count/2`","lot","patch","`:math.pow()`","trick","tradeoff","neverending","slight","bit","somewhat"],"There's also":["a","a","`Regex.run`"],"There's always":["Enum.sort...","the"],"There's an":["opportunity","example","ambiguity."],"There's currently":["some"],"There's just":["something"],"There's no":["unwritten","i18n","way","harm","guessing","reason","way","need","way"],"There's not":["a"],"There's nothing":["terribly","wrong","wrong","wrong"],"There's one":["more"],"There's only":["a"],"There's probably":["a"],"There's really":["not"],"There's simply":["so"],"Therefore I":["chose"],"Therefore, if":["you"],"These are":["all","not","more"],"These functions":["doesn´t"],"These way":["you"],"They are":["similar","just","called","only"],"They call":["these"],"They do":["the"],"They don't":["look"],"They feel":["like"],"They make":["the"],"They said":["we"],"They should":["give"],"They were":["accidental"],"They work":["because"],"They're all":["defined"],"They're different.":["I'm"],"They're not":["being","properties","UTF-8"],"Thing is,":["it's"],"Things do":["get"],"Things like":["`?A`"],"Think I":["should"],"Think about":["it","the","how"],"Think it's":["golden."],"Think of":["mutating","it","`Dict`"],"Thinking about":["how"],"This actually":["fails"],"This also":["lets"],"This answers":["my"],"This brings":["up"],"This code":["uses","looks","won't"],"This confuses":["at"],"This could":["be","be","be"],"This doesn't":["work...","satisfy"],"This else/if":["isn't"],"This ends":["up"],"This exercise":["is","seemed","is","contains","contains","contains","contains","contains"],"This feels":["like","a","the"],"This first":["iteration"],"This has":["been","actually","the"],"This implementation":["leans","uses","of"],"This in":["turn"],"This is":["super","already","great!","awesome!","very","better!","my","a","a","great!","getting","a","succinct,","very","my","looking","very","a","a","a","super-nitpicky,","really","great,","really","a","a","preferred","just","the","nice","very","very","probably","the","where","my","very","probably","very","a","also","a","my","the","interesting","My","the","obviously","practically","certainly","the","my","a","the","slowly","my","definitely","NOT","most","the","by","just","a","a","not","as","the","not","as","a","a","indeed","actually","nowhere","really","the","a","an","a","something","why","somewhat","something","a","effectively","a","my","a","used","the","the","my","an","what","the","really"],"This isn't":["in","really"],"This just":["seems","uses"],"This kind":["of","of"],"This lets":["the"],"This looked":["kind"],"This looks":["good","a","pretty","very","nice!","nearly","good!","pretty","really","good!","pretty","awesome!","good.","good.","really","great!","good","way","good.","good!","really","quite","good.","good!","overgeneralized","much","good.","pretty","pretty","good,"],"This makes":["it","code"],"This may":["just"],"This might":["improve"],"This most":["often"],"This normalization":["doesn't"],"This one":["is","took"],"This one's":["done,"],"This passes":["the"],"This pipe":["convention"],"This problem":["seems"],"This reads":["much"],"This really":["only"],"This regex":["is"],"This second":["submission"],"This seemed":["to"],"This seems":["like","like"],"This shortens":["up"],"This should":["work"],"This solution":["is","does"],"This still":["looks"],"This style":["guide","is"],"This takes":["a"],"This time":["I","I","I","each"],"This uses":["a"],"This version":["allows","flattens","uses"],"This was":["by","an","an","my","definitely","fine","more"],"This wasn't":["specified"],"This will":["make","still","unfortunately","be"],"This works":["around","but"],"This works,":["though"],"This would":["be","be","be","also","let"],"Thnx for":["`cond`!"],"Thomas from":["Programming"],"Thomas' book":["taught"],"Thomas's book,":["[Programming"],"Those functions":["can"],"Those names":["are"],"Those one":["letter"],"Those were":["actually"],"Though I":["suppose"],"Though the":["compactness","results"],"Though, hmm,":["part"],"Though, it's":["more"],"Thought about":["it"],"Thoughts about":["this"],"Thoughts might":["be"],"Threw me":["off"],"Time for":["an"],"Tip: Erlang":["has"],"Tip: \\p":["construct"],"To avoid":["generating"],"To be":["honest,","honest","honest,","honest","honest"],"To check":["if"],"To get":["the","the"],"To make":["a","them","functions"],"To match":["a"],"To me":["the","it"],"To me,":["the"],"To my":["Haskell-warped"],"To reduce":["the"],"To select":["sequences"],"To use":["it"],"To your":["last"],"Today I":["learned"],"Together, this":["means"],"Took @keegan's":["suggestion"],"Took me":["a","a"],"Took way":["too"],"Took your":["advice"],"Totally forgot":["to"],"Translate) isn't":["recognized"],"Tried suggesting":["this"],"Tried this":["out."],"Tried to":["strike","arrange"],"True enough,":["though"],"True or":["false?\""],"True, I":["think"],"True, but":["you"],"Try looking":["in"],"Try running":["this"],"Try some":["`defp`."],"Try to":["use","make","rename","use","remove","use"],"Try using":["`List.zip/1`","`List.zip/1`","a","`List.zip/1`","case","a"],"Trying out":["importing","combining"],"Trying the":["exercise"],"Trying to":["update...","minimize","get"],"Turns into":["this:"],"Two of":["them","your"],"Two tiny":["nits:"],"Types' on":["http://www.erlang.org/doc/man/re.html"],"Typically helper":["functions"],"Typically predicate":["methods"],"Typically the":["helper"],"Typically this":["variable"],"US Thanksgiving":["holiday"],"UTF-8 aware":["is"],"UTF-8 aware,":["which"],"UTF-8 encoded":["and","binaries,"],"UTF-8 safe":["syntax"],"UTF-8 works,":["but"],"UTF-8. For":["converting"],"UTF-8. The":["fact"],"UTF8 binaries.":["There"],"UTF8 letters":["on"],"UTF8 to":["solve"],"Ugh, I":["don't"],"Ugh, another":["metaprogramming"],"Ugh, bad":["typo."],"Ugh... I":["got"],"Ugh... this":["is"],"Um, i":["had"],"Underscores are":["considered"],"Unfortunately doing":["that"],"Unfortunately having":["that"],"Unfortunately it":["still"],"Unfortunately most":["Elixir"],"Unfortunately not,":["guards"],"Unfortunately, the":["test"],"Unicode `Regex.match`":["is"],"Unicode categories":["using"],"Unicode character":["classes"],"Unicode general":["category","category"],"Unicode in":["regular"],"Unicode letter,":["`\\p{Lu}`"],"Unicode option":["(/u)"],"Unicode upcase":["--"],"Unicode uppercase":["letter."],"Unicode whitespace":["occurrence"],"Unicode. I've":["been"],"Unless I'm":["mistaken,"],"Unless of":["course"],"Unsupported expression":["in"],"Up to":["you"],"Upcasing characters":["other"],"Updated as":["per"],"Updated based":["on"],"Updated here":["http://exercism.io/submissions/51ffc59da8f8e4c299000141"],"Updated in":["latest"],"Updated the":["code.","code","solution"],"Updated to":["use"],"Use a":["\u003ccode\u003efold\u003c/code\u003e"],"Use of":["&1"],"Use small":["words."],"Using &amp;1":["could"],"Using Phrase":["instead"],"Using `Dict.update`":["makes"],"Using `Inspect.Algebra`":["should"],"Using `Stream.with_index`":["with"],"Using `collection`":["as"],"Using `count`":["for"],"Using `do...end`":["for"],"Using `end":["|\u003e"],"Using `if`":["`else`"],"Using `reduce`":["was"],"Using `zip`":["made"],"Using a":["separate","regex","library","list"],"Using guards.":["Much"],"Using mock":["modules"],"Using multiple":["named"],"Using my":["word"],"Using pattern":["matching"],"Using string":["interpolation"],"Using tail":["recursion","recursion","recursion","recursion","recursion"],"Using the":["shorthand","same"],"Usually a":["good"],"Usually because":["they're"],"Usually the":["reverse"],"Usually we":["just"],"Usually when":["naming"],"VIM and":["give"],"VM are":["optimized"],"VM call.":["Either"],"VM can":["do"],"VM, you're":["supposed"],"VM. I":["believe"],"VM. Iolists":["are"],"VM. There's":["only"],"Valim he":["puts"],"Valim is":["suspicious"],"Valim used":["multiple"],"Valim uses":["this"],"Valim, the":["author"],"Variables and":["method"],"Verse 2":["is"],"Very boring,":["I"],"Very clean":["I"],"Very clean.":["Interesting","In"],"Very concise!":["A"],"Very creative.":[":)"],"Very good":["suggestion.","points,"],"Very interesting":["approach."],"Very interesting.":["I"],"Very minor":["nitpick:","point"],"Very minor,":["you"],"Very minor:":["typical"],"Very nice":["--","and","and","work","and"],"Very nice!":["I","I","I'm","The"],"Very nice.":["Would","Have","The","It","I've","The"],"Very rough":["attempt."],"Very simple":["and"],"Very simplified":["based"],"Very sorry":["about"],"Very verbose,":["this"],"WHO EVEN":["ARE"],"WIll update":["later"],"Waiting for":["it","your","some"],"Wanting to":["implement"],"Warning: this":["is"],"Was able":["to"],"Was the":["`IO.puts"],"Was there":["a","a"],"Was thinking":["'forceful'"],"Was this":["intentional?"],"Wasn't sure":["about"],"We can":["see"],"We could":["also"],"We just":["make"],"We're almost":["there"],"Welcome to":["the","the","the"],"Well ,":["a"],"Well Done":["@michelle!!"],"Well I":["can","can"],"Well I'm":["definitely"],"Well I've":["found"],"Well \\w":["is"],"Well `&append/2`":["isn't"],"Well done":["on"],"Well done!":["Why"],"Well done.":["I"],"Well for":["one"],"Well how":["I"],"Well instead":["of"],"Well it":["seems"],"Well on":["your"],"Well readability":["wise"],"Well thanks!":["I'm"],"Well that's":["solvable"],"Well the":["community","idea"],"Well this":["is"],"Well you":["could"],"Well, I":["got","still","submitted"],"Well, here's":["a"],"Well, let":["me"],"Well, looking":["more"],"Well, maybe":["you"],"Well, now":["I"],"Well, that's":["not"],"Well, the":["texts"],"Well, there's":["no"],"Well, you":["don't"],"Well, you're":["already"],"Well... it":["works."],"Went for":["a"],"Went through":["the"],"Were you":["planning"],"What I":["really","don't","wanted","was","meant","notice","would","could"],"What I'm":["kind"],"What a":["pitty"],"What about":["readability?","extracting","having","doing","something","`Regex#replace`?"],"What am":["I"],"What an":["exercise"],"What are":["we","your","`\u003c\u003c\u003e\u003e`,","you"],"What benefit":["does","do","do"],"What did":["you"],"What do":["you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you"],"What does":["the","this","a","the"],"What goes":["wrong"],"What happens":["next?","when","with","for","with","with","when","if"],"What if":["you","I","you","nil","the","you","I","you"],"What is":["the","\"idiomatic\"","it","commonly","the","the"],"What it":["transforms"],"What matters":["is"],"What other":["similar"],"What teenager":["receives"],"What the":["point"],"What version":["of","of"],"What was":["the","the"],"What would":["you","you","you","you","you","you","happen","I","you","you","you"],"What you":["have","have","have","describe","could"],"What's pretty":["depends"],"What's the":["point","point","idea"],"What's up":["with"],"What’s the":["practice?"],"When I":["do","run","was","learnt","tried","did","had","solved","started","try"],"When originally":["ported"],"When the":["time"],"When trying":["to"],"When using":["`import`"],"When you":["read","asked","build"],"Where `count`":["is"],"Where do":["you","you"],"Whereas \"the":["number"],"Whether it":["benefits"],"Whether something":["is"],"Which alternative":["to"],"Which leads":["to"],"Which seems":["a"],"Which you":["use"],"Which, in":["retrospect,"],"While I":["suppose","admire","really"],"While certainly":["allowed"],"While do":["not"],"While it":["is"],"While looking":["through"],"While regexes":["are"],"While stumbling":["through"],"While the":["is_shouting","case"],"While there":["might"],"While this":["version"],"While we":["are"],"While we're":["on"],"While you":["have","would"],"While you're":["suggesting"],"While your":["code","submission"],"Whitespace fixed,":["thanks!"],"Why \u003ccode\u003eString.split/1\u003c/code\u003e":["and"],"Why `(String.strip":["x)`"],"Why `(filter":["&mutation?/1)`"],"Why `:lists.seq`":["and"],"Why `:lists.sort`":["and"],"Why `binary_to_list`":["and"],"Why are":["the","you","you"],"Why count":["ALL"],"Why define":["custom"],"Why did":["you","you","I"],"Why do":["you","you","you","you","you","you","you","you","you","you","you","you","you","you"],"Why doesn't":["that","it"],"Why don't":["you","use"],"Why in":["`sort`"],"Why is":["it"],"Why iterate":["when"],"Why not":["remove","just","just","use","just","downcase","`Enum.count`?","just","compare","`\"\"","give"],"Why parens":["may"],"Why reimplement":["`reduce`"],"Why run":["`number`"],"Why the":["separate","`Enum.sort"],"Why two":["different"],"Why use":["a","`Enum.join`"],"Why would":["you","that"],"Why? In":["general"],"Will be":["working"],"Will change":["that."],"Will check":["on"],"Will do":["so"],"Will do,":["thanks!"],"Will fix":["the","all"],"Will get":["to"],"Will re-submit":["with"],"Will revert":["and"],"Will rewrite":["with"],"Will search":["for."],"Will that":["make"],"Will use":["`Enum`"],"Will using":["methods"],"With `acc`":["being"],"With pattern":["matching"],"With pminten's":["help"],"With regard":["to","to","to"],"With regards":["to","to"],"With that":["in"],"With the":["current","(very)"],"Within Enum.reduce,":["the"],"Within `words":["=`,"],"Within your":["`reduce`,"],"Without parentheses":["you"],"Without putting":["more"],"Without reading":["the"],"Without seeing":["the"],"Without the":["guard,","need"],"Woohoo, I":["made"],"WordsTest.\"test normalize":["case\"/1","case\"/1"],"Works but":["seems"],"Works for":["subcategories"],"Would `String.codepoints`":["be"],"Would a":["simple"],"Would another":["variable"],"Would be":["great"],"Would declaring":["test"],"Would it":["be","be","make","be","be","make","clarify","be","make","be","be","be","make","be","be","be","be","be","be","be"],"Would judicious":["use"],"Would love":["recommendations","to"],"Would really":["appreciate","appreciate"],"Would that":["hypothetical"],"Would you":["mind","agree","consider","mind","please","agree","be","like","consider","be"],"Wouldn't `Stream.with_index":["|\u003e"],"Wouldn't `if`":["be"],"Wouldn't declaring":["test"],"Wouldn't it":["be","be","be","be","be","be"],"Wouldn't let":["me"],"Wouldn't the":["nucleotides"],"Wow, thank":["you."],"Wow, that's":["a"],"Wow, very":["cool"],"Wow. @cecile":["thank"],"Wow. Really":["interesting"],"Wow. This":["is"],"Wrapping my":["brain"],"Writing some":["simple"],"X?\" can":["be"],"YAGNI, I'll":["refactor"],"YARD for":["Ruby"],"YOu\" would":["be"],"Yea I":["think"],"Yea but":["`Teenager.hey(nil)`"],"Yea, I":["think"],"Yeah -":["I"],"Yeah absolutely.":["Thanks"],"Yeah it":["is"],"Yeah that":["makes"],"Yeah! Something":["like"],"Yeah, I":["agree.","started","should","noticed","trying","was","was","just","didn't","can","saw","wasn't","suppose.","should","honestly","like"],"Yeah, I'd":["left"],"Yeah, I'm":["not"],"Yeah, I've":["just"],"Yeah, `music`":["or"],"Yeah, defensive":["programming"],"Yeah, exactly.":["You"],"Yeah, except":["for"],"Yeah, if":["you"],"Yeah, just":["reversing"],"Yeah, me":["too."],"Yeah, much":["better,"],"Yeah, not":["a"],"Yeah, one":["thing"],"Yeah, passing":["2"],"Yeah, since":["we"],"Yeah, that":["eliminates","is"],"Yeah, that's":["probably"],"Yeah, the":["formatting","docs","syntax","idea"],"Yeah, there":["are","seem"],"Yeah, this":["passed"],"Yeah, very":["interesting"],"Yeah... I":["thought"],"Yep ,":["It"],"Yep, I":["missed","also","did","was"],"Yep, that's":["right.","exactly","what"],"Yep, typo.":["Never"],"Yes ,":["it"],"Yes -":["all"],"Yes all":["of"],"Yes indeed,":["it"],"Yes it":["would","works"],"Yes or":["no?"],"Yes you":["could"],"Yes you're":["right"],"Yes, I":["think","thought","think","think","can","mean","saw"],"Yes, a":["scan"],"Yes, any":["time"],"Yes, explicit":["module"],"Yes, good":["start"],"Yes, guilty":["but"],"Yes, it":["works","does"],"Yes, my":["doubt"],"Yes, pipeline":["feeds"],"Yes, readability":["is"],"Yes, that":["does"],"Yes, that's":["a"],"Yes, you're":["right"],"Yikes. That's":["good"],"Yo could":["normalize"],"You Some":["Erlang"],"You actually":["only","only"],"You add":["space"],"You all":["are"],"You also":["will"],"You are":["right.","right","right","right.","right","totally","right.","almost","already","asserting","very","right","totally","right,","right","correct.","correct"],"You avoided":["the"],"You can":["simplify","avoid","add","use","default","make","simplify","leave","see","use","also","use","use","literally","simplify","use","still","use","shorten","clean","also","use","use","use","use","drop","check","move","look","run","use","omit","also","simplify","import","also","do","write","probably","do","define","pattern","condense","reduce","use","register","pass","just","use","find","do","write","write","use","use","use","express","fix","implement","use","use","simplify","use","convert","do","write","mark","simplify","write","create","use","use"],"You can't":["hide"],"You certainly":["don't"],"You compute":["`last`"],"You correct":["of"],"You could":["add","add","add","probably","use","start","use","use","add","always","easily","turn","use","use","golf","even","put","use","avoid","use","make","use","implement","probably","make","use","add","also","also","also","add","avoid","use","check","try","check","use","add","try","extract","normalize","then","consider","try","maybe","do","do","do","use","downcase","call","rewrite","immediately","use","use","do","extract","try","so","extract","use","also","write:","register","pre-sort","implement","always","shorten","replace","simplify","simplify","write","factor","use","alternatively","look","make","avoid","slightly","also","write","write","make","slightly","use"],"You did":["this"],"You do":["not","need"],"You don't":["need","have","use","need","use","actually"],"You either":["don't"],"You end":["up"],"You gained":["in"],"You got":["me","it"],"You guys":["are"],"You have":["not","made","not","made","two","a","two","an","the","the","three","left","two"],"You know":["that","what..."],"You laser-focused":["right"],"You learn":["more"],"You may":["want","have","also","well","be","want","assume"],"You maybe":["wants","wants"],"You mean":["by"],"You might":["want","consider","consider","find","want","also","find","be","consider","find","look","be","format","consider","be","want","also","want","benefit","consider","want","be","want","add","try","want"],"You must":["use"],"You need":["to","to"],"You never":["reference"],"You right,":["i"],"You should":["check","look","consider","extract","take","be","take","read","not","just","be","also"],"You shouldn't":["need"],"You sometimes":["sort","sort"],"You still":["check","check","recompute"],"You use":["`\\w*`","tail"],"You were":["wondering","just"],"You'd basically":["just"],"You'd have":["a"],"You'd just":["have"],"You'll find":["out"],"You'll need":["to"],"You'll rarely":["need"],"You'll want":["to"],"You're a":["bit"],"You're converting":["a"],"You're doing":["fine","a","a"],"You're having":["a"],"You're iterating":["four"],"You're just":["returning"],"You're missing":["a"],"You're mixing":["imports"],"You're on":["the","the"],"You're probably":["right","thinking"],"You're recomputing":["the"],"You're right":["the","about","of"],"You're right,":["reverse","the","thanks"],"You're right;":["I"],"You're scanning":["the"],"You're searching":["for"],"You're short":["one","one"],"You're still":["taking"],"You're supposed":["to"],"You're using":["the","the","a","the","explicit"],"You've applied":["tail"],"You've avoided":["the","all","all"],"You've correctly":["applied"],"You've created":["2"],"You've eliminated":["the"],"You've got":["very","some"],"You've kept":["some"],"You've used":["the"],"YouTube video](http://www.youtube.com/watch?v=V08g_lkKj6Q)":["of"],"Your `String.split`":["is"],"Your `allergic_to?`":["requires"],"Your `append`":["is","looks"],"Your `concat`":["implementation","looks"],"Your `count_words`":["function"],"Your `count`":["method"],"Your `filter_valid`":["has"],"Your `has_letters?`":["won't"],"Your `is_yelling?`":["logic"],"Your `map`":["call"],"Your `match_word`":["function"],"Your `nucleotide_counts`":["traverses"],"Your `same_letters`":["implementation"],"Your `silence`":["regex"],"Your `zip/2`":["is"],"Your answer":["about"],"Your argument":["name"],"Your co-workers":["will"],"Your code":["is","looks","performs","doesn't","additionally"],"Your current":["version"],"Your decisions":["are"],"Your filter":["has"],"Your identical":["test"],"Your implementation":["of"],"Your isSilence":["clause"],"Your ordering":["does"],"Your overall":["approach"],"Your parenthesis":["aren't"],"Your regex":["doesn't","is"],"Your silence":["Regular"],"Your solution":["could"],"Your string":["matching"],"Your submission":["uses"],"Your suggestion":["actually"],"Your three":["private"],"Your typespec":["looks"],"Your use":["of","of"],"Your word":["counter"],"Your're totally":["right,"],"Yours is":["the"],"Yup -":["uploaded"],"Yup still":["here,"],"Yup, I":["missed","noticed"],"Yup, code":["doesn't"],"Yup, definitely":["an"],"Yup, function":["last"],"Yup, looks":["good."],"Yup, parens":["aren't"],"Yup, that":["works."],"Yup, that's":["how","the","the"],"Yup, the":["tradeoff","macros"],"Yup. It's":["always"],"Yup. List":["append"],"ZOMBIES ARE":["COMING!!11!!1!\""],"[ ...":["]`"],"[ ?A,":["?T,"],"[ head":["|","|"],"[ processed_element":["|"],"[ s":["]"],"[\"#\u003cCustomSet \",":["Kernel.inspect(CustomSet.to_list(s),"],"[\"*\", 2])":["=\u003e"],"[\"?\"])` may":["be"],"[\"A\"|\"B\"] being":["a"],"[\"TEST\"])` to":["return"],"[\"as\"], [\"java\"],":["[\"javascript\"]]"],"[\"blue\"], [\"fish\"]]":["```"],"[\"car\", \"carpet\",":["\"as\","],"[\"carpet\"], [\"as\"],":["[\"java\"],"],"[\"fish\"], [\"blue\"],":["[\"fish\"]]","[\"fish\"]]","[\"fish\"]]`"],"[\"fish\"], [\"red\"],":["[\"fish\"],","[\"fish\"],","[\"fish\"],"],"[\"fish\"], [\"two\"],":["[\"fish\"],","[\"fish\"],","[\"fish\"],"],"[\"mon\", \"tues\",":["\"wednes\",","\"wednes\","],"[\"red\"], [\"fish\"],":["[\"blue\"],","[\"blue\"],","[\"blue\"],"],"[\"two\"], [\"fish\"],":["[\"red\"],","[\"red\"],","[\"red\"],"],"[1, 2,":["3,","3]","3,","3]"],"[1, 2]":["++","++"],"[1,2,3], \",\",":["&inspect/1","(&inspect/1"],"[1,2,3], &amp;1":["*"],"[1,2,3], fn(x)":["-&gt;"],"[1076, 1072,":["32,"],"[1] ++":["[2]","[2]"],"[208, 180,":["208,"],"[3, 4.":["5,","5,"],"[3, 4],":["[5,","[5,"],"[5, 6]]`.":["Here's","Here's"],"[64-bit] [smp:8:8]":["[async-threads:10]"],"[:math](http://www.erlang.org/doc/man/math.html) library,":["though"],"[?A, ?B,":["?C]`."],"[?A, ?B]`.":["Using"],"[?A, ?T,":["?C,"],"[EDIT: Accidentally":["included"],"[Getting Started":["Guide](http://elixir-lang.org/getting_started/1.html)"],"[Learn You":["Some"],"[String.slice(number, 0,":["3),"],"[String](http://elixir-lang.org/docs/master/String.html) module.":["Hope"],"[This](http://elixir-lang.org/docs/master/Kernel.SpecialForms.html#%3C%3C%3E%3E/1) should":["come"],"[[\"car\"], [\"carpet\"],":["[\"as\"],"],"[[\"one\"], [\"fish\"],":["[\"two\"],","[\"two\"],"],"[[:alpha:]] is":["a-zA-Z."],"[[[\"D\"]]]])` ==":["`\"ABCD\"`."],"[[string]] and":["not"],"[] ++":["[1]","[1]"],"[] -\u003e":["0","0","#","reversed_list","0","0","0","0","0","acc","0","acc"],"[]), do:":["false"],"[])` which":["immediately"],"[], &(&2":["++"],"[], &([&1|&2]))":["|\u003e"],"[], fn":["x,","l,","l,","l,"],"[], fn(acc,":["l)"],"[_|t] -\u003e":["do_count(t,","do_count(t,","do_count(t,","do_count(t,","do_count(t,"],"[`Enum`](http://elixir-lang.org/docs/stable/Enum.html) module":["has"],"[`List`](http://elixir-lang.org/docs/stable/List.html), I":["gather"],"[`sprintf`](http://apidock.com/ruby/Kernel/sprintf) format":["string."],"[a function":["on"],"[a-zA-z0-9_]`, so":["digits"],"[allergy], else:":["[]"],"[async-threads:10] [hipe]":["[kernel-poll:false]"],"[binary, size(1)],":["phone"],"[blog article](http://pminten.github.io/blog/2013/09/12/elixir-patterns-abstract-data-structures/)":["about"],"[candidate_anagram |":["other_candidate_anagrams])"],"[case](http://elixir-lang.org/docs/stable/Kernel.html#case/2) or":["[cond](http://elixir-lang.org/docs/stable/Kernel.html#cond/1)"],"[cond](http://elixir-lang.org/docs/stable/Kernel.html#cond/1) instead":["of"],"[cute YouTube":["video](http://www.youtube.com/watch?v=V08g_lkKj6Q)"],"[defp](http://elixir-lang.org/docs/stable/Kernel.html#defp/2). Alternatively":["you"],"[deprecated](https://groups.google.com/forum/#!topic/elixir-lang-core/FnlK6VjZ190). Henceforth,":["iteration"],"[docs for":["the"],"[downcase: 1]`,":["and"],"[element|rest_of_list], do:":["element"],"[elixir's unicode.ex](https://github.com/elixir-lang/elixir/blob/master/lib/elixir/unicode/unicode.ex)":["for"],"[elixir-lang-talk](https://groups.google.com/forum/?fromgroups#!forum/elixir-lang-talk) mailing":["list."],"[etrepum](http://exercism.io/etrepum), I":["arrived"],"[expr special":["form](http://elixir-lang.org/docs/stable/Kernel.SpecialForms.html#&amp;/1)"],"[h |":["acc]"],"[head|tail] -\u003e":["reverse(tail,"],"[here](http://elixir-lang.org/docs/stable/), the":["fifth"],"[here](http://www.erlang.org/doc/man/math.html) (keep":["in"],"[hipe] [kernel-poll:false]":["[dtrace]"],"[h|t] -\u003e":["#"],"[h|t] when":["f.(h)"],"[jeremy-w](http://exercism.io/jeremy-w) for":["the"],"[left-folding](https://en.wikipedia.org/wiki/Fold_%28higher-order_function%29) over":["the","the"],"[mostly Erlang](http://mostlyerlang.com/)":["podcast"],"[my blog":["post"],"[n1 |":["tail_2],"],"[n2 |":["tail_2],"],"[pipeline operator](http://elixir-lang.org/docs/master/Kernel.html#|&gt;/2)":["`|&gt;`,"],"[pipeline](http://elixir-lang.org/docs/stable/Kernel.html#|&gt;/2) operator":["in"],"[reducers](http://clojure.org/reducers) that":["Elixir's"],"[relevant Erlang":["documentation](http://www.erlang.org/doc/efficiency_guide/binaryhandling.html)"],"[rin](http://exercism.io/rin) and":["[fabiokr](http://exercism.io/fabiokr)."],"[ruby version](http://exercism.io/submissions/a6a7ce08ece4b2cade0594a2).":["Using"],"[silent?: 1,":["shouting?:"],"[smp:8:8] [async-threads:10]":["[hipe]"],"[source] [64-bit]":["[smp:8:8]"],"[string docs](http://elixir-lang.org/docs/stable/String.html)":["for"],"[tests](https://github.com/kytrinyx/exercism.io/blob/master/assignments/elixir/bob/bob_test.exs) at":["least,"],"[the Enum](http://elixir-lang.org/docs/stable/Enum.html)":["module,"],"[this commit](https://github.com/elixir-lang/elixir/issues/1526)":["landed"],"[this submission](http://exercism.io/submissions/24eefe8414acff22fea99fcf)":["for"],"[verse(x), \"\\n\",":["song]"],"[w] inlist":["Regex.scan(%r/\\w+/g,"],"[w], d":["-\u003e"],"[x|acc] end))":["|\u003e"],"[x|xs], do:":["x"],"[{'AEIOULNRST', 1},":["{'DG',"],"[{'G', 1},":["{'A',"],"[{1, 'AEIOULNRST'},":["{2,"],"[{?A, 0},":["{?T,","{?T,","{?C,"],"\\2-\\3\"` (%S":["doesn't"],"\\\\2-\\\\3\").` That":["might"],"\\\\2-\\\\3\"` might":["be"],"\\n is":["7but"],"\\p construct":["in"],"\\w in":["Elixir","your"],"\\w is":["useful,"],"\\w is`":["[a-zA-z0-9_]`,"],"\\w with":["spaces"],"] =":["System.argv"],"] and":["then"],"]+`). Why":["do"],"], function,":["acc)"],"]` (note":["the"],"]` and":["it"],"]` etc.":["Not"],"]` syntax":["for"],"]`, which":["does"],"^ those":["are"],"_ -\u003e":["\"Whatever.\"","true"],"_ in":["front"],"_ }":["=","="],"_( My":["suggestion"],"_(pipeline)_ operator.":["That"],"_), do:":["0","true","acc","acc"],"_, acc":["-\u003e","-\u003e"],"_, d":["-\u003e","-\u003e"],"_L11_ seemed":["to"],"_Two other":["things_"],"__info__ defined":["but"],"__info__ function":["is"],"__info__ was":["defined"],"__info__. The":["one"],"_a), do:":["false`"],"_all_ of":["the"],"_am pretty":["sure_"],"_and_ a":["cond."],"_a} -&gt;":["true"],"_b} -&gt;":["false"],"_codepoint is":["just"],"_containing nothing":["&lt;void"],"_count ```":["method;","method","method."],"_count method":["can"],"_count(tail)``` does":["not"],"_entirely_ possible":["that"],"_first_ parameter":["of"],"_function, acc),":["do:"],"_going through":["the"],"_hey() to":["be"],"_not_ a":["good"],"_private functions_":["with"],"_retrieving_ values":["from"],"_sing ```":["method"],"_sing as":["the"],"_that_ was":["not"],"_think_ I":["got"],"_very_ thorough.":["I"],"_why_ does":["that"],"_why_ it":["is"],"_word), do:":["true"],"_}), &elem(&1,":["1))`"],"` **":["(FunctionClauseError)"],"` means":["`List.duplicate"],"` reduce(ll,":["acc,"],"`!` in":["front"],"`!` it.":["Does"],"`!`) method,":["that"],"`!is_binary(something)` seems":["silly"],"`!same?` and":["handling"],"`!silence?(message)` checks?":["Think"],"`!something ||":["\"\""],"`\" \"`":["or","to"],"`\"\" ==":["String.strip(input)`?","String.strip(input)`."],"`\"\"` and":["`''`"],"`\"\"` instead":["of"],"`\"\"` is":["a"],"`\"\"` passed":["to"],"`\"\"` to":["avoid"],"`\"\"`. For":["detecting"],"`\"#{...}\"` string":["interpolation."],"`\"(\\\\1) \\\\2-\\\\3\"`":["might"],"`\"1\" =~":["%r/\\p{L}/`"],"`\"1, 2,":["3\"`.","3\"`,"],"`\"10!\"`. The":["current"],"`\"A\" =~":["%r/\\p{L}/`","%r/\\p{Lu}/`"],"`\"\\000\", \"\\001\",":["etc)?"],"`\"\\n\"` should":["be"],"`\"` and":["not"],"`\"a\" =~":["%r/\\p{Lu}/`"],"`\"hello #{code}\"`?":["That"],"`\"é\"` works":["fine,"],"`## Examples`":["beginning"],"`#{}` supports":["whole"],"`$` then":["the"],"`%S\"(\\1) \\2-\\3\"`":["(%S"],"`%` for":["sigils."],"`%r/(.{3})(.{3})(.{4})/` looks":["better"],"`%r/[^\\p{L}\\p{N}\\s]/` (i.e.":["filter"],"`%r/[a-z0-9]+/` prevent":["the"],"`%r/[a-z|A-Z]/` seems":["weird,"],"`%r/\\p{L}/i`, so":["it'll"],"`%r/\\p{L}/u` (`\\p{L}`":["="],"`%r/\\w+/` -":["that"],"`%r/\\w+/` or":["`%r{\\w+}`."],"`%r/\\w+/` would":["be"],"`%r/p{L}/u`? Having":["to"],"`%r\\(.{3})(.{3})(.{4})/` perhaps...":["though"],"`%r{[[:alnum:]]+}` thanks":["for"],"`%r{\\w+}`. I":["like"],"`%{\\w}` includes":["the"],"`&&1` gets":["parsed"],"`&&` should":["work"],"`&( )`":["in"],"`&(&1 +":["1)`","1)`","1)`","1)`","&2)`","1)`","1)`","1)`.","1)`.","&2)`"],"`&(&1 ==":["nucleotide)`"],"`&(&1)` (because":["`&&1`"],"`&(&1+&2)`. Oh":["how"],"`&(&1+1)` because":["otherwise"],"`&(&1+1)` is":["also"],"`&(&1+1)` there":["for"],"`&(&1+1)` when":["we"],"`&(&1+1)`. That":["reduces"],"`&(1 +":["&1)`."],"`&(String.downcase &1)`":["could"],"`&(String.from_char_list!(&1))` doesn't":["need"],"`&(String.length(&1) ==":["0)`."],"`&([&1|&2])` can":["be"],"`&([student|&1])` can":["be"],"`&(not_same?/1)` is":["more"],"`&({ &1,":["count(dna_chars,"],"`&({ String.downcase(&1),":["letter"],"`&({&1, count(strand,":["&1)})`"],"`&({&1,0})` can":["be"],"`&1 +":["1`","1`.","1`."],"`&1 -":["&1`","&1`."],"`&1` is":["the"],"`&Kernel.!=/2` should":["work,"],"`&Kernel.+/2` is":["horrible,"],"`&Kernel.+/2`. I":["generally"],"`&String.to_char_list/1` instead":["of"],"`&[&1, :a]`":["or"],"`&[&1|&2]`. The":["parens"],"`&[function.(&1) |":["&2]`"],"`&[student|&1]`, the":["parentheses"],"`&` anonymous":["function"],"`&` attaches":["to."],"`&` capture":["operator"],"`&` indicates":["the"],"`&` lambda":["syntax."],"`&` notation.":["I'll"],"`&` would":["attach"],"`&amp;&amp; :kind`":["terms."],"`&amp;(&amp;1 ==":["word)`"],"`&amp;(...)` yet?":["I"],"`&amp;(anagram?(word, &amp;1))`":["can"],"`&amp;(sorted_base_letters ==":["sorted_letters(&amp;1))`."],"`&amp;/1` that":["you"],"`&amp;1 !=":["subject`."],"`&amp;1` and":["`&amp;2`"],"`&amp;1`-type directives":["better."],"`&amp;2` to":["refer"],"`&amp;Kernel.+(&amp;1, 1)`,":["which"],"`&amp;M.f/a` to":["pass"],"`&amp;` notation)":["or"],"`&amp;` will":["be"],"`&amp;`-style function":["captures?"],"`&amp;add_or_increment/2'. i.e.,":["just"],"`&amp;add_or_increment/2` instead":["of"],"`&amp;set_word/2` over":["`set_word(&amp;1,"],"`&amp;update_frequency/2` to":["reference"],"`&append/2` (the":["function"],"`&append/2` isn't":["very"],"`&count_word/2` rather":["than"],"`&do_to_rna(&1)` (extra":["parentheses"],"`&foo(&1)` that's":["not"],"`&gt;` with":["&gt;"],"`&hd(&1)` =":["`fun"],"`&hd/1` to":["be"],"`&mutation?/1` to":["the"],"`&mutation?/2` work?":["If"],"`&namefun` is":["better"],"`&normalize_word(&1)` might":["be"],"`&normalize_word/1`. Which":["you"],"`&transcribe/1` is":["shorthand"],"`&{ &1,":["count(dna_chars,"],"`&{ String.downcase(&1),":["letter"],"`&{&1, :a}`,":["`&[&1,"],"`&{&1, count(strand,":["&1)}`."],"`''` is":["a","pretty"],"`'A'` is":["a"],"`'AB' ==":["[?A,"],"`'ABC' ==":["[?A,"],"`'ATCG' ==":["[?A,"],"`'`. I":["didn't"],"`(& &1)":["+"],"`(&1 ==":["nucleotide)`"],"`(&amp;1 ==":["word)`"],"`((((a ++":["b)"],"`(1 \u003c\u003c\u003c":["n)","n)"],"`(String.ends_with? word,":["\"!\")"],"`(String.strip x)`":["and","is"],"`(String.strip(greeting) |\u003e":["String.length)"],"`(String.upcase(\"HEY MAN\")":["=="],"`(a ++":["(b"],"`(acc, element)":["-\u003e"],"`(acc[x] ||":["0)"],"`(element, acc)":["-\u003e"],"`(filter &mutation?/1)`":["and","-"],"`(round 1_000_000_000)":["/"],"`(speak |\u003e":["String.strip"],"`** (BadArityError)":["bad"],"`++` takes":["is","longer","longer"],"`++` you":["can"],"`+` and":["`-`"],"`+` at":["the"],"`+` operator":["to","is"],"`+` should":["make"],"`+`) you":["should"],"`+`. What":["matters"],"`, do:`":["structures"],"`, not":["`List.duplicate(\"a\","],"`-` and":["only"],"`-` not.":["For"],"`... !=":["\"\"`"],"`./bench.ex 1000`,":["`./bench.ex"],"`./bench.ex 100`,":["`./bench.ex"],"`//` (which":["has"],"`/1` at":["the"],"`/\\p{Lu}/` as":["a"],"`/\\p{L}/` to":["match","check"],"`/\\w+/` is":["not"],"`/me` takes":["another"],"`/u` is":["no","not"],"`/u` option":["to"],"`/u` when":["dealing"],"`0.10.1` also":["introduced"],"`0.10.1` introduced":["the"],"`0.10.1`. Before":["that"],"`0.10.2` or":["so."],"`1 \u003c\u003c\u003c":["(n"],"`1 ==":["1.0`"],"`1, 2,":["3`"],"`1..3` is":["really"],"`1..3`), so":["you"],"`1..4` is":["just"],"`100` is":["doing"],"`10` in":["the"],"`1` and":["`2`?"],"`2` won't":["work,"],"`2`? Also,":["is"],"`4 &amp;&amp;":["!(100"],"`500500`. So":["the","the"],"`:alpha:` translates":["to"],"`:calendar` to":["return"],"`:else` in":["`cond`"],"`:else` which":["happens"],"`:functions`, `:macros`,":["etc."],"`:gen_event.start_link/1` exists":["though"],"`:gen_event`. `:gen_server.start_link\\0`":["doesn't"],"`:gen_server.start_link\\0` doesn't":["event"],"`:gen_server` here,":["it's"],"`:io_format`. I":["failed."],"`:list.sort` is":["slightly"],"`:lists.append` is":["a"],"`:lists.foldr` gains":["yet"],"`:lists.member` (first":["rule"],"`:lists.seq(from, to,":["-1)`"],"`:lists.seq` and":["not"],"`:lists.sort String.codepoints":["word","word"],"`:lists.sort` and":["not"],"`:lists.sort` function":["also"],"`:lists.sort` is":["more"],"`:lists.sort` thing":["is"],"`:lists` stream,":["that's"],"`:macros`, etc.":["E.g.,"],"`:math.pow()` function":["that"],"`:math.pow(2,64) ==":[":math.pow(2,64)"],"`:math.pow/2` function,":["but"],"`:math.pow` is":["a"],"`:math` module).":["Documentation"],"`:nil` to":["be"],"`:ok` if":["the"],"`:question` and":["to"],"`:shouting` or":["`:question`"],"`:silence` as":["opposed"],"`:silence` for":["consistency."],"`:silence`, `:shouting`":["or"],"`:sublist` instead":["of"],"`\u003c\u003c\u003c` left":["bitshift"],"`\u003c\u003c\u003e\u003e`, `_codepoint`":["and"],"`\u003c\u003e` to":["something"],"`== \"\"`":["is","and"],"`==` and":["to"],"`==` is":["allowed","(i.e."],"`\u003e 2`":["guard"],"`?0` so":["wouldn't"],"`?A` are":["integers"],"`?T `return":["`?U`,"],"`?T` and":["`?U`","`?U`","replace"],"`?T`, and":["the"],"`?T`and `?U`":["into"],"`?U` characters":["descriptive"],"`?U` instead":["of"],"`?U` into":["variables"],"`?U`, so":["you"],"`?` are":["legal"],"`?` in":["the"],"`?` is":["the"],"`?` necessary":["and"],"`?` suffix":["to"],"`?` suffix.":["The"],"`?` suffixes":["are"],"`?` to":["denote"],"`?`, I":["think"],"`?`, a":["more"],"`?a +":["?z`."],"`@` prefix":["on"],"`@` syntax.":["Nice."],"`@`s dotted":["around"],"`@`s) by":["using"],"`@amanda ==":["@amanda"],"`@amanda` and":["just"],"`@amelia[char]` is":["a"],"`@berenice` attribute":["using"],"`@brandon` from":["the"],"`@brianne =":["["],"`@brisa` module":["attributes"],"`@calista` before":["that"],"`@carrie 'ATCG'`":["(`'ATCG'`"],"`@dejon acc":["::"],"`@eladio` declaration":["to"],"`@eladio` so":["I"],"`@emilie` before":["all"],"`@ettie` and":["appending"],"`@iliana` list":["accessible"],"`@ines 60":["*"],"`@jamar` and":["`@jamar`"],"`@jamar` available":["to"],"`@jamar` have":["basically"],"`@jamar` to":["exist"],"`@jerad` Much":["better."],"`@judd` and":["`@judd`","one"],"`@judd` did":["you"],"`@judd` is":["passed"],"`@judd`, but":["if"],"`@keara` and":["`@keara`."],"`@keyshawn` like":["this:"],"`@ladarius` and":["`@ladarius`"],"`@ladarius` or":["something"],"`@maeve 50`),":["and"],"`@mallory 100`":["thing"],"`@mossie` which":["is"],"`@nona` definitions.":["Up"],"`@oma HashDict.new":["[{?A,"],"`@oma` in":["a"],"`@roger` based":["on"],"`@taya`. Can":["you"],"`@wava HashDict.new('ATCG',":["&{&1,"],"`ATCG` ==":["`[?A,"],"`Access` implementation":["calls"],"`Access` protocol":["which"],"`Anagram.match(\"test\", [\"TEST\"])`":["to"],"`Anagram` module":["may"],"`Anagram`, I":["would"],"`Beer.Verse` module":["responsible"],"`Beer.Verse` to":["make"],"`Beer.sing(5,95)`, wrapping":["from"],"`Beer` module":["clear.","and"],"`Bitwise` and":["just"],"`Bitwise` module":["that","but"],"`Code.eval_quoted` turns":["out"],"`Code.eval_quoted`. I":["didn't"],"`Counter` module":["feels"],"`CustomSet.intersection(s1, s1)`":["has"],"`Dict.foo` instead":["of"],"`Dict.get` (which":["allows"],"`Dict.get` and":["`Dict.put`","`Dict.put`.","`Dict.put`?"],"`Dict.get` calls":["`HashDict.get`"],"`Dict.get` followed":["by"],"`Dict.get` instead":["of"],"`Dict.get`, since":["this"],"`Dict.get`. I":["didn't"],"`Dict.merge/3` --":["I"],"`Dict.merge/3`. It":["felt"],"`Dict.merge` but":["the"],"`Dict.merge` is":["immediately"],"`Dict.merge` looks":["weird"],"`Dict.merge` method":["takes"],"`Dict.merge` over":["`HashDict.merge`."],"`Dict.merge`, in":["this"],"`Dict.put(..., ...,":["Dict.get(...))`","Dict.get(...))`"],"`Dict.put(counts, word,":["1)`"],"`Dict.put` and":["`Dict.get`."],"`Dict.put` can":["be","often"],"`Dict.some_fun` instead":["of"],"`Dict.some_fun` than":["`HashDict.some_fun`"],"`Dict.some_func` instead":["of"],"`Dict.to_list` to":["make"],"`Dict.update(counts_hash, word,":["1,"],"`Dict.update(dict, char,":["1,"],"`Dict.update(hash, nucleotide,":["&amp;1"],"`Dict.update(scores, word,":["1,"],"`Dict.update/3` to":["get"],"`Dict.update/3`, especially":["with"],"`Dict.update/3`, or":["other"],"`Dict.update/4` instead":["of"],"`Dict.update/4`, you":["may"],"`Dict.update` (think":["about"],"`Dict.update` and":["`Enum.reduce`."],"`Dict.update` makes":["the"],"`Dict.update` might":["be","be","be"],"`Dict.update` slightly":["more"],"`Dict.update` than":["`HashDict.update`"],"`Dict.update` with":["Elixir's"],"`Dict.update`, it":["has","simplifies","could"],"`Dict.update`, it's":["often"],"`Dict.update`, which":["might"],"`Dict.update`? You":["might"],"`Dict` =":["interface,","interface,"],"`Dict` as":["an"],"`Dict` change":["makes"],"`Dict` data":["structure."],"`Dict` equivalent":["for"],"`Dict` equivalent).":["Think"],"`Dict` for":["updating"],"`Dict` function":["of"],"`Dict` functions":["are","to","if","work","work"],"`Dict` functions.":["`Dict`"],"`Dict` in":["`increment`."],"`Dict` is":["the","an","that","an","implemented"],"`Dict` over":["functions"],"`Dict` starting":["in"],"`Dict` versions.":["`Dict`","`Dict`"],"`Dict` vs":["`HashDict`:"],"`Dict` works":["with","for"],"`Dict` you":["can"],"`Dict`). `HashDict`":["is"],"`Dict`. `Dict`":["works"],"`Elixir.match?/2` function":["that"],"`Enum#Reduce` instead.":["I"],"`Enum#count` instead":["of"],"`Enum#filter` over":["them?"],"`Enum#reduce`, but":["I"],"`Enum#reduce`. Thanks":["for"],"`Enum.all?` achieve":["the"],"`Enum.all?` and":["`Enum.any?`"],"`Enum.all?`, etc.":["It"],"`Enum.any?([false])` you'd":["get"],"`Enum.any?` but":["Elixir"],"`Enum.any?` is":["interesting,"],"`Enum.at(earth_year_fraction, index)`.":["Using"],"`Enum.blank?/1` similar":["to"],"`Enum.count(&equal_pairs?(&1))` (or":["`Enum.count(&equal_pairs?/1)`."],"`Enum.count(&equal_pairs?/1)`. Omitting":["the"],"`Enum.count(List.zip([as, bs]),":["fn"],"`Enum.count(a)` twice":["in"],"`Enum.count(fn {a,":["b}"],"`Enum.count(sequence, &(&1":["=="],"`Enum.count(strand, &(&1":["=="],"`Enum.count/2` instead":["of"],"`Enum.count/2` which":["allows"],"`Enum.count/2` would":["make","help"],"`Enum.count/2`? You":["might"],"`Enum.count` 4":["times"],"`Enum.count` and":["getting","thought"],"`Enum.count` for":["your"],"`Enum.count` inside":["`count_same_word`"],"`Enum.count` to":["make"],"`Enum.count` when":["you"],"`Enum.count` where":["the"],"`Enum.count`), for":["each"],"`Enum.each(Enum.with_index(planets)` and":["then"],"`Enum.empty?` instead":["of"],"`Enum.filter words,":["normalized_word"],"`Enum.filter(candidates, &amp;anagrams?(word,":["&amp;1))`"],"`Enum.filter(candidates, &anagram?(word,":["normalized,"],"`Enum.filter/2` on":["`match/2`"],"`Enum.filter_map` --":["that's"],"`Enum.filter_map` or":["`Stream.filter"],"`Enum.filter_map` too.":["I'll"],"`Enum.filter` and":["remove"],"`Enum.filter` for":["production"],"`Enum.filter` instead":["of"],"`Enum.filter` is":["much","much"],"`Enum.filter` list":["comprehensions"],"`Enum.filter` methods":["in"],"`Enum.filter` simplifies":["greatly,"],"`Enum.filter` then":["an"],"`Enum.filter` uses":["it."],"`Enum.filter` version":["that"],"`Enum.filter` was":["what"],"`Enum.filter` with":["tail","a"],"`Enum.filter`, which":["captures"],"`Enum.filter`. That":["way"],"`Enum.find_value` is":["actually"],"`Enum.first Regex.scan":["phone_pattern,"],"`Enum.first/1` isn't":["really"],"`Enum.flat_map(input, &invert_index/1)":["|\u003e"],"`Enum.flat_map` and":["it","things","`Enum.map`"],"`Enum.flat_map` to":["`HashDict.new`"],"`Enum.foldl` in":["the"],"`Enum.join([:a, 2])`":["gives"],"`Enum.join` calls":["`to_string`"],"`Enum.join` for":["joining"],"`Enum.join` in":["your"],"`Enum.join` isn't":["necessary,"],"`Enum.join` seems":["good."],"`Enum.map &encode_char/1`":["breaks"],"`Enum.map 'abcd',":["fn(n)"],"`Enum.map |\u003e":["List.flatten`","Enum.reduce`","Enum.chunk"],"`Enum.map(&hd/1)` (`&hd/1`":["="],"`Enum.map(...) |\u003e":["List.flatten`"],"`Enum.map(comparisons, &(&1,":["String.downcase(&1))"],"`Enum.map(dna, &transcribe/1)`.":["`&transcribe/1`"],"`Enum.map/2` is":["already"],"`Enum.map_filter` into":["a"],"`Enum.map_join [1,2,3],":["\",\",","\",\","],"`Enum.map_join([1,2,3], \",\",":["&inspect/1)"],"`Enum.map_join(fn {d,":["msg}"],"`Enum.map_join/3` for":["`sing`"],"`Enum.map_join/3` is":["super"],"`Enum.map_join/3` would":["be"],"`Enum.map_join` (which":["probably"],"`Enum.map_join` instead":["of"],"`Enum.map_join` yet,":["so"],"`Enum.map_join`, I":["think"],"`Enum.map_join`, though":["it"],"`Enum.map_join`? Seems":["like"],"`Enum.map` can":["fail"],"`Enum.map` in":["`@rico`."],"`Enum.map` or":["`Enum.reduce`","`Enum.filter`","a"],"`Enum.map` to":["avoid"],"`Enum.map` with":["explicit"],"`Enum.map` you're":["doing"],"`Enum.map`) will":["do."],"`Enum.map`, for":["example"],"`Enum.map`. Also,":["there's"],"`Enum.map`. I'll":["keep"],"`Enum.map`. In":["this"],"`Enum.map`. It":["helps"],"`Enum.map`? Just":["curious."],"`Enum.member?`: `:lists.member`":["(first"],"`Enum.reduce(0..999999, 0,":["&(&1+&2))`"],"`Enum.reduce(1..10, 0,":["&(&1","&(&1"],"`Enum.reduce(start..finish, ...,":["...)`"],"`Enum.reduce(words, HashDict.new,":["count(&amp;1,"],"`Enum.reduce` (and":["all"],"`Enum.reduce` (which":["is"],"`Enum.reduce` and":["see","`Enum.reverse`","implemented"],"`Enum.reduce` are":["helpful"],"`Enum.reduce` based":["on"],"`Enum.reduce` explicitly...":["just"],"`Enum.reduce` gets":["a"],"`Enum.reduce` if":["the"],"`Enum.reduce` in":["`sing`"],"`Enum.reduce` instead":["of","of"],"`Enum.reduce` into":["something"],"`Enum.reduce` is":["the","mainly","a","preferred","more","preferred","somewhat"],"`Enum.reduce` on":["line"],"`Enum.reduce` over":["`List.foldl`,"],"`Enum.reduce` than":["to","`List.foldl`."],"`Enum.reduce` that":["encapsulates"],"`Enum.reduce` to":["further","handle","solve"],"`Enum.reduce` using":["a"],"`Enum.reduce` with":["`HashDict.update`."],"`Enum.reduce` would":["allow"],"`Enum.reduce` you":["can"],"`Enum.reduce`, which":["also"],"`Enum.reduce`. I":["guess"],"`Enum.reduce`. It":["works"],"`Enum.reduce`. It's":["also"],"`Enum.reduce`. That":["way"],"`Enum.reduce`. Those":["functions"],"`Enum.reduce`. To":["use"],"`Enum.reduce`. When":["originally"],"`Enum.reject` and":["then"],"`Enum.reject` with":["a"],"`Enum.reverse |&gt;":["Enum.with_index`"],"`Enum.reverse |\u003e":[":lists.reverse`):"],"`Enum.reverse(:lists.seq(to, from))`":["is"],"`Enum.reverse` in":["the"],"`Enum.reverse` on":["the"],"`Enum.slice` (`Enum.slice([],":["1..-1)"],"`Enum.slice` is":["trying"],"`Enum.sort |\u003e":["HashDict.new`?"],"`Enum.sort` 'cause":["it"],"`Enum.sort` (that":["actually"],"`Enum.sort` in":["this"],"`Enum.sort` is":["more"],"`Enum.sort` to":["achieve"],"`Enum.sort`: Do":["it"],"`Enum.sort`? I":["understand"],"`Enum.take` always":["creates"],"`Enum.take` is":["obviously"],"`Enum.take` what":["your"],"`Enum.take`. Consider":["a"],"`Enum.to_list(4..2)` ==":["`[4,3,2]`."],"`Enum.to_list(collection)` to":["transform"],"`Enum.to_list(start..finish)`. `Enum.reduce`":["(and"],"`Enum.to_list` and":["`Enum.reduce`"],"`Enum.to_list` could":["be"],"`Enum.to_list` first":["to"],"`Enum.to_list` in":["the"],"`Enum.to_list`, using":["`Enum.reduce`?"],"`Enum.zip/2` is":["nicer"],"`Enum.zip` and":["`List.zip`","`List.zip`,"],"`Enum.zip` are":["slightly"],"`Enum.zip` has":["a"],"`Enum.zip` help":["you"],"`Enum.zip` vs":["`List.zip`,"],"`Enum.zip` will":["ignore"],"`Enum.zip` would":["be"],"`Enum/filter/2` ,separates":["with"],"`Enum` facilities,":["I'll"],"`Enum` function":["causes","at"],"`Enum` functions":["on","can","can","tend"],"`Enum` functions)":["work"],"`Enum` functions,":["I"],"`Enum` functions.":["It"],"`Enum` if":["possible."],"`Enum` in":["next"],"`Enum` is":["pretty","the"],"`Enum` isn't":["the"],"`Enum` methods":["that"],"`Enum` module":["are"],"`Enum` module,":["that"],"`Enum` or":["`Stream`","a"],"`Enum` there":["is"],"`Enum` to":["a","make"],"`Enum` trying":["to"],"`Enum`, I":["got"],"`Enumerable.reduce` (i.e.":["that"],"`Enumerable.reduce` is":["always"],"`Enumerable` for":["it)"],"`Enumerable` implementation)":["rather"],"`Enumerable` implementation,":["like"],"`Enumerable` protocol.":["It's"],"`ExtendedEnum`, complete":["with"],"`Graph.edges([e|Graph.edges])` appends":["`e`"],"`Graph.update` in":["the"],"`Graph`. (Embarrassingly":["I"],"`Greeting` module":["isn't"],"`Greeting` module.":["Why"],"`Hash.new(default)` for":["ruby)."],"`HashDict.fetch!` you":["could"],"`HashDict.fetch(@fay, nucleotide)`":["why"],"`HashDict.foo` if":["possible."],"`HashDict.get` if":["a"],"`HashDict.merge/3` over":["`HashDict.update/4`."],"`HashDict.merge`. I":["think"],"`HashDict.new ...`,":["the"],"`HashDict.new([])` instead":["of"],"`HashDict.new/2` invocation.":["The"],"`HashDict.new` (effectively":["the"],"`HashDict.new` and":["I"],"`HashDict.new` are":["a"],"`HashDict.new` but":["then"],"`HashDict.new` doesn't":["make"],"`HashDict.new` invoked":["in"],"`HashDict.new` which":["has"],"`HashDict.new`, guess":["you"],"`HashDict.put(..., ...,":["HashDict.get(...))`"],"`HashDict.some_fun` (with":["the"],"`HashDict.some_fun`. The":["way"],"`HashDict.some_func`. `Dict`":["is"],"`HashDict.update( hash,":["word,","word,"],"`HashDict.update(&amp;2, &amp;1,":["1,"],"`HashDict.update(dict, word,":["1,","1,"],"`HashDict.update/4` here.":["And"],"`HashDict.update/4` is":["your"],"`HashDict.update/4`, the":["stack"],"`HashDict.update/4`, what":["error"],"`HashDict.update/4`. Code":["gets"],"`HashDict.update/4`. Everything":["else"],"`HashDict.update/4`? Normalizing":["the"],"`HashDict.update` (i.e.":["only"],"`HashDict.update` (without":["`!`)"],"`HashDict.update` --":["it"],"`HashDict.update` allows":["to"],"`HashDict.update` and":["`List.foldl`"],"`HashDict.update` doesn't":["update"],"`HashDict.update` might":["help"],"`HashDict.update` on":["line"],"`HashDict.update` takes":["a","a"],"`HashDict.update`, I'll":["update"],"`HashDict.update`, as":["I"],"`HashDict.update`. It'll":["make"],"`HashDict.update`. `HashDict.update`":["allows","takes"],"`HashDict` =":["an","implementation."],"`HashDict` as":["a"],"`HashDict` automatically":["for"],"`HashDict` function":["if"],"`HashDict` functions":["when","directly","explicitly,","directly","if"],"`HashDict` functions,":["aside"],"`HashDict` functions.":["`Dict`"],"`HashDict` had":["an"],"`HashDict` in":["a"],"`HashDict` is":["a","an","a"],"`HashDict` methods.":["Your"],"`HashDict` now.":["The"],"`HashDict` once":["it's"],"`HashDict` output":["does"],"`HashDict` so":["that"],"`HashDict` specific":["ones."],"`HashDict` than":["doing"],"`HashDict` to":["update.","be"],"`HashDict` value":["is"],"`HashDict` values":["but"],"`HashDict` when":["`Dict`"],"`HashDict`), but":["most"],"`HashDict`, just":["create"],"`HashDict`, since":["it"],"`HashDict`: It's":["worth"],"`IO.puts \"Compiling\"`":["left"],"`Inspect.Algebra` and":["more"],"`Inspect.Algebra` should":["make"],"`Inspect` instance":["could"],"`Kernel.apply`. What":["do"],"`Kernel.inspect` thing":["took"],"`Kernel.length` (imported":["implicitly)."],"`Kernel.to_char_list` (or":["just"],"`Kernel` or":["`String`."],"`Kernel`, and":["that's"],"`List#foldl` works,":["really"],"`List#foldl`, which":["makes"],"`List.concat` is":["slightly","the","slightly"],"`List.count` is":["that"],"`List.duplicate \"a\",":["5","(5"],"`List.duplicate(\"a\", 5)":["|\u003e"],"`List.first` could":["be"],"`List.first` would":["return"],"`List.first` you'd":["silently"],"`List.flatten(Regex.scan(%r/[^ ]+/,":["string))`"],"`List.flatten/1` ,":["I"],"`List.flatten/1` is":["unneccesary","unneccesary"],"`List.flatten/1` more":["appropriate."],"`List.flatten/1`, I'm":["more"],"`List.flatten` afterwars.":[":/"],"`List.flatten` at":["least"],"`List.flatten` in":["your"],"`List.flatten` on":["it,"],"`List.flatten` or":["`|\u003e"],"`List.flatten` you":["can"],"`List.flatten`, I":["would"],"`List.foldl/3` and":["`HashDict.update/4`?"],"`List.foldl/3` could":["work"],"`List.foldl/3` is":["really"],"`List.foldl` +":["`HashDict.update`."],"`List.foldl` as":["`Enum.reduce`"],"`List.foldl` is":["more"],"`List.foldl` might":["help"],"`List.foldl`, and":["`Dict.merge`"],"`List.foldl`. I":["don't"],"`List.foldl`. They":["do"],"`List.foldl`. You":["can"],"`List.last` part":["took"],"`List.t` is":["not"],"`List.zip |\u003e":["Enum.count`"],"`List.zip/1' instead":["of"],"`List.zip/1` directly":["in"],"`List.zip/1` doesn't":["have"],"`List.zip/1` handles":["that"],"`List.zip/1` when":["you're"],"`List.zip` (with":["subtly"],"`List.zip` actually":["does"],"`List.zip` and":["`Enum.zip`"],"`List.zip` combined":["with"],"`List.zip` doesn't":["have"],"`List.zip` might":["come"],"`List.zip`, both":["work"],"`List.zip`, which":["are"],"`List.zip`. In":["general"],"`ListDict`, lists":["of"],"`List` an":["array."],"`List` and":["requiring"],"`List` before":["calling"],"`List` functions.":["But"],"`List` module":["had"],"`List` to":["manipulate"],"`List`. For":["lists"],"`MultiSet.minus` function":["would"],"`MultiSet` and":["`MultiSet.minus`"],"`O(n)`) but":["when"],"`O(n)`, a":["reverse","reverse"],"`O(n)`. So":["the","the"],"`O(n*m)` complexity,":["i.e."],"`O(n+m)` by":["using"],"`P or":["(Q","(Q"],"`P` and":["`Q"],"`Person` into":["private"],"`PhoneParser` explicitly,":["then"],"`PhoneValidation` and":["`PhoneParser`"],"`Phrase.new` to":["create"],"`Phrase.to_word_list/1`, by":["using"],"`Phrase` module":["and"],"`Q and":["P`."],"`README.md` as":["a"],"`Range[first: 1,":["last:","last:"],"`Range[first: x,":["last:"],"`Range` to":["be"],"`Record[a: ...,":["b:","b:"],"`Regex#replace`? Either":["way,"],"`Regex#scan` and":["it"],"`Regex#split`, but":["at"],"`Regex.match?(%r/\\pL/, \"£\")`":["is","and"],"`Regex.match?(%r/\\pL/u, \"£\")`":["is"],"`Regex.match?(%r/\\p{Lu}/, string)":["&&"],"`Regex.match?(%r/^[\\p{Sc}\\p{S}]+$/, input)`,":["but"],"`Regex.match?(r/^[\\p{Lu}\\P{Ll}]+$/)` using":["the"],"`Regex.match?/2` to":["get"],"`Regex.match?` statements":["into"],"`Regex.match` is":["great."],"`Regex.replace/3` gives":["me"],"`Regex.replace` and":["`String.split`","`String.split`"],"`Regex.replace` here,":["it's"],"`Regex.replace` usage":["is"],"`Regex.run !=":["nil`est"],"`Regex.run/1` returns":["a"],"`Regex.run` could":["help"],"`Regex.run` that":["would"],"`Regex.run` was":["wrong"],"`Regex.run` would":["be"],"`Regex.scan %r/\\w+/,input`":["gets"],"`Regex.scan(%r/([\\p{L}\\p{N}]+)/) |\u003e":["Enum.map(&hd/1)`"],"`Regex.scan(%r/\\w+/,phrase)` as":["opposed"],"`Regex.scan(,..) |\u003e":["Enum.reduce(HashDict.new(),"],"`Regex.scan(...) |\u003e":["Enum.map(&hd/1)`","Enum.map(&hd/1)`."],"`Regex.scan(phone_pattenr, unformatted)":["|\u003e"],"`Regex.scan(phone_pattern, unformatted)":["|\u003e"],"`Regex.scan/2` for":["tokenizer"],"`Regex.scan/2` here,":["for"],"`Regex.scan/2` not":["as"],"`Regex.scan/2` that":["returns"],"`Regex.scan/3` instead":["of"],"`Regex.scan` (thanks":["for"],"`Regex.scan` --":["I","also"],"`Regex.scan` and":["then","remove"],"`Regex.scan` approach":["certainly"],"`Regex.scan` call":["to"],"`Regex.scan` can":["come"],"`Regex.scan` combined":["with"],"`Regex.scan` for":["your","that."],"`Regex.scan` improve":["this"],"`Regex.scan` indeed":["returns"],"`Regex.scan` instead":["to"],"`Regex.scan` into":["a"],"`Regex.scan` is":["nicer."],"`Regex.scan` method,":["but"],"`Regex.scan` might":["be","simplify"],"`Regex.scan` rather":["than"],"`Regex.scan` simplify":["things"],"`Regex.scan` to":["tokenize","produce","generate","get","only"],"`Regex.scan` was":["to"],"`Regex.scan` would":["replace"],"`Regex.scan`, I":["think","think"],"`Regex.scan`, but":["looking","how"],"`Regex.scan`, is":["to"],"`Regex.scan`, it's":["not"],"`Regex.scan`, since":["it"],"`Regex.scan`, so":["you'll"],"`Regex.scan`. I":["was"],"`Regex.scan`. It's":["more"],"`Regex.scan`... fantastic":["idea"],"`Regex.scan`? I":["find"],"`Regex.scan`? It":["can"],"`Regex.split` in":["my"],"`Regex` documentation,":["I"],"`Regex`. It":["just"],"`Set.equals` (actually,":["even"],"`Stack_overflow` exception":["to"],"`StatementType` module,":["something"],"`Statement` module":["available","outside"],"`Stream.concat` might":["be"],"`Stream.filter |\u003e":["Enum.map`.","Enum.map`,"],"`Stream.filter` and":["`Enum.map`"],"`Stream.map |\u003e":["Enum.reduce`","Stream.chunk"],"`Stream.map(&hd/1) |\u003e":["Enum.reduce`"],"`Stream.map` and":["makes"],"`Stream.map` instead":["of"],"`Stream.unfold` you":["can"],"`Stream.with_index |\u003e":["Enum.map`,","Enum.reduce`"],"`Stream.with_index` with":["`Enum.reduce`"],"`Stream.with_index`... cool.":["I"],"`Stream.zip/2`. Looks":["nice."],"`Stream` exposes":["much"],"`Stream` functions":["are","of"],"`Stream` functions.":["For"],"`Stream`. The":["obvious"],"`String#codepoints` and":["then"],"`String#downcase` does":["take"],"`String#graphemes` yet.":["At"],"`String#length` and":["`String#strip`","`String#strip`"],"`String#strip` methods.":["Let","Let"],"`String.Chars` and":["becomes"],"`String.Unicode` being":["in"],"`String.Unicode` is":["part"],"`String.` functions,":["but"],"`String.at(String.rstrip(str), -1)`,":["have"],"`String.at(a, 0)":["=="],"`String.blank?/1` or":["`Enum.blank?/1`"],"`String.capitalize/1` when":["it's"],"`String.codepoints \"A\"":["|\u003e"],"`String.codepoints |\u003e":["Enum.filter`."],"`String.codepoints` and":["`Enum.sort`"],"`String.codepoints` be":["better"],"`String.codepoints` here":["(there"],"`String.codepoints` is":["faster","faster"],"`String.codepoints` returning":["a"],"`String.codepoints` would":["be"],"`String.codepoints`, just":["in"],"`String.downcase &1)`,":["but"],"`String.downcase()` calls":["both"],"`String.downcase(string)` to":["`Regex.scan`"],"`String.downcase(word)` once":["before"],"`String.downcase/1` (https://github.com/elixir-lang/elixir/blob/master/lib/elixir/priv/unicode.ex),":["among"],"`String.downcase` and/or":["`String.upcase`."],"`String.downcase` being":["in"],"`String.downcase` belongs":["in"],"`String.downcase` can":["accept"],"`String.downcase` does,":["but"],"`String.downcase` earlier":["in"],"`String.downcase` from":["the"],"`String.downcase` into":["the","the"],"`String.downcase` over":["it,"],"`String.downcase` piped":["seems"],"`String.downcase` to":["the","save"],"`String.downcase` was":["actually"],"`String.downcase` which":["equally"],"`String.downcase`, since":["you're"],"`String.end_with?`, `Enum.all?`,":["etc."],"`String.ends_with(phrase, \"?\")`":["in"],"`String.ends_with(phrase, [\"?\"])`":["may"],"`String.ends_with?(input, \"?\")`":["instead"],"`String.ends_with?(word, \"!\")":["and"],"`String.ends_with?` and":["`Regex.run`?"],"`String.ends_with?` as":["well,"],"`String.ends_with?` can":["come"],"`String.ends_with?` doesn't":["have"],"`String.ends_with?` in":["your"],"`String.ends_with?` is":["a"],"`String.ends_with?` rather":["than"],"`String.ends_with?` simply":["because"],"`String.ends_with?` to":["be","simplify"],"`String.ends_with?`. You've":["kept"],"`String.ends_with?`? I":["think"],"`String.graphemes` because":["it"],"`String.graphemes` might":["be"],"`String.graphemes` would":["be"],"`String.last ==":["...`."],"`String.last(arg) ==":["\"?\"`"],"`String.last(input) ==":["\"?\"`).","\"?\"`","\"?\"`","\"?\"`."],"`String.last(s) ==":["e`","\"?\"`"],"`String.last(string) ==":["\"?\"`"],"`String.last(text) ==":["\"?\"`"],"`String.last(text)`. That":["way"],"`String.last` on":["line"],"`String.last` or":["`String.ends_with?`"],"`String.last` works,":["but"],"`String.length ==":["0`,"],"`String.length(...) \u003e":["0`"],"`String.length(String.strip(msg)) ==":["0`."],"`String.length(s) ==":["0`","0`","0`","0`","0`","0`"],"`String.length(text) \u003e":["0"],"`String.length/1` or":["comparing"],"`String.length/1` would":["barf"],"`String.length` (imported":["through"],"`String.length` in":["`iex`,"],"`String.reject` by":["a"],"`String.replace(%r/\\P{L}/)` is":["faster"],"`String.replace(number,%r/(...)(...)(....)/,\"(\\\\1) \\\\2-\\\\3\").`":["That"],"`String.replace/4`, or":["`Regex.run/3`."],"`String.replace` and":["replace"],"`String.replace` to":["check"],"`String.replace`, `String.split`":["and"],"`String.replace`, just":["working"],"`String.replace`? Is":["there"],"`String.reverse(s) |\u003e":["String.first`"],"`String.reverse` based":["on"],"`String.scan(%r/\\p{L}/) |\u003e":["Stream.map(&elem(&1,"],"`String.scan(%r/\\w+/) |&gt;":["List.flatten`"],"`String.slice/2` that":["takes"],"`String.slice/3 `and":["remove"],"`String.slice` that":["takes"],"`String.split(phase, \"":["\")`"],"`String.split/1` obviates":["the"],"`String.split/1` splits":["a"],"`String.split/3` but":["IMHO"],"`String.split/3` is":["for,"],"`String.split` and":["deal","`String.reject`"],"`String.split` instead":["of"],"`String.split` is":["intended"],"`String.split` to":["deal","not"],"`String.split` with":["a","a"],"`String.split` you're":["using"],"`String.split`? It":["might"],"`String.strip(callout) ==":["\"\"`"],"`String.strip(greeting) |\u003e":["String.length","String.length"],"`String.strip(msg) ==":["\"\"`","\"\"`"],"`String.strip(phrase) ==":["\"\"`"],"`String.strip(phrase) |\u003e":["String.length"],"`String.strip(speak) ==":["\"\"`,"],"`String.strip(speech) ==":["\"\"`"],"`String.strip(statement) ==":["\"\"`."],"`String.strip(statement)` on":["`is_saying_nothing?`,"],"`String.strip(str) |&gt;":["String.length`."],"`String.strip(string) ==":["\"\"`"],"`String.strip` and":["not"],"`String.strip` as":["that"],"`String.strip` followed":["by"],"`String.strip` will":["work"],"`String.strip`, `String.ends_with?`":["can"],"`String.strip`. I":["find"],"`String.to_char_list!(word) |\u003e":["Enum.map(chars,"],"`String.to_char_list!/1` throws":["an"],"`String.to_char_list!` (throws":["exception"],"`String.to_char_list!` for":["when"],"`String.to_char_list!` is":["preferred.","slightly"],"`String.to_char_list!` previously.":["Also"],"`String.to_char_list` and":["`String.to_char_list!`."],"`String.to_char_list` or":["`String.to_char_list!`."],"`String.uniq` your":["code"],"`String.upcase input":["=="],"`String.upcase true`.":["I've"],"`String.upcase(\"£\") ==":["\"£\"`"],"`String.upcase(s) ==":["s"],"`String.upcase(string) ==":["string`"],"`String.upcase/1` and":["`String.downcase/1`"],"`String.upcase` to":["validate"],"`String.valid?/1` isn't":["actually"],"`StringInquires` module.":["Even"],"`StringType` module":["but"],"`String` and":["a"],"`String` docs":["for"],"`String` documentation,":["there"],"`String` functions":["to"],"`String` functions,":["which"],"`String` had":["common","common"],"`String` module":["functions."],"`String` module.":["Regular"],"`String` module:":["`String.strip`,"],"`String` offers":["to"],"`String` to":["do"],"`String` which":["would"],"`Sublist.compare([1,1,2],[1,1,1,2])` should":["return"],"`Teenager.hey(nil)` (from":["`test"],"`Teenager.shouting?` etc?":["You"],"`Teenager` because":["`shout`,"],"`Teenager` module?":["I"],"`Teenager`? Could":["another"],"`Teenger.empty?/1` makes":["me"],"`True` called":["`otherwise`"],"`Word` module":["because"],"`Words#count/1`, I":["can't"],"`Words.count/1` without":["having"],"`Words.count` that":["doesn't"],"`Words.update/2` into":["2"],"`[ head":["|","|","|"],"`[1, 2,":["3,","3,","3,","3,","3,","3,","3,","3,"],"`[1, 2]":["++","++","++","++"],"`[1, 2]`,":["`l`","`l`"],"`[1,2,3,4] ++":["[5,6]`"],"`[1,2,3] ++":["[4]`"],"`[1,2] ++":["[3]`","[3,4]`"],"`[1] ++":["[2]`"],"`[3, 4,":["5,","5,"],"`[3, 4]":["++","++"],"`[5, 6]":["++","++"],"`[5, 6]`,":["`l`","`l`"],"`[?A, ?T,":["?C,","?C,"],"`[?]` is":["a"],"`[[\"one\"], [\"fish\"],":["[\"two\"],"],"`[[1, 2],":["[3,","[3,"],"`[\\P{L}]` (`\\P{x}`":["is"],"`[\\p{L}-]+` (letters":["and"],"`[\\w-]+`? I":["didn't"],"`[] ++":["[1]`","[1,2]`","[1,","[1,"],"`[]` clause":["in"],"`[]` on":["the"],"`[]` should":["return"],"`[]` works":["on"],"`[]`, `l`":["=","=","=","="],"`[]`, for":["example."],"`[]`, so":["it"],"`[]`. If":["not,"],"`[^ ]+`).":["Why"],"`[^[:alnum:] ]`,":["which"],"`[^[]`, and":["then"],"`[^\\p{L}]` you":["can"],"`[^a-z0-9 ]`":["(note"],"`[_|t] =":["a"],"`[` and":["`]`"],"`[` in":["the"],"`[` is":["part"],"`[a-z, A-Z,":["1-9]`"],"`[a-zA-Z0-9]` for":["your","your"],"`[a-zA-z]` rather":["than"],"`[any]` or":["the"],"`[area_code, exchange,":["subscriber_no]"],"`[d |":["for_iter(d,"],"`[func.(head) |":["collection]`."],"`[func.(head)] ++":["collection`"],"`[function.(x) |":["acc]`."],"`[function.(x)] ++":["acc]`"],"`[head |":["tail]`"],"`[head|tail]` thinking":["is"],"`[roman |":["chars]`,","translate(...)]`"],"`[roman, chars]`":["(or"],"`[roman, translate(...)]`":["or"],"`\\A` and":["`\\z`"],"`\\P` negated":["unicode"],"`\\P` or":["you"],"`\\P{L}` ==":["`[^\\p{L}]`)."],"`\\P{L}` to":["get"],"`\\W` include":["underscore"],"`\\\\` in":["the"],"`\\b`'s in":["the"],"`\\d` will":["only"],"`\\pL` in":["the"],"`\\p` or":["`\\P`"],"`\\p{Lu}` matches":["any"],"`\\p{Lu}`. Only":["improvement"],"`\\p{L}` (i.e.":["`\\P{L}`"],"`\\p{L}` for":["matching","unicode"],"`\\p{L}` matches":["any","for","any"],"`\\p{N}` for":["matching"],"`\\p{N}` matches":["any"],"`\\p{}` syntax":["in"],"`\\w*` which":["is"],"`\\w+` (one":["or"],"`\\w+` in":["your"],"`\\w+` or":["in"],"`\\w+` rather":["than"],"`\\w+`, it":["will"],"`\\w\\s` and":["then"],"`\\w` an":["underscore"],"`\\w` and":["`\\W`"],"`\\w` but":["what"],"`\\w` considers":["`_`","\"_\""],"`\\w` has":["a"],"`\\w` in":["real"],"`\\w` is":["that","a","that","said"],"`\\w` should":["include","be"],"`\\w`, but":["I"],"`\\w`, meaning":["a","a"],"`\\z` because":["that"],"`]` in":["the"],"`^` and":["`$`"],"`_` before":["the"],"`_` char...":["it"],"`_` since":["it's"],"`_` symbol,":["which","which"],"`_` to":["make","a","be"],"`_`, or":["simply"],"`_add_word`. Conditionals":["should"],"`_anagramChars(sourceWord)` might":["be"],"`_area_code` and":["`_pretty`"],"`_codepoint` and":["`\u003c\u003c??\u003e\u003e`"],"`_count` and":["let"],"`_count` function.":["Any"],"`_empty?(nil)` will":["be"],"`_empty?` doesn't":["seem"],"`_empty?` function,":["since"],"`_empty?` should":["be"],"`_foo`. And":["I'd"],"`_for` clauses":["(stops"],"`_hey` for":["the"],"`_hey` function":["combine"],"`_otherwise`, but":["I"],"`_pretty` all":["together."],"`_pretty` close":["to"],"`_question?(text)` can":["be"],"`_question?(text)` method":["is"],"``` \"\"":["=="],"``` \"_whatever\"":["```","```","```"],"``` :)":["I've"],"``` :whatever":["```","```"],"``` Dict.update":["```","```","```"],"``` Enum#reduce":["```"],"``` HashDict.merge":["```"],"``` HashDict.update":["```"],"``` List#foldl":["```"],"``` Regex#scan":["```"],"``` Regex.scan(%r/\\w+/,":["String.downcase(text))```"],"``` [[\"one\"],":["[\"fish\"],"],"``` _count":["```","```","```"],"``` _sing":["```"],"``` anagram":["```"],"``` anagram?/2":["```"],"``` and":["it"],"``` assert":["Teenager.hey(\""],"``` binary_to_list(word)":["```"],"``` block":["as"],"``` cipher":["```"],"``` cond":["```","```","```","```"],"``` defp":["```"],"``` ends_with?":["```"],"``` foldl":["```"],"``` iex":["-v```"],"``` if":["(String.upcase(phrase)"],"``` in":["the","your"],"``` inside":["the"],"``` instead":["of"],"``` is":["there","totally"],"``` logic":["into","into"],"``` logograph":["```"],"``` match":["```"],"``` method":["output","will","look","was","and","is","is"],"``` method.":["About"],"``` method;":["also"],"``` or":["```","```","```"],"``` pun":["```"],"``` so":["that"],"``` statement":["you"],"``` tip,":["makes"],"``` to":["make"],"``` to_list":["```"],"``` true":["```","```","```"],"``` verse":["```"],"``` which":["would"],"``` while":["reducing"],"``` will":["let"],"``` with":["```","something"],"``` word":["```","|&gt;"],"```\"\" ==":["string```"],"```&(&1 +":["1)```"],"```&``` isn't":["a"],"```&amp;1``` acts":["as"],"```&amp;``` notation.":["Any"],"```''```is a":["char"],"```+``` is":["an"],"```. The":["benefit"],"```?``` in":["your","your"],"```Enum.filter(candidates, &amp;is_anagram?(source,":["&amp;1))```"],"```Greeting``` isn't":["the"],"```HashDict.update```. I":["can't"],"```HashDict.update```. It":["looks"],"```Regex#scan```. It":["will"],"```Regex.replace %r/\\s/,":["statement,"],"```Regex.scan``` it":["now"],"```String.ends_with?``` docs":["a"],"```String.ends_with?``` function":["for"],"```String.length ==":["0```"],"```String.strip``` to":["the"],"```String.strip```-ing text":["before"],"```String``` functions":["into"],"```String``` of":["if"],"```Strings``` or":["move"],"```Words.count()``` with":["any"],"```\\w``` would":["match"],"```_``` so":["that's"],"```_count``` more":["readable?"],"````question?````, you":["can"],"````silence?```` and":["````question?````,"],"```clean_string |&gt;":["remove_punctuation"],"```clean_string``` function":["and"],"```count_words_in_list```. Also":["I"],"```count``` names":["for"],"```defp``` yet.":["(Did"],"```dict =":["_count(tail)```"],"```do_count()``` was":["easier"],"```empty?/1```, thank":["you."],"```fn``` form,":["but"],"```hey(\"\")``` could":["be"],"```hey(\"\")``` was":["also"],"```hey/1``` that":["much"],"```http://elixir-lang.org/getting_started/2.html``` I":["would"],"```is_``` redundant":["with"],"```is_``` without":["```?```"],"```message -\u003e":["```."],"```message ==":["String.upcase(message)```"],"```prepare_entry()``` to":["a"],"```question?``` I":["think"],"```removed_punctuation``` into":["one"],"```sentence |\u003e":["String.ends_with?"],"```shouting?``` function":["since"],"```silence?``` is":["cool,"],"```slice``` looked":["unwieldy."],"```something =":["something"],"```sort_word``` function":["I"],"```str ==":["\"\"```."],"```string ==":["\"\"```"],"```|\u003e``` in":["here"],"```|\u003e``` introduces":["the"],"```|\u003e``` may":["be"],"```|``` in":["there."],"``cond do``":["translates"],"``cond`` does":["and"],"``ìs_``` redundant":["with"],"`a ++":["b`"],"`a =":["&amp;String.strip/1`"],"`a ==":["b","b","b"],"`a |\u003e":["b(...)`,","b","(b"],"`a-zA-Z`. I":["think"],"`a`). There's":["no"],"`acc +":["1`","1`","1`","1`","1`","1`","1`","1`","1`","1`"],"`acc =":["0`,","1`","1`,","0`,","1`","1`,","0`,","1`","1`,","0`,","1`","1`,","0`,","1`","1`,"],"`acc_fun` body":["as:"],"`acc` (2)":["is","is","is","is","is"],"`acc` =":["`[]`,","`[1,","`[1,","`[1,","`[]`,","`[5,","`[3,","`[1,","`[]`,","`[1,","`[1,","`[1,","`[]`,","`[5,","`[3,","`[1,"],"`acc` and":["`x`"],"`acc` being":["initially"],"`acc` for":["the","a","a","the","the"],"`acc` in":["line"],"`acc` rather":["than"],"`acc`) would":["take","take"],"`accumulate/2` to":["work"],"`accumulate/2`, but":["rather"],"`accumulate/3` is":["a"],"`accumulate\\3` with":["`Enum.reduce`."],"`accumulate` without":["having"],"`accumulate`, `fold`":["or"],"`action` and":["`pred`,"],"`actual` in":["the"],"`actual` variables":["in"],"`add_or_increment(&amp;1, &amp;2)`":["with"],"`add` function":["instead","is"],"`add` is":["best,"],"`add`, `grade`":["and"],"`age_on` down":["below"],"`alias` if":["necessary)."],"`all_caps?` and":["`question?`"],"`all_caps?` are":["more"],"`all_caps?`, because":["it"],"`all_caps?`, letting":["you"],"`allergic_to?` efficient,":["and"],"`allergic_to?` requires":["traversing"],"`allergic_to?` strikes":["me"],"`allergic_to` can":["be"],"`alphabetize` is":["spelled"],"`alphabetize` spelling":["and"],"`alphabetize` strips":["out"],"`anagram?/2` which":["would"],"`anagram?` and":["the"],"`anagram?` function":["is","and"],"`anagram?` function:":["It"],"`anagram?` function?":["I"],"`anagram?` inside":["the"],"`anagram?` so":["that"],"`anagram?`, so":["you"],"`anagramOf?` separate":["from"],"`anagram_for?` returns":["anonymous"],"`anagram_of?` and":["`unequal_caseless?`"],"`anagram_of` and":["it's"],"`anagram` in":["`same_letters?`."],"`anagram` parameter":["could"],"`anagram` value":["doesn't"],"`anagrams?/2`, but":["I"],"`anagrams?` and":["the"],"`anagrams?` function":["and"],"`anagrams?` method":["into"],"`anagrams`) hence":["making"],"`and remove":["`line_number`,"],"`angrams?` in":["two"],"`any` to":["`acc`"],"`anything_else` did":["not"],"`anything_else`, I":["was"],"`append(list_with_500_elements, list_with_million_elements)`":["will","will"],"`append` and":["`concat`","`concat`","`concat`"],"`append` call.":["Do"],"`append` having":["any"],"`append` in":["`concat`","`concat`.","your"],"`append` is":["a"],"`append` looks":["a"],"`append` operation":["should"],"`append` to":["just"],"`append` uses":["a"],"`append` with":["2"],"`append` without":["`append`"],"`append`, I":["dismissed"],"`append`, `reverse`":["and"],"`apply` method":["that's"],"`area_code` originally":["but"],"`area_code`? It":["would"],"`arg` is":["not"],"`array` and":["`list`"],"`asking?` and":["`shouting?`","`shouting?`"],"`asking_politely?` conditions":["mutually"],"`assert Teenager.hey(nil)":["=="],"`attr_reader` -":["or"],"`b ==":["c"],"`b(a,...)` by":["`a"],"`b_len` elements":["whenever"],"`base !=":["String.downcase(word)`"],"`base1 !=":["nil`"],"`base` and":["the"],"`base` for":["each"],"`base` is":["lowercase"],"`base`. While":["you"],"`baz |\u003e":["bar(1)"],"`being_ignored?` but":["is"],"`being_yelled_at?` is":["quite"],"`bench.ex` and":["run"],"`binary_to_list` and":["`map_join`?"],"`binary_to_list` in":["erlang"],"`binary_to_list` returning":["a"],"`bit` and":["opt"],"`bitstring_to_list(\"José\")` ==":["`'JosÃ©'`."],"`bitstring_to_list` can":["be"],"`bitstring_to_list` for":["when"],"`bitstring_to_list` is":["not","not","the"],"`bitstring_to_list` lately":["and"],"`bitstring_to_list` simply":["converts"],"`bitstring_to_list` will":["not"],"`bitstring_to_list`:) I":["tried"],"`blah?` without":["is"],"`blank?` -":["yes,"],"`blank?` and":["`all_caps?`"],"`blank?` doesn't":["really"],"`blank?` is":["missing"],"`blank?` sounds":["like"],"`blank?` stands":["aside."],"`bottle/1`, you":["could"],"`bottle_count` is":["1."],"`bottle_phrase` OTOH":["is"],"`bottle_phrase` in":["`second_line`"],"`bottle_text`, you":["don't"],"`bottle` into":["the"],"`bottle` that":["give"],"`bottles_of_beer` and":["`take_one_down`"],"`bottles_of_beer` helper":["once"],"`bottles_phrase` to":["get"],"`bottles` but":["the"],"`bottles` clause":["with"],"`bottles` function":["over"],"`bottles` had":["a"],"`bottles` to":["know"],"`build_dictionary`, `count_frequencies`":["?"],"`build_dictionnary`. Thanks.":[":)"],"`calculate_score` could":["be"],"`call`. See":["the"],"`candidate`. Could":["you"],"`candidates |\u003e":["select_anagrams`,","Enum.filter(&anagram?(word,"],"`candidates` or":["`potential_anagrams`"],"`case [h|t]":["when"],"`case condition1":["do"],"`case func.(head)":["of"],"`case input`,":["since"],"`case {1,":["1.0}"],"`case` are":["two"],"`case` because":["IMO"],"`case` can't":["be"],"`case` expressions":["with"],"`case` inside":["a","it"],"`case` match":["on"],"`case` over":["`if`"],"`case` tends":["to"],"`case` vs":["`if"],"`case`) and":["its"],"`case`) is":["pretty"],"`case`) so":["it's"],"`case`, but":["ran"],"`case`. `case`":["tends"],"`cell =":["Cell.create`,"],"`characters_used_in` is":["given"],"`characters_used_in`. That":["conveys"],"`chars =":["String.to_char_list!`."],"`chars/1` do":["more"],"`chars/1` instead":["inside"],"`chars/1`. `0.10.1`":["also"],"`check_ending`? The":["default"],"`clasify` method,":["so"],"`clasify`, it":["is"],"`classify` approach":["would"],"`clean` function.":["Another"],"`clean`, why":["not"],"`cleanup` in":["one"],"`close_bank` implementation":["sensibly"],"`close_bank` looks":["good."],"`co-operative` a":["single"],"`codepoints` but":["`graphemes`"],"`collection` as":["a"],"`command(0)` always":["returns"],"`command(0)`? `command(0)`":["always"],"`compare(list_with_500_000_element, list_with_1_000_000_000_elements)`":["."],"`compare` and":["`is_superlist/2`."],"`compare` even":["though"],"`concat_`, do":["you"],"`concat` (just":["curious)."],"`concat` fairly":["simply"],"`concat` function":["should"],"`concat` if":["you"],"`concat` implementation":["basically"],"`concat` in":["terms","terms","terms"],"`concat` is":["that","a","that","a"],"`concat` looks":["good"],"`concat` on":["the"],"`concat` takes":["forever"],"`concat` test":["that"],"`concat` the":["reason"],"`concat` using":["`reduce`","`reduce`"],"`concat` were":["very"],"`concat`, and":["it"],"`concat`. It's":["perfectly"],"`concat`. That's":["why"],"`concat`. There's":["no"],"`cond do`":["instead"],"`cond` (L10)":["to"],"`cond` (`cond`":["is"],"`cond` (no":["`case`)"],"`cond` (you're":["likely"],"`cond` -":["it"],"`cond` --":["I"],"`cond` .":["Now"],"`cond` and":["so","function","`case`","the","extracting","the"],"`cond` as":["a"],"`cond` because":["the"],"`cond` block":["on","so","should"],"`cond` clause":["(before"],"`cond` clauses.":["Without"],"`cond` control":["flow"],"`cond` down":["to"],"`cond` expression":["but"],"`cond` fit":["right"],"`cond` for":["this"],"`cond` form,":["which"],"`cond` forms":["in"],"`cond` here":["because"],"`cond` here.":["But"],"`cond` in":["elixir","`hey(string)`"],"`cond` is":["a","such","what","the","the","great","not","shorthand","pretty","doing"],"`cond` looks":["really"],"`cond` makes":["it"],"`cond` on":["section","purpose?"],"`cond` or":["`case`"],"`cond` over":["the"],"`cond` statement":["is"],"`cond` statement.":["An"],"`cond` there,":["pattern"],"`cond` to":["be"],"`cond` up":["to"],"`cond` with":["a","a"],"`cond`! As":["`case`"],"`cond`, and":["it's"],"`cond`, instead":["of"],"`cond`, tests":["will"],"`cond`, that":["clears"],"`cond`. Anyway":["is"],"`cond`. I":["had"],"`cond`. Is":["there"],"`cond`. Thanks":["for"],"`cond`. The":["module","lines"],"`cond`. There's":["no"],"`conditionally_add_item` to":["keep"],"`consolidate` is":["a"],"`contact` function":["so"],"`contains_all_chars?` does":["not"],"`contains_all_chars?` you":["don´t"],"`contains_char` is":["an"],"`count +":["1`"],"`count/1 (list)`":["method."],"`count/1` and":["`words_in/1`"],"`count/1` is":["even"],"`count/1`'s `foldr`,":["line"],"`count/1`) vs.":["conciseness."],"`count/1`. Without":["the"],"`count/2` that":["you"],"`count_hash` accumulator":["could"],"`count_of_words` method":["so"],"`count_same_word` is":["actually"],"`count_word(&1,&2)`. IMHO":["it"],"`count_word/2` and":["the"],"`count_word` function":["clause"],"`count_words/2`? I":["took"],"`count_words` function":["has"],"`count_words` using":["`Enum.reduce`."],"`count_words`. `extract_words`'":["responsibility"],"`count` a":["private","diffferent"],"`count` and":["the","`occurrences`."],"`count` as":["a"],"`count` but":["not"],"`count` couldn't":["be"],"`count` fn":["to"],"`count` for":["both","each"],"`count` function":["would","you","is","is","is","in","is","is","is"],"`count` function,":["`dna`","since","though,"],"`count` in":["`nucleotide_counts`.","line"],"`count` into":["named"],"`count` is":["a","better","what","not"],"`count` method":["looks","includes,"],"`count` name":["instead"],"`count` right":["now;"],"`count` tail":["recursive"],"`count` to":["make","tighten"],"`count` very":["easy"],"`count` when":["only"],"`count` you":["can"],"`count`, did":["you"],"`count`, the":["pipeline"],"`count`, there":["is"],"`count`, this":["one"],"`count`, what":["do"],"`count`. I'll":["rewrite","rewrite","rewrite","rewrite","rewrite"],"`count`. It's":["also"],"`count`: I've":["used"],"`counter`, just":["felt"],"`counts, word`":["because"],"`counts` each":["time"],"`coöperative` a":["single"],"`d ==":["2`"],"`d==2 &&":["3"],"`date_plus_giga_seconds_to |\u003e":["elem(0)`,"],"`days_in_gigasecond` function":["like"],"`decide` because":["the"],"`decide` would":["normally"],"`def anagram?(_a,":["_a),"],"`def concat(ll),":["do:"],"`def count(l),":["do:"],"`def func([])`":["or"],"`def func(nil)`":["as"],"`def nothing?(_),":["do:"],"`def nucleotides`":["as"],"`def reverse(string),":["do:"],"`def silence?(content":[")"],"`def transform":["extract"],"`def transform(extract)":["do`"],"`def` and":["`defp`,","`defp`","`defp`"],"`def` defines":["a"],"`def` within":["`def`,"],"`def`), but":["that"],"`def`, so":["a"],"`def`. What":["I"],"`def`s that":["have"],"`defdelegate` actually,":["I"],"`defimpl InputCategory,":["for:"],"`defmodule` code":["would"],"`defp anagram?(same_word,":["same_word),"],"`defp count([],":["dict),"],"`defp do_append`.":["The"],"`defp do_reverse([h":["|"],"`defp foo,":["do:"],"`defp increment_count(\"\",":["hash),"],"`defp is_superlist([_|t]":["="],"`defp method(args),":["do:`"],"`defp name(args)":[",do`"],"`defp name(args),":["do`,"],"`defp quiet?(nil),":["do:"],"`defp reverse`":["vs"],"`defp same?(word,":["word),","word),"],"`defp` (and":["everything"],"`defp` a":["function"],"`defp` and":["explicitly","I","called","called"],"`defp` but":["the"],"`defp` defines":["a"],"`defp` for":["the"],"`defp` if":["you"],"`defp` instead":["of","of","of","of"],"`defp` is":["useful"],"`defp` or":["to"],"`defp` private":["methods?"],"`defp` rather":["than"],"`defp` to":["define"],"`defp` using":["`do:`"],"`defp` when":["all"],"`defp` with":["the"],"`defp`) since":["it's"],"`defp`, at":["least"],"`defp`, is":["there"],"`defp`, my":["editor"],"`defp`. Just":["starting"],"`defp`... will":["fix."],"`defp`s, one":["expecting"],"`defprotocol` to":["see"],"`desired_characters`, which":["is"],"`dict =":["HashDict`"],"`dict` or":["`dictionary`"],"`dict` param":["of"],"`dict`... will":["fix."],"`dictionary` would":["fit"],"`difference`, line":["44"],"`different?` from":["a"],"`different?` method":["vs."],"`different_word?` and":["`anagram?`"],"`different_word?` is":["so"],"`different_words?` test!":["Strictly"],"`differents?` and":["`letters_of`"],"`digit_count ==":["@amanda"],"`discard` in":["terms","terms"],"`discard` just":["call"],"`discard` will":["have"],"`discard`. Does":["implementing"],"`dna_string_to_char`. It":["sounds"],"`dna_to_rna` definition":["visually"],"`dna` is":["a"],"`do ...":["end`."],"`do...end` for":["longer"],"`do:` is":["that"],"`do:` on":["the"],"`do_*` style":["to"],"`do_` convention":["is"],"`do_accumulate` but":["I"],"`do_call(l, 0)`":["is","is","is","is","is"],"`do_count` fails":["if"],"`do_count` for":["a"],"`do_count` now":["immediately","immediately","immediately","immediately","immediately"],"`do_count`. `List.foldl/3`":["could"],"`do_extract_words` --":["maybe"],"`do_filter`. Naming":["them"],"`do_foo` for":["a","a"],"`do_foo` form":["is"],"`do_foo` helper":["functions"],"`do_foo` instead":["of"],"`do_foo` suggestion.":["That"],"`do_foo`, that":["avoids"],"`do_hey`, which":["seems"],"`do_interpret`? Pattern":["matching"],"`do_match`, since":["you"],"`do_numerals` or":["something"],"`do_reverse([], [])`":["which"],"`do_reverse` you":["get"],"`do_to_rna` (`do_foo`":["is"],"`do_x`, probably":["because"],"`do_xxx` for":["helpers."],"`do` and":["`end`.","`end`."],"`do` block)":["with"],"`do` in":["Elixir"],"`downcase_anagrams?` into":["its"],"`downcase` base":["at"],"`downcase` before":["`scan`ning?"],"`downcase` doesn't":["get"],"`downcase` earlier,":["you","then"],"`downcase` in":["`clean`,"],"`downcase` operation":["doesn't"],"`downcase` to":["`normalize`.","`normalize`."],"`downcase`'d and":["sorted"],"`downcase`, then":["out"],"`downcase`, within":["a"],"`downcase`. Makes":["sense"],"`dsl_to_dict`. A":["common"],"`e` to":["the"],"`each_with_index` like":["Ruby"],"`earth_years =":["@jake[planet]`."],"`elem(t, -1)`":["doesn't"],"`elem(t, 0)`":["selects"],"`elem(t, size(t)":["-"],"`elem` function.":["Cool."],"`else if`":["concept,","in"],"`else if`.":["Check"],"`else` instead":["of"],"`else`, basically":["just"],"`empty?()` handle":["a"],"`empty?/1` function":["with"],"`empty?` doesn't":["fit","fit"],"`empty?` function":["so"],"`empty?` is":["not"],"`empty` to":["be"],"`empty`) are":["named"],"`end |\u003e":["function`"],"`end.method` in":["Ruby."],"`end_verse` param":["if"],"`end`'s closer,":["and"],"`end`, though":["I"],"`end`. It":["uses"],"`end`. Not":["much"],"`ends_with/2`, using":["it"],"`ends_with?` function.":["I'll"],"`ends_with?` in":["`question?`."],"`ends_with?`! Going":["to"],"`entries` (through":["`Enum.count`),"],"`entries` lists":["that"],"`entries` that":["wasn't"],"`entries`? That":["doesn't"],"`equal_pairs?` be":["`unequal_pairs?`?"],"`every_x_years` but":["I"],"`exchange` and":["`subscriber_number`"],"`exchange`, `subscribe_no`":["and"],"`exercism fetch`":["again","to"],"`expected` and":["`actual`","`actual`"],"`extract_nucleotide`, you":["could"],"`extract_words`' responsibility":["is"],"`f (a":["|\u003e"],"`f (x":["|\u003e"],"`f =":["fun","fun"],"`f a":["|\u003e"],"`f x":["|\u003e"],"`f(a) |\u003e":["b`"],"`f(g(h))`, they're":["not"],"`f(x) |\u003e":["g`."],"`f` and":["`g`,"],"`f` instead":["of"],"`fact` is":["0."],"`false` as":["clauses."],"`false` if":["so?"],"`false` or":["`nil`"],"`fibonacci(1), do:":["1`."],"`filter_map` solution":["and","is"],"`filter_valid` has":["problems"],"`filter` and":["use","Elixir"],"`filter` as":["\"my"],"`filter` because":["I"],"`filter` for":["Enum.filter_map"],"`filter` functions":["are"],"`filter` is":["implemented"],"`filter` operation,":["so"],"`filter` or":["`reject`,"],"`filter` you":["could"],"`filter`, `flat_map`":["and"],"`filter`, because":["of"],"`filter`, would":["this"],"`filter`. If":["`reverse`"],"`filter`. So":["it"],"`filter`. The":["Elixir"],"`filter`. Was":["this"],"`filter`: it's":["impossible"],"`find_answer` could":["be"],"`first_line` in":["particular"],"`first_line`, I":["think"],"`flat_map` and":["`map`"],"`flat_map` that":["it"],"`flatten` it":["after."],"`flatten`. Are":["you"],"`fn (w,":["h)"],"`fn (x,":["acc)"],"`fn -&gt;":["end`"],"`fn(_key, old_count,":["new_count)`"],"`fn(count) -\u003e":["count+1"],"`fn(potential_match) -&gt;":["…"],"`fn(val) -\u003e":["val"],"`fn(value) -\u003e":["value"],"`fn(word) -\u003e":["String.length(word)"],"`fn(x) -\u003e":["x","x","x","1"],"`fn` and":["`end`,"],"`fn` call,":["right?"],"`fn` inside":["of","`reduce`."],"`fn` is":["really"],"`fn` on":["its"],"`fn` single":["or"],"`fn` syntax":["so"],"`fn` within":["the"],"`fn` wrapper":["that"],"`fold` or":["something"],"`fold`, but":["I'm"],"`foldl`). A":["reader"],"`foldr`, line":["#6..."],"`foldr`? It's":["not"],"`foo ==":["\"\"`)?"],"`foo do":["bla"],"`foo([do: bla])`":["(feel"],"`foo(bar(baz, 1))`":["as"],"`foo(do: bla)`,":["which"],"`foo(something)` it":["will"],"`foo(something, 0)`.":["This"],"`foo/1` (1":["argument)"],"`foo/2`. If":["you"],"`foo?` convention":["is"],"`foo[bar]` syntax":["works"],"`foo` `do_foo`,":["that"],"`foo` functions":["to"],"`foo` if":["I"],"`foo` that":["has"],"`for` is":["more"],"`forceful?` check":["isn't"],"`forceful`check is":["not"],"`forcefull` is":["misspelt."],"`frequencies`? Why":["not"],"`frequency(word)` runs":["more"],"`from_tree` function":["isn't"],"`from` could":["be"],"`fun l":["-\u003e"],"`func =":["&(&1","fun","&[&1|&2]`"],"`function`. Those":["one"],"`g`, but":["that's"],"`generate` I":["might"],"`generate` and":["`decide`"],"`generate` argument.":["I"],"`get`/`put` for":["every"],"`grade` and":["`sort`"],"`grade` pull":["the"],"`graphemes` is":["probably"],"`grep '^\\s\\+|\u003e'":["**/*.ex`"],"`guard` (or":["a"],"`guards` (size":["of"],"`h` instead":["of"],"`has_a_`, and":["`says_`"],"`has_letters?` only":["checked"],"`has_letters?` won't":["work"],"`has_letters?`, the":["precondition"],"`has_letters` to":["use"],"`hash` variable.":["It's"],"`hd/1` will":["do"],"`hd` and":["`tl`,"],"`hd` will":["throw"],"`hd`. There's":["a"],"`head`, `t`":["instead"],"`hey(\"\")` pattern":["match"],"`hey(nil)` would":["be"],"`hey(string)` from":["Programming"],"`hey/0` function":["for","needed?"],"`hey/1 \"\"`":["to"],"`hey/1` instead":["of"],"`hey/1`. Have":["you"],"`hey/1`. You":["can"],"`hey` (for":["example"],"`hey` function":["with","rather","it","reads"],"`hey` have":["multiple"],"`hey` is":["done"],"`hey` method":["seems","so"],"`hey` needs":["to"],"`hey` pattern":["matching"],"`hey` that":["would"],"`hey`, or":["stick"],"`hey`, you":["can"],"`hey`? The":["nested"],"`homologous_pairs` and":["`mutation?`"],"`how_many?` and":["`take_one_down`"],"`i` (caseless)":["option"],"`id` in":["Haskell"],"`identical?` name":["is"],"`iex&gt;` will":["be"],"`iex`, at":["least"],"`if ..":["else"],"`if ...":["else"],"`if Keyword.keyword?(kws)":["do"],"`if arabic":["\u003c"],"`if cond":["do"],"`if cond,":["do:"],"`if d":["=="],"`if else":["if`s.","if`"],"`if func.(head)":["do`."],"`if n":["==","=="],"`if result":["==="],"`if(cond, do:":["whatever)`"],"`if, do:,":["else:`"],"`if` `else`":["instead"],"`if` `else`,":["basically"],"`if` be":["a"],"`if` by":["doing"],"`if` can":["be"],"`if` doesn't":["have"],"`if` or":["`cond`"],"`if` statements":["are","since"],"`if`, and":["I"],"`if`. I":["do"],"`ignore_case` function.":["Great"],"`import :functions,":["Statement`"],"`import Dict`.":["Instead"],"`import Enum`":["is"],"`import String,":["[downcase:"],"`import String`)":["and"],"`import` in":["this"],"`import` is":["rarely","a"],"`import` to":["reduce"],"`import` trick,":["too."],"`import` you":["should"],"`inc_counter/2` could":["actually"],"`inc` as":["a"],"`inc` function":["like","wouldn't"],"`inc` here.":["Initially,"],"`inc` in":["an"],"`inc`. So":["there's"],"`includes_country_code?` functions.":["I"],"`increment_count` I'd":["use"],"`increment_counter([key]` and":["having"],"`increment`. As":["for"],"`initial_counts` as":["an"],"`initial_counts` function":["could"],"`input =~":["%r/[A-Z]+/`"],"`input` variable.":["So"],"`input`, rather":["than"],"`input`, which":["feels"],"`input`. `is_question?`":["sounds"],"`interpret/2` clauses,":["not"],"`interpret` functions":["to"],"`interpret` in":["a"],"`interpret` name":["instead"],"`interpret`, which":["cannot"],"`interrogative?`) that":["the"],"`interval`... feels":["very"],"`invalid token`":["error."],"`iolist_to_binary([[\"A\", ?B],":["\"C\","],"`iolist_to_binary(roman)` at":["the"],"`iolist_to_binary` and":["it"],"`iolist_to_binary` inside":["`Enum.reduce`."],"`iolist_to_binary` is":["a"],"`iolist_to_binary`. What":["you"],"`isShouting`. Not":["a"],"`isUpper`), etc":["are"],"`is_` and":["`?`","the"],"`is_` in":["a","a"],"`is_` naming,":["and"],"`is_` prefix":["is","in","is","is","seeing"],"`is_` type":["predicates"],"`is_`, `has_a_`,":["and"],"`is_`. I":["honestly"],"`is_a_question?` Did":["you"],"`is_aggressive?` and":["`is_question?`"],"`is_all_caps?` (I":["think"],"`is_all_caps?` check.":["Have"],"`is_all_caps?` method":["unless"],"`is_alpha` going":["in"],"`is_anagram?/2`. Perhaps":["you"],"`is_anagram` function":["depends"],"`is_anagram` should":["be"],"`is_binary`, `is_integer`,":["`is_list`,"],"`is_blah` without":["question"],"`is_empty?` method":["inside"],"`is_foo` convention":["is"],"`is_forceful?` check,":["since"],"`is_integer`, `is_list`,":["etc."],"`is_just_number?` when":["none"],"`is_list` guarded":["clauses"],"`is_list`, as":["in"],"`is_list`, etc.":["I"],"`is_pause?` or":["`is_silence?`"],"`is_prime?/2` function":["wasn't"],"`is_question?` mutually":["incompatible,"],"`is_question?` sounds":["like"],"`is_question?`, `is_silence?`,":["`is_shouted?`"],"`is_question` `is_shout`":["etc."],"`is_reticent?` as":["a"],"`is_saying_nothing?`, which":["would"],"`is_shout` etc.":["would"],"`is_shouted?` and":["not"],"`is_shouted?` private":["(you"],"`is_shouting?` and":["friends"],"`is_shouting?` is":["a"],"`is_shouting?` which":["is"],"`is_silence?` before":["checking"],"`is_silence?` function":["doesn't"],"`is_silence?` makes":["more"],"`is_silence?`, `is_shouted?`":["private"],"`is_silent`. Not":["a"],"`is_something?`. In":["Elixir"],"`is_something` or":["`something?`"],"`is_something` style":["are"],"`is_superlist/4` which":["takes"],"`is_upcase?` --":["computers"],"`is_upcase`, as":["it"],"`is_uppercase?` if":["it"],"`is_uppercase` into":["its"],"`is_yelling?` logic":["would"],"`join` at":["the"],"`joined` is":["passed."],"`keep([1,2,3,4], fn":["_"],"`keep` and":["having","`discard`"],"`keep` as":["the"],"`keep` besides":["the"],"`keep` collection.":["Is"],"`keep` or":["vice-versa"],"`keep` would":["be"],"`keep`, except":["the"],"`kind`), though":["it"],"`l` =":["`[1,","`[3,","`[5,","`[5,","`[3,","`[1,","`[1,","`[3,","`[5,","`[5,","`[3,","`[1,"],"`last_four` because":["that's"],"`last_four`, those":["are"],"`last` all":["the"],"`last` and":["`ends_with?`"],"`lc [w]":["inlist"],"`lc` (list":["comprehensions)"],"`leap_year?` method":["too"],"`left` --":["they"],"`length(a)` potentially":["a"],"`length(list)` in":["a"],"`length` in":["guards,"],"`length`. You":["can"],"`letter` does":["not"],"`letters =":["String.upcase(alphabetize(input))`"],"`letters_of` considering":["that"],"`line_number`, `prefix`":["and","and"],"`line`'s multi-line":["definition"],"`list(any)` or":["just"],"`list_of_words` a":["lot"],"`list_to_counted_hash` and":["i'm"],"`list` (which":["means"],"`list` and":["`&(&1+1)`."],"`list` could":["be"],"`list` first,":["then"],"`list` you":["could"],"`list`, though,":["and"],"`ll` being":["the"],"`lowercase_sentence` isn't":["really"],"`lw` and":["`sw`,"],"`maintain_buzz` as":["a"],"`map(arr, &[&1,":["?\\n])"],"`map/1` and":["`map/2`"],"`map/2` are":["two"],"`map/2` for":["a"],"`map_join(...) \u003c\u003e":["\"\\n\")?"],"`map_join`? Why":["do"],"`map` (the":["actual"],"`map` and":["`filter`).","`filter`.","`filter`.","`filter`.","`filter`","`filter`:","`filter`"],"`map` call":["is"],"`map` is":["an"],"`map` operation":["to"],"`map` that":["takes"],"`map`, you":["would"],"`match/2` apply":["this"],"`match/2` function":["is"],"`match/2` is":["what"],"`match/2` two":["`Enum/filter/2`"],"`match/2` with":["pipeline"],"`match/2`. So,":["there's"],"`match_letters` function.":["If"],"`match_word` feels":["really"],"`match_word` function":["seems"],"`match_word` function,":["you"],"`match` function":["would","private,"],"`match` function's":["expectations"],"`match` looks":["like"],"`match` to":["avoid"],"`match` vs.":["`sorted_chars`?"],"`match` while":["`characters_used_in`"],"`match` work":["on"],"`match`. Is":["there"],"`matches?/1` to":["generate"],"`matches_anagram?/2` and":["`is_anagram?/2`."],"`max_by`, but":["that"],"`merge`, though":["`import`"],"`message`? The":["idea"],"`min_by` then":["`max_by`,"],"`modulo` special.":["There's"],"`msg ==":["\"\"`"],"`multiple_of?(number, multiple)`":["and"],"`music` or":["`symphony`"],"`music`, for":["extra"],"`mutation?` functions.":["I"],"`mutation?` gives":["the"],"`mutation?` method":["there"],"`n1 !=":["n2`?"],"`n_bottles` in":["`command(0)`?"],"`n` instead":["of"],"`name/arity`. For":["example"],"`new/2` creates.":["Why"],"`new/2`. Just":["looking"],"`new_count` were":["beneath"],"`new` and":["had"],"`new` aren't":["intended"],"`new`) but":["to"],"`newline_appender` more":["easily"],"`next(iter) ::":["iter`"],"`next_numeral_pair` returns":["not"],"`next_phrase` way":["up"],"`next_three` and":["`last_four`,"],"`next_three` bothers":["me"],"`nil?(something)` returning":["true"],"`nil` (`if`":["and"],"`nil` (a":["falsy"],"`nil` being":["silent,"],"`nil` case,":["once"],"`nil` in":["the"],"`nil` is":["considered"],"`nil` not":["being"],"`nil` objects,":["all"],"`nil` to":["hey?","`reduce`,"],"`nil` value":["that"],"`nil`. In":["this"],"`nil`s, so":["you"],"`normalize` altogether,":["as"],"`normalize` might":["give"],"`not_letters_or_yelling` regex":["on"],"`not_same?/2` don´t":["say"],"`not_same?/2` inside":["another"],"`not_same?` function":["is"],"`not_same_word?` fails":["to"],"`not_saying_anything?`, etc.":["Not"],"`not_saying_anything` you":["could"],"`npa` and":["`nxx`"],"`nucleotide_counts/1` and":["`Dict.get`,"],"`nucleotide_counts` -":["not"],"`nucleotide_counts` instead":["of"],"`nucleotide_counts` lean":["on"],"`nucleotide_counts` only":["calling"],"`nucleotide_counts` re-use":["`count`?"],"`nucleotide_counts` traverses":["the"],"`nucleotide_counts` you":["traverse"],"`nucleotide_counts`, what":["would"],"`nucleotide_counts`. DNA":["can"],"`nucleotide` or":["`n`"],"`nucleotides` like":[":"],"`null`\" could":["be"],"`number/1` for":["get"],"`number` function":["reads."],"`number` instead":["of"],"`number` on":["`str`"],"`numerals_iterator` might":["also"],"`numerals_worker` or":["`do_numerals`"],"`numerals`. Iolists":["are"],"`nxx` but":["I"],"`occurrences` is":["typo'd."],"`occurrences`. Perhaps":["there's"],"`occurrences`. You're":["short"],"`odd?` which":["returns"],"`one_or_it` could":["be"],"`only:` in":["the"],"`only_letters?` is":["not"],"`other_words` parameter,":["maybe"],"`otherwise` and":["Clojure"],"`p` or":["`pred`)"],"`pair`) is":["not"],"`parallel-letter-frequency` is":["only"],"`parse text`":["in"],"`parse`. Right":["now"],"`phase |\u003e":["String.split`."],"`phrase` -&gt;":["`words`"],"`phrase` argument":["to"],"`plang` and":["`plong`"],"`pling`, `plang`":["and"],"`plong` functions":["are"],"`point_compare` is":["public,"],"`potential_anagrams` would":["make"],"`pow` function":["in"],"`pred`) or":["`filter`."],"`pred`, why":["not"],"`predicate_and?` lets":["you"],"`predicate_and?` with":["anything"],"`predicate` (perhaps":["`p`"],"`prefix` and":["`segment`","`segment`:"],"`pretty/1` in":["terms"],"`pretty/1`'s String.replace":["arguments"],"`pretty/1`, otherwise":["this"],"`pretty` function,":["using"],"`pretty` method":["reads"],"`priv` directory,":["so"],"`process` is":["mysterious."],"`process` iterate":["over"],"`put`ting it":["can"],"`question?(input)` instead":["of"],"`question?/1` are":["really"],"`question?/1` is":["a"],"`question?` What":["do"],"`question?` and":["`silence?`","`shouting?`","`silence?`.","`silence?()`","`yelling?`","`shouting?`"],"`question?` are":["language"],"`question?` check,":["which"],"`question?` function":["could"],"`question?` function,":["you"],"`question?` method":["really"],"`question?` private":["(defp),"],"`question?`, `String.last`":["works,"],"`question?`, `shouting?`":["and","and"],"`question?`, `silence?`":["and"],"`question?`, you":["could"],"`question?`. I've":["made"],"`question` But":["the"],"`question` don't":["really"],"`question`, for":["instance,"],"`quiet?/1` function":["more"],"`quiet?` function":["with"],"`quiet?` will":["still"],"`quiet_at_me?/1`. What":["was"],"`r =":["1..4;"],"`rain_music` for":["each"],"`rearranages_into?/2` function":["is"],"`reduce(ll, [],":["fn","fn"],"`reduce/3` call.":["Just"],"`reduce_iter`, you":["can"],"`reduce_with/3` presented.":["I"],"`reduce_with/3`. I":["kept"],"`reduce_with_index/3` function":["to"],"`reduce` and":["`append`"],"`reduce` as":["well.","well."],"`reduce` doesn't":["actually"],"`reduce` for":["so"],"`reduce` function":["call","at"],"`reduce` is":["not","the"],"`reduce` only":["gets"],"`reduce` so":["it's"],"`reduce` to":["implement"],"`reduce` was":["actually"],"`reduce` when":["there"],"`reduce`, `accumulate`,":["`fold`"],"`reduce`, and":["most"],"`reduce`, because":["of"],"`reduce`, the":["anonymous"],"`reduce`, though":["it"],"`reduce`. As":["I'm"],"`reduce`. I":["had"],"`reduce`. `map`":["and"],"`reduce`.. I":["think"],"`reject`, because":["we're"],"`remove_punctuation_and_to_words` as":["a"],"`replace_thymidine` and":["your"],"`replace_thymidine` method.":["It"],"`replace_thymidine`, which":["is"],"`replace_when_is_thymidine`. It":["seems"],"`replace` intentionally":["and"],"`replace` works":["better."],"`respond` to":["produce"],"`rest` =":["0","1","0","1","0","1","0","1","0","1"],"`result` and":["`acc`."],"`result` could've":["been"],"`reticent?` is":["getting"],"`return `?U`,":["so"],"`return false":["if"],"`return` is":["not"],"`reverse` and":["one"],"`reverse` are":["often"],"`reverse` for":["the"],"`reverse` or":["`to_list`."],"`reverse` receives":["an"],"`reverse`, including":["`concat`."],"`reverse`. Is":["there"],"`rna_counterpart(nucleotide)` and":["I"],"`roll_up_counts([\"\"|...` guard":["statement"],"`roll_up_counts` clause":["matching"],"`roman \u003c\u003e":["chars`","translate(...)`"],"`round 1_000_000_000":["/"],"`run` works":["in"],"`s ==":["\"\"`","\"\"`.","\"\"`.","\"\"`","\"\"`","\"\"`.","\"\"`."],"`s` doesn't":["appear"],"`s` don't":["say"],"`s` is":["pretty"],"`s`, and":["try"],"`same_letters` implementation":["is"],"`same_word?` .":["And"],"`same_word?` check":["and"],"`same_word?` you":["still"],"`sanitize_and_extract`, or":["maybe"],"`sanitize` is":["the"],"`say` isn't":["the"],"`says_` prefixes":["are"],"`scan_words` accept":["both"],"`scan` might":["make"],"`scan` over":["`replace`"],"`scan` with":["`\\w+`,"],"`scan` worked":["better"],"`scan`, then":["out"],"`score` on":["a"],"`second_line/1` to":["reduce"],"`second_line` is":["pretty"],"`seconds_in_earth_year` into":["an"],"`segment` (IMO":["are"],"`segment` is":["a"],"`segment` method,":["since"],"`segment`: I":["like"],"`send`, so":["I'll"],"`send`ing the":["interpretation"],"`sentence ==":["\"\"`"],"`sentence |&gt;":["empty?`,"],"`sequence |\u003e":["Enum.count(&(&1"],"`sequence` char_list,":["once"],"`set_word(&amp;1, &amp;2)`":["but"],"`shout?` because":["there"],"`shout?` etc":["to"],"`shout?` instead":["of"],"`shout?` rather":["than"],"`shout?` so":["that"],"`shout?` with":["pattern"],"`shout` method":["too,"],"`shout`, `silence`":["and"],"`shouting?/1`, and":["`question?/1`"],"`shouting?\\1` from":["ever"],"`shouting?\\1` is":["designed"],"`shouting?` !":["Why?"],"`shouting?` ,":["but"],"`shouting?` a":["publicly"],"`shouting?` and":["`silence?`?","`asking_politely?`","`all_caps?`,","`silence?`"],"`shouting?` didn't":["work"],"`shouting?` for":["instance."],"`shouting?` functions":["part"],"`shouting?` instead":["of","of"],"`shouting?` it":["might"],"`shouting?` leaving":["only"],"`shouting?` note":["that"],"`shouting?` returning":["`nil`"],"`shouting?` shouldn't":["check"],"`shouting?` to":["not"],"`shouting?` you":["don't","already"],"`shouting?`, `question?`":["and"],"`shouting?`, because":["those"],"`shouting?`, do":["you"],"`shouting?`, it":["was"],"`shouting?`, moved":["`silence?(speech)"],"`shouty?(\"42?\")` and":["`shouty?(\"\")`"],"`shouty?` asks":["whether"],"`shouty?` is":["interesting"],"`shouty?` seems":["like"],"`signature` on":["`anagram`"],"`silence?()`. You'll":["need"],"`silence?(speech) -\u003e`":["up,"],"`silence?/1` function":["?"],"`silence?/1`, `shouting?/1`,":["and"],"`silence?\\1` is":["constructed,"],"`silence?` and":["`scream?`","`shouting?`"],"`silence?` better":["as"],"`silence?` function.":["I'm"],"`silence?` in":["`hey`"],"`silence?` instead":["of"],"`silence?` might":["fit"],"`silence?` or":["`question?`.","`shouting?`."],"`silence?` public":["(`def`)?"],"`silence?` question":["is"],"`silence?` should":["stand"],"`silence?` which":["does"],"`silence?`, `question?`":["and"],"`silence?`, `shout?`":["etc"],"`silence?`. However":["I"],"`silence?`? If":["not"],"`silence` and":["`question`"],"`silence` clause":["in"],"`silence` cond":["clause"],"`silence` from":["`shouting?`,"],"`silence` function":["by"],"`silence` function,":["convention"],"`silence` regex":["is"],"`silent?(input)` more":["informative"],"`silent?` method":["looks","with"],"`silent?` rather":["than"],"`silent?` using":["`String.strip`"],"`silent?`, `all_caps?`":["and"],"`silent?`, `question?`":["and"],"`silent?`, `shouting?`":["and"],"`sing(start, start)`":["form"],"`sing/2` a":["bit."],"`sing/2` method":["`when"],"`sing/2` so":["you"],"`sing_verse` buy":["you"],"`sing_verse` clauses.":["Do"],"`sing_verse`, but":["for"],"`sing` could":["be"],"`sing` expect":["a"],"`sing` is":["with"],"`sing` pipeline":["into"],"`sing` using":["`Enum.map_join`,"],"`sing` you":["could"],"`size(phone)`. And":["pattern"],"`size(sentence) ==":["0`"],"`size` counts":["the"],"`size` function":["for"],"`skip` for":["ExUnit,"],"`some_call_that_returns_a_list() |\u003e":["Enum.map(fn"],"`some_range.first` to":["get"],"`some_range.last` to":["get"],"`something =":["something","something"],"`something?` but":["not"],"`something` to":["an","reflect"],"`sort_by` to":["parallel"],"`sort_chars` or":["something"],"`sort_codepoints(word)`. The":["same"],"`sort_word` function":["could"],"`sort` I":["believe"],"`sort` do":["you"],"`sort` method":["pull"],"`sort` so":["I"],"`sort` which":["returns"],"`sorted_base_letters ==":["sorted_letters(&amp;1)`"],"`sorted_chars`? I":["also"],"`sorted_letters`, but":["that"],"`split/1` that":["does"],"`split_sort` function,":["and"],"`split_sort`. I":["see"],"`split_words` could":["be"],"`split` defined":["on","on"],"`split` should":["really"],"`split` using":["`Regex.scan`,"],"`split`, but":["it"],"`split`, within":["a"],"`sprintf` that":["knows"],"`start_link` and":["can"],"`statement` or":["`message`)."],"`str` can":["be"],"`str` in":["`exchange`,"],"`str` variable":["in"],"`str`, only":["conversation,"],"`strain` exercise.":[":/"],"`strand` instead":["of"],"`string_to_list` if":["you"],"`string`, `array`":["and"],"`string`. The":["erlang"],"`string`? Some":["of"],"`strip_country_code` and":["`includes_country_code?`"],"`strip_country_code` function.":["I'd"],"`subscribe_no` and":["`area_code`?"],"`subscriber_number` definitely":["sound"],"`sunteenth` and":["`first_monday`."],"`sw`, what":["that"],"`symphony` would":["be"],"`t` =":["[2]","[]","[2]","[]","[2]","[]","[2]","[]","[2]","[]","[2]","[]","[2]","[]","[2]","[]","[2]","[]","[2]","[]"],"`t` instead":["of"],"`t` type":["in"],"`tail` and":["`f`"],"`take_one_down` as":["well?"],"`take_one_down` without":["sacrificing"],"`tally` as":["it's"],"`telling_me_something_unimportant?` doesn't":["actually"],"`ten_digit` because":["the"],"`test \"empty":["silence\"`)"],"`test_only_numbers` as":["otherwise"],"`thing.is_xpath?` either":["way"],"`thymidineToUracil` intended":["as"],"`tl`, but":["much"],"`to_anagram_key/1` function":["into"],"`to_binary/1`, it":["might"],"`to_char_list!/1` over":["the"],"`to_char_list`) to":["convert"],"`to_decimal`, and":["I"],"`to_list` but":["now"],"`to_list`). `Dict`":["is"],"`to_rna` clause":["--"],"`to_rna`, you":["seem"],"`to_string` on":["all"],"`to_words` and":["`cleanup`"],"`to_words` is":["done"],"`to_words` return":["a"],"`tokenize` regex":["slightly"],"`tokenize`, then":["you"],"`tokenizer` is":["doing."],"`tokenizer` no?":[":)"],"`tokinizer` could":["be"],"`total` and":["`left`"],"`total` can":["be"],"`total` in":["terms"],"`translate(number, @lance)":["|\u003e"],"`translation_dict[x]`, it's":["slightly"],"`true` :":["I"],"`true` and":["`false`"],"`true` as":["it","the"],"`true` at":["the","the"],"`true` case":["to"],"`true` for":["`\"1,","the","the"],"`true` is":["best"],"`true`, `false`":["or"],"`true`, because":["if"],"`true`. You're":["probably"],"`trunc()` to":["convert"],"`two_verse` into":["`verse(2)`."],"`u` is":["for"],"`u` modifier":["do"],"`u` to":["the"],"`u`. Regex":["does"],"`unequal_caseless?` give":["you"],"`unequal_pairs?` a":["name"],"`uniq` out":["into"],"`unless` return":["nil"],"`unquote(unquote(letter))` inside":["the"],"`unquote` thing":["for"],"`upcase?` helper":["method."],"`upcase` and":["`downcase`?"],"`upcase`d version":["of"],"`update/2` out":["of"],"`update_count` and":["`new_count`"],"`update_dict` a":["private"],"`update` as":["well."],"`update` at":["this"],"`update` function":["than"],"`update` was":["being"],"`uppercase?` and":["removed"],"`use Bitwise,":["only_operators:"],"`utterance` as":["a"],"`v0.10.0` from":["git","git"],"`v10.0.1` you":["can"],"`v10.0.1`, which":["helps"],"`valid_number` function,":["I"],"`valid_number` to":["capture"],"`validate/1` instead":["of"],"`validate` function":["to"],"`validate` to":["use"],"`value(iter) ::":["any`."],"`verse(0)`, maybe":["twice"],"`verse(1)` clause":["necessary?"],"`verse(2)`. Not":["so"],"`verse(n)` clause":["would"],"`verse/1`. My":["intent"],"`verse` (when":["is"],"`verse` clauses":["while","rather"],"`verse` clauses.":["Is"],"`verse` feels":["a"],"`verse` more":["readable,"],"`verse` now":["uses"],"`verse` to":["`sing_verse`"],"`verse`? (consider":["the"],"`violates_triangle_inequality?` function.":["I"],"`violates_triangle_inequality?`... sorting":["the"],"`void?` ...":["is"],"`void?` function":["given"],"`void?` seems":["more"],"`what` variable":["again"],"`whatever` is":["used"],"`when is_binary(target)`.":["That's"],"`when starting":["\u003e="],"`when` clause,":["could"],"`when` on":["the"],"`word ==":["\"\"`","String.upcase"],"`word-count` exercise":["got"],"`wordList` binding":["that"],"`word_list |&gt;":["Enum.filter...`."],"`word` and":["`predicate_and?`"],"`word` every":["time"],"`word` n":["times.","times"],"`words =`,":["you"],"`words(words)`, I'd":["expect"],"`words/1` seems":["unfortunate."],"`words_in_sentence`, where":["it"],"`words_match?/2` up":["and"],"`words_match?/2`. I'm":["still"],"`words` function,":["you"],"`words` in":["there?"],"`words` naming":["there"],"`words`, for":["instance),"],"`words`? Is":["there"],"`x !=":["String.downcase(x)","String.downcase(x)`:"],"`x =":["\"B\";"],"`x ==":["String.upcase(x)`:","String.upcase(x)`"],"`x+` matches":["1"],"`x..y` is":["just"],"`x` are":["just"],"`x` calling":["another"],"`x` into":["something"],"`x` is":["for"],"`x` isn't":["a"],"`x` would":["be"],"`x`. The":["only"],"`y` `year`":["wouldn't"],"`year` as":["well,"],"`year` wouldn't":["hurt"],"`yelling?` and":["`question?`"],"`yelling?` public":["(`def`)"],"`yelling` and":["`question`,"],"`yelling` as":["general"],"`yelling` regex":["I've"],"`yells?(input)` sounds":["like"],"`zip/2` is":["a"],"`zip` and":["not"],"`zip` cares":["at"],"`zip` could":["refer"],"`zip` function":["as"],"`zip` includes":["when"],"`zip` made":["that"],"`zip` to":["equalize"],"`zip`'s boneheaded":["behavior"],"`zip`, which":["inserts","would"],"`{ :ok,":["chars"],"`{\"\" =\u003e":["1}`"],"`{&1, 0}`":["by"],"`{a, b}`":["term;"],"`|&gt;` ).":["That's"],"`|&gt;` _(pipeline)_":["operator."],"`|&gt;` operator":["in"],"`|&gt;` operator.":["Each","It"],"`|&gt;` to":["make"],"`|&gt;`, and":["to"],"`|&gt;`, that":["would"],"`|&gt;`? That":["approach"],"`|\u003e +":["@durward`"],"`|\u003e Enum.filter_map(&match?(&1,":["{1,"],"`|\u003e Enum.map(&hd/1)`":["is"],"`|\u003e operator`":["trick,"],"`|\u003e` ,":["it"],"`|\u003e` and":["`==`"],"`|\u003e` as":["a","the"],"`|\u003e` at":["the","the"],"`|\u003e` creates":["a"],"`|\u003e` is":["just","less"],"`|\u003e` makes":["sense"],"`|\u003e` operator":["to","can"],"`|\u003e` operator,":["that"],"`|\u003e` pipelines.":["Same"],"`|\u003e`) and":["it"],"`|\u003e`. This":["would"],"`|` followed":["by"],"`|` in":["the"],"`|| 0`":["is"],"`||` and":["`&&`."],"`||` to":["perform"],"`~` instead":["of"],"`ìf`` …":["that's"],"a !=":["b","b"],"a \"*\"":["(it"],"a \"?\"":["at","at"],"a \"Grownup\"":["or"],"a \"better\"":["solution"],"a \"clean\"":["way"],"a \"dictionary\"":["was,"],"a \"falsy\"":["value"],"a \"greater":["than\""],"a \"just":["because"],"a \"larger\"":["symbol."],"a \"magic\"":["constant."],"a \"preprocess\"":["function"],"a \"talking":["forcefully"],"a \"understanding":["it"],"a \"word":["character\",","character\","],"a #capitalize":["thrown"],"a &":["(see"],"a 'general":["case'"],"a 'reimplementing":["the"],"a (imo)":["more"],"a *function":["capture*"],"a +":["b"],"a -\u003e":["a","is_superlist(t,"],"a 10":["digits"],"a 1024":["nucleotide"],"a 2-argument":["version"],"a 256-tuple":["lookup"],"a 400":["error."],"a \u003ccode\u003efold\u003c/code\u003e":["or"],"a @bertha":["response."],"a Beer":["module,"],"a Bitwise":["solution."],"a Boolean,":["so"],"a C#":["developer"],"a Elixir":["novice"],"a German":["word","word","word"],"a Graph":["record","record"],"a Greeting":["module"],"a Greeting?":["Is"],"a Hamming":["distance"],"a HashDict":["due","as","is","to","dictionary.","is,","is"],"a HashSet":["and"],"a I":["think"],"a Language":["module"],"a List;":["I"],"a ListDict":["lookup,"],"a PR":["open","https://github.com/kytrinyx/exercism.io/pull/465","merged","merged","to","to","to","to","when","for"],"a PR.":["I"],"a Range":["was"],"a Range!":[":)"],"a Regex":["is","that"],"a Regex,":["but","since"],"a Regex.":["I"],"a String":["or","with","type","in"],"a String.":["You"],"a String.empty?":["or"],"a Supervisor":["as","in"],"a Unicode":["general"],"a [blog":["article](http://pminten.github.io/blog/2013/09/12/elixir-patterns-abstract-data-structures/)"],"a [case](http://elixir-lang.org/docs/stable/Kernel.html#case/2)":["or"],"a [cute":["YouTube"],"a `+`":["at"],"a `/1`":["at"],"a `:math.pow()`":["function"],"a `:math.pow/2`":["function,"],"a `@augusta`":["attribute."],"a `@calista`":["before"],"a `@keyshawn`":["like"],"a `@roger`":["based"],"a `Beer.Verse`":["module"],"a `Char`":["module."],"a `Dict`":["data","function"],"a `Enum.map`":["or"],"a `HashDict.update`,":["as"],"a `HashDict`":["to","to","function","value"],"a `ListDict`,":["yes.","lists"],"a `List`":["before"],"a `MultiSet`":["and"],"a `Phrase.new`":["to"],"a `Phrase`":["module"],"a `Regex.scan`":["call"],"a `Stack_overflow`":["exception"],"a `Stream.map`":["and"],"a `String.Chars`":["implementation."],"a `String.replace`?":["Is"],"a `String.split`":["later."],"a `StringType`":["module"],"a `String`":["and"],"a `[]`":["clause"],"a `_`":["to"],"a `case":["input`,"],"a `case`)":["is"],"a `case`.":["`case`"],"a `compare(list_with_500_000_element,":["list_with_1_000_000_000_elements)`"],"a `cond`":["is","control","expression","clause","-","though."],"a `count/2`":["that"],"a `defp`":["when","using"],"a `do`":["block)"],"a `downcase`,":["within"],"a `else":["if`"],"a `filter`":["operation,"],"a `fn`":["is"],"a `foldl`).":["A"],"a `foo`":["that"],"a `get`/`put`":["for"],"a `guard`":["(or"],"a `hey/0`":["function"],"a `hey`":["function"],"a `map`":["operation"],"a `match_letters`":["function."],"a `phrase`":["argument"],"a `pow`":["function"],"a `priv`":["directory,"],"a `quiet?`":["function"],"a `reduce`.":["As"],"a `skip`":["for"],"a `split`,":["within"],"a `string`.":["The"],"a `true`":["at","at"],"a `u`.":["Regex"],"a `upcase?`":["helper"],"a `when`":["clause,"],"a `zip`":["function"],"a and":["b"],"a approach":["using"],"a backslash,":["so"],"a bad":["idea","idea,","thing","idea","number","idea","approach,","idea."],"a balance":["between","between"],"a base":["character","set"],"a best":["practice"],"a better":["name","name,","way","way","function","way","way","story","word.","way","name","name","control","way","name","match","way","name.","choice.","way","version","way,","name","way.","parameter","domain","name","name","Regex","choice","way","way","way","way","name?","name","solution","way","fit","way?","way","way","way","way","way","solution.","choice.","solution","explanation","solution","way.","idea","way.","way","way.","way,","way","way","`String.t`","way.","name","way.","way"],"a better,":["more"],"a better/more":["consistent"],"a big":["fan","flurry","deal,","disjunction","deal,","win","deal,","part","if-tree","deal","difference","problem","fan","enough","difference","enough","deal,","success!"],"a binary":["(sequence","out","for","(what","(\u003c\u003c","comprehension."],"a bit":["off","complicated","unnecessary","clearer.","clearer.","of","more","more","more","more","more","and","about","more....","complicated","excessive","ashamed","with","more","of","--","of","better","more","of","more","terse","cleaner","of","more","simpler","inconsistent","inconsistent","over","redundant,","more","confusing,","more","to","over-used","more","difficult","long","cleaner","of","without","of","bewildered","heavy","faster","better,","by","hard","cleaner.","about","and","too","odd","simpler","more","more","in","expensive.","confusing:","of","overkill","involved","more","more","better","shorter","more","of","confusing.","workaday,","too","overkill","squished","weird.","using","more","confused","surprised","better.","ugly.","complicated","proud","strange.","odd","as","with","more","more","more","weird","reminiscent","allergic","scary,","misleading","on","better","more","too","more","more","less","too","by","more","complex","without","annoyed","nicer","more","about","rusty","faster","monolithic.","curious","of","raw.","more","of","by","verbose","to","weird,","inconsistent","more","about","confusing.","to","confusing","more","of","weird.","more","harder","tricky","to","strange","too","weird.","to","as","more","of","and","confusing","to","of","with","to","of","of","more","wasteful."],"a bit,":["you","but","for"],"a bit.":["Also,","Also","You",":)"],"a bit:":["what"],"a bit?":["Is"],"a bit_size":["test."],"a bitstring":["into"],"a blank":["string","string."],"a blog":["post"],"a bonus,":["it"],"a boolean":["method","is","context),","NOT.","value.","result)"],"a boolean.":["Do"],"a boring":["boolean"],"a box":["here."],"a break":["from"],"a break)":["got"],"a brief":["break"],"a bug":["in","to","is","in","in"],"a bug.":["Crashing"],"a built-in":["way","type.","function","function","increment"],"a bunch":["of","in","of","of","more","of"],"a byte":["fold"],"a calculated":["value"],"a call":["to","to","to","since","to","to","to","to","to","to"],"a call,":["so"],"a callback":["which"],"a callback,":["which"],"a capture":["expression"],"a capture-literal":["rather"],"a carriage":["return"],"a cartesian":["plane,"],"a case":["pattern","input,","for","statement","that","_and_","like"],"a cast":["instead"],"a catch":["all"],"a catch-all":["clause"],"a catchall":["is","clause"],"a certain":["substring,","way,","input","way","preprocessing","meaning,","number"],"a chain":["rather","for","of"],"a chance":["to","to"],"a chance!":["Thanks"],"a change.":["Is"],"a char":["list,","list","list","list,"],"a character":["class","class","class","class","class","list,","in","based","class","list"],"a character?":["You"],"a cherry":["on"],"a choice":["between"],"a clarifying":["improvement.","thought"],"a cleaner":["separation","way","way","solution,","way"],"a cleaner/more":["expressive"],"a clear":["pipeline","sign-flip","story","need","reason","name.","focus"],"a clearer":["way"],"a close":["second","look"],"a clue,":["first"],"a code":["encapsulation","example?","example","smell."],"a coding":["style"],"a cohesive,":["single"],"a collection":["of","is"],"a collection,":["for"],"a colon":["after"],"a comma":["after"],"a comment":["to"],"a committer":["on"],"a common":["convention","pattern...accumulating","pattern","name","way"],"a community":["whose"],"a companion":["module.","module.\""],"a comparison":["with","of","word"],"a comparison.":["Doesn't"],"a compile":["error"],"a compiler":["error","warning"],"a complete":["Elixir"],"a completely":["different","useless"],"a complexity":["cost","of"],"a comprehension":["over"],"a concept":["of","of","of"],"a conceptual":["leap"],"a concurrent":["anagram","exercise"],"a cond":["block,","expression."],"a cond-switch.":[":)"],"a conditional":["of","and"],"a conditional)":["to"],"a conditions":["under"],"a confusing":["bundle"],"a consensus":["is"],"a consistent":["level"],"a constant":["(remember","or"],"a constant,":["a"],"a constant.":["Constants"],"a constraint":["on"],"a constructor":["of"],"a constructor).":["I"],"a convenience":["for","for"],"a convention":["in","in"],"a convention/preference":["thing."],"a conversation":["about"],"a cool":["trick,","way"],"a correct":["exception"],"a count":["without"],"a counting":["function."],"a counts":["dictionary."],"a couple":["of","of","of","of","of","of","of","suggestions","of","of","of","of","of","of","of","of","of","of","more","of","of","of","of","of"],"a crash":["of"],"a crazy":["solution"],"a custom":["reducer,"],"a custom,":["perhaps"],"a data":["structure"],"a datatype":["in"],"a day":["or"],"a decent":["compromise,"],"a decreasing":["range:"],"a deeper":["level"],"a def":["with"],"a default":["value","parameter","argument","value","syntax","if","value.","value","implementation","value"],"a deficiency":["of"],"a definition":["of"],"a deprecation":["warning."],"a descriptive":["name."],"a descriptively":["named","named","named"],"a developer":["reading"],"a dict":["with"],"a dictionary":["before","of"],"a difference":["either","would","from"],"a difference,":["and"],"a difference.":["I","I","In"],"a different":["order","animal,","set","approach","problem","name","way","nitpick","approach","variable","way?","level","behaviour","module","solution","angle,","level","function","private","implementation","order","way","way","concept,","way","solution","solution","way"],"a different-arity":["version"],"a diffferent":["name?"],"a direct":["port"],"a discard":["implementation"],"a discussion":["here"],"a distinct":["private"],"a doc":["comment"],"a docstring":["and"],"a doctest":["AFAIK."],"a domain":["concept.","concept."],"a double":["precision"],"a downcase,":["and"],"a downcased":["version"],"a drag,":["but"],"a dramatic":["difference"],"a empty":["string"],"a factor":["found"],"a factorial":["function,"],"a failure":["of"],"a fair":["bit","bit","point,","understanding?"],"a fairly":["simple","straightforward","good"],"a fan":["of","of","of","of","of","of","of","of","of","of","of"],"a far,":["far"],"a faster":["version"],"a favored":["line-break"],"a feature":["in"],"a feeling":["there's"],"a few":["functions","things:","days","options","of","times.","points:","other","weeks","days","things","ways","points:","more","lines","hours","with","days","days,","times","things","hd","hours,","minor","times.","things","weird","thoughts:","little","comments","more","exercises","pipes.","other","times","steps","ways","efficiency"],"a filter":["would","function."],"a filter,":["which"],"a filtering":["problem","function"],"a fine":["little"],"a fingerprint":["of"],"a first":["approach","submission!","stab"],"a fit":["if"],"a fit.":["A"],"a float":["to","and"],"a fn":["are"],"a fold":["requires","or"],"a for":["a"],"a form":["that","of","of"],"a format":["while"],"a formatting":["issue"],"a friend":["of","for"],"a full":["table","copy.","discussion"],"a fun":["language","exercise.","exercise."],"a function":["named","to","and","for","in","on","that","name!","(meaning","that","to","for","name","is","almost","name","which","closed","is","with","that","that","like","(`String.split`)","you","like","would","that","with","to","to","because","call","in","after","as","on","on","(for","is","to","automatically.","return","value,","for","`Enum.reduce`","guard.","clause","`next(iter)","`value(iter)","guard:","name","`map`","`foo`.","`(element,","`(acc,","`x`","`count`.","regarding","`foo`","wants","from","in","head","where"],"a function,":["like","for","instead","rather","rather","as","I"],"a function.":["(But","In"],"a function/method,":["and"],"a functional":["language","language.","language.","language","language"],"a future":["reader"],"a game":["changer.","changer."],"a general":["function","rule","replacement","function","convention","note,"],"a generalization":["of"],"a generic":["power","replacement"],"a genuine":["question,","question."],"a giant":["case","DNA"],"a git":["a"],"a glance,":["I"],"a go":["at"],"a good":["habit","idea","balance","idea","use","idea","candidate","deal","question,","variable","idea","change.","idea!","idea","way","argument","reference","solution,","balance","idea?","idea","use","time","point.","way","proxy","feature","feeling","name.","bit","point","solution,","alternative","addition,","habit","map-reduce","choice;","idea","candidate","sacrifice","way","name","idea","reason","sign","name","idea","idea.","exercice.","night's","feel","idea.","case","tip.","thing","reason","enough","fit","choice.","justification","idea","habit","habit","idea.","idea.","rule","choice.","reason","mental","idea,","chance","one.","name","idea","idea","way.","change","reason."],"a gorgeous":["language."],"a grasp":["on"],"a great":["idea!","fit!","start!","control","idea,","use","opportunity","use","fan","use","start","way","risk","Christmas","reason.","way","opportunity","exercise,","exercise.","one","naming"],"a greater":["scope."],"a group":["of"],"a guard":["--","clause","on","for","statement","clause","condition","when","the","clause,","clause.","clause"],"a guard.":["One","What","Looking"],"a habit":["of","of"],"a hack":["to"],"a handful":["of","of"],"a handy":["`reduce_with/3`"],"a happy":["feeling.","new"],"a hard":["time","time","time","time","time"],"a hash":["of","with"],"a hashdict":["update)."],"a hashset":["with"],"a hectic":["day"],"a helper":["function","function","private","function","function","for","function,","module","function"],"a heredoc":["would"],"a higher":["level","level","difficulty","order"],"a higher-order":["fold","function"],"a hint":["there","as","because"],"a hint,":["that"],"a huge":["fan","time","time","list.","list.","list.","list.","list."],"a hurry":["when"],"a hyphen":["and","isn't,"],"a key":["is","value","and"],"a keyword":["list.","in"],"a known":["issue","precedence"],"a lambda":["(anonymous","syntax."],"a language":["allowing","like","that","to","you've","that","like"],"a language,":["it"],"a large":["phone","data","list","list","list.","list","list","list"],"a largely":["unknown"],"a larger":["system,","magnitude,"],"a leaf":["a"],"a left":["folding","folding"],"a length":["check?","comparison."],"a less":["verbose","than"],"a lesser":["number"],"a letter":["present","which","you","it","and"],"a letter,":["a"],"a library":["is"],"a limitation":["of","when"],"a limited":["notion","list"],"a line":["after","instead","is","because","by"],"a link":["handy,","to","to","how"],"a list":["of","to","of","of","of","of","of","comparison","of","of","and","of","of","of","of","of","of","of","of","of","of","comprehension","ready","and","of","in","of","of","of","of","of","is","of","of","so","like","is","of","of","comprehension,","comprehension","comprehension","of","using","of","as","of","to","of","when","comprehension","comprehension","of","of","(you're","to","comprehension","of","(though","between","[1,","of","of","of","of","of","first,","[1,","of","of","of","of","of","by","of","so","of","of","comprehension","of","of","comprehension","of","of","and","`[[1,2],[3,4],[5,6]]`:","of","of","with","with","is","of"],"a list,":["but","but","right?","which","you"],"a list.":["It","`'ABC'","Interesting,","As","This","Which","With"],"a list?":["I'm","Going"],"a literal":["can't"],"a little":["bit","less","overkill","more","cleaner","more.","bit","odd.","more","better","strange","more","easier","bit?","verbose.","too","nicer","abstract.","about","more","more","better.","harder","performance-optimization","bit","more","more","confused","with","messed","more","easier","disappointed","better.","unsettling.","redundant","more","easier","bit,","better.","unnecessary","better,","awkward","bit","more","more","bit","uncommon","inefficient.","lazy/complacent","nicer.","bit","bit","too","too","trick","easier","weird","better,","bit","better.","bit","bit","better","bit","brittle","clearer","while","slower","bit","odd","less","simpler","skeptical","less","tricky","awkward","bit","bit","awkward","confusing","more","fuzzy","bit","slow","verbose","bit","non-obvious.","easier","regex.","bit,","easier","style","less","better?","more","bit","carried","muddled."],"a little,":["consider"],"a little...":["I"],"a local":["variable","variable,","name","name","name","variable,"],"a locally-bound":["anonymous"],"a logical":["\"flow\"."],"a lone":["literal"],"a long":["time","way","time,","time"],"a look":["at","on","at","at","at","at","at","at","at","at","and","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","so","at","at","at,","at","at","at","at","at","at"],"a look.":["I","Thanks!"],"a loop":["like"],"a lot":["of","for","here,","of","cleaner","of","better","of","of","normally.","cleaner!","of","more","of","of","by","about","coding","of","nicer,","of","about","clearer.","from","of","better.","more","more","of","cleaner","of","of","of","of","about","of","better","more","of","-","these","going","of","easier","of","easier","of","longer","of","of","of","of","more","of","of","of","of","messier.","of","of","of","faster","of","cleaner.","simpler","of","of","of","for","more","of","of","faster","closer","more","better","cleaner","of","of","quicker","of","more","clearer.","of","more","more","more"],"a lot!":["Submitted."],"a lot,":["and","got"],"a lot.":["I'm"],"a low":["effort"],"a lunch":["break"],"a macro":["that","that","but","after","works"],"a macro,":["but"],"a magazine":["feature"],"a main":["function"],"a major":["design"],"a manually":["created"],"a map":["is","to","over"],"a map,":["or"],"a map/map.":["The"],"a map/reduce,":["instead"],"a markdown":["accident..."],"a massive":["alias"],"a match":["value","instead"],"a math":["text)?"],"a matter":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"],"a message":["contains","with","to"],"a method":["for","`extract_word_frequencies(words)`.","convention:","of","on","in","name.","call","style"],"a method.":["I"],"a micro-level,":["but"],"a million":["small","1","lists","lists"],"a minimally":["duplicative"],"a minimum":["of"],"a minor":["nit.","point","point,","style","real","stylistic"],"a mistake":["in","(my"],"a mistake,":["because","maybe"],"a mix":["of"],"a mixed":["approach."],"a module":["name?","with","and","then","instead?","and","method","called","that","name","name","doc","is","using","with","attribute","as"],"a moment":["that"],"a monospaced":["font,"],"a monster,":["so"],"a moot":["point.","point,"],"a more":["general","flexible","flexible","clear","functional","elegant","descriptive","interesting","natural,","verbose","semantically","succinct","conceptually","powerful","consistent","clear","terse","straightforward","meaningful","complex","intention-revealing","descriptive","OO","OO","descriptive","erlang/elixir","descriptive","consistent","functional","linear","context-sensitive","elegant","realistic","general","general","idiomatic","straightforward","concise"],"a much":["better","shorter","simpler","bigger","simpler","better","simpler","shorter","more"],"a multi-clause":["function"],"a multi-line":["string"],"a multi-word":["method"],"a naive":["implementation"],"a name":["like","to","you","describing","for","that","to","with","to","for","to","to","in","to","I","to","that"],"a name.":["In"],"a named":["function","function","lambda","function","function?","function","function","function","function.","function"],"a nap":["and"],"a native":["`sprintf`"],"a natural":["fit"],"a nearly":["pure"],"a neat":["trick.","[expr"],"a neater":["solution"],"a necessary":["prefix","prefix"],"a need":["for","for"],"a negative":["test."],"a nested":["if"],"a net":["win."],"a neverending":["discussion"],"a new":["version.","version","version","module","requirement","version.","value","version","version.","version.","version.","version.","version.","version","version.","shorthand","value","iteration","version","version.","version","iteration.","iteration.","version,","version","version","version","HashDict,","version.","line","syntax","name","version","version","anonymous","version","version","version","version.","version","HashDict","version","version","version,","version.","copy.","students","iteration","solution","version","language.","interation.","version","version","version.","version","`Graph`.","version.","test:","version","stack","stack","version","version","version","version.","version.","version","frame.","version","version!","stack","copy","copy","one.","object","leaf","node","version.","version","stack","iteration.","version.","stack","`is_superlist/4`","list","test?"],"a new,":["modified"],"a newbie":["to","mistake,","to","to"],"a newline":["in","like","in","character","before"],"a nice":["rule-based","solution.","alternative","readable","method","solution,","balance","job!","domain","trick","visual","function","way","side-effect.","convention"],"a nicer":["solution","way","way"],"a nil":["check","check","argument).","(or","field"],"a nit":["about"],"a nitpick":[":-)","it","after"],"a nitpick,":["more","I"],"a non-ASCII":["character"],"a non-English":["word"],"a non-empty":["string","string"],"a non-imperative":["language."],"a non-pattern":["matching"],"a noob":["mistake","here,"],"a normal":["\"do"],"a note":["about","to"],"a notion":["of"],"a novel":["approach"],"a null,":["which"],"a number":["of","of","of","of","of","or","is","by"],"a numbers-only":["input"],"a one":["time","time","lime"],"a one-line":["change"],"a one-liner":["otherwise","syntax.","by"],"a one-liner,":["which","or"],"a pain":["to"],"a painful":["memory),"],"a parallel":["structure"],"a parameter":["also","and","list)."],"a parameter,":["then"],"a parameter.":["I'm","There"],"a pareil":["en"],"a parser":["error."],"a part":["of","of","of"],"a partially":["applied"],"a particular":["reason","technique,","instance","need","order?","order.","solution","invariant","dict"],"a particularly":["expressive"],"a patch":["for","to"],"a pattern":["match","to","matching","matched","match","match","I'm"],"a pattern-match":["in","for"],"a peak":["at"],"a perfect":["solution"],"a perfectly":["lovely"],"a performance":["benefit","win.","benefit","problem","problem"],"a personal":["preference","preference","taste"],"a phone":["number..."],"a phrase":["rather"],"a phrase.":["I've","The"],"a pipe":["in"],"a pipe:":["`String.strip(str)"],"a pipeline":["(`something","massaging","(a","might","as","though."],"a pipeline?":["Is"],"a pitfall":["you'll"],"a pitty":[",is"],"a place":["I"],"a plain":["if."],"a play":["with"],"a plural":["function"],"a point":["for","of","where"],"a point.":[":)"],"a policy":["of"],"a positive":["test"],"a possible":["anagram.","alternative"],"a potential":["means","divisor"],"a practical":["sense"],"a predicate":["method/function","function","function","method","method,"],"a preference":["on"],"a premature":["optimization."],"a pretty":["good","cool","common","fiendish","simple","cool","arbitrary","powerful","general"],"a previous":["nit,","revision,","iteration,","version"],"a prime,":["so"],"a private":["method","check","function","function","function","function.","function.","helper","function,","function","named","module","function","method","function","function.","helper","function.","module","module"],"a problem":["--","of","(unless","that","but","with","into","here,","for","or","I","that","with","with","in"],"a problem,":["gives","but"],"a problem.":["And"],"a process":["while"],"a process,":["I'm"],"a programming":["term"],"a project":["context."],"a prominent":["feature"],"a proof":["of"],"a proper":["response.","name","name","function?"],"a properly":["named"],"a protocol":["with","mostly","so","so"],"a protocol?":["Interesting,"],"a proxy":["to"],"a pseudo-type":["system!"],"a public":["function","method.","method","method.","function?","one)","function,"],"a publicly":["usable"],"a pull":["request!).","request","request","request?","request"],"a purely":["recursive"],"a quard":["on"],"a question":["(ie","with","mark","like","mark","mark,","mark.","mark?","mark","mark","by","mark","mark","mark","mark:","mark,","mark,","mark"],"a question,":["like"],"a question.":["But","it"],"a question?":["\""],"a quick":["search","note.","note"],"a quite":["a"],"a quote":["block"],"a range":["as","like","to","first).","to","first","with","into","since","`1..4`","and"],"a range.":["I'm"],"a range...":["&"],"a range:":["yes,"],"a rather":["weird","simple"],"a readable":["solution."],"a reader":["has","can","to","unfamiliar"],"a reader,":["but"],"a ready":["built"],"a real":["benefit","project","Elixir","world","world","curveball","life","good"],"a real-world":["situation"],"a really":["interesting","good","good","complicated","good","messy","good"],"a reason":["you","to","for","for","for","you","you","why","you",":)","for","you","you"],"a reason,":["if","so"],"a reasonable":["answer"],"a record":["and","`Range[first:","that","(though","with"],"a recursion":["which"],"a recursive":["(re)implementation","solution","algorithm","function.","function","callback"],"a redesign":["that"],"a reduce":["based","pattern.","you"],"a reducing":["one."],"a redundant":["named","method"],"a refactor":["of"],"a reference":["for","to"],"a regex":["you","that","is","and","in","in","which","that","for","instead","at","to","felt","to","(`\\p{}`","expert,","`\\p{L}`"],"a regex).":["You"],"a regex,":["checking","so"],"a regex.":["Note"],"a regex?":["Doesn't"],"a regular":["`!something","expression","expression."],"a reimplementation":["of"],"a relatively":["new"],"a remnant":["of"],"a replacement":["right"],"a requirement,":["but"],"a residual":["from"],"a resource":["you"],"a restriction":["in"],"a resubmission":["of"],"a result":["it","of"],"a reusable":["module."],"a reverse":["of","at","of"],"a reversed":["list"],"a revised":["version,"],"a revision":["with","that"],"a right":["one.","fold.","fold."],"a roadblock":["though,"],"a route":["like"],"a ruby":["case"],"a rubyist":["from"],"a save":["point."],"a scan":["on"],"a school.":["Generally,"],"a search":["for"],"a second":["parameter","parameter","clause","module!","clause","word","opinion","generator","opinion","spec","there.","shorthand"],"a segment":["of"],"a sense":["of"],"a sentence":["==","is","is","is","contains"],"a sentence,":["then"],"a separate":["method?","module?","module)?","module?","concern.","module?","function","function","clause","function","module?","module?","helper","module","module","method","private","function?","module,","module","module,","module","function","Query","module","and","module","markup","function."],"a series":["of","of","of","of"],"a shame":["to","as"],"a shifty":["solution,"],"a short":["`fn`","video"],"a shorter":["way","way"],"a shorthand":["function"],"a shot":["tonight"],"a shout":["is"],"a shout.":["Consider:",":"],"a side":["project","effect"],"a sign":["they","they"],"a significant":["name"],"a silence?":["method"],"a similar":["approach,","approach","solution,","construct","solution","syntax","approach","way."],"a simple":["way","statement,","way","comparison","regex","benchmark.","keyword","constructor","exercise,","native"],"a simpler":["`do_count`","version:","`String.reverse`","way","way","way","way","and","way.","syntax.","solution","solution"],"a single":["one.","expression","line","character,","method","method","\"right\"","function","usage,","line\"","private","pipeline","argument","function,","pass.","nucleotide.","return","line","line:","line:","line","function;","line.","line:","character,","traversal","string","space.","expression","line","line","character.","expression","verse","line","string","letter","pass?","word,","traversal","place","regex","line","pass?","process","reference.","reduce.","reference...","binary.","value,","word?","word?","place.","reverse","clause","line.","line,","test","line","`cond`","clause.","list.","char?","line","element","line","element"],"a single,":["consistent"],"a sledgehammer":["that"],"a slice":["or"],"a slight":["trick","difference"],"a slightly":["more","different","quicker","more","difference","simpler","different","different","more"],"a small":["amount","comment.","example","one.","suggestion:","performance","tuple","`@dejon","number","boo-boo","comment."],"a sneek":["peek"],"a solid":["solution."],"a solution":["that","that","as","in","to","I","with","which","like"],"a solution.":["I"],"a somewhat":["subtle"],"a song-generator":["for"],"a space":["between","in","tradeoff).","and"],"a space,":["letter,"],"a special":["syntax","kind","case.","case.","case,"],"a specialised":["list"],"a specific":["atom","response","dictionary,","implementation","reason","implementation."],"a speech":["or"],"a split/scan":["and"],"a stab":["at"],"a stack":["overflow,","overflow","overflow","overflow","overflow"],"a standard":["function","function","solution","solution"],"a statement":["by","is","module."],"a step":["from","in","further","back","further"],"a straight":["forward"],"a straightforward":["space/time"],"a strange":["thing"],"a strict":["equality"],"a string":["ends","contains","is","contains","instead","in","with","in","as","ends","that's","though","of","is","is","only","of","to","to","and","on","to","(an","ends","isn't","for","like","\"*\"","without","rather","is","into","into","to","requires","to","and","to","replace","contains","without","is","in"],"a string\".":["I"],"a string)":["won't"],"a string,":["I","and","I","`replace`","would","not"],"a string.":["Would","It","I","You"],"a strong":["aversion","defender"],"a stub":["submission"],"a student":["here"],"a stupid":["mistake,"],"a style":["as","thing,","thing,"],"a stylistic":["difference?"],"a subjective":["minor"],"a sublist":["simply"],"a subtle":["thing."],"a suggested":["nitpick"],"a suggestion":["I"],"a super":["concrete"],"a superfluous":["wrapper...&amp;1"],"a supervised":["structure"],"a supervisor":["for"],"a symbol":["from"],"a synonym":["for"],"a syntax":["like:","error.","error.","error","error."],"a tad":["confusing","easier"],"a tail":["recursive","recursive","recursive","recursive","recursive","recursive","recursive","recursive","recursive"],"a technique":["you","using"],"a teenager":["thinking","with"],"a template":["without"],"a tension":["between"],"a term":["in"],"a terribly":["complex","complex","inefficient"],"a test":["which","for","that","case.","fails)","since","with","for","that","that"],"a text":["editor"],"a text.":["Try"],"a text?":["Would"],"a the":["Unicode"],"a thing,":["and"],"a thorough":["Nitpick"],"a through":["z)."],"a tight":["loop."],"a time":["where"],"a time.":["Is"],"a tiny":["bit","nit.","bit","way.","bit","bit","thought"],"a tiny,":["irrelevant"],"a tip":["for"],"a tip.":["Elixir"],"a ton":["of"],"a too":["long"],"a total":["elixir","Elixir"],"a tradeoff":["between","between","between","for"],"a tradeoff,":["using"],"a tradeoff.":["If"],"a trailing":["question"],"a transformation":["from"],"a translation":["for"],"a tree":["of","and"],"a trick":["very","I","from"],"a triple-quoted":["string"],"a true":["in"],"a truly":["generic","\"boolean\""],"a truthy":["or"],"a try":["now."],"a tuple":["instead","with"],"a tuple.":["I","If"],"a typecheck,":["its"],"a typo":["in","for","rather"],"a unified":["list"],"a unique":["list"],"a useless":["optimization,"],"a user":["is"],"a using":["the"],"a valid":["English","choice","point.","iolist,","type"],"a validation":["method","check."],"a value":["is","is","that"],"a value,":["not"],"a variable":["that","correctly","name.","before","before","(you","name","name","name"],"a variable.":["That's"],"a verse.":["It's"],"a version":["with","of","with","of","of","of","where","that"],"a very":["simple","interesting,","similar","beginner","inelegant","pronounced","large","magic","small","useful","minor","general","useful","small","good","general","bad"],"a viable":["tactic"],"a waste":["of"],"a way":["to","to","to","to","not","to","to","to","to","to","to","to","to","to","to","that","that","to","to","to","to","to","to","that","of","to","to","to","to","to","yet","to","to","to","to","to","to","to","to","to","to","to","you","to","to","of","to","to","to","to","to","that","that","for","to","to","to","to","to","to","around","to","you","you","you","that","to","to","do","as","to","to","to","as","you"],"a way,":["but"],"a weak":["grasp","spot"],"a wee":["bit"],"a week":["than"],"a weird":["space","one."],"a well":["named"],"a well-named":["function","function"],"a while":["to","to","longer,","back.","since","to"],"a while,":["but"],"a whirl,":["thanks"],"a whitespace-only":["string?"],"a whole":["new","mess","new","new"],"a whole,":["it"],"a wide":["variety"],"a win,":["since"],"a wonderful":["thing."],"a word":["array","in","and","out","like","like","contains","and","char","character","is","character","like","character","character.","character"],"a working":["version,","alternative."],"a writer,":["it"],"a wrong":["answer)."],"a wrong,":["which","which","which","which","which"],"a yell":["or"],"a zero":["tolerance"],"a zipped":["variable"],"a |\u003e":["b`"],"a, b":["}"],"a, b,":["m,","a_len,"],"a-z, 0-9":["or"],"a-z. I'm":["guessing"],"a-z? If":["you"],"a-zA-Z stuff":["so"],"a-zA-Z. If":["you"],"a..b =":["1..4"],"a_len, b_len)`.":["That"],"a_len-1, b_len)`,":["if"],"abandoned that":["is"],"abandoned the":["approach"],"abbreviate this":["`cond`."],"abbreviate, not":["saying"],"abbreviated (descrs":["instead"],"abbreviated words,":["possibly"],"abbreviations \"lc\"":["and"],"abbreviations in":["code"],"abbreviations\"... but":["it"],"ability to":["use"],"able to":["remove","use","support","remove","sing","do","rephrase","replace","simplify","make","get,","remove","do","do",":)","use","help","do","figure","avoid","think","see","do","support","use","pass","use","find","see","nitpick","contribute,","take"],"about \"functions\"":["not"],"about \"style\"-related":["issues..."],"about *why*":["you"],"about 2":["times","times"],"about 5":["orders"],"about DNA.":["I"],"about Dict.":["Since"],"about Dict.update,":["so"],"about Elixir":["when","with","not"],"about Elixir's":["attribute","\"bang\""],"about Elixir.":["Hmmm.","I"],"about Elxiir":["and"],"about Enum.reduce":["as"],"about Erlang":["/"],"about HashDict.":["I'm"],"about Process.register/whereis,":["which"],"about Streams.":["Glad"],"about String.ends_with/1":["?"],"about \\w":["in"],"about _why_":["does"],"about `(filter":["&mutation?/1)`"],"about `Dict.update/3`,":["especially"],"about `Enum.count/2`?":["You"],"about `Enum.count`":["and","and"],"about `Enum.reduce`":["is"],"about `HashDict.update(dict,":["word,"],"about `HashDict.update/4`,":["what"],"about `HashDict.update/4`.":["Code"],"about `HashDict.update`,":["I'll"],"about `Regex#replace`?":["Either"],"about `Regex.scan`,":["since"],"about `String.downcase`":["being"],"about `String.upcase`":["to"],"about ```":["Dict.update"],"about ```HashDict.update```.":["It"],"about ```defp```":["yet."],"about `bitstring_to_list`:)":["I"],"about `cond`":["in","."],"about `cond`.":["Thanks"],"about `def`.":["What"],"about `defp`.":["Just"],"about `ends_with/2`,":["using"],"about `line_number`,":["`prefix`"],"about `list`":["and"],"about `new`":["and"],"about `reverse`":["or"],"about `shouting?`":["returning"],"about `to_list`":["but"],"about `||":["0`."],"about a":["lot","string","better","string"],"about abstracting":["the","the"],"about adding":["one","documentation?","a"],"about an":["assignment"],"about any":["other"],"about arbitrary":["beverages,"],"about as":["optimised"],"about assignments.":["I"],"about better":["ways"],"about breaking":["each","out"],"about characters":["other"],"about client":["code."],"about combining":["the"],"about coming":["up"],"about concise":["at"],"about cond,":["I"],"about considering":["list"],"about containing":["all"],"about def":["vs."],"about defining":["custom"],"about descriptive":["names"],"about discussion":["being"],"about doctests!":["Thanks!"],"about doing":["the","that","this?"],"about elixir":["from","the"],"about exercism.io":["is"],"about extracting":["the","the","them"],"about filtering":["blank"],"about finding":["these"],"about getting":["a","the"],"about giving":["meaningful"],"about good":["names,"],"about half":["as"],"about handing":["bad"],"about having":["a","two","`nucleotide_counts`"],"about hd":[":)"],"about hiding":["the"],"about how":["to","you","you","lists","to","this","pattern"],"about implementing":["your","`discard`","`discard`"],"about in":["my","Ruby:"],"about indentation":["when"],"about iolists.":["I"],"about it":["that","in",":)","and","and","again","loudly","completely,","in"],"about it,":["the","first","but","but","`if"],"about it.":["So","Hint:","I"],"about join,":["I'll"],"about just":["using","iterating"],"about line":["20!"],"about list":["comprehensions?"],"about making":["the","silence?(x),","them","the","some","the"],"about matching":["for"],"about me":["learning"],"about memoization:":["http://www.haskell.org/haskellwiki/Memoization."],"about modules":["too"],"about moving":["the","the","those"],"about my":["answer?"],"about naming":["and","all"],"about naming.":["Two"],"about now?":["Thanks,"],"about opinion":["as"],"about other":["ways","things."],"about passing":["a"],"about pattern":["matching","matching","matching."],"about performance":["here.","optimizations,","when"],"about pipelining?":["It's"],"about previous":["version."],"about private":["functions","methods?"],"about protocols":["and"],"about providing":["additional"],"about regexes":["on"],"about regular":["expressions,"],"about reimplementing":["`map`,"],"about sanitizing":["the"],"about sentence":["instead"],"about short":["DNA"],"about something":["like","liiiiike"],"about splitting":["anagrams?"],"about stack":["traces."],"about statements":["he"],"about streaming.":["That's"],"about string":["manipulation"],"about strings":["in","right"],"about stripping":["the"],"about tail":["recursion."],"about that":["as","operator.","module","(and","while","when","annoying","in","a","more","too.","as"],"about that!":["Still"],"about that,":["but","but","but"],"about that.":["I","I","Let"],"about that?":["If"],"about the":["pattern","pattern","`str`","is_anything_else?","imports","sequence","order","code","String.ends_with?/2","other","public","smallest","mixed","predicate","domain","Statement","functions","implemented","`Regex.scan`","`List`","difference","regex,","|&gt;","interpolated","pipeline","approach","Single","`@`","value","value","protocol","single","order","name","special","name","same","guard","successive","`size`","list","80","`do`","notEmpty","parentheses","`|\u003e","order","contents","formatting.","zipper","names","different","error","repetition","Java","implementation","different","\"if\"","if","input","`input`,","teenager,","other","algorithm","`elem`","problem,","reason","input","shouting","question","&","best"],"about them.":["It"],"about these":["string"],"about things":["people"],"about this":["too","assignment,","implementation.","discussion","solution","syntax.","and","one,","to","is","one.","implementation"],"about this,":["the","it's"],"about this.":["I'd","I"],"about this:":["http://exercism.io/submissions/51f687daafd6c47513000220"],"about this?":["`map(arr,"],"about to":["say","submit"],"about trailing/leading":["dots"],"about trimming":["the"],"about twice":["as"],"about using":["`\\w+`","a","the","params","custom","Dict","single","`reduce`..","`Dict.update/3`","either"],"about utf-8,":["so"],"about vertical":["vs"],"about wether":["those"],"about what":["you","Bob","a","kind","you","type","you're","exercises","they","good"],"about when":["they"],"about whether":["it's","`count`"],"about why":["you","I"],"about with":["the"],"about yelling":["in"],"about your":["implementation","regex:"],"about, I":["am"],"about, I'll":["wrap"],"about}. I":["think"],"above and":["beyond"],"above each":["condition."],"above it":["so"],"above questions":["-"],"above that":["you"],"above, or":["you"],"abroad without":["my"],"absence of":["character"],"absolute genius.":["I"],"absolutely better":["than"],"absolutely have":["to"],"absolutely implement":["discard"],"absolutely new":["paradigm"],"absolutely right.":["Fixed"],"absolutely. Thanks":["for"],"abstract the":["tests","`true`"],"abstract those":["conditions"],"abstract way:":["clauses"],"abstract. I":["had"],"abstracted away":["to"],"abstracting `true`":[":"],"abstracting out":["the"],"abstracting the":["various","various"],"abstraction from":["others"],"abstraction of":["Message"],"abstraction that":["the"],"abstraction the":["function"],"abstraction you're":["using"],"abstraction. As":["for"],"abstractions be":["more"],"abstractions going":["on"],"abstractions such":["as"],"abstractions to":["solve"],"abuse of":["them),"],"acc +":["1`","1","elem(table,","1)","1","1)","1)","1)","1)"],"acc -\u003e":["acc","[x|acc]","acc","append(acc,","append(acc,","append(acc,"],"acc ::":["any`"],"acc \u003c\u003c\u003c":["1"],"acc else":["acc"],"acc when":["c"],"acc |\u003e":["Enum.reverse"],"acc) -\u003e":["acc`,","acc"],"acc), do:":["acc","acc","do_reverse(t,","acc","do_count(t,"],"acc, &append/2)`":["?"],"acc, _),":["do:","do:"],"acc, else:":["acc"],"acc, f),":["do:","do:"],"acc] else":["acc"],"acc]` as":["`[function.(x)"],"acc`, this":["one"],"accent on":["e"],"accept a":["list?","single"],"accept and":["return"],"accept anything":["that"],"accept both":["string"],"accept different":["parameters"],"accept that,":["then"],"accepted, or":["nitpicked"],"accepted. I":["really"],"access it":["directly"],"accessed explicitly,":["I'll"],"accessed it,":["unlike"],"accessed outside":["the"],"accessible and":["can"],"accessible on":["the"],"accessible. Anyway,":["I"],"accessing *everything*":["through"],"accessing attributes":["of"],"accident. I'll":["think"],"accidental errors":["that"],"accidental push":["for"],"accidental submission":["mid-refactor.","mid-refactor."],"accidentally calling":["the"],"accidentally reintroduced":["the"],"accidentally submitted":["this"],"accidentally submitted.":["Disregard"],"accidentally? This":["code"],"accomplish the":["same","same","same","goals"],"accomplish this":["fairly","more","with","with"],"accomplish what":["you're"],"accomplished using":["a"],"according possible":["checks."],"according to":["them","the","the","Google","`\\w`"],"accordingly :)":["Anyway"],"account that":["you're"],"accumulate and":["strain"],"accumulate at":["the"],"accumulate values?":["That's"],"accumulate([ element":["|"],"accumulate([], _function,":["acc),"],"accumulate(collection, function)":["do"],"accumulate(collection, function,":["[])"],"accumulate(tail, function,":["["],"accumulate(x, wordList)}":["end)"],"accumulation is":["fixed."],"accumulator List":["Words"],"accumulator and":["reverse","a","function"],"accumulator as":["the"],"accumulator could":["be"],"accumulator for":["each"],"accumulator in":["`accumulate/3`"],"accumulator is":["and","a","just","the","the"],"accumulator list":["(the"],"accumulator only":["the"],"accumulator parameter":["there."],"accumulator pushing":["new"],"accumulator to":["the"],"accumulator values":["without"],"accumulator. Grrrr)":["And,"],"accumulator. See":["[this"],"accumulator. Typically":["this"],"accumulators if":["the"],"accumulators. I":["definitely"],"accurate and":["lining"],"accurate error":["reporting"],"accurate. I":["think"],"accurately express":["the"],"accurately follow":["the"],"accurately what":["it's"],"accusatory and":["put"],"achieve (unlike":["all_caps?"],"achieve the":["same","remove","same","same"],"acknowledge that":["scenario."],"acknowledged that":["Ruby"],"across it":["more"],"across private":["modules"],"across the":["technique"],"across to":["the"],"acting on":["what"],"action in":["the"],"action method,":["you"],"action(0), do":["\"Go"],"action(beer_count), do":["take_one_down(beer_count)"],"active object.":["That's"],"active on":["the"],"actively advocate":["this"],"acts as":["the"],"actual *reason*":["for"],"actual `word`":["and"],"actual ampersands,":["without"],"actual function":["formatting."],"actual implementation":["in"],"actual incrementing":["done"],"actual letters":["in"],"actual recursion":["pattern"],"actual response":["as"],"actual sequence":["of"],"actual use":["case."],"actual work.":["While"],"actually *testing*":["for?"],"actually I":["think"],"actually a":["list","list.","typecheck,","bit","pretty","simple"],"actually adds":["distance?"],"actually already":["in"],"actually an":["improvement."],"actually assigned":["the"],"actually be":["the","passed"],"actually been":["a"],"actually call":["in"],"actually care":["about"],"actually change":["```"],"actually considered":["changing"],"actually contains":["any"],"actually converting":["list"],"actually decode":["the"],"actually delegates":["to"],"actually did":["look"],"actually didn't":["find"],"actually do":["anything"],"actually does":["not","more"],"actually doing":["some"],"actually done":["it,"],"actually enforcing":["a"],"actually exists.":["You're"],"actually explained":["the"],"actually extract":["the"],"actually fails":["2"],"actually find":["anything"],"actually for":["a"],"actually from":["my"],"actually go":["for"],"actually happening":["there."],"actually hate":["it"],"actually have":["not","a"],"actually hurts":["performance"],"actually implemented":["in"],"actually is":["necessary"],"actually it":["seems"],"actually just":["be"],"actually like":["the","that","to","the"],"actually looked":["into","through"],"actually made":["that"],"actually mean":["in"],"actually meant":["the"],"actually meet":["the"],"actually my":["first"],"actually need":["to","a","to","`reduce_iter`,"],"actually not":["putting"],"actually only":["need","need"],"actually pre-pending":["the"],"actually pretty":["much"],"actually quicker":["but"],"actually quite":["readable"],"actually rarely":["needed."],"actually reading":["through"],"actually reads":["slightly","better"],"actually referring":["the"],"actually start":["with"],"actually still":["think"],"actually surprised":["to"],"actually testing":["for?"],"actually tests":["to"],"actually tests.":["It's"],"actually the":["idea"],"actually thinking":["of"],"actually thought":["of","that"],"actually took":["a"],"actually touching":["every"],"actually translates":["to"],"actually use":["that"],"actually used":["that"],"actually uses":["three"],"actually wanted":["to"],"actually was":["another"],"actually what":["it"],"actually works":["for"],"actually) pointed":["out"],"actually, I":["should"],"actually, instead":["of"],"actually. This":["is"],"adapted to.":["Good"],"add String.downcase":["to"],"add `?0`":["so"],"add `@brisa`":["module"],"add ```String.strip```":["to"],"add `not_same?/2`":["inside"],"add `respond_to`":["method?"],"add a":["`@roger`","silence?","`@augusta`","different-arity","guard","test","question","private","comment","note","student","little","new"],"add adjacent-mine":["numbers"],"add all":["the"],"add an":["`if`"],"add another":["1.000.000","1.000.000"],"add any":["additional"],"add can":["look"],"add help":["to"],"add is":["that"],"add it":["directly","in","to","to"],"add modularity":["for"],"add new":["rules."],"add one":["works,"],"add parentheses!":["I've"],"add some":["tested","tested","more"],"add space":["and"],"add students":["once"],"add that":["to","to","I","to"],"add the":["`@brandon`","@lance","content","extra"],"add them":["to"],"add things":["to"],"add those":["semicolons"],"add to":["the","the","the"],"added `String.blank?/1`":["or"],"added `String.downcase`":["to"],"added a":["nil","nil","doc","new","few"],"added an":["indentation"],"added and":["submitted"],"added another":["version"],"added busywork":["to"],"added documentation!":["As"],"added function":["defs"],"added in":["the"],"added it.":["Consider"],"added more":["anonymous"],"added parentheses":["in"],"added pattern":["matching"],"added to":["the","the"],"added unicode":["support"],"added. I":["think"],"adding @travis":["comments"],"adding a":["`quiet?`","question","redundant","second","little","`/1`","version","space","lot"],"adding an":["element,","else","element","element"],"adding and":["'if',"],"adding another":["quiet","Enum"],"adding documentation?":["Also,"],"adding exercises":["for"],"adding ifs":["and"],"adding in":["guards/pattern","the"],"adding line":["5"],"adding one":["more","more"],"adding some":["parentheses","additional"],"adding students":["to"],"adding that":["range"],"adding the":["digits","question"],"adding this":["in"],"addition of":["the"],"addition to":["`sing(start,","the"],"addition, I":["think"],"addition, even":["if"],"additional feedback":["when"],"additional information":["(as"],"additional memory":["is"],"additional regex":["to"],"additional test":["prior"],"additionally contains":["a"],"addressing a":["teenager"],"adds a":["translation"],"adds distance?":["By"],"adds real":["value"],"adds slightly":["more"],"adds some":["self-documentation"],"adds something":["like"],"adds to":["readability,","the"],"adds unnecesary":["code."],"adhere the":["conventions."],"adjacent capital":["letters"],"adjacent-mine numbers":["in"],"adjustment towards":["a"],"admin, all":["I"],"administrator, and":["they"],"administrators of":["exercism.io"],"admire the":["munging"],"admit regular":["expressions"],"admit that":["after"],"admittedly your":["code"],"adopting recursion":["in"],"advance for":["your"],"advanced used":["mainly"],"advantage compared":["to"],"advantage initializing":["`HashDict.new([])`"],"advantage is":["that"],"advantage of":["character","it's","`[","`flat_map`.","the","that","those","being","tail"],"advantage to":["doing"],"advantages of":["what"],"advantages that":["outweigh"],"advice NOT":["to"],"advice from":["my"],"advice! I've":["submitted"],"advice, but":["I"],"advice, since":["you"],"advice, thank":["you."],"advice. How’s":["this"],"advice. I":["didn't"],"advice. Now":["you"],"advices. I":["just"],"advisable, it":["doesn't"],"advise to":["remove"],"advocate this":["style."],"advocated for":["dispensing"],"aesthetic perspective":["this"],"aesthetic preference":["would"],"afraid of":["making"],"after I":["pulled"],"after I've":["moved"],"after Regex.scan,":["so"],"after Ruby":["when"],"after `##":["Examples`"],"after `String.downcase`":["was"],"after a":["discussion","pipe.","bit","break)"],"after all":["(and"],"after all.":["Glad"],"after beating":["my"],"after do":["like"],"after doing":["the"],"after following":["your"],"after joining":["the"],"after just":["getting"],"after removing":["Regex.scan"],"after seeing":["the"],"after some":["pointers,"],"after string":["parsing"],"after submit,":["I"],"after submitting,":["and"],"after the":["public","function","nitpick","latest","message","parenthesis","public","parameter","reduce,","entire","entire","ListOps","entire","entire","entire"],"after thinking":["about"],"after this":["one."],"after uploading":["that"],"after what":["it","it's"],"after, so":["use"],"after. Both":["work"],"afterward) like":["I"],"again and":["refactored"],"again for":["the","the","the","each","your","the","the","the","your","the","each","the","such","all","the"],"again if":["there"],"again inside":["split."],"again on":["spaces?"],"again outside":["of"],"again superfluous":["I"],"again the":["english"],"again to":["those","compare","grab"],"again with":["your"],"again without":["the"],"again) as":["`&(String.length(&1)"],"again, I":["thank"],"again, learning":["a"],"again, you":["find"],"again. Apparently":["when"],"again. Fixed":["in"],"again. I":["suspect"],"again. Unless":["of"],"against `\"\"`":["to"],"against empty":["string"],"against in":["`shouty?`"],"against invalid":["input"],"against it,":["but"],"against message":["(i.e."],"against nil":["values.","since","makes"],"against separating":["the"],"against that":["one"],"against the":["string","general","general","wall","shouting"],"against them":[","],"against trailing":["spaces"],"age_on(:mercury, seconds)":["do"],"ages back:":["I"],"aggree on":["the"],"aggressive compilers,":["like"],"ago and":["I","thought"],"ago the":["string"],"ago, so":["they're"],"ago. Anybody":["out"],"agree IMHO":["I"],"agree about":["line","the"],"agree and":["think"],"agree completely":["this"],"agree on":["that?"],"agree that":["it","`sentence","is","renaming","I","that","pattern","it's","it","this","the"],"agree to":["disagree"],"agree with":["marksim","you","your","you","your","your","not","@tabitha","both","all","you","@daryl.","@rowan.","that,","you","you","your","that","your"],"agree, I":["will","struggled,"],"agree, but":["in"],"agree, in":["this"],"agree, it's":["a"],"agree, only":["`hey`"],"agree, the":["double"],"agree. Don't":["see"],"agree. I":["guess"],"agree. It":["struck"],"agree. Not":["sure"],"agree: this":["2nd"],"agree; I":["actually"],"agreed that":["doing"],"agreed. Am":["I"],"ah, List.zip":["looks"],"ah, makes":["sense."],"ahah true,":["better"],"ahead (otherwise":["there'd"],"ahead and":["look","make","make","stuck","submitted","sending","put","used","always","submit"],"ahead in":["the"],"ahead of":["the","you."],"aide in":["readability"],"aim to":["have"],"aimed at":["reducing"],"akin to":["having"],"al would":["love"],"ala elixir":[":)"],"alanpeabody was":["trying"],"albeit in":["a"],"algebra, though":["I'm"],"algorithm a":["little"],"algorithm being":["placed"],"algorithm encapsulation":["while"],"algorithm inside":["of"],"algorithm run":["in"],"algorithm that":["for"],"algorithm to":["go"],"algorithm was":["case","more"],"algorithm when":["you"],"algorithm will":["be"],"algorithm. I":["hadn't"],"algorithmic improvements.":["This"],"algorithms that":["return"],"alias for":["`True`"],"alias is":["used;"],"alias to":["Dict,"],"aliasing `any`":["to"],"aliasing it":["is"],"aliasing, I":["wanted"],"align the":["operators"],"aligning the":["function"],"all (and":["being"],"all (or":["most)"],"all *invalid*":["chars"],"all 13":["tests"],"all 3":["checks,"],"all I":["can","understand","turned"],"all I'll":["have"],"all I'm":["doing"],"all Kernel":["methods."],"all `HashDict`":["methods."],"all appearances,":["you"],"all are":["focusing"],"all at":["one","once","the","the","once.","once"],"all bad":["numbers"],"all but":["the","`total`.","the"],"all by":["now."],"all capital":["letters","letters"],"all caps,":["etc?","you"],"all caps.":["Nice."],"all caps?\",":["\"what"],"all case":["so"],"all cases":["quick","So"],"all characters":["other"],"all compile":["down"],"all count":["as"],"all defined":["in","for"],"all dictionary":["types"],"all duplication":["is"],"all elements":["of"],"all excellent,":["thanks."],"all fairly":["nitpicky"],"all fits":["on"],"all functions":["from"],"all happy":["with"],"all identical":["except"],"all if":["you"],"all in":["the","normalize.","one"],"all it":["also"],"all kinds":["of","of","of","of","of","of","of"],"all languages":["have"],"all languages.":["Is"],"all letters":["and","are"],"all mixed":["in"],"all new":["to","to"],"all of":["the","that","the","the","them?","being","the","the","these","the","```String```","your","them","the","Enum","the","the","the","these","`score`","the","the","those","your","the","the"],"all on":["Kernel,"],"all other":["cases.","places","Enum","`Enum`","kinds"],"all possible":["values"],"all possible!":["Usually"],"all private":["methods."],"all problems":["are"],"all rather":["than"],"all readability":["by"],"all start.":[";)"],"all string":["checks."],"all strings":["are"],"all symmetrical":["in"],"all tail":["recursive","recursive"],"all tests":["and","successful."],"all tests,":["the","would","would"],"all that":["much","well","common"],"all that,":["and"],"all the":["tests.","complexity","not","documentation","logic","functions","languages","condition","right","right","methods","way","feedbacks","above","magic","function","other","way","test","time.","transforming","conditions","regex","individual","condition","tests","test","helpful","upper-case","tests","uses","`_for`","elixir","behavior","tests","potentially","other","strings.","time","tests.","usual","punctuation","time.","tests,","tests?","students,","tests,","tests,","tests?","great","time"],"all these":["ifs"],"all three":["are"],"all three?":["Or"],"all tips":["and"],"all together.":["I'd"],"all twice,":["but"],"all unicode":["whitespace,"],"all upper":["case","case,"],"all uppercase":["characters?"],"all uppercase.":[":)"],"all uppercase?":["(Sorry"],"all uses":["of"],"all valid":["words"],"all valuable":["suggestions:"],"all values":["that"],"all very":["nice"],"all which":["arg"],"all with":["pattern"],"all words":["are"],"all words,":["that"],"all you":["do"],"all you'd":["need"],"all your":["points.","guidance"],"all, Elixir":["doesn't"],"all, but":["I"],"all, especially":["with"],"all, it":["depends","only"],"all, that's":["great"],"all, there":["would"],"all. Do":["you"],"all. Glad":["it's"],"all. I'd":["really"],"all. It's":["the"],"all. The":["idea"],"all. Try":["to"],"allCaps(input) -\u003e":["\"Woah,"],"all_caps? and":["question?."],"all_letters_match? or":["something"],"allergens. Could":["you"],"allergic to":["functions","seeing"],"allergy, flag":["}"],"alleys with":["Enum"],"allow \"":["\""],"allow `def`":["within"],"allow code":["outside"],"allow just":["use"],"allow me":["to","to","to","to"],"allow pattern":["matching"],"allow teeing":["off"],"allow that)":["and"],"allow them":["to"],"allow you":["to","to","to","to"],"allow yourself":["to"],"allowed BIFs.":["But"],"allowed a":["form","more"],"allowed at":["the"],"allowed but":["at"],"allowed by":["the"],"allowed characters":["are"],"allowed functions":["are"],"allowed in":["pattern","pattern","guards,","pattern","guards."],"allowed it's":["not"],"allowed me":["to"],"allowed ones),":["I'd"],"allowed to":["write","be","be"],"allowing for":["the"],"allowing question":["marks"],"allows `accumulate/2`":["to"],"allows outside":["code"],"allows passing":["a"],"allows processes":["to"],"allows removing":["some"],"allows the":["implementation","nested"],"allows to":["calculate"],"allows you":["to","to","to","to","to","resolve","to"],"alluding to":["an"],"almost 2":["hours,"],"almost all":["defined"],"almost as":["long"],"almost every":["case,"],"almost everything":["at"],"almost exactly":["like"],"almost like":["my"],"almost looks":["like"],"almost never":["change"],"almost perfect":[":)"],"almost the":["exact","same","same"],"almost there":[":)"],"almost there,":["almost"],"alone and":["return"],"alone fails":["on"],"along the":["lines","lines"],"along those":["lines."],"along with":["single-line","making"],"along, but":["I","still"],"along. For":["example"],"alongside encoding":["just"],"alot of":["other"],"alpha characters":["would"],"alpha chars":["is"],"alpha would":["be"],"alphabet, so":["if"],"alphabetical character":["to"],"alphabetically as":["well"],"alphabetically. The":["pull"],"alphabetize the":["main"],"alphanumeric characters":["at"],"already 'peeked'":["for"],"already a":["list.","space"],"already an":["instance"],"already been":["more","implemented"],"already better":["than"],"already char":["lists,"],"already did":["in"],"already do":["it\""],"already doubting":["to"],"already existing":["function","enum"],"already familiar":["with."],"already good":["code","readability."],"already have,":["given"],"already in":["the"],"already knew":["all","that)."],"already know":["the","the","roughly"],"already know,":["you","`def`"],"already longer":["than"],"already looking":["pretty"],"already lowercased":["and"],"already made":["for"],"already moved":["on"],"already much":["better,"],"already present.":["http://elixir-lang.org/docs/stable/Dict.html#update/4"],"already quite":["some"],"already sorting":["by"],"already the":["second"],"already there":["in"],"already there,":["this"],"already using":["a"],"already, and":["I"],"already. I'd":["move"],"also I":["think"],"also Regex.scan/2?\"":["can"],"also `Enum.reduce`":["built-in."],"also `Regex.run`":["that"],"also `if":["cond,"],"also a":["simple","private","tension","bit","ListDict)","look","`ListDict`,","little"],"also add":["some"],"also allows":["removing","you"],"also ambiguous":["in"],"also and":["found"],"also apply":["this"],"also be":["nicer","clearer","implemented","implemented","written","written","written"],"also benefit":["from"],"also catch":["this"],"also changed":["methods","the"],"also check":["for"],"also collapse":["the"],"also common":["because"],"also consider":["combining","using","using"],"also could":["do"],"also curious":["about"],"also def,":["etc)"],"also depends":["on"],"also didn't":["want"],"also disagree":["with"],"also do":["`&amp;(&amp;1"],"also doesn't":["handle"],"also done":["this"],"also easier":["to"],"also edited":["the"],"also end":["function"],"also exclamation":["mark)"],"also fairly":["arduous."],"also for":["remove"],"also forces":["the"],"also found":["myself"],"also gives":["you"],"also has":["a","state,"],"also have":["to","a","two","a"],"also highly":["recommend"],"also introduced":["named"],"also isn't":["good"],"also iterates.":["You"],"also just":["import"],"also leaning":["towards"],"also let":["you"],"also lets":["you"],"also like":["to"],"also likely":["a"],"also look":["into"],"also love":["how"],"also make":["this"],"also makes":["it","testing","lines","the"],"also match":["underscore"],"also matches":["A-Z."],"also me":["trying"],"also means":["it's","that"],"also more":["concise","open"],"also move":["String.downcase"],"also moved":["the"],"also need":["`List`","to"],"also noticed":["that"],"also on":["lines"],"also perfectly":["acceptable."],"also permit":["pipe-lining."],"also pipeline":["(|\u003e)"],"also played":["with"],"also possible":["to","btw"],"also prefer":["named"],"also reading":["through"],"also realized":["the"],"also recommend":["looking"],"also rename":["`empty`"],"also results":["in"],"also seems":["unusual.","strange"],"also seen":["references"],"also serve":["as"],"also slightly":["uncomfortable"],"also sort":["the"],"also support":["some"],"also take":["a"],"also that":["the","Elixir"],"also the":["comment"],"also things":["like"],"also think":["it's","you","a","that","it's"],"also to":["@isabelle"],"also toyed":["with"],"also tried":["to","to","`String.upcase(s)","case,","it"],"also try":["to","to"],"also unsure":["the"],"also use":["this","a","the","`String.ends_with?(input,","`String.strip(statement)"],"also used":["it","```","regexes,"],"also uses":["pattern",":math.pow()."],"also want":["to","to"],"also wary":["of"],"also welcome":["here."],"also what":["the"],"also why":["I","it's"],"also will":["have"],"also wonder":["when"],"also work":["(if"],"also works":["with","with","on"],"also would":["_love_"],"also wouldn't":["make"],"also write":["`&do_to_rna(&1)`","`&String.to_char_list/1`"],"also you":["could","maybe"],"also, I":["don't"],"also, do":["you"],"also; same":["arguments:"],"also? Then":["it"],"alternate function":["syntax"],"alternately written":["as"],"alternative ;).":["If"],"alternative approach":["using"],"alternative function":["call."],"alternative idea":["for"],"alternative in":["is_question?"],"alternative is":["`use"],"alternative method":["in"],"alternative that":["looked","avoids"],"alternative to":["this","`Dict.merge`.","HashDict.merge","Enum.sort,","explicitly"],"alternative without":["compromising"],"alternative would":["be","be"],"alternative you":["could"],"alternative, possibly":["slightly"],"alternative. I":["don't"],"alternatively express":["that"],"alternatively write":["those"],"alternatively written":["as"],"alternatives and":["resubmit."],"alternatives to":["using","handle"],"alternatives, so":["I"],"alternatives. But":["I'd"],"although I":["usually","could"],"although as":["someone"],"although is":["unclear"],"although it":["seems"],"although it's":["pretty"],"although maybe":["at"],"although the":["naming","explicit","conditionals"],"although they're":["not"],"although you":["could"],"altogether because":["there"],"altogether by":["getting"],"altogether when":["you"],"altogether, as":["it"],"always a":["tradeoff","bad","companion","companion","good","transformation","prime,"],"always add":["a","it"],"always be":["commented"],"always been":["a"],"always clear,":["much"],"always creates":["a"],"always define":["some"],"always end":["up"],"always equivalent":["to"],"always explicitly":["referring"],"always followed":["Erlang's"],"always for":["the","the"],"always go":["after"],"always has":["to"],"always improve":["readability"],"always initializes":["with"],"always made":["the"],"always needed":["as"],"always parses":["as"],"always preferable":["to"],"always preferred":["multiline","if"],"always return":["a"],"always returned":["false"],"always returns":["the","the"],"always seen":["definitions"],"always sorts":["to"],"always strive":["for"],"always submitting":["the"],"always taking":["a"],"always the":["pattern","option","same.","case"],"always use":["1.","parentheses","the","parentheses","a","them","parentheses"],"always worth":["it"],"always wrap":["the"],"always, @nella.":["Yeah,"],"am *really*":["loving"],"am I":["missing","missing"],"am a":["big","complete","bit"],"am actually":["converting"],"am also":["unsure","curious"],"am amazed":["at"],"am anxiously":["waiting"],"am as":["new"],"am certain":["there"],"am familiar":["with"],"am finding":["it"],"am going":["to","ahead","to"],"am gonna":["rewrite"],"am learning":["a"],"am looking":["forward","to"],"am marking":["it"],"am missing":["this"],"am new":["to","to","to"],"am no":["longer"],"am not":["a","interested","rubysolo,","convinced.","sure","sure","sure","from","sure"],"am only":["concerned"],"am rather":["curious"],"am saying":["is"],"am somewhat":["familiar","scared"],"am sorting":["it"],"am still":["a","not","figuring","figuring","a","a"],"am stuck.":["I'm"],"am thinking":["about","through"],"am too":["new"],"am trying":["to"],"am unsure":["if"],"am very":["wary"],"am. I":["thought"],"amazed at":["the"],"amazing at":["performing"],"ambiguities and":["can"],"ambiguities when":["you"],"ambiguity. The":["README"],"ambiguous in":["that"],"ambiguous syntax":["\"inlist\","],"ambiguous to":["the"],"ambiguous\", when":["removing"],"among other":["methods"],"amongst other":["issues,"],"amount of":["code","code,","pattern","memory","comparisons","work"],"amp up":["the"],"ampersand character":["and"],"ampersand notation":["for"],"ampersand outside":["the"],"ampersands, without":["the"],"an 8":["element"],"an \u003ccode\u003eelse\u003c/code\u003e":["-"],"an \u003ccode\u003einvalid_string?(str)\u003c/code\u003e":["function"],"an AST":["into"],"an Elixir":["way","newbie","PR"],"an Enum":["method"],"an Enum.reduce":["with"],"an Enumerator?":["Google"],"an Erlang":["function","function","world…","trick,"],"an FYI,":["not"],"an Iterator":["and"],"an O(n^2)":["algorithm"],"an OO":["code"],"an `Adult`":["module."],"an `Elixir.match?/2`":["function"],"an `Enum.each(Enum.with_index(planets)`":["and"],"an `Enum.filter`":["version","then"],"an `Enum.reduce`":["using"],"an `Enum`":["function","function"],"an `Enumerable`":["implementation)","implementation,"],"an `anagram?`":["function:"],"an `anything_else`":["function."],"an `append`":["operation"],"an `else":["if`"],"an `empty?`":["function"],"an `fn`":["inside"],"an `if":["..."],"an `if`":["by","or"],"an `if`.":["I"],"an `inc`":["function"],"an `update`":["as"],"an abstract":["way:"],"an accent":["on"],"an accidental":["push","submission","submission"],"an accumulator":["as","and","for","and"],"an accumulator.":["See"],"an active":["object."],"an additional":["regex"],"an admin,":["all"],"an administrator,":["and"],"an advantage":["to","compared"],"an aesthetic":["perspective"],"an alias":["is","for"],"an all":["tail"],"an all_letters_upcase?":["method."],"an already":["existing","existing"],"an alternative":["method","to","function","that","approach","to","that"],"an ambiguity.":["The"],"an anagram":["or","of","of","of"],"an analog":["to"],"an animated":["professor"],"an annoying":["exercise."],"an anonymous":["function?","function","function","function","function","function","function.","function","&-based","function","function","function","function,"],"an answer":["could"],"an answer.":["It's"],"an append":["it","is","is"],"an approach":["to"],"an appropriate":["`HashDict`","regex"],"an arbitrary":["special"],"an area":["of","I","I"],"an argument":["for","explicitly.","using","to","that","of"],"an argument,":["as"],"an array":["of"],"an array,":["so"],"an assignment":["once"],"an attribute":["(those","behind","as","of","reader","for","and"],"an attribute,":["is","or"],"an awesome":["language!","site,"],"an earlier":["attempt.","commenter"],"an early":["warning."],"an easy":["time"],"an echo":["of"],"an edge":["case"],"an elegant":["way"],"an element":["to","to"],"an element,":["sometimes"],"an elevator":["simulator."],"an elixir":["programmer","expert,"],"an else":["just"],"an embedded":["if-statement"],"an empty":["message","string","string,","message.","string.","dict,","string,","string,","string","string","string","string.","string","list,","string","string","string.","string","set","string","string.","string","string","string.","string","string.","string.","string.","list","tuple","string","list","list","string."],"an entire":["module","string"],"an entry":["with"],"an enum":["and"],"an enumerable":["you"],"an enumerable.":["The"],"an equal":["amount"],"an equilvalent":["in"],"an erlang":["/"],"an errant":["space"],"an error":["on","is"],"an error?":["Maybe"],"an example":["from","of","of","of","where","on","of","would","from","where"],"an example),":["so"],"an example,":["that"],"an excellent":["idea"],"an exception":["gets","if","if"],"an exclamation":["point","point.\""],"an exercise":["is","after","involving","requires","and","author,","you"],"an exercise.":["For"],"an existing":["method...in","`HashDict`,"],"an expensive":["operation","computation."],"an expert,":["but"],"an explicit":["case?","function","test","check"],"an expression":["rather","in"],"an external":["variable."],"an extra":["line","closing","accumulator","piece"],"an extract":["method"],"an eye":["out","towards"],"an html":["tag"],"an idea":["to","to","and","where","what","of"],"an idea...":["many"],"an idiomatic":["solution","way"],"an if":["in"],"an if,":["else,"],"an implementation":["with","detail","of","detail."],"an implementation.":["You'll"],"an implicit":["conversion"],"an important":["piece","concept","concept","concept"],"an improved":["building"],"an improvement.":["You"],"an inbuilt":["Elixir"],"an increment":["function?"],"an indentation":["to"],"an individual":["method."],"an inefficiently":["in"],"an infix":["operator"],"an initial":["value"],"an input":["is","category","like"],"an instance":["of","of"],"an integer":["that"],"an interesting":["approach","decision","solution!","point.","edge","exercise"],"an interface":["and","for"],"an interface,":["`HashDict`","the"],"an intermediate":["revision","list","list)."],"an internal":["matter","detail","detail."],"an intersection":["of"],"an introduction":["level"],"an iolist":["is","is"],"an is_empty?":["function)."],"an issue":["on","of","calling"],"an issue.":["What"],"an iteration":["based"],"an new":["version."],"an object":["of","constructor"],"an object,":["it"],"an object-oriented":["style."],"an obvious":["choice","problem,","problem,","problem,","problem,","problem,"],"an odd":["(to"],"an old":["version?","test","version"],"an older":["version"],"an one-liner.":["You"],"an operator":["call,","(i.e.","as"],"an opinion":["on"],"an opportunity":["to","to","to","to","to"],"an optimization":["called"],"an option":["to"],"an or:":["`P"],"an overall":["0."],"an uncommon":["style"],"an underscore":["is","is"],"an underscore,":["so"],"an understanding":["that"],"an undocumented":["implementation"],"an unevenness":["in"],"an unnecessary":["`fn`"],"an update":["that"],"an update/2":["and"],"an updated":["version.","version","version."],"anagram (empty":["string)"],"anagram -&gt;":["sorted_word"],"anagram =":["String.downcase(anagram)"],"anagram ```":[":)"],"anagram and":["for","other","the"],"anagram argument?":["I"],"anagram as":["well."],"anagram exercise":["in"],"anagram finder":["any"],"anagram in":["the"],"anagram makes":["code"],"anagram of":["a","Tan...","banana"],"anagram or":["not"],"anagram that":["returns"],"anagram to":["`anagram?`,"],"anagram. If":["I"],"anagram. This":["is"],"anagram? and":["is"],"anagram?() function,":["and"],"anagram?(_a, _a),":["do:"],"anagram?(same_word, same_word),":["do:"],"anagram?. Passing":["in"],"anagram?/2 ```":["method."],"anagram_match(word, word2)":["end)"],"anagram_matcher function.":["Still,"],"anagrams and":["only"],"anagrams cases":["(with"],"anagrams expects":["the"],"anagrams into":["a"],"anagrams normalized":["and"],"anagrams of":["one"],"anagrams or":["not"],"anagrams we":["should"],"anagrams when":["they"],"anagrams |&gt;":["Enum.filter","Enum.filter"],"anagrams, anagram?(&amp;1,":["word))"],"anagrams, but":["probably"],"anagrams? into":["two,"],"anagrams?(word1, word1),":["do:"],"anagrams?(word1, word2)":["do"],"anagrams?(word1, word2),":["do:"],"analog to":["Clojure's"],"analysis of":["the"],"analyzed the":["number"],"analyzers as":["private"],"analyzing the":["type"],"anchor for":["that"],"and \"":["\"","\"."],"and \"bc\"":["where"],"and \"condition":["private"],"and \"end\".":["That"],"and \"question?\"":["because"],"and \"r\",":["but"],"and \"reduce\"":["parts"],"and \"subscriber":["number\","],"and \"tail\"":["on","on"],"and \"the":["Haskell"],"and \"yelled?\"?":["Similar"],"and #question?":["."],"and #replace":["function"],"and #verse":["more"],"and &amp;increment/1.":["Otherwise"],"and 'end'.":["I"],"and 'exercism":["fetch"],"and 'if',":["that's"],"and (2)":["keeping"],"and (nearly)":["identical."],"and (word":["=="],"and *not*":["how"],"and .strip":["for"],"and 1":[","],"and 10":["aren't."],"and 11":["seem"],"and 12":["you"],"and 13":["are"],"and 15)":["I"],"and 16.":["If"],"and 18":["would"],"and 2":["because"],"and 2)":["projecting"],"and 22,":["despite"],"and 27":["in"],"and 4.":["They"],"and 7":["are"],"and 9,":["but"],"and \u003ccode\u003eHashDict.update/4\u003c/code\u003e":["here."],"and \u003ccode\u003eString.ends_with?\u003c/code\u003e.":["Do"],"and \u003ccode\u003ea,b\u003c/code\u003e":["don´t"],"and \u003ccode\u003eupcase?\u003c/code\u003e":["that"],"and ?U,":["but"],"and @jackson.":["Thanks"],"and @liliane.":["Just"],"and @mossie":["recommended."],"and @providenci":["for"],"and Benjamin":["Tan's"],"and Busy":["articles."],"and Clojure":["uses"],"and DRY.":["I"],"and Dict.update":["for","to"],"and Elixir":["can","this","programmers","`map/1`"],"and Elixir's":["syntactical"],"and Elixir.":["From"],"and English-centric.":["Additionally,"],"and Enum.reduce":["is"],"and Enum.sort":["and"],"and Erlang's":["expectations"],"and FP":["newbie,"],"and Haskell":["make"],"and Haskell.":["The"],"and I":["believe","meant","don't","haven't","am","had","have","have","do","think","prefer","love","should","think","see","thought","like","think","don't","decided","used","did","was","agree,","wanted","like","had","updated","lose","don't","should","more-or-less","also","just","thought","don't","think","think","would't","tend","tend","actually","feel","`downcase`","got","wasn't","don't","think","welcome","will","like","felt","couldn't"],"and I'd":["condense","love","love"],"and I'll":["take","make","revisit."],"and I'm":["wondering","happy","not","not","reading","sure","still","happy","finding","just"],"and I've":["learned"],"and Kernel,":["call"],"and New":["Years."],"and P)`":["depends"],"and P)`.":["The"],"and P`.":["As"],"and Phrase.":["I"],"and Python":["to"],"and Regex.scan":["in"],"and Statement":["has"],"and String.upcase/1":["methods?"],"and VM":["are"],"and `!`":["it."],"and `\"\"`":["is"],"and `$`":["then"],"and `&(&1)`":["(because"],"and `&(&1+1)`.":["That"],"and `&1`":["is"],"and `&amp;2`":["to"],"and `''`":["?"],"and `(1":["\u003c\u003c\u003c"],"and `(String.ends_with?":["word,"],"and `-`":["and","not."],"and `2`?":["Also,"],"and `\u003c\u003c??\u003e\u003e`":["?"],"and `==`":["is"],"and `?U`":["characters","instead"],"and `?`":["necessary"],"and `@jamar`":["have"],"and `@judd`":["did"],"and `@ladarius`":["or"],"and `Dict.get`,":["since"],"and `Dict.get`.":["I"],"and `Dict.merge`":["over"],"and `Dict.put`":["can"],"and `Enum#reduce`.":["Thanks"],"and `Enum.any?`":["but"],"and `Enum.filter`":["uses"],"and `Enum.map`":["in","does?","with"],"and `Enum.reduce`":["(which"],"and `Enum.reduce`.":["Those"],"and `Enum.reverse`":["in"],"and `Enum.sort`":["to"],"and `Enum.zip`":["are"],"and `Enum`":["is"],"and `HashDict.update(":["hash,"],"and `HashDict.update(dict,":["word,"],"and `HashDict.update/4`?":["Normalizing"],"and `HashDict`":["as"],"and `Kernel.length`":["(imported"],"and `List.foldl`":["might"],"and `List.zip`":["(with"],"and `List.zip`,":["which"],"and `MultiSet.minus`":["function"],"and `PhoneParser`":["explicitly,"],"and `Q":["and"],"and `Stream`":["functions"],"and `String#strip`":["methods.","methods."],"and `String.downcase/1`":["(https://github.com/elixir-lang/elixir/blob/master/lib/elixir/priv/unicode.ex),"],"and `String.last(s)":["=="],"and `String.reject`":["by"],"and `String.split`":["you're","with"],"and `String.upcase(\"£\")":["=="],"and `\\W`":["include"],"and `\\p{N}`":["matches","for"],"and `\\z`":["because"],"and `]`":["in"],"and `_pretty`":["close","all"],"and ```+```":["is"],"and ````question?````,":["you"],"and ```removed_punctuation```":["into"],"and `actual`":["in","variables"],"and `all_caps?`":["are"],"and `all_caps?`,":["letting"],"and `anagram?`":["so"],"and `append`":["uses"],"and `area_code`?":["It"],"and `asking_politely?`":["conditions"],"and `b":["=="],"and `bitstring_to_list`":["simply","for"],"and `case`":["are"],"and `cleanup`":["in"],"and `concat`":["were","using","using"],"and `decide`":["because"],"and `defp`":["with","(and","defines"],"and `defp`,":["at"],"and `discard`":["will"],"and `empty`)":["are"],"and `end`,":["though"],"and `end`.":["Not"],"and `f`":["instead"],"and `false`":["as"],"and `filter`":["because","functions"],"and `filter`.":["If","Was"],"and `filter`:":["it's"],"and `fold`,":["but"],"and `foo/2`.":["If"],"and `g`,":["but"],"and `hey(nil)`":["would"],"and `includes_country_code?`":["functions."],"and `interrogative?`)":["that"],"and `is_anagram?/2`.":["Perhaps"],"and `is_question?`":["mutually"],"and `last_four`,":["those"],"and `left`":["--"],"and `letters_of`":["considering"],"and `list`":[":)"],"and `ll`":["being"],"and `map/2`":["are"],"and `map_join`?":["Why"],"and `map`":["(the"],"and `merge`,":["though"],"and `mutation?`":["functions."],"and `new_count`":["were"],"and `nil`":["objects,"],"and `nxx`":["but"],"and `occurrences`.":["Perhaps"],"and `plong`":["functions"],"and `pred`,":["why"],"and `predicate_and?`":["lets"],"and `question?/1`":["are"],"and `question?`":["are","private"],"and `question`":["don't"],"and `question`,":["for"],"and `says_`":["prefixes"],"and `segment`":["(IMO"],"and `segment`:":["I"],"and `shouting?`":[",","?","for","functions","public?"],"and `shouty?(\"\")`":["."],"and `silence?()`":["methods."],"and `silence?`":["should","public"],"and `silence?`.":["However"],"and `silence?`?":["If"],"and `some_range.last`":["to"],"and `sort`":["so"],"and `subscriber_number`":["definitely"],"and `sw`,":["what"],"and `take_one_down`":["without","as"],"and `tl`,":["but"],"and `unequal_caseless?`":["give"],"and `unless`":["return"],"and `words_in/1`":["simpler."],"and `x`":["are"],"and `yelling?`":["public"],"and `zip`":["could"],"and a":["function","comparison.","downcase,","function","second","protocol","`HashDict`","`phrase`","few","colon","map,","helper","I","function,","happy","few","reverse","function","tiny","new"],"and abstracted":["away."],"and according":["to"],"and actually":["reading"],"and adapted":["to."],"and add":["a","a"],"and again":["to"],"and against":["separating"],"and all":["tips","the","problems","letters"],"and all,":["but"],"and all.":["Do"],"and allows":["you"],"and alot":["of"],"and also":["apply","on","Regex.scan/2?\"","\u003ccode\u003eRegex.scan/2\u003ccode\u003e?","the","for","a","would","me","allows"],"and also,":["do"],"and always":["add"],"and am":["marking","still"],"and an":["accent","`if`.","Enumerator?"],"and and":["or),"],"and annoying":["to"],"and another":["that"],"and appending":["the"],"and are":["defined","wonderfully","slightly"],"and as":["far","a"],"and assumed":["this"],"and at":["for"],"and avoid":["the","using","requiring"],"and b":["as"],"and barewords":["are"],"and be":["explicit","a"],"and beautiful":["library"],"and because":["it"],"and becomes":["annoying"],"and being":["a","aware","introduced"],"and better":["performing."],"and better.":["I"],"and beyond":["what"],"and binaries":["and","that"],"and binaries,":["and"],"and binary":["pattern"],"and both":["approaches"],"and breaking":["it"],"and buy":["some","some","some"],"and by":["\"completed\""],"and c":["\u003c=","\u003c=","\u003c="],"and call":["`iolist_to_binary(roman)`"],"and called":["`do_foo`","`do_count`"],"and calling":["it","`Enum.reduce`"],"and came":["to","up"],"and can":["demonstrate","pass","just"],"and can't":["do"],"and capture":["nesting"],"and chaining.":["Updated"],"and change":["the"],"and changed":["the","it","my"],"and character":["integrals"],"and cheated":["a"],"and clean":["solution!","use"],"and clear":["naming."],"and click":["on"],"and code":["is"],"and comma":["twice"],"and commas.":["You"],"and comments":["for"],"and communicating":["intention."],"and compare":["it"],"and comparing":["the","against","against"],"and comparison":["if"],"and compiled":["with","it"],"and comprehensible":["if"],"and concat":["are"],"and concise":["for"],"and concise,":["but"],"and concise.":["Just","I'm"],"and conciseness":["of"],"and conditionals":["returning"],"and conforming":["to"],"and consequently":["in"],"and constant":["while","while","while","while","while"],"and copy":["and"],"and couldn't":["find"],"and count":["operations","values."],"and count_mismatches":["as"],"and custom-set":["(which"],"and data":["structures"],"and de-duplicate":["behavior."],"and deal":["with"],"and decided":["it","to","to"],"and defining":["a","a"],"and depends":["on"],"and designing":["functions"],"and determine":["anagrams!"],"and did":["\"I","a","not"],"and didn't":["find.","understand","find","seem","think","even","notice","go"],"and digits":["with","in"],"and directly":["output"],"and discard":["is","have","would"],"and discovering":["the"],"and discovery,":["too."],"and discuss":["best"],"and do":["just","it","you","similar","the","the","`exercism"],"and docs":["with"],"and does":["not","not"],"and doesn't":["change,"],"and doing":["`String.last(input)"],"and dot-dsl":["and"],"and downcase":["is","representations."],"and downcased":["once"],"and downcasing":["each"],"and drop":["the"],"and easier":["to","to","to","to","to"],"and easy":["conversion"],"and easy,":["I"],"and easy.":["I"],"and edge":["(one"],"and efficient":["when"],"and effort":["required"],"and elegant":["Elixir","ways"],"and eliminate":["the"],"and elixir.":["Thanks"],"and encodes":["the"],"and end":["verses"],"and ending":["\u003e="],"and engage":["all"],"and error":["since"],"and especially":["importing"],"and even":["pull"],"and everything":["within"],"and executing":["code"],"and exercism":["fetch?"],"and exit":["points."],"and expanding.":["Thanks!"],"and expected":["outputs:"],"and explain":["in","your"],"and explicit,":["but","not"],"and explicitly":["naming"],"and extension":["of"],"and extracting":["some"],"and feels":["consulted."],"and felt":["inspired"],"and fill":["in"],"and filter":["instead","are"],"and filter,":["comprehensions"],"and finally":["used","I"],"and first":["is"],"and fix":["the"],"and fixed":["are"],"and for":["the","discard","the","the","the","bad","some","that"],"and forces":["more"],"and forgot.":["Took"],"and forth":["with"],"and found":["the"],"and frankly,":["for"],"and free":["you"],"and friends":["in","private","do)."],"and from":["char"],"and function":["specs","heads.","passed"],"and functional":["programming,"],"and functions":["calls"],"and gave":["some"],"and generally":["requires"],"and get":["come","rid","`1`."],"and getting":["the"],"and give":["it","it","a"],"and giving":["feedback"],"and go":["with"],"and good":["exercise","functional","error"],"and good)":["practice"],"and google":["is"],"and got":["some","a"],"and grade":["list"],"and guard":["clause","clauses","clauses."],"and guards":["without","for","to"],"and had":["second"],"and handles":["`&amp;1`-type","all"],"and handling":["one","the"],"and hard":["to"],"and hardest":["to"],"and has":["since","openly"],"and have":["that","private","the","it","meaningful","a","2","fun","gone","the","the","implemented"],"and haven't":["found","found"],"and having":["the","`to_words`","a","`discard`"],"and here":["i"],"and hide":["the"],"and hinder":["your"],"and hopefully":["the"],"and how":["concerns","you're","it's"],"and huge":["for","for","for","for","for"],"and i'm":["fixing"],"and idiom":["yet."],"and idiomatic":["code."],"and idiomatically.":["I"],"and if":["that's","that's","you","this","the","it","you","you","that's","the","there"],"and if.":["I"],"and immediately":["say"],"and immutable":["variables."],"and implement":["concat"],"and implemented":["two"],"and improvements.":["I'm"],"and improving":["the"],"and in":["many","this","a","other","Ruby","Clojure","certain","the","my"],"and including":["the"],"and increases":["the"],"and increment/0":["return"],"and increment/1":["and"],"and indeed":["optimized","got"],"and indented":["body."],"and individual":["functions"],"and init":["is"],"and initially":["was"],"and inlines":["the"],"and instead":["had"],"and invert":["the"],"and is":["more","probably","somewhat","much","small","fairly","less","a"],"and is_questioning?":["could"],"and isn't":["going","confusing."],"and it":["was","got","contained","passes","won't","can","might","has","was","will","didn't","takes","would","gave","might","will","seems","uses","also","did","loses","didn't","looks","is","will","gave","seems","makes","might","was","seems","is","make","feels","would","will"],"and it's":["a","a","an","quite","not","awesome","in","a","very","not","valid","also","way","`Access`","possible"],"and its":["`if`"],"and join":["the"],"and joining.":["Of"],"and just":["does","calling","do","check","do","see"],"and keep":["producing"],"and kicking":["that"],"and lack":["of","of"],"and learn":["while","to"],"and leave":["the"],"and leaves":["less"],"and left":["some","folding","them"],"and length/size":["functions."],"and less":["code.","generic.","likely"],"and let":["doctest","pattern","the"],"and line":["10.","16."],"and lining":["up"],"and linked":["processes."],"and list":["processing."],"and lists":["in"],"and lists.":["I"],"and loads":["of"],"and locality":["of"],"and look":["much","at","at"],"and looks":["very","rather","for"],"and lost":["most"],"and lots":["of"],"and low":["for"],"and maaaybe":["renaming"],"and made":["them","that"],"and maintain":["than"],"and make":["the","the","it","the","that","those","new","the","an"],"and makes":["more","it","the"],"and many":["other"],"and map":["together?","would"],"and map)":["are"],"and map_reduce.":["Thanks"],"and may":["be","need"],"and maybe":["have"],"and message.length":["=="],"and method":["names","names."],"and might":["be"],"and minimizes":["the"],"and missed":["out"],"and misses":["the"],"and more":["natural","efficient.","about","efficient.","idiomatic","unwieldy","with","duplication","flexible"],"and most":["functional","are).","expressive,"],"and moved":["the"],"and much":["more"],"and my":["current"],"and naive":["approach"],"and named":["`do_foo`","slightly"],"and naming":["it","to"],"and need":["help.","to"],"and no":["regex","longer","longer","so","lower"],"and no,":["I"],"and non-error":["cases)"],"and non-exclamation":["punctuation,"],"and not":["so","every","something","some","expect","`'`.","bother","having","familiar","enumeration,","understanding","`Enum.filter(&mutation/1)`?","`String.strip(x)`?","knowing","a","separated","`Enum.sort`?","with","very","characters,","characters.","on","`((((a","sure","a-z.","just","`Enum.to_list(2..limit)`?","~r)","the"],"and nothing?":["for"],"and now":["I","`count/1`"],"and often":["used","results"],"and old":["version"],"and once":["for","in","inside"],"and one":["says","more,","on","in","for","expecting","for","for","other"],"and only":["sort","serve","then","because","leave"],"and operate":["on"],"and opt":["for"],"and or),":["not"],"and other":["nitpicks","for","non"],"and out":["of","of","of"],"and output.":["Is"],"and over":["again.","again.","again","again?"],"and overall":["performance"],"and parameter":["position"],"and parentheses,":["there's"],"and part":["of"],"and pass":["it","it","it","it","it","it","it","an"],"and passed":["them"],"and passes":["it"],"and passing":["it"],"and paste":["it","with"],"and pattern":["match","matching","matching","matching","matching","matching"],"and play":["with","around"],"and pointers":["are"],"and precise":["method"],"and predictable":["when"],"and preferred":["to"],"and pretty":["much","stand-alone"],"and private":["functions.","ones"],"and probably":["more","more","harder"],"and providing":["a"],"and pulled":["the"],"and punted.":["But"],"and push":["my"],"and put":["it","calls.","calls","the","people","the","this","in"],"and putting":["the","the"],"and question":["are"],"and question?":["without"],"and question?(x)":["into"],"and question?.":["At"],"and race":["to"],"and ranges":["in","(or"],"and re-organized":["based"],"and re-store":["it"],"and re-submit.":["Although"],"and read":["back,"],"and readability":["of"],"and readability,":["but"],"and readable,":["but"],"and readbility":["of"],"and ready":["to"],"and really":["anything"],"and records,":["but"],"and redefining":["one"],"and redid":["the"],"and reduce":["duplicated","steps.","calls"],"and reduce\"":[":-)"],"and refactor":["the"],"and refactored":["a","the"],"and refactoring":["becomes"],"and refactoring.":["Thanks"],"and reference":["them"],"and regex,":["so"],"and relied":["on"],"and remembered":["that"],"and remove":["the","the","\u003ccode\u003eis_\u003c/code\u003e.","line"],"and removed":["the"],"and removing":["duplication.","`String.downcase`"],"and repetition.":["This"],"and replace":["just","any","line"],"and replaced":["all","by"],"and required":["for"],"and requiring":["the"],"and response":["of"],"and resubmit":["shortly.","so"],"and resubmitted":["-"],"and result/acc":["arguments"],"and return":["the","a"],"and returns":["a","a"],"and reusable,":["so,"],"and reverse":["the","it"],"and ruby":["versions"],"and run":["`./bench.ex","`exercism"],"and running":["on"],"and running;":["I'll"],"and s":["was"],"and said":["it"],"and say":["that"],"and scan":["till"],"and scores":["into"],"and second":["time."],"and second_couplet":["private."],"and see":["which","what","which","which","what","the","if","if","a","the","if","if"],"and sees":["if"],"and send":["it"],"and sending":["in"],"and separate":["well"],"and separation":["of"],"and set":["attributes","the"],"and shared":["between"],"and shifting":["the"],"and shouted":["questions)"],"and shouting?":["have"],"and silence?":["functions."],"and simple":["structure."],"and simple,":["like","and"],"and simpler.":["Hint:"],"and sing.":["I","But"],"and so":["on","didn't"],"and some":["custom"],"and somehow":["missed"],"and sometimes":["I"],"and sorry":["for"],"and sort":["the"],"and sorted":["characters","I","over","exactly"],"and sorting":["them.","`word`","seems","in","of"],"and spaces,":["but"],"and splitting":["the"],"and standard":["library."],"and start":["getting"],"and started":["developing"],"and stay":["generally","in"],"and still":["maintain"],"and straightforward,":["but"],"and strain":["that"],"and strings":["are","is,"],"and strip":["punctuation","invalid"],"and stuck":["with"],"and students":["are"],"and style.":["Unfortunately"],"and submit":["a","a","again.","a","a","a"],"and submitted":["that.","the","a"],"and such.":["It",":)"],"and suffixes)":["in"],"and suggestions.":["I"],"and swapped":["the"],"and symbols.":["Does"],"and syntax":["to"],"and thanks":["for","for"],"and that":["break","is","I","I","Elixir's","you","equivalence","was","works","has","function","every"],"and that's":["the","not","often"],"and the":["code","implementation","short","two","expected","private","full","non-parallel","code's","actual","functions.","&amp;","example:","only","interpreter","fact,","other","logic","expected","`?`","output","reader","other","other","arguments","other","solution","more","syntax","pipe","code","way","plus","use","embedded","result","single-letter","other","names","code","count","merely","`|\u003e`","values","rest?","call","normalized","second","efficiency","whole","list,","subset","previous,","downcased","output","previous","`String`","direction,","only","result,","examples","dash,","not","logic"],"and their":["build","arity","associated"],"and then":["build","negate","you","having","you","you","you","pattern","a","a","`put`ting","`Enum#filter`","Enum.foldl","splitting","check","oddly","turn","rejoining","I","had","got","`flatten`","I","use","you","compare","validating.","you","I'll","putting","convert","let","use","the","split.","right","split","doing","just","reversing.","only","just","reversing.","find","compare","check","reversing","you","reject","making","splitting","splitting","using","I","use","to","map","you"],"and there":["because","are","isn't","they","is","is","is","for"],"and there's":["even","no","a","a"],"and they":["definitely","are","could","piped"],"and they'll":["either"],"and things":["like"],"and think":["in","it","the"],"and this":["discussion","ecosystem","looks","just","exercise","shouldn't"],"and thought":["that","it"],"and threw":["a"],"and throw":["an"],"and thus":["is","hard"],"and to":["rely","let","debug.","bottles","`case`","use","look","write","generally"],"and trailing":["whitespace"],"and tried":["it,"],"and try":["to","to","the","to","the","the","the","the"],"and turn":["it"],"and turns":["it"],"and underscores":["(\"remove_word_from_array\")."],"and understand":["the","compared"],"and understand-ability":["of"],"and understandable":["version"],"and understandable.":["I"],"and unicode.":["Is"],"and unimportant,":["and"],"and unsorted":["char"],"and unwieldily,":["but"],"and up":["into"],"and upcase":["be","conditions"],"and update":["it","it"],"and upper":["case?"],"and use":["empty","`Regex.scan`,","pattern","`Enum`","pattern","the","my","of","it","a","the","pattern","it","those"],"and used":["`:silence`","`join`","all","case","the","`Enum.map_join`"],"and uses":["`List.zip/1'"],"and using":["\\w","pattern","short","{&1,","the","a","`|\u003e`?","cast","`translate(number,"],"and values":["all"],"and variable":["naming."],"and verified.":["Here's"],"and verse":["than"],"and version":["`0.10.1`"],"and very":["slow"],"and vice-versa.":["It"],"and w/o":["prefixes"],"and want":["to"],"and was":["getting"],"and we're":["not"],"and what":["is","benefits","you","to","should"],"and when":["it","looked","`whatever`"],"and whitespace":["--"],"and will":["fix","look"],"and with":["question","`Enum.all?`"],"and within":["each"],"and without":["and","duplication.","a"],"and word":["=="],"and work":["up"],"and works":["without","better"],"and would":["probably","have","aid","be","make"],"and wouldn't":["require"],"and write":["an"],"and wrong":["answers."],"and x":["=="],"and yes,":["you"],"and you":["could","have","had","needed","had","don't","can","no","can","wouldn't","can","should"],"and you're":["left","just","the"],"and you've":["written"],"and your":["way","solution","submissions","other"],"and-ed clauses,":["but"],"and/or a":["weak"],"and/or should":["be"],"and/or the":["name"],"anew for":["every"],"angle, and":["do:"],"animal, however,":["and"],"animated professor":["explaining"],"annoyed that":["I"],"annoyed with":["myself"],"annoying exercise.":["You"],"annoying padding":["behavior"],"annoying test":["requirement."],"annoying to":["process","write","nitpick."],"annoying when":["you"],"annoying. Another":["common"],"annoying. I":["played"],"anon function":["to"],"anonymous &-based":["function"],"anonymous fn":["in"],"anonymous function":["format","refer","syntax.","syntax","in","directly","and","you","shortcut","inside","too?","you're","in","inline.","to","in","syntax","in","(`fn","a","is","to","in","and","syntax","passed","you","to","inside","inside","to"],"anonymous function's":["name"],"anonymous function,":["or","and","and"],"anonymous function.":["Any","But"],"anonymous function?":["Or","Or"],"anonymous functions":["-","are","syntax","you","correctly...","and","and"],"anonymous functions,":["but"],"anonymous functions.":["The"],"anonymous functions?":["Seems","Using"],"anonymous inc":["function."],"anonymous inline":["functions,","functions,"],"anonymous vs.":["named"],"another 1.000.000":["steps","steps"],"another Elixir":["style"],"another Enum":["filter"],"another `Enum.filter/2`":["on"],"another alternative,":["possibly"],"another anonymous":["function"],"another binary/datastructure":["like"],"another convention":["I've"],"another design":["this"],"another developer,":["I"],"another difference":["-"],"another example":["where"],"another exercise":["and"],"another exercise,":["I"],"another function":["that","`do_x`,","from"],"another function,":["and"],"another function.":["And"],"another go":["and","at"],"another idea":["in"],"another iteration":["unless","that","based","with"],"another iteration.":["I've"],"another language":[":)","but","and"],"another look":["and","at","and"],"another metaprogramming":["module."],"another method":["to","on"],"another of":["those"],"another one":["in"],"another pass":["at","through"],"another person":["use","pushed"],"another quiet":["function"],"another reason":["to"],"another rev":["with"],"another solution":["that"],"another solution,":["and"],"another submission":["seemed"],"another test":["that"],"another that":["handles"],"another type":["of"],"another user's":["suggestion,"],"another variable":["name"],"another version":["that","unless"],"another way":["to","to"],"another way,":["but"],"another will":["aide"],"another? So":["rather"],"answer about":["discussion"],"answer completely":["whether"],"answer could":["be."],"answer for":["`Words.count(\"\")`."],"answer is":["I"],"answer looks.":["Thanks"],"answer may":["well"],"answer to":["this,","all"],"answer will":["have"],"answer won't":["change"],"answer\", but":["I'm"],"answer, I'm":["thinking."],"answer, but":["looking"],"answer, the":["general"],"answer. It's":["quite"],"answering with":["\"Woah,"],"answers my":["question,"],"answers or":["code."],"answers. Everyone":["is"],"antistrophe, and":["epode."],"anxiously waiting":["for"],"any Enumerable":["into","without"],"any Enumerable.":["Maybe"],"any Regex":["comparisons"],"any Unicode":["letter,","uppercase"],"any `Enum`":["functions."],"any additional":["information"],"any alternative":["to"],"any benefits.":["I"],"any better,":["but"],"any better.":["So"],"any call":["in"],"any capital":["letters"],"any case":["`==","I","just","that"],"any case,":["I","I"],"any case.":["Incoming"],"any chance":["at"],"any changes":["for"],"any clearer":["if"],"any code":["(within","in"],"any code.":["Line"],"any content":["after"],"any convention":["or"],"any count":["operation"],"any document":["on"],"any duplication":["and"],"any enumerable,":["ranges","which"],"any errors":["or"],"any examples":["of"],"any explicit":["recursion"],"any extra":["characters"],"any feedback":["on"],"any feedback,":["on"],"any feedback.":["This"],"any feel":["for"],"any function":["that"],"any functions":["that"],"any further":["than"],"any good":["libraries"],"any guidelines":["for"],"any help":["while"],"any idea":["why"],"any improvement":["in"],"any in":["the"],"any invalid":["digit"],"any kind":["reader"],"any language":["with"],"any letter":["and","(any"],"any letters":["and","as"],"any letters,":["not"],"any lines":["of"],"any links":["to"],"any logical":["reason"],"any meaningful":["refactoring"],"any memoize":["of"],"any mistakes":["I"],"any more":["than","\"right\".","feedback"],"any more,":["other"],"any multiples":["of"],"any necessary":["pre-processing"],"any need":["to"],"any nits":["on"],"any non-English":["unicode"],"any non-digits":["with"],"any non-regex":["tools"],"any of":["your","the","this","the","them!","the","those"],"any opinions":["-"],"any other":["kind","method","way","alternatives","improvements?","way","issues","language"],"any packed":["set"],"any particular":["reason","reason","reason","binary"],"any performance":["increase","improvement"],"any plans":["to"],"any point":["until"],"any presumptions":["about"],"any questions,":["but"],"any regexes.":["Check"],"any semantics":["other"],"any simple":["way"],"any skipped":["or"],"any sort":["on"],"any special":["case","logic"],"any string":["interpolation,"],"any such":["implementation."],"any suggestions":["for"],"any suggestions.":["But"],"any tests":["in"],"any tests/specs,":["I"],"any thoughts":["on","on"],"any thoughts?":["Or"],"any time":["soon.","you","soon."],"any tips":["and","anyone"],"any to":["give."],"any type":["of"],"any underlying":["data"],"any unicode":["letter).","letter?"],"any violation":["of"],"any way":["to","to","to","you","to","to","to","to","to","to"],"any word":["will"],"any) of":["the"],"any` above":["it"],"any`. However":["Elixir's"],"anymore. I've":["finished"],"anymore. This":["has"],"anyone can":["please","tell"],"anyone else":["has"],"anyone ever":["re-orders","re-orders"],"anyone from":["offering"],"anyone has":["on","any"],"anyone know":["why"],"anyone knows":["a"],"anyone says":["anything"],"anyone show":["me"],"anyone would":["know"],"anyone's) on":["this"],"anything *to*":["like"],"anything about":["your","this","Erlang","the","`reverse`","Elixir"],"anything at":["all,"],"anything better":["than"],"anything but":["a"],"anything by":["patching","using"],"anything else":["than","case)"],"anything else.":["(Note"],"anything in":["`counts`.","it","this","this"],"anything like":["that"],"anything not":["a"],"anything other":["than"],"anything over":["having","a"],"anything particularly":["interesting"],"anything provided":["by"],"anything so":["far,"],"anything splitting":["out"],"anything suitable":["in"],"anything that":["says","is","lets","explains","implements","implements","seemed"],"anything that's":["not","not"],"anything to":["nitpick","disagree","make","do"],"anything with":["it","nils"],"anything wrong":["with","with"],"anything. It's":["the"],"anything. Probably":["because"],"anyway to":["see"],"anyway, at":["all."],"anyway, just":["to"],"anyway. I":["did"],"anywhere else.":["Usually"],"anywhere in":["the"],"anywhere so":["when"],"anywhere, the":["attribute"],"apart those":["responsibilities"],"api\" methods":["like"],"apologies if":["that's"],"apologies. I":["'thought'"],"apologize if":["my"],"apparent here.":["One"],"apparent that":["I"],"apparent to":["the"],"apparently Enum.join":["takes"],"apparently not!":["Thanks!"],"apparently the":["Ruby/Elixir/Javascript"],"appeal to":["you"],"appealing, 1,":["3,"],"appear as":["if"],"appear in":["your"],"appear that":["there's","there's"],"appear to":["be"],"appear.Anyway I'm":["happy"],"appearances, you":["cannot"],"appears after":["submit,"],"appears on":["line"],"appears that":["both"],"appears to":["be","have","be"],"append `u`":["to"],"append and":["concat"],"append becomes":["ever"],"append behaves":["oddly"],"append implementation":["got"],"append implementation.":["The"],"append is":["a","notoriously","0","2","4","(roughly)","(roughly)"],"append it":["means"],"append lists":["in"],"append takes":["slightly"],"append two":["lists"],"append version":["of"],"append we":["have"],"append(acc, l))":["end`?","end`","end`"],"append, so":["it","it"],"appending a":["newline"],"appending in":["the"],"appending is":["O(n)."],"appending the":["roman"],"appending using":["`++`.","`++`."],"appends `e`":["to"],"appends and":["the"],"appends for":["lists"],"applicable. :":[")"],"application it":["could"],"application of":["pattern"],"application or":["`function"],"application syntax,":["something"],"application syntax:":["`is_match(word,"],"application to":["work"],"application's needs":["would"],"application) it":["could"],"application. But":["I"],"application. I":["used"],"application. I.e.":["don't"],"applied function":["to"],"applied functions":["that"],"applied tail":["recursion.","recursion"],"applied without":["thinking."],"applies to":["all","Elixir's"],"apply concepts":["that"],"apply them":["here,"],"apply this":["to","functions"],"apply your":["advice,","advice,","suggestions"],"applying a":["name"],"applying multiple":["arguments."],"applying the":["arguments"],"applying them.":["Can"],"apprach this,":["on"],"appreciate any":["tips","feedback."],"appreciate feedback":["on"],"appreciate it":["in"],"appreciate more":["direction"],"appreciate seeing":["this"],"appreciate thoughts":["on"],"appreciate you":["always"],"appreciate your":["help"],"appreciate. Thanks":["in"],"appreciated since":["I"],"appreciated! Thanks!":[":"],"appreciated. Thanks":["as"],"approach -":["I'm"],"approach --":["dictionary"],"approach I've":["seen,","done"],"approach `chars/1`.":["`0.10.1`"],"approach and":["replaced"],"approach as":["you,","@rickey.","I've"],"approach being":["truly"],"approach but":["it"],"approach certainly":["passes"],"approach even":["simple"],"approach for":["string","escaping"],"approach has":["some"],"approach in":["my","the"],"approach is":["fine.","that","valid.","good.","simple","to","a"],"approach of":["calling","identifying","this","having"],"approach passes":["tests."],"approach that":["I","you"],"approach the":["system","system","system","system","system"],"approach this":["way."],"approach to":["use","the","consider","is_anagram?.","downcasing","the","iterations","this"],"approach using":["dispatch.","dictionaries","dictionaries."],"approach works":["fine"],"approach would":["make","allow","look."],"approach! Very":["organized."],"approach, I":["really"],"approach, and":["I"],"approach, as":["I"],"approach, but":["would","it"],"approach, just":["two"],"approach, one":["which","that"],"approach, with":["the"],"approach. Any":["and"],"approach. Some":["specific"],"approach. The":["tradeoff","only"],"approaches here:":["using"],"approaches pass.)":["I"],"appropriate `HashDict`":["than"],"appropriate for":["the"],"appropriate given":["the"],"appropriate here?":["I'm"],"appropriate in":["languages","this"],"appropriate or":["not."],"appropriate regex":["to"],"appropriate response.":["But"],"appropriate to":["use","me."],"appropriate when":["the","you"],"appropriate): 1.":["silence,"],"appropriately solving":["the"],"appropriately. I'd":["use"],"approval queue...":["\u003c3"],"approval, but":["I'm"],"approval. It":["will"],"approve it,":["don't"],"approve it?":["or"],"approved, and":["this"],"approximately 0":["units","units"],"arabic \u003c":["value"],"arabic number":["is"],"arbitrarily nested":["structure.","lists"],"arbitrarily nested.":["Everything"],"arbitrary beverages,":["you'd"],"arbitrary factors,":["but"],"arbitrary requirement":["in"],"arbitrary special":["case."],"architecture might":["be"],"are \"only\"":["the"],"are \"truthy\"":["in"],"are '-\u003e'":["and"],"are 'any'":["is"],"are 7":["submissions"],"are English":["words","words"],"are L6":["necessary?"],"are UTF-8":["encoded"],"are UTF8":["binaries."],"are _not_":["a"],"are _very_":["thorough."],"are `\u003c\u003c\u003e\u003e`,":["`_codepoint`"],"are `entries`":["lists"],"are `fn`":["and"],"are `is_aggressive?`":["and"],"are a":["pain","relatively","bit","few","little","good","few","few","few"],"are about":["strings"],"are absolutely":["right."],"are actual":["letters"],"are actually":["enforcing"],"are adding":["a"],"are all":["new","Kernel","on","valuable","excellent,","at","fairly","tail","upper","caps.","identical","uppercase."],"are allowed":["at","in","by"],"are almost":["there,","all"],"are already":["the","there","char"],"are also":["common"],"are alternatives":["to"],"are amazing":["at"],"are an":["instance","Erlang"],"are anagrams":["when","or","of","into","and"],"are anagrams,":["but"],"are any":["good","plans","letters"],"are arbitrarily":["nested"],"are asking":["a"],"are asserting":["that"],"are available":["doesn't","(i.e."],"are based":["on."],"are being":["passed","debated"],"are binaries":["encoded","and"],"are boolean.":["This"],"are both":["used"],"are breaking":["if"],"are broader":["than"],"are broken":["up"],"are by":["definition"],"are called":["functions,","and","\"nitpicks\""],"are capital.":["It"],"are cases":["where"],"are checked":["to"],"are closer":["to"],"are coming":["in."],"are common,":["but"],"are complex,":["but"],"are concerned":["that"],"are concise,":["but"],"are considered":["to","to"],"are contiguous.":["Looks"],"are cool":["but"],"are correct":["that"],"are correct,":["the"],"are correct.":["This"],"are created":["in"],"are currently":["doing"],"are defined":["in","in","or"],"are definitely":["keeping"],"are different":["functions","add"],"are discouraged":["in"],"are dissimilar":["enough"],"are doing":["this!","both","well!","a"],"are doing?":["Will"],"are easier":["to"],"are easy":["to","to","to","to","to","to","to"],"are efficiencies":["that"],"are elixir":["`Enum`"],"are empty":["(which"],"are enjoying":["exercism"],"are enumerable,":["so"],"are equivalent":["to"],"are exceptionally":["powerful"],"are executing":["String.to_char_list"],"are exercises,":["not"],"are expecting":["the"],"are exposing":["your"],"are fairly":["hard"],"are fine":["for"],"are focused":["small"],"are focusing":["on"],"are full":["of"],"are fun.":["Why"],"are going":["to","to"],"are good":["terms","too,"],"are hacks":["to"],"are happily":["accepted."],"are hard":["to",":/","functions"],"are hearing,":["it"],"are helpful":["to"],"are here,":["but"],"are how":["Bob"],"are identical":["except"],"are immediately":["clear."],"are immutable":["linked"],"are immutable.":["For"],"are implemented":["as","and"],"are implemented.":["Since"],"are important.":["is_saying_nothing?"],"are in":["use.","the","effect","ASCII.","general","trouble","a","the","the","terms"],"are indented":["oddly."],"are integers":["(65),"],"are internal":["to"],"are just":["returning","suggestions","as","copy","so","a","a","a"],"are kind":["of"],"are language":["from"],"are later":["being"],"are lazy":["and"],"are legal":["in"],"are likely":["others,"],"are limited,":["so"],"are lists":["of"],"are longer":["than"],"are looking":["good!","for.","for"],"are many":["things","ways"],"are matching":["signify"],"are minor":["points"],"are missing.":["There's"],"are more":["generic","plain","like","complex,","elegant.","or","efficient"],"are more-or-less":["easy"],"are most":["useful"],"are much":["clearer"],"are multiple":["modules"],"are multiples":["of"],"are nails":[":-)"],"are named":["for","in","after","with"],"are named.":["For"],"are never":["a"],"are newer":["to"],"are nitpicking,":["in"],"are no":["classes","characters","standard","unicode","keywords","letters"],"are not":["supported...","necessary,","likely","of","predicate","right","just","as","necessarily","it","needed","present","needed)","tail","necessarily","as","needed","needed.","written"],"are now":["inline","tail"],"are of":["the","my"],"are off":["the"],"are often":["a","marked"],"are on":["the","the"],"are only":["required","visible","needed","needed","three","really"],"are optimized":["for"],"are other":["things","parameters"],"are others":["where"],"are overcomplicating":["things."],"are parentheses":["around"],"are partially":["applied"],"are passed":["to"],"are passing":["to"],"are perfectly":["clear."],"are performance":["benefits"],"are personal":["preferences,"],"are powerful":["but"],"are preferred,":["in"],"are pretty":["easy","common","awesome","simple","much"],"are private":["and","to","`defp`","(`defp`)"],"are private,":["the"],"are probably":["good"],"are protecting":["against"],"are quite":["that","an"],"are rather":["limited","limited"],"are really":["valuable!","just","a","just"],"are redundant":[")"],"are referring":["to","to,"],"are relatively":["rare"],"are relevant":["to"],"are represented":["in"],"are required":["when"],"are responding":["to."],"are restricted":["in"],"are right":["on","on","about","in","that","next"],"are right,":["It","didn't"],"are right.":["Removing","Simplified","Fixed.","This","I"],"are run":["for"],"are satisfied":["with"],"are saying":["him."],"are several":["shorter"],"are short":["enough,","has"],"are similar":["and"],"are simply":["collections","syntactic"],"are slightly":["different,","more"],"are snake_case":["so"],"are so":["common"],"are some":["space","edge","tricks"],"are something":["I"],"are sorted":["character","(hint:"],"are sorted.":["Interesting.","Then"],"are sorting":["the"],"are spaces":["in"],"are split":["into"],"are spot":["on"],"are still":["applicable.","commented","repeating"],"are straight":["ports"],"are string":["manipulation"],"are stripped":["rather"],"are submissions":["you"],"are subtly":["different","different"],"are supported.":["(see"],"are supposed":["to"],"are talking":["about."],"are tested":["as"],"are testing":["for","the"],"are tests":["in","for"],"are the":["same.","same.","first","same.","parentheses","way","more","same","common","exceptions,","star","same","same."],"are there":["String","other","more"],"are they":["properties"],"are they?":["They"],"are things?":["\"."],"are thousands":["of"],"are tiny":["and"],"are too":["entangled","many","much"],"are totally":["right","right.I'm"],"are traditional":["on"],"are true.":["So,"],"are trying":["to"],"are two":["basic","codepoints","very","different"],"are typically":["suffixed"],"are ugly":["and"],"are uniquely":["identified"],"are used":["*inside*","in"],"are used.":["`cond`"],"are useful":["for"],"are using":["`defp`,","`Regex.scan`","`Dict.put`"],"are usually":["frowned"],"are valid":["for","points,"],"are very":["common","much","common","reasonable."],"are way":["down"],"are ways":["to"],"are we":["doing"],"are within":["strings."],"are wonderfully":["expressive."],"are you":["guarding","familiar","familiar","using?","deciding","happy?\"","adding","trying","sure","importing","sure","discouraging","the","suggesting","using?","counting"],"are you'll":["find"],"are your":["thoughts"],"are) plus":["a"],"are), then":["it"],"are, but":["it's"],"are, frankly,":["odd."],"are, just":["pass"],"are_not_identical?(word_a, word_b)":["do"],"area I":["don't","haven't"],"area code":["had"],"area for":["confusion"],"area of":["syntax"],"area_code (imagine":["bad"],"areas since":["you"],"areas that":["do"],"aren't (for":["now)"],"aren't a":["part"],"aren't all":["symmetrical"],"aren't atoms,":["then"],"aren't based":["on"],"aren't equal":["without"],"aren't in":["the"],"aren't intended":["to"],"aren't perfect,":["but"],"aren't really":["all"],"aren't right":["and"],"aren't shy":["about"],"aren't there":["should"],"aren't very":["idiomatic."],"arg comes":["first"],"arg needs":["some"],"arguably be":["more"],"argue that":["just","it","the"],"argue whether":["it's"],"argue with":["that."],"argued that":["the"],"argument (it's":["`O(n)`)"],"argument __info__":["function"],"argument `s`":["don't"],"argument and":["the"],"argument as":["a"],"argument due":["to","to"],"argument for":["either","handling","the"],"argument form":["of"],"argument in":["the","the","function","line"],"argument is":["that","interesting,","what"],"argument it":["was"],"argument name":["for"],"argument of":["the","an","the"],"argument provided":["implicitly"],"argument that":["is","you","there"],"argument to":["something","`String.ends_with?`","\u003ccode\u003egenerate_counts\u003c/code\u003e","`fact`","the","the","higher","`bottle_phrase`","`Words.count/1`","the","`count`","be","`Enum.map`,","reduce","a","append,","a","append,","Regex#replace/4"],"argument using":["a"],"argument version":["do"],"argument) and":["`foo/2`."],"argument) grows?":["Given"],"argument, as":["described"],"argument. (see":["lines"],"argument. I":["think"],"argument. Much":["more"],"argument? I":["haven't"],"arguments (i.e.":["`def"],"arguments and":["it's"],"arguments are":["used.","full","in","most"],"arguments as":["the"],"arguments because":["of"],"arguments but":["I"],"arguments could":["be","be"],"arguments directly":["from"],"arguments either":["way."],"arguments for":["and"],"arguments in":["functions"],"arguments is":["interesting"],"arguments not":["surrounded"],"arguments of":["`counts,"],"arguments route":["you"],"arguments so":["you"],"arguments that":["it"],"arguments to":["functions,","`reduce_with/3`"],"arguments when":["calling","calling"],"arguments wont":["matter?"],"arguments would":["make"],"arguments). I":["can"],"arguments, but":["maybe","that"],"arguments, for":["example,","example"],"arguments, i.e.":["`defp"],"arguments. But":["I"],"arguments. I":["dunno"],"arguments. In":["Erlang"],"arguments. Sometimes":["splitting"],"arguments. This":["is"],"arguments: `&append/2`":["(the"],"arguments: trailing":["dots"],"arguments; I":["get"],"arithmetic, logical,":["type"],"arithmetic. So,":["I"],"arities are":["different"],"arity (the":["number"],"arity error:":["#Function\u003c0.55315932"],"arity greater":["than"],"arity was":["the"],"arity work":["for"],"arity) .":["q.v."],"aromatically get":["both"],"around I":["see"],"around THAT":["much"],"around `&1":["-"],"around `HashDict.new`":["are","but"],"around `String.downcase`,":["since"],"around `zip`'s":["boneheaded"],"around a":["bit.","lot"],"around and":["use"],"around any":["more,"],"around arguments":["when","when","to"],"around at":["the"],"around because":["if"],"around for":["a","everything..."],"around function":["arguments","arguments","arguments.","parameters","parameters."],"around in":["the","the","the"],"around it":["yet."],"around it,":["but"],"around list":["comprehensions"],"around more":["with"],"around my":["matches","code"],"around so":["much.","it"],"around that?":["or"],"around the":["8-minute","parameters.","Elixir","code","functional","`{a,","fact","function","capture"],"around things,":["it's"],"around this":["style"],"around though":["as"],"around to":["get","provide","nitpick"],"around using":["parens"],"around version":["`0.10.2`"],"around with":["ruby,","stuff.","the","using"],"around, #{bottles_left}":["#{bottle_classifier(bottles_left)}"],"around, #{num-1}":["bottle#{if"],"around, no":["more","more"],"around, so":["both"],"arrange things":["so"],"array back":["into"],"array is":["not"],"array of":["arrys","characters,","words"],"array), but":["did"],"array, so":["you"],"arrays directly.":["But"],"arrays in":["my"],"arrived at":["a"],"arriving at":["this."],"arrow being":["on"],"arrys +":["list/binary"],"article), it":["might"],"article](http://pminten.github.io/blog/2013/09/12/elixir-patterns-abstract-data-structures/) about":["that"],"artificial 6":["digit"],"as \"&amp;1":["+"],"as \"being":["quiet\"."],"as \"cryptic":["abbreviations\"..."],"as \"my":["local"],"as \"premature":["optimization\""],"as \"you":["can"],"as &amp;update/2":["and"],"as 'ugly'":["at"],"as *content*":["rather"],"as 0":["if"],"as 100%":["caps)."],"as 3,":["I"],"as @esmeralda":["suggested"],"as @mossie":["and"],"as @petra":["says,"],"as @phyllis":["said,"],"as DRY":["it's"],"as Elixir…":["so"],"as I":["know","keep","said","have.","haven't","understand","think","say","could","did","did","did","don't","wanted","can.","would","hadn't","could","don't","solve","suspected","could"],"as I'd":["like"],"as I'll":["go"],"as I'm":["not","still","going"],"as I've":["taken"],"as Jeremy":["said"],"as PhoneValidation":["will"],"as Rev":["1."],"as Russian.":["For"],"as String.ends_with?/2.":["I"],"as `%S\"(\\1)":["\\2-\\3\"`"],"as `&&":["1`)."],"as `&(&1":["+","+"],"as `&(1":["+"],"as `&(String.length(&1)":["=="],"as `&[&1|&2]`.":["The"],"as `&[student|&1]`,":["the"],"as `&amp;Kernel.+(&amp;1,":["1)`,"],"as `&normalize_word/1`.":["Which"],"as `&{":["&1,"],"as `&{&1,":["count(strand,"],"as `(&":["&1)"],"as `(speak":["|\u003e"],"as `...":["!="],"as `1..3`),":["so"],"as `:lists.seq(from,":["to,"],"as `?`":["are"],"as `?a":["+"],"as `@carrie":["'ATCG'`"],"as `Dict.update(counts_hash,":["word,"],"as `Dict.update(dict,":["char,"],"as `Enum.filter(candidates,":["&anagram?(word,"],"as `Enum.map(dna,":["&transcribe/1)`."],"as `Enum.map_join":["[1,2,3],"],"as `Enum.map`.":["It"],"as `Enum.reduce`":["is"],"as `Enum.reduce`.":["It's"],"as `Hash.new(default)`":["for"],"as `HashDict.update(":["hash,"],"as `HashDict`),":["but"],"as `Regex.match?(r/^[\\p{Lu}\\P{Ll}]+$/)`":["using"],"as `Stream.map":["|\u003e"],"as `String.codepoints":["\"A\""],"as `String.downcase":["&1)`,"],"as `String.ends_with(phrase,":["\"?\")`."],"as `String.ends_with?(input,":["\"?\")`."],"as `String.ends_with?(s,":["e)`.","\"?\")`."],"as `String.ends_with?(text,":["\"?\")`."],"as `String.ends_with?`.":["You've"],"as `String.starts_with?(a,":["b)`."],"as `String.strip(phrase)":["=="],"as `String.to_char_list!(word)":["|\u003e"],"as `[function.(x)":["|"],"as `[roman,":["translate(...)]`"],"as ```":["word"],"as ```Words.count()```":["with"],"as `a":["|\u003e"],"as `acc`":["for"],"as `append(list_with_1000_elements,":["list_with_million_elements)`.","list_with_million_elements)`."],"as `baz":["|\u003e"],"as `bench.ex`":["and"],"as `defp":["quiet?(nil),"],"as `f":["(a","(x"],"as `f(a)":["|\u003e"],"as `foo(something)`":["it"],"as `if":["d","cond"],"as `replace_thymidine`,":["which"],"as `s":["==","==","==","==","=="],"as `silent?`":["rather"],"as `sorted_base_letters":["=="],"as `telling_me_something_unimportant?`":["doesn't"],"as a":["bit","way","first","pipeline","`@bernice`","premature","module","default","different","list,","string,","string","parameter,","conditions","separate","string","potential","function","list","unified","parameter","second","very","format","function","genuine","function","parameter.","reader,","special","list.","fit.","possible","validation","reader","good","real","name.","cherry","point","method","module","whole,","way","one-liner","general","lot","result","result.","constant","second","String","single","valid","sign","\"larger\"","public","plain","one-liner,","problem.","validation","pipeline","private","parameter.","`filter`","function","save","good","`case`.","word","parameter","specific","special","function","fold","variable","regex","result","user","private","bit"],"as abstracting":["`true`"],"as accusatory":["and"],"as always":["for","for"],"as always,":["@nella.","@eleonore!"],"as an":["\u003ccode\u003eelse\u003c/code\u003e","argument","empty","echo","alternative","argument,","argument","attribute,","attribute","opportunity","`if`.","Enum.reduce.","interface","example"],"as any":["particular"],"as as":["`s"],"as assert":["is"],"as being":["close"],"as better":["usage","usage"],"as binary":["in","0.\""],"as binary,":["but"],"as browsing":["the"],"as building":["a"],"as bytes":["and"],"as character":["ordinals."],"as characters":["instead"],"as clauses.":["But"],"as clean":["as"],"as code":["brevity."],"as comparing":["two"],"as complete,":["you"],"as cond":["and"],"as constants):":["`@oma"],"as defined":["by"],"as described":["in"],"as difficult":["of"],"as done":["so","so"],"as done,":["sorry."],"as easily":["extract"],"as empty":["strings"],"as evil":["as"],"as explicit,":["but"],"as facts.":[";)"],"as familiar":["with"],"as far":["as","as","as","as","as"],"as fast":["as"],"as few":["regexes","programs"],"as fold)":["pattern."],"as food":["for"],"as for":["detecting"],"as function":["definitions","clauses).","values"],"as functional":["a"],"as general":["as"],"as going":["to"],"as good":["as","as"],"as guard":["clauses","clauses,"],"as guards.":["I"],"as hard":["to"],"as he":["was"],"as how":["that"],"as if":["shouted).","it","you","it"],"as implementation":["details."],"as in":["Erlang.","English).","teenager...","many","perfectly","those"],"as ints,":["yet"],"as is":[":)"],"as is,":["or","but"],"as it":["seemed","expresses","should):","often","does","can","is.","would","really","serves","is.","splits","makes","feels","could.","stands","can","doesn't","might","just","can","sounds","does"],"as it's":["parent","indeed","really","easy","immutable,","intended","designed"],"as its":["input."],"as java":[":",":"],"as just":["`true`."],"as katrina":["would"],"as lazy":["as","as"],"as left":["folding"],"as list":["pattern"],"as long":["to","as","as","as","as","as","as","as","as","as"],"as magic":["numbers."],"as map,":["filter"],"as more":["elegant."],"as most":["people"],"as much":["as","data","as","as","noise","duplication","about","as","code,","as"],"as much.":["What"],"as multiple":["definitions"],"as my":["comment","submission]","improvement","accumulators."],"as natural":["when"],"as naturally":["as"],"as needing":["to"],"as new":["to"],"as of":["Elixir","starting"],"as one":["boolean"],"as one-liners.":["Also"],"as opposed":["to","to","to","to","to","to","to"],"as optimised":["as"],"as optional":["params."],"as otherwise":["it"],"as parameters":["3"],"as part":["of","of","of"],"as people":["don't"],"as per":["your","your","@cecelia's"],"as possible":["while","for","to"],"as possible,":["it","so","but"],"as possible.":["But","Its","The"],"as powerful":["as"],"as preferred":["ways"],"as pretty":["self"],"as prevalent":["as"],"as private":["functions","be","a","functions","functions","functions","using"],"as private,":["but"],"as private?":["Otherwise"],"as ranges":["are"],"as separate":["codepoints).","functions,","\"cond\""],"as shouting.":["You","You"],"as simple":["as","a","as","as","as","as"],"as small":["as"],"as someone":["who"],"as something":["I","to"],"as storing":["the"],"as strings":["are"],"as strings,":["any","not"],"as strings.":["I"],"as suggested":["by","by"],"as synonymous":["to"],"as tests":["will"],"as that":["was","is","seems","returns"],"as the":["Ruby","functions","first","initial","test","first","comparison","other","result","other","other","more","body","named","scan,","first","style","placeholder","first","equivalent","recursive","second","string","first","logic","left","target","numbers-only","delegates","accumulator","accumulator","other","function","first","return","candidate.","2nd","first","first","first","underlying","end","reverse","whole","implementation,","test","reverse","argument","last","condition","helper","regexes.","previous","implementation","name","function","`sort`","left","left","implementation"],"as there":["have","have","is","have","is"],"as they":["are","are"],"as they're":["defined"],"as this":["is","one","implementation,"],"as to":["not","what","why","be"],"as two":["words."],"as unfold.":["It"],"as update":["doesn't"],"as using":["`Regex.scan`"],"as usual,":["thanks"],"as well":["(i.e.","to","as","=)","as","in","as","as","as","pull","i.e.","as","but","as","as","(if","though)","as","with","to","as","just","as"],"as well,":["but","I","as","but","and","by","no","but","so","not","though","your"],"as well.":["It","I","I","Thanks",";P","I","Thanks!","One","That's",":)","For",":)"],"as well:":["`earth_years"],"as well?":["What"],"as what":["the","you"],"as whether":["the"],"as why":["I"],"as writing":["it"],"as you":["put","are","have","mention.","suggested,","can","know","can","might","can't","probably","would","have","want","go","don't","don't"],"as you'll":["be"],"as you're":["passing"],"as you,":["but"],"as your":["second","comment","accumulator.","suggestion"],"as yours.":["As"],"as-is for":["readability."],"as-is. The":["nesting"],"as: `Enum.count(strand,":["&(&1"],"ashamed I":["didn't"],"aside from":["`new`","one","one"],"aside. Would":["you"],"ask a":["question"],"ask for":["a"],"ask if":["you","you"],"ask on":["#elixir-lang"],"ask one":["final"],"ask specifically":["about"],"ask what":["you"],"ask why?":["Because"],"ask you":["to"],"asked Bob":["\"Bob,"],"asked for":["it"],"asked the":["question,"],"asking a":["question,"],"asking here...I've":["seen"],"asking if":["the"],"asking in":["private"],"asking questions":["about"],"asking the":["removal."],"asking them":["*why*,"],"asking what":["people"],"asking you":["a"],"asking, 3.":["shouting,"],"asking, silence,":["etc)."],"asking. I":["think"],"asking? Let":["me"],"asking?(greeting), do:":["greeting"],"asks whether":["the"],"aspects of":["Elixir:","it,"],"assembled, but":["rather"],"assert \"1234567890\"":["=="],"assert Teenager.hey(\"":["\")","\")"],"assert Teenager.hey(\"1,":["2,"],"assert Teenager.hey(\"УХОДИТЬ\")":["==","=="],"assert failure":["messages"],"assert is":["special"],"asserted the":["the"],"asserting that":["\u003ccode\u003eall_caps?\u003c/code\u003e"],"assign to":["a"],"assigned a":["name"],"assigned the":["```"],"assigning ```prepare_entry()```":["to"],"assigning it":["to"],"assigning that":["to"],"assignment comes":["out"],"assignment once":["it's"],"assignment, I'm":["not"],"assignment, a":["properly"],"assignment. Assignments":["feel"],"assignment. Please":["read"],"assignment. We":["just"],"assignments. I":["find"],"associated sounds?":["Could"],"associated with":["this"],"assume \"something":["or"],"assume `base`":["is"],"assume somehow":["your"],"assume that":["means","only"],"assume the":["idea"],"assume there's":["a"],"assume this":["works"],"assume using":["private"],"assume you":["mean","mean"],"assumed alpha":["would"],"assumed it":["did"],"assumed that":["it"],"assumed the":["purpose"],"assumed this":["was"],"assumes will":["be"],"assuming it":["would"],"assuming there":["is"],"assuming you":["are"],"assumptions at":["that"],"assumptions from":["other"],"asymptotic complexity":["though)."],"asymptotically better":["than"],"at \"?\"":["(alone)"],"at \"cond\"":["http://elixir-lang.org/crash-course.html#control_flow"],"at \"is_\"":["shows"],"at 1.0":["yet"],"at Dict.get":["for"],"at Dict.update.":["It"],"at Dict.update/4.":["I"],"at Elixir":["after"],"at Elixir's":["pipeline"],"at Elixir.":["I"],"at Kernel.SpecialForms.import/2.":["You"],"at Regex.scan":["and"],"at [elixir's":["unicode.ex](https://github.com/elixir-lang/elixir/blob/master/lib/elixir/unicode/unicode.ex)"],"at `Dict.update/3`,":["or"],"at `Dict.update`":["and"],"at `Dict.update`,":["which","it","it's","it"],"at `Enum.reduce`":["and"],"at `Enum.reduce`.":["To"],"at `HashDict.update/4`.":[";)"],"at `HashDict.update`":["--"],"at `List.flatten`":["in"],"at `List.zip`.":["In"],"at `Regex.scan`":["for?","for"],"at `Regex.scan`.":["It's"],"at `Regex.scan`?":["It"],"at `String`":["documentation."],"at `count`.":["I'll","I'll","I'll","I'll","I'll"],"at `different?`":["from"],"at `to_binary/1`,":["it"],"at a":["time.","micro-level,","working","different","single,","consistent","far,","glance."],"at all":["which","of","happy","in","possible!","if","rather"],"at all,":["Elixir","there","it","especially","it"],"at all.":["Try","The","It's","I'd"],"at alternatives.":["But"],"at and":["used"],"at catching":["an"],"at cleaning":["up"],"at compile":["time"],"at different":["places"],"at each":["Unicode"],"at elixir,":["it"],"at elixir-lang.org,":["which"],"at first":["sight","I","but","and"],"at first,":["but","like"],"at for":["now."],"at hand.":["Refactoring"],"at how":["`silence?\\1`"],"at http://elixir-lang.org/crash-course.html":["and"],"at http://www.regular-expressions.info,":["there's"],"at in":["the"],"at is":["the","the"],"at it":["using","you","the","as"],"at it,":["and","had"],"at just":["the"],"at least":["remove","in","to","conformant","in","in","ahead","one","tried","include","it's","a","for","for","when","one","one","one","how","to",":-)","not","tried.","one","half","one","some","one","that","more","one"],"at least,":["I","which","I"],"at least.":["For"],"at line":["18","12","19"],"at me.":["First,"],"at most":["one."],"at my":["code"],"at once":["in","which","with"],"at one":["place.","point"],"at parse":["time"],"at pattern":["matching."],"at performing":["complex"],"at reducing":["duplication,"],"at refactoring":["based"],"at some":["point.","point.","point.","point.","point","point.","point."],"at split":["but"],"at that":["myself","List.insert_at","time.","point.","way","and"],"at that,":["but"],"at the":["names.","twice","end","end","end","end","end","end","top","\"bob\"","next","next","new","expense","beginning","difference","end.","top-level","bottom","front","beginning,","end.","end","top","start/end","end","end","end","end","example","first","same","Erlang","end","function","top","end.","Erlang","functions","imports.","imports.","end","import","start","end","start","String.strip()","end","imports.","top","example","example,","moment)","end","same","other","promptings","lengths","pipe","docs","top","end","HashDict.new/2","same","top","recursion","docos","end.","beginning.","moment.","first","end","top","end","end","end","end).","source","same","end.","general","end","end","top","suitcase","test","`HashDict.update`","end","time"],"at their":["meaning,"],"at them,":["only"],"at this":["point","scale.","point.","exercise","for","point).","point,","point","point","version","exercise),"],"at this,":["I"],"at this.":["I"],"at using":["the"],"at what":["would","it","level","happens:","happens:","happens:","happens:","happens:"],"at whatever":["level"],"at with":["to_char_list."],"at work.":["Trying"],"at would":["be"],"at your":["structure","previous","solution.","code","solution","insistence"],"at, it":["can"],"at. In":["Elixir,"],"atom `:nil`":["to"],"atom and":["so"],"atom as":["a"],"atomic units":["is."],"atoms and":["then"],"atoms in":["a"],"atoms not":["in"],"atoms piped":["into","into"],"atoms to":["generate","give"],"atoms, then":["maybe"],"attach to":["the"],"attempt (&amp;1":["|&gt;"],"attempt as":["a"],"attempt is":["very"],"attempt to":["reduce"],"attempt was":["to"],"attempt, to":["get"],"attempt. I":["would"],"attempt. I'm":["still"],"attempted the":["easiest"],"attempting to":["use"],"attempts to":["avoid"],"attracting me":["to"],"attribute (those":["are"],"attribute and":["having"],"attribute as":["it"],"attribute behind":["a"],"attribute for":["days_in_gigaseconds"],"attribute initially,":["but"],"attribute like":["`@ines"],"attribute name":["doesn't"],"attribute of":["DNA,"],"attribute reader":["variable"],"attribute syntax":["I"],"attribute tag":["in"],"attribute to":["function"],"attribute using":["the"],"attribute values":["in"],"attribute, is":["there"],"attribute, or":["a"],"attribute. I":["was"],"attributes (`@carrie`)":["for"],"attributes -":["but"],"attributes adds":["to"],"attributes and":["executing"],"attributes are":["good","only"],"attributes as":["strings,"],"attributes at":["the"],"attributes behind":["a"],"attributes don't":["have"],"attributes for":["the"],"attributes in":["the"],"attributes just":["defined"],"attributes like":["`@zora`.","\u003ccode\u003equestion:"],"attributes now,":["but"],"attributes of":["other"],"attributes only":["need"],"attributes test":["is"],"attributes to":["eliminate"],"attributes whole":["abbreviated"],"attributes\" test":["to"],"attributes... Old":["habits,"],"attributes? I":["think"],"attributes? The":["only"],"augment the":["pattern"],"author checked":["for"],"author of":["Elixir,"],"author, requiring":["the"],"automatically *unpacked*":["them"],"automatically for":["`HashDict`"],"automatically inserted":["into"],"automatically inserts":["the"],"available (i.e.":["`to_list`)."],"available and":["what"],"available at":["that"],"available doesn't":["mean"],"available in":["your","guards.","the"],"available rather":["than"],"available to":["do","me,"],"available, but":["google"],"available. If":["I"],"average it":["needs"],"aversion to":["parentheses.","parentheses"],"avoid \"(CompileError)":["bob.exs:13:"],"avoid `cond`":["on"],"avoid a":["\"magic\""],"avoid accidental":["errors"],"avoid an":["`if`","empty"],"avoid any":["duplication"],"avoid being":["overly"],"avoid building":["intermediate"],"avoid calculating":["the"],"avoid checking":["for"],"avoid conditionals":["in"],"avoid doing":["that."],"avoid downcasing,":["though"],"avoid duplicating":["the"],"avoid duplication":["created"],"avoid duplication.":["I"],"avoid existing":["functions"],"avoid explicitly":["declaring","concatenating"],"avoid forcing":["the"],"avoid functions":["it"],"avoid generating":["an"],"avoid having":["to","to"],"avoid importing":["it."],"avoid in":["Elixir,"],"avoid infinite":["recursion."],"avoid it":["is","and"],"avoid it.":["The"],"avoid lines":["longer"],"avoid magic":["numbers"],"avoid mapping":["over","over"],"avoid recomputing":["the"],"avoid recursion":["if"],"avoid regular":["expressions"],"avoid repeating":["it.","the"],"avoid requiring":["nucleotide_counts"],"avoid running":["through"],"avoid second":["function"],"avoid several":["regexes"],"avoid that":["extra","construct"],"avoid the":["conditional,","redundancy","regex","regex","conditional","error","intermediate","repeated","overhead","explicit","explicit"],"avoid them":["unless"],"avoid unpleasantness":["involving"],"avoid using":["```","inline"],"avoid. Any":["thoughts?"],"avoided all":["the","of"],"avoided for":["simple"],"avoided most":["of"],"avoided the":["typical","non-tail-recursive","tail"],"avoided using":["`Enum.reverse`."],"avoided when":["there"],"avoided whenever":["possible.","possible"],"avoided. I":["used"],"avoiding magic":["strings."],"avoiding the":["insane"],"avoids creating":["a"],"avoids introducing":["a"],"avoids iterating":["over"],"avoids the":["overhead","deprecated","regex."],"avoids your":["arity"],"aware btw":["that"],"aware but":["apparently"],"aware is":["good"],"aware of":["Dict.update","the","--","defp.","the","even","the","that","flat_map","`String.to_char_list!`","that"],"aware ruby":["allowed"],"aware that":["methods","\"_\"","the","`\\w`","for"],"aware the":["groups"],"aware, which":["can"],"away from":["using","regex","Enum"],"away the":["answer\",","fact","need"],"away there":["with"],"away to":["make"],"away with":["just","the","it,","being","it:","copy"],"away\". I":["think"],"away, not":["sure"],"away, so":["it"],"awesome site,":["and"],"awesome suggestions,":["thanks."],"awesome to":["receive"],"awesome! Forgot":["about"],"awesome! Like":["Ruby"],"awesome! Love":["the"],"awesome, I":["didn't","couldn’t"],"awesome, never":["knew"],"awesomeness that":["is"],"awesomeness this":["new"],"awesomeness, which":["I"],"awhile to":["figure"],"awkward because":["it"],"awkward for":["the"],"awkward part":["of"],"awkward to":["me.","me.","me"],"awkward way":["of"],"awkward, which":["is"],"awkwardness that":["currently"],"a} -\u003e":["true;"],"b &&":["b"],"b -\u003e":["{"],"b //":["0)"],"b ==":["4`","c`","c`"],"b as":["parameters"],"b end)`,":["but"],"b ||":["b"],"b }":["-\u003e"],"b(...)`, it":["doesn't"],"b) ++":["c)"],"b)`. In":["general"],"b, a_len,":["b_len)`."],"b, a_len-1,":["b_len)`,"],"b, m,":["n,"],"b: ...)":["instead"],"b: ...]`":["syntax.","syntax."],"b_len)`, if":["that"],"b_len)`. That":["way"],"b` but":["as"],"b` could":["be"],"b` isn't":["interpreted"],"b` that":["would"],"back I":["could"],"back a":["little,"],"back again.":["I"],"back and":["forth","to","redid","understand","put"],"back at":["your","my"],"back from":["Beer"],"back in":["random"],"back into":["the","a","the","a","the"],"back just":["a"],"back my":["solution."],"back of":["the"],"back on":["performance","the"],"back through":["and"],"back to":["the","the","\"99","list?","a","it","strings","the","this","`Teenager`","you."],"back toward":["something"],"back up":["and","at"],"back when":["I"],"back with":["their"],"back, so":["you'd"],"back: I":["was"],"background info":["(you"],"background, happy":["to"],"backing list":["is"],"backslash, so":["`\\?`."],"backward, but":["I"],"backwards. Pipe":["sends"],"bad approach,":["but"],"bad arity":["error:"],"bad at":["all!","this"],"bad boy":["to"],"bad code":["by"],"bad cost.":["Say"],"bad either,":["just"],"bad idea":["to","because","to"],"bad idea,":["unless"],"bad idea.":["Interestingly"],"bad input":["at"],"bad it":["fails"],"bad number":["input","and"],"bad numbers":["fall"],"bad practice":["to"],"bad reasons,":["this"],"bad results":["for"],"bad sorting":["test."],"bad style?":["They"],"bad thing":["in"],"bad time:":["#{bad_time}\")"],"bad to":["write"],"bad typo.":["I"],"bad you":["haven't"],"bad! I'll":["change"],"bad(e), do:":["Enum.reduce(e,"],"bad, I":["think"],"bad, but":["don't"],"bad. A":["few"],"bad_time, _":["}"],"badly I":["am"],"badly for":["that."],"bag of":["tricks"],"bah I":["couldnt"],"balance as":["is,"],"balance between":["readability","simplicity","clarity","readability"],"balance of":["clarity/conciseness"],"banging at":["this"],"banging my":["head"],"banish from":["my"],"bank-account onward":["are"],"bar ==":["1,"],"bar(1) |\u003e":["foo()`."],"barely know,":["but"],"barewords approach":["is"],"barewords are":["quite"],"barf if":["I"],"barf. I":["like"],"base 2":["arithmetic."],"base at":["the"],"base cases":["for"],"base character":["+"],"base each":["time."],"base for":["each"],"base is":["2"],"base multiple":["times"],"base set":["of"],"base word":["once","once","once,","for"],"base word,":["I"],"base word.":["Maintains","That"],"base) is":["`downcase`'d"],"based approach":["here."],"based implementation":["to"],"based languages":["like","like","like","like","like"],"based on":["`README.md`?","`Enum.reverse`.","feedback.","what","the","it.","their","your","your","description.","the","the","ascii.","this","a","pattern","type","the","another","a","enumerators.","the","your","the","a","string","feedback","words,"],"based on.":["These"],"based. Could":["it"],"baseword once":["for"],"baseword only":["once,"],"basic approaches":["here:"],"basic extraction":["but"],"basic functions":["like"],"basic idioms.":["Should"],"basic tools":["instead."],"basic unfamiliarity":["with"],"basically a":["reimplementation","function"],"basically be":["saying,"],"basically does":["just"],"basically doing":["a"],"basically give":["you"],"basically hacking":["around"],"basically it":["would"],"basically just":["because","use"],"basically means:":["\"Why"],"basically read":["as"],"basically the":["same","exact"],"basically transcribing":["the"],"basically what":["I"],"basically works":["like"],"basically you":["would"],"basically, I":["was"],"basically, what":["really"],"basics. Since":["all"],"be \"by":["stopping"],"be \"deprecated\"":["as"],"be \"pop\"":["for"],"be \"silent?\"":["since"],"be 'proper'":["elixir."],"be *too*":["DRY"],"be 0.9.1":["-"],"be \u003ccode\u003e==\u003c/code\u003e":["to"],"be Elixir":["style"],"be I":["have"],"be O(n)":["(getting"],"be `&(&1":["=="],"be `1":["\u003c\u003c\u003c"],"be `?`,":["I"],"be `HashDict.new":["...`,"],"be `String.split/3`":["but"],"be `a`).":["There's"],"be `each_with_index`":["like"],"be `sanitize_and_extract`,":["or"],"be `silence?`":["or"],"be `tokenizer`":["no?"],"be a":["better","good","little","bit","more","good","part","good","bit","matter","little","descriptively","better","lot","one-liner","little","multi-clause","moot","box","better","matter","list","1024","good","named","more","better","better","good","specific","friend","bit","good","bit","little","part","sign","speech","little","good","good","little","more","lot","cleaner","true","\"Grownup\"","comparison","bit","little","@bertha","good","test","regex","bit","math","letter","long","good","little","big","cast","record","bit","small","little","favored","lot","fairly","word","problem","great","bit","very","little","word","new","bit","way","better","way","little","little","good","bit","little","way","cleaner"],"be able":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to"],"be about":["the","the"],"be abstracted":["away"],"be accessed":["outside","explicitly,"],"be accessible":["on"],"be accomplished":["using"],"be actual":["ampersands,"],"be added":["to"],"be adding":["a","a"],"be akin":["to"],"be all":["letters"],"be alternately":["written"],"be alternatively":["written"],"be always":["the"],"be ambiguous":["to"],"be an":["improvement?","idea","idea","idea","array,","advantage","attribute","exercise","alternative?"],"be annoying.":["Another"],"be another":["solution,"],"be any":["point","time"],"be applied":["without"],"be argued":["that"],"be as":["explicit,","if"],"be asking":["questions"],"be assembled,":["but"],"be at":["in"],"be avoided":["when","whenever","whenever"],"be avoided.":["I"],"be aware":["that","that","that"],"be because":["I'm","I've","I"],"be being":["unquoted"],"be best":["to","to","to"],"be better":["if","to","than","to","than","guidelines.","to","to","written","than","because","with"],"be better.":["What"],"be better?":["Simpler?"],"be bracketed":["in"],"be broken":["out","down"],"be called":["from","something","`true`.","first."],"be careful":["with"],"be case-insensitive,":["then"],"be caught":["by"],"be changed":["because"],"be cleaned":["up."],"be cleaner":["then","than","as"],"be clear":["enough."],"be clearer":["to","for","to","to","to","what","if"],"be clearer,":["though,"],"be closed":["within"],"be combined":["to","to"],"be combined,":["take"],"be commented":["in","on."],"be computed":["once","in"],"be concerned":["exclusively"],"be confused":["about"],"be considerably":["more"],"be considered":["shouted","shouting,","shouting?","shouting","here","w.r.t.","shouted.","shouting?","shouting?","yelling.","yelling."],"be consistent":["isn't"],"be converted":["to"],"be cool":["there."],"be cool.":["I"],"be copied":["in"],"be counted":["as","as"],"be coy,":["but"],"be created":["which","which","which","which","which"],"be created.":["But"],"be curious":["what","to"],"be declared":["as"],"be defining":["and"],"be differing":["opinion"],"be difficult":["to"],"be directly":["intelligible.","involved"],"be doing":["too"],"be done":["in","with","with","once","inside","by"],"be dropped":["in"],"be easier":["to","to","for","to","to","to","to","to","to","to","to"],"be easy":["to","enough","to"],"be eaten":["by"],"be efficiently":["merged","concatenated"],"be encoded":["the"],"be enough?":["For"],"be equivalent":["to"],"be evaluated":["and","while","is"],"be even":["more","more"],"be everything":["else."],"be expanded":["in"],"be expanding":["`shouting?`"],"be explicit":["about","recursion"],"be exported,":["too,","too..."],"be exposed":["as"],"be expressed":["more","as"],"be extended":["(i.e."],"be extracted":["into"],"be fairly":["minimal."],"be fast":["as"],"be faster":["concurrent?","than","to"],"be fine":["with"],"be fixed":["now,"],"be flagged":["for"],"be for":["\"is_\",","it","the","the"],"be found":["in"],"be fun":["to"],"be further":["factored"],"be gained":["here"],"be given":["to"],"be glad":["to.","to."],"be golden":["IMO."],"be gone":["and"],"be good":["candidates.","idioms"],"be great":["if","for"],"be great.":[":)"],"be greatly":["appreciated."],"be guards":["on"],"be had":["though."],"be handled":["in"],"be handled,":["perhaps"],"be handy":["for"],"be hard":["to"],"be have":["a"],"be helpful":["at"],"be honest":["I","I","I"],"be honest,":["I'm","I","I've"],"be horrible":["to"],"be hunting":["for."],"be idiom":["in"],"be immediately":["apparent"],"be implemented":["much","differently","in","with","in","with","in","in","by","with","(it's","just","in"],"be important":["for"],"be improved":["would","much","to","on"],"be improved,":["for"],"be improved.":["You"],"be in":["line","that","flux.","one","your","good","the","reverse"],"be in,":["say,"],"be inclined":["to"],"be inconsistent":["to"],"be incorporated":["into"],"be incorrect.":["E.g."],"be indented":["two"],"be indicative":["that"],"be inferred":["from"],"be inserted":["by","but"],"be inside":["`[`"],"be intended":["as"],"be interchangeable,":["but"],"be interested":["in","in"],"be interesting":["just"],"be interpreted":["as"],"be intuitive":["to"],"be inverted:":["`!odd?`."],"be invoked.":["This"],"be is_shouting.":["And"],"be its":["own"],"be joined":["together"],"be keen":["to"],"be latest":["iteration"],"be lazy":["with"],"be learning":["them"],"be left":["being"],"be less":["readable."],"be lifted":["when"],"be like":["ord('c')"],"be linearly":["relative"],"be looking":["for"],"be made":["either","more","asymptotically","slightly","from"],"be me":["but","but"],"be mentioned":["in"],"be minimized":["in"],"be minor":["from"],"be misremembering":["or"],"be missing":["something","something,","something."],"be misunderstanding":["what","what"],"be mixing":["the"],"be more":["complex","readable","semantically","clear","idiomatic","internally","descriptive?","semantically","semantically","in","readable.","readable.","readable","appropriate","expressive","clear","consistent","consistent","clear","readable","clear","idiomatic","meaningful?","or","readable","readable","modular?","valuable","concise","specific","expressive","inclined","expressive,","flexible","readable.","\"standard\"","readable.","readable","readable","expressives.","than","efficient.","specific.","efficient","readable.","verbose","efficient.","readable","straightforward","efficient","readable","idiomatic","efficient","expressive/clear","practical","readable,","readable.","efficient"],"be most":["useful"],"be move":["attention"],"be moved":["out"],"be much":["appreciated!","more","neater.","nicer","slower","appreciated.","appreciated."],"be my":["3rd","Haskell","last","OO","favorite"],"be named":["something","something","something","yelling?/1","things"],"be necessary":["specifically"],"be necessary?":["Aside"],"be needed":["at"],"be nested":["one"],"be never":["called"],"be nice":["if","and","if"],"be nicer":["if"],"be no-one":["around"],"be non-negative).":["This"],"be obvious":["why."],"be omitted":["in"],"be on":["a","a"],"be one":["word"],"be one-liners":["in"],"be ones":["without"],"be ordered,":["so"],"be overkill":["in"],"be overly":["picky.","complicated,"],"be parsed":["by","as"],"be part":["of"],"be partially":["a"],"be passed":["to","to","as"],"be pattern":["matching?\"","matching?"],"be possible":["to","to"],"be precomputed":["so"],"be preferred":["for"],"be preferred.":["So,"],"be prettier":["with","if","if:"],"be prime":["and"],"be private.":["You"],"be private?":["Some"],"be promising":["for"],"be properly":["formatted"],"be proven":["wrong."],"be public":["but","(for","as","as"],"be public?":["To"],"be quite":["useful.","right,","inefficient","a","as"],"be rather":["complicated."],"be really":["nice"],"be recalculated":["every"],"be recognized":["as"],"be recursive.":["No"],"be reduced":["in","to:"],"be refactored":["with","into"],"be refactored,":["so"],"be referring":["to."],"be relevant,":["or"],"be removed.":["Hopefully"],"be renamed":["to"],"be repeated":["twice"],"be replaced":["with","by","by","by","by","using","by"],"be required":["in"],"be responsible":["for","for"],"be returned,":["not"],"be returned.":["Thanks"],"be reused":["elsewhere,"],"be reviewed":["by"],"be rewritten":["without","as","as"],"be said":["that"],"be saying,":["when"],"be scrubbed":["prior"],"be separate":["filter"],"be separated":["out."],"be shortened":["a"],"be shorter":["and"],"be shouted,":["or"],"be shy":["of"],"be silence?":["(It's"],"be simpler":["if","and","than","to"],"be simplified":["as","if","by","further","by","by","using"],"be simplified.":["You"],"be slightly":["too","more","better","faster."],"be so":["readable!"],"be some":["extraction","extra"],"be something":["native","like","that","like","like:"],"be sorted":["is"],"be split":["up."],"be still":["another"],"be stripping":["out"],"be sufficient.":["Is"],"be sure":["to","that"],"be sure,":["but"],"be surprised":["if","if"],"be sweet":["to"],"be tail":["call"],"be taking":["a"],"be tested":["in"],"be that":["I","you","once","you"],"be the":["final","right","solution","first","ones","first","first","convention","identity","sole","same.","best","joiner","normalized","most","cause.","safest","last","default,","way","first","most","exception."],"be thrown":["if","for"],"be to":["include","see","just","add","test.","implement.)","put","reason"],"be too":["subtle","young","slow"],"be translated":["into"],"be traversed":["four"],"be traversed,":["with"],"be traversed/copied).":["That","That"],"be traversing":["the"],"be treated":["as"],"be true":["on"],"be trueish":["values."],"be trying":["to","to","to"],"be turned":["into","into"],"be two":["words,"],"be understood":["(imo)"],"be unicode":["aware"],"be updated":["to"],"be used":["whenever","down","in","in","on","with","before","to","of","to","in","in","like","in","in","directly.","in","to","in","with","by","directly"],"be useful":["here.","to","in","here:","here.","here.","here.","on"],"be useful,":["depending"],"be useful.":["But"],"be useful/necessary":["and"],"be very":["useful","readable."],"be visualising":["the"],"be way":["more","more"],"be what":["you"],"be willing":["to","to"],"be with":["with","`String.replace`"],"be without":["conditions,"],"be words\"":["-"],"be working":["on","when"],"be worth":["it,","trying,","adding","it","it","figuring","exploring.","taking"],"be worthwhile":["to","separating","to","to","to","to"],"be written":["like","as","in","as:","as:","as:","as","as","as","as","as","(personal","as","using","using","as","as","`date_plus_giga_seconds_to","as","as","as","as","as","as","`&{","as","as","with","using","as:","`chars","like","as","as","as","like","like","as","as:","as"],"be written\".":["It"],"be wrong!":["That's","That's"],"be wrong,":["though."],"be you":["have"],"be, although":["I"],"be, the":["relevant"],"be, you":["could"],"be. Could":["you"],"be. I":["would","took","don't"],"be. I'm":["still"],"be. Maybe":["you"],"be. Public":["interface"],"be. This":["is"],"be. Try":["using"],"beating my":["head"],"beautiful library":["it's"],"beautiful your":["code"],"because \"\"":["produces"],"because \"apply\"":["has"],"because @jacinto":["stays"],"because I":["think","wasn't","analyzed","had","internalised","didn't","was","do","think","needed","didn't","think","can't","think","wanted","wanted","lose","could","thought","added","saw","tried","have","was","was","didn't","felt","felt","just","am"],"because I'm":["not","not","not","more","bad"],"because I've":["been"],"because IMHO":["is"],"because IMO":["is"],"because \\n":["is"],"because `HashDict`":["output"],"because `String.upcase":["input"],"because `foo":["do"],"because `has_letters?`":["only"],"because `iolist_to_binary`":["is"],"because `shout`,":["`silence`"],"because a":["message"],"because append":["and"],"because everyone":["understands"],"because filter":["doesn't"],"because frankly":["it's"],"because if":["no","offers"],"because is":["the","more"],"because it":["prevents","speaks","resembles","is","seems","affects","made","returns","was","failed","is","reads","avoids","doesn't","looks","feels","looks","reminded","does","doesn't","was","doesn't","returns","allowed","felt","does:","gives","gives","seems","is","gives","gives","fails","triggers","felt"],"because it's":["necessary","misleading.","really","\"idiomatic\",","lazy","less"],"because map":["is"],"because most":["people"],"because my":["previous","first","brain"],"because nobody":["should"],"because of":["`is_binary(text)`.","a","this,","the","\"f\"","3","the","`Dict.merge`","concat","constraints","`Enum.slice`","how","how","the"],"because once":["the"],"because one":["letter"],"because otherwise":["`&`"],"because pattern":["matching"],"because pipelines":["are"],"because ranges":["usually"],"because specifics":["of"],"because split_into_words":["sometimes"],"because strings":["are","are"],"because tests":["can't"],"because that":["will","makes","has"],"because that's":["how","unambiguous,"],"because the":["input","parameters","operations","book","Ruby","tests","code","function","documentation","input","only","fact","conditions","functions","intent","goal","base","last"],"because them":["can"],"because there":["is","is","is"],"because there's":["not"],"because they":["return","work","are","are","are","can't."],"because they're":["named","there."],"because those":["have","boil","letters"],"because we're":["re-writing"],"because you":["had","often","have","are","use","can,"],"because you'll":["probably"],"because you're":["mixing"],"because, at":["least"],"become Heard,":["which"],"become a":["bit"],"become its":["own"],"become obvious":["when","when"],"become silence?":["and"],"becomes a":["bit","lot","performance","blank","performance"],"becomes annoying":["when"],"becomes apparent":["that"],"becomes easier":["to"],"becomes ever":["larger."],"becomes more":["palatable"],"been \"simpler\"":["by"],"been `music`,":["for"],"been a":["problem","while","weak"],"been adopting":["recursion"],"been banging":["at"],"been basically":["hacking"],"been bitten":["by"],"been coding":["for"],"been created,":["rather"],"been deprecated":["and"],"been doing":["Elixir","the","elixir"],"been exploring":["different"],"been fixed.":["https://github.com/kytrinyx/exercism.io/pull/465"],"been getting":["a"],"been giving":["much"],"been good":["to"],"been implemented":["in"],"been inlined":["in"],"been iterated":["on"],"been lurking":["in"],"been merged":["yet","for"],"been more":["than","idiomatic.)"],"been my":["favourite"],"been on":["my"],"been playing":["with"],"been reaching":["for"],"been recommending":["to"],"been removed.":["Thanks"],"been some":["significant","significant","significant"],"been sure":["what"],"been to":["submit"],"been traversed.":["In","In","In","In","In"],"been trying":["to","to"],"been updated":["since"],"been using":["HashDicts","reduce"],"been waiting":["so"],"been when":["I"],"been working":["on","through"],"been written":["with","as"],"beer --":["how"],"beer instead":["of"],"beer on":["the","the","the","the","the","the","the","the","the","the","the"],"beer\" is":["only"],"beer-song. It's":["not"],"beer.\\nGo to":["the","the"],"beer.\\nTake it":["down"],"beer.\\nTake one":["down"],"beer_counts(first, last),":["\"\\n\","],"beers\" back":["to"],"before \"silence?\"":["appears"],"before 5":["days,"],"before I":["really","implement","realized","found","destroyed"],"before `line`'s":["multi-line"],"before `shouting?`":["you"],"before `tokenize`,":["then"],"before a":["more"],"before all":["3","the"],"before and":["haven't","forgot."],"before anyone":["says"],"before arriving":["at"],"before but":["it's"],"before calling":["`do_accumulate`"],"before checking":["for"],"before doing":["the","complex"],"before each":["\u003ccode\u003edef\u003c/code\u003e"],"before for":["everything"],"before is_shouting?.":["That's"],"before it":["and","was"],"before it's":["needed."],"before matching.":["Is"],"before passing":["it"],"before posting":["the"],"before reducing,":["below"],"before scan":["the"],"before scoring":["the"],"before splitting":["will"],"before submission.":["See"],"before summing":["them?"],"before that":["doc","was"],"before the":["private","general","identicality","filter.","pipeline"],"before they":["are"],"before those":["character"],"before to":["be","remove"],"before using":["it"],"before you'd":["notice"],"before your":["sentence"],"before) with":["direct"],"before, a":["filter"],"before, an":["alternative"],"before, but":["I"],"before, we'll":["see"],"before. It's":["a"],"before. Not":["sure"],"before. Unfortunately":["it"],"beforehand so":["I"],"beginner as":["well"],"beginning (in":["`words`,"],"beginning of":["the","the","the","each","the","the"],"beginning with":["`iex&gt;`"],"beginning, indented":["one"],"beginning. Forgive":["me"],"begrudgingly realizing":["that"],"behave as":["guards."],"behaves in":["Erlang's"],"behaves oddly":["performance"],"behavior by":["rejecting"],"behavior factored":["into"],"behavior for":["nil,","this"],"behavior in":["a"],"behavior of":["`words`?","`Enum.zip`."],"behavior, based":["on"],"behavior, there's":["not"],"behavior, you":["could"],"behaviour either":["way."],"behaviour of":["course."],"behaviour than":["builtin"],"behaviour with":["this"],"behaviour) and":["`zip`"],"behind a":["function?","function"],"behind creating":["a"],"behind that,":["but"],"behind the":["scenes","separate","different","scenes"],"behind your":["code.","previous"],"being (in":["your"],"being *that*":["guy)"],"being UTF-8":["aware"],"being Unicode-specific.":[";-)"],"being `Dict.update(hash,":["nucleotide,"],"being `true`":["is"],"being a":["Elixir","total","teenager","giant","private","valid","truly"],"being accurate":["and"],"being almost":["as"],"being as":["simple"],"being at":["the"],"being aware":["of"],"being better":["localized"],"being brave":["enough"],"being calculated":["each"],"being checking":["with"],"being close":["enough"],"being compared":["to"],"being complicated":["it"],"being concise":["and"],"being debated":["in"],"being dense":["here."],"being empty.":["I'll"],"being enumerable,":["you"],"being implemented":["using"],"being in":["the","a"],"being inconsistent":["about"],"being initially":["the"],"being introduced":["to"],"being joined?":["I"],"being just":["a"],"being kept":["separate"],"being lazy":["and"],"being mentioned,":["since"],"being more":["concise.","efficient,"],"being much":["more"],"being named":["private"],"being nil":["to"],"being of":["little"],"being on":["the"],"being overkill.":["I"],"being overly":["terse."],"being part":["of"],"being passed":["in"],"being placed":["first,"],"being returned.":["That"],"being reused":["anywhere,"],"being rewritten":["to"],"being rewritten,":["it's"],"being said,":["they","it"],"being shouted":["at?"],"being shouting,":["but"],"being silent,":["but"],"being tail":["call"],"being the":["reversed"],"being truly":["functional...","nickpicky"],"being unquoted":["properly,"],"being used":["all"],"being vague,":["and"],"being very":["picky."],"being wrapped":["in"],"being wrongly":["identified"],"believe Elixir":["prefers"],"believe I":["didn't"],"believe `[]`":["should"],"believe everything":["in"],"believe it":["is"],"believe so,":["but"],"believe string":["interpolation"],"believe that":["the","constraint"],"believe the":["tests","way","reason","syntax","String.Chars"],"believe will":["only"],"believe you":["might"],"belong in":["the","Teenager."],"belong inside":["the"],"belongs in":["a","`count_words`."],"below 80":["chars"],"below and":["fix"],"below it's":["the","```"],"below the":["public","`hey`","generic","`foo`"],"below works":["for"],"benchmark it":["(tip:","to"],"benchmark. So":["I"],"benchmarking showed":["that"],"beneath `nucleotide_counts`":["instead"],"benefit as":["it's"],"benefit considering":["you"],"benefit do":["you","you"],"benefit does":["it"],"benefit from":["being","being","reading"],"benefit in":["that"],"benefit is":["negligible."],"benefit of":["making","nesting","consistency","not"],"benefit or":["is"],"benefit to":["having","assigning","the","sorting"],"benefits if":["the"],"benefits it":["brings."],"benefits or":["hurts"],"benefits to":["pushing"],"benefits. I":["think"],"beside the":["official"],"besides English.":["You"],"besides regexes.":["It"],"besides the":["area","set"],"best alternative":["without"],"best avoided":["for"],"best case":["for"],"best choice":["for"],"best example":["in"],"best is":["thinking"],"best library":["tool"],"best name":["for","for","because"],"best not":["to"],"best one.":["I"],"best place":["for"],"best practice":["to"],"best practices":["yet."],"best practices.":["Best"],"best reason":["to"],"best there":["too"],"best thing":["I"],"best to":["avoid","put","use","just","just","extract","write","use","use","be","consistently"],"best way":["to","to","here","right","to","to","to","to"],"best written":["as"],"best you":["could"],"best, just":["wanted"],"bet ``cond":["do``"],"bet there's":["some"],"bet you":["could"],"better I":["think!"],"better I'd":["appreciate."],"better Regex":["pattern"],"better `String.t`":["function..."],"better about":["this."],"better and":["makes","isn't","have"],"better as":["well,","it"],"better because":["it","it's"],"better by":["being"],"better choice":["would"],"better choice.":["For"],"better control":["structure","of"],"better domain":["language"],"better explanation":["you"],"better expressed":["with"],"better fit":["here"],"better for":["me","private","the"],"better function":["in"],"better guidelines.":[":-D"],"better idea":["of"],"better if":["```hey(\"\")```","you","you"],"better in":["my","this","DNA.to_rna."],"better is":["to"],"better localized":["primarily"],"better match":["because"],"better memory":["usage."],"better name":["for","than","for","to","for","--","for","for","for","would"],"better name,":["since"],"better name.":["Does"],"better name?":["What"],"better names":["for"],"better not":["to"],"better on":["the","elixir,"],"better or":["not","worse"],"better parameter":["name"],"better performance,":["since"],"better readability":["not"],"better readable":["inside"],"better repeat":["my"],"better sense":["if"],"better ship":["it"],"better shows":["what"],"better so":["that","I"],"better solution":["but","either.","would"],"better solution.":["The"],"better story":["(and"],"better stylistically":["it"],"better than":["my","_words.","the","my","the","the","_","this","`binary_to_list`","the","`binary_to_list`?","```","iteration","this.","foldr","`String.codepoints`,","recursion,","violating","to","O(n^2)","`String.codepoints`","the","your","this","using","if","regexes..."],"better that":["way."],"better this":["way."],"better time":["writing"],"better to":["use","`downcase`","use","pattern","just","use","use","go","use","work","call","go","name","add","use","me,","accumulate","use","search","use","make","call","just","be","use","use","not","use"],"better understand.":["I"],"better usage":["of","of"],"better use":["guards"],"better version":["of"],"better way":["in","to","than","yet.","to","to","to","to","to","to","and","which","to","to","to","that","that","will","of","of","to","to","to"],"better way,":["please","but"],"better way.":["Elixir","Elixir","Elixir","Elixir","Elixir"],"better ways":["to","around"],"better when":["the"],"better with":["the","is_","using","`|\u003e`","sets."],"better without":["parentheses,"],"better written":["as","as","as","as"],"better! Is":["there"],"better!! I":["suppose"],"better), and":["if"],"better, `String.length(s)":["=="],"better, although":["as"],"better, and":["it"],"better, because":["the"],"better, but":["if","there","it","I'm"],"better, extracting":["private"],"better, in":["the"],"better, maybe":["just"],"better, more":["descriptive","idiomatic"],"better, or":["at"],"better, probably":["because"],"better, thanks":[":-)"],"better, though":[":)"],"better. \"The":["Teenager"],"better. (If":["I"],"better. Also":["consider"],"better. At":["least"],"better. But":["a"],"better. Even":["though"],"better. First":["I"],"better. I":["just","do","can't"],"better. I'm":["sure"],"better. It":["might"],"better. Most":["functions"],"better. See":["the"],"better. Seems":["like"],"better. So":["think"],"better. Thanks":["for"],"better. The":["difference"],"better. This":["is"],"better. To":["me"],"better. Waiting":["for"],"better. What":["do"],"better. Will":["fix."],"better. `Regex.run/1`":["returns"],"better. `|\u003e`":["is"],"better/more consistent":["way"],"between \"CustomSet\"":["and"],"between \"Enum.sort\"":["and"],"between \"def\"/\"defp\"":["and"],"between \"do\"":["and"],"between #2":["and"],"between `\"\"`":["and"],"between `String.length`":["(imported"],"between `count`":["and"],"between `map`":["and"],"between `matches_anagram?/2`":["and"],"between `shouting?`":["and"],"between `total`":["and"],"between a":["string"],"between an":["Iterator"],"between being":["concise"],"between char":["lists"],"between clarity":["and","and"],"between cond":["clauses"],"between counts":["and"],"between doing":["idiomatic"],"between input":["and"],"between lists":["of"],"between lists,":["but"],"between readability":["and","and"],"between removing":["duplication"],"between shouted":["commands"],"between simplicity":["and","/"],"between the":["`sing_verse`","Ruby","`verse`","strings.","strings","strings.","strings.","strings.","name","expected","two","`filter_map`","first"],"between them":["explicit."],"between two":["strands","strands"],"between using":["\"is_question\""],"between verse":["and"],"beverage types,":["you'd"],"beverage types.":["With"],"beverages instead":["of"],"beverages, you'd":["currently"],"beware of":["`\\w`"],"bewildered that":["String.to_char_list"],"beyond `split`":["defined","defined"],"beyond the":["spec"],"beyond what":["the"],"beyond where":["it"],"big \"graph":["with"],"big deal":["for"],"big deal,":["but","just","but","though."],"big difference":["in","in"],"big disjunction":["like"],"big enough":["list.","list."],"big fan":["of","of"],"big flurry":["of"],"big graph":["with"],"big if-tree":["or"],"big part":["in"],"big problem":["rather","I"],"big win":["for"],"big would":["the"],"bigger fan":["of"],"bigger less":["ambiguous"],"bigger picture,":["there's"],"biggest Elixir":["codebase"],"biggest code":["in"],"biggest complaint":["about"],"biggest doubt":["about"],"biggest hurdle":["in"],"biggest problem":["with"],"biggest trade-off":["to"],"biggest uncertainty":[":-)"],"binaries and":["lists.","would","character"],"binaries encoded":["in"],"binaries first":["it"],"binaries if":["you're"],"binaries instead":["of"],"binaries is":["fairly"],"binaries since":["the"],"binaries that":["can"],"binaries to":["lists"],"binaries which":["can"],"binaries) per":["se,"],"binaries, and":["Erlang's"],"binaries, just":["don't"],"binaries, not":["lists,"],"binaries, right?":["So"],"binaries, they":["are"],"binaries. There":["isn't"],"binary (\u003c\u003c":["\u003e\u003e\u003e)"],"binary (sequence":["of"],"binary (what":["you'd"],"binary 0.\"":["So"],"binary approach":["is"],"binary concatenation":["operator"],"binary contents).":["In"],"binary digit":["should"],"binary e.g.":["```"],"binary etc.":["Can"],"binary for":["the"],"binary in":["elixir)."],"binary input":["to"],"binary isn't":["pre-sized"],"binary literals":["to"],"binary out":["of"],"binary pattern":["matching","match"],"binary since":["after"],"binary string":["be"],"binary strings.":["That"],"binary with":["the"],"binary, but":["I've"],"binary, to":["be"],"binary. Just":["be"],"binary/datastructure like":["md5/sha1."],"binary_to_list \"да":["нет\""],"binary_to_list(word) ```":["while"],"binarys as":["strings."],"binding that":["you"],"biology or":["whatever"],"bit --":["the"],"bit a":["little"],"bit about":["pattern","how","regular","whether"],"bit allergic":["to"],"bit and":["eliminate","then","came","sometimes"],"bit annoyed":["that"],"bit as":["he","you"],"bit awkward":["to","to"],"bit better":["is","by","than","than"],"bit better,":["although"],"bit better.":["`|\u003e`"],"bit bewildered":["that"],"bit by":["pulling","writing:","using"],"bit cleaner":["then","if"],"bit cleaner.":["e.g."],"bit complex":["to","but"],"bit complicated":["IMO;","to",",","with"],"bit condensed":["and"],"bit confused":["by"],"bit confusing":["what","what"],"bit confusing,":["are","since"],"bit confusing:":["`String.strip(greeting)"],"bit correct":["(using"],"bit curious":["why"],"bit different":["solution,"],"bit difficult":["to"],"bit easier":["to","to"],"bit excessive":["here?"],"bit expensive.":["Like"],"bit faster":["computationally","too"],"bit hackish":["since"],"bit hard":["on","to","to"],"bit harder":["to"],"bit heavy":["handed."],"bit here":["is"],"bit in":["my"],"bit inconsistent":["to","to","with"],"bit involved":["and"],"bit is":["on"],"bit less":["readable","obvious"],"bit long":["to"],"bit long.":["What"],"bit misleading":["-"],"bit monolithic.":["Guess"],"bit more":["direct.","like","modular?","clear.","intent","DRY).","modular?","intent","concise.","readable.","toward","liberally","awkward,","readable,","readable.","verbose","generic,","speed","self","brevity.","efficient","complicated.","complex","expensive","efficient","subtle","clearly,","direct","work","data:","more","explicit","concise.","readable","clear","nicely."],"bit nicer":["than"],"bit odd":["to","to"],"bit of":["overkill?","duplication","work","code.","duplication","syntactic","logic","logic.","duplication","code","duplication","playing","duplication","extra","a","Elixir","time.","background","a","elixir,","a","a","an","duplication"],"bit off":["but"],"bit on":["the"],"bit over":["the"],"bit over-used":["here."],"bit overkill":["and","for","to"],"bit proud":["of"],"bit redundant,":["it's"],"bit reminiscent":["of"],"bit rusty":["at"],"bit scary,":["`:math.pow(2,64)"],"bit shifting":["in","code","from"],"bit shorter":["and"],"bit simpler":["than","and"],"bit squished":["together"],"bit strange":["definition"],"bit strange.":["Firstly,"],"bit stream":["methods?"],"bit surprised":["that"],"bit terse":["and"],"bit to":["long,","explain","make","make","make","understand.","make","make"],"bit too":["directly","simple","much...","long","far,"],"bit tricky":["sometimes,"],"bit unnecessary":["when"],"bit using":["macro's,"],"bit verbose":["but"],"bit weird":["to"],"bit weird,":["probably"],"bit weird.":["Underscores","It"],"bit with":["naming,","that.","it."],"bit without":["making","sacrificing"],"bit workaday,":["like"],"bit, but":["that's","there"],"bit, for":["which"],"bit, you":["can"],"bit. Also":["@trent"],"bit. Also,":["it"],"bit. You":["can"],"bit: what":["about"],"bit? Is":["there"],"bit? It":["might"],"bits and":["bytes."],"bits), not":["some"],"bits, so":["it"],"bitshift operator":["available."],"bitstring into":["a"],"bitstring_to_list, while":["fast,"],"bitten by":["this"],"bla bla":["bla"],"bla end`":["is"],"bla)`, which":["is"],"bla])` (feel":["free"],"blame the":["test"],"blank lines":["L4"],"blank string":["in"],"blank string.":["So"],"blank strings":["out."],"blank. You":["can"],"blank? to":["silence?"],"blend the":["get"],"blind alleys":["with"],"block and":["put","got"],"block as":["```"],"block doesn't":["matter."],"block inside":["`shouting?\\1`"],"block on":["iteration"],"block should":["be"],"block so":["I"],"block syntax":["for"],"block\") do":["..."],"block) with":["keyword"],"block, making":["their"],"block, with":["a"],"blocks that":["support"],"blocks to":["define"],"blocks, one":["on"],"blog post":["on","about","of"],"blow everything":["up"],"blow up,":["receive"],"bob really":["care"],"bob.exs:13: function":["length/1"],"bob_test.exs. Note":["to"],"bodies are":["off"],"bodies like":["`count`,"],"bodies of":["text.","the"],"body is":["just"],"body like":["this:"],"body looks":["odd."],"body of":["the","`hey`?","`Phrase.to_word_list/1`,","that","a"],"body. Maybe":["you"],"boil down":["to"],"boilerplate to":["wade"],"boilerplatey to":["have"],"boneheaded behavior":["by"],"bonus points:":["what"],"bonus, it":["gives"],"boo-boo in":["my"],"book for":["learning"],"book taught":["me"],"book that":["just"],"book was":["telling"],"book, [Programming":["Elixir](http://pragprog.com/book/elixir/programming-elixir)"],"boolean ;).":["I"],"boolean NOT.":["I"],"boolean checks":["need"],"boolean context),":["take"],"boolean expression":["without"],"boolean functions":["with"],"boolean is":["to"],"boolean method":["\"is_silence\""],"boolean methods":["be"],"boolean or":["conditional"],"boolean regardless":["of"],"boolean result)":["in"],"boolean valued":["functions","functions"],"boolean values":["is"],"boolean. Do":["you"],"boolean. This":["is"],"booleans) it's":["common"],"boot. For":["some"],"border where":["I"],"boring boolean":[";)."],"boring, I":["have"],"borrowing from":["my"],"both \"inline":["conditions\""],"both (w":["and"],"both String":["and"],"both `Regex.match?(%r/\\pL/,":["\"£\")`"],"both `foo/1`":["(1"],"both `question?`":["and"],"both `silence?`":["and"],"both `upcase`":["and"],"both a":["split/scan","case"],"both approaches":["pass.)"],"both be":["the"],"both because":["it"],"both binaries":["and"],"both can":["handle"],"both cases":["an"],"both completed":["the"],"both for":["the","the","your"],"both function":["names"],"both in":["`differents?`","function","and"],"both lists":["are","and"],"both nils":["and"],"both of":["your","them","you!","them,","you.","them","those","those"],"both operands":["are"],"both shouting":["instances"],"both sides":["of"],"both string":["and"],"both styles":["are"],"both the":["public","prefix","sorted"],"both to":["do","follow"],"both used":["together."],"both variables.":["But"],"both verse":["and"],"both was":["redundant."],"both ways,":["and"],"both ways.":["(The"],"both were":["getting"],"both work":["on","on"],"both work.":["Yeah,"],"both. Enum.reduce":["is"],"both? I":["tried"],"bother making":["the"],"bother me":["is"],"bother with":["records","the"],"bothered me":["first"],"bothers me":["the","a"],"bottle for":["a"],"bottle of":["beer","beer.\\nTake","beer"],"bottle#{if num":["&gt;"],"bottle() as":["well."],"bottle_classifier(1), do:":["\"bottle\""],"bottle_classifier(_), do:":["\"bottles\""],"bottle_phrase doesn't":["really"],"bottle_phrase function":["declarations"],"bottleize(0), do:":["\"no"],"bottles &gt;":["1"],"bottles (":["or"],"bottles -":["1"],"bottles are":["the"],"bottles is":["0"],"bottles like":["argument)"],"bottles of":["beer","beer.\\nGo","beer","beer","beer\"","beer","beer.\\nGo","beer","beer","beer","beer.\\nTake","beer)."],"bottles_left =":["bottles"],"bottom and":["leave","I"],"bottom. Yeah,":["that"],"boy to":["string"],"bracketed in":["do/end"],"brackets but":["I"],"brain around":["this"],"brain for":["elixir."],"brain thinks":["of"],"brain. This":["works"],"branches as":["well"],"branches. In":["other"],"brave enough":["to"],"break a":["line"],"break and":["I"],"break any":["of"],"break apart":["those"],"break down":["and"],"break from":["exercism.","Elixir."],"break if":["anyone"],"break it":["out","out","off"],"break the":["text"],"break this":["down"],"break up":["the"],"break) got":["some"],"break. Maybe":["the"],"breakdown of":["the"],"breaking between":["\"CustomSet\""],"breaking each":["condition"],"breaking if":["I"],"breaking it":["out","out"],"breaking out":["those","some","the"],"breaking some":["things"],"breaking the":["anonymous","conditions"],"breaking those":["up)."],"breaking up":["and"],"breaking your":["private"],"breaks for":["me)."],"breathes now":["at"],"brevity for":["clarity."],"brevity is":["worth"],"brief break":["from"],"briefly about":["trimming"],"brilliant advice.":["How’s"],"bring clarity":["to"],"bring that":["part"],"bring up,":["but"],"bringing it":["up"],"bringing up":["stuff"],"brings advantages":["that"],"brings more":["readability"],"brings up":["another"],"brittle to":["me,"],"broader than":["they"],"broadly available,":["but"],"broke down":["the"],"broke everything":["down"],"broke exercism's":["syntax"],"broken down":["into"],"broken it":["up"],"broken out":["into","into"],"broken up":["the","nicely,","code"],"broken with":["ranges."],"broken, not":["sure"],"brought over":["directly"],"browsing the":["API?"],"brute force,":["but"],"bs]), fn":["({a,"],"bsl function":["would"],"btw (using":["and"],"btw and":["it"],"btw because":["\\n"],"btw that":["word"],"btw to":["express"],"btw) syntax":["for"],"btw, but":["it's"],"btw, from":["a"],"btw, there":["is"],"btw. It":["also"],"bug in":["the","Enum.chunks.","the","your"],"bug is":["fair"],"bug me":["that","a"],"bug to":["me."],"bug. Crashing":["upon"],"bug: `List.duplicate":["\"a\","],"bugged me":["that"],"bugs that":["way."],"build an":["intermediate"],"build functional":["pipelines"],"build it":["up"],"build it.":["Thanks."],"build out":["incremental"],"build people":["up,"],"build the":["dictionary?","`score_letter`"],"build up":["an","the"],"build up,":["end,"],"build with":["pattern"],"build your":["HashDict"],"building a":["verse.","HashDict","hash"],"building blocks":["that"],"building intermediate":["lists."],"building of":["the"],"building them":["with"],"building your":["own"],"built `reduce`":["function"],"built around":["list"],"built in":["guard","string","functions"],"built-in function":["names","called","in"],"built-in functions,":["like"],"built-in increment":["function,"],"built-in interpolation":["to"],"built-in to":["the"],"built-in versions":["this"],"built-in way":["that"],"bulk of":["the"],"bump... is":["this"],"bunch in":["the"],"bunch more":["unpacking"],"bunch of":["if/else,","time","tiny","cutting-edge"],"bundle of":["code"],"burdensome to":["the"],"busted on":["the"],"busy thinking":["about"],"busywork to":["mangle"],"but \"-\"":["does"],"but 'empty'":["isn't"],"but 2.000.000":["is","is"],"but Elixir":["code","doesn't"],"but Elixir's":["style"],"but Enum.count/2":["fits"],"but Haskell's":["type"],"but How":["can"],"but I":["wasn't","think","couldn't","dont","wanted","think","would","haven't","still","see","think","cannot","think","might","think","think","think","couldn't","happen","believe","wasn't","called","do","couldn't","couldn't","am","find","think","feel","consider","guess","figured","think","suppose","like","just","had","like","pushed","don't","get","took","think","think","think","would","find","spent","think","may","can","wanted","think","don't","think","think","think","could","could","think","feel","agree","couldn't","may","don't","think","really","think","think","am","not","think","couldn't","couldn't","like","think","think","don't","kept","don't","think","don't","am","suspect","can't","can","think","feel","must","couldn't","get","could","wasn't","assume","think","agree.","can't","kind","couldn't","couldn't","don't","think","plan","thought","converted","feel","decided","find","guess","don't","couldn't","don't","didn't","can't","think","just","still","can","can","didn't","didn't","do","don't","wouldn't","am","ported","think","thought","think","have","like","understand","feel","haven't","think","did","would","like","like","usually","wanted","asked","wasn't","think","just","may","don't","can't","like","figured","don't","feel","had","wanted","guess","don't","hate","think","wasn't","think","don't","really","wasn't","didn't","think","kind","didn't","was","could","didn't","think","didn't","generally","fear","haven't","have","think","don't","personally","haven't","tried","suspect"],"but I'd":["argue","rather","rather"],"but I'll":["fix","respond"],"but I'm":["not","not","not","not","not","not","sure","drawing","not","still","looking","at","not","not","really","kind","not","not","still","not","perfectly","not","not","not","curious,","told","not","not","not","still","not"],"but I've":["used","also","been","always","seen"],"but IMHO":["the","is","is"],"but IMO,":["`empty?`"],"but It":["looks"],"but `&(&1+1)`":["is"],"but `Enum.reduce`":["is"],"but `Enum.sort`":["is"],"but `List.zip/1`":["handles"],"but `Regex.match?(%r/\\pL/u,":["\"£\")`"],"but `Regex.scan`":["is"],"but `String.to_char_list!`":["is"],"but `Teenager.hey(nil)`":["(from"],"but `\\d`":["will"],"but `blank?`":["stands","doesn't"],"but `empty?`":["is"],"but `graphemes`":["is"],"but `next_three`":["bothers"],"but `normalize`":["might"],"but `pretty/1`,":["otherwise"],"but `shouting?`":["shouldn't"],"but `total`.":["Shame."],"but a":["handful","module","normal","new","hyphen"],"but actually":["it"],"but added":["an"],"but after":["some"],"but also":["exclamation","things","what","possible:"],"but am":["a"],"but an":["explicit","extra"],"but another":["person"],"but apparently":["the","not!","Enum.join"],"but architecture":["might"],"but are":["you","you"],"but as":["Jeremy","I","@esmeralda","`f"],"but assumed":["that"],"but at":["the","your","this"],"but attempted":["the"],"but avoided":["using"],"but basic":["unfamiliarity"],"but basically":["you"],"but because":["IMHO","I"],"but between":["the"],"but both":["work"],"but call":["them"],"but calling":["`y`"],"but can":["you"],"but cannot":["be"],"but certainly":["`Enum.count/2`"],"but conceptually":["they're"],"but conveys":["information"],"but couldn't":["fine","find","get","find"],"but couldn't.":["I"],"but decided":["since","it"],"but despite":["turning"],"but did":["the"],"but didn't":["give"],"but discovery":["is"],"but do":["you","you"],"but does":["this","your"],"but doing":["so"],"but don't":["forget","let","include"],"but either":["way"],"but equally":["I"],"but ever":["so"],"but feel":["free","like"],"but feels":["like"],"but for":["the","the","some","some","some","some","some","some"],"but forgot":["to"],"but found":["I"],"but from":["there","what","an"],"but given":["Elixir's","the"],"but glad":["to"],"but google":["is"],"but great":["revision.","tip."],"but guarding":["against"],"but had":["trouble","failing","some"],"but have":["you"],"but hope":["to"],"but how":["you"],"but hyphens":["(such"],"but i":["personally","think","can","forgot"],"but if":["you","you","anyone","you're","I","I","it's","not,","you","you're","they","you're","you","you","you","you","you","you"],"but in":["general","a","a","this","production","this","a","the","a","this","for"],"but included":["lowercase"],"but indirectly":["checking"],"but instance":["only."],"but instead":["of"],"but is":["the","returning","not","a","simpler","the","that","there"],"but isn't":["the"],"but it":["does","fails","would","seems","meant","might","might","usually","could","looks","can","is","would","is","seems","sure","doesn't","seems","should","was","kinda","looks","could","is/will","might","seems","is","would","was","could","was","will","seemed","always","looks","is","also","hasn't","couldn't","doesn't","feels","still","should","being","only","feels","would","was","works.","might","makes","seemed","seemed","just","doesn't","just","might","can","seems","doesn't","also","might"],"but it's":["the","on","a","all","basically","in","really","cool","handy","kind","best","wrong","easier","far","already","a","an","a","calling","a","great","pretty","definition","a","working.","a"],"but just":["that","looking"],"but kept":["the"],"but less":["well","so"],"but let":["your"],"but like":["I"],"but looking":["at","through"],"but mainly":["\"code"],"but maybe":["it","a","8","I'm","the"],"but more":["powerful."],"but most":["modules","of"],"but moved":["forward"],"but much":["preferably"],"but never":["used"],"but no":["I","numbers,","macros."],"but no.":["Thing"],"but not":["these:","clean/1).","`str`.","terribly","finding","sure.","when","really","codepoints,","particularly","all","\"-\"","for","usually"],"but note":["that"],"but now":["that","I","of","that","I","I","I"],"but on":["the","this","the","my"],"but once":["again,"],"but one":["grapheme)."],"but one,":["on"],"but only":["if","because","one","use","sorting"],"but opted":["to"],"but other":["than","than"],"but otherwise":["I"],"but perhaps":["that","they've","it","it's","I'll"],"but probably":["less","this"],"but provide":["line"],"but pushed":["the"],"but ran":["into"],"but rather":["as","an","the","making"],"but refactored":["to"],"but repetitive”":["version."],"but reverse":["is","is"],"but seems":["inefficient,"],"but seriously":["wtf"],"but since":["that's","we","you"],"but some":["of"],"but somehow":["`a"],"but someone":["else"],"but somewhat":["scared"],"but still":["keep","exclude","eager","rather","need"],"but strictly":["speaking","speaking"],"but string":["pipelines"],"but submitted":["a"],"but that":["would","might","felt","are","might","may","seems","does","was","doesn't","just","this","may","would","was","doesn't","might","is","threw","was","would","could"],"but that's":["pretty","probably","probably","a","just","just","probably","being","very","my","mainly","probably","rather","fair","more","completely","already","a"],"but thats":["just"],"but the":["allowed","previous","method","problem","syntax","`anagram`","code","first","latest","tests","symmetry","code","code","tests","verse","test","pipeline","input","problem","code","longer","other","top-level","point","operations","replace","test","three"],"but then":["realized","I","you'd","`:lists.foldr`","I","elixir","the","I"],"but there":["is","is","doesn't","were","are","is","were","isn't"],"but there's":["a","a","some","a","quite","a","a","still","a"],"but these":["are","are"],"but they":["are","hide","are","didn't","were","seem","are"],"but they're":["not","frowned","the"],"but this":["version","was","can","looks","looks","first","looks","way","works","works","one","works","is","works.","would","is","time","works","works"],"but threading":["the"],"but tightly":["tied"],"but to":["have","produce","me,","call","call"],"but under":["the"],"but unless":["I'm"],"but using":["the","an"],"but verbose":["pattern."],"but wanted":["to"],"but way":["too"],"but we":["can't"],"but what":["would","people","promoted","would","do"],"but when":["I","I","it","you","you","I"],"but why":["not"],"but with":["no"],"but without":["the","doing"],"but worked":["quite"],"but worth":["noting"],"but would":["suggest","adding","this"],"but wouldn't":["`List.zip`"],"but yeah,":["you"],"but yet,":["it"],"but you":["could","end","should","could","could","get","don't","can.","are","don't","can","can","can","could","would","are","do"],"but you'd":["rather"],"but you're":["saying","right,","right,"],"but your":["solution","code"],"but yours":["might"],"but, as":["@petra","for"],"but, both":["of"],"but, if":["you"],"button at":["the"],"button is":["working."],"button that":["says"],"buy some":["more,","more,","more\""],"buy you":["anything","a"],"buys you":["anything"],"by \"Why":["String.split/1"],"by \"completed\"":["right"],"by \"pipeline":["operator"],"by \"the":["@"],"by 2,":["I"],"by @agustina":["(for"],"by @denis.":["I'm"],"by @hanna.":["Not"],"by @maryse-w,":["thanks!"],"by Erlang":["functions."],"by Jeffrey":["Friedl"],"by Regex.scan":["from"],"by Ruby":["and"],"by `:calendar`":["to"],"by `Dict.put`":["can"],"by `Dict.update`,":["it"],"by `String.length`":["in"],"by `[a-zA-z]`":["rather"],"by `[roman,":["chars]`"],"by `a":["|\u003e"],"by `hd`.":["There's"],"by `hey`":["pattern"],"by `zip`":["to"],"by a":["\"greater","comparison","call","newline","boolean","generic"],"by adding":["a","line","exercises","an"],"by all":["kinds"],"by an":["administrator,"],"by any":["stretch)"],"by appending":["in"],"by basically":["transcribing"],"by being":["a","more"],"by brain":["for"],"by breaking":["some","out"],"by calling":["score_letter"],"by calls":["to"],"by chaining":["pipelines:"],"by clicking":["around"],"by coming":["up"],"by contrast,":["the"],"by creating":["a"],"by default":["and","and"],"by defining":["methods"],"by definition":["UTF-8"],"by doing":["something","`to_words`","it"],"by double":["quotes,"],"by enclosing":["the"],"by factoring":["out"],"by far":["my","the"],"by folding":["the"],"by following":["the"],"by forcing":["two"],"by functions":["in"],"by getting":["creative"],"by grade":["(not"],"by hand-rolling":["a"],"by having":["the","your","`nucleotide_counts`"],"by its":["own"],"by itself.":["You","You"],"by joining":["the"],"by just":["reversing"],"by line":["to"],"by linking":["the"],"by looking":["for","at","at"],"by making":["use","everything"],"by minimizing":["the"],"by more":["reliable"],"by moving":["the","it","the","the","them"],"by multiplying":["by"],"by names)":["and"],"by new":["syntax."],"by no":["means","means"],"by not":["throwing"],"by now.":["I'm"],"by one":["that"],"by other":["functions"],"by partial":["function"],"by patching":["very"],"by pattern":["matching","matching."],"by performing":["any"],"by position":["without"],"by providing":["a"],"by pulling":["the"],"by putting":["it"],"by reducing":["the"],"by refusing":["to"],"by rejecting":["the"],"by renaming":["it"],"by reordering":["the"],"by repeating":["twice"],"by seven,":["I'll"],"by shorthand":["notation."],"by some":["very","easier"],"by someone":["who"],"by splitting":["the"],"by storing":["a"],"by swapping":["the"],"by the":["question","way,","pipe","way!","nesting.","tests,","first","conversions.","standard","`\\w+`","last","example","function","length","result","accumulator","input","compiler"],"by their":["name","conjunction."],"by this":["myself"],"by throwing":["in"],"by underscores)":["are"],"by underscores.":["Furthermore"],"by using":["String.upcase","Elixir's","some","a","a","pattern","functions","`String.last`","the","String.strip.","HashDict.update/4.","a","a","deft.","guards","defp","`Enum.reduce`","an","`Enum.find`.","the","ranges.","list","`/\\p{Lu}/`","an","the","`Enum.reduce`.","a","your","the","`defp`"],"by variable":["names"],"by way":["of"],"by which":["`update`"],"by writing":["`roman","`fn(value)"],"by your":["use","standard"],"bynary (\u003c\u003c":["\u003e\u003e)"],"byte fold":["for"],"byte in":["UTF-8."],"bytes and":["not","not"],"bytes because":["the"],"bytes for":["a"],"bytes. That":["really"],"b} -\u003e":["a"],"b}) -\u003e":["a"],"b}` term;":["a"],"c +":["1"],"c -":["?A)"],"c -\u003e":["{"],"c \u003c=":["?Z","?z,","?9,"],"c \u003e=":["?A","?a","?0"],"c inlist":["cs,"],"c'est astucieux":[":-)"],"c) ++":["d)"],"c, acc":["when"],"c, n":["})"],"c, ws":["}"],"c` means":["3","2"],"cache the":["returned","list"],"calculate a":["new","new"],"calculate and":["doesn't"],"calculate it":["but"],"calculate the":["frequencies"],"calculated each":["time"],"calculated value":["that"],"calculating but":["I","I"],"calculating it":["each"],"calculating the":["normalized"],"calculation not":["just"],"calendar module":["like"],"calendars perfectly":["sensible"],"call \"methods\"":["of"],"call -":["more"],"call `Dict.some_fun`":["than","instead"],"call `Dict.update`":["than"],"call `Dict`":["functions"],"call `Enum.count`":["4"],"call `HashDict`":["functions","functions","functions","functions","functions"],"call `String.split`":["with"],"call `foo(something,":["0)`."],"call `iolist_to_binary(roman)`":["at"],"call `is_shouted?`":["and"],"call `question?`,":["`shouting?`"],"call `rain_music`":["for"],"call `sort`":["which"],"call a":["higher","function","function"],"call and":["that's"],"call as":["well?"],"call at":["the"],"call but":["the"],"call downcase":["on"],"call feels":["ugly,"],"call form).":["Overuse"],"call from":["downstream"],"call higher":["up"],"call in":["a","a","the","the"],"call indirection).":["Idiomatically"],"call inline":["with"],"call is":["not","n","ambiguous\",","done."],"call it":["something","once.","multiple","make","`reduce`,","as","`is_something`"],"call itself":["in","be"],"call like":["this:"],"call much":["more"],"call on":["the","not"],"call only":["other"],"call optimised":["as"],"call optimization.":["If","So,"],"call optimized.":["If"],"call or":["a"],"call out":["to"],"call rather":["than"],"call signature":["of"],"call since":["there's"],"call somewhere":["else"],"call takes":["more"],"call that":["using"],"call the":["function","corresponding","`Dict`","module","filler"],"call them":["as","`npa`"],"call these":["nitpicks"],"call this":["one"],"call three":["times"],"call to":["`Enum.count`","`silence`","List.flatten,","!silence?","`do_count`.","List","`String.split`","`uniq`","`Regex.scan`.","`String.downcase`","verse/1","that","HashDict.new.","just","isolate","the","the","the","the","the","`allergic_to?`","the"],"call using":["reject"],"call versus":["cast"],"call with":["the"],"call would":["decrease"],"call your":["statement"],"call, `acc":["=","=","=","=","="],"call, but":["that","now"],"call, so":["there's"],"call. Can":["you"],"call. Do":["you"],"call. Either":["one"],"call. I":["guess"],"call. I'll":["refactor"],"call. Just":["pushed"],"call. Often":["this"],"call. This":["makes"],"call... but":["I"],"call? I'll":["look"],"call? The":["result"],"callback function;":["something"],"callback params":["and"],"callback since":["what"],"callback to":["its","`reduce`."],"callback which":["gets"],"callback, thanks":["for"],"callback, which":["I've"],"called \"funs":["with"],"called \"nitpicks\"":["so"],"called (which":["is"],"called DNA,":["so"],"called Pipe":["operator"],"called `ExtendedEnum`,":["complete"],"called `do_count`":["for"],"called `do_foo`":["for"],"called `inc`":["here."],"called `otherwise`":["and"],"called `split/1`":["that"],"called `true`.":["You're"],"called an":["exclamation"],"called and":["it's","data"],"called because":["of"],"called by":["the"],"called first.":["Next"],"called for":["each"],"called from":["outside","a","`hey`"],"called functions,":["functions"],"called if":["the"],"called is_upcase?(text)":["Have"],"called it":["`silence?`"],"called methods":["or"],"called on":["that"],"called out":["with"],"called outside":["quote\""],"called something":["like","like"],"called split/1":["from"],"called the":["tail","iterator,"],"called those":["sections"],"called to":["calculate"],"called with":["nil","[{65,"],"callee so":["that"],"caller is":["reused"],"caller would":["be"],"calling .new()":["in"],"calling Kernel.inspect":["without"],"calling `Dict.put(counts,":["word,"],"calling `Enum.reduce`":["explicitly..."],"calling `String.downcase`":["piped"],"calling `do_accumulate`":["but"],"calling `frequencies`?":["Why"],"calling `y`":["`year`"],"calling a":["method","`HashDict`"],"calling and":["defining","defining"],"calling another":["function"],"calling class":["methods"],"calling function":["around"],"calling hey":["with"],"calling it":["something","as"],"calling normalize_word":["in"],"calling reverse":["twice"],"calling score_letter":["in"],"calling that":["directly"],"calling the":["Erlang","variable","three"],"calls ,":["but"],"calls `HashDict.get`":["if"],"calls `HashDict`":["automatically"],"calls `String.downcase`":["which"],"calls `to_string`":["on"],"calls and":["pattern"],"calls both":["in"],"calls everywhere":["but"],"calls except":["for","the","for"],"calls from":["the"],"calls into":["one"],"calls like":["\"length\","],"calls or":["both?"],"calls seem":["a"],"calls the":["`List`"],"calls to":["!silence?","Teenager#silence?","get","`bottles`","functions","normalize","`String`"],"calls unless":["there's"],"calls were":["a"],"calls with":["String?"],"calls) to":["me."],"calls. However,":["I"],"calls. Is":["there"],"calls. It's":["perfectly"],"calls? I":["realize"],"came from":["where,","wondering"],"came out":["more"],"came to":["the","the"],"came up":["with.","with","with!"],"can I":["get","use","avoid"],"can accept":["a"],"can accomplish":["this","what"],"can actually":["change"],"can add":["it","is","it"],"can also":["just","move","collapse","end","be","be","be","use","be"],"can and":["resubmit","can't"],"can any":["kind"],"can append":["`u`"],"can assume":["`base`"],"can avoid":["an","downcasing,","that"],"can be":["replaced","turned","accessed","fixed.","rewritten","shorter","done","more","write:","replaced","done","refactored","simplified","rewritten","improved","simplified","shouted,","written","used","written","used","rewritten","reduced","handy","reduced","*too*","combined,","used","abstracted","written","written","written","done","interpreted","used","written","made","written","written","written","used","implemented","computed","written","\"deprecated\"","combined","implemented","beneficial:","replaced","written","annoying.","written","expressed","found","cleaned","written","written","used","written","written","sure","efficiently","simplified","efficiently","a","replaced","done","replaced","a","written","used"],"can be.":["I"],"can believe":["the"],"can bring":["up,"],"can calculate,":["amirite?"],"can call":["in","out","a","a","sing/2","at"],"can catch":["it"],"can change":["the","without"],"can check":["this"],"can clean":["up"],"can combine":["a"],"can come":["up","up","in","up","inhandy.","up"],"can comment":["on"],"can compare":["that"],"can completely":["eliminate"],"can condense":["the"],"can configure":["a"],"can confirm":["this."],"can continue":["reading"],"can convert":["a"],"can create":["a","private"],"can decide":["in"],"can default":["the"],"can define":["_private","functions"],"can delete":["the","your"],"can demonstrate":["eccentricities"],"can depend":["on"],"can determine":["if","that"],"can discuss":["that"],"can do":["something","this","those","`def","that.","this:","`?T`","this","the","that","with","it","what's","pattern","`r","this:","this:","`Enum.map(&hd/1)`","string","quite"],"can do,":["it's"],"can drop":["the"],"can easily":["find","be","switch"],"can end":["predicate","with"],"can expand":["it"],"can explain":["more."],"can express":["it"],"can fail":["on"],"can figure":["out","this"],"can find":["a","one"],"can find.":["At"],"can first":["make"],"can fix":["that"],"can get":["rid","away","away","pretty","into"],"can give":["it"],"can go":["ahead"],"can handle":["`Beer.sing(5,95)`,","any"],"can has":["messages,"],"can have":["a","default"],"can help":["you","your","you","you"],"can imagine":["you"],"can implement":["`concat`"],"can import":["the"],"can include":["the"],"can just":["always","use","as","pattern","compare","be","iterate","reference","write"],"can know":["that"],"can lead":["to"],"can learn":["to"],"can leave":["out"],"can literally":["replace"],"can look":["at","at","that"],"can make":["most","the","this","functions","a","it","more","this","this"],"can mark":["methods"],"can match":["against"],"can more":["easily"],"can move":["on","the"],"can never":["quite","remember"],"can not":["review"],"can offer":["is"],"can often":["be","optimize","be"],"can omit":["the"],"can only":["come"],"can pass":["a","a","that"],"can pattern":["match","match","match"],"can pipe":["into,"],"can please":["explain"],"can point":["me","you","out"],"can pretty":["easily"],"can prevent":["this"],"can privatize":["them"],"can probably":["get","get"],"can put":["it"],"can quickly":["grasp"],"can read":["up","the"],"can really":["move","see"],"can reduce":["them","duplication,"],"can reduced":["```clean_string```"],"can refine":["how"],"can register":["a"],"can remove":["redundant","redundant","quite","the"],"can replace":["your","the","`String.replace`,"],"can resubmit":["an"],"can return":["false","an"],"can reuse":["them."],"can run":["\u003ccode\u003eexercism"],"can say":["\"I","that","that"],"can see":["arguments","how","an","now","this","*why*","arguments","I","two","there","they","how","why","that","pieces","what","why","why","is","how","that","how","is","is"],"can separate":["these"],"can share":["pointers"],"can shorten":["`fn(x)","`fn(x)","the"],"can shrink":["super-simple"],"can simplify":["your","it","the","the","your","the","the","count_all","this","your","some","that","your"],"can simply":["\"pipe\"","pass"],"can solicit":["more"],"can solve":["this","with"],"can sometimes":["come"],"can sort":["of"],"can spend":["some"],"can still":["submit"],"can stomach":["`acc`"],"can stop":["after"],"can submit":["a","a"],"can take":["the","a"],"can tell":["me"],"can test":["the"],"can then":["call","be"],"can think":["of","of","of","of"],"can treat":["it"],"can understand":["the","how","if"],"can use":["to","question","else","functions","String.last([phrase)","instead","`Regex.scan`","in","keyword","`defp`","`&amp;M.f/a`","`&amp;update_frequency/2`","the","a","`defp`","`?`","a","a","one-liner","that","`String.codepoints`","the","a","some","some","private","that","`Kernel.to_char_list`","so","for","`length(list)`","`some_range.first`","the","`Enum.map`","the","`defp`","unicode","`Enum.count(collection,","private","(i.e.","a","a","`Enum.map_join`","`[any]`","`defp`","`length`","any","the","whatever","`Enum.to_list(collection)`","Unicode","`[head","captures","`/\\p{L}/`","`/\\p{L}/`","head","guards:","the","`\\P{L}`","`acc`","\"or\"","the","unicode","`append`","some","Elixir's","a"],"can use.":["You"],"can uses":["those"],"can usually":["be"],"can visualize":["the"],"can visually":["split"],"can work":["too."],"can write":["the","line","offset","`String.length(s)","`count_words`","`fn(x)","`String.length(s)","the","`def`","an","function","them","`[\\P{L}]`"],"can you":["approve","elaborate","give","replace","think","avoid","give","think","think"],"can't (going":["back"],"can't (in":["general,"],"can't actually":["find","use"],"can't approve":["it,"],"can't be":["used","avoided.","done","found)."],"can't believe":["I"],"can't call":["in"],"can't check":["everything."],"can't comment":["yet."],"can't currently":["figure"],"can't do":["with","it"],"can't figure":["it","out","out","out","out","out","out"],"can't find":["much","anything","any","it","anything"],"can't follow":["conventions"],"can't happen":["duplicating"],"can't help":["myself."],"can't hide":["attributes"],"can't imagine":["how","that","how"],"can't mark":["code"],"can't mix":["`def`"],"can't nest":["specs"],"can't really":["argue","glance"],"can't remember":["why","why"],"can't resubmit":["the"],"can't see":["how","any","how"],"can't think":["of"],"can't use":["anything","the","remote","*list*"],"can, doesn't":["mean"],"can, however,":["do"],"can. Like":["this:"],"candidate for":["pattern","the"],"candidate is":["good","downcased"],"candidate so":["that"],"candidate). Can":["you"],"candidate, even":["though"],"candidate. I'm":["sure"],"candidates list":["is","until","is"],"candidates or":["if"],"cannot be":["implemented","implemented","directly","used"],"cannot come":["up"],"cannot go":["any"],"cannot judge":["other"],"cannot pass":["function"],"cannot use":["any"],"cant really":["say"],"capability of":["growing"],"capable of":["being"],"capital letters":["for","(or","per","I"],"capital. It":["turns"],"capitalize the":["entire"],"caps, you":["can"],"caps?\", \"what":["are"],"capture expression":["(`&`)"],"capture expression.":["They"],"capture expression:":["`&[function.(&1)"],"capture just":["the"],"capture nesting":["better"],"capture operator":["does).","is","(`&`)","(`&`)"],"capture shorthand":["(`&`)."],"capture syntax,":["i.e.","where"],"capture to":["be"],"capture* syntax.":["Think"],"capture-literal rather":["than"],"captured in":["the"],"captureing what":["I"],"captures `_`":["symbol,","symbol,"],"captures a":["lot"],"captures but":["the"],"captures in":["it","regexes,"],"capturing an":["operator"],"capturing. By":["default"],"care about":["the","the","this,"],"care about}.":["I"],"care for":["the"],"care of":["indenting","things:"],"care that":["it","he"],"care to":["know","make"],"care what":["kind","the"],"care what's":["in"],"careful with":["character"],"cares at":["all"],"caret (`^`)":["reverses"],"carpet as":["java","java"],"carriage return":["before"],"carried away":["there","with"],"carries any":["semantics"],"carry with":["a"],"cartesian plane,":["or"],"case (\"für\")":["it's"],"case (correct":["me"],"case (sounds":["like"],"case (uppercase,":["lowercase)?"],"case I":["don't","gave","wouldn't","felt","suspect"],"case I'd":["say","go","say"],"case _and_":["a"],"case `\"1,":["2,"],"case `==":["\"\"`"],"case `a":["=="],"case and":["if","pattern","binary","underscores","using","there","one"],"case as":["a","it","yours."],"case because":["of","is","the"],"case better":["than"],"case but":["attempted"],"case condition2":["do"],"case definition.":["If"],"case differences.":["I"],"case explicitly.":["It"],"case expressions.":["The"],"case falls":["upon."],"case for":["\"","elixir's","a","\"!\"","-1","a","a"],"case if":["your","you"],"case in":["Elixir.","my","the"],"case input,":["since"],"case insensitive":["regular"],"case insensitive.":["I"],"case inside":["of"],"case is":["handled;","required","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,"],"case it":["adds","would","would","matches"],"case it's":["a","probably","the"],"case just":["so"],"case l":["do","do","do","do","do","do","do","do","do","do","do"],"case like":["`&(&1"],"case list":["do"],"case maybe":["soemthing"],"case mean":["to"],"case of":["the","working","`HashDict.new`).","taking","the","small"],"case pattern":["that"],"case really":["the"],"case results":["in"],"case schedule":["do"],"case so":["I"],"case some":["text"],"case statement":["would","is","is","as"],"case statement,":["but"],"case statement.":["I"],"case statements":["bad"],"case statements:":["they"],"case stuff.":["I"],"case that":["contained","depends","the","non-tail-recursive"],"case the":["`count`","check","underlying","one","exception"],"case they":["work"],"case though":["it","as"],"case to":["be","a","be"],"case when":["people"],"case where":["`n1","there","the"],"case will":["give"],"case with":["spaces"],"case would":["be:"],"case you":["find","are","don't","hadn't"],"case, I":["am","wouldn't","thought","am"],"case, I'm":["not"],"case, a":["HashDict)."],"case, at":["least,","least."],"case, because":["it's"],"case, but":["this","couldn't","when","I'm"],"case, cond":["in"],"case, even":["though"],"case, it's":["really"],"case, of":["instead"],"case, once":["for"],"case, or":["use"],"case, since":["it","it"],"case, that":["it"],"case, though":["I"],"case, which":["is","is"],"case, words)":["into"],"case, you":["did"],"case, you'd":["normally"],"case-insensitive \"same\"":["words,"],"case-insensitive anagram":["tests."],"case-insensitive, then":["I"],"case-insensitively check":["for"],"case-insensitively checking":["whether"],"case. Although,":["I"],"case. Coming":["up"],"case. I":["don't"],"case. If":["it's"],"case. Incoming":["with"],"case. Let":["me"],"case. The":["more","`&1"],"case. Then":["you"],"case. What":["do"],"case. When":["I"],"case. Your":["ordering"],"case. it":["was"],"case? Am":["I"],"case? As":["another"],"case? For":["example,"],"case? If":["so,"],"case? That":["would"],"cased form":["is"],"cased to":["handle"],"cases (for":["example"],"cases (with":["guard)."],"cases So":["yes"],"cases an":["error"],"cases are":["now","right"],"cases as":["an"],"cases being":["(in"],"cases either,":["but"],"cases for":["that","unicode"],"cases have":["been"],"cases in":["this"],"cases is":["calling","get","great."],"cases it's":["good"],"cases like":["`shouty?(\"42?\")`","your"],"cases of":["which"],"cases on":["a"],"cases quick":["look"],"cases result":["in"],"cases seems":["like"],"cases so":["the"],"cases that":["the","are"],"cases they":["might"],"cases things":["like"],"cases to":["where"],"cases were":["more"],"cases where":["you","single"],"cases with":["large"],"cases you'll":["be"],"cases) explain":["their"],"cases, a":["few"],"cases, basically,":["what"],"cases, but":["I"],"cases, though,":["those"],"cases. Gives":["me"],"cases. I'll":["have"],"cases. Made":["them"],"cases. So":["I"],"cases. The":["current"],"cases? I'm":["not"],"cases? In":["other"],"cases? Is":["there"],"casing 2":["in"],"casing `2`":["won't"],"casing. I":["was"],"cast has":["more"],"cast instead":["of"],"cast when":["nothing"],"casual reader":["might"],"catch about":["the"],"catch all":["case"],"catch but":["the"],"catch case-insensitive":["\"same\""],"catch it":["with"],"catch nils,":["removing"],"catch the":["`nil`"],"catch this":["with"],"catch with":["the","`Dict.update`."],"catch, I":["totally"],"catch-all clause":["in"],"catch-all clause.":["I'm"],"catch. I":["had"],"catchall clause":["of"],"catchall is":["better"],"catching an":["empty"],"catching nil/false":["in"],"catching the":["typo."],"categories using":["the"],"category L":["(letter))."],"category functions":["(`isSpace`,"],"category of":["the"],"category property,":["in"],"category tests":["in"],"category then":["yes."],"category) but":["it"],"caught a":["few"],"caught by":["the"],"caught that":["myself"],"caught this":["earlier,"],"cause a":["stack","big","`Stack_overflow`"],"cause confusion":["it'd"],"cause for":["another"],"cause trouble":["here"],"cause, the":["language"],"cause. However,":["my"],"caused it":["to"],"caused me":["some"],"causes the":["reduce"],"causing the":["discrepancy."],"causing. I":["always"],"caution that":["it's"],"cells, so":["it"],"ceremony\" right":["now"],"certain cases":["is"],"certain characters":["or"],"certain functions.":["That"],"certain how":["to"],"certain input":["as"],"certain meaning,":["but"],"certain number":["of"],"certain preprocessing":["step"],"certain substring,":["it"],"certain there":["are"],"certain way":["because"],"certain way,":["and"],"certainly `Enum.count/2`":["would"],"certainly a":["viable"],"certainly allowed":["it's"],"certainly be":["more"],"certainly creative,":["but"],"certainly don't":["need","have"],"certainly have":["their"],"certainly isn't":["wrong"],"certainly more":["compact!","expressive"],"certainly not":["the"],"certainly overkill":["since"],"certainly passes":["the"],"certainly reads":["nicely"],"cette convention,":["c'est"],"chain `String.strip`":["followed"],"chain for":["the"],"chain functions":["that"],"chain in":["`split_sort`."],"chain of":["functions","functions"],"chain rather":["than"],"chain the":["`String#length`","`String#length`"],"chaining also;":["same"],"chaining them":["together"],"chaining, but":["as"],"chaining, leading":["dots"],"chaining. Updated":["the"],"chaining; I":["think"],"chains with":["an"],"chalk in":["up"],"challenge was":["to"],"challenges that":["I"],"challenging exercise.":["But"],"challenging exercises":["I"],"challenging part":["was"],"chan \u003c-":["{"],"chance at":["all"],"chance of":["having","functions"],"chance to":["contribute.","talk","contribute."],"chance! Thanks":["again"],"change \"beer\"":["in","in"],"change \"y\"":["to"],"change 'words'":["to"],"change (where":["the"],"change `\u003c\u003e`":["to"],"change ```":["true"],"change after":["a"],"change all":["the"],"change and":["gave","look","submit"],"change anything":["to"],"change as":["that"],"change between":["the"],"change dict":["implementation"],"change his":["name"],"change in":["the","3","the"],"change instance":["level"],"change into":["the"],"change is":["the","to","the","to"],"change it":["accordingly"],"change it's":["name"],"change it,":["just"],"change it.":["Why"],"change later,":["no"],"change makes":["a"],"change my":["habit"],"change name":["of"],"change occasionally,":["so"],"change seems":["like"],"change that":["and","to"],"change that.":["The"],"change the":["word","name","code?","code?","parameter","way","predicates,","count","underlying","value","value"],"change them":[":p"],"change then":["that"],"change things":["up"],"change this":["originally","one."],"change to":["use","reduce?","the"],"change without":["affecting"],"change your":["`tokenize`","dictionary","implementation"],"change, because":["they"],"change, but":["that's"],"change, that's":["where"],"change, then":["you"],"change. :":[")"],"change. Do":["you"],"change. I":["can't"],"change. Is":["your"],"change. That's":["what"],"change. The":["only"],"change?) i":["found"],"changed and":["you"],"changed because":["map"],"changed it":["to","because","to","recently."],"changed methods":["from"],"changed my":["implementation","mind"],"changed recently,":["though,"],"changed so":["the"],"changed something,":["see"],"changed that":["to"],"changed the":["name","name","meaning","code","right"],"changed to":["use","`\\\\`"],"changed, and":["you","you"],"changed. Hitting":["\"Looks"],"changed. This":["is"],"changer. Thanks":["for"],"changes based":["on"],"changes but,":["as"],"changes every":["time"],"changes for":["both","that"],"changes it's":["hard"],"changes on":["the"],"changes that":["I","would"],"changes to":["the","name"],"changes when":["the"],"changes you'll":["have"],"changes your":["suggested."],"changes. I":["struggled"],"changes. Is":["there"],"changes. Let":["me"],"changes. Nice":["and"],"changing \"*\"":["to"],"changing it":["after"],"changing the":["regular","tests","meaning"],"changing things":["to"],"char but":["\"-\""],"char identifiers":["are"],"char limit.":["If"],"char list":["first?","back","to","so"],"char list,":["sorry","match"],"char lists":["and","(saves","were"],"char lists,":["so","and"],"char names":["much"],"char sequences":["of"],"char, 1,":["&(&1"],"char... it":["passes"],"char_list, once":["for"],"char_value(_), do:":["0"],"char_value(unquote(char)), do:":["unquote(value)"],"character \"é\"":["with"],"character '!'":["is"],"character (for":["example"],"character +":["combining"],"character ;-)":["I"],"character `?T`":["and"],"character and":["parameter"],"character based":["on"],"character but":["not","hyphens","a"],"character class":["(`\\w`)","to","to","to","to","that","with","of"],"character class,":["which"],"character class?":["Also,"],"character classes":["in","were","to"],"character classes,":["which","though"],"character code":["for","for"],"character count":["quite"],"character even":["though"],"character group":["you're"],"character identifiers":["are"],"character in":["the","a"],"character integrals":["(`?A`)","as"],"character limit.":["Anyway."],"character list":["using"],"character list,":["so"],"character lists":["being"],"character lists!":["I"],"character lists,":["building"],"character of":["a","a","a"],"character ordinals.":["`\"é\"`"],"character properties\"":["syntax"],"character property":["testing","tests"],"character rule?!":["Even"],"character so":["you"],"character that":["occupy"],"character to":["nil?","be","the"],"character variable":["names"],"character\", instead":["of","of"],"character, codepoint":["technically,"],"character, it":["doesn't"],"character, not":["a"],"character. \u003c\u003c??\u003e\u003e":["is"],"character. It":["would"],"character. It's":["clever,"],"character. Removing":["the"],"character\u003e returns":["the"],"character? You":["can"],"character_set maneuver":["is"],"characters (like":["the"],"characters (ü":["for"],"characters \u003e127":["to"],"characters and":["made","`bitstring_to_list`","binaries"],"characters are":["in","being"],"characters at":["the","the"],"characters but":["it's"],"characters can":["be","be"],"characters define":["the"],"characters descriptive":["names."],"characters for":["the"],"characters from":["strand2."],"characters in":["the","the","Elixir.","elixir,","the","a","`shouting?`,"],"characters including":["spaces,"],"characters instead":["of"],"characters into":["a"],"characters is":["to"],"characters it's":["probably","probably","better"],"characters like":["!@#$%^&*()","éøñ"],"characters names":["so"],"characters on":["the"],"characters or":["sequences"],"characters other":["than","than","than"],"characters that":["are","are","you"],"characters would":["be"],"characters you":["don't","do","can","don't","don't","do","don't","don't","do","don't","do","are","don't"],"characters you're":["looking"],"characters), rather":["than"],"characters, codepoints":["are"],"characters, do":["you"],"characters, not":["elixir"],"characters, or":["could"],"characters, proved":["too"],"characters, so":["I"],"characters, which":["shouldn't","is"],"characters, while":["\u003c\u003c\u003e\u003e"],"characters. \"-\"":["is"],"characters. Also,":["the"],"characters. In":["this"],"characters. Maybe":["I'm"],"characters. That":["way"],"characters. Wouldn't":["it"],"characters: (I":["hope"],"characters? Also,":["how"],"characters?\", etc),":["the"],"chars ,":["also"],"chars .You":["could"],"chars according":["to"],"chars from":["the"],"chars in":["the"],"chars is":["about","shouting,"],"chars line":["width,"],"chars rather":["than"],"chars then":["logically"],"chars to":["the"],"chars }":["=","="],"chars), don't":["you"],"chars, binary":["etc."],"chars, value":["}"],"chars, you":["can"],"chars. Also,":["consider"],"chars. Not":["sure"],"chars? fübar":["for"],"chars]` (or":["even"],"chars]`, iolists":["allow"],"chars` by":["`[roman,"],"charset ```":["so"],"cheap) and":["then","then"],"cheated a":["bit"],"cheating because":["those"],"cheating if":["you"],"check and":["you","once"],"check by":["`hey`"],"check for":["shouting.","empty","those","silence","an","silence","an","an","the","blank.","nil.","nil,","\"\"","nil","empty","sameness.","equality","length,","silence.","non-whitespace","this,","that.","non-whitespace","Regex.scan/2.","an","an","an","empty","numbers-only","that","that.","characters","whether","letters","exclamation"],"check if":["is","a","a","it","the","a","a","up","a","the"],"check in":["silence?","silence?,","the","the","`shouty?`","the"],"check is":["unnecessary,","not"],"check isn't":["strictly"],"check it":["out."],"check its":["length."],"check methods":["into","private"],"check on":["line","`|\u003e`","an"],"check out":["\u003ccode\u003eString#upcase/1\u003c/code\u003e","`Dict.update/4`,","`cond`","`Dict.merge/3`.","`Dict.merge/3`","`cond`","http://elixir-lang.org/getting_started/2.html","the","http://elixir-lang.org/docs/stable/","http://rubular.com/","\u003ccode\u003eList.foldl/3\u003c/code\u003e","\u003ccode\u003eHasDict.update/4\u003c/code\u003e","`HashDict.update`.","\u003ccode\u003eEnum.map_join/3\u003c/code\u003e","\u003ccode\u003eguards\u003c/code\u003e)","\u003ccode\u003eList.foldl/3\u003c/code\u003e","\u003ccode\u003eguards\u003c/code\u003e","`HashDict.update/4`","`Enum.map_join/3`","`Regex.scan/2`","@rudolph's"],"check rather":["than"],"check syntax":["is"],"check that":["documentation,","the","there","nb","the","out"],"check the":["`String`","size.","stdlib,","length","validations"],"check this":["in"],"check to":["see","see","see","see","see"],"check what":["happens"],"check would":["just"],"check, but":["assumed"],"check, since":["it's"],"check, which":["IMO"],"check, you":["could"],"check. Have":["you"],"check. It":["fails"],"check. Might":["be"],"check. That":["explains"],"check. You":["have","have"],"check? Also,":["super-picky,"],"checked for":["`is_silence?`","ascii)."],"checked if":["I"],"checked in":["both"],"checked out":["`HashDict.update`?","`Enum.map_join`?","`v0.10.0`","`v0.10.0`","the"],"checked the":["Dict.update","thesaurus"],"checked to":["see"],"checked whether":["Erlang"],"checking a":["for"],"checking blocks,":["one"],"checking complex":["conditions."],"checking doesn't":["hurt"],"checking explicitly":["for"],"checking for":["the","an","a","capitals","the","the","a","`is_all_caps?`","equality.","unicode","in","any"],"checking if":["a"],"checking of":["the"],"checking that":["a","letters"],"checking the":["last","last","length","string.","presence","inequality","input"],"checking to":["see","see","see","see"],"checking whether":["a"],"checking with":["vim"],"checking, so":["it"],"checking. It":["also","also"],"checkout \u003ccode\u003eEnum.map_join/3\u003c/code\u003e":["here."],"checks against":["message"],"checks and":["pattern"],"checks are":["needed."],"checks clearer":["by"],"checks for":["an","anagrams"],"checks for,":["possibly"],"checks from":["the","the"],"checks if":["a"],"checks in":["private","private","separate","`Person`","decode_message","a"],"checks into":["private","functions","private","their","private"],"checks need":["to"],"checks on":["the"],"checks outside":["this"],"checks the":["lengths"],"checks were":["extracted"],"checks, so":["\"What?"],"checks/functions as":["well?"],"checks? Think":["about"],"cheeky version":["where"],"cherry on":["top"],"chill condition":["as"],"chill out!\"":["is"],"chill out!\".":["Is"],"chime in":["counter"],"choice between":["using"],"choice for":["do_collect_words/1,","a"],"choice in":["using"],"choice of":["name","using","a"],"choice to":["leave"],"choice would":["be"],"choice. For":["short","me,"],"choice. Sometimes":["it's"],"choice; for":["the"],"choked on":["the"],"choose `to_char_list!/1`":["over"],"choose a":["different","more"],"chose String.codepoints,":["but"],"chose `HashDict.merge/3`":["over"],"chose `_hey`":["for"],"chose `cond`":["here"],"chose not":["to","to"],"chose the":["path"],"chose to":["leave","use"],"chosed `_otherwise`,":["but"],"chosen for":["the"],"christhekeele. I've":["submitted"],"chunking you":["might"],"circle back":["on"],"claim the":["short"],"clarification, @deanna.":["I"],"clarifies our":["application's"],"clarify it":["for"],"clarify the":["code"],"clarifying thought":["experiment,"],"clarity -":["but"],"clarity and":["lack","lack"],"clarity by":["breaking"],"clarity of":["the"],"clarity to":["the"],"clarity. Plus":["I"],"clarity/conciseness v.":["explicitness"],"clarity? This":["is"],"clash between":["`String.length`"],"class (`\\w`)":["in"],"class definition.":["I"],"class instantiation),":["but"],"class methods":["on"],"class of":["lowercase"],"class that":["matches"],"class to":["simplify","simplify","simplify","simplify"],"class with":["only"],"class, because":["them"],"class, they":["have"],"class, which":["is"],"class? Also,":["what"],"class? For":["example"],"classes in":["your","Elixir,"],"classes to":["select"],"classes were":["broadly"],"classes, though":["I'm"],"classes, which":["I"],"classes. String":["is"],"classic one":["for"],"clause (before":["the"],"clause --":["it's"],"clause I":["expect"],"clause `reverse`":["are"],"clause and":["using"],"clause as":["well.."],"clause at":["line"],"clause could":["use"],"clause doesn't":["match,"],"clause for":["an","the","`Statement.nothing?(nil)`","the"],"clause functions,":["but"],"clause in":["cond","`cond`","place.","`for_iter`.","`cond`.","a","`reduce`."],"clause instead":["and"],"clause is":["for"],"clause map":["which"],"clause matches,":["regardless"],"clause matching":["the","in","in","in","in"],"clause necessary?":["It"],"clause of":["`age_on`","handle_decl.","`cond`"],"clause on":["line"],"clause out":["of"],"clause per":["outcome."],"clause the":["first"],"clause to":["end","make","avoid","handle","fall","combine"],"clause where":["you"],"clause with":["pattern","an"],"clause works":["for"],"clause would":["handle"],"clause\" (when":["from"],"clause). `nil`":["is"],"clause, but":["then"],"clause, could":["you"],"clause. Anyway,":["that's"],"clause. But":["it"],"clause. I'm":["still"],"clause? You":["could"],"clauses (I'm":["not"],"clauses (stops":["it"],"clauses `P`":["and"],"clauses `word":["=="],"clauses and":["guard"],"clauses are":["tested","uncommon.","equivalent"],"clauses for":["such","a","verse","line2","`dsl_to_dict`.","each"],"clauses functions":["to"],"clauses if":["you"],"clauses in":["`Words`?","function","case","Erlang","use."],"clauses instead":["of"],"clauses into":["a"],"clauses like":["this"],"clauses look":["something"],"clauses made":["it"],"clauses mutually":["exclusive"],"clauses named":["_sing"],"clauses of":["the","different","an"],"clauses on":["`sing_verse`,","the","line"],"clauses rather":["than"],"clauses seem":["to"],"clauses that":["return"],"clauses to":["get","reduce"],"clauses when":["it's"],"clauses where":["the"],"clauses while":["still"],"clauses with":["recursion"],"clauses you":["need."],"clauses, added":["a"],"clauses, but":["they","it's","I","that"],"clauses, not":["the"],"clauses, one":["of"],"clauses, only":["macros"],"clauses, so":["I"],"clauses, sorry,":["I"],"clauses. But":["that's"],"clauses. Do":["you"],"clauses. Is":["there","there"],"clauses. Thanks":["for"],"clauses. What":["would"],"clauses. Without":["reading"],"clauses... and":["also,"],"clean I":["like"],"clean and":["good"],"clean as":["it"],"clean readable":["solution"],"clean than":["version"],"clean things":["up"],"clean this":["one"],"clean up":["your","the","nested","line","match","unwanted","the"],"clean use":["of"],"clean\" as":["katrina"],"clean, I":["like"],"clean. Great":["use"],"clean. I":["like"],"clean. In":["light"],"clean. Interesting":["trick"],"clean. Think":["it's"],"clean_list function":["is"],"cleaned up":["my","the","the","after","after","after","after","after"],"cleaner (removing":["nested"],"cleaner and":["easier"],"cleaner as":["multiple"],"cleaner by":["having"],"cleaner if":["you"],"cleaner implementation":["based"],"cleaner in":["this"],"cleaner now!":["Thanks!"],"cleaner separation":["of"],"cleaner solution,":["I'll"],"cleaner than":["my","the","the","most"],"cleaner then":["the","my"],"cleaner to":["me."],"cleaner way":["to","to","to"],"cleaner! In":["what"],"cleaner/more expressive":["way"],"cleanest iteration":["so"],"cleanest solution":["I've"],"cleanest version":["I"],"cleanest way":["forward."],"cleaning this":["up."],"cleaning up":["values","and","`append`."],"cleaning up.":["Two"],"cleansed input.":["I"],"cleanup I":["am"],"cleanup earlier":["in"],"cleanup of":["some"],"cleanup return":["an"],"cleanup then":["splitting"],"clear *what*":["`String.downcase`"],"clear `phrase`":["-&gt;"],"clear and":["free","explicit,"],"clear as":["is.","long"],"clear below":["it's"],"clear enough.":["Not"],"clear focus":["on"],"clear for":["future"],"clear itself":["up"],"clear just":["from"],"clear need":["for"],"clear of":["it."],"clear on":["how"],"clear pipeline":["communicates"],"clear possible":["code"],"clear reason":["to"],"clear separation":["of"],"clear sign-flip":["(basically),"],"clear story":["all"],"clear that":["its","the","if","the","all"],"clear this":["a"],"clear to":["have","instead","me.","me","me,","compare","understand"],"clear way":["to"],"clear what":["the","happens","it","a"],"clear what's":["going"],"clear which":["param"],"clear with":["pipelines?"],"clear, but":["there's","there's","there's"],"clear, especially":["with","since"],"clear, expressive":["variable"],"clear, much":["of"],"clear. But":["I"],"clear. Did":["you"],"clear. Thanks":["for"],"clear. This":["regex"],"clear. Your":["co-workers"],"clear? If":["so,"],"clear? Will":["using"],"clearer by":["moving"],"clearer for":["`sorted_letters`,"],"clearer having":["extracted"],"clearer if":["you","different"],"clearer to":["just","use","just","use","a","first"],"clearer way":["to"],"clearer ways":["to"],"clearer what":["those","they","it's"],"clearer what's":["happening"],"clearer when":["most"],"clearer, I":["think."],"clearer, though,":["if"],"clearer. Check":["out"],"clearer. I":["was"],"clearer. It":["looked"],"clearer. It's":["obvious"],"clearer. Just":["a"],"clearer. My":["first"],"clearer. Something":["doesn't"],"clearly a":["noob"],"clearly and":["everything"],"clearly communicated.":["Looks"],"clearly expresses":["intention."],"clearly indicates":["that"],"clearly named":["list","methods."],"clearly the":["process,"],"clearly understand":["the"],"clearly with":["the"],"clearly without":["having","just"],"clearly, but":["now"],"clearly. Here's":["how"],"clears up":["my"],"clever or":["too"],"clever to":["reuse"],"clever, but":["not"],"clever. Nothing":["spectacular"],"clever. Should":["it"],"cli and":["race"],"cli you'll":["get"],"click on":["\"ok,","the"],"click the":["button"],"clicked once":["I"],"clicked the":["wrong"],"clicking around":["in"],"client can":["then"],"client code":["that","too."],"clojure solution":["a"],"clojure used":["uppercase"],"close enough":["as"],"close look":["what"],"close second":["place"],"close to":["describing","each","`if`."],"closed within":["`match`.","`match`"],"closely enough":["at"],"closely, it":["looks"],"closer to":["the","the","our","my"],"closer together":["than"],"closer! Line":["20"],"closer, I":["see"],"closer, and":["put"],"closing parenthesis":["on"],"closure and":["not"],"clue, first":["time"],"clues or":["pointers?"],"clutter (once":["you"],"clutter the":["code"],"cluttered to":["me."],"cluttering up":["the"],"clutters up":["the"],"co-workers will":["thank"],"code (I":["know"],"code (by":["that"],"code (like":["perhaps"],"code (within":["the"],"code --":["less"],"code @ward":[","],"code I":["have","would","like","would","realize","try","think."],"code I've":["seen,","ever","written.","seen"],"code a":["little","little","bit.","bit","lot","lot","bit"],"code additionally":["contains"],"code and":["\"the","remove","think","isn't","I","see","the","hinder","I","more"],"code as":["simple","if"],"code assumes":["will"],"code at":["compile"],"code because":["once"],"code becomes":["easier"],"code being":["a"],"code better.":["It","The"],"code but":["it"],"code by":["using","not","writing"],"code called":["those"],"code certainly":["isn't"],"code changes":["you'll"],"code clearer.":["My","It"],"code common":["for"],"code commonly":["uses"],"code considerably":["longer"],"code consistent":["since"],"code convention?":["I"],"code could":["be"],"code display":["for"],"code does":["seems","pass"],"code does?":["If"],"code doesn't":["deal","compile","unnecessary","perform","even","look"],"code duplication":["in"],"code easier":["to","to","to","to"],"code encapsulation":["standpoint"],"code even":["tighter."],"code ever":["written"],"code example":["would"],"code example?":["I"],"code expresses.":["Often"],"code feels":["quite"],"code fine":["(in"],"code first":["and"],"code focused":["in"],"code for":["this","the","?","that","it"],"code from":["shouting?","`shouting?`"],"code gets":["escaped"],"code got":["much"],"code had":["names!"],"code handle":["both","variations"],"code harder":["to"],"code has":["become?","a"],"code here":["to"],"code if":["you","I","I"],"code in":["Elixir","a","that","Javascript","List","Elixir.","elixir.","a","the","question,","`angrams?`","`uppercase?`","common.","a","a","`filter`"],"code inline":["in"],"code instead":["of"],"code into":["a"],"code is":["getting","more","just","the","read","\"OK-ish\".","more","occurs","to","certainly","doing.","easier","looks","on","ok","fine","nice","a","easy","definitely","a","efficient","easy","`if","`Code.eval_quoted`.","a","so","easier","passing","short","flexible","relatively"],"code itself,":["unless"],"code later":["on"],"code less":["readable"],"code like":["that","this","this","that"],"code line":["by"],"code look":["prettier.","better"],"code looks":["like.","good,","uglier","good.","good.","good","good.","quite","a","quite","like.","great"],"code means":["-"],"code might":["be","pass"],"code more":["clear","readable?","readable?","readable.","readable","readable.","readable.","readable.","efficient,","consistent","readable."],"code much":["less","less","harder","easier"],"code needs":["to"],"code never":["looked"],"code not":["knowing"],"code of":["others"],"code offered":["in"],"code often":["goes"],"code on":["the"],"code optimization":["on"],"code or":["single"],"code outside":["this"],"code pass":["all"],"code performs":["downcasing"],"code points":["/","encoded","(strings"],"code points.":["Yes,"],"code possible":["while","I"],"code probably.":["Looking"],"code quite":["a"],"code react":["to"],"code readability,":["and"],"code readability:":["check"],"code reads":["to"],"code reflects":["the"],"code runs":["over"],"code sample":["again."],"code simple":["to"],"code simpler.":["But"],"code smell":["for"],"code so":["any","one","much","that","it's"],"code somewhat":["easier"],"code stuff":["like"],"code that":["is","does","clearly","will","I","only","uses","way,","results","the"],"code the":["most","most"],"code though,":["just"],"code to":["rename","manage","read","see","read.","explain","see","write,","mutate"],"code typically":["has"],"code updates":["the","the"],"code uses":["Elixir","the"],"code usually":["looks.","comes"],"code very":["clear!"],"code was":["good"],"code were":["to"],"code when":["pipes"],"code whether":["the"],"code which":["defines","defines","degrades"],"code will":["work"],"code with":["variables","`Enum.reduce`.","mine","explicit"],"code without":["regexes"],"code won't":["break.","pass"],"code work":["with"],"code works":["and"],"code would":["be","be","read","have","look","be"],"code yet":[":-("],"code you":["could","see"],"code you're":["going"],"code\". This":["could"],"code's still":["very"],"code, I":["wasn't","thought","find","had"],"code, I'd":["probably"],"code, `Enum.join`":["calls"],"code, but":["I"],"code, it":["doesn't","considers"],"code, now":["i"],"code, otherwise":["looks"],"code, removed":["the"],"code, so":["I","I"],"code, though":["by","I"],"code, which":["(mostly","I"],"code, with":["a"],"code. 2":["examples"],"code. :)":["I"],"code. :/":["Sorry"],"code. Any":["way"],"code. How":["did"],"code. I":["keep","don't","think","find","want","like"],"code. I'm":["not","comfortable"],"code. It's":["not"],"code. Line":["8"],"code. Maybe":["there's"],"code. No":["need"],"code. One":["person's"],"code. Should":["the"],"code. Thank":["you."],"code. That's":["often"],"code. The":["regex"],"code. There's":["a"],"code. This":["is"],"code. Waiting":["for"],"code. Which,":["in"],"code. Would":["you","that"],"code...I think":["your"],"code; the":["only"],"code? If":["so,"],"code? It":["doesn't"],"code? There":["is"],"codebase around":["at"],"codebases they":["are"],"coded with":["elixir"],"codepoint \u003c":["256"],"codepoint and":["then"],"codepoint technically,":["with"],"codepoint to":["its"],"codepoints (I":["think...)"],"codepoints and":["then"],"codepoints are":["easier"],"codepoints but":["one"],"codepoints point":["though."],"codepoints to":["be"],"codepoints). In":["most"],"codepoints, filter":["or"],"codepoints. Secondly,":["I"],"codes. Also,":["do"],"coding (and":["I"],"coding for":["a"],"coding ruby.":["However,"],"coding style":["guide!"],"coercion to":["binaries?"],"cognitive overhead.":["I"],"cohesive, single":["responsibility?"],"collapse it":["into"],"collapse the":["middle","private"],"collapse those?":["Maybe"],"collapse to":["one?"],"collapsed `cond`.":["The"],"collapsed in":["another"],"collapsed the":["methods"],"collecting values":["during"],"collection and":["the"],"collection from":["`accumulate/2`,"],"collection interfaces":["&"],"collection is":["empty"],"collection of":["words.","functions"],"collection system":["is","is"],"collection to":["a"],"collection, for":["example."],"collection, using":["`conditionally_add_item`"],"collection. Is":["this"],"collection]`. And":["that's"],"collection` you":["could"],"collections more":["than"],"collections of":["functions,"],"collections, not":["just"],"collide. Then":["I"],"colon after":["do"],"colons but":["you"],"color television).":["Of"],"combination of":["`Regex.replace`","features","pattern"],"combinations like":["\"27"],"combine `Enum.flat_map`":["and"],"combine a":["couple"],"combine it":["into"],"combine the":["`interpret`","filter","last"],"combine to":["do"],"combined to":["`Enum.flat_map`.","`Enum.map_reduce`."],"combined what":["could"],"combined with":["the","`Enum.all?`","`Enum.reduce`"],"combined, take":["a"],"combing through":["the"],"combining lines":["26"],"combining mark":["(which"],"combining the":["cond","map"],"come across":["private","the","it"],"come after":["the"],"come back":["in","to"],"come before":["is_shouting?."],"come from":["or","an"],"come in":["handy","handy.","handy","handy.","handy"],"come into":["play."],"come much":["earlier"],"come out":["ASCII"],"come to":["the","my","think"],"come up":["with","with","with","with","with","with","with","with","with","with","with","with,","with","with","with","with"],"comes before":["the"],"comes first":["feels"],"comes first.":["Then"],"comes from":["doing","significant","Erlang.","the"],"comes later":["when"],"comes out":["being","of"],"comes pretty":["close"],"comes to":["the","the","the","solve"],"comes up":["in"],"comes where":["Bob"],"comes with":["efficiency","a"],"comfortable using":["`reduce`"],"comfortable with":["the","reading"],"coming from":["Ruby."],"coming from.":["(If"],"coming his":["way,"],"coming to":["it","me."],"coming up":["with","with","with"],"comma after":["the"],"comma twice":["to"],"command I've":["missed?"],"command-line command":["I've"],"commands and":["shouted"],"commas. You":["add"],"comment --":["I"],"comment about":["`line_number`,","considering"],"comment because":["it"],"comment from":["my","someone"],"comment in":["the","the","several"],"comment is":["the","saved,"],"comment is,":["do"],"comment on":["your","why","the"],"comment regardless":["of"],"comment starting":["on"],"comment states":["it"],"comment that":["calls"],"comment to":["explain"],"comment was":["meant"],"comment would":["be"],"comment yet.":["If"],"comment, I":["think"],"comment, I'll":["check"],"comment, fixed":[":-)"],"comment, the":["first"],"comment, you":["said"],"comment. Usually":["when"],"commented dead":["code,"],"commented in":["to"],"commented lines":["work,"],"commented on":["your"],"commented out":["stuff","in","tests"],"commented out.":["Fixed"],"commented-out line":["of"],"commented-out lines":["before"],"commenter about":["previous"],"commenter that":["it"],"commenting now!":[":)"],"commenting out":["the"],"comments above":["each"],"comments and":["make","discussions.","suggestions."],"comments are":["valid"],"comments for":["each","public"],"comments have":["nudged"],"comments in":["mind.","your","the"],"comments on":["this","each","your","dot-dsl"],"comments that":["are"],"comments there.":[":)","Thanks"],"comments very":["well."],"comments! New":["version"],"comments) to":["explain"],"comments, @liliane":["and"],"comments, and":["sorry"],"comments, there.":["Didn't"],"comments. I":["noticed"],"comments. Oh,":["I"],"comments. That's":["cool"],"comments. Wrapping":["my"],"comments: You":["can"],"commit message":["that"],"commit](https://github.com/elixir-lang/elixir/issues/1526) landed":["in"],"committer on":["a"],"common because":["you"],"common bug:":["`List.duplicate"],"common code":["into"],"common convention":["with","is"],"common denominator":["of"],"common for":["different","a","small","the"],"common idiom":["is."],"common in":["Erlang","Elixir","Haskell","Erlang","Elixir","Elixir"],"common interface.":["I"],"common length.":["Sweet."],"common logic":["out."],"common name":["for"],"common not":["to","to"],"common parts":["to"],"common pattern":["or","in"],"common pattern.":["For"],"common pattern...accumulating":["a"],"common people":["will"],"common regex":["methods","methods"],"common than":["just"],"common to":["go","do","use","put","create","not","put","put","always","use","put","use","guard","see","name","make","use","use","use","name","use","use"],"common way":["is","to"],"common when":["creating"],"common, but":["Haskell's"],"common. You":["could"],"commonly done":["to"],"commonly helper":["methods"],"commonly refer":["to"],"commonly so":["far"],"commonly understood":["in"],"commonly uses":["the"],"commonly written":["as"],"communicate that":["to"],"communicated. Looks":["good"],"communicates better":["when"],"communicating intention.":["This"],"communication is":["happening."],"communication of":["the"],"communication that":["putting"],"community about":["trailing/leading"],"community has":["taken"],"community is":["working","about,","more"],"community point":["me"],"community prefers":["in"],"community whose":["goal"],"community, but":["it"],"community. What":["you"],"compact by":["writing"],"compact! My":["next"],"compactness is":["nice."],"comparator for":["most"],"compare (`==`)":["and"],"compare `something`":["to"],"compare it":["with","with","to"],"compare letter":["counts"],"compare sets":["you"],"compare that":["result","to"],"compare the":["stripped","length","results","binary","sorted","originals","stripped"],"compare to":["iteration","the"],"compare with":["an","`base`."],"compared the":["length","sorted"],"compared them":["side-by-side"],"compared to":["the","a","normal","the"],"compares it":["with"],"compares letter":["sets,"],"compares with":["empty"],"comparing against":["`\"\"`","empty"],"comparing the":["result.","result","last"],"comparing to":["an"],"comparing two":["lists","strings,"],"comparing your":["code"],"comparison `base":["!="],"comparison be":["more"],"comparison but":["also"],"comparison function":["to"],"comparison if":["there"],"comparison in":["mine,"],"comparison it's":["clear"],"comparison of":["two"],"comparison with":["empty","\"\"."],"comparison word":["was"],"comparison words":["back"],"comparison would":["work"],"comparison. Doesn't":["make"],"comparison. If":["this"],"comparison. The":["@elyssa"],"comparisons in":["pattern"],"comparisons that":["my"],"comparisons, and":["then"],"compilation errors":["when"],"compile because":["of"],"compile down":["to"],"compile error":["\"unquote"],"compile for":["me"],"compile hints":["to"],"compile time":["quite","translation"],"compiled away,":["so"],"compiled into":["pattern"],"compiled it":["using"],"compiled with":["Erlang"],"compiler (`|\u003e`":["is"],"compiler about":["the"],"compiler and":["VM","standard"],"compiler can":["know","often"],"compiler doesn't":["really"],"compiler error":["because"],"compiler is":["smart"],"compiler may":["throw"],"compiler rejected":["the"],"compiler stop":["giving"],"compiler that":["I'm"],"compiler warning":["if"],"compiler won't":["show"],"compilers, like":["Haskell,"],"compiling my":["module,"],"complaint about":["Elxiir"],"complementing. That's":["probably"],"complete Elixir":["novice,"],"complete all":["the"],"complete newbie":["in"],"complete the":["exercise"],"complete them":["("],"complete this":["exercise"],"complete with":["spec"],"complete, you":["could"],"completed an":["exercise"],"completed one":["of"],"completed the":["prime-factors","prime-factors"],"completed your":["first"],"completed yourself.":["As"],"completely agree:":["this"],"completely build":["with"],"completely different":["task."],"completely eliminate":["empty"],"completely forgot":["about"],"completely new":["language","to"],"completely normal,":["both"],"completely oblivious":["to"],"completely on":["the"],"completely opaque.":["I"],"completely sure":["it","if"],"completely sure,":["but"],"completely the":["same"],"completely this":["is"],"completely understand":["how"],"completely useless":["error"],"completely whether":["two"],"completely, and":["here"],"complex and":["thus"],"complex and/or":["should"],"complex but":["I"],"complex domain,":["maybe"],"complex expression":["for"],"complex function":["in"],"complex idea;":["why"],"complex ones":["to"],"complex operations,":["and"],"complex or":["the"],"complex than":["a","it"],"complex to":["understand"],"complex, but":["it's"],"complex, so":["I'm"],"complex. I":["think","generally"],"complexity (O(n^2)).":["Consider"],"complexity (on":["average"],"complexity cost":["which"],"complexity in":["`clean(word)`?"],"complexity notation":["it's","it's"],"complexity of":["`O(n+m)`"],"complexity problem.":["The"],"complexity to":["understand,"],"complexity) of":["an"],"complexity, for":["each"],"complexity, i.e.":["`CustomSet.intersection(s1,"],"complexity, yeah,":["maybe"],"complexity. It's":["possible"],"complicated ,":["think"],"complicated /":["unreadable?"],"complicated IMO;":["have"],"complicated `4":["&amp;&amp;"],"complicated code":["so"],"complicated it":["also"],"complicated nature":["of"],"complicated regular":["expression"],"complicated than":["a"],"complicated to":["be","read."],"complicated way":["to"],"complicated with":["anonymous"],"complicated, so":["I"],"complicated. I":["will"],"complicated. You're":["converting"],"complication of":["things"],"components of":["the"],"compose said":["functions."],"compose split":["and"],"composed of":["only"],"composing a":["new","list"],"composing my":["message"],"comprehend easily.":["This"],"comprehend when":["reading"],"comprehend. Also,":["I"],"comprehend. However,":["the"],"comprehend. I":["only"],"comprehend. I'll":["make"],"comprehensible if":["it"],"comprehensible. It":["requires"],"comprehension (`lc`)":["instead"],"comprehension ...":["looks"],"comprehension can":["depend"],"comprehension desugars":["to"],"comprehension for":["those"],"comprehension has":["`O(n*m)`"],"comprehension might":["be"],"comprehension over":["flat_map"],"comprehension so":["I"],"comprehension suggestion,":["@micaela."],"comprehension syntax,":["so"],"comprehension to":["create"],"comprehension version":["over"],"comprehension would":["be"],"comprehension, but":["then"],"comprehension. I":["see"],"comprehension. I'll":["submit"],"comprehension. It's":["not"],"comprehensions and":["pattern","alot"],"comprehensions are":["really","simply","something"],"comprehensions as":["suggested"],"comprehensions but":["you"],"comprehensions can":["be"],"comprehensions for":["this"],"comprehensions improved":["the"],"comprehensions in":["Erlang"],"comprehensions that":["I"],"comprehensions) might":["be"],"comprehensions. I":["like"],"comprehensions. This":["is"],"comprehensions? If":["you"],"compromise, but":["it's"],"compromising future":["changes"],"computation a":["bit"],"computation. Those":["names"],"computationally but":["I'm"],"compute `last`":["all"],"compute on":["each"],"compute the":["downcase"],"compute. If":["in"],"computed in":["a"],"computed once":["instead"],"computed, `acc":["=","=","=","=","=","=","=","=","=","="],"computer so":["the"],"computers know":["what"],"computing an":["intersection"],"computing the":["sorted","sorted"],"concat [\"#\u003cCustomSet":["\","],"concat and":["also","in"],"concat are":["ugly"],"concat by":["appending"],"concat concatenating":["a","a"],"concat doesn't":["pass"],"concat for":["huge"],"concat implementation":["relying"],"concat is":["very"],"concat tests":["takes"],"concat using":["append."],"concat(ll), do:":["reverse(ll)","reduce(ll,"],"concat, which":["I"],"concatenate it":["into"],"concatenated or":["even"],"concatenating a":["newline","million","million"],"concatenating on":["the"],"concatenating to":["the"],"concatenation is":["actually"],"concatenation of":["binaries","`[[1,","`[[1,"],"concatenation operator":["inline"],"concatenation, it":["works"],"concept in":["functional","functional","functional"],"concept of":["`else","splitting","an","iterators","iolists"],"concept, but":["I"],"concept, check":["out"],"concept, clicked":["once"],"concept. Moreover,":["it"],"concepts that":["are"],"conceptual improvement":["of"],"conceptual leap":["from"],"conceptually `scan`":["might"],"conceptually meaningful":["datastructure"],"conceptually they're":["more"],"concern is":["that"],"concern. Something":["like"],"concerned about":["readability."],"concerned exclusively":["with"],"concerned that":["the","someone"],"concerned with":["appropriately"],"concerned with,":["really,"],"concerning making":["the"],"concerns here":["by"],"concerns here,":["but"],"concerns itself":["with","with"],"concerns should":["be"],"concerns than":["you"],"concerns when":["I"],"concerns, and":["your"],"concise and":["elegant","communicating","comprehensible","I"],"concise at":["all."],"concise for":["an"],"concise implementation":["of"],"concise methods":["you"],"concise solution.":[":)"],"concise way":["to"],"concise way.":["I"],"concise words.":["Any"],"concise! A":["couple"],"concise, but":["have","they","there","it's","it's"],"concise, especially":["with"],"concise, which":["I"],"concise. I":["hadn't"],"concise. I'm":["not","sadly"],"concise. Just":["a"],"concisely, but":["what"],"conciseness of":["the"],"concision and":["locality"],"conclusion here,":["it's"],"conclusion that":["I'd"],"concrete implementation":["(Enum"],"concrete use":["case."],"concurrency simple":["enough"],"concurrency specifically.":["The"],"concurrency, so":["that"],"concurrent anagram":["finder"],"concurrent exercise":["I've"],"concurrent processes,":["one"],"concurrent version":["is"],"concurrent. Out":["of"],"concurrent? Is":["it"],"cond ```":["logic","logic","statement","inside"],"cond and":["if.","use"],"cond as":["simple"],"cond block":["doesn't"],"cond block,":["with","making"],"cond branches":["as"],"cond clause":["the"],"cond clauses":["functions","are"],"cond conditions":["-&gt;"],"cond do":["whatever"],"cond evaluates":["conditions"],"cond expressions":["occur","are"],"cond feels":["better"],"cond in":["hey,","the","this"],"cond is":["fine,","no","less"],"cond macro":["is","uses"],"cond one,":["but"],"cond statement":["in"],"cond statements":[":)","much"],"cond tests":["in"],"cond than":["pattern"],"cond that's":["probably"],"cond to":["return"],"cond up":["to"],"cond version":["just"],"cond vs.":["functions"],"cond was":["a"],"cond which":["could"],"cond will":["be"],"cond with":["two","two"],"cond, \u003ccode\u003etrue":["-\u003e\u003c/code\u003e"],"cond, I":["was"],"cond, but":["it","decided"],"cond, do:":["whatever`"],"cond-switch comes":["out"],"cond. It's":["more"],"cond. There":["is"],"cond; do;":["end"],"cond? Not":["sure"],"condense some":["of"],"condense the":["code"],"condensed and":["without"],"condensed the":["lines"],"condition `def":["nothing?(_),"],"condition also?":["Then"],"condition as":["it"],"condition cases":["on"],"condition checking":["blocks,"],"condition checks":["in"],"condition for":["the"],"condition function":["be"],"condition functions":["be"],"condition in":["`silent?`"],"condition into":["its","a"],"condition is":["called"],"condition isn't":["true"],"condition like":["else"],"condition msg":["!="],"condition of":["your"],"condition on":["the"],"condition part":["of"],"condition still":["has"],"condition that":["ends"],"condition you're":["checking,"],"condition, not":["the"],"condition. Having":["coded"],"condition1 do":["true"],"condition2 do":["..."],"conditional and":["individual"],"conditional code.":["2"],"conditional if/else,":["case,"],"conditional in":["a","`_add_word`.","`count_words/2`?","singalong"],"conditional like":["that,"],"conditional logic":["into","in"],"conditional of":["some"],"conditional statements":["when","in"],"conditional up":["into"],"conditional) to":["handle"],"conditional, and":["somehow"],"conditionally replacing":["a"],"conditionals are":["correct,"],"conditionals in":["my","my","`bottles_of_beer`"],"conditionals look":["a"],"conditionals returning":["`anagrams`)"],"conditionals to":["their"],"conditionals. (see":["http://elixir-lang.org/crash-course.html)"],"conditionals. For":["instance,"],"conditionals. –":["Is"],"conditions (String.length(message)":["=="],"conditions (ie":["String.length(text)","String.upcase(input)"],"conditions (more":["intention"],"conditions ,":["I"],"conditions -&gt;":["returns"],"conditions are":["perfectly","pretty","more","already"],"conditions as":["well"],"conditions because":["I"],"conditions for":["types"],"conditions in":["to","methods","Teenager#hey.","helpers","order)"],"conditions inside":["of"],"conditions into":["methods","their","private","predicate"],"conditions is":["significant."],"conditions match":["it,"],"conditions more":["than"],"conditions must":["be"],"conditions mutually":["exclusive"],"conditions on":["`quiet?`."],"conditions out":["to"],"conditions that":["give","don't"],"conditions to":["private","helper","separate"],"conditions under":["cond,"],"conditions would":["be"],"conditions you":["are"],"conditions\" and":["\"condition"],"conditions, but":["this"],"confess I'm":["getting"],"confidence to":["do"],"confident in":["the"],"configure a":["name"],"confirmed that":["I"],"conflating char":["lists,"],"conflict my":["sorting"],"conflict, other":["than"],"conflicts during":["the"],"conform to,":["your"],"conformant with":["other"],"conforming to":["the"],"confused .":["The"],"confused about":["strings","the"],"confused by":["which","your"],"confused me":["enough"],"confused, with":["`&{&1,"],"confuses at":["least"],"confusing :),":["and"],"confusing bundle":["of"],"confusing is":["that"],"confusing right":["now."],"confusing to":["have","be"],"confusing what":["you're","the"],"confusing, are":["there"],"confusing, since":["it's"],"confusing, you":["might"],"confusing. Especially":["`new/2`."],"confusing. I'd":["forgotten"],"confusing: `String.strip(greeting)":["|\u003e"],"confusion for":["awhile."],"confusion is":["the"],"confusion it'd":["be"],"confusion maybe":["came"],"conjunction with":["Enum/Stream."],"conjunction. (Overgeneralised":["maybe?)"],"connaissais pas":["cette"],"connecting multiple":["lines"],"cons (`[|]`)":["is"],"cons operator)":["on"],"cons, though:":["we"],"consecutive \"desired\"":["characters."],"consensus is":["around","reached"],"consequently in":["elixir"],"consider \"1,":["2,"],"consider `\"":["\"`"],"consider `String.ends_with?`":["rather","in"],"consider a":["few","different","message","solution","list"],"consider breaking":["out","the"],"consider cleaning":["up."],"consider combining":["lines"],"consider declaring":["`import"],"consider deleting":["it"],"consider extracting":["the","the","well-named"],"consider for":["the"],"consider giving":["each"],"consider going":["to"],"consider having":["your"],"consider higher":["order"],"consider if":["the"],"consider implementing":["`shout?`"],"consider is":["the"],"consider it":["a","the","when"],"consider making":["`x`"],"consider most":["important.","important."],"consider not":["using"],"consider putting":["the","the"],"consider redoing":["L12"],"consider renaming":["the","it"],"consider returning":["to"],"consider reversing":["the"],"consider that":["these","might","there","-"],"consider that,":["can't"],"consider the":["naming","optimization","result"],"consider this":["a","more","for"],"consider to":["hold"],"consider using":["`\\w`,","`\\w`,","the","the","pattern","a","Pattern","two","any","HashDict.update","the","an","private","`Enum.count`"],"consider ways":["to"],"consider whether":["it","you"],"consider why":["`is_anagram`"],"consider words":["that"],"consider: you":["could"],"considerably longer":["(which"],"considerably more":["readable","concise"],"consideration I":["decided"],"consideration, but":["like"],"consideration, though:":["it"],"considered Regex#scan":["and"],"considered a":["phrase.","\"falsy\"","word","word","word"],"considered adding":["a"],"considered another":["method"],"considered better":["to"],"considered breaking":["your","the"],"considered changing":["it"],"considered dropping":["the"],"considered extracting":["conditions","the"],"considered function":["level"],"considered getting":["rid"],"considered good":["practice?"],"considered here":["is"],"considered how":["I"],"considered it.":["I'm"],"considered making":["it","it","it","each","`is_shouting?`","some"],"considered moving":["the","`String.downcase`"],"considered separating":["the","the","the"],"considered shouted":["with"],"considered shouted.":["(But"],"considered shouting,":["so"],"considered that":["upcasing","this"],"considered the":["list"],"considered to":["be","be","be"],"considered using":["a","String.ends_with?","`Dict.update/4`","pattern","String.upcase","a","descriptively"],"considered w.r.t.":["`fn"],"considered what":["happens"],"considered writing":["similar"],"considered yelling.":["Also,"],"considered: I":["initially"],"considerer hiding":["the"],"considerer... Do":["you"],"considering giving":["good"],"considering list":["comprehensions"],"considering that":["it","there's","there"],"considering whether":["the"],"considering you":["only"],"considers \"_\"":["to","to"],"considers `_`":["to"],"consist of":["only"],"consistency (and":["lack"],"consistency, but":["I'm"],"consistency, wouldn't":["it"],"consistent and":["also","readable."],"consistent importing":["over"],"consistent internal":["implementation."],"consistent isn't":["it?"],"consistent level":["of","of","of"],"consistent since":["that's"],"consistent way":["to"],"consistent with":["interpret,","`interpret`,"],"consistent would":["be"],"consistent. Overall":["you"],"consistent? One":["says"],"consistently disappoint":["me"],"consistently use":["parentheses."],"consolidate those":["two"],"consolidating the":["texts"],"constant (remember":["that"],"constant I":["had"],"constant factors":["(same"],"constant or":["not"],"constant space":["without"],"constant to":["other","just"],"constant while":["without","without","without","without","without"],"constant, a":["method"],"constant. Constants":["are"],"constants -":["this"],"constants for":["the"],"constants to":["avoid"],"constants): `@oma":["HashDict.new"],"constants, or":["indeed"],"constants. For":["example:"],"constants. It's":["style"],"constraint comes":["from"],"constraint on":["argument"],"constraints in":["what's"],"constraints there":["are"],"constraints. I'm":["still"],"construct (sometimes":["an"],"construct as":["much"],"construct in":["a"],"construct instead":["of"],"construct should":["be"],"construct, but":["for","I"],"constructed HashDicts":["I"],"constructed, and":["I'm"],"construction `(acc[x]":["||"],"construction is":["better."],"construction really":["short"],"constructive criticism":["with"],"constructive criticism.":[":)"],"constructor argument":["and"],"constructor for":["straight-forward"],"constructor of":["the"],"constructor so":["I've"],"constructor). I":["make"],"constructs and":["there"],"consume much":["memory"],"consuming the":["response"],"consumption than":["is","is","is","is","is"],"contact with":["elixir,"],"contain bugs":["that"],"contain letters":["is"],"contain only":["non-unicode-letter-class"],"contain punctuation":["chars"],"contain things":["that"],"contain unicode":["currency"],"contained \"bottle#{s}\"":["and"],"contained `\"10!\"`.":["The"],"contained letters.":["Good"],"contained non-ASCII":["chars?"],"contained numbers":["and"],"contained test":["`assert"],"contained the":["prime"],"containing all":["the"],"containing just":["empty"],"containing one":["method."],"containing whitespace.":["=/"],"contains a":["problem","bit"],"contains all":["capital"],"contains an":["exclamation"],"contains any":["capital","letters"],"contains at":["least","least"],"contains characters":["you"],"contains for":["example"],"contains lower":["case"],"contains lowercase":["characters"],"contains no":["lowercase"],"contains punctuation":["chars"],"contains several":["functions","functions","functions","functions","functions"],"contains the":["expected"],"contains uppercase":["characters."],"contains_letters? regex":[":)"],"content after":["`##"],"content it's":["meant"],"content of":["the","the"],"content with":["the"],"content, and":["the"],"content. For":["example"],"contents (`String.length(foo)":["=="],"contents I":["went"],"contents of":["`inc`","a","a","`anagram?`"],"contents). In":["any"],"context I":["find"],"context of":["`hey/1`.","a"],"context on":["*why*"],"context), take":["a"],"context); but":["worth"],"context, but":["I"],"context, especially":["since"],"context-sensitive name":["for"],"context. For":["example"],"context. I":["found"],"contexts where":["they"],"contiguous. Looks":["good"],"continue reading":["to"],"continue to":["dig."],"continues like":["that."],"contrast, `blank?`":["and"],"contrast, the":["same"],"contribute, albeit":["in"],"contribute, if":["you'd"],"contributed to":["elixir-core.."],"contributes nothing.":["Just"],"contrived, I":["know)"],"control flow":["as","operator","mechanism"],"control flow.":["Have"],"control of":["what's"],"control structure":["in","or","sends..."],"control structures":["just","that"],"control structures.":["What"],"control unless":["there's"],"controlling_shares(stock), do:":["stock"],"convenience for":["writing","writing"],"convention I'm":["used"],"convention I've":["noticed."],"convention based":["on"],"convention est":["d'utiliser"],"convention for":["functions","functions","predicates)","Elixir,"],"convention in":["Elixir","Elixir,","Ruby."],"convention is":["that","in","to","used","to","used.","used","lowercase","to","lower","pretty","for"],"convention of":["putting","putting","method","naming","ending"],"convention or":["have"],"convention seems":["to"],"convention so":["I"],"convention that":["clearly"],"convention with":["Elixir."],"convention, c'est":["astucieux"],"convention, so":["I"],"convention. Also,":["I"],"convention. I":["have"],"convention... could":["use"],"convention/preference thing.":["Do"],"convention? I":["will"],"conventions ---":["I'll"],"conventions, as":["well"],"conventions. I":["think"],"conversation about":["what"],"conversation i":["had"],"conversation, build":["people"],"conversation, which":["can"],"conversion (with":["filtering"],"conversion fails":["but"],"conversion from":["private"],"conversion function":["was"],"conversion of":["my"],"conversion option":["there!"],"conversion to":["and","list"],"conversion works,":["I"],"conversion. I":["missed"],"convert a":["bitstring","float","string","string"],"convert back":["to"],"convert between":["a"],"convert it":["back"],"convert list":["to"],"convert the":["binaries","string","passed","collection","weekday","whole"],"convert to":["list"],"convert to/from":["strings."],"convert(_), do:":["nil"],"convert(c) when":["c","c"],"convert(x) end`":["as"],"convert/cast a":["string"],"converted the":["previous"],"converted to":["something","something","something","codepoints"],"converting a":["string","string","list"],"converting list":["to"],"converting the":["list","binary"],"converting to":["a","a","a"],"convertion (dunno":["why"],"converts it":["to"],"converts to":["a"],"converts using":["`String.Chars`"],"convey what":["it"],"conveys information":["better."],"conveys nicely":["what"],"conveys the":["intent"],"convinced about":["extracting"],"convinced me":["to"],"convinced myself":["of"],"convinced that":["trying"],"convinced this":["version"],"convinced. By":["using"],"convoluted than":["it"],"cool and":["now"],"cool but":["they"],"cool if":["you"],"cool implementation,":["but"],"cool that":["it's","Elixir","you"],"cool there.":[":)"],"cool to":["remember"],"cool trick,":["piping"],"cool way":["of","to"],"cool! I":["did"],"cool! Thanks":["for"],"cool! That":["looks"],"cool) and":["using"],"cool, but":["you","not"],"cool, looks":["idiomatic."],"cool, thanks":["for"],"cool. I":["didn't","actually","just"],"cool. I'll":["do"],"cool. Pretty":["nice"],"cool. Thanks":["redmar!","for","for"],"cool. Thanks,":["@kaylah."],"copied in":["memory."],"copied the":["example"],"copy and":["paste","paste"],"copy of":["the","the"],"copy paste":["from"],"copy pasted":["nitpicks"],"copy them":["from"],"copy those":["parts"],"copy. I":["just"],"copy. Within":["Enum.reduce,"],"copy/paste it":["into"],"copy/paste... but":["is"],"copying from":["GitHub?"],"core functions":["in"],"core language":["specifications\"...)"],"core lib.":["Using"],"core libs!":["Updated."],"core of":["OTP's"],"corner case":["`\"1,"],"corner case,":["though"],"correct (using":["an"],"correct and":["I"],"correct answer,":["the"],"correct boolean":["regardless"],"correct exception":["will"],"correct form":["of"],"correct idioms":["or"],"correct me":["if"],"correct method":["to"],"correct of":["course,"],"correct operator":["to"],"correct order":["instead"],"correct private":["clauses."],"correct response.":["Good","Thoughts?"],"correct than":["flatten","flatten.","`flatten`"],"correct that":["my"],"correct unless":["there's"],"correct, I":["understan"],"correct, the":["do"],"correct. But":["now"],"correct. This":["is"],"correct? I":["like"],"correction. That":["regex"],"corrections and":["improvements."],"correctly `HashDict.update`":["doesn't"],"correctly and":["the","I'd"],"correctly applied":["tail"],"correctly but":["I've"],"correctly is":["the","important"],"correctly note":["the"],"correctly) to":["accept"],"correctly, but":["maybe","I'm"],"correctly, even":["used"],"correctly, pipe":["sends"],"correctly, the":["first"],"correctly, though,":["having"],"correctly. That":["seems"],"corrects all":["that,"],"corresponding `Dict`":["functions."],"corresponding regex.":["Might"],"cost (officially":["time"],"cost 20000000":["which"],"cost a":["bit"],"cost is":["6."],"cost of":["every","the","the","the","that"],"cost which":["slows"],"cost. Say":["the"],"could `Regex.scan`":["improve"],"could achieve":["the"],"could actually":["just"],"could add":["the","the","the","help","some","a","`not_same?/2`"],"could also":["catch","be","look","use","add","have","use","pipeline","use","write","check","write","use"],"could alternatively":["express","write"],"could always":["add","use"],"could arguably":["be"],"could at":["least"],"could avoid":["mapping","checking","the","mapping","recursion","the","the"],"could be":["the","implemented","wrong!","wrong!","renamed","useful","difficult","refactored","even","another","prettier","used","prettier","enough?","a","a","improved,","improved","everything","written","passed","simplified","`sanitize_and_extract`,","simplified","written","more","\"pop\"","made","clearer.","made","shortened","simpler","used","very","a","separate","replaced","written","wrong,","private.","argued","turned","`tokenizer`","`String.split/3`","more","useful,","an","written","easier","written","written","used","written","written","case-insensitive,","more","written","accomplished","made","simplified","implemented","done","written","written","the","useful","improved.","alternatively","replaced","simplified","expressed","made","written","written"],"could be,":["you"],"could break":["it"],"could break.":["Maybe"],"could cache":["the"],"could calculate":["the"],"could call":["the"],"could cause":["a"],"could change":["your","his","that","things"],"could check":["if","out","out","out","out","out","out"],"could checkout":["\u003ccode\u003eEnum.map_join/3\u003c/code\u003e"],"could clean":["up","up"],"could collapse":["the"],"could combine":["the","the"],"could come":["in","up","up","up"],"could compare":["the"],"could consider":["the","breaking","using"],"could consider:":["you"],"could consolidate":["those"],"could contribute,":["albeit"],"could create":["an","a"],"could cross":["that"],"could define":["specific","`nucleotides`"],"could detect":["a"],"could do":["e.g.","without","that.","it","that","that.","things","something","for","the","those",":","`&count_word/2`",":","it","the","the","the","the","`Regex.scan(phone_pattern,","it","it,","here","is","that"],"could downcase":["the","the","as"],"could drop":["the"],"could easily":["use","avoid"],"could encapsulate":["that"],"could enhance":["the"],"could even":["pipe","squeeze"],"could express":["it"],"could extract":["the","the","the","them","the","`?T`and","the","`seconds_in_earth_year`"],"could factor":["out"],"could figure":["out","out"],"could find":["a","a","in"],"could find,":["so"],"could fit":["it"],"could get":["rid","rid","feedback.","the","a"],"could go":["back","much","either"],"could golf":["that"],"could have":["a","used","your","used","used","a","just","been","also","two","some","been","used","doubled","moved","done","done","done"],"could help":["make","out"],"could ignore":["the"],"could immediately":["make"],"could implement":["your","`split`","that"],"could import":["`String.slice/3"],"could improve":["the"],"could in":["fact","fact"],"could inline":["those"],"could it":["be"],"could just":["eliminate","use","reorder","add","become","do","work","call","define","test","pass","do"],"could keep":["`is_uppercase?`"],"could lead":["to","to"],"could leave":["off"],"could look":["into","at"],"could make":["a","the","this","`roll_up_counts`","this","`count`","this","use","it","that","the","the","it","this","the","it","the"],"could make:":["currently","`String.ends_with?(input,"],"could map":["the"],"could maybe":["make"],"could mean":["something"],"could move":["alphabetize","the","the","it"],"could name":["them"],"could normalize":["the","the","the"],"could not":["use","think","get","use","figure"],"could of":["course"],"could only":["sort"],"could or":["should"],"could pass":["`String.downcase(string)`","it"],"could pipeline":["it"],"could possibly":["be"],"could potentially":["also","reduce"],"could pre-sort":["the"],"could probably":["get","drop","do","combine","improve","also","be","be","replace","make","figure"],"could process":["the"],"could put":["some"],"could quickly":["get"],"could read":["the"],"could reduce":["some"],"could refactorice":["some"],"could refer":["to"],"could register":["your"],"could remove":["the","`strip_country_code`","@tyler"],"could reorder":["or"],"could replace":["L9's","L10's","the"],"could sacrifice":["brevity"],"could same":["me"],"could say":["is"],"could scan":["(`Regex.scan`)"],"could search":["for"],"could see":["moving","moving","a","doing"],"could shorten":["this","up"],"could silplify":["the"],"could simplfy":["your"],"could simplify":["that","your","this","yelling?","#match","it","your","the","the","other","the"],"could simply":["calculate"],"could slightly":["optimize","speed","simplify"],"could so":["something"],"could something":["like"],"could sort":["word"],"could split":["the"],"could squeeze":["it."],"could stand":["out."],"could start":["by"],"could still":["pipeline"],"could strip":["the"],"could submit":["your"],"could suggest":["is"],"could take":["the","advantage","advantage"],"could that":["be","be","be"],"could then":["also","call","do"],"could think":["about;","of.","of","of"],"could tighten":["up"],"could traverse":["the"],"could try":["doing","to","to","to","this","scanning"],"could turn":["is_nothing"],"could use":["on","`Enum.filter`","doctests","`Regex.scan(%r/\\w+/,phrase)`","them","doctests","some","simple","`Enum.reduce`","`String.strip`.","`true`,","String.ends_with?","Regex.scan","a","the","on","here","a","a","the","the","`&amp;add_or_increment/2`","pointers","pattern","for","`String.strip(statement)`","a","`String.ends_with?`","\u003ccode\u003eRegex.scan/2\u003c/code\u003e","in","`&amp;1`","like","the","two","more","\u003ccode\u003eguards\u003c/code\u003e","pattern","something","a","`defp`","Erlang","it","in","`number/1`","`Regex.scan/2`","`String.to_char_list!`","a","a","`Regex.scan`","it","`Enum.count/2`","Dict.update/3","your","`Stream.map`","a","`|\u003e","`Regex.scan`","`unwrap`,","the","to","`String.ends_with?`.","bit","the","that","those","`translation_dict[x]`,","some"],"could validate":["directly."],"could with":["the"],"could work":["too,","for"],"could wrap":["the"],"could write":["something","that","this","this","that","`[function.(x)]","`silent?`","yelling","function","the"],"could you":["communicate","please","give","remove","be","give","give","do","use","paste","just","filter"],"could've been":["`music`,"],"could. For":["example"],"couldn't be":["simplified."],"couldn't come":["up"],"couldn't figure":["out","out","out","it","out","out","out,"],"couldn't find":["anything","a","any","an","a","a","an","the","a","anything","one.","an","out"],"couldn't fine":["one."],"couldn't get":["the","it","that"],"couldn't hurt":["to"],"couldn't make":["it"],"couldn't quite":["figure","work"],"couldn't see":["a"],"couldn't think":["of","of","of"],"couldn't use":["`filter`"],"couldn't work":["out","out","out"],"couldn't. I":["will"],"couldnt figure":["it"],"couldn’t recall":["how"],"count --":["I"],"count ALL":["nucleotides"],"count `entries`":["that"],"count always":["initializes"],"count as":["\"being","\"cryptic","a"],"count directly.":["I"],"count each":["word,","distinct"],"count exercise":["to"],"count exercise.":["I"],"count function":["pipeline?","to"],"count it":["does"],"count itself":["much"],"count method":["looks"],"count of":["matching","every"],"count operation":["on"],"count operations":["into"],"count pairs":["where"],"count phrase":["do"],"count pipeline":["you","then"],"count quite":["a"],"count than":["in"],"count the":["words.\"","individual"],"count values.":["But"],"count variable":["either."],"count without":["this"],"count('', _),":["do:"],"count(), it's":["the"],"count(), rather":["than"],"count(), similar":["to"],"count([]), do:":["0"],"count([], dict),":["do:","do:"],"count([_|t]), do:":["1"],"count([word |":["words],"],"count(dna_chars, &1)":["})`","}`."],"count(fn {left,right}":["-\u003e"],"count(l), do:":["do_count(l,","do_count(l,","do_count(l,","do_count(l,","do_count(l,","do_count(l,","do_count(l,"],"count(sequence, k)}":["end)"],"count(sequence, nucleotide)":["do"],"count(strand, &1)})`":["can"],"count(strand, &1)}`.":["The"],"count(text) encapsulates":["one"],"count+1 end`":["is"],"count, and":["the"],"count, but":["that"],"count, every":["successive"],"count, the":["compiler"],"count, though.":["It"],"count. How":["do"],"count. It's":["pretty"],"count. Thanks":["for"],"count/1 too.":["Very"],"count/1, but":["not"],"count_all in":["count"],"count_all quite":["a"],"count_mismatches as":["separate"],"count_words maybe":["should"],"count_words to":["make"],"count_words([], acc)":["do"],"counted as":["anagrams.","two"],"counter to":["@kayla"],"counter would":["fail"],"counting algorithm.":["I"],"counting function":["sent"],"counting multiples":["of"],"counting occurrences":["of"],"counting unique":["words"],"counting words":["from"],"country code":["first"],"counts `HashDict`":["in"],"counts and":["determine","strings"],"counts in":["my"],"counts the":["number"],"counts. Is":["there"],"couple improvements":["suggested"],"couple more":["nitpicks:","lines"],"couple of":["functions","things","thoughts.","small","tiny","Elixir","comments/questions:","things","things:","private","things:","small","comments:","these","simplifications.","nits.","small","things","the","thoughts:","thoughts:","formatting","times","thoughts:","small","small","functions","small","things"],"couple suggestions":["by"],"course I":["do","have","could"],"course always":["define"],"course at":["http://elixir-lang.org/crash-course.html"],"course but":["it's"],"course his":["language"],"course in":["the"],"course just":["keep"],"course my":["code"],"course you":["intended"],"course, if":["you"],"course, though":["it"],"course, you":["might"],"course, you'd":["probably"],"course. I'm":["never"],"course. That":["seems"],"cover all":["the"],"cover the":["entire"],"cover those":["cases."],"covered in":["the"],"covered the":["important"],"coy, but":["discovery"],"crafted instead.":["I"],"cram OO":["Rubyisms"],"crash and":["have"],"crash but":["guarding"],"crash course":["at"],"crash of":["the"],"crash on":["type"],"crashes if":["I"],"crazy here":["and"],"crazy solution":["for"],"crazy. Maybe":["someone"],"crazymykl used":["`\\A`"],"crazymykl's regex":["here."],"crazymykl's suggestion":["for"],"create a":["non-pattern","new","phrase.","zipped","list.","song-generator","dictionary","slightly","new"],"create an":["`Adult`","empty","anonymous","obvious","`anything_else`","obvious","obvious","obvious","obvious"],"create as":["functional"],"create mocks":["of"],"create one":["and"],"create private":["functions"],"create so":["many"],"create the":["pattern","same","HashDict","nucleotide_counts","list"],"create your":["`HashDict`"],"created 2":["helpers"],"created `initial_counts`":["as"],"created a":["tail"],"created by":["repeating"],"created for":["the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the"],"created fuzziness":["as"],"created in":["Elixir."],"created the":["HashMap"],"created which":["only","only","only","only","only"],"created with":["default","single"],"created), rather":["than"],"created, rather":["than"],"created. But":["the"],"creates a":["nice","new","new"],"creates. Why":["did"],"creating a":["helper","protocol?","handy","list","dict","new"],"creating an":["accumulator"],"creating it":["in"],"creating more":["work"],"creating the":["scores"],"creation of":["the","the","the"],"creation, though.":["Will"],"creative or":["more"],"creative with":["String"],"creative, but":["wouldn't"],"credit for":["any","it,"],"criteria down":["the"],"criticism with":["regards"],"critique from":["Katrina."],"cross that":["readability"],"crowd and":["not"],"crowd. How":["many"],"crucial as":["you"],"crying out":["to"],"cs, do:":["{"],"cs} inlist":["scores,"],"cue for":["the"],"culprit. Anyway,":["reverting"],"curiosity, how":["big"],"curiosity, what":["don't"],"curious about":["why","how","the","the"],"curious how":["many"],"curious how.":["I"],"curious if":["you"],"curious to":["see"],"curious what":["you","the"],"curious whether":["in"],"curious why":["you","you","you're"],"curious, @liliane,":["do"],"curious, but":["what"],"curious, do":["you"],"curious, does":["the"],"curious, in":["what"],"curious. 'Cause":["if"],"curious: Did":["you"],"curious: why":["are"],"currency symbols":["and"],"currency)). Never":["forget"],"current \"open\"":["one"],"current `anagram?`":["function"],"current `count`":["function."],"current `hey(\"\")`":["pattern"],"current `interpret/1`":["clauses."],"current exercise":["is"],"current implementation":["is"],"current implementation?":["I"],"current line":["4,"],"current name.":["I"],"current naming":["scheme,"],"current one":["seems"],"current one.":["I"],"current ones":["do","either."],"current pair's":["value?"],"current set":["of"],"current solution":["a"],"current solution(next":["submission)."],"current solution,":["you'd"],"current test":["suite"],"current tests":["don't"],"current value":["of","and"],"current version":["of","of","is"],"current version,":["I"],"current version.":["Any"],"current_value +":["1"],"currently doing":["it,"],"currently don't":["check"],"currently figure":["out"],"currently have":["to"],"currently needs":["a"],"currently rewriting":["the"],"currently some":["discussion"],"currently sorting":["baseword"],"currently too":["strongly"],"currently triggered.":["(I've"],"currently you":["don't"],"currently. However,":["here's"],"curveball for":["me."],"custom `reduce_with_index`.":[":)"],"custom attributes":["for"],"custom attributes...":["Old"],"custom functions":["as","instead"],"custom guard":["functions."],"custom helper.":["I'll"],"custom reducer,":["but"],"custom, perhaps":["side-effecting,"],"custom-set (which":["follow"],"cut/paste your":["solution"],"cuts down":["the"],"cutting-edge stuff":["about"],"cycle can":["be"],"cyrillic Д":["and"],"d +":["2`"],"d -\u003e":["d","d"],"d =":["Enum.reduce(first..last,","Enum.reduce(first..last,"],"d ==":["2,"],"d },":["else:","else:"],"d'expressivité, voir":["http://stackoverflow.com/a/7179058/947019"],"d'utiliser des":["\"?\""],"d) ++":["e)`"],"d) ==":["dow","dow"],"d), do:":["msg,"],"d+2`, is":["better"],"d, do:":["{","{"],"d, nil":["-\u003e","-\u003e"],"d==2 clause":["out"],"damn clean.":["Great"],"dang good":["to"],"dark side":["of"],"darn good":["for"],"dash, no":["underscore)."],"data `s`":["doesn't"],"data around":["so"],"data as":["the"],"data at":["the"],"data first,":["and"],"data in":["elixir","and"],"data is":["stored"],"data set":["or"],"data structure":["that","you","that"],"data structure?":["What"],"data structures":["are","than"],"data types":["to","that","that"],"data within":["a"],"data. I":["just"],"data. Passing":["the"],"data: in":["OCaml"],"database and":["read"],"database is":["compiled"],"datastructure for":["determining"],"datatype in":["OTP"],"datatypes. Not":["worth"],"dates enough":["in"],"day learning":["Elixir,"],"day of":["week","week,","week","week,","the"],"day or":["so"],"day written":["out","out"],"day yesterday.":[":)"],"day. We":["could"],"days ago":["and"],"days ago.":["Anybody"],"days and":["did","then"],"days of":["the"],"days off":["for"],"days, did":["the"],"days, or":["so"],"days, so":["I"],"days_in_gigaseconds so":["you're"],"day} for":["the","the"],"db as":["the"],"db, db,":["fn(_,"],"db, fn(_,":["roster,"],"db, fn(roster)":["-\u003e"],"dc) -\u003e":["same_word(target,","is_anagram_match?(target,"],"dc) end)":["|\u003e","|\u003e"],"de méthode":["pour"],"de nom":["de"],"de-duplication: sing/1":["can"],"dead code,":["otherwise"],"deal for":["small"],"deal of":["internal"],"deal with":["\"else\"","punctuation","the","it","the","non-alpha","non-alphabetic"],"deal with,":["say,"],"deal, but":["I","it"],"deal, just":["a"],"dealing with":["lists.","Unicode.","to_char_list"],"deals with":["empty"],"dealt with,":["so"],"deault arguments":["in"],"debate on":["is_question"],"debate whether":["it"],"debated in":["the"],"debated readability":["vs"],"debated whether":["to"],"debug errors":[":\\"],"decent compromise,":["but"],"decide if":["I"],"decide in":["Elixir."],"decide the":["kind"],"decide to":["change","put","change"],"decide what":["I"],"decide which":["elements"],"decided I":["liked","didn't"],"decided explicitly":["to"],"decided it":["would","was"],"decided since":["everything"],"decided that":["if","there","there's"],"decided this":["solution"],"decided to":["separate","add","do","go","change","stop","use","import"],"decides things,":["pass"],"decides to":["multiply"],"deciding if":["a"],"deciding on":["what"],"deciding which":["functions"],"decipher that":["error"],"deciphering and":["conforming"],"decision and":["I"],"decision was":["based"],"decision. Very":["nice."],"decisions and":["exit"],"decisions are":["very"],"decisions based":["on"],"declaration I":["don't"],"declaration changed":["the"],"declaration to":["practice"],"declarations and":["functions"],"declarations to":["using"],"declarations with":["guard"],"declarations, function":["calls"],"declarative nature":["of","of"],"declaratively describe":["the"],"declare functions":["like"],"declare the":["tester"],"declare these":["methods"],"declared as":["a"],"declaring `import":["String,"],"declaring an":["`fn`"],"declaring test":["functions","functions"],"decode the":["UTF8"],"decode_message using":["pattern"],"decrease readability.":["Maybe","`different_word?`"],"decreases readability.":["But"],"decreasing range:":["`Enum.to_list(4..2)`"],"deemed it":["unnecessary"],"deep. List.concat/1":["is"],"deeper into":["the"],"deeper level":["of"],"deeply nested":["(within","--","if-else"],"def \u003cname\u003e(\u003cparams\u003e),":["do:"],"def accumulate(collection,":["function)"],"def age_on(:mercury,":["seconds)"],"def asking?(greeting)":["do"],"def bad(e),":["do:"],"def concat(ll),":["do:"],"def controlling_shares(stock),":["do:"],"def count":["phrase"],"def count('',":["_),"],"def count([]),":["do:"],"def count([_|t]),":["do:"],"def count(l)":["do","do","do","do","do"],"def count(l),":["do:","do:","do:","do:","do:","do:"],"def count(phrase)":["do"],"def count(s)":["do"],"def count(sequence,":["nucleotide)"],"def count(words)":["do"],"def creates_new_under_the_hood(mod)":["do"],"def discard(collection,":["function)"],"def do_map(list,":["f,"],"def empty?(message),":["do:","do:"],"def empty?(nil),":["do:","do:"],"def even?(number),":["do:"],"def fact(0),":["do:"],"def fact(n),":["do:"],"def filter([head":["|"],"def foo(1),":["do:"],"def foo(a,":["b"],"def foo(x)":["when"],"def good(e),":["do:"],"def hamming_distance(from,to)":["do"],"def hey(\"\"),":["do:"],"def hey(input)":["do"],"def hey(nil),":["do:"],"def hey(something":["//"],"def hey(something)":["do"],"def ignoring?(greeting)":["do"],"def inc(num)":["do"],"def inspect(s,":["opts)"],"def map(list,":["f)"],"def match":["word,"],"def match(_word,":["[])"],"def match(word,":["possible_anagrams)","[candidate_anagram","anagrams)","potential_anagrams)","potential_anagrams)"],"def nucleotide_counts(dna)":["do"],"def nucleotide_counts(sequence)":["do"],"def number_of_bottles(0),":["do:"],"def number_of_bottles(1),":["do:"],"def number_of_bottles(n),":["do:"],"def plus_one(number),":["do:"],"def question?(message),":["do:"],"def reduce([],":["acc,","acc,"],"def reduce([h|t],":["acc,","acc,"],"def reduce(l,":["acc,"],"def reverse([],":["reversed_list),"],"def reverse([head|tail],":["reversed_list),"],"def reverse(l),":["do:"],"def score(word)":["do","do"],"def seems":["a"],"def send_message(chan,":["message),"],"def shouting?(message),":["do:"],"def sing(from_bottles,":["to_bottles"],"def sing(start,":["stop"],"def sing(start_verse,":["end_verse","end_verse"],"def sort(db)":["do"],"def sorted_cp_list":["word"],"def sum":["[x|xs],","[element|rest_of_list],"],"def sum(a,b),":["do:"],"def test(value":["//"],"def to_list(coll),":["do:"],"def transform(input)":["do"],"def unquote(binary_to_atom(\"#{nth}_#{dp}day\"))(month,":["year),","year),"],"def unquote(binary_to_atom(\"last_#{dp}day\"))(month,":["year)","year)"],"def unquote(binary_to_atom(dp":["\u003c\u003e","\u003c\u003e"],"def verse(0),":["do:","do:"],"def verse(1),":["do:","do:"],"def verse(bottles)":["when"],"def verse(num),":["do:"],"def vs.":["defp."],"def when":["defining"],"def with":["arguments"],"def, etc)":["but"],"def/defp. I":["feel"],"default a":["list"],"default and":["often","only"],"default argument":["is","in","in"],"default arguments":["but"],"default case":["will"],"default condition":["like"],"default condition.":["Having"],"default equality":["comparator"],"default if":["it"],"default implementation":["you"],"default is":["ignored."],"default parameter":["in"],"default response":["anyway."],"default syntax":["you"],"default the":["cond"],"default to":["public"],"default value":["and","for","yet,","one.","on","in","for"],"default values":["for","of","for"],"default, and":["for"],"defaults to":["that,"],"defender of":["*defensive"],"defensive programming":["is","and"],"deficiency of":["the"],"defimpl Inspect,":["for:"],"define _private":["functions_"],"define `inc`":["as"],"define `nucleotides`":["like"],"define `total`":["in"],"define a":["version","function","range","private"],"define anonymous":["functions."],"define behavior":["for"],"define custom":["attributes"],"define functions":["on","in","with"],"define if":["someone"],"define in":["line","a","a","a","a","a"],"define it":["twice:"],"define multiple":["public"],"define private":["functions."],"define public":["functions","functions"],"define some":["more"],"define specific":["methods"],"define the":["interrogative","split","type","`Statement`","characters","analyzers","`days_in_gigasecond`","private"],"define them":["with"],"define those":["methods"],"define two":["\"silence?\""],"define update_dict":["as"],"defined `bottle/1`,":["you"],"defined but":["it"],"defined by":["`[a-zA-z]`"],"defined for":["you"],"defined in":["the","contexts","`Kernel`,","multiple"],"defined it":["is"],"defined next":["to"],"defined on":["it.","it."],"defined or":["what"],"defined such":["a"],"defines a":["series","public","private"],"defines the":["type","type","behaviour"],"definiition in":["to"],"defining a":["function.","function,","protocol"],"defining an":["anonymous"],"defining and":["redefining"],"defining anonymous":["functions?"],"defining custom":["attributes..."],"defining methods":["that"],"defining the":["function.","order"],"defining them":["as"],"definintion: _containing":["nothing"],"definitely a":["filtering","valid"],"definitely an":["unevenness","improvement."],"definitely aren't":["shy"],"definitely be":["more"],"definitely check":["out"],"definitely do":["not"],"definitely does":["not"],"definitely easier":["to"],"definitely go":["that"],"definitely going":["to"],"definitely keeping":["me"],"definitely learning":["something."],"definitely like":["the"],"definitely look":["into","into"],"definitely make":["it","that","it"],"definitely more":["concise,"],"definitely prefer":["the"],"definitely premature":["optimization."],"definitely something":["that"],"definitely sound":["better"],"definitely the":["cleanest","trailing","part"],"definitely top":["priority!"],"definition UTF-8":["encoded)."],"definition at":["first,"],"definition for":["each","an"],"definition instead":["of"],"definition is":["confusing."],"definition of":["phrase","`silent?`","`sing`","anagramness.","the","`being_yelled_at?`","shouting","a","word"],"definition syntax":["was"],"definition using":["the"],"definition visually":["less"],"definition will":["be"],"definition. I":["like","didn't"],"definition. If":["you"],"definitions (aside":["from"],"definitions but":["these"],"definitions defining":["the"],"definitions for":["any","the"],"definitions of":["the","`@judd`"],"definitions on":["a","a","one"],"definitions rather":["than"],"definitions reads":["nicely"],"definitions to":["a"],"definitions using":["`&amp;`-style"],"definitions with":["parens"],"definitions, there":["is"],"definitions. Are":["you"],"definitions. But":["that's"],"definitions. For":["a"],"definitions. Up":["to"],"defmodule Anagram":["do","do"],"defmodule Beer":["do"],"defmodule DNA":["do"],"defmodule Meetup":["do","do"],"defmodule Teenager":["do"],"defmodule Test":["do"],"defmodule Words":["do"],"defp ```":["tip,"],"defp accumulate([":["element"],"defp accumulate([],":["_function,"],"defp action(0),":["do"],"defp action(beer_count),":["do"],"defp anagrams?(word1,":["word2)","word1),","word2),"],"defp are_not_identical?(word_a,":["word_b)"],"defp asking?(greeting),":["do:"],"defp be":["more"],"defp bottle_classifier(1),":["do:"],"defp bottle_classifier(_),":["do:"],"defp bottleize(0),":["do:"],"defp calculate_score(word)":["do"],"defp char_value(_),":["do:"],"defp char_value(unquote(char)),":["do:"],"defp convert(_),":["do:"],"defp convert(c)":["when","when"],"defp count([],":["dict),"],"defp count([word":["|"],"defp count_words([],":["acc)"],"defp dna_to_rna(?T),":["do:"],"defp do_count([],":["acc),"],"defp do_count([_|t],":["acc),"],"defp do_count(l,":["acc)","acc)","acc)","acc)","acc)"],"defp do_hamming_distance([n1":["|","|"],"defp do_reverse([],":["acc),"],"defp do_reverse([h|t],":["acc),"],"defp do_silence(\"":["\"),","\""],"defp do_silence(\"\"),":["do:"],"defp do_silence(_),":["do:"],"defp dow_in_range(first,":["last,","last,"],"defp extract_nucleotide(sequence,":["nucleotide)"],"defp first_part_of_verse(bottles)":["do"],"defp function_name(\"something":["that"],"defp function_name(word),":["do"],"defp increment(current_value),":["do:"],"defp instead":["of"],"defp is_nothing?(nil),":["do:"],"defp is_nothing?(str)":["when"],"defp is_silence?(instruction),":["String.strip(instruction)"],"defp is_sublist([],":["_),"],"defp is_sublist(_,":["[]),"],"defp line2(n)":["when","do"],"defp map_values(db,":["fun)"],"defp non_matching_pair?({nucleotide,":["nucleotide2})"],"defp one_or_it(_),":["do:"],"defp one_or_it(n)":["when"],"defp pling(_),":["do:"],"defp pling(n)":["when"],"defp question?(s),":["do:"],"defp question?(statement),":["do:"],"defp quiet?(something)":["when","when"],"defp same?(_word,":["_word),"],"defp score_letter(?a),":["do:"],"defp score_letter(?e),":["do:"],"defp score_letter(letter),":["do:"],"defp score_letter(unquote(letter)),":["do:"],"defp shouting?(phrase),":["do:"],"defp silence?(input)":["do"],"defp silence?(input),":["do:"],"defp silence?(message),":["do:"],"defp silence?(nil),":["do:"],"defp silence?(sentence)":["do"],"defp sing_verse(1)":["do"],"defp sing_verse(2)":["do"],"defp sort(word)":["do"],"defp table":["do"],"defp unwrap(s)":["do"],"defp update(\"\",":["dict)"],"defp update(word,":["dict)","dict)"],"defp wrap(l)":["do"],"defp yelling?(msg)":["do"],"defp(phrase) shouting?),":["as"],"defp. Thank":["you!"],"defs for":["empty"],"defs to":["be"],"degrades readability.":["Whether"],"delay in":["getting"],"delegate the":["message"],"delegates of":["the"],"delegates to":["`Enum.reduce`"],"delegating from":["`verse`"],"delete it":["and"],"delete some":["of"],"delete the":["test"],"delete what":["you"],"delete your":["test"],"deleting it":["entirely."],"deleting them).":["Please"],"deliberately export":["`Teenager.shouting?`"],"deliberately stayed":["away"],"delighted to":["be"],"delimited, like":["&(&1"],"delimiter myself":["since"],"delimiter you":["like."],"delimiters and":["syntax"],"delimiters are":["`fn`"],"delimiters of":["a"],"demonstrate eccentricities":["they"],"denominator of":["the"],"denote a":["function"],"depend on":["whether","how","the"],"dependencies on":["the"],"dependent and":["works"],"dependent modules":["instead"],"depending on":["the","the","the","the"],"depends on":["the","the","knowing","the","the","whether","a","polymorphic"],"depends solely":["on"],"depends upon":["nested"],"deprecated and":["no","no"],"deprecated for":["strings."],"deprecated in":["0.10.3."],"deprecated syntax":["in"],"deprecation warning.":["I've"],"deprecation warnings.":["What"],"depth is":["a"],"des \"!\")":["en"],"des \"?\"":["(et"],"describe is":["the"],"describe statements,":["but"],"describe the":["intent","implementation","case","transformation.","behavior","Teenager,","greeting."],"describe what":["they","you're"],"described in":["documentation."],"describes itself":["clearly"],"describes some":["of"],"describes the":["logic"],"describes to":["me"],"describes what":["you're"],"describes what's":["going"],"describing and":["handling"],"describing implementation":["for"],"describing my":["stance"],"describing what":["it"],"description as":["a"],"description of":["basically"],"descriptions). For":["module"],"descriptive but":["it"],"descriptive function":["names."],"descriptive method":["names."],"descriptive name":["for","for","(the"],"descriptive name.":["That"],"descriptive names":["for","for"],"descriptive names,":["spot"],"descriptive of":["what","the"],"descriptive or":["less"],"descriptive overlap":["between"],"descriptive variable":["name","name"],"descriptively named":["private","methods","private","private"],"design at":["times."],"design difference:":["`verse`"],"design in":["the","this"],"design this":["problem"],"designed to":["avoid","teach/practice","illustrate"],"designing functions":["that"],"desirable as":["you"],"desirable to":["handle","define"],"desire that":["is"],"desired result":["and"],"despite the":["small","failing"],"despite turning":["code"],"destroyed all":["readability"],"desugars to":["calls"],"detail of":["how"],"detail that":["you"],"detail the":["spec"],"detail to":["my"],"detail. I":["guess"],"details (L16":["and"],"details a":["bit."],"details of":["how","whitespace","the","how","macro's","regular"],"details with":["the"],"details. What":["do"],"detect a":["string"],"detect if":["something"],"detect these":["things"],"detecting all":["caps,"],"detecting if":["a"],"detecting silence":["you"],"detecting the":["different"],"detection being":["better"],"detection instead":["of"],"detection is":["all"],"detection isn't":["what"],"detection. Maybe":["look"],"determination of":["what"],"determination, you":["can"],"determine if":["a","it's"],"determine statement":["type"],"determine that":["something"],"determined by":["the"],"determined solely":["by"],"determines the":["cost"],"determining if":["the","a","a"],"determining whether":["or","or"],"developed a":["habit"],"developer and":["I"],"developer reading":["the"],"developer that":["feels"],"developer, I":["have"],"developers because":["it"],"developers to":["use"],"developers. Much":["appreciated."],"developing from":["there."],"development and":["increases"],"development version":["of","of","the","of"],"dialyzer tool":["and"],"dict from":["the"],"dict implementation":["you"],"dict only":["gets"],"dict with":["the"],"dict you":["store"],"dict), do:":["dict","dict`"],"dict, and":["do"],"dict. I":["could"],"dictated that":["`grade`"],"dictionaries and":["allows"],"dictionaries so":["all","if","if"],"dictionaries that":["runs"],"dictionaries, `HashDict`":["is"],"dictionaries, using":["it"],"dictionaries, which":["makes"],"dictionary and":["it"],"dictionary before":["you'd"],"dictionary implementation":["without"],"dictionary implementation.":["The"],"dictionary of":["letter"],"dictionary other":["than"],"dictionary to":["count"],"dictionary types":["so"],"dictionary vs":["sorted"],"dictionary, `Dict`":["is"],"dictionary, but":["they're"],"dictionary. The":["best"],"did \"I":["can"],"did I":["handle","not"],"did `min_by`":["then"],"did a":["recursive","nice","lot","version","contains.","stupid"],"did above,":["or"],"did actually":["start"],"did an":["`Enum.each(Enum.with_index(planets)`"],"did as":["well,"],"did before,":["but"],"did bug":["me"],"did but":["it's"],"did consider":["that","that,"],"did drop":["the"],"did go":["for"],"did have":["iterators","an"],"did here.":["That's"],"did hit":["a"],"did in":["the","fact","http://exercism.io/submissions/cd2777c2cae7a6e5830c6a05","the","the","my"],"did it":["on","like","for","with","correctly","this","either.","correctly,","here","could"],"did it.":["You"],"did know":["about"],"did look":["over"],"did merge":["mean?\""],"did most":["things"],"did not":["know","find","know","know","know","know","found","had","know","know","find","expect","know","work)","help.","really"],"did notice":["I"],"did on":["line"],"did only":["require"],"did pretty":["well"],"did run":["into"],"did see":["in"],"did seem":["pretty"],"did simplify":["newline_appender."],"did so":["fast,"],"did some":["basic"],"did something":["\"without","completely"],"did spend":["some"],"did such":["a"],"did that":["in"],"did that,":["but"],"did the":["exercise.","exercise","join","test","Ruby"],"did this":["exercise,","in","in","one,","exercise.","exercise","for","exercise","exercise,"],"did to":["avoid"],"did totally":["forget"],"did try":["it"],"did use":["`scan`"],"did want":["to"],"did with":["the"],"did you":["have","broke","feel","choose","know","try","know","find","know","know"],"did, as":["the"],"did, but":["I"],"didn't already":["know,","know,"],"didn't catch":["but"],"didn't come":["to"],"didn't consider":["it"],"didn't do":["a","tail","the"],"didn't end":["up"],"didn't even":["think","think","know"],"didn't expand":["it"],"didn't expect":["anyone"],"didn't find":["the","one.","it","Keyword.keyword?"],"didn't find.":["Thanks!"],"didn't give":["it"],"didn't go":["this"],"didn't have":["that","these","`@jamar`","to"],"didn't inline":["it"],"didn't knew":["about"],"didn't know":["about","about","about","about","about","`cond`","what","about,","there","about","about","about","it","about","how","you","what","about","already."],"didn't knwo":["about"],"didn't like":["the","was","the"],"didn't manage":["to"],"didn't mean":["to."],"didn't need":["to","to","to"],"didn't notice":["it"],"didn't now!":["Will"],"didn't occur":["to"],"didn't pattern":["match"],"didn't quite":["feel"],"didn't realise":["you're"],"didn't realize":["those","older","the","there","that","that.","that"],"didn't really":["like","seem","make","feel","come"],"didn't say":["anything"],"didn't see":["the","how","it."],"didn't seem":["too","to","to","to"],"didn't slam":["me"],"didn't spend":["enough"],"didn't take":["my"],"didn't test":["for"],"didn't think":["of","of","of","it","of","to","to","about","of","of","about","you","of","of","about","of","of"],"didn't thought":["of"],"didn't understand":["why."],"didn't use":["update."],"didn't want":["to","to","to"],"didn't work":["for"],"didn't work.":["It"],"died 2":["days"],"difference -":["what"],"difference I":["suppose"],"difference approach":["that"],"difference between":["them","`matches_anagram?/2`","`\"\"`","lists","the","the","an"],"difference either":["way."],"difference from":["Enum.with_index,"],"difference in":["performance","the","execution","performance.","how","that"],"difference is":["that","only","that"],"difference pulling":["`update/2`"],"difference syntax":["you"],"difference though,":["a"],"difference would":["be"],"difference, and":["your"],"difference, you":["could"],"difference. I":["just","need"],"difference. In":["languages"],"difference: `verse`":["now"],"differences. I":["would"],"differences... any":["way"],"different (1":["bottle"],"different add":["to"],"different anagrams":["cases"],"different and":["the"],"different angle,":["and"],"different animal,":["however,"],"different approach":["and","to","here.","in"],"different approach,":["one"],"different arities":["are"],"different behaviour":["than"],"different behaviour)":["and"],"different but":["both"],"different cases":["so"],"different cases,":["a"],"different cases?":["In"],"different checks":["into"],"different concept,":["but"],"different cond":["tests"],"different constructs":["and"],"different directions.":["Either"],"different from":["every"],"different function":["from","clauses,"],"different functions":["in"],"different functions.":["Just"],"different guards,":["but"],"different implementation":["of"],"different implementations":["of"],"different input":["types"],"different letters":["as"],"different level":["of","of"],"different lines":["are"],"different makes":["it"],"different module":["and"],"different name":["than"],"different names":["were"],"different nitpick":["and"],"different numbers":["(i.e."],"different options":["for"],"different order":["in","than"],"different parameters":["in"],"different parts":["into"],"different patterns":["of"],"different places":["in"],"different places,":["so"],"different private":["function"],"different problem":["of"],"different responses":["are"],"different sections":["of"],"different sense":["to"],"different set":["of"],"different so":["you"],"different solution":["where","in","using"],"different solution,":["more"],"different string":["tests"],"different syntax,":["though"],"different task.":["This"],"different tests":["somehow?"],"different texts.":["Previously,"],"different than":["what","the"],"different things":["to","that"],"different things.":["I","Would"],"different types":["of"],"different upcase":["and"],"different variable":["name","names"],"different verses":["of"],"different versions":["of","of"],"different way":["at","(`Stream.map(...)","to","to","with"],"different ways":["to","(in","of"],"different ways.":["I'm"],"different, they":["still"],"different-arity version":["of"],"different. I'm":["talking"],"different. Question":["is"],"differently depending":["on"],"differently to":["forceful"],"differently, are":["`is_aggressive?`"],"differing opinion":["on"],"difficult exercise":["yet."],"difficult of":["a"],"difficult ones.":["I'm"],"difficult part":["about"],"difficult that":["would"],"difficult the":["further"],"difficult to":["use","predict.","quickly","Google"],"difficulty following":["the"],"difficulty level":["of"],"dig further":["into"],"dig into":["the","the","it"],"dig the":["recursive"],"digest if":["you"],"digestible mentally,":["at"],"digging into":["the","the"],"digit limit":["on"],"digit returned":["an"],"digit should":["be"],"digit, so":["you'll"],"digit. It's":["using"],"digits and":["first"],"digits are":["included."],"digits as":["well."],"digits from":["1"],"digits in":["Unicode."],"digits list":["in"],"digits long":["shouldn't"],"digits this":["time."],"digits we're":["interested"],"digits with":["codepoint"],"direct and":["concise."],"direct for":["this,"],"direct module":["calls."],"direct port":["of"],"direct to":["compare"],"direction I":["was"],"direction because":["it"],"direction on":["the"],"direction than":["'some"],"direction, I":["felt"],"direction, what":["do"],"direction. Much":["like"],"direction. So":["far,"],"directions. Either":["you"],"directive -":["why"],"directive or":["don't"],"directly (except":["for"],"directly (outside":["of"],"directly and":["missed"],"directly as":["the"],"directly below":["the","the"],"directly but":["to"],"directly by":["functions"],"directly for":["\u003ccode\u003everse/1\u003c/code\u003e."],"directly from":["`match`?","Erlang"],"directly in":["`words_in/1`.","`hamming_distance/2`?"],"directly into":["reduce"],"directly involved":["in"],"directly on":["`verse`?","`verse/1`."],"directly or":["use"],"directly output":["strings"],"directly to":["the","`Enum.filter`?","output"],"directly under":["the"],"directly with":["`verse`","strings."],"directly\" are":["you"],"directly, right?":["And"],"directly, see":["if"],"directly. But":["yeah,"],"directly. I":["think"],"directly. It's":["a"],"directly. You're":["supposed"],"directly: `Graph.edges([e|Graph.edges])`":["appends"],"directory, so":["I"],"dirty though.":["Do"],"dirty_number) |\u003e":["Enum.join"],"disadvantage of":["using"],"disagree because":["I"],"disagree that":["implementing"],"disagree with":["your","@katherine","in","@fatima,"],"disagree, though,":["that"],"disagree, you":["can"],"disappoint me":["if"],"disappointed there":["was"],"discard have":["a"],"discard implementation":["at"],"discard in":["terms"],"discard is":["performance."],"discard the":["same"],"discard would":["be"],"discard(collection, function)":["do"],"discouraged in":["Elixir."],"discouraged is":["calling"],"discouraging that":["or"],"discovered Regex.scan,":["which"],"discovered it":["either"],"discovered that":["in"],"discovered the":["`apply`"],"discovered unicode":["specific"],"discovered why":["your"],"discovered, you":["can't"],"discoveries on":["the"],"discovering the":["length"],"discovery is":["half"],"discrepancy. If":["I"],"discuss best":["practices."],"discuss sometimes":["using"],"discuss that":["implementation."],"discussed around":["the"],"discussing why":["I"],"discussion about":["why"],"discussion and":["discovery,"],"discussion being":["of"],"discussion here":["about"],"discussion in":["the"],"discussion is":["now"],"discussion on":["parentheses:","whether","the"],"discussion too.":["I'll"],"discussion under":["'Generic"],"disjunction but":["pushed"],"disjunction like":["so"],"dislike the":["reassignment"],"disliked lines":["23-24."],"disliking my":["regular"],"dismissed it":["as"],"dispatch) but":["`Enum.sort`"],"dispatching is":["more"],"dispatching to":["the"],"dispatching with":["a"],"dispensed with":["the"],"dispensing with":["HashDict"],"display Elixir":["code:"],"display for":["a"],"dissimilar enough":["to"],"distance was":["and"],"distance, otherwise,":["I"],"distance? By":["that"],"distinct private":["function,"],"distinct word.":["If"],"distinction you're":["referring"],"distinguish between":["shouted"],"distinguish for":["example"],"distinguish them,":["instead"],"ditched it":["as"],"dive into":["elixir;"],"divides? now":["just"],"divides?(n, d),":["do:"],"diving in":["a"],"divisor in":["the"],"dna nucleotides":["somewhere"],"dna once":["to"],"dna, so":["you"],"dna_to_rna(?T), do:":["?U"],"do \"Go":["to"],"do \"tdd\"":["and"],"do 'fix'":["the"],"do (and":["will"],"do *in":["general"],"do ...":["end","end","else","end","else","end),"],"do :)":["Hope"],"do I":["got","care","go"],"do X?\"":["can"],"do [h":["|"],"do `&amp;(&amp;1":["=="],"do `&count_word/2`":["rather"],"do `(a":["++"],"do `?T`":["and"],"do `Enum.any?([false])`":["you'd"],"do `Enum.count(fn":["{a,"],"do `Enum.count(sequence,":["&(&1"],"do `Enum.map(&hd/1)`":["(`&hd/1`"],"do `Regex.scan(phone_pattern,":["unformatted)"],"do `Stream.map(&hd/1)":["|\u003e"],"do `String.strip(speak)":["=="],"do `[func.(head)":["|"],"do `case":["[h|t]"],"do `def":["anagram?(_a,"],"do `digit_count":["=="],"do `exercism":["fetch`"],"do `filter`,":["because"],"do `fn(potential_match)":["-&gt;"],"do `import":[":functions,"],"do `r":["="],"do a":["quick","bit","multi-word","`get`/`put`","bit","`String.replace`?","pattern","full","search","lot","lot"],"do acc":["else"],"do agree":["with","with","that","that"],"do all":["the"],"do an":["explicit"],"do any":["more","special"],"do anything":["with","at"],"do anything.":["It's"],"do are":["the"],"do at":["the"],"do believe":["you"],"do bla":["end`"],"do both":["of"],"do change":["into"],"do coding":["(and"],"do e.g.":["`candidates"],"do either":["`is_blah`"],"do enlighten":["me."],"do exactly":["what"],"do explicit":["recursion"],"do feel":["it","free","like"],"do find":["that"],"do for":["the","other","the"],"do get":["much"],"do have":["a","some","loads","the"],"do here":["is"],"do if":["I","you"],"do in":["`add_word`."],"do is":["use","match","instead","to"],"do it":["like","here","once","in","all","since","anyway,","this","last","that","that","with","like:","the","with","with","for","expresses","with","without","through","without","in","in","but","using","for","but","and","like","since"],"do it\"":["-"],"do it,":["I'm","that","and","too."],"do it.":["For","I","Can","(There"],"do just":["one","fine.","fine."],"do like":["`:silence`","the","the","this:","it","your","the"],"do more":["than","reading","accurate"],"do most":["of"],"do much":["with"],"do need":["reverse,"],"do not":["like","mind","have","need","do","need","guard","have","need","have","acknowledge"],"do nothing":["but"],"do now!":["Awesome!"],"do on":["the"],"do one":["thing.","more"],"do or":["what"],"do pattern":["matching","matching"],"do quite":["a","a"],"do remember":["that"],"do see":["your","hyphens."],"do similar":["things"],"do so":["with","anyway","upon"],"do some":["more","learning","refactoring","reading"],"do something":["like:","like:","like","more","that"],"do string":["interpolation"],"do tail":["recursion"],"do tend":["to"],"do that":["and","that","and","here.","with","would","in","work","once.","it","in","in","now,","only","kind","exercise","would"],"do that,":["it","because","I","I"],"do that.":["I","I'll","But","I","Is"],"do that?":["I"],"do the":["same","latter","actual","String.split","word","if-statments.","same","interpolation","private","same","downcasing","kind","strip","`String.downcase(word)`","downcasing","downcasing","mental","`unquote`","job,","`iolist_to_binary`","Enum.to_list.","recursion","implementation","uniq","right","`reverse`","alternate","upcasing","obvious","same"],"do there":["to"],"do they":["describe"],"do things":["and","like"],"do think":["`cond`","it","it","it"],"do this":["`String.last(arg)","functionaly","kind","for","x","change.","without","with","as","by","in","in","without","without","exercise","exercise","without","exercise","exercise","exercise","exercise"],"do this,":["honestly,","please"],"do this?":["Because"],"do those":["private","transformations","string"],"do to":["maintainability?","improve","the"],"do true":["-\u003e"],"do true`,":["I"],"do ugly":["tricks"],"do understand":["your","the"],"do use":["`\\pL`"],"do want":["(tip:","(for","and"],"do want.":["You"],"do want?":["`Regex.scan`","For","Take"],"do what":["you","I","`cond`"],"do what's":["most"],"do whatever":["end`."],"do when":["the"],"do with":["naming.","the","the","my","the","`x","whether","the","`Enum.reduce`.","the","the","`Inspect.Algebra`","not","the","adjacent","the"],"do without":["the","the"],"do wonder":["why"],"do wrong":["the","the"],"do you":["think?","think","think","think","know","know","get","think?","get","mean","need","think","think?","think","think","mean","mention","think?","think","need","think","think","think?","think","think?","think","think","think","think","think?","feel","feel","mind","think","have","think?","think?","handle","think?","think","get?","make","feel","think?","think?","think?","know","know","think?","compute","really","say","have","only","split","look","add","think?","think?","call","like","think?","use","do","use","put","think","think?","think","have","think?","think?","think?","scan","know","think?","think?","prefer?","think","think","think?","think?","think","think?","mean","use","think","think?","think?","think?","think?","think?","need","think?","think?","think?","think?","think?","think"],"do your":["string"],"do {a,":["a}"],"do) is":["have"],"do, and":["worthwhile."],"do, but":["you"],"do, however,":["feel"],"do, it":["is"],"do, it's":["a"],"do. It's":["often"],"do. The":["code"],"do/end instead":["of"],"do: \"#{first_part_of_verse(1)}Take":["it"],"do: \"#{num}":["bottles"],"do: \"#{n}":["bottles\""],"do: \"1":["bottle\""],"do: \"No":["more","more"],"do: \"One":["bottle"],"do: \"no":["more","more"],"do: ...`":["form"],"do: 1":["+"],"do: 3,":["or:"],"do: ?z":["-"],"do: Enum.reduce(e,":["[],","[],"],"do: String.ends_with?(message,":["\"?\")"],"do: String.ends_with?(s,":["\"?\")"],"do: String.ends_with?(statement,":["?)"],"do: String.length(String.strip(message))":["==","=="],"do: String.strip(input)":["=="],"do: String.strip(message)":["=="],"do: String.upcase(message)":["=="],"do: String.upcase(phrase)":["=="],"do: [allergy],":["else:"],"do: acc":["|\u003e"],"do: acc,":["else:"],"do: chan":["\u003c-"],"do: current_value":["+"],"do: do_count(l,":["0)","0)","0)","0)","0)`.","0)","0)"],"do: do_count(t,":["acc+1)"],"do: do_reverse(l,":["[])"],"do: do_reverse(t,":["[h|acc])"],"do: dow_in_range(@greta,":["@greta,"],"do: dow_in_range(@ibrahim,":["@ibrahim,"],"do: dow_in_range(unquote(1+7*ni),":["unquote(7+7*ni),","unquote(7+7*ni),"],"do: element":["+"],"do: false`":["since"],"do: false`.":["Dave"],"do: greeting":["|&gt;"],"do: hey":["nil"],"do: msg,":["else:"],"do: n":["*"],"do: number":["+"],"do: number(digits)":["|\u003e"],"do: reduce(ll,":["[],"],"do: reduce(t,":["f.(h,","f.(h,"],"do: rem(number,":["2)"],"do: reverse(ll)":["|\u003e"],"do: reverse(tail,":["[head|reversed_list])"],"do: sort_letters(&amp;1)":["=="],"do: stock":["/"],"do: string":["|\u003e"],"do: to_string(number),":["else:"],"do: true":["```"],"do: true`":["elixir"],"do: whatever)`":["is"],"do: whatever`":["and"],"do: x":["+"],"do: {":["year,","year,","c,","String.downcase(w),"],"do: {letter,":["value}"],"do:, else:`":["in"],"do:` is":["a"],"do:` structures":["are"],"do; end":["either,"],"do? How":["could"],"do_* for":["the"],"do_append`. The":["`do_foo`"],"do_collect_downcased_words/1, when":["you"],"do_collect_words/1, because":["the"],"do_count yourself?":["I"],"do_count([], acc),":["do:"],"do_count([_|t], acc),":["do:"],"do_count(l, 0)`.":["That"],"do_count(l, acc)":["do","do","do","do","do"],"do_count(t, acc":["+","+","+","+","+"],"do_foo convention":["around."],"do_hamming_distance([n1 |":["tail_1],","tail_1],"],"do_hey_question? It's":["duplication,"],"do_map(list, f,":["[])","acc)"],"do_reverse([], acc),":["do:"],"do_reverse([h |":["t],"],"do_reverse([h|t], acc),":["do:"],"do_silence(\" \"":["rest),"],"do_silence(\" \"),":["do:"],"do_silence(\"\"), do:":["true"],"do_silence(_), do:":["false"],"do_stuff was":["an"],"do` but":["on"],"do` instead":["having","of"],"do`, not":["`defp"],"do`. It's":["more"],"do`` translates":["to"],"doc comment":["in"],"doc string":["you","on"],"docos for":["String."],"docs I":["realized"],"docs a":["little"],"docs again.":["Thanks."],"docs and":["assumed","function","let","the"],"docs at":["the"],"docs can":["use"],"docs don't":["have"],"docs for":["a","`Enum.count/2`:","Regex.scan","Code.eval_quoted"],"docs more":["^^"],"docs on":["ranges"],"docs to":["put"],"docs updated":["a"],"docs use":["`filter`"],"docs with":["examples."],"docs, I":["figured"],"docs, but":["it's"],"docs, it":["appears"],"docs, sorry":["for"],"docs. Is":["that"],"docs/tutorial beside":["the"],"docs](http://elixir-lang.org/docs/stable/String.html) for":["some"],"docstring and":["comments"],"docstring is":["actually"],"docstrings, +1":["for"],"doctest run":["those"],"doctest to":["work"],"doctest work":["by"],"doctest, as":["opposed"],"doctest: this":["is"],"doctests as":["well"],"doctests in":["the"],"doctests, is":["why"],"doctor prescribed":[":)"],"document on":["the"],"document the":["logic"],"document this":["refactoring"],"documentation :-),":["but"],"documentation and":["agree.","re-organized","use"],"documentation doesn't":["say","include"],"documentation in":["the"],"documentation is":["on","really","a"],"documentation of":["`List`."],"documentation or":["elsewhere?"],"documentation says":["that"],"documentation you":["can"],"documentation! As":["for"],"documentation, I":["discovered"],"documentation, there":["is","is"],"documentation, which":["I"],"documentation, you":["may"],"documentation. And":["I"],"documentation. It":["seems"],"documentation? Also,":["I'd"],"documentation](http://www.erlang.org/doc/efficiency_guide/binaryhandling.html) repeated":["concatenation"],"documented inside":["little"],"documented well,":["and"],"does \u003ccode\u003eSpeech\u003c/code\u003e":["say"],"does `empty?()`":["handle"],"does a":["String","lot","match"],"does and":["it"],"does cost":["a"],"does even":["more"],"does handle":["shouting"],"does has":["to"],"does he":["really"],"does indeed":["pass","use"],"does it":["give","make","mean"],"does its":["own"],"does just":["that)."],"does look":["prettier","nice","a"],"does make":["it","this","the","it"],"does more":["what"],"does not":["eliminate","make","work","check","allow","need","look","appear","appear","represent","take","warn","appear","(although","include","seem","work"],"does now.":["I'll"],"does on":["this"],"does one":["thing!"],"does pass":["all","the","that"],"does read":["much"],"does return":["\"a"],"does seem":["like","like","to","cleaner.","harder"],"does seems":["less"],"does slightly":["bug"],"does something":["like","different."],"does take":["a"],"does that":["work?","work.","is"],"does the":["\u003ccode\u003eRegex.scan...\u003c/code\u003e","fact","same","right","right","syntax","downcasing","job.","`u`","conversion.","pipeline","test-suite"],"does this":["do","pass","code"],"does what":["you're","`tokenizer`"],"does your":["code","test"],"does) will":["take","take"],"does, and":["I"],"does, but":["`normalize`"],"does, it's":["deeply"],"does, not":["after"],"does. My":["preference"],"does? If":["not"],"doesn't \"pad\"":["anything"],"doesn't actually":["do","need"],"doesn't add":["any"],"doesn't allow":["teeing"],"doesn't always":["improve"],"doesn't appear":["in"],"doesn't appear.Anyway":["I'm"],"doesn't change,":["then"],"doesn't compile":["for","because"],"doesn't consist":["of"],"doesn't contain":["things","letters"],"doesn't crash":["on"],"doesn't create":["so","an","an","an","an","an"],"doesn't deal":["with,","with","with"],"doesn't do":["any","escapes).","much","anything."],"doesn't even":["pass"],"doesn't event":["exist."],"doesn't expect":["the"],"doesn't feel":["right","right.","\"functional\"","like","as"],"doesn't fit":["the","the","in","as"],"doesn't get":["downcased","it,","module","compiled"],"doesn't give":["you"],"doesn't handle":["words","e.g."],"doesn't have":["to","a","to","to","that","the","an","a","`cond`","the","a","any"],"doesn't hurt":["though,"],"doesn't improve":["much.","performance","readability."],"doesn't include":["Erlang"],"doesn't it":["work?"],"doesn't keep":["re-sorting"],"doesn't know":["anything"],"doesn't loo":["like"],"doesn't look":["like","like","quite"],"doesn't make":["much","it","full","a","the","any","sense)."],"doesn't match":["the"],"doesn't match,":["regardless"],"doesn't matter":["if"],"doesn't matter\"":["which"],"doesn't mean":["you","you"],"doesn't mention":["punctuation,"],"doesn't modify":["it's"],"doesn't mutate;":["it"],"doesn't necessitate":["recursion?"],"doesn't need":["to","to","the","a"],"doesn't offer":["anything"],"doesn't offset":["anything"],"doesn't pad":["with"],"doesn't pass":["test","one"],"doesn't perform":["as"],"doesn't really":["make","have","belong","have","seem","want","follow","have","need","teach","look"],"doesn't repeat":["so"],"doesn't require":["you"],"doesn't result":["in"],"doesn't satisfy":["the"],"doesn't say":["that"],"doesn't seem":["like","to","like","like","unreasonable","to","to","to","to"],"doesn't so":["much"],"doesn't solve":["the"],"doesn't sound":["right)."],"doesn't store":["anything"],"doesn't support":["strings"],"doesn't surprise":["me"],"doesn't take":["more","away"],"doesn't tell":["you"],"doesn't that":["work?"],"doesn't unnecessary":["create"],"doesn't update":["`tally`"],"doesn't use":["regex,","the"],"doesn't vary":["with"],"doesn't work":["because","in","with","on","on","without"],"doesn't work!":["(Though"],"doesn't work,":["you","here's"],"doesn't work.":["Why"],"doesn't work...":["accidentally"],"doesn't yet":["expose"],"doesn't. It":["removes"],"doesn´t follow":["the"],"doesn´t have":["this"],"doesn´t say":["much"],"doesn’t actually":["meet"],"doh! Should've":["done"],"doing Elixir":["long"],"doing `String.last(input)":["=="],"doing `to_words`":["and"],"doing a":["lot","lot","map","little","single"],"doing an":["Enum.reduce"],"doing both":["was","a"],"doing complex":["ones"],"doing down":["to"],"doing elixir":["for"],"doing enough":["to"],"doing explicit":["recursion."],"doing fine":["-"],"doing idiomatic":["elixir"],"doing in":["the","is_all_upcase","`to_decimal`,"],"doing inline":["functions"],"doing is":["comparing","a"],"doing it":["all","here.","wrong.","that","but","differently:"],"doing it,":["but","I","and"],"doing it.":["In"],"doing more":["operations","work"],"doing on":["line","line"],"doing one":["check"],"doing point-free":["programming"],"doing quite":["a"],"doing rather":["than","than"],"doing so":["would"],"doing some":["sort","pattern","unnecessary"],"doing something":["like","the"],"doing that":["with","rather","and","for","at","first","generally"],"doing that.":["But","The","I"],"doing the":["same","same","downcase","reviewing/nitpicking","`zip`,","recursion","pattern","Haskell","same","right","Haskell","split","offset","appends","list_ops","extra"],"doing things":["with","*is*","like"],"doing things.":["I","Presumably"],"doing this":["that","you","input","with","for","test","in"],"doing this.":["For"],"doing this?":["Is"],"doing to":["it?"],"doing too":["much"],"doing two":["things.","things"],"doing what":["I","you","you"],"doing with":["guard"],"doing, which":["is"],"doing. On":["the"],"doing... coming":["from"],"doing? Will":["that"],"dollar mistake\"":["(null"],"domain (i.e.":["shouting,"],"domain a":["little","bit"],"domain and":["less"],"domain as":["the","well","well"],"domain being":["a"],"domain concept.":["Moreover,"],"domain is":["how"],"domain language":["to","into"],"domain model.":["Also"],"domain of":["this","the","opinion,","biology"],"domain term":["and"],"domain, but":["'empty'"],"domain, maybe":["not."],"domain, since":["they"],"domain, so":["maybe"],"domain-y names":["e."],"domain. In":["the"],"domain. What":["do"],"domain. `yells?(input)`":["sounds"],"don't actually":["care","need","need","need"],"don't agree":["that"],"don't be":["too","shy"],"don't behave":["as"],"don't believe":["so,"],"don't buy":["you"],"don't care":["what's","for","about","about","what"],"don't check":["for","for"],"don't contain":["punctuation."],"don't convert":["the"],"don't count,":["the"],"don't do":["it."],"don't end":["up"],"don't enforce":["this,","adding"],"don't even":["want"],"don't expect":["to","the","to"],"don't feel":["that","like","quite"],"don't flatten":["before"],"don't follow":["you."],"don't for":["the"],"don't forget":["to"],"don't get":["it...","removed.","any"],"don't have":["any","to","to","to.","to","to","trouble","the","to","to","much","to","the","niceties","to","any","a","much","a","a","that","much","so","a","to","that"],"don't import":["things"],"don't include":["hyphens."],"don't indiscriminately":["replace"],"don't introduce":["an"],"don't know":["that","who","the","how","which","if","the","the","anything","if","if","that","that","what","the","the","it.","how","that","about","how","how","what","what","actually","any","that","of","if","if","why","either.","the","what","what","if","because"],"don't know,":["I","I","the"],"don't let":["my","the","it"],"don't like":["is","about","that","it","my","dropping","the","how","that","that","the","this","the","the","treating","that","this"],"don't like,":["but"],"don't look":["very"],"don't love":["Regex"],"don't match":["negative"],"don't mean":["something"],"don't mind":["the","the","a"],"don't mind,":["I"],"don't need":["pattern","the","to","to","to","to","to","to","to","the","downcase","`cond`","two","both","to","to","to","the","recursive","to","with","this","to","the","`Enum.to_list(start..finish)`.","to","a","to"],"don't particularly":["like"],"don't pass":["characters"],"don't preserve":["order"],"don't really":["like","have","need","need","see","see","see","like","like","want","understand","go","have","cover","describe","need"],"don't recall":["what"],"don't recognize":["shouting"],"don't require":["extra"],"don't return":["a"],"don't say":["much"],"don't scare":["me"],"don't see":["a","how","any","any","anything","why","how","the","how","an","any","a"],"don't seem":["very","to","to"],"don't technically":["need"],"don't tend":["to"],"don't think":["I","```something","there's","so.","that","List.flatten/1","it","it's","that","that","you","this","you","the","it's","you","that's","recursion","`Enum.map_join/3`","Elixir","that","it's","the","the","I'm","it's","that","it","so.","the","list","they're","I","you're","folding","you","your","the","it's","it"],"don't understand":["how","something","how","difference","the"],"don't use":["the","them","parentheses","parentheses","pattern","parens","`signature`","`id`","enough"],"don't want":["to","to","and","to","to","people","and","to","maybe","you","why","any","to","to","and","and","to","how","could","to"],"don't want,":["or"],"don't want.":["Wouldn't"],"don't work,":["just"],"don't worry,":["OTP"],"don't yet":["know","have"],"don't you":["use","like","mean"],"don't, but":["I"],"done (and":["honestly"],"done after":["the"],"done anywhere":["else."],"done before":["`shouting?`"],"done by":["just"],"done correctly":["here)."],"done in":["a","the","`do_count`.","Elixir","idiomatic","Elixir."],"done inside":["a"],"done is":["`Regex.scan(,..)"],"done it":["in","with","just","in"],"done it,":["and"],"done much":["importing,"],"done often,":["usually"],"done on":["your"],"done once":["as"],"done so":["I","I"],"done something":["weird"],"done that":["now"],"done this":["exercise","exercise","exercise)","better,"],"done to":["the","make"],"done with":["`split`,","String","just","Conway's"],"done! Why":["would"],"done! good":["job!"],"done, and":["then"],"done, in":["my"],"done, you":["handle"],"done. I":["love","don't"],"done. There":["are"],"dont overcomplicate":["things."],"dont think":["this"],"dont you":["think?"],"don´t need":["to","to"],"don´t say":["much","much"],"don´t see":["the"],"don’t actually":["call"],"dot not":["know"],"dot-dsl and":["custom-set","such."],"dots are":["more"],"dots make":["it"],"dots on":["chaining"],"dotted around":["my"],"double character":["variable"],"double control":["structures"],"double precision":["floating"],"double quoted":["strings"],"double quotes,":["is"],"doubled as":["a"],"doubt I'll":["work"],"doubt Stream.with_index":["makes"],"doubt about":["this"],"doubt if":["that's"],"doubt use":["parentheses."],"doubt was":["to"],"doubt you'd":["find"],"doubt, use":["graphemes."],"doubting to":["use"],"doubts about":["`bitstring_to_list`:)"],"dow, month,":["year)","year)"],"dow_in_range(@greta, @greta,":["unquote(i+1),"],"dow_in_range(@ibrahim, @ibrahim,":["unquote(i+1),"],"dow_in_range(first, last,":["dow,","dow,"],"dow_in_range(unquote(1+4*7), unquote(7+4*7),":["unquote(dpi+1),","unquote(dpi+1),"],"dow_in_range(unquote(1+7*ni), unquote(7+7*ni),":["unquote(dpi+1),","unquote(dpi+1),"],"down a":["route"],"down and":["pass","pass","pass","pass","write"],"down anymore.":["I've"],"down below":["the","the"],"down future":["development"],"down into":["the","smaller","named","more"],"down near":["the"],"down several":["blind"],"down the":["line.","line","functional","source","latest","`to_anagram_key/1`","possible","road,"],"down this":["page,"],"down to":["zero.","the","see","something","one","just"],"down, find":["the"],"downcase a":["sentence,"],"downcase across":["to"],"downcase and":["sorted","sort"],"downcase as":["the"],"downcase both":["of"],"downcase call":["somewhere"],"downcase in":["`list_to_counted_hash`","`are_not_identical`"],"downcase is":["something"],"downcase on":["it,"],"downcase representations.":["I'm"],"downcase the":["whole","input","target","target","words","entire"],"downcase them":["all"],"downcase would":["make"],"downcase |&gt;":["scrub"],"downcase |\u003e":["sanitize"],"downcase, and":["then"],"downcase, but":["not"],"downcase, look":["at"],"downcase/codepoints/sort stuff":["and"],"downcased \"word\"":["for"],"downcased `base`":["for"],"downcased anagram":["to"],"downcased and":["sorted"],"downcased earlier,":["you"],"downcased letters":["for","for"],"downcased once":["here."],"downcased sorted":["base"],"downcased twice:":["once"],"downcased version":["of","of"],"downcasing and":["sorting","sorting"],"downcasing could":["just"],"downcasing each":["word?","word"],"downcasing in":["the"],"downcasing into":["a"],"downcasing methods,":["hmm."],"downcasing multiple":["times.","times."],"downcasing of":["the","the","the"],"downcasing the":["string"],"downcasing your":["words"],"downside is":["that"],"downside of":["this","those","using"],"downsides as":["you"],"downstream functions":["(I"],"dp, dpi":["}","}","}","}"],"dp, i":["}","}"],"dpi }":["inlist","inlist","inlist","inlist"],"drag, but":["other"],"dramatic difference":["in"],"drawing a":["`blank?`."],"drift correctly":["but"],"driven beyond":["the"],"driving me":["crazy."],"drop the":["is_","Enum.count","\"?\",","prefix","parens"],"dropped db":["as"],"dropped from":["0.3s"],"dropped in":["favor"],"dropping the":["is_","parens"],"dry up":["the"],"due to":["the","the","the","elixir","constant","exercism","not","protocols","the","the","overallocation","[\"A\"|\"B\"]","how","a","Erlang's","parsing","stack","stack","stack","the","stack","how","stack","how","stack","the"],"dug deeper":["into"],"duh ```''```is":["a"],"dumb for":["forgetting"],"dummy question":["was"],"duplicate calls":["to"],"duplicate downcasing":["methods,"],"duplicate the":["logic"],"duplicated calls":["to"],"duplicated code,":["which"],"duplicated empty?":["checks"],"duplicated or":["missing"],"duplicating the":["check","entire","@johann"],"duplication and":["readability,","push"],"duplication as":["code","possible,","much"],"duplication between":["the","the","the","the","the","the","`total`"],"duplication created":["by"],"duplication from":["the"],"duplication in":["the","the","#anagram?","the","the"],"duplication is":["bad."],"duplication maintainable.":["Maybe"],"duplication of":["the","the"],"duplication or":["metaprogramming."],"duplication which":["is"],"duplication without":["sacrificing"],"duplication you":["have"],"duplication, and":["it","I"],"duplication, but":["architecture","you"],"duplication, for":["example,"],"duplication. Also":["consider"],"duplication. I":["think"],"duplication. Plus":["I"],"duplicative solution":["maintainable."],"during recursion,":["and"],"during start_link,":["then"],"during the":["merge"],"dynamic dispatching":["is"],"dynamic languages":["at"],"dynamically generated":["names?"],"e and":["an"],"e as":["separate"],"e))))` and":["not"],"e)` because":["of"],"e. g.":["`is_shouting?`,"],"e.g. \"HEY":["YOu\""],"e.g. \"x":["bottles"],"e.g. Enum.reduce":["even"],"e.g. Teenager,":["yelling,"],"e.g. ```":["binary_to_list(word)"],"e.g. `candidates":["|\u003e"],"e.g. `reduce`":["only"],"e.g. `shout?`":["rather"],"e.g. it":["thinks"],"e.g. sets":["of"],"e` can":["be"],"each \u003ccode\u003edef\u003c/code\u003e":[":P"],"each Unicode":["whitespace"],"each `candidate`.":["Could"],"each `true`":["means."],"each action":["in"],"each candidate":["is"],"each case.":["it"],"each case?":["For","That"],"each clause":["to"],"each condition":["into"],"each describing":["and"],"each distinct":["word."],"each do":["one"],"each element":["of","in","in","in"],"each entry":["in","in","in","in","in"],"each function":["call"],"each function,":["I"],"each grade,":["right?"],"each item":["in"],"each letter":["of"],"each line,":["indented"],"each list":["in"],"each match?":["What"],"each method":["`shouting?`,"],"each method's":["responsibility."],"each nucleotide":["will"],"each of":["these,","the","the","the","those","the","those","the","these","node","graph/nodes/edges,","these"],"each other":["and","in","very"],"each possibility.":["Here's"],"each possible":["match?","nucleotide."],"each potential":["anagram."],"each response":["only"],"each string":["(including"],"each subsequent":["square"],"each time":["(outside","called?","is","you"],"each transformation,":["then"],"each true":["to"],"each with":["a"],"each word":["a","first"],"each word,":["that"],"each word.":["Do"],"each world":["in"],"eager for":["any"],"earlier commenter":["that"],"earlier if":["you"],"earlier in":["the","the"],"earlier, but":["I"],"earlier, then":["you"],"earlier, you":["could","could"],"early exit":["for"],"early warning.":[";)"],"earth-specific clause":["of"],"easier and":["easier"],"easier as":["you","a"],"easier for":["the","the"],"easier it":["will"],"easier just":["to"],"easier method":["(like"],"easier on":["the","the"],"easier or":["harder"],"easier than":["trying"],"easier to":["read","read.","read","me","read","maintain","read.","read.","digest","read","read.","read.","follow","read,","read","read","read.","follow,","read","see","comprehend.","read,","comprehend.","comprehend.","read.","read","understand","compute.","understand","read","read.","understand.","read","get","read","show","read","understand","maintain","just","read)","just","identify","look","use","do","follow:","follow:","understand","comprehend","read.","avoid","follow,","switch","read","follow:","read","spot","understand.","understand","read","understand","follow:","read.","read","follow:","understand.","switch"],"easiest possible":["solution"],"easiest to":["read"],"easily avoid":["doing"],"easily be":["inferred"],"easily change":["the"],"easily extract":["the"],"easily find":["them"],"easily lead":["to"],"easily learned":["and"],"easily switch":["out"],"easily than":["recursion,"],"easily use":["your"],"easily with":["`Enum.reduce`."],"easily written":["in"],"easily. This":["is"],"eastern european":["way"],"easy conversion":["from"],"easy enough":["to","to"],"easy time":["understand"],"easy to":["come","have","read,","comprehend.","grasp.","get","read.","read","check","understand.","see","understand.","generate","add","write.","read,","support","define","define","read","define","compare","define","define","follow."],"easy, I":["chose"],"easy. I":["was"],"eaten by":["the"],"eats more":["memory"],"eccentricities they":["cause,"],"echo of":["Erlang."],"ecosystem in":["general."],"ecosystem so":["much."],"edge (one":["for"],"edge case":["and","in"],"edge case,":["which"],"edge cases":["to","that"],"edge cases.":["The"],"edge of":["the"],"edge-case that":["makes"],"edges and":["returns"],"edit -":["ugh,"],"edit a":["nitpick"],"edited the":["regex"],"editor automatically":["inserts"],"editor with":["a"],"editor, but":["way"],"editor, the":["code"],"effect just":["checking"],"effect usually":["as"],"effect, but":["it"],"effect, some":["people"],"effective enough":["to"],"effective for":["functional"],"effective with":["strings."],"effectively change":["the"],"effectively padded":["with"],"effectively the":["same"],"effectively, however":["you"],"effects when":["possible."],"effects, so":["it"],"effects. A":["regex"],"efficiencies that":["could"],"efficiency but":["it"],"efficiency improvements":["over","to"],"efficiency is":["a"],"efficiency of":["`is_sublist`","appends"],"efficiency reasons,":["but"],"efficiency use":["macro"],"efficiency, you":["could"],"efficient I":["think."],"efficient ListDict":["in"],"efficient and":["indeed","less"],"efficient as":["well"],"efficient because":["`iolist_to_binary`"],"efficient by":["using"],"efficient concatenation,":["it"],"efficient in":["Elixir","its","terms"],"efficient since":["R12B."],"efficient than":["you","`defdelegate`","`String.codepoints","a"],"efficient to":["do","not","just"],"efficient way":["to","of"],"efficient ways":["(which"],"efficient when":["used"],"efficient, I":["prefer"],"efficient, and":["then"],"efficient, but":["then","the"],"efficient. But":["I"],"efficient. Not":["a"],"efficient. Your":["`concat`"],"efficient? Not":["sure."],"efficiently adding":["an"],"efficiently concatenate":["it"],"efficiently concatenated":["or"],"efficiently merged":["using"],"efficiently. Then,":["if"],"effort required":["to"],"effort route":["to"],"effort. Worth":["it?"],"eh? And":["comparing"],"either \"No":["more\""],"either `is_blah`":["without"],"either approach":["passes"],"either but":["never"],"either call":["it"],"either don't":["need"],"either find":["something"],"either guard":["clauses"],"either having":["to"],"either of":["those"],"either pattern":["matching"],"either private":["functions"],"either so":["it's"],"either way":["though.","it's","in","works.","on"],"either way.":["It's"],"either, I'll":["look"],"either, because":["it's","\"apply\""],"either, but":["it","I've","that's","most"],"either, just":["a"],"either, most":["of"],"either, so":["I'll"],"either. Ah":["well.."],"either. Any":["idea"],"either. As":["it's"],"either. I":["can","just"],"either. It's":["annoying"],"elaborate a":["bit?"],"elaborate with":["a"],"elegance fool":["you"],"elegant Elixir":["code"],"elegant and":["easier"],"elegant solutions":["to"],"elegant test":["for"],"elegant than":["the"],"elegant using":["functional"],"elegant way":["to"],"elegant ways":["to"],"elegant, I":["hope"],"elegant, avoiding":["the"],"elegant. In":["OCaml"],"elem is":["what"],"elem(&1, 1)),":["&elem(&1,"],"elem(0)`, though":["pattern"],"elem(table, c":["-"],"element (head),":["t"],"element +":["sum"],"element as":["the","the"],"element generator,":["but"],"element had":["something"],"element in":["the","candidates","a","`acc`)","`acc`)"],"element list,":["I"],"element lists.":["The"],"element of":["`entries`","`entries`?","the","a"],"element on":["the"],"element to":["its","the"],"element |":["tail"],"element) -\u003e":["acc`."],"element, I":["guess"],"element, sometimes":["not."],"element, the":["entire"],"element. `elem(t,":["size(t)"],"elements (in":["this"],"elements (which":["is","is"],"elements `zip`":["includes"],"elements are":["allowed","in","in"],"elements being":["joined?"],"elements from":["a"],"elements in":["`@soledad`?"],"elements it's":["`500500`.","`500500`."],"elements makes":["total"],"elements of":["the","the"],"elements pass":["the"],"elements takes":["only","only"],"elements that":["are"],"elements the":["time","time"],"elements whenever":["it's"],"eliminate duplication.":["Plus"],"eliminate empty":["check"],"eliminate line":["24"],"eliminate magic":["text"],"eliminate one":["of"],"eliminate or":["reduce"],"eliminate other":["checks/functions"],"eliminate that":["duplication?","duplication?"],"eliminate the":["`is_forceful?`","regular","empty","test","need","need"],"eliminated some":["duplication,"],"eliminated the":["`wordList`"],"eliminates the":["need","need"],"elixir 0.10.1":[":)"],"elixir :)":["I"],"elixir \u003ccode\u003ev0.10.0\u003c/code\u003e":["the"],"elixir `Enum`":["methods"],"elixir and":["using","better"],"elixir are":["you"],"elixir before":["and"],"elixir brings":["advantages"],"elixir can":["have"],"elixir code":["I've","I've","is"],"elixir code,":["though"],"elixir code.":["I"],"elixir community":["is"],"elixir convention":["is"],"elixir convertion":["(dunno"],"elixir didn't":["like."],"elixir exercises":["available"],"elixir expert,":["but"],"elixir fails":["with"],"elixir for":["me","instance","a"],"elixir from":["reading"],"elixir had":["the"],"elixir has":["no","something"],"elixir here,":["so"],"elixir is":["evolving","pretty","generally"],"elixir land":["with"],"elixir names":["and"],"elixir noob":["I"],"elixir only":["from"],"elixir or":["is"],"elixir pipeline":["operator"],"elixir programmer":["to"],"elixir protocols":["for"],"elixir provides":["a"],"elixir repo":["(which"],"elixir so":["I'm"],"elixir so,":["probably"],"elixir solutions":["to"],"elixir stdlib,":["the"],"elixir style":["to","binary"],"elixir that":["looks"],"elixir the":["language"],"elixir they":["are,"],"elixir this":["means"],"elixir to":["allow","wonder"],"elixir too,":["but"],"elixir tools.":["Have"],"elixir v0.10.1.":["It's"],"elixir when":["I","using"],"elixir which":["can"],"elixir will":["consistently"],"elixir yet,":["so"],"elixir you":["can"],"elixir zipper'":["gives"],"elixir\" involves":["pattern-matching,"],"elixir'ish when":["piping?"],"elixir's `cond`.":["I"],"elixir's `|&gt;`":["operator."],"elixir's `|\u003e`":["operator"],"elixir's comprehension":["syntax,"],"elixir's grammar":["seems"],"elixir). I":["might"],"elixir, I":["know","did"],"elixir, but":["on"],"elixir, didn't":["know"],"elixir, it":["looks"],"elixir, so":["`acc`","I","I","I'm","you"],"elixir, this":["is","is","is"],"elixir-core mailing":["list"],"elixir-core.. Well":["Done"],"elixir-ish at":["all."],"elixir-lang docs,":["it"],"elixir-lang-talk José":["actually"],"elixir-lang.org, which":["lets"],"elixir. Any":["help"],"elixir. For":["example,"],"elixir. I":["was"],"elixir. It":["seems"],"elixir. It's":["similar"],"elixir. Just":["starting"],"elixir. So":["please"],"elixir. Thank":["you"],"elixir. Thanks":["for"],"elixir. lol.":["`/me`"],"elixir.) And":["I"],"elixir; still":["need"],"else (Katrina":["herself"],"else (note":["that"],"else (which":["used"],"else --":["that"],"else ..":["end`"],"else ...":["end`?"],"else =":["true!"],"else ==":["true"],"else I":["considered:"],"else about":["this"],"else acc":["+","end"],"else along":["those"],"else before":["your"],"else clause).":["`nil`"],"else elixir":["didn't"],"else has":["any"],"else having":["to"],"else here":["looks","looks"],"else if":["...","...`"],"else if`":["flow"],"else if`s.":["Thanks"],"else in":["a","the"],"else influential":["so"],"else is":["in","good"],"else just":["to"],"else like":["you"],"else looks":["good","great."],"else nitpicked":["over"],"else pointed":["out"],"else raise_invalid_stmt(stmt)":["end`."],"else suggested":["to"],"else than":["a"],"else that":["takes"],"else to":["accomplish"],"else using":["Enum.map"],"else you":["can","know"],"else, end":["expression"],"else, probably":["going"],"else. (Note":["it's"],"else. I":["didn't"],"else. Usually":["because"],"else. What":["it"],"else/if isn't":["that"],"else: \"\"":["end)`"],"else: acc":["+"],"else: result`,":["but"],"else:` in":["`second_line`?"],"else? I":["have"],"elsewhere it's":["best"],"elsewhere, and":["calling"],"elsewhere, versus":["defining"],"emacs to":["take"],"embedded call":["to"],"embedded if-statement":["and"],"emerging the":["different"],"emphasize private":["building"],"emphasizes the":["shape"],"emptiness of":["space."],"empty (which":["is"],"empty accumulator":["List"],"empty check":["by"],"empty check.":["It"],"empty dict":["only"],"empty dict,":["and"],"empty lines":["between"],"empty list":["is","and","is","and","is"],"empty list,":["zero,"],"empty lists":["instead"],"empty lists,":["whereas"],"empty matches":["at"],"empty message":["with"],"empty or":["I","question"],"empty phrase.":["Hint:"],"empty set":["comes"],"empty string":["with","(==","as","being","in","`\"\"`","is","rather","to","\"\"","case.","multiple","literal.","case,","(I","special","I","is","would","instead","(probably"],"empty string,":["and","it's","one"],"empty string.":["Not","Why","I'm"],"empty strings":["(and","is","and","from"],"empty strings.":["I"],"empty than":["String.length(message)"],"empty tuple":["though,"],"empty use":["`Enum.empty?`."],"empty word":["return"],"empty words,":["then"],"empty(input) -\u003e":["\"Fine."],"empty, and":["I"],"empty, but":["not"],"empty, which":["is"],"empty-string test":["tonight."],"empty. I'll":["update"],"empty/nil, not":["the"],"empty/silence method":["could"],"empty? Maybe":["returning"],"empty? as":["well."],"empty? be":["more","more"],"empty? checks":[":)"],"empty? definition.":["I"],"empty? has":["become"],"empty? message":["-\u003e"],"empty?(message), do:":["String.length(String.strip(message))","String.length(String.strip(message))"],"empty?(nil), do:":["true","true"],"empty?`, I":["personally"],"en Ruby":["(au"],"en effet":["!"],"en fin":["de"],"enable simpler":["checks"],"encapsulate that":["state"],"encapsulate the":["logic","logic"],"encapsulate them":["into"],"encapsulates one":["bit"],"encapsulates that":["pattern."],"encapsulation is":["unnecessary."],"encapsulation standpoint":["it"],"encapsulation while":["adding"],"encapsulation, I'm":["going"],"encapsulation, and":["they"],"enclose them":["in"],"enclosing the":["List.zip"],"encode the":["character","values"],"encode them":["as"],"encoded and":["`bitstring_to_list`"],"encoded binaries,":["just"],"encoded in":["UTF-8).","UTF8)."],"encoded the":["appropriate","variable"],"encodes the":["letters-with-scores"],"encoding just":["made"],"encountering an":["empty"],"encourage people":["to"],"encourage you":["to"],"end )`":["could"],"end I":["opted","opted"],"end allows":["`accumulate/2`"],"end and":["there's"],"end either,":["I'll"],"end end`,":["in"],"end expression":["inline"],"end for":["efficiency"],"end function":["names"],"end if":["you're"],"end in":["a"],"end is":["not"],"end looked":["weird"],"end of":["methods","function","the","function","a","the","the","this","lines","the","the","a","the","the","the","the","a","a","the","your","the","the","the","cleanup","a","`numerals`.","the"],"end predicate":["functions"],"end rather":["than"],"end the":["recursion."],"end there":["are","I"],"end those":["boolean"],"end up":["with","having","with","with","using","with","with","as","with","calling","using","saving","with","with","with","with","being","using","with","with"],"end using":["that"],"end verses":["backward,"],"end with":["a","a","a","\"?\""],"end! Sure,":["keep"],"end\" as":["\"&amp;1"],"end\" block":["and"],"end\" with":["\"&amp;1"],"end) |&gt;":["HashDict.new"],"end) |\u003e":["Enum.filter(fn","Enum.map(&elem(&1,","iolist_to_binary"],"end)) |\u003e":[":lists.reverse()"],"end), but":["for"],"end)` to":["a"],"end)`, but":["this"],"end, and":["indented"],"end. How":["can"],"end. I":["like"],"end. I'll":["change"],"end\u003c/code\u003e can":["be"],"end_verse //":["0)","0)"],"end_verse) when":["start_verse"],"end_verse\u003c/code\u003e was":["a"],"end` as":["`sorted_base_letters","`&(1","the","`&(&1"],"end` could":["be"],"end` in":["line","this"],"end` inside":["the"],"end` is":["nice","a","false.","just"],"end` may":["be"],"end` spiel.":["That"],"end` to":["generate","just","just"],"end` works":["as"],"end` you're":["[left-folding](https://en.wikipedia.org/wiki/Fold_%28higher-order_function%29)","[left-folding](https://en.wikipedia.org/wiki/Fold_%28higher-order_function%29)"],"end`) but":["this"],"end`, in":["other"],"end`. I":["also"],"end`. Some":["people"],"ended up":["with","with.","with","with","with","writing","either","writing"],"ending \u003e=":["0`."],"ending predicate":["functions"],"endless frustration":["and"],"ends a":["recursive"],"ends up":["pretty","doing","being"],"ends with":["\"?\"","a","\"?\"","a","a","another","a"],"ends_with? -":["that's"],"ends_with? ```":["method."],"ends_with? will":["be"],"enforce adding":["students"],"enforce this,":["but"],"enforcing a":["less"],"engage all":["the"],"engine can":["stop"],"english dictionary":["and"],"enhance the":["readability"],"enjoyed the":["discussion"],"enjoyed writing":["a"],"enjoying exercism":["as"],"enough (this":["isn't"],"enough I":["think?"],"enough `List.zip/1`":["doesn't"],"enough as":["synonymous","it"],"enough at":["the"],"enough edge":["cases"],"enough hints":["to"],"enough in":["its","my"],"enough list":["comprehensions."],"enough other":["challenges"],"enough primes":["it"],"enough reason":["for"],"enough that":["any"],"enough time":["on"],"enough to":["try","quite","claim","elixir","feel","warrant","do,","make","only","me","include","merit","support","write","pass"],"enough when":["using"],"enough with":["the","the"],"enough, and":["it"],"enough, there's":["no"],"enough, though":["you"],"enough. Enumerators":["also"],"enough. I":["can"],"enough. Not":["sure."],"enough; in":["functional"],"enough? For":["example"],"ensure that":["every"],"ensure zip":["doesn't"],"entangled with":["each"],"entered that":["contains"],"enterprise Java":["doing"],"entire `increase_count/2`":["method."],"entire binary":["string"],"entire left":["list","list"],"entire list":["has","has","has","has","has"],"entire list_":["operation."],"entire matched":["text,"],"entire module":["of"],"entire phrase-to-words":["transformation"],"entire string":["is"],"entire string,":["even","then"],"entire string.":["You"],"entire structure":["of"],"entire word":["list","list."],"entirely certain":["how"],"entirely composed":["of"],"entirely trivial,":["I"],"entirely. Is":["there"],"entirely. Thank":["you!"],"entity inserted":["into"],"entry has":["to","to","to","to","to"],"entry in":["the","the","the","the","the"],"entry is":["created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created"],"entry of":["the","the","the","the","the"],"entry vs.":["retrieval"],"entry was":["reused","reused","reused","reused","reused"],"entry with":["key"],"enum and":["then"],"enum at":["the"],"enum for":["days"],"enumerable implementation.":["I"],"enumerable you":["can"],"enumerable, ranges":["were"],"enumerable, so":["you"],"enumerable, which":["is"],"enumerable, you":["can"],"enumerable. The":["actual"],"enumerables (collections),":["but"],"enumerate through":["all"],"enumeration, I":["don't"],"enumeration, and":["that"],"enumerators are":["based"],"enumerators for":["that"],"enumerators of":["Haskell"],"enumerators. Elixir":["did"],"episode with":["Jose"],"episodes I've":["heard"],"equal `[]`.":["If"],"equal amount":["of"],"equal char":["lists."],"equal to":["the"],"equal without":["having"],"equality (`===`)":["is"],"equality check":["and"],"equality check.":["Might"],"equality checking.":["It"],"equality comparator":["for"],"equality of":["the"],"equality. If":["you"],"equality. It":["guarantees"],"equalize the":["length."],"equally I":["thought"],"equally well":["describes"],"equilvalent in":["`Dict`."],"equivalence check":["syntax"],"equivalence check,":["you"],"equivalent and":["vice-versa."],"equivalent for":["that."],"equivalent function":["in"],"equivalent is":["something"],"equivalent of":["ruby's"],"equivalent though,":["`1"],"equivalent to":["replacing","`s","`filter`,","one"],"equivalent). Think":["of"],"equivalent, but":["I"],"erlang /":["elixir"],"erlang I":["would"],"erlang `:math`":["module)."],"erlang and":["elixir","consequently"],"erlang community,":["but"],"erlang community.":["What"],"erlang documentation":["doesn't"],"erlang genes":["to","to"],"erlang style":["lists"],"erlang way":["of"],"erlang's `ìf``":["…"],"erlang, and":["elixir."],"erlang/elixir way":["as","to"],"errant space":["`def"],"error \"unquote":["called"],"error **":["(FunctionClauseError)"],"error -":["this","still"],"error I":["got"],"error and":["non-error"],"error because":["I"],"error by":["using"],"error cases":["are"],"error detection":["is","isn't","being"],"error handling":["model."],"error is":["raised"],"error message":["do","I","without"],"error messages":["don't","for","with"],"error of":["an"],"error on":["the","file"],"error reporting":["tends"],"error since":["it"],"error you":["mentioned."],"error. And":["the"],"error. I":["think"],"error. Is":["there"],"error: #Function\u003c0.55315932":["in"],"error: `":["**"],"error? Maybe":["im"],"errors is":["an"],"errors or":["deprecation"],"errors that":["way."],"errors when":["attempting"],"errors while":["trying"],"escape `?`,":["a"],"escape hatch":["of"],"escaped when":["the"],"escaping \"magic\"":["characters"],"especially 1":["arg"],"especially if":["the"],"especially importing":["all"],"especially in":["`count`,"],"especially since":["you","the"],"especially the":["default"],"especially with":["the","your","the","names","the","the"],"essence of":["this"],"essential for":["telling"],"essentially a":["default"],"essentially saying":["\"if"],"essentially select":["what"],"essentially the":["same,"],"est d'utiliser":["des"],"et al":["would"],"etc I'm":["writing"],"etc are":["missing."],"etc as":["done,"],"etc into":["either"],"etc of":["the"],"etc to":["be"],"etc) but":["for"],"etc), the":["String"],"etc). Do":["you"],"etc, but":["not"],"etc. Can":["you"],"etc. I":["could","think"],"etc. It":["seems"],"etc. Not":["sure","a"],"etc. would":["be"],"etc.), and":["the"],"etc? You":["can"],"european phone":["numbers"],"european way":["of"],"evaluate any":["code"],"evaluated and":["verified."],"evaluated is":["a"],"evaluated while":["deciding"],"evaluates conditions":["in"],"evaluates to":["true"],"even O(n)":["(with"],"even `[roman":["|"],"even a":["\"talking","bug?"],"even at":["1.0"],"even be":["expanded?"],"even better":[":-)","control"],"even for":["that","huge","huge","huge","huge","huge"],"even if":["they","there","the","it","I","it","they","only"],"even inlining":["the"],"even know":["there"],"even lower":["with"],"even more":["simplified.","passes.","readable.","than","awesomeness,"],"even multi-line":["strings."],"even noticed.":["Should"],"even on":["little"],"even pass":["the"],"even passed":["directly"],"even pipe":["it"],"even pull":["requests."],"even simple":["problems."],"even simpler":["like"],"even squeeze":["them"],"even sure":["how","what"],"even that":["is"],"even the":["minor","more"],"even then":["there"],"even think":["about","about"],"even though":["it","it's","it's","it's","it's","words","the","they","in","the"],"even tighter.":["You"],"even uglier":["with"],"even used":["`\\p{Lu}`."],"even want":["to"],"even works.":[":)"],"even?(number), do:":["rem(number,"],"event that":["the"],"eventually run":["out"],"eventually, it":["just"],"ever Elixir":["program!"],"ever be":["more"],"ever encountering":["an"],"ever feel":["like"],"ever had":["to"],"ever have":["any","before."],"ever in":["Elixir."],"ever larger.":["For"],"ever re-orders":["the","cond"],"ever skimmed":["over"],"ever so":["could","slightly"],"ever want":["to"],"ever written":["in","it"],"ever written,":["so"],"ever-so-slightly more":["code"],"ever. I":["have"],"every call":["to"],"every call.":["This"],"every candidate).":["Can"],"every candidate,":["even"],"every case,":["but"],"every element":["of"],"every function":["anyway."],"every item":["in","in"],"every iteration":["through"],"every iteration.":["Wouldn't"],"every letter":["for"],"every line":["of"],"every modification":["operation"],"every new":["append","append"],"every nitpick":["so"],"every nucleotide.":["It's"],"every other":["language"],"every parent,":["grandparent,"],"every possibility.":["Can"],"every possible":["anagram"],"every problem":["as"],"every responsibility":["that"],"every single":["word"],"every so":["slightly"],"every successive":["line"],"every thing":["past"],"every time":["it","for","it","it's","I","-","you","and","you","you"],"every time.":["Same"],"every word":["is"],"everyone seems":["to"],"everyone understands":["names,"],"everything \"too":["DRY\"."],"everything at":["once"],"everything but":["question?."],"everything down":["into"],"everything else":["is","about","(which","that"],"everything expanded":["when"],"everything higher":["than"],"everything in":["a","the"],"everything into":["the"],"everything more":["readable."],"everything rather":["than"],"everything seems":["to"],"everything through":["a"],"everything up":[";)"],"everything with":["`cond`"],"everything within":["the"],"everywhere but":["`pretty/1`,"],"everywhere else":["in"],"everywhere instead":["of"],"everywhere is":["probably"],"everywhere you'd":["use"],"evil as":["magic"],"evolving so":["fast,"],"exact same":["approach","content,"],"exact timers":["around"],"exactly a":["problem,"],"exactly an":["expensive"],"exactly any":["enumerable,"],"exactly because":["one"],"exactly happy":["about"],"exactly how":["to"],"exactly is":["Ruby-style"],"exactly like":["your"],"exactly once.":["I"],"exactly right":["now."],"exactly sure":["how."],"exactly tail":["recursive."],"exactly the":["same","reasoning","height","kind","same"],"exactly to":["look"],"exactly twice":["in"],"exactly what":["I","you","it's","I","I"],"exactly, it":["is"],"exactly. You":["can"],"examining the":["stuff"],"example \"major-elect\"":["is"],"example \"УХОДИТЬ\"":["(Russian"],"example I":["haven't","believe"],"example I've":["seen"],"example OCaml":["not"],"example `&hd/1`":["to"],"example `@eladio`":["declaration"],"example `Enum.zip`":["and","and","vs"],"example `Regex.scan(...)":["|\u003e"],"example `String.ends_with?(word,":["\"!\")"],"example `\\p{L}`":["matches","for"],"example ```Enum.filter(candidates,":["&amp;is_anagram?(source,"],"example `count`":["is"],"example `def":["func([])`"],"example `do_filter`.":["Naming"],"example `do_to_rna`":["(`do_foo`"],"example `iolist_to_binary([[\"A\",":["?B],"],"example `map/2`":["for"],"example `message`?":["The"],"example `parallel-letter-frequency`":["is"],"example `silence?`":["or"],"example `some_call_that_returns_a_list()":["|\u003e"],"example `thing.is_xpath?`":["either"],"example a":["newline","\"*\""],"example and":["did"],"example at":["http://www.regular-expressions.info/"],"example better,":["though"],"example btw,":["but"],"example but":["in","it"],"example by":["factoring"],"example code":["offered","(I"],"example computing":["an"],"example first.":["I'll"],"example for":["the","your"],"example from":["my","the"],"example gets":["fixed."],"example here's":["how"],"example if":["you","two","you","you","you"],"example in":["exercism","the","this","the","`Enum.count`"],"example instead":["of"],"example is":["better"],"example it":["is","also"],"example more":["clear"],"example of":["how","using","a","this"],"example on":["this"],"example the":["concatenation","concatenation"],"example they":["let"],"example using":["`Regex.scan`.","`String.scan`)."],"example when":["you're"],"example where":["you","I've","the"],"example which":["also"],"example while":["this"],"example would":["be","work!"],"example you":["potentially"],"example), so":["I"],"example). The":["elixir"],"example, I":["think."],"example, `a":["="],"example, and":["it's"],"example, but":["in"],"example, by":["making"],"example, calling":["`Dict.put(counts,"],"example, if":["you","I","I","the"],"example, in":["fact!"],"example, instead":["of"],"example, it's":["probably"],"example, pass":["the"],"example, that":["would"],"example, the":["method","expression","function"],"example, what":["does"],"example-based documentation,":["which"],"example. I'd":["much,"],"example: `(String.upcase(\"HEY":["MAN\")"],"example? I":["have"],"example? I've":["found"],"examples I've":["seen"],"examples and":["not"],"examples from":["the"],"examples in":["there"],"examples of":["posible","in","how"],"examples therein":["kind"],"examples, but":["I"],"examples. I":["don't"],"excellent idea":["to"],"excellent, thanks.":["WIll"],"except I":["seemed"],"except concat,":["which"],"except for":["the","case","what","`new`.","the","`Enum.join`?"],"except it":["also"],"except my":["`violates_triangle_inequality?`"],"except sometimes":["for"],"except the":["one","function"],"except to":["convert"],"except with":["the"],"except: [inspect:":["2]"],"exception due":["to","to","to","to","to"],"exception gets":["thrown:"],"exception has":["to"],"exception if":["conversion","the","an"],"exception is":["probably","`HashDict.new`"],"exception of":["`HashDict.new`"],"exception on":["my"],"exception out":["to"],"exception raising":["code"],"exception to":["be"],"exception will":["be"],"exception. So,":["I"],"exceptionally powerful":["(and"],"exceptions, @kamryn.":["The"],"exceptions, which":["I've"],"exceptions. I'm":["not"],"excess elements":["`zip`"],"exchange about":["stack"],"exchange, subscriber_no]":["="],"excited about":["in","the"],"excited every":["time"],"exclamation mark\"":["do"],"exclamation mark)":["it"],"exclamation point":["doesn't"],"exclude anything":["that's"],"exclude phrases":["that"],"exclude words":["that"],"excludes the":["2"],"exclusive so":["that"],"exclusive with":["guards,"],"exclusively with":["the"],"excuse for":["being"],"excuse me,":["I'll"],"excused if":["I"],"execute all":["tests"],"executed in":["the"],"executing String.to_char_list":["and"],"executing code":["at"],"executing the":["call."],"execution time":["until"],"exercise (used":["on"],"exercise -":["well,"],"exercise I":["wanted","don't","tried","was","got","called"],"exercise I've":["been"],"exercise after":["this","I've"],"exercise also":["used"],"exercise and":["code","decided","use","have","click"],"exercise as":["a","my","complete,","the","it"],"exercise ask":["you"],"exercise at":["a","the"],"exercise author,":["requiring"],"exercise before":["it"],"exercise can":["say","be"],"exercise contains":["several","several","several","several","several"],"exercise did":["only"],"exercise didn't":["really"],"exercise doesn't":["so"],"exercise either.":["It's"],"exercise expected":["a"],"exercise feels":["oddly"],"exercise got":["lost?"],"exercise has":["now"],"exercise here":["being"],"exercise in":["3","so","ruby,","general","Ruby.","ruby","terms","about","OCaml","OCaml","Ruby.","OCaml","OCaml","OCaml"],"exercise instructions":["that"],"exercise involving":["parallelism"],"exercise is":["unlocked,","finished","not","to","now","being","about","to","to","also","not","great"],"exercise it's":["not"],"exercise never":["twice"],"exercise of":["it","exercism"],"exercise properly":["and"],"exercise requires":["is"],"exercise routine":["has"],"exercise seemed":["like"],"exercise should":["have"],"exercise so":["use","use"],"exercise specific":["code"],"exercise that":["isn't"],"exercise then":[":-)"],"exercise though,":["which"],"exercise three":["months"],"exercise to":["create","compare","not"],"exercise until":["I"],"exercise using":["OTP,"],"exercise was":["about"],"exercise where":["DRY"],"exercise will":["be"],"exercise with":["imports.","regards"],"exercise without":["a"],"exercise works":["well."],"exercise would":["more","indeed"],"exercise yet.":["I'm"],"exercise you":["need","should","can't"],"exercise(word-count) but":["I"],"exercise) do":["`case"],"exercise) that":["it"],"exercise) to":["provide"],"exercise), be":["aware"],"exercise), but":["from"],"exercise). But":["in"],"exercise). I":["like"],"exercise, I":["think","think","think"],"exercise, `''`":["is"],"exercise, and":["by"],"exercise, as":["this"],"exercise, but":["does","I","I'm","feel","if","this","there's"],"exercise, if":["you"],"exercise, is":["that"],"exercise, it's":["rather"],"exercise, one":["of"],"exercise, really":["fun"],"exercise, so":["I"],"exercise, the":["other"],"exercise, there's":["always"],"exercise, we":["can't"],"exercise, where":["the"],"exercise. 2^64-1":["is"],"exercise. :/":["But"],"exercise. A":["plain"],"exercise. But":["strangely,","you"],"exercise. For":["example"],"exercise. I":["think","find","seem"],"exercise. Performance":["of"],"exercise. Predicates":["are"],"exercise. The":["other"],"exercise. You":["can"],"exercise. Your":["code"],"exercise. `Enum.reduce`":["gets"],"exercise: What":["if"],"exercise? This":["isn't"],"exercises I":["have"],"exercises ago":["and"],"exercises and":["this"],"exercises are":["straight","about","string"],"exercises aren't":["really"],"exercises assuming":["it"],"exercises available":["at"],"exercises doesn't":["do"],"exercises for":["Elixir"],"exercises from":["bank-account"],"exercises in":["a","all"],"exercises is":["to"],"exercises like":["this","this"],"exercises never":["revealed"],"exercises slightly":["easier"],"exercises that":["I've","you"],"exercises to":["get","include","nitpick"],"exercises until":["i"],"exercises were":["still","put"],"exercises where":["a"],"exercises with":["tests"],"exercises you":["should"],"exercises you've":["completed.","completed"],"exercises, I":["actually"],"exercises, but":["not"],"exercises, not":["so"],"exercises. Are":["you"],"exercises. Will":["change"],"exercises.. Will":["re-submit"],"exercism Elixir":["branch!"],"exercism as":["much"],"exercism but":["Elixir"],"exercism by":["adding"],"exercism choked":["on"],"exercism cli":["you'll"],"exercism exercises":["are"],"exercism fetch?":["Make"],"exercism format.":["Haskell"],"exercism gem,":["as","as","as"],"exercism has":["more"],"exercism is":["all"],"exercism isn't":["about","really"],"exercism means":["it's"],"exercism project":["about"],"exercism sources,":["it"],"exercism style":["guide","guide."],"exercism tradition":["that"],"exercism uses":["to"],"exercism's review":["viewport"],"exercism's syntax":["highlighting"],"exercism, and":["I"],"exercism, most":["of"],"exercism, so":["it's"],"exercism.io is":["you"],"exercism.io overwriting":["it"],"exercism.io to":["review,"],"exercism.io will":["include"],"exist because":["that's"],"exist is":["for"],"exist. \"_\"":["on"],"existence entirely.":["Thank"],"existing `HashDict`,":["just"],"existing enum":["for"],"existing function":["I"],"existing functions":["though."],"existing method...in":["this"],"exists a":["solution"],"exists though":["and"],"exists, and":["providing"],"exists. You're":["right"],"exit for":["Enum.reduce."],"exorcism go,":["I"],"expand it":["with","out"],"expand on":["that"],"expand that":["in"],"expand the":["set"],"expand to":["the"],"expanded in":["the"],"expanded to":["the"],"expanded when":["I"],"expanding `shouting?`":["to"],"expanding the":["view."],"expect `Anagram.match(\"test\",":["[\"TEST\"])`"],"expect `anything_else`":["did"],"expect a":["string"],"expect anyone":["would"],"expect infinite":["precision."],"expect it":["to","to"],"expect many":["cells,"],"expect that":["behavior,","\"idiomatic","`String.length/1`"],"expect the":["list","atom","song"],"expect there's":["a"],"expect this":["try/catch"],"expect to":["get","operate"],"expect. @jacinto":["explained"],"expectations doesn't":["feel"],"expectations of":["them,"],"expected a":["proof"],"expected data":["at"],"expected day.":["We"],"expected not":["because"],"expected order,":["which"],"expected result.":["Try"],"expected students":["rather"],"expected the":["keys","exercises"],"expected to":["be","by","a"],"expected value":["be"],"expected weekday":["number"],"expecting `@judd`":["and"],"expecting a":["certain","particular"],"expecting anything":["else."],"expecting it":["to"],"expecting the":["new"],"expecting to":["see."],"expects a":["list"],"expects the":["matching","first"],"expects/requires that":["you"],"expense of":["readability."],"expense would":["be"],"expensive operation":["(and"],"expensive than":["downcase)","it"],"expensive to":["calculate"],"expensive. Like":["manute"],"expensive. Maybe":["you"],"experience :)":["Takes"],"experience here":["so"],"experience in":["Erlang"],"experience with":["Elixir","functional"],"experience writing":["specs,"],"experience, `decide`":["would"],"experienced developers":["because"],"experienced developers.":["Much"],"experienced with":["TCO"],"experiences @bailee!":["I"],"experiment though,":["that's"],"experiment with":["an","OTP,"],"experiment, if":["the"],"experimenting with":["parentheses"],"expert on":["these"],"expert, but":["I","I've","I"],"explain an":["important","important","important"],"explain how":["String.upcase"],"explain in":["the"],"explain my":["perspective"],"explain the":["domain","odd","reason"],"explain their":["purpose","meaning"],"explain this":["to"],"explain what":["makes","those"],"explain why":["I"],"explain your":["choice","thinking."],"explained it":["well,","made"],"explained the":["inspect"],"explaining it":["clearly."],"explaining it)":["that"],"explaining myself":["clearly"],"explaining, I":["noticed"],"explains the":["lengthy","difference"],"explanation easier":["to","to","to","to","to"],"explanation of":["tail"],"explanation you":["should"],"explanation). For":["a"],"explanation, I":["will"],"explicit Enum.map":["by"],"explicit about":["HashDict.new!"],"explicit anonymous":["function"],"explicit arguments,":["for"],"explicit by":["moving"],"explicit case":["the"],"explicit check":["to"],"explicit conditional":["code."],"explicit function":["here","syntax"],"explicit group":["capturing."],"explicit if":["the"],"explicit in":["that"],"explicit inline":["functions,"],"explicit listing":["of"],"explicit lists":["and"],"explicit module":["names","names","references"],"explicit purpose":["is"],"explicit recursion":["could","here,","in","it's","(`do_count`)","on","to","like","by","can","when","you"],"explicit recursion,":["it"],"explicit recursion.":["As","Explicit","Did","If"],"explicit step":["in"],"explicit test":["for"],"explicit the":["fact"],"explicit values.":["What"],"explicit, but":["`&(&1+1)`","instead","it"],"explicit, declarative":["nature"],"explicit, in":["my"],"explicit, not":["sure"],"explicit. Some":["libraries"],"explicitly anywhere":["in"],"explicitly applying":["them."],"explicitly assigning":["it"],"explicitly call":["`rain_music`"],"explicitly checking":["for"],"explicitly concatenating":["a"],"explicitly converting":["to"],"explicitly declaring":["an"],"explicitly define":["`sing/1`."],"explicitly delimited,":["like"],"explicitly export":["the","them."],"explicitly for":["Elixir).","A-Z"],"explicitly including":["`[`"],"explicitly listing":["the"],"explicitly mention":["the"],"explicitly naming":["the"],"explicitly needed":["(as"],"explicitly passed":["to"],"explicitly recursive":["functions,"],"explicitly referring":["to"],"explicitly saying":["String.length/1."],"explicitly stated":["in"],"explicitly the":["wrong"],"explicitly to":["use"],"explicitly use":["`Regex.match?/2`"],"explicitly using":["String"],"explicitly, I'll":["give"],"explicitly, but":["it's"],"explicitly, except":["for"],"explicitly, for":["example"],"explicitly, then":["I"],"explicitly. It":["adds"],"explicitly... just":["trying","makes"],"explicitly: `&{&1,":["0}`."],"explicitness is.":["I"],"exploding and":["expanding."],"explore more":["parts"],"explore the":["[docs"],"explored too":["much"],"explores your":["suggestion."],"exploring different":["options"],"exploring more,":["but"],"exploring. Regexes":["are"],"exploring/learning the":["core"],"export `Teenager.shouting?`":["etc?"],"export the":["attribute."],"exported, too,":["as"],"expose a":["public"],"expose the":["implementation","relevant"],"expose your":["constant"],"exposed as":["part"],"exposed than":["needs"],"exposes much":["of"],"exposing the":["way","internal"],"exposing your":["internals."],"expr special":["form"],"express `concat`":["in"],"express a":["little"],"express it":["quite","more"],"express that":["map"],"express the":["intent","`predicate_and?`"],"express those":["conditions?"],"expressed as":["`Stream.map"],"expressed clearly":["the"],"expressed more":["simply"],"expressed with":["`Enum`"],"expresses a":["domain"],"expresses intention.":["While"],"expresses the":["intent"],"expresses. Often":["there's"],"expressing that":["uses"],"expression (`&`)":["that"],"expression (which":["is"],"expression `%r/p{L}/u`?":["Having"],"expression as":["a"],"expression btw":["(using"],"expression but":["I"],"expression can":["also"],"expression for":["silence","this"],"expression in":["pipeline","a","a","one","the","this"],"expression inline":["like"],"expression inside":["the"],"expression is":["a"],"expression matching":["in"],"expression of":["the","the","the","the","the"],"expression on":["the"],"expression rather":["than"],"expression remove":["the"],"expression so":["this"],"expression there":["to"],"expression though,":["it's"],"expression to":["be"],"expression with":["Elixir"],"expression without":["if"],"expression, I":["feel"],"expression. They":["are"],"expression. `String.strip`":["will"],"expression: `&[function.(&1)":["|"],"expressions `&(&1+1)`":["there"],"expressions allowed":["to"],"expressions are":["important.","run","powerful"],"expressions as":["well,"],"expressions before":["those"],"expressions but":["thats"],"expressions has":["always"],"expressions if":["you","you"],"expressions in":["a","elixir."],"expressions is":["important"],"expressions like":["`round","`&(&1","`&(&1"],"expressions occur":["in"],"expressions than":["necessary."],"expressions that":["combine"],"expressions using":["only"],"expressions very":["effectively,"],"expressions with":["`true`"],"expressions, but":["I"],"expressions, for":["example"],"expressions, not":["just"],"expressions, the":["first"],"expressions, though":["it's"],"expressions. For":["example"],"expressions. Thanks":["for"],"expressions. The":["fact"],"expressions? Most":["of"],"expressive argument":["names."],"expressive as":["is,"],"expressive by":["reducing"],"expressive function":["name"],"expressive names.":["Try"],"expressive this":["is."],"expressive variable":["name.","and","names"],"expressive way":["to"],"expressive when":["it"],"expressive with":["methods"],"expressive, but":["it"],"expressive, even":["though"],"expressive. However,":["for"],"expressive/clear to":["do"],"expressiveness and":["readability"],"expressiveness overall,":["though,"],"extend the":["chaining,"],"extended (i.e.":["yelling"],"extended readability":["of"],"extends rather":["than"],"extension by":["refusing"],"extension of":["\u003ccode\u003eBitString\u003c/code\u003e"],"external variable.":["So"],"extra `count_word`":["function"],"extra accumulator":["parameter"],"extra characters":["from"],"extra check":["that"],"extra check.":["You","You"],"extra closing":["parenthesis"],"extra delimiters":["and"],"extra line":["that"],"extra lines.":["Looks"],"extra mile":["with"],"extra module":["kind"],"extra module.":["Bob"],"extra newline":["after","in","from"],"extra newlines":["in"],"extra parameters":["needed"],"extra parens":["around"],"extra piece":["of"],"extra processing":["to"],"extra space":["on","before"],"extra steps":["of"],"extra test":["made"],"extra trailing":["newline"],"extra twist":["that"],"extra virtue":["of"],"extra work":["at"],"extract \"Enum.sort\"":["into"],"extract `?T`and":["`?U`"],"extract `downcase_anagrams?`":["into"],"extract `seconds_in_earth_year`":["into"],"extract functions":["out"],"extract it":["out"],"extract method":["would"],"extract methods":["according","to"],"extract private":["functions"],"extract some":["private"],"extract that":["inline"],"extract the":["filter","matches","logic","other","individual","other","conditions","`String.length(text)","checks","reduce","words,","string","anonymous","conditions","\"Verse\"","code","characters","conditions","first","parts","letter","letter"],"extract them":["into"],"extract your":["checks"],"extract_nucleotide(List.wrap(nucleotide)) |&gt;":["Enum.count"],"extract_nucleotide(sequence, nucleotide)":["do"],"extract_words. This":["normalization"],"extracted a":["method","well-named"],"extracted into":["a","private"],"extracted it":["out"],"extracted separate":["functions"],"extracted some":["of"],"extracted the":["logic","reduce","`Word`"],"extracting conditions":["to"],"extracting private":["functions"],"extracting responses":["to"],"extracting some":["helper"],"extracting the":["conditions","conditional","conditions","checks","filtering","conditions","anonymous","logic","words"],"extracting them":["just"],"extracting those":["conditions"],"extracting well-named":["private"],"extracting your":["checks"],"extracting? How":["would"],"extraction but":["it"],"extraction here.":["Still"],"extracts the":["common"],"extremely cheap)":["and","and"],"extremely large":["phone"],"extremely obvious":["here"],"eye out":["for"],"eye to":["scan"],"eye towards":["using"],"eyebrow at":["that"],"eyes. My":["solution"],"eyes. You":["could"],"f), do:":["reduce(t,","reduce(t,"],"f, acc)":["do"],"f.(h) -\u003e`,":["though,"],"f.(h) do":["[h"],"f.(h, acc),":["f)","f)"],"f.(head) -\u003e":["["],"facilitates bad":["code"],"facilities, I'll":["look"],"fact I":["find"],"fact all":["of"],"fact be":["implemented","implemented"],"fact implement":["a"],"fact it's":["often"],"fact mark":["it"],"fact perhaps":["better),"],"fact that":["the","elixir","a","they","there's","it","it's","the","swapping","you","`#{}`","tests","it's","it","both","you're","the","the","I","this","ExUnit"],"fact(0), do:":["1"],"fact(n -":["1)"],"fact(n), do:":["n"],"fact, that":["I","I"],"factor found":["may"],"factor out":["the","the","the"],"factor that":["in,"],"factor them":["out?"],"factored into":["a"],"factored out":["that"],"factored this":["out"],"factorial function,":["you"],"factoring out":["common"],"factors (same":["O(n"],"factors and":["their"],"factors list).":["I"],"factors, but":["maybe"],"fail for":["an"],"fail if":["the","it"],"fail in":["the"],"fail on":["an","an","a"],"fail to":["see","exclude"],"failed a":["test"],"failed to":["rewrite","post","help"],"failed whenever":["the"],"failed. Jumping":["between"],"failing and":["it"],"failing tests":["because"],"failing tests,":["as"],"fails 2":["tests,"],"fails but":["`String.to_char_list!`"],"fails if":["you","an"],"fails it":["won't"],"fails on":["the"],"fails the":["test","\"no"],"fails to":["case-insensitively","take"],"fails with":["`**"],"failure and":["discovering"],"failure messages":["much"],"failure of":["imagination"],"fair behavior,":["there's"],"fair bit":["of","of"],"fair point,":["even"],"fairly common":["task."],"fairly digestible":["mentally,"],"fairly efficient":["since"],"fairly good":["approach."],"fairly good.":["I"],"fairly hard":["to"],"fairly new":["to"],"fairly nitpicky":["things,"],"fairly quick":["and"],"fairly simple":["thing"],"fairly simply":["in"],"fairly straightforward":["exercise"],"fairly ugly,":["though."],"fall back":["on"],"fall over":["that"],"fall to":["the"],"falls into":["a"],"false (which":["is"],"false -\u003e":["case"],"false end`":["is"],"false felt":["unnecessary."],"false for":["me,"],"false if":["silence?(letters)`"],"false positives":["if"],"false respectively":["and"],"false then":["the"],"false. I":["suspect"],"false. To":["check"],"false. Works":["for"],"false` since":["you"],"false`. Dave":["Thomas'"],"falsy result.":[":)"],"falsy value)":["if"],"familiar enough":["with","with"],"familiar with":["elixir","Elixir","how","the","`String.ends_with?`?","the","parallel","the","how","Elixir.","the","the","tested","erlang.","recursion","iolist_to_binary.","its","tail"],"family iMac,":["I"],"fan of":["the","the","putting","only","this","Regex,","`is_`","having","elixir's","the","how","expressions","attributes","the","my","\"apply_accumulate\""],"fancy `HashDict`":["constructor!"],"fancy way":["to"],"fancy, as":["simple"],"fantastic idea":["and"],"far I":["think"],"far and":["misses"],"far as":["I","the","the","abstracting","your","how","I'll","using","the","whether","your","what","the","why","the","going","this","the"],"far cleaner":["implementation"],"far from":["succinct"],"far has":["touched"],"far my":["biggest"],"far the":["exercises","cleanest"],"far, because":["it"],"far, but":["I"],"far, could":["you"],"far, far":["cleaner"],"far, google":["has"],"far. I":["wanted"],"farthest ahead":["in"],"fascinated_spock.jpg; this":["works!"],"fast and":["easy."],"fast as":["building","well,"],"fast, I":["tend","couldn't"],"fast, is":["kinda"],"faster (as":["the"],"faster (no":["protocol"],"faster code":["you"],"faster computationally":["but"],"faster concurrent?":["Is"],"faster in":["the"],"faster programs":["since"],"faster than":["building","`String.graphemes`.","`String.graphemes`","`String.scan(%r/\\p{L}/)","`cond`"],"faster to":["do"],"faster too":["(not"],"faster version":["of"],"faster, they":["just"],"faster. If":["you"],"fault handling":["behaviour"],"fault handling,":["do"],"fault you":["for"],"fault you.":["Since"],"favor breaking":["between"],"favor of":["optimizing","`String.strip`."],"favored API.":["I"],"favored line-break":["point"],"favorite operator,":["absolute"],"favour of":["Regex.match?"],"favour this":["type"],"fear I":["might"],"fearing that":["the"],"feature article),":["it"],"feature in":["elixir"],"feature that":["I"],"features just":["because"],"features makes":["this"],"features of":["the","Elixir"],"features or":["the","the"],"features they":["use."],"fed it":["1000","a"],"feedback @sage":["and"],"feedback I":["got"],"feedback about":["naming"],"feedback also":["welcome"],"feedback and":["for","the","even","the"],"feedback as":["always,"],"feedback by":["@rico"],"feedback from":["[rin](http://exercism.io/rin)","both","the"],"feedback guys.":["Forgot","I've"],"feedback if":["this"],"feedback lately,":["but"],"feedback on":["this","the","stuff","stuff","which","this.","this.","cleaning","other","this,","the","that,","this.\"","how"],"feedback pminten,":["the"],"feedback than":["on"],"feedback this":["has"],"feedback when":["they","you"],"feedback with":["Elixir."],"feedback you":["gave"],"feedback! Good":["call"],"feedback! I":["moved","have","*really*","like","tried","was","was"],"feedback! I'm":["pretty"],"feedback! I've":["submitted"],"feedback! Submission":["updated..."],"feedback! That":["will"],"feedback, @antonette.":["Nice"],"feedback, @bridie.":["I"],"feedback, @juston.":["I"],"feedback, @khalid.":["My"],"feedback, @mary.":["In"],"feedback, I":["did","didn't"],"feedback, I'm":["looking"],"feedback, I've":["submitted"],"feedback, as":["I"],"feedback, moving":["on"],"feedback, on":["either"],"feedback, thank":["you"],"feedback, this":["just"],"feedback, you're":["right"],"feedback. Do":["you"],"feedback. I":["submitted","think","have","submitted","submitted","made","just","really","really","had","messed","was","will","spent","agree,","will","will","uploaded","uploaded","debated"],"feedback. I'm":["not"],"feedback. I've":["pushed","submitted","submitted"],"feedback. It":["tried"],"feedback. Just":["curious,"],"feedback. Moving":["on!"],"feedback. My":["first"],"feedback. Revision":["coming."],"feedback. Thank":["you."],"feedback. Thanks":["again."],"feedback. That":["makes"],"feedback. The":["first"],"feedback. This":["is","is","solution"],"feedback. Waiting":["for"],"feedback. Yes,":["I"],"feedback....gotta get":["used"],"feedback: I":["would"],"feedback; I":["agree","really"],"feedbacks unfortunately":["I'm"],"feeding what's":["on"],"feeds into":["the"],"feel \"functional\"":["enough;"],"feel `blank?`":["is"],"feel about":["that","containing","doing","making","vertical","them.","this."],"feel as":["natural"],"feel better":["about"],"feel dirty":["though."],"feel dumb":["for"],"feel for":["what","conventions."],"feel free":["to","to","to","to","to"],"feel irrelevant":["but"],"feel is":["pretty"],"feel it":["reads"],"feel like":["you're","conceptually","it","a","the","steering","you","I","there","it's","there","it's","lines","Enum.reduce","different","I","I","I've","`s","it","something","there","there","there","shining","pattern"],"feel more":["Elixir-like","natural"],"feel of":["the"],"feel quite":["right."],"feel right":["in"],"feel right.":["I'd"],"feel that":["the","this","it's"],"feel that,":["especially"],"feel the":["same","need","need","tests"],"feel this":["is","is"],"feel to":["me"],"feel, however,":["that"],"feeling about":["what"],"feeling of":["where"],"feeling there's":["a"],"feeling you've":["got"],"feeling. Look":["into"],"feels a":["bit","lot","little","little","bit","wee","little","little","little"],"feels better":["in","to"],"feels better.":["I"],"feels good":["indeed!"],"feels like":["a","I'm","overkill","the","it's","overkill","I'm","it's","a","micro","micro","a"],"feels more":["straightforward."],"feels nicer":["to"],"feels odd":["about"],"feels oddly":["like"],"feels pretty":["natural"],"feels quite":["straightforward,"],"feels really":["odd.","sluggish"],"feels super":["natural."],"feels tempting":["in"],"feels the":["cleanest","most"],"feels too":["invasive"],"feels ugly,":["and"],"feels very":["generic.","boilerplatey","appropriate"],"feels weird":["to"],"fell swoop":["as"],"fell swoop.":["If"],"felt could":["be"],"felt easy":["to"],"felt inspired":["to"],"felt it":["was"],"felt like":["there","it","stopping?","it","the","it","I","this"],"felt more":["modular","direct"],"felt natural,":["it's"],"felt that":["was","front"],"felt the":["sorted"],"felt this":["was"],"felt to":["me"],"felt very":["verbose."],"fence whether":["I"],"fetch elixir":["zipper'"],"fetch' doesn't":["get"],"fetch? Make":["sure"],"fetch` again":["to"],"fetch` to":["grab"],"fetched the":["exercise."],"few additional":["tips:"],"few comments":["on"],"few comments:":["You"],"few days":[";)","and","off"],"few days,":["so"],"few efficiency":["improvements"],"few elixir":["solutions"],"few exercises":["you"],"few functions":["are","that"],"few hd":["functions"],"few hours":["of"],"few hours,":["I"],"few lines":["of"],"few little":["things"],"few minor":["things","things:"],"few months":["it"],"few more":["comments","abstractions"],"few moving":["parts"],"few of":["the"],"few options":["to"],"few other":["interesting","nitpicks:","issues"],"few programs":["support"],"few questions":["for","though"],"few regexes":["as"],"few small":["remarks:","things:"],"few steps":["into"],"few things":["by","with","you","though:"],"few times":["with","in"],"few times.":["version","That"],"few tutorials":["I've"],"few very":["minor"],"few ways":["to","and"],"few weeks":[";)"],"few weird":["regexes:"],"few with":["a"],"fewer lines":["of"],"fiddled around":["with"],"field just":["to"],"fiendish one,":["yes."],"fifth code":["block."],"fifth_date &&":[":calendar.valid_date(fifth_date)",":calendar.valid_date(fifth_date)"],"fifth_date =":["dow_in_range(unquote(1+4*7),","dow_in_range(unquote(1+4*7),"],"figure it":["out","out.","out","out"],"figure out":["how","how","a","pattern","how","how","how","what","String.split.","what","why...","how","this","which","how","how...and","how","how","how","a","how","how","how","the","how","how","a","how!"],"figure out,":["Elixir/Erlang","how"],"figure out.":["I"],"figure the":["required"],"figure them":["out"],"figure this":["out."],"figured I":["would","had"],"figured it":["out","might"],"figured out":["the"],"figured since":["I"],"figured this":["was","version","was"],"figuring list":["comprehensions"],"figuring out":["how","actual","things","how"],"figuring that":["regex"],"file and":["run","do"],"file match":["this?"],"file name":["as"],"file roman.exs":["=="],"file that":["only"],"file when":["I"],"file without":["the"],"file. Very":["minor"],"files as":["it's"],"files with":["`|\u003e`"],"fill in":["a"],"filler functions":["directly."],"filter ::":["(any"],"filter and":["count","reduce","map","map?"],"filter are":["not","not"],"filter before":["the"],"filter doesn't":["modify"],"filter empty":["strings"],"filter for":["empty"],"filter function":["so","might","easier","call"],"filter has":["quadratic"],"filter implementation,":["but"],"filter instead":["of"],"filter is":["mostly"],"filter just":["compares"],"filter on":["line","line"],"filter or":["reduce","sort?"],"filter out":["which","the","anything","what"],"filter the":["input"],"filter thing":["makes"],"filter with":["`contains_all_chars?`","the"],"filter would":["be"],"filter\". From":["a"],"filter([head |":["tail],"],"filter, (filter":["-\u003e"],"filter, I":["went"],"filter, comprehensions":["are"],"filter, which":["is"],"filter. Finally,":["the"],"filter. I'll":["go"],"filter/reject operations?":["For"],"filter? That":["might"],"filter_map, I":["can"],"filtering blank":["strings"],"filtering function":["by","definition","which"],"filtering functions":["so"],"filtering operation":["to"],"filtering out":["the"],"filtering problem":["and"],"filters don't":["behave"],"filters, one":["for"],"fin de":["nom"],"final note":["about"],"final step":["of"],"final style":["question"],"final test":["case","only"],"finally I":["went"],"finally decided":["that"],"finally found":["this"],"finally get":["something"],"finally managed":["to"],"finally think":["I"],"finally turned":["into"],"finally used":["one"],"finally went":["with"],"find 100,":["subtract"],"find Keyword.keyword?":["until"],"find `List.flatten/1`":["more"],"find `String.ends_with?`":["to"],"find `silent?(input)`":["more"],"find a":["way","proper","better","better","way","more","way","way","simple","way","way","less","way","way.","working","value","better","better","different","solution"],"find an":["alternative","`else","alternative","example","inbuilt","elegant"],"find another":["way."],"find any":["document","call","non-regex"],"find anything":["to","that","to","suitable","wrong"],"find attributes":["and"],"find docs":["on"],"find easier":["to"],"find empty":["strings."],"find files":["with"],"find great":["improvements."],"find in":["elixir"],"find it":["a","much","helpful","confusing","brings","to","weird,","a","in","a","a"],"find many":["resources"],"find most":["appropriate):"],"find much":["to"],"find myself":["looking","wondering","writing"],"find one":["here:"],"find one.":["I","Also,"],"find out":["quickly","that","about","how"],"find pipelining":["useful"],"find question":["mark"],"find some":["help"],"find something":["I","like"],"find that":["the","the","makes","elixir","elixir's","you","there","in","it's"],"find the":["right","most","last","`s`,","actual","List","imported","appropriate","&","code","single-line","one","number","functions","lowest"],"find them":["when"],"find this":["version"],"find those":["optimal"],"find to":["be"],"find value":["in"],"find yourself":["using","using"],"find, so":["I"],"find. At":["the"],"finder any":["time"],"finding Elixir":["a"],"finding a":["better","way","solution."],"finding any":["meaningful"],"finding anything":["so"],"finding anything.":["Probably"],"finding it":["difficult","hard"],"finding my":["way","\"style\"."],"finding solutions":["that"],"finding that":["bug."],"finding these":["things?"],"fine (in":["fact"],"fine ,":["I"],"fine -":["it"],"fine and":["also"],"fine as":["well.","well."],"fine between":["lists,"],"fine but":["given"],"fine for":["this","all","almost","relatively"],"fine here,":["however."],"fine little":["constructor"],"fine to":["chain","use","write"],"fine too,":["you've"],"fine too.":[":)"],"fine with":["`Regex.scan/2`.","`codepoints`","UTF-8"],"fine without":["it."],"fine, I":["meant"],"fine, `?é`":["doesn't."],"fine, but":["I"],"fine, i":["think"],"fine, in":["fact"],"fine, just":["feels"],"fine. Alternatively":["`lc"],"fine. I":["assumed","don't","was"],"fine. I'd":["tend"],"fine. It's":["just"],"fine. Not":["for","sure"],"fine. Of":["course,"],"fine. You":["might"],"fine. `Regex.scan`":["indeed"],"fingerprint of":["another"],"finish the":["problem."],"finished my":["race"],"finished so":["you"],"finished the":["exercise"],"finished watching":["the"],"finished yet.":["I"],"finished, but":["wanted"],"finished, won't":["let"],"finishes. I":["_am"],"fire up":["iex"],"fired up":["iex"],"first +":["7","7","14"],"first ,":["and"],"first 2":["goals,"],"first Elixir":["ever!","exercise."],"first I":["wasn't","thought","thought","used"],"first `hey/1`":["function"],"first and":["then","private","turns","removing","then","then","second"],"first append":["is"],"first approach":["but"],"first argument":["to","of","provided","to","to","in","to","(it's","to"],"first argument.":["Much"],"first assignment":["comes"],"first attempt":["was","is"],"first attempt,":["to"],"first bit":["of","of"],"first but":["Enum.count/2"],"first case":["would"],"first case.":["Coming"],"first check":["in"],"first code":["is","being","ever","I've"],"first condition":["also?"],"first contact":["with"],"first convert":["to"],"first day":["learning","of"],"first definition":["will"],"first did":["this"],"first doctest,":["as"],"first element":["(head),","had"],"first element.":["`elem(t,"],"first elixir":["code","code,"],"first exercise":["of"],"first exercise,":["and"],"first feels":["like"],"first few":["elixir"],"first find":["100,"],"first five":["characters?\","],"first foray":["into","into"],"first functional":["language,"],"first generator.":["Nice!"],"first go":["at"],"first implementation":["to","was"],"first instinct":["as"],"first is":["1\""],"first it":["can","is"],"first iteration":["was","on","actually","worked.","(where"],"first iteration,":["with"],"first iteration.":["This","Have"],"first just":["with"],"first level":["could"],"first list":["(in"],"first macro.":["I"],"first make":["sure"],"first makes":["a"],"first match":["wins"],"first matching":["character)."],"first of":["all","course"],"first on":["readability/maintainability"],"first one":["is","would"],"first one,":["and","and"],"first or":["last"],"first page":["of"],"first param":["inside"],"first param,":["which"],"first parameter":["position.","to","for","(forgive"],"first params":["to"],"first part":["of"],"first pass":["at","to"],"first passes":["used"],"first place":["and"],"first place.":["Perhaps"],"first point,":["it'll","yeah,"],"first practical":["explanation"],"first program":["ever"],"first pull":["request"],"first quiet?/1":["clause"],"first raw":["implementation"],"first run":["at"],"first sight":["but"],"first solution":["may","incorporated","that","that"],"first sort":["the"],"first special":["case"],"first stab":["at"],"first start":["with"],"first step":["of","would","yourself","would"],"first strand":["is","before"],"first strand.":["So,"],"first submission":["as","for"],"first submission.":["It","I"],"first submitted":["this"],"first test":["is","error"],"first that":["makes"],"first the":["filter"],"first thing":["is","I","on"],"first thought":["was"],"first time":["I","I've","I've","I've","users","I've"],"first time.":["I'll"],"first time:":["repeated","repeated"],"first to":["simplify","convert","point"],"first try.":["You"],"first two":["conditions"],"first unsubmitted":["solution"],"first value":["of"],"first version":["is","of","of",":)","of","of","is."],"first version.":["I","It","My"],"first versions":["I've"],"first you":["get"],"first) argument":["due","due"],"first). I":["thought"],"first, and":["the"],"first, but":["the"],"first, doesn't":["really"],"first, hence":["my"],"first, i.e.":["loading"],"first, like":["`send`ing"],"first, or":["at"],"first, then":["changing"],"first. But":["I'll"],"first. From":["what"],"first. I'll":["do"],"first. Next":["after"],"first. Then":["you"],"first/second_line and":["verse"],"first? 'cause":["then"],"first_couplet and":["second_couplet"],"fish blue":["fish\"","fish\"","fish\""],"fish red":["fish","fish","fish"],"fish two":["fish","fish","fish"],"fit all":["of"],"fit as":["well","naturally"],"fit better,":["in"],"fit for":["line"],"fit here":["than"],"fit if":["I"],"fit in":["with","80","a"],"fit in.":["I"],"fit it":["in"],"fit on":["one"],"fit right":["in."],"fit the":["mold","question","domain","domain","domain"],"fit to":["me,"],"fit with":["the","the"],"fit. A":["statement"],"fits more":["naturally."],"fits on":["one"],"fits quite":["as"],"fits the":["task","problem."],"five characters?\",":["etc),"],"fix all":["of"],"fix but":["I"],"fix it":["and","for"],"fix it.":["I"],"fix that":["is","bad","by"],"fix the":["problem","typo","`has_letters`","example"],"fix them":["in"],"fix these":["issues"],"fix this":["-"],"fix to":["go"],"fix, so":["I"],"fixed a":["couple"],"fixed are":["the"],"fixed is_shouting?":["so"],"fixed now,":["all"],"fixed the":["`1,"],"fixed up":["the"],"fixes that":[":)."],"flag }":["-\u003e"],"flag), do:":["[allergy],"],"flag_set(score, flag),":["do:"],"flagged for":["one"],"flagged it":["for"],"flat list":["already."],"flat_map and":["decided","map_reduce.","map","filter,"],"flat_map) and":["some"],"flat_map/join that":["I"],"flat_map? Odd.":["Enum.reduce(input,"],"flatten I":["get"],"flatten after,":["so"],"flatten before":["reducing,"],"flatten in":["`consolidate`"],"flatten since":["the"],"flatten step.":["I"],"flatten the":["returned"],"flatten which":["I"],"flatten) `Stream.concat`":["might"],"flattening I":["was"],"flattening and":["joining."],"flattening since":["otherwise"],"flattening the":["result","result"],"flattens the":["logic"],"flexible (for":["example"],"flexible and":["easier"],"flexible enough":["to"],"flexible may":["not"],"flexible solution":["than","than"],"flipping to":["next."],"float and":["that"],"float to":["an"],"floating point":["number."],"flow as":["per"],"flow becomes":["obvious."],"flow control":["unless"],"flow mechanism":["for"],"flow of":["things"],"flow operator":["that"],"flow you":["have"],"flow. Have":["you"],"flowed similarly,":["with"],"flurry of":["submitting"],"fn ({a,":["b})"],"fn -\u003e":["variety"],"fn [w],":["d"],"fn _":["-\u003e"],"fn anagram":["-&gt;"],"fn and":["capture"],"fn are":["'-\u003e'"],"fn char":["-\u003e"],"fn in":["frequencies"],"fn l,":["acc","acc","acc"],"fn notation":["helps"],"fn nt,":["counts"],"fn that's":["already"],"fn to":["handle","use"],"fn word":["-\u003e"],"fn word,":["tally","dict"],"fn x":["-\u003e"],"fn x,":["acc"],"fn {":["chars,","allergy,"],"fn's but":["had"],"fn([word], acc)":["-\u003e"],"fn(_, roster,":["_)"],"fn(acc, l)":["-\u003e"],"fn(c) -\u003e":["c"],"fn(candidate) -&gt;":["is_anagram(word,"],"fn(count) -\u003e":["\"#{verse(count)}\\n\""],"fn(n) -\u003e":["..."],"fn(test_same) -&gt;":["String.downcase(test_same)"],"fn(v1, v2)":["-&gt;"],"fn(value) -\u003e":["value"],"fn(x) -&gt;":["x","x+1"],"fn(x) -\u003e":["!function.(x)","1"],"fn(x, song)":["-\u003e"],"fn, which":["is"],"focus on":["what","it.","trying"],"focus too":["much"],"focus was":["to"],"focused in":["the"],"focused on":["performance","what"],"focused small":["functions,"],"focusing on":["the"],"fold (`reduce`)":["over"],"fold for":["binaries"],"fold on":["the","the"],"fold or":["reduce","a"],"fold requires":["the"],"fold them":["into"],"fold) pattern.":["You"],"folding concat":["concatenating","concatenating"],"folding over":["`append`"],"folding the":["two","`a"],"folding with":["append)."],"foldl ```":["method"],"foldl is":["not"],"foldr here,":["since"],"foldr instead":["(which"],"follow a":["method"],"follow common":["interface."],"follow conventions":["---"],"follow crazymykl's":["suggestion"],"follow in":["your"],"follow the":["requirements","normal","logic"],"follow this":["paradigm."],"follow up":["on"],"follow you.":["Would"],"follow, although":["it's"],"follow, but":["there"],"follow. Any":["suggestions"],"followed Erlang's":["(or"],"followed a":["similar"],"followed by":["a","`String.length`","`Dict.put`"],"followed that":["model."],"followed the":["installation","spirit"],"following (I":["wish"],"following Ruby":["when","when"],"following Ruby.":["Also,"],"following are":["all"],"following link":["very"],"following some":["helpful"],"following the":["advices.","code","single","crowd"],"following trick":["is"],"following up.":["I'll",":"],"following your":["previous","suggestions"],"follows the":["Ruby"],"font, you'll":["see"],"foo(1), do:":["..."],"foo(a, b":["//"],"foo(bar) when":["bar"],"foo(x) when":["x"],"foo, do:":["...`"],"food for":["thought."],"fool you":["--"],"footsteps and":["stay"],"for \"":["\"."],"for \"!\"":["in","is"],"for \"\"":["as"],"for \"Cond\"":["on"],"for \"for\")":["because"],"for \"for\";":["2"],"for \"forceful\"":["sentences"],"for \"function":["value"],"for \"get":["out\",","out\""],"for \"is_\",":["at"],"for \"split_words\"":["and"],"for #anagram_for?":["and"],"for #lexical_sort":["to"],"for #prepare_entry":["for"],"for &amp;":["lambdas"],"for &amp;1":["+"],"for (1)":["splitting"],"for (I've":["submitted"],"for -1":["that"],"for 100":["words"],"for 2":["parameters"],"for \u003ccode\u003eempty?\u003c/code\u003e":["and"],"for \u003ccode\u003eis_anything_else?(_)\u003c/code\u003e.":["I"],"for ?":["in"],"for A-Z":["and"],"for Algebra,":["that"],"for Code.eval_quoted":["and"],"for Elixir":["and","style","and"],"for Elixir).":["So"],"for Elixir,":["as","following"],"for Elixir.":["I"],"for Enum.count":["is"],"for Enum.filter_map":["which"],"for Enum.reduce.":["I","An"],"for ExUnit,":["so"],"for Great":["Good](http://learnyousomeerlang.com),"],"for Regex.scan":["but"],"for Regex.scan/2.":["&("],"for Ruby":["on","code,"],"for Ruby's":["`reduce(:+)`!"],"for SHOUTING.":["Think"],"for String":[":"],"for String.":["\u003cfacepalm"],"for String.length(input)":["=="],"for _hey()":["to"],"for `\"1,":["2,"],"for `&amp;(anagram?(word,":["&amp;1))`"],"for `?T":["`return"],"for `?T`,":["and"],"for `@jamar`":["to"],"for `Enum.count/2`:":["http://elixir-lang.org/docs/stable/"],"for `Enum.flat_map`":["and"],"for `HashDict`":["values"],"for `Range[first:":["x,"],"for `Regex.replace/3`":["gives"],"for `Statement.nothing?(nil)`":["?"],"for `Stream.filter":["|\u003e"],"for `String.upcase/1`":["and"],"for `True`":["called"],"for `\\w+`":["rather"],"for `\\w`":["an"],"for ```silence?```":["is"],"for `action`":["and"],"for `anagram?`":["and"],"for `build_dictionnary`.":["Thanks."],"for `cond`!":["As"],"for `count`":["but"],"for `downcase`":["in"],"for `dsl_to_dict`.":["A"],"for `foo([do:":["bla])`"],"for `foo(do:":["bla)`,"],"for `generate`":["I"],"for `hey/1`.":["Have"],"for `if`,":["and"],"for `increment_counter([key]`":["and"],"for `is_all_caps?`":["(I"],"for `is_silence?`":["before"],"for `list`":["first,"],"for `map`":["and","and","and"],"for `new`)":["but"],"for `nil`":["being"],"for `normalize`":["altogether,"],"for `occurrences`.":["You're"],"for `question?`":["and"],"for `same_word?`":["."],"for `shout?`":["because"],"for `silence?()`.":["You'll"],"for `silence?`":["in"],"for `sing`":["expect"],"for `sort_chars`":["or"],"for `sorted_letters`,":["but"],"for `test_only_numbers`":["as"],"for `verse`?":["(consider"],"for `word":["=="],"for `words/1`":["seems"],"for a":["moment","better","separate","empty","teenager.","variable.","more","very","long","first","way","function","cartesian","lot","small","nil","better","question","way","single","string","String","bit","reason","few","readable","reason,","way","day","string,","binary","general","`Char`","macro","macro","single","one","good","function.","reason,","number","bit","call","constant.","bit","private","while,","few","map/reduce,","long","link","hint","rather","list","list","simpler","list","list","large","huge","helper","function","few","function","main","large","huge","large","function","large","huge","function","list","side","chance","good","second","lot","large","huge","large","huge"],"for accumulate":["and"],"for accumulators":["if"],"for all":["of","of","the","other","but","the","private","the","the","values","your","kinds","of","dictionary","kinds","the"],"for almost":["2","every"],"for an":["implementation","elixir","empty","empty","empty","empty","empty","empty","empty","empty","empty","empty","empty","answer.","exercise.","exercise","`if","input","`append`","append","append","update..."],"for anagram":["and"],"for anagrams":["expects"],"for and":["didn't","against"],"for anonymous":["functions?","functions.","functions","functions?","functions","inline"],"for another":["language","version","pass.","function."],"for any":["of","count","of","packed","mistakes","string","feedback","unicode"],"for approval,":["but"],"for approval.":["It"],"for arbitrary":["factors,"],"for arguments":["wont"],"for asking":["the"],"for bad":["reasons,"],"for beer-song.":["It's"],"for being":["brave","inconsistent"],"for better":["clarity."],"for binaries":["here.","if","since"],"for binary":["inputs\"."],"for blank.":["You"],"for boolean":["valued"],"for both":["the","`question?`","function","positions.","to"],"for bringing":["it"],"for by":["position"],"for capitals":["twice."],"for case":["differences.","in"],"for case-insensitively":["checking"],"for cases":["like"],"for catching":["the"],"for certain":["characters"],"for character":["lists!"],"for characters":["you"],"for checking":["for","the","the","to","complex"],"for clarity":["-"],"for collecting":["values"],"for color":["television)."],"for comments":["@keira","@gussie"],"for composing":["a"],"for comprehension.":["I"],"for conditional":["logic"],"for conditionally":["replacing"],"for confusion":["is"],"for consideration,":["but"],"for constants.":["It's"],"for consuming":["the"],"for days":["of"],"for days_in_gigaseconds":["so"],"for default":["condition."],"for defining":["anonymous"],"for dependency":["injection."],"for detailed":["feedback!"],"for detecting":["the","if"],"for determining":["whether","if","whether","yelled-ness."],"for different":["patterns","types"],"for discard":["the"],"for dispensing":["with"],"for do_collect_words/1,":["because"],"for doing":["point-free","inline","something.","things"],"for downcasing":["the"],"for each":["of","possibility.","clause","element","potential","case?","candidate?","element","transformation,","of","word.","possible","item","element","comparison.","comparison.","nucleotide","call.","word.","possible","stage.","of","of","element","candidate?","`candidate`.","list","entry","of","entry","world","entry","entry","case.","entry","pair?","case?"],"for efficiency":["reasons,"],"for efficient":["concatenation,"],"for either":["side."],"for elixir":["this"],"for elixir's":["`|&gt;`"],"for empty":["string","strings.)","string?","or","lists"],"for empty?":["be","be"],"for equality":["of"],"for equality.":["It","If"],"for escaping":["\"magic\""],"for even":["better"],"for every":["possible","item","responsibility","iteration","single","character.","line","candidate).","possibility.","nucleotide.","letter","candidate,","parent,","call"],"for everything":["but","else"],"for exactly":["the"],"for example":["I","`def","`Enum.zip`","here](http://elixir-lang.org/crash-course.html#function_syntax)):","a","when","at","`do_to_rna`","in","`String.ends_with?(word,","`do_filter`.","OCaml","`&hd/1`","`Regex.scan(...)","the","the"],"for example).":["The"],"for example,":["if","by"],"for example.":["I'd"],"for exclamation":["mark."],"for exercises":["you've"],"for expressing":["that"],"for extra":["colour..."],"for feedback!":["I"],"for feedback.":["Waiting"],"for finding":["that"],"for flat_map?":["Odd."],"for flow":["control"],"for fn":["word","to"],"for following":["up.","up."],"for foreign":["languages"],"for forgetting":["that"],"for frequency/1":["?"],"for function":["`validate/1`","application.","names!","calls","expressions","names."],"for functional":["programming,"],"for functions":["that","that"],"for functions:":["`name/arity`."],"for future":["readers","readers,","exercises."],"for generic":["stuff","naming"],"for get":["area_code"],"for getting":["the"],"for going":["the"],"for groups":["of","of","of"],"for handling":["other","things","the"],"for have":["a"],"for helpers.":["I'm"],"for helping":["me"],"for how":["hard","to","you"],"for huge":["numbers,","numbers,","numbers,","numbers,","numbers,","list"],"for if":["the"],"for improved":["line"],"for improvement.":["I"],"for improvements,":["could"],"for improving":["this"],"for in":["my","the","terms"],"for including":["a"],"for indentation.":["Regardless,"],"for input":["and","`\""],"for instance":["vars."],"for instance),":["and"],"for instance,":["`silence`."],"for internal":["use."],"for intersect/union/subtract/addition,":["so"],"for invalid":["UTF-8."],"for investigating.":["I"],"for is":["anagram"],"for is_blank?":["if"],"for it":["to","to","though.","in","to","though)."],"for it)":["can"],"for it,":["the","as"],"for it.":["\u003ccode\u003eHashDict.put()","So,","Trying",";)"],"for iterating":["over"],"for iterators":["in"],"for iterators,":["I"],"for joining":["the"],"for just":["containing"],"for keep":["and"],"for keeping":["it"],"for languages":["that"],"for large":["bodies"],"for laying":["out"],"for learning":["Elixir","Elixir","the"],"for legacy":["reasons)"],"for length,":["though,"],"for letters":["instead","(Unicode"],"for letting":["me","me"],"for line":["12.","35"],"for line2":["and"],"for lists":["but","of"],"for longer":["lines"],"for looking":["over"],"for macro's":["such"],"for macro's.":["For"],"for making":["`silence?`,","my"],"for match":["anagram"],"for matching":["a","a","unicode"],"for me":["and","because","is","to","as","it´s","though.","due","is","a","to","to"],"for me).":["Putting"],"for me,":["maybe","so"],"for me.":["This","Thanks","I",":)","The"],"for means":["to"],"for modularity's":["sake."],"for more":["info","complicated","often"],"for most":["experienced","simple"],"for multiple":["short"],"for my":["own","initial","own","taste,","taste.","custom"],"for naming,":["if"],"for nice":["error"],"for nil":["and","isn't","and","input","and"],"for nil,":["but","rather"],"for nil.":["It's"],"for non-ASCII":["characters.","characters"],"for non-whitespace":["characters","characters"],"for not":["same","making","reusing","being"],"for now":["=)","Elixir"],"for now.":["Thanks!"],"for numbers,":["but"],"for numbers-only":["and"],"for one":["of","of","of","I'd"],"for one-liner":["methods:"],"for other":["types","people.","functions?","ways"],"for our":["tests."],"for passing":["the"],"for pattern":["matching.","match","matching.","matching"],"for performing":["this"],"for pipeline":["expressions"],"for plain":["lists/tuples."],"for pointing":["that","that","out","the","me","that","that"],"for polymorphism":["which"],"for practice,":["I"],"for practice.":["I'll"],"for predicate":["methods","methods."],"for predicates.":["You"],"for private":["functions","methods"],"for production":["code"],"for public":["functions."],"for pulling":["a"],"for question?\".":["Care"],"for questions":["-"],"for random":["combinations"],"for range":["\u003chttps://github.com/elixir-lang/elixir/blob/v0.12.0/lib/elixir/lib/range.ex\u003e:"],"for ranges":["in"],"for readability.":["I","I'm"],"for really":["valuable"],"for reducing":["more"],"for referencing":["a"],"for referring":["to","to","to"],"for regex":["style"],"for relatively":["small"],"for remove":["`@rubie`"],"for repeated":["`case"],"for response":["the"],"for retrieving":["the"],"for russian":["yelling."],"for sameness.":["The"],"for scan":["and","only"],"for scanning":["so"],"for sharing":["your"],"for short":["functions"],"for shortening":["the"],"for shouting":["without"],"for sigils.":["Threw"],"for silence":["detection","from","from"],"for silence),":["and"],"for simple":["tasks,"],"for singing":["a"],"for single-expression":["functions,"],"for slice":["and"],"for slightly":["less"],"for slowless":["can"],"for small":["one-offs","functions","inputs","functions,"],"for so":["many","many"],"for some":["feedback.","reason","reason)","useful","more","small","random","feedback","reason","reason","of","reason","reason...","more","reason","reason","reason","reason"],"for someone":["learning"],"for something":["else.","like","so","else,","like","like"],"for sorting":["it."],"for space-age:":["http://exercism.io/submissions/c1fc255d0be5a82dbc0033d9."],"for speed,":["I"],"for splitting":["-"],"for spotting":["that."],"for statements":["is"],"for straight-forward":["one-liners."],"for straightening":["me"],"for string":["is","is","joining","matching."],"for strings":["of","that"],"for strings.":["I'm","`String.to_char_list!`","Strings","I"],"for stripping":["off"],"for subcategories":["too:"],"for submitting":["it!"],"for such":["cases","a","a"],"for taking":["your","a","the","the","a","things"],"for target":["over","over"],"for teaching":["me","me."],"for telling":["the"],"for testing":["conditions","properties"],"for text":["pretty"],"for that":["language","on","function?","pattern","is","functionality.","function.","method","first","function","reason","and","reason.","character.","get","heads","if","unless","sort","section).","again.","in","matter.","case.","to"],"for that):":["`Sublist.compare([1,1,2],[1,1,1,2])`"],"for that,":["but"],"for that--so":["I"],"for that?":["Calling"],"for the":["conditions","current","`Anagram`,","pointer.","tip.","strings","different","tip","same","silent?","other","tip","test","\"string\"","feedback","tip!","next","shouting","feedback.","feedback!","Message","feedback!","feedback.","tips","feedback!","advices","advice.","push","pick!","\"silent\"","functions:","tip!","whole","guard.","insight.","tip.","`defp`,","feedback!","punctuation","\"s\"","size,","craziness!","\"string\"","same","empty","variable","msg","nil","Lazy","eye","```question?```","same","nitpicks.","tip!","feedback.","tips.","tip","update","iterative","feedback.","one","tip,","condition","same","sake","test","input!","tip!","input.","name","`nil`","empty","body","feedback.","heads","feedback","suggestion.","tips","question","private","feedback.","feedback.","same","tea-totalers","`words`","comments.","feedback.","tip!","\"clean\"","feedback.","`:lists`","feedback!","filter","filter","suggestions!","parameter","suggestion.","`HashDict`?","feedback!","second","head","```Regex#scan```.","length","regex","feedback!","pointer","regex:","feedback.","named","shorthand","tip","regex,","shorter","great","tips!","anonymous","win!","first","streaming","guard","shortcut","feedback!","rest","good","discussion!","first","feedback!","last","runtime","reader","feedback.","first","pipeline","feedback,","various","tip)","feedback.","```","clarification,","tip!","feedback.","feedback.","deault","hint","suggestions,","`end_verse`","default","helper","feedback!","exercise","response,","sake","reader","first","pointer,","confusion.","feedback,","feedback.","discussion!","brilliant","next","count","feedback.","lessons,","separate","feedback.","comment,","purposes","\"word\"","feedback.","output...","purposes","null","feedback.","comments,","feedback.","input.","`strip_country_code`","feedback.","comment,","various","feedback!","other","feedback!","feedback!","compiler","nit!","reviews.","feedback!","conditions","feedback.","feedback,","tip.","last","main","sake","great","latest","feedback!","module,","feedback,","great","insights","type","verse/1","head","feedback.","unit","purpose,","day","given","colons","code","weekday","day","given","reworked","split.","nudge","nits!","callee","clarification.","feedback.","feedback.","feedback","`same_word?`","anonymous","exercise,","map","first","anonymous","naive","feedback.","singalong","feedback!","`cond`","next","feedback,","feedback,","feedback,","feedback,","feedback","list","helpful","conversion","info.","US","specified","stuff","stuff","sake","foreseeable","pattern","implementation","sake","`dict`","insight","Elixir","logic","arguments","`generate`","top","reader.","comment!","case","case","case","graph","comments.","cases","tips","parameters","tip","characters","range,","other,","anonymous","recursive","whole","thorough","counting","feedback","triangle","sake","strings","accumulator","error","two","tests","feedback!","feedback!","case","call","call","call","call","call,","call","advice.","reverse","reverse","feedback","last","call","call","call","call","call,","call","\"catch-all\"","shouting","response","properties","String","feedback.","feedback.","callback","silence","tip","last","feedback.","feedback","tip","naming","accumulator","suggestion","spec.","delayed","feedback....gotta","code,","feedback","feedback.","suggestion","ordering","comments","feedback,","feedback.","job.","Enum.reduce?","call","call","call","call","call,","call","direction","heads","feedback!","feedback!","feedback","`append`,","comprehensive","feedback!","feedback!","domain.","`add`","anything","last","feedback","feedback.","call","call","call","call","call,","call","delay","call","call","call","call","call,","call","values.","feedback.","there_are_letters","suggestion.","reminder","great"],"for their":["side"],"for these":["thoughtful"],"for things":["like","like"],"for this":["task.","problem.","assignment.","function.","problem","context,","=)","function?","simple","use","case","application.","is","sort","exercise.","case.","example","problem","example?","particular","exercise","info.","one","function","problem","case","simple","exercise","kind","use","case,","exercise),","exercise).","exercise","only","exercise.","exercise","exercise.","one?","exercise,"],"for this,":["true,","but","since","the"],"for this.":["I'm"],"for this?":["Prepending"],"for those":["cases?","two","macro","`%s`","methods"],"for those.":["(Although,"],"for throwing":["something"],"for tokenizer":["words"],"for two":["reasons:"],"for types":["of","like"],"for unicode":["Strings.","support","characters","letters.","alpha"],"for unit":["testing?"],"for unknown":["reason,"],"for unused":["variables"],"for update":["the"],"for updating":["values"],"for use":["in"],"for using":["HashDict.update...they","`is_reticent?`","parentheses"],"for verse":["in"],"for version":["5"],"for very":["basic","simple","large","efficiently","large"],"for vital":["performance)"],"for what":["this","@beulah","it's","is","I"],"for whatever":["reason,"],"for when":["to","you","you","you","you"],"for whether":["a"],"for which":["I","`[A-Z]`"],"for whitespace":["other"],"for why":["I","`downcase`"],"for words":["in","you"],"for words:":["http://exercism.io/submissions/51fddbdbdf1d8b5df40001e6"],"for writing":["`f(g(h))`,","different","`foo(bar(baz,","to"],"for you":["less","comment,","already,","feedback!"],"for you,":["using","makes"],"for you.":["Very"],"for your":["regex,","regex,","nit.","feedback!","feedback.","feedback,","program.","feedback.","feedback.","explanation.","feedback.","approval.","input","feedback.","feed","feedback.","`StringInquires`","feedback.","sanitize","supporting","feedback","`verse`","feedback;","`update`","insights.","application","feedback,","first","submissions.","comments.","help,","comments.","nitpick.","feedback;","help.","feedback!","count","time","feedback.","feedback.","feedback.","feedback.","feedback!","comments,","feedback.","feedback.","feedback,","feedback.","implementation","first","cases","action"],"for {some":["internal"],"for, example,":["pass"],"for, possibly":["in"],"for, say,":["`map`"],"for, so":["it's"],"for. BTW":["do"],"for. But":["that"],"for. You'd":["have"],"for: CustomSet":["do"],"for: String`":["but"],"for? Take":["\u003ccode\u003eupcase\u003c/code\u003e"],"foray into":["elixir.","Elixir."],"forbidding me":["from"],"force a":["problem"],"force developers":["to"],"force me":["to"],"force people":["to"],"force the":["user"],"force you":["do","to"],"force, but":["I"],"forced conversion":["to"],"forced me":["to","to"],"forces more":["complicated"],"forces the":["reader"],"forcing me":["to."],"forcing the":["reader"],"forcing two":["list"],"foreign languages":["because"],"foreseeable future.":["As"],"forever given":["`sing(2,"],"forever that's":["because"],"forever to":["complete."],"forget about":["what","`Dict.update/3`,"],"forget that":["Elixir"],"forget that,":["it"],"forget the":["syntax","`/u`"],"forget to":["remove"],"forget what":["you"],"forget why":["I"],"forgetting that":["was"],"forgetting! Thanks.":["But"],"forgot Elixir":["supports"],"forgot I":["could"],"forgot about":["`cond`.","that.","that","it"],"forgot that":["part."],"forgot to":["remove","make","remove","update"],"forgot, elixir's":["`cond`."],"forgot. Took":["way"],"forgotten about":["Elixir's"],"forgotten it":["already."],"form `list(any)`":["or"],"form for":["anonymous"],"form in":["addition"],"form is":["the","more"],"form most":["people"],"form of":["the","pattern","dictionary","if","string","bottle","optimization","`Stream.Lazy`","`Dict.get`"],"form requires":["use"],"form that":["is"],"form to":["tidy","make"],"form what":["letters"],"form). Overuse":["of"],"form, but":["it's"],"form, even":["on"],"form, which":["you"],"form. It's":["a"],"form](http://elixir-lang.org/docs/stable/Kernel.SpecialForms.html#&amp;/1) `&amp;/1`":["that"],"formal for":["this"],"format it":["better"],"format out!":["I"],"format string.":["Sadly,"],"format the":["`@keara`"],"format while":["retaining"],"format. Haskell":["has"],"formatting is":["a"],"formatting issue":["where"],"formatting thing":["is"],"formatting was":["terrible."],"formatting with":["clear"],"formatting, the":["way"],"formatting. Given":["the"],"formatting. Looks":["*much*"],"formatting. Using":["`do...end`"],"formatting... insert":["a"],"formatting? Can":["it"],"former gets":["parsed"],"former makes":["sense"],"former method,":["with"],"forms in":["Clojure."],"forth with":["newline_appender."],"forum to":["encourage"],"forward for":["unknown"],"forward operator":["(","("],"forward slash":["delimiter"],"forward to":["diving","some","it.","seeing"],"forward way":["to"],"forward, I":["think"],"forward, once":["I"],"forward. It":["will"],"found I":["needed"],"found Kernel.size/1":["for"],"found Macro.escape,":["I"],"found Mastering":["Regular"],"found a":["better","ton","list","better","similar","regex"],"found an":["Erlang"],"found and":["fixed"],"found conversion":["to"],"found flat_map":["and"],"found for":["example"],"found in":["what"],"found it":["just"],"found may":["not"],"found myself":["adding"],"found of":["organizing"],"found out":["that"],"found that":["there","using"],"found the":["wrong","Enum.map_join","function","dark","docs","following"],"found this":["shorcut:","to"],"found to":["avoid","not"],"found, which":["are"],"four cases,":["though,"],"four times":["over","as","by"],"four types":["of"],"fourth iteration,":["particularly"],"frame of":["the"],"frame. Good.":["I'll"],"frankly it's":["bad"],"frankly, for":["this"],"frankly, not":["very"],"frankly, odd.":["Then,"],"free to":["suggest","experiment","use","post","pick","ask","ignore","ask"],"free you":["from"],"freenode IRC":["or"],"frees up":["`foo`"],"frequencies into":["a"],"frequencies of":["each"],"frequencies or":["counts,"],"frequencies to":["compute"],"frequencies. See":["my"],"frequency could":["be"],"frequency/1 ?":["Functions"],"friend and":["I"],"friend for":["life","conditionally"],"friend of":["nested/chained"],"friends in":["the"],"friends private":["(`defp`)"],"friends) would":["be"],"from \"no":["more"],"from 0.3s":["to"],"from 1":["to"],"from ==":["to)"],"from Beer":["Song"],"from Enum":["because"],"from Enum.with_index,":["but"],"from Erlang":["into","you"],"from Erlang.":["The"],"from GitHub":["and"],"from Katrina.":["But"],"from Lowell?":[";-)"],"from Programming":["Elixir","Elixir."],"from Regex.scan,":["to"],"from Ruby":["and"],"from Seattle,":["but"],"from Seattle?":[";-)"],"from String":["that"],"from String.length":["call?"],"from [rin](http://exercism.io/rin)":["and"],"from `Dict`":["for"],"from `Enum`":["or","to"],"from `Enum`,":["I"],"from `Regex.scan`,":["so"],"from `Regex.scan`.":["I"],"from ```":["iex"],"from `accumulate/2`,":["but"],"from `count`":["to"],"from `hey`":["(for"],"from `new`":["aren't"],"from `shouting?`":["leaving"],"from `shouting?`,":["moved"],"from `verse`":["to"],"from a":["string,","magazine","recursive","previous","different","code","previous","module","previous","single","range","technique"],"from ages":["back:"],"from an":["understanding","Erlang","aesthetic"],"from analyzing":["the"],"from and":["to"],"from another":["language"],"from answering":["with"],"from bank-account":["onward"],"from being":["named","implemented"],"from both":["of","String"],"from breaking":["those"],"from char":["list"],"from compiling":["my"],"from context,":["especially"],"from docs,":["sorry"],"from doing":["the","the"],"from downstream":["functions"],"from ever":["encountering"],"from every":["other"],"from few":["months"],"from git":["repository,","repository"],"from having":["the","to","to","to"],"from how":["I"],"from human-written":["phrases."],"from inside":["of","of"],"from it":["could"],"from large":["to"],"from line":["15),","8"],"from metaprogramming":["dynamic"],"from more":["experienced"],"from my":["last","word","word","clojure","first","plural","first","code.","word"],"from offering":["feedback"],"from one":["to","little","little"],"from one-liners":["to"],"from or":["how"],"from other":["people's","languages,"],"from others":["(blank,"],"from outside":["the"],"from private":["attribute"],"from reading":["this","a"],"from regex":["for"],"from scratch":["and"],"from shouting?":["leaving"],"from significant":["Erlang"],"from small":["numbers"],"from someone":["else"],"from something":["to"],"from submitting":["another"],"from succinct":["code"],"from that":["the","looks"],"from that,":["looks"],"from the":["`README.md`.","readme.md,","checks","shout?,","cond","implementations.","domain,","compiler","response","git","string","very","very","phrase","pipeline","start.","response","\"how\".","String","start.","previous","`verse`","`hey`","domain,","logic","condition","original","source.","previous","naming","`homologous_pairs`","looks","second","test","result","people","previous","implementation","previous","previous","non-list","Erlang","chain","comparison","remaining","list","calling","`Bitwise`","`String`","names"],"from there":["only"],"from this":["exercise,","exercise,","exercise,"],"from too":["much"],"from use":["of"],"from using":["that"],"from version":["2"],"from what":["I've","it"],"from when":["I"],"from where,":["didn't"],"from wondering":["why,"],"from you":["and"],"from your":["Language","workflow."],"from))` is":["much"],"from. (If":["you"],"from. It's":["only"],"from_bottles..to_bottles |&gt;":["Enum.map(verse(&amp;1))"],"from_tree function":["on"],"front end":["allows"],"front gives":[":)"],"front loading":["the"],"front of":["your","functions?","calls"],"front to":["tell"],"front. There's":["no"],"frowned upon":["or"],"frowned upon.":["Passing"],"frustrated with":["getting"],"frustration and":["hard"],"frustration is":["figuring"],"fudges the":["characters:"],"full discussion":["about"],"full of":["pipelining","whitespace,","\"noisy\""],"full string":["could"],"full table":["such"],"full test":["suite"],"full use":["of"],"full, so":["I"],"fully agree":["with"],"fun _,":["acc"],"fun and":["learn"],"fun arg":["needs"],"fun doing":["this"],"fun exercise.":["Performance"],"fun for":["someone"],"fun language":["to"],"fun to":["use","implement."],"fun with":["pattern"],"fun x":["-\u003e","-\u003e"],"fun) they":["often"],"fun, but":["I"],"fun. Also":["String.ends_with?"],"fun. Seriously.":["Thanks"],"fun. Why":["iterate"],"func([])` or":["`def"],"func(nil)` as":["well"],"func.(head) do`.":["It's"],"func.(head) of":["true"],"function \"tell":["its"],"function 'hey'.":["The"],"function (Dict.put":["is"],"function (`&amp;1+1`)":["in"],"function (`String.split`)":["that"],"function (`fn":["..."],"function (`reduce`)":["while"],"function (`x`":["must"],"function (but":["agree"],"function (dare":["I"],"function (for":["example"],"function (getting":["the"],"function (grade)":["closer"],"function (meaning":["you've"],"function (not":["needed"],"function (or":["a"],"function (you":["can"],"function -":["one"],"function --":["that"],"function .":["Is"],"function \u003ccode\u003eanagram?\u003c/code\u003e":["with"],"function \u003ccode\u003esing/2\u003c/code\u003e":["in"],"function I":["wonder.","can"],"function `(acc,":["element)"],"function `(element,":["acc)"],"function `Enum.reduce`":["that"],"function `bottle`":["that"],"function `chars/1`":["do"],"function `do_x`,":["probably"],"function `foo`":["`do_foo`,"],"function `map`":["that"],"function `matches?/1`":["to"],"function `next(iter)":["::"],"function `not_same?/2`":["don´t"],"function `replace_thymidine`":["and"],"function `update_dict`":["a"],"function `validate/1`":["instead"],"function `value(iter)":["::"],"function `x`":["calling"],"function a":["one-liner,","private"],"function after":["what"],"function almost":["exactly"],"function also":["iterates."],"function and":["directly","pass","`Enum.filter`","give","send","have","```removed_punctuation```","shared","you","put","`!`"],"function application":["syntax."],"function application.":["I.e."],"function are":["contiguous."],"function argument":["to"],"function arguments":["because","is","so"],"function arguments,":["but","i.e."],"function arguments.":["This","I"],"function around":["any"],"function as":["an","an","well,","long","a","a"],"function at":["the","all"],"function back":["into"],"function be":["public?","used"],"function because":["the","they","I"],"function bodies":["are"],"function body":["is"],"function but":["now"],"function by":["using","putting","using"],"function call":["on","much","would","only","form).","and","indirection).","takes","itself","three"],"function called":["silence?.","`split/1`"],"function calls":["with","seem","except","except","or","unless","everywhere","except"],"function calls)":["to"],"function calls.":["It's"],"function capture":["syntax.","to"],"function causes":["the"],"function clause":["matching","to","matching","matching","matches.","matching"],"function clauses":["for","named","(I'm","look","for","where","and"],"function clauses,":["so","but"],"function closed":["within"],"function combine":["to"],"function correctly.":["That"],"function could":["be","be","be","be","be","use"],"function declarations":["to","with"],"function declarations,":["function"],"function definition":["for","for","using","instead","syntax"],"function definitions":["(aside","for","to","on","defining","on","on"],"function definitions,":["there"],"function definitions.":["Are"],"function defs":["for"],"function depends":["on"],"function directly":["to"],"function directly,":["right?"],"function does":["has"],"function doesn't":["get","need"],"function doesn’t":["actually"],"function don't":["seem"],"function easier":["to"],"function ends":["with","with","with"],"function etc":["I'm"],"function expressions":["`&(&1+1)`"],"function extremely":["clear."],"function filter\".":["From"],"function for":["different","the","that","checking","the","the","line","\"split_words\"","character","each","strings.","use","the","the","each","silence),","the","a"],"function for,":["say,"],"function format":["out!"],"function formatting.":["Given"],"function from":["`Enum`?","`Dict`","`Enum`"],"function gets":["passed","reused.","reused.","reused.","reused.","reused."],"function given":["this"],"function guard.":["I"],"function guard:":["that's"],"function guards":["rather","you'd","`when"],"function happens":["to"],"function has":["a","quadratic"],"function head":["(the","with"],"function heads":["instead","the"],"function heads.":["I","This"],"function here":["reads"],"function hey.":["But"],"function if":["that","there"],"function in":["`String`","the","module","`Dict.update`","the","any","the","the","the","normalize","your","the","the","String","a","Erlang,","sing","the","`filter_map`.","another","only","a"],"function inline":["and"],"function inline.":["Since"],"function inside":["the","reducer.","HashDict.update"],"function instead":["of","of"],"function interface":["is"],"function into":["separate","three"],"function is":["more","triggered","that","pretty","always","a","pretty","more","doing","necessary","somewhat","overkill.","doing","doing","invoked","something","a","a","required.","not","a","quite","private","a","quite","something","a","quite","that","a","quite","a","quite","intended","efficient"],"function is_saying_nothing?":["doesn't"],"function isn't":["a"],"function it":["would","was"],"function itself":["(with"],"function last":["is"],"function length/1":["imported"],"function less":["maintainable"],"function level":["pattern"],"function like":["`to_words`?","`defp","that.","`Enum.map`.","in","`lowercase_sentence`","`multiple_of?(number,"],"function method":["until"],"function might":["be"],"function mixed":["up"],"function more":["clear?"],"function much":["better."],"function name":["`process`",":)","is","from","makes","\"build_hash\".","I","either,"],"function name.":["So"],"function named":["\"is_silence?\"","'transcribe'","`append`"],"function names":["for","unless","in","for","for","in","are","are","and","with","with"],"function names.":["You","Looking"],"function naming":["or"],"function needed?":["it"],"function of":["the","the","the"],"function on":["itself","Regex](http://elixir-lang.org/docs/master/Regex.html)","a","a","the","purpose"],"function over":["interpolation?","a"],"function parameters":["(after"],"function parameters.":["I","`h`"],"function params!":["(`first_sentence(0)`"],"function passed":["to","to","to"],"function please":["put"],"function private,":["and"],"function rather":["than"],"function reads":["really"],"function reads.":["It"],"function reads:":["\"msg"],"function refer":["back"],"function regarding":["the"],"function return":["it's"],"function returning":["true"],"function seems":["more"],"function sent":["to"],"function shortcut":["syntax,"],"function should":["be","be"],"function signatures":["with"],"function signatures.":["The"],"function since":["it"],"function so":["that","i","the","it's","that"],"function specs":["btw!"],"function such":["as","as"],"function syntax":["sugar!","to","for","(`fn`)","(do:"],"function syntax.":["Also,"],"function takes":["the"],"function than":["just"],"function that":["takes","uses","can","hides","describes","decides","I","use","takes","returns","always","would","returns","does","does","apply","returned","helps.","you","does","gives","checks","always","does","will","will","takes","can","relies"],"function the":["stack","last","stack","stack","stack","stack","stack"],"function to":["manipulate","something","get","clean","pick","the","update","update","your","do","determine","get","a","eliminate","be","private","use","implement","filter","boot.","use","filter","wrap","be","raise","help"],"function too?":["Or"],"function updating":["the"],"function value,":["and"],"function values":["(&append/1)"],"function versus":["a"],"function vs.":["inline."],"function wants":["an"],"function was":["split","`odd?`"],"function wasn't":["necessary,"],"function when":["use","it","the"],"function where":["the"],"function which":["gets","returns","you"],"function whose":["only"],"function with":["the","a","a","two","the","some","a","explicit","a","a","argument","a","its","the","no","`defp`"],"function would":["not","read","make","be","help","be","be"],"function wouldn't":["necessarily"],"function you":["define","preface","store","might","could"],"function you're":["passing"],"function your":["regex"],"function's expectations":["doesn't"],"function's explicit":["purpose"],"function's module,":["but"],"function's name":["in"],"function), and":["when"],"function). If":["you"],"function). Why":["not"],"function, I":["think.","considered","could","changed","kind"],"function, [":["processed_element"],"function, `dna`":["is"],"function, acc)":["do"],"function, and":["inlines","the","again","`defp`","`&1`","then"],"function, as":["`telling_me_something_unimportant?`"],"function, at":["first"],"function, but":["would","yours","this","I","I","note","it"],"function, convention":["is"],"function, could":["you"],"function, for":["example:"],"function, instead":["of"],"function, it's":["only"],"function, like":["you","`characters_used_in`?"],"function, or":["even","at"],"function, per":["suggestion."],"function, rather":["than","than"],"function, since":["`_empty?`","it's","each"],"function, though,":["because"],"function, using":["`Enum.join`"],"function, wouldn't":["it"],"function, you":["could","could","could","could","don't","can"],"function-level guards":["in"],"function. (But":["I"],"function. All":["the"],"function. And":["if"],"function. Another":["way"],"function. Any":["suggestions?","hints?"],"function. But":["it's"],"function. Cool.":[":)"],"function. For":["example,"],"function. Great":["work!"],"function. Here's":["an"],"function. I":["like","got","may","think","made","think","tried","don't","couldn't"],"function. I'd":["be"],"function. I'll":["use"],"function. I'm":["not","using"],"function. I've":["done"],"function. If":["I","you"],"function. In":["this"],"function. It":["works,"],"function. Lines":["10"],"function. Maybe":["`summary`"],"function. Private":["functions"],"function. Someone":["else"],"function. Still,":["at"],"function. Thanks":["for"],"function. The":["only"],"function. There's":["nothing"],"function. This":["just"],"function. Using":["pattern"],"function. What":["if"],"function. Will":["use"],"function/f and":["result/acc"],"function/method name.":["I"],"function/method overloading,":["I"],"function/method, and":["within"],"function: It":["takes"],"function; something":["like"],"function; using":["`Enum.count/2`"],"function? But":["still,"],"function? I":["don't"],"function? I'm":["not"],"function? I've":["seen"],"function? Might":["make"],"function? My":["initial"],"function? Or":["a","break"],"function? Reading":["the"],"function_name(\"something that":["shouldn't"],"function_name(word), do":["..."],"function` reminded":["me"],"functional /":["Elixir"],"functional a":["solution"],"functional and":["pattern"],"functional approach":["using","to"],"functional language":["is","and","and"],"functional language,":["so"],"functional language.":["I","I'm"],"functional languages":["tend","you"],"functional languages!":["Only"],"functional operators,":["f.e.:"],"functional pipelines":["via"],"functional programming":["enough","I","it's","languages","though.","it'll","world","and","way.","use"],"functional programming,":["so","so","if"],"functional rabbit":["hole)"],"functional ruby":["in"],"functional style,":["but"],"functional way":["to","of"],"functional ways,":["and"],"functional. This":["is"],"functional... The":["`cond`"],"functionality desire":["that"],"functionality is":["built"],"functionality. It":["probably"],"functionaly instead":["of"],"functions (":["like,"],"functions (I":["believe)."],"functions ([see":["for"],"functions (`defp`)":["from","in"],"functions (`isSpace`,":["`isUpper`),"],"functions (like":["`Enum.map`)"],"functions (maybe":["instead"],"functions (or":["inlining"],"functions *in*":["the"],"functions ,":["one"],"functions -":["can","they","or"],"functions .(is":["my"],"functions I":["need","couldn't"],"functions `asking?`":["and"],"functions `next_three`":["and"],"functions `silence?/1`,":["`shouting?/1`,"],"functions always":["go"],"functions and":["add","their","especially","`Enum`","all.","an","this","there's","use","use"],"functions are":["supported.","limited,","named.","concise,","private,","all","uniquely","called","available","preferred,","defined","\"only\"","very","almost","lazy","more-or-less","not","private","not","all","efficient?","now"],"functions as":["private","private?","private","private","guard","well."],"functions at":["a","this","all."],"functions be":["public?","private?"],"functions before":["I"],"functions before.":["Not"],"functions being":["kept"],"functions but":["in"],"functions calls":[","],"functions can":["be","be","be","be","simplify"],"functions confusing.":["Especially"],"functions could":["come"],"functions declarations":["and"],"functions didn't":["seem"],"functions directly":["below","under","(except","but","below"],"functions doesn't":["improve"],"functions doesn´t":["follow"],"functions elsewhere":["it's"],"functions explicitly,":["except"],"functions first":["and"],"functions for":["readability?","the","(1)","the","better","testing"],"functions from":["the","String","a","`Enum`,","the","`Enum`"],"functions have":["a"],"functions helped":["make"],"functions here":["that"],"functions if":["they","they're","there"],"functions in":["erlang","Elixir).","`cond`s,","pattern","guards.","the","a","a","Elixir","the","the","String","a","`Dict`","`HashDict`","a","a","line","the","`Bitwise`.","the","the","other"],"functions instead":["of","of","of"],"functions into":["one.","`List`","smaller","a","private","your"],"functions is":["a","one","very","allowed"],"functions isn't":["done"],"functions it":["is!","looks"],"functions like":["String.scan","`fibonacci(1),","String.strip.","this:","`Enum.reduce`?","this",":lists.mapfoldl","`sunteenth`","`is_alpha`","this:","`Enum.count`","the","`Enum.reduce`","`Enum.reduce`","`Enum.reduce`","increment"],"functions looks":["a"],"functions making":["them"],"functions might":["be"],"functions need":["a","to"],"functions nothing?,":["yelling?,"],"functions of":["arity","their","their","the"],"functions on":["other","it.","one"],"functions once":["but"],"functions or":["a","multiple","variables,"],"functions out":["of","into"],"functions part":["of"],"functions performs":["a"],"functions private":["(defp)?","using","(`defp`)?","to","you","by"],"functions private.":["And"],"functions require":["nesting,"],"functions returning":["different"],"functions rule?":["If"],"functions should":["be","be"],"functions so":["that","they're","that"],"functions spanning":["over"],"functions syntax":["sugar."],"functions tend":["to"],"functions that":["would","accept","return","return","only","return","determine","tell","generate","accomplish","take","transform","are","are","simply","might","will","are","are","seem","are","are","gave","are"],"functions to":["improve","a","reveal","increase","increase","define","end","give","come","make","get","manipulate","be","give","encapsulate","name","anonymous","unpack","work","eval.","make","name","give","avoid","wrap"],"functions together":["like"],"functions totally":["unreadable."],"functions underneath":["it"],"functions used":["inside","as"],"functions vary":["only"],"functions was":["crying"],"functions were":["allowed"],"functions what":["they"],"functions when":["you"],"functions wherever":["possible,"],"functions which":["also"],"functions will":["make","help."],"functions with":["descriptive","intention-revealing","semantic","intention-revealing","intention-revealing","guards,","intention-revealing","intention-revealing","\u003ccode\u003e?\u003c/code\u003e","trivial","2","`defp`.","a","dynamically","guard","a","their","a","`defp`"],"functions within":["Teenager"],"functions without":["the"],"functions work":["for","with"],"functions works.":["That"],"functions would":["be"],"functions you":["can","could","mentioned.","need"],"functions you'd":["end"],"functions you've":["already"],"functions\" are":["fine."],"functions\". I":["guess"],"functions' suggestion":["right."],"functions) work":["on"],"functions, I":["ended"],"functions, I'd":["tend"],"functions, `defp":["reverse`"],"functions, a":["way"],"functions, and":["add","the"],"functions, as":["that"],"functions, aside":["from"],"functions, but":["some","I","if","you're","it","strictly","I","I","I","this","I","I"],"functions, did":["you"],"functions, e.g.":["`reduce`"],"functions, each":["describing","with"],"functions, especially":["1"],"functions, functions":["are"],"functions, it's":["a"],"functions, like":["`last`","the"],"functions, one":["for"],"functions, so":["for"],"functions, the":["code"],"functions, they":["are"],"functions, to":["maybe","make"],"functions, using":["the"],"functions, which":["is","you","makes"],"functions, with":["helpful"],"functions. But":["there's"],"functions. For":["example"],"functions. Here":["is"],"functions. Here's":["an"],"functions. I":["would","might","believe","submitted","noticed","suppose"],"functions. I'll":["submit"],"functions. I'm":["a"],"functions. In":["Ruby,","this"],"functions. It":["might","turns"],"functions. Just":["a"],"functions. That":["way"],"functions. That's":["much"],"functions. The":["function","module"],"functions. They":["should"],"functions. They're":["not"],"functions. This":["should"],"functions. You":["certainly","did"],"functions. `Dict`":["=","functions"],"functions. `fn(x)":["-\u003e"],"functions: I":["have"],"functions: These":["are"],"functions: `name/arity`.":["For"],"functions: a":["single"],"functions: the":["splitting"],"functions? Also,":["I'd"],"functions? Seems":["like"],"functions? Using":["&amp;1"],"functions? Within":["`words"],"functions_ with":["`defp`."],"fundamental ideas":["behind"],"funny thing":["is"],"funs ,":["one"],"funs rather":["than"],"further I":["went,"],"further and":["moved","get","used"],"further by":["hand-rolling"],"further factored":["itself."],"further into":["the"],"further parentheses.":["Having"],"further simplify":["your"],"further than":["the"],"further to":["`&amp;anagram?(word,"],"fuse together":["`different_word?`"],"future I":["could"],"future changes":["to"],"future development":["and"],"future exercises.":["Are"],"future reader":["to"],"future readers":["if"],"future readers,":["`(1"],"future so":["I"],"future. As":["things"],"future. For":["example"],"fuzziness as":["to"],"fuzzy on":["why"],"fübar for":["example?"],"g)` instead":["of"],"g. `is_shouting?`,":["`is_questioning?`."],"g` is":["a"],"g`. It's":["indeed"],"gain a":["deeper"],"gain anything":["splitting","by","by"],"gain in":["brevity"],"gain readability":["or"],"gain some":["clarity"],"gain without":["sacrificing"],"gained here":["by"],"gained in":["readability."],"gained what":["I"],"gains something":["called"],"gains yet":["a"],"gains you":["anything"],"game changer.":["Thanks"],"garbage in":["the"],"gate with":["one."],"gather it's":["more"],"gather that":["these"],"gave a":["compiler","name"],"gave good":["names"],"gave in":["my"],"gave me":["a"],"gave some":["reasons"],"gave the":["same"],"gears and":["used"],"geeked out":["about"],"gem maintainer.":[":)"],"gem, as":["there","there","there"],"gen_event is":["a"],"general \"shape\"":["of"],"general (works":["on"],"general I":["would","find","would"],"general I'd":["suggest"],"general I'm":["not"],"general `HashDict`":["functions,"],"general `|\u003e`":["makes"],"general and":["precise"],"general approach":["for"],"general as":["possible"],"general because":["they"],"general best":["avoided"],"general case":["of"],"general case.":["Your"],"general category":["of","tests","property,","L","L)."],"general convention":["of"],"general erlang":["community,","community."],"general explicit":["recursion"],"general function":["application","(getting","(`reduce`)"],"general idea":["behind"],"general if":["you"],"general in":["the","functional"],"general is":["an"],"general it":["seems"],"general it's":["better","more","best","better","best","better","better","more","better"],"general note,":["I"],"general or":["something"],"general pattern":["and"],"general purpose":["function,"],"general question":["of"],"general replacement":["for"],"general rule":["in"],"general solutions":["than"],"general strain":["function"],"general structure":["of"],"general terms*":["the"],"general than":["\"match\"."],"general that":["have"],"general the":["solution"],"general though,":["they"],"general way":["you"],"general, but":["what","these"],"general, don't":["know"],"general. I":["am"],"general. Just":["a","a"],"general. Nice":["use"],"generalization of":["a"],"generally allergic":["to"],"generally available":["to"],"generally better":["to"],"generally compare":["sets"],"generally considered":["better"],"generally go":["for"],"generally implied":["when"],"generally just":["write"],"generally like":["seeing"],"generally not":["needed"],"generally only":["do"],"generally overpowered":["for"],"generally possible,":["only"],"generally prefer":["built"],"generally preferred":["way","to"],"generally requires":["the"],"generally supposed":["to"],"generally the":["correct"],"generally use":["methods"],"generally would":["make"],"generate a":["count"],"generate that":["filter."],"generate the":["list","responses","phrases.","list","predicates.","function"],"generate them.":["Only"],"generated in":["one"],"generated list":["in"],"generated names?":["How"],"generating an":["intermediate"],"generation in":["its"],"generation with":["`Enum.map`."],"generator in":["a"],"generator, but":["I"],"generators have":["bigger"],"generic and":["reusable,"],"generic function":["over","like"],"generic naming":["(`m`"],"generic one,":["it"],"generic power":["function"],"generic protocol":["functions"],"generic replacement":["function."],"generic string":["inquiries."],"generic stuff":["or"],"generic, and":["changed"],"generic. The":["pattern"],"genes to":["return","use"],"genius. I":["do"],"gentle.. This":["is"],"genuine question,":["thanks"],"genuine question.":["I"],"get `do_reverse([],":["[])`"],"get a":["unique","text?","list","deprecation","chance","list","list","crash","new","stub","compile","chance.","complexity","list","list","lot","stack","stack"],"get an":["idea"],"get and":["put","put","put"],"get annoyed":["with"],"get any":["errors"],"get approved,":["and"],"get area_code":["(imagine"],"get around":["it.","that?"],"get automatically":["inserted"],"get away":["with","with","with","with"],"get back":["into","to"],"get better":["with"],"get both":["`foo/1`"],"get called":["on"],"get come":["feedback."],"get compiled":["away,"],"get downcased":["and"],"get equal":["char"],"get every":["thing"],"get false.":["To"],"get familiar":["with"],"get from":["that?","having","GenServer.Behaviour."],"get hidden":["by"],"get in":["the","the"],"get into":["a"],"get into,":["thanks!"],"get it":["to","right","to","to","down","all"],"get it,":["and"],"get it.":["It"],"get lost":["in"],"get me":["wrong;"],"get merged":["soon."],"get module":["qualified"],"get more":["difficult","experience"],"get much":["value","simpler"],"get my":["head","first","head"],"get partial":["application"],"get passed":["back"],"get persisted":["to"],"get picky":[":-)"],"get pretty":["long,"],"get problematic.":["Is"],"get problems":["due"],"get quality":["nitpicks"],"get really":["weird","slower"],"get rid":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"],"get simple":["List"],"get some":["OO","feedback"],"get something":["up","passable"],"get started":["with."],"get swallowed":["up"],"get tail":["recursive"],"get that":["to","to","organized","reduce"],"get the":["tests","expected","impression","last","point","list","doctest","idea","output","shortcut","counts.","value.","first","last","job","values?","value","tests","same","macro","current","tests","negation","`cond`","grouping"],"get to":["a","learn","that","the","it.","refactor!"],"get treated":["as"],"get up":["and"],"get used":["to","to"],"get what":["you","you"],"get with":["regexes"],"get you":["the"],"get your":["meaning."],"get, the":["recursive"],"get. There's":["simply"],"get_counts (and":["friends)"],"gets a":["function"],"gets all":["valid"],"gets called":["to","if"],"gets cleaned":["up","up","up","up","up"],"gets computed":["once."],"gets confused,":["with"],"gets escaped":["when"],"gets handled":["in"],"gets lost":["next"],"gets parsed":["as","as"],"gets passed":["as","a"],"gets reused.":["Here's","Here's","Here's","Here's","Here's"],"gets simpler.":["\\o/"],"gets split":["by"],"gets stripped":["out.)"],"gets thrown":["around"],"gets you":["that"],"getting (iterations":["passim)."],"getting a":["pull","little","little"],"getting all":["the"],"getting an":["error","odd"],"getting around":["the"],"getting at":["with","and"],"getting back":["to"],"getting closer":["to"],"getting compilation":["errors"],"getting creative":["with"],"getting hot":["on"],"getting it":["consistent"],"getting it,":["but"],"getting my":["head"],"getting pretty":["long,"],"getting really":["good!"],"getting rid":["of","of"],"getting silly":["for"],"getting some":["help."],"getting started":["guide:"],"getting the":["hang","output","integer","error","logic","whole","hang"],"getting to":["know","the"],"getting too":["complex?","fancy."],"giant DNA":["strand"],"giant case":["statement,","statement"],"gist of":["it"],"git a":["little"],"git repository":["and","and"],"git repository,":["and"],"give `unequal_pairs?`":["a"],"give a":["pattern","proper","better","parser"],"give an":["example?","example"],"give any":["benefits."],"give compile":["hints"],"give feedback.":["I"],"give good":["names"],"give it":["a","the","a","a","a","much","a","a","a","a"],"give it,":["even"],"give me":["a","an","a"],"give names":["to"],"give some":["tips?","pointers?"],"give that":["a"],"give the":["default","same","same","`?T`","magic","list","correct","guard","same"],"give them":["a","a"],"give these":["kind"],"give you":["a","a","a","the","my","the"],"given Elixir's":["slightly"],"given `sing(2,":["3)`."],"given `word`":["every"],"given a":["big","big"],"given day":["of","of"],"given enough":["primes"],"given it's":["the"],"given its":["own"],"given that":["the","all"],"given the":["types","simple","rather","fact"],"given this":["definintion:"],"given to":["your"],"given up":["on"],"given. Hence":["the"],"given. So,":["I'm"],"gives `invalid":["token`"],"gives a":["reasonable","400","name"],"gives an":["idea"],"gives at":["least"],"gives me":["time","an","an","an","this"],"gives names":["to"],"gives really":["weird"],"gives the":["operation","reader"],"gives you":["a"],"giving a":["local"],"giving each":["of"],"giving feedback":["when"],"giving good":["names"],"giving it":["some","is"],"giving me":["a"],"giving me.":["Granted"],"giving meaningful":["names"],"giving much":["useful"],"giving the":["value"],"giving you":["warnings","a"],"glad to":["hear","hear"],"glad you":["like"],"glance at":["your"],"glance\" perspective":["`Enum.filter`"],"glance, I":["could"],"global count":["`entries`"],"go about":["implementing","doing","implementing"],"go after":["the"],"go ahead":["and","and","and","and","and","and"],"go along.":["For"],"go and":["see","try","make"],"go any":["further"],"go at":["Elixir.","it.","cleaning"],"go back":["from","through","and"],"go crazy":["here"],"go do":["some"],"go either":["way","way"],"go for":["`build_dictionnary`.","`question?`","it.","that","something","`Stream.filter"],"go from":["small","large"],"go here?":["Section"],"go look":["up"],"go much":["further"],"go of":["here"],"go that":["route.","route"],"go this":["way"],"go through":["_all_","and"],"go to":["the"],"go with":["\"default\"","2-space","cond","the","the","the","flattening","them.","the","the","`cond`","strings","`cond`.","`year`","this,","true,","a","`[\\p{L}-]+`"],"go, I":["hope"],"go, accessing":["attributes"],"goal is":["not","to","to","to"],"goal of":["one"],"goal, but":["you"],"goals in":["these"],"goals of":["1)"],"goals were":["to"],"goals, but":["I'm"],"goes above":["and"],"goes against":["the","the"],"goes along":["with"],"goes for":["`downcase`"],"goes into":["that"],"goes so":["far,"],"goes too":["far"],"goes wrong":["here"],"going abroad":["without"],"going ahead":["and"],"going around":["though"],"going back":["and"],"going but":["I"],"going for":["including","speed,"],"going haywire.":["I"],"going in":["to"],"going on":["that","with","your","in","with","that","is"],"going on,":["we"],"going on.":["I'll",":)","That"],"going the":["extra","right"],"going through":["the","the","learning","the"],"going to":["use","give","nitpick","use,","have","be","change","need","use","change","do","try","look","unlock","be","reuse","do","see","work","move","bother","mark","point","change","try","be","move","cause","have","get.","work","multiple","get","multiple","call","be","tweak"],"going with":["the"],"golf that":["even"],"golfy feel":["of"],"gone and":["replaced"],"gone now":["=)"],"gone on":["to"],"gone overboard":["on"],"gonna rewrite":["this"],"good (and":["easier"],"good ,":["but"],"good -":["Elixir"],"good Elixir":["style."],"good IMO).":[":D"],"good IMO.":["I"],"good addition,":["even"],"good already":[":)"],"good alternative":[";)."],"good approach.":["Some"],"good argument":["for"],"good as":["it","a","well."],"good balance":["as","between"],"good bit":["of"],"good book":["for"],"good but,":["as"],"good call":["on"],"good call.":["I"],"good candidate":["for","for"],"good case":["for"],"good chance":["to"],"good change":["to"],"good change.":["I"],"good choice.":["For","Sometimes"],"good choice;":["for"],"good code":["looks","readability:","looks"],"good deal":["of"],"good discussion":["too."],"good enough":["in","I","reason"],"good error":["messages"],"good exercise":["to"],"good feature":["that"],"good feedback":["about"],"good feel":["for"],"good feeling":["of"],"good fit":["for"],"good for":["your","the"],"good functional":["style,"],"good going":["on"],"good habit":["to","to","to","to"],"good idea":["to","to","in","that","in","to","here?","to","to","even","to","not","to"],"good idea!":["Haven't"],"good idea,":["I"],"good idea.":["In","That","I"],"good idiomatic":["Elixir"],"good idioms":["and","in"],"good in":["this","general.","general,","general."],"good info":["there."],"good intention-revealing":["names"],"good job!":[":)"],"good justification":["for"],"good libraries":["for"],"good map-reduce":["exercise"],"good mental":["model"],"good name":["for","for","for"],"good name.":["Maybe"],"good names":["to","to","to"],"good names,":["which"],"good news":["is"],"good night's":["sleep)"],"good nit":["I"],"good one.":["I'll","I"],"good overall.":["A"],"good part":["because"],"good performance":["reason."],"good point":["about","about","-","thanks"],"good point!":["So"],"good point.":["I","I"],"good points,":["and"],"good practical":["examples"],"good practice":["to"],"good practice,":["though!"],"good proxy":["for"],"good question,":["one"],"good reason":["tbh","not","so","for","(such"],"good reason.":["I"],"good reference":["for"],"good rule":["of","of"],"good sacrifice":["to"],"good sign":["that"],"good solution,":["but","but"],"good start":["nonetheless."],"good start.":["Functional"],"good style.":[":P"],"good submissions,":["it"],"good suggestion.":["I"],"good support":["for"],"good terms":["in"],"good thing":["to"],"good time":["figuring"],"good tip.":["I"],"good to":["me!","me!","think","me.","me.","me.","me.","me.","me.","me.","me.","me.","me.","my","get","convert.","know.","me.","know.","make","me.","me."],"good too,":["for"],"good use":["of","of"],"good uses,":["but"],"good variable":["name"],"good way":["to","to","to","to","to"],"good ways":["to"],"good with":["nested"],"good! Have":["you"],"good! I":["think","like"],"good! If":["you're"],"good! Just":["a"],"good! Notice":["that"],"good! One":["minor"],"good! The":["`hey`"],"good! What":["about"],"good! Your":["`silence`"],"good\" but":["from"],"good(e), do:":["Enum.reduce(e,"],"good) practice":["in"],"good, and":["your"],"good, aside":["from","from"],"good, but":["do","`shouting?`","it","it","can","don't"],"good, just":["a"],"good, really.":["I"],"good, so":["this"],"good, there":["is"],"good, you've":["avoided"],"good. :":[")"],"good. A":["couple","few","few","few"],"good. Alternatively,":["did"],"good. Any":["nitpicks"],"good. Can":["you"],"good. I":["think","see","think","just","like"],"good. I'll":["add"],"good. Interesting":["discoveries"],"good. Is":["there"],"good. It's":["nice"],"good. Just":["a","wondering","one","one","be"],"good. My":["only"],"good. Often":["people"],"good. One":["(super","very","small","very","small","small","small","thing"],"good. Personally,":["I"],"good. Pretty":["similar"],"good. Since":["I'm"],"good. The":["only","function/f","fact"],"good. There":["are","are","are"],"good. There's":["no","a"],"good. This":["ends"],"good. What":["is"],"good. With":["regard"],"good. You":["can","should","could","could","use"],"good. You're":["using"],"good. You've":["used","avoided","correctly","applied"],"good. `cond`":["is"],"good. i":["like"],"good; I":["only"],"good_time, _":["}"],"google has":["failed"],"google is":["my","proving"],"googling, [[:alpha:]]":["is"],"got Elixir":["0.10.1,"],"got a":["new","clue,","better","syntax","good","completely","logical","little"],"got about":["finding"],"got accidentally":["submitted."],"got an":["updated"],"got busy":["thinking"],"got carried":["away"],"got caught":["a"],"got driven":["beyond"],"got few":["questions"],"got fixed.":["https://github.com/kytrinyx/exercism.io/pull/465"],"got frustrated":["with"],"got it":["backwards."],"got it!":["What"],"got it,":["I"],"got kind":["of"],"got last":["time,"],"got lazy":["when"],"got lucky":["with"],"got me":["on","wondering"],"got much":["simpler."],"got on":["my"],"got one":["minor"],"got rid":["of"],"got scolded":["for"],"got simpler":["and"],"got sloppy":["here"],"got so":["much","comfortable"],"got some":["serious","descriptive","pointers","sort"],"got stuck":["somewhere."],"got suggested":["I"],"got that":["no"],"got the":["opposite","parameters","idea...","right"],"got those":["somewhere"],"got to":["this","look"],"got twisted":["around"],"got very":["descriptive"],"got warning":["that"],"got what":["you"],"got your":["'one-liner"],"got zipper":["now."],"gotcha! guess":["I"],"gotcha. I":["guess"],"gotcha. Things":["do"],"gotten it":["right"],"gotten lost":["in"],"gotten used":["to"],"gotten your":["drift"],"grab the":["latest","latest"],"grabbed it":["just"],"grabbed the":["latest"],"grade (not":["only"],"grade list":["regularly"],"grade output.":["The"],"grades alphabetically.":["The"],"grades and":["students"],"grades twice.":["I"],"grades, not":["the"],"grains on":["each","the"],"grammar has":["enough"],"grammar isn't":["really"],"grammar seems":["to"],"grandparent, etc":["of"],"grant you":["that."],"graph (it":["always"],"graph with":["attributes"],"graph/nodes/edges, which":["is"],"grapheme). Not":["much"],"graphemes (i.e.":["e"],"graphing memes,":["which"],"grasp of":["regex"],"grasp on":["one"],"grasp the":["\"why\""],"grateful. Just":["my"],"great -":["I"],"great API":["design"],"great Christmas":["and"],"great advice!":["I've"],"great at":["pattern"],"great control":["structure"],"great exercise,":["really"],"great fan":["of"],"great feedback":["from","this"],"great feedback.":["Revision","I"],"great for":["dependency","this","this"],"great hints!":["Updated"],"great idea,":["thanks!"],"great if":["elixir"],"great improvements.":["I'd"],"great in":["Ruby","my"],"great job!":["I"],"great naming":["scheme"],"great news!":[":)"],"great one":["because"],"great opportunity":["to","to"],"great risk":["that"],"great start":["-"],"great thank":["you!"],"great tip.":["Thanks!"],"great to":["know!","have"],"great use":["case","case","of"],"great way":["to","to"],"great! Good":["job!"],"great! I":["think"],"great! You":["could"],"great!\" I":["wonder,"],"great, I":["think","have"],"great, although":["the"],"great, if":["but"],"great, much":["simpler!"],"great, only":["one"],"great, thanks.":["I"],"great. (We're":["all"],"great. :)":["Just"],"great. A":["few","tiny","few"],"great. Agree":["with"],"great. Elixir":["has"],"great. Good":["clear,"],"great. I":["think","like"],"great. I've":["always","enjoyed"],"great. Just":["an"],"great. My":["only"],"great. One":["little"],"great. See":["comments"],"great. Should":["those"],"great. Thanks.":["That"],"great. The":["only"],"great. There":["are"],"great. You've":["avoided"],"greater scope.":["If"],"greater than":["0.","the"],"greater-than operator":["thing"],"greatly, thanks":["for"],"green but":["to"],"green. Now":["you"],"greeting |&gt;":["String.ends_with?(\"?\")","String.ends_with?(\"?\")"],"greeting. That":["might"],"grid dict":["you"],"grok how":["something"],"grokking a":["lot"],"gross, but":["I'm"],"ground with":["this"],"group capturing.":["By"],"group of":["functions"],"group them":["nicely."],"group you're":["complementing."],"grouping based":["on"],"groups besides":["the"],"groups of":["consecutive","characters","characters","characters"],"grow large":["and"],"grow unnecessarily":["complex"],"growing the":["stack"],"grows on":["me,"],"grows? Given":["that"],"guarantee you're":["not"],"guarantees that":["the"],"guard --":["only"],"guard a":["name"],"guard against":["nil","invalid"],"guard and":["use"],"guard clause":["instead","to","in","to","functions,","to"],"guard clause,":["but"],"guard clause.":["But"],"guard clauses":["on","when","if","on","seem","are",":-)","in","in","instead","with","for","to"],"guard clauses,":["but","only","but","sorry,"],"guard clauses.":["Thanks"],"guard clauses...":["and"],"guard condition":["on"],"guard conditions":["on"],"guard for":["frequency/1","string"],"guard functions.":["I"],"guard in":["method"],"guard on":["`nil?`"],"guard statement":["for","because"],"guard the":["`is_`"],"guard when":["pattern"],"guard you":["have"],"guard, that":["would"],"guard. I":["don't"],"guard. Looking":["forward"],"guard. One":["more"],"guard. What":["if"],"guard: that's":["not"],"guarded `count`":["fn"],"guarded `count`,":["this"],"guarded clauses":["in"],"guarded version":["of"],"guarding against":["nil","nil"],"guarding for":["the"],"guarding with":["is_binary/1"],"guards `when":["is_binary(target)`."],"guards and":["see"],"guards are":["never","restricted","a","rather"],"guards as":["the"],"guards besides":["'is_*'."],"guards but":["it","that","no"],"guards directly":["on","on"],"guards everywhere":["instead"],"guards for":["validate?"],"guards if":["you"],"guards in":["some","Elixir?"],"guards instead.":["However"],"guards on":["the","bottle()"],"guards or":["pattern"],"guards rather":["than"],"guards syntax":["should"],"guards to":["define","simplify"],"guards where":["I'm"],"guards will":["do"],"guards without":["any"],"guards you'd":["need"],"guards, better":["use"],"guards, but":["I","we"],"guards, mostly":["arithmetic,"],"guards, or":["if"],"guards. However,":["I"],"guards. I":["don't"],"guards. Much":["neater!"],"guards/pattern matching":["make"],"guess I":["am","don't","need","am","moved","don't","could","clicked","could","was","could","think","should","was","was","should've"],"guess I'm":["happy","so"],"guess `result`":["could've"],"guess a":["git"],"guess for":["elixir"],"guess i":["picked"],"guess in":["the"],"guess is":["should","that"],"guess it":["from","is"],"guess it's":["a","usually","sort"],"guess not":["the"],"guess that":["I","in"],"guess that's":["why"],"guess the":["intention"],"guess this":["has","got","is"],"guess you":["learn","would","wouldn't"],"guess you're":["trying"],"guess, but":["I"],"guess, considering":["that"],"guess, that":["would"],"guessing I":["would"],"guessing that":["you"],"guessing this":["won't"],"guessing what":["goes"],"guessing you":["might","can"],"guidance on":["this"],"guide people":["away"],"guide stuff":["is"],"guide that":["you"],"guide where":["the"],"guide! See":["here:"],"guide. You":["all"],"guide: http://elixir-lang.org/getting_started/2.html.":["Just"],"guidelines /":["patterns?"],"guidelines for":["when"],"guilty but":["I"],"guy) `alphabetize`":["is"],"guys are":["definitely"],"guys! Will":["be"],"guys. Forgot":["to"],"guys. I've":["submitted"],"guys. Well,":["I"],"gvaughn's suggestion":["of"],"h =":["first"],"h) -\u003e":["..."],"ha ,":["I"],"ha, thanks":["for"],"habit of":["avoiding","using","adding","trying"],"habit to":["get","form,","put","take","get"],"habit with":["parens"],"habit yet.":["Thanks!"],"hack I":["have"],"hack to":["me."],"hacking around":["to"],"hackish since":["this"],"hacks to":["use"],"had 9":["test"],"had `Enum.reverse":["|&gt;"],"had `respond_to":["Phrase.new(something)`)"],"had a":["markdown","cool","good","big","PR","PR","case","big","slightly","nicer","`zip`","hard","look","plural","list","range","lot","much","different","bit","bit","data"],"had an":["`update`","old","old"],"had been":["playing","using"],"had common":["regex","regex"],"had doubts":["about"],"had exactly":["the"],"had failing":["tests"],"had ideas":["for"],"had in":["mind?","mind","some"],"had interpreted":["that"],"had it":["in","in"],"had mentioned":["before,"],"had names!":["This"],"had non-ascii":["characters?"],"had not":["yet"],"had one":["spec"],"had originally":["written"],"had privates,":["so"],"had problems":["with"],"had pushed":["up"],"had second":["thoughts"],"had seen":["people"],"had set":["up"],"had some":["thoughts","issues"],"had something":["like","in","to"],"had submitted":["this"],"had tests":["for"],"had that":["initially."],"had the":["same","3","equivalent","attribute","bit"],"had this":["kata,"],"had though.":["For"],"had thought":["about"],"had to":["type","get","be","convert","handle","cut/paste","think","use","support","`Enum.at(earth_year_fraction,","and","look","do","scan","update","implement","use","take","go","use","move","say","use","explicitly","change","pass","have","research"],"had tried":["using"],"had trouble":["deciding"],"had used":["`Regex.split`","`^`"],"had was":["that"],"had with":["other"],"had you":["wondering"],"hadn't come":["across"],"hadn't considered":["it.","that"],"hadn't heard":["of,"],"hadn't know":["you"],"hadn't known":["about"],"hadn't learnt":["about","the"],"hadn't seen":["`HashDict.new`","`Enum.map_join`"],"hadn't thanks!":["*updating*"],"hadn't thought":["to","about"],"hadn't touched":["Elixir"],"hahahah no":["problem,"],"hair) both":["`Regex.match?(%r/\\pL/,"],"hairiness to":["the"],"half as":["much"],"half the":["fun!)","list).","people"],"halfway down":["this"],"hammer and":["all"],"hand ,":["the"],"hand is":["considered"],"hand it's":["not"],"hand only":["has","has"],"hand side":["value:"],"hand two":["different"],"hand, taken":["as"],"hand, you'd":["still"],"hand-rolling a":["byte"],"hand. Refactoring":["comes"],"handed. I":["can"],"handful of":["core","safe"],"handing bad":["input"],"handle `==`":["and"],"handle `Beer.sing(5,95)`,":["wrapping"],"handle a":["whitespace-only","string","Range"],"handle any":["Enumerable"],"handle both":["binaries","nils","lists"],"handle e.g.":["sets"],"handle empty":["strings"],"handle invalid":["unicode,"],"handle it":["and"],"handle nested":["lists"],"handle nil":["at"],"handle other":["languages?"],"handle shouting":["properly."],"handle strings":["containing"],"handle strings/unicode":["correctly"],"handle that":["case.","case."],"handle the":["case","edge","`close_bank`"],"handle this":["case","type"],"handle this.":["Any"],"handle variations":["in"],"handle words":["where"],"handle_keywords, plus":["a"],"handled in":["one","the"],"handled separately;":["the"],"handled the":["\"\""],"handled this":["problem"],"handled, perhaps":["you"],"handled; then":["there"],"handles `&amp;1`-type":["directives"],"handles all":["of"],"handles everything":["else."],"handles nil":["inputs","and"],"handles that":["for"],"handles the":["reduce","nested"],"handling behaviour":["of"],"handling non-ascii,":["UTF8"],"handling one":["step"],"handling other":["beverage"],"handling the":["nil","downcasing","empty"],"handling things":["this"],"handling variable":["length"],"handling, do":["you"],"hands off":["that"],"handy `reduce_with/3`":["method."],"handy for":["predicate","sure.","that."],"handy methods":["that"],"handy on":["their"],"handy, do":["you"],"hang it":["on"],"hang of":["Elixir,","using"],"happen by":["way"],"happen duplicating":["the"],"happen if":["you","somebody"],"happen to":["like","have"],"happen with":["the","the"],"happen. What":["version"],"happened in":["another"],"happening than":["Regex.scan."],"happening there.":["Even"],"happening without":["me"],"happening. I'm":["not"],"happens for":["input"],"happens if":["you","the","the","they"],"happens next?":[":)"],"happens to":["equal","be","be","use."],"happens when":["replacing","the","there","text","you","you","you","you","you"],"happens with":["a","a","non-English","a","a","a","`keep([1,2,3,4],","the","the"],"happier about":["the"],"happily I":["found"],"happily accepted.":["Thanks!"],"happy :).":["Overall"],"happy about":["the","that,","this"],"happy feeling.":["Look"],"happy new":["year"],"happy that":["is_shouting"],"happy to":["agree","say","say","say","be"],"happy with":["how","this","this","@magali","this","this.","the","my","the","the","the","the","the","that","the","how","the","short","this,","my","`concat`,","it"],"happy with.":["I"],"happy?\" what":["reply"],"hard for":["me"],"hard functions":["to"],"hard on":["readability.","a"],"hard put":["one.Perhaps"],"hard time":["consolidating","finding","explaining","explaining","coming"],"hard to":["understand","read","tell,","read,","see","see","read","comprehend","parse","debug","let","find","get","follow","see","read/maintain/understand","put","follow.","read","comprehend.","name","talk"],"hard way":["and"],"hard your":["code"],"hard, I":["was"],"hard, but":["I'm"],"hard-coding text":["into"],"hard. There's":["probably"],"hard...I think":["my"],"hardcoded range":["but"],"hardcoding responses":["into"],"harder for":["me"],"harder to":["see","understand","glance","read","read","read","notice","read","understand","read"],"harder which":["especially"],"hardest part":["was"],"hardest to":["manually"],"hardly know":["Elixir."],"harm in":["using"],"has 2":["spaces"],"has `?`":["?"],"has `O(n*m)`":["complexity,"],"has a":["callback","`cond`","superfluous","different","built-in","pretty","catch","problem","base","grasp","greater","certain","few","concept","bit","list","list"],"has actually":["been"],"has all":["the"],"has already":["been"],"has always":["been"],"has an":["alias"],"has any":["opinions","recommendations."],"has anything":["to"],"has become":["silence?","Heard,"],"has become?":[":)"],"has been":["removed.","iterated","deprecated","on","traversed.","traversed.","traversed.","traversed.","traversed."],"has better":["readability"],"has both":["shouting"],"has changed":["to"],"has comprehensions":["that"],"has different":["syntax,"],"has enough":["edge"],"has failed":["to"],"has finally":["turned"],"has good":["support"],"has helpers":["for"],"has its":["own"],"has less":["to"],"has lowercase":["letters"],"has messages,":["sentences"],"has more":["to","to","to"],"has mostly":["been"],"has never":["seen"],"has no":["idea"],"has not":["`Dict`"],"has now":["been"],"has on":["how"],"has one":["argument.","case"],"has only":["limited"],"has openly":["acknowledged"],"has pretty":["few"],"has problems":["with"],"has quadratic":["time","complexity.","time"],"has since":["been"],"has some":["support","really"],"has something":["to","to","called"],"has state,":["and"],"has string":["interpolation"],"has taken":["after","your"],"has that":["test"],"has the":["word","wrong","[:math](http://www.erlang.org/doc/man/math.html)","extra","wrap/unwrap","same","benefit"],"has to":["do","scan","come","parse","pretty","do","be","be","look","be","be","be.","have","be","be.","be","do","traverse","traverse","be","copy","be","be","be","be"],"has total":["cost"],"has touched":["on"],"has two":["and-ed"],"has written":["a"],"hash be":["the"],"hash is":["created","something"],"hash of":["letter"],"hash with":["word"],"hash), do:":["hash`"],"hash, word,":["1,","1,"],"hash_dict is":["unused."],"hashset with":["a"],"hasn't been":["merged"],"hasn't changed":["so"],"hatch of":["`Enum.to_list`,"],"hate having":["`if"],"hate it":["when"],"hate the":["\"do_X\"","pattern"],"have #anagram_for?":["answer"],"have *a":["lot*"],"have 2":["versions"],"have @magali":["and"],"have Elixir":["0.9"],"have I":["used"],"have Q":["to"],"have `@jamar`":["available"],"have `cond`":["(you're"],"have `not_saying_anything?`,":["etc."],"have a":["better","solution","variable","pretty","PR","strong","really","concept","nice","separate","point.","mix","preference","different","minor","personal","link","good","good","second","much","better","terribly","`Phrase`","good","lot","predicate","weird","couple","string","list","recursion","play","\"?\"","\"preprocess\"","feeling","chance!","version","reason","capture","great","good","look","much","single","zero","built-in","discard","helper","better","good","`String.Chars`","good","lot","lot","reference","note","go","`foo`","conversation","faster","notion","real","super","tree","pretty","key"],"have added":["a"],"have all":["the"],"have almost":["the"],"have also":["used"],"have ambiguities":["when"],"have an":["if","update/2","errant","older","unnecessary","analog","`Enumerable`","`Enumerable`","easy","explicit","\u003ccode\u003einvalid_string?(str)\u003c/code\u003e","example"],"have and":["old"],"have another":["method","idea","go","look"],"have any":["information.","chance","skipped","thoughts","examples","feel","thoughts","way","to","questions,"],"have anything":["in"],"have are":["not"],"have arguments":["(i.e."],"have as":["Rev"],"have at":["least"],"have basically":["the"],"have been":["\"simpler\"","some","updated","some","when","written","inlined","some","written","before","more","obvious!","lurking"],"have better":["performance,"],"have bigger":["less"],"have both":["the"],"have but":["one,"],"have caught":["this"],"have changed.":["This"],"have code":["that"],"have come":["much"],"have comments":["on"],"have compared":["them"],"have completed":["the"],"have completely":["the"],"have default":["values"],"have defined":["it"],"have definitely":["does"],"have deliberately":["stayed"],"have dependencies":["on"],"have developed":["a"],"have different":["tests","upcase"],"have done":["this","it","it","this","is"],"have doubled":["as"],"have duplicate":["downcasing"],"have early":["exit"],"have expected":["the"],"have explicit":["module"],"have expressive":["names."],"have factored":["this"],"have failed":["a"],"have filter":["with"],"have finished":["the"],"have fun":["and","with"],"have given":["up"],"have gone":["on","overboard"],"have gotten":["lost","it"],"have grabbed":["it"],"have had":["in","a","in"],"have have":["picked"],"have here,":["but"],"have ideas":["on"],"have idioms":["yet."],"have implemented":["some","the"],"have in":["mind","lines","`quiet_at_me?/1`.","mind","SpeechAnalyzer"],"have instance":["level"],"have intend":["revealing"],"have is":["a","clear","fine","in"],"have issues.":["Like"],"have it":["all","read","now?"],"have it,":["and"],"have iterators":["in"],"have just":["used"],"have left":["out"],"have less":["places","places"],"have loads":["and"],"have made":["it","it","pair_up"],"have me":["thinking"],"have meaningful":["names."],"have misinterpreted":["the"],"have more":["\"priority\".","sense.","to"],"have moved":["the"],"have much":["to","downsides","of","better","experience"],"have multiple":["versions,","clauses"],"have named":["params."],"have names":["(chars"],"have names)":["and"],"have niceties":["like"],"have no":["idea","problem","idea","idea","problem","idea","experience","idea","difference","idea"],"have not":["removed","removed","tried,","completed","noticed","seen"],"have noticed":["the"],"have now,":["thanks.","but"],"have nudged":["me"],"have nullable":["types"],"have objects.":["In"],"have old":["tests"],"have on":["the"],"have one":["comment/question:","nit","parameter","function?","pattern)"],"have only":["a","one"],"have other":["frequencies","things"],"have over-interpreted":["the"],"have picked":["it"],"have plenty":["of"],"have private":["methods"],"have probably":["missed"],"have progressed":["very"],"have repetition":["in","for"],"have seen":["commonly","so","both.","the"],"have separate":["implementations"],"have separated":["logic"],"have settled":["on"],"have significantly":["more"],"have simple":["solutions."],"have so":["many"],"have solved":["them"],"have some":["difficulty","shared","questions:","\"Greeting.classify\"","benefits","questions!","ideas"],"have someone":["point"],"have something":["to","as","in"],"have started":["seeing"],"have strong":["opinions"],"have submitted":["a"],"have that":["make","terrible","problem.","test","performance","trade","test,"],"have the":["`Enum.to_list`","condition","feeling","right","confidence","\u003ccode\u003eMessage\u003c/code\u003e","table","operation","work","question","\"billion","ampersand","same","annoying","right","most","name","same","last","wrap","same","same","most","function","reminder.","number","`@iliana`","advantage","Russian","\"shouting"],"have their":["uses,"],"have there":["is"],"have these":["viewpoints,"],"have this":["scenario"],"have thought":["of","of","you","to","that","about"],"have thoughts":["on","on"],"have three":["clauses"],"have to":["be","disagree","change","agree","think","conform","worry","work","change","be","piece","use","agree,","maintain","put","suppress","replace","find","wait","do","change","change","update","do","look","map","read","put","strip","re-write","try","be","call","change","do,","add","downcase","ask","go","be","filter.","worry","use","join","first","check","manage","copy","call","change","think","use","write","be","pass","mess","dig","define","do","prefix","benchmark","it's","check","clarify","specify","write","reverse","do","factor","take","update","update","do","explicitly","benchmark","say,"],"have to--that":["the"],"have to.":["A"],"have trouble":["reading"],"have two":["match/2","checks","similar","things","predicate","filters,","clauses","clauses"],"have type":["signatures"],"have ugly":["implementations."],"have unary":["versions."],"have update/0":["and"],"have updated":["my"],"have used":["in","\"_\"","the","the","`ends_with?`","something","the","helper"],"have what":["values."],"have written":["about"],"have yet":["to"],"have you":["heard","checked","considered","considered","considered","seen"],"have your":["responder"],"have zero":["experience"],"have, but":["that"],"have, given":["the"],"have. As":["someone"],"have. If":["this"],"haven't actually":["done"],"haven't been":["doing","giving"],"haven't checked":["if","whether"],"haven't completed":["an"],"haven't considered":["that"],"haven't convinced":["myself"],"haven't explored":["too"],"haven't found":["a","a"],"haven't got":["a"],"haven't looked":["around"],"haven't personally":["tested"],"haven't picked":["up"],"haven't really":["learned"],"haven't seem":["someone"],"haven't seen":["that","the","the","many","before.","the"],"haven't spent":["the","time"],"haven't successfully":["parsed"],"haven't thought":["of"],"haven't used":["`String#graphemes`","it"],"haven't wrapped":["my"],"haven´t aversion":["to"],"having \"import":["String\""],"having #anagram_for":["return"],"having Cell":["be"],"having `counter`,":["just"],"having `discard`":["just"],"having `do_match`,":["since"],"having `if":[".."],"having `nucleotide_counts`":["re-use","lean","only"],"having `to_words`":["return"],"having a":["`cond`","hard","module","`Phrase.new`","`MultiSet`","different","limited","function","nice","separate","hard","hard"],"having an":["extra"],"having any":["special"],"having conditional":["statements"],"having exercises":["with"],"having extracted":["the"],"having it":["pointed","inline.","as"],"having module":["names"],"having much":["more"],"having parentheses":["also","around"],"having said":["that"],"having that":["in","extra"],"having the":["guards","message","functions","conditional","public","`hey/1","same","`identical?`","`Greeting`","newline","`@`"],"having them":["separate","nearer","there"],"having this":["accepted,"],"having to":["read","use","manually","put","re-set","pass","create","compare","refactor","parse","guess,","enumerate","pass","iterate","convert","define","do","do","throw","read"],"having trouble":["seeing","working"],"having two":["conditions","base"],"having very":["little"],"having well-named":["methods"],"having your":["new","expected"],"haywire. I":["don't"],"hd functions":["to"],"he had":["used"],"he hears,":["then"],"he is":["being"],"he makes":["the"],"he puts":["the"],"he really":["care"],"he was":["designing"],"he would":["call"],"he/she will":["be"],"head (the":["part"],"head ::":["[binary,"],"head against":["that","the"],"head around":["it","the","elixir."],"head matching":["or","to"],"head of":["the","the","`def`s","the","a"],"head that":["the"],"head with":["no"],"head |":["tail","tail]`","filter(tail,","tail","tail"],"head, i":["wanted"],"head, instead":["of"],"head, then":["your"],"head: `Regex.scan(%r/([\\p{L}\\p{N}]+)/)":["|\u003e"],"heads instead":["of"],"heads the":["same"],"heads up":["on"],"heads up.":[":)"],"heads. I":["will"],"heads. This":["problem"],"hear about":["graphemes.","short"],"hear from":["more"],"hear how":["I","I"],"hear it":["the"],"hear more":["ideas"],"hear that":["the"],"hear the":["exercise"],"hear them,":["if"],"hear your":["thoughts."],"heard about":["`cond`"],"heard in":["the"],"heard of":["the"],"heard of,":["or"],"heard people":["discuss"],"hearing, it":["feels"],"hearing, whereas":["the"],"hearing. What":["would"],"hears, then":["`_empty?`"],"hears. `void?`":["seems"],"heart of":["this"],"heavy handed.":["I"],"heck I":["was"],"hectic day":["yesterday."],"height of":["great"],"hell can":["pretty"],"hell is":["documented"],"hell out":["of"],"help I":["ended"],"help a":["future","developer"],"help at":["all,"],"help but":["I","feel"],"help getting":["to"],"help improve":["already","this"],"help make":["`verse`","the"],"help making":["the"],"help me":["understand","work","work","build"],"help myself.":["I'm"],"help or":["pointers"],"help out":["here.","in","with"],"help simplify":["this?","things","what"],"help the":["code,","reader"],"help to":["the","work","make","make","make","think"],"help train":["you"],"help via":["Dict.update."],"help while":["refactoring"],"help with":["the","that.","conciseness:","simplifying."],"help would":["be"],"help you":["simplify","get","along.","remove","understand","write","clean","make","find"],"help your":["reduce"],"help, but":["this"],"help, to":["both"],"help. **note**":["concat"],"help. All":["regex"],"help. It":["also"],"helped make":["the"],"helper for":["`foo`)."],"helper function":["with","perhaps?","perhaps?","vs.","for","`bottle`","that","to","is","for,","such","for"],"helper function,":["you"],"helper function.":["Thanks"],"helper functions":["used","making","private","to","here","are","directly","for","to","private"],"helper functions,":["`defp"],"helper functions.":["Here's"],"helper method:":["`dna_string_to_char`."],"helper methods":["to","back","are"],"helper methods,":["the"],"helper methods.":["Instead,"],"helper module":["I"],"helper once":["more"],"helper private":["method."],"helper. I'll":["submit"],"helpers `do_foo`":["instead"],"helpers for":["iterating","`hey/1`."],"helpers private":["methods.And"],"helpers with":["intention"],"helpers. I'm":["just"],"helpers. What":["do"],"helpful at":["catching"],"helpful descriptive":["names?"],"helpful feedback":["with"],"helpful for":["`add_or_increment_entry`."],"helpful nitpicks":["I"],"helpful to":["hear","simplify"],"helpful? Do":["the"],"helping manage":["the"],"helping me":["think"],"helping me.":["It's"],"helps distinguish":["for"],"helps for":["the"],"helps improve":["the"],"helps me":["write"],"helps or":["makes"],"helps readability":["specially","with","specially","to"],"helps signify":["that"],"helps simplify":["your"],"helps to":["start"],"helps with":["readability","readability","the"],"helps, it":["would"],"helps, making":["sure"],"helps. Feel":["free"],"helps. If":["you"],"hence making":["the"],"hence my":["setup."],"here (sorry":["@kayla!)"],"here (there":["are"],"here .An":["also"],"here @abner?":["Converting"],"here a":["little."],"here about":["whether"],"here and":["keep","there","have","there.","a","there"],"here any":["tips"],"here anyway,":["at"],"here as":["a","it"],"here because":["it"],"here being":["at"],"here btw.":["It"],"here but":["unless","calling","I"],"here by":["renaming","splitting"],"here due":["to"],"here either":["but"],"here for":["testing"],"here for.":[":)"],"here i":["was"],"here instead":["of","of"],"here is":["a","a","to","probably","that","the","to","to","uncommon.","to","that","that"],"here it's":["more"],"here looks":["great,","amazing."],"here makes":["the"],"here reads":["better"],"here so":["much","that","I"],"here than":["guard"],"here that":["decrease"],"here to":["learn!","reduce","be","make","be"],"here when":["stdlib"],"here while":["cond"],"here\" syntax":["of"],"here's a":["Bitwise"],"here's how":["`Enum.to_list`","I"],"here's some":["feedback"],"here's the":["shouting"],"here's what":["happens","happens"],"here) and":["putting"],"here) both":["can"],"here, I":["think."],"here, although":["you"],"here, and":["be","this","in"],"here, but":["I","I'll","it","I","the","it","hope"],"here, for":["scan"],"here, it's":["not","slightly","totally","`:gen_event`."],"here, just":["on"],"here, primarily":["since"],"here, since":["you"],"here, so":["I","will","ended"],"here, you":["clearly"],"here, you'll":["just"],"here. And":["you"],"here. But":["your"],"here. Could":["please"],"here. I":["also"],"here. Initially,":["I"],"here. It's":["just"],"here. Maybe":["the"],"here. One":["thought"],"here. Perhaps":["if"],"here. Still":["digging"],"here. Thanks":["for"],"here. That's":["pretty","not"],"here. The":["main"],"here. There":["isn't"],"here. Therefore,":["if"],"here. You":["might"],"here. the":["last"],"here...I've seen":["a"],"here: `String.ends_with?`,":["`String.strip`."],"here: using":["some"],"here? I":["don´t"],"here? I'm":["somewhat"],"here? Section":["6.7"],"heredoc and":["doctest."],"heredoc for":["laying"],"heredoc implementation":["supports"],"heredoc would":["help"],"herself actually)":["pointed"],"hesitated and":["finally"],"hey and":["one"],"hey default":["values"],"hey function":["reads:","and","\"tell"],"hey method":["on","as"],"hey private?":["Maybe"],"hey with":["nil."],"hey(\"\"), do:":["hey"],"hey(...) implementation":["into"],"hey(nil), do:":["@johann"],"hey(something //":["\"\")"],"hey, but":["forgot"],"hey, it":["works."],"hey, it's":["the"],"hey, you":["wont"],"hey. But":["I"],"hey? My":["version"],"hidden by":["the"],"hidden from":["you"],"hide an":["attribute"],"hide attributes":["behind"],"hide the":["implentation","simplicity"],"hides the":["extra","complication"],"hiding it":["in"],"hiding the":["helper","implementation"],"high and":["low"],"high level":["goals"],"high-level intent":["of"],"higher difficulty":["level."],"higher level":["version","function","functions"],"higher order":["functions.","functions","function","functions.","functions","functions.","functions","functions"],"higher than":["10"],"higher up":["the"],"higher-order fold":["or"],"higher-order function":["`matches?/1`"],"highly recommend":["Dave"],"him; it":["doesn't"],"hinder your":["immediate"],"hint about":["```HashDict.update```."],"hint as":["to"],"hint because":["I"],"hint is":["that"],"hint there":[":)."],"hint you're":["giving"],"hint, that":["was"],"hint, you":["may"],"hint: use":["pattern"],"hinting at":["their"],"hinting at.":["In"],"hints (thanks":["a"],"hints -":["or"],"hints on":["how"],"hints to":["inline","pass"],"hints! Updated":["the"],"his Peepcode":["screencast,"],"his language":["repository"],"his name":["for"],"his way,":["just"],"history which":["is"],"hit a":["bug","roadblock"],"hit sooner":["or"],"hit the":["`interpret/2`","expected","range"],"hmm, part":["of"],"hold the":["most"],"holds enough":["hints"],"holds the":["pid"],"hole) back":["toward"],"holiday for":["a"],"holiday later":["this"],"honest I":["haven't","can't","don't"],"honest, I":["don't"],"honest, I'm":["not"],"honest, I've":["not"],"honestly I":["prefer"],"honestly don't":["see","know","know"],"honestly had":["to"],"honestly have":["zero"],"honestly learn":["more"],"honestly, but":["I'm"],"honor the":["80"],"hope for":["this"],"hope that":["someone"],"hope that's":["ok."],"hope there's":["a"],"hope this":["works)","is"],"hope to":["get"],"hope you'll":["stay"],"hopefully it":["will"],"hopefully make":["it"],"hopefully the":["incoming"],"hoping for":["some"],"hoping it":["would"],"hoping more":["for"],"hoping something":["like"],"hoping to":["use"],"horizontal space,":["but"],"horrible to":["maintain."],"horrible, I":["can"],"horribly! But":["I"],"hot on":["Elixir."],"hours of":["searching"],"hours, I":["resorted"],"hours, but":["I"],"how #anagrams?":["works"],"how Bob":["would","thinks"],"how Elixir":["code"],"how I":["feel","could","can","could","could","would","solved","wrote","might","feel","did","could","understand","solved","work","could","ended","can","would","yearn","implemented","avoided","would","feel","went","could","can","can"],"how I'd":["write"],"how Message":["fit"],"how String.upcase":["could"],"how UTF-8":["works,"],"how `++`/`append`":["works."],"how `Enum.to_list`":["could"],"how `List#foldl`":["works,"],"how `[]`":["works"],"how `bitstring_to_list`":["can"],"how `cond`":["fit"],"how `filter`":["is"],"how `match`":["looks"],"how `run`":["works"],"how `silence?\\1`":["is"],"how about":["pattern","moving","making","matching"],"how all":["the","the"],"how are":["things?","you"],"how badly":["I"],"how beautiful":["your"],"how big":["would"],"how concerns":["should"],"how difficult":["that"],"how does":["that"],"how elixir's":["`|\u003e`"],"how else":["you","to"],"how expressive":["this"],"how for":["each","each","each","each","each"],"how functions":["are"],"how hard":["your"],"how having":["the"],"how idiomatic":["this"],"how it":["works","supports","would","deals","works.","behaves","works.","could","could","made","reads","reads:","is","would","would","reads.","works"],"how it's":["better"],"how likely":["is"],"how lists":["are","work","work"],"how macros":["work."],"how many":["parameters","variables","places","places","steps","there","people"],"how much":["weight","fun","you'll"],"how my":["next"],"how often":["they"],"how or":["where"],"how pattern":["matching"],"how people":["already"],"how plain":["the"],"how short":["an"],"how smart":["Elixir/Erlang"],"how something":["is"],"how succinct":["Elixir"],"how that":["feels?","construct","conversion","could","shorthand","looks."],"how the":["hey","current","\u003ccode\u003e\u003c=\u003c/code\u003e","pattern","pipeline","code","reduce","whole","accumulator","`number`","list"],"how they":["do","worked.","look.","are"],"how they're":["using"],"how things":["turned","would"],"how this":["handles","could","shaped","would"],"how to":["use","make","use","do","utilize","specify","use","do","write","use","make","use","do","do","format","shorten","handle","bring","use","do","compose","submit","handle","parse","convert/cast","ensure","respond","decipher","break","update","update","use","use","apply","fix","update","pull","apply","go","do","do","do","make","sort","do","eliminate","reduce.","make","use","make","spec","maximize","parse","convert","get","work","get","do","get","review","properly","make","use","make","fix"],"how we":["all"],"how well":["they"],"how would":["I","this","it","you","you"],"how you":["separated","see","would","feel","pipe","explain","have","pulled","might","got","could","used","can","are","want","have","do","did","explained"],"how you'd":["merge"],"how you're":["working"],"how you've":["broken","split","done","assigned"],"how your":["code","code","code"],"how yours":["keeps"],"how. I":["might"],"how...and I'm":["not"],"how/if there":["was"],"however I":["was"],"however you":["only","need..."],"however, and":["I'll"],"however, behind":["the"],"however, do":["those"],"however, feel":["like"],"however, if":["the"],"however, that":["calling"],"html tag":["so"],"http://elixir-lang.org/crash-course.html and":["Benjamin"],"http://elixir-lang.org/docs/stable/ for":["the"],"http://elixir-lang.org/docs/stable/Kernel.html#|&gt;/2 Replace":["`&gt;`"],"http://elixir-lang.org/getting_started/2.html section":["2.6.2"],"http://elixir-lang.org/getting_started/2.html, section":["2.6.2)"],"http://elixir-lang.org/getting_started/2.html. Just":["do"],"http://elixir-lang.org/getting_started/4.html for":["more"],"http://exercism.io/submissions/522faad3b432ab395a000265 )":["is"],"http://exercism.io/submissions/c1fc255d0be5a82dbc0033d9. I":["thought"],"http://rubular.com/ because":["the"],"http://stackoverflow.com/questions/4092113/how-to-reverse-a-list to":["get"],"http://www.erlang.org/doc/efficiency_guide/myths.html#id61501. It":["seems"],"http://www.erlang.org/doc/man/re.html or":["check"],"http://www.regular-expressions.info, there's":["quite"],"huge fan":["of"],"huge for":["a","a","a","a","a"],"huge list":["of","of"],"huge lists.":["I'm"],"huge numbers,":["but","but","but","but","but"],"huge time":["waste","waste"],"human-written phrases.":["What"],"hurdle in":["getting"],"hurried through":["the"],"hurry when":["I"],"hurt and":["would"],"hurt though,":["correct?"],"hurt to":["change"],"hurts performance":["by"],"hurts readability":["really"],"hurts readability)":["and"],"hypens and":["unicode."],"hyphen and":["many"],"hyphen either,":["but"],"hyphen is":["part"],"hyphen isn't,":["even"],"hyphens (such":["as"],"hyphens. So":["\"co-operative\""],"hypothetical programmer":["have"],"hé, j'ai":["à"],"i added":["another"],"i am":["new"],"i can":["catch","figure","not","point"],"i can't":["remember"],"i complete":["them"],"i couldn't":["figure"],"i did":["a","it"],"i do":["not"],"i don't":["need"],"i forgot":["about"],"i found":["out"],"i guess":["i"],"i had":["with","a"],"i knew":["relatively"],"i like":["the"],"i personally":["think"],"i picked":["the"],"i realise":["that"],"i submitted":["before"],"i think":["it's","it"],"i thought":["It"],"i tried":["to"],"i updated":["the"],"i uploaded":["new"],"i used":["`\"`"],"i wanted":["an"],"i was":["already","trying","pointed","wondering"],"i will":["convert","submit"],"i }":["inlist","inlist"],"i'll leave":["it"],"i'm curious,":["in"],"i'm fixing":["that."],"i'm happy":["with."],"i'm having":["a"],"i've now":["refactored"],"i.e. `CustomSet.intersection(s1,":["s1)`"],"i.e. `defp":["do_reverse([h"],"i.e. loading":["the"],"i.e. to":["allow"],"i.e., just":["pass"],"i18n in":["this"],"i18n, you":["wouldn't"],"iMac, I":["rewrote"],"idea about":["utf-8,","`Enum.reduce`"],"idea and":["good","will"],"idea because":["nobody"],"idea behind":["it?","your"],"idea but":["no"],"idea even":["if"],"idea for":["how"],"idea how":["to","to","difficult"],"idea in":["a","Elixir.","mind,"],"idea is":["to","to","that","that","to"],"idea not":["to"],"idea of":["\"\"","my","using","having","the","the","`Dict`","sorting","how","what","what","having"],"idea that":["I'm"],"idea to":["do","move","create","abstract","me.","put","extract","break","get","be","validate","keep","refactor"],"idea using":["`cond`"],"idea was":["that","to","that","to","that"],"idea what":["the","the","it's","`new/2`","I'm","to"],"idea where":["it's","it"],"idea why":["pattern","pattern"],"idea! Haven't":["played"],"idea! Now":["it"],"idea! What":["do"],"idea, I":["like","did"],"idea, in":["this"],"idea, still":["trying"],"idea, thanks":[":)"],"idea, thanks!":[":)"],"idea, unless":["the"],"idea. Here's":["the"],"idea. I":["wonder","suppose","never"],"idea. I'll":["try"],"idea. In":["that"],"idea. Interestingly":["I"],"idea. That":["way"],"idea... many":["other"],"idea; why":["have"],"ideal having":["to"],"ideas about":["the"],"ideas behind":["gen_server."],"ideas for":["consuming","improving"],"ideas of":["when"],"ideas on":["improving","how"],"ideas. Also":["any"],"identical except":["for","for"],"identical test":["will"],"identical to":["my"],"identical with":["the"],"identical. The":["only"],"identicality rejection.":["That"],"identification and":["response"],"identified as":["shouting."],"identified by":["their"],"identifier is":["used"],"identifiers are":["not","good."],"identify chaining,":["leading"],"identify groups":["of"],"identify the":["type","type"],"identify those":["things."],"identifying what":["you"],"identity vs":["property."],"idiom in":["the"],"idiom would":["be?"],"idiom yet.":["I"],"idiomatic Elixir":[":-)","to","to","to","is","is.","style,","code.","code"],"idiomatic Elixir)":["design"],"idiomatic Ruby":["in"],"idiomatic and":["what","more"],"idiomatic approach":["to","this"],"idiomatic at":["all.","this"],"idiomatic code.":["I"],"idiomatic elixir":["like","and","when"],"idiomatic elixir.":["Just"],"idiomatic for":["all"],"idiomatic or":["clear"],"idiomatic solution":["available."],"idiomatic thing":["was/is"],"idiomatic this":["code"],"idiomatic to":["elixir.","re-use","align","use","call","always","call","put"],"idiomatic way":["is","to","to"],"idiomatic, but":["it"],"idiomatically written":["as","`Enum.sort`"],"idiomatically. I":["am"],"idioms and":["style."],"idioms in":["one","another."],"idioms of":["the"],"idioms or":["the"],"idioms yet.":["But"],"idioms, so":["I"],"idioms, solution":["looks"],"idioms. Should":["I"],"iex and":["tried"],"iex to":["play"],"iex&gt; Teenager.hey(\"A":["typical"],"iex&gt; words":["=","="],"iex(1)\u003e a..b":["="],"iex(1)\u003e nil":["=","="],"iex(1)\u003e str":["="],"iex(2)\u003e :math.pow(2,64)":["=="],"iex(2)\u003e Regex.split(%r/\\W+/,":["str)"],"iex(25)\u003e binary_to_list":["\"да"],"iex(27)\u003e :unicode.characters_to_list(\"да":["нет\")"],"iex\u003e Phone.number(\"+1":["(303)"],"iex\u003e Regex.scan(%r/\\d/,":["\"12-345-678\")"],"iex\u003e Teenager.hey":["\"Am"],"if !silence?(speech)":["do"],"if (String.upcase(phrase)":["=="],"if (and":["also"],"if ...":["else"],"if ...`":["kind"],"if :calendar.valid_date(year,":["month,","month,"],"if Elixir":["provides"],"if I":["was","decide","understand","was","can","like","prefer","can","could","rearrange","sound","don't","amp","think","like","did","do","use","have","could","can","recall","got","knew","should","asked","said","can","personally","don't","passed","there's","needed","say","agree","really","had","can","had","moved","qualify","can","want","can't","did","didn't"],"if I'm":["wrong),","wrong).","being","using"],"if I've":["gotten"],"if P":["(`word"],"if `String.replace(%r/\\P{L}/)`":["is"],"if `String`":["had"],"if ```":["Dict.update"],"if ```hey(\"\")```":["was"],"if `joined`":["is"],"if `update_count`":["and"],"if a":["string","string","string","string","string","sentence","sentence","string","string","HashDict","collection","function","number","string","function"],"if an":["extract","empty","example","entire","empty"],"if anyone":["ever","ever","can","can","else","knows","has"],"if at":["all"],"if benchmarking":["showed"],"if both":["operands"],"if but":["you'd"],"if called":["from"],"if conversion":["fails)."],"if converted":["to","to","to"],"if d,":["do:","do:"],"if different":["names"],"if divides?(n,":["d),"],"if e.g.":["\"HEY"],"if elixir":["had"],"if expression":["though,"],"if extract":["the"],"if f.(h)":["do"],"if fifth_date":["&&","&&"],"if flag_set(score,":["flag),"],"if here":["while"],"if i":["can"],"if in":["a","doubt","filter"],"if is":["an"],"if it":["is","receives","were","adds","were","was","is","is","were","is","gains","exists,","doesn't.","would","lets","becomes","is","does","can","has","was","were","was","was","contains","improved","was","wasn't","doesn't","works.","contains","has"],"if it's":["a","better.","an","like","a","good","better","a","`(String.strip(greeting)","wise","residual","possible","matched,"],"if letter_freq(source)":["is"],"if makes":["me"],"if memoization":["and"],"if mutation":["took"],"if my":["terminology","initial"],"if necessary).":["Specifically"],"if nil":["is","is"],"if no":["previous"],"if non-unique":["elements"],"if not":["wrapped","the"],"if not,":["it's"],"if offers":["a"],"if often":["as"],"if only":["as","a"],"if or":["cond."],"if parentheses":["were"],"if people":["want"],"if possible.":["`Dict`"],"if read":["inline."],"if rewrite":["it"],"if silence?(letters)`":["but"],"if some":["of"],"if somebody":["uses"],"if someone":["is","tells"],"if something":["is","complains."],"if statement":["in","in","is"],"if statements":["in"],"if statements,":["and"],"if statements.":["`question?/1`"],"if string":["is"],"if such":["a"],"if that":["represents","would","helps","would","applies","helps","fails","isn't"],"if that's":["still","what","not","the","causing","a","just","better","not"],"if the":["words","conditions","second","requirements","`match`","key","requirements","string","key","function","requirements","test","string","tests","phrase","language","code","string","second","compiler","strings","resulting","order","order","input","only","prince","attributes","input","nucleotides","lowest","string","conversion","conversion","condition","exercise","test","HashSet","last","last","placeholder","input","uppercase","truth","accumulator","last","key","number","list","reader","last","string","last","empty","Teenager","string"],"if there":["are","are","are","are","are","were","is","is","was","is","is","are","was","was","is","is","was","is","are","is","were","are","was"],"if there's":["just","a","a","a","at"],"if these":["three"],"if they":["are","don't","are","flowed","not","are","were","don't","are","are","add"],"if they're":["mutually","available"],"if this":["is","were","is","code"],"if those":["would"],"if two":["of"],"if up":["cased"],"if using":["binaries","the"],"if we":["should","ever","sort"],"if we're":["using"],"if with":["a"],"if you":["took","input","extracted","put","move","got","wanted","needed","play","pattern","had","use","fed","think","feel","moved","prepend","haven't.","do","kept","just","break","go","used","want","know","wanted","can","are","moved","can","use","used","wrapped","are","have","have","can","put","use","wanted","have","used","wanted","will","put","notice","put","do","use","pass","delete","know","want","decide","would","have","use","use","extracted","use","had","want.","use","think","extract","inline","find","like","think","explicitly","need","find","reverse","can","get","can","absolutely","did","were","were","made","just","use","find","like","can't","use","do","do","call","write","want","look","have","want","ever","have","do","don't","decide","have","might","need","still","wanted","like","have","need","get","don't","use","feel","do","use","wanted","wanted","want","change","change","have","already","do","didn't","had","wanted","wanted","already","wanted"],"if you'd":["like","like","like"],"if you'll":["excuse"],"if you're":["satisfied","going","writing","not","interfacing","trying","connecting","not","writing","only","willing"],"if you've":["got","refactored"],"if your":["implementation","code","code"],"if's and":["look"],"if, else,":["end"],"if-do-else-end form.":["It's"],"if-else in":["a"],"if-statement and":["a"],"if-statement is":["how"],"if-statments. I":["couldn't"],"if-tree or":["using"],"if. Did":["you"],"if. I":["also"],"if/else -&gt;":["case?"],"if/else block":["inside"],"if/else statements.":["Can"],"if/else, case,":["cond"],"if/else, when":["cond"],"if/when you":["upgrade."],"if` concept,":["check"],"if` flow":["you"],"if` in":["the"],"if`. Check":["out"],"if`s. Thanks":["for"],"ifs and":["that"],"ifs nested":["inside"],"ifs. I'm":["assuming"],"ignore any":["extra"],"ignore the":["extension","supplied"],"ignore this":["if"],"ignore this,":["was"],"ignored -\u003e":["(http://elixir-lang.org/docs/stable/String.html#split/1)"],"ignored. I":["might"],"ignoring or":["removing"],"ignoring the":["variable."],"illustrate how":["short"],"illustrate this":["problem"],"im missing":["something"],"imagination on":["my"],"imagine how":["to","else"],"imagine it's":["a"],"imagine that":["it"],"imagine you":["could"],"immediate understanding":["of"],"immediately apparent":["to"],"immediately clear":["to","what"],"immediately comprehensible.":["It"],"immediately make":["use"],"immediately obvious":["what's"],"immediately returns":["2","2","`[]`,","2","2","2"],"immediately say":["\"ah,"],"immediately use.":["Rather"],"immediately which":["one"],"immutable linked":["lists."],"immutable, its":["result"],"immutable. For":["example,"],"immutable. That":["might"],"imperative, my":["test"],"implement 'up',":["so"],"implement String#graphmemes":["-"],"implement `Teenger.empty?/1`":["makes"],"implement `append`":["and"],"implement `concat`":["in","fairly"],"implement `parse`.":["Right"],"implement `split`":["using"],"implement a":["similar","generic"],"implement almost":["everything"],"implement another":["will"],"implement both.":["Enum.reduce"],"implement concat":["by"],"implement discard":["in"],"implement everything":["with"],"implement it":["without","in"],"implement most/all":["of"],"implement my":["own"],"implement that":["behavior,","it","without"],"implement the":["OTP","other"],"implement them":["-"],"implement this":["using"],"implement this,":["so"],"implement this.":["Absolutely"],"implement with":["`keep`"],"implement your":["protocol"],"implement. Maybe":["get"],"implement.) It'd":["be"],"implementation (Enum":["instead"],"implementation (at":["least"],"implementation (not":["using"],"implementation I":["think","came","wrote"],"implementation a":["bit."],"implementation allows":["outside"],"implementation and":["I"],"implementation and/or":["the"],"implementation as":["a"],"implementation at":["all)."],"implementation based":["on","on"],"implementation basically":["works"],"implementation before":["I"],"implementation but":["only"],"implementation calls":["`HashDict.get`."],"implementation change,":["that's"],"implementation checks":["for,"],"implementation describes":["itself"],"implementation detail":["that","to"],"implementation detail.":["I"],"implementation details":["of","a","of","with","(L16"],"implementation details.":["What"],"implementation expects":["a"],"implementation for":["the","intersect/union/subtract/addition,"],"implementation got":["driven"],"implementation in":["Erlang"],"implementation inline":["in"],"implementation into":["functions,"],"implementation is":["pattern","O(","the","certainly"],"implementation just":["got"],"implementation leans":["a"],"implementation like":["this"],"implementation methods":["like"],"implementation name":["instead"],"implementation not":["covered"],"implementation of":["count","nucleotide_counts...","\u003ccode\u003eis_nil?\u003c/code\u003e","pattern","count(text)","a","count(),","countWords","the","count/1","the","the","the","Enum.map/2","`Enumerable`","`violates_triangle_inequality?`...","the","`sort`","`concat`","`count`?","`shouting?`,","this"],"implementation only":["does"],"implementation or":["do"],"implementation relies":["on"],"implementation relying":["completely"],"implementation return?":["What"],"implementation says":["to"],"implementation sensibly":["here?"],"implementation supports":["string"],"implementation to":["a","avoid","get","match."],"implementation type":["you"],"implementation uses":["pattern"],"implementation very":["clear."],"implementation vs.":["`discard`."],"implementation was":["a","this:","pretty"],"implementation with":["the","pattern"],"implementation without":["having"],"implementation you":["get","won't"],"implementation! But":["`_question?(text)`"],"implementation) rather":["than"],"implementation, and":["it"],"implementation, but":["I","I","I'm"],"implementation, changing":["\"*\""],"implementation, do":["you"],"implementation, like":["ranges."],"implementation, sorting":["the"],"implementation, you're":["lowercasing"],"implementation--checking to":["see"],"implementation. (There":["is"],"implementation. But":["yeah,"],"implementation. By":["relying"],"implementation. Exception:":["`HashDict.new`"],"implementation. Expect":["another"],"implementation. I":["think","won't","wondered"],"implementation. I'll":["still"],"implementation. In":["more"],"implementation. Much":["simpler"],"implementation. The":["append","obvious"],"implementation. When":["the"],"implementation. You'll":["rarely"],"implementation? I":["feel"],"implementations are":["an"],"implementations for":["those","each","keep"],"implementations it":["happens"],"implementations of":["\"shouting\"?","frequency","Regex"],"implementations, I'd":["be"],"implementations, yet":["(in"],"implemented (it's":["actually"],"implemented `sing`":["is"],"implemented a":["solution"],"implemented and":["how"],"implemented as":["binary,"],"implemented by":["all"],"implemented differently":["depending"],"implemented for":["{some"],"implemented in":["a","a","terms","terms","terms","terms","terms","Erlang."],"implemented it":["calls"],"implemented just":["as"],"implemented much":["simpler,"],"implemented on":["the"],"implemented some":["changes."],"implemented the":["functions"],"implemented two":["separate"],"implemented using":["guards."],"implemented with":["a","a","pattern"],"implemented your":["suggestions."],"implemented. Look":["at"],"implemented. Since":["reduce"],"implementing `discard`":["in","in"],"implementing `keep`":["and"],"implementing `shout?`":["with"],"implementing in":["Elixir"],"implementing it":["yourself?","using"],"implementing one":["in"],"implementing reduce)":["the"],"implementing this":["without"],"implementing your":["second"],"implements that":["protocol"],"implements the":["Dict","Dict","Enumerable"],"implentation of":["what"],"implicit conversion":["option"],"implicit conversion.":[":)"],"implicit return":["values"],"implicitly by":["the"],"implied by":["the"],"implied something":["that"],"implied that":["you"],"implied when":["the"],"implies \"Hey,":["is"],"implies iterating":["the"],"implies something":["specific"],"import :functions,":["Message"],"import HashDict.update":["and"],"import Kernel,":["except:"],"import Message,":["only:"],"import `:functions`,":["`:macros`,"],"import `String.capitalize/1`":["when"],"import `String.slice/3":["`and"],"import all":["of"],"import directive":["-","or"],"import is":["rarely"],"import or":["not"],"import statement":["to"],"import the":["functions","functions"],"import them":["which"],"import things":["but"],"import was":["unnecessary"],"import, not":["sure"],"important (unlike":["using"],"important bit":["correct"],"important concept":["in","in","in"],"important for":["this"],"important if":["you"],"important insight:":["the","the"],"important no":["matter"],"important optimization":["here)."],"important piece":["of"],"important stuff.":["Let"],"important thing":["comes"],"important to":["give","bring"],"important) than":["==="],"important. I":["don't"],"important. Whether":["something"],"important. is_saying_nothing?":["has"],"importantly though":["you're"],"importantly, I'm":["new"],"importantly, inverted":["the"],"imported from":["both"],"imported functions":["once","confusing."],"imported it":["I"],"importing Statement":["here."],"importing all":["functions"],"importing downcase,":["but"],"importing every":["function"],"importing it.":["Nice."],"importing over":["a"],"importing stuff":["and"],"importing, so":["I"],"imports (`downcase`":["and"],"imports -":["just"],"imports `import":["Dict`."],"imports and":["private"],"imports are":["common,"],"imports here":["instead"],"imports is":["that"],"imports is,":["in"],"imports isn't":["about"],"imports or":["anything"],"imports. For":["example"],"imports. Not":["sure"],"imposed on":["myself"],"impossible to":["get"],"impression that":["these"],"impression you":["were"],"improve a":["few"],"improve already":["good","good"],"improve encapsulation,":["and"],"improve it":["too"],"improve it.":["It"],"improve or":["try"],"improve performance":["that"],"improve performance.":["Erlang"],"improve readability":["when","and"],"improve readability.":["Also,"],"improve the":["code?","regex,","signal","efficiency","efficiency","expressiveness","test"],"improve this":["code?","and","submission"],"improved building":["of"],"improved line":["breaks."],"improved much":["--"],"improved on":["the"],"improved readability.":["Given"],"improved the":["code."],"improved to":["force"],"improved would":["be"],"improved, for":["example"],"improved. You":["use"],"improvement I":["can"],"improvement I'd":["recommend"],"improvement from":["the"],"improvement in":["therms"],"improvement of":["a"],"improvement over":["the"],"improvement you":["could","could","might"],"improvement. I":["just"],"improvement. Looks":["great!"],"improvement. Next":["I'll"],"improvement. You":["could"],"improvements here":["and"],"improvements over":["`List.foldr`"],"improvements suggested":["by"],"improvements to":["be"],"improvements, could":["you"],"improvements, what":["you"],"improvements. I'd":["actually"],"improvements. I'm":["here"],"improvements. This":["style"],"improves performance":["slightly"],"improves the":["readability"],"improving that.":["Maybe"],"improving the":["code?"],"improving this":["code."],"in #anagram?":["where"],"in #scream?":["and"],"in &amp;1":["to"],"in (iteration":["three)[http://exercism.io/submissions/5200f77aa402f8c7930002b7]"],"in 0.0s":["regardless"],"in 0.10.1)":["to"],"in 3":["languages","places"],"in 8":["lines"],"in 80":["characters"],"in \u003ccode\u003e//\u003c/code\u003e":["for"],"in \u003ccode\u003en-1\u003c/code\u003e":["to"],"in \u003ccode\u003everse/1\u003c/code\u003e":["with"],"in @carmel":["aren't"],"in ASCII.":["Anything"],"in Anagram#match":["might"],"in Clojure":["as","that"],"in Clojure.":["If"],"in DNA.\"-hamming_distance/2-fun-0-\"/1":["which"],"in DNA.\"-hamming_distance/2-fun-0-\"/1`":["-"],"in DNA.nucleotide_counts/1\u003e":["called"],"in DNA.to_rna.":["This"],"in Elixir":["/","it","and","a","yet.","since","to","to","0.10.1.","though,","like","as","are","`v10.0.1`,","code,","should","land,","without","and","makes","due","(we","(as","we","and","docs.","btw","either,","we","to","so","syntax","yet,","what","to","are","to","and"],"in Elixir)":["are"],"in Elixir,":["nor","something","you","but","but"],"in Elixir.":["Elixir","I","So","Each","Use","I","Being","Most","Nullary","`Enum.filter`","It","The","Like","This","The","Seems"],"in Elixir/Erlang":["out","you","you","you","you","you"],"in Elixir;":["In"],"in Elixir?":["(I"],"in Enum.chunks.":["I'll"],"in Erlang":["in","world.","and","look","for","nor","(yes,","uses","(and"],"in Erlang's":["lists"],"in Erlang,":["=:=","it's"],"in Erlang.":["So","Erlang","There"],"in Erlang/Elixir":["it"],"in ErlangDC":["(Dec"],"in Haskell":["but","and","much"],"in Haskell.":["It","Obvious"],"in JavaScript":["because","dictated"],"in Javascript":["and"],"in Kernel":["in"],"in List":["and"],"in O(n":["*"],"in O(n)":["time"],"in OCaml":["the","and","and","and","and","and"],"in OTP":["itself.)"],"in Python":["or"],"in Regex.":["I'll"],"in ResponseChecker.nothing?,":["once"],"in Ruby":["to","I","but","or","but","only.","and"],"in Ruby,":["which","but"],"in Ruby.":["Also,","I'd","Here's","Also","It"],"in Ruby:":["http://devblog.avdi.org/2012/10/01/barewords."],"in Russian":["was","test","test?","test:","test","test?"],"in Russian\"":["do","test?"],"in SpeechAnalyzer":["one-liners"],"in String":["for","your","for"],"in Teenager.":["Categorising"],"in UTF-8.":["For"],"in `Dict.update`":["with"],"in `Dict`":["over"],"in `Dict`.":["`Dict`"],"in `Enum.count`":["to"],"in `HashDict.new`,":["guess"],"in `HashDict`":["when"],"in `Kernel`":["or"],"in `Kernel`,":["and"],"in `Person`":["into"],"in `Regex`.":["It"],"in `String.at(String.rstrip(str),":["-1)`,"],"in `String.split`?":["It"],"in `String`":["to"],"in `_add_word`.":["Conditionals"],"in ```do_count()```":["was"],"in `acc`)":["would","would"],"in `accumulate/3`":["is"],"in `accumulate`":["without"],"in `anagram?/2`":["which"],"in `anagram_of`":["and"],"in `anagrams?/2`,":["but"],"in `angrams?`":["in"],"in `being_ignored?`":["but"],"in `bottle_text`,":["you"],"in `bottles_of_beer`":["and"],"in `chars/1`":["instead"],"in `check_ending`?":["The"],"in `clasify`,":["it"],"in `clean`,":["why"],"in `command(0)`?":["`command(0)`"],"in `compare`":["and","even"],"in `concat`":["(just"],"in `concat`.":["That's"],"in `cond`":["up","forms"],"in `cond`.":["There's"],"in `cond`s,":["though."],"in `consolidate`":["is"],"in `count/1`)":["vs."],"in `count_word/2`":["and"],"in `count_words/2`?":["I"],"in `count_words`.":["`extract_words`'"],"in `count`":["a","and","when","right","is"],"in `count`,":["the"],"in `count`.":["It's"],"in `counts`":["each"],"in `def`":["and"],"in `differents?`":["and"],"in `exchange`,":["`subscribe_no`"],"in `filter`":["you"],"in `filter`,":["would"],"in `for`":["is"],"in `has_letters?`,":["the"],"in `hey(string)`":["from"],"in `hey`":["is"],"in `how_many?`":["and"],"in `iex`,":["at"],"in `increment`.":["As"],"in `is_just_number?`":["when"],"in `line2`":["function?"],"in `list_to_counted_hash`":["and"],"in `map`":["and"],"in `match/2`":["apply","two"],"in `match/2`.":["So,"],"in `match`":["to"],"in `nucleotide_counts`.":["DNA"],"in `numerals`.":["Iolists"],"in `only_letters?`":["is"],"in `question?`.":["I've"],"in `question`":["But"],"in `quiet_at_me?/1`.":["What"],"in `reduce`.":["`map`"],"in `second_line/1`":["to"],"in `second_line`":["is"],"in `shout?`":["so"],"in `shouting?`,":["because"],"in `shouty?`":["is","asks"],"in `silent?`":["method"],"in `sing`":["using"],"in `sort`":["do"],"in `split_sort`.":["I"],"in `to_decimal`,":["and"],"in `update_word_count`":["as"],"in `uppercase?`":["and"],"in `valid_number`":["to"],"in `verse(0)`,":["maybe"],"in `verse`":["feels"],"in a":["case","different","bunch","function","project","lot","little","private","`guard`","guard.","simpler","simpler","ruby","way","different","single","single","different","language","couple","null,","language","single","different","chain","functional","pattern","more","tuple?","tuple.","question","possible","guard","largely","function","public","different","single","single","real-world","function","module","function","helper","predicate","`cond`","local","real","certain","very","boolean","real","separate","simple","function/method,","guard","function","language","module","PR.","`HashDict`","function","protocol","protocol","`fn`:","string","regex.","`priv`","module","more","function","module","string","particular","way","single","single","single","PR","lot","much","PR","hurry","tiny","list","real","functional","slightly","close","tight","different","single","loop","template","single","different","list.","bunch","function","function","non-imperative","similar","couple","wrong,","language","lot","wrong,","`case`.","bit.","parameter","list","def.","wrong,","supervised","guard.","tiny","school.","wrong,","case","range","wrong,","way","regex","pipeline?"],"in about":["half"],"in addition":["to"],"in advance":["for"],"in all":["languages.","caps,"],"in an":["anonymous","accumulator","object-oriented","anonymous","anonymous","abstract"],"in and":["out","use"],"in another":["exercise,","function,","example","exercise","anonymous","language"],"in any":["feedback,","of","feedback.","order.","case,","language.","case.","case","other"],"in as":["the","a","a","simple","well","optional"],"in at":["different"],"in because":["they"],"in being":["part"],"in besides":["regexes."],"in bob_test.exs.":["Note"],"in both":["`silence?`","verse"],"in brevity":["is"],"in by":["mistake?"],"in candidates":["or"],"in case":["(uppercase,","some","statements:","you"],"in cases":["like"],"in certain":["cases"],"in chains":["with"],"in char":["lists"],"in client":["code"],"in clojure":["used"],"in code":["gets","or","instead","but"],"in common.":["You"],"in cond":["up"],"in conjunction":["with"],"in constant":["space"],"in contexts":["where"],"in count":["directly.","than"],"in count(),":["similar","rather"],"in count.":["How","Thanks"],"in count/1,":["but"],"in count_words":["to"],"in counter":["to"],"in dealing":["with"],"in deciphering":["and"],"in decode_message":["using"],"in different":["ways."],"in do/end":["instead"],"in do_collect_downcased_words/1,":["when"],"in do_count":["yourself?"],"in do_hey_question?":["It's"],"in documentation.":["And"],"in doubt":["use"],"in doubt,":["use"],"in each":["grade,"],"in effect":["just"],"in elixir":["?","0.10.1","which","v0.10.1.","has","to","so,",":)","you","they","or","for","can","brings","when"],"in elixir).":["I"],"in elixir,":["so"],"in elixir.":["Any","It's","For","So","It","I"],"in erlang":["and","genes","and","I"],"in error":["-","-"],"in ever-so-slightly":["more"],"in every":["call."],"in everywhere":["is"],"in execution":["time"],"in exercism":["sources,"],"in expressions":["like"],"in extract_words.":["This"],"in fact":["be","be","mark","it's","implement"],"in favor":["of","of"],"in favour":["of"],"in feedback":["on","on"],"in filter":["are"],"in for":["example"],"in frequencies":["into"],"in from.":["It's"],"in front":["of","to","of","of"],"in full,":["so"],"in function":["params!","names","hey.","\u003ccode\u003esing/2\u003c/code\u003e",".","calls","heads","clauses","calls"],"in function-level":["guards"],"in functional":["programming","languages!","languages","programming).","programming).","programming).","programming"],"in functions":["of","declarations","will","instead","for","works."],"in functions,":["I'd"],"in further":["parentheses."],"in general":["or","it","in","best","I","that","the","is","because"],"in general,":["but","but"],"in general.":["Just","I","Just","Nice"],"in getting":["my","back"],"in good":["Elixir","part","style."],"in guard":["conditions...","functions."],"in guards":["but","and"],"in guards,":["mostly","btw."],"in guards.":["However,","Nice!"],"in guards/pattern":["matching"],"in handy":["on","for","here."],"in helpers":["private"],"in here":["is","so","somehow?"],"in here\"":["syntax"],"in hey,":["but"],"in higher":["order"],"in his":["Peepcode"],"in how":["often"],"in idiomatic":["Elixir.","Elixir"],"in if":["in"],"in in":["your"],"in is_all_upcase":["without"],"in is_saying_nothing?":["which"],"in is_shut_up?":["Method,"],"in is_upcase":["if"],"in it":["that","to","since","for"],"in it,":["not"],"in it...":["but"],"in its":["current","own","use"],"in itself":["but"],"in just":["1","a"],"in keeping":["with"],"in languages":["without","that","like","that"],"in larger":["Elixir"],"in later":["versions."],"in latest":["revision."],"in line":["with","with","5,","8","5.","23","22.","4","16?","4","#6...","#5,","5"],"in lines":["14,","3"],"in list":["comprehensions"],"in list,":["even"],"in love":["with"],"in many":["ways","other","places.","cases"],"in me":["likes"],"in memory":["(twice,"],"in memory.":["Do"],"in method":["definition","names."],"in methods":["instead"],"in mind":["regarding","that","more","that","that","that","for","as","though","that"],"in mind,":["you","but","but","great,"],"in mind.":["What"],"in mind?":["Maybe"],"in mine,":["and"],"in module":["String"],"in moving":["along,"],"in multiple":["places.","submissions","modules"],"in my":["solution,","latest","Ruby","opinion.","opinion.","opinion.","opinion.","mind,","Ruby","submission","opinion,","Ruby","next","next","code.","code","code.","ruby","Ruby","life.","comment","latest","previous","current","latest","previous","replace","commit","own","lifetime","submission","submission.","first","opinion,","code","implementation:","opinion.","implementation,","submission","FP.","head","contains_letters?","Clojure","editor,"],"in named":["functions?"],"in newer":["Elixir"],"in next":["iteration.","version."],"in nitpicking":["other"],"in non-Latin":["languages"],"in non-latin":["languages"],"in normalize":["are"],"in one":["method.","step;","Regex","place.","hit?","line.","or","place?","place","fell","glance\"","call?","fell","line","language","call","place"],"in only":["a"],"in order":["of","to","to","to","to","to"],"in order,":["so"],"in other":["languages","words","languages,","modules."],"in parentheses":["to","when","for"],"in particular":["is"],"in particular?":["Sentence,"],"in pattern":["matching.","matching.","matching.","matching","guards).","guards."],"in perfectly":["normal"],"in performance":["should"],"in performance.":["I"],"in pipeline":["|&gt;"],"in pithier":["code."],"in place":["to","of"],"in place.":["I"],"in pre":["0.12.2:"],"in predicate":["functions"],"in private":["methods","functions","functions","methods."],"in production":["code","if"],"in production,":["consider"],"in programming":["terms,"],"in quadratic":["time."],"in question,":["in"],"in quite":["this"],"in random":["order,"],"in readability":["and"],"in readability.":["In"],"in real":["code,","words"],"in regexes":["as"],"in regexes,":["because"],"in regexes:":["`\"A\""],"in regular":["expressions","code.","expressions.","expressions."],"in repl,":["i"],"in response":["to"],"in retrospect,":["isn't"],"in reverse":["order"],"in revision":["2"],"in roughly":["n^2"],"in ruby":["but"],"in ruby,":["and"],"in ruby.":["Not"],"in russian":["with"],"in separate":["functions"],"in several":["months,","places"],"in silence":["method."],"in silence?,":["and"],"in sing":["would"],"in sing.":["I"],"in singalong":["seems"],"in so":["many","many","many"],"in some":["parts","cases","way","other","time.","tail"],"in split,":["and"],"in start_link":["and"],"in string":["functions"],"in strings.":["The"],"in sub":["methods."],"in submitting":["a"],"in such":["cases","a"],"in teenager...":["clever."],"in term":["of"],"in terms":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"],"in that":["situation).","loop","case.","people","case","number","piece","those","fact.","anonymous","the","case","the","`next_numeral_pair`","`hd`","one"],"in the":["example.","cond","process,","new","\"hey\"","returned","`@amir`","last","future.","description.","pipeline?","readme,","code,","'all_caps?'","past","top","tests.","`is_a_question?`","provided","correct","spec,","@anabel","`silence`","requirements,","count","future","strings,","whole","list).","test","count","pipeline.","regex.","language","pipeline","erlang/elixir","beginning","previous","new","process","same","right","regex.","standard","strings","regex.","erlang","library","code?","wrong","comments,","lastest","doctest:","first","long","```shouting?```","do_*","tests","second","Enum","name","test","`Words`","tests","first","domain.","Elixir","order","list.","standard","beginning","pipeline.","previous","cases","language","`Teenager`","`silence`","`hey`","`cond`","docs","linguistic","elixir","regex","empty/silence","domain","tests","Elixir","`hey`","crowd.","`Enum`","```","exercise","strings","silence","perspective","book","next","second","argument","List","argument","docs.","source","`pair`)","`nucleotides_different?`","clause","third","code.","cond","domain,","documentation","right","module.","`cond`,","end.","pipeline.","past,","`is_all_caps?`","`count/1","middle,","test","helper","`is_all_caps?`","list","input,","first","versions","parameter","standard","```","```","function/method","next","pipeline","arguments","function","list.","phrase.","README.","list","standard","end.","domain","docs,","right","list","underlying","elixir","function","call","context","docs:","future.","condition","public","string","import","module","end","interest","habit","habit","parameters","second","`count`","second","function","list.","general","development","extra","`strip_country_code`","`validate`","String","code,","context","validate","binary","sentence.","absence","string","cond","slice","exercism","bigger","code","same","core","anagram?()","value","`List.foldr`'s","javascript","sing/2","future","future.","Elixir","case","declaration","main","top","passed","passed","right","character","amount","result","Elixir","stdlib.","file","style","first","ruby","[ruby","presence","sense","initializer","future.","next","`add`","order","case","test","erlang","sequence.","exercises.","next","nucleotide","Cell","underlying","event","Elixir","README.md:","code","midst","pipeline,","loop","pipeline.","regex","spec","spec...","rest","triangle","error","`anagram?`","getting","first","3","5","previous","standard","library","record","record","right","last","README","[mostly","grid","function","inner","sack,","hope","right","exercism","cond","example","exercise","square","exercise","stdlib,","list,","README","next","end","previous","readme","past","first","form","accumulator","`keep`","list,","functional","list","list","filter","version","exercise.","process","recursive","same","list","`String`","code","`cond`?","other","string?","Teenager","[String](http://elixir-lang.org/docs/master/String.html)","word","word","regex.","dict.","most","Nitpick","next","candidates","tuples,","expected","first","called","module","list","right","module.","code","mailing","mean","more","real","shouting","do...end","list","`Enum`","dictionary.","string?","same","string.","list","other","use","logic,","0.12.3-dev","original","docs,","right","ExDoc","sanitize/1"],"in their":["original"],"in them":["being"],"in them.":["If"],"in there":["simplifies","as","too)"],"in there.":["It'd"],"in there?":["What"],"in therms":["of"],"in these":["exercises"],"in things":["like"],"in this":["simple","case","case?","case","case.","case.","case","pipeline.","assignment.","case","case,","program.","context.","instance?","instance.","case,","case,","problem.","case","link","window.","solution.","case.","case","way.","case,","example","mathematical","version","of","particular","solution,","case,","case.","case","case.","case,","case\".","viewport","case","case","case.","domain","case","exercism","case","case","exercise","case.","exercise.","form","case","context.","exercise.","case,"],"in those":["cases"],"in thoughts":["on"],"in tight":["code."],"in to":["one","their","their","a","their","abstracting","their","their","List.flatten.","the","Elixir.","be","the","each"],"in trail":["for"],"in trouble":["everywhere."],"in trying":["to"],"in turn":["allows"],"in two":["different","empty","funs"],"in two:":["`String.to_char_list!`"],"in unicode.":[";)"],"in unreadable":["parts."],"in up":["to"],"in using":["the","`cond`","regexes.","an"],"in verse":["for"],"in version":["1,"],"in very":["simple"],"in well-named":["functions."],"in what":["way","they","order","they"],"in what's":["allowed"],"in which":["they","case","the","any"],"in why":["that"],"in with":["the"],"in words,":["then"],"in your":["functions","code.","prior","regex?","`hey`","previous","regular","code?","`question?`","function","regex","function","code","accumulating","`question?`","`Teenager`","@shawna.","primary","`bottles`","```","DSL","helper","count","`question?`","```HashDict.update```.","update","implementation","call","attribute.","table","footsteps","namespace","reduce","second","code","regex","first","code","example","implementation","`cond`","code"],"in, rather":["than"],"in, say,":["Ruby.","Clojure."],"in, too.":["Anyway,"],"in. I":["obviously"],"in. Pattern":["matching"],"in. Probably":["because"],"in. The":["`List.last`"],"in. This":["would"],"inbuilt Elixir":["function"],"inclined to":["keep","change","move"],"include Erlang":["functions"],"include a":["link"],"include adding":["ifs"],"include and":["such."],"include any":["tests"],"include digits":["as"],"include hyphens.":["So"],"include in":["this"],"include local":["variables"],"include that":["test,"],"include the":["check","String.downcase","words"],"include underscore":["but"],"included lowercase":["letters,"],"included that":["__info__."],"included the":["`roll_up_counts([\"\"|...`","example","exceptions."],"includes the":["`_`"],"includes things":["like"],"includes when":["the"],"includes, but":["is"],"includes_letters? function":["is","it"],"including `[`":["in"],"including `concat`.":["There's"],"including a":["default"],"including spaces,":["join"],"including the":["regex","limit,","shouting"],"incoming submission":["tells"],"incompatible, or":["are"],"incompatible, they're":["a"],"inconsistency here,":["but"],"inconsistent about":["that"],"inconsistent given":["that"],"inconsistent to":["use","use","import","use"],"inconsistent with":["the"],"incorporated `defp`":["and"],"incorporated feedback":["from"],"incorporated into":["the"],"incorporating some":["language-specific"],"incorrect. Any":["idea?"],"incorrect. E.g.":["tan"],"incorrectly not":["be"],"incorrectly with":["utf-8:"],"increase for":["using"],"increases the":["cognitive","potential"],"increasing numbers":["myself"],"increment function,":["or"],"increment function?":["But"],"increment the":["accumulator.","accumulator"],"increment to":["make"],"increment(current_value), do:":["current_value"],"increment/0 return":["funs"],"increment/1 and":["reference"],"increment_count(\"\", hash),":["do:"],"incremental pieces":["before"],"incrementally rather":["than"],"incrementally. This":["uses"],"incrementing done":["in"],"incrementing the":["count"],"indeed a":["bit","functional"],"indeed be":["better"],"indeed best":["to"],"indeed got":["warning"],"indeed instance":["variables"],"indeed not":["possible"],"indeed often":["bad"],"indeed optimized":["to"],"indeed pass":["all"],"indeed returns":["a"],"indeed the":["best"],"indeed use":["HashDict's"],"indeed! Thanks":[":)"],"indeed, I":["chosed"],"indeed, it":["helps,"],"indeed, let":["me"],"indeed, that":["works"],"indent the":["pipes"],"indentation formatting":["is"],"indentation is":["due"],"indentation level,":["like"],"indentation style":["here"],"indentation to":["it."],"indentation when":["using"],"indentation, but":["perhaps"],"indentation, method":["size,"],"indentation. Regardless,":["just"],"indented body.":["Maybe"],"indented one":["level","step"],"indented two":["spaces."],"indenting for":["me."],"indenting in":["the"],"indenting the":["pipes:"],"independent. You":["could"],"index through":["alongside"],"index)`. Using":["`zip`"],"indicate that":["behaviour","they"],"indicate the":["variable"],"indicates that":["the"],"indicates the":["anonymous"],"indicative that":["there"],"indifference to":["the"],"indirect. You":["still","still"],"indirection between":["`shouting?`"],"indirection). Idiomatically":["`Enum`"],"indirectly checking":["that"],"indiscriminately replace":["`b(a,...)`"],"individual characters.":["Maybe"],"individual checks":["into"],"individual functions":["to"],"individual grade":["output."],"individual letters":["or"],"individual pieces":["that"],"inefficient as":["you'll"],"inefficient thing":["to"],"inefficient, specially":["the"],"inefficient, way.":["And","And","And"],"inefficiently in":["the"],"inelegant first":["attempt,"],"inequality case":["I"],"inequality of":["`base`"],"inexperience with":["functional"],"infer that":["`bitstring_to_list`"],"infer the":["why,"],"inferred from":["context,"],"inferring by":["variable"],"infinite loop":["on"],"infinite recursion.":["For"],"infix operator":["for"],"influence and":["the"],"influenced Elixir":["quite"],"influential so":["I"],"info (you":["don't"],"info about":["regexes"],"info on":["protocols."],"info. While":["stumbling"],"information (as":["opposed"],"information in":["that"],"information that's":["sort"],"informative than":["`\"\""],"init function":["is"],"init is":["superfluous","again"],"initial attempt":["(&amp;1"],"initial attempt.":["I'm"],"initial collection,":["using"],"initial input":["--"],"initial instinct":["was"],"initial nit":["had"],"initial value":["specifically"],"initial word":["every"],"initialization data.":["I"],"initialize @cydney":["with"],"initializer and":["use"],"initializes with":["1,"],"initializing `HashDict.new([])`":["instead"],"initially confused":["by"],"initially had":["the"],"initially handled":["the"],"initially looking":["for"],"initially the":["empty"],"initially thought":["the"],"initially wanted":["to"],"initially was":["memoizing"],"initially, but":["now"],"initially. But":["decided"],"injecting the":["dependent"],"inline (therefore":["no"],"inline and":["uses","once"],"inline anon":["function"],"inline function":["declarations"],"inline functions":["that","wherever"],"inline functions,":["it's","but","as"],"inline in":["an","the","`accumulate`"],"inline it":["because","though."],"inline it,":["then"],"inline like":["the"],"inline rather":["than"],"inline similar":["to"],"inline those":["attributes"],"inline to":["join"],"inline with":["the"],"inline. I":["think"],"inline. I'm":["not"],"inline. Since":["I'm"],"inlined in":["the"],"inlines the":["other"],"inlining it.":["Secondly,"],"inlining the":["anonymous","logic","call"],"inlining them)":["in"],"inlist Enum.with_index(@greta)":["do","do","do"],"inlist Enum.with_index(@ibrahim)":["do","do","do"],"inlist Enum.with_index([\"first\",":["\"second\",","\"second\","],"inlist Regex.scan(%r/\\w+/g,":["string),"],"inlist cs,":["do:"],"inlist l,":["w"],"inlist letters":["do"],"inlist letters,":["do:"],"inlist score_data,":["letter"],"inlist scores,":["c"],"inlist values,":["letter"],"inner `Enum.count`":["call."],"inner `[`":["is"],"inner loop":["of"],"input &&":["String.downcase(input)"],"input --":["you"],"input 4":["times;"],"input =":["\"ZOMG"],"input ==":["input`"],"input I":["have."],"input `\"":["\"`?"],"input and":["nothing?","output.","shifting","I","explain"],"input as":["I","binary"],"input at":["the","the"],"input category":["then"],"input checks":["on"],"input data":["`s`"],"input doesn't":["match"],"input ends":["with"],"input etc.":["I"],"input for":["area_code)","the"],"input in":["terms","terms"],"input into":["words,"],"input is":["possible.","only","actually","strictly","much","passed","in"],"input isn't":["already","valid."],"input itself,":["I"],"input like":["\"+\"."],"input list":["by","is"],"input list,":["yes."],"input lists":["first"],"input needs":["to"],"input once":["instead"],"input order":["of"],"input string":["is"],"input string.":["So","If"],"input this":["implementation"],"input to":["the","get","a","`area_code`"],"input types":["into"],"input validation":["that","is"],"input will":["look"],"input with":["function"],"input would":["make"],"input) in":["to"],"input)`, but":["you're"],"input, not":["just"],"input, since":["=="],"input, though":["that"],"input. (Markdown":["isn't"],"input. I":["finally","like"],"input. I’m":["wondering"],"input. You":["might"],"input` reduces":["to"],"input`, since":["`==`"],"inputs and":["expected"],"inputs but":["there"],"inputs for":["your"],"inputs or":["how"],"inputs to":["the"],"inputs were":["string"],"inputs, THEN":["we"],"inquiries. However,":["I"],"insane amount":["of"],"insensitive regular":["expression"],"insensitive. I":["find"],"insert `String.downcase`":["into"],"insert a":["carriage"],"inserted but":["I"],"inserted by":["`zip`"],"inserted into":["the","your"],"inserts null":["values"],"inserts the":["`_`"],"inside \u003ccode\u003efilter\u003c/code\u003e":["!"],"inside Enum.reduce.":["So,"],"inside `Enum.reduce`.":["It"],"inside `[`":["and"],"inside `count_same_word`":["is"],"inside `shouting?\\1`":["is"],"inside a":["`StringType`","`defp`","variable.","variable.\"","macro?"],"inside another":["`Enum.filter/2`"],"inside case":["statements"],"inside function":["that"],"inside hey":["private?"],"inside little":["private"],"inside methods":["that"],"inside of":["shouting?","`shouting?`","`hey/1`","cond,","`process`","one","the","append."],"inside split.":["I"],"inside the":["Teenager","`List#foldl`,","`cond","Teenager","scope","parentheses.","```","filter.","anonymous","macro","`split_sort`","cond.","count_words","\"cond\""],"inside your":["own"],"insight about":["`list`"],"insight into":["what"],"insight. One":["of"],"insight: the":["time","time"],"insights. The":["code"],"insist on":["\"the"],"insistence (":[";P"],"inspect call":["with"],"inspect issue":["in"],"inspect(s, opts)":["do"],"inspired by":["Ruby","the"],"inspired to":["try"],"installation instructions":["provided"],"instance could":["be"],"instance level":["data","data"],"instance of":["a","a","a","a"],"instance variables":["directly","and"],"instance vars,":["but"],"instance vars.":["Yeah,"],"instance), and":["not"],"instance, for":["your"],"instance, you":["can"],"instance. I":["did","do"],"instances as":["100%"],"instances of":["classes."],"instantiate the":["whole"],"instantiation), but":["I"],"instead (which":["basically"],"instead and":["think"],"instead define":["the"],"instead for":["each"],"instead had":["to"],"instead having":["the"],"instead inside":["the"],"instead it":["submitted"],"instead of":["`[a-zA-Z0-9]`","`[a-zA-Z0-9]`","`do_interpret`?","using","dispatching","string?","`list_of_nucleotides`","the","doing","simple","true.","all","implementation","`Dict.merge`","building","all","using","Regex?","`all_caps?`,","converting","a","using","`count`,","using","String.last","fn,","the","```","walking","the","`_count`","String.last.","the","Statement.nothing?).","a","`do_hey`,","just","applying","`String.split/1`.","partially","explicitly","`isShouting`.","lowerCamelCase.","binarys","the","raw","a","returning","just","using","repeating","guard","deep(nested(calls)).","character","`HashDict.new()`","a","nested","the","`String.length","putting","`x`.","explicitly","a","comparing","`isSilence`.","doing","`phase","tabs.","doing","`Enum.zip/2`.","`def`).","\"\"","`case`","a","referencing","`ten_digit`","HashDict","the","HashDict","public","private","a","at","def","separate","hiding","a","for","the","List,","HashDict).","calling","`Enum.reduce`","every","the","`Enum.map`?","`def","requiring","this:","explicit","replace?","the","descriptions).","the","Query","`cond`","1","for","`Enum.reduce`.","`Enum#reduce`,","Enum.map","prepending","the","`sequence","a","just","`Enum.flat_map`","`Enum.map`.","initialization","`_foo`.","require,","`filter`.","for","a","that","using","codepoints.","`head`,","`tail`","`function`.","what","`def`.","explanation).","a","the","`HashDict.get`.","using","`[func.(head)]","trying","a","`being_asked_a_question?(input)`","removing","`case`","my","`String.last(input)","capture","`&String.to_char_list(&1)`","replacing","`HashDict.some_func`.","`def`.","`List.flatten`","`def`.","`%`","`result`","`String.length(String.strip(msg))","`HashDict.some_fun`.","single","matches","an","`:unequal`.","`HashDict.foo`","`f(x)"],"instead to":["get","match"],"instead write":["it"],"instead. Duh.":[":)"],"instead. However":["I"],"instead. I":["couldn't","stayed"],"instead: `defimpl":["InputCategory,"],"instead: `defp":["anagram?(same_word,"],"instinct as":["I'm"],"instinct was":["to"],"instructions provided":["on"],"instructions that":["there"],"integer that":["is"],"integer value":["of"],"integer value,":["which"],"integers (65),":["so"],"integers (code":["points)"],"integers (versus":["`String.codepoints`"],"integers are":["for."],"integers. I":["didn't"],"integrals (`?A`)":["to"],"integrals as":["the"],"integrated @esmeralda":["suggestion"],"intend revealing":["names"],"intend to":["make","make"],"intended as":["a","a","a"],"intended for":["strings.","strings."],"intended it":["doesn't"],"intended to":["be","make","get","go","return"],"intended) two":["quick"],"intent and":["the"],"intent clear.":["Thanks"],"intent is":["clearly","clearer."],"intent is.":["I"],"intent of":["the","the","the","the","using","the","the","the"],"intent revealing":["than"],"intent was":["to","to"],"intent with":["that"],"intention behind":["the"],"intention here":["is"],"intention is":["that"],"intention of":["the","this","the","the","the","that"],"intention revealing":["names,","code","names?","methods?","and"],"intention revealing.":["Maybe"],"intention was":["that"],"intention-revealing name":["for","for"],"intention-revealing names":["and","--"],"intention-revealing names,":["so"],"intention-revealing, as":["well."],"intention. This":["implementation"],"intention. While":["regexes"],"intentionally and":["for"],"inter-dependency really":["bothered"],"interaction with":["string"],"interchangeable, but":["I'm"],"interchangeable? Sorry":["for"],"interest of":["noise"],"interest. In":["a"],"interest. What":["is"],"interested in":["any","being","deciphering","any","\u003ccode\u003e//\u003c/code\u003e","that","moving","besides","submitting"],"interested in,":["rather"],"interested in.":["The"],"interested only":["in","in"],"interested to":["talk"],"interested. This":["is"],"interesting -":["maybe","I"],"interesting about":["`HashDict.update/4`,","Elixir."],"interesting approach":["to","to"],"interesting approach.":["The"],"interesting decision":["and"],"interesting edge":["case"],"interesting exercise":["with"],"interesting exercise?":["This"],"interesting feedback":["on"],"interesting for":["me."],"interesting idea.":["I"],"interesting implementation!":["But"],"interesting just":["for"],"interesting point.":["It"],"interesting string":["functions,"],"interesting that":["you"],"interesting things":["to"],"interesting to":["me"],"interesting with":["the"],"interesting, I":["didn't","didn't"],"interesting, approach.":["The"],"interesting, but":["not","it"],"interesting. I":["didn't","wasn't"],"interesting. I'm":["on"],"interface and":["the","`HashDict`"],"interface first":["makes"],"interface first,":["hence"],"interface for":["all"],"interface is":["Teenager#hey.","spec'd"],"interface of":["a","the"],"interface to":["all"],"interface without":["expanding"],"interface, HashDict":["="],"interface, `HashDict`":["=","is","="],"interface, the":["easier"],"interface. Easy":["fix"],"interface. I":["wouldn't","would"],"interface. Is":["there"],"interface? You":["can"],"interfaces &":["I'm"],"interfacing with":["Erlang"],"intermediate computation.":["Those"],"intermediate list":["you"],"intermediate lists.":["Not"],"intermediate revision":["between"],"internal DB":["directly,"],"internal data":["structure"],"internal detail":["of"],"internal functions":["into"],"internal inconsistency":["here,"],"internal matter":["of"],"internal state,":["but"],"internal to":["module?"],"internal use.":["I"],"internalised the":["data."],"internally consistent?":["One"],"internally doesn't":["matter\""],"internals. The":["helper"],"international than":["others"],"interpolated word":["list"],"interpolation converts":["using"],"interpolation could":["be"],"interpolation in":["the"],"interpolation into":["a"],"interpolation is":["probably"],"interpolation strings":["contained"],"interpolation to":["call"],"interpolation too,":["and"],"interpolation with":["`\"hello"],"interpolation, but":["I"],"interpolation, like":["Ruby:"],"interpolation. I":["believe"],"interpolation? Might":["help"],"interpret function":["back"],"interpret implementation":["very"],"interpret that":["for"],"interpret |\u003e":["respond\"."],"interpret, which":["cannot"],"interpretation to":["a"],"interpreted as":["accusatory","`f(a)"],"interpreted that":["as"],"interpreted the":["```String.ends_with?```"],"interpreter was":["saying"],"interprets to":["\u003ccode\u003e:shout\u003c/code\u003eing"],"interrogation checks":["into"],"interrogation of":["whether","the"],"interrogative functions":["as"],"intersect/union/subtract/addition, so":["those"],"intersection of":["the"],"intersection when":["I"],"into \"beautiful":["Elixir\"..."],"into #bottles":["and"],"into #response,":["by"],"into 2":["cases."],"into Elixir.":["This"],"into Enum.reduce":["instead"],"into Inspect.Algebra":["for"],"into Kernel)":["or"],"into VIM":["and"],"into `Enum.filter`,":["which"],"into `Enum.reduce`":["on"],"into `List`":["and"],"into `Regex.scan`":["for"],"into `anagrams?`":["and"],"into `verse(2)`.":["Not"],"into a":["separate","method","Language","`upcase?`","list","text","well-named","whole","descriptively","descriptively","function","list","function","separate","separate","more","word","form","named","helper","separate","single","private","separate","single","well","language","separate","string.","single","function","list","number","proper","reusable","pattern-match","separate","separate","single","pattern-match","string.","bunch","List;","separate","list","list,","single","full","'general","list"],"into account":["that","Unicode."],"into account.":[":)"],"into an":["`if`.","one-liner.","enumerable.","increment","attribute","equal","issue"],"into characters":["and"],"into concise":["words."],"into control":["structures"],"into converting":["to"],"into count_all":["in"],"into either":["private"],"into elixir":["here,"],"into elixir;":["still"],"into functions":["with","that","doesn't"],"into functions,":["to"],"into it":["a"],"into its":["own","own","own","own","own"],"into macros":["to"],"into meaningful":["methods"],"into methods":["that"],"into module":["attributes","attributes"],"into more":["parts.","functions,"],"into multiple":["lines"],"into named":["private","functions,"],"into nicely":["named"],"into normal":["values."],"into one":["without","of","like","by","case?"],"into one-liners":["e.g."],"into one-liners.":["For"],"into one?":["(Hint:"],"into pattern":["matches"],"into places":["where"],"into posix":["bracket"],"into predicate":["methods?"],"into private":["functions","functions","functions?","methods.","methods","functions","methods","functions?","methods","functions","functions?","functions","functions","predicate","methods?","functions"],"into reduce":["to"],"into separate":["private","functions?","functions","properly","ones.","functions.","functions.","functions?","functions,"],"into shape":["is"],"into single":["line"],"into small":["functions,"],"into smaller":["pieces,","methods."],"into some":["private","private","of"],"into something":["that","descriptive","i'm"],"into spec":["syntax"],"into string":["representations"],"into subtle":["issues"],"into that":["single","`HashDict`"],"into the":["recursive","hey","count","pipeline","`cond`","Anagram","|&gt;","first","filter.","next","string","is-tests","HashDict","function","details","regex","second","bit","smallest","first","method","code.","Teenager","nested","`count/1`'s","Regex","Erlang","source.","code,","mind","best","subsequent","pipeline"],"into their":["own","own"],"into this":["I'd","kind"],"into three":["pieces?"],"into trying":["`Enum#Reduce`"],"into two":["definitions","separate"],"into two,":["but"],"into using":["the","OTP."],"into very":["efficient"],"into was":["specifically"],"into what":["the"],"into words":["in","with"],"into words,":["and"],"into your":["code","pipeline,"],"into, e.g.":["Enum.reduce"],"intrinsic to":["the"],"introduce an":["extra"],"introduced named":["functions,"],"introduced the":["named"],"introduced to":["the"],"introduces the":["expression"],"introducing a":["new"],"introduction level":["book."],"ints, yet":["when"],"intuitive to":["use.","me"],"invalid UTF-8.":["The"],"invalid characters":["at"],"invalid digit":["returned"],"invalid input":["with","as"],"invalid token:":["&amp;add_or_increment/2)"],"invalid unicode,":["and"],"invalid. And":["either"],"invariant (namely":["that"],"invariant to":["speed"],"invasive on":["a"],"invert the":["corresponding"],"inverted the":["Regex"],"inverting the":["result"],"invested in":["nitpicking"],"investigate a":["approach"],"investigating. I":["remember"],"invocation of":["the"],"invocation. The":["fun"],"invoked in":["quite"],"invoked without":["looking"],"invoked, even":["if"],"invoked. This":["is"],"involved and":["generally"],"involved are":["'any'"],"involved in":["list"],"involves base":["2"],"involves calculating":["but","but"],"involves pattern-matching,":["since"],"involves prepending":["(which","(which"],"involving padding":["with"],"involving parallelism":["(much)"],"iolist is":["annoying","easier"],"iolist, so":["things"],"iolist_to_binary and":["a"],"iolist_to_binary dug":["deeper"],"iolist_to_binary()` in":["`numerals`."],"iolist_to_binary. I'm":["pleasantly"],"iolist_to_binary. Now":["if"],"iolist_to_binary` It's":["a"],"iolists allow":["that)"],"iolists which":["are"],"iolists. I":["was"],"irrationally excited":["every"],"irrelevant but":["that"],"irrelevant edge-case":["that"],"irrelevant in":["Elixir"],"irt doesn't":["really"],"is \"":["simple,"],"is \"\".":["That"],"is \"empty\"":["could"],"is \"idiomatic\"":["Elixir?"],"is \"picked":["clean\""],"is \"readable\"":["elixir"],"is (e.g.":["`statement`"],"is (i.e.":["if"],"is (roughly)":["`Enum.reduce(1..10,","`Enum.reduce(1..10,","linearly","linearly"],"is (zero":["or"],"is **literal**ly":["a"],"is *really*":["new"],"is -":["could","I"],"is 0":["and","+","+","+","(input","+","+","+"],"is 0,":["when"],"is 0.":["If"],"is 1":["+","+","+","+","+"],"is 1\"":["do"],"is 1,":["when"],"is 2":["you","(input"],"is 4":["(input"],"is 7but":["ASCII,"],"is Elixir's":["awesomeness."],"is I":["suppose"],"is I'd":["just"],"is I'm":["sure"],"is My":["First"],"is NOT":["a"],"is O(":["n^2"],"is O(1),":["appending"],"is O(n":["*"],"is O(n)).":["Consider"],"is O(n),":["since"],"is OK.":["It"],"is Ruby,":["and"],"is Ruby-style":["here."],"is Russian":["for"],"is Sc":["(Symbol,"],"is [deprecated](https://groups.google.com/forum/#!topic/elixir-lang-core/FnlK6VjZ190).":["Henceforth,"],"is [here](http://www.erlang.org/doc/man/math.html)":["(keep"],"is _entirely_":["possible"],"is `&Kernel.+/2`.":["I"],"is `0.10.1`.":["Before"],"is `Code.eval_quoted`.":["I"],"is `Enum.count/2`":["which"],"is `Enum.foldl`":["in"],"is `HashDict.new`":["(effectively"],"is `O(n)`,":["a","a"],"is `Regex.scan(,..)":["|\u003e"],"is `String.strip(msg)":["=="],"is `defp":["name(args),"],"is `downcase`'d":["and"],"is `if":["Keyword.keyword?(kws)"],"is `size(phone)`.":["And"],"is `use":["Bitwise,"],"is a":["bit","bit","different","necessary","little","good","bit","more","good","better","method","known","good","fairly","really","bit","nice","simpler","tad","great","clarifying","bit","guard","perfect","very","much","shorter","waste","step","more","great","function","simpler","string\".","standard","nice","much","simple","balance","single","fine","module","formatting","necessary","lot","game","bit","bit","good","resubmission","refactor","solid","bit","great","nice","very","feature","good","better","little","special","bit","good","lot","bit","performance","great","convention","function","`string`.","little","little","good","good","question","list.","great","character","little","really","new","good","lot","confusing","Regex","big","minor.","shout.","more","bit","lot","whole","little","thing.","thing,","really","minor","better","one-liner","minor","slightly","better/more","nested","blank","better","terribly","higher","bit","gorgeous","single","great","sledgehammer","bit","list","string","better","redundant","little","matter","constant,","collection","bit","better","binary","bit","good","bit","macro","bit","big","bit","function","continuation).","specific","way,","way","good","lot","module","bit","little","call","lot","subjective","good","built-in","way","nice","bit","minor.","special","way","committer","catchall","very","ListDict","bad","`Dict`","limitation","record","`ListDict`,","bit","bit","fair","local","bit","simpler","bit","weird","constant","guard","restriction","specific","performance","minor","list","nitpick","bit","simple","bit","little","little","point","right","pretty","problem","very","function","list?","bit","standard","big","lot","generalization","massive","standard","matter","little","little","better","call","common","bit","bit","lot","better","call","reversed","character","low","`:math.pow/2`","little","pretty","slight","bit","little","great","more","call,","bit","nicer","bit","better","call","better","\"just","bit","functional","bit","second","right","better","better","call","right","pretty","better","call","call","big","known"],"is a-zA-Z.":["If"],"is about":["the","as","twice","DNA.","5"],"is about,":["I"],"is absolutely":["better"],"is acting":["on"],"is actually":["touching","doing","a","an","rarely","quicker","for","a"],"is again":["superfluous"],"is all":["uppercase?","upper","in","caps.","about.","mixed","you'd"],"is allowed":["in","in","in","to"],"is already":["looking","quite","present.","an","there,","sorting","longer"],"is also":["`Enum.reduce`","more","likely","fine.","a","perfectly","ambiguous"],"is always":["a","equivalent","a","a","the","preferable"],"is ambiguous\",":["when"],"is an":["improvement.","empty","interesting","important","interesting","awesome","example","anagram","infix","anagram","undocumented","interface,","implementation.","idiomatic","annoying","O(n^2)","optimization","Erlang","expensive","implementation","expression).","issue","`Elixir.match?/2`","interesting","implementation","area","internal","alternative","awesome","interface","equilvalent"],"is anagram":["that"],"is and":["how","with"],"is annoying":["to"],"is annoying.":["I"],"is another":["way"],"is apparent":["here."],"is append":["behaves"],"is appropriate":["when"],"is around":["using"],"is as":["lazy","far"],"is at":["least","a","a","least","least","least"],"is available.":["If"],"is awesome!":["Love","Like"],"is bad":["you"],"is based":["on","on"],"is basically":["read","the"],"is because":["it","I","append","I"],"is because,":["at"],"is being":["shouted","rewritten"],"is best":["written"],"is best,":["just"],"is better":["to","readable","written","written","expressed","than"],"is better.":["I'm"],"is broken":["with"],"is built":["on."],"is by":["far"],"is called":["an","with","(which","out","for","something","the"],"is calling":["hey","the","a"],"is can":["change"],"is certainly":["a","more","more","overkill","not","creative,"],"is checked":["in"],"is checking":["for"],"is cleaner":["and"],"is clear":["to","to"],"is clearer.":["Something","I"],"is clearly":["communicated."],"is clever.":["Should"],"is code":["duplication"],"is coming":["his"],"is commented":["out"],"is common":["to","to"],"is commonly":["understood","done"],"is comparing":["the"],"is compiled":["into"],"is completely":["oblivious"],"is compute":["on"],"is computed,":["`acc","`acc","`acc","`acc","`acc","`acc","`acc","`acc","`acc","`acc"],"is confused":["."],"is confusing,":["you"],"is confusing.":["I'd"],"is considered":["a","a","a"],"is considering":["giving"],"is constructed,":["and"],"is cool,":["looks","but","but"],"is correct":["unless","and"],"is counting":["words"],"is created":["with","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for"],"is created),":["rather"],"is crucial":["as"],"is currently":["triggered."],"is definitely":["top","the","something","a","the","more"],"is deprecated":["and"],"is descriptive":["but"],"is designed":["to"],"is determined":["by","solely"],"is documented":["inside"],"is does":["it"],"is doing":["enough","two","quite","on","with"],"is done":["with","before","after"],"is done!":["good"],"is downcased":["twice:"],"is due":["to","to"],"is easier":["for","to","to","to","to","and","to"],"is easy":["to","to","to","to","to"],"is effectively":["padded","the"],"is efficient":["in","in"],"is empty":["than","or","word","use"],"is empty,":["but","which","and"],"is empty/nil,":["not"],"is empty?":["Maybe"],"is entered":["that"],"is entirely":["likely.","composed"],"is equal":["to"],"is essential":["for"],"is essentially":["saying","a"],"is even":["more","cleaner."],"is every":["so"],"is evolving":["so"],"is exactly":["what","what","the","what"],"is expanded":["to"],"is expensive":["to"],"is explicitly":["passed","the"],"is exploding":["and"],"is extremely":["cheap)","cheap)"],"is fair":["behavior,"],"is fairly":["ugly,","efficient","digestible"],"is false":["(which","then"],"is false.":["Works","I"],"is far":["simpler."],"is faster":["than","than","than","though."],"is feeling":["about"],"is figuring":["out"],"is fine":["as","with",".",","],"is fine,":["I","but","i","in"],"is fine.":["You","It's","`Regex.scan`"],"is finished":["so"],"is flexible":["enough"],"is following":["Ruby","Ruby"],"is for":["a","a","example","unicode","binary","the","taking"],"is for,":["so"],"is fun":["to"],"is generally":["the","supposed","overpowered"],"is get":["really"],"is getting":["pretty","really","closer","a"],"is given":["its"],"is giving":["me."],"is going":["on.","on.","on","to","on","to","on.","to"],"is good":["practice,","..","enough","as","to","IMO)."],"is good\"":["but"],"is good,":["but","but"],"is great":["news!","at","for","fun!"],"is great!":["Good","Congrats.","I"],"is great,":["I"],"is great.":["Should","See","I","I've","A","Thanks.","The"],"is half":["the"],"is handled":["separately;"],"is handled;":["then"],"is handling":["non-ascii,"],"is hard":["to","^^)","to","to"],"is hard,":["but"],"is hard.":["There's"],"is have":["the"],"is hearing,":["whereas"],"is hearing.":["What"],"is hidden":["from"],"is hinting":["at."],"is horrible,":["I"],"is how":["it","Bob","that","you"],"is idiomatic":["Elixir","and","for"],"is idiomatic,":["but"],"is if":["you're"],"is ignored.":["I"],"is immediately":["obvious."],"is implemented":["in","it"],"is important":["no","if","(unlike"],"is in":["the","erlang","trail","the","Elixir;","Ruby","is_shut_up?","Haskell.","the","the","one","the","the","Kernel","the","all"],"is indeed":["the","a","not","a"],"is independent.":["You"],"is inside":["the"],"is inspired":["by"],"is instead":["of","of"],"is intended":["to","to"],"is interesting":["-","to","for","-"],"is interesting,":["I","but","I","but"],"is interesting.":["I","I'm"],"is invoked":["without"],"is it":["simple","just","a","that","that","standard","better","cheating?","just"],"is it?":["And"],"is just":["a","not","sugar,","whitespace?","suggesting","minor,","too","me","my","a","a","as","shorthand","shorthand","bringing","this:","an","syntactic"],"is kind":["of","of"],"is kinda":["deprecated"],"is known":["in"],"is large":["the"],"is length":["0),","2),","4)"],"is less":["of","intuitive","obvious"],"is like":["a"],"is likely":["to"],"is longer":["than"],"is looking":["really","to"],"is looks":["great!"],"is lower":["case"],"is lower.":["I've"],"is lowercase":["function","anyway."],"is mainly":["that"],"is making":["my"],"is match":["on"],"is matched,":["`t`","`t`","return","`t`","`t`","`acc`","`t`","`t`","return","`t`","`t`","`acc`","`t`","`t`","return","`t`","`t`","`acc`","`t`","`t`","return","`t`","`t`","`acc`","`t`","`t`","return","`t`","`t`","`acc`"],"is maybe":["moving"],"is messing":["with","with"],"is missing":["feel","the"],"is misspelt.":["I'd"],"is moot":[";-)"],"is more":["general.","or","readable","appropriate","complex","readable","elixir'ish","concise.","maintainable","common","appropriate","readable","than","elixirish.","…","fun.","self-documenting","of","readable","readable","expressive","readable","commonly","expensive","readable","idiomatic.","efficient","idiomatically","readable","convoluted","imperative,","readable.","readable","idiomatic.","appropriate","international","readable","elegant","semantic,","readable.","general","common","readable?","reliable","idiomatically"],"is most":["likely"],"is mostly":["the","the","useful","used"],"is moving":["your","the","pretty"],"is much":["more","worse.","more","better.","appreciated.","more","better","slower,"],"is my":["first","first","initial","first","first","friend","very","first","hammer","biggest","attempt","first","biggest","first","first"],"is n":["squared"],"is necessarily":["something"],"is necessary":["since","because","considering","to"],"is necessary?":["See"],"is needed":["in"],"is never":["called"],"is new":["as"],"is nice":["and","and","and"],"is nicer":["than"],"is nifty.":["I'll"],"is no":["test","longer","longer","way","longer","conceptual","chance","`t`","List.count,","`Dict`","benefit"],"is not":["stated","to","specified","obvious","the","necessary,","to","a","an","a","approval","an","a","with","specified","passed","a","something","necessary","null.","sufficient","minor","as","part","limited","immediately","necessary.","a","having","the","an","the","the","capable","weird","tail","shouting","that","really","needed.","the","a","the","intended","advisable,","always","considered","perfect,","so","nil","unicode-aware","user-facing","exactly","tail","all","a","going","Elixir's","quite","recommended","else","a","the","the","tail-recursive,","really","only","enough","considered","valid","checking"],"is not.":["Nice"],"is nothing":["wrong","wrong","wrong"],"is notoriously":["inefficient."],"is now":["working","in","captured"],"is nowhere":["near"],"is object":["style"],"is obviously":["not","better!"],"is occurs":["to"],"is odd,":["`keep`"],"is of":["any"],"is ok":["."],"is ok,":["it"],"is on":["Dict.","the","the","a","and","the"],"is once":["per"],"is one":["less","exercise","of","of","related","more","way","minor","less","style","of"],"is only":["there","used","expected","generated","I'm","a","in","sorted","possible","one"],"is optimized":["well"],"is out":["the"],"is overcomplicated,":["I"],"is overcomplicating":["this."],"is overkill":["for"],"is part":["of","of","of","of"],"is passed":["to","to","to","to","to","they'll"],"is passing":["that"],"is pattern":["matching","matching?"],"is perfect":["IMO."],"is performance.":["The"],"is perhaps":["why"],"is popular":["convention"],"is possible":["to","to"],"is possible.":["There"],"is possible...I'd":["just"],"is potentially":["expensive."],"is practically":["how"],"is pre":["0.12.2"],"is preferred":["to","over","over","over"],"is preferred.":["I"],"is prefixed":["with"],"is pretty":["good.","limited.","good","neat!","deeply","cool!","opaque.","sweet.","ugly.","succinct.","uncommon","easy","printed","much","readable","common","common.","rare","much"],"is private":["`defp`"],"is probably":["overly","2","unnecessary.","too","overly","more","some","more","better","closer","a","just","re-useability","a","a","the","a","more","the"],"is proving":["unhelpful."],"is public,":["btw?"],"is question":["then"],"is quite":["robust.","clear","similar","elegant,","low","low","accurate.","low","low","low"],"is raised":["if"],"is rarely":["done","used","done"],"is rather":["irrelevant","weird,"],"is reached":["some"],"is read":["by"],"is reads":["better"],"is really":["a","clean,","nice.","awesome!","quite","damn","an","confusing","a","a","stupid,","a","a","just","straightforward.","a","nitpicky,"],"is reducing":["a"],"is redundant":["with"],"is redundant.":["How"],"is relatively":["clear"],"is required":["by","to"],"is required.":["I"],"is responsible":["for"],"is returning":["a","nil"],"is reused":["for"],"is right":["for"],"is safe":["as"],"is said":["to"],"is saved,":["but"],"is saying":["nothing?"],"is short":["enough"],"is shorter":["than","than"],"is shorthand":["for","for","for"],"is should":["I"],"is shouting":["vs","if"],"is shouting,":["too"],"is shouting.":["Just"],"is significant.":["That's"],"is significant?":["For"],"is silence":["then"],"is silent,":["yelled,"],"is similar":["to","to"],"is simple":["when"],"is simple:":["for"],"is simpler":["overall."],"is simply":["because"],"is slightly":["more","more","more","faster","different","shorter"],"is slowly":["changing"],"is small":["enough,"],"is smart":["enough"],"is so":["cool.","simple","obvious.","much","utterly","satisfying","little","powerful","factored","much"],"is solid,":["although"],"is solves":["is"],"is something":["a","like","I'm","I","many","many","advanced","like"],"is somewhat":["redundant.","burdensome","misleading","cheating","helpful.","more"],"is sort":["of"],"is spec'd":["(if"],"is special":["cased"],"is specific":["to"],"is specifically":["for"],"is spelled":["incorrectly."],"is still":["passed","a","used","the","greater","essentially","some","several","several"],"is stored":["and"],"is strictly":["[[string]]"],"is subjective":["and"],"is submitted":["under"],"is succinct,":["but"],"is such":["a","a"],"is super":["nit-picky,","cool,"],"is super-nitpicky,":["but"],"is superficially":["similar"],"is superfluous":["and"],"is supported":[","],"is supposed":["to"],"is suspicious":["of"],"is swallowing":["return"],"is tail":["recursive"],"is taking":["the"],"is terrible.":["I"],"is that":["actually","it","really","really","you","when","`frequency(word)`","the","HashDict","a","what","the","necessary?","you","you","the","it","I'd","it","nil","`binary_to_list`","the","you","things","I","you","you","there","I","Elixir's","while","it","you","if","`anagram_of?`","if","this","`pretty/1`'s","exercism's","I","a","an","usually","you","concatenating","the","a","the","it","this","otherwise","I","your","this","you","before","you","if","without","normal","there","there's","if","you","there","you","once","if","`f","you","the","if","if","you","if","it's"],"is the":["name","same","naming","naming","river","point","line","application","name","best","name","best","anonymous","most","`hash`","argument","clause","first","correct","same","same","order","`verse(1)`","optimal","`!`","underscore","advantage","naming","Elixir","result","first","first","right","disadvantage","normal","last","difference","generally","last","“readable","if","best","first","best","same","right","same","interface","creation","idiomatic","correct","favored","only","biggest","very","first","main","nicer","way","forced","concept","best","last","wrong","same","convention","first","primitive","same","gist","most","reason","output","reverse","character","same","first","same","first","left","left","way","pipe","negation","convention,","first","way","representation","most","regex"],"is there":["a","a","a","a","a","another","a","any","a","any","a","an","a","a","a","a","a","an","a","a","any","a"],"is thinking":["about"],"is this":["ready","thing","too",":"],"is to":["use","say","use","set","just","produce","expose","\"update\"","keep","return","end","take","use","read","just","produce","figure","not","look","have","identify","return","use","support","end","have","be","stay","wrap","use","use","map/map","show","rename","use","make","have","generate","qualify","favor","`Enum.reduce`.","say","say","prefix","replace","put","use","say","think","make","say","say","write"],"is too":["much","formal"],"is totally":["worth","unnecessary"],"is triggered":["if"],"is trivially":["countable."],"is true":["I","that","but","while","then"],"is true,":["I","`\"1\"","`\"a\""],"is trying":["to"],"is typo'd.":["You're"],"is ugly":["yes"],"is ugly.":["I"],"is unclear":["for"],"is uncommon.":["It's"],"is unimportant.":["This"],"is unlikely)":["`List.zip"],"is unlocked,":["you"],"is unneccesary":["here","here"],"is unnecessary":["–","and"],"is unnecessary,":["since"],"is unused.":["You're"],"is upcase?":["or"],"is uppercase.":["Let"],"is use":["function"],"is used":["for","exactly","to","the","instead","when","as","for","for","for","for"],"is used.":["They're","Is"],"is used;":["Haskell"],"is useful":["though.","unless"],"is useful,":["but"],"is using":["character","is"],"is usually":["much","a","written","used","written"],"is valid.":["I've"],"is valuable.":["Protocols"],"is verbose,":["I"],"is very":["readable,","nicely","clear,","readable!","simple","concise,","straightforward.","pretty.","clear,","clear,","similar","good.","hard","readable,","unreadable","cool)","straightforward","rare","appropriate","open","powerful,"],"is way":["better"],"is what":["is","I've","we","I'm","you","I","bothers","happens","I","it","is","determines","makes","the","the"],"is when":["the"],"is where":["having","I'd"],"is whether":["you"],"is why":["would","I","I","there's","I'm","`Enum`","standard"],"is with":["recursion,"],"is working":["on","hard"],"is working.":["We'll"],"is worth":["more","the"],"is yelling":["if","`input`."],"is you":["get"],"is your":["friend"],"is) be":["precomputed"],"is, I":["created","have"],"is, I'm":["running"],"is, but":["I","the","I"],"is, do":["you"],"is, in":["good"],"is, it's":["easy"],"is, or":["is"],"is, what":["is"],"is-tests so":["that"],"is. And":["since"],"is. But":["if"],"is. Hopefully,":["I"],"is. I":["prefer","like"],"is. So,":["`shouting?`"],"is. What":["do"],"is/will be":["deprecated."],"is; (most)":["teenagers"],"is? Seems":["a"],"isSilence clause":["at"],"is_ on":["a"],"is_ prefix":["though","from"],"is_ seems":["redundant"],"is_ than":["without,"],"is_) Great":["way"],"is_, this":["is"],"is_all_upcase without":["having"],"is_anagram(word, candidate)":["end"],"is_anagram?. I":["used"],"is_anagram_match?(target, dc)":["end)"],"is_anything_else? or":["true."],"is_binary(target)`. That's":["mostly"],"is_binary/1 on":["line"],"is_blank? .":["I"],"is_blank? if":["I"],"is_empty? function).":["If"],"is_match method":["and"],"is_nothing into":["two"],"is_nothing?(nil), do:":["true"],"is_nothing?(str) when":["str"],"is_question =\u003e":["question?"],"is_question function":["has","should"],"is_question vs":["question?,"],"is_question? ||":["is_shout?"],"is_question?(msg) or":["Message.is_question?(msg)"],"is_question?(sentence) &amp;&amp;":[":question"],"is_questioning? could":["have"],"is_saying_nothing? doesn't":["use"],"is_saying_nothing? has":["to"],"is_saying_nothing? which":["is"],"is_saying_nothing?, is_shouting?":["and"],"is_shout? ||":["is_other?"],"is_shout?(sentence) &amp;&amp;":[":shout"],"is_shouting =\u003e":["shouting?"],"is_shouting method":["might"],"is_shouting will":["return"],"is_shouting. And":["the"],"is_shouting? I":["like"],"is_shouting? and":["is_questioning?"],"is_shouting? so":["that"],"is_shouting?. That's":["the"],"is_shut_up? Method,":["right?"],"is_silence? ||":["is_question?"],"is_silence?(instruction), String.strip(instruction)":["=="],"is_something looks":["to"],"is_sublist([], _),":["do:"],"is_sublist(_, []),":["do:"],"is_superlist([_|t] =":["a,"],"is_superlist(t, b,":["a_len-1,"],"is_upcase if":["rewrite"],"is_upcase?(text) Have":["you"],"is_whatever? function":["(but"],"is_whatever? function,":["but"],"is_yelling/1. You":["can"],"is` [a-zA-z0-9_]`,":["so"],"isn't `str`,":["only"],"isn't a":["good","lambda","particularly","problem","wrong","very","test","great","problem","problem"],"isn't about":["performance","getting"],"isn't actually":["a"],"isn't already":["a"],"isn't an":["attribute"],"isn't anything":["wrong"],"isn't as":["good"],"isn't called":["by"],"isn't completely":["obvious."],"isn't done":["often,"],"isn't enough":["(this"],"isn't even":["at"],"isn't exactly":["the","the"],"isn't finished":["yet."],"isn't going":["to"],"isn't good":["with"],"isn't helping":["me."],"isn't idiomatic":["at"],"isn't in":["the"],"isn't interpreted":["as"],"isn't it?":["I"],"isn't much":["point"],"isn't necessary,":["it","but"],"isn't needed":["here."],"isn't particularly":["pretty,"],"isn't pre-sized":["appropriately."],"isn't really":["useful","a","specified","needed","to","useful"],"isn't recognized":["as"],"isn't so":["much"],"isn't strictly":["necessary"],"isn't that":["elegant,"],"isn't the":["most","most","convention","right","protocol"],"isn't too":["tricksy?"],"isn't true":["or"],"isn't used":["(often"],"isn't valid.":["But"],"isn't very":["wide","useful"],"isn't what":["you'd"],"isn't wrong":["by","but"],"isn't, even":["though"],"isn't. Guard":["clauses"],"isolate only":["the"],"issue --":["we"],"issue all":["the"],"issue appears":["on"],"issue calling":["Kernel.inspect"],"issue in":["response"],"issue of":["anonymous"],"issue on":["the"],"issue there:":["You've"],"issue where":["lines"],"issue with":["the","it","`concat`","`concat`"],"issue you":["can"],"issue. I":["don't"],"issue. Thanks":["for"],"issue. What":["do"],"issue? Alternatively,":["look"],"issue? If":["not,"],"issues and":["have"],"issues but":["I've","I'll"],"issues in":["the"],"issues later":["when"],"issues such":["as"],"issues, more":["on"],"issues. Like":["\""],"issues... when":["to"],"it \"looks":["great!\""],"it (for":["this"],"it (happy,":["because","because","because"],"it (makes":["it"],"it (tip:":["use"],"it **DRY**":["where"],"it *can*":["be"],"it *does*":["rather"],"it ,":["is"],"it 1000":["times"],"it I":["kinda","could","think"],"it `is_something`":["or"],"it `reduce`,":["`accumulate`,"],"it `silence?`":["instead."],"it a":["shot","tiny","shout.","lot!","bit","bit","try?","nice","bit","little","spin).","thought!","matter","distinct","name.","tad","lot","bit","private","public","Greeting?","bit","giant","bit","whirl,","try","local","little","bit","bit","bit,","bit","little","bit","bit","little","bit","bit"],"it accordingly":[":)"],"it actually":["tests.","hurts","delegates","uses","is"],"it adds":["unnecesary","real","to","some"],"it affects":["readability."],"it after":["submitting,"],"it after.":["Both"],"it again":["the","without","and","outside","on"],"it all":["at","with","at","in","working!"],"it allowed":["a"],"it almost":["looks"],"it already.":["I'd"],"it also":["depends","forces","matches","doesn't","means","makes","works","works","works"],"it always":["sorts","end","made"],"it an":["early"],"it and":["the","update","it","get","I","reverse","exercism","the","it's","it","do","idiomatically.","then"],"it any":["other","better,","clearer"],"it anyway,":["just"],"it appears":["that","to"],"it around":["because"],"it around,":["no","#{bottles_left}","no","#{num-1}"],"it as":["a","a","a","you","an","is","`(speak","bytes","`&Int.inc/1`.","it's","`String.to_char_list!(word)","a","the","`foo(something)`","'ugly'"],"it as-is":["for"],"it at":["the"],"it avoids":["introducing","iterating"],"it back":["to","again."],"it backwards.":["Pipe"],"it basically":["means:"],"it be":["worthwhile","worthwhile","an","an","an","better?","more","worthwhile","better","better","a","simpler","a","more","better","worthwhile","worthwhile","possible","worth","worth","more","broken","simpler","easier","easier","easier","said","easier","more"],"it because":["I","the","I","of","I","I","it's"],"it becomes":["a","apparent","available.","more","a"],"it behaves":["in"],"it being":["a","calculated"],"it belongs":["there."],"it benefits":["or"],"it better":["because","so","to"],"it better,":["more"],"it both":["ways.","ways."],"it brings":["more"],"it brings.":["\u003c/rant\u003e"],"it but":["that's","I","I","it","I'm","it's","I"],"it buys":["you"],"it by":["using","using","minimizing"],"it calls":["`HashDict`"],"it came":["out","to"],"it can":["be","be","be","get.","see","lead","be","also","make","be","help","simplify","sometimes","be"],"it captures":["`_`","`_`"],"it clarify":["the"],"it cleaner":["than"],"it clear":["that","that","that"],"it clearer":["what","what's","to"],"it clearly.":["Here's"],"it comes":["to","to","to","up"],"it common":["to"],"it compares":["it"],"it completely,":["and"],"it confusing":["to"],"it considers":["\"_\""],"it consistent":["would"],"it contained":["test"],"it contains":["at","at"],"it correctly":["is","and"],"it correctly,":["the","but"],"it could":["do","simplify","be","be","be","make","help","simplify","possibly","be","quickly","cause","be","have","help","silplify","be","be","be","lead","arguably"],"it could.":["For"],"it couldn't":["hurt"],"it crash":["and"],"it deals":["with"],"it defaults":["to"],"it defines":["a"],"it delegate":["the"],"it depends":["on"],"it describes":["to","the"],"it did":["something","that,","not"],"it didn't":["occur","work.","seem","really"],"it difficult":["to"],"it directly":["to","anyway."],"it does":["make","what","not","return","now.","look","make","something","the","pass","on","pass"],"it does,":["it's","not"],"it does.":["My"],"it doesn't":["make","make","have","have","look","matter","really","store","seem","allow","offer","crash","deal","always","give","deal","really","work","look","fit","pad.","feel","matter).","feel","handle","do","seem","make","loo","work"],"it doesn't.":["It"],"it down":["and","and","to","near"],"it each":["time"],"it easier":["to","to","or","to","to","to"],"it easy":["to"],"it either":["so",":-)"],"it emphasizes":["the"],"it entirely.":["Is"],"it even":["uglier","be","possible?"],"it every":["time"],"it exists,":["and"],"it expects/requires":["that"],"it expresses":["a","the"],"it extends":["rather"],"it failed":["whenever"],"it fails":["anyway","if","to"],"it falls":["into"],"it faster":["in"],"it feels":["like","nicer","like","a","like","like","better","more","a","sluggish.","super"],"it felt":["easy","more"],"it fit":["in"],"it fits":["the"],"it for":["approval.","approval.","a","that","a","the","comparation?","the","my","some","lists","the","the","even","the","this","`flatten`."],"it from":["the","there.","the","breaking","there."],"it fudges":["the"],"it gains":["you"],"it gave":["me","a"],"it gets":["stripped","you","handled"],"it give":["you?"],"it gives":["a","the","me","me","at","names","me"],"it goes":["too","against","against"],"it got":["so","fixed.","kind"],"it grows":["on"],"it had":["privates,"],"it handles":["the"],"it happens":["to"],"it hard":["to","for"],"it harder":["to"],"it has":["all","a","`?`","to","to","a","to","something","to","to","to","something","that"],"it hasn't":["been"],"it helpful":["for"],"it helps":["readability","readability","readability","readability","or","signify"],"it helps,":["making"],"it here":["either","below:","makes"],"it however":["you"],"it idiomatic":["to"],"it if":["`joined`"],"it improved":["readability."],"it improves":["the"],"it in":["a","as","just","the","```do_count()```","the","the","a","multiple","using","the","count_words","a","`counts`","a","my","general.","in","here","one","the","general.","one","sub","`second_line/1`","parentheses","a","my","the","a","a","production","the","the","a","the","8","any","the","my","to","here","a","words,"],"it indirect.":["You","You"],"it inline":["rather"],"it into":["an","a","`do_count`?","a","a","`String.capitalize`.","a","a","a","a","`Enum.reduce`"],"it is":["\"picked","a","perfect","more","called","called","a","true.","an","a","in","`classify`.","possible","in","easier","more","only","true","much","responsible","available.","upcase?","idiomatic","(e.g.","checked","solid,","checking","a","shorter","a","more","an","used","quite","O(n),","a","idiomatic","probably","effectively","a","using","pretty","-","possible...I'd","to","optimal.","fine","more","a","to","a","quite","really","a","exactly","commonly","easier","to","common","one","missing","accepted?","a","already","a","much","so","very","always"],"it is!":[":)"],"it is,":["I'm"],"it is.":["But"],"it is/will":["be"],"it isn't":["called"],"it it":["really"],"it just":["scans","feels","a","feels","by","gives","looks","once,","wasn't","me","ran","calls","so","never","before"],"it keeping":["both"],"it kinda":["seems"],"it last":["time"],"it lately,":["but"],"it leaves":["behind."],"it lets":["me"],"it like":["this:","a","this","bynary","this:","this,"],"it limits":["you"],"it longer.":["Tail"],"it look":["any"],"it looks":["too","like","good.","like","great.","good","like","like","like","good.","like.","slightly","like.","like","pretty","to","a","like","better"],"it loses":["the","the"],"it loudly":["taking"],"it made":["everything","the","sense."],"it make":["a","sense","sense","it","sense","sense","sense","more","me","sense"],"it makes":["it","sense,","sense","sense","it","sense","for","matching","it","code","the","for","sense","me"],"it manually":["(yes,"],"it matches":["the","uppercase"],"it matters,":["but"],"it may":["be"],"it mean":["to"],"it means":["I","you","that"],"it meant":["adding","-"],"it might":["make","be","be","be","be","make","make","be","take","be","be","be","make","be","be","be","improve","work","be","be","be","be","be","be","be","be","help","be","be","not","be","be"],"it more":["convoluted.","clear?","modular?","readable.","modular","modular?","readable","modular","readable","readable.","compact.","readable?","consistent.","accurately","readable","readable,","complex.","as","readable.","succinctly?","efficient.","like","efficient?","when"],"it much":["better","thought.","better.","easier"],"it multiple":["times."],"it must":["be"],"it needed":["a"],"it needs":["to.","to","to","to"],"it nice":["and"],"it not":["redundant?","redundant"],"it now":["returns"],"it now.":["Thanks"],"it now?\"":["be","has"],"it obvious.":["The"],"it off":["into"],"it often":["obfuscates"],"it ok,":["that"],"it okay":["to"],"it on":["my","the","my","a","the","the","`add`"],"it once":["for","I"],"it one":["step"],"it only":["means","has","iterates","makes","works","works","helps","where"],"it ought":["to"],"it out":["=(",":(",":)","into","into","into","into","into","to","how","in","to","for","to","because","as","like"],"it out,":["though,","which"],"it out.":["First","So","But"],"it out:":["https://gist.github.com/diogovk/8700256"],"it over":["time."],"it pass":["tests,","all"],"it passes":["all","the"],"it pattern":["matches"],"it pointed":["out"],"it possible":["to","to","to"],"it presents":["itself"],"it pretty":["neat!","print"],"it prevents":["the"],"it probably":["translated"],"it quite":["easily"],"it read":["well.","a","nicely."],"it readable,":["that's"],"it reads":["much","better","better","any","a","more","a","and","a"],"it reads.":["I"],"it really":["complicated","necessary","should","isn't","makes","creates"],"it really,":["I"],"it receives":["a"],"it refers":["to"],"it reminded":["me"],"it represents.":["Something"],"it requires":["a"],"it resembles":["me"],"it returns":["one","a","a","a","a","the"],"it right":["than","on"],"it runs.":["This"],"it scattered":["around"],"it seemed":["like","to","no","like","like"],"it seems":["to","like","like","to","like","to","prevalent.","like","like","to","that","like","that","to","to","to","to","to","to","that","to","like","using","like","ok,","but","to","like"],"it separated.":["I"],"it serves":["well"],"it shorter":["using"],"it should":["just","be","be","be","be.","be","be","be","be","be"],"it shouldn't":["be"],"it shows":["up."],"it simple":["to"],"it simplifies":["`Dict.get`"],"it simply,":["with"],"it since":["I","there's","?\u003ca","the"],"it so":["you","you"],"it some":["thought,"],"it something":["seems","like","like"],"it somewhere,":["don't"],"it sorts":["the"],"it sounds":["like","more"],"it speaks":["more"],"it splits":["words"],"it standard":["(acceptable"],"it stands":["with"],"it stick":["out"],"it still":["doesn't","feels"],"it submitted":["for"],"it supports":["all","that"],"it sure":["shortens"],"it takes":["up","someone"],"it takes),":["and"],"it teaches":["you"],"it tell":["its"],"it tells":["something","more"],"it tends":["to"],"it that":["I","way","way","I'm","way.","is","way.","the","you","the","you"],"it the":["message","name","way","opener","|&gt;","normalize","other","more","less"],"it thinks":["Banana"],"it this":["way.","way:","way","way,","way"],"it though.":["I","I"],"it through":["`Dict`).","and"],"it throughout":["the"],"it throws":["a"],"it to":["use","simply","helper","me,","the","be","'query',","a","all_letters_match?","be","a","be","be","be","just","be","extract","try","`\"\"`","get","certain","make","work.","the","avoid","submit","use","be","a","instantiate","the","work.","be","minimize","be","pass,","essentially","`List.flatten`.","be","the","`do_reverse`","the","my","be","feel"],"it too":["complicated","when","much"],"it too.":["I'd"],"it took":["me"],"it transforms":["to"],"it triggers":["the"],"it turns":["out"],"it twice:":["once"],"it unnecessary":["for"],"it up":["and","(without","to","(and","some","from","a","incrementally","--","from","with"],"it up,":["but"],"it used":["a"],"it uses":["the"],"it using":["Erlang","pattern","`defp`)","character","the"],"it usually":["takes"],"it very":["clear"],"it warrants":["an"],"it was":["making","late","easier","more","necessary","a","me","better","explicitly","a","more","something","giving","the","to","pointed","graphing","given.","important","a","reverted.","suggested","needed","recommended","worth","each","very","using.","used","fewer","split","an","forbidding","invalid.","easy.","worth","a","easy","clear","pretty","the","passing","on","preferable","much"],"it wasn't":["necessary.","the","working","matched."],"it weird,":["but"],"it well,":["but"],"it were":["rearranged","a","in","\"real\",","me"],"it when":["there's","writing","people","coding","I"],"it while":["reducing","`List.first`"],"it will":["work","help","be","return","basically","not","have","return","be","efficiently","fail","get","eventually","help","be","consume","do","take","take","do","pass"],"it with":["that!","a","List.foldl","an","predicate","a","a","an","a","Enum.","Enum,","pattern","`@judd`,","them?","another","a","function","something","what","the","%r/\\p{L}/","guards","`concat`.","two"],"it without":["Regex?","thinking","the","using","sacrificing","OTP","change"],"it won't":["be","be","bother"],"it work":["like","for","with","with"],"it work.":["Is"],"it work?":["If"],"it works":["fine","out","in","for","well","on","perfectly","btw","internally","and"],"it works.":["Erlang","Would","I"],"it would":["use","be","not","make","have","depend","be","make","depend","be","be","improve","handle","fail","be","be","also","be","help","feel","be","improve","return","be","be","make","be","be","work.","be","be","be","be","look","be","change.","make","gain","help.","make","be","have","definitely","match","make","be","be","be","be","make","make","make","make","make","look","present","require","fit","no","work","make","result","still","be","be","return","be","be","be","iterate","make","pass","be","return"],"it wouldn't":["be"],"it wrightling,":["thanks!"],"it wrong.":["I"],"it yet,":["but","but"],"it you":["could","were"],"it you'll":["also"],"it yourself?":["I"],"it! It":["would"],"it! Thanks":[":)"],"it! What":["would"],"it\" -":["not"],"it'd be":["great.","fun","worth"],"it'd consider":["\"1,"],"it'll accept":["a"],"it'll be":["more","looking"],"it'll feel":["more"],"it'll go":["away."],"it'll make":["the"],"it'll match":["letters"],"it's \"idiomatic\",":["don't"],"it's %r":["and"],"it's (far)":["more"],"it's *wrong*,":["just"],"it's `(String.strip(greeting)":["|\u003e"],"it's `500500`.":["So","So"],"it's `:gen_event`.":["`:gen_server.start_link\\0`"],"it's `Access`":["implementation"],"it's `O(n)`.":["So","So"],"it's ```":["to_list"],"it's `silence?`":["which"],"it's a":["bit","bit","good","more","more","common","real","pattern","bit","convention/preference","more","bit","little","bit","great","tradeoff","Beer","little","convention","more","more","good","strict","little","perfectly","question.","tradeoff.","good","lot","tiny,","win.","limitation","single","good","good","small","matter","bit","good","best","little","bit","bit","couple","little","nice"],"it's about":["string"],"it's actually":["pre-pending"],"it's all":["the"],"it's already":["been"],"it's also":["fairly","more","`if"],"it's always":["worth"],"it's an":["interesting","anagram","area"],"it's another":["of"],"it's any":["more"],"it's appropriate":["to","or"],"it's asking":["if"],"it's available":["in"],"it's awesome":["to"],"it's bad":["to"],"it's bad,":["but"],"it's basically":["a"],"it's because":["it","it"],"it's been":["created,"],"it's being":["rewritten,"],"it's best":["to","to","to","to","to"],"it's better":["to","for","stylistically","to","or","to","to","to","to","to","to","not","to","to","to","to"],"it's calling":["reverse"],"it's clear":["that"],"it's clearer":["what"],"it's clever":["or"],"it's coming":["from."],"it's common":["to","to","for","to","not"],"it's concurrent.":["Out"],"it's confusing":["to"],"it's considerably":["more"],"it's converting":["a"],"it's cool":["to"],"it's deeply":["nested"],"it's definition":["of"],"it's designed":["to"],"it's different":["from"],"it's discussed":["around"],"it's doing":["rather","in","is"],"it's doing,":["which"],"it's doing.":["On"],"it's done":["in"],"it's done.":["There"],"it's due":["to"],"it's easier":["just","to","to"],"it's easy":["to","to"],"it's elixir.":["lol."],"it's explicitly":["delimited,"],"it's far":["from"],"it's fast":["and"],"it's features":[":)"],"it's fine":["to"],"it's generally":["implied","considered"],"it's going":["to"],"it's gone":["now"],"it's good":["practice","enough."],"it's great":["to"],"it's handy":["for"],"it's hard":["to","to","to","to"],"it's harder":["to"],"it's how":["I"],"it's idiomatic":["to","to"],"it's immutable,":["its"],"it's implemented":["on"],"it's important":["to"],"it's impossible":["to"],"it's in":["Regex.","elixir","keeping"],"it's inconsistent":["given"],"it's incorrect.":["Any"],"it's indeed":["often"],"it's intended":["it"],"it's invoked,":["even"],"it's just":["a","a","returning","my","a","an","a","checking"],"it's kind":["of"],"it's large":["for","for","for","for","for"],"it's lazy":["(doesn't"],"it's less":["clean","explicit,"],"it's like":["Ruby,","a"],"it's longer":["but"],"it's matched,":["and"],"it's meant":["to"],"it's misleading.":["\"\""],"it's more":["common","true","direct","that","likely","idiomatic","idiomatic","immediately","readable","common","readable.","conventional.","common","idiomatic","common"],"it's much":["worse?"],"it's my":["inexperience"],"it's name":[":)"],"it's necessary":["for","or","or"],"it's never":["nil"],"it's no":["longer","surprise","better"],"it's not":["necessarily","a","always","part","that","something","as","a","checking","right","*always*","the","replacing","particularly","particularly","working","that","an","that.","really","working","been","common","a","necessarily","intended","exactly","`:gen_server`","much","working","a","the","really","an","necessarily","mostly","clear"],"it's often":["most","quite","a"],"it's on":["the"],"it's only":["for","used","used","a","called","for"],"it's own":["function."],"it's own.":["I"],"it's parent":["function."],"it's perfect,":["can"],"it's performing":["a"],"it's possible":["to","to","to","to","you"],"it's possible,":["though"],"it's possible.":["If"],"it's preferable":["in","to"],"it's pretty":["clear","rare","expressive","common","hard","hard"],"it's probably":["not","possible","best","best","better","a"],"it's pure/side-effect-free":["so"],"it's quite":["similar"],"it's rather":["hard"],"it's readable,":["and"],"it's really":["not","a","a","helpful","the"],"it's redundant":["to"],"it's replacing":["it"],"it's residual":["OO"],"it's returning":["a","the"],"it's saying":["tail-recursion"],"it's short":["and"],"it's slightly":["less","more","nicer"],"it's something":["like","to"],"it's sort":["of"],"it's still":["ugly.","going","not"],"it's subjective":["to"],"it's talking":["about"],"it's ten":["digits"],"it's testing":["the"],"it's the":["default","output","nature","same","wrong","\"better\"","one","same","number","reduce","side-effect","exercises"],"it's time":["to"],"it's totally":["overkill","fine."],"it's typical":["for"],"it's ugly.":["I'm"],"it's up":["to"],"it's used":["for."],"it's useful":["in"],"it's usually":["good"],"it's valid":["according"],"it's value.":["Maybe"],"it's very":["easy"],"it's way":["cleaner"],"it's wise":["to"],"it's working.":["Time"],"it's worse":["because"],"it's worth":["it.","it","it.","it."],"it's wrong":["in"],"it) and":["dot-dsl"],"it) can":["return"],"it) that":["the"],"it, I":["submitted","will","did","think","have","wasn't","had"],"it, I'm":["not","not","reminded"],"it, `if":["n"],"it, and":["I","the","I","finally","'exercism","it","if","discard"],"it, as":["opposed","it","it's"],"it, but":["I","I'm","I","equally","it","I","I","I","it"],"it, don't":["know"],"it, due":["to"],"it, even":["though"],"it, except":["my"],"it, first":["you"],"it, had":["a"],"it, it's":["replacing"],"it, just":["saying"],"it, my":["code"],"it, not":["where","by"],"it, perhaps":["if"],"it, problem":["solved."],"it, protocols":["are"],"it, regular":["expressions"],"it, so":["I'm","my","I"],"it, that":["makes","kept"],"it, that's":["what"],"it, the":["more","`!is_binary(something)`","three","@miles",":all","next"],"it, then":["the"],"it, this":["should"],"it, to":["get"],"it, too.":[":)"],"it, unlike":["in"],"it. (Lines":["5","3"],"it. (There":["are"],"it. :":[")",")"],"it. \u003ccode\u003eHashDict.put()":["|\u003e"],"it. Can":["you"],"it. Check":["out"],"it. Consider":["it"],"it. Dict":["="],"it. Do":["you"],"it. Does":["that"],"it. Don't":["let"],"it. For":["example,"],"it. Glad":["I"],"it. Here":["is"],"it. Hint:":["think"],"it. I":["had","found","don't","wonder","was","find","could","think"],"it. I'm":["new"],"it. In":["this"],"it. It":["would","did"],"it. It's":["the"],"it. Like":["you"],"it. Maybe":["```Greeting```"],"it. Only":["thing","thing"],"it. Secondly,":["the"],"it. So":["out"],"it. So,":["in"],"it. Submitting":["a"],"it. Take":["a"],"it. The":["only","`Kernel.inspect`"],"it. There's":["an"],"it. Trying":["to"],"it. Why":["not."],"it. You":["could"],"it. `Enumerable.reduce`":["is"],"it. `cond`":["makes"],"it... but":["I"],"it? (I'm":["really"],"it? And":["(please"],"it? I":["usually"],"it? or":["how"],"item in":["the","the","list,","the"],"items in":["the","the"],"items to":["count."],"iter` and":["a"],"iterate in.":["Probably"],"iterate on":["this","this"],"iterate over":["every","the","it."],"iterate when":["you"],"iterated nicely.":["The"],"iterated on":["a"],"iterates over":["the"],"iterates. You":["got"],"iterating four":["times"],"iterating over":["lists,","the"],"iterating the":["lists"],"iterating your":["array"],"iteration #1).":["Not"],"iteration #2":["avoids"],"iteration #3,":["compare"],"iteration (and":["switched"],"iteration (where":["ranges"],"iteration 1.":["I"],"iteration 2":["for"],"iteration 4":["instead."],"iteration I":["accidentally"],"iteration actually":[":)"],"iteration along":["with"],"iteration and":["the"],"iteration based":["on","on","on"],"iteration better,":["extracting"],"iteration by":["using"],"iteration feels":["a"],"iteration function":["gets"],"iteration has":["taken"],"iteration is":["the"],"iteration on":["the"],"iteration since":["4"],"iteration so":["far."],"iteration still":["holds:"],"iteration that":["can","tries","I'm"],"iteration through":["the"],"iteration to":["match"],"iteration unless":["there"],"iteration was":["aimed"],"iteration with":["comments"],"iteration worked.":["But"],"iteration, guess":["I"],"iteration, particularly":["the"],"iteration, so":["no"],"iteration, with":["a"],"iteration. Along":["with"],"iteration. Have":["any"],"iteration. I":["may","just"],"iteration. I'll":["check"],"iteration. I've":["also"],"iteration. That":["combination"],"iteration. This":["version"],"iteration. Wouldn't":["it"],"iteration; I":["just"],"iterations and":["immutable"],"iterations to":["figure","collapse"],"iterative implementation":["of"],"iterative solution":["you"],"iteratively, even":["if"],"iterator, but":["couldn't"],"iterator, can":["never"],"iterators don't,":["but"],"iterators in":["the","a"],"iterators that":["support"],"iterators, I":["don't"],"its \"story\"":["a"],"its `if`":["doesn't"],"its arity":["work"],"its boolean":["checks"],"its current":["iteration."],"its head,":["instead"],"its input.":["(Markdown"],"its length.":["All"],"its more":["of"],"its own":["private","explicit","module.","private","private","top-level","line,","function,","method/function?","thing,","module","private","method.","enumerable","in"],"its purpose":["is"],"its result":["is"],"its small":["and"],"its story":["better","more"],"its story\"":["a"],"its uppercase":["equivalent"],"its use":["of"],"its value":["is"],"itself (with":["the"],"itself I":["do"],"itself as":["natural."],"itself at":["the"],"itself be":["the"],"itself but":["I"],"itself clearly":["without"],"itself in":["the"],"itself much":["smaller."],"itself that":["encoded"],"itself up":[":-)"],"itself with":["determining","determining"],"itself, I":["had"],"itself, unless":["they're"],"itself, you":["can"],"itself. I":["think"],"itself. I'm":["not"],"itself. You":["can","must"],"it´s not":["more"],"it´s ok":[".."],"j'ai à":["peu"],"jah followed":["the"],"java :":["javascript!!&@$%^&\"","javascript!!&@$%^&\""],"javascript and":["ruby"],"job but":["I"],"job done,":["you"],"job for":["a"],"job on":["the"],"job separating":["the"],"job with":["the"],"job! I":["like"],"job, I'd":["just"],"job, although":["I"],"job, but":["submitted"],"job. You":["also"],"join in":["JavaScript"],"join strings":["together,"],"join the":["list","lines","char","strings","sorted","results"],"join would":["work"],"join, I'll":["update"],"joined together":["to"],"joined. Should":["they"],"joined? I":["know"],"joiner not":["one"],"joining in":["the"],"joining the":["array),","two","two","enum"],"joining. Of":["course,"],"judge other":["people's"],"judicious use":["of"],"jump in":["there"],"jump out":["at"],"jumped into":["the"],"jumping on":["the"],"jus use":["`String.downcase`"],"just \"give":["away"],"just 'abcde'":["which"],"just 1":["pass:"],"just A-Z.":["But"],"just ASCII,":["but"],"just `&1":["+","+"],"just `@mossie`":["which"],"just `bit`":["and"],"just `f`":["and"],"just `filter`":["and"],"just `list`":["(which"],"just `question?`":["What"],"just `to_char_list`)":["to"],"just `true`":["as"],"just `update`":["at"],"just a":["matter","series","stylistic","single","small","tiny","proxy","week","convenience","little","style","little","little","residual","binary","convenience","matter","solution","nice","few","few","HashDict","lone","little","small"],"just a-z?":["If"],"just about":["any"],"just add":["String.downcase","a"],"just added":["and","`String.downcase`","busywork"],"just always":["use","use"],"just an":["empty","empty","example),","internal","alternative"],"just append":["two"],"just as":["evil","well","a","easily","lazy","you","I"],"just at":["the"],"just be":["a","because","a","incorporated","me.","me","me","used","aware","the","my"],"just because":["a","I","they're","I'm","I'm","it","there","it"],"just become":["its"],"just beer":["--"],"just before":["it's","that"],"just binaries,":["they"],"just bit":["a"],"just bringing":["up"],"just by":["clicking"],"just call":["itself","it","it"],"just called":["`ExtendedEnum`,"],"just calling":["that"],"just calls":["`String.downcase`"],"just can't":["help"],"just caught":["that"],"just caution":["that"],"just changed":["recently,"],"just check":["if","to"],"just checking":["for","to"],"just collapse":["it"],"just collapsed":["the"],"just commented":["on"],"just compare":["`something`","the"],"just compares":["letter"],"just comparison":["but"],"just considering":["whether"],"just containing":["one"],"just continues":["like"],"just copied":["the"],"just copy":["paste"],"just couldn't":["think"],"just create":["one"],"just creating":["more"],"just curious.":[":-)","'Cause"],"just define":["those","the"],"just defined":["such"],"just did":["it"],"just didn't":["find","work."],"just do":["the","something","`digit_count","the","`[func.(head)"],"just does":["the","a"],"just doesn't":["seem"],"just doing":["one"],"just don't":["see","know","pass","have"],"just eliminate":["the"],"just empty":["space."],"just explicit":["lists"],"just feels":["very","a","like"],"just felt":["like","wrong."],"just figured":["I"],"just fine.":["Alternatively","I","Of"],"just fix":["the"],"just fixed":["a"],"just following":["the"],"just for":["the","the","the"],"just formatting?":["Can"],"just found":["a"],"just four":["cases,"],"just from":["the"],"just get":["a","rid","a"],"just getting":["it","silly","too","all"],"just give":["you"],"just gives":["really"],"just giving":["the","you"],"just go":["ahead"],"just going":["to"],"just got":["simpler"],"just gotten":["used"],"just grabbed":["the"],"just had":["a"],"just happens":["to"],"just have":["an","one","one","to","much"],"just helpers":["for"],"just how":["to"],"just hurried":["through"],"just ignoring":["or"],"just import":["`:functions`,"],"just in":["case"],"just increases":["the"],"just insert":["`String.downcase`"],"just iterate":["over"],"just iterating":["your"],"just keep":["the","in"],"just know":["some"],"just learned":["so","Elixir"],"just learning":["this,","Elixir.","elixir,","elixir."],"just leaves":["them"],"just like":["to","to","to","to"],"just lists.":["I"],"just looking":["at"],"just looks":["a","a"],"just made":["it"],"just make":["it"],"just makes":["it"],"just map":["`String.downcase`"],"just mark":["this"],"just me":["calling","though...","or"],"just merge":["`two_verse`"],"just minor,":["but"],"just more":["lines"],"just move":["the","the","the","the","your"],"just my":["perspective","unfamiliarity","first"],"just need":["a"],"just never":["finishes."],"just not":["good","sure","quite"],"just noticed":["this","that.","I"],"just of":["my"],"just on":["vacation."],"just once":["in"],"just once,":["at"],"just one":["condition","pass","parameter:","or"],"just paraphrasing":["Dave"],"just pass":["the","the","reducing_function","the","the"],"just pattern":["match","match","matching."],"just personal":["preference."],"just prepend":["it"],"just produce":["a"],"just pushed":["a"],"just put":["them","it","the"],"just ran":["normally."],"just realised":["that","I"],"just realized":["Regex.scan","I"],"just really":["love"],"just reference":["@keshaun","the"],"just rely":["on"],"just remove":["the"],"just removed":["it."],"just reorder":["the"],"just return":["a","`:ok`"],"just returning":["a","the","whatever","it"],"just reversing":["the","one"],"just saw,":["since"],"just saying":["it"],"just scans":["for"],"just see":["what's"],"just seem":["a"],"just seemed":["like"],"just seems":["like","cleaner","a"],"just sent":["a"],"just set":["it"],"just sharing":["that"],"just shorthand":["for","for"],"just simple":["wrappers"],"just slapped":["the"],"just so":["many","I","standard"],"just some":["thoughts."],"just something":["i","about"],"just started":["learning"],"just struggling":["with"],"just submit":["this"],"just submitted":["a","a","a"],"just submitting":["this"],"just substitute":["`bottle`"],"just sugar,":["just"],"just suggesting":["things"],"just suggestions":[";-)."],"just swap":["`String.last`"],"just syntactic":["sugar"],"just taken":["your"],"just takes":["two"],"just test":["for"],"just that":["they","it's","the","non","*all"],"just that).":["Better"],"just the":["example","`String`","normal","accumulator.","same","10"],"just think":["something"],"just this:":["`Range[first:"],"just to":["move","use","avoid","help","match","return","illustrate","see"],"just too":["picky"],"just took":["the"],"just tried":["it"],"just try":["to"],"just trying":["to","to","out"],"just two":["things:","guards."],"just ugly":["and"],"just upcase":["everything"],"just update":["the"],"just updated":["to","to","to"],"just use":["a","implicit","the","what","a","a","```str","the","an","`@wava`.","Elixir's","a","the","`func","`GenServer.Behaviour`,"],"just used":["`Regex#scan`","that","an"],"just uses":["Elixir's"],"just using":["the","it","GenServer,"],"just verified":["that"],"just verify":["that"],"just wading":["into"],"just wanted":["you","to","to","it","to","to","to","a","to"],"just wasn't":["coming"],"just went":["to"],"just what":["the"],"just whitespace?":["E.g.,"],"just with":["functions","the"],"just wonder":["why"],"just work":["left-to-right,"],"just working":["with"],"just write":["`String.strip(speech)","`String.last(text)`.","`&(&1+1)`","`&(&1+&2)`"],"just writing":["out"],"just wrote":["it"],"justification for":["the"],"k)} end)":["|&gt;"],"k,v pairs":["in"],"kata is":["confused"],"kata, it":["was"],"katrina would":["say"],"keen to":["here"],"keep (or":["simply"],"keep `is_uppercase?`":["if"],"keep `yelling`":["as"],"keep an":["eye"],"keep and":["discard","discard"],"keep anyone":["from"],"keep finding":["solutions"],"keep in":["mind","mind.","mind","the"],"keep it":["**DRY**"],"keep looking,":["but"],"keep me":["in"],"keep meditating":["on"],"keep multiple":["clauses"],"keep one":["or"],"keep producing":["your"],"keep proper":["semantics,"],"keep rambling...":["but,"],"keep re-sorting":["the"],"keep that":["in","in","method"],"keep the":["`interpret`","public","\"is_\"","code","code","code","code","public","cond"],"keep them":["short"],"keep they":["hey(\"\")"],"keep things":["simple","on","immutable."],"keep thinking":["about"],"keep thinking.":["In"],"keep this":["as"],"keep track":["of"],"keep variables":["from"],"keep wanting":["to"],"keep(collection, fn(x)":["-\u003e"],"keep. Took":["me"],"keeping both":["in"],"keeping everything":["in"],"keeping it":["around?","nice"],"keeping me":["on"],"keeping separate":["what"],"keeping things":["readable,"],"keeping with":["the"],"keeps Bob":["from"],"keeps that":["function"],"keeps the":["number","list"],"kept `anagramOf?`":["separate"],"kept banging":["my"],"kept getting":["the","compilation"],"kept running":["into"],"kept separate":["for"],"kept some":["pattern-matching"],"kept the":["implementation","different"],"key (line":["23)"],"key `nil`":["in"],"key and":["want"],"key can't":["be"],"key conflicts":["during"],"key for":["me."],"key is":["already","present","already"],"key to":["each"],"key value":["if"],"key/value pairs,":["and"],"keys and":["count","then","values"],"keys collide.":["Then"],"keys in":["a","@carmel"],"keys so":["there"],"keys? Or":["even"],"keyword `:else`":["which"],"keyword blocks":["to"],"keyword in":["Elixir"],"keyword list":["here"],"keyword list.":["Or"],"keyword lists,":["you"],"keyword syntax:":["`def"],"keywords and":["one"],"kicking that":["out"],"kind down":["into"],"kind of":["part","implied","'future","figured","message","list-based","feedbacks.","instance","really","stuff","count,","a","ugly","dictionary","Anagram","accumulation","stuff","doing","message","communication","input","stuck.","like","reluctant","parenthesis","thing","knowledge","thing,","missing","construction).","makes","facilitates","complicated.","clutters","stuff","hard","issue","wanted","hard","pictured"],"kind reader":["interpret"],"kind throwing":["that"],"kinda bugged":["me"],"kinda deprecated":["for"],"kinda like":["where","this"],"kinda liked":["having"],"kinda seems":["like"],"kinds of":["problems/ambiguities","things","functions","records,","dictionaries,","collections,","dictionaries,","dictionaries","dictionaries,","dictionaries"],"knew I":["could"],"knew `HashDict`":["had"],"knew about":["`cond`"],"knew all":["that)."],"knew how":["to"],"knew relatively":["well"],"knew that":["```slice```"],"knew the":["right"],"know *how*":["he"],"know \u003ccode\u003e":["fn(value)"],"know Elixir's":["convention."],"know I":["have","don't","haven't"],"know RegEx":["better"],"know `bottle_count`":["is"],"know `cond`":["and"],"know `if`":["can"],"know a":["better"],"know about":["`HashDict.update`,","String.ends_with/1","pipelining?","doctests!","`ends_with/2`,","that!","the","that.","```","that","these.","the","the","`String.last`?","the","yet.","the","the","using","hd","`defp`.","`Enum.count/2`?","list","the","that","the"],"know about,":["I'll"],"know actually":["what"],"know any":["simple"],"know anything":["about","about"],"know because":["I'm"],"know better":["than"],"know either.":["As"],"know elixir,":["so"],"know exercism":["isn't"],"know for":["now"],"know how":["the","to","to","to","to","to","smart","to","to"],"know if":["I","you","you're","it's","I've","it's","you","you","there","it's","my","an","you'd","you'd","you've","you","you"],"know it":["had"],"know it'll":["accept"],"know it's":["just"],"know of":["the","any","other","a"],"know roughly":["how"],"know some":["things"],"know that":["they","José","you","in","Elixir","you","you","you","having","it","about","it's","you","allows","using","rem","-","a"],"know that.":["I'll"],"know the":["best","method","right","answer","test","best","answer,","regex","specifics,","backing","string","significance"],"know there":["was","might","needs","was"],"know these":["tuple-case-pattern-matchings","are"],"know this":["is"],"know this...":["but"],"know to":["make"],"know what":["\"upcase\"","to","the","the","you","constraints","to","you","is","``cond``","you","you","the","a","that","happens"],"know what's":["going"],"know what...":["I've"],"know when":["reading","it"],"know whether":["you","the"],"know which":["way","one","names"],"know who":["does"],"know who's":["the"],"know why":["I","I","this","I"],"know you":["can","marked","could","would","could","understand","can","can","could"],"know you're":["dealing","trying"],"know! Thank":["you"],"know) doesn't":["work,"],"know, I":["think","write","can't"],"know, `def`":["defines"],"know, but":["couldn't."],"know, the":["syntax"],"know, there":["is"],"know, without":["a"],"know, you":["could","can"],"know. Moving":["on..."],"know. Thanks":["also"],"know; these":["kind"],"knowing immediately":["which"],"knowing that":["I'm"],"knowing the":["value"],"knowing what":["a"],"knowledge I":["want"],"knowledge of":["how"],"knowledge that":["`@amanda"],"known about":["that"],"known as":["fold)"],"known in":["the"],"known issue":["--"],"known precedence":["problem."],"knows a":["way"],"knows how":["to"],"knows of":["an"],"knows what":["those"],"knwo about":["def"],"l -\u003e":["hd(l)"],"l =":["Enum.to_list(input)"],"l' vs.":["'l,acc'"],"l)) end`":["you're","you're"],"l, acc":["-\u003e","-\u003e","-\u003e"],"l, fn":["x"],"l, w":["inlist"],"la convention":["est"],"la même":["chose"],"lack of":["a","duplication.","repetition","indentation","knowledge","lazyness.","`@`s)"],"lacks any":["such"],"lacks thereof)":["into"],"laid out":["in"],"lambda (anonymous":["function)."],"lambda arrow":["being"],"lambda syntax.":["It","It's"],"lambda was":["the"],"lambdas now,":["but"],"land with":["its"],"land, but":["it's"],"landed in":["Elixir"],"language *is*":["still"],"language --":["those"],"language I":["use","did"],"language adds":["something"],"language allowing":["question"],"language and":["am","we're","that","if"],"language as":["much"],"language besides":["English."],"language but":["I","included"],"language documentation":["and"],"language features":["or","or","just","they"],"language from":["the"],"language into":["the"],"language is":["giving","not"],"language itself":["I"],"language like":["Elixir.","OCaml"],"language may":["be"],"language of":["the"],"language paradigms":["pay"],"language repository":["should"],"language that":["doesn't","isn't","has"],"language though.":["Bad"],"language to":["learn.","me.","have","know"],"language wants":["to"],"language was":["particularly"],"language with":["absolutely","a"],"language working":["on"],"language yet":["and"],"language you've":["never"],"language! Love":["it."],"language, it":["teaches"],"language, learning":["from"],"language, so":["to","I"],"language. Focus":["first"],"language. I":["think","find"],"language. I'm":["not"],"language. That":["would"],"languages I":["used"],"languages as":["well,"],"languages at":["parse"],"languages because":["`has_letters?`"],"languages have":["completely"],"languages like":["Erlang","Elixir","Russian.","Elixir","Elixir","Elixir","Elixir"],"languages now":["so"],"languages on":["line"],"languages require":["at"],"languages share":["a"],"languages such":["as"],"languages tend":["to"],"languages that":["I","don't","aren't"],"languages there":["is"],"languages where":["I'd"],"languages with":["function/method","more"],"languages without":["ability"],"languages you":["can"],"languages! Only":["in"],"languages, like":["Dutch,"],"languages, namely":["Ruby."],"languages, so":["if"],"languages. \u003c\u003c\u003e\u003e":["is"],"languages. Is":["that"],"laptop right":["now,"],"large and":["unwieldily,"],"large bodies":["of"],"large data":["set"],"large for":["a","a","a","a","a"],"large list":["and","and","and","and","and"],"large list.":["Could"],"large lists":["to"],"large lists.":["In","What"],"large phone":["number","numbers?"],"large string":["of"],"large the":["function"],"large to":["small."],"large, I":["go"],"largely unknown":["language!"],"larger Elixir":["codebases"],"larger context.":["For"],"larger magnitude,":["but"],"larger overhead":["of"],"larger system,":["it"],"larger system.":["In"],"larger. For":["a"],"largest numbers":["and"],"largest program":["I've"],"laser-focused right":["on"],"last (I":["suspect"],"last 2":["methods."],"last `cond`":["(L10)"],"last `sing/2`":["method"],"last attempt":["as"],"last character":["of","of","of","to"],"last cheeky":["version"],"last clause":["in","I"],"last element":["of","of"],"last exercise":["at"],"last expression":["so","in","of","of","to","of","of","of","is"],"last function":["in","a"],"last input":["I"],"last is":["pretty"],"last iteration":["still"],"last iteration.":["I"],"last just":["to"],"last minute":["refactoring"],"last nitpick":["would"],"last operation":["in"],"last param":["anyway."],"last point":["is"],"last question:":["yes"],"last statement":["def"],"last submission":["about"],"last submission,":["it"],"last test":["won't","failure","pushed"],"last thing":["executed"],"last thing,":["instead"],"last thing:":["there"],"last time":["for","so"],"last time,":["in"],"last tip,":["sounds"],"last tweak":["to"],"last two":["tests","function","function","expressions","functions"],"last value":["of"],"last word":["in","holds"],"last), \"\\n\",":["fn(count)"],"last, dow,":["month,","month,"],"last: 3]`":["(which"],"last: 4]`":["(i.e."],"last: y]`.":["So"],"lastest condition":["of"],"late and":["I"],"late in":["the"],"lately and":["I"],"lately, but":["when","I"],"later being":["compared"],"later down":["the"],"later exercises":["where"],"later on":["when"],"later this":["week."],"later when":["it","the"],"later work.":["But"],"later, no":["longer"],"later. It":["also"],"later: `Enum.map_join":["[1,2,3],"],"latest 2":["methods"],"latest Elixir":["version.","development"],"latest changes":["that"],"latest iteration":["since"],"latest one...":["or"],"latest revision,":["tnx!"],"latest set":["of"],"latest stable":["release"],"latest submission":["by"],"latest submission.":["I'm"],"latest tests":["should","without","with"],"latest version":["of"],"latest version.":["If"],"latter in":["count/1,","a"],"laying out":["strings,"],"lazy (doesn't":["build"],"lazy and":["actually","efficient"],"lazy as":["`Stream.unfold`.","unfold."],"lazy way":["of"],"lazy when":["writing"],"lazy with":["Stream.unfold"],"lazy/complacent here,":["primarily"],"lc {":["dp,","nth,","dp,","dp,","dp,","nth,","dp,","dp,","letters,"],"lc {letters,":["value}"],"lead me":["to..."],"lead to":["less","very","endless","users","weird"],"leading `&amp;`":["will"],"leading and":["trailing"],"leading dots":["are"],"leading edge":["of"],"leading underscore":["makes","is"],"leads to":["your","some"],"leaf a":["new"],"leaf and":["a"],"leaf needs":["to"],"league. I":["can't"],"lean on":["`count`?"],"leaning towards":["more","`every_x_years`"],"leans a":["bit"],"leap from":["metaprogramming"],"learn Elixir":["through"],"learn a":["lot","lot"],"learn about":["it:","Elixir."],"learn for":["a"],"learn how":["to"],"learn more":["about","doing","about","of"],"learn on":["both"],"learn something":["every"],"learn the":["most"],"learn to":["think","read","help"],"learn while":["doing"],"learn! I've":["learnt"],"learn. I":["am"],"learn. That's":["actually"],"learned Elixir":["in"],"learned a":["lot","lot","lot","few","few"],"learned about":["private","`Enum.count`"],"learned and":["that","adapted"],"learned in":["Elixir"],"learned regular":["expressions"],"learned so":["much"],"learned something":["from"],"learned that":["a"],"learning Elixir":["as","exercise","so"],"learning Elixir,":["so","so"],"learning Elixir.":["2"],"learning Erlang":["itself"],"learning OTP":["with"],"learning a":["lot","lot,"],"learning and":["refactoring."],"learning elixir,":["so","didn't"],"learning from":["it!"],"learning here,":["but"],"learning more":["elixir."],"learning my":["way"],"learning something.":["Never"],"learning the":["functional","details"],"learning them":["simultaneously."],"learning this,":["too."],"learning, etc).":[":)"],"learnt about":["cond,","```defp```"],"learnt more":["Haskell"],"learnt the":["&(&1+1)"],"least a":["little"],"least ahead":["of"],"least amount":["of"],"least conformant":["with"],"least for":["Elixir.","me."],"least half":["the"],"least happy":["with."],"least how":["I"],"least in":["Erlang,","this","languages"],"least include":["a"],"least it's":["contained."],"least more":["idiomatically."],"least not":["one"],"least now":["the"],"least on":["the"],"least one":["of","character","alphabetical","letter","uppercase","uppercase","letter","letter."],"least remove":["some"],"least some":["idea"],"least that":["gives"],"least to":["my","me."],"least tried":["doing"],"least tried.":["Thanks!"],"least when":["arguments"],"least, I":["am","like"],"least, which":["has"],"least. For":["this"],"leave String.replace":["because"],"leave `String.downcase()`":["calls"],"leave it":["as-is","up","as","around"],"leave my":["submission"],"leave off":["the"],"leave out":["the"],"leave the":["hey"],"leave them":["out.","off"],"leave you":["with"],"leaves less":["\"magic"],"leaves them":["the"],"leaving 11":["and"],"leaving on":["holiday"],"leaving only":["the","the"],"leaving them":["off."],"led me":["to"],"left !=":["right"],"left (I":["think"],"left (the":["first)","first)"],"left after":["removing"],"left argument":["of","is","to","to","to","to"],"left argument)":["grows?"],"left as":["the"],"left being":["just"],"left bitshift":["operator"],"left everything":["expanded"],"left examining":["the"],"left folding":["with","over","concat","concat"],"left in":["by"],"left into":["the"],"left list":["has","has"],"left out":["the"],"left over":["previously?"],"left some":["out"],"left the":["case","`mutation?`"],"left them":["multiline","in"],"left today,":["27"],"left-fold enumerators":["of"],"left-to-right, which":["is"],"legacy reasons)":["uses"],"legal in":["method"],"legal, but":["isn't"],"legit. If":["you"],"legth 0":["is"],"lemme try":["that"],"length &gt;":["80."],"length 0),":["the"],"length 2),":["the"],"length 4)":["then"],"length check?":["Also,"],"length code":["points"],"length comparison.":["The"],"length filter":["before"],"length just":["that"],"length mismatch":["issue."],"length of":["the","the","0","0","the","your","a","the","the","the","a"],"length, though,":["if"],"length. All":["your"],"length. It":["also"],"length. Sweet.":["Submitting"],"length/1 imported":["from"],"lengths and":["then"],"lengths of":["the","lists","a"],"lengths than":["creating"],"lengths would":["allow"],"lengths... seems":["like"],"lengthy implementation":["I"],"less \"magic":["numbers\""],"less I":["like"],"less ambiguous":["syntax"],"less based":["on"],"less checks":["are"],"less clean":["than"],"less code":[":)"],"less code.":["The"],"less complicated":["than"],"less efficient":["ListDict"],"less efficient?":["Not"],"less explicit":["in"],"less explicit,":["but"],"less feedback":["on"],"less function":["call"],"less general":["than"],"less important)":["than"],"less intuitive":["to"],"less likely":["to"],"less line":["of"],"less long":["variable"],"less maintainable":["and"],"less method":["call."],"less nice":["code."],"less noisy":["by"],"less obvious":["and","but"],"less of":["my","a"],"less places":["to","to"],"less readable":["with","to","code.","to","than","because","than"],"less readable,":["so"],"less so":["in"],"less space":["vertically."],"less than":["optimal","499.999.500.000.","499.999.500.000."],"less to":["maintain.","do"],"less ugly":["like"],"less verbose":["name","and"],"less well":["in"],"less wordy":["I'd"],"less work":["that"],"less-than greater-than":["operator"],"lesser number":["of"],"lessons, I":["am"],"let `match`":["work"],"let all":["bad"],"let doctest":["run"],"let go":["of"],"let it":["crash","be"],"let me":["unsubmit.","overrwrite","optimize","say","thank","know","see"],"let my":["question"],"let pattern":["matching"],"let processes":["crash"],"let the":["Exercism’s","\"completed\"","elegance"],"let you":["remove","remove","make","know"],"let your":["```","pipeline"],"lets me":["skip","submit.","fit"],"lets the":["cond"],"lets you":["specify","search","group","filter"],"letter (any":["character,"],"letter Roman":["values"],"letter and":["overall","no","`\\p{N}`","all","`\\p{N}`"],"letter characters":["in"],"letter characters,":["or"],"letter counts":["and","in"],"letter for":["which"],"letter inlist":["letters","letters,"],"letter it":["would"],"letter mappings":["so"],"letter names":["are","easier","are"],"letter of":["a"],"letter present":["twice"],"letter sets,":["which"],"letter support,":["use"],"letter then":["check"],"letter to":["a","value"],"letter variable":["names."],"letter which":["might"],"letter with":["a"],"letter you":["can"],"letter })`":["can"],"letter }`.":["The"],"letter) and":["you"],"letter, `\\p{Lu}`":["matches"],"letter, a":["number"],"letter, or":["digit."],"letter. Maybe":["a"],"letter_freq(source) is":["called"],"letters (Unicode":["general"],"letters (or":["no"],"letters I":["would"],"letters and":["digits","thus","numbers).","scores","then"],"letters are":["uppercase.","later"],"letters as":["a","defined"],"letters for":["cases","target","target"],"letters have":["different","what"],"letters in":["the","any","the","the"],"letters instead":["of"],"letters is":["shouting."],"letters just":["leaves"],"letters mostly":["for"],"letters of":["the"],"letters on":["line"],"letters or":["simply"],"letters per":["say,"],"letters test\",":["so"],"letters thing":["was"],"letters to":["see"],"letters with":["something"],"letters). So,":["theoretically"],"letters* are":["capital."],"letters, but":["indirectly"],"letters, digits":["from"],"letters, do:":["{letter,"],"letters, it":["becomes","shouldn't"],"letters, it's":["just"],"letters, not":["just"],"letters, uppercase":["English"],"letters, value":["}"],"letters-with-scores in":["char"],"letters. Good":["improvement."],"letters. If":["the"],"letters. What":["do"],"letters. You":["might"],"letting me":["know","know"],"letting you":["effectively"],"level I":["imagine"],"level could":["be"],"level data":["in","within"],"level deep.":["List.concat/1"],"level from":["the"],"level function":["such"],"level functions":["though."],"level goals":["in"],"level of":["encapsulation?","abstraction","abstraction","abstraction","abstraction","abstraction.","abstraction.","abstraction","the","understanding","minesweeper"],"level pattern":["matching"],"level to":["reinvent","avoid"],"level version":["of"],"level). Thanks":["for"],"level, I":["don't"],"level, like":["in"],"level. That":["said,"],"level. This":["takes"],"leverage Erlang's":["[`:io.format`](http://www.erlang.org/doc/man/io.html)."],"lib. Using":["mock"],"liberally in":["my"],"libraries I":["often"],"libraries for":["doing"],"libraries tend":["to"],"libraries use":["`do_xxx`"],"libraries. I":["thought"],"library I":["have"],"library and":["clear","I"],"library documentation":["of","doesn't"],"library exercism":["uses"],"library functions":["like","(maybe"],"library is":["not"],"library it's":["easier"],"library too,":["like"],"library tool":["for"],"library use":["the"],"library which":["checks"],"library) has":["good"],"library, and":["would"],"library, or":["algorithmic","algorithmic"],"library, though":["to"],"library. I'm":["used"],"life application.":["But"],"lifetime that":["this"],"lifted when":["Erlang"],"light of":["previous","that"],"light on":["that"],"light, how":["about"],"liiiiike -":["\"Do"],"like !@#$%^&*()":["and"],"like \"27":["presses"],"like \"Hey":["Bob,"],"like \"_speak\",":["but"],"like \"für\"":["(for)?","(for)?","(German","(German","(German","(German","(German"],"like \"kleuren-tv\"":["(Dutch"],"like \"length\",":["\"strip\","],"like \"silent?\"":["and","?","?"],"like \"usually\"":["carry"],"like \"ÑÉØ\".":["Otherwise,"],"like &(&1":["+"],"like (warning:":["untested)"],"like :lists.mapfoldl":["(Erlang's"],"like \u003ccode\u003equestion:":["true\u003c/code\u003e."],"like \u003ccode\u003eupdate_words(&amp;1,":["&amp;2)\u003c/code\u003e"],"like CONSTANTS.":["I"],"like Clojure?":[":-)"],"like Dutch,":["have"],"like Elixir":["this","this","this","this","this"],"like Enum.count/2":["better"],"like Enum.reduce":["is"],"like Erlang":["or"],"like Haskell,":["you"],"like I":["accidentally","tried","failed","do","broke","should","have","need","said,","should","should","was","have","did"],"like I'm":["trying","missing"],"like I've":["found"],"like OCaml":["you"],"like Regex.replace":["rather"],"like Ruby":["style-wise","you","does,","and"],"like Ruby's":["`send`,"],"like Ruby,":["the","I"],"like Ruby:":["`x"],"like Russian.":["You"],"like String.codepoints":["could"],"like String.last(message)":["=="],"like String.scan":["to"],"like String.starts_with(\"":["\")"],"like `%r/[a-z0-9]+/`":["prevent"],"like `%r/\\w+/`":["or"],"like `&(&1":["+","+","+","+"],"like `&(&1+1)`":["because"],"like `&1":["+"],"like `(round":["1_000_000_000)"],"like `+`)":["you"],"like `:silence`":["as"],"like `?A`":["are"],"like `@ines":["60"],"like `@maeve":["50`),"],"like `Enum.count`":["where","when"],"like `Enum.map(comparisons,":["&(&1,"],"like `Enum.map`":["can","or"],"like `Enum.map`.":["In"],"like `Enum.reduce`":["are","than","is"],"like `Regex.match?(%r/^[\\p{Sc}\\p{S}]+$/,":["input)`,"],"like `String.end_with?`,":["`Enum.all?`,"],"like `String.uniq`":["your"],"like `[^[]`,":["and"],"like `[area_code,":["exchange,"],"like `\\p{L}`":["for"],"like ```":["\"_whatever\"","\"\""],"like ```count_words_in_list```.":["Also"],"like ```sentence":["|\u003e"],"like ```string":["=="],"like `asking?/1`":["?"],"like `candidates`":["or"],"like `count`,":["there"],"like `defp":["same?(word,"],"like `empty?`":["doesn't"],"like `fibonacci(1),":["do:"],"like `fn":["(x,"],"like `is_alpha`":["going"],"like `is_binary`,":["`is_integer`,"],"like `is_list`,":["as"],"like `is_pause?`":["or"],"like `is_silent`.":["Not"],"like `last`":["and"],"like `lowercase_sentence`":["isn't"],"like `lw`":["and"],"like `multiple_of?(number,":["multiple)`"],"like `mutation?`":["gives"],"like `numerals_worker`":["or"],"like `predicate`":["(perhaps"],"like `rna_counterpart(nucleotide)`":["and"],"like `round":["1_000_000_000"],"like `s":["=="],"like `send`ing":["the"],"like `shouting?`":["instead"],"like `shouty?(\"42?\")`":["and"],"like `silence?`":["better","might"],"like `silence?`,":["`shout?`"],"like `string_to_list`":["if"],"like `sunteenth`":["and"],"like `utterance`":["as"],"like `words_in_sentence`,":["where"],"like a":["more","fun","good","list","great","nice","couple","really","hack","good","good","fingerprint","good","natural","good","separate","simple","bug","lot","great","great","constructor","huge","suggestion?","regex","huge","code","hint.","pretty","fairly"],"like abbreviations":["in"],"like about":["exercism.io","having","it?","this"],"like add":["can"],"like an":["arbitrary","excellent","area","`anagram?`","OO","html","integer"],"like and":["that"],"like any":["suggestions."],"like best":["is"],"like better":["than"],"like better.":["(If"],"like bynary":["(\u003c\u003c"],"like co-operative)":["aren't."],"like conceptually":["`scan`"],"like counting":["occurrences."],"like crazymykl's":["regex"],"like different":["things"],"like domain":["language"],"like dropping":["the"],"like each":["candidate"],"like either.":["Ah"],"like else":["in"],"like everything":["else"],"like exercism":["choked"],"like frequencies":["or"],"like from":["that"],"like good":["idiomatic","practice."],"like hard-coding":["text"],"like having":["well-named","them","them","them"],"like he":["would"],"like how":["the","you","`List#foldl`","yours","all","the","`cond`","things","this","you","you","you","you","plain","they","it","it","you","the"],"like i18n,":["you"],"like idiomatic":["Elixir"],"like if":["I"],"like in":["Clojure","Ruby.","`count`"],"like increment":["to"],"like inlining":["the"],"like is":["the"],"like it":["would","could","to","the","becomes","a","this","will","either","is","this","with","warrants","better","since","might","would","in","much","could","sorts","in","wasn't","too.","actually","needed","for","because","would","falls","would","got","was","to","that","might"],"like it!":["It","Thanks"],"like it's":["the","converting","only","pretty","not","also","missing","saying","available","talking","asking","testing"],"like it,":["but","and"],"like it.":["Only","Only","`cond`","Take",":",":","Don't","Like"],"like leaving":["them"],"like lines":["11"],"like little,":["private"],"like md5/sha1.":["So"],"like micro":["optimization.","optimization."],"like more":["pattern"],"like most":["aspects","of"],"like my":["current","own."],"like naming":["variables"],"like ord('c')":["in"],"like overkill":["to","looking"],"like overkill;":["using"],"like pattern":["matching"],"like pipelines,":["so"],"like plain":["English"],"like precedence.":["Did"],"like ranges.":["So"],"like reduce":["better"],"like says":["@tyler"],"like seeing":["named"],"like shining":["some"],"like shouting":["and"],"like shouting,":["so"],"like so":["in"],"like something":["could"],"like steering":["clear"],"like stopping?":["I"],"like syntax,":["indentation,"],"like that":["you're","but","you","you","in","you","better","part.","was","it's","you","the","is","`List.foldl`.","crazymykl","you","you","refactoring","syntax","too.","in","one","(such","it's","the","that","you","this","to","wrap/unwrap","might","all","a","syntax","implementation--checking","the"],"like that's":["a"],"like that,":["but","but","or","but"],"like that.":["Would","It","I","`numerals_iterator`",":)","What"],"like the":["pipes.","descriptive","renaming","renaming","use","example","`\u003e","use","-1","use","names","use","logical","naming.","cond","pattern","declarative","use","names","import,","strategy","cond","\"is_XXX\"","names","`is_`","ends_with?","separation","abstraction","way","use","nested","use","name","pattern","`different_words?`","`Regex.scan`","pipeline","atoms","use","following","clear","use","body","presence","idea","way","`verse(n)`","multi-line","visual","only","`import`","only","collapsed","idea","shape","`\"\\n\"`","extra","short","name","function","fn","Regex.match?","way","PR.","reduce","reduce","way","indirection","`.`","abbreviations","data","use","lyrics","use","use","simplest","readability.","use","previous","way","improvement.","main","`ends_with?`","forward","idea","regex","two","`do_foo`","names","functions","easiest","use","idea","way","`clean`","name","looks","ternary","name","names.","way","suggestion","(slightly)","recursion"],"like there":["should","is","are","must","is","should","should"],"like these!":["I've"],"like they":["often","would"],"like this":["direction,","--","better","would","approach!","in","whether","and","one","too,","`:lists.sort","better","one.","one","version","style,","too?","will","in","fits","`&namefun`","as","by","exercise","even","every","but","version,","exercise,","version","for","was"],"like this,":["or","but"],"like this.":["Good","Reading","I","I"],"like this:":["`%r/[^\\p{L}\\p{N}\\s]/`","a","`?a`."],"like to":["start","over","be","keep","say","consider","have","allow","chime","get","be","be","see","send","place","remove","keep","take","have","experiment","leave","go.","point","find","point","note"],"like to.":[":)"],"like treating":["it"],"like unfortunately)":["the"],"like update,":["I"],"like use":["of"],"like using":["imports"],"like was":["having"],"like we":["found"],"like what":["you're","was"],"like where":["this"],"like with":["just"],"like writing":["C"],"like you":["did","could","would","could","could","have","did,","might","have","could","do","said.","have,"],"like you're":["wasting","calling","telling","going","doing","cheating","running","checking"],"like you've":["combined","got"],"like your":["implementation","is_whatever?","approach","line","indentation","suggestions,","code,","idea,","solution.","documentation","implementation","recursive","way","description","3","changes.","names"],"like éøñ":["don't"],"like, but":["perhaps"],"like--as you":["pointed"],"like. Good":["code"],"like. I":["was"],"like. Simple":["problems"],"like: `Enum.map":["'abcd',"],"like: def":["\u003cname\u003e(\u003cparams\u003e),"],"like: phrase,":["prompt,"],"liked having":["the"],"liked it":["separated."],"liked the":["module","readability","general"],"likely a":["bit","failure"],"likely forgot,":["elixir's"],"likely is":["it"],"likely others,":["but"],"likely someone":["could"],"likely taken":["the"],"likely thinking":["of"],"likely to":["need","be","change.","contain"],"likes the":["short-circuited"],"liking how":["my"],"liking this":["one"],"lime change.":["That's"],"limit on":["palindrome?"],"limit you":["to"],"limit, but":["then"],"limit. Anyway.":["Pretend"],"limit. If":["the"],"limitation of":["the"],"limitation when":["using"],"limitations. I":["like"],"limited in":["what","order"],"limited list":["of","of"],"limited notion":["of"],"limited to":["one"],"limited to,":["these"],"limited view":["window"],"limited, so":["I"],"limited. You":["can"],"limiting and":["English-centric."],"limits you":["to"],"line #20":["is"],"line #5,":["but"],"line #6...":["I"],"line ,":["if"],"line -":["that's"],"line 10":["there.","by"],"line 11":["comes"],"line 11,":["I"],"line 12":["you","as"],"line 13":["using"],"line 14":["your",","],"line 15":["and","doesn't"],"line 15),":["I"],"line 15.":["You're"],"line 16":["as"],"line 16.":["These","I","Submitting"],"line 16:":["The"],"line 18":["I"],"line 19":["(the","to","required?","seems"],"line 2":["like"],"line 20":["of"],"line 20,":["such"],"line 22":["with"],"line 22.":["Also"],"line 23":["you"],"line 24":["and"],"line 25.":["(But"],"line 28":["with"],"line 3":["could"],"line 30":["and"],"line 30,":["and","I'm"],"line 32":["could"],"line 32,":["you"],"line 34":["like:"],"line 4":["would","can","a",",","and","if","is"],"line 4,":["could","how"],"line 4.":["Even"],"line 44":["you"],"line 5":["to","and","refers"],"line 5,":["but","hash_dict","didn't"],"line 5.":["The"],"line 52).":["Yes,"],"line 6:":["!shouting?(message),"],"line 7":["because"],"line 7,":["do","you"],"line 8":["picking","working,","all","is","in"],"line 8.":["It"],"line 9":["and"],"line ;-)":["what"],"line after":["a"],"line and":["see","left"],"line as":["its","the","the","the"],"line because":["that"],"line before":["to"],"line by":["line","its"],"line correctly)":["to"],"line definitions.":["For"],"line doesn't":["fit"],"line either,":["but"],"line form":["like:"],"line function":["definitions","definitions,"],"line function,":["it's"],"line functions":["as"],"line if":["not","at","you","you"],"line instead":["of"],"line is":["taking","a","a"],"line isn't":["finished"],"line it's":["time"],"line length":["&gt;"],"line like":["I"],"line methods.":["I'll"],"line noise,":["imo."],"line of":["code...I","the","the","code","that","code."],"line per":["case."],"line that":["clarifies","does"],"line to":["figure"],"line up":["the"],"line uses":["the"],"line version":["of"],"line width,":["but"],"line with":["a","other","`yelling`","`asking?`","`fn`","`fn`.)"],"line\" but":["didn't"],"line, I":["generally"],"line, but":["added"],"line, indented":["one"],"line, it's":["idiomatic"],"line, or":["move"],"line, so":["we"],"line, that's":["sort"],"line-break point":["anyway."],"line. I":["might"],"line. It's":["not"],"line2 and":["bottleize."],"line2(n) when":["n"],"linear pipeline.":["I'll"],"linearly related":["to","to"],"linearly relative":["to"],"linebreak on":["line"],"liner. Other":["than"],"liners as":["the"],"liners for":["the"],"lines (inside":["`kind`),"],"lines 11":["and"],"lines 12-16.":["Have"],"lines 14,":["18"],"lines 14-22":["and"],"lines 16":["and"],"lines 18-20,":["I"],"lines 23-26":["simpler."],"lines 26":["and"],"lines 3":["&amp;"],"lines 30-35.":["They"],"lines 5":["and"],"lines 6":["and"],"lines 8":["and"],"lines L4":["are"],"lines and":["using"],"lines are":["short","doing"],"lines before":["submission."],"lines between":["\"do\"","cond"],"lines by":["folding"],"lines harder":["which"],"lines in":["`verse`"],"lines inside":["the"],"lines it's":["probably"],"lines longer":["than"],"lines may":["be"],"lines of":["\"candidate\"","code\".","a","implementation","code.","code","code","inverting","code","code."],"lines separately":["when"],"lines tend":["to"],"lines with":["newlines?","it"],"lines work,":["but"],"lines, I":["think"],"lines, but":["that's"],"lines. All":["that"],"lines. I":["waffle"],"lines. Looks":["great"],"lines... Not":["sure."],"linguistic meaning":["of"],"lining up":["with"],"link handy,":["do"],"link how":["they're"],"link on":["the"],"link to":["the","José's"],"link very":["helpful:"],"link, my":["comments"],"linked lists.":["You"],"linked processes.":["Sent"],"linking the":["new"],"links to":["resources"],"list (in":["`a"],"list (the":["left"],"list (though":["in"],"list (you're":["missing"],"list --":["I"],"list I":["think"],"list [1,":["2,","2,"],"list a":["new","new","new","new","new"],"list accessible":["and"],"list alphabetically":["as"],"list and":["use","then","re-store","a","then","then","then","huge","huge","`ll`","did","passes","huge","huge","huge"],"list as":["the"],"list asking":["what"],"list at":["the"],"list away,":["not"],"list back":["into","to"],"list beforehand":["so"],"list between":["`map`"],"list but":["it"],"list by":["linking","their","adding"],"list comparison":["in"],"list comprehension":["might","...","so","for","can","(`lc`)","suggestion,","version","desugars","has","would","to"],"list comprehension,":["but"],"list comprehension.":["It's","I'll"],"list comprehensions":["and","but","improved","can","are","for","as","and"],"list comprehensions.":["I","This"],"list comprehensions?":["If"],"list contains":["the"],"list conversion":["function"],"list first,":["i.e."],"list first.":["From"],"list first?":["'cause"],"list from":["Regex.scan,"],"list has":["been","been","been","to","been","to","been"],"list here":["so"],"list in":["do_count","the","an","the","the"],"list into":["an"],"list is":["O(n)).","O(1),","passed","a","empty","crucial","passed","always","empty.","length","length","length","empty?","going","potentially","passed"],"list it":["has","has"],"list lengths":["than"],"list like":["this:"],"list looking":["for"],"list might":["be"],"list monad":["syntax."],"list natively.":["I"],"list of":["tuples","words","all","words.","single","binaries,","words.","individual","words","lists.","elements","chars,","proper","lists","valid","words.","matches","integers","binaries)","lists","lists\"","lists","list,","cases","things","matches.","functions.","characters.","words,","chars.","words","n","codepoints","integers","chars","words","list","words,","the","letters.","functions","bytes.","characters","letters","pairs","lists","nits","lists","strings","things","edges","10","1000","1000","500","matching","10","1000","1000","500","sides","lists.","characters.","lists,","lists","mapped","characters","scores","possibly","100","exercises","primes","a","a","small","small","allergens.","tuples"],"list once":["for"],"list ops":["using"],"list or":["words"],"list over":["and"],"list pattern":["matching"],"list processing.":["The"],"list properly.":["Conceptually"],"list ready":["to"],"list regularly":["throughout"],"list representation":["for"],"list so":["often","I","that"],"list sort":[":"],"list sorted":["you"],"list stuff.":["I,"],"list to":["work","binary,","binary","binary","include","produce","a","a","be","the"],"list transform":["in"],"list transformations":["that"],"list trivial.":["I"],"list until":["the"],"list upon":["adding"],"list using":["the","`String.to_char_list`"],"list version":["of"],"list when":["using","checking"],"list with":["a","a","`b_len`"],"list without":["the"],"list you":["found,","could","flatten"],"list))) ::":["list"],"list). I":["could"],"list). I'm":["no"],"list, I":["can","doubt"],"list, but":["I","I","that's"],"list, even":["though"],"list, every":["time"],"list, fn(candidate)":["-&gt;"],"list, in":["terms","terms"],"list, is_anagram?(word,":["&amp;1)"],"list, match":["on"],"list, rather":["than"],"list, right?":["So,"],"list, so":["I","all","`Enum.join([:a,"],"list, sorry":["I"],"list, which":["is","might"],"list, yes.":["The"],"list, you":["could"],"list, zero,":["a"],"list-based functional":["programming."],"list-ops PR":["this"],"list. As":["far"],"list. Could":["you"],"list. I":["wasn't","hope"],"list. If":["you"],"list. Instead":["it"],"list. Interesting,":["eh?"],"list. It":["is"],"list. Or":["perhaps"],"list. So":["for"],"list. The":["way","way"],"list. This":["is"],"list. Wasn't":["sure"],"list. Which":["seems"],"list. With":["pattern"],"list. `'ABC'":["=="],"list/binary now.":["I"],"list? Going":["through"],"list? I'm":["still"],"list? Is":["there"],"list_ops exercise":["I"],"list_to_tuple and":["encodes"],"list_to_tuple is":["that"],"list_with_1_000_000_000_elements)` .":["That"],"list_with_million_elements)` will":["take","take"],"listing of":["the"],"listing the":["integer"],"lists (i.e.":["you"],"lists (pattern":["matching"],"lists (saves":["a"],"lists (single":["quoted)"],"lists /":["HashDict's"],"lists and":["do","binaries,","not","binaries","`Stream`","ranges","Ranges.","ranges","to"],"lists are":["not","immutable","implemented","empty","the","sorted"],"lists aren't":["equal."],"lists being":["enumerable,"],"lists but":["they","I"],"lists could":["improve"],"lists first":["and"],"lists from":["`Regex.scan`,"],"lists if":["non-unique"],"lists if/when":["you"],"lists in":["the","general"],"lists instead":["of"],"lists module":["function"],"lists more":["than","than"],"lists of":["codepoints","integers","characters","characters,","chars,","different","pairs","only","binaries","lists","characters","single","single"],"lists once.":["Still,"],"lists that":["need","means"],"lists to":["point"],"lists using":["that"],"lists were":["really"],"lists work":["(the","(the"],"lists you":["can"],"lists! I":["didn't"],"lists\" which":["I've"],"lists, and":["lists"],"lists, at":["least"],"lists, building":["them"],"lists, but":["perhaps"],"lists, once":["inline"],"lists, so":["there's"],"lists, they":["might"],"lists, to":["represent"],"lists, whereas":["with"],"lists, you":["can"],"lists. Are":["they"],"lists. I":["think","suspect"],"lists. I'm":["still"],"lists. In":["this","any"],"lists. Not":["sure"],"lists. So":["I"],"lists. The":["total"],"lists. What":["do"],"lists. You":["should"],"lists. `hd/1`":["will"],"literal can't":["be"],"literal conversion":["of"],"literal expression":["in"],"literal twice,":["then"],"literal. There":["might"],"literally replace":["`add_or_increment(&amp;1,"],"literally what":["they're"],"literally. Good":["to"],"literals can":["be"],"literals to":["generate"],"little about":["what"],"little abstract.":["I"],"little awkward":["to","for","because"],"little better":[":)","on"],"little better,":["but","maybe"],"little better.":["Waiting","\"The","Seems"],"little bit":["overkill","different","of","awkward","complicated","easier","condensed","and","complex","to","more","confusing,","awkward","hard","easier","clearer?","long."],"little bit,":["but","though..."],"little bit?":["It"],"little brittle":["to"],"little carried":["away"],"little cleaner":["in"],"little clearer":["to"],"little confused":["about"],"little confusing":["right"],"little constructor":["for"],"little disappointed":["there"],"little easier":["to","to","to","on","to","to"],"little examples":["and"],"little excuse":["for"],"little exercises":["like"],"little fuzzy":["on"],"little harder":["for"],"little lazy/complacent":["here,"],"little less":["complicated","explicit","readable.","work"],"little messed":["up."],"little more":["intention-revealing.","natural","clear?","DRY.","context","modular?","expressively?","clearly?","clear.","obvious","accurately","(and","efficient."],"little muddled.":["Not"],"little nicer":["at"],"little non-obvious.":["What"],"little odd":["is"],"little odd.":["Do"],"little overhead":["it"],"little overkill":["for"],"little performance-optimization":["hairiness"],"little private":["functions"],"little redundant":["to"],"little regex.":["what"],"little simpler":["but"],"little skeptical":["of"],"little slow":["on"],"little slower":["than"],"little strange":["to"],"little style":["thing:","tip:"],"little thing.":["This","This"],"little thing:":["`String.length(s)"],"little things":["I'd"],"little tip":["that"],"little tip:":["you","using","in"],"little too":["ugly.","quick","literally."],"little trick":["I've","for","I"],"little tricky":["to"],"little uncommon":["regex)."],"little unnecessary":["to"],"little unsettling.":["But,"],"little value":["surprised"],"little verbose":["and"],"little weird":["on"],"little while":["to"],"little with":["`:lists.sort"],"little, consider":["the"],"little, private":["functions"],"little... I":["think"],"loading the":["whole","expense"],"loads and":["loads"],"loads of":["functions"],"local function":["filter\"."],"local name":["to","in","during"],"local variable":["that"],"local variable,":["and","an"],"local variables":["naming","could"],"locality of":["`&amp;1"],"localized primarily":["to"],"locally-bound anonymous":["function,"],"log n)":["asymptotic","or"],"logic (which":["they"],"logic --":["it"],"logic a":["bit"],"logic behind":["that,","your"],"logic by":["using"],"logic clearer,":["I"],"logic correct.":["But"],"logic for":["checking","each","determining","detecting","each","your","each"],"logic from":["the","analyzing","the","the"],"logic in":["Elixir","another"],"logic inline":["in"],"logic inside":["the"],"logic into":["private","private","separate","some","some","meaningful"],"logic is":["all"],"logic like":["you"],"logic of":["the","anagram?.","replacing","the"],"logic though":["all"],"logic to":["check","support"],"logic was":["trivial"],"logic with":["less"],"logic would":["be","fail"],"logic, though.":["The"],"logic. Might":["it"],"logic: a":["string"],"logical \"flow\".":["I"],"logical next":["refactor."],"logical reason":["to"],"logical, type":["tests"],"logically it":["should"],"lol, ok,":["it's"],"lol. `/me`":["takes"],"lone literal":["expression"],"long as":["they","writing","they're","strings","the","the","people","`append(list_with_1000_elements,","`append(list_with_1000_elements,"],"long enough":["to"],"long expression":["as"],"long for":["feedback!","my"],"long list":["of"],"long of":["a"],"long shouldn't":["be"],"long time":["and","Perl"],"long time,":["but"],"long to":["complete.","read","fit","run?"],"long variable":["names."],"long way":["to"],"long, but":["I"],"long, it":["is"],"long, maybe":["you"],"long, so":["that"],"long. What":["do"],"longer (which":["hurts"],"longer about":["the"],"longer allowed":["to"],"longer and":["more"],"longer but":["conveys"],"longer function":["correctly."],"longer have":["names)"],"longer helps":["with"],"longer interested.":["This"],"longer lines":["may"],"longer necessary.":["It"],"longer need":["to"],"longer needed":["the","(it's"],"longer order":["dependent","dependent."],"longer than":["the","one","80","expected","the","I"],"longer the":["more","more"],"longer works":["on","in"],"longer you":["make"],"longer, from":["the"],"longer. Tail":["recursion"],"loo like":["it's"],"look a":["little","little"],"look and":["it's","thanks","it"],"look any":["better."],"look at":["the","is","is","the","`HashDict.update/4`.","`String`","Elixir's","the","`Regex.run`","`to_binary/1`,","would","`HashDict.update`","[Dict.update/4](http://elixir-lang.org/docs/stable/Dict.html#update/4)","`different?`","alternatives.","Kernel.SpecialForms.import/2.","what","using","the","`Enum.reduce`.","`Dict.update`.","`Regex.scan`","refactoring","Dict.update.","the","`HashDict.update`.","the","`Dict.update`,","`Dict.update`.","the","`List.zip`.","[elixir's","the","the","the","HashDict.new/2.","the","that.","Dict.update/4.","the","your","`Dict.update`,","it","`Dict.update`,","`Dict.update`,","the","it","`count`.","what","`count`.","what","the","them,","http://www.regular-expressions.info,","the","`cond`.","that","`count`.","what","`List.zip`.","`Regex.scan`","`count`.","what","`count`.","what","`Dict.update`","the","`Regex.scan`.","`Enum.chunk`."],"look at,":["it"],"look back":["up"],"look better":["and"],"look elsewhere,":["versus"],"look for":["something","an","invalid","something","a","the"],"look in":["to","to","to","Erlang"],"look into":["`Enum.filter`,","`Regex.scan`","the","using","reduce!","that.","Enum.reduce","macros","converting","trying","that."],"look it":["up,","up"],"look like":["this","inlining","a","it"],"look more":["ala"],"look much":["much"],"look nice":["visually."],"look on":["`Dict#update/4`"],"look outside":["the"],"look over":["that"],"look prettier":["when"],"look quite":["so"],"look really":["ugly."],"look so":["quickly"],"look something":["like","like"],"look that":["up","up"],"look the":["same"],"look too":["bad."],"look up":["`defprotocol`","what","the","all","and","the"],"look very":["elixir-ish","pretty,"],"look what":["the"],"look with":["either"],"look. I":["had"],"look. Though":["the"],"looked around":["for","THAT"],"looked as":["clean"],"looked at":["elixir-lang.org,","the","`String.strip/1`?","`Regex.scan`?","the","the","`Regex.scan`?","Regex.scan","that","this"],"looked back":["at"],"looked better":["than"],"looked closely":["enough"],"looked for":["means"],"looked high":["and"],"looked in":["String","the"],"looked into":["the","Inspect.Algebra"],"looked kind":["of"],"looked like":["this:","it"],"looked more":["Elixir-like."],"looked the":["nicest."],"looked through":["`Enum`"],"looked up":["the","the"],"looked weird":["to"],"looking around":["the","now."],"looking at":["\"cond\"","how","that","that,","`List.flatten`","line","this,","what","split","just","the","the","the","the"],"looking for":["and",":)","that","a","a","2","a","by","something","other","have","a"],"looking for.":["You'd"],"looking forward":["to"],"looking good":["IMO."],"looking in":["the"],"looking it":["up"],"looking line":["though."],"looking more":["closely,"],"looking over":["my"],"looking pretty":["good,"],"looking really":["good."],"looking through":["the","the"],"looking to":["remove","treat"],"looking up":["HashDict.update."],"looking, but":["I"],"looks a":["bit","little","lot","little","bit","bit","bit","little","lot","bit"],"looks absolutely":["great."],"looks better":["for","to","without"],"looks easier":["to"],"looks effective":["enough"],"looks for":["strings"],"looks good":["to","to","to","to","in","to","to","to","to"],"looks good!":["Your","Have","Notice",":)"],"looks good,":["so","and","just"],"looks good.":["You've","My","There's","You","Any",":","i","I","One","One","It's","The","With",":)"],"looks great":[":)","too."],"looks great,":["although","much"],"looks great.":["(We're","Good"],"looks gross,":["but"],"looks it":["up"],"looks like":["from","shouting","ruby.","with","you're","the","if","a","it","I","you've","`[^[]`,","the","you're","an","it","we","it","you're","a","you're"],"looks like.":["Simple","Good"],"looks more":["like"],"looks much":["better","better."],"looks nearly":["perfect."],"looks nice!":["I"],"looks nicer":["now"],"looks odd.":["(I"],"looks of":["this","that"],"looks overgeneralized":["to"],"looks pretty":["good.","easy","good.","good","dang","good.","darn","good","good.","good.","optimal.","good.","nice!","good,"],"looks quite":["good.","good.","good."],"looks rather":["ugly,","weird."],"looks really":["nice","good.","nice.","nice."],"looks slightly":["cleaner)"],"looks to":["be","me"],"looks too":["explicit,","cluttered"],"looks uglier":["with"],"looks very":["good.","useful!","well.","much"],"looks way":["cleaner"],"looks weird":["to"],"looks. Thanks":["for"],"looks. You'd":["basically"],"lookup Dict":["because"],"lookup table.":["The"],"lookup, are":["you"],"lookup, which":["means"],"loop for":["future"],"loop like":["this"],"loop of":["a"],"loop on":["line","\u003ccode\u003esing(2,"],"loop_through implementations":["are"],"loose definitions":["of"],"lop off":["the"],"lose precision":["when"],"lose something":["as"],"lose that":["much."],"lose the":["&1","communication"],"loses the":["point","very"],"lost here.":["Could"],"lost in":["there.","the"],"lost most":["of"],"lost next":["to"],"lot -":["could"],"lot about":["Elixir","Elixir","HashDict."],"lot better":["as","that","now."],"lot better.":["Thanks"],"lot by":["following"],"lot cleaner":["by","than","than"],"lot cleaner!":["In"],"lot cleaner.":["Submitting."],"lot clearer.":["Just","It's"],"lot closer":["to"],"lot coding":["too)!"],"lot easier":["as","to"],"lot faster":["than","programs"],"lot for":["your","the"],"lot from":["other"],"lot going":["on"],"lot here,":["although"],"lot longer":["and"],"lot more":["common","exposed","readable","sane","verbose.","memory","memory","memory","than","memory","memory"],"lot nicer,":["but"],"lot normally.":["Thanks"],"lot of":["the","places","sense.","readability","repetition","value","time","things:","string","repetition","\"syntax","functional","Guard","assumptions","stuff","time","overhead","sense.","functions","examples","people","behind","code","room","downcasing","downcasing","Ruby","different","use","trouble","duplicated","possible","refactoring","words","lines","sense,","renaming.","things,","enterprise","info","sense.","times,","students"],"lot quicker":["feedback"],"lot simpler":["at"],"lot these":["days,"],"lot* to":["learn"],"lot, and":["much"],"lot, got":["it!"],"lot. I'm":["not"],"lots of":["redundant","other"],"loudly taking":["also"],"love Elixir!":[":)"],"love Elixir's":["pattern"],"love Regex":["like"],"love a":["hint"],"love exercism,":["and"],"love feedback":["on","on"],"love how":["you've","you've","expressive"],"love more":["feedback"],"love open":["source."],"love pull":["requests/issues"],"love recommendations":["for"],"love that":["this"],"love the":["naming"],"love these":["exercises"],"love to":["do","add","get","hear","hear","hear","hear","hear"],"love with":["this"],"love your":["thoughts"],"lovely way":["to"],"loving Elixir.":["This"],"low and":["constant","constant","constant","constant","constant"],"low effort":["route"],"low for":["a"],"low-level stuff":["can"],"lower and":["upper"],"lower case":["letters?","and","letters."],"lower with":["`(&amp;1"],"lower. I've":["been"],"lowercase English":["letters,"],"lowercase a":["through"],"lowercase characters":["can"],"lowercase codepoint":["to"],"lowercase function":["names"],"lowercase letters":["and"],"lowercase letters).":["So,"],"lowercase letters,":["it"],"lowercase)? That":["might"],"lowercased and":["sorted"],"lowercasing and":["sorting","sorting"],"lowest bit":["is"],"lowest common":["denominator"],"luck. So,":["please,"],"lucky with":["those"],"lunch break":["and"],"lurking in":["the"],"lying around":["in"],"lyrics to":["the"],"m do":["acc"],"m, do:":["acc,"],"m, n,":["etc"],"m, y\"":["as"],"maaaybe renaming":["it"],"macbook pro":["died"],"macro I":["get"],"macro after":["all."],"macro but":["I"],"macro definitions.":["But"],"macro is":["actually"],"macro macro's":["or"],"macro that":["could","translates"],"macro uses":["the"],"macro working":["such"],"macro works":["fine."],"macro's or":["lots"],"macro's such":["as"],"macro's that":["well"],"macro's to":["creating"],"macro's, take":["a"],"macro's. For":["example"],"macro, but":["that's"],"macro. I":["just"],"macros are":["overcomplicating"],"macros as":["I"],"macros here?":["I"],"macros that":["expand"],"macros to":["build","see"],"macros work.":["I"],"macros. This":["was"],"macros/guards is":["overcomplicating"],"made a":["habit","nit","difference","small"],"made all":["but"],"made asymptotically":["better"],"made changes":["for"],"made either":["way."],"made everything":["more"],"made for":["you,"],"made from":["here."],"made it":["indirect.","indirect.","that","even","for","easier","to"],"made me":["wonder","think","dig"],"made more":["readable"],"made pair_up":["and"],"made sense":["to"],"made sense.":["The"],"made slightly":["less"],"made some":["changes"],"made that":["change","tweak","far","choice"],"made the":["mistake","right","code","code","explicit","creation"],"made them":["pass."],"made while":["following"],"made your":["regex"],"made, though!":[":)"],"made. Thanks":["again."],"magazine feature":["article),"],"magic characters":["names"],"magic number":["`10`",":)","31557600"],"magic numbers":["in"],"magic numbers.":["For"],"magic strings.":["They"],"magic text":["from"],"magic that":["you"],"magical functions":["were","rule?"],"magnitude doesn't":["make"],"magnitude less":["than","than"],"magnitude, but":["I"],"mailing list":["asking","looking"],"main advantage":["is"],"main code":["on"],"main elixir":["repo"],"main focus":["was"],"main function":["`foo`."],"main method":["expressed","while"],"main method,":["for"],"main point":["of","of"],"main problem":["with","is"],"main strengths":["of"],"main styles:":["recursion","recursion"],"main thing":["I"],"main things":["that"],"main word":["once","within","just","is"],"mainly \"code":["prettiness\"."],"mainly because":["I"],"mainly by":["the"],"mainly just":["submitting"],"mainly that":["it"],"maintable, and":["modular\"."],"maintain and":["explain"],"maintain than":["other"],"maintain the":["readability?","message"],"maintain. I":["don't"],"maintain. Implementing":["the"],"maintainable and":["understandable."],"maintainable than":["hardcoding"],"maintainable. Maybe":["I"],"major design":["difference:"],"major nitpick,":["the"],"major sticky":["test"],"make #command":["and"],"make ```_count```":["more"],"make `allergic_to?`":["efficient,"],"make `count/1`":["and"],"make `count`":["very","tail"],"make `is_question?`,":["`is_silence?`,"],"make `is_uppercase`":["into"],"make `question?`,":["`shouting?`","`silence?`"],"make `roll_up_counts`":["simpler."],"make `scan_words`":["accept"],"make `shouting?`":["a"],"make `silent?`,":["`all_caps?`"],"make `verse`":["more"],"make a":["simpler","regex","change.","cleaner","difference.","choice","difference,","binary","tradeoff,","word","point","few","module","single","difference."],"make an":["Elixir"],"make any":["changes","presumptions"],"make anything":["that"],"make better":["sense"],"make changes":["it's"],"make cleanup":["return"],"make clear":["what","what's"],"make concurrency":["simple"],"make count":["itself"],"make each":["match?"],"make full":["use"],"make functions":["private","private"],"make further":["improvements?"],"make handling":["the"],"make it":["more","clearer","a","a","clearer.","clear","more","more","pass","readable,","more","more","more","look","more","shorter","more","more","a","a","more","a","a","read","more","work.","more","a","more","easier","more","any","a","more","longer.","better,","pretty","easier","work","much","clearer","more","so","clear","more"],"make its":["\"story\""],"make line":["4"],"make lines":["23-26"],"make me":["an"],"make more":["sense","sense","sense.","sense","sense","explicit","assumptions"],"make most":["of"],"make much":["sense","of"],"make new":["methods"],"make one":["single"],"make people":["use","think","look"],"make perfect":["sense"],"make precedence":["clear."],"make public.":["I'll"],"make sense":["to","to","to","and","at","to","to","to","to","it'd","for","that"],"make sense.":["I'm","I","I'm","I","Thanks!"],"make sure":["you","it's","that","you've","they're","you","it's","people"],"make that":["happen.)","change.","change.","construction","change!","code","change","work.","function","change."],"make the":["code","intent","test","3","code","code","intention","code","method","compiler","matches","`quiet?/1`","`silence`","logic","code","test","code","intent","#letters","doctest","tests","code","tests","changes","subject","hey","checks","`dna_to_rna`","predicate","predicates","code","`reduce`","tests","functions","example","purpose","3","3","reader","`silent?`,","anonymous","logic","code","relation","code","code","code","`\u003c\u003c\u003c`","code","computation","code","rules","function","code","`silent?`,","exception","clauses","code","regex","explanation","explanation","code","code","assert","code","explanation","`Dict.update`","helper","explanation","explanation","code","function","recursive"],"make them":["separate","private","private","clearer","private?","tail-recursive."],"make things":["more","clearer."],"make this":["consistent","algorithm","simpler","easier","into","easier","a","simpler","a","clear","easier","a","work","any","slightly","solution","solution"],"make those":["two","private.","changes"],"make use":["of","of","of","of","of","of"],"make you":["think"],"make your":["interpret","implementations","filter","intent","submissions"],"make: `String.ends_with?(input,":["\"?\")`"],"make: currently":["you"],"makes `modulo`":["special."],"makes a":["lot","lot","dramatic","lot","lot"],"makes all":["tests"],"makes code":["much","much","much"],"makes cond":["statements"],"makes for":["slightly","more","a"],"makes it":["cleaner","easier","clearer","pretty","harder","really","read","a","any","obvious.","hard","clear","stick","fit","easier","very","easier"],"makes lines":["harder"],"makes matching":["more"],"makes me":["think","happy","irrationally","like","think","feel","happy"],"makes more":["sense.","sense","sense."],"makes much":["of"],"makes one":["tear"],"makes sense":["to","for","too.","to","in","of","to","whenever"],"makes sense!":["Thanks"],"makes sense,":["it","but"],"makes sense.":["I","Would","I'll","Since","I"],"makes testing":["somewhat"],"makes that":["much","clear."],"makes the":["difference","String.strip/1","determination,","code","last","code","tests","exercises","reader","code","code","code","code"],"makes them":["more","easier"],"makes this":["work"],"makes total":["sense","sense."],"makes trees":["so"],"makes up":["for"],"makes verse":["2"],"making ```hey/1```":["that"],"making `is_shouting?`":["and"],"making `silence?`,":["`question?`"],"making `x`":["into"],"making a":["`hey/0`","minimally","new"],"making another":["pass"],"making both":["work."],"making each":["of"],"making emerging":["the"],"making everything":["\"too"],"making first_couplet":["and"],"making intent":["clear."],"making it":["a","more","more","more","a","a","too"],"making my":["first","experience","code"],"making silence?(x),":["shouting?(x),"],"making some":["well-named","functions"],"making such":["good"],"making sure":["that"],"making the":["code","three","code","code","check","code","change,","version","`leap_year?`"],"making their":["meanings"],"making them":["private?","private?"],"making those":["tail"],"making use":["of"],"making your":["cond"],"man page":["it"],"manage that":["power,"],"manage the":["accumulator","site?"],"manage to":["find"],"managed to":["do","reimplement"],"maneuver is":["very"],"mangle the":["test"],"manipulate DNA,":["it's"],"manipulate it's":["output."],"manipulate numbers":["which"],"manipulation call":["feels"],"manipulation matching":["vague"],"manipulation now,":["I"],"manually (yes,":["it's"],"manually created":["ListDict."],"manually increment":["the"],"manually verify.":["I'll"],"manute mentioned":["`HashDict.update`"],"many cases":["it's"],"many cells,":["so"],"many different":["ways","things"],"many docs/tutorial":["beside"],"many functions,":["but"],"many helper":["functions"],"many languages":["now"],"many mock":["modules"],"many nested":["functions,","functions"],"many of":["these"],"many other":["languages","ways","languages,"],"many parameters":["are"],"many people":["would","do","do"],"many places":["would","would","would"],"many questions...":["I'm"],"many resources":["surrounding"],"many steps":["it"],"many temporary":["strings?"],"many there":["are,"],"many things":["in"],"many variables":["you"],"many ways":["permanently","to"],"many/most people":["think"],"map `String.downcase`":["over"],"map and":["reduce","filter"],"map as":["`Enum.map(dna,"],"map in":["that"],"map is":["cleaner","so"],"map it":["using"],"map over":["the","the"],"map the":["template"],"map to":["create","which"],"map which":["could"],"map would":["simplify"],"map(list, f)":["do"],"map) are":["immediately"],"map) has":["been"],"map, but":["without"],"map, filter":["or"],"map, or":["just"],"map-reduce exercise":["in"],"map/map then":["flatten"],"map/map. The":["more"],"map/reduce, instead":["of"],"map_join. The":["two"],"map_reduce returns":["a"],"map_reduce. Thanks":["for"],"map_values db,":["fn(roster)"],"map_values(db, fun)":["do"],"map_with_index iterator,":["but"],"mapped to":["99."],"mapped values).":["Exposing"],"mapping between":["input","counts","the"],"mapping over":["the","the"],"mappings so":["that"],"mark (a":["lot"],"mark (most":["stuff"],"mark (which":["are"],"mark at":["the","the"],"mark code":["with"],"mark could":["be"],"mark gets":["lost"],"mark in":["http://www.youtube.com/watch?v=a-off4Vznjs."],"mark is":["the"],"mark it":["to"],"mark like":["`four_years?`."],"mark methods":["that"],"mark on":["the"],"mark or":["pre"],"mark rather":["than"],"mark style,":["since"],"mark subsequent":["methods"],"mark such":["as"],"mark syntax":["used"],"mark this":["as","as"],"mark to":["the","the","indicate"],"mark) it":["would"],"mark, like":["`question?`."],"mark, or":["if"],"mark, such":["as"],"mark. Doesn't":["matter"],"mark. I'm":["going"],"mark. Other":["than"],"mark: is_shouting?":["I"],"markdown didn't":["take"],"marked it":["wrightling,"],"marked private":["(`defp`)"],"marked the":["exercise"],"marker. As":["it"],"marking it":["\"looks"],"marks are":["allowed"],"marks as":["part"],"marks in":["function"],"marksim that":["it"],"markup to":["be"],"mass of":["`if`s."],"massaging string":["into"],"massive alias":["to"],"master at":["this"],"master that":["added"],"master, instead":["of"],"match \"für\"":["(German"],"match ```":["block"],"match a":["single","letter"],"match against":["them","the"],"match an":["argument"],"match anagram":["and"],"match and":["the"],"match another":["go"],"match any":["letter","more."],"match as":["function"],"match because":["it"],"match could":["have"],"match each":["true","other"],"match for":["String","function"],"match function":["to"],"match if":["the","they"],"match in":["`has_letters?`,","a"],"match instead":["of"],"match into":["the"],"match it,":["this"],"match letters":["in"],"match lowercase":["a"],"match negative":["values"],"match of":["right"],"match old":["school"],"match on":["1","the","`bottles_phrase`","constants?","`%r/\\w+/`","the","the","the","just","```_```","the","line"],"match one":["digit,","or"],"match over":["ranges"],"match punctuation":["and"],"match silence":["without"],"match so":["that"],"match that":["to"],"match the":["way","`yelling`","precondition","`match`"],"match this?":["https://github.com/kytrinyx/exercism.io/blob/master/assignments/elixir/grade-school/grade-school_test.exs"],"match to":["lop","`number`"],"match too":["but"],"match underscore":["characters,"],"match up":["with"],"match value":["as"],"match version":["I"],"match when":["the"],"match whitespace":["lines"],"match wins":["logic."],"match word":["characters"],"match word,":["list"],"match words":["would"],"match(_word, [])":["do"],"match(word, [candidate_anagram":["|"],"match(word, anagrams)":["do"],"match(word, possible_anagrams)":["do"],"match(word, potential_anagrams)":["do","do"],"match, but":["still","also"],"match, have":["you"],"match, not":["only"],"match, regardless":["of"],"match. Is":["there"],"match. See":["the"],"match/2 functions":["returning","that"],"match? What":["happens"],"matched portions":["of"],"matched text,":["is"],"matched version":["of","of"],"matched, `acc`":["(2)","(2)","(2)","(2)","(2)"],"matched, `t`":["=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","="],"matched, and":["if"],"matched, return":["value","value","value","value","value"],"matched. So":["yeah,"],"matcher `\\w+`":["or"],"matches 1":["or"],"matches =":["Regex.scan(%r/[\\p{L}\\p{N}]+/,"],"matches a":["character"],"matches after":["Regex.scan,"],"matches all":["(or"],"matches any":["letter","number.","Unicode","Unicode"],"matches at":["the"],"matches for":["the","`String.upcase/1`","every"],"matches in":["order,"],"matches instead":["of"],"matches into":["private","separate"],"matches more":["explicit"],"matches on":["more","multiple","a"],"matches or":["nil,"],"matches such":["that"],"matches the":["naive","call"],"matches uppercase":["letters)."],"matches would":["come","be"],"matches, HashDict.new,":["fn([word],"],"matches, regardless":["of"],"matching (case)":["is"],"matching (or":["`hd`"],"matching (things":["that"],"matching (with":["the"],"matching a":["bit:","correct","letter","number."],"matching all":["possible"],"matching and":["a","guards","guards","guards","guard","have"],"matching anonymous":["function."],"matching as":["much"],"matching based.":["Could"],"matching because":["it"],"matching but":["it","opted"],"matching by":["using","using:"],"matching comparison":["words"],"matching directly":["for","with","or"],"matching doesn't":["work","work"],"matching feels":["tempting"],"matching for":["the","this","the","`silence?()`.","your","`verse`?","string","`increment_counter([key]`","writing","`shout?`","this","words"],"matching here":["as"],"matching here,":["but"],"matching here.":["the"],"matching however":["I"],"matching if":["you"],"matching in":["others.","silence","function","the","the","HashDict.update/4","\u003ccode\u003everse/1\u003c/code\u003e","this","DNA.\"-hamming_distance/2-fun-0-\"/1`","DNA.\"-hamming_distance/2-fun-0-\"/1","the","`update_word_count`","the","functions","functions,","the","String.Unicode.split/1","`is_just_number?`","functions"],"matching inside":["\u003ccode\u003efilter\u003c/code\u003e"],"matching instead":["of","of"],"matching is":["a","good,","more","a","cool,","also","so"],"matching isn't":["the"],"matching it's":["best"],"matching lets":["you"],"matching like":["so:"],"matching limitations.":["I"],"matching make":["the"],"matching more":["efficient."],"matching nucleotides.":["Why"],"matching on":["an","arguments","`respond`","arguments,","the","`hey/3`?","the","the","function","the","\"\","],"matching or":["case"],"matching over":["guard"],"matching setup.":["After"],"matching signify":["about"],"matching so":["`cond`"],"matching strings":["in"],"matching stuff":["but"],"matching supports":["only"],"matching that":["is","Elixir","it"],"matching the":["empty","messages","lowercase"],"matching them)":["works"],"matching to":["the","catch","the","catch","check","guards","get","achieve","get"],"matching too,":["but"],"matching unicode":["characters"],"matching vague":["requirements,"],"matching version":["and","and"],"matching was":["much"],"matching where":["one"],"matching with":["\"_uselessstuff\"","this","the","the","guards","guards","first"],"matching words":["and","once?"],"matching works":["for"],"matching works.":["Is"],"matching) comes":["in."],"matching, I":["still"],"matching, Luke":[":)"],"matching, awesome":[":)"],"matching, but":["I","I"],"matching, it":["also"],"matching, so":["I"],"matching. Also":["integrated"],"matching. Any":["takes"],"matching. Could":["it"],"matching. For":["example"],"matching. I":["don't"],"matching. Is":["there"],"matching. Looking":["forward"],"matching. Maybe":["I'll"],"matching. One":["way"],"matching. Overall":["I"],"matching. Sure,":["each"],"matching. This":["would","would"],"matching. You":["could"],"matching. `cond`":["is"],"matching/destructuring for":["the"],"matching? ;)":["*googles*"],"matching? As":["I"],"matching? It":["seems"],"matching? Now":["you"],"math in":["the"],"matter I":["really"],"matter and":["there's"],"matter either":["way"],"matter for":["our"],"matter how":["many"],"matter if":["they're"],"matter is":["that"],"matter of":["taste","taste.","taste","identity","`Words.count`","style,","personal","indifference","personal","personal","taste","what","what","me","taste","personal"],"matter\" which":["made"],"matter, It's":["not"],"matter? `quiet?`":["will"],"mattered in":["Elixir."],"matters for":["numbers,"],"matters is":["that"],"matters, but":["it's"],"matters, such":["as","as"],"max_value). I":["kept"],"maximize efficiency,":["you"],"maximize readability":["of"],"may also":["want"],"may argue":["whether"],"may assume":["that"],"may be":["worth","a","overkill","useful","that","misremembering","more","trying","misunderstanding","you","used","written","a","because","omitted","written","a","missing","good","that","more"],"may experiment":["with"],"may feel":["irrelevant"],"may find":["it","some"],"may have":["a","better","another","to","gotten","misinterpreted","had","gotten","gone"],"may just":["be","be","be","be"],"may need":["to"],"may not":["be","be","be","be","look"],"may revisit":["to"],"may sound":["like","like"],"may take":["a"],"may throw":["a"],"may use":["`Enum.reduce`"],"may want":["to","to"],"may well":["have","not","be"],"may've changed.":["Hitting"],"maybe 2":["spaces"],"maybe 8":["and"],"maybe I":["think","went"],"maybe I'm":["just"],"maybe `strand`":["instead"],"maybe a":["Regex"],"maybe at":["the"],"maybe because":["my","I"],"maybe came":["from"],"maybe consider":["returning"],"maybe doing":["more"],"maybe have":["a"],"maybe interested":["in"],"maybe it":["is"],"maybe it's":["because"],"maybe just":["because"],"maybe make":["this","its","the"],"maybe moving":["the"],"maybe only":["a"],"maybe put":["it"],"maybe recommend":["just"],"maybe should":["do"],"maybe soemthing":["like"],"maybe something":["like"],"maybe that's":["out","it?","a"],"maybe the":["first","downcasing","`filter_map`","tests"],"maybe there":["is","is"],"maybe there's":["a"],"maybe think":["about","about"],"maybe this":["exercise","should"],"maybe twice":["with"],"maybe wants":["to","to","to"],"maybe you":["could","have","should","could","could","could"],"md5/sha1. So":["when"],"me -":["they're"],"me 6":["iterations"],"me I":["could"],"me I'd":["just"],"me a":["hint?","way","syntax","while","whole","compiler","few","while","bit,","little","better","while","bit","bit"],"me about":["the","how"],"me an":["idea","optimist?","opportunity","opportunity","opportunity"],"me and":["I"],"me as":["a","a","a","more","I","a"],"me at":["least","all."],"me awhile":["to"],"me because":["I","it"],"me before":["I"],"me better":["I'd"],"me build":["out"],"me but":["I","I'm"],"me calling":["the"],"me dig":["into"],"me doing":["something"],"me due":["to"],"me enough":["to"],"me feel":["dirty"],"me first":["I","start"],"me fit":["all"],"me from":["a","Lowell?","compiling"],"me happy":[":).","about"],"me hash":["is"],"me if":["I'm","I'm","I","I'm","you","you"],"me in":["the","order","my","the","the","my","that"],"me irrationally":["excited"],"me is":["the","counting","good","more","very","if"],"me it":["emphasizes"],"me it´s":["ok"],"me just":["add"],"me know":["if","about","if","if","Elixir's","what","what","what","if","if","if","if"],"me learning":["more"],"me like":["an","leaving","the"],"me likes":["the"],"me nested":["function"],"me not":["understanding","reading","to"],"me of":["some","LISP.","the","the","using"],"me off":["were","for"],"me on":["the","that","my"],"me optimize":["this"],"me or":["does"],"me out.":["I"],"me overrwrite":["file"],"me push":["back"],"me put":["it"],"me really":["having"],"me rephrase":["that"],"me revisit":["this."],"me say":["\"this"],"me see":["if"],"me skip":["that"],"me so":["even","much."],"me some":["later","confusion"],"me sorting":["the"],"me than":["a"],"me thank":["you"],"me that":["Elixir","the","I","\"sentence\"","`Regex.run`","`List.concat`","one.","it's","there","your","the","the","that"],"me the":["concept","is_","most"],"me think":["you","that","I","that"],"me thinking":["about"],"me this":["error:"],"me though.":["Can't"],"me three":["passes"],"me through":["it."],"me time":["to"],"me to":["use","Elixir","parse","it!","look","stripping","make","augment","have","create","race","implement","implement","do","get","keep","anything","eliminate","then","sort","say"],"me too":["much"],"me too.":["I'm"],"me towards":["in"],"me try":["it"],"me trying":["to"],"me understand":["the"],"me update":["my"],"me was":["to"],"me what":["idiomatic"],"me what's":["happening"],"me when":["I","I"],"me who":["submitted"],"me why":["I"],"me wonder":["if"],"me wondering":["again"],"me work":["out","out"],"me write":["a"],"me wrong;":["using"],"me! I'd":["better"],"me) error:":["`"],"me). Putting":["parentheses"],"me, I":["flagged","would","think","would"],"me, I'll":["go"],"me, `yelling?`":["and"],"me, and":["the"],"me, but":["this","I","is","you"],"me, cond":["feels"],"me, it's":["longer"],"me, maybe":["because"],"me, one":["really"],"me, so":["I","that","I","I'll"],"me, the":["lambda"],"me, why":["not"],"me. Any":["idea?"],"me. Anyway,":["you"],"me. Elixir":["provides"],"me. First,":["you"],"me. Functions":["returning"],"me. Granted":["it"],"me. I":["particularly","like","haven't"],"me. I've":["been"],"me. If":["you"],"me. Is":["it"],"me. Issue":["posted."],"me. It's":["the","not"],"me. My":["only"],"me. Nice":["use"],"me. Oh,":["you"],"me. Or":["is"],"me. Thanks":["for","so"],"me. The":["domain","language"],"me. This":["is"],"me. What":["do"],"me. What's":["the"],"me. Your":["decisions"],"mean `\\w+`":["(one"],"mean about":["client"],"mean almost":["the","the"],"mean any":["code"],"mean by":["\"Why","\"pipeline","doing","shorthand","\"the","swapping"],"mean for":["_hey()"],"mean in":["the","terms"],"mean just":["using","put"],"mean reversing":["the"],"mean something":["like","like?","different","like"],"mean that":["if"],"mean the":["matches","sentence_to_check","strand","super-slow"],"mean time,":["I"],"mean to":["Bob?","make","the"],"mean to.":["Don't"],"mean upcase":["but"],"mean updating":["the"],"mean using":["guards","module"],"mean well":["named"],"mean when":["you"],"mean you":["have","should\""],"mean, but":["at"],"mean, if":["mutation"],"mean. But":["I've"],"mean. In":["fact"],"mean?\" while":["`Dict.merge`"],"meaning a":["\"word","\"word"],"meaning of":["`x`","the","a","the","the"],"meaning that":["it"],"meaning, at":["least)..."],"meaning, but":["I"],"meaning. That":["is"],"meaningful -":["IMHO"],"meaningful datastructure":["for"],"meaningful if":["converted","converted","converted"],"meaningful methods":["named"],"meaningful name":["that"],"meaningful names":["to"],"meaningful refactoring":["either,"],"meaningful than":["\"string\"?","\"s\"?","\"string\"?"],"meaningful? For":["example"],"meaningless names":["whose"],"meanings more":["clear."],"meanings of":["a"],"means \"the":["way"],"means -":["it's"],"means 2":["sides"],"means 3":["sides"],"means I":["don't"],"means I'm":["missing"],"means O(n)":["complexity"],"means `List.duplicate":["\"a\","],"means `String.Unicode`":["is"],"means a":["non-empty","very"],"means an":["elixir","expert,"],"means digging":["into"],"means is":["that"],"means it":["doesn't"],"means it's":["not","harder"],"means of":["simplifying"],"means that":["you","I","the","the","if","if","if","the","`append(list_with_500_elements,","if","`append(list_with_500_elements,","if"],"means to":["express"],"means you":["don't","have"],"means. I":["know"],"means: \"Why":["should"],"meant -":["that's"],"meant adding":["and"],"meant extracting":["your"],"meant more":["as"],"meant something":["even"],"meant the":["combination"],"meant to":["type","suggest","match,","ask","mention","make"],"meant was:":["use"],"meant. I":["observe"],"meant. `exchange`":["and"],"meantime, I'd":["love"],"meantime, I'll":["submit"],"mechanics of":["a"],"mechanism for":["the"],"meditating on":["API"],"meet that":["goal,"],"meet the":["spec."],"memes, which":["would"],"memoization and":["barewords"],"memoization as":["\"premature"],"memoization is":["needed","still"],"memoize it,":["problem"],"memoize of":["any"],"memoizing is":["not"],"memoizing the":["sorted"],"memorize the":["regex"],"memory (temporarily)":["than"],"memory (twice,":["as"],"memory `[d":["|"],"memory consumption":["than","than","than","than","than"],"memory for":["a"],"memory is":["used"],"memory usage.":["In"],"memory use":["of","of","of","of","of","do"],"memory), but":["from"],"memory. Do":["you"],"mental mapping":["between"],"mental model":["for"],"mentality. Which":["leads"],"mentally, at":["least"],"mention I":["was"],"mention adding":["this"],"mention ask":["specifically"],"mention easier":["mantaince."],"mention is":["instead"],"mention it,":["the","I"],"mention multiple":["function"],"mention punctuation,":["numbers,"],"mention that":["Elixir"],"mention the":["module"],"mentioned `HashDict.update`":["and"],"mentioned before,":["a"],"mentioned in":["the","my","the"],"mentioned on":["the"],"mentioned that":["you"],"mentioned, since":["I"],"mentioned. Elixir":["is"],"mentioned. I":["was"],"merely downcased":["anagram"],"merge `two_verse`":["into"],"merge mean?\"":["while"],"merge the":["lists"],"merge two":["HashDicts."],"merge with":["a"],"merged for":["Elixir,"],"merged soon.":["If"],"merged that":["fixes"],"merged to":["master"],"merged using":["`iolist_to_binary`."],"merged yet":["because"],"merges my":["list-ops"],"merit it,":["I"],"merry Christmas":["and"],"mess of":["code.","a"],"mess twice":["over."],"mess with":["the","that,"],"message (i.e.":["String.last,"],"message -\u003e":["\"Fine.","\"Woah,","\"Sure.\""],"message ==":["\"\"","\"\"?"],"message I":["was"],"message and":["set"],"message being":["nil"],"message contains":["an"],"message do":["you"],"message interrogation":["checks"],"message is":["silent,","silence","question","already","coming"],"message is.":["What"],"message module":["actually"],"message out":["of"],"message related":["private"],"message result;":["I"],"message should":["be"],"message that":["the","you"],"message to":["their","the"],"message when":["you"],"message with":["a","only"],"message without":["the"],"message), do:":["chan"],"message, is":["there"],"message.ends_with?(\"?\") and":["message.length"],"message.length ==":["0?"],"messages don't":["really"],"messages for":["the"],"messages much":["uglier"],"messages were":["mentioned"],"messages with":["RegExp","structural"],"messages, sentences":["etc,"],"messed up.":["I'm"],"messed with":["the"],"messes up":["non-7-bit-ASCII"],"messing with":["my","my"],"messy solution.":["Would"],"metaprogramming dynamic":["languages"],"metaprogramming module.":["I'll"],"metaprogramming. You":["were"],"method \"is_silence\"":["or"],"method (`question`)":["is"],"method (like":["Haskell's"],"method (with":["`def`),"],"method ,":["Why"],"method HashDict.update?":["?"],"method String.ends_with?/1":["?"],"method `_question?(text)`":["can"],"method `shouting?`,":["`question?`"],"method `when":["starting"],"method and":["having","maaaybe","variable","guard","it"],"method as":["you","a"],"method call":["or","inline"],"method call?":["I'll"],"method called":["is_upcase?(text)"],"method calls?":["I"],"method can":["help","be"],"method caused":["it"],"method chain":["the","the"],"method could":["potentially"],"method definiition":["in"],"method definition":["at"],"method definitions":["but","reads"],"method doesn't":["really"],"method expressed":["clearly"],"method for":["checking","the"],"method here,":["and"],"method hey,":["you"],"method in":["`Kernel`","there","this","a"],"method includes,":["but"],"method inside":["a"],"method into":["two"],"method is":["hard","awesome.","overcomplicated,","O(n","necessary?","of","at","more"],"method is_blank?":["."],"method look":["more"],"method looks":["like","too","it"],"method might":["make","be"],"method name":["implies","the"],"method name.":["What"],"method names":["that","could","can"],"method names.":["e.g."],"method names?":["Could","(are"],"method naming":["conventions,"],"method of":["it's"],"method on":["the","top.","`String`","the"],"method or":["pre-processing"],"method output":["without"],"method pull":["grades"],"method reads":["clearly"],"method really":["about"],"method representing":["the"],"method seems":["like"],"method signature":["through","pattern"],"method size,":["method"],"method so":["that","I"],"method style":["works"],"method takes":["two"],"method than":["to"],"method that's":["like"],"method there":["because"],"method to":["check","check","use","look"],"method too":["long,"],"method too,":["otherwise"],"method unless":["you"],"method until":["line"],"method uppercase":["could"],"method vs.":["`!same?`"],"method was":["a"],"method while":["making"],"method will":["help"],"method with":["a","a","a"],"method would":["do"],"method you":["either"],"method(args), do:`":["is"],"method, but":["another"],"method, for":["example"],"method, in":["this"],"method, much":["like"],"method, since":["Elixir"],"method, so":["in","you'd"],"method, that":["would"],"method, with":["idiomatic"],"method, you":["could"],"method. About":["this"],"method. And":["the"],"method. Don't":["know"],"method. I":["don't","don't","would","wanted","did","just"],"method. It":["makes"],"method. Maybe":["just"],"method. That's":["a"],"method...in this":["case,"],"method/function that":["is"],"method: `dna_string_to_char`.":["It"],"method; also":["I"],"methods (`allCaps`":["and"],"methods (methods":["that"],"methods I":["hesitated"],"methods according":["possible"],"methods after":["the"],"methods are":["snake_case","all","on","the","typically","private"],"methods as":["private"],"methods at":["the"],"methods back":["to"],"methods based":["on"],"methods be":["exposed","a"],"methods beyond":["`split`","`split`"],"methods by":["pattern"],"methods can":["be","be"],"methods could":["make"],"methods do":["the"],"methods down":["below"],"methods for":["the","other","every","the","each"],"methods from":["one-liners"],"methods i":["was"],"methods in":["Ruby,","the","a","a"],"methods inside":["the"],"methods instead":["of"],"methods into":["a","a","one-liners."],"methods is":["to"],"methods is_saying_nothing?,":["is_shouting?"],"methods it":["would"],"methods like":["`asking?/1`","add"],"methods make":["it"],"methods maybe":["only"],"methods might":["need","be."],"methods named":["after"],"methods names":["makes","that"],"methods not":["be"],"methods on":["String,"],"methods one":["liners!"],"methods or":["functions?)"],"methods personally.":["It"],"methods private":["as"],"methods so":["that","I"],"methods such":["as","as","as"],"methods take":["a"],"methods that":["are","abstract","read","test","represent","`String`","are","operate","can","end","use","each","would","don't","would"],"methods to":["bottom","reveal","avoid","encapsulate","be","be","improve","abbreviate","a"],"methods unless":["they"],"methods whose":["name"],"methods with":["intention-revealing","intention-revealing","intention","an","intention-revealing","no","default"],"methods you":["can","could","have"],"methods, I":["am"],"methods, and":["as"],"methods, but":["probably"],"methods, following":["the"],"methods, ie":["is_empty?(message)."],"methods, the":["leading"],"methods, you":["can"],"methods. After":["all"],"methods. And":["even"],"methods. Are":["`is_`"],"methods. But":["in"],"methods. I":["thought"],"methods. I'll":["back"],"methods. Instead,":["just"],"methods. Let":["me","me"],"methods. Looking":["at"],"methods. What":["do"],"methods. You":["might"],"methods. Your":["solution"],"methods.And the":["argument"],"methods? And":["maybe"],"micro optimization.":["Nitpicking"],"micro-level, but":["I"],"middle two":["sections"],"middle, but":["then"],"midst of":["the"],"might add":["to","a"],"might also":["want","be","be","take","work"],"might appeal":["to"],"might argue":["that"],"might as":["well"],"might avoid":["repeating"],"might be":["overkill.","a","a","a","clearer","more","indicative","a","clearer","a","cleaner","more","more","nice","a","able","more","misunderstanding","a","worth","overly","interchangeable,","a","a","cleaner","clearer","a","inserted","considered","at","inconsistent","for","for","a","better.","still","able","a","able","clearer.","a","interesting","have","easier","clear","slightly","too","a","best","referring","better","a","alternately","my","interested","able","slightly","improved","able","a","better","better","worth","`silence?`","useful","a","easier","a","the","useful","able","the","easier","able","useful","worth","that","worth","my","a","doing","useful.","more","missing","because"],"might be.":["Could","Maybe"],"might benefit":["from","from"],"might call":["`is_shouted?`","it"],"might change":["it."],"might come":["in"],"might consider":["using","using","whether","cleaning","a","giving","why","`String.ends_with?`","using","for","reversing"],"might definitely":["make"],"might enable":["simpler"],"might end":["up"],"might extract":["the"],"might find":["`String.ends_with?`","a","it","that"],"might fit":["the","the"],"might fix":["that."],"might format":["it"],"might get":["better"],"might give":["you"],"might go":["either"],"might have":["over-interpreted","noticed","been","to","had","factored"],"might help":["you","you","train","with","a","to","with","to"],"might improve":["readability","readability."],"might just":["be","be","be"],"might keep":["one"],"might learn":["more"],"might like":["that"],"might look":["into"],"might make":["more","the","more","the","that","more","handling","your","it","it"],"might more":["accurately"],"might need":["to"],"might not":["need","need","know","be","be","end","be","be","be"],"might now":["be"],"might pass":["all","the"],"might provide":["a"],"might pull":["word-count"],"might result":["in"],"might run":["forever","into"],"might scan":["for"],"might simplify":["your"],"might still":["be"],"might submit":["that"],"might take":["1,000,000"],"might think.":["See"],"might try":["it","that"],"might use":["the"],"might want":["to","to","to","to","to","to","to","to","to","to","to","to","to","to"],"might work":["in","quite"],"might write":["something"],"mile with":["this"],"mill recursive":["solution"],"million 1":["element"],"million lists":["of","of"],"million small":["lists"],"millions of":["processes."],"mind a":["little"],"mind as":["far"],"mind for":["another"],"mind is":["exploding"],"mind looking":["it"],"mind me!":["I'd"],"mind more":["specifc","often."],"mind of":["functional"],"mind posting":["it?"],"mind regarding":["modularity?"],"mind that":["Bob's","I","the","Erlang","reads","`'AB'"],"mind the":["regex","name"],"mind though":["that"],"mind to":["nitpick"],"mind when":["I"],"mind, I":["think"],"mind, but":["I","I'm","I"],"mind, great,":["if"],"mind, you":["might"],"mind. The":["new"],"mind. What":["happens"],"mind? Maybe":["reducing"],"mine is":["that"],"mine, and":["that"],"mine. Is":["there"],"minesweeper (which":["precedes"],"minify my":["other"],"minify the":["other"],"minimal duplication":["maintainable."],"minimally duplicative":["solution"],"minimize my":["usage"],"minimize unnecessary":["work"],"minimized in":["the"],"minimizes the":["syntactic"],"minimizing the":["number"],"minimum of":["twice","thought"],"minor -":["nit"],"minor at":["all,"],"minor from":["me."],"minor improvement":["you"],"minor nit":["left","I"],"minor nit.":["How"],"minor nit...does":["the"],"minor nit:":["is","this","`case"],"minor nitpick":["is"],"minor nitpick:":["you"],"minor nits":["are"],"minor point":[",","..",",",",","though."],"minor point,":["the"],"minor point:":["`String.ends_with?`"],"minor points":[","],"minor real":["world"],"minor style":["point."],"minor stylistic":["thing."],"minor thing:":["it's"],"minor things":["I'd","I'd"],"minor, but":["I"],"minor, you":["could"],"minor: typical":["is"],"minute refactoring":["without"],"mirror some":["of"],"misinterpreted feedback":["you"],"misinterpreted the":["comment."],"misleading -":["I"],"misleading from":["what"],"misleading. \"\"":["is"],"mismatch issue.":["Thanks"],"misremembering or":["the"],"miss my":["guess"],"miss that":["from"],"miss use":["the"],"missed Dict's":["existence"],"missed String.strip":["when"],"missed a":["`u`."],"missed opportunities":["of"],"missed or":["you'll"],"missed out":["on"],"missed something":["but"],"missed that":["one.","single","one","one.","one"],"missed that,":["thanks!"],"missed the":["String.ends_with?/2,"],"missed what":["you're"],"misses the":["point."],"missing a":["way","`@calista`"],"missing cover":["those"],"missing feel":["free"],"missing in":["your"],"missing letter":["with"],"missing parenthesis":["that's"],"missing some":["good"],"missing something":["extremely","because","but"],"missing something,":["but","though?"],"missing the":["`|\u003e","Unicode"],"missing this":["one."],"missing. There's":["a"],"misspelt. I'd":["be"],"mistake (my":["mistake),"],"mistake in":["your"],"mistake of":["trusting"],"mistake on":["my"],"mistake\" (null":["references),"],"mistake), pretty":["much"],"mistake, because":["it"],"mistake, i":["can't"],"mistake, in":["larger"],"mistake, maybe":["this"],"mistaken this":["is"],"mistaken) transforming":["a"],"mistaken, the":["leading"],"mistakes I":["made,"],"mistakes on":["this"],"mistaking it":["for"],"misunderstanding what":["you","you're"],"misunderstood line":["8."],"mix `def`":["and"],"mix of":["abstractions"],"mixed encapsulation,":["I'm"],"mixed in":["at"],"mixed up":["in"],"mixing imports":["(`downcase`"],"mixing it":["with"],"mixing the":["implementation"],"mock modules":["used","seems"],"mocks of":["elixir"],"model for":["why."],"model. Also":["consider"],"model. That":["would"],"moderators can":["say"],"modification operation":["keeps"],"modified copy.":["Within"],"modified it":["to"],"modified the":["tests"],"modifier do":["at"],"modify it's":["output."],"modular by":["moving"],"modular to":["split"],"modular without":["ruining"],"modular? Do":["you"],"modularity for":["modularity's"],"modularity would":["be"],"modularity's sake.":["The"],"modularizing your":["code"],"module (I":["want"],"module (Kernel.inspect)":["things"],"module (apparently).":["I"],"module I":["just"],"module I'd":["say"],"module Message":["with"],"module String":["for"],"module `Beer.Verse`":["to"],"module actually":["be"],"module and":["it","a","the","a","required","not","reduce","that","refactored"],"module are":["implemented."],"module as":["```Words.count()```","small"],"module attribute":["initially,","like"],"module attributes":["adds","to","as","don't","in","whole","(`@carrie`)","only"],"module attributes:":["http://elixir-lang.org/getting_started/3.html"],"module attributes?":["The","I"],"module available":["in"],"module because":["the","I"],"module but":["under","if","this"],"module by":["default"],"module called":["DNA,"],"module calls.":["Is"],"module clear.":["But"],"module could":["be"],"module doc":["string"],"module feels":["a","like"],"module for":["statements"],"module function":["directly,","with"],"module function.":["Thanks!"],"module functions.":[":)","I'll"],"module had":["a"],"module has":["helpers"],"module if":["you"],"module in":["every"],"module in.":["This"],"module instead":["of"],"module is":["a","acting","usually","a","rarely"],"module isn't":["wrong"],"module it":["doesn't"],"module itself,":["you"],"module kind":["of"],"module like":["this,"],"module man":["page"],"module may":["be"],"module method":["(with"],"module might":["be"],"module name":["inside","inside"],"module names":["in","is","cluttering","(shortening"],"module of":["its"],"module one-liners.":["And"],"module or":["create"],"module outside":["of"],"module property":["for","for"],"module qualified":["and"],"module reads":["so"],"module references":["clutter"],"module responsible":["for"],"module that":["only","only","uses","only"],"module though,":["it's","so"],"module throughout":["my"],"module to":["explicitly","call"],"module uses":["GenServer"],"module using":["macro"],"module with":["a","`defp`.","a","a","`defp`."],"module without":["the"],"module would":["be"],"module) that":["uses"],"module). Documentation":["is"],"module, but":["in","I'd","cannot"],"module, explicitly":["using"],"module, it":["doesn't"],"module, it's":["a"],"module, so":["first","I"],"module, something":["like"],"module, that":["do"],"module, there's":["normally"],"module, used":["to"],"module, you":["could"],"module-based approach":["that"],"module. ;)":["I"],"module. And":["cleaned"],"module. Bob":["doesn't"],"module. But":["I"],"module. Even":["if"],"module. Hope":["that"],"module. I":["don't"],"module. I'll":["submit"],"module. If":["these"],"module. Regular":["expressions"],"module. Were":["you"],"module. Why":["is"],"module: `String.strip`,":["`String.ends_with?`"],"module? Do":["they"],"module? Does":["it"],"module? I":["think","sort"],"module? What":["benefit"],"module](http://elixir-lang.org/docs/master/String.html) and":["just"],"modules are":["more","simply"],"modules instead":["of"],"modules is":["a"],"modules properties.":["I"],"modules seems":["like"],"modules that":["define"],"modules the":["reader"],"modules to":["be"],"modules too":["much"],"modules used":["yet,"],"modules. (Forgive":["me"],"modules. So,":["I'll"],"modules...it feels":["like"],"moins) la":["convention"],"mold you're":["expecting"],"moment that":["someone"],"moment your":["`count`"],"moment) that":["uses"],"moment. There":["is"],"monolithic. Guess":["I"],"monospaced font,":["you'll"],"monster, so":["I'm"],"month and":["year","year"],"month, d":["},","},"],"month, d)":["and","==","and","=="],"month, day}":["for","for"],"month, year\"":["as"],"month, year)":["do","do"],"months ago,":["so"],"months it":["seems"],"months, and":["lost"],"moot point,":["but"],"more \"alike\"":["while"],"more \"clever\",":["it's"],"more \"right\".":["I"],"more \"standard\"":["Elixir"],"more \"word\"":["chars),","chars)?"],"more (and":["watching"],"more *elixir-fu-ninja-stylez*,":["but"],"more DRY.":["Imagine"],"more Elixir-like":["to"],"more Haskell":["and"],"more I":["think","hear","have","look","need"],"more OO":["way","way","versions"],"more `bottles`":["clause"],"more about":["an","these","Enum.reduce","what","`Enum.count`"],"more abstractions":["such"],"more accessible.":["Anyway,"],"more accurate":["error"],"more accurately":["express","follow","what"],"more aggressive":["compilers,"],"more ala":["elixir"],"more along":["the"],"more and":["more","try"],"more anonymous":["functions"],"more appropriate":["in","here?","given","in"],"more as":["a","implementation","\"you"],"more assignment.":["Assignments"],"more assumptions":["at"],"more awesomeness,":["which"],"more awkward,":["which"],"more basic":["idioms."],"more beers\"":["back"],"more bottles":["of","of","of","of","of","of"],"more challenging":["exercises"],"more clear":["for","way","to","with","to","below","separation","as"],"more clear?":["Will","If"],"more clearly":["with"],"more clearly,":["but"],"more closely,":["it"],"more code":["to","to","and"],"more comments":["there."],"more common":["when","to","in","than","to","to","btw.","in","to"],"more commonly":["written"],"more compact":["by"],"more compact!":["My"],"more complex":["and/or","than","or","domain,","function","than"],"more complex,":["so"],"more complex.":["I"],"more complexity":["to"],"more complicated":["`4","code","logic."],"more complicated.":[";)"],"more conceptually":["meaningful"],"more concerned":["about"],"more concise":["implementation","methods","and","way","and","way."],"more concise,":["which","but"],"more concise.":["Thanks!","I'm"],"more consideration,":["though:"],"more consistent":["with","with","level","internal","and"],"more consistent.":["Overall"],"more context":["on"],"more context-sensitive":["name"],"more convoluted":["than"],"more convoluted.":["Thanks!"],"more data:":["in"],"more definition":["of"],"more descriptive":["name","variable","variable","names","of","name","or","name"],"more desirable":["as"],"more difficult":["the","ones."],"more direct":["to","for","and"],"more direction":["than"],"more doing":["the"],"more domain-y":["names"],"more duplicated":["empty?"],"more duplication":["of"],"more easily":["than","written","change"],"more efficient":["and","to","as","I","and","because","than","than","to","there.","by","ways","to","than","than"],"more efficient,":["I","but","but"],"more efficient.":["But","Your","Not"],"more elegant":["test","than","and","algorithm."],"more elegant.":["In"],"more elements":["are","are"],"more elixir'ish":["when"],"more erlang/elixir":["way"],"more exact":["timers"],"more exactly":["any"],"more expensive":["than","than"],"more experience":["with"],"more experienced":["with","developers."],"more explicit":["by","the","if"],"more explicitly,":["but"],"more exposed":["than"],"more expressive":["with","by","now.","when","argument","variable"],"more expressive,":["but"],"more expressive/clear":["to"],"more familiar":["with"],"more feedback":["if","on"],"more flexible":["solution","solution","and","(for"],"more for":["a"],"more fun,":["but"],"more fun.":["Also"],"more function":["clauses"],"more functional":["way","approach","/","ruby"],"more functions,":["to"],"more general":["and","solutions","(works","strain","approach"],"more generic":["string","function"],"more generic,":["and"],"more hint:":["use"],"more ideas":["for"],"more idiomatic":["to","or","to","approach","to","to","at","elixir","elixir?","way","to","and"],"more idiomatically":["written","written"],"more idiomatically.":[":)"],"more immediately":["clear","obvious"],"more imperative,":["my"],"more important":["ones."],"more importantly,":["I'm"],"more in":["revision","regular","`verse(0)`,","line","favor","the"],"more inclined":["to"],"more info":["on"],"more informative":["than"],"more input":["and"],"more intent":["revealing","revealing."],"more intention":["revealing","revealing--no?"],"more intention-revealing":["name"],"more intention-revealing,":["as"],"more interesting":["exercise?","with"],"more internally":["consistent?"],"more international":["than"],"more it":["grows"],"more liberally":["in"],"more like":["what","an","Regex.replace","that","CONSTANTS.","what","a","this:"],"more likely":["forgot,","someone"],"more linear":["pipeline."],"more lines":["of","of"],"more maintainable":["than"],"more meaningful":["than","than","than","-","name?"],"more meaningful?":["For"],"more memory":["consumption","consumption","consumption","(temporarily)","consumption","consumption"],"more minor":["nit"],"more modular":["by","without","to"],"more modular?":["Do"],"more more":["complex"],"more natural":["way","than","the"],"more natural,":["elixirish"],"more naturally":["if"],"more naturally.":["\"Take"],"more nicely.":[":)"],"more obvious":["and","if"],"more occurrences,":["could"],"more of":["the","a","a","that","a","my","the","a","a"],"more often":["in"],"more on":["the","those"],"more open":["to"],"more operations":["in"],"more or":["less","less","less"],"more palatable":["to"],"more parts":["of"],"more parts.":["Before"],"more pattern":["matching"],"more plain":["ways"],"more pockets":["of"],"more powerful":["tool","and"],"more powerful.":["Submitting"],"more practical":["that"],"more practice":["with"],"more quickly":["understand"],"more readability":["to"],"more readable":["if","than","in","if","code","as","than","now.","and","than",",","I","but","by","for","in","if","if","is","but","if","if","code.","here.","than","with","than","if",":","than","result","to","line."],"more readable,":["what","but","but","but","but"],"more readable.":["Submitted.","Also","Feel","The","Nice","incoming.","Thanks","I","Just"],"more readable?":["I'm"],"more reading":["first."],"more realistic":["use."],"more relevant":["to"],"more reliable":["in","in"],"more reminiscent":["of"],"more research":["into"],"more revision":["with"],"more revision.":["Thanks"],"more ruby-ish":["convention"],"more sane":["and"],"more self":["documenting."],"more self-documenting":["than"],"more semantic,":["about"],"more semantically":["meaningful","meaningful","meaningful","meaningful","correct","correct","correct"],"more sense":["to","now","to","in","than"],"more sense.":["What"],"more silliness":["than"],"more simplified.":["The"],"more simply":["using"],"more specifc":["tips"],"more specific":["(from","to","comments","functions"],"more specific?":["In"],"more speed":["(one"],"more stack":["space"],"more straightforward":["piping.","as","positive"],"more stuff.":["I"],"more subtle":["and"],"more succinct":["way","on"],"more terse":["control"],"more test":["cases"],"more tests":["to"],"more than":["one","it","enough:","3X","the","returns","one","going","11","once.","renaming","a","one","the","once,","one","happy","I","once,","once.","one","lists)."],"more that":["using","when"],"more thing":["I"],"more time":["with","to"],"more to":["the","the","do","do","do","do."],"more toward":["communication."],"more traditional":["way"],"more true":["to"],"more unpacking":["data"],"more unwieldy":["and"],"more useful":["if"],"more valuable":["when"],"more verbose":["perhaps,","implementation","than","fn","if"],"more verbose,":["module-based"],"more verbose.":["If"],"more what":["I"],"more when":["starting"],"more with":["`\"#{...}\"`","pattern"],"more word":["characters"],"more work":["piecing","for","but","than"],"more you":["do"],"more …":["literal."],"more\" or":["1"],"more, 99":["bottles","bottles"],"more, but":["I'm"],"more, for":["the"],"more, other":["than"],"more, with":["String.ends_with?"],"more-or-less easy":["to"],"more-or-less got":["scolded"],"more. If":["you"],"most Elixir":["exercises"],"most appealing,":["1,"],"most appropriate":["to"],"most appropriate):":["1."],"most are":["referring"],"most aspects":["of"],"most but":["I"],"most cases":["you'll"],"most certainly":["don't"],"most challenging":["exercise.","part"],"most clear":["possible"],"most concise":["solution."],"most current":["ones"],"most difficult":["exercise","part"],"most effective":["with"],"most efficient":["way","way"],"most elegant":["solutions"],"most experienced":["developers"],"most expressive,":["even"],"most from.":[";)"],"most functional":["programming"],"most general":["way"],"most head/tail":["recursions."],"most important":["thing","optimization","bit"],"most important.":["I","Whether"],"most intention-revealing":["name"],"most is":["Ruby,"],"most likely":["a"],"most modules":["are"],"most of":["these","the","the","the","these","the","the","what","this.","the"],"most often":["occurs"],"most other":["times"],"most people":["come","seemed","don't","do","don't","like"],"most readable":["and","solution,"],"most recent":["development","development","version"],"most simple":["operations"],"most standard":["style"],"most surprise,":["in"],"most things":["correctly,"],"most useful":["in","for","here"],"most) punctuation,":["but"],"most, if":["not"],"most/all of":["this"],"mostly arithmetic,":["logical,"],"mostly been":["to"],"mostly borrowing":["from"],"mostly for":["generic","practice,"],"mostly one":["liner."],"mostly the":["approach","culprit."],"mostly to":["see"],"mostly used":["for","for"],"mostly useful":["for"],"motivation behind":["creating"],"move String.downcase":["into"],"move `HashDict.update(&amp;2,":["&amp;1,"],"move a":["step"],"move all":["of"],"move alphabetize":["the"],"move around":["my"],"move attention":["revealing?"],"move it":["to","out","to"],"move on":["to","to",":P","to","from","and","to"],"move on,":["I"],"move on.":[":thumbsup:"],"move the":["`String.downcase`","interpret","interrogation","silence","`silence`","conditional","silence?","```","```","reject","checking","downcasing","second","Regex","helper"],"move this":["process"],"move those":["private"],"move to":["multiple"],"move you":["to"],"move your":["tests"],"moved `silence?(speech)":["-\u003e`"],"moved forward":["for"],"moved on":["prematurely!","from"],"moved out":["to"],"moved the":["`Enum.reduce`","`|\u003e`","`downcase`","code","text","`downcase`","d==2","earth-specific"],"moved things":["around"],"moved to":["a"],"moved validations":["to"],"moves on":["to"],"moving `String.downcase`":["into"],"moving along,":["but"],"moving it":["to"],"moving on":[":D"],"moving parts":["and"],"moving pretty":["quickly,"],"moving the":["matches","code","analysis","code","downcase","responses","check","checks","private"],"moving them":["to"],"moving those":["to","out","out"],"moving your":["logic"],"msg !=":["\"\""],"msg ==":["String.upcase","String.upcase"],"msg being":["empty."],"msg to":["an"],"msg, else:":["\"\""],"msg} -\u003e":["if"],"much ,":["perhaps"],"much --":["great"],"much ..":["but"],"much Ruby-style":["to"],"much a":["direct"],"much about":["me","*why*","elixir","elixir","opinion"],"much always":["a","a","preferred"],"much any":["language"],"much appreciated!":["Thanks!"],"much appreciated.":["Thanks"],"much as":["possible.","I","an","possible,","I'd","I","I"],"much benefit":["to","to"],"much better":["than","in","name","than",":)","on","though.","time","written","memory"],"much better,":["thanks","but"],"much better.":["But","Also","Will","I","This"],"much bigger":["fan"],"much boilerplate":["to"],"much clarity?":["This"],"much clearer":["ways"],"much code":["for"],"much code,":["with"],"much completely":["new"],"much data":["as"],"much do":["the"],"much downsides":["as"],"much duplication":["as","as"],"much easier":["than","to","to","to","to","to"],"much else":["you"],"much everyone":["seems"],"much everywhere":["else"],"much experience":["writing"],"much for":["me.","your","taking","this","the","all","these","me","your"],"much fun":["doing"],"much fun.":["Seriously."],"much further":["by"],"much getting":["to"],"much going":["on"],"much happier":["about"],"much harder":["to"],"much here":["but"],"much hope":["for"],"much identical":["to"],"much importing,":["so"],"much in":["an","the","elixir.","so","that"],"much is":["to"],"much less":["readable,","important)","readable","efficient"],"much like":["`scan_words`.","Ruby,","the"],"much memory":["for"],"much more":["on","beautiful.","readable","readable.","fun,","readable","accessible.","efficient","readable","efficient","than","common","readable.","clearly","readable"],"much much":["more"],"much neater.":["Elixir"],"much need":["for"],"much never":["written"],"much nicer":["than","than","to"],"much nicer.":["And"],"much nits":["to"],"much noise":["as"],"much of":["a","the","a","Java,","those","the","a","an","the"],"much overkill":["and"],"much point":["in"],"much preferably":["pattern"],"much rather":["see"],"much readability.":["Also,"],"much reason":["to"],"much regular":["expressions?"],"much required":["for"],"much right":["now"],"much right!":["There"],"much sense":["in"],"much shorter":["may","way","in","solution,"],"much simpler":[",","use","way","way","when"],"much simpler,":["but","thanks"],"much simpler.":["See"],"much slower":["than","-"],"much slower,":["but"],"much smaller.":["Bonus"],"much solid":["to"],"much surprised":["here."],"much teach":["you"],"much the":["same","same","direction"],"much then?":[":P"],"much though,":["you'd"],"much tightness.":["I"],"much time":["to"],"much to":["nitpick","do"],"much uglier":["as"],"much useful":["feedback"],"much value":["out"],"much vertical":["space!"],"much weight":["words"],"much with":["a","protocols,"],"much work":["into"],"much worse.":["I'm"],"much worse?":["What"],"much you'll":["have"],"much! Going":["to"],"much, much":["rather"],"much, yes.":["Minor"],"much. I":["was"],"much. I've":["learned"],"much. Line":["16"],"much. Not":["sure"],"much. What":["do"],"much... it":["will"],"muddled. Not":["even"],"multi-clause function":["that"],"multi-codepoint graphemes":["(i.e.","correctly."],"multi-line definition":["is"],"multi-line methods":["personally."],"multi-line string":["when"],"multi-line strings.":["If"],"multi-liners, which":["is"],"multi-word method":["name"],"multi-word methods":["are"],"multiline chaining;":["I"],"multiline method":["definitions"],"multiline to":["make"],"multiple (separated":["by"],"multiple characters,":["do"],"multiple clauses":["of","of","for"],"multiple definitions":["rather"],"multiple expressions":["in"],"multiple function":["heads.","heads","heads."],"multiple functions":["that","with"],"multiple implementations,":["yet"],"multiple line":["definitions.","form"],"multiple lines":["with","it's","and"],"multiple lines,":["I"],"multiple lines.":["I",";)"],"multiple modules":["that","the"],"multiple named":["functions,"],"multiple parameters":["was"],"multiple public":["functions"],"multiple short":["function"],"multiple simple":["regexes"],"multiple submissions":["and"],"multiple times":["(I","(once"],"multiple times.":["Also,","Also,"],"multiple versions":["of","of"],"multiple versions,":["or"],"multiple)` and":["then"],"multiple. That's":["where"],"multiple_of?(year, 4)":["&&"],"multiples of":["any","15","that"],"multiply the":["number"],"multiplying by":["2,"],"munging in":["`String.at(String.rstrip(str),"],"music theme.":["Very"],"must be":["a","a","converted","missing","a","intended","tested","non-negative).","written"],"must confess":["I'm"],"must have":["grabbed"],"must use":["the"],"mutate; it":["returns"],"mutating internal":["state,"],"mutating the":["argument"],"mutation took":["two"],"mutations between":["two"],"mutually exclusive":["so","with"],"mutually incompatible,":["they're","or"],"my \"style\".":["I've"],"my 3rd":["iteration"],"my Clojure":["implementation"],"my Elixir":["version","version"],"my Elixir-newbie":["eyes."],"my Erlang":["code"],"my Groovy":["background)."],"my Haskell":["experience"],"my Haskell-warped":["mind"],"my JS":["one),"],"my OO":["background,"],"my RegEx":["in"],"my Ruby":["implementation,","version","implementation","version","solution."],"my `_count`":["function."],"my `alphabetize`":["spelling"],"my `only:`":["in"],"my `violates_triangle_inequality?`":["function."],"my accumulators.":["I"],"my algorithms":[";-)"],"my anagram":["exercise"],"my anonymous":["functions"],"my approach":["had."],"my artificial":["6"],"my attempt":["to"],"my bad":["it"],"my bad!":["I'll"],"my biggest":["code","uncertainty","complaint","hurdle"],"my brain":[":P","around","thinks"],"my brain.":["This"],"my changes.":["Is"],"my cli":["and"],"my clojure":["solution"],"my code":["is","will","in","I","if","doesn't","accordingly.",":-)","even","is"],"my code.":["Thoughts?","Waiting","I"],"my comment":["on","states","because","about"],"my comments":["are"],"my commit":["message"],"my computer":["so"],"my contains_letters?":["regex"],"my cue":["for"],"my current":["solution(next","implementation?","implementation","solution","one."],"my custom":["helper.","`reduce_with_index`."],"my doubt":["was"],"my eastern":["european"],"my editor":["automatically"],"my editor,":["but"],"my example,":["in","I"],"my exercise":["routine"],"my experience":["here"],"my experience,":["`decide`"],"my eyebrow":["at"],"my eyes.":["My"],"my favorite":["operator,"],"my favourite":["exercise..."],"my first":["submission.","day","functional","iteration,","iteration.","version.","code","foray","code","instinct","program","pull","iteration","contact","pass","submission","few","unsubmitted","submission","implementation","macro.","iteration","bit","solution","solution"],"my formatting...":["insert"],"my friend":["and"],"my frustration":["is"],"my function":["signatures."],"my git":["repo."],"my guess":["this"],"my habit":["to","with"],"my hammer":["and"],"my hand":["two"],"my head":["around","against","around","around.","against","that","around"],"my head,":["i"],"my head:":["`Regex.scan(%r/([\\p{L}\\p{N}]+)/)"],"my ideas":["of"],"my implementation":["was","I","of","to","relies"],"my implementation,":["changing"],"my improvement":["from"],"my inexperience":["with"],"my initial":["attempt.","implementation.","nit"],"my interest.":["What"],"my interpolation":["strings"],"my lack":["of"],"my laptop":["right"],"my last":["iteration","submission,","cheeky"],"my latest":["revision,","submission.","submission","submission."],"my league.":["I"],"my lifetime":["that"],"my list":["of"],"my list-ops":["PR"],"my macbook":["pro"],"my matches":["such"],"my message":["when"],"my mind":["when"],"my mind,":["but"],"my mind.":["The"],"my module,":["so"],"my new":["submission;"],"my next":["iteration.","revision.","answer"],"my nitpick":["below","(if"],"my non-tail-recursive":["functions"],"my only":["tiny"],"my opinion":["a"],"my opinion,":["you","that","this"],"my opinion.":["See","I'll"],"my original":["implementation"],"my original,":["but"],"my other":["anonymous"],"my own":["benefit","code.","to","solution.","solution.","power","interest.","submission","quick"],"my own.":["The","Thanks."],"my part,":["and/or"],"my perl":["days"],"my perspective":["on","as"],"my plural":["function."],"my point":["about"],"my previous":["version","iterations.","submission","iteration"],"my problem":["may"],"my question":["as","from","keep"],"my question,":["meaning"],"my race":["to"],"my regular":["expressions,"],"my replace":["regex,"],"my ruby":["version.","methods"],"my second":["suggestion,"],"my side;":["one"],"my skills.":["I"],"my solution":["it's","by","so","to","in","would"],"my solution,":["but","though","but"],"my solution.":[";P"],"my sorting":["the"],"my stance":[":)."],"my standard":["nit"],"my strategy":["of"],"my submission":["that","for","as","was"],"my suggestion":["would"],"my taste,":["so"],"my terminology":["is"],"my test":["suite","time","suite?"],"my text":["editor,"],"my time,":["I'm"],"my toes.":[";P"],"my two":["cents."],"my uneducated":["guess."],"my unfamiliarity":["with"],"my usage":["here"],"my use":["of"],"my version":[":)","of","prior"],"my very":["first"],"my way":["around","in","of"],"my word":["count","count:","count","list."],"my, the":["regex"],"myself \"This":["should"],"myself -":["doh!"],"myself adding":["some"],"myself but":["despite"],"myself clearly":["without"],"myself for":["this."],"myself looking":["at","around"],"myself not":["to"],"myself of":["_why_"],"myself recently,":["took"],"myself since":["that"],"myself when":["I"],"myself wondering":["if"],"myself writing":["more"],"myself, but":["I"],"myself, so":["take"],"myself. I'm":["a"],"méthode pour":["plus"],"même chose":[":-)"],"n *":["fact(n"],"n ==":["m,","m"],"n \u003e":["1,","0"],"n into":["#bottles"],"n squared":["which"],"n strings.":["For"],"n times":["(which"],"n times.":["Perhaps"],"n) -":["1`.","1`"],"n) asymptotic":["complexity"],"n) or":["even"],"n, \"\"":["}"],"n, etc":["as"],"n. 2":["&amp;"],"n^2 )":["when"],"n^2 time.":["So"],"naive approach":["-"],"naive implementation":["like"],"naive implementation.":["I"],"naive upcase":["comparison."],"name \"dna\"":["is"],"name (e.g.":["nothing?"],"name (the":["`?`"],"name --":["we"],"name ?T":["and"],"name I":["assumed","generally"],"name `_`,":["or"],"name `characters_used_in`.":["That"],"name `count`":["for"],"name `do_extract_words`":["--"],"name `interval`...":["feels"],"name `last_four`":["because"],"name `process`":["is"],"name `replace_when_is_thymidine`.":["It"],"name `string`?":["Some"],"name a":["boolean","function"],"name and":["the","their","the","swapped"],"name as":["a","it's","\u003ccode\u003eanagram?\u003c/code\u003e.."],"name be":["better?"],"name because":["the"],"name concisely,":["but"],"name describe":["what"],"name describing":["what"],"name doesn't":["add"],"name during":["start_link,"],"name either,":["because","because"],"name for":["\u003ccode\u003eempty?\u003c/code\u003e","\u003ccode\u003einput\u003c/code\u003e?","this","a","the","that","your","the","the","your","the","one","`words/1`","me","some","this.","that","`sort_chars`","the","this","what","it.","the","the","a","the"],"name from":["the"],"name implies":["\"Hey,"],"name in":["the","start_link","the"],"name inside":["a","a"],"name instead":["of","of","of"],"name is":["a","worth","somewhat"],"name like":["`shouting?`"],"name makes":["that"],"name more":["descriptive"],"name of":["the","your","the","the","the","predicate","String.ends_with?/2.","`something`","the","the","the","the","the","`dict`...","that","the","the","a"],"name prefixed":["with"],"name return":["streams"],"name should":["be?","be?","be"],"name since":["most"],"name than":["\"x\".","`is_upcase`,","`is_upcase?`","`x`.","\"n\""],"name that":["better","carries","was","would"],"name the":["convention","helpers","guards","conditions","helper"],"name them":["instead"],"name then":["input?"],"name though.":["It"],"name to":["the","an","the","be","`call`.","what's","make","the","the"],"name with":["an"],"name would":["help","be","be"],"name you":["could"],"name(args) ,do`":["(it's"],"name(args), do`,":["not"],"name, since":["we"],"name. Does":["bob"],"name. I":["don't","think"],"name. In":["Elixir"],"name. It":["doesn't"],"name. Maybe":["a"],"name. So":["in","I"],"name. That":["could"],"name. What":["about"],"name. `Dict.get`":["calls"],"name? What":["is"],"named 'transcribe'":["which"],"named (private)":["function?"],"named _sing":["as"],"named `append`":["with"],"named `do_foo`":["for"],"named after":["the","string"],"named captures":["in"],"named fn":["that's"],"named for":["the"],"named function":["in","that","whose","as","for","for","to","to","to"],"named function,":["per"],"named function.":["It","I"],"named function?":["I've"],"named functions":["to","(","you'd","to","or","with"],"named functions,":["so","each","which","and","but"],"named functions.":["Here"],"named in":["a"],"named lambda":["was"],"named list":["transformations"],"named method,":["in"],"named methods":["to","make","for"],"named methods,":["ie"],"named params":["rather"],"named params.":["I'm"],"named private":["method,","function","functions?","function","functions:","function,","functions","functions"],"named slightly":["different"],"named something":["more","more","more"],"named the":["same"],"named things":["like"],"named variable":["is"],"named with":["a"],"named yelling?/1":["rather"],"named. For":["`question?`,"],"names (chars":["hinting"],"names (shortening":["them"],"names (shouting,":["question)"],"names --":["seems"],"names and":["the","the","varaibles.","simple"],"names are":["looking","descriptive.","a","often","so","the"],"names can":["end"],"names cluttering":["up"],"names could":["stand"],"names don't":["feel"],"names e.":["g."],"names easier":["to"],"names for":["\u003ccode\u003eempty?\u003c/code\u003e","nil","empty?","empty?","your","both","the","the"],"names from":["the"],"names if":["you"],"names in":["the","Elixir)?","Elixir.","front","Erlang.","general"],"names is":["the"],"names like":["`lw`"],"names makes":["them"],"names map":["to"],"names more":["\"alike\""],"names much":[":-)"],"names of":["the","functions","the","the","the","these","the","your","the"],"names should":["be"],"names simply":["describe"],"names so":["that"],"names that":["explain","end"],"names to":["both","functions","the","the","the","the","the"],"names unless":["there"],"names were":["chosen"],"names whose":["purpose"],"names with":["a","words","the"],"names would":["help,"],"names you":["could"],"names! This":["reads"],"names\", but":["that"],"names) and":["the","are"],"names, even":["if"],"names, exactly":["because"],"names, maybe":["make"],"names, so":["that"],"names, spot":["on!"],"names, which":["I"],"names. \"unformatted_phone_number\"":["is"],"names. Do":["the"],"names. Looking":["at"],"names. Might":["not"],"names. Try":["some"],"names. Would":["you"],"names. Yeah,":["`music`"],"names. You":["could"],"names. e.g.":["`shout?`"],"names? (are":["they"],"names? Could":["that"],"names? How":["do"],"names? I":["don't"],"namespace and":["you"],"naming \"is_…?\"":["is"],"naming (`m`":["for"],"naming a":["predicate"],"naming all":["of"],"naming and":["separation","other","the","being"],"naming conventions,":["as"],"naming here":["is"],"naming is":["not"],"naming it":["something"],"naming of":["functions.","\u003ccode\u003elast_one\u003c/code\u003e","\u003ccode\u003elast_one\u003c/code\u003e","your","the","String.ends_with?","`update_word_in_dictionary`.","the","your"],"naming or":["imports"],"naming predicate":["methods,"],"naming predicates":["without"],"naming question":["is"],"naming scheme":["as","for"],"naming scheme,":["I"],"naming the":["params","variable"],"naming there":["to"],"naming tips.":["After"],"naming to":["be"],"naming variables":["`string`,"],"naming\", as":["you"],"naming, I'd":["rather"],"naming, and":["I'm"],"naming, but":["I"],"naming, if":["I"],"naming. Two":["of"],"nap and":["stay"],"nasty input":["this"],"native `sprintf`":["that"],"native to":["accomplish"],"natively. I":["learned"],"natural fit":["to"],"natural idioms":["of"],"natural in":["a"],"natural notion":["of"],"natural than":["piping,"],"natural the":["more"],"natural to":["me."],"natural way":["to"],"natural when":["trying"],"natural, elixirish":["solution."],"natural, it's":["like"],"natural. But":["yeah,"],"naturally as":["the"],"naturally if":["it"],"naturally. \"Take":["the"],"nature of":["each","to_words","the","the","calendars"],"nb is":["not"],"ne connaissais":["pas"],"near the":["difficulty","bottom."],"nearer to":["the"],"nearly perfect.":["The"],"nearly pure":["pattern-matching"],"neat [expr":["special"],"neat and":["concise"],"neat nit,":["thank"],"neat, I":["prefer"],"neat. I":["actually"],"neater solution":["out"],"neater. Elixir":["is"],"neato! I":["still"],"necessarily a":["bad"],"necessarily faster,":["they"],"necessarily improve":["it"],"necessarily in":["terms"],"necessarily objectively":["better:"],"necessarily part":["of"],"necessarily problem.":["In"],"necessarily smart":["about"],"necessarily something":["to"],"necessarily the":["*shortest*","best"],"necessary according":["to"],"necessary and":["part","it's"],"necessary because":["split_into_words"],"necessary but":["I"],"necessary considering":["that"],"necessary for":["the","checking"],"necessary if/else":["branches."],"necessary nor":["more"],"necessary or":["helpful?","really","really"],"necessary pre-processing":["in"],"necessary prefix":["when","when"],"necessary since":["[this"],"necessary specifically":["for"],"necessary the":["`&("],"necessary to":["make","extract"],"necessary). Specifically":["with"],"necessary, but":["it","I","that"],"necessary, it":["was"],"necessary, or":["really"],"necessary, would":["you"],"necessary. It":["was"],"necessary. You":["could"],"necessary? Aside":["from"],"necessary? Do":["you","the"],"necessary? It":["seems"],"necessary? See":["if"],"need (if":["I'm"],"need (which":["also"],"need Enum.reject;":["there's"],"need `Enum.to_list(start..finish)`.":["`Enum.reduce`"],"need `List`":["to"],"need `Set.equals`":["(actually,"],"need `cond`":["there,"],"need `if-elseif-else`":["chains."],"need `inc`.":["So"],"need `reduce_iter`,":["you"],"need `words`":["in"],"need a":["guard","guard.","concurrent","hint","certain","the","list","simple","helper","`[]`","regular"],"need all":["of","of"],"need an":["additional","expression"],"need at":["most"],"need both":["a"],"need coercion":["to"],"need downcase":["in"],"need even":["for"],"need for":["the","a","the","#prepare_entry","it?","binaries","the","that","`normalize`","the","this?","a","the","it","the","slice","my","it."],"need it":["in"],"need it's":["own"],"need of":["`List.flatten`,","the"],"need one":["regular","regular"],"need pattern":["matching"],"need recursive":["flatten)"],"need regex":["for"],"need reverse,":["though"],"need some":["help","help"],"need that":["count"],"need the":["\u003ccode\u003eRegex.scan/2\u003c/code\u003e","\u003ccode\u003eDict\u003c/code\u003e","import","`roll_up_counts`","parens","`is_list`","conditional","`sing(start,","semi-colons","parens","extra","`+`.","explicit","outer","Dict"],"need this":["condition","for"],"need this.":[":)"],"need to":["pass","read","be","be","prefix","be","put","give","be","have","be","be","\"sanitize\"","use","define","import","check","compare","change","know","change","handle","flatten","re-create","use","downcase","do","have","keep","import","find","read","check","use","check","use","pass","join","check","create","care","normalize","do","make","change","write","do","update","check","assign","look","know","convert","call","use","explicitly","refactor.","define","use","pass","learn","be","pass","remember","actually","pass","refactor","be","do","re-read","slow","name","join","be","learn.","re-study","stop","do","write","be","optimize","circle","check","be","do","reject","reach","do","sift","create","have","work","be","change","do","check","clean","keep","be","step","write","be","re-sort","change","review","actually","know","delete","force"],"need to.":["What"],"need two":["regular"],"need with":["spaces"],"need... you":["wouldn't"],"needed (as":["in"],"needed (it's":["the"],"needed a":["function","name"],"needed as":["the","you"],"needed at":["all"],"needed becomes":["a","a"],"needed but":["kept"],"needed for":["collecting","any","things","this","an","an","an"],"needed here.":["Perhaps"],"needed in":["Elixir.","ruby.","expressions","a"],"needed it":["to"],"needed search":["for"],"needed the":["`&amp;&amp;"],"needed to":["use","support","be","flatten","pass","check","use","guide"],"needed) as":["`&do_to_rna/1`."],"needed, is":["it?"],"needed. Other":["than"],"needed? it":["isn't"],"needing to":["change","do"],"needlessly) that":["I"],"needs a":["comment?"],"needs some":["breaking","explaining,"],"needs to":["make","handle","be","respond","be.","be","be.","match","be.","added","traverse","be","be","be","be"],"needs would":["be"],"negate the":["clause?","result"],"negated unicode":["category"],"negation for":["the"],"negation of":["`\\p{L}`","`\\p{x}`)."],"negation operator.":["(Check"],"negative values":["in"],"negative, I":["have"],"nest functions.":["This"],"nest specs":["like"],"nested (within":["a"],"nested --":["starting"],"nested `Counter`":["module"],"nested `if`":["statements"],"nested conditionals":["look"],"nested function":["calls","calls)","call"],"nested functions":["at"],"nested functions,":["like","but"],"nested if":["statements.","with"],"nested if-else":["in"],"nested if/else":["statements."],"nested inside":["case"],"nested iterations":["to"],"nested list":["properly."],"nested lists":["if/when","of"],"nested one":["level"],"nested. Everything":["else"],"nested/chained if":["statements,"],"nesting better":["this"],"nesting depth":["is"],"nesting in":["this"],"nesting is":["kind"],"nesting of":["your"],"nesting the":["ifs."],"nesting there,":["because"],"nesting, that":["might"],"nesting, you":["might"],"nesting. Are":["you"],"never a":["problem"],"never able":["to"],"never be":["applied"],"never called":["and","because"],"never change":["instance"],"never finishes.":["I"],"never forced":["me"],"never knew":["that."],"never looked":["as"],"never quite":["remember"],"never reference":["it"],"never remember":["the","those"],"never revealed":["this"],"never see":["underscores"],"never seen":["your","a"],"never sure":["which"],"never think":["to"],"never twice":["in"],"never use":["constants,","them"],"never used":["elixir"],"never used,":["it's"],"never would":["have"],"never written":["that"],"neverending discussion":["on"],"nevermind, read":["that"],"nevermind... what":["I"],"new 0.11.0":["release"],"new HashDict":["with"],"new HashDict,":["it"],"new `Graph`.":["(Embarrassingly"],"new `String.slice/2`":["that"],"new `is_superlist/4`":["which"],"new `~`":["instead"],"new addition":["to"],"new anonymous":["function","function","function","function"],"new append":["takes","becomes"],"new as":["of"],"new copy":["of","of"],"new copy.":["I"],"new element":["on"],"new enough":["to"],"new entity":["inserted"],"new exercises":["assuming"],"new exercises.":[";)"],"new frame.":["Good."],"new from":["when"],"new hash":["be"],"new implementation":["of"],"new iteration":["that","based"],"new iteration.":["I'll"],"new language":["is","with"],"new leaf":["and"],"new line":["either,"],"new list":["with"],"new methods":["for"],"new module":["Message"],"new name":["for"],"new node":["for"],"new nodes":["can"],"new object":["the"],"new one.":["That"],"new out":["there"],"new paradigm":["having"],"new requirement":["for"],"new revision":["based"],"new revisions":["of"],"new shorthand":["syntax"],"new single":["object"],"new solution":["for"],"new stack":["entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry"],"new strings":["onto"],"new student":["to"],"new students":["to","list"],"new submission":["because","compares"],"new submission;":["I"],"new syntax":["for"],"new syntax.":["If","As"],"new test?":["If"],"new to":["Elixir","elixir","Elixir","me","Elixir","Elixir","elixir.)","Elixir,","Elixir","Elixir,","elixir","Elixir,","Elixir","Elixir,","Haskell","elixir","Elixir,","elixir?","elixir,","the","elixir.","this","elixir,","elixir","say"],"new value":["if","if"],"new version":["of","wit","uploaded","without","that","with","(4)","of","on","with","shortly!","with","is","though.","with","up.","using","of","that","with",":)","that","that","of","now.","taking","without","using","in","is","using","again"],"new version,":["thanks!","and"],"new version.":["Thanks!","We","I","Thanks",":)","Just","I"],"new way":["of"],"new year":["to"],"new, modified":["copy."],"new, the":["intention"],"new_count)` using":["the"],"newbie I":["sometimes"],"newbie in":["Elixir"],"newbie mistake,":["in"],"newbie to":["Elixir","elixir,","elixir,"],"newbie, I":["cannot"],"newer Elixir":["releases"],"newer to":["me."],"newer versions":["(0.10.1+,","of"],"newline after":["joining"],"newline before":["the"],"newline behavior":["factored"],"newline character":["to"],"newline character.":["It's"],"newline from":["the"],"newline in":["the","both","the"],"newline like":["you"],"newline_appender. It":["kinda"],"newlines in":["there."],"newlines. Otherwise":["join"],"newlines. Why":["do"],"newlines? (I":["can't"],"news is":["that"],"next 2,":["then","then"],"next `fn`":["call,"],"next answer":["looks."],"next block\")":["do"],"next call":["but"],"next element":["generator,"],"next exercise":["then","after","and"],"next exercise(word-count)":["but"],"next exercise,":["but"],"next exercises..":["Will"],"next function":["when"],"next function.":["Lines"],"next iteration":["(and","has"],"next iteration.":["I","Along","That"],"next line":["and"],"next number":["in"],"next one":["now"],"next ones?":["I"],"next question":["I"],"next reduce":["iteration,"],"next release":["of"],"next revision":["which"],"next step":["(1","(1"],"next submission":["as"],"next thing":["to"],"next to":["the","each","the"],"next version":["of"],"next version.":["I'm"],"next. One":["major"],"ni }":["inlist","inlist"],"nice --":["much"],"nice alternative":["to"],"nice and":["clean","concise.","concise:","good","straightforward,","the","simple,","explicit,","clean","easy,"],"nice balance":["between"],"nice code.":["That's"],"nice convention":["that"],"nice domain":["term"],"nice error":["messages"],"nice features":["of"],"nice function":["that"],"nice if":["`update_count`","there"],"nice implementation":["here."],"nice in":["general."],"nice method":["called"],"nice names":["of"],"nice pattern":["matching/destructuring"],"nice property":["that"],"nice readable":["function"],"nice rule-based":["approach,"],"nice side-effect.":["The"],"nice solution,":["but"],"nice solution.":["Are"],"nice though,":["and"],"nice to":["be"],"nice trick":["indeed,","I"],"nice use":["of","of"],"nice visual":["separation."],"nice way":["to"],"nice work":["-","-","tough."],"nice! I":["had","like","would","just"],"nice! I'm":["still"],"nice! Love":["`maintain_buzz`"],"nice! The":["only","only"],"nice, I":["wasn't","didn't"],"nice, did":["not"],"nice, that'll":["be"],"nice. Could":["you"],"nice. Does":["it"],"nice. Don't":["you"],"nice. Have":["you","you"],"nice. I":["like"],"nice. I've":["also"],"nice. It":["looks"],"nice. Just":["a","a"],"nice. My":["only"],"nice. Nice":["named"],"nice. Super":["easy"],"nice. The":["named","only"],"nice. Would":["you"],"nice.. I":["assumed"],"nice; I":["didn't"],"nicely (interpret":["\"\""],"nicely as":["it"],"nicely concise,":["especially"],"nicely named":["private"],"nicely what":["is"],"nicely with":["the"],"nicely, and":["the"],"nicely. I":["wanted"],"nicely. Thanks":["for"],"nicely. The":["only"],"nicer at":["a"],"nicer if":["parentheses"],"nicer now":[":)."],"nicer option":["here"],"nicer solution":["that"],"nicer than":["it","mine.","`List.zip/1`","`cond`"],"nicer to":["stay","use","read."],"nicer way":["to","of"],"nicer when":["space"],"nicer, but":["basic"],"nicer. And":["`&Kernel.+/2`"],"nicer. I":["thought"],"niceties like":["the"],"nickpicky here":["but"],"nifty. I'll":["have"],"night's sleep)":["before"],"nil (or":["anything"],"nil -\u003e":["if","if"],"nil =":["\"\"","nil"],"nil and":["upcase","throw","another","spaces,","one"],"nil as":["an"],"nil at":["all,"],"nil case":["easier."],"nil check":["in","in","in"],"nil field":["just"],"nil if":["the"],"nil in":["that"],"nil input":["and","to"],"nil inputs":["or"],"nil is":["explicitly","still","the"],"nil isn't":["necessary,"],"nil makes":["sense"],"nil on":["line"],"nil since":["I"],"nil to":["the"],"nil values":["later):"],"nil values.":["I"],"nil, but":["I","the"],"nil, do:":["true"],"nil, rather":["than"],"nil. I":["don't"],"nil. It's":["strange"],"nil. That":["tightens"],"nil/false in":["the"],"nil` check":["is"],"nil`est équivalent":["de"],"nils (compare":["with"],"nils and":["strings"],"nils, removing":["the"],"nit -":["the"],"nit I":["got","can","can"],"nit about":["the","your","tail"],"nit had":["you"],"nit is":["that","that","on"],"nit left":["(I"],"nit on":["your","this,"],"nit worth":["picking."],"nit! I":["totally","shall"],"nit, but":["there's"],"nit, elixir":["provides"],"nit, thank":["you!"],"nit, the":["regex"],"nit-picky) thing...in":["your"],"nit-picky, but":["I"],"nit. How":["do"],"nit. I":["submitted"],"nit...does the":["prefix"],"nit: I":["think","probably"],"nit: `case":["func.(head)"],"nit: `forcefull`":["is"],"nit: is":["there"],"nit: this":["wouldn't"],"nitpick (if":["you"],"nitpick I":["have"],"nitpick after":["all"],"nitpick and":["came"],"nitpick anymore.":["This"],"nitpick below":["and"],"nitpick from":["a"],"nitpick is":["-","that"],"nitpick it":["fudges"],"nitpick on":["the"],"nitpick once":["you've"],"nitpick other":["people's"],"nitpick so":["far"],"nitpick the":["examples?","hell"],"nitpick with":["this"],"nitpick would":["be","be","be"],"nitpick you":["got"],"nitpick, I":["think","knew","don't"],"nitpick, more":["of"],"nitpick, the":["suite"],"nitpick: you":["could"],"nitpicked if":["needed?"],"nitpicked over":["it"],"nitpickers may":["have"],"nitpicking (and":["I"],"nitpicking other":["submissions."],"nitpicking this":["exercise."],"nitpicking, `say`":["isn't"],"nitpicking, in":["your"],"nitpicks I":["was"],"nitpicks actually.":[":)"],"nitpicks and":["resubmitted."],"nitpicks for":["a"],"nitpicks like":["these!"],"nitpicks that":["you"],"nitpicks would":["be"],"nitpicky thing":["I"],"nitpicky things,":["though."],"nitpicky) comment":["--"],"nitpicky, but":["the"],"nits are":["really"],"nits here.":["That's"],"nits on":["this"],"nits to":["pick"],"nits). This":["solution"],"nits, though,":["the"],"nits. Is":["the"],"nits. The":["code"],"nits: it's":["often"],"no \"instance\"":["in"],"no \"is_\"":["prefix."],"no \"otherwise\"":["in"],"no I":["do","meant"],"no List.count,":["but"],"no __info__":["was"],"no `Dict`":["equivalent"],"no `List.count`":["is"],"no `sort_by`":["to"],"no `t`":["type"],"no additional":["memory"],"no anchor":["for"],"no benefit":["to"],"no better":["than"],"no body":["like"],"no chance":["of"],"no characters":["on"],"no classes":["in"],"no conceptual":["improvement"],"no difference":["in"],"no exclamation":["mark\""],"no experience":["in"],"no expert":["on"],"no function":["clause","clause","clause","clause"],"no good":["way"],"no guessing":["what"],"no harm":["in"],"no i18n":["in"],"no idea":["where","what","about","what","what","what","how","why"],"no implementation":["for"],"no keywords":["and"],"no letters":["in"],"no longer":["interested.","order","order","needed","works","works","needed","allowed","necessary.","need","function","have"],"no lower":["case"],"no lowercase":["characters.","letters)."],"no luck.":["So,"],"no macros.":["This"],"no magical":["functions","functions"],"no match":["of"],"no matter":["how"],"no means":["an","an"],"no more":["bottles","bottles","bottles","bottles"],"no need":["to","for","to","to","to","to","to"],"no new":["stack","stack","stack","stack","stack","stack","stack","stack","stack","stack"],"no numbers,":["spaces"],"no other":["way"],"no previous":["conditions"],"no prob.":["For"],"no problem":["quickly","with","inlining"],"no problem,":["not"],"no real":["return"],"no reason":["why"],"no regex":["at"],"no replace":["function"],"no reuse,":["so"],"no side":["effects"],"no side-effects":["is"],"no simpler.":["Is"],"no so":["much"],"no standard":["constants"],"no surprise":["that"],"no test":["for"],"no unicode":["chars"],"no unwritten":["exercism"],"no use":["anymore"],"no variables":["there"],"no warning":["about"],"no way":["to","to","around","I"],"no, I":["think"],"no, sorry.":["I"],"no-one around":["to"],"no. Thing":["is,"],"no? True":["or"],"nobody should":["write"],"node and":["edge"],"node for":["every"],"nodes can":["just"],"noise as":["possible,"],"noise on":["line"],"noise ratio.":["Maybe"],"noisy by":["using"],"nom de":["méthode"],"nominate this":["for"],"non `\\w\\s`":["and"],"non alpha":["chars"],"non alphanumeric":["characters"],"non empty":["strings."],"non-7-bit-ASCII text:":["`bitstring_to_list(\"José\")`"],"non-ASCII character":[";-)"],"non-ASCII characters":["are"],"non-ASCII characters.":["In"],"non-ASCII chars?":["fübar"],"non-English unicode":["chars."],"non-English word":["like"],"non-English words":["like"],"non-Latin languages":["like"],"non-alphabetic questions":["(which"],"non-alphabetic statements":["(i.e."],"non-ascii, UTF8":["letters"],"non-digits with":["an"],"non-empty string":["that","with"],"non-error cases)":["explain"],"non-exclamation punctuation,":["yet"],"non-format characters,":["proved"],"non-latin languages":["such"],"non-negative). This":["is"],"non-obvious way":["to"],"non-obvious. What":["do"],"non-parallel version":["takes","I"],"non-pattern matching":["version"],"non-regex tools":["that"],"non-syntactic-sugar form":["`list(any)`"],"non-tail-recursive functions":["above..."],"non-tail-recursive pitfall?":["Is"],"non-tail-recursive version":["eats"],"non-unicode history":["which"],"non-unique elements":["are"],"non-whitespace characters":["in","in"],"non_matching_pair?({nucleotide, nucleotide2})":[",do:"],"none in":["the"],"none of":["the"],"nonsensical input,":["etc."],"noob I":["tried"],"noob here,":["and"],"noob mistake":["on"],"noob, so":["I'm"],"nor about":["Dict.update,"],"nor in":["Elixir"],"nor instances":["of"],"nor more":["readable"],"normal \"do":["..."],"normal `String`":["functions."],"normal adjustment":["towards"],"normal and":["preferred"],"normal practice":["in"],"normal syntax":["of","is"],"normal words":["like"],"normal, both":["in"],"normalisation function":["but"],"normalization doesn't":["really"],"normalization here":["is"],"normalize are":["being"],"normalize first":[","],"normalize function":["--"],"normalize the":["word","word","string","base","base"],"normalize_word in":["the"],"normalized and":["the"],"normalized base":["word."],"normalized letters":["of"],"normalized list":["of"],"normalized versions.":["Like"],"normalized, &1))`":["as"],"normalized, &1)`.":["Pipelines"],"normalized_word ==":["normalize_word(&1)`"],"normalizing the":["phrase"],"normalizing) isn't":["exactly"],"normally a":["method"],"normally be":["called"],"normally expect":["many"],"normally is":["hard"],"normally prefer":["to"],"normally. Thanks":["for"],"not \"-\"":["(even"],"not \"methods\",":["right?"],"not (although":["there"],"not *always*":["the"],"not 100%":["sure"],"not 2,":["3"],"not :)":["I'll"],"not Elixir's":["best"],"not I":["wrote"],"not O(n)":["since"],"not UTF-8":["aware,"],"not \\w":["with"],"not `\"\"":["=="],"not `'`.":["I"],"not `((((a":["++"],"not `:gen_server`":["here,"],"not `Dict`":["equivalent)."],"not `Enum.sort`?":["I"],"not `List.duplicate(\"a\",":["5)"],"not `defp":["name(args)"],"not `if":["arabic"],"not a":["huge","problem","friend","phrase.","lot","text.","fan","strong","single","win,","happy","whole","terribly","`skip`","good","list","general","space,","reducing","fan","sublist","bad","big","fan","public","fan","fan","list","problem.","letter,","valid","big","bad","problem,","boolean","keyword","fan","problem","regex"],"not a-z,":["0-9"],"not a-z.":["I'm"],"not able":["to"],"not acknowledge":["that"],"not add":["modularity"],"not advisable,":["it"],"not after":["what"],"not agree":["IMHO"],"not all":["languages","that"],"not allow":["`def`"],"not always":["needed","clear,"],"not an":["obvious","admin,","anagram","object","empty"],"not appear":["that","that","to"],"not approval":["worthy!"],"not around":["to"],"not as":["a","DRY","much.","prevalent","familiar","character","hard"],"not at":["all","all?","all."],"not aware":["of","of","of","of","of","of"],"not be":["the","affected.","Elixir","accessible","counted","visualising","quite","recognized","what","any","prime","true","public","the","always"],"not because":["of"],"not been":["sure","my"],"not being":["reused","shouting,","used","a","wrapped","Unicode-specific."],"not bother":["with"],"not by":["the"],"not calculating":["it"],"not call":["the","`HashDict`"],"not capable":["of"],"not capturing":["an"],"not cause":["confusion","trouble"],"not characters,":["which"],"not check":["for"],"not checking":["that","the","to"],"not clear":["what","just"],"not codepoints,":["filter"],"not comments)":["to"],"not common":["to","to"],"not compare":["it"],"not completed":["one"],"not completely":["sure,","sure","sure"],"not considered":["to","a"],"not convinced":["that","this"],"not convinced.":["By"],"not covered":["in"],"not do":["it","anything"],"not documented":["well,"],"not doing":["the","it","things","what"],"not done":["anywhere","much"],"not downcase":["the"],"not efficient":["in"],"not eliminate":["the"],"not elixir":["style"],"not else":["clause)."],"not end":["up"],"not enough":["as"],"not entirely":["certain"],"not enumeration,":["I"],"not even":["sure"],"not every":["word?"],"not exactly":["sure","an","tail","a","happy"],"not excited":["about"],"not expect":["that","it"],"not expose":["the"],"not exposing":["the"],"not extract":["functions"],"not factor":["out"],"not familiar":["with","with","with","enough","with","enough"],"not figure":["out"],"not find":["a","another"],"not finding":["anything","any"],"not finished,":["won't","but"],"not for":["`map`"],"not found":["a"],"not from":["Seattle,"],"not generally":["possible,"],"not get":["that"],"not getting":["it,"],"not give":["any","the"],"not going":["to","to","to","to"],"not good":["enough"],"not grow":["unnecessarily"],"not guard":["against"],"not had":["to"],"not handling":["variable"],"not happy":["with","with","that","with","with","with","with"],"not have":["a","expressive","parentheses.","that","a"],"not having":["to","the","parentheses"],"not how":["you"],"not ideal":["having"],"not idiomatic":["Elixir)"],"not immediately":["comprehensible."],"not implemented":["for"],"not implementing":["in"],"not in":["a"],"not include":["any"],"not individual":["characters."],"not intended":["for","for"],"not interested":["in","in"],"not is":["an"],"not it":["actually"],"not it's":["probably"],"not just":["move","move","submit","have","an","use","binaries,","comparison","variables.","at","lists.","explicit","convenient?","a-z?"],"not know":["that.","about","if","of","what","about","that","that","that","about","that"],"not knowing":["immediately","what"],"not like":["it","abbreviations","the"],"not likely":["to"],"not limited":["to,"],"not lists,":["to"],"not look":["very","like"],"not make":["sense","it"],"not making":["first_couplet","those"],"not many":["nested"],"not mind":["more"],"not minor":["at"],"not mistaken)":["transforming"],"not more":["readable"],"not mostly":["one"],"not much":["of","else","shorter","need","surprised","for"],"not mutating":["internal"],"not necessarily":["the","a","problem.","smart","faster,","part"],"not necessary":["according"],"not necessary,":["but","would","but"],"not need":["to","a","to","to","to","to"],"not needed":["in","to","search"],"not needed)":["as"],"not needed.":["Updated.","Other"],"not nil":["on"],"not noticed":["anything"],"not obvious":["it"],"not of":["equal"],"not on":["the","what"],"not one":["of","I"],"not only":["mean","perfectly","literally","the"],"not pad,":["I"],"not part":["of","of"],"not particularly":["intention","intention","clear."],"not pass":["that"],"not passed":["in"],"not perfect,":["and"],"not perform":["well"],"not possible":["to","to","due","to"],"not predicate":["functions,"],"not present":["in","in"],"not properties":["of"],"not put":["the"],"not putting":["that"],"not quite":["clear","sure","sure","able","uncommon,","sure","sure","so","entirely","seeing"],"not reading":["correctly."],"not really":["sure","familiar","sure","sure","happy","a","intended","using","necessary","needed,","a","count","a","recommended","an","understand"],"not recommended":["in"],"not recomputing":["base"],"not redundant":["the"],"not remove":["all"],"not removed":["the","the"],"not repeat":["the"],"not replacing":["thymidine,"],"not represent":["a"],"not require":["macro","duplication"],"not return":["true","`true`"],"not reuse":["`append`"],"not reusing":["an"],"not review":["exercises"],"not right":["due",","],"not rubysolo,":["but"],"not sacrificing":["too"],"not same":["word."],"not saying":["this","it's","you"],"not seem":["much","to"],"not seen":["any"],"not separated":["by"],"not shouting":["(according"],"not simultaneously,":["but"],"not so":["perfect","sure.","sure.","sure","sure","much","natural","subtle"],"not sold":["on"],"not some":["kind","arbitrarily"],"not something":["that","arbitrarily","I'd've","you","we"],"not specified":["in","in"],"not stated":["explicitly"],"not strictly":["necessary...."],"not strip":["special"],"not sufficient":["there."],"not super":["excited"],"not supported...":["As"],"not sure":["there's","about","the","if","if","that","what","there's","I've","I","moving","if","that","if","it's","how","when...","I","about","why.","if","why","if","either,","what","why","that","if","I","I","if","if","how","how","whether","how","that's","how","I'd","it","if","which","if","how","if","if","why,","which","why","there's","if","what","if","about","this","if","about","how","it's","how","how","if","why","how","which","if","which","what","about"],"not sure,":["actually."],"not sure.":["I'll"],"not surrounded":["by"],"not tail":["recursive.","recursive","recursive,"],"not tail-recursive,":["so"],"not take":["in"],"not taking":["advantage"],"not terribly":["necessary."],"not that":["they","clear,","bad","they're"],"not that.":["I"],"not the":["current","best","implementation.","`hey`","same","most","best","same","last","number","same.","best","same","best","case?","most","best","original","case","case,","names","string."],"not think":["of","of"],"not throwing":["a","a"],"not to":["have","use","make","mention","merge","import?","append","just","call","use","put","do","use","define","mention","be","use","move","read","call"],"not to.":["Without"],"not totally":["equivalent","sure,"],"not tried,":["but"],"not try":["extracting"],"not two":["words","words"],"not understanding":["idiomatic","the"],"not unicode-aware":["(it"],"not unusual":["for"],"not use":["List.flatten?","`String.last`","two","the","the","explicit"],"not user-facing":["code"],"not using":["a","the","the","Regex.scan"],"not usually":["importing","`is_something?`."],"not valid":["it"],"not very":["pleased","functional.","happy","happy","maintainable.","convinced","confident.","happy"],"not visibility":["I'm"],"not want":["to"],"not wanting":["to"],"not warn":["when"],"not weird":["at"],"not what":["`String.split/3`"],"not when":["not"],"not where":["they"],"not with":["strings","`String.ends_with?`"],"not work":["with","for"],"not work)":["for"],"not working":["for","for","yet"],"not wrapped":["in"],"not write":["`@fay[nucleotide]`?"],"not written":["in"],"not yet":["used","come","a"],"not you":["needed","might"],"not, I'd":["be","be"],"not, but":["that"],"not, can":["you"],"not, guards":["are"],"not, it's":["not"],"not, so":["I'll"],"not, then":["Elixir"],"not-so-meaningful variable":["name."],"not. Could":["you"],"not. For":["example"],"not. Good":["to"],"not. I'm":["not"],"not. Nice":["catch."],"not. You":["sometimes"],"not? I":["had"],"not? Yes":["or"],"notEmpty method.":["I"],"notation better,":["probably"],"notation for":["defining","functions:","the","this","the","functions:"],"notation helps":["improve"],"notation in":["elixir"],"notation is":["awesome!"],"notation it's":["`O(n)`.","`O(n)`."],"notation might":["make"],"notation) or":["you"],"notation. Any":["clues"],"notation. I'll":["amend"],"notation. I've":["got"],"notation. Is":["the"],"note about":["naming.","this"],"note on":["conventions.","implementation","style:"],"note that":["single","guards","you","it","commonly"],"note the":["two"],"note to":["look"],"note, I":["think"],"note. I":["think"],"notes another":["submission"],"nothing &lt;void":["space&gt;_."],"nothing but":["provide"],"nothing fancy,":["as"],"nothing needs":["to"],"nothing terribly":["OO"],"nothing to":["complain","see"],"nothing wrong":["with","with","with","with","with","with","with","with"],"nothing. Just":["pass"],"nothing? for":["empty?"],"nothing? instead":["of"],"nothing?(_), do:":["false`."],"nothing?, yelling?,":["and"],"notice I":["was"],"notice is":["that"],"notice it":["down"],"notice such":["ambiguities"],"notice that":["the","you're"],"notice the":["difference","performance","testsuite"],"notice when":["comparing"],"notice you":["use"],"notice you're":["piping"],"noticed I":["got"],"noticed `occurrences`":["is"],"noticed anything":["about"],"noticed in":["the","the"],"noticed it":["in"],"noticed right":["after"],"noticed that":["and","keep","two","you","some"],"noticed that,":["while"],"noticed the":["warnings","issue?"],"noticed this":["is"],"noticed you've":["a"],"noticed your":["import","map"],"noticed, that":["seems"],"noticed. Should":["add"],"noticed. You":["can"],"noting that":["this"],"notion of":["punctuation,","lowercasing","characters,","lower"],"novel approach":["--"],"novice and":["FP"],"novice in":["elixir"],"novice, so":["take"],"novice. Can":["you"],"now :).":["Is"],"now =)":["Thanks"],"now Elixir":["supports"],"now I":["am","have","get","see","know.","see","don't","see","mean"],"now `count/1`":["is"],"now and":["for"],"now as":["well."],"now at":["least!"],"now be":["considered"],"now been":["merged"],"now captured":["in"],"now figured":["out"],"now for":["accumulate","each","the"],"now get":["what"],"now how":["`match`"],"now i":["realise"],"now immediately":["returns","returns","returns","returns","returns"],"now in":["the"],"now inline":["(therefore"],"now it":["reads"],"now just":["takes"],"now my":["implementation"],"now of":["course"],"now on":["using"],"now refactored":["it"],"now returns":["a"],"now so":["I"],"now submitted":["it"],"now tail":["recursive..."],"now that":["they're","I've","you","you're","I'm","you","I","you've","I"],"now the":["empty","conditions","regex"],"now there":["is"],"now to":["add"],"now used":["good"],"now uses":["the"],"now with":["the"],"now working":["as"],"now you're":["green."],"now you've":["convinced"],"now! Will":["do"],"now) but":["I"],"now) many":["docs/tutorial"],"now, I":["think"],"now, all":["of"],"now, and":["also"],"now, as":["opposed"],"now, but":["I","I","I","I'm"],"now, with":["the"],"now, you're":["sorting"],"now. But":["I'm"],"now. I":["think","went"],"now. I'll":["take"],"now. I'm":["not"],"now. Katrina":["Owen"],"now. That":["shoves"],"now. The":["function"],"now. This":["is"],"now; this":["nesting"],"now? Thanks,":["again,"],"now? is":["there"],"now?\" be":["considered"],"now?\" has":["lowercase"],"nowhere near":["the"],"np, due":["to"],"nt, 0,":["&(&1+1))"],"nt, counts":["-\u003e"],"nth, ni":["}","}"],"nucleotide !=":["nucleotide2"],"nucleotide exercise,":["but"],"nucleotide sequence":["the"],"nucleotide will":["mean"],"nucleotide))` instead":["of"],"nucleotide))` using":["the"],"nucleotide))`, but":["that's"],"nucleotide)` in":["newer"],"nucleotide)` should":["be"],"nucleotide)` why":["not"],"nucleotide, &amp;1":["+"],"nucleotide. It's":["possible"],"nucleotide2}) ,do:":["nucleotide"],"nucleotide_counts result,":["and"],"nucleotide_counts to":["keep"],"nucleotide_counts([char]) ::":["HashDict.t"],"nucleotides are":["different"],"nucleotides are,":["just"],"nucleotides have":["to"],"nucleotides in":["`count`"],"nucleotides somewhere":["else."],"nucleotides were":["different"],"nucleotides. Why":["not"],"nucleotides` as":["`@carrie"],"nudge in":["the"],"nudge me":["towards"],"nudge towards":["`cond`."],"nudged me":["from"],"nudges in":["the"],"null check":["in"],"null value,":["but"],"null values":["for"],"null, which":["makes"],"nullable types":["http://en.wikipedia.org/wiki/Nullable_type"],"nullary methods":["are"],"num &gt;":["2"],"num +":["1"],"number (instead":["of"],"number +":["1"],"number ,":["you"],"number 10.":["At"],"number 111":["you"],"number 31557600":["would"],"number :)":["I'm"],"number `10`":["in"],"number and":["then","`_pretty`"],"number as":["a","a"],"number by":["some"],"number from":["the"],"number if":["it's"],"number in":["the"],"number input":["for"],"number is":["odd,","still","not"],"number method":["here,"],"number of":["times","reasons.","functions","handy","submissions","private","bottles","bottles","bottles","smaller","arguments","bytes","code","decisions","mutations","unequal","regexes?","clauses","bottles).","grains","arguments","grains","lines.","arguments:","clauses"],"number or":["a"],"number passed":["to"],"number so":["that"],"number to":["bottle_phrase","the"],"number which":["could"],"number with":["ten"],"number would":["ever"],"number\", respectively.":["Maybe"],"number(digits) |\u003e":["String.slice(0,"],"number-letter pairs":["will"],"number. It":["felt"],"number... it's":["returning"],"number_of_bottles(0), do:":["\"no"],"number_of_bottles(1), do:":["\"1"],"number_of_bottles(n), do:":["\"#{n}"],"numbers (i.e.":["save"],"numbers (typespecs":["don't"],"numbers 1,":["2,"],"numbers `1`":["and"],"numbers and":["comma's?","non-exclamation","hardest","other"],"numbers come":["out"],"numbers fall":["to"],"numbers from":["Erlang.","Erlang."],"numbers in":["the","the"],"numbers myself":["but"],"numbers that":["need"],"numbers to":["large,"],"numbers we":["are"],"numbers which":["are"],"numbers\" lying":["around"],"numbers, but":["it's","if","if","if","if","if"],"numbers, or":["the"],"numbers, spaces":["or"],"numbers-only and":["shouting."],"numbers-only input":["will","itself,"],"numbers. For":["this","example,"],"numbers. Since":["String.upcase"],"numbers. That":["way"],"numbers. The":["comments"],"numeral pair,":["but"],"numeric keys?":["Or"],"o =":["mod.new(...)"],"obfuscates the":["real"],"object (in":["this"],"object by":["default?"],"object constructor":["so"],"object of":["DNA."],"object style":["thinking,","thinking"],"object the":["runtime"],"object) is":["used."],"object, it":["really"],"object-oriented style.":["The"],"object. That's":["one"],"objects, all":["count"],"objects. In":["Elixir"],"oblivious to":["whether"],"observation is":["that"],"observe that":["it"],"obtain a":["list"],"obviates the":["need"],"obvious and":["easy.","feels"],"obvious but":["also"],"obvious choice":["of"],"obvious exception":["is"],"obvious here":["=)"],"obvious if":["you"],"obvious it":["only"],"obvious problem,":["even","even","even","even","even"],"obvious that":["it's"],"obvious way":["would"],"obvious what's":["going"],"obvious when":["you","you","you"],"obvious why.":["That"],"obvious. The":["only"],"obvious. Well,":["now"],"obviously better!":["Is"],"obviously need":["to"],"obviously not":["very"],"obviously should":["be"],"obviously, on":["line"],"occasionally, so":["you"],"occasions, for":["example"],"occupy more":["than"],"occur in":["any"],"occur to":["me"],"occurrence with":["leading"],"occurrences of":["a"],"occurrences, could":["you"],"occurs to":["me"],"occurs with":["enumerables"],"odd (to":["me)"],"odd about":["having"],"odd code":["in"],"odd is":["the"],"odd looking":["line"],"odd that":["the"],"odd to":["`defp`","me"],"odd, `keep`":["would"],"odd. (I":["consider"],"odd. Do":["we"],"odd. Then,":["happily"],"oddly *not*":["pipeline"],"oddly like":["you're"],"oddly performance":["wise,"],"of \"\"":["not","because"],"of \"_speak\"":["wasn't","which"],"of \"apply_accumulate\"":["as"],"of \"candidate\"":["or"],"of \"cond\"":["expressions"],"of \"d,":["m,"],"of \"f\"":["and"],"of \"foo\".":["Did"],"of \"for_iter\"":["and"],"of \"hey\"":["--"],"of \"if\"":["might"],"of \"noisy\"":["punctuation-type"],"of \"shouting\"?":["Artifact"],"of \"syntax":["ceremony\""],"of &1":["without"],"of &amp;1":["in"],"of 'future":["readers',"],"of *defensive":["programming*"],"of --":["which"],"of 0":["look","is"],"of 0,":["line"],"of 1":["bottles"],"of 1)":["swapping"],"of 10":["elements","elements"],"of 100":["words"],"of 1000":["elements","elements","elements","elements"],"of 15":["twice"],"of 3":["vs"],"of 500":["elements.","elements."],"of \u003ccode\u003eBitString\u003c/code\u003e":["feels"],"of \u003ccode\u003eis_nil?\u003c/code\u003e":["but"],"of \u003ccode\u003elast_one\u003c/code\u003e":["-","-"],"of Anagram":["selection"],"of DNA\"":["doesn't"],"of DNA,":["but"],"of DNA.":["Some"],"of Dict.update":["as"],"of Elixir":["syntax","examples,","and","code","0.10.1.","always","and","or","is","is","(0.10.2,","a","idioms,","code","are","I'm"],"of Elixir's":["strengths.","`|&gt;`"],"of Elixir,":["but","is"],"of Elixir.":["The"],"of Elixir:":["strings","it's","if"],"of Enum":["for"],"of Enum.map":["doing"],"of Enum.map/2":["halfway"],"of Enum.sort":["simplify"],"of Eratosthenes":["process."],"of Erlang's":["non-unicode"],"of Erlang,":["but"],"of Erlang.":["The"],"of Exercism,":["too."],"of Guard":["statements"],"of HashDict":["for","nor"],"of HashDict).":["As"],"of HashDict,":["though"],"of HashDict.new/2":["in"],"of HashDicts":["come"],"of HashDicts)":["as"],"of HashDicts;":["they"],"of Haskell":["btw."],"of Java,":["a"],"of LISP.":["Not"],"of Life":["too."],"of List,":["Dict"],"of Message":["into"],"of OTP's":["error"],"of POSIX":["character"],"of Q":["(`String.ends_with?"],"of Query":["as"],"of Regex":["support","in"],"of Regex,":["but"],"of Regex.match?":["or"],"of Regex.scan":["--","that"],"of Roman":["numerals."],"of Ruby":["projects,"],"of Ruby's":["instance"],"of Statement.nothing?).":["I'm"],"of String.ends_with?/2.":["Everything"],"of String.graphemes.":["I'm"],"of String.last":["and"],"of String.slice":["that"],"of String.strip(...)":["to"],"of [`sprintf`](http://apidock.com/ruby/Kernel/sprintf)":["format"],"of [etrepum](http://exercism.io/etrepum),":["I"],"of _why_":["it"],"of `%`":["for"],"of `&amp;1":["!="],"of `@`s)":["by"],"of `@judd`":["and"],"of `Dict.get`":["(which"],"of `Dict.merge`":["?","but"],"of `Dict`":["as","is"],"of `Enum#reduce`,":["but"],"of `Enum.any?`":["is"],"of `Enum.filter_map`":["--"],"of `Enum.flat_map`":["to","and"],"of `Enum.map`?":["Just"],"of `Enum.reduce`":["would"],"of `Enum.reduce`.":["I"],"of `Enum.reverse":["|\u003e"],"of `Enum.slice`":["(`Enum.slice([],"],"of `Enum.sort`":["in"],"of `Enum.take`.":["Consider"],"of `Enum.to_list`,":["using"],"of `Enumerable`":["for"],"of `HashDict.fetch!`":["you"],"of `HashDict.foo`":["if"],"of `HashDict.new()`":["?"],"of `HashDict.new`":["which"],"of `HashDict.some_fun`.":["The"],"of `HashDict.some_func`.":["`Dict`"],"of `List.flatten`":["you"],"of `List.flatten`,":["I"],"of `List.foldl`":["+"],"of `List.zip`":["and"],"of `List`.":["For"],"of `O(n+m)`":["by"],"of `P":["or"],"of `Phrase.to_word_list/1`,":["by"],"of `Range`":["to"],"of `Regex#split`,":["but"],"of `Regex.replace`":["and"],"of `Regex.run`":["was"],"of `Regex.scan/2`":["not"],"of `Stream.Lazy`":["records)."],"of `Stream.zip/2`.":["Looks"],"of `String.last(input)":["==","=="],"of `String.length":["=="],"of `String.length(String.strip(msg))":["=="],"of `String.replace/4`,":["or"],"of `String.slice`":["that"],"of `String.strip`.":["I"],"of `String.to_char_list!`":["previously."],"of `Teenager`?":["Could"],"of `Words.count`":["that"],"of `[":["head"],"of `[[1,":["2],","2],"],"of `[^\\p{L}]`":["you"],"of `[a-zA-Z0-9]`":["for","for"],"of `[func.(head)]":["++"],"of `\\p{L}`":["(i.e."],"of `\\w`":["in"],"of `_anagramChars(sourceWord)`":["might"],"of `_count`":["and"],"of `_foo`.":["And"],"of ```":["Dict.update"],"of ```String.length":["=="],"of ```String```":["of"],"of ```http://elixir-lang.org/getting_started/2.html```":["I"],"of ```message":["-\u003e"],"of `age_on`":["down"],"of `all_caps?`,":["because"],"of `anagram?`":["inside"],"of `append`":["without"],"of `append`,":["`reverse`"],"of `base`":["and"],"of `being_yelled_at?`":["is"],"of `bitstring_to_list`":["lately"],"of `bottles`":["had","to"],"of `case`":["inside","expressions"],"of `case`)":["and"],"of `concat_`,":["do"],"of `concat`":["if"],"of `cond`":["or","to","and","and"],"of `count`":["as","makes!","a"],"of `count`,":["what"],"of `counts,":["word`"],"of `def":["transform"],"of `def`s":["that"],"of `desired_characters`,":["which"],"of `dict`...":["will"],"of `do_hey`,":["which"],"of `do_interpret`?":["Pattern"],"of `downcase`":["to","to"],"of `else":["if`."],"of `ends_with?`!":["Going"],"of `entries`":["(through"],"of `entries`?":["That"],"of `f(x)":["|\u003e"],"of `filter`.":["So"],"of `flat_map`.":[":)"],"of `function`.":["Those"],"of `head`,":["`t`"],"of `hey/1`":["instead"],"of `hey/1`.":["You"],"of `hey`,":["or"],"of `hey`?":["The"],"of `inc`":["in"],"of `interpret`":["in"],"of `isShouting`.":["Not"],"of `is_`":["type"],"of `is_sublist`":["further?"],"of `keep`":["or","besides"],"of `keep`,":["except"],"of `letters":["="],"of `match/2`":["is"],"of `match`.":["Is"],"of `n_bottles`":["in"],"of `nil`s,":["so"],"of `nucleotide_counts`":["-"],"of `parse":["text`"],"of `phase":["|\u003e"],"of `process`":["iterate"],"of `reduce(ll,":["[],","[],"],"of `reduce`":["so"],"of `reduce`,":["and"],"of `result`":["and"],"of `reverse`,":["including"],"of `reverse`.":["Is"],"of `score`":["on"],"of `sequence":["|\u003e"],"of `shouting?`":["!"],"of `shouting?`,":["do"],"of `silent?`":["method"],"of `sing`":["you"],"of `something`":["to"],"of `sort`":["I"],"of `tail`":["and"],"of `ten_digit`":["because"],"of `violates_triangle_inequality?`...":["sorting"],"of `words_match?/2`":["up"],"of `words_match?/2`.":["I'm"],"of `words`?":["Is"],"of `x`":["would"],"of `|\u003e`":["and","as"],"of a":["pseudo-type","function","function","string.","statement","larger","string?","string.","string.","boring","String","string,","difference","common","function,","way","tip.","test","native","guard.","second","function","function","way","way","word","way","way","drag,","cond/do/end.","list","slightly","second","`match_letters`","multi-line","pipeline","list","message.","macro,","character?","space","fan","list","Greeting","`cond`","constructor).","phone","case","newbie","particular","function","regex).","pipeline","language,","length","line","fn","parallel","list","way","string","`defp`","way","character","program.","string","value.","way","module","string","better","personal","call","word","string","matter","comprehension","tuple.","difference","map/map.","more","process,","macro","list","chain","conceptual","HashDict","list","list","line","prominent","recursive","list","list","function","process","catch-all","break","letter","way","hard","string","subtle","word","way","million","million","list.","game","leaf","hectic","list","and","way","programming","predicate","HashDict","HashDict","cleaner"],"of abstraction":["you're","from","that",":-)","the"],"of abstraction.":["As"],"of abstractions":["going"],"of accessing":["*everything*"],"of accumulation":["is"],"of adding":["@travis","an"],"of all":["the","words,","of","I'll","the"],"of allergens.":["Could"],"of always":["explicitly","submitting"],"of an":["earlier","expression","exercise","anonymous","operator","extra","active","object","opinion","argument","implementation","animated","append","inefficiently","anonymous"],"of anagram?":["and"],"of anagram?.":["Passing"],"of anagrams":["we"],"of anonymous":["vs."],"of another":["binary/datastructure","convention"],"of any":["convention","character.","sort","help","other","other"],"of appends":["for"],"of applying":["the","a"],"of arguments":["that","as"],"of arguments,":["for"],"of arguments:":["`&append/2`"],"of arity":["greater"],"of arrys":["+"],"of as":["a","much"],"of asking":["them"],"of assumptions":["from"],"of at":["the"],"of atoms":["piped","piped"],"of attribute":["values"],"of attributes":["-"],"of avoiding":["magic"],"of background":["info"],"of basically":["a"],"of beer":["on","on","on","on","on","on","on","on","on","on","on","instead"],"of beer\"":["is"],"of beer.\\nGo":["to","to"],"of beer.\\nTake":["it","one"],"of behind":["the"],"of being":["*that*","identical.","tail","accurate"],"of beverages":["instead"],"of binaries":["is","which"],"of binaries)":["per"],"of binaries,":["right?"],"of binarys":["as"],"of biology":["or"],"of bits),":["not"],"of bits,":["so"],"of bottle":["for"],"of bottles":["is","(","like"],"of building":["your"],"of bytes":["for"],"of bytes.":["That"],"of calendars":["perfectly"],"of calling":["class",".new()"],"of calls":["like"],"of capture":["shorthand"],"of cases":["like:"],"of character":["lists","lists?","property"],"of characters":["in","in","it's","including","into","that","and","you","you"],"of characters,":["while","codepoints","not"],"of characters.":["Also,","Wouldn't"],"of chars":["is"],"of chars,":["you","binary"],"of chars.":["Not"],"of checking":["for","the"],"of clarity/conciseness":["v."],"of classes.":["String"],"of clauses":["you","in"],"of cleanup":["then"],"of clutters":["up"],"of code":["possible","readability,","to","points.",".","in","that","and","and"],"of code\".":["This"],"of code,":["it"],"of code.":["It's","Which,","No"],"of code...I":["think"],"of codepoints":["(I","and"],"of codepoints.":["Secondly,"],"of collections,":["not"],"of communication":[":)","is"],"of comparing":["the"],"of comparisons":["that"],"of complexity":["notation","notation"],"of complicated.":["I"],"of computation.":[":\\"],"of concat":["and","and","using"],"of cond,":["but"],"of condition":["msg"],"of conditional":["if/else,"],"of conditionals":["in"],"of conditionals.":["–"],"of conditions":["is"],"of consecutive":["\"desired\""],"of consistency":["(and"],"of consistency,":["wouldn't","but"],"of constraints":["in"],"of construct":["instead"],"of content":["it's"],"of conversation":["i"],"of conversation,":["build"],"of converting":["to"],"of core":["functions"],"of count":["--"],"of count(),":["it's"],"of count(text)":["encapsulates"],"of count,":["but","though."],"of count/1":["too."],"of count:":["http://elixir-lang.org/docs/stable/Enum.html#count/2"],"of counting":["occurrences"],"of course":["always","I","I",":)","but","just","his",":)","you"],"of course,":["though"],"of course.":["I'm"],"of curiosity,":["how","what"],"of cutting-edge":["stuff"],"of decisions":["and"],"of declaration":["changed"],"of def":["when"],"of def/defp.":["I"],"of default":["condition"],"of descriptions).":["For"],"of dictionaries":["so","so"],"of dictionaries,":["`HashDict`","using","which"],"of dictionary":["other","to"],"of different":["functions.","ways","lengths."],"of discussing":["why"],"of dispatching":["to"],"of doc":["=)"],"of doing":["down","this","that","two","things","things.","the","explicit","the","it.","things."],"of downcasing":["multiple","multiple"],"of duplicated":["code,"],"of duplication":["between","between","between","between","between","in"],"of duplication,":["and"],"of dynamic":["dispatching"],"of each":["action","letter","line,","word"],"of edges":["and"],"of elements":["(in"],"of elixir":["are","protocols","and"],"of elixir's":["comprehension"],"of elixir,":["I"],"of ending":["predicate"],"of enterprise":["Java"],"of equal":["length."],"of even":["the"],"of every":["nucleotide.","time.","letter.","new"],"of examples":["I've"],"of exercises":["you've","doesn't","to"],"of exercises,":["but"],"of exercism":["means","has","Elixir","isn't"],"of exercism,":["most"],"of exercism.io":["to","will"],"of explanation).":["For"],"of explicit":["recursion"],"of explicitly":["applying","listing"],"of expressions":["like","allowed"],"of extra":["work"],"of extracting":["responses","those"],"of facilitates":["bad"],"of fault":["handling","handling,"],"of features":["makes"],"of feeding":["what's"],"of figured":["this"],"of fixing":["it...)"],"of flat_map":["and"],"of fn's":["but"],"of fn,":["which"],"of for":["every","each","the"],"of formatting":["inconsistencies."],"of frequency":["could"],"of function":["name.","names","calls.","definitions","with","naming","clauses"],"of functional":["programming","programming"],"of functions":["into","you","`asking?`","on","used","like","before","to","that","are","is","like","like","like","being","is","from"],"of functions,":["a"],"of functions.":["In","That's"],"of getting":["around"],"of giving":["a"],"of goes":["along"],"of grains":["on","on"],"of graph/nodes/edges,":["which"],"of great":["docs/tutorials...","API"],"of grokking":["a"],"of grouping":["them."],"of growing":["the"],"of guard":["conditions","clauses"],"of gvaughn's":["suggestions."],"of handy":["methods"],"of hard":["to","to","to"],"of having":["this","`nucleotide_counts`","\"import","module","to","Cell","a","`counter`,"],"of here":[":-)"],"of heredoc":["and"],"of hiding":["it"],"of higher":["level","order"],"of how":["#anagrams?","or","the","I","functions","I","it","having","the","you'd","I","`++`/`append`","your","I","to"],"of huge":["list"],"of identifying":["what"],"of identity":["vs"],"of if":["I","(and","it"],"of if/else,":["when"],"of imagination":["on"],"of implementation":["revealing.","details"],"of implementing":["it"],"of implied":["by"],"of in":["the"],"of indentation":["is"],"of indenting":["for"],"of indifference":["to"],"of individual":["pieces"],"of info":["about"],"of information":["that's"],"of initialization":["data."],"of input":["would","validation"],"of input.":["You"],"of instance":["of"],"of instead":["write"],"of integers":["(versus","are","(code"],"of interchangeable?":["Sorry"],"of internal":["inconsistency"],"of intersection":["when"],"of inverting":["the"],"of iolists":["which"],"of is":["the"],"of is_,":["this"],"of issue":["all"],"of it":["to","as","(for","in","scattered","that","like",":\\"],"of it's":["features","own."],"of it,":["that's","except","I"],"of iteration":["#3,"],"of iterators":["that"],"of its":["own."],"of just":["beer","'abcde'","following","formatting?","the"],"of keep":["(or"],"of keeping":["everything","it"],"of keys":["so"],"of knowledge":["of","I"],"of language":["features","features"],"of learning,":["etc)."],"of least":["discussion:"],"of legth":["0"],"of letter":["counts","to","to"],"of letters":["and"],"of letters,":["but"],"of letters.":["If"],"of like":["having"],"of lines":["8","of"],"of list":["but","(tail)"],"of list,":["so"],"of list-based":["functional"],"of lists":["e.g.:","from","and","could","and","(i.e.","of","of"],"of lists\"":["which"],"of lists,":["once"],"of lists.":["In","So"],"of little":["value"],"of logic":["in"],"of logic.":["Might"],"of lower":["and"],"of lowercase":["English"],"of lowercasing":["and"],"of macro's":["that"],"of macros":["to"],"of magnitude":["faster.","less","less"],"of makes":["up"],"of making":["```hey/1```","a","the"],"of map_with_index":["iterator,"],"of mapped":["values)."],"of matches":["after","or","would"],"of matching":["nucleotides.","words"],"of me":["not"],"of memory":["needed.","`[d","use"],"of message":["is.","and","to","is"],"of method":["and"],"of methods":["names"],"of mine.":["Is"],"of minesweeper":["(which"],"of missing":["in"],"of mistaking":["it"],"of modularizing":["your"],"of module":["attributes!"],"of mutating":["the"],"of mutations":["between"],"of my":["time,","league.","first","problem","first","own","head:","ruby","current","making.","artificial","use","implementation","solution","custom"],"of n":["strings."],"of name":["that"],"of naming":["predicate","predicates"],"of nested":["if"],"of nested/chained":["if"],"of nesting":["in"],"of new":["exercises."],"of newlines.":["Why"],"of nitpicking":["(and"],"of nitpicks":[":)"],"of nits":["here."],"of nits.":["The"],"of node":["and"],"of noise":["reduction."],"of non-tail-recursive":["definitions."],"of not":["implementing","exposing"],"of now,":["with"],"of numbers":["that"],"of on":["my"],"of one":["another?","filter?","more","or","clause"],"of one-liners":["is"],"of only":["using","single","whitespace.","one","letters,"],"of opinion,":["so..."],"of optimization":["which"],"of optimizing":["for"],"of organizing":["Elixir"],"of original":["anagram"],"of other":["methods","modules","things","Elixir"],"of others":["is"],"of overhead":["both"],"of pairs":["basically,","(`{key,"],"of parentheses":["should"],"of parenthesis":["hell"],"of part":["of"],"of partially":["applying"],"of passing":["the"],"of pattern":["matching!","matching,","matching","matching","matching","matching.","matching","matching,","matching","matching,","matching","matching."],"of pattern-matching":["on"],"of people":["to","use"],"of person":["with"],"of personal":["style","preference,","style,","preference"],"of phone":[")instead","numbers."],"of phrase":["where"],"of phrases":["defined"],"of pictured":["the"],"of pipelines":["is","and"],"of pipelining":["and"],"of pipes":["or"],"of piping":["in","the"],"of place.":["Do"],"of places":["in"],"of playing":["around"],"of posible":["inputs"],"of possible":["problems"],"of possibly":["useful"],"of practice.":["I"],"of predicate":["method."],"of prepending":["the"],"of previous":["debate","versions"],"of primes":["and"],"of private":["methods","methods","(`defp`)?"],"of problems.":["+1"],"of problems/ambiguities":["they're"],"of programming":["is"],"of proper":["words,"],"of protocol":["String.Chars"],"of public":["(`def`)?"],"of punctuation":["and"],"of punctuation,":["there's"],"of putting":["parens","parens","private","to","the","this..."],"of raw":["recursion."],"of readability":["to","room","you"],"of reading/writing":["the"],"of really":["need"],"of records,":["a"],"of recursion":["to"],"of redefining":["downcase,"],"of reduce.":["Perhaps"],"of redundant":["functions"],"of refactoring":["after"],"of referencing":["the"],"of regex":["syntax."],"of regexes?":["I"],"of regular":["expressions,","expressions,"],"of reluctant":["to"],"of removing":["the","characters","those"],"of repeating":["the"],"of repetition":["in","is","between"],"of replace?":["It'd"],"of replacing":["the","what","the","characters","characters","what"],"of require,":["then"],"of requiring":["the"],"of responsibilities":["or","to"],"of responsibilities.":["If"],"of returning":["```"],"of reusing":["it."],"of right":["hand"],"of room":["for"],"of ruby's":["`attr_reader`"],"of rules.":["In"],"of safe":["built"],"of scan":["(although"],"of scanning,":["flattening"],"of scores":["before"],"of searching":["(and"],"of see":["what","those"],"of sense,":["I"],"of sentence":["the"],"of sentence?":["Thoughts"],"of sentences.":["Nice"],"of separate":["calls"],"of sets,":["Elixir"],"of shouting":["has"],"of shouting?":["!"],"of sides":["and"],"of simple":["comparison"],"of simplifications.":["I"],"of simplifying":["things"],"of singalong.":["And"],"of single":["digits.","elements","elements","lines,"],"of small":["things:","nits:","comments:","nits:","lists\"","comments:","suggestions:","lists).","lists"],"of smaller":["functions,"],"of snooze":["left","left"],"of some":["sort","sort","external","of","later","unicode","way","perens.","of"],"of someone":["else"],"of something":["this","like","like"],"of sorting":["the","the"],"of space.":["I"],"of specifying":["a","the"],"of split":["directly"],"of splitting":["and","up","and"],"of standard":["`Enum`"],"of starting":["exercism,"],"of string":["repetitions,","concatenation"],"of string?":["(naming"],"of strings":["into"],"of stripping":["the"],"of students":["but"],"of stuff":["in","is","brought","is"],"of style,":["I"],"of submissions":["that"],"of submitting":["things"],"of syntactic":["sugar"],"of syntax":["that"],"of tabs.":[":P"],"of tail":["recursion","call"],"of taking":["a"],"of taste":["but","(I'd","though.","when"],"of taste.":["(`word"],"of test":["forced","cases"],"of tests":["from","than","I"],"of text.":["Having"],"of that":["is","without","change","`fn`","without","in","(there","do","before.","variation","record.","before)","map+reduce","function","could","module.","callback?","more","number","but","is","one","or","commented-out"],"of that,":["given"],"of that.":["For"],"of that?":["Thanks"],"of the":["pipeline?","essence","next","`README.md`","equation.","`other_words`","Ruby","number","awesomeness","first","module.","public","language.","method","code","solution?","program","exercise","four","tests","language","next","condition","language,","language!","language","response?","next","duplication?","private","`sing`","`Readme.md`","code.","Regex.","string?","function","function","one-liner","parameter","things","nitpick","?!,","answer","line,","phrase","class","class,","`cond`","`match/2`","`String.`","function","module","same","verse","method","phrase","guard","Haskell","way","phrase?","check","phrase","condition,","textual","built-in","`HashDict`,","private","words","function.","bleeding","line","`extract_nucleotide`,","function","function","empty","hey(...)","```#hey```","supervision","function),","process,","steps","`|&gt;`","steps","general","guard","regex","solutions","key","noun;","problem,","algorithm","string","contents","scale.","duplication","domain","String.strip?","`String`","module","subject.","word.","`Words#count/1`,","value","test","administrators","\"!\"","pipe","naming","tests","`silence?`","Teenager","various","work","```","above","operation","line,","show.","string","duplication","message,","pipeline","story","pipe","convention.","Mostly","whole","HashDict.","two","`if,","strand","docstrings,","type","tests.","regex.","string,","result","cond","level","names","helper","nice","public","pattern","docs","filter_map,","`Enum`","public","function.","edge","gate","character","conditions.","equality","data","parameter","parameter,","paremeters","function.","`shout`","regex","`anagrams?`","standard","predicate","previous","[pipeline](http://elixir-lang.org/docs/stable/Kernel.html#|&gt;/2)","implementation.","sorting","predicate","regexes","pipeline","List.foldl.","standard","high","string","verse,","verse.","function","opinion","method","elements","desired","process?","variable","helper","box?","functions","`replace_thymidine`","language,","words","`count`","code","main","method","domain","String","word","code","same","time","code.","pipeline","code","string,","functions","text","function","function","screen.","wartier","method","phone","phone","constant","variable","range","range.","conditions","code.","oft-overused","parameters","next","golfy","code.","subsequent","other","code","cleansed","function","student","k,v","list.","list.","\"lower_case()\"","source","word","concrete","list,","list.","`Beer`","solution","&1","Regex).","name","items","error","pound","module,","song","private","pipeline","constants.","regular","module.","shorter","week","phone","functions","shorter","more","caller","conditions","conditions","problem","viewport?","valid","code","target","0","fact","Erlang","BEAM","conditional?","default","unicode","language","file.","cond;","public","song).","keys","dict.","clauses","`Enum`","implementation-specific","implicit","same","return","server","challenge","original","same","problem","fundamental","language.","advantages","function","value.","function","value\"?","code","reverse.","process","function","precondition","`Dict`","slice","Elixir","exercism","exercises.","calculation","function","week","duplicate","`anagram?`","last","methods","time","callback","public","module?","functions","exercise","data","exercise","first","other","reducing","mill","list","pipeline","Elixir-lang.org","list,","base","implementation.","snooze.","end","reduce","reduce","list","code.","border","`Record[a:","`Record[a:","song","same","capture","standard","lists","reduce","conditionals","assignment.","exercise.","same","same","test","most,","`strain`","test","areas","three","function","function","function","`count`","concat","candidate","`and`.","tests","reduce","inputs","function","function","`count`","function","domain","code?","letters:","cases","different","test","string","if","pattern","callback,","types","spec.","file.","Sieve","items","dict","results","tuple","clarity","other","function","function","`count`","characters","more","input","first","first","second","third","optimizations","tests","students","input.","different","year","module","HashDict","HashDict","functions","leaf","tree","cases,","string","tests","left","function","function","`count`","left","code.","function","function","`count`","function.","domain.","`void?`","test","domain.","domain.","domain?","name","parameters","usual","first"],"of their":["own","own"],"of them":["are","to","entirely?","could","is","in","being","have"],"of them),":["is"],"of them,":["plus","though,"],"of them.":["There's"],"of them?":["Was"],"of there":["is"],"of these":["functions","just","private","comments","methods,","would","methods","before,","exercism","exercises,","functions","are","except","private","conditionals.","are"],"of these,":["or","or"],"of thing":["in","in","is","to"],"of thing,":["so"],"of things":["you","I","very","nicely.","to","(that","to","jump","you"],"of things,":["so"],"of things:":["is"],"of thinking":["about","about","about","-","about"],"of this":["question.","problem","exercise","check","looks","magnitude","problem","out","than","concurrent","exercise,","as","string?\",","one,","pattern.","the","code","exercise,","approach","exercise","be","code","kata","iteration","pipe","in","exercise.","code.","exercise,","exercise","page"],"of this,":["and"],"of this.":["Just"],"of those":["strategies","operations","atomic","case","functions","two","requirements","syntactic","texts","things","and","seemed","things","I","some","extra","tests"],"of thought":["and"],"of thumb":["is","is"],"of time":["with","trying","trying"],"of time,":["the","the","the","the"],"of time.":["For","For"],"of times":["I","but"],"of times,":["whereas"],"of tiny":["things.","functions."],"of to":["make"],"of to_words":["or"],"of tricks":["than"],"of trouble":["with"],"of true":["-\u003e"],"of trusting":["emacs"],"of trying":["whatever","to"],"of tuples":["and","when"],"of twice":["-"],"of two":["condition","preprocessed"],"of types)":["than"],"of ugly":["and"],"of understanding":["though."],"of unequal":["pairs"],"of update,":["but"],"of us":["test"],"of use":["of"],"of using":["that.","guards","2","the","`:else`","the","true","a","piping","```Regex.scan```","some","shorthand","them","a","guards","`defp`","a","parentheses","Map","library","bit","a","list_to_tuple","`end.method`","a","something","`Stream.map","`++`","it.","`String.replace`","predicates.","a","`HashDict.fetch(@fay,"],"of utterances":["(or"],"of valid":["words"],"of value":["in"],"of variable":["naming\",","naming\"","naming,"],"of walking":["the"],"of wanted":["that"],"of week":["numbers","numbers"],"of week,":["month","month"],"of weird":["that"],"of what":["you're","you're","each","you","a","I'm","you","you","I","you","it","I'd","the","it's","is","traits"],"of what's":["attracting","actually","happening.","matched."],"of when":["it's"],"of where":["this","I'd","and","it"],"of whether":["message","a","the"],"of which":["method.","you","the"],"of while":["playing"],"of whitespace":["to","and"],"of whitespace,":["as"],"of word":["characters),","characters."],"of wording":["is"],"of words":["by","which","for","instead","with","using"],"of words,":["and","so","saves"],"of words.":["Also,"],"of work":["to","for"],"of working":["with"],"of writing":["the","`List.foldl`.","that","reduce"],"of you":["when"],"of you!":["@milo"],"of you.":[";)"],"of your":["method","code.","variable","other","functions","`ignore_case`","cond","`count`","module","`_hey`","other","if/else","code","private","methods,","Regex.","code","solution","pipeline","predicate","function","way","iteration","test","pipeline.","regex.","helper","feedback!","creative","private"],"of yours.":["I"],"of, but":["it"],"of, or":["more"],"of, so":["you"],"of. I":["think"],"off and":["then"],"off but":["I"],"off for":["the","a"],"off into":["functions"],"off it":["it"],"off that":["collect/map/fmap/whatchamacallit"],"off the":["empty","\"1\",","right","parens"],"off were":["the"],"off when":["I"],"off whitespace.":["That"],"offending test":["has"],"offer anything":["over"],"offer is":["discussion."],"offered in":["the"],"offering feedback":["on"],"offers a":["straightforward"],"offers to":["make"],"official tests":["as"],"offset anything":["else."],"offset as":["`?a"],"offset inline":["similar"],"oft-overused a-zA-Z":["stuff"],"often a":["tradeoff.","good","good"],"often aren't":["readable.","perfect,"],"often as":["much"],"often bad":["practice"],"often be":["written","written"],"often better":["to"],"often enough":["to"],"often goes":["above"],"often in":["Elixir."],"often marked":["private"],"often most":["useful"],"often obfuscates":["the"],"often occurs":["with"],"often optimize":["that"],"often pass":["the"],"often provide":["one"],"often quite":["useful."],"often results":["in"],"often the":["right"],"often they":["are"],"often used":["as"],"often want":["to"],"often, usually":["we"],"ok ..":["Only"],"ok with":["the"],"ok, I":["think"],"ok, it":["just"],"ok, it's":["elixir."],"ok, that":["I"],"ok. I":["will"],"okay to":["use"],"okay. I'll":["look"],"old count":["always"],"old quadratic":["time"],"old school":["Erlang"],"old test":["case"],"old tests":["didn't","for"],"old version":["of","of"],"old version?":["There"],"old-exercise-file.exs\u003c/code\u003e. It":["does"],"old? (I":["followed"],"old_count, new_count)`":["using"],"older exercises":["were"],"older version":["of"],"omission of":["them"],"omit the":["first"],"omitted in":["the","the"],"on \"\",":["\""],"on \"bob\"":["you"],"on \"ok,":["I'm"],"on \"the":["Haskell"],"on #elixir-lang":["on"],"on *why*":["we're"],"on --":["an"],"on 1":["and"],"on \u003ccode\u003esing(2,":["3)\u003c/code\u003e?"],"on @ahmad's":["feedback:"],"on API":["design"],"on Dict.":["It"],"on Elixir":["master","Sips"],"on Elixir.":["Great"],"on Kernel,":["which"],"on L23":["is"],"on List.flatten.":["I"],"on OS":["X"],"on P,":["if"],"on Rails.":["Noted!"],"on Regex](http://elixir-lang.org/docs/master/Regex.html)":["that"],"on String":["instead."],"on String,":["as"],"on Unicode":["in"],"on _L11_":["seemed"],"on `%r/\\w+/`":["-"],"on `+`":["and"],"on `Dict#update/4`":["function."],"on `Dict`":["you"],"on `Enumerable.reduce`":["(i.e."],"on `Regex.scan`,":["but"],"on `String`":["which"],"on `\\w`":["should","but"],"on ```_```":["so"],"on `add`":["is"],"on `anagram`":["in"],"on `bottles_phrase`":["to"],"on `generate`":["and"],"on `is_saying_nothing?`,":["which"],"on `match/2`":["with"],"on `nil?(something)`":["returning"],"on `quiet?`.":[":)"],"on `remove_punctuation_and_to_words`":["as"],"on `respond`":["to"],"on `sing/2`":["so"],"on `sing_verse`,":["but"],"on `sort_codepoints(word)`.":["The"],"on `str`":["in"],"on `verse/1`.":["My"],"on `void?`":["..."],"on `words(words)`,":["I'd"],"on a":["coding","single","built-in","different","new","`Dict`","few","predicate","previous","single","list","module","module","single","one-line","numbers-only","lot","range","line.","single","single","single","suggestion","range...","range:","concept","Unicode","particular","new","redesign","line","word","single"],"on about":["moving"],"on accident.":["I'll"],"on adding":["that"],"on after":["vacation!"],"on aliasing":["`any`"],"on all":["kinds","uses","elements","cases","cases"],"on an":["empty","external","iolist.","empty"],"on and":["maybe","then"],"on another":["approach.","function"],"on any":["Enumerable."],"on anything":["other","that"],"on argument":["value?"],"on arguments":["would"],"on arguments,":["but"],"on atoms":["to"],"on both":["sides"],"on bottle()":["as"],"on chaining":["also;"],"on cleaning":["this"],"on consideration":["I"],"on conventions.":["I"],"on data":["types"],"on dot-dsl":["and"],"on double":["quoted"],"on e":["as"],"on each":["iteration.","subsequent","case."],"on either":["implementation."],"on elixir,":["but"],"on elixir-lang-talk":["José"],"on elixir.":["Thank"],"on empty":["lists,"],"on ends_with?":["-"],"on entry":["vs."],"on enumerators.":["Elixir"],"on extracting":["the"],"on feedback":["by"],"on feedback.":["Thanks"],"on file":["roman.exs"],"on filter,":["I"],"on finding":["a","a"],"on freenode":["IRC"],"on from":["this","this"],"on function":["arguments."],"on future":["exercises?"],"on guarding":["against"],"on here,":["but"],"on hey":["and"],"on holiday":["for"],"on how":["Message","this","to","to","to","to","it","badly"],"on http://www.erlang.org/doc/man/re.html":["or"],"on idiom":["etc."],"on implementation":["details."],"on improving":["that."],"on in":["`anagram_of`"],"on iolist_to_binary.":["Now"],"on is":["at","to"],"on is_question":["vs"],"on it":["for","like","soon."],"on it,":["so","I"],"on it.":["(Lines","(Lines","Check"],"on iteration":["1."],"on its":["own"],"on itself":["that"],"on just":["ASCII,","`bit`"],"on keyword":["lists,"],"on knowing":["the"],"on line":["2?","15?","25.","10","6:","7!","23.","30","18.","30,","12.","10","19","4,","4","22","16","8","20,","5,","4.","15.","17.","#20","4","6.","15","5","16.","7","48.","11","8","52).","12","5,","16.","34"],"on lines":["14-22","30-35.","12-16."],"on lists":["but"],"on little":["exercises"],"on making":["a"],"on me,":["though."],"on methods":["with"],"on more":["than"],"on most":["code."],"on multiple":["characters,"],"on my":["part.","JS","laptop","git","side;","implementation","current","part,","own.","biggest","list","Erlang","toes.","non-tail-recursive","text"],"on myself":["not"],"on not":["recomputing"],"on one":["line?","line,","line","line","he/she","line","line"],"on opposite":["sides"],"on other":["modules.","things"],"on palindrome?":["but"],"on parentheses:":["https://groups.google.com/forum/#!topic/elixir-lang-core/PZFNes9w-aU"],"on passing":["`nil`"],"on pattern":["matching"],"on performance":["optimization","of"],"on polymorphic":["compare)."],"on predicate":["methods"],"on prematurely!":["Not"],"on pretty":["shaky"],"on purpose":["as"],"on ranges":["and","and"],"on ranges,":["because"],"on readability/maintainability":["and"],"on regex's":["too"],"on regular":["expressions"],"on repeatedly":["calling"],"on section":["2.6.7"],"on singalong":["instead"],"on some":["elixir-y","more.","other","occasions,"],"on string":["contents"],"on stuff":["that","that"],"on style:":["did"],"on substrings":["at"],"on tail":["recursion"],"on testing":["that"],"on that":["you","comment?","and","or","one.","particular","turned","to","page","site.","way.","would",":)","one"],"on that,":["too,"],"on that.":["Don't","I"],"on the":["next","Enum.to_list.","function","kind","numbers","implementation","abstractions.","fence.","match/2","family","parameter","things","string.","actual","other","elixir-lang","other","\"message\"","creation","left","right","standard","result","arguments","list.","Erlang","readability","last","new","simple","simple","`silence?`","content.","line","`silence?/1`","`reduce/3`","same","line","right","wall,","wall.\\n\"","wall.\\n\"","wall.","wall,","\u003ccode\u003ehey\u003c/code\u003e","last","public","shorthand.","right","order","beginning","other","list","elixir","other","wall,","wall.\\n\"","wall,","wall.\\n\"","wall,","wall.\\n\"","left","right?","eyes.","codepoints","naming","current","`hey`","right","larger","result.","one-liners.","input","code","whole","front.","most","feedback","number","code","input","line","corner","list","length","LinkedIn","first","matter","lines","actual","defensive.","defensive","next","[elixir","Bob","subject","C","eyes.","number","end","order","fence","`sequence`","subject","first","exercise","character","language","Haskell","site","case","suggestions","list.","record","first","end","same","head","submitted","ruby","result","`input`","strict","overall","front","suggestions","append","right","last","last","implementation","feedback,","website","site","shortening,","other","tail","other","other","right","`case`","website.","Test","top","nose."],"on their":["own","tastes"],"on these":["things,"],"on this":["one","web","topic?","whole","refactor","site","code","one","and","one","or","with","and","page","one.","one","one.","iteration","submission...se","webpage..."],"on this,":["the","so"],"on this.":["(see"],"on this.\"":["Basically,"],"on this:":["I've"],"on those":["another"],"on to":["the","a","try","the","the","complete"],"on top":[":-)","of"],"on trying":["to"],"on type":["errors","of"],"on using":["the","`Enum.filter_map`","that"],"on vacation.":["Sorry!"],"on what":["you","good","in","it","they","you","you","you","exactly"],"on when":["you"],"on whether":["or","predicate","to","someone"],"on which":["iteration"],"on why":["you","they"],"on with":["all","the"],"on words,":["not"],"on your":["way!","Regex.","last","feedback.","previous","declarative","first","first","function","suggestions.","reaction.","next"],"on! I":["think"],"on, I":["wouldn't"],"on, but":["this"],"on, we":["start"],"on. :thumbsup:":["from"],"on. I'll":["do"],"on. That":["has"],"on. These":["are"],"once -":["I'll"],"once I":["learn","had","realized"],"once Katrina":["merges"],"once a":["consensus"],"once again,":["you"],"once and":["still"],"once as":["well,"],"once before":["the"],"once but":["it"],"once for":["the","the","the","every","each","the","retrieving","each","every"],"once here.":["Maybe"],"once in":["my","the","`new`?","`match`","the"],"once inline":["and"],"once inside":["of","the"],"once instead":["of","of","of","of"],"once it's":["done.","been"],"once more":["in"],"once more,":["for"],"once per":["item","term,"],"once the":["reader"],"once to":["create"],"once which":["I"],"once while":["not"],"once with":["`HashDict.new/2`"],"once without":["sacrificing"],"once you":["learn","are"],"once you've":["String.stripped","completed"],"once, and":["I'm"],"once, at":["the"],"once, but":["still","the"],"once, or":["doing"],"once, so":["you're"],"once, then":["in"],"once. I":["think"],"once. Still,":["I"],"one \"Fine.":["Be"],"one (it":["makes"],"one (not":["using"],"one I":["like","could"],"one I'd":["just"],"one Regex":["?"],"one _going":["through"],"one `cond`,":["instead"],"one after":["the"],"one alphabetical":["character"],"one and":["re-submit.","set"],"one another?":["So"],"one anyway...":[";)"],"one append":["version"],"one argument":["__info__"],"one argument.":["(see"],"one because":["the","it","@jacinto"],"one before":["posting"],"one better,":["because"],"one bit":["of"],"one boolean":["expression"],"one by":["providing"],"one byte":["in"],"one call":["rather"],"one case":["in"],"one character":["in"],"one check":["rather"],"one clause":["works","with","per"],"one condition":["you're"],"one cycle":["can"],"one digit,":["so"],"one do":["you"],"one doesn't":["offset"],"one down":["and","and"],"one element,":["the","I"],"one every":["iteration."],"one exercise":["at","where"],"one expecting":["`@judd`","anything"],"one expression":["inside"],"one fell":["swoop.","swoop"],"one filter?":["That"],"one final":["style"],"one flat":["list"],"one for":["that","approval,","nil","non-nil?","`anagram?`","anagram","is","everything","me","the"],"one function":["called","to"],"one glance\"":["perspective"],"one good":["enough."],"one grapheme).":["Not"],"one guard":["for"],"one has":["to","the"],"one he/she":["will"],"one here:":["https://github.com/elixir-lang/elixir/blob/master/lib/mix/lib/mix/deps.ex#L371"],"one implementation":["says"],"one in":["do_hey_question?","question/1.","`list`","terms","the","particular."],"one is":["best?","in","needed?","done!","interesting","more","better.","used.","that","verbose,","faster"],"one it":["is"],"one language":["may"],"one last":["thing:","thing,","tweak"],"one less":["method","line"],"one letter":["then","names","names","names","and"],"one letter.":["Maybe"],"one level":["deep.","from"],"one like":["so:"],"one lime":["change."],"one line":["function","if",":-)","version",",","-","of","like"],"one line,":["I","it's"],"one line.":["I"],"one liner.":["Other"],"one liners":["for","as"],"one little":["tip","thing:","thing.","thing."],"one looked":["the"],"one may":["argue"],"one method.":["I","Maybe"],"one minor":["nit","nit:","improvement"],"one more":["definition","`bottles`","revision.","assignment.","revision","minor","in"],"one more,":["with"],"one much":["simpler","better."],"one nit":["worth"],"one now":[";)"],"one of":["the","which","the","these,","them","your","the","the","the","the","these","those","previous","the","the","them","the","the","the","those"],"one on":["line","line","hey"],"one or":["two","two","more","both","more"],"one other":["function."],"one parameter":["however."],"one parameter?":["I"],"one part":["of","of"],"one pass":["using"],"one place":["and","to","in"],"one place?":["There's"],"one point":[",","but"],"one process":["per"],"one reads":["better?"],"one really":["nitpicky"],"one regular":["expression","expression"],"one related":["\"thought\""],"one returned":["by"],"one says":["\u003ccode\u003equestion?\u003c/code\u003e"],"one seems":["simple.","a"],"one should":["have"],"one single":["silence?()"],"one spec":["that"],"one step":["further","of","from"],"one step;":["that"],"one style":["improvement"],"one suggestion:":["have"],"one takes":["a"],"one tear":["one's"],"one test,":["but"],"one that":["handles","I","uses","actually","only"],"one thing":["that","that",",",","],"one thing!":["Very"],"one thing.":["I"],"one thing:":["There"],"one time":["check","interrogation","at"],"one to":["String.ends_with?/2,","the"],"one took":["me","longer"],"one up":["as"],"one upcase":["character"],"one uppercase":["letter","character."],"one was":["going","the"],"one way":["you"],"one when":["is","same","is"],"one where":["`letter`"],"one which":["uses"],"one who":["made"],"one without":["sacrificing"],"one word":["by"],"one works,":["but"],"one would":["be","match"],"one yourself":["using"],"one's clean":["and"],"one's done,":["in"],"one's hair)":["both"],"one) and":["it's"],"one), but":["I"],"one, I":["think","spent"],"one, I'm":["inclined"],"one, and":["then","then"],"one, but":["only","I'm","avoided"],"one, currently.":["However,"],"one, it":["would"],"one, on":["line"],"one, since":["I"],"one, then":["just"],"one, yes.":["On"],"one-line `,":["do:`"],"one-line change":["seems"],"one-liner by":["enclosing"],"one-liner functions":["for"],"one-liner functions,":["but"],"one-liner is":["probably","probably"],"one-liner otherwise":["great"],"one-liner syntax.":["This"],"one-liner, or":["if"],"one-liner, which":["makes"],"one-liner. You":["should"],"one-liners and":["to"],"one-liners in":["my"],"one-liners is":["fine."],"one-liners to":["multi-liners,"],"one-liners. Also":["one"],"one-liners. And":["if"],"one-liners. For":["````silence?````"],"one-offs like":["I"],"one-upped you":["in"],"one. A":["duplicated"],"one. Also,":["I"],"one. Any":["idea"],"one. Can":["I"],"one. Crazy,":["right?"],"one. I":["am","took","like","really","figured","think","think","missed"],"one. I'll":["add"],"one. Is":["there"],"one. It’s":["a"],"one. Thanks":["as"],"one. That":["doesn't","is"],"one. The":["code","idea"],"one. This":["was"],"one. What":["do","do"],"one. `:gen_event.start_link/1`":["exists"],"one... `match_word`":["feels"],"one... or":["click"],"one.Perhaps with":["another"],"one? (Hint:":["cond"],"one_or_it(_), do:":["\"it\""],"one_or_it(n) when":["n"],"ones I've":["described"],"ones do":["not"],"ones either.":["Any"],"ones into":["single"],"ones last":["just"],"ones prefixed":["with"],"ones to":["decide","keep"],"ones without":["guard"],"ones), I'd":["actually"],"ones, do":["you"],"ones, since":["you"],"ones. I'm":["pretty"],"ones. In":["this","other"],"ones? I":["already"],"only 'understand'":["speech"],"only I'm":["```String.strip```-ing"],"only ```Strings```":["or"],"only `hey`":["needs"],"only a":["few","question","single","proper","single","limited","single","single","very","small","few"],"only about":["2","2"],"only add":["students"],"only allowed":["characters"],"only as":["food"],"only because":["I","those"],"only by":["names)","a"],"only call":["`HashDict`","it"],"only called":["from"],"only calling":["`frequencies`?"],"only changes":["when"],"only check":["if"],"only checked":["for"],"only come":["up"],"only comment":["would"],"only concerned":["with"],"only concerns":["itself","itself"],"only consider":["words"],"only contain":["unicode"],"only contained":["numbers"],"only containing":["whitespace."],"only conversation,":["which"],"only difference":["is"],"only do":["this","that"],"only does":["one"],"only duplication":["which"],"only ever":["skimmed"],"only expected":["to"],"only extract":["the"],"only for":["very","internal","the"],"only from":["few"],"only generated":["in"],"only gets":["computed","cleaned","passed","cleaned","cleaned","cleaned","cleaned"],"only getting":["the"],"only goes":["so"],"only going":["to"],"only got":["one"],"only had":["9"],"only has":["one","one","to","a","a"],"only have":["a","one","one"],"only helps":["for"],"only hint":["you're"],"only if":["you","benchmarking"],"only improvement":["I'd"],"only in":["feedback","feedback","Haskell"],"only involves":["base"],"only iterates":["over"],"only knows":["of"],"only languages":["where"],"only leave":["them"],"only letters,":["it's"],"only limited":["list","precision."],"only literally":["what"],"only macros":["that"],"only makes":["sense"],"only match":["one","lowercase"],"only matters":["for"],"only mean":["upcase"],"only meaning":["of"],"only means":["you"],"only methods":["that"],"only minor":["nitpick"],"only moderators":["can"],"only need":["to","an","one","one"],"only needed":["in","for"],"only needs":["to"],"only nit":["is","I"],"only nitpick":["would"],"only non-unicode-letter-class":["graphemes."],"only numbers.":["Since"],"only once,":["but"],"only one":["function.","is","implementation","that","place","suggestion:","element,","time","element,","\"Fine.","thing:"],"only other":["comment","thing","thing","thing","comment","thing","functions","thing","nitpick","thing,"],"only perfectly":["fine"],"only pick":["what"],"only place":["where"],"only possible":["for"],"only public":["interface"],"only purpose":["is"],"only question":["I"],"only really":["needed"],"only reason":["I","to","for"],"only require":["solving"],"only required":["in"],"only requires":["working","working"],"only serve":["`Teenager.hey`?"],"only single":["line"],"only sort":["the","the","the","the","the","the","the"],"only sorted":["and"],"only sorting":["the"],"only sorts":["the"],"only standard":["functions"],"only strip":["out"],"only succeed":["if"],"only suggestion":["would"],"only takes":["a"],"only testing":["the"],"only that":["condition"],"only the":["upcase","upcase","parts","elements","dialyzer","numeral","letters."],"only then":["do"],"only there":["for"],"only thing":["about","that","that","I'd","I","that","I","that's","I","you","I"],"only thought":["would","on"],"only three":["elements."],"only time":["I"],"only tiny":["nitpick"],"only tiny-tiny":["problem"],"only took":["a","9"],"only try":["to"],"only update":["from"],"only use":["the","the","one","it"],"only used":["by","in","once.","two"],"only using":["pipe"],"only valid":["input"],"only visible":["outside"],"only way":["to","I"],"only where":["it"],"only whitespace":["as"],"only whitespace.":["So"],"only words":["."],"only works":["for","on","because"],"only would":["be"],"only zipping":["2"],"only: [silent?:":["1,"],"only_operators: true`":["and"],"onto a":["single"],"onto head,":["then"],"onward are":["of"],"oops, not":["finished,"],"opaque. I":["have","settled"],"open for":["submissions."],"open source.":["It"],"open to":["ideas","unintentional/unexpected","suggestions.","exploring","receiving"],"open with":["the"],"opener to":["the"],"opening up":["the"],"openly acknowledged":["that"],"opens up":["all"],"operands are":["of"],"operate on":["double","empty","those."],"operation (and":["you're"],"operation a":["nice"],"operation at":["the"],"operation broken":["out"],"operation doesn't":["have"],"operation in":["the"],"operation keeps":["the"],"operation of":["`Range`"],"operation on":["a"],"operation should":["be"],"operation to":["turn","its"],"operation, so":["I"],"operation1 |\u003e":["operation2`)"],"operation2`) would":["be"],"operations (\"what's":["at"],"operations (filter":["and"],"operations are":["complex,"],"operations done":["to"],"operations in":["total."],"operations into":["a"],"operations involving":["lists."],"operations starts":["to"],"operations together":["would"],"operations would":["need"],"operations, and":["are"],"operations, which":["is"],"operations? For":["example"],"operator (":["`|&gt;`","|\u003e","|\u003e"],"operator (`&`)":["is","explicitly:"],"operator (````|\u003e````)":["to"],"operator (i.e.":["not"],"operator (which":["is"],"operator ```|\u003e```":["introduces"],"operator `sentence":["|&gt;"],"operator `|&gt;`,":["that"],"operator `|&gt;`?":["That"],"operator `|\u003e`":[","],"operator `|\u003e`.":["This"],"operator a":["bit"],"operator and":["the","make"],"operator as":["a"],"operator because":["is"],"operator call,":["but"],"operator can":["help"],"operator does":["make"],"operator for":["question?\".","the","```silence?```","a"],"operator in":["elixir?","your","code","my","other"],"operator inline":["to"],"operator instead":["of"],"operator is":["a","in","more","sort","deprecated).","fun","`&Kernel.+/2`."],"operator only":["goes"],"operator rather":["than","than"],"operator reads":["more"],"operator so":["that"],"operator that":["I"],"operator the":["same"],"operator thing":["to"],"operator to":["the","use","a"],"operator was":["a"],"operator which":["would"],"operator would":["help"],"operator you":["can"],"operator( `|\u003e`)":["and"],"operator) on":["anything"],"operator, I":["agree"],"operator, absolute":["genius."],"operator, one":["for"],"operator, that":["might"],"operator. (Check":["the"],"operator. But":["having"],"operator. Each":["line"],"operator. Even":["so,"],"operator. It":["would"],"operator. That":["is","is"],"operator. That's":["next."],"operator: String.split(&amp;1,":["sigil_r(&gt;,"],"operator? I":["think"],"operator](http://elixir-lang.org/docs/master/Kernel.html#|&gt;/2) `|&gt;`,":["and"],"operator` trick,":["it"],"operators at":["the"],"operators though,":["it"],"opinion a":["single"],"opinion about":["wether"],"opinion and":["then"],"opinion as":["facts."],"opinion on":["whether","the","that."],"opinion that":["encapsulation"],"opinion, so...":["onward!"],"opinion, that":["is"],"opinion, this":["exercise"],"opinion, you":["could"],"opinion. I'll":["switch"],"opinion. See":["next"],"opinions -":["to"],"opinions on":["what"],"opportunities of":["using"],"opportunity to":["explain","use","dig","practice","explain","explain","explain"],"opposed to":["the","`:empty`.","something","just","something","having","0.10","something"],"opposite comment":["from"],"opposite sides":["of"],"ops using":["it."],"opt for":["a"],"opted for":["handling","simplicity."],"opted not":["to"],"opted to":["go","have","sort"],"optimal (and":["not"],"optimal calls.":["However,"],"optimal performance,":["I"],"optimal solution":["in"],"optimised as":["the","I"],"optimization I":["need"],"optimization called":["the"],"optimization on":["that"],"optimization only":["getting","if"],"optimization which":["should"],"optimization\" because":["it"],"optimization, but":["I"],"optimization. If":["the"],"optimization. Nitpicking":["if"],"optimization. So,":["while"],"optimization: you":["could"],"optimizations for":["pattern"],"optimizations, but":["I'm"],"optimize by":["storing"],"optimize my":["algorithms"],"optimize that":["unused"],"optimize this":["thing"],"optimized code":["for"],"optimized for":["it."],"optimized to":["do"],"optimized well":["beyond"],"optimized. If":["you"],"optimizing for":["comprehension."],"option (/u)":["for"],"option here":["but"],"option is":["out","not"],"option of":["using"],"option since":["the"],"option there!":["I"],"option to":["Regex.match?","`start_link`"],"optional) thing:":["if"],"options for":["conditional"],"options to":["sort"],"or \"":["What?"],"or \"\"":["depending"],"or \"Child\"":["module"],"or \"else\".":["The"],"or \"is_question\"?":["When"],"or \"potential\",":["but"],"or \"silence?\".":["One"],"or (Q":["and","and"],"or 1":["or"],"or 5.":["(Ignore"],"or =~":["operator."],"or Enum.reduce":["instead"],"or Haskell,":["I"],"or I":["just"],"or Language":["might"],"or ListDict":["implementation"],"or Message.is_question?(msg)":["?"],"or README":["associated"],"or [cond](http://elixir-lang.org/docs/stable/Kernel.html#cond/1)":["instead"],"or `%r{\\w+}`.":["I"],"or `&amp;(sorted_base_letters":["=="],"or `&foo(&1)`":["that's"],"or `:question`":["and"],"or `Enum.blank?/1`":["similar"],"or `Enum.filter`":["list"],"or `Enum.reduce(0..999999,":["0,"],"or `Enum.reduce`":["instead"],"or `Stream.filter":["|\u003e"],"or `Stream`":["functions."],"or `String.ends_with?`":["methods?"],"or `String.replace(number,%r/(...)(...)(....)/,\"(\\\\1)":["\\\\2-\\\\3\").`"],"or `String.strip(greeting)":["|\u003e"],"or `[roman":["|"],"or `\\P`":["or"],"or ```":[":whatever","List#foldl",":whatever"],"or `blah?`":["without"],"or `case`":["because"],"or `cond`":["in"],"or `def":["func(nil)`"],"or `dictionary`":["would"],"or `do_numerals`":["or"],"or `filter`.":["The"],"or `function":["M.f/a`"],"or `is_silence?`":["makes"],"or `n`":["instead"],"or `nil`":["to","(`if`"],"or `null`\"":["could"],"or `potential_anagrams`":["would"],"or `pred`)":["or"],"or `reject`,":["because"],"or `something?`":["but"],"or `symphony`":["would"],"or `|\u003e":["Enum.map(&hd/1)`"],"or a":["separate","single","question.","pattern","local","calculated","space).","`Stream.map`","reduce","couple"],"or algorithmic":["improvements.","improvements."],"or am":["I"],"or an":["array."],"or anything":["like"],"or are":["there","they"],"or asking?":["Let"],"or at":["least","least","least","least"],"or both":["of"],"or both?":["I"],"or case":["expressions."],"or check":["out"],"or clear":["to"],"or click":["on"],"or code.":["How"],"or commented":["out"],"or comparing":["to"],"or cond.":["It's"],"or conditional":["statements"],"or considered":["using"],"or could":["you"],"or counts,":["maybe."],"or create":["a"],"or deprecation":["warnings."],"or digit.":["It's"],"or do":["they","you"],"or do_*":["for"],"or documentation,":["there"],"or does":["he","the"],"or doing":["more"],"or don't":["need"],"or double":["character"],"or eliminate":["one"],"or else":["using"],"or enumerators":["for"],"or even":["inlining","O(n)","passed"],"or expressiveness":["overall,"],"or false":["respectively"],"or falsy":["result."],"or for":["generic"],"or functional":["programming"],"or generally":["not"],"or harder":["to"],"or have":["a"],"or helpful?":["Do"],"or how":["does","it","they","to"],"or hurts":["readability"],"or ideas.":["Also"],"or if":["those","I","that","I","the","you","the","the","you"],"or imports":["or"],"or in":["Elixir"],"or indeed":["instance"],"or is":["there","it","that","it","it","it"],"or just":["produce","use","a","`list`"],"or last":["element"],"or later:":["`Enum.map_join"],"or less":["readable","readable","verbose","based"],"or lots":["of"],"or makes":["it"],"or maybe":["the"],"or metaprogramming.":["You"],"or missing":["letter"],"or more":["intention","pockets","occurrences,","likely","`x`.","\"word\"","\"word\"","word","expressive"],"or move":["it","you","on."],"or multiple":["simple"],"or n":["into"],"or nil,":["but"],"or nitpicked":["if"],"or no?":["True"],"or not":["simultaneously,","you","two","I","though...","yet.","to","two","at","is",":)"],"or not,":["but","can"],"or not.":["Could","I'm"],"or not?":["Yes","I"],"or on":["another"],"or other":["Dict","languages."],"or pattern":["matches","matching"],"or perhaps":["algebra,"],"or piping":["tuples"],"or pointers":["would"],"or pre":["prefixed"],"or pre-processing":["method."],"or private,":["clearly"],"or question":["inputs,"],"or really":["desirable","desirable","part"],"or redesign":["things"],"or reduce":["here","instead","that?"],"or removing":["them."],"or repeatedly":["in"],"or sequences":["seems"],"or should":["it","be"],"or simply":["prefix","sorting"],"or single":["letter"],"or so":["it","there."],"or so.":["Given"],"or some":["other"],"or somebody":["else"],"or something":["like","less","more","that","else?","like","else","like","like"],"or something,":["but"],"or speech":["=="],"or split":["on"],"or stick":["with"],"or syntax":["in"],"or the":["features","standard","like.","results","standard","tests","first","5","non-syntactic-sugar","[elixir-lang-talk](https://groups.google.com/forum/?fromgroups#!forum/elixir-lang-talk)","accumulator.","emptiness"],"or to":["just"],"or too":["clever."],"or true.":["I"],"or try":["out."],"or two":["of","places."],"or uniting":["all"],"or use":["`Regex.scan`","`end`.","foldr","`guards`"],"or using":["`||`","a"],"or variables,":["not"],"or vice-versa":["in"],"or what":["language","the"],"or whatever":["for"],"or whatever.":["If"],"or where":["the","they"],"or words":["and"],"or worse":["than"],"or would":["you"],"or writing":["folds."],"or you":["could","could","just","will","can"],"or you'll":["move"],"or), not":["sure"],"or, translated":["into"],"or: `P":["or"],"or: d":["+"],"ord('c') in":["Python"],"order (or":["to"],"order dependent":["and"],"order dependent.":["Thanks!"],"order function":["like"],"order functions":["like","like","(like","like"],"order functions.":["`fn(x)","I"],"order in":["the","the","which","the","which"],"order instead":["of"],"order is":["significant?"],"order it":["would"],"order made":["a"],"order mattered":["in"],"order of":["splitting","least","some","the","conditionals.","conditions","fn's","declaration","function","the","the","\"cond\"","the","keys"],"order so":["I"],"order than":["reduce"],"order that":["`|&gt;`","names"],"order they're":["given."],"order to":["understand","learn","gain","eliminate","allow"],"order you're":["doing"],"order, and":["I"],"order, so":["if"],"order, which":["feels"],"order. In":["other"],"order? It":["seems"],"ordered, so":["maybe"],"ordering because":["I"],"ordering does":["seem"],"ordering of":["the"],"orders of":["magnitude","magnitude","magnitude"],"ordinals. `\"é\"`":["works"],"organized and":["submit"],"organizing Elixir":["code"],"original anagram":["makes"],"original casing.":["I"],"original code":["was"],"original collection":["from"],"original comment,":["you"],"original exercises":["were"],"original function":["and"],"original implementation":["before"],"original key":["to"],"original tests":["it"],"original tests,":["those"],"original version.":["If"],"original was":["all"],"original, but":["once"],"original. Thanks":["for"],"originally after":["the"],"originally but":["the"],"originally considered":["function"],"originally did":["`min_by`","an"],"originally had":["`Enum.reverse","a"],"originally included":["the"],"originally ported":["this"],"originally written":["the"],"originals and":["the"],"other Dict":["functions."],"other Elixir":["idioms,"],"other Enum":["functionality"],"other `Enum`":["functions)"],"other alternatives":["to"],"other alternatives,":["so"],"other and":["not"],"other anonymous":["function?","function"],"other approach":["is"],"other basic":["tools"],"other beverage":["types,","types?","types."],"other bit":["of"],"other branches.":["In"],"other case":["of"],"other challenges":["that"],"other checks/functions":["as"],"other command-line":["command"],"other comment":["is,","is"],"other commenter":["about"],"other comments":["that"],"other comments.":["I"],"other concern":["is"],"other conditions":["as"],"other data":["types"],"other datatypes.":["Not"],"other for":["update","`same_word?`","not"],"other frequencies":["to"],"other function":["names.","names."],"other functions":["at","in"],"other functions.":["It"],"other hand":[",","it's","is","only","only"],"other hand,":["you'd","taken"],"other implementations":["of"],"other in":["a"],"other interesting":["string"],"other issues":["but","left?"],"other issues,":["more"],"other kind":["of"],"other kinds":["of"],"other language":["that","I","besides"],"other languages":["on","as","require","with"],"other languages,":["namely","like","so"],"other languages.":["\u003c\u003c\u003e\u003e"],"other message":["interrogation"],"other method":["to","(`question`)"],"other methods":["that","by"],"other module":["I'd"],"other modules":["is"],"other modules.":["So,","(Forgive"],"other more":["specific"],"other name":["would"],"other nitpick":["is"],"other nitpicks":["that"],"other non":["alpha"],"other not-so-meaningful":["variable"],"other one,":["I"],"other ones,":["do"],"other operators":["though,"],"other parameters":["to"],"other parts":["of","of"],"other people":["have","answers"],"other people's":["code","comments","\"bob\""],"other people.":["You"],"other places":["use"],"other private":["methods"],"other process.":["However,"],"other refers":["to"],"other regexes":["can","can"],"other side":["to"],"other similar":["approach"],"other solutions":["I"],"other submissions":["that"],"other submissions.":["I'm"],"other suggestions":["and","and"],"other than":["\"this","that,","a","that,","the","explicitly","that,","letters,","a","just","those","letters"],"other that":["check"],"other then":["that,"],"other there's":["only"],"other thing":["I","is","to","I","I","I"],"other thing,":["you","which"],"other things":["I","you","as"],"other things.":["I"],"other times":["I"],"other tracks.":[":)"],"other two":["fn"],"other types":["of","of"],"other version":["of"],"other very":["well."],"other way":["does","to","to","to","or","to","to","except"],"other way,":["and"],"other ways":["to","to","to","of"],"other when":["is"],"other words":["you","you","`cond`","unlike"],"other words,":["you","`Dict.get`","what"],"other works":["for"],"other would":["be"],"other, but":["in"],"others (blank,":["string)."],"others I've":["dealt"],"others is":["only"],"others to":["use","match."],"others where":["the"],"others, but":["I"],"others. I":["understand"],"otherwise I":["had","don't"],"otherwise `&`":["would"],"otherwise be":["parsed"],"otherwise great":["job!"],"otherwise it":["looks","would"],"otherwise looks":["great"],"otherwise the":["parser"],"otherwise this":["looks","looks"],"otherwise, I":["don't"],"ought to":["be,"],"our application's":["needs"],"our natural":["notion"],"our own":["way,"],"our subject":["could"],"out .ends_with":["and"],"out \u003ccode\u003eEnum.map_join/3\u003c/code\u003e":["for"],"out \u003ccode\u003eHasDict.update/4\u003c/code\u003e":["and"],"out \u003ccode\u003eHashDict.update/4\u003c/code\u003e":["Might","-"],"out \u003ccode\u003eList.foldl/3\u003c/code\u003e":["and","and"],"out \u003ccode\u003eString.upcase/1\u003c/code\u003e":["and"],"out \u003ccode\u003econd\u003c/code\u003e.":["Pattern"],"out \u003ccode\u003eguards\u003c/code\u003e":["here"],"out \u003ccode\u003eguards\u003c/code\u003e)":["for"],"out @rudolph's":["implementation."],"out ASCII":["numbers"],"out Enum.reduce":["and"],"out SentenceRecognizer":["into"],"out `Dict.merge/3`":["--"],"out `Dict.merge/3`.":["It"],"out `Dict.update/4`,":["you"],"out `Enum.map_join/3`":["for"],"out `Enum.map_join`,":["I"],"out `Enum.map_join`?":["Seems"],"out `HashDict.update/4`":["here.","here."],"out `HashDict.update`.":["It'll"],"out `List.zip/1`":["here"],"out `Regex.scan/2`":["here,"],"out `Regex.scan`":["--"],"out `cond`":["on","--"],"out `v0.10.0`":["from","from"],"out a":["way","\"clean\"","nice","name","bit"],"out about":["getting","my"],"out actual":["function"],"out all":["characters"],"out also":["`Enum.count/2`","`String.codepoints/1`"],"out and":["see","submitted","is"],"out anything":["not"],"out as":["something","it"],"out at":["me."],"out because":["I"],"out being":["much"],"out combining":["the"],"out common":["code"],"out doing":["the"],"out elixir!":[";-)"],"out for":["the","your","arbitrary","practice."],"out functions":["like"],"out guard":["clauses"],"out here.":["Thanks"],"out how":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","I","to","to","to","to","to","else","to","to","to","your","your","to","to","to"],"out how!":[":)"],"out how...and":["I'm"],"out how/if":["there"],"out http://elixir-lang.org/docs/stable/":["for"],"out http://elixir-lang.org/getting_started/2.html":["section"],"out http://rubular.com/":["because"],"out implementations":["for"],"out importing":["Statement"],"out in":["bob_test.exs.","the","this","full,"],"out incremental":["pieces"],"out into":["a","module","a","private","private","a","a","separate","small","a","a","a"],"out is":["that","in","in"],"out iteration":["2"],"out like":["that"],"out more":["readable."],"out not":["to"],"out now.":[":)"],"out numbers":["and"],"out of":["the","consistency.","nitpicks","the","my","discussing","something","`count`","a","the","it!","place.","the","the","your","curiosity,","function","\"for_iter\"","memory"],"out of,":["so"],"out on":["this","some","the"],"out over":["a"],"out pattern":["matching"],"out problems,":["such"],"out quickly":["enough"],"out red,":["now"],"out so":["simple."],"out some":["of"],"out strings,":["and"],"out stuff":["I"],"out tests":["here."],"out that":["```message","the","`shouting?`","Dict.get/3","the","as","GenServer","i","it's","is"],"out the":["`cond`","logic","various","tests,","purpose","implementation","pattern","window.","`[]`","`|&gt;`","new","memoization","[string","`filter`/`exclude_similar`/`different?`","less-than","two","downcase/codepoints/sort","conditions","docs","tests","areas","pipeline","different","separate","sort","year-on-planet-relative-to-earth","source","list","nil","syntax","conditionals","common","code.","specific"],"out there":["for","for","are","is"],"out they":["came."],"out things":["like"],"out this":["@america"],"out those":["things","transformation","internal"],"out to":["me","be","functions","be","`scan`,","`flatten`.","a","a","a","a","separate","me","the","Erlang","be","be","a","me","me","a","me"],"out two":["minor","issues"],"out what":["it's","your","is","private","you"],"out when":["I"],"out which":["function","items"],"out why...":["maybe"],"out with":["Elixir.","an","the","exercism"],"out without":["getting"],"out your":["idea.","suggestion"],"out! I":["noticed"],"out!\" is":["the"],"out!\". Is":["there"],"out\", according":["to"],"out, Elixir/Erlang":["and"],"out, but":["between"],"out, how":["to"],"out, so":["I'm"],"out, though,":["it's","and"],"out, which":["one"],"out--the tests":["are"],"out. But":["yeah,"],"out. First":["time"],"out. Fixed":["in"],"out. I":["think","went","guess","can"],"out. I've":["broken"],"out. Plus":["I'm"],"out. So":["far"],"out. The":["type"],"outer function,":["but"],"outer parens":["in"],"outer parens:":["`&String.from_char_list!(&1)`."],"output after":["`String.downcase`"],"output decision":["was"],"output does":["not"],"output from":["```","the","`Regex.scan`."],"output functions.":["They're"],"output into":["the"],"output of":["the","`Regex.scan/2`","the","`Enum.flat_map`"],"output strings":["instead"],"output without":["flattening:"],"output, having":["a"],"output, or":["use"],"output. Is":["there"],"output. The":["final"],"outside code":["to"],"outside does":["not"],"outside of":["`Teenager`?","`hey/1`.","reduce.","an","a"],"outside quote\"":["-"],"outside the":["class,","`hey`","brackets","module","module","A-Z"],"outside this":["module.","module"],"outward from":["there."],"outweigh the":["ones"],"over 80":["characters"],"over `HashDict.merge`.":["I"],"over `HashDict.update/4`.":["Everything"],"over `List.foldl`":["as"],"over `List.foldl`,":["and"],"over `List.foldr`":["(?)."],"over `append`":["in"],"over `if`":["`else`,"],"over `replace`":["intentionally"],"over `set_word(&amp;1,":["&amp;2)`"],"over a":["String.","single","mixed","collection,","lunch"],"over again":["for"],"over and":["over","over","over","over"],"over apply":["concepts"],"over build":["it."],"over directly":["from"],"over every":["element"],"over explicit":["recursion."],"over filter.":["I'll"],"over flat_map":["and"],"over functions":["in"],"over guard":["clauses"],"over having":["the"],"over it":["and"],"over it,":["as"],"over lists,":["at"],"over multiple":["lines"],"over my":["work!","habit"],"over ranges":["like"],"over that":["blog","one."],"over the":["list","top","set","`?`","builtin","mass","collection","lists","strand","cond","values","collections","lists","`@ettie`","higher","list.","list."],"over them":["to"],"over thinking":["it"],"over true,":["that"],"over using":["flat_map"],"over whether":["to"],"over-interpreted the":["exercise,"],"over-used here.":["There"],"overall 0.":["I"],"overall approach":["is"],"overall performance":["doesn't"],"overall repetition":["level)."],"overall, though,":["with"],"overall. A":["couple"],"overallocation it's":["still"],"overboard on":["methods"],"overcomplicate things.":["You"],"overcomplicated, I":["think."],"overcomplicates things":["a"],"overcomplicating things.":["The"],"overcomplicating this.":["Should"],"overflow at":["some","some","some","some","some"],"overflow exception":["has","on"],"overflow for":["very"],"overflow in":["Erlang/Elixir"],"overflow, right?":["Perhaps"],"overflows (I":["tried),"],"overgeneralized to":["me."],"overhead both":["for"],"overhead it":["doesn't"],"overhead of":["a","a","HashDicts"],"overhead. I":["think"],"overkill and":["you","the"],"overkill for":["this","the","this"],"overkill in":["the"],"overkill looking":["at"],"overkill since":["it","you"],"overkill to":["me.","separate"],"overkill. I":["honestly"],"overkill; using":["cond"],"overkill? The":["`cond`"],"overlap between":["`count`"],"overloading, I":["would"],"overly complicated,":["so"],"overly picky,":["but","but","but"],"overly picky.":["On"],"overly terse.":["My"],"overpowered for":["this"],"overrwrite file":["without"],"overthink exercises":["like"],"overwriting it":["with"],"own (defp":["question?(phrase),"],"own benefit":[":)"],"own code.":["This"],"own enumerable":["implementation."],"own explicit":["step"],"own function,":["since"],"own functions":["for","to","to"],"own implementation":["with"],"own in":["the","a"],"own interest.":["In"],"own line,":["or"],"own method.":["Don't"],"own methods.":["E.g.:"],"own module":["attributes","and"],"own named":["functions","functions,","method,","methods,","functions"],"own power":["function"],"own private":["function,","functions?","function","function,","functions."],"own quick":["one"],"own submission":["for"],"own thing,":["and"],"own thus":["separating"],"own to":["eliminate"],"own top-level":["status."],"own way,":["but"],"own. I":["also"],"own. The":["difference"],"p.p.s. Code":["looks"],"p.s. I":["am"],"p.s. but":["seriously"],"packed set":["of"],"pad with":["nil."],"pad, I":["was"],"padded with":["`nil`s."],"padding behavior":["of"],"padding with":["nils."],"page (unfortunately":["there's"],"page and":["copy"],"page in":["the"],"page it":["seems"],"page of":["the"],"page, and":["they"],"pain to":["come"],"painful memory),":["but"],"pair of":["one-liners"],"pair's value?":["I've"],"pair, but":["an"],"pair_up and":["count_mismatches"],"pairs (`{key,":["value}`"],"pairs basically,":["I"],"pairs between":["two"],"pairs in":["one"],"pairs where":["the"],"pairs will":["shrink"],"pairs, and":["2)"],"palatable to":["have"],"palindrome? but":["I"],"paradigm having":["very"],"paradigms pay":["off."],"parallel structure":["to"],"parallel stuff,":["sadly."],"parallel version":["takes"],"parallelism (much)":["later"],"parallelize the":["normalization"],"param anyway.":[":)"],"param if":["you"],"param inside":["Enum.reduce."],"param of":["Regex.scan","reduce.","the"],"param was":["which."],"param, which":["caused"],"parameter (forgive":["me"],"parameter -":["could","could","could"],"parameter \u003ccode\u003es\u003c/code\u003e":["doesn´t"],"parameter also":["seems"],"parameter and":["returns"],"parameter could":["have"],"parameter doesn't":["contain"],"parameter for":["#anagram_for?","Enum.reduce."],"parameter in":["your","a"],"parameter is":["what"],"parameter list":["I","and"],"parameter name":["than"],"parameter names":["to"],"parameter of":["the"],"parameter passed":["to"],"parameter position":["numbers."],"parameter to":["match","`shouting?`?","`hey`","the","\"match\""],"parameter, just":["that"],"parameter, maybe":["something"],"parameter, then":["you"],"parameter. I'm":["new"],"parameter. There":["is"],"parameter? I":["mean,"],"parameters (after":["the"],"parameters 3":["and"],"parameters already":["lowercased"],"parameters are":["used."],"parameters aren't":["in"],"parameters in":["his","the"],"parameters mean.":["But"],"parameters needed":["for"],"parameters of":["the"],"parameters that":["are"],"parameters to":["the","`match`","the"],"parameters was":["possible,"],"parameters. I":["have"],"parameters. Not":["having"],"parameters. `h`":["instead"],"params \"word,":["word\""],"params and":["changed"],"params around":["so"],"params in":["the"],"params rather":["than"],"params to":["`add`,"],"params! (`first_sentence(0)`":["vs"],"params, would":["saying"],"params. How":["can"],"params. I'm":["sure"],"paraphrasing Dave":["Thomas"],"pareil en":["effet"],"paremeters \u003ccode\u003ea,a\u003c/code\u003e":["and"],"parenless stuff":["is"],"parens are":["only","only"],"parens aren't":["a"],"parens around":["arguments","arguments","`String.downcase`,","the","the"],"parens do":["nothing"],"parens for":["`Regex.replace/3`"],"parens from":["how"],"parens in":["functions","Elixir","elixir.","if"],"parens may":["be"],"parens on":["your","line"],"parens with":["`defmodule`"],"parens, so":["it"],"parent, grandparent,":["etc"],"parentheses ,":["i"],"parentheses also":["makes"],"parentheses although":["they're"],"parentheses and":["without"],"parentheses are":["not","only"],"parentheses around":["the","arguments","function","function","the","function","function","function","`HashDict.new`"],"parentheses but":["had"],"parentheses by":["default"],"parentheses except":["sometimes"],"parentheses explicitly,":["for"],"parentheses for":["all","all","the","function","readability."],"parentheses in":["functions","function","`def`","the","function","everywhere"],"parentheses is":["that"],"parentheses omitted":["in"],"parentheses should":["be"],"parentheses to":["avoid","make"],"parentheses were":["used"],"parentheses when":["using"],"parentheses with":["`String.strip`"],"parentheses you":["might","have"],"parentheses! I've":["been"],"parentheses, at":["least"],"parentheses, but":["then"],"parentheses, there's":["a"],"parentheses. For":["example:"],"parentheses. Having":["said"],"parentheses. In":["Elixir,"],"parentheses. The":["omission"],"parenthesis aren't":["all"],"parenthesis hell":["can"],"parenthesis in":["`match/2`."],"parenthesis on":["line"],"parenthesis that's":["why"],"parenthesis when":["defining"],"parenthesises where":["it"],"paretheses -":["I"],"parse and":["fill"],"parse any":["code."],"parse as":["a"],"parse for":["other"],"parse the":["nesting","regex","phone"],"parse time":["to"],"parse |\u003e":["count"],"parsed as":["`Enum.map_join","`&&","`(&"],"parsed by":["a"],"parser gets":["confused,"],"parses as":["`a","`f"],"parsing concerns,":["and"],"part about":["this"],"part as":["you're"],"part because":["it"],"part between":["\"def\"/\"defp\""],"part in":["parentheses","why"],"part of":["conversation","your","the","the","where","the","it.","Elixir","my","the","the","the","the","the","the","the","the","a","the","this","the","`nucleotide_counts`","this","the","a","the","the","this","the"],"part took":["me"],"part was":["partitioning","the"],"part, and/or":["a"],"part. I":["think"],"part. It":["doesn't"],"partial application":["syntax:","syntax,","or","to"],"partial function":["names."],"partially a":["matter"],"partially applied":["functions","function"],"partially applying":["multiple"],"particular binary":["digit"],"particular case":["I'd","(\"für\")","I'd","it's"],"particular dict":["implementation."],"particular example":["btw,"],"particular instance":["of"],"particular instance.":["I"],"particular invariant":["(namely"],"particular is":["very"],"particular need":["for"],"particular order.":["In"],"particular order?":["It"],"particular reason":["why","to","you","for","for","you"],"particular solution":["and"],"particular technique,":["but"],"particular tests,":["the"],"particular the":["\"concat"],"particular there's":["nothing"],"particular? Sentence,":["Phrase,"],"particularly clear.":["Did"],"particularly curious":["about"],"particularly expressive":["variable"],"particularly hard...I":["think"],"particularly intention":["revealing.","revealing"],"particularly interesting":["about"],"particularly like":["the","the","the"],"particularly nasty":["input"],"particularly pretty,":["true."],"particularly the":["`different?`"],"particularly well-suited":["to"],"partition function.":["I"],"partition method":["is"],"partitioning the":["list"],"parts and":["pattern","is"],"parts into":["separate"],"parts of":["the","the","a","the"],"parts that":["you","have"],"parts to":["a"],"parts you":["want."],"parts. Before":["it"],"pas cette":["convention,"],"pass `\"":["\"`"],"pass `String.downcase(string)`":["to"],"pass a":["named","function","name","list","reference"],"pass all":["the","tests,","of","the","the","the","the","the","the"],"pass an":["appropriate"],"pass arguments.":["Sometimes"],"pass at":["it.","this"],"pass both":["the"],"pass but":["I"],"pass characters":["\u003e127"],"pass data":["around"],"pass eventually,":["it"],"pass for":["you?"],"pass function":["as"],"pass in":["\u003ccode\u003en-1\u003c/code\u003e","&amp;1","the","function","a","a"],"pass into":["the"],"pass it":["the","in","in","around,","around,","the","around,","around,","around.","into","without"],"pass on":["this"],"pass one":["test,"],"pass really":["pays"],"pass reducing_function":["directly"],"pass some":["of"],"pass test":["of"],"pass tests,":["and"],"pass that":["sorted","test.","test,"],"pass the":["same","the","function","function","`what`","tests","generated","source","`/u`","tests.","pid","tests?","same","filter.","tests.","test","tests.","tests.","test"],"pass them":["into"],"pass things":["to"],"pass through":["it"],"pass to":["Dict.","List.flatten...","get"],"pass using":["`HashDict.update`."],"pass without":["it?","it?"],"pass! Do":["we"],"pass, I":["think"],"pass, and":["you've","I"],"pass, but":["perhaps","it"],"pass, so":["the"],"pass. (In":["Ruby,"],"pass. Passes":["the"],"pass. The":["fancy"],"pass.) I":["just"],"pass: you":["create"],"pass; checking":["for"],"pass? Consider":["instead"],"pass? Hints:":["`Enum.reduce`,"],"passable and":["start"],"passed \"":["\""],"passed `Enum`":["to"],"passed a":["list."],"passed as":["the","the"],"passed back":["unchanged."],"passed directly":["to"],"passed for":["me."],"passed in":["as","as","the","`nil`."],"passed into":["the"],"passed them":["in"],"passed they'll":["quickly"],"passed to":["hey","the","`count/1`.","a","the","`HashDict.update`","it,","it,","it.","it.","`Enum.filter`.","`Enum.reduce`","it.","it,","the","it"],"passes all":["tests.","tests,","tests,"],"passes fine.":["Not"],"passes in":["a"],"passes it":["to"],"passes the":["tests","test.","tests,"],"passes to":["get"],"passes used":["regexes"],"passim). Why":["are"],"passing 2":["versions"],"passing `nil`":["to"],"passing a":["partially","range","default"],"passing hoping":["for"],"passing in":["the"],"passing it":["into","in"],"passing mind":["you!"],"passing that":["test,"],"passing the":["body","`+`","test"],"passing to":["`filter`","the"],"passing. I'll":["do"],"past but":["they"],"past is":["to"],"past the":["first"],"past, but":["not"],"paste from":["docs,"],"paste it":["in","from"],"paste with":["reduce."],"pasted nitpicks":["actually."],"patch for":["a"],"patch to":["clean"],"patching very":["short"],"path with":["the"],"patter, so":["that's"],"pattern I'm":["already"],"pattern and":["there"],"pattern could":["same"],"pattern for":["function"],"pattern in":["the","my"],"pattern is":["reducing"],"pattern match":["too","that?","another","on","on","on","against","into","an","version","on","that","one","when","to","for","as","for","to","in","on","on","over"],"pattern matched":["version","portions","version"],"pattern matches":["instead","in","for","for"],"pattern matching":["on","for","on","in","based.","version","but","that","however","strings","lets","in","in","=)","for","for","to","a","to","on","like","works.","here","is",":","on","(things","on","that","with","feels","stuff","was","to","on","is","for","and","instead","on","in","with","on","anonymous","for","with","on","in","to","to","to","to","where","limitations.","instead","over","inside","and","directly","in","with","in","for","so","directly","directly","but","and","and","for","is","as","with","in","here,","in","too,","is","for","in","for","for","the","is","for","it's","in","in","and","if","because","and","in","is","by","doesn't","doesn't","(with","a","(or","by","on","setup.","here.","that","with","to","in","with"],"pattern matching)":["comes"],"pattern matching,":["it","Luke","so","I","awesome","but","but"],"pattern matching.":[":-D","Could","Overall","`cond`","This","This","Any","You","Maybe","One","For","Also","Sure,","Looking"],"pattern matching/destructuring":["for"],"pattern matching?":["As",";)","Now","It"],"pattern of":["a"],"pattern or":["if"],"pattern that":["would"],"pattern to":["indicate"],"pattern you":["use."],"pattern your":["code"],"pattern-match for":["\"for\";"],"pattern-match in":["`count_word/2`"],"pattern-matching based":["approach"],"pattern-matching on":["atoms"],"pattern-matching purity,":["although"],"pattern-matching versions":["of"],"pattern-matching, since":["that's"],"pattern. For":["example"],"pattern. I":["will"],"pattern. You":["could","can"],"pattern...accumulating a":["list"],"patterns and":["idiom"],"patterns of":["arguments,"],"pay off.":[";)"],"pays off":["when"],"peak at":["your"],"peek of":["the"],"peeking at":["the"],"penalty, it":["should"],"people active":["on"],"people actively":["advocate"],"people already":["do"],"people answers":["or"],"people are":["saying","sorting"],"people away":["from"],"people come":["up"],"people discuss":["sometimes"],"people do":["it","that","wrong","wrong"],"people doing":["that"],"people don't":["love","know","mind"],"people generally":["use"],"people have":["completed"],"people like":["to","plain"],"people look":["outside"],"people on":["the","the"],"people put":["the"],"people say":["to"],"people seemed":["to"],"people specify":["the"],"people that":["do"],"people think":["about","it","those","about","this"],"people to":["a","explore","use"],"people try":["to"],"people up,":["try"],"people use":["a","`reduce`,"],"people want":["to"],"people who":["look"],"people will":["understand","recognise"],"people would":["implement","define"],"people's \"bob\"":["submissions."],"people's code":["yet"],"people's comments":["and"],"people. You":["could"],"per @cecelia's":["suggestion."],"per indentation":["level.","level,"],"per item":["in"],"per say,":["but"],"per se,":["but"],"per template":["marker."],"per term,":["but"],"per your":["suggestion.","suggestions."],"perfect documentation":[":)"],"perfect sense":["to"],"perfect solution":["for"],"perfect, and":["I"],"perfect, but":["the"],"perfect, can":["you"],"perfect. I":["have"],"perfect. The":["only"],"perfectly and":["is"],"perfectly fine":["to","but"],"perfectly happy":["with","about","with"],"perfectly legal,":["but"],"perfectly lovely":["way"],"perfectly normal":["words"],"perfectly possible":["to"],"perfectly reasonable":["`something"],"perfectly sensible":["as"],"perfectly well":["with"],"perform as":["well"],"perform on":["the"],"perform that":["control"],"perform the":["same","same"],"perform well":["enough."],"performance benefit":["or","in","to"],"performance benefits":["to"],"performance by":["forcing"],"performance difference,":["you"],"performance doesn't":["improve"],"performance gain":["without"],"performance here.":["The"],"performance improvement":["over","you"],"performance increase":["for"],"performance mentality.":["Which"],"performance of":["intersection"],"performance optimization":["only"],"performance optimizations,":["but"],"performance penalty,":["it"],"performance problem":["given","given"],"performance profile.":["I"],"performance should":["be"],"performance slightly":["in"],"performance stuff":["will"],"performance that":["much."],"performance when":["you"],"performance wise,":["since"],"performance) document":["the"],"performance, I":["could"],"performance, since":["it"],"performance-optimization hairiness":["to"],"performance. Erlang":["has"],"performance. I":["like"],"performance. The":["wrapper"],"performing a":["one"],"performing any":["necessary"],"performing complex":["operations,"],"performing this":["task."],"performs a":["completely"],"performs downcasing":["and"],"perhaps I":["missed"],"perhaps I'll":["warm"],"perhaps algebra,":["though"],"perhaps an":["is_empty?"],"perhaps better),":["and"],"perhaps if":["you"],"perhaps it":["makes"],"perhaps it's":["the"],"perhaps sentence":["for"],"perhaps side-effecting,":["next"],"perhaps since":["the"],"perhaps that":["won't"],"perhaps the":["name"],"perhaps they've":["changed)."],"perhaps using":["macros/guards"],"perhaps why":["I"],"perhaps you":["had"],"perhaps, but":["I"],"perhaps... though":["that's"],"perl days":["and"],"permanently joined.":["Should"],"persisted to":["the"],"person pushed":["back"],"person speaking":["is"],"person use":["it?"],"person with":["a"],"person's solution":["in"],"personal aesthetic":["preference"],"personal preference":["I","for","thing.","though."],"personal preference,":["just"],"personal preferences,":["easily"],"personal rule":["for"],"personal style":["though."],"personal style,":["admittedly"],"personal taste":["matter."],"personally find":["the","value"],"personally like":["it","it","the"],"personally prefer":["single","to","to"],"personally tested":["this,"],"personally think":["first"],"personally try":["to"],"personally use":["a"],"personally. It":["separates"],"perspective I'd":["have"],"perspective `Enum.filter`":["is"],"perspective as":["well."],"perspective of":["types)"],"perspective on":["most"],"perspective this":["is"],"pervasively in":["the"],"peu près":["la"],"phone )instead":["of"],"phone ::":["[binary,"],"phone number":["with",",","would","so","and","which","if"],"phone number...":["it's"],"phone numbers":["we"],"phone numbers.":["The"],"phone_pattern, unformatted`":["is"],"phrase and":["comparing"],"phrase into":["separate","separate","words","words"],"phrase is":["a"],"phrase isn't":["a"],"phrase rather":["than"],"phrase than":["Regex."],"phrase to":["functions"],"phrase where":["zero"],"phrase |\u003e":["downcase"],"phrase), do:":["true"],"phrase, extract":["the"],"phrase, prompt,":["sentence."],"phrase-to-words transformation":["is"],"phrase. Hint:":["you"],"phrase. I've":["never"],"phrase. That":["is"],"phrase. The":["entire"],"phrases defined":["in"],"phrases seemed":["like"],"phrases that":["only"],"phrases. What":["do"],"pick any":["nits"],"pick in":["this"],"pick nits,":["though,"],"pick on,":["but"],"pick one,":["I'm"],"pick the":["correct"],"pick what":["I"],"picked it":["up"],"picked the":["lazy"],"picked up":["the","from"],"picking up":["the","the"],"picky on":["my"],"picky, but":["the","I","to","`blank?`"],"picky. I":["like"],"picky. On":["to"],"picture, there's":["definitely"],"pictured the":["process"],"pid around":["for"],"pid to":["the"],"piece of":["Elixir","documentation.","code).","information"],"piece them":["together."],"pieces before":["a"],"pieces of":["it"],"pieces possible,":["rather"],"pieces that":["need"],"pieces, but":["I'm"],"pieces. I":["would"],"pieces? I":["think"],"piecing together":["first/second_line"],"pipe case":[":\\"],"pipe convention":["is"],"pipe either":["\"No"],"pipe forward":["operator","operator"],"pipe here":["and","for"],"pipe in":["this"],"pipe into":["Enum.reduce?"],"pipe into,":["e.g."],"pipe is":["just"],"pipe it":["into"],"pipe on":["L23"],"pipe operator":["so","rather","because","is","the","(`|\u003e`).","(which"],"pipe operator.":["Even"],"pipe sends":["the"],"pipe would":["get"],"pipe-rocket syntax":["is"],"pipe: `String.strip(str)":["|&gt;"],"piped into":["#respond.","#response,"],"piped it":["to"],"piped seems":["weird"],"piped to":["reverse"],"pipeline (`something":["|\u003e"],"pipeline (`|\u003e`)":["shape"],"pipeline (a":["small"],"pipeline (collection":["|\u003e"],"pipeline (|\u003e)":["into"],"pipeline actually,":["instead"],"pipeline and":["separate"],"pipeline as":["the","the"],"pipeline at":["the"],"pipeline before":["`tokenize`,","it"],"pipeline by":["performing"],"pipeline communicates":["better"],"pipeline expressions":["if"],"pipeline feeds":["into"],"pipeline for":["predicates.","a"],"pipeline in":["count","count/1.","count."],"pipeline into":["one","the"],"pipeline is":["a","fine,"],"pipeline it":["in."],"pipeline massaging":["string"],"pipeline might":["be","definitely"],"pipeline of":["transformations."],"pipeline on":["line"],"pipeline operator":["```|\u003e```","for","does","(","and","and","reads","is","`sentence","`|&gt;`.","`|&gt;`?","only","for","`|&gt;`,","which","you","would",";)","`|\u003e`.","(````|\u003e````)","was","(````|\u003e````).","is"],"pipeline operator(":["`|\u003e`)"],"pipeline operator,":["one","I"],"pipeline operator?":["I"],"pipeline result":["in"],"pipeline something":["that"],"pipeline tell":["its"],"pipeline the":["Enum.map"],"pipeline then":["split."],"pipeline to":["un-nest"],"pipeline you":["might"],"pipeline |&gt;":["operator:"],"pipeline |\u003e":["operator"],"pipeline, hopefully":["it"],"pipeline, you":["can"],"pipeline. I":["think","thought"],"pipeline. I'll":["be"],"pipeline. What":["do"],"pipeline? I":["think"],"pipeline? Is":["it"],"pipelines and":["parentheses,"],"pipelines are":["available","also"],"pipelines at":["the"],"pipelines is":["a"],"pipelines on":["a"],"pipelines to":["compose"],"pipelines via":["|&gt;,"],"pipelines whenever":["you"],"pipelines, so":["that's"],"pipelines. Same":["for"],"pipelining and":["then"],"pipelining rather":["than"],"pipelining useful":["in"],"pipelining, which":["I"],"pipelining? It's":["where"],"pipes are":["used"],"pipes or":["a"],"pipes when":["using"],"pipes, of":["course"],"pipes. They":["make"],"pipes. What":["do"],"piping a":["range"],"piping could":["enhance"],"piping in":["count(),","count.","count(),"],"piping the":["results","output"],"piping tuples":["automatically"],"piping, if":["they"],"piqued my":["interest."],"pitfall of":["non-tail-recursive"],"pitfall you'll":["probably"],"pitfall? Is":["it"],"pitfalls (no":["tail","tail"],"pitty ,is":["a"],"place I":["can"],"place `|`":["in"],"place and":["has","does","is"],"place for":["that","it,"],"place in":["this"],"place of":["String.graphemes."],"place the":["`is_foo`","module","`do:`"],"place they're":["used."],"place to":["sort","change","urge"],"place where":["I"],"place. Do":["you"],"place. I":["thought"],"place. Perhaps":["if"],"place? There's":["a"],"placed first,":["or"],"placeholder for":["each"],"placeholder syntax":["isn't"],"places and":["you're"],"places in":["your","the","different"],"places to":["update","update."],"places use":["`do`"],"places where":["it"],"places would":["you","you","you"],"places, so":["that"],"places. Thanks":["to"],"plain 'exercism":["fetch'"],"plain English":["better"],"plain if.":["Did"],"plain method":["calls?"],"plain the":["mapping"],"plain ways":["of"],"plan to":["come"],"plane, or":["perhaps"],"planning on":["using"],"plans to":["expand"],"play around":["with"],"play with":["the","implicit","pattern","this","this","alternatives"],"played around":["with"],"played with":["those","the","already.","map_join.","it"],"playing around":["I","more"],"playing with":["that,","processes"],"pleasantly surprised":["that","to"],"please do":["enlighten"],"please don't":["be"],"please expand":["on"],"please explain":["this"],"please give":["me"],"please just":["go"],"please nitpick":["the"],"please put":["`do`"],"please teach":["me"],"please tell":["me!"],"please, ignore":["it."],"pleased to":["finally"],"pleased with":["this","my"],"plenty more":["of"],"plenty of":["readability"],"pling(_), do:":["\"\""],"pling(n) when":["rem(n,"],"plural function":["that"],"plus a":["single","catchall"],"plus d'expressivité,":["voir"],"plus lack":["of"],"plus one":["when"],"plus the":["underscore."],"plus_one(number), do:":["number"],"pminten can":["explain"],"pminten for":["the"],"pminten's help":["I"],"pminten, String.to_char_list!":["is"],"pminten, the":["swapped"],"pminten. I":["was"],"pminten: good":["point"],"pockets of":["numbers"],"podcast I've":["heard"],"podcast that":["you"],"point ,":["I","the","you","when"],"point -":["haven't"],"point :)":["Whitespace"],"point I":["think"],"point I'm":["trying"],"point a":["code"],"point about":["the","the","the","`def`.","`to_list`"],"point and":["in"],"point anyway.":["I"],"point but":["I","I"],"point concerning":["making"],"point doesn't":["make"],"point for":["splitting"],"point in":["dealing"],"point is":["about"],"point it":["out"],"point it's":["a","about"],"point me":["in","in","to"],"point of":["the","extracting","`n_bottles`","the","having","accessing","using","the","the","exercism","the"],"point on":["the","the","the","iolist_to_binary."],"point out":["is","that","two","that","two","problems,"],"point out,":["though,"],"point thanks":["for"],"point that":["uppercase","out."],"point the":["HashDict"],"point this":["out."],"point to":["have"],"point until":["I"],"point where":["readability"],"point you":["to","can"],"point! I":["thought"],"point! I'll":["have"],"point! So":["far"],"point! Thanks":[":)","for"],"point! Updated":["here"],"point, I":["think","do"],"point, `Enum`":["isn't"],"point, although":["it"],"point, and":["I'd"],"point, but":["I'd","do","I"],"point, dont":["overcomplicate"],"point, even":["though"],"point, functions":["it"],"point, got":["carried"],"point, it'll":["be"],"point, thanks!":["I"],"point, the":["code","current"],"point, yeah,":["I"],"point-free programming":["with"],"point. Even":["in","in","in","in","in"],"point. I":["thought","didn't","will","will","hadn't","will","went"],"point. I'll":["see"],"point. I've":["submitted","moved"],"point. In":["my"],"point. It":["sort"],"point. Remaining":["to"],"point. To":["be"],"point. Updated":["in"],"point: The":["includes_letters?"],"point: `String.ends_with?`":["is"],"point: in":["Elixir"],"point: it's":["pretty"],"pointed out":["to","to","that","that","to","to"],"pointed out--the":["tests"],"pointed to":["will"],"pointer to":["String.ends_with?,"],"pointer, new":["version"],"pointer. Got":["me"],"pointers are":["happily"],"pointers from":["the"],"pointers or":["ideas."],"pointers without":["fearing"],"pointers would":["be"],"pointers', as":["you"],"pointers, I":["found"],"pointing me":["to"],"pointing out":["the"],"pointing that":["out.","out!","out.","out."],"pointing the":["anonymous"],"points (strings":["are"],"points ,":["your"],"points /":["lists"],"points @jackson":["and"],"points are":["all"],"points as":["usual,"],"points encoded":["in"],"points guys,":["thanks!"],"points if":["you"],"points to":["considerer..."],"points you've":["found"],"points! In":["order"],"points) and":["`\"\"`"],"points, and":["that"],"points, thanks":["for"],"points. However":["there"],"points. I":["ported"],"points. Yes,":["it"],"points: what":["if"],"policy of":["not"],"policy towards":["imports"],"polymorphism which":["isn't"],"popular convention":["though."],"port of":["how"],"ported over":["my"],"ported this":["from","exercise"],"portions of":["the"],"ports of":["the"],"posible inputs":["for"],"position numbers.":["For"],"position without":["using"],"positive (i.e.":["focused"],"positive test":["than"],"positives if":["there"],"posix bracket":["expressions."],"possibility is":["to"],"possibility. Can":["you"],"possibility. Here's":["what"],"possible (e.g.":["when"],"possible I":["think"],"possible alternative":["in"],"possible anagram":["in"],"possible anagram.":["This"],"possible btw":["to"],"possible by":["creating"],"possible code":["would"],"possible due":["to"],"possible for":["the","exercises"],"possible in":["idiomatic"],"possible meanings":["of"],"possible problems":["in"],"possible solution":["instead"],"possible that":["this"],"possible to":["make","do","avoid","obtain","remove","infer","DRY","DRY","use","do","define","define","accomplish","do","do","define","split","pass","complete","get","define","remove","write","be"],"possible values":["isn't"],"possible while":["still","trying"],"possible you":["could"],"possible! I'm":["finding"],"possible! Usually":["a"],"possible, but":["that"],"possible, it":["works"],"possible, only":["a"],"possible, or":["piping"],"possible, rather":["than"],"possible, so":["every"],"possible, though":["probably"],"possible, which":["is"],"possible. But":["I"],"possible. If":["we"],"possible. Its":["like"],"possible. The":["smaller"],"possible. There":["is"],"possible. `Dict`":["functions"],"possible...I'd just":["like"],"possible_anagrams |&gt;":["Enum.filter(fn(word2)"],"possibly abbreviated":["(descrs"],"possibly be":["ambiguous"],"possibly in":["order"],"possibly multiple":["(separated"],"possibly pull":["out"],"possibly slightly":["slower"],"possibly useful":["number-letter"],"post about":["it](http://pminten.github.io/blog/2013/09/05/elixirs-enumerable/)."],"post an":["intermediate","issue"],"post of":["yours."],"post on":["it?"],"posted this":["in"],"posted this.":["I"],"posting the":["first"],"potential anagram.":["If"],"potential area":["for"],"potential divisor":["in"],"potential for":["bugs."],"potential means":["of"],"potentially a":["few"],"potentially also":["benefit"],"potentially expensive.":["Maybe"],"potentially matching":["words"],"potentially reduce":["the"],"potentially run":["`Enum.count(a)`"],"pound sign":["is"],"pound-signs only":["would"],"pour plus":["d'expressivité,"],"power function":["because","when"],"power of,":["but"],"power, and":["I"],"powerful (and":["fun)"],"powerful and":["often"],"powerful as":["list"],"powerful but":["they"],"powerful machine...":[";)"],"powerful that":["we"],"powerful tool":["than"],"powerful, it":["is"],"powerful. Submitting":["one"],"powerful. What":["is"],"powerfull .":["Thanks"],"practical examples":["for..."],"practical explanation":["of"],"practical sense":["it's"],"practical that":["sorting"],"practically how":["I'd"],"practice :-).":["Here's"],"practice in":["the","Elixir"],"practice of":["using"],"practice regular":["expressions"],"practice specifying":["my"],"practice tail-recursion":["as"],"practice to":["assume","import","use"],"practice with":["`@eladio`"],"practice, I":["extracted"],"practice. I":["really"],"practice. I'll":["submit"],"practice? Define":["a"],"practices include":["local"],"practices. Best":["practices"],"pre 0.12.2":["and"],"pre 0.12.2:":["`%r/\\p{L}/u`"],"pre 1.0,":["and"],"pre prefixed":["with"],"pre-pending the":["1st"],"pre-processing in":["private"],"pre-sized appropriately.":["I'd"],"pre-sort the":["anagram"],"precedence clear.":["Your"],"precedence of":["`|\u003e`"],"precedence problem.":["It"],"precedence. Did":["not"],"precedes it)":["and"],"precise method":["to"],"precision floating":["point"],"precision when":["using"],"precomputed so":["it"],"precondition for":["determining"],"precondition is":["due"],"precondition of":["the"],"predicate function":["is","when"],"predicate function.":["Someone"],"predicate functions":[".(is","in","private","was","with","private.",",","need","helped","with"],"predicate functions,":["they"],"predicate method":["you"],"predicate method,":["so"],"predicate method.":["I"],"predicate method/function":["that"],"predicate methods":["in","maybe","to","are","as","(methods"],"predicate methods,":["I"],"predicate methods.":["Are"],"predicate, sacrificing":["readability."],"predicates (functions":["that"],"predicates (reminds":["me"],"predicates could":["also"],"predicates depending":["on"],"predicates read":["a"],"predicates typically":["have"],"predicates without":["the"],"predicates, keeping":["separate"],"predicates. Rather":["than"],"predicates. Therefore":["I"],"predicates. You":["know"],"predict that":["you"],"predictable when":["it's"],"preface it":["with"],"prefer `&mutation?/1`":["to"],"prefer `String.scan(%r/\\w+/)":["|&gt;"],"prefer about":["the"],"prefer always":["the"],"prefer between":["the"],"prefer built":["in"],"prefer having":["the"],"prefer named":["private"],"prefer names":["from"],"prefer pattern":["matching"],"prefer recursion":["to"],"prefer regex":["myself."],"prefer single":["inline"],"prefer that":["the"],"prefer the":["explicit,","private","extended","true","`is_`","Ruby","erlang","guarded","modules"],"prefer this":["ordering"],"prefer to":["see","rearrange","use","compare","not","use","use","make","see","use","reduce","use","extract","write","use"],"prefer using":["`import`"],"prefer) is":["that"],"prefer. At":["this"],"prefer? Do":["you"],"preferable in":["Elixir"],"preferable to":["use","use","call"],"preferably pattern":["matching)"],"preference I":["think."],"preference again)":["as"],"preference for":["the"],"preference might":["be"],"preference on":["this"],"preference would":["be"],"preference, just":["wanted"],"preferences, easily":["learned"],"preferred for":["both"],"preferred if":["it"],"preferred multiline":["method"],"preferred over":["the","`List.foldl`","explicit"],"preferred style":["is"],"preferred to":["using","use","do"],"preferred way":["of"],"preferred ways":["of"],"preferred, in":["general."],"preferred. I":["understand"],"preferred. So,":["I"],"prefers 2":["spaces"],"prefers in":["that"],"prefix \"do_\"":["help"],"prefix `is_`":["and","in"],"prefix from":["your"],"prefix in":["this","my"],"prefix is":["more","only","probably","preferred"],"prefix it":["with"],"prefix on":["all"],"prefix seeing":["as"],"prefix the":["calls.","module"],"prefix them":["with"],"prefix though":["since"],"prefix to":["method","method"],"prefix when":["the","the"],"prefix your":["#contains,"],"prefix. So":["`silence?`"],"prefixed private":["functions"],"prefixed with":["is.","`is_`.","`is_`.","an"],"prefixes and":["suffixes)"],"prefixes are":["superfluous."],"prefixing with":["\"is\""],"prematurely! Not":["sure"],"prepend `_`":["to"],"prepend it":["and"],"prepend the":["methods"],"prepending (which":["is","is"],"prepending an":["underscore."],"prepending the":["element?"],"preprocessing step":["(for"],"presence of":["heredoc","letters,","some"],"present in":["the","the"],"present no":["challenge."],"present twice":["in"],"present when":["I"],"presented. I":["started"],"presents itself":["as"],"preserve order":["so"],"presses of":["snooze","the","snooze"],"presume for":["the"],"presumptions about":["the"],"prettier if":["`String`"],"prettier when":["combined"],"prettier with":["Dict.update."],"pretty arbitrary":["requirement"],"pretty awesome":["too."],"pretty clear":["as"],"pretty close":["to","to"],"pretty common":["to","in","for","to","pattern."],"pretty content":["with"],"pretty cool":["implementation,","and","way"],"pretty cool.":["Pretty"],"pretty dang":["good"],"pretty darn":["good"],"pretty deeply":["nested"],"pretty depends":["on"],"pretty easily":["lead"],"pretty easy":["to","to","to"],"pretty expressive":["as"],"pretty few":["moving"],"pretty fiendish":["one,"],"pretty geeked":["out"],"pretty general":["purpose"],"pretty generic":["and"],"pretty good":["idea","already","for","to","but,","to"],"pretty good!":["What","The"],"pretty good,":["but","there"],"pretty good.":["Is","`cond`","I","Just","Interesting","Just","The","A","One","A","There","You've","One","What","There's"],"pretty happy":["with"],"pretty hard":["to","to"],"pretty limited.":["You"],"pretty literal":["conversion"],"pretty long,":["but","so"],"pretty much":["the","solid","identical","do","any","completely","the","always","always","always","the","a","everyone","required","never"],"pretty natural":["to"],"pretty neat.":["I"],"pretty new":["to","to","to"],"pretty nice":["in"],"pretty nice.":["Does","Just"],"pretty opaque.":["I"],"pretty powerful":["machine..."],"pretty print":["nicer"],"pretty printed":["as"],"pretty quickly,":["and"],"pretty rare":["to","because"],"pretty readable":["using"],"pretty self":["describing"],"pretty shaky":["ground"],"pretty simple":["and","way"],"pretty stand-alone":["responsibility."],"pretty straightforward":["and"],"pretty succinct,":["and"],"pretty succinct.":["A"],"pretty sure":["this","the","I'll"],"pretty sure_":["this"],"pretty surprised":["by"],"pretty sweet.":["Sorting"],"pretty uncommon":["in","in"],"pretty well":["on"],"pretty well.":["I"],"pretty, do":["they..."],"pretty, true.":["An"],"pretty. As":["you"],"prevalent as":["you"],"prevent `shouting?\\1`":["from"],"prevent the":["issue?","infinite"],"prevents the":["most"],"previous (word_count)":["exercise."],"previous `Enum.map_filter`":["into"],"previous comment,":["the"],"previous conditions":["match"],"previous debate":["on"],"previous exercise":["I"],"previous exercise,":["but"],"previous feedback":["I"],"previous iteration":["I","better,"],"previous iteration,":["guess"],"previous iteration;":["I"],"previous line":["as","as"],"previous nit":["is"],"previous nit,":["elixir"],"previous nitpickers":["may"],"previous one,":["currently.","but"],"previous one.":["Thanks"],"previous revision":["and"],"previous revision,":["I"],"previous submission":["for"],"previous submission,":["where"],"previous submission:":["the"],"previous suggestion":["of"],"previous version":["said","is","where"],"previous version,":["and"],"previous version.":["He"],"previous versions":["i"],"previous versions,":["as"],"previous, which":["do"],"previously unaware":["of"],"previously. Also":["good"],"primarily a":["C#"],"primarily since":["Elixir"],"primarily to":["handle_keywords,"],"prime and":["may"],"prime factors":["and"],"prime for":["it."],"prime, so":["you"],"prime-factors exercise":["and","three"],"prime_cache appears":["to"],"primes and":["then"],"primes it":["will"],"primitive that":["all"],"prince decides":["to"],"principle in":["Elixir."],"principle. If":["you"],"print nicer":["when"],"printed as":["`1..3`),"],"prior to":["checking.","exercism.io","the"],"priority! If":["you"],"private (`defp`":["instead"],"private (`defp`)":["instead","and","and"],"private (defp),":["but"],"private (you":["define"],"private `defp`":["and","and"],"private a":["good"],"private and":["only"],"private as":["they"],"private attribute":["to"],"private be":["a"],"private building":["blocks"],"private by":["using"],"private check":["function?"],"private clauses.":["What"],"private function":["because","with","would",":)","with","to","with","versus","for","in","clauses","if","(you","don't"],"private function,":["wouldn't","like","but","too.","but"],"private function.":["I","Private"],"private functions":["and","is","with","or","within","in","with","to","so","have","directly","directly","(`defp`)","out","looks","with","to","(or","before.","with","with","in","in","into","always","that","might","with","I","for","to","to","(`defp`)","what","that","and","with","to","which","like"],"private functions\"":["are"],"private functions,":["and"],"private functions.":["I'm","You"],"private functions:":["I","the"],"private functions?":["Also,","Within"],"private helper":["functions","methods,","function","function"],"private helpers.":["What"],"private implementation":["name","and"],"private method":["and","names?","and"],"private method,":["much"],"private method.":["And"],"private methods":["with","that","inside","with","into","with","one","at","to","after","do","with","could","to","it","to","so","down","into","is","take"],"private methods,":["you"],"private methods.":["After","You","And"],"private methods.And":["the"],"private module":["property","attributes","function.","function"],"private modules":["properties."],"private named":["function.","function,"],"private ones":["last"],"private predicate":["methods"],"private to":["the","the"],"private using":["[defp](http://elixir-lang.org/docs/stable/Kernel.html#defp/2).","`defp`"],"private you":["can","can"],"private, and":["I"],"private, but":["had"],"private, clearly":["a"],"private, the":["only"],"private. And":["while"],"private. I":["need"],"private. You":["can"],"private? I":["also"],"private? Maybe":["it's"],"private? Otherwise":["looks"],"private? Some":["of"],"privates, so":["thanks"],"privatize them":["by"],"pro died":["2"],"prob, @paxton.":["I"],"prob. For":["detecting"],"probably 2":["spaces"],"probably YAGNI,":["I'll"],"probably a":["typo","term","style","useless","better","better","bit","deficiency","good"],"probably agree":["with"],"probably also":["do"],"probably as":["good"],"probably be":["on","dropped","separated"],"probably because":["it","you're","I","ranges"],"probably belongs":["in"],"probably best":["there","to","not","to"],"probably better":["to","to","to","to"],"probably break":["down"],"probably choose":["a"],"probably closer":["to"],"probably combine":["it"],"probably consider":["redoing"],"probably do":["a"],"probably done":["something"],"probably drop":["the"],"probably due":["to"],"probably ends":["up"],"probably figure":["out"],"probably get":["away","away","rid"],"probably go":["with","with","with","with"],"probably going":["to"],"probably good":["uses,"],"probably harder":["to"],"probably have":["noticed.","to"],"probably hit":["sooner"],"probably improve":["a"],"probably is,":["yes."],"probably just":["personal","didn't","getting","a"],"probably less":["efficient.","efficient?"],"probably make":["a"],"probably me":["not"],"probably means":["I'm"],"probably missed":["opportunities"],"probably missing":["something"],"probably more":["idiomatic","readable,","*elixir-fu-ninja-stylez*,","useful","importantly,","desirable"],"probably move":["the"],"probably my":["solution"],"probably need":["to"],"probably not":["necessary,","call","aware","around"],"probably overly":["picky,","picky,","picky,"],"probably possible":["to"],"probably put":["the"],"probably re-useability":["(of,"],"probably recommend":["extracting"],"probably redo":["just"],"probably replace":["L12's"],"probably restrict":["it"],"probably right":["about"],"probably separate":["all"],"probably shorten":["to"],"probably slightly":["slower,"],"probably some":["better"],"probably the":["intention","largest","answer,"],"probably thinking":["of"],"probably this":["is"],"probably too":["clever,"],"probably translated":["to"],"probably unnecessary.":["Although"],"probably use":["`String.ends_with?/2`","the","`if"],"probably want":["to","String.graphemes"],"probably will":["give"],"probably work":["well"],"probably would":["put"],"probably write":["`Enum.flat_map(input,"],"probably writing":["elixir"],"probably. Looking":["back"],"problem (unless":["abuse"],"problem --":["just"],"problem I":["might","guess,","assume?","can"],"problem actually":["exists."],"problem and":["hide","not"],"problem as":["something"],"problem at":["hand."],"problem because":["my"],"problem but":["you","because"],"problem description":["as"],"problem doesn't":["appear.Anyway"],"problem for":["me"],"problem given":["a","a"],"problem here":["is"],"problem here,":["you'll"],"problem if":["the"],"problem in":["your"],"problem inlining":["it."],"problem into":["using"],"problem is":["not","that","the"],"problem may":["be"],"problem of":["this","a"],"problem only":["involves"],"problem or":["not"],"problem pretty":["much"],"problem quickly":["reading"],"problem rather":["than"],"problem seemed":["like"],"problem seems":["particularly"],"problem should":["become","become"],"problem solved.":["But"],"problem that":["I","if","`Stream`"],"problem there":["isn't"],"problem using":["idiomatic"],"problem was":["a"],"problem with":["`\\w`","this","this","`\\w`","the","the","newer","doing","this","this.","this"],"problem you":["wanted"],"problem! For":["starters,"],"problem, I":["agree"],"problem, and":["wouldn't"],"problem, but":["strictly"],"problem, e.g.":["Teenager,","it"],"problem, even":["for","for","for","for","for"],"problem, gives":["me"],"problem, not":["at"],"problem. @darion":["Thanks"],"problem. And":["the"],"problem. I'm":["a"],"problem. In":["a","this"],"problem. It":["parses"],"problem. Perhaps":["there"],"problem. The":["`Anagram`","time"],"problem: you":["recompute"],"problematic. Is":["it"],"problems are":["nails"],"problems due":["to"],"problems in":["a"],"problems should":["have"],"problems the":["functional"],"problems with":["hypens","spacing"],"problems, such":["as"],"problems. +1":["for"],"problems/ambiguities they're":["causing."],"process along,":["but"],"process and":["use"],"process dictionary,":["but"],"process due":["to"],"process if":["the"],"process in":["a"],"process instance,":["you"],"process just":["continues"],"process of":["grokking"],"process per":["template"],"process the":["\"\""],"process while":["it"],"process working":["like"],"process, I'm":["just"],"process, but":["that's"],"process, could":["make"],"process, instead":["of"],"process. As":["I"],"process. However,":["with"],"process. The":["client"],"process? i.e.":["to"],"processed_element =":["function.(element)"],"processed_element |":["acc"],"processes crash":["but"],"processes to":["start"],"processes, one":["process"],"processes. Sent":["a"],"processing to":["select"],"processing, I":["really"],"processing. The":["string"],"produce a":["list","function"],"produce and":["discuss"],"produce readable":["code"],"produce the":["correct","\"best\"","count","same","more"],"produces an":["array"],"producing your":["best."],"production code":["--","I"],"production code,":["I'd"],"production if":["you"],"production, consider":["the"],"professor explaining":["it)"],"profile. I":["tried"],"program I've":["ever"],"program ever":["so","in"],"program is":["going"],"program more":["clear?"],"program! Feedback":["appreciated"],"program. I've":["now"],"programmatic way":["to"],"programmer have":["an"],"programmer to":["understand,"],"programmer. RegExes":["don't"],"programmers tend":["to"],"programming I":["don't"],"programming and":["to","list"],"programming enough":["to"],"programming is":["explicitly","hard,"],"programming it'll":["go"],"programming it's":["better"],"programming languages":["there"],"programming term":["or"],"programming terms,":["rather"],"programming though.":["I'm"],"programming use":["of"],"programming with":["Elixir."],"programming world":["as"],"programming* as":["it"],"programming, if":["you"],"programming, so":["I'd","the"],"programs since":["the"],"programs support":["multi-codepoint"],"progressed very":["well."],"project about":["what"],"project having":["an"],"project myself,":["so"],"projecting the":["original"],"projects, and":["has"],"prominent feature":["though."],"promising for":["the"],"promoted the":["change"],"promptings of":["[etrepum](http://exercism.io/etrepum),"],"pronounced \"valley\"":["in"],"proof of":["sorts."],"proper name":["for","for"],"proper response.":["Maybe"],"proper semantics,":["in"],"proper words,":["without"],"properly and":["cheated"],"properly formatted":["?!?"],"properly match":["words"],"properly named":["variable","functions"],"properly use":["a"],"properly, like":["this:"],"properly. Conceptually":["it"],"properly. I":["need"],"properties (`aggressive?`":["and"],"properties of":["the","the"],"properties you're":["interested"],"properties\" syntax":["before."],"properties. I":["think"],"properties? Maybe":["it's","it's"],"property for":["some","readability."],"property testing":["functions"],"property tests":["in"],"property that":["the"],"property, in":["this"],"property. Put":["differently,"],"propose? I":["am"],"protect against":["trailing"],"protecting against":["in"],"protocol String.Chars":["not"],"protocol and":["extension"],"protocol being":["overkill."],"protocol but":["a"],"protocol dispatch)":["but"],"protocol for":["a"],"protocol functions":["are"],"protocol instead":["of"],"protocol is":["valuable."],"protocol mostly":["to"],"protocol so":["there's","there's"],"protocol which":["can"],"protocol with":["multiple"],"protocol wrapper":["Dict.update"],"protocol's interaction":["with"],"protocol, not":["just"],"protocol, so":["all"],"protocol. It's":["not"],"protocol? Interesting,":["but"],"protocols and":["designing"],"protocols are":["useful"],"protocols for":["unit"],"protocols not":["being"],"protocols, or":["enumerators"],"proud of":["only","my"],"proved to":["be"],"proved too":["much"],"provide a":["slightly"],"provide clearly":["named"],"provide example-based":["documentation,"],"provide line":["noise,"],"provide more":["of"],"provide nits).":["This"],"provide one":["of"],"provided by":["the","your"],"provided implicitly":["by"],"provided on":["this"],"provides a":["bit","good","neater"],"provides such":["a"],"provides to":["accomplish"],"providing a":["default","default"],"providing additional":["feedback"],"providing constructive":["criticism."],"proxy for":["how"],"proxy to":["`downcase`."],"près la":["même"],"pseudo-type system!":["In"],"public (`def`)":["instead"],"public (`def`)?":["To"],"public (for":["this"],"public API":["for","a","though."],"public as":["private","private,"],"public but":["instance"],"public function":["that","with"],"public function,":["and"],"public functions":["in","in","first","otherwise."],"public interface":["first,","and","is","of","of"],"public interface.":["Is","Easy","I"],"public interface?":["You"],"public method":["in"],"public method.":["I"],"public methods":["in","unless"],"public one)":["and"],"public ones,":["since"],"public or":["private,"],"public really":["short."],"public sing":["function."],"public. I'll":["usually"],"public? To":["make"],"publicly usable":["function"],"pull a":["roster."],"pull grades":["alphabetically."],"pull out":["those","those"],"pull request":["to","in","accepted.","with","and","that"],"pull request?":["If"],"pull requests.":["It's"],"pull the":["latest","list","roster"],"pull up":["the"],"pull word-count":["back"],"pulled down":["the"],"pulled downcase":["across"],"pulled out":["SentenceRecognizer"],"pulled the":["question","two"],"pulling `update/2`":["out"],"pulling a":["sneek"],"pulling the":["400"],"pun intended)":["two"],"punctuation and":["symbols.","splitting","digits"],"punctuation chars":["rather","then"],"punctuation if":["anyone"],"punctuation in":["one"],"punctuation shouldn't":["split."],"punctuation test.":["As"],"punctuation within":["sentences."],"punctuation, but":["no"],"punctuation, numbers,":["or"],"punctuation, there's":["plenty"],"punctuation, yet":["not"],"punctuation-type characters,":["so"],"punted. But":["I"],"pure pattern-matching":["based"],"pure/side-effect-free so":["it"],"purely pattern":["matching"],"purely recursive":["solution"],"purity, although":["maybe"],"purpose and":["*not*"],"purpose as":["I'm"],"purpose can":["easily"],"purpose function,":["you"],"purpose is":["returning","to","to"],"purpose of":["the","\"_speak\"","the","the","the"],"purposely ignoring":["the"],"purposes of":["this","this","exercism,"],"push back":["just","a"],"push for":["pulling"],"push my":["skills."],"push to":["a"],"pushed a":["new","revision","new"],"pushed an":["update","updated"],"pushed back":["when"],"pushed me":["to"],"pushed the":["kind"],"pushed up":["more"],"pushing new":["strings"],"pushing the":["new"],"put \u003ccode\u003ecount_fnx\u003c/code\u003e":["in"],"put \u003ccode\u003eis_\u003c/code\u003e":["in"],"put `_area_code`":["and"],"put `do`":["and"],"put a":["guard","space","\"?\"","newline","small","question"],"put back":["my"],"put calls":["into"],"put first":["the"],"put in":["`match/2`","a","because","it...","some"],"put into":["concise"],"put it":["in","here.","on","on","this","inline"],"put it,":["I"],"put me":["on","sorting"],"put one.Perhaps":["with"],"put parentheses":["in"],"put people":["on","on"],"put public":["functions"],"put some":["examples"],"put that":["in","```|```"],"put the":["string","public","returns","body","name","intention","pipeline","`|\u003e`","main","attributes","module","86400","`@emilie`","logic","`|\u003e`","`do_foo`","different"],"put them":["everywhere","in"],"put this":["up"],"put those":["into"],"put together":["a"],"puts the":["private"],"putting _":["in"],"putting it":["in"],"putting more":["exact"],"putting parens":["around","around"],"putting private":["functions"],"putting that":["space"],"putting the":["private","pipelines","two","tests","tests","input","contents","`when`"],"putting to":["much"],"quadratic complexity.":["It's"],"quadratic time":["complexity","complexity,","complexity"],"quadratic time.":["I"],"qualified and":["`Enum.map`"],"qualified name":["(e.g."],"qualify functions":["with"],"qualify the":["inspect"],"quality nitpicks":["like"],"qualm with":["\"silence?(param)\""],"quard on":["`nil?(something)`"],"question (ie":["speech"],"question (or":["two)."],"question I":["had.","guess"],"question about":["defining","`(filter"],"question and":["upcase"],"question are":["good"],"question as":["well."],"question better.":["`Regex.run/1`"],"question by":["looking"],"question check,":["but"],"question for":["the","the","the"],"question from":["ages"],"question inputs,":["THEN"],"question is":["a","moot"],"question is,":["what"],"question keep":["anyone"],"question like":["\"Hey"],"question mark":["could","at","gets","to","rather","such","on","to","(a","(most","style,","syntax","or","to","like","is","at"],"question mark,":["such","like","or"],"question mark.":["Other","Doesn't","I'm"],"question mark:":["is_shouting?"],"question marks":["as","are","in"],"question of":["whether"],"question regarding":["doctests,"],"question then":["\"Sure\"\""],"question though,":["I'm"],"question was":["a"],"question with":["\"Sure.\"."],"question) seem":["to"],"question, I":["was"],"question, in":["this"],"question, like":["Ruby."],"question, meaning":["that"],"question, one":["part"],"question, thanks":["for"],"question. But":["saying"],"question. I":["tried"],"question. it":["seems"],"question: why":["did"],"question: yes":["HashDict.update"],"question? \"":["and"],"question? and":["silence?"],"question? message":["-\u003e"],"question? without":["the"],"question?\". Care":["to"],"question?(message), do:":["String.ends_with?(message,"],"question?(phrase), defp(phrase)":["shouting?),"],"question?(s), do:":["String.ends_with?(s,"],"question?(statement), do:":["String.ends_with?(statement,"],"question?(x) into":["private"],"question?, what":["you"],"question?. At":["this"],"questions (which":["would"],"questions -":["I'm","a"],"questions about":["the"],"questions for":["you:"],"questions though":["(assuming"],"questions) the":["`classify`"],"questions, but":["basically"],"questions... I'm":["just"],"quick and":["naive"],"quick googling,":["[[:alpha:]]"],"quick hint,":["you"],"quick look":["at"],"quick note":["on"],"quick note.":["I"],"quick one":["after"],"quick search":["on"],"quick to":["get"],"quicker `silence?/1`":["function."],"quicker but":["I"],"quicker feedback":["than"],"quicker. I":["might"],"quickly and":["giving"],"quickly enough":["when"],"quickly get":["problematic."],"quickly grasp":["the"],"quickly reading":["code"],"quickly scan":["the"],"quickly see":["that"],"quickly understand":["the"],"quickly, and":["version"],"quiet function":["with"],"quiet\". I":["expect"],"quiet?(nil), do:":["true`"],"quiet?(something) when":["nil?(something)","is_binary(something)"],"quiet?/1 clause":["could"],"quite a":["bit","bit","bit","bit","lot","lot","bit","bit","bit","lot","bit","bit."],"quite able":["to"],"quite accurate.":["I"],"quite an":["edge"],"quite as":["well","difficult"],"quite clear":["to","what"],"quite common":["for"],"quite easily":["with"],"quite elegant,":["avoiding"],"quite entirely":["trivial,"],"quite feel":["the"],"quite figure":["it"],"quite find":["it."],"quite good.":["One","You're","I'll"],"quite inefficient":["as"],"quite lost":["here."],"quite low":["and","and","and","and","and"],"quite new":["to","to"],"quite pleased":["with"],"quite powerful.":["What"],"quite readable":["as-is."],"quite remember":["what"],"quite right,":["but"],"quite right.":["What"],"quite seeing":["how"],"quite similar":["to","to"],"quite so":["sure","spaced"],"quite some":["comparisons,"],"quite straightforward,":["but"],"quite sure":["what","how","about","what","what"],"quite that":["related,"],"quite this":["way"],"quite uncommon,":["some"],"quite useful,":["though"],"quite useful.":["(I"],"quite work":["out"],"quote block":["and"],"quote\" -":["but"],"quoted strings":["(binaries)."],"quoted) are":["enumerable,"],"quotes are":["already"],"quotes strings":["are"],"quotes, is":["really"],"r.x` and":["get"],"rabbit hole)":["back"],"race ahead":["of"],"race to":["the","the"],"raise earlier":["if"],"raise to":["the"],"raise_invalid_stmt(stmt) end`.":["I"],"raised if":["the"],"raised my":["eyebrow"],"raising code":["more"],"rambling... but,":["if"],"ran into":["some","was"],"ran it":["again"],"random combinations":["like"],"random intermediate":["computation."],"random order,":["and"],"range \u003chttps://github.com/elixir-lang/elixir/blob/v0.12.0/lib/elixir/lib/range.ex\u003e:":["the"],"range `1..3`":["is"],"range `1..4`":["is"],"range and":["`some_range.last`","it"],"range as":["the"],"range but":["I"],"range constants":["to"],"range first":["and"],"range first).":["I"],"range into":["a"],"range is":["just"],"range like":["Ruby"],"range since":["a"],"range solves":["the"],"range test":["case.","was"],"range to":["an","an"],"range with":["a"],"range, because":["that"],"range, while":["using"],"range. I'll":["update"],"range. I'm":["used"],"range... &":["unless"],"range: `Enum.to_list(4..2)`":["=="],"range: yes,":["but"],"ranges (or":["more"],"ranges and":["I","lots"],"ranges are":["quite"],"ranges did":["not"],"ranges in":["a","Elixir"],"ranges like":["that."],"ranges usually":["are"],"ranges were":["used"],"ranges, because":["it"],"ranges. So":["`Enum.reduce(start..finish,"],"rare and":["easy"],"rare because":["pattern"],"rare in":["Elixir"],"rare so":["there's"],"rare to":["see"],"rarely done":["in","in"],"rarely need":["to","`if-elseif-else`"],"rarely used":["in"],"rather adhere":["the"],"rather an":["initial"],"rather as":["a"],"rather be":["pattern","pattern"],"rather complicated":["nature"],"rather complicated.":["You're"],"rather curious":["why"],"rather elegant":["code."],"rather go":["with"],"rather hard":["to"],"rather irrelevant":["in"],"rather keep":["them"],"rather large":["lists"],"rather limited":["in","in"],"rather limiting":["and"],"rather making":["a"],"rather move":["on,"],"rather not":["add"],"rather see":["consistent","something"],"rather simple":["recursive"],"rather than":["shout_ing_)","plain","trying","`String.last`?","check","explicitly","just","is_yelling/1.","simply","`String.split`","having","check","simply","using","making","having","dispatching","ones","`fn`","an","nesting","inferring","the","prefixing","prepending","`[^","truncates","intentional.","testing","&amp;1,","making","duplicating","define","defines","`is_shout?`","in","`count_word(&1,&2)`.","scan","a","creating","a","expecting","just","just","iteratively,","the","a","needing","what","hang","which","logic","implementing","the","using","delete","all","about","the","`0`.","separating","`HashDict`","doing","necessarily","checking"],"rather the":["result,"],"rather to":["avoid"],"rather transform":["structures"],"rather ugly,":["I"],"rather unsure":["about"],"rather weird":["stdlib))"],"rather weird,":["I"],"ratio. Maybe":["try"],"rationale for":["that?"],"raw implementation":["of"],"re module":["man"],"re-create the":["String.from_char_list!,"],"re-exported Erlang":["functions"],"re-extracted the":["`count_of_words`"],"re-implemented `Enum.reduce`":["and"],"re-orders cond":["again."],"re-orders the":["`cond`,"],"re-organized based":["on"],"re-program by":["brain"],"re-read in":["order"],"re-sort it":["every"],"re-sorting the":["base"],"re-store it":["in"],"re-study how":["macros"],"re-submit with":["them"],"re-submit. Although":["this"],"re-use the":["`count`"],"re-useability (of,":["say,"],"re-write code":["later"],"re-writing them":["our"],"reach for":["more"],"reach the":["more"],"reached it":["yet,"],"reached some":["trails"],"reached this":["stage."],"reaching for":["in"],"react to":["`Teenager.hey(nil)`?"],"read (and":["line"],"read --":["it's"],"read a":["bit","bit","bit","little"],"read about":["the"],"read and":["leaves","to","maintain","most","understand","less"],"read any":["tests/specs,"],"read as":["an","it"],"read at":["times."],"read back":[":-)"],"read back,":["so"],"read better":["if"],"read but":["now","ever"],"read by":["someone"],"read due":["to"],"read for":["multiple"],"read if":["these","they","it"],"read in":["one","Elixir.","this"],"read inline.":["I'm"],"read it":["somewhere,"],"read more":["naturally","carefully."],"read much":["more"],"read my":["nitpick"],"read nicely.":["Thanks"],"read on":["this"],"read than":["this","the"],"read that":["the","they","`HashDict.new/2`","part","wrong,"],"read the":["docs","verses.","fn","function","code","docs","comments","main"],"read this":["way."],"read this...":["is"],"read to":["see","me"],"read up":["a","about","on","on","on"],"read well.":["Is"],"read when":["pattern"],"read your":["code","code."],"read, especially":["with"],"read, specifically":["the"],"read, they":["seem"],"read, what":["do"],"read. I'm":["not"],"read. It's":["been"],"read. Think":["about"],"read. What":["about"],"read. You":["don't"],"read. You're":["using"],"read/maintain/understand as":["the"],"readability /":["clarity."],"readability and":["what","conciseness","chaining.","DRY.","intent","you're","understand-ability"],"readability by":["making"],"readability hack":["I"],"readability is":["lower.","to"],"readability not":["to"],"readability of":["is_,","some","the","my","the","the"],"readability or":["documentation,","expressiveness"],"readability really":["depends"],"readability room":["currently."],"readability specially":["with","with"],"readability suffers":["from"],"readability threshold":["though."],"readability to":["be","break","the"],"readability too":["much."],"readability vs":["idiomatic"],"readability when":["used"],"readability wise":["I'd"],"readability with":["```String.ends_with```."],"readability you":["should"],"readability) and":["the"],"readability, and":["I'm"],"readability, but":["it","I"],"readability. Also,":["maybe","have"],"readability. But":["that's"],"readability. Given":["it"],"readability. I":["could","just"],"readability. I'm":["not"],"readability. In":["Ruby/Elixir"],"readability. Maybe":["wrapping"],"readability. Whether":["it"],"readability. `different_word?`":["is"],"readability/maintainability and":["work"],"readability: check":["what"],"readable ,":["thanks"],"readable I":["am"],"readable and":["understandable","easier","idiomatic","idiomatic."],"readable as":["a"],"readable as-is.":["The"],"readable because":["of"],"readable but":["I","the"],"readable by":["breaking"],"readable code":["that"],"readable code.":["I'm"],"readable for":["me."],"readable function":["in"],"readable here.":["You"],"readable if":["you","extract","you","you","you","you","you"],"readable in":["my","elixir."],"readable inside":["function"],"readable is":["not"],"readable result":["(IMHO)."],"readable solution":["but"],"readable solution,":["but"],"readable than":["`size(sentence)","the","a","the","try","the","traditional","having"],"readable to":["have","me.","move"],"readable using":["the"],"readable with":["a","variables"],"readable! The":["pipe"],"readable, and":["it's"],"readable, but":["there's","there's","the","either","I","if"],"readable, maintable,":["and"],"readable, so":["I"],"readable, that's":["all."],"readable, what":["do"],"readable, would":["it"],"readable, you":["could"],"readable. Also":["is"],"readable. Feel":["free"],"readable. I":["tried"],"readable. Just":["wanted"],"readable. Maybe":["it"],"readable. Nice":["work"],"readable. Thanks":["!"],"readable. The":["cons,"],"readable? I'm":["not"],"readbility of":["the"],"reader can":["quickly"],"reader has":["to","to","to","a"],"reader in":["using"],"reader interpret":["that"],"reader knows":["what"],"reader might":["not"],"reader some":["insight"],"reader think":["\"what"],"reader to":["visually","give","look","work","track","understand.","think.","do"],"reader trying":["to"],"reader understand":["which","what"],"reader understands":["how"],"reader unfamiliar":["with"],"reader variable":["like"],"reader, but":["that","not"],"readers if":["you"],"readers', but":["IMHO"],"readers, `(1":["\u003c\u003c\u003c"],"reading `zip`":["and"],"reading a":["single","bit"],"reading code":["like","stuff"],"reading first.":["But"],"reading more":["and"],"reading of":["your"],"reading or":["writing"],"reading the":["code","code","test","code"],"reading this":["code."],"reading through":["Programming","the","this:"],"reading to":["dig"],"reading your":["code?"],"reading/writing the":["whole"],"readme about":["using"],"readme, but":["I"],"readme.md, and":["let"],"reads a":["bit","little","little","lot","little"],"reads and":["looks"],"reads any":["better..."],"reads better":["with","with","than","than","than","and","in"],"reads better!":[":)"],"reads clearly":["and"],"reads horribly!":["But"],"reads like":["`(round"],"reads more":["naturally.","explicitly,"],"reads much":["better","nicer"],"reads nicely":["(interpret","as"],"reads pretty":["well."],"reads really":["nicely"],"reads slightly":["strangely"],"reads so":["much"],"reads to":["me."],"reads. I":["also"],"reads. It":["makes"],"reads: \"msg":["|\u003e"],"ready built":["`reduce`"],"ready for":["approval?"],"ready to":["move","move","be"],"real Elixir":["novice."],"real benefit":["considering"],"real code,":["it"],"real curveball":["for"],"real good":["reason"],"real life":["application."],"real production":["code,"],"real project":["having"],"real reduce":["works"],"real return":["value."],"real sources":["of"],"real value":["since"],"real words":["you"],"real world":["application)","application","is","difference","at"],"real-world situation":["however."],"real34, you're":["right."],"realise ```\\w```":["would"],"realise that":["i"],"realise you're":["limited"],"realised I":["could"],"realised I've":["typed"],"realised that":["I've"],"realistic use.":["I'll"],"realize I":["had"],"realize older":["exercises"],"realize pipe":["is"],"realize that":["about","it"],"realize that.":["Nitpick","Thanks!"],"realize the":["`List`"],"realize there":["was","was"],"realize those":["function"],"realized \"teen\"":["as"],"realized I":["could","was","don't","missed"],"realized Regex.scan":["is"],"realized after":["thinking"],"realized that":["all","by","there"],"realized the":["'2'"],"realized this":["can"],"realizing that":["most"],"really Teenager":["properties?","properties?"],"really a":["binary","nitpick,","list","nitpick","list","nitpick.","big","record","matter","fan","matter","form","specialised","very","nitpick,","matter","function"],"really about":["a"],"really all":["that"],"really an":["internal","introduction"],"really anything":["that's"],"really appreciate":["any","feedback","it.","any","your"],"really argue":["with"],"really asking":["here...I've"],"really be":["declared","the"],"really belong":["in","inside"],"really bothered":["me"],"really can't":["find","find","find"],"really cannot":["come"],"really care":["that","that"],"really clean,":["I"],"really come":["up"],"really complicated":["to","way"],"really confusing":[":),"],"really count":["as"],"really cover":["those."],"really creates":["a"],"really curious":["how."],"really cuts":["down"],"really damn":["clean."],"really depends":["on"],"really describe":["the"],"really desirable":["to","to"],"really disliked":["lines"],"really do":["not"],"really don't":["matter.","know"],"really elegant":["using"],"really enjoyed":["writing"],"really enjoying":["it."],"really familiar":["with"],"really feel":["the"],"really follow":["this"],"really fun":["for"],"really gain":["anything"],"really gained":["what"],"really glance":["at"],"really go":["together."],"really good":["reason","point","start.","performance"],"really good!":["I"],"really good.":["Since"],"really good;":["I"],"really grok":["how"],"really handles":["the"],"really happy":["with"],"really have":["nullable","the","much","anything","a"],"really having":["to"],"really helpful":["to"],"really in":["love"],"really intended":["as"],"really interesting":["approach","feedback","things"],"really isn't":["an"],"really just":["helpers","pattern","simple"],"really learn":["a"],"really learned":["a","in"],"really like":["the","the","the","it!","this!","it!","how","how","how","it","the","the","this.","`silence?`,","your","it,","it","either.","the","how"],"really look":["at"],"really love":["Elixir's","open"],"really make":["a","sense."],"really makes":["the"],"really messes":["up"],"really messy":["solution."],"really move":["on"],"really neat,":["I"],"really necessary":["the","nor","for"],"really necessary?":["Do"],"really need":["to","`words`","(which","this.","that","the","to","it's","all","recursion."],"really needed":["as","in"],"really needed,":["is"],"really nice":["though,","to"],"really nice.":["Could","My","Super"],"really nicely":["with","now."],"really nitpicky":["thing"],"really nitpicky,":["but"],"really not":["a","sure","sure","much"],"really only":["matters"],"really overkill?":["The"],"really part":["of"],"really pays":["off"],"really quite":["terrible."],"really recommended":["because"],"really say":["why"],"really see":["where","the","the","why"],"really seem":["like","to"],"really short":["(using"],"really short.":["But"],"really should":["have","be"],"really signifies":["shouting,"],"really slower":["than"],"really sluggish":["for"],"really small":["stacks"],"really specified":["anywhere"],"really straightforward.":["I"],"really stupid,":["agreed."],"really sure":["it","(someone","why"],"really surprised":["there"],"really teach":["you"],"really the":["desired","implementation"],"really think":["this"],"really to":["just"],"really too":["worried"],"really try":["to"],"really ugly.":["Why"],"really understand":["the","it,"],"really useful":["nitpicking.","as"],"really using":["anything"],"really valuable":["suggestions!"],"really want":["them.","object"],"really wanted":["some","to"],"really weird":["results.","results"],"really what":["the","the"],"really wish":["I"],"really would":["love"],"really, I":["do"],"really, but":["mainly"],"really. I":["would"],"really. The":["code"],"really? Cool!":["Thanks!"],"rearrange the":["`cond`,"],"rearranged to":["`word_list"],"reason (such":["as"],"reason I":["cannot","left","mentioned","don't","still","didn't","had","abandoned","never"],"reason I'm":["doing","tending","reusing"],"reason `&(&1":["+"],"reason `point_compare`":["is"],"reason all":["I"],"reason for":["it?","keeping","\u003ccode\u003eis_anything_else?(_)\u003c/code\u003e.","making","not","those","using","why","the","slowless","Enum.count","it.","`@jamar`"],"reason is":["that"],"reason it":["didn't"],"reason just":["collapsed"],"reason not":["to."],"reason of":["test"],"reason so":["use"],"reason something":["about"],"reason tbh":["=)"],"reason that":["there's","`a"],"reason the":["`Enum.join`"],"reason to":["have","use","use","use","use","ever","choose.","be.","have"],"reason why":["you","you","you","the"],"reason you":["use","set","compared","prefer","went","append","chose","use"],"reason, I'll":["rework"],"reason, but":["that"],"reason, if":["someone"],"reason, so":["I'm"],"reason. But":["as"],"reason. I":["guess"],"reason. If":["you"],"reasonable `something":["="],"reasonable answer":["for"],"reasoning behind":["the"],"reasoning that":["`String.downcase`"],"reasoning you":["describe."],"reasons the":["simple"],"reasons why":["it"],"reasons) uses":["the"],"reasons, but":["using"],"reasons, this":["feels"],"reassignment garbage":["in"],"rebind the":["method"],"rebuilt `Enum.filter`":["with"],"recalculated every":["time"],"recall correctly,":["but"],"recall how":["that"],"recall what":["exactly"],"receive nil":["and"],"receive nonsensical":["input,"],"receive your":["feedback"],"receives a":["question"],"receives an":["empty"],"receives is":["not"],"receiving feedback":["and"],"recent development":["version","version"],"recent version":["btw)"],"recently learned":["about"],"recently, though,":["so"],"recently, took":["me"],"recognise the":["intention"],"recognize now":["that"],"recognize shouting":["in"],"recognized as":["whitespace).","shouting."],"recognized the":["problem"],"recommend Dave":["Thomas's"],"recommend a":["triple-quoted"],"recommend extracting":["the"],"recommend for":["improvement.","regex"],"recommend going":["through"],"recommend is":["handling"],"recommend just":["`question?`"],"recommend looking":["up"],"recommend making":["your"],"recommend pattern":["matching"],"recommend there?":["`[\\w-]+`?"],"recommend to":["prevent"],"recommendations for":["reducing"],"recommended because":["you"],"recommended in":["Elixir."],"recommended it":["for"],"recommended it,":["due"],"recommended to":["me"],"recommending to":["others"],"recompute `length(a)`":["potentially"],"recompute the":["sorted"],"recomputing base":["each"],"recomputing the":["downcased","sorted"],"record (though":["not"],"record `Range[first:":["1,"],"record and":["a"],"record as":["my"],"record directly\"":["are"],"record directly.":["It's"],"record directly:":["`Graph.edges([e|Graph.edges])`"],"record felt":["natural,"],"record identify":["the"],"record instead":["of"],"record is":["certainly","object"],"record itself.":["I'm"],"record that":["holds"],"record with":["two"],"record. I":["haven't"],"records and":["protocols?"],"records, a":["`HashDict`"],"records, but":["the"],"recreate the":["string,"],"recur-forever problem":["fine."],"recurse with":["a"],"recursion (`do_count`)":["if"],"recursion and":["not","reduce.","reduce\"","all,","left","implement","very"],"recursion before":["but"],"recursion but":["when","i"],"recursion by":["using","using"],"recursion can":["be"],"recursion could":["be"],"recursion for":["the","`map`"],"recursion from":["the"],"recursion here,":["btw."],"recursion if":["you"],"recursion in":["the","`count`.","`square`?","`map`"],"recursion is":["necessarily","actually","such"],"recursion it's":["a"],"recursion like":["in"],"recursion means":["that","that","that","that","that"],"recursion myself":["for"],"recursion on":["the"],"recursion or":["not.","else"],"recursion over":["the"],"recursion patter,":["so"],"recursion pattern":["your","is."],"recursion that’s":["made"],"recursion the":["memory","memory","memory","memory","memory"],"recursion to":["enumeration,","update","look","most"],"recursion when":["higher"],"recursion which":["won't"],"recursion you":["have"],"recursion, and":["have"],"recursion, it":["also"],"recursion, no":["new","new","new","new","new"],"recursion, or":["you"],"recursion, so":["it"],"recursion, thanks":["again"],"recursion, then":["I'd"],"recursion. As":["a"],"recursion. Did":["you"],"recursion. Explicit":["recursion"],"recursion. For":["these"],"recursion. I":["can"],"recursion. If":["you"],"recursion. Part":["of"],"recursion. Tail":["recursion","recursion","recursion","recursion","recursion"],"recursion. There":["are"],"recursive (re)implementation":["in"],"recursive algorithm":["being"],"recursive algorithms":["that"],"recursive and":["is"],"recursive approach":["!"],"recursive as":["well?"],"recursive call":["to","is","pretty."],"recursive callback":["to"],"recursive calls":["and"],"recursive flatten)":["`Stream.concat`"],"recursive function":["that","on"],"recursive function.":["Will","I've"],"recursive functions":["and","are"],"recursive functions,":["the"],"recursive implementation":["as"],"recursive now,":["but"],"recursive optimization":["I"],"recursive so":["given"],"recursive solution":["built","is","I've","that","despite","for"],"recursive strategy":["I"],"recursive will":["cause"],"recursive, amongst":["other"],"recursive, you'd":["want"],"recursive. No":["a"],"recursive. That's":["why"],"recursively so":["you"],"red fish":["blue","blue","blue"],"red, now":["you're"],"redefining downcase,":["look"],"redefining module":["Roman"],"redefining one":["where"],"redesign that":["will"],"redesign things":["so"],"redid the":["exercise"],"redmar! It":["looks"],"redmar, I":["will"],"redo just":["with"],"redoing L12":["to"],"reduce (also":["known"],"reduce I":["don't"],"reduce approach":["would"],"reduce at":["first"],"reduce based":["implementation"],"reduce better":["than"],"reduce call...":["but"],"reduce callback":["to","params"],"reduce calls":["from"],"reduce construct,":["but"],"reduce duplicated":["calls"],"reduce duplication":["as"],"reduce duplication,":["for"],"reduce explicit":["conditional"],"reduce function":["and","mixed"],"reduce here":["instead","a"],"reduce instead":["of"],"reduce is":["a","called","tail"],"reduce iteration,":["so"],"reduce operation":["of"],"reduce pattern.":["You"],"reduce so":["much"],"reduce solution":["slightly"],"reduce some":["duplication"],"reduce step":["is"],"reduce system":["works"],"reduce the":["code","length","number","noise","number","initial","verbosity,","verbosity","number"],"reduce them":["so"],"reduce to":["see"],"reduce verbosity:":["what"],"reduce version":["slightly"],"reduce which":["very"],"reduce works":["slightly"],"reduce you":["already"],"reduce your":["code.."],"reduce |\u003e":["reverse)"],"reduce([], &(append(&2,":["&1)))"],"reduce([], acc,":["_),","_),"],"reduce([h|t], acc,":["f),","f),"],"reduce(l, acc,":["f)"],"reduce(ll, [],":["fn(acc,","fn"],"reduce(ll, acc,":["&append/2)`"],"reduce(t, f.(h,":["acc),","acc),"],"reduce) the":["exercise"],"reduce, and":["it"],"reduce, but":["it","this"],"reduce. Any":["hints"],"reduce. Fixed":["and"],"reduce. Perhaps":["pminten"],"reduce. Thank":["you!"],"reduce_with(Enum.t, filter,":["(filter"],"reduced ```clean_string```":["function"],"reduced in":["is_upcase"],"reducer, but":["threading"],"reduces the":["utility","character"],"reduces to":["`String.upcase"],"reducing a":["list"],"reducing duplication,":["but"],"reducing function":["as","in"],"reducing functions":["vary"],"reducing more":["duplication."],"reducing over":["the"],"reducing see":["submission"],"reducing the":["nesting","list,"],"reducing, below":["it's"],"reducing_function directly":["as"],"redundancy of":["reading/writing"],"redundant code":["from","from"],"redundant functions":["anymore."],"redundant method":[","],"redundant named":["function"],"redundant the":["prefix"],"redundant to":["have","have"],"redundant with":["the","the","```?```","the"],"redundant, it's":["generally"],"redundant. Between":["those"],"redundant. How":["about"],"redundant. Is":["the"],"refactor and":["resubmit"],"refactor from":["one"],"refactor later.":["It"],"refactor of":["my"],"refactor or":["if"],"refactor that":["code?"],"refactor the":["control","`fn`","empty-string","sort"],"refactor these":["to),"],"refactor this":["using"],"refactor where":["I"],"refactor with":["the"],"refactor! Enjoy":["it"],"refactor. It's":["a"],"refactored a":["little..."],"refactored into":["a"],"refactored it":["by"],"refactored my":["code"],"refactored that":["out"],"refactored the":["match"],"refactored to":["the","much"],"refactored with":["one"],"refactored, so":["I"],"refactorice some":["code:"],"refactoring after":["just"],"refactoring based":["on"],"refactoring becomes":["a"],"refactoring either,":["so"],"refactoring of":["the"],"refactoring on":["this"],"refactoring so":["I"],"refactoring the":["```"],"refactoring this":["yet,"],"refactoring without":["running"],"refactoring. Thanks":["for"],"refer back":["to"],"refer to":["as","the","any"],"reference @keshaun":["in"],"reference a":["function,","function,"],"reference for":["learning","iterators"],"reference it":["again"],"reference the":["named","other"],"reference them":["as"],"reference to":["the"],"reference... but":["I"],"references clutter":["the"],"references to":["lists."],"references), so":["it"],"referencing a":["function."],"referencing the":["constant"],"referring more":["to"],"referring the":["the"],"referring to":["using","an","`Dict.to_list`","my","the","an","the","named"],"referring to,":["is"],"referring to.":["Maybe"],"refers to":["the","a","bytes"],"refine how":["it"],"refine my":["ideas"],"refinement that":["I"],"reflect that.":["Otherwise"],"reflect what":["it"],"reflects the":["subtraction"],"reformat the":["code"],"refrain from":["submitting"],"refusing to":["count"],"regard to":["`shouting?`","style","tail"],"regarding #1,":["i"],"regarding doctests,":["is"],"regarding the":["guard","word"],"regardless of":["how","which","whether","Q","Q."],"regards of":["using"],"regards to":["`List.flatten/1`,","the","providing","pattern","the"],"regex (`\\p{}`":["matches"],"regex (yours":["will"],"regex I":["used"],"regex I've":["crafted"],"regex `\\p{L}`":["matches"],"regex a":["bit"],"regex all":["the"],"regex and":["in","I","engage","punted.","not"],"regex are":["not"],"regex as":["a"],"regex at":["the","all","all."],"regex by":["using"],"regex character":["classes."],"regex codes.":["Also,"],"regex could":["be","be"],"regex doesn't":["support"],"regex engine":["can"],"regex equivalent,":["but"],"regex expert,":["but"],"regex fails":["the"],"regex felt":["like"],"regex for":["each","the","this","that,"],"regex hell":["is"],"regex here.":["I"],"regex in":["your","split,","`being_ignored?`","pre","`only_letters?`"],"regex instead":["of"],"regex is":["overkill","a","fine,","quite","the","a","generally","fine.","good.","looking","basically","so","not"],"regex itself.":["I"],"regex match":["on"],"regex match,":["have"],"regex matcher":["`\\w+`"],"regex matches":["on"],"regex methods":["beyond","beyond"],"regex on":["`silence?`","_L11_"],"regex only":["needs"],"regex out,":["so"],"regex pattern":["you","match"],"regex really":["necessary?"],"regex refinement":["that"],"regex should":["remove"],"regex slightly":["so","faster"],"regex stuff":["altogether"],"regex style":["guidelines"],"regex that":["matches","could","doesn't"],"regex to":["String.split","test","properly","parse","me,"],"regex tweak":["removed"],"regex used":["for"],"regex was":["just"],"regex which":["returns"],"regex would":["match"],"regex you":["could"],"regex you're":["using."],"regex's in":["guard"],"regex's too":["much."],"regex). You":["may"],"regex, I'll":["try"],"regex, `\\p{L}`":["matches"],"regex, and":["comparing"],"regex, but":["i"],"regex, checking":["the"],"regex, since":["they","they"],"regex, so":["that","I","what's"],"regex, you're":["on"],"regex-heavy and":["I"],"regex. Additionally,":["how"],"regex. Also,":["do"],"regex. But":["it"],"regex. Look":["into"],"regex. Might":["need"],"regex. Note":["that"],"regex. `x+`":["matches"],"regex. what":["do"],"regex: what":["happens"],"regex? Doesn't":["the"],"regex? If":["you"],"regexes (match":["variables,"],"regexes and":["make","with"],"regexes are":["exceptionally","trying"],"regexes as":["possible.","well."],"regexes before":["doing"],"regexes can":["be","be"],"regexes here":["btw."],"regexes on":["that"],"regexes the":["only"],"regexes will":["fail"],"regexes) to":["check"],"regexes, because":["everyone"],"regexes, but":["after"],"regexes. Check":["out"],"regexes. It":["turns"],"regexes. Please":["let"],"regexes. The":["runtime"],"regexes: `\"A\"":["=~"],"regexes? I":["think"],"regexs in":["a"],"register a":["name"],"register your":["Server"],"regular `!something":["||"],"regular code.":["There's"],"regular expression":["remove","there","with","`%r/p{L}/u`?","matching","for","in"],"regular expression.":["`String.strip`"],"regular expressions":["than","using","are","if","before","in","as","has","very"],"regular expressions,":["the","but","for","though"],"regular expressions.":["Thanks","For"],"regular expressions?":["Most"],"regularly throughout":["the"],"reimplement `append`":["and"],"reimplement `reduce`":["when"],"reimplementation of":["`List.foldl`"],"reimplemented this":["using"],"reimplementing `map`,":["you"],"reintroduced the":["magic"],"reinvent the":["wheel"],"reject +":["filter"],"reject any":["multiples"],"reject empty":["strings","words,"],"reject over":["filter."],"reject test":["into"],"rejected the":["expression:"],"rejecting the":["excess"],"rejection. That":["way"],"rejoining threads":["of"],"related \"thought\"":["with"],"related private":["methods"],"related to":["the","the"],"related, and":["the"],"related, are":["they?"],"relation to":["the"],"relative precedence":["of"],"relative to":["the"],"relatively clear":["and"],"relatively new":["addition"],"relatively rare":["so"],"relatively small":["lists,"],"relatively well":[":)"],"release is":["`0.10.1`."],"release of":["exercism.io"],"release the":["`/u`"],"releases (omitting":["the"],"relented to":["your"],"relevant functions":["in"],"relevant to":["others.","what"],"relevant, or":["am"],"reliable in":["terms","terms"],"relied on":["testing"],"relies on":["`Enumerable.reduce`","passing"],"reluctant to":["enclose"],"rely on":["the","regex's"],"relying completely":["on"],"relying on":["`Dict`"],"rem was":["available"],"rem(n, 3)":["=="],"rem(number, 2)":["=="],"remaining candidates":["list","list"],"remains a":["potential"],"remember correctly,":["pipe"],"remember me":["from"],"remember seeing":["a"],"remember that":["I","you","syntax.","there's"],"remember the":["downcased","README"],"remember those":["terms"],"remember to":["pass"],"remember what":["it"],"remember why":["I","i"],"remembered that":["the","functional"],"reminded me":["of","about","of"],"reminded of":["another"],"reminded that":["when"],"reminder about":["the"],"reminder. Funny":["that"],"reminds me":["of","of","that"],"reminiscent of":["using","Ruby's","a"],"remnant of":["Erlang's"],"remote functions":["in"],"remove @tyler":[","],"remove `@amanda`":["and"],"remove `List.flatten/1`":[","],"remove `cell":["="],"remove `line_number`,":["`prefix`"],"remove a":["step","few"],"remove all":["*invalid*"],"remove as":["much"],"remove characters":["like","you"],"remove duplication":["in"],"remove elements":["from"],"remove it":["yet,"],"remove line":["9"],"remove of":["punctuation"],"remove quite":["a"],"remove redundant":["code","code"],"remove some":["duplication","of","logic","of","code","of","of","of"],"remove that":["clause"],"remove the":["negation","whole","method","duplication.","String.","String.","call","nil","need","`!silence?(message)`","call","commented","filter","call","guard","Regex.replace","flatten","commented-out","parentheses","two","need"],"remove your":["comment."],"remove_punctuation |&gt;":["count_words```."],"removed any":["need"],"removed it":["from",":)"],"removed the":["extra","unnecessary","extra","extra","calls","includes_letters?"],"removed. Hopefully":["the"],"removed. Thanks":["for"],"removes the":["need"],"removing String":["from"],"removing `String.downcase`":["from"],"removing characters":["that"],"removing duplication":["and"],"removing duplication.":["Also"],"removing some":["of"],"removing the":["need","characters"],"removing those":["characters"],"rename StringType":["to"],"rename `empty`":["to"],"rename the":["function.","word","variable","function"],"renamed the":["`blank?`"],"renamed to":["shouting?,"],"renaming 's'":["to"],"renaming it":["to","to","to"],"renaming of":["`downcase`","`downcase`"],"renaming the":["`s`","`count`","`count`"],"reorder or":["redesign"],"reorder the":["clauses"],"reordering the":["conditions"],"repeat my":["question"],"repeat so":["much"],"repeat the":["test"],"repeated `case":["condition1"],"repeated appending":["using","using"],"repeated concatenation":["of"],"repeated twice":["within"],"repeatedly calling":["normalize_word"],"repeatedly in":["a"],"repeatedly use":["it"],"repeating the":["sort","bulk","same"],"repeating twice":["the"],"repeating work.":["Since"],"repetition between":["the"],"repetition for":["the"],"repetition in":["lines","them."],"repetition is":["apparent"],"repetition level).":["Thanks"],"repetition of":["the"],"repetition. This":["is"],"repetitions, but":["worked"],"repetitive” version.":["I"],"rephrase \"fn":["(val)"],"rephrase that":["in"],"repl, i":["used"],"replace \"beer\"":["in"],"replace \"fn":["(val)"],"replace L10's":["`Regex.match?`"],"replace L12's":["`Regex.match?`"],"replace L9's":["`Regex.match?`"],"replace `String.replace`,":["`String.split`"],"replace `accumulate\\3`":["with"],"replace `add_or_increment(&amp;1,":["&amp;2)`"],"replace `b(a,...)`":["by"],"replace `roman":["\u003c\u003e"],"replace and":["looks"],"replace any":["non-digits"],"replace function":["for"],"replace is":["a"],"replace it":["with."],"replace just":["that."],"replace line":["28"],"replace method":["might"],"replace regex,":["and"],"replace the":["first","combination","String.length","complicated","`Regex.replace`"],"replace your":["two"],"replace? It'd":["be"],"replaced all":["the"],"replaced by":["`Dict.update`,","chaining","`HashDict.update`.","one","`hd`.","calls"],"replaced it":["with"],"replaced the":["Regex"],"replaced using":["functions"],"replaced with":["\u003ccode\u003e&1"],"replacement for":["function"],"replacement function.":["This"],"replacement right":["now"],"replacing ```":["true"],"replacing a":["key"],"replacing characters":["you","you"],"replacing it":["with","with"],"replacing non":["`\\w\\s`"],"replacing the":["phone","characters"],"replacing thymidine,":["it's"],"replacing what":["you","you"],"reply would":["this"],"repo (which":["is"],"reporting tends":["to"],"repository and":["it","compiled"],"repository should":["be"],"repository, and":["compiled"],"represent a":["domain"],"represent an":["input"],"represent text.":["It's"],"represent the":["teenager"],"representation (the":["code)."],"representation for":["text"],"representation of":["the"],"representations in":["Erlang"],"representations. I'm":["willing"],"represented in":["code"],"representing the":["structure"],"represents something":["fragile.)"],"represents. Something":["like:"],"reproduce the":["error"],"request accepted.":["I"],"request and":["in"],"request in":["to"],"request that":["I"],"request to":["add"],"request with":["some"],"request? If":["not,"],"requests. It's":["a"],"require appending":["a"],"require at":["least"],"require duplication":["or"],"require extra":["delimiters"],"require injecting":["the"],"require macro":["macro's"],"require nesting,":["that"],"require solving":["it"],"require the":["use","list"],"require you":["to"],"require, because":["tests"],"require, then":["the"],"required by":["new"],"required exposing":["the"],"required for":["your","flat_map?","pipeline"],"required in":["later","things"],"required regex":["out,"],"required reverse":["will","will"],"required tests.":["While"],"required to":["avoid","get"],"required trailing":["newlines."],"required when":["you"],"required. I":["think"],"required? Could":["changing"],"requirement for":["handling"],"requirement in":["the"],"requirement should":["be"],"requirement, but":["it's"],"requirement. The":["way"],"requirements changed":["and"],"requirements changed,":["and","and"],"requirements laid":["out"],"requirements likely":["to"],"requirements properly.":["I"],"requirements which":["specify"],"requirements, and":["no"],"requirements, but":["what"],"requires a":["version"],"requires close":["reading."],"requires is":["not"],"requires that":["the"],"requires the":["reader","module"],"requires traversing":["the"],"requires use":["of"],"requires working":["on","on"],"requiring nucleotide_counts":["to"],"requiring the":["reader","reader","user"],"research into":["string"],"research that":["also"],"resembles me":["of"],"resembles ruby":["instance"],"residual OO":["thinking"],"residual from":["a"],"resolve key":["conflicts"],"resolve this":["conflict,"],"resorted to":["http://stackoverflow.com/questions/4092113/how-to-reverse-a-list"],"resource you":["recommend"],"resources surrounding":["pattern"],"resources to":["look"],"respect it":["when"],"respect the":["following"],"respectively and":["there"],"respectively. Maybe":["you"],"respond differently":["to"],"respond to":["it.","those"],"respond_to could":["in","in"],"responder be":["a"],"responding to":["the"],"responding to.":[":)"],"responding with":["\"Woah,"],"responds a":["certain"],"response as":["opposed"],"response for":["\"forceful\""],"response logic":["from","from"],"response of":["`interpret`","the"],"response only":["has"],"response right":["from"],"response the":["verse."],"response thus":["making","making"],"response to":["my","shouting"],"response, good":["info"],"response. But":["then","now","that"],"response. Good":["job!"],"response. Maybe":["you"],"response_for, you":["can"],"responses --":["very"],"responses are":["responding"],"responses into":["control","module"],"responses to":["module"],"responses? You":["don't"],"responsibilities into":["separate"],"responsibilities or":["more"],"responsibilities to":["have"],"responsibilities. If":["we're"],"responsibility is":["to"],"responsibility of":["`bottles`"],"responsibility principle":["in"],"responsibility that":["you"],"responsible for":["a","determining","that--so","singing"],"rest =":["count(t)","count(t)","count(t)","count(t)","count(t)"],"rest I've":["been"],"rest of":["count,","the","list","the"],"rest on":["the"],"rest), do:":["do_silence(rest)"],"restrict it":["to"],"restricted in":["what"],"restriction in":["the"],"restrictions on":["guards."],"restructuring as":["a"],"resubmission of":["iteration"],"resubmit an":["`Enum.filter`"],"resubmit so":["I"],"resubmit the":["previous"],"resubmit with":["that"],"resubmit, but":["with"],"resubmitted -":["I"],"result ===":["\"\","],"result and":["minimizes"],"result binary":["isn't"],"result in":["two","parentheses","a","the","a"],"result is":["similar","unnecessary","a","a","used","1","2","1","2","the","1","2","always","1","2","1","2"],"result it":["is"],"result of":["a","an","keeping","the","the","`_anagramChars(sourceWord)`","scan","the","`parse","nucleotide_counts","that","`letters","the","mistaking","something"],"result quicker.":["I"],"result so":["the"],"result to":["an","the"],"result while":["the"],"result with":["single"],"result without":["the"],"result would":["still"],"result you're":["looking"],"result) in":["Elixir"],"result, and":["the"],"result, but":["maybe"],"result, or":["the"],"result. Is":["there"],"result. It":["seems"],"result. Nice":["catch!"],"result. Try":["to"],"result/acc arguments":["are"],"result; I":["think"],"result`, but":["your"],"resulting function":["is"],"resulting line":["doesn't"],"results (and":["there's"],"results afterward)":["like"],"results and":["then"],"results could":["be"],"results for":["non-ASCII"],"results have":["the"],"results in":["tight","ever-so-slightly","pithier","them","a"],"results of":["split","String.strip(...)"],"results to":["be"],"results were":["I"],"results. The":["regex"],"retaining non-format":["characters,"],"retrieval for":["two"],"retrieving the":["normalized"],"retrospect, isn't":["a"],"return \"a":["list"],"return `:ok`":["if"],"return `:sublist`":["instead"],"return `@taya`.":["Can"],"return `[]`,":["for"],"return `acc`":["rather"],"return `nil`":["(a"],"return `nil`.":["In"],"return `true`":["for"],"return `true`,":["`false`"],"return `{\"\"":["=\u003e"],"return a":["symbol","string","function","String.","boolean","list","list","list,","list","hash","bad","list","new,","10","single","boolean","truthy"],"return an":["empty","enum","argument"],"return atoms":["and"],"return bad":["results"],"return before":["each"],"return boolean":["values"],"return booleans)":["it's"],"return different":["texts."],"return false":["positives","felt"],"return funs":["rather"],"return it's":["value."],"return lists":["and"],"return means.":["I"],"return nil":["if"],"return streams":["(usually"],"return that":["text."],"return the":["correct","updated","HashDict","right"],"return true":["with","with","by"],"return val":["from"],"return value":["of","of","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is"],"return values":["in","(both"],"return values,":["so"],"return very":["different"],"return your":["answer."],"return? What":["if"],"returned \"s\"":["or"],"returned an":["overall"],"returned by":["`:calendar`"],"returned false":["for"],"returned list":["from"],"returned, not":["a"],"returned. Thanks":["for"],"returned. That":["kind"],"returning ```":["true"],"returning `anagrams`)":["hence"],"returning `false`":["if"],"returning `nil`":["not"],"returning a":["string,","lambda","list","list","segment"],"returning an":["anonymous"],"returning different":["things."],"returning functions":["are"],"returning it":["to"],"returning nil":["in"],"returning the":["response","phone"],"returning to":["a"],"returning true":["but","is"],"returning whatever":["argument"],"returns 2":["to","to","to","to","to"],"returns `:silence`,":["`:shouting`"],"returns `[]`,":["so"],"returns a":["list","list","boolean.","new","list.","new","tuple","float","Boolean,","new","filter","list","list","double","string"],"returns anonymous":["function"],"returns chars":[","],"returns from":["the"],"returns non":["empty"],"returns not":["only"],"returns on":["one"],"returns one":["flat"],"returns the":["same","same","character","string"],"returns true":["if"],"returns you":["the","a"],"returns {:ok,":["'abcde'}"],"reusable and":["have","would"],"reusable, so,":["mostly"],"reuse `append`":["in"],"reuse `count`":["too."],"reuse for":["the"],"reuse it":["you"],"reuse of":["`count`"],"reuse the":["closure","functions","function"],"reuse them.":["I"],"reuse, so":["please"],"reused `do_count`":["now","now","now","now","now"],"reused anywhere,":["the"],"reused elsewhere,":["and"],"reused for":["the"],"reused. Here's":["a","a","a","a","a"],"reusing an":["existing"],"reusing it.":["Submitting"],"reusing one":["function"],"reusing the":["`silence?`"],"rev with":["your"],"reveal intent":["of"],"reveal the":["intent"],"revealed this":["problem."],"revealing and":["putting"],"revealing code":["if"],"revealing methods?":["And"],"revealing names":["in"],"revealing names,":["maybe"],"revealing than":["`String.last"],"revealing. Maybe":["consider"],"reverse a":["few"],"reverse and":["join"],"reverse at":["the","the"],"reverse could":["be"],"reverse inside":["append."],"reverse is":["`O(n)`,","`O(n)`,","done"],"reverse it":["at"],"reverse may":["sound","sound"],"reverse of":["a","a","a","a"],"reverse on":["the"],"reverse only":["one"],"reverse order":["(or"],"reverse the":["output,","two","results"],"reverse twice":["for"],"reverse will":["add","add"],"reverse([], reversed_list),":["do:"],"reverse([head|tail], reversed_list),":["do:"],"reverse(l), do:":["do_reverse(l,"],"reverse(ll) |\u003e":["reduce([],"],"reverse(string), do:":["string"],"reverse) that":["takes"],"reverse, though":["for"],"reverse. And":["I"],"reverse` vs":["`defp"],"reversed input":["list,","list"],"reversed list":["of"],"reversed the":["order"],"reversed_list), do:":["reversed_list","reverse(tail,"],"reverses the":["match"],"reversing one":["of"],"reversing the":["order","list","elements","two"],"reversing. The":["reverse","reverse"],"revert and":["go"],"reverted to":["my"],"reverted. `String.valid?/1`":["isn't"],"reverting to":["original."],"review exercises":["until"],"review other":["people"],"review the":["best"],"review viewport":["isn't"],"review, and":["they'll"],"reviewed by":["an"],"reviewer disliking":["my"],"reviewing/nitpicking then":["I"],"reviews. If":["most"],"revise to":["use"],"revised version,":["which"],"revision 2":["than"],"revision and":["pulled"],"revision based":["on"],"revision between":["#2"],"revision that":["explores"],"revision which":["should"],"revision with":["a","that"],"revision, I":["wanted"],"revision. Thanks":["for"],"revisions of":["exercises"],"revisit to":["remove"],"rework that":["thnx."],"reworked exercise":["as"],"rewrite it":["with","but","a","a","a","a","a"],"rewrite this":["by"],"rewrite with":["your"],"rewrite your":["`fn(_key,"],"rewriting the":["exercise"],"rewriting these":["list"],"rewritten as":["one","one-liners."],"rewritten to":["not"],"rewritten without":["a"],"rewritten, it's":["not"],"rewrote from":["scratch"],"rid of":["this","your","these","the","the","two","condition","the","the","one","conditionals","the","that","as","all","it","HashDicts;","the","that?","the","the","some","that"],"rid you":["from"],"right ,":["`String.split/1`"],"right -":["looks","this"],"right Elixir":["tools.","docs"],"right about":["the","`||","the","the","using","the","that"],"right after":["uploading"],"right and":["wrong"],"right choice":["in"],"right direction.":["Much","So"],"right due":["to"],"right elixir":["tools."],"right fold":["on","on"],"right for":["the"],"right from":["the"],"right hand":["side"],"right idea":["using"],"right idea.":["Here's"],"right in":["the","the"],"right in.":["Pattern"],"right name":["though."],"right next":["to"],"right now":["on","with","and","there","for","my","I"],"right now,":["as"],"right now.":["This","Katrina"],"right now;":["this"],"right of":["the","the","course.","the"],"right on":["the","that.","my","accident."],"right one.":["What"],"right result":["quicker."],"right shift":["by"],"right situations.":["Granted,"],"right so":["you"],"right solution":["yet,"],"right term":["here)"],"right than":["I"],"right that":["I","`bitstring_to_list`"],"right the":["\"is_\""],"right thing":["happen","for"],"right thing.":["Same"],"right this":["stuff"],"right tool(s)":["for"],"right tools.":["I'll"],"right track":["with"],"right track,":["good"],"right track.":["Look"],"right way":["to","here."],"right way,":["as"],"right word":["but"],"right! There":["is"],"right, It":["should"],"right, `scan`":["worked"],"right, but":["I"],"right, didn't":["think"],"right, i":["updated","will"],"right, it":["is","sounds"],"right, it's":["not"],"right, of":["course."],"right, reverse":["could"],"right, thanks":["a","for"],"right, the":["version"],"right, there":["aren't"],"right, they":["are"],"right-hand function":["call"],"right. Fixed":["in"],"right. Good":["catch!"],"right. I":["didn't"],"right. I'd":["let"],"right. Looking":["back"],"right. Missed":["it"],"right. Removing":["sing_verse."],"right. Simplified":["it"],"right. This":["is","was"],"right. What":["do"],"right.I'm not":["very"],"right; I":["just"],"right? And":["it"],"right? Does":["it"],"right? Perhaps":["someone"],"right? So":["I"],"right? So,":["`String.downcase`"],"risk of":["being"],"risk that":["the"],"river of":["```message"],"road, so":["don't"],"roadblock though,":["it's"],"role of":["`Enum.sort`"],"rolled my":["own"],"roman chars":["to"],"roman.exs:1: redefining":["module"],"room for":["improvement."],"root of":["what"],"roster and":["grade"],"roster once,":["so"],"roster, _)":["-\u003e"],"rough attempt.":["I"],"roughly how":["the"],"roughly n^2":["time."],"route I":["usually"],"route like":["that"],"route to":["DRY","the"],"route you":["to"],"routine has":["mostly"],"ruby I":["had"],"ruby allowed":["a"],"ruby also":["has"],"ruby but":["there"],"ruby case":["statement."],"ruby community":["about"],"ruby convention":["of"],"ruby in":["the"],"ruby instance":["vars,"],"ruby methods":["with"],"ruby version.":["Nice,"],"ruby version:":["http://exercism.io/submissions/a6a7ce08ece4b2cade0594a2"],"ruby versions":["that"],"ruby without":["nesting"],"ruby's `attr_reader`":["-"],"ruby, and":["initially"],"ruby, erlang,":["and"],"ruby-ish convention":["is"],"ruby. However,":["ruby"],"ruby. Not":["so"],"rubyist from":["Seattle?"],"rubyist in":["me"],"rubysolo, but":["I"],"ruining its":["brevity?"],"rule for":["passing","that"],"rule in":["functional"],"rule is":["simple:"],"rule of":["thumb","Roman","thumb","Elixir:"],"rule-based approach,":["I"],"rule? If":["so"],"rule?! Even":["just"],"rules based":["on"],"rules. In":["this"],"run \"iex\",":["I"],"run \u003ccode\u003eexercism":["submit"],"run `./bench.ex":["100`,"],"run `Enum.count(a)`":["twice"],"run `exercism":["fetch`"],"run `number`":["on"],"run and":["this"],"run at":["it"],"run for":["their"],"run forever":["given"],"run in":["roughly","quadratic"],"run into":["subtle","an","this","places"],"run out":["of"],"run the":["test."],"run those":["as"],"run? (In":["particular"],"running Elixir":["0.10.1"],"running `list_of_words`":["a"],"running into":["spec"],"running on":["the"],"running sequential":["string"],"running the":["tests"],"running this":["with"],"running through":["the"],"running; I'll":["think"],"runs in":["0.0s"],"runs more":["than"],"runs much":["faster."],"runs over":["multiple","80"],"runs. This":["in"],"runtime and":["for"],"runtime has":["to"],"runtime only":["has"],"runtime wants":["to"],"russian language":["was"],"russian with":["no"],"russian) using":["regex."],"rusty at":["Elixir"],"s &&":["String.downcase(s)"],"s ]":["="],"s was":["the"],"s, a,":["b,"],"s1)` has":["quadratic"],"sack, 26":["presses"],"sacrifice brevity":["for"],"sacrifice to":["make"],"sacrificing *too*":["much"],"sacrificing at":["least"],"sacrificing much":["readability."],"sacrificing readability":["/","too"],"sacrificing too":["much","much","much","much","much","much"],"sadly not":["a"],"sadly, right":["now"],"safe as":["PhoneValidation"],"safe built":["in"],"safe syntax":["for"],"safe to":["just"],"safest option":["since"],"said \"BOB":["WHO"],"said \"I've":["seen"],"said I":["don't"],"said I'm":["using"],"said from":["the"],"said in":["version"],"said it":["seems"],"said on":["the"],"said piqued":["my"],"said that":["using","I","I"],"said that,":["there's","any"],"said to":["match"],"said we":["couldn't"],"said, I":["think"],"said, I'm":["usually"],"said, check":["out"],"said, do":["feel"],"said, in":["my"],"said, it":["*can*","avoids","would"],"said, it's":["ugly."],"said, they":["are"],"said, this":["looks"],"said, you":["can"],"said, you'd":["need"],"said. Do":["you"],"said. You":["can"],"said... there":["is"],"said: In":["this"],"sake of":["consistency,","practice.","readability","consistency,","consistency.","learning,","it"],"sake. The":["modularity"],"same \"I":["don't"],"same VM":["call."],"same and":["if"],"same anonymous":["function."],"same applies":["to"],"same approach":["as","as","as","the","the","the","the","the"],"same approach,":["with","one"],"same argument":["that"],"same arguments":["directly"],"same arguments:":["trailing"],"same as":["binary","3,","`[?A]`.","the","`replace_thymidine`,","the","Ruby.","in","input.","the","the","the","the","the","separate","if"],"same benefit":["of"],"same but":["if","`Enum.reduce`"],"same call.":["Can"],"same code":["handle"],"same comment":["regardless"],"same concerns":["when"],"same conclusion":["here,"],"same constraints.":["I'm"],"same content,":["and"],"same distance":["along..."],"same effect,":["but","some"],"same either":["way."],"same every":["time."],"same exercise":["in"],"same exercises":["in"],"same for":["Ruby","both"],"same function":["-","are","with","(grade)","the","the","the","the","the","the","call","is"],"same functions":["but"],"same in":["Elixir.","to_words?"],"same issue":["appears","with"],"same job.":["You"],"same kind":["of"],"same level":["of"],"same line":["as","as"],"same list":["you"],"same match.":["See"],"same me":["some"],"same module,":["but"],"same name":["as","`count`","return"],"same name.":["It","`Dict.get`"],"same naming":["scheme"],"same number":["of"],"same performance":["profile."],"same place":["the"],"same problem,":["e.g."],"same process":["in"],"same reason.":["If"],"same reduce,":["but"],"same regex":["tweak"],"same result":["with","without"],"same result.":["Is"],"same semantics":["as"],"same set.":["It"],"same task":["in"],"same that":["`&(&1"],"same thing":["and","and","in","but"],"same thing,":["except","so"],"same thing.":["Sorry"],"same time":["if","as"],"same time,":["but"],"same two":["dictionaries"],"same type":["for"],"same type.":["This"],"same use":["case"],"same way":["(but","I"],"same way.":["Couple","You"],"same word":["is","and","as"],"same work":["as"],"same, but":["someone"],"same, so":["the"],"same, yelling":["means"],"same. Boom.":["That"],"same. I":["feel"],"same. That":["way"],"same. That's":["what"],"same?(_word, _word),":["do:"],"same?(word, word),":["do","do:"],"same_word(target, dc)":["end)"],"same_word), do:":["false`."],"same_word? you":["still"],"sameness. The":["current"],"sample again.":["Apparently"],"sane and":["predictable"],"sanitization /":["splitting"],"sanitize you":["remove"],"sanitize |\u003e":["split"],"sanitize/1 function.":["I"],"sanitizing the":["input"],"sanity of":["us"],"satisfied about":["the"],"satisfied with":["this","your"],"satisfy the":["test","specs"],"satisfy these":["requirements"],"satisfying in":["Elixir/Erlang."],"save as":["`bench.ex`"],"save one":["_going"],"save point.":["Remaining"],"save you":["the"],"save your":["work"],"saved, but":["you"],"saves a":["`String.split`"],"saves you":["from"],"saving any":["lines"],"saw @kristofer's":["code"],"saw a":["different","lot"],"saw both":["(w"],"saw examples":["of"],"saw it.":["Here"],"saw that":["I"],"saw the":["exchange","comment"],"saw them":["collapsed"],"saw, since":["you've"],"say \"I":["think"],"say \"ah,":["it's"],"say \"this":["clause"],"say I":["would","prefer"],"say ```is_```":["without"],"say about":["descriptive"],"say anything":["about"],"say as":["a"],"say both":["\"inline"],"say here,":["you"],"say is":["that","that"],"say it's":["done","better","any"],"say it,":["I'm"],"say much":["...","..","no?",","],"say nullary":["methods"],"say object)":["is"],"say that":["it","there","the","this","I","unless","a","you're"],"say that's":["worth"],"say there":["is"],"say this":["done","is","in"],"say to":["him;"],"say unlock":["the"],"say very":["inefficient,","inefficient,","inefficient,","inefficient,","inefficient,"],"say why":["I","or"],"say with":["that"],"say yes.":["In"],"say you've":["triggered","triggered","triggered"],"say your":["code"],"say, Ruby.":["However,"],"say, `map`":["is"],"say, but":["just"],"say, cyrillic":["Д"],"say, except":["I"],"say, smaller":["functions"],"saying \"if":["message"],"saying `&mutation?/2`":["work?"],"saying a":["statement"],"saying about":["the","`shouting?`"],"saying is":["that"],"saying it":["might"],"saying it's":["more"],"saying tail-recursion":["is"],"saying that":["_retrieving_","sorting"],"saying this":["is"],"saying you":["did","need"],"saying, but":["I"],"saying, that":["idiomatic"],"saying, when":["the"],"says \"Ok,":["I'm"],"says \"treat":["invalid"],"says \u003ccode\u003equestion?\u003c/code\u003e":["--"],"says \u003ccode\u003eyelling?\u003c/code\u003e":["and"],"says @tyler":["use"],"says anything":["about"],"says that":["this"],"says this":["straight"],"says to":["me,"],"says up":["to"],"says, begrudgingly":["realizing"],"says, it's":["not"],"scale. Is":["there"],"scan (`Regex.scan`)":["for"],"scan (although":["I"],"scan all":["the"],"scan and":["because","didn't"],"scan down,":["find"],"scan for":["`\\w+`","strings"],"scan on":["`\\w`"],"scan only":["words"],"scan the":["function","words"],"scan till":["we"],"scan to":["implement"],"scan, but":["without"],"scanning (`Regex.scan`)":["for"],"scanning so":["that"],"scanning the":["entire"],"scanning, flattening":["and"],"scans for":["words:"],"scare me":["so"],"scared (probably":["needlessly)"],"scared to":["use"],"scary, `:math.pow(2,64)":["=="],"scattered around":["in"],"scenario I":["don't"],"scenario. I":["think"],"scenes concatenating":["to"],"scenes refactoring":["on"],"scheme as":["I"],"scheme for":["those"],"scheme, I":["think"],"school Erlang":["functions."],"school of":["variable","variable","variable"],"school's internal":["DB"],"school. Generally,":["you"],"school. I":["was"],"scolded for":["it."],"scope of":["`match`."],"scope. If":["you're"],"score of":["every"],"score_data =":["[{'AEIOULNRST',"],"score_data, letter":["inlist"],"score_letter in":["your"],"score_letter(?a), do:":["1"],"score_letter(?e), do:":["1"],"score_letter(letter), do:":["1"],"score_letter(unquote(letter)), do:":["unquote(value)"],"scores =":["[{1,"],"scores HashDict":["is"],"scores before":["summing"],"scores into":["a"],"scores, c":["inlist"],"scoring the":["letters."],"scratch and":["hopefully"],"screencast, so":["I"],"scrub |&gt;":["split"],"scrubbed prior":["to"],"se, but":["the"],"search by":["partial"],"search for":["the","\"Cond\"","the","groups"],"search for.":["BTW"],"search on":["the"],"searching (and":["a"],"searching for":["all"],"second (but":["not"],"second append":["is"],"second argument":["to","to","for"],"second clause":["for","and"],"second function":["definition?"],"second generator":["in"],"second gvaughn's":["suggestion"],"second is":["a"],"second iteration":["to"],"second minor":["nit:"],"second nitpick,":["I"],"second opinion":["and","about"],"second param":["of"],"second parameter":["passed","is","for"],"second place":["to"],"second point,":["I"],"second reviewer":["disliking"],"second shorthand":["for"],"second spec":["for"],"second strand":["if","(`right`","is"],"second submission":["is"],"second suggestion,":["check"],"second suggestion?":["I'm"],"second term":["is"],"second the":["suggestion"],"second there.":[":)"],"second thoughts":["about"],"second time":["I"],"second variable":["expected"],"second version":["already","of"],"second what":["@tracey"],"second word":["and"],"second would":["match"],"second_couplet private.":[";P"],"seconds) do":["..."],"section 2.6.7":["[http://elixir-lang.org/getting_started/2.html]."],"section of":["```http://elixir-lang.org/getting_started/2.html```"],"section there.":["Yours"],"sections \"exchange":["(number)\""],"sections of":["the","phone"],"see (though":["your"],"see *why*":["Bob"],"see I":["was","misunderstood"],"see Kernel.length":["as"],"see [my":["blog"],"see a":["slightly","way","few","too","problem","list","straight","reduce"],"see also":["that"],"see an":["argument","idiomatic"],"see any":["function","logical","explicit","alternative"],"see anything":["*to*"],"see arguments":["for","either"],"see consistent":["importing"],"see doing":["it"],"see exorcism":["go,"],"see extremely":["large"],"see from":["the"],"see guard":["clauses","clauses"],"see here":[":)"],"see how":["the","it","that","many","you","I","I","it","you've","they","I","it","the","much","I","it","`bitstring_to_list`","much","I","that","that","to"],"see if":["they","it","I","string","it's","it","that","the","I","it","there's","you","I","something","the","I","an","the","i","the","there","they","it","there","the","it","they","the"],"see in":["another","this"],"see is":["a","the","that","`String.strip(msg)","append"],"see it":["now.","work",",","more"],"see it,":["regular","I'm","but"],"see it.":["I"],"see iteration":["4"],"see moving":["those","those"],"see my":["comment","solution."],"see now":["that","how"],"see pattern":["matching"],"see pieces":["of"],"see something":["like"],"see submission":["n."],"see that":["the","I'm","test","it","you've","I","a","it","two","it","it"],"see the":["same","output","issue","benefit","pieces.","functions","parentheses","benefit","benefits","reasoning","intention","point","rare"],"see there":["is"],"see there's":["actually"],"see they":["aren't"],"see they're":["aligned."],"see this":["in"],"see those":["more"],"see two":["different"],"see underscores":["but"],"see what":["feels","you","is","I","you're","you're","you","kinds","it","it","they","the","the"],"see what's":["wrong.","up.","available"],"see where":["the"],"see which":["one","one","one"],"see why":["you'd","@jannie","it's","this","you'd"],"see you":["submitted"],"see you've":["cleaned","already","created"],"see your":["point.","public","point.","whole","point"],"see) logic:":["a"],"see, not":["on"],"see. Here's":["how"],"see. Removes":["the"],"seeing `@`s":["dotted"],"seeing a":["very"],"seeing as":["`?`"],"seeing every":["problem"],"seeing how":["`run`","it","I"],"seeing it":["in"],"seeing named":["captures"],"seeing the":["implementations,","first"],"seeing this":["approach,"],"seejee -":["you"],"seek that":["performance"],"seeking optimal":["performance,"],"seem a":["bit","little"],"seem harder":["to","to"],"seem like":["the","a","it","it","domain","he","they"],"seem much":["here"],"seem pretty":["long/verbose."],"seem prime":["for"],"seem someone":["returning"],"seem to":["work","fit","be","have","be","be","belong","be","help","get","have","add","have","give","work","stop","force","be","match","work."],"seem too":["straightforward."],"seem unreasonable":["in"],"seem very":["\"functional\""],"seemed like":["an","I","overkill;","a","a","a","it","it"],"seemed no":["simpler."],"seemed simpler":["that"],"seemed to":["describe","prefer)","be","be","have","come"],"seemed trivial":["enough"],"seems a":["little","bit","bit","bit","bit","bit","little","shame","little","little","little"],"seems about":["the"],"seems but":["in"],"seems cleaner":["(removing"],"seems good.":["Alternatively,"],"seems inefficient,":["specially"],"seems intrinsic":["to"],"seems less":["readable"],"seems like":["you","it","you","a","you","the","a","you","hard-coding","good","`empty?`","a","it's","it","a","an","you","overkill.","the","it","a","you","a","the","it","a","String.codepoints","a","overkill.","you're","that","a","each","it's","the","the","it"],"seems like--as":["you"],"seems more":["intention","like","idiomatic","intention-revealing,","reminiscent"],"seems ok,":["I"],"seems particularly":["well-suited"],"seems quite":["useful,"],"seems redundant":["with"],"seems reminiscent":["of"],"seems silly":["as"],"seems simple.":["That"],"seems so":["obvious"],"seems strange":["that"],"seems that":["`is_question`","`String.split/1`","special"],"seems the":["`forceful`check"],"seems there's":["more"],"seems to":["me","me","mirror","be","be","be","the","be","be","be","make","work","have","me,","be","be","me","me","be","make","be","work","be","fall","be"],"seems unfortunate.":["Based"],"seems unnecessary.":["I"],"seems useful":["for"],"seems using":["a"],"seems weird":["that","and"],"seems weird,":["are"],"seems worthwhile":["just"],"seems you":["went"],"seen 2":["main","main"],"seen `Dict.update`?":["You"],"seen `Enum.map_join`":["yet,"],"seen `HashDict.new`":["invoked"],"seen `Regex.scan`?":["I"],"seen a":["definition","number","lot","lot"],"seen any":["functions"],"seen before.":["Clever."],"seen commonly":["so"],"seen definitions":["with"],"seen do":["it."],"seen have":["the"],"seen it":["both"],"seen many":["mock"],"seen of":["Elixir"],"seen or":["considered"],"seen people":["doing"],"seen references":["to"],"seen so":["far","far."],"seen some":["discussion"],"seen that":["done"],"seen that's":["completely"],"seen the":["shorthand","underscore","question","syntax","\"unicode","original","do_foo","new"],"seen this":["in"],"seen with":["documentation."],"seen your":["code"],"seen, snakecase":["seems"],"seen, so":["I"],"sees if":["it"],"segment of":["the"],"select letters":["and"],"select only":["the"],"select sequences":["of"],"select what":["you"],"select_anagrams`, but":["that's"],"selection logic":["with"],"selects the":["first","last"],"self describing":["implementation"],"self-documentation to":["what's"],"self-documenting than":["checking"],"self: read":["more"],"semantic, about":["what"],"semantically correct":["than","than","than"],"semantically equivalent":["to"],"semantically meaningful":["if","name","if","if"],"semantics as":["Elixir…"],"semantics other":["than"],"semantics, in":["the"],"semi-colons at":["the"],"semi-complex cases":["are"],"semicolons or":["use"],"send a":["string","pull","PR"],"send in":["a"],"send it":["to","any"],"send second":["variable"],"send_message(chan, message),":["do:"],"sending in":["a"],"sends the":["result"],"sends to":["the"],"sense and":["are"],"sense at":["this"],"sense for":["#lexical_sort","this"],"sense if":["read"],"sense in":["this","count","the"],"sense it'd":["be"],"sense it's":["no"],"sense now":["to"],"sense of":["how","course"],"sense than":["trying"],"sense that":["I","i"],"sense to":["just","encapsulate","extract","have","extract","extract","have","Enum.join","define","declare","me.","fuse","abstract","do","how","me","me."],"sense whenever":["you"],"sense! Thanks":["for"],"sense, I":["have"],"sense, but":["it's"],"sense, it":["does"],"sense. I":["had","will","think","think"],"sense. I'll":["just","make"],"sense. I'm":["a","not"],"sense. Since":["there's"],"sense. The":["only"],"sense. What":["do"],"sense. Would":["it"],"sensible as":["well."],"sent a":["message"],"sent to":["Dict.update:"],"sentence ==":["\"\""],"sentence contains":["characters"],"sentence for":["input"],"sentence gets":["split"],"sentence instead":["of"],"sentence is":["shouted/question/etc.","shouted/question/etc.","shouting"],"sentence the":["teenager"],"sentence |&gt;":["downcase"],"sentence |\u003e":["words"],"sentence, then":["I"],"sentence? Thoughts":["might"],"sentences and":["there's"],"sentences etc,":["but"],"sentences. Nice":["use"],"sentences. The":["resulting"],"separate \"cond\"":["expressions."],"separate Enum.reject":["calls."],"separate Query":["module."],"separate `Dict.get`":["and"],"separate `Greeting`":["module"],"separate all":["of"],"separate and":["pretty"],"separate because":["specifics"],"separate bottle_phrase":["function"],"separate calls":["to"],"separate cases.":["Made"],"separate clause":["for","for"],"separate codepoints).":["In"],"separate concern.":["Something"],"separate concerns":["here,"],"separate filter":["and"],"separate filtering":["functions"],"separate for":["clarity"],"separate from":["filtering."],"separate function":["definition","returning","clauses","with","and","clauses,"],"separate functions":["to","with","so","for"],"separate functions,":["with","but"],"separate helper":["function"],"separate implementations":["for","for"],"separate intention":["revealing"],"separate markup":["to"],"separate method":["as"],"separate module":["that","that","for","but","because","property"],"separate module,":["used","you","it's"],"separate module?":["Does","Do"],"separate out":["the"],"separate predicate":["functions"],"separate private":["functions,","function","function?"],"separate properly":["named"],"separate the":["message"],"separate these":["concerns"],"separate well":["named"],"separate what":["is"],"separate your":["concerns"],"separated by":["underscores.","a"],"separated logic":["into"],"separated out":["the"],"separated. I":["take"],"separately when":["building"],"separately; the":["shouting"],"separates the":["expressive"],"separating it":["out."],"separating the":["different","logic","response","checks","response","checks","identification"],"separation of":["responsibilities","responsibilities.","responsibilities","responsibilities."],"sequence of":["the","those"],"sequence the":["parallel"],"sequence |&gt;":["extract_nucleotide(List.wrap(nucleotide))"],"sequences of":["anagrams","one"],"sequences seems":["like"],"sequential string":["operations,"],"series of":["pipes","functions","functions","function"],"serious critique":["from"],"seriously wtf":["with"],"serve as":["the"],"server around,":["so"],"serves well":["to"],"set attributes":["like"],"set comes":["before"],"set difference":["approach"],"set examples":["of"],"set it":["in"],"set of":["tests","rules.","words.","bits,","expressions","exercises,","functions","exercises"],"set or":["repeatedly"],"set out":["on"],"set the":["keys"],"set up":["the","for"],"set. It":["depends"],"sets of":["sets,"],"sets you":["need"],"sets, Elixir":["currently"],"sets, which":["are"],"sets. Unfortunately":["doing"],"settled for":["what"],"settled on":["is","`generate`"],"setup. After":["trying"],"seven, I'll":["put"],"several blind":["alleys"],"several exercises":["ago"],"several functions":["that","that","that","that","that"],"several months,":["and"],"several operations":["done"],"several orders":["of","of"],"several places":["and"],"several regexes":["here"],"several shorter":["ways"],"several things":["that"],"shaky ground":["with"],"shall refactor.":[":)"],"shame as":["I"],"shame to":["lose"],"shape and":["readbility"],"shape but":["I"],"shape is":["pretty"],"shape of":["this","the"],"shaped up.":["Looks"],"share a":["base"],"share an":["example,"],"share if":["you"],"share pointers":["without"],"share with":["you"],"shared between":["verse"],"sharing that":["info."],"sharing your":["experiences"],"shift by":["one?"],"shift to":["the"],"shifting code":["inline"],"shifting from":["the"],"shifting in":["my"],"shifting the":["current"],"shifty solution,":["but"],"shining some":["light"],"ship it":["and"],"shoehorn everything":["into"],"shorcut: `%r{[[:alnum:]]+}`":["thanks"],"short (using":["the"],"short DNA":["strings."],"short `fn`":["single"],"short an":["answer"],"short and":["out","sweet."],"short conditions":["are"],"short enough":["that"],"short enough,":["and"],"short form":["for"],"short function":["clauses."],"short functions":["that","into"],"short functions:":["a"],"short has":["more"],"short meaningless":["names"],"short methods":["that"],"short one":["`r`.","`c`."],"short syntax":["now"],"short version":["is"],"short video":["that"],"short when":["there's"],"short, the":["```&amp;1```"],"short-circuited conditional":["like"],"short-circuiting with":["`return"],"short. But":["no"],"shortcut syntax":["where","on"],"shortcut syntax,":["`&amp;(...)`"],"shortcuts IMO:":["`Regex.scan"],"shortcuts for":["fn"],"shorten `fn(x)":["-\u003e","-\u003e"],"shorten the":["filtering","sort"],"shorten them":["up."],"shorten this":["a"],"shorten to":["`Enum.map_join(fn"],"shorten up":["the","the"],"shortened a":["little"],"shortening the":["sort."],"shortening, I":["was"],"shortens the":["code."],"shortens up":["that"],"shorter and":["simpler.","also","works"],"shorter block":["syntax"],"shorter form":["of"],"shorter functions.":["You"],"shorter in":["code"],"shorter lines":["tend"],"shorter may":["be"],"shorter ones":["into"],"shorter solution,":["but"],"shorter than":["the","the"],"shorter using":["library"],"shorter way":["to","to","of"],"shorter ways":["btw,"],"shortest common":["length."],"shorthand @maureen[max_value]":["and"],"shorthand capture":["syntax,"],"shorthand comes":["from"],"shorthand fn":["notation"],"shorthand for":["anonymous","anonymous","`&amp;(anagram?(word,","repeated","an","`Range[first:","referencing","\"function","referring","`foo([do:"],"shorthand function":["(`&amp;1+1`)"],"shorthand notation":["for","might","for"],"shorthand notation.":["I've"],"shorthand syntax":["for","for"],"shorthand way":["of"],"shorthands for":["anonymous"],"shot tonight":["and"],"should \"1\"":["be"],"should (I":["had"],"should I":["switch","be","be","do","change","use?"],"should add":["it","that"],"should also":["consider"],"should ask":["on"],"should be":["written","extended","private","prettier","a","something","preferred.","removed.","something","equivalent","indented","responsible","avoided","able","a","sufficient.","in","avoided","avoided","split","closed","its","the","able","I","used.","O(n)","fairly","minimized","`&(&1","a","is_shouting.","able","two","more","inserted","a","`1","possible.","lifted","slightly","able","golden","in","treated","way","able","asking","able","mentioned","improved","a","a","linearly","fixed","a","updated","a"],"should be.":["Public","I'm"],"should become":["obvious","obvious"],"should check":["the"],"should come":["in"],"should consider":["extracting","making","a"],"should do":["it.","the"],"should extract":["your","methods"],"should favour":["this"],"should fit":["the"],"should get":["equal","used"],"should give":["you"],"should go":["and","do"],"should have":["caught","simple","used",";-)","something","the","failed","thought","at","come","to","added","been"],"should help":["you"],"should improve":["or"],"should include":["digits"],"should it":["delegate"],"should just":["call","move","prepend"],"should know":["RegEx"],"should look":["at"],"should make":["it","the"],"should never":["be"],"should not":["be","expose"],"should only":["pick"],"should probably":["be","use","restrict"],"should reach":["the"],"should read":["the","up"],"should really":["try","be"],"should remove":["the"],"should rename":["StringType"],"should return":["`acc`","`:sublist`"],"should sort":["out"],"should stand":["alone"],"should start":["to"],"should still":["pass,"],"should submit":["a"],"should suggest":["changing"],"should take":["that","a"],"should talk":["about"],"should try":["that"],"should use":["the","a","one","`defp`"],"should work":["(different","as","just","though."],"should work,":["no"],"should work.":["It's"],"should write":["code"],"should\" situation.":["Thanks"],"should've thought":["longer"],"shouldn't be":["encoded","considered"],"shouldn't care":["about}."],"shouldn't check":["for"],"shouldn't depend":["on."],"shouldn't go":["to"],"shouldn't happen.":["What"],"shouldn't matter":["for","here)."],"shouldn't need":["the"],"shouldn't run":["in"],"shouldn't split.":["It's"],"shout a":["phrase"],"shout is":["can"],"shout. :":[")"],"shout?, question?":["and"],"shouted commands":["and"],"shouted questions)":["the"],"shouted with":["these"],"shouted, or":["a"],"shouted. (But":["that's"],"shouting (according":["to"],"shouting and":["compare","question"],"shouting case":["is","to"],"shouting detection.":["Maybe"],"shouting has":["anything"],"shouting if":["it"],"shouting in":["non-latin","Russian","Russian","Russian","Russian","Russian"],"shouting instances":["as"],"shouting test":["case?"],"shouting to":["be"],"shouting vs":["ask"],"shouting without":["using"],"shouting, 4.":["anything"],"shouting, asking,":["silence,"],"shouting, but":["is"],"shouting, or":["asking?"],"shouting, so":["the","i'll"],"shouting, too":["..."],"shouting. Just":["wanted"],"shouting. You":["need","can"],"shouting? !":["Why?"],"shouting? function":["your"],"shouting? have":["the"],"shouting? leaving":["only"],"shouting? message":["-\u003e"],"shouting?(message), do:":["String.upcase(message)"],"shouting?(phrase), do:":["String.upcase(phrase)"],"shouting?(x), and":["question?(x)"],"shouting?), as":["I"],"shouting?, dont":["you"],"shouting?: 1,":["question?:"],"shoves away":["the"],"show how":["`filter`"],"show me":["how?"],"show warnings":["for"],"show what;s":["happening."],"show which":["arity)"],"showed that":["it"],"shows a":["wide"],"shows no":["implementation"],"shows something":["like"],"shows the":["process.","same"],"shows what":["they"],"shrink as":["you"],"shrink super-simple":["function"],"shy about":["providing"],"shy of":["asking"],"side effect":["usually"],"side effects":["when"],"side effects,":["so"],"side effects.":["A"],"side of":["the","pattern"],"side project":["myself,"],"side to":["make"],"side value:":["\"\""],"side which":["specific"],"side-by-side the":["cond-switch"],"side-effect of":["having"],"side-effect. The":["reason"],"side-effecting, next":["element"],"side-effects is":["the"],"side; one":["last"],"sides and":["that"],"sides are":["the","the","sorted."],"sides explicitly...":["just"],"sides of":["the","the"],"sides, which":["allowed"],"sift through":["a"],"sight but":["that's"],"sigils were":["needed"],"sigils. Threw":["me"],"sign is":["Sc"],"sign that":["some"],"sign they":["are","need"],"sign-flip (basically),":["too,"],"signal to":["noise"],"signature of":["`Enum.reduce`."],"signature pattern":["matching"],"signature through":["the"],"signatures with":["different","a"],"signatures. The":["problem"],"significance (if":["any)"],"significant Erlang":["experience"],"significant name":["would"],"significant step":["forward,"],"significant. That's":["what"],"significant? For":["example,"],"significantly more":["function"],"signifies shouting,":["or"],"signify about":["the"],"signify that":["a"],"silence I":["have"],"silence Regular":["Expression"],"silence clause":["in"],"silence detection":["instead"],"silence from":["inside","inside"],"silence function,":["could"],"silence method.":["I"],"silence then":["\"Fine."],"silence without":["having"],"silence you":["could"],"silence\" test":["that"],"silence\"`) will":["still"],"silence), and":["then"],"silence, 2.":["asking,"],"silence, etc).":["Do"],"silence? (It's":["the"],"silence? and":["Statement","shouting?"],"silence? call":["higher"],"silence? for":["a"],"silence? functions.":["I"],"silence? method":["than"],"silence?() function.":["Using"],"silence?(content )":["do`"],"silence?(input) -\u003e":["\"Fine."],"silence?(input), do:":["String.strip(input)"],"silence?(letters)` but":["that"],"silence?(message), do:":["String.strip(message)"],"silence?(nil), do:":["true"],"silence?(x), shouting?(x),":["and"],"silence?, and":["it"],"silence?/1 needs":["to"],"silence?/question?/shout? really":["Teenager","Teenager"],"silent, but":["I"],"silent, yelled,":["etc"],"silent? awkwardness":["that"],"silently end":["up"],"silliness than":["usefulness,"],"silly as":["well"],"silly for":["such"],"silplify the":["count/1"],"similar and":["in"],"similar approach":["in","would","I've"],"similar approach,":["just"],"similar construct":["(sometimes"],"similar control":["structures."],"similar list,":["which"],"similar methods":["for"],"similar solution":["in"],"similar solution,":["including"],"similar syntax":["in"],"similar things":["#take."],"similar to":["my","a","the","how","idiomatic","Elixir's)","my","what","Ruby's","the","that,"],"similar yet.":["I"],"similar, but":["I"],"similarly, with":["the"],"simple List":["of"],"simple a":["style"],"simple and":["readable.","readable,","readable.","elegant"],"simple as":["possible?","possible","I","it","I"],"simple benchmark.":["So"],"simple but":["verbose"],"simple clauses":["like"],"simple comparison":["with","be"],"simple constructor":["argument"],"simple enough":["to"],"simple example,":["but"],"simple exercise":["and"],"simple exercise,":["I"],"simple expressions":["like"],"simple for":["that."],"simple job,":["but"],"simple keyword":["list"],"simple level":["I"],"simple native":["approach!"],"simple nature":["of"],"simple operations":["(\"what's"],"simple pattern":["matching"],"simple problem.":["I'm"],"simple recursive":["function."],"simple regex":["that"],"simple regexes":["before"],"simple ruby":["without"],"simple side":["of"],"simple solution":["didn't"],"simple solutions.":["Adding"],"simple statement,":["or"],"simple tasks,":["for"],"simple that":["irt"],"simple thing":["to"],"simple to":["understand?","understand"],"simple way":["to","to","to","(without"],"simple when":["memoization"],"simple wrappers":["for"],"simple, and":["clean.","using"],"simple, but":["a"],"simple, like":["you"],"simple, readable":["and"],"simple, readable,":["maintable,"],"simple. That":["probably"],"simple: for":["`?T"],"simpler ,":["only"],"simpler `String.reverse`":["based"],"simpler `do_count`":["implementation."],"simpler and":["probably","more","(nearly)","more","more"],"simpler at":["one"],"simpler but":["it's"],"simpler checks":["in"],"simpler if":["you"],"simpler is":["using"],"simpler like":["```string"],"simpler solution":["than","using","using"],"simpler than":["a","using","what"],"simpler that":["what"],"simpler to":["use"],"simpler use":["of"],"simpler way":["to","to","to","to","when"],"simpler when":["the"],"simpler with":["'Enum`."],"simpler, but":["I"],"simpler. But":["then"],"simpler. Hint:":["get"],"simpler. Is":["there"],"simpler. See":["next"],"simplest way":["to"],"simplfy your":["statement?"],"simplicity /":["succinctness"],"simplicity and":["removing"],"simplicity of":["what's"],"simplification of":["the"],"simplifications. I":["went"],"simplified as":["`HashDict.update("],"simplified based":["on"],"simplified by":["using","using","using"],"simplified further":["to"],"simplified if":["you"],"simplified using":["`Enum.filter_map`"],"simplified. The":["first"],"simplified. You":["compute"],"simplifies `Dict.get`":["and"],"simplifies greatly,":["thanks"],"simplifies most":["head/tail"],"simplify #match":["a"],"simplify `list`,":["though,"],"simplify by":["having","using"],"simplify count_all":["quite"],"simplify it":["a","by"],"simplify line":["12."],"simplify other":["parts"],"simplify some":["of","of","of","of"],"simplify that":["a","`Dict.put(...,"],"simplify the":["checks","regex","function","regex.","regex","iteration","reading","code.","conditions.","type","`Enum.reduce`","required","regex,"],"simplify things":["for","in"],"simplify this":["a","further.","a","using","using","using","code.","code"],"simplify what":["I"],"simplify yelling?":["Doesn't"],"simplify your":["filtering","`sing/2`","#anagrams?","rollup","yelling?","regex.","`is_question()`","regex","`do_count`","sanitization","`match_word`","approach.","implementation.","pattern","code.","code"],"simplifying things":["(doing"],"simply \"pipe\"":["the"],"simply be":["\u003ccode\u003e==\u003c/code\u003e"],"simply because":["`HashDict`","it"],"simply by":["looking"],"simply calculate":["it"],"simply check":["for"],"simply collections":["of"],"simply compare":["the"],"simply converts":["to"],"simply describe":["the"],"simply get":["passed"],"simply in":["terms"],"simply not":["have"],"simply pass":["in"],"simply prefix":["it"],"simply saying":["that"],"simply so":["much"],"simply sorting":["the"],"simply syntactic":["sugar"],"simply throw":["exception","exception","exception","exception","exception"],"simply using":["`Bitwise`."],"simply, with":["clearly"],"simultaneously, but":["doing"],"since 4":["was"],"since ==":["is"],"since ?\u003ca":["character\u003e"],"since Elixir":["(apparently)","doesn't"],"since I":["only","can't","need","did","knew","hardly","haven't","re-implemented","just"],"since I'm":["using","importing"],"since I've":["done"],"since [this":["commit](https://github.com/elixir-lang/elixir/issues/1526)"],"since `==`":["is"],"since `Enum.zip`":["will"],"since `_empty?`":["should"],"since `if`":["statements"],"since a":["range"],"since after":["following"],"since all":["I'm"],"since been":["fixed."],"since each":["of"],"since everything":["else"],"since it":["is","doesn't","defaults","only","will","extends","doesn't","only","tells"],"since it'd":["consider"],"since it's":["going","a","only","only","only","not","actually"],"since lists":["are"],"since most":["people"],"since otherwise":["I"],"since that":["is","looks"],"since that's":["built-in","one","what"],"since the":["input","input","person","syntax","result","Erlang","keys","function","error","compiler","first"],"since there's":["only","a","no"],"since they":["mean","mean","are"],"since this":["would","matches"],"since we":["don't","had","are"],"since what":["it's"],"since when":["functions"],"since you":["just","can","don't","can","don't","initialize","can","have","can","noticed"],"since you're":["not","specifying"],"since you've":["marked"],"sing function.":["There's"],"sing songs":["about"],"sing would":["help."],"sing(from_bottles, to_bottles":["//"],"sing(start, stop":["//"],"sing(start_verse, end_verse":["//","//"],"sing(start_verse, end_verse)":["when"],"sing. But":["I"],"sing. I":["found","wish"],"sing/1 can":["call"],"sing/2 function,":["at"],"sing/2 function.":["The"],"singalong I":["know"],"singalong instead":["of"],"singalong seems":["unnecessary."],"singalong. And":["now"],"singing a":["single"],"single \"right\"":["answer"],"single 's'":["that"],"single `cond`":["(no"],"single argument":["that"],"single binary.":["Just"],"single char":["identifiers","names"],"single character":["identifiers"],"single character,":["it","not"],"single character.":["\u003c\u003c??\u003e\u003e"],"single clause":["for"],"single clause.":["Anyway,"],"single element":["as","as"],"single elements":["(which","(which"],"single expression":["(which","in","btw"],"single function":["is"],"single function,":["I"],"single function;":["using"],"single inline":["function"],"single letter":["and","variable"],"single letters":["mostly"],"single line":["with","function,","per","function","if",";-)","if","functions","methods.","solution.","it's","if","and"],"single line\"":["but"],"single line,":["that's"],"single line.":["It's"],"single lines,":["but"],"single list.":["Instead"],"single method":["with","with"],"single object":["(in"],"single one.":["That"],"single or":["double"],"single pass.":["The"],"single pass?":["Hints:","Consider"],"single pipeline":["of"],"single place":["and"],"single private":["function"],"single process":["instance,"],"single quoted":["strings."],"single quotes":["are","strings"],"single reference...":["but"],"single regex":["for"],"single responsibility":["principle?","principle"],"single return":["value"],"single reverse":["at"],"single silence?()":["function."],"single space.":["Besides"],"single string":["rather","or"],"single test":["case."],"single traversal":["using",":-)"],"single usage,":["but"],"single value,":["which"],"single verse":["even"],"single word":["in"],"single word,":["possibly"],"single word?":["Is"],"single, consistent":["level"],"single-expression functions,":["using"],"single-line comments":["above"],"single-line functions":["totally"],"singular form":["of"],"sintax is":["common"],"site (such":["as"],"site I'm":["farthest"],"site is":["a"],"site to":["the"],"site! The":["Elixir"],"site, and":["it"],"site? I":["can't"],"situation are":["`entries`"],"situation). I'm":["not"],"situation. Thanks":["for"],"situations are":["broader"],"situations. Granted,":["many/most"],"size of":["the","the"],"size(1)], phone":["::"],"size(msg) ==":["0."],"size(t) -":["1)`"],"size, is":["that"],"size, method":["naming"],"size. It":["might"],"skeptical of":["the"],"skills. I":["was"],"skimmed over":["before."],"skimmed the":["documentation"],"skip that":["null","step"],"skipped ahead":["(otherwise"],"skipped or":["commented"],"slam me":["in"],"slapped the":["characters"],"slash delimiter":["myself"],"sledgehammer that":["uses"],"sleep) before":["I"],"slice and":["at"],"slice on":["line"],"slice or":["a"],"slice with":["hardcoded"],"slight difference":["in"],"slight trick":["you"],"slightly awkward":["way"],"slightly better":["than"],"slightly better,":["but"],"slightly bug":["me"],"slightly decreases":["readability."],"slightly difference":["syntax"],"slightly different":["approach","approach","(1","sense","variable","than","makes"],"slightly different,":["they"],"slightly easier":["to"],"slightly faster":["code","too).","(no","(as"],"slightly faster.":["If"],"slightly harder":["to"],"slightly in":["the"],"slightly less":["intention-revealing).","nice","ugly"],"slightly longer":["than"],"slightly misinterpreted":["feedback"],"slightly more":["descriptive","semantically","semantically","complicated","complexity","efficient","efficient,","common","\"clever\",","efficient","compact","generic"],"slightly nicer":["to"],"slightly optimize":["by"],"slightly quicker":["`silence?/1`"],"slightly shorter":["and"],"slightly simpler":["solution"],"slightly simplify":["by"],"slightly slower":["than"],"slightly slower,":["to"],"slightly so":["that"],"slightly speed":["up"],"slightly strangely":["to"],"slightly too":["long"],"slightly uncomfortable":["with"],"sloppy here":["and"],"slow concat":["for"],"slow down":["anymore."],"slow for":["my"],"slow on":["`Regex.scan`,"],"slower -":["if"],"slower than":["my","the","yours","your","the"],"slower, but":["I"],"slower, to":["implement"],"slowless can":["be"],"slowly changing":["though."],"slows down":["future"],"sluggish for":["this"],"small (and":["optional)"],"small `@dejon":["acc"],"small amount":["of","of"],"small and":["beautiful"],"small as":["possible."],"small boo-boo":["in"],"small change":["later,"],"small changes":["to"],"small comment.":["Usually"],"small differences...":["any"],"small enough,":["there's"],"small example":[":)"],"small functions":["([see"],"small functions,":["which","especially","but"],"small improvements,":["what"],"small inputs":["but"],"small lists":["that","/"],"small lists\"":["test.)"],"small lists,":["they"],"small nit":["on"],"small nit,":["the"],"small nit:":["I"],"small note":["on"],"small number":["of"],"small numbers":["to"],"small one-offs":["like"],"small one.":["A"],"small performance":["benefit","penalty,"],"small set":["of"],"small stacks":["which"],"small suggestion:":["you"],"small thing":["though:"],"small thing:":["is","you","`&({&1,","you","you"],"small things:":["the"],"small tip":["to"],"small tip:":["`List.zip`"],"small tuple":["update"],"small. However,":["that"],"smaller an":["interface,"],"smaller functions":["to"],"smaller functions,":["each"],"smaller pieces,":["but"],"smaller. Bonus":["points"],"smallest anagram":["(empty"],"smallest pieces":["possible,"],"smart Elixir/Erlang":["is)"],"smart about":["Unicode."],"smart enough":["to"],"smell for":["Elixir."],"snake_case instead":["of"],"snake_case is":["the"],"snake_case so":["I"],"snakecase seems":["to"],"sneek peek":["of"],"snooze left":["today,","today.\""],"snooze. Take":["a"],"so \"What?":["\""],"so I":["think","ditched","think","can","could","just","end","can","changed","can","think","like","looked","can't","don't","wasn't","could","will","did","ended","thought","don't","have","decided","wouldn't","might","don't","have","could","have","had","used","don't","don't","assume","think","guess","was","can","don't","don't","would","skipped","played","modified","used","may","doubt","removed","can","had","split","wrote","might","didn't","can","felt","chose","don't","was","appreciate","could","tend","figured","just","doubt","can","could","can","wanted","would"],"so I'd":["really","say"],"so I'll":["remove","resubmit","do","add","leave","think"],"so I'm":["probably","still","unfamiliar","sure","open","not","coming","not","comfortable","not","not","going","probably","going","not","not"],"so I've":["likely","become"],"so List.zip":["doesn't"],"so `Enum.join([:a,":["2])`"],"so `acc`":["and"],"so `cond`":["is"],"so a":["named"],"so all":["the","of","of"],"so allow":["me"],"so any":["violation"],"so anything":["that"],"so anyway":["to"],"so both":["of"],"so can":["you"],"so comfortable":["using"],"so commenting":["out"],"so common":["people"],"so complex":["expression"],"so could":["use"],"so didn't":["know"],"so digits":["are"],"so don't":["let","worry,"],"so each":["response"],"so effective":["for"],"so ended":["up"],"so even":["the"],"so every":["word"],"so factored":["out"],"so far":["though)","though)","has"],"so far,":["could","because"],"so fast,":["I","I"],"so first":["of"],"so for":["String.length(input)"],"so given":["enough"],"so haven't":["used"],"so he":["said...\""],"so i":["tried"],"so i'll":["leave"],"so if":["you","you","you","you","you","your","your"],"so in":["the","`kind_of_sentence`:","Elixir"],"so it":["might","requires","gets","limits","seems","was","has","works","won't","would","must","tells","doesn't","matches","can","will","will","will","will"],"so it'd":["be"],"so it'll":["match"],"so it's":["never","gone","not","no","not","fine","a","not"],"so line":["15"],"so little":["overhead"],"so long":["for"],"so many":["languages","different","questions...","functions,","temporary","of","different","nested"],"so maybe":["2","`strand`","that's"],"so much":["better.","cleaner!","as","reason","work?","like","fun.","for","for","about","teach","about","regular","duplication","with","going","in","boilerplate","in","for","easier","for","for","slower","for","code.","code."],"so much!":["Going"],"so much.":["I've"],"so my":["code","suggestion","interpolation"],"so natural":["in"],"so no":["need"],"so obvious":["when"],"so obvious.":["Well,"],"so often":["pass"],"so one":["may"],"so perfect":["documentation"],"so performance":["stuff"],"so please":["just","do"],"so powerful":["that"],"so quickly":["and"],"so readable!":["The"],"so regex":["was"],"so satisfying":["in"],"so shorter":["lines"],"so should":["I"],"so simple":["that"],"so simple,":["but"],"so slightly":["faster","harder"],"so something":["like"],"so spaced":["out"],"so standard":["that"],"so subtle":["nudges"],"so sure":["about","how","\"bare"],"so sure.":["I've","I've"],"so take":["what","these"],"so thanks":["for","for","again"],"so that":["you","all","you","other","you","you","the","a","i","I","it's","I","it","you","e.g.","you","it's","when","the","you","led","might","the","way","their","was","no","I","it","the","the","the","`keep`","won't","you","it","I'm","if","I","you"],"so that'll":["be"],"so that's":["a","not","there.","there."],"so the":["default","answer","order","result","benefit","elixir","code","new","reader","test"],"so there":["is"],"so there's":["pretty","pretty","no","useful","no"],"so they're":["reusable","probably"],"so things":["like"],"so this":["isn't","is","is"],"so those":["operations"],"so to":["me","understand"],"so unicode-awareness":["is"],"so upon":["equality"],"so use":["what","the","the","Elixirs"],"so used":["to"],"so utterly":["trivial"],"so we":["know"],"so what's":["the"],"so when":["they"],"so will":["change"],"so with":["an"],"so would":["mean"],"so wouldn't":["those"],"so you":["can","could","could","can","could","know,","could","are","don't","need","could","don't","end","could","don't","can","can","want","don't","can","need","can","still","can","can","can","can","tend","can","must","didn't"],"so you'd":["have","have"],"so you'll":["end","need","also"],"so you're":["not","maybe"],"so your":["original"],"so, I":["imposed"],"so, but":["you"],"so, can":["you"],"so, could":["you"],"so, mostly":["for"],"so, probably":["my"],"so, then":["the"],"so, this":["has"],"so, what":["does"],"so, yeah,":["I"],"so, you":["might"],"so. Given":["that"],"so. I":["also","guess"],"soemthing like":["is_silence?"],"sold on":["`remove_punctuation_and_to_words`"],"sole source":["of"],"solely by":["the"],"solely on":["P,"],"solicit more":["input"],"solicitor of":["conversation,"],"solid to":["me,"],"solid, although":["the"],"solution -":["I've"],"solution I":["think","like"],"solution I've":["seen","seen"],"solution a":["bit","bit"],"solution and":["I","forces","my"],"solution as":["possible"],"solution at":["all."],"solution better.":["First"],"solution built":["around"],"solution but":["I","I"],"solution by":["looking"],"solution could":["work"],"solution despite":["the"],"solution didn't":["come"],"solution does":["indeed"],"solution for":["a","elixir.","a","`list`","`count`"],"solution in":["the","clojure","the","which","Haskell.","mind?"],"solution incorporated":["`defp`"],"solution instead":["to"],"solution into":["VIM"],"solution is":["pretty","good","great.","the","the","quite","a"],"solution it's":["not"],"solution like":["that."],"solution looks":["good.","good."],"solution make":["sense."],"solution may":["have"],"solution most":["people"],"solution out":["of"],"solution slightly":["better,"],"solution so":["you","that"],"solution than":["```\"\"","\u003ccode\u003e\"\"","`Dict.merge`,"],"solution that":["is","used","doesn't","is","does.","passes","passes"],"solution though":["-"],"solution to":["that","somehow","copy/paste...","this","that","this","work"],"solution too,":["but"],"solution using":["the","unquote","a","filter"],"solution was":["very","to","a"],"solution where":["the"],"solution which":["has"],"solution with":["just","shortcuts"],"solution would":["be.","not"],"solution yet,":["will"],"solution you":["suggested"],"solution!! ,":["for"],"solution(next submission).":["I"],"solution, I'll":["try"],"solution, and":["in"],"solution, but":["`Regex.scan`","it's","it's","I'm","I","I","I","I"],"solution, including":["the"],"solution, more":["verbose"],"solution, though":["I"],"solution, you":["get"],"solution, you'd":["have"],"solution. :)":["Consider"],"solution. Are":["you"],"solution. I":["couldn't","went"],"solution. It":["still"],"solution. It's":["very"],"solution. The":["extra"],"solution. They're":["not"],"solution. Would":["really"],"solution? Can":["it"],"solution? Interested":["in"],"solutions I":["did"],"solutions are":["fun."],"solutions than":["specific"],"solutions that":["include"],"solutions to":["be","operations"],"solutions. Adding":["abstractions"],"solutions? I":["thought"],"solvable by":["some"],"solve a":["problem","different"],"solve problems":["the"],"solve the":["problem","problem"],"solve this":["problem","exercise","problem,","really","exercise"],"solve with":["reduce,"],"solved in":["some"],"solved it":["was","is:","simply,"],"solved the":["exercise:"],"solved them":["all"],"solved this":["I"],"solved. But":["memoizing"],"solves is":["`@johann`."],"solves the":["recur-forever"],"solving an":["exercise."],"solving it":["for"],"solving the":["problem"],"some \"Greeting.classify\"":["function"],"some OO":["in"],"some String":["functions"],"some `String`":["functions"],"some additional":["test"],"some arbitrarily":["nested"],"some basic":["extraction"],"some benefits":["if"],"some better":["way."],"some breaking":["up"],"some cases":["they"],"some changes":["based","that"],"some changes.":["I"],"some clarity":["by"],"some cleanup":["I"],"some code":["with"],"some comparisons,":["and"],"some confusion":["for"],"some custom":["functions"],"some descriptive":["overlap"],"some difficulty":["following"],"some discussion":["on","in"],"some documentation":["and","in"],"some duplication":["without","in","between","between"],"some duplication,":["but"],"some easier":["method"],"some edge":["cases"],"some effort.":["Worth"],"some elixir-y":["goodness."],"some episodes":["I've"],"some examples":["in"],"some explaining,":["I"],"some external":["priority?"],"some extra":["newlines"],"some extraction":["here."],"some feedback":["on","on","on"],"some feedback.":["I",":)"],"some focus":["on"],"some form":["of"],"some functions":["private","from"],"some good":["ways","idioms.","feedback"],"some great":["feedback"],"some help":["via","to","getting"],"some help.":["**note**"],"some helper":["functions"],"some helpful":["nitpicks"],"some idea":["of"],"some ideas":["about"],"some improvements":["here"],"some insight":["into"],"some issues":["later"],"some kind":["of"],"some language-specific":["goodness."],"some later":["work.","exercises"],"some learning":["and"],"some letters":["to"],"some light":["on"],"some logic":["by"],"some low-level":["stuff"],"some more":["concise","functions…","research","specific","details."],"some more,":["99","99"],"some occasions,":["for"],"some of":["the","your","the","these","these","your","that","the","the","the","the","those","the","these","the","your","the","gvaughn's","the","the","the","the","this","the","the","your","those","these"],"some other":["command-line","not-so-meaningful","way","way","tracks."],"some out":["when"],"some parentheses":["to"],"some parts":["and"],"some pattern":["matching.","matching"],"some pattern-matching":["purity,"],"some people":["actively","think"],"some point":["the"],"some point.":["Even","Even","Even","Even","Even"],"some pointers":["from"],"some pointers,":["I"],"some private":["functions","methods","methods"],"some programmatic":["way"],"some quick":["googling,"],"some random":["intermediate"],"some rather":["elegant","large"],"some reading":["up..."],"some really":["interesting"],"some reason":["it","I","the","something","I","I","I","I","just","all","I"],"some reasons":["why"],"some refactoring":["later."],"some self-documentation":["to"],"some serious":["critique"],"some shared":["logic."],"some shortcuts":["IMO:"],"some significant":["improvements.","improvements.","improvements."],"some simple":["clauses"],"some small":["improvements,"],"some sort":["of","inside","of","of","of","of","of"],"some space":["for"],"some specific":["functionality"],"some strange":["reasons"],"some support":["for"],"some tail":["recursion."],"some tested":["docs","documentation"],"some text":["has"],"some things":["out","that","that"],"some thought,":["I"],"some thoughts":["about"],"some thoughts.":["That's"],"some time":["thinking","trying","going"],"some time.":["Some"],"some trails":["can"],"some tricks":["for"],"some unicode":["corner","characters"],"some unnecessary":["work"],"some useful":["stuff!"],"some very":["trivial"],"some way":["it's","around"],"some well-named":["private"],"some without":["sacrificing"],"somebody else":["influential"],"somebody uses":["a"],"somebody would":["have"],"somehow `a":["|\u003e"],"somehow infer":["that"],"somehow missed":["Dict's"],"somehow your":["`word-count`"],"somehow? Does":["your"],"someone adds":["a"],"someone at":["the"],"someone can":["point"],"someone could":["read"],"someone else":["--","nitpicked","pointed","having"],"someone has":["written"],"someone hears.":["`void?`"],"someone in":["a"],"someone is":["shouting"],"someone learning":["the"],"someone might":["call"],"someone more":["experienced"],"someone point":["that"],"someone reading":["your"],"someone returning":["an"],"someone suggested":["in"],"someone tells":["you"],"someone that":["has","spends"],"someone who":["doesn't","is","does"],"something \"without":["them"],"something =":["something"],"something I":["missed","haven't","need","can"],"something I'd've":["thought"],"something I'm":["still"],"something I've":["picked"],"something a":["little"],"something about":["what","the","Elixir's"],"something advanced":["used"],"something akin":["to:"],"something and":["you","have"],"something arbitrarily":["nested."],"something as":["simple","powerful"],"something because":["I"],"something but":["How","when"],"something called":["\"funs","Pipe"],"something completely":["different."],"something could":["or"],"something descriptive":["of"],"something different":["than"],"something different.":["Question"],"something else":["(note","elixir","along"],"something else,":["probably"],"something else.":["I","What"],"something else?":["I"],"something even":["simpler"],"something every":["day."],"something extremely":["obvious"],"something from":["this"],"something full":["of"],"something i":["knew"],"something i'm":["happy"],"something in":["place","mind"],"something is":["all","used.","not","not","a"],"something less":["general"],"something liiiiike":["-"],"something like":["`candidates`","that","\"silent?\"","String.last(message)","this:","\"silent?\"","\"silent?\"","this","i18n,","e.g.:","`&1","```sentence","`%r/[a-z0-9]+/`","response_for","`@maeve","```","that","this","this:","`is_pause?`","StatementType.","```","`Enum.count`","`words_in_sentence`,","\u003ccode\u003eupdate_words(&amp;1,","`string_to_list`","```count_words_in_list```.","`rna_counterpart(nucleotide)`","that.","an","`String.uniq`","this:","`mutation?`","update,","`[area_code,","`Regex.match?(%r/^[\\p{Sc}\\p{S}]+$/,","this:","the","that.","this","`Enum.map(comparisons,","that","this:","that.","frequencies","`predicate`","`%r/\\w+/`","`acc`.","String.starts_with(\"","`numerals_worker`","that.","that,","(warning:","`\\p{L}`","`contains_letters?`","this:","`silence?`"],"something like:":["`Enum.map"],"something longer":["helps"],"something many":["people","people"],"something more":["meaningful","meaningful","meaningful","meaningful","specific?","like","succinct"],"something native":["to"],"something new":["out"],"something passable":["and"],"something seems":["worthwhile"],"something semantically":["equivalent"],"something simpler":["with"],"something so":["simple,"],"something specific":["about"],"something surrounded":["by"],"something that":["could","looks","wasn't","can","feels","obviously","isn't","would","will","can't","I"],"something the":["hard"],"something this":["short"],"something to":["pick","try","do","do","something","do","do","consider."],"something up":["and"],"something we":["can"],"something weird":["before"],"something you":["prefer","have"],"something |\u003e":["String.strip`","String.strip"],"something ||":["\"\"`","\"\"```","\"\"`.","\"\""],"something, but":["apparently","I"],"something, see":["if"],"something. Never":["seen"],"sometimes I":["find"],"sometimes come":["in"],"sometimes for":["things"],"sometimes forget":["what"],"sometimes not.":["You"],"sometimes return":["an"],"sometimes sort":["the","the"],"sometimes using":["lists"],"sometimes, but":["in"],"somewhat afraid":["of"],"somewhat burdensome":["to"],"somewhat cheating":["because"],"somewhat disagree":["with"],"somewhat easier":["as","to"],"somewhat familiar":["with"],"somewhat misleading":["from"],"somewhat more":["idiomatic"],"somewhat redundant.":["Between"],"somewhat scared":["(probably","to"],"somewhat subtle":["bug"],"somewhat torn,":["I"],"somewhere around":["version"],"somewhere else":["before"],"somewhere, don't":["really"],"somewhere. If":["I"],"song are":["going"],"song as":["*content*"],"song text":["3"],"song to":["change"],"song). If":["you"],"song-generator for":["random"],"songs about":["arbitrary"],"soon. However,":["I"],"soon. If":["you"],"sooner or":["later:"],"sooo …":["I"],"sorry I":["should","wasn't","forgot"],"sorry about":["that."],"sorry but":["you"],"sorry for":["this","the"],"sorry if":["that's"],"sorry it":["seems"],"sorry, @carole,":["my"],"sorry, I":["don't","was","was"],"sorry, didn't":["know."],"sorry, not":["2,"],"sorry, this":["is"],"sorry, yeah":["the"],"sorry. I":["still"],"sort `word`":["n"],"sort a":["list"],"sort and":["de-duplicate"],"sort by":["grade"],"sort for":["each"],"sort initial":["word"],"sort inside":["of"],"sort letters":["with"],"sort of":["conditional","default","pattern","dynamic","[`sprintf`](http://apidock.com/ruby/Kernel/sprintf)","the","interchangeable?","see","feeding","goes","thing","map_with_index","see","what","the","protocol","thing","thing","an","weird","hard"],"sort on":["`sort_codepoints(word)`.","entry"],"sort out":["the"],"sort solution":["I"],"sort the":["main","main","\"root\"","\"root\"","base","baseword","baseword","base","chars","list","list","char","numbers.","base","individual","grades,"],"sort word":["once,"],"sort(word1) ==":["sort(word2)"],"sort. The":["`:lists.sort`"],"sort_letters(&amp;1) ==":["sort_letters(&amp;2)"],"sorted (hint:":["think"],"sorted ==":["sorted_word)"],"sorted I":["think"],"sorted anagram":["and"],"sorted and":["downcased","unsorted"],"sorted array":["back"],"sorted arrays":["in","directly."],"sorted base":["for"],"sorted character":["lists."],"sorted characters":["for"],"sorted downcased":["letters","letters","\"word\"","`base`"],"sorted exactly":["once."],"sorted is":["at"],"sorted over":["and"],"sorted version":["around"],"sorted word":["(ruby"],"sorted you":["don't"],"sorted, you":["call"],"sorted. At":["the"],"sorted. Interesting.":["I"],"sorted. Then":["you"],"sorted_cp_list word":["do"],"sorted_cp_list(test_match) ==":["sorted_cp_list(word)"],"sorted_letters(&amp;1)) works.":["It's"],"sorted_letters(&amp;1)` or":["`&amp;(sorted_base_letters"],"sorted_word =":["sort(word)"],"sorted_word ==":["sort(anagram)"],"sorted_word) appears":["to"],"sorting \"word\"":["once"],"sorting `word`":["n"],"sorting baseword":["once"],"sorting by":["grade."],"sorting could":["be"],"sorting every":["time"],"sorting in":["which"],"sorting it":["when","on"],"sorting letters":["thing"],"sorting method":["is"],"sorting of":["the"],"sorting seems":["intrinsic"],"sorting test.":["Thanks"],"sorting the":["string.","values.","lengths","lengths","lengths...","sides,","inputs","names.","students","whole","grades"],"sorting them.":["Can"],"sorting, it's":["fast"],"sorts the":["given","school."],"sorts to":["the"],"sound better":["and"],"sound like":["a","a"],"sound too":["negative,"],"sounds like":["an","it's","shouting,","it's","it's","it's"],"sounds more":["relevant"],"sounds similar":["to"],"sounds? Could":["you"],"source HashDict":["to"],"source for":["`Enum.flat_map`","range"],"source key/value":["pairs,"],"source of":["that","`nil`s,"],"source once":["in"],"source order":["is"],"source shows":["no"],"source word":["is"],"source. It":["makes"],"sources of":["problems."],"sources, it":["was"],"space `def":["silence?(content"],"space after":["the"],"space and":["would","comma"],"space before":["\"silence?\""],"space between":["\"Enum.sort\""],"space character":["(for"],"space for":["some"],"space in":["my"],"space indenting":["in"],"space is":["tight."],"space on":["line"],"space than":["necessary"],"space there...":["no"],"space tradeoff).":["Consider"],"space vertically.":["Much"],"space without":["too"],"space&gt;_. However,":["I"],"space). The":["caret"],"space, but":["you"],"space, letter,":["or"],"space-age: http://exercism.io/submissions/c1fc255d0be5a82dbc0033d9.":["I"],"space. Besides":["being"],"space. I":["don't"],"space/time optimization":["though."],"spaced out":["as"],"spaces (e.g.":["in"],"spaces and":["commas."],"spaces for":["indentation.","indentation."],"spaces in":["the","the"],"spaces instead":["of"],"spaces or":["letters?"],"spaces per":["indentation","indentation"],"spaces would":["be"],"spaces you":["could"],"spaces, but":["it"],"spaces, join":["the"],"spacing when":["I"],"spanning over":["a"],"speak against":["it,"],"speaking is":["saying"],"speaking it":["refers"],"speaking it's":["better","not"],"speaking, I":["think","suppose"],"speaks more":["to"],"spec `reduce_with/3`.":["I"],"spec and":["docs"],"spec because":["of"],"spec btw,":["there"],"spec for":["the","the"],"spec line":["correctly)"],"spec syntax":["errors"],"spec that":["didn't"],"spec'd (if":["I"],"spec, but":["if"],"spec. That":["does"],"spec. What’s":["the"],"spec... but":["this"],"special case":["explicitly.","definition.","stuff."],"special case,":["but"],"special case.":["The","When"],"special cased":["to"],"special casing":["2","`2`"],"special form":["to"],"special form](http://elixir-lang.org/docs/stable/Kernel.SpecialForms.html#&amp;/1)":["`&amp;/1`"],"special kind":["of"],"special logic":["to"],"special syntax":["for","for"],"special. There's":["a"],"specialised list":["monad"],"specially the":["concat"],"specially with":["methods","methods"],"specifc tips":["at"],"specific (from":["the"],"specific about":["what"],"specific atom":["and"],"specific case":["falls","of"],"specific character":["classes,"],"specific code":["you're"],"specific comments":["in"],"specific dictionary":["implementation"],"specific dictionary,":["`Dict`"],"specific example,":["it's"],"specific functionality":["desire"],"specific functions":["is","and"],"specific implementation":["of"],"specific implementation.":["By"],"specific methods":["for"],"specific methods.":["I"],"specific ones.":["In","In"],"specific reason":["for"],"specific response":["for"],"specific to":["dna,","the"],"specific? In":["contrast,"],"specifically about":["better"],"specifically designed":["to"],"specifically for":["performing","one","`test_only_numbers`"],"specifically the":["HashDict.update"],"specifically. The":["most"],"specifics of":["`List.zip`","wording"],"specifics, I":["can"],"specified anywhere":["so"],"specified in":["assignment.","the","assignment."],"specify decisions":["based"],"specify different":["versions"],"specify the":["start","arguments."],"specify which":["characters"],"specifying a":["variable."],"specifying my":["function"],"specifying the":["function"],"specifying what":["you"],"specs like":["that,"],"specs using":["huge"],"specs, so":["I'm"],"spectacular going":["on,"],"speech (i.e.":["strings,"],"speech ==":["\"\"","String.upcase(speech))"],"speech or":["something"],"speed (one":["less"],"speed up":["various","this"],"speed, I":["could"],"spelled incorrectly.":[":)"],"spelling and":["only"],"spend enough":["time"],"spend more":["time"],"spend some":["time","focus"],"spends a":["lot"],"spent a":["bunch","lot"],"spent some":["time","time"],"spent the":["time"],"spent time":["refactoring"],"spiel. That":["said,"],"spin up":["another"],"spirit of":["the","keeping"],"split `Words.update/2`":["into"],"split a":["string","string"],"split and":["filter","strip"],"split but":["moved"],"split by":["Regex.scan."],"split directly":["into"],"split in":["`String.split`?","two:"],"split into":["more","multiple"],"split it":["into","again","and","in"],"split on":["what"],"split out":["the","the"],"split the":["function","string","text"],"split them":["up"],"split up":["the"],"split with":["a"],"split |&gt;":["count_words"],"split |\u003e":["aggregate"],"split, and":["no"],"split. I":["would"],"split. It's":["an"],"split/1 from":["the"],"split/scan and":["a"],"split_into_words sometimes":["return"],"splits a":["string"],"splits words":["that"],"splitting -":["and"],"splitting anagrams?":["into"],"splitting and":["downcasing.","joining."],"splitting on":["`\\s`."],"splitting out":["the"],"splitting the":["string","string.","input","phrase","string"],"splitting up":["the","the","into"],"splitting will":["also"],"splitting you":["could","could"],"spot might":["have"],"spot of":["mine."],"spot on":["about"],"spot the":["control"],"spotting that.":["It"],"spread out":["on"],"square by":["seven,"],"square function,":["but"],"squared which":["seems"],"squeeze them":["onto"],"squint, it":["almost"],"squished together":["with"],"stab at":["elixir,","it,","it,"],"stable release":["is"],"stack entry":["is","is","is","has","of","is","is","is","was","is","is","is","has","of","is","is","is","was","is","is","is","has","of","is","is","is","was","is","is","is","has","of","is","is","is","was","is","is","is","has","of","is","is","is","was"],"stack frame":["of"],"stack of":["a"],"stack overflow":["at","at","exception","exception","at","in","for","at","at"],"stack overflow,":["right?"],"stack overflows":["(I"],"stack space":["than"],"stack trace":["shows"],"stacks which":["is"],"stage. Am":["I"],"stand alone":["and"],"stand right":["now"],"standard (acceptable":["and"],"standard `Dict`":["functions"],"standard `Enum`":["functions,"],"standard constants":["for"],"standard elixir":["names"],"standard function":["to","that"],"standard functions":["from"],"standard is":["probably"],"standard libraries":["tend"],"standard library":["which","too,","I","and","and","use"],"standard library,":["or","or","and"],"standard library.":["I'm"],"standard mistakes":["on"],"standard modules...it":["feels"],"standard nit":["about"],"standard solution":["to","to"],"standard style":["code."],"standard that":["it"],"standpoint it":["seems"],"stands aside.":["Would"],"stands with":["that"],"star of":["the","exercism"],"start -":["is","multiple","things"],"start and":["end","end..."],"start at":["the"],"start by":["defining"],"start failing":["and"],"start from":["an"],"start getting":["some"],"start going":["haywire."],"start incorporating":["some"],"start of":["a"],"start tailoring":["the"],"start to":["be"],"start with":["really","my","tail"],"start)` form":["in"],"start, instead":["of"],"start, or":["just"],"start. Functional":["elixir"],"start. I'm":["on"],"start. So":["I"],"start/end of":["the"],"start_link and":["then"],"start_link, then":["look"],"start_verse \u003c=":["end_verse\u003c/code\u003e"],"started developing":["from"],"started doing":["it,"],"started down":["a"],"started guide:":["http://elixir-lang.org/getting_started/2.html."],"started learning":["Elixir."],"started on":["the"],"started out":["with","with","doing","red,"],"started seeing":["every"],"started to":["extend"],"started with":["elixir,","just"],"started writing":["this"],"starters, HashDict":["implements"],"starting \u003e=":["0"],"starting exercism,":["so"],"starting in":["Elixir"],"starting on":["line","elixir."],"starting to":["dive","learn"],"starting with":["`downcase`,","the"],"starts to":["get"],"state in":["the"],"state is":["hidden"],"state of":["the"],"state, and":["if"],"state, but":["rather"],"stated explicitly":["anywhere"],"stated in":["the"],"statement as":["@mossie"],"statement because":["I"],"statement by":["moving"],"statement can":["be"],"statement def":["seems"],"statement for":["`word"],"statement in":["function","the","the","`filter`,"],"statement is":["a","just","\"empty\"","a","what","absolutely"],"statement module.":["And"],"statement to":["find"],"statement type":["out"],"statement would":["you"],"statement you":["could"],"statement, \"\"":["=="],"statement, but":["I"],"statement, or":["where"],"statement. An":["example"],"statement. I":["assume"],"statement? function":["by"],"statements (i.e.":["\"@#$%#\""],"statements are":["discouraged"],"statements bad":["style?"],"statements he":["hears,"],"statements in":["your","my"],"statements into":["private"],"statements is":["interesting,"],"statements much":["more"],"statements seems":["to"],"statements since":["it"],"statements when":["possible"],"statements, and":["as"],"statements, but":["`empty?`"],"statements. Can":["you"],"statements. This":["lets"],"statements. `question?/1`":["is"],"statements: they":["allow"],"states it":["is"],"status fool":["you."],"stay below":["80"],"stay generally":["available"],"stay here":["and"],"stay in":["Elixir","the"],"stay recursive,":["you'd"],"stay with":["`List.flatten`"],"stayed away":["from","from"],"stays on":["top"],"stdlib can":["do"],"stdlib or":["functional"],"stdlib, it":["tends"],"stdlib, look":["in"],"stdlib, the":["`foo?`"],"steering clear":["of"],"step (1":["element","element"],"step (for":["example"],"step back":["and","and"],"step forward,":["I"],"step from":["your","the"],"step further":["and","and","and"],"step in":["the","the"],"step is":["very","a"],"step of":["the","the","your"],"step would":["take","take"],"step yourself":["(ie"],"step. I":["know"],"step; that":["seems"],"steps are":["easy"],"steps but":["2.000.000","2.000.000"],"steps in":["`count`"],"steps into":["the"],"steps it":["takes."],"steps of":["your","splitting"],"steps. The":["right","required","right","required"],"stick out":["and"],"stick to":["guard","master,"],"stick with":["the","this","how","`&(&1+&2)`."],"sticky test":["I"],"still a":["little","monster,","newbie","little","newbie","newbie"],"still an":["Elixir"],"still another":["way,"],"still applicable.":[":"],"still be":["in","useful.","more"],"still being":["as"],"still check":["for","for"],"still commented":["out?"],"still do":["*in"],"still doesn't":["work"],"still don't":["see"],"still downcase":["the","the"],"still eager":["for"],"still essentially":["the"],"still exclude":["phrases"],"still fairly":["new"],"still feel":["like"],"still feels":["like"],"still figuring":["out","list"],"still find":["it"],"still finding":["my"],"still getting":["the"],"still going":["to"],"still greater":["than"],"still has":["two"],"still have":["to","to","to"],"still here,":["just"],"still in":["the"],"still interested":["to"],"still keep":["the"],"still keeping":["things"],"still learned":["something"],"still learning":["my","Elixir,","elixir,","here,","OTP"],"still like":["how","to"],"still looking":["for"],"still looks":["like"],"still maintain":["the"],"still missing":["a"],"still more":["I"],"still need":["to","to","to","to","to"],"still needed":["a"],"still needs":["to"],"still new":["to","to"],"still not":["quite","sure","getting","sure","O(n)"],"still open":["for"],"still pass,":["and"],"still passed":["to"],"still picking":["up"],"still pipeline":["the"],"still pre":["1.0,"],"still prefer":["having","the"],"still quite":["new"],"still rather":["unsure","efficient:"],"still receive":["nil"],"still recompute":["`length(a)`"],"still repeating":["the"],"still return":["a"],"still several":["orders","orders"],"still some":["cleanup"],"still sort":["`word`"],"still strikes":["me"],"still struggle":["to"],"still stuck.":["Anybody?"],"still submit":["new"],"still taking":["the"],"still the":["case","best"],"still think":["there","I'd","`reduce`","sorting"],"still throw":["and"],"still torn":["over"],"still try":["to"],"still trying":["to","to","to","to","to"],"still used":["in"],"still uses":["the"],"still using,":["some"],"still very":["readable!","clean.","much"],"still waiting":["for"],"still working":["on"],"still works":["without"],"still, I'm":["not"],"still, use":["a"],"stock /":["2"],"stoked that":["you"],"stomach `acc`":["in"],"stop //":["0)"],"stop after":["seeing"],"stop combing":["through"],"stop commenting":["now!"],"stop giving":["you"],"stop nitpicking":["this"],"stop the":["tests"],"stopped doing":["that"],"stopping being":["lazy"],"stopping? I":["like"],"store and":["buy","buy","buy"],"store anything":["in"],"store the":["result"],"store them":["as"],"stored and":["relied"],"storing a":["downcased"],"storing the":["`target_letters`."],"story (and":["is"],"story I":["felt"],"story all":["at"],"story at":["whatever"],"story better":["if"],"story more":["naturally."],"story of":["what's"],"story short,":["the"],"story\" a":["little"],"str =":["\"car"],"str ==":["nil,"],"str |\u003e":["String.downcase"],"straight forward":["way"],"straight out,":["but"],"straight ports":["of"],"straightening me":["out."],"straightforward algorithm":["was"],"straightforward and":["you"],"straightforward as":["an"],"straightforward code":["to"],"straightforward exercise":["until"],"straightforward positive":["(i.e."],"straightforward space/time":["optimization"],"straightforward, but":["there's","I'm"],"straightforward. I":["haven't"],"strain function":["that"],"strain that":["only"],"strand (`right`":["in"],"strand (which":["doesn't"],"strand before":["doing"],"strand if":["it"],"strand in":["the"],"strand is":["longer","shorter"],"strand need":["to"],"strand will":["be"],"strand with":["`count`"],"strand. So,":["this"],"strands of":["DNA!\"","DNA\""],"strands were":["the"],"strange definition":["of"],"strange reasons":["the"],"strange that":["they","`contains_all_chars?`"],"strange thing":["at"],"strange to":["have"],"strange. Firstly,":["since"],"strangely to":["me,"],"strangely, it":["wasn't"],"strategies are":["fine"],"strategy I":["think"],"strategy of":["using","always"],"stream, that's":["a"],"streaming tip,":["@hertha!"],"streaming. That's":["a"],"streams (usually":["in"],"strengths of":["Erlang,"],"strict comparision":["(===)?"],"strict equality":["check","(`===`)"],"strict left-fold":["enumerators"],"strictly [[string]]":["and"],"strictly necessary":["but"],"strictly speaking":["it","it's"],"strictly-speaking, the":["`base1"],"strike a":["balance"],"strikes me":["as","as"],"string \"\"":["rather"],"string \"*\"":["be"],"string \"SHOUT\"":["to"],"string (==":["\"\")?"],"string (I":["had"],"string (an":["Erlang"],"string (including":["the"],"string (probably":["reuse"],"string I":["think","believe"],"string `\"\"`":["passed"],"string actually":["contains"],"string again":["inside"],"string and":["regex,","strip","may","a"],"string as":["a","a"],"string be":["copied"],"string before":["splitting","matching.","scan","scoring"],"string being":["wrongly"],"string but":["this"],"string case,":["or"],"string case.":["Then"],"string changes":["on"],"string check":["methods"],"string checks":["were","into"],"string cleanup":["earlier"],"string concat":["is"],"string concatenation":["is"],"string contained":["letters."],"string contains":["lowercase","lower","all","any"],"string contents":["I"],"string could":["be"],"string doesn't":["consist"],"string ends":["with","with","with"],"string for":["certain"],"string from":["the"],"string functions":["together","or"],"string functions,":["but"],"string get":["treated"],"string in":["your","Elixir,","general","the","verse","programming"],"string inquiries.":["However,"],"string instead":["of","of","of"],"string interpolation":["into","is","too,","converts","could","with"],"string interpolation,":["but"],"string interpolation.":["I"],"string interpolation?":["Might"],"string into":["a","a","shape","characters","bytes."],"string is":["empty","good,","empty","empty/nil,","all","empty,","empty,","handled","empty,","`size(phone)`.","a","the","all","an","uppercase.","equal","yelling","entirely"],"string isn't":["enough"],"string joining":["in"],"string libraries":["I"],"string like":["so:"],"string literal":["twice,"],"string literal.":["There"],"string manipulation":["matching","now,","call"],"string matches":["the"],"string matching":["works"],"string matching.":["I"],"string multiple":["times"],"string of":["words,","legth","\"111111…\".","whitespace","zeros."],"string on":["substrings","line"],"string once":["in"],"string only":["containing"],"string operations,":["which"],"string or":["an"],"string parsing":["concerns,"],"string pipelines":["are"],"string rather":["than","than","than"],"string related,":["and"],"string repetitions,":["but"],"string replace":["and"],"string representations":["in"],"string requires":["that"],"string special":["case"],"string tests":["inside","actually"],"string that":["doesn't"],"string that's":["whitespace"],"string the":["test"],"string though":["`Enum.count`."],"string to":["0,","a","a","a","a","list","a","be","a"],"string uniquely":["identify"],"string when":["the"],"string with":["the","guards,","all","all","`\"\"`."],"string without":["using","whitespace,"],"string would":["be","incorrectly"],"string you":["need"],"string your":["method"],"string |\u003e":["String.graphemes"],"string\". I":["have"],"string) &&":["!Regex.match?(%r/\\p{Ll}/,"],"string) and":["started"],"string) won't":["blow"],"string), do:":["w`."],"string)` could":["be"],"string, I":["would","would"],"string, `replace`":["works"],"string, and":["`HashDict.update(dict,","use"],"string, even":["multi-line"],"string, it's":["`silence?`"],"string, not":["the"],"string, one":["on"],"string, then":["splitting","split"],"string, which":["could"],"string, would":["those"],"string. I":["did"],"string. I'd":["appreciate"],"string. I'm":["not"],"string. If":["I"],"string. It":["might"],"string. Might":["just"],"string. Not":["all"],"string. Sadly,":["Elixir"],"string. So":["I'll","that"],"string. The":["former"],"string. Why":["not"],"string. Would":["you"],"string. You":["could","can"],"string? (naming":["is"],"string? E.g.,":["\""],"string? Maybe":["the"],"string? Might":["be"],"string?\", \"are":["these"],"string``` but":["that's"],"strings (and":["then"],"strings --":["any"],"strings all":["at"],"strings and":["`nil`","binaries."],"strings are":["\"truthy\"","_not_","by","binaries","lists","UTF8","considered"],"strings contained":["non-ASCII","\"bottle#{s}\""],"strings containing":["just"],"strings created":["with"],"strings due":["to"],"strings for":["this"],"strings from":["my"],"strings full":["of"],"strings in":["elixir.","general,","`how_many?`","Elixir."],"strings instead":["of"],"strings into":["an"],"strings is":["annoying."],"strings is,":["but"],"strings like":["\"ÑÉØ\"."],"strings of":["the","characters"],"strings onto":["head,"],"strings right":["now."],"strings that":["only","contain"],"strings together,":["can"],"strings using":["guard"],"strings you":["don't","do"],"strings, and":["that"],"strings, any":["content"],"strings, but":["I'm"],"strings, not":["as"],"strings, so":["you"],"strings, which":["if"],"strings. ;)":["In"],"strings. And":["one"],"strings. But":["it's"],"strings. Can":["you"],"strings. For":["particularly"],"strings. I":["think","think","know"],"strings. I'm":["still"],"strings. If":["he"],"strings. Is":["it","it","there"],"strings. Strings":["are"],"strings. That":["opens"],"strings. The":["fact"],"strings. They":["are"],"strings. `String.to_char_list!`":["is"],"strings/unicode correctly":["and"],"strip first":["to"],"strip invalid":["characters"],"strip out":["numbers"],"strip punctuation":["in"],"strip special":["characters?"],"strip the":["string","string"],"stripped msg":["to"],"stripped out.)":[":/"],"stripped rather":["than"],"stripped string":["with"],"stripped, is":["\"\"."],"stripping off":["whitespace."],"stripping out":["the"],"stripping the":["phrase","country","punctuation"],"strips out":["all"],"strive for":["an"],"strong aversion":["to"],"strong defender":["of"],"strong opinions":["on"],"strongly depends":["on"],"strongly dislike":["the"],"strophe, antistrophe,":["and"],"struck me":["as"],"structural compare":["(`==`)"],"structure in":["elixir"],"structure of":["the","the","the","this"],"structure on":["lines"],"structure or":["syntax"],"structure that":["I","contained"],"structure to":["the"],"structure you":["want\"."],"structure, but":["as"],"structure? What":["benefit"],"structures are":["hard","created"],"structures just":["increases"],"structures than":["cleaning","captureing"],"structures that":["grow"],"structures. What":["does"],"struggle to":["remember"],"struggle with":["that"],"struggled a":["bit"],"struggled with":["empty?"],"struggled, and":["I've"],"struggling to":["understand","find"],"struggling with":["the"],"stub submission":["already"],"stuck somewhere.":["If"],"stuck with":["`Enum.sort`"],"stuck. I'm":["struggling"],"student here":["and"],"student list?":["Is"],"student to":["the"],"students are":["sorted."],"students but":["only"],"students each":["time"],"students in":["each"],"students list":["by"],"students once":["per"],"students rather":["than"],"students to":["be","the"],"students, efficiently.":["Then,"],"stuff I":["was"],"stuff ```":["if"],"stuff about":["the","Streams."],"stuff altogether":["by"],"stuff and":["naming","calling"],"stuff brought":["over"],"stuff but":["when"],"stuff can":["be"],"stuff in":["there.","Elixir"],"stuff inside":["your"],"stuff is":["subjective","so","mostly","why"],"stuff it":["leaves"],"stuff like":["that"],"stuff or":["for"],"stuff so":["that"],"stuff that":["matters,","matters,","was"],"stuff will":["always"],"stuff you":["want","don't"],"stuff. I":["guess","kept","also","apologize","think"],"stuff. I,":["too,"],"stuff. Let":["me"],"stumbling through":["exercises","this."],"stupid mistake,":["i"],"stupid, agreed.":["Am"],"style I'd":["like"],"style `map_join(...)":["\u003c\u003e"],"style are":["tests"],"style as":["possible."],"style binary":["strings."],"style guide":["stuff","that"],"style guide!":["See"],"style guide.":["You"],"style guidelines":["/"],"style here":["is"],"style improvement":["you"],"style is":["to","not"],"style lists":["of"],"style matter":["and"],"style of":["naming","programming","function"],"style or":["whatever.","somebody"],"style point:":["it's","in"],"style question":["(or"],"style seems":["to"],"style so":["much"],"style still":["strikes"],"style suggestions":["to"],"style thing,":["but","but"],"style thing...":["it's"],"style thing:":["if"],"style thinking":["to","is"],"style thinking,":["when"],"style tip:":["`&([&1|&2])`"],"style to":["use","emphasize"],"style works":["great"],"style, I":["wonder"],"style, admittedly":["your"],"style, but":["why"],"style, it's":["a"],"style, proved":["to"],"style, since":["the"],"style-wise so":["maybe"],"style. I":["do"],"style. The":["DNA"],"style. Unfortunately":["most"],"style: did":["you"],"style? They":["don't"],"styles are":["in"],"styles: recursion":["and","and"],"stylistic nit:":["I"],"stylistic thing.":["Can't"],"stylistically it":["the"],"sub methods.":["What"],"subcategories too:":["`\"A\""],"subject could":["be"],"subject of":["the","pipelines","giving"],"subjective and":["unimportant,"],"subjective minor":["point."],"subjective to":["the"],"sublist simply":["by"],"submission about":["using"],"submission already":["made"],"submission as":["well","is.","it"],"submission because":["it's"],"submission by":["using"],"submission compares":["with"],"submission for":["not","the","space-age:","this"],"submission is":["very","the"],"submission n.":["2"],"submission seemed":["trivial"],"submission tells":["a"],"submission that":["could"],"submission uses":["regular"],"submission was":["to"],"submission would":["be"],"submission). I":["don't"],"submission, it":["just"],"submission, where":["I"],"submission. I":["like"],"submission. I'm":["really"],"submission. It":["could"],"submission. See":["[revision"],"submission...se iteration":["3"],"submission: the":["problem"],"submission; I":["_think_"],"submission](http://exercism.io/submissions/24eefe8414acff22fea99fcf) for":["some"],"submissions and":["didn't"],"submissions have":["progressed"],"submissions into":["this"],"submissions that":["reached","use"],"submissions the":["less"],"submissions you":["can"],"submissions, it":["makes"],"submissions. And":["the"],"submissions. I'm":["trying"],"submit a":["new","new","new","pull","new","new","new","version","new","new","new","new","patch","new","new","new","new","PR","PR","purely","new","new","new","new","new"],"submit an":["exercise"],"submit another":["iteration"],"submit new":["revisions"],"submit old-exercise-file.exs\u003c/code\u003e.":["It"],"submit that":["version,","next."],"submit this":["anonymous","accidentally?"],"submit your":["`word-count.exs`"],"submit, I":["tried"],"submitted 2":["days"],"submitted a":["version","new","new","new","new","new","revision","revised","new","new","new","new","new","new","new","new","better","new","new","new","new","new","new","new","new","new","PR"],"submitted an":["update","new","iteration"],"submitted another":["go.","iteration","iteration."],"submitted before":["5"],"submitted followed":["that"],"submitted for":["the"],"submitted it":["both"],"submitted my":["changes."],"submitted new":["exercises","code."],"submitted that.":["It's"],"submitted the":["changes.","cond","pull"],"submitted this":["one.","in","and"],"submitted under":["the"],"submitted version":["only"],"submitted with":["message"],"submitted. Disregard":[":)"],"submitting a":["pull","new","pull"],"submitting another":["iteration"],"submitting the":["minimum"],"submitting things":["I"],"submitting this":["knowing","because"],"submitting, I":["realized"],"submitting, and":["I"],"subscriber_no] =":["[String.slice(number,"],"subsequent comparison":["it's"],"subsequent function.":["Here's"],"subsequent methods":["that"],"subsequent square":["by"],"subset to":["subtract)."],"substitute `bottle`":["into"],"substring, it":["would"],"substrings at":["each"],"subtle and":["probably"],"subtle bug":["in"],"subtle issues":["such"],"subtle nudges":["in"],"subtle thing.":["`question?(input)`"],"subtle with":["the"],"subtly different":["behaviour)","but","so"],"subtract that":["out","leaving"],"subtraction rule":["of"],"succeed if":["both"],"successful. I'm":["going"],"successfully parsed":["yet..."],"successive line":["uses"],"successive transformations":["I"],"succinct Elixir":["can"],"succinct code":["I"],"succinct on":["line"],"succinct way":["to"],"succinct, and":["handles"],"succinct, but":["tightly"],"succinct. A":["bit"],"succinctness and":["repetition."],"such a":["great","key","datatype","small","strange","function","wonderful","thorough","way"],"such ambiguities":["and"],"such as":["`String.ends_with?`","better","```String.ends_with?```","String.ends_with?/2.","better","`silent?`","`is_silence?`","`String.codepoints","the","map,","defmodule.","this","\"computer-aided\").","Russian.","`Enum.reduce`.","left","function"],"such cases":["as","(for"],"such good":["submissions,"],"such implementation.":["Expect"],"such that":["we","it"],"such. It":["may"],"suffers from":["too"],"suffers the":["same"],"sufficient. Is":["there"],"sufficiently clear,":["especially"],"suffix to":["match"],"suffix. The":["`is_`"],"suffixed with":["a"],"suffixes are":["traditional"],"suffixes) in":["the"],"sugar for":["single-expression","that.","`foo(do:"],"sugar, just":["curious."],"sugar. Not":["sure"],"sugar. Thanks":["for"],"suggest #alphabetize),":["and"],"suggest changing":["the"],"suggest corrections":["and"],"suggest extracting?":["How"],"suggest how":["I"],"suggest is":["moving","moving","maybe","that","considering"],"suggest looking":["for"],"suggest that":["using"],"suggest to":["pass"],"suggest using":["`Enum.reduce`"],"suggested I":["make"],"suggested by":["@denis.","@agustina","@hanna."],"suggested in":["your"],"suggested is":["easier"],"suggested nitpick":["from"],"suggested pattern":["matching"],"suggested replaced":["the"],"suggested to":["me","me","me"],"suggested using":["`Regex.scan`,"],"suggested wouldn't":["work"],"suggested), @ayden":["is"],"suggested, a":["test"],"suggesting I":["use"],"suggesting that,":["though,"],"suggesting things":["based"],"suggesting this":["one"],"suggestion I":["changed"],"suggestion about":["Process.register/whereis,","`Regex.scan`,"],"suggestion above":["but"],"suggestion actually":["does"],"suggestion for":["shortening","that"],"suggestion is":["definitely","that","that","to"],"suggestion of":["`Regex.run`","using","Dict.update.","piping","sorting"],"suggestion on":["aliasing","using"],"suggestion to":["reduce","define"],"suggestion would":["actually","be"],"suggestion, @micaela.":["I"],"suggestion, check":["out"],"suggestion, honestly":["I"],"suggestion. I":["was","wasn't"],"suggestion. I've":["submitted","submitted"],"suggestion. That":["frees"],"suggestion: I":["actually"],"suggestion: have":["you"],"suggestion: you":["don't"],"suggestion? I'm":["not"],"suggestions ;-).":["I'm"],"suggestions I":["think"],"suggestions and":["will","I"],"suggestions by":["@maryse-w,","@clara."],"suggestions for":["alternates."],"suggestions incrementally.":["This"],"suggestions into":["account."],"suggestions to":["simplify","see"],"suggestions would":["be"],"suggestions you":["made."],"suggestions! Extremely":["difficult"],"suggestions, and":["I'm"],"suggestions, especially":["the"],"suggestions. But":["yeah,"],"suggestions. I":["meant","didn't"],"suggestions. One":["thing"],"suggestions... maybe":["you"],"suggests something":["about"],"suit needs":["improvements."],"suitable in":["Elixir"],"suitcase you":["will"],"suite (perhaps":["the"],"suite didn't":["test"],"suite does":["not"],"suite doesn't":["expect"],"suite expects":["the"],"suite green":["but"],"suite have":["the"],"suite implied":["that"],"suite it":["doesn't"],"suite of":["test"],"suite or":["README"],"suite runs":["in"],"suite though":[":/"],"suite uses":["some"],"suite was":["a"],"suite when":["I","solving","I"],"suite you're":["working"],"suite, but":["I"],"suite, since":["you"],"suite. Did":["this"],"suites change":["occasionally,"],"sum [element|rest_of_list],":["do:"],"sum [x|xs],":["do:"],"sum(a,b), do:":["a+b"],"summing them?":["Have"],"super concrete":["use"],"super cool,":["thanks"],"super excited":["about"],"super happy":["with","with"],"super natural.":["But"],"super nit-picky,":["but"],"super-nitpicky, but":["if"],"super-picky, but":["it"],"super-simple function":["definitions"],"super-slow `def":["concat(ll),"],"superficially similar":["yet."],"superfluous I":["realize"],"superfluous and":["using"],"superfluous wrapper...&amp;1":["+"],"supervised structure":["well."],"supervision tree":["and"],"supervisor for":["this,"],"supplied cond":["and"],"support \"head\"":["and"],"support (in":["one"],"support `\\w`,":["but"],"support a":["public","function"],"support european":["phone"],"support for":["that","nice"],"support millions":["of"],"support multi-codepoint":["graphemes","graphemes"],"support multiple":["clauses"],"support other":["beverage","beverage","types"],"support some":["things"],"support strings":["like"],"support that.":["Hint:"],"support using":["that:"],"support when":["the"],"support, use":["\\p{L}"],"support. See":["http://en.wikibooks.org/wiki/Erlang_Programming/guards"],"supported ,":["you"],"supported. (see":["http://elixir-lang.org/getting_started/2.html,"],"supported... As":["we"],"supporting methods":["you"],"supports all":["unicode"],"supports heredoc":["for"],"supports interpolation,":["like"],"supports only":["limited"],"supports shorthands":["for"],"supports string":["interpolation?"],"supports tail":["recursion.","recursion.","recursion.","recursion.","recursion."],"supports that":["kind"],"supports that.":["Glad"],"supports variant":["without"],"supports whole":["expressions,"],"suppose \"is_\"":["is"],"suppose I":["have","could","could","used"],"suppose here":["it's"],"suppose is":["that"],"suppose it":["might","is"],"suppose the":["tests"],"suppose they":["should"],"suppose this":["reads","comes"],"suppose you":["contributed","could"],"suppose. I'll":["update"],"supposed to":["uncomment","be","be","let","pick","be","use"],"suppress my":["eastern"],"sure \"bare":["words\""],"sure (someone":["correct"],"sure I":["get","understand","have","tried","like","understand","quite","can"],"sure I'd":["chalk"],"sure I'll":["have"],"sure I'm":["missing"],"sure I've":["been","*quite*"],"sure Jose":["et"],"sure about":["the","\\w","what","indentation","the","the","the","that?","the","the","this","the","this","the","concise"],"sure all":["the"],"sure at":["what"],"sure either,":["but"],"sure exactly":["how"],"sure how":["I","you","to","to","to","to","to","to","to","idiomatic","much","many","to","well","to","I","to"],"sure if":["I","an","it's","it","I","there's","I","I","there","that","using","it's","it's","Elixir","I","it","it","that","there","that's","that's","I","that","memoization","`String.replace(%r/\\P{L}/)`","I'm","it's","I","there","there","e.g."],"sure it":["adds","describes","would","was","goes"],"sure it's":["worth","not","worth","not"],"sure moving":["the"],"sure of":["what"],"sure people":["are"],"sure shortens":["the"],"sure that":["actually","it","a","you","the","strings","together","everything"],"sure that's":["much"],"sure the":["button","answer","tests"],"sure there":["is","are","are","is","are","are"],"sure there's":["a","a","some","better","going"],"sure they":["cover"],"sure they're":["not"],"sure this":["can","isn't","should","is"],"sure to":["save","avoid"],"sure we":["could"],"sure what":["to","you're","I","the","the","the","you","exactly","is","to","that","you","the"],"sure when...":["Kinda"],"sure whether":["the"],"sure which":["implementations","one","form","I","one","would"],"sure why":["I","I","I","I","but","you","you"],"sure why,":["but"],"sure you":["hit","wanted","noticed","changed"],"sure you've":["thought"],"sure, actually.":["This"],"sure, but":["I","I","it"],"sure. But":["just"],"sure. I":["updated"],"sure. I'll":["give"],"sure. I've":["submitted","read"],"sure. It's":["totally"],"sure. Phone-number":["is"],"sure. What":["do"],"sure_ this":["is"],"surprise me":["at"],"surprise that":["it"],"surprise, in":["the"],"surprised @kariane":["didn't"],"surprised by":["the"],"surprised if":["the","the"],"surprised me,":["so"],"surprised that":["all","it","Elixir"],"surprised there":["was"],"surprised to":["see","realize","find","find"],"surprised, the":["other"],"surprises here,":["I"],"surrounded by":["double","parentheses."],"surrounding pattern":["matching"],"suspect List.foldr":["is"],"suspect `list`":["could"],"suspect any":["performance"],"suspect it":["will","has"],"suspect it's":["because","due"],"suspect not":["throwing"],"suspect strict":["equality"],"suspect the":["filter"],"suspect there":["is"],"suspect this":["to","is"],"suspected I":["had"],"suspicious of":["that,"],"swallowed up":["by"],"swallowing return":["values,"],"swap `String.last`":["on"],"swapped 'acc,":["l'"],"swapped the":["logic"],"swapping lines":["16"],"swapping the":["source","inputs"],"sweet spot":["might"],"sweet to":["move"],"sweet. Sorting":["and"],"switch out":["the"],"switch the":["tuple"],"switch those":["params"],"switch to":["this","pipelining","a"],"switched gears":["and"],"switched to":["pipes)."],"switching is":["messing"],"swoop as":["update"],"swoop. If":["you"],"symbol from":["the"],"symbol, which":["is","is"],"symbol-to-proc but":["more"],"symbol. Also,":["you"],"symbols and":["whitespace"],"symbols, i":["guess"],"symbols. Does":["that"],"symmetrical in":["the"],"symmetry of":["the","the"],"synonym for":["case"],"synonymous to":["\"day,"],"syntactic clutter":["(once"],"syntactic sugar":["for","for","for"],"syntactic warts":["I"],"syntactical sugar.":["Thanks"],"syntax \"inlist\",":["\"inbits\"."],"syntax (`fn`)":["instead"],"syntax (do:":["..."],"syntax (under":["Elixir"],"syntax I":["don't"],"syntax `?X`":[":)"],"syntax after":["I"],"syntax as":["recommended."],"syntax before.":["Unfortunately"],"syntax better":["too."],"syntax better,":["and"],"syntax but":["for"],"syntax comes":["from."],"syntax documentation":["is"],"syntax error":["of"],"syntax error.":["I","And"],"syntax errors":["while"],"syntax for":["anonymous","one-liner","&amp;","the","getting","expressing","letters","composing","small","the","the","function","pattern","`if`,","referring","referring","the","accumulators","very"],"syntax highlighting":[";)"],"syntax in":["mind,","the","Erlang?","regular"],"syntax is":["appropriate","new","a","cool!","in"],"syntax isn't":["completely"],"syntax just":["seems"],"syntax like:":["def"],"syntax makes":["that"],"syntax of":["pattern","Elixir","specifying","Elixir."],"syntax on":["line"],"syntax resembles":["ruby"],"syntax should":["I"],"syntax so":["that"],"syntax something":["like"],"syntax sugar.":["Not"],"syntax that":["might"],"syntax to":["achieve","be","avoid"],"syntax used":["pervasively"],"syntax was":["a","less"],"syntax where":["you're"],"syntax works":["through"],"syntax would":["be"],"syntax yet":["so"],"syntax you":["can","could"],"syntax, `&amp;(...)`":["yet?"],"syntax, and":["it"],"syntax, i.e.":["&amp;(...)?"],"syntax, in":["#match?"],"syntax, indentation,":["method"],"syntax, so":["haven't"],"syntax, something":["like"],"syntax, though":["that"],"syntax, where":["`&`"],"syntax. Also,":["I"],"syntax. As":["I"],"syntax. I":["suspect"],"syntax. If":["you"],"syntax. It":["seems","doesn't"],"syntax. It's":["a"],"syntax. So,":["instead"],"syntax. Think":["of"],"syntax. This":["also"],"syntax: `def":["count(l),"],"syntax: `is_match(word,":["&1)`"],"system doesn't":["have"],"system is":["a","based","based"],"system really":["cuts"],"system will":["simply","simply","simply","simply","simply"],"system works":["see"],"system! In":["this"],"system, it":["would"],"system. In":["this"],"t =":["rest"],"table at":["all."],"table is":["going"],"table such":["as"],"table. The":["comment"],"tackle trying":["to"],"tactic to":["meet"],"tad confusing":["is"],"tad easier":["to"],"tag in":["place."],"tag so":["it"],"tail ]":["and"],"tail ],":["function,"],"tail ]`":["etc.","syntax"],"tail call":["optimised","optimized.","optimization.","optimization."],"tail recursion":["that’s","the","by","the","before","to","and","the","for","but","in","but","the","the","and","and"],"tail recursion,":["thanks"],"tail recursion.":["Part","Tail","Tail","There","Tail","Tail","Tail","Thanks!"],"tail recursive":["so","implementation:","function","version:","solution.","optimization","version:","function.","as","now,","version:","solution","will","one).","version:","and","version:"],"tail recursive,":["amongst"],"tail recursive.":["That's"],"tail-call form":["requires"],"tail-call things":["require"],"tail-recursion as":["well,"],"tail-recursion is":["still"],"tail-recursive, so":["it"],"tail-recursive. Maybe":["I'll"],"tail], f)":["do"],"tail]` syntax":["for"],"tail]` syntax.":["So,"],"tail_1], [n1":["|"],"tail_1], [n2":["|"],"tail_2], distance)":["...","..."],"tailoring the":["solution"],"taint my":["solution"],"take 0":["+","+"],"take 1":["unit","unit","*","*"],"take 1,000,000":["times"],"take 100%":["credit"],"take a":["look.","look.","look","look","string","look","single","look","look","look","look","look","look","look","look","peak","look","step","brief","look","look","list","look","close","look","look"],"take advantage":["of","of","of","of"],"take another":["pass"],"take approximately":["0","0"],"take away":["the"],"take care":["of"],"take credit":["for"],"take for":["example","example"],"take in":["strings."],"take into":["account","account"],"take it":["from"],"take more":["than","than"],"take much":["vertical"],"take my":["formatting..."],"take that":["as"],"take the":["non-obvious","\"domain\"","result","`anagrams?`","'if'"],"take these":["with"],"take too":["much"],"take twice":["as","as"],"take what":["I'm"],"take your":["code","point"],"taken after":["Ruby"],"taken another":["look"],"taken as":["a"],"taken is":["(roughly)","(roughly)"],"taken the":["wrong"],"taken with":["the"],"taken your":["code,","suggestions"],"takes .1s":["to"],"takes .3s":["or"],"takes 2":["arguments."],"takes a":["function","`String`","word","callback,","range","range.","Range!","single","filtering","match","function","`do`"],"takes advantage":["of","of"],"takes another":["coffee."],"takes care":["of"],"takes forever":["to","that's"],"takes is":["determined"],"takes longer":["the","the"],"takes me":["doing"],"takes more":["than"],"takes on":["how"],"takes one":["parameter\"."],"takes only":["about","about"],"takes slightly":["longer"],"takes someone":["in"],"takes the":["atom","reducing","three","lengths"],"takes two":["dictionaries","arguments;"],"takes up":["less"],"takes), and":["the"],"taking a":["look.","look","great","few","single","look","look"],"taking advantage":["of","of"],"taking also":["a"],"taking that":["into"],"taking the":["output","time","approach","time"],"taking things":["to"],"taking your":["time"],"talk a":["bit"],"talk about":["\"functions\"","it","it.","performance"],"talking about":["with","when","in","a"],"tan is":["not"],"target for":["each","each"],"target over":["and","and"],"target word":["more","without"],"task in":["one"],"task very":["well."],"task. There's":["also"],"task. This":["would"],"tasks, for":["this"],"taste (I'd":["rather"],"taste but":["it"],"taste when":["to"],"taste, so":["I"],"taste. (`word":["|\u003e"],"tastes and":["experience."],"taught me":["that"],"tbh =)":["Think"],"tea-totalers in":["the"],"teach me":["what","not"],"teach you":["the","much"],"teach/practice a":["different"],"teaches you":["good"],"teaching me":["about"],"tear one's":["hair)"],"technically need":["to"],"technically, with":["Unicode"],"technique before,":["an"],"technique to":["extract"],"technique using":["macro's"],"technique you":["have"],"technique, but":["to"],"teeing off":["and"],"teenager domain":["model."],"teenager get":["a"],"teenager is":["hearing.","feeling"],"teenager receives":["is"],"teenager thinking":["about"],"teenager with":["pound-signs"],"teenager, and":["when"],"teenager... clever.":["Nothing"],"teenagers do":["not."],"teenth concept,":["clicked"],"television). Of":["course"],"tell `String.split`":["to"],"tell its":["story","story"],"tell me":["a"],"tell the":["story","compiler"],"tell you":["much","that"],"tell, and":["the"],"telling Bob":["to"],"telling me":["I"],"telling the":["story"],"tells a":["better"],"tells me":["what's"],"tells more":["about"],"tells something":["and"],"tells you":["to"],"template marker.":["As"],"template string":["pattern."],"template to":["concurrent"],"template without":["tons"],"templates could":["probably"],"tempted to":["add","submit"],"tempting in":["this"],"tempting, but":["I"],"ten 0s":["in"],"ten digits":["long"],"tend to":["say","stick","prefer","understand","be","not","agree","use","use","agree,","use","put","never","respect","return","avoid","get","have","do"],"tending to":["like"],"tends to":["do","mean","force","be"],"tension between":["doing"],"term and":["makes"],"term here)":["and"],"term in":["the"],"term is":["`nil`."],"term of":["transformation."],"term or":["the"],"term, but":["you"],"term. You":["might"],"term; a":["`fn`"],"terminology is":["correct"],"terms in":["the"],"terms of":["`reduce`.","a","just","`String.replace/4`,","`reduce`,","`square`?","standard","`reduce`","keep","the","`Enum.reverse","passing","complexity","`keep`","`keep`","`keep`,","complexity","`append`","`append`.","`append`,","`append`.","the","what","fault","fault","the","the","the","the","memory"],"terms to":["be"],"terms* the":["same"],"terms, rather":["than"],"terms. It":["looked"],"ternary operator":["in"],"terrible HashDict":["creation,"],"terrible. I":["ran","made"],"terribly OO":["about"],"terribly complex":["idea;","implementation."],"terribly inefficient":["thing"],"terribly necessary.":["You"],"terse and":["I"],"terse control":["flow"],"terse. My":["biggest"],"test !":["("],"test \"only":["numbers\""],"test \"shouting":["in","in"],"test \"silence2\"":["do"],"test \"valid":["when"],"test I":["had"],"test `assert":["Teenager.hey(nil)"],"test about":["yelling"],"test and":["didn't","see"],"test anything":["about"],"test are":["all"],"test as":["a"],"test case":["for","to","with","that"],"test case.":[";)","Although,","I"],"test case?":["If"],"test cases":["is","have","either,","for","with"],"test cases,":["but"],"test cases.":["So"],"test cases?":["I'm"],"test change?)":["i"],"test does)":["will","will"],"test doesn´t":["have"],"test don't":["check"],"test each":["of"],"test error":["I"],"test failure":["and"],"test file":["match","and","that","and"],"test for":["SHOUTING.","shouting","a","this,","Elixir","shouting.","\"!\"","`nil`","the","a","it","`silence?`","that","questions","not","russian","(I've"],"test forced":["me"],"test function":["was"],"test function.":["For"],"test functions":["as","as"],"test has":["been"],"test if":["called"],"test in":["JavaScript"],"test into":["the"],"test is":["commented","indeed","still"],"test made":["me"],"test methods":["(`allCaps`"],"test of":["course."],"test only":["sorts"],"test or":["not,"],"test pass":["but"],"test pass,":["I"],"test passes":["fine.","in"],"test prior":["to"],"test pushed":["me"],"test regexs":["in"],"test requirement.":["The"],"test since":["it'd"],"test still":["works"],"test suit":["needs"],"test suite":["(perhaps","when","green","runs","you're","when","though","doesn't","implied","expects","or","when","was","uses","it","does","have","didn't"],"test suite,":["but","since"],"test suite.":["Did"],"test suites":["change"],"test than":["`Enum.filter`"],"test that":["passed","has","asserted","defines","was","you"],"test the":["phrase","Greeting","whole"],"test time":["dropped"],"test to":["help","handle"],"test tonight.":["I"],"test was":["wrong","a","to"],"test wasn't":["present"],"test when":["i"],"test which":["calls"],"test will":["only","fail"],"test with":["a","a"],"test won't":["pass;"],"test writers":["than"],"test you":["are"],"test your":["code?"],"test! Strictly":["speaking,"],"test\", so":["you"],"test() #":["=&gt;"],"test(1) #":["=&gt;"],"test(nil) #":["=&gt;"],"test(value //":["2)"],"test, I'm":["really"],"test, at":["least"],"test, but":["I"],"test, then":["I"],"test, you":["can"],"test-suite feels":["really"],"test. As":["a"],"test. I'll":["try"],"test. Is":["there"],"test. Let":["me"],"test. Thanks":["for"],"test? I":["notice"],"test? If":["your"],"test? It":["looks"],"test? The":["intent"],"tested as":["long"],"tested both":["ways,"],"tested docs":["at"],"tested docs.":["Is"],"tested documentation":[":-),"],"tested in":["a"],"tested one":["append"],"tested this,":["but"],"tester functions":["as"],"testing conditions":[":)"],"testing for":["in"],"testing for?":["Take"],"testing functions":["in"],"testing library)":["has"],"testing properties":["of"],"testing somewhat":["easier"],"testing that":["directly."],"testing the":["last","`input`,","input"],"testing to":["see"],"testing? That":["would"],"tests (as":["written)"],"tests I":["have"],"tests I'm":["missing"],"tests actually":["mean"],"tests again.":["Fixed"],"tests and":["the","the","length/size","threw"],"tests are":["expecting","actually","too","a","short","still"],"tests as":["well."],"tests because":["`String.upcase"],"tests but":["I"],"tests can't":["check"],"tests constructed":["HashDicts"],"tests crashes":["if"],"tests currently":["don't"],"tests didn't":["catch"],"tests don't":["enforce","enforce","really"],"tests expect":["the","infinite"],"tests for":["nil","types","this","`sing`","the"],"tests forcing":["me"],"tests from":["the"],"tests here.":["It's"],"tests in":["the","the","the","functions?","functions","regexes:","this","regexes","any","`shout?`","named"],"tests inside":["methods"],"tests into":["nicely"],"tests is":["to"],"tests it":["probably"],"tests make":["the"],"tests may've":["changed."],"tests need":["to"],"tests never":["forced"],"tests often":["aren't"],"tests pass":["without","without","on"],"tests pass!":["Do"],"tests pass,":["but","and"],"tests pass.":["(In"],"tests passing":["hoping","mind"],"tests passing.":["I'll"],"tests require,":["because"],"tests required":["exposing","trailing"],"tests run":["and"],"tests should":["still","(I","be"],"tests somehow?":["Does"],"tests successful.":["I'm"],"tests takes":["forever"],"tests than":["me,"],"tests that":["used","make","was"],"tests themselves":["not"],"tests to":["make","just","verify","reflect","pass,","pass"],"tests was":["to","the"],"tests were":["commented"],"tests when":["you"],"tests will":["start","break"],"tests with":["the"],"tests without":["it,","copying"],"tests work.":["AFAIK,"],"tests would":["have"],"tests, and":["make","`hey(nil)`"],"tests, as":["ranges"],"tests, but":["they're","just","the"],"tests, including":["the"],"tests, it's":["how"],"tests, or":["if"],"tests, the":["intention","prime_cache"],"tests, those":["would"],"tests, would":["love","love"],"tests. And":["we"],"tests. It's":["not","to"],"tests. So":["I"],"tests. Thanks":["for"],"tests. The":["tests"],"tests. While":["this"],"tests. on":["all"],"tests/specs, I":["doubt"],"tests; attempts":["to"],"tests? I'm":["pretty","particularly"],"tests? This":["implementation"],"testsuite took":["very"],"text 3":["times,"],"text ==":["String.upcase(text)`"],"text before":["all"],"text editor":["with"],"text editor,":["the"],"text from":["a","the"],"text has":["a"],"text here":["as"],"text in":["unreadable"],"text into":["a"],"text is":["entered"],"text out":["into"],"text pretty":["often."],"text then":["do"],"text |&gt;":["String.downcase"],"text |\u003e":["parse"],"text, is":["returned."],"text. Having":["that"],"text. It's":["probably"],"text. Try":["to"],"text: `bitstring_to_list(\"José\")`":["=="],"text? Would":["another"],"text` in":["a"],"texts are":["split"],"texts going":["around"],"texts in":["one"],"texts. Previously,":["I"],"textual representation":["(the"],"than \"n\"":["to"],"than \"this":["is"],"than \"x\".":[":)"],"than &amp;1,":["&amp;2."],"than 'some":["pointers',"],"than 10":["won't"],"than 11":["bytes"],"than 3X":["slower"],"than 80":["chars.)"],"than \u003ccode\u003e\"\"":["=="],"than ===":["in"],"than Erlang":["syntax..."],"than I":["ever","would","have","expected.","expected.","like."],"than List.flatten":["in"],"than O(n^2)":["due"],"than Regex.scan.":["Also"],"than String.length(message)":["\u003c"],"than _":["-\u003e"],"than _words.":[":)"],"than `\"\"":["=="],"than `0`.":[";)"],"than `Dict.merge`,":["in"],"than `Enum.filter`":["with"],"than `HashDict.some_fun`":["(with"],"than `HashDict.update`":["(i.e."],"than `HashDict`":["functions."],"than `List.foldl`.":["They"],"than `List.zip/1`":["when"],"than `String.codepoints":["|\u003e"],"than `String.codepoints`":["here"],"than `String.codepoints`,":["just"],"than `String.graphemes`":["because"],"than `String.last":["=="],"than `String.scan(%r/\\p{L}/)":["|\u003e"],"than `String.split`":["to"],"than `[^":["]+`)."],"than ```":["anagram"],"than ```\"\"":["=="],"than `binary_to_list`":["here."],"than `cond`":["for","(`cond`"],"than `count_word(&1,&2)`.":["IMHO"],"than `defdelegate`":["actually,"],"than `fn`":["within"],"than `is_upcase?`":["--"],"than `is_upcase`,":["as"],"than `size(sentence)":["=="],"than `x`.":["The"],"than a":["regex","separate","simple","Regex.","Regex,","length","string)","counts","list","`cond`","big","list","small","list.","list"],"than about":["the"],"than all":["three?"],"than an":["explicit"],"than anything":["else."],"than building":["a"],"than builtin":["to_char_list..."],"than captureing":["what"],"than check":["the","its"],"than checking":["the","for"],"than clauses":["of"],"than cleaning":["up"],"than creating":["it","a"],"than define":["anonymous"],"than defines":["one."],"than delete":["what"],"than dispatching":["with"],"than doing":["it","this","the"],"than duplicating":["the"],"than expected":["not"],"than expecting":["a"],"than explicitly":["assigning","saying"],"than flatten":["since"],"than foldr":["here,"],"than going":["through"],"than guard":["clauses..."],"than hang":["it"],"than happy":["to"],"than hardcoding":["responses"],"than having":["#anagram_for","two","a"],"than if":["or"],"than implementing":["it"],"than in":["extract_words.","a"],"than inferring":["by"],"than intentional.":[":)"],"than is":["desirable.","desirable.","desirable.","desirable.","desirable."],"than is_yelling/1.":["You"],"than it":["needs","would","needs","needs","has","has"],"than iteration":["1."],"than iteratively,":["even"],"than just":["have","`update`","`filter`","lists.","ignoring","a","A-Z."],"than letters":["just"],"than letters,":["it"],"than logic":["(which"],"than making":["it","another"],"than me,":["but"],"than most":["other"],"than my":["example,","example,","version","first"],"than necessarily":["in"],"than necessary":["and"],"than needing":["to"],"than needs":["to"],"than nesting":["filter+reject."],"than on":["some"],"than once,":["and","or"],"than one":["upcase","line,","parameter?","argument.","byte","time."],"than ones":["prefixed"],"than optimal":["(and"],"than other":["alternatives,"],"than others":["I've"],"than pattern":["matching."],"than piping,":["if"],"than plain":["method"],"than prefixing":["with"],"than prepending":["an"],"than reading":["a"],"than recursion,":["then","or"],"than reduce":["which"],"than regexes...":[";-)"],"than renaming":["the"],"than returns":["chars"],"than scan":["to"],"than separating":["it"],"than simply":["compare","check"],"than size(msg)":["=="],"than specific":["ones."],"than testing":["to"],"than that":["looks","nitpick,","my","not"],"than that,":["it","it's","looks","for","it","I","this","looks","looks","looks","looks","I","looks"],"than the":["next","last.","first","\u003ccode\u003ereplace\u003c/code\u003e.","named","1st","`if","second","concision","first","allowed","fourth","space","first","latter","first","regex","Erlang","type","prior","typical","`d","whole","previous","separate","current","recursive","anagram.","main","tail"],"than they":["should"],"than this":["latest","one.","version).","one"],"than those":["used"],"than to":["keep","put","use","write"],"than traditional":["\"fn"],"than truncates":["when"],"than try":["#2"],"than trying":["to","to","to"],"than updating":["an"],"than usefulness,":["since"],"than using":["temporary","a","the","the","cond."],"than version":["4"],"than violating":["that."],"than what":["you're","you","I"],"than which":["implementations"],"than without,":["and"],"than you":["really","won't","might","need"],"than your":["example","code"],"than yours":["but"],"thank you":[":)","for","for","for","for","for","for","so"],"thank you,":["real34,"],"thank you.":["Pattern","`List.foldl/3`","I'll","That"],"thanks Mark":["-"],"thanks a":["lot","lot,","lot"],"thanks again":[":)","for"],"thanks for":["the","the","catching","the","the","the","pointing","the","taking","sharing","all","comment","the","the","the","the","your","the","pointing","the","you","your","the","the","explanation!","the","the","the","the","the","feedback.","the","the"],"thanks so":["much","much"],"thanks! I":["didn't","spent"],"thanks! I'm":["jumping"],"thanks! That":["was"],"thanks, I've":["now"],"thanks, that":["actually","was"],"thanks, will":["add"],"thanks. I":["should","guess","didn't"],"thanks. I've":["submitted"],"thanks. That's":["pretty"],"thanks. WIll":["update"],"that \"1,":["2,"],"that \"?\"":["should"],"that \"_\"":["count"],"that \"bob\"":["is"],"that \"idiomatic":["elixir\""],"that \"might":["be"],"that \"sentence\"":["is"],"that 'Bob'":["would"],"that (and":["did"],"that (such":["as"],"that (there":["isn't"],"that *all":["the"],"that *is*":["something"],"that -":["it","I"],"that :-)":["Do"],"that \u003ccode\u003eall_caps?\u003c/code\u003e":["interprets"],"that Bob's":["problem"],"that Dict.get/3":["works"],"that Dict.update":["might"],"that Elixir":["should","is","is","provides","is","supports","follows","needs","has","and","doesn't","kind"],"that Elixir's":["heredoc","grammar","enumerators"],"that Erlang":["has"],"that ExUnit":["(the"],"that GenServer":["version"],"that HashDict":["implements","is"],"that I":["hadn't....","would","don't","could","would","know","want","think","suggested","think","really","see","think","could","have","don't","could","made","saw","find","didn't","no","took.","define","didn't","couldn't","implemented.","had","was","like","don't","like","need","like","wrote.","find","should","know,","tend","did","almost","could","see","could","don't","feel","hit","didn't","don't","mean","did","have","shouldn't","didn't","can't","mean","am","have","have","don't","submitted","really","know.","know.","think"],"that I'd":["rather","need"],"that I'm":["not","using","running","currently","missing?","not","thinking","purposely","least","checking"],"that I've":["rebuilt","written","just"],"that José":["Valim"],"that List.insert_at":["call,"],"that Regex":["overcomplicates"],"that Ruby":["influenced"],"that String.to_char_list":["has"],"that __info__.":["The"],"that _retrieving_":["values"],"that _that_":["was"],"that `#{}`":["supports"],"that `&(&1":["+"],"that `&(String.downcase":["&1)`"],"that `'AB'":["=="],"that `'ATCG'":["=="],"that `/u`":["is"],"that `100`":["is"],"that `:list.sort`":["is"],"that `@amanda":["=="],"that `@jamar`":["and"],"that `ATCG`":["=="],"that `Dict.put(...,":["...,"],"that `HashDict.new/2`":["invocation."],"that `HashDict`":["now."],"that `List.concat`":["is"],"that `List.foldl`.":["You"],"that `Regex.run`":["would"],"that `Stream.unfold`":["you"],"that `Stream`":["exposes"],"that `String.downcase`":["belongs"],"that `String.length/1`":["would"],"that `String.split/1`":["obviates"],"that `String`":["offers"],"that `\\w`":["considers","considers","has"],"that ```":["Enum#reduce"],"that ```message":["=="],"that ```slice```":["looked"],"that ```|```":["in"],"that `a":["=="],"that `anagram_of?`":["and","function."],"that `append(list_with_500_elements,":["list_with_million_elements)`","list_with_million_elements)`"],"that `binary_to_list`":["in"],"that `bitstring_to_list`":["will","is"],"that `cond`":["as"],"that `contains_all_chars?`":["does"],"that `f":["a"],"that `fn`":["on"],"that `frequency(word)`":["runs"],"that `grade`":["pull"],"that `hd`":["will"],"that `is_question`":["`is_shout`"],"that `keep`":["and"],"that `next_numeral_pair`":["returns"],"that `pretty/1`'s":["String.replace"],"that `sentence":["=="],"that `shouting?`":["didn't"],"that `size`":["counts"],"that `tokinizer`":["could"],"that `|&gt;`":["expects."],"that a":["bit.","reader","reader","nil","string","letter","whirl...","line","variable","group","mistake","second","factor","good","while","couple","function"],"that about":["Dict.","join,"],"that abstract":["the"],"that accept":["different"],"that accomplish":["the"],"that actually":["*testing*","reads","was","adds"],"that added":["it."],"that adding":["another"],"that after":["beating"],"that again.":["Unless"],"that against":["the"],"that all":["words","but","other","the","other","the","three"],"that allows":["the"],"that also":["and"],"that always":["returns","returned"],"that an":["iolist"],"that and":["avoid","submit","have","resubmit.","used","just","changed","submit"],"that annoying":["test"],"that anonymous":["function","function"],"that any":["word"],"that applies":["to"],"that apply":[":"],"that approach":["for"],"that are":["newer","named","way","relevant","asking","still","identical","stripped","the","allowed","really","dissimilar","passed","not","easy","easy","not","not","easy","easy","easy"],"that aren't":["based"],"that as":["tests","a","`defp","cond","any","well","a"],"that asserted":["the"],"that at":["some"],"that avoids":["your","the"],"that bad":["boy","either,","sorting"],"that be":["named","named","named","extracted","necessary?"],"that before":["I","and"],"that before)":["with"],"that behavior,":["based","you"],"that behaviour":["with"],"that better":["shows","or"],"that blog":["post"],"that both":["styles","lists"],"that bother":["me"],"that break":["the"],"that but":["it","somewhat"],"that by":["multiplying","using"],"that calling":["`String.downcase`"],"that calls":["the"],"that can":["be","simplify","accomplish","handle","be","just","then","be"],"that can't":["be"],"that carries":["any"],"that case":["really","it"],"that change":["after","and","and","and","as"],"that change!":[":)"],"that change.":["The",":)",":"],"that changes":["every"],"that character.":["It"],"that check":["for","is"],"that checks":["for"],"that choice":["for"],"that clarifies":["our"],"that clause":["as"],"that clear,":["especially"],"that clearly":["expresses","indicates"],"that clears":["up"],"that code":["sample","easier"],"that collect/map/fmap/whatchamacallit":["functionality"],"that combine":["`Enum.flat_map`"],"that comes":["pretty"],"that comment":["in"],"that commented-out":["line"],"that common":["in"],"that commonly":["helper"],"that concatenating":["on"],"that cond":["was"],"that condition":["is"],"that considered":["good"],"that constraint":["comes"],"that construct":["should","as"],"that construction":["really"],"that contain":["punctuation","only"],"that contained":["`\"10!\"`.","the"],"that contains":["for"],"that contributes":["nothing."],"that control":["flow."],"that conversion":["works,"],"that conveys":["the"],"that corrects":["all"],"that could":["be","make","be","be","detect","cross","simplify","shorten","be"],"that count":["variable"],"that crazymykl":["used"],"that currently":["needs"],"that decides":["things,"],"that decrease":["readability."],"that define":["if","a"],"that defines":["the"],"that depends":["upon"],"that describe":["the"],"that describes":["what","some"],"that determine":["statement"],"that didn't":["pass:"],"that directly":["in"],"that directly.":[":("],"that do":["most","change","you","this"],"that doc":["string"],"that documentation,":["you"],"that does":["seem","something","seem","that","its","what","the","even","the","the"],"that doesn't":["use","necessitate","keep","seem","really","require","work.","repeat","contain","result","create","take","have","work,"],"that doing":["both"],"that don't":["have","return","need"],"that done":["(and"],"that dummy":["question"],"that e.g.":["\"x"],"that each":["do"],"that efficiency":["is"],"that elegant,":["I"],"that eliminates":["the"],"that elixir":["is","will"],"that elixir's":["grammar"],"that encapsulates":["that"],"that encapsulation":["is"],"that encoded":["the"],"that end":["in","with"],"that ends":["a"],"that equivalence":["check"],"that error":["message"],"that even":["lower"],"that every":["modification","time"],"that everything":["higher"],"that exercise":["-","properly"],"that exercism's":["review"],"that expand":["to"],"that explain":["their"],"that explains":["the"],"that explores":["your"],"that expr":["special"],"that extra":["trailing","check","test","module"],"that fails":["it"],"that fancy":["`HashDict`"],"that far":["cleaner!"],"that feels":["a","pretty"],"that felt":["very"],"that filter.":["Finally,"],"that first":["version","special","step"],"that fixes":["that"],"that for":["me","my","something","the","mer?","you.","`\\w`"],"that from":["Ruby."],"that front":["loading"],"that function":["is","that","inline","less","doesn't","takes","argument"],"that function?":["I'm"],"that functional":["languages"],"that functionality.":["It"],"that gave":["good"],"that generally":["would"],"that generate":["the"],"that get":["and"],"that give":["the","the"],"that gives":["a","an"],"that goal,":["but"],"that grow":["large"],"that guards":["are"],"that handles":["nil","everything"],"that has":["never","to","comprehensions","only","the","its","the"],"that have":["any","names","arguments","to","an","changed."],"that having":["the"],"that he":["is"],"that heads":["up."],"that helps":["simplify","with"],"that helps,":["it"],"that helps.":["Feel","If"],"that here.":["Therefore,"],"that hides":["the"],"that holds":["the"],"that hypothetical":["programmer"],"that i":["do","can","did","don't"],"that identifier":["is"],"that idiomatic":["way"],"that if":["I","you","you","the","in","you're","the","you","we","the","that","the","the","the","the","you","the","you","a","the"],"that implementation":["a"],"that implementation--checking":["to"],"that implementation.":["I","In"],"that implementing":["one"],"that implements":["the","that"],"that improve":["the"],"that in":["this","mind,","Elixir,","the","a","mind!","the","mind","repl,","Elixir.","mind.","languages","terms","unicode.","Ruby,","Ruby","one","elixir","`clean/1`!","the","mind,","mind.","cases","the","an"],"that in,":["too."],"that include":["adding"],"that initially.":["But"],"that inline":["anon"],"that into":["the","account."],"that involves":["calculating","calculating"],"that irt":["doesn't"],"that is":["kind","Elixir's","\"","a","already","even","true,","reads","mostly","that","trivially","a","possible","now","really","specifically","not","prefixed","easier","still","specific","to","like","making","more","probably","one","so","the","not","a","0","the","because","the","a"],"that is_question":["function"],"that is_shouting":["will"],"that isn't":["silence.","a","even","too"],"that it":["might","could","is","captures","should","is","would","captures","is","is","was","reads","will","would","makes","takes),","doesn't","might","is","helps","can","was","may","works","doesn't","handles","gets","fits","doesn't","makes","was","comes","would","defines","matters,","would","was","makes","only","was","returns","is","was","would","would","is","gets","actually"],"that it's":["concurrent.","necessary","clearer","not","much","easier","the","redundant","done","ten","inconsistent","pure/side-effect-free","different","not","there.","possible","hard","returning","(far)"],"that iterators":["don't,"],"that its":["value"],"that jah":["followed"],"that just":["because","didn't","seemed"],"that keep":["and"],"that keeps":["Bob","that"],"that kept":["`anagramOf?`"],"that kind":["of","of"],"that knows":["how"],"that language":[":-("],"that leaving":["11"],"that led":["me"],"that lets":["me"],"that letters":["have"],"that list":["comprehension"],"that looked":["better"],"that looks":["great!","like","like","gross,","great.","more"],"that looks.":["You'd"],"that loop":["on"],"that make":["the","the","sense?","sense?","people"],"that makes":["sense.","sense.","more","all","one","it","verse","for","it","a"],"that map":["as"],"that map)":["has"],"that map+reduce":["combo."],"that mapped":["to"],"that matches":["on","all"],"that matters,":["such","such"],"that may":["just","just"],"that means":["`String.Unicode`","a"],"that meant.":["`exchange`"],"that method":["in","representing"],"that methods":["can"],"that might":["just","appeal","benefit","fit","be","still","be","be","be.","be","be","not","be","enable","be","not"],"that model.":["That"],"that module":["and","throughout"],"that module.":[";)"],"that more":["and","quickly."],"that most":["people"],"that much":["shorter","nicer","in"],"that much.":["Line","Not"],"that my":["RegEx","only","approach","solution"],"that myself":["looking","-"],"that names":["should"],"that nb":["is"],"that need":["to","coercion","to"],"that next.":["One"],"that nil":["is"],"that nitpick,":["I"],"that no":["additional","magical","__info__"],"that non":["alphanumeric"],"that non-tail-recursive":["version"],"that normal":["and"],"that not":["using","the","much"],"that now":["it","that","for"],"that now,":["and"],"that null":["check"],"that number":[":-)","from"],"that obviously":["should"],"that occupy":["more"],"that on":["String","future"],"that once":["a","Katrina"],"that one":["because","little","myself.","should","line","method.","in","in"],"that one.":[";)","The"],"that only":["have","concerns","concerns","that","contain","contained","once.","takes","requires","knows","requires","valid","had"],"that operate":["on"],"that operator":["in"],"that operator.":["Updated!"],"that option":["is"],"that or":["on","not?","not,"],"that organized":["and"],"that other":["implementations","name"],"that otherwise":["the"],"that our":["subject"],"that out":["and","and","of","there","for","now."],"that out.":["I've","Thanks."],"that outweigh":["the"],"that page":["(unfortunately"],"that part":["of","of"],"that part.":["I","It"],"that particular":["instance."],"that passed":["\""],"that passes":["all","all"],"that pattern":["in","matching"],"that people":["generally"],"that performance":["gain","mentality."],"that piece":["of"],"that piping":["could"],"that point":["you"],"that point.":["I'll"],"that power,":["and"],"that protocol":["is"],"that putting":["the"],"that question":["marks"],"that range":["test"],"that rather":["than"],"that reached":["this"],"that read":["a"],"that readability":["threshold"],"that reads":["pretty","like"],"that really":["what","what","don't"],"that reason":["I"],"that reason.":["But"],"that record.":["I"],"that reduce":["is"],"that refactoring":["of"],"that referring":["to"],"that regex":["is"],"that related,":["are"],"that relies":["on"],"that rem":["was"],"that renaming":["'s'"],"that represent":["the"],"that represents":["something"],"that requirement":["should"],"that respect":["the"],"that result":["to"],"that results":["in","in"],"that return":["very","a","boolean","a","`@taya`.","booleans)","a"],"that returned":["\"s\""],"that returns":["a","you","`:silence`,","a","a"],"that route":["to"],"that runs":["over","much"],"that said,":["I'm"],"that same":["function"],"that says":["this","\"Ok,"],"that scenario.":["I"],"that seem":["like"],"that seemed":["simpler"],"that seems":["like","like","a","like"],"that shorthand":["for"],"that should":["go.","be"],"that shouldn't":["go","matter","happen."],"that silence?/1":["needs"],"that simply":["get"],"that single":["command.","quotes","'s'"],"that situation).":["I'm"],"that solve":["the"],"that some":["low-level","of"],"that someone":["that","suggested","might","can"],"that something":["is"],"that sort":["of","of","of"],"that sorted":["version"],"that sorting":["the","every"],"that space":["there..."],"that special":["casing"],"that spends":["a"],"that state":["in"],"that step":["is"],"that string":["matches"],"that strings":["full","created"],"that suffers":["the"],"that suggests":["something"],"that support":["a","a"],"that swapping":["lines"],"that syntax":["(under","better","better,"],"that take":["more"],"that takes":["the","a","a","a","a","advantage","advantage","the","a","2","a"],"that taking":["advantage"],"that tell":["the"],"that tends":["to"],"that terrible":["HashDict"],"that test":["each","for","case.","was","or"],"that test,":["at","I'm","you","then"],"that test.":["I'll"],"that tests":["are"],"that that":["results","function","identifier","would"],"that the":["Elixir","consensus","implementation","`silence?`","call","blank","if/else","test","question","\"?\"","cond","control","variable","elixir","input","code","compiler","implementation","&amp;()","`is_anagram`","`Enum.join`","downcase","&amp;(&amp;1","`:lists.sort`","formatting","`sort_word`","second","```","`forceful?`","order","hash","string","grammar","inner","value,","```","iterative","is_","definition","`downcase`","unit-tests","value","program","`pretty`","determination","string","delimiters","list","algorithm","tests","code","filters","comprehensions","tests","lists","call","`anagram`","real","entire","client","code","input","range","README","function","word","README","unquoting","error","line","tests","real","accumulator","list","input","last","order","exercise","`is_prime?/2`","first","left","cost","values","letters","lists","function","flow","test"],"that their":["order"],"that there":["is","is","are","should","was","is","are","is","are","are","is","is","is","is","is","is","are","should"],"that there's":["a","a","no","no","also","no","`length`.","also"],"that these":["methods","one-line","functions"],"that they":["are","don't","aren't","decided","are","must","are","return."],"that they're":["not,","not.","added","necessarily"],"that things":["in","are"],"that this":["syntax","implementation","actually","is","is","is","is","way","isn't","uses","is","implies","doesn't","lets","module","is"],"that those":["module"],"that threw":["me","a"],"that time.":["However"],"that to":["someone","something","a","test","add","the","something","a","my","work","work.","find","keep","simplify","the","work"],"that together":["we"],"that trade":["off."],"that transform":["a"],"that translates":["back"],"that tries":["to"],"that trying":["to"],"that turned":["out"],"that tweak":["and"],"that two":["other","of"],"that unless":["there","you're"],"that unused":["list"],"that up":["in","so","a","via"],"that upcasing":["numbers"],"that uppercase":["trick"],"that use":["it","them.","the"],"that used":["a","only"],"that uses":["them,","Enum.reduce","`name/arity`.","more","the","a","list_to_tuple","a","the"],"that using":["regex","that","a","String","the","a","List","filter"],"that usually":["solved"],"that variation":["before."],"that version":["I"],"that version,":["and"],"that was":["unclear,","what","possible!","a","written","the","more","suggested","what","pretty","definitely","just","extensive:)","there","the","all","in","just","added.","translated"],"that wasn't":["true.","passed","a"],"that way":["so","then","characters","the"],"that way!\"":["```","response"],"that way!\"\"":["\"If"],"that way!\"`":["which"],"that way,":["given","it's"],"that way.":["Have"],"that we":["check","rarely","can"],"that well":["sorted.","either."],"that what":["you","you","I"],"that when":["you","you","you're","I","I'm","you"],"that while":["doing","the"],"that whole":["thing"],"that will":["cover","match","be","lead","usually","actually","decide","work","hopefully"],"that with":["`String.ends_with?`","the","4,"],"that without":["sacrificing","direct","them","the"],"that won't":["stop","work."],"that word":["!=","chars"],"that words":["don't"],"that work":["for","(hence"],"that work.":["`String#downcase`","I"],"that works":["out.","perfectly","much"],"that works,":["but"],"that would":["make","be","be","simplify","make","read","return","help","convey","be","accomplish","be","rid","express","not","satisfy","be","fit","make","be","allow","improve","not","be","be","be","improve","really","I","fit","save","be","help."],"that wrap/unwrap":["idea."],"that wrapped":["weird."],"that wrong,":["nothing"],"that you":["could","handle","might","are","can","mention","can","know,","have","may","can","don't","could","might","say","could","can","have","take","will","are","are","can","took","could","had","like","think","can","can","gain","added","exclude","can","could","can","are","can","check","can","then","don't","reference","could","can","get","need","pass","want,","could","then","have","shouldn't","can","build","wouldn't","make","are","don't","reminded","pass","saying,","need","can","can","don't","can","don't","extracted","can't","could","struggle","learn","seem","are","return","can","can't","were","can","use","can","do","figure","ran","have","can","thought","can","gave","don't"],"that you're":["thinking","not","explicitly","using","trying","using","done,","checking"],"that you've":["iterated","looked"],"that your":["regex","code","two"],"that! (hint":["in"],"that! Still":["exploring/learning"],"that'll be":["much","a","cool."],"that's a":["moot","bug","common","good","good","good","good","bit","manually","good","minor"],"that's actually":["longer."],"that's already":["there?","a"],"that's awesome,":["never"],"that's because":["it"],"that's being":["very"],"that's better":["than"],"that's built-in":["to"],"that's cause":["for"],"that's causing":["the"],"that's completely":["build","opaque."],"that's definitely":["better."],"that's discouraged":["is"],"that's exactly":["what"],"that's fair":["feedback."],"that's fine":["too."],"that's fine.":["I","I"],"that's great":["advice!"],"that's how":["it","it","people","I"],"that's just":["my","a","because","me","a","to"],"that's like":["Ruby's"],"that's mainly":["because"],"that's more":["of"],"that's much":["better","easier"],"that's my":["uneducated"],"that's new":["from"],"that's not":["how","a-z,","done","a","what","a","a","generally","the"],"that's often":["enough"],"that's ok.":["I"],"that's one":["of"],"that's out":["of"],"that's personal":["preference"],"that's pretty":["minor.","close"],"that's probably":["me","best","just","as","just","due","the","because"],"that's rather":["limiting"],"that's really":["overkill?","a","a"],"that's right.":["Missed"],"that's solvable":["by"],"that's sort":["of","of","of"],"that's still":["the"],"that's the":["case.","convention","ONLY","idea.","trick.","most"],"that's unambiguous,":["but"],"that's useful.":["The"],"that's very":["interesting."],"that's what":["this","I'm","I","I'm"],"that's where":["it"],"that's whitespace":["only?"],"that's why":["I","were","I","I","I","I"],"that's worth":["a"],"that) and":["call"],"that), it":["should"],"that). Better":["still,"],"that): `Sublist.compare([1,1,2],[1,1,1,2])`":["should"],"that, I":["like","think","could","noticed","tried"],"that, and":["do","was","also"],"that, any":["idea"],"that, because":["frankly"],"that, but":["I","I","it","that","refactored","it","I","apparently","Elixir's","for","still"],"that, can't":["remember"],"that, especially":["in"],"that, for":["some"],"that, given":["it's"],"that, it":["is","got","is","might","just"],"that, it's":["short"],"that, looks":["good.","good.","great.","good.","good.","great.","good."],"that, or":["is"],"that, that's":["fine."],"that, then":["I'd"],"that, there's":["very"],"that, this":["is","looks"],"that, though,":["what"],"that, too,":["if"],"that, while":["the"],"that, you":["would"],"that, you've":["got"],"that--so I":["felt"],"that. But":["I","from","hey,"],"that. Don't":["focus"],"that. For":["some"],"that. Glad":["I"],"that. Hint:":["it"],"that. I":["guess,","really","submitted","thought","try","think","do","guess","can"],"that. I'll":["try","keep"],"that. Ideally":["I'd"],"that. Is":["there?"],"that. It":["was","looks"],"that. It's":["a"],"that. Let":["me","me"],"that. Maybe":["that"],"that. Nitpick":["away!"],"that. Otherwise":["my"],"that. The":["first","difference"],"that. What":["did","do"],"that. Would":["be"],"that. `numerals_iterator`":["might"],"that? Calling":["`String.length/1`"],"that? I":["was"],"that? If":["I"],"that? Thanks":["@ryleigh"],"that? or":["is"],"thats just":["the"],"that’s made":["sense"],"the \"!\"":["check"],"the \"\"":["case","case"],"the \"1\",":["replace"],"the \"?\"":["at","formulation."],"the \"?\",":["at","both"],"the \"DRY\"":["principle."],"the \"Verse\"":["generation"],"the \"anagrams\"":["parameter"],"the \"bare":["words\""],"the \"best\"":["code"],"the \"better\"":["solution?"],"the \"billion":["dollar"],"the \"bob\"":["level,"],"the \"catch-all\"":["clause"],"the \"clean\"":["function?"],"the \"completed\"":["status"],"the \"concat":["of"],"the \"cond\"":["expression,","section"],"the \"constructor\"":["of"],"the \"do_X\"":["pattern"],"the \"domain\"":["of"],"the \"hey\"":["function."],"the \"heyp\"":["method."],"the \"idiomatic\"":["way"],"the \"if\"":["statement"],"the \"is_\"":["is","prefix.","and"],"the \"is_XXX\"":["methods"],"the \"lower_case()\"":["function."],"the \"map\"":["and"],"the \"message\"":["object"],"the \"no":["letters"],"the \"obvious\"":["way","way"],"the \"official\"":["style"],"the \"possible_words\"":["parameter"],"the \"prolonged":["silence\""],"the \"public":["api\""],"the \"root\"":["word","word"],"the \"s\"":["parameter"],"the \"shouting":["in"],"the \"silent\"":["check."],"the \"string\"":["parameter","parameter"],"the \"unicode":["character"],"the \"why\"":["of"],"the \"word\"":["character","parameter"],"the \"|&gt;\"":["operator","operator"],"the \"|\u003e\"":["notation.)"],"the #letters":["call"],"the &":["notation","syntax","syntax","syntax","syntax"],"the &(&1+1)":["syntax"],"the &(...)":["syntax"],"the &1":["syntax,","to","goodness."],"the &amp;":["shorthand","shorthand","as","notation","notation","capture"],"the &amp;(&amp;1":["+"],"the &amp;()":["syntax"],"the &amp;(...)":["newish"],"the &amp;1,":["&amp;2"],"the &append/2":["syntax"],"the '2'":["case"],"the 'all_caps?'":["version."],"the 'if'":["too"],"the 'third'":["one?"],"the (slightly)":["larger"],"the (very)":["new"],"the **word_count**":["exercise,"],"the *meaning*":["of"],"the *shortest*":["implementation,"],"the -1":["pattern","on"],"the /2":["to"],"the /u":["is"],"the 0":["case"],"the 0.12.3-dev":["version"],"the 1":["argument"],"the 10":["digits"],"the 1st":["one.","list"],"the 2":["x"],"the 2.6.2":["section"],"the 2nd":["param","list."],"the 3":["helper","methods","private","methods","components","and"],"the 400":["exception"],"the 5":["letter","factors"],"the 8-minute":["mark"],"the 80":["char","character"],"the 86400":["in"],"the :all":["message"],"the \u003ccode\u003e\u003c=\u003c/code\u003e":["implied"],"the \u003ccode\u003eDict\u003c/code\u003e":["data"],"the \u003ccode\u003eHasDict.update/4\u003c/code\u003e":[","],"the \u003ccode\u003eHashDict.update/4\u003c/code\u003e":["is"],"the \u003ccode\u003eMessage\u003c/code\u003e":["record"],"the \u003ccode\u003eRegex.scan...\u003c/code\u003e":["do?"],"the \u003ccode\u003eRegex.scan/2\u003c/code\u003e":["call?"],"the \u003ccode\u003e\\w\u003c/code\u003e":["character"],"the \u003ccode\u003ehey\u003c/code\u003e":["function"],"the \u003ccode\u003einterpret\u003c/code\u003edecision":["vs."],"the \u003ccode\u003elist\u003c/code\u003e":["function"],"the \u003ccode\u003ereplace\u003c/code\u003e.":["Replace"],"the \u003ccode\u003erespond\u003c/code\u003e":["function."],"the \u003ccode\u003erespond_to\u003c/code\u003e":["decision."],"the ?!,":["yeah?"],"the ?.":["I"],"the @":["reminds"],"the @anabel":["attribute,"],"the @annalise":["processing,"],"the @johann":["response."],"the @lance":["with"],"the @miles":["was"],"the A-Z":["alphabet,"],"the Anagram":["class"],"the BEAM":["VM."],"the Bob":["exercise"],"the C":["level"],"the Cell":["functions."],"the Clojure":["[reducers](http://clojure.org/reducers)"],"the DNA":["module.","four"],"the Dict":["protocol,","API...if","module","sorted,"],"the Dict.update":["method?"],"the EVM":["checks"],"the Elixir":["community","docs.","syntax","idiom","stdlib.","source","standard","convention","way","style","libraries.","standard","standard","solutions?","track.","version.","track.","track."],"the Elixir-lang.org":["tutorial."],"the Enum":["module"],"the Enum.count":["and"],"the Enum.map":["into"],"the Enum.map_join":["function"],"the Enum.reduce":["trick"],"the Enum.to_list.":["I","I'm"],"the Enum.zip":["|\u003e"],"the Enumerable":["protocol,"],"the Erlang":["VM,","lists","re","level.","syntax,","Lists","VM.","bag","VM","efficiency","notation"],"the ExDoc":["documentation"],"the Exercism’s":["community"],"the GenEvent":["structure,"],"the Greeting":["module"],"the HashDict":["or","though,","words",".","but","every","where","would","anew"],"the HashDict.new/2":["function."],"the HashDict.to_list(input)":["required"],"the HashDict.update":["part"],"the HashDict;":["I"],"the HashMap":["when"],"the HashSet":["is"],"the Haskell":["school","exercises.","exercises","wiki"],"the Java":["collection"],"the Lazy":["Impatient"],"the LinkedIn":["thread."],"the List":["defs","functions"],"the List.flatten":["necessary?","necessary"],"the List.zip":["part"],"the ListOps":["exercise)","exercise."],"the Message":["module?"],"the Mostly":["Erlang"],"the Nitpick":["help"],"the ONLY":["place"],"the OTP":["videos","version"],"the PeepCode":["episode","video"],"the README":["doesn't","tell","says","excludes","\"How","so"],"the Regex":["match","module","by","test"],"the Regex.match?":["you"],"the Regex.replace":["and"],"the Ruby":["versions,","solution","influence","convention","usage","tests","convention","versions"],"the Ruby/Elixir/Javascript":["switching"],"the Russian":["shouting"],"the Sieve":["of"],"the Single":["Responsibility"],"the Statement":["module,"],"the Stream":["module"],"the String":["module","built-in","module","binaries","class?","module","module](http://elixir-lang.org/docs/master/String.html)"],"the String.":["prefix","prefix"],"the String.Chars":["protocol's"],"the String.downcase":["in"],"the String.ends_with?/2":["and"],"the String.ends_with?/2,":["maybe"],"the String.from_char_list!,":["since"],"the String.length":["by"],"the String.split":["without"],"the String.strip()":["function"],"the String.strip/1":["barf."],"the Teenager":["module","module.","public","module","responding","that","is"],"the Teenager,":["they"],"the Test":["Suite"],"the US":["Thanksgiving"],"the UTF-8":["safe"],"the UTF8":["to"],"the Unicode":["option","upcase"],"the [:math](http://www.erlang.org/doc/man/math.html)":["library,"],"the [Getting":["Started"],"the [String](http://elixir-lang.org/docs/master/String.html)":["module."],"the [docs":["for"],"the [elixir":["bugtracker](https://github.com/elixir-lang/elixir/issues)."],"the [elixir-lang-talk](https://groups.google.com/forum/?fromgroups#!forum/elixir-lang-talk)":["mailing"],"the [mostly":["Erlang](http://mostlyerlang.com/)"],"the [pipeline":["operator](http://elixir-lang.org/docs/master/Kernel.html#|&gt;/2)"],"the [pipeline](http://elixir-lang.org/docs/stable/Kernel.html#|&gt;/2)":["operator"],"the [relevant":["Erlang"],"the [ruby":["version](http://exercism.io/submissions/a6a7ce08ece4b2cade0594a2)."],"the [string":["docs](http://elixir-lang.org/docs/stable/String.html)"],"the [tests](https://github.com/kytrinyx/exercism.io/blob/master/assignments/elixir/bob/bob_test.exs)":["at"],"the __info__":["defined"],"the _first_":["parameter"],"the _sing":["convention."],"the `!`":["in"],"the `!is_binary(something)`":["seems"],"the `!silence?(message)`":["checks?"],"the `\"\\n\"`":["should"],"the `&(":[")`"],"the `&`":["anonymous","capture","attaches","notation."],"the `&amp;&amp;":[":kind`"],"the `&amp;`":["notation)"],"the `+`":["operator","operator","should"],"the `+`.":["What"],"the `.`":["operator)."],"the `//`":["syntax:","(which"],"the `/u`":["when","option","is"],"the `1,":["2,"],"the `:lists.sort`":["function"],"the `:lists`":["stream,"],"the `\u003c\u003c\u003c`":["left"],"the `\u003e":["2`"],"the `?T`":["and"],"the `?`":["suffix.","suffix","in"],"the `@`":["syntax.","prefix"],"the `@amir`":["string)."],"the `@berenice`":["attribute"],"the `@brandon`":["from"],"the `@emilie`":["before"],"the `@ettie`":["and"],"the `@iliana`":["list"],"the `@keara`":["and"],"the `@nona`":["definitions."],"the `Access`":["protocol"],"the `Anagram`,":["I"],"the `Beer`":["module","module"],"the `Bitwise`":["module","module.","module"],"the `Dict.update`":["slightly"],"the `Dict`":["in","starting","versions.","versions.","functions.","functions."],"the `Enum.filter`":["for"],"the `Enum.join`":["necessary?","necessary?","isn't","for"],"the `Enum.map/2`":["is"],"the `Enum.reduce`":["into","in"],"the `Enum.sort":["|\u003e"],"the `Enum.to_list`":["in"],"the `Enum`":["module,","functions","functions","module"],"the `Enumerable`":["protocol."],"the `Greeting`":["module."],"the `HashDict.update`":["call.","(without"],"the `HashDict`":["specific"],"the `HashDict`,":["since"],"the `IO.puts":["\"Compiling\"`"],"the `List#foldl`,":["which"],"the `List.flatten`":["on"],"the `List.foldr`'s":["`HashDict.update`)."],"the `List`":["an","functions.","module"],"the `README.md`":["as"],"the `Readme.md`":["file."],"the `Record[a:":["...,","...,"],"the `Regex.replace`":["usage","and"],"the `Regex.scan`":["into","method,","to"],"the `Regex`":["documentation,"],"the `SpeechAnalyzer.ignoring?`":["style."],"the `StatementType`":["module,"],"the `Statement`":["module"],"the `String#length`":["and","and"],"the `String.`":["functions,"],"the `String.downcase(word)`":["once"],"the `String.downcase`":["earlier"],"the `String.from_char_list!`":["necessary?","necessary?"],"the `String.length(text)":["\u003e"],"the `String`":["documentation,","docs","methods.","module.","module:","module","module."],"the `Teenager`":["module?"],"the `Word`":["module"],"the `Words#count/1`,":["I"],"the `Words`":["module."],"the `[":["head","head"],"the `[]`":["on"],"the `\\P`":["negated"],"the `\\b`'s":["in"],"the `\\p{}`":["syntax"],"the `\\w+`":["test."],"the `\\w`":["should"],"the `_`":["since","char..."],"the `_empty?`":["function,"],"the `_for`":["clauses"],"the ```":["word","match","anagram?/2","cond","ends_with?","cond","Regex#scan","verse","_sing","cond","foldl","_count","defp"],"the ```#hey```":["method?"],"the ```&amp;1```":["acts"],"the ```&amp;```":["notation."],"the ```?```":["in"],"the ```Regex#scan```.":["It"],"the ```String.ends_with?```":["docs"],"the ```fn```":["form,"],"the ```is_```":["redundant"],"the ```question?```":["I"],"the ```shouting?```":["function"],"the ```sort_word```":["function"],"the ``ìs_```":["redundant"],"the `a":["=="],"the `acc_fun`":["body"],"the `acc`":["for","for"],"the `add`":["function","function"],"the `anagram?`":["function","function?"],"the `anagram`":["parameter","value"],"the `anagrams?`":["method","function"],"the `append`":["call."],"the `append`,":["I"],"the `apply`":["method"],"the `base1":["!="],"the `blank?`":["method."],"the `case`":["inside","over","vs"],"the `classify`":["approach"],"the `clean`":["function."],"the `close_bank`":["implementation"],"the `cond":["do`"],"the `cond`":["form,","block","block","block","clauses.","down"],"the `cond`,":["tests","that","and"],"the `cond`.":["Is"],"the `contact`":["function"],"the `count":["+"],"the `count/1":["(list)`"],"the `count/1`'s":["`foldr`,"],"the `count_hash`":["accumulator"],"the `count_of_words`":["method"],"the `count`":["function","name","function,","function,","function","function,","in","function","function","function","function","function","function"],"the `d":["=="],"the `days_in_gigasecond`":["function"],"the `defp":["foo,"],"the `defp`,":["my"],"the `dict":["="],"the `dict`":["param"],"the `different?`":["method"],"the `different_words?`":["test!"],"the `dna_to_rna`":["definition"],"the `do:`":["on"],"the `do_foo`":["suggestion.","helper"],"the `do`":["in"],"the `downcase`":["earlier,","earlier,","operation"],"the `elem`":["function."],"the `empty?/1`":["function"],"the `end_verse`":["param"],"the `end`'s":["closer,"],"the `ends_with?`":["function."],"the `expected`":["and","and"],"the `extract_nucleotide`,":["you"],"the `filter_map`":["solution","solution"],"the `filter`/`exclude_similar`/`different?`":["stuff."],"the `flat_map`":["that"],"the `fn`":["inside","syntax"],"the `foo?`":["convention"],"the `foo`":["functions"],"the `forceful?`":["check"],"the `forceful`check":["is"],"the `generate`":["argument."],"the `has_letters`":["to"],"the `hash`":["variable."],"the `hey/0`":["function"],"the `hey/1":["\"\"`"],"the `hey`":["function","function.","function.","function.","method","method","method?","function"],"the `homologous_pairs`":["and"],"the `i`":["(caseless)"],"the `identical?`":["name"],"the `if":["else","else"],"the `if,":["do:,"],"the `import`":["trick,"],"the `inc_counter/2`":["could"],"the `input`":["variable."],"the `input`,":["rather","which"],"the `interpret/2`":["clauses,"],"the `interpret`":["name","functions"],"the `iolist_to_binary`":["inside"],"the `is_`":["prefix","naming,","prefix","prefix","prefix"],"the `is_`,":["`has_a_`,"],"the `is_a_question?`":["Did"],"the `is_all_caps?`":["method","check."],"the `is_anagram`":["function"],"the `is_empty?`":["method"],"the `is_foo`":["convention"],"the `is_forceful?`":["check,"],"the `is_list`":["guarded"],"the `is_prime?/2`":["function"],"the `is_something`":["style"],"the `keep`":["collection."],"the `leap_year?`":["method"],"the `match/2`":["function"],"the `match`":["function","function's"],"the `mutation?`":["method"],"the `nil`":["case,","value"],"the `not_same?`":["function"],"the `nucleotides_different?`":["function."],"the `number`":["function"],"the `other_words`":["parameter,"],"the `pair`)":["is"],"the `predicate_and?`":["with"],"the `pretty`":["method","function,"],"the `question?`":["method"],"the `quiet?/1`":["function"],"the `reduce/3`":["call."],"the `reduce_with_index/3`":["function"],"the `reduce`":["function"],"the `replace_thymidine`":["method."],"the `reverse`":["for"],"the `roll_up_counts([\"\"|...`":["guard"],"the `roll_up_counts`":["clause"],"the `s`":["argument."],"the `s`,":["and"],"the `same_word?`":["check"],"the `score_letter`":["clauses!"],"the `segment`":["method,"],"the `sequence`":["char_list,"],"the `shout`":["method"],"the `silence?/1`":["function"],"the `silence?`":["question","function:","function?","function.","function?","function."],"the `silence`":["function,","clause","cond","function"],"the `silent?`,":["`shouting?`","`question?`"],"the `sing(start,":["start)`"],"the `sing_verse`":["clauses."],"the `sing`":["pipeline"],"the `size`":["function"],"the `sort_word`":["function"],"the `sort`":["method"],"the `split_sort`":["function,"],"the `str`":["variable"],"the `strain`":["exercise."],"the `strip_country_code`":["function.","and"],"the `to_anagram_key/1`":["function"],"the `true`":["case"],"the `u`":["modifier"],"the `unquote`":["thing"],"the `upcase`d":["version"],"the `valid_number`":["function,"],"the `validate`":["function"],"the `verse(1)`":["clause"],"the `verse(n)`":["clause"],"the `verse`":["clauses.","clauses"],"the `void?`":["function"],"the `what`":["variable"],"the `when`":["on"],"the `wordList`":["binding"],"the `words`":["function,"],"the `yelling`":["regex"],"the `zip`,":["which"],"the `{a,":["b}`"],"the `|&gt;`":["_(pipeline)_","operator.","operator","to"],"the `|\u003e":["operator`","iolist_to_binary`)."],"the `|\u003e`":["operator","at","creates","at","operator,"],"the `|`":["followed"],"the abbreviations":["\"lc\""],"the above":["that","questions"],"the absence":["of"],"the abstraction":["of"],"the abstractions":["be"],"the accumulator":["yourself.","explicitly.","pushing","to","and","only","in","is","values","is","list","is","is"],"the accumulator.":["Grrrr)","Typically"],"the actual":["use","work.","incrementing","response","*reason*","`word`","recursion"],"the addition":["of"],"the administrators":["of"],"the advantage":["initializing","of"],"the advantages":["of"],"the advice.":["Now"],"the advices":["too."],"the advices.":["I"],"the algorithm":["that","will","was","a"],"the allowed":["functions","ones),","BIFs."],"the alternate":["function"],"the amount":["of"],"the ampersand":["character","outside","notation"],"the anagram":["argument?","as"],"the anagram?()":["function,"],"the anagram_matcher":["function."],"the anagrams":["normalized"],"the analysis":["of"],"the analyzers":["as"],"the annoying":["padding"],"the anonymous":["function","functions","function","fn","functions","function's","function","function","function?","function","function","inc","function","function","function","function,"],"the answer":["to","is","will","to","won't"],"the answer\",":["but"],"the answer,":["but","I'm"],"the anything":["else"],"the append":["implementation."],"the appends":["and"],"the application":["of"],"the approach":["of","I've","being","of","of","of"],"the appropriate":["response.","syntax..."],"the approval":["queue..."],"the arabic":["number"],"the are)":["plus"],"the area":["code"],"the areas":["that","since"],"the argument":["to","to","to","is","to","as","`s`","to"],"the arguments":["route","separately.","of","and","could","to"],"the arguments.":["But"],"the arity":["was"],"the array":["of"],"the array),":["but"],"the assert":["failure"],"the atom":["as","`:nil`"],"the atoms":["in","not"],"the attribute":["name","tag"],"the attributes":["are","at","just"],"the author":["checked","of"],"the awesomeness":["this","that"],"the back":["of"],"the backing":["list"],"the balance":["of"],"the base":["word","word.","word","word,","word","multiple","is","word"],"the base)":["is"],"the baseword":["only","once?"],"the basics.":["Since"],"the be":["idiom"],"the beginning":["of","of","(in","of","of","of","of"],"the beginning,":["indented"],"the beginning.":["Forgive"],"the behavior":["of","in"],"the behaviour":["either"],"the below":["works"],"the benefit":["of","as","is","of"],"the benefits":[".."],"the best":["practices","name","name","choice","thing","way","alternative","name","reason","example","one.","case","way","way","way","library","place","bet?","way","way","way","way"],"the better":["way"],"the big":["\"graph"],"the bigger":["picture,"],"the biggest":["Elixir"],"the binaries":["to"],"the binary":["approach","concatenation","contents).","input","pattern"],"the bit":["stream","shifting"],"the blank":["lines"],"the bleeding":["edge."],"the blunt":["approach.","approach."],"the bodies":["of"],"the body":["of","of","looks","of","of","of"],"the book":["was","that"],"the boolean":["methods"],"the border":["where"],"the bottom":["and"],"the bottom.":["Yeah,"],"the brackets":["but"],"the brilliant":["advice."],"the bsl":["function"],"the built-in":["function","versions"],"the builtin":["`to_char_list/1`?"],"the bulk":["of"],"the button":["is","at","that"],"the calculation":["not"],"the call":["to","to","to","from","to","to","to","to","is","sites.","signature"],"the call,":["`acc","`acc","`acc","`acc","`acc"],"the call.":["Often"],"the call?":["The"],"the callback":["function;","since"],"the callback,":["thanks"],"the called":["function."],"the callee":["so"],"the caller":["would","is"],"the calling":["function"],"the calls":["to"],"the candidate":["so"],"the candidate.":["I'm"],"the candidates":["list"],"the capability":["of"],"the capture":["syntax,","operator","operator","expression.","expression:"],"the captures":["but"],"the case":["if","but","statement","when","better","for","of","of","that","where","if","where","where","`a","of","though"],"the case,":["which"],"the case-insensitive":["anagram"],"the cases":["were","where","that","result"],"the cases,":["basically,"],"the catch-all":["clause."],"the catchall":["clause."],"the cause.":["However,"],"the chain":["of","in"],"the chaining,":["but"],"the challenge":["was"],"the change":["to"],"the change,":["but"],"the changes":["your"],"the changes.":["Thanks!"],"the char":["list","sequences"],"the character":["group","code","code","class?","\"é\"","`?T`","count","class","class,"],"the characters":["that","you're","you","you","you","in","you"],"the characters:":["(I"],"the chars":[".You"],"the check":["for","for","for","for","methods","would"],"the checking":["of"],"the checks":["and","outside","against","from","in","from","in","into","clearer"],"the chill":["condition"],"the clarification,":["@deanna."],"the clarity":["of"],"the clash":["between"],"the class":["definition."],"the class,":["because","they"],"the clause":["on","where","matches,","doesn't"],"the clause?":["You"],"the clauses":["to","on","mutually"],"the cleanest":["way","version","solution","iteration"],"the cleansed":["input."],"the clear":["`phrase`"],"the client":["code"],"the closure":["and"],"the code":["very","clearer?","much","more","might","more","the","more","common","to","better.","more","which","which","in","focused","reads","and","clearer.","is","in","to","clean?","more","never","would","when","a","in","would","the","clearer.","more","is","is","looks","is","is","here","that","were","better.","points","display","in","whether","in","I","fine","is","means","not","more","that","(like","less","more","does","more","harder","would","itself,","a","is","@ward","in","as","considerably","because","to","simple","simpler.","got","to","easier","as","reflects","and","you","simpler.","a","look","easier","and","is","would","so","clearer.","that","so","(by","I","of","so","more","easier","consistent","look","is","called","assumes","a","a","in","doesn't","somewhat","work","is"],"the code's":["still"],"the code,":["though","I","I","I","so","`Enum.join`","now"],"the code.":["I'm","One","Should","I","Maybe","I",":/",":)"],"the code?":["If"],"the codepoints":["point"],"the cognitive":["overhead."],"the collapsed":["`cond`."],"the collection":["of","system","to"],"the collections":["more"],"the colons":["but"],"the combination":["of","of"],"the comment":["that","is","in"],"the comment,":["I","fixed"],"the commented":["out","dead"],"the commented-out":["lines"],"the comments":["on","and","very"],"the comments,":["there.","@liliane"],"the comments.":["That's","Oh,"],"the common":["logic","idiom","convention","way.","parts"],"the communication":["of"],"the community":["is","prefers"],"the compactness":["is"],"the comparison":["would","`base"],"the compile":["time"],"the compiler":["about","stop","may","that","(`|\u003e`","is","can","and","doesn't","and"],"the complexity":["in"],"the complexity,":["yeah,"],"the complicated":["regular"],"the complication":["of"],"the comprehensions":["in"],"the comprehensive":["explanation."],"the computation":["a"],"the concat":["tests","implementation"],"the concatenation":["of","of"],"the concept":["of","of"],"the concision":["and"],"the conclusion":["that"],"the concrete":["implementation"],"the concurrency":["specifically."],"the cond":["that's","in","one,","branches","conditions","macro","macro","to","is","expressions","expressions","statement","will","block","version","block,","as"],"the cond-switch":["comes"],"the cond;":["do;"],"the cond?":["Not"],"the condition":["into","functions","function","that","in","cases","part","checks","isn't","for"],"the condition,":["not"],"the conditional":["logic","in","up","in","in"],"the conditional,":["and"],"the conditionals":["are","to","in"],"the conditions":["(more","would","to","in","to","into","into","in","for","in","into","are","more","are","that","into","are",",","must","you"],"the confidence":["to"],"the conflict":["my"],"the confusion":["maybe"],"the cons":["operator)"],"the consensus":["is"],"the constant":["I","to"],"the constants.":["For"],"the content":["of","of"],"the content.":["For"],"the contents":["(`String.length(foo)","of","of","of","of"],"the context":["of","of"],"the control":["flow","structure","flow."],"the convention":["of","of","is","based","for","I'm","is","in","is","for","is"],"the convention,":["so"],"the convention.":["Also,"],"the conversion":["(with","fails.","fails"],"the conversion.":["I"],"the core":["libs!","language","lib.","of"],"the corner":["case"],"the correct":["response.","idioms","order","boolean","operator","private","method","response.","answer,","form"],"the corresponding":["regex.","`Dict`"],"the cost":["(officially","of","of","of","of"],"the count":["pipeline","pipeline","function","of","function.","of","method","function"],"the count/1":["function."],"the count_words":["function."],"the counting":["algorithm.","function"],"the country":["code"],"the counts":["`HashDict`"],"the counts.":["Is"],"the crash":["course"],"the creation":["of","of","of"],"the crowd":["and"],"the crowd.":["How"],"the culprit.":["Anyway,"],"the current":["\"open\"","`interpret/1`","exercise","solution,","`hey(\"\")`","value","naming","version.","`count`","line","version,","value","set","version","pair's","name.","one"],"the d==2":["clause"],"the dark":["side"],"the dash,":["no"],"the data":["first,","is","types","structure."],"the database":["and"],"the day":["of","written","of","written"],"the deault":["arguments"],"the declaration":["I"],"the declarative":["nature"],"the default":["response","equality","argument","is","value","value","now).","value"],"the default,":["and"],"the defensive":[":)"],"the definition":["of","of","of"],"the definitions":["of"],"the delay":["in"],"the delayed":["response."],"the delegates":["of"],"the delimiters":["of","are"],"the dependent":["modules"],"the deprecated":["syntax"],"the descriptive":["method","function"],"the desired":["behaviour?","result"],"the details":["of","of","of"],"the determination":["of"],"the determination,":["you"],"the developer":["and"],"the development":["version"],"the dialyzer":["tool"],"the dict":["from"],"the dict.":["I"],"the difference":["between","pulling","between","between","between","between","between"],"the different":["input","checks","parts","letters","anagrams","behaviors.","types","lines","verses","ways","cases?","responses","cases,","sections","cases.","cond","cases"],"the difficulty":["level"],"the digits":["this"],"the direction":["I","on"],"the direction,":["I"],"the disadvantage":["of"],"the discrepancy.":["If"],"the discussion":["under","and"],"the disjunction":["but"],"the distance,":["otherwise,"],"the dna":["once"],"the do":["not"],"the do...end":["syntax!"],"the do_*":["functions?"],"the do_foo":["convention"],"the docos":["for"],"the docs":["more","and","again.","for","can","and","for","I","updated","for","and"],"the docs,":["I","but"],"the docs:":["http://elixir-lang.org/docs/stable/Kernel.html#cond/1"],"the docstrings,":["+1"],"the doctest":["work","to"],"the doctest:":["this"],"the doctor":["prescribed"],"the documentation":["is","or","says"],"the domain":["of","of","being","as","as","as","of","of","language","(i.e.","a","a"],"the domain,":["so","but","since"],"the domain.":["In",":)","What","`yells?(input)`"],"the double":["control"],"the downcase":["in","call","would","and"],"the downcase/codepoints/sort":["stuff"],"the downcased":["anagram.","sorted","version"],"the downcasing":["could","into","in","of","and","of","of"],"the dryer":["way."],"the duplicate":["calls"],"the duplication":["you","from","in","of"],"the earth-specific":["clause"],"the easier":["it"],"the easiest":["possible","to"],"the edge":["cases.","case,"],"the efficiency":["of","but","of"],"the elegance":["fool"],"the elements":["being","that","makes","of"],"the elixir":["style","convention","land","code","pipeline","stdlib,","exercises","code"],"the elixir-core":["mailing"],"the elixir-lang":["docs,"],"the embedded":["call"],"the emptiness":["of"],"the empty":["check.","string?","phrase.","string","parens.","string","string","string","string","dict","list","string.","list"],"the empty-string":["test"],"the empty/silence":["method","check."],"the empty?":["definition."],"the end":["of","of","of","of","of","of","of","of","I","of","of","looked","is","and","using","of","of","if","of","of","of","of","rather","of","of","of","there","of","of","of","of","of","of","I","of","for","of"],"the end!":["Sure,"],"the end.":["I'll","I","How"],"the ending":["phrase."],"the ends_with?":["though."],"the english":["dictionary"],"the entire":["string.","string,","structure","list_","word","binary","matched","list","list","word","list","list","list","`increase_count/2`","string,"],"the enum":["at"],"the equality":["check."],"the equivalent":["of","function","of"],"the erlang":["genes","way","`:math`"],"the erlang/elixir":["way"],"the error":["**","message","you","and","detection","detection","detection","cases","messages","by"],"the escape":["hatch"],"the essence":["of"],"the event":["that"],"the exact":["same","same"],"the example":["better,","code","gets","in","in","but","more","first.","for","which","`@eladio`","in","instead","while","and"],"the example,":["and"],"the example.":[":-/"],"the example:":["https://github.com/kytrinyx/exercism.io/pull/413"],"the examples":["therein"],"the examples?":[":)"],"the exception":["raising","of","is"],"the exception.":["So,"],"the exceptions,":["which"],"the exceptions.":["I'm"],"the excess":["elements"],"the exchange":["about"],"the exercise":["can","is","with","it's","I","is","instructions","of","expected","to","specific","using","you","is","is","(used","stub.","was","feels","as","works","here","ask"],"the exercise,":["as","one"],"the exercise.":["But","`Enum.reduce`"],"the exercises":["are","to","slightly","that"],"the exercises.":[":P"],"the exercism":["project.","cli","tradition","project"],"the expected":["result.","result?","data","students","day.","weekday","order,"],"the expense":["of","would"],"the explanation":["easier","easier","easier","easier","easier"],"the explicit":["recursion","recursion.","anonymous","case","Enum.map","module","recursion,","listing","group","recursion"],"the explicit,":["declarative"],"the expression":["on"],"the expressive":["function"],"the expressiveness":["and"],"the extended":["readability"],"the extension":["by"],"the extra":["check.","mile","space","check.","check.","parameters","newline","module.","steps","newline","twist","parens","processing","virtue"],"the eye":["to"],"the fact":["that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that"],"the fact,":["that","that"],"the failing":["tests,"],"the family":["iMac,"],"the favored":["API."],"the features":["of"],"the feedback":["jazzdan.",":)","from","@sage","guys.","as","guys.","and","and","and","pminten,"],"the feedback!":["I","I","Good","I","Submission","I","I've","I'm","I","That"],"the feedback,":["I'm","@bridie.","@mary.","@maynard!","@juston.","I","@antonette.","moving","this","@khalid."],"the feedback.":["I","I","I","Yes,","I","The","I've","I","I'm","Just","I","My","I","Updated.","Moving","I","I",":)","That","This","Do"],"the feedback....gotta":["get"],"the feedbacks":["unfortunately"],"the feeling":["you've"],"the fence":["whether"],"the few":["tutorials"],"the fifth":["code"],"the file":["name","when"],"the file.":["Very",":/"],"the filler":["functions"],"the filter":["function","function","is","on","on","for","with","and","just","implementation,"],"the filter_map,":["I"],"the filtering":["operation","function"],"the filters":["don't"],"the final":["step","test","result.","string."],"the first":["versions","argument","argument","definition","one,","one,","argument","version","one.","version","one","doctest,","argument","place","two","level","time","`hey/1`","parameter","strand","test","strand.","strand","condition","argument","version","argument","version.","elixir","five","solution","run","attempt","param,","parameter","that","case.","part","implementation","it","character.","value","param","parameter","'count'","version.","2","one?","time","time.","iteration","generator.","params","or","element.","day","argument","one","just","exercise","exercise.","thing","argument","step","page","time:","step","matching","iteration","time:","step","practical","time","test","element","place.","list","append","argument.","time","to","code","parameter","and","argument"],"the first,":["doesn't"],"the flat_map/join":["that"],"the flatten":["I","step."],"the flow":["of","becomes"],"the fn":["implementation.","and"],"the following":["are","(I","trick","link"],"the forced":["conversion"],"the foreseeable":["future."],"the form":["of"],"the formatting":["thing","was"],"the formatting,":["the"],"the formatting.":["Looks","Using"],"the former":["makes"],"the forward":["slash"],"the four":["types"],"the fourth":["iteration,"],"the frequencies":["of"],"the from":["and"],"the front":["gives","end"],"the front.":["There's"],"the full":["test","string"],"the function":["naming.","ends","names","is","could","body","names","happens","names","names","'hey'.","into","ends","in","that","call","calls","calls","ends","so","names","that","names","itself","definition","is_saying_nothing?","params.","and","directly.","in","declarations,","in","passed","(or","`replace_thymidine`","is","with","name","name","(Dict.put","level.","head","extremely","bodies","etc","much","arguments,","please","capture","definition","capture","of","of","is","(`x`","for","that","the","heads.","arguments","parameters.","that","arguments,","would","interface","doesn’t","is","gets","call","is","gets","named","for","for","is","gets","is","gets","is","gets","is","`update_dict`"],"the function's":["explicit","module,"],"the function),":["and"],"the function.":["I'm","If","All"],"the function/method":["name."],"the functional":["rabbit","ways,","approach","programming","way","programming"],"the functions":["could","separated?","once.","are","nothing?,","you","instead","that","if","from","performs","elsewhere","in","*in*","in","at","in","didn't","are","in","should","you","`next_three`","are","correctly.","in"],"the functions'":["purposes?"],"the functions,":["e.g."],"the functions.":["The"],"the fundamental":["ideas"],"the funny":["thing"],"the further":["I"],"the future":["I","so"],"the future.":["For"],"the gain":["in"],"the gate":["with"],"the gem":["maintainer."],"the gen_server":["documentation."],"the general":["case.","one:","case","question","category","erlang","erlang","\"shape\"","idea"],"the generally":["preferred"],"the generated":["list"],"the generators":["have"],"the generic":["protocol","one,"],"the get":["and"],"the getting":["started"],"the giant":["case"],"the gist":["of"],"the git":["repository"],"the given":["`word`","day","day"],"the global":["count"],"the goal":["is","of"],"the goals":["of"],"the golfy":["feel"],"the good":["discussion"],"the grades":["twice.","and"],"the grades,":["not"],"the grammar":["has"],"the graph":["(it"],"the great":["feedback","feedback.","advice.","tips!","feedback.","feedback!"],"the greeting.":["That"],"the grid":["dict"],"the grouping":["based"],"the groups":["besides"],"the guard":["and","clause.","you","clauses","clause","clauses","clauses,","a"],"the guard,":["that"],"the guarded":["`count`","`count`,","version"],"the guards":["directly","are","as"],"the habit":["yet.","of","of"],"the hang":["of","of"],"the hard":["way"],"the hash":["is"],"the head":["of","of","of","of","of"],"the heads":["up.","up"],"the heck":["I"],"the height":["of"],"the hell":["out"],"the helper":["functions","functions.","function","methods","method:","function","function.","methods","function","functions"],"the helpers":["`do_foo`"],"the helpful":["feedback","feedback!"],"the hey":["function","function","method","function?","function"],"the hey(...)":["implementation"],"the high":["level"],"the high-level":["intent"],"the higher":["order"],"the hint":["about"],"the hints":["-"],"the hope":["that"],"the hyphen":["is","either,"],"the idea":["was","of","of","is","behind","was","of","was","of","of","of","of"],"the identicality":["rejection."],"the identification":["and"],"the identity":["function."],"the idiomatic":["thing","way."],"the if":["statement","makes","statement","expression"],"the if-do-else-end":["form."],"the if-statments.":["I"],"the if/else":["block"],"the ifs.":["I'm"],"the implementation":["details","describes","or","of","was","methods","details","to","details","checks","details","change,","of","(not","of","inline","I","and/or","of","of"],"the implementation,":["do"],"the implementation-specific":["HashDict.update"],"the implementation.":["But"],"the implementations,":["I'd"],"the implemented":["style?"],"the implentation":["of"],"the implicit":["conversion."],"the import":["directive","was","statement"],"the import,":["not"],"the important":["insight:","insight:","stuff."],"the imported":["functions","functions"],"the imports":["and","isn't"],"the imports.":["For"],"the impression":["that","you"],"the improvement.":["Next"],"the includes_letters?":["function"],"the incoming":["submission"],"the increasing":["numbers"],"the increment":["lambda."],"the index":["through"],"the indirection":["between"],"the individual":["checks","letters","codepoints.","grade"],"the inequality":["of"],"the infinite":["loop"],"the info.":[":)"],"the init":["function"],"the initial":["input","collection,"],"the initializer":["and"],"the inner":["`[`","loop"],"the input":["is","is","data","is","to","needs","at","to","string.","string.","string","into","once","list","4","isn't","doesn't","isn't","value.","in","for","ends","is","lists","order","in"],"the input,":["not"],"the input.":["I","I’m"],"the inputs":["were","first.","to"],"the insane":["amount"],"the insight":["about"],"the insight.":["One"],"the insights":[":)"],"the inspect":["call","issue"],"the installation":["instructions"],"the integer":["value","value,"],"the intent":["better?","and","clear.","of","of","of","of","is.","of","of","is","was"],"the intention":["of","of","of","of","of","anyways.)","behind","was","is","of"],"the interest":["of"],"the interface":["to"],"the intermediate":["list."],"the internal":["helper."],"the interpolated":["word"],"the interpolation":["in"],"the interpret":["function"],"the interpretation":["to"],"the interpreter":["was"],"the interrogation":["of"],"the interrogative":["functions"],"the invocation":["of"],"the is-tests":["so"],"the is_":["prefix","prefix","seems","on"],"the is_)":["Great"],"the is_anything_else?":["or"],"the is_match":["method"],"the is_question":["function"],"the is_shouting":["method"],"the is_whatever?":["function"],"the issue":["with"],"the issue?":["Alternatively,","If"],"the issues":["but","and"],"the items":["in","in"],"the iteration":["by"],"the iterative":["implementation","solution"],"the iterator,":["can"],"the javascript":["and"],"the job":["done,"],"the job,":["although"],"the join":["in"],"the joiner":["not"],"the k,v":["pairs"],"the key":["(line","is","is","for","can't"],"the keys":["and","in","collide.","in","and"],"the keyword":["`:else`"],"the kind":["of","of","down","of","of","of"],"the knowledge":["that"],"the lack":["of","of"],"the lambda":["arrow"],"the language":["as","but","itself","yet","of","documentation","*is*","adds","wants","--","working","though.","and","to"],"the language!":["Love"],"the language,":["learning","so"],"the language.":["Focus","That","I"],"the languages":["I","share"],"the larger":["system.","context."],"the largest":["program","numbers"],"the last":["sentence)","character","character","character","`cond`","input","`sing/2`","test","element","function","tip,","character","thing","one).","function","expression","value","2","expression","two","test","(I","exercise","two","two","param","test","expression","attempt","iteration.","clause","operation","expression","square...","word","clause","word","two","expression","expression","statement","two","expression","expression","expression"],"the lastest":["condition"],"the latest":["set","Elixir","changes","tests","version","tests","2","tests","version.","one..."],"the latter":["in","in"],"the lazy":["way"],"the leading":["underscore","`&amp;`","underscore","edge"],"the leaf":["needs"],"the least":["amount","resistance."],"the left":["as","into","argument","argument","fold:","(the","argument","argument","fold:","(the","argument","argument"],"the length":["of","of","filter","of","of","of","just","of","of","mismatch","of","of"],"the length.":["It"],"the lengths":["of","of","and","would","of"],"the lengths...":["seems"],"the lengthy":["implementation"],"the less":["feedback","I"],"the less-than":["greater-than"],"the lessons,":["I"],"the letter":["characters,","characters"],"the letters":["in"],"the letters*":["are"],"the letters-with-scores":["in"],"the letters.":["What"],"the level":["of"],"the library":["exercism","documentation"],"the light":["of"],"the limit,":["but"],"the limited":["view"],"the line":["length","with","of","with","with","that","before","isn't"],"the line,":["but","so"],"the lines":["of","with","between","of","inside"],"the linguistic":["meaning"],"the list":["of","of","to","in","into","or","might","of","stuff.","back","comprehension.","natively.","comprehension","beforehand","to","representation","of","transform","and","contains","version","of","comprehension","without","comprehension","comprehension.","you","of","module.","and","of","upon","when","sorted","of","a","is","a","once","of","at","of","trivial.","to","a","is","alphabetically","is","a","a","lengths"],"the list).":["I'm"],"the list,":["rather","I","so","but","in","in"],"the list.":["https://github.com/kytrinyx/exercism.io/issues/135","If","I","I","The","The"],"the list_ops":["exercise"],"the lists":["are","once.","are","are","more","more","using","if","aren't"],"the local":["variables"],"the logic":["for","into","from","--","expressive.","inside","for","is","of","for","a","from","correct.","of","of","clearer,","would","was","of","inline","like","for","to","behind","though","behind","for","order","for","for"],"the logic,":["though."],"the logical":["next"],"the long":["run."],"the longer":["you"],"the looks":["of","of"],"the lookup":["Dict"],"the lookup,":["are"],"the loop":["for"],"the lowercase":["codepoint"],"the lowest":["bit","common"],"the lyrics":["to"],"the macro":["working","I"],"the macros":["are"],"the magic":["characters","that","number","number"],"the mailing":["list"],"the main":["word","word","word","strengths","method","method","code","elixir","point","word","problem","method,","point"],"the map":["in","and"],"the mapping":["between","between"],"the mass":["of"],"the match":["so","function"],"the match/2":["functions"],"the matches":["into","would","more","into"],"the matching":["comparison"],"the matter":["is"],"the mean":["time,"],"the meaning":["of","of","of"],"the meantime,":["I'll","I'd"],"the mechanics":["of"],"the memoization":["as"],"the memory":["use","use","use","use","use"],"the mental":["mapping"],"the merely":["downcased"],"the merge":["with"],"the message":["out","module","related","that","being","result;"],"the message,":["is"],"the messages":["with"],"the method":["itself..","uppercase","String.ends_with?/1","hey,","generic.","HashDict.update?","signature","names","name","is_blank?","definiition","on","call?","definitions","doesn't","names?","for","is","call"],"the methods":["that","with","i","so","based","to"],"the middle":["two"],"the middle,":["but"],"the midst":["of"],"the mill":["recursive"],"the mind":["of"],"the minimum":["of"],"the minor":["nits"],"the mistake":["of"],"the mixed":["encapsulation,"],"the module":["Language.","could","name.","though,","with","attribute","name.","as","one-liners.","by","to","(I","`Beer.Verse`","attributes","if","though,","name.","with","(Kernel.inspect)","it","would","in"],"the module)":["that"],"the module,":["explicitly","but"],"the module.":["If","Were"],"the module?":["I"],"the modules":["to"],"the mold":["you're"],"the moment":["your"],"the moment)":["that"],"the moment.":["There"],"the more":["it","traditional","verbose,","I","I","readable","ruby-ish","verbose","basic","important","you","elements","elements","difficult","challenging","OO"],"the most":["effective","readable","valuable.","surprise,","intention-revealing","appealing,","clear","but","important","readable","concise","is","recent","current","recent","challenging","standard","difficult","from.","important","important","elegant","efficient","recent","efficient","appropriate","general"],"the most,":["if"],"the motivation":["behind"],"the msg":["being"],"the much":["less"],"the multi-line":["methods"],"the multiple":["function","line"],"the munging":["in"],"the music":["theme."],"the naive":["upcase","implementation."],"the name":["of","should","should","`_`,","of","of","of","of","of","`do_extract_words`","of","`characters_used_in`.","\"dna\"","`string`?","as","of","of","and","`replace_when_is_thymidine`.","of","of","(`has_letters?`).","and","of","is","of","of","`last_four`","`interval`...","of","of"],"the named":["fn","functions.","function","private","function.","params"],"the names":["simply","of","of","of","(shouting,","of","of","for","in","don't","of","of"],"the names.":["Do","Would","Yeah,"],"the naming":["of","of","of","and","\"is_…?\"","of","here","and","is","of","of","of","of","of","tips."],"the natural":["idioms"],"the nature":["of"],"the necessary":["if/else"],"the need":["for","for","for","to","of","of","to","for","for","even","for","to","for","to","to","for","for"],"the negation":["for","operator.","of","of"],"the nested":["module.","function","list","iterations"],"the nesting":["of","there,"],"the nesting.":["Are"],"the new":["submission.","submission","anonymous","syntax.","anonymous","anonymous","implementation","version","`String.slice/2`","students","student","element","nodes","`~`"],"the newline":["behavior"],"the next":["exercise","lesson","ones?","exercise(word-count)","exercise","exercises..","function.","version","block\")","exercise.","revision","exercise.","one...","iteration.","iteration.","thing","function","one","iteration.","reduce","call","exercise","line","iteration.","`fn`","iteration.","exercise,","submissioin.","exercise.","step","2,","iteration","step","2,","exercises.","number"],"the nice":["features"],"the nicer":["option"],"the nil":["input","check","case","values"],"the nit!":["I"],"the nitpick":["button.","you","to:"],"the nitpicking":["begin!"],"the nits.":["Is"],"the noise":["on"],"the non-Russian":["eye."],"the non-list":["enumerables)."],"the non-obvious":["way"],"the non-parallel":["version","version"],"the non-syntactic-sugar":["form"],"the non-tail-recursive":["pitfall?"],"the normal":["practice","syntax","adjustment"],"the normalisation":["function"],"the normalization":["here"],"the normalize":["string.","function"],"the normalized":["letters","list","versions.","base"],"the not":["\\w","so"],"the notEmpty":["method."],"the notation.":["Is"],"the notion":["of"],"the noun;":["`StringInquiry`."],"the nucleotide":["exercise,"],"the nucleotide_counts":["result,"],"the nucleotides":["have","are","are,","were"],"the nudge":["in"],"the null":["value,"],"the number":["of","of","as","as","of","of","of","of","of","of","(instead","method","of","of","of","passed","of","of","111","10.","is","of"],"the number.":["It"],"the numbers":["`1`"],"the numbers-only":["input"],"the numbers.":["That"],"the numeral":["pair,"],"the obvious":["thing."],"the odd":["looking","code"],"the official":["ones.","tests"],"the offset":["inline"],"the oft-overused":["a-zA-Z"],"the old":["tests","quadratic"],"the once":["-"],"the one":["line","who","to","in","part","point","line","returned","that","letter"],"the one-liner":["functions,"],"the one-liners.":[":)"],"the ones":["to","I've"],"the only":["way","thing","thing","question","public","reason","thing","update","methods","allowed","one","meaning","reason"],"the opener":["to"],"the operation":["at","broken","a"],"the operations":["are","(filter"],"the operators":["at"],"the opinion":["that"],"the opposite":["comment"],"the optimal":["solution"],"the optimization":["only"],"the optimizations":["for"],"the option":["of"],"the order":["in","of","that","of","of","of","in","of","of","of","in","made","mattered","that","they're","of","of","it","of"],"the ordering":["of"],"the original":["source.","key","exercises","tests,","function","collection","version.","was","tests"],"the originals":["and"],"the other":["ones,","conditions","message","refers","modules.","hand,","one,","bit","function","two","function","anonymous","comments","works","version","solutions","side","for","for","way,","hand","hand,","syntax.","that","parts","languages","solutions.","when","hand","exercise.","there's","approach","would","private","process.","suggestions","more","hand","regexes","language","branches.","hand","hand","functions.","case"],"the other,":["but"],"the others":["to"],"the others.":["I"],"the outer":["function,","parens:"],"the output":["of","of","from","from","after","into","of","of","from","decision"],"the output,":["or","having"],"the output...":["hmm..."],"the outside":["does"],"the overall":["repetition"],"the overhead":["of","of"],"the pair":["of"],"the parallel":["version"],"the parameter":["\u003ccode\u003es\u003c/code\u003e","to","to","in","names","list","list"],"the parameter,":["just"],"the parameters":["aren't","already","of","to","to","in"],"the parameters.":["Not"],"the params":["in"],"the paremeters":["\u003ccode\u003ea,a\u003c/code\u003e"],"the parens":["around","in","around","on","for"],"the parens,":["so"],"the parentheses":["necessary?","omitted","around","around","are"],"the parentheses,":["at"],"the parentheses.":["For"],"the parenthesis":["in"],"the parser":["gets"],"the part":["of"],"the partition":["function."],"the parts":["you","that"],"the passed":["range.","range.","`Enum`"],"the past":["is","but"],"the past,":["but"],"the path":["with"],"the pattern":["match","matched","matching","matching","matching","matching","matching","match","matching,","matching","match","matching","matching.","matching","matches.","of","matching"],"the pattern-matching":["versions"],"the people":["active","that"],"the perfectly":["reasonable"],"the performance":["difference,"],"the person":["speaking"],"the perspective":["of","I'd"],"the phone":["number","number","number","number.","number","number","number"],"the phrase":["to","analysis.","than","into","into","into","and","is","into"],"the phrase,":["extract"],"the phrase.":["That"],"the pid":["around","to"],"the pieces.":["I"],"the pipe":["operator.","operator","operator","here","would","operator","operator","operator","into","forward","operator","forward","operator."],"the pipeline":["operator?","actually,","in","before","at","operator","in","in","operator","operator","for","operator","operator","operator","operator?","is","for","into","operator","operator","operator","operator","operator,","operator","operator,","operator","operator","operator","operator","as","before","to","is","result","(collection","and","|\u003e","(`|\u003e`)"],"the pipeline,":["hopefully"],"the pipeline.":["What","I","I"],"the pipeline?":["I"],"the pipelines":["at"],"the pipes":["when"],"the pipes.":["They"],"the pipes:":["https://github.com/elixir-lang/vim-elixir/pull/54"],"the place":["they're"],"the placeholder":["for","syntax"],"the plus":["one"],"the point":["I'm","of","of","I","of","of","of","of"],"the point.":["In"],"the pointer":["to"],"the pointer,":["new"],"the pointer.":["Got"],"the policy":["towards"],"the possible":["meanings"],"the potential":["for"],"the potentially":["matching"],"the pound":["sign"],"the power":["of,"],"the practice":["of"],"the practice?":["Define"],"the precondition":["for","of","is"],"the predicate":["methods.","function.","functions","functions","functions"],"the predicate,":["sacrificing"],"the predicates":["read","depending"],"the predicates,":["keeping"],"the predicates.":["Therefore"],"the preferred":["style"],"the prefix":["\"do_\"","in","`is_`","`is_`"],"the presence":["of","of","of"],"the previous":["one,","comment,","feedback","line","submission:","version","line",":","`Enum.map_filter`","exercise","one.","one,","revision","versions,","(word_count)","exercise,","nitpickers","iteration;","one."],"the previous,":["which"],"the prime":["factors"],"the prime-factors":["exercise","exercise"],"the prime_cache":["appears"],"the primitive":["that"],"the prince":["decides"],"the prior":["version."],"the private":["methods.","method","methods","functions","functions:","functions.","methods","helper","implementation","methods,","functions","methods","functions","implementation","helpers."],"the problem":["at","with","is","you","was","with","here","only","but","description","actually","using"],"the problem,":["e.g.","and"],"the problem.":["@darion"],"the process":["and","dictionary,","if","of","just","working"],"the process,":["but","could","instead"],"the process.":["The"],"the process?":["i.e."],"the program":["more","is"],"the promptings":["of"],"the properties":["you're"],"the protocol":["and","being","instead","but","wrapper"],"the provided":["tests."],"the public":["interface.","really","methods","ones,","interface","or","api?","interface","interface.","API","API","API","functions.","function","interface","sing","interface"],"the pull":["request"],"the punctuation":["test.","shouldn't","if","and"],"the purpose":["of","of","of","of"],"the purpose,":["thanks."],"the purposes":["of","of","of"],"the push":["to"],"the qualified":["name"],"the question":["mark.","is,","mark","better.","check,","and","mark","mark","mark","mark","mark."],"the question,":["I"],"the range":["and","is","test"],"the range,":["because","while"],"the range.":["I'll"],"the rare":["and"],"the rather":["complicated"],"the rationale":["for"],"the re-exported":["Erlang"],"the readability":["and","and","of","of","of"],"the readability.":["I"],"the reader":["to","to","to","in","has","to","to","understand","some","has","to","has","think","understands","knows","understand"],"the reader,":["but"],"the reading":["of"],"the readme":["about"],"the readme,":["but"],"the readme.md,":["and"],"the real":["sources","world","reduce","world"],"the reason":["is","for","for","I'm","of","I"],"the reasoning":["you","behind"],"the reassignment":["garbage"],"the record":["itself.","is","felt","directly:","directly\"","directly."],"the recur-forever":["problem"],"the recursion":["yourself","in","pattern","and","myself","patter,"],"the recursion.":["I"],"the recursive":["implementation","solution","call","strategy","calls","call","functions","function.","version.","call"],"the reduce":["job.","callback","function","approach","solution","version","(also","operation","call.","call...","construct,","function","callback"],"the reduce,":["but"],"the reducing":["function","function"],"the redundancy":["of"],"the regex":["really","character","a","you're","used","pattern","refinement","are","on","and","by","is","would","at","codes.","and","and","`%r/\\w+/g`?","is","stuff","match,","equivalent,","is","(yours","slightly","engine","matcher","match","in","in","itself.","in","hell","and"],"the regex,":["so","I'll","you're","`\\p{L}`"],"the regex.":["But","Also,","Additionally,",":)"],"the regex?":["If"],"the regexes":["and"],"the regexes,":["shane"],"the regexes.":["Please"],"the regular":["expressions.","expression","expression"],"the reject":["test"],"the relation":["to"],"the relative":["precedence"],"the relevant":["functions","functions."],"the remaining":["candidates","candidates"],"the reminder":["about"],"the reminder.":["Funny"],"the remove":["of"],"the renaming":["of","of"],"the repeated":["effort."],"the repetition":["of"],"the replace":["method"],"the representation":["of"],"the required":["regex","tests."],"the requirements":["changed,","changed,","changed","laid","which"],"the requirements,":["but"],"the respond":["functions?"],"the response":["right","logic","thus","logic","thus","of","to"],"the response,":["good"],"the responses":["--","into"],"the responsibility":["of"],"the rest":["I've","of","of","on","of"],"the result":["of","of","of","of","is","of","of","of","is","to","is","you're","so","binary","of","of","would","of","of","while","is","is","of"],"the result,":["or","but"],"the result.":["Nice","It"],"the resulting":["line"],"the results":["of","were","of","have","could","and","to","afterward)"],"the return":["values.","val","value","value","values"],"the returned":["list.","list","value?"],"the returns":["from"],"the reverse":["of","of","is","implementation.","implementation.","inside"],"the reverse.":["And"],"the reversed":["input"],"the reviewing/nitpicking":["then"],"the reviews.":["If"],"the reworked":["exercise"],"the right":["word","solution","answer.","direction.","so","elixir","thing","Elixir","Elixir","track!","places.","track.","tools.","thing.","direction.","choice","way","name","thing","direction.","track,","way,","of","idea.","way","thing.","direction!","result","term","situations.","direction.","of","one.","thing.","tool(s)","direction.","idea","fold:","fold:","track","order."],"the right-hand":["function"],"the right?":["Does"],"the risk":["of"],"the river":["of"],"the road,":["so"],"the role":["of"],"the roman":["chars"],"the root":["of"],"the roster":["and"],"the route":["I"],"the ruby":["convention","version:","community"],"the rules":["based"],"the runtime":["and","only"],"the russian)":["using"],"the sack,":["26"],"the safest":["option"],"the sake":["of","of","of","of","of","of","of"],"the same":["way.","thing","thing","in","arguments","effect,","conclusion","as","exercise","name","end?","thing.","type.","way","reason.","\"I","list","VM","code","function","string.","in","name","process","result","function","concerns","as:","way.","regex","for","task","result.","work","match.","line","result.","as","length.","result","as","thing,","as","kind","job.","for","thing","word.","word.","approach,","issue).","function","anonymous","argument","thing","as","word.","problem,","as","as","level","function","issue","thing,","that","as","as","reduce,","place","name.","time","either","word","call.","goal?","approach","constraints.","as","time","way","naming","as","two","but","approach,","name.","benefit","exercises","set.","word","distance","as","performance","use","semantics","approach","line","functions","comment","type","name","time,","and","approach","function","as","function.","effect,","approach","function","number","as","as","every","as","approach","function","approach","function","module,","approach","function","function","but","function"],"the same,":["but","yelling","so"],"the same.":["Thx.","That","Boom.","That's","I"],"the sanitize/1":["function."],"the sanity":["of"],"the scale.":["Is"],"the scan,":["but"],"the scenes":["refactoring","concatenating"],"the school's":["internal"],"the school.":["I"],"the scope":["of"],"the score":["of"],"the scores":["HashDict"],"the second":["argument","parameter","reviewer","version","(but","point.","strand","strand","term","version","param","solution.","argument","strand","iteration","iteration.","one.","is","would","time","append"],"the semi-colons":["at"],"the sense":["that"],"the sentence_to_check":["variable?"],"the separate":["module,","private","predicate","module.","`Dict.get`","`Greeting`"],"the separation":["of"],"the sequence":["of"],"the server":["pid.","around,"],"the set":["of","of","difference"],"the shape":["of","of","and"],"the short":["conditions","form","version","methods"],"the short-circuited":["conditional"],"the shortcut":["syntax","syntax"],"the shortening,":["I"],"the shorter":["functions.","block","form","ones"],"the shortest":["common"],"the shorthand":["way","notation","fn","`&amp;`.","notation","syntax","@maureen[max_value]","capture"],"the shout?,":["question?"],"the shouting":["detection.","case","case","in","in","in","in","in"],"the side-effect":["of"],"the sides":["are"],"the sides,":["which"],"the signal":["to"],"the significance":["(if"],"the silence":["clause","function,","I"],"the silence?":["call"],"the silent?":["awkwardness"],"the simple":["solution","but","side","nature"],"the simplest":["way"],"the simplicity":["of"],"the sing/2":["function,","function."],"the singalong":["I"],"the single":["responsibility","responsibility","line"],"the single-letter":["symbol."],"the single-line":["functions"],"the singular":["form"],"the site":["I'm","is","(such"],"the site!":["The"],"the site?":["I"],"the size":["of","of"],"the size,":["is"],"the size.":["It"],"the slice":["on","with"],"the small":["differences..."],"the smallest":["anagram","pieces"],"the snooze.":["Take"],"the sole":["source"],"the solicitor":["of"],"the solution":["most","too,","at","better.","so","looks","for","with"],"the solution.":["They're"],"the solution?":["Can"],"the solutions":["yet."],"the song":["text","to","are","as"],"the song).":["If"],"the sort":["letters","for","by","and"],"the sort.":["The"],"the sorted":["word","arrays","downcased","downcased","anagram","array","arrays","downcased","downcased","and"],"the sorting":["letters"],"the source":["of","word","once","HashDict","key/value","for","order","for","shows"],"the space":["character"],"the space).":["The"],"the spec":[":D","for","line","because"],"the spec,":["but"],"the spec.":["What’s","That"],"the spec...":["but"],"the special":["syntax"],"the specific":["methods.","dictionary","case"],"the specifics":["of"],"the specifics,":["I"],"the specified":["workers."],"the specs":["using"],"the spirit":["of","of"],"the split":["in","with"],"the splitting":["up"],"the square":["function,"],"the stack":["trace","frame","entry","entry","entry","entry","of","entry","entry","entry","entry","entry","entry"],"the standard":["elixir","library,","library","library.","library,","library?","is","library","lib.","library","library","library,","modules...it","library.","library.","mistakes","`Dict`"],"the star":["of","of"],"the start":["and","of","and"],"the start.":["So"],"the start/end":["of"],"the state":["of","is"],"the statement":["is"],"the stdlib":["or"],"the stdlib,":["it","look"],"the stdlib.":[":D"],"the steps":["in","of","are"],"the store":["and","and","and"],"the story":["I","of","at"],"the strand":["need","in","with","will"],"the strategy":["of"],"the streaming":["tip,"],"the strict":["left-fold"],"the string":["tests","\"SHOUT\"","from","into","with","and","into","instead","check","is","actually","before","literal","is","checks","checks","before","get","before","I","would","is","\"ÉÑØ\".","is","but","to","to","concat","contained","again","doesn't","of","is","of","uniquely","is","contains"],"the string,":["right?","which","then"],"the string.":[":)","The","Might","I'd"],"the string?":["Maybe","Might"],"the strings":["using","of","--","in","contained","all","you"],"the strings,":["but"],"the strings.":["Is","Is","Can","Is"],"the strip":["first"],"the stripped":["msg","string"],"the structure":["of","of"],"the student":["list?"],"the students":["in","each"],"the students,":["efficiently."],"the stuff":["it","you","you"],"the style":["of","`map_join(...)"],"the subject":["of","of","of"],"the submitted":["version"],"the subsequent":["function.","comparison"],"the subset":["to"],"the subtraction":["rule"],"the successive":["transformations"],"the suggestion":["about","on","on","to"],"the suggestion.":["I've","I've"],"the suggestions":["by","incrementally.","you"],"the suggestions,":["and"],"the suitcase":["you"],"the suite":["of"],"the super-slow":["`def"],"the supervision":["tree"],"the supplied":["cond"],"the swapped":["'acc,"],"the sweet":["spot"],"the symmetry":["of","of"],"the syntactic":["clutter"],"the syntax":["was","after","documentation","of","for","`?X`","of","for","just","resembles","for","for","for"],"the system":["will","will","will","will","will"],"the table":["at"],"the tail":["call","recursion","recursive","recursion,"],"the tail-call":["form"],"the target":["for","word","word","for"],"the task":["very"],"the tea-totalers":["in"],"the technique":["to","before,"],"the teenager":["domain","get","is","is"],"the teenager,":["and"],"the teenth":["concept,"],"the template":["string","to"],"the term.":["You"],"the ternary":["operator"],"the test":["pass,","you","suite","suite","case","suite","will","passes","cases?","case","cases","for","suite.","cases","doesn´t","suite","suite","cases,","as","suite","cases","pass?","suite","suite","suite","suite","for","if","function.","function","don't","to","suite,","about","is","suit","!","when","change?)","suite","suite,","does)","suite","does)","suites","file","still","file","for","for","suite"],"the test-suite":["feels"],"the test.":["Is","Let"],"the tester":["functions"],"the tests":["(as","make","passing","is","when","pass","pass,","pass","in","but","pass.","crashes","was","may've","and","currently","was","were","required","without","expect","in","in","pass,","I'm","constructed","are","pass!","to","don't","passing.","pass","required","again.","green!).","for","to","and","to","for","themselves","in","to","don't","need","require,","passing","forcing","run","should","are"],"the tests,":["or","and","it's","but","including","but"],"the tests.":["And","The","on","It's","Thanks","So"],"the tests;":["attempts"],"the tests?":["I'm","This","I'm"],"the testsuite":["took"],"the text":["from","in","out","here","then"],"the texts":["are","in"],"the textual":["representation"],"the the":["string","`dict","punctuation"],"the there_are_letters":["function,"],"the thesaurus":["and"],"the things":["I","that","they"],"the third":["`to_rna`","append"],"the thorough":["explanation!"],"the thought":["of"],"the three":["helper","versions","sides","cases","clause","argument","names"],"the time":["comes","to","Elixir","to","comes","yet.","we","taken","needed","taken","needed","but","needed","needed","I","gets"],"the time.":["In","What"],"the tip":["on","on","on",":)","on","about"],"the tip!":["Yes","I"],"the tip)":["and"],"the tip,":["christhekeele."],"the tip.":["I","I"],"the tips":["about",";)",":)"],"the top":["level","shows","for","as","and","of","of","of","right","of","level.","level","of","of"],"the top-level":["in","`match`"],"the total":["cost"],"the tradeoff":["between"],"the tradeoffs":["are?"],"the trailing":["\"\\n\""],"the transform":["of"],"the transforming":["functions"],"the tree":["hasn't"],"the triangle":["inequality","inequality","inequality."],"the trick.":["List"],"the trouble":["of"],"the true":["notation"],"the truth":["of"],"the tuple":["and","elements","and"],"the tuples,":["which"],"the twice":["to"],"the two":["space","strands","lines","nucleotides.","words","lines","lines...","```String```","clauses","letter","letter","clauses.","clauses.","`Regex.match?`","operations","semi-complex","clause","clauses","parameters","tests"],"the type":["of","of","of","of","of","of","of","of","of","signatures"],"the types":["involved.","involved"],"the typical":["convention","algorithm","pitfall"],"the typo":["in","=)"],"the typo.":["And"],"the ugly":["workaday"],"the underlying":["Erlang","Erlang","pattern","implementation","implementation.","distinction"],"the underscore":["prefixed","added"],"the underscore.":["That"],"the unicode":["category)","issue.","issue","equivalent"],"the uniq":["inside"],"the unit":["test"],"the unit-tests":["don't"],"the unnecessary":["call","clauses."],"the unquoting":["of"],"the unwritten":["exercism"],"the upcase":["check","check","and"],"the upcasing":["and"],"the update":["on"],"the updated":["list","order"],"the upper-case":["unicode"],"the uppercase":["version"],"the usage":["of"],"the use":["of","of","of","of","of","of","of","of","of","of","case","of","of","of","of","of","of","of","of","of","of"],"the usefulness":["of"],"the user":["to","towards","of"],"the uses":["in"],"the usual":["pitfalls","pitfalls"],"the utility":["of"],"the v0.10.1":["syntax"],"the valid":["dna"],"the validate":["function"],"the validations":["for"],"the value":["and","it","of","of","of","through","it","can't","list.","just","is","of","of","they","of"],"the value\"?":["Not"],"the value,":["stripped,"],"the value.":["In"],"the values":["of","in","of","pointed"],"the values.":["It's","Can"],"the values?":["Can't"],"the variable":["\"phrase\"","would","helps","`str`","from","in","codepoint","in","name.","isn't","words"],"the variable.":["\u003c\u003cvar\u003e\u003e"],"the variables":["that","in"],"the various":["conditions","conditions","conditions","cases.","responses?","cases","inputs"],"the verbosity":["you"],"the verbosity,":["were"],"the verse":["generation","clauses.","number","templates"],"the verse,":["which"],"the verse/1":["function,"],"the verses.":["Now","Thanks!"],"the version":["before","of","with","without","using"],"the versions":["that"],"the very":["start,","start,","latest","nice","first","end"],"the view.":["My"],"the visual":["communication"],"the wall":["for"],"the wall,":["no","#{bottles}","no","One","#{num}"],"the warnings":["from"],"the wartier":["aspects"],"the way":["I","if","on","it's","you","to","this","the","the","down","that","you","I've","I","to","you","you","you","to","the","that","you","you","the","you","to"],"the way,":["these","why","extra","`||","I","if"],"the way.":["Is"],"the website":["will"],"the week":["in","and"],"the weekday":["names","type"],"the wheel":["on"],"the wheel'":["version."],"the whole":["Regex","functional","list,","string?","string","`fn","mess","list","this","looks","though","thing","looks","naming","reduce","thing.","this","looks","word","your","thing","Erlang","thing","collection","HashDict","string","thing?","string","looks","roster","list"],"the why,":["but"],"the win!":["Using"],"the window.":[":)"],"the word":["I","criteria","to","in","passed","in","in","normalize","\"idiomatic\"","like","once","(before","list","list","rather"],"the words":["were","strophe,","in","in","instead","are","when","you"],"the words,":["count"],"the words.\"":["I"],"the work":["for","on"],"the wrap":["the"],"the wrap/unwrap":["implementation."],"the wrong":["place.","exercise.","thing","function","place","behavior","approach.","link,","part.","approach."],"the year":["but"],"the year-on-planet-relative-to-earth":["into"],"the yelling.":["I"],"the zip":["stage."],"the zipper":["exercise."],"the {year,":["month,","month,"],"the |&gt;":["pipeline","pipeline","operator","operator.","operator.","is","operator"],"the “readable":["but"],"their arity":["(the"],"their associated":["sounds?"],"their build":["up,"],"their conjunction.":["(Overgeneralised"],"their meaning":["unambiguously."],"their meaning,":["at"],"their meanings":["more"],"their module":["names"],"their name":["and"],"their order":["in"],"their original":["state.","casing."],"their own":["named","in","named","named","named","named","functions","functions","thus","(defp","functions","methods?","functions.","methods.","private"],"their purpose":["and"],"their side":["effects."],"their tastes":["and"],"their uses,":["but"],"them (":["maybe"],"them (e.g.":["`Enum.map"],"them (line":["8)"],"them *why*,":["exactly,"],"them ,":["so"],"them -":["helps"],"them `npa`":["and"],"them a":["more","clear","bit"],"them all":["twice,","the","by"],"them are":["named"],"them as":["&amp;update/2","private","strings,","`Enum.map`.","ints,"],"them being":["`true`","returned."],"them by":["using"],"them can":["be"],"them clearer":["when"],"them collapsed":["in"],"them could":["be"],"them easier":["to","to"],"them everywhere":["you'd"],"them explicit.":["Some"],"them for":["all","very"],"them from":["GitHub"],"them have":["that"],"them here,":["so"],"them in":["this","my","Erlang.","a","next","further","as","the"],"them instead":["of"],"them into":["private","a","one?","`anagrams?`"],"them is":["mostly"],"them just":["for"],"them more":["expressive."],"them multiline":["to"],"them nearer":["to"],"them off":["it"],"them onto":["a"],"them our":["own"],"them out":["yourself."],"them out.":["Plus"],"them outside":["of","of"],"them private":["(`defp`","you"],"them private?":["I"],"them separate":["functions","because"],"them short":["and"],"them side-by-side":["the"],"them slightly":["different"],"them so":["you"],"them tail-recursive.":["Maybe"],"them the":["following","explicit","same,"],"them there":["that's"],"them to":["to","my","catch","their","get","be","count"],"them together":["in"],"them unless":["they're"],"them up":["really"],"them using":["String","String"],"them when":["refactoring."],"them which":["created"],"them with":["`defp`.","`alias`","a","[","the"],"them without":["the"],"them) in":["your"],"them) works":["just"],"them), is":["true"],"them). Please":["look"],"them, if":["only"],"them, instead":["it"],"them, only":["the"],"them, plus":["lack"],"them, so":["I"],"them, though,":["just"],"them. Can":["that","anyone"],"them. I":["might"],"them. I'd":["just"],"them. I'll":["spin"],"them. If":["you"],"them. It":["does"],"them. Only":["downside"],"them. There's":["not"],"them? Have":["I"],"them? Was":["there"],"theme. Very":["creative."],"themselves not":["being"],"themselves outward":["from"],"then \"Fine.":["Be"],"then \"Sure\"\"":["etc"],"then 3,":["then","then"],"then 4,":["...","..."],"then Elixir":["moves"],"then Enum.foldl":["and"],"then I":["realized","do","remembered","got","saw","could","discovered","could","saw","decided","got","settled","want","split","reject","fold","run"],"then I'd":["love","urge"],"then I'll":["take"],"then `:lists.foldr`":["gains"],"then `Enum#filter`":["over"],"then `_empty?`":["doesn't"],"then `flatten`":["it"],"then `max_by`,":["but"],"then `put`ting":["it"],"then a":["list","`map`"],"then also":["serve"],"then an":["`Enum.reduce`"],"then be":["used"],"then build":["your"],"then call":["that","\"methods\""],"then capitalize":["the"],"then chaining":["them"],"then changing":["things"],"then check":["for","if","to"],"then compare":["that","the"],"then convert":["it"],"then deleting":["them)."],"then do":["a","I","is"],"then doing":["a"],"then don't":["use"],"then elixir":["fails"],"then find":["the"],"then flatten":["which"],"then got":["frustrated"],"then had":["to"],"then having":["it"],"then immediately":["use."],"then in":["`match/2`","that"],"then it":["becomes"],"then just":["hurried","map","doing","put"],"then let":["all"],"then logically":["it"],"then look":["it"],"then making":["both"],"then map":["it"],"then maybe":["that's"],"then my":["last"],"then needed":["to"],"then negate":["the"],"then oddly":["*not*"],"then only":["use"],"then out":["to","to"],"then pattern":["match"],"then putting":["_"],"then realized":["that"],"then reject":["any"],"then rejoining":["threads"],"then reversing":["the"],"then reversing.":["The","The"],"then right":["shift"],"then simplify":["the"],"then split":["it","it"],"then splitting":["on","the","the","you","you"],"then that":["is"],"then that,":["it"],"then the":["pipe?","regex","whole","whole","\"public","bsl","example","original","clause","clause","total"],"then there":["is","seems"],"then to":["see"],"then try":["to","to"],"then turn":["it"],"then use":["them","them","that","a"],"then using":["a"],"then validating.":["I"],"then yes.":["The"],"then you":["can","can","can","count","could","wouldn't","wouldn't","don't","could","have","memoize","will","could"],"then you'd":["have"],"then your":["\"ground"],"theoretically if":["there"],"there -":["you","are","nice","nice","looking"],"there I":["was"],"there String":["functions"],"there a":["better,","way","reason","way","way","particular","reason","reason","way","reason","better","more","need","need","way","reason","better","way","place","more","simpler","way","way","way","way","way","reason","way","reason","performance","way","built-in","more","way","better","way","way","way","reason","test","character","name","clearer","reason","way","better","way","better","way","particular","way","similar","reason","specific","different","way","resource","way","way","way","name","better","way","reason"],"there an":["approach","advantage","Elixir","already"],"there another":["way","reason"],"there any":["way","way","particular","improvement","way","way","way","way","guidelines","way","particular","particular","other"],"there are":["parentheses","alternatives","many","no","others","elixir","other","some","more","other","multiples","any","tests","spaces","much","no","many","some","too","actual","on","multiple","cases","hacks","a","thousands","any","no","performance","no","English","English","only","pretty","submissions","efficiencies","any","more","no"],"there are,":["but"],"there aren't":["(for","there"],"there as":["well"],"there be":["a"],"there because":["it","I"],"there before":["`line`'s"],"there better":["names"],"there doesn't":["seem","need"],"there for":["consistency.","me","a","consideration,","whatever"],"there have":["been","been","been"],"there in":["the"],"there is":["something","another","a","a","a","a","a","a","a","not","a","a","a","a","`Enum.foldl`","a","a","a","in","in","a","probably","a","a","not","a","a","a","a","a","nothing","for","at","a","no","an","a","`Enum.count/2`","a","essentially","a","so","a","a","no","an","no","so","a","a","no","a","not","at","an","a","a","at","no","still","a","no","a","only","an"],"there isn't":["`str`,","a","anything"],"there isn't.":["Guard"],"there might":["be","be","be"],"there more":["descriptive"],"there much":["benefit"],"there must":["be","be","be"],"there names":["you"],"there needs":["to"],"there on":["the"],"there only":["moderators"],"there other":["ways","way"],"there seem":["to"],"there seems":["to"],"there should":["be","be","be…","be","be","be","be","be"],"there simplifies":["most"],"there some":["other","other"],"there something":["you"],"there still":["needs"],"there that's":["fine"],"there they":["implement"],"there to":["describe","see","deal","make"],"there too)":["so"],"there was":["going","a","no","no","a","a","a","a","a","a","a","an","an","some","another","a","a","a"],"there were":["other","more","enough","any"],"there with":["trying"],"there would":["be"],"there! I":["have"],"there! Maybe":["make"],"there'd be":["no-one"],"there's [a":["function"],"there's `length`.":["You"],"there's a":["way","fair","quite","cleaner/more","lot","neat","new","typo","fair","better","2-argument","lot","better","cleaner","function","better","better","good","more","way","nicer","good","technique","pitfall","better","very","general","standard","256-tuple","trick","way","really","\"better\"","different","policy","shorter"],"there's actually":["a"],"there's also":["`ZipData.new`.","a"],"there's always":["a"],"there's an":["already"],"there's any":["performance","of"],"there's at":["least"],"there's better":["ways"],"there's definitely":["an"],"there's even":["a"],"there's going":["to"],"there's just":["one","one"],"there's more":["in"],"there's much":["benefit"],"there's no":["reuse,","replace","\"is_\"","warning","good","need","problem","\"instance\"","real","anchor","other","`List.count`","need","variables"],"there's normally":["a"],"there's not":["a","yet","much","much"],"there's nothing":["wrong"],"there's only":["a","one","one"],"there's plenty":["more"],"there's pretty":["much","much"],"there's quite":["a","a"],"there's some":["duplication","good","duplication","unicode"],"there's still":["more"],"there's useful":["information"],"there's very":["little"],"there, almost":["perfect"],"there, because":["it"],"there, pattern":["matching"],"there, this":["is"],"there. :)":["I"],"there. Didn't":["realize"],"there. Even":["wrapping"],"there. I":["noticed","recommend"],"there. It'd":["be"],"there. Thanks":["again"],"there. Yours":["is"],"there... no":["idea"],"there: You've":["eliminated"],"there? What":["are"],"there? `[\\w-]+`?":["I"],"there_are_letters function,":["but"],"therein kind":["of"],"thereof) into":["separate"],"therms of":["performance?"],"thesaurus and":["according"],"these all":["caps?\","],"these are":["just","tiny","called","focused","all","hard","personal"],"these before,":["we'll"],"these boolean":["valued"],"these code":["points"],"these code;":["the"],"these comments":["and"],"these concerns":["than"],"these conditionals.":["For"],"these days,":["or"],"these except":["concat,"],"these exercises":["and","is"],"these exercises,":["I"],"these exercism":["exercises"],"these functions":["should","require","are","need"],"these ifs":["nested"],"these issues":["in"],"these just":["seem"],"these kind":["of","of"],"these kinds":["of"],"these list":["ops"],"these methods":["might","to","private!"],"these methods,":["but"],"these nitpicks":["for"],"these now":["as"],"these one-line":["`,"],"these particular":["tests,"],"these private":["methods","functions"],"these requirements":["properly."],"these string":["libraries"],"these things":["take","that"],"these things,":["but"],"these things?":["(The"],"these thoughtful":["comments!"],"these three":["functions"],"these to),":["I'm"],"these tuple-case-pattern-matchings":["are"],"these viewpoints,":["thanks!"],"these with":["that"],"these would":["be"],"these! I've":["read"],"these, or":["are","eliminate"],"they add":["a"],"they allow":["me"],"they are":["anagrams","coming","not","doing.","anagrams","used.","private","implemented","internal","how","too","called","longer","defined.","partially","amazing","boolean.","binaries","a","not","easy","subtly","not","superfluous.","exercises,","both","defined","used.","matching","in","hearing,","fairly","all","all"],"they are),":["then"],"they are,":["frankly,"],"they aren't":["very","equal"],"they be":["separate?"],"they called":["methods"],"they can":["do,","call"],"they cause,":["the"],"they come":["from"],"they could":["be"],"they cover":["all"],"they decided":["to"],"they definitely":["aren't"],"they describe":["what","the"],"they didn't":["say"],"they do":["it.","or"],"they don't":["work,","require","understand"],"they flowed":["similarly,"],"they have":["more","dependencies","some"],"they hey(\"\")":["one."],"they hide":["the"],"they implement":["everything"],"they just":["have"],"they let":["me"],"they look.":["Though"],"they make":["your","changes"],"they match":["up"],"they may":["not"],"they mean":["almost","almost"],"they might":["be?","be","end"],"they must":["be"],"they need":["to"],"they not":["have"],"they often":["aren't","provide"],"they piped":["to"],"they properties":["(`aggressive?`"],"they provide":["example-based","clearly"],"they really":["belong"],"they return":["different","means."],"they seem":["to","harder"],"they should":["not","be."],"they sort":["of"],"they spot":["something."],"they still":["do"],"they support.":["See"],"they try":["to"],"they used":["`is_shouting?`"],"they were":["unnecessary.","the","found"],"they weren't":["very"],"they won't":["blow"],"they work":["at","fine."],"they work,":["and"],"they would":["still","work.","work"],"they'll either":["find"],"they'll quickly":["see"],"they're a":["one","bit"],"they're added":["in"],"they're aligned.":["Bizarre.)"],"they're available":["rather"],"they're causing.":["I"],"they're defined":["next"],"they're explicitly":["needed"],"they're frowned":["upon."],"they're given.":["Hence"],"they're lists":["of"],"they're more":["like"],"they're mutually":["incompatible,"],"they're named":["the"],"they're necessarily":["objectively"],"they're not":["really","a","the","strictly"],"they're not,":["so"],"they're not.":["Good"],"they're probably":["not"],"they're really":["necessary"],"they're reusable":["and"],"they're the":["largest"],"they're there.":[":)"],"they're trying":["to"],"they're using":["pipes,"],"they're visible":["outside"],"they? They":["feel"],"thing ,":["your","you","you"],"thing ,the":["private"],"thing I":["can","want","would","see","will","suggest","can","could","could","would","think","could","notice","would","noticed,","didn't","would"],"thing I'd":["look","look","change"],"thing I'm":["not"],"thing a":["yell","bit."],"thing about":["it","the"],"thing and":["it's","it's"],"thing at":["all."],"thing but":["let"],"thing comes":["first."],"thing executed":["in"],"thing for":["this","function"],"thing happen":["by"],"thing here":["is"],"thing in":["order","itself","constant","Ruby","memory"],"thing into":["a"],"thing is":["a","calling","I'd","nifty.","that","that","a","my"],"thing makes":["me"],"thing on":["a","one"],"thing past":["the"],"thing that":["I","could","is","bother","keeps","was"],"thing that's":["discouraged"],"thing though":["is"],"thing though:":["could","should","`String.length(s)","why","why"],"thing to":["understand,","consider","do","split","beat","keep","do,","know;","be"],"thing took":["me"],"thing was":["working."],"thing was/is":["in"],"thing you":["said","could","need"],"thing! Very":["cool."],"thing, and":["you're","might"],"thing, but":["using","the"],"thing, except":["it"],"thing, instead":["of"],"thing, so":["I'm","it'd"],"thing, which":["@kay"],"thing, you":["can"],"thing. Can't":["fault"],"thing. Do":["you"],"thing. I":["am"],"thing. My":["other"],"thing. Same":["for"],"thing. Sorry":["for"],"thing. This":["is","is"],"thing. `question?(input)`":["instead"],"thing... it's":["idiomatic"],"thing...in your":["shouting?"],"thing: There":["is"],"thing: `&({&1,":["count(strand,"],"thing: `String.length(s)":["=="],"thing: if":["you","you"],"thing: is":["the"],"thing: it's":["pretty","more"],"thing: the":["last"],"thing: there":["is"],"thing: you":["could","don't","don't"],"things (doing":["away"],"things (that":["have"],"things *is*":["often"],"things .But":["for"],"things I":["like","should","noticed:","didn't","wished"],"things I'd":["recommend","like","like"],"things a":["bit?"],"things and":["the"],"things are":["broken","here,"],"things around":["a"],"things as":["well)."],"things based":["on"],"things but":["call"],"things by":["doing"],"things clearer.":["Check"],"things correctly,":["even"],"things for":["you?"],"things immutable.":["That"],"things in":["my","this","Elixir","the"],"things is":["that"],"things jump":["out"],"things like":["`is_list`,","syntax,","that","`+`)","`Enum.map`","counting","`&(&1+1)`","`Enum.map`","precedence.","that,","`&(&1","the"],"things more":["obvious"],"things on":["a"],"things out":["into"],"things people":["say"],"things readable,":["would"],"things require":["the"],"things simple":["and"],"things so":["it","each"],"things stand":["right"],"things start":["going"],"things take":["too"],"things that":["define","\"might","really","might","I","threw","work","iterators","are","I"],"things they":["are"],"things this":["way"],"things to":["think","keep.","the","me","learn","functions","make","multiple"],"things turned":["out"],"things up":["a","so"],"things up.":["Thanks!"],"things very":["well..."],"things were":["truly"],"things with":["side","this,"],"things would":["look"],"things you":["could","could","want","could","*could*"],"things, both":["to"],"things, but":["I"],"things, it's":["hard"],"things, pass":["in"],"things, so":["can"],"things, though.":["Well"],"things. I":["will","like","chose"],"things. If":["`@judd`"],"things. One":["hint"],"things. Presumably":["the"],"things. Since":["`\\w`"],"things. The":["guards"],"things. Would":["it"],"things. You":["could"],"things: is":["there"],"things: the":["second"],"things? \".":["Such"],"things? (The":["answer"],"think \"is_\"":["is","prefix","is"],"think \"silent?\"":["is"],"think \"what":["did"],"think '?'":["at"],"think (it's":["been"],"think :).":["Do"],"think @dee":["is"],"think Elixir":["allows"],"think I":["am.","submitted","jumped","got","made","figured","went","probably","like","saw","found","a","tried","like","could","had","stopped","discovered","used","might","got","like","did","interpreted","like","use","want","solved","would","heard","know","didn't","know","was","may","have","want","need","did","will","still"],"think I'd":["prefer"],"think I'll":["leave","spend","leave","implement"],"think I'm":["ready","taking","right.","ok"],"think I've":["been"],"think List.flatten/1":["is"],"think Regex":["should"],"think String.split":["makes"],"think `:alpha:`":["translates"],"think `Enum.map_join/3`":["would"],"think `HashDict.update`":["might"],"think `Regex.scan`":["might","might","to"],"think `String.codepoints`":["would"],"think `[head|tail]`":["thinking"],"think ```something":["="],"think `cond`":["looks"],"think `dict`":["or"],"think `reduce`":["is"],"think `sanitize`":["is"],"think `segment`":["is"],"think `split_words`":["could"],"think `split`":["should"],"think a":["regex","heredoc","little","better","naive","list"],"think about":["it,","this:","abstracting","abstracting","making","it,","`String.upcase`","the","that?","a","the","making","extracting","using","streaming.","just","that","the","adding","a","using","it,","it.","naming","that,","the","implementing","using","protocols","that","that","giving","characters","that,","just"],"think after":["doing"],"think aliasing":["it"],"think arguments":["could"],"think bits":["and"],"think each":["method"],"think either":["of"],"think first":["version"],"think folding":["the"],"think for":["predicate","you,","the"],"think get_counts":["(and"],"think harder":["now."],"think having":["a","exercises"],"think idiomatic":["Elixir"],"think if":["the","you","you","you"],"think in":["term","this","some"],"think is":["more","not","very","large","more","more"],"think it":["might","might","works","might","would","helps","is","could","reads","could","is","shows","is","could","would","might","helps","helps","was","is","would","will","loses","would","would","goes","would","could","came","would","was","helps","would","belongs","reads","expects/requires","would","looks","adds","gives","has","does","would","improves","is","describes","could","would","buys","helps","would","goes","would","would","is","would","looks","gives","has","would","is","will","looks"],"think it'll":["feel"],"think it's":["a","readable,","a","a","better","important","a","slightly","a","necessary","still","a","the","in","a","better","less","worse","a","better","more","a","more","just","possible.","just","possible","possible","a","worth","my","clever","useful","always","a","bad,","totally","*wrong*,"],"think its":["more"],"think just":["as"],"think line":["4","3"],"think list":["comprehensions","comprehensions"],"think makes":["the"],"think maybe":["because"],"think might":["make"],"think more":["in"],"think my":["frustration","Elixir"],"think now?":["is"],"think of":["using","is","doing","using","a","that?","where","modularizing","piping","a","a","a","this","it,","doing","as","some","any","a","using","a","\"d,","a","that","a","new","some","any","how","it","extracting","using","while","a","that.","a","someone","a","it,","that?","how","that.","to","a"],"think of.":["I"],"think on":["it","it"],"think perhaps":["using"],"think putting":["the"],"think reads":["a"],"think recursion":["is"],"think reduces":["the"],"think regex":["to"],"think restructuring":["as"],"think reusing":["one"],"think shorthand":["notation"],"think snake_case":["is"],"think so.":["I","I"],"think something":["like"],"think sorting":["it"],"think special":["casing"],"think strictly-speaking,":["the"],"think sufficiently":["clear,"],"think that":["the","Elixir","Elixir","comes","would","was","the","would","Regex","option","silence?/1","Dict.update","it's","would","now","the","if","the","is","the","```","jah","piping","not","my","adding","word","`tokinizer`","there","it","*is*","is_question","Elixir","helps,","I","sort","would","through.","it"],"think that'll":["be"],"think that's":["sort","cause","the","really","a"],"think the":["\"anagrams\"","code","intention","tradeoffs","only","only","`is_`","variable","`is_`,","`\\b`'s","most","protocol","name","sweet","typical","naming","code","previous","binary","new","`not_same?`","Elixir","preferred","tests","leading","`Enum.map/2`","compiler","logic","generic","`inc_counter/2`","String","fact","gain","pair","idea","init","confusion","main","test","definition","current","way","unicode"],"think there":["might","a","is","is","should"],"think there's":["much","any","a"],"think these":["are"],"think they":["used"],"think they're":["visible"],"think this":["reads","will","is","is","one's","is","is","sort","is","would","is","looks","Regex","is","is","even","is","might","version","version","is","looks","one","will","looks","looks","may","exercise","looks","one","is","straightforward","looks"],"think those":["private","situations"],"think through":["different"],"think to":["try","do","look","use"],"think using":["```|\u003e```","`%r/\\w+/`","`Enum.filter`","a"],"think we":["should","got"],"think we're":["just"],"think what":["@sydnee","you","most","the"],"think would":["be"],"think you":["can","could","could","can","can","could","could","could","should","could","can","need","need","could","could","could","need","could","are","should","can","made","should","could","can","can","are","could","can","could","need","are","could","might","can"],"think you'll":["find","find"],"think you're":["right,","using","using","right","right.","going","thinking","referring","right","right","reached"],"think you've":["now","got"],"think your":["comments","goal","_count","formatting","code","definition","`map`"],"think) of":["Elixir"],"think, naming":["the"],"think. See":["the"],"think. Thanks":["for","again."],"think. Why":["not"],"think. `first_line`":["in"],"think...) instead":["of"],"think? Are":["there"],"think? Between":["this"],"think? I'll":["go"],"think? If":["you"],"think? In":["my"],"think? Kind":["of"],"think? What":["if"],"think? Would":["you","it"],"thinking 'forceful'":["messages"],"thinking (in":["ruby"],"thinking -":["and"],"thinking about":["flexibility!","it.","good","statements","this","how","it,","it,","the","the","other","the","this,","modules","the","the"],"thinking along":["the"],"thinking is":["very","my"],"thinking it":["but"],"thinking just":["of"],"thinking more":["along"],"thinking of":["making","`case`)","the","a","implementing","something"],"thinking or":["uniting"],"thinking there":["was"],"thinking through":["it","it"],"thinking to":["\"go"],"thinking wrapping":["it"],"thinking, when":["you"],"thinking. (There":["is"],"thinking. In":["the"],"thinks Banana":["is"],"thinks about":["things"],"thinks of":["`|\u003e`"],"third `to_rna`":["clause"],"third append":["is"],"this \"notation\"":["and"],"this -":["I"],"this --":["it's"],"this 2nd":["version"],"this @america":["stuff."],"this I":["think","had"],"this I'd":["say"],"this Regex":["is"],"this `&namefun`":["is"],"this `:lists.sort":["String.codepoints"],"this `String.last(arg)":["=="],"this ```String.ends_with?```":["function"],"this `cond`.":["Anyway"],"this `do_*`":["style"],"this a":["bit?","bit","plus.","bit:","little","bit","bit","bit","fair"],"this accepted,":["or"],"this accidentally?":["This"],"this actually":["tests"],"this algorithm":["run"],"this all":["fits"],"this and":["ready","am","use","`Enum#reduce`.","I'll","the","didn't"],"this anonymous":["function"],"this any":["tighter?"],"this application.":["I"],"this approach":["is"],"this approach!":["Very"],"this approach,":["as"],"this as":["done","a","a","an","done","a","in"],"this assignment,":["a"],"this assignment.":["Please","We"],"this be":["expanding","more"],"this because":["I","I"],"this better":["than","than"],"this better,":["or"],"this but":["am"],"this by":["throwing","using","coming"],"this can":["work","be","return"],"this case":["though","maybe","statement","it","the","it's","I","because","it's","however.","(correct","though.","(sounds","results","because","as","because","it","I","the","I","it","the","they","I'd","you"],"this case,":["but","words)","a","it's","because","since","that","of","at","at","I","I","you'd","I'm","you"],"this case.":["What","The"],"this case?":["Am"],"this check":["on"],"this clear":["and"],"this code":["is","and","is","react","could","pass","is","looks","is.","is","looks","looks","without","greatly.","doesn't","by","does"],"this code.":["Would","Thank"],"this comes":["with"],"this community":["is"],"this concurrent":["version"],"this cond":["statement."],"this condition":["`def"],"this conflict,":["other"],"this consistent":["and"],"this context":["I"],"this context);":["but"],"this context,":["but"],"this context.":["I"],"this could":["be"],"this definintion:":["_containing"],"this definition":["of"],"this direction":["because"],"this direction,":["what"],"this discussion":["on","is"],"this do":["to"],"this doesn't":["work!","feel","create","create","surprise","create","create","create"],"this domain":["and"],"this down":["into"],"this earlier,":["but"],"this easier":["to","to","on"],"this ecosystem":["so"],"this even":["works.","better","though"],"this every":["new"],"this example":["but","is"],"this example?":["I've"],"this exercise":["is","in","I","as","also","that","you","I","can","so","so","is","in","in","would","though.","either.","in","did","should","in","though,","as","will","didn't","is","as","in","without","is","never","in","in",";)","in","in","in","I"],"this exercise)":["to","that"],"this exercise),":["be","but"],"this exercise).":["But","I"],"this exercise,":["there's","if","but","`''`","but","I","we","but","so","it's","the","where","is"],"this exercise.":["Thanks!","Your","I","Predicates","The"],"this exercism":["format."],"this explanation,":["I"],"this fairly":["common"],"this feels":["better."],"this first":["assignment"],"this fits":["the"],"this for":["approval!","short","you","the","almost","every","the","this","`action`","a"],"this form":["what"],"this forum":["to"],"this from":["my"],"this function":["does","to"],"this function.":["Maybe"],"this function?":["My"],"this functionaly":["instead"],"this functions":["with"],"this got":["accidentally"],"this handles":["nil"],"this has":["better","finally","pretty"],"this if":["it"],"this implementation":["expects","return?","is","(at"],"this implementation,":["you're","sorting"],"this implies":["iterating"],"this in":["your","the","the","the","languages","as","the","iex.","my","Elixir","very","O(n","a","`match`:","production,","the","the"],"this info.":["While"],"this inner":["`Enum.count`"],"this input":["validation"],"this instance.":["I"],"this instead:":["`defp"],"this into":["\"beautiful"],"this is":["not","good\"","OK.","that","an","too","pretty","a","a","essentially","pretty","an","simply","submitted","not","wrong!","correct!","a","what","a","a","why","really","just","a","a","great.","a","hard.","not","a","what","about","on","not","one","one","[deprecated](https://groups.google.com/forum/#!topic/elixir-lang-core/FnlK6VjZ190).","more","the","every","my","probably","an","a","just","safe","not","a","the","bad","an","a","popular","that","really","clear","broken","all","not","because","a","indeed","Russian","great.","my","my"],"this is,":["but"],"this is?":["Seems"],"this isn't":["idiomatic","really","a"],"this iteration":["that","feels","and"],"this just":["doesn't","does"],"this kata":["is"],"this kata,":["it"],"this kind":["of","of","of"],"this knowing":["that"],"this latest":["revision."],"this lets":["me"],"this light,":["how"],"this looking":["now?"],"this looks":["good.","great.","great.","good","great,","a","good","pretty","pretty","pretty","pretty","great.","pretty","great.","great!","good,","good.","good","good.","absolutely","better:","good."],"this magnitude":["doesn't"],"this makes":["a"],"this matches":["on"],"this mathematical":["exercise."],"this matter":["I"],"this matter,":["It's"],"this may":["be"],"this means":["digging","that"],"this might":["run","not"],"this module":["to","uses"],"this more":["easily","readable:"],"this myself":["recently,"],"this needed":["to"],"this needs":["some"],"this nesting":["depth"],"this new":["language"],"this of":["where"],"this one":["anyway...","for","does.","good","better,","took","is","is","though.","before","has","up","was","because","seems","doesn't","(it","was","yourself","is","(not","has","and","is","takes","much","looked"],"this one's":["clean"],"this one,":["then","I","but","since"],"this one.":["Is","Any","Can","What","The","I","I","It’s","I"],"this one...":["`match_word`"],"this only":["took"],"this or":["move"],"this ordering":["because"],"this originally":["after"],"this out":["into","over","a"],"this out.":["I","I"],"this page":["in","and"],"this page,":["and"],"this particular":["example","case","case","case","case"],"this partition":["method"],"this pass":["in","for","the","all","all"],"this passed":["for"],"this piece":["of"],"this pipe":["case"],"this point":["=)","it's","it's","to","a"],"this point,":["dont","and"],"this point.":[":)"],"this problem":["pretty","and",":)","there","doesn't","I","because","if","btw."],"this problem,":["I"],"this problem.":["In","The","Perhaps"],"this problem:":["you"],"this process":["along,"],"this program.":["I've"],"this reads":["better!","a"],"this ready":["for"],"this really":["elegant"],"this refactor":["with"],"this refactoring":["so"],"this scenario":["I"],"this seems":["to"],"this shaped":["up."],"this shorcut:":["`%r{[[:alnum:]]+}`"],"this short":["when"],"this should":["do","work","be"],"this shouldn't":["run"],"this simple":["exercise","level","job,","example,"],"this simpler":["is","and"],"this site":["to"],"this slightly":["more"],"this small":["amount"],"this so":["that"],"this solution":["though","-","was","is","better.","better."],"this solution,":["you"],"this solution.":["I"],"this sort":["of","solution"],"this sorting":["method"],"this specific":["example,"],"this straight":["out,"],"this straightforward":["algorithm"],"this string?\",":["\"are"],"this stuff":["```"],"this stuff.":["I"],"this style":["of"],"this style,":["it's"],"this submission":["would"],"this submission...se":["iteration"],"this symbol.":["Also,"],"this syntax":["is"],"this syntax.":["It"],"this task.":["There's"],"this test":["wasn't","with"],"this than":["Erlang"],"this that":["way."],"this the":["first","algorithm"],"this thing":["a","a"],"this time":["I"],"this to":["the","me","better","use","be","the","be"],"this too":["and","old?"],"this too,":["but"],"this too?":["`if"],"this try/catch":["for"],"this type":["of","of"],"this up":["as"],"this use":["case,","case?"],"this uses":["erlang"],"this using":["concurrency,","\u003ccode\u003eList.foldl/3\u003c/code\u003e","`List.foldl/3`","List.foldl/3","pattern","guards","`Enum.reduce`.","reduce."],"this variable":["is"],"this version":["turned","identical","using","of","hides","better.","would","I","is","and","as","and"],"this version,":["or"],"this viewport":["though."],"this was":["the","the","the","a","the","one","a","the"],"this way":["before.","-","better.","in","is","the","but","but"],"this way,":["here's"],"this way.":["Elixir","I"],"this web":["interface"],"this website,":["i"],"this were":["a","real"],"this what":["you","you","you"],"this whether":["or"],"this which":["involves","involves"],"this whole":["this"],"this will":["pass","raise","help"],"this with":["pattern","pattern","a","macro's","that","just","different"],"this without":["any","using","transforming","using","the","using"],"this won't":["handle"],"this work":["with","you","so"],"this works":["due","too","too.","too.","equally","fine"],"this works!":["I"],"this works.":["I'm","Note"],"this would":["definitely","be","make","be.","be","have","work"],"this wouldn't":["match"],"this x":["lines"],"this yet,":["but"],"this you":["can"],"this, I":["saw","think"],"this, and":["it"],"this, but":["would","it's","does","then","I'm","it","there's","I"],"this, honestly,":["but"],"this, it's":["a"],"this, on":["lines"],"this, or":["is"],"this, please":["tell"],"this, since":["you're"],"this, so":["the","don't"],"this, the":["notion","`i`","fact"],"this, too.":["Elixir"],"this, true,":["but"],"this, was":["peeking"],"this, which":["extracts"],"this. (see":["submission"],"this. Absolutely":["nothing"],"this. Any":["tips"],"this. For":["the"],"this. Good":["work."],"this. I":["agree","learned","think","am","am"],"this. I'd":["still"],"this. I'm":["still"],"this. Just":["wonder"],"this. Reading":["through"],"this. Should":["probably"],"this. The":["HashDict"],"this. This":["was","was"],"this.\" Basically,":["once"],"this... but":["the"],"this... is":["it"],"this: I've":["put"],"this: `%r/[^\\p{L}\\p{N}\\s]/`":["(i.e."],"this: `Range[first:":["1,"],"this: a":["sentence"],"this: http://www.erlang.org/doc/efficiency_guide/myths.html#id61501.":["It"],"this: shouting":["and"],"this? Because":["that's"],"this? Is":["there"],"this? Prepending":["on"],"this? `map(arr,":["&[&1,"],"thorough Nitpick":[":)"],"thorough. I":["was"],"those I":["thought"],"those `%s`":["sigils?"],"those and":["just"],"those another":["time."],"those are":["supposed","kind"],"those as":["well"],"those atomic":["units"],"those attributes":["now,"],"those boil":["down"],"those boolean":["functions"],"those calls":["were"],"those case":["statements..."],"those cases":["being","things"],"those cases.":["I'll"],"those cases?":["Is"],"those changes":["but,"],"those changes.":["Let"],"those character":["classes"],"those characters":["you"],"those conditions":["(ie","because"],"those definitions":["using"],"those different":["string"],"those extra":["lines."],"those function":["existed."],"those functions":["without","-"],"those have":["unary"],"those in":["your"],"those integers.":["I"],"those internal":["functions"],"those into":["the"],"those letters":["are"],"those lines.":["All"],"those macro":["definitions."],"those make":["sense"],"those methods":["not","be","in","might"],"those module":["attributes"],"those more":["as"],"those names?":["I"],"those numbers":["come"],"those on":["your"],"those operations":["starts","would"],"those optimal":["calls."],"those out":["without","to","to"],"those params":["around"],"those parts":["that"],"those predicate":["methods"],"those private":["methods","functions","functions"],"those private.":["I"],"those regexes":["will","are"],"those requirements":["likely"],"those responsibilities":["into"],"those sections":["\"exchange"],"those seemed":["to"],"those semicolons":["or"],"those sigils":["were"],"those situations":["are"],"those some":["letters"],"those somewhere":["around"],"those strategies":["are"],"those string":["changes"],"those syntactic":["warts"],"those tail":["recursive"],"those terms":["to"],"those tests":["that"],"those texts":["going"],"those things":["that","is","in","were"],"those things.":["One"],"those to":["methods"],"those transformation":["functions"],"those transformations":["in"],"those two":["names","cases.","notes","so","into"],"those up":["without"],"those used":["in"],"those who":["have"],"those words":["represent?"],"those would":["be","force"],"those. (Although,":["map_reduce"],"those? Maybe":["a"],"though (assuming":["the"],"though (or":["`Regex.scan(phone_pattenr,"],"though -":["very"],"though I":["agree","wasn't","am","do","don't","may"],"though I'm":["sure","not"],"though `import`":["is"],"though all":["the"],"though and":["you"],"though as":["few","in"],"though by":["being"],"though for":["this"],"though in":["real"],"though is":["does"],"though it":["might","always","does","was","seems","would","used"],"though it's":["not","not","not","not","not","a"],"though pattern":["matching"],"though probably":["slightly"],"though since":["that"],"though that":["will","shouldn't","makes","`\\w`"],"though that's":["actually","a"],"though the":["specifics","result","answer"],"though there":["are"],"though they":["may"],"though this":["partition","code"],"though to":["make"],"though words":["like"],"though you":["could"],"though you're":["repeating"],"though your":["approach"],"though, I'm":["using"],"though, `1":["=="],"though, `elem(t,":["-1)`"],"though, a":["list"],"though, and":["is","I","I"],"though, because":["I"],"though, can":["i?"],"though, correct?":["I"],"though, getting":["rid"],"though, having":["the"],"though, if":["you","you"],"though, it":["throws"],"though, it's":["performing","not","a","more"],"though, just":["because","be"],"though, so":["you'll","I'm"],"though, that":["efficiency"],"though, that's":["personal","why"],"though, the":["convention","syntax"],"though, they":["provide"],"though, those":["cases"],"though, what":["is"],"though, which":["is"],"though, with":["adding"],"though, you'd":["end"],"though. Bad":["idioms"],"though. But":["I'm"],"though. Can't":["wait"],"though. Do":["you"],"though. For":["example"],"though. I":["haven't","like","just"],"though. I'm":["going"],"though. It":["implies","reads"],"though. Make":["the"],"though. The":["`pling`,"],"though. Well":["done"],"though. Will":["get"],"though. `String.to_char_list!/1`":["throws"],"though: `String.length(s)":["=="],"though: could":["`Regex.scan`"],"though: it":["seems"],"though: should":["\"1\""],"though: we":["sort"],"though: why":["not","not"],"thought \"is_\"":["looked"],"thought I":["had","read","was","better","might","should","was","looked"],"thought I'd":["try"],"thought It":["was"],"thought about":["the","this","it!","using","other","using","breaking","the","breaking","that","making","it","_why_","adding","how","passing","Regex.scan?","sanitizing","it","splitting","using"],"thought and":["effort"],"thought assigning":["```prepare_entry()```"],"thought because":["of"],"thought briefly":["about"],"thought do_stuff":["was"],"thought exercise:":["What"],"thought experiment,":["if"],"thought it":["might","was","was","would","through"],"thought longer":["about"],"thought no":["magical"],"thought of":["a","that","you","on","it","that","using","adding","using"],"thought of.":["Cool."],"thought on":["this","`void?`"],"thought part":["of"],"thought passing":["a"],"thought somebody":["would"],"thought that":["using","_that_","cond","it"],"thought the":["same,","exercise","order","intent"],"thought there":["was"],"thought they":["would","weren't"],"thought this":["was","one"],"thought those":["sigils"],"thought to":["myself","use","give"],"thought usage":["of"],"thought was":["to"],"thought would":["be"],"thought you":["could","advocated","could"],"thought, I":["decided"],"thought, but":["I"],"thoughtful comments!":["New"],"thoughts (or":["anyone's)"],"thoughts about":["it.","that"],"thoughts on":["that","extracting","that.","that.","my","repeatedly","the","that"],"thoughts. That's":["cool"],"thoughts? Or":["would"],"thousands of":["characters"],"threading the":["index"],"threads of":["computation."],"three are":["testing"],"three argument":["form"],"three cases":["seems"],"three clause":["map"],"three clauses":["that"],"three functions":["`silence?/1`,","are","you've"],"three helper":["functions"],"three months":["ago,"],"three names":["of"],"three passes":["to"],"three pieces?":["I"],"three private":["functions"],"three sides":["explicitly..."],"three times":["with"],"three versions":["of"],"three)[http://exercism.io/submissions/5200f77aa402f8c7930002b7] but":["I"],"three? Or":["were"],"threw a":["lot","syntax"],"threw me":["off"],"through Enumerable":["does"],"through Exercism.":["I"],"through Programming":["Elixir"],"through [Learn":["You"],"through [the":["Enum](http://elixir-lang.org/docs/stable/Enum.html)"],"through _all_":["of"],"through `Dict`).":["`HashDict`"],"through `Enum`":["trying"],"through `hey`,":["you"],"through `import":["String`)"],"through a":["series","method","dictionary"],"through all":["the"],"through alongside":["encoding"],"through and":["refactor","made","do"],"through different":["approaches."],"through exercises":["in"],"through it":["again.","correctly,","I"],"through learning":["Erlang"],"through methods,":["and"],"through the":["`//`","crash","[Getting","rest.","language","standard","core","docs","`reduce`","few","`Regex`","entire","docs","DNA","`Access`","suggestions","trouble"],"through this:":["http://www.erlang.org/doc/efficiency_guide/myths.html#id61501."],"throughout my":["code."],"throughout the":["methods","term."],"throw a":["fit"],"throw an":["error?","exception"],"throw and":["error"],"throw exception":["due","due","due","due","due"],"throw the":["`List.flatten`"],"throwing a":["stack","stack"],"throwing in":["a"],"throwing something":["new"],"throwing that":["out"],"thrown around":["a"],"thrown for":["very"],"thrown if":["this"],"throws a":["syntax"],"throws an":["exception"],"thumb is":["that","that"],"thus hard":["to"],"thus in":["Elixir)"],"thus is":["not"],"thus making":["it","it"],"thus separating":["the"],"thymidine, it's":["just"],"tidy up":["my"],"tied to":["the"],"tight code.":["I"],"tighten that":["up"],"tighten up":["those"],"tightened it":["up"],"tightens things":["up."],"tighter. You":["guys"],"tightly tied":["to"],"tightness. I":["don't"],"till we":["hit"],"time (outside":["the"],"time -":["so"],"time Elixir":["will"],"time I":["touch","can","get","used","looked","abandoned","wanted","forget","didn't"],"time I've":["used","used","thought","seen"],"time Perl":["programmer."],"time `++`":["takes"],"time and":["I","passing"],"time as":["storing"],"time at":["the"],"time but":["only"],"time check":["on"],"time comes":["where","to"],"time coming":["up"],"time complexity":["(O(n^2)).","problem."],"time complexity)":["of"],"time complexity,":["for"],"time consolidating":["the"],"time dropped":["from"],"time each":["string"],"time elixir":["for"],"time explaining":["myself","it"],"time figuring":["out"],"time finding":["anything."],"time for":["every","&amp;1"],"time gets":["dull."],"time going":["back"],"time if":["you"],"time interrogation":["of"],"time invested":["in"],"time is":["a"],"time it":["is","compares"],"time it's":["used."],"time needed":["becomes","becomes","for","for","for"],"time on":["that"],"time quite":["powerful."],"time refactoring":["this"],"time so":["I"],"time soon.":["However,"],"time taken":["is","is"],"time thinking":["about"],"time to":["nominate","get","call","give","comment!","get","think","proper","move"],"time translation":["of"],"time trying":["to","to","to"],"time understand":["what"],"time until":["there"],"time users":["how"],"time waste":["but","but"],"time we":["use"],"time where":["this","it"],"time with":["code","a"],"time writing":["`pretty/1`"],"time you":["use","add","pull","accessed","\"change\""],"time, I":["posted"],"time, I'm":["not"],"time, but":["I","certainly"],"time, in":["ResponseChecker.nothing?,"],"time, the":["next","next","next","next"],"time. For":["a","a"],"time. However":["both"],"time. I":["do,"],"time. I'll":["play"],"time. In":["particular"],"time. Is":["there"],"time. Same":["for"],"time. So":["if"],"time. Some":["notes:"],"time. What":["goes"],"time: #{good_time},":["bad"],"time: repeated":["appending","appending"],"timers around":["things,"],"times (I":["see"],"times (once":["for"],"times (which":["is"],"times I":["had","written"],"times as":["much","long","part","long","long"],"times but":["it"],"times by":["using"],"times in":["`compare`"],"times on":["the"],"times over":["the"],"times with":["missing","explicit"],"times, but":["I"],"times, whereas":["the"],"times. Also,":["you're","you're"],"times. Perhaps":["you"],"times. That":["feels"],"times. version":["3"],"times; could":["you"],"tiny (truly":["nit-picky)"],"tiny and":["the"],"tiny bit":["better","more","shorter.","more"],"tiny functions.":["I"],"tiny nit":["on"],"tiny nitpick":["would"],"tiny nits:":["it's"],"tiny thing:":["it's"],"tiny things.":["Since"],"tiny thought":["on"],"tiny, irrelevant":["edge-case"],"tiny, minor":["-"],"tiny-tiny problem":["that"],"tip about":["iolists."],"tip for":["pattern"],"tip on":["`Enum.map_join`!","ends_with?","the","Unicode"],"tip that":["is"],"tip to":["reduce"],"tip! I":["will"],"tip! Yes":["indeed,"],"tip) and":["`fold`,"],"tip, @hertha!":["In"],"tip, christhekeele.":["I've"],"tip, makes":["total"],"tip, sounds":["similar"],"tip. Elixir":["supports"],"tip. I":["think","guess","wouldn't"],"tip: `&([&1|&2])`":["can"],"tip: `List.zip`":["doesn't"],"tip: in":["a"],"tip: using":["`Regex.scan`"],"tip: you":["can"],"tips :)":["..."],"tips about":["`HashDict.update/4`."],"tips and":["tricks!","pointers"],"tips anyone":["has"],"tips at":["this"],"tips on":["how"],"tips. After":["thinking"],"tnx, i've":["now"],"to !silence?":[":)","by"],"to \"+\"":["in"],"to \"99":["beers.\""],"to \"day,":["month,"],"to \"go":["away\"."],"to \"match\"":["again"],"to \"sanitize\"":["anymore."],"to \"update\"":["a"],"to \"year\"":["here"],"to #anagram_for?":["as"],"to 'query',":["'request',"],"to 'use":["Bitwise'"],"to 0,":["rather"],"to 0.10":["at"],"to 0.11":["and"],"to 0.1s,":["so"],"to 10.2-dev":["and"],"to 9":["(no"],"to 99.":["I"],"to \u003ccode\u003e:shout\u003c/code\u003eing":["--"],"to \u003ccode\u003egenerate_counts\u003c/code\u003e":["so"],"to \u003ccode\u003eupdate_count(word,":["dict)\u003c/code\u003e."],"to @isabelle":["for"],"to @joy":["for"],"to @kayla":["here"],"to @kayleigh,":["I"],"to Anagram":["and"],"to Clojure's":["frequencies."],"to DRY":["it","those","those","it","that","up"],"to Dict,":["so"],"to Dict.update:":["&(&1"],"to Elixir":["and","is","so","as","and","myself,","so","and"],"to Elixir's":["toolchain","tests."],"to Elixir,":["so","so","but","so","so"],"to Elixir.":[":)"],"to Enum.join":["like"],"to Enum.sort,":["Enum.concat,"],"to Erlang":["when"],"to Erlang's":["restrictions"],"to Google":["good","Translate)"],"to HashDict.merge":["in"],"to HashDict.new.":["You"],"to Haskell":["where","as"],"to José's":["style"],"to List":["but"],"to List.flatten,":["the"],"to List.flatten...":["not"],"to Regex#replace/4":["is"],"to Regex.match?":["when"],"to Ruby's":["ActiveSupport"],"to String.ends_with?,":["I"],"to String.ends_with?/2,":["otherwise"],"to String.split":["to"],"to Teenager#silence?":["in"],"to [\"A\"|\"B\"]":["being"],"to [jeremy-w](http://exercism.io/jeremy-w)":["for"],"to `\"\"`":["instead"],"to `&amp;anagram?(word,":["&amp;1)`."],"to `Dict.to_list`":["to"],"to `Enum.at(earth_year_fraction,":["index)`."],"to `Enum.concat`:":["`++`."],"to `Enum.count`":["inside"],"to `Enum.filter`.":["That"],"to `Enum.map_join(fn":["{d,"],"to `Enum.map`":["you're"],"to `Enum.map`,":["for"],"to `Enum.member?`:":["`:lists.member`"],"to `Enum.reduce`":["if","based"],"to `Enum.sort`:":["Do"],"to `HashDict.new`":["and"],"to `HashDict.update`":["on"],"to `List.flatten/1`,":["I'm"],"to `Regex.scan`":["and"],"to `String.downcase`":["to"],"to `String.ends_with?`":["doesn't"],"to `String.split`":["instead"],"to `String.upcase":["true`."],"to `String`":["functions,"],"to `Teenager`":["because"],"to `Words.count/1`":["without"],"to `\\\\`":["in"],"to `\\w`":["and"],"to `a-zA-Z`.":["I"],"to `acc`":["for"],"to `add`,":["`grade`"],"to `allergic_to?`":["strikes"],"to `anagram?`,":["so"],"to `area_code`":["originally"],"to `bottle_phrase`":["in"],"to `bottles`":["but"],"to `call`.":["See"],"to `case`":["match"],"to `count/1`.":["Without"],"to `count`":["to"],"to `defp`":["a"],"to `do_count`.":["`List.foldl/3`"],"to `do_reverse`":["you"],"to `downcase`":["before"],"to `downcase`.":["Makes"],"to `fact`":["is"],"to `filter`":["and"],"to `filter`,":["`flat_map`"],"to `flatten`.":["Are"],"to `hey`":["that"],"to `iolist_to_binary`":["and"],"to `match`":["vs."],"to `number`":["instead"],"to `reduce_with/3`":["presented."],"to `reduce`,":["because"],"to `reduce`.":["I"],"to `s":["=="],"to `scan`,":["then"],"to `shouting?`":["it"],"to `silence`":["from"],"to `sing(start,":["finish)`..."],"to `sing_verse`":["buy"],"to `start_link`":["and"],"to `uniq`":["out"],"to `unquote(unquote(letter))`":["inside"],"to `word_list":["|&gt;"],"to a":["simpler","simpler","single","question","more","more","separate","single","cond","list","list,","variable","function","variable","variable","variable","more","function","capture-literal","separate","separate","statement","private","separate","list.","single","function,","handful","function,","list","hashset","char","binary","named","char","variable.","char","net","list.","private","list","list","list","bug.","single","tree","literal","`reduce`.","hashdict","reader","private","reduce","more","`List`","list,","number","character","helper","left","single","left","solution","function"],"to abbreviate":["this"],"to abbreviate,":["not"],"to abstract":["those","the"],"to abstracting":["out"],"to accept":["and","anything"],"to access":["it"],"to accomplish":["the","this","the","this","this","that?"],"to accumulate":["at","values?"],"to achieve":["(unlike","the","the"],"to actually":["decode","have","extract"],"to add":["a","`respond_to`","them","a","an","that","a","the","those","a","things","new","a","`?0`"],"to added":["`String.blank?/1`"],"to agree":["to","with","with"],"to agree,":["the","but"],"to aim":["to"],"to align":["the"],"to all":["string","the","dictionaries."],"to all_letters_match?":["or"],"to allow":["pattern","\"","just","code","them"],"to always":["use","use"],"to an":["empty","empty","empty","anonymous","alternative","empty","old","integer.","`Enum`","Enum","operator"],"to and":["didn't","from","including"],"to anonymous":["inline"],"to any":["of"],"to anything":["that"],"to append":["'?'.","efficiently."],"to append,":["so","so"],"to apply":["your","your","your","them"],"to apprach":["this,"],"to approach":["even","`chars/1`.","that."],"to arrange":["things"],"to as":["a"],"to ask":["one","why?","for","if","if"],"to assign":["to"],"to assigning":["that"],"to assume":["\"something"],"to augment":["the"],"to avoid":["an","regular","duplication.","duplication","the","the","the","conditionals","in","unpleasantness","having","the","explicitly","forcing","having","magic","duplicating","being","repeating","the","\"(CompileError)","lines","it","a","calculating","using","explicitly","any","running","second","infinite","that.","functions","that","it","the","the","importing","it.","them","accidental","existing","building","several"],"to avoid.":["Any"],"to banish":["from"],"to be":["an","coy,","a","public*","public","one-liners","consistent.","the","the","in","helpful","more","moved","able","gained","'proper'","joined","able","inside","so","a","more","properly","a","`?`,","the","actual","approved.","assembled,","a","nested","more","a","for","faster","in","able","handled","reviewed","better","0.9.1","wrong.","latest","able","stripping","a","directly","the","preferred","given","on","partially","private?","without","akin","written","refactored,","called","sorted","a","named","guards","hard","faster","repeated.","written\".","handled,","a","faster.","slightly","expanded","all","rather","scrubbed","much","recalculated","considered","honest.","a","able","able","added","private.","differing","ordered,","considered","used","considered","exported,","exported,","silence?","commented","effective)","necessary","considerably","something","a","more","converted)","any","important","very","computed","recursive.","more","a","accessed","returned.","part","one","concerned","used","returned,","further","used","trueish","invoked.","too","lazy","honest.","the","changed","learning","public?","parsed","defining","being","quite","needed","sorted).","to","a","public","able","evaluated","used","a","a","created","passed","a","created","a","called","more","a","the","repeated","improved","honest).","`each_with_index`","a","some","able","in","intuitive","evaluated","in","a","created","proven","public","translated","thrown","able","created.","working","useful","traversed/copied).","traversed,","created","traversed/copied).","fancy.","created","sure,","some","bracketed","had","consistent"],"to be,":["although"],"to be.":["Try","I","I","This"],"to beat":["on."],"to belong":["in"],"to benchmark":["it","it"],"to bet":["there's"],"to better":["understand."],"to binary":["e.g.","since"],"to binary,":["to"],"to blend":["the"],"to boot.":["For"],"to both":["be","of","for"],"to bother":["making"],"to bottle_phrase":["doesn't"],"to bottles":["are"],"to bottom":["and"],"to break":["a","it","up"],"to bring":["clarity","that"],"to build":["the","up","the","up"],"to by":["adding"],"to bytes":["and"],"to cache":["the"],"to calculate":["a","a","and"],"to call":["this","downcase","a","`question?`,","`Dict.update`","it","`HashDict`","the","`HashDict`","the","the","`Dict.some_fun`","them","`Dict`","`HashDict`","`Dict.some_fun`"],"to calls":["to"],"to capture":["just"],"to care":["what"],"to case-insensitively":["check"],"to catch":["nils,","case-insensitive","the"],"to cause":["a"],"to certain":["functions."],"to chain":["`String.strip`","functions"],"to change":["'words'","\"beer\"","\"beer\"","that","the","the","it's","this","it?","the","it","my","this","the","in","in","\"y\"","in","(where","all","the","anything","the","it,","your","the"],"to check":["for","for","out","for","if","if","for","for","for","that","if","if","for","for","for","out","the","out","out","for","for","for","the","if","that","that","to","for","for","for","to","for"],"to checking.":["It"],"to chime":["in"],"to circle":["back"],"to claim":["the"],"to clarify":["it"],"to clean":["up","things","this","up"],"to clear":["this"],"to code":["in"],"to codepoints":["to"],"to collapse":["to"],"to combine":["the"],"to come":["up","up","after","before","up","up","back","across"],"to compare":["the","the","it","with","letter","the","with","to"],"to complain":["about"],"to complete":["all","this"],"to compose":["split","said"],"to comprehend":["easily.","when"],"to comprehend.":["I","However,","Also,","I'll"],"to compute":["later."],"to compute.":["If"],"to concurrent":["processes,"],"to conform":["to,"],"to consider":["it.","ways","is","that","it"],"to considerer...":["Do"],"to consistently":["use"],"to constant":["factors"],"to contain":["bugs"],"to contribute,":["if"],"to contribute.":[":)","Thanks!"],"to convert":["list","a","the","a","a","to/from","between","the","the"],"to convert/cast":["a"],"to copy":["them","those"],"to copy/paste...":["but"],"to count":["pairs","the","each"],"to count.":["It's"],"to cram":["OO"],"to create":["the","a","a","the","a","as","mocks","an","the","the","the","an","a"],"to creating":["a"],"to cut/paste":["your"],"to deal":["with","with","with","with"],"to debug":["errors"],"to decide":["the","if","what"],"to decipher":["that"],"to declare":["these"],"to define":["the","behavior","it","the","functions","private","a","two","`inc`","public","public","functions","`not_match/2`","the","`total`","a","the","in","in","in","in","in","update_dict"],"to delete":["some"],"to denote":["a"],"to describe":["the","the"],"to describing":["my"],"to detect":["if","these"],"to determine":["if"],"to dig":["into","into","further"],"to digest":["if"],"to disagree":["because",":)","with"],"to display":["Elixir"],"to distinguish":["them,","between"],"to dive":["into"],"to diving":["in"],"to dna,":["so"],"to do":["with","is","the","that","that.","this","it","quite","it","it.","that.","that","this","the","that,","on","that,","with","the","it","this","the","that...","that","it","`fn(potential_match)","with","it,","(and","that","a","some","that","the","this?","it","this,","either","that","that.","it","that","exactly","this","this","this","it","that.","it","this","the","this,","a","the","a","that","with","more","with","it","all","it","that.","it,","it","pattern","a","the","it.","what","the","this","this","that","it.","with","with","a","explicit","the","so.","that,","with","the","something","are","with","things","more","so","with","with","it","that","a","any","to","it,","`Stream.map(&hd/1)","for","`filter`,","this","with","`(a","with","both","it","this.","to","with","what","ugly","an","it","something","the","it"],"to do)":["is"],"to do,":["but","and","it"],"to do.":["It's"],"to document":["this"],"to doing":["that"],"to downcase":["both","them"],"to downcasing":["your"],"to dry":["up"],"to duplicate":["the"],"to each":["of","other","other","function,"],"to elaborate":["with"],"to eliminate":["magic","the","the","duplication.","or","that","other","that"],"to elixir":[":)","to","standards.","too,","so"],"to elixir,":["this","I","this","this"],"to elixir-core..":["Well"],"to elixir.)":["And"],"to elixir?":[":)"],"to emphasize":["private"],"to encapsulate":["them","the","the"],"to enclose":["them"],"to encode":["the"],"to encourage":["people"],"to end":["the","with","with","those"],"to endless":["frustration"],"to ensure":["zip"],"to enumerate":["through"],"to enumeration,":["and"],"to equal":["`[]`."],"to equalize":["the"],"to erlang's":["`ìf``"],"to escape":["`?`,"],"to essentially":["select"],"to evaluate":["any"],"to ever":["have"],"to exclude":["words"],"to execute":["all"],"to exercism":["but"],"to exercism.io":["overwriting"],"to exist":["is"],"to expand":["the"],"to expect.":["@jacinto"],"to experiment":["though,","with"],"to explain":["the","the","why","the","an","an","what","an","my"],"to explicitly":["export","define","use","call","checking"],"to explore":["more"],"to exploring":["more,"],"to expose":["a","your"],"to express":["those","the","`concat`"],"to extend":["the"],"to extract":["the","the","the","the","\"Enum.sort\"","some","the","private","the","the","that","the","methods","`downcase_anagrams?`","the","it","the"],"to factor":["them","that"],"to fall":["back","over"],"to favor":["breaking"],"to feel":["like","like"],"to figure":["out","out","out","out","out","out.","out","out","out","the","out","out,","out","out"],"to files":["as"],"to filter":["out","empty"],"to finally":["get"],"to find":["many","an","empty","question","the","a","a","a","docs","out.","a","out","a","that","an","files","those","a","the","something","the","any"],"to finish":["the"],"to first":["convert","sort","time"],"to fit":["as","on"],"to fix":["it.","that","this","that","the","these","but"],"to fix,":["so"],"to flatten":["the","after,"],"to follow":["a","though.","common","in","the"],"to follow,":["although","but"],"to follow.":["Any"],"to force":["a","the","you","developers","me","people"],"to forceful":["sentences."],"to form,":["even"],"to format":["the"],"to function":["as"],"to functional":["programming,"],"to functions":["of","of","spanning","like","that","that"],"to functions,":["did"],"to further":["simplify"],"to fuse":["together"],"to gain":["a"],"to generally":["compare"],"to generate":["the","the","a","the","the","them.","the","that"],"to get":["into,","the","you","rid","simple","up","the","rid","rid","much","hidden","the","approved,","familiar","rid","my","rid","lost","here.","rid","a","the","the","the","to","in","in","the","partial","every","the","the","rid","the","something","and","my","to","a","the","more","rid","it","started","into.","rid","it","swallowed","picky","the","a","it","the","a","an","around","problems","tail","the","it","back","the","a","some","some","back","around","a","the","rid","rid","it"],"to get,":["the"],"to get.":["There's"],"to give":["the","a","these","a","them","the","feedback.","them","the","the","compile","it,","good"],"to give.":[":)"],"to glance":["over."],"to go":["with","here?","ahead","with","look","with","that","with","through","with","crazy","from","ahead","about","with","back"],"to go,":["accessing"],"to grab":["the","the"],"to greater":["speed"],"to guarantee":["you're"],"to guard":["clause","against"],"to guards":["if"],"to guess":["it"],"to guess,":["but"],"to guide":["people","where"],"to handle":["both","invalid","this","nil","nested","this.","that","this","empty","the","it","that?","both","a","`==`"],"to handle_keywords,":["plus"],"to have":["an","the","a","it","the","to","intend","but","a","another","all","update/0","#anagram_for?","a","a","@magali","the","a","to","an","both","ambiguities","idioms","some","only","explicit","something","to","instance","them.","a","to","no","the","a","early","separate","a","significantly","keywords).","repetition","repetition","the","the","issues.","someone","a","ugly","only","fun","the"],"to having":["`do_match`,","it","conditional","that"],"to hear":["them,","from","about","about","that","your","the","how","how","more"],"to help":["me","out","a","the","me","me","simplify","improve"],"to helper":["functions?","functions?"],"to here":["any"],"to hey":["default"],"to hey?":["My"],"to hide":["an"],"to higher":["order"],"to him;":["it"],"to hold":["the"],"to how":["you've","UTF-8","it","lists","lists"],"to http://stackoverflow.com/questions/4092113/how-to-reverse-a-list":["to"],"to ideas":["on"],"to identify":["the","groups","chaining,"],"to idiomatic":["Ruby"],"to ignore":["the","this"],"to illustrate":["how","this"],"to implement":["it","a","that","`parse`.","this,","my","`Teenger.empty?/1`","another","almost","this","that","'up',","most/all","it","both.","`concat`","this.","the","`append`"],"to implement.":["Maybe"],"to implement.)":["It'd"],"to import":["it.","HashDict.update","or","the","`String.capitalize/1`","all","them"],"to improve":["readability.","the","encapsulation,","this","it.","performance."],"to in":["fact"],"to include":["the","the","in","and"],"to increase":["readability.","readability."],"to increment":["the"],"to indicate":["that","that","the"],"to infer":["the"],"to inline":["it"],"to instantiate":["the"],"to instead":["define"],"to investigate":["`HashDict.merge`."],"to is":["determined"],"to is_anagram?.":["I"],"to isolate":["only"],"to it":["with","once","over","while"],"to it's":["better"],"to it,":["it's","so","not"],"to it.":["Maybe",";)","Dict","`Enumerable.reduce`",":)"],"to iterate":["on","on","over"],"to iteration":["#1."],"to iterations":["and"],"to its":["own","own","uppercase","head,"],"to join":["the","the","the","strings","the"],"to jump":["in"],"to just":["collapse","`&1","`&1","pattern","insert","giving","move","before","substitute","use","put","define","write","\"give","`@mossie`","use","verify","use","return","use","update","get","append","use","pass","four","upcase"],"to keep":["they","meditating","the","the","the","proper","things","that","in","that","`yelling`","the","the","the","track","rambling...","it","things","this","in","things","variables","the"],"to keep.":["Took"],"to know":["if","*how*","about","how","the","whether","which","elixir,","it'll","I","how","which","if","about","what"],"to know!":["Thank"],"to know,":["thanks!"],"to know.":["Thanks","Thanks."],"to know;":["these"],"to large,":["I"],"to lead":["me"],"to learn":["on","it.","how","to","about","for","Elixir"],"to learn!":["I've"],"to learn.":["I","That's"],"to leave":["`String.downcase()`","them","it"],"to less":["readable"],"to let":["it","processes","go"],"to leverage":["Erlang's"],"to like":["the","using"],"to limit":["you"],"to line":["up"],"to list":["and","conversion","first."],"to lists":["and"],"to lists.":["Are"],"to long,":["maybe"],"to look":["into","at","that","elsewhere,","up","into","for","for","for","at","back","at","up","at","for","at","for","into","at","up","there!","up"],"to lop":["off"],"to lose":["something","the"],"to maintain":["the","and"],"to maintain.":["Implementing","I"],"to make":["that","use","a","it","a","the","the","use","it","it","those","the","the","the","it","it","the","this","it","#command","it","the","use","the","the","them","it","private?","public.","use","the","sense.","a","sure","a","```_count```","IMHO!","this","the","sure","`silent?`,","it","the","them","the","the","the","sure","the","lines","more","the","sure","sense","count","it","`question?`,","this","that","precedence","clear","the","this","the","the","the","the","it","it","people","the","the","`question?`,","`shouting?`","the","the","it","sure","you","them","the","`allergic_to?`","the","it","them","sure","the","them","the","the","clear","it","people","the","each","the"],"to manage":["that","the"],"to mangle":["the"],"to manipulate":["it","it's","DNA,","numbers"],"to manually":["increment","verify."],"to map":["over"],"to map/map":["then"],"to mark":["this","subsequent"],"to master":["that"],"to master,":["instead"],"to match":["could","old","the","on","punctuation","[A-Z].","the","any","word","each"],"to match,":["but","not","but"],"to match.":["Is"],"to maximize":["efficiency,","readability"],"to maybe":["make"],"to me":["that","that","that","before","that","the","why","better","nested","than","so","that","that","like","that","as","that","in","that","was","to","to","-","at","like","to","in","in","when","as","because","when"],"to me,":["one","I","I","but","`yelling?`","why","and","so","it's","but","but","so","I"],"to me.":[":)","If","Elixir","I",":\\","The","Oh,","My","Nice","I","I've","Any","Is","What","Functions","Your","What's","Issue","Or","Thanks","Anyway,","It's"],"to mean":["gen_servers."],"to meet":["that"],"to memorize":["the"],"to mention":["easier","multiple","ask"],"to merge":["two"],"to merit":["it,"],"to mess":["with","with"],"to method":["calls?","calls?","chain","chain"],"to methods":["such"],"to minify":["the","my"],"to minimize":["my","unnecessary"],"to mirror":["some"],"to module":["attributes?"],"to module?":["(`defp`)"],"to most":["functions."],"to move":["the","on","on.","this","the","the","a","on","on","around","on","the","to","all","the"],"to much":["work","is"],"to multi-liners,":["which"],"to multiple":["lines.","lines.","lines.","lines,"],"to multiply":["the"],"to my":["first","mind.","eyes.","toolkit.","first","perl","approach.","Ruby","Elixir-newbie","point","own","way","post.","original","test"],"to myself":["\"This"],"to name":["a","a","?T","the","the","the","the","concisely,","since","and"],"to named":["functions"],"to need":["some","a"],"to negate":["the"],"to never":["use"],"to nitpick":["the","on",":)","with","anymore.","once","other"],"to noise":["ratio."],"to nominate":["this"],"to normal":["`String`"],"to normalize":["the","the"],"to not":["extract","strip","use","handling","use","call","return","having","require","require","like","really","repeat","perform","use"],"to note":["that"],"to notice":["the"],"to nudge":["me"],"to obtain":["a"],"to one":["function","exercise","expression","clause"],"to only":["sort","sort","sort","sort","do","call","extract"],"to operate":["on"],"to operations":["involving"],"to optimize":["my"],"to original.":["Thanks"],"to other":["module"],"to others":["to"],"to our":["natural"],"to output":["functions."],"to over":["apply","build"],"to overallocation":["it's"],"to parallel":["`min_by`."],"to parallelize":["the"],"to parentheses":[","],"to parentheses.":["In"],"to parse":["as","the","the","any","for","the","and"],"to parsing":["issues."],"to pass":["it","in","a","to","into","the","the","the","a","data","it","both","arguments.","the","some","really","a","all","it"],"to pass,":["so","but"],"to pattern":["match","match","match","matching"],"to perform":["that","the","on"],"to pick":["one,","nits,","the","on,","any","in"],"to piece":["them"],"to pipelining":["rather"],"to place":["the","`|`"],"to play":["with","with"],"to point":["out","out","this","out","out","out.","out:","out","that","it"],"to post":["an","an"],"to practice":[":-).","regular","specifying","tail-recursion"],"to prefer":["recursion"],"to prefer)":["is"],"to prefix":["the","the","them"],"to pretty":["much"],"to prevent":["`shouting?\\1`","the"],"to private":["methods","named"],"to process":["due"],"to produce":["the","and","the","a","the","readable","the"],"to proper":["macros."],"to properly":["match","use"],"to protect":["against"],"to protocols":["not"],"to prove":["here."],"to provide":["more","nits)."],"to providing":["constructive"],"to public":["methods"],"to pull":["out","the"],"to push":["back"],"to pushing":["the"],"to put":["it","the","a","that","me","the","the","\u003ccode\u003eis_\u003c/code\u003e","together","them","those","the","the","a","the","people","the","that","public","the","into","a","a"],"to qualify":["functions"],"to quickly":["scan"],"to quite":["find"],"to race":["ahead"],"to raise":["to"],"to re-create":["the"],"to re-program":["by"],"to re-read":["in"],"to re-set":["phrase."],"to re-sort":["it"],"to re-study":["how"],"to re-use":["the"],"to re-write":["code"],"to reach":["for"],"to read":["any","and","up","on","the","but","to","when","in","in","that","your","that","if","and","if","--","(and","this","at","in","back",":-)","if","than","as","than","the","up","and","to","but","due","and","and","your","and","the","for","the"],"to read,":["no?","especially","what","specifically","IMO.","they"],"to read.":["I'm","It's","Think","What","You","You're"],"to read/maintain/understand":["as"],"to readability,":["but"],"to realize":["I"],"to rearrange":["the"],"to reason":["that"],"to rebind":["the"],"to receive":["your"],"to receiving":["feedback"],"to recreate":["the"],"to recurse":["with"],"to reduce":["the","your","the","the","the","explicit","verbosity:","the","duplication","is","the"],"to reduce.":["Any"],"to refactor":["these","the","this","later.","from","or"],"to refactor!":["Enjoy"],"to refactor.":["It's"],"to refer":["to"],"to reference":["functions?","a","a"],"to refine":["my"],"to reflect":["what","that."],"to reformat":["the"],"to reimplement":["`append`"],"to reinvent":["the"],"to reject":["empty"],"to rely":["on"],"to remember":["that","that","the","that"],"to remove":["some","the","the","some","duplication","the","the","some","some","it","this?","some","your","the","the","`List.flatten/1`","the","characters","some","the","a","the","as","`cell","the","elements"],"to rename":["the","the","the"],"to rephrase":["\"fn"],"to replace":["it","\"beer\"","\"fn","`roman"],"to replacing":["non"],"to represent":["an","text."],"to reproduce":["the"],"to research":["that"],"to resolve":["this"],"to resources":["to"],"to respect":["it"],"to respond":["differently","to"],"to resubmit,":["but"],"to return":["atoms","your","that","`[]`,","the","a","the","false","lists","a"],"to reuse":["the","the","`count`","it"],"to reveal":["intent","the"],"to reverse":["on","only","the"],"to review":["first","other","the"],"to review,":["and"],"to rewrite":["your","it"],"to run":["into"],"to run?":["(In"],"to satisfy":["the"],"to save":["your","one"],"to say":["that","that","```is_```","this","is","with","object)","about","very","you've","very","you've","very","you've","here,","very","very","why"],"to say,":["except"],"to scan":["and","down,","all"],"to search":["for"],"to see":["a","if","if","how","how","how","that","what","how:","if","how","how","pattern","the","if","what","the","your","if","what","here","the","extremely","if","what","that","it","how","what","what","(though","how","your","my","if","what","in","if","if","a","how","if","if","if","there's","if","if","if","if","if"],"to see)":["logic:"],"to see,":["not"],"to seeing":["`@`s","how"],"to seek":["that"],"to select":["letters","only"],"to self:":["read"],"to send":["a","a","second"],"to separate":["them.","the","intention","cases.","concerns"],"to set":["examples"],"to share":["with","an"],"to shoehorn":["everything"],"to shorten":["the","them","up"],"to shout":["a"],"to shouting":["to"],"to shouting?,":["dont"],"to show":["which","what;s","how"],"to sift":["through"],"to silence?":["for"],"to simplify":["this","your","your","the","your","the","this","some","this","this","your","line","some","this","the","the","your","your"],"to simply":["be"],"to sing":["songs"],"to slow":["down"],"to small.":["However,"],"to solve":["a","a","this","this.","this","this","this"],"to some":["good","great","quick","feedback.","rather"],"to somehow":["infer"],"to someone":["reading"],"to something":["that","like","else","like","like","longer","more","like","like","that","like","like","that","else?","else.","semantically"],"to sort":["the","the","a","the","on"],"to sorting":["the"],"to spec":["`reduce_with/3`."],"to specify":["which","the"],"to speed":["up"],"to split":["the","up","out","and","a","a"],"to spot":["the"],"to stack":["overflow","overflows","overflow","overflow","overflow","overflow"],"to start":["incorporating","from","with"],"to start.":["I'm"],"to stay":["in","below","recursive,"],"to step":["back"],"to stick":["to","to"],"to stop":["combing","nitpicking","the"],"to strike":["a"],"to string":["your","functions"],"to strings":["you"],"to strip":["the"],"to stripping":["the"],"to style":["I'd"],"to submit":["a","a","a","a","a","an","a"],"to subtract":["that"],"to suggest":["corrections","that"],"to support":["other","other","other","multi-codepoint","multiple","european","\"head\"","it?","when","that.","millions"],"to suppress":["my"],"to switch":["the","implementation."],"to tail":["recursion"],"to taint":["my"],"to take":["the","a","care","much","credit","a","a","into","advantage","a","a","a"],"to talk":["about","about","about"],"to teach/practice":["a"],"to tell":["the"],"to tell,":["and"],"to test":["for","for","anything","the","emptiness.","for","your","for","the","regexs","for"],"to that":["exercise","in","same","altogether.","syntax."],"to that,":["and","but"],"to that.":["I"],"to the":["naming","same","respond","'third'","convention","convention","next","method","predicate,","split.","`hey`","Elixir","approval","method","counting","`empty?/1`","beginning","function","next","exercise","unwritten","practice","parentheses,","\"heyp\"","mapping","intent","fact","state","\"?\"","conclusion","function","is_match","same","`silence?`","equivalent","pipeline","readability","fact","correct","reader.","global","phrase","nitpick","pipeline","solution.","function","`_empty?`","structure","function?","empty/silence","developer","next","letter.)","be","tests?","`silence?`","ideal.","`end`'s","same","right","store","next","need","use","notation.","anagram_matcher","code","call?","hey","specs.","code","module","function.","variables","current","end","variables","front.","reader,","code.","store","call","pipe","method","latest","beginning","other","normalisation","allowed","formatting,","output,","logic","caller.","intention","module","code","[tests](https://github.com/kytrinyx/exercism.io/blob/master/assignments/elixir/bob/bob_test.exs)","domain?","language.","elixir-core","next","input","end","_first_","general","language.","\"cond\"","catchall","back","end","code","beginning","main","end","head","`Beer`","clash","lack","place","function's","flat_map/join","code","song","magic","next","next","wrong","process.","end","other","list","lookup","next","end","end!","language","triangle","one","logic","distance,","standard","README.","module","final","`+`","list","\"map\"","big","\"DRY\"","Clojure","code","official","same","reduce","functions,","same","Elixir","character","ListOps","power","number","server","result","different","Teenager","original","site!","regex","fact","list","elements","captures","same","empty","Elixir","length","tests.","head","database","different","root","non-Russian","`append`","size","same","size","regex.","logic","same","different","`upcase`d","store","fact","same","2nd"],"to their":["own","own","own","own","own","own","own","own","own","own"],"to them":["the"],"to then":["simplify"],"to think":["more.","through","a","about.","of","the","about","about","of","of","of","of","of"],"to this":["case","\"notation\"","solution?","problem:","which","which","website,","one."],"to this,":["but"],"to those":["methods.","on"],"to throw":["the"],"to tidy":["up"],"to tighten":["that"],"to to":["test","eliminate"],"to tokenize":["the"],"to track":["and"],"to transform":["data.","any"],"to traverse":["half","the","a"],"to treat":["it"],"to true":["instead"],"to try":["out","my","the","it","a","to","to","not","to","these","implementing","it","with","it.","out","rewriting"],"to turn":["the"],"to tweak":["that"],"to type":["\"words\"","else"],"to un-nest":["several"],"to uncomment":["out"],"to understand":["at","the","what","how","what","what","`filter`","the","than","since","what","and","with","for","at","better.","as","because","and","that"],"to understand,":["but","although","but"],"to understand.":["It's"],"to understanding":["the"],"to unintentional/unexpected":["results."],"to unlock":["the"],"to unpack":["the"],"to update":["my","the","the","to","my","it,","my","the","an","the","if","so","so"],"to urge":["you"],"to use":["that,","a","guards","methods","pattern","guards,","method","String.ends_with?,","it","the","a","pattern","private","the","completely","\"?\"","multiple","`_`","guards","one","===","for","```===```?","the","guard","regex's","`Kernel.apply`.","module","separate","\"question?\"","that","recursion","the","parentheses","parentheses","String.ends_with?","Regexes","`String#codepoints`","a","Erlang's","a","String.first(...)","pattern","`String.codepoints`","parenthesis","defensive","binary","multiple","String.ends_with?/2","YARD","`Enum.reduce`,","partial","pattern","`&amp;set_word/2`","here,","it","`List.flatten`","the","methods","snake_case","`Enum.reject`","`zip`,","|&gt;","pattern","as","codepoints","nesting,","if","the","in","the","`String.split`","that.","pattern","`Enum.empty?`","`Regex.scan/2`","only","guards","it?","|\u003e","custom","just","an","something","a","`import`","`defp`","pattern","List.foldl","them","it.","pattern","it","range","multiple","any","the","once","pipelines","the","the","parentheses","that!","Elixir's","function","guard","that","HashDict.update","language","underscore","functions","parentheses","\"do:\"","`%r/\\p{L}/i`,","less","the","the","parens","`do","parentheses","a","an","`trunc()`","parentheses","the","String.to_char_list/1","that","cond","HashDict.new/2","single","single","it","the","private","the","`String.to_char_list`","Dict.get(@maureen,","the","this","the","a","'#'","parentheses","`defdelegate`.","`nucleotide_counts/1`","it.","`Bitwise`","`Enum.reduce`.","Enum.reduce","a","them.","Regex.scan","the","nice","2","that","the","it","here)","`String.to_char_list!`?","`Enum.map_reduce`.","it","just","Erlang's","here.","`true`","the","parentheses","the","it","the","parentheses","`Dict.some_func`","it","higher","recursion","`true`","it","unqualified","`Enum`","```|\u003e```","String.ends_with,","it","`Enum.reduce`","it.","`Dict.foo`","a","&."],"to use,":["you"],"to use.":["And"],"to user":["pattern"],"to users":["accidentally"],"to using":["`||`","`defp`","boolean","`@ladarius`","the"],"to utilize":["`Enum.map`."],"to validate":["`shout?`","user"],"to value":["leads"],"to verify":["input"],"to verse/1":["in"],"to verse?":["What"],"to very":["verbose"],"to visually":["match"],"to wack":["together"],"to wade":["through."],"to wait":["a","for"],"to warrant":["a"],"to weird":["bugs."],"to what":["I","@lura","came","@boris","someone"],"to what's":["going","going"],"to where":["it's"],"to whether":["it"],"to which":["numbers"],"to why":["it"],"to will":["change,"],"to wonder":["if"],"to word":["comparison"],"to work":["out","correctly.","with.","out","themselves","fine","and","out","out","a","out","directly","as","because","in","badly","well","with","with","with","with","on","with","you"],"to work.":["Sounds","I","I"],"to worry":["about","about"],"to wrap":["the","the","the","the"],"to write":["this","a","this.","Ruby.","the","code","the","Ruby","this","I","`Enum.count(&equal_pairs?(&1))`","simple,","`{&1,","this:","it","`Enum.map_join([1,2,3],","`def","the","and","a","the","map,","an","`append`","`concat`","my","a","explicitly","`defp"],"to write,":["however,"],"to you":["could","more.","though,","whether","as"],"to you.":["I"],"to your":["```","filter/reject","implementation.","other"],"to) would":["reverse"],"to), I'm":["much"],"to, -1)`":["or"],"to, is":["that"],"to, not":["that"],"to, these":["responsibilities:"],"to, you":["could","can","could"],"to, your":["code"],"to--that the":["caller"],"to. A":["couple"],"to. Don't":["mind"],"to. Good":["job!"],"to. Maybe":["take_while?"],"to. This":["shortens"],"to. What":["do"],"to. Without":["parentheses"],"to_bottles //":["0)"],"to_char_list as":["I"],"to_char_list returns":["{:ok,"],"to_char_list. I'm":["a"],"to_list =":["&amp;(Regex.split"],"to_list ```":["method"],"to_rna([char]) ::":["[char]"],"to_rna(char) ::":["char"],"to_string(number), else:":["result`,"],"to_words or":["not."],"today, 27":["presses"],"together `different_word?`":["and"],"together a":["new"],"together anonymous":["functions,"],"together first/second_line":["and"],"together in":["the"],"together like":["ie."],"together than":["clauses"],"together to":["recreate"],"together we":["can"],"together with":["parentheses"],"together would":["lose"],"together, can":["you"],"together. I'd":["probably"],"together. The":["barewords"],"token` error.":["Is"],"tokenize the":["string"],"tokenize |\u003e":["count","count"],"tokenizer words":["and"],"told there":["are"],"tolerance rule":["for"],"ton of":["great"],"tonight and":["see"],"tonight. I":["forget"],"tons of":["duplication,"],"too (and":["avoids"],"too (not":["that"],"too ...":["will"],"too and":["decided"],"too bad.":["A"],"too but":["decided"],"too clever,":["but:"],"too cluttered":["to"],"too complicated":["/"],"too directly":["and"],"too entangled":["with"],"too explicit,":["in"],"too far":["and"],"too far,":["but"],"too far.":["I"],"too formal":["for"],"too invasive":["on"],"too literally.":["Good"],"too long":["to","expression","for","of"],"too long,":["it"],"too many":["helper"],"too much":["readability?","readability?","right","code","for","time","clarity?","readability?","clarity?","clarity?","of","of","in","overkill","code.","though,","tightness.","in"],"too much...":["it"],"too negative,":["I"],"too new":["to"],"too old?":["(I"],"too picky":["on"],"too proud":["of"],"too quick":["to"],"too simple":["for"],"too slow":["for"],"too spread":["out"],"too strongly":["depends"],"too subtle":["with"],"too sure":["if"],"too ugly.":["Breaking"],"too when":["I"],"too worried":["about"],"too young":["a"],"too) so":["you"],"too, and":["you"],"too, as":["you"],"too, but":["found","as","IMHO","I"],"too, compared":["the"],"too, for":["exactly"],"too, if":["you're"],"too, like":["`String.end_with?`,"],"too, otherwise":["it"],"too, which":["is"],"too, you've":["thought"],"too. Any":["reason"],"too. Anyway,":["just"],"too. Elixir":["is"],"too. I":["got","need"],"too. I'd":["definitely"],"too. I'll":["keep","take"],"too. I'm":["(ab)using"],"too. Very":["clean."],"too: `\"A\"":["=~"],"too? Or":["breaking"],"too? `if":["n"],"took 9":["lines"],"took a":["slightly","novel","stab","few","slightly"],"took another":["look"],"took it":["one"],"took longer":["than"],"took me":["6","three","awhile","a","a","a"],"took more":["time"],"took my":["cue"],"took out":["the"],"took the":["latest"],"took this":["exercise","as"],"took two":["params,"],"took very":["long"],"took. Sometimes":["it"],"tool and":["friends"],"tool for":["the"],"tool than":["you"],"tool that":["can"],"tool(s) for":["the"],"toolchain or":["not."],"tools that":["would"],"tools. Have":["you"],"tools. I'll":["definitely"],"tools. What":["do"],"top and":["all"],"top as":["a"],"top for":["just"],"top level":["function.","to"],"top level.":["This"],"top of":["the","the","my","the","the","nitpicking","this"],"top priority!":["If"],"top right":["of"],"top shows":["the"],"top-level `match`":["function"],"top-level in":["the"],"torn over":["whether"],"torn, I":["like"],"total Elixir":["noob,"],"total cost":["is","of","20000000"],"total elixir":["noob"],"total sense":["to"],"total sense.":["I'll"],"totally agree":["with","with"],"totally do":["it!"],"totally equivalent":["though,"],"totally fine,":["just"],"totally fine.":["I'd"],"totally forget":["about"],"totally forgotten":["about"],"totally go":["for"],"totally happy":["with"],"totally missed":["that"],"totally overkill":["since"],"totally right":["about"],"totally right,":["thanks"],"totally right.I'm":["not"],"totally sure":["at"],"totally sure,":["but"],"totally unnecessary":["=)"],"totally unreadable.":["YMMV."],"totally worth":["it."],"touch elixir":["=)"],"touched Elixir":["in"],"touched on":["guarding"],"touching every":["item"],"toward something":["simpler"],"towards `cond`.":["The"],"towards `every_x_years`":["but"],"towards a":["new","particular"],"towards imports":["is,"],"towards in":["(iteration"],"towards more":["functional"],"towards using":["reduce."],"toyed with":["a","the"],"trace shows":["something"],"track and":["remember."],"track is":["a"],"track of":["the"],"track with":["using"],"track, good":["going"],"track. A":["few"],"track. Look":["in"],"track. So":["my"],"tracked down":["the"],"trade-off to":["be"],"tradeoff between":["simplicity","being","clarity","removing"],"tradeoff for":["an"],"tradeoff is":["that"],"tradeoff). Consider":["sorting,"],"tradeoff, using":["parenthesises"],"tradeoff. If":["you"],"tradition that":["\"bob\""],"traditional \"fn":["-\u003e"],"traditional on":["predicate"],"traditional way":["of"],"trail for":["another"],"trailing \"\\n\"":["in","seems"],"trailing dots":["make"],"trailing newline":["character."],"trailing newlines.":["Otherwise"],"trailing question":["mark"],"trailing spaces":["(e.g."],"trailing whitespace":["ignored"],"trailing/leading dots":["on"],"trails can":["be"],"train you":["to"],"traits of":["the"],"transcribing the":["requirements"],"transform a":["string."],"transform any":["Enumerable"],"transform data.":["Passing"],"transform extract":["do`)."],"transform in":["`HashDict.new`,"],"transform of":["the"],"transform structures":["than"],"transform(extract) do`":["instead"],"transformation from":["something"],"transformation functions":["into"],"transformation is":["really"],"transformation, then":["chaining"],"transformations I":["want"],"transformations in":["`anagram?/2`"],"transformations that":["I"],"transforming a":["range"],"transforming an":["AST"],"transforming functions":["underneath"],"transforms to":["is"],"translate(...)]` and":["using"],"translate(...)]` or":["`[roman"],"translate(...)` as":["`[roman,"],"translated from":["another"],"translated into":["elixir:","very"],"translated to":["Elixir's"],"translates back":["into"],"translates to":["a","erlang's","`a-zA-Z`."],"translation for":["an"],"translation of":["the"],"traversal using":["a"],"traverse a":["list"],"traverse half":["the"],"traverse the":["dna","list","entire"],"traversed four":["times"],"traversed, with":["explicit"],"traversed. In":["Erlang","Erlang","Erlang","Erlang","Erlang"],"traversed/copied). That":["means","means"],"traverses the":["input"],"traversing the":["whole","whole"],"treat it":["like","as"],"treat the":["argument"],"treated as":["a","0"],"treating it":["as"],"tree and":["linked","need"],"tree hasn't":["changed"],"tree of":["`case`"],"trees so":["effective"],"tremendously useful":["feedback,"],"triangle inequality":["case","case?"],"trick I":["wouldn't","don't","used"],"trick I've":["learned"],"trick for":["efficient"],"trick from":["Erlang","the"],"trick here":["is"],"trick indeed,":["I"],"trick is":["useful:"],"trick out":["to"],"trick very":["powerfull"],"trick with":["using"],"trick you":["could"],"trick, it":["only"],"trick, piping":["a"],"trick, they're":["lists"],"trick. List":["comprehensions"],"tricks for":["vital","matching"],"tricks than":["I"],"tricky sometimes,":["but"],"tricky to":["make"],"tried `@brianne":["="],"tried `String.upcase(s)":["=="],"tried a":["few"],"tried adding":["another"],"tried aligning":["the"],"tried case,":["but"],"tried doing":["what"],"tried here":["to"],"tried it":["here","without","out,","and","out","with"],"tried it,":["and"],"tried out":["the","your","that"],"tried pattern":["matching","matching"],"tried piping":["the"],"tried replacing":["it"],"tried several":["things"],"tried short-circuiting":["with"],"tried that":["in","as"],"tried to":["stick","make","resubmit,","come","fix","over","implement","change","pull","make","find","define","do","extract","put","make","find","create","extract","test","remove","fix","keep","reproduce","think","mark","keep","find"],"tried using":["pipelining,","`case`,","the"],"tried your":["suggestion"],"tried), but":["in"],"tried, but":["is"],"tried. Thanks!":["cc/"],"tries to":["leverage"],"triggered if":["the"],"triggered it":["(happy,","(happy,","(happy,"],"triggered. (I've":["tested"],"triggers the":["old"],"trimming the":["first"],"triple-quoted string":["in"],"trivial and":["it"],"trivial bodies":["like"],"trivial enough":["to"],"trivial input":["checks"],"trivial to":["implement"],"trivial, I":["grant"],"trivial. I":["tried"],"trouble deciding":["on"],"trouble here":["due"],"trouble of":["scanning,"],"trouble reading":["or"],"trouble seeing":["how"],"trouble with":["the"],"trouble working":["out"],"true -\u003e":["\"Whatever\"","...;","filter(tail,","...`"],"true I":["could"],"true ```":["with","with","in","is"],"true but":["that","`Regex.match?(%r/\\pL/u,"],"true by":["itself."],"true for":["default"],"true if":["a"],"true in":["a"],"true instead":["of"],"true is":["that"],"true notation":["better,"],"true on":["all"],"true or":["false"],"true that":["the","other"],"true then":["the"],"true to":["the","the"],"true while":["`case"],"true with":["whitespace","non-alphabetic"],"true, I":["tried"],"true, `\"1\"":["=~"],"true, `\"a\"":["=~"],"true, better":["indeed."],"true, but":["I"],"true, people":["will"],"true, that":["someone"],"true, the":["outside"],"true. An":["`inc`"],"true. I":["changed","thought","like"],"true. So,":["addressing"],"true; {_":[",_}"],"true\u003c/code\u003e. Then":["use"],"true` and":["`(1"],"true` elixir":["is"],"true`, I":["would"],"true`. I've":["added"],"trueish values.":["If"],"truly \"boolean\"":["function."],"truly checking":["for"],"truly functional...":["The"],"truly generic":["function"],"truly nickpicky":["here"],"truncates when":["the"],"trust the":["regex"],"trust you":["on"],"trusting emacs":["to"],"truth of":["`P"],"truthy or":["falsy"],"try #2":["to"],"try `Regex.scan/3`":["instead"],"try a":["nearly"],"try again":["with"],"try another":["solution"],"try any":["other"],"try doing":["some"],"try extracting":["the"],"try implementing":["this"],"try it":["out.","out!","out.","again","as","out.","out,","without"],"try it.":["Glad"],"try my":["hand"],"try not":["doing","to"],"try out":["elixir!","your","guard"],"try rewriting":["these"],"try scanning":["(`Regex.scan`)"],"try separate":["bottle_phrase"],"try that":["out",":)","on","against"],"try that,":["you"],"try the":["next","same","same","same","same","same"],"try these":["now"],"try this":["style:"],"try to":["memorize","follow","keep","rewrite","work","reduce","do)","read","use","come","use","avoid","use","refactor","use","work","use","aim","access","do","avoid","teach.","force","avoid","`unquote(unquote(letter))`","understand","jump","use","get","shoehorn"],"try with":["guard"],"try writing":["it"],"try, the":["reason"],"try. You":["should"],"try/catch for":["flow"],"trying `Enum#Reduce`":["instead."],"trying a":["quote"],"trying all":["of"],"trying detail":["the"],"trying not":["to"],"trying out":["that"],"trying to":["work","refactor","nudge","decide","guess","lead","write","understand","re-program","understand","find.","use","figure","parallelize","minify","minify","write","prove","get","say","match","cram","figure","do","figure","decide","find","get","find","do","use","avoid","get","figure","use","be","follow","solve","avoid","refine","figure","make","use","loop?","do.","figure","escape","match,","match,","find","keep","find","be","do?"],"trying whatever":["is"],"trying, especially":["if"],"tuple and":["see","the"],"tuple elements":["in"],"tuple instead":["of"],"tuple though,":["`elem(t,"],"tuple update":["compared"],"tuple with":["a"],"tuple-case-pattern-matchings are":["very"],"tuple. I":["might"],"tuple. If":["there's"],"tuples and":["then"],"tuples automatically":["*unpacked*"],"tuples when":["you"],"tuples) can":["be"],"tuples, which":["made"],"turn allows":["processes"],"turn is_nothing":["into"],"turn it":["into","back"],"turn the":["list"],"turned into":["an","one-liners","something"],"turned out":["to","so","to"],"turned up":["was"],"turning code":["optimization"],"turns it":["into"],"turns out":["to","not","there","there","that"],"tutorial. I've":["been"],"tutorials I've":["played"],"tweak and":["resubmitted"],"tweak removed":["any"],"tweak that":["next!"],"tweak to":["get"],"twice (once":["in"],"twice -":["once"],"twice as":["fast","long","long"],"twice for":["each"],"twice in":["the","a","the","`compare`"],"twice the":["```"],"twice to":["see","the"],"twice with":["some"],"twice within":["the"],"twice, but":["the"],"twice, then":["capitalize"],"twice. I":["felt"],"twice: once":["for","inside"],"twist that":["a"],"twisted around":["with"],"two \"silence?\"":["functions,"],"two \u003ccode\u003eEnum.filter/2\u003c/code\u003e":["for"],"two `Enum.filter`":["methods"],"two `Enum/filter/2`":[",separates"],"two `Regex.match?`":["statements"],"two ```String```":["functions"],"two `defp`s,":["one"],"two and-ed":["clauses,"],"two arguments;":["I"],"two base":["cases"],"two basic":["approaches"],"two cases":["of"],"two cases.":["Gives"],"two cents.":[":)"],"two checks":["for"],"two clause":["`reverse`"],"two clauses":["for","made","for","`word","are"],"two clauses,":["one"],"two codepoints":["but"],"two commented":["lines"],"two condition":["checking"],"two conditions":["that","inside"],"two definitions":["for"],"two dictionaries":["and","so"],"two different":["implementations","ways.","directions.","places,","functions."],"two empty":["matches"],"two expressions":["but"],"two filters,":["one"],"two fish":["red","red","red"],"two fn":["names."],"two function":["clauses","clauses"],"two functions":["I"],"two funs":[","],"two if's":["and"],"two into":["one"],"two letter":["mappings","Roman"],"two lines":["separately","in"],"two lines...":["Not"],"two list":["traversals."],"two lists":["(pattern","and"],"two match/2":["functions"],"two minor":["things"],"two more":["test"],"two names":["more"],"two notes":["another"],"two of":["them.","your","the"],"two operations":["together"],"two other":["people"],"two parameters":["mean."],"two params,":["would"],"two places.":["Thanks"],"two points":["to"],"two predicate":["functions"],"two preprocessed":["words."],"two quick":["suggestions:"],"two reducing":["functions"],"two regular":["expressions"],"two sections":["of"],"two semi-complex":["cases"],"two separate":["implementations","Enum.reject","filtering","function"],"two similar":["control"],"two so":["to"],"two space":["indenting"],"two strands":["were","of","of"],"two strings,":["so"],"two tests":["that","in"],"two things":["that","you",".But"],"two things.":["If"],"two very":["different"],"two words":["are","are","are","are"],"two words,":["at"],"two). Note,":["I"],"two, but":["I"],"two: `String.to_char_list!`":["for"],"type \"words\"":["in"],"type else":["="],"type errors":["is"],"type for":["all"],"type in":["the"],"type instead:":["`defimpl"],"type of":["a","person","the","input","the","construct","message","message","a","situation.","input.","content","a","sentence","sentence?"],"type out":["to"],"type predicates":["(reminds"],"type signatures":["here.","with"],"type spec":["btw,"],"type system":["is","really"],"type tests":["and"],"type to":["a"],"type you":["won't"],"type. This":["really"],"typecheck, its":["purpose"],"typed it":["I"],"types into":["private"],"types involved":["are"],"types like":["`is_binary`,"],"types of":["phrases","the","beverages","utterances","sentences."],"types so":["if"],"types that":["they","have"],"types to":["represent"],"types) than":["List.flatten"],"types, you'd":["have"],"types. With":["the"],"typespec looks":["pretty"],"typical algorithm":["to"],"typical convention":["for"],"typical for":["boolean"],"typical is":["`defp"],"typical pitfall":["of"],"typically has":["2"],"typically have":["a"],"typically suffixed":["with"],"typo and":["used"],"typo for":["`occurrences`."],"typo in":["`clasify`,","your"],"typo rather":["than"],"typo'd. You're":["short"],"typo. And":["I"],"typo. I":["meant"],"typo. Never":["even"],"ugh, the":["\"|&gt;\""],"uglier as":["assert"],"uglier with":["the","it"],"ugly and":["didn't","not","need"],"ugly bit":["here"],"ugly like":["this:"],"ugly tricks":["for"],"ugly workaday":["solution"],"ugly yes":[":)"],"ugly, I":["wish"],"ugly, and":["I"],"ugly. Breaking":["it"],"ugly. I":["tried"],"ugly. I'm":["currently"],"ugly. Why":["parens"],"un-nest several":["operations"],"unable to":["find"],"unambiguous, but":["`next_three`"],"unary versions.":["You'll"],"unaware of":["`Regex#split`,","update,"],"uncertainty :-)":["I"],"unclear for":["a"],"unclear, it's":["discussed"],"uncomfortable with":["having"],"uncomment out":["the"],"uncommon in":["Elixir.","Elixir"],"uncommon style":["of"],"uncommon to":["use"],"uncommon, some":["people"],"uncommon. It's":["perfectly"],"under 'Generic":["Character"],"under cond,":["but"],"under the":["function","wrong","impression","`StatementType`"],"underlying Erlang":["stdlib.","VM."],"underlying data":["structure"],"underlying distinction":["you're"],"underlying implementation":["vs."],"underlying pattern":["is"],"underneath it":["reads"],"underscore 'words'":["or"],"underscore added":["to"],"underscore but":["don't"],"underscore characters,":["which"],"underscore is":["idiomatic","usually","considered"],"underscore makes":["the"],"underscore or":["do_*"],"underscore prefixed":["private"],"underscore, so":["my"],"underscore. That":["means"],"underscores but":["you"],"underscores) are":["best."],"underscores. Furthermore":["predicates"],"understan now.":["That"],"understand `/\\w+/`":["is"],"understand `filter`":["as"],"understand and":["modify.","a"],"understand as":["far"],"understand at":["first","a"],"understand because":["you"],"understand compared":["to"],"understand correctly,":["though,"],"understand difference":["between"],"understand for":["the"],"understand how":["to","the","to","it","you"],"understand if":["you"],"understand it":["correctly","is"],"understand it's":["more"],"understand it,":["the","protocols","the","to","the","so"],"understand of":["that"],"understand since":["when"],"understand something":["and"],"understand than":["a"],"understand that":["you","`:list.sort`","requirement","way."],"understand the":["whole","approach","functions'","code","high-level","exercism.","[relevant","issues","\"bare","usefulness","details","logic","spec","purpose","value","regex","issues"],"understand those":["who"],"understand what":["each","this","you","the","the","is","you","you're","your","those"],"understand which":["function"],"understand why":["you","you"],"understand with":["the"],"understand you":["might","like"],"understand your":["point","point","drive","suggestions..."],"understand, although":["is"],"understand, but":["it","is"],"understand, there":["is"],"understand-ability of":["the"],"understand. However,":["I"],"understand. I":["honestly"],"understand. It":["seems"],"understand. It's":["concise,"],"understandable version":["of"],"understandable. I":["think"],"understanding idiomatic":["Elixir"],"understanding of":["what"],"understanding that":["there"],"understanding the":["actual","other."],"understanding though.":["But"],"understands how":["`[]`"],"understands names,":["even"],"understood (imo)":["that"],"understood correctly":["`HashDict.update`"],"understood in":["Ruby."],"undocumented implementation":["detail"],"unequal pairs":["between"],"unevenness in":["the"],"unfamiliar with":["how","the"],"unfamiliarity with":["Elixir","the"],"unfold. It":["does"],"unformatted) |\u003e":["Enum.first`","hd`)."],"unformatted` is":["hard"],"unfortunate. Based":["on"],"unfortunately I'm":["going"],"unfortunately call":["`Enum.count`"],"unfortunately isn't":["exactly"],"unfortunately) the":["tests"],"unicode Strings.":["_codepoint"],"unicode alpha":["characters"],"unicode aware":["but"],"unicode category":["test."],"unicode category)":["but"],"unicode character":["property"],"unicode characters":["in","(ü","and","(like"],"unicode chars":["in"],"unicode chars.":["Also,"],"unicode corner":["case,"],"unicode currency":["symbols"],"unicode database":["is"],"unicode equivalent":["is"],"unicode general":["category"],"unicode issue":["you"],"unicode issue.":["I"],"unicode letter":["support,"],"unicode letter)":["and"],"unicode letters.":["You"],"unicode specific":["character"],"unicode support":["(in","using"],"unicode whitespace,":["not"],"unicode, and":["it"],"unicode-aware (it":["works"],"unicode-awareness is":["encouraged."],"unicode. Is":["`coöperative`"],"unicode.ex](https://github.com/elixir-lang/elixir/blob/master/lib/elixir/unicode/unicode.ex) for":["how"],"unicode:characters_to_list(\u003c\u003c \"да":["нет\""],"unified list":["of"],"unimportant, and":["if"],"unimportant. This":["will"],"unintentional/unexpected results.":["The"],"uniq inside":["the"],"unique list":["of"],"unique words":["only?"],"uniquely identified":["by"],"uniquely identify":["those"],"unit of":["time,","time,"],"unit test":["and"],"unit testing?":["That"],"unit-tests don't":["cover."],"uniting all":["the"],"units of":["time,","time.","time,","time."],"unknown reason,":["I'll"],"unless I":["miss"],"unless I'm":["mistaken"],"unless the":["function's"],"unless there":["are","are","was"],"unless there's":["a","a","a"],"unless they":["have"],"unless they're":["explicitly","really"],"unless you":["make","have"],"unless you're":["of","using"],"unlike in":["the"],"unlike with":["C"],"unlikely) `List.zip":["|\u003e"],"unlock the":["next","next"],"unlocked, you":["can't"],"unnecessarily complex":["and"],"unnecessary `fn`":["wrapper"],"unnecessary and":["looks"],"unnecessary call":["to"],"unnecessary clauses,":["added"],"unnecessary create":["a"],"unnecessary for":["this"],"unnecessary since":["I'm"],"unnecessary to":["import"],"unnecessary when":["there's"],"unnecessary work":["in","by"],"unnecessary –":["you"],"unnecessary, since":["`Enum.zip`"],"unnecessary. Although":["if"],"unnecessary. I":["wonder"],"unpack the":["results"],"unpacking data":["structures"],"unpleasantness involving":["padding"],"unqualified imports":["`import"],"unquote outside":["of"],"unquote(7+7*ni), unquote(dpi+1),":["month,","month,"],"unquote(binary_to_atom(\"last_#{dp}day\"))(month, year)":["do","do"],"unquote(binary_to_atom(dp \u003c\u003e":["\"teenth\"))(month,","\"teenth\"))(month,"],"unquote(dpi+1), month,":["year)","year)"],"unquote(i+1), month,":["year)","year)"],"unquoted properly,":["like"],"unquoting of":["letter"],"unreadable the":["functions"],"unreasonable in":["a"],"unsettling. But,":["hey,"],"unsorted char":["lists"],"unsubmitted solution":["and"],"unsure about":["\"style\"-related"],"unsure if":["there"],"unsure the":["role"],"unsure what":["the"],"until I":["need","hit"],"until i":["complete"],"until late":["in"],"until line":["19"],"until several":["exercises"],"until the":["remaining"],"until there":["are"],"unto the":["nits."],"unused list":["away,"],"unused variables":["if"],"unused. You're":["just"],"unusual for":["this"],"unwanted symbols,":["i"],"unwieldily, but":["on"],"unwieldy and":["I"],"unwrap: 1":["}"],"unwritten exercism":["style","style"],"up (and":["submitting"],"up (without":["sacrificing"],"up --":["by"],"up `defprotocol`":["to"],"up `foo`":["if"],"up a":["bit","little?","little","bit"],"up about":["it?"],"up adding":["the"],"up after":["the","the","the","the","the"],"up all":["the","of"],"up an":["appropriate"],"up and":["running","improving","downcasing","play","naming","change","running;","learn"],"up another":["difference","rev"],"up as":["the","well.","a"],"up at":["the"],"up being":["almost","more"],"up by":["the"],"up calling":["it"],"up cased":["form"],"up code":["which","if"],"up doing":["the"],"up either":["having"],"up fascinated_spock.jpg;":["this"],"up for":["it.","the"],"up from":["there.","a","the","doing","the"],"up having":["much"],"up iex":["to","and"],"up in":["the","the","the"],"up incrementally":["rather"],"up into":["`hey`?","functions","a"],"up less":["space"],"up line":["20"],"up match":["and"],"up more":["stuff."],"up my":["question","naming.","anonymous"],"up nested":["functions,"],"up nicely,":["and"],"up non-7-bit-ASCII":["text:"],"up on":["finding","the","this:","tail","regular","`\\w`"],"up pretty":["much"],"up really":["nicely"],"up saving":["any"],"up so":["that","that"],"up some":["without"],"up stuff":["about"],"up that":["implementation"],"up the":["habit","\u003ccode\u003e\\w\u003c/code\u003e","return","cond?","verse","string","\u003ccode\u003einterpret\u003c/code\u003edecision","discussion.","`expected`","final","phrase","verses.","anagram","string.","formatting.","length","empty?","language.","rest","keys","code","counts","syntax","catch-all","exercise","unnecessary","code","code","value."],"up there":["before"],"up this":["code"],"up those":["definitions"],"up to":["be","be","review","a","you","and"],"up unnecessary":["clauses,"],"up until":["several"],"up unwanted":["symbols,"],"up using":["a","Inspect.Algebra,","more"],"up values":["for"],"up various":["operations."],"up via":["Process.whereis"],"up was":["a"],"up what":["these"],"up with":["a","and","another","a","this","a","1","a","empty","anything","that","a","a","a","a","this,","an","a","a","\"cond\".","something","something","more","Process.whereis",":math.pow?","a","the","a","a","a","a","an","the","anything","a","a","comments.","a","a","a"],"up with,":["so"],"up without":["sacrificing"],"up writing":["macros","the"],"up your":["conditionals."],"up, added":["a"],"up, but":["that's","it"],"up, end,":["and"],"up, receive":["nonsensical"],"up, try":["not"],"up. :":[")"],"up. I'll":["have"],"up. I'm":["not"],"up. Looks":["great."],"up. There's":["an"],"up. Two":["of"],"upcase --":["so"],"upcase and":["downcase","downcase"],"upcase be":["more"],"upcase but":["also"],"upcase character":["so"],"upcase comparison.":["If"],"upcase conditions":["out"],"upcase everything":["rather"],"upcase just":["return"],"upcase(speech) ==":["speech"],"upcase? or":["does"],"upcasing and":["comparison"],"upcasing numbers":["and"],"update `tally`":["as"],"update an":["accumulator"],"update call":["like"],"update compared":["to"],"update doesn't":["mutate;"],"update from":["version"],"update if":["you"],"update it":["to","on","all"],"update it,":["perhaps"],"update later":["tonight."],"update method":["is"],"update my":["`alphabetize`","version","test","version.","cli","submission."],"update on":["List.flatten."],"update so":["much","much"],"update that":["corrects"],"update that.":["What"],"update the":["`Dict`","`Dict`","HashDict","test","submission.","record","comments"],"update to":["the","the"],"update(\"\", dict)":["do"],"update(word, dict)":["do","do"],"update, I":["was"],"update, but":["great"],"update. The":["docs"],"update/0 and":["increment/0"],"update/2 and":["increment/1"],"update_count(&amp;1, &amp;2)":[")"],"update_dict as":["a"],"updated `validate`":["to"],"updated a":["little"],"updated based":["on"],"updated list":["and"],"updated my":["solution,","code","solution"],"updated order":["of"],"updated since":["I"],"updated the":["code.","syntax","regex.","comments."],"updated this":["exercise."],"updated to":["10.2-dev","0.11","v0.12.2","make"],"updated version":["to"],"updated version.":["Let"],"updated with":["your"],"updates the":["`acc`","`acc`"],"updating an":["existing"],"updating the":["`count_hash`","record"],"updating values":["in"],"upgrade your":["exercism","exercism","exercism"],"upload a":["new"],"uploaded a":["new","new","new"],"uploaded another":["take."],"uploaded by":["mistake"],"uploaded new":["version."],"uploading that":["the"],"upon a":["bug"],"upon adding":["an"],"upon equality":["checking."],"upon nested":["if/else"],"upon or":["generally"],"upon. Passing":["data"],"upper case":["mean"],"upper case,":["even"],"upper-case unicode":["characters"],"uppercase English":["letters,"],"uppercase and":["a"],"uppercase character.":["Removing"],"uppercase characters?":["Also,"],"uppercase could":["be"],"uppercase equivalent":["and"],"uppercase letter":["and"],"uppercase trick":["out"],"uppercase version":["of"],"uppercase. Let":["me"],"uppercase? (Sorry":["to"],"urge you":["to","to"],"us test":["writers"],"usable function":["(not"],"usage here":["when"],"usage is":["interesting,","very"],"usage of":["language","language","parentheses","the"],"usage, but":["in"],"usage. In":["Elixir/Erlang"],"use \"?\"":["at"],"use \"do:\"":["but"],"use \"or\"":["clause"],"use \"question?\"":["or"],"use '#'":["comments."],"use (i.e.":["a"],"use *list*":["pattern"],"use 2":["spaces","spaces"],"use \u003ccode\u003eRegex.scan/2\u003c/code\u003e":["and"],"use \u003ccode\u003eguards\u003c/code\u003e":["or"],"use ===":["is"],"use Dict.get(@maureen,":["max_value)."],"use Elixir's":["pattern","`from..to`.","method"],"use Elixirs":["function"],"use Enum.reduce":["to"],"use Erlang":["list"],"use Erlang's":["`:io_format`.","`timer`","calendar"],"use HashDict's":["a"],"use HashDict.new/2":["and"],"use HashDict.update":["(well..."],"use List.flatten?":["I"],"use List.foldl":["instead"],"use List.zip":["you"],"use Record.new(a:":["...,"],"use Regex.scan":["to","and"],"use Regexes":["(regexen?),"],"use String":["you"],"use String.ends_with,":["so"],"use String.ends_with?":["instead","instead"],"use String.ends_with?,":["now"],"use String.ends_with?/2":["for"],"use String.first(...)":["and"],"use String.last([phrase)":["=="],"use String.to_char_list/1":["(Double-quoted"],"use Unicode":["categories"],"use YARD":["for"],"use \\p{L}":["instead."],"use `%r/\\p{L}/i`,":["so"],"use `&amp;1`":["and"],"use `&amp;M.f/a`":["to"],"use `&amp;add_or_increment/2`":["instead"],"use `&amp;set_word/2`":["over"],"use `&amp;update_frequency/2`":["to"],"use `/\\p{L}/`":["to","to"],"use `?`":["to"],"use `@oma`":["in"],"use `Bitwise`":["and"],"use `Dict.foo`":["instead"],"use `Dict.some_func`":["instead"],"use `Enum.count(collection,":["fun)`."],"use `Enum.count/2`":["instead"],"use `Enum.empty?`":["instead"],"use `Enum.filter`":["and"],"use `Enum.join`":["in"],"use `Enum.map_join`":["instead"],"use `Enum.map`":["to"],"use `Enum.reduce`":["to","to","to","than"],"use `Enum.reduce`,":["which"],"use `Enum.reject`":["and","with"],"use `Enum.to_list(collection)`":["to"],"use `Enum`":["functions","in","if"],"use `GenServer.Behaviour`,":["right?"],"use `Kernel.apply`.":["What"],"use `Kernel.to_char_list`":["(or"],"use `List.flatten`":["afterwars."],"use `List.zip/1`":["directly"],"use `Regex.match?/2`":["to"],"use `Regex.replace`":["here,"],"use `Regex.scan(%r/\\w+/,phrase)`":["as"],"use `Regex.scan/2`":["for","that"],"use `Regex.scan`":["to","and","to","to"],"use `Regex.scan`,":["I"],"use `Stream.map`":["instead"],"use `String#codepoints`":["and"],"use `String.codepoints`":[":)","and"],"use `String.downcase`":["and/or","directly."],"use `String.ends_with(phrase,":["\"?\")`"],"use `String.ends_with?(input,":["\"?\")`."],"use `String.ends_with?`":["to"],"use `String.last`":["or"],"use `String.split`":["and"],"use `String.strip(statement)":["=="],"use `String.strip(statement)`":["on"],"use `String.to_char_list!`":["(throws"],"use `String.to_char_list`":["or"],"use `[any]`":["or"],"use `[head":["|"],"use `\\P{L}`":["to"],"use `\\pL`":["in"],"use `\\w*`":["which"],"use `_`":["before"],"use ```str":["=="],"use ```|\u003e```":["in"],"use `acc`":["for"],"use `append`":["in"],"use `defp`":["to","rather","for","or","instead.","then.","instead"],"use `do":["..."],"use `do_xxx`":["for"],"use `do`":["and"],"use `end`.":["It"],"use `filter`":["or","for"],"use `func":["="],"use `guards`":["(size"],"use `id`":["in"],"use `if":["result"],"use `import`":["in"],"use `is_`":["in"],"use `length(list)`":["in"],"use `length`":["in"],"use `nucleotide_counts/1`":["and"],"use `number/1`":["for"],"use `reduce`,":["though"],"use `scan`":["over"],"use `signature`":["on"],"use `some_range.first`":["to"],"use `translation_dict[x]`,":["it's"],"use `true`":["for","for"],"use `true`,":["because"],"use `trunc()`":["to"],"use `unwrap`,":["btw."],"use `x`":["is"],"use `zip`,":["which"],"use `|\u003e":["Enum.filter_map(&match?(&1,"],"use a":["guard","sentence","particular","name","character","guard","shorthand","character","character","string","named","regex,","named","named","single","pipe:","module","module","[case](http://elixir-lang.org/docs/stable/Kernel.html#case/2)","default","filter,","regex","slice","regular","default","list","private","regex","list","pipeline","map","cond","list","higher","regex","decreasing","`cond`","link","higher-order","Graph","value","guard","ready","very","Supervisor","function","function","particular"],"use an":["accumulator","`fn`.","anonymous"],"use and":["passed"],"use any":["of","Regex","underlying"],"use anymore":["."],"use anything":["but"],"use as":["few"],"use atoms":["to"],"use binaries,":["not"],"use binary":["literals"],"use bit":["shifting"],"use captures":["in"],"use case":["for","for","and","as","insensitive"],"use case,":["since"],"use case.":["If","Let"],"use codepoints":["there."],"use completely":["new"],"use cond":["vs."],"use constants,":["or"],"use custom":["functions"],"use default":["argument"],"use defensive":["programming"],"use do":["you"],"use doctests":["as","in"],"use else":["like"],"use empty":["string"],"use enough":["list"],"use explicit":["recursion.","recursion"],"use foldr":["instead"],"use for":["equality.","the","any"],"use function":["signatures","guards"],"use functions":["in","in","like"],"use guard":["in","clauses,"],"use guards":["besides","everywhere","or","where"],"use guards,":["better"],"use head":["matching","matching"],"use here":["to"],"use here)":["both"],"use here,":["definitely."],"use higher":["order"],"use if":["statements"],"use implicit":["returns."],"use imports":["here"],"use in":["your","line","`match/2`","sing","the","silence?()","regular"],"use instead":["of"],"use iolist_to_binary":["and"],"use is":["really"],"use it":[":D","lately,","when","in","you'll","in","in","for","throughout","in","in","to","for","if","in","because","however","because","only"],"use it.":["I","There's"],"use just":["about","`true`"],"use keyword":["blocks"],"use language":["features"],"use less":["long"],"use like":["this:"],"use macro":["magic."],"use macros":["here?"],"use method":["names"],"use methods":["whose","names","that"],"use module":["attributes:"],"use more":["domain-y","expressive"],"use multiple":["line","functions","function"],"use my":["nitpick"],"use nesting,":["you"],"use nice":["pattern"],"use of":["Regex.scan","pattern","HashDict,","a","doc","the","the","the","pattern","pattern-matching","the","the","\"if\"","atoms","pattern","pattern","atoms","Enum.sort","\"_speak\"","guards!","&amp;1","the","the","the","`Enum.filter_map`","a","guard","`ends_with?`!","the","Elixir's","Elixir's","the","module","`String.codepoints`.","`Enum.count`.","the","`filter_map`.","macros","the","the","Elixir","the","this","the","newlines.","memory?","@price.","the","the","HashDict.new/2","`bitstring_to_list`","`Enum.any?`","higher","regular","`cond`.","the","recursion","the","`reverse`.","`reverse`,","the","`Stream.zip/2`.","`cond`","the","POSIX","Regex","higher","the","the","`Enum.take`.","`cond`"],"use on":["line","line"],"use once":["you"],"use one":["`cond`,","here.","every"],"use one-liner":["functions"],"use only":["```Strings```"],"use parens":["with","on"],"use parentheses":["for","for","around","around","often.","in","although","for","around","for","but","explicitly,","by","in","except"],"use parentheses.":["The"],"use parenthesis":["when"],"use partial":["application"],"use pattern":["matching","matching","matching","matching,","matching","matching","matching","matching","matching","matching","matching?","matching","matching","matching","matching","matching","matching","match","matching","matching","matching","matching"],"use pipelines":["whenever","to"],"use pointers":["or"],"use private":["methods","functions","module","function"],"use question":["marks"],"use range":["constants"],"use rather":["than"],"use recursion":["from","over"],"use reduce":[";-)"],"use regex's":["in"],"use regex,":["but"],"use remote":["functions"],"use separate":["function"],"use simple":["pattern"],"use single":["char","letters"],"use snake_case":["instead"],"use so":["complex","you","much"],"use some":["shortcuts","String","improvements","of","`String`"],"use something":["like","more"],"use strict":["comparision"],"use tail":["recursion"],"use that":["expr","syntax","bad","operator","doesn't","module","approach","instead.","to","would","with"],"use that,":["thanks!"],"use the":["file","checks","pattern","functions","HashDict","imported","pipe","\"word\"","[pipeline","new","singular","`defp","functions","pipeline","&amp;","|&gt;","`?`","function","arguments","&amp;","negation","&amp;1,","question","`is_something`","pipe","`|&gt;`","module","function.","natural","ruby","most","pipeline","pipeline","new","Dict","pattern","protocol","`[","pipe","one","capture","blunt","blunt","if-do-else-end","function","same","process","protocol","shorthand","former:","`Dict`","difference","built-in","ampersand","&","standard","regex","functions","whole","`//`","much","right","`|\u003e`","`[","\"obvious\"","\"obvious\""],"use them":["to","in","in","outside","without","all","to","outside","a","for"],"use them.":["I'd"],"use this":["```String.ends_with?```","forum"],"use those":["names?","in"],"use to":["clean","improve"],"use two":["\u003ccode\u003eEnum.filter/2\u003c/code\u003e","separate"],"use underscore":["or"],"use unicode":["general","character"],"use unqualified":["imports"],"use update.":["The"],"use what":["you","is"],"use whatever":["delimiter"],"use whitespace":["to"],"use your":["`bottles_of_beer`","suggestion."],"use |&gt;":["operator"],"use |\u003e":["rather"],"use, you":["give"],"use. And":["yeah,"],"use. I":["second"],"use. I'll":["get"],"use. Rather":["than"],"use. You":["can"],"use? I":["couldn't"],"used \"_\"":["instead"],"used (often":["useful"],"used (or":["not)"],"used *inside*":["of"],"used Enum.reduce":["at"],"used HashDict":["because"],"used String.graphemes":["and"],"used String.strip":["for"],"used `\"`":["and"],"used `:silence`":["for"],"used `Enum#count`":["instead"],"used `Enum.reduce`":["and"],"used `Enum.to_list`":["first"],"used `Graph.update`":["in"],"used `PhoneValidation`":["and"],"used `Regex#scan`":["and"],"used `Regex.scan`":["--","(thanks"],"used `Regex.split`":["in"],"used `String#graphemes`":["yet."],"used `\\A`":["and"],"used `\\p{Lu}`.":["Only"],"used `^`":["and"],"used ```":["HashDict.update","\"_whatever\""],"used ```count```":["names"],"used `ends_with?`":["in"],"used `grep":["'^\\s\\+|\u003e'"],"used `is_shouting?`":["which"],"used `join`":["at"],"used `nucleotide`":["or"],"used a":["similar","string,","record","HashSet","separate","separate","tail","single"],"used all":["`HashDict`","that"],"used an":["embedded","anonymous"],"used as":["guard","constants):","`acc`","an"],"used attributes":["like"],"used before":["they"],"used by":["Erlang","other"],"used case":["and"],"used directly":["by"],"used directly.":["You're"],"used down":["the"],"used elixir":["before"],"used exactly":["twice"],"used for":["the","scanning","my","macro's.","when","a","the","example","a"],"used for.":["But"],"used good":["intention-revealing"],"used helper":["functions"],"used in":["Erlang","#command(0)?","a","one","Elixir.","place","`count/1`)","Ruby","a","functional","function-level","chains","higher","my","pattern","the","conjunction"],"used inside":["hey"],"used instead":["of"],"used is":["fairly"],"used it":["in","too","much."],"used like":["this"],"used mainly":["by"],"used multiple":["functions"],"used of":["course"],"used on":["it."],"used one":["liners"],"used only":["numbers."],"used pervasively":["in"],"used regexes":["also."],"used regexes,":["but"],"used something":["like","like"],"used that":["for","feature?","before","comment"],"used the":["methods","idea","pipeline","same","|&gt;","disjunction","recursive","same","pipe","shorthand","explicit","Enum.zip","`fn`"],"used them":["for"],"used there":["to"],"used this":["for"],"used to":["use","the","identify","transform","wack","having","Haskell","not","the","write","using","that","indicate"],"used together.":["The"],"used two":["`defp`s,","clauses"],"used uppercase":["and"],"used when":["executing"],"used whenever":["the"],"used with":["custom","the"],"used yet,":["but"],"used, it's":["really"],"used. Is":["that"],"used. They're":["all"],"used. `cond`":["is"],"used; Haskell":["has"],"useful as":["it","it"],"useful feedback":["lately,"],"useful feedback,":["as"],"useful for":["polymorphism","small","macro's","when"],"useful here":["@abner?"],"useful here:":["`String.ends_with?`,"],"useful if":["you're"],"useful in":["good","`silence?`.","such","the","a"],"useful information":["in"],"useful invariant":["to"],"useful number-letter":["pairs"],"useful on":["some"],"useful to":["you...","make"],"useful tool":["that"],"useful unless":["you're"],"useful! How":["do"],"useful, but":["I"],"useful, depending":["on"],"useful, though":["it"],"useful. (I":["haven't"],"useful. But":["you're"],"useful. The":["pipeline"],"useful/necessary and":["not"],"usefulness of":["applying"],"usefulness, since":["I"],"useless error":["message."],"useless optimization,":["but"],"user input,":["though"],"user is":["that"],"user of":["the"],"user pattern":["matching"],"user to":["do"],"user towards":["a"],"user's suggestion,":["honestly"],"user-facing code":["so"],"users accidentally":["calling"],"users how":["it"],"uses Elixir":["version"],"uses Elixir's":["built-in"],"uses Enum.reduce":["and"],"uses GenServer":["makes"],"uses GenServer,":["but"],"uses `List.zip/1'":["instead"],"uses `Regex.scan`,":["is"],"uses a":["comma","German","def","value","Graph","few"],"uses erlang":["style"],"uses in":["client"],"uses it.":["It's"],"uses list_to_tuple":["and"],"uses more":["code"],"uses of":["attribute"],"uses optimized":["code"],"uses pattern":["matching","matching"],"uses regular":["expressions"],"uses some":["rather"],"uses the":["same","template","variable","shortest","keyword","`SpeechAnalyzer.ignoring?`","list","`Enumerable`","value.","`Bitwise`","zip"],"uses them,":["so"],"uses this":["`do_*`"],"uses those":["functions"],"uses three":["functions"],"uses to":["display"],"uses |&gt;":["in"],"uses, but":["they're","maybe"],"using \"_\"":["over"],"using \"is_question\"":["and"],"using \"or\").":["However,"],"using 0.10.0":["so"],"using 2":["pattern"],"using :list.sort":["over"],"using \u003ccode\u003eList.foldl/3\u003c/code\u003e":["and"],"using Dict":["instead"],"using Dict.update/4,":["but"],"using Elixir":["0.10.1"],"using Elixir's":["partial"],"using Enum.map":["with"],"using Erlang":["R16B01."],"using Erlang's":["math.pow():"],"using GenServer,":["or"],"using HashDict.update":["in"],"using HashDict.update...they":["all"],"using HashDicts":["up"],"using Inspect.Algebra,":["then"],"using List":["would"],"using List.foldl":["or"],"using List.foldl/3":["and"],"using Map":["vs."],"using OTP,":["I"],"using OTP.":["Thanks"],"using Pattern":["Matching"],"using Regex.scan":["correctly?"],"using String":["functions","functions\".","functions.","in"],"using String.strip.":["I"],"using String.upcase":["to"],"using [defp](http://elixir-lang.org/docs/stable/Kernel.html#defp/2).":["Alternatively"],"using \\w":["in"],"using `%r/\\w+/`":["would"],"using `%{\\w}`":["includes"],"using `&amp;`-style":["function"],"using `++`":["you"],"using `/\\p{Lu}/`":["as"],"using `:else`":["in"],"using `==":["\"\"`"],"using `@ladarius`":["and"],"using `Dict.put`":["and"],"using `Dict.update/3`":["to"],"using `Dict.update/4`":["instead"],"using `Dict.update`":["(think"],"using `Enum.count/2`":["would"],"using `Enum.count`":["for"],"using `Enum.filter_map`":["too.","or"],"using `Enum.filter`":["instead"],"using `Enum.find_value`":["is"],"using `Enum.join`":["seems"],"using `Enum.map_join`":["(which"],"using `Enum.map_join`,":["though"],"using `Enum.map`":["or"],"using `Enum.reduce`":["over","with"],"using `Enum.reduce`.":["When","That"],"using `Enum.reverse`":["on"],"using `Enum`":["facilities,"],"using `HashDict.fetch(@fay,":["nucleotide)`"],"using `HashDict.new(enumerable,":["transform)`?"],"using `HashDict.update`.":["`HashDict.update`"],"using `List.foldl/3`":["and"],"using `List.zip/1`":["instead"],"using `Regex.scan`":["rather","instead","was","combined"],"using `Regex.scan`,":["but","it's"],"using `Stream.filter`":["and"],"using `Stream.map":["|\u003e"],"using `String.Chars`":["and"],"using `String.replace`":["to"],"using `String.replace`,":["just"],"using `String.strip`":["as"],"using `String.to_char_list`":["and"],"using `\\p`":["or"],"using `\\w+`":["in"],"using `\\w`,":["meaning","meaning"],"using ```":["HashDict.merge"],"using ```Regex.scan```":["it"],"using ```|\u003e```":["may"],"using `case`,":["but"],"using `cond`":["here.","and"],"using `conditionally_add_item`":["to"],"using `defp`":["but","and","private","instead","instead"],"using `defp`)":["since"],"using `defp`,":["is"],"using `do:`":["is"],"using `end.method`":["in"],"using `import`":["you","to"],"using `iolist_to_binary`.":["What"],"using `is_reticent?`":["as"],"using `reduce`":["and","for","as","to","as"],"using `reduce`..":["I"],"using `scan`":["with"],"using `translate(number,":["@lance)"],"using `||`":["to","and"],"using a":["more","pipe","character","conditional","Regex,","cond-switch.","more","higher-order","default","variable","pattern","regex.","fold","single","separate","function","regex","different","separate","case","chain","regex,","regex","map","Regex.","short","functional","named","`HashDict.update`,","simpler","`when`","`Enum.map`","`+`","pattern","using","recursive","helper","Supervisor","more","rather"],"using all":["the","the"],"using an":["anonymous","`=`.","attribute","attribute","uncommon","accumulator.","iolist"],"using another":["function"],"using any":["memoize"],"using anything":["particularly"],"using binaries":["instead"],"using bit":["shifting"],"using boolean":["or"],"using both":["variables.","`upcase`"],"using built":["in"],"using case":["and"],"using cast":["when"],"using character":["classes","lists,"],"using concurrency,":["so"],"using cond":["in"],"using cond,":["\u003ccode\u003etrue"],"using cond.":["There"],"using custom":["guard"],"using defp":["instead"],"using descriptively":["named"],"using dictionaries":["that"],"using different":["versions"],"using either":["pattern"],"using explicit":["recursion","recursion?","recursion"],"using filter":["and","and"],"using flat_map":["and"],"using functional":["operators,"],"using functions":["in","from"],"using guard":["clauses,"],"using guards":["in","to","directly","on","but"],"using here,":["and"],"using huge":["lists."],"using idiomatic":["elixir."],"using if":["here"],"using imports":["is"],"using in":["your","your"],"using inline":["functions"],"using is":["a"],"using it":["now!","as","in","for","is","as","on","means"],"using it,":["my"],"using it.":["Do"],"using library":["functions","functions"],"using list":["comprehensions."],"using list_to_tuple":["is"],"using lists":["of"],"using macro":["tricks."],"using macro's":["to"],"using macro's,":["take"],"using macros/guards":["is"],"using methods":["that"],"using module":["attributes?"],"using more":["stack"],"using multiline":["chaining;"],"using numeric":["keys?"],"using only":["standard"],"using other":["operators","basic"],"using params":["\"word,"],"using parens":["in"],"using parentheses":["in","with"],"using parenthesises":["where"],"using pattern":["matching","matching","matching","matching","matching","matching","matching,","matching"],"using pipe":["here"],"using pipelining,":["which"],"using pipes,":["of"],"using pipes.":["What"],"using piping":["in"],"using predicates.":["Rather"],"using private":["functions","functions"],"using recursion":["and","for"],"using reduce":["at","so"],"using reduce.":["Thank"],"using regex":["is"],"using regex.":["Look"],"using regexes":["the"],"using regexes.":["The"],"using reject":["over"],"using reverse":["a"],"using short":["syntax"],"using shorthand":["notation:"],"using single":["quoted"],"using some":["sort","sort","form"],"using something":["like"],"using temporary":["variables?"],"using that":["dummy","to","now.","fancy","list","somewhere?"],"using that.":["Let",":)"],"using that:":["http://exercism.io/submissions/f6dd17cf7779f74e47c102ad"],"using the":["correct","pipeline","content","one","&","pattern","guarded","pipe","ampersand","&1","capture","shorthand","pipeline","shorthand","regex","|&gt;","pipeline","binary","```fn```","module","pipeline","`&`","`case`","pipeline","pipeline","UTF-8","pipeline","knowledge","shorter","most","functional","Erlang","&","&(...)","`\\P`","`Bitwise`","list","right","same","imports","fact","`HashDict`","`\\p{}`","tail-call","fact","Stream","three","awesomeness","shorthand"],"using them":["directly?"],"using true":["for"],"using two":["`Enum.filter`"],"using unquote":["outside"],"using version":["0.10.2"],"using your":["nitpicks","module"],"using {&1,":["0}"],"using |\u003e":["but"],"using, some":["functions"],"using. (That's":["also"],"using. Does":["something"],"usual pitfalls":["(no","(no"],"usual, thanks":["@zion"],"usually `is_something?`.":["In"],"usually a":["good"],"usually are":["used"],"usually as":["`if"],"usually be":["about","combined"],"usually comes":["with"],"usually default":["to"],"usually do":["\"tdd\""],"usually don't":["import"],"usually explicitly":["mention"],"usually forget":["the"],"usually frowned":["upon"],"usually good":["to"],"usually importing":["stuff"],"usually indent":["the"],"usually much":["more"],"usually perfectly":["happy"],"usually prefer":["the","regex"],"usually prefer.":["At"],"usually put":["parentheses"],"usually solved":["in"],"usually takes":["me"],"usually think":["it"],"usually use":["and"],"usually used":["to"],"usually we":["just"],"usually written":["as","`if"],"utf-8, so":["my"],"utility of":["anagram?"],"utilize `Enum.map`.":["I'll"],"utterances (or":["lacks"],"utterly trivial":["to"],"v. explicitness":["is."],"v0.10.1 syntax":["as"],"v0.10.1. It's":["pretty"],"v1 *":["v2"],"v2) -&gt;":["v1"],"vague requirements,":["and"],"vague, and":["I"],"val +":["1","1","1"],"val from":["my"],"valid Elixir":["without"],"valid English":["word?"],"valid according":["to"],"valid choice":["to"],"valid dna":["nucleotides"],"valid for":["version"],"valid input":["is"],"valid iolist,":["so"],"valid it":["returns"],"valid points,":["thanks."],"valid type":["spec"],"valid words":["from","without"],"valid. But":["if"],"valid. I've":["seen"],"validate `shout?`":["instead"],"validate function":["instead"],"validate user":["input,"],"validating. I":["know"],"validation check.":["That"],"validation is":["because"],"validation method":["or"],"validation that":["you"],"validations for":["each"],"validations to":["their"],"valuable suggestions!":["Extremely"],"valuable when":["the"],"valuable. Protocols":["in"],"value +":["1","1"],"value and":["a","the","update"],"value as":["a"],"value be":["`HashDict.new"],"value can't":["(in"],"value do":["..."],"value doesn't":["get"],"value for":["the","if"],"value if":["such","the","it"],"value in":["do_collect_downcased_words/1,","the","sing."],"value is":["unimportant.","that","a","completely","created),","expensive","0","0","1","0","0","1","0","0","1","0","0","1","0","0","1"],"value it":["represents.","is"],"value just":["use"],"value leads":["to"],"value of":["the","`desired_characters`,","`strip`.)","the","the","a","the","the","your","call)","call)","call)","call)","the","a","the","call)","call)","a","call)","call)","call)","call)"],"value on":["`sing/2`"],"value out":["of"],"value since":["I"],"value so":["that's"],"value specifically":["for"],"value surprised":["me,"],"value that":["might","changes","doesn't"],"value they":["return"],"value through":["a"],"value yet,":["you"],"value }":["-\u003e","inlist"],"value\"? Not":["sure"],"value) if":["it"],"value, and":["google"],"value, but":["`List.zip/1`"],"value, not":["to"],"value, stripped,":["is"],"value, which":["might","you"],"value. In":["the"],"value. Maybe":["I'll"],"value? I've":["started"],"valued functions":["would","to"],"values (&append/1)":["this"],"values (both":["in"],"values all":["at"],"values are":["represented"],"values but":["it"],"values during":["recursion,"],"values for":["arguments","some","the","arguments."],"values from":["it"],"values in":["Elixir","elixir","it,","`line2`","the"],"values is":["to"],"values isn't":["a"],"values of":["0,","the","the"],"values pointed":["to"],"values that":["are"],"values without":["changing"],"values). Exposing":["it"],"values, letter":["inlist"],"values, so":["you"],"values. But":["I"],"values. Can":["you"],"values. I":["do"],"values. If":["you","you"],"values. It's":["basically"],"values. What":["if"],"values? Can't":["you"],"values? That's":["a"],"value} inlist":["values,"],"value}` tuples)":["can"],"variable \"phrase\"":["or"],"variable (you":["do"],"variable `str`":["can"],"variable again":["to"],"variable and":["method"],"variable be":["more"],"variable before":["passing","using"],"variable but":["I"],"variable codepoint":["and"],"variable correctly":["is"],"variable either.":["I"],"variable expected":["to"],"variable from":["the"],"variable helps":["there."],"variable in":["the","the","the"],"variable is":["an","called"],"variable isn't":["used"],"variable length":["code"],"variable like":[":"],"variable name":["than","then","either,","be","than","more","should","for","prefixed"],"variable name.":["So"],"variable names":["and","are","would","if"],"variable names.":["\"unformatted_phone_number\"","Might"],"variable naming\"":[":)"],"variable naming\",":["as"],"variable naming,":["I'd"],"variable that":["you're","you"],"variable words":["instead"],"variable would":["make"],"variable, an":["attribute,"],"variable, and":["refactoring"],"variable. \u003c\u003cvar\u003e\u003e":["will"],"variable. It's":["like"],"variable. So":["it","maybe"],"variable. That's":["great"],"variables `string`,":["`array`"],"variables and":["I"],"variables could":["be"],"variables directly":["(outside"],"variables from":["the"],"variables if":["you"],"variables in":["the","`anagrams?/2`,"],"variables naming":["and"],"variables s,":["a,"],"variables that":["you","have"],"variables there":["doesn't"],"variables you":["have."],"variables, etc.),":["and"],"variables, not":["comments)"],"variables. But":["the"],"variant without":["&(),"],"variations in":["case"],"variety for":["something"],"variety of":["functions"],"various cases":["in"],"various conditions":["in","(ie","(String.length(message)"],"various inputs":["and"],"various responses?":["You"],"vars, but":["conceptually"],"vars. Yeah,":["there"],"vary only":["by"],"vary with":["the"],"verbose and":["more","not"],"verbose broken":["up"],"verbose but":["otherwise"],"verbose fn":["-\u003e"],"verbose if":["it"],"verbose implementation":["of"],"verbose name":["for"],"verbose pattern.":["I"],"verbose perhaps,":["but"],"verbose than":["it"],"verbose, I":["like"],"verbose, module-based":["approach"],"verbose, this":["all"],"verbose. If":["the"],"verbosity you":["can"],"verbosity, were":["you"],"verbosity: what":["I"],"verified that":["they're"],"verified. Here's":["an"],"verify input":["etc."],"verify that":["the"],"verify. I'll":["keep"],"verse 2":["a"],"verse ```":["method"],"verse and":["sing.","sing."],"verse clauses.":["Is"],"verse even":["if"],"verse for":["improved"],"verse generation":["with"],"verse in":["my"],"verse number":["to"],"verse only":["changes"],"verse templates":["could"],"verse than":["reading"],"verse(0), do:":["\"No","\"No"],"verse(1), do:":["\"#{first_part_of_verse(1)}Take","\"One"],"verse(bottles) when":["bottles"],"verse(num), do:":["\"#{num}"],"verse, which":["doesn't"],"verse. It's":["more"],"verse/1 function,":["I"],"verse/1 in":["a"],"verse? What":["benefit"],"verses =":["from_bottles..to_bottles"],"verses backward,":["but"],"verses of":["the"],"verses |\u003e":["Enum.map(&[&1,"],"verses. Now":["you"],"version (4)":["where"],"version (not":["joining"],"version 0.10.2":["of"],"version 1,":["init"],"version 2":["is"],"version 3":["("],"version 4":["but"],"version 5":["as"],"version I":["feel","wrote:","could","changed","had"],"version `0.10.1`":["introduced"],"version `0.10.2`":["or"],"version again":["later."],"version allows":["the"],"version already":[":)"],"version and":["see","see","got","the","said"],"version around":["and"],"version as":["well.","well"],"version before":["for"],"version better.":["To"],"version btw)":["syntax"],"version coming":["up."],"version do":["what"],"version eats":["more"],"version flattens":["the"],"version had":["tests"],"version has":["the"],"version hides":["the"],"version identical":["with"],"version in":["any"],"version is":["clearer.","idiomatic,","way","terrible.","great.","correct","a","pre","easy","a","more"],"version is.":["And"],"version just":["because"],"version last":["time"],"version may":["be"],"version now.":["I"],"version of":["\"hey\"","the","the","the","`hey`,","`match/2`","the","`match/2`.","tests","tests","the","the","a","Elixir","Elixir","an","count:","`bottles`","elixir","your","`words_match?/2`.","`words_match?/2`","the","the","Elixir","this","the","Elixir.","Elixir.","`String.slice`","String.slice","`count`","Elixir.","def/defp.","singalong.","the","each","the","Elixir.","the","Elixir","concat","concat","those","Elixir","the"],"version on":["here,"],"version only":["for"],"version over":["using"],"version prior":["to"],"version said":["\"is_question?\""],"version seems":["to"],"version slightly":["better."],"version takes":[".1s",".3s"],"version taking":["that"],"version that":["doesn't","does","uses","keeps","takes","takes","I"],"version the":["/u"],"version to":["submit."],"version turned":["out"],"version unless":["you"],"version uses":["GenServer,"],"version using":["`Enum.find_value`","that","that.","`reduce`","`Stream.filter`"],"version was":["broken,"],"version where":["I","I","I"],"version wit":["your"],"version with":["the","that","naming","a","that","that","those","minimal"],"version without":["the","append","GenServer"],"version would":["exist"],"version, I":["like"],"version, and":["I","I'll","I'd"],"version, or":["would"],"version, so":["I"],"version, which":["got"],"version. :)":["Thanks"],"version. Any":["other"],"version. Could":["replace"],"version. He":["said"],"version. I":["probably","suspect","left","like","finally"],"version. I'm":["just"],"version. If":["so,","that"],"version. It":["took"],"version. Just":["for"],"version. Let":["me"],"version. My":["goals"],"version. Nice,":["simple,"],"version. Thanks":["again"],"version. We":["can"],"version? There":["was"],"version](http://exercism.io/submissions/a6a7ce08ece4b2cade0594a2). Using":["Phrase"],"versions (0.10.1+,":["I"],"versions I've":["seen"],"versions i":["was"],"versions of":["a","Elixir","your","a","it:","Elixir:","```hey```","original","functions.","\"foo\".","this","Exercism,"],"versions that":["I","I"],"versions this":["time."],"versions, as":["per"],"versions, but":["I"],"versions, or":["should"],"versions. Like":["I"],"versions. You'll":["find"],"versions. `Dict`":["=","works"],"versus a":["locally-bound"],"versus cast":["has"],"versus defining":["them"],"vertical vs":["horizontal"],"vertically. Much":["easier"],"very \"functional\"":["--"],"very appropriate":["when","for"],"very bad":["cost."],"very basic":["functions"],"very beginner":["as"],"very boilerplatey":["to"],"very brute":["force,"],"very clean":["readable"],"very clean.":["Think"],"very clear":["that"],"very clear,":["but","but","but"],"very common":["in","in"],"very complex.":["I"],"very concise,":["but"],"very concise.":["I"],"very convinced":["about"],"very cool":["that"],"very cool)":["and"],"very cool.":["Thanks"],"very descriptive":["names,"],"very different":["things.","constructs"],"very easy":["to","to"],"very effectively,":["however"],"very efficient":["code."],"very efficiently":["adding"],"very elixir-ish":["at"],"very end":["there"],"very first":["elixir","bit"],"very functional.":["This"],"very general":["pattern","function"],"very generic.":["The"],"very good":["book"],"very good,":["really."],"very good.":["Can"],"very happy":["with","with","with"],"very hard":["put"],"very hard,":["I"],"very inefficient,":["way.","way.","way.","way.","way."],"very inelegant":["first"],"very interesting":["idea."],"very interesting,":["approach."],"very interesting.":["Thanks!"],"very large":["string","lists.","lists."],"very latest":["Elixir"],"very little":["examples","excuse"],"very long":["to"],"very magic":["number"],"very minor":["nitpick:","things:","thing:","nit."],"very much":["right!","for","getting","Ruby-style"],"very much.":["I"],"very nice":["and","property"],"very nicely":["concise,"],"very open":["to"],"very picky.":["I"],"very pleased":["with"],"very powerful,":["it"],"very powerfull":["."],"very pretty,":["do"],"very pretty.":["As"],"very pronounced":["\"valley\""],"very rare":["in"],"very readable,":["but","you"],"very readable.":["Maybe"],"very recursively":["so"],"very regex-heavy":["and"],"very reusable":["and"],"very satisfied":["about"],"very short":["functions"],"very similar":["list,","to"],"very similar,":["but"],"very simple":["problem.","and","ruby","expressions"],"very slightly":["decreases"],"very slow":["concat"],"very small":["performance","set"],"very start,":["or","instead"],"very straightforward":["code"],"very trivial":["input"],"very unreadable":["the"],"very useful":["to","tool","invariant","as"],"very useful!":["How"],"very verbose":["broken"],"very wary":["of"],"very well":["be"],"very well.":["Would","The","It's","I","`blank?`"],"very wide":["so"],"via Process.whereis":["and"],"via |&gt;,":["and"],"viable tactic":["to"],"vice-versa in":["order"],"vice-versa. It":["would"],"video that":["describes"],"video with":["José"],"video](http://www.youtube.com/watch?v=V08g_lkKj6Q) of":["an"],"videos on":["Elixir"],"view window":["of"],"view. My":["apologies"],"viewport isn't":["very"],"vim &":["everything"],"violation of":["the"],"virtue of":["a","a"],"visibility I'm":["concerned"],"visible outside":["the","the"],"visual communication":["that"],"visualising the":["flow"],"visualize the":["difference."],"visually less":["noisy"],"visually match":["each"],"visually split":["them"],"vital performance)":["document"],"vs 2":["params."],"vs `HashDict`:":["It's"],"vs `List.zip`,":["both"],"vs `defp":["do_append`."],"vs `foo":["=="],"vs `if":["else`."],"vs ask":["a"],"vs horizontal":["space,"],"vs idiomatic":["elixir"],"vs property.":["Put"],"vs question?,":["what"],"vs sorted":["list."],"vs. 'l,acc'":["is"],"vs. HashMap/TreeMap":["in"],"vs. `!same?`":["and"],"vs. `discard`.":["Does"],"vs. `sorted_chars`?":["I"],"vs. defp.":["Thank"],"vs. do":["..."],"vs. functions":["with"],"vs. inline.":["I"],"vs. named":["functions,"],"vs. readability":["is"],"vs. retrieval":["for"],"vs. the":["\u003ccode\u003erespond_to\u003c/code\u003e"],"w inlist":["ws,"],"w.r.t. `fn":["(w,"],"w/o prefixes":["and"],"wack together":["anonymous"],"wading into":["elixir"],"waffle which":["side"],"wait a":["few"],"wait for":["an"],"wait to":["try"],"waiting for":["a","a","your"],"waiting so":["long"],"walking the":["list"],"wall for":["a"],"wall, #{bottles}":["#{bottle_classifier(bottles)}"],"wall, #{num}":["bottles"],"wall, One":["bottle"],"wall, no":["more","more"],"want (for":["example"],"want (sequences":["of"],"want (tip:":["`Regex.scan`)."],"want I'll":["let"],"want String.graphemes":["instead"],"want and":["kicking","then","then","operate","then"],"want any":["more"],"want could":["you"],"want here,":["so"],"want how":["about"],"want instead":["of","of"],"want maybe":["you"],"want nice":["names"],"want object":["style"],"want people":["who"],"want that":["sort"],"want them.":[";-)"],"want to":["look","user","you","point","separate","consider","play","investigate","check","protect","wrap","share","know","try","refactor","simplify","have","perform","tweak.","limit","distinguish","perform","make","support","duplicate","expose","allow","make","use","write","chain","add","move","say","know","taint","use","write","reuse","iterate","stay","recurse","wait","split","split","go","banish","be","support","see","use","change","get","discard.","change","avoid","take","actually","support","do","read","force","reformat","see,","see)","run","look","make","lose","use","know","take","mess","figure","look","take"],"want to,":["you"],"want to.":["This"],"want unicode":["letter"],"want why":["not"],"want you":["can","could"],"want\". Nitpickers":["never"],"want, and":["then"],"want, or":["split"],"want. I'm":["open"],"want. Wouldn't":["it"],"want. You":["can"],"want? For":["example"],"want? Take":["a"],"want? `Regex.scan`":["can"],"wanted a":["way","second"],"wanted an":["`empty?`"],"wanted instead":["of"],"wanted it":["to","to"],"wanted me":["to"],"wanted more":["practice"],"wanted my":["first"],"wanted some":["sort","programmatic"],"wanted that":["`anagram_of?`"],"wanted the":["others"],"wanted to":["practice","write","make","write","know","try","have","use","point","use","try","try","maximize","document","do","use","avoid.","know.","rebind","to","use","use","make","point","get","see","place","avoid","the","point","make","implement","avoid","go","submit","use","explain","like:","shorten","point","do"],"wanted to,":["you","not","you"],"wanted you":["to"],"wanted. Is":["it"],"wanting to":["write","evaluate"],"wants an":["enumerable"],"wants to":["check","check","check","guarantee","be"],"warm to":["it"],"warn when":["you"],"warning about":["this)."],"warning if":["I"],"warning that":["`/u`"],"warning. I've":["pushed"],"warnings as":["well."],"warnings for":["unused"],"warnings from":["the"],"warnings. What":["am"],"warrant a":["name."],"warrants an":["entire"],"wartier aspects":["of"],"warts I":["mentioned"],"wary of":["putting","just"],"was Googling":["for"],"was `odd?`":["which"],"was a":["guard","lot","little","bad","genuine","little","test","fun","mistake,","little","String.empty?","difference.","bit","good","better","suggested","time","bad","fun","way","bit","better","remnant","test","test","bit","real","decent","synonym","lot","mistake","mistake,","little","way","more","difference.","bunch","bug"],"was able":["to","to","to"],"was about":["reimplementing"],"was actually":["referring","surprised","a","already","the","thinking"],"was added.":["I"],"was aimed":["at"],"was all":["I","uppercase."],"was allowing":["for"],"was already":["doubting"],"was also":["a"],"was an":["accidental","accidental","accidental","erlang","accident.","implicit","issue.","`inc`"],"was and":["immediately"],"was another":["user's","test"],"was available":["in"],"was aware":["of"],"was based":["on"],"was being":["mentioned,","vague,"],"was better":["to"],"was broken,":["not"],"was by":["far"],"was case":["insensitive."],"was clear":["which"],"was clever":["to"],"was composing":["my"],"was concerned":["that"],"was conflating":["char"],"was considered":["a"],"was converting":["the"],"was crying":["out"],"was definitely":["premature","a"],"was delighted":["to"],"was designing":["it."],"was doing":["it.","it","mine.","that.","this.","in"],"was driving":["me"],"was each":["method's"],"was easier":["to","to"],"was easy":["enough"],"was expecting":["it"],"was experimenting":["with"],"was explicitly":["stated"],"was fewer":["lines"],"was fine":["for"],"was forbidding":["me"],"was forgetting!":["Thanks."],"was getting":["an","(iterations"],"was given.":["So,"],"was giving":["me"],"was going":["to","to","to","for","but","with","to"],"was good":["(and"],"was graphing":["memes,"],"was grateful.":["Just"],"was guarding":["for"],"was guessing":["I"],"was having":["a","to"],"was hoping":["something","to","more","it"],"was important":["to"],"was in":["another"],"was initially":["confused","looking"],"was inspired":["by"],"was invalid.":["And"],"was just":["something","struggling","sharing","trying","ugly","considering","more","curious."],"was kind":["of"],"was late":["and"],"was leaning":["towards"],"was left":["after"],"was less":["wordy"],"was looking":["for","for","for","at","at","for"],"was making":["the"],"was me":["who"],"was meant":["more","to"],"was memoizing":["the"],"was missing":["something..."],"was more":["readable","readable","than","specific","silliness","like","concerned"],"was mostly":["borrowing"],"was much":["more","easier"],"was my":["first","version"],"was necessary":["to"],"was needed":["but"],"was never":["able"],"was new":["to"],"was no":["`sort_by`","\"otherwise\""],"was not":["present","aware","quite","able","aware","happy","aware","recommended.","aware"],"was odd":["that"],"was on":["a"],"was one":["of"],"was particularly":["hard...I"],"was partitioning":["the"],"was passing":["the"],"was peeking":["at"],"was pleased":["to"],"was pointed":["out","out"],"was possible!":["I'm"],"was possible,":["or"],"was preferable":["to"],"was pretty":["geeked","much","surprised","straightforward","generic"],"was previously":["unaware"],"was quite":["pleased"],"was reading":["through"],"was really":["surprised"],"was recommended":["to"],"was redundant.":["Is"],"was referring":["more","to"],"was reminded":["that"],"was reused":["`do_count`","`do_count`","`do_count`","`do_count`","`do_count`"],"was reverted.":["`String.valid?/1`"],"was safe":["to"],"was saying":["no."],"was seeing":["it"],"was some":["documentation"],"was something":["else"],"was somewhat":["afraid"],"was specifically":["designed"],"was split":["into","in"],"was stumbling":["through"],"was suggested":["to","to"],"was supposed":["to"],"was surprised":["to","to","that"],"was surprised,":["the"],"was talking":["about","about."],"was telling":["me"],"was tempting,":["but"],"was terrible.":["I"],"was that":["'Bob'","\"1,","they're","it","you"],"was the":["word","case","only","way","way","responsibility","best","motivation","key","rationale","same","return","most","best","best","first","same.","dryer","yelling."],"was there":["on"],"was thinking":["along","there","more","of","of"],"was this:":["shouting"],"was to":["use","put","guide","use","keep","put","deal","keep","make","use","in","have","implement","use","first","ignore","make"],"was too":["proud"],"was translated":["from"],"was trivial":["and"],"was trying":["to","to","to","to","to","to","to","to","a"],"was unable":["to"],"was unaware":["of"],"was unclear,":["it's"],"was under":["the"],"was unnecessary":["since"],"was unsure":["what"],"was used":["in"],"was using":["an","the",":list.sort","reduce"],"was very":["similar,","regex-heavy","helpful!"],"was waiting":["for"],"was what":["I","alanpeabody","I"],"was wondering":["if","why.","if","about"],"was wondering,":["is"],"was working":["on"],"was working.":["I"],"was worth":["it.","it"],"was writing":["the"],"was written":["explicitly"],"was wrong":[")_","to","(was"],"was, for":["example."],"was/is in":["Elixir."],"was: use":["a"],"wasn't a":["hint,"],"wasn't aware":["the","ruby","that"],"wasn't clear":["on"],"wasn't clear.":["This"],"wasn't coming":["to"],"wasn't confident":["in"],"wasn't familiar":["with"],"wasn't focused":["on"],"wasn't immediately":["clear"],"wasn't matched.":["So"],"wasn't necessary,":["or"],"wasn't not":["familiar"],"wasn't passed":["in"],"wasn't present":["when"],"wasn't really":["too"],"wasn't specified":["in"],"wasn't super":["happy"],"wasn't sure":["what","about","if","exactly","if","if","what","how","if","if"],"wasn't sure.":["Thanks!"],"wasn't the":["concurrency"],"wasn't thinking":["about"],"wasn't too":["sure"],"wasn't totally":["sure"],"wasn't true.":["I"],"wasn't working":["than"],"waste but":["reverse","reverse"],"waste of":["my"],"wasting your":["time"],"watching a":["[cute"],"watching the":["OTP"],"way (`Stream.map(...)":["|\u003e"],"way (but":["much"],"way (without":["regexes)"],"way -":["I"],"way I":["do","see","solved","implemented","do","found","could","see","know"],"way I've":["found"],"way `Dict`":["is"],"way and":["then","remembered"],"way around":["the","it,","that?","that."],"way as":["I","to","`Hash.new(default)`"],"way at":["first,"],"way because":["it's"],"way before.":["It's"],"way better":["than","I"],"way better.":["Even"],"way but":["i","I"],"way characters":["like"],"way cleaner":["to","now!"],"way do":["'fix'"],"way does":["look"],"way down":["the","to"],"way except":["to"],"way for":["case-insensitively"],"way forward.":["It"],"way here":["to"],"way if":["there's","the","people"],"way in":["Elixir?","a","a","just"],"way is":["one","good","to","to"],"way it'll":["be"],"way it's":["done.","subjective","incorrect.","more"],"way less":["checks"],"way more":["flexible?","code","efficient","elegant"],"way not":["to"],"way of":["writing","communication","the","fixing","specifying","thinking","thinking","thinking","getting","doing","writing","grouping","always","counting","thinking","writing","thinking.","putting","stripping","doing","thinking","doing","`reduce(ll,","`reduce(ll,"],"way on":["the","the"],"way or":["not"],"way right":["now"],"way so":["that"],"way than":["size(msg)"],"way that":["should","you","suggests","you","you","it's","involves","involves","doesn't","makes","things","using"],"way the":["Ruby","data","language","empty","error","names","functions"],"way then":["you"],"way this":["looks"],"way to":["distinguish","use","only","take","deal","remove","test","make","make","detect","check","express","test","do","apprach","remove","make","simplify","get","get","implement","remove","remove","use","do","test","test","check","find","check","remove","check","have","make","get","DRY","pattern","write","make","do","factor","do","do","remove","remove","reference","clear","remove","do","produce","write","improve","send","simplify","DRY","only","simplify","do","only","move","simplify","go","do","build","implement","avoid","check","check","return","method","method","only","DRY","check","do","do","approach","do","handle","get","make","do","do","do","go.","implement","reference","do","fix","check","learn!","check","check","apply","hide","go,","do","use","do","do","not","do","accomplish","resolve","keep","do","approach","look","join","understanding","avoid","build","have","handle","avoid","avoid","convert","get","extract","do","give","finish","avoid","subtract","practice","have","go","do","reuse","know","accomplish","go","do","do","be","do","implement","get","increment","know","test","manipulate","test","implement","cache","eliminate","use","send","reduce","do","append"],"way too":["long","spread"],"way up":["there"],"way when":["you"],"way which":["I"],"way will":["be,"],"way with":["the"],"way would":["be"],"way yet":["to"],"way yet.":["I"],"way you":["moved","could","could","could","create","can","could","write","broke","pulled","use","could","could","won't","could","could","could","have","could","did","did","could","condensed","can"],"way you'll":["only"],"way you're":["creating"],"way you've":["(correctly)","(correctly)"],"way!\" response":["path."],"way!\"\" \"If":["message"],"way!\"` which":["was"],"way, I":["looked"],"way, `||":["0`"],"way, and":["if","```+```"],"way, as":["most"],"way, but":["I'm","yet,","they","I"],"way, extra":["space"],"way, given":["the"],"way, here's":["how"],"way, if":["you"],"way, it's":["a","also"],"way, just":["how"],"way, please":["don't"],"way, these":["are"],"way, why":["you"],"way. And":["I'm","I'm","I'm"],"way. Couple":["of"],"way. Elixir":["code","(through","(through","(through","(through","(through"],"way. Have":["you"],"way. I":["does","did"],"way. Is":["there"],"way. It's":["clear"],"way. You":["learn"],"way: clauses":["`P`"],"ways (in":["fact"],"ways (which":["I"],"ways and":["does"],"ways around":["`&1"],"ways btw,":["from"],"ways of":["checking","doing","reusing","checking"],"ways permanently":["joined."],"ways to":["generate","prevent","say","do","approach","simplify","do","write","improve","apply","encode","detect"],"ways, and":["both","Elixir's"],"ways. (The":["other"],"ways. I'm":["interested"],"we accept":["that,"],"we all":["start."],"we always":["strive"],"we are":["just","all","in","in","nitpicking,"],"we can":["decide","create","assume"],"we can't":["use","really"],"we check":["for","for"],"we commonly":["refer"],"we could":["think"],"we couldn't":["use"],"we doing":["to"],"we don't":["know","know"],"we ever":["want"],"we found":["a"],"we got":["those"],"we had":["it"],"we handled":["this"],"we have":["a","to","different","to"],"we hit":["the"],"we just":["write","write"],"we know":["who's"],"we need":["`inc`."],"we rarely":["need"],"we really":["need"],"we remove":["some"],"we should":["talk","suggest","get"],"we sort":["initial","the"],"we start":["at"],"we take":["it"],"we tend":["to"],"we use":["head"],"we usually":["don't","explicitly"],"we'll see":["if"],"we're doing":["it."],"we're here":["for."],"we're interested":["in."],"we're just":["going"],"we're nitpicking,":["`say`"],"we're not":["mutating"],"we're on":["the"],"we're re-writing":["them"],"we're using":["different"],"weak grasp":["of"],"weak spot":["of"],"web interface":["without"],"website will":["tell"],"website, i":["couldn't"],"wee bit":["hackish"],"week and":["scan"],"week in":["erlang?"],"week numbers":["from","from"],"week than":["I"],"week, month":["and","and"],"weekday names":["in"],"weekday number":["to"],"weekday type":["to"],"weight words":["like"],"weird and":["out"],"weird at":["all."],"weird before":["to"],"weird on":["the"],"weird one.":["`:gen_event.start_link/1`"],"weird results":["(and"],"weird space":["after"],"weird that":["you're","`@jamar`"],"weird to":["me.","me.","me","me,"],"weird, I":["understand"],"weird, are":["you"],"weird, being":["checking"],"weird, but":["I'd"],"weird, probably":["because"],"weird. Imagine":["there"],"weird. It":["can"],"weird. Underscores":["are"],"welcome any":["suggestions"],"well (i.e.":["tests"],"well (if":["the"],"well as":["function","browsing","the","the","the","comparing","preferred","empty","my","it","the"],"well be":["\"by","though)."],"well beyond":["where"],"well but":["that's"],"well describes":["what's"],"well either.":["I"],"well enough.":["Enumerators"],"well for":["large","binaries"],"well have":["a"],"well in":["the","this","Elixir."],"well just":["to"],"well named":["(private)","methods","functions"],"well not":["be"],"well on":["the"],"well pull":["up"],"well sorted.":["At"],"well they":["match"],"well to":["their","make","see"],"well with":["private","elixir.","any"],"well you":["can"],"well, I":["presume"],"well, almost":[";-)."],"well, and":["it","frankly,"],"well, as":["it's"],"well, but":["since","I'm","there","yeah,"],"well, by":["basically"],"well, no":["need"],"well, not":["to"],"well, so":["line"],"well, though":["that"],"well, your":["code"],"well-named function":["(dare","for"],"well-named methods":["for"],"well-named private":["methods","functions"],"well-suited to":["functional"],"well. For":["example"],"well. I":["might","bet","don't","left","was"],"well. Is":["this"],"well. It":["seemed"],"well. It's":["not"],"well. One":["thing"],"well. Thanks":["for"],"well. That's":["the"],"well. The":["only"],"well. Would":["you"],"well. `blank?`":["sounds"],"well: `earth_years":["="],"well? What":["you"],"went a":["step","different"],"went about":["coming"],"went ahead":["and","and","and"],"went back":["and"],"went down":["several"],"went for":["the","string"],"went out":["of"],"went reading":["docs"],"went the":["route"],"went this":["route?","direction"],"went to":["read"],"went too":["far."],"went with":["`Regex.scan`,","`something","adding","`true`","this","the","it","sort.","a","the","an","the"],"went, but":["this"],"were \"real\",":["the"],"were 2":["things"],"were I":["would"],"were a":["real","single","problem"],"were accidental":["submissions.)"],"were actually":["from"],"were allowed":["but"],"were alluding":["to"],"were any":["in"],"were beneath":["`nucleotide_counts`"],"were broadly":["available,"],"were chosen":["for"],"were commented":["out."],"were different":["and"],"were doing":["this","this"],"were enough":["other"],"were extracted":["into"],"were found":["to"],"were getting":["at"],"were here!":[":)"],"were in":["a","a"],"were just":["a"],"were me":["I'd"],"were mentioned":["in"],"were more":["complex","tests"],"were needed":["for"],"were other":["data"],"were put":["in"],"were real":["production"],"were really":["a"],"were rearranged":["to"],"were seeking":["optimal"],"were simply":["saying"],"were still":["open"],"were string":["related,"],"were the":["same","last","same."],"were thinking":["of?"],"were to":["be","write","'use"],"were truly":["checking"],"were used":["(or","as"],"were using":["in"],"were very":["hard,"],"were wondering":["about"],"were you":["thinking","saying"],"weren't very":["reusable"],"wether those":["calls"],"what \"upcase\"":["is;"],"what @beulah":["said,"],"what @boris":["said:"],"what @lura":["said."],"what @sydnee":["means"],"what @tracey":["had"],"what Bob":["is"],"what I":["was","have","have","understand","think","can","suggest?","understand,","wanted","wanted","was","need.","ended","think","am","want","wanted.","used","expected","wanted.","have","understand","was","figured.","suggested","consider","thought,","want.","came","did","was","already","pushed.","meant."],"what I'd":["learned"],"what I'm":["suggesting.","flipping","about","doing...","talking","doing"],"what I've":["been","seen"],"what `String.split/3`":["is"],"what ``cond``":["does"],"what `cond`":["is"],"what `new/2`":["creates."],"what `tokenizer`":["is"],"what a":["\"dictionary\"","shout","Hamming","better","great"],"what about":["adding","the"],"what alanpeabody":["was"],"what benefits":["it"],"what bothers":["me"],"what came":["from"],"what constraints":["there"],"what could":["be"],"what determines":["the"],"what do":["you","you","you","you","you","you"],"what does":["\u003ccode\u003eSpeech\u003c/code\u003e","the","it"],"what don't":["you"],"what each":["`true`","of"],"what error":["message"],"what exactly":["is","right","to"],"what exercises":["to"],"what exercism":["is"],"what feels":["better."],"what goes":["into"],"what good":["code","code"],"what guards":["syntax"],"what happens":["when","if","if","when","with","with","with","with","with","with","if"],"what has":["already"],"what idiomatic":["Elixir"],"what if":["the"],"what in":["particular?"],"what is":["that","pattern","currently","supposed","going","going","inside","the","going","the","going","independent.","\"readable\"","the","in","known","going"],"what it":["looks","is","is","does.","should","would","does.","looks","does,","looks","actually","is.","meant","*does*","would"],"what it's":["doing.","doing","doing.","doing.","doing","used","about!","doing","doing,"],"what kind":["of","of"],"what kinds":["of"],"what language":["features"],"what letters":["have"],"what level":["to"],"what makes":["`modulo`","trees"],"what most":["are"],"what order":["you're"],"what people":["are","think"],"what private":["functions"],"what promoted":["the"],"what really":["signifies"],"what reply":["would"],"what should":["start"],"what situation":["are"],"what someone":["hears."],"what that":["first","might","`100`","meant."],"what the":["name","name","doctor","Elixir","convention","community","policy","common","code","&amp;","intent","relative","idiomatic","code","better","nucleotides","different","balance","previous","heck","things","different","teenager","tests","convention","value","code","two","test","actual","test","extra"],"what these":["code"],"what they":["are","might","represent.","can","can","try","support.","are","do"],"what they're":["trying"],"what this":["community","function","is,"],"what those":["words","regexes","different","things"],"what to":["replace","do","do.","do","do","expect."],"what traits":["of"],"what type":["of"],"what values.":["If"],"what was":["intended"],"what way":["more"],"what we":["have","commonly"],"what we're":["here"],"what would":["happen","be","you","you","happen","happen"],"what you":["mean...","think.","meant,","mean","pass","meant?","have","mean","were","said.","are","are","do","think?","like!","mean","did","need.","might","don't","think","both","think","can","want?","want.","think.","have","said","have","mean","consider","mean","consider","want","mean.","want","don't","don't","did","think.","had","mean,","want","don't","don't","do","might","suggested),","want","don't","mean","don't","do"],"what you'd":["use"],"what you're":["asking","asking?","actually","going","doing","trying","doing","saying","trying","getting","saying,","doing","interested","saying","trying","getting"],"what your":["accumulator","code","`Enum.slice`"],"what's actually":["happening"],"what's allowed":["in"],"what's attracting":["me"],"what's available":["and"],"what's going":["on.","on.","on.","on","on.","on"],"what's happening":["than","without"],"what's in":["here\""],"what's most":["accepted."],"what's on":["the"],"what's the":["problem"],"what's up.":["There's"],"what's wrong.":["I'm"],"what... I've":["actually"],"what;s happening.":["I'm"],"whatever argument":["it"],"whatever delimiter":["you"],"whatever for":["what"],"whatever is":["in"],"whatever level":["of"],"whatever reason,":["but"],"whatever words":["you"],"whatever)` is":["pretty"],"whatever. If":["people"],"whatever` and":["when"],"wheel on":["this"],"wheel' version.":["Could"],"when 11":["digits"],"when Erlang":["gains"],"when I":["did","was","realised","have","did","did","wrote","read","recommended","used","decided","\"finished\"","was","read","chose","skimmed","did","fetched","pass","discovered","wrote","was","pass","get","can","get","first","was","first","put","run","did","did"],"when I'm":["writing"],"when `Dict`":["functions"],"when `whatever`":["is"],"when all":["you"],"when arguments":["are"],"when attempting":["to"],"when bar":["=="],"when bottles":["&gt;"],"when building":["a"],"when c":["\u003e=","\u003e=","\u003e="],"when calling":["and","and"],"when checking":["for","for"],"when coding":["ruby."],"when combined":["with"],"when comparing":["your"],"when cond":["statements"],"when creating":["a"],"when dealing":["with"],"when defining":["functions.","the"],"when executing":["the"],"when f.(h)":["-\u003e`,"],"when first":["+"],"when functions":["are"],"when higher":["order"],"when i":["submitted"],"when is":["empty","1,","n)","not","anagram."],"when is_binary(something)":["do"],"when it":["comes","comes","comes","makes","does,","is","has","really","was","becomes","came"],"when it's":["a","only","explicitly","appropriate","appropriate"],"when looked":["at"],"when memoization":["is"],"when most":["of"],"when n":["\u003e","\u003e"],"when naming":["a"],"when nil?(something)":["do"],"when none":["of"],"when not":["necessary."],"when nothing":["needs"],"when only":["one"],"when pattern":["matches","matching"],"when people":["specify","do"],"when pipes":["are"],"when possible":["(e.g."],"when reading":["code","the"],"when rem(n,":["3)"],"when removing":["String"],"when replacing":["```"],"when same":["grade."],"when solving":["an"],"when space":["is"],"when start_verse":["\u003c="],"when starting":["to"],"when stdlib":["can"],"when str":["=="],"when text":["is"],"when the":["function","body","function","function","statement","steps","time","first","full","lists","two","comment","from","number","right-hand","problem","nucleotides","collection","sides","list","arity"],"when there":["is","are","are"],"when there's":["just","no","only"],"when they":["are","spot","make","are"],"when to":["use","use","use"],"when trying":["to"],"when use":["the"],"when used":["judiciously.","in"],"when using":["cond,","a","other","it","pipes.","Erlang's","it","numeric","multiline","|\u003e"],"when we":["need"],"when writing":["it.","expressions","the"],"when x":["=="],"when you":["have","wrote","could","want","can","don't","edit","don't","can't","forget","added","nest","should","have","declare","think","want","want","were","get","have","repeatedly","add","convert","already","use","write","write","run","run","would","see","click","have","run","don't","create","run","run","have"],"when you're":["only","reading","using","using"],"when... Kinda":["crazy."],"whenever it's":["invoked,"],"whenever possible":["in"],"whenever possible.":[":)"],"whenever the":["argument","two"],"whenever you":["think","got"],"where Bob":["needs"],"where DRY":["is"],"where I":["can","see","changed","think","had","tried","try","consider"],"where I'd":["use","be","like"],"where I'm":["expecting"],"where I've":["used"],"where `&`":["indicates"],"where `letter`":["does"],"where `n1":["!="],"where a":["pipeline"],"where and":["how"],"where having":["a"],"where imports":["are"],"where it":["might","could","would","would","did","would","ought","presents","doesn't"],"where it's":["coming","better"],"where lines":["6"],"where one":["clause"],"where pattern":["matching"],"where possible":["by"],"where readability":["suffers"],"where single":["character"],"where the":["output","meaning","author","second","kind","pipeline","hyphen","day","day","generators","`&`","-1","are)","source","grades","state","&append/2","last"],"where there":["are"],"where they":["won't","are","come"],"where this":["piece","sorting","one"],"where you":["can","are","pass","know","could"],"where you're":["defining"],"where zero":["words"],"where, didn't":["really"],"whereas the":["other","result"],"whereas with":["`List.first`"],"wherever possible,":["which"],"whether Erlang":["provides"],"whether I":["think"],"whether `count`":["couldn't"],"whether a":["list","non-empty","comparison","sentence"],"whether in":["line"],"whether it":["should","makes","might","is"],"whether it's":["preferable","worth"],"whether message":["is"],"whether or":["not","not","not","not"],"whether predicate":["functions"],"whether someone":["adds"],"whether the":["string","lack","value","words","two","problem","addition"],"whether to":["use","use","use","iterate"],"whether two":["words"],"whether you":["know","want","want","could"],"which (mostly":["for"],"which @kay":["pointed"],"which I":["barely","personally","*do*","usually","think","was","will","haven't","use","don't","really","can't","just","was","need","prefer"],"which I've":["then","called","only"],"which IMO":["would"],"which `[A-Z]`":["matches."],"which `update`":["was"],"which allowed":["me"],"which allows":["you"],"which also":["allows","uses","permit"],"which any":["invalid"],"which are":["all","subtly","sorted","arbitrarily","within"],"which arg":["comes"],"which arity)":["."],"which calls":["`Teenager.hey(nil)`…"],"which can":["replace","has","be","be","be","be"],"which cannot":["be","be"],"which captures":["a"],"which case":["the"],"which caused":["me"],"which characters":["define"],"which checks":["if"],"which confused":["me"],"which could":["be","be","have","lead"],"which created":["fuzziness"],"which defines":["the","the"],"which degrades":["readability."],"which do":["you"],"which does":["it.","the"],"which doesn't":["vary"],"which elements":["pass"],"which equally":["well"],"which especially":["with"],"which evaluates":["to"],"which extracts":["the"],"which feels":["like","the"],"which form":["of"],"which function":["you","is"],"which functions":["to"],"which gets":["called","called"],"which got":["the"],"which happens":["to"],"which has":["both","not","total"],"which helps":["with"],"which if":["I"],"which immediately":["returns"],"which implementations":["of","it"],"which inserts":["null"],"which involves":["prepending","prepending"],"which is":["not","part","more","solves","why","a","not","not","certainly","nice.","more","great.","more","a","far","entirely","when","ok,","a","annoying.","a","`all_caps?`.","rather","perhaps","why","really","a","the","not","where","(zero","why","good.","to","good.","to","important","unnecessary","somewhat","to","easy","about","shorthand","to","to"],"which isn't":["needed"],"which items":["to"],"which iteration":["is"],"which just":["happens"],"which lets":["you"],"which made":["me","the"],"which makes":["it","the","me","them","it"],"which may":["not"],"which means":["O(n)"],"which might":["be","provide","not","be"],"which names":["map"],"which numbers":["(typespecs"],"which one":["I","is","reads","it","is","is","do","is"],"which only":["gets","gets","gets","gets","gets"],"which param":["was"],"which reads":["better"],"which returns":["non","a","true","you"],"which seems":["to","quite","a"],"which should":["fit","never"],"which shouldn't":["matter"],"which side":["which"],"which slows":["down"],"which specific":["case"],"which specify":["decisions"],"which takes":["one","the"],"which the":["old","guard","second"],"which they":["are"],"which uses":["`Regex.scan`,"],"which very":["slightly"],"which was":["not"],"which way":["that"],"which won't":["be"],"which works":["and"],"which would":["perform","skip","produce","make","allow","allow","be","end","otherwise"],"which you":["can","could","could","can","don’t"],"while \u003c\u003c\u003e\u003e":["works"],"while `Dict.merge`":["is"],"while `List.first`":["would"],"while `case":["{1,"],"while `characters_used_in`":["is"],"while adding":["a"],"while ago":["the"],"while being":["descriptive?"],"while cond":["is"],"while deciding":["if"],"while doing":["it,","it"],"while fast,":["is"],"while following":["your"],"while it":["runs."],"while longer,":["from"],"while making":["emerging"],"while not":["sacrificing"],"while playing":["around"],"while reducing":["see","the"],"while refactoring":["the"],"while retaining":["non-format"],"while since":["I've"],"while still":["keeping","being"],"while the":["\"idiomatic\"","bodies","arabic"],"while they":["would"],"while this":["would"],"while to":["figure","work","figure","get"],"while trying":["to","detail"],"while using":["recursion"],"while without":["it's","it's","it's","it's","it's"],"while you're":["at"],"while your":["new"],"while, but":["I"],"whirl, thanks":[":)"],"whitespace --":["i"],"whitespace and":["then"],"whitespace as":["silent."],"whitespace ignored":["-\u003e"],"whitespace lines":["of"],"whitespace occurrence":["with"],"whitespace other":["than"],"whitespace statements.":["This"],"whitespace to":["line","be"],"whitespace, as":["well"],"whitespace, not":["sure"],"whitespace, which":["is"],"whitespace-only string?":["E.g.,"],"whitespace. So":["you"],"whitespace. That":["would"],"whitespace? E.g.,":["`\""],"who does":["a"],"who doesn't":["know"],"who have":["finished"],"who is":["not"],"who look":["at"],"who made":["a"],"who submitted":["a"],"who's the":["star"],"whole Erlang":["ecosystem"],"whole HashDict":["documentation"],"whole Regex":["altogether"],"whole `fn":["-&gt;"],"whole abbreviated":["words,"],"whole collection":["and"],"whole expressions,":["not"],"whole functional":["and"],"whole list":["of","of"],"whole list,":["every"],"whole looks":["pretty","good.","good.","like"],"whole mess":["of","twice"],"whole naming":["question"],"whole new":["single","way","entity"],"whole reduce":["system"],"whole roster":["once,"],"whole string":["once","before","the"],"whole thing":["into","is","on","in"],"whole thing.":["My"],"whole thing?":["Interesting..."],"whole this":["looks","looks","looks"],"whole though":["your"],"whole word":["names,"],"whole your":["code"],"whole, it":["might"],"whose goal":["is"],"whose name":["describe"],"whose only":["purpose"],"whose purpose":["can"],"why @jannie":["is"],"why I":["didn't","decided","should","thought","prefer","chose","love","switched","went","didn't","had","ended","wrote","was","didn't","don't","did","didn't","went","think","didn't","think","tried","went","didn't"],"why I'm":["writing"],"why `Enum`":["functions"],"why `downcase`":["doesn't"],"why `foldr`?":["It's"],"why `is_anagram`":["should"],"why are":["you","you"],"why but":["I"],"why did":["you"],"why have":["a"],"why i":["did"],"why it":["should","wasn't","feels"],"why it's":["confusing","%r"],"why not":["do","make","just","put","factor","reuse","try","`if","write"],"why or":["how"],"why pattern":["matching","matching"],"why prefix":["your"],"why recursive":["algorithms"],"why should":["I"],"why standard":["libraries"],"why that":["works"],"why the":["explicit","phone"],"why there's":["a"],"why they":["work,"],"why this":["would","is?"],"why thought":["I"],"why were":["here!"],"why would":["I"],"why you":["use","use","went","prepend","wrapped","used","do","chose","use","need","do","don't","included"],"why you'd":["want","stick"],"why you're":["using","only"],"why you've":["decided"],"why your":["simplification"],"why, but":["in","somehow"],"why, if":["the"],"why. That":["can't"],"why... maybe":["it's"],"why? Because":["it"],"wide so":["shorter"],"wide variety":["of"],"width, but":["I'm"],"wiki about":["memoization:"],"will actually":["be"],"will add":["parentheses!","another","another"],"will adjust":["everything!"],"will aide":["in"],"will also":["make"],"will always":["be"],"will aromatically":["get"],"will basically":["give"],"will be":["used","never","honest,","flagged","required","even","a","hunting","evaluated","quite","broken","eaten","a","traversed","to","fast","an","my","gone","thrown","as","able","able","called","easy"],"will be,":["the"],"will break":["if"],"will cause":["a"],"will change":["to"],"will change,":["because"],"will check":["it"],"will consistently":["disappoint"],"will consume":["much"],"will continue":["to"],"will convert":["the"],"will cover":["the"],"will decide":["which"],"will definitely":["look"],"will do":["just","just","the","the"],"will do.":["The"],"will efficiently":["concatenate"],"will eventually":["run"],"will fail":["to","in","on"],"will first":["find"],"will fix":["them"],"will get":["really","merged"],"will give":["a","it","the"],"will have":["to","code","more","another","to","the"],"will help":["improve","you","simplify","with","to"],"will hopefully":["make"],"will ignore":["any"],"will include":["that"],"will investigate":["a"],"will keep":["thinking."],"will lead":["to"],"will leave":["you"],"will let":["you","your"],"will look":["into","the","into/fix."],"will love":["`|\u003e`."],"will make":["the","things","that","those"],"will match":["silence","a"],"will mean":["the"],"will mention":["is"],"will miss":["use"],"will more":["quickly"],"will need":["to"],"will not":["return","cause"],"will notice":["that"],"will only":["succeed","match","match","sort"],"will pass":["all","the"],"will raise":["earlier"],"will recognise":["the"],"will rename":["the"],"will return":["a","true","true","bad"],"will revise":["to"],"will shrink":["as"],"will simply":["throw","throw","throw","throw","throw"],"will start":["failing","tailoring"],"will stay":["with"],"will still":["throw","receive","try","sort","return"],"will submit":["a","another"],"will switch":["those"],"will take":["a","100%","twice","0","1","twice","0","1"],"will teach":["me"],"will tell":["you."],"will thank":["you"],"will think":["on"],"will throw":["an"],"will trust":["you"],"will try":["again","to","it","it!","to"],"will try,":["the"],"will understand":["what"],"will unfortunately":["call"],"will update":["my"],"will use":["the","binaries,"],"will usually":["be"],"will work":["well","to","incorrectly","correctly","on","on","fine"],"willing to":["elaborate","share","bet","give"],"win for":["me."],"win! Using":["my"],"win, since":["there's"],"window of":["exercism"],"wise I'd":["actually"],"wise to":["use"],"wise, since":["it's"],"wish I":["could","could"],"wish I'd":["thought"],"wish there":["was"],"wished I":["could"],"wit your":["suggestions"],"with \"\".":["I'm"],"with \"&amp;1":["+"],"with \"-\",":["such"],"with \"?\"":["already?","already?","which"],"with \"Woah,":["chill","chill"],"with \"_uselessstuff\"":["???"],"with \"default\"":["or"],"with \"else\"":["in"],"with \"is\"":["like"],"with \"silence?(param)\"":["(the"],"with %r/\\p{L}/":["(any"],"with &gt;":["in"],"with 'Enum`.":["It's"],"with 1":["or"],"with 1,":["so"],"with 2":["filters.","arguments)."],"with 2-space":["indentation,"],"with 4,":["400"],"with :math.pow?":["That"],"with \u003ccode\u003e&1":["+"],"with \u003ccode\u003e?\u003c/code\u003e":["and"],"with @daryl.":["You"],"with @fatima,":["single"],"with @franco!":["Not"],"with @katherine":["about"],"with @magali":["(both"],"with @rowan.":["```&(&1"],"with @tabitha":["--"],"with C":["you"],"with Conway's":["Game"],"with Elixir":["patterns","means","is","so","code?"],"with Elixir's":["partial"],"with Elixir.":["Though,","Went","If","Hope"],"with Enum":["before"],"with Enum,":["which"],"with Enum.":["But"],"with Enum/Stream.":["The"],"with Erlang":["R16B01","code,"],"with HashDict":["'s"],"with Jose":["Valim"],"with José":["Valim"],"with List.foldl":[":-)"],"with OTP,":["but"],"with Process.whereis":["in"],"with RegExp":["was"],"with Ruby.":["As"],"with Stream.unfold":["(I"],"with String":["functions,","tools."],"with String?":["You"],"with TCO":["and"],"with UTF-8":["encoded"],"with Unicode":["general"],"with Unicode.":["I've"],"with [":["head"],"with [{65,":["0}]`."],"with `\"\"`.":["For"],"with `\"#{...}\"`":["string"],"with `\"hello":["#{code}\"`?"],"with `&(&1+&2)`.":["Oh"],"with `&amp;add_or_increment/2'.":["i.e.,"],"with `&{&1,":[":a}`,"],"with `(&amp;1":["=="],"with `**":["(BadArityError)"],"with `:lists.sort":["String.codepoints"],"with `@eladio`":["so"],"with `@judd`,":["but"],"with `Enum.all?`":["achieve","and"],"with `Enum.map`.":["Also,"],"with `Enum.reduce`":["instead","you"],"with `Enum.sort`":["'cause"],"with `Enum`":["there","or"],"with `Inspect.Algebra`":["and"],"with `List.first`":["you'd"],"with `List.flatten`":["at"],"with `Regex.scan`,":["I"],"with `Stream`.":["The"],"with `String.Unicode`":["being"],"with `String.ends_with?`":["as","simply","and"],"with `String.ends_with?`?":["I"],"with `String.replace`":["and"],"with `String.strip`":["and"],"with `[\\p{L}-]+`":["(letters"],"with `[_|t]":["="],"with `\\w+`,":["it"],"with `\\w`":["is","is"],"with ```":["\"_whatever\""],"with ```?```":["in"],"with `alias`":["if"],"with `asking?`":["and"],"with `b_len`":["elements"],"with `base`.":["While"],"with `binary_to_list`":["returning"],"with `codepoints`":["but"],"with `concat`":["is","is"],"with `concat`,":["and"],"with `concat`.":["It's"],"with `cond`":["because","and"],"with `contains_all_chars?`":["you"],"with `count`":["in"],"with `defmodule`":["code"],"with `defp`":["if","instead"],"with `downcase`,":["then"],"with `iex&gt;`":["will"],"with `interpret`,":["which"],"with `is_`.":["I"],"with `keep([1,2,3,4],":["fn"],"with `keep`":["as"],"with `return":["false"],"with `something":["="],"with `split`,":["but"],"with `true`":["as","and"],"with `verse`":["(when"],"with `x":["!="],"with `year`":["as"],"with `yelling`":["and"],"with `|\u003e`":["as","pipelines."],"with a":["(imo)","separate","`_`","#capitalize","guard","quard","different","syntax","separate","way","certain","docstring","list","couple","monospaced","number","case","case.","`case","`case`.","doctest","question","question","descriptive","constraint","major","question","`?`.","`cond`.","clear","few","better","more","better","positive","negative","German","question",":otherwise.","name","name","custom","lot","couple","significant","function","question","good","cohesive,","single","`true`","`true`","similar","`hey`","single","code","bit_size","concurrent","German","non-ASCII","question","regex?","`Beer.Verse`","word","lesser","non-English","language","lot","regex","word","range.","higher","complexity","list","HashDict","function.","?","side","local","full","clear","keyword","version","nil","large","`Regex.scan`","question","`@keyshawn`","much","hyphen","custom,","solution","lot","lot","backslash,","good","question","conditional","lot","good","trailing","certain","single","lot","single","way","lot"],"with absolutely":["new"],"with adding":["a","in"],"with adjacent":["capital"],"with all":["uppercase","your","of","kinds","kinds","capital","other","kinds"],"with alternatives":["and"],"with an":["earlier","underscore?","empty","improved","empty","underscore,","empty","eye","individual","`Enum.filter`","option","`Enum`","all","entry","or:","underscore","empty"],"with and":["it's","without"],"with anonymous":["functions"],"with another":["type","design","one","string."],"with any":["type","non-English","enumerable,","letters,"],"with anything":["better","provided","that"],"with appropriately":["solving"],"with arbitrary":["input?"],"with argument":["in"],"with arguments":["not"],"with attributes":["test"],"with attributes\"":["test"],"with being":["`Dict.update(hash,"],"with both":["of"],"with character":["that","integrals"],"with clear":["itself"],"with clearly":["named"],"with code":["like"],"with codepoint":["\u003c"],"with comments":["on"],"with cond":["than"],"with copy":["and"],"with custom":["functions."],"with dates":["enough"],"with default":["values","arguments"],"with descriptive":["names?"],"with determining":["if","if"],"with different":["guards,","arities","numbers"],"with direct":["module"],"with documentation.":["It"],"with doing":["the"],"with dynamically":["generated"],"with each":["other."],"with efficiency":["improvements"],"with either":["guard"],"with elixir":["yet,","only","\u003ccode\u003ev0.10.0\u003c/code\u003e"],"with elixir,":["so","so"],"with empty":["string","string.","strings.","words?"],"with empty?":["as"],"with enumerables":["(collections),"],"with examples":["from"],"with examples.":["I"],"with exercism":["by"],"with explicit":["arguments,","recursion","function","inline","recursion","values."],"with first":["match"],"with flattening":["the"],"with function":["guards","guards"],"with function/method":["overloading,"],"with functional":["programming","programming"],"with functions":["and"],"with getting":["the"],"with guard":["clauses?","clauses","clauses.","clauses."],"with guards":["will","but","instead."],"with guards,":["or","but","etc?"],"with hardcoded":["range"],"with having":["it"],"with helpful":["descriptive"],"with how":["to","this","elixir's","I","many","you","you"],"with hypens":["and"],"with idiomatic":["Elixir"],"with implicit":["return"],"with imports.":["Not"],"with in":["this"],"with intention":["revealing","revealing"],"with intention-revealing":["names?","names","names?","names,","names?","names?","names.","names."],"with interpret,":["which"],"with iolist_to_binary.":["I'm"],"with is.":["So,"],"with is_":["than"],"with is_binary/1":["on"],"with it":["really,","while","that","for","being","(makes","a","but"],"with it,":["so:","as"],"with iteration":["#1)."],"with its":["small","arity","API."],"with just":["returning","one","the","two","`f`","a"],"with key":["`nil`"],"with keyword":["syntax:"],"with large":["lists."],"with leading":["and"],"with length":["of"],"with less":["of"],"with list":["comprehensions"],"with lists":["and"],"with lists.":["`hd/1`"],"with macro's":["is:"],"with making":["intent"],"with map_join.":["The"],"with marksim":["that"],"with message":["=="],"with methods":["such","that","such"],"with mine":["is"],"with minimal":["duplication"],"with missing":["parenthesis"],"with more":["general","aggressive"],"with multiple":["implementations,","expressions"],"with my":["brain","brain.","`_count`","lack","original,","solution,","standard"],"with myself":["when"],"with names":["like"],"with names\",":["but"],"with naming":["nevertheless."],"with naming,":["but"],"with nested":["`if`"],"with newer":["versions"],"with newline_appender.":["It"],"with newlines?":["(I"],"with nil":["as"],"with nil.":["I","That"],"with nils":["(compare"],"with no":["luck.","side-effects","side","exclamation","body"],"with non-English":["words"],"with non-alpha":["characters."],"with non-alphabetic":["statements","questions"],"with not":["doing","wanting"],"with one":["much"],"with one.":["Crazy,"],"with only":["whitespace","one"],"with other":["commenter","datatypes.","submissions"],"with parallel":["stuff,"],"with parens":["in","from"],"with parentheses":["and","around","is"],"with pattern":["matching.","matching","matching","matching","matching?","matching.","matching","matching","matching,","matching","matching","matching.","matching"],"with pipeline":["operator("],"with pound-signs":["only"],"with predicate":["functions."],"with private":["functions."],"with processes":[":)"],"with protocols,":["or"],"with public":["methods?"],"with punctuation":["within"],"with purely":["pattern"],"with putting":["the"],"with question":["mark"],"with readability":["or","and"],"with reading":["`zip`"],"with really":["small"],"with records":["and"],"with recursion":["or","or"],"with recursion,":["so"],"with reduce,":["and"],"with reduce.":["Fixed"],"with regards":["to","to"],"with regexes":["(match"],"with ruby,":["erlang,"],"with semantic":["names?"],"with sets.":["Unfortunately"],"with short":["meaningless"],"with shortcuts":["for"],"with side":["effects,"],"with single":["condition?","quotes"],"with single-line":["comments"],"with some":["effort.","pattern","specific","changes"],"with something":["like","like","like","like","akin"],"with spaces":["in","you"],"with spacing":["when"],"with spec":["and"],"with string":["interpolation"],"with strings":["in","for","due"],"with strings.":["And"],"with structural":["compare"],"with stuff.":["I"],"with tail":["recursion.","recursion","recursion"],"with ten":["0s"],"with tested":["docs."],"with tests":["that"],"with that":["implementation.","change.","doesn't","check","in","solution.","change.","change","change","in","in",":-)","you","extra","version","test"],"with that!":["(hint"],"with that,":["and","this","that's"],"with that.":["Ideally"],"with the":["specific","```?```","least","others.","larger","`@berenice`","order","is_","gem","perfectly","same","first","stdlib","\"|\u003e\"","\"?\",","need","language","`@nona`","version","typo","short","`|&gt;`","duplication","array","current","`if","intent","default","`Enum.filter`","?.","|&gt;","example","hints","extraction.","\u003ccode\u003erespond\u003c/code\u003e","```&amp;```","anonymous","case-insensitive","naming","method","name","pipeline","one-liner:","named","giant","fact,","regex","necessary","transform","latter.","pipeline","second","normalize","naming","empty","same","function","number.","number","public","\u003ccode\u003eHasDict.update/4\u003c/code\u003e","list","function","pipeline","final","word","pipe","hyphen","code","shape","count","duplication","character","multiple","Elixir","chill","partition","Elixir","solution","guarded","same","very","regexes,","limited","same","pattern-matching","button","same","method","outer","accumulator","_sing","readability.","extra","HashDict;","**word_count**","sanity","`flat_map`","idea","*meaning*","increasing","range.","teenth","current","recursion","docs","exercism","example.","compile","technique","module","range,","underlying","language","`&`","`Dict`","rest","naming","updated","basics.","capability","current","score","`case`","current","order","solution","`valid_number`","least","left","right","left","right","domain","multiple","music","goal"],"with their":["original","module"],"with them":["uncommented.."],"with them.":["I'll"],"with these":["code;"],"with this":["solution.","is","explanation,","code","code","cond","and","symbol.","because","one.","to","one,","one.","solution","one...","I","solution.","exercise,","one","one","exercise","stuff."],"with this,":["which","I","but","but"],"with this.":["The"],"with those":["yet.","changes.","integers."],"with to_char_list":["as"],"with to_char_list.":["I'm"],"with trivial":["bodies"],"with true,":["people"],"with trying":["to"],"with two":["clauses.","codepoints).","cases","clauses,","fields).","separate"],"with using":["\"_\"","`Enum`","`Regex.scan`","Dict.update/4,","if","`reduce`"],"with variables":["s,","that"],"with vim":["&"],"with what":["I","you"],"with whether":["you"],"with whitespace":["statements."],"with with":["`Stream`."],"with word":["keys"],"with words":["separated"],"with writing":["`String.split(phase,"],"with yortz.":["Use"],"with you":["regarding","that","and","about","on","that"],"with your":["first","suggestion!","points.","first","use","reasoning","tips!","comments","suggestion.","style","exceptions,","note","`HashDict`","work"],"with zeros,":["you"],"with, really,":["but"],"with, say,":["cyrillic"],"with, so":["anything","unicode-awareness"],"with. I":["worked"],"within #match,":["but"],"within Teenager":["(rather"],"within `def`,":["so"],"within `match`":["while"],"within a":["`split`,","`foldl`).","method."],"within each":["function"],"within sentences.":["The"],"within the":["`HashDict.update`","method","`cond`."],"without &(),":["but"],"without GenServer":["in"],"without OTP":["to"],"without String.replace":["at"],"without `append`":["having"],"without a":["regex","&","clear","tail","counting"],"without ability":["to"],"without affecting":["`hey`."],"without and":["left"],"without any":["`Enum`","regexes."],"without append":["we"],"without calls":["to"],"without change":["then"],"without changing":["the"],"without cleaning":["up"],"without compromising":["future"],"without conditions,":["but"],"without copying":["from"],"without direct":["comparison?"],"without doing":["what","that"],"without downcasing":["each"],"without empty":["strings"],"without expanding":["the"],"without explicitly":["converting"],"without fearing":["that"],"without getting":["too"],"without going":["through"],"without guard":["clauses"],"without having":["to","a","to","to","to","to","to","to"],"without is":["and"],"without it's":["large","large","large","large","large"],"without it,":["but"],"without it?":["(I'm"],"without just":["writing"],"without looking":["at"],"without making":["it"],"without me":["really"],"without my":["computer"],"without nesting":["the"],"without parentheses,":["but"],"without question":["mark"],"without regexes":["and"],"without ruining":["its"],"without running":["the"],"without sacrificing":["too","much","readability?","too","too","too","at","too","readability","readability"],"without the":["is_)","\"is_\"","commented","`amp;`.","module","qualified","tuple","&amp;","need","flatten.","module","code.","`is_`","parens,","recursion","flatten","escape","regex?","__info__"],"without them":["using","the","(e.g."],"without thinking":["(in"],"without this":["inner"],"without tons":["of"],"without too":["much"],"without transforming":["an"],"without using":["regex?","`String.replace`,","both","a","a","explicit","reverse"],"without whitespace,":["which"],"without, and":["breaking"],"won't be":["obvious","tail","reused","a","able"],"won't blow":["up,","everything"],"won't bother":["with"],"won't change":["between"],"won't handle":["other"],"won't have":["to","to","to"],"won't let":["me"],"won't match":["any"],"won't miss":["that"],"won't need":["to"],"won't pass":["the"],"won't pass;":["checking"],"won't show":["warnings"],"won't speak":["against"],"won't stop":["approval."],"won't work":["for"],"won't work,":["so"],"won't work.":["`&&`"],"wonder a":["bit"],"wonder how":["would","things"],"wonder if":["we're","that's","I","anyone","there's","we","using","the"],"wonder when":["it's"],"wonder whether":["a","it"],"wonder why":["the","you"],"wonder, however,":["if"],"wondered if":["it"],"wonderful how":["succinct"],"wonderfully expressive.":["However,"],"wondering about":["pattern","the"],"wondering again":["if"],"wondering if":["there","there's","there","there","it's","it","you","some"],"wondering what":["the"],"wondering why":["you're"],"wondering why,":["if"],"wondering, is":["it"],"wont get":["the"],"wont matter?":["`quiet?`"],"word !=":["candidate"],"word \"idiomatic\"":["gets"],"word (before":["normalizing)"],"word (ruby":["version"],"word -\u003e":["word"],"word ==":["String.upcase","\"\""],"word I":["was"],"word ```":["in"],"word a":["minimum"],"word and":["sees","handles","the","`-`"],"word array":["is"],"word as":["the"],"word but":["it"],"word by":["the"],"word char":["but"],"word character":["but","but","even","but"],"word characters":["you","but"],"word characters),":["rather"],"word characters.":["\"-\""],"word chars":["according"],"word comparison":["function"],"word contains":["punctuation"],"word count":["exercise.","exercise"],"word counter":["would"],"word criteria":["down"],"word equivalence":["check,"],"word every":["time"],"word first":["and"],"word for":["every"],"word holds":["enough"],"word in":["an","O(n)","`chars/1`","`are_not_identical?`","it","the"],"word is":["used","compute","essential","only","a"],"word just":["once"],"word keys":["and"],"word like":["\"für\"","\"kleuren-tv\"","\"für\"","\"für\"?","\"für\"","\"für\"","\"für\"","\"für\""],"word list":["--","over","it","it"],"word list.":["So"],"word more":["than"],"word names,":["exactly"],"word normalize":["first"],"word once":["while","and","without","instead","instead"],"word once,":["but","then"],"word once.":[";)"],"word out":["of,"],"word passed":["into"],"word rather":["than"],"word return":["the"],"word to":["word"],"word was":["the"],"word will":["be"],"word within":["#match,"],"word without":["downcasing"],"word |&gt;":["String.codepoints","charset","String.downcase","String.downcase`","String.downcase`"],"word\" to":["pattern"],"word), do":["true`,"],"word), do:":["true`"],"word)` as":["your"],"word)` instead":["of"],"word)`. Let":["me"],"word, \"!\")":["and"],"word, \"!\").":["If"],"word, &1)":[")",")",")",")"],"word, &amp;(&amp;1":["+"],"word, 1)`":["returns"],"word, 1,":["&1+1)`","&amp;1","&1","&amp;1","fn(c)","&1","&amp;1","&Words.inc/1)","&(&1+1))","&(&1"],"word, HashDict.update(acc,":["String.downcase(word),"],"word, I":["guess"],"word, dict":["-\u003e"],"word, list":["do"],"word, possibly":["abbreviated"],"word, tally":["-\u003e"],"word, that":["is"],"word-count back":["up"],"word-count_test.exs:33: WordsTest.\"test":["normalize"],"word. Do":["you"],"word. If":["you"],"word. Maintains":["algorithm"],"word. That":["would"],"word1), do:":["false"],"word2), do:":["sort_letters(&amp;1)"],"word? Is":["`co-operative`"],"word_a !=":["word_b"],"word_count_test.exs:38: WordsTest.\"test":["normalize"],"word` and":["`(String.ends_with?"],"word` because":["you'll"],"word`) is":["true"],"wording is":["one"],"words 100":["times."],"words =":["\"one","%r{\\w+}"],"words `cond`":["is"],"words and":["then","also","then"],"words are":["checked","anagrams,","anagrams","anagrams","the","anagrams"],"words back":["with"],"words by":["Regex.scan"],"words count,":["and"],"words don't":["contain"],"words for":["every"],"words from":["a","human-written"],"words in":["`count`","the","their","non-Latin","the"],"words instead":["for","of","of"],"words like":["\"für\"","\"usually\"","co-operative)"],"words separated":["by"],"words strophe,":["antistrophe,"],"words that":["doesn't","have","are","contain"],"words unlike":["with"],"words using":["`Dict.update`"],"words was":["considered"],"words were":["in"],"words when":["I"],"words where":["the"],"words which":["just"],"words with":["the","a","hyphens).","\"-\","],"words without":["empty"],"words would":["be"],"words you":["can","can","do","find","do","never"],"words |\u003e":["normalize"],"words\" -":["is"],"words\" approach,":["and"],"words\" fits":["quite"],"words) into":["a"],"words, HashDict.new,":["fn..."],"words, `Dict.get`":["instead"],"words, and":["turn","(2)"],"words, at":["least"],"words, count":["the"],"words, normalized_word":["=="],"words, not":["individual"],"words, possibly":["multiple"],"words, saves":["a"],"words, so":["I"],"words, that":["is"],"words, then":["I","I"],"words, what":["does"],"words, which":["the"],"words, without":["cleaning"],"words, you":["don't"],"words. Also,":["check"],"words. Any":["thoughts"],"words.\" I":["also"],"words], dict)":["do"],"wordy I'd":["totally"],"work (different":["parentheses"],"work (hence":["the"],"work (if":["that"],"work (the":["entire","entire"],"work -":["a","a"],"work a":["lot"],"work and":["I'm"],"work as":["`String.ends_with?`.","a","well:"],"work at":["the","the"],"work badly":["for"],"work because":["filter","of","you","the"],"work but":["it"],"work by":["having","joining"],"work correctly":["then."],"work directly":["with"],"work fine":["here,","between","and","for"],"work first":["of"],"work for":["you.","this","any","you.","doing","the","foreign","the","words","all","me."],"work in":["0.10.1)","this","elixir.","the","a"],"work incorrectly":["with"],"work into":["that"],"work just":["fine."],"work left-to-right,":["which"],"work like":["this?"],"work nicely.":["I"],"work on":["that","opposite","lists).","lists","just","it","any","ranges?","ranges,","anything","some","data","a","\"bob\""],"work out":["the","how","what","how","what","implementations","how/if","how","a","how","how"],"work piecing":["together"],"work quite":["nicely!"],"work so":["succinctly."],"work than":["you"],"work that":["way?"],"work themselves":["outward"],"work to":["understand","dry"],"work too,":["though."],"work up":["from"],"work well":["for","in","with"],"work with":["a","arbitrary","purely","Ruby.","character","ranges.","lists","your","any","and","the","any","all"],"work without":["them"],"work you":["may","need"],"work! (Though":["if"],"work! I":["don't"],"work! Just":["opening"],"work! Thanks":[":-)"],"work) for":["plain"],"work, If":["you"],"work, and":["what"],"work, but":["I","i"],"work, here's":["the"],"work, just":["that"],"work, no":["need"],"work, so":["your"],"work, you":["have"],"work. A":["few"],"work. AFAIK,":["there's"],"work. Also,":["I've"],"work. But":["I'm"],"work. I":["have","think","submitted","did","am"],"work. Is":["it"],"work. It":["made"],"work. It's":["not"],"work. Since":["the"],"work. Sounds":["like"],"work. Trying":["to"],"work. While":["it"],"work. Why":["doesn't"],"work. Yeah,":["just"],"work. `&&`":["should"],"work. `String#downcase`":["does"],"work... accidentally":["submitted."],"work? If":["so,","a"],"workaday solution":["is"],"workaday, like":["it's"],"worked better":["for"],"worked except":["with"],"worked fine":["for"],"worked just":["fine."],"worked quite":["well."],"worked this":["out"],"worked with":["dates"],"worked. But":["if"],"working alternative.":["I"],"working as":["it"],"working for":["whitespace","languages"],"working hard":["on"],"working like":["this:"],"working on":["a","idiom","OS","after","--","making","lists.","lists.","filter,"],"working out":["how"],"working such":["that"],"working than":["just"],"working through":["[Learn","the"],"working version,":["so"],"working when":["I"],"working with":["it,","that","the","strings"],"working yet":["in"],"working, but":["I"],"working. I":["fired"],"working. Time":["for"],"working. We'll":["see!"],"works and":["is","depends","what"],"works around":["`zip`'s"],"works as":["well,"],"works because":["strings","strings","`foo"],"works better":["with"],"works btw":["because"],"works but":["I"],"works due":["to"],"works equally":["well."],"works fine":["without","to","with","as"],"works fine,":["`?é`"],"works fine.":["Not"],"works for":["me:","`?T`,","all","the","this","any","unicode","a","all"],"works great":["in"],"works in":["this","guards","the"],"works internally":["doesn't"],"works into":["#match."],"works just":["as"],"works like":["that","this"],"works much":["better."],"works on":["the","Elixir","all","`+`","keyword","ranges)."],"works out":["for"],"works out.":["The"],"works perfectly":["well","and"],"works see":["[my"],"works slightly":["differently."],"works through":["the"],"works too":["(and"],"works too.":["Any"],"works very":["recursively"],"works well":["for"],"works well.":[":)"],"works with":["a","all","all","all"],"works without":["calls","explicitly","going"],"works! I":["should"],"works, I":["will"],"works, but":["are","the","I","that","it"],"works, really":["handles"],"works, though":["I"],"works. :)":["Looks"],"works. Erlang":["works"],"works. I":["feel"],"works. I'm":["open"],"works. Is":["there"],"works. It's":["more"],"works. Note":["that"],"works. That":["can"],"works. Would":["love"],"world application":["it"],"world application)":["it"],"world as":["a"],"world at":["some"],"world difference":["though,"],"world in":["the"],"world is":["a"],"world. So":["is"],"world… I":["just"],"worried about":["performance"],"worry about":["filtering","handing"],"worry that":["taking"],"worry, OTP":["is"],"worse because":["most"],"worse than":["using"],"worse. I'm":["thinking"],"worse? What":["if"],"worth a":["new"],"worth adding":["one"],"worth defining":["a"],"worth exploring.":["Regexes"],"worth figuring":["out"],"worth it":["to","to","in","to","keeping"],"worth it,":["though."],"worth it.":["I","The"],"worth more":["than"],"worth noting":["that"],"worth picking.":[":)"],"worth taking":["a"],"worth the":["complexity?"],"worth to":["remember"],"worth trying,":["especially"],"worth, uploaded":["by"],"worthwhile just":["to"],"worthwhile separating":["the"],"worthwhile to":["extract","extract","extract","extract","extract"],"would I":["use","go","do","would"],"would _love_":["feedback."],"would absolutely":["implement"],"would accomplish":["the"],"would actually":["read:"],"would adding":["in"],"would advise":["to"],"would agree.":["I"],"would aid":["readability."],"would allow":["you","you","you","you","me","me"],"would also":["consider","rename","recommend","match","consider","let"],"would appear":["as"],"would appreciate":["it."],"would argue":["that"],"would assume":["somehow","using"],"would attach":["to"],"would barf":["if"],"would basically":["be"],"would be":["an","a","preferable.","mixing","the","more","to","a","appreciated.","a","in,","easy","to","more","implemented","more","for","more","more","more","great.","easier","adding","fine.","better","named","more","immediately","way","a","nice","a","simpler","cleaner","my","more","caught","more","more","more","welcome.","great.","much","good.","with","to","clearer","quite","more","\"silent?\"","worthwhile","good","that","the","clearer","more","an","to","the","more","relevant,","understood","funny.","minor","more","much","about","a","more","incorrect.","left","much","a","better","willing","much","like","a","responsible","useful","a","clearer,","considered","possible","faster","a","surprised","ones","better","best","quite","easier","overly","to","in","unicode","explicit","less","more","horrible","a","clearer","more","implemented","implemented","inverted:","helpful!","best","to","great","easy","most","a","nice","much","`a`).","a","with","the","adding","more","considered","greatly","useful/necessary","something","something","cool","promising","a","counted","move"],"would call":["your"],"would change":["is","is"],"would change.":["Do"],"would choose":["a"],"would come":["back"],"would consider":["breaking","not","a"],"would convey":["what"],"would decrease":["readability."],"would define":["a","multiple"],"would definitely":["make","make","be"],"would defp":["be"],"would depend":["on","on"],"would describe":["statements,"],"would do":["much.","that?","there"],"would encode":["the"],"would end":["up"],"would ever":["be"],"would exist":["because"],"would expect":["`Anagram.match(\"test\","],"would explore":["the"],"would express":["a"],"would fail":["if","if","on","for"],"would feel":["about","more"],"would find":["a","a"],"would fit":["better,","with","in.","with"],"would focus":["on"],"would follow":["crazymykl's"],"would force":["you"],"would gain":["readability"],"would get":["automatically","persisted","called"],"would give":["the"],"would go":["for","with"],"would handle":["strings","that"],"would happen":["if","if","with","with"],"would have":["been","to","been","no","to","to","to","solved","thought","been","thought","thought"],"would help":["make","at","making","readability?","but","here.","with","the"],"would help,":["but"],"would help.":["It","All"],"would implement":["with"],"would improve":["readability.","already","the","the","the"],"would in":["many"],"would incorrectly":["not"],"would indeed":["be"],"would it":["be","work"],"would iterate":["in."],"would just":["like","be","get","try","move"],"would keep":["in"],"would know":["what"],"would leave":["it"],"would let":["you"],"would like":["to","to","to"],"would look":["in","like","really","with","like:"],"would lose":["that"],"would love":["to","more","to","pull","a","to","to"],"would make":["it","sure","the","perfect","your","this","it","it","the","it","it","more","anything","things","this","this","your","sense","sense","sense","one","the","the","it","the","the","the","that","the","it","it","cleanup","the","better","the","the"],"would match":["whitespace","the","on","if","if"],"would maybe":["think","think","consider","recommend"],"would mean":["the"],"would mention":["that"],"would more":["semantically","interesting"],"would need":["to","(if","to"],"would no":["longer"],"would normally":["be"],"would not":["give","only","be","cause","pad,","be","pass"],"would only":["'understand'","add"],"would otherwise":["be"],"would pass":["eventually,"],"would perform":["the"],"would personally":["use"],"would prefer":["names","that","to"],"would present":["no"],"would probably":["move","recommend","go","want","go","go","put","work","consider","choose","need"],"would produce":["the"],"would pull":["the"],"would put":["a","me"],"would read":["a","more","better"],"would really":["be"],"would recommend":["pattern"],"would replace":["the"],"would require":["injecting","appending"],"would result":["in"],"would return":["`{\"\"","a","a","`nil`.","`nil`"],"would reverse":["and"],"would rid":["you"],"would satisfy":["these"],"would save":["you"],"would say":["(https://twitter.com/exercism_io/status/360780304862031874)","yes.","I"],"would saying":["`&mutation?/2`"],"would simplify":["the","`list`,"],"would skip":["that"],"would stick":["with","with"],"would still":["have","have","be","need","be"],"would suggest":["to","is","is","is"],"would take":["approximately","1","approximately","1"],"would tend":["to"],"would that":["be"],"would the":["strand"],"would think":["there"],"would this":["code","work","implementation","be"],"would those":["methods"],"would totally":["go"],"would use":["the","more","a"],"would want":["to,"],"would work":["fine","nicely.","on","in","fine"],"would work!":["Thanks"],"would work.":["Also,"],"would write":["this:"],"would you":["rather","rather","propose?","give","agree?","suggest","think","need","have","need","think","recommend","declaratively","think","think","add","expand","think","think","like","think","make","think","recommend"],"would't use":["it"],"wouldn't `List.zip`":["combined"],"wouldn't be":["as"],"wouldn't expect":["this"],"wouldn't fault":["you."],"wouldn't give":["names"],"wouldn't have":["to","to","to","to--that","expected","thought","made","to"],"wouldn't hurt":["and"],"wouldn't it":["make","be"],"wouldn't make":["`is_uppercase`","any"],"wouldn't match":["\"für\""],"wouldn't necessarily":["improve"],"wouldn't need":["to"],"wouldn't put":["a"],"wouldn't really":["need"],"wouldn't require":["the"],"wouldn't say":["that's","it's"],"wouldn't those":["numbers"],"wouldn't underscore":["'words'"],"wouldn't use":["`is_`","`Regex.replace`"],"wouldn't want":["that"],"wouldn't work":["because"],"wow, the":["&amp;"],"wrap that":["into"],"wrap the":["conditions","`Regex.scan`","call","pipeline","invocation","original","logic"],"wrap/unwrap idea.":["I"],"wrap/unwrap implementation.":["I'll"],"wrap: 1,":["unwrap:"],"wrapped in":["so","well-named"],"wrapped it":["in"],"wrapped my":["head"],"wrapped the":["atoms"],"wrapped weird.":["Imagine"],"wrapper Dict.update":["instead"],"wrapper that":["contributes"],"wrapper to":["negate"],"wrapper...&amp;1 +":["1"],"wrappers for":["another"],"wrapping from":["\"no"],"wrapping it":["in","into"],"wrapping that":["whole"],"wrightling means":["that"],"write I":["write"],"write Ruby":["code"],"write `&(&1+&2)`":["though."],"write `&(&1+1)`":["when"],"write `&String.to_char_list/1`":["instead"],"write `&do_to_rna(&1)`":["(extra"],"write `Enum.count(&equal_pairs?(&1))`":["(or"],"write `Enum.flat_map(input,":["&invert_index/1)"],"write `Enum.map_join([1,2,3],":["\",\","],"write `String.last(text)`.":["That"],"write `String.length(s)":["==","=="],"write `String.strip(speech)":["=="],"write `[\\P{L}]`":["(`\\P{x}`"],"write `[function.(x)]":["++"],"write `append`":["to"],"write `candidates":["|\u003e"],"write `concat`":["in"],"write `count_words`":["using"],"write `def":["nucleotides`"],"write `def`":["and"],"write `defp":["is_superlist([_|t]"],"write `fn(x)":["-\u003e"],"write `func":["="],"write `silent?`":["using"],"write `{&1,":["0}`"],"write a":["factorial","clear","series","supervisor"],"write about":["it"],"write an":["all_letters_upcase?","anonymous","if,"],"write and":["annoying"],"write code":["like","like"],"write explicitly":["recursive"],"write function":["definitions","definitions"],"write it":["by","is","as","as","more","out"],"write line":["13","2"],"write map,":["but"],"write my":["own"],"write offset":["as"],"write out":["how","how"],"write simple,":["readable"],"write something":["like","full","like"],"write that":["as","`cond`"],"write the":["code,","same","```sort_word```","chain","test","code","explicit","`count`","`acc_fun`"],"write them":["with"],"write this":["using","instead:","in","in","code","so","without"],"write those":["predicate"],"write yelling":["using"],"write, however,":["behind"],"writer, it":["means"],"writers than":["anything"],"writing C":["code"],"writing `List.foldl`.":["I"],"writing `String.split(phase,":["\""],"writing `f(g(h))`,":["they're"],"writing `fn(value)":["-\u003e"],"writing `foo(bar(baz,":["1))`"],"writing `pretty/1`":["in"],"writing `roman":["\u003c\u003e"],"writing a":["recursive","macro","truly","replacement"],"writing code":["I"],"writing different":["function"],"writing elixir":["that"],"writing expressions":["that"],"writing is":["at."],"writing it":["with","out"],"writing it.":[":)"],"writing macros":["as"],"writing more":["of"],"writing out":["the"],"writing reduce":["I"],"writing similar":["methods"],"writing specs,":["so"],"writing that":["`Stream.unfold`"],"writing the":["filter","code,","tests","`reduce_with_index/3`"],"writing this":["using"],"writing to":["files"],"written (personal":["preference"],"written `&{":["String.downcase(&1),"],"written `Enum.sort`":["(that"],"written `chars":["="],"written `concat`":["is","is"],"written `date_plus_giga_seconds_to":["|\u003e"],"written `if":["func.(head)"],"written a":["crazy","blog","tail"],"written about":["the"],"written as":["`Dict.update(counts_hash,","characters","`&not_same?/1`","`String.ends_with?(text,","`String.last(s)`.","`...","`&normalize_word/1`.","`String.strip(phrase)","just","`Enum.reduce`.","`String.downcase","`String.ends_with(phrase,","`String.starts_with?(a,","`%S\"(\\1)","`s","`:lists.seq(from,","`&{&1,0}`.","`String.ends_with?(s,","as","`Regex.match?(r/^[\\p{Lu}\\P{Ll}]+$/)`","a","`Enum.flat_map`.","an","`&[student|&1]`,","`if","`&{","`&{&1,","`s","`String.ends_with?(input,","`&(&1","`&[&1|&2]`.","`Dict.update(dict,"],"written as:":["`Enum.count(strand,"],"written explicitly":["for"],"written in":["terms","elixir.","the","such"],"written it":["in."],"written less":["code"],"written like":["Ruby","this:","`?a`.","this:"],"written out":["is","is"],"written that":["way,"],"written the":["`is_empty?`"],"written using":["`Enum.map_join`","`Dict.update`.","`Dict.update`."],"written with":["some","parentheses"],"written\". It":["includes"],"written) would":["fail"],"written, so":["I've"],"written. It's":["pretty"],"wrong (was":["in"],"wrong answers.":["Everyone"],"wrong approach.":["Any"],"wrong behavior":["for"],"wrong but":["you"],"wrong by":["any"],"wrong function":["for"],"wrong here":["is"],"wrong in":["the"],"wrong link,":["my"],"wrong place":["for"],"wrong the":["first","first"],"wrong thing":["to"],"wrong to":["do"],"wrong with":["`binary_to_list`","writing","putting","the","multiple","what","using","using","how","this.","it."],"wrong! That's":["what","what"],"wrong), but":["if"],"wrong). That":["only"],"wrong, nothing":["to"],"wrong, though.":["I"],"wrong, which":["is","is","is","is","is"],"wrong. I":["tried"],"wrong. I'm":["counting"],"wrong; using":["the"],"wrongly identified":["as"],"wrote a":["[blog"],"wrote it":["without"],"wrote it,":["that"],"wrote it.":["I"],"wrote my":["anagram"],"wrote one.":["This"],"wrote that":["for","map)"],"wrote that),":["it"],"wrote the":["`segment`","number"],"wrote. I":["took"],"ws }":["inlist"],"wtf with":["the"],"x *":["2"],"x +":["1","1","sum","1"],"x -\u003e":["...","x","x"],"x 5":["multiple."],"x ==":["1,","String.upcase(x)`?"],"x end)":["}"],"x end`":["as"],"x lines":["of"],"x |\u003e":["g`"],"x)` and":["not"],"x)` is":["really"],"x+1 end)`":["to"],"x, acc":["-\u003e"],"x, last:":["y]`."],"y =":["\"C\";"],"y\" as":["being"],"y]`. So":["you"],"ya I'm":["not"],"yeah it":["reads"],"yeah the":["test"],"yeah, I":["like","think","did","would","don't","think"],"yeah, `Enum.to_list`":["and"],"yeah, busted":["on"],"yeah, good":["point.","improvement!"],"yeah, maybe":["I","the"],"yeah, other":["than"],"yeah, refactored":["that"],"yeah, the":["explicit","site"],"yeah, true.":["I"],"yeah, you":["will","are"],"yeah, your":["version"],"year but":["I"],"year to":["you"],"year\" as":["to"],"year, month,":["d","d"],"year-on-planet-relative-to-earth into":["its"],"yearn for":["Ruby's"],"yell or":["not?"],"yelled, etc":["into"],"yelling `input`.":["`is_question?`"],"yelling if":["there"],"yelling in":["Russian"],"yelling means":["a"],"yelling using":["a"],"yelling would":["not"],"yelling, shouting,":["etc.."],"yelling, so":["he"],"yelling. Also,":["I"],"yelling. I":["wasn't"],"yelling? Doesn't":["upcase"],"yelling?, and":["question?"],"yelling?/1 rather":["than"],"yep you":["are"],"yep, you're":["right"],"yes :)":["."],"yes HashDict.update":["(and"],"yes if":["you"],"yes! Awesome.":["That"],"yes, I":["forgot","missed","think"],"yes, but":["no."],"yes, gen_event":["is"],"yes, in":["trying"],"yes, it":["feels"],"yes, of":["course"],"yes, the":["3"],"yes, you":["do","are"],"yes, you're":["right,"],"yes. In":["this"],"yes. Minor":["point,"],"yes. On":["the"],"yes. The":["record","reversed"],"yes. `foo[bar]`":["syntax"],"yet (in":["this"],"yet a":["tiny","clear"],"yet and":["haven't"],"yet because":["there's"],"yet come":["across"],"yet expose":["the"],"yet have":["a"],"yet in":["the"],"yet know":["whether"],"yet not":["grow"],"yet so":["I'll"],"yet to":["seek","hear"],"yet used":["to"],"yet when":["you"],"yet, and":["this"],"yet, but":["it's","that's","I","this"],"yet, it":["makes"],"yet, so":["regex","thanks"],"yet, will":["continue"],"yet, you":["do"],"yet. (Did":["I"],"yet. At":["first"],"yet. But":["the"],"yet. I":["tried","think","see","understand"],"yet. I'm":["not"],"yet. If":["there"],"yet? I":["think"],"yortz. Use":["a"],"you \"change\"":["an"],"you *could*":["do"],"you --":["It"],"you @janessa,":["that"],"you @sven!":["That"],"you DRY":["it"],"you a":["lot","sense","little","list","way","rubyist","very","question?","new"],"you about":["the","`new`"],"you absolutely":["have"],"you accessed":["it,"],"you add":["`@brisa`","```String.strip```","to","adjacent-mine","one","all"],"you added":["documentation!","that."],"you adding":["a"],"you advocated":["for"],"you again":["for"],"you agree":["that","on"],"you all,":["that's"],"you allow":["yourself"],"you already":["know","know","know","knew","knew"],"you already,":["and"],"you also":["could"],"you always":["taking"],"you and":["that","abstracted"],"you anything":["over","in","in"],"you append":["lists"],"you approve":["it?"],"you are":["doing?","doing","using","enjoying","doing","using","adding","executing","talking","thinking?","protecting","not","going","spot","concerned","in","right.","using","doing","passing","not","referring","7","_very_","right.","currently","testing","looking","absolutely","the","exposing","satisfied","right,","looking","right.","still"],"you as":["well."],"you asked":["the"],"you at":["least"],"you avoid":["`cond`","that?","that?","recomputing","that?"],"you aware":["of"],"you be":["more","willing","interested"],"you both":["were"],"you break":["apart","any"],"you broke":["down","everything"],"you build":["functional","it"],"you call":["`String.split`","it","`foo(something,","`sort`"],"you can":["come","use","do","combine","shorten","shorten","use","really","use","take","change","make","remove","remove","completely","shrink","call","simplify","remove","get","visually","pattern","uses","use","treat","solicit","compare","see","read","determine","have","remove","use","use","actually","find","use","pipe","come","get","use","use","do","find.","separate","reuse","get","calculate,","do","use","continue","call","use","end","reduced","include","use","do","just","use","see","use","simply","replace","test","use","privatize","be","replace","use","easily","and","use","use","accomplish","call","reduce","use","call","define","put","see","use","determine","just","expand","write","use","use","simplify","use","give","just","configure","avoid","use.","do.","use","do","write:","use","prevent","see","write","make","use","see","solve","use","also","more","do","pattern","use","use","easily","make","use","use","write","use","do","use","be","first","use","use","comment","say","append","write","go","do","do","see","use","pass","share","write","use","delete","do","come","write","use","write","simply","write","delete","just","use","think"],"you can't":["resubmit","use","do","mix","nest","find","use","comment"],"you can,":["doesn't"],"you can.":["Like"],"you cannot":["use"],"you change":["your","dict"],"you changed":["the"],"you check":["that","for","the"],"you checked":["out","the","out"],"you choose":["`to_char_list!/1`"],"you chose":["not","`HashDict.merge/3`"],"you clean":["up"],"you clearly":["understand"],"you click":["the"],"you collapse":["those?"],"you come":["to"],"you comment":["on"],"you comment,":["I'll"],"you communicate":["that"],"you compared":["the"],"you complete":["the"],"you compute":["the"],"you condensed":["the"],"you consider":["using","extracting","using","renaming","`String.ends_with?`","putting","using","using","using","implementing","using","`\"","higher","using","most","most","List.zip?","using","extracting"],"you considered":["making","separating","dropping","using","separating","extracting","moving","using","moving","using","making","writing","separating","getting","making","Regex#scan","using","using","using","making","breaking","adding","another","extracting","breaking","making","what","`String.ends_with?`?","making"],"you considerer":["hiding"],"you contributed":["to"],"you convert":["back"],"you converting":["the"],"you copy/paste":["it"],"you correctly":["note"],"you could":["do","submit","define","extract","probably","use","make","use","think","drop","simplify","just","pipeline","combine","wrap","use","use","do","simplify","collapse","make","have","at","use","avoid","get","clean","change","use","use","consider:","have","only","simplfy","try","write","have","use","use","just","probably","use","find","use","use","use","use","use?","consider","avoid","extract","sort","make","calculate","find","come","do","simplify","do","use","come","tighten","probably","check","have","have","make","do","make","break","keep","move","write","do","use","ignore","avoid","reduce","do","use","use","take","extract","use","check","use","make","clarify...","use","check","check","checkout","even","use","try","use","define","use","just","refactorice","use","have","use","do","do","change","do","just","fit","also","remove","validate","use","import","remove","use","pass","just","do","consider","extract","use","use","do","something","probably","use","do","traverse","use","normalize","compare","do","change","just","use","downcase","avoid","write","use","use","search","check","take","write","just","make:","also","slightly","improve:","also","express","reorder","consolidate","implement","strip","use","do","do","make:","simplify","alternatively","then","use","scan","try","use","do","use","create","write","get","write","use","cache","also","write:","make","make","pass"],"you count":["each"],"you counting":["unique"],"you create":["an","your","a"],"you decide":["to","to"],"you deciding":["which"],"you declaratively":["describe"],"you declare":["functions"],"you define":["in"],"you delete":["it"],"you deliberately":["export"],"you describe":["is"],"you did":["on","a","here.","something","want","to","it","it","it","most"],"you did,":["as"],"you didn't":["already","already","know","have"],"you disagree,":["you"],"you discouraging":["that"],"you do":["your","not","have","`import","in","it","it","this:","is","that","that,","X?\"","for","without","it","it.","it","`Enum.any?([false])`","have","this","want","this","have","want?","this","when","want.","it","this","want?","want","use","this","want","want.","want?","this","this","see","want?"],"you don't":["need","understand","have","have","need","need","use","need","need","care","actually","actually","really","need","use","have","for","want","want","need","have","need","need","need","use","like?","need","mind,","want","technically","want.","seem","need","need","want","need","need","want,","want.","want.","recognize","introduce","want","need","convert","want","expect","need","want","want","want","want","know","have","want","want","have","really","want","have","want","actually"],"you don´t":["need","need"],"you don’t":["actually"],"you downcase":["and"],"you downcased":["earlier,"],"you edit":["a"],"you effectively":["change"],"you either":["call"],"you elaborate":["a"],"you eliminate":["the"],"you eliminated":["some"],"you end":["up","up","up","up","up","up","up"],"you ensure":["that"],"you ever":["had","feel"],"you exclude":["anything"],"you expand":["that"],"you explain":["your","how","what"],"you explained":["it"],"you explicitly":["export"],"you extract":["the"],"you extracted":["the","some","separate","a"],"you familiar":["with","with","with","with","with","with","with"],"you fed":["it","it"],"you feel":["like","about","about","about","the","that","`blank?`","like"],"you figure":["them"],"you filter":["the","out"],"you find":["this","great","yourself","a","yourself","out","most","an"],"you flatten":["in"],"you fold":["them"],"you for":["your","your","your","taking","your","your","your","your","your","the","it.","your","making","teaching","your","your","your","your","it."],"you forget":["that,"],"you found,":["which"],"you from":["having","having","having"],"you gain":["anything","anything","some"],"you gave":["in","a"],"you get":["to","from","from","to","a","the","with","the","from","a","more","`do_reverse([],","stuck.","to"],"you give":["it","it","an","an","me","`unequal_pairs?`","some","some","me"],"you go":["with","along."],"you good":["idioms"],"you got":["a","last","to","a"],"you group":["them"],"you guarding":["with"],"you had":["thought","to","to","to","to","this:","an","to","in","a"],"you hadn't":["come"],"you handle":["the","a","strings/unicode"],"you happen":["to"],"you happy?\"":["what"],"you have":["a","to","two","is","to","in","to","settled","is","a","an","two","defined","a","in","a","there.","me","to","separated","thoughts","thoughts","plenty","on","a","other","done","to","is","two","a","filter","a","in","a","to","in","to","to","any","a","in","a","a","a","to","multiple","now,","there","ideas","any","any","to","objects.","type","it,","are","to","the","a","any","less","a","used","an","a","an","to","any","a"],"you have,":["but"],"you have.":["If"],"you haven't":["seen","seen","completed"],"you heard":["about"],"you help":["me"],"you helping":["manage"],"you hit":["the"],"you implemented":["a"],"you importing":["downcase,"],"you in":["my"],"you included":["that"],"you initialize":["@cydney"],"you inline":["it,"],"you input":["```''```"],"you insist":["on"],"you intend":["to","to"],"you intended":["to"],"you just":["pass","keep","use","mark","found","felt","have","check"],"you kept":["the"],"you know":["you","of","\u003ccode\u003e","how","about","about","the","that","this...","of","about","that","that","a","how","that","`bottle_count`","about","about","about","there","the","you're","`if`","that","if","when","what","about","about","you","you","you","that"],"you know,":["you","there"],"you learn":["something","about","the"],"you less":["readable?"],"you like":["and","to","reduce","about","this","to","it.","having","a","this","the"],"you like!":[":)"],"you like.":[":)"],"you look":["up","at"],"you looked":["up","at","at","at","at","at"],"you made":["your","the","the"],"you made.":["Thanks"],"you make":["a","it","`count/1`","the","your","further","`count`","the","it"],"you marked":["it"],"you may":["find","feel","find","have","use"],"you maybe":["wants","interested"],"you mean":["the","something","by","something","by","using","by","in","for","using","about","by","to","`\\w+`","like:","just","by","the","just"],"you mean,":["but"],"you mean.":["In"],"you meant,":["@dominique?"],"you memoize":["it,"],"you mention":["adding","it,","it,"],"you mentioned.":["Elixir","I"],"you might":["want","have","find","want","consider","consider","as","consider","be","be","run","expect.","want","expect.","be","want","learn","think.","not","want","be","have","want","consider","consider","want"],"you mind":["to","looking","posting"],"you more.":["If"],"you move":["the"],"you moved":["the","the","the","to","the"],"you much":["about","about"],"you must":["have"],"you my":["solution"],"you need":["the","the","regex","to","a","the","to","this","to","to","Enum.reject;","to","all","the","the","at","to","a","an","to","the","the","to","to","`Set.equals`","to.","the","some","to","to","to"],"you need...":["you"],"you needed":["to","to","to"],"you nest":["functions."],"you never":["see"],"you no":["longer"],"you notice":["such","the"],"you noticed":["that","the"],"you often":["want"],"you on":["that","the"],"you only":["use","strip","need"],"you pass":["to","`\"","in","in","the"],"you paste":["it"],"you pattern":["matched"],"you pipe":["either"],"you planning":["on"],"you play":["with"],"you please":["expand","elaborate?"],"you point":["out,","me"],"you pointed":["out--the"],"you possibly":["pull"],"you potentially":["run"],"you preface":["it"],"you prefer":["to","to","to","about","to"],"you prefer?":["Do"],"you prepend":["`_`","the"],"you probably":["have","want"],"you propose?":["I"],"you pull":["a"],"you pulled":["the","out"],"you put":["the","it,","\u003ccode\u003ecount_fnx\u003c/code\u003e","in","first","`_area_code`"],"you ran":["into"],"you rather":["be","be"],"you read":["this..."],"you really":["need","think","gain","need","need"],"you recommend":["to","for","there?"],"you recompute":["the"],"you reduce":["the"],"you refactor":["that"],"you reference":["the"],"you regarding":["#1,"],"you reminded":["me"],"you remove":["a","the","the","the","characters"],"you repeatedly":["use"],"you replace":["the","the"],"you resolve":["key"],"you return":["a","`true`,"],"you reverse":["the"],"you run":["`count([1,2])`:","`count([1,2])`:","`count([1,2])`:","`count([1,2])`:","`count([1,2])`:"],"you said":["piqued","\"I've","on"],"you said,":["it"],"you said.":["Do"],"you say":["it,","it's"],"you saying":["that"],"you saying,":["that"],"you scan":["for"],"you search":["by"],"you see":["my","exorcism","now.","it,","a"],"you seem":["to","to"],"you seen":["or","`Enum.count/2`?","`Dict.update`?","the","`Regex.scan`?"],"you separate":["your","out"],"you separated":["out"],"you set":["up"],"you should":["try","consider","use","submit","rename","extract","probably","consider","probably","be","add","be","be","ask","be","reach"],"you should\"":["situation."],"you shouldn't":["depend"],"you simplify":["this","by"],"you so":["much!","much","much"],"you specify":["different"],"you split":["the"],"you squint,":["it"],"you started":["out"],"you still":["downcase","downcase","need","think"],"you store":["the","them"],"you struggle":["with"],"you submit":["this"],"you submitted":["a"],"you suggest":["extracting?"],"you suggested":["is"],"you suggested),":["@ayden"],"you suggested,":["a"],"you suggesting":["I"],"you sure":["that","about","all","you"],"you take":["advantage","the","a"],"you talk":["a"],"you tend":["to"],"you that":["the","I","extra","no"],"you that.":["But"],"you the":["ending","anagrams","mechanics","predicates","result","leading","entire"],"you then":["try","immediately","use"],"you think":["restructuring","it's","it","it","about","the","\"is_\"","it's","about","the","about","that","is","for","about","that","`Regex.scan`","`sanitize`","line","\"is_\"","there's","about","of","of","of","the","of","of","of","it","of","you","you","it","of","about","the","about","about","that's","you're","just","if","it","it","it's","is","your","the","is","of","the","you","about","it","there","this","it","about","about","about","about","you","a","that","of","about","about","is","now?","of","of","your"],"you think,":["naming"],"you think.":["Thanks","Thanks"],"you think?":["What","In","Would","If","Between","Kind","I'll","Are","Would"],"you thinking":["wrapping","just"],"you though,":["that's"],"you thought":["about","about","about","about","about","about","about","about","about","it"],"you to":["consider","solve","be","the","define","remove","string","add","use","look","use","a","code","both","only","blend","move","remove","pass","try","greater","the","test","avoid","have"],"you took":["it","a"],"you traverse":["the"],"you tried":["piping","to"],"you try":["that,","to","writing","separate","any","it"],"you trying":["to"],"you understand":["the","what","the"],"you use":["`Enum.reject`","strict","atoms","so","whitespace","a",":","default","pattern","`List.zip/1`","String","is","pattern","`String.downcase`","pattern","so","pipelines","imports","a","a","explicit","List.zip","pattern","Record.new(a:","functions","a","reduce","`Enum.reduce`","a","case","the","the","parentheses"],"you used":["`Regex.scan`","that","the","`nucleotide`","there","a","`Enum.to_list`"],"you very":["much"],"you want":["to","to","to","you","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","I'll","instead","unicode","to","instead","to","(sequences","to","to","to","to","to.","nice"],"you want\".":["Nitpickers"],"you want)":["there."],"you want,":["and"],"you wanted":["to","to","to","to.","me","to","to","to,","to","instead","to,","to,"],"you warnings":["as"],"you went":["with","this","with","out"],"you were":["suggesting?","alluding","simply","to","doing","doing","using","thinking"],"you when":["I"],"you whether":["to"],"you will":["love","miss","get","aromatically","first","notice","be","be"],"you with":["this"],"you won't":["have","need","be","have","have"],"you wondering":["what"],"you wont":["get"],"you would":["want","in","feel","probably","still","be","just","basically","absolutely","use","need","probably","define","only","pull","just"],"you wouldn't":["really","have","have","have","have","want","need"],"you wrapped":["the","it"],"you write":["the","it","line","this","out","out","`func","it"],"you wrote":["it,"],"you! @milo":["@milo"],"you'd currently":["have"],"you'd end":["up","up"],"you'd find":["a"],"you'd get":["false."],"you'd have":["to","to","to","to","`not_saying_anything?`,"],"you'd like":["any","a","to."],"you'd merge":["the"],"you'd need":["to","to","to"],"you'd normally":["expect"],"you'd notice":["the"],"you'd probably":["have"],"you'd rather":["move"],"you'd silently":["end"],"you'd stick":["with"],"you'd still":["have"],"you'd think":["of"],"you'd use":["them","in"],"you'd want":["to","to"],"you'll also":["need","need"],"you'll be":["traversing","fine"],"you'll end":["up"],"you'll excuse":["me,"],"you'll find":["a","that","that"],"you'll get":["a"],"you'll have":["to","less"],"you'll just":["get"],"you'll move":["on"],"you'll need":["to"],"you'll only":["consider"],"you'll probably":["not","hit"],"you'll see":["they're"],"you'll stay":["here"],"you're [left-folding](https://en.wikipedia.org/wiki/Fold_%28higher-order_function%29)":["over","over"],"you're actually":["testing"],"you're already":["using"],"you're asking":["in"],"you're at":["it"],"you're calling":["a"],"you're cheating":["if"],"you're checking":["explicitly","to"],"you're checking,":["so"],"you're complementing.":["That's"],"you're computing":["the","the"],"you're connecting":["multiple"],"you're creating":["the"],"you're curious":["about"],"you're dealing":["with"],"you're defining":["an"],"you're doing":["rather","there?","in","the","this","the","some"],"you're done,":["and"],"you're expecting":["to"],"you're explicitly":["including"],"you're getting":["at","at?"],"you're giving":["it"],"you're going":["for","to","the","to","to"],"you're green.":["Now"],"you're interested":["in,","in"],"you're interfacing":["with"],"you're just":["creating"],"you're left":["examining"],"you're limited":["to"],"you're looking":["for.","for"],"you're lowercasing":["and"],"you're maybe":["doing"],"you're mixing":["it"],"you're not":["going","capturing","doing","going","using","calculating"],"you're of":["the"],"you're on":["the"],"you're only":["zipping","going","testing"],"you're passing":["to","in"],"you're piping":["in"],"you're reached":["it"],"you're reading":["the"],"you're referring":["to","to."],"you're repeating":["work."],"you're right":["-",":)","this","that","about","about","-"],"you're right,":["`scan`","there","it","it's","it","they"],"you're right.":["Looking","This"],"you're running":["Elixir","`list_of_words`"],"you're satisfied":["with"],"you're saying":["about","you","about"],"you're saying,":["but"],"you're sorting":["\"word\""],"you're specifying":["what"],"you're suggesting":["that,"],"you're supposed":["to"],"you're telling":["Bob"],"you're the":["first"],"you're thinking":["about","about"],"you're trying":["to","to","not","to","to","to","to"],"you're using":["Elixir","all","all","in","here,","the","the","`\\p`","pattern","a","a","`Enum.reverse`"],"you're using.":["Does"],"you're wasting":["your"],"you're willing":["to"],"you're working":["with","with"],"you're writing":["a","a"],"you've (correctly)":["written","written"],"you've String.stripped":["response_for,"],"you've a":["typo"],"you've already":["moved","defined."],"you've assigned":["a"],"you've avoided":["most"],"you've been":["waiting"],"you've broken":["up"],"you've cleaned":["up"],"you've combined":["what"],"you've completed":["yourself.","your"],"you've convinced":["me"],"you've created":["a"],"you've decided":["to"],"you've done":["it"],"you've found":["and","an"],"you've got":["a","Elixir","me","a","a","the"],"you've iterated":["nicely."],"you've looked":["at"],"you've marked":["the"],"you've never":["used,"],"you've now":["used"],"you've probably":["done"],"you've refactored":["to"],"you've split":["out"],"you've thought":["of","about"],"you've triggered":["it","it","it"],"you've written":["less"],"you, both":["for"],"you, but":["for"],"you, makes":["the"],"you, real34,":["you're"],"you, using":["it"],"you. I":["will","had"],"you. I'll":["have"],"you. Pattern":["matching"],"you. Since":["you"],"you. That":["is"],"you. Very":["nice."],"you. Would":["you"],"you. `List.foldl/3`":["is"],"you. ends_with?":["will"],"young a":["language"],"your \"ground":["clause\""],"your #anagrams?":["function?"],"your #contains,":["#next_grapheme,"],"your #n_bottles":["function"],"your 'one-liner":["functions'"],"your 3":["pipelines"],"your \u003ccode\u003equiet?\u003c/code\u003e":["function"],"your @shawna.":[":)"],"your DSL":["is"],"your HashDict":["from"],"your Language":["module"],"your Regex":["can"],"your Regex.":["Have","There"],"your Server":["with"],"your _count":["method"],"your `Enum.slice`":["is"],"your `HashDict`":["so","once"],"your `Statement`":["module"],"your `StringInquires`":["module."],"your `Teenager`":["module?"],"your `_hey`":["function"],"your ```":["_count","_count","cond"],"your ```HashDict.update```.":["I"],"your `bottles_of_beer`":["helper"],"your `bottles`":["function"],"your `cond`":["statement."],"your `count`":["into","method"],"your `do_count`":["function."],"your `fn(_key,":["old_count,"],"your `hey`":["method."],"your `ignore_case`":["function."],"your `increment_count`":["I'd"],"your `is_question()`":["method."],"your `map`":["and"],"your `match_word`":["function,"],"your `question?`":["function,","and","check,"],"your `reduce`,":["the"],"your `sing/2`":["a"],"your `tokenize`":["regex"],"your `update`":["function"],"your `verse`":["clauses"],"your `word-count.exs`":["?"],"your `word-count`":["exercise"],"your accumulating":["function?"],"your accumulator":["is"],"your action":["method,"],"your advice":["from"],"your advice,":["but","since"],"your algorithm":["inside"],"your application":["elsewhere."],"your approach":["to","has","is","is","to"],"your arity":["problem."],"your array":["of"],"your attribute.":["I"],"your call":["to"],"your cases":["is"],"your changes.":["Nice"],"your checks":["in","in"],"your choice":["of"],"your code":["needs","might","is","and","a","is","has","is","line","a","by","handle","that","for","won't","is","runs","doesn't","is","and","expresses.","certainly","looks","with","is","updates","probably.","updates","though,","works","has","does?","is","quite","looks","is","that","changes","is"],"your code,":["removed","but"],"your code.":["Any","Would"],"your code?":["It"],"your comment":["about"],"your comment.":[";-)"],"your comments":["have","in"],"your comments,":["and"],"your comments.":["Wrapping"],"your concerns":["here"],"your cond":["which","clauses"],"your conditionals.":["(see"],"your constant":["to"],"your count":["function?","function."],"your creative":["or"],"your current":["version"],"your declarative":["description?"],"your definition":["of"],"your description":["of"],"your dictionary":["implementation."],"your documentation":["and"],"your drift":["correctly"],"your drive":[":)"],"your example":["code","I"],"your exceptions,":["@kamryn."],"your exercism":["gem,","gem,","gem,"],"your expected":["value"],"your experiences":["@bailee!"],"your feed":["back!"],"your feedback":[":-)","on"],"your feedback!":["I"],"your feedback,":["I've","you're","I"],"your feedback.":["I","It","I","I","I","I","I","I've","I've","This","I","I"],"your feedback;":["I","I"],"your filter":["function"],"your filter/reject":["operations?"],"your filtering":["function"],"your first":["point,","observation.","foray","Elixir","Elixir","iteration.","exercise,","point,","case"],"your footsteps":["and"],"your formatting":["with"],"your friend":["for"],"your function":["names?","method","definitions","definitions."],"your functions":["names?","be"],"your goal":["is"],"your guidance":["on"],"your hands":["off"],"your help":["here."],"your help,":["to"],"your helper":["methods.","functions,"],"your idea,":["in"],"your if/else":["-&gt;"],"your immediate":["understanding"],"your implementation":["of","is","not","of","of","allows","of","type","of"],"your implementation.":["When"],"your implementations":["simpler?"],"your import":["directive"],"your indentation":["formatting"],"your input":["and"],"your insights.":["The"],"your insistence":["("],"your intent":["clearer."],"your internals.":["The"],"your interpret":["implementation"],"your is_whatever?":["function,"],"your iteration":["function"],"your last":["submission","question:"],"your line":["19"],"your logic":["into"],"your loop_through":["implementations"],"your map":["and"],"your meaning.":["That"],"your method":["names?","calls."],"your methods,":["following"],"your module":["and","without"],"your names":["with"],"your namespace":["and"],"your new":["hash","version"],"your next":["submission"],"your nit.":["I"],"your nitpicks":["and"],"your note":["on"],"your original":["comment,","code"],"your other":["function?","suggestions","method","comments."],"your own":["implementation","module"],"your pattern":["matching"],"your pipeline":["by","tell"],"your pipeline,":["you"],"your point":["about","but","on","and"],"your point.":["I","To"],"your points.":["However","Thanks!"],"your predicate":["functions"],"your previous":["comment?","submission,","suggestion","version,","iteration"],"your primary":["module?"],"your prior":["feedback."],"your private":["functions","functions.","function"],"your protocol":["for"],"your public":["interface."],"your reasoning":["that"],"your recursive":["approach"],"your reduce":["here","function."],"your regex":["matches","as","pattern.","pattern","is","only","could","should"],"your regex,":["since","since"],"your regex.":["`x+`"],"your regex:":["what"],"your regular":["expression."],"your responder":["be"],"your right.":["Good"],"your rollup":["function."],"your sanitization":["/"],"your sanitize":["function."],"your second":["suggestion?","argument","point,","nitpick,","version."],"your sentence":["gets"],"your shouting?":["function"],"your simplification":["of"],"your solution":["into","is","make","to","using"],"your solution.":["It's"],"your standard":["library!"],"your statement":["\"blank\"."],"your statement?":["function"],"your string":["cleanup"],"your structure":["on"],"your style":["suggestions"],"your submission":["is"],"your submissions":["have","the"],"your suggestion":["of","to","above"],"your suggestions":[":-)","I","to","into"],"your suggestions,":["especially"],"your suggestions.":["One"],"your suggestions...":["maybe"],"your supporting":["methods"],"your table":["is"],"your test":["file","methods","suite","file"],"your tests":["should","into"],"your thinking.":["(There"],"your thoughts":["on","(or"],"your time":["to",":(","invested"],"your two":["if's","reducing"],"your update":["call"],"your use":["of","of"],"your variable":["be"],"your version":["may"],"your way":["is","to","better"],"your whatever":["words"],"your whole":["solution."],"your word":["equivalence"],"your words":["that"],"your work":["first","on"],"your yelling?":["function."],"yours but":["still"],"yours keeps":["the"],"yours might":["be"],"yours. As":["for"],"yours. I":["need"],"yourself (ie":["implementing"],"yourself to":["have"],"yourself using":["explicit","other","an"],"yourself. As":["you"],"yourself? I":["would","get"],"y}D\"` (==":["`\"ABCD\"`)."],"zero experience":["with"],"zero tolerance":["rule"],"zero words":["was"],"zero, a":["specific"],"zeros, you":["could"],"zip doesn't":["\"pad\""],"zip stage.":["Am"],"zipped variable":["but"],"zipper exercise":["has"],"zipper exercise.":["A"],"zipper now.":["But"],"zipper' gives":["a"],"zipping 2":["lists."],"{ \"blue\",":["1}"],"{ \"each\",":["1"],"{ \"fish\",":["4"],"{ \"of\",":["1"],"{ \"one\",":["1","1"],"{ \"red\",":["1"],"{ \"two\",":["1"],"{ \"word\",":["1"],"{ 'AEIOULNRST',":["1","1"],"{ 'BCMP',":["3","3"],"{ 'DG',":["2","2"],"{ 'FHVWY',":["4","4"],"{ 'JX',":["8","8"],"{ 'K',":["5","5"],"{ 'QZ',":["10","10"],"{ :inline,":["wrap:"],"{ :ok,":["chars",":isosceles",":isosceles"],"{ :privmsg,":["message"],"{ String.downcase(w),":["c"],"{ a,":["b"],"{ allergy,":["flag"],"{ bad_time,":["_"],"{ c,":["n","ws"],"{ chars,":["value"],"{ dp,":["i","dpi","dpi","i","dpi","dpi"],"{ good_time,":["_"],"{ letters,":["value"],"{ n,":["\"\""],"{ nth,":["ni","ni"],"{ word,":["HashDict.update(acc,"],"{ year,":["month,","month,"],"{\"1\", 1},":["{\"2\","],"{\"as\", 1},":["{\"java\","],"{\"car\", 1},":["{\"carpet\","],"{\"carpet\", 1},":["{\"as\","],"{\"java\", 1},":["{\"javascript\","],"{\"testing\", 2},":["{\"1\","],"{&1, 0}":["worked"],"{'A', 3},":["{'T',"],"{'DG', 2},":["...]"],"{'T', 2},":["{'C',"],"{1, 1.0}":["do"],"{1, _}),":["&elem(&1,"],"{2, 'DG'},":["{3,"],"{3, 'BCMP'},":["{4,"],"{4, 'FHVWY'},":["{5,"],"{8, 'JX'},":["{10,"],"{:ok, 'abcde'}":["instead"],"{?C, 0},":["{?G,","{?G,","{?G,","{?G,"],"{?G, 0},":["{?T,"],"{?G, 0}]`,":["use"],"{?T, 0},":["{?C,","{?C,","{?C,"],"{_ ,_}":["-\u003e"],"{_a, _a}":["-&gt;"],"{_a, _b}":["-&gt;"],"{a, a}":["-\u003e"],"{a, b}":["-\u003e"],"{d, msg}":["-\u003e"],"{k, count(sequence,":["k)}"],"{left,right} -\u003e":["left"],"{letters, value}":["inlist"],"{n, cs}":["inlist"],"{some internal":["data"],"{x, accumulate(x,":["wordList)}"],"{year, month,":["day}","day}"],"| &2]`":["should"],"| acc":["])"],"| acc]":["else"],"| chars]`,":["iolists"],"| collection]`.":["And"],"| filter(tail,":["f)]"],"| for_iter(d,":["div(n,d))]`."],"| other_candidate_anagrams])":["do"],"| t],":["acc)`."],"| tail":["]`","],","]","]`"],"| tail],":["f)"],"| tail]`":["syntax","syntax."],"| tail_1],":["[n2","[n1"],"| tail_2],":["distance)","distance)"],"| translate(...)]`":["and"],"| words],":["dict)"],"|&gt; Enum.filter":["anagrams?(word,","fn"],"|&gt; Enum.filter(":["same_word?(&amp;1,"],"|&gt; Enum.filter(fn(test_match)":["-&gt;"],"|&gt; Enum.filter(fn(word2)":["-&gt;"],"|&gt; Enum.map(fn(x)":["-&gt;"],"|&gt; Enum.map(fn({k,_})":["-&gt;"],"|&gt; Enum.map(verse(&amp;1))":["|&gt;"],"|&gt; Enum.reduce(HashDict.new,":["&amp;add_or_increment/2)"],"|&gt; Enum.with_index`":["in"],"|&gt; List.flatten`":["but"],"|&gt; List.foldl(":["HashDict.new(),"],"|&gt; List.foldl(&amp;1,":["HashDict.new(),"],"|&gt; Regex.scan":["words"],"|&gt; String.codepoints":["|&gt;"],"|&gt; String.downcase":["|&gt;"],"|&gt; String.split(&amp;1,":["%r{[^a-zA-Z0-9]+})"],"|&gt; String.strip)":["=="],"|&gt; charset":["```"],"|&gt; downcase":["|&gt;"],"|&gt; empty?`,":["I"],"|&gt; extract_nucleotide(List.wrap(nucleotide))":["|&gt;"],"|&gt; in":["is_saying_nothing?"],"|&gt; is":["on"],"|&gt; operator":["a","is","instead"],"|&gt; operator.":["That's","That"],"|&gt; operator:":["String.split(&amp;1,"],"|&gt; pipeline":["operator","operator"],"|&gt; remove_punctuation":["|&gt;"],"|&gt; scrub":["|&gt;"],"|&gt; sorted":["=="],"|&gt; split":["|&gt;"],"|&gt;, and":["they"],"|\u003e (b":["=="],"|\u003e )":["when"],"|\u003e ).":["I"],"|\u003e Enum.chunk":["|\u003e"],"|\u003e Enum.count":["to"],"|\u003e Enum.count(&(&1":["=="],"|\u003e Enum.count`":["not","will"],"|\u003e Enum.filter":["|\u003e"],"|\u003e Enum.filter(":["&(contains_all_chars?","&(are_not_identical?","&(contains_all_chars?","&(are_not_identical?"],"|\u003e Enum.filter(&(is_anagram_match?(target_letters,":["&1)))"],"|\u003e Enum.filter(&anagram?(word,":["normalized,"],"|\u003e Enum.filter(...)`":["avoids"],"|\u003e Enum.filter(fn":["(_,"],"|\u003e Enum.first`":["though"],"|\u003e Enum.join`":["(might"],"|\u003e Enum.map(&(elem(&1,":["1)))"],"|\u003e Enum.map(&String.upcase/1)":["`"],"|\u003e Enum.map(&String.upcase/1))":["`,"],"|\u003e Enum.map(&[&1,":["?\\n])"],"|\u003e Enum.map(&elem(&1,":["0))`,"],"|\u003e Enum.map(&hd/1)`":["to","(using"],"|\u003e Enum.map(chars,":["&score_letter/1)`"],"|\u003e Enum.map(fn":["x"],"|\u003e Enum.map_join`":["could","to"],"|\u003e Enum.map`,":["`Stream`","with"],"|\u003e Enum.reduce(0,":["fn","&(&1+&2))"],"|\u003e Enum.reduce(HashDict.new(),":["...)`."],"|\u003e Enum.reduce(HashDict.new,":["fn"],"|\u003e Enum.reduce`":["can","to","than","be"],"|\u003e Enum.reject(&(&1":["=="],"|\u003e Enum.reject(&(target":["=="],"|\u003e Enum.reject(fn":["(_,"],"|\u003e Enum.reverse":["|\u003e"],"|\u003e Enum.sort(&(elem(&1,":["0)"],"|\u003e HashDict.new`":["here,"],"|\u003e HashDict.new`?":["`HashDict.new`"],"|\u003e List.flatten`":["can","can"],"|\u003e Stream.chunk":["|\u003e"],"|\u003e Stream.map(&elem(&1,":["0))"],"|\u003e String.codepoints":["|\u003e"],"|\u003e String.downcase":["|\u003e"],"|\u003e String.ends_with?":["\"?\"```."],"|\u003e String.first`":["can"],"|\u003e String.graphemes":["|\u003e"],"|\u003e String.length":["==","==","=="],"|\u003e String.length)":["==","=="],"|\u003e String.reverse`":["(very"],"|\u003e String.reverse`.":["The"],"|\u003e String.slice(0,":["3)"],"|\u003e String.strip":["|\u003e"],"|\u003e String.strip`":["maybe?"],"|\u003e String.to_char_list!":["|\u003e"],"|\u003e b":["=="],"|\u003e b(...)`,":["it"],"|\u003e b)`.":["In"],"|\u003e b`":["isn't","but"],"|\u003e bar(1)":["|\u003e"],"|\u003e but":["it"],"|\u003e count(fn":["{left,right}"],"|\u003e downcase":["|\u003e"],"|\u003e elem(0)`,":["though"],"|\u003e function`":["reminded"],"|\u003e g)`":["instead"],"|\u003e g`":["is"],"|\u003e g`.":["It's"],"|\u003e interpret":["|\u003e"],"|\u003e iolist_to_binary()`":["in"],"|\u003e iolist_to_binary`":["It's"],"|\u003e operation1":["|\u003e"],"|\u003e operation2`)":["would"],"|\u003e operator":["rather"],"|\u003e parse":["|\u003e"],"|\u003e rather":["to"],"|\u003e reduce":["|\u003e"],"|\u003e reduce([],":["&(append(&2,"],"|\u003e reverse)":["that"],"|\u003e sanitize":["|\u003e"],"|\u003e select_anagrams`,":["but"],"|\u003e split":["|\u003e"],"|\u003e tokenize":["|\u003e","|\u003e"],"|\u003e words":["|\u003e"],"|| !multiple_of?(year,":["100)"],"|| \"\"":["=="],"|| \"\"`":["for"],"|| \"\"```":["is"],"|| 0)":["+"],"|| b":["=="],"|| d+2`,":["is"],"|| is_question?":["||"],"|| is_question?(sentence)":["&amp;&amp;"],"|| is_shout?":["||"],"|| is_shout?(sentence)":["&amp;&amp;"],"||| convert(x)":["end`"],"} -\u003e":["a"],"} =":["Integer.parse(s)",":timer.tc(Test,",":timer.tc(Test,","String.to_char_list(word)","String.to_char_list(...)`"],"} inlist":["Enum.with_index(@ibrahim)","Enum.with_index([\"first\",","Enum.with_index(@ibrahim)","Enum.with_index(@ibrahim)","Enum.with_index(@greta)","Enum.with_index([\"first\",","Enum.with_index(@greta)","Enum.with_index(@greta)","l,","score_data,"],"})` can":["be","be"],"}, else:":["nil","nil"],"}, {":["\"of\",","\"each\",","\"fish\",","\"two\",","\"red\",","\"blue\","],"}` and":["`b"],"}` clauses":["into"],"}`. The":["parens","reason"],"~ ⮀":["iex"],"à peu":["près"],"équivalent de":["`Regex.match`"],"éøñ don't":["get"],"Д and":["it"],"нет\" /":["utf8"],"– Is":["this"],"– you":["could"],"“readable but":["repetitive”"],"… I":["used"],"… end`":["as"],"… that's":["why"],"⮀ iex":["-v"],"⮀ ~":["⮀"]},"prefix_len":2}