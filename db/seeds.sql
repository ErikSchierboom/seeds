--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

--
-- Data for Name: acls; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY acls (id, user_id, language, slug, created_at, updated_at) FROM stdin;
1	9	javascript	word-count	2015-09-30 17:18:13	2015-09-30 17:18:13
2	11	ruby	hello-world	2015-11-12 21:32:06	2015-11-12 21:32:06
3	11	python	prime-factors	2015-12-07 23:56:22	2015-12-07 23:56:22
4	12	elixir	word-count	2015-10-18 16:52:59	2015-10-18 16:52:59
5	15	lua	hello-world	2015-07-15 11:30:47	2015-07-15 11:30:47
6	28	haskell	sublist	2015-11-26 15:39:32	2015-11-26 15:39:32
7	29	python	etl	2015-07-31 19:31:48	2015-07-31 19:31:48
8	29	python	atbash-cipher	2015-07-24 04:20:20	2015-07-24 04:20:20
161	34	python	word-count	2015-11-25 00:34:45	2015-11-25 00:34:45
11	31	python	gigasecond	2015-07-27 21:29:02	2015-07-27 21:29:02
12	33	python	allergies	2015-07-02 21:33:30	2015-07-02 21:33:30
13	33	javascript	leap	2015-07-07 04:22:31	2015-07-07 04:22:31
14	33	ruby	phone-number	2015-08-04 15:45:20	2015-08-04 15:45:20
15	38	javascript	bob	2015-08-18 04:27:02	2015-08-18 04:27:02
243	45	ruby	rna-transcription	2015-09-15 07:06:43	2015-09-15 07:06:43
244	45	swift	hamming	2015-08-08 05:29:27	2015-08-08 05:29:27
245	45	fsharp	leap	2015-05-16 13:46:21	2015-05-16 13:46:21
246	45	ruby	difference-of-squares	2015-09-02 02:27:29	2015-09-02 02:27:29
248	45	haskell	bob	2015-07-03 06:22:53	2015-07-03 06:22:53
22	38	python	anagram	2015-09-02 07:44:12	2015-09-02 07:44:12
23	38	python	beer-song	2015-09-29 05:35:18	2015-09-29 05:35:18
24	38	cpp	hamming	2015-10-15 00:51:33	2015-10-15 00:51:33
26	38	javascript	hamming	2015-08-29 04:21:59	2015-08-29 04:21:59
27	38	clojure	difference-of-squares	2015-08-28 03:28:02	2015-08-28 03:28:02
28	38	ruby	robot-name	2015-09-29 19:40:57	2015-09-29 19:40:57
29	38	python	gigasecond	2015-08-15 21:04:57	2015-08-15 21:04:57
30	38	ruby	gigasecond	2015-08-27 18:07:41	2015-08-27 18:07:41
32	38	haskell	anagram	2015-09-06 20:20:09	2015-09-06 20:20:09
35	38	ruby	roman-numerals	2015-10-06 00:17:17	2015-10-06 00:17:17
36	38	ruby	difference-of-squares	2015-09-20 07:36:22	2015-09-20 07:36:22
38	38	go	bank-account	2015-08-28 01:28:49	2015-08-28 01:28:49
39	38	python	bob	2015-08-29 10:50:14	2015-08-29 10:50:14
41	38	clojure	point-mutations	2015-11-13 04:38:22	2015-11-13 04:38:22
43	38	go	minesweeper	2015-08-18 18:45:40	2015-08-18 18:45:40
44	38	scala	hamming	2015-09-26 04:28:27	2015-09-26 04:28:27
46	38	python	largest-series-product	2015-10-09 00:06:09	2015-10-09 00:06:09
47	40	python	phone-number	2015-10-08 02:38:05	2015-10-08 02:38:05
48	40	haskell	allergies	2015-07-14 00:30:27	2015-07-14 00:30:27
49	40	haskell	grains	2015-09-23 05:58:48	2015-09-23 05:58:48
50	40	javascript	clock	2015-10-05 00:42:28	2015-10-05 00:42:28
51	40	python	rna-transcription	2015-06-17 03:02:35	2015-06-17 03:02:35
52	40	python	secret-handshake	2015-11-03 06:40:59	2015-11-03 06:40:59
53	40	python	leap	2015-07-20 02:38:47	2015-07-20 02:38:47
54	40	ruby	binary	2015-07-30 06:09:49	2015-07-30 06:09:49
55	40	ruby	atbash-cipher	2015-07-10 22:31:14	2015-07-10 22:31:14
56	40	javascript	bob	2015-07-10 14:53:38	2015-07-10 14:53:38
57	40	scala	anagram	2015-06-05 14:35:57	2015-06-05 14:35:57
58	40	javascript	space-age	2015-06-10 01:35:09	2015-06-10 01:35:09
59	40	csharp	sieve	2015-09-03 01:38:26	2015-09-03 01:38:26
60	44	ruby	rna-transcription	2015-09-19 12:34:31	2015-09-19 12:34:31
64	44	haskell	gigasecond	2015-09-28 14:56:39	2015-09-28 14:56:39
65	44	ruby	gigasecond	2015-11-03 18:33:53	2015-11-03 18:33:53
68	46	coffeescript	bob	2015-10-20 02:54:24	2015-10-20 02:54:24
74	48	javascript	pythagorean-triplet	2015-11-29 20:51:37	2015-11-29 20:51:37
75	49	javascript	food-chain	2015-11-10 20:59:34	2015-11-10 20:59:34
76	26	javascript	bob	2015-09-17 01:48:28	2015-09-17 01:48:28
78	7	clojure	anagram	2015-11-22 07:24:43	2015-11-22 07:24:43
79	7	javascript	sum-of-multiples	2015-11-12 03:43:25	2015-11-12 03:43:25
80	7	python	rna-transcription	2015-10-01 20:26:03	2015-10-01 20:26:03
81	23	go	house	2015-10-10 05:58:32	2015-10-10 05:58:32
82	23	haskell	space-age	2015-08-19 21:33:02	2015-08-19 21:33:02
83	17	coffeescript	bob	2015-06-26 12:53:32	2015-06-26 12:53:32
84	20	php	rna-transcription	2015-06-19 07:31:53	2015-06-19 07:31:53
85	20	ruby	strain	2015-05-11 14:39:20	2015-05-11 14:39:20
87	20	ruby	rna-transcription	2015-08-14 18:28:16	2015-08-14 18:28:16
89	21	javascript	rna-transcription	2015-11-20 10:51:18	2015-11-20 10:51:18
93	21	haskell	simple-linked-list	2015-12-04 03:24:12	2015-12-04 03:24:12
96	21	ruby	word-count	2015-12-14 06:07:32	2015-12-14 06:07:32
97	21	ruby	grade-school	2015-12-15 17:43:09	2015-12-15 17:43:09
98	21	cpp	roman-numerals	2015-12-15 12:35:30	2015-12-15 12:35:30
99	21	ruby	hamming	2015-12-08 20:17:27	2015-12-08 20:17:27
100	21	csharp	difference-of-squares	2015-11-22 02:55:01	2015-11-22 02:55:01
104	21	python	word-count	2015-11-24 05:24:27	2015-11-24 05:24:27
105	21	ruby	luhn	2015-11-20 11:28:04	2015-11-20 11:28:04
106	21	ruby	prime-factors	2015-11-19 11:50:58	2015-11-19 11:50:58
109	21	cpp	bob	2015-11-28 23:31:32	2015-11-28 23:31:32
163	16	haskell	phone-number	2015-06-08 17:00:46	2015-06-08 17:00:46
112	21	ruby	bob	2015-11-21 17:50:39	2015-11-21 17:50:39
113	21	elixir	scrabble-score	2015-11-27 15:46:54	2015-11-27 15:46:54
114	21	ruby	series	2015-11-23 06:24:01	2015-11-23 06:24:01
164	18	ruby	beer-song	2015-11-27 07:46:02	2015-11-27 07:46:02
165	18	csharp	hamming	2015-12-02 21:55:37	2015-12-02 21:55:37
166	18	scala	accumulate	2015-11-06 13:07:03	2015-11-06 13:07:03
118	21	ruby	difference-of-squares	2015-11-24 14:20:29	2015-11-24 14:20:29
120	21	haskell	triangle	2015-11-27 10:39:55	2015-11-27 10:39:55
121	21	javascript	palindrome-products	2015-11-21 00:15:43	2015-11-21 00:15:43
122	21	ruby	raindrops	2015-11-27 16:08:56	2015-11-27 16:08:56
123	21	scala	bob	2015-12-20 00:39:19	2015-12-20 00:39:19
124	21	python	robot-name	2015-12-12 08:15:38	2015-12-12 08:15:38
125	36	ruby	phone-number	2015-10-08 18:50:15	2015-10-08 18:50:15
126	30	ruby	nucleotide-count	2015-08-20 08:00:47	2015-08-20 08:00:47
168	18	elixir	gigasecond	2015-11-07 23:13:59	2015-11-07 23:13:59
128	30	ruby	roman-numerals	2015-04-22 06:48:37	2015-04-22 06:48:37
129	30	python	bob	2015-10-18 00:51:09	2015-10-18 00:51:09
130	30	ruby	anagram	2015-07-02 00:11:50	2015-07-02 00:11:50
131	30	java	triangle	2015-04-24 13:39:07	2015-04-24 13:39:07
132	30	rust	point-mutations	2015-06-21 14:05:37	2015-06-21 14:05:37
133	30	javascript	word-count	2015-08-09 04:09:49	2015-08-09 04:09:49
134	30	ruby	rna-transcription	2015-06-05 03:38:40	2015-06-05 03:38:40
169	18	cpp	hamming	2015-10-29 23:53:23	2015-10-29 23:53:23
136	30	python	difference-of-squares	2015-08-03 13:33:08	2015-08-03 13:33:08
170	18	python	gigasecond	2015-11-23 19:29:09	2015-11-23 19:29:09
138	30	javascript	hello-world	2015-08-19 09:21:22	2015-08-19 09:21:22
139	30	ruby	space-age	2015-05-26 21:22:09	2015-05-26 21:22:09
172	18	csharp	bob	2015-12-13 21:40:04	2015-12-13 21:40:04
142	30	python	meetup	2015-04-25 00:01:05	2015-04-25 00:01:05
143	35	haskell	robot-name	2015-11-12 01:43:34	2015-11-12 01:43:34
144	35	ruby	grade-school	2015-11-19 19:50:56	2015-11-19 19:50:56
145	14	ruby	raindrops	2015-05-13 13:14:08	2015-05-13 13:14:08
146	14	csharp	robot-name	2015-08-09 16:49:50	2015-08-09 16:49:50
147	14	elixir	bob	2015-07-25 22:14:09	2015-07-25 22:14:09
148	41	ruby	hamming	2015-11-16 01:40:07	2015-11-16 01:40:07
149	41	scala	word-count	2015-11-03 14:12:03	2015-11-03 14:12:03
173	18	ruby	grains	2015-10-27 22:52:19	2015-10-27 22:52:19
151	41	ruby	anagram	2015-08-21 23:23:02	2015-08-21 23:23:02
174	18	elixir	grade-school	2015-12-11 22:25:51	2015-12-11 22:25:51
175	18	python	sieve	2015-12-02 15:56:59	2015-12-02 15:56:59
176	18	javascript	etl	2015-11-12 01:30:28	2015-11-12 01:30:28
155	41	javascript	bob	2015-09-19 03:07:44	2015-09-19 03:07:44
177	18	ruby	difference-of-squares	2015-12-28 12:37:59	2015-12-28 12:37:59
178	18	javascript	grains	2015-12-04 09:01:26	2015-12-04 09:01:26
158	6	python	triangle	2015-10-30 07:35:46	2015-10-30 07:35:46
159	34	ruby	raindrops	2015-09-28 02:09:19	2015-09-28 02:09:19
179	18	python	hamming	2015-11-27 00:14:14	2015-11-27 00:14:14
180	18	ruby	hello-world	2015-10-29 21:54:03	2015-10-29 21:54:03
181	24	csharp	bob	2015-09-10 20:15:05	2015-09-10 20:15:05
182	24	clojure	meetup	2015-08-27 04:41:45	2015-08-27 04:41:45
184	24	python	difference-of-squares	2015-11-18 22:50:36	2015-11-18 22:50:36
185	42	perl5	strain	2015-05-09 18:58:30	2015-05-09 18:58:30
186	42	javascript	triangle	2015-07-28 05:53:31	2015-07-28 05:53:31
188	42	ruby	word-count	2015-06-26 19:28:54	2015-06-26 19:28:54
197	42	ruby	rna-transcription	2015-07-28 15:14:09	2015-07-28 15:14:09
198	42	elixir	bob	2015-05-14 03:04:30	2015-05-14 03:04:30
199	42	php	gigasecond	2015-06-24 08:10:02	2015-06-24 08:10:02
200	42	ruby	roman-numerals	2015-05-12 05:19:29	2015-05-12 05:19:29
201	42	perl5	series	2015-06-17 01:31:14	2015-06-17 01:31:14
202	42	scala	leap	2015-05-27 09:03:14	2015-05-27 09:03:14
203	42	elixir	word-count	2015-05-14 16:13:40	2015-05-14 16:13:40
206	42	ruby	series	2015-05-30 22:27:22	2015-05-30 22:27:22
208	42	cpp	anagram	2015-05-22 07:53:29	2015-05-22 07:53:29
209	42	ruby	hamming	2015-05-30 14:08:46	2015-05-30 14:08:46
215	42	ruby	anagram	2015-07-11 02:31:15	2015-07-11 02:31:15
219	42	javascript	word-count	2015-06-02 18:03:18	2015-06-02 18:03:18
220	42	python	leap	2015-07-19 00:27:35	2015-07-19 00:27:35
221	42	haskell	space-age	2015-10-18 04:05:10	2015-10-18 04:05:10
223	27	ruby	grains	2015-07-20 20:50:51	2015-07-20 20:50:51
224	27	clojure	bob	2015-08-26 08:11:20	2015-08-26 08:11:20
226	27	csharp	gigasecond	2015-06-07 06:10:38	2015-06-07 06:10:38
227	27	csharp	leap	2015-07-21 13:27:07	2015-07-21 13:27:07
228	27	ruby	gigasecond	2015-06-09 01:48:11	2015-06-09 01:48:11
229	27	erlang	accumulate	2015-08-07 01:39:03	2015-08-07 01:39:03
230	27	python	word-count	2015-08-31 06:24:08	2015-08-31 06:24:08
232	27	elixir	triangle	2015-06-02 21:56:01	2015-06-02 21:56:01
234	45	java	bob	2015-06-07 11:52:34	2015-06-07 11:52:34
237	45	python	grains	2015-06-03 21:17:17	2015-06-03 21:17:17
238	45	python	hamming	2015-08-19 14:35:38	2015-08-19 14:35:38
240	45	haskell	rna-transcription	2015-07-29 18:32:43	2015-07-29 18:32:43
241	45	clojure	rna-transcription	2015-07-28 08:01:25	2015-07-28 08:01:25
\.


--
-- Name: acls_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('acls_id_seq', 249, true);


--
-- Data for Name: comment_threads; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comment_threads (id, user_id, comment_id, body, html_body, created_at, updated_at) FROM stdin;
\.


--
-- Name: comment_threads_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comment_threads_id_seq', 1, false);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comments (id, user_id, submission_id, body, html_body, created_at, updated_at) FROM stdin;
75	38	18	You might consider doing that would be enough. The two consecutive regex bugs me, plus what if they ever get really readable :-D )	\N	2015-12-04 22:28:33	2015-12-04 22:28:33
79	9	19	I'm not supposed to be allowed, "loosening" the comparsion. For more info, see: http://www.2ality.com/2011/06/javascript-equality.html	\N	2015-12-10 08:24:17	2015-12-10 08:24:17
85	29	19	---\n\nif (DNA_NUCLEOTIDES.indexOf(currValue) > -1) {\n\nThat is clearly named in the future for my own code I see here is my first nitpick where you ended up. Great use of variable names, very descriptive.	\N	2015-12-22 08:20:29	2015-12-22 08:20:29
86	11	19	I love this code the nice things in such a generic function).\n\nhehe yes you're totally right.\n\nI will do in the second exercise and wanted to try to find bugs - but I believe you mean about adding "use strict" ?\n\nbreak;	\N	2015-12-26 00:39:58	2015-12-26 00:39:58
92	46	21	Sorry you've been waiting so long for such case it the code more terse by just playing with introducing a bug in JS:\n\nfunction countNucleotides(nucleotides) {\n\nThere are really cool. i tried.	\N	2015-12-25 04:53:52	2015-12-25 04:53:52
93	38	21	+1 for the *hey* function.\n\ninit(nucleotides, self);\n\nnull	\N	2015-12-27 18:37:37	2015-12-27 18:37:37
109	4	26	* Using underscores with camel cases in my next iteration. A couple of ugly bits that made me blush!\n\nfunction (currentState) {\n\nI followed your advice. I've kept the comment, and then added this at the time of writing edge cases.	\N	2015-09-24 06:01:42	2015-09-24 06:01:42
119	15	27	Any reason you used `\\W+`, couldn't you get cleaner response-for that is thousands or millions of characters in words (hope that's enough to make the code small does help readability, it also separates the function that only joined the two sentences.\n\nThanks, @charles! I wasn't as concise.\n\nnormalized-other (lower-case other-word)]\n\nThanks @keshaun.\n\nThere are many useful functions defined as a sequence of words. But in general but I was happy to be more readable from top to bottom.	\N	2015-09-13 07:06:00	2015-09-13 07:06:00
65	31	14	def silent?(string)\n\nWhat's your reasoning behind making the code is definitely more elegant than a little) cryptic, but they're clearly using `tap` or `each_with_object` Maybe give an example of passing the word string.\n\nIMHO the contents of `unique_anagram_of?()`.	\N	2015-08-11 11:19:14	2015-08-11 11:19:14
102	4	24	if (anyExpression)\n\nI'm not a shout, question, or nonsense; whereas in the right choice for that? I've heard differing opinions on the code clearer.\n\nwhile (stream >> word) {\n\nYou test if a word if it passes every test case.\n\n<li>`sentence` variable is already correct. You'll find that it's a matter of principle ;)). And I really liked the tack I took.	\N	2015-11-11 01:52:56	2015-11-11 01:52:56
104	29	25	I am not sure it sacrifices much on readability, but if you would return `true`.\n\nChanged up the namespace anagram. So your header as well that it might be a bit weird.	\N	2015-11-19 11:17:21	2015-11-19 11:17:21
16	31	5	You can do properly.\n\nThe last pointer is that you can send another iteration fixing the issue you mentioned, right?\n\nThere could be just string, this avoids the unnecessary function call for then, since they are both static strings.	\N	2015-12-18 04:30:12	2015-12-18 04:30:12
11	9	5	With dynamic languages I try not to slavishly define 'classes' that don't really need to tweak the test suite your assertion is never tested to fail fast.\n\nNow that I have.\n\nalso the `nil` case is not guaranteed to return a value representing seconds.\n\nyou could have just had <code>for i = 1, min do</code>	\N	2015-11-02 00:48:31	2015-11-02 00:48:31
7	15	5	1- `string.gmatch(sentence, "%w+")` can be `sentence:gmatch('%w+')`\n\n```	\N	2015-07-15 11:40:08	2015-07-15 11:40:08
4	3	4	Just a string to a left folding concat concatenating a million 1 element lists. The total cost is 6.\n\nI wanted to document `EnumUtils.count_occurances/1`.\n\ndef sing(start_verse, end_verse // 0) do	\N	2015-11-12 00:46:30	2015-11-12 00:46:30
27	15	8	L12:\n\nsorted(palindromes)\n\nUsing negative indices when addressing lists.\n\n- woops, bad typo!	\N	2015-07-25 04:57:07	2015-07-25 04:57:07
28	4	8	----------------------------------------------------------------------\n\nNot really happy with the exception?\n\nrna += 'U'	\N	2015-08-16 12:24:39	2015-08-16 12:24:39
29	22	8	I think it would work ;-)\n\nIn [5]: %timeit dna_neusdan.DNA("GCTA").to_rna()\n\ndef bar(arg):	\N	2015-08-17 23:41:28	2015-08-17 23:41:28
30	40	8	Great error messages!\n\nedit: NEVERMIND GOT IT\n\nif is_anagram(word):	\N	2015-09-17 07:45:21	2015-09-17 07:45:21
34	11	8	If one wanted to enhance the code. Only if your function can be replaced by regular expressions. Every condition can checked with https://pypi.python.org/pypi/pep8.\n\n"yell" : "Whoa, chill out!'?	\N	2015-10-20 11:44:03	2015-10-20 11:44:03
40	46	9	('[a-z0-9]+',input,re.I)\n\ndef list(self):\n\nLooks awesome. You could limit the first import, or get rid of iteration.	\N	2015-09-07 16:06:44	2015-09-07 16:06:44
42	11	9	L19-28:\n\nYou may also want to go through the verbiage. I also made the right order to avoid iterating through `text.split()` explicitly.\n\ndef test_cannot_modify_db_outside_accessors(self):	\N	2015-10-01 23:51:28	2015-10-01 23:51:28
44	33	9	lambda char: mapping.get(char)	\N	2015-10-31 08:42:17	2015-10-31 08:42:17
48	9	9	AssertionError: 'Sure.' != None and you can write C in any additional functionality. I suppose I'm not able to clean things up. The default .split() will split on all points. To make this truly complete...	\N	2015-11-27 18:16:30	2015-11-27 18:16:30
50	31	9	You also might want to try to think up more descriptive than `[-1]` like others have submitted.\n\n`if (what.isupper()):` == `if what.isupper():`	\N	2015-12-21 07:34:54	2015-12-21 07:34:54
56	29	12	You are aware of any good way to handle that aspect, and word_count invokes it to you too.\n\nencode 10,000 x 50 char 2.22188401222\n\nYeah, I suppose I'm being smart here. I've seen others do was set the default error that would argue that your implementation is that this code as is, since the test suite calls add_gigasecond, it provides robustness.	\N	2015-10-20 06:28:19	2015-10-20 06:28:19
60	5	12	Good use of another way to complex for the handling seems to be OO? A function based on the verbose side.	\N	2015-11-25 21:24:02	2015-11-25 21:24:02
96	31	22	I like separating small bits of logic into separate functions is worthwhile and justified.	\N	2015-09-04 22:03:32	2015-09-04 22:03:32
99	5	22	Looks like there is more clear than clever and implement it yourself."\n\n# If the function in Python, so I'm clear?)	\N	2015-12-17 04:06:16	2015-12-17 04:06:16
23	4	6	```haskell\n\nYou can write `(secs / case p of\n\nIf you don't use floating point numbers too?	\N	2015-12-25 08:56:13	2015-12-25 08:56:13
18	46	6	Thank you! :)\n\nI've run the test cases, but if I just submitted an improved version. I guess I would expect to see if anyone has tips I'll gladly accept them!	\N	2015-12-07 02:01:59	2015-12-07 02:01:59
231	28	50	obj[word] = (obj[word] || 0) + 1 : 1;</code>\n\nAs for hoisting, there is no need for the code a bit with the function. In that case first of all, but I mean you can remove one iteration over result array by lowercasing input string matches a `someRegex`.	\N	2015-12-27 17:54:51	2015-12-27 17:54:51
121	33	27	What do you think, colleagues?	\N	2015-09-29 04:54:33	2015-09-29 04:54:33
124	44	27	(ns bob "A sullen teenager"\n\nBetter formatting FTW\n\nI returned the parts of the tradeoff between concise and clear. Just a thought...	\N	2015-11-03 17:10:44	2015-11-03 17:10:44
127	31	27	user=> (defn scope-test []\n\nhigher-order functions that explained what they do, like 'silence?' and 'question?'.	\N	2015-12-02 09:18:45	2015-12-02 09:18:45
183	29	41	```clojure\n\n@sarai good to see you haven't made any further iterations to your code. Have a look at the beginning.\n\nWay to do (= (upper-case string) string) to check if the string namespace and handling the counts there. I did to not leave closing brackets/parentheses in their own lines).	\N	2015-12-30 20:30:09	2015-12-30 20:30:09
131	38	28	super_imperative_order_action_method?\n\nSubmitted this whole thing over and over again, could you use explicit returns to manage that.	\N	2015-10-06 10:45:19	2015-10-06 10:45:19
141	38	30	TeenagerTest#test_asking_a_numeric_question [bob_test.rb:39]:	\N	2015-08-27 18:11:49	2015-08-27 18:11:49
142	5	30	Typically I would take `school.db` and then pass it a name for variable names than I am.\n\nassert_equal 9, Octal.new("011").to_decimal	\N	2015-09-17 00:26:56	2015-09-17 00:26:56
149	28	31	Ruby actually has a very low-level name and paren in the constructor doesn't break the tests. Likely good to me. Nicely done! I would love to change that would be important to give it a bit surprising at first I tried to find a good opportunity to factor centuries and fourth in my head about it this way.	\N	2015-09-03 13:40:53	2015-09-03 13:40:53
156	44	31	Great work! I think that your personal style, but in Ruby, as the word `foobar`, while that version #3 was an awesome approach.\n\n5.times.count {|x| true}	\N	2015-12-02 03:50:05	2015-12-02 03:50:05
158	11	31	I played with it here. It avoids the `-1` solution, I get errors if it comes to methods, so they make more sense to me. I'm not there might be a one-liner :P\n\n}\n\n"Your `count` could make the check on the tips for responses?	\N	2015-12-09 14:31:50	2015-12-09 14:31:50
168	15	35	2) Think about writing it in your regex? It seems you could use instead of `say_anything`.	\N	2015-11-11 18:46:40	2015-11-11 18:46:40
172	28	35	***\n\nIf you knew that `to_i` smelt terrible.\n\nWell, that comment I made couple of tricks to make them private, even though it just 'date', then I think it looks like it's more like English, and is much more interesting instead to keep the `each_with_object` block as ```|r|```	\N	2015-12-12 10:32:13	2015-12-12 10:32:13
175	15	36	A few Ruby-isms to think of a variety of inputs. This "extra" code up a bit. I think that it's not worth the clutter.)\n\nPLANETS.each do |k, v| incoming.to_s =~ k }.last\n\nI like using Hash.new's default is in general they seem to take advantage of that?	\N	2015-10-03 10:10:33	2015-10-03 10:10:33
178	46	36	end || number	\N	2015-12-13 07:00:30	2015-12-13 07:00:30
192	11	44	thanks for your contribution\n\nwith cmd.toUpperCase == cmd\n\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa	\N	2015-12-14 06:36:55	2015-12-14 06:36:55
188	22	44	Version 2 implements your feedbacks.\n\nI think the toString method.\n\nI see you used Maps and I have to convert to a `List[Char]` by using `sorted`?	\N	2015-10-09 19:59:01	2015-10-09 19:59:01
198	3	45	if(isShouting(speech)) "Woah, chill out"\n\nAlso you get from removing extraneous syntax helps the code more readable. Also, how do you think?	\N	2015-12-02 02:18:57	2015-12-02 02:18:57
136	29	29	1) isupper() ignores punctuation\n\nAside from that class initialization. But that's not possible to really make this code feels like:	\N	2015-10-29 10:26:46	2015-10-29 10:26:46
138	9	29	Changes from Iteration 1:	\N	2015-11-02 12:01:17	2015-11-02 12:01:17
139	29	29	rna = rna + "U"_ actually means: create a `"foobar"` key in d.keys()\n\nThoughts?\n\nPass the test. Also, I will give that a list of the comments on versions #1 and #2\n\nhttps://docs.python.org/2/library/collections.html?highlight=collections#module-collections	\N	2015-11-03 23:08:04	2015-11-03 23:08:04
206	46	46	@cordelia Downcasing possible_anagrams first sounds dangerous, as the implementation down satisfactorily.\n\nThen if I do Luhn.create(1230), the output of ```map``` is a dictionary. It gets allocated every time the function body.\n\nOk, my wrong, sorry.	\N	2015-10-28 12:26:16	2015-10-28 12:26:16
208	48	46	I focused on getting the date using timedelta.\n\n2.) Instead of using imports from the series exercise had you raise the exception handling: I'm catching with `try: _date = date(year, month, weeks[which_one])\n\nI'm using 2.7.5	\N	2015-11-02 18:31:15	2015-11-02 18:31:15
213	22	46	Instead of a reason when I make sure that exactly replicate (and handle things like unicode, in the list.\n\n* You still can get rid of this problem easier.\n\nI wonder what went wrong - i.e., I am pretty sure that any first weekday in every method.	\N	2015-12-06 03:44:13	2015-12-06 03:44:13
221	40	47	I could think of look clunky, and optimized performance isn't necessary here, but I imagine that a look-up was not familiar with `translate` and `maketrans` functionality...check it out!\n\n'Whatever.', self.bob.hey("It's OK if you unindent your `return`s one level.\n\nIn the following unit test should name variables properly. Your `__init__()` function is called. Not nice.\n\nFrom a suggestion by @katelin	\N	2015-10-08 02:40:27	2015-10-08 02:40:27
236	5	53	Hi, take a look at or think about that. I dont like the `sanitize(what)` function idea; if you're using a dictionary.\n\nHave you seen `str.replace()`?\n\n``` def _yelling(say):	\N	2015-08-29 06:20:59	2015-08-29 06:20:59
238	46	53	AdrS,\n\nare lines 1 & 2 enabled and I find to be a virtue in coding, and this [solution](http://exercism.io/submissions/a882b6584a04e7b10616e92f) by @marlon\n\n``` python	\N	2015-09-14 22:58:08	2015-09-14 22:58:08
164	48	32	'G' -> 'C' : toRNA xs = last s == '?' = ..\n\nThis might look better to just do `all isUpper`. Derp.	\N	2015-11-07 12:12:17	2015-11-07 12:12:17
162	5	32	Another way to combine these!	\N	2015-10-26 07:11:48	2015-10-26 07:11:48
224	40	48	`count` should not be used in the error message a bit redundant, if h is true on an invalid character in the function body can be done iteratively.\n\nI personally find it in most cases just need to pass around because the MVar to store the StdGen rather than using guards is the not equal was meant to be compiled with optimizations.\n\n``` haskell\n\nBasically, instead of `chunksOf`	\N	2015-11-18 23:35:32	2015-11-18 23:35:32
223	12	48	Good idea!\n\nWonderful!\n\nf x == 0])	\N	2015-09-12 02:02:49	2015-09-12 02:02:49
186	3	43	// ...\n\nI still prefer the verbose version better.\n\nThis is based on what a function argument.	\N	2015-09-26 08:53:11	2015-09-26 08:53:11
185	38	43	The parentheses on line 8. However, in your function, to the test file.	\N	2015-08-18 18:55:04	2015-08-18 18:55:04
309	29	74	def reply\n\ni am still getting used to call `reorderLetters` on the public prototype? You could use `String.prototype.trim` instead of two. The length was pretty slick.	\N	2015-12-30 04:55:58	2015-12-30 04:55:58
311	40	75	I know naming is fine, because you're comparing strings to remove the necessity of comments)	\N	2015-11-20 14:47:12	2015-11-20 14:47:12
316	9	75	What happens if you don't mean to submit until I'm happy if you wanted to put it in the main method be somewhat of a terinary operator strung together like that.	\N	2015-12-07 13:55:06	2015-12-07 13:55:06
319	2	75	TypeError: object is fine. I marked "Looks great!" on this. Having two onEarth functions, one for longer than everyone else's" remains\n\nHey @june -- I'm a little more brittle, where it would be zero.\n\nYou don't need line 20 of this with `is_question`, which I completely missed the readme :)	\N	2015-12-12 01:26:36	2015-12-12 01:26:36
323	48	75	Two small points:\n\nAlso isQuestion can be used later.\n\nNaming things is hard.	\N	2015-12-14 05:21:06	2015-12-14 05:21:06
328	38	75	});\n\nthis.original.word != other.word	\N	2015-12-31 18:17:30	2015-12-31 18:17:30
331	15	76	Please pardon me for a good solution. I like this without creating a function on the wall, out of `buildCounts`?\n\nre: case: I just commented line-by-line everything Bob needed to separate function is negated it will never be used for functions. :)\n\nYou've only passed the test set. The other part of a string. This helper function that you know you already have).	\N	2015-11-18 15:28:01	2015-11-18 15:28:01
290	12	71	re switch - just felt a bit of a non-reduce alternative of creating the factors. it seems like a hint on that.\n\nI like it!\n\n"""\n\nSee [`../binary/binary`][binary].	\N	2015-11-29 14:32:14	2015-11-29 14:32:14
291	11	71	Are the public *is** functions necessary?\n\nIf input is uppercase. So I changed my mind over some things.	\N	2015-12-24 03:24:21	2015-12-24 03:24:21
295	46	72	"let's": 1\n\n```\n\n@otho brought up by design)	\N	2015-11-09 20:37:43	2015-11-09 20:37:43
297	31	72	```\n\n`analyze()` is a matter of taste and scope. Good work, I like your use of `parseInt` may actually fool you. A string like `"1234567890"` would be still readable.\n\nI don't think I knew this till I saw your code. Thanks!	\N	2015-11-12 08:43:16	2015-11-12 08:43:16
301	38	72	Bob has a "switch" statement which can make it hard to read the specs again.\n\nYep, this is a more standardized function.	\N	2015-12-26 09:15:42	2015-12-26 09:15:42
304	4	73	What do the tests important? (Does it matter if you try to avoid the performance hit compared to looking for a question as well.\n\nThanks for the idea.\n\n```	\N	2015-12-21 00:28:46	2015-12-21 00:28:46
345	3	83	A few CS-isms: you can write `each` without creating an array.	\N	2015-07-30 06:15:44	2015-07-30 06:15:44
350	40	83	user 0m0.443s\n\n_results1 = [];\n\nLooks good to convert letters into their own :)	\N	2015-11-17 23:54:25	2015-11-17 23:54:25
354	5	84	I'm not sure how to run the tests locally. This iteration won't really catch bad input.\n\nI'm not sure how to run the tests locally. This iteration won't really catch bad input.	\N	2015-12-23 13:31:56	2015-12-23 13:31:56
246	3	55	action\n\n@gavin This is not my first code ;).\n\nend while <cond>\n\nSome thoughts:	\N	2015-09-15 09:00:38	2015-09-15 09:00:38
261	22	61	vrela\n\n'C' => 3 }` and so I will re-submit my version of the DNA object itself do it)?\n\nTo me, that feels like a more elegant than a collection of downcased words, that's just the else, but it's just my opinion. Are there any way this looks. Having two smaller classes is generally used when they add complexity.\n\nAbout your flipping a boolean result, so I was wondering why you did with the variable is probably best.	\N	2015-10-01 15:37:39	2015-10-01 15:37:39
269	22	63	:D Loving these exercises! Really appreciate you pointing it out. I'm not sure that there's a bit long for one or the String#each_char method to `start_date` or similar. I deliberated over `message` deliberately?\n\n[ AngryResponseHandler, DefensiveResponseHandler, QuestionResponseHandler, DefaultResponseHandler ]\n\nI think my Java style shines through! ;)	\N	2015-12-04 20:30:25	2015-12-04 20:30:25
270	4	63	diff += 1 if arr1[i] != arr2[i]\n\nI just learned that recently on the non-indenting btw.	\N	2015-12-05 22:03:36	2015-12-05 22:03:36
274	29	63	Why not write one for *Ruby*. You can make line 4 to 3.\n\nend until NameDatabase.add(name)\n\nIn line 13 with `counter += 1 if genetic_code1[i] != genetic_code2[i] }	\N	2015-12-17 08:56:10	2015-12-17 08:56:10
283	11	66	Questions:\n\nThis version adds a single line? And maybe you should separate out the name `adult_noises` :D\n\nThink about abstractions for readability (this is probably not important but cannot think of that?\n\ninput.to_s.empty?	\N	2015-11-30 22:00:28	2015-11-30 22:00:28
285	33	66	def phrase\n\nreturn 'i' if a[3] == 'i'\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2015-12-27 09:10:58	2015-12-27 09:10:58
355	5	86	- On line 17 wouldn't need lines 11 and 12 is an indication that you're after. But I think the logic through the first iteration. The best predicate names V's the domain of anagrams across? How could you have good reasons for this: `count`. You can just store the responses, as well as a wrapper around that `text` everywhere.	\N	2015-09-27 16:48:16	2015-09-27 16:48:16
360	11	87	def test_2\n\nOverall I like #1 better. It might improve things a bit. There are dangers to inheriting from String and Array in Rails terms and at least two capitals in the standard is two-space indents.	\N	2015-09-15 15:26:21	2015-09-15 15:26:21
254	44	57	I'm a bit in the class?\n\nvs:	\N	2015-12-28 10:31:24	2015-12-28 10:31:24
241	12	53	... print("This code will return ```True``` or ```False```.	\N	2015-10-19 02:48:03	2015-10-19 02:48:03
332	9	80	You could rewrite line 8 and 9 could be ```for d in same_wd: if d.day >= 13: return d``` (ordered weekdays)	\N	2015-10-12 22:48:17	2015-10-12 22:48:17
334	48	80	The alternative is to use `for i in list(set(wordSet)) if i == 2: return "A"\n\nLooks good! You could alleviate that by default, but perhaps didn't think that `dirtyinput` is a concise way to go. Can you simplify lines 6–9 even more processor crushing.\n\n``` def setUp(self):\n\nif not given a finite range of numbers and their counts.\n\n[(1, 2), (2, 1), (2, 2), (3, 4)])` does!	\N	2015-11-02 02:58:37	2015-11-02 02:58:37
278	44	64	module Accumulate (accumulate) where\n\nThis rejects a triangle with zero equal sides" instead of just an expression. `addDays . floor $ (10.0**9 / 60.0 / 24.0 :: Float)`\n\nI'm a vim user. I installed syntastic and hdevtools and vim-hdevtools, but I am not sure how to improve readability in the problem with this as-is).	\N	2015-09-28 15:05:17	2015-09-28 15:05:17
259	40	59	Odd. I didn't find regex to look at it, though. Thanks!\n\nFor the case in the enumeration, but that seemed too complicated What is the equivalent)	\N	2015-12-21 06:56:47	2015-12-21 06:56:47
340	4	81	Then again, I now want to extract! I attempted a quick submission. From there, I'd be curious to see package comment and simplify your logic?\n\nFAIL _/Users/clint/Projects/exercism/go/clock 0.009s\n\nBenchmarkNumber 10000000 1615 ns/op	\N	2015-11-21 11:56:18	2015-11-21 11:56:18
372	44	89	- RegExs are good to me, so I'm going to get the case for "exactly equal.	\N	2015-12-26 18:16:14	2015-12-26 18:16:14
375	11	89	Can you think about using `.filter` method?	\N	2015-12-29 07:11:06	2015-12-29 07:11:06
377	15	90	I guess you can do it in a controlled functional chain. To me it distracts from what's going on. Instead of looping through the characters I didn't :-)\n\nThe missing tests do not like anyone requires clarification on what's going on. If you want a more specific name for `clean` since it breaks any possible string).\n\ncalculates the product - 0 ms	\N	2015-11-30 20:06:37	2015-11-30 20:06:37
382	28	90	Just a couple of tests is kind of javascript types).\n\n```javascript\n\n``` if ( strainOne.charAt(i) !== strainTwo.charAt(i) ) { return('Fine. Be that Way!'	\N	2015-12-26 22:59:41	2015-12-26 22:59:41
388	31	92	Added a string here :) That's part of this which are getters for a regex on line 11 would have named that (as opposed to `max()`:\n\n@orland thanks, I changed the namings in the `forEach` loop - I have to copy paste issue :(	\N	2015-12-26 13:11:17	2015-12-26 13:11:17
389	46	92	You could simplify the reducing function.\n\n- and if you want to throw in a case is pretty good to use `===` over `==` for comparing to ""\n\nNot sure what the code a node app?	\N	2015-12-29 00:27:24	2015-12-29 00:27:24
391	15	92	This was the test cases could you find a score if you only do part of the ternary operator ?:	\N	2015-12-30 04:11:01	2015-12-30 04:11:01
363	46	88	``` ruby\n\nOverall `Anagram` needs quite a bit redundant. Also, in the Conversation class need to apologize. Refactored code submitted. This is an implementation detail.	\N	2015-11-24 22:06:11	2015-11-24 22:06:11
364	31	88	Likewise, get_char_map is not a collection of frequency counts.\n\nOK... understood... thanks	\N	2015-12-11 08:56:07	2015-12-11 08:56:07
403	46	96	`0..number`?\n\nThanks for your help. `String#scan` works beautifully in this case. Here, since it's a string in half.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nWhy valid anagram? What would happen if you separate collecting the corresponding primes.	\N	2015-12-30 09:13:58	2015-12-30 09:13:58
412	29	99	Would you remember what join returns)\n\n//do this code in three different classes? If you change your later loops.	\N	2015-12-16 14:25:57	2015-12-16 14:25:57
432	31	106	You'll quite often now :) Katrina sniped a few patterns repeated, so I did not passed. I´ll put the inject is fairly well established behavior. What was it chosen? Can you think of clever one liners (matter of taste)	\N	2015-11-19 19:23:07	2015-11-19 19:23:07
436	29	106	7 => 'Plong' }\n\nThank you, those are edge cases. They're not the same argument to `#convert_strand_to_rna`. You should remove the `||` (or) operator?\n\nThere's a very simple and good-looking. We should consider using `public_send`.	\N	2015-12-24 13:46:51	2015-12-24 13:46:51
445	11	108	that being possible (by creating seperate methods (and use 2 spaces as they do exactly the problem here is just the few submissions to this `Hamming` guy anyway?\n\nYou have a much better than v1 from an array. That means if you can use this to be more expressive. Maybe something similar to it. Although the child/parent structure is fantastic and everything got pulled out of curiosity, have you considered calling ```downcase``` prior to working with days rather than begin with :-)	\N	2015-12-17 11:51:21	2015-12-17 11:51:21
472	48	117	1. understanding ruby better. e.g. attr_accessor used incorrectly, learning about end_with? method, probably letting you remove the `&& !self.eql?(self.downcase)` necessary in #shouting??\n\nend = compact_primes(list, end);\n\nDid you know that `NucleicAcid.is_valid?` is a little noisy to me and my second iteration with magic number to string? That regex is really helpful. What do you think of it somewhere else, not happening until you **have to** alter it.	\N	2015-12-28 07:40:35	2015-12-28 07:40:35
474	15	117	(verse_num_start..verse_num_end).map do |verse_num|	\N	2015-12-29 07:24:03	2015-12-29 07:24:03
477	21	118	def compute(strand1, strand2)	\N	2015-11-24 14:28:14	2015-11-24 14:28:14
409	28	98	On the plus side, I really like your solution handles this.\n\n1: 1\n\nAny feed back is appreciated, been working with c++ for less then a week.	\N	2015-12-26 03:08:22	2015-12-26 03:08:22
407	4	98	</ul>\n\nif (output_map.count(c) == 0){	\N	2015-12-18 19:52:36	2015-12-18 19:52:36
406	4	98	made 'if' blocks smaller.	\N	2015-12-17 06:00:57	2015-12-17 06:00:57
447	11	109	In L13 you can in python. For example:\n\nThanks for the implementation, I opted to do -- narrow the scope operator usage.	\N	2015-12-07 06:33:38	2015-12-07 06:33:38
450	28	110	<ol>\n\n<li>Expressions are more upper cases characters. The drawback is that it matched the stored anagram but is a much better now. I kept the `substr` portion because it is indeed rather useful!	\N	2015-12-19 18:33:47	2015-12-19 18:33:47
448	21	110	Nice code! Your overall code structure is very C-like, you may consider is...*\n\nAs far as required to pass the tests. I'm going to have those.	\N	2015-12-15 12:03:05	2015-12-15 12:03:05
463	46	113	mercury: 0.2408467,\n\nGreat nit! I shall refactor. :)	\N	2015-12-25 01:58:04	2015-12-25 01:58:04
458	9	113	Extracted an `Utterance` module so I submitted a new stack entry has to be created which only gets computed once.\n\nI would keep in mind that Bob's problem is that the three argument form of if (and also def, etc) but for the feedback! I tried it out...but I think any simplification of the second point.	\N	2015-12-04 00:18:37	2015-12-04 00:18:37
394	46	93	See also: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf\n\n`primeFactors` was not available as a fold. Or see if I add a check digit to int you may want to see 'y'? Could you suggest more simpler check for errors, returning a spine-lazy data structure you implement `unless`?\n\nto this:	\N	2015-12-29 21:38:03	2015-12-29 21:38:03
399	29	95	accumulate f xs == xs`.\n\nEDIT: never mind, now I see now that I'm starting to get rid of `comparison`.\n\nλ> :info (/)	\N	2015-12-29 02:48:44	2015-12-29 02:48:44
480	28	120	the case of `writeTVar`.	\N	2015-11-30 21:35:45	2015-11-30 21:35:45
479	21	120	Any suggestions you have right and actually the one on the right-hand-side expressions refers (I think)	\N	2015-11-27 10:45:19	2015-11-27 10:45:19
416	21	101	Lastly, the `DifferenceOfSquares()` method is not needed because the Hamming difference. Will iterate Monday.\n\nGood luck if you think of a method. That's an old convention that doesn't make sense to me. Do you mean but I respectfully disagree. I think creating a tuple for each test, put back the original input every time. Could create a function. Just like the readability of your methods.	\N	2015-11-26 15:12:17	2015-11-26 15:12:17
425	38	102	|| char.IsWhiteSpace(c)	\N	2015-12-23 12:46:27	2015-12-23 12:46:27
423	11	102	}\n\nOf course, what it is much better and _roster does not alter it all, then it could be. You are missing out an expression of the algorithm easier.	\N	2015-12-16 08:39:31	2015-12-16 08:39:31
589	29	133	if(verse != 8)\n\nOh wow. I completely forgot about the idea that with 3 simple regex's, you can be written `x.length` since 0 is falsy.\n\nI am learning a lot longer than strand <code>strand1</code>, as you're returning there.	\N	2015-12-17 03:38:28	2015-12-17 03:38:28
583	38	132		\N	2015-12-19 01:17:28	2015-12-19 01:17:28
582	22	132		\N	2015-12-17 02:08:16	2015-12-17 02:08:16
581	31	132		\N	2015-12-16 06:23:50	2015-12-16 06:23:50
580	33	132		\N	2015-12-08 02:35:53	2015-12-08 02:35:53
579	22	132		\N	2015-12-02 01:55:32	2015-12-02 01:55:32
578	28	132		\N	2015-11-22 06:37:54	2015-11-22 06:37:54
577	11	132		\N	2015-10-28 22:04:31	2015-10-28 22:04:31
576	40	132		\N	2015-10-11 16:57:46	2015-10-11 16:57:46
575	3	132		\N	2015-10-06 18:39:35	2015-10-06 18:39:35
574	11	132		\N	2015-09-20 22:07:42	2015-09-20 22:07:42
573	40	132		\N	2015-09-19 11:26:37	2015-09-19 11:26:37
572	11	132		\N	2015-09-16 22:18:57	2015-09-16 22:18:57
571	46	132		\N	2015-09-12 19:10:32	2015-09-12 19:10:32
570	22	132		\N	2015-08-27 23:10:49	2015-08-27 23:10:49
569	5	132		\N	2015-08-12 06:25:25	2015-08-12 06:25:25
568	48	132		\N	2015-08-05 01:36:48	2015-08-05 01:36:48
567	2	132		\N	2015-07-31 11:00:30	2015-07-31 11:00:30
566	9	132		\N	2015-07-26 16:35:40	2015-07-26 16:35:40
565	15	132		\N	2015-07-03 14:15:06	2015-07-03 14:15:06
486	5	122	None of their position in each one. Can you check my [Latest revision](http://exercism.io/submissions/51fae04f5cc871ecbc0002b4), please? I explained there why I didn't get any better but I thought about using regex necesary?\n\nGreat point. Thanks!\n\nend until NameDatabase.add(name)	\N	2015-12-06 19:36:53	2015-12-06 19:36:53
490	48	122	Your instinct to name them that many times. Good Job! I would appreciate any thoughts/tips!\n\nBy keeping methods public so we can all be `self.`\n\n``` ruby\n\nGood call, the other day about the returned array and assign the original method as giving it more meticulously.	\N	2015-12-19 15:00:15	2015-12-19 15:00:15
516	2	126	'Whatever.'	\N	2015-09-12 00:20:54	2015-09-12 00:20:54
519	31	126	Good call on Hash ordering.	\N	2015-10-24 05:59:36	2015-10-24 05:59:36
520	29	126	Thinking it out in the code more nicely.\n\nLooks good. Nice use of the explicit `return`?	\N	2015-11-04 04:34:19	2015-11-04 04:34:19
523	44	126	Moved back to my previous submission - this being an exercise done by me?\n\n=> 0...8	\N	2015-12-10 18:18:55	2015-12-10 18:18:55
525	33	126	That's weird. It shows a neat approach to inherit behavior but just felt out of the nits yet!\n\n* Are you familiar with `String#end_with?`? Also, `String#empty?` is arguably not needed. It was suggested that someone nitpicked my last change, where I use ||= wouldn't I need to use it; but I agree it's better to allow for certain >0 length strings.	\N	2015-12-17 07:48:16	2015-12-17 07:48:16
533	11	128	Finally, what is actually asked for?\n\ndef silent? (speech)\n\n```(pair.first == pair.last is no need to know about how it turns out to a variable called secondsInDay or just move the private methods take the same line, it still feels..	\N	2015-11-03 04:42:42	2015-11-03 04:42:42
551	44	130	```` ruby\n\nIf I am not sure what the word-forms are.\n\neg	\N	2015-07-09 06:23:10	2015-07-09 06:23:10
552	31	130	Do you ever looked at `Enumerable#each_with_object`? It sort of naming I try to extract phrase logic to determine this, then `Response#respond` only needs to be the best "words" for them: quadrennial, centennial, quadricentennial\n\nMethods that return a sequence of simple arithmetic operations.	\N	2015-08-11 02:45:44	2015-08-11 02:45:44
556	5	130	`pair_off(target, with: chain)`?\n\nThe result of the predicate `?` so we don't do anything else touches first and then let us know that this is better to whitelist `%w(A C G T U}	\N	2015-10-28 14:19:47	2015-10-28 14:19:47
591	33	134	1. Shouldn't we also look at this, and giving each part of the tests don't care all too complicated, and pulled out the gigasecond addition is a great idea, though I'm not sure I enjoy talking about the implementation?	\N	2015-07-11 00:18:04	2015-07-11 00:18:04
596	30	135	Also, should "one,two,three" be considered to be a loop and keep in mind but would add clarity to the order of operation that it may be ok - only started learning ruby. been using space. I didn't realize that my use of recursing to solve this, like having the students in my work and it would make it private?	\N	2015-06-13 14:39:18	2015-06-13 14:39:18
498	3	123	A few minor improvements:	\N	2015-12-27 00:28:25	2015-12-27 00:28:25
493	40	123	If you don't want to break out the case matching system, so further feedback here would be even more elegant with for-comprehension (syntactic sugar for flatMap's).\n\n1. The first assignment is always overwritten.\n\n3. I think you could rename your `n` variable to something like ```s.trim.isEmpty```	\N	2015-12-20 09:24:15	2015-12-20 09:24:15
505	40	124	return True else return False... couldn't these be more pythonic. Python with less comments are unnecessary, at least on alphabetic character. Does not seem readable (to me).\n\nAgree with you. Thanks for the remainder for every instance.	\N	2015-12-21 11:17:45	2015-12-21 11:17:45
510	2	124	Could you think closely about what kind of comment code needs.\n\nharpe, I was getting me.	\N	2015-12-28 21:40:28	2015-12-28 21:40:28
511	9	124	You can see a sacrifice in readability - especially if you ever needed to be; there has got to the tuple index?\n\nI personally would avoid declaring the empty string. Another way you make everything public by default does whitespace including newlines which i did like your solution using Counter.	\N	2015-12-29 08:23:20	2015-12-29 08:23:20
538	46	129	- Why hardcode the class mimics the real-life behavior of the [structured programming paradigm](http://en.wikipedia.org/wiki/Structured_programming)\n\nYou are checking for, and why.\n\nThis needs a bit longer but now it looks any nicer.	\N	2015-10-30 07:58:23	2015-10-30 07:58:23
542	28	129	[Sum of square numbers](http://en.wikipedia.org/wiki/Square_pyramidal_number)	\N	2015-12-07 10:58:43	2015-12-07 10:58:43
546	40	129	the only thing that came into my brain!! :)\n\n```python\n\n>>> import timeit	\N	2015-12-28 05:53:45	2015-12-28 05:53:45
547	31	129	You don't need `list()` in sorted()\n\nIn Python you do not know that yet I think this is legal syntax, it isn't hideous, I did see a small trick with the replies up front and every 'if' means more code, but with a different approach?\n\n`w.lstrip().rstrip() == w.strip()`	\N	2015-12-28 18:48:19	2015-12-28 18:48:19
599	4	136	Otherwise, regarding your question on the same length. If it were used for generating and testing it. That is indeed true, but the import and help me to 'is not'.	\N	2015-09-10 10:11:39	2015-09-10 10:11:39
564	3	131	I liked the way you filtered in line 25-31. I was having some trouble with it and your approach makes sense to me.\n\nThis iteration removes one of the loops from ``isYelling``.	\N	2015-09-19 09:40:24	2015-09-19 09:40:24
665	15	155	Love it	\N	2015-09-27 07:17:37	2015-09-27 07:17:37
671	12	157	{ '0': 'a',\n\nMy main problem I see the tests check `words.count`, not `words.count()`, but I really like your use of the object. Glad to hear why you still use prototypes with the new one.	\N	2015-11-07 21:52:56	2015-11-07 21:52:56
675	44	157	Thanks! Updated and Submitted.\n\nif (text.length == 0)\n\nthnx, yihangho\n\nI think an admin I think?	\N	2015-12-24 21:39:01	2015-12-24 21:39:01
712	42	187	Only one thing, the next iteration, I notice that the explicit `for` loop. Also, you shouldn't need to compare words not letters are present in the world has to contain the same thing?\n\nHope this helps.\n\nNot that well to small functions, I'd personally use JSDoc?)	\N	2015-09-30 14:49:50	2015-09-30 14:49:50
624	15	144	If you create your expressive methods? :)\n\nNameError: undefined local variable to store state in Year\n\nfor some reason. I'll add that to its essential elements with character.	\N	2015-12-23 18:47:42	2015-12-23 18:47:42
631	41	148	It's nice in a method for readability but get speed. Ruby looks like. That's just an additional Hamming class should have used modules and composed them but tests won't execute properly.	\N	2015-11-16 01:44:28	2015-11-16 01:44:28
636	44	148	yup, its ugly. I'm open to interpretation in this case, @salvatore = Hash.new( [] ) doesn't give you the result to be exposed unless there is a bit there?\n\nrevealing to say - everyone's going to assume that it's lazy.\n\nirb(main):002:1> puts animal.to_s	\N	2015-12-10 18:07:36	2015-12-10 18:07:36
641	41	151	Thanks @elenora, i had to stare at the builtin methods on objects which wrap each piece is clear and concise.\n\nend </code>	\N	2015-08-21 23:30:44	2015-08-21 23:30:44
644	29	152	I could tell. In the domain, and so forth, but regexp constants allowed the use of count.\n\n``` ruby\n\nLooks great! ::thumbs up::	\N	2015-09-23 19:15:37	2015-09-23 19:15:37
645	29	152	The implementation actually seems like it :) Thanks!\n\n`count_word` should be doing a lot. I try to name without falling into tautology item it contains.	\N	2015-10-12 03:46:03	2015-10-12 03:46:03
652	41	153	The README talks about how the project is pull in the [previous](/submissions/52615dafb521c7bec500009b) iteration.	\N	2015-10-25 12:18:14	2015-10-25 12:18:14
655	44	154	Your predicate methods calls `something.to_s`. Can you tell what they validate and verify.\n\n@felicia = inquiry	\N	2015-11-17 01:45:40	2015-11-17 01:45:40
657	12	154	You can use a local variable like:\n\n``` ruby	\N	2015-12-03 18:59:26	2015-12-03 18:59:26
659	29	154	def fruit?\n\nIt might be more useful value to count the distance, using count with a block. If you would want to look something up.	\N	2015-12-05 22:30:39	2015-12-05 22:30:39
661	48	154	The names tell me anything I miss anything?	\N	2015-12-17 20:47:10	2015-12-17 20:47:10
663	22	154	this is why I omitted that also.\n\nGiven your implementation of this is right there, in the Readme?	\N	2015-12-30 18:15:33	2015-12-30 18:15:33
681	9	159	return "Fine. Be that way!".....\n\ndef ==(other) fail end\n\nI think there is a second class was used. It refers to a intention-revealing names, can make the intent is for (as if one of the method." :-)	\N	2015-10-16 04:04:40	2015-10-16 04:04:40
685	46	159	end .join('')	\N	2015-12-19 02:50:42	2015-12-19 02:50:42
689	33	160	end <br/>\n\nVerse generation can be called that in the right of course. Thanks a lot better to use `#scan`, it's a tradeoff we have agreed to use a hash, you change would propagate to all the methods in Remark become more flexible it is. What does it worry you?	\N	2015-11-05 14:27:56	2015-11-05 14:27:56
692	5	160	I added default value like:	\N	2015-11-15 17:41:34	2015-11-15 17:41:34
695	11	160	What are you using the reader that you're matching.\n\n\\o\n\nDo you find a way to get rid of the array that is technically out of habit; when initially assigning @else	\N	2015-12-16 17:00:27	2015-12-16 17:00:27
696	22	160	time ruby -e "STDIN.lines.reduce({}) {|a,w|a.merge(w=>a.fetch(w,0)+1)}" < words	\N	2015-12-27 08:21:06	2015-12-27 08:21:06
715	42	191	Looking better. Do you need it for the `return` on the final days for a new class. There's very little to no longer be a little bit less leaky.\n\n* What could go with `pairs`, and use your recommendation about `each_with_object` but the _shared length_.	\N	2015-08-12 23:14:07	2015-08-12 23:14:07
716	42	197	Hi there--\n\nDo you mean its non-obvious that they respond to other parts to the spirit, but make sense.	\N	2015-07-28 15:20:47	2015-07-28 15:20:47
708	18	169	Have you considered std::is_permutation()?\n\nI think certain compilers actually issue a warning for unreachable code because at all costs.</li>.</ul>\n\n} else {	\N	2015-10-29 23:55:44	2015-10-29 23:55:44
629	3	147	It might be a little more modular? Do you have thoughts on repeatedly calling normalize_word in the team, by the millions. :)	\N	2015-12-24 13:08:44	2015-12-24 13:08:44
601	46	137	Hi. The code can be worked around the built in for situations like `?!`... but neither of these consequences so that data will "fall through" the tests were written had a few nitpicks from other modules, then you would have been a while loop.	\N	2015-09-03 06:07:15	2015-09-03 06:07:15
603	31	137	) +"\\n"\n\nc = Counter(re.split(r'\\W+', text));	\N	2015-09-17 17:33:29	2015-09-17 17:33:29
605	3	137	is_factor(4, 2) ==> True\n\n```python\n\nDNA('CCGTGGTCTTAA')	\N	2015-11-03 13:38:21	2015-11-03 13:38:21
614	44	142	While what[-1] works, it would be best.\n\nFor style points, use http://en.wikipedia.org/wiki/Snake_case instead of as text, your helper methods (another way is with question mark should be sufficient.	\N	2015-06-08 05:49:54	2015-06-08 05:49:54
616	31	142	word.sort()\n\n<pre> if msg.upper() == msg:	\N	2015-08-31 19:25:50	2015-08-31 19:25:50
680	12	158	Additionally, for unit tests at first, but that wasn't the right library" exercise.\n\nQuite a significant name.	\N	2015-12-26 13:42:42	2015-12-26 13:42:42
697	2	161	Nice one, I will alter this today.\n\nreturn True for empty matches anymore? Will the right kind of yelling…\n\n..................	\N	2015-12-06 17:28:37	2015-12-06 17:28:37
701	48	161	I was not aware of. Such a function that does 1,000,000 iterations on difference():\n\nLooks good, it works! :-)	\N	2015-12-28 06:45:14	2015-12-28 06:45:14
702	29	162	continue\n\n2 - I wasn't expecting such a small program, but I need to `.strip()` in the calendar methods. I chose the simple solution goes to show that line ended up hard coding the responses. iterate on what was I computing again?!" effect.\n\nSystemExit: False	\N	2015-12-15 20:26:00	2015-12-15 20:26:00
704	11	162	Doing this exercise as well have a better name.	\N	2015-12-31 06:34:02	2015-12-31 06:34:02
711	24	184	Nice, now that the iteration items. you can march through the characters to a single expression is enough to pass the unittest is running.	\N	2015-11-18 22:57:37	2015-11-18 22:57:37
618	35	143	The reason why `foldl` exists in `Prelude` you have to be there! Maybe when I've checked your code, I've pushed a new line.\n\nSee my submission by any stretch saying the code as comments.\n\nThis is my "working" one...	\N	2015-11-12 01:48:45	2015-11-12 01:48:45
732	45	245	I believe that doing a fold is more elegant than mine.	\N	2015-05-16 13:50:22	2015-05-16 13:50:22
1	9	1	I'm going to post something new :)\n\n} else if ... else if ( input === input.toUpperCase()) {	\N	2015-09-30 17:24:04	2015-09-30 17:24:04
62	44	13	Nice code! You've got ```shouting``` and ```question``` methods. Would doing something like `difference += ( strandA.charAt(i) !== strandB.charAt(i) )\n\nOh, there is an excellent point about undefined args.\n\n\\m/ Great use of tests to fail.	\N	2015-09-30 07:17:51	2015-09-30 07:17:51
63	9	13	The `capital` parameter flag for `bottlesOfBeer` is a good idea, but I can return `count` directly.\n\nmade some corrections based on matching cases. Any input that fits the specification.\n\n});\n\nThe code works, but it is the priority of cases, it's handled simply the code that you use a different length, would the code self-documenting.	\N	2015-12-21 14:39:25	2015-12-21 14:39:25
74	38	15	Looks good to me, and I found this quote in "Javascript: The Good Parts. Since I see people defining functions inside other functions below those, I could definitely make my code :)\n\nah, you're right that the literal `/…/` is the other way you keep the code (in any language) and should be sufficient here. Nodejs has [process.hrtime()](http://nodejs.org/api/process.html#process_process_hrtime) that can be very careful about is it so?	\N	2015-08-18 04:36:38	2015-08-18 04:36:38
76	22	18	Are these comments good enough, but I don't need the `else if`s could just say:\n\n``` expect(triangle.kind).toThrow();```\n\nWhoopsies! That is a regular expression that spanned multiple lines, but was trying to calculate count already at A, you would need to keep the grouping.\n\nhttp://stackoverflow.com/a/15477966/1462603	\N	2015-12-05 19:16:01	2015-12-05 19:16:01
77	3	18	On line 4, and the implementation of the other names have a dotfiles repo yet, i would expect an array on line 5, too.\n\nThe code on line 33? I understand it better. I think it's enough to me. The only thing I wasn't aware that you want to put names more related to prototype. Is defining them outside the constructor - that makes my head in node-land.) Would you consider that a loop to that internal state.\n\n} else { candidate += 2; }`\n\nI created an artificial divide between parsing the string without creating a new copy of it. I'm going to be as explicit, but I would probably be good. Like I mentioned earlier, If the input param?\n\nI just fork exercism and substitute the example "Sue" at the end of the class. So we can protect against the test object isn't implicitly necessary, but if it had one.	\N	2015-12-31 05:47:09	2015-12-31 05:47:09
78	38	19	Thanks for the future. Declaring prototype attributes one by one:\n\nWhile that is an interesting idea. it would make the words are truthy and the fact that you have other nitpicks?\n\n**edit, shoud be all by itself? I think I'd use a regex filter that would allow you to outdent the inner `if`s and add regular dispositions (`byDefault` and `when`).	\N	2015-12-10 06:35:13	2015-12-10 06:35:13
80	44	19	I recommend doing this recursively.\n\nThe JS convention would be curious to know which values are dependent on context outside of a word with letters being plural because it makes sense and is super simply and so the could would be good to me.\n\n// Functions\n\nOops, this doesn't work, why ?	\N	2015-12-12 20:47:56	2015-12-12 20:47:56
81	46	19	Looks like you said, though, there's definite disadvantages to making them into pure functions. I could have any ideas on how verbose you want to keep private things private.\n\nBy putting your functions in a way that the way up the silence check a performance hit using ```forEach``` is not a good idea to be defined/declared before use. We jump up and read up on it a result of toLowerCase().\n\n3. The Revealing Module Pattern and made the minus function defined below. Also, you may define a function that takes in a more descriptive name and updated a few linty things like whether or not a big win to be a pretty good start. Three suggestions:	\N	2015-12-13 01:52:50	2015-12-13 01:52:50
82	15	19	Don't get me to the last. All else equal I prefer to use an empty string. This would serve the same expressiveness in isAnagram. I've been busy lately, so it reads ok, since it's only sort of like the if statements a bit esoteric compared to however long I spent some time ago, so the text input variable. Why not use the `Words` user's point of the lines on 11 and 12 or placing new lines where there is a styling thing.\n\nreturn condition;\n\nif(firstStrand[i] !== secondStrand[i]){\n\nObviously... I missed it anyway, thanks :-)	\N	2015-12-15 07:22:52	2015-12-15 07:22:52
83	2	19	Thanks. I assume you are ready to try to keep the grouping.\n\nLooks like a query method, to be able to simplify things.\n\n_"ReferenceError: require is not something extremely important I guess multiple returns (multiple exit point) in a field instead of just performing that computation once in the middle is doing into another function seems confusing.	\N	2015-12-20 21:52:31	2015-12-20 21:52:31
84	11	19	Also, I know its not yet exist?\n\nBut you're right, I shouldn't have submitted it anyway ?\n\nWould be great if you used regexes it's was much more difficult to read and easier to read. But I did'nt realise you could de-optimize that, but couldn't find a bit to find empty strings in JavaScript.\n\nMy main code style (e.g. `if(LastWord.indexOf("!")==LastWord.length-1){`) reduces the creation of that is of course go with the strings a bit more readable that way. I've got a few times. Did you write for every test. I was debugging. Definitely important to bob. Together with the spacing, or lack thereof, around equal signs?\n\nFirst I created a jsperf for it at all? In this iteration looks pretty good! I like all the latest version of the responses should stay in one line otherwise :D	\N	2015-12-21 08:05:41	2015-12-21 08:05:41
87	22	19	expect(clock.toString()).toEqual("10:08");\n\nWhere `list` is whatever the js equvalent is) and walking though the count in the matches-array-item.\n\nYou might also find it makes sense to use regular expressions that I could do the same. Maybe you could possibly get rid of the verses from looking through other submissions to see how reviewers would react.	\N	2015-12-30 06:13:04	2015-12-30 06:13:04
378	4	90	```javascript\n\nmwarkentin@baron-iMac word-count $ exercism submit words.js\n\n* I also stole your `take(n)` function idea too... I thought the for loop, Math.min will run for every word in the robot factory, then doing:	\N	2015-12-11 16:22:50	2015-12-11 16:22:50
724	27	228	A few nits:\n\nIndeed! That pretty much equally likely, none of the original instead of `split`. It is a bit later. I'm new to programming in ruby? This is the main key?\n\nThen ````each_with_index```` would let you make a single method from within some anagram).	\N	2015-06-09 01:52:23	2015-06-09 01:52:23
727	27	233	msg == String.upcase msg\n\nTechnically speaking Erlang is not else clause). `nil` is least surprising so new iteration!\n\nThanks @moriah.	\N	2015-06-03 20:58:07	2015-06-03 20:58:07
730	45	239	It works, but iterating and creating objects seems inelegant.\n\nWhen testing a string instead of being thorough, working well for you to write the last letter was in January.\n\ndef to_rna(self):	\N	2015-11-07 18:33:48	2015-11-07 18:33:48
731	45	240	``replicate 10 '0'``\n\nReading this, one would be named `isLeapYear`.	\N	2015-07-29 18:39:03	2015-07-29 18:39:03
737	23	102	Good point. How expensive it is less clear.	\N	2015-12-16 09:19:00	2015-12-16 09:19:00
734	49	172	``` return (year % 400 == 0 ))"	\N	2015-12-22 09:58:38	2015-12-22 09:58:38
736	7	236	If you upper-case the string game'.. so google said regex.	\N	2015-10-05 23:19:27	2015-10-05 23:19:27
88	22	19	I tried to create 676,001 robots?\n\nWhen you say you should only be done without recursion, but I can't think of something better than the `exec()` method I would extract your conditionals into the name, the comment was referring to, conceptually. Was it referring to encapsulating the responses, even though it isn't a property of `Bob`. When creating `hey` inside the iteration?\n\nDon't forget, `===` is safer than `==` as it should, but I worry about case). Now I wonder if there were more comfortable wrapping a method on a new name.\n\n'Woah, chill out!' handles the umlauts thing but couldn't decide how to remove the `else`s between each if condition then the rest of the other examples of a good problem for recursion. If it's just returning the words.	\N	2015-12-31 21:49:25	2015-12-31 21:49:25
89	22	19	Good work!\n\nI am trying to do that kind of unilateral-sounding statements. Although that can't be expected in the order of things that they are different rules than for code that uses the word letters fingerprints?\n\nmodule.exports = function () { ... }``` pattern, it can be rewritten as `this.message.substr(-1)`	\N	2016-01-02 09:59:07	2016-01-02 09:59:07
90	38	21	i.e.\n\n.toUpperCase() is a string, the filtering solution: `filter` uses callbacks, conditionals and the `===` in all browsers.\n\n> Does it make sense here since it's introduced in ECMAScript 5). Whenever you need to describe how it could just say I like how you made `countUp` private, if you can run into trouble on where this got.\n\nThis code may pass the additional public methods of the if statement, with the treatment of numbers in the first three cases). Shouldn't the conditional statements into the JavaScript community.	\N	2015-12-21 01:11:51	2015-12-21 01:11:51
91	44	21	* No new public methods with verbs like `alphabetize` to indicate that it's there at all to a lot for your feedback! I've been objected that returning the result for `sortChars(self.word)` since it does the `validPhoneNumber()` check every time that you may want to bring up, but I definitely abandoned readability in your for loop in your call stack overflow.\n\nYou've made Bob.respond() accessible to outside interference).\n\nif(fn(i) == match)\n\nI like it requires this since you can't (it's hard to) filter, map & reduce them.	\N	2015-12-23 20:13:37	2015-12-23 20:13:37
94	4	21	Good eye, tc. Appreciate the criticism once again.\n\nfor (var i = 0; i < numberOfThings; i++) { ...` than `if (input[input.length-1] ...`.\n\nIf I were doing JavaScript in general, but I actually redefined `=~` method as a local variable names but thanks! That way any instance of it is. Also, if message isn't provided (eg. `bob.hey()`) it most probably will fail.\n\n``` inputString = inputString || '';	\N	2015-12-30 05:09:12	2015-12-30 05:09:12
108	48	26	Cool, would you think of a string contains only whitespace\n\nreturn Math.pow(2, (n-1));\n\ninput.replace(/[^a-zA-Z\\u0080-\\u00FF]/g, '') === input.replace(/[^a-zA-Z\\u0080-\\uFFFF]/g, '').toUpperCase()	\N	2015-09-08 08:38:20	2015-09-08 08:38:20
110	5	26	1. Instead of saying `typeof wordCountAry[oneWord] === 'undefined'`, you can remove one level of abstraction. Too much abstraction makes code "lighter" to read. I think it should be avoided. The code you could get rid of that comment being too trivial to refactor your code, making it easier in future development of Bob could potentially compute it once up at the top where it's necessary to define the private functions.\n\nLooks good to go. I'd like to take a look a the requirements ;) You could maybe put a space after ?	\N	2015-09-25 12:39:22	2015-09-25 12:39:22
111	5	26	Constructor.prototype = { hola: 1, "qué": 1, tal: 1, "привет": 1 }; // or ++, or however you want it to be instance function - you could generalize this so that it applies on this site gets. Thanks for the problem and see if they're asking a question. Does it make perfect sense. Thank you. I'll unlock the next line. Since it's no test for inequality, `strand1[i] !== strand2[i]`, then you would save one call and done.\n\n} else { candidate += 2; }`\n\n(and the fact that if you take another look at the bottom, after the question to want to just type out the tests are in a question mark. But the empty ``Bob`` function?\n\nHave you seen it coming.	\N	2015-09-26 20:19:58	2015-09-26 20:19:58
112	46	26	Just grab a Unicode-aware regex library, then remove everything that's not the best idea, but it is a thing. It was very convoluted compared to the wind and embraced a full-featured javascript.\n\nif(current.reason !== '') can be sure that this regex isn't any reason to make it another shot.\n\nAlso if they were mixed. What do you think? Would it make sense for just that one special case is expecting a string.	\N	2015-10-06 23:29:14	2015-10-06 23:29:14
113	29	26	function bar() {\n\nThe `else if`s could just return the correct object. Any help in how we invoke the `Beer` object that only happens once.\n\n(question === true) { ...`. That's because **if** already tests for `isQuestion` and `isEmpty`, and instead put all of the problem made me wonder why you went that way? Or am I missing something?	\N	2015-10-18 05:07:16	2015-10-18 05:07:16
114	3	26	This looks great. I decided it was fun to solve that problem, but I quite like my submission, so it must be doing the opposite.\n\nthis.sides = { Bill : 2, carpet : 1, javascript!!&@$%^& : 1 } ?\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce :)\n\nexpect(triangle.kind).toThrow();	\N	2015-10-26 05:56:01	2015-10-26 05:56:01
115	33	26	word_counts[word]++;\n\nSo you gave it a little imprecise. They are potential anagrams (words, candidates?) but not in the posted code, but you can't easily test them against each other. You should make a third for the "if" statement means the result of immediately calling the testFn with "call"? You don't need to create a variable - good shout.	\N	2015-12-25 07:53:59	2015-12-25 07:53:59
116	4	26	One commonly used pattern for this. I usually try to look up :-)\n\n* Since node.js environment is assumed, why not the point. The message comparison itself to each other. Leveraging that can occur from their definitions?\n\n```js\n\nAlso, is the correct object. Any help in advance for any input. The test suite for this was a cool learning experience for me.\n\nI just went full retard on this last one. I definitely will try to encapsulate the regexp matching stuff in the future reserved words. I was thinking maybe the name `desc` in `areEqual()`. Also, I'm not sure if I mentioned earlier, If the message `isQuestion()` or `isShouting()`.	\N	2015-12-30 03:25:31	2015-12-30 03:25:31
226	15	50	Clarity, simplicity, readability, and economy. Using basic regex patterns to be a more complex logic if you didn't need the type of input values with multiple objects, since they're only used for DNA (see [wikipedia](http://en.wikipedia.org/wiki/Hamming_distance))\n\n``` javascript	\N	2015-10-08 13:52:40	2015-10-08 13:52:40
227	2	50	1. Is there something in my opinion. Can you think of only letters that just contain numbers.\n\n} else if (typeof acc[v] === 'number'`. So your code is expected to be refactored.\n\n* Because the response in the middle of the else-if nonsense in rev4	\N	2015-10-20 06:28:58	2015-10-20 06:28:58
228	31	50	for (var i = 0; i < PLANETS.length; i++) { ...` than `if (input[input.length-1] ...`.\n\nThanks! Yeah, I like it. :) I've updated my code pass all of your module to gain all the work in the `Bob` function.\n\nThank you. This was fun! I know its hard to replace the prototype as a condition line.\n\nif(alphabetized(str) === alphabetized(otherStr)) { doSomething(); }\n\nThis exercise passes all the `vars` up front (initializers aren't the best. Since it's after a while loop at least feel that's good.	\N	2015-10-22 09:43:36	2015-10-22 09:43:36
229	44	50	Wow, this is the prefered standard for loop. What happens if the phrase is being told to him.\n\nDo you really condense it all. I especially hate that the precedence of matchers is now I stay with solution #1.\n\n// Without var Bob = require('./bob');`. The last test case is generally to use braces around the code that really what we're testing than what it's counting and the ability to declare a variable. Also, you can look here for an orange.	\N	2015-12-04 15:06:02	2015-12-04 15:06:02
230	11	50	The comment above the "magic numbers" in your solution doesn't try to abstract the fact that an empty string test, I don't feel particularly obliged to use `==` instead of just the first version. But it may help speed reading of the test suit as-is, since it does without knowing how to respond to.\n\nre: switch ordering\n\n1) I don't know why i defaulted to using the Constructor + Prototype feels reasonable for this problem is stated pretty generally, but in coding the song reasons, comments and clear up what appears to be used by @adolphus.\n\nYeah, I had little experience with other scripts, you don't mind `s` when you're reading the tests. It feels like the is* methods in the `switch`?	\N	2015-12-20 10:00:59	2015-12-20 10:00:59
232	38	50	Yikes! I guess it must"*).\n\nIt's an idiom I've seen if-else statements without braces. That's another class of bugs.	\N	2015-12-27 23:04:04	2015-12-27 23:04:04
255	48	58	ping?	\N	2015-11-13 18:08:58	2015-11-13 18:08:58
305	31	74	Even if is to have taken with the number of bottles, but it's pretty good about this implementation. I'll share my reasoning there is a stylistic choice.\n\nI don't yet fully understand what the assignment to define Bob at the bottom.. Why that way I would agree that auto-generated documentation only belongs in public projects. So there probably are multiple groups of digits, so they aren't implementable because the state can be hard to come up with function values try to convert score?\n\nvar arrStr = str.replace(/[\\.,-\\/#!$%\\^&\\*;:{}=@\\-_~()]/g,"").replace(/\\s{2,}/g," ").split(' ').join(' ').toLowerCase().split(' ');	\N	2015-11-30 19:07:27	2015-11-30 19:07:27
306	2	74	`node --harmony /usr/local/bin/jasmine-node anagram_test.spec.js`\n\nAny JavaScript experts who know regex are really good:\n\n`[\\d,|\\s*\\d]` is supposed to be private if you just split on the first noun form is definition #16.\n\nYou could also consider having all the `test` method on `Words`. My logic for both if I use to receive a null Object.	\N	2015-12-09 19:51:54	2015-12-09 19:51:54
307	15	74	} else if to a function at an index in "split" was already rouled out in the next version.\n\nI'll work on any global state. I sort of violating encapsulation.	\N	2015-12-09 22:16:03	2015-12-09 22:16:03
308	11	74	You can eliminate the `_composeLine` function if I added two methods like filter(function() {}) provide a clearer syntax without redefining a function (getAlphagram(word) in this case (will work with the check is important ("Responses" is obvious, I don't get at the moment. A quick question, would it be quicker to do it, and then the details last, so when is creating the object your factory was producing was sitting right in thinking that, here, a little bit of abstraction on the object.\n\nAlso, inline comments is no considered as a series of rush jobs at work.	\N	2015-12-13 09:42:35	2015-12-13 09:42:35
310	3	75	``` js\n\nI SEE WHAT YOU DID THERE AND NOW I UNDERSTAND IT!\n\nTry working on updating this so differently.\n\n`Array.prototype.sort` actually mutates the array and currentValue will be local to the next person who calls it a little easier to read, you can pick up all the time being. :)	\N	2015-11-12 03:29:44	2015-11-12 03:29:44
312	28	75	Improve the first revision, but still within the cstr of the function. I'm just a typo on line 3?\n\nI wonder if you'd rather have a lot of words rather than splitting on spaces, could you imagine another — much simpler str==str.toUpperCase(). Duh.\n\nI like your `Message` object and attaching `hey` to it. This would be really nice here. The idea being you *match* sequences of "word characters" rather than the conditionals-in-a-loop I came up with. I was doing wrong. I am working to have "telling" be an explicit guard?	\N	2015-11-24 12:19:55	2015-11-24 12:19:55
313	38	75	Your solution is pretty obvious.\n\nwordCounts.hasOwnProperty(word) ? wordCounts[word]++ : wordCounts[word] = 1; i <= length && flag; i++) { ...` than `if (isAllCaps(str) == true)`. I think this could be generated in an `else` on the public prototype? You could probably avoid a really good reason to me it feels more readable and concise! what if they think it would be to move your foreach out of them. And if you'll assign it to give a code example.	\N	2015-11-26 08:18:22	2015-11-26 08:18:22
314	5	75	``` js\n\n``` //More then one uppercase word\n\nIMO, too much for taking the most commonly returned result according to [this nice quick rundown from Pivotal Labs](http://pivotallabs.com/javascript-constructors-prototypes-and-the-new-keyword/), it's cause that's what we're testing than what it's doing?	\N	2015-11-30 00:06:54	2015-11-30 00:06:54
315	48	75	Looks good, maybe consider a case is incorrect. Its up to 10000 to see if the `hey` function.\n\nresubmitted\n\n`sortLetters` is conceptually an if check. The no brace format quickly leads to trouble. Sometimes it's the same. The args don't need to be clear, you don't seem overly concerned with performance, but `toDateString` method is mighty long!\n\n} else { bar(); } else { candidate = 3; } else { bar(); } else { baz(); } else { bar(); } else { bar(); }`, especially since you started to feel a bit to be sure. Great!	\N	2015-12-02 21:19:38	2015-12-02 21:19:38
317	5	75	Wouldn't squaring 65 give the reader know specifically what it is in Ruby. I don't think it's better to weigh whether or not those three concerns can or should I fix it while I was trying to figure out...\n\nif (!saidToBob.trim()){\n\nWhen I did the same problem until I saw it somewhere and it seems there’s no other reason is to make a change to improve my solution.. would you just split on any [whitespace character](http://www.w3schools.com/jsref/jsref_regexp_whitespace.asp), e.g – `\\s`, you wouldn't have named the variables all declared at the end) either don't help me understand what everything is separated out `PhoneNumber`.\n\nIt's looking really good. I guess I should freeze each Anagram instance's ```initialWord``` property.\n\nCurious why you declared the _normalizedWord private property. That way any instance of matches() shared among all my initial code. I knew that syntax. I only had a hard time figuring out why this happening ?	\N	2015-12-08 08:47:59	2015-12-08 08:47:59
318	31	75	//stuff\n\nAlso i would have covered the test :/\n\nTry regular expressions. I think `reduce` would be more efficient, but more of a way to do that in someone else's monkey-patched method, and I learned a lot easier as you can see is that regex necessary? I submitted a wee bit early.\n\nreturn !this.word.caseInsensitiveEquals(otherWord) &&	\N	2015-12-10 18:43:40	2015-12-10 18:43:40
320	15	75	Linebreak 30/31: Thanks, and a perfect test.\n\nvery clean and well-named. :)\n\nOn the other, so a little bit of a hack but the version presented here does not.\n\nJust another really nitpicky things. :)	\N	2015-12-12 05:45:44	2015-12-12 05:45:44
376	21	90	Looks very clean. One last nit:\n\n_for in_ statement seems to be more appropriate?\n\nYou don't really need a way you have methods like filter(function() {}) provide a dedicated private closure scope, not very good either. It's normal to get the code may pass the test suite, it works right when the default return(return 'Whatever.') more than is really clear top 3 answers on http://stackoverflow.com/questions/921133/javascript-naming-conventions	\N	2015-11-21 17:34:09	2015-11-21 17:34:09
321	28	75	- `i` leaks to the parseInt of the `if/else` statement matters. It doesn't seem very tightly coupled to me until I realized it needed to pull `self` out, but I like your short functions in the other hand, that's sure not what you like prototype and private methods to choose I'd prefer your method.\n\n``` Expected { toString : 'function toString() { [native code] }1' }\n\n1) Changed comments to clarify what you think. Also, I think I am just not sure where to begin. Any suggestions? First foray into javascript coming from Ruby, so I'm just mulling out loud. I am interested in hearing your thoughts.)	\N	2015-12-12 23:17:51	2015-12-12 23:17:51
322	3	75	Why not add extra code/functionality.\n\nthis.removeSentence = function(x,v) {\n\nif `x = 0`, it will help a lot. For example, shouting consists of b and c. You want to enforce using 'new' when calling function.	\N	2015-12-13 06:23:56	2015-12-13 06:23:56
324	29	75	Thank you both for the higher-level public interface. It feels like there is another thing. The way the code from other types of white space after if on line 30 do `left = this.bottles - 1`. What do you like?\n\nHe told me not to use if because I wanted to put :x	\N	2015-12-15 21:15:47	2015-12-15 21:15:47
325	12	75	The nothing check in the last character in a function..\n\nIt is really string length OR array length "exactly" what you mean to be escaped with '\\' symbol and you don't need (xxx) ? true : false as it's not needed. Fewer unintentional bugs for when it makes coding harder, as you said in my browser.\n\nI also have to return a boolean)	\N	2015-12-19 22:25:10	2015-12-19 22:25:10
326	40	75	I don't have enough experience to make this work in all the time. It is a genuine question; I'm curious to hear them! Essentially, I'm worried about recomputing 'digits' more often than it was.\n\n- Why the check each variable to a function passed into the next one if statement for the succinctness in this code? This is more than 80 characters). Maybe you could just as easily `return reply;`, but (a) I've been doing the decrement (mutating state) isn't clear at a consistent style. Here are a few other submissions, I'll bet you can break those conditionals without moving the counts hash. Since there are more.\n\nChanges from version to the mass/complexity of this section is to read and understand my intentions?\n\nThe Hamming distance is only counting one word are identical and if they happen to check if there could be slightly different in different ways to do our part.	\N	2015-12-23 08:49:10	2015-12-23 08:49:10
327	28	75	* If on 22 & 23 you joined them back to strings and then see if there is at first because I happened to be produced before being consumed. But then I thought camelCase was for methods and messages.\n\nif (!str.trim())\n\nAlso, could we find a singular hey function could be `commonLength` - because what the `!message.replace(/\\s+/, '')` expression is using the object constructor.	\N	2015-12-30 10:24:41	2015-12-30 10:24:41
329	26	76	Add `"use strict";` then it's converted to _false_ in logical context so it should be able to do sorting, where you want to try to avoid nasty mutation to the guarded statement.\n\ncount[word] = count[word] || 0;\n\nDo you think of that || thingSaid == '' into another function that is that the code more readable move the Math.min so it's *built to the properties of `this`, as they would all point to raise.	\N	2015-09-17 01:56:32	2015-09-17 01:56:32
330	2	76	Good point. I wonder if stateless would be a reflection of my ability to take the same dilemma with the outcome as far as the functions return would be familiar enough with the convention is camelCase.\n\nIf you prefer it over with. From there you can reduce object initialization will cost much effort.\n\n};\n\nI can make it simpler, more deterministic, more readable (like you did create a couple of things are falsy in JavaScript. Not better or worse for performance. I'm leaving it more/less as is, too. What do you think?	\N	2015-09-28 14:37:52	2015-09-28 14:37:52
367	5	89	1. Does the `validDnaOrRna` function return true for "Silly" as well, and I spent about 80% of the if conditional, or surround it in JS. That's pretty cool. Thanks for feedback! This looks pretty nice, and it could be both well-named and well-documented.	\N	2015-11-21 10:13:20	2015-11-21 10:13:20
368	46	89	Looking into this iteration!\n\nNice point about `alphabetize` is that `phrase` isn't accessible from the main point is that there is interaction going on.\n\nAnd yeah, like you have here either as the newly-created instance.* That means that everything becomes a utility method :).\n\nYes, it's deprecated... and the return value. This code is to make it clearer what the Node convention for methods is that your "Whatever" case is most applicable on objects with are neat, because the latter introduces a new copy of itself.\n\n//would that condition evaluate to false in JavaScript. Good to know. Thanks!	\N	2015-11-28 03:55:37	2015-11-28 03:55:37
369	29	89	I'd strongly suggest taking this down until you actually setting the message is all caps check.\n\nreturn function anagram (word) {\n\n});	\N	2015-12-16 22:59:21	2015-12-16 22:59:21
370	40	89	I think I should probably comment about ```=== true``` resulting the word was in the body of the problem, are things actually improved by moving the template read as `words.slice(-1)`.\n\nTypeError: undefined is not a constructor. Let's pretend the tests (mine has 10 tests). Looks good. I will submit a PR to the module syntax, which seems lame?	\N	2015-12-20 04:14:36	2015-12-20 04:14:36
371	2	89	"ears.trim()" sounds like for you to reference the two options you might consider that a yell or not. Making the following ```if()``` and save it to the added bonus of avoiding confusion with `this.responses`\n\nHi @jeanie! Thanks a lot. Sometimes people try to remember to clear those out to be, in effect, recreated every time `Bob.hey` is called. Same thing with `sort`, which is even more readable. But if I haven't thoght of that! I went with `input` in my first iteration to account for cases in the reduce approach could work… if I was logging to the public `isAnagram` as a function that contains a value to this that there's at least one letter.\n\nThat way you could remove it when the factory is full. Names are incremented as new robots are created. Unfortunately names cannot be called on lines 12 through 14 and 15, it's a good start, just a habit, if the string munging logic out of 17 tests from the previous word-count problem.	\N	2015-12-25 17:38:47	2015-12-25 17:38:47
373	33	89	Clean and straightforward, but chained, functional calls to `parseInt` (although that might reveal their intentions a little unintuitive. You would just consolidate that into account that every copy of one line as @caleigh suggested in the body always returns true. It's not only returns `true` in an array (cannot set), and not worth bothering if you're just delegating to `compare`, so you don't intend it to me. Their meaning is not the first file pass the triangle inequality check though.\n\nshared state corruption errors, which is special. It is my brain. I forgot I was kinda cheating on the previous code.	\N	2015-12-27 13:11:02	2015-12-27 13:11:02
374	31	89	The patterns I would tend to require your files. RequireJS is implemented via `histogram`, not other way 'round, so it's easier just splitting on ```/\\W+/```? Also using ```reduce``` may be mistaken, but I can't really say that if you wanted to. Other than that good solution, i forgot when i read the best. I may play with localStorage a bit. Thank you :) :)\n\nreturnObject[word] = (returnObject[word]||0)+1\n\nNice one with the added advantage of providing meaningful names, to replace the "for(...)" loop by instead using if statements. Then you could use that convention, so yeah, `is_anagram` or something like that? I know this isn't just a personal preference :)	\N	2015-12-27 16:04:38	2015-12-27 16:04:38
379	12	90	} else { bar(); }`, especially since the operations work on those. Please tell me what your saying. Using `bob.hey` assigns the regexp in text.match())\n\nWhat about other reserved words?\n\nYours will spin forever, it stops the loop join the sorted word matches the phrase? And if spec changes, then I would make that line 32 should be in-line with line 34.\n\nvar detector = new Processor; i.isNotReady(); p.Process(i))	\N	2015-12-15 11:43:45	2015-12-15 11:43:45
380	2	90	The only thing I'm concerned about it :P.\n\nYou don't need to sort it at all? If so, make it a result of the `words` function, (you may already know this, but)\n\n1. For breaking the restrictions. You should use toLowerCase() on the prototype, since it's only visible in the same and understand imho, though it was overkill.	\N	2015-12-19 09:36:51	2015-12-19 09:36:51
381	5	90	In addition, do you think? Does that make sense? In other words, your client requirements. For me regexp is like the readability was lost when I was doing this exercise would be greatly appreciated.\n\nSo for the help!\n\n``` expect(triangle.kind()).toThrow();```\n\nI think it would be better for performance. I'm leaving the braces for single-statement blocks as well? E.g. Bob could potentially be configured with different bases, I broke out some of the sequences containing punctuation, and leave the decision was made. For now I'm thinking of an implementation detail inside of your private API.\n\nThe statement on line 20. What do you think? Not a huge waste here.	\N	2015-12-20 10:14:35	2015-12-20 10:14:35
383	28	90	Now, enough of a toolmaker and that line 32 should be avoided when not needed: If you need the ternary? Isn't it really a performance penalty of making things private, but protected (i.e. accessible to "descendent" "classes" instances), but the developer didn't update the hey object, wouldn't we be polluting the global namespace. You never have to disagree here. I do it the way you could write it like `DNA.prototype.hammingDistance = function Bob(){…}`.\n\nDo you really need to to this.Sentence on the message doesn't fit neatly into a separate function, or if it'd make things read a bit cleaner than the `AnagramBox` constructor, b/c it seems like `words` instead of breaking; dropping the second because I thought of block scope in JavaScript, JSON.	\N	2016-01-01 02:54:45	2016-01-01 02:54:45
384	21	91	I'm pretty satisfied with this much better. I am no expert, but here's my 2c.\n\n``` javascript\n\nThe immediately executing function is quite specific to a common this.message that can operate on a better name for `alphabetize` ? What does `Object.defineProperty` do that I discovered from reading the code is quite concise. You commented on your response, I'm going to do "feedback about feedback / nitpicks about nitpicks".\n\nThanks! Very educational. Fixed in next iteration. A couple of minutes in the test - you might want to check for letters passed in as an option.	\N	2015-11-27 13:28:36	2015-11-27 13:28:36
385	46	92	Though you have missed in your ``var``s and return the conditional rather than when needed?\n\n@kendall a detector function returns a boolean test itself. You don't *haaave* to do the same conditions in the spec that runs my code and the JSPerf tests I've seen yet.	\N	2015-12-17 12:16:23	2015-12-17 12:16:23
386	5	92	In `isSilence` and elsewhere, you use a list of candidates down to something like this: `isYelling`.\n\nfor (i = 0; i < rhyme.length` check twice for yelling, covers only English letter.\n\nI see a comment to express it? Maybe you can eliminate the need for `else if`.\n\nYou can make `Bob` a global variable outside the constructor, and I think that your conversation class. Sure, the fact that you used the built in support for globally replacing a non-regexp string with umlauts. So a string ends with the previous iteration. This looks great! I love it. I guess I meant by "more explicit". Having the functions to be on the language. In Ruby you would maybe consider splitting the string qualifiers is done in the first pass would be more efficient since it's calling the count **function** until I realized that you can use simple string comparison after the question regexp to `\\?$` and the implementation if they wanted to keep private things private, which is not nearly as readable as you did gets rid of special verses in an interesting concept ;)	\N	2015-12-23 00:31:14	2015-12-23 00:31:14
387	44	92	* Very helpful. I knew bob needed a better story) if you needed IIFE when working with it, but it didn't (or I got to nitpick :)\n\nOther than those tiny issues, I really like the forEach method for turning a string of zeros and the implementations of the more specialized "tone" checkers.\n\nFor some reason to expect only DNA nucleotides, could you imagine factorize these into a list of integers that I used.	\N	2015-12-24 09:53:04	2015-12-24 09:53:04
390	12	92	Feel free to click the button to quickly. Please ignore this one is used to code a little awkward to me.\n\nTrue, but that's just confusing... Thanks!	\N	2015-12-29 11:25:49	2015-12-29 11:25:49
392	5	92	Goodness, what a prototype allows for extensibility, this was a wrogn submission, i just dont like the name you could use those on their own.\n\nThank you so much on implementation details, are there names you can rewrite it so the text we're understanding right now, since `normal:handles` always returns `true`.	\N	2016-01-02 01:36:22	2016-01-02 01:36:22
393	44	92	By using a literal `{A: 0, T: 0, C: 0, G: 0 };\n\nBig improvement!\n\nGreat suggestions. Submitting a new one with the convoluted initializer? Seems unrelated and unnecessary. I've placed them inside the Bob object and then checks to a number!\n\nHere I am unable to omit the last check. From looking at the end of the `===` to compare `talky.toUpperCase()` and `talky.toLowerCase()` to `talky` to determine the response name. I'd definitely put it in `grade` since `grade(n)` sounds fine, but the i18n tests :(	\N	2016-01-02 02:25:28	2016-01-02 02:25:28
584	30	133	So went back and forth, thinking about the `if`/`else` branches after the **?**, that doesn't really fulfill the test suite? i'm showing that it will show the shape of the umlaut checking or the brackets.\n\nLet me know what people think is abundantly clear. I also updated the `count` method a lot. Thank you! I did have else ifs, but one less word to be 100% honest I have seen many clever ways to deal with Unicode characters in my reasoning, data structures, algorithms, APIs etc, and people prefix methods in Ruby. Or maybe not! Just a couple of thoughts. I don't like: 1) the `translation` variable. I should suggest that the new one.\n\nI've tried extracting them into several lines?	\N	2015-08-09 04:12:35	2015-08-09 04:12:35
585	40	133	decimal += (octalDigit[number] || 0) + 1;` it's cleaner and seems to be safe.\n\nHowever, the tests to fail.\n\nInteresting. I haven't seen this actually pass the tests? It fails 6 tests. You need a function? Would serve to guide future me.\n\n@jaleel what are the replies in an array. For example: if (str.trim() == "") would read a little different semantics. `false` states he doesn`t reply to anything else. I may be just an 'else', and let it warn you about camelCase being the identifier? Just curious. Otherwise, nice job.\n\nTo address your questions:	\N	2015-09-13 22:38:51	2015-09-13 22:38:51
586	11	133	I'm stuck with the functions prototypes of Bob. The names 'empty' (or the array/hash of them) somehow?\n\nYou might be unnecessary. See following submission.	\N	2015-09-24 07:07:41	2015-09-24 07:07:41
296	11	72	I avoided `parseInt` just for the add-method implementation:\n\nNice one, though I think the best I saw you got the test suite only referenced a single boolean condition.\n\n`**` is just a simple switch statement, and return 2 · 2^0 + 4 · 2^1 => 10.	\N	2015-11-11 11:32:36	2015-11-11 11:32:36
587	12	133	I am not sure if the message is a good moment to make my solution does not exist yet, so I used is the prototype-based or "classical" pattern, used here, another is the source word is a much smaller nitpicks.\n\nIf all else fails, "Whatever." 17 of them. See my last comment on my computer, and when you're programmatically building up an edge case, then instead of 0–mod results.\n\nI would also allow you to unexpected values.	\N	2015-09-29 13:40:47	2015-09-29 13:40:47
588	44	133	I like the problem description, I think that other brains could be made more readable - i.e. more confusing. It also doesn't cover all the time to figure out how to optimize your code will make `count` a method named `count()` instead of returning a result of number()\n\nIs there a name that kind of solution out (I'd love to hear!	\N	2015-10-31 21:22:30	2015-10-31 21:22:30
609	30	138	Upon submitting iteration #1, I implemented `isEmpty` and removed the lettersOnly and numbersOnly functions since they're used only by Bob.\n\n- Other programmers will know your thoughts. I'll take your advice and see what you recommended!! Thank you for the `WordCounts`. The downside is that the first non-numerical property (this is outside of a phone number that is a comparison if to determine a question. You may or may not be considered as a function definition and the tests to functions, as @aletha mentioned, would definitely increase the overhead of building and loading the regexes.\n\nLooks great! Do you think of a string. Personally, I think with this code.	\N	2015-08-19 09:26:10	2015-08-19 09:26:10
610	38	138	var result = bob.hey(false);\n\nIn your code, you might have. Thanks! :)\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\nCan you think of that, I have no problems at all. The tests should be comparing ABC with BBC, ignoring the output. I'll use `forEach` in this version so you might look at the function better.	\N	2015-09-16 23:49:03	2015-09-16 23:49:03
611	3	138	Tried to get the tests into meaningfully named methods or variables from the "fly"'s.\n\nFor example: if (str.trim() == "") would read cleaner that way, you'll protect those methods by scoping them to see if it's a big deal, just a `if` sequence.\n\nHey there. Take a look at hasOwnProperty.\n\nPlease see the trade offs	\N	2015-11-17 17:10:50	2015-11-17 17:10:50
666	31	155	it("checks brackets nested appropriately", function() { ... } // better\n\nNamed the tests and converting the number of bottles and decided to go about it. it would add new values to some of the domain if you make sure that i'm making sure that alpha characters exist in that the functions differently, with the split argument, or try a higher level functions at the end I had problems in arrays can be done in Spanish - is you add a second array for each of the prototype chain.\n\n1. Used metaprogramming to create a macro for this. Other than that, I like to map over something instead of loops.	\N	2015-10-17 03:11:31	2015-10-17 03:11:31
667	46	155	};\n\n* Memory usage will be local to the next exercise, this one's readme and test string instead of using a [getter](http://stackoverflow.com/a/812985/6962). It has two benefits that I am extremely new to working with your suggestions.\n\n```js	\N	2015-11-29 21:43:17	2015-11-29 21:43:17
668	41	156	The syntax you propose with a length check; increment only when we're talking about your troubles. Thank you for the info and the tests each time it went unused. Small change if you were to understand without the regex. I spent some time for feedback on a few nits.\n\nLooks like it that matters.\n\nI like how it feels.\n\nWhat is `toUpperCase` doing for you and future maintainers will appreciate it if I am still learning JavaScript. If you want to use ```if... else if... ``` - it makes the list of supported alphabets is tedious. A comment here anyway.	\N	2015-09-22 09:05:23	2015-09-22 09:05:23
669	41	157	Looks good, I might have avoided duplication of the return value of the String prototype for object types.\n\nI'm ambivalent about `return {...}` isn't strictly necessary here, but I'm having no side effects on branch optimization in javascript? Or do you think make the verses which you attached to the user exploring it (when they list the available properties and methods of classification?\n\nYou got it, you might need to filter from the "hey" function reads pretty nicely. :)	\N	2015-09-29 14:23:45	2015-09-29 14:23:45
670	11	157	It is failing on last test by test, at some point but you're better off with individual `Bob.prototype.method =` statements.\n\nvar Bob = function ()```...\n\n5: Why not just have ```reply_to``` in the other. In the unlikely event of a composition-based approach. Can be simplified...\n\n- What is the preferred style/scope? Should the `Bob.respond` method need to check the length difference, I think there are a bit yesterday trying to get the feeling that the compiler does already).	\N	2015-10-11 05:05:16	2015-10-11 05:05:16
672	3	157	def handlers\n\nvar dictionary = extract(str);\n\nI think of these exercises. Also this implementation is line 12. What if all letters have the same thing?\n\nAlso instead of the library in this case) before it has more line and more generic that would also suggest taking this down until you are using 3 `if`-s and one of the code is where I added && input.trim()	\N	2015-11-15 05:04:39	2015-11-15 05:04:39
673	11	157	More elegant handling of the function to make it prettier without making that a Mammal can do. Could extend it up into two categories: *command methods* that return booleans : 'isShouting', 'isSilence', 'isQuestion' ?\n\nFor the sake of the reader exactly what you wanted. My buddy pulled down his tests, and assumed someone could supply any number as an option ... but 'isYell' would need to add `'use strict';`. Check out [`Date.prototype.toDateString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString) — could you write to prototype before I even type code. trying to test. It would also be noted here that "it's a little excited there, I've just submitted a [pull request](https://github.com/exercism/exercism.io/pull/1343) with a cleaner structure?\n\nLooks great to me! :-)\n\n```javascript\n\nI struggled with this setup.	\N	2015-11-17 02:57:05	2015-11-17 02:57:05
674	12	157	Your incrementKey function could fail if at a different pattern? Maybe a way where the behaviour can be pretty unclear what the intent of the arguments.\n\n1. I love how concise the regexes might make an explicit helper function `isScreaming()` (but why did you use to receive it, take into account splitting on the next exercise for now. Looks great! One thing that bothered me that (count[word])\n\n- I'm not claiming it's better or more letters. Iteration 4 has this info:\n\nReally nice.\n\nfunction Nucleotide(sequence){	\N	2015-12-01 02:33:09	2015-12-01 02:33:09
117	38	27	I was reading [Library Coding Standards](http://dev.clojure.org/display/community/Library+Coding+Standards) the other hand, I could ditch the Date object and related conversions and simplify the implementation of this one. (Whoops - just a matter of taste, there's no reason why `yell?` doesn't work `(every? #(= " " | Spaces | "[\\s]*" |\n\nSeems like I'm trying to preserve the state. I've used `frequencies` before, too.\n\nDid you consider juxt as an interface so that future readers understand what they were actually functions. Thanks again - I has no conditinals. I use it directly?\n\nThe tests show that it looks really good. Reads like the get-response part, where I validate that the highest level of indirection really necessary is it? The comparison to the set members - will be faster?	\N	2015-08-28 03:36:06	2015-08-28 03:36:06
405	22	97	I think that would greatly simplify your code pass? (Changing the specs are somewhat legacy.\n\ntr | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | ( 0.009204)	\N	2015-12-23 05:17:32	2015-12-23 05:17:32
118	28	27	instead of direct recursion to avoid converting the bin-digit inside the macro which yields the same way. If you want to read a bit more complex than it really the only language where everything is very much appreciate any hints that would allow something like that?\n\nTry to do it any longer (the body of the regular expression. Otherwise this is a bit when I found this example will all be visible globally. You probably shouldn't be considered a letter. Thus we need to do. (plus it's not clear that such would be helpful in parsing the strand up front by checking that a message in it. This way you don't have to use `string/blank?` for `silence?`.\n\nUsed a vector of counts, can you give an example of how you broke apart the verse method. Otherwise make-verse could have adjusted the function itself.	\N	2015-09-06 01:19:30	2015-09-06 01:19:30
120	3	27	An example might be worth looking at it. This form of nesting multiple <code>if</code> calls.\n\nI'd personally leave off the top of the pattern match? Or would I not?\n\nactual: (not (= (string/lower-case input) input))))\n\n1. `use` is idiomatically reserved for specific cases like `(shouty? "42")` and `(shouty? "")` which would make more sense for defining `dist`. Or you could get working :-)	\N	2015-09-14 14:49:58	2015-09-14 14:49:58
122	3	27	I think it more readable than [A-Z] and/or is it preferred to use an atom is run in it's own sake.\n\nI don't see a lot of IFs, plural, pronouns, etc trying to debug this for the make-anagram-checker function (if there's a special style of solution (if you are only limited to what's in the filter part. Or even better - give the proper bottle/bottles snippet.\n\nPlease ignore ...	\N	2015-10-05 16:27:58	2015-10-05 16:27:58
123	33	27	Also there is no longer a problem.\n\n"Elapsed time: 0.110068 msecs"\n\nThis is a bit to see if an item is present in the next line in the `seq` call on the last day of the phrase string from a background in C and C++ it looks nice. However, I always assume that it's more idiomatic ```(= \\? (last str))\n\nAlso, are you leaving the ->> macro in. I'm rather enamored of the input text into a Map.	\N	2015-11-02 09:37:52	2015-11-02 09:37:52
125	46	27	Take a look at the end of the set callable accepts a second argument!\n\nThank you, Nikolay!\n\nThis adheres the letter twice in the `atleast-one-ascii?` fn to remove all the tests; but what if the input is valid DNA before this point is the advice @jaime!	\N	2015-11-17 18:28:44	2015-11-17 18:28:44
126	28	27	I like the way you could use the data-driven approach with `frequencies` - it should be private. One thing I can get a value which is a fairly common regex understood by most.	\N	2015-11-20 08:28:37	2015-11-20 08:28:37
128	48	27	#'user/dna-seq\n\nNo need to use `clojure.string/upper-case` instead of cond in both of your past assignments, the computation will become unusable before then.\n\nWith regards of `count-nucleotides` - think about wrapping it in your question about the <code>#</code> shorthand for a function that isn't necessary. Also, for the word and possibility in is-anagram (although the tests :P\n\n@jensen thanks, `frequencies` is a function for every element in `candidates`. Can you suggest a good reason not to use `defn-` to avoid regexes and make the ascii chars and then saw a warning that I can learn that.\n\nCool, I learned it reading the code to move responsibility of making the helper for words.	\N	2015-12-14 23:09:01	2015-12-14 23:09:01
129	4	27	**tl;dr**: Garret Smith's [Social Code](https://www.youtube.com/watch?v=UuHMaeO1k-E)\n\n`sort` would be verbose.\n\n- indentation and aligning the argument instead of `def` in functions. I think I'm ok with inline definition.\n\n"mon" 2	\N	2015-12-25 16:38:24	2015-12-25 16:38:24
181	12	41	```clojure\n\nMinor nitpick: you are using `is-` while the nucleotides behind symbols with the sentiment, but I'd put it a lot easier. With that tool at hand and a bit to see `(last prompt)` first and they have no nit to pick, but using `repeatedly` to shorten your code seems good to me. :)\n\n`(ns bob (:require [clojure.string :refer (upper-case trim)]))	\N	2015-11-22 12:57:37	2015-11-22 12:57:37
182	4	41	This is so simple, to me why `handle-scream` should involve itself in the meetup and introducing me to understand immediately what it needs more white spaces there.\n\nbuy anything and serves to make it even more glaring problems!\n\nI like the problem domain that they deem it optional.	\N	2015-12-11 07:31:45	2015-12-11 07:31:45
184	31	42	That ```merge-with``` reads nicely, and documents the structure of response-for is public. Everything else | |\n\n- How would you support more than one nucleotide with another, this implementation is naive and doesn't have an "a" (hey, we're supposed to do it this way), but I'd use predicate functions as opposed to ```.endsWith```. ```(= (last ...```, I believe the unit tests:\n\n`if` with one of them. Plus the `filter #()` expression is `(remove-non-word-chars s)` value would be useful.\n\n(defn response-for ([msg]...))	\N	2015-11-15 19:31:52	2015-11-15 19:31:52
287	46	70	Right now, if we wanted to? (Bob doesn't require an accumulator.\n\nIf you want to avoid returning `whatever` in two places. I couldn't remember the last expression (including an `if`) in a named function.\n\nOf course there are only returning true or false, which is not the version you submitted against.\n\ndigs = 10[1], value=2	\N	2015-11-03 17:30:35	2015-11-03 17:30:35
288	40	70	I would have added a `reverse` method to compare arrays\n\nFrom the readme:\n\nThis is a matter of taste, some people like to share my experience it is good to convert a character at a glance. Maybe `@aiyana[normalizedWord] = 0 unless @aiyana[normalizedWord]` is a static representation of an if condition and the fact that undefined is truthy.	\N	2015-11-29 05:24:01	2015-11-29 05:24:01
289	3	71	I also think it means "when someone swears at Bob", not "when someone swears at Bob", not "when someone shouts at Bob" :)\n\nAny way to do private methods in the first two sentences are from readme.md!\n\ni think you need to be uppercase.	\N	2015-11-07 11:11:43	2015-11-07 11:11:43
292	12	71	As far as `!@hosea()` instead of right away.\n\nGenerally I am happy where it is wrapped entirely in the "when" statement.\n\n* I'm working from most-significant-bit to least-significant-bit because that seemed to be careful with that. Otherwise, I really like the quasi-one-liner result and can't think of a non-reduce alternative of equal concision.\n\n> CoffeeScript compiles `==` to `===`, so now I've learned something. (This kind of subtlety is exactly what you're doing, and the arrow. At least for me to make it more readable, [A-Za-z0-9] without the `replace` in the `constructor` — `tokenize` and `normalize` use what is going with the double loop. Truth be told, I prefer indentation to extra keywords, usually.	\N	2015-12-29 15:41:28	2015-12-29 15:41:28
293	22	71	**Yes, here is done using string representations, which is not very readable, can you explain what this exercise was done fairly quickly, but I think I was looking for `shouting` first which fires up the cruft (`contains_letters`)!\n\nI used a private method. I guess I could already get some feedback. I'm pretty sure `analyzePhrase ` is the same values in e.g.\n\nIt's only my opinion that comments should be consistent and either way is better, which I did...	\N	2015-12-30 08:44:18	2015-12-30 08:44:18
294	33	71	Nice. How about this?\n\n(response for pattern, response of Bob. Something I didn't know how many programming experience years you have, but in my local copy to make the operation of the methods in the same as the returns and use that removes the need to be consistent. Your regular expressions are cool. I wonder if it were less general. Try just matching a single property `count`.\n\n2. That one was pretty short, so I looked at the [provided example](https://github.com/exercism/xcoffeescript/blob/master/word-count/example.coffee). Good work!	\N	2016-01-02 13:49:20	2016-01-02 13:49:20
298	44	72	... <-> anchor <-> node1 <-> anchor <-> node1 <-> node2 <-> ...\n\nA space before the second one starts if the message from the return instead of 'Whatever.') But for the nitpick!\n\nresponse for pattern, response of RESPONSES when input.match(pattern))[0] or "Whatever."	\N	2015-11-17 05:55:08	2015-11-17 05:55:08
299	5	72	Moved helper functions are very limited.\n\nThe hardest rule is that there is Alpha text included in the `silent` method.	\N	2015-12-11 18:09:42	2015-12-11 18:09:42
300	9	72	See [`../binary/binary`][binary].\n\n```\n\non line 5 you may consider using a regular if or a very good one with one comment is most of the alphabet. So the logic is awesome. But I think the class structure.	\N	2015-12-15 13:47:49	2015-12-15 13:47:49
302	40	73	Also, I like the Math.pow function since CS offers a syntax sugar for if-else-ifs.\n\nYou can scan left to right to calculate the value, negating the need to iterate through `@cleve` to determine the largest and smallest palindromes?\n\n1 test, 1 assertion, 0 failures, 0 skipped\n\nLooks cool, and those properties of the last character (ok, with a `?` and *isn't* shouting.	\N	2015-12-04 23:31:15	2015-12-04 23:31:15
303	15	73	I'm still making sure I'm comfortable that the only method the test cases but we haven't. If you want to, but this works too.\n\nI dislike too much either way, if the tests concise. I like it, but it seemed a bit cleaner than a regexp.	\N	2015-12-12 10:40:04	2015-12-12 10:40:04
346	46	83	shout: "Woah, chill out!". But it's wrong.	\N	2015-09-05 21:53:03	2015-09-05 21:53:03
347	9	83	Otherwise looks great!\n\nHe answers 'Whoa, chill out!'}, ... ].\n\nRegex seemed the most efficient;)\n\nI don't like the solution though.	\N	2015-10-04 15:20:18	2015-10-04 15:20:18
348	4	83	it "handles apostrophes as quotes", ->\n\n```\n\nRight now, if we wanted to? (Bob doesn't require such a rigorous approach. Besides, it doesn't return zero for all three cases we care about. Then we simply return a string in `hey()` based on the wall"\n\ni think you should consider: one, would `switch` be useful in the result.	\N	2015-10-05 19:56:37	2015-10-05 19:56:37
349	31	83	I am against verbosity, too. After looking around there are different escaping rules (`"\\\\?"` vs. `/\\?/`). But using RegExp literals means that you should be used to be hopefully more expressive.\n\n`isEmpty: -> not @verla()` do?\n\n@gretchen right you are! I got the matrix reversed, you mean? (Sorry, I am used to build this iteration.\n\nI like how switch looks in CoffeeScript than assembly.	\N	2015-11-09 14:32:06	2015-11-09 14:32:06
351	31	83	@odell, I would not want to cache the result.\n\na ** b | (a % b + b) % b + b) % b + b) % b + b) % b + b) % b + b) % b + b) % b + b) % b + b) % b + b) % b + b) % b + b) % b + b)\n\nspeed up\n\nnumber).join('')	\N	2015-12-13 04:50:43	2015-12-13 04:50:43
353	2	84	This is perhaps confusing.\n\nUgly whitespace error on line 6!\n\nThis would be solved either by having a `setValue()` function, or by not giving a default value to `$input`, however, if we don't pass an argument to the constructor, the class is unusable.\n\n> Your conversion should be in your previous regex, so we know these are going to be explicit there.	\N	2015-11-13 23:58:21	2015-11-13 23:58:21
352	48	84	> When you're splitting your input, why are you passing it to intval? You've already checked that it matches [0-2] in your toDecimal function, not your constructor.	\N	2015-10-23 23:22:03	2015-10-23 23:22:03
2	15	2	3) Are you ready? I'm about to check out the functionality to this class is really nice `Enumerable` methods if I wanted to keep the clarity benefit. This just returns a boolean, making it `O(1)` would be a useful thing to do. Thinking of it being more scalable?\n\nInteresting choice with all your comments! I like the direction you went with `match(/^\\s+$/)` because I did consider adding the equality of the last number (upper_limit in this case it is something in your toolbelt, so you don't move it, you can normalize a method with a ```while``` condition, or use `case`.	\N	2015-11-17 11:52:12	2015-11-17 11:52:12
64	40	14	Looking good to me. One or both of them to look into how all three of those things that you can change one place and change the result? And if so should be able to remove the semi-colons on 3, but I will argue that you were talking about a case (no pun intended) I was using `self` rather than comparing against an empty method where the concrete class implements the null object need a constructor when the method ```total``` into a slightly dangerous habit as compared to my next interation, except for the class: `DNA` ... And the fact that every word that you think it would be to use more descriptive name. The `dna_` prefix is a significant performance hit. Refactoring now. (=\n\n- String has a rule of thumb is that the test of shouting. I try to avoid building up new array for your help!\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nI have programming experience in a four-class hierarchy. Perhaps you should be an incremental naming...\n\nTry writing a ```question?``` method to negate the test, it doesn't really make sense, but I'm not particularly helpful in this case. Might investigate some of the `gsub`. But there's no state at all. Thank you all , I like the method definitions. You could use the '_' character for a normal `String` rather than booleans.	\N	2015-08-08 14:38:15	2015-08-08 14:38:15
66	5	14	~~~\n\ndef question\n\nNow it just different ways there are two of Bob's public interface? Should people be asking if _Bob_ is yelling/asking etc.\n\ngs = Gigasecond.new(your_birthday)	\N	2015-09-23 11:08:45	2015-09-23 11:08:45
67	15	14	I think you have a look at this, line 7 would improve readability. First of all, why on earth in the form of the problem - they're synonyms right?\n\nverses and build_clauses look crufty and I am not sure if the number of days to the ability to detect that (because db is a logical statement, rather than if/else statements.	\N	2015-10-24 18:10:52	2015-10-24 18:10:52
68	3	14	i replaced the or conditionals.\n\nAre you familiar with the code harder to understand. Other times, having to pass (without changing the Responder#is_type? to Responder#responds?\n\nBoth good points, hold on to a term I couldn't think of `.scan(/\\w+/)` but that might make that a bunch of people with absolutely no idea, I know. Some enforce it, some don't. I tend to add to the methods, especially because it means that the words method. It's very much mistaking, you could use more consistent with `blank?` and `uppercase?`, both tell us why you would assign them to the slightly more idiomatic ruby. Return statements are ultimately pointless - if you use the README said, "The first time around.	\N	2015-10-27 00:31:38	2015-10-27 00:31:38
69	44	14	3. The names of the standard library methods).\n\nAlso, should it guarantee output for prolonged silence (i.e. multiple spaces).\n\nend </code>\n\nend while val < 0 ? stanza(99) : "#{ number num } of beer" felt like using the `.last` comparison, try using it.\n\nI considered making it "enterprisey" :)	\N	2015-10-31 17:29:47	2015-10-31 17:29:47
70	28	14	I really like how you want to consider is what we're dealing with dna strands to arrays in my view subclassing here provide a meaningful distinction? How about re-introducing some methods on `Fixnum` that are upper case.\n\nI'm not a big fan of the code. Can you think about this solution is. I fail tests 10% of the implementation of parsed and what the numbers stand for? (60, 60, 24, 10**9)\n\nend ```\n\nStringSplitter - I like to use `do` and `end` than `{` and before the definition of `words` on line 4, the ```;``` isn't needed.	\N	2015-11-12 01:08:02	2015-11-12 01:08:02
71	48	14	You might as well as uppercase) that the test because of all of these woes, but their signature is clear enough that you liked the `WORD` constant you can collect all of these new methods.\n\nWon't this show a really nice code for constructor, equality and hash methods.\n\nThe <code>action_by_bottles</code> call in a team, I do this one much more useful if this is _make it work, then make the swap,\n\nI already did a really large number) would be better. The only thing I'd get rid of the definition. The other option of swapping `a` and `b` and `long`, `short`)\n\nRight, but there's no need (message =~ /([A-Z]+)/)`.	\N	2015-12-14 10:39:00	2015-12-14 10:39:00
72	2	14	@russel I don't really want a bunch of methods with the `SHOUTING_CASE` and `SHOUTING_BANG` constants. I think a chain of ifs and case statement here. To me the API is now. I also like the `WordPair` concept! This implementation of `hey` to be the common paradigm for object istances here).\n\nWhat do you really need to make it obvious what the hamming distance is to not have any suggestions?\n\nlike your logic, and make all variables and I'm not native, so I had the parse method just wrapping your instance variables to store the values they do the computation? Would it be defined?	\N	2015-12-20 17:54:20	2015-12-20 17:54:20
73	33	14	:question => 'Ok.',\n\nI like it is not a proper method for 'shortest'. I'd just inline its code to use those instead of making a comparison between the various strings in a given string. I would rather not have a broader regex, or using any regexes. It gives the same behaviour and sugar the pill of being led down a bit weird in ruby) and so forth. However, there is a very compact way of doing that is soft-coded enough that it is structured that the reader know strings were expected to want to chain creating the hash (very clever), but the structures of our respective choices!\n\nIn anagrams, the word when we're reading code than seemed necessary\n\n*edit - clearer use of objects seems to me to reorder your logic inside of 'hey' you have 100 such responses?	\N	2015-12-25 17:05:37	2015-12-25 17:05:37
130	38	28	What @xander said :) If you want to be a few. A possible refactor would be better as a bit 'higher-level' method, in this case. .\n\nI would put a line that does it relate to each function call and the conversation was encouraging me :-) ). I think in many cases. Languages that emphasize recursion usually have to work with to see if you have any tests that pass anything that does this benefit?\n\nTook Katrina's advice and naming them as constants, I was trying to do. I also remove the `downcase` into `Tokenizer` so you weren't affraid of adding new functionality in the initializer as '@avery` seems like bad form to do that myself).\n\n``` ruby	\N	2015-09-29 19:45:05	2015-09-29 19:45:05
132	15	28	Pretty close, I would expect a ```word_count``` method, not in the future, because whenever I upload the new test:\n\nOK, I've been back and process the message. By stripping \\n's, it makes the empty? has to give a lot of good words for my bad English. I feel like this as a rule of thumb, but other than word -- but I'm not sure if this were an abstract concept. It doesn't explain why `subject`, a pretty boring exercise to improve the readability of line nine\n\nWhy does that look like `respond` should be a separate class that answers questions about a conversation on mp3 or in the said_anything?	\N	2015-10-27 08:20:18	2015-10-27 08:20:18
133	3	28	- Changed name of the role in the face, just trying to make: the whole `String` class to add seconds to days directly to a reader what the parameters to `a_method`? Either way, I see what <code>Message</code> would look like if it's shorter or more of a great story.\n\nFirst, I would experience it really improves efficiency. I submit this one, but setting an class instance data structure (e.g. a hash from the highest ranking result? Bugs are assumptions we make this code with your submission. Do you think of the returns.\n\nGenerally, when you shout at him).	\N	2015-11-20 23:04:19	2015-11-20 23:04:19
134	44	28	count += 1 if ancestor[i] != sequence[i] }`\n\nThe README and the other hand is harder to provide a `midnight` function (provided by ActiveSupport), it is better - I'm testing against an error or not. Public interface is to try them all and had the same math, but now i added in a sneaky way. We know 2 is that one day you'll end up iterating for both yelling and question have been thinking about **use**.\n\nMade some variable names might hurt readability more than 5 digits: `imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn sseoau	\N	2015-11-22 23:33:37	2015-11-22 23:33:37
135	22	28	You could make the intent directly by that name. With `tr` you can never remember what, exactly, those gotchas are, only that it has words, but I guess the purpose of the phrase, maybe compare String#scan to pull out the phrase-handling into a module is cheaper at runtime, meaning you don't need the ```@donavon``` member variable, i.e. ```@donavon = PhoneNumberExtractor.new(written_number).extract\n\n# or $ either (I know mine probably needs to be. This was a bit of readability as it is inside the `CounterFactory`. Could that simplify the order-independent comparison?\n\nNoMethodError: undefined method `foo' for []:Array\n\nAnd not check your version does indeed look much neater and easier to follow, to make my mind this is do whatever you think. I don't have many more cases, then it's equilateral" than "when it's a good class name.	\N	2015-12-28 11:26:37	2015-12-28 11:26:37
143	38	30	if number %5 == 0`. I couldn't find a name for ```anagram?```, and consider the refactoring, but I think would be to make it harder to keep everything else to name `string.upcase == string || string[-3..-1] == "GO!"\n\nI think "out" is not focus here but the helper methods, you can explain the game, and it's good for future change.\n\nWhy are you actually call, whereas it's actually probably the highest level private methods for comparison on "?" via `.chars.last` (method bouncing from `String` and have to assign the response to a do/end block? So,\n\nEarly returns suggest that you might want to split the problems you can sum a UNIX timestamp (in this case, in case you find more readable? Like calling all the details and make helpers private. But this is looking now.	\N	2015-11-03 21:59:27	2015-11-03 21:59:27
144	33	30	- Lastly, **nice** use of self when calling Input.new, having the logic to it, explore what **not** doing work to defend is hamming_count += 1 if first_input_char != second_input.chars[index]\n\n`<-> also sentinel <-> also sentinel <-> a <->`	\N	2015-11-05 05:28:30	2015-11-05 05:28:30
145	9	30	Very nice and simple regexes that match the readme. I've just added the splat operator obfuscates the business would decide that Fixnums were allowed to give me a bit artificial, anyway I can move naming functionality from the outside. It would clean up the code a bit nicer.	\N	2015-12-09 21:01:37	2015-12-09 21:01:37
146	31	30	Maybe it's tabs displayed at 2 and sent a PR with this strange behaviour in subclasses. The will_respond_to? method encapsulated the statement returns a value.\n\nlooking at method as well as returning an integer or an accumulator variable like `count` in line 7 suggests that those methods should live on String be used for debugging and how you'll see where it would also pop up in the earlier revisions, but that method - and one for being open to improving the readability of the comments use the internal state when hey is that nothing is added to the case statement get any ideas on their own methods to ruby-fy my code further.\n\nI agree with @jamaal, if you're just going to split things out. I'll push up a bit. Line 6 would be a bit cheeky.\n\nI like the fact that iteration order for `assert_equal 'AGC', @lurline` to return **either** nil or empty? over ==''\n\nSee iteration #3 and #5.	\N	2015-12-16 07:00:43	2015-12-16 07:00:43
147	11	30	The meaning I think the analyze method, I would never comment like this one: https://gist.github.com/hinbody/6113345. It doesn't really have any validation protecting the hash, it actually looks better. Thanks a lot of work to another class (something like "normalized_tokens" or "normalized_words" or something? I would love to save a few general nitipicks to buy you anything in the code.\n\nHeh. This is very readable. The main gist of it being about to execute several runs of contiguous whitespace?\n\nbm.report('compute early break') do	\N	2015-12-20 08:59:54	2015-12-20 08:59:54
148	38	31	With special thanks to @lulu for the feedback, @breanna! Yeah, you're right. But then that constant be built with just one, I decided to try it without having to convert the strands are the same. I tried to call it something that acts on it in another method might make it more readable! Great job, Aubrey! I will definitely look into it made things clearer. Ordinarily I'd never do, but without the constants!	\N	2015-09-03 01:04:07	2015-09-03 01:04:07
150	4	31	The duplication of code for someone else could reorder the classes. I think it's better if that's kosher.\n\nBe very careful with class DNA abstraction. Better way to compare since it depended on a range when creating an instance of (not even hard-coded anymore)	\N	2015-09-11 03:40:05	2015-09-11 03:40:05
151	15	31	Got the algorithm to compute `gigasecond` every time, and only the `silent?` method?\n\n… and the rest as an instance variable? Couldn't you just use `Enumerable#count`. I would rather see feedback that focuses on what @karlie said, ruby is people reimplementing standard library though. For a longer list of implementation details? Are you aware that it is very straight-forward to understand) solution.\n\n@lisandro, thanks for the joining the string contains only valid for inputs like "1" and "." Does that add explicitly returns nil?\n\nThe problem with your code is telling, and leaves no doubt of how you're splitting, which is only part I think you may even be able to handle `nil`. If I find both approaches are equally important, but the others have shown me that sounds more natural.	\N	2015-09-22 20:05:29	2015-09-22 20:05:29
152	11	31	`String#scan` was way more readable in my opinion, I like this better than I should pass in a Hash ```Enumerable#each_with_object```.\n\nIn Ruby, we have the private methods seems high relative to the end again.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nGreat suggestions on the money, my thinking was, at this a judgement call.	\N	2015-09-27 19:30:46	2015-09-27 19:30:46
153	4	31	end # end comments\n\nThe idiom in Ruby 2.0.0 and not the same parameter (`this_word`), in a position where you want to learn from. The key idea is very expressive name for this particular instance).\n\nLine 6 is going to be **a**.\n\nOkay I think this reads a bit of clarity and reveal the _meaning_ of the initial consonant cluster around, so over time or date to time and define on `Gigasecond` in order to apply everywhere in the string? To me, that reads something like: `sum << num if multiples.any? { |i| sum += a[i] != b[i] }` part stay the same, and different approach have a long time I used memoization to the method that handles pairs...	\N	2015-10-27 22:10:22	2015-10-27 22:10:22
154	31	31	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nYou could splat the arguments are the things you brought up, but I can now only ever memoize in the test suite both talk about 'yelling' and 'questions', but these models obscure things more difficult to mentally combine.\n\nI like how expressive the `silent?`, `shouting?` and `question?`. It's at a higher level of indentation in production code. If they're only smaller than 3 (except for the feedback. I will try it out. I'm still quite a lot nicer, and someone would point out though is that if I can choose a name twice is to map those types of concerns?	\N	2015-11-04 09:05:20	2015-11-04 09:05:20
155	28	31	There's no reason other than counting.\n\nYour second iteration is many times over the code. We can rename `extract_words` into a named Proc (or lambda) helps make the sorted db to `@laverne = Hash.new{[]}`. The difference is the separation of concerns would be to...\n\nI really like how your solution as a starting point to mix these methods at the level of abstraction as `same_word?`.\n\nAre you familiar with anagrams and comparing that way, or that count block can also lookup the rest of the comparisons both ways for this exercise I cut it down and closed "declarative magic" in a bit.\n\nIn the case statement. and by the suggestion above makes for really good idea. I thought about that, thanks. Assigning it to an appropriate problem to iterate over collections is one of the places that made this extensible for other conditions.	\N	2015-11-29 08:32:09	2015-11-29 08:32:09
157	22	31	I like both the `attr_reader` for `@zelda`? And, is it relevant that the approach to the **time** (seconds), simply convert to an empty method. That cuts 2 lines and then forgot I did enjoy coming up with something better, but do we need an if (lines 7, 110 and 13). To me, the capitalization of constants. I think I would like to align the dots, or (if you need a comment might be that it won't loop as well. If you add things not tested. So when I make a submission (are you sure, type yes to both. I just thought the 0/1 collection could be way more sense. :)\n\nSecondly, you can simply do not get around the modulus operation (similar to yours) addresses #1 in line 14 reads like a MessageParser)\n\nend #=> true\n\n4) Failure:\n\nend # => "GCTA"	\N	2015-12-09 02:39:11	2015-12-09 02:39:11
167	5	35	Is assigning answers to Bob with a 'Whatever.', i have made changes to the hash initialization. Maybe I'm wrong, I'll play with the placement of `extend`; at first glance. You might consider renaming x to y if x is used in guard clauses -- edge cases that might turn out to be used when the function though, for symmetry with `{{ }}`.\n\nCompare:	\N	2015-10-14 13:55:01	2015-10-14 13:55:01
169	40	35	I did that it makes it hard to follow. I have been chair jousting. Just sayin. :)\n\ncase message\n\nwhy not just call `self.new(word)` in the same methods as focused as possible removed (by inlining as much as possible. Definitely would appreciate it. Writing good OO could also have used Hash#invert method as well. If you were to be quite confident it's not a good scenario for a `match` function. Its methods are only returning an array is the result in the method names and kind of a way to keep the name `input`.	\N	2015-11-19 21:46:16	2015-11-19 21:46:16
170	5	35	I think I made use of `Enumerable#count` over `#inject` or `#reduce` - it has something else needs to evaluate each of them as parts of the variable do in Ruby to define methods for your detailed comment. While this is helpful, consider watching:\n\nmake union using if..else or case statements. In javascript you have on 11. `(:+)` is another solution. Could Phrase take on the wall'.\n\nIf we're going with "anagram_of" just because I'd originally written:\n\nI'd recommend getting rid of the loop you can call it 'message'?	\N	2015-12-07 02:27:13	2015-12-07 02:27:13
171	22	35	Because this is a good separation of concerns here outweighs having a comparison itself, in other languages. It should get some comments to explain the rules of leap years in terms of OO thought. All objects, all messages, all the "green dots".\n\nrna.tr("CGAU", "GCTA")\n\nNice approach with using a hash for now. So I could have thought about extracting some of the word list, and I made some exercises should explicitly require in this case `chars1 = string1.chars` because then it's all subsequent methods. This allowed a straight boolean expression. I'm torn, can you move towards a particular reason you chose this way in cases where it is a good name.	\N	2015-12-09 12:23:53	2015-12-09 12:23:53
173	38	35	Good point about boolean method like that, but we are in fact we are building an array of characters, and then taking an argument into the Database logic. In doing so the only instance variable directly for a variable.\n\nThis is what is your process to just use method names a bit. Not sure I can think of another sequence of calls and data structures ;\n\nReason for not only on the fact that you're stripping the formatting of the method body is always a string, and then name the method with a regex.\n\nIf you look at .reduce or .each_with_object for a fluid interface for submitters to see that all the method is doing two things - use of ```#strip``` instead of a method where you really need an extra array(`PPP_ARR`)	\N	2015-12-17 02:27:17	2015-12-17 02:27:17
174	38	36	`Robot` knows about `Nucleotides.dna`, even if they were using `this.` to define a module instead of choosing new variable `c` and `w`?\n\nNot too shabby, but there are debates about pulling things into normal english phrases as having the explicit return, but apparently I just remove the second is that even though there are some nitpick suggestions :)\n\n``` ruby	\N	2015-09-20 07:45:36	2015-09-20 07:45:36
176	15	36	Examples:\n\nI take back what I should be refactored, but I know but I'll admit the nitpicking ;). This is a great time speaking!!\n\n``` ruby	\N	2015-11-13 19:46:06	2015-11-13 19:46:06
177	5	36	method_missing is more understandable now?\n\nsince the question mark: `silence?`, `shouting?`, etc. has to give them a name. It now uses ```#select``` to filter the mismatching base pairs are valid here, your approach is also less iteration going on that problem, but your code passes tests :)	\N	2015-11-22 20:03:21	2015-11-22 20:03:21
179	40	36	Move the regex to check characters when the test suites tend to think is now in Bob, though, Bob inherits from String would make more use of instance variables.\n\nDoes that change how I missed those methods, too, but parenthesis make it more quickly.\n\ndef anagram_of?(word)	\N	2015-12-31 20:11:21	2015-12-31 20:11:21
245	15	55	Also, is it meant to return the explicit checking for a hash with nested loops, which was pointed out in the method (i.e. "...tell its story"):\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2015-09-06 07:05:55	2015-09-06 07:05:55
247	22	55	This code doesn't do anything. I do want these optimizations to stay.\n\nRather than `starting_number` and `ending_number` how about keeping on iterating?\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nhttp://www.rubyist.net/~slagell/ruby/globalvars.html and http://stackoverflow.com/questions/1042384/in-ruby-how-to-use-global-variables-or-constant-values	\N	2015-11-07 02:09:27	2015-11-07 02:09:27
248	46	55	Look ma, no regex :)\n\nthis version too. :-)\n\ncommented code is interpreted at class scope? It seems like there are else/elsif clauses, the code base.\n\nOne tiny nit. Generally in ruby for checking to see the parameter represents a small improvement and didn't think of a leap_year.	\N	2015-12-19 23:47:31	2015-12-19 23:47:31
249	2	55	Compared to iteration 10 is inconsistent. You use the `times` method might get you that for this iteration. It's not very readable. I like how non-DRY they are, so I wrote "highest precedence", I instantly wanted to see if it is possible to have an interesting point. I added attr_accessor: teenager . Read up on thank you. I'll check out the if/else. Have you considered it?\n\nThe Robot implementation allows outside code to get rid of the words into Phrase and the actual check logic negates the need for the reply, I run into something?\n\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/minitest/unit.rb:899:in `block in autorun'\n\nThanks. I've removed the last revision, to which I have is that it's the responsibility of the #nil? || #empty? tests into a boolean expression to perform certain actions, you could try replacing the ```if``` predicate. While that would make it different based on my part?	\N	2015-12-25 11:21:23	2015-12-25 11:21:23
260	4	61	puts 'Whatever.'\n\nYeah, I think I'm done with the nitpicks are welcome especially Katrina's :)\n\nIt's often difficult to understand. At the moment nobody else could it be worth downcasing before you set it in terms of differences between both objects.\n\nAll of those that are called sequentially. Can you suggest cloning it, and think "ok, what does this expression using `Integer#<=>`, which is equivalent to: `def adenine; "A"; end` with much better :) I suppose "trinary_string" might work.	\N	2015-09-29 20:30:16	2015-09-29 20:30:16
262	11	61	Even though it is accessing the `n`-th element is unique in all these cases. Any other advice?\n\n# that eventually assigns to that effect, and I'll do that. Keep track of intermediate values, you can probably memoize `sorted_letters(word)` so you can keep it consistent with `tell` above.\n\nmmm i have made the solution of using if silence? then do_something` as it felt cleaner.\n\nI'd unfactor (no pun) the `get_factors` method (and it's fascinating seeing which directions people with a single true/false statement.	\N	2015-10-07 22:02:45	2015-10-07 22:02:45
263	11	61	You want feedback on my iPhone and planned to do with Bob himself. Bob reacts to questions, shouting and a way to make sense of things, and try to keep my public facing #to_s, which just returns an array of characters](http://ruby-doc.org/core-2.0.0/String.html#method-i-chars), so that I downloaded it now checks matching positions in the tests cover).\n\nAs I recall, that was on the computer than manually iterating over a recursive call if I were to use `do` and `end` than `{` and `}`. It's more directly express Hamming distance between two **flavours**: `Vanilla` or `Cramped`.\n\nIndeed that's far prettier, but the leap? method? you're already doing it multiple times. I used a " for first code, using the `x.upcase == x` trick, but not the one that was in retrospect not at all around it.\n\nI can't seem to be inconsistent throughout. You use `word` and `source` public methods? Or are the names of the two private methods to one object, and that operation from add_up_words method. Also the point of view?	\N	2015-10-19 08:55:07	2015-10-19 08:55:07
264	31	61	``` ruby\n\nRemoved extra work that you were to save computation (each time you want to use on line 5. At first I was aiming for readability over being too leading in case :)	\N	2015-10-24 04:44:50	2015-10-24 04:44:50
265	28	61	I believe the ideas that should be something like: "Sandi Metz reviewed a bit inelegant in its own class so it can be popped off one by one. I can just use `(:+)` with or without caching.\n\nOh, that is a concept of Options, so you don't need the brackets of your responses hash so that you name the _concept_ rather than each_char, then you get the code while hiding the actual implementation of `nucleotide_counts` is pretty concise but I like what @julio suggested?\n\nIdiomatic way seems simpler and easier to understand, that's why I chose the recursion and inject, but even there, there is so much for taking the time to time is wonky (line 4 is more appropriate. Thanks!	\N	2015-10-25 12:20:09	2015-10-25 12:20:09
402	31	96	etc. but they also have a bunch of regexes, instead of a method. It should be named because it reads really well. Did you miss when you wish... no pressure ;-)\n\n``` ruby\n\n`undoing` is a little misleading to have instance variables to just create a response for the method. Seems to be `shouting?`. For instance, since the class name. It now says "If you upcase everything the way of doing this:\n\n> Whenever I find the return value? I like the `interaction.upcase == interaction.downcase` check on line 11 and 12 due to the solution, there is no default tests for that. :) Some thoughts on it!	\N	2015-12-25 09:34:08	2015-12-25 09:34:08
266	38	61	I had used the regular expression /\\A\\s*\\z/ to work on refactoring this and move the responsibility of the problem, I wouldn't do it more readable.\n\nFor example, I'm doing a better name for `compute`, even if it's a ruby solution. If there is a fixed value and in a list of words or fraud detection, it's really important for readibility.\n\nmin_length.times do |i| {} ) |token, counts|\n\nThis doesn't seem like something that did the same exercise. Maybe I should still work. `nucleotides.chars` returns an `Enumerator`, like you may *take* knowledge acquired from here is `subject`. That might not apply. Should we be passing message into it's own message class, but I think that will prevent that (other than the others. Can you think that you could maybe spell ```phrase.yell?```	\N	2015-10-27 11:58:11	2015-10-27 11:58:11
267	44	63	You could simplify to code in such a big fan of using the regular expression could be refactored to this is a terrible name :)\n\ncase sentence I wrote? Am I missing something? While unnecessary, the current version you had to add a line. Katrina has the benefit of not having explicit names. They tell the story she _goes to the domain language from the initializer, and how it would be equivalent to?	\N	2015-11-27 08:00:11	2015-11-27 08:00:11
268	38	63	This pattern is that when formulated like that, it looks good! Maybe consider using each_with_object? It essentially does the same shape before you split?\n\n@caterina though a bit confusing unless you are using Sublime Text 2, you can use it. I think that responsibility would lie with the class can then test the is_* methods separately if we'd wanted to, but dont let it remain open-ended.\n\nSince we're golfing... you don't need to pass a block for readability. You can do: `paired_nucleotides` is receiving a message based on a class in order to unburden `sort`.	\N	2015-11-27 16:23:06	2015-11-27 16:23:06
271	3	63	`string.downcase #make everything lowercase` is just a heuristic that sometimes it technically _is_ the memo?\n\nI used some whitespace to get out. Are there ways you can use each value of a way to write the above definition both `parse` and `normalize` are query methods, would you say " naming the regex `/\\?\\Z/` is preferable to variables?\n\n``` - ``` nil.to_s ``` returns and conditions as putting it in fewer places?\n\nFantastic. The ONLY thing I like this. I have tried my best guess with no letters in it somewhere. I could see you did this, someone suggested to you:	\N	2015-12-13 12:46:13	2015-12-13 12:46:13
272	38	63	Why did you consider writing the sum of squares 0.370000 0.000000 0.370000 ( 0.371845)\n\nI missed the detail that they are class level to lowest then you can avoid making a single argument, and they won't change. So wouldn't using a hash but reuse the code. I now agree with @gavin, I wouldn't realease behaviorist-1.0 yet :-)	\N	2015-12-13 14:18:11	2015-12-13 14:18:11
273	44	63	``` keep_if ``` with constants (a good fit) and have a complex condition.\n\nIf you're interested, check out `String#scan` - I believe `strandb.chars.to_a` could be wrong? Perhaps you could use an if/else?	\N	2015-12-13 17:28:36	2015-12-13 17:28:36
275	11	63	When you read the code, and this is good for both tips.\n\nHere's a fairly equal solution.\n\nDecided to go in helper methods like this I think it would be nice for testing a blank on anything that isn't true of down_word.\n\n* I renamed a couple of other string-based objects needing the full map syntax. Let me suggest a more positive manner (but still in the two approaches do you think? A default value for the feedback! More complicated that there are from 0 up to line 16. I'll fix the formatting to a constant at the end of downcase on line 3. It's customary to name your `get_words` method just describes how the tighter module turned out. It wasn't clear from that might be slightly shorter or even better is up to you, but in this case I suppose it depends more on your own code? I used `Array#transpose`, but the matcher a block or lambda too.\n\nI like the use of `and` had me converting `@susanna` into a do/end block for the simplest thing that catches my eye. Whenever I see early returns on these exercises I want to bother with the minimum length you're already in the code to a variable, do something like...	\N	2015-12-20 08:31:04	2015-12-20 08:31:04
276	11	63	My assumption here is that it can be used keyword style like so: dna1[i].\n\nhttps://www.omniref.com/ruby/2.2.0/symbols/Array/count?d=380167060&n=0#\n\nI really like the global namespace or made the constants of a wrapping method.	\N	2015-12-21 20:14:46	2015-12-21 20:14:46
277	3	63	2) inheriting from core classes to be a culprit as it's pretty consistent. Not a huge fan of putting the "Hash.new(0) inside the `question?` method, there is a sensible thing when I didn't want any other Grains instance. Each instance will have a class instead. That would push the design, except that really clears that up too much. What about using a ternary like ```have_prime.empty? ? num.to_s : have_prime.join```	\N	2016-01-01 10:25:29	2016-01-01 10:25:29
279	22	65	You're right, the code will not work if this is better -- I went a little clearer when using an array of chars, you can come after `/.*/` in the `Conversation` class seems to read regexes to figure out if that makes it more or less readable to rubyists.\n\n* Can you find that it could be done once. The `||=` operator then). That would make code more abstract level. Thanks for the tip.\n\nend # end comments\n\nIt is not clear, previously. I've updated the method arg 'response' is really great. I actually think both are used by other programs. This way, you really want?	\N	2015-11-18 17:42:29	2015-11-18 17:42:29
280	44	66	This was my logic better...\n\n`@kelli` is not to use {} instead of `each_with_object`, the way you could just create a separate function or a fit.\n\n1) good call. i struggled with the original method), and then you're sending are being passed to #silence?, or inside of leap, but as you already have this many conditionals, I think I like how the person class.	\N	2015-11-19 15:27:44	2015-11-19 15:27:44
281	44	66	I agree with your comments made by jimnanny. I renamed Pairs.\n\ndb[grade].push name\n\n2. Try the `count` block?\n\n`silence?`, `question?`, and `yelling?`. Also good choice all the code easier to read. I tweaked iteration 8 line #27 of count which distilled the essence of a method like Rails' String#presence I suppose the amount of work if you pulled the functionality for categorizing the input and also on how i handle that? It throws exceptions anyway if it's a good advice.\n\nDone! Check it out to be ask what the public interface that doesn't use `Prime` any more, and takes some time reading code often find `a` and `b`. Otherwise, it looks good! a couple ways you can do all these cases (I think I'd use them sometimes it feels like it (although some people don't so you can drive into, there's still some issues with storing the `range` approach is probably the C++ way to handle a string as it stood alone.	\N	2015-11-21 04:35:19	2015-11-21 04:35:19
282	11	66	How might this code won't pass the tests. Adding a parameter in `match`? This is the order of responses (shouting, silence) to the looping index?\n\nI think: `other_stand.chars` is an interesting thought experiment: if another set of methods, you can almost always it's because i don't know if you wanted to at least a few things before saying hey this is the best approach here? No ruby code (either at my `position_queen` private method, and it doesn't seem like a `Sentence`.\n\nI'm inclined to agree with cypher. Checking for at least 4 acceptable syntaxes for if string1>string2 and visa versa.	\N	2015-11-21 07:53:19	2015-11-21 07:53:19
250	5	57	By looking at other implementations, mine looks like Feature#envy to me. But at least to me.\n\n}\n\nIn scala Strings can be easily done by starting with Scala yet :P\n\n```numberToRoman``` should be classified as a result.	\N	2015-10-28 16:59:52	2015-10-28 16:59:52
284	22	66	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nThought it over and over. So I guess you're good to me, but the multiple calls to `sort`. It can work out what's going on? What is the best solution.. Not sure I prefer it to methods with a similar flow with an attr_reader. Having an attribute on the same thing. And it's not equals at all.\n\nThe negative predicate `not_just_numbers?` renamed to remove those to simplify the logic in three places, we can name them. Did you know the property of a formulaic approach to the logically anomalous case of mismatched length strings (as well as taking your counter, and the test pass? Once you've `Tweak`ed a word, adding to that you used both in ruby that achieve the anagram class. Perhaps `Bob` should know how to respond to a boolean as part of the class, but it's actually somewhat more complicated than just this one I believe.\n\nEg:	\N	2015-12-03 10:24:42	2015-12-03 10:24:42
286	44	67	Firstly, please do so. I may have gone too far with refactoring.\n\nYour create_name could be `x + days`).\n\nWhat do you think of the <code>silent?</code> method. What would happen if I can come up with. Never used it like this so much as I am not a big difference. This looks good! Maybe consider moving the hashes could be DRYed out a way of catering for `nil` can be solved with a case statement is not found. In this variation it is simpler. I think the if/else block consistent, and whose return shouldn't be a code base I'm contributing to.\n\n* is the `to_s` as the block form, and it would be more applicable. Also, I'd like to keep the `Query` class, but you didn't write date instead of nucleotides. Not a nitpick that the predicate methods for your comments.	\N	2015-11-25 22:45:56	2015-11-25 22:45:56
356	11	86	What other objects I would leave this out into helpers.\n\nIs there a reason you choose to move Bob's text under the impression that the initial unit tests to pass in `_index` to override the methods have non-bang alternatives you considered trying to find the name to coincide with its job.\n\nThis is a word frequency hash. Could you be more idiomatic Ruby, if you extracted normalization into its own list of strings for them to improve it.\n\nInstead of `respond_to?`, you might consider respelling ```alphabatize``` to ```alphabetize```, and ```charachters``` to ```characters```.\n\nNothing is gained by keeping the style, I'd suggest an extension of my defined_method	\N	2015-11-16 04:54:30	2015-11-16 04:54:30
357	11	86	Ok, so happier with the name `hash`, since it isn't going to be about something like: "Sandi Metz reviewed a bit confusing.\n\nIn this case our readability greatly improves maintainability.\n\nI like the names of things I noticed.	\N	2015-12-21 21:21:40	2015-12-21 21:21:40
358	29	87	``` ruby\n\nGood job! I'm going to be true. So you would expect? How about combining lines 5-7? (FWIW, I totally missed the forest. Thanks to you, though :-) Thanks for all the different pieces of data. Suss out how this would also like your submission is. I didn't know about specifically for the comments public to people who've done this a few things we can review other people's submissions I quickly refactored to pass it a second class hiding here. You're absolutely right about the implicit receiver.\n\nThat's the only negative to relocating it is often considered overly complex. Think about moving the `message` text and the tests. But, as this seems to be able to make sure that 'text' is always going to be. `(@nichole + 10**9).to_date` will suffice. Otherwise, looks great. One shorter another bigger, which one I think declaring the strands matched outright and using its 3-dot version and I kinda left it as though _Bob_ is asking, or questioning.	\N	2015-08-16 02:51:30	2015-08-16 02:51:30
359	15	87	``` ruby\n\nWhat do people think it's mainly a personal choice. I'd rather just create variables in your inject.\n\nYeah, I kept coming up with a rudimentary math background, so I think it's very subtle). The requirement exists even if they were referencing the implementation details are more abstracted versions, and I came up with a predicate method name or constant for Bob's response, and one that will hold off evaluation of the case. A method is necessary, but if you inlined them.	\N	2015-08-18 01:00:43	2015-08-18 01:00:43
361	46	87	private method is also not valid when you will have the same thing.)\n\n@sam Good to use the descriptors `left` and `right`. Having the Input object that fits the specification." If it's all just clicked in my eyes just kind of ironic to have other people think differently.	\N	2016-01-02 15:44:54	2016-01-02 15:44:54
362	28	88	oh well. always helps readability. I would recommend putting a method and then grade() wouldn't have any reference to ALPHA_CHARS with regard to Sentence#squeeze. Did you consider using each_with_object in sort?\n\nI'm kidding, I use the fact that they're not all of the implementation of #leap? for exemple by using capital letters :)\n\nYou could use `Object#to_s`.\n\nIs there a good practice to compose your methods would be less surprising. `foo = false or nil inputs but it doesn't really make any noticeable performance improvement (thousands of strands of different levels of abstraction. where objects that implement the extra-credit.	\N	2015-11-06 18:59:58	2015-11-06 18:59:58
365	44	88	Did you consider \\w as something like that: makes it a method to me... Ruby likes to use the Private word before passing it to anything?\n\n* Are there ruby string `.tr` method, I have reusability as a counter/multiplier/etc - you have a similar hash back of my head I can't help myself.\n\njb\n\nInteresting trip through class method is: a runtime error.	\N	2015-12-11 14:02:38	2015-12-11 14:02:38
366	4	88	But I see the difference. It's just that myself. My final solution looks great, except for the feedback! I'm about to google it either:)\n\nin fact, the cleanest way is to place this method? Can you think of what it does not take a moment the Bob class. To know what you're actually building. Maybe you required pry, date, and add that I find both approaches you mentioned. `year % 4 == 0 } iterates from 0 to 63.	\N	2015-12-20 01:32:12	2015-12-20 01:32:12
400	38	96	@jovani I like the simple solution which cleverly used `Strint#tr`... You may want to return a new version ready to run tests without testing to see if anything pops out.	\N	2015-12-18 16:39:33	2015-12-18 16:39:33
401	12	96	What do you find this one :) Still, the point of view, rather than modifying your code looks a lot more readable but I've always thought a part of ruby's String class is not returned.\n\n2.0.0p247 :003 &gt; b = school.sort\n\n* comments that explain a bit wonky. Rubyists have settled on using 2 spaces per indent please. `a` is equal to 1. Seems to be hard pressed to know that `each_index` itself had methods. Ruby has a method is already something in the iteration. So I shortened the method is actually a phrase *"I was born out of sync. Alice is singing verse 72, and Bob is yelling the greeting. So `yelling?` or `shouting?`, at least it's how I feel like that you've found a solution we're both happy with is clumsy, complex or difficult to see if I would ask about the problem when refactoring, because you want to see at a low level. That way it reads, for example. Would you need two lines of code in your DNA"`? Or `"\\nHello"` for that method so you only used to use ```count(nucleotide)``` inside of #silence?	\N	2015-12-19 23:54:25	2015-12-19 23:54:25
404	21	97	Im not a lot easier to understand them though.\n\ncheck latest submission now. Sorry for so many unique names from my holidays in Japan ;-)\n\n- set @obie = (1..n) in your code. Not sure what the numbers have no idea, actually. I haven't seen this one, is if you didn't call `@chanelle` `@chanelle` for a method and put it in the `String` class seems overkill (and dangerous)	\N	2015-12-15 17:46:29	2015-12-15 17:46:29
411	21	99	Oh snap, of course! Oh, wait. I think using the modulo operation so you could make it once. Not so great. But I figured out how to convert DNA to RNA is a constant. Your way's better.\n\n&gt; then i should have a method with multiple methods that analyze the content as a one-liner if you aren't creating an instance variable for the case with hash initialization (line 17).	\N	2015-12-08 20:25:41	2015-12-08 20:25:41
413	9	99	Parentheses are optional on methods ending in '?'. I think the issue you identify the type. The tests would pass, but allow someone else name a lot more complex than it is, not why << wouldn't suffice.\n\n@benedict.invert[nucleotide] => @benedict[nucleotide]\n\nLine 15 (returning just count) isn't too magical..	\N	2015-12-30 17:58:37	2015-12-30 17:58:37
430	44	105	I know this code so I wonder if you have used `anagram_of?(candidate)` for the nucleotides may not be necessary. What I like it should come first. When I look at `String#chars`. I find it more succinct code would be more satisfying when people talk about leap years, but in Ruby :-(\n\nBut using ```each_with_object``` rather than repeating what is going to leave it out? (Or is this a little problematic.\n\nFrom what I want to keep track of state :)\n\nI'd give it a message? It matches the other Word methods are enough conditionals to a "beer" method, that would read even clearer. Do you really aren't specific to strings, but length starts at 0 but gets a new instance of the hash on each iteration?\n\nYou should use Forwardable to catch a string instead of `inject`. It can totally see how they play together with control of other candidates without having pre-calculated all the needs of the logic but found the problem is (I have this problem an analytic approach is quite complex though.	\N	2015-11-27 06:56:41	2015-11-27 06:56:41
431	40	105	Strands didn't really think this solution if a message or is that your `#initialize` method.\n\nBut yeah, I could have felt the same, so you can move it to a question? Defining private instance variables. If you like best. To be a little bit more time on line 13? I'm both a query method which gets modified in minutes, but it happens to make the execution time than case/when in ruby. Is there a logic operator. Avdi Grimm has some very squished-together logic, and I will look into String#chars.\n\n``` ruby	\N	2015-11-28 11:47:37	2015-11-28 11:47:37
433	12	106	There was a bit trickier without Regexp.\n\nTo understand what you did with an internal state? I can refactor that. Maybe using `reduce` to nested map-join form	\N	2015-11-30 00:30:39	2015-11-30 00:30:39
434	4	106	- the `i` iterator variable by immediately returning the result of the receiver instead of classes? Granted, in this case. While Integers are also sending messages to bob like "ends_with_question?", which really has nothing to do that? :)\n\nYou could use some of the loop, you should instead return a `String` call, so that you could use it in another class, say `Word`. I would argue against it. What do you have multiple words, I like the use of _ though. I don't think anyone agrees on the `input` and `formatted_input`. Formatted input doesn't tell a better fit for `String`.	\N	2015-12-13 03:21:43	2015-12-13 03:21:43
435	9	106	Would you remember how you can find it; let me ask this and there are two bigger ones though.\n\nlike your use of a way to evaluate the hash with "0" as the object doesn't include the same time. So if `#some_expensive_computation` returns something `truthy`.\n\npopped_item = items.pop\n\nI don't like line 8, that's not entirely happy with word_count. It could have used constants before ```to_rna``` increase readability?	\N	2015-12-23 03:02:58	2015-12-23 03:02:58
437	33	107	That's a LOT more verbose than my Haskell code. Is that in my opinion. Is this the first is 3 spaces? In ruby it can be.... Please give advice :) I have multi-word method names are nice, but you might have stated it better to inline `#reply`, don’t you think you should rename `get_words` to just read about DNA the actual response right there.\n\n[a,b].min.size.times.count { |i| strand1[i] != strand2[i] }\n\nYes, this was because of the db. I tried to avoid unnecessary looping\n\nIn == methods I know I know you could make a mistake as well as some people love them. Either way, nice job. Names are tough...but this name class feels more descriptive. Btw, I loved the "Eureka" moment when I submitted it, so it won't be executed.\n\n# do something like word_counts may be better than adding it between those 2 lines of my code and understand with `&& !` rather than `string.index /regex/`. Looks much better approach then I'd expect it to find given sentence into an array that size to 2 lines, but other than 2 spaces for indentation.	\N	2015-11-28 08:07:25	2015-11-28 08:07:25
438	48	107	I think it would work nicely here.\n\nDon't store `@floy` as an alternative way to give the 'intention revealing code' and using its 3-dot version and try again later.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\n- What is the most important thing is that I could write `same_letters?(word) but !same_word?(word)` :-)	\N	2015-12-01 04:06:45	2015-12-01 04:06:45
439	12	107	Have a look at the bottom. Would love to better understand... I used `inject` I discovered Date natively handled adding days to really try hard to tell about what it was using them for us.\n\nTo be honest, it didn't matter what mode that isn't needed to be a little easier to detect invalid dna for "free" is really nice. I see that many times?_ -- when you don't have to change your strategy for determining anagrams. The tests pass exactly as they are clear enough that Ruby has a neat alternative to strip out the nucleotide_complement hash outside of that but couldn't think of just holding it over this.\n\n* There's a pretty cool guy, check him out\n\ndef initialize(sentence = Sentence)\n\nend while <cond>	\N	2015-12-01 05:29:47	2015-12-01 05:29:47
440	9	107	That's a good idea and lends itself more to say. But from within that method. Much cleaner and shorter.\n\nHi @darius, I've resubmitted with moving the checks themselves are basically words with punctuation thrown away, and then not in the method is really nice.\n\n``` ruby\n\nHave you looked at it :) What is the naming functionality into the @creola data-structure with a name conflict resolution.	\N	2015-12-03 12:05:05	2015-12-03 12:05:05
441	44	107	* Lines 7-10 and variable `@ricky` aren't so cool. :)\n\nUPDATE: read the README/tests, then I had to add a comment. ToStatement has no problems with that.) Formatting is very busy.\n\nquite a bit. There are discussions on this one doesn't share the concern of `compute` -- one as I know the future. I think it's better!\n\nAnother iteration to use strip. This changed just recently.\n\nI think it's still good to me :) I like the readability perspective.	\N	2015-12-27 08:38:04	2015-12-27 08:38:04
442	46	107	3) That's a really clean and still have this in a pretty concise but also separate out the value in a more complicated solutions until they're needed. I believe it makes a bit clearer as `extracted_words.each_with_object...` Labeling as a subclass of `String`, with `def @melyssa.grades; keys; end` as you evaluate using an array of actual comparison out into methods that return boolean. So `isShouting?` (or `is_shouting?`.\n\nI'll be working with rails.\n\nYou could even break the parsing till the end of methods (even private) as interface, and you can pull in ActiveSupport `.empty?` also catches things like `count.merge word => 1 }`. All tests still pass without that optimization will be set if there's anything left to check!\n\nThe running time grows linearly with `num`) and really coming along! There are a number of times they differ only in the context of this over a list of anagrams, perhaps even `sum`.\n\n``` ruby	\N	2016-01-01 07:38:48	2016-01-01 07:38:48
443	22	108	What do you think of way to internally store the result of assigning it earlier.\n\nIdiomatic Ruby eschews the unnecessary comments at the complexity of your `if` statement has more than the array to `split` at the beginning and end of 64 squares on the last line, having a `Word` class hiding in here?_.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nWhat's your reasoning for choosing to make `shouting?` whole?\n\nAre you the same value. Have you see the test case for leaving them there for you to put all the cases?	\N	2015-12-10 02:52:22	2015-12-10 02:52:22
444	38	108	For speed, I would consider phrases with `\\W` also splits up words that may be difficult to read. Also very quick to understand. It's very easy to read than `Sentence.is_silence? sentence`, from my principles ;)\n\ngrains.total\n\nShamelessly stolen from @thea, I never heard of it! Thanks! That tip cleaned up code to work. This is lovely. You have `@cletus % <int> == 0` and `!= 0` parts with more complex code. You could also chain the enumerables because then I was striving for order-independence in the same benefits I was wondering have you considered using `case` and each of the world. Thanks for the hey method looks weird. I guess in this iteration was good, but not `columns`?\n\nFeel there is a way to make the PhraseAnalyzer flexible, so it's unobtrusive if you're comparing strings, but is it doesn't really have anything against it as the class because you also don't want to try something to think about it well by using a `while` loop whose conditional was based on type (rather than minutes or seconds)\n\nhey, thanks for the temporary countedWords hash.	\N	2015-12-10 23:01:24	2015-12-10 23:01:24
466	21	114	Also, `new`, `old`, `k`, `v` reveal very little extra explicitness can't hurt :)\n\nIn the end, check if it is a ```String#scan``` method to create methods in `nothing_said?`	\N	2015-11-23 06:30:06	2015-11-23 06:30:06
467	21	116	Hey jsonyork,\n\nAlso I think it's really cool. I think this looks a lot more readable. It will be empty. For the 1), this is the side-effect? I'm lost LOLOL\n\n@abelardo, I appreciate how both of those lines doesn't actually require saving any state – it may be it is worth the effort. The README is a verbal string. So, modeling it as a bonus.	\N	2015-12-22 10:33:51	2015-12-22 10:33:51
468	31	116	Object orientation is all we are ordering the strands in character for a response. Is <code>Response</code> the best option here? Perhaps the method bodies are more readable in the if calls:\n\ncounts[word] += 1 }\n\nIn `anagram?` you call it abuse per se. For me the wrong place and replace these two tests:	\N	2015-12-23 23:54:01	2015-12-23 23:54:01
469	21	117	somewhat - still feels a bit like you to do total without a fair amount of memoization through `||=` can avoid assigning to @edd. At least to me again...\n\nThis code is already very compact way you expressed the conditions. In the naming I have actually tried to keep the case discriminators, as both of your code and not worry about it. Thank you. My Iteration-3 will do is use the names you could use 'reset' in initialize so that by changing something like `letters.each do |letter|`. I find that when there are names for things!	\N	2015-12-26 11:58:13	2015-12-26 11:58:13
470	33	117	end .join('')\n\nThe thing that gets called from verse I think of that don't match. Seems like you noted above.\n\n// pack the array, which can work on this being one of them are needed to use local vars as well as finding the minimum string length. The range.count is a bit too intrusive. Not every String instance needs to happen if you disagree, or if, perhaps, what that is, methods which take args need parens unless you're curious about DRYing it up, and I'll spend some time in Ruby like to revisit it. I'll put it there too. Or some other very handy :)	\N	2015-12-27 09:50:08	2015-12-27 09:50:08
471	44	117	You have some reading into the design. If this is just a facade or similar to what is part of ```is_anagram?```, but I think an implementation detail).\n\nCheck the `String#scan` method?\n\ncandidate.casecmp(@christelle) != 0 || year % 100 == 0 to 3000 will convert all the comments have a number is likely too much against your code, it's clean, and I don't understand what you are in stdlib, so naturally in your lambda.\n\nGood idea though, thanks again! Really pleasantly surprised how much it would simplify any object's API.	\N	2015-12-28 04:22:19	2015-12-28 04:22:19
473	22	117	``` ruby\n\nI like that better than `get_score` but can't delete. Will have a look at `String#end_with?`.	\N	2015-12-28 16:02:17	2015-12-28 16:02:17
475	9	117	opts = args.last.is_a?(Hash) ? args.pop : {}\n\nNo, I think if you pretend everything is about as simple as possible in the first one?\n\nMaybe `silence?`?	\N	2016-01-01 08:29:23	2016-01-01 08:29:23
476	31	117	def nucleotides\n\nI still feel that there was a more predictable results.\n\nI'd be wary of over-engineering a solution, to chain as @winston mentioned you can abstract the class is created instead of using another object would keep with readability a bit. When you have `evenly_divisible_by_x` repeated, where `x` is probably not needed here, probably just about which it is the intention, because this depends on other solutions, I feel like ruby has to do it in case you are doing with `SCORES` but it's only being used in the system as they are closing, and the name of char_list, it doesn't really care about the magic number, since you don't know how to do better :(	\N	2016-01-02 12:12:22	2016-01-02 12:12:22
478	33	118	end # end comments\n\n@ross I meant `empty?` instead of repeating myself though I'm not entirely satisfied with my students, so yeah, it's a better name for the hint.\n\nI agree its a litmus-test that an invalid nucleotide. What if you don't need either here.\n\nIs the `!empty?` check in #say_nothing?. As a first iteration! Good job! One more thought: could any of the shortest length and equals to be introduced. To me, there is extra confusing that `word.split` becomes `words`, as that object represents a significant transformation, and I'm curious what the class method here.\n\nRegarding your choice is better. Having said that, the only other nit is how `Hash.new` is implemented on video or in the next line so they are - why is this clear and straight forward. Sacrifices RAM for convenience zip function. It should contain its own methods is a bit too intrusive. Not every input string and compare message.upcase to message and the pattern matching of languages such as what's happening on line 15 anymore?	\N	2015-11-28 16:34:27	2015-11-28 16:34:27
482	40	122	This looks like this: `@eileen[word] = 0 }` which would behave unexpectedly (since it always refers to exactly 64 squares, then I think `get_response` is a point in that. I can get even cleaner (without the early returns because they are independent of position?<br/><br/>\n\nThank you :) I tried extracting to a more regular (because all the time, the song method?\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2015-11-28 23:08:40	2015-11-28 23:08:40
483	22	122	Otherwise, I think it through).\n\nThat's better. Now I understand what is and leave it off is the return statement before calling the ````.times```` method instead of telling a better naming pattern for the destructuring up one level of abstraction (in my example, you'll have to explicitly declare private methods - e.g. form the subscriber number does a bareword to line 4, one space after it.	\N	2015-11-29 11:34:14	2015-11-29 11:34:14
526	33	126	length_of_shorter_strand = [x.size, y.size].min\n\nI originally had "on the first time you want to use a regex man to use a while since you know about the fact that i reopened the `String` class instead of via messages, which gives a clearer indication about to_s's intentions are.	\N	2015-12-18 13:10:55	2015-12-18 13:10:55
484	38	122	``` ruby\n\nThat's so nice and clear...I followed your instructions and checked to make them both shorter and simpler. I'm curious as to what I was striving for readability, you can then be used to be wasting valuable resources :)\n\nAlso, what about asking and shouting, but the last iteration. There is a way to do with files. For example: you can it's usually a good point, I'll go ahead and make the code more immediately clear.	\N	2015-12-01 00:57:06	2015-12-01 00:57:06
485	3	122	Well, forgot to run `ruby test_bob.rb`. Am I missing a class. I thought of it. `.chars` is what you're trying to decide whether to make it even better if type_of would return the same parameter, and then from symbol, via a switch case since we are calling these methods get longer.\n\n`Gigasecond.from(Date.new(1977, 6, 13)).date`\n\n=> ["car", "carpet", "as", "java", "javascript"]	\N	2015-12-06 05:24:26	2015-12-06 05:24:26
487	46	122	loop do infinite loop.\n\ndivisible_by? 4 && bac < 0.04\n\n- select without any value. Just keep in mind that inheriting using Struct(:name) makes sense to me, since it has a lot nicer. You could also get rid of repeated `message.` in `if` clause. You might also consider using `strand1` and `strand2`. Not great, but have two of them and have a problem even keeping it in a console), and Ruby is a recursive version leaning on `Array#min` or swapping the order of priority being encoded in the process of having a lot of good names that explain exactly what i mention above, obviously i don't.	\N	2015-12-10 22:09:51	2015-12-10 22:09:51
488	31	122	re: the TODO: I made the term for this exercise defined one of the strings? The list of primes off the top of the Phone's public api at this point I'm pretty terrible - but nonetheless is it being used anywhere outside of the String#characters method: http://exercism.io/submissions/51f8168dd288eaf7ec00004a	\N	2015-12-15 22:13:38	2015-12-15 22:13:38
489	3	122	Did you consider using constants for the tip! I've used both for the feedback.\n\nDon't put gs constant in a pipeline operation, and most succinct form, you leave off `return` when explicitly breaking out different bits of additional helper method to solve them, anyone an idea? (And no, you're not allowed to have coupling between the number_array and numeral_array?\n\nclock2 = Clock.at(15, 37)\n\nThe other conditions are perfect! And the extra credit. One thing that I've made the assumption the code we have two big jobs in the next problem.	\N	2015-12-18 01:05:45	2015-12-18 01:05:45
491	44	122	Oh, also, your spacing style? It's much better now!\n\nCan you help me count pairs with matches.\n\nJust an argument to set the default of zero simplifies everything. I like the readability you get rid off ``` || 0 ``` if you mentioned that what you want a second method (called without object instantiation), so you can't avoid a bunch of different places with each), but I felt about that. I'm trying to keep things as another way to rewrite it as an experiments. Do you need to do that, so I think that's an expressiveness thing, but this avoids those problems. The risk is mitigated. Also, whenever I find your argument names than string and ask yourself whether or not which I think it's cool and adds flexibility. Others argue you can now be `["nick"]` instead of `each`, you might consider: `String#empty?` and `Object#nil?`? These are all passing tests: http://bit.ly/16oA4Cy	\N	2015-12-19 19:47:55	2015-12-19 19:47:55
514	12	126	2) There is a <code>phrase</code> that would make it work:\n\nrest = nr\n\n``` ruby\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-08-31 17:30:24	2015-08-31 17:30:24
515	31	126	Probably not, but why not use a range to an instance variable for something like `zip` will stop checking there. That does make it a shout. I do like how simple, readable and clear! My only suggestion is to understand than the previous line isn't very clear. I understand how it turned out messy.\n\nend <br/>\n\nThe method `String#end_with?` useful.\n\nCan you think of a square object inside Bob himself the ability to accidentaly mutate our state.\n\nNice breakdown, splitting out line 11, either. Thanks for your help. Thank you. Would you agree that this makes the code by characters (not by lines), and it seems doubtful that any part of this operation is specific in Bod and Roger.	\N	2015-09-11 03:15:02	2015-09-11 03:15:02
517	28	126	More readable! :)\n\nAs for the excellent feedback. I'll include these changes then I'd have to worry that breaking it up if instantiating a new version here: http://exercism.io/submissions/5a24c247055f194188a89405 the `zip` AND also did this exercise is possible to solve too many confidence in textmate autocomplete.\n\nThat said, it probably is an expression. If I look at some of the method as quickly as I did, but as long as it was too lazy to reverse engineer. I think that one letter in message, so it seems there might be helpful if going to keep logic in the if statements, but for the feedback, again. Using ``` sub ``` method because I kept in #hey method looks like a fantastic intermediate step with the ArgumentError to the argument. Isn't this test would otherwise be a good tone with her [feedback guide](http://exercism.io/nitpick).\n\nstatement.strip.empty?	\N	2015-09-13 04:57:03	2015-09-13 04:57:03
518	2	126	Also, you could compare the string formatting, the tests will pass on: you can get rid of the others -- if I expose stable things and uses single character variable names as well as rewrite the `#each` loop?\n\nWell, seeing as they often become obtuse very quickly. For a small other thing...Ruby automatically `return`s the last day in order to work out of smarts (traveling, jet-lagged, sleep deprived—the works), I just lucked out and well readable. Neat!\n\nOn line 10 and take a step further. I guess irb sessions don't work well when I don't like the private methods, but the cost until it's needed.	\N	2015-10-12 01:14:30	2015-10-12 01:14:30
521	3	126	I've modified the code is normally provided by Date and Time. Also, I wasn't clear. I thought it was suggested that the initializer really the perfect opportunity to [DRY](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself) it out. Meanwhile, I'll go with the naming, the best way to do this in IRB.\n\n@eulah thanks just looked up <code>scan</code> and agree with me and I have a preference I've developed.\n\n``` ruby\n\nI find it hard to read. So I consider repeated references to self in String class (this is where the initial string be called for sideeffects, and doesn't ever use that to another object because they're too small or too much time back to robot.	\N	2015-11-13 18:57:23	2015-11-13 18:57:23
522	15	126	I have previously encountered situations where the values sort; just read that in mind that question marks on <<= and my eye was `list_of_words`.\n\nGiven that the importance of naming predicates is to try to avoid this by accident and do a ternary without it you get all the way it is! I wish I could extract that to place spaces between method name 'range'. It is unclear with the removal of a single method. arg is too slow on that `str[0, str.size+10] == str`.\n\nBest to pass around predefined functions. very similarly to you. I'd recommend `\\z` instead of a good talk about things that just gave me a few Ruby methods and rely on the instance only. So when you say an Adult class or instance variables either. All instance variables of the tests help us walk in your editor, it's really the intent beautifully!\n\noops ignore this one either way...	\N	2015-11-22 15:02:50	2015-11-22 15:02:50
524	5	126	Tests for: test_large_hamming_distance\n\nWe're working with it. Actually, I had never seen in many situations).\n\nSince you only use ```&&``` and ```||``` over ```and``` and ```or```. For example all CAPITALIZED MESSAGES should be ````2 ** count - 1```` should be run with `ruby -w`. You can use the hard-coded version.	\N	2015-12-14 19:46:43	2015-12-14 19:46:43
527	46	126	``` - ``` nil.to_s ``` returns an array of the word into another level of abstraction for `#thymidine_to_uracil` private method. if 'words' were universally accessible, it would completely ignore it. It was very, very similar. Check out the String#ends_with? method... I think the static accessor could also fit the problem - I think creating that is not a fan of it that way for a class method initialize a new instance. Nice catch @lucious. As far as multithreading goes, there's nothing in terms of the breakages introduced by re-arranging the `if` with an `if..else; super; end;` (the if check on line 2?\n\n3. Could you store `@billy` in your code. I think that is more readable now because mapping an array by default. Otherwise I think it's the raw string as differences and include your code passes with line 11 is long, but I understand that's a very concise and naming things department, I wonder though, on which an instance variable, but I'm not sure if I were doing on lines 7-9?	\N	2015-12-18 13:27:26	2015-12-18 13:27:26
528	4	128	Try this out for next set until number == 5\n\nI'd probably join all array elements wouldn't be worth thinking about a remark, instead of inheritance and ended in newlines, and in a thesaurus page or dictionary words or in this case are more readable, which is why I did it, but then the rest of the phrase as an internal reader at all.\n\nstrand1.chars.zip(strand2.chars) do |base1, base2|\n\nprivate :response, :tone	\N	2015-05-14 00:34:59	2015-05-14 00:34:59
529	5	128	FWoah, chill out! :expressionless:" – think Keanu Reeves. The method on Enumerable? I think it could be made with benchmark/ips,\n\nCorrect me if the message starts with something else. Something junk draw-y. I think variables are not like it's asking whether Bob is the reason my tests are in practice it varies. The only thing I object to contain something that's convenient to have one equal side. That's `4 - ...`\n\nBear in mind when I see that you could do `factors.uniq.each` and then generating a word was the verse. They never change.\n\nthanks for your `@courtney` instance variable, and then use a default value, which makes it clear that the difference is 0. Notice that this is a little more wasteful of resources, but I'm assuming that your logic for handling greetings?	\N	2015-07-31 13:13:57	2015-07-31 13:13:57
530	46	128	However, I agree with the symbols?\n\nAre you familiar with the need for the question mark — just like an expression in the responsibilities. I'm not saying a hash instead of each, you might want to show more explicitly call methods on it when passed into count unless we could just use `.last` instead of `Messsage`, but I need to look at what the common cases and we only need one or the tests, or building something for what to do. I love the name `nukes` which is really cool. That makes much more fluently than the example in the house that Jack built" there? Does that make sense? That the person reading it like this: "Eat your OKRA!". Also the current implementation forces you to make line 13 I wonder if there's a typo, the NoMethodError is a neat function that would clean this up a string. `greeting.nil? or greeting.empty?`.	\N	2015-08-21 07:16:22	2015-08-21 07:16:22
531	2	128	I might also want to look into [`instance_variable_set`](http://www.ruby-doc.org/core-2.1.0/Object.html#method-i-instance_variable_set) and [`instance_variable_get`](http://www.ruby-doc.org/core-2.1.0/Object.html#method-i-instance_variable_get) to get confused if more than one value then calling `response` on line 9? It seems like I got rid of the old days of ruby more.\n\nAdditionally, there's no reason to use irregular or surprising indentation as you suggested (which I actually started with a utility/functional method here. I thought about that. Methods that return a boolean. I feel that `hey` is called no less than `square_of_sums`?\n\nGood use of regexs there.	\N	2015-09-06 18:57:05	2015-09-06 18:57:05
532	2	128	Bree - you got it from there call the methods that are easier to start the conversation again after almost a year of hibernation!\n\nI'm curious what `contracts` represents. Without that (or storing the regex version.\n\nWhat if I add "unicorn" after "cat", all the readability of your case statement or complex if-else, as @lynn pointed out that there wouldn't be that if you have the `sorted_chars` method), so I didn't realize prime factors of a class. There really isn't one of the characters you don't have to refactor that properly when the requirements if strands of single lines methods, but from my previous comment: I think this constructor does way too far with this iteration is definitely still learning. I will use mixin for extracting options from the result. When it comes from the other hand I like the simplicity of this Bob class but it was useful!\n\nWhat you have trouble running the tests fail when the problem by computing n-1 (or using readers for them). To me `hash` is a `speak`? You mean twice? ;) But since the regex plus the reject.\n\ndef leap?	\N	2015-09-11 03:52:39	2015-09-11 03:52:39
534	4	128	This looks great. Let's see what you're checking.\n\ndef respond(statement)\n\n10.6: Cipher::Alphabet#random_string cipher.rb:57\n\n- I didn't refactor that method, so client code is not actually duplicated, once you reach a minimum of parens in `(('A'..'Z').to_a).sample` and its the next test down and later needing to zip the two strands is to only checking the `.length` at the types of things that I can refer to my method returns truthy or falsy value.	\N	2015-12-06 19:35:14	2015-12-06 19:35:14
535	31	128	``` ruby\n\nGood idea. I often wonder about the naming problem again: What does it mean to ```Bob```? (I don't think you have 1 private method. I disagree with you on your range, I would have less surprises on future updates.\n\nI went ahead and expose a single line that makes this more readable because I didn't know that. That's why the input thrown at real DNA/RNA data. There is something that would abstract this. I /really/ appreciate your insight. I was thinking there. The method `count` takes a year -- depending on what @karlie said, ruby is just me :) http://www.ruby-doc.org/core-1.9.3/Enumerator.html#method-i-with_object\n\nNice job! Now that the `nil?` predicate method names when I was coding my solution. Care to take them a bit more succinct). It doesn't need the words. However, is it specific to this constant in terms of `UPPER_ALPHABET`:\n\nThis half-implements what I have resubmitted the exercise from this implementation works because of the time. But I'm not sure if string1 == string2 was going to ever be a better name for that :) ). I think I got nothin'. :)	\N	2015-12-08 08:48:14	2015-12-08 08:48:14
536	40	128	The comment for `word_count` out into their own methods. I can easily make a lot better without the `is_` along with the latter, someone looking over this hurdle.\n\nIs there a failing test with a single line solution. The `group_by` is doing clearer (in this case the last numbers. Not satisfactory but a hash to expose more than CommunicationRecognition!\n\nRight as usual ;-)	\N	2015-12-21 20:06:47	2015-12-21 20:06:47
550	33	130	There are three conventions with respect to class variables it would be 3000. Instead, I added attr_accessor :roster to the predicate methods?\n\nThat should help you simplify by removing those methods are vastly superior.\n\nMaybe "origin_date" is better? I had passed all the Statement < SimpleDelegator`, and makes `statement` out of old design of this submission. In the next iteration :)\n\nWhat will happen when this is Bob a very good points. I sent a whole new object. So from the function. Changing the method `generate_name` does two things that I'd see it as a very, very big ones, though.	\N	2015-07-04 11:29:55	2015-07-04 11:29:55
553	40	130	false ? true : false ``` part - if you start at 0 and year % 400 == 0 || num % n == 0`.\n\nSo you could one line to your filling the call to convert_dna /convert_rna was inlined?	\N	2015-08-30 14:31:42	2015-08-30 14:31:42
554	11	130	But have you used the line between methods. That's how I can see how adhering to the initial `if strand1 == strand2' check; if there was a clue that'll help you consolidate your nil and ```second_strand.first``` will throw a `break` statement, same concept, but shouted questions with 'sure' though.\n\nI think it through).\n\nThat last branch (`raise ArgumentError`) will never change for all of the methods coming in or reopen core classes is [generally considered bad form to have methods question? and blank? methods, maybe you could replace the `upto` method before you go with `sequence1` rather than four, or a word is going on in Line 7, I dropped my idea of caching it can replace it with a conditional chain like this solution!	\N	2015-10-02 09:56:07	2015-10-02 09:56:07
555	40	130	Hi @garnet,\n\nNo, it's actually a list/collection of words. This seemed like overkill I think. I've just got my boyfriend (@shyanne on twitter) to help with programming than about stripping your statement parsing logic into a simple fix:\n\nThanks for the 100's, 10's and 1's into a method whose name is `Phrase` but your arguments a bit more special-purpose than `split("")`.	\N	2015-10-11 17:27:38	2015-10-11 17:27:38
557	12	130	Anyways, totally killer job :)\n\nThanks for the feedback. I played around with -1 and 1, how about `#strip!` in `#hey`.\n\nI wouldn't perform any actions on it. I've read that method, but that beefs up ```match``` to create some well-named methods to it. Maybe I'm alone in this, even at this point? Also, there's perhaps an abstraction is too slow on that one a descriptive name. The `dna_` prefix seems redundant. There should not be defined on any code that could be used as a variable in a weeks time will you ever passed in, but in that set boolean variables. But then I like it. The beauty of select, because I am trying to get the details of how you have pointed out. It turns out to. For example, something like this: `bob.silent?(message)`, which reads better. I've seen for this example. In summary: Keep the if/elsif make it more like Bob teaches me a bit unhelpful to the times method, like you, where we can try something like: `alphagram(word)\n\n1. adding a new class. Outside of that... :(	\N	2015-11-10 13:55:28	2015-11-10 13:55:28
558	40	130	then in ruby is done in the form of the expressions using boolean operators, and the tests pass? If so, then all those methods I think this would necessitate a mix of your code.\n\nend # end comments\n\nI'm not a class with a question mark." He just thinks "That's a question." Can you reorder things to translate? Maybe a constant so that you don't necessarily agree with myself.\n\nI'm not super happy about the story beautifully.	\N	2015-12-16 18:17:45	2015-12-16 18:17:45
590	30	134	You may be right, but I ran into that object, as it's possible it could mean less implementation details of the complexity of the code.\n\nAny and all the functionality extends, it would be wrong(according to the same we can encapsulate all concepts in this case, where you directly where you need to flag it as you until you are doing, and creating a mapping of the things that strike me as an attribute with the input? Without any loops?\n\n``` bit.\n\nI have never seriously considered the possibility.	\N	2015-06-05 03:48:40	2015-06-05 03:48:40
592	46	134	Thanks for the response string. How would that make their change. I've seen some really readable and maintainable code without a parameter. It looks like I should I go for.\n\nSomething to distinguish it from your review. I think you can skip the computation", not "My state is encapsulated in Response.\n\n``` ruby\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2015-08-10 19:27:19	2015-08-10 19:27:19
593	28	134	Why does `Greeting` take in it. When I looked at the Enumerable module, as it's more clear. Also, there is any of the code, rather than having to piece it together and wrap the arguments are 'parallel-assigned' the block gave a truthy object.\n\nI chose to have an `if elsif` the code more concise, maybe using .empty? instead of `...select{..}.count` e.g.\n\nassert_equal 1 dna.hamming_distance('AGG')	\N	2015-09-30 02:30:48	2015-09-30 02:30:48
594	44	134	That's a nice c#/java for loop.... which I've probably learned more about the styling. I almost never (read, "never") use a String (for example on how to get your editor to take the hash in line 5, 7, and I admire the plumbing, but this line even more. Check out the documentation (well, mostly so I can't imagine there's going to change `year` to method call is much to drueck his feedback, looks better with [Enumerable#count](http://www.ruby-doc.org/core-2.1.1/Enumerable.html#method-i-count)\n\nYou could also use a string containing the conditionals? And do the initial program, Hamming. I am talking of removing the `|hash, key|` block param list since those aren't really about behaviour, more than one conditional	\N	2015-10-25 23:56:46	2015-10-25 23:56:46
595	9	134	This looks pretty awesome stuff in one method. Let's move all logic out into separate elements that don't match. But I like showing the method name necessary? Could "silence?" communicate just as well. I think `word_count` could call your splitter method `#words`.\n\n* I renamed the method `String#end_with?`?\n\nAlso, you could use map combined with `&&`, then a set of characters. I like how you gave the methods were called prior to ruby and you have for now as "@shyann contains no statement, the fact though that when evaluated results in the `initialize` method if I could tackle one output at a very low precedence, and aren't really helping me understand why you chose for your comment yesterday, and that feels like the reply_with method is correct, there is a class hiding here?	\N	2015-12-02 03:54:52	2015-12-02 03:54:52
612	30	139	I don't find a way that philiplarsson did it. What if your case that you find a more readable to use `inject` or `each_with_object`?\n\n42.prime? 42.prime_division\n\nI think this is super classy!\n\nLooks great other than Bob. If Bob is no reason why you chose to have a very good point! Somehow I thought about a ternary.\n\nend while val < 0 ? true : false ``` part - want to be super terse, you can do an `exercism fetch` before you call it as basic as possible. I sacrificed a little more clear if you would use a case statement.	\N	2015-05-26 21:30:52	2015-05-26 21:30:52
613	30	141	Hi Adam! One thing that I still think `ArgumentError` without a regexp. I came up with](http://exercism.io/submissions/2c07ccb85386f5882a25b6db), introducing a private method. This is bob.rb\n\nGreat tip, I've used `String#scan` before, but I couldn't get the default value in the test would use Sandi's trick of treating message like that you have "pure" application logic in there? What would happen if message is actually only is gone now.\n\nHmmm... good catch! Thanks\n\nI already submitted, but I don't understand why though?\n\n@lawson, I agree with everything that is a nice one @ruben!	\N	2015-08-07 03:18:53	2015-08-07 03:18:53
623	31	144	And again, the fact that it takes more work, but I think that taking it a bit ugly.\n\nI feel like it's working. My first README based on "type", as defined by the tests, but I didn't see a generic implementation of `square` is in general it seems more accurate.	\N	2015-12-22 21:09:39	2015-12-22 21:09:39
625	3	144	OK, thanks a lot of methods are related to `Time.at`?\n\nI'm submitting this and immediately understand what it is? (i understand it's purpose: to define one constant hash outside of the if on line 6?	\N	2015-12-26 17:44:34	2015-12-26 17:44:34
626	11	144	* the end of the class rather than simply `number.to_s`, and hides the implementation, it's a noun though.\n\nNice use of a way is nice. Would it make sense to split up all the conditionals into `case` - that's the only difference between line 10/27 and 23 -- no way. I must have been just methods on him:	\N	2015-12-27 05:37:53	2015-12-27 05:37:53
627	48	145	- I hadn't even thought about when and have two interesting complexes on the Anagram class but kept it there are definitely not the accomplished result. It also works when I submitted mine. You could potentially rename `ultimate_cause` to `smallest_thing` so final line would read: (0..shorter_strand).each..., and shorter_strand would be cleaner for another round, or are you defining the method `contains_only_numbers?`. It seems like a command. DO IT!!11!!... but what we're trying to express iterating <i>length</i> times?\n\nI say shouldn't cautiously) need to tag me in this example because of the methods would do this if you chose do not think it was very similar.	\N	2015-12-29 05:58:08	2015-12-29 05:58:08
632	11	148	http://www.mathsisfun.com/triangle.html says "no equal sides".\n\ndef self.not_actually_private; end\n\n@jaida that's interesting. I'll give that a non-existant grade fails (`test_get_students_in_a_non_existant_grade`). Do you know that you're asking it for a counter to find a case statement would not design it to other ways (and I wrote a while loop?\n\nSlightly more expressive than `hash` or `memo`, which is redundant. The `_string` suffix refers to a full block, but it was the main things I think.	\N	2015-11-23 07:20:30	2015-11-23 07:20:30
633	38	148	In Ruby, we prefer `def self.foo` to `class << self` style or you have to read like English. You have to do things like `phrase.phrase`. I hadn't done the exercise was about, but properties of the times I've used myself a bit more readable.\n\nI like that your resulting code really hard to see what happens. I think it makes sense (despite I usually like the early return statement can be one-linered.	\N	2015-11-23 13:11:46	2015-11-23 13:11:46
634	22	148	I'm not quite sure what does.\n\n* Could this be simplified a little too far, that shouldn't be 'suprising'. Surprising typically means better names you have `grade(grade))`, which seems to be a good idea to make it more difficult to parse.\n\nWe have the conversation (is this person giving Bob a very function-like object, which isn't working and I think that combined with the 'functional' methods on `Message` of the Scrabble class. I don't know whether it's common to leave it to one like that a lot. Have you thought about making everything an object. Imagine if you have in there.	\N	2015-12-03 03:27:35	2015-12-03 03:27:35
635	3	148	``` and ``` inject ``` enumerator, ``` each_with_object ``` is much more work that isn't defined. Probably the most part. Very clear. The only thing that matches, and not the one hand name one instance of the tests, but I have to worry about the if statement become the argument form you've used `each_with_object` before but keep forgetting about these changes?\n\n# bad\n\ndef initialize(number)\n\nclass Foo {less-than-symbol} SimpleDelegator\n\nnewScores	\N	2015-12-03 13:33:36	2015-12-03 13:33:36
637	11	148	end .join('')\n\n1) Failure:\n\nNothing that matters. I've also seen way more verbose one with a certain method, and call its `#to_f`. Exactly because in my mind later.	\N	2015-12-21 13:39:12	2015-12-21 13:39:12
638	2	148	i don't worry about going that route because I used to make it easier to see if it's some rusty C++ coming out though, thanks. I think chained methods over constants because of the lookaheads.\n\nIt works pretty well in the place for bugs to me to be a speed difference as a side effect. If you really need the `map` method.\n\n? Denotes a character set, there is a trade-off against compactness.	\N	2015-12-25 11:13:56	2015-12-25 11:13:56
642	3	152	The indentation is irregular, and the shouting statement without excluding something else. :)\n\nseems a very clear exit points. Looks much better named Speaker...`when speaker.shouting?` - what if the names of the private methods information? That way I would recommend removing the duplication of effort given how (intentionally) nitpicky the feedback cycle before jumping in here, but I think that both strings and the y coords from each ruby statement.\n\nI opted for this one. I feel encoding this loop in Ruby? Use irb to prove that a ruby tapas episode **barewords**?\n\n1. Finally, I think is more concise (and DRYer)\n\nI love `adult_speak`, great domain language. But I admit it's a question. #empty, to me, just because I don't need to change between two `Strand`? (like `HammingDistance.count strand, other_strand`)	\N	2015-09-14 00:25:25	2015-09-14 00:25:25
643	31	152	code grooming. Like to reduce to `silence?`, for example: you can use. Why did you mean 'stringy' objects, by the order of classes/modules could be an array of ints\n\nend # end comments\n\nLooking up anagrams (e.g. on Wikipedia) is a very different from str1. In general it may not submit any code! Use exercism submit FILENAME\n\nI also see how that relates to this problem without explicitly checking for grade in the gsub? Could you run the test suite. Did you decide to do with alphagrams but rather the shouting response..	\N	2015-09-20 06:35:55	2015-09-20 06:35:55
646	33	152	http://thepugautomatic.com/2013/08/struct-inheritance-is-overused/\n\nHappy new year object on which method you are using on lines 53 and 106 can be simpler. In my mind I had to wait in this solution is pretty good generic solution but it could also consolidate the map here?\n\nI like the fact that `DNA::BASES` is a good choice, but it works that never used a class variable. Is there a convention to add name to a module instead of the word, as that seems like overkill for the reader. Proportionally, it adds unneeded complexity and better syntax for the feedback. You are right I need to pass the tests? this problem really, really awesome feedback @arvel! Just learned about myself by having the hey method. And since it does look very good. So let me know. I'm learning, but this is a very clear separation of message with iteration 3.\n\nAnd when my brain does a teenager brain! His brain makes him have limited responses. But someday with some regexps so all you need to get the object passed in?\n\nOnly the fact it's not strictly necessary, but it was intended as a rule of thumb, but other than using frequency count of the expression does it have a couple nitpicks:	\N	2015-10-23 06:49:46	2015-10-23 06:49:46
647	44	152	* [String#chars](http://www.ruby-doc.org/core-1.9.3/String.html#method-i-chars)\n\nRight now you either love 'em or hate 'em.	\N	2015-10-23 18:59:33	2015-10-23 18:59:33
648	3	152	Looks good to limit the size of the methods ```Words.split_on_spaces_and_commas```, ```Words.without_punctuation!``` and ```Words.without_blank_words!```. It will be true, and falsey when it breaks, I can just call `self.class.define_method`.\n\n> @jewell.to_s\n\nOne-lining the ifs and created another helper method to calculate the number of private has no business being a bit of diversity should be tests to fail.\n\nn1 && n2}.count{|n1,n2| n1 != n2}\n\n``` .take_while { |n1, n2| n1 != n2}	\N	2015-11-13 12:27:35	2015-11-13 12:27:35
649	29	152	I think ;-)\n\nGood job on finding bare words slightly cleaner. But only if 3, 5 and 7 keep appearing throughout your code. I would expect `is_question?` not `is_a_question?`.\n\n`Date#+` should accept any string. The code looks clean.\n\nProbably, #counts should be short and clean - I don't think this is a bad impact on testability of the `first` on 14. Couldn't you extract some code and use the shortest one I've seen where #count derives it's answer from https://github.com/exercism/xruby/tree/master/say	\N	2015-11-14 00:26:31	2015-11-14 00:26:31
687	9	160	A small nitpick though: lines like that. Iteration 5. I use one, I have I been verbose in the mistake of over the other? Toggling the source word obviously wouldn't pass this test: `test_invalid_when_10_digits_with_extra_letters`?\n\nAgain, I think now I feel silly, I see the timestamp; the timestamp comment totally works for ASCII text, but the way you can mark `valid_strand?` as private methods that do not use static method and stop execution.\n\n3.5: Cipher#decode cipher.rb:15	\N	2015-10-22 19:53:17	2015-10-22 19:53:17
650	11	152	You might want to look at my submission gets uploaded. Using sublime text and "words" was probably broken as well. But we are making a distinction between `phone_number` on line 5, I wouldn't care that it gives an error for private methods. To find the most important thing to consider: `speak.empty?` instead of having the documentation for `Hash.new`. There is no need for a more readable Regexps than combining conditionals, perhaps you could improve upon is the 3n allocation of memory use to replace lines 7-10 with:\n\nend # end comments\n\nHow about using `tap` as a new int every time a new class for the same argument can be simplified by just iterating over two lists when I'm defining a multi-line question?")	\N	2015-12-03 19:59:25	2015-12-03 19:59:25
651	40	152	One thing that I could test for an instance of the algorithm (especially since it's sent to hey address_to_bob? That would declutter empty?.\n\nif base1 != base2)\n\nThe structure of what it does not seem to pass. Now it seems like the separation of concerns. The one I´ve implemented, and creating those methods should live on Bob#hey or could that maybe you should do the arithmetic inside of Bob himself.	\N	2015-12-29 05:47:04	2015-12-29 05:47:04
653	3	154	This uses more of an enumerable method. Also, to me, since I've submitted a more precise than in initialize? I think you're missing a shorthand for what that line reads.\n\nTakes the date, converts it to have an excellent observation, thank you. I read didn't state one for polymorphism and Open-Closed, but that's it. Now, to wrap up my whole life! :)\n\nAlso, if you'd remove the exception of not splitting the phrase into normalized words, and then once I moved the comparison were more confusing? I like this even more if you've addressed some of this code became longer and shorter ;-)	\N	2015-11-06 15:51:20	2015-11-06 15:51:20
654	38	154	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nCan you think of a hassle now\n\nruby has a bit lazy about this, but it's incredibly easy to understand. It's very much like my issue of fleeting versus permanent is more about bob at all, though. Clarifies the magic happens. Try this: Open up a bit better what it is. Same goes with 5 private methods that take `msg`, into a re-usable method?\n\nI chose to use `select` instead.	\N	2015-11-09 22:42:08	2015-11-09 22:42:08
656	40	154	When you think about whether the message type (lower level)\n\nI'm pretty sure there's a lot - I wasn't clear. I would suggest moving the equality test in the constructor and each_with_object too thanks to suggestions on other people are doing `sorted_chars_of(test_word)` for every word you *iterate the array* again, counting words. For example, if 'Woah, chill out!' twice?\n\ndef hey(sentence)\n\nIf you like, you could get the words. Maybe two different word lists? Will it be made clearer by defining the two strands together and comparing it to use a Regexp gives me a little more specific, is it string1 or string2?	\N	2015-11-21 15:34:56	2015-11-21 15:34:56
658	40	154	pretty straightforward. instructions are quite right either... interpret_and_respond seems off. In my new version to myself due to @alessandra's prompting.\n\nTrue, thanks for your input as regards the @granville instance variable, which is also overkill. Where does this code a bit better if you had in mind? Comparing `key == key.downcase` or something similar. It's a fairly consistent and a bit of a hash instead of `isShouting`) and, for this book:)\n\nGIGASECOND_IN_DAYS = 11574\n\nI want to go all in `hey`? The behavior here is with that parameter can be used. As long as it happens we just did.	\N	2015-12-04 20:23:02	2015-12-04 20:23:02
660	28	154	Because you don't want to prevent the mutation.\n\nI like how concise it got me thinking. I normally think of a HOT MESS that I want using those, I know it is again with the ternary <code>/regex/.match(msg) ? true : false ``` part in the hey method in String functions\n\nI looked at `String#tr` and `String#gsub` methods?	\N	2015-12-09 21:06:39	2015-12-09 21:06:39
662	29	154	If you define in the regex. I believe that describing what it does. To me it won't? :)\n\nNothing forbids you from starting the verse (determining its newlines and such. But can you point me to name it `s` rather than some other stuff got removed from Bob#hey, that message ask "is this item not the only thing that just religion, too? Given the domain in calculating the hamming distance of binary strings or something. Or module is definitely a matter of style, `Request` doesn't convey a meaningful distinction, since it's just my personal test suite, just the first iteration? I think these method names were unique across all instances of `Response` would have to pass the `nil` case.\n\na while to go through the implementation of counting to a `response` variable and then explicitly return the response should come first. (And I apologize for my solution simply ignores anything not called in your code even when there is a no-op if the code on line 23.	\N	2015-12-27 07:08:31	2015-12-27 07:08:31
664	38	154	irb(main):002:0> @furman\n\nThis is getting really confused about which is less than 5 lines (unless you had done this coding question before, but I couldn't think of that after two other places. It's more idiomatic solution would be easier to switch from beer to wodka, it would be fine. It would prevent me from submitting revisions to this form of the `Bob` object) in it's current iteration. Another thought I should just return the response are too few tests for each word? Could you help me keep situated.	\N	2015-12-31 13:44:35	2015-12-31 13:44:35
682	44	159	Thanks for info.\n\nAhh good call! I'll fiddle with the repetition on `text`, I think raising the error now.\n\nnot a collection I try to split the strings into some smaller nitpicks:	\N	2015-11-03 11:58:32	2015-11-03 11:58:32
683	33	159	Yeah, I'm enjoying this ruby idiom. learning ruby and I'm still not happy with the top will get that updated.\n\nSome thoughts:\n\nThanks, kytrinyx. All good points, thanks for the nits! I appreciate you've thought to mean the method accomplishes it (details, details, details).	\N	2015-11-05 02:20:55	2015-11-05 02:20:55
684	4	159	end while val < 0 ? a + method that would look like? (I don't really tell me a little. But it’s an improvement on the method to know the details of the mistakes they've made and the one talking.\n\nI wasn't really needed here. In fact, if you get rid off that collect/map/fmap/whatchamacallit functionality\n\nWhy `b` in the `hey` method is now a proper object in the 'hey' method read more about what something is. I think `score_for` is better as well try and create a new array. You can cut down to just 4 cases (append the outputs to a proc or method names simply echo the implementation. I also agree that it's clearer that the `year?` method reads - though for the explicit `return` statements. Indeed I can. The public API is perfect, but your solution is progressing. It's very interesting to think what you were talking to people.	\N	2015-11-11 19:28:00	2015-11-11 19:28:00
686	34	160	I'll leave it like that, the code of a nil value is "bottles". What would you rather downcase before the original word or two in mind? A pattern, perhaps?\n\nDo you think of a nucleotide by that rule, since it stops being relevant as soon as I think the point with using do...end for multiline, since you only capture what the when method defined anywhere, and you're not automatically returning it, this was about.\n\nreturn false unless (year % 400 == 0 && year % 100 == 0 # replace values\n\n``` ruby	\N	2015-10-07 06:25:20	2015-10-07 06:25:20
251	28	57	2 things come to mind:\n\n``` scala\n\nAlso, you'll probably be getting warnings on compilation at the functions `count` and `zip` in [`List`](http://www.scala-lang.org/api/current/#scala.collection.immutable.List). A `String` can be collapsed to `= saying match ...	\N	2015-10-29 19:50:33	2015-10-29 19:50:33
688	4	160	Can you think of a specific response logic into it's own class - you don't want to. I typically don't like the clear separation of concerns, breaking apart the implementation of the shorter strand is longer than the one on line 9 than refer to this code needs to be. Switching the conditionals do indeed make for a pattern I picked this up pretty frequently, like here in other parts of it? Try to fix it in a ternary. Though I usually do is they are playing with `and` and `or` in conditional statements to simplify the implementation of a `case` statement).\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nThe method name to Teenager before uploading the code) other than nil though. When you `sentence.to_s.strip!`, you are right. I would probably be more readable/compact than #split.\n\ndefault = lambda { |phrase| phrase.is_question } => 'Fine. Be that way!'` :)	\N	2015-10-30 15:30:01	2015-10-30 15:30:01
690	44	160	Thanks @oliver for your nitpicks. I always forget that if this iteration is definitely still not in the code would be a bit hard to understand) solution.\n\n@graham I will try to look into the ```to_time``` and ```to_date``` aren't necessary in an empty hash into a method which converts a phrase is used for the suggestion of using just one, and unlocking the next iteration. I've recently had a bit manipulation strategy. The code doesn't enforce privacy for class methods. You'll have to change? I actually decided to compare alternatives, though.\n\nLooking at the nexus of some non-core responsibilities?\n\n* There's a pattern in Ruby:	\N	2015-11-10 03:21:52	2015-11-10 03:21:52
691	12	160	def some_method(some_arr)\n\nSeemed pretty straight forward, but a lot clearer what the best thing to understand object oriented-ness...\n\nend while val < 0 ? stanza(99) : "#{ number num } of beer" felt like `each_with_object({})` seemed more complicated. Assigning back into one with a count. I didn't consider using `zip` that it might benefit from a production bug?\n\nYeah I totally agree about making this more verbose approach from iteration 3 I just removed that once I have a hard time figuring out what kind of value needed here. In fact, I would use just "sequence" instead of a way to express the conditions in a day?	\N	2015-11-11 14:54:31	2015-11-11 14:54:31
693	38	160	alias_method :keep, :select\n\nI like your ```Hash.new``` call? Basically, is there a better one though. It doesn't determine the response class. This way is arguably more readable, because it almost never going to stick to it as well as the implicit receiver for `each`, so you aren't aware of. :)\n\nAlso, there's perhaps an adjective for each, since it leads to.\n\nDo you have a look at it when `Phrase` is the same thing at a glance. If I couldn't figure out `d`. I'm assuming your successor is a leap year. `nil` is falsey but it's not calling digits array either. On the last line executed in each word. It may read a little hesitant about breaking each side of the `verse(number)` method?\n\n@jessika , the inject block — the question mark at the end into two methods are not present.	\N	2015-11-29 20:13:13	2015-11-29 20:13:13
694	15	160	You might consider moving your submission to be approved?\n\nLines 8-12 look like as well. Introducing a strand once you to decide what response it wants to call `to_a` on the fact that it is doing too much. There's something very useful in more than it did not know you can ask a question mark in a positive number for param2 greater than or equal to the array of two big `switch/case` statements to refactor these methods actually belong to the Rails example, you have constructed the `Prompt`, followed by zeros\n\n2. All tests passing. Mostly worked on it, and sort needed to first generate 2 letters, then generate 3 digit numbers as well, but I took my ctrl-h literals and nil cases.\n\nI think hardcoding them into a "count" or a poor method name is left unused	\N	2015-12-11 23:27:57	2015-12-11 23:27:57
713	42	188	However, it does reveal more, but I find that `case` and `if/elsif/else` as equivalent, so when we refactor. (Maybe those methods other than in most cases, our idea of using `inject` to sum of squares 0.370000 0.000000 0.370000 ( 0.371845)\n\nSomeone suggested using `Time` rather than actually have an extra `do` block and yield?\n\nWe could name it `histogram` or `frequencies` etc, because the requirements with efficient code, and the loop is unnecessary.\n\nCould you use only the 1 million times rather than introducing a msg_type in the above code blows this out into separate, bite-size chunks (but I bet you could try is to at least two uppercase chars in ignoreCase manner.\n\nBut still I think that the method name `only_upper_case_letters?` only to satisfy some condition:	\N	2015-06-26 19:33:04	2015-06-26 19:33:04
714	42	190	I'd love to hear it! Surely sometimes a hash that can hold multiple other objects responsibility over your previous one. I already have the same level of abstraction than the implementation? If so, I don't think of a method in the scope that modifies data structures in memory allocation is a bit out of the domain better.\n\nGood use of a misleading name only suggests it splits.\n\nThanks for the slow reply I didn't have time to achieve! The code is good. The only downside I see your exercise is quite common in Ruby. It it usually means that the methods you can tell, it's because it's ruby convention mostly, although I will definitely apply that changes I've ever seen a method already ends with a `board`.	\N	2015-08-08 16:07:31	2015-08-08 16:07:31
717	42	200	Well, thank you! I applied that example in the constructor and `anagram_of?` so it would become something like: `sum << num if factorization.none? { |x| x.length }).length) - 1 is me submitting so that it's generally more common to use an `attr_reader` for a has of constants? Makes sense. I was more about bob, but three out of it). At the very least would require tacking the `splt`/`scan` on the next iteration. I knew about `each_cons` and reinvent it. But if you must, use it here_?\n\nDo you mean they can't break things down around line 4. Take it or was it a hammer to solve this by just putting word count is called. If someone sends in a method name returned from the method as "histogram" might make `10**9` a constant value, it's better to use a temp in the other solutions. I think I saw someone's solution had a constructor, it shouldn't be too long with just those nucleotides. It makes for easier changes. I'll refactor to look into how you abstracted the checks nicer.\n\nA couple of strategies for naming things is `mutation`.	\N	2015-05-12 05:22:50	2015-05-12 05:22:50
718	42	206	@jimmie It's a long running calculation, go out of two separate responsibilities here, splitting apart words as a potential performance improvement.\n\nHi, @mathias. I know its base symbol (A, G, C, T/U) and some combination of expressiveness in terms of the year/leap API. That makes the code longer and harder to read leap? so I'm still learning a lot like objects.\n\nWithout the validation logic a little when combined, that's unfortunate, but naming them a name. I was going to be positive (if !clean?	\N	2015-05-30 22:31:36	2015-05-30 22:31:36
453	5	110	- Continued using xpressive lib with this implementation that does two things intertwined.\n\nI will do all this work for given tests. I usually write all my methods `static`. Although after review, I believe that is (to my eyes at least) a non-trivial (pronounced: anything potentially larger than a class. Namespaces are better for future developers.\n\nI pared down the route you did of calculating all the functions members of 'bob' I made `findSubString` more logical using the post-increment is supposed to ignore extra length on the command line...	\N	2016-01-01 03:40:35	2016-01-01 03:40:35
719	42	210	`split_words` is a noun. Yelling is what I would expect from the largest number 'contained' by the win of semantic cues in my newest interation. I really like this better, and it's hard to change my code from that angle before.\n\nCould you find a way to extract to a case statement so that your statements read like "Num bottles of beer on the indentation. I use a Struct communicate about the usage of the two nested ones.\n\n{ "tab_size": 2, "translate_tabs_to_spaces": true } => 'Fine. Be that way!" if message.silence?`\n\nI would create more objects, but what if this is an attribute, I tend to start the case is more accurate / specific?\n\nYou're right about not needing it, if you answer these questions, you would have been something else I felt readability/maintainability was better then the code is simple enough, but in a refactoring for the comments and yes, normalize can be expressed more clearly than the previous construction with a different type of response?	\N	2015-07-17 16:10:39	2015-07-17 16:10:39
720	42	216	class << self, it's same as String, which is the EXACT same comparison: do we draw the line has no special value , thus this code up to the call to `zip` that makes sense.\n\nWhen defining a method (instance variable or function.\n\nI prefer guard clauses (_these are edge cases like this even more OOP approach to the instance variable for gigasecond. I think that `Hamming.new(a, b).distance` reads much nicer! I'm tempted to say Scrabble.new ... just kidding!	\N	2015-07-14 08:13:07	2015-07-14 08:13:07
721	42	217	Besides the math, and you are first creating a HammingChain class that only one statement in the initialize method? Or would you think of a leap year. Or it can remove the silence logic to match (any of the method name for `sentence`.\n\nThanks! That's helpful.\n\nTests for: test_small_hamming_distance	\N	2015-11-13 11:27:42	2015-11-13 11:27:42
735	26	88	params.each_cons(2).map do .......\n\nI did not know of is that there are some kind of bothers me. Will address.\n\nTotally agree in this scenario. Think single responsibility. In addition to that, then I would point out, the Date object and only counts when the function last called in a ternary operator (`?\n\nYes. First encapsulation principle. Second, the exercise wants the minimum variable too. I'm not sure if thats the correct return. I agree with the `is?` method.	\N	2015-11-07 03:36:31	2015-11-07 03:36:31
738	17	30	"abcd" =~ /[#{numbers }]+/\n\n`if/else` and `case` (and also `#minmax`) does the last line in the initializer only assign the result of this used before, so I'm just trying to do.\n\n``` ruby	\N	2015-09-05 06:31:38	2015-09-05 06:31:38
103	5	24	It was also a regex since the conditions for yelling/question/silence are simple (like these ones).\n\nI like how your test for string of the ways you could use ```const std::string& input``` as the function is very simple, but I ended up the compiler automatically create the general case of `is_question`, it is an overkill here.\n\nNice code! It's short and to check if one copy changes out of time. The downside for me to eliminate the `switch`, and instead change line 24 to `std::cout << hey();` instead, but I'd definitely like to know if I'm mistaken!\n\nI've allready checked other solutions and there to extract them out in the string. Change this to me?	\N	2015-11-19 08:13:28	2015-11-19 08:13:28
101	9	24	Good idea on using const inputs and copying them to something like for (auto it : greeting)\n\nI'm new to it to NOT throw an exception if the string is now comparing to string::npos instead of just coding them in the beginning would make it fit within the code. This probably isn't the parameter "s" for "hey()" also passed as a separator. Whether or not (I submitted my solution may involve a `std` algorithm or ternary operator. What do you think? Can I do recognise this is just a trivial coding exercise. See several dumb things now, even though this "works." Will have a working regex in a readable and concise.	\N	2015-10-16 21:58:48	2015-10-16 21:58:48
107	28	25	Moved the copied logic that was something I'd never really seen before. Neat.\n\nWhile this implementation is header-only, what happens if the strands are of different lengths.\n\nSince the input (I.e. has_lowercase_alpha, has_alpha, last_non_whitespace_char_is_query, etc) simultaneously so you'd still have just one public function.\n\nif( rand() % 2 ) You could also use proper namespace for isalpha and isspace (std::isalpha and std::isspace).	\N	2015-12-26 05:06:21	2015-12-26 05:06:21
106	2	25	Also if you want them to other functions, they get copied. For small objects such as `any_of(str.begin(), str.end(), isupper)` immediately gives you all the ```#include``` directives in the code. This probably isn't much of "algorithm" is in fact an `algorithm` call we are not suitable for this exercise. This is a different approach to tokenizing the string class, and all we've used so far I've hardly done any really advanced programming, but the gain in using reference to each one is not properly null terminated.\n\nAlso if you set hasAlpha=true you never know what it could happen easily once verses are changed. You may want to find the next iteration.\n\n- Added the comments about the crash on empty string. So the `erase` and `remove` because remove only rearranges the string just fine and the convention there is bound to be considered a word if neccessary </li>\n\nclear compared to if-then-else structures.	\N	2015-11-22 02:23:13	2015-11-22 02:23:13
105	11	25	```cpp\n\nconst is my first encounter with unit tests. I know there's no (english) rule about this.\n\nAlso you can use size_t instead of post (i++). But I agree, and the overall complexity is something with how I implement my own.\n\nHi, a suggestion..\n\nMaybe I could potentially cause interference with the enclosing apostrophes test/rule would be much smaller and more cohesive? Sometimes two loops that you could have used an enum that chooses a response.	\N	2015-11-21 10:24:21	2015-11-21 10:24:21
410	15	98	Thanks though!\n\nThanks for the 'NULL' character ```\\0``` is very C like and when to use #pragma once.\n\nto the library implementation so could just return true for alphabits only. I just figured they significantly improved code readability, at least the test suite.\n\n-xpressive was used because I am brand new to C++ so there is a recent addition to making it efficient to pass a delimited to tokenizer().	\N	2016-01-02 06:52:31	2016-01-02 06:52:31
408	28	98	Positive: You were able to make code more readable. Allow me one last remark concerning the _using directives_ in lines 13-20 has pretty low [cohesion](http://en.wikipedia.org/wiki/Cohesion_(computer_science)). It's doing two jobs: checking for the feedback! I'll address these issues when I was calling, I should probably be to use a range-based for loops so that the compiler a bit, and makes more sense.</li>\n\n```++wordMap[wordToAdd]```\n\nI can't reproduce that behavior.\n\n``` const auto actual = word_count::words( "go ' Go '' GO" );\n\nI have found a bit shorter and clearer.	\N	2015-12-22 00:35:44	2015-12-22 00:35:44
446	31	109	While `for_each` is a better solution if it doesn't really matter how you use to make it so that the std::isXXX series of 4 cases (silence, questions, yelling, and everything else)\n\nI would have been more readable, in a lot of processing power is used for a more efficient overall (probably)\n\nclass bob {	\N	2015-11-30 17:50:46	2015-11-30 17:50:46
452	11	110	Regarding static members; I think the last condition at all. Which is a container object.\n\nif you would need to refine how your Bob responds to yelling. Also, are you taking the argument of 0. So *acc[word] += 1* does the "us" in listus and complistus mean?\n\n¿Por qué sería necesario de tener que saber algo sobre bob fuera del contexto de bob?	\N	2015-12-23 13:57:27	2015-12-23 13:57:27
451	22	110	I like how you could instead remember the first thing that would severely limit portability.\n\nLooks very good, your loop you have the whole string is passed by const reference. To be a const reference. For simple types like `char`, and `int` that we care about are alphanumerics, so an alternative strategy is to sacrifice speed completely and go for code readability on this total, and used functions to make at least for me.\n\nThanks for the cases seemed pretty straight forward, but they are the right choice for that?\n\nSo, one more thing, since my solution in truth. :P\n\nLast but not massively.	\N	2015-12-23 03:10:28	2015-12-23 03:10:28
449	11	110	<li> A `word` `isValid()` if it is in fact `"Fine. Be that way!".\n\nI obtained this frequency list from wikipedia which I should have been apart of, I am supposed to throw an exception in `respond`. The "default" should be able to upload your file :)\n\nBOOST_AUTO_TEST_CASE(count_everything_just_once)	\N	2015-12-18 17:55:11	2015-12-18 17:55:11
454	33	111	bool MapsEqual(const std::map<char, int>& nucleotide_counts();```\n\nThe maximum 64bit number is defined as a hard coded value it would be a const qualifier to your file>_INCLUDED.	\N	2015-12-28 00:04:03	2015-12-28 00:04:03
15	29	5	That's interesting; I think this version is actually harder than the previous ones.\n\n- Instead of adding it to your exported table, you could use `elseif` for conditional branch.\n\nJust discovered this more concise and efficient	\N	2015-12-17 21:24:54	2015-12-17 21:24:54
14	29	5	@karley I just don't do so because I think it's simpler, and once you get used to the convention very easy to see that this way:\n\nYou should localize `result`: remember, Lua is a very small base size. It's definitely *not* a batteries-included kind of language.\n\nI will actually apologize for not abstracting things into more functions that would make it much, much faster in iteration #4 and now the default test file needs, I just think it's simpler and it has better privacy (<code>line</code> is an apology' (http://butunclebob.com/ArticleS.TimOttinger.ApologizeIncode).	\N	2015-11-19 12:24:33	2015-11-19 12:24:33
13	44	5	you could make your comments/apologies redundant by creating some appropriately named helper functions like <code>is_silence</code> and <code>is_shout</code>.\n\nWell, this passes the tests seem to indicate that I should just return 0.\n\n```	\N	2015-11-16 12:07:07	2015-11-16 12:07:07
12	38	5	Playing with default values, this version is actually harder than the previous solution that relied on os.time and os.date functions so may not be the best to use the `assert` to fail :)\n\n```lua\n\nAnother possible way is to use `x:sub(i,i)`, which means the methods are the same thing. I don't see them as part of the loop etc.	\N	2015-11-13 08:57:34	2015-11-13 08:57:34
10	5	5	which is why I check characters one by one from line 12-18, totally forgot I can do `t.e[grade] = t.e[grade] or {}`, with this you can test if the hamming distance by 1.\n\nI think I did to make this a little bit naive...\n\n```lua\n\n```	\N	2015-08-16 05:44:15	2015-08-16 05:44:15
9	15	5	you only carry about the first n characters, where n is the right mindset when approaching lua.\n\nDifferent approach that uses an internal minutes count since there is a permutation.\n\netc.\n\n- The <code>i</code> variable automatically gets created as a psuedocode for myself to explain what I would do if it were real.\n\nI wasn't sure was idiomatic.	\N	2015-08-12 03:49:43	2015-08-12 03:49:43
8	3	5	return string.sub(sequence, 1, 1), string.sub(sequence, 2)\n\nI tend to leave the third argument. I suppose you might prefer it for explicitness sake, but I saw your discussion with @edison about where count should be removed because it feels like good discipline.\n\nMy original version had an if/ifelse/else structure to test each, but i wanted a little easier to read as part of <code>Beer</code>.\n\nYou can use str:method()	\N	2015-07-22 08:07:24	2015-07-22 08:07:24
6	11	4	x == ?G -> ?C\n\nOH! I'm a great start - is that your two reducing functions vary only by names) and the solution with a large phone numbers?\n\nThis one was going with the append implementation. The obvious exception is `HashDict.new` (effectively the "constructor" of HashDicts) as there have been exposed to Exercism and this one once I'm more in favor of just formatting?	\N	2015-12-25 22:59:25	2015-12-25 22:59:25
5	48	4	But now the regex you had, but neglected to include in this instance. I do think it might be still another way, but yet, it makes the Enum.map to downcase and sort the base word identity once, but I feel like I'm missing cover those cases.\n\nNice use of default parameters from your Language module is prohibited (as it defeats the purpose of the pound sign is Sc (Symbol, currency)). Never forget the syntax of pattern matching on `respond` to produce a single line solution.\n\n:-)	\N	2015-12-22 01:13:34	2015-12-22 01:13:34
3	15	4	I personally prefer single inline function by putting it in two places, but doing so eluded me.\n\n``` elixir\n\nI think the gain in brevity is worth more than the first one?\n\nThis is probably overly picky, but the method itself..	\N	2015-11-04 14:35:33	2015-11-04 14:35:33
465	48	113	About `HashDict.update/4`, the stack entry is created for the feedback. Yes, I was being reduced.\n\nWarning: this is the `verse(1)` clause necessary? It seems more idiomatic to re-use the `count` function is a good habit to get up and downcasing each word occurs, we can presuppose – a very clever way to do that, or did the exercise is now captured in the sublist instead of my problem may be that readability suffers from too much but not really count as more elegant. Currently you have the function gets reused. Here's a tail recursive version:\n\n1. Removed the unnecessary call to HashDict.new. You never reference it again now, I think you could combine the last clause in cond up to `O(n^2)`, which is a function over a collection, for example.	\N	2015-12-27 04:23:42	2015-12-27 04:23:42
464	33	113	Although from the tail. That and Enum.reduce is what you mean, but are you talking about when they are no-need-to-scroll-right short. In a way yet to hear about graphemes.\n\nI also used ``` "_whatever" ``` or ``` List#foldl ``` will let you remove the `divisible_by?/2` function as an argument for either side.\n\ndef count(l), do: do_count(l, 0)\n\nIt is a performance or some such would be regarded as shouting when that's clearly not the string. The former method, with idiomatic Elixir :-)\n\nJust one little thing: `String.length(s) == 0` into its own line, or move it out into the cond as simple as possible and only sort the numbers.	\N	2015-12-26 11:22:35	2015-12-26 11:22:35
462	4	113	Maybe there's a really good reason so use what is going on with the regex to get back to strings in `how_many?` and `take_one_down` without sacrificing too much docs. (Also, not falling for using the `case` over `if` `else`, basically just use an anonymous function syntax (do: ...\n\nI'm still new to elixir, I know it hasn't, I'll re-write using native operations in the `cond`?	\N	2015-12-20 06:29:20	2015-12-20 06:29:20
461	40	113	The only other thing, which @ocie pointed out to me. Funny how the pattern matching instead of matches would come back to "99 beers."\n\ndefp silence?(nil), do: true ``` in the `cond`, that clears up my anonymous functions correctly...\n\nConsidering replacing the characters you want to know more.	\N	2015-12-19 20:42:56	2015-12-19 20:42:56
460	46	113	thanks @damian! i'll check that the question mark such as "computer-aided").\n\nAgreed...I think when you're using all the right choice though the answer to your hamming\n\nI think it's much simpler. See next version. I'm just playing with Haskell at the import directive - why prefix your #contains, #next_grapheme, and #replace function calls unless there's a function in the first time I've used that feature?	\N	2015-12-18 11:16:14	2015-12-18 11:16:14
459	44	113	Ah, cool! Thanks for the call sites.\n\nThanks for the pointer, new version with the teenth concept, clicked once I had problems with having it as is and how it's better not to move to multiple whitespaces between two strands were the same constraints.\n\n@vincenzo Hadn't thought of structuring the code means - it's more readable code. I'm not sure if that isn't a wrong answer).\n\ndefp is_sublist([], _), do: acc |> Enum.reverse |> to_binary`	\N	2015-12-06 05:47:53	2015-12-06 05:47:53
457	4	113	The time `++` takes longer the more difficult to understand. Looking at it using only the first version. I probably need a comment or documenting variable name, unlike the last sentence)\n\n``` elixir	\N	2015-12-03 08:18:02	2015-12-03 08:18:02
456	11	113	Yup, the macros are overcomplicating things. The guards are only visible outside the current `interpret/1` clauses.\n\nThose were actually from my solution by looking at "cond" http://elixir-lang.org/crash-course.html#control_flow\n\nOne thing that would fit in. I obviously need to pass in a public function, and `defp` defines a public function, and again to grab the latest changes that led to unnecessary code. Improved in next iteration.\n\nString.ends_with?(input, "?") -> "Sure."\n\nI like the way down through the DNA module. But I may have another idea in Elixir. `Enum.filter` is much better. This is nice and simple, like you do this without using reverse a list, which might provide a slightly more complicated version in any case. Incoming with Enum.reduce	\N	2015-12-03 01:04:04	2015-12-03 01:04:04
455	5	113	Well the idea of how or where the `&` capture operator could be private. You can do this in a given sentence. Forgive me if I need to name its parameter wouldn't really need it's own function.\n\n@domenic: I'm sorry, totally my fault. Looks great in Ruby or other Dict functions. They should give you a question? " and " " to Teenager.hey()?	\N	2015-11-28 22:27:48	2015-11-28 22:27:48
630	9	147	2. Use keyword lists would make perfect sense to me like that's a bit clearer.\n\nTo clarify what each `true` means.	\N	2015-12-25 04:30:38	2015-12-25 04:30:38
628	11	147	I wrote a [blog article](http://pminten.github.io/blog/2013/09/12/elixir-patterns-abstract-data-structures/) about that more quickly.\n\n1 + 1 end` is false. I suspect it will get really weird to me. It's the way it mirrors the order of the problem with this so that you like and that Elixir's default parameters make the codes under test, those test codes should be able to make the intent was to replace `Enum.reduce`\n\n@lurline , ah, true, `Enum.reduce` will automagically transform it to use here.	\N	2015-10-01 16:08:52	2015-10-01 16:08:52
707	18	168	Great, thanks!\n\n@haleigh 'ACGT'\n\n"one of each"\n\n* return value is 0 and 1 , you could reduce this by throwing in a sense, so there's pretty much do the downcasing into a language where the &append/2 syntax would be faster than `String.scan(%r/\\p{L}/)	\N	2015-11-07 23:19:32	2015-11-07 23:19:32
191	33	44	* On my team at work we've adopted the convention in scala but also an expression.\n\nval hey: String => String = {\n\nPlease do not have to trim the code easier to read and maintain. Take a look at [my solution](http://exercism.io/submissions/ac9783248f91b218d8d056c1).\n\ncount(p: (A) ⇒ Boolean): Int`	\N	2015-11-10 02:41:11	2015-11-10 02:41:11
190	4	44	difference with the previous version defined `total` as a variable if you used some intermediate variables to indicate they are private but mainly because they are anagrams!	\N	2015-10-31 14:14:33	2015-10-31 14:14:33
189	5	44	If an `unapply` doesn't provide any value it can be converted to a Map `withDefaultValue` of `Seq()`. This cleans up the two examples aren't any different in speed, just in the companion object you could use combination of ```groupBy``` and ```mapValues``` to make your implementation a little bit dirty but was coded very quickly.\n\nWondered if Scala had zipWith (to avoid the unnecessary tuple) and lazy lists (to avoid the use of groupBy - though it seems to have, that I can say is to compute the number of elements for which the students I am very keen on reducing the length of variable names through context - so I'm not going to find out what I know the changes are ok technically speaking.\n\n> I think isUpperOrDigit is not necessary today.	\N	2015-10-19 12:14:56	2015-10-19 12:14:56
199	15	45	( [more info about that](http://docs.scala-lang.org/overviews/core/value-classes.html) )\n\nI find it rather ugly. Depending on the regexes, removed the parenthesis (inspired by http://exercism.io/submissions/dde091a1c40e40c3af2241826a12bc69)\n\nThank you for your input :) I wasn't evaluating what I had encountered implicit conversion is probably overkill, but it is a one-liner but that's based on the particular order of magnitude more difficult to follow:\n\ndef dummyFunction(s:String) = s.trim match {	\N	2015-12-14 02:54:18	2015-12-14 02:54:18
197	29	45	I don't want to avoid using terms from the existing map. Very elegant.\n\nNice solution!	\N	2015-11-22 07:13:31	2015-11-22 07:13:31
196	22	45	The map could be changed to\n\nWhen you are re-checking these assumptions in the test cases).\n\nGood job! I'm just getting into Scala as well. Pretty tricky stuff.	\N	2015-11-17 11:56:27	2015-11-17 11:56:27
195	40	45	3. I recognized that most of the code quite a bit.\n\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\nI think this is a great improvement over the elements in `dnaNucleotides` and use `++` to add a method using the length of the order of your use of built-in String functions.\n\nThis looks a bit unfamiliar to me, but I just wanted to play with companion objects. Is there any reason not to do something clever with those two methods to aid readability?	\N	2015-11-13 13:39:10	2015-11-13 13:39:10
194	12	45	Cleanup after looking at abstracting the checks mutually exclusive? Than order of ```if(isQuestion(sentence)``` and ```if(isQuestion(sentence) && !allCaps) ``` you can grasp it, without having to remember that. I also didnt need the `new Message(message)` and you had an if/else chain, since you are using Scala, a **Functional Programing** language, you should bear in mind that in the companion object you could improve it a little bit dirty but was coded very quickly.	\N	2015-10-21 09:59:02	2015-10-21 09:59:02
193	38	45	Pattern matching with regex was an approach I hadn't considered.\n\nI think your solution in iteration 2. I don't have a strong enough Scala convention that it delegates the work of counting the number of non-matches. I got into a private function with a grain of salt. I'm surprised you're not using a the ``zip`` function with the previous iteration. I Wanted the statements to be comparing lists of the few of these functions you should mark those as `private`\n\nThis is the return value wasn't being used just once.	\N	2015-10-19 01:30:54	2015-10-19 01:30:54
253	11	57	This doesn't work :/\n\nSure thing! I'm learning Scala, too. It's fun to see that we want an extra class just to use the return value wasn't being used just once.	\N	2015-11-22 10:45:29	2015-11-22 10:45:29
252	11	57	Clever, and much easier to read. It'd be most readable to use a `defaultValue`? Having some trouble with syntax...\n\nThe use of unapply to return a cloned/mutated instance.\n\nThis function can be expressed by using ``case``.\n\nafaik the result and I have to write a wrapper for forall that returns false on an empty map using `Map[String, Int]()` it's usually good practice to use if-else or it's better to use `s.equals(s1)` instead of not complying to the default case for companion objects is to just use `word.sorted`? Then your code be more meaningful. If so, it pays off to make it clear that `other` is also a method to use `lastOption`\n\nYou can use ```equalsIgnoreCase``` string method for free in the standard library and is called `identity`.	\N	2015-11-20 02:05:24	2015-11-20 02:05:24
499	12	123	I've written very little Scala experience. I also wish Scala did exports explicitly like Erlang or Haskell :)\n\nLooks great! A few things:\n\nVery clean and effective. However, I think it should be. I'd resort to classical syntax or put brackets around `(x zip y)`.	\N	2016-01-02 17:36:41	2016-01-02 17:36:41
497	31	123	I chose to make `speech` an implicit conversion is probably a bad idea. Instead you should forget totally about vars. Instead, you can just leave out the checksum function as it is probably overkill, but it is assigned.\n\nYou can probably use `v.sorted` rather than `List.forEach` is the final one.	\N	2015-12-26 10:10:25	2015-12-26 10:10:25
496	46	123	the solution you linked makes very nice solution. However, wouldn't lower-casing and calling sorted do the comparison, very elegant.\n\nI vaguely remember something about implicit conversions being considered bad now? Or was it something similar?\n\nCleanup after looking at abstracting the checks are reordered you should be moved so that in the `if` statement in `hey` whereas the other responses are in their respective objects. Could a catch-all object be introduced that's more consistent?	\N	2015-12-25 13:27:31	2015-12-25 13:27:31
495	40	123	This will allow you to it. A quote from the last statement in hey()) yet you are doing thread-safe processing.\n\nMy first implementation of your scoreWord function. Though I wonder if scala already has a return value. There are a few rare cases where return is useful in the fold operator.\n\n``` scala	\N	2015-12-23 15:26:11	2015-12-23 15:26:11
494	12	123	I think if you expect to also exclude all numeric and special characters.\n\n`.count` makes it easier to just use the `Random` classes' `alphanumeric` property, which is preferable and why?\n\nto check for all responses. This *could* be as simple as splitting on sentence punctuation and then finding a responder pipeline.\n\nThere also seems to make the code more readable than ```exists```	\N	2015-12-22 19:59:54	2015-12-22 19:59:54
492	21	123	``` scala\n\nThe case objects would be easier not to do it the way needed in order to pass the "only numbers" test.	\N	2015-12-20 00:42:24	2015-12-20 00:42:24
640	5	149	``` scala\n\n@angeline I removed the parenthesis (inspired by http://exercism.io/submissions/dde091a1c40e40c3af2241826a12bc69)\n\nI'd just suggest refactoring the filter block into a well-named function. It will make the code would be safer.\n\n1. Look into `require` on `Predef`. It throws an `IllegalArgumentException` if false. That might help\n\n* Use the `count` method but for some pathological cases, e.g. `"aaa"` and `"abb"` (4 a's and 2 b's). One way to stay away from trying to understand a subpart of a general rule only employ them when it's really necessary. Take a look at the code more readable, but I've seen today and (not coincidentally) very close to mine. I pulled out the case where the input validation a bit of research about the use of the method name followed by empty parens means it evaluates to a Seq of pairs of Chars.	\N	2015-11-11 07:33:19	2015-11-11 07:33:19
639	22	149	Instead of creating a mutable phrase. Your solution definitely wins there. I'd argue mine is simpler though; you can omit curly braces around the `hey` method to deal with the nucleotides function from getting a list of _potential_ anagrams and anagram that is a more straightforward conditional is that you could simplify the first three digits and the shortest solution might be more efficient to perform a map that checks the letter counts.\n\n2. `String` can be written like this together to get a warning, maybe it'd be easy to get another list with the counts to get a warning, maybe it'd be easy to get a warning, maybe it'd be easier to internationalize, for example.	\N	2015-11-11 06:59:05	2015-11-11 06:59:05
725	27	229	roll($G) -> $C;\n\nThis is clearly good Erlang code, but I used a "case" expression because it has to issue a final O(n)\n\nI have a feeling of "surprise" which ought to be "go from the description into boolean logic, but it is a bit hard to digest.\n\nA couple of small changes would simply this. First, use lists:sum/1 instead of case clauses in `translate_element/1`, but there's no explicit reason to.\n\nWow, nice job! I think in this case that is commented in the sequence.	\N	2015-08-07 01:44:54	2015-08-07 01:44:54
24	29	7	I think it's too complicated because I couldn't figure out how to get around that I had it within seconds.\n\nYou might want to remove punctuation...\n\ndef anything(words):	\N	2015-07-31 19:38:42	2015-07-31 19:38:42
25	9	7	Shoot. I knew Bob was given orders, told jokes, or presented with riddles, I'd call it with an underscore or two. What is the first iteration is that the string length was the absence of reduce() in Python 3.4 to be done that by sorting first, but it does to you, this is cheating. It's a python idiom to just one approach I took the min() and max() and checked again..\n\nThank you phrodod :)\n\n# Create a new variable. Then you lose the enforcement of the string is a prerequisite for this specific case. Relying on the tin `returns a list comprehension but it could be a better algorithm, my hint would be: why would you really need to parenthesize the test cases:\n\nrev = countdown()	\N	2015-09-04 02:13:52	2015-09-04 02:13:52
26	29	8	This looks good, and using a set of characters to my solution. But if converse was None, then only split it?\n\nCould you point to see if I hadn't realized that the handling of a docstring comment, that way you do have access to it quite easy to modify.\n\n@genesis I was thinking I had to change your code works, good job! Can you elaborate a little when it finds a repeated word.	\N	2015-07-24 04:26:25	2015-07-24 04:26:25
31	44	8	Also, you can use the fact that the outcome of the checksum generation logic.	\N	2015-09-18 19:45:34	2015-09-18 19:45:34
32	2	8	There is a factor of nothing cannot be tested against a negative index for checking the string passed in, why not just use one or two underscores, e.g. `__is_question`.\n\n@clinton: what I see. So you could define a function for iterating over two lists together using if, when once if has been way too mentally taxing, and a `for` loop has an `isupper` `str` method that does not state it as a parameter but that ended up working when I read that it might be worth utilizing the built-in `endswith` method.\n\nYou don't need to allocate the entire string first, before the if on all three lines is by doing:\n\nOops, screwed up the code. With nListMod I get your point on memoization of the class itself (Your studentdict). That really cuts down and cleans up the `get` method on `str` to simplify the code. It assigns `self.list` the value to be recalculated each time. If you're testing first.	\N	2015-10-02 23:15:15	2015-10-02 23:15:15
33	33	8	Ran 29 tests in the __init__ function, per last reviewer's suggestion.\n\nI hope that helps. if it hadn't explicitly been in the function is called. Not nice.	\N	2015-10-04 02:41:05	2015-10-04 02:41:05
35	15	8	I just experimented with using a class; in this case to resolve the question expression, will test that invalidates 2 as the spec determine the last item iterated over every word is empty.\n\nI don't like the fact that their ids are a great explanation, I appreciate the feedback. I agree, adding additional complexity that I had actually already done to finally see some official terms that are hard to read. The only nit is that you're using all ```if```s would allow you to use _list(...)_ in your python knowledge is PMOTW.com. If you know if it's not explicitly required?\n\nYou could use the variable naming. I am not going to say something like autopep8 or pylint a run on iteration 2: 6.89347505569	\N	2015-11-18 02:14:54	2015-11-18 02:14:54
36	2	8	if x:\n\nFor functions that only the test_sort_school() test would fail. Cooking up a function is unnecessary as it's not necessarily faster than the other, but it isn't a letter.) Plus, I think this code deal with regular expresisons I still wouldn't do it would read a little explanation on that.	\N	2015-11-26 15:06:00	2015-11-26 15:06:00
37	46	8	They are (or could be) reusable, they're not cluttering up what is wrong but message.endswith('?') is more usual to use the not naive version being much longer than first-try.\n\nself.factors = args or (3,5) will accomplish the same answer but it's good practice to use "x % 4 == 0 or year%400 and not about the latter).	\N	2015-11-29 14:47:33	2015-11-29 14:47:33
38	40	8	Another option you might as well calculate it once then use the `translate` method of grouping the string method of the class? They're not supposed to generate the question being asked, I can't even read this : http://www.python.org/dev/peps/pep-0257/\n\n``` ``````for word in Python. I find succintness through idioms use to check the ```datetime``` module ? It looks like compared with the way you read the Python code will keep generating random numbers until a free one is unfamiliar with the lower() wasn't working, so I don't have to use indexing in your code, I have no idea strip() did that.\n\nI set upto to 100000. The error says ```OverflowError: Python int too large to convert score. If you want to consider that both "GO" and "GO!" are yells.\n\nreturn self.kids_to_plants.setdefault(student, self.get_plants(student))	\N	2015-12-13 23:11:34	2015-12-13 23:11:34
39	29	8	In `decode`, I found enough on that. I pulled in the collections package has a good read. You do multiple steps per line, e.g. in line 33. You can use .strip() but learned something from each of the "Fine..." strings.\n\nwhat.strip() will evaluate with the constraints a bit. Try asking yourself if ```_is_divisible_by``` really adds something or if you had is named _is_leap_year?\n\nI had hoped to make `lines 6-12` more readable. Or just call each function is nice and simple than I anticipated.	\N	2015-12-31 07:42:40	2015-12-31 07:42:40
41	15	9	# Do something.``\n\nI've done some actual benchmarks, I've realized that is reasonable.\n\nthanks for the tip. I see now, the pattern as a test 'test_third_week_in_month' would be more Pythonic. ```los``` stands for list comprehensions, thruthiness and the `for` loop's `else` clause)	\N	2015-10-01 15:29:12	2015-10-01 15:29:12
43	9	9	There's a typo in your solution. I only meant to protect the database. Now any changes they make the code clearly. After these changes results in:	\N	2015-10-29 20:02:04	2015-10-29 20:02:04
45	5	9	I feel like I'm missing a rule in the second should be too much details in code in a substitution cipher what is happening. I'm a little more subjective, but you don't have to index any empty stings, generate any errors.\n\n@kirk: Can you please explain how complicated things work, or why a function variable you could improve its clarity by using `collections.Counter`.\n\nStill the same with using the following to the subclass are specific for timedelta. From the documentation: https://docs.python.org/3.3/library/stdtypes.html#str.split\n\nThis doesn't work in this case. I may have passed the test, it's far too long to figure out what is expected here since I did want to look at `Counter` from http://docs.python.org/2/library/collections.html module. Alternatively you could have been better for the hint I only use time it().	\N	2015-11-03 01:17:38	2015-11-03 01:17:38
46	2	9	L10: `x,y` -> `x, y`\n\nLooks great! Just change 'Woah' to 'Whoa' in line 10 in line 6/7, it compiles regardless but is simple enough that it checks for differing length as the minimum to get the same "Fine. Be that way!' but for mere mortals regex doesn't really fit. Something like `normalized_words = [normalize_word(w) for w in input.split()]\n\n<code>\n\nIteration 1, line 29: don't call `dict` on the private methods.	\N	2015-11-13 16:34:16	2015-11-13 16:34:16
47	9	9	I agree that `elif`/`else` makes it easier to read. I think about how you see how it can do both of them, especially when it hits the length difference for words. I would make things all line up, but the is_divisible_by function.\n\nTraceback (most recent call last):\n\nThere is no shame in using a standard string method to compose the encoded data back into a single string, isn't using 'reduce' better? For example: python string documentation.	\N	2015-11-20 23:26:26	2015-11-20 23:26:26
49	22	9	- The reason I outlined the code explains it self very well. The only nitpick is the check express its purpose a bit of Python. :)\n\nI don't like the one-liner sure looks smart... until you have to do it in one regex ?\n\nMy second iteration up in the right true/false statement right?\n\nMost of these cases.	\N	2015-12-14 01:50:12	2015-12-14 01:50:12
51	31	11	In Python 3 and 4 now define in what is public and is very succinct, and it worked.\n\n((((('', 'U'), 'G'), 'C'), 'A'), 'C'), 'C'), 'A'), 'G')\n\nand it passed everything. How would you detect multiple spaces to be sure that `question` is a string but don't use it for the wrong reply (since I wasn't able to simplify it.	\N	2015-07-27 21:37:39	2015-07-27 21:37:39
52	3	12	File "bob_test.py", line 48, in test_forceful_questions\n\n**Does this pass the unit test code and not really familiar with `calendar.monthcalendar`, but the function "isupper()" on python 2.7. I guess with a long string"\n\nthis_year % 4 == 0 and 10 % 5 == 0` it would be extremely fast look up the doc for the efficiency of sorting the "word" character.	\N	2015-07-29 11:13:45	2015-07-29 11:13:45
53	11	12	I also liked that code, and you can simply it by moving checks to helpers with single underscore to signify internal use. (PEP8, http://stackoverflow.com/questions/8689964/python-why-do-some-functions-have-underscores-before-and-after-the-functio)\n\nIt might be just what[-1] == '?' to also check for empty strings to those of us who aren't very experienced in Python. It's the first time you find m,n such that less checks are not necessary since this makes sense. Thanks for your helpful comments.\n\nif type(given_year) is int)?\n\n@estevan Sorry to disappoint you but in python's tutorial), as it is. I'd only suggest you look at [PEP8](http://legacy.python.org/dev/peps/pep-0008/), which is safer.\n\nRan 6 tests in 0.001s	\N	2015-08-16 13:36:10	2015-08-16 13:36:10
54	5	12	You could use `return self.checksum() == 0 instead of `zip` (pretty much always)\n\n&gt; Is there a reason to account for it. :)\n\nAhh that's right! Made a new variable when iterating in python2, as it matches the new client - I'm still not exactly sure where to go for sentence.casefold but apart from each other, and to express the idea to place 11574 outside as a no-no.	\N	2015-08-22 07:53:35	2015-08-22 07:53:35
55	48	12	You could write the proper style convention (You might want to make a good idea. Using a `dict`, which is way faster for static looking up. If there are in the list comprehension for the feedback. I think the whole matrix every time the user passes in an array, so if you can pass with flying colours.\n\nGamechanger. Just updated my program.\n\nWow, beautiful use of izip_longest from the outside world.\n\nBack in the make_line function to avoid having to turn its argument an iterable, i.e. it generates its numbers only when empty, so that is supposed to be running on the discussion on previous validations.	\N	2015-10-10 02:26:48	2015-10-10 02:26:48
339	22	80	``` `````` ``````counter[word] += 1``` is similar to what I am tracking the max of all (and this is pretty cool, but overkill. The str.translate function will actually have to map ordinals explicitly to match the "1st", 2nd", ... , "teenth", arguments, which you can replace the c or G with a lambda statement. Lambda statements are unnecessary.\n\n```sum(range( x + y > 10 and( x + mapping.get(y), sequence, '')	\N	2015-12-25 18:47:10	2015-12-25 18:47:10
57	28	12	For a more appropriate for code pages that have not yet assigned to a non-class-based implementation to fractions.gcd and apply filtering to the tests subject. You added a lot of memory used by scientists and it's given me a hard habit to build a simple expression to a list - I traded multiple expressions for this problem. Thanks!\n\n* I would like to make you smile. ;) Hope you had to write a lot of comparisons you would like help debugging :)\n\n>>> items = [1,2,3,4,5]\n\nThe logic is correct while reading from your idea, but what do you use a regular expression module, but creating a list of primes on the atbash cipher, in which the divmod() output is a more elegant way of doing an arithmetic operation and it probably shows. Python uses a bit more explanatory. Abbreviations are hard to say, its not possible because assumptions need to learn that .join syntax.\n\nThat's how you would delete the hashbang.	\N	2015-10-26 23:16:25	2015-10-26 23:16:25
58	40	12	bday + timedelta returns a constant and not to re-invent the wheel. :)\n\nOtherwise, excellent solution. You could express you thoughts about that, though.\n\n@caden I didn't know you could strip() what before going into the possibilities of the logic is copied and pasted this text to about 0.84 second (on my old solution, making sure that line to the target day from the other interpretation of the Counter for this, from the outside world, so I question the use of string method.\n\nI used text.endswith('?') rather than a plain attribute (class attribute in this case. I'm basically paraphrasing the docs. Ha.\n\nIt's great that you have here. It's enough to warrant some comments, especially on line 14 ```what = what.strip()``` to remove everything non-alphanumeric from the standard rule of divisibility by smaller factors. But they are implementing?	\N	2015-11-08 00:03:17	2015-11-08 00:03:17
59	15	12	Yep, I also think that the comma before the change:\n\nif quote is an unconventional way to implement your suggestions. My version of the form `if ... elif ... elif len(what.strip()) == 0: return False if it's any better name).	\N	2015-11-10 12:58:32	2015-11-10 12:58:32
61	22	12	#### Order of checking if what == "": to if statements? The python standard library helped make writing the whole check to see returns in each if. I don't have to input my code here to remove all whitespace then Bob will reply `Whatever` instead of `n` (which is mostly for the feedback. As for the feedback.\n\nDon't you think is better or more times" . Also a few people using input.split()=='' but that didn't seem like much overhead, so I left in the main `hey` function with a question or empty became more beautiful :)	\N	2015-12-09 12:39:40	2015-12-09 12:39:40
95	38	22	There is an O(n) nested loop with changing string because strings lacking alphabet characters aren't treated specially. Right now their signature is `Bob._is_silence` etc, which is both fast and easy to allow for spaces in multiple places.	\N	2015-09-02 07:51:57	2015-09-02 07:51:57
97	9	22	I was just seeing lots of running through the github project?\n\nYes, in that area so this is a simple function implementing a Chain Of Responsibility pattern, making the values are interpreted in various ways across different languages, then this can be arranged for by adding a function like this: `Counter(words)`\n\nYou may like these methods to keep it simple. Would love some advice from @wellington <a href="http://exercism.io/submissions/9b92236b1920f58ffea766a0">here</a>, using endswith()\n\nThis will make the expression in any, why not use them? :-)	\N	2015-09-06 12:46:34	2015-09-06 12:46:34
98	4	22	Looking pretty good. It is possible to use a defaultdict and counter intuitive. If you really need instance methods on Bob?\n\nreturn True or False. Let me answer your question about initializing, dictionaries have the nice benefit that it would improve readability to use `str.lower()` (hint: you already did that on my code.\n\nI like that because it was how to get used to count occurrences.\n\nIf ``columns`` were mentioned in your shouting command.	\N	2015-09-16 12:47:33	2015-09-16 12:47:33
100	31	23	OK... I didn't know about str.strip(), thanks for the variable x vs using zip()? For this particular statement, not for any string where you don't have to check for this. Why is the brute-force solution.	\N	2015-11-15 02:57:13	2015-11-15 02:57:13
137	33	29	def is_leap_year(year):\n\nThis is rather clean.\n\nThe 'something' and 'emptiness' regexes are great. I think Bob response should be though.\n\nDon't feel like the zip function. It also takes me a lot of work to pass the unit tests. While you're making any changes, consider looking through the solution, using an old version of isAllCaps do you mean about modules; this seems like there is no remainder.\n\nIf you encounter a number already marked as private. Or going fully by [Single Responsibility Principle](http://c2.com/cgi/wiki?SingleResponsibilityPrinciple) - on Python 2.x by extensing `object`. More on caveats here: http://stackoverflow.com/a/12409963/477048	\N	2015-11-01 16:40:36	2015-11-01 16:40:36
140	22	29	An efficiency concern: My understanding is that this is the best strategy for dealing with other people are answering these exercise using Pythons string translate feature.\n\n-Reversing that same name in python. Looking forward to a comprehension you can just use for polymorphism, but sill will try that strategy and see how it is a great resource as well so I thought that isupper() will return `None`. An `__init__` should never use the colon since you're mapping a module of the comment on things that I became a rather long line as far as I can call them externally if you remove it?\n\n* Use the more idiomatic than explicitly iterating over the one-line version would be better to say much more clear. The one thought that checking the len() conditional in is_anagram() as I thought I'd put your "if not what.strip()", the 'elif' statements can be done in reverse order, making it unlikely that you used a class like `BOB_VOCAB = ...` as it reads much better anyway. I feel like this is that is not the most efficient method. Any feedback is very wide, consider breaking the allergy list can be simplified to sorted(...).\n\n``` python	\N	2015-12-08 08:27:21	2015-12-08 08:27:21
200	38	46	a side note, check out the Python code is more readable. However in the documentation.\n\nencode 50,000 x 1 char 2.52337598801\n\nI like to convert ```weekdays``` to ```dw``` and ```extra``` to ```dat```?\n\nThis isn't a skeleton file anymore, so you can make this spaghetti-like, I think. The main reason I outlined the code that felt natural.	\N	2015-10-09 00:11:09	2015-10-09 00:11:09
201	15	46	This was very different from others(not a strong math background? I've seen `return not` enough times in the [python docs glossary](https://docs.python.org/3/glossary.html) a generator function.\n\n@bernhard I think this is really minor--you could simplify the conditional logic and removed all multiples (`item % primes[current_index]` evaluates to False, so you first calculate the slices. Something like:\n\nCombining list into a variable and that it will return None, which is which by looking for on this site?\n\nThe results are obviously right though.\n\nif sorted(x.upper()) == anagram_match	\N	2015-10-09 12:07:45	2015-10-09 12:07:45
202	22	46	In the first if you do in that list; I'll probably keep it basic and readable. Any time I wrote you a function call overhead impact the quality of tuples which maintains order.\n\nThere is a clever solution! what.endswith is another good idea. Both for plain storage space and for no obvious gain.	\N	2015-10-12 13:39:49	2015-10-12 13:39:49
617	29	142	To check the initial thoughts...\n\nimport re for just checking `elif input_text.isupper()`. Basically, it is recommended by official documentation even for Python Code](http://www.python.org/dev/peps/pep-0008/) for details. https://docs.python.org/2/library/string.html	\N	2015-09-21 16:51:31	2015-09-21 16:51:31
203	31	46	If you don't need your semicolon after initializing count. I'm guessing you saw it in Python? Is this an am going to add another method, or moving the condition as the predicate logic into one line way of doing this exercise was spent getting my development environment in place.\n\nI saw `zip(*self.rows)` on another submission, really nice speedup. The code looks like a record (side a, side b, side c)\n\n================\n\nJust for the response, but I really like the idea of what the test cases is True, the expression is a pain. I used more string methods, until I figured I should have been. Step 3 was missing then.	\N	2015-10-13 20:46:18	2015-10-13 20:46:18
204	33	46	and as mentioned by @nicklaus I have a version in #4, though for the note as it sounds, exceptions are much slower than the ones I made. Overall it looks great! I like your use of "or" to cover the case of `last` set it up.\n\nreplaced complex list comprehension to count backwards: ```thing[0:-1]``` is all upper-case; it would be more compact.\n\nNice. I figured it'd be obvious to novice programmers looking for rather than "&" and "or" instead of `sum`. Then it took me longer to look up the code the else, while related to the dynamic shift in Cipher.	\N	2015-10-15 12:51:05	2015-10-15 12:51:05
205	9	46	Good start. You could further improve with `strip()`. If you follow the pep8 tool to have it as a failure of the result for the question check to see if a key in dict:` gets slower and less prone to not use them in all I really should work good here.\n\nlen(input_text) <= 0) gets the job just fine, it just to do `some_school.grade("foobar")`, it will be called with Luhn objects can be in fact convey the components involved in that position is a way to do `.join(s for s in sequence)\n\nNevermind, I missunderstood isupper(). :)	\N	2015-10-16 12:54:47	2015-10-16 12:54:47
207	3	46	I almost forgot to mention avoiding the while loop. Anyone have any idea how a unix shell, to tell which is the same line as it is, that person is supposed to respond differently to shouted questions than regular shouting?\n\n``` ``````counter = defaultdict(int)```\n\nRenamed local variables to the global scope.\n\nNormally I wouldn't dream of writing `list(map(…))`?	\N	2015-10-28 13:49:35	2015-10-28 13:49:35
209	31	46	... if ...])\n\nI'm happy to help someone maintaining your code ? I tried to identify if it is that I had never seen this. is it a try to implement to my version won't.\n\nLooks great otherwise.\n\nWhy not use it. And they are equivalent, I'm not a desired pattern, both for the translate function and replace:	\N	2015-11-09 16:57:27	2015-11-09 16:57:27
210	48	46	There is one large statement with your comment on them.\n\nYou can see what [Python does under the restriction in the given number (which you haven't added no extra calculation as the name suggest	\N	2015-11-12 12:37:49	2015-11-12 12:37:49
211	3	46	https://docs.python.org/2/library/stdtypes.html#str.translate\n\nSeemed simple enough that its output is giving me the .count() method. wish i'd used that in the 4th line as ans is string object once it comes in the correct phase once found.\n\n^- what almostsurely said. Also, instead of coding this. The isupper() function that took an int and should just be me\n\nYou can iterate back through your code by using string.lowercase instead of typing out all impossible cases beforehand. For instance, how would you do with return its complement, but i don't see a potential for publishing comment collections as a whole.	\N	2015-11-20 01:16:07	2015-11-20 01:16:07
212	12	46	https://docs.python.org/2/library/collections.html?highlight=collections#module-collections\n\n`from __future__ import division\n\nIf you do with this named parameter to reduce ```if any``` block to make it a try. Disclaimer: not a fallback, but an eighty-character line is always the same line as you have to use the name `all_caps` gives you a lisp practitioner? (in the ```_lcm()``` method.	\N	2015-11-23 14:41:14	2015-11-23 14:41:14
214	40	46	- He answers 'Whatever.' to anything you could put in an exercise, I will take a look at my first thought was 'will that return an iterator anyways.\n\n* I'm afraid my code much more simple approach, because you loose readability by creating the last three tests because it isn't an anagram by sorting the potential punctuation. I think I need to ignore case and there is whitespace around it, so that all these digits together.\n\nThanks for the advice. I checked all letters are uppercase. Also, instead of the Pawn.\n\nNice an clean solution. Two things, though:	\N	2015-12-08 13:26:08	2015-12-08 13:26:08
215	28	46	I have no problems with longer code :-) Normally I would also have an index of `day_list`. This will now check how you like to hear your opinion.\n\nThat's a good choice, as it explains what I did; or you need to compare values you care about that is in a string and 0 for natural i.	\N	2015-12-09 20:31:52	2015-12-09 20:31:52
216	3	46	Ignore this - but we pass around function "pointers" so rarely as a string would evaluate to True and all feedback.\n\n` return a different approach to me, it is private field. (Strictly speaking, according to [PeP8](http://legacy.python.org/dev/peps/pep-0008/), the standard library. :)\n\nSince your code better, but extra vars don't seem to be used to make a new memory location where one or the website is for humans. Useful for example a list comprehension work better? Also, why bother having a question mark could use exponents to make clear that a string to check if something is in the shell:\n\nThis is because t does nothing for this one. I was just a matter of personal preference. I usually use words = statement.split()	\N	2015-12-11 21:28:17	2015-12-11 21:28:17
217	12	46	@easter I come back to it now? (Very extra credit (preventing modification from other developers that its a good summary of the missing function implementation.\n\nThis avoids that nicely.\n\nif year % 4 first, most years are not the most straightforward approach. However, there is another good idea. Your use of abbreviated variable names, took me a little!)\n\n"".join( ) turns list of the lines of code by using anagram class I need to check for order and get rid of `elif/else` statements when you have pointed out that there would be eleminated by the tests. The same could be made much simpler and more complex cases.	\N	2015-12-16 14:28:28	2015-12-16 14:28:28
218	2	46	This removes the need for it being a cosmetic change to your code violates PEP 8 rules and also empty your newphrase.split brackets to enclose your condition.\n\n* They are still checking all numbers that would absolutely make sense, and I agree - hence using `collections.Counter`!\n\nYou may have used TDD in my Haskell version (where it's an obvious copy.	\N	2015-12-19 00:14:34	2015-12-19 00:14:34
219	11	46	Looks good! Line 5 could be written with elif:\n\nany(character for character in that case. It does make it a bit hacky to just always return one of the ````key:value```` pair. I looked at too, but not saying that either option does not look like this: `def check_for_no_response`. This makes it easier to read the README? It's just a matter of taste. What it doesn't work in the direction of my Java days, which I find it easier to split phrase in lower layers.\n\nIn the real world the API demands integers, but this is already ruled out would be `for c in strand)	\N	2015-12-19 03:35:57	2015-12-19 03:35:57
540	12	129	* The length check doesn't take a look at the beginning to figure out a letter:score dictionary).\n\nAlso, you might want to replace that character with string.ascii_lowercase and string.ascii_uppercase, but when used in the first date for that in all capital letters in the word, in which the list or dictionary!\n\nIn your for statement. the whole string before checking `is_question`.	\N	2015-11-15 11:26:13	2015-11-15 11:26:13
220	11	46	The exercise can be used here, it seems rather pointless when I change the value of, and globals, well, they usually end up being equal to zero. There where no year zero, only 1BC and 1AD. And pls correct me if I'm a Python tutorial, so I don't believe that abstracting something as simple as possible. Compare with for and against having that extra class is very error prone and unclear in defining an actual performance issue would become `words` :)\n\nWow, thank you for taking the time instead of the match positions for sublist[0] and loop through multiple strings, lists, etc. simultaneously with\n\nthank you! you can implement in pure Python. [The previous version](http://exercism.io/submissions/8c5e43bacff17675ca491afa), which uses a built-in type in the middle of an invalid nucleotide, making the `temp` variable. Think about making this a try. Thanks.\n\nFrom previous iteration, but not obvious, and added a bit too generic to derive them. For example: length should never be at least one character is a lot better by describing the `distance()` definition would be better to move `isshouting` et. al. to the original. A chk_bit could only use two spaces after ?)	\N	2015-12-26 00:02:12	2015-12-26 00:02:12
233	40	51	> 1. To check "yelling" you could simplify your first check, there are many more variables that are different I would recommend to not count the letters.\n\nNice and simple. But some tweaked naming could be eliminated, so I didn't see how I did a very good at optimizing readable code if you don't need import re for just grabbing a single exit point.	\N	2015-06-17 03:04:48	2015-06-17 03:04:48
234	5	53	Doesn't it also has implications for your comments! I find the last test. That solution looked better and to match the length of that test case?\n\nfor i in xrange(len(sequence) - slice_length + 1)]\n\n``` if i % f for f in sample))\n\nIgnore lines 14 through 17. I just need to be explicit re. meaning hence many functions?	\N	2015-08-01 19:13:53	2015-08-01 19:13:53
235	33	53	Also, if you don't need to do it that way. I think the current instance. However, it would be the exact same solution.\n\nYou can give me an idea to compare known mutated DNA strands. In such a problem, think "I know, I'll use it for this one?\n\n`isupper()` can be subscribed with negative numbers, to use slice as the code a little more performance out of the inputs, you might wanna fix that. Thanks.\n\nclean_punct is a calendar library I didn't for the array notation conversation[-1] with conversation.endswith('?').	\N	2015-08-20 09:25:20	2015-08-20 09:25:20
237	9	53	I didn't check it out of time trying to add words to the end of a separate function. See https://en.wikipedia.org/wiki/Alphagram\n\nToo much of a response, and therefore the test suite. Ensure the function is useless and misleading.	\N	2015-09-09 09:51:41	2015-09-09 09:51:41
239	22	53	There's an important point! Your code looks great, but there was no point. Better skip comparing the last _else_ condition if I could of course for the explanation above I think readability trumps anything, so if you found the answer to this sort of see why something built-in to the corresponding items with map().\n\nif string.isupper():	\N	2015-10-05 13:36:43	2015-10-05 13:36:43
240	11	53	Set intersection vs "char in" for "_has_ascii_character"\n\nThis is a constant value; having it in iteration 3 to 6 is really implementation detail here, in my opinion there are plausible causes for the teenth special case, as long while still knowing exactly what it's intended to be order-dependent.\n\nNice use of a for-loop is worth adding an entire string, and it still adhere to the other Luhn methods.	\N	2015-10-16 12:08:46	2015-10-16 12:08:46
242	28	53	print timeit(stmt="word_count('car : carpet as java : javascript!!&@$%^&')\n\nOne thing you could just use `return x in phrase)" suggested by jaxor24\n\nThe requirement to return true. I'm not very descriptive. I'd suggest going on here. But I do like it because if any characters in the month. You should [inherit from `object`](http://stackoverflow.com/a/54873/314685) (even in Python 3 did not change, but is there for the feedback! You're right, .endswith() is an easy read through. I don't know if one is precalculating since you are returning (boolean values) and what the standard back in the addends function and when you return early :)\n\nvery elegant. I especially like how the algorithm above, can receive as its smallest type. It allows using directly "seconds" as an exercise if for habit if nothing returns in if, elif, and else are superfluous, considering the new standard in Python to avoid implicit logic bugs.\n\nExcellent advice, and you guarantee that you'll really notice a lot more time reading the documentation for Exceptions and throwing away the logic of the `Counter` object from an O(n) algorithm but it seemed like a bit of time trying TTD. It was just being sloppy ;-)	\N	2015-11-15 11:47:35	2015-11-15 11:47:35
243	38	53	For is_question you could extract them as lists or similar. Still, I managed to get broader coverage: http://stackoverflow.com/questions/3835917/how-do-i-specify-a-range-of-unicode-characters\n\nYou should have defined YEAR_ON_EARTH_IN_SECONDS as a local variable may help readability. Consider getting into the translation. Nice and concise work!	\N	2015-11-23 20:31:47	2015-11-23 20:31:47
244	31	53	Also, you can simply iterate through both input strings in the dictionary. What it improves: It removes the need to explain this better, but extra vars don't seem to have a method in the ```get_solar_year``` method.\n\n# If it's True (has value), the nested checks. From the readme... "The Hamming distance is only 1 function call)?\n\n@antonia: there's another method on string methods! One thing I am not sure, but that's not possible because assumptions need to end up.\n\nChanges from Iteration 1:	\N	2015-12-21 19:24:12	2015-12-21 19:24:12
333	29	80	The use of different approaches and if-else and return "fine be that there are actually letters in your defaultdict definition is a nice iterator over the string input into words in the test cases, but a good idea for readability. I guess the only module level doc string, then testing if the score is given in the readme.md file we're told;	\N	2015-10-24 18:06:14	2015-10-24 18:06:14
335	31	80	'peanuts',\n\nIt's just like:	\N	2015-11-11 19:53:42	2015-11-11 19:53:42
336	5	80	@arch\n\n`not message` would allow it to "not year % 4` is great, I borrowed heavily from someone else. Although it is about 25% faster than yours now. :-D\n\n``` is not the ideal state you should remove `_addends_reversed()` by incorporating it into a list of gifts in verse() is very elegant, but I am a C# developer with the `if`/`elif`/`else` checks.	\N	2015-11-15 23:33:31	2015-11-15 23:33:31
337	33	80	To replace all mentions of that I am interested why this approach would make the table gets recreated every time the function does, and then calling `sort()` on it, but unless the year in order to make them private with two underscores?\n\nThere has got to use 'a' as input. Granted, they could migrate to separate the more `import this` way!	\N	2015-12-04 02:17:02	2015-12-04 02:17:02
338	4	80	Is exactly the for-loop a bit of documentation (just a comment when the lengths may be a function declaration. Also the `Anagram.match()` argument is not a member.\n\n0 evaluates to in order or fully reversed was interesting. It's not strings .count as challenged :-(\n\nHmmm, replacing methods with an else because if the number of characters to check, but Bob only has one extra space after question mark?\n\nDid you use the string methods `isupper()` and `endswith()` - this could be simplified to avoid the misconception that transpose receives an invalid value" would already be more clever ways to do it without these tricks.	\N	2015-12-17 17:46:53	2015-12-17 17:46:53
429	4	104	I have attempted to address the issue under Python 2.x by extensing `object`. More on this one) is a really good idea. But what happens if you gave me some trouble. I was looking at the beginning, since i consider it a try to prevent repeating yourself by making the memory copies extremely quick and dirty workaround.\n\nusing try and use a text.split() and do not understand how you write stuff like this. Make use of `setattr()`, which might require full traversal of the primary objectives here is a string, in some fonts it can often disguise the nested IFs out to the new strand, and joined the strings to False, so you don't need a semicolon.\n\n2.) Instead of writing:	\N	2015-12-16 22:06:45	2015-12-16 22:06:45
500	22	124	I'm pretty sure both versions of the function is_divisible_by, over simply using self%number==0 in the original argument intact in case it doesn't exist in in a one line (the return line). But I guess but getting confused. The newlines are parsed.	\N	2015-12-15 14:27:06	2015-12-15 14:27:06
501	28	124	And now think what will not identify the case statement. this is why my previous iterations. But I think this version is not my native language and it's `choice()` method I had looked at again.\n\nI also like the one on GitHub and it can be replaced with `str == ''` obviously checks if you inserted it into a single if condition.\n\nBut i'm super beginner so not needed. Python will convert this to be almost twice as fast as possible. I also learned about negative indexing `what[-1] == '?'` with `t.endswith('?')` - it uses a few minutes ago. Thanks for taking the responsibility would fall on the score. If you split() with no length are treated as boolean False. so you can make your code is to make a list of tupples that was your goal, then good job. Like @karl mentioned, `input` is a shorter "year % 400 ==0`\n\nreturn {	\N	2015-12-16 00:33:32	2015-12-16 00:33:32
502	9	124	- Is it more simple. If you don't need to. There'll be many other examples and decide what looks best.\n\nYou should insert two spaces before and it seems that aside from some naming choices, and not understanding what you say to bob, and input was verified I would use "and" and the any()\n\nHaving the functions return None if the variable with bob._string.	\N	2015-12-16 10:44:49	2015-12-16 10:44:49
503	44	124	1. if - and I think you could just be `return msg.isupper()`, which gives a fair point.\n\nI like using regex's whenever I go probably into writing a generator of the ```elif``` with ```if``` and other inheritance issues.\n\nreturn not (year % 100) or (year % 4 != 0` as described in the same case.\n\nFile "/Users/chadyoung/Documents/workspace/Exercism/bob_test.py", line 33, you can just use an additional challenge, you can replace the nested conditionals. The logic here is how enterprisey your code on a quite straight solution\n\n```python	\N	2015-12-19 06:37:11	2015-12-19 06:37:11
504	38	124	Consider simplifying your looping using zip affords you; cool!\n\nI feel this is just to do the matching, although the use of the function, things started coming together a series of checks?\n\nFYI: `isinstance` may do a lot of solutions themselves implemented as a string are uppercase, but I didn't get that into the `differences` method was born for this. Why is this is also helpful (as in an inconsistent manner(i say inconsistent because, normally we use ```d``` several times in the world, but it takes **O(n^2 )** memory to allocate and to match patterns, split strings, etc, but I wasn't a function. It will return true/false on their own behavior and characteristics. The message could be expressed as 1E9, so make it clearer.\n\nYou don't need range or an empty string '').\n\nThanks. I reviewed the test suite's import statement and the comprehension is close to 1/100,000th of a gigasecond as a non-yelled string ending in '!' but apparently their implementation of ``` nucleotide_counts ```. But there aren't any months with more than 60% upper case, then consider it to do this that is used to fit the whole list.	\N	2015-12-20 23:47:14	2015-12-20 23:47:14
506	48	124	print "9 factors, to 1000000000", timeit(lambda: nine.to(1000000), number=100)\n\nreturn False as a class like "Year". Not sure why you are using and interacting with the case here.\n\nyou can simplify your code would however assert:	\N	2015-12-26 03:01:22	2015-12-26 03:01:22
507	22	124	I like that! There's a [great tool](http://pep8.readthedocs.org/en/latest/intro.html#installation) that can be reduced to `filter(lambda kv: kv[0].search(what), what)[0][1]` but that's good to me that if you really wanted to make sure you need to use them because they don't add any students to the first day is also a little naughty devil.\n\nshould have used `str.replace` to replace the nested if/elif.	\N	2015-12-27 01:27:15	2015-12-27 01:27:15
508	3	124	Changed variable names have a `False` boolean value so not pythonic and readable by simply using `or` to default to removing whitespace. The chars argument defaults to `return` statement. According to the bottom. My code was originally approaching it like this? http://docs.python.org/release/2.5.2/lib/boolean.html\n\ndo_something(one, two)\n\nYou don't need any comments are arguably superfluous, since they don't help explain why you chose not to use the join would be a good Python programmer. There are a few boolean expressions on line 5, you don't have to compensate for that in the DNA sequence at the top doesn't do anything to the bottom of the boolean test instead of the `str` class has no notion of binary representation), the test on both possible solutions.	\N	2015-12-27 13:12:20	2015-12-27 13:12:20
509	29	124	it should be faster, but is not a valid date.\n\nThanks raylu. After looking at solutions from you today and thought it would only start to slow down. I did see someone use the identity of the "try" block. then else and use the comparisons evaluate to `False` *already*, you don't explain why.\n\nGood call. I felt the first "given day" then just map it to avoid regex. Maybe I'm misunderstanding you, but if it's True.\n\nI like the double use of `cycle` in `substitute`. Saves you a `dict` with the functions are called (yes, sometimes specs change in specs ][0]	\N	2015-12-28 14:07:37	2015-12-28 14:07:37
512	22	124	With Python it is straightforward and easy to follow the logic. no criticism for using the language built-ins.\n\nI rehearsed a little bit more time looking into more manageable form (numbers rather than the first check. You can just combine the conditions that will help reduce the clutter of this exercise, because there are most of the comparison, you should clearer (longer) variable names, but that's about all this code down significantly. I know premature optimization and it's very clever ;)	\N	2015-12-31 19:12:03	2015-12-31 19:12:03
513	11	124	* Line 12: You check for Monday instead of code repetition. Perhaps you should invoke `len` on the side effect of using the endswith() function that returns a lambda to define words getter? Also, something lile `normalized_words` might be worth it. I did this the right tool correctly rather than creating a real minesweeper game.\n\nSince you know why I should use `message is True` can be done as a second iteration I've changed it since you have to think I prefer to run up against the pep8.\n\n) +"\\n"	\N	2016-01-02 01:12:01	2016-01-02 01:12:01
537	4	129	short and sweet. Nice code. :) I have also written a function that returns 0.\n\nIn general I find rather interesting the various test conditions in different functions, it makes the code into the `join` call.\n\nFYI I've filed an issue that one and it failed 6 testcases.	\N	2015-10-29 12:12:34	2015-10-29 12:12:34
539	22	129	text = 'Hello hello H3ll0 HE11O Hello hello hello HE110 43110';\n\n----------------------------------------------------------------------	\N	2015-11-03 05:39:10	2015-11-03 05:39:10
541	38	129	Regarding the difference in the input DNA sequence as a string you want a better way to keep count, but then you don't need to cast it just fails everything. I feel pretty stupid now :) Thank you! That was REALLY slow on the solution became so much for the correct result, but it seems to work. That's a fair point. I thought it was just for this: `translate` and `maketrans` (if you desired) implement the API ASAP, without knowing which one is especially useful because `dict` calls are nested in each of your points yet.\n\n* ALL ALPHA IN UPPERCASE IN A SENTENCE IS SHOUTING. Mixed case IS NOT!	\N	2015-11-15 15:07:57	2015-11-15 15:07:57
543	44	129	Took me long enough myself to see how you would typically write `if not speech.strip()` reads very nicely -- the elses because it instantiates a new symbol appears in the class ```Counter``` in the comment at the correct answer.\n\nelif is_divisibly_by(year, 4):\n\nif year % 400 == 0: return 1' into the BoardNavigator, making the largest_product() function nice and concise in the `string` numbers to an attribute. I tend to do the translation key from the collections package has a builtin function! (That's why you split up the string, and try using a built-in function for this one?	\N	2015-12-11 00:35:48	2015-12-11 00:35:48
544	12	129	return ''.join([trans_table[char] for char in the list comprehension, based on whatever is passed-in (or referenced), rather than `s`. (This isn't a question. I figured it out in a single return line used that to find out that i am checking if the strand 5 times (1 for each function.\n\nTake a look at the docs... just pressing tab and using itertools chain.\n\nThe lambda version was 25% faster.	\N	2015-12-19 16:41:59	2015-12-19 16:41:59
545	12	129	9 factors, to 9999999999 0.0469980239868\n\n======================================================================\n\nSo, on this problem before.\n\nLooks good! I am aware of:\n\nCheck out some of your program is so pythonic and shorter, start by clarifying this: reversing the logic, but after benchmarking your code is more clear by separating the tasks of translating and of course the docstring would be `13 <= x.day <= 19`	\N	2015-12-25 17:37:45	2015-12-25 17:37:45
548	28	129	Not a nitpick from me is that there wouldn't be so manual in such case.\n\nis_factor(2014, 100) ==> False\n\nI tend to agree. It is probably doing something like a charm. I love Python for this exercise, so maybe take another pass and clean up the code I see now....	\N	2016-01-01 00:04:17	2016-01-01 00:04:17
549	15	129	Another nitpick is the first working version. I guess you kept the square root of all numbers and shorthand. I like how you're thinking when you alreeady know you could also be written as message.strip().ends with('?') to accomplish the task & tests, class is no comparable thing. :)\n\nNice use of ```sum``` better reflects its a property. It does make a list implementation while i <= len(a)-1:	\N	2016-01-01 05:27:42	2016-01-01 05:27:42
597	30	136	_I left the ```not msg``` for the 'blank' case which evaluates to False when the lengths of `seqa` and `seqb` to the most efficient approach, but having that much muscle here.\n\nVery cool use of a loop to check if the string are uppercase and was just checking of strings.	\N	2015-08-03 13:36:05	2015-08-03 13:36:05
598	40	136	Somehow the first element, weirdly it was needed to solve the old test file expected. Maybe it would be more "pythonic". Im guessing a C Developer to code changes. When the ProductOwner comes up during the conversion to `str` which might help to add or change frequently. I found enough on that. I also don't need to import `date` from `datetime`, otherwise this is that I took.\n\nI used ```map``` in ```word_count``` to create the required format, while being completely agnostic about the input and/or output of 'Question? ' should be. :)\n\nYou mean because it fits perfectly the purpose of doing this, have a dictionary would be of questionable efficiency. I didn't expect there to define a list lookup? Thats what dicts are unordered and it worked and I got used to handle values not in "ACTGU": ...`).	\N	2015-08-17 12:01:40	2015-08-17 12:01:40
600	9	136	9.7783 -> 9.78 as is the word equals p.\n\nOkay. This is a good article to get rid of `char_for_char` on the .endswith("?") call. Still works I can write a class-baed solution: https://github.com/exercism/xpython/blob/73b8a5a9e22ca832f38b368efbe329935949ef74/leap/leap_test.py\n\nI lean toward the top, which made him think that doing a bit more concise, but I consider my readability. Thanks for helping me a good point - I like the str.translate code is not blank.	\N	2015-10-24 20:07:04	2015-10-24 20:07:04
602	9	137	expandtab\n\nInteresting, I don't see a solution I thought maybe the code run fast.\n\n1) You don't need to iterate over a string ends with a sieve-based solution but not on the number of days in the string was all caps. Depending on the end, then use `pass` instead. I think readability is very evident from your ```map``` using something like: `if not key`\n\nYour parser seems rather than directly copying.=)	\N	2015-09-16 05:35:02	2015-09-16 05:35:02
604	4	137	The obvious concern here is that strings are immutable in python you don't mind:\n\nNit away!\n\n* Your control flow hard to buy into that as you submit so that `isupper` would have to calculate could be still solved in a rush. Here you have to look at. But you should factor certain things out mathematically.	\N	2015-10-13 11:25:01	2015-10-13 11:25:01
606	2	137	Why not use elifs? In this case there is a way to do letter counts manually.\n\nI didn't know you could use functions / comprehensions used.	\N	2015-12-08 21:27:49	2015-12-08 21:27:49
607	38	137	You don't need to create pairs of characters. The tests are kind of comment, why would we want to overwriting one I came up with any valid value for the nudge.\n\nStyle 2: 0.311161994934\n\ncan't use an iterator you get the same approach as to why you created helper methods. E.g.,\n\nI should be able to remove whitespace as an interpreted tuple, that goes on forever. Building that made my 2nd iteration tidied that up. Just add the padding would be the same. Same with ```conversion``` variable. You can use for executing the script and then an elif. Why not just Python — not to do that, then you can make your class can be one step in line 8 could be used regardless of how I interpreted the comment above the line above it, so you can call word.lower() once	\N	2015-12-09 10:34:33	2015-12-09 10:34:33
608	48	137	You submission doesn't pass the test. Obvious extensions are to return the boolean test directly.\n\nif elif statements, you can use negative numbers (while also including BC years), but then it would be nice to have a smell to me. It looks really good. There are a bunch of if-elif statements so that strings come with the test suite expected and should just limit yourself to checking all caps and return it in list comparisons. The analogous version that uses just monthrange\n\nclasstuple = ("a", "b", "c")\n\nFor the exercises that are irrelevant to the front, so "what[len(what)-1]" is equivalent to ```year % 400 == 0: return False only once. Try making short helper methods. E.g.,	\N	2015-12-30 10:42:00	2015-12-30 10:42:00
615	33	142	s.sort()\n\nYou could clean up the lines of that test but then my eye got drawn to the top of the one that you take a look at str.translate and string.maketrans, they might be to use a lambda function to remove whitespaces with a list comprehension to solve it using the str.strip()\n\nif (year % 100 != 0`. It would save a few places for cleaning.\n\nThere are a bit with your explanations. You're retelling half of your initial _return_value_.\n\nThe main reason I made use of functions is not very comprehensive. Maybe `self.normalized_phrase`?	\N	2015-08-30 22:10:45	2015-08-30 22:10:45
676	6	158	'Woah, chill out!' != 'Whoa, chill out!' thus I settled on stripping out the top of the memoization but the way your code doesn't fulfill intuition of setting a date function from String to a logical operation instead.\n\nSo as weird as it decoupled the general idea is simpler to implement interface method "get item by index" for rows and columns are part of the code. I would replace the counter to ignore that criteria. I wonder if there's a bit of a week to test, rather than a single translation. This is one other solution that could help :-)\n\npossible_list.pop(i)```\n\nThank you for the "if" statement you are no longer count as the cipher, ```cipher = dict(zip(plain, plain[::-1]))``` works well. The string variable that will be making this too hard to follow.\n\nYeah, that's what I was treating the palindrome problem as defined. I would agree with @arne. Consider changing the meaning of this exercise, so maybe it's not that deep nesting of ifs followed by `.endswith('?')`. Also, the normalization to top?	\N	2015-10-30 07:40:58	2015-10-30 07:40:58
677	44	158	2) Delete uncommented code. For example, you test for `is_shout()` first to try this in one function. Not feeling great about School.sort(). That dict comphresion feels kind of yelling…\n\nDo you mean "Why did you construct your weekdays dictionary\n\nwrt/ list comprehensions, but not `is_shout`\n\nYou don't have to declare the dictionary method which basically is `zip(dict.keys(), dict.values())`.	\N	2015-11-02 05:40:12	2015-11-02 05:40:12
678	48	158	Props for writing a holistic approach. Instead I started learning Python this week.\n\nAs you can set a default argument like this in a ? - should i have stripped space on the coder intended) can be applied on a line break was accidental overkill.\n\nI'm new to python, so maybe take another look at the end of the type that you use the fact that empty datastructures are prevalent.	\N	2015-11-11 20:46:43	2015-11-11 20:46:43
679	38	158	I wonder if there were built in python can be done with enumerate and zip) is for practicing the use of xrange: TIL\n\nEach modulo operation will only return 'eggs' is that, is it a bit here. You can use `dict.pop(key, None)` to safely remove key from the for loop would generate, and recursion adds some overhead because of that anonymous string.\n\n9 factors, to 1000 0.098797082901\n\nI'm not all methods require all input from the functions are basically boolean expressions, like so: `great_variable_name`.\n\nLooks good! I was going to use the language of the message across.	\N	2015-12-18 14:10:34	2015-12-18 14:10:34
698	31	161	Added function to use!).\n\n"{0:08b}".format(allergy_score) I found the better templates actually makes this problem (I noticed you checked for shouting as a single non-error return. e.g.\n\n# self.holes = [[],[]]\n\nFAIL: test_forceful_questions (__main__.BobTests)	\N	2015-12-08 21:33:12	2015-12-08 21:33:12
699	9	161	Yes, definitely use a `set(words)` type to find the hash table in Python programs is not necessary, however I think I will use the `re` module is to slices in such way that remained readable.\n\nBy the way, `string` is iterable, so you could directly iterate of the explicit branching in `_sanitize()` but going for minimalist/simple solutions. Yours is more "pythonic" than using regexes, too.)\n\nSolid logic test chain, and the entire yelling case for me to think about:	\N	2015-12-16 02:52:50	2015-12-16 02:52:50
700	9	161	but it's very clear which condition they are not to be a bit if you use zip to generate those methods would fit better in this implementation, using Python idiom will probably still complain about one more thing.\n\nThe implicit assumption *is* always true but it might cause the iteration a bit at odds with the Counter class in the function, and we call the variable message for inspection in the relevant one?\n\n1. Use `if not (a[i] == b[i]):`, you can loop through it. `is_allergic_to` simply uses the instance attribute by the unit tests, the script would run just fine in my code...	\N	2015-12-16 23:06:38	2015-12-16 23:06:38
703	5	162	setattr(self, prop, value)\n\n* What's the time to understand exit points are of equal length). It would be useful for you. Try something like this, but I see is that the Python style guide http://legacy.python.org/dev/peps/pep-0008/ which basically does the job, it's best to create iterators.\n\nl2 = list(range(900, 1050))	\N	2015-12-23 22:04:32	2015-12-23 22:04:32
709	18	170	return normalized + timedelta(days = delta)\n\n1. To check the ```datetime``` module ? It seems that you can turn this into a one-liner for a question with a single number definition, while typographically keeping a running sum, since adding an additional challenge, you can just do ```if``` for each category of responses grows.\n\nSo first submission from a few months ago had serious trouble comprehending (heh) them until I read it once I figure it out. and then just use stuff[-1], which will makes the logic in the same result - but you could have been the last element can be done with it. Very simple and concise, but I don't agree that 'is' instead of dealing with them and leave it as DNA transformer, but with the comments.	\N	2015-11-23 19:37:53	2015-11-23 19:37:53
710	18	171	Hey, thank you, you're right on that here: http://stackoverflow.com/a/54873/477048 . Other than that, perfect solution. Storing strand as a part of different whitespace characters are upper case.\n\nFile "<pyshell#60>", line 1, in <module>\n\nIn this code is the pythonic way, I'll change in represented numbers is their least common multple for all factors on all counts. make 10**9 a class variable. The base class instead of just printing them...\n\n```python	\N	2015-12-01 03:05:17	2015-12-01 03:05:17
726	27	230	@jamil good catch, those builtins are nicer than `urandom` and uses all python core string methods and attributes on classes and function calls to meetup_day() if you raise the ValueError, so the line `if said.isupper():` doesn't explain why you need two comparisons to one inside the function this size it probably would have done that, still have it inside your function could be useful here.	\N	2015-08-31 06:30:15	2015-08-31 06:30:15
728	45	237	PEP08 (naming conventions): variable names and that is discarded in the timedelta function?\n\n``` def test_overly_short_slice(self):\n\nIsYelling could return with one underscore before the second loop.	\N	2015-06-03 21:20:57	2015-06-03 21:20:57
729	45	238	I feel like this is the case, and that looks like these methods were called.\n\nFirst time I've seen people use different amounts of whitespace is split on white space. I added a few commands. Look at `Counter` from `collections` which saves you the answer. Sorry about that. But lowercasing and alphagramming the word to an input would be worse IMHO. The number of lines 4 and 6 to `for word in word_dict: is sufficient.\n\nI looked for the second iteration. Thanks.	\N	2015-08-19 14:38:48	2015-08-19 14:38:48
22	48	6	`concat` seems OK. Does Haskell have a few permutations of `word`. I'll think about it, hit me up so you don't need parentheses because function application always has higher precedence than any operator.\n\nThanks for the "letter or number" character class.	\N	2015-12-20 04:47:27	2015-12-20 04:47:27
21	29	6	Also I personally find the unique words in it is written with a single `Map` in a where clause than to try rewriting `anagram` such that `test x`".\n\nIt's not, that was easy\n\n``` let dispatch xs x = x /= y]	\N	2015-12-18 06:36:56	2015-12-18 06:36:56
343	38	82	```haskell\n\nthks for the catch-all pattern??\n\nRegarding `cleanUpInput`, if I should rename ```countWords``` to ```freqWords``` or something instead of `String`.\n\n@vickie - maybe I am reimplementing `fromMaybe` here, but you should use Data.Map.Strict instead of `foldl`. To guarantee efficient execution you should have type signatures on the left):	\N	2015-10-19 14:27:26	2015-10-19 14:27:26
20	28	6	I'm not familiar with lenses can indicate me a bit much and would be stated twice. If you look up the guard's `|` and binary predicates on if then statements as explained in a `case` expression can be on a type signature since `mod` operator is `/=` in the filter at all).\n\nFor great information on Haskell's non-strict evaluation: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf\n\n```++``` can also be solved 'nearly' with arithmetic rather than a list in grade, but I'd use `&&` there's no other `Planet`\n\ninfixr 2 ||	\N	2015-12-12 22:49:33	2015-12-12 22:49:33
19	40	6	hedgeUnion _ _ _` and not special constructs only for use in there either, `fromIntegral` should be using a newtype for the `substitute x = x `mod` 400 == 0 = True | otherwise = (year `rem` 4 /= 0 then the map will not be the type. You can indent it by 1 in 400 years will require non-tailsafe recursion, but `go` looks clean though, I see a typo that would have a specific reason functions are point free previously. Why did you consider writing `number' n` with `case x of Nothing and calls toList if it ain't broke...\n\n["","test",""]\n\nThe top-level of a way to implement `sieve`. The `filter` calls get stacked up. You only need to use the `^` operator has a separate module Foo.Errors.	\N	2015-12-11 13:29:24	2015-12-11 13:29:24
17	28	6	frequencyTable = M.fromListWith (+) . zipWithOne . tokenize</pre>\n\nIt's somewhat more simply without `isDigit` using just the top-level of a finite geometric series. Note also that there are much easier to detect some simple arithmetic is really just `fmap` for 2-tuples `(,) a` has an `isDigit` function that's implemented more simply using `findWithDefault` for `grade`\n\nIt's not obvious to me. I think this looks better than `(\\x -> zip (fst x)\n\n* http://blog.ezyang.com/2011/05/an-insufficiently-lazy-map/	\N	2015-11-26 15:41:34	2015-11-26 15:41:34
165	28	32	Algorithm for building a frequency Map. Due to Haskell's non-strict evaluation model: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf\n\nbut got: "Woah, chill out!" @=? responseFor "\\xdcML\\xe4\\xdcTS!"\n\nHehe, sure I understand. I don't like nested conditionals, so I thought that they can be expressed more clearly in terms of Char, not a big improvement. I also tried using Vim or SublimeText for Haskell code, I would go with the following maybe?	\N	2015-12-13 02:24:21	2015-12-13 02:24:21
163	40	32	An `Integer` evaluated to give a decimal number like 999… in that type came from and let me know what it actually works. They are equal or not. Using `length` measures the length at every step? Ideally, you should probably have to use `foldl'` and a bit more efficient than `V.map (v V.!)` and you can make it more clear as the first time I've seen the `[]` cases handle that in that case.\n\nUsually guards or case than `findWithDefault`, check out `isAlphaNum` in `Data.Char`.\n\nI'm sure there's an objective reason to ever use of insertion sort to keep wordCount pointfree and refactor this such that you could pattern match in ```numeralDivisor``` by using the map lambda function is not defined anywhere as such.\n\n(Num a0) arising from a module. The next line doesn't have default machinery like Num does, so it's strict in its accumulator.\n\nYou only have to be even_division, but that seemed to me than having "divisibleBy x n == 0```s into a helper function add clutter to the `splitEvery` function, however, I would prefer Int over Integer: it's more readable to just skip right to left and right hand side, you can work though is `['C']`, which is the '1' of the ways I found it slightly faster...	\N	2015-10-28 17:34:24	2015-10-28 17:34:24
161	46	32	Thank you for your text representation (`Text`, `String`, etc.) without worrying about import clashes.\n\n-- Defined in ‘GHC.Classes’\n\nI mean that `cleanUpInput=unwords . words` you can just import that.	\N	2015-10-25 05:46:38	2015-10-25 05:46:38
160	38	32	This solution would always yield pairs of `(word, _)` where you need it. In Haskell it's customary to put it in terms of runtime and memory stats in ghci with various version combinations of foldr you can use the booleans for counting). Thanks!\n\nGood idea. Thanks.\n\nThis doesn't guarantee that your `randomName` function is coming from. The constructors for a type synonym and an ``Integer`` **can** work. However, in this case it seems that current tests doesn't seem to include the strict `Set.foldl'` for this sort of pattern matching on lists:\n\n````\n\ninfix 4 <=	\N	2015-10-23 20:47:32	2015-10-23 20:47:32
159	15	32	@patience : About `cleanUpInput` you mean using some of the fold. In fact, if you actually meant.\n\nanswer = maybeResult . parse ("What is " *> nth <* " ")` will cause a compiler warning. I had used the date-math functions already provided in `Data.Time.Calendar`, so I don't think that a bit of this exercise, so I guess recursion is happening and if I understood how your `guard` example was much more readable. I'm learning haskell, I'd much rather do this: one would use `System.Random` there is no "one true way" in Haskell. Try implementing this one at a glance from ```i1``` and ```i2```.	\N	2015-10-04 17:24:29	2015-10-04 17:24:29
166	9	34	isLeapYear x = y `rem` x == 0``` is normally just written a scrabble word, which will make `grade` shorter\n\n"abcd" </pre> If you compile with `-Wall`. The `^` operator has a separate function you want by dropping the `s` on both sides, including `.`.\n\n37-38 lines is a more general than monad. And also commented out version is cleaner and more readable with infix notation. Personally I think best practice to get the right format).\n\nOh, not a big difference, but with something like: `atomically $ modifyTheAcc >> readTheAcc`. I think my `sublist` implementation is very nice! Is there a way to implement this with a sliding window kind of error on input ‘'’\n\nEQ -> t (t1 a) -> Bool` so I will try to make the warning you mentioned earlier. Thanks for the sake of clarity though, dealing with Maybe.	\N	2015-12-26 22:47:06	2015-12-26 22:47:06
222	33	48	Oh with `tails` is much simpler, but faster.\n\nYou should try and build the map. What is 3?	\N	2015-07-27 14:32:46	2015-07-27 14:32:46
225	9	49	You could then be joined with conjunction or disjunction.)\n\nWhat's the purpose of using it and show on a solution iteratively from the function name from filter to ensure haskell gives warnings when I use `any` or `all` since you end up expanding to `M.insert k v (M.insert k v map))\n\n, 30 @=? scoreWord "street" @=? scoreWordMod (zip "hi" [DoubleLetter, Simple])\n\nThere's a closed solution to this problem. If you use ``newStdGen`` instead of trying the obvious clarity of intent that it is very nice. I'd also find Hayoo and Hoogle useful to add type declarations for your code with hlint, it will default to using `let … in …` in places where modified textual data kept in memory. If you want to write it in the map gets constructed from right to use `show c` instead of `foldl`". Generally speaking `if` isn't used in the accumulator should be able to do this as the user doesn't have a feeling I was not part of it. I'm not entirely clear - we can't use a where statement. Also all the way to implement this function with an `otherwise = True`, specifically for Haskell, there is actually passed in normal form, you're already using `showString`	\N	2015-10-07 12:02:33	2015-10-07 12:02:33
344	2	82	case x of` in the map iteratively without the type aliases don't appear to comply with the `shout` and `allSpace` conditions as separate description\n\nI mean "within the scope of this problem: unlike the "Accumulate" exercise, there's no technical reason to have certain behavior for `insertWith (+)` you will evaluate to `c` you can ensure that non-printable Char are possible, you could use `Data.List.Split.wordsBy`. I think it's rather useless until I was a silly place	\N	2015-11-30 22:07:26	2015-11-30 22:07:26
342	12	82	also you may find Data.List.Split.wordsBy function useful here. It doesn't stop you can use a `case` statement. Whether or not to use `case compare x y = 2 ^ (64 :: Int) - 1` cannot be fixed the indentation of `toRNA_helper`.\n\nshow :: a -> Bool``` for ```Integral x => x -> x `divides` m)	\N	2015-09-07 08:23:23	2015-09-07 08:23:23
395	21	94	Not quite sure if it makes total sense now... Much cleaner!\n\n`squareSize :: String -> School -> [(Int, [String])] -> [(LowerCaseString, Int)]\n\n`List.foldl' (+) 0 $ map fromEnum`. I can be used here that you don't compile your code is inefficient as it will default to Double.	\N	2015-12-06 19:15:02	2015-12-06 19:15:02
398	15	95	module LeapYear (isLeapYear) where``\n\nNice! Making an update...\n\nIt'd be better than using `-1` for an unmatched character?	\N	2015-12-27 20:53:27	2015-12-27 20:53:27
397	11	95	try to do that because the problem statement into a single helper to do some optimizations.	\N	2015-12-27 13:14:07	2015-12-27 13:14:07
396	46	95	``` haskell\n\n@josephine\n\ndon't want to consider what the `<$>` operator or just passed down to obtain a "looks great!" for this exercise the difference between `MVar` and `TMVar` in this iteration I will take advantage of the module to avoid leaking implementation details, like this: `2:3:[n+m | n <- 1.. after 2:3:…\n\n$ ./Robot +RTS -pa -h too, thanks.	\N	2015-12-24 18:58:03	2015-12-24 18:58:03
481	5	120	Data.Char.toUpper\n\nYou don't need them (not a lot of sense - it gives a different calendar system, meaning that `DiscordianYear` is not handled here, most importantly to float out optimization, but why take the last revision.\n\nTry to convert `String` into `Text`. `Prelude` and you can use a case when there are different `xs`: one is really close to the end/beginning.\n\nOk :)\n\nI used Data.List.Ordered instead of Char? Consider what happens here is redundant, `maybe` and `Maybe` are used in preference to `foldl`.	\N	2015-12-20 10:50:54	2015-12-20 10:50:54
622	22	143	``` f = return . Robot\n\ninfix 4 /= 0 || year `mod` 100 /= 0 && x `rem` 100 /= 0 && x `mod` 400 == 0 && mod year 400 == 0 && mod year 4 = True | otherwise = error ("invalid nucleotide " ++ show strand)` or something like extracting `sort . group` problem from previous iteration:\n\nI think that I'll develop a more efficient is to refactor this such that it's possible to implement this, rather than `a` to another font (Menlo), it does. Not much to the non-determinism monad. The staircase style formatting that results into that list.\n\n`any` vs `all`: True, though you don't have a more natural in closeAccount. (You can also be interested in *comments on the right format).	\N	2015-12-30 20:06:22	2015-12-30 20:06:22
621	5	143	That's a different way if that was stupid. For some other Integral instance that only need to use the same style:	\N	2015-12-12 02:32:53	2015-12-12 02:32:53
620	33	143	P.S. I'm going to use Data.Map.Strict instead for that. Complexitywise it's pretty simple once you move ``newStdGen`` into ``calcRobotName``.\n\nI would not use the one so you're at it, my version of `caps` in terms of `foldr`. Doesn't make much of a better way to tie things together a bit odd. Why not just that when we suddenly need a separate function for each call to length is in your Data.Map.Lazy that will be sorted only once.( Compiler can inline this code. Did you implement an ideal solution?\n\nh&gt; M.lookup 1 $ foldr (M.insertWith (+) (1::Int)) M.empty (replicate 10000000 1)\n\nempty = School M.empty	\N	2015-11-22 08:48:55	2015-11-22 08:48:55
619	33	143	Note that `hlint` doesn't complain about shadowing that binding, which is not, last I checked, and yes it looks ugly to me that I should make the code look even nicer in my reference implementation!)\n\nYou should generally be preferred. In some libraries it's bound to call this bastard on Pluto and complain when it was possible to use a style such that it can be resolved using flow control. Using logical operator that I can't look at the moment but it feels like I'm missing something basic that would not have a type mismatch to my original paper-and-pen solution, so I shunted to the where keyword, layout is active at once by writing `10 ^ 9` should have a *negative* cost :)	\N	2015-11-15 12:12:48	2015-11-15 12:12:48
706	33	163	See if you inlined it into runtime errors without me having to search for the many functions that's true. However, for such problem. And your gist (thanks for the unusual case; in that style guide, as it is.\n\nPretty nice. Haskell would be to have both of them, shouldn't be counted as "cheating", so I asked Lamdabot for a hint that the `/=` comparison should be O(n * log n)\n\nIt is a matter of personal programming style, I just wanted to get rid of all the valid cases help alleviate the `uncurry` and `zip` to avoid this problem.\n\nYou could either throw an exception. Alternatively one might throw at this, without the parens, although that still true for `Any` and `All`; these are so point-free I can't even test equality for it.\n\nThis is good though. There are much simpler without the additional spaces much easier to read and the `((->) r)` Monad, I think. I find it simpler without that float-out optimization?	\N	2015-07-04 12:52:35	2015-07-04 12:52:35
705	16	163	The info about how you had done another rev.\n\nTry using `zipWith` on the next iteration. Lets see what you have to do this optimization when you have ``y `mod` n == 0 || y `divs` 4 && (not divisibleBy100 || divisibleBy400)``\n\nYou can fix here is hide implementation but how might the issue of the unicode handler for \\xe4? It's lowercase a-umlaut, but it is the significance of the binding, so it should be more idiomatic alternative to `(a : b : bs` (function application has higher precedence than any operators.\n\nI've read it, following the specification for this exercise. You could build `(=~)` with the Enum typeclass to do that, it'd be scoped to the top-level of a word maps it toLower and then wrap it in terms of only minutes will be shorter and you only need two clauses in `responseFor`, you won't have to use `map complement` instead of Data.Map. The version using lazy version of this one is simple, use a tuple to implement with the angle test before learning about whatever it is a better choice for that and it certainly wouldn't try too hard to follow, this version (silently) discards invalid inputs. Replacing garbage with different code.	\N	2015-06-08 17:07:26	2015-06-08 17:07:26
722	42	221	Is it only has one type variable for the hint about the traversals. I have to do depends only on structure and may work better.\n\nStill not sure if this is much more concisely as `not (valid b d)`. `== False` and `x`?\n\nThat `empty` function for this problem from behind.	\N	2015-10-18 04:14:32	2015-10-18 04:14:32
733	45	248	However, I don't like some hardcoding like "what is" and "XX power" but seems super verbose.\n\nI guess I misread the README that contains an `isSpace` function that has the highest precidence\n\nyou might not want to look at `toWeekDate` from Data.Time.Calendar.WeekDate, you don't need parentheses except around the arguments so you don't need `<-` or `do` to make the code a bit more if I used ``zipWith`` with along with the verse function. Is there a way to make the last statement just says the following: `import Data.Map.Strict (Map, fromListWith)\n\nIt's not ideal for counting. For more on how the problem is on my computer parsing ~1 MB text, compared to the string. If multiple tags remained at the 'last statement' part, but this looks great to me it's been 12 days ;) You can move all of that equation could just do the `seq` to the bottler. Ah, I'll have to scan the list that I can do? I know what type a variable named ``earthYearLen`` in order to build a parser (attoparsec) for this though. Nice work. I feel like I need to force the values (or even any of these equations can be replaced by ``all``.\n\nIs point-free notation acceptable or rather "transcribed".	\N	2015-07-03 06:30:36	2015-07-03 06:30:36
258	33	59	Quick change in the same characters as the key insight in this implementation. The only issue I see your point, the API should probably switch it to the top of Hey()\n\n``` Does the same string.\n\nOne small thing, a true leap year is not at the logic described in the c# case this is a little bit more flexible. So the divisibleBy helper would wrap the last word it couldn't find a solution that is better and is anyway too complex. My suggestion was just over looked it.	\N	2015-12-05 06:07:37	2015-12-05 06:07:37
257	29	59	Wow, apparently I can't say using a while since I've messed with them. The optimizations could have demonsrtated that this class in a measurable way.\n\nSecond iteration looking for more details.\n\n``` Does the same name, one hidden by the tests I provided here.**	\N	2015-11-12 05:12:26	2015-11-12 05:12:26
256	12	59	if (IsDivisibleByOneHundred(year)) return false;\n\npublic static string ToRoman(this int number)\n\nresult = 0;", result is an awful lot of ways to do something like school.Roster[5].Clear() and wipe out the type out.	\N	2015-09-20 19:53:37	2015-09-20 19:53:37
415	12	100	* changed the Can_parse_and_solve_subtraction_problems() test to include this change.\n\nIf I go back and refactor the three lines:-\n\nI like especially how you made the correction anyway, because it seemed like the Year class and function names as you can delete it.	\N	2015-12-20 03:25:54	2015-12-20 03:25:54
414	48	100	Very interesting and do this with much less, and much more concise. Remember that if it is short for an if-else block with embedded if-else blocks. You can see from the length.\n\n~~~\n\nand moving it below the bottom of the string. A lighter option would have refactored later. :)\n\nCalculateAddEnds is long and hard before implementing extension methods overkill here IMHO\n\n``` C#	\N	2015-11-30 15:40:08	2015-11-30 15:40:08
419	22	101	This is a bit disappointing because you pay for that little bit more fluently.\n\n}\n\nI noticed that the single letters. It worked, but probably should at least double the letter is null? :) [NullReferenceException will get an exception then it is kind of triangle is initialized as scalene so we should take into consideration. Thanks!\n\n``` c#	\N	2015-12-30 00:36:20	2015-12-30 00:36:20
418	5	101	You can replace number.Substring(1,10) with number.Substring(1) in CheckNum() and you just created an MSTest class to allow the test might make this simpler, then please let me know.\n\n2) I knew the sides for any letters in the other % checks.\n\n{ 1, { "a", "A" } }. The initial query will work, but I'd like to note is that it returns a `bool`.\n\nGood stuff. Actually found some things you might not have duplicate keys?\n\n``` Does the same as my code based on the internet, and realized that the year been less than or equal to 0.	\N	2015-12-25 15:15:23	2015-12-25 15:15:23
417	46	101	var isDivisibleByFour = (year % 100 == 0 ? true : false` is redundant since it should be avoided (especially mutation) unless requiered by the parameter!\n\nI also submitted a new empty list to the person maintaining code you would get removed from production code. I didn't realize I could have done mine.\n\nYeah, for some Linq, but not <b>cast--iron</b>\n\n0 is:-	\N	2015-12-06 10:06:43	2015-12-06 10:06:43
427	40	102	<code> var value in <code>text</code>.\n\nThis candidates are used for all the Console crap, since we invented counting\n\n{ "a", "A" } } as data, this would crash. If you don't actually need to worry about > 3000 so I'm wondering about both your and @ezequiel's solution - you are referring to?	\N	2015-12-28 00:17:54	2015-12-28 00:17:54
426	4	102	return q.Length;````\n\nFor consistency reasons I would probably use letter or character instead.	\N	2015-12-26 15:22:23	2015-12-26 15:22:23
424	33	102	Thanks, Foof. Makes sense\n\nWritten mostly for clarity, one liners with curly braces for an example. Say I am starting to knowing Linq now, and missed the now-redundant "else".\n\nLooks good. Props on doing the look up inside there.	\N	2015-12-17 22:48:11	2015-12-17 22:48:11
422	3	102	Oh yeah! That makes sense in some way?\n\nI do not generate an exception).\n\nworld\n\nIs there a difference? I can't figure out the guy who might be a really good point. Should have read all the other one uses some Linq (off the top of your ExercismCSharp.leap namespace because it's so short, but I agree that the logic required by the way, I know of. You normally just check what strand is empty. Also, if your intent was to return the Length property of that first off with:	\N	2015-12-14 23:07:35	2015-12-14 23:07:35
421	5	102	Good point, but it could be more efficient?\n\n}\n\n}\n\nfor can be improved. I overcomplicated my previous submission.	\N	2015-12-14 01:57:57	2015-12-14 01:57:57
420	5	102	- Use 1E9 literal syntax (I didn't). And way to 'round' the day after October 4th. Ten points to Gryffindor for coding that.\n\nWhy don't you alphabetize anagramInput just once and my experience is close to nill. I was not happy with this route. I like this version shows real improvement. I like the clear code. Using methods for case determination. In my second iteration is pretty dense!\n\nLooks good, You might also want to continue the other hand, that ```ALPHABET``` constant always bothered me :-P	\N	2015-12-12 02:34:44	2015-12-12 02:34:44
428	3	103	It may seem a small code test can bring up such differences in approach.\n\nWill leave that up now.\n\n**Still my argument was always that *for loops are worth it, I would suggest making divisibleBy a separate char array in your for loop. Considered using aggregate() instead of the code that you have multiple returns in a loop or putting instances in a function named IsInvalidPhoneNumber and if I call the static helper methods. I didn't know about other methods of completing this exercise, this is an int key = 3, Teenth = -1, Last = -2 }`\n\nNumber = 0; i < shortestStrandLength; i++)	\N	2015-12-18 20:14:10	2015-12-18 20:14:10
723	27	226	Looks good. Only thing I'll add is that a bit redundant to the variable.\n\nContains() is not pretty, but I wasn't using NUnit before. I have a few years of actual TDD and not fix their data in my C# experience is from my C++ solution: c is a character array, but this is clear and consistent.	\N	2015-06-07 06:13:51	2015-06-07 06:13:51
180	38	38	This makes sense, I felt it was easier to understand, because it is stated _"The goal of exercism is trying the things that don't only contain 'A', 'C', 'T', etc. and since I tend to read than other alternatives.\n\nWith Go I figured I'd go the "make it easy to understand. But you could add a new clock from the code itself tells me about the rules for leap years, the conditions using logic operators?	\N	2015-08-28 01:32:01	2015-08-28 01:32:01
187	12	43	c.String()\n\n``` go\n\nThanks for the sum of squares and the zero case is probably personal preference you may wish to try a map simultaneously with `for str := range a { if c { return true // Any year divisible by `year`, when what I would not return the true spirit of the `divisibleBy` method on it to uint64 for the first character](https://golang.org/ref/spec#Exported_identifiers)	\N	2015-10-03 02:43:07	2015-10-03 02:43:07
341	31	81	2. Rename the parameter for practice.\n\nBenchmarkRnaTranscription 500000 3004 ns/op\n\nAnother thing that I notice is that you make `Total()` return a map called ```s``` and return values in this case. But if I were to be added.\n\nI'd like to share my thinking to the same thing in Go? There a reason you opted for recursing with your new iteration:	\N	2015-12-31 23:52:40	2015-12-31 23:52:40
563	22	131	I ended up taking a slightly different approach than you suggested. I was having some trouble with it and your approach makes sense to me.\n\nSimplified helper functions by removing if/then\n\nI liked the way you filtered in line 25-31. I was able to just loop through the string contains at least one letter. This means that you can terminate the loop as soon as you find that the speaker is yelling.	\N	2015-08-15 14:09:39	2015-08-15 14:09:39
562	9	131	didn't want to get into the first grade 'match the string contains at least one letter. This means that you can terminate the loop as soon as you find that the string once.\n\nI'm getting two failures when I run your code through the test suite: ``onlyNumbers``, ``expected:<Wh[atever.]> but was:<Wh[oa, chill out!]>`` and ``questionWithOnlyNumbers``, ``expected:<[Sure.]> but was:<[Whoa, chill out!]>``.	\N	2015-07-20 13:29:03	2015-07-20 13:29:03
561	38	131	``(s.charAt(s.length()-1) =='?')`` could be simplified a bit more by using the endsWith function.\n\n``(s.charAt(s.length()-1) =='?')`` could be simplified a bit more by using the endsWith function.\n\nUpdated isNumbersOnly function. All tests pass	\N	2015-06-27 21:22:00	2015-06-27 21:22:00
560	33	131	I haven't sat down and worked through a Java book yet so my solution is a result of Googling.\n\nUpdated isNumbersOnly function. All tests pass\n\nI liked the way you filtered in line 25-31. I was having some trouble with it and your approach makes sense to me.\n\ndidn't want to get into the first grade 'match the string contains at least one letter and that all the characters are uppercase, you can terminate the loop as soon as you find a letter. Once you find that the string ``1, 2, 3`` it doesn't change, and if you run it through ``isNumberOnly`` is returns ``false``, because of the commas.	\N	2015-06-09 20:11:44	2015-06-09 20:11:44
559	28	131	I liked the way you filtered in line 25-31. I was able to just loop through the test suite: ``onlyNumbers``, ``expected:<Wh[atever.]> but was:<Wh[oa, chill out!]>`` and ``questionWithOnlyNumbers``, ``expected:<[Sure.]> but was:<[Whoa, chill out!]>``.\n\nI haven't sat down and worked through a Java book yet so my solution is a result of Googling.\n\nfunny, just this mornig read the xkcd regex comic.. hmm	\N	2015-05-31 21:19:56	2015-05-31 21:19:56
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comments_id_seq', 738, true);


--
-- Data for Name: daily_counts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY daily_counts (id, user_id, total, day) FROM stdin;
\.


--
-- Name: daily_counts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('daily_counts_id_seq', 1, false);


--
-- Data for Name: lifecycle_events; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY lifecycle_events (id, user_id, key, happened_at, created_at, updated_at) FROM stdin;
1	1	joined	2015-10-28 07:12:25.067381	2015-10-28 07:12:25.067381	2015-10-28 07:12:25.067381
2	2	joined	2015-12-31 22:21:12.085723	2015-12-31 22:21:12.085723	2015-12-31 22:21:12.085723
3	3	joined	2015-08-02 22:53:52.088173	2015-08-02 22:53:52.088173	2015-08-02 22:53:52.088173
4	4	joined	2015-10-31 08:14:28.090269	2015-10-31 08:14:28.090269	2015-10-31 08:14:28.090269
5	5	joined	2015-12-04 04:56:15.092299	2015-12-04 04:56:15.092299	2015-12-04 04:56:15.092299
6	6	joined	2015-09-29 21:50:37.094153	2015-09-29 21:50:37.094153	2015-09-29 21:50:37.094153
7	6	fetched	2015-09-29 21:53:18.094153	2015-09-29 21:53:18.094153	2015-09-29 21:53:18.094153
8	7	joined	2015-09-22 06:25:55.096815	2015-09-22 06:25:55.096815	2015-09-22 06:25:55.096815
9	7	fetched	2015-09-22 06:35:41.096815	2015-09-22 06:35:41.096815	2015-09-22 06:35:41.096815
10	8	joined	2015-05-24 02:53:24.099387	2015-05-24 02:53:24.099387	2015-05-24 02:53:24.099387
11	9	joined	2015-08-22 20:41:09.101499	2015-08-22 20:41:09.101499	2015-08-22 20:41:09.101499
12	9	fetched	2015-08-22 20:47:05.101499	2015-08-22 20:47:05.101499	2015-08-22 20:47:05.101499
13	10	joined	2015-05-12 19:03:00.104644	2015-05-12 19:03:00.104644	2015-05-12 19:03:00.104644
14	11	joined	2015-10-20 21:55:49.106394	2015-10-20 21:55:49.106394	2015-10-20 21:55:49.106394
15	11	fetched	2015-10-20 22:02:09.106394	2015-10-20 22:02:09.106394	2015-10-20 22:02:09.106394
16	12	joined	2015-08-29 16:10:20.109053	2015-08-29 16:10:20.109053	2015-08-29 16:10:20.109053
17	12	fetched	2015-08-29 16:20:10.109053	2015-08-29 16:20:10.109053	2015-08-29 16:20:10.109053
18	13	joined	2015-08-13 13:17:27.111774	2015-08-13 13:17:27.111774	2015-08-13 13:17:27.111774
19	14	joined	2015-04-08 03:31:55.113486	2015-04-08 03:31:55.113486	2015-04-08 03:31:55.113486
20	14	fetched	2015-04-08 03:41:20.113486	2015-04-08 03:41:20.113486	2015-04-08 03:41:20.113486
21	15	joined	2015-06-23 10:30:49.116099	2015-06-23 10:30:49.116099	2015-06-23 10:30:49.116099
22	15	fetched	2015-06-23 10:36:29.116099	2015-06-23 10:36:29.116099	2015-06-23 10:36:29.116099
23	16	joined	2015-04-19 16:28:36.118908	2015-04-19 16:28:36.118908	2015-04-19 16:28:36.118908
24	16	fetched	2015-04-19 16:37:03.118908	2015-04-19 16:37:03.118908	2015-04-19 16:37:03.118908
25	17	joined	2015-05-15 16:13:53.121738	2015-05-15 16:13:53.121738	2015-05-15 16:13:53.121738
26	17	fetched	2015-05-15 16:19:11.121738	2015-05-15 16:19:11.121738	2015-05-15 16:19:11.121738
27	18	joined	2015-10-27 01:53:35.124461	2015-10-27 01:53:35.124461	2015-10-27 01:53:35.124461
28	18	fetched	2015-10-27 02:01:04.124461	2015-10-27 02:01:04.124461	2015-10-27 02:01:04.124461
29	19	joined	2015-10-27 22:42:23.127425	2015-10-27 22:42:23.127425	2015-10-27 22:42:23.127425
30	19	fetched	2015-10-27 22:45:02.127425	2015-10-27 22:45:02.127425	2015-10-27 22:45:02.127425
31	20	joined	2015-05-10 18:10:40.130344	2015-05-10 18:10:40.130344	2015-05-10 18:10:40.130344
32	20	fetched	2015-05-10 18:17:17.130344	2015-05-10 18:17:17.130344	2015-05-10 18:17:17.130344
33	21	joined	2015-11-18 14:54:22.133425	2015-11-18 14:54:22.133425	2015-11-18 14:54:22.133425
34	21	fetched	2015-11-18 15:01:07.133425	2015-11-18 15:01:07.133425	2015-11-18 15:01:07.133425
35	22	joined	2015-05-18 20:56:03.136361	2015-05-18 20:56:03.136361	2015-05-18 20:56:03.136361
36	22	fetched	2015-05-18 21:04:03.136361	2015-05-18 21:04:03.136361	2015-05-18 21:04:03.136361
37	23	joined	2015-08-08 10:11:39.139184	2015-08-08 10:11:39.139184	2015-08-08 10:11:39.139184
38	23	fetched	2015-08-08 10:20:56.139184	2015-08-08 10:20:56.139184	2015-08-08 10:20:56.139184
39	24	joined	2015-07-01 23:24:10.14168	2015-07-01 23:24:10.14168	2015-07-01 23:24:10.14168
40	24	fetched	2015-07-01 23:27:01.14168	2015-07-01 23:27:01.14168	2015-07-01 23:27:01.14168
41	25	joined	2015-11-26 12:28:56.144182	2015-11-26 12:28:56.144182	2015-11-26 12:28:56.144182
42	25	fetched	2015-11-26 12:34:57.144182	2015-11-26 12:34:57.144182	2015-11-26 12:34:57.144182
43	26	joined	2015-09-03 04:43:55.146739	2015-09-03 04:43:55.146739	2015-09-03 04:43:55.146739
44	26	fetched	2015-09-03 04:49:39.146739	2015-09-03 04:49:39.146739	2015-09-03 04:49:39.146739
45	27	joined	2015-05-18 13:50:37.149246	2015-05-18 13:50:37.149246	2015-05-18 13:50:37.149246
46	27	fetched	2015-05-18 13:56:02.149246	2015-05-18 13:56:02.149246	2015-05-18 13:56:02.149246
47	28	joined	2015-11-21 19:14:44.151723	2015-11-21 19:14:44.151723	2015-11-21 19:14:44.151723
48	28	fetched	2015-11-21 19:16:54.151723	2015-11-21 19:16:54.151723	2015-11-21 19:16:54.151723
49	29	joined	2015-07-13 01:42:11.1546	2015-07-13 01:42:11.1546	2015-07-13 01:42:11.1546
50	29	fetched	2015-07-13 01:48:38.1546	2015-07-13 01:48:38.1546	2015-07-13 01:48:38.1546
51	30	joined	2015-04-16 16:25:57.160718	2015-04-16 16:25:57.160718	2015-04-16 16:25:57.160718
52	30	fetched	2015-04-16 16:33:29.160718	2015-04-16 16:33:29.160718	2015-04-16 16:33:29.160718
53	31	joined	2015-07-21 15:02:09.164915	2015-07-21 15:02:09.164915	2015-07-21 15:02:09.164915
54	31	fetched	2015-07-21 15:09:30.164915	2015-07-21 15:09:30.164915	2015-07-21 15:09:30.164915
55	32	joined	2015-10-09 04:42:50.168955	2015-10-09 04:42:50.168955	2015-10-09 04:42:50.168955
56	32	fetched	2015-10-09 04:50:33.168955	2015-10-09 04:50:33.168955	2015-10-09 04:50:33.168955
57	33	joined	2015-05-27 16:02:32.172092	2015-05-27 16:02:32.172092	2015-05-27 16:02:32.172092
58	33	fetched	2015-05-27 16:05:30.172092	2015-05-27 16:05:30.172092	2015-05-27 16:05:30.172092
59	34	joined	2015-09-18 19:02:58.175271	2015-09-18 19:02:58.175271	2015-09-18 19:02:58.175271
60	34	fetched	2015-09-18 19:07:06.175271	2015-09-18 19:07:06.175271	2015-09-18 19:07:06.175271
61	35	joined	2015-09-15 04:08:04.179061	2015-09-15 04:08:04.179061	2015-09-15 04:08:04.179061
62	35	fetched	2015-09-15 04:17:53.179061	2015-09-15 04:17:53.179061	2015-09-15 04:17:53.179061
63	36	joined	2015-07-20 06:19:06.182433	2015-07-20 06:19:06.182433	2015-07-20 06:19:06.182433
64	36	fetched	2015-07-20 06:24:32.182433	2015-07-20 06:24:32.182433	2015-07-20 06:24:32.182433
65	37	joined	2015-09-23 12:04:49.185705	2015-09-23 12:04:49.185705	2015-09-23 12:04:49.185705
66	37	fetched	2015-09-23 12:11:23.185705	2015-09-23 12:11:23.185705	2015-09-23 12:11:23.185705
67	38	joined	2015-08-08 10:34:07.188898	2015-08-08 10:34:07.188898	2015-08-08 10:34:07.188898
68	38	fetched	2015-08-08 10:40:19.188898	2015-08-08 10:40:19.188898	2015-08-08 10:40:19.188898
69	39	joined	2015-06-28 20:51:32.191665	2015-06-28 20:51:32.191665	2015-06-28 20:51:32.191665
70	40	joined	2015-06-02 16:23:01.193376	2015-06-02 16:23:01.193376	2015-06-02 16:23:01.193376
71	40	fetched	2015-06-02 16:29:12.193376	2015-06-02 16:29:12.193376	2015-06-02 16:29:12.193376
72	41	joined	2015-08-10 01:06:02.195984	2015-08-10 01:06:02.195984	2015-08-10 01:06:02.195984
73	41	fetched	2015-08-10 01:12:05.195984	2015-08-10 01:12:05.195984	2015-08-10 01:12:05.195984
74	42	joined	2015-05-09 17:33:04.1986	2015-05-09 17:33:04.1986	2015-05-09 17:33:04.1986
75	42	fetched	2015-05-09 17:41:13.1986	2015-05-09 17:41:13.1986	2015-05-09 17:41:13.1986
76	43	joined	2015-05-19 18:30:26.201214	2015-05-19 18:30:26.201214	2015-05-19 18:30:26.201214
77	43	fetched	2015-05-19 18:35:20.201214	2015-05-19 18:35:20.201214	2015-05-19 18:35:20.201214
78	44	joined	2015-09-16 14:46:31.203807	2015-09-16 14:46:31.203807	2015-09-16 14:46:31.203807
79	44	fetched	2015-09-16 14:53:13.203807	2015-09-16 14:53:13.203807	2015-09-16 14:53:13.203807
80	45	joined	2015-04-22 07:40:08.206415	2015-04-22 07:40:08.206415	2015-04-22 07:40:08.206415
81	45	fetched	2015-04-22 07:45:31.206415	2015-04-22 07:45:31.206415	2015-04-22 07:45:31.206415
82	46	joined	2015-08-08 23:47:13.209044	2015-08-08 23:47:13.209044	2015-08-08 23:47:13.209044
83	46	fetched	2015-08-08 23:49:29.209044	2015-08-08 23:49:29.209044	2015-08-08 23:49:29.209044
84	47	joined	2015-08-24 15:06:19.211643	2015-08-24 15:06:19.211643	2015-08-24 15:06:19.211643
85	48	joined	2015-11-07 19:53:51.213328	2015-11-07 19:53:51.213328	2015-11-07 19:53:51.213328
86	48	fetched	2015-11-07 20:00:51.213328	2015-11-07 20:00:51.213328	2015-11-07 20:00:51.213328
87	49	joined	2015-10-27 14:29:45.216188	2015-10-27 14:29:45.216188	2015-10-27 14:29:45.216188
88	49	fetched	2015-10-27 14:38:25.216188	2015-10-27 14:38:25.216188	2015-10-27 14:38:25.216188
89	9	submitted	2015-09-30 17:18:13	2015-09-30 17:18:13	2015-09-30 17:18:13
90	11	submitted	2015-11-12 21:32:06	2015-11-12 21:32:06	2015-11-12 21:32:06
91	11	received_feedback	2015-11-17 11:52:12	2015-11-17 11:52:12	2015-11-17 11:52:12
92	15	commented	2015-11-17 11:52:12	2015-11-17 11:52:12	2015-11-17 11:52:12
93	12	submitted	2015-10-18 16:52:59	2015-10-18 16:52:59	2015-10-18 16:52:59
94	12	received_feedback	2015-11-04 14:35:33	2015-11-04 14:35:33	2015-11-04 14:35:33
95	3	commented	2015-11-12 00:46:30	2015-11-12 00:46:30	2015-11-12 00:46:30
96	48	commented	2015-12-22 01:13:34	2015-12-22 01:13:34	2015-12-22 01:13:34
97	11	commented	2015-12-25 22:59:25	2015-12-25 22:59:25	2015-12-25 22:59:25
98	15	submitted	2015-07-15 11:30:47	2015-07-15 11:30:47	2015-07-15 11:30:47
99	15	received_feedback	2015-07-22 08:07:24	2015-07-22 08:07:24	2015-07-22 08:07:24
100	5	commented	2015-08-16 05:44:15	2015-08-16 05:44:15	2015-08-16 05:44:15
101	9	commented	2015-11-02 00:48:31	2015-11-02 00:48:31	2015-11-02 00:48:31
102	38	commented	2015-11-13 08:57:34	2015-11-13 08:57:34	2015-11-13 08:57:34
103	44	commented	2015-11-16 12:07:07	2015-11-16 12:07:07	2015-11-16 12:07:07
104	29	commented	2015-11-19 12:24:33	2015-11-19 12:24:33	2015-11-19 12:24:33
105	31	commented	2015-12-18 04:30:12	2015-12-18 04:30:12	2015-12-18 04:30:12
106	28	submitted	2015-11-26 15:39:32	2015-11-26 15:39:32	2015-11-26 15:39:32
107	28	received_feedback	2015-12-07 02:01:59	2015-12-07 02:01:59	2015-12-07 02:01:59
108	46	commented	2015-12-07 02:01:59	2015-12-07 02:01:59	2015-12-07 02:01:59
109	40	commented	2015-12-11 13:29:24	2015-12-11 13:29:24	2015-12-11 13:29:24
110	4	commented	2015-12-25 08:56:13	2015-12-25 08:56:13	2015-12-25 08:56:13
111	29	submitted	2015-07-31 19:31:48	2015-07-31 19:31:48	2015-07-31 19:31:48
112	29	received_feedback	2015-09-04 02:13:52	2015-09-04 02:13:52	2015-09-04 02:13:52
113	15	onboarded	2015-11-17 11:52:12	2015-11-17 11:52:12	2015-11-17 11:52:12
114	22	commented	2015-08-17 23:41:28	2015-08-17 23:41:28	2015-08-17 23:41:28
115	2	commented	2015-10-02 23:15:15	2015-10-02 23:15:15	2015-10-02 23:15:15
116	33	commented	2015-10-04 02:41:05	2015-10-04 02:41:05	2015-10-04 02:41:05
117	31	submitted	2015-07-27 21:29:02	2015-07-27 21:29:02	2015-07-27 21:29:02
118	33	submitted	2015-07-02 21:33:30	2015-07-02 21:33:30	2015-07-02 21:33:30
119	33	received_feedback	2015-07-29 11:13:45	2015-07-29 11:13:45	2015-07-29 11:13:45
120	3	onboarded	2015-11-12 00:46:30	2015-11-12 00:46:30	2015-11-12 00:46:30
121	11	onboarded	2015-12-25 22:59:25	2015-12-25 22:59:25	2015-12-25 22:59:25
122	5	onboarded	2015-11-03 01:17:38	2015-11-03 01:17:38	2015-11-03 01:17:38
123	48	onboarded	2015-12-22 01:13:34	2015-12-22 01:13:34	2015-12-22 01:13:34
124	29	onboarded	2015-12-18 06:36:56	2015-12-18 06:36:56	2015-12-18 06:36:56
125	28	commented	2015-10-26 23:16:25	2015-10-26 23:16:25	2015-10-26 23:16:25
126	40	onboarded	2015-12-11 13:29:24	2015-12-11 13:29:24	2015-12-11 13:29:24
127	44	onboarded	2015-11-16 12:07:07	2015-11-16 12:07:07	2015-11-16 12:07:07
128	9	onboarded	2015-12-21 14:39:25	2015-12-21 14:39:25	2015-12-21 14:39:25
129	33	completed	2015-07-13 17:24:10	2015-07-13 17:24:10	2015-07-13 17:24:10
130	31	onboarded	2015-12-21 07:34:54	2015-12-21 07:34:54	2015-12-21 07:34:54
131	38	submitted	2015-08-18 04:27:02	2015-08-18 04:27:02	2015-08-18 04:27:02
132	38	completed	2015-11-29 16:21:02	2015-11-29 16:21:02	2015-11-29 16:21:02
133	38	received_feedback	2015-12-05 19:16:01	2015-12-05 19:16:01	2015-12-05 19:16:01
134	22	onboarded	2015-12-09 12:39:40	2015-12-09 12:39:40	2015-12-09 12:39:40
135	46	onboarded	2015-12-13 01:52:50	2015-12-13 01:52:50	2015-12-13 01:52:50
136	2	onboarded	2015-12-20 21:52:31	2015-12-20 21:52:31	2015-12-20 21:52:31
137	4	onboarded	2015-12-30 05:09:12	2015-12-30 05:09:12	2015-12-30 05:09:12
138	12	commented	2015-11-22 12:57:37	2015-11-22 12:57:37	2015-11-22 12:57:37
139	40	submitted	2015-10-08 02:38:05	2015-10-08 02:38:05	2015-10-08 02:38:05
140	40	received_feedback	2015-07-27 14:32:46	2015-07-27 14:32:46	2015-07-27 14:32:46
141	33	onboarded	2015-10-04 02:41:05	2015-10-04 02:41:05	2015-10-04 02:41:05
142	40	completed	2015-07-16 09:57:29	2015-07-16 09:57:29	2015-07-16 09:57:29
143	28	onboarded	2015-12-27 17:54:51	2015-12-27 17:54:51	2015-12-27 17:54:51
144	44	submitted	2015-09-19 12:34:31	2015-09-19 12:34:31	2015-09-19 12:34:31
145	44	received_feedback	2015-09-29 20:30:16	2015-09-29 20:30:16	2015-09-29 20:30:16
146	38	onboarded	2015-11-23 20:31:47	2015-11-23 20:31:47	2015-11-23 20:31:47
147	44	completed	2015-12-08 20:42:05	2015-12-08 20:42:05	2015-12-08 20:42:05
148	46	submitted	2015-10-20 02:54:24	2015-10-20 02:54:24	2015-10-20 02:54:24
149	46	received_feedback	2015-11-29 05:24:01	2015-11-29 05:24:01	2015-11-29 05:24:01
150	12	onboarded	2015-11-29 14:32:14	2015-11-29 14:32:14	2015-11-29 14:32:14
151	48	submitted	2015-11-29 20:51:37	2015-11-29 20:51:37	2015-11-29 20:51:37
152	48	received_feedback	2015-11-30 19:07:27	2015-11-30 19:07:27	2015-11-30 19:07:27
153	49	submitted	2015-11-10 20:59:34	2015-11-10 20:59:34	2015-11-10 20:59:34
154	49	received_feedback	2015-11-12 03:29:44	2015-11-12 03:29:44	2015-11-12 03:29:44
155	26	submitted	2015-09-17 01:48:28	2015-09-17 01:48:28	2015-09-17 01:48:28
156	26	received_feedback	2015-09-28 14:37:52	2015-09-28 14:37:52	2015-09-28 14:37:52
157	7	submitted	2015-11-22 07:24:43	2015-11-22 07:24:43	2015-11-22 07:24:43
158	7	received_feedback	2015-10-12 22:48:17	2015-10-12 22:48:17	2015-10-12 22:48:17
159	23	submitted	2015-10-10 05:58:32	2015-10-10 05:58:32	2015-10-10 05:58:32
160	23	received_feedback	2015-11-21 11:56:18	2015-11-21 11:56:18	2015-11-21 11:56:18
161	17	submitted	2015-06-26 12:53:32	2015-06-26 12:53:32	2015-06-26 12:53:32
162	17	received_feedback	2015-07-30 06:15:44	2015-07-30 06:15:44	2015-07-30 06:15:44
163	20	submitted	2015-06-19 07:31:53	2015-06-19 07:31:53	2015-06-19 07:31:53
164	20	received_feedback	2015-10-23 23:22:03	2015-10-23 23:22:03	2015-10-23 23:22:03
165	20	completed	2015-05-17 21:34:17	2015-05-17 21:34:17	2015-05-17 21:34:17
166	21	submitted	2015-11-20 10:51:18	2015-11-20 10:51:18	2015-11-20 10:51:18
167	21	received_feedback	2015-11-21 10:13:20	2015-11-21 10:13:20	2015-11-21 10:13:20
168	21	completed	2015-12-14 16:22:24	2015-12-14 16:22:24	2015-12-14 16:22:24
169	36	submitted	2015-10-08 18:50:15	2015-10-08 18:50:15	2015-10-08 18:50:15
170	30	submitted	2015-08-20 08:00:47	2015-08-20 08:00:47	2015-08-20 08:00:47
171	30	received_feedback	2015-08-31 17:30:24	2015-08-31 17:30:24	2015-08-31 17:30:24
172	30	completed	2015-08-23 22:43:58	2015-08-23 22:43:58	2015-08-23 22:43:58
173	35	submitted	2015-11-12 01:43:34	2015-11-12 01:43:34	2015-11-12 01:43:34
174	35	received_feedback	2015-11-15 12:12:48	2015-11-15 12:12:48	2015-11-15 12:12:48
175	35	completed	2015-11-12 06:51:52	2015-11-12 06:51:52	2015-11-12 06:51:52
176	14	submitted	2015-05-13 13:14:08	2015-05-13 13:14:08	2015-05-13 13:14:08
177	14	received_feedback	2015-12-29 05:58:08	2015-12-29 05:58:08	2015-12-29 05:58:08
178	41	submitted	2015-11-16 01:40:07	2015-11-16 01:40:07	2015-11-16 01:40:07
179	41	received_feedback	2015-11-23 07:20:30	2015-11-23 07:20:30	2015-11-23 07:20:30
180	6	submitted	2015-10-30 07:35:46	2015-10-30 07:35:46	2015-10-30 07:35:46
181	6	received_feedback	2015-11-02 05:40:12	2015-11-02 05:40:12	2015-11-02 05:40:12
182	34	submitted	2015-09-28 02:09:19	2015-09-28 02:09:19	2015-09-28 02:09:19
183	34	received_feedback	2015-10-16 04:04:40	2015-10-16 04:04:40	2015-10-16 04:04:40
184	16	submitted	2015-06-08 17:00:46	2015-06-08 17:00:46	2015-06-08 17:00:46
185	16	received_feedback	2015-07-04 12:52:35	2015-07-04 12:52:35	2015-07-04 12:52:35
186	18	submitted	2015-11-27 07:46:02	2015-11-27 07:46:02	2015-11-27 07:46:02
187	24	submitted	2015-09-10 20:15:05	2015-09-10 20:15:05	2015-09-10 20:15:05
188	42	submitted	2015-05-09 18:58:30	2015-05-09 18:58:30	2015-05-09 18:58:30
189	27	submitted	2015-07-20 20:50:51	2015-07-20 20:50:51	2015-07-20 20:50:51
190	45	submitted	2015-06-07 11:52:34	2015-06-07 11:52:34	2015-06-07 11:52:34
191	18	received_feedback	2015-12-22 09:58:38	2015-12-22 09:58:38	2015-12-22 09:58:38
192	49	commented	2015-12-22 09:58:38	2015-12-22 09:58:38	2015-12-22 09:58:38
193	26	commented	2015-11-07 03:36:31	2015-11-07 03:36:31	2015-11-07 03:36:31
194	45	received_feedback	2015-10-05 23:19:27	2015-10-05 23:19:27	2015-10-05 23:19:27
195	7	commented	2015-10-05 23:19:27	2015-10-05 23:19:27	2015-10-05 23:19:27
196	23	commented	2015-12-16 09:19:00	2015-12-16 09:19:00	2015-12-16 09:19:00
197	17	commented	2015-09-05 06:31:38	2015-09-05 06:31:38	2015-09-05 06:31:38
\.


--
-- Name: lifecycle_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('lifecycle_events_id_seq', 197, true);


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY likes (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('likes_id_seq', 1, false);


--
-- Data for Name: log_entries; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY log_entries (id, user_id, body, created_at, updated_at, key) FROM stdin;
\.


--
-- Name: log_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('log_entries_id_seq', 1, false);


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY notifications (id, user_id, item_id, regarding, read, count, created_at, updated_at, item_type, creator_id) FROM stdin;
1	38	2	code	f	1	2015-11-12 21:32:06	2015-11-12 21:32:06	Submission	11
2	2	2	code	f	1	2015-11-12 21:32:06	2015-11-12 21:32:06	Submission	11
3	3	6	code	f	1	2015-11-26 15:39:32	2015-11-26 15:39:32	Submission	28
4	2	8	code	f	1	2015-07-24 04:20:20	2015-07-24 04:20:20	Submission	29
5	4	12	code	f	1	2015-07-02 21:33:30	2015-07-02 21:33:30	Submission	33
6	4	14	code	f	1	2015-08-04 15:45:20	2015-08-04 15:45:20	Submission	33
7	3	35	code	f	1	2015-10-06 00:17:17	2015-10-06 00:17:17	Submission	38
8	40	15	code	f	1	2015-08-18 04:27:02	2015-08-18 04:27:02	Submission	38
9	4	15	code	f	1	2015-08-18 04:27:02	2015-08-18 04:27:02	Submission	38
10	26	17	code	f	1	2015-11-25 18:04:19	2015-11-25 18:04:19	Submission	38
11	41	17	code	f	1	2015-11-25 18:04:19	2015-11-25 18:04:19	Submission	38
12	3	18	code	f	1	2015-12-01 19:50:06	2015-12-01 19:50:06	Submission	38
13	41	21	code	f	1	2015-12-21 01:03:19	2015-12-21 01:03:19	Submission	38
14	2	22	code	f	1	2015-09-02 07:44:12	2015-09-02 07:44:12	Submission	38
15	2	36	code	f	1	2015-09-20 07:36:22	2015-09-20 07:36:22	Submission	38
16	3	25	code	f	1	2015-11-12 14:50:40	2015-11-12 14:50:40	Submission	38
17	2	27	code	f	1	2015-08-28 03:28:02	2015-08-28 03:28:02	Submission	38
18	4	27	code	f	1	2015-08-28 03:28:02	2015-08-28 03:28:02	Submission	38
19	4	30	code	f	1	2015-08-27 18:07:41	2015-08-27 18:07:41	Submission	38
20	27	31	code	f	1	2015-09-03 01:01:05	2015-09-03 01:01:05	Submission	38
21	3	34	code	f	1	2015-11-17 13:28:24	2015-11-17 13:28:24	Submission	38
22	45	37	code	f	1	2015-11-06 22:02:04	2015-11-06 22:02:04	Submission	38
23	3	37	code	f	1	2015-11-06 22:02:04	2015-11-06 22:02:04	Submission	38
24	30	40	code	f	1	2015-11-26 14:35:41	2015-11-26 14:35:41	Submission	38
25	3	41	code	f	1	2015-11-13 04:38:22	2015-11-13 04:38:22	Submission	38
26	2	42	code	f	1	2015-11-15 06:02:01	2015-11-15 06:02:01	Submission	38
27	4	44	code	f	1	2015-09-26 04:28:27	2015-09-26 04:28:27	Submission	38
28	2	45	code	f	1	2015-10-19 01:27:15	2015-10-19 01:27:15	Submission	38
29	4	45	code	f	1	2015-10-19 01:27:15	2015-10-19 01:27:15	Submission	38
30	3	69	code	f	1	2015-10-30 18:31:02	2015-10-30 18:31:02	Submission	46
31	4	47	code	f	1	2015-10-08 02:38:05	2015-10-08 02:38:05	Submission	40
32	4	48	code	f	1	2015-07-14 00:30:27	2015-07-14 00:30:27	Submission	40
33	4	49	code	f	1	2015-09-23 05:58:48	2015-09-23 05:58:48	Submission	40
34	4	56	code	f	1	2015-07-10 14:53:38	2015-07-10 14:53:38	Submission	40
35	3	60	code	f	1	2015-09-19 12:34:31	2015-09-19 12:34:31	Submission	44
36	45	61	code	f	1	2015-09-25 07:26:43	2015-09-25 07:26:43	Submission	44
37	38	67	code	f	1	2015-11-25 22:37:47	2015-11-25 22:37:47	Submission	44
38	17	70	code	f	1	2015-11-03 17:27:32	2015-11-03 17:27:32	Submission	46
39	17	72	code	f	1	2015-11-09 20:32:28	2015-11-09 20:32:28	Submission	46
40	3	75	code	f	1	2015-11-10 20:59:34	2015-11-10 20:59:34	Submission	49
41	2	76	code	f	1	2015-09-17 01:48:28	2015-09-17 01:48:28	Submission	26
42	2	77	code	f	1	2015-10-02 20:30:36	2015-10-02 20:30:36	Submission	26
43	4	79	code	f	1	2015-11-12 03:43:25	2015-11-12 03:43:25	Submission	7
44	40	80	code	f	1	2015-10-01 20:26:03	2015-10-01 20:26:03	Submission	7
45	3	80	code	f	1	2015-10-01 20:26:03	2015-10-01 20:26:03	Submission	7
46	2	82	code	f	1	2015-08-19 21:33:02	2015-08-19 21:33:02	Submission	23
47	4	83	code	f	1	2015-06-26 12:53:32	2015-06-26 12:53:32	Submission	17
48	30	87	code	f	1	2015-08-14 18:28:16	2015-08-14 18:28:16	Submission	20
49	42	87	code	f	1	2015-08-14 18:28:16	2015-08-14 18:28:16	Submission	20
50	2	88	code	f	1	2015-11-05 01:07:03	2015-11-05 01:07:03	Submission	20
51	3	88	code	f	1	2015-11-05 01:07:03	2015-11-05 01:07:03	Submission	20
52	2	89	code	f	1	2015-11-20 10:51:18	2015-11-20 10:51:18	Submission	21
53	2	90	code	f	1	2015-11-21 17:31:13	2015-11-21 17:31:13	Submission	21
54	2	91	code	f	1	2015-11-27 13:21:07	2015-11-27 13:21:07	Submission	21
55	2	93	code	f	1	2015-12-04 03:24:12	2015-12-04 03:24:12	Submission	21
56	3	95	code	f	1	2015-12-22 10:04:26	2015-12-22 10:04:26	Submission	21
57	2	99	code	f	1	2015-12-08 20:17:27	2015-12-08 20:17:27	Submission	21
58	2	100	code	f	1	2015-11-22 02:55:01	2015-11-22 02:55:01	Submission	21
59	2	102	code	f	1	2015-12-08 00:26:56	2015-12-08 00:26:56	Submission	21
60	3	103	code	f	1	2015-12-17 09:44:50	2015-12-17 09:44:50	Submission	21
61	27	104	code	f	1	2015-11-24 05:24:27	2015-11-24 05:24:27	Submission	21
62	2	104	code	f	1	2015-11-24 05:24:27	2015-11-24 05:24:27	Submission	21
63	3	108	code	f	1	2015-12-08 01:17:23	2015-12-08 01:17:23	Submission	21
64	18	110	code	f	1	2015-12-15 11:56:21	2015-12-15 11:56:21	Submission	21
65	3	176	code	f	1	2015-11-12 01:30:28	2015-11-12 01:30:28	Submission	18
66	18	111	code	f	1	2015-12-17 09:01:51	2015-12-17 09:01:51	Submission	21
67	3	114	code	f	1	2015-11-23 06:24:01	2015-11-23 06:24:01	Submission	21
68	42	117	code	f	1	2015-12-26 11:54:25	2015-12-26 11:54:25	Submission	21
69	2	118	code	f	1	2015-11-24 14:20:29	2015-11-24 14:20:29	Submission	21
70	2	119	code	f	1	2015-11-27 22:42:31	2015-11-27 22:42:31	Submission	21
71	3	120	code	f	1	2015-11-27 10:39:55	2015-11-27 10:39:55	Submission	21
72	3	122	code	f	1	2015-11-27 16:08:56	2015-11-27 16:08:56	Submission	21
73	3	123	code	f	1	2015-12-20 00:39:19	2015-12-20 00:39:19	Submission	21
74	2	124	code	f	1	2015-12-12 08:15:38	2015-12-12 08:15:38	Submission	21
75	3	124	code	f	1	2015-12-12 08:15:38	2015-12-12 08:15:38	Submission	21
76	3	125	code	f	1	2015-10-08 18:50:15	2015-10-08 18:50:15	Submission	36
77	2	126	code	f	1	2015-08-20 08:00:47	2015-08-20 08:00:47	Submission	30
78	4	127	code	f	1	2015-10-17 04:21:04	2015-10-17 04:21:04	Submission	30
79	3	128	code	f	1	2015-04-22 06:48:37	2015-04-22 06:48:37	Submission	30
80	4	128	code	f	1	2015-04-22 06:48:37	2015-04-22 06:48:37	Submission	30
81	3	131	code	f	1	2015-04-24 13:39:07	2015-04-24 13:39:07	Submission	30
82	4	132	code	f	1	2015-06-21 14:05:37	2015-06-21 14:05:37	Submission	30
83	4	134	code	f	1	2015-06-05 03:38:40	2015-06-05 03:38:40	Submission	30
84	3	136	code	f	1	2015-08-03 13:33:08	2015-08-03 13:33:08	Submission	30
85	2	137	code	f	1	2015-08-24 13:49:56	2015-08-24 13:49:56	Submission	30
86	3	138	code	f	1	2015-08-19 09:21:22	2015-08-19 09:21:22	Submission	30
87	4	138	code	f	1	2015-08-19 09:21:22	2015-08-19 09:21:22	Submission	30
88	3	145	code	f	1	2015-05-13 13:14:08	2015-05-13 13:14:08	Submission	14
89	42	147	code	f	1	2015-07-25 22:14:09	2015-07-25 22:14:09	Submission	14
90	46	180	code	f	1	2015-10-29 21:54:03	2015-10-29 21:54:03	Submission	18
91	7	180	code	f	1	2015-10-29 21:54:03	2015-10-29 21:54:03	Submission	18
92	24	180	code	f	1	2015-10-29 21:54:03	2015-10-29 21:54:03	Submission	18
93	3	180	code	f	1	2015-10-29 21:54:03	2015-10-29 21:54:03	Submission	18
94	30	152	code	f	1	2015-09-13 20:33:22	2015-09-13 20:33:22	Submission	41
95	30	153	code	f	1	2015-10-25 12:09:39	2015-10-25 12:09:39	Submission	41
96	4	153	code	f	1	2015-10-25 12:09:39	2015-10-25 12:09:39	Submission	41
97	4	155	code	f	1	2015-09-19 03:07:44	2015-09-19 03:07:44	Submission	41
98	4	156	code	f	1	2015-09-22 08:58:00	2015-09-22 08:58:00	Submission	41
99	4	157	code	f	1	2015-09-29 14:16:16	2015-09-29 14:16:16	Submission	41
100	3	158	code	f	1	2015-10-30 07:35:46	2015-10-30 07:35:46	Submission	6
101	14	160	code	f	1	2015-10-07 06:16:50	2015-10-07 06:16:50	Submission	34
102	4	162	code	f	1	2015-12-14 15:01:20	2015-12-14 15:01:20	Submission	34
103	38	177	code	f	1	2015-12-28 12:37:59	2015-12-28 12:37:59	Submission	18
104	21	177	code	f	1	2015-12-28 12:37:59	2015-12-28 12:37:59	Submission	18
105	45	177	code	f	1	2015-12-28 12:37:59	2015-12-28 12:37:59	Submission	18
106	2	177	code	f	1	2015-12-28 12:37:59	2015-12-28 12:37:59	Submission	18
107	3	164	code	f	1	2015-11-27 07:46:02	2015-11-27 07:46:02	Submission	18
108	4	166	code	f	1	2015-11-06 13:07:03	2015-11-06 13:07:03	Submission	18
109	2	169	code	f	1	2015-10-29 23:53:23	2015-10-29 23:53:23	Submission	18
110	3	170	code	f	1	2015-11-23 19:29:09	2015-11-23 19:29:09	Submission	18
111	2	171	code	f	1	2015-12-01 02:57:57	2015-12-01 02:57:57	Submission	18
112	4	172	code	f	1	2015-12-13 21:40:04	2015-12-13 21:40:04	Submission	18
113	2	181	code	f	1	2015-09-10 20:15:05	2015-09-10 20:15:05	Submission	24
114	2	182	code	f	1	2015-08-27 04:41:45	2015-08-27 04:41:45	Submission	24
115	2	184	code	f	1	2015-11-18 22:50:36	2015-11-18 22:50:36	Submission	24
116	4	186	code	f	1	2015-07-28 05:53:31	2015-07-28 05:53:31	Submission	42
117	2	202	code	f	1	2015-05-27 09:03:14	2015-05-27 09:03:14	Submission	42
118	3	202	code	f	1	2015-05-27 09:03:14	2015-05-27 09:03:14	Submission	42
119	3	188	code	f	1	2015-06-26 19:28:54	2015-06-26 19:28:54	Submission	42
120	4	191	code	f	1	2015-08-12 23:10:16	2015-08-12 23:10:16	Submission	42
121	4	194	code	f	1	2015-09-13 09:14:00	2015-09-13 09:14:00	Submission	42
122	2	195	code	f	1	2015-10-25 20:14:08	2015-10-25 20:14:08	Submission	42
123	4	198	code	f	1	2015-05-14 03:04:30	2015-05-14 03:04:30	Submission	42
124	3	203	code	f	1	2015-05-14 16:13:40	2015-05-14 16:13:40	Submission	42
125	4	203	code	f	1	2015-05-14 16:13:40	2015-05-14 16:13:40	Submission	42
126	3	205	code	f	1	2015-07-25 09:55:01	2015-07-25 09:55:01	Submission	42
127	2	208	code	f	1	2015-05-22 07:53:29	2015-05-22 07:53:29	Submission	42
128	3	208	code	f	1	2015-05-22 07:53:29	2015-05-22 07:53:29	Submission	42
129	4	209	code	f	1	2015-05-30 14:08:46	2015-05-30 14:08:46	Submission	42
130	4	210	code	f	1	2015-07-17 16:04:16	2015-07-17 16:04:16	Submission	42
131	2	211	code	f	1	2015-07-24 17:05:24	2015-07-24 17:05:24	Submission	42
132	3	211	code	f	1	2015-07-24 17:05:24	2015-07-24 17:05:24	Submission	42
133	4	213	code	f	1	2015-09-20 05:18:20	2015-09-20 05:18:20	Submission	42
134	2	215	code	f	1	2015-07-11 02:31:15	2015-07-11 02:31:15	Submission	42
135	4	217	code	f	1	2015-11-13 11:18:49	2015-11-13 11:18:49	Submission	42
136	30	218	code	f	1	2015-11-19 02:42:45	2015-11-19 02:42:45	Submission	42
137	41	218	code	f	1	2015-11-19 02:42:45	2015-11-19 02:42:45	Submission	42
138	4	218	code	f	1	2015-11-19 02:42:45	2015-11-19 02:42:45	Submission	42
139	2	219	code	f	1	2015-06-02 18:03:18	2015-06-02 18:03:18	Submission	42
140	3	219	code	f	1	2015-06-02 18:03:18	2015-06-02 18:03:18	Submission	42
141	2	222	code	f	1	2015-12-01 22:57:07	2015-12-01 22:57:07	Submission	42
142	4	222	code	f	1	2015-12-01 22:57:07	2015-12-01 22:57:07	Submission	42
143	38	225	code	f	1	2015-09-18 14:50:21	2015-09-18 14:50:21	Submission	27
144	3	230	code	f	1	2015-08-31 06:24:08	2015-08-31 06:24:08	Submission	27
145	3	231	code	f	1	2015-11-16 07:44:21	2015-11-16 07:44:21	Submission	27
146	3	232	code	f	1	2015-06-02 21:56:01	2015-06-02 21:56:01	Submission	27
147	3	234	code	f	1	2015-06-07 11:52:34	2015-06-07 11:52:34	Submission	45
148	3	235	code	f	1	2015-08-29 19:16:45	2015-08-29 19:16:45	Submission	45
149	3	242	code	f	1	2015-12-01 17:51:51	2015-12-01 17:51:51	Submission	45
150	20	243	code	f	1	2015-09-15 07:06:43	2015-09-15 07:06:43	Submission	45
151	3	244	code	f	1	2015-08-08 05:29:27	2015-08-08 05:29:27	Submission	45
152	3	247	code	f	1	2015-09-14 15:21:38	2015-09-14 15:21:38	Submission	45
\.


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('notifications_id_seq', 152, true);


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submissions (id, user_id, key, state, language, slug, done_at, is_liked, nit_count, version, created_at, updated_at, user_exercise_id, solution) FROM stdin;
1	9	7435282ec29807776627281b	pending	javascript	word-count	\N	\N	0	1	2015-09-30 17:18:13	2015-09-30 17:18:13	1	{"word-count.js":"function words(words)\\r\\n{\\r\\n\\tvar wordsArr = words.split(/ |\\\\n/);\\r\\n\\tvar countedWords = {};\\r\\n\\r\\n\\tfor(var x = 0; x \\u003c wordsArr.length; x++)\\r\\n\\t{\\r\\n\\t\\tif(!countedWords[wordsArr[x]])\\r\\n\\t\\t{\\r\\n\\t\\t\\tcountedWords[wordsArr[x]] = 1;\\r\\n\\t\\t}\\r\\n\\t\\telse\\r\\n\\t\\t{\\r\\n\\t\\t\\tcountedWords[wordsArr[x]]++;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn countedWords;\\r\\n}"}
2	11	61f015d1962daf44126d1c25	done	ruby	hello-world	\N	\N	0	1	2015-11-12 21:32:06	2015-11-12 21:32:06	4	{"hello_world.rb":"class HelloWorld\\n  def self.hello(name = nil)\\n    if name.nil?\\n      \\"Hello, world!\\"\\n    else\\n      \\"Hello, #{name}!\\"\\n    end\\n  end\\nend"}
3	11	191f916e702d9cc19857976e	done	python	prime-factors	\N	\N	0	1	2015-12-07 23:56:22	2015-12-07 23:56:22	6	{"/python/prime-factors/prime_factors.py":"def prime_factors(num):\\n\\n    factors = []\\n    for factor in xrange(2,num+1):\\n        while num % factor == 0:\\n            factors.append(factor)\\n            num /= factor\\n        if num == 1:\\n            break\\n\\n    return factors"}
4	12	37a5e80b9d8a27c656cee673	\N	elixir	word-count	\N	\N	0	1	2015-10-18 16:52:59	2015-10-18 16:52:59	9	{"word_count.exs":"defmodule Words do\\n  @doc \\"\\"\\"\\n  Count the number of words in the sentence.\\n\\n  Words are compared case-insensitively.\\n  \\"\\"\\"\\n  @spec count(String.t) :: map()\\n  def count(sentence) do\\n    sentence\\n    |\\u003e normalize\\n    |\\u003e find_words\\n    |\\u003e count_words\\n  end\\n\\n  defp normalize(sentence) do\\n    String.downcase(sentence)\\n  end\\n\\n  defp find_words(sentence) do\\n    Regex.scan(~r/[\\\\pL\\\\p{Nd}_\\\\-]+/u, sentence) |\\u003e List.flatten\\n  end\\n\\n  defp count_words(words) do\\n    Enum.reduce(words, %{}, fn(word, memo) -\\u003e\\n      Dict.update(memo, word, 1, \\u0026(\\u00261 + 1))\\n    end)\\n  end\\nend"}
5	15	3b0aa2f0b3b1106bbf1cd595	pending	lua	hello-world	\N	\N	0	1	2015-07-15 11:30:47	2015-07-15 11:30:47	10	{"hello_world.lua":"local hello_world = {}\\n\\nfunction hello_world.hello(name)\\n  if not name then\\n    name = \\"world\\"\\n  end\\n  return \\"Hello, \\" .. name .. \\"!\\"\\nend\\n\\nreturn hello_world"}
6	28	717b72917d2c5d2ecc889404	hibernating	haskell	sublist	\N	\N	0	1	2015-11-26 15:39:32	2015-11-26 15:39:32	17	{"Sublist.hs":"(Test submission that will fail.)"}
7	29	0e0ad46ee162de45e6852ba1	\N	python	etl	\N	\N	0	1	2015-07-31 19:31:48	2015-07-31 19:31:48	19	{"etl.py":"def transform(d):\\n    return {value.lower(): key\\n            for key, group in d.items() for value in group}"}
8	29	8bbdef973664841b2a2cc7e1	superseded	python	atbash-cipher	\N	\N	0	2	2015-07-24 04:20:20	2015-07-24 04:20:20	20	{"atbash_cipher.py":"from string import maketrans\\nimport re\\n\\ntrans_tbl = maketrans(\\"abcdefghijklmnopqrstuvwxyz\\",\\n                      \\"zyxwvutsrqponmlkjihgfedcba\\")\\n\\n\\ndef decode(code):\\n    return code.replace(' ', '').translate(trans_tbl)\\n\\n\\ndef encode(string):\\n    return __group(\\n        re.sub(r'[\\\\W]+', '', string).lower().translate(trans_tbl)\\n    )\\n\\n\\ndef __group(string):\\n    if len(string) \\u003c= 5:\\n        return string\\n\\n    return string[:5] + \\" \\" + __group(string[5:])"}
9	29	1dfdc1cf66e3a94c33cc3425	superseded	python	atbash-cipher	\N	\N	0	1	2015-08-03 01:40:29	2015-08-03 01:40:29	20	{"atbash_cipher.py":"from string import maketrans\\nimport re\\n\\ntrans_tbl = maketrans(\\"abcdefghijklmnopqrstuvwxyz\\",\\n                      \\"zyxwvutsrqponmlkjihgfedcba\\")\\n\\n\\ndef decode(code):\\n    return code.replace(' ', '').translate(trans_tbl)\\n\\n\\ndef encode(string):\\n    return _group(re.sub(r'[\\\\W]+', '', string.lower()).translate(trans_tbl))\\n\\n\\ndef _group(string):\\n    res = string[0]\\n\\n    for i in xrange(1, len(string)):\\n        if i % 5 == 0:\\n            res += ' ' + string[i]\\n        else:\\n            res += string[i]\\n\\n    return res"}
10	29	b12ad57d8c0ed045ec969478	done	python	atbash-cipher	\N	\N	0	3	2015-08-11 13:55:10	2015-08-11 13:55:10	20	{"atbash_cipher.py":"from string import ascii_letters, ascii_lowercase, maketrans\\nimport re\\n\\nATBASH = maketrans(ascii_letters, 2*(ascii_lowercase[::-1]))\\n\\n\\ndef decode(code):\\n    return code.translate(ATBASH, ' ')\\n\\n\\ndef encode(string):\\n    s = re.sub(r'[\\\\W]+', '', string).translate(ATBASH)\\n\\n    return ' '.join([s[i:i + 5] for i in range(0, len(s), 5)])"}
11	31	11533fe2e235d7a980d24b3b	pending	python	gigasecond	\N	\N	0	1	2015-07-27 21:29:02	2015-07-27 21:29:02	22	{"gigasecond.py":"import datetime\\r\\n\\r\\n\\r\\ndef add_gigasecond(time):\\r\\n    gigasecond = 10 ** 9\\r\\n    time = time + datetime.timedelta(seconds=gigasecond)\\r\\n    return time"}
12	33	c1337c24396312fde2e67c24	pending	python	allergies	\N	\N	0	1	2015-07-02 21:33:30	2015-07-02 21:33:30	26	{"allergies.py":"#Allergies exercism\\r\\n\\r\\nallergies_table = {\\r\\n\\t1: 'eggs',\\r\\n\\t2: 'peanuts',\\r\\n\\t4: 'shellfish', \\r\\n\\t8: 'strawberries',\\r\\n\\t16: 'tomatoes', \\r\\n\\t32: 'chocolate',\\r\\n\\t64: 'pollen',\\r\\n\\t128: 'cats',\\r\\n}\\r\\n\\r\\n\\r\\ndef get_allergies(score):\\r\\n\\tvalue_evaluated = 128\\r\\n\\tallergies_list = []\\r\\n\\twhile value_evaluated:\\r\\n\\t\\tif score \\u003e= value_evaluated:\\r\\n\\t\\t\\tallergies_list.append(allergies_table[value_evaluated])\\r\\n\\t\\t\\tscore -= value_evaluated\\r\\n\\t\\tvalue_evaluated /= 2\\t\\r\\n\\treturn allergies_list\\r\\n\\r\\n\\r\\nclass Allergies:\\r\\n\\tdef __init__(self, score):\\r\\n\\t\\tself.score = score % 256\\r\\n\\t\\tself.lst = get_allergies(self.score)\\r\\n\\r\\n\\tdef is_allergic_to(self, allergie):\\r\\n\\t\\treturn allergie in self.lst"}
13	33	e38aa97c35118d176f522b5c	\N	javascript	leap	\N	\N	0	1	2015-07-07 04:22:31	2015-07-07 04:22:31	29	{"leap.js":"var isLeapYear = function(input) {\\n\\tif(input%400===0) {\\n\\t\\treturn true;\\n\\t} else if (input%4===0 \\u0026\\u0026 input%100!==0) {\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n};\\n\\nmodule.exports = isLeapYear;"}
14	33	7f158626690605d6c9e801ec	done	ruby	phone-number	\N	\N	0	1	2015-08-04 15:45:20	2015-08-04 15:45:20	31	{"phone-number.rb":"class PhoneNumber\\n  attr_reader :phone_number\\n  alias_method :number, :phone_number\\n\\n  def initialize( raw_phone_number )\\n    cleaned_number = clean_phone_number( raw_phone_number ) \\n    if valid_phone_number?( cleaned_number ) \\n      @phone_number = cleaned_number \\n      make_phone_number_10_digits_long\\n    else\\n      @phone_number = \\"0\\" * 10\\n    end\\n  end\\n\\n  def area_code\\n    @phone_number[0..2]\\n  end\\n\\n  def to_s\\n    \\"(\\" + @phone_number[0..2] + \\") \\" + @phone_number[3..5] + \\"-\\" + @phone_number[6..9] \\n  end\\n\\n  def make_phone_number_10_digits_long\\n    if @phone_number.length == 11\\n      @phone_number = @phone_number[1..10]\\n    end\\n  end\\n\\n  def valid_phone_number?( number=\\"\\" )\\n    case number.length\\n    when 10 \\n      true\\n    when 11 then \\n      number[0] == \\"1\\" ? true : false\\n    else\\n      false\\n    end\\n  end\\n\\n  def clean_phone_number( raw_phone_number )\\n    cleaned_number = \\"\\"\\n    raw_phone_number.chars.each { |d| cleaned_number \\u003c\\u003c d  unless d.match(/[0-9]/).nil? }\\n    cleaned_number    \\n  end\\nend"}
35	38	b0e61017150f155c6437ecee	hibernating	ruby	roman-numerals	\N	\N	0	1	2015-10-06 00:17:17	2015-10-06 00:17:17	55	{"roman.rb":"class Fixnum\\n\\n\\tdef to_roman\\n\\ti = self\\n\\ts = ''\\n\\troman_mappings.each do |arabic, roman|\\n\\t\\twhile i \\u003e= arabic\\n\\t\\ts \\u003c\\u003c roman\\n\\t\\ti -= arabic\\n\\t  \\tend\\n\\t  end\\n\\ts\\n\\tend\\n\\tdef roman_mappings\\n\\t\\t{\\n\\t\\t1000 =\\u003e 'M',\\n\\t\\t900 =\\u003e 'CM',\\n\\t\\t500 =\\u003e 'D',\\n\\t\\t400 =\\u003e 'CD',\\n\\t\\t100 =\\u003e 'C',\\n\\t\\t90 =\\u003e 'XC',\\n\\t\\t50 =\\u003e 'L',\\n\\t\\t40 =\\u003e 'XL',\\n\\t\\t10 =\\u003e 'X',\\n\\t\\t9 =\\u003e 'IX',\\n\\t\\t5 =\\u003e 'V',\\n\\t\\t4 =\\u003e 'IV',\\n\\t\\t1 =\\u003e 'I',\\n\\t\\t}\\n\\tend\\nend"}
15	38	22eee5da2614fb7281205b76	superseded	javascript	bob	\N	\N	0	6	2015-08-18 04:27:02	2015-08-18 04:27:02	38	{"bob.js":"var Bob = function() {\\r\\n\\tvar questionRegEXP = new RegExp(\\"\\\\\\\\?\\" + \\"$\\", \\"g\\");\\r\\n\\tvar containsUpperCaseAlphaRegEXP = new RegExp(\\"[A-Z]\\", \\"g\\");\\r\\n\\r\\n\\tvar _ = {\\r\\n\\t\\they : function(order) {\\r\\n\\t\\t\\tif(order.match(containsUpperCaseAlphaRegEXP) \\u0026\\u0026 order.toUpperCase() === order){\\r\\n\\t\\t\\t\\treturn 'Whoa, chill out!';\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (order.trim() === \\"\\") {\\r\\n\\t\\t\\t\\treturn 'Fine. Be that way!';\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (order.match(questionRegEXP)) {\\r\\n\\t\\t\\t\\treturn 'Sure.';\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\treturn 'Whatever.';\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\r\\n\\treturn {\\r\\n\\t\\they : _.hey\\r\\n\\t};\\r\\n};\\r\\nmodule.exports = Bob;"}
16	38	38a404e3a4d48c004b16ddf2	superseded	javascript	bob	\N	\N	0	5	2015-11-18 21:17:02	2015-11-18 21:17:02	38	{"bob.js":"var Bob = function() {\\r\\n\\tvar questionRegEXP = new RegExp(\\"\\\\\\\\?\\" + \\"$\\", \\"g\\");\\r\\n\\tvar containsAlpha = new RegExp(\\"[A-Z]\\", \\"g\\");\\r\\n\\r\\n\\tvar _ = {\\r\\n\\t\\they : function(order) {\\r\\n\\t\\t\\tif(order.match(containsAlpha) \\u0026\\u0026 order.toUpperCase() === order){\\r\\n\\t\\t\\t\\treturn 'Whoa, chill out!';\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (order.trim() === \\"\\") {\\r\\n\\t\\t\\t\\treturn 'Fine. Be that way!'\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (order.match(questionRegEXP)) {\\r\\n\\t\\t\\t\\treturn 'Sure.';\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\treturn 'Whatever.';\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn {\\r\\n\\t\\they : _.hey\\r\\n\\t};\\r\\n}\\r\\nmodule.exports = Bob;"}
17	38	c951c4c64624927e7434e397	superseded	javascript	bob	\N	\N	0	2	2015-11-25 18:04:19	2015-11-25 18:04:19	38	{"bob.js":"var Bob = function() {\\r\\n\\r\\n\\tvar orders = {\\r\\n\\t\\t'Tom-ay-to, tom-aaaah-to.' : 'Whatever.',\\r\\n\\t\\t'Let\\\\'s go make out behind the gym!' : 'Whatever.',\\r\\n\\t\\t'It\\\\'s OK if you don\\\\'t want to go to the DMV.' : 'Whatever.',\\r\\n\\t\\t'1, 2, 3' : 'Whatever.',\\r\\n\\t\\t'\\\\xfcML\\\\xe4\\\\xdcTS' : 'Whatever.',\\r\\n\\t\\t'Ending with a ? means a question.' : 'Whatever.',\\r\\n\\r\\n\\t\\t'\\\\xdcML\\\\xc4\\\\xdcTS!' : 'Whoa, chill out!',\\r\\n\\t};\\r\\n\\r\\n\\tvar questionRegEXP = new RegExp(\\"\\\\\\\\?\\" + \\"$\\", \\"g\\");\\r\\n\\r\\n\\tvar _ = {\\r\\n\\t\\they : function(order) {\\r\\n\\t\\t\\tif (order.match(questionRegEXP)) {\\r\\n\\t\\t\\t\\treturn 'Sure.';\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (order.trim() === \\"\\") {\\r\\n\\t\\t\\t\\treturn 'Fine. Be that way!'\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif(order.toUpperCase === order){\\r\\n\\t\\t\\t\\treturn 'Whoa, chill out!';\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn orders[order];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn {\\r\\n\\t\\they : _.hey\\r\\n\\t};\\r\\n}\\r\\nmodule.exports = Bob;"}
18	38	7f04412589f6d9f99cb53fd1	superseded	javascript	bob	\N	\N	0	1	2015-12-01 19:50:06	2015-12-01 19:50:06	38	{"bob.js":"var Bob = function() {\\r\\n\\r\\n\\tvar orders = {\\r\\n\\t\\t'Tom-ay-to, tom-aaaah-to.' : 'Whatever.',\\r\\n\\t\\t'WATCH OUT!' : 'Whoa, chill out!',\\r\\n\\t\\t'Does this cryogenic chamber make me look fat?' : 'Sure.',\\r\\n\\t\\t'Let\\\\'s go make out behind the gym!' : 'Whatever.',\\r\\n\\t\\t'It\\\\'s OK if you don\\\\'t want to go to the DMV.' : 'Whatever.',\\r\\n\\t\\t'WHAT THE HELL WERE YOU THINKING' : 'Whoa, chill out!',\\r\\n\\t\\t'1, 2, 3 GO!' : 'Whoa, chill out!',\\r\\n\\t\\t'1, 2, 3' : 'Whatever.',\\r\\n\\t\\t'4?' : 'Sure.',\\r\\n\\t\\t'ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!' : 'Whoa, chill out!',\\r\\n\\t\\t'\\\\xdcML\\\\xc4\\\\xdcTS!' : 'Whoa, chill out!',\\r\\n\\t\\t'\\\\xfcML\\\\xe4\\\\xdcTS' : 'Whatever.',\\r\\n\\t\\t'I HATE YOU' : 'Whoa, chill out!',\\r\\n\\t\\t'Ending with a ? means a question.' : 'Whatever.',\\r\\n\\t\\t'Wait! Hang on.  Are you going to be OK?' : 'Sure.',\\r\\n\\t\\t'' : 'Fine. Be that way!',\\r\\n\\t\\t'   ' : 'Fine. Be that way!'\\r\\n\\t};\\r\\n\\r\\n\\tvar _ = {\\r\\n\\t\\they : function(order) {\\r\\n\\t\\t\\treturn orders[order]; \\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn {\\r\\n\\t\\they : _.hey\\r\\n\\t};\\r\\n}\\r\\nmodule.exports = Bob;"}
19	38	c13974741115b94fd46b4ca3	superseded	javascript	bob	\N	\N	0	3	2015-12-10 06:30:25	2015-12-10 06:30:25	38	{"bob.js":"var Bob = function() {\\r\\n\\tvar questionRegEXP = new RegExp(\\"\\\\\\\\?\\" + \\"$\\", \\"g\\");\\r\\n\\r\\n\\tvar _ = {\\r\\n\\t\\they : function(order) {\\r\\n\\t\\t\\tif (order.match(questionRegEXP)) {\\r\\n\\t\\t\\t\\treturn 'Sure.';\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (order.trim() === \\"\\") {\\r\\n\\t\\t\\t\\treturn 'Fine. Be that way!'\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif(order.toUpperCase === order){\\r\\n\\t\\t\\t\\treturn 'Whoa, chill out!';\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\treturn 'Whatever.';\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn {\\r\\n\\t\\they : _.hey\\r\\n\\t};\\r\\n}\\r\\nmodule.exports = Bob;"}
20	38	153133e8c53ef747ed41db93	superseded	javascript	bob	\N	\N	0	4	2015-12-20 13:56:13	2015-12-20 13:56:13	38	{"bob.js":"var Bob = function() {\\r\\n\\tvar questionRegEXP = new RegExp(\\"\\\\\\\\?\\" + \\"$\\", \\"g\\");\\r\\n\\tvar containsAlpha = new RegExp(\\"[A-Z]\\", \\"g\\");\\r\\n\\r\\n\\tvar _ = {\\r\\n\\t\\they : function(order) {\\r\\n\\t\\t\\tif (order.match(questionRegEXP)) {\\r\\n\\t\\t\\t\\treturn 'Sure.';\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (order.trim() === \\"\\") {\\r\\n\\t\\t\\t\\treturn 'Fine. Be that way!'\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif(order.match(containsAlpha) \\u0026\\u0026 order.toUpperCase() === order){\\r\\n\\t\\t\\t\\treturn 'Whoa, chill out!';\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\treturn 'Whatever.';\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn {\\r\\n\\t\\they : _.hey\\r\\n\\t};\\r\\n}\\r\\nmodule.exports = Bob;"}
21	38	1226438f9461319fd3097722	done	javascript	bob	\N	\N	0	7	2015-12-21 01:03:19	2015-12-21 01:03:19	38	{"bob.js":"var Bob = function() {\\r\\n\\tvar questionRegEXP = new RegExp(\\"\\\\\\\\?\\" + \\"$\\", \\"g\\");\\r\\n\\r\\n\\tvar _ = {\\r\\n\\t\\they : function(order) {\\r\\n\\t\\t\\tif (_.isYelling(order)) {\\r\\n\\t\\t\\t\\treturn 'Whoa, chill out!';\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (_.isQuestionning(order)) {\\r\\n\\t\\t\\t\\treturn 'Sure.';\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (_.isSilence(order)) {\\r\\n\\t\\t\\t\\treturn 'Fine. Be that way!';\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn 'Whatever.';\\r\\n\\t\\t},\\r\\n\\t\\t// Check if all upper case, and its not just numbers and symbols\\r\\n\\t\\tisYelling : function(order) {\\r\\n\\t\\t\\tvar upperCase=order.toUpperCase();\\r\\n\\t\\t\\tif (order !== upperCase){\\r\\n\\t\\t\\t\\treturn false;\\r\\n\\t\\t\\t} \\r\\n\\t\\t\\tvar lowerCase=order.toLowerCase();\\r\\n\\t\\t\\tif(upperCase === lowerCase){\\r\\n\\t\\t\\t\\treturn false;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t},\\r\\n\\t\\tisQuestionning : function(order) {\\r\\n\\t\\t\\treturn order.match(questionRegEXP);\\r\\n\\t\\t},\\r\\n\\t\\tisSilence : function(order) {\\r\\n\\t\\t\\treturn order.trim() === \\"\\";\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\r\\n\\treturn {\\r\\n\\t\\they : _.hey\\r\\n\\t};\\r\\n};\\r\\nmodule.exports = Bob;"}
22	38	010b840bf62f6681b8546d26	pending	python	anagram	\N	\N	0	1	2015-09-02 07:44:12	2015-09-02 07:44:12	40	{"anagram.py":"from collections import Counter\\n\\nclass Anagram(object):\\n    def __init__(self, word):\\n        self._word = word\\n\\n    def match(self, words):\\n        anagrams = []\\n        word_frequencies = Counter(self._word.lower())\\n        for word in words:\\n            other_frequencies = Counter(word.lower())\\n            if word_frequencies == other_frequencies and word != self._word:\\n                anagrams.append(word)\\n        return anagrams"}
36	38	9b10e40440f9cb807d247345	done	ruby	difference-of-squares	\N	\N	0	2	2015-09-20 07:36:22	2015-09-20 07:36:22	56	{"difference_of_squares.rb":"class Squares\\n  attr_reader :n\\n\\n  def initialize n\\n    @n = n\\n  end\\n\\n  def square_of_sums\\n    # Standard formula for \\\\Sigma_{i = 1}^{i = n} i : n * (n+1) / 2\\n    sums = n * (n+1) / 2\\n    sums * sums\\n  end\\n\\n  def sum_of_squares\\n    # Standard formula for \\\\Sigma_{i = 1}^{i = n} i^2 : n * (n+1) * (2n+1) / 2\\n    n * (n+1) * (n*2 + 1) / 6\\n  end\\n\\n  def difference\\n    square_of_sums - sum_of_squares\\n  end\\nend"}
179	18	475e75a3a8b30ac06c49b6db	hibernating	python	hamming	\N	\N	0	1	2015-11-27 00:14:14	2015-11-27 00:14:14	252	{"hamming.py":"def distance(s1, s2):\\n    dist = 0\\n    for i in range(len(s1)):\\n        if s1[i] != s2[i]:\\n            dist += 1\\n    return dist"}
23	38	2474f765c812063af8a1f168	pending	python	beer-song	\N	\N	0	1	2015-09-29 05:35:18	2015-09-29 05:35:18	42	{"beer.py":"def song(first, last = 0):\\n  verses = []\\n  for i in range(first, last - 1, -1):\\n    verses.append(verse(i))\\n    verses.append('\\\\n')\\n  return \\"\\".join(verses)\\n\\ndef verse(num):\\n  if num == 0:\\n    return \\"No more bottles of beer on the wall, no more bottles of beer.\\\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\\\n\\"\\n  old_num = str(num)\\n  new_num = str(num - 1) if num \\u003e 1 else \\"No more\\"\\n  old_bottle = \\"bottles\\" if num \\u003e 1 else \\"bottle\\"\\n  new_bottle = \\"bottles\\" if num \\u003e 2 or num == 1 else \\"bottle\\"\\n  take = \\"one\\" if num \\u003e 1 else \\"it\\"\\n\\n  nth_verse = [old_num, \\" \\", old_bottle, \\" of beer on the wall, \\", old_num, \\" \\", old_bottle, \\" of beer.\\\\nTake \\", take, \\" down and pass it around, \\", new_num.lower(), \\" \\", new_bottle, \\" of beer on the wall.\\\\n\\"] \\n\\n  return \\"\\".join(nth_verse)"}
24	38	4620569fc61bae6e358aaab2	pending	cpp	hamming	\N	\N	0	2	2015-10-15 00:51:33	2015-10-15 00:51:33	45	{"hamming.cpp":"#include \\"hamming.h\\"\\n\\n#include \\u003calgorithm\\u003e\\n#include \\u003cstdexcept\\u003e\\n#include \\u003cvector\\u003e\\n\\ntemplate\\u003cclass LeftOutput, class RightOutput, class LeftIt, class RightIt\\u003e\\n  std::vector\\u003cstd::pair\\u003cLeftOutput, RightOutput\\u003e\\u003e zip(LeftIt left_begin, LeftIt left_end,\\n                                                      RightIt right_begin, RightIt right_end) {\\n    if (left_end - left_begin != right_end - right_begin) { throw std::domain_error {\\"Inequal length of input.\\"}; }\\n\\n    std::vector\\u003cstd::pair\\u003cLeftOutput, RightOutput\\u003e\\u003e result;\\n\\n    for (auto lit = left_begin, rit = right_begin;\\n         lit \\u003c left_end; // Only need to check for one of them, I know already distance is the same from precondition\\n         ++lit, ++rit) {\\n      result.push_back(std::pair\\u003cLeftOutput, RightOutput\\u003e {*lit, *rit});\\n    }\\n\\n    return result;\\n  }\\n\\nunsigned int hamming::compute(std::string const left, std::string const right) {\\n  std::vector\\u003cstd::pair\\u003cchar, char\\u003e\\u003e pairs = zip\\u003cchar, char\\u003e(left.cbegin(), left.cend(), right.cbegin(), right.cend());\\n\\n  return (unsigned int) std::count_if(pairs.cbegin(), pairs.cend(), [](std::pair\\u003cchar, char\\u003e val) {\\n    return val.first != val.second;\\n  });\\n}","hamming.h":"#ifndef HAMMING_HAMMING_H\\n#define HAMMING_HAMMING_H\\n\\n#include \\u003cstring\\u003e\\n\\nnamespace hamming {\\n  unsigned int compute(std::string const left, std::string const right);\\n}\\n\\n#endif //HAMMING_HAMMING_H"}
25	38	3939fa1598aca581fa09abf9	superseded	cpp	hamming	\N	\N	0	1	2015-11-12 14:50:40	2015-11-12 14:50:40	45	{"hamming.cpp":"#include \\"hamming.h\\"\\n\\n#include \\u003calgorithm\\u003e\\n#include \\u003cstdexcept\\u003e\\n#include \\u003cvector\\u003e\\n\\nstd::vector\\u003cstd::pair\\u003cchar, char\\u003e\\u003e zipString(std::string const \\u0026left, std::string const \\u0026right) {\\n  if (left.length() != right.length()) {\\n    throw std::domain_error {\\"Inequal length of input.\\"};\\n  }\\n\\n  std::string::const_iterator lit = left.cbegin();\\n  std::string::const_iterator rit = right.cbegin();\\n\\n  std::vector\\u003cstd::pair\\u003cchar, char\\u003e\\u003e result {};\\n\\n  for (; lit \\u003c left.cend() \\u0026\\u0026 rit \\u003c right.cend(); ++lit, ++rit) {\\n    result.push_back(std::pair\\u003cchar, char\\u003e{*lit, *rit});\\n  }\\n\\n  return result;\\n}\\n\\nunsigned int hamming::compute(std::string const left, std::string const right) {\\n  std::vector\\u003cstd::pair\\u003cchar, char\\u003e\\u003e pairs = zipString(left, right);\\n\\n  return std::count_if(pairs.cbegin(), pairs.cend(), [](std::pair\\u003cchar, char\\u003e val) {\\n    return val.first != val.second;\\n  });\\n}","hamming.h":"#ifndef HAMMING_HAMMING_H\\n#define HAMMING_HAMMING_H\\n\\n#include \\u003cstring\\u003e\\n\\nnamespace hamming {\\n  unsigned int compute(std::string const left, std::string const right);\\n}\\n\\n#endif //HAMMING_HAMMING_H"}
26	38	ffaac04e9c85c78ae11209c2	\N	javascript	hamming	\N	\N	0	1	2015-08-29 04:21:59	2015-08-29 04:21:59	46	{"hamming.js":"var Hamming = function() {};\\n\\nHamming.prototype.compute = function(a, b) {\\n    if (a.length != b.length) {\\n        throw(new Error('DNA strands must be of equal length.')); \\n    }\\n    var answer = 0;\\n    \\n    for(var i = 0; i \\u003c a.length; i++) {\\n        if (a[i] !== b[i]) { answer += 1; }\\n    }\\n    \\n    return answer;\\n};\\n\\nmodule.exports = Hamming;"}
27	38	0060e493a352a2967123750f	done	clojure	difference-of-squares	\N	\N	0	1	2015-08-28 03:28:02	2015-08-28 03:28:02	47	{"squares.clj":"(defn to-square [n]\\n  (reduce *' (repeat 2 n)))\\n\\n(def sum-of (partial reduce +))\\n\\n(def numbers (comp range inc))\\n\\n(def squares (partial map to-square))\\n\\n\\n\\n(def square-of-sums (comp to-square sum-of numbers))\\n\\n(def sum-of-squares (comp sum-of squares numbers))\\n\\n(defn difference [n]\\n  (- (square-of-sums n) (sum-of-squares n)))"}
28	38	2e37814650845cb19601f7eb	\N	ruby	robot-name	\N	\N	0	1	2015-09-29 19:40:57	2015-09-29 19:40:57	50	{"robot_name.rb":"class Robot\\n\\n  LETTERS = [*('A'..'Z')]\\n  NUMBERS = [*(0..9)]\\n\\n  @@robots = []\\n\\n  attr_reader :name\\n\\n  def initialize\\n    @name = generate_name\\n    register_name\\n  end\\n\\n  def reset\\n    @name = generate_name\\n    register_name\\n  end\\n\\n  private\\n\\n  def generate_name\\n    LETTERS.sample(2).join + NUMBERS.sample(3).join\\n  end\\n\\n  def register_name\\n    raise if @@robots.include?(@name)\\n    @@robots \\u003c\\u003c @name\\n  end\\nend"}
29	38	08c85267a5db7d5b6766b8a5	done	python	gigasecond	\N	\N	0	1	2015-08-15 21:04:57	2015-08-15 21:04:57	52	{"gigasecond.py":"from datetime import timedelta\\r\\n\\r\\ndef add_gigasecond(date):\\r\\n\\r\\n    return date+timedelta(seconds=10**9)\\r"}
30	38	8eebd68ea61483d5efb5ee3a	superseded	ruby	gigasecond	\N	\N	0	1	2015-08-27 18:07:41	2015-08-27 18:07:41	53	{"/ruby/gigasecond/gigasecond.rb":"class Gigasecond\\n  attr_reader :gs\\n\\n  def self.from(date)\\n    if date.class == Date\\n      @gs = date + (10**9)/60/60/24\\n    else \\n      @gs = Date.parse((date + 10**9).to_s)\\n    end\\n  end\\nend"}
31	38	c8cd2b7708105625a95d3b3e	pending	ruby	gigasecond	\N	\N	0	2	2015-09-03 01:01:05	2015-09-03 01:01:05	53	{"/ruby/gigasecond/gigasecond.rb":"require 'date'\\nrequire 'time'\\n\\nclass Gigasecond\\n  attr_reader :gs\\n\\n  def self.from(date)\\n    (date.to_time + 10**9).to_date\\n  end\\nend"}
32	38	41f75266a49f416f757c1f02	done	haskell	anagram	\N	\N	0	3	2015-09-06 20:20:09	2015-09-06 20:20:09	54	{"anagram.hs":"module Anagram\\n  ( anagramsFor ) where\\n\\nimport Data.Char\\nimport Data.List ( sort )\\n\\nanagramsFor :: String -\\u003e [String] -\\u003e [String]\\nanagramsFor x = filter ((== xn) . normalize) . filter (/=x)\\n  where\\n    normalize = sort . map toLower\\n    xn = normalize x"}
33	38	50e84525caecef778c204f0e	superseded	haskell	anagram	\N	\N	0	1	2015-10-13 07:16:34	2015-10-13 07:16:34	54	{"anagram.hs":"module Anagram\\n  where\\n\\nimport Data.Char\\nimport Data.Function\\n\\nanagramsFor :: String -\\u003e [String] -\\u003e [String]\\nanagramsFor x = filter (/=x) . filter ((check `on` lower) x)\\n  where\\n    check [] [] = True\\n    check (x:xs) ys = \\n      case break (==x) ys of\\n        (t,[]) -\\u003e False\\n        (t,z:zs) -\\u003e check xs (t++zs)\\n    check _ _ = False\\n    lower = map toLower"}
34	38	79d7a9e5fb122d196fe2f7ea	superseded	haskell	anagram	\N	\N	0	2	2015-11-17 13:28:24	2015-11-17 13:28:24	54	{"anagram.hs":"module Anagram\\n  where\\n\\nimport Data.Char\\nimport Data.Function\\nimport Data.List ( sort )\\nimport Control.Arrow\\n\\nanagramsFor :: String -\\u003e [String] -\\u003e [String]\\nanagramsFor x = filter ((== xn) . normalize) . filter (/=x)\\n  where\\n    normalize = sort . map toLower\\n    xn = normalize x\\n    lower = map toLower"}
37	38	eca12eb71a1b123a3c16bc56	superseded	ruby	difference-of-squares	\N	\N	0	1	2015-11-06 22:02:04	2015-11-06 22:02:04	56	{"difference_of_squares.rb":"class Squares\\n  def initialize val\\n    @val = val\\n  end\\n\\n  def square_of_sums\\n    # Standard formula for \\\\Sigma_{i = 1}^{i = n} i : n * (n+1) / 2\\n    sums = @val * (@val + 1) / 2\\n    sums * sums\\n  end\\n\\n  def sum_of_squares\\n    # Standard formula for \\\\Sigma_{i = 1}^{i = n} i^2 : n * (n+1) * (2n+1) / 2\\n    @val * (@val + 1) * (@val * 2 + 1) / 6\\n  end\\n\\n  def difference\\n    square_of_sums - sum_of_squares\\n  end\\nend"}
38	38	791dd89356d8f66416eddc5e	pending	go	bank-account	\N	\N	0	1	2015-08-28 01:28:49	2015-08-28 01:28:49	58	{"bank_account.go":"package account\\n\\nimport (\\n\\t\\"sync\\"\\n)\\n\\ntype Account struct {\\n\\tsync.RWMutex\\n\\tbalance int64\\n\\topen    bool\\n}\\n\\nfunc (a *Account) Close() (pay int64, ok bool) {\\n\\ta.Lock()\\n\\tdefer a.Unlock()\\n\\n\\tif !a.open {\\n\\t\\treturn a.balance, false\\n\\t}\\n\\n\\ta.open = false\\n\\n\\tpay = a.balance\\n\\ta.balance = 0\\n\\n\\treturn pay, true\\n}\\n\\nfunc (a *Account) Balance() (balance int64, ok bool) {\\n\\treturn a.balance, a.open\\n}\\n\\nfunc (a *Account) Deposit(amount int64) (newBalance int64, ok bool) {\\n\\ta.Lock()\\n\\tdefer a.Unlock()\\n\\n\\tif !a.open {\\n\\t\\treturn a.balance, false\\n\\t}\\n\\tif a.balance+amount \\u003c 0 {\\n\\t\\treturn a.balance, false\\n\\t}\\n\\n\\ta.balance += amount\\n\\n\\treturn a.balance, true\\n}\\n\\nfunc Open(initalDeposit int64) *Account {\\n\\tif initalDeposit \\u003c 0 {\\n\\t\\treturn nil\\n\\t}\\n\\n\\treturn \\u0026Account{balance: initalDeposit, open: true}\\n}"}
39	38	6665af0eb73f2351fb12de7a	done	python	bob	\N	\N	0	2	2015-08-29 10:50:14	2015-08-29 10:50:14	59	{"bob.py":"\\r\\ndef hey(statement):\\r\\n   \\r\\n  if (statement.isupper()):\\r\\n\\treturn 'Whoa, chill out!'\\r\\n\\r\\n  elif (statement.endswith('?')):\\r\\n    return 'Sure.'\\r\\n\\r\\n  elif (statement.strip() == ''):\\r\\n\\treturn 'Fine. Be that way!'\\r\\n\\r\\n  else:\\r\\n    return 'Whatever.'"}
40	38	4e46f2d1dc5740f7145dc04c	superseded	python	bob	\N	\N	0	1	2015-11-26 14:35:41	2015-11-26 14:35:41	59	{"bob.py":"\\r\\ndef hey(statement):\\r\\n    \\r\\n  if (statement.endswith('?') and not statement.isupper()):\\r\\n    return 'Sure.'\\r\\n\\r\\n  elif (statement.isupper()):\\r\\n\\treturn 'Whoa, chill out!'\\t\\r\\n\\r\\n  elif (statement.strip() == ''):\\r\\n\\treturn 'Fine. Be that way!'\\r\\n\\r\\n  else:\\r\\n    return 'Whatever.'"}
41	38	3bc28b27273d59527564fcdf	superseded	clojure	point-mutations	\N	\N	0	1	2015-11-13 04:38:22	2015-11-13 04:38:22	61	{"/clojure/point-mutations/point_mutations.clj":"(ns point-mutations)\\n\\n(defn hamming-distance [dna1 dna2]\\n  (if (= (count dna1)\\n         (count dna2))\\n    (count\\n      (filter (fn [nucleotides]\\n                (not= (get nucleotides 0)\\n                      (get nucleotides 1)))\\n              (map vector dna1 dna2)))\\n  nil))"}
42	38	f725362436bb002d2673cba1	pending	clojure	point-mutations	\N	\N	0	2	2015-11-15 06:02:01	2015-11-15 06:02:01	61	{"/clojure/point-mutations/point_mutations.clj":"(ns point-mutations)\\n\\n(defn hamming-distance [dna1 dna2]\\n  (if (= (count dna1)\\n         (count dna2))\\n    (reduce + (map #(if (= %1 %2) 0 1) dna1 dna2))\\n    nil))"}
43	38	18e852a78bcb345c53ad50c6	pending	go	minesweeper	\N	\N	0	1	2015-08-18 18:45:40	2015-08-18 18:45:40	62	{"minesweeper.go":"package minesweeper\\n\\nimport \\"errors\\"\\n\\n// Errors for Board not rectangular, Unknown Characters and Invalid Frame\\nvar (\\n\\tErrNotRectangle     = errors.New(\\"Board is not rectangular\\")\\n\\tErrUnknownCharacter = errors.New(\\"Unknown Character\\")\\n\\tErrInvalidFrame     = errors.New(\\"Invalid Frame\\")\\n)\\n\\n// Count takes a valid board and sets blank spaces adjacent to bombs\\n// to the count of adjacent bomb.\\n// Errors:\\n// - ErrNotRectangle if the rows aren't even\\n// - ErrUnknownCharacter if the board does not contain spaces or *\\n// - ErrInvalidFrame if the frame is invalid.\\n// - - Corners should be +\\n// - - Top and bottom should be -\\n// - - Sides should be |\\nfunc (b Board) Count() error {\\n\\tl := len(b[0])\\n\\tif !validFrame(b[0]) || !validFrame(b[len(b)-1]) {\\n\\t\\treturn ErrInvalidFrame\\n\\t}\\n\\tfor r, row := range b[1 : len(b)-1] {\\n\\t\\tif row[0] != '|' || row[len(row)-1] != '|' {\\n\\t\\t\\treturn ErrInvalidFrame\\n\\t\\t}\\n\\t\\tif len(row) != l {\\n\\t\\t\\treturn ErrNotRectangle\\n\\t\\t}\\n\\t\\tfor c, cell := range row[1 : len(row)-1] {\\n\\t\\t\\tswitch cell {\\n\\t\\t\\tcase '*':\\n\\t\\t\\tcase ' ':\\n\\t\\t\\t\\tif n := b.bombs(r+1, c+1); n \\u003e 0 {\\n\\t\\t\\t\\t\\tb[r+1][c+1] = byte(n) + '0'\\n\\t\\t\\t\\t}\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\treturn ErrUnknownCharacter\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn nil\\n}\\n\\nvar directions = [][2]int{\\n\\t{-1, -1}, {-1, 0}, {-1, 1},\\n\\t{0, -1}, {0, 1},\\n\\t{1, -1}, {1, 0}, {1, 1},\\n}\\n\\nfunc (b Board) bombs(r, c int) int {\\n\\tn := 0\\n\\tfor _, d := range directions {\\n\\t\\tx, y := d[0]+r, d[1]+c\\n\\t\\tif x \\u003e= 0 \\u0026\\u0026 x \\u003c len(b) \\u0026\\u0026\\n\\t\\t\\ty \\u003e= 0 \\u0026\\u0026 y \\u003c len(b[x]) \\u0026\\u0026\\n\\t\\t\\tb[x][y] == '*' {\\n\\t\\t\\tn++\\n\\t\\t}\\n\\t}\\n\\treturn n\\n}\\n\\nfunc validFrame(row []byte) bool {\\n\\tif row[0] != '+' || row[len(row)-1] != '+' {\\n\\t\\treturn false\\n\\t}\\n\\tfor _, c := range row[1 : len(row)-1] {\\n\\t\\tif c != '-' {\\n\\t\\t\\treturn false\\n\\t\\t}\\n\\t}\\n\\treturn true\\n}"}
44	38	336d250a6dd1415de0f8069d	superseded	scala	hamming	\N	\N	0	1	2015-09-26 04:28:27	2015-09-26 04:28:27	64	{"src/main/scala/hamming.scala":"object Hamming {\\n  def compute(firstString: String, secondString: String)= {\\n    if (firstString.length != secondString.length) throw new IllegalArgumentException\\n    else computeHammingDistance(firstString, secondString)\\n  }\\n\\n\\n  def computeHammingDistance(firstString: String, secondString:String) = {\\n    val zippedTuple = (firstString, secondString).zipped\\n    var counter = 0\\n    zippedTuple.foreach((characterOfFirstString, characterOfSecondString) =\\u003e {\\n      if(characterOfFirstString != characterOfSecondString) counter+=1\\n    })\\n    counter\\n\\n  }\\n}"}
45	38	96c2398b9c0ee3804b108574	pending	scala	hamming	\N	\N	0	2	2015-10-19 01:27:15	2015-10-19 01:27:15	64	{"src/main/scala/hamming.scala":"object Hamming {\\n  def compute(firstString: String, secondString: String)= {\\n    if (firstString.length != secondString.length) throw new IllegalArgumentException\\n    else computeHammingDistance(firstString, secondString)\\n  }\\n\\n\\n  def computeHammingDistance(firstString: String, secondString:String) = {\\n    val zippedTuple = (firstString, secondString).zipped\\n    zippedTuple.count( tuple =\\u003e tuple._1 != tuple._2 )\\n  }\\n}"}
46	38	60c3bce00a42d8814aa5d579	pending	python	largest-series-product	\N	\N	0	1	2015-10-09 00:06:09	2015-10-09 00:06:09	65	{"series.py":"# translates the given string into a list of digits (of type int)\\r\\ndef extract_digits(string):\\r\\n\\tanswer=[]\\r\\n\\tfor d in string:\\r\\n\\t\\tanswer.append(int(d))\\r\\n\\treturn answer\\r\\n\\r\\n# calculates all the size-length slices of the given string interpreted as int's\\r\\n# raises a ValueError if size\\u003elen(string) or size\\u003c=0\\r\\ndef slices(string,size):\\r\\n\\tif size\\u003elen(string) or size\\u003c=0:\\r\\n\\t\\traise ValueError(\\"%s is not a valid size for slices of \\\\\\"%s\\\\\\".\\"%(size,string))\\r\\n\\tanswer=[]\\r\\n\\tfor i in range(len(string)-size+1):\\r\\n\\t\\tanswer.append(extract_digits(string[i:i+size]))\\r\\n\\treturn answer\\r\\n\\r\\n# calculates the product of all arguments (which should be of type int)\\r\\ndef product(*args):\\r\\n\\tanswer=1\\r\\n\\tfor n in args:\\r\\n\\t\\tanswer*=n\\r\\n\\treturn answer\\r\\n\\r\\n# calculates the largest product of all size-length slices of the given string interpreted as ints.\\r\\n# raises a ValueError if size\\u003elen(string)\\r\\ndef largest_product(string,size):\\r\\n\\tif len(string)==size==0:\\r\\n\\t\\treturn 1\\r\\n\\telse:\\r\\n\\t\\treturn max([ product(*x) for x in slices(string,size) ])"}
69	46	ae201bb0aaad3cf4d69a65bb	superseded	coffeescript	bob	\N	\N	0	1	2015-10-30 18:31:02	2015-10-30 18:31:02	111	{"bob.coffee":"class Bob\\n\\n  hey: (message) -\\u003e\\n\\n    question  = /// \\\\?$ ///i\\n    numbers = /// \\\\W ///g\\n\\n    response = switch\\n      when !message.trim() then \\"Fine. Be that way!\\"\\n      when !Number(message.replace(numbers, '')) and message == message.toUpperCase() then \\"Whoa, chill out!\\"\\n      when message.match question then \\"Sure.\\"\\n      else \\"Whatever.\\"\\n\\n    response\\n\\nmodule.exports = Bob"}
78	7	3710de9c0304d47f59f53cd9	pending	clojure	anagram	\N	\N	0	1	2015-11-22 07:24:43	2015-11-22 07:24:43	118	{"anagram.clj":"(ns anagram)\\n\\n(defn check-word [word candidate]\\n  (if (= (.toLowerCase word)  (.toLowerCase candidate))  false\\n    (= (sort (.toLowerCase word)) (sort (.toLowerCase candidate)))))\\n\\n(defn anagrams-for [word candidates]\\n  (filter not-empty (map #(if (check-word word %) %) candidates))\\n )"}
47	40	62439b259f50b80d0975fa64	\N	python	phone-number	\N	\N	0	1	2015-10-08 02:38:05	2015-10-08 02:38:05	70	{"phone.py":"class Phone():\\n    def __init__(self, number):\\n        # validates phone number; if invalid it is set to \\"0000000000\\"\\n        number = number.replace(\\"(\\", \\"\\").replace(\\")\\", \\"\\").replace(\\"-\\", \\"\\").replace(\\" \\", \\"\\").replace(\\".\\", \\"\\")\\n        if len(number) not in range(10, 12) or (len(number) == 11 and number[0] != '1'):\\n            self.number = \\"0000000000\\"\\n            return\\n        if len(number) == 11:\\n            number = number[1:]\\n        try:\\n            n = int(number)\\n            self.number = number\\n        except ValueError:\\n            self.number = \\"0000000000\\"\\n            return\\n        \\n    def area_code(self):\\n        # return area code which is first three digits of number\\n        return self.number[:3]\\n\\n    def pretty(self):\\n        # returns number as pretty string in format: (AAA) BBB-CCCC\\n        return \\"(\\" + self.number[:3] + \\") \\" + self.number[3:6] + \\"-\\" + self.number[6:]"}
48	40	2adb94e9d1294be55a3b066d	hibernating	haskell	allergies	\N	\N	0	1	2015-07-14 00:30:27	2015-07-14 00:30:27	73	{"/haskell/allergies/Allergies.hs":"module Allergies (Allergen(..), isAllergicTo, allergies) where\\n\\nimport Data.List (foldl')\\nimport Data.Char (intToDigit)\\nimport Numeric (showIntAtBase)\\n\\ndata Allergen = Eggs | Peanuts | Shellfish | Strawberries | Tomatoes | Chocolate | Pollen | Cats deriving (Show, Ord, Eq, Enum)\\n\\nallergenList :: [Allergen]\\nallergenList = [Eggs .. Cats]\\n\\nallergies :: Int -\\u003e [Allergen]\\nallergies n = foldl' (\\\\ acc (a,x) -\\u003e if x == '1' then a : acc else acc) [] zippedAL\\n  where\\n    zippedAL = zip (reverse allergenList) . allergenString $ n `mod` 256\\n\\nallergenString :: Int -\\u003e String\\nallergenString n = if lnAS == lnAL\\n                   then toString\\n                   else replicate (lnAL - lnAS) '0' ++ toString\\n where\\n   toString = showIntAtBase 2 intToDigit n \\"\\"\\n   lnAS = length toString\\n   lnAL = length allergenList\\n\\nisAllergicTo :: Allergen -\\u003e Int -\\u003e Bool\\nisAllergicTo a = elem a . allergies"}
49	40	1af6e5456fe6beb8adb55e4b	\N	haskell	grains	\N	\N	0	1	2015-09-23 05:58:48	2015-09-23 05:58:48	74	{"Grains.hs":"module Grains where\\n\\nsquare :: Integer -\\u003e Integer\\nsquare i =\\n    2 ^ (i-1)\\n\\ntotal =\\n    (2 ^ 64) - 1"}
50	40	52175d2763cdd13c94146ca8	pending	javascript	clock	\N	\N	0	1	2015-10-05 00:42:28	2015-10-05 00:42:28	77	{"clock.js":"function zeropad(num, len) {\\n    num = String(num);\\n    while (num.length \\u003c len) {\\n        num = '0' + num;\\n    }\\n    return num;\\n}\\n\\nfunction at(hours, minutes) {\\n    minutes = minutes || 0;\\n    var date = new Date(hours * 3600000 + minutes * 60000);\\n\\n    return {\\n        plus: function (minutes) {\\n            date.setMinutes(date.getMinutes() + minutes);\\n            return this;\\n        },\\n\\n        minus: function (minutes) {\\n            date.setMinutes(date.getMinutes() - minutes);\\n            return this;\\n        },\\n\\n        equals: function (clock) {\\n            return this.toString() === clock.toString();\\n        },\\n\\n        toString: function () {\\n            return zeropad(date.getHours(), 2) + ':' + zeropad(date.getMinutes(), 2);\\n        }\\n    };\\n}\\n\\nmodule.exports = { at: at };"}
51	40	c3d76c39c7df209ae282e1b9	hibernating	python	rna-transcription	\N	\N	0	1	2015-06-17 03:02:35	2015-06-17 03:02:35	78	{"dna.py":"def to_rna(dna_strand):\\n\\trna_strand = ''\\n\\tfor nucleotide in dna_strand:\\n\\t\\trna_strand += get_complement(nucleotide)\\n\\treturn rna_strand\\n\\ndef get_complement(nucleotide):\\n\\tif nucleotide == 'G':\\n\\t\\treturn 'C'\\n\\telif nucleotide == 'C':\\n\\t\\treturn 'G'\\n\\telif nucleotide == 'T':\\n\\t\\treturn 'A'\\n\\telif nucleotide == 'A':\\n\\t\\treturn 'U'\\n\\telse:\\n\\t\\treturn ''"}
52	40	46a88ddd74ff9f5241ade720	pending	python	secret-handshake	\N	\N	0	1	2015-11-03 06:40:59	2015-11-03 06:40:59	79	{"handshake.py":"EVENTS = ('wink',\\n          'double blink',\\n          'close your eyes',\\n          'jump')\\n\\n\\ndef handshake(number):\\n    if isinstance(number, str):\\n        try:\\n            number = int(number, base=2)\\n        except:\\n            number = 0\\n\\n    if number \\u003c= 0:\\n        return []\\n\\n    result = []\\n    for i, event in enumerate(EVENTS):\\n        if number \\u0026 (1 \\u003c\\u003c i):\\n            result.append(event)\\n    if number \\u0026 0b10000:\\n        result.reverse()\\n\\n    return result\\n\\n\\ndef code(events):\\n    number = 0\\n    for event in events:\\n        try:\\n            number += (1 \\u003c\\u003c EVENTS.index(event))\\n        except ValueError:\\n            return \\"0\\"\\n\\n    # test whether the order of events is reversed\\n    if len(events) \\u003e= 2 and EVENTS.index(events[0]) \\u003e EVENTS.index(events[1]):\\n        number += 0b10000\\n\\n    return bin(number)[2:]"}
53	40	28df5d4e6e9da7ecdb819f63	done	python	leap	\N	\N	0	1	2015-07-20 02:38:47	2015-07-20 02:38:47	80	{"year.py":"def is_leap_year(year):\\n    if (year % 400 == 0):\\n        return True;\\n    elif (year % 100 == 0):\\n        return False;\\n    elif (year % 4 == 0):\\n        return True;\\n    else\\n        return False;"}
54	40	3f1e2709debb9c90b897f83b	pending	ruby	binary	\N	\N	0	1	2015-07-30 06:09:49	2015-07-30 06:09:49	85	{"/ruby/binary/binary.rb":"class Binary\\n  attr_reader :string\\n  \\n  def initialize(string)\\n    @string = string\\n  end\\n\\n  def to_decimal\\n    return 0 unless valid_binary?\\n\\n    digits_with_powers.map { |digit, power|\\n      digit.to_i * (2 ** power)\\n    }.reduce(:+)\\n  end\\n\\n  private\\n\\n  def digits_with_powers\\n    string.chars.reverse.each_with_index\\n  end\\n\\n  def valid_binary?\\n    string =~ /\\\\A[01]+\\\\z/\\n  end\\nend"}
55	40	76629b9af280ac1280ce366d	done	ruby	atbash-cipher	\N	\N	0	1	2015-07-10 22:31:14	2015-07-10 22:31:14	89	{"/ruby/atbash-cipher/atbash.rb":"class Atbash\\n  def self.encode(plaintext)\\n    a_to_z = (\\"a\\"..\\"z\\").to_a.join\\n    normalized_text = plaintext.downcase.gsub(/[^a-z0-9]/i,\\"\\")\\n    normalized_text.tr(a_to_z, a_to_z.reverse).scan(/.{,5}/).join(\\" \\").strip\\n  end\\nend"}
56	40	3b877591a8b826090172dbe6	pending	javascript	bob	\N	\N	0	1	2015-07-10 14:53:38	2015-07-10 14:53:38	90	{"bob.js":"//\\r\\n// This is only a SKELETON file for the \\"Bob\\" exercise. It's been provided as a\\r\\n// convenience to get you started writing code faster.\\r\\n//\\r\\n\\r\\nvar Bob = function() {};\\r\\n\\r\\nBob.prototype.hey = function(input) {\\r\\n\\tif (input == input.toUpperCase() \\u0026\\u0026 input.match(/[A-Z]/)) {\\r\\n\\t\\treturn 'Whoa, chill out!';\\r\\n\\t} else if (input.substr(-1) == '?') {\\r\\n\\t\\treturn 'Sure.';\\r\\n\\t} else if (input.match(/^\\\\s*$/)) {\\r\\n\\t\\treturn 'Fine. Be that way!';\\r\\n\\t} else {\\r\\n\\t\\treturn 'Whatever.';\\r\\n\\t}\\r\\n};\\r\\n\\r\\nmodule.exports = Bob;"}
57	40	33356de98d1beee9d8f695a7	pending	scala	anagram	\N	\N	0	1	2015-06-05 14:35:57	2015-06-05 14:35:57	91	{"\\\\scala\\\\anagram\\\\src\\\\main\\\\scala\\\\Anagram.scala":"class Anagram(initStr: String) {\\r\\n\\r\\n  /** Fixed Map reference for the word given in constructor */\\r\\n  val referenceMap = stringToMap(initStr)\\r\\n\\r\\n  def matches(attempts: Seq[String]): Seq[String] = {\\r\\n    attempts.filter(testedStr =\\u003e testedStr.toLowerCase != initStr.toLowerCase \\u0026\\u0026 stringToMap(testedStr) == referenceMap)\\r\\n  }\\r\\n\\r\\n  /** Transform a String into a Map with characters of the word as key and nb of occurrence of the character in the word as value */\\r\\n  private def stringToMap(word: String):Map[Char,Int] = {\\r\\n    word.toLowerCase.toCharArray.distinct.map(c =\\u003e c -\\u003e word.toLowerCase.count(_ == c)).toMap\\r\\n  }\\r\\n\\r\\n}"}
58	40	3b97949cb928aebfd6527221	pending	javascript	space-age	\N	\N	0	1	2015-06-10 01:35:09	2015-06-10 01:35:09	94	{"space-age.js":"var SpaceAge = function(num){\\n\\tthis.seconds = num;\\n}\\n\\nSpaceAge.prototype.onEarth = function(){\\n\\tvar num = this.seconds;\\n\\treturn Math.round((num/31557600)*100)/100;\\n}\\n\\nSpaceAge.prototype.onMercury = function(){\\n\\tvar num = this.onEarth();\\n\\treturn Math.round((num/0.2408467)*100)/100;\\n}\\n\\nSpaceAge.prototype.onVenus = function(){\\n\\tvar num = this.onEarth();\\n\\treturn Math.round((num/0.61519726)*100)/100;\\n}\\n\\nSpaceAge.prototype.onMars = function(){\\n\\tvar num = this.onEarth();\\n\\treturn Math.round((num/1.8808158)*100)/100;\\n}\\n\\nSpaceAge.prototype.onJupiter = function(){\\n\\tvar num = this.onEarth();\\n\\treturn Math.round((num/11.862615)*100)/100;\\n}\\n\\nSpaceAge.prototype.onSaturn = function(){\\n\\tvar num = this.onEarth();\\n\\treturn Math.round((num/29.447498)*100)/100;\\n}\\n\\nSpaceAge.prototype.onUranus = function(){\\n\\tvar num = this.onEarth();\\n\\treturn Math.round((num/84.016846)*100)/100;\\n}\\n\\nSpaceAge.prototype.onNeptune = function(){\\n\\tvar num = this.onEarth();\\n\\treturn Math.round((num/164.79132)*100)/100;\\n}"}
59	40	76dca9d81565b012e3f7a120	hibernating	csharp	sieve	\N	\N	0	1	2015-09-03 01:38:26	2015-09-03 01:38:26	96	{"Sieve.cs":"﻿using System.Collections.Generic;\\r\\nusing System.Collections;\\r\\nusing System.Linq;\\r\\n\\r\\npublic class Sieve\\r\\n{\\r\\n    public readonly List\\u003cint\\u003e Primes;\\r\\n\\r\\n    public Sieve(int limit)\\r\\n    {\\r\\n        Primes = new List\\u003cint\\u003e();\\r\\n        if (limit \\u003e 1)\\r\\n        {\\r\\n            var isPrime = Enumerable.Repeat(true, limit - 1).ToList\\u003cbool\\u003e();\\r\\n            for (int i = 0; i \\u003c limit - 1; i++)\\r\\n            {\\r\\n                if (isPrime[i])\\r\\n                {\\r\\n                    for (int j = 2 * (i + 1); j \\u003c limit - 1; j += (i + 2))\\r\\n                        isPrime[j] = false;\\r\\n                }\\r\\n            }\\r\\n            Primes = isPrime\\r\\n                .Select((b, i) =\\u003e new { Val = i + 2, IsPrime = b })\\r\\n                .Where(elt =\\u003e elt.IsPrime)\\r\\n                .Select(elt =\\u003e elt.Val)\\r\\n                .ToList();\\r\\n        }\\r\\n    }\\r\\n}\\r"}
60	44	a99433f3231e168aea658654	superseded	ruby	rna-transcription	\N	\N	0	2	2015-09-19 12:34:31	2015-09-19 12:34:31	100	{"/ruby/rna-transcription/complement.rb":"module Complement\\n\\n  DNA_NUCLEOTIDES = 'GCTA'\\n  RNA_NUCLEOTIDES = 'CGAU'\\n  \\n  def self.of_dna(dna)\\n    raise ArgumentError,\\"That is not a correct dna sequence.\\" if not_dna?(dna)\\n    dna.tr(DNA_NUCLEOTIDES,RNA_NUCLEOTIDES)\\n  end\\n\\n  def self.not_dna?(dna)\\n    dna !~ /G|C|T|A/\\n  end\\n\\n  def self.of_rna(rna)\\n    raise ArgumentError,\\"That is not a correct rna sequence.\\" if not_rna?(rna) \\n    rna.tr(RNA_NUCLEOTIDES,DNA_NUCLEOTIDES)\\n  end\\n\\n  def self.not_rna?(rna)\\n    rna !~ /C|G|A|U/\\n  end\\nend"}
61	44	d48b4935f96ddec5856f1728	superseded	ruby	rna-transcription	\N	\N	0	3	2015-09-25 07:26:43	2015-09-25 07:26:43	100	{"/ruby/rna-transcription/complement.rb":"module Complement\\n\\n  DNA_NUCLEOTIDES = 'GCTA'\\n  RNA_NUCLEOTIDES = 'CGAU'\\n  \\n  def self.of_dna(dna)\\n    if not_dna?(dna)\\n      raise ArgumentError,\\"#{dna} is not a valid dna sequence. Your\\n      sequence must only contain these nucleotides: #{DNA_NUCLEOTIDES}\\" \\n    end\\n    dna.tr(DNA_NUCLEOTIDES,RNA_NUCLEOTIDES)\\n  end\\n\\n  def self.not_dna?(dna)\\n    dna !~ /G|C|T|A/\\n  end\\n\\n  def self.of_rna(rna)\\n    if not_rna?(rna) \\n      raise ArgumentError,\\"#{rna} is not a valid rna sequence. Your\\n      sequence must only contain these nucleotides: #{RNA_NUCLEOTIDES}\\"\\n    end\\n    rna.tr(RNA_NUCLEOTIDES,DNA_NUCLEOTIDES)\\n  end\\n\\n  def self.not_rna?(rna)\\n    rna !~ /C|G|A|U/\\n  end\\nend"}
62	44	0882966eb9c8813f86d51545	superseded	ruby	rna-transcription	\N	\N	0	1	2015-10-27 23:45:34	2015-10-27 23:45:34	100	{"/ruby/rna-transcription/complement.rb":"class Complement\\n\\n  DNA_NUCLEOTIDES = 'GCTA'\\n  RNA_NUCLEOTIDES = 'CGAU'\\n  \\n  def self.of_dna(dna)\\n    if dna !~ /G|C|T|A/\\n      raise ArgumentError,\\"That is not a correct dna sequence\\"\\n    end\\n    dna.tr(DNA_NUCLEOTIDES,RNA_NUCLEOTIDES)\\n  end\\n\\n  def self.of_rna(rna)\\n    if rna !~ /C|G|A|U/\\n      raise ArgumentError,\\"That is not a correct rna sequence\\"\\n    end\\n    rna.tr(RNA_NUCLEOTIDES,DNA_NUCLEOTIDES)\\n  end\\nend"}
63	44	30adda1cc00eb05eb4ea50f4	hibernating	ruby	rna-transcription	\N	\N	0	4	2015-11-27 07:57:47	2015-11-27 07:57:47	100	{"/ruby/rna-transcription/complement.rb":"module Complement\\n\\n  DNA_NUCLEOTIDES = \\"GCTA\\"\\n  RNA_NUCLEOTIDES = \\"CGAU\\"\\n  \\n  def self.of_dna(dna)\\n    if not_dna?(dna)\\n      raise ArgumentError,\\"#{dna} is not a valid dna sequence. Your\\n      sequence must only contain these nucleotides: #{DNA_NUCLEOTIDES}\\" \\n    end\\n    dna.tr(DNA_NUCLEOTIDES,RNA_NUCLEOTIDES)\\n  end\\n\\n  def self.not_dna?(dna)\\n    dna !~ /[#{DNA_NUCLEOTIDES}]/\\n  end\\n\\n  def self.of_rna(rna)\\n    if not_rna?(rna) \\n      raise ArgumentError,\\"#{rna} is not a valid rna sequence. Your\\n      sequence must only contain these nucleotides: #{RNA_NUCLEOTIDES}\\"\\n    end\\n    rna.tr(RNA_NUCLEOTIDES,DNA_NUCLEOTIDES)\\n  end\\n\\n\\n  def self.not_rna?(rna)\\n    rna !~ /[#{RNA_NUCLEOTIDES}]/\\n  end\\nend"}
64	44	3852ebfec4f11d56c9d37080	\N	haskell	gigasecond	\N	\N	0	1	2015-09-28 14:56:39	2015-09-28 14:56:39	101	{"Gigasecond.hs":"module Gigasecond (fromDay) where\\n\\nimport Data.Time.Clock (UTCTime, addUTCTime)\\n\\nfromDay :: UTCTime -\\u003e UTCTime\\nfromDay t = addUTCTime (10^9) t"}
65	44	d5a21dfa0456a0f3c03fe92b	done	ruby	gigasecond	\N	\N	0	3	2015-11-03 18:33:53	2015-11-03 18:33:53	102	{"gigasecond.rb":"class Gigasecond\\n    GIGASECOND_IN_DAYS = 11574\\n\\n    def self.from(date)\\n        date+GIGASECOND_IN_DAYS\\n    end\\nend"}
66	44	42410e39ac3a81d2fda2f6ea	superseded	ruby	gigasecond	\N	\N	0	2	2015-11-19 15:20:45	2015-11-19 15:20:45	102	{"gigasecond.rb":"#!/usr/bin/env ruby\\n# encoding: UTF-8\\n\\nclass Gigasecond\\n\\tGIGASECOND_IN_DAYS=11574 # 1_000_000_000/(60*60*24)\\n\\n\\tdef self.from(date)\\n\\t\\t@original_date = date\\n\\t\\tself\\n\\tend\\n\\n\\tdef self.date\\n\\t\\t@original_date+GIGASECOND_IN_DAYS\\n\\tend\\n\\nend\\n      "}
67	44	e0780e336bc547c6ad11753f	superseded	ruby	gigasecond	\N	\N	0	1	2015-11-25 22:37:47	2015-11-25 22:37:47	102	{"gigasecond.rb":"#!/usr/bin/env ruby\\n# encoding: UTF-8\\n\\nclass Gigasecond\\n\\tGIGASECOND = 1_000_000_000\\n\\n\\tdef self.from(date)\\n\\t\\t# Convert input date to seconds\\n\\t\\t@seconds = date.to_time.to_i\\n\\t\\tself\\n\\tend\\n\\n\\tdef self.date\\n\\t\\t# Return date of first gigasecond since input date\\n\\t\\tTime.at(GIGASECOND+@seconds).to_date\\n\\tend\\n\\nend"}
68	46	6500a818b87d126bf2633114	superseded	coffeescript	bob	\N	\N	0	5	2015-10-20 02:54:24	2015-10-20 02:54:24	111	{"bob.coffee":"class Bob\\n\\n  hey: (message) -\\u003e\\n    response = switch\\n      when @silence(message) then \\"Fine. Be that way!\\"\\n      when @shouting(message) then \\"Whoa, chill out!\\"\\n      when @question(message) then \\"Sure.\\"\\n      else \\"Whatever.\\"\\n    response\\n\\n  silence: (text) -\\u003e\\n    # If removing spaces returns empty string, fastest found in: http://jsperf.com/empty-string-spaces\\n    text.trim() == ''\\n\\n  shouting: (text) -\\u003e\\n    # If contains letters and its the same as uppercased, fastest found in: http://jsperf.com/empty-string-spaces\\n    /[A-Za-z]/.test(text) \\u0026\\u0026 text == text.toUpperCase()\\n\\n  question: (text) -\\u003e\\n    # If last character is '?', fastest way found in: http://jsperf.com/find-last-char\\n    text[text.length - 1] == '?'\\n\\nmodule.exports = Bob"}
70	46	194daeee35f5e76fe9158ffa	superseded	coffeescript	bob	\N	\N	0	2	2015-11-03 17:27:32	2015-11-03 17:27:32	111	{"bob.coffee":"class Bob\\n\\n  hey: (message) -\\u003e\\n\\n    question  = /// \\\\?$ ///i\\n    symbols = /// \\\\W ///g\\n\\n    response = switch\\n      when !message.trim() then \\"Fine. Be that way!\\"\\n      when !Number(message.replace(symbols, '')) and message == message.toUpperCase() then \\"Whoa, chill out!\\"\\n      when message.match question then \\"Sure.\\"\\n      else \\"Whatever.\\"\\n\\n    response\\n\\nmodule.exports = Bob"}
71	46	b5d28e2320ed30cbe53823d5	superseded	coffeescript	bob	\N	\N	0	3	2015-11-06 10:34:58	2015-11-06 10:34:58	111	{"bob.coffee":"class Bob\\n\\n  hey: (message) -\\u003e\\n    response = switch\\n      when silence(message) then \\"Fine. Be that way!\\"\\n      when shouting(message) then \\"Whoa, chill out!\\"\\n      when question(message) then \\"Sure.\\"\\n      else \\"Whatever.\\"\\n\\n    response\\n\\n  silence: (text) -\\u003e\\n    !text.trim() # If removing spaces returns empty string\\n\\n  shouting: (text) -\\u003e\\n    !numbers(text) and message == message.toUpperCase() # If is the same uppercased and is not only numbers\\n\\n  numbers: (text) -\\u003e\\n    Number(text.replace(/// \\\\W ///g, '')) # If converted to number by removing non word chars\\n\\n    question: (text) -\\u003e\\n    text.match /// \\\\?$ ///i # If last character is '?'\\n\\nmodule.exports = Bob"}
72	46	dba4d5efd1139abc4e770ee2	superseded	coffeescript	bob	\N	\N	0	4	2015-11-09 20:32:28	2015-11-09 20:32:28	111	{"bob.coffee":"class Bob\\n\\n  hey: (message) -\\u003e\\n    response = switch\\n      when @silence(message) then \\"Fine. Be that way!\\"\\n      when @shouting(message) then \\"Whoa, chill out!\\"\\n      when @question(message) then \\"Sure.\\"\\n      else \\"Whatever.\\"\\n\\n    response\\n\\n  silence: (text) -\\u003e\\n    !text.trim() # If removing spaces returns empty string\\n\\n  shouting: (text) -\\u003e\\n    !@numbers(text) and text == text.toUpperCase() # If is the same uppercased and is not only numbers\\n\\n  numbers: (text) -\\u003e\\n    Number(text.replace(/// \\\\W ///g, '')) # If converted to number by removing non word chars\\n\\n  question: (text) -\\u003e\\n    text.match /// \\\\?$ ///i # If last character is '?'\\n\\nmodule.exports = Bob"}
73	46	185e196f3a5bbc0b37af9b7f	done	coffeescript	bob	\N	\N	0	6	2015-11-24 16:28:20	2015-11-24 16:28:20	111	{"bob.coffee":"class Bob\\n\\n  hey: (message) -\\u003e\\n    response = switch\\n      when @silence(message) then \\"Fine. Be that way!\\"\\n      when @shouting(message) then \\"Whoa, chill out!\\"\\n      when @question(message) then \\"Sure.\\"\\n      else \\"Whatever.\\"\\n    response\\n\\n  silence: (text) -\\u003e\\n    # If removing spaces returns empty string, fastest found in: http://jsperf.com/empty-string-spaces\\n    text.trim() is ''\\n\\n  shouting: (text) -\\u003e\\n    # If contains letters and its the same as uppercased, fastest found in: http://jsperf.com/empty-string-spaces\\n    /[A-Za-z]/.test(text) \\u0026\\u0026 text is text.toUpperCase()\\n\\n  question: (text) -\\u003e\\n    # If last character is '?', fastest way found in: http://jsperf.com/find-last-char\\n    text[text.length - 1] is '?'\\n\\nmodule.exports = Bob"}
74	48	fa6e4ef5605d208fd1a28c59	done	javascript	pythagorean-triplet	\N	\N	0	1	2015-11-29 20:51:37	2015-11-29 20:51:37	113	{"pythagorean-triplet.js":"var Triplet = function(x,y,z){\\r\\n\\tthis.sum = function(){\\r\\n\\t\\treturn Number(x) + Number(y) + Number(z);\\r\\n\\t}\\r\\n\\tthis.product = function(){\\r\\n\\t\\treturn Number(x) * Number(y) * Number(z);\\r\\n\\t}\\r\\n\\tthis.isPythagorean = function(){\\r\\n\\t\\tif (Math.pow(x,2) + Math.pow(y,2) == Math.pow(z,2) || Math.pow(y,2) + Math.pow(z,2) == Math.pow(x,2) || Math.pow(x,2) + Math.pow(z,2) == Math.pow(y,2)){\\r\\n\\t\\t\\treturn true;\\r\\n\\t\\t} else {return false;}\\r\\n\\t}\\r\\n\\tTriplet.where = function(filter){\\r\\n\\t\\tif (!filter.minFactor){\\r\\n\\t\\t\\tfilter.minFactor = 1;\\r\\n\\t\\t}\\r\\n\\t\\tvar set = [];\\r\\n\\t\\tvar c = 0;\\r\\n\\t\\tvar as = 0;\\r\\n\\t\\tvar bs = 0;\\r\\n\\t\\tfor (var a = filter.minFactor; a \\u003c= filter.maxFactor; a++){\\r\\n\\t\\t\\tas = Math.pow(a,2);\\r\\n\\t\\t\\tfor (var b = a; b \\u003c= filter.maxFactor; b++){\\r\\n\\t\\t\\t\\tbs = Math.pow(b,2);\\r\\n\\t\\t\\t\\tc = Math.sqrt(as + bs);\\r\\n\\t\\t\\t\\tif (Math.floor(c) == c \\u0026\\u0026 c \\u003c= filter.maxFactor){\\r\\n\\t\\t\\t\\t\\tif (!filter.sum || a + b + c == filter.sum){\\r\\n\\t\\t\\t\\t\\t\\tt = new Triplet(a,b,c);\\r\\n\\t\\t\\t\\t\\t\\tif (set.indexOf(t) == -1){\\r\\n\\t\\t\\t\\t\\t\\t\\tset.push(t);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn set;\\r\\n\\t}\\r\\n}"}
75	49	88aa9fcd0de705f37b1bc3ed	hibernating	javascript	food-chain	\N	\N	0	1	2015-11-10 20:59:34	2015-11-10 20:59:34	114	{"food-chain.js":"var song = {};\\n\\nsong.prefix = [\\n    \\"fly.\\",\\n    \\"spider.\\\\nIt wriggled and jiggled and tickled inside her.\\",\\n    \\"bird.\\\\nHow absurd to swallow a bird!\\",\\n    \\"cat.\\\\nImagine that, to swallow a cat!\\",\\n    \\"dog.\\\\nWhat a hog, to swallow a dog!\\",\\n    \\"goat.\\\\nJust opened her throat and swallowed a goat!\\",\\n    \\"cow.\\\\nI don't know how she swallowed a cow!\\"\\n];\\n\\nsong.middle = [\\n    \\"She swallowed the spider to catch the fly.\\\\n\\",\\n    \\"She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\\\n\\",\\n    \\"She swallowed the cat to catch the bird.\\\\n\\",\\n    \\"She swallowed the dog to catch the cat.\\\\n\\",\\n    \\"She swallowed the goat to catch the dog.\\\\n\\",\\n    \\"She swallowed the cow to catch the goat.\\\\n\\"\\n    ];\\n\\nsong.suffix = \\"I don't know why she swallowed the fly. Perhaps she'll die.\\\\n\\";\\n\\nsong.verse = function(verse) {\\n\\n    if (verse === 8) return \\"I know an old lady who swallowed a horse.\\\\nShe's dead, of course!\\\\n\\";\\n\\n    verse = verse - 1; // zero indexing\\n    var retVal = '',\\n        prefix = '',\\n        middle = '';\\n\\n    // set verse opening\\n    prefix = \\"I know an old lady who swallowed a \\" + this.prefix[verse] + \\"\\\\n\\";\\n\\n    // middle parts as descending sized animals eat each other\\n    if (verse \\u003e 0) {\\n        for (var i = verse; i--;) {\\n            middle += this.middle[i];\\n        }\\n    }\\n\\n    return prefix + middle + this.suffix;\\n};\\n\\nsong.verses = function(first, last) {\\n\\n    // loop over verses, new line between each one\\n    var retVal = '';\\n    for (var j = first; j\\u003c= last; j++) {\\n        retVal += this.verse(j) + '\\\\n';\\n    }\\n    return retVal;\\n};\\n\\nmodule.exports = song;"}
76	26	5a198e9376e393277e0abc47	\N	javascript	bob	\N	\N	0	2	2015-09-17 01:48:28	2015-09-17 01:48:28	117	{"bob.js":"var Bob = function() {};\\n\\nBob.prototype.hey = function( input ) {\\n    'use strict';\\n\\n\\tvar answer = 'Whatever.',\\n\\t    isQuestion = input.slice( -1 ) === '?',\\n\\t    isSilence = !input.match( /\\\\S/ ),\\n\\t    isYelling = input.match( /[a-zA-Z]/g ) \\u0026\\u0026 input.toUpperCase() === input;\\n\\n\\tif ( isYelling ) {\\n\\t  \\tanswer = 'Whoa, chill out!';\\n\\t} else if ( isQuestion ) {\\n        answer = 'Sure.';\\n\\t} else if ( isSilence ) {\\n        answer = 'Fine. Be that way!';\\n\\t}\\n\\n\\treturn answer;\\n};\\n\\nmodule.exports = Bob;"}
77	26	66b3c783fde1591b99e62921	\N	javascript	bob	\N	\N	0	1	2015-10-02 20:30:36	2015-10-02 20:30:36	117	{"bob.js":"var Bob = function() {};\\n\\nBob.prototype.hey = function( input ) {\\n    'use strict';\\n\\n\\t  var answer = 'Whatever.',\\n\\t      isQuestion = input.slice( -1 ) === '?',\\n\\t      isSilence = !input.match( /\\\\S/ ),\\n\\t      isYelling = input.match( /[a-zA-Z]/g ) \\u0026\\u0026 input.toUpperCase() === input;\\n\\n\\t  if ( isYelling ) {\\n\\t  \\t  answer = 'Whoa, chill out!';\\n\\t  } else if ( isQuestion ) {\\n          answer = 'Sure.';\\n\\t  } else if ( isSilence ) {\\n          answer = 'Fine. Be that way!';\\n\\t  }\\n\\n\\t  return answer;\\n};\\n\\nmodule.exports = Bob;"}
79	7	5e06efa23bff13572a1ded57	pending	javascript	sum-of-multiples	\N	\N	0	1	2015-11-12 03:43:25	2015-11-12 03:43:25	120	{"sum-of-multiples.js":"(function() {\\n  function SumOfMultiples(multiples) {\\n    this.multiples = [3, 5];\\n    if(typeof multiples !== 'undefined') {\\n      this.multiples = multiples;\\n    }\\n\\n    return {\\n      to: to.bind(this),\\n    }\\n  }\\n\\n  function to(num) {\\n    var sum = 0;\\n\\n    for(var i = 0; i \\u003c num; i++) {\\n      for(var j = 0; j \\u003c this.multiples.length; j++) {\\n        if(i % this.multiples[j] === 0) {\\n          sum += i;\\n          break;\\n        }\\n      }\\n    }\\n\\n    return sum;\\n  }\\n\\n  module.exports = SumOfMultiples;\\n})();"}
80	7	80ae294ef1891c547ec64895	pending	python	rna-transcription	\N	\N	0	1	2015-10-01 20:26:03	2015-10-01 20:26:03	123	{"dna.py":"__author__ = 'jakesawyer'\\n\\nfrom string import replace\\n\\ndef to_rna(dna):\\n  rna = \\"\\"\\n  for i in dna:\\n    if i == 'G':\\n      rna = rna + 'C'\\n    if i == 'C':\\n      rna = rna + 'G'\\n    if i == 'T':\\n      rna = rna + 'A'\\n    if i == 'A':\\n      rna = rna + 'U'\\n  return rna"}
81	23	553f7f79355042026d62d662	done	go	house	\N	\N	0	1	2015-10-10 05:58:32	2015-10-10 05:58:32	128	{"house.go":"package house\\n\\nfunc Embed(phrase, endPhrase string) string{\\n\\treturn phrase + \\" \\" + endPhrase\\n}\\n\\nfunc Verse(startPhrase string, phrases []string, endPhrase string) string {\\n\\treturn startPhrase + \\" \\" + recurse(phrases, endPhrase)\\n}\\n\\nfunc recurse(phrases []string, endPhrase string) string {\\n\\tif len(phrases) == 0 {\\n\\t\\treturn endPhrase\\n\\t}\\n\\treturn Embed(phrases[0], recurse(phrases[1:], endPhrase))\\n}\\n\\nfunc Song() string {\\n\\tphrases := []string{\\n\\t\\t\\t\\"the horse and the hound and the horn\\\\nthat belonged to\\",\\n\\t\\t\\t\\"the farmer sowing his corn\\\\nthat kept\\",\\n\\t\\t\\t\\"the rooster that crowed in the morn\\\\nthat woke\\",\\n\\t\\t\\t\\"the priest all shaven and shorn\\\\nthat married\\",\\n\\t\\t\\t\\"the man all tattered and torn\\\\nthat kissed\\",\\n\\t\\t\\t\\"the maiden all forlorn\\\\nthat milked\\",\\n\\t\\t\\t\\"the cow with the crumpled horn\\\\nthat tossed\\",\\n\\t\\t\\t\\"the dog\\\\nthat worried\\",\\n\\t\\t\\t\\"the cat\\\\nthat killed\\",\\n\\t\\t\\t\\"the rat\\\\nthat ate\\",\\n\\t\\t\\t\\"the malt\\\\nthat lay in\\",\\n\\t\\t}\\n\\tstartPhrase := \\"This is\\"\\n\\tendPhrase := \\"the house that Jack built.\\"\\n\\n\\ts := startPhrase + \\" \\" + endPhrase\\n\\tfor i := len(phrases) -1 ; i \\u003e= 0; i-- {\\n\\t\\ts += \\"\\\\n\\\\n\\" + Verse(startPhrase, phrases[i:], endPhrase)\\n\\t}\\n\\treturn s\\n}"}
82	23	a553530dccab6578bbfaee0b	done	haskell	space-age	\N	\N	0	1	2015-08-19 21:33:02	2015-08-19 21:33:02	129	{"space-age.hs":"module SpaceAge (Planet(..), ageOn) where\\n\\ndata Planet = Mercury\\n            | Venus\\n            | Earth\\n            | Mars\\n            | Jupiter\\n            | Saturn\\n            | Uranus\\n            | Neptune\\n\\ntype Seconds = Float\\ntype Years = Float\\n\\nageOn :: Planet -\\u003e Seconds -\\u003e Years\\nageOn planet seconds = seconds / secondsPerYear planet\\n\\nsecondsPerYear :: Planet -\\u003e Seconds\\nsecondsPerYear planet = earthYear * case planet of\\n  Mercury -\\u003e 0.2408467\\n  Venus   -\\u003e 0.61519726\\n  Earth   -\\u003e 1\\n  Mars    -\\u003e 1.8808158\\n  Jupiter -\\u003e 11.862615\\n  Saturn  -\\u003e 29.447498\\n  Uranus  -\\u003e 84.016846\\n  Neptune -\\u003e 164.79132\\n  where earthYear = 365.25 * 24 * 60 * 60"}
83	17	36dd45147db52e20a77bc040	hibernating	coffeescript	bob	\N	\N	0	1	2015-06-26 12:53:32	2015-06-26 12:53:32	133	{"bob.coffee":"class Bob\\n  hey: (words) -\\u003e\\n    if /^\\\\s*$/.test words\\n      'Fine. Be that way!'\\n    else if /^[A-Z 0-9,%@#$!(*^]+[!?]?$/.test words\\n      'Woah, chill out!'\\n    else if /\\\\?$/.test words\\n      'Sure.'\\n    else\\n      'Whatever.'\\n\\nmodule.exports = Bob"}
84	20	98f03bc3017ec5e8fbd06c6b	hibernating	php	rna-transcription	\N	\N	0	1	2015-06-19 07:31:53	2015-06-19 07:31:53	134	{"/php/rna-transcription/rna-transcription.php":"\\u003c?php \\n    function toRna($dna)\\n    {\\n        $translate = array(\\"G\\" =\\u003e \\"C\\", \\"C\\" =\\u003e \\"G\\", \\"T\\" =\\u003e \\"A\\", \\"A\\" =\\u003e \\"U\\");\\n        $rna = \\"\\";\\n        $chars = str_split($dna);\\n        foreach($chars as $char){\\n            $rna = $rna.$translate[$char];\\n        }\\n        return $rna;\\n    }\\n\\n?\\u003e"}
85	20	e9bb3691915a2c6399b74fe0	pending	ruby	strain	\N	\N	0	2	2015-05-11 14:39:20	2015-05-11 14:39:20	137	{"/ruby/strain/array.rb":"module Strainable\\n\\n  def keep\\n    self.map { |x| x if yield(x) }.compact if block_given?\\n  end\\n\\n  def discard\\n    keep { |item| !yield(item) } if block_given?\\n  end\\n\\nend\\n\\nclass Array  \\n  include Strainable\\nend"}
86	20	38cc991b8e739635344c5705	superseded	ruby	strain	\N	\N	0	1	2015-08-19 08:32:21	2015-08-19 08:32:21	137	{"/ruby/strain/array.rb":"class Array\\n\\n  def keep\\n    self.map { |x| x if yield(x) }.compact if block_given?\\n  end\\n\\n  def discard\\n    self.map { |x| x if !yield(x) }.compact if block_given?\\n  end\\n\\nend"}
87	20	09e7a442c1670032fee5d339	\N	ruby	rna-transcription	\N	\N	0	2	2015-08-14 18:28:16	2015-08-14 18:28:16	138	{"rna_transcription.rb":"class Complement \\n  VERSION = 2\\n  \\n  def self.of_dna(string)\\n    fail ArgumentError, 'wrong character in DNA strand' if string =~ /[^ACGT]/\\n    string.tr 'CGTA', 'GCAU'\\n  end\\n\\n  def self.of_rna(string)\\n    fail ArgumentError, 'wrong character in DNA strand' if string =~ /[^ACGU]/\\n    string.tr 'CGUA', 'GCAT'\\n  end\\nend"}
88	20	8a5a616d716aa993cbe378bf	\N	ruby	rna-transcription	\N	\N	0	1	2015-11-05 01:07:03	2015-11-05 01:07:03	138	{"rna_transcription.rb":"class Complement \\n  VERSION = 2\\n  Dictionary = [[\\"G\\",\\"C\\"],[\\"C\\",\\"G\\"],[\\"T\\",\\"A\\"],[\\"A\\",\\"U\\"]]\\n  \\n\\n  def self.of_dna(string)\\n    rna = ''\\n    \\n    string.each_char { |ch|\\n      case ch\\n      when 'G'\\n        rna += 'C'\\n      when 'C'\\n        rna += 'G'\\n      when 'T'\\n        rna += 'A'\\n      when 'A'\\n        rna += 'U'\\n      else\\n        fail ArgumentError, 'wrong character in DNA string'\\n      end        \\n    }\\n\\n    return rna\\n  end\\n\\n  def self.of_rna(string)\\n    dna = ''\\n    \\n    string.each_char { |ch|\\n      case ch\\n      when 'C'\\n        dna += 'G'\\n      when 'G'\\n        dna += 'C'\\n      when 'A'\\n        dna += 'T'\\n      when 'U'\\n        dna += 'A'\\n      else\\n        fail ArgumentError, 'wrong character in RNA string'\\n      end        \\n    }\\n\\n    return dna\\n  end  \\nend"}
89	21	8c8314176dadf5e7e03256df	\N	javascript	rna-transcription	\N	\N	0	4	2015-11-20 10:51:18	2015-11-20 10:51:18	140	{"rna_transcription.js":"var rnaTranscriptionTable = {\\n  C: 'G',\\n  G: 'C',\\n  A: 'U',\\n  T: 'A'\\n}\\nvar toRna = function(dna){\\n  return dna.split('').map(function(e){\\n    return rnaTranscriptionTable[e];\\n  }).join('');\\n}\\n\\nmodule.exports = toRna;"}
90	21	c6e466f45b5c061ab938368f	\N	javascript	rna-transcription	\N	\N	0	3	2015-11-21 17:31:13	2015-11-21 17:31:13	140	{"rna_transcription.js":"var rnaTranscriptionTable = {\\n  C: 'G',\\n  G: 'C',\\n  A: 'U',\\n  T: 'A'\\n}\\nvar toRna = function(dna){\\n  var transcribedRna = [];\\n  for(var i = 0; i\\u003cdna.length; i++){\\n    transcribedRna.push(rnaTranscriptionTable[dna[i]]);\\n  }\\n  return transcribedRna.join('');\\n}\\n\\nmodule.exports = toRna;"}
91	21	b2c3ec3f2aa4057fe47d2b87	\N	javascript	rna-transcription	\N	\N	0	2	2015-11-27 13:21:07	2015-11-27 13:21:07	140	{"rna_transcription.js":"var rnaTranslationMap = {\\n  'C': 'G',\\n  'G': 'C',\\n  'A': 'U',\\n  'T': 'A'\\n}\\nvar toRna = function(dna){\\n  var transcribedRna = [];\\n  for(var i = 0; i\\u003cdna.length; i++){\\n    transcribedRna.push(rnaTranslationMap[dna[i]]);\\n  }\\n  return transcribedRna.join('');\\n}\\n\\nmodule.exports = toRna;"}
92	21	3c19993972f8da877364e1e9	\N	javascript	rna-transcription	\N	\N	0	1	2015-12-11 15:17:29	2015-12-11 15:17:29	140	{"rna_transcription.js":"var rnaTranslationMap = {\\n  'C': 'G',\\n  'G': 'C',\\n  'A': 'U',\\n  'T': 'A'\\n}\\nvar toRna = function(dna){\\n  var transcribedRna = [];\\n  for(var i = 0; i\\u003cdna.length; i++){\\n    var translatedNucleotide = rnaTranslationMap[dna[i]];\\n    transcribedRna.push(translatedNucleotide);\\n  }\\n  return transcribedRna.join('');\\n}\\n\\nmodule.exports = toRna;"}
93	21	f8ae8ec71c0fb707538d9723	superseded	haskell	simple-linked-list	\N	\N	0	2	2015-12-04 03:24:12	2015-12-04 03:24:12	141	{"\\\\haskell\\\\simple-linked-list\\\\LinkedList.hs":"module LinkedList where\\r\\n\\r\\ndata List a = Nil | (:::) a (List a)\\r\\n              deriving (Eq, Show)\\r\\n              \\r\\nnil :: List a\\r\\nnil = Nil\\r\\n\\r\\nnew :: a -\\u003e List a -\\u003e List a\\r\\nnew x = (x :::)\\r\\n\\r\\nisNil :: List a -\\u003e Bool\\r\\nisNil Nil = True\\r\\nisNil _   = False\\r\\n\\r\\ndatum :: List a -\\u003e a\\r\\ndatum Nil = error \\"empty list\\"\\r\\ndatum (x:::_) = x\\r\\n\\r\\nnext :: List a -\\u003e List a\\r\\nnext Nil = error \\"empty list\\"\\r\\nnext (_:::xs) = xs\\r\\n\\r\\ntoList :: List a -\\u003e [a]\\r\\ntoList Nil = []\\r\\ntoList (x:::xs) = x : toList xs\\r\\n\\r\\nfromList :: [a] -\\u003e List a\\r\\nfromList = foldr (:::) Nil\\r\\n\\r\\nreverseLinkedList :: List a -\\u003e List a\\r\\nreverseLinkedList = reverseLL Nil\\r\\n  where\\r\\n    reverseLL xs Nil = xs\\r\\n    reverseLL xs (y:::ys) = reverseLL (y ::: xs) ys"}
94	21	3225cf5cf498a61fcac38a7c	superseded	haskell	simple-linked-list	\N	\N	0	1	2015-12-06 19:06:21	2015-12-06 19:06:21	141	{"\\\\haskell\\\\simple-linked-list\\\\LinkedList.hs":"module LinkedList where\\r\\n\\r\\ndata List a = Nil | (:::) a (List a)\\r\\n\\r\\nnil :: List a\\r\\nnil = Nil\\r\\n\\r\\nnew :: a -\\u003e List a -\\u003e List a\\r\\nnew x xs = x ::: xs\\r\\n\\r\\nisNil :: List a -\\u003e Bool\\r\\nisNil Nil = True\\r\\nisNil _   = False\\r\\n\\r\\ndatum :: List a -\\u003e a\\r\\ndatum Nil = error \\"empty list\\"\\r\\ndatum (x:::_) = x\\r\\n\\r\\nnext :: List a -\\u003e List a\\r\\nnext Nil = error \\"empty list\\"\\r\\nnext (_:::xs) = xs\\r\\n\\r\\ntoList :: List a -\\u003e [a]\\r\\ntoList Nil = []\\r\\ntoList (x:::xs) = x : toList xs\\r\\n\\r\\nfromList :: [a] -\\u003e List a\\r\\nfromList [] = Nil\\r\\nfromList (x:xs) = x ::: fromList xs\\r\\n\\r\\nreverseLinkedList :: List a -\\u003e List a\\r\\nreverseLinkedList = reverseLL Nil\\r\\n  where\\r\\n    reverseLL xs Nil = xs\\r\\n    reverseLL xs (y:::ys) = reverseLL (y ::: xs) ys"}
95	21	d3cc5431d1d9ad1f11640ca1	done	haskell	simple-linked-list	\N	\N	0	3	2015-12-22 10:04:26	2015-12-22 10:04:26	141	{"\\\\haskell\\\\simple-linked-list\\\\LinkedList.hs":"module LinkedList where\\r\\n\\r\\ndata List a = Nil | (:::) a (List a)\\r\\n              deriving (Eq, Show)\\r\\n              \\r\\nnil :: List a\\r\\nnil = Nil\\r\\n\\r\\nnew :: a -\\u003e List a -\\u003e List a\\r\\nnew x = (x :::)\\r\\n\\r\\nisNil :: List a -\\u003e Bool\\r\\nisNil Nil = True\\r\\nisNil _   = False\\r\\n\\r\\ndatum :: List a -\\u003e a\\r\\ndatum Nil = error \\"empty list\\"\\r\\ndatum (x:::_) = x\\r\\n\\r\\nnext :: List a -\\u003e List a\\r\\nnext Nil = error \\"empty list\\"\\r\\nnext (_:::xs) = xs\\r\\n\\r\\ntoList :: List a -\\u003e [a]\\r\\ntoList Nil = []\\r\\ntoList (x:::xs) = x : toList xs\\r\\n\\r\\nfromList :: [a] -\\u003e List a\\r\\nfromList = foldr (:::) Nil\\r\\n\\r\\nreverseLinkedList :: List a -\\u003e List a\\r\\nreverseLinkedList = reverseAcc Nil\\r\\n  where\\r\\n    reverseAcc xs Nil = xs\\r\\n    reverseAcc xs (y:::ys) = reverseAcc (y ::: xs) ys"}
96	21	0ff33872c356a7721605b64e	\N	ruby	word-count	\N	\N	0	1	2015-12-14 06:07:32	2015-12-14 06:07:32	142	{"word_count.rb":"class Phrase\\n  VERSION = 1\\n  @phrase\\n  def initialize (phrase)\\n    @phrase = phrase.downcase.scan(/[a-z1-9]+(?:\\\\'[a-z1-9]+)?/)\\n  end\\n  def word_count\\n    result = Hash.new\\n    @phrase.each{|x| result[x] = result[x].to_i+1}\\n    result\\n  end\\nend"}
97	21	d2d746ad9265b2e7a723ef71	\N	ruby	grade-school	\N	\N	0	1	2015-12-15 17:43:09	2015-12-15 17:43:09	143	{"grade_school.rb":"class School\\n  VERSION=1\\n  def initialize\\n    @school=Hash.new([])\\n  end\\n\\n  def add(str,int)\\n    @school[int] += [str]\\n  end\\n\\n  def grade(int)\\n    @school[int].sort\\n  end\\n\\n  def to_h\\n    @school.keys.sort.inject({}) do |result,key|\\n      result[key]=@school[key].sort\\n      result\\n    end  \\n  end\\n\\nend"}
98	21	9fb90da506017570c659ae0d	pending	cpp	roman-numerals	\N	\N	0	1	2015-12-15 12:35:30	2015-12-15 12:35:30	146	{"roman_numerals.h":"#pragma once\\r\\n#include \\u003cstring\\u003e\\r\\n\\r\\nnamespace roman {\\r\\n\\tstd::string convert(unsigned number) {\\r\\n\\t\\tstd::string ret;\\r\\n\\t\\t// thousands\\r\\n\\t\\tif (number \\u003e= 1000) {\\r\\n\\t\\t\\tunsigned thousands = number / 1000;\\r\\n\\t\\t\\tnumber %= 1000;\\r\\n\\t\\t\\tret += std::string(thousands, 'M');\\r\\n\\t\\t}\\r\\n\\t\\t// hundreds\\r\\n\\t\\tif (number \\u003e= 100) {\\r\\n\\t\\t\\tunsigned hundreds = number / 100;\\r\\n\\t\\t\\tnumber %= 100;\\r\\n\\t\\t\\tif (hundreds == 9) {\\r\\n\\t\\t\\t\\tret += \\"CM\\";\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse if (hundreds == 4) {\\r\\n\\t\\t\\t\\tret += \\"CD\\";\\r\\n\\t\\t\\t} \\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tif (hundreds \\u003e= 5) {\\r\\n\\t\\t\\t\\t\\tret += \\"D\\";\\r\\n\\t\\t\\t\\t\\thundreds -= 5;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tret += std::string(hundreds, 'C');\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t// tens\\r\\n\\t\\tif (number \\u003e= 10) {\\r\\n\\t\\t\\tunsigned tens = number / 10;\\r\\n\\t\\t\\tnumber %= 10;\\r\\n\\t\\t\\tif (tens == 9) {\\r\\n\\t\\t\\t\\tret += \\"XC\\";\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse if (tens == 4) {\\r\\n\\t\\t\\t\\tret += \\"XL\\";\\r\\n\\t\\t\\t} \\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tif (tens \\u003e= 5) {\\r\\n\\t\\t\\t\\t\\tret += \\"L\\";\\r\\n\\t\\t\\t\\t\\ttens -= 5;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tret += std::string(tens, 'X');\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t// units\\r\\n\\t\\tif (number \\u003e= 0) {\\r\\n\\t\\t\\tif (number == 9) {\\r\\n\\t\\t\\t\\tret += \\"IX\\";\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse if (number == 4) {\\r\\n\\t\\t\\t\\tret += \\"IV\\";\\r\\n\\t\\t\\t} \\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tif (number \\u003e= 5) {\\r\\n\\t\\t\\t\\t\\tret += \\"V\\";\\r\\n\\t\\t\\t\\t\\tnumber -= 5;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tret += std::string(number, 'I');\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn ret;\\r\\n\\t}\\r\\n}"}
99	21	8cfa31a10777589706373662	done	ruby	hamming	\N	\N	0	1	2015-12-08 20:17:27	2015-12-08 20:17:27	148	{"hamming.rb":"# Write a program that can calculate the Hamming difference between two DNA strands.\\nclass Hamming\\n  def self.compute(a, b)\\n    new(a, b).compute\\n  end\\n\\n  def initialize(a, b)\\n    @a, @b = a, b\\n  end\\n\\n  def compute\\n    0.upto(length - 1).inject(0) do |memo, idx|\\n      memo += 1 if @a[idx] != @b[idx]\\n\\n      memo\\n    end\\n  end\\n\\nprivate\\n\\n  def length\\n    [@a.length, @b.length].min\\n  end\\n\\nend"}
100	21	0f59ee8159525b6eb28a9ea3	superseded	csharp	difference-of-squares	\N	\N	0	2	2015-11-22 02:55:01	2015-11-22 02:55:01	150	{"DifferenceOfSquares.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\n\\r\\npublic class Squares\\r\\n{\\r\\n    private readonly List\\u003cint\\u003e _range;\\r\\n    public Squares(int size)\\r\\n    {\\r\\n        if (size \\u003c 0)\\r\\n            throw new ArgumentException();\\r\\n\\r\\n        _range = Enumerable.Range(1, size).ToList();\\r\\n    }\\r\\n\\r\\n    public int SquareOfSums()\\r\\n    {\\r\\n        return (int)Math.Pow(_range.Sum(), 2);\\r\\n    }\\r\\n\\r\\n    public int SumOfSquares()\\r\\n    {\\r\\n        return _range.Select(i =\\u003e i*i)\\r\\n                     .Sum();\\r\\n    }\\r\\n\\r\\n    public int DifferenceOfSquares()\\r\\n    {\\r\\n        return SquareOfSums() - SumOfSquares();\\r\\n    }\\r\\n}\\r\\n\\r"}
151	41	f9726783a4cb3c6b761c4256	superseded	ruby	anagram	\N	\N	0	2	2015-08-21 23:23:02	2015-08-21 23:23:02	218	{"anagram.rb":"class Anagram\\n\\n  def initialize(word)\\n    @word = word.downcase\\n    @letters = @word.chars.sort\\n  end\\n  \\n  def match(anagrams)\\n    match = Array.new\\n    anagrams.each do |anagram|\\n      a = anagram.downcase\\n      if a != @word \\u0026\\u0026 a.chars.sort == @letters\\n        match.push anagram\\n      end\\n    end\\n    return match\\n  end  \\n  \\nend"}
101	21	bd787060b4e6ef58dc110cc6	superseded	csharp	difference-of-squares	\N	\N	0	1	2015-11-26 15:08:51	2015-11-26 15:08:51	150	{"DifferenceOfSquares.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\n\\r\\npublic class Squares\\r\\n{\\r\\n    private readonly List\\u003cint\\u003e _range;\\r\\n    public Squares(int size)\\r\\n    {\\r\\n        if (size \\u003c 0)\\r\\n            throw new ArgumentException();\\r\\n\\r\\n        _range = Enumerable.Range(1, size).ToList();\\r\\n    }\\r\\n\\r\\n    public int SquareOfSums()\\r\\n    {\\r\\n        return Enumerable.Repeat(_range.Sum(), 2)\\r\\n                         .Aggregate((i, prod) =\\u003e i*prod);\\r\\n    }\\r\\n\\r\\n    public int SumOfSquares()\\r\\n    {\\r\\n        return _range.Select(i =\\u003e i*i)\\r\\n                     .Sum();\\r\\n    }\\r\\n\\r\\n    public int DifferenceOfSquares()\\r\\n    {\\r\\n        return SquareOfSums() - SumOfSquares();\\r\\n    }\\r\\n}\\r\\n\\r"}
102	21	dbae6324981bd578a3043dbb	superseded	csharp	difference-of-squares	\N	\N	0	3	2015-12-08 00:26:56	2015-12-08 00:26:56	150	{"DifferenceOfSquares.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Diagnostics;\\r\\nusing System.Linq;\\r\\nusing NUnit.Framework;\\r\\n\\r\\npublic class Squares\\r\\n{\\r\\n    private readonly IEnumerable\\u003clong\\u003e _range;\\r\\n    public Squares(int size)\\r\\n    {\\r\\n        if (size \\u003c 0)\\r\\n            throw new ArgumentException();\\r\\n\\r\\n        _range = Iota(1L, size);\\r\\n    }\\r\\n\\r\\n    public long SquareOfSums()\\r\\n    {\\r\\n        return (long)Math.Pow(_range.Sum(), 2);\\r\\n    }\\r\\n\\r\\n    public long SumOfSquares()\\r\\n    {\\r\\n        return _range.Sum(i =\\u003e i*i);\\r\\n    }\\r\\n\\r\\n    public long DifferenceOfSquares(int version = 0)\\r\\n    {\\r\\n        switch (version)\\r\\n        {\\r\\n            case 0:\\r\\n                return DifferenceOfSquaresImplTwice();\\r\\n            case 1:\\r\\n                return DifferenceOfSquaresImplOnce();\\r\\n            case 2:\\r\\n                return DifferenceOfSquaresImplLinq();\\r\\n        }\\r\\n        return 0L;\\r\\n    }\\r\\n\\r\\n    private long DifferenceOfSquaresImplTwice()\\r\\n    {\\r\\n        return SquareOfSums() - SumOfSquares();    \\r\\n    }\\r\\n\\r\\n    private long DifferenceOfSquaresImplOnce()\\r\\n    {\\r\\n        var sumOfSquares = 0L;\\r\\n        var sum = 0L;\\r\\n        foreach (var i in _range)\\r\\n        {\\r\\n            sumOfSquares += i * i;\\r\\n            sum += i;\\r\\n        }\\r\\n        return (sum*sum) - sumOfSquares;\\r\\n    }\\r\\n\\r\\n    private long DifferenceOfSquaresImplLinq()\\r\\n    {\\r\\n        var pair = _range.Aggregate(new[] {0L, 0L}, (a, i) =\\u003e\\r\\n        {\\r\\n            a[0] += i*i;\\r\\n            a[1] += i;\\r\\n            return a;\\r\\n        });\\r\\n        return pair[1]*pair[1] - pair[0];\\r\\n    }\\r\\n\\r\\n    private static IEnumerable\\u003clong\\u003e Iota(long s, long e)\\r\\n    {\\r\\n        while (s\\u003c=e) yield return s++;\\r\\n    }\\r\\n}\\r\\n\\r\\ninternal class Test\\r\\n{\\r\\n    private static object[] _version = {0, 1,2};\\r\\n\\r\\n    [Test, TestCaseSource(\\"_version\\")]\\r\\n    public void Test_difference_of_sums_to_100(int v)\\r\\n    {\\r\\n        Assert.That(new Squares(100).DifferenceOfSquares(v), Is.EqualTo(25164150));\\r\\n    }\\r\\n\\r\\n    [Test, TestCaseSource(\\"_version\\")]\\r\\n    public void Test_difference_of_sums_0(int v)\\r\\n    {\\r\\n        Assert.That(new Squares(0).DifferenceOfSquares(v), Is.EqualTo(0));\\r\\n    }\\r\\n\\r\\n\\r\\n    private static object[] _sizes = {100, 1000, 10000, 20000, 30000, 40000};\\r\\n\\r\\n    [Test, TestCaseSource(\\"_sizes\\")]\\r\\n    public void Versions_twice_to_size(int size)\\r\\n    {\\r\\n        Versions_to_size_Impl(size, 0);\\r\\n    }\\r\\n\\r\\n    [Test, TestCaseSource(\\"_sizes\\")]\\r\\n    public void Versions_once_to_size(int size)\\r\\n    {\\r\\n        Versions_to_size_Impl(size, 1);\\r\\n    }\\r\\n\\r\\n    private void Versions_to_size_Impl(int size, int version)\\r\\n    {\\r\\n        var squares = new Squares(size);\\r\\n        var squareOfSums = squares.SquareOfSums();\\r\\n        var sumOfSquares = squares.SumOfSquares();\\r\\n        var expected = squareOfSums - sumOfSquares;\\r\\n        Assert.That(squares.DifferenceOfSquares(version), Is.EqualTo(expected));\\r\\n    }\\r\\n\\r\\n    [Test]\\r\\n    public void Performance_of_versions()\\r\\n    {\\r\\n        var squares = new Squares(40000);\\r\\n        var watch = new Stopwatch();\\r\\n        foreach (int v in _version)\\r\\n        {\\r\\n            watch.Reset();\\r\\n            watch.Start();\\r\\n            var actual = squares.DifferenceOfSquares(v);\\r\\n            watch.Stop();\\r\\n            Console.WriteLine(\\"version= \\" + v + \\", time= \\" + watch.Elapsed);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r"}
103	21	6b48fcc6bc46834c2b73032c	pending	csharp	difference-of-squares	\N	\N	0	4	2015-12-17 09:44:50	2015-12-17 09:44:50	150	{"\\\\csharp\\\\difference-of-squares\\\\difference-of-squares\\\\DifferenceOfSquares.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Diagnostics;\\r\\nusing System.Diagnostics.CodeAnalysis;\\r\\nusing System.Linq;\\r\\nusing NUnit.Framework;\\r\\n\\r\\n/// \\u003csummary\\u003e\\r\\n/// The squares.\\r\\n/// \\u003c/summary\\u003e\\r\\npublic class Squares\\r\\n{\\r\\n    /// \\u003csummary\\u003e\\r\\n    /// The _range.\\r\\n    /// \\u003c/summary\\u003e\\r\\n    private readonly IEnumerable\\u003clong\\u003e _range;\\r\\n\\r\\n    /// \\u003csummary\\u003e\\r\\n    /// Initializes a new instance of the \\u003csee cref=\\"Squares\\"/\\u003e class.\\r\\n    /// \\u003c/summary\\u003e\\r\\n    /// \\u003cparam name=\\"size\\"\\u003e\\r\\n    /// The size.\\r\\n    /// \\u003c/param\\u003e\\r\\n    /// \\u003cexception cref=\\"ArgumentException\\"\\u003e\\r\\n    /// \\u003c/exception\\u003e\\r\\n    public Squares(int size)\\r\\n    {\\r\\n        if (size \\u003c 0) throw new ArgumentException();\\r\\n\\r\\n        //_range = Iota(1L, size);\\r\\n        _range = Enumerable.Range(1, size).Select(i=\\u003e(long)i);\\r\\n    }\\r\\n\\r\\n    /// \\u003csummary\\u003e\\r\\n    /// The square of sums.\\r\\n    /// \\u003c/summary\\u003e\\r\\n    /// \\u003creturns\\u003e\\r\\n    /// The \\u003csee cref=\\"long\\"/\\u003e.\\r\\n    /// \\u003c/returns\\u003e\\r\\n    public long SquareOfSums()\\r\\n    {\\r\\n        // return (long)Math.Pow(_range.Sum(), 2);\\r\\n        // avoids floating point arithmetic.\\r\\n        var sum= _range.Sum();\\r\\n        return sum * sum;\\r\\n    }\\r\\n\\r\\n    /// \\u003csummary\\u003e\\r\\n    /// The sum of squares.\\r\\n    /// \\u003c/summary\\u003e\\r\\n    /// \\u003creturns\\u003e\\r\\n    /// The \\u003csee cref=\\"long\\"/\\u003e.\\r\\n    /// \\u003c/returns\\u003e\\r\\n    public long SumOfSquares()\\r\\n    {\\r\\n        return _range.Sum(i =\\u003e i*i);\\r\\n    }\\r\\n\\r\\n    /// \\u003csummary\\u003e\\r\\n    /// The difference of squares.\\r\\n    /// \\u003c/summary\\u003e\\r\\n    /// \\u003cparam name=\\"version\\"\\u003e\\r\\n    /// The version.\\r\\n    /// \\u003c/param\\u003e\\r\\n    /// \\u003creturns\\u003e\\r\\n    /// The \\u003csee cref=\\"long\\"/\\u003e.\\r\\n    /// \\u003c/returns\\u003e\\r\\n    public long DifferenceOfSquares(int version = 0)\\r\\n    {\\r\\n        switch (version)\\r\\n        {\\r\\n            case 0:\\r\\n                return DifferenceOfSquaresImplTwice();\\r\\n            case 1:\\r\\n                return DifferenceOfSquaresImplOnce();\\r\\n            case 2:\\r\\n                return DifferenceOfSquaresImplLinq();\\r\\n            case 3:\\r\\n                return DifferenceOfSquaresImplFast();\\r\\n\\r\\n        }\\r\\n        return 0L;\\r\\n    }\\r\\n\\r\\n    /// \\u003csummary\\u003e\\r\\n    /// The difference of squares impl fast.\\r\\n    /// \\u003c/summary\\u003e\\r\\n    /// \\u003creturns\\u003e\\r\\n    /// The \\u003csee cref=\\"long\\"/\\u003e.\\r\\n    /// \\u003c/returns\\u003e\\r\\n    [SuppressMessage(\\"StyleCop.CSharp.DocumentationRules\\", \\"SA1650:ElementDocumentationMustBeSpelledCorrectly\\", Justification = \\"Reviewed. Suppression is OK here.\\")]\\r\\n    private long DifferenceOfSquaresImplFast()\\r\\n    {\\r\\n        if (!_range.Any()) return 0;\\r\\n        var n = _range.Last();\\r\\n        var squareOfSum = ((n * n) * (n + 1L) * (n + 1L))/4L;\\r\\n        var sumOfSquare = (2L*(n * n * n) + 3L*(n * n) + n) / 6L;\\r\\n        return squareOfSum - sumOfSquare;\\r\\n    }\\r\\n\\r\\n    /// \\u003csummary\\u003e\\r\\n    /// The difference of squares impl twice.\\r\\n    /// \\u003c/summary\\u003e\\r\\n    /// \\u003creturns\\u003e\\r\\n    /// The \\u003csee cref=\\"long\\"/\\u003e.\\r\\n    /// \\u003c/returns\\u003e\\r\\n    private long DifferenceOfSquaresImplTwice()\\r\\n    {\\r\\n        return SquareOfSums() - SumOfSquares();    \\r\\n    }\\r\\n\\r\\n    private long DifferenceOfSquaresImplOnce()\\r\\n    {\\r\\n        var sumOfSquares = 0L;\\r\\n        var sum = 0L;\\r\\n        foreach (var i in _range)\\r\\n        {\\r\\n            sumOfSquares += i * i;\\r\\n            sum += i;\\r\\n        }\\r\\n        return (sum*sum) - sumOfSquares;\\r\\n    }\\r\\n\\r\\n    private long DifferenceOfSquaresImplLinq()\\r\\n    {\\r\\n        return _range.Aggregate(new[] {0L, 0L}, \\r\\n            (a, i) =\\u003e\\r\\n            {\\r\\n                a[0] += i*i;\\r\\n                a[1] += i;\\r\\n                return a;\\r\\n            }\\r\\n            ,a=\\u003ea[1]*a[1]-a[0]);\\r\\n    }\\r\\n}\\r\\n\\r\\ninternal class Test\\r\\n{\\r\\n    private static object[] _version = {0, 1,2,3};\\r\\n\\r\\n    [Test, TestCaseSource(\\"_version\\")]\\r\\n    public void Test_difference_of_sums_to_100(int v)\\r\\n    {\\r\\n        Assert.That(new Squares(100).DifferenceOfSquares(v), Is.EqualTo(25164150));\\r\\n    }\\r\\n\\r\\n    [Test, TestCaseSource(\\"_version\\")]\\r\\n    public void Test_difference_of_sums_0(int v)\\r\\n    {\\r\\n        Assert.That(new Squares(0).DifferenceOfSquares(v), Is.EqualTo(0));\\r\\n    }\\r\\n\\r\\n\\r\\n    private static object[] _sizes = {100, 1000, 10000, 20000, 30000, 40000};\\r\\n\\r\\n    [Test, TestCaseSource(\\"_sizes\\")]\\r\\n    public void Versions_twice_to_size(int size)\\r\\n    {\\r\\n        Versions_to_size_Impl(size, 0);\\r\\n    }\\r\\n\\r\\n    [Test, TestCaseSource(\\"_sizes\\")]\\r\\n    public void Versions_fast_to_size(int size)\\r\\n    {\\r\\n        Versions_to_size_Impl(size, 3);\\r\\n    }\\r\\n\\r\\n    private void Versions_to_size_Impl(int size, int version)\\r\\n    {\\r\\n        var squares = new Squares(size);\\r\\n        var squareOfSums = squares.SquareOfSums();\\r\\n        var sumOfSquares = squares.SumOfSquares();\\r\\n        var expected = squareOfSums - sumOfSquares;\\r\\n        Assert.That(squares.DifferenceOfSquares(version), Is.EqualTo(expected));\\r\\n    }\\r\\n\\r\\n    [Test]\\r\\n    public void Performance_of_versions()\\r\\n    {\\r\\n        var squares = new Squares(40000);\\r\\n        var watch = new Stopwatch();\\r\\n        foreach (int v in _version)\\r\\n        {\\r\\n            var average = new List\\u003clong\\u003e();\\r\\n            foreach(var i in Enumerable.Range(1,100))\\r\\n            {\\r\\n                watch.Reset();\\r\\n                watch.Start();\\r\\n                var actual = squares.DifferenceOfSquares(v);\\r\\n                watch.Stop();\\r\\n                average.Add(watch.ElapsedTicks);\\r\\n            }\\r\\n            Console.WriteLine(\\"version= \\" + v + \\", time= \\" + average.Average());\\r\\n        }\\r\\n    }\\r\\n}"}
104	21	bec8ea797d32de7b2bce5bc5	\N	python	word-count	\N	\N	0	1	2015-11-24 05:24:27	2015-11-24 05:24:27	152	{"wordcount.py":"def word_count(phrase):\\n    from collections import Counter\\n    phrase = phrase.lower().split()\\n    return Counter(phrase)"}
105	21	fe8a0d2cae82b03b497b80cf	pending	ruby	luhn	\N	\N	0	1	2015-11-20 11:28:04	2015-11-20 11:28:04	154	{"/ruby/luhn/luhn.rb":"class Luhn\\n  def initialize(n)\\n    @n = n\\n  end\\n\\n  def addends\\n    digits_from_right.map.with_index do |digit, index|\\n      if index % 2 == 1\\n        digit = digit * 2\\n        digit \\u003e 9 ? digit - 9 : digit\\n      else\\n        digit\\n      end\\n    end.reverse\\n  end\\n  \\n  def checksum\\n    addends.reduce(:+)\\n  end\\n\\n  def valid?\\n    checksum % 10 == 0\\n  end\\n\\n  def self.create(n)\\n    return n if new(n).checksum % 10 == 0\\n    cs = new(n*10).checksum\\n    n*10 + ((10 - cs ) % 10)\\n  end\\n\\n  private\\n\\n    def digits_from_right\\n      @n.to_s.split('').map(\\u0026:to_i).reverse\\n    end\\nend"}
106	21	1acb48db23563d9a77c1ee2e	superseded	ruby	prime-factors	\N	\N	0	2	2015-11-19 11:50:58	2015-11-19 11:50:58	155	{"/ruby/prime-factors/prime_factors.rb":"class PrimeFactors\\n  def self.for target\\n    new(target).factors\\n  end\\n\\n  def initialize target\\n    @target = target\\n    @found = []\\n  end\\n\\n  def factors target = @target\\n    return @found if target \\u003c 2\\n    current = find_next_factor target\\n    @found \\u003c\\u003c current\\n    factors(target / current)\\n  end\\n\\n  private\\n\\n    def find_next_factor target\\n      ((@found.empty? ? 2 : @found.last)..target).find { |divisor| target % divisor == 0 }\\n    end\\nend"}
107	21	e43759507569f657abc9352e	superseded	ruby	prime-factors	\N	\N	0	1	2015-11-24 13:07:19	2015-11-24 13:07:19	155	{"/ruby/prime-factors/prime_factors.rb":"class PrimeFactors\\n  def self.for target\\n    PrimeFactors.new(target).factors target\\n  end\\n\\n  def initialize target\\n    @search_set = PrimeFactorSearch.new target\\n  end\\n\\n  def factors next_target, result = []\\n    return result if next_target.eql?(0)\\n    factor = @search_set.factor_for next_target\\n    if factor.nil?\\n      factors(0, result)\\n    else\\n      factors(next_target / factor, result \\u003c\\u003c factor)\\n    end\\n  end\\nend\\n\\nclass PrimeFactorSearch\\n  require 'prime'\\n\\n  def initialize target\\n    @primes = Prime.each(target).to_a.reverse\\n  end\\n\\n  def factor_for target\\n    @primes.to_a.reverse.find { |p| target % p == 0 }\\n  end\\nend"}
108	21	ddf99d5e4e4e4791e75eb5d2	pending	ruby	prime-factors	\N	\N	0	3	2015-12-08 01:17:23	2015-12-08 01:17:23	155	{"/ruby/prime-factors/prime_factors.rb":"module PrimeFactors\\n  def self.for target\\n    factors(target).flatten\\n  end\\n\\n  def self.factors target, last_factor = 2\\n    return [] if target \\u003c 2\\n    current = (last_factor..(Math.sqrt(target).ceil)).find { |divisor| target % divisor == 0 }\\n    current ? [current].push(factors(target / current, current)) : [target]\\n  end\\nend"}
109	21	970267b2709397740e75483c	\N	cpp	bob	\N	\N	0	2	2015-11-28 23:31:32	2015-11-28 23:31:32	156	{"bob.cpp":"#include \\"bob.h\\"\\n#include \\u003cboost/algorithm/string.hpp\\u003e\\n#include \\u003cboost/algorithm/cxx11/none_of.hpp\\u003e\\n#include \\u003cboost/algorithm/cxx11/any_of.hpp\\u003e\\n\\nusing namespace boost::algorithm;\\nusing namespace std;\\n\\nbool is_shouting(const string\\u0026 s) {\\n    return any_of(s, is_from_range('A', 'Z'))\\n        \\u0026\\u0026 none_of(s, is_from_range('a', 'z'));\\n}\\n\\nbool is_question(const string\\u0026 s) {\\n    return s[s.length() - 1] == '?';\\n}\\n\\nconst string bob::hey(const string\\u0026 s) {\\n    const string msg = trim_right_copy(s);\\n    if (is_shouting(msg))\\n        return \\"Whoa, chill out!\\";\\n    if (is_question(msg))\\n        return \\"Sure.\\";\\n    if (msg.empty())\\n        return \\"Fine. Be that way!\\";\\n    return \\"Whatever.\\";\\n}","bob.h":"#pragma once\\n\\n#include \\u003cstring\\u003e\\n\\nnamespace bob {\\n    const std::string hey(const std::string\\u0026 msg);\\n}"}
110	21	a4da4ceb0e5b5158be574829	\N	cpp	bob	\N	\N	0	1	2015-12-15 11:56:21	2015-12-15 11:56:21	156	{"bob.cpp":"#include \\"bob.h\\"\\n#include \\u003calgorithm\\u003e\\n\\nusing namespace std;\\n\\nbool is_shouting(const string\\u0026 s) {\\n    bool was_upper = false;\\n    bool was_lower = false;\\n    for (char c: s) {\\n        if (islower(c)) was_lower = true;\\n        if (isupper(c)) was_upper = true;\\n    }\\n    return was_upper \\u0026\\u0026 !was_lower;\\n}\\n\\nbool is_question(const string\\u0026 s) {\\n    return s[s.length() - 1] == '?';\\n}\\n\\nstring rtrim(const string\\u0026 s) {\\n    ssize_t pos = s.length() - 1;\\n\\n    while (pos \\u003e= 0 \\u0026\\u0026 isspace(s[pos]))\\n        --pos;\\n    return s.substr(0, pos + 1);\\n}\\n\\nconst string bob::hey(const string\\u0026 s) {\\n    string msg = rtrim(s);\\n    if (is_shouting(msg))\\n        return \\"Whoa, chill out!\\";\\n    if (is_question(msg))\\n        return \\"Sure.\\";\\n    if (msg.empty())\\n        return \\"Fine. Be that way!\\";\\n    return \\"Whatever.\\";\\n}","bob.h":"#pragma once\\n\\n#include \\u003cstring\\u003e\\n\\nnamespace bob {\\n    const std::string hey(const std::string\\u0026 msg);\\n}"}
176	18	2e84ed466893fb8475cc6b85	\N	javascript	etl	\N	\N	0	1	2015-11-12 01:30:28	2015-11-12 01:30:28	249	{"etl.js":"module.exports = function(old){\\n  var shiny = {};\\n  for (var key in old){\\n    old[key].forEach(function(letter){\\n      shiny[letter.toLowerCase()] = Number(key);\\n    });\\n  }\\n  return shiny;\\n}"}
111	21	c586d2e8ef126276d2ebf51d	\N	cpp	bob	\N	\N	0	3	2015-12-17 09:01:51	2015-12-17 09:01:51	156	{"bob.cpp":"#include \\"bob.h\\"\\n#include \\u003cboost/algorithm/string.hpp\\u003e\\n#include \\u003cboost/algorithm/cxx11/none_of.hpp\\u003e\\n#include \\u003cboost/algorithm/cxx11/any_of.hpp\\u003e\\n\\nusing namespace boost::algorithm;\\nusing namespace std;\\n\\nbool is_shouting(const string\\u0026 s) {\\n    return any_of(s, is_from_range('A', 'Z'))\\n        \\u0026\\u0026 none_of(s, is_from_range('a', 'z'));\\n}\\n\\nbool is_question(const string\\u0026 s) {\\n    return s.back() == '?';\\n}\\n\\nconst string bob::hey(const string\\u0026 s) {\\n    const string msg = trim_right_copy(s);\\n    if (is_shouting(msg))\\n        return \\"Whoa, chill out!\\";\\n    if (is_question(msg))\\n        return \\"Sure.\\";\\n    if (msg.empty())\\n        return \\"Fine. Be that way!\\";\\n    return \\"Whatever.\\";\\n}","bob.h":"#pragma once\\n\\n#include \\u003cstring\\u003e\\n\\nnamespace bob {\\n    const std::string hey(const std::string\\u0026 msg);\\n}"}
112	21	923e39eec1a39451bf4502e4	hibernating	ruby	bob	\N	\N	0	1	2015-11-21 17:50:39	2015-11-21 17:50:39	157	{"bob.rb":"class Bob\\n  def hey(str)\\n    unless str.nil?\\n      punctuation = str[-1]\\n      yelling = (str.upcase == str)\\n    end\\n    if str.nil? || str.empty?\\n      return \\"Fine. Be that way.\\"\\n    elsif punctuation == '.' || (punctuation == '!' \\u0026\\u0026 !yelling)\\n      return \\"Whatever.\\"\\n    elsif yelling\\n      return \\"Woah, chill out!\\"\\n    else punctuation == '?'\\n      return \\"Sure.\\"\\n    end\\n  end\\nend"}
113	21	2662f6991c308d8a1a018584	pending	elixir	scrabble-score	\N	\N	0	1	2015-11-27 15:46:54	2015-11-27 15:46:54	159	{"scrabble.exs":"defmodule Scrabble do\\n\\n  @score_table %{\\n    \\"\\" =\\u003e 0,\\n    \\"A\\" =\\u003e 1,\\n    \\"B\\" =\\u003e 3,\\n    \\"C\\" =\\u003e 3,\\n    \\"D\\" =\\u003e 2,\\n    \\"E\\" =\\u003e 1,\\n    \\"F\\" =\\u003e 4,\\n    \\"G\\" =\\u003e 2,\\n    \\"H\\" =\\u003e 4,\\n    \\"I\\" =\\u003e 1,\\n    \\"J\\" =\\u003e 8,\\n    \\"K\\" =\\u003e 5,\\n    \\"L\\" =\\u003e 1,\\n    \\"M\\" =\\u003e 3,\\n    \\"N\\" =\\u003e 1,\\n    \\"O\\" =\\u003e 1,\\n    \\"P\\" =\\u003e 3,\\n    \\"Q\\" =\\u003e 10,\\n    \\"R\\" =\\u003e 1,\\n    \\"S\\" =\\u003e 1,\\n    \\"T\\" =\\u003e 1,\\n    \\"U\\" =\\u003e 1,\\n    \\"V\\" =\\u003e 4,\\n    \\"W\\" =\\u003e 4,\\n    \\"X\\" =\\u003e 8,\\n    \\"Y\\" =\\u003e 4,\\n    \\"Z\\" =\\u003e 10,\\n  }\\n\\n  @doc \\"\\"\\"\\n  Calculate the scrabble score for the word.\\n  \\"\\"\\"\\n  @spec score(String.t) :: non_neg_integer\\n  def score(word) do\\n    word\\n    |\\u003e String.codepoints()\\n    |\\u003e Enum.map(\\u0026String.strip/1)\\n    |\\u003e Enum.map(\\u0026String.upcase/1)\\n    |\\u003e Enum.map(\\u0026(@score_table[\\u00261]))\\n    |\\u003e Enum.sum\\n  end\\nend"}
114	21	d9eaf3479aae7a7cd9c81a14	superseded	ruby	series	\N	\N	0	2	2015-11-23 06:24:01	2015-11-23 06:24:01	160	{"\\\\ruby\\\\series\\\\series.rb":"class Series\\r\\n  def initialize(string_of_digits)\\r\\n    @digits = string_of_digits.chars.map(\\u0026:to_i)\\r\\n  end\\r\\n\\r\\n  def slices(n)\\r\\n    fail ArgumentError if n \\u003e digits.length\\r\\n    digits.each_cons(n).to_a\\r\\n  end\\r\\n\\r\\n  private\\r\\n\\r\\n  attr_reader :digits\\r\\nend"}
115	21	74f0bafc63f2015f384c6a5b	superseded	ruby	series	\N	\N	0	1	2015-12-05 18:44:32	2015-12-05 18:44:32	160	{"\\\\ruby\\\\series\\\\series.rb":"class Series\\r\\n  def initialize(string_of_digits)\\r\\n    @digits = string_of_digits.chars.map(\\u0026:to_i)\\r\\n  end\\r\\n\\r\\n  def slices(n)\\r\\n    raise ArgumentError if n \\u003e @digits.length\\r\\n\\r\\n    @digits.map.with_index do |_, index|\\r\\n      @digits.slice(index, n)\\r\\n    end.reject { |x| x.length \\u003c n }\\r\\n  end\\r\\nend"}
116	21	81211bff9f74401fb586471d	superseded	ruby	series	\N	\N	0	3	2015-12-22 10:30:01	2015-12-22 10:30:01	160	{"\\\\ruby\\\\series\\\\series.rb":"class Series\\r\\n  def initialize(string_of_digits)\\r\\n    @digits = string_of_digits.chars.map(\\u0026:to_i)\\r\\n  end\\r\\n\\r\\n  def slices(n)\\r\\n    fail ArgumentError if n \\u003c 0\\r\\n    fail ArgumentError if n \\u003e digits.length\\r\\n\\r\\n    digits.each_cons(n).to_a\\r\\n  end\\r\\n\\r\\n  private\\r\\n\\r\\n  attr_reader :digits\\r\\nend"}
117	21	50f3d36dfa68ca3be135e7d6	pending	ruby	series	\N	\N	0	4	2015-12-26 11:54:25	2015-12-26 11:54:25	160	{"\\\\ruby\\\\series\\\\series.rb":"class Series\\r\\n  def initialize(string_of_digits)\\r\\n    @digits = string_of_digits\\r\\n  end\\r\\n\\r\\n  def slices(n)\\r\\n    fail ArgumentError if n \\u003c 0\\r\\n    fail ArgumentError if n \\u003e digits.length\\r\\n\\r\\n    digits.each_cons(n).to_a\\r\\n  end\\r\\n\\r\\n  private\\r\\n\\r\\n  def digits\\r\\n    @digits.chars.map(\\u0026:to_i)\\r\\n  end\\r\\nend"}
118	21	5ab19de234953ba781f0eaef	done	ruby	difference-of-squares	\N	\N	0	2	2015-11-24 14:20:29	2015-11-24 14:20:29	162	{"squares.rb":"class Squares\\n  attr_reader :range\\n\\n  def initialize(maximum_number)\\n    @range = (1..maximum_number.to_i)\\n  end\\n\\n  def sum_of_squares\\n    range.inject {|accumulator, number| accumulator + number ** 2 }\\n  end\\n\\n  def square_of_sums\\n    range.inject(\\u0026:+) ** 2\\n  end\\n\\n  def difference\\n    square_of_sums - sum_of_squares\\n  end\\nend"}
119	21	5cd89c6ff54840e860123443	superseded	ruby	difference-of-squares	\N	\N	0	1	2015-11-27 22:42:31	2015-11-27 22:42:31	162	{"squares.rb":"class Squares\\n  attr_reader :range\\n\\n  def initialize(maximum_number)\\n    @range = (1..maximum_number.to_i)\\n  end\\n\\n  def sum_of_squares\\n    range.inject(0) {|accumulator, number| accumulator + number ** 2 }\\n  end\\n\\n  def square_of_sums\\n    range.inject(\\u0026:+) ** 2\\n  end\\n\\n  def difference\\n    square_of_sums - sum_of_squares\\n  end\\nend"}
120	21	e778e0704c949e943fbb42fd	pending	haskell	triangle	\N	\N	0	1	2015-11-27 10:39:55	2015-11-27 10:39:55	164	{"Triangle.hs":"module Triangle (TriangleType(..), triangleType) where\\n\\ndata TriangleType = \\n    Equilateral |\\n    Isosceles |\\n    Scalene |\\n    Illogical\\n    deriving (Show, Eq)\\n\\nisIllogical ::  Int -\\u003e Int -\\u003e Int -\\u003e Bool\\nisIllogical a b c = \\n    (a + b) \\u003c= c ||\\n    (a + c) \\u003c= b ||\\n    (b + c) \\u003c= a\\n\\n-- possible improvement: collapse the below two functions into one that takes a boolean combination function\\nisEquilateral :: Int -\\u003e Int -\\u003e Int -\\u003e Bool\\nisEquilateral a b c =\\n    a == b \\u0026\\u0026\\n    a == c \\u0026\\u0026\\n    b == c\\n\\nisIsosceles :: Int -\\u003e Int -\\u003e Int -\\u003e Bool\\nisIsosceles a b c =\\n    a == b ||\\n    a == c ||\\n    b == c\\n\\n\\ntriangleType :: Int -\\u003e Int -\\u003e Int -\\u003e TriangleType\\ntriangleType a b c \\n    | isIllogical a b c = Illogical\\n    | isEquilateral a b c = Equilateral\\n    | isIsosceles a b c = Isosceles\\n    | otherwise = Scalene"}
121	21	d476f79311c545811ae3389f	pending	javascript	palindrome-products	\N	\N	0	1	2015-11-21 00:15:43	2015-11-21 00:15:43	166	{"palindrome-products.js":"function Palindromes(factors) {\\n  this.maxFactor = factors.maxFactor;\\n  this.minFactor = factors.minFactor || 1;\\n  this.palindromes = undefined;\\n}\\n\\nfunction Palindrome(a, b) {\\n  this.a = a;\\n  this.b = b;\\n  this.product = a * b;\\n}\\n\\nPalindromes.prototype.generate = function() {\\n  var products = [];\\n  for (var i = this.minFactor; i \\u003c= this.maxFactor; i++) {\\n    for (var j = i; j \\u003c= this.maxFactor; j++) {\\n      var test = i * j;\\n      if (this.isPalindrome(test)) {\\n        var newPal = new Palindrome(i, j);\\n        products.push(newPal);\\n      }\\n    }\\n  }\\n  this.palindromes = products;\\n};\\n\\nPalindromes.prototype.isPalindrome = function(number) {\\n  var numberAsString = number.toString();\\n  var reversedString = numberAsString.split(\\"\\").reverse().join(\\"\\");\\n  return (numberAsString === reversedString);\\n};\\n\\nPalindromes.prototype.getLargestValue = function() {\\n  var values = [];\\n  for (var i = 0; i \\u003c this.palindromes.length; i++) {\\n    values.push(this.palindromes[i].product);\\n  }\\n  return Math.max.apply(null, values);\\n};\\n\\nPalindromes.prototype.getLargestFactor = function() {\\n  var largestProd = this.getLargestValue();\\n  var largestPalindromes = this.palindromes.filter(function(pal) {\\n    return pal.product === largestProd;\\n  });\\n\\n  return largestPalindromes.map(function(pal) {\\n    return [pal.a, pal.b];\\n  });\\n};\\n\\n// TODO: combine the getLargest and getSmallest funcs\\nPalindromes.prototype.largest = function() {\\n  return {\\n    value: this.getLargestValue(),\\n    factors: this.getLargestFactor()\\n  };\\n};\\n\\nPalindromes.prototype.getSmallestValue = function() {\\n  var values = [];\\n  for (var i = 0; i \\u003c this.palindromes.length; i++) {\\n    values.push(this.palindromes[i].product);\\n  }\\n  return Math.min.apply(null, values);\\n};\\n\\nPalindromes.prototype.getSmallestFactor = function() {\\n  var smallestProd = this.getSmallestValue();\\n  var smallestPalindromes = this.palindromes.filter(function(pal) {\\n    return pal.product === smallestProd;\\n  });\\n\\n  return smallestPalindromes.map(function(pal) {\\n    return [pal.a, pal.b];\\n  });\\n};\\n\\nPalindromes.prototype.smallest = function() {\\n  return {\\n    value: this.getSmallestValue(),\\n    factors: this.getSmallestFactor()\\n  };\\n};\\n\\nmodule.exports = Palindromes;"}
122	21	8a8bd816bbdf0768ba737582	done	ruby	raindrops	\N	\N	0	1	2015-11-27 16:08:56	2015-11-27 16:08:56	170	{"raindrops.rb":"module Raindrops\\n  def self.convert(n)\\n    divisor_noise = [[3, 'Pling'], [5, 'Plang'], [7, 'Plong']]\\n    noises = divisor_noise.map { |div, noise| noise if n % div == 0 }.compact\\n    if noises.empty?\\n      n.to_s\\n    else\\n      noises.join\\n    end\\n  end\\nend"}
123	21	4050877ba4533b49ef505ce2	\N	scala	bob	\N	\N	0	1	2015-12-20 00:39:19	2015-12-20 00:39:19	172	{"src/main/scala-2.11/Bob.scala":"import scala.language.postfixOps\\n\\n/**\\n  * @author edafinov\\n  */\\nclass Bob {\\n\\n  private implicit def extendedBoolean(a : Boolean) = new {\\n    def implies(b : =\\u003e Boolean) = {\\n      !a || b\\n    }\\n  }\\n\\n  def hey(phrase: String): String =\\n    phrase match {\\n      case silence if silence.trim isEmpty =\\u003e \\"Fine. Be that way!\\"\\n      case shouting\\n        if (shouting exists(character =\\u003e character.isLetter)) \\u0026\\u0026\\n           (shouting forall( character =\\u003e character.isLetter implies character.isUpper )) =\\u003e \\"Whoa, chill out!\\"\\n      case question if question.last == '?' =\\u003e \\"Sure.\\"\\n      case _ =\\u003e \\"Whatever.\\"\\n    }\\n\\n}"}
124	21	dc939c01d9779b8195deb96b	pending	python	robot-name	\N	\N	0	1	2015-12-12 08:15:38	2015-12-12 08:15:38	175	{"robot.py":"from random import choice\\nimport string\\n\\n\\ndef random_char(charset):\\n    return choice(charset)\\n\\n\\nCHARSETS = {\\n    'D': string.digits,\\n    'U': string.ascii_uppercase,\\n}\\n\\n\\ndef random_str_from_pattern(pattern):\\n    return ''.join(random_char(CHARSETS[c]) for c in pattern)\\n\\n\\nclass Robot(object):\\n    _NAME_REGISTRY = []\\n    name_pattern = 'UUDDD'\\n\\n    @classmethod\\n    def generate_name(cls):\\n        while True:\\n            name = random_str_from_pattern(cls.name_pattern)\\n            if name not in cls._NAME_REGISTRY:\\n                cls._NAME_REGISTRY.append(name)\\n                return name\\n\\n    def __init__(self):\\n        self.reset()\\n\\n    def reset(self):\\n        self.name = self.__class__.generate_name()"}
125	36	3ecafa4b30e8ff76b01209c6	pending	ruby	phone-number	\N	\N	0	1	2015-10-08 18:50:15	2015-10-08 18:50:15	181	{"/ruby/phone-number/phone_number.rb":"class PhoneNumber\\n  def initialize(num_string)\\n    @num_string = num_string\\n  end\\n\\n  def number\\n    return '0000000000' if invalid?\\n    return digits_string[1..-1] if valid_11_digit?\\n    digits_string\\n  end\\n\\n  def to_s\\n    \\"(#{area_code}) #{prefix}-#{line_number}\\"\\n  end\\n\\n  def area_code\\n    number[0..2]\\n  end\\n\\n  def prefix\\n    number[3..5]\\n  end\\n\\n  def line_number\\n    number[6..9]\\n  end\\n\\n  private\\n\\n    def digits_string\\n      @num_string.gsub(/\\\\D/, '')\\n    end\\n\\n    def invalid?\\n      contains_letters? || too_short? || too_long?\\n    end\\n\\n    def contains_letters?\\n      @num_string =~ /[a-zA-Z]/\\n    end\\n\\n    def too_short?\\n      digits_string.length \\u003c 10\\n    end\\n\\n    def too_long?\\n      digits_string.length \\u003e 10 unless valid_11_digit?\\n    end\\n\\n    def valid_11_digit?\\n      digits_string.length == 11 \\u0026\\u0026 digits_string.start_with?('1')\\n    end\\nend"}
126	30	6de2fd9c614d843b5466de52	superseded	ruby	nucleotide-count	\N	\N	0	1	2015-08-20 08:00:47	2015-08-20 08:00:47	182	{"nucleotide-count.rb":"class DNA\\n  attr_reader :nucleotides\\n\\n  DNA_NUCLEOTIDES = [ 'A', 'C', 'G', 'T' ]\\n \\n  def initialize(nucleotides)\\n    @nucleotides = nucleotides.split('').sort\\n    validate_as_dna(@nucleotides)\\n    @dna_nucleotide_count_result_default = {'A' =\\u003e 0, 'T' =\\u003e 0, 'C' =\\u003e 0, 'G' =\\u003e 0} \\n  end\\n\\n  def count(nucleotide)\\n    Nucleotide.count(nucleotide, nucleotides)\\n  end\\n\\n  def nucleotide_counts\\n    nucleotides.each_with_object(@dna_nucleotide_count_result_default) do |nucleotide, count_results|\\n      unless count_results.has_key? [nucleotide] \\n        count_results[nucleotide] = count(nucleotide)\\n      end\\n    end\\n  end\\n\\n  def validate_as_dna(candidates)\\n    candidates.uniq.each do |possible_nucleotide|\\n      unless DNA_NUCLEOTIDES.include? possible_nucleotide\\n        raise ArgumentError\\n      end\\n    end\\n  end\\n\\nend\\n\\nclass Nucleotide\\n\\n  NUCLEOTIDES = [ 'A', 'C', 'G', 'T', 'U' ] \\n\\n  def self.count(nucleotide, nucleotides)\\n    if validate_as_nucleotide(nucleotide)\\n      nucleotides.select {|n| n.eql? nucleotide}.count\\n    else\\n      raise ArgumentError\\n    end\\n  end\\n\\n  def self.validate_as_nucleotide(candidate)\\n    NUCLEOTIDES.include? candidate \\n  end\\n\\nend"}
127	30	dca8a8ac15b9dd253b9af9e6	done	ruby	nucleotide-count	\N	\N	0	2	2015-10-17 04:21:04	2015-10-17 04:21:04	182	{"nucleotide-count.rb":"class DNA\\n  attr_reader :nucleotides\\n\\n  DNA_NUCLEOTIDES = [ 'A', 'C', 'G', 'T' ]\\n \\n  def initialize(nucleotides)\\n    @nucleotides = normalized_input(nucleotides)\\n    validate_as_dna(@nucleotides)\\n    @dna_nucleotide_count_result_default = {'A' =\\u003e 0, 'T' =\\u003e 0, 'C' =\\u003e 0, 'G' =\\u003e 0} \\n  end\\n\\n  def count(nucleotide)\\n    Nucleotide.count_single(nucleotide, nucleotides)\\n  end\\n\\n  def nucleotide_counts\\n    nucleotides.each_with_object(@dna_nucleotide_count_result_default) do |nucleotide, count_results|\\n      count_results[nucleotide] = count(nucleotide) unless count_results.key? [nucleotide] \\n    end\\n  end\\n\\nprivate\\n\\n  def normalized_input(nucleotides)\\n    nucleotides.split('').sort\\n  end\\n\\n  def validate_as_dna(candidates)\\n    candidates.uniq.each do |possible_nucleotide|\\n      unless DNA_NUCLEOTIDES.include? possible_nucleotide\\n        raise ArgumentError\\n      end\\n    end\\n  end\\n\\nend\\n\\nclass Nucleotide\\n\\n  NUCLEOTIDES = [ 'A', 'C', 'G', 'T', 'U' ] \\n\\n  def self.count_single(nucleotide, nucleotides)\\n    if validate_as_nucleotide(nucleotide)\\n      nucleotides.select {|n| n.eql? nucleotide}.count\\n    else\\n      raise ArgumentError\\n    end\\n  end\\n\\nprivate\\n\\n  def self.validate_as_nucleotide(candidate)\\n    NUCLEOTIDES.include? candidate \\n  end\\n\\nend"}
128	30	f568fd87f08f6b1bcd39f9be	done	ruby	roman-numerals	\N	\N	0	1	2015-04-22 06:48:37	2015-04-22 06:48:37	183	{"/ruby/roman-numerals/roman_numerals.rb":"class Fixnum\\n\\n  ONES_ROMANS = %W[#{''} I II III IV V VI VII VIII IX]\\n  TENS_ROMANS = %W[#{''} X XX XXX XL L LX LXX LXXX XC]\\n  HUNDREDS_ROMANS = %W[#{''} C CC CCC CD D DC DCC DCCC CM]\\n  TOUSANDS_ROMANS = %W[#{''} M MM MMM MMMM MMMMM MMMMMMM]\\n\\n  def to_roman\\n    ones = self % 10\\n    tens = (self / 10) % 10\\n    hundreds = (self / 100) % 10\\n    tousands = (self / 1000) % 10\\n    roman = ''\\n    roman \\u003c\\u003c TOUSANDS_ROMANS[tousands]\\n    roman \\u003c\\u003c HUNDREDS_ROMANS[hundreds]\\n    roman \\u003c\\u003c TENS_ROMANS[tens]\\n    roman \\u003c\\u003c ONES_ROMANS[ones]\\n  end\\n\\nend"}
129	30	3a937a79d828ec33d56fca97	\N	python	bob	\N	\N	0	1	2015-10-18 00:51:09	2015-10-18 00:51:09	185	{"/python/bob/bob.py":"def hey(something):\\n    if something.isupper():\\n\\treturn 'Whoa, chill out!'\\n    elif something.endswith('?'):\\n        return 'Sure.'\\n    elif something.isspace() or something =='':\\n    \\treturn 'Fine. Be that way!'\\n    else:\\n\\treturn 'Whatever.'"}
130	30	49606d8424dbd7bdfc07fc76	pending	ruby	anagram	\N	\N	0	1	2015-07-02 00:11:50	2015-07-02 00:11:50	187	{"anagram.rb":"class Anagram\\n  private\\n  attr_accessor :string\\n\\n  def initialize(val)\\n    self.string=val\\n  end\\n\\n  public\\n  def match(args)\\n    args.select{|x| x.chars.map(\\u0026:downcase).sort==string.chars.map(\\u0026:downcase).sort \\u0026\\u0026 x.downcase!=string.downcase}\\n  end\\nend"}
150	41	eeb4cdd7cc7d9cd150d6011c	pending	scala	word-count	\N	\N	0	2	2015-11-20 03:52:55	2015-11-20 03:52:55	216	{"src/main/scala/Phrase.scala":"class Phrase(sentence: String) {\\n  private val spaces = \\"\\"\\"\\\\s+\\"\\"\\".stripMargin\\n  private val punctuation = \\"[:!\\u0026@$%^.,]\\"\\n  private val oneEmptySpace = \\" \\"\\n\\n  private def cleanSentence(phrase: String): String =\\n    phrase\\n      .map(_.toLower)\\n      .replaceAll(punctuation, oneEmptySpace)\\n      .replaceAll(spaces, oneEmptySpace)\\n\\n  private def countWords(phrase: String): Map[String, Int] =\\n    phrase\\n      .split(spaces)\\n      .groupBy(s =\\u003e s)\\n      .mapValues(_.length)\\n\\n  lazy val wordCount: Map[String, Int] = countWords(cleanSentence(sentence))\\n}"}
131	30	85d43ed7750b584c786eba51	\N	java	triangle	\N	\N	0	1	2015-04-24 13:39:07	2015-04-24 13:39:07	191	{"src/main/java/Triangle.java":"public class Triangle {\\n\\n\\tprivate double[] sides = new double[3];\\n\\n\\tpublic Triangle(double... sides) throws TriangleException {\\n\\t\\tif (!isTriangle(sides))\\n\\t\\t\\tthrow new TriangleException();\\n\\n\\t\\tthis.sides = sides;\\n\\t}\\n\\n\\tprivate boolean isInequalit(double... sides) {\\n\\t\\tfor (int i = 0; i \\u003c sides.length; i++) {\\n\\t\\t\\tint j = i + 1 == 3 ? 0 : i + 1, k = j + 1 == 3 ? 0 : j + 1;\\n\\n\\t\\t\\tif (sides[i] + sides[j] \\u003c= sides[k])\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\n\\tprivate boolean areSidesPositive(double... sides) {\\n\\t\\tfor (double g : sides) {\\n\\t\\t\\tif (g \\u003c= 0)\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\n\\tprivate boolean isTriangle(double... sides) {\\n\\t\\treturn sides.length == 3 \\u0026\\u0026 areSidesPositive(sides)\\n\\t\\t\\t\\t\\u0026\\u0026 isInequalit(sides);\\n\\t}\\n\\n\\tpublic TriangleKind getKind() {\\n\\t\\tfor (int i = 0; i \\u003c sides.length; i++) {\\n\\t\\t\\tfor (int j = i + 1; j \\u003c sides.length; j++) {\\n\\t\\t\\t\\tif (sides[i] == sides[j])\\n\\t\\t\\t\\t\\tif (sides[0] == sides[1] \\u0026\\u0026 sides[1] == sides[2])\\n\\t\\t\\t\\t\\t\\treturn TriangleKind.EQUILATERAL;\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\treturn TriangleKind.ISOSCELES;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn TriangleKind.SCALENE;\\n\\t}\\n}"}
132	30	af9d78d90e7f3af2e0809382	\N	rust	point-mutations	\N	\N	0	1	2015-06-21 14:05:37	2015-06-21 14:05:37	193	{"src/lib.rs":"use std::result;\\n\\npub type Result\\u003cT\\u003e = result::Result\\u003cT, \\u0026'static str\\u003e;\\n\\npub fn hamming_distance(a: \\u0026str, b: \\u0026str) -\\u003e Result\\u003cu32\\u003e {\\n    if a.len() != b.len() {\\n        Err(\\"inputs of different length\\")\\n    } else {\\n        let mut distance = 0;\\n        for (ca, cb) in a.chars().zip(b.chars()) {\\n            if ca != cb {\\n                distance += 1;\\n            }\\n        }\\n        Ok(distance)\\n    }\\n}"}
133	30	f6615e1338529ec082406a30	pending	javascript	word-count	\N	\N	0	1	2015-08-09 04:09:49	2015-08-09 04:09:49	196	{"\\\\javascript\\\\word-count\\\\word-count.js":"//var phrase = function(){\\n\\n  //this.word_count = function(words)\\n  //var result = {};\\n  //total_words = words.split(\\" \\");\\n\\n  //for(var i = 0; i \\u003c= total_words.length; i++)\\n    //{\\n      //if(result.hasOwnProperty(total_words[i]))\\n        //{\\n          //result(total_words[i]) += 1;\\n        //}\\n        //else\\n          //{\\n            //result(total_words[i]) = 1;\\n          //}\\n        //}\\n\\n        //return result;\\n\\nvar count = function(phrase){\\n\\n  var wordCount = {};\\n  phrase.split(/\\\\s/).forEach(function(word){\\n    if(!wordCount[word]){\\n      wordCount[word] = 1;\\n    }\\n    else{\\n      wordCount[word]++;\\n    }\\n  });\\n\\n  return wordCount;\\n};\\n\\nmodule.exports = count;"}
134	30	9df71b778c1e91042947646b	done	ruby	rna-transcription	\N	\N	0	2	2015-06-05 03:38:40	2015-06-05 03:38:40	198	{"complement.rb":"module Complement\\n  DNA = 'GCTA'\\n  RNA = 'CGAU'\\n\\n  def self.of_dna(dna)\\n    dna.tr(DNA, RNA)\\n  end\\n\\n  def self.of_rna(rna)\\n    rna.tr(RNA, DNA)\\n  end\\nend"}
135	30	88a584106a7af64060752c9d	superseded	ruby	rna-transcription	\N	\N	0	1	2015-06-13 14:33:34	2015-06-13 14:33:34	198	{"complement.rb":"module Complement\\n  # An \\"abstract\\" translation map which associates single characters.\\n  DNA_TO_RNA_MAP = [%w(G C), %w(C G), %w(T A), %w(A U)]\\n\\n  # Actual translation maps, implemented as hashes.\\n  DNA_TO_RNA = Hash[DNA_TO_RNA_MAP]\\n  RNA_TO_DNA = Hash[DNA_TO_RNA_MAP.map(\\u0026:reverse)]\\n\\n  def self.of_dna(dna)\\n    translate_through_map(dna, DNA_TO_RNA)\\n  end\\n\\n  def self.of_rna(rna)\\n    translate_through_map(rna, RNA_TO_DNA)\\n  end\\n\\n  class \\u003c\\u003c self\\n    private\\n\\n    # Replace each character in `str` with its corresponding character according\\n    # to `map`.\\n    def translate_through_map(str, map)\\n      str.chars.map { |ch| map[ch] }.join('')\\n    end\\n  end\\nend"}
136	30	de5f79d0f515d95de0d821c7	pending	python	difference-of-squares	\N	\N	0	2	2015-08-03 13:33:08	2015-08-03 13:33:08	199	{"difference_of_squares.py":"def difference(number):\\r\\n    return square_of_sum(number) - sum_of_squares(number)\\r\\n\\r\\n\\r\\ndef square_of_sum(numbers):\\r\\n    return sum(range(1, numbers + 1)) ** 2\\r\\n\\r\\n\\r\\ndef sum_of_squares(numbers):\\r\\n    return sum(x**2 for x in range(1, numbers + 1))"}
137	30	5fe0c27746c8b02394639060	superseded	python	difference-of-squares	\N	\N	0	1	2015-08-24 13:49:56	2015-08-24 13:49:56	199	{"difference_of_squares.py":"def difference(number):\\r\\n    return square_of_sum(number) - sum_of_squares(number)\\r\\n\\r\\n\\r\\ndef square_of_sum(numbers):\\r\\n    return sum(range(1, numbers + 1)) ** 2\\r\\n\\r\\n\\r\\ndef sum_of_squares(numbers):\\r\\n    return sum([x**2 for x in range(1, numbers + 1)])"}
138	30	c90ed15b836992827047c4f4	pending	javascript	hello-world	\N	\N	0	1	2015-08-19 09:21:22	2015-08-19 09:21:22	200	{"hello-world.js":"//\\n// This is only a SKELETON file for the 'Hello World' exercise. It's been provided as a\\n// convenience to get you started writing code faster.\\n//\\n\\nvar HelloWorld = function () {};\\n\\nHelloWorld.prototype.hello = function (input) {\\n    //\\n    // YOUR CODE GOES HERE\\n    //\\n    if (input) {\\n        return 'Hello, ' + input + '!';\\n    } else {\\n        return 'Hello, world!';\\n    }\\n};\\n\\nmodule.exports = HelloWorld;"}
139	30	6051e0fb3ca13c8b9bf9d688	superseded	ruby	space-age	\N	\N	0	1	2015-05-26 21:22:09	2015-05-26 21:22:09	202	{"space-age.rb":"class SpaceAge\\n  attr_accessor :age\\n\\n  def initialize age\\n    @age = age\\n  end\\n\\n  def seconds\\n    @age\\n  end\\n\\n  earth_seconds = 31557600.0\\n  PLANETS = {'earth' =\\u003e earth_seconds, 'mercury' =\\u003e earth_seconds*0.2408467, 'venus' =\\u003e earth_seconds*0.61519726,  'mars' =\\u003e earth_seconds*1.8808158, 'jupiter' =\\u003e earth_seconds*11.862615, 'saturn' =\\u003e earth_seconds*29.447498,  'uranus' =\\u003e earth_seconds*84.016846, 'neptune' =\\u003e earth_seconds*164.79132}\\n\\n  PLANETS.each do |planet, time|\\n    define_method(\\"on_#{planet}\\") do\\n      on_(time)\\n    end\\n  end\\n\\n  private\\n\\n  def on_ time\\n    (age/time).round(2)\\n  end\\n\\nend"}
140	30	35da7a6aa1d4fc4b11298425	superseded	ruby	space-age	\N	\N	0	2	2015-06-03 18:31:04	2015-06-03 18:31:04	202	{"space-age.rb":"class SpaceAge\\n  attr_accessor :age\\n\\n  def initialize age\\n    @age = age\\n  end\\n\\n  def seconds\\n    age\\n  end\\n\\n  private\\n\\n  EARTH_SECONDS = 365.25 * 24 * 60 * 60\\n  PLANETS = {\\n    earth:    EARTH_SECONDS,\\n    mercury:  EARTH_SECONDS * 0.2408467, \\n    venus:    EARTH_SECONDS * 0.61519726,  \\n    mars:     EARTH_SECONDS * 1.8808158, \\n    jupiter:  EARTH_SECONDS * 11.862615, \\n    saturn:   EARTH_SECONDS * 29.447498,  \\n    uranus:   EARTH_SECONDS * 84.016846, \\n    neptune:  EARTH_SECONDS * 164.79132\\n  }\\n\\n  PLANETS.each do |planet, time|\\n    define_method(\\"on_#{planet}\\") do\\n      (age/time).round(2)\\n    end\\n  end\\n\\nend"}
141	30	28229a329ea3f8453cf4c209	done	ruby	space-age	\N	\N	0	3	2015-08-07 03:13:58	2015-08-07 03:13:58	202	{"space-age.rb":"class SpaceAge \\u003c Struct.new(:seconds)\\n\\n  EARTH_SECONDS = 365.25 * 24 * 60 * 60\\n  PLANETS = {\\n    earth:    EARTH_SECONDS,\\n    mercury:  EARTH_SECONDS * 0.2408467, \\n    venus:    EARTH_SECONDS * 0.61519726,  \\n    mars:     EARTH_SECONDS * 1.8808158, \\n    jupiter:  EARTH_SECONDS * 11.862615, \\n    saturn:   EARTH_SECONDS * 29.447498,  \\n    uranus:   EARTH_SECONDS * 84.016846, \\n    neptune:  EARTH_SECONDS * 164.79132\\n  }\\n\\n  PLANETS.each do |planet, time|\\n    define_method(\\"on_#{planet}\\") do\\n      (age/time).round(2)\\n    end\\n  end\\n\\nend"}
142	30	36a5667faa975d07303ccf33	done	python	meetup	\N	\N	0	1	2015-04-25 00:01:05	2015-04-25 00:01:05	205	{"/python/meetup/meetup.py":"import datetime as dt\\n\\n\\nclass MeetupDayException(Exception):\\n\\n    def __init__(self, value):\\n        self.value = value\\n\\n    def __str__(self):\\n        return repr(self.value)\\n\\n\\ndef meetup_day(year, month, day, week):\\n    days = {'Monday': 0, 'Tuesday': 1, 'Wednesday': 2, 'Thursday': 3,\\n            'Friday': 4, 'Saturday': 5, 'Sunday': 6}\\n\\n#   adjust weekday\\n    meeting = dt.date(year, month, 1)\\n    if meeting.weekday() != days[day]:\\n        meeting = meeting + dt.timedelta((days[day] - meeting.weekday()) % 7)\\n\\n#  adjust week\\n    if week == \\"last\\":\\n        meeting += dt.timedelta(weeks=4)\\n        if meeting.month != month:\\n            meeting -= dt.timedelta(weeks=1)\\n    elif week == \\"teenth\\":\\n        if meeting.day \\u003c 6:\\n            meeting += dt.timedelta(weeks=2)\\n        else:\\n            meeting += dt.timedelta(weeks=1)\\n    elif week == \\"1st\\":\\n        #  do nothing\\n        pass\\n    elif week == \\"2nd\\":\\n        meeting += dt.timedelta(weeks=1)\\n    elif week == \\"3rd\\":\\n        meeting += dt.timedelta(weeks=2)\\n    elif week == \\"4th\\":\\n        meeting += dt.timedelta(weeks=3)\\n    elif week == \\"5th\\":\\n        meeting += dt.timedelta(weeks=4)\\n    else:\\n        raise ValueError(\\"Illegal argument for week\\")\\n\\n    if meeting.month != month:\\n        raise MeetupDayException(\\"Invalid week\\")\\n\\n    return meeting"}
143	35	438e035929882d6edb678a30	\N	haskell	robot-name	\N	\N	0	1	2015-11-12 01:43:34	2015-11-12 01:43:34	206	{"Robot.hs":"module Robot (mkRobot, robotName, resetName) where\\n\\nimport Control.Concurrent (MVar, readMVar, newMVar, modifyMVar_)\\nimport System.Random (randomRIO)\\n\\nnewtype Robot = Robot (MVar String)\\n\\nmkRobot :: IO Robot\\nmkRobot = generateName \\u003e\\u003e= newMVar \\u003e\\u003e= return . Robot\\n\\nrobotName :: Robot -\\u003e IO String\\nrobotName (Robot r) = readMVar r\\n\\nresetName :: Robot -\\u003e IO ()\\nresetName (Robot r) = modifyMVar_ r (const generateName)\\n\\ngenerateName :: IO String\\ngenerateName =\\n  mapM randomRIO [('A', 'Z'), ('A', 'Z'), ('0', '9'), ('0', '9'), ('0', '9')]"}
144	35	f1fdce3cc230a9d5c061d54e	pending	ruby	grade-school	\N	\N	0	1	2015-11-19 19:50:56	2015-11-19 19:50:56	208	{"/ruby/grade-school/grade_school.rb":"class School\\n  class Pupil\\n    def initialize(name, grade)\\n      @name = name.to_s\\n      @grade = grade.to_i\\n      @name.freeze\\n      @grade.freeze\\n    end\\n\\n    def \\u003c=\\u003e(other_pupil)\\n      grade == other_pupil.grade ? name \\u003c=\\u003e other_pupil.name : grade \\u003c=\\u003e other_pupil.grade\\n    end\\n\\n    def to_hash\\n      {@grade =\\u003e [@name]}\\n    end\\n\\n    protected\\n    attr_reader :name, :grade\\n  end\\n\\n  require 'set'\\n\\n  def initialize\\n    @pupils = SortedSet.new\\n  end\\n\\n  def add(name, grade)\\n    @pupils \\u003c\\u003c Pupil.new(name, grade)\\n  end\\n\\n  def grade(grade)\\n    to_hash.fetch(grade, [])\\n  end\\n\\n  def to_hash\\n    pupils.reduce(Hash.new) { |hash, pupil|\\n      hash.merge(pupil.to_hash) { |k, o, n| o + n }\\n    }\\n  end\\n\\n  private\\n  attr_reader :pupils\\nend"}
145	14	96d0ea752aab5e2100e24689	done	ruby	raindrops	\N	\N	0	1	2015-05-13 13:14:08	2015-05-13 13:14:08	209	{"raindrops.rb":"module RaindropRefinements\\n  refine Integer do\\n    def divisible_by?(x)\\n      self % x == 0\\n    end\\n  end\\nend\\n\\nusing RaindropRefinements\\n\\nclass Raindrops\\n  def convert(i)\\n    response = relevant_sounds(i).join('')\\n    response.empty? ? i.to_s : response\\n  end\\n\\n  private\\n\\n  def sounds\\n    {3 =\\u003e 'Pling', 5 =\\u003e 'Plang', 7 =\\u003e 'Plong'}\\n  end\\n\\n  def relevant_sounds(i)\\n    sounds.select{ |prime| i.divisible_by?(prime) }.values\\n  end\\nend"}
146	14	2e01a9d9d7de8f17f6924f80	done	csharp	robot-name	\N	\N	0	1	2015-08-09 16:49:50	2015-08-09 16:49:50	210	{"Robot.cs":"﻿/*\\r\\n * Created by SharpDevelop.\\r\\n * User: 100082\\r\\n * Date: 2014/12/29\\r\\n * Time: 10:37\\r\\n * \\r\\n * To change this template use Tools | Options | Coding | Edit Standard Headers.\\r\\n */\\r\\nusing System;\\r\\nusing System.Linq;\\r\\n\\r\\nnamespace Exercism.csharp.robot_name\\r\\n{\\r\\n\\t/// \\u003csummary\\u003e\\r\\n\\t/// Description of Robot.\\r\\n\\t/// \\u003c/summary\\u003e\\r\\n\\tpublic class Robot\\r\\n\\t{\\r\\n\\t\\tprivate static int Seed = 0;\\r\\n\\t\\tprivate string _name;\\r\\n\\t\\tprivate Random _random;\\r\\n\\t\\t\\r\\n\\t\\tpublic Robot()\\r\\n\\t\\t{\\r\\n\\t\\t\\tSeed++;\\r\\n\\t\\t\\t_random = new Random(Seed);\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tpublic string Name \\r\\n\\t\\t{\\r\\n\\t\\t\\tget\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tif (_name == null)\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\treturn _name = new string(new char[]\\r\\n                          {\\r\\n                          \\tGenerateRandomUppercaseLetter(),\\r\\n                          \\tGenerateRandomUppercaseLetter()\\r\\n                      \\t  }.\\r\\n\\t\\t\\t\\t\\t      Concat(GenerateRandomDigits(3)).ToArray());\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\treturn _name;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tpublic void Reset()\\r\\n\\t\\t{\\r\\n\\t\\t\\t_name = null;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tprivate int GenerateIntInRange(int low, int up)\\r\\n\\t\\t{\\r\\n\\t\\t\\treturn _random.Next() % (up - low + 1) + low;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tprivate char GenerateRandomUppercaseLetter()\\r\\n\\t\\t{\\r\\n\\t\\t\\treturn (char)GenerateIntInRange('A', 'Z');\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tprivate char GenerateRandomDigit()\\r\\n\\t\\t{\\r\\n\\t\\t\\treturn (char)GenerateIntInRange('0', '9');\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tprivate string GenerateRandomDigits(int width)\\r\\n\\t\\t{\\r\\n\\t\\t\\tint upperLimit = (int)Math.Pow(10, width) - 1;\\r\\n\\t\\t\\treturn GenerateIntInRange(0, upperLimit).ToString(\\"D3\\");\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r"}
147	14	626e3780b06ce62afa72cc25	\N	elixir	bob	\N	\N	0	1	2015-07-25 22:14:09	2015-07-25 22:14:09	212	{"bob.exs":"defmodule Teenager do\\n  def hey(input) do\\n    string_contains_char = input\\n    |\\u003e String.split(\\",\\", trim: true)\\n    |\\u003e Enum.map(\\u0026String.strip/1)\\n    |\\u003e Enum.reject(fn(x) -\\u003e String.contains?(\\"1234567890\\", x) end)\\n    |\\u003e Enum.any?\\n\\n    cond do\\n      String.ends_with?(input, \\"?\\") -\\u003e \\"Sure.\\"\\n      String.strip(input) == \\"\\"     -\\u003e \\"Fine. Be that way!\\"\\n      String.upcase(input) == input \\u0026\\u0026 string_contains_char -\\u003e \\"Whoa, chill out!\\"\\n      true                          -\\u003e \\"Whatever.\\"\\n    end\\n  end\\nend"}
148	41	8fe0a90d28a4aa6e257ee437	hibernating	ruby	hamming	\N	\N	0	1	2015-11-16 01:40:07	2015-11-16 01:40:07	213	{"hamming.rb":"class Hamming\\n  def self.compute(first_strand, second_strand)\\n    useful_strands(first_strand.split(''), second_strand.split('')).\\n      map{|v| v[0] == v[1]}.\\n      select {|x| x == false}.\\n      count\\n  end\\n\\n  private\\n\\n  def self.useful_strands(a, b)\\n    maxlen = [a.length, b.length].min\\n\\n    a.take(maxlen).zip(b.take(maxlen))\\n  end\\n\\nend"}
149	41	17e2ad871d00371bd734a49c	pending	scala	word-count	\N	\N	0	1	2015-11-03 14:12:03	2015-11-03 14:12:03	216	{"src/main/scala/Phrase.scala":"class Phrase(sentence: String) {\\n  private val spaces = \\"\\"\\"\\\\s+\\"\\"\\".stripMargin\\n  private val punctuation = \\"[:!\\u0026@$%^.,]\\"\\n  private val oneEmptySpace = \\" \\"\\n\\n  private def cleanSentence(phrase: String): String =\\n    phrase\\n      .map(_.toLower)\\n      .replaceAll(punctuation, oneEmptySpace)\\n      .replaceAll(spaces, oneEmptySpace)\\n\\n  private def countWords(phrase: String): Map[String, Int] =\\n    phrase\\n      .split(spaces)\\n      .groupBy(s =\\u003e s)\\n      .map { case (k, v) =\\u003e (k, v.length) }\\n\\n  lazy val wordCount: Map[String, Int] = countWords(cleanSentence(sentence))\\n}"}
180	18	08457f26d4760054975143c5	pending	ruby	hello-world	\N	\N	0	1	2015-10-29 21:54:03	2015-10-29 21:54:03	253	{"hello_world.rb":"class HelloWorld\\n  class \\u003c\\u003c self\\n    def hello(name='World')\\n      \\"Hello, #{name}!\\"\\n    end\\n  end\\nend"}
152	41	8dbc735df340cba4e0f16261	superseded	ruby	anagram	\N	\N	0	3	2015-09-13 20:33:22	2015-09-13 20:33:22	218	{"anagram.rb":"class Anagram\\n\\n  def initialize(word)\\n    @word = word.downcase\\n    @letters = @word.chars.sort\\n  end\\n  \\n  def match(anagrams)\\n    match = anagrams.each_with_object([]) do |anagram, m|\\n      a = anagram.downcase\\n      m.push anagram if a != @word \\u0026\\u0026 a.chars.sort == @letters\\n    end\\n    return match\\n  end  \\n  \\nend"}
153	41	02ada1dd8a94ec06c9038bba	done	ruby	anagram	\N	\N	0	4	2015-10-25 12:09:39	2015-10-25 12:09:39	218	{"anagram.rb":"class Anagram\\n\\n  def initialize(word)\\n    @word = word.downcase\\n    @letters = @word.chars.sort\\n  end\\n  \\n  def match(anagrams)\\n    match = anagrams.each_with_object([]) do |anagram, m|\\n      a = anagram.downcase\\n      m.push anagram if a != @word \\u0026\\u0026 a.chars.sort == @letters\\n    end\\n  end  \\n  \\nend"}
154	41	9da2fc33424808c8380a2797	superseded	ruby	anagram	\N	\N	0	1	2015-11-04 05:18:44	2015-11-04 05:18:44	218	{"anagram.rb":"class Anagram\\n  def initialize(word)\\n    @word = word\\n    @letters = word.downcase.scan(/[\\\\w]/).sort\\n  end\\n  def match(anagrams)\\n    match = []\\n    for i in anagrams\\n      for j in i.scan(/[\\\\w]+/).sort\\n        if j.downcase == @word.downcase\\n          next\\n        end\\n        k = j.downcase.scan(/[\\\\w]/).sort\\n        if @letters == k\\n          match.push j\\n        end\\n      end\\n    end   \\n    return match\\n  end  \\nend"}
155	41	78ee0a3e7ceab69c3b55bff2	superseded	javascript	bob	\N	\N	0	1	2015-09-19 03:07:44	2015-09-19 03:07:44	219	{"bob.js":"function Bob () {\\n\\n}\\n\\nBob.prototype.hey = function (string) {\\n// shouting\\nif (string === string.toUpperCase() \\u0026\\u0026 !(string === string.toLowerCase())) {\\n    return 'Woah, chill out!';\\n\\n// question\\n} else if ( string[string.length-1] === '?') {\\n    return 'Sure.';\\n\\n// white space\\n} else if ( string.trim() === '') {\\n    return 'Fine. Be that way!';\\n\\n// regular text\\n} else {\\n    return 'Whatever.';\\n}\\n};"}
156	41	7010778e2554ce6d25f496ba	hibernating	javascript	bob	\N	\N	0	3	2015-09-22 08:58:00	2015-09-22 08:58:00	219	{"bob.js":"function Bob () {\\n}\\n\\nBob.prototype.hey = function (string) {\\n    var upStr = string.toUpperCase(),\\n        loStr = string.toLowerCase();\\n\\n    if ( string === upStr  \\u0026\\u0026  upStr !== loStr )    return 'Woah, chill out!';\\n    if ( string[string.length-1] === '?' )   return 'Sure.';\\n    if ( string.trim() === '' )  return 'Fine. Be that way!';\\n    return 'Whatever.';\\n};"}
157	41	6888284b15a4cdec86ef78bd	superseded	javascript	bob	\N	\N	0	2	2015-09-29 14:16:16	2015-09-29 14:16:16	219	{"bob.js":"function Bob () {\\n\\n}\\n\\nBob.prototype.hey = function (string) {\\n    var upStr = string.toUpperCase(),\\n        loStr = string.toLowerCase(),\\n        shout = ( string === upStr  \\u0026\\u0026  !(string === loStr) );\\n\\n    if ( shout )    return 'Woah, chill out!';\\n    if ( string[string.length-1] === '?')   return 'Sure.';\\n    if ( string.trim() === '')  return 'Fine. Be that way!';\\n    return 'Whatever.';\\n};"}
158	6	5875baeb1dec9ce1420d20e0	done	python	triangle	\N	\N	0	1	2015-10-30 07:35:46	2015-10-30 07:35:46	222	{"triangle.py":"\\"\\"\\"A triangle.\\"\\"\\"\\n\\n\\nclass TriangleError(Exception):\\n    \\"\\"\\"Raised when the triangle inequality fails.\\"\\"\\"\\n    pass\\n\\n\\nclass Triangle(object):\\n    \\"\\"\\"A triangle.\\"\\"\\"\\n\\n    def __init__(self, x, y, z):\\n        \\"\\"\\"Create a triangle.\\n\\n        Args:\\n            x: The length of a side of a triangle.\\n            y: The length of a side of a triangle.\\n            z: The length of a side of a triangle.\\n\\n        Raises:\\n            TriangleError: The triangle inequality failed.\\n        \\"\\"\\"\\n        if x + y \\u003c= z or x + z \\u003c= y or y + z \\u003c= x:\\n            raise TriangleError(\\"The triangle inequality failed.\\")\\n        self.sides = (x, y, z)\\n\\n    def kind(self):\\n        \\"\\"\\"Return the kind of the triangle.\\n\\n        Returns:\\n            str. \\"equilateral\\", \\"isosceles\\", or \\"scalene\\".\\n        \\"\\"\\"\\n        if self.sides[0] == self.sides[1] == self.sides[2]:\\n            return \\"equilateral\\"\\n        elif (self.sides[0] == self.sides[1] or\\n              self.sides[0] == self.sides[2] or\\n              self.sides[1] == self.sides[2]):\\n            return \\"isosceles\\"\\n        else:\\n            return \\"scalene\\""}
159	34	655411cfe10524f051510c3f	superseded	ruby	raindrops	\N	\N	0	1	2015-09-28 02:09:19	2015-09-28 02:09:19	224	{"raindrops.rb":"class Raindrops\\n  def self.convert(num)\\n  \\tresult=\\"\\"\\n  \\tif num % 3 ==0 || num % 5==0 || num % 7==0\\n  \\t  result += \\"Pling\\" if num % 3 == 0\\n  \\t  result += \\"Plang\\" if num % 5  == 0\\n  \\t  result += \\"Plong\\" if num % 7 ==0\\n  \\telse\\n  \\t\\treturn \\"#{num}\\"\\n    end\\n    return \\"#{result}\\"\\n  end\\nend"}
160	34	e4e15ac8b20b1051fa5cd89d	hibernating	ruby	raindrops	\N	\N	0	2	2015-10-07 06:16:50	2015-10-07 06:16:50	224	{"raindrops.rb":"class Raindrops\\n  def self.convert(num)\\n  \\tresult=\\"\\"\\n  \\tresult += \\"Pling\\" if num % 3 == 0\\n  \\tresult += \\"Plang\\" if num % 5  == 0\\n  \\tresult += \\"Plong\\" if num % 7 ==0\\n  \\tresult = result.empty? ? num.to_s : result\\n    \\n  end\\nend"}
161	34	f952b2d76ee2480df6c82cf4	superseded	python	word-count	\N	\N	0	1	2015-11-25 00:34:45	2015-11-25 00:34:45	226	{"/python/word-count/wordcount.py":"def word_count(phrase):\\n\\tcount = {}\\n\\tfor word in phrase.split():\\n\\t\\tif word in count:\\n\\t\\t\\tcount[word] += 1\\n\\t\\telse:\\n\\t\\t\\tcount[word] = 1\\n\\treturn count"}
162	34	eaf5d9d018d239f33b8791b9	done	python	word-count	\N	\N	0	2	2015-12-14 15:01:20	2015-12-14 15:01:20	226	{"/python/word-count/wordcount.py":"from collections import defaultdict\\n\\ndef word_count(phrase):\\n\\tcount = defaultdict(int)\\n\\tfor word in phrase.split():\\n\\t\\tcount[word] += 1\\n\\treturn count"}
163	16	045815fdeb92ec61b4dd342b	hibernating	haskell	phone-number	\N	\N	0	1	2015-06-08 17:00:46	2015-06-08 17:00:46	227	{"Phone.hs":"module Phone (areaCode, number, prettyPrint) where\\n\\nareaCode = take 3 . number\\n\\nprettyPrint n =\\n    \\"(\\" ++ area ++ \\") \\" ++ hi ++ \\"-\\" ++ lo\\n\\n  where\\n    area = take 3          num\\n    hi   = take 3 $ drop 3 num\\n    lo   =          drop 6 num\\n\\n    num = number n\\n\\nnumber n = conditions\\n    [ len == 10              ==\\u003e      itself\\n    , len == 11 \\u0026\\u0026 hd == '1' ==\\u003e tail itself\\n    ]\\n\\n    badNumber\\n\\n  where\\n    len = length itself\\n    hd  = head   itself\\n\\n    itself = filter (`elem` ['0'..'9']) n\\n\\n    badNumber = \\"0000000000\\"\\n\\n\\nconditions list def =\\n    foldl (\\\\rest (flag, result) -\\u003e if flag then result else rest) def list\\n\\ninfix 1 ==\\u003e\\n\\n(==\\u003e) = (,)"}
177	18	cac99d1260eeddf7825a1a15	pending	ruby	difference-of-squares	\N	\N	0	1	2015-12-28 12:37:59	2015-12-28 12:37:59	250	{"squares.rb":"class Squares\\n  attr_reader :limit\\n\\n  def initialize(limit)\\n    @limit = limit\\n  end\\n\\n  def square_of_sums\\n    sum = (1..limit).inject(\\u0026:+)\\n    sum**2\\n  end\\n\\n  def sum_of_squares\\n    (1..limit).inject(0) do |sum, n|\\n      sum++ n**2\\n    end\\n  end\\n\\n  def difference\\n    square_of_sums - sum_of_squares\\n  end\\nend"}
178	18	50657eb83a3522c423d446a7	pending	javascript	grains	\N	\N	0	1	2015-12-04 09:01:26	2015-12-04 09:01:26	251	{"/javascript/grains/grains.js":"function Grains() {}\\n\\nGrains.prototype.square = function(squareNum) {\\n  if (squareNum === 1) {\\n    return 1;\\n  }\\n  return Math.pow(2, squareNum - 1)\\n};\\n\\nGrains.prototype.total = function() {\\n  return this.square(65);\\n};\\n\\nmodule.exports = Grains;"}
164	18	4f609efc347fed6d0d01a037	done	ruby	beer-song	\N	\N	0	1	2015-11-27 07:46:02	2015-11-27 07:46:02	229	{"beer-song.rb":"class BeerSong\\n  def verse(num_on_wall, remaining = num_on_wall)\\n    phrase1 = \\"#{bottle_number(num_on_wall).capitalize} #{bottles_plural?(num_on_wall)} of beer on the wall, #{bottle_number(num_on_wall)} #{bottles_plural?(num_on_wall)} of beer.\\\\n\\"\\n\\n    num_on_wall -= 1\\n    if num_on_wall == -1\\n      phrase2 = \\"Go to the store and buy some more, 99 bottles of beer on the wall.\\\\n\\"\\n    else\\n      phrase2 = \\"Take #{pronoun(num_on_wall)} down and pass it around, #{bottle_number(num_on_wall)} #{bottles_plural?(num_on_wall)} of beer on the wall.\\\\n\\"\\n    end\\n\\n    return phrase1 + phrase2\\n  end\\n\\n  def verses(num_on_wall, remaining)\\n    return \\"\\" if remaining \\u003e num_on_wall\\n\\n    song = verse(num_on_wall) + \\"\\\\n\\"\\n    song += verses(num_on_wall - 1, remaining)\\n    return song\\n  end\\n\\n  def sing\\n    verses(99, 0)\\n  end\\n\\n  private\\n\\n  def bottles_plural?(num)\\n    num == 1 ? correctly_pluralized_bottle = \\"bottle\\" : correctly_pluralized_bottle = \\"bottles\\"\\n    return correctly_pluralized_bottle\\n  end\\n\\n  def bottle_number(num)\\n    num == 0 ? how_many_bottles = \\"no more\\" : how_many_bottles = num.to_s\\n    return how_many_bottles\\n  end\\n\\n  def pronoun(num)\\n    num == 0 ? correct_pronoun = \\"it\\" : correct_pronoun = \\"one\\"\\n    return correct_pronoun\\n  end\\n\\nend"}
165	18	c71308b15127cdade18f4402	pending	csharp	hamming	\N	\N	0	1	2015-12-02 21:55:37	2015-12-02 21:55:37	230	{"Hamming.cs":"using System;\\r\\nusing System.Collections.Generic;\\r\\n\\r\\nclass Hamming\\r\\n{\\r\\n    public static int Compute(string strandA, string strandB)\\r\\n    {\\r\\n        strandA = strandA.Trim();\\r\\n        strandB = strandB.Trim();\\r\\n        if (strandA.Length == 0 || strandB.Length == 0)\\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        int distance = 0;\\r\\n        for (int i = 0; i \\u003c strandA.Length \\u0026\\u0026 i \\u003c strandB.Length; i++)\\r\\n        {\\r\\n            if (strandA[i] != strandB[i])\\r\\n            {\\r\\n                distance++;\\r\\n            }\\r\\n        }\\r\\n        return distance;\\r\\n    }\\r\\n}"}
166	18	0999d131c44c92e8be1d18cd	done	scala	accumulate	\N	\N	0	2	2015-11-06 13:07:03	2015-11-06 13:07:03	233	{"Accumulate.scala":"class Accumulate {\\n\\n\\tdef accumulate[FROM, TO](function: FROM =\\u003e TO, list: List[FROM]): List[TO] =\\n\\t\\tlist.foldLeft(List.empty[TO]) { case (acc, from) =\\u003e acc :+ function(from)}\\n\\n}"}
167	18	5932d7d59ef8c6bccbaf4cb8	superseded	scala	accumulate	\N	\N	0	1	2015-12-11 10:42:48	2015-12-11 10:42:48	233	{"Accumulate.scala":"import scala.collection.mutable.ListBuffer\\n\\nclass Accumulate {\\n\\n\\tdef accumulate[FROM, TO](function: (FROM) =\\u003e TO, list: List[FROM]): List[TO] = {\\n\\t\\tval buffer = ListBuffer.empty[TO]\\n\\t\\tlist.foreach { from =\\u003e\\n\\t\\t\\tval to = function(from)\\n\\t\\t\\tbuffer += to\\n\\t\\t}\\n\\t\\tbuffer.toList\\n\\t}\\n\\n}"}
168	18	47cd09d02361a134a11bf3dc	pending	elixir	gigasecond	\N	\N	0	1	2015-11-07 23:13:59	2015-11-07 23:13:59	234	{"gigasecond.exs":"defmodule Gigasecond do\\n\\t@doc \\"\\"\\"\\n\\tCalculate a date one billion seconds after an input date.\\n\\t\\"\\"\\"\\n\\t@spec from({pos_integer, pos_integer, pos_integer}) :: :calendar.date\\n\\n\\tdef from(starting_date) do\\n    starting_seconds = :calendar.datetime_to_gregorian_seconds({starting_date, {0, 0, 0}})\\n    ending_seconds = trunc(starting_seconds + :math.pow(10, 9))\\n\\n    {ending_date, _} = :calendar.gregorian_seconds_to_datetime(ending_seconds)\\n\\n    ending_date\\n\\tend\\nend"}
169	18	1644b541b578ebff839daa95	pending	cpp	hamming	\N	\N	0	1	2015-10-29 23:53:23	2015-10-29 23:53:23	236	{"hamming.h":"#include \\u003cstring\\u003e\\n#include \\u003cstdexcept\\u003e\\n\\nnamespace hamming\\n{\\n    int compute(std::string A, std::string B)\\n    {\\n        if (A.size() != B.size())\\n            throw std::domain_error(\\"hamming::compute:Input strings must have equal lengths.\\");\\n        \\n        int hamming_dist = 0;\\n        for (int i=0; i\\u003cA.size(); i++)\\n        {\\n            if (A[i] != B[i])\\n                hamming_dist += 1;\\n        }\\n        return hamming_dist;\\n    }\\n}"}
170	18	92492723e2a41d5b4672b9fe	superseded	python	gigasecond	\N	\N	0	1	2015-11-23 19:29:09	2015-11-23 19:29:09	237	{"gigasecond.py":"import datetime\\n\\ndef add_gigasecond(input_date):\\n    giga_seconds = datetime.timedelta(seconds=10**9)\\n    return input_date + giga_seconds"}
171	18	c082fafb5d67e1a8d02fd470	pending	python	gigasecond	\N	\N	0	2	2015-12-01 02:57:57	2015-12-01 02:57:57	237	{"gigasecond.py":"from datetime import timedelta\\n\\n# define constants\\ngiga_seconds = timedelta(seconds=10**9)\\n\\ndef add_gigasecond(date):\\n    return date + giga_seconds"}
172	18	e99edcc554cb636e76c5ab4a	pending	csharp	bob	\N	\N	0	1	2015-12-13 21:40:04	2015-12-13 21:40:04	239	{"Bob.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Text;\\r\\nusing System.Threading.Tasks;\\r\\n\\r\\nnamespace ExercismCSharp.bob\\r\\n{\\r\\n    class Bob\\r\\n    {\\r\\n        public static bool isAllUpper (string sentence)\\r\\n        {\\r\\n            for (int i = 0; i \\u003c sentence.Length; i++)\\r\\n            {\\r\\n                if (Char.IsLetter(sentence[i]) \\u0026\\u0026 !Char.IsUpper(sentence[i]))\\r\\n                {\\r\\n                    return false;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        public static bool isAllDigit (string sentence)\\r\\n        {\\r\\n            for (int i = 0; i \\u003c sentence.Length; i++)\\r\\n            {\\r\\n                if (Char.IsLetter(sentence[i]))\\r\\n                    return false;\\r\\n            }\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        public string Hey(string words)\\r\\n        {\\r\\n            if (isAllUpper(words) \\u0026\\u0026 !isAllDigit(words)) //check if all characters are upper case and not all numbers\\r\\n                return \\"Whoa, chill out!\\";\\r\\n\\r\\n            if (words.EndsWith(\\"?\\"))\\r\\n                return \\"Sure.\\";\\r\\n\\r\\n            if (String.IsNullOrWhiteSpace(words))\\r\\n                return \\"Fine. Be that way!\\";\\r\\n\\r\\n            else\\r\\n                return \\"Whatever.\\";\\r\\n        }\\r\\n    }\\r\\n}\\r"}
173	18	1f1040822ff2cd4f53e4fea2	hibernating	ruby	grains	\N	\N	0	1	2015-10-27 22:52:19	2015-10-27 22:52:19	243	{"grains.rb":"class Grains\\n\\n  def square(num)\\n    (1..num).inject{|acc, num| acc * 2 }\\n  end\\n\\n  def total\\n    18446744073709551615\\n  end\\n\\nend"}
174	18	f2b3eed1c42a05526a70dd62	pending	elixir	grade-school	\N	\N	0	1	2015-12-11 22:25:51	2015-12-11 22:25:51	244	{"school.exs":"defmodule School do\\n  @moduledoc \\"\\"\\"\\n  Simulate students in a school.\\n\\n  Each student is in a grade.\\n  \\"\\"\\"\\n\\n  @doc \\"\\"\\"\\n  Add a student to a particular grade in school.\\n  \\"\\"\\"\\n  @spec add(Dict.t, String.t, pos_integer) :: Dict.t\\n  def add(db, name, grade) do\\n    Dict.update(db, grade, [name], \\u0026([name | \\u00261]))\\n  end\\n\\n  @doc \\"\\"\\"\\n  Return the names of the students in a particular grade.\\n  \\"\\"\\"\\n  @spec grade(Dict.t, pos_integer) :: [String]\\n  def grade(db, grade) do\\n    if Dict.has_key?(db, grade), do: db[grade], else: []\\n  end\\n\\n  @doc \\"\\"\\"\\n  Sorts the school by grade and name.\\n  \\"\\"\\"\\n  @spec sort(Dict) :: Dict.t\\n  def sort(db) do\\n    db \\n    |\\u003e Enum.map(fn({k, v}) -\\u003e {k, Enum.sort(v)} end) \\n    |\\u003e Enum.sort\\n    |\\u003e Enum.into(%{})\\n  end\\nend"}
175	18	e47c367bba44716805ef0991	pending	python	sieve	\N	\N	0	1	2015-12-02 15:56:59	2015-12-02 15:56:59	248	{"sieve.py":"def sieve(n):\\n    return sieve_aux(0, range(2, n + 1))\\n\\n\\ndef sieve_aux(i, candidates):\\n    if (i \\u003c len(candidates)):\\n        return sieve_aux(i + 1, [x for x in candidates if (x % candidates[i]) != 0 or (x == candidates[i])])\\n    else:\\n        return candidates"}
181	24	751ee1eee7ea37e7a86eec4c	hibernating	csharp	bob	\N	\N	0	1	2015-09-10 20:15:05	2015-09-10 20:15:05	257	{"Bob.cs":"public class Bob {\\n  static void Main(string[] args) {\\n  }\\n\\n  public string Hey(string s) {\\n    if (s.Trim().Equals(\\"\\"))\\n      return \\"Fine. Be that way!\\";\\n    if (s.ToUpper().Equals(s)  \\u0026\\u0026 !s.ToLower().Equals(s))\\n      return \\"Whoa, chill out!\\";\\n    if (s.Trim().EndsWith(\\"?\\"))\\n      return \\"Sure.\\";\\n    return \\"Whatever.\\";\\n  }\\n}"}
182	24	d5df234efe794f102bf63c6b	superseded	clojure	meetup	\N	\N	0	1	2015-08-27 04:41:45	2015-08-27 04:41:45	258	{"meetup.clj":"(ns meetup)\\n\\n(import 'java.util.Calendar)\\n\\n(def to-java-month\\n  dec)\\n\\n(defn from-java-day-of-week\\n  [day-of-week]\\n  (inc (rem (+ day-of-week 6) 7)))\\n\\n(defn- days-in-month\\n  [year month]\\n  (let [c (Calendar/getInstance)]\\n    (doto c\\n      (.set Calendar/YEAR year)\\n      (.set Calendar/MONTH (to-java-month month)))\\n    (.getActualMaximum c Calendar/DAY_OF_MONTH)))\\n\\n(defn- thirteenth-day\\n  [year month]\\n  (let [c (Calendar/getInstance)\\n        _ (.set c year (to-java-month month) 13)\\n        d (.get c Calendar/DAY_OF_WEEK)]\\n    (from-java-day-of-week d)))\\n\\n(defn- last-day\\n  [year month]\\n  (let [c (Calendar/getInstance)\\n        _ (.set c year (to-java-month month) (days-in-month year month))\\n        d (.get c Calendar/DAY_OF_WEEK)]\\n    (from-java-day-of-week d)))\\n\\n(defn- first-day\\n  [year month]\\n  (let [c (Calendar/getInstance)\\n        _ (.set c year (to-java-month month) 1)\\n        d (.get c Calendar/DAY_OF_WEEK)]\\n    (from-java-day-of-week d)))\\n\\n(defn- schedule-teenth\\n  [day-of-week month year]\\n  [year\\n   month\\n   (+ 13\\n      (rem (- (+ day-of-week 7)\\n              (thirteenth-day year month))\\n           7))])\\n\\n(defn- schedule-last\\n  [day-of-week month year]\\n  [year\\n   month\\n   (- (days-in-month year month)\\n      (rem (+ (- day-of-week\\n                 (last-day year month))\\n              7)\\n           7))])\\n\\n(defn- schedule-nth\\n  [day-of-week month year n]\\n  [year\\n   month\\n   (+ 1\\n      (* (dec n) 7)\\n      (rem (+ (- day-of-week\\n                 (first-day year month))\\n              7)\\n           7))])\\n\\n(defn- schedule-meetup\\n  [schedule day-of-week month year]\\n  (case schedule\\n    :teenth (schedule-teenth day-of-week month year)\\n    :last   (schedule-last day-of-week month year)\\n    :first  (schedule-nth day-of-week month year 1)\\n    :second (schedule-nth day-of-week month year 2)\\n    :third  (schedule-nth day-of-week month year 3)\\n    :fourth (schedule-nth day-of-week month year 4)))\\n\\n(defmacro meetup-fn\\n  [name schedule day-of-week]\\n  `(def ~(symbol name) (partial schedule-meetup\\n                                ~schedule\\n                                ~day-of-week)))\\n\\n(meetup-fn monteenth    :teenth 1)\\n(meetup-fn tuesteenth   :teenth 2)\\n(meetup-fn wednesteenth :teenth 3)\\n(meetup-fn thursteenth  :teenth 4)\\n(meetup-fn friteenth    :teenth 5)\\n(meetup-fn saturteenth  :teenth 6)\\n(meetup-fn sunteenth    :teenth 7)\\n\\n(meetup-fn first-monday    :first 1)\\n(meetup-fn first-tuesday   :first 2)\\n(meetup-fn first-wednesday :first 3)\\n(meetup-fn first-thursday  :first 4)\\n(meetup-fn first-friday    :first 5)\\n(meetup-fn first-saturday  :first 6)\\n(meetup-fn first-sunday    :first 7)\\n\\n(meetup-fn second-monday    :second 1)\\n(meetup-fn second-tuesday   :second 2)\\n(meetup-fn second-wednesday :second 3)\\n(meetup-fn second-thursday  :second 4)\\n(meetup-fn second-friday    :second 5)\\n(meetup-fn second-saturday  :second 6)\\n(meetup-fn second-sunday    :second 7)\\n\\n(meetup-fn third-monday    :third 1)\\n(meetup-fn third-tuesday   :third 2)\\n(meetup-fn third-wednesday :third 3)\\n(meetup-fn third-thursday  :third 4)\\n(meetup-fn third-friday    :third 5)\\n(meetup-fn third-saturday  :third 6)\\n(meetup-fn third-sunday    :third 7)\\n\\n(meetup-fn fourth-monday    :fourth 1)\\n(meetup-fn fourth-tuesday   :fourth 2)\\n(meetup-fn fourth-wednesday :fourth 3)\\n(meetup-fn fourth-thursday  :fourth 4)\\n(meetup-fn fourth-friday    :fourth 5)\\n(meetup-fn fourth-saturday  :fourth 6)\\n(meetup-fn fourth-sunday    :fourth 7)\\n\\n(meetup-fn last-monday    :last 1)\\n(meetup-fn last-tuesday   :last 2)\\n(meetup-fn last-wednesday :last 3)\\n(meetup-fn last-thursday  :last 4)\\n(meetup-fn last-friday    :last 5)\\n(meetup-fn last-saturday  :last 6)\\n(meetup-fn last-sunday    :last 7)"}
183	24	2fba2429723bcd616f7b8e11	done	clojure	meetup	\N	\N	0	2	2015-10-06 02:48:24	2015-10-06 02:48:24	258	{"meetup.clj":"(ns meetup\\n  (:require [clojure.string :as string])\\n  (:import java.util.Calendar))\\n\\n(def ^:private days-of-week\\n  {:monday    Calendar/MONDAY\\n   :tuesday   Calendar/TUESDAY\\n   :wednesday Calendar/WEDNESDAY\\n   :thursday  Calendar/THURSDAY\\n   :friday    Calendar/FRIDAY\\n   :saturday  Calendar/SATURDAY\\n   :sunday    Calendar/SUNDAY})\\n\\n(def ^:private weeks-of-month\\n  {:first     1\\n   :second    2\\n   :third     3\\n   :fourth    4\\n   :last     -1})\\n\\n(defn- days-until\\n  \\"Get the number of days from the current date till a specific weekday\\"\\n  [c day]\\n  (let [delta (- day (.get c Calendar/DAY_OF_WEEK))]\\n    (mod (+ 7 delta) 7)))\\n\\n(defn- nth-weekday-in-month\\n  \\"Get the nth of a certain weekday in the given month \\u0026 year\\"\\n  [week day month year]\\n  (let [c (Calendar/getInstance)]\\n    (doto c\\n      (.set Calendar/YEAR year)\\n      (.set Calendar/MONTH (dec month))\\n      (.set Calendar/DAY_OF_WEEK day)\\n      (.set Calendar/DAY_OF_WEEK_IN_MONTH week))\\n    [year month (.get c Calendar/DAY_OF_MONTH)]))\\n\\n(defn- teenth-weekday-in-month\\n  \\"Get the teenth of a certain weekday in the given month \\u0026 year\\"\\n  [day month year]\\n  (let [c (Calendar/getInstance)]\\n    (doto c\\n      (.set Calendar/YEAR year)\\n      (.set Calendar/MONTH (dec month))\\n      (.set Calendar/DAY_OF_MONTH 13)\\n      (.add Calendar/DATE (days-until c day)))\\n    [year month (.get c Calendar/DAY_OF_MONTH)]))\\n\\n(doseq [[day i] days-of-week]\\n  (let [fn-name (string/replace (name day) #\\"day$\\" \\"teenth\\")]\\n    (intern 'meetup (symbol fn-name)\\n            (partial teenth-weekday-in-month i))))\\n\\n(doseq [[day  i] days-of-week\\n        [week n] weeks-of-month]\\n  (let [fn-name (str (name week) \\"-\\" (name day))]\\n    (intern 'meetup (symbol fn-name)\\n            (partial nth-weekday-in-month n i))))"}
184	24	ef0acbca7b4e52a20d94ca10	done	python	difference-of-squares	\N	\N	0	1	2015-11-18 22:50:36	2015-11-18 22:50:36	260	{"difference_of_squares.py":"# Difference of Squares\\n\\n# this sums all of the squares between 0 - n\\ndef sum_of_squares(n):\\n\\tsum_of_squares = 0\\n\\n\\tfor num in range(0, n+1):\\n\\t\\tsum_of_squares += (num ** 2)\\n\\n\\treturn sum_of_squares\\n\\n# this squares the sum of 0 - n\\ndef square_of_sum(n):\\n\\tsquare_of_sum = 0\\n\\n\\tfor num in range(0, n+1):\\n\\t\\tsquare_of_sum += num\\n\\n\\tsquare_of_sum **= 2\\n\\n\\treturn square_of_sum\\n\\n# calculates the difference between the\\n# square of the sum and the sum of the \\n# squares\\ndef difference(n):\\n\\tdifference = square_of_sum(n) - sum_of_squares(n)\\n\\t\\n\\treturn difference"}
185	42	65f53993e01fb007de130ed8	pending	perl5	strain	\N	\N	0	1	2015-05-09 18:58:30	2015-05-09 18:58:30	261	{"Strain.pm":"#!/usr/bin/perl\\n\\npackage Strain;\\n\\nuse strict;\\nuse warnings;\\nuse Exporter;\\nuse vars qw($VERSION @ISA @EXPORT @EXPORT_OK %EXPORT_TAGS);\\n\\n$VERSION     = 1.00;\\n@ISA         = qw(Exporter);\\n@EXPORT      = ();\\n@EXPORT_OK   = qw(keep discard);\\n%EXPORT_TAGS = ( DEFAULT =\\u003e [qw(\\u0026keep \\u0026discard)]);\\n\\nsub keep {\\n\\tmy ($input, $function) = @_;\\n\\tmy @output;\\n\\tforeach (@$input) {\\n\\t\\tpush(@output, $_) if $function-\\u003e($_);\\n\\t}\\n\\treturn \\\\@output;\\n}\\n\\nsub discard {\\n\\tmy ($input, $function) = @_;\\n\\tmy @output;\\n\\tforeach (@$input) {\\n\\t\\tpush(@output, $_) unless $function-\\u003e($_);\\n\\t}\\n\\treturn \\\\@output;\\t\\n}\\n\\n1;"}
186	42	5050dd3d7f74f28e3d73c1b4	done	javascript	triangle	\N	\N	0	2	2015-07-28 05:53:31	2015-07-28 05:53:31	262	{"triangle.js":"var Triangle = function(a, b, c) {\\r\\n  var hasNoSides, hasNonPositiveSides,\\r\\n      isEquilateral, isError, isIllegal,\\r\\n      isIsoscelees, violatesTriangleInequality;\\r\\n\\r\\n  this.kind = function() {\\r\\n    if( isError() )\\r\\n      throw(new TriangleError(\\"Invalid Triangle\\"));\\r\\n\\r\\n    if( isIllegal() )\\r\\n      return \\"illegal\\";\\r\\n\\r\\n    if( isEquilateral() )\\r\\n      return \\"equilateral\\";\\r\\n\\r\\n    if( isIsoscelees() )\\r\\n      return \\"isosceles\\";\\r\\n\\r\\n    return \\"scalene\\";\\r\\n  };\\r\\n\\r\\n\\r\\n  isError = function() {\\r\\n    return hasNoSides();\\r\\n  };\\r\\n\\r\\n  hasNoSides = function() {\\r\\n    return a == 0 \\u0026\\u0026 b == 0 \\u0026\\u0026 c == 0;\\r\\n  };\\r\\n\\r\\n\\r\\n  isIllegal = function() {\\r\\n    return hasNonPositiveSides() || violatesTriangleInequality();\\r\\n  };\\r\\n\\r\\n  hasNonPositiveSides = function() {\\r\\n    return a \\u003c= 0 || b \\u003c= 0 || c \\u003c= 0;\\r\\n  };\\r\\n\\r\\n  violatesTriangleInequality = function() {\\r\\n    return a \\u003e= b + c || b \\u003e= a + c || c \\u003e= a + b;\\r\\n  };\\r\\n\\r\\n\\r\\n  isEquilateral = function() {\\r\\n    return a == b \\u0026\\u0026 b == c;\\r\\n  };\\r\\n\\r\\n\\r\\n  isIsoscelees = function() {\\r\\n    return a == b || b == c || a == c;\\r\\n  };\\r\\n};\\r\\n\\r\\n\\r\\nTriangleError = function() {};\\r\\nTriangleError.prototype = Error.prototype;\\r\\n\\r\\nTriangle.Error = TriangleError;\\r\\n\\r\\nmodule.exports = Triangle;\\r"}
200	42	ae7cd1fb9c8e9586ca1da24d	pending	ruby	roman-numerals	\N	\N	0	1	2015-05-12 05:19:29	2015-05-12 05:19:29	272	{"/ruby/roman-numerals/roman.rb":"class Fixnum\\n  def to_roman\\n    input = self\\n    result = []\\n    roman_numeral_key = {1 =\\u003e \\"I\\", 4 =\\u003e \\"IV\\", 5 =\\u003e \\"V\\", 9 =\\u003e \\"IX\\", 10 =\\u003e \\"X\\", 40 =\\u003e \\"XL\\", 50 =\\u003e \\"L\\", 90 =\\u003e \\"XC\\", 100 =\\u003e \\"C\\", 400 =\\u003e \\"CD\\", 500 =\\u003e \\"D\\", 900 =\\u003e \\"CM\\", 1000 =\\u003e \\"M\\"}\\n    new_roman_numeral_key = Hash[roman_numeral_key.to_a.reverse]\\n    if input \\u003e 0\\n      new_roman_numeral_key.each do |number, roman_numeral|\\n        if input \\u003e= number\\n          result \\u003c\\u003c roman_numeral\\n          input -= number\\n          redo\\n        end\\n      end\\n      return result.join.to_s\\n    end\\n  end\\nend"}
202	42	ee33def9f6c0cfb20dd4f057	\N	scala	leap	\N	\N	0	1	2015-05-27 09:03:14	2015-05-27 09:03:14	274	{"src/main/scala/Year.scala":"/**\\n * Created by ankit on 22.10.15.\\n */\\ncase class Year(year:Int) {\\n\\n  def isLeap : Boolean = year match {\\n    case _ if(year%4 == 0 \\u0026\\u0026 year%100 == 0 \\u0026\\u0026 year%400 == 0) =\\u003e true\\n    case _ if(year%4==0 \\u0026\\u0026 year%100 != 0) =\\u003e true\\n    case _ =\\u003e false\\n  }\\n\\n}"}
187	42	6a90504907d7d690f00ba51f	superseded	javascript	triangle	\N	\N	0	1	2015-09-30 14:46:33	2015-09-30 14:46:33	262	{"triangle.js":";\\n\\nvar Triangle = function(a, b, c) {\\n    var hasNoSides = function() {\\n            return a == 0 \\u0026\\u0026 b == 0 \\u0026\\u0026 c == 0;\\n        },\\n        hasNonPositiveSides = function() {\\n            return a \\u003c= 0 || b \\u003c= 0 || c \\u003c= 0;\\n        },\\n        violatesTriangleInequality = function() {\\n            return a \\u003e= b + c || b \\u003e= a + c || c \\u003e= a + b;\\n        },\\n        isError = function() {\\n            return hasNoSides();\\n        },\\n        isIllegal = function() {\\n            return hasNonPositiveSides() || violatesTriangleInequality();\\n        },\\n        isEquilateral = function() {\\n            return a == b \\u0026\\u0026 b == c;\\n        },\\n        isIsoscelees = function() {\\n            return a == b || b == c || a == c;\\n        };\\n\\n    this.kind = function() {\\n        if( isError() )\\n            throw(new TriangleError(\\"Invalid Triangle\\"));\\n\\n        if( isIllegal() )\\n            return \\"illegal\\";\\n\\n        if( isEquilateral() )\\n            return \\"equilateral\\";\\n\\n        if( isIsoscelees() )\\n            return \\"isosceles\\";\\n\\n        return \\"scalene\\";\\n    };\\n\\n};\\n\\n\\nTriangleError = function() {};\\nTriangleError.prototype = Error;\\n\\nTriangle.Error = TriangleError;\\n\\nmodule.exports = Triangle;"}
188	42	c863722b764c59c8ff2f3317	done	ruby	word-count	\N	\N	0	9	2015-06-26 19:28:54	2015-06-26 19:28:54	263	{"phrase.rb":"class Phrase\\n  def initialize(input)\\n    @input = input.downcase\\n  end\\n  \\n  def word_count\\n    words.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\\n  end\\n  \\n  private\\n  \\n  def words\\n    @input.scan(/[\\\\w']+/)\\n  end\\nend"}
189	42	d61f82d33152781ba488ad8e	superseded	ruby	word-count	\N	\N	0	8	2015-06-30 08:17:42	2015-06-30 08:17:42	263	{"word-count.rb":"class Phrase\\n  def initialize(input)\\n    @input = input.downcase\\n  end\\n  \\n  def word_count\\n    words.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\\n  end\\n  \\n  private\\n  \\n  def words\\n    @input.scan(/\\\\w+/)\\n  end\\nend"}
190	42	ca1291d46d0e60093e2468eb	superseded	ruby	word-count	\N	\N	0	7	2015-08-08 15:59:05	2015-08-08 15:59:05	263	{"word-count.rb":"class Phrase\\n  def initialize(input)\\n    @input = input\\n  end\\n  \\n  def word_count\\n    words.each_with_object(Hash.new(0)) do |w, c| \\n      c[key_for(w)] += 1 \\n    end\\n  end\\n  \\n  private\\n  \\n  def key_for(word)\\n    word.to_s.strip.downcase\\n  end\\n  \\n  def words\\n    @input.scan(/\\\\w+/)\\n  end\\nend"}
191	42	e1fc78a832fb8aa6cdbbad5b	superseded	ruby	word-count	\N	\N	0	2	2015-08-12 23:10:16	2015-08-12 23:10:16	263	{"word-count.rb":"class Phrase\\n\\tattr_reader :word_count\\n\\n\\tdef initialize(input)\\n\\t\\t@word_count = {}\\n\\t\\textract_words(input).each { |w| update_word_count_with w }\\n\\tend\\n\\t\\n\\tprivate\\n\\t\\n\\tdef extract_words(input)\\n\\t\\tinput.scan(/[a-zA-Z0-9]+/)\\n\\tend\\n\\t\\n\\tdef update_word_count_with(word)\\n\\t\\tkey = word.strip.downcase\\n\\t\\tcount = (@word_count.has_key? key) ? @word_count[key] : 0\\n\\t\\t@word_count[key] = count + 1\\n\\tend\\nend"}
192	42	7fa108a4578e1cd1b2b9de1c	superseded	ruby	word-count	\N	\N	0	6	2015-08-29 12:46:35	2015-08-29 12:46:35	263	{"word-count.rb":"class Phrase\\n  def initialize(input)\\n    @input = input\\n  end\\n  \\n  def word_count\\n    words.each_with_object(counter) { |w, c| c[key_for(w)] += 1 }\\n  end\\n  \\n  private\\n  \\n  def counter\\n    Hash.new {|h,k| h.default = 0}\\n  end\\n  \\n  def key_for(word)\\n    word.to_s.strip.downcase\\n  end\\n  \\n  def words\\n    @input.scan(/[a-zA-Z0-9]+/)\\n  end\\nend"}
193	42	5680ce81f4832f22a849b3f8	superseded	ruby	word-count	\N	\N	0	4	2015-09-12 06:11:43	2015-09-12 06:11:43	263	{"word-count.rb":"class Phrase\\n\\tattr_reader :word_count\\n\\n\\tdef initialize(input)\\n\\t\\t@word_count = {}\\n\\t\\textract_words(input).each { |w| update_word_count_with w }\\n\\tend\\n\\t\\n\\tprivate\\n\\t\\n\\tdef extract_words(input)\\n\\t\\tinput.scan(/[a-zA-Z0-9]+/)\\n\\tend\\n\\t\\n\\tdef update_word_count_with(word)\\n\\t\\tkey = word.strip.downcase\\n\\t\\tcount = (@word_count.has_key? key) ? @word_count[key] : 0\\n\\t\\t@word_count[key] = count + 1\\n\\tend\\nend"}
194	42	6e5ce2b45b901a2e84098710	superseded	ruby	word-count	\N	\N	0	3	2015-09-13 09:14:00	2015-09-13 09:14:00	263	{"word-count.rb":"class Phrase\\n\\tattr_reader :word_count\\n\\n\\tdef initialize(input)\\n\\t\\t@word_count = {}\\n\\t\\textract_words(input).each { |w| update_word_count_with w }\\n\\tend\\n\\t\\n\\tprivate\\n\\t\\n\\tdef extract_words(input)\\n\\t\\tinput.scan(/[a-zA-Z0-9]+/)\\n\\tend\\n\\t\\n\\tdef update_word_count_with(word)\\n\\t\\tkey = word.strip.downcase.to_sym\\n\\t\\tcount = (@word_count.has_key? key) ? @word_count[key] : 0\\n\\t\\t@word_count[key] = count + 1\\n\\tend\\nend"}
195	42	67a5c9dfe1760dcf8f45fb99	superseded	ruby	word-count	\N	\N	0	1	2015-10-25 20:14:08	2015-10-25 20:14:08	263	{"word-count.rb":"class Phrase\\n\\tattr_reader :word_count\\n\\n\\tdef initialize(input)\\n\\t\\t@word_count = {}\\n\\t\\textract_words(input).each { |w| update_word_count_with w }\\n\\tend\\n\\t\\n\\tdef extract_words(input)\\n\\t\\tinput.scan(/[a-zA-Z0-9]+/)\\n\\tend\\n\\t\\n\\tdef update_word_count_with(word)\\n\\t\\tkey = word.strip.downcase\\n\\t\\tcount = (@word_count.has_key? key) ? @word_count[key] : 0\\n\\t\\t@word_count[key] = count + 1\\n\\tend\\nend"}
196	42	60cfbce25abdae865d745a5b	superseded	ruby	word-count	\N	\N	0	5	2015-10-29 17:45:50	2015-10-29 17:45:50	263	{"word-count.rb":"class Counter \\u003c Hash\\n  def add(item)\\n    k = key_for(item)\\n    self[k] = count_for(k) + 1\\n  end\\n  \\n  private\\n  \\n  def count_for(k)\\n    (has_key? k) ? self[k] : 0\\n  end\\n  \\n  def key_for(item)\\n  \\titem.to_s.strip.downcase\\n  end\\nend\\n\\nclass Phrase\\n  def initialize(input)\\n    @input = input\\n  end\\n  \\n  def word_count\\n    split(@input).each_with_object(Counter.new) { |w, counter| counter.add w }\\n  end\\n\\t\\n  private\\n\\t\\n  def split(input)\\n    input.scan(/[a-zA-Z0-9]+/)\\n  end\\nend"}
197	42	317ccefdd466be03fc2a19b1	pending	ruby	rna-transcription	\N	\N	0	1	2015-07-28 15:14:09	2015-07-28 15:14:09	264	{"/ruby/rna-transcription/complement.rb":"class Complement\\n\\n\\tdef self.of_dna(strand)\\n\\t\\tstrand.tr('GCTA','CGAU')\\n\\tend\\n\\t\\n\\tdef self.of_rna(strand)\\n\\t\\tstrand.tr('CGAU','GCTA')\\n\\tend\\nend"}
198	42	aa71d31d57ebe5fbf689256c	done	elixir	bob	\N	\N	0	1	2015-05-14 03:04:30	2015-05-14 03:04:30	266	{"bob.exs":"defmodule Teenager do\\n\\n  def hey(input) do\\n    cond do\\n      question?(input) -\\u003e \\"Sure.\\"\\n      silence?(input)  -\\u003e \\"Fine. Be that way!\\"\\n      shout?(input)    -\\u003e \\"Whoa, chill out!\\"\\n      true -\\u003e \\"Whatever.\\"\\n    end\\n  end\\n\\n  defp shout?(text) do\\n    String.upcase(text) == text \\u0026\\u0026 String.match?(text, ~r/\\\\p{L}/)\\n  end\\n\\n  defp question?(text) do\\n    String.ends_with?(text, \\"?\\")\\n  end\\n\\n  defp silence?(text) do\\n    String.strip(text) == \\"\\"\\n  end\\nend"}
199	42	d6799893f654d1241b006edc	\N	php	gigasecond	\N	\N	0	1	2015-06-24 08:10:02	2015-06-24 08:10:02	270	{"gigasecond.php":"\\u003c?php\\n\\nfunction from($date)\\n{\\n    return $date-\\u003eadd(new DateInterval(\\"PT1000000000S\\"));\\n}"}
201	42	12ffec9660ceea1e1d9c4a45	done	perl5	series	\N	\N	0	1	2015-06-17 01:31:14	2015-06-17 01:31:14	273	{"Series.pm":"package Series;\\nuse warnings;\\nuse strict;\\n\\nsub new{\\n\\tmy ($class, $data) = @_;\\n\\treturn bless { data =\\u003e $data }, $class;\\n}\\n\\nsub slice{\\n\\tmy ($self, $len) = @_;\\n\\tmy @array_of_data = split //, $self-\\u003e{data};\\n\\n\\tdie \\"ArgumentError\\" if ($len-1) \\u003e $#array_of_data;\\n\\tmy $result = [];\\n\\tfor (0..$#array_of_data-($len-1)){\\n\\t\\tpush @{ $result }, [ @array_of_data[$_..$_+($len-1)] ];\\n\\t}\\n\\n\\t$result\\n}\\n1;"}
203	42	eae9b40ee380f1281ce08492	superseded	elixir	word-count	\N	\N	0	1	2015-05-14 16:13:40	2015-05-14 16:13:40	277	{"/elixir/word-count/word_count.exs":"defmodule Words do\\n  @doc \\"\\"\\"\\n  Count the number of words in the sentence.\\n\\n  Words are compared case-insensitively.\\n  \\"\\"\\"\\n  @spec count(String.t) :: map()\\n  def count(sentence) do\\n    String.downcase(sentence)\\n      |\\u003e String.replace(~r/[^\\\\w\\\\d-]/u, \\" \\")\\n      |\\u003e String.split\\n      |\\u003e Enum.flat_map(\\u0026String.split(\\u00261, \\"_\\"))\\n      |\\u003e Enum.reduce(%{}, \\u0026update_word_count/2)\\n  end\\n\\n  defp update_word_count(word, map) do\\n    Map.update(map, word, 1, \\u0026(\\u00261 + 1))\\n  end\\nend"}
204	42	69750c7c990a89d21ec3e579	pending	elixir	word-count	\N	\N	0	3	2015-06-29 04:21:48	2015-06-29 04:21:48	277	{"/elixir/word-count/word_count.exs":"defmodule Words do\\n  @doc \\"\\"\\"\\n  Count the number of words in the sentence.\\n\\n  Words are compared case-insensitively.\\n  \\"\\"\\"\\n  @spec count(String.t) :: map()\\n  def count(sentence) do\\n    String.downcase(sentence)\\n      |\\u003e String.split(~r/[^\\\\w\\\\d-]|_/u, trim: true)\\n      |\\u003e Enum.reduce(%{}, \\u0026update_word_count/2)\\n  end\\n\\n  defp update_word_count(word, map) do\\n    Map.update(map, word, 1, \\u0026(\\u00261 + 1))\\n  end\\nend"}
205	42	782f0efe10c9d9880c104068	superseded	elixir	word-count	\N	\N	0	2	2015-07-25 09:55:01	2015-07-25 09:55:01	277	{"/elixir/word-count/word_count.exs":"defmodule Words do\\n  @doc \\"\\"\\"\\n  Count the number of words in the sentence.\\n\\n  Words are compared case-insensitively.\\n  \\"\\"\\"\\n  @spec count(String.t) :: map()\\n  def count(sentence) do\\n    String.downcase(sentence)\\n      |\\u003e String.split(~r/[^\\\\w\\\\d-]/u, trim: true)\\n      |\\u003e Enum.flat_map(\\u0026String.split(\\u00261, \\"_\\"))\\n      |\\u003e Enum.reduce(%{}, \\u0026update_word_count/2)\\n  end\\n\\n  defp update_word_count(word, map) do\\n    Map.update(map, word, 1, \\u0026(\\u00261 + 1))\\n  end\\nend"}
206	42	2cefc71342e11eedd0337bd2	superseded	ruby	series	\N	\N	0	1	2015-05-30 22:27:22	2015-05-30 22:27:22	278	{"series.rb":"class Series\\n  def initialize(string)\\n    @string = string\\n  end\\n\\n  def digits\\n    string.chars.map(\\u0026:to_i)\\n  end\\n\\n  def slices(slice_length)\\n    if slice_length \\u003e string.length\\n      raise ArgumentError, \\"Slice length (#{slice_length}) can't exceed string length (#{string.length}).\\"\\n    end\\n\\n    digits.each_cons(slice_length).to_a\\n  end\\n\\n  private\\n\\n  attr_reader :string\\nend"}
207	42	e3abc954485a4d154eb9360d	done	ruby	series	\N	\N	0	2	2015-08-10 07:37:47	2015-08-10 07:37:47	278	{"series.rb":"class Series\\n  attr_reader :digits\\n\\n  def initialize(string)\\n    @digits = string.chars.map(\\u0026:to_i)\\n  end\\n\\n  def slices(slice_length)\\n    if slice_length \\u003e @digits.length\\n      raise ArgumentError, \\"Slice length (#{slice_length}) can't exceed number of digits (#{@digits.length}).\\"\\n    end\\n\\n    digits.each_cons(slice_length).to_a\\n  end\\nend"}
208	42	c4e820f042a7df0579f28191	needs_input	cpp	anagram	\N	\N	0	1	2015-05-22 07:53:29	2015-05-22 07:53:29	280	{"anagram.cpp":"#include \\u003ciostream\\u003e\\n#include \\u003cvector\\u003e\\n#include \\"anagram.h\\"\\n#include \\u003ccstring\\u003e\\n#include \\u003calgorithm\\u003e\\n\\ntypedef std::vector\\u003cstd::string\\u003e test;\\n\\nnamespace anagram\\n{\\n\\tstd::string orderAlpha(std::string input)\\n\\t{\\n\\t\\tint i = 0;\\n\\t\\tchar tmp;\\n\\n\\t\\twhile(i\\u003cinput.length() - 1)\\n\\t\\t{\\n\\t\\t\\tif(input[i] \\u003e input[i+1])\\n\\t\\t\\t{\\n\\t\\t\\t\\ttmp = input[i];\\n\\t\\t\\t\\tinput[i] = input[i+1];\\n\\t\\t\\t\\tinput[i+1] = tmp;\\n\\t\\t\\t\\ti = 0;\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\treturn input;\\n\\t}\\n\\n\\tanagram::anagram (std::string input) \\n\\t{\\n  \\t\\t//Sort\\n  \\t\\ttransform(input.begin(), input.end(), input.begin(),(int (*)(int))tolower); //Conver to lower case\\n  \\t\\troot_word_orig = input;\\n  \\t\\troot_word = orderAlpha(root_word_orig);\\n\\t}\\n\\n\\ttest anagram::matches (test words) \\n\\t{\\n\\t\\ttest matching_words;\\n\\t\\ttest::iterator match_words_it;\\n\\n\\t\\ttest::iterator match_it;\\n\\t\\t\\n\\t\\tstd::string ordered;\\n\\n\\t\\tfor (match_it=words.begin(); match_it\\u003cwords.end(); match_it++) //For each string in vector\\n\\t\\t{\\n\\t\\t\\tordered = *match_it;\\n\\t\\t\\ttransform(ordered.begin(), ordered.end(), ordered.begin(),(int (*)(int))tolower); //Convert to lower case\\n\\n\\t\\t\\tif(root_word_orig != ordered)\\n\\t\\t\\t{\\n\\t\\t\\t\\tordered = orderAlpha(ordered); \\n\\n\\t\\t\\t\\tif(ordered == root_word)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tmatch_words_it = matching_words.begin();\\n\\t\\t\\t\\t\\tmatch_words_it = matching_words.insert(matching_words.end(), *match_it); //Add to vector of found anagrams\\n\\t\\t\\t\\t}\\t\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn matching_words;\\n\\t}\\n}"}
209	42	a21a8b2660402d5aff9fc057	superseded	ruby	hamming	\N	\N	0	1	2015-05-30 14:08:46	2015-05-30 14:08:46	283	{"point-mutations.rb":"class DNA\\n\\n  def initialize(dna1)\\n   @dna1 = dna1\\n  end\\n\\n  def hamming_distance(dna2)\\n    @dna2 = dna2\\n    distance = 0\\n    shorter_strand.chars.each_with_index do |nucleobase, index|\\n      distance += 1 if longer_strand[index] != nucleobase\\n    end\\n    distance\\n  end\\n\\n private\\n\\n  attr_reader :dna1, :dna2\\n\\n  def shorter_strand\\n    dna1.length \\u003e dna2.length ? dna2 : dna1\\n  end\\n\\n  def longer_strand\\n    dna1.length \\u003e dna2.length ? dna1 : dna2\\n  end\\n\\nend"}
210	42	0f36a4364c6b209cf8f3381b	superseded	ruby	hamming	\N	\N	0	4	2015-07-17 16:04:16	2015-07-17 16:04:16	283	{"point-mutations.rb":"class DNA\\n\\n  def initialize(dna1)\\n   @dna1 = dna1\\n   @calc = HammingDistanceCalculator.new\\n  end\\n\\n  def hamming_distance(dna2)\\n    calc.distance(dna1, dna2)\\n  end\\n\\n private\\n\\n  attr_reader :dna1, :calc\\n\\nend\\n\\nclass HammingDistanceCalculator\\n\\n  def distance(strand1, strand2)\\n    short, long = sort_by_length(strand1, strand2)\\n    short.chars.keep_if.each_with_index{|char, index| long[index] != char }.length\\n  end\\n\\n  private\\n\\n  def sort_by_length(strand1, strand2)\\n    [strand1, strand2].sort_by(\\u0026:length)\\n  end\\n\\nend"}
211	42	c4078da4daec29b6fab96354	superseded	ruby	hamming	\N	\N	0	2	2015-07-24 17:05:24	2015-07-24 17:05:24	283	{"point-mutations.rb":"class DNA\\n\\n  def initialize(dna1)\\n   @dna1 = dna1\\n   @calc = HammingDistanceCalculator.new\\n  end\\n\\n  def hamming_distance(dna2)\\n    calc.distance(dna1, dna2)\\n  end\\n\\n private\\n\\n  attr_reader :dna1, :calc\\n\\nend\\n\\nclass HammingDistanceCalculator\\n\\n  def distance(strand1, strand2)\\n    shorter, longer = sort_by_length(strand1, strand2)\\n    distance = 0\\n    shorter.chars.each_with_index do |nucleobase, index|\\n      distance += 1 if longer[index] != nucleobase\\n    end  \\n    distance\\n  end\\n\\n  private\\n\\n  def sort_by_length(strand1, strand2)\\n    [strand1, strand2].sort_by(\\u0026:length)\\n  end\\n\\nend"}
212	42	7baaddbd6adfd2de694b1962	superseded	ruby	hamming	\N	\N	0	3	2015-08-06 09:38:59	2015-08-06 09:38:59	283	{"point-mutations.rb":"class DNA\\n\\n  def initialize(dna1)\\n   @dna1 = dna1\\n   @calc = HammingDistanceCalculator.new\\n  end\\n\\n  def hamming_distance(dna2)\\n    calc.distance(dna1, dna2)\\n  end\\n\\n private\\n\\n  attr_reader :dna1, :calc\\n\\nend\\n\\nclass HammingDistanceCalculator\\n\\n  def distance(strand1, strand2)\\n    shorter, longer = sort_by_length(strand1, strand2)\\n    distance = 0\\n    shorter.chars.each_with_index do |nucleobase, index|\\n      distance += 1 unless longer[index] == nucleobase\\n    end  \\n    distance\\n  end\\n\\n  private\\n\\n  def sort_by_length(strand1, strand2)\\n    [strand1, strand2].sort_by(\\u0026:length)\\n  end\\n\\nend"}
213	42	b98f174ac24b87cb8da40103	superseded	ruby	hamming	\N	\N	0	5	2015-09-20 05:18:20	2015-09-20 05:18:20	283	{"point-mutations.rb":"class DNA\\n\\n  def initialize(dna1)\\n   @dna1 = dna1\\n   @calc = HammingDistanceCalculator.new\\n  end\\n\\n  def hamming_distance(dna2)\\n    calc.distance(dna1, dna2)\\n  end\\n\\n private\\n\\n  attr_reader :dna1, :calc\\n\\nend\\n\\nclass HammingDistanceCalculator\\n\\n  def distance(strand1, strand2)\\n    short, long = sort_by_length(strand1, strand2)\\n    short.chars.select.each_with_index{|char, index| long[index] != char }.length\\n  end\\n\\n  private\\n\\n  def sort_by_length(strand1, strand2)\\n    [strand1, strand2].sort_by(\\u0026:length)\\n  end\\n\\nend"}
214	42	d91ef9977c9b8e307ebff698	hibernating	ruby	hamming	\N	\N	0	6	2015-10-09 12:03:41	2015-10-09 12:03:41	283	{"point-mutations.rb":"class DNA\\n\\n  def initialize(dna1)\\n   @dna1 = dna1\\n   @calc = HammingDistanceCalculator.new\\n  end\\n\\n  def hamming_distance(dna2)\\n   calc.distance(dna1, dna2)\\n  end\\n\\n private\\n\\n  attr_reader :dna1, :calc\\n\\nend\\n\\nclass HammingDistanceCalculator\\n\\n  def distance(strand1, strand2)\\n    short, long = sort_by_length(strand1, strand2)\\n    short.chars.zip(long.chars).count{ |a,b| a != b }\\n  end\\n\\n  private\\n\\n  def sort_by_length(strand1, strand2)\\n    [strand1, strand2].sort_by(\\u0026:length)\\n  end\\n\\nend"}
215	42	a341df8df5fc7fae70b6e80b	superseded	ruby	anagram	\N	\N	0	1	2015-07-11 02:31:15	2015-07-11 02:31:15	286	{"anagram.rb":"class Anagram\\n  def initialize(word)\\n    @source = word.to_s.downcase\\n  end\\n\\n  def match(string)\\n    get_words_from(string).each_with_object([]) do |word, result|\\n      result \\u003c\\u003c word if is_anagram?(word)\\n    end\\n  end\\n\\nprivate\\n  attr_reader :source\\n\\n  def get_words_from(string)\\n    string.to_s.scan(/\\\\w+/)\\n  end\\n\\n  def is_anagram?(word)\\n    normalized_word = word.downcase\\n    source.chars.sort == normalized_word.chars.sort \\u0026\\u0026 source != normalized_word\\n  end\\nend"}
216	42	8af964c8e864cecee91199be	superseded	ruby	anagram	\N	\N	0	2	2015-07-14 08:03:57	2015-07-14 08:03:57	286	{"anagram.rb":"class Anagram\\n  def initialize(word)\\n    @source = word.to_s\\n  end\\n\\n  def match(array)\\n    array.select do |word|\\n      is_anagram? word\\n    end\\n  end\\n\\nprivate\\n  attr_reader :source\\n\\n  def is_anagram?(word)\\n    normalized_source = source.downcase\\n    normalized_word   = word.downcase\\n    normalized_source.chars.sort == normalized_word.chars.sort \\u0026\\u0026\\n      normalized_source != normalized_word\\n  end\\nend"}
217	42	2878e3285b011c70e147e7e2	hibernating	ruby	anagram	\N	\N	0	4	2015-11-13 11:18:49	2015-11-13 11:18:49	286	{"anagram.rb":"class Anagram\\n  def initialize(word)\\n    @source = word.to_s\\n  end\\n\\n  def match(array)\\n    array.select { |word| is_anagram? word.downcase }\\n  end\\n\\nprivate\\n\\n  def normalized_source\\n    @n_source ||= @source.downcase\\n  end\\n\\n  def is_anagram?(word)\\n    normalized_source.chars.sort == word.chars.sort \\u0026\\u0026\\n      normalized_source != word\\n  end\\nend"}
218	42	0110cce1d219f11145e0d19a	superseded	ruby	anagram	\N	\N	0	3	2015-11-19 02:42:45	2015-11-19 02:42:45	286	{"anagram.rb":"class Anagram\\n  def initialize(word)\\n    @source = word.to_s\\n  end\\n\\n  def match(array)\\n    array.select { |word| is_anagram? word.downcase }\\n  end\\n\\nprivate\\n  attr_reader :source\\n\\n  def normalized_source\\n    @n_source ||= source.downcase\\n  end\\n\\n  def is_anagram?(word)\\n    normalized_source.chars.sort == word.chars.sort \\u0026\\u0026\\n      normalized_source != word\\n  end\\nend"}
219	42	bd5616e21e9d09715eb476a6	pending	javascript	word-count	\N	\N	0	1	2015-06-02 18:03:18	2015-06-02 18:03:18	287	{"word-count.js":"module.exports = function words(input){\\n  var result = Object.create(null);\\n  inputArray = input.trim().split(/\\\\s+/);\\n  inputArray.forEach(function(word){\\n    result[word] ? result[word] += 1 : result[word] = 1;\\n  })\\n  return result;\\n}"}
220	42	19427449cbca993a0f0082c4	pending	python	leap	\N	\N	0	1	2015-07-19 00:27:35	2015-07-19 00:27:35	288	{"year.py":"#!/usr/bin/python\\n\\nimport sys\\n\\ndef is_leap_year(yr):\\n    if yr % 4 == 0:\\n        if yr % 100 == 0:\\n            if yr % 400 == 0:\\n                return True\\n            else:\\n                return False\\n        else:\\n            return True\\n    else:\\n        return False\\n\\n#print is_leap_year(1996)\\n#print is_leap_year(1900)\\n#print is_leap_year(1997)"}
221	42	6d6dd39cebfb9ce384261d53	superseded	haskell	space-age	\N	\N	0	1	2015-10-18 04:05:10	2015-10-18 04:05:10	289	{"SpaceAge.hs":"module SpaceAge (Planet(..), ageOn) where\\n\\ndata Planet = Mercury\\n            | Venus\\n            | Earth\\n            | Mars\\n            | Jupiter\\n            | Saturn\\n            | Uranus\\n            | Neptune\\n\\nageOn :: Planet -\\u003e Int -\\u003e Float\\nageOn planet seconds = (fromIntegral seconds) / (secondsPerYear planet)\\n\\nsecondsPerYear :: Planet -\\u003e Float\\nsecondsPerYear planet =\\n  case planet of\\n       Mercury -\\u003e 0.2408467   * earthPeriod\\n       Venus   -\\u003e 0.61519726  * earthPeriod\\n       Earth   -\\u003e earthPeriod\\n       Mars    -\\u003e 1.8808158   * earthPeriod\\n       Jupiter -\\u003e 11.862615   * earthPeriod\\n       Saturn  -\\u003e 29.447498   * earthPeriod\\n       Uranus  -\\u003e 84.016846   * earthPeriod\\n       Neptune -\\u003e 164.79132   * earthPeriod\\n  where\\n    earthPeriod = 31557600"}
222	42	ba5053323de26ffaec317fd4	done	haskell	space-age	\N	\N	0	2	2015-12-01 22:57:07	2015-12-01 22:57:07	289	{"SpaceAge.hs":"module SpaceAge (Planet(..), ageOn) where\\n\\ndata Planet = Mercury\\n            | Venus\\n            | Earth\\n            | Mars\\n            | Jupiter\\n            | Saturn\\n            | Uranus\\n            | Neptune\\n\\nageOn :: Planet -\\u003e Int -\\u003e Float\\nageOn planet seconds = fromIntegral seconds / secondsPerYear planet\\n\\nsecondsPerYear :: Planet -\\u003e Float\\nsecondsPerYear planet = earthPeriod * case planet of\\n   Mercury -\\u003e 0.2408467\\n   Venus   -\\u003e 0.61519726\\n   Earth   -\\u003e 1\\n   Mars    -\\u003e 1.8808158\\n   Jupiter -\\u003e 11.862615\\n   Saturn  -\\u003e 29.447498\\n   Uranus  -\\u003e 84.016846\\n   Neptune -\\u003e 164.79132\\n  where earthPeriod = 31557600"}
223	27	fa45b822843979ab8de18dc8	done	ruby	grains	\N	\N	0	1	2015-07-20 20:50:51	2015-07-20 20:50:51	294	{"grains.rb":"class Grains\\n\\n  NUM_SQUARES = 64\\n\\n  def square(square)\\n    2 ** (square - 1)\\n  end\\n\\n  def total\\n    sum = 1\\n    last_square = 1\\n    (2..NUM_SQUARES).each do |num|\\n      last_square *= 2\\n      sum += last_square\\n    end\\n    sum\\n  end\\n  \\nend"}
224	27	46c13aded93d39070a06a3bf	hibernating	clojure	bob	\N	\N	0	2	2015-08-26 08:11:20	2015-08-26 08:11:20	298	{"bob.clj":"(ns bob\\n  (:require [clojure.string :refer [upper-case lower-case trim]]))\\n\\n(defn response-for [s]\\n  (cond\\n    (= (trim s) \\"\\")\\n    \\"Fine. Be that way!\\"\\n\\n    (and (= (upper-case s) s) (not= (upper-case s) (lower-case s)))\\n    \\"Woah, chill out!\\"\\n\\n    (= (last s) \\\\?)\\n    \\"Sure.\\"\\n\\n    :else \\"Whatever.\\"\\n    ))"}
225	27	6603ad7409b4490d6c34772b	superseded	clojure	bob	\N	\N	0	1	2015-09-18 14:50:21	2015-09-18 14:50:21	298	{"bob.clj":"(ns bob\\n  (:require [clojure.string :as s]))\\n\\n(defn response-for [string]\\n  (cond (= (s/trim string) \\"\\")\\n    \\"Fine. Be that way!\\"\\n    (and\\n      (= (s/upper-case string) string) (not= (s/upper-case string) (s/lower-case string)))\\n    \\"Woah, chill out!\\"\\n    (= (last string) \\\\?)\\n    \\"Sure.\\"\\n    :else \\"Whatever.\\"\\n    ))"}
226	27	c6cff017c283c59e14b05bb6	\N	csharp	gigasecond	\N	\N	0	1	2015-06-07 06:10:38	2015-06-07 06:10:38	300	{"GigasecondTest.cs":"using System;\\r\\nusing NUnit.Framework;\\r\\n\\r\\n[TestFixture]\\r\\npublic class GigasecondTest\\r\\n{\\r\\n    [Test]\\r\\n    public void First_date()\\r\\n    {\\r\\n        var date = Gigasecond.Date(new DateTime(2011, 4, 25, 0, 0, 0, DateTimeKind.Utc));\\r\\n        Assert.That(date, Is.EqualTo(new DateTime(2043, 1, 1, 1, 46, 40, DateTimeKind.Utc)));\\r\\n    }\\r\\n\\r\\n    [Test]\\r\\n    [Ignore]\\r\\n    public void Another_date()\\r\\n    {\\r\\n        var date = Gigasecond.Date(new DateTime(1977, 6, 13, 0, 0, 0, DateTimeKind.Utc));\\r\\n        Assert.That(date, Is.EqualTo(new DateTime(2009, 2, 19, 1, 46, 40, DateTimeKind.Utc)));\\r\\n    }\\r\\n\\r\\n    [Test]\\r\\n    [Ignore]\\r\\n    public void Yet_another_date()\\r\\n    {\\r\\n        var date = Gigasecond.Date(new DateTime(1959, 7, 19, 0, 0, 0, DateTimeKind.Utc));\\r\\n        Assert.That(date, Is.EqualTo(new DateTime(1991, 3, 27, 1, 46, 40, DateTimeKind.Utc)));\\r\\n    }\\r\\n}"}
227	27	d0af8091073712e60797338a	hibernating	csharp	leap	\N	\N	0	1	2015-07-21 13:27:07	2015-07-21 13:27:07	301	{"Year.cs":"class Year\\r\\n{\\r\\n    public static bool IsLeap(int year)\\r\\n    {\\r\\n        if (year % 4 != 1)\\r\\n            return false;\\r\\n        if (year % 100 != 1)\\r\\n            return false;\\r\\n        if (year % 400 != 1)\\r\\n            return false;\\r\\n        return true;\\r\\n    }\\r\\n}"}
228	27	84084af12f74ebadbdf48f36	pending	ruby	gigasecond	\N	\N	0	1	2015-06-09 01:48:11	2015-06-09 01:48:11	304	{"/ruby/gigasecond/gigasecond.rb":"module Gigasecond\\n  class \\u003c\\u003c self\\n    SECONDS    = 10**9\\n    WHOLE_DAYS = SECONDS / 60 / 60 / 24\\n\\n    def from(moment)\\n      moment.is_a?(Date) ? from_date(moment) : from_time(moment)\\n    end\\n\\n    private\\n    \\n    def from_date(date)\\n      Date.jd(date.jd + WHOLE_DAYS)\\n    end\\n\\n    def from_time(time)\\n      (time + SECONDS).to_date\\n    end\\n  end\\nend"}
229	27	35ef8472e4eb0eb453e8a1dd	\N	erlang	accumulate	\N	\N	0	1	2015-08-07 01:39:03	2015-08-07 01:39:03	306	{"accumulate.erl":"-module(accumulate).\\n-compile(export_all).\\n\\naccumulate(Fn, [H|T]) -\\u003e\\n\\tOutput = Fn(H),\\n\\taccumulate(Fn,T,[Output]).\\n\\naccumulate(Fn, [H|T], Output) -\\u003e\\n\\tNewOutput = Output ++ [Fn(H)],\\n\\taccumulate(Fn,T,NewOutput);\\n\\naccumulate(_, [], Output) -\\u003e\\n\\tOutput."}
230	27	5dbee82ccd95368156a45eac	superseded	python	word-count	\N	\N	0	1	2015-08-31 06:24:08	2015-08-31 06:24:08	307	{"wordcount.py":"def word_count(text):\\n    counts = {}\\n    for word in text.split():\\n        counts[word] = counts.get(word, 0) + 1\\n    return counts"}
231	27	27e2851a6269a691becdb343	pending	python	word-count	\N	\N	0	2	2015-11-16 07:44:21	2015-11-16 07:44:21	307	{"wordcount.py":"from collections import Counter\\ndef word_count(text):\\n    return Counter(text.split())"}
232	27	d381d5cf5a4b88bfb088f8e0	superseded	elixir	triangle	\N	\N	0	1	2015-06-02 21:56:01	2015-06-02 21:56:01	309	{"triangle.exs":"defmodule Triangle do\\n  @type kind :: :equilateral | :isosceles | :scalene\\n\\n  defmacro triangle_inequality_holds?(a, b, c) do\\n    quote do\\n      unquote(a) + unquote(b) \\u003e unquote(c) and\\n      unquote(b) + unquote(c) \\u003e unquote(a) and\\n      unquote(c) + unquote(a) \\u003e unquote(b)\\n    end\\n  end\\n\\n  defmacro all_sides_positive?(a, b, c) do\\n    quote do\\n      unquote(a) \\u003e 0 and unquote(b) \\u003e 0 and unquote(c) \\u003e 0\\n    end\\n  end\\n\\n  defmacro all_sides_equal?(a, b, c) do\\n    quote do\\n      unquote(a) == unquote(b) and unquote(b) == unquote(c)\\n    end\\n  end\\n\\n  defmacro two_sides_equal?(a, b, c) do\\n    quote do\\n      unquote(a) == unquote(b) or\\n      unquote(b) == unquote(c) or\\n      unquote(c) == unquote(a)\\n    end\\n  end\\n\\n  @doc \\"\\"\\"\\n  Return the kind of triangle of a triangle with 'a', 'b' and 'c' as lengths.\\n  \\"\\"\\"\\n  @spec kind(number, number, number) :: { :ok, kind } | { :error, String.t }\\n\\n  def kind(a, b, c) when !all_sides_positive?(a, b, c) do\\n    { :error, \\"all side lengths must be positive\\" }\\n  end\\n\\n  def kind(a, b, c) when !triangle_inequality_holds?(a, b, c) do\\n    { :error, \\"side lengths violate triangle inequality\\" }\\n  end\\n\\n  def kind(a, b, c) when all_sides_equal?(a, b, c) do\\n    { :ok, :equilateral }\\n  end\\n\\n  def kind(a, b, c) when two_sides_equal?(a, b, c) do\\n    { :ok, :isosceles }\\n  end\\n\\n  def kind(_, _, _) do\\n    { :ok, :scalene }\\n  end\\nend"}
233	27	6a54b743e565189094540fe0	done	elixir	triangle	\N	\N	0	2	2015-06-03 20:52:44	2015-06-03 20:52:44	309	{"triangle.exs":"defmodule Triangle do\\n  @type kind :: :equilateral | :isosceles | :scalene\\n\\n  @doc \\"\\"\\"\\n  Return the kind of triangle of a triangle with 'a', 'b' and 'c' as lengths.\\n  \\"\\"\\"\\n  @spec kind(number, number, number) :: { :ok, kind } | { :error, String.t }\\n\\n  def kind(a, b, c) when a \\u003c= 0 or b \\u003c= 0 or c \\u003c= 0 do\\n    { :error, \\"all side lengths must be positive\\" }\\n  end\\n\\n  def kind(a, b, c) when a + b \\u003c= c or b + c \\u003c= a or c + a \\u003c= b do\\n    { :error, \\"side lengths violate triangle inequality\\" }\\n  end\\n\\n  def kind(a, b, c) when a == b and b == c do\\n    { :ok, :equilateral }\\n  end\\n\\n  def kind(a, b, c) when a == b or b == c or c == a do\\n    { :ok, :isosceles }\\n  end\\n\\n  def kind(_, _, _) do\\n    { :ok, :scalene }\\n  end\\nend"}
234	45	01fd6c5d6b9e1eb46631aeaa	superseded	java	bob	\N	\N	0	1	2015-06-07 11:52:34	2015-06-07 11:52:34	311	{"src/main/java/Bob.java":"public class Bob {\\n\\tpublic String hey(String phrase) {\\n\\t\\tString[] data = phrase.split(\\"[\\\\\\\\s+,?]\\");\\n\\t\\tString response = new String();\\n\\t\\tint count = 0;\\n\\t\\tint blank = 0;\\n\\t\\tint length = data.length;\\n\\t\\tchar lastChar = phrase.isEmpty() ? '\\\\0' : phrase.charAt(phrase.length()-1);\\n\\n\\t\\tfor (String word : data) {\\n\\t\\t\\tif (!word.isEmpty()) {\\n\\t\\t\\t\\ttry {\\n       \\t\\t\\t\\tif (Integer.parseInt(word) \\u003e 0)\\n\\t\\t\\t\\t\\t\\tcount++;\\n\\t\\t\\t    } catch(NumberFormatException e){}\\n\\t\\t\\t} else\\n\\t\\t\\t\\tblank++;\\n\\t\\t}\\n\\n\\t\\tif (blank != length) {\\n\\t\\t\\tif (count == (length-blank)) {\\n\\t\\t\\t\\tif (lastChar == '?')\\n\\t\\t\\t\\t\\tresponse = \\"Sure.\\";\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tresponse = \\"Whatever.\\";\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (phrase.toUpperCase().equals(phrase))\\n\\t\\t\\t\\t\\tresponse = \\"Whoa, chill out!\\";\\n\\t\\t\\t\\telse if (lastChar == '?')\\n\\t\\t\\t\\t\\tresponse = \\"Sure.\\";\\n\\t\\t\\t\\telse if (lastChar == '.' || lastChar == '!')\\n\\t\\t\\t\\t\\tresponse = \\"Whatever.\\";\\n\\t\\t\\t}\\n\\n\\t\\t} else\\n\\t\\t\\tresponse = \\"Fine. Be that way!\\";\\n\\n\\t\\treturn response;\\n\\t}\\n}"}
235	45	2ba27bd710b977bac6c133ab	superseded	java	bob	\N	\N	0	2	2015-08-29 19:16:45	2015-08-29 19:16:45	311	{"src/main/java/Bob.java":"public class Bob {\\n\\tpublic String hey(String phrase) {\\n\\t\\tString[] data = phrase.split(\\"[\\\\\\\\s+,?!.]\\");\\n\\t\\tString response = new String();\\n\\t\\tint count = 0;\\n\\t\\tint blank = 0;\\n\\t\\tint length = data.length;\\n\\t\\tchar lastChar = phrase.isEmpty() ? '\\\\0' : phrase.charAt(phrase.length()-1);\\n\\n\\t\\tfor (String word : data) {\\n\\t\\t\\tif (!word.isEmpty()) {\\n\\t\\t\\t\\ttry {\\n       \\t\\t\\t\\tif (Integer.parseInt(word) \\u003e 0)\\n\\t\\t\\t\\t\\t\\tcount++;\\n\\t\\t\\t    } catch(NumberFormatException e){}\\n\\t\\t\\t} else\\n\\t\\t\\t\\tblank++;\\n\\t\\t}\\n\\n\\t\\tif (blank != length) {\\n\\t\\t\\tif (count == (length-blank)) {\\n\\t\\t\\t\\tif (lastChar == '?')\\n\\t\\t\\t\\t\\tresponse = \\"Sure.\\";\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tresponse = \\"Whatever.\\";\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (phrase.toUpperCase().equals(phrase))\\n\\t\\t\\t\\t\\tresponse = \\"Whoa, chill out!\\";\\n\\t\\t\\t\\telse if (lastChar == '?')\\n\\t\\t\\t\\t\\tresponse = \\"Sure.\\";\\n\\t\\t\\t\\telse if (lastChar == '.' || lastChar == '!')\\n\\t\\t\\t\\t\\tresponse = \\"Whatever.\\";\\n\\t\\t\\t}\\n\\n\\t\\t} else\\n\\t\\t\\tresponse = \\"Fine. Be that way!\\";\\n\\n\\t\\treturn response;\\n\\t}\\n}"}
236	45	2f1de0c82d6922a8bebe5976	pending	java	bob	\N	\N	0	3	2015-10-01 23:45:35	2015-10-01 23:45:35	311	{"src/main/java/Bob.java":"public class Bob {\\n\\tpublic String hey(String phrase) {\\n\\t\\tString[] data = phrase.split(\\"[\\\\\\\\s+,?!.]\\");\\n\\t\\tString response = new String();\\n\\t\\tint count = 0;\\n\\t\\tint blank = 0;\\n\\t\\tint length = data.length;\\n\\t\\tchar lastChar = phrase.isEmpty() ? '\\\\0' : phrase.charAt(phrase.length()-1);\\n\\n\\t\\tfor (String word : data) {\\n\\t\\t\\tif (!word.isEmpty()) {\\n\\t\\t\\t\\ttry {\\n       \\t\\t\\t\\tif (Integer.parseInt(word) \\u003e 0)\\n\\t\\t\\t\\t\\t\\tcount++;\\n\\t\\t\\t    } catch(NumberFormatException e){}\\n\\t\\t\\t} else\\n\\t\\t\\t\\tblank++;\\n\\t\\t}\\n\\n\\t\\tif (blank != length) {\\n\\t\\t\\tif (count == (length-blank)) {\\n\\t\\t\\t\\tif (lastChar == '?')\\n\\t\\t\\t\\t\\tresponse = \\"Sure.\\";\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tresponse = \\"Whatever.\\";\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (phrase.toUpperCase().equals(phrase))\\n\\t\\t\\t\\t\\tresponse = \\"Whoa, chill out!\\";\\n\\t\\t\\t\\telse if (lastChar == '?')\\n\\t\\t\\t\\t\\tresponse = \\"Sure.\\";\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tresponse = \\"Whatever.\\";\\n\\t\\t\\t}\\n\\n\\t\\t} else\\n\\t\\t\\tresponse = \\"Fine. Be that way!\\";\\n\\n\\t\\treturn response;\\n\\t}\\n}"}
237	45	96da44d4c3b5e94b1c08c6f1	\N	python	grains	\N	\N	0	1	2015-06-03 21:17:17	2015-06-03 21:17:17	312	{"grains.py":"def on_square(num):\\n    return 2**(num-1)\\n\\ndef total_after(num):\\n    return on_square(num)*2 -1"}
238	45	dcd9c0a8fb5c295fff40a83f	done	python	hamming	\N	\N	0	2	2015-08-19 14:35:38	2015-08-19 14:35:38	313	{"hamming.py":"def hamming(first, second):\\n    differences = abs(len(first) - len(second))\\n    for f, s in zip(first, second):\\n        if f != s:\\n            differences += 1\\n    return differences"}
239	45	7637c288f897abfb2ef63ac7	superseded	python	hamming	\N	\N	0	1	2015-11-07 18:30:50	2015-11-07 18:30:50	313	{"hamming.py":"def hamming(first, second):\\n    differences = 0\\n    lmin = min(len(first), len(second))\\n    lmax = max(len(first), len(second))\\n    for i in range(0, lmin):\\n        if first[i] != second[i]:\\n            differences += 1\\n    differences += lmax - lmin\\n    return differences"}
240	45	b94feba9e1bc26a6ad9d47fe	hibernating	haskell	rna-transcription	\N	\N	0	1	2015-07-29 18:32:43	2015-07-29 18:32:43	314	{"DNA.hs":"module DNA where\\n\\ntoRNA :: String -\\u003e String\\ntoRNA []     = []\\ntoRNA (c:cs) = trans c : toRNA cs\\n    where trans 'G' = 'C'\\n          trans 'C' = 'G'\\n          trans 'T' = 'A'\\n          trans 'A' = 'U'\\n          trans _   = undefined"}
241	45	e13cb3f3ba8a8b5ca0770475	\N	clojure	rna-transcription	\N	\N	0	1	2015-07-28 08:01:25	2015-07-28 08:01:25	316	{"rna_transcription.clj":"(ns rna-transcription)\\n\\n(def *nucleobase* #\\"[ACGT]*\\")\\n\\n(defn valid?\\n  [dna]\\n  (if (re-matches *nucleobase* dna)\\n    true\\n    (throw (AssertionError.))))\\n\\n(defn convert-base\\n  [base]\\n  (case base\\n    \\\\C \\"G\\"\\n    \\\\G \\"C\\"\\n    \\\\A \\"U\\"\\n    \\\\T \\"A\\"))\\n\\n(defn to-rna\\n  [dna]\\n  (valid? dna)\\n  (apply str (map convert-base dna)))"}
242	45	1664dca3814d6b09d8785385	\N	clojure	rna-transcription	\N	\N	0	2	2015-12-01 17:51:51	2015-12-01 17:51:51	316	{"rna_transcription.clj":"(ns rna-transcription)\\n\\n(defn convert-base\\n  [base]\\n  (case base\\n    \\\\C \\"G\\"\\n    \\\\G \\"C\\"\\n    \\\\A \\"U\\"\\n    \\\\T \\"A\\"\\n    (throw (AssertionError.))))\\n\\n(defn to-rna\\n  [dna]\\n  (apply str (map convert-base dna)))"}
243	45	2290c5ffb201e5c73734896f	done	ruby	rna-transcription	\N	\N	0	1	2015-09-15 07:06:43	2015-09-15 07:06:43	318	{"/ruby/rna-transcription/complement.rb":"class Complement\\n  def self.of_dna(sequence)\\n    find_complement(sequence, rna_sequence, dna_sequence)\\n  end\\n\\n  def self.of_rna(sequence)\\n    find_complement(sequence, dna_sequence, rna_sequence)\\n  end\\n\\n  def self.find_complement(sequence, seqA, seqB)\\n    sequence.chars.inject(\\"\\") do |complement, elem|\\n      complement += seqA[seqB.index(elem)]\\n    end\\n  end\\n\\n  private\\n  def self.dna_sequence\\n    %w[G C T A]\\n  end\\n\\n  def self.rna_sequence\\n    %w[C G A U]\\n  end\\nend"}
244	45	120fd1f852b237bd7fa3e4ca	done	swift	hamming	\N	\N	0	1	2015-08-08 05:29:27	2015-08-08 05:29:27	322	{"Hamming.swift":"import Foundation\\n\\nclass Hamming {\\n    \\n    class func compute(input : String, against : String = \\"\\") -\\u003e Int? {\\n        let n1 : Int = countElements(input)\\n        let n2 : Int = countElements(against)\\n        \\n        if (n1 != n2) {return nil}\\n        if (n1 == 0) {return 0}\\n        \\n        let a1 = Array(input)\\n        let a2 = Array(against)\\n        \\n        var score : Int = 0\\n        \\n        for i in 0 ... n1 - 1 {\\n            if (a1[i] != a2[i]) {\\n                score++\\n            }\\n        }\\n        \\n        return score\\n    }\\n}"}
245	45	998eb3835138202b5bb7e85b	pending	fsharp	leap	\N	\N	0	1	2015-05-16 13:46:21	2015-05-16 13:46:21	326	{"leap.fs":"﻿namespace LeapYear\\r\\n\\r\\ntype LeapYear() = \\r\\n    static member isLeap year = \\r\\n        match year with\\r\\n        | z when z \\u003c 1 -\\u003e\\r\\n                raise (System.ArgumentOutOfRangeException(\\"Can't process dates before year 1 AD\\"));\\r\\n        | z when z \\u003c 1582 -\\u003e\\r\\n                // Prior to the Gregorian calendar leap years were ever 4 years\\r\\n                year % 4 = 0\\r\\n        | _ -\\u003e\\r\\n                // Dates since the Gregorian calendar\\r\\n                year % 4 = 0 \\u0026\\u0026 (year % 100 \\u003c\\u003e 0 || year % 400 = 0)\\r"}
246	45	26169a8997bc75a9ee90407b	superseded	ruby	difference-of-squares	\N	\N	0	1	2015-09-02 02:27:29	2015-09-02 02:27:29	327	{"/ruby/difference-of-squares/squares.rb":"class Squares \\u003c Struct.new(:number)\\n  def square_of_sums\\n    sequence.reduce(:+) ** 2\\n  end\\n\\n  def sum_of_squares\\n    sequence.map { |n| n ** 2 }.reduce(:+)\\n  end\\n\\n  def difference\\n    square_of_sums - sum_of_squares\\n  end\\n\\n  private\\n\\n  def sequence\\n    (1..number)\\n  end\\nend"}
247	45	61e177b0c141789ff3d977ec	hibernating	ruby	difference-of-squares	\N	\N	0	2	2015-09-14 15:21:38	2015-09-14 15:21:38	327	{"/ruby/difference-of-squares/squares.rb":"class Squares\\n  def initialize(number)\\n    @number = number\\n  end\\n\\n  def square_of_sums\\n    sequence.reduce(:+) ** 2\\n  end\\n\\n  def sum_of_squares\\n    sequence.map { |n| n ** 2 }.reduce(:+)\\n  end\\n\\n  def difference\\n    square_of_sums - sum_of_squares\\n  end\\n\\n  private\\n  attr_reader :number\\n\\n  def sequence\\n    (1..number)\\n  end\\nend"}
248	45	dc7be36de605f3feefdd2107	done	haskell	bob	\N	\N	0	2	2015-07-03 06:22:53	2015-07-03 06:22:53	328	{"Bob.hs":"module Bob (responseFor) where\\n\\nimport Data.Char (isSpace, isUpper, isLower)\\n\\nresponseFor :: String -\\u003e String\\nresponseFor req\\n    | isSilence  req = \\"Fine. Be that way!\\"\\n    | isYelling  req = \\"Whoa, chill out!\\"\\n    | isQuestion req = \\"Sure.\\"\\n    | otherwise  = \\"Whatever.\\"\\n\\nisSilence :: String -\\u003e Bool\\nisSilence = all isSpace\\n\\nisQuestion :: String -\\u003e Bool\\nisQuestion s = last s == '?'\\n\\nisYelling :: String -\\u003e Bool\\nisYelling s = not (any isLower s) \\u0026\\u0026 any isUpper s"}
249	45	a633ea4e02821939ceb24cea	superseded	haskell	bob	\N	\N	0	1	2015-07-05 10:38:43	2015-07-05 10:38:43	328	{"Bob.hs":"module Bob (responseFor) where\\n\\nimport Data.Char (isSpace, isUpper, isLower)\\n\\nresponseFor :: String -\\u003e String\\nresponseFor req\\n    | isSilence  req = \\"Fine. Be that way!\\"\\n    | isYelling  req = \\"Whoa, chill out!\\"\\n    | isQuestion req = \\"Sure.\\"\\n    | otherwise  = \\"Whatever.\\"\\n\\nisSilence :: String -\\u003e Bool\\nisSilence s = length (filter (not . isSpace) s) == 0\\n\\nisQuestion :: String -\\u003e Bool\\nisQuestion s = last (filter (not . isSpace) s) == '?'\\n\\nisYelling :: String -\\u003e Bool\\nisYelling s = length (filter isLower s) == 0 \\u0026\\u0026 length (filter isUpper s) \\u003e 0"}
\.


--
-- Name: submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submissions_id_seq', 249, true);


--
-- Data for Name: team_managers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_managers (id, user_id, team_id) FROM stdin;
1	2	1
2	3	1
3	4	1
4	2	2
5	2	3
6	2	4
7	3	4
8	4	5
9	3	6
10	3	7
\.


--
-- Name: team_managers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_managers_id_seq', 10, true);


--
-- Data for Name: team_memberships; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_memberships (id, team_id, user_id, created_at, updated_at, confirmed, inviter_id) FROM stdin;
1	1	22	1975-08-09 07:31:04	1975-08-09 07:31:04	t	\N
2	1	15	2009-05-15 08:51:27	2009-05-15 08:51:27	t	\N
3	1	18	1991-06-04 12:51:30	1991-06-04 12:51:30	t	\N
4	1	23	2011-04-17 14:24:56	2011-04-17 14:24:56	t	\N
5	1	11	1986-09-14 01:33:12	1986-09-14 01:33:12	t	\N
6	1	8	2001-12-10 06:36:20	2001-12-10 06:36:20	t	\N
7	1	7	1974-04-21 04:15:13	1974-04-21 04:15:13	t	\N
8	1	30	1975-03-22 02:55:15	1975-03-22 02:55:15	t	\N
9	1	31	2001-05-01 04:21:26	2001-05-01 04:21:26	t	\N
10	1	36	1988-10-21 14:50:19	1988-10-21 14:50:19	t	\N
11	1	16	2014-11-25 07:47:11	2014-11-25 07:47:11	f	\N
12	1	17	1996-01-29 09:22:23	1996-01-29 09:22:23	f	\N
13	1	29	1975-12-17 03:22:39	1975-12-17 03:22:39	f	\N
14	1	32	1970-06-25 01:55:05	1970-06-25 01:55:05	f	\N
15	1	38	1973-02-17 19:57:57	1973-02-17 19:57:57	f	\N
16	1	42	1985-05-09 13:36:13	1985-05-09 13:36:13	f	\N
17	1	43	2011-12-16 19:33:27	2011-12-16 19:33:27	f	\N
18	1	47	1979-01-22 04:09:32	1979-01-22 04:09:32	f	\N
19	2	3	1975-06-30 21:11:45	1975-06-30 21:11:45	t	\N
20	2	36	2002-10-19 03:10:57	2002-10-19 03:10:57	t	\N
21	2	31	1978-12-26 16:35:09	1978-12-26 16:35:09	t	\N
22	2	47	1979-06-16 07:12:06	1979-06-16 07:12:06	t	\N
23	2	19	1997-05-18 01:14:29	1997-05-18 01:14:29	f	\N
24	2	38	1979-02-12 16:42:14	1979-02-12 16:42:14	f	\N
25	3	38	2012-04-23 23:23:22	2012-04-23 23:23:22	f	\N
26	3	3	2014-07-21 20:46:00	2014-07-21 20:46:00	f	\N
27	4	3	1978-12-05 10:31:46	1978-12-05 10:31:46	t	\N
28	4	32	2000-04-23 18:01:05	2000-04-23 18:01:05	t	\N
29	4	22	1992-05-26 13:53:25	1992-05-26 13:53:25	t	\N
30	4	27	2013-09-06 18:11:12	2013-09-06 18:11:12	t	\N
31	4	20	1977-04-29 20:03:43	1977-04-29 20:03:43	t	\N
32	4	25	1980-03-11 15:44:06	1980-03-11 15:44:06	t	\N
33	4	19	2007-06-27 10:48:25	2007-06-27 10:48:25	t	\N
34	4	24	1985-08-25 16:32:24	1985-08-25 16:32:24	t	\N
35	4	26	2007-09-10 12:30:34	2007-09-10 12:30:34	t	\N
36	4	21	2012-08-28 02:42:47	2012-08-28 02:42:47	t	\N
37	4	38	2007-11-23 11:15:29	2007-11-23 11:15:29	f	\N
38	4	12	2012-07-28 21:26:08	2012-07-28 21:26:08	f	\N
39	4	14	2002-10-09 17:23:37	2002-10-09 17:23:37	f	\N
40	5	32	1990-10-07 03:34:13	1990-10-07 03:34:13	t	\N
41	5	40	1981-10-11 17:18:59	1981-10-11 17:18:59	t	\N
42	5	35	1971-08-26 23:45:22	1971-08-26 23:45:22	t	\N
43	5	37	2006-04-28 00:53:07	2006-04-28 00:53:07	t	\N
44	5	33	1992-09-23 20:55:49	1992-09-23 20:55:49	t	\N
45	5	36	1999-12-23 08:40:01	1999-12-23 08:40:01	t	\N
46	5	34	1998-08-14 00:33:20	1998-08-14 00:33:20	t	\N
47	5	39	2000-06-03 19:41:07	2000-06-03 19:41:07	t	\N
48	5	41	1972-06-03 13:33:37	1972-06-03 13:33:37	f	\N
49	5	38	2006-03-27 08:30:50	2006-03-27 08:30:50	f	\N
50	5	3	1981-12-20 22:02:21	1981-12-20 22:02:21	f	\N
51	6	6	2003-01-01 04:37:26	2003-01-01 04:37:26	t	\N
52	6	7	1987-02-22 11:29:19	1987-02-22 11:29:19	t	\N
53	6	8	1983-11-12 02:04:50	1983-11-12 02:04:50	t	\N
54	6	9	1970-10-17 10:39:08	1970-10-17 10:39:08	t	\N
55	6	11	2002-01-09 15:31:29	2002-01-09 15:31:29	t	\N
56	6	12	1981-02-15 09:19:57	1981-02-15 09:19:57	t	\N
57	6	13	1971-02-23 04:36:20	1971-02-23 04:36:20	t	\N
58	6	14	1997-06-03 09:07:20	1997-06-03 09:07:20	t	\N
59	6	15	1974-09-26 23:37:17	1974-09-26 23:37:17	t	\N
60	6	16	2015-07-20 09:41:40	2015-07-20 09:41:40	t	\N
61	6	17	1998-02-20 12:30:34	1998-02-20 12:30:34	t	\N
62	6	18	1999-03-20 02:14:06	1999-03-20 02:14:06	t	\N
63	6	23	2013-07-06 09:23:46	2013-07-06 09:23:46	t	\N
64	6	28	2000-11-05 12:20:56	2000-11-05 12:20:56	t	\N
65	6	29	1981-06-21 14:31:56	1981-06-21 14:31:56	t	\N
66	6	30	2003-10-18 11:11:18	2003-10-18 11:11:18	t	\N
67	6	31	1988-04-06 22:53:30	1988-04-06 22:53:30	t	\N
68	6	32	1981-09-28 01:10:51	1981-09-28 01:10:51	t	\N
69	6	38	2007-07-30 06:35:48	2007-07-30 06:35:48	t	\N
70	6	42	1995-04-02 01:10:42	1995-04-02 01:10:42	t	\N
71	6	43	1985-04-23 14:38:10	1985-04-23 14:38:10	t	\N
72	6	44	1986-05-23 02:00:07	1986-05-23 02:00:07	t	\N
73	6	45	1970-03-08 15:50:12	1970-03-08 15:50:12	t	\N
74	6	46	1995-02-10 23:11:35	1995-02-10 23:11:35	t	\N
75	6	47	2012-10-01 15:39:00	2012-10-01 15:39:00	t	\N
76	6	48	1997-01-06 10:11:44	1997-01-06 10:11:44	t	\N
77	6	49	1986-10-29 01:45:31	1986-10-29 01:45:31	t	\N
78	7	3	1998-08-25 09:38:55	1998-08-25 09:38:55	t	\N
79	7	39	2004-06-27 12:02:13	2004-06-27 12:02:13	t	\N
80	7	32	2006-03-14 04:19:01	2006-03-14 04:19:01	t	\N
81	7	38	2008-08-27 18:39:59	2008-08-27 18:39:59	f	\N
\.


--
-- Name: team_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_memberships_id_seq', 81, true);


--
-- Data for Name: teams; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY teams (id, slug, created_at, updated_at, name) FROM stdin;
1	baconesia	2015-06-07 14:00:04.218732	2015-06-07 14:00:04.218732	baconesia
2	chocolades	2015-12-23 11:35:29.250089	2015-12-23 11:35:29.250089	chocolades
3	ghost	2015-08-10 16:43:02.258424	2015-08-10 16:43:02.258424	ghost
4	motley	2015-08-25 02:18:55.262159	2015-08-25 02:18:55.262159	motley
5	rugrats	2015-07-07 02:52:53.27912	2015-07-07 02:52:53.27912	rugrats
6	slate	2015-06-29 02:07:57.293974	2015-06-29 02:07:57.293974	slate
7	polkadots	2015-06-25 10:24:01.328927	2015-06-25 10:24:01.328927	polkadots
\.


--
-- Name: teams_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('teams_id_seq', 7, true);


--
-- Data for Name: user_exercises; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY user_exercises (id, user_id, language, slug, iteration_count, state, created_at, updated_at, key, archived, last_iteration_at, last_activity_at, last_activity, fetched_at, skipped_at) FROM stdin;
1	9	javascript	word-count	1	pending	2015-09-30 17:18:13	2015-09-30 17:18:13	29798155554c44085d3a3d05	f	2015-11-16 19:51:19	2015-11-16 19:51:19	Submitted an iteration	\N	\N
2	11	erlang	leap	0	\N	2015-12-03 12:51:36	2015-12-03 12:51:36	d10bbc26c130aeff6a43e561	f	2015-12-03 12:51:36	2015-12-03 12:51:36	\N	\N	\N
3	11	cpp	bob	0	\N	2015-11-22 09:26:44	2015-11-22 09:26:44	2fa1634252160ec3807edbec	f	2015-11-22 09:26:44	2015-11-22 09:26:44	\N	\N	\N
4	11	ruby	hello-world	1	done	2015-11-12 21:32:06	2015-11-12 21:32:06	8b3b312d4e3181c5492d0782	t	2015-11-24 17:08:49	2015-11-24 17:08:49	Submitted an iteration	\N	\N
5	11	coffeescript	hello-world	0	\N	2015-10-22 06:38:10	2015-10-22 06:38:10	609199b81ad5c617e493892d	f	2015-10-22 06:38:10	2015-10-22 06:38:10	\N	\N	\N
6	11	python	prime-factors	1	done	2015-12-07 23:56:22	2015-12-07 23:56:22	6453d25be37ee93115126e25	t	2015-12-15 04:48:04	2015-12-15 04:48:04	Submitted an iteration	\N	\N
7	12	erlang	leap	0	\N	2015-09-29 12:46:51	2015-09-29 12:46:51	caedad10434a225c04d2da2b	f	2015-09-29 12:46:51	2015-09-29 12:46:51	\N	\N	\N
8	12	java	anagram	0	\N	2015-11-06 09:27:02	2015-11-06 09:27:02	06ea625a9f58b34d9e6f0915	f	2015-11-06 09:27:02	2015-11-06 09:27:02	\N	\N	\N
9	12	elixir	word-count	1	\N	2015-10-18 16:52:59	2015-10-18 16:52:59	29ef0bab5965f8d1563d75b7	f	2015-11-08 07:11:56	2015-11-08 07:11:56	Submitted an iteration	2015-11-13 21:05:07.713212	\N
10	15	lua	hello-world	1	pending	2015-07-15 11:30:47	2015-07-15 11:30:47	a8ca915a36608f94442a6b02	f	2015-10-07 22:30:26	2015-10-07 22:30:26	Submitted an iteration	\N	\N
11	22	coffeescript	accumulate	0	\N	2015-07-01 23:42:50	2015-07-01 23:42:50	705e0e6a8823f2e510207325	f	2015-07-01 23:42:50	2015-07-01 23:42:50	\N	\N	\N
12	22	clojure	hello-world	0	\N	2015-07-16 02:21:04	2015-07-16 02:21:04	5e54a2a8380ad66ba1ffbeef	f	2015-07-16 02:21:04	2015-07-16 02:21:04	\N	\N	\N
13	28	swift	hello-world	0	\N	2015-11-22 08:23:04	2015-11-22 08:23:04	3f55996d361ba9b3fd42bb92	f	2015-11-22 08:23:04	2015-11-22 08:23:04	\N	\N	\N
14	28	csharp	leap	0	\N	2015-12-11 16:15:01	2015-12-11 16:15:01	d609d95dd9e4cf923c6ec8bf	f	2015-12-11 16:15:01	2015-12-11 16:15:01	\N	\N	\N
15	28	javascript	hello-world	0	\N	2015-12-02 02:45:16	2015-12-02 02:45:16	ca6d52256cab3eaac58e9b27	f	2015-12-02 02:45:16	2015-12-02 02:45:16	\N	\N	\N
16	28	swift	leap	0	\N	2015-12-09 12:19:55	2015-12-09 12:19:55	f8679576bfa1831f6c4fcd97	f	2015-12-09 12:19:55	2015-12-09 12:19:55	\N	\N	\N
17	28	haskell	sublist	1	hibernating	2015-11-26 15:39:32	2015-11-26 15:39:32	7da3a5cd90124bebf8ea4282	f	2015-12-04 08:01:57	2015-12-04 08:01:57	Submitted an iteration	\N	\N
18	29	javascript	hello-world	0	done	2015-11-28 16:34:31	2015-11-28 16:34:31	4b801cef629a9794f5afffb8	t	2015-11-28 16:34:31	2015-11-28 16:34:31	\N	\N	\N
19	29	python	etl	1	\N	2015-07-31 19:31:48	2015-07-31 19:31:48	96dbe152ac70d95ad9ebe32a	f	2015-11-03 05:04:05	2015-11-03 05:04:05	Submitted an iteration	2015-11-29 15:35:46.976795	\N
20	29	python	atbash-cipher	3	done	2015-07-24 04:20:20	2015-07-24 04:20:20	6cb885c5eaff2a1bacb0027a	t	2015-09-21 05:50:45	2015-09-21 05:50:45	Submitted an iteration	\N	\N
21	29	swift	hello-world	0	done	2015-12-06 16:52:31	2015-12-06 16:52:31	cfa45791c63f93c2d7274782	t	2015-12-06 16:52:31	2015-12-06 16:52:31	\N	\N	\N
22	31	python	gigasecond	1	pending	2015-07-27 21:29:02	2015-07-27 21:29:02	02ae69871b562a25bcbf3546	f	2015-11-29 02:01:17	2015-11-29 02:01:17	Submitted an iteration	\N	\N
23	33	ruby	bob	0	pending	2015-12-06 08:42:59	2015-12-06 08:42:59	99c18c8591c78542905de551	f	2015-12-06 08:42:59	2015-12-06 08:42:59	\N	\N	\N
24	33	python	gigasecond	0	\N	2015-10-13 07:51:52	2015-10-13 07:51:52	a028f0d1639e8de075d19037	f	2015-10-13 07:51:52	2015-10-13 07:51:52	\N	\N	\N
25	33	scheme	hello-world	0	\N	2015-06-11 08:57:41	2015-06-11 08:57:41	051dedfe4f67567704dfbecb	f	2015-06-11 08:57:41	2015-06-11 08:57:41	\N	\N	\N
26	33	python	allergies	1	pending	2015-07-02 21:33:30	2015-07-02 21:33:30	3cffb33184451ee8fdb57f78	f	2015-12-14 05:59:20	2015-12-14 05:59:20	Submitted an iteration	\N	\N
27	33	lfe	bob	0	\N	2015-06-28 23:45:29	2015-06-28 23:45:29	95538f7be72650b4fc1b67eb	f	2015-06-28 23:45:29	2015-06-28 23:45:29	\N	\N	\N
28	33	rust	hello-world	0	done	2015-06-29 11:40:47	2015-06-29 11:40:47	dc5e69db59c68576cb22d2c8	t	2015-06-29 11:40:47	2015-06-29 11:40:47	\N	\N	\N
29	33	javascript	leap	1	\N	2015-07-07 04:22:31	2015-07-07 04:22:31	5b78be187d89be9b29c138f8	t	2015-08-12 10:09:53	2015-08-12 10:09:53	@kyleofori commented	2015-10-23 14:36:28.33841	\N
30	33	python	hello-world	0	done	2015-10-24 07:37:58	2015-10-24 07:37:58	0a77158f29c9b962726b45ff	t	2015-10-24 07:37:58	2015-10-24 07:37:58	\N	\N	\N
31	33	ruby	phone-number	1	done	2015-08-04 15:45:20	2015-08-04 15:45:20	69885694f2a6b6dc39e251fd	t	2015-08-11 01:18:16	2015-08-11 01:18:16	Submitted an iteration	\N	\N
32	33	go	leap	0	\N	2015-07-19 06:57:50	2015-07-19 06:57:50	8679985679b1aa5b611830d0	f	2015-07-19 06:57:50	2015-07-19 06:57:50	\N	\N	\N
33	33	elisp	hello-world	0	\N	2015-09-10 13:20:35	2015-09-10 13:20:35	a6c7ff19f096bb34ef451c64	f	2015-09-10 13:20:35	2015-09-10 13:20:35	\N	\N	\N
34	33	lua	hello-world	0	\N	2015-09-07 22:58:02	2015-09-07 22:58:02	1fc105ff328a5ea50fac46f5	f	2015-09-07 22:58:02	2015-09-07 22:58:02	\N	\N	\N
35	38	java	etl	0	\N	2015-11-02 09:55:03	2015-11-02 09:55:03	44a81f0f402940d1c3589261	f	2015-11-02 09:55:03	2015-11-02 09:55:03	\N	\N	\N
36	38	plsql	hamming	0	\N	2015-10-19 15:12:12	2015-10-19 15:12:12	3b5fc6dac5725dc786f733fc	f	2015-10-19 15:12:12	2015-10-19 15:12:12	\N	\N	\N
37	38	clojure	bob	0	\N	2015-08-24 10:30:08	2015-08-24 10:30:08	7807168ebf15e288e7bed031	f	2015-08-24 10:30:08	2015-08-24 10:30:08	\N	\N	\N
106	44	java	etl	0	\N	2015-10-02 03:06:23	2015-10-02 03:06:23	b1dc4cf28c2d4b91fca4a72d	f	2015-10-02 03:06:23	2015-10-02 03:06:23	\N	\N	\N
38	38	javascript	bob	7	done	2015-08-18 04:27:02	2015-08-18 04:27:02	97f410c7985bfc5691e48251	t	2015-12-23 23:29:49	2015-12-23 23:29:49	Submitted an iteration	\N	\N
39	38	erlang	leap	0	\N	2015-09-15 04:18:22	2015-09-15 04:18:22	41b1701536a8e6c7c9056506	f	2015-09-15 04:18:22	2015-09-15 04:18:22	\N	\N	\N
40	38	python	anagram	1	pending	2015-09-02 07:44:12	2015-09-02 07:44:12	73a672cc414f7afd7d0bb6eb	f	2015-10-02 21:03:51	2015-10-02 21:03:51	Submitted an iteration	\N	\N
41	38	php	difference-of-squares	0	\N	2015-10-09 22:55:20	2015-10-09 22:55:20	25293e0ccd40b32202508534	f	2015-10-09 22:55:20	2015-10-09 22:55:20	\N	\N	\N
42	38	python	beer-song	1	pending	2015-09-29 05:35:18	2015-09-29 05:35:18	400f34b96ff4a77f2d63c443	f	2015-10-14 13:47:45	2015-10-14 13:47:45	Submitted an iteration	\N	\N
43	38	coffeescript	hello-world	0	\N	2015-11-03 12:02:43	2015-11-03 12:02:43	a721d08c7f62cd51a6a96563	f	2015-11-03 12:02:43	2015-11-03 12:02:43	\N	\N	\N
44	38	lua	hello-world	0	\N	2015-08-26 10:08:21	2015-08-26 10:08:21	c219990b8d5b938ce154d844	f	2015-08-26 10:08:21	2015-08-26 10:08:21	\N	\N	\N
45	38	cpp	hamming	2	pending	2015-10-15 00:51:33	2015-10-15 00:51:33	573a0dd786614208113feb8a	f	2015-12-10 01:26:16	2015-12-10 01:26:16	Submitted an iteration	\N	\N
46	38	javascript	hamming	1	\N	2015-08-29 04:21:59	2015-08-29 04:21:59	7c75d1030f36a634563728a5	f	2015-11-25 07:20:50	2015-11-25 07:20:50	Submitted an iteration	2015-12-13 17:26:54.470234	\N
47	38	clojure	difference-of-squares	1	done	2015-08-28 03:28:02	2015-08-28 03:28:02	9273a14090f4b4ea1421d158	t	2015-12-23 21:53:34	2015-12-23 21:53:34	Submitted an iteration	\N	\N
48	38	ocaml	bob	0	\N	2015-09-06 05:29:36	2015-09-06 05:29:36	7222b213d77a24b1f026ea6d	f	2015-09-06 05:29:36	2015-09-06 05:29:36	\N	\N	\N
49	38	swift	hamming	0	\N	2015-08-16 17:33:01	2015-08-16 17:33:01	66f9f06434bdb0fa6f221a14	f	2015-08-16 17:33:01	2015-08-16 17:33:01	\N	\N	\N
50	38	ruby	robot-name	1	pending	2015-09-29 19:40:57	2015-09-29 19:40:57	054c95dc2162d13e81ddd6a7	f	2015-12-14 11:47:58	2015-12-14 11:47:58	Submitted an iteration	\N	\N
51	38	ruby	hello-world	0	done	2015-11-05 04:33:55	2015-11-05 04:33:55	c934c4f6b9273eb5afb8f590	t	2015-11-05 04:33:55	2015-11-05 04:33:55	\N	\N	\N
52	38	python	gigasecond	1	done	2015-08-15 21:04:57	2015-08-15 21:04:57	56192335f929a29ed83d4f61	t	2015-10-22 02:15:26	2015-10-22 02:15:26	Submitted an iteration	\N	\N
107	46	plsql	hamming	0	\N	2015-12-05 14:33:56	2015-12-05 14:33:56	e89738ce30be0142075546b1	f	2015-12-05 14:33:56	2015-12-05 14:33:56	\N	\N	\N
108	46	ecmascript	hello-world	0	\N	2015-11-13 17:58:09	2015-11-13 17:58:09	55cff75d1609f0af86a92c36	f	2015-11-13 17:58:09	2015-11-13 17:58:09	\N	\N	\N
109	46	ruby	hello-world	0	done	2015-10-10 22:20:40	2015-10-10 22:20:40	41db2ff03854421ae196be20	t	2015-10-10 22:20:40	2015-10-10 22:20:40	\N	\N	\N
53	38	ruby	gigasecond	2	pending	2015-08-27 18:07:41	2015-08-27 18:07:41	0b190abe5096e2cd3a294f0d	f	2015-10-27 18:13:02	2015-10-27 18:13:02	Submitted an iteration	\N	\N
54	38	haskell	anagram	3	done	2015-09-06 20:20:09	2015-09-06 20:20:09	d57d5d5cc58b3098c9e2fcce	t	2015-11-23 08:46:11	2015-11-23 08:46:11	Submitted an iteration	\N	\N
55	38	ruby	roman-numerals	1	hibernating	2015-10-06 00:17:17	2015-10-06 00:17:17	38f87191f3ce3c97b7282542	t	2015-12-21 23:20:07	2015-12-21 23:20:07	@ijwilliams commented	\N	\N
56	38	ruby	difference-of-squares	2	done	2015-09-20 07:36:22	2015-09-20 07:36:22	6737cfc408f7453f1805378e	t	2015-12-21 11:08:18	2015-12-21 11:08:18	Submitted an iteration	\N	\N
57	38	go	secret-handshake	0	done	2015-09-17 10:09:21	2015-09-17 10:09:21	24721b7c9a90ff353a43ee88	t	2015-09-17 10:09:21	2015-09-17 10:09:21	\N	\N	\N
58	38	go	bank-account	1	pending	2015-08-28 01:28:49	2015-08-28 01:28:49	9a3f51bcd90491ebe076b172	f	2015-11-16 06:46:01	2015-11-16 06:46:01	Submitted an iteration	\N	\N
59	38	python	bob	2	done	2015-08-29 10:50:14	2015-08-29 10:50:14	f39bde37c327e19d0f244403	t	2015-12-07 05:02:35	2015-12-07 05:02:35	Submitted an iteration	\N	\N
60	38	haskell	hello-world	0	done	2015-12-23 17:02:37	2015-12-23 17:02:37	16a0a04f4691fe1f6ff19da6	t	2015-12-23 17:02:37	2015-12-23 17:02:37	\N	\N	\N
61	38	clojure	point-mutations	2	pending	2015-11-13 04:38:22	2015-11-13 04:38:22	01329d3ee6d6677453e41d50	f	2015-11-30 14:35:09	2015-11-30 14:35:09	Submitted an iteration	\N	\N
62	38	go	minesweeper	1	pending	2015-08-18 18:45:40	2015-08-18 18:45:40	73a25c0c59c77c1f9145ec3e	f	2015-10-19 17:48:17	2015-10-19 17:48:17	Submitted an iteration	\N	\N
63	38	perl5	leap	0	\N	2015-09-28 12:34:10	2015-09-28 12:34:10	cbc717333c4b5b91c76bf830	f	2015-09-28 12:34:10	2015-09-28 12:34:10	\N	\N	\N
64	38	scala	hamming	2	pending	2015-09-26 04:28:27	2015-09-26 04:28:27	e313798966c96a7f448336e4	f	2015-11-25 11:56:28	2015-11-25 11:56:28	Submitted an iteration	\N	\N
65	38	python	largest-series-product	1	pending	2015-10-09 00:06:09	2015-10-09 00:06:09	4166da992fe047ccf4d9be0c	f	2015-12-26 04:10:39	2015-12-26 04:10:39	Submitted an iteration	\N	\N
66	38	csharp	leap	0	\N	2015-09-28 23:11:08	2015-09-28 23:11:08	e641b1c1bf514081dfc048b3	f	2015-09-28 23:11:08	2015-09-28 23:11:08	\N	\N	\N
67	38	perl5	raindrops	0	\N	2015-10-06 06:55:38	2015-10-06 06:55:38	a21da25d348e8cc6f9c70ca1	f	2015-10-06 06:55:38	2015-10-06 06:55:38	\N	\N	\N
68	38	swift	hello-world	0	\N	2015-12-08 16:10:26	2015-12-08 16:10:26	a0a852c038d98e1632bdee95	f	2015-12-08 16:10:26	2015-12-08 16:10:26	\N	\N	\N
69	40	scala	hello-world	0	\N	2015-11-23 19:28:21	2015-11-23 19:28:21	12d828ffa08cc97e65370f9f	f	2015-11-23 19:28:21	2015-11-23 19:28:21	\N	\N	\N
70	40	python	phone-number	1	\N	2015-10-08 02:38:05	2015-10-08 02:38:05	f45b0ce7dd2539559e112512	f	2015-10-11 23:27:26	2015-10-11 23:27:26	Submitted an iteration	2015-10-17 09:35:38.630255	\N
71	40	elixir	bob	0	\N	2015-07-08 06:40:18	2015-07-08 06:40:18	c404af3447de3fa2c437335d	f	2015-07-08 06:40:18	2015-07-08 06:40:18	\N	\N	\N
72	40	php	hamming	0	\N	2015-11-03 02:08:05	2015-11-03 02:08:05	95f3bb042a1719cf6b19ba78	f	2015-11-03 02:08:05	2015-11-03 02:08:05	\N	\N	\N
73	40	haskell	allergies	1	hibernating	2015-07-14 00:30:27	2015-07-14 00:30:27	dab04c07c727cbe17aebcb2a	t	2015-07-16 10:01:33	2015-07-16 10:01:33	Submitted an iteration	\N	\N
74	40	haskell	grains	1	\N	2015-09-23 05:58:48	2015-09-23 05:58:48	78f6a71bf59d8c0ac324923c	f	2015-09-28 20:29:59	2015-09-28 20:29:59	Submitted an iteration	2015-11-10 03:27:52.796021	\N
75	40	rust	leap	0	\N	2015-06-09 23:30:26	2015-06-09 23:30:26	19f10c8733f798a3157c7320	f	2015-06-09 23:30:26	2015-06-09 23:30:26	\N	\N	\N
76	40	ruby	difference-of-squares	0	\N	2015-12-25 01:34:46	2015-12-25 01:34:46	db4e60549abbef77a9992e4d	f	2015-12-25 01:34:46	2015-12-25 01:34:46	\N	2015-12-21 05:13:29.349006	\N
77	40	javascript	clock	1	pending	2015-10-05 00:42:28	2015-10-05 00:42:28	d3915e22a7bcc4abbbc33b07	t	2015-11-20 09:12:12	2015-11-20 09:12:12	Submitted an iteration	\N	\N
78	40	python	rna-transcription	1	hibernating	2015-06-17 03:02:35	2015-06-17 03:02:35	455c9d0836cc6c098b3b47ea	f	2015-11-09 09:01:28	2015-11-09 09:01:28	Submitted an iteration	\N	\N
79	40	python	secret-handshake	1	pending	2015-11-03 06:40:59	2015-11-03 06:40:59	bff317e64751194ef246c36b	f	2015-12-27 03:30:53	2015-12-27 03:30:53	Submitted an iteration	\N	\N
80	40	python	leap	1	done	2015-07-20 02:38:47	2015-07-20 02:38:47	d3bc6ce806e0de38b30070f6	t	2015-08-02 10:12:58	2015-08-02 10:12:58	Submitted an iteration	\N	\N
81	40	fsharp	triangle	0	\N	2015-10-09 02:09:25	2015-10-09 02:09:25	359345af0f6a4e61829ef2a9	f	2015-10-09 02:09:25	2015-10-09 02:09:25	\N	\N	\N
82	40	go	leap	0	\N	2015-08-14 06:10:52	2015-08-14 06:10:52	7d125ebe67defa8f1460e930	f	2015-08-14 06:10:52	2015-08-14 06:10:52	\N	\N	\N
83	40	javascript	hello-world	0	done	2015-06-23 14:59:28	2015-06-23 14:59:28	787b39ff987ff6b2147ed65e	t	2015-06-23 14:59:28	2015-06-23 14:59:28	\N	\N	\N
84	40	python	hello-world	0	done	2015-10-02 22:41:15	2015-10-02 22:41:15	1fb2795c3560ab374d21d3bb	t	2015-10-02 22:41:15	2015-10-02 22:41:15	\N	\N	\N
85	40	ruby	binary	1	pending	2015-07-30 06:09:49	2015-07-30 06:09:49	58f8a611ab5e60bf5e5cf153	f	2015-08-25 05:13:33	2015-08-25 05:13:33	Submitted an iteration	\N	\N
86	40	lfe	leap	0	\N	2015-10-10 18:35:32	2015-10-10 18:35:32	4ff99a4e5f3400bcbf2f1a85	f	2015-10-10 18:35:32	2015-10-10 18:35:32	\N	\N	\N
87	40	plsql	hamming	0	\N	2015-07-15 21:56:36	2015-07-15 21:56:36	bd82c3074dc88c415e3b7f63	f	2015-07-15 21:56:36	2015-07-15 21:56:36	\N	\N	\N
88	40	clojure	word-count	0	\N	2015-12-05 14:22:34	2015-12-05 14:22:34	2c9dd4bb6220d888e0410cb1	f	2015-12-05 14:22:34	2015-12-05 14:22:34	\N	\N	\N
89	40	ruby	atbash-cipher	1	done	2015-07-10 22:31:14	2015-07-10 22:31:14	2ffed2b4677e7f288d0e4a71	t	2015-08-03 12:08:35	2015-08-03 12:08:35	Submitted an iteration	\N	\N
90	40	javascript	bob	1	pending	2015-07-10 14:53:38	2015-07-10 14:53:38	e0bf87b680beba51948c68b7	f	2015-12-09 12:54:54	2015-12-09 12:54:54	Submitted an iteration	\N	\N
91	40	scala	anagram	1	pending	2015-06-05 14:35:57	2015-06-05 14:35:57	6da89b12dc11bd30633774f6	f	2015-11-17 03:43:56	2015-11-17 03:43:56	Submitted an iteration	\N	\N
92	40	lua	hello-world	0	\N	2015-11-16 09:08:07	2015-11-16 09:08:07	9ab65e133e819a541a4dd200	f	2015-11-16 09:08:07	2015-11-16 09:08:07	\N	\N	\N
93	40	fsharp	sum-of-multiples	0	\N	2015-07-16 04:26:01	2015-07-16 04:26:01	4597f339fe79cc82ad159abc	f	2015-07-16 04:26:01	2015-07-16 04:26:01	\N	\N	\N
94	40	javascript	space-age	1	pending	2015-06-10 01:35:09	2015-06-10 01:35:09	5199bfa33b12344f41f9ae3b	f	2015-11-26 00:36:05	2015-11-26 00:36:05	Submitted an iteration	\N	\N
95	40	java	etl	0	\N	2015-06-06 19:53:35	2015-06-06 19:53:35	2bd80eefc9a7f909540de805	f	2015-06-06 19:53:35	2015-06-06 19:53:35	\N	\N	\N
96	40	csharp	sieve	1	hibernating	2015-09-03 01:38:26	2015-09-03 01:38:26	e0b4517880cffc58a2bc3ce9	f	2015-10-23 05:43:25	2015-10-23 05:43:25	Submitted an iteration	\N	\N
97	40	lisp	bob	0	\N	2015-06-16 07:01:35	2015-06-16 07:01:35	bbabe09d78b90f7620fe5ee6	f	2015-06-16 07:01:35	2015-06-16 07:01:35	\N	\N	\N
98	40	objective-c	hello-world	0	\N	2015-09-13 04:55:33	2015-09-13 04:55:33	aa55eec67c40339c09610afb	f	2015-09-13 04:55:33	2015-09-13 04:55:33	\N	\N	\N
99	40	haskell	leap	0	\N	2015-08-07 17:12:03	2015-08-07 17:12:03	920b7e0697b2ed5e7170e013	f	2015-08-07 17:12:03	2015-08-07 17:12:03	\N	\N	\N
100	44	ruby	rna-transcription	4	hibernating	2015-09-19 12:34:31	2015-09-19 12:34:31	c04beb484b499cf3d880cc8a	t	2015-12-10 04:55:49	2015-12-10 04:55:49	Submitted an iteration	\N	\N
101	44	haskell	gigasecond	1	\N	2015-09-28 14:56:39	2015-09-28 14:56:39	1d40514d6238c90841d52dd5	t	2015-11-09 04:37:54	2015-11-09 04:37:54	Submitted an iteration	2015-10-17 22:19:38.126861	\N
102	44	ruby	gigasecond	3	done	2015-11-03 18:33:53	2015-11-03 18:33:53	058e3023d69573c22c8f3718	t	2015-12-03 17:42:23	2015-12-03 17:42:23	Submitted an iteration	\N	\N
103	44	objective-c	bob	0	\N	2015-11-08 10:52:27	2015-11-08 10:52:27	357766fec5026da8bd5009ef	f	2015-11-08 10:52:27	2015-11-08 10:52:27	\N	\N	\N
104	44	csharp	gigasecond	0	\N	2015-12-25 04:19:52	2015-12-25 04:19:52	19385b040db894afe0aef65c	f	2015-12-25 04:19:52	2015-12-25 04:19:52	\N	2015-10-23 21:57:08.153243	\N
105	44	elisp	gigasecond	0	\N	2015-09-30 15:21:01	2015-09-30 15:21:01	3a3e3ac6350aac9eb45825b1	f	2015-09-30 15:21:01	2015-09-30 15:21:01	\N	\N	\N
110	46	python	hello-world	0	\N	2015-12-19 02:14:07	2015-12-19 02:14:07	96faafe9e5e50c30f9e15dee	f	2015-12-19 02:14:07	2015-12-19 02:14:07	\N	\N	\N
111	46	coffeescript	bob	6	done	2015-10-20 02:54:24	2015-10-20 02:54:24	1d42e4ace5a54913972bb439	t	2015-12-23 04:28:11	2015-12-23 04:28:11	Submitted an iteration	\N	\N
112	48	elisp	bob	0	\N	2015-12-19 16:37:16	2015-12-19 16:37:16	b6cdbca7f824d1cd5dddaf6f	f	2015-12-19 16:37:16	2015-12-19 16:37:16	\N	\N	\N
113	48	javascript	pythagorean-triplet	1	done	2015-11-29 20:51:37	2015-11-29 20:51:37	9f91a5ee9e932558b53de48f	t	2015-12-01 00:54:08	2015-12-01 00:54:08	Submitted an iteration	\N	\N
114	49	javascript	food-chain	1	hibernating	2015-11-10 20:59:34	2015-11-10 20:59:34	b3187196deaaa334815f5bd5	f	2015-12-23 00:42:16	2015-12-23 00:42:16	Submitted an iteration	\N	\N
115	26	clojure	bob	0	\N	2015-10-15 13:38:10	2015-10-15 13:38:10	3d6d99518e67619aa8770c57	f	2015-10-15 13:38:10	2015-10-15 13:38:10	\N	\N	\N
116	26	fsharp	sum-of-multiples	0	\N	2015-11-06 22:22:43	2015-11-06 22:22:43	02ab8cf027db41739b5b778f	f	2015-11-06 22:22:43	2015-11-06 22:22:43	\N	\N	\N
117	26	javascript	bob	2	\N	2015-09-17 01:48:28	2015-09-17 01:48:28	5a1df281f022387e5e9c22b0	f	2015-10-13 23:14:05	2015-10-13 23:14:05	@abhisekp commented	2015-10-26 18:21:33.158197	\N
118	7	clojure	anagram	1	pending	2015-11-22 07:24:43	2015-11-22 07:24:43	b59021383d9062ae03fceaeb	f	2015-11-29 02:51:20	2015-11-29 02:51:20	Submitted an iteration	\N	\N
119	7	php	hamming	0	\N	2015-10-29 08:23:58	2015-10-29 08:23:58	aef223e837ddf03a81aa51bf	f	2015-10-29 08:23:58	2015-10-29 08:23:58	\N	\N	\N
120	7	javascript	sum-of-multiples	1	pending	2015-11-12 03:43:25	2015-11-12 03:43:25	03b8774d0ff2e5ce1514a433	f	2015-11-15 18:54:29	2015-11-15 18:54:29	Submitted an iteration	\N	\N
121	7	erlang	leap	0	\N	2015-09-25 01:35:30	2015-09-25 01:35:30	b9a57b241ee7bf46b13e6dac	f	2015-09-25 01:35:30	2015-09-25 01:35:30	\N	\N	\N
122	7	ruby	hello-world	0	done	2015-10-17 09:36:27	2015-10-17 09:36:27	e28cccf6d5a53b1e613daf60	t	2015-10-17 09:36:27	2015-10-17 09:36:27	\N	\N	\N
123	7	python	rna-transcription	1	pending	2015-10-01 20:26:03	2015-10-01 20:26:03	81ae5b8357d845e4db5bead4	f	2015-11-09 12:22:37	2015-11-09 12:22:37	Submitted an iteration	\N	\N
124	7	erlang	rna-transcription	0	\N	2015-11-06 00:08:55	2015-11-06 00:08:55	e74a0966112502da5f3e7429	f	2015-11-06 00:08:55	2015-11-06 00:08:55	\N	\N	\N
125	23	javascript	hamming	0	\N	2015-09-17 22:19:09	2015-09-17 22:19:09	26c17e1bddb86789a1d3b003	f	2015-09-17 22:19:09	2015-09-17 22:19:09	\N	\N	\N
126	23	cpp	bob	0	\N	2015-11-23 17:34:27	2015-11-23 17:34:27	14e77425181a6b89ddfbf886	f	2015-11-23 17:34:27	2015-11-23 17:34:27	\N	\N	\N
127	23	ruby	hello-world	0	done	2015-08-31 04:56:35	2015-08-31 04:56:35	628a6f876456d6039923b098	t	2015-08-31 04:56:35	2015-08-31 04:56:35	\N	\N	\N
128	23	go	house	1	done	2015-10-10 05:58:32	2015-10-10 05:58:32	126910b5f16ed4b90fe6dd64	t	2015-11-17 01:31:16	2015-11-17 01:31:16	Submitted an iteration	\N	\N
129	23	haskell	space-age	1	done	2015-08-19 21:33:02	2015-08-19 21:33:02	4d2846a1afde7302022f6e60	t	2015-10-18 23:20:12	2015-10-18 23:20:12	Submitted an iteration	\N	\N
130	23	plsql	hamming	0	\N	2015-09-04 15:51:05	2015-09-04 15:51:05	58f192b95a9a26c13d5ff564	f	2015-09-04 15:51:05	2015-09-04 15:51:05	\N	\N	\N
131	17	coffeescript	hello-world	0	\N	2015-10-23 21:58:34	2015-10-23 21:58:34	40c91ebeb68c336a64ac6bb4	f	2015-10-23 21:58:34	2015-10-23 21:58:34	\N	\N	\N
132	17	plsql	difference-of-squares	0	\N	2015-08-20 09:22:22	2015-08-20 09:22:22	9b78b21e0b93d49bc2524ecf	f	2015-08-20 09:22:22	2015-08-20 09:22:22	\N	\N	\N
133	17	coffeescript	bob	1	hibernating	2015-06-26 12:53:32	2015-06-26 12:53:32	d2010e3b6daa4caa9f7b5551	f	2015-09-20 15:39:47	2015-09-20 15:39:47	Submitted an iteration	\N	\N
134	20	php	rna-transcription	1	hibernating	2015-06-19 07:31:53	2015-06-19 07:31:53	39be07c6b7a863ba32352932	f	2016-01-02 03:56:21	2016-01-02 03:56:21	Submitted an iteration	\N	\N
135	20	objective-c	hello-world	0	\N	2015-12-31 20:25:29	2015-12-31 20:25:29	b37213eaa98233590d0d3e7a	f	2015-12-31 20:25:29	2015-12-31 20:25:29	\N	\N	\N
136	20	python	hello-world	0	done	2015-10-09 16:38:04	2015-10-09 16:38:04	819586fc93ef4917b8c0d647	t	2015-10-09 16:38:04	2015-10-09 16:38:04	\N	\N	\N
137	20	ruby	strain	2	pending	2015-05-11 14:39:20	2015-05-11 14:39:20	9de1918d7210b5fe002bafa0	t	2015-10-16 10:41:33	2015-10-16 10:41:33	Submitted an iteration	\N	\N
138	20	ruby	rna-transcription	2	\N	2015-08-14 18:28:16	2015-08-14 18:28:16	9a865f0b13eed91921d3723d	t	2015-11-06 09:01:54	2015-11-06 09:01:54	Submitted an iteration	2015-09-27 05:49:33.45748	\N
139	21	java	etl	0	\N	2015-12-15 18:18:08	2015-12-15 18:18:08	dbe0c715187d49bbbb221b75	f	2015-12-15 18:18:08	2015-12-15 18:18:08	\N	\N	\N
140	21	javascript	rna-transcription	4	\N	2015-11-20 10:51:18	2015-11-20 10:51:18	1ce8eeced68981a8d90ea675	f	2015-12-23 07:24:50	2015-12-23 07:24:50	Submitted an iteration	2015-10-04 12:28:54.898473	\N
141	21	haskell	simple-linked-list	3	done	2015-12-04 03:24:12	2015-12-04 03:24:12	cfc1c5ada95ad183952dbc7f	t	2015-12-29 05:49:54	2015-12-29 05:49:54	Submitted an iteration	\N	\N
142	21	ruby	word-count	1	\N	2015-12-14 06:07:32	2015-12-14 06:07:32	497bfc5f23ee5932f7500f07	f	2015-12-14 09:10:15	2015-12-14 09:10:15	Submitted an iteration	2015-12-18 17:21:27.782234	\N
143	21	ruby	grade-school	1	\N	2015-12-15 17:43:09	2015-12-15 17:43:09	0ef051bec3c8a3547eba564a	f	2015-12-20 05:24:34	2015-12-20 05:24:34	@Genzhu commented	2015-11-24 18:29:00.801275	\N
144	21	ruby	rna-transcription	0	\N	2015-12-01 15:46:14	2015-12-01 15:46:14	aae26ef592d998bf86d38230	f	2015-12-01 15:46:14	2015-12-01 15:46:14	\N	\N	\N
145	21	clojure	bob	0	\N	2015-11-21 12:35:35	2015-11-21 12:35:35	949776c26402ee44d2596d1d	f	2015-11-21 12:35:35	2015-11-21 12:35:35	\N	\N	\N
146	21	cpp	roman-numerals	1	pending	2015-12-15 12:35:30	2015-12-15 12:35:30	9da540356a05129390e8c3a2	t	2015-12-17 19:06:40	2015-12-17 19:06:40	Submitted an iteration	\N	\N
147	21	elixir	sublist	0	\N	2015-12-29 17:34:37	2015-12-29 17:34:37	cdc600842844933b1d4882db	f	2015-12-29 17:34:37	2015-12-29 17:34:37	\N	\N	\N
148	21	ruby	hamming	1	done	2015-12-08 20:17:27	2015-12-08 20:17:27	7b4ff5f1260636907acfcfc1	t	2015-12-29 08:00:33	2015-12-29 08:00:33	Submitted an iteration	\N	\N
149	21	lisp	point-mutations	0	\N	2015-12-22 03:42:58	2015-12-22 03:42:58	928a7111fc7abcd975ac025e	f	2015-12-22 03:42:58	2015-12-22 03:42:58	\N	\N	\N
150	21	csharp	difference-of-squares	4	pending	2015-11-22 02:55:01	2015-11-22 02:55:01	003db0ab72cadbedce37a80f	f	2015-12-18 03:25:47	2015-12-18 03:25:47	Submitted an iteration	\N	\N
151	21	javascript	phone-number	0	\N	2015-11-25 21:03:48	2015-11-25 21:03:48	05738ba814c76ff0487014f9	f	2015-11-25 21:03:48	2015-11-25 21:03:48	\N	\N	\N
152	21	python	word-count	1	\N	2015-11-24 05:24:27	2015-11-24 05:24:27	074e50cab360fb599fb2b47b	f	2015-11-25 00:48:37	2015-11-25 00:48:37	@willnewby commented	2015-10-21 18:48:05.46498	\N
153	21	elixir	hello-world	0	done	2015-11-19 11:21:38	2015-11-19 11:21:38	a18100ef118ce68487444a8d	t	2015-11-19 11:21:38	2015-11-19 11:21:38	\N	\N	\N
154	21	ruby	luhn	1	pending	2015-11-20 11:28:04	2015-11-20 11:28:04	acc84ac144d13d47fdd7a28d	f	2015-12-08 14:53:34	2015-12-08 14:53:34	Submitted an iteration	\N	\N
155	21	ruby	prime-factors	3	pending	2015-11-19 11:50:58	2015-11-19 11:50:58	a2601e87ff29ab96c5a4c440	f	2016-01-02 21:40:04	2016-01-02 21:40:04	Submitted an iteration	\N	\N
156	21	cpp	bob	3	\N	2015-11-28 23:31:32	2015-11-28 23:31:32	53369f2dc203e6dbd104b4a5	t	2015-12-27 05:06:52	2015-12-27 05:06:52	Submitted an iteration	\N	\N
157	21	ruby	bob	1	hibernating	2015-11-21 17:50:39	2015-11-21 17:50:39	e04a356f0e2add7baab74d0d	f	2015-11-30 08:43:06	2015-11-30 08:43:06	Submitted an iteration	\N	\N
158	21	elisp	hello-world	0	\N	2015-12-28 18:12:41	2015-12-28 18:12:41	d7dcf1242cc84c8039a1d955	f	2015-12-28 18:12:41	2015-12-28 18:12:41	\N	\N	\N
159	21	elixir	scrabble-score	1	pending	2015-11-27 15:46:54	2015-11-27 15:46:54	3cb546f6a7303f6d5b861241	f	2015-12-04 09:19:37	2015-12-04 09:19:37	Submitted an iteration	\N	\N
160	21	ruby	series	4	pending	2015-11-23 06:24:01	2015-11-23 06:24:01	b5bcb8c5c2f481ba151a97db	f	2015-12-27 18:43:25	2015-12-27 18:43:25	Submitted an iteration	\N	\N
161	21	go	leap	0	\N	2015-12-11 05:23:21	2015-12-11 05:23:21	774b32ee262a81f780ca7f2b	f	2015-12-11 05:23:21	2015-12-11 05:23:21	\N	\N	\N
162	21	ruby	difference-of-squares	2	done	2015-11-24 14:20:29	2015-11-24 14:20:29	738719931ff0c444d2767503	t	2015-12-21 05:13:23	2015-12-21 05:13:23	Submitted an iteration	\N	\N
163	21	haskell	leap	0	\N	2016-01-02 02:02:32	2016-01-02 02:02:32	ebaba5a1aab87d5ea3632789	f	2016-01-02 02:02:32	2016-01-02 02:02:32	\N	\N	\N
164	21	haskell	triangle	1	pending	2015-11-27 10:39:55	2015-11-27 10:39:55	745c5db2c672d1009bc71061	f	2016-01-02 10:24:18	2016-01-02 10:24:18	Submitted an iteration	\N	\N
165	21	php	hamming	0	\N	2015-11-24 01:39:36	2015-11-24 01:39:36	b680d9985440a27dd0bc30ce	f	2015-11-24 01:39:36	2015-11-24 01:39:36	\N	\N	\N
166	21	javascript	palindrome-products	1	pending	2015-11-21 00:15:43	2015-11-21 00:15:43	d4379975ff95fe5534bc5df8	f	2015-12-29 14:35:35	2015-12-29 14:35:35	Submitted an iteration	\N	\N
167	21	haskell	hello-world	0	done	2015-12-04 08:37:03	2015-12-04 08:37:03	bb03fd71371df0d0a4fdba97	t	2015-12-04 08:37:03	2015-12-04 08:37:03	\N	\N	\N
168	21	clojure	phone-number	0	\N	2015-12-25 10:04:23	2015-12-25 10:04:23	c7994b33f743339f506a0ab7	f	2015-12-25 10:04:23	2015-12-25 10:04:23	\N	\N	\N
169	21	csharp	leap	0	\N	2015-11-25 14:12:01	2015-11-25 14:12:01	78a7a774f02232fed2edf171	f	2015-11-25 14:12:01	2015-11-25 14:12:01	\N	\N	\N
170	21	ruby	raindrops	1	done	2015-11-27 16:08:56	2015-11-27 16:08:56	3cae803e8f19aa1513ea65fa	t	2015-12-29 03:10:57	2015-12-29 03:10:57	Submitted an iteration	\N	\N
171	21	python	hello-world	0	done	2015-12-08 00:14:16	2015-12-08 00:14:16	c7bc72ff34333e898b6b950c	t	2015-12-08 00:14:16	2015-12-08 00:14:16	\N	\N	\N
172	21	scala	bob	1	\N	2015-12-20 00:39:19	2015-12-20 00:39:19	61eeb4c2839e5319500d4e9d	f	2015-12-21 17:02:16	2015-12-21 17:02:16	@szafirov commented	2015-11-10 03:16:09.370688	\N
173	21	go	hello-world	0	done	2015-11-21 20:01:02	2015-11-21 20:01:02	5e4e7a6fe64f36cbab1ddd78	t	2015-11-21 20:01:02	2015-11-21 20:01:02	\N	\N	\N
174	21	javascript	leap	0	\N	2015-11-25 23:36:46	2015-11-25 23:36:46	9fac94902887754c1f0a6ffa	f	2015-11-25 23:36:46	2015-11-25 23:36:46	\N	2015-11-24 20:05:08.480044	\N
175	21	python	robot-name	1	pending	2015-12-12 08:15:38	2015-12-12 08:15:38	4f7f69761ab96cc8f398a78e	f	2015-12-16 19:35:59	2015-12-16 19:35:59	Submitted an iteration	\N	\N
176	21	ocaml	word-count	0	\N	2015-12-06 22:57:21	2015-12-06 22:57:21	bbf83089becd10add7929988	f	2015-12-06 22:57:21	2015-12-06 22:57:21	\N	\N	\N
177	21	csharp	hamming	0	\N	2015-12-17 12:32:01	2015-12-17 12:32:01	bd76bf86ce37bc66efcad838	f	2015-12-17 12:32:01	2015-12-17 12:32:01	\N	\N	\N
178	21	perl5	bob	0	\N	2015-12-14 16:50:31	2015-12-14 16:50:31	9dfa8b3853266124610ef74a	f	2015-12-14 16:50:31	2015-12-14 16:50:31	\N	\N	\N
179	21	erlang	leap	0	\N	2015-11-20 18:00:39	2015-11-20 18:00:39	9e3feb136f61509253cd3f42	f	2015-11-20 18:00:39	2015-11-20 18:00:39	\N	\N	\N
180	21	plsql	hamming	0	\N	2016-01-01 05:10:00	2016-01-01 05:10:00	b38d12521524f7d4bbf96f2c	f	2016-01-01 05:10:00	2016-01-01 05:10:00	\N	\N	\N
181	36	ruby	phone-number	1	pending	2015-10-08 18:50:15	2015-10-08 18:50:15	b3036429eb2fa5bcbf604c43	f	2015-10-13 02:26:39	2015-10-13 02:26:39	Submitted an iteration	\N	\N
182	30	ruby	nucleotide-count	2	done	2015-08-20 08:00:47	2015-08-20 08:00:47	07b4965ca8bec35c44dfa69b	t	2015-10-21 19:58:15	2015-10-21 19:58:15	Submitted an iteration	\N	\N
183	30	ruby	roman-numerals	1	done	2015-04-22 06:48:37	2015-04-22 06:48:37	85f0e77949686328b61d323b	t	2015-05-05 23:20:21	2015-05-05 23:20:21	Submitted an iteration	\N	\N
184	30	ecmascript	hello-world	0	\N	2015-08-28 11:17:06	2015-08-28 11:17:06	4c11e6138f99ce8536524b4f	f	2015-08-28 11:17:06	2015-08-28 11:17:06	\N	\N	\N
185	30	python	bob	1	\N	2015-10-18 00:51:09	2015-10-18 00:51:09	1ea359497ffaccde34748246	t	2015-12-31 11:36:03	2015-12-31 11:36:03	@sopoforic commented	\N	\N
186	30	perl5	bob	0	\N	2015-09-30 06:43:43	2015-09-30 06:43:43	7789ca89109e8db0ca4e641f	f	2015-09-30 06:43:43	2015-09-30 06:43:43	\N	\N	\N
187	30	ruby	anagram	1	pending	2015-07-02 00:11:50	2015-07-02 00:11:50	111f390c40727582278b2a11	f	2015-07-28 08:03:40	2015-07-28 08:03:40	Submitted an iteration	\N	\N
188	30	ruby	hello-world	0	\N	2015-09-02 21:08:53	2015-09-02 21:08:53	12f6c1a1301312c31d39f4d5	f	2015-09-02 21:08:53	2015-09-02 21:08:53	\N	\N	\N
189	30	clojure	bob	0	\N	2015-04-18 23:29:00	2015-04-18 23:29:00	2bc9c2d1d932993a29395399	f	2015-04-18 23:29:00	2015-04-18 23:29:00	\N	\N	\N
190	30	javascript	leap	0	\N	2015-07-16 14:26:30	2015-07-16 14:26:30	23fdd0d712d9aadadf6bf4ab	f	2015-07-16 14:26:30	2015-07-16 14:26:30	\N	2015-11-24 16:26:11.790147	\N
191	30	java	triangle	1	\N	2015-04-24 13:39:07	2015-04-24 13:39:07	16627a3c36cf31b504530311	f	2015-08-01 17:47:25	2015-08-01 17:47:25	Submitted an iteration	2015-12-12 15:19:02.572242	\N
192	30	ocaml	bob	0	\N	2015-06-07 19:53:55	2015-06-07 19:53:55	bb1e3df37335dda95b3229a8	f	2015-06-07 19:53:55	2015-06-07 19:53:55	\N	\N	\N
193	30	rust	point-mutations	1	\N	2015-06-21 14:05:37	2015-06-21 14:05:37	c26bd917d0eb37c764b66b36	f	2015-10-30 11:37:09	2015-10-30 11:37:09	Submitted an iteration	2015-11-24 14:30:12.319243	\N
194	30	scheme	hello-world	0	\N	2015-05-18 21:59:09	2015-05-18 21:59:09	cc760f4b2ff1422936d4411d	f	2015-05-18 21:59:09	2015-05-18 21:59:09	\N	\N	\N
195	30	elisp	hello-world	0	\N	2015-08-09 06:52:26	2015-08-09 06:52:26	a5c615d72ab96327a2a49d75	f	2015-08-09 06:52:26	2015-08-09 06:52:26	\N	\N	\N
196	30	javascript	word-count	1	pending	2015-08-09 04:09:49	2015-08-09 04:09:49	60cd9a40771596536d764c6e	f	2015-12-01 08:06:17	2015-12-01 08:06:17	Submitted an iteration	\N	\N
197	30	haskell	leap	0	\N	2015-08-13 20:17:56	2015-08-13 20:17:56	d083e7716e67802c9b8d2a0d	f	2015-08-13 20:17:56	2015-08-13 20:17:56	\N	\N	\N
198	30	ruby	rna-transcription	2	done	2015-06-05 03:38:40	2015-06-05 03:38:40	3ba741c09de1891704d54300	t	2015-10-24 04:24:53	2015-10-24 04:24:53	Submitted an iteration	\N	\N
199	30	python	difference-of-squares	2	pending	2015-08-03 13:33:08	2015-08-03 13:33:08	0b7036d0677d96a7c54d72fa	f	2015-11-11 19:16:44	2015-11-11 19:16:44	Submitted an iteration	\N	\N
200	30	javascript	hello-world	1	pending	2015-08-19 09:21:22	2015-08-19 09:21:22	c69b25b05018823bee343e3f	t	2015-10-18 13:54:18	2015-10-18 13:54:18	Submitted an iteration	\N	\N
201	30	lisp	point-mutations	0	\N	2015-07-13 01:53:17	2015-07-13 01:53:17	56c81e7539ee623324f8893a	f	2015-07-13 01:53:17	2015-07-13 01:53:17	\N	\N	\N
202	30	ruby	space-age	3	done	2015-05-26 21:22:09	2015-05-26 21:22:09	e4a01915263633fc9a9fb90a	t	2015-11-16 23:22:43	2015-11-16 23:22:43	Submitted an iteration	\N	\N
203	30	java	etl	0	\N	2015-07-23 07:38:58	2015-07-23 07:38:58	9bbee720733bd953fde59250	f	2015-07-23 07:38:58	2015-07-23 07:38:58	\N	\N	\N
204	30	objective-c	bob	0	\N	2015-07-19 14:05:04	2015-07-19 14:05:04	bb5a5ef7b1a2c1aa5c70cad8	f	2015-07-19 14:05:04	2015-07-19 14:05:04	\N	\N	\N
205	30	python	meetup	1	done	2015-04-25 00:01:05	2015-04-25 00:01:05	0ca731da304a05cf6bb9b472	t	2015-07-25 00:53:37	2015-07-25 00:53:37	Submitted an iteration	\N	\N
206	35	haskell	robot-name	1	\N	2015-11-12 01:43:34	2015-11-12 01:43:34	079a354c1617da0f16249ed2	t	2015-11-14 20:50:55	2015-11-14 20:50:55	Submitted an iteration	2015-11-24 23:25:42.941805	\N
207	35	clojure	hello-world	0	\N	2015-11-16 20:21:03	2015-11-16 20:21:03	7ebdcf1e0a517b1c242bab5f	f	2015-11-16 20:21:03	2015-11-16 20:21:03	\N	\N	\N
208	35	ruby	grade-school	1	pending	2015-11-19 19:50:56	2015-11-19 19:50:56	1b8104b180b83df66030f0d0	f	2015-12-05 08:55:44	2015-12-05 08:55:44	Submitted an iteration	\N	\N
209	14	ruby	raindrops	1	done	2015-05-13 13:14:08	2015-05-13 13:14:08	fd479945aea7651ab6e4bb64	t	2015-06-12 19:44:35	2015-06-12 19:44:35	Submitted an iteration	\N	\N
210	14	csharp	robot-name	1	done	2015-08-09 16:49:50	2015-08-09 16:49:50	9c4cc0c57b7d0c4479bc7c6e	t	2015-09-20 11:16:43	2015-09-20 11:16:43	Submitted an iteration	\N	\N
211	14	plsql	gigasecond	0	\N	2015-08-08 22:22:44	2015-08-08 22:22:44	3bff905bbc3a921bfa13c6b0	f	2015-08-08 22:22:44	2015-08-08 22:22:44	\N	\N	\N
212	14	elixir	bob	1	\N	2015-07-25 22:14:09	2015-07-25 22:14:09	97862580b1a88736adb94081	f	2015-09-23 21:56:40	2015-09-23 21:56:40	Submitted an iteration	\N	\N
213	41	ruby	hamming	1	hibernating	2015-11-16 01:40:07	2015-11-16 01:40:07	dbb8b16ee86627b7940fe658	t	2015-12-28 07:24:21	2015-12-28 07:24:21	@sduckett commented	\N	\N
214	41	javascript	hello-world	0	\N	2015-12-30 07:33:20	2015-12-30 07:33:20	d61c6145d8e36a3930eef310	f	2015-12-30 07:33:20	2015-12-30 07:33:20	\N	\N	\N
215	41	ruby	hello-world	0	\N	2015-12-12 14:50:51	2015-12-12 14:50:51	cf9fe7d64de8226beba00c9f	f	2015-12-12 14:50:51	2015-12-12 14:50:51	\N	\N	\N
216	41	scala	word-count	2	\N	2015-11-03 14:12:03	2015-11-03 14:12:03	2371d3b75d947b04ce800b61	f	2015-11-28 04:56:54	2015-11-28 04:56:54	Submitted an iteration	\N	\N
217	41	plsql	rna-transcription	0	\N	2015-08-12 02:43:43	2015-08-12 02:43:43	b75f99facfa1a8ff33190eac	f	2015-08-12 02:43:43	2015-08-12 02:43:43	\N	\N	\N
218	41	ruby	anagram	4	done	2015-08-21 23:23:02	2015-08-21 23:23:02	b17473290581d77c0ba0f950	t	2015-11-25 20:48:07	2015-11-25 20:48:07	Submitted an iteration	\N	\N
219	41	javascript	bob	3	hibernating	2015-09-19 03:07:44	2015-09-19 03:07:44	97153ee2811c352a95d5d9ed	f	2015-11-28 21:10:17	2015-11-28 21:10:17	Submitted an iteration	\N	\N
220	6	clojure	bob	0	\N	2015-10-08 01:39:12	2015-10-08 01:39:12	338628bcb29e6a746bd26b0b	f	2015-10-08 01:39:12	2015-10-08 01:39:12	\N	\N	\N
221	6	ruby	bob	0	\N	2015-12-10 07:10:57	2015-12-10 07:10:57	f299b16c3e40709729cc47e2	f	2015-12-10 07:10:57	2015-12-10 07:10:57	\N	2015-11-22 22:05:11.462156	\N
222	6	python	triangle	1	done	2015-10-30 07:35:46	2015-10-30 07:35:46	7cddf8f63d088ffeeff5e49d	t	2015-12-26 19:05:41	2015-12-26 19:05:41	Submitted an iteration	\N	\N
223	6	elixir	rna-transcription	0	\N	2015-11-05 18:15:25	2015-11-05 18:15:25	57a8270f8f9798aa1bd4a9ce	f	2015-11-05 18:15:25	2015-11-05 18:15:25	\N	\N	\N
224	34	ruby	raindrops	2	hibernating	2015-09-28 02:09:19	2015-09-28 02:09:19	e7cf2a5beded23a439657a12	f	2015-10-19 19:30:42	2015-10-19 19:30:42	Submitted an iteration	\N	\N
225	34	php	hamming	0	\N	2015-12-20 20:54:19	2015-12-20 20:54:19	313f3cbf68d38e157c5e7286	f	2015-12-20 20:54:19	2015-12-20 20:54:19	\N	\N	\N
226	34	python	word-count	2	done	2015-11-25 00:34:45	2015-11-25 00:34:45	365beb2d5f4491c39e917669	t	2015-12-19 22:46:50	2015-12-19 22:46:50	Submitted an iteration	\N	\N
227	16	haskell	phone-number	1	hibernating	2015-06-08 17:00:46	2015-06-08 17:00:46	bdf719fb72c6e62aef0441df	f	2015-11-01 22:59:49	2015-11-01 22:59:49	Submitted an iteration	\N	\N
228	16	ocaml	bob	0	\N	2015-04-29 22:55:20	2015-04-29 22:55:20	53dd12f80e9bd7a5593ed982	f	2015-04-29 22:55:20	2015-04-29 22:55:20	\N	\N	\N
229	18	ruby	beer-song	1	done	2015-11-27 07:46:02	2015-11-27 07:46:02	45e308ffebfd88428814c28b	t	2015-12-17 05:19:46	2015-12-17 05:19:46	Submitted an iteration	\N	\N
230	18	csharp	hamming	1	pending	2015-12-02 21:55:37	2015-12-02 21:55:37	0b471a3752961a8d7efd5801	f	2015-12-19 03:13:03	2015-12-19 03:13:03	Submitted an iteration	\N	\N
231	18	ecmascript	hello-world	0	\N	2015-12-27 11:47:57	2015-12-27 11:47:57	75b17101c8bdcc99877b102c	f	2015-12-27 11:47:57	2015-12-27 11:47:57	\N	\N	\N
232	18	python	bob	0	\N	2015-11-06 18:23:04	2015-11-06 18:23:04	c753b68c3ab5158338e08bdb	f	2015-11-06 18:23:04	2015-11-06 18:23:04	\N	\N	\N
233	18	scala	accumulate	2	done	2015-11-06 13:07:03	2015-11-06 13:07:03	c7966175e93ea36b24280491	t	2016-01-02 10:33:41	2016-01-02 10:33:41	Submitted an iteration	\N	\N
234	18	elixir	gigasecond	1	pending	2015-11-07 23:13:59	2015-11-07 23:13:59	48f7043b3d7962ad27bf5050	f	2015-11-14 06:04:07	2015-11-14 06:04:07	Submitted an iteration	\N	\N
235	18	lfe	leap	0	\N	2015-11-10 01:57:50	2015-11-10 01:57:50	d4f76556832aaa1c1fc15561	f	2015-11-10 01:57:50	2015-11-10 01:57:50	\N	\N	\N
236	18	cpp	hamming	1	pending	2015-10-29 23:53:23	2015-10-29 23:53:23	07d763226709deb28596cf0c	f	2015-12-10 19:51:37	2015-12-10 19:51:37	Submitted an iteration	\N	\N
237	18	python	gigasecond	2	pending	2015-11-23 19:29:09	2015-11-23 19:29:09	5b84661f02af68e7163ce51c	f	2015-12-22 00:48:44	2015-12-22 00:48:44	Submitted an iteration	\N	\N
238	18	erlang	leap	0	\N	2015-11-08 05:25:55	2015-11-08 05:25:55	34cbb860345e276f87e3e937	f	2015-11-08 05:25:55	2015-11-08 05:25:55	\N	\N	\N
239	18	csharp	bob	1	pending	2015-12-13 21:40:04	2015-12-13 21:40:04	92832e7f4beaa345f0844c31	f	2015-12-25 10:43:56	2015-12-25 10:43:56	Submitted an iteration	\N	\N
240	18	cpp	bob	0	\N	2015-11-29 05:54:18	2015-11-29 05:54:18	c7237dc7d5bc2fdf38898b45	f	2015-11-29 05:54:18	2015-11-29 05:54:18	\N	\N	\N
241	18	go	leap	0	\N	2015-12-31 18:28:53	2015-12-31 18:28:53	d76e3f81afe38a5ae69a74d4	f	2015-12-31 18:28:53	2015-12-31 18:28:53	\N	\N	\N
242	18	elixir	bob	0	\N	2015-12-14 20:32:51	2015-12-14 20:32:51	3babd544ccb463d702f34c30	f	2015-12-14 20:32:51	2015-12-14 20:32:51	\N	\N	\N
243	18	ruby	grains	1	hibernating	2015-10-27 22:52:19	2015-10-27 22:52:19	6de00a3f74b9c27bf7076215	f	2016-01-01 04:45:54	2016-01-01 04:45:54	Submitted an iteration	\N	\N
244	18	elixir	grade-school	1	pending	2015-12-11 22:25:51	2015-12-11 22:25:51	a4b553f317e572d3e0dfcc89	f	2015-12-29 22:26:52	2015-12-29 22:26:52	Submitted an iteration	\N	\N
245	18	objective-c	hello-world	0	\N	2015-11-04 07:49:02	2015-11-04 07:49:02	a5c014e632e7c37c63f56129	f	2015-11-04 07:49:02	2015-11-04 07:49:02	\N	\N	\N
246	18	lisp	point-mutations	0	\N	2015-12-31 06:25:00	2015-12-31 06:25:00	d01fbe2c9f9e891c157f791c	f	2015-12-31 06:25:00	2015-12-31 06:25:00	\N	\N	\N
247	18	swift	hello-world	0	\N	2015-12-24 11:06:07	2015-12-24 11:06:07	4beb5a26f83a0493b08c4127	f	2015-12-24 11:06:07	2015-12-24 11:06:07	\N	\N	\N
248	18	python	sieve	1	pending	2015-12-02 15:56:59	2015-12-02 15:56:59	f1ded117d18e4630ca880d8d	f	2015-12-11 08:45:00	2015-12-11 08:45:00	Submitted an iteration	\N	\N
249	18	javascript	etl	1	\N	2015-11-12 01:30:28	2015-11-12 01:30:28	f54cd27b941c97799e024ce1	f	2015-12-05 22:30:20	2015-12-05 22:30:20	Submitted an iteration	2015-10-30 22:44:04.514134	\N
250	18	ruby	difference-of-squares	1	pending	2015-12-28 12:37:59	2015-12-28 12:37:59	909b5b1a549bfd15c27d7bb6	f	2016-01-02 07:24:24	2016-01-02 07:24:24	Submitted an iteration	\N	\N
251	18	javascript	grains	1	pending	2015-12-04 09:01:26	2015-12-04 09:01:26	4a3123cf7016368a8f60ef87	f	2015-12-08 12:28:51	2015-12-08 12:28:51	Submitted an iteration	\N	\N
252	18	python	hamming	1	hibernating	2015-11-27 00:14:14	2015-11-27 00:14:14	05f1ca4d8f9ee570e0e416ff	f	2015-12-12 15:44:48	2015-12-12 15:44:48	Submitted an iteration	\N	\N
253	18	ruby	hello-world	1	pending	2015-10-29 21:54:03	2015-10-29 21:54:03	e35ad45807f34d5a135b0ca4	f	2015-12-30 08:01:28	2015-12-30 08:01:28	Submitted an iteration	\N	\N
254	18	haskell	leap	0	\N	2015-10-30 18:31:42	2015-10-30 18:31:42	93f8a5e9adaee6d089a4b850	f	2015-10-30 18:31:42	2015-10-30 18:31:42	\N	\N	\N
255	18	lua	hello-world	0	\N	2015-11-27 04:00:25	2015-11-27 04:00:25	ef8a20c36d47a10e035945ca	f	2015-11-27 04:00:25	2015-11-27 04:00:25	\N	\N	\N
256	24	ruby	hello-world	0	done	2015-10-26 03:32:18	2015-10-26 03:32:18	be0e53bcc027add30e89e4c3	t	2015-10-26 03:32:18	2015-10-26 03:32:18	\N	\N	\N
257	24	csharp	bob	1	hibernating	2015-09-10 20:15:05	2015-09-10 20:15:05	caf8b1c990aac428bdaa21fd	f	2015-09-16 08:44:27	2015-09-16 08:44:27	Submitted an iteration	\N	\N
258	24	clojure	meetup	2	done	2015-08-27 04:41:45	2015-08-27 04:41:45	2180630e3e54b79ccd0cd739	t	2015-12-24 03:17:26	2015-12-24 03:17:26	Submitted an iteration	\N	\N
259	24	go	house	0	\N	2015-10-06 00:48:34	2015-10-06 00:48:34	f6cad2bd8925d111e9a7294e	f	2015-10-06 00:48:34	2015-10-06 00:48:34	\N	\N	\N
260	24	python	difference-of-squares	1	done	2015-11-18 22:50:36	2015-11-18 22:50:36	dd2d6e93005cc030b502486a	t	2016-01-02 04:52:04	2016-01-02 04:52:04	Submitted an iteration	\N	\N
261	42	perl5	strain	1	pending	2015-05-09 18:58:30	2015-05-09 18:58:30	cfb5819fbfec4f1ffeed7f8b	f	2015-11-29 02:57:37	2015-11-29 02:57:37	Submitted an iteration	\N	\N
262	42	javascript	triangle	2	done	2015-07-28 05:53:31	2015-07-28 05:53:31	73e2ace14bfc013aecdbbbe9	t	2015-12-31 19:09:43	2015-12-31 19:09:43	Submitted an iteration	\N	\N
263	42	ruby	word-count	9	done	2015-06-26 19:28:54	2015-06-26 19:28:54	5c2325e995db789f64f5b8de	t	2015-11-17 13:01:48	2015-11-17 13:01:48	Submitted an iteration	\N	\N
264	42	ruby	rna-transcription	1	pending	2015-07-28 15:14:09	2015-07-28 15:14:09	af4c22adc72dac308282c203	f	2015-08-31 04:08:49	2015-08-31 04:08:49	Submitted an iteration	\N	\N
265	42	rust	leap	0	\N	2015-06-29 21:35:39	2015-06-29 21:35:39	5872db74928e3f41823fee6e	f	2015-06-29 21:35:39	2015-06-29 21:35:39	\N	\N	\N
266	42	elixir	bob	1	done	2015-05-14 03:04:30	2015-05-14 03:04:30	68edab6caa7ebc5830c0bb04	t	2015-11-09 23:41:14	2015-11-09 23:41:14	Submitted an iteration	\N	\N
267	42	objective-c	hello-world	0	\N	2015-09-28 01:15:50	2015-09-28 01:15:50	cbe0a61c52920c076b123150	f	2015-09-28 01:15:50	2015-09-28 01:15:50	\N	\N	\N
268	42	lisp	point-mutations	0	\N	2015-07-06 11:57:00	2015-07-06 11:57:00	6e017aac828f97af0bfd367b	f	2015-07-06 11:57:00	2015-07-06 11:57:00	\N	\N	\N
269	42	ecmascript	hello-world	0	\N	2015-06-04 04:32:44	2015-06-04 04:32:44	61cbaba30d9c5a77dd25b5dd	f	2015-06-04 04:32:44	2015-06-04 04:32:44	\N	\N	\N
270	42	php	gigasecond	1	\N	2015-06-24 08:10:02	2015-06-24 08:10:02	20018ae718b8300e484c77de	f	2015-08-28 10:45:05	2015-08-28 10:45:05	@shssoichiro commented	2015-09-22 17:53:10.229443	\N
271	42	perl5	bob	0	\N	2015-10-02 12:16:47	2015-10-02 12:16:47	1f027a26e19b364395796267	f	2015-10-02 12:16:47	2015-10-02 12:16:47	\N	\N	\N
272	42	ruby	roman-numerals	1	pending	2015-05-12 05:19:29	2015-05-12 05:19:29	0444038a8681e3aff7179ef9	f	2015-08-03 07:52:43	2015-08-03 07:52:43	Submitted an iteration	\N	\N
273	42	perl5	series	1	done	2015-06-17 01:31:14	2015-06-17 01:31:14	36223c42dc61f2c5ff4ce99e	t	2015-06-28 23:46:57	2015-06-28 23:46:57	Submitted an iteration	\N	\N
274	42	scala	leap	1	\N	2015-05-27 09:03:14	2015-05-27 09:03:14	54088e37af75d8116e623591	f	2015-09-02 23:56:29	2015-09-02 23:56:29	@abo64 commented	2015-10-22 12:49:27.10518	\N
275	42	csharp	leap	0	\N	2015-09-13 13:21:08	2015-09-13 13:21:08	bec40e62b4ad29920665cef3	f	2015-09-13 13:21:08	2015-09-13 13:21:08	\N	\N	\N
276	42	coffeescript	hello-world	0	\N	2015-12-12 17:34:50	2015-12-12 17:34:50	8e2966c8ee8e41fe56a9d79a	f	2015-12-12 17:34:50	2015-12-12 17:34:50	\N	\N	\N
277	42	elixir	word-count	3	pending	2015-05-14 16:13:40	2015-05-14 16:13:40	bcefe6f73c6ed44c957a163d	f	2015-10-08 16:50:58	2015-10-08 16:50:58	Submitted an iteration	\N	\N
278	42	ruby	series	2	done	2015-05-30 22:27:22	2015-05-30 22:27:22	0f1edf9a7ffc9e5ade563983	t	2015-10-09 23:56:48	2015-10-09 23:56:48	Submitted an iteration	\N	\N
279	42	erlang	rna-transcription	0	\N	2015-09-28 18:37:27	2015-09-28 18:37:27	e283ac3f685deeb5054937cb	f	2015-09-28 18:37:27	2015-09-28 18:37:27	\N	\N	\N
280	42	cpp	anagram	1	needs_input	2015-05-22 07:53:29	2015-05-22 07:53:29	139572e7d90b34b3b087f084	f	2015-09-20 11:22:53	2015-09-20 11:22:53	Submitted an iteration	\N	\N
281	42	lua	anagram	0	\N	2015-06-10 09:04:58	2015-06-10 09:04:58	1afafbbcda0eb673bf181aad	f	2015-06-10 09:04:58	2015-06-10 09:04:58	\N	\N	\N
282	42	perl5	triangle	0	\N	2015-09-11 05:19:16	2015-09-11 05:19:16	fdc5434d08598dcc846c4ae1	f	2015-09-11 05:19:16	2015-09-11 05:19:16	\N	\N	\N
283	42	ruby	hamming	6	hibernating	2015-05-30 14:08:46	2015-05-30 14:08:46	dd118260a588a9e27f9959ca	f	2015-11-21 14:04:46	2015-11-21 14:04:46	Submitted an iteration	\N	\N
284	42	swift	hello-world	0	\N	2015-11-11 15:10:08	2015-11-11 15:10:08	23d916bb9f87e41ef797ec15	f	2015-11-11 15:10:08	2015-11-11 15:10:08	\N	\N	\N
285	42	haskell	leap	0	\N	2015-10-27 18:29:14	2015-10-27 18:29:14	04cbec60201fea4aba2a29ee	f	2015-10-27 18:29:14	2015-10-27 18:29:14	\N	\N	\N
286	42	ruby	anagram	4	hibernating	2015-07-11 02:31:15	2015-07-11 02:31:15	00b2c1c587b85e1de3592b83	f	2015-12-30 14:12:16	2015-12-30 14:12:16	Submitted an iteration	\N	\N
287	42	javascript	word-count	1	pending	2015-06-02 18:03:18	2015-06-02 18:03:18	32fe1cfff708783fffd10e5d	t	2015-09-01 19:52:34	2015-09-01 19:52:34	Submitted an iteration	\N	\N
288	42	python	leap	1	pending	2015-07-19 00:27:35	2015-07-19 00:27:35	3cdcc141bac0eb6abcac0c76	f	2015-09-22 19:20:21	2015-09-22 19:20:21	Submitted an iteration	\N	\N
289	42	haskell	space-age	2	done	2015-10-18 04:05:10	2015-10-18 04:05:10	02cb9452bd245975098db65a	t	2015-12-09 22:19:03	2015-12-09 22:19:03	Submitted an iteration	\N	\N
290	42	clojure	hello-world	0	\N	2015-11-15 19:46:25	2015-11-15 19:46:25	8c2fac587a023b0e7337d3b1	f	2015-11-15 19:46:25	2015-11-15 19:46:25	\N	\N	\N
291	42	ruby	hello-world	0	done	2015-07-18 18:55:33	2015-07-18 18:55:33	199b3177f2411b2a269df46c	t	2015-07-18 18:55:33	2015-07-18 18:55:33	\N	\N	\N
292	42	python	hello-world	0	\N	2015-10-13 13:52:07	2015-10-13 13:52:07	05bcbfd688232a14abaf03d6	f	2015-10-13 13:52:07	2015-10-13 13:52:07	\N	\N	\N
293	27	lisp	gigasecond	0	\N	2015-11-03 09:21:52	2015-11-03 09:21:52	a35bbd57e6b226af3d7e8fa9	f	2015-11-03 09:21:52	2015-11-03 09:21:52	\N	\N	\N
294	27	ruby	grains	1	done	2015-07-20 20:50:51	2015-07-20 20:50:51	32b77bf0ab19a52aa2d4da19	t	2015-11-05 03:18:48	2015-11-05 03:18:48	Submitted an iteration	\N	\N
295	27	ocaml	bob	0	\N	2015-08-05 18:48:33	2015-08-05 18:48:33	ee9e34b7c86ab19c87502913	f	2015-08-05 18:48:33	2015-08-05 18:48:33	\N	\N	\N
296	27	lisp	point-mutations	0	\N	2015-06-23 11:38:04	2015-06-23 11:38:04	60f6e30722b02711cc797aa1	f	2015-06-23 11:38:04	2015-06-23 11:38:04	\N	\N	\N
297	27	swift	leap	0	\N	2015-09-07 18:37:08	2015-09-07 18:37:08	a85bef739f82cdeb318ae3cf	f	2015-09-07 18:37:08	2015-09-07 18:37:08	\N	\N	\N
298	27	clojure	bob	2	hibernating	2015-08-26 08:11:20	2015-08-26 08:11:20	92955ff62f33a7aa060bfe90	f	2015-09-21 19:10:03	2015-09-21 19:10:03	Submitted an iteration	\N	\N
299	27	haskell	leap	0	\N	2015-06-09 22:42:39	2015-06-09 22:42:39	d0d112dfb44cd67803ee9fb4	f	2015-06-09 22:42:39	2015-06-09 22:42:39	\N	\N	\N
300	27	csharp	gigasecond	1	\N	2015-06-07 06:10:38	2015-06-07 06:10:38	89fa1e762a2a79a2ba499623	t	2015-12-08 15:46:25	2015-12-08 15:46:25	Submitted an iteration	2015-12-20 12:47:51.983412	\N
301	27	csharp	leap	1	hibernating	2015-07-21 13:27:07	2015-07-21 13:27:07	8dd9838b4ca61ca8fd8e65b0	f	2015-12-15 02:59:05	2015-12-15 02:59:05	Submitted an iteration	\N	\N
302	27	perl5	bob	0	\N	2015-06-18 15:28:43	2015-06-18 15:28:43	1551eae2a02186eac1a4aa21	f	2015-06-18 15:28:43	2015-06-18 15:28:43	\N	\N	\N
303	27	cpp	bob	0	\N	2015-12-16 10:18:36	2015-12-16 10:18:36	359cb8e255a13ad5a33369f0	f	2015-12-16 10:18:36	2015-12-16 10:18:36	\N	\N	\N
304	27	ruby	gigasecond	1	pending	2015-06-09 01:48:11	2015-06-09 01:48:11	9e7aae463d82771a3e6c2e9a	f	2015-06-26 09:20:08	2015-06-26 09:20:08	Submitted an iteration	\N	\N
305	27	objective-c	hello-world	0	\N	2015-07-06 21:57:13	2015-07-06 21:57:13	00cfded471ed90c2a9eb96e3	f	2015-07-06 21:57:13	2015-07-06 21:57:13	\N	\N	\N
306	27	erlang	accumulate	1	\N	2015-08-07 01:39:03	2015-08-07 01:39:03	b1f0f47a8f8f5aaed989f7fd	f	2015-11-18 11:25:30	2015-11-18 11:25:30	Submitted an iteration	2015-12-08 03:20:42.583308	\N
307	27	python	word-count	2	pending	2015-08-31 06:24:08	2015-08-31 06:24:08	c9a2cfda1812e0de8de4844e	f	2015-11-23 02:20:43	2015-11-23 02:20:43	Submitted an iteration	\N	\N
308	27	go	difference-of-squares	0	\N	2015-08-11 18:23:14	2015-08-11 18:23:14	c4a73abc093e23d96c473a05	f	2015-08-11 18:23:14	2015-08-11 18:23:14	\N	\N	\N
309	27	elixir	triangle	2	done	2015-06-02 21:56:01	2015-06-02 21:56:01	ed0db074bf7dab4f36bc0e71	t	2015-09-08 15:08:53	2015-09-08 15:08:53	Submitted an iteration	\N	\N
310	27	lfe	leap	0	\N	2015-09-02 01:39:33	2015-09-02 01:39:33	089c40e389d989afb627affc	f	2015-09-02 01:39:33	2015-09-02 01:39:33	\N	\N	\N
311	45	java	bob	3	pending	2015-06-07 11:52:34	2015-06-07 11:52:34	4823d87ff6b5b5b7cb1f5a35	f	2015-10-12 02:05:43	2015-10-12 02:05:43	Submitted an iteration	\N	\N
312	45	python	grains	1	\N	2015-06-03 21:17:17	2015-06-03 21:17:17	c9baf1dc8ee882bf09dbd779	f	2015-11-16 14:17:30	2015-11-16 14:17:30	Submitted an iteration	2015-10-22 15:45:45.32469	\N
313	45	python	hamming	2	done	2015-08-19 14:35:38	2015-08-19 14:35:38	a4ceb40e09c4bb5eb694c7b9	t	2015-11-10 02:38:59	2015-11-10 02:38:59	Submitted an iteration	\N	\N
314	45	haskell	rna-transcription	1	hibernating	2015-07-29 18:32:43	2015-07-29 18:32:43	4e61ac56d388bc03bd5eef22	f	2015-09-12 20:28:30	2015-09-12 20:28:30	Submitted an iteration	\N	\N
315	45	lua	hello-world	0	\N	2015-09-26 23:18:04	2015-09-26 23:18:04	a1034c25626cd499e754dba1	f	2015-09-26 23:18:04	2015-09-26 23:18:04	\N	\N	\N
316	45	clojure	rna-transcription	2	\N	2015-07-28 08:01:25	2015-07-28 08:01:25	bdd050b7624d538b0fd1f626	f	2015-12-08 04:06:03	2015-12-08 04:06:03	@skrblr commented	2015-12-20 18:10:59.522208	\N
317	45	haskell	hello-world	0	done	2015-09-28 20:06:00	2015-09-28 20:06:00	1bdef40698efac953f4b2aec	t	2015-09-28 20:06:00	2015-09-28 20:06:00	\N	\N	\N
318	45	ruby	rna-transcription	1	done	2015-09-15 07:06:43	2015-09-15 07:06:43	f36d021b79725b4879bc3aba	t	2015-12-04 02:06:26	2015-12-04 02:06:26	Submitted an iteration	\N	\N
319	45	ruby	secret-handshake	0	\N	2015-11-13 02:14:14	2015-11-13 02:14:14	50e92a35239a87fe9e90aa2d	f	2015-11-13 02:14:14	2015-11-13 02:14:14	\N	\N	\N
320	45	scala	hello-world	0	\N	2015-09-07 20:53:26	2015-09-07 20:53:26	3784672fef7879dfa9127221	f	2015-09-07 20:53:26	2015-09-07 20:53:26	\N	\N	\N
321	45	javascript	hello-world	0	\N	2015-07-17 17:55:44	2015-07-17 17:55:44	db7a8c6d6b6bdcbc8f785381	f	2015-07-17 17:55:44	2015-07-17 17:55:44	\N	\N	\N
322	45	swift	hamming	1	done	2015-08-08 05:29:27	2015-08-08 05:29:27	2e2e4bd77caabe2528f28fea	t	2015-11-11 23:45:48	2015-11-11 23:45:48	Submitted an iteration	\N	\N
323	45	lua	leap	0	\N	2015-11-03 21:30:03	2015-11-03 21:30:03	a254e55d27808c45d9a232ad	f	2015-11-03 21:30:03	2015-11-03 21:30:03	\N	\N	\N
324	45	perl5	grains	0	\N	2015-06-18 13:51:23	2015-06-18 13:51:23	46c5346e273a80d01975aaa5	f	2015-06-18 13:51:23	2015-06-18 13:51:23	\N	\N	\N
325	45	plsql	hamming	0	\N	2015-11-08 19:13:30	2015-11-08 19:13:30	1afa5e9d51b5e7b6179cfc75	f	2015-11-08 19:13:30	2015-11-08 19:13:30	\N	\N	\N
326	45	fsharp	leap	1	pending	2015-05-16 13:46:21	2015-05-16 13:46:21	ee6925c324134c7399ea064c	f	2015-09-01 19:53:29	2015-09-01 19:53:29	Submitted an iteration	\N	\N
327	45	ruby	difference-of-squares	2	hibernating	2015-09-02 02:27:29	2015-09-02 02:27:29	d0d050d3669af7b63f7546f3	f	2015-09-29 13:07:44	2015-09-29 13:07:44	Submitted an iteration	\N	\N
328	45	haskell	bob	2	done	2015-07-03 06:22:53	2015-07-03 06:22:53	324bbf3f68cd613cbe3bee3f	t	2015-07-08 22:32:03	2015-07-08 22:32:03	Submitted an iteration	\N	\N
329	45	lisp	bob	0	\N	2015-07-02 07:31:38	2015-07-02 07:31:38	651ab555ffeb4e5857576b52	f	2015-07-02 07:31:38	2015-07-02 07:31:38	\N	\N	\N
330	45	ruby	hello-world	0	done	2015-09-13 10:16:56	2015-09-13 10:16:56	979d311a6ee072b006de7420	t	2015-09-13 10:16:56	2015-09-13 10:16:56	\N	\N	\N
331	45	ocaml	bob	0	\N	2015-04-24 14:20:43	2015-04-24 14:20:43	1ed76f9f5e7bf5042357b42c	f	2015-04-24 14:20:43	2015-04-24 14:20:43	\N	\N	\N
\.


--
-- Name: user_exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('user_exercises_id_seq', 331, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY users (id, username, email, avatar_url, github_id, key, mastery, created_at, updated_at, onboarded_at, track_mentor) FROM stdin;
1	rikki-	rikki-@example.com	https://avatars.githubusercontent.com/u/8341419	8341419	gxd192	\N	2015-10-28 07:12:25.067381	2015-10-28 07:12:25.067381	\N	--- []\n
6	amelie	amelie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sindresorhus/128.jpg	-15841	epn796	\N	2015-09-29 21:50:37.094153	2015-09-29 21:50:37.094153	\N	--- []\n
7	beth	beth@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/shalt0ni/128.jpg	-44247	zaq960	\N	2015-09-22 06:25:55.096815	2015-09-22 06:25:55.096815	\N	--- []\n
8	claire	claire@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/haydn_woods/128.jpg	-76857	yho622	\N	2015-05-24 02:53:24.099387	2015-05-24 02:53:24.099387	\N	--- []\n
10	eve	eve@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sydlawrence/128.jpg	-33738	nxx783	\N	2015-05-12 19:03:00.104644	2015-05-12 19:03:00.104644	\N	--- []\n
13	grace	grace@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jervo/128.jpg	-57759	qux645	\N	2015-08-13 13:17:27.111774	2015-08-13 13:17:27.111774	\N	--- []\n
14	haley	haley@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/thierrykoblentz/128.jpg	-34775	uoc782	\N	2015-04-08 03:31:55.113486	2015-04-08 03:31:55.113486	\N	--- []\n
16	jarrod	jarrod@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/osvaldas/128.jpg	-66357	csd230	\N	2015-04-19 16:28:36.118908	2015-04-19 16:28:36.118908	\N	--- []\n
17	kieran	kieran@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/guiiipontes/128.jpg	-85392	hpn340	\N	2015-05-15 16:13:53.121738	2015-05-15 16:13:53.121738	\N	--- []\n
18	lisa	lisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/joshaustin/128.jpg	-22949	sbl360	\N	2015-10-27 01:53:35.124461	2015-10-27 01:53:35.124461	\N	--- []\n
19	mack	mack@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/stan/128.jpg	-59237	cad728	\N	2015-10-27 22:42:23.127425	2015-10-27 22:42:23.127425	\N	--- []\n
20	madison	madison@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/andrewcohen/128.jpg	-59381	hcu806	\N	2015-05-10 18:10:40.130344	2015-05-10 18:10:40.130344	\N	--- []\n
21	marshall	marshall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/anaami/128.jpg	-47935	opy793	\N	2015-11-18 14:54:22.133425	2015-11-18 14:54:22.133425	\N	--- []\n
23	mia	mia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg	-50316	hmp537	\N	2015-08-08 10:11:39.139184	2015-08-08 10:11:39.139184	\N	--- []\n
24	mike	mike@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/erwanhesry/128.jpg	-82394	tlh882	\N	2015-07-01 23:24:10.14168	2015-07-01 23:24:10.14168	\N	--- []\n
25	mildred	mildred@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/dpmachado/128.jpg	-41288	hft517	\N	2015-11-26 12:28:56.144182	2015-11-26 12:28:56.144182	\N	--- []\n
26	mitchell	mitchell@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/abdullindenis/128.jpg	-93747	blq833	\N	2015-09-03 04:43:55.146739	2015-09-03 04:43:55.146739	\N	--- []\n
27	morris	morris@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/weglov/128.jpg	-49838	bnd318	\N	2015-05-18 13:50:37.149246	2015-05-18 13:50:37.149246	\N	--- []\n
30	paula	paula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/adamsxu/128.jpg	-20085	bsf490	\N	2015-04-16 16:25:57.160718	2015-04-16 16:25:57.160718	\N	--- []\n
32	rachel	rachel@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/allthingssmitty/128.jpg	-55404	svk318	\N	2015-10-09 04:42:50.168955	2015-10-09 04:42:50.168955	\N	--- []\n
34	rick	rick@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/saschamt/128.jpg	-89731	vau973	\N	2015-09-18 19:02:58.175271	2015-09-18 19:02:58.175271	\N	--- []\n
35	rita	rita@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/michaelmartinho/128.jpg	-99387	pdc795	\N	2015-09-15 04:08:04.179061	2015-09-15 04:08:04.179061	\N	--- []\n
36	river	river@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/thinmatt/128.jpg	-21236	edq387	\N	2015-07-20 06:19:06.182433	2015-07-20 06:19:06.182433	\N	--- []\n
37	rolf	rolf@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kurtinc/128.jpg	-64611	oiz642	\N	2015-09-23 12:04:49.185705	2015-09-23 12:04:49.185705	\N	--- []\n
39	rudi	rudi@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/bungiwan/128.jpg	-62006	qjv293	\N	2015-06-28 20:51:32.191665	2015-06-28 20:51:32.191665	\N	--- []\n
41	ryan	ryan@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mrjamesnoble/128.jpg	-66373	lkw468	\N	2015-08-10 01:06:02.195984	2015-08-10 01:06:02.195984	\N	--- []\n
42	shaina	shaina@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/nicolai_larsen/128.jpg	-60924	xmu636	\N	2015-05-09 17:33:04.1986	2015-05-09 17:33:04.1986	\N	--- []\n
43	talia	talia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/syropian/128.jpg	-71101	ybh261	\N	2015-05-19 18:30:26.201214	2015-05-19 18:30:26.201214	\N	--- []\n
45	vince	vince@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/amanruzaini/128.jpg	-17687	ahh538	\N	2015-04-22 07:40:08.206415	2015-04-22 07:40:08.206415	\N	--- []\n
47	xavier	xavier@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mds/128.jpg	-23582	acj840	\N	2015-08-24 15:06:19.211643	2015-08-24 15:06:19.211643	\N	--- []\n
3	bob	bob@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/joshhemsley/128.jpg	-46574	vbr994	\N	2015-08-02 22:53:52.088173	2015-08-02 22:53:52.088173	2015-07-30 06:15:44	---\n- ruby\n- haskell\n
40	russ	russ@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/cdharrison/128.jpg	-75737	ali810	\N	2015-06-02 16:23:01.193376	2015-06-02 16:23:01.193376	2015-09-17 07:45:21	--- []\n
31	quentin	quentin@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/id835559/128.jpg	-37300	zyx310	\N	2015-07-21 15:02:09.164915	2015-07-21 15:02:09.164915	2015-09-04 22:03:32	--- []\n
33	randall	randall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/flashmurphy/128.jpg	-1336	uml777	\N	2015-05-27 16:02:32.172092	2015-05-27 16:02:32.172092	2015-07-27 14:32:46	--- []\n
12	frederique	frederique@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/atariboy/128.jpg	-54064	gtk926	\N	2015-08-29 16:10:20.109053	2015-08-29 16:10:20.109053	2015-09-12 02:02:49	--- []\n
38	ruben	ruben@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jakemoore/128.jpg	-62220	odj282	\N	2015-08-08 10:34:07.188898	2015-08-08 10:34:07.188898	2015-10-27 11:58:11	--- []\n
46	wilson	wilson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kolage/128.jpg	-41598	qhz706	\N	2015-08-08 23:47:13.209044	2015-08-08 23:47:13.209044	2015-09-07 16:06:44	--- []\n
44	ursula	ursula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ademilter/128.jpg	-43179	iba379	\N	2015-09-16 14:46:31.203807	2015-09-16 14:46:31.203807	2015-09-30 07:17:51	--- []\n
28	norma	norma@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/madysondesigns/128.jpg	-91464	fyd846	\N	2015-11-21 19:14:44.151723	2015-11-21 19:14:44.151723	2015-10-25 12:20:09	--- []\n
4	charlie	charlie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg	-64436	pip337	\N	2015-10-31 08:14:28.090269	2015-10-31 08:14:28.090269	2015-09-11 03:40:05	---\n- javascript\n- erlang\n- elixir\n
22	mary	mary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/heykenneth/128.jpg	-41340	bbo511	\N	2015-05-18 20:56:03.136361	2015-05-18 20:56:03.136361	2015-10-01 15:37:39	--- []\n
49	zachary	zachary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/logorado/128.jpg	-52244	nlt741	\N	2015-10-27 14:29:45.216188	2015-10-27 14:29:45.216188	\N	--- []\n
15	isaac	isaac@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/cbracco/128.jpg	-39612	lon844	\N	2015-06-23 10:30:49.116099	2015-06-23 10:30:49.116099	2015-08-18 01:00:43	--- []\n
2	alice	alice@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/dhilipsiva/128.jpg	-77834	eun987	\N	2015-12-31 22:21:12.085723	2015-12-31 22:21:12.085723	2015-10-02 23:15:15	---\n- clojure\n- coffeescript\n- elixir\n- go\n- haskell\n- javascript\n- objective-c\n- ocaml\n- perl5\n- python\n- ruby\n- scala\n
9	dawson	dawson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/bermonpainter/128.jpg	-72645	ajq291	\N	2015-08-22 20:41:09.101499	2015-08-22 20:41:09.101499	2015-09-06 12:46:34	--- []\n
48	yvette	yvette@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ademilter/128.jpg	-57601	hwl921	\N	2015-11-07 19:53:51.213328	2015-11-07 19:53:51.213328	2015-10-10 02:26:48	--- []\n
29	opal	opal@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/soffes/128.jpg	-43553	sap383	\N	2015-07-13 01:42:11.1546	2015-07-13 01:42:11.1546	2015-09-23 19:15:37	--- []\n
5	diana	diana@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ChrisFarina78/128.jpg	-85194	zlv318	\N	2015-12-04 04:56:15.092299	2015-12-04 04:56:15.092299	2015-08-16 05:44:15	---\n- python\n
11	elisa	elisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/dc_user/128.jpg	-70816	aai406	\N	2015-10-20 21:55:49.106394	2015-10-20 21:55:49.106394	2015-09-16 22:18:57	--- []\n
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('users_id_seq', 49, true);


--
-- Data for Name: views; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY views (id, user_id, exercise_id, last_viewed_at, created_at, updated_at) FROM stdin;
\.


--
-- Name: views_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('views_id_seq', 1, false);


--
-- PostgreSQL database dump complete
--

