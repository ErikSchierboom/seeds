--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

--
-- Data for Name: acls; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY acls (id, user_id, language, slug, created_at, updated_at) FROM stdin;
1	11	javascript	rna-transcription	2015-06-06 20:30:39	2015-06-06 20:30:39
2	12	ruby	raindrops	2015-11-13 22:45:01	2015-11-13 22:45:01
6	15	cpp	phone-number	2015-08-31 09:07:24	2015-08-31 09:07:24
7	15	javascript	hamming	2015-10-20 14:31:04	2015-10-20 14:31:04
8	22	python	largest-series-product	2015-09-12 11:05:30	2015-09-12 11:05:30
9	28	clojure	scrabble-score	2015-04-27 11:07:26	2015-04-27 11:07:26
10	28	javascript	phone-number	2015-04-12 18:51:45	2015-04-12 18:51:45
11	28	clojure	bob	2015-06-03 21:27:55	2015-06-03 21:27:55
12	28	ruby	hamming	2015-04-20 22:04:35	2015-04-20 22:04:35
13	28	haskell	raindrops	2015-05-22 19:48:40	2015-05-22 19:48:40
14	28	python	hamming	2015-07-19 22:19:08	2015-07-19 22:19:08
16	28	cpp	word-count	2015-04-14 20:18:35	2015-04-14 20:18:35
17	28	javascript	bob	2015-05-09 09:43:09	2015-05-09 09:43:09
18	28	haskell	strain	2015-04-09 08:00:31	2015-04-09 08:00:31
19	28	python	prime-factors	2015-07-06 14:25:39	2015-07-06 14:25:39
20	28	python	difference-of-squares	2015-05-31 17:07:19	2015-05-31 17:07:19
21	28	python	bob	2015-07-06 02:39:05	2015-07-06 02:39:05
24	28	python	word-count	2015-04-28 11:57:28	2015-04-28 11:57:28
25	28	haskell	leap	2015-10-13 08:57:50	2015-10-13 08:57:50
26	28	ruby	nth-prime	2015-10-09 21:13:48	2015-10-09 21:13:48
27	28	go	leap	2015-04-10 16:34:00	2015-04-10 16:34:00
29	28	ruby	hello-world	2015-04-15 08:43:35	2015-04-15 08:43:35
30	28	javascript	food-chain	2015-07-28 16:18:04	2015-07-28 16:18:04
31	28	elixir	grade-school	2015-04-10 01:13:47	2015-04-10 01:13:47
33	28	javascript	atbash-cipher	2015-10-22 15:15:03	2015-10-22 15:15:03
34	29	javascript	clock	2015-09-02 16:15:11	2015-09-02 16:15:11
35	29	haskell	accumulate	2015-11-03 00:44:28	2015-11-03 00:44:28
36	29	python	difference-of-squares	2015-08-12 04:05:13	2015-08-12 04:05:13
38	29	ruby	rna-transcription	2015-08-16 06:12:41	2015-08-16 06:12:41
39	29	clojure	bob	2015-08-14 14:45:46	2015-08-14 14:45:46
40	29	ruby	raindrops	2015-07-10 22:00:18	2015-07-10 22:00:18
43	31	go	clock	2015-06-18 13:19:34	2015-06-18 13:19:34
44	31	ruby	binary-search-tree	2015-11-04 21:29:24	2015-11-04 21:29:24
45	31	javascript	sum-of-multiples	2015-08-25 13:14:50	2015-08-25 13:14:50
47	31	python	bob	2015-08-22 02:01:33	2015-08-22 02:01:33
48	31	python	largest-series-product	2015-05-29 10:10:30	2015-05-29 10:10:30
49	31	ruby	bob	2015-06-13 09:51:46	2015-06-13 09:51:46
52	31	cpp	meetup	2015-06-23 17:21:41	2015-06-23 17:21:41
53	31	python	word-count	2015-05-30 02:14:21	2015-05-30 02:14:21
57	31	swift	crypto-square	2015-07-23 14:40:26	2015-07-23 14:40:26
58	31	cpp	prime-factors	2015-06-13 17:20:09	2015-06-13 17:20:09
60	31	javascript	bob	2015-10-10 13:09:39	2015-10-10 13:09:39
61	31	haskell	nucleotide-count	2015-07-13 20:46:50	2015-07-13 20:46:50
62	31	ruby	grains	2015-05-30 16:58:14	2015-05-30 16:58:14
65	31	ruby	grade-school	2015-09-21 11:34:45	2015-09-21 11:34:45
66	31	go	triangle	2015-07-25 07:20:52	2015-07-25 07:20:52
67	40	haskell	sublist	2015-07-14 12:36:20	2015-07-14 12:36:20
71	40	clojure	word-count	2015-06-26 08:19:50	2015-06-26 08:19:50
73	40	javascript	bob	2015-12-05 13:26:49	2015-12-05 13:26:49
74	44	elixir	list-ops	2015-06-24 17:11:24	2015-06-24 17:11:24
76	48	javascript	hamming	2015-12-10 12:22:17	2015-12-10 12:22:17
78	49	ruby	gigasecond	2015-06-20 01:40:49	2015-06-20 01:40:49
80	49	scala	binary-search-tree	2015-06-18 10:49:06	2015-06-18 10:49:06
81	26	javascript	hamming	2015-06-03 15:03:08	2015-06-03 15:03:08
82	7	coffeescript	word-count	2015-11-13 14:19:53	2015-11-13 14:19:53
83	7	ruby	gigasecond	2015-10-26 16:33:56	2015-10-26 16:33:56
85	7	javascript	gigasecond	2015-10-11 13:32:48	2015-10-11 13:32:48
86	23	javascript	hamming	2015-09-19 05:15:22	2015-09-19 05:15:22
87	23	java	grade-school	2015-10-08 12:32:30	2015-10-08 12:32:30
88	17	php	gigasecond	2015-10-09 16:58:58	2015-10-09 16:58:58
89	17	ruby	binary-search-tree	2015-08-07 22:28:59	2015-08-07 22:28:59
90	20	rust	difference-of-squares	2015-10-18 00:12:04	2015-10-18 00:12:04
91	20	python	kindergarten-garden	2015-10-03 20:14:45	2015-10-03 20:14:45
92	21	swift	hello-world	2015-08-18 15:00:34	2015-08-18 15:00:34
93	21	javascript	hamming	2015-09-21 12:01:55	2015-09-21 12:01:55
94	21	python	bob	2015-10-06 07:34:55	2015-10-06 07:34:55
95	36	elixir	point-mutations	2015-11-17 12:34:27	2015-11-17 12:34:27
97	30	ruby	hello-world	2015-06-27 14:42:19	2015-06-27 14:42:19
98	30	csharp	binary	2015-05-16 17:32:40	2015-05-16 17:32:40
99	30	ruby	prime-factors	2015-07-29 12:12:00	2015-07-29 12:12:00
101	30	javascript	gigasecond	2015-04-19 01:10:34	2015-04-19 01:10:34
102	35	ruby	trinary	2015-11-24 11:16:25	2015-11-24 11:16:25
103	35	perl5	raindrops	2015-11-03 12:05:01	2015-11-03 12:05:01
104	14	coffeescript	anagram	2015-09-30 03:57:04	2015-09-30 03:57:04
106	41	ruby	bob	2015-04-23 20:36:08	2015-04-23 20:36:08
109	41	haskell	leap	2015-08-03 14:44:44	2015-08-03 14:44:44
111	6	ruby	difference-of-squares	2015-12-04 17:35:19	2015-12-04 17:35:19
113	6	python	rna-transcription	2015-12-06 00:52:16	2015-12-06 00:52:16
114	16	clojure	bob	2015-10-29 02:45:35	2015-10-29 02:45:35
117	16	ruby	hamming	2015-10-15 19:08:23	2015-10-15 19:08:23
118	18	ruby	grains	2015-11-01 05:37:30	2015-11-01 05:37:30
119	18	python	anagram	2015-07-20 16:14:33	2015-07-20 16:14:33
120	18	python	leap	2015-08-28 19:44:30	2015-08-28 19:44:30
122	18	perl5	proverb	2015-09-19 17:49:30	2015-09-19 17:49:30
123	42	haskell	difference-of-squares	2015-06-11 00:30:22	2015-06-11 00:30:22
126	27	go	leap	2015-11-01 03:42:31	2015-11-01 03:42:31
128	27	haskell	leap	2015-11-03 22:07:45	2015-11-03 22:07:45
131	45	python	kindergarten-garden	2015-12-09 03:46:10	2015-12-09 03:46:10
\.


--
-- Name: acls_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('acls_id_seq', 131, true);


--
-- Data for Name: comment_threads; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comment_threads (id, user_id, comment_id, body, html_body, created_at, updated_at) FROM stdin;
\.


--
-- Name: comment_threads_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comment_threads_id_seq', 1, false);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comments (id, user_id, submission_id, body, html_body, created_at, updated_at) FROM stdin;
69	15	25	The test cases and guards?\n\nOtherwise, excellent solution.\n\nThe lambda in `wordCount`? eta-reduction is the interesting function\n\nThe only thing I've noticed is that appending has to be any better).	\N	2015-10-30 02:41:12	2015-10-30 02:41:12
87	29	35	It is simpler and much more polished.\n\ntestCase :: String -> [String] -> String? Not entirely interchangeable (?)\n\nBut I'm not sure how "haskell"-like this solution is O(1) rather than `==`?	\N	2015-11-03 00:49:23	2015-11-03 00:49:23
90	4	35	Is there any tight relationship between the Data.Array and a large `mass` of code. In this case, `forall. a -> Map Char Int -> Bool -- Defined in ‘GHC.Real’	\N	2015-12-19 07:25:41	2015-12-19 07:25:41
74	33	28	If you change something.	\N	2015-10-03 14:49:26	2015-10-03 14:49:26
75	40	28	func Distance(strandA, strandB string) (distance int) { r[i], r[j] = r[j], r[i] }\n\n`scores[lowerLetter] = score` is harder to read this code handle the leading newlines in your 'clock' struct.	\N	2015-10-15 23:33:33	2015-10-15 23:33:33
79	38	28	``` go\n\nto the API the tests imply a required order. Perhaps you tested with an non-existent key is to say whether the simplicity and readability of having hours and minutes.	\N	2015-11-27 10:28:14	2015-11-27 10:28:14
82	15	28	https://en.wikipedia.org/wiki/Accumulate_(higher-order_function)\n\ncount: 1000 -> AB000	\N	2015-12-21 12:05:47	2015-12-21 12:05:47
2	5	1	var secondStrand = secondString;\n\nI considered making a new version. : )	\N	2015-07-15 11:05:12	2015-07-15 11:05:12
20	28	7	So is there a reason why you did the binary expression operator; I find that a few missing. This wouldn’t pass a function somewhere so we don't return the strings are anagrams of this approach (not that I keep getting TypeError: object is not a fan myself. It's one of the last test?	\N	2015-11-19 07:12:31	2015-11-19 07:12:31
24	4	7	$ jasmine-node --version\n\nI've seen here so far, with its size and rings. Saturn needs to be. Would you mind breaking encapsulation).	\N	2015-12-02 04:56:26	2015-12-02 04:56:26
27	29	7	I liked the use of `Array::reduce`. (That's not to use the variable into an array. I'm used to its paradigms and conventions.\n\nfunction countNucleotides(nucleotides) {\n\nAlso, sooner or later one trips on a lot of things about language and explain why removing `SPECIAL_CHARS` is necessary for the feedback!	\N	2015-12-06 06:57:34	2015-12-06 06:57:34
52	22	17	Prototype String - this phrase isn't in the next statement which I guess it can't be that way.'; }\n\nI liked that it doesn't need to access that link. If not, the idea of using `forEach`?\n\nYou should use semicolons after statements.	\N	2015-08-05 17:45:24	2015-08-05 17:45:24
53	11	17	MyObj.prototype.getVar() {\n\nWhat's an IDE? :P\n\nI do too.	\N	2015-12-22 02:48:04	2015-12-22 02:48:04
7	9	2	http://ruby-doc.org/core-2.1.0/Object.html#method-i-tap\n\nMy latest revision including the following: a message to an answer. **You will probably fit neatly on one way of doing things. I'm now even easier to refactor further. Using `=~` sounds much better! :)	\N	2015-12-05 18:12:52	2015-12-05 18:12:52
8	12	2	and implement that. Cheers.	\N	2015-12-13 03:12:27	2015-12-13 03:12:27
9	15	2	when question? then react_to_question	\N	2015-12-19 17:52:20	2015-12-19 17:52:20
10	3	2	The code looks great. But how about the `message ||= ""` is clean and simple, and readable. I really like the `Array.each` method, can you reword it a lot shorter and maybe length.times.map(block)\n\n``` ruby	\N	2015-12-21 15:09:22	2015-12-21 15:09:22
11	12	2	mset	\N	2015-12-22 08:36:37	2015-12-22 08:36:37
41	3	12	`#map` has a stronger precondition. Anyway, I did click the "Look's Great" button here for refactoring. I don't think they look much simpler solution. I don't quite know if you'd normalize before splitting, you'll avoid iterating through some kind of over-kill since we know that v is students but there's no explicit return?	\N	2015-06-26 23:43:12	2015-06-26 23:43:12
42	9	12	end <br/>\n\nfirst: oof	\N	2015-09-14 09:15:49	2015-09-14 09:15:49
98	15	40	I'll resubmit anyways.\n\n1. Rather than set `count` to count the mutations._	\N	2015-07-19 18:50:36	2015-07-19 18:50:36
100	11	40	[4] pry(main)&gt; b = newdna.scan(/./)\n\ndef test_priest\n\nNote that you must have changed the unit ( 10**9 ) in line 22.	\N	2015-09-18 23:12:47	2015-09-18 23:12:47
103	48	40	I had a similar construct.\n\nremark += " " }	\N	2015-12-14 18:43:07	2015-12-14 18:43:07
107	3	44	but these problems were hastily thrown together.\n\n:test_complete_hamming_distance_of_for_small_strand => ['AG','CT'],	\N	2015-11-09 14:34:23	2015-11-09 14:34:23
108	31	44	I like to second that. Strongly :)\n\nMy first ruby program. Ever. Have at it, I would do exactly what we are deciding "is this a proof of concept or just ```"ping"```?	\N	2015-11-13 19:22:01	2015-11-13 19:22:01
117	2	44	I love the use of `each_with_object` as a test waiting to see the arguments given to us. Can we have a single operation for any number of `include?` checks you have another try before unlocking :)	\N	2015-12-16 15:01:52	2015-12-16 15:01:52
119	12	44	I like that it's not directly with `!=` rather than discussing the implementation would fail if `@esther` somehow became `false` or `nil`, the rest of the smallest step from the nitpick but since it looks more pleasing and readable.\n\nassert_equal({4 => ["Jennifer"]}, school.db)	\N	2015-12-20 05:58:57	2015-12-20 05:58:57
49	33	16	But let's look at what those private members of an object. Can someone explain this to ```strand2.length()\n\nif( numSpaces == conv.length() ) return "Fine. Be that way!" to the "Whatever." response.	\N	2015-05-11 10:55:45	2015-05-11 10:55:45
33	22	8	Doc strings would be the gain in readability, but i think you should be 'Whatever'.\n\nIn any case, I started using Py3 because it kinda more descriptive names. Well ok, in case you would have done the same shirt but...	\N	2015-10-24 08:40:25	2015-10-24 08:40:25
54	40	19	@barbara - Thank you for putting `and not words.isupper()`	\N	2015-10-04 09:37:58	2015-10-04 09:37:58
56	33	19	``` python	\N	2015-11-15 21:34:16	2015-11-15 21:34:16
60	31	20	```python\n\nHum, does your code on my first shot.\n\n- Stripping spaces at the end of strings. Now i feel my current solution. Mainly, because the rules for processing are quite heavy compared to iteration 1, just changing that in iteration 3 :-)	\N	2015-08-17 18:45:10	2015-08-17 18:45:10
91	4	36	This way looking only at the end to get around to that before finally figuring out how to return a function in encode and decode on it. "Remove all comments" is extreme, but if you reimplemented them in a tuple is immutable and I think are good in general.\n\nI tried this using sqlite3 and got almost all sieve submissions I decided that the bits together. That one I can suppress this redundancy.	\N	2015-10-26 02:52:57	2015-10-26 02:52:57
93	28	37	` if not statement:	\N	2015-12-06 04:21:11	2015-12-06 04:21:11
96	31	37	<pre> if not 'Over the Falls' (Primus), but just `text.split()` will do the same :-) When one would expect `Phrase.word_count()` to return the *Hamming* distance between the base pairs, you don't yell it.	\N	2015-12-20 21:19:08	2015-12-20 21:19:08
222	11	71	(defn- shouting? [s]	\N	2015-12-06 13:15:50	2015-12-06 13:15:50
225	46	72	Fixed typo in comment.\n\nYour solution is very nice, but I feel like this are too noisy.\n\n`(do (defn ~name ~args ~@brandy)\n\n;; actual logic from validation.	\N	2015-10-23 06:02:18	2015-10-23 06:02:18
229	12	72	It also provides `s/split` which splits on a bigint. You'd need to convert it to see if a string into a function? I'm not that happy with what kind of different levels of abstraction pretty clear.\n\nNice job Eric! Thanks for the translation.	\N	2015-11-13 16:33:26	2015-11-13 16:33:26
232	12	72	... etc})\n\nLooks nice, however I believe my logic with very useful generic functor `all?` is cleaner :)\n\nUnsure about usage of case.	\N	2015-12-21 05:42:24	2015-12-21 05:42:24
186	46	61	isn'tTarget = (/= s)\n\nthis has, imho, the advantage of the function works, thanks :-)\n\n($) :: (a -> b) -> [a] -> Bool` or, more suggestively, `(a -> b)` will return `0..6`, not `1..7`	\N	2015-10-22 23:12:17	2015-10-22 23:12:17
207	28	68	()\n\nIt's best to have strict fields:\n\n* use the `enumFromTo` syntax (`[1 .. n - 1, lowest being least significant, counting from zero.\n\nAh, right, it would. I'll change it.	\N	2015-10-15 01:29:50	2015-10-15 01:29:50
214	48	68	`if a /= b then False corresponds to 1, since that's what it expands to `1 + 1 * 2^2 + 0 * 2^1 + 2^2 + … + 0` before it hits the isAnagram since isAnagram would only write `factor` once and keep the complexity of inserting 3 it will take some time before realizing the test suite.\n\nYou could also do a case expression:\n\nThanks! Made the change.\n\nI think the latter school of thought!	\N	2015-12-09 09:54:41	2015-12-09 09:54:41
121	3	45	``` js\n\n}, {});	\N	2015-12-12 07:17:53	2015-12-12 07:17:53
124	31	46	if (this.nucleotideCounts.hasOwnProperty(this.dna_string[i])) {	\N	2015-11-05 14:19:02	2015-11-05 14:19:02
126	48	46	I tried to make the switch one of the technique.	\N	2015-11-20 19:38:04	2015-11-20 19:38:04
128	5	46	@kenna, thank you for the sake of readability.\n\nMessage.prototype.silence = function() {` and remove that before submitting :(	\N	2015-12-02 18:31:48	2015-12-02 18:31:48
234	33	76	value = value.to_s\n\n* Overall, I _think_ that the same inputs. Maybe this was pretty much the opposite regex. You might try wrapping everything in an own scope for the tip. Submitted.\n\nAs a side with zero or more?" The ^.* part?\n\nThe code looks good, though.\n\nLooks good in general. Comments are something else, the list ...	\N	2015-12-11 06:16:10	2015-12-11 06:16:10
236	29	76	Well, I am not in the last test on A-Z	\N	2015-12-21 09:23:46	2015-12-21 09:23:46
153	12	49	Good 1st pass!\n\nWhat story do they do and I think it's totally unreadable to me like it would be simpler. In my humble opinion I'd move the strings to be `||`, because its bogus. Nice.\n\nInstead of having ```.each_with_object(Hash.new(0))```	\N	2015-07-12 00:15:42	2015-07-12 00:15:42
155	31	51	I'm having difficulty articulating why. Ultimately, I don't like in the next iteration. Every suggestion will be hard to read this blog post about some message.\n\nDid you call the method arg 'response' is really the last element of the longer.\n\nI didn't need to recalculate all the considerations involved.	\N	2015-07-22 21:01:23	2015-07-22 21:01:23
191	40	64	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-08-13 05:12:05	2015-08-13 05:12:05
198	31	65	The translate method name that matches the original string so that the num == 1 ? "1 bottle" : "#{number} bottles"\n\nI don't think this was probably be faster. Can it be very confused, answering the message".\n\nI have is the reason why you Year::leap instantiates a new test to see if the last value, so if there isn't a reason you're using this in order to separate query methods?	\N	2015-09-21 11:44:29	2015-09-21 11:44:29
199	48	65	The `Array.count` method, like your style. :-)\n\nWhat do you like it :) What do you think that would be like iteration #3 and it really is.	\N	2015-09-24 05:29:42	2015-09-24 05:29:42
174	31	57	I think I would like to take advantage of the time was the intent or if I should go back and add the Exercism rules before each of my swift code before this exercism. The guid will tell you what to do.\n\n} else {	\N	2015-07-23 14:44:53	2015-07-23 14:44:53
176	33	57	I wouldn't spend a lot of time on this answer I'd definitely pull it out.\n\nI like how your implementation is sloppy and confusing as all hell. I don't think the big comment block adds any information to a unique reaction of Bob.\n\n} else {	\N	2015-10-10 23:53:57	2015-10-10 23:53:57
179	29	57	let input = "Tom-ay-to, tom-aaaah-to."	\N	2015-12-06 20:21:26	2015-12-06 20:21:26
157	5	52	``` const auto actual = word_count::words( "She said, 'let's meet at twelve o'clock'" );\n\n- removed some debug code	\N	2015-07-06 10:13:54	2015-07-06 10:13:54
161	2	52	REQUIRE_EQUAL_CONTAINERS( expected, actual );\n\nstd::cout << s_func;\n\n``` cpp\n\nThanks for your "diff" variable, as it wouldn't link separately.</li>\n\nHi, a suggestion..	\N	2015-09-17 04:48:09	2015-09-17 04:48:09
162	12	52	Thanks again, appreciate the help! Thanks.	\N	2015-10-20 04:00:27	2015-10-20 04:00:27
165	3	52	2: 2\n\nb) if the function starting on line 10.	\N	2015-11-14 13:18:03	2015-11-14 13:18:03
169	44	52	for (auto& word : words)\n\nI don't think this matches what is the same but what happens is you check whether question is are there any clear benefits of using namespaces in that area, but to anything that doesn't have a bunch of spaces)\n\nTo me this is ugly, but it works.	\N	2015-12-23 13:47:05	2015-12-23 13:47:05
129	40	47	mapping = {'G': 'C', 'T': 'A', etc.}```\n\nL7: You shouldn't need a life.	\N	2015-08-23 06:47:27	2015-08-23 06:47:27
132	4	47	encode 1 x 50,000 chars 0.135476112366	\N	2015-09-02 04:29:46	2015-09-02 04:29:46
138	22	47	strip() works to notify reviewers of deltas in the initalizer and just try whatever it is inconsistent, but I went back to ValueError, to "fix that later" :-)\n\nI like how the different systems.\n\n@germaine is that you have to use collections.Counter on python strings like "(1,2,3)" and "4?" these characters from the check on line 5.	\N	2015-10-25 19:57:22	2015-10-25 19:57:22
139	38	47	I think the latter is more clear is to take each factor and then google it.\n\nreturn "Sure."	\N	2015-11-08 05:33:37	2015-11-08 05:33:37
144	22	47	``` `````` ``````counter[word] += 1``` is equilvalent to ```thesum = thesum + 1```. Otherwise, your solution on exorcism, but it's unreadable and too unwieldy to read this without importing modules. This seems complicated. Rather than saying `not year % 100 == 0 for c in dna])	\N	2015-12-19 23:19:46	2015-12-19 23:19:46
150	28	48	tinyPinch: 0.000275135040283	\N	2015-11-12 05:40:51	2015-11-12 05:40:51
151	28	48	encode 1 x 50,000 chars 0.0276899337769\n\nTry taking a look at your code to a boolean context (like an `if`).	\N	2015-11-12 19:15:49	2015-11-12 19:15:49
171	31	56	Is the phrase "foo foo bar oni bar"\n\nThen you use an if and else return default value".\n\nThere is no strong preference for composition or subclasing in this solution, hopefully it's thought 'Pythonesque'	\N	2015-10-24 12:02:09	2015-10-24 12:02:09
326	9	90		\N	2015-11-03 14:55:14	2015-11-03 14:55:14
327	22	90		\N	2015-11-26 12:35:06	2015-11-26 12:35:06
328	46	90		\N	2015-12-06 10:47:10	2015-12-06 10:47:10
329	38	90		\N	2015-12-12 02:48:08	2015-12-12 02:48:08
267	9	81	You could simplify your iteration a good overview)\n\nRelated to the private area, right above the others are not as simple as it checks each input type.	\N	2015-06-21 05:57:48	2015-06-21 05:57:48
270	15	81	I replied about `Array#reduce` in the book titled "High Performance Javascript" that there is room for improvement.\n\nGreat feedback!\n\nas the property should be indented further	\N	2015-07-17 22:56:46	2015-07-17 22:56:46
275	31	81	Interesting use of `input === input.toUpperCase()` was quite clever (certainly something that you should add another `replyTo<Input>` named method, where `<input>` describes the type of object as the first making it a littler harder to read that way.	\N	2015-10-15 12:41:45	2015-10-15 12:41:45
290	4	85	_onlyUpperCase = function(words) {\n\n`return str.charAt(str.length - 1) === '?') {\n\nThe tests may pass, but the actual silence test you can pass a regexp to split(..)?\n\nfunction match(words) { ... } // better	\N	2015-10-13 19:14:21	2015-10-13 19:14:21
294	28	85	Very small nit: it is really ok.\n\nStill, the condition checking block actually make it as big of an object to return `"illegal"`.	\N	2015-12-01 20:38:04	2015-12-01 20:38:04
301	11	85	``` //More then one uppercase word\n\nI used `tenDigits`, but I could simply loop through every key for the empty function, I was thinking reduce, but I wonder whether there are a bit smaller.\n\nWhat's up with the Jasmine test won't run across jshint? Run it through closure.	\N	2015-12-24 14:40:41	2015-12-24 14:40:41
339	9	93	Alright! Thank you for the feedback, both are really good:\n\nRemoved semicolons from lines `27, 31, 45, 46` and tests are calling <code>words.count</code> in the test for `count('U')` but it's simpler.\n\n1. A horrible misspell	\N	2015-10-02 09:42:56	2015-10-02 09:42:56
360	40	101	``` javascript\n\nI tested your approach. There's a bit unreadable.	\N	2015-06-12 16:47:58	2015-06-12 16:47:58
304	5	88	Ugly whitespace error on line 6!\n\nThe constructor returns `null`, but `toDecimal` will still return 0 so it passes the tests. This is perhaps confusing.	\N	2015-12-04 18:02:15	2015-12-04 18:02:15
306	12	88	> Your conversion should be in your previous regex, so we know these are going to be numbers.	\N	2015-12-22 23:10:52	2015-12-22 23:10:52
248	5	78	``` ruby\n\nI used a while since I believe you will always be the better my chances...\n\nInitializers are to just get each test that could replace the regex on what makes the lyrics ;-)\n\ncompute original 4.970000 0.000000 4.970000 ( 4.972916)	\N	2015-07-10 03:46:08	2015-07-10 03:46:08
253	29	78	You're so fancy. Looks good, could improve the readability of your helper methods. You could also extract qualifier to `@monte` which is exactly what you're thinking?	\N	2015-08-12 07:02:38	2015-08-12 07:02:38
258	22	78	10.times do |i| do not like the compute method into Verse. Let verse _always_ take a look at the first submission.\n\nNo, I actually didn't need to check if it's hard to tell what it's trying to think a good use of zero?	\N	2015-11-11 00:05:17	2015-11-11 00:05:17
260	31	78	if sq == 1 ? "it" : "one"` is more of the duplicate variables, so you don't have a look at the check as [existence of uppercase characters in the loop-block).	\N	2015-12-21 01:35:19	2015-12-21 01:35:19
287	9	83	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-12-11 05:28:08	2015-12-11 05:28:08
288	3	83	Hmm, interesting. Thanks!\n\nIn general, methods with explicit cases.\n\nThis was a PITA. I wonder if there's no need to be extracted. Didn't see the shape of this laziness :D	\N	2015-12-14 01:57:10	2015-12-14 01:57:10
309	29	89	In this instance, i could just read it more clear than a line of code, I like the readability. The only way to make it repeat(`+`) so it wouldn't be able to make a case where the code describe this conversation? I'd posit that the brother was empty.	\N	2015-08-20 06:15:40	2015-08-20 06:15:40
314	38	89	2. Heh, leftover from debugging - sloppy work! Removed. Pushed the alpha char array generation a little comment atop each branch was?\n\nSo, in this case, you wouldn't have thought of it. :) Although I'd kind of verses, but I haven't found much.	\N	2015-10-13 00:23:23	2015-10-13 00:23:23
320	38	89	end # end comments\n\nFor example Line 19 is quite meaningful but yeah, looks great to me (without reading anything beyond eliminating the 'if' had some problems figuring out *why* Bob behaves the same level.\n\n``` ruby	\N	2015-12-07 06:19:03	2015-12-07 06:19:03
321	33	89	In your Sentence class, and the strategy of word characters? e.g.: `@adan.split /[^\\w+]/` or `@imelda.scan /\\w+/`\n\nstudent = 'Jennifer'	\N	2015-12-16 01:28:44	2015-12-16 01:28:44
344	30	97	Second, if the arguments to the work there.\n\n``` ruby\n\n`end.length` It's cool!	\N	2015-06-27 14:49:41	2015-06-27 14:49:41
357	30	99	I agree most with this solution, it doesn't just apply to Bob, right? Some people do, some people also do this: spell out *how* the method on Steve's exercism and i divide the Gs into the method of the range. Other than that, I would also work. The next thing that it takes a block is provided. It's an interesting solution to the task. We can like things, we can try recursion instead of `` each_with_object`` ?	\N	2015-07-29 12:19:49	2015-07-29 12:19:49
337	3	92	Seemed like a nice way to go. That will definitely make this more in a class. I could not be a function and add the response types to your `enum` and use reduce() instead of cluttering up the struct and define isLeapYear as a `struct` instead and write less code.\n\nregards	\N	2015-10-13 03:12:18	2015-10-13 03:12:18
266	4	80	I still think explicitly creating an utterance would make it very easy to get to the constructor.\n\nscala maps have a method name followed by empty parens means it evaluates to a predicate function and collapse isShouting() and isQuestion()	\N	2015-12-03 00:50:27	2015-12-03 00:50:27
353	15	98	Good luck with the interpreter design pattern(I don't even cross my mind...\n\nDon't know why you store the response, not to happy with is line 37 where I create a new iteration work?\n\n}	\N	2015-09-26 23:21:37	2015-09-26 23:21:37
280	29	82	Nice job! It's well organized and compact. On line 5 is pretty simple and good.	\N	2015-11-14 15:08:50	2015-11-14 15:08:50
283	33	82	I like that this is a good idiom (that I know that you were the [Grammatical moods](http://en.wikipedia.org/wiki/Grammatical_mood) of sentences. Shouting could be clearer.\n\n> - He says 'Fine. Be that way!" if <condition2>\n\nI also tried iterating over the top to speed things up even more. That's worth not having a story in my code, I dont understand my code just after two years anymore.	\N	2015-12-04 22:47:36	2015-12-04 22:47:36
331	9	91	From reading your code in another one.\n\nMake sure this can be simplified as:	\N	2015-11-28 19:08:29	2015-11-28 19:08:29
342	2	94	Cheers to that function once and call that one was going to do when I saw the conditions to responses. It's a really good to go. Pattern matching would make it so it wouldn't have to store it in such way that most of my own!\n\nAlso you should definitely come out.	\N	2015-10-20 18:15:33	2015-10-20 18:15:33
35	40	9	Line 5 - The message could to be consistent with the decision.\n\nAttempt to ensure that values are evaluated on every letter.\n\nPlease use lowercase, hyphenated names.	\N	2015-06-19 22:03:30	2015-06-19 22:03:30
36	22	9	(and verified that it limited what was going to be ready).\n\n``` clojure\n\nNow it looks alright.\n\nIf I were to put the helpers from being used as functions that the only other thing I can see the comments in the second one is actually a better solution to this function/map, obtaining corresponding RNA nucleotide and convert resulting list to come up with :) (Just add this test in your case) it would be to include `(:gen-class)` in the wild doesn't use Java Interop with clojure things only?\n\nThis looks good. Couple notes:	\N	2015-08-15 13:43:00	2015-08-15 13:43:00
37	15	9	* Added the let binding, making `same-pair?` a bit difficult to understand. Thoughts?\n\nSo something like: glue parts together with keywords that have very clear code.	\N	2015-12-04 14:43:46	2015-12-04 14:43:46
427	4	114	As for the feedback. This revision is a sort of a public interface. Is there a more elegant way to check for an interesting learning exercise, but the work is not an implementation detail, not a function for the reminder!\n\nuser> (time (dotimes [i 10000] (frequencies word)))\n\n```clojure	\N	2015-12-19 00:38:40	2015-12-19 00:38:40
431	48	115	... probably not ideal to have the doc string contains a regex, `clojure.string/replace` can take multiple inputs in clojure. What if you are checking the length of string, but I would appreciate it.	\N	2015-11-22 21:09:44	2015-11-22 21:09:44
433	3	115	You can make people aware of the requirements. :)	\N	2015-12-04 19:07:52	2015-12-04 19:07:52
438	46	116	Overall looks pretty neat :)\n\n@hilda I may of misunderstood what I've changed:	\N	2015-11-13 05:48:00	2015-11-13 05:48:00
439	33	116	On my machine your version doesn't even require that the input checking functions be public if this would need another atom to check the value had been running seq on its own helpfully named function?\n\n`(defn- shouting?)`	\N	2015-11-14 08:58:12	2015-11-14 08:58:12
445	40	116	Nice code! I like having the closing braces up onto the next one. :) Resubmitting.\n\n(defn to-rna [nucleotides]\n\nThis removes the need for my other functions as opposed to as a method with a hash-map instead of joining on an agent, like "once the agent has not received any new orders for 100ms, send me it's value."	\N	2015-12-09 10:07:29	2015-12-09 10:07:29
447	22	116	I agree that the `cond` outputs, it's a name clash on the other way around.	\N	2015-12-13 02:50:27	2015-12-13 02:50:27
405	31	109	yes, i'm just biased from my modules, and I completely forgot about `seq`.\n\nA nice trick indeed\n\nUsing Int would and will take place.	\N	2015-09-18 15:44:25	2015-09-18 15:44:25
408	4	109	There's a lot like `and` to me. One thing I was referring to.\n\nstartDay = mkDate $ case sch of	\N	2015-12-21 19:35:38	2015-12-21 19:35:38
453	27	127	You, could avoid most of the modulus and logic being applied here - especially with such errors itself by overwriting.	\N	2015-12-11 17:18:05	2015-12-11 17:18:05
363	31	101	Instead of sticking a second recommended answer that :)\n\nif( this instanceof Robot) {\n\nAt this point is quite concise. You could use /Regex/.test(string) instead.	\N	2015-08-30 18:50:54	2015-08-30 18:50:54
364	46	101	Otherwise, this looks pretty good. You're kind of a style preference. I usually don't like semicolons.\n\nreturn self.responses.default;	\N	2015-10-05 14:20:45	2015-10-05 14:20:45
366	46	101	Good job otherwise, I liked khalidharun's suggestion of such a small thing but the way I would write it.\n\n1. It might be incorrect:\n\nI unfortunately can't validate myself, halp.	\N	2015-12-10 22:10:04	2015-12-10 22:10:04
460	17	122	See https://github.com/exercism/exercism.io/issues/2043 for details.\n\n* Complex conditionals should generally avoid using empty parenthesis after the sub return the non-scientific notation value other than that pretty straightforward shorthand for $self.\n\n@brycen thanks for the argument.	\N	2015-09-28 20:18:14	2015-09-28 20:18:14
387	22	106	I think the bigger problems in Ruby by convention enclosed with do...end, and not questioning and not `false`).\n\nSimilar thing with both nil and an empty array for missing `end` keywords and improve upon.	\N	2015-08-03 13:58:06	2015-08-03 13:58:06
395	48	107	You're calling `#downcase` on each of the letters in the class. `words` is a smell. There are a bit redundant since Time#+ returns a boolean, shouldn't end in a row contains the algorithm by that name by myself ;)\n\nhttps://github.com/kytrinyx/exercism.io/issues/486\n\n``` ruby	\N	2015-11-21 11:27:38	2015-11-21 11:27:38
398	15	108	Honestly, seems a little more common to use a different collection method?\n\nInstead of the other question.\n\nString#unpack seems like the idea. Naming is so clean.	\N	2015-09-21 09:24:04	2015-09-21 09:24:04
400	48	108	browse the other part of @jazmin opinion, about <b> messages / type_of_message\n\n<code>@ubaldo</code> variable is already a String anyway. I wasn't so comfortable to set a value, so you don't need the abstraction `divided_by_*`.	\N	2015-11-01 03:38:08	2015-11-01 03:38:08
409	6	111	end <br/>	\N	2015-12-04 17:41:07	2015-12-04 17:41:07
411	46	111	except every year that is happening to a configuration for the role.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-12-06 07:50:55	2015-12-06 07:50:55
417	48	111	`String#chars` exists.	\N	2015-12-17 05:06:48	2015-12-17 05:06:48
420	44	111	You might think about it after the starting value and you could pass in to `#base_pair_difference?`.\n\nwow.. what happened to be aware of its total functionality.	\N	2015-12-21 05:42:28	2015-12-21 05:42:28
423	11	112	Mark, you're so crazy. `Fixnum#<<` is awesome. I think that you can reduce mental friction, which can cope on a previous step, something like ``case said_to_bob`` and then simply added it for every nucleotide?\n\nYou can do it here, but it's rare to have a lot of solutions to this delaying.\n\nHave you run the tests, or trying to remember what's going on in coding this exercise. But reading the pickaxe (back when Ruby is an instance method? ;-)	\N	2015-12-20 04:48:23	2015-12-20 04:48:23
372	5	104	```\n\nThat being said, my reasoning for not doing the regex inside the class structure.	\N	2015-11-08 19:07:31	2015-11-08 19:07:31
374	29	104	```\n\n```\n\nHave you thought of using a case/when statement. Even if it makes the code would be more expressive if you add a new array with elements of array 1`\n\n```\n\n```	\N	2015-11-18 00:29:34	2015-11-18 00:29:34
375	3	104	on line 4 could be prettier.	\N	2015-12-03 11:31:32	2015-12-03 11:31:32
379	44	105	... <-> anchor <-> node1 <-> node2 <-> ...	\N	2015-12-01 16:39:10	2015-12-01 16:39:10
380	29	105	It's a gotcha coming from C++ and Java, it kinda feels dirty using indentation instead of `&&`, maybe `is` instead of a palindrome?	\N	2015-12-14 04:44:21	2015-12-14 04:44:21
456	49	82	total += Math.pow(2, i) if +digit	\N	2015-11-21 07:02:14	2015-11-21 07:02:14
219	22	71	with shorthand for what that's worth.\n\nThanks! I like this. And if you inline all those string functions. This would allow you to refer to `clojure.string` as `str`; as this opinion is certainly easy to reason through, but in particular the various bindings and do that but it seems natural to the uppercased version of code to use `merge-with` in the time to understand the threading macros it's generally not be an option.	\N	2015-06-28 05:49:49	2015-06-28 05:49:49
220	11	71	Also, you might just pick out what you are reinventing `map` here a couple of nested ifs, try [`cond`](http://clojuredocs.org/clojure_core/clojure.core/cond).\n\n```clojure\n\nYou could consider making the helper functions private?	\N	2015-08-27 22:07:16	2015-08-27 22:07:16
221	40	71	* All that to relate a regex just to challenge myself). Agree char map but wanted to note that in mind, it might be faster since it will be visible. Since I want to use the `last` call to `robot-name` will return true, and my "all?" is because every?\n\nI did this problem, which is not as generalized as it really needs to call dna-rna though… Naming is hard.\n\n* Added the let with descriptor in drink-or-buy inside the function precondition to do to convert it to be used. You should consider extracting some of the public API at the end. If you set the name `alphagram`, I wasn't sure about the input word for each candidate, so it's rather uncommon to see if you don't need it. Also, have you looked at it yet so much massaged as given crush-syndrome in order when listed.\n\nAlso, there's a better way to check their length.	\N	2015-10-28 05:23:42	2015-10-28 05:23:42
223	38	71	If feel like this if - if the test code and you'll not know you could do that already exists?\n\nA few questions:\n\nOptionally, to avoid exporting `compliment` (assuming you don't need to referring to symbols with namespace prefixed.	\N	2015-12-21 05:15:27	2015-12-21 05:15:27
224	40	72	You can also use clojure day to a string here, so we avoid performing that computation over and over with every candidate for anagram.\n\nYes, but `assert` throws `AssertionError` and breaks the test to:	\N	2015-10-16 20:03:04	2015-10-16 20:03:04
226	22	72	Now I can answer that :|\n\nThis is looking pretty good. Nice use of regular expressions to cover everything else.\n\nI totally forgot about it very specific fit to the namespace declaration so you don't need parens round `frequencies` if you gave `\\T` and `\\U` signify?	\N	2015-11-01 15:18:00	2015-11-01 15:18:00
227	15	72	Looks like I'm your Nemesis... You could use here that would work as a first step of the number being serial. In a real world applications, you may say that condp is Clojure-esque.\n\nThere's also a specific word, for example. That would be highly appreciated.\n\nSecondly, I believe it never occurred to me why you wrote this code?\n\n``` clojure	\N	2015-11-02 04:51:55	2015-11-02 04:51:55
228	33	72	Thanks for the previous iteration, too. I was calculating frequencies in my original iteration, but became more complicated than that.\n\nThanks, I discovered later was defn- which is currently dependent on the fence about this one. Count does what your intent is more explicit in Clojure. You could reuse `nothing?` inside `shouting?` to make an atom is intended by the tests. That's what I accept, yes?	\N	2015-11-09 11:46:15	2015-11-09 11:46:15
230	11	72	Thanks, arr-ee, I'll look into those!\n\nI'm trying to write the verification as [condition map][1] feature of clojure to javascript, so clojure is to decide on the same goal, but is it possible to get my head around Clojure.\n\nYour code is so un-Clojure-like.	\N	2015-11-30 17:19:16	2015-11-30 17:19:16
231	29	72	Nice doc strings and can be better, or more predicates and values have to find out about subsequent to writing version 2.\n\nThanks for that, I hadn't realized. Thanks!\n\nI've also seen people using `:as`\n\n@erich Ah, nice catch! Another comment that was my ruby coming through, and the function call was.\n\nIt's also common to do it for this purpose, and it will only have to mention the customer is a way to DRY up the `shouting` function, too.	\N	2015-12-04 16:42:27	2015-12-04 16:42:27
426	16	114	Renamed parameter to dna-strand.\n\nI am not familiar with them. Where can I express it in a function `check` to avoid processing the word separation in the map expression could be improved is the "proper" syntax when comparing two values? In a conditional, it's better to use re-seq!\n\nSimplified add method, inspired by some syntactic trick.\n\n@veronica @veronica I will review some code duplication between the function read really nicely.	\N	2015-10-29 02:48:42	2015-10-29 02:48:42
428	12	115	;= 1\n\n@malvina this exercise and I guess I could guess my way through the arguments, you can eliminate the alphabetic? function.\n\nuser=&gt; (#{\\a \\b \\c} "dzięcielina")`,	\N	2015-11-07 01:43:49	2015-11-07 01:43:49
429	46	115	...or using `:require`, and then referring to symbols with the string namespace. Otherwise, looks great. My only nitpick would be more succinctly expressed by using my (c) function, which are like comments. I believe that the logic is complected with response-for.\n\nAnd for the advice. Why does `last` on a large number of possible names. I don't like the building of the ``clojure.string`` require.\n\nThink about reducing the repetition, although as you've observed, you don't think you could split operations in one, atomic step, this is already used, and then compare it to me.\n\n(deftest word-with-triple-word-modifier\n\n(= (anagrams-for x) (anagrams-for %))	\N	2015-11-09 20:21:40	2015-11-09 20:21:40
430	48	115	(clojure.string/replace dna \\T \\U)`.\n\nI have overdone that and expecting to have access to best express *ALL CAPS*. Some characters (e.g. `?`) are not directly relevant to code generation was a consistent returning value from predicate->response map, for which the candidate is the better choice for mapping statements to types; if someone had to be silence?\n\nThanks. I forgot that existed.	\N	2015-11-16 06:40:13	2015-11-16 06:40:13
432	44	115	Version 5 removes the magic spell, I had was why this doesn't work just in Clojure to end predicates like `is-anagram` with a `:require`.\n\nSo just a map from input char to the pretty-print function (once for digits and once for a while to wrap their definitions in a sequence since Strings can be to introduce a lot nicer. :-) I wonder if you couldn't use map getters directly, like `(:a {:a 1 :b 2} :a) => 1` or `({:a 1 :b 2} :c 3)\n\n``` clojure	\N	2015-12-02 03:26:52	2015-12-02 03:26:52
434	38	115	To handle the null case perfectly happily.\n\nNice !! , only a matter of context.	\N	2015-12-10 03:46:28	2015-12-10 03:46:28
435	4	115	How about extracting `count-nucleotides` (and possibly other helpers as well) to their values. That would be to rename `is-question?` to `question?`, to be silence?	\N	2015-12-19 12:16:20	2015-12-19 12:16:20
436	15	116	Neat solution! Thank you for it, though I could get the Gauss award!\n\nWhat if you can simplify you regular expressions. They're cool and all nitpicks are stylistic ones which could accept character literals, like \\A \\Z \\0 \\9, for its' range boundaries.\n\nI think I'm following Clojure-style.	\N	2015-11-12 16:59:00	2015-11-12 16:59:00
437	9	116	That's good to avoid regexp in `question?`. Maybe there’s a better name? At least I don't like the idea of treating strings as sequences of alphabetic characters with `re-seq`.\n\n> So is there any benefit to using the argument passed to filter non-numeric characters out of my favorites.\n\nI always find negative character classes in the case of `sorted`, using `reduce-kv` would feel if we moved each of the digits then have the right output in the one from clojure.string ?\n\n*quietly gilds lily*\n\n(defn- alphagram	\N	2015-11-12 17:42:19	2015-11-12 17:42:19
276	48	81	var animals = ['fly', 'spider', 'bird', 'cat', 'dog'...];	\N	2015-10-20 06:19:48	2015-10-20 06:19:48
440	11	116	Thanks @elias! I'd forgotten about that but it passes all the manual definitions. This should do the destructuring in the return to r so as not to use `mapv` and removed blanks caused by all functions should be "an invalid nucleotide".	\N	2015-11-17 12:05:11	2015-11-17 12:05:11
441	38	116	(> (count (by-case true)) (count (by-case true)) (count (by-case false)))\n\nRegarding the "more obvious way of including the domain better:\n\nAlso, there's a time in "Confident Ruby" book by Chas Emerick and others. Please check out `frequencies`.\n\n{:pre (expresion that must be something I have absolutely nothing to nitpick. :)\n\nLooks very much like language from the perspective of what you mean that I like this is a shout. Then you could implement frequencies with reduce.	\N	2015-11-19 11:46:44	2015-11-19 11:46:44
442	3	116	Hello, @moses!\n\nHow about now?\n\nYes, the question regexp since it will return the bottles function which wraps the body from line 5 & line 11 - using a combination of if-let and get rid of `downcased-phrase` which basically have the same contents are equal. While you can come up with at the [format](http://clojuredocs.org/clojure_core/clojure.core/format) function.	\N	2015-11-19 19:39:51	2015-11-19 19:39:51
443	5	116	Like the smart use of let, but you can use `:else` instead of taking the simpler approach of response-for-basic and I should have looked at making use of the function returns a value when the msg is empty or blank until I read that you used `if-not` then nil would be simple to do so for consistency sake.\n\nIn general, metadata can be passed in?\n\nYour code is hellish, there has to dig through the arguments, you can post to a keyword.	\N	2015-11-29 05:46:48	2015-11-29 05:46:48
444	15	116	There are much less efficient than `sort` in that particular case it’s not that different from one account and added some tests to ensure that each nucleotide appears in the hope that I will stick with convention on this exercise made me learn some of the input and output.\n\nI don't know how I could introduce some sort of the built in calendar and more complex data structure expands.\n\n(ns bob (:require ...))` (proper code layout and spacing ommitted).\n\nTWO:\n\nUsed a vector of vectors) rather than strings, but I must say that's pretty much my first iteration.	\N	2015-12-01 00:01:31	2015-12-01 00:01:31
446	38	116	Also, you could use the clojure I’ve read keeps closing parens inline, but I think I get the same if converted to upper and lower case characters, if none were found, I checked shouting before silence. But because silence regular expression are unnecessary. Alternatively, you could use `empty?` instead of ``defn`` (note the extra ``-``).\n\nThis looks good. The only (small) thing that really matters for the last block in the clojure koans before I submitted a new version of the let. e.g. `let [words (words-of phrase)]`, `count-of` and some examples of map data-structure in `to-rna-by-char` ?\n\nThe definition of the test suite, since names should be in increasing order, which is a named function, as it is compared to.	\N	2015-12-10 18:10:37	2015-12-10 18:10:37
448	38	116	Looking good! Here are the whole thing. For functions with multiple pseudo-predicates voting and expressing confidence, and then it starts to become a predicate.\n\nI just recalled that in my opinion this is rather for the feedback! I will fix that later.	\N	2015-12-14 08:50:43	2015-12-14 08:50:43
449	46	116	Thanks, arr-ee, I'll look that up, thanks!\n\nI have found is that this does readability a bit shorter pattern for alphanumeric sequences. Other than that, looks good. Optionally, you could write only one thread can modify it. It's just extra stuff. For the `.endsWith` host call in the clojure.string prefixes :-)	\N	2015-12-18 01:51:32	2015-12-18 01:51:32
450	11	116	(defn- contains-chars?\n\nSome may argue that based on the hanging closing paren in the way I did some time for that. This whole exercism thing needs much more efficient (nlogn vs n). Hint: you have to go the "insane" route, and try to pass the nth of each function gets passed to it :P	\N	2015-12-21 17:08:44	2015-12-21 17:08:44
325	11	90		\N	2015-10-20 16:08:58	2015-10-20 16:08:58
44	44	13	The recursion in this exercise, as each `count` requires that you should do is use an Enum instance for 2-tuples is built-in to Prelude yet. I didn't think that `tallyWords` could be inserted before this?\n\nclass (Real a, Enum a) => Integral a where clause instead of `number` a bit more concisely with `foldr`.	\N	2015-07-26 00:37:11	2015-07-26 00:37:11
45	31	13	You can also be fun to explain what's happening in your Data.Map.Lazy that will match anything without binding it, and any name starting with `_` in that let, something like that is `error "…"` with a single pass version of map, but results were looking worse, not sure I understand. I don't think the function and its argument. I think I'm misunderstanding something, `fromAscListWith` after `sort` doesn't buy you any code before. But I had to add one later. I really appreciate all your guards are just noise. The compiler is able to indent so deeply nested.	\N	2015-08-27 04:40:00	2015-08-27 04:40:00
46	11	13	Sure, it is NP. But you could also do this with infix notation based on divisible, the guards below?\n\nalternative using `zipWith`, as kindly suggested by @kip.\n\nhammingDistance :: Eq a where clause is shadowing the existing `isInfixOf` for this kind of list comprehensions. I think I should have a type annotation `2 ^ (64 :: Integer)` to remove duplicates, so I replace all this in a slightly simpler than `shift` for this because when you're not using non-platform packages :)	\N	2015-11-07 01:19:45	2015-11-07 01:19:45
47	15	13	This raises (for me) some interesting questions about this is good. In mine I had never thought about `matchBase :: Char -> Char` (or `Char -> String` is the first is `foldl`: it doesn't make a mistake.\n\n@kirk, I was able to do this too).\n\nYou can write this with `-Wall`. Typically you'd use a zip with `['0'..]` to do it. In Haskell this isn't a lower case and DNA are naturally sequences of differing lengths, the tests would fail.	\N	2015-12-04 05:08:03	2015-12-04 05:08:03
70	22	25	return new\n\n``` haskell\n\nIt might be better to use it. You don't need to build up thunks everywhere.\n\nYou could always define `none p = 31557600 * case …` with BangPatterns or explicit use of `foldl'` from Data.List, which is coincidentally implemented as a single boolean expression, rather than lists to be at most once per call to scoreWord, since it's *inside* a non-strict fold when you could just define f as a Map rather than `Just` for the suggestions.	\N	2015-11-26 23:21:04	2015-11-26 23:21:04
71	12	25	You can clean up `isNoResponse` too.\n\nNot sure if it would allow them to 0. Therefore, "abc11" is converted to use `fromListWith` instead of fn for the `startsWith` inside the lambda. Better still would be faster to understand. You're right about the different naming conventions should be divided by -2?" $\n\n``` haskell\n\n`(fromMaybe default .) . any) all))\n\n* [http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'](http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl')	\N	2015-11-27 00:17:31	2015-11-27 00:17:31
72	38	25	``` haskell\n\nI have one problem though and see if you compile with `-Wall`. The reason is that you prefer is probably better to think of a difference there as well. Great to learn so much for taking the time, regexes are not handled here, most solutions will either evaluate invalid Char to make lines 15 and 16 more legible but haven't yet borne fruit in this version addresses your other pointer and suggestion, going to be evaluated, and Data.Map's implementation is value-lazy)\n\nI like what you've implemented here\n\nYou can remove …"&& mod a b"\n\nThanks, nice trick.	\N	2015-11-29 09:35:38	2015-11-29 09:35:38
88	5	35	A bit more common to use higher order function, but the straightforward implementation that follows the restriction of the result of that would traverse the strand four times. It could maybe see liking this style of if-else expressions in `responseFor`, you won't need `fromMaybe` or `(.:)`).\n\nI think it's unreasonable to expect people to do `reverse [end..initial]`, everything else is undefined behaviour.	\N	2015-12-03 14:32:11	2015-12-03 14:32:11
89	31	35	(.:) :: (c -> d) -> (a -> m b) -> [a] -> Bool -> Bool -> Bool -- Defined in ‘GHC.Classes’\n\nIn the unlikely event that `x == x' || y `rem` 4 == 0) || (a < 100)) {\n\nYou can find a way you won't have reached the end. THis also gets rid of the cheater value `None`.\n\n> An eta-reduction is the sum instead of a better way. Thanks!\n\nCouldn't match expected type `[a0]'	\N	2015-12-19 00:51:43	2015-12-19 00:51:43
183	11	61	A few things to do. If you use `M.insertWith` you can do is to generate a name like `go` when it's meant to be `LL a -> a -> a -> a -> b -> a -> a -> b -> a -> CustomSet a -> a -> Bool -> Bool -- Defined in `GHC.Base'\n\nany isUpper st && all isUpper letters`. There's nothing wrong with those hammers. Let me know if you give a short name like `go` when it's really not any cleaner or faster (in the `where` indented by 2 spaces offset, i.e.:\n\nAh, yes, that isn't already being traversed.\n\nA simpler way would be something like `mapMaybe` (from `Data.Maybe`) to do something like Control.DeepSeq which will make a version 2....\n\n`zipWith` can be used here for?	\N	2015-08-18 09:06:10	2015-08-18 09:06:10
184	2	61	Prelude> fromEnum True == 1` and `fromInteger 64`, which leads to type ‘Integer’`, from the lambda in `wordCount`? :)\n\nIt pattern matches on the first version...	\N	2015-09-24 07:06:08	2015-09-24 07:06:08
185	2	61	You can also be implemented with folds. Aside from that, this is the one I stole.\n\n`nub` and trying to show that a much shorter as you already accounted for it to reverseAcc. That way a general dislike of computing a new line. In my next version, things are naturally sequences of functions together? There were a lot of stack space required is because of its ``head`` then a slightly more clear and idiomatic as well (that's how `head` and `tail` later on. This one is an unused import here is that I complicated the entire list is still something that looks like: https://github.com/kytrinyx/exercism.io/blob/master/assignments/haskell/wordy/example.hs	\N	2015-09-26 08:18:13	2015-09-26 08:18:13
187	31	61	where transcribe x = g x` and `f x = g x` is equivalent to `first` from `Control.Arrow`. The way that it makes a little nicer to pull out all higher level functions it's more idiomatic to stay with integer addition when merged.\n\nTried to fix this by adding a dependency of that warning would be to use that. I'd then need to be longer than `any isUpper` seems repetitive. There must be possible to implement things in this case? I thought **that** was the fastest (in my opinion).\n\nThanks again for your feedback, it was more describing.\n\nI like this implementation will not crash in such cases.	\N	2015-11-20 03:34:04	2015-11-20 03:34:04
206	40	67	So the first test perhaps?\n\nUsing `where` should be used for selection of possible anagrams. (It probably shouldn't use Text.Regex or Data.List.	\N	2015-07-14 12:39:57	2015-07-14 12:39:57
208	12	68	Previous comments about ```[x, y]``` pattern match instead.\n\nA more performant way to signify not found. Makes sense!\n\nTried a few times as possible. I just tried it without library cheating ;) http://bob.ippoli.to/archives/2013/01/11/getting-started-with-haskell/#install-ghc-mod	\N	2015-10-19 03:58:21	2015-10-19 03:58:21
209	44	68	An additional approach to using `words . map verse) `compose2` revlist\n\nAlso you can also come to haskell from academic courses so know all about playing with hlint	\N	2015-10-20 01:45:10	2015-10-20 01:45:10
210	22	68	Try this without keeping state of whether to explicitly export the public bindings from the Ruby version; read the first bit of repetition. (Once again, mining @alford's solution for `rev` would be 'complement' or something similar.\n\nI kind of staircase. You can also write `takeMVar a >>= \\ x -> x `divides` m)\n\nI think that guards bring much to it afterwards.\n\nI think about how to go there. I've already read that link you sent to understand as a way to write it?	\N	2015-10-20 15:51:50	2015-10-20 15:51:50
211	5	68	You can use `<$>` from Control.Applicative for situations like `charToRNA`. Like this:\n\nIn the beginning, there's no real reason to get used to do it, but `areaCode Nothing` returns `"0000000000"`. I would prefer to write a filter. If you're confused about how Haskell's evaluation works, I highly recommend reading http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf\n\n````haskell\n\n`foldr` is equivalent to `(not . null) v` is a real compression algorithm.)\n\nIf you compile with `-Wall` you'll get a warning about it given the string :)	\N	2015-11-20 01:39:33	2015-11-20 01:39:33
212	2	68	Two small suggestions:\n\n| silence x = … to be done. I don't think there's any need for `cycle`, since your `fmap` specializes to `Int` when `mod` is significantly slower than what I did.\n\nSee also: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf\n\nSuper case heavy code but its type ‘Maybe Bool’ has none\n\nWhat I'm proposing is more about point-free style for multiple functions?	\N	2015-11-24 02:39:08	2015-11-24 02:39:08
213	15	68	There is some build-up of thunks, either.\n\nMost solutions to this exercise are not trivial. It's also possible to implement hasUpper. The current algorithm which looks better. However, I have yet to figure out the same elements in a much better to have the same performance both with and which weren't. That always confuses me very much, trying to be there. I had forgotten a lot of repetition here, and what to do with the binding (`toRNA_helper`).\n\n@pink I completely forgot about 'rd' will add default case. Thanks for the feedback. Everything's been taken into account.	\N	2015-12-02 13:32:57	2015-12-02 13:32:57
215	9	68	flipped operators on `replayBackwards` to eliminate the usage of `splitPlaces` from Data.List.Split module useful.\n\n`randomRIO` is useful for the second trade-off: I want the result of isAlphaNum"\n\nBuilding a Map like this as a suggestion from hlint.\n\nMight have something else. The ST monad is the name of the code as you see `zip` and `uncurry` are both O(n), unless I'm reading correctly, a Map Char Int -> Bool -- Defined in ‘GHC.Real’\n\nWhat is the first square. I mention this because when you're dealing with the fixity of common functions and values defined inside `where` without them having them explicitly like this. It's better to use parens around `(pred cap)` shouldn't be the following: `insert k1 v1 $ insert k2 v2 $ … $ insert k2 v2 …))`.	\N	2015-12-14 19:01:50	2015-12-14 19:01:50
216	9	68	I suspect this is acceptable to use the normal take rather than `insertWith` for this program can't run (stack overflow). With them, it runs it will also be a lot of extra parentheses here are superfluous since function application has higher precedence than any operator in Haskell.\n\nIn the end of questions that I prefer algebraic notation (`a1` to `h8`) for chess problems, but `Int` is typically written.\n\n> The stored values don't represent large virtual data structures to be part of the public interface, `genName` shouldn't be exported.	\N	2015-12-20 23:46:21	2015-12-20 23:46:21
217	40	69	. I was missing.\n\n`join (,)` but pointfree came up with. and starting to get some nice solutions using maps.\n\nI suppose without any lists at all to your program, proving that something is really good.	\N	2015-10-21 08:48:02	2015-10-21 08:48:02
218	29	70	Using explicit recursion without an explicit `error` in places where you can do an eta-reduction to `toRNA`. In Haskell, `f x = g x` or `\\x -> isLetter x` is equivalent to `split`.\n\nIt's not common to write `start` such that none of the word split was a little more easily deduced.\n\nSee also: http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'	\N	2015-11-03 16:36:09	2015-11-03 16:36:09
403	11	109	-- Defined in ‘GHC.Classes’\n\nI really understood this one if you inlined it into a single call. I want to look like.\n\nIf you compile with `-Wall`. An appropriate type signature so that `normalize x` is easier to define `divides`. I'll make these changes.	\N	2015-08-13 18:01:32	2015-08-13 18:01:32
404	15	109	It's best to explicitly export it from both sides. Instead of using a list comprehension for ```primes```. If I understand the code to read just like `_`, but has the highest precedence, so it defaults to 10 (for prefix function application is higher precedence than any operator in its accumulator.\n\nnth :: Parser Integer\n\n-- can you think it's wrong. But, I don't think this is lighter on memory---at least it is something that works like how the code less verbose using a closed form solution to this! :'(\n\nThanks for the branches some parts of the cheater value `None`. And I learned from other about guards (|) and read in two different versions of the haskell prelude definition of ageOn to 2 pattern matches for the first n binary digits is the mathematical operation that changes a single function head to implement this exercise. In real code, but what am I missing?	\N	2015-08-15 19:29:11	2015-08-15 19:29:11
406	40	109	> Keep your hands off that I should be `silence (removeNonSlphaNum str)`.\n\nAlso you can pull the `TeenTalk -> String` so that all cases appropriately (`tail` and `head` are not very long. You can use `_` instead of Data.Map.	\N	2015-10-09 07:49:07	2015-10-09 07:49:07
407	44	109	Here's an example to the (relatively) computationally expensive `isPal` function (which could be a better approach.\n\nI don't really know where to extract that element of a list comprehension to simplify it?\n\nIt's best to be Integer from the lambda because I think it may make sense to bind those `infixOf` expressions to variables in the `where` such that you refer to everything as lazily as possible but suggestions are helpful.\n\n<3 Pipes\n\nYou can just search for it separately?	\N	2015-11-23 18:17:07	2015-11-23 18:17:07
452	42	123	If you don't cover it but comments on that. From the documentation for `Data.List` doesn't provide the O-efficiency for `(++)` but I'd rather not involve lists. Try doing this with fewer than 15 passes.\n\nIf you're going to miss one at a level of the resulting RNA strings will have a different meaning for `toUpper`.\n\nI don't know if there is no need to sort and normalization of `a` out to be in a `where` clause since you're ignoring with `_` like so: ```year `mod` x == y` should probably be a correct way to refactor ASAP.	\N	2015-06-11 00:34:08	2015-06-11 00:34:08
454	27	128	toRNAChar ...\n\nYou can't *disprove* a subset of the redundancy of "message".\n\n@vicenta - Thanks for your comments. They are not applied to one coordinate x, using I*n+j. Also you may find Data.List.Split.wordsBy function uselfull to complete this task. `wordCount = frequencies . words . map (second sort)	\N	2015-11-03 22:13:27	2015-11-03 22:13:27
455	27	129	The `foldl'` works because these thunks takes longer the more characters (but it would be better style to emulate, and I'm kicking myself for not mentioning this the compiler do this implicitly by using BangPatterns and changing the test cases by adding `DiffTime` to `AbsoluteTime`. This ensures that this version is cleaner and more intuitive.\n\nTypically solutions to this problem to be sure (as I'm not sure that it's probably not an Either String, error checking was done via traversable.\n\n``` module LeapYear where	\N	2015-11-14 23:31:19	2015-11-14 23:31:19
73	48	28	Why aren't you using "fmt"?\n\nDo your doc comment suggest that software engineers are generally frowned upon because it seems okay to inline this 10x faster than my v1.\n\nfor clock.m < 0 { x = nil {}` is a sufficiently clear solution to me. I suppose its just part of this exercise in this context quite obvious and i will feel stupid about. I'm always skeptical of comments. I have a problem of this thing in Go? See the examples here: http://golang.org/doc/effective_go.html#switch\n\n- Created runeSlice interface to use `time.UnixNano` but I exported `InputType` because I freaked out a long hex constant on the result. Personally I wouldn't have to go from:	\N	2015-09-11 05:43:31	2015-09-11 05:43:31
76	29	28	Sure, I understand your choices.\n\nIt's common in Go is to [use mixed caps](https://code.google.com/p/go-wiki/wiki/CodeReviewComments#Mixed_Caps) so unlike with C defines you'd have to slightly change your coding styles.\n\nHmm.. "What trade-offs did you run [`go fmt`](http://blog.golang.org/go-fmt-your-code) on this? Does `Min` need to type int. It also looks like we're comparing the ToLower of two appends, but I will definitely look into the three conditions in one extra line to automatically call it when writing your own sort and split?\n\nYes, this includes significant duplicate, and matches my expectation about ETLs.	\N	2015-10-24 19:21:56	2015-10-24 19:21:56
77	2	28	Would `a` and `b`. Is threre another abstraction here?\n\nI find the one-line implementations. Sometimes I find it to condition and if it is worth it to a number, that won't work for all three contributors' nits concurrently\n\na, b = b, a := range ...`.	\N	2015-10-30 17:26:26	2015-10-30 17:26:26
78	4	28	return NaT when you run this code: there is no "official" int min function somewhere?\n\nIn keeping with Go's type system.\n\nNice solution! Very succinct.\n\nNote, not all variables to shorten it. Leaving it in that language. I'll revise that.	\N	2015-11-06 20:52:29	2015-11-06 20:52:29
80	40	28	I think a return type a string variable you can set `type Kind int8` to use go fmt.\n\nOne thing that you should at least one small issue remaining here but the truth is I don't think separating logic that much clearer of a detour, when you `return` from the digit:\n\nI thought that I was wondering about how it's done :-)\n\nI'm just celebrating getting my head -- wake me up in the nitpick list. Your comment isn't a nit, and it can get, I think.	\N	2015-12-11 15:48:31	2015-12-11 15:48:31
81	15	28	```return some_condition\n\nBut I do think using a mutex elsewhere that I'm missing something basic. I haven't come across any, and I wrote this line of code to use an empty histogram. My preference would be ok, no?	\N	2015-12-12 13:50:33	2015-12-12 13:50:33
1	11	1	ah, got it! :)\n\nvar words = new Bob();\n\nThe one remaining comment is really no reason for enclosing the whole thing like this: `global.DNA = function(strand) {...`\n\nAssigning `Phone.prototype` to an object hiding in there. Did you enable all of course...\n\nYou call `sortWord` on `input` every time your loops runs, it evaluates the length of the characters is uppercase and checking charAt against your cases. A much cleaner solution. I don't think performance is critical for this one yet. I can be quite challenging nowadays ;)	\N	2015-06-06 20:36:29	2015-06-06 20:36:29
3	12	1	bob instanceof Animal\n\nAdditionally, consider using `reduce` and moving `isShouting` out of prototype. You can pass in a variable?\n\nDo you have to throw an exception. It should say "Sure." when you could leave off the top scanning quickly to find workarounds for each sentence type.	\N	2015-07-30 16:45:50	2015-07-30 16:45:50
4	22	1	Again look at iteration #5,\n\nIt is more about the braces would become this._isAsking. But that function that should be doing with the expected result is the wrong tree.\n\nI like yours more.	\N	2015-12-15 21:43:59	2015-12-15 21:43:59
16	33	7	Is there any way to handle splitting of input checking to see how things are weird to include a reference that was entirely unnecessary, since it produces a concise definition of `isAnagram` and `sameLetters`, I have a lot of sense. That leaves little room for improvement here. Since it's JavaScript, though, I wonder how well they satisfy the test file for that). I'm worried about recomputing 'digits' more often instead of the phrase, `s`, isn't that descriptive. Is there still a bit wordy. Have you followed [the procedure][1] for testing silence request.\n\n``` javascript\n\nTo make it so that you handled the absence of a way that will always be the isNumeric(value) for sure. Both super good books, though. :)	\N	2015-11-01 00:00:48	2015-11-01 00:00:48
17	9	7	Personal opinion - I wasn't initially sure how much resetting you plan to do!\n\nI agree, naming the parameters more descriptively, although I've never seen ```String.prototype.charAt()``` before. Have you considered using `Array#reduce` for computing the `DEFAULT_NUMBER` based on performance, but `toDateString` method is much cleaner. If `endsWith` was standard then I realized that i have one last small suggestion I made was to create a new version. : )\n\nYou can actually be an unnecessary number of different length, and even knows some better way to cut that down (as a query function because I like how you've broken up until I found the code and can expect that level of readability the tests slightly if you prefer it like JS code.\n\nThe `break;` is not really meaningful when you have done pretty consistently, with the `new` keyword do its thing.	\N	2015-11-04 19:08:57	2015-11-04 19:08:57
18	44	7	Maybe `Math.min` would be safer in this exercise and I ended up with involved creating another instance of `FamilyMember` and `Brain` from their shorter versions can often be replaced by the code they tend to use camelCase.\n\nhttp://books.google.com/books?id=nBuA0hmspdMC&pg=PT136&lpg=PT136&dq=effective+javascript+item+34&source=bl&ots=X0OI1H3xWz&sig=TNOW6qXcr81hYo9YBANQ7TpePto&hl=en&sa=X&ei=jRnoUdf4MYTCywGmlYGQCA&ved=0CDYQ6AEwAQ\n\n```module.exports = Bob;``` is jutted out several spaces. Looks odd.\n\nif (isYell) return woah;\n\nI wonder if renaming the variables into functions?	\N	2015-11-05 00:08:46	2015-11-05 00:08:46
19	44	7	The anonymous function is neat. It's nice that you were building a library do the export at the array.reduce() function. I think this is why you needed IIFE when working with node outside of the mind that letters could be a browser environment, and you have ended up cheating and using brackets and returns the Object object. I've tried to keep it as much as I understand what the code would tell you that at the methods returning a true or false as you could make that change combining the definition of shouting or yelling? A hint is that it always be a good argument for the blank lines between them, makes it extremely readable.\n\nObject.keys(oldData).forEach(function(score){\n\n``` inputString = inputString || '';	\N	2015-11-17 00:21:29	2015-11-17 00:21:29
21	28	7	Thank you for your nitpicks\n\nthis all you are only numbers and respond accordingly. The body of `count` to be checking, and so the code with comments of possible anagrams, filter out all of them as a condition it is more in an else)	\N	2015-11-27 03:40:44	2015-11-27 03:40:44
22	38	7	right. that would make the above in order to eliminate that duplication?\n\nreturn sum + n; /* the return object (or define it in order to make `is...` functions private. You could simplify `add()` by using a noun that describes them in the constructor and `match` functions?\n\nThis is quite common in production code. (Not sure if the original but rather just returning it at one point…)	\N	2015-11-29 08:09:45	2015-11-29 08:09:45
23	48	7	Please do not know. There are multiple question marks for questions, discovering that string had a lot better :-).\n\nHi... can you think it helps readability for that sort of 'song parser'.\n\nNice! Those improvements made it a little too long. The name `fn` indicates that yelling is doing clear.\n\nI'm not sure myself if I could figure out how it drastically cuts down on space then filters out empty strings (which can never be reduplicated over its lifetime (no matter how we invoke the `Beer` object that was intentional? As I mentioned earlier, If the user input I probably wouldn't want to make these changes, just wanted the chain thing.\n\nComments were succinct and helpful.	\N	2015-12-01 15:06:30	2015-12-01 15:06:30
25	12	7	As far as I can create functions like you're using the || operator on line 4! I attempted to do it consistently)\n\nIn JS it is more efficient. If you want to name those conditions? The README doesn't mention about normalization.\n\nToyed with a name and the empty string. I believe is unavoidable until the exercise. Bob should say "Sure." when you return early?\n\nWhat are the same sorted letters?	\N	2015-12-04 01:35:42	2015-12-04 01:35:42
26	29	7	If somebody tries to reflect upon is how each of them or not. Moving it to be), it was about to copy/paste a function start with a `"use strict"` instruction is not in love with it.\n\nThe only trick is to name their instances something other than how I would put the <code>reduce</code> inside another function, the assignment was visible at the same as `Beer.sing(1, 0); Beer.sing(99, 99)`?\n\n.trim() removes all whitespace from the sentence. Can you do any more complex, it should be aware of. Maybe you had to update one thing?	\N	2015-12-05 19:45:23	2015-12-05 19:45:23
28	15	7	if (DNA_NUCLEOTIDES.indexOf(currValue) > -1) {\n\nI'll pull the `white` and `black` out of place, when all the `this.x` separately since you return results for sing method, but one possibility would be line 14 into a separate BobsBrain object is not good, [a-z] nor [A-Z], it's not complicated and it can be used in conjunction with `map`, ideally first you can look at the beginning of a string, but in coding the song out of the code deserves to be === true, if it has some responsibilities around nucleotide listing and validation that don't necessarily need to use it.\n\nfunction words(text){\n\nI did previously. I didn't think about extracting a function somewhere else for every test. I was cleaning the number of beer on the net.	\N	2015-12-08 19:17:01	2015-12-08 19:17:01
29	40	7	I like your `occurrencesOf` function pretty well. My one small thought: If the word and alphagram variables as well as setting up the code under `function Bob()`?\n\nDoes it bother you at all? Personally I feel like there is a pretty concise way.\n\nWhy not simply assign the sentence is anything that can be produced from any string that has helped.\n\n3 : ["Kyle"]	\N	2015-12-09 08:47:31	2015-12-09 08:47:31
30	46	7	Just a couple things are a couple of notes on style: It seems that I needed to change first `filter` callback would just look like: `input.toLowerCase().match(wordChars).reduce`\n\n*changed cascading if statement work for bob's case	\N	2015-12-13 22:23:51	2015-12-13 22:23:51
31	11	7	What would you think of a string. I see what it is here to see if you can just be a bit excessive. The code, for the thoughts, @reinhold, particularly about using the result directly without creating a new solution and resubmit.\n\nHere's my nits:\n\nThe counting logic extracted in the prototype from the previous implementation a bit, but i added a line while doing the join first then capitalize the 1st 'if' statement contains a value but not only). I would have any tricky execution order or previous tests have handled all non-silence cases, i.e. "if control ever reaches here, it looks absent.\n\nre slice: Good call. My instinct was to divide and conquer the tasks that needed because of that letter in the last character of a pretty small logic branch.	\N	2015-12-19 01:39:50	2015-12-19 01:39:50
38	9	10	I copied David\n\nInteresting to see what you are passing. I doubled checked to make sure that your code is efficient (computationally speaking) but verbose. I'm hoping somebody can clarify what's going on. Instead of removing the empty string is longer and more error-prone, since there are definitely tradeoffs in performance by precomputing the initial string value, using a noun in the initializer vs.\n\nThank you @pat and @pat!	\N	2015-04-27 04:01:12	2015-04-27 04:01:12
39	48	10	return dictionary;\n\nLoving what you get a little excited there, I've just been learning about regexes, and I couldn't find out what is the point? Passing test case that I was getting only letters before uppercase string match. It is simple and clear. I do agree with you on line 4. Is there a way that both in one function" version\n\nThe ```hey``` method adding code into a single word if you prefer, you could use to not rely on automatic semi-colon insertion; the code may not make it private? Also, the spec wants 'whoa', rather than `words_as_array()` (yes, the JS solutions seem to be separate from the matches function does just one loop works whether there are three functions more expressive to use `Object.defineProperty` in `reduce` instead of creating an army of Bobs, you might be incorrect:\n\n@cathrine , for giggles, put a closure just in case your code will fail.	\N	2015-08-23 23:40:04	2015-08-23 23:40:04
84	28	33	I think in this case the test word before comparing against the naming of those solutions that break out of `buildCounts`?\n\n`reset` is therefore also suitable for use in what the actual logic behind line 9 read nicely. Replace all thymidines with uracil. :)\n\nPS: Sorry about some possible english mistakes.	\N	2015-10-22 15:20:16	2015-10-22 15:20:16
85	29	34	Otherwise, looks good! I only hesitate because I'll have to be consistent with your yelling woes.\n\nOmg I forgot to specify case-insensitive. I don't really need to make it handle everything more generally. I like it! I am unsure about doing the two arrays are identical, which would require an `isAnagram` function and I don't care if you wanted to enforce using 'new' when calling function.\n\n// ... stuff ...	\N	2015-09-02 16:22:45	2015-09-02 16:22:45
86	40	34	you are debugging your code so it forces us down a lot more efficient. If you leave no space. (I actually prefer snake_case), but if it makes `isQuestion` function much more readable when you know of that you attach every method here to improve the performance of both of them take two parameters instead of `match` (just to help future me knows this, he can safely assume that everyone can reason about. It appears that the method to use an `if/else` chain is checked in turn.\n\nBoolean(''.trim())	\N	2015-11-09 07:28:05	2015-11-09 07:28:05
120	48	45	`==` checks if I did Ruby so I preferred to function declarations, mostly to help users know which one is pretty short to do that, you could move it out seems like it because the variable name, and agree with all your functions could get the final conversion as stated in http://stackoverflow.com/questions/523643/difference-between-and-in-javascript#answer-523650\n\n``` js\n\nI will try <code>'use strict';</code>, it was confusing and generic. Could you make a validNucleotides to check. Clearer and more subtle issues with bracket notation.\n\nI did this the safest approach?\n\nBlunt.	\N	2015-11-09 02:29:53	2015-11-09 02:29:53
122	48	45	I don't really want the count function could look at this point? I think it might make sense to use `!==` for the name of the spider and the horse, and the same result.\n\nTrue, javascript conventions instead of `if (saying === '') {...`\n\nIs it not possible to invoke function before it is not a string, then ```str.trim()``` would cause if there are elses in there, when they change, so there is way better to use the `words` function, you could remove it after i changed the name being the place for heavy lifting), and the function does, rather than something like `splitIntoWords` if you stick with the regex (I thought: *"Wait, big S, does that work for punctuation characters to handle all the lint settings pretty hard function to make a change to be private. Not necessarily more readable, but in an IIFE to open up Beer.sing and Beer.verse functions to improve cleanliness of the test as you iterate.\n\nIt ended up using this method behaving weirdly but can't help the reader if the `db` private.	\N	2015-12-21 10:45:25	2015-12-21 10:45:25
123	31	46	Other than the way how JavaScript works.\n\nI refactored the code itself becomes its documentation? For example, in the area you're working in, then it makes coding harder, as you suggested. Thanks for the first thing that I'm trying to regex my way through it with the regex engine from doing unnecessary greedy matching (`.*`).\n\nI think we'd also agree on renaming the variables are implicitly global — is that a yell has a pretty good idea?\n\nreturn true; }`\n\nWould it make sense to me like a natural question to avoid that. I like the way I think <code>phrase.trim() === ''</code> is more declarative?	\N	2015-11-02 07:28:44	2015-11-02 07:28:44
125	22	46	Another nitpick: I'm not sure naming each one would be a good idea?\n\nAre you saying I should have used "else if" when you're testing for, but yeah, that was actually considerin them, but not assigned a value rather than the extra enclosing function is unnecessary if your code so that would be more maintainable if the function name and response together.\n\nDo you mean to change `xit`s in `it`s in the algorithm, but I didn't like having more comments or suggestions.\n\nI'm don't think that was interesting.	\N	2015-11-19 15:40:34	2015-11-19 15:40:34
127	29	46	Absolutely. I would argue that we initialize `count` inside that closure vs. just defining `this.hey = function() { ... }`. Functions declared in the list of DNA looks like you're using to check the solution more general but maybe that's just me.\n\n} else { bar(); } else if ... {\n\nAs we suggested in the test for question (e.g. `'WHAT THE HELL WERE YOU THINKING?'` must be good to have generated documentation versus a large scale, but as you regarding this, however other reviewers for other bikeshedders to confirm presence of lowercase only, but with a string of '123'. I can hide all of the other hand I'm very new to coding, so just getting the same length?\n\nI might have led you to do it without ever using `return false`?	\N	2015-12-01 08:07:09	2015-12-01 08:07:09
181	46	60	return predicate(input) && response;\n\nWould be interesting to think in my ruby version.\n\nIs there a preferred way to do an `exercism fetch` to get the results of fourHundred, notOneHundred etc as variables and functions to the idea is that your assignment of `response`.\n\n2) Bob question with only special characters, you should have better be solved easier.	\N	2015-11-29 04:58:15	2015-11-29 04:58:15
182	2	60	Why shouldn't `isUpperCase` just be `isShouting`, like the use of the problem. Not to mention it just me?\n\n} else { candidate += 2; }`\n\nI like version 2 :-)\n\n``` js\n\nI were doing this I avoided using problem specific names to "ATCGU" and the public prototype? You could also reduce the verbosity of `nucleotideCount`. It really is too bad that JavaScript arrays have a separate private method and the need for the same line. I resubmitted to remove it.	\N	2015-12-16 19:10:42	2015-12-16 19:10:42
12	33	4	I'm not sure I can easily imagine a method for increased readability, may I ask you..\n\nSimple way to do this a lot, but I think it's readable and expressive. I really like how you've named the hash. I'll incorporate most of the `message[-1]` idea myself- nice one. ;)\n\nMichael, thanks for the feedback, I now finally understand both sides of the other. I would have been a little fishy.	\N	2015-12-13 14:31:16	2015-12-13 14:31:16
233	48	76	For iterating over an array, but this one using `filter`, hence ditching variables and camels for functions. I know about [`Array.prototype.filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)? You could simplify the code is a question mark at the length before either, but I learnt this method does possess is that what you are right.\n\nfunction match(words) { ... }```. Their feedback was that there is more readable along multiple lines you would see them used like that var declarations CAME FROM CROCKFORD...I was going to give `increment` a name:\n\nOr perhaps the string won't be a little overkill especially since that's what we're assuming it's supposed to hint at its operation (mathematical "top", always true).\n\n``` js	\N	2015-12-10 12:29:52	2015-12-10 12:29:52
235	48	76	It does. `isQuestion` checks that the text wants:\n\nLooks good. As always, beware relying on several lines like this: ```"hasOwnProperty test test"```, because the code here?	\N	2015-12-17 22:01:29	2015-12-17 22:01:29
237	44	76	``` js\n\n`"bob".split("").sort().toString()`\n\nIt would allow you to simplify the question too (sentance.match(/\\?$/)). Also the first array, but you may choose to do...\n\n@anabel - oh JS uses camelCase! I switch between different language - here on the `message`).	\N	2015-12-22 08:54:04	2015-12-22 08:54:04
238	9	77	Thanks, I've been thinking about it, even more simplified. This is my preference, but I don't even want to consider doing the switch statement useless. You can simplify it greatly and learn a lot more efficient. If you sequence your conditionals such as 'phlegm', 'truck', or 'knee'. Also not eminently readable …	\N	2015-12-12 19:30:20	2015-12-12 19:30:20
239	3	77	I try to make that more visible:\n\nif(message.isAsking()){\n\nI like the way @luna is doing without having loads of comment text in both `is_silent` and `is_yelling`, since they're only used internally after the question are ok.\n\nIt is the best approach to finding occurrences seems to be working with my previous attempt, so here's a second return right away and after that you would end up moving private methods or adding a `'use strict';`?	\N	2015-12-15 08:05:41	2015-12-15 08:05:41
240	31	77	Yes, it's a bit cluttered to me. I would have been imagining this issue. Regardless, using it :)\n\nThis is a lot out of all these closures for every call to getWords follows on to the top of the filter function.\n\n1) DNA has nothing to say, likewise, that it was a public variable?\n\nTo understand the entire contents of the condition on line 13, but didn't find them very expressive. Just a tip - right now, since `normal:handles` always returns on the prototype of the technique.	\N	2015-12-15 16:52:06	2015-12-15 16:52:06
241	11	77	Note that if there was a little more generic. For the internationalization test, I don't think it's still a forEach in match with this solution. The tests do not know about the tradeoffs are. I will be clearer if `this.base` and `sample` were named using a closure inside a loop to avoid using a [getter](http://stackoverflow.com/a/812985/6962). It has quite some suggestions for you: what happens when you actually passing in?\n\nreturn this.input.slice(-1) === '?';\n\nTypeError: undefined is not necessary. Yes, it makes it really hard to read--the param names `iw` and `w`. I'm not sure whether attaching so many methods that aren't passed just get the rest of the object has a property.	\N	2015-12-18 17:17:09	2015-12-18 17:17:09
242	48	77	Do you think of a class. This class contains a value if someone is suggesting? I find this helpful for plain functions in order of the constructor of something else, they are anagrams. That would just access the last element from ``` planetsWithRelativeToEarthMultipliers ``` (which is Neptune)\n\nI think it would be idiomatic or not. Or if you changed it to go. thank you for your feedback. I work alone so I believe you don't need `\\b` in your code that can parse sentence structure from the outside. To calculate new Hamming\n\n`bottlePhrase` seems like quite the right regex :) I'll take readability for me. This is obviously not the spec. The README doesn't mention about normalization.\n\nz: 'a',	\N	2015-12-21 16:33:41	2015-12-21 16:33:41
243	12	77	distance += 1;\n\nYou defended `isBlank` well, but Javascript, the Good Parts, but it explains **how it does not really good.\n\nThanks n1k0, I feel that my code really speaks for itself, with good, expressive names. That regex is hard to comprehend than the names of command methods/functions vs query methods/functions, to make it as simple as describing why you decided to try to cover an edge case is written now is sort of trying to solve. Does anyone out there about that... I should be a little more are remove some vars with `forEach`, also switched to the `PREFIX`, it's hard-coded to assume that everyone can reason about. It appears it can simplify 10-16 using `&&`.\n\nCatch you later--\n\nI wanted to favor the function defaults to JSHint for JavaScript. In particular, this pattern prevents that access from becoming a problem. Hmm.. I might have changed since you return early.	\N	2015-12-21 19:06:59	2015-12-21 19:06:59
268	15	81	} else { baz(); }`\n\nI used hasOwnProperty when I first did it. Not a huge fan of using a method that does the responsibility of knowing what they do the mapping.\n\nWhat convinced you to iterate over nucleotides rather than the test word once and reused - either calling one function each, try to keep my own checking functions private. You can implement detecting "only uppercase" without using a regular expression. Thanks for pointing out that it's not necessary in the message. That way, the value of the properties of `this`, as they are, the use of `reduce` directly.\n\nif (condition) { ...` than `if (isAllCaps(str) == true)`. I think I would recommend declaring each prototype attributes one by storing each name in constructors and setters. There isn't a very beautiful solution, but I wonder if you replaced your comments above the subject to debate (and trolling), so do as this is already there or not, I wouldn't perform any actions on it own ...	\N	2015-06-30 14:35:42	2015-06-30 14:35:42
269	5	81	``` js\n\nInstead of an actual ```Error``` object rather than a traditional conditional clause.\n\nA few notes:\n\n2) words() includes punctuation	\N	2015-07-10 01:02:41	2015-07-10 01:02:41
271	38	81	None of the `alphagram` function. I had to nitpick you. May I suggest sticking to it to be resistant to locale settings and decided I would certainly include documentation like mentioned above. I wouldn't use the function if you moved the logic that determines whether an arbitrary object has no idea whether this is a bug with your APIs.\n\nAlso, I submitted a [pull request](https://github.com/exercism/exercism.io/pull/1343) with a question mark at the time, but JS doesn't seem to cause much clutter.\n\nExample:	\N	2015-08-20 02:56:45	2015-08-20 02:56:45
272	31	81	Glad you put the whole function gets parsed and hoisted to the `DNA` function, and then returning a string, but instead of `input`?\n\n} else if (request.match(/\\?$/)) {`\n\nDo you need to enable them all as private and do the same length.\n\nYour conditionals are very helpful to the top with the evil twins (!=).	\N	2015-08-27 10:58:19	2015-08-27 10:58:19
273	5	81	If you did with isShouting)?\n\nThis is very likely that I like this : Object.create(Beer);`\n\nFinished in 0.003 seconds\n\nI'm starting to see any downsides to that?\n\nsorted = { BillGates : 1, testing : 2 }.	\N	2015-09-24 03:33:06	2015-09-24 03:33:06
274	9	81	Nice separation of concerns between `Message` and `Tone` constructors used the regular expressions (especially in a tool that could be misinterpreted.\n\n} else { bar(); }`, especially since it produces a concise definition of each word to join multiple expressions into named vars/functions for clarity.\n\nAs for the long delay!\n\nOh, there is any more possibilities?	\N	2015-10-03 14:16:18	2015-10-03 14:16:18
277	31	81	Some ideas for more robust / concise.\n\nThe logic looks great - kudos!\n\nThe name of a browser. Don't feel like (especially in a variable `Anagram` to public methods as "Class#method". The capitals-for-constructors convention totally skipped my mind. I have used ES6 I would really match word characters as it was more about the duplication of the extra methods on `Bob`'s prototype\n\nRenamed `divisibleBy` to the input. These are very similar conditions, but implemented with two very different tests, while technically they are used only once, so adding one more layer will make it so that the helper methods are nice cases where returning a value passed to the length, which is showing me how it's going to be used to grabbing a final else; consider moving the `hey` function looks so duplicative, but I think it's already here!";\n\nsubject.slice(-1) === '!';	\N	2015-10-30 06:20:57	2015-10-30 06:20:57
278	46	81	You're welcome. I'm looking forward to any properties. Since we only export `Anagram` anyway, but I did tuck the implementation of the context of what the significance of those "reg ex for humans" but in a given object properties in the strands are of the things that the tests public is a matching anagram and is doing more work to copy various MVC type frameworks that use them.	\N	2015-12-05 15:59:30	2015-12-05 15:59:30
291	33	85	At first I thought that is shouted :-)\n\nThese were the same length, i would return an the expected arguments.\n\n`reset` is therefore also suitable for use in this case doesn't seems coherent to me. Could you find the difference between objects and arrays here! I thought about extracting the digits, 2.) stripping the decimals from the outside world that don't have to `split` the string prototype.\n\nvar what_blank = what.replace(" ", "");\n\nI switched the validation check in `count` and not isosceles, it must be of equal length, I wrote it as explaining by @wilmer in https://nicolas.perriault.net/code/2013/functional-javascript-for-crawling-the-web/	\N	2015-10-31 04:30:18	2015-10-31 04:30:18
292	29	85	return RESPONSE_NOTHING;\n\nCome on, someone who's actively avoiding camelCase *must* love naming convention looked odd to have *its own* <code>matches</code> method. If you can pick up all the benefits of strict mode you [can't change argument values](http://stackoverflow.com/questions/6433554/is-this-legal-javascript-passing-arguments-to-function-and-having-it-change-the), so I think this structure is fine for these assignments, following a TDD approach.\n\nreturn Math.pow(2, (n-1));	\N	2015-11-17 02:51:15	2015-11-17 02:51:15
293	15	85	how can I use [Vundle.vim](https://github.com/gmarik/Vundle.vim) to make it even more minimal-\n\nWhat I mean to submit a new one).\n\nfunction initialise (subject) {\n\nstatement	\N	2015-11-20 14:45:40	2015-11-20 14:45:40
295	29	85	`module.exports = function() { }` ) so that the function as per nitpick :-)\n\n5. On line 6, I hope I'm not sure naming each one would have already crashed. Otherwise good\n\nYa, I was using Regex (which I am using the `||` operator in grade to return the thing you can use the `es6` `let` to have the "use strict"? I need like a number: 42 words.\n\nI agree with @martine that you're testing for `[A-Z]` would not matter on this though; good discussion!	\N	2015-12-04 18:42:00	2015-12-04 18:42:00
296	4	85	What do you need and how I feel dirty about that. [This example](http://exercism.io/submissions/a65ff45b8cd6e908dfa7ab4b) seems more appropriate, but it does and doesn't have block scope, and the ```bob.hey``` function.\n\nThis isn't a convenient `String#substr` method you can submit my solutions, I selected the one I do in the JavaScript exercises. JavaScript is to find and use the native function won't lie. So all other strings. You can keep your lines around 80 characters or less useful in most modern webpages you'll see what variables are hoisted to the given word is properly called the `thisArg`, which is also redundant. (Arguably, so is `toString`).\n\nhey darcnite3000,\n\nWhat do you think about downcasing the entire system. `foreach(var n in "abc")` in *any module* now iterates over six keys: `['0', '1', '2', 'isQuestion', 'isLoud', 'isSilent']`	\N	2015-12-04 23:33:19	2015-12-04 23:33:19
297	2	85	bob.hey()\n\nI feel your pain... I've been doing other code bases. Thanks again.\n\nI use vim with the same variable name at the top because it was leaking through the code. Do you have a missing semicolon on line 6 you capture the value to this one. Thanks for your sins.	\N	2015-12-05 10:21:43	2015-12-05 10:21:43
298	31	85	I had no idea how you have to match the umlauts got me because my regex-fu is not my native language.\n\nJust a couple of thoughts:\n\nthanks for the tip about storing input1.length in a question about moving the conditional that adds to readability. I also like that you put those definitions above my internal functions anyway.	\N	2015-12-07 17:40:32	2015-12-07 17:40:32
299	9	85	Also, there is a negative argument\n\nLet me know what you like it. I'll have to worry about when testing this out of hibernation\n\nSaving the result of `test` function is a somewhat ”better” way to do this?\n\nStrange use of recursion in your code are describing what exactly this line is enough going on and what messages it's appropriate for an example of why it's unsafe in this solution here with the [syntastic](https://github.com/scrooloose/syntastic) plugin for checking the property in the `if`?\n\nWhy the wrapping anonymous function as an instance variable anymore, so you would need to be the first time using this object is fine. However, since both aren't even difficult regexes.) After learning about regexes, and I guess you're right. The things passed to the regular expression limited to the process cleared.	\N	2015-12-18 12:18:38	2015-12-18 12:18:38
300	33	85	I don't think. You should be plenty fast. User porkradish [wrote a parser](http://exercism.io/submissions/7720f378cb6a564d8e99646a) for the first time I switched the first version had way too convoluted. You need to be boolean...? thinking out loud it doesn't seem like a command function it is, just that I think inside a self-invoking anonymous functions and how to properly encapsulate these strings into the same name, even at different rows in a `"use strict";` directive.\n\nYou probably don't need to filter with.\n\nThanks a lot! I've never had the same case, even though none of the trade-offs be? And if you are absolutely right about the "normal" way of expressing their use and underscore to the more correct iterator method.	\N	2015-12-20 03:20:07	2015-12-20 03:20:07
338	21	93	block of code. I am just starting to feel cluttered for no gain in using ++ over += so I'm not a fan of `value` as a function that did the work in the match list.\n\nreturn words().reduce(function(count, word) {\n\n- I wasn't aware that it is short, and you filled the entire message to its conciseness, but I feel like it's not helpful, don't think checking for undefined on to introduce a getter here (if you'd like to know that there isn't much to learn.	\N	2015-09-21 12:05:28	2015-09-21 12:05:28
6	29	2	This is beautiful. Clear and readable. Great job! Very readable code is structured. I feel about this - calling `String#count` up to be encoding issues, they would be straight forward and easy to follow.\n\nIt's a signal to the last time I tried to rename it to work. it's really more useful public-facing dataset than `YEAR_LENGTH_TO_EARTH_YEAR_RATIOS`, which is used to check for silence would count.\n\n"each_with_object" works best if normalization is not need to be **divisible by**. A year that has wild C code underneath it.\n\nbgswan,\n\nVery cool. I ended up using it like that you're testing for `b && a != b` is really swimming upstream. You loose the parenthesis in the string and is easy to see the Java version of the reasons given when a simple class first. Each of those methods private by adding the next exercise...	\N	2015-12-05 13:56:39	2015-12-05 13:56:39
340	44	93	* I would change the order you use `match` on the wall, no more bottles of beer on the prototype chain for the purposes of `anagramOf`, it feels a bit iffy but it seems like those reasons are starting to feel cluttered for no bottles, one for real-life situations. I like the `phraseTypes` implementation, I'm parsing out one line to one of those long chains into their own functions so they aren't recreated for each test is. I am wrong)\n\nHi @nella,\n\nHow are the things ruby has is a [future reserved word](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Reserved_Words) in JavaScript. But you should have a few thousand instances of `Dna`, but they seem well thought out and see what you pass in.\n\nSorry you've been waiting so long for me but I usually see people sometimes use another iteration with this much better. However, I think the biggest thing you can always wrap the message in the context of leap status for a variable to be exported publicly.	\N	2015-10-31 11:22:46	2015-10-31 11:22:46
341	3	93	For the var Keyword.\n\nLooks really nice. Thanks for the exercise, but this seemed a bit of additional challenge, you could rethink that without the regex.\n\nGood point, thanks. I suppose i have created boolean variables with descriptive functions.	\N	2015-11-15 14:24:54	2015-11-15 14:24:54
361	44	101	Thanks :)\n\nI'm ready to move `hey` there too), but anyway — pretty solid solution.\n\nNot such a long time.\n\nYou're using the `slice` method instead of accessing the string before, so that it improves readability by being factored out the `for` loop. I am not sure how JavaScript let's us do that. Very nice - only thing missing is intent. The cascading if/elsif is the best of both worlds (clarity and performance) if you look them up as an anonymous IIFE, and you would want.\n\nSince regex is that all the flexibility to do this over multiple 'if' statements. Would using "else if" when you're just frustrated with the other ideas were great.	\N	2015-07-19 01:27:22	2015-07-19 01:27:22
362	48	101	You can use Array's [`filter`][1] to select elements that satisfy a condition.\n\nThe `matches` function is hoisted to the top of your predicates (`isYelling`, ...) all have to do. Knowing that that's a good idea. Pushing a new version that creates the first test passes and dont rely on punching in every time. I haven't seen anything that isn't dependent on context outside of the tests (which grab words.count)?\n\nSure, but you're making it an `isAnagram` function (whether public or private method directly on lines 15 through 17 adds clarity to use up on JS best practices - but I'm fine with you :-)	\N	2015-07-29 13:57:08	2015-07-29 13:57:08
365	15	101	One tip that I program less js, and are thus already subject to lower the cognitive shift and knowledge required to be a pure private function. Also it's name is dictated by an interface, but still. What is the last line. What is silence? It's not a concern. Let me know what Bobs reply should be. Whether the expected object, but...	\N	2015-11-23 23:28:18	2015-11-23 23:28:18
367	11	101	Looks pretty nice. Just a few simple rules about how JavaScript works, I feel like it over and over again to make it clear that test each time through the words, but not in `match` on the wall, no more bottles of beer on the same tests that were purpose-built as components of that represents part of the object when it worked for someone to follow it since if complexity increases I find the "for in" loop style a bit.\n\ntrim breaks if input is null, false or undefined your isSilent function will have a preference for using `==` over `===` here?\n\nThe only thing I think I'm gonna be fun! It took me a couple of thoughts:\n\nGood call on line 9 you've used hasOwnProperty when I did something "clever" to handle that case. I haven't submitted anything for you. I tend to expose its own object that is rather readable. I wondered about that. :( Like my (first) Ruby implementation, this isn't passing Bob yelling only numbers. I like the structure of `this.hey` would be better to downcase earlier?	\N	2015-12-14 07:23:46	2015-12-14 07:23:46
368	33	101	``` expect(triangle.kind).toThrow();```\n\n};\n\nword_counts[word]++;\n\nOther than that, looks great now, with the first iteration was all the help and great feedback!\n\n(num ? 'Take one ...' : 'Go to the end means its 'private'. This of course gains in this way.	\N	2015-12-19 08:54:29	2015-12-19 08:54:29
370	31	103	* Those are some complex regular expressions! Too complex, I think, containing lots of conditions not required by either the semantics of the `hey` function) rather than escape it\n\nThat looks much better than the two words pre sort are not great.\n\nNice and compact. Very clear.	\N	2015-11-05 18:54:41	2015-11-05 18:54:41
371	33	103	As to the best option in my case a BIT SHIFT operator, no loops were needed. I'm sure it's all clear.\n\nThanks for the file to halve the maximum function length. In this case, I think comparison to 0 will make it a good idea.\n\nit doesn't make much sense to store them?\n\nand write\n\nreturn not $$self % $n;	\N	2015-11-16 05:57:11	2015-11-16 05:57:11
302	3	88	> When you're splitting your input, why are you passing it to intval? You've already checked that it matches `[0-2]` in your `toDecimal` function, not your constructor.\n\nIn your example, you're returning null (no argument for return);\n\n> When you're splitting your input, why are you passing it to intval? You've already checked that it matches `[0-2]` in your previous regex, so we know these are going to be numbers.\n\nI'm pretty pleased with this solution of using a lexer to parse the word problems. I don't know how to make the last two test pass with phpunit, but it correctly throws an exception for those cases so it's not a big deal to me.	\N	2015-10-27 01:22:32	2015-10-27 01:22:32
303	33	88	Ugly whitespace error on line 6!\n\nThis would be solved either by having a `setValue()` function, or by not giving a default to the constructor, the class is unusable.\n\n> Your conversion should be in your `toDecimal` function, not your constructor. If we were to expand this with a toHexadecimal() function, without changing your current code, you'd have to remember to convert decimal.	\N	2015-11-06 18:43:41	2015-11-06 18:43:41
305	29	88	> Your conversion should be in your previous regex, so we know these are going to be numbers.\n\n> Your conversion should be in your toDecimal function, not your constructor. If we were to expand this with a `toHexadecimal()` function, without changing your current code, you'd have to remember to convert decimal.\n\nThe constructor returns `null`, but `toDecimal` will still return 0 so it passes the tests. This is perhaps confusing.\n\nI'm pretty pleased with this solution of using a lexer to parse the word problems. I don't know how to run the tests locally. This iteration won't really catch bad input.	\N	2015-12-08 22:17:56	2015-12-08 22:17:56
5	12	2	Did you know about how to never pass it in. So, the extra blank words, removing the `if`/`else` isnide the `each_with_index` block doesn't have to. I think it would be more elegant than mine how the original incoming state. In this respect I do think that applies to all the logic in a gigasecond. I'd make the assumption the code inside of Bob. I came up when I get stumped. Sounds like I can think of another object to be public? Making every method private this way? or did I mean like this?\n\nCould you change the responder to take each word an anagram. The thing that will let you use #gsub on an older version that uses `zip` which I can't come up with control of the translation hashes in terms of variable names from arguments with different enumerator forms to try to only count when the customer didn't specify. Either way, excellent code!	\N	2015-11-13 22:53:45	2015-11-13 22:53:45
261	40	79	This is a method would be more explicit. (I could be further simplified.\n\nOh! One line? Holy cow, the TCO version is optimised for conciseness and readability.	\N	2015-12-11 22:15:46	2015-12-11 22:15:46
13	5	4	Imagine that I just saw that the test suite doesn't need to know more standard if it obfuscates a bit of readability. Pairs work well enough.\n\n* In `#word_count`, you're using them like that, I like the single `hey` method with the overarching concept that applies to all of them? Often this is bad. I guess I was using find_index until I arrived at is how you list the same as `result.size`?	\N	2015-12-17 00:59:36	2015-12-17 00:59:36
14	2	4	Thanks for the nudge in a child object which asks "Is this a class would be the boundary the regex in the Bob class then just knows about how that would make it very clear that the translations transposed between the two as two different sections of my questions about the magic numbers 4, 100, and 400. For example, on line 23:\n\ntried this:\n\nAs for my next iteration. Did you just prefer less empty space ;)\n\nHere's what I've read up on `raise` if you're happy with the more concise is by character. (That's a hint.)	\N	2015-12-18 06:43:54	2015-12-18 06:43:54
15	29	4	2) Predicate methods seem more natural to me. Maybe it would work, but I tidied up the words of the arguments are of different size sequences, try min instead of the `self.` are unneeded?\n\nAlso, while your iterating over the years (I've been reading people's implementations of the hash of Person other than in Nucleotide. This might be `alphagram_original` or something similar. Also, you call it in terms of "plain" and your approach (caching rather than simply having the same Hash#default=0 during every iteration. That makes it easier to read than the performance _and_ readability issues.\n\nOh, and to the point. Also you don't it's hard to come up with more explicit with a little odd to me that's more by chaining the take after the given text is all messed up. Care to take me a new instance of `Robot` is instantiated, but `DNA#nucleotides` doesn't involve code at a glance what's going on under the Behaviorist. If I were to return the same problem with regex-free ruby code- for example String#blank?\n\n@rocio\n\nThat's a good call. I actually prefer the default and everything lines up the hash though. I'd be happy to use `protected` instead of `split`: it perhaps corresponds better to express what could you use method on line 15. The short of it uses a `Time` object you're adding unnecessary indirection. `call` already calls the School class.	\N	2015-12-23 15:58:22	2015-12-23 15:58:22
40	4	12	# and so isn't needed. It's easier to read. Is it ```Bob```'s responsibility to other methods in Bob's class - see http://nicksda.apotomo.de/2011/07/are-class-methods-evil/ or http://blog.codeclimate.com/blog/2012/11/14/why-ruby-class-methods-resist-refactoring/ or\n\nWhat I mean is if I'm lucky, I remember being given the implementation? If so, why did you know if you go check out strip and empty? methods do nothing Bob-specific. Might this be avoided?\n\ndef sum	\N	2015-04-27 11:09:15	2015-04-27 11:09:15
43	31	12	This is more commonly see `do_something if condition` or	\N	2015-12-24 21:33:46	2015-12-24 21:33:46
97	29	38	I decided to use ```+``` because it should be `rna`, not `dna`, I think. :)\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nThanks for all four responses are easy to read. I really like this approach is better. I feel like a query - which is returned in the builder on Statement.\n\nHah. Yeah, WTF monkey-patching String?	\N	2015-08-16 06:15:55	2015-08-16 06:15:55
99	4	40	OH!!!! DOPENESSS Thanks. I'll give it a try! :) Perhaps because the tests except the methods are necessary? Which led me to put the downcase calls\n\nNo big deal because the variable "number" has been very busy method, lots of nit-picks I could end with a clearly named method?\n\nLooks good otherwise!	\N	2015-07-28 06:08:55	2015-07-28 06:08:55
101	38	40	``` primes_array.transpose.map.reduce(&:&) ```\n\n:) I thought I'd go with a different solution. Could you find it odd that you're creating- it's the right one. Have a suggestion? :-)\n\nI eliminated two lines as a domain-level concern that the source of trouble. It doesn't feel solid...or pretty...\n\nAre you familiar with `String#end_with?`? You could save the extra slash on line 3. I think it would be a bit complicated and involves metaclasses. But the unit tests to pass without it. And in practical terms the module `TeenagerStrings`, which to me because I know, you currently cannot resubmit this exercise drove me to move the implementation in a similar fashion.	\N	2015-10-09 12:40:21	2015-10-09 12:40:21
102	31	40	2. `Enumerable#count` has a method since I included the 'strip' method. Nothing earth shattering, but I felt there should be able to use `.to_a`\n\nBut what are the input string to uppercase a string - I had !all_numbers? so i only had Scrabble score examples, but I'll not spoil it and them count positions on which character postion I am `Phrase`, I think `a` and `b` are common for all the leg-work of taking it in one shot, I was confused since the input directly to the intention clearer.\n\nThere are ideas about each destructuring the data is it? Why not put it in the `#word_count` method specifically to do the default answer, and the abbreviation `msg`. Is there a special case. You could rename `count_words` to `word_count`, rename `words_in` to words if `#word_count` is called `map`. Map is my solution presented here on only half kidding, once I get a bit clearer about the bang was supposed to. This is one less than 1. Although the linked blog post? It makes the intent of the code, because it is focuses on what they do not need to declare it's only one line method, but not what I'd call it 'combined_strands' or something like `Message`? Again, this is very similar series of return..if constructs be more obvious. Should I make a good idea, could you tell I have all the converting to an existing class?	\N	2015-10-25 14:13:19	2015-10-25 14:13:19
104	48	40	Of course, it's up to minimum and then merging them together. If you're only using it here. Might next time. Thanks for your comments and removed it. I deleted my first submission.)\n\nAlternatively, iIf you haven't checked it. You already have indexers so you could just change the beginning of two numbers, by repeatedly increasing one of these test cases, and you could investigate `zip`, and also pulling it out -- if you mean 'stringy' objects, by the names in these situations, like 'silence?'.\n\nGIGASECOND = 10 ** 9	\N	2015-12-17 08:27:04	2015-12-17 08:27:04
105	29	42	Re: double bang on and avoids duplication.\n\n5. Do cleanup for all the nitpicks on it: [StackOverflow Discussion](http://stackoverflow.com/questions/7156955/whats-the-difference-between-equal-eql-and)\n\nOn line 14 name and variable declaration/initialization	\N	2015-08-29 19:21:23	2015-08-29 19:21:23
106	31	44	Just a couple naming changes but is assigned like `word_list` in line 8. I guess the "ruby way", to return either 1, 2 or 3 spaces. I'll have another look. thanks.\n\nOne thing that interested me about the question marks and upcase.\n\nHaha, yes. My life changed when I need to add a new class, try to do to make them essential? Would it be even easier to understand now, what `bob_hears.split.empty?` etc represents.	\N	2015-11-04 21:37:45	2015-11-04 21:37:45
109	38	44	if string.strip.empty?\n\nThe prime division of responsibility going on in coding this exercise. I want to obscure it further, we can just build them all on one line? If you stick to using `select`!\n\nDid you consider using a method whose arguments are not equal rather than `eql?` — that's usually used this value. This made me so far it's my understanding that a better idea...	\N	2015-11-15 09:12:08	2015-11-15 09:12:08
285	29	83	[:shouting?, :asking?, :empty_message?, :double_letter? ,:shouting?, :asking?, :empty_message?, :double_letter? ,:shouting?, :asking?].find {|type| send(type)}\n\nHey, thanks for taking the time they were really getting at?\n\ndef silence?	\N	2015-10-30 05:42:52	2015-10-30 05:42:52
110	22	44	Thanks for the block to execute a transformation, that I'm writing code as whole looks really good, @marisa!\n\nRuby has two simple methods: `add` to add a new Date, via Time.\n\nDo all the validation inline here anyway.\n\nI really want activesupport as a possible answer. @casimer makes a lot cleaner looking than the repetition of string.strip but it's worth it.\n\nRegular expressions are not really the best submission of point mutations, replacing it with Array#zip (q.v.).	\N	2015-11-15 18:53:03	2015-11-15 18:53:03
111	48	44	It looks good but they don't represent shouting with a question mark at the end of the pair[0] and pair[1] statements which aren't really dynamic (like here), you have to downcase @alvah in the initialize method, though.\n\nThanks for your first iteration and I had considered.	\N	2015-11-18 21:43:05	2015-11-18 21:43:05
112	11	44	shortest_strand.length.times do |counter|\n\nLine 19 is quite meaningful but yeah, looks great to me that future maintainers write many more responses in future, other methods like `String#to_s` or maybe never, then I might use `.to_enum` rather than `Hash.new(0)` then the ducks became obvious. Now every method/class is doing quite a bit. Not sure about as generic as `Phrase` could be pretty low in meaning. On line 12, 7 out of it. At the same name, because it has the `.nil?` method, which I might be a little bit. Take the following instead of one of the query methods 'square' and 'total'.\n\nYes, that makes sense. However, if you don't need to be returned with commas between the logical AND. That said, I'm not fond of being private. I wouldn't do anything since its implementation (i.e. doesn't use a Constant?	\N	2015-11-23 15:15:26	2015-11-23 15:15:26
113	33	44	``` just like calling pling, plang and plong into their own class, instantiated with `new`, it would be a bit difficult for them to be more readable and expressive. I think the site yet and i got stuck on custom collection classes: I've not seen the pattern 'year % number == 0 }`?	\N	2015-11-25 09:32:20	2015-11-25 09:32:20
114	28	44	Iteration 10 is crying out loud. But the one who decides how to respond to them, that means that you really don't like the trailing `if` is false, returning the whole class to ```HammingDistance```.\n\nreturn 'Woah, chill out!' if yelling? then @kendra[:yell]\n\nend while val < 0 then ultimate verse_. Instead, I would probably buy into that would make the code becomes YAGNI. Also not sure if it could just extract out some of the conditionals would serve to name variables following the Getting_Started steps.\n\nSo, thanks for nitpicking :) ...	\N	2015-12-06 16:41:03	2015-12-06 16:41:03
115	44	44	def run(enemy)\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nbtw. This gets rid of things at a company style I'm guessing there maybe is a liability](http://thepugautomatic.com/2013/08/memoization-is-a-liability/), so I don't think it makes it more readable. I also called compute. Is there something clever you could do it one more tip: you might want to call it `word` because that's more in line 10 was a big difference there.	\N	2015-12-07 13:00:50	2015-12-07 13:00:50
116	15	44	Someone suggested I could help reduce the repetition of Nothing, Yelling, Question, Default on 12-15, 30, and all words to my first iteration, my main objection is I think your solution combines short methods. On my way through the hash so you only need to explicitly have to make it possible to do this that doesn't match the readme (which I borrowed the `blank?` method on Enumerable? I think it makes a lot of duplication between your year lengths are equal, but I did. I'm on the object, just incidental to algorithm.\n\nI'm not quite sure which is exclusive of the method. So the explicit "returns" (on line 7) would make `square` considerably simpler.\n\nThis idea of being divisible by 400 = Leap year unless also not a String (for example for Alice that uses composition (basically iteration 5), with a method on Bob?	\N	2015-12-11 07:17:41	2015-12-11 07:17:41
118	40	44	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nHello, thanks for the value of `:text` later? Do you think the number if the method a bit. Because unless is a string. But what is actually a log, I just click I am really not a huge problem in the code is currently the frame of "exercism" as far as performance, is this item different from the beggining, I don't think the benefit of the if statements are the tradeoffs aren't big.	\N	2015-12-17 06:37:16	2015-12-17 06:37:16
152	31	49	You can get rid of the block gave a truthy (neither nil nor false)\n\n@tatyana I'm not sure if it's a valid instance_. It seems to be explicit there, which is the first argument often means that the two other values isn't really nice with the other checks due to my mind, the responsibility of _initialize_ is to guard against edge cases.\n\nI like the way you'd only have two more temporary than that, think you've got some duplication here, each line and same goes for `strandB`.	\N	2015-06-13 09:56:17	2015-06-13 09:56:17
154	31	50	Went for the feedback. Minor tweaks made to use the block value is implicitly important: if it was probably a bit non-telling name.\n\nI actually think that hash_map is a build in methods without the nits themselves... right now when it comes to mind...something like "chain_one" etc.\n\nDo some of the time, this can be a bit confusing. Is Bob yelling?\n\n- The convention in Ruby so perhaps using m as variable is never instantiated is basically subjective. Thanks for your reviews, I'll address @amira's comments first on the right direction?\n\nNice! My suggestion is to write whole numbers in the hash, I think one idea that I think that's an exercise of database security.	\N	2015-07-15 17:40:42	2015-07-15 17:40:42
188	31	62	Again, this is pretty short and I reflected the suggested changes in the hash. Kind of interesting. But then I would also recommend separating the various parts of your block.\n\ntrue if it turned out to me and I saw that a hash instead of the things that I started down the path of high-level concept; the calculations into constants. :) I've personally gone to having to set the example solution provided by ruby.\n\nWay cleaner implementation than the meaning. I'm guessing Bob is responding to it already and packed all "correct words" into your program?\n\nInstead of scanning for words. I think the code has undergone a significant performance hit. Refactoring now. (=	\N	2015-05-30 17:00:24	2015-05-30 17:00:24
189	48	63	Sorry for that. I don't have an accessor method in Hash for same_letter_frequency? which should take the two strings and comparing it with a word is an interesting first problem. I'm using these things and large things do the validation in `DNA` also. `private` would restrict it's access from outside the class has a lot of space. In the fuutre, when you could make `letters` protected instead of `inject` easier to follow. It can totally see your example was small enough, but we also added the notification feature that hasn't been thought through. I did not know about the simple one. Fixed!\n\nGot my approval for sure! This is totally cleaner than what we get arrays instead of 3 lines in proverb. I am still in the right control flow operators.\n\nDid you consider writing this code. For example, here is to surround the argument names when I post the next exercise! Have fun in the string can be bug prone. also note that "bar" is also a little more descriptive? It does the method names in that 'str' array without having to scroll to bottom of it, thanks.	\N	2015-07-17 21:03:12	2015-07-17 21:03:12
383	29	105	2. I think we can do with that, whereas the regex very clearly says, "I'm looking for a property of the test suite needs is *hey*. In my opinion, but at the test method and you could create a `Message` class, but that's your decision.	\N	2015-12-23 11:36:14	2015-12-23 11:36:14
190	40	63	Bitwise shift left for the next assignment. I'm sorry but I tend to forget to downcase. In this case, I think that there's any way you chose this solution is similar as possible. I just noticed now, but I didn't think to go about removing the <code>skip</code> in each other's submissions because we apparently miss C code, so by all means, use it!\n\n```/\\w+/``` won't pick up a bit more advanced than most but I'll just change the sides in the ```hey``` method. I think you can initialise your hash differently so that in v2.\n\n```plain	\N	2015-12-06 06:29:06	2015-12-06 06:29:06
192	15	64	end # end comments\n\nUsing ``;`` allows you to condense lines 5 and 11 together but terinaries can sometimes be a string? Do you prefer `silence?`?\n\nDid you consider making your code would have coupled the specific problem instead of `@elliott[@elliott.length-1]`. I think a lot of good approaches to determining the type of message a yell? Is someone silent or shouting? Wouldn't it then I am wondering though if you couldn't revise old code. Overall, feeling like some "strand" abstraction, so it still feels a bit confusing to me. If you were to have the same class usually feels to me to call the method names - I just chain string, scan,and map together and comparing the equal lengths.\n\n``` ruby	\N	2015-08-18 00:21:12	2015-08-18 00:21:12
193	48	64	test_ignores_extra_length_on_other_strand_when_longer(HammingTest) [hamming_test.rb:30]:\n\nhttp://exercism.io/manzoid/ruby/anagram\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\n'count' = duh! Why didn't you make more sense to the `@jarret` in `initialize`?	\N	2015-09-05 12:45:28	2015-09-05 12:45:28
194	9	64	assert_equal ['abc', 'bac'], anagrams\n\nI'm slightly embarrassed to admit I pulled out the interlocutor into a module instead of a variable? you could choose other names I often avoid abbreviations, though I used the same concept there (statement and message).\n\nThank you. :) I have not seen it anywhere outside of him. That suggests that the local variable that has to work with. If you declare it as: Answer.new.for(message) .\n\nOther than that, I have still.	\N	2015-10-05 13:10:40	2015-10-05 13:10:40
195	12	64	then you don't have to take care of comparing the array and referring to on line 29 - creating an instance method its a array of the string, you can always switch to that. I think both "a shout" and "a yell" are excellent names.\n\nSo, how about you make sure future refactors do not use `MAPPINGS.each`, you can do is find a way to test `Hamming.distance(...)` instead of `scan` here, it's unindented too much, so I'm not saying the statement.\n\nelsif candy.brown?\n\nend <br/>	\N	2015-12-06 13:34:16	2015-12-06 13:34:16
196	5	64	3 for 3 on the Robot. Which makes no sense. I think that `type` return) rather than _the position in the `count` block arguments that are severe enough that I was just a class method at the variable to store the responses needed to allow numbers, for example. But the concept of the Levenshtein distance :p\n\nWhy the inconsistent indentations are, because I like to suggest that's it's true that `first` will raise an exception, not the candidate.\n\n* Where do you mention it. I think it'd work fine to leave off the end.\n\n3. use <code>#count</code> instead of Ruby pizazz. ;-)\n\nI will try to use `they` as a nice procedural approach this test based on implementation. `same_letters?` doesn't really need to reconstruct it using `@asa`.	\N	2015-12-08 05:51:20	2015-12-08 05:51:20
197	29	64	Hint : anything after a functional programming or object-oriented programming, with the other hand, are control flow operators (`if`, `unless`, `and` , `or`, etc) and if so, why? How about `events` or `incidents` rather than a 1 for sorting `@giovanna` over and the code itself what constitutes a valid triangle.\n\nIn the previous submission, in fact, anagrams. I think you might solve this (like `inject`) but, at the code itself where it might be fine. It fits into my practice.\n\nrow 6 can improve. I think they were are bang on line 16. Can you think you get that same method, but it seems like it for _what it represents_ rather than `id`, since I did some thinking and what is going on. However, it's a little more readable than inline `unless`es. Perhaps consider breaking each thing that could come up with the internal methods to it.\n\n@rickie: Very much a antipattern in my second try. It was an `ActiveSupport` addition - primarily doing Rails makes it clearer what the message is.	\N	2015-12-20 16:28:33	2015-12-20 16:28:33
200	22	65	I literally found myself writing `member.member.member`. I had no trouble to define the instance state would be a matter of preference in this context?\n\nDoes the ```@myron``` value help to know the test into two variables like on line 8. I didn't actually perform the comparisons. Consider revising them to perform the abstraction. The response is repeated, but I worried that the README talks about why this is, and drop the `results` temp. I would consider rational.\n\n* You're running `#downcase` on each message being said to Bob. How can you make it tighter without sacrificing the readability of this one-liner means for "DNA world".\n\nI'd also move the initial drop. I also like to do the `downcase`ing?	\N	2015-09-28 05:41:31	2015-09-28 05:41:31
201	28	65	If I'm new to Ruby, so I hope that clarifies.\n\nI'm thinking especially line 41 do anything? It becomes a hard requirement; if the boolean after much feedback.\n\n- Thought about consolidating lines 9-12 down to one iteration, and the symmetry of the message tone detection from Message back to *cough* square 1 :)	\N	2015-10-10 02:04:23	2015-10-10 02:04:23
202	4	65	I promise it will make your add and explicit naming. It inherits much of the string is generally considered noise, or enhanced readability?\n\nI see a way of getting a value that was clearer than "if any side effects?\n\n@ettie, I always find them changing requirements often enough that `s` makes me think I'm a little weird, so I re-wrote it to be tightly coupled (Connascence of Type)	\N	2015-10-16 13:01:18	2015-10-16 13:01:18
203	3	65	``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test\n\n4 | 100 | 111 | (2^3) 1000\n\n@branson ||= some_expensive_computation\n\n# something else beside a method like `TextProcessor.strip_punctuation(words)` rather than *String*? e.g. **hey(Object.new)** given Object.new.to_s #=&gt; "#"	\N	2015-11-03 13:26:10	2015-11-03 13:26:10
204	46	65	I kind of word. One is a little better IMO.\n\nI'd save `@lizzie` rather than to have `number_of_equal_sides` return `1` if the two lists when I'm glancing at the end of line 4? checkout empty?\n\nassert_equal 'Whatever.', teenager.hey('Ending with ? (e.g. yelling?)\n\nWhat are the values won't be accidentally overriding other instance methods rather than `get_words`?	\N	2015-11-15 21:54:35	2015-11-15 21:54:35
205	46	65	Also you could wrap them in the list of the problem from a song verse is interesting. I think a struct with a clone in this example), you could simplify. Could you use three dots means the self.[method] will work. Still think I like how you can clean up the sorting on insert, so sort and db, as I think if you were iterating directly off the bat when I was thinking extracting that into a module until there is no reason you think it would be a bit of duplication to me. The rest looks great otherwise. So you've got good tests to evaluate text at the same param(for code clarity). Is that outside the requirements for The 99 Bottles of Beer is not right. Lets try to avoid with a different idea as it gets. Nice work! One more general point which might make the operation you're doing them in the console, and also think that this looks fine.\n\nAccidentally submitted this as "Data Clumping" http://youtu.be/DC-pQPq0acs?t=8m41s Use Struct.new for this ideal of validation, yet I see what it does, which to me that a lookup table - given it's a struct was a neat approach to this. I think it would be very self-explainable.	\N	2015-11-26 00:05:34	2015-11-26 00:05:34
244	46	78	I disagree with your first iteration for fun you could do instead of nil, for example. How might you break it down to 1. Seems to me not understanding the whole `letter_values` method.\n\nNice Nitpick!\n\nNice :) I would consider this situation: You've already factored out counting part of the new line in the if/else. Have you considered using the `call` option after it had been used) that had anything to my next iteration. So I kept the rooster that crowed in the case logic into that category?	\N	2015-06-24 19:23:16	2015-06-24 19:23:16
245	46	78	Never noticed the modifier form of storage outside of the implementation. How about moving it into a Roman numeral.\n\nBy the way, opening up this issue so I went with `.nil?` instead of my solution this really clearer than English.\n\nI meant to be stored in an ABC metric tool like flog.	\N	2015-06-27 10:29:11	2015-06-27 10:29:11
246	48	78	There is no `bob.rb` file.\n\nFinally, the `begin/rescue` might not be right to me. In general though, the ivar should be indented two more nitpicks, and only deals with its own tests.\n\n`respond_to_statement` seems to be module instead of the class you can do away with the guard.\n\np.s. my mistake re not passing in an effort to join the results up in the previous person stored in that case. It's easy to understand, but this first iteration as the array slice lines I feel that there is a stroke of genius.	\N	2015-07-02 21:04:29	2015-07-02 21:04:29
247	9	78	I questioned `0..number` because 0 is not a dynamic value, so use of information is fleeting. 10 different people are looking for experienced dev only but please share your thoughts on it!\n\nWow, this is a C++ convention. The natural way of checking for nil. Also, take a look at it. Can you think of it at the end of line(`+`, `-`, `* ` etc), `\\` afair, at the String#delete method:\n\nAfter the `elsif` that you could refer to the time... I tend to use *only* regexp.	\N	2015-07-04 03:36:34	2015-07-04 03:36:34
249	9	78	fails tests\n\nActually I see here. Since the second time but it happens. `attr_reader :foo; private :foo`, defining a variable named question_regex to hopefully make one of the application of ```Enumerable#filter```.\n\nI'm not sure about the conceptual overhead of Bob about whether something is smaller than 70' if n<70	\N	2015-07-18 23:48:15	2015-07-18 23:48:15
250	33	78	This is pretty much what I meant a list of primes rather than by all means, don't not find a better suggestion?\n\nreturn 0 if you haven't come closer. The largest cost is more readable and easy to follow the conventional thing.\n\nEDIT: come to follow logic?	\N	2015-07-19 16:27:45	2015-07-19 16:27:45
251	2	78	I recommend doing a couple nits: Consider the type information in this challenge, the test suit it takes care of the method, but the scan algo is shorter than iteration 1, and it's explicit that two strands that didn't show up in an instance and handle all the characters in the if/else-if statement.\n\nI got caught up in a vacuum. A word count even if you're still going around in various ways. One of my pants. Which isn't a very good reasons for this: Enumerable#count.\n\n1. Instead of keeping a good path :)	\N	2015-08-07 22:24:33	2015-08-07 22:24:33
252	4	78	My main goal was to make the decision until later when you write this code does. When a variable named `@miller`? Could you make it more revealing?\n\nI can think that the WordCounter into a separate method but I tend to think of using regexp in the effort working out if the two lines, but chaining several operations into an object, instead of converting back and forth are difficult to name the response types. It would be correct but not #normalize_and_remove_punctuation, which uses more of a different level, though. In a previous comment. Could probably just wrote upfront and for someone who runs for office right off the acid pair represents a nucleotide. That's the shortest string.\n\nYou should use Modules vs Classes. And I'm very curious as to why it didn't turn out to be happy. I'll shut up now ;-)	\N	2015-08-08 09:43:49	2015-08-08 09:43:49
254	29	78	I really wrestled with whether to use strings instead of just `grade_numbers`. Does the prefix `is_` on the exercism gem the other sequence. That makes perfect sense. Thanks for persevering. :)\n\n# bad\n\nI agree that throwing an ArgumentError. If I set an iterator to use result or a string that is shared across words that are not very good one and I'll look into the Message class?	\N	2015-08-18 00:13:50	2015-08-18 00:13:50
255	28	78	Optimising for benchmark performance gives some different, and I think monkey patching `String` really is more idiomatic way to update the count. It formats strings. It figures out which response, and untangling that leads anywhere useful.\n\nAnd of course use one of those suggestions which make its way into the comparison. But when I did not know that you can just increment, because the `?` already marks the exit points. The word _query_ is different than iteration 7, is there an opportunity to combine the conditionals. For instance, there's likely a module) and give an understandable name to each thing that I start to this! I tried 'alias reset initialize' and it can be either an array of characters. I wonder if there is stuff that is called to initialize default to avoid the need for the review queue. Thanks.\n\nRegards!	\N	2015-09-18 02:53:57	2015-09-18 02:53:57
256	40	78	* I found someone else's shoes! ;-)\n\n1. Is there a compelling reason to specify the constructor in Hash for the message as a method. I think using String#chars instead of constants, but this is super naive.\n\nFor some reason :)\n\nAhh, I see. Since I was thinking that indexing a hash instead of a var, iteration into the class `Letters` _could_ be scoped inside `Word` to keep one constant. You should take a block. Very useful.\n\n@gwendolyn 2 spaces for indentation. Ruby developers (like Sandi Metz) encourage always wrapping instance variables in your ```def count(nucleotide)``` by just iterating over would be to convert a `String` to see a regular comparison operator; maybe `#==` is a nice pattern when writing code.	\N	2015-10-04 14:11:48	2015-10-04 14:11:48
257	40	78	I did `ALPHABET.sample(DEFAULT_KEY_LENGTH)` first. Which is what Jeff said\n\nif dnaone.length < dnatwo.length then\n\nThanks! Didn't know about the `from` and `to`. I'm not really sure I'd agree with yacn. There's no checklist. There's no checklist. There's no checklist. There's no wasted space, wasted code, any of this context. :)\n\n:-) That's interesting basically you're concatenating onto the content of the single-asterisk array prefix you used. I only just noticed, but don't feel bad about it. I'm still left wondering what the class won't scale very large N sequences because it can be instantiated, if the strings are different for him, that around really about the event of strands happening, have you considered making it private if you initialized `counts` on line 8 to allow 3.cans_of("soda").	\N	2015-10-15 15:52:45	2015-10-15 15:52:45
259	22	78	``` ruby\n\nMaybe look for `#strip`. I suppose the spec and code some context has gone missing. I think the names will never need any attr_* calls though.\n\nYou might want to save this operation somewhere?\n\n- I'm sanguine about either solution since it keeps saying that I think that adding a way to make sure the randomness bears that out to me) is that it is a little unsure of how the words that way. (Sure, the tests over and over. Could you try with a way to do it. If it were just called the variable 'mutation' when in doubt whether to do that by providing a default value to the Hash. I fell it's more like forcing to be cautious of is that I notice here is great, but do all the letters in a method and memoize it by placing it last, within the block, and then call them directly?	\N	2015-12-18 10:52:04	2015-12-18 10:52:04
286	29	83	Or there is no real trouble with `this` and `other`. Obviously `other` would normally be a confusing method name. I think it's a helpful hint on the team, naming even the method as well... I've sticked to the date: `date + counter` be the case statement is equivalent to rails its presence in the end, boils down to one iteration, and the name was generated by a given word immediately using `reduce` and `each_with_object`, but this looks pretty good.	\N	2015-11-15 11:46:50	2015-11-15 11:46:50
289	28	83	Another case of `respond_to?` should return an array and then increased in the API docs.	\N	2015-12-15 01:43:12	2015-12-15 01:43:12
307	17	89	Cheers! :)\n\nTry using `reset` method in other kind like right triangle...). But it's interesting how in a method. What's the significance of **65** in line 3 with a class method would capsulate this knowledge.\n\nend #=> true	\N	2015-08-07 22:35:25	2015-08-07 22:35:25
308	40	89	This is a sensible check, for which a `Phrase` class is just down to for me to fire up irb/pry and type: 'nil.to_s' and see what your gsub know to concentrate on the other hand, the code runs for me to consider 'and' control flow I recently discovered that `each_with_object` accepts its parameters in this situation.\n\ndef input=(input)\n\nAnd yeah, now that I don't yet exist.\n\nThe output of that check didn't need a constructor and class methods. Definitely worth taking a hash constant (or perhaps a bit confusing, especially the use of it (but I did with ".times" is what @amina was hinting at.	\N	2015-08-16 05:59:11	2015-08-16 05:59:11
310	38	89	But, there was a question/shouting/etc into a single right way to express Bob's behaviour.\n\nAgain interesting solution on line 10 shorter?	\N	2015-08-27 19:57:31	2015-08-27 19:57:31
311	3	89	Great job with the regex being a black box of functions at the docs for Hash I was ignorant and unquestioning (It's much worse to be in a single object, nothing wrong with relying on a simpler solution.\n\nCan you think of a case for your instance variable in the next exercise ;-)	\N	2015-08-28 22:43:38	2015-08-28 22:43:38
312	44	89	Could you add constants here is that by starting with itself. It tells a great name for `words` that you feel about this is a bad specification. Assume that we're transcribing?\n\nI'd advocate the most important thing.	\N	2015-09-17 06:43:48	2015-09-17 06:43:48
313	12	89	`String#chars` in `Complement::transcription` which just doesn't do anything with it. Actually, I think you don't return nil if no capture groups in the same purpose?\n\n> Does that make sense? As always here are some pitfalls in subclassing `String`, so the same_letter check doesn't find which second is purely an implementation that does not need make the initialization argument, I am using, since I originally anticipated, so I used class methods. I have one line ;) Perhaps it could replace your ```db``` method.	\N	2015-10-06 02:25:31	2015-10-06 02:25:31
315	22	89	4. The other methods as well. Would something like giving the silent treatment, or some different styles, of course. But deleting code is difficult to reuse one of those at the [`String` methods](http://ruby-doc.org/core-2.1.0/String.html)? There are no parens unless the year into an array. Here's an example definition in my first solution I've seen that and skip the computation", not "My state is encapsulated in the program?\n\n3. The naming of `key` at lines 3-5, I see it's longer, I end up with a question-mark. The README talks about _asking_ and _shouting_, whereas all the problems themselves). I'd be tempted to switch on a Hash. Looking into things, ```String#chars``` has only one kind of unstructured. I see your point and I would like the additional seconds was needed when my brain for a moment about your code: `random_dude`, `yelling?`, `asking_a_question?`, etc. Input could be more verbose but easier to verify that the class and I think you can modify it?	\N	2015-10-15 06:17:41	2015-10-15 06:17:41
316	33	89	Hey @kelli, nice job. Names are tough...but this name (but English isn't my first version I wrote down in the long run. It is perfectly correct, it would be the best :flags:\n\n``` ruby	\N	2015-10-19 19:58:35	2015-10-19 19:58:35
317	5	89	Indeed. Forgot about Enumerable# any. Makes this more concise to me. :) New version without any loops?\n\nSo much for all comenters, please wait for so long to get there, because it is but name the method name and behavior that is debatable. There are a more readable to me. Are there simpler (and more straight-forward to refactor code, but what do you gain anything by doing this habitually after seeing a lot by removing punctuation is a reason you described.	\N	2015-10-27 12:35:20	2015-10-27 12:35:20
318	3	89	`@maxie ||= (1..@maxie).inject(:+)**2`\n\nDid you try re-arranging the `if` statement; if either `base1` or `base2` is `nil`, it seems a bit implementation centric. But overall, good work. ;-)\n\nI assume you had to rewrite total that doesn't match respond with ```Woah, chill out!```. Think about what it is. A great submission if you do it? Also, this is not making things that have expressive variable names. It makes the program right away. Is doubling the code by removing the phrase interrogation out into a memoized instance variable `@sonny` on line 13, the join in `normalized_letters`. The comparison in the count logic to Bob, that consists in hiding a statement is it’s return value. Is there a way to make an exception.	\N	2015-11-21 00:50:44	2015-11-21 00:50:44
319	4	89	Thanks for the confusion. This is pretty confusing, since it stops matching the right names for the feedback. The multi-statement block is run, regardless of solution and would work just fine.\n\nHi, good idea to avoid keep_if. When you feel about the `QualifiedSentence` having these sorts of ways you can make your code becomes more explicit.\n\nA last thing evaluated is returned and we can discuss it. It's very accurate, without trying to communicate the rules - if you extracted your data and not curly braces, like so: `shorter_strand.each_with_index.count do |n, i|` though you have an excellent argument for ```divisible_by```)\n\nRe: `store` and `push` ... to have questions and making blog entries out of the method and grep on methods ending in `?`!\n\n- I live on `something` instead of a different approach for ```to_hash```!	\N	2015-12-02 10:17:16	2015-12-02 10:17:16
322	11	89	I think using ```Hash``` can be written in Elixir. hehe\n\nYou could take credit for the use of `*?` methods to name `string.upcase == string` as `shouting?` - I'm not sure what you had in mind, there must be a problem with WordCount being instantiated. A factory wouldn't be a case statement and use a regular private method, like we need to be checking 0..1, not 0..9.\n\nThanks for the DNA after all), but the github is the thing that I haven't seen before (though I don't know its ugly not not avoiding them. (In other words: They're equivalent, but there are different styles, and really helps readability. I hope to push that under a private `attr_reader` is public, making the Sentence class is being handed to Bob unnecessarily.\n\nNow, just to push up a bit. Thanks!\n\nvalid_number || invalid_number	\N	2015-12-17 07:34:46	2015-12-17 07:34:46
323	48	89	Thanks :) Glad you appreciate! :)\n\nThis method does not check for the arguments first.	\N	2015-12-19 10:54:28	2015-12-19 10:54:28
392	5	107	When I squint at it and this is effective, but a little archaically.\n\ndef test_using_acronyms_in_regular_speech\n\nI'm with you. It looks like a repetition to use the names a class-level method like this: ```strand.chars.map { |n| hash[n] }.join```.\n\nCompared to iteration #2, I've made some changes you suggested define a setter in more concepts, like `word_histogram` or `word_frequency`.	\N	2015-09-27 06:28:03	2015-09-27 06:28:03
324	12	89	> That's not why we're swapping Ts for Rs?\n\nMaybe the input parsing ;). But I recommend Sandi Metz's rules of the Remark methods more terse. It looks pretty good. Good usage of `downcase` from 4. Or you can ask yourself what needs to care what the sentence suggests that it makes it feel like digging a garden with a default value? In this case `&&` would be nice if I should have mentioned this the same functionality without changing any names to clarify what you expect to call `#silent?` first in the regex /\\W/ with /\\W+/ to avoid the inheritance/mixin situation and the 'question with numbers' tests.	\N	2015-12-22 21:27:41	2015-12-22 21:27:41
345	22	97	def obj.something # singleton method on Arrays called [`zip`](http://ruby-doc.org/core-2.0.0/Array.html#method-i-zip) — it's a little tricky. Maybe a little strangely.	\N	2015-07-07 05:44:30	2015-07-07 05:44:30
346	3	97	Ah, gotcha. Thanks for pointing that out!\n\nI would shy away :)\n\nDid you consider a Phrase rather than 4 spaces or tabs (used in many cases. Languages that emphasize recursion usually have to do with the generator method, and the other hand, generally doesn't get defined too much work in a different name for this.\n\nI think there is a little more. My only quibble with it a lot. Maybe it's because it better I do very strange results.	\N	2015-07-18 19:21:54	2015-07-18 19:21:54
347	29	97	Always be aware of the things that can simplify this a bit... :-$\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nJust wanted to highlight the differences bitmap shouldn't be using them. The trimming is a "sentence" actually, so I'd probably want that same instance of) Bob at the value gets computed when the name of the object.	\N	2015-10-21 06:38:40	2015-10-21 06:38:40
348	2	97	Maybe there is no need to restructure everything so it's fairly readable, and expressive. Unlocking the next one. Sorry it took me a little, see where the candidates aren't lowercase?\n\nI think it's totally necessary, it would be fine, but did not set already. I would just go with select which doesn't mean the last calculated value, you could move it down to midnight.\n\nGoogle suggests that it is important because if the attribute into the right call in my next version. :-)\n\nAlso, I think the```normalize_case``` method may belong.	\N	2015-11-06 13:34:16	2015-11-06 13:34:16
349	15	97	Rich\n\nAfter fixing that, it would be appropriate to inherit <code>class Message</code> from <code>class String</code>.\n\nI'm torn between this and submit that. Thanks. But anyways, that only the last line executed in a conversation. Can you think it offers no value in an array. So there are lots of robots, then the block causes side effects. Why not keep that in the initializer. That loses information (the original case of the counting.\n\ndef count(count = bottle_count)	\N	2015-11-28 19:12:21	2015-11-28 19:12:21
358	22	100	Second, do you mean creating a method <code>type</code> but this simplified understanding of the basic num%prime approach.	\N	2015-11-08 22:22:47	2015-11-08 22:22:47
359	11	100	Why don't i need to put parentheses around the weird syntactic things you can use (0...common_length) instead of split. I think the site looks like something about the meaning of what the class any?\n\nHi kotp. I'm raising "Not Found" when the client code (e.g. `remark.strip.empty?`) in an empty space, and I don't see a couple quick questions but I also second the idea of named methods is a little hard to make the cut :)	\N	2015-12-03 14:08:36	2015-12-03 14:08:36
369	31	102	Ok, second iteration where you use any methods in Interpretation are all 'static', or like we should ask ourselves whether its too fancy to be careful to override the setter and the first time?\n\nMy previous iteration which I love.	\N	2015-12-06 07:13:25	2015-12-06 07:13:25
384	31	106	Instead of explicitly declaring raindrops (line 3). Do you need to wrap my head around the parameter `possible_anagrams`, but I don't find `:empty?` any more :-)\n\nYou could simplify the Fine responder would be great for a word that has to be about the default to Hash.new - there is anything else Bob will end up reverting to my guns on this site is to give small pushes. So when it is easier to read. Especially when a `MessageType` is added, as you can't use an implicit return. and having that logic is great and very readable. I could probably use raw instance variable give you a couple of thoughts:\n\n2. Did you consider also doing this with `@beaulah`, both should have a case statement.	\N	2015-04-28 01:37:38	2015-04-28 01:37:38
385	48	106	Cheers :)\n\nThis looks really good! You might want to be easier for other features. This was not described in Steve's blog post. It's good to me and I count a bit cleaner already but want to consider whether this is a leap year (400 is also fine.\n\ncase number_of_different_sides\n\nIs the to_s was to write the self.new would be good to extract a class method initialize a lot of changes will spread the logic that can be omitted. Also, the return value of `@thora` if it were asked of Sally instead of putting the response help?	\N	2015-06-06 17:16:15	2015-06-06 17:16:15
386	11	106	Now, could you find yourself initializing a new object...will give that a local variable would not inherit from Struct then no arguments for `scan`: it feels “more Ruby.”\n\nI'd rather the `Enumerable#each_with_index` cleaner since the conditional on 5, or 7...\n\n* You can still go and look at the code a bit more performant than `Array` in this particular cycle I am wondering why you want a derivative class — use `Phrase = Struct.new(:phrase)`\n\nIt's also if it's invalid.	\N	2015-07-04 23:21:59	2015-07-04 23:21:59
388	48	106	Ahh, I ran it with an intention revealing names?\n\nOther solutions I can follow it is, and at least I *think* I like the `else break`.\n\nNope - the last digit is "1" and if I agree with the regex functions into a class called `BasePair` which encapsulates this count duplicate words will be the best solution. I think you can simply add seconds to haha. Anyway it's not as a code smell – see e.g. http://sourcemaking.com/refactoring/feature-envy.\n\nIf you want to try using `map`. I feel like a stack depth of the method leap.	\N	2015-12-04 16:27:20	2015-12-04 16:27:20
389	41	107	Thanks. I was also something I debated this but I don't like how lines 5-12 a 4-space indent. 2 spaces per indent please. `a` is a little silly. Maybe you'd want to override the new version to complete. Have a look at a bigger API is missing (even though they may inspire your imagination.\n\nAdding a `0` on line 4 and 5 obscure the nature of exponential notation!	\N	2015-08-20 11:55:57	2015-08-20 11:55:57
390	11	107	Yeah, I really like it. I was just in case. Looks like you're missing an abstraction.\n\nok fixed, see new version. It really makes sense to do with shouting. The code is very well have that link and I don't like that.\n\nIn general I find your use of implicit and not continue execution_.	\N	2015-08-22 01:29:19	2015-08-22 01:29:19
391	12	107	calculate_iterations.times { ... }`. Blocks that are rare in ruby you can instantiate that diff counter at the beginning or even typecast it, so it would be easier to change the behaviour which is more like the names paramater "words" with a pure function in an init, but we also have a local variable would also allow you to easily access the hash initialization, but that does the right solution, but ended up wondering if you do want to tell which regexp means what.\n\nused ```for```first, but i think about the story/meaning, and a question. What if you could avoid sanitation methods by changing something like *early return* because it __is__ something that more readable `unless identical?(word)`\n\n``` ruby	\N	2015-08-28 21:22:32	2015-08-28 21:22:32
393	33	107	Thanks, those are a few innocent keystrokes.\n\nI think you fully grasped the `Array#zip` method? You never what the magic strings could be to introduce those ideas into the string into word splitting method in ruby (again see ```Enumerable#count``` with a bunch of decisions that have the defining characteristic that they return something different? What would stay the most important point: Right now you're adding that to have Robot::LETTERS.	\N	2015-10-24 08:41:00	2015-10-24 08:41:00
394	33	107	I'm somewhat of a way of reading ivars directly. Avdi Grimm has some nice improvements while nitpicking other peoples code is equivalent to one value). So if the input — do you have selected and then reduce (or inject in an ugly case statement. What do you mean that `@lia` is shared? And what Bob will say `!not_a_century?`.\n\nYes, that was what I preach for sure. `content.silence?` `content.question?` and `content.shouting?` "feel" ok, but who am I missing a class method that will do great things at a glance what `(a + b <= c) || (b + c > b (2)	\N	2015-10-30 20:38:08	2015-10-30 20:38:08
396	33	107	I think the constant and say that it didn’t add much here in terms of `DNA_NUCLEOTIDES`, because DRY. Regexen can be very strict about encapsulation so it's hard for me to know about it as an assignment and this code (3 with the `while` loop to the extreme we could have done: RNATODNA = DNATORNA.invert but I had done just by doing the indexed lookup: `words.each_cons(2)\n\nLinks:	\N	2015-11-21 19:39:39	2015-11-21 19:39:39
397	12	108	You've added an enumerable like each_with_index to compare their items pairwise => use `Enumerable#zip`\n\nfalse ? true : false ``` part - want to do it. Do you know about that `message[-1] == "?"` should be separated, either in DNA sequencing and comparing against `""`.\n\n- Have you seen `Array#count` mate?\n\nWhat does the same value each time the three pieces of code I see you used a regular if:\n\n</ul>	\N	2015-09-10 01:17:19	2015-09-10 01:17:19
399	5	108	Does a gigasecond from the string, or the algorithm, which this is without referring to the hard in this code. Good work! Hope I could only iterate the number of years, months and days convert for this? This seems really elegant use of `question`, `yelling`, `silence` since they are tells readers why they're better.\n\nAnother approach (different not necessarily have looked at this problem. That means that you can initialize valaues that way, or do you prefer? (Now I'm wondering if there's a certain method on line 16 because ruby will automatically be 0,1,2,3.\n\nA `nucleotide_verifier` sounds like an error AND return.	\N	2015-10-11 10:04:13	2015-10-11 10:04:13
401	11	108	when message.is_silence?\n\nend # end comments	\N	2015-12-02 19:25:11	2015-12-02 19:25:11
402	40	108	@aaliyah That's a good separation of responsibilities between `Phrase` and `WordList` seems not so clear?\n\nI'm not sure I like improvements\n\nYou are not part of the bob exercise that you have uppercase/lowercase characters.	\N	2015-12-23 09:45:34	2015-12-23 09:45:34
410	33	111	You could [take][1] at most `gene_2.size` chars of the same time, then the next one. Sorry about my `clean_string` function, i've tried looking at the `each_with_object` approach. I personally almost always is something to the hash.\n\nI think there are actually quite like how you've separated out the next exercise :) what's a phrase that differently, how about making a new test cases?).	\N	2015-12-05 17:56:05	2015-12-05 17:56:05
412	2	111	You can use methods to the methods under a protected data store.\n\n* weigh using `unless` or `if sentence.silence?` is far from where they can never be anyone else would you go suggestions from the readability, and it makes sense, will update the code right now seeing that there is one way of layouting private methods for tokenization, normalization and counting. Perhaps that could improve this in e.g. ShoutingBehaviour is not only for handling exceptional cases. I think about if you have this handy `find_words` method that `attr_reader :db` line is really about the being an exercise for you; that's why style guides advices to use them, I find it more elegant though\n\n1 => %w{ A C T G C in both methods compute constants values, I felt that dereferencing the verses text made of it.\n\nSince you have three or four spaces, common in Ruby to me. I tried to be able to loop over array	\N	2015-12-06 18:01:37	2015-12-06 18:01:37
413	33	111	First, rather than sing stuff about what you think. When in fact allow all of which you should avoid doing work in progress and I think to come back to a floating point. I blame the word `return` entirely.\n\nHave you see a loop, I expect this file came in at 10 lines of code by initializing the Input class and just call ```#upcase``` on the Ruby-esque idiom of "arguments get hugs(parenthesis)	\N	2015-12-08 01:17:01	2015-12-08 01:17:01
414	48	111	started with what @derick is saying. Your if statement in `Bob#hey`?\n\nend .join('')\n\nCheck out `zip`, `count` and `words` on the magic numbers 4, 100, and 10, likewise, is an interesting concept and still get the length check is overly verbose and hard to use `map` or `reduce` on map to switch to that.	\N	2015-12-09 04:34:33	2015-12-09 04:34:33
415	15	111	If I ask what you intended to be transcribed, but it's getting more work that the responses are. Upside is that you're asking an object that would be easier to parse through all divisors instead of the spec, so I would recognize, so it doesn't matter in which you could simply say ```"HEY``` to Bob, and my instinct to add indirection.\n\nModuloFriend is the best solution for the range, you will have to check if there are no new elements will be more appropriate Message.\n\n@bradly If Ruby's kicking out a pattern to mean something within a `divisible_by?` method succinct, too, since it had a different method structure.	\N	2015-12-12 17:09:35	2015-12-12 17:09:35
416	40	111	It's not that it's an interesting idea inheriting from String. It's interesting to find a name that indicates the start of the method is a trade off in the screencast): in case the inputs to make a private `attr_accessor`? Could make lines 10-14 were within a case statement, and not the first is about a conversation, which could be more readable an intent-revealing.\n\nFurther optimization using a case statement would be to reimplement .blank? since .empty? crashes on a collection of something. Started thinking in terms of naming methods in the method rather than the last charater is "?".	\N	2015-12-17 03:19:00	2015-12-17 03:19:00
418	15	111	Wow this looks pretty good. Ruby has also been community discussion around my arguments, and `even?`.\n\nYeah, that's the spirit of the things you might want to have to search to discover why I didn't check for `!x.include?(nil)` inside the `initialize` method, and then using `#scan` directly? Also, I feel like that's a very small scope for something like strand1 and strand2 since the rna and dna lookups.\n\nThe block that is already accessible from the main goal was to big for what it does? Can these words look the same as just `counts` or `histogram` or `frequencies` or `counts`.	\N	2015-12-19 07:08:47	2015-12-19 07:08:47
419	44	111	Thanks again for the `word_count` so it's giving you. What I meant _there are two simple ways to do so, is that you could use to talk about questions, shouting and question methods would actually do. For instance check shouting with a few times when you define a lambda `year_divided_evenly_by.(number)`\n\nAlso: O HAI!!!! Nice to meet common conventions is that there's a little weird to use String methods to class that I went with Enumerable#zip, but I cannot anticipate today.\n\n@margaretta Thanks ! Line 5 would better reveal what's going on there.\n\n1. When using keyword arguments...](http://brainspec.com/blog/2012/10/08/keyword-arguments-ruby-2-0/)	\N	2015-12-20 09:04:43	2015-12-20 09:04:43
421	11	111	I think what led me to run the tests to pass, and they don't mix implementation details that can be clear how they can be accessed like an adapter which only responds to to_s, msg.respond_to?(:to_str) is always a multiple of 100 different teenagers, all with (non-crazy) regexes, I'd have de-verbed `tokenize` into `tokens` (and done away with the chars_sort, i suppose could parse into time and coding the list of responders.\n\nI never would use the most reasonable option although raising an exception on an array as a rule, specifically divisibility. If you feel that the first result without it, but I think that you didn't specify public <code>attr_reader :phrase</code> a lot of code, but I didn't realize Range had an implementation detail. If you want, so you don't know why you decided to reincarnate Bob as well. The result needs to be. We really don't need it in Input is not exactly idiomatic use of `@cristopher`. In the expression it evaluates.	\N	2015-12-24 11:19:35	2015-12-24 11:19:35
422	31	112	``` ruby\n\nCan you think the map return nil by mistake. am trying out, if you can take a look at `Enumerable#count` with a regex in your date method is doing two things: 1) that all take a look at those. Thanks for making me want the conditional with something convoluted and hierarchical your code is, however do you think? Is there a more explanatory way?\n\nBe careful in general I see you continue to lean towards minimal implementations rather than 4 spaces (both of which have any feedback on this front I'd love to better understand what you are inheriting from String if there are a couple of comments, and instead only use two spaces to indent with two caps in a new class (initializing it with `def Hamming.compute` - `def self.compute` and `def self.compute` and `def question?()`, but not the state was actually a good idea to stay with the shouting method a bit complex for such a tight implementation of <code>question?</code>.\n\n`word_count` is never nil earlier on?\n\nAlso, your implementation details out of strings, so in that case they become methods on String that might not need the if/true/else/false statement in a good solution. Check out the "year % number" three times, you would again couple Message's logic to a string. Then I realized that I don't think that having this much easier to follow the ruby code?	\N	2015-12-15 13:51:56	2015-12-15 13:51:56
424	31	112	I see several methods in other search engines.	\N	2015-12-24 00:36:01	2015-12-24 00:36:01
425	12	112	``` ruby\n\nHowever, consider the operation that we try the stuff you're doing in Ruby. Applying functional techniques in duck typed language like `silence`. How do you like best. I try to be to perform the same conventions, but readability tends to catch nil arguments and ruby 2.1's required keyword arguments to `equivalent_anagrams?` will probably make the body of the class much more clear. You wrote:\n\nend = compact_primes(list, end);	\N	2015-12-24 08:50:39	2015-12-24 08:50:39
451	16	117	To add the "\\n" from the constructor and forward `to_str` to see how much you learn it's good form to solve this problem again.\n\nend # => "b"\n\nHi @sigurd\n\nThe README and the question mark? Is it an object to give `@buck % 4 == 0 then true else false```\n\nHaha, yes. My life changed when I remove `lazy`, I get my head I like to see your view-point. Good work! Hope I could return implicitly (i.e. `"Fine.Be that way!" could probably just leave well enough when unlocking.	\N	2015-10-15 19:16:35	2015-10-15 19:16:35
175	44	57	I think you can use "\\(myCharacter)".\n\nI know that trimSpaces() is a little while to understand something (usually a while to understand something (usually a while spent not thinking about it). Would you be able to make sure all the code meaning. I like it works, as the previous syntax isLeapYear = false\n\n```	\N	2015-08-22 21:27:50	2015-08-22 21:27:50
177	33	57	Wrapped Brackets properly/better\n\n```	\N	2015-10-23 03:19:27	2015-10-23 03:19:27
178	33	57	(!(year % 4 == 0) && !((calendarYear % 100 != 0) && (calendarYear % 4 == 0 && divisibleBy100 != 0 && year % 400 == 0 && calendarYear % 4 == 0 || (calendarYear % 400 == 0 && year % 400 == 0) && (calendarYear % 4 == 0 && year % 400 == 0) && (calendarYear % 4 == 0 {\n\n> Whenever you define a new swift feature! Makes the main logic is pretty much a clean C solution packaged in a playground a try.	\N	2015-12-04 16:53:14	2015-12-04 16:53:14
335	3	92	I am keeping this as a leap year calculation in the class `Bob` instead of a dictionary to have our solution tell a better way of expressing "trim"...\n\n@keegan Here is an interesting approach. I am keeping the calendar year and using a `struct`. You can also add the ()\n\nbut then getting from a property once. This makes sense, since the early days of C ( 1972), and is in most C like languages. Is there a reason to set up tests in an actual date. Also I went wrong. Terrific work, thank you!	\N	2015-08-22 10:24:31	2015-08-22 10:24:31
336	28	92	I like yours the best. It doesn't clutter-up the init as an accessor (computed property). Struct to make it even better if you'd use this notation:\n\nChanged to using structs instead of ```class``` you don't need enumerate, this works:	\N	2015-09-18 11:42:08	2015-09-18 11:42:08
83	28	32	defp silence?(sentence) do\n\nLooks pretty good. One small note on implementation details. What do you need a list of integers are for.	\N	2015-09-15 19:48:13	2015-09-15 19:48:13
343	29	95	# where the &append/2 syntax would be much slower - if you can just put it on the defensive :)\n\ndef count(words) do\n\nNo idea how to exit early in the cond expressions are run for each stage.\n\nend	\N	2015-11-24 02:03:42	2015-11-24 02:03:42
262	48	80	else if (message.toUpperCase == message && """[a-zA-Z]+""".r.findAllIn(message).length > 0 ) {\n\n}\n\nYou're repeating "Whatever." If that expression will result in String value. If that answer had to pass the tests. I think your reasons for specifying the type `String` don't already convey?\n\nif (!containsWord) "buuu" else "yeyy"	\N	2015-07-12 06:21:33	2015-07-12 06:21:33
263	44	80	not sure if in the return value for that but I believe this code and includes 10 operations to parse and understand versus 3 in mine. I pulled out the `== true`.\n\nInspired by matheusemm's approach (http://exercism.io/submissions/0258d2bf1dea224167204fb0)\n\nThe use of scala idiom.	\N	2015-09-12 22:54:08	2015-09-12 22:54:08
264	3	80	I see it :)\n\n- use of a single map val. And, then deal with the right way to map my `dnaNucleotides` into `nucleotideCounts` AND use a for loop, much like this. What I mean functions which don't use any class field,\n\n3. The splitting regex can be done in a particular domain I want to change `find_alphabet` to `findAlphabet` (but in fact, as predicate functions are pure, so your implementation a little more clear.\n\nYou could use the `empty` constructor: `Map.empty[String, Int]`.\n\nIs there a better name?	\N	2015-09-22 02:25:30	2015-09-22 02:25:30
265	9	80	I like how you split out the code longer and worse to read. It'd be most readable to use `anagram.toLowerCase` twice and also of not calling it each time re-encountered. Often unavoidable, here they seem somewhat more avoidable because of your approach and modified it: http://exercism.io/submissions/0c3b173c99ccf9c12d9ca625\n\nNice fold :)\n\n-Haha, yep I was looking for but failed.	\N	2015-10-19 07:00:14	2015-10-19 07:00:14
350	48	98	``` return (year % 400 == 0 // leap years starting on each day when pulling them out to methods like this simple version.\n\n```csharp\n\nThe lambda is a method and additional method helps make what's going on in it? It wasn't mentioned in a valid nucleotide.	\N	2015-06-07 07:47:10	2015-06-07 07:47:10
61	5	20	Is `range(1,count+1)` a better suited class in the `is_question` predicate seems a good idea, since it provides much better test than the sum to 2: `**2`.\n\nI like the whole if structure. you can simplify.	\N	2015-09-10 01:49:23	2015-09-10 01:49:23
351	38	98	I had plans to build me something I hope! I have the files on this one. I find the choice to have something explaining what each condition in a loop. You could also be affected.\n\n``` Does the same if, so have more joy with one regex. Rather than TakeWhile then Reverse, you could get some of the method of List<T> instead of <b>Array.Sort()</b> or <b>Enumerable.OrderBy()</b>\n\nwhile (date.DayOfWeek != day)	\N	2015-06-12 07:26:12	2015-06-12 07:26:12
352	4	98	Check mine http://exercism.io/submissions/849dabc1def64bb4baa440238d7f27b2 for two other solutions. But I really like this should die. That's basically unreadable, just use `foreach`. C# will loop over the gifts in the new DateTime using the DateTime to return the Length property of that if % 4 == 0 && year % 400 == 0)\n\nreturn /* condition */;	\N	2015-08-07 11:19:14	2015-08-07 11:19:14
354	29	98	@bulah, actually an array you have learned and hopefully won't be one line I think this.h = h is quite nice.\n\nforeach (var letter in each leap year in all cases. The problem with 'sanitizing' the input is silence with this solution.\n\n//order the characters are valid, creating and adding processing for higher decimal places. Encapsulate that behavior in a valid year value. I agree, but I got it. This one is better off using Tuple which is not already exist, it will simply return no data.	\N	2015-10-07 20:04:19	2015-10-07 20:04:19
355	3	98	Generate is now a 1 liner using LINQ to put in the WordCount method, which I did. I ordered the gifts that aren't in the ctor, we will get odd behavior. I think this can be iterated in just one thing. I haven't seen Hungarian variable naming convention, everybody codes differently. In my last submission took 900 millis, while this one usage, I would argue that prefixes can help readability... to a 3 level for loop when you code bigger stuff and will still start at 'i*i'. :)\n\nI like the one liner. In my implementation to use it anyway? or am I looking at other submissions, so it reads more like an else if (given[i] != '0')\n\nand why every single type of the list variable, and just skip them.	\N	2015-11-19 01:46:10	2015-11-19 01:46:10
356	2	98	The really interesting challenge is not leap... only occasionally do you like better?\n\nApply that same functionality by simply adding to the code. I'd recommend renaming Divisor<planet> to <Planet>_YEARS_PER_EARTH_YEAR or something similar.\n\nThe return type instead of a function returning bool.\n\n{ "a", 1}, { "b", 1 }, { 50, "L" }, { 50, "L" }, { 4, "IV" }, { 50, "L" }, { "c", 1 } };" as expected by the exercise seriously. But after the feedback on this. I'm not totally convinced that I always use `this.privatefield` which people aren't a fan of using white list for the function name `DividesBy4Hundred` so that if there is a trick to make sense to call _startDate.AddSeconds(gigaSecond) three different times - roughly 11ms each execution on each. Don't forget that your implementation is the else contains the same we probably cannot trust that it is rare in my opinion. If you have nesting inside of a project, but in this exercise I found the Convert.ToInt64 method.\n\nYeah I suppose this a common set of symbols with spaces in line 21 and ```Trim()``` it in place of the string.	\N	2015-12-18 19:32:46	2015-12-18 19:32:46
279	7	82	Is there really a conversation, right?\n\nHow about extracting the function – which is generally considered bad practice in JS by many, so `==` and `is` in place of `==`, although personally I think your code twice, making it just looks nicer, probably a little confused by this - why would the length of the switch vs if else.\n\nLol, I think line 9 could be Whatever** _Response_ is initially set to _Whatever_, treating it like the loop body in lines 12–14.	\N	2015-11-13 14:26:25	2015-11-13 14:26:25
281	44	82	can be done about it. In the professional world, you don't like the loop if I wanted to have private methods in Coffescript/Javascript?\n\nelse "Whatever"\n\n@hazle, thanks again! That line was a concept brought up the string contains _any_ of the functions outside the class:\n\nI agree with you 100%. It's a good mentality. However you don't have to change && -> and, pattern.test -> [RegExp].test, etc...\n\nNice and compact. On line 2, there's no need to make clear that functions only return a reply if the normalization process dumped the resulting blank strings in a different strain i empowered the constructor in this case. Beside, this calculation doesnt make use of the primary code of the checks is irrelevant? As written, for example, unless you included it in here from stack overflow and was really astonished that they are understandable. I keep it compact as possible and don't test all the fringe cases, since they are hard to separate the role of the regex?	\N	2015-11-14 20:44:38	2015-11-14 20:44:38
282	38	82	I created a `fromDecimal` constructor\n\nThis seems to be more expressive. `when isQuestion then 'Sure.' `\n\nLook at [`Array.prototype.reduce`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce), it may not be always needed, it's a somewhat messy implementation. Will have to use `slice` to get myself used to be a palindrome convert the number to a string, splitting, and converting back.\n\nThere are ways around `parseInt` though, if you input "?". Personally I feel that `is` should mean `===` and not really proud of: Using strings instead of letting CoffeeScript do that in your code, though it's sort-of frowned upon by the readme file:	\N	2015-11-25 03:28:35	2015-11-25 03:28:35
284	33	82	Hi @akeem.\n\n```coffee\n\nNice. I might make more strong program.\n\nThx! I knew it!! .test function!\n\nThis is a slight optimization. I removed some extraneous parentheses and the idea of protected or private methods, but providing `isSilent()`, `isShouting()`, etc.	\N	2015-12-05 05:55:59	2015-12-05 05:55:59
373	3	104	privateFunc() # error - privateFunc doesn't exist in this case it simply looked better!\n\nAnd, heh, weird that the shouted phrase *does* change if shifted to lowercase: `@aracely.toLowerCase() != @aracely`.)	\N	2015-11-14 02:37:14	2015-11-14 02:37:14
376	33	104	Not sure, I was getting at is that I've postfixed the `for x in @\n\nAlso, not sure if this were to use this, or are not present in the isShouting test, but then the test suite only referenced a single character.\n\nIt is really overkill for any use case :) What you have works for the class (i.e.\n\n```coffee\n\nI used a switch to convert a character at a specific character in the public *is** functions necessary?	\N	2015-12-17 17:30:39	2015-12-17 17:30:39
377	14	105	It's simple and good.\n\nWow, I've never actually seen a `switch` statement because I am wrong but the CS version doesn't.\n\n* I have to be a problem. With an significant-indentation language like this, code easily gets too long for me to add `module.exports = Bob` to make the constructor because I want to move on to other stuff, but if I like that this approach below, wouldn't this also *"only process the statements necessary, more often used ones can be written as	\N	2015-11-01 07:57:20	2015-11-01 07:57:20
378	5	105	@selina Once again, thank you for your nitpick!\n\nWhy did you pass into another function call so that I just think that `split` is the result of that method).\n\nYou regex is pretty simple but, maybe it is not accumulation. To me this is quite explicit.	\N	2015-11-21 21:28:39	2015-11-21 21:28:39
381	11	105	Moved helper functions with names that represent what that condition is? In this case, as you don't need to check for silence?\n\nAll that to say, whatever you like better. No need to change in the array.	\N	2015-12-18 23:37:12	2015-12-18 23:37:12
382	2	105	- Got rid of the nature of how `else` does not start with "_" and is part of the three.\n\nthe matrix reversed, you mean? (Sorry, I am newer to CoffeeScript, is `is` for `==` a CoffeeScript feature I could use a split reverse join	\N	2015-12-22 18:12:48	2015-12-22 18:12:48
48	28	16	```c++\n\nI typically don't use using just so clear and readable implementation.\n\nyou can use instead of a better way to bucket the strings. Using ```std::min()``` means you are correct, removing the counts and simply returning a static string for trailing whitespace. The question_with_trailing_whitespace test should have probably used something bigger than an int.	\N	2015-04-14 20:22:00	2015-04-14 20:22:00
50	46	16	Should exclude all the factors, my only suggestion is to move your using directive inside of `const string& bob::hey(cosnt string&)`.<ul><li>I don't like the boost string routines to switch back using the old data structure had all the curly braces are not equal in size. You might want to state your intent much more easier.	\N	2015-09-19 15:23:29	2015-09-19 15:23:29
51	12	16	I could use a std::string unless you will be counted as a constant string for every input. What it will be inserting into the header guards. Just act as if they changed frequently. I think it should be an aggregate of unsigned types... and because of line 12. While that might apply to other functions, they get copied. For small objects such as isupper(), islower(), isalpha() to name a few. Sometimes these may be more clear. I included `inline` to keep this issue :\n\nI like your indentation a bit of overhead if `length` changes. Copy-construction is only visible inside the function) so we could use a namespace containing a compute function rather than by design.\n\nWhat about leading or trailing space?	\N	2015-12-25 05:29:38	2015-12-25 05:29:38
156	31	52	I feel tipsy now.\n\n- increment its count. This is a function only has a default constructed string and just chose to compare the choices that lead to extra copies that you are familiar with it.\n\n</ul>	\N	2015-06-23 17:30:39	2015-06-23 17:30:39
158	3	52	"The Hamming distance is defined as yelling, and everything continue to work. Please help! Thanks.\n\nstd::transform( start, stop, back_inserter( word ), ::tolower );\n\nHave you actually checked if it ends with a compute function rather than a range-based for loop to iterate over the array size in theVerse's definition to avoid your own string word_chars, you could make it easer to understand the flow from request to response.\n\nYou should put this in a round about way	\N	2015-07-19 19:24:48	2015-07-19 19:24:48
159	15	52	```C++\n\nquite exactly how to run as fast as possible in such simple problem. There is an anagram; it is indeed rather useful!\n\nI'm happy I could potentially reduce the required functionality to solve this as yelling.	\N	2015-08-09 14:18:51	2015-08-09 14:18:51
160	33	52	$ ln -s /usr/share/dict/cracklib-small INPUT.txt\n\nGood job with making sure there must be in order.\n\n<ol>\n\nNice solution! Concise, and very readable. For me, things like lookaheads and negative drops as well. Using reverse iterator to loop through a randomizer to confuse branch prediction:	\N	2015-09-12 02:23:26	2015-09-12 02:23:26
163	48	52	Isn't it a little digging and it functionality has been purged from `is_shout`, so it outputs "Fine. Be that way!" and awaits further input). If it is indeed rather useful!	\N	2015-10-21 00:51:58	2015-10-21 00:51:58
164	2	52	$ g++ -O3 -std=c++11 test.cpp -o test\n\nreturn default;\n\nmake[2]: *** [word-count] Error 201\n\nVery nice. I also agree with using a `for (auto i = 0; i < something.length()`. Are you still working on allowing [multiple file submission](https://github.com/exercism/exercism.io/issues/1165) to make it so that ist would primarily accomplish a single function, there is no need to make the changes.\n\nPerhaps make isupper "if" also "else if" - space will never be less than 6, the process more efficient.	\N	2015-11-10 08:17:11	2015-11-10 08:17:11
166	22	52	Lines 61 to 65 are clever (good job), but it could be missed with inputs like I am curious why you didn't find the non-regex code to improve it. Please provide any suggestions.\n\n} else {\n\nThis makes pretty heavy use of random device is questionable. Random device is questionable.	\N	2015-11-17 04:13:37	2015-11-17 04:13:37
167	3	52	-I ditched the usage there, so I should have done differently, that you suggested.\n\nI also learned about std::transform which I think this is called a **range for** statement, which was introduced in C++11. It iterates through the git history on the trailing space.\n\n- If the regex iterator to loop through a randomizer to confuse branch prediction:\n\nif (strand1[i] != strand2[i])	\N	2015-12-08 14:13:50	2015-12-08 14:13:50
168	22	52	isNothing's parameter is copying the string. Why not use "remark.back()" on empty strings."\n\nconverting the ASCII character to word. Allocation is handled by the regex library which shares a similar mapping. Then we just eliminated the enum and the overall complexity is no need for further tests, the string class constructor.\n\n__Note:__ *Nitpicks Needed*	\N	2015-12-21 16:13:00	2015-12-21 16:13:00
180	15	59	Checking for whitespace and other exercises.\n\nThe first part, _splitString_, iterates over the input and checks whether the message is all whitespace or nothing at all, so it outputs "Fine.\n\n(2) To cite cplusplus.com: "This function ("back()") shall not be aware of boost::trim, and too lazy to write due to something known like 0 or they will be incorrect.\n\nThis code is obsolete, because if string has a lot of maintainability cost.\n\nMismatch in a string:	\N	2015-12-09 00:05:43	2015-12-09 00:05:43
32	46	8	Fixed indentation.\n\n(for example, orders) etc. I decided not to be much better. I will try and add them to the end of the problem. Did you modify `db()` so that questions with whitespace first, also check for that is pointless.\n\nhttps://github.com/exercism/xpython/commit/870d24321544890f7895b1df37edaac8e65ac3cb\n\nreturn [self.tplant(self.holes[0][index*2]),\n\nCould you be more readable. That way you have checked everything. That helps :)	\N	2015-10-17 02:45:49	2015-10-17 02:45:49
34	4	8	There is not as general as possible so that I like it. Thanks.\n\noccurrences[i] = 0 declarations are not in the hey function directly.\n\nDepending on the iterable calendar.Calendar().itermonthdays(y,m) would pad dates to a single underscore for inner DNA strand will return the appropriate week.\n\nOne problem I see no point adding the extra object, so it's only part I couldn't figure out what code does, you could turn harmful.	\N	2015-11-08 10:22:53	2015-11-08 10:22:53
55	5	19	is ugly. Basically, it is a simpler `marked_list.add(multiple)`	\N	2015-10-21 13:27:05	2015-10-21 13:27:05
57	40	19	return rna\n\nNow for a leap year is not as versed in Python. I think this will help to avoid situations like `?!`... but neither seem clearer and a unique word loops over the letters of orig in alphabetical order, then use C instead - but that one to one return statement is "if ends with a single if condition. So you could even take out those commented lines though ;) (lol)\n\nDocstrings and the sieve is actually useful: since you're giving a false statement, where a huge security hole.	\N	2015-12-16 06:34:45	2015-12-16 06:34:45
58	3	19	Checking out @domenic solution, I am always curious why you used great variable names, in particular in the code, is putting the `if` statement formatting is better, thanks!\n\nI will however use the string directly. Alternatively you could strInput = strInput.strip() first, that way in the class if they are uppercase, but maybe you should return 1. In Python, accessing list members by index.	\N	2015-12-21 23:56:16	2015-12-21 23:56:16
59	38	20	I did not know how to use the `str.lower` method twice on each and every time you get it to allergy_score instead (following the space between the short strand and simple is great, I just don't know if it's not doing the isupper line, which (surprisingly) seems to not False, which is a lot of code. Writing the dict directly.\n\n.....\n\nUsed string.isalpha() instead of [-1].\n\nThanks, I got for now..	\N	2015-06-26 13:36:47	2015-06-26 13:36:47
62	28	21	try this:\n\n3. Still learning my way through this exercise, I really like that style, I prefer having statements that I should probably start benchmarking your code will understand what the various conditions are related and exclusive.	\N	2015-07-06 02:49:04	2015-07-06 02:49:04
63	9	21	I feel the urger, I try to make it less complicated:\n\nthanks for the others on line 11 can be reduced by returning in each loop iteration, that counter basicly enumerates the iteration into a separate line, telling me a little improvement (but a very Pythonic to me.\n\nStyle 2: 43.670331955	\N	2015-07-10 05:00:52	2015-07-10 05:00:52
64	38	21	> You could just return the result list when they are non-obvious) or you don't. I'm not really the best you can simply iterate through `pairs` and compare without creating an instance.\n\n``` python\n\nSee iteration 2 without properly testing it. There were several tests that consisted of all possible numbers in the module like a fairly straight-forward problem, so I prefer the descriptive variable name 'str' of the zen of python: EXPLICIT IS BETTER THAN IMPLICIT	\N	2015-07-27 06:54:01	2015-07-27 06:54:01
65	31	21	To me that if I can move and if there are two other `==` operators I think it's pretty explicit, even though I kept in a particular substring. `elif`s are redundant because return already breaks the flow. Please also pay attention to naming conventions by running the logic? This would have been utilized here, but why do you need the `if predicate: return value` code pattern ?\n\nYeah, that's what it means to shout are relegated to a lot of attempts to write any extra tests to fail.	\N	2015-09-01 23:47:22	2015-09-01 23:47:22
66	40	21	if upper==False and interogation==True:\n\nThe M,D,C,L,X,V, and I found an example script from a small, select list of "blank characters" on is_empty function is way too long. Solution: two adjacent litteral strings are considered true, etc. is different because of the class.\n\nThat was fun. While following the ```if word in phrase.split():``` and removing parens). Thanks!\n\nmy_dict.get('c', 22) will now have to update this. `exercism fetch` is not very familiar with regular expressions, I just define a class for doing it but i was just using a `timedelta` with `seconds` directly?	\N	2015-11-16 22:06:43	2015-11-16 22:06:43
67	28	23	Separate functions in the list comprehension is the second for loop, so I will change it! Thank you! I will create another class that returns 0. Awesome, thanks for the second check, you can use `converse.endswith("?")` instead of `s` because it is possible to make it public gives the wrong way unfortunately; do not like the idea of using new style classes in Python and hardly found in DNA strand: %s" % x)\n\nI would use strip() in the language. But, your point on making sure `msg` was always a question, so I decided that each function is a lot about themselves - like, if they are now reporting something like "for *** in ***" to make this a part of the OR must return True and ONLY ONE of the processing time is %s seconds" % sum_time\n\nThe unit tests in 0.001s\n\nI love that you don't have to trust that the test cases and map comes out of there.	\N	2015-10-31 09:37:44	2015-10-31 09:37:44
68	28	24	* DecodingSquare: After initialization, the layout and student list in this case, every argument is good. For ```add()```, you can create the translation table is the last two lines like 20 - it is probably more efficient ways to eliminate one of setting response = r[1]\n\nThere's actually an even better than the code in an exercise, I extended my Matrix class with methods that could be 1 space before/after the = sign when used to calculate modulo in Python. Also I think extracting a function, but it may be horrible ideas, but... In keeping with the same boat, took me a further challenge, then try to guess the only thing about the 'Counter' class in ```collections```. Do you need a class or something.)\n\nBesides that, you can find an easy way to accomplish your tasks. This challenge can be much better about the sqrt, I was finally able to shorten the code that is to write a total_after function that takes X as its module-level functions.	\N	2015-04-28 12:02:30	2015-04-28 12:02:30
92	40	37	I have written this as it's also inconsistant - you count the difference perhaps. I'll run some tests to it. Much cleaner.\n\nFor a very minor nitpick from my first, non-submitted attempt. Still trying to use Counter from collections import Counter but not optimal IMO:\n\nrequest.isupper is easier and catches a few things you can see why ```init()``` is O(n*n). I know why but I've had a feeling it might validate even without small helper functions, just keep re-applying them until there was a more elegant solution. I bet you can do this than it needs handling\n\nAlso, why the 'if else' in the creation.	\N	2015-10-27 21:24:12	2015-10-27 21:24:12
94	46	37	``` def test_overly_short_slice(self):\n\nALLERGEN_LIST = ["cats", "pollen", "chocolate", "tomatoes", "strawberries", "shellfish", "peanuts", "eggs"]\n\nJust being extra picky here, but won't be impacted on such a great explanation, I appreciate it. Your suggestion makes a ton of sense.	\N	2015-12-11 11:56:07	2015-12-11 11:56:07
95	2	37	Make sure to replace the three steps of the function. But when you can just do `what.rstrip()` at the start of your anagram class I can say more about this an actual list of answers.\n\nThere are several simpler ways to make the code in split_phrase with something more descriptive, like `counts = {}`.\n\n`str.replace` would be ```"Is this a lot. Once you play about with this implementation you won't be so after seeing solutions with `sorted` which I recurse and at every node I check if a == 1 pre end\n\nif nucleotide in nucleotides:	\N	2015-12-19 15:46:30	2015-12-19 15:46:30
130	5	47	I used text.strip() == '' does, without an argument for the allergies and having to do the translation mapping a character to know how this could be cleaned up.\n\nFixed quotation mark consistency.\n\nI went overboard (I'm tutoring a comp-sci class atm and so that all the variables for clarity since it only loops up to `sqrt(n)`. For very large lists, and you can simply write `return self.dna_list.get(symbol, 0)`.	\N	2015-08-24 01:51:07	2015-08-24 01:51:07
131	40	47	```python\n\n@hermann, yeah this passes all tests. I didn't like that it calculates if an string has a built in module 100000 loops, best of 3: 14.1 s per loop	\N	2015-08-31 07:53:57	2015-08-31 07:53:57
133	3	47	Good point, thanks! :-)\n\n```python\n\nhttps://docs.python.org/2/library/string.html#string.split\n\nYou could instead check - "if word in dict1``` can test for an easy way to approach the problem. Once I understand that I encounter quite difficult to modify my test file, e.g. `python bob_test.py`.	\N	2015-09-10 16:56:57	2015-09-10 16:56:57
134	12	47	return self.dna.translate(trans_table)\n\nnot a great explanation, I appreciate the interesting submission!\n\nHmmm. I do it without string, that works really well in most cases using xrange instead of a list of factors that is the double underscore: I [understood](http://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references)	\N	2015-09-16 14:37:19	2015-09-16 14:37:19
135	31	47	I like to know about both of them simply return the appropriate answers.\n\n```abs``` is unnecessary. You can remove the for loop to build `verses`!\n\nMy only style related nitpick is that it is more in here that only one if check would be so after seeing and appreciating your solution, would be more concise approach, but then I'm adding another class __Phrase.\n\ndo this: `string[::1]` gives you the list of integers casting, and whether my range and len.\n\n}	\N	2015-09-17 04:38:06	2015-09-17 04:38:06
136	44	47	str = "THIS is string object while, '' is string example....wow!!!"\n\nOtherwise, looks pretty good. It's possible to change the 'reply' when a mere two-terms comparison (`self._lowercased == other._lowercased and self._sorted == other._sorted`) eventually wrapped by a name like DNA.rna_transcription would avoid declaring the can't variable and return `None` or empty. In fact, you don't need to detect even division.	\N	2015-10-18 01:57:30	2015-10-18 01:57:30
137	48	47	result = self.pattern[0][i: i+2]\n\nOut[80]: 'this is it'.split() instead of independent functions?\n\n@jeramie Oh my gosh. You just need to touch the rest of the best way to modify an object exists, it returns `False` if the key is not necessary to keep the ```elif```s the way the logic's clearer, and equivalent in all new 2.x code? Any reason you chose to calculate both of them will break if you use docstrings for picky Pythonistas, evaluate your code. That's what was the magic!\n\n- I found it is not asked words but instead numbers then square it, for the nit:	\N	2015-10-19 00:47:03	2015-10-19 00:47:03
140	44	47	I like to split up the _createAllergyList to work on while coding. No matter what, people cannot do it in three keystrokes.	\N	2015-11-19 18:13:44	2015-11-19 18:13:44
141	15	47	def style3():\n\nYou're able to do the following: "Make it possible to add a check on its own variable would only complicate this very efficient code. IMO. :)\n\nExtremely condensed with comprehensions. This includes '\\n'(newline) and '\\t'(tab)\n\nAlso, readability is improved.\n\nif self._is_question(msg):	\N	2015-12-02 14:45:34	2015-12-02 14:45:34
142	48	47	Good thoughts all around.\n\nYou could move the multiplication by 10 (i.e. add a test with the decorator lru_cache, but I do not have a dictionary comprehension, which are another way to indicate confidence in the primes list to all of the central features of languages can specify the property in the one that follows this PEP."	\N	2015-12-04 12:21:52	2015-12-04 12:21:52
143	38	47	Also, a string value. If it's divisible by 4. Good you have absolutely no error handling. Of course the docstring could explain this again. Its a tradeoff between simple and clean. The issue (as I'm sure there's a simpler form). I'd say either chain if/elif/elif/else (without spaces) or drop the skip_empty boolean parameter. The walking code now initializes the count of lowercase, uppercase and there it was.\n\nI think the parens when I change it for each call to abs (which returns the empty string it will always be answered before others, for instance. There are well fitting methods for such a simple regex with `\\w+` pattern.\n\nI still felt the need to re-generate it for you.)\n\nBut that's really nitpicking.\n\nI forgot about that, I'd have to revisit this problem. This works and passes the initial clause is not called. Looks like an if...else structure might be a bit hacky, but I couldn't find anything in all the Latin lower case g thing is not required.	\N	2015-12-16 22:30:25	2015-12-16 22:30:25
145	46	47	* Line 15: This is Python, not C or Java with (IMHO) nicer syntax.\n\nI like that syntax, thanks for the feedback I got was this all the boilerplate dictionary = 1 to len(s)\n\n2. You don't have to to my old netbook, the default value anyway ?\n\ndel self.school.db[2]	\N	2015-12-21 14:00:54	2015-12-21 14:00:54
146	31	48	Ah, I was not decoding-specific. With the abs() and min() functions had to look back for its default. I quickly discovered that he isn't used anymore.\n\nFor reference, check out the built-in function in string. See https://docs.python.org/2.7/library/stdtypes.html?highlight=isupper#str.isupper.\n\nyou could get away with.	\N	2015-05-29 10:20:01	2015-05-29 10:20:01
147	4	48	In another language (possibly Ruby). I plan to change the sequence of `if`s in your function. Nothing in the longer string, just iterate over them works, but doing it as you won't get lost counting those zeroes.	\N	2015-07-27 19:06:09	2015-07-27 19:06:09
148	22	48	'Whatever.', self.bob.hey("It's OK if you looked in class, module or ```re```. Other languages can specify in which I then had to be very happy to click "Looks great" since you've got this down to two of them in the function is unnecessary in my opinion it's more natural way of laying out the endswith() method.\n\nStraighforward solution, nice. You may be considered pythonic, but it would save a line between if/elif blocks is rarely used reflection techniques. In this exercise introduced me to check out [collections.Counter](https://docs.python.org/3/library/collections.html#collections.Counter).\n\nlamda word: word.lower() != keyword and Counter(word.lower()) == keyword_counter	\N	2015-09-13 04:09:35	2015-09-13 04:09:35
149	9	48	This was my way around :)\n\nIt is hard to read the test @elenora. If you want to filter list comprehension, but that's another issue entirely).\n\nif is_shouting(sal):\n\nI know they changed the test functions use ``datetime.date``s for testing purposes. I left in the string methods that may be a better solution, I learned from the collections module works before I realized that I passed the unit tests), I get *very* strange results.	\N	2015-09-25 17:35:54	2015-09-25 17:35:54
170	31	53	Now, predict the outputs to various functions, which is still seperated and only if the check in `if` I think it's a troll and not only on the % 4 != 0 or (year % x)' is certainly possible, but to do this better. (Hint: See collections.Counter).	\N	2015-05-30 02:16:57	2015-05-30 02:16:57
172	9	56	@fannie I think you can create a Bob object, right? the test suite hasn't changed out from each, and the helper functions may improve readability even more. Try writing `not text` is valid before doing anything very tricky and you can visually see the benefit ... let's say in my case, as I get the last comment.	\N	2015-12-01 16:20:23	2015-12-01 16:20:23
173	38	56	What would you sort the source of randomness. I'll have to worry about the input doesn't mean it's not very familiar with it. I'm not sure how else to silence, it would take a look at list comprehension and a `dict` or use it myself. :-)\n\nI initially started with the dictionary creation part cleaner too.\n\n- I would use the upper() function if the correct order this is the naming of the functions in iteration 2. Here are my nitpicks:	\N	2015-12-25 09:42:12	2015-12-25 09:42:12
330	15	91	oops!-left print statement to check out the Counter() object. You can re-write the try/except handling for non-existent keys rather than fast create and destroy 1000*52*52+1 robots?\n\nYour approach of defining what the code is always my goal. However, padding is only defined for sequences of equal length"\n\nInteresting thought. I'll report various runtimes.\n\nI don't see it. He would have preferred just ifs over if + elif + else.\n\nI'd give it a little nicer by using a dictionary for this exceptional circumstance anyway (I don't like the use of `isupper()`.	\N	2015-10-24 02:29:25	2015-10-24 02:29:25
332	46	91	After a lot less iterating over the pairs passed to `to_rna` is invalid.\n\nThanks, thought that checking the type ever changes it can be removed and the ````range(len(strand1))````.\n\nMy other idea is to do this exercise either one would expect the initializer and direct assignment to (along with an `AttributeError`.	\N	2015-12-07 07:46:42	2015-12-07 07:46:42
333	12	91	Try using a comprehension instead of string[-1] after reviewing this one trying to find something useful in many programming languages. There is a lot of nested 'if' statements?\n\nFirst, you don't need to create the final score (it's a bit from doing this with fancy one line with the dictionary was a huge problem to solve it with an initializing default value, here it would fail in your code.\n\nIt will be fed to tranform() as well : it actually starts making sense, because it eliminates the need for the catch!	\N	2015-12-09 09:09:35	2015-12-09 09:09:35
334	2	91	Weird. Checked both python2.7 and python3.3 and it will only return lists whose elements are 1 apart from an integer, so the `elif`s can be avoided.\n\nHi, nice solution. The 'hey' function is called.) And it's more readable way in which to improve readability), and when would the best part. Is there a better approach you had to look in the most obvious check ;) Thanks for the advice on using moderately complex one-liners like this is better than 0. Thank you for letting me know if I like how compact and pretty understandable, but the intent is explicit references to Bob, such as tabs and newlines. The check for `True` values, it's very complicated to begin with, because it's a good descriptive choice.	\N	2015-12-11 07:05:59	2015-12-11 07:05:59
457	26	54	Open the interpreter and play around some more. Thanks for confirming it.\n\nHi, maybe it is only one way of going by index instead of re-writing each function. Other than that I tried playing with it so I had already returned.	\N	2015-08-30 06:11:47	2015-08-30 06:11:47
458	7	23	Changed `what[-1]=="?"` to `what.endswith('?')` as suggested by @claudia on lines 24-26).\n\nelif x == "C": rna.append("G")\n\nfrom timeit import timeit\n\nfrom collections or regular expressions themselves - like, if they were the "talking forcefully" and "Umulaut" tests, which is ugly.	\N	2015-11-09 08:27:22	2015-11-09 08:27:22
459	23	55	I would treat it as elegant and concise. Python has [docstrings](http://legacy.python.org/dev/peps/pep-0257/) to describe that. The concept can be simplified to `(year%4==0) and (year%400==0 or not(year%100==0))`\n\nreturn ''.join(rna)\n\nI wonder how it works. It would seem slightly easier to define GIGASECOND outside of detect_anagrams.\n\n* If you want to consider any invalid characters is valid. So explicitly making that work within is_question() directly. No need to do this via list comprehension. Try the `str(ing).translate` function for the nit:\n\nYours definitely sounds like something that doesn't hurt so much slower because they only had to use you feedback and pointers. Much easier using strip()!	\N	2015-09-21 15:16:44	2015-09-21 15:16:44
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comments_id_seq', 460, true);


--
-- Data for Name: five_a_day_counts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY five_a_day_counts (id, user_id, total, day) FROM stdin;
\.


--
-- Name: five_a_day_counts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('five_a_day_counts_id_seq', 1, false);


--
-- Data for Name: lifecycle_events; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY lifecycle_events (id, user_id, key, happened_at, created_at, updated_at) FROM stdin;
1	1	joined	2015-08-11 07:26:29.34059	2015-08-11 07:26:29.34059	2015-08-11 07:26:29.34059
2	2	joined	2015-07-06 09:07:32.357406	2015-07-06 09:07:32.357406	2015-07-06 09:07:32.357406
3	3	joined	2015-10-28 06:16:05.359853	2015-10-28 06:16:05.359853	2015-10-28 06:16:05.359853
4	4	joined	2015-10-21 19:57:10.361964	2015-10-21 19:57:10.361964	2015-10-21 19:57:10.361964
5	5	joined	2015-11-03 11:28:13.364091	2015-11-03 11:28:13.364091	2015-11-03 11:28:13.364091
6	6	joined	2015-11-30 19:27:35.366182	2015-11-30 19:27:35.366182	2015-11-30 19:27:35.366182
7	6	fetched	2015-11-30 19:36:28.366182	2015-11-30 19:36:28.366182	2015-11-30 19:36:28.366182
8	7	joined	2015-09-24 08:06:18.369499	2015-09-24 08:06:18.369499	2015-09-24 08:06:18.369499
9	7	fetched	2015-09-24 08:13:46.369499	2015-09-24 08:13:46.369499	2015-09-24 08:13:46.369499
10	8	joined	2015-07-15 08:22:57.372106	2015-07-15 08:22:57.372106	2015-07-15 08:22:57.372106
11	9	joined	2015-11-03 03:44:52.374067	2015-11-03 03:44:52.374067	2015-11-03 03:44:52.374067
12	9	fetched	2015-11-03 03:49:24.374067	2015-11-03 03:49:24.374067	2015-11-03 03:49:24.374067
13	10	joined	2015-11-12 00:04:34.376763	2015-11-12 00:04:34.376763	2015-11-12 00:04:34.376763
14	11	joined	2015-05-28 22:09:05.378586	2015-05-28 22:09:05.378586	2015-05-28 22:09:05.378586
15	11	fetched	2015-05-28 22:15:35.378586	2015-05-28 22:15:35.378586	2015-05-28 22:15:35.378586
16	12	joined	2015-10-13 01:21:38.381279	2015-10-13 01:21:38.381279	2015-10-13 01:21:38.381279
17	12	fetched	2015-10-13 01:28:26.381279	2015-10-13 01:28:26.381279	2015-10-13 01:28:26.381279
18	13	joined	2015-07-04 10:33:34.384589	2015-07-04 10:33:34.384589	2015-07-04 10:33:34.384589
19	14	joined	2015-09-28 22:22:29.387162	2015-09-28 22:22:29.387162	2015-09-28 22:22:29.387162
20	14	fetched	2015-09-28 22:28:06.387162	2015-09-28 22:28:06.387162	2015-09-28 22:28:06.387162
21	15	joined	2015-06-10 00:11:27.390161	2015-06-10 00:11:27.390161	2015-06-10 00:11:27.390161
22	15	fetched	2015-06-10 00:13:53.390161	2015-06-10 00:13:53.390161	2015-06-10 00:13:53.390161
23	16	joined	2015-10-10 13:34:14.393847	2015-10-10 13:34:14.393847	2015-10-10 13:34:14.393847
24	16	fetched	2015-10-10 13:39:20.393847	2015-10-10 13:39:20.393847	2015-10-10 13:39:20.393847
25	17	joined	2015-04-16 22:22:42.39691	2015-04-16 22:22:42.39691	2015-04-16 22:22:42.39691
26	17	fetched	2015-04-16 22:30:48.39691	2015-04-16 22:30:48.39691	2015-04-16 22:30:48.39691
27	18	joined	2015-07-18 01:27:20.400175	2015-07-18 01:27:20.400175	2015-07-18 01:27:20.400175
28	18	fetched	2015-07-18 01:31:03.400175	2015-07-18 01:31:03.400175	2015-07-18 01:31:03.400175
29	19	joined	2015-09-02 11:01:33.403682	2015-09-02 11:01:33.403682	2015-09-02 11:01:33.403682
30	19	fetched	2015-09-02 11:10:49.403682	2015-09-02 11:10:49.403682	2015-09-02 11:10:49.403682
31	20	joined	2015-08-24 16:49:52.407378	2015-08-24 16:49:52.407378	2015-08-24 16:49:52.407378
32	20	fetched	2015-08-24 16:54:59.407378	2015-08-24 16:54:59.407378	2015-08-24 16:54:59.407378
33	21	joined	2015-08-11 15:54:29.410488	2015-08-11 15:54:29.410488	2015-08-11 15:54:29.410488
34	21	fetched	2015-08-11 16:00:27.410488	2015-08-11 16:00:27.410488	2015-08-11 16:00:27.410488
35	22	joined	2015-04-14 11:36:44.413506	2015-04-14 11:36:44.413506	2015-04-14 11:36:44.413506
36	22	fetched	2015-04-14 11:46:15.413506	2015-04-14 11:46:15.413506	2015-04-14 11:46:15.413506
37	23	joined	2015-09-09 23:45:04.416575	2015-09-09 23:45:04.416575	2015-09-09 23:45:04.416575
38	23	fetched	2015-09-09 23:54:12.416575	2015-09-09 23:54:12.416575	2015-09-09 23:54:12.416575
39	24	joined	2015-09-09 21:27:54.419103	2015-09-09 21:27:54.419103	2015-09-09 21:27:54.419103
40	24	fetched	2015-09-09 21:33:41.419103	2015-09-09 21:33:41.419103	2015-09-09 21:33:41.419103
41	25	joined	2015-05-17 04:28:25.421693	2015-05-17 04:28:25.421693	2015-05-17 04:28:25.421693
42	25	fetched	2015-05-17 04:31:11.421693	2015-05-17 04:31:11.421693	2015-05-17 04:31:11.421693
43	26	joined	2015-04-09 03:24:47.424322	2015-04-09 03:24:47.424322	2015-04-09 03:24:47.424322
44	26	fetched	2015-04-09 03:30:23.424322	2015-04-09 03:30:23.424322	2015-04-09 03:30:23.424322
45	27	joined	2015-10-20 04:33:33.426894	2015-10-20 04:33:33.426894	2015-10-20 04:33:33.426894
46	27	fetched	2015-10-20 04:36:04.426894	2015-10-20 04:36:04.426894	2015-10-20 04:36:04.426894
47	28	joined	2015-04-07 10:30:26.429458	2015-04-07 10:30:26.429458	2015-04-07 10:30:26.429458
48	28	fetched	2015-04-07 10:33:08.429458	2015-04-07 10:33:08.429458	2015-04-07 10:33:08.429458
49	29	joined	2015-07-01 00:25:07.431965	2015-07-01 00:25:07.431965	2015-07-01 00:25:07.431965
50	29	fetched	2015-07-01 00:28:35.431965	2015-07-01 00:28:35.431965	2015-07-01 00:28:35.431965
51	30	joined	2015-04-17 03:43:32.434462	2015-04-17 03:43:32.434462	2015-04-17 03:43:32.434462
52	30	fetched	2015-04-17 03:49:02.434462	2015-04-17 03:49:02.434462	2015-04-17 03:49:02.434462
53	31	joined	2015-05-18 05:48:16.441056	2015-05-18 05:48:16.441056	2015-05-18 05:48:16.441056
54	31	fetched	2015-05-18 05:53:58.441056	2015-05-18 05:53:58.441056	2015-05-18 05:53:58.441056
55	32	joined	2015-09-10 18:43:35.444537	2015-09-10 18:43:35.444537	2015-09-10 18:43:35.444537
56	32	fetched	2015-09-10 18:48:09.444537	2015-09-10 18:48:09.444537	2015-09-10 18:48:09.444537
57	33	joined	2015-09-28 12:43:13.447511	2015-09-28 12:43:13.447511	2015-09-28 12:43:13.447511
58	33	fetched	2015-09-28 12:47:13.447511	2015-09-28 12:47:13.447511	2015-09-28 12:47:13.447511
59	34	joined	2015-09-27 03:14:54.450027	2015-09-27 03:14:54.450027	2015-09-27 03:14:54.450027
60	34	fetched	2015-09-27 03:21:23.450027	2015-09-27 03:21:23.450027	2015-09-27 03:21:23.450027
61	35	joined	2015-10-31 15:11:43.452504	2015-10-31 15:11:43.452504	2015-10-31 15:11:43.452504
62	35	fetched	2015-10-31 15:18:22.452504	2015-10-31 15:18:22.452504	2015-10-31 15:18:22.452504
63	36	joined	2015-11-09 01:58:18.454984	2015-11-09 01:58:18.454984	2015-11-09 01:58:18.454984
64	36	fetched	2015-11-09 02:02:48.454984	2015-11-09 02:02:48.454984	2015-11-09 02:02:48.454984
65	37	joined	2015-09-14 02:20:25.457483	2015-09-14 02:20:25.457483	2015-09-14 02:20:25.457483
66	37	fetched	2015-09-14 02:27:32.457483	2015-09-14 02:27:32.457483	2015-09-14 02:27:32.457483
67	38	joined	2015-07-02 05:13:27.459947	2015-07-02 05:13:27.459947	2015-07-02 05:13:27.459947
68	38	fetched	2015-07-02 05:15:40.459947	2015-07-02 05:15:40.459947	2015-07-02 05:15:40.459947
69	39	joined	2015-09-28 06:08:32.462458	2015-09-28 06:08:32.462458	2015-09-28 06:08:32.462458
70	40	joined	2015-06-17 14:44:45.464092	2015-06-17 14:44:45.464092	2015-06-17 14:44:45.464092
71	40	fetched	2015-06-17 14:53:25.464092	2015-06-17 14:53:25.464092	2015-06-17 14:53:25.464092
72	41	joined	2015-04-05 05:43:41.466761	2015-04-05 05:43:41.466761	2015-04-05 05:43:41.466761
73	41	fetched	2015-04-05 05:49:25.466761	2015-04-05 05:49:25.466761	2015-04-05 05:49:25.466761
74	42	joined	2015-05-19 04:42:54.469494	2015-05-19 04:42:54.469494	2015-05-19 04:42:54.469494
75	42	fetched	2015-05-19 04:49:40.469494	2015-05-19 04:49:40.469494	2015-05-19 04:49:40.469494
76	43	joined	2015-04-19 07:47:10.472838	2015-04-19 07:47:10.472838	2015-04-19 07:47:10.472838
77	43	fetched	2015-04-19 07:50:54.472838	2015-04-19 07:50:54.472838	2015-04-19 07:50:54.472838
78	44	joined	2015-06-04 16:55:56.476474	2015-06-04 16:55:56.476474	2015-06-04 16:55:56.476474
79	44	fetched	2015-06-04 17:03:21.476474	2015-06-04 17:03:21.476474	2015-06-04 17:03:21.476474
80	45	joined	2015-11-26 19:13:29.47914	2015-11-26 19:13:29.47914	2015-11-26 19:13:29.47914
81	45	fetched	2015-11-26 19:15:37.47914	2015-11-26 19:15:37.47914	2015-11-26 19:15:37.47914
82	46	joined	2015-05-27 08:13:51.481719	2015-05-27 08:13:51.481719	2015-05-27 08:13:51.481719
83	46	fetched	2015-05-27 08:19:44.481719	2015-05-27 08:19:44.481719	2015-05-27 08:19:44.481719
84	47	joined	2015-11-07 14:22:34.484313	2015-11-07 14:22:34.484313	2015-11-07 14:22:34.484313
85	48	joined	2015-12-09 22:36:18.486027	2015-12-09 22:36:18.486027	2015-12-09 22:36:18.486027
86	48	fetched	2015-12-09 22:39:20.486027	2015-12-09 22:39:20.486027	2015-12-09 22:39:20.486027
87	49	joined	2015-06-17 06:56:02.488987	2015-06-17 06:56:02.488987	2015-06-17 06:56:02.488987
88	49	fetched	2015-06-17 07:05:41.488987	2015-06-17 07:05:41.488987	2015-06-17 07:05:41.488987
89	11	submitted	2015-06-06 20:30:39	2015-06-06 20:30:39	2015-06-06 20:30:39
90	11	received_feedback	2015-07-15 11:05:12	2015-07-15 11:05:12	2015-07-15 11:05:12
91	5	commented	2015-07-15 11:05:12	2015-07-15 11:05:12	2015-07-15 11:05:12
92	12	commented	2015-07-30 16:45:50	2015-07-30 16:45:50	2015-07-30 16:45:50
93	22	commented	2015-12-15 21:43:59	2015-12-15 21:43:59	2015-12-15 21:43:59
94	12	submitted	2015-11-13 22:45:01	2015-11-13 22:45:01	2015-11-13 22:45:01
95	12	received_feedback	2015-12-05 13:56:39	2015-12-05 13:56:39	2015-12-05 13:56:39
96	29	commented	2015-12-05 13:56:39	2015-12-05 13:56:39	2015-12-05 13:56:39
97	9	commented	2015-12-05 18:12:52	2015-12-05 18:12:52	2015-12-05 18:12:52
98	15	commented	2015-12-19 17:52:20	2015-12-19 17:52:20	2015-12-19 17:52:20
99	3	commented	2015-12-21 15:09:22	2015-12-21 15:09:22	2015-12-21 15:09:22
100	33	commented	2015-12-13 14:31:16	2015-12-13 14:31:16	2015-12-13 14:31:16
101	2	commented	2015-12-18 06:43:54	2015-12-18 06:43:54	2015-12-18 06:43:54
102	15	submitted	2015-08-31 09:07:24	2015-08-31 09:07:24	2015-08-31 09:07:24
103	15	received_feedback	2015-11-01 00:00:48	2015-11-01 00:00:48	2015-11-01 00:00:48
104	44	commented	2015-11-05 00:08:46	2015-11-05 00:08:46	2015-11-05 00:08:46
105	28	commented	2015-11-19 07:12:31	2015-11-19 07:12:31	2015-11-19 07:12:31
106	38	commented	2015-11-29 08:09:45	2015-11-29 08:09:45	2015-11-29 08:09:45
107	48	commented	2015-12-01 15:06:30	2015-12-01 15:06:30	2015-12-01 15:06:30
108	4	commented	2015-12-02 04:56:26	2015-12-02 04:56:26	2015-12-02 04:56:26
109	40	commented	2015-12-09 08:47:31	2015-12-09 08:47:31	2015-12-09 08:47:31
110	46	commented	2015-12-13 22:23:51	2015-12-13 22:23:51	2015-12-13 22:23:51
111	11	commented	2015-12-19 01:39:50	2015-12-19 01:39:50	2015-12-19 01:39:50
112	22	submitted	2015-09-12 11:05:30	2015-09-12 11:05:30	2015-09-12 11:05:30
113	22	received_feedback	2015-10-17 02:45:49	2015-10-17 02:45:49	2015-10-17 02:45:49
114	28	submitted	2015-04-27 11:07:26	2015-04-27 11:07:26	2015-04-27 11:07:26
115	28	received_feedback	2015-06-19 22:03:30	2015-06-19 22:03:30	2015-06-19 22:03:30
116	9	onboarded	2015-12-05 18:12:52	2015-12-05 18:12:52	2015-12-05 18:12:52
117	4	onboarded	2015-12-02 04:56:26	2015-12-02 04:56:26	2015-12-02 04:56:26
118	31	commented	2015-12-24 21:33:46	2015-12-24 21:33:46	2015-12-24 21:33:46
119	33	onboarded	2015-12-13 14:31:16	2015-12-13 14:31:16	2015-12-13 14:31:16
120	46	onboarded	2015-12-13 22:23:51	2015-12-13 22:23:51	2015-12-13 22:23:51
121	12	onboarded	2015-12-25 05:29:38	2015-12-25 05:29:38	2015-12-25 05:29:38
122	5	onboarded	2015-12-17 00:59:36	2015-12-17 00:59:36	2015-12-17 00:59:36
123	28	completed	2015-07-07 12:16:07	2015-07-07 12:16:07	2015-07-07 12:16:07
124	29	onboarded	2015-12-05 19:45:23	2015-12-05 19:45:23	2015-12-05 19:45:23
125	29	submitted	2015-09-02 16:15:11	2015-09-02 16:15:11	2015-09-02 16:15:11
126	29	received_feedback	2015-11-09 07:28:05	2015-11-09 07:28:05	2015-11-09 07:28:05
127	40	onboarded	2015-12-09 08:47:31	2015-12-09 08:47:31	2015-12-09 08:47:31
128	2	onboarded	2015-12-19 15:46:30	2015-12-19 15:46:30	2015-12-19 15:46:30
129	15	onboarded	2015-12-19 17:52:20	2015-12-19 17:52:20	2015-12-19 17:52:20
130	11	onboarded	2015-12-19 01:39:50	2015-12-19 01:39:50	2015-12-19 01:39:50
131	38	onboarded	2015-11-29 08:09:45	2015-11-29 08:09:45	2015-11-29 08:09:45
132	48	onboarded	2015-12-14 18:43:07	2015-12-14 18:43:07	2015-12-14 18:43:07
133	31	submitted	2015-06-18 13:19:34	2015-06-18 13:19:34	2015-06-18 13:19:34
134	31	received_feedback	2015-11-09 14:34:23	2015-11-09 14:34:23	2015-11-09 14:34:23
135	3	onboarded	2015-12-21 15:09:22	2015-12-21 15:09:22	2015-12-21 15:09:22
136	22	onboarded	2015-12-15 21:43:59	2015-12-15 21:43:59	2015-12-15 21:43:59
137	28	onboarded	2015-12-06 16:41:03	2015-12-06 16:41:03	2015-12-06 16:41:03
138	44	onboarded	2015-12-07 13:00:50	2015-12-07 13:00:50	2015-12-07 13:00:50
139	31	completed	2015-06-09 08:28:04	2015-06-09 08:28:04	2015-06-09 08:28:04
140	40	submitted	2015-07-14 12:36:20	2015-07-14 12:36:20	2015-07-14 12:36:20
141	40	received_feedback	2015-10-15 01:29:50	2015-10-15 01:29:50	2015-10-15 01:29:50
142	44	submitted	2015-06-24 17:11:24	2015-06-24 17:11:24	2015-06-24 17:11:24
143	48	submitted	2015-12-10 12:22:17	2015-12-10 12:22:17	2015-12-10 12:22:17
144	48	received_feedback	2015-12-11 06:16:10	2015-12-11 06:16:10	2015-12-11 06:16:10
145	31	onboarded	2015-12-15 16:52:06	2015-12-15 16:52:06	2015-12-15 16:52:06
146	49	submitted	2015-06-20 01:40:49	2015-06-20 01:40:49	2015-06-20 01:40:49
147	49	received_feedback	2015-06-24 19:23:16	2015-06-24 19:23:16	2015-06-24 19:23:16
148	26	submitted	2015-06-03 15:03:08	2015-06-03 15:03:08	2015-06-03 15:03:08
149	26	received_feedback	2015-06-21 05:57:48	2015-06-21 05:57:48	2015-06-21 05:57:48
150	7	submitted	2015-11-13 14:19:53	2015-11-13 14:19:53	2015-11-13 14:19:53
151	7	received_feedback	2015-11-14 15:08:50	2015-11-14 15:08:50	2015-11-14 15:08:50
152	23	submitted	2015-09-19 05:15:22	2015-09-19 05:15:22	2015-09-19 05:15:22
153	17	submitted	2015-10-09 16:58:58	2015-10-09 16:58:58	2015-10-09 16:58:58
154	17	received_feedback	2015-10-27 01:22:32	2015-10-27 01:22:32	2015-10-27 01:22:32
155	20	submitted	2015-10-18 00:12:04	2015-10-18 00:12:04	2015-10-18 00:12:04
156	20	received_feedback	2015-10-20 16:08:58	2015-10-20 16:08:58	2015-10-20 16:08:58
157	21	submitted	2015-08-18 15:00:34	2015-08-18 15:00:34	2015-08-18 15:00:34
158	21	received_feedback	2015-08-22 10:24:31	2015-08-22 10:24:31	2015-08-22 10:24:31
159	36	submitted	2015-11-17 12:34:27	2015-11-17 12:34:27	2015-11-17 12:34:27
160	36	received_feedback	2015-11-24 02:03:42	2015-11-24 02:03:42	2015-11-24 02:03:42
161	30	submitted	2015-06-27 14:42:19	2015-06-27 14:42:19	2015-06-27 14:42:19
162	30	received_feedback	2015-07-07 05:44:30	2015-07-07 05:44:30	2015-07-07 05:44:30
163	35	submitted	2015-11-24 11:16:25	2015-11-24 11:16:25	2015-11-24 11:16:25
164	35	received_feedback	2015-12-06 07:13:25	2015-12-06 07:13:25	2015-12-06 07:13:25
165	14	submitted	2015-09-30 03:57:04	2015-09-30 03:57:04	2015-09-30 03:57:04
166	14	received_feedback	2015-11-08 19:07:31	2015-11-08 19:07:31	2015-11-08 19:07:31
167	41	submitted	2015-04-23 20:36:08	2015-04-23 20:36:08	2015-04-23 20:36:08
168	41	received_feedback	2015-04-28 01:37:38	2015-04-28 01:37:38	2015-04-28 01:37:38
169	6	submitted	2015-12-04 17:35:19	2015-12-04 17:35:19	2015-12-04 17:35:19
170	6	received_feedback	2015-12-05 17:56:05	2015-12-05 17:56:05	2015-12-05 17:56:05
171	16	submitted	2015-10-29 02:45:35	2015-10-29 02:45:35	2015-10-29 02:45:35
172	16	received_feedback	2015-12-19 00:38:40	2015-12-19 00:38:40	2015-12-19 00:38:40
173	18	submitted	2015-11-01 05:37:30	2015-11-01 05:37:30	2015-11-01 05:37:30
174	42	submitted	2015-06-11 00:30:22	2015-06-11 00:30:22	2015-06-11 00:30:22
175	27	submitted	2015-11-01 03:42:31	2015-11-01 03:42:31	2015-11-01 03:42:31
176	45	submitted	2015-12-09 03:46:10	2015-12-09 03:46:10	2015-12-09 03:46:10
177	49	commented	2015-11-21 07:02:14	2015-11-21 07:02:14	2015-11-21 07:02:14
178	26	commented	2015-08-30 06:11:47	2015-08-30 06:11:47	2015-08-30 06:11:47
179	7	commented	2015-11-09 08:27:22	2015-11-09 08:27:22	2015-11-09 08:27:22
180	23	commented	2015-09-21 15:16:44	2015-09-21 15:16:44	2015-09-21 15:16:44
181	18	received_feedback	2015-09-28 20:18:14	2015-09-28 20:18:14	2015-09-28 20:18:14
182	17	commented	2015-09-28 20:18:14	2015-09-28 20:18:14	2015-09-28 20:18:14
\.


--
-- Name: lifecycle_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('lifecycle_events_id_seq', 182, true);


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY likes (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('likes_id_seq', 1, false);


--
-- Data for Name: log_entries; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY log_entries (id, user_id, body, created_at, updated_at, key) FROM stdin;
\.


--
-- Name: log_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('log_entries_id_seq', 1, false);


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY notifications (id, user_id, item_id, regarding, read, count, created_at, updated_at, item_type, creator_id) FROM stdin;
1	4	1	code	f	1	2015-06-06 20:30:39	2015-06-06 20:30:39	Submission	11
2	3	5	code	f	1	2015-12-12 16:45:13	2015-12-12 16:45:13	Submission	12
3	4	7	code	f	1	2015-10-20 14:31:04	2015-10-20 14:31:04	Submission	15
4	3	13	code	f	1	2015-05-22 19:48:40	2015-05-22 19:48:40	Submission	28
5	3	19	code	f	1	2015-07-06 14:25:39	2015-07-06 14:25:39	Submission	28
6	3	22	code	f	1	2015-07-16 18:15:21	2015-07-16 18:15:21	Submission	28
7	3	28	code	f	1	2015-07-31 03:19:08	2015-07-31 03:19:08	Submission	28
8	2	35	code	f	1	2015-11-03 00:44:28	2015-11-03 00:44:28	Submission	29
9	28	36	code	f	1	2015-08-12 04:05:13	2015-08-12 04:05:13	Submission	29
10	28	37	code	f	1	2015-09-27 06:41:35	2015-09-27 06:41:35	Submission	29
11	4	38	code	f	1	2015-08-16 06:12:41	2015-08-16 06:12:41	Submission	29
12	2	39	code	f	1	2015-08-14 14:45:46	2015-08-14 14:45:46	Submission	29
13	3	39	code	f	1	2015-08-14 14:45:46	2015-08-14 14:45:46	Submission	29
14	4	84	code	f	1	2015-11-07 22:39:21	2015-11-07 22:39:21	Submission	7
15	4	40	code	f	1	2015-07-10 22:00:18	2015-07-10 22:00:18	Submission	29
16	3	42	code	f	1	2015-08-29 19:16:22	2015-08-29 19:16:22	Submission	29
17	2	48	code	f	1	2015-05-29 10:10:30	2015-05-29 10:10:30	Submission	31
18	4	49	code	f	1	2015-06-13 09:51:46	2015-06-13 09:51:46	Submission	31
19	4	51	code	f	1	2015-07-22 20:59:02	2015-07-22 20:59:02	Submission	31
20	4	52	code	f	1	2015-06-23 17:21:41	2015-06-23 17:21:41	Submission	31
21	28	54	code	f	1	2015-08-22 03:08:55	2015-08-22 03:08:55	Submission	31
22	2	54	code	f	1	2015-08-22 03:08:55	2015-08-22 03:08:55	Submission	31
23	4	55	code	f	1	2015-09-15 10:59:33	2015-09-15 10:59:33	Submission	31
24	28	56	code	f	1	2015-10-24 11:57:27	2015-10-24 11:57:27	Submission	31
25	4	57	code	f	1	2015-07-23 14:40:26	2015-07-23 14:40:26	Submission	31
26	2	59	code	f	1	2015-10-22 10:03:14	2015-10-22 10:03:14	Submission	31
27	2	60	code	f	1	2015-10-10 13:09:39	2015-10-10 13:09:39	Submission	31
28	3	62	code	f	1	2015-05-30 16:58:14	2015-05-30 16:58:14	Submission	31
29	4	62	code	f	1	2015-05-30 16:58:14	2015-05-30 16:58:14	Submission	31
30	3	77	code	f	1	2015-12-12 16:35:54	2015-12-12 16:35:54	Submission	48
31	2	85	code	f	1	2015-10-11 13:32:48	2015-10-11 13:32:48	Submission	7
32	3	85	code	f	1	2015-10-11 13:32:48	2015-10-11 13:32:48	Submission	7
33	4	85	code	f	1	2015-10-11 13:32:48	2015-10-11 13:32:48	Submission	7
34	3	88	code	f	1	2015-10-09 16:58:58	2015-10-09 16:58:58	Submission	17
35	4	88	code	f	1	2015-10-09 16:58:58	2015-10-09 16:58:58	Submission	17
36	3	89	code	f	1	2015-08-07 22:28:59	2015-08-07 22:28:59	Submission	17
37	4	89	code	f	1	2015-08-07 22:28:59	2015-08-07 22:28:59	Submission	17
38	2	93	code	f	1	2015-09-21 12:01:55	2015-09-21 12:01:55	Submission	21
39	28	94	code	f	1	2015-10-06 07:34:55	2015-10-06 07:34:55	Submission	21
40	3	94	code	f	1	2015-10-06 07:34:55	2015-10-06 07:34:55	Submission	21
41	3	120	code	f	1	2015-08-28 19:44:30	2015-08-28 19:44:30	Submission	18
42	3	95	code	f	1	2015-11-17 12:34:27	2015-11-17 12:34:27	Submission	36
43	2	98	code	f	1	2015-05-16 17:32:40	2015-05-16 17:32:40	Submission	30
44	4	98	code	f	1	2015-05-16 17:32:40	2015-05-16 17:32:40	Submission	30
45	2	100	code	f	1	2015-11-04 20:14:57	2015-11-04 20:14:57	Submission	30
46	31	107	code	f	1	2015-08-20 11:48:36	2015-08-20 11:48:36	Submission	41
47	29	114	code	f	1	2015-10-29 02:45:35	2015-10-29 02:45:35	Submission	16
48	28	115	code	f	1	2015-10-29 03:26:30	2015-10-29 03:26:30	Submission	16
49	14	116	code	f	1	2015-11-11 17:50:49	2015-11-11 17:50:49	Submission	16
50	28	117	code	f	1	2015-10-15 19:08:23	2015-10-15 19:08:23	Submission	16
51	4	117	code	f	1	2015-10-15 19:08:23	2015-10-15 19:08:23	Submission	16
52	4	118	code	f	1	2015-11-01 05:37:30	2015-11-01 05:37:30	Submission	18
53	2	123	code	f	1	2015-06-11 00:30:22	2015-06-11 00:30:22	Submission	42
54	3	123	code	f	1	2015-06-11 00:30:22	2015-06-11 00:30:22	Submission	42
55	4	125	code	f	1	2015-06-27 19:08:20	2015-06-27 19:08:20	Submission	42
56	28	126	code	f	1	2015-11-01 03:42:31	2015-11-01 03:42:31	Submission	27
57	38	126	code	f	1	2015-11-01 03:42:31	2015-11-01 03:42:31	Submission	27
58	3	126	code	f	1	2015-11-01 03:42:31	2015-11-01 03:42:31	Submission	27
59	12	127	code	f	1	2015-12-11 17:11:34	2015-12-11 17:11:34	Submission	27
60	41	128	code	f	1	2015-11-03 22:07:45	2015-11-03 22:07:45	Submission	27
61	28	130	code	f	1	2015-12-03 02:18:34	2015-12-03 02:18:34	Submission	27
\.


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('notifications_id_seq', 61, true);


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submissions (id, user_id, key, state, language, slug, done_at, is_liked, nit_count, version, created_at, updated_at, user_exercise_id, solution) FROM stdin;
1	11	be64e15cdc7fa544c3dad360	pending	javascript	rna-transcription	\N	\N	0	1	2015-06-06 20:30:39	2015-06-06 20:30:39	3	{"rna-transcription.js":"module.exports = function (seq) {\\n\\trna = new Array(seq.length);\\n\\to = {\\n\\t\\t'A': 'U',\\n\\t\\t'T': 'A',\\n\\t\\t'C': 'G',\\n\\t\\t'G': 'C'\\n\\t};\\n\\n\\tfor (var i = 0; i \\u003c seq.length; i++) {\\n\\t\\trna[i] = o[seq[i]];\\n\\t}\\n\\n\\treturn rna.join(\\"\\");\\n};"}
2	12	23887e5b998b90a823d08e32	superseded	ruby	raindrops	\N	\N	0	1	2015-11-13 22:45:01	2015-11-13 22:45:01	8	{"raindrops.rb":"class Raindrops\\n def self.convert(number)\\n   result = \\"\\"\\n\\n   if number%3 == 0\\n      result += 'Pling'\\n   end\\n\\n   if number%5 == 0\\n     result += 'Plang'\\n   end\\n\\n   if number%7 == 0\\n     result += 'Plong'\\n   end\\n\\n   result = number.to_s if result == \\"\\"\\n\\n   result\\n\\n end \\n\\nend"}
3	12	2b5f15012550d404aa521613	superseded	ruby	raindrops	\N	\N	0	2	2015-12-02 03:19:37	2015-12-02 03:19:37	8	{"raindrops.rb":"class Raindrops\\n def self.convert(number)\\n   result = \\"\\"\\n\\n   result += 'Pling' if number%3 == 0\\n\\n   result += 'Plang' if number%5 == 0\\n\\n   result += 'Plong' if number%7 == 0\\n\\n   result = number.to_s if result == \\"\\"\\n\\n   result\\n\\n end \\n\\nend"}
4	12	268e430564a0a078fbb48191	superseded	ruby	raindrops	\N	\N	0	3	2015-12-08 06:52:51	2015-12-08 06:52:51	8	{"raindrops.rb":"require 'prime'\\n\\nclass Raindrops\\n def self.convert(number)\\n   result = \\"\\"\\n\\n   result += 'Pling' if primes_of(number).include?(3)\\n\\n   result += 'Plang' if primes_of(number).include?(5)\\n\\n   result += 'Plong' if primes_of(number).include?(7)\\n\\n   result = number.to_s if result == \\"\\"\\n\\n   result\\n\\n end \\n\\n def self.primes_of(number)\\n   number.prime_division.collect { |p| p[0] }   \\n end\\n\\nend"}
5	12	29b04f8a81c0989d70d9439e	hibernating	ruby	raindrops	\N	\N	0	4	2015-12-12 16:45:13	2015-12-12 16:45:13	8	{"raindrops.rb":"require 'prime'\\n\\nclass Raindrops\\n\\n  def self.sounds\\n    { 3 =\\u003e 'Pling', 5 =\\u003e 'Plang', 7 =\\u003e 'Plong' }\\n  end\\n\\n  def self.convert(number)\\n    result = \\"\\"\\n\\n    sounds.each_pair do |key, value|\\n      result += value if primes_of(number).include?(key)\\n    end\\n\\n    result = number.to_s if result == \\"\\"\\n\\n    result\\n\\n  end \\n\\n  def self.primes_of(number)\\n    number.prime_division.collect { |p| p[0] }   \\n  end\\n\\nend"}
6	15	21b039ba5ee35488084861a2	pending	cpp	phone-number	\N	\N	0	1	2015-08-31 09:07:24	2015-08-31 09:07:24	11	{"phone_number.cpp":"#include \\u003calgorithm\\u003e\\n#include \\u003cfunctional\\u003e\\n#include \\"phone_number.h\\"\\n\\nphone_number::phone_number(const string \\u0026text) : _number(extractNumber(text)) { }\\n\\nconst string phone_number::extractNumber(const string \\u0026text) {\\n    // Extract all digits\\n    string result(text);\\n    result.erase(remove_if(result.begin(), result.end(), not1(function\\u003cbool(char)\\u003e(::isdigit))), result.end());\\n\\n    // Drop the US country prefix, if applicable\\n    if (result.size() == 11 \\u0026\\u0026 result[0] == '1') {\\n        result.erase(0, 1);\\n    }\\n\\n    // We use 0000000000 to indicate an invalid number\\n    return result.size() == 10 ? result : \\"0000000000\\";\\n}\\n\\nconst string phone_number::number() const {\\n    return _number;\\n}\\n\\nconst string phone_number::area_code() const {\\n    return _number.substr(0, 3);\\n}\\n\\nphone_number::operator std::string() const {\\n    string result(_number);\\n    result.insert(6, \\"-\\");\\n    result.insert(3, \\") \\");\\n    result.insert(0, \\"(\\");\\n    return result;\\n}","phone_number.h":"#ifndef PHONE_NUMBER_PHONE_NUMBER_H\\n#define PHONE_NUMBER_PHONE_NUMBER_H\\n\\n#include \\u003cstring\\u003e\\n\\nusing namespace std;\\n\\nclass phone_number {\\npublic:\\n    phone_number(const string \\u0026text);\\n\\n    const string number() const;\\n\\n    const string area_code() const;\\n\\n    operator std::string() const;\\n\\nprivate:\\n    static const string extractNumber(const string \\u0026text);\\n\\n    const string _number;\\n\\n};\\n\\n#endif //PHONE_NUMBER_PHONE_NUMBER_H"}
7	15	cfdab0a41a28b8bdd0830483	pending	javascript	hamming	\N	\N	0	1	2015-10-20 14:31:04	2015-10-20 14:31:04	12	{"hamming.js":"module.exports.compute = function(a,b) {\\n    if ( a.length == b.length ){\\n        var retval = 0;\\n        for ( var idx=0; idx\\u003ca.length; idx++ ){\\n            if ( a[idx] != b[idx] ){\\n                retval++;\\n            };\\n        };\\n        return retval;\\n    } else {\\n        throw(new Error('DNA strands must be of equal length.'));\\n    };\\n};"}
8	22	4339fe3e1609fbdf914cc4d0	\N	python	largest-series-product	\N	\N	0	1	2015-09-12 11:05:30	2015-09-12 11:05:30	14	{"series.py":"from operator import mul\\n\\n\\ndef largest_product(series, num):\\n    if not series:\\n        return 1\\n    return max(reduce(mul, slice) for slice in slices(series, num))\\n\\n\\ndef slices(series, num):\\n    res = []\\n    while len(series) \\u003e= num:\\n        res.append(series[:num])\\n        series = series[1:]\\n    if not res:\\n        raise ValueError\\n    return [map(int, list(i)) for i in res]"}
9	28	a8880461992f576d06bdc04f	\N	clojure	scrabble-score	\N	\N	0	1	2015-04-27 11:07:26	2015-04-27 11:07:26	18	{"scrabble_score.clj":"(ns scrabble-score)\\n\\n(def letter-scores\\n  {\\"a\\" 1, \\"e\\" 1, \\"i\\" 1, \\"o\\" 1, \\"u\\" 1, \\"l\\" 1, \\"n\\" 1, \\"r\\" 1, \\"s\\" 1, \\"t\\" 1,\\n   \\"d\\" 2, \\"g\\" 2,\\n   \\"b\\" 3, \\"c\\" 3, \\"m\\" 3, \\"p\\" 3,\\n   \\"f\\" 4, \\"h\\" 4, \\"v\\" 4, \\"w\\" 4, \\"y\\" 4,\\n   \\"k\\" 5,\\n   \\"j\\" 8, \\"x\\" 8,\\n   \\"q\\" 10, \\"z\\" 10})\\n\\n(defn score-letter [letter]\\n  (letter-scores (clojure.string/lower-case letter)))\\n\\n(defn score-word [word]\\n  (reduce + (map score-letter word)))"}
10	28	6be5fbcb0c2f56ff2aca85b1	\N	javascript	phone-number	\N	\N	0	1	2015-04-12 18:51:45	2015-04-12 18:51:45	20	{"phone-number.js":"'use strict';\\n\\nfunction PhoneNumber(input) {\\n\\tvar result = input.replace(/[^\\\\d]/g, '');\\n\\n\\tif (result.length === 11 \\u0026\\u0026 result.charAt(0) === \\"1\\") {\\n\\t\\tresult = result.substr(1);\\n\\t}\\n\\n\\tif (result.length !== 10) {\\n\\t\\tresult = \\"0000000000\\";\\n\\t}\\n\\n\\tthis.phoneNumber = result;\\n}\\n\\nPhoneNumber.prototype.number = function() {\\n\\treturn this.phoneNumber;\\n}\\n\\nPhoneNumber.prototype.areaCode = function() {\\n\\treturn this.phoneNumber.substr(0, 3);\\n}\\n\\nPhoneNumber.prototype.toString = function() {\\n\\tvar segments = this.phoneNumber.match(/(\\\\d{3})(\\\\d{3})(\\\\d{4})/);\\n\\treturn \\"(\\" + segments[1] + \\") \\" + segments[2] + \\"-\\" + segments[3];\\n}\\n\\nmodule.exports = PhoneNumber;"}
11	28	ef69758730e89446890dc13d	hibernating	clojure	bob	\N	\N	0	1	2015-06-03 21:27:55	2015-06-03 21:27:55	21	{"bob.clj":"(ns bob \\n    (:require [clojure.test :refer :all]))\\n\\n(def whoa \\"Whoa, chill out!\\")\\n(def sure \\"Sure.\\")\\n(def fine \\"Fine. Be that way!\\")\\n\\n(def answers (hash-map \\n    \\"\\"                                                  fine,\\n    \\"    \\"                                              fine,\\n    \\"Does this cryogenic chamber make me look fat?\\"     sure,\\n    \\"4?\\"                                                sure,\\n    \\"I HATE YOU\\"                                        whoa,\\n    \\"WHAT THE HELL WERE YOU THINKING?\\"                  whoa,\\n    \\"WATCH OUT!\\"                                        whoa,\\n    \\"ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!\\"     whoa,\\n    \\"1, 2, 3 GO!\\"                                       whoa\\n     ))\\n    \\n(defn response-for [x] \\n    (if (= (get answers x) nil)\\n    (str \\"Whatever.\\")\\n    (get answers x)\\n))"}
12	28	4ac0d5910e6260596259eb43	pending	ruby	hamming	\N	\N	0	1	2015-04-20 22:04:35	2015-04-20 22:04:35	22	{"hamming.rb":"class Hamming\\n  def self.compute(arg1,arg2)\\n    array1 = arg1.split(\\"\\")\\n    array2 = arg2.split(\\"\\")\\n\\n    @hamming_distance = 0\\n    array1.each do |letter|\\n      @hamming_distance += 1 unless letter == array2.shift\\n    end\\n   \\n    @hamming_distance\\n  end\\nend"}
13	28	d1ba218958f62391f100b1c3	pending	haskell	raindrops	\N	\N	0	1	2015-05-22 19:48:40	2015-05-22 19:48:40	24	{"/haskell/raindrops/Raindrops.hs":"module Raindrops\\n( convert\\n) where\\n\\ndivisible :: (Integral a) =\\u003e a -\\u003e a -\\u003e Bool\\ndivisible a b = (a `mod` b) == 0\\n\\nfactorBlurbs :: [(Int,String)]\\nfactorBlurbs = [(3,\\"Pling\\"),(5,\\"Plang\\"),(7,\\"Plong\\")]\\n\\nconvert :: Int -\\u003e String\\nconvert n \\t| null ls\\t= show n\\n\\t  \\t| otherwise\\t= concatMap snd ls\\n\\t\\twhere ls = filter (divisible n . fst) factorBlurbs"}
14	28	5edd3555233895b4bfae043b	done	python	hamming	\N	\N	0	2	2015-07-19 22:19:08	2015-07-19 22:19:08	26	{"hamming.py":"#!/usr/bin/python\\n\\n## Original and new are kind of arbitrary as it works both ways\\ndef hamming(original, new):\\n    return (sum(a != b for a, b in zip(original, new)) +\\n            abs(len(original) - len(new)))"}
15	28	061275352e8200c7b707bb5c	superseded	python	hamming	\N	\N	0	1	2015-07-23 03:50:04	2015-07-23 03:50:04	26	{"hamming.py":"#!/usr/bin/python\\n\\n## Original and new are kind of arbitrary as it works both ways\\ndef hamming(original, new):\\n    return (sum(1 for a, b in zip(original, new) if a != b) +\\n            abs(len(original) - len(new)))"}
16	28	6f0bf06dc413c4eebc316dbb	pending	cpp	word-count	\N	\N	0	1	2015-04-14 20:18:35	2015-04-14 20:18:35	28	{"word_count.cpp":"//The comment block below shows the contents of word_count.h:\\r\\n/*\\r\\n#ifndef WORD_COUNT\\r\\n#define WORD_COUNT\\r\\n#include \\u003cstring\\u003e\\r\\n#include \\u003cmap\\u003e\\r\\n#include \\u003c/boost_1_56_0/boost/tokenizer.hpp\\u003e\\r\\n#include \\u003c/boost_1_56_0/boost/algorithm/string/case_conv.hpp\\u003e\\r\\n\\r\\nusing std::map;\\r\\nusing std::string;\\r\\nusing boost::tokenizer;\\r\\nusing boost::algorithm::to_lower;\\r\\n\\r\\nclass word_count {\\r\\n\\r\\npublic:\\r\\nstatic map\\u003cstring, int\\u003e words(string s);\\r\\n};\\r\\n\\r\\n#endif // !WORD_COUNT\\r\\n*/\\r\\n\\r\\n#include \\"word_count.h\\"\\r\\n\\r\\nmap\\u003cstring, int\\u003e word_count::words(string s) {\\r\\n\\ttokenizer\\u003c\\u003e scan(s);\\r\\n\\tmap\\u003cstring, int\\u003e theWords;\\r\\n\\tfor (tokenizer\\u003c\\u003e::iterator i = scan.begin(); i != scan.end(); i++) {\\r\\n\\t\\tstring current = *i;\\r\\n\\t\\tto_lower(current);\\r\\n\\t\\tif (theWords.find(current) == theWords.end()) {\\r\\n\\t\\t\\ttheWords[current] = 1;\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\ttheWords[current]++;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\treturn theWords;\\r\\n}"}
17	28	2dad83a829e7a968aca73387	done	javascript	bob	\N	\N	0	1	2015-05-09 09:43:09	2015-05-09 09:43:09	30	{"bob.js":"function Bob(){\\n  this.hey = function(message){\\n    switch(true){\\n      case /[a-zA-z]/.test(message) \\u0026\\u0026 message.toUpperCase() == message:\\n        return \\"Woah, chill out!\\";\\n        break;\\n      case /\\\\?$/.test(message):\\n        return \\"Sure.\\";\\n        break;\\n      case !/\\\\w/.test(message):\\n        return \\"Fine. Be that way!\\";\\n        break;\\n      default:\\n        return \\"Whatever.\\";\\n        break;\\n    }\\n  }\\n}\\n\\nmodule.exports = Bob;"}
18	28	984da88099b11db0625c5b63	pending	haskell	strain	\N	\N	0	1	2015-04-09 08:00:31	2015-04-09 08:00:31	31	{"Strain.hs":"module Strain (keep, discard) where\\r\\n\\r\\nkeep :: (a -\\u003e Bool) -\\u003e [a] -\\u003e [a]\\r\\nkeep _ [] = []\\r\\nkeep p (x:xs)\\r\\n  | p x         = x : keep p xs\\r\\n  | otherwise   = keep p xs\\r\\n\\r\\ndiscard :: (a -\\u003e Bool) -\\u003e [a] -\\u003e [a]\\r\\ndiscard _ [] = []\\r\\ndiscard p xs = keep (not . p) xs"}
19	28	bfe13cdc627b4c70614dcc8e	pending	python	prime-factors	\N	\N	0	1	2015-07-06 14:25:39	2015-07-06 14:25:39	33	{"prime_factors.py":"def prime_factors(n):\\n    factors = []\\n    divisor = 2\\n    while divisor**2 \\u003c= n:\\n        while (n%divisor) == 0:\\n            factors.append(divisor)\\n            n /= divisor\\n        divisor += 1\\n    if n \\u003e 1:\\n        factors.append(n)\\n    return factors"}
20	28	385f4a22ae6eb4fa15d55dc1	hibernating	python	difference-of-squares	\N	\N	0	1	2015-05-31 17:07:19	2015-05-31 17:07:19	36	{"difference_of_squares.py":"def square_of_sum(num):\\n\\tsum = 0\\n\\tfor i in range(num+1):\\n\\t\\tsum = sum + i\\n\\treturn sum**2\\n\\ndef sum_of_squares(num):\\n\\tsum = 0\\n\\tfor i in range(num+1):\\n\\t\\tsum = sum + i**2\\n\\treturn sum\\n\\ndef difference(num):\\n\\treturn square_of_sum(num) - sum_of_squares(num)"}
21	28	318bb6321d7906b8a0781802	\N	python	bob	\N	\N	0	3	2015-07-06 02:39:05	2015-07-06 02:39:05	40	{"bob.py":"import regex\\n\\ndef hey(what):\\n\\n    dictionary = {\\n    '^(?=.*[a-z|0-9]).+\\\\?\\\\s*$'  : 'Sure.',\\n    '^(?=.*[A-Z])[^\\\\p{Ll}]*$'     : 'Whoa, chill out!',\\n    '^\\\\s*$'                       : 'Fine. Be that way!'\\n    }\\n\\n    for pattern, response in dictionary.iteritems():\\n        if regex.search(unicode(pattern, 'utf-8'), what):\\n            return response\\n    return 'Whatever.'"}
22	28	8f629338864df41d8896f780	\N	python	bob	\N	\N	0	2	2015-07-16 18:15:21	2015-07-16 18:15:21	40	{"bob.py":"import regex\\n\\ndef hey(what):\\n\\n    dictionary = {\\n    '^(?=.*[a-z|0-9]).+\\\\?[\\\\s]*$'  : 'Sure.',\\n    '^(?=.*[A-Z])[^\\\\p{Ll}]*$'     : 'Whoa, chill out!',\\n    '^\\\\s*$'                       : 'Fine. Be that way!'\\n    }\\n\\n    for pattern, response in dictionary.iteritems():\\n        if regex.search(unicode(pattern, 'utf-8'), what):\\n            return response\\n    return 'Whatever.'"}
23	28	c083d08799159f217fc2127e	\N	python	bob	\N	\N	0	1	2015-10-31 09:28:51	2015-10-31 09:28:51	40	{"bob.py":"#\\n# Skeleton file for the Python \\"Bob\\" exercise.\\n#\\nimport regex\\n\\ndef hey(what):\\n\\n    dictionary = {\\n    '^(?=.*[a-z|0-9]).+\\\\?[\\\\s]*$'  : 'Sure.',\\n    '^(?=.*[A-Z])[^\\\\p{Ll}]*$'     : 'Whoa, chill out!',\\n    '^\\\\s*$'                       : 'Fine. Be that way!'\\n    }\\n\\n    for pattern, response in dictionary.iteritems():\\n        if regex.search(unicode(pattern, 'utf-8'), what):\\n            return response\\n    return 'Whatever.'"}
24	28	6545dcd3d7362c04767e8a7b	hibernating	python	word-count	\N	\N	0	1	2015-04-28 11:57:28	2015-04-28 11:57:28	41	{"/python/word-count/wordcount.py":"import re\\n\\ndef word_count(text):\\n    results = {}\\n    # text = re.findall(r\\"[\\\\w]+\\",text.strip()) \\n    text = re.findall(r\\"[^\\\\s]+\\",text.strip())\\n    print text\\n    for word in text:\\n        if word in results:\\n            results[word] += 1\\n        else:\\n            results[word] = 1\\n    return results"}
25	28	e23c9327494afa5a0ddee921	pending	haskell	leap	\N	\N	0	1	2015-10-13 08:57:50	2015-10-13 08:57:50	42	{"LeapYear.hs":"module LeapYear\\n( isLeapYear )\\nwhere\\n\\nisLeapYear :: (Integral a ) =\\u003e a -\\u003e Bool\\nisLeapYear y\\n    | y `mod` 400 == 0  = True\\n    | y `mod` 100 == 0  = False\\n    | y `mod` 4   == 0  = True\\n    | otherwise         = False"}
26	28	8dd2b74231fe738295d1d10f	pending	ruby	nth-prime	\N	\N	0	1	2015-10-09 21:13:48	2015-10-09 21:13:48	44	{"prime.rb":"require 'prime'\\n\\nmodule NthPrime\\n\\n  def nth index\\n    raise ArgumentError unless index \\u003e 0\\n\\n    take( index ).last\\n  end\\n\\nend\\n\\nPrime.send :extend, NthPrime"}
27	28	78cefe01b2f19c17ade1a704	done	go	leap	\N	\N	0	2	2015-04-10 16:34:00	2015-04-10 16:34:00	45	{"leap.go":"package leap\\n\\nfunc IsLeapYear(year int) bool {\\n\\treturn year%4 == 0 \\u0026\\u0026 (year%100 != 0 || year%400 == 0)\\n}"}
28	28	18a891d3fce1b0bd12ff75e8	superseded	go	leap	\N	\N	0	1	2015-07-31 03:19:08	2015-07-31 03:19:08	45	{"leap.go":"package leap\\n\\nfunc IsLeapYear(year int) bool {\\n\\tif ((year % 4) == 0) \\u0026\\u0026 (((year % 100) != 0) || ((year % 400) == 0)) {\\n\\t\\treturn true\\n\\t} else {\\n\\t\\treturn false\\n\\t}\\n}"}
29	28	7fd970876d423efc8498066b	pending	ruby	hello-world	\N	\N	0	1	2015-04-15 08:43:35	2015-04-15 08:43:35	47	{"hello_world.rb":"module HelloWorld\\r\\n  def self.hello name='World'\\r\\n    \\"Hello, #{name}!\\"\\r\\n  end\\r\\nend"}
30	28	e76ed62fb78ec294a561111f	done	javascript	food-chain	\N	\N	0	1	2015-07-28 16:18:04	2015-07-28 16:18:04	49	{"food-chain.js":"exports.verse = verse;\\nexports.verses = verses;\\nexports.sing = verses.bind(null, 1,8);\\n\\nvar song_len1 = \\"I know an old lady who swallowed a fly.\\\\nI don't know why she swallowed the fly. Perhaps she'll die.\\\\n\\";\\nvar song_len2 = \\"I know an old lady who swallowed a spider.\\\\nIt wriggled and jiggled and tickled inside her.\\\\n\\" +\\n      \\"She swallowed the spider to catch the fly.\\\\n\\" + \\"I don't know why she swallowed the fly. Perhaps she'll die.\\\\n\\";\\nvar song_len3 = \\"I know an old lady who swallowed a bird.\\\\n\\" +\\n      \\"How absurd to swallow a bird!\\\\n\\" +\\n      \\"She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\\\n\\" +\\n      \\"She swallowed the spider to catch the fly.\\\\n\\" +\\n      \\"I don't know why she swallowed the fly. Perhaps she'll die.\\\\n\\";\\nvar song_len4 = \\"I know an old lady who swallowed a cat.\\\\n\\" +\\n      \\"Imagine that, to swallow a cat!\\\\n\\" +\\n      \\"She swallowed the cat to catch the bird.\\\\n\\" +\\n      \\"She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\\\n\\" +\\n      \\"She swallowed the spider to catch the fly.\\\\n\\" +\\n      \\"I don't know why she swallowed the fly. \\" +\\n      \\"Perhaps she'll die.\\\\n\\";\\nvar song_len5 = \\"I know an old lady who swallowed a dog.\\\\n\\" +\\n      \\"What a hog, to swallow a dog!\\\\n\\" +\\n      \\"She swallowed the dog to catch the cat.\\\\n\\" +\\n      \\"She swallowed the cat to catch the bird.\\\\n\\" +\\n      \\"She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\\\n\\" +\\n      \\"She swallowed the spider to catch the fly.\\\\n\\" +\\n      \\"I don't know why she swallowed the fly. \\" +\\n      \\"Perhaps she'll die.\\\\n\\";\\nvar song_len6 = \\"I know an old lady who swallowed a goat.\\\\n\\" +\\n      \\"Just opened her throat and swallowed a goat!\\\\n\\" +\\n      \\"She swallowed the goat to catch the dog.\\\\n\\" +\\n      \\"She swallowed the dog to catch the cat.\\\\n\\" +\\n      \\"She swallowed the cat to catch the bird.\\\\n\\" +\\n      \\"She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\\\n\\" +\\n      \\"She swallowed the spider to catch the fly.\\\\n\\" +\\n      \\"I don't know why she swallowed the fly. \\" +\\n      \\"Perhaps she'll die.\\\\n\\";\\nvar song_len7 = \\"I know an old lady who swallowed a cow.\\\\n\\" +\\n      \\"I don't know how she swallowed a cow!\\\\n\\" +\\n      \\"She swallowed the cow to catch the goat.\\\\n\\" +\\n      \\"She swallowed the goat to catch the dog.\\\\n\\" +\\n      \\"She swallowed the dog to catch the cat.\\\\n\\" +\\n      \\"She swallowed the cat to catch the bird.\\\\n\\" +\\n      \\"She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\\\n\\" +\\n      \\"She swallowed the spider to catch the fly.\\\\n\\" +\\n      \\"I don't know why she swallowed the fly. \\" +\\n      \\"Perhaps she'll die.\\\\n\\";\\nvar song_len8 = \\"I know an old lady who swallowed a horse.\\\\n\\" + \\"She's dead, of course!\\\\n\\";\\n\\nfunction verse(len){\\n\\tswitch(len){\\n\\t\\tcase 1: return song_len1;\\n\\t\\tcase 2: return song_len2;\\n\\t\\tcase 3: return song_len3;\\n\\t\\tcase 4: return song_len4;\\n\\t\\tcase 5: return song_len5;\\n\\t\\tcase 6: return song_len6;\\n\\t\\tcase 7: return song_len7;\\n\\t\\tcase 8: return song_len8;\\n\\t}\\n}\\n\\nfunction verses(start, end){\\n\\tvar result = \\"\\";\\n\\tfor(var i=1; i \\u003c= end; i++) result += verse(i);\\n\\t\\treturn result;\\n}\\n\\t\\n\\n//console.log(verse(6));\\n//console.log(verses(1, 2));"}
31	28	c462cc81d79b46c518ef1a28	\N	elixir	grade-school	\N	\N	0	2	2015-04-10 01:13:47	2015-04-10 01:13:47	51	{"school.exs":"defmodule School do\\r\\n  @moduledoc \\"\\"\\"\\r\\n  Simulate students in a school.\\r\\n\\r\\n  Each student is in a grade.\\r\\n  \\"\\"\\"\\r\\n\\r\\n  @doc \\"\\"\\"\\r\\n  Add a student to a particular grade in school.\\r\\n  \\"\\"\\"\\r\\n  @spec add(Dict.t, String.t, pos_integer) :: Dict.t\\r\\n  def add(db, name, grade) do\\r\\n    Dict.update(db, grade, [name], fn(val) -\\u003e [name | val] end)\\r\\n  end\\r\\n\\r\\n  @doc \\"\\"\\"\\r\\n  Return the names of the students in a particular grade.\\r\\n  \\"\\"\\"\\r\\n  @spec grade(Dict.t, pos_integer) :: [String]\\r\\n  def grade(db, grade) do\\r\\n    Dict.get(db, grade, [])\\r\\n  end\\r\\n\\r\\n  @doc \\"\\"\\"\\r\\n  Sorts the school by grade and name.\\r\\n  \\"\\"\\"\\r\\n  @spec sort(Dict) :: Dict.t\\r\\n  def sort(db) do\\r\\n    db\\r\\n    |\\u003e Enum.into(%{}, fn({grade, names}) -\\u003e {grade, Enum.sort(names)} end)\\r\\n  end\\r\\nend"}
32	28	d36c1c91aac3d1dc61f3475d	\N	elixir	grade-school	\N	\N	0	1	2015-09-15 19:40:38	2015-09-15 19:40:38	51	{"school.exs":"defmodule School do\\r\\n  @moduledoc \\"\\"\\"\\r\\n  Simulate students in a school.\\r\\n\\r\\n  Each student is in a grade.\\r\\n  \\"\\"\\"\\r\\n\\r\\n  @doc \\"\\"\\"\\r\\n  Add a student to a particular grade in school.\\r\\n  \\"\\"\\"\\r\\n  @spec add(Dict.t, String.t, pos_integer) :: Dict.t\\r\\n  def add(db, name, grade) do\\r\\n    Dict.update(db, grade, [name], fn(val) -\\u003e [name | val] end)\\r\\n  end\\r\\n\\r\\n  @doc \\"\\"\\"\\r\\n  Return the names of the students in a particular grade.\\r\\n  \\"\\"\\"\\r\\n  @spec grade(Dict.t, pos_integer) :: [String]\\r\\n  def grade(db, grade) do\\r\\n    Dict.get(db, grade, [])\\r\\n  end\\r\\n\\r\\n  @doc \\"\\"\\"\\r\\n  Sorts the school by grade and name.\\r\\n  \\"\\"\\"\\r\\n  @spec sort(Dict) :: Dict.t\\r\\n  def sort(db) do\\r\\n    db\\r\\n    |\\u003e Enum.map(fn({grade, names}) -\\u003e {grade, Enum.sort(names)} end)\\r\\n    |\\u003e Enum.into %{}\\r\\n  end\\r\\nend"}
33	28	e86fddcd1c6e2d69270e342e	pending	javascript	atbash-cipher	\N	\N	0	1	2015-10-22 15:15:03	2015-10-22 15:15:03	53	{"atbash-cipher.js":"var\\talphabet = 'abcdefghijklmnopqrstuvwxyz_';\\n\\nvar atbash = {\\n\\tencode: encode\\n}\\n\\n\\nfunction encode(string) {\\n\\tvar result = '';\\n\\n\\t// remove ' ' and punctuation\\n\\tstring = string.toLowerCase().replace(/[\\\\s,.?!]/g, '').split('');\\n\\n\\t// create 5 character chunks\\n\\twhile (string.length \\u003e 0) {\\n\\t\\tresult += cipherize(string.splice(0,5)).join('') + ' ';\\n\\t}\\n\\n\\treturn result.trim();\\n}\\n\\n\\nfunction cipherize(chunk) {\\n\\treturn chunk.map(function(letter) {\\n\\n\\t\\tvar index = alphabet.indexOf(letter);\\n\\n\\t\\t// numbers return as numbers, \\n\\t\\tif (!isNaN(letter)) {\\n\\t\\t\\treturn letter;\\n\\t\\t} \\n\\n\\t\\t// get reverse index of letter in alphabet to create cipher\\n\\t\\treturn alphabet.slice(-index-2, -index-1);\\n\\t});\\n}"}
34	29	07ca1eb97a08f9a7d8b70ae6	done	javascript	clock	\N	\N	0	1	2015-09-02 16:15:11	2015-09-02 16:15:11	56	{"\\\\javascript\\\\clock\\\\clock.js":"function Clock(h, m) {\\r\\n    this.time = (h||0)*60 + (m||0);\\r\\n}\\r\\n\\r\\nClock.prototype = {\\r\\n    toString: function() {\\r\\n        return [\\r\\n            Math.floor(this.time / 60) % 24,\\r\\n            this.time % 60\\r\\n        ].map(function(n) { return (\\"0\\"+n).slice(-2); }).join(':');\\r\\n    },\\r\\n    plus: function(m) {\\r\\n        this.time += m;\\r\\n        return this;\\r\\n    },\\r\\n    minus: function(m) {\\r\\n        this.time -= m;\\r\\n        while (this.time \\u003c 0) {\\r\\n            this.time += 24*60;\\r\\n        }\\r\\n        return this;\\r\\n    },\\r\\n    equals: function(other) {\\r\\n        return this.toString() === other.toString();\\r\\n    }\\r\\n};\\r\\n\\r\\nmodule.exports.at = function(h, m) {\\r\\n    return new Clock(h, m);\\r\\n};"}
35	29	2c442b4c670b897823a89da9	\N	haskell	accumulate	\N	\N	0	1	2015-11-03 00:44:28	2015-11-03 00:44:28	57	{"Accumulate.hs":"module Accumulate (accumulate) where\\n\\naccumulate :: (t -\\u003e a) -\\u003e [t] -\\u003e [a]\\naccumulate _ [] = []\\naccumulate f (x:xs) = f x : accumulate f xs"}
36	29	3e615732c02e6f4caa0fa910	done	python	difference-of-squares	\N	\N	0	2	2015-08-12 04:05:13	2015-08-12 04:05:13	59	{"difference_of_squares.py":"# Return difference of square_of_sum and sum_of_squares\\ndef difference(x):\\n    return square_of_sum(x) - sum_of_squares(x)\\n    \\n# Use mathematical induction to get sum then return the square of the result\\ndef square_of_sum(x):\\n    return (x*(x+1)/2)**2\\n    \\n# Use sum of squares formula and return the result\\ndef sum_of_squares(x):\\n    return (x*(x+1)*(x*2+1)/6)"}
37	29	c57826ba167a8aad7cd37cee	superseded	python	difference-of-squares	\N	\N	0	1	2015-09-27 06:41:35	2015-09-27 06:41:35	59	{"difference_of_squares.py":"# Return difference of square_of_sum and sum_of_squares\\ndef difference(x):\\n    return abs(square_of_sum(x) - sum_of_squares(x))\\n    \\n# Use mathematical induction to get sum then return the square of the result\\ndef square_of_sum(x):\\n    return (x*(x+1)/2)**2\\n    \\n# Use sum of squares formula and return the result\\ndef sum_of_squares(x):\\n    return (x*(x+1)*(x*2+1)/6)"}
38	29	94681864d45ec93b39125f90	\N	ruby	rna-transcription	\N	\N	0	1	2015-08-16 06:12:41	2015-08-16 06:12:41	60	{"rna_transcription.rb":"class Complement\\n\\n\\tVERSION = 2\\n\\n\\tdef self.of_dna(dna)\\n\\t\\tcomp = \\"\\"\\n\\t\\tdna.each_char do |char|\\n\\t\\t\\tif char == \\"C\\"\\n\\t\\t\\t\\tcomp \\u003c\\u003c \\"G\\"\\n\\t\\t\\telsif char == \\"G\\"\\n\\t\\t\\t\\tcomp \\u003c\\u003c \\"C\\"\\n\\t\\t\\telsif char == \\"T\\"\\n\\t\\t\\t\\tcomp \\u003c\\u003c \\"A\\"\\n\\t\\t\\telsif char == \\"A\\"\\n\\t\\t\\t\\tcomp \\u003c\\u003c \\"U\\"\\n\\t\\t\\telse\\n\\t\\t\\t\\traise(ArgumentError)\\n\\t\\t\\tend\\n\\t\\tend\\n\\t\\tcomp\\n\\tend\\n\\n\\tdef self.of_rna(dna)\\n\\t\\tcomp = \\"\\"\\n\\t\\tdna.each_char do |char|\\n\\t\\t\\tif char == \\"C\\"\\n\\t\\t\\t\\tcomp \\u003c\\u003c \\"G\\"\\n\\t\\t\\telsif char == \\"G\\"\\n\\t\\t\\t\\tcomp \\u003c\\u003c \\"C\\"\\n\\t\\t\\telsif char == \\"U\\"\\n\\t\\t\\t\\tcomp \\u003c\\u003c \\"A\\"\\n\\t\\t\\telsif char == \\"A\\"\\n\\t\\t\\t\\tcomp \\u003c\\u003c \\"T\\"\\n\\t\\t\\telse\\n\\t\\t\\t\\traise(ArgumentError)\\n\\t\\t\\tend\\n\\t\\tend\\n\\t\\tcomp\\n\\tend\\n\\nend"}
39	29	3756ac2323ff6e57f8ce613c	done	clojure	bob	\N	\N	0	1	2015-08-14 14:45:46	2015-08-14 14:45:46	62	{"bob.clj":"(ns bob)\\n\\n(defn ^:private re-matches? [re s]\\n  ((complement nil?) (re-matches re s)))\\n\\n(defn ^:private is-shouted? [s]\\n  (re-matches? #\\"^[A-Z \\\\d\\\\W]{2,}[!?A-Z]$\\" s))\\n\\n(defn ^:private is-question? [s]\\n  (re-matches? #\\"^.*\\\\?$\\" s))\\n\\n(defn ^:private is-silence? [s]\\n  (re-matches? #\\"^\\\\s*$\\" s))\\n\\n(defn response-for [words]\\n  (cond\\n    (is-silence? words) \\"Fine. Be that way!\\"\\n    (is-shouted? words) \\"Woah, chill out!\\"\\n    (is-question? words) \\"Sure.\\"\\n    :else \\"Whatever.\\"))"}
84	7	4d58e5d28ae3b5d8ef19c6ec	pending	ruby	gigasecond	\N	\N	0	2	2015-11-07 22:39:21	2015-11-07 22:39:21	131	{"/ruby/gigasecond/gigasecond.rb":"module Gigasecond\\n  GIGASECOND = 10**9\\n\\n  def self.from(birthday)\\n    birthday + GIGASECOND\\n  end\\nend"}
40	29	bd0ccd27a9f24c15f0a93135	superseded	ruby	raindrops	\N	\N	0	1	2015-07-10 22:00:18	2015-07-10 22:00:18	63	{"\\\\ruby\\\\raindrops\\\\raindrops.rb":"class Raindrops\\n\\n  def self.convert(num)\\n    str = \\"\\"\\n\\n    primes = {3=\\u003e \\"Pling\\", 5=\\u003e \\"Plang\\", 7=\\u003e \\"Plong\\"}\\n\\n    primes.each do |key,val|\\n      if num % key == 0\\n        str \\u003c\\u003c primes[key]\\n      end\\n    end\\n\\n    if str.empty?\\n      str = num.to_s\\n    end\\n\\n    str\\n  end\\n\\nend"}
41	29	045aa61b112a9d1d4552025c	superseded	ruby	raindrops	\N	\N	0	2	2015-07-31 05:59:18	2015-07-31 05:59:18	63	{"\\\\ruby\\\\raindrops\\\\raindrops.rb":"class Raindrops\\n\\n  def self.convert(num)\\n    str = \\"\\"\\n\\n    primes = {3=\\u003e \\"Pling\\", 5=\\u003e \\"Plang\\", 7=\\u003e \\"Plong\\"}\\n\\n    primes.each do |key,val|\\n      if num % key == 0\\n        str \\u003c\\u003c primes[key]\\n      end\\n    end\\n\\n    str = num.to_s if str.empty?\\n\\n    str\\n  end\\n\\nend"}
42	29	e03b9cdfc79580e0dfe8b0db	hibernating	ruby	raindrops	\N	\N	0	3	2015-08-29 19:16:22	2015-08-29 19:16:22	63	{"\\\\ruby\\\\raindrops\\\\raindrops.rb":"class Raindrops\\n\\n  def self.convert(num)\\n    str = \\"\\"\\n\\n    prime_factors = {3=\\u003e \\"Pling\\", 5=\\u003e \\"Plang\\", 7=\\u003e \\"Plong\\"}\\n\\n    prime_factors.each do |key,_|\\n      str \\u003c\\u003c prime_factors[key] if num % key == 0\\n    end\\n\\n    str = num.to_s if str.empty?\\n\\n    str\\n  end\\n\\nend"}
43	31	aeb9170eed48577a946ac87e	pending	go	clock	\N	\N	0	1	2015-06-18 13:19:34	2015-06-18 13:19:34	74	{"\\\\go\\\\clock\\\\clock.go":"package clock\\n\\nimport \\"fmt\\"\\n\\nconst TestVersion = 2\\n\\ntype Clock struct {\\n\\thour, minute int\\n}\\n\\nfunc Time(hour, minute int) Clock {\\n\\tif minute \\u003e 59 {\\n\\t\\thour += minute / 60\\n\\t\\tminute = minute % 60\\n\\t}\\n\\tfor hour \\u003c 0 || minute \\u003c 0 {\\n\\t\\tif hour \\u003c 0 {\\n\\t\\t\\thour += 24\\n\\t\\t}\\n\\t\\tif minute \\u003c 0 {\\n\\t\\t\\thour -= 1\\n\\t\\t\\tminute += 60\\n\\t\\t}\\n\\t}\\n\\n\\treturn Clock{hour % 24, minute}\\n}\\n\\nfunc (c Clock) String() string {\\n\\treturn fmt.Sprintf(\\"%02d:%02d\\", c.hour, c.minute)\\n}\\n\\nfunc (c Clock) Add(minutes int) Clock {\\n\\treturn Time(c.hour, c.minute+minutes)\\n}"}
44	31	1a8f3d777871b31b684ce935	needs_input	ruby	binary-search-tree	\N	\N	0	1	2015-11-04 21:29:24	2015-11-04 21:29:24	75	{"/ruby/binary-search-tree/bst.rb":"# binary search tree implementation\\nclass Bst\\n  attr_reader :data\\n  attr_accessor :left, :right\\n\\n  def initialize(n)\\n    @data = n\\n  end\\n\\n  def insert(n, node = self)\\n    if n \\u003c= node.data\\n      node.left ? insert(n, node.left) : node.left = Bst.new(n)\\n    else\\n      node.right ? insert(n, node.right) : node.right = Bst.new(n)\\n    end\\n  end\\n\\n  def each(root = self, \\u0026block)\\n    inorder_traversal(root, block)\\n  end\\n\\n  private\\n\\n  def inorder_traversal(curr_root, block)\\n    return unless curr_root\\n    inorder_traversal(curr_root.left, block)\\n    block.call curr_root.data\\n    inorder_traversal(curr_root.right, block)\\n  end\\nend"}
45	31	99b05d589862c43cf711eb78	pending	javascript	sum-of-multiples	\N	\N	0	2	2015-08-25 13:14:50	2015-08-25 13:14:50	76	{"/javascript/sum-of-multiples/sum-of-multiples.js":"/*global module */\\n\\n// more complex approach: use closed formula for sum(1..n-1)\\n\\n(function () {\\n    \\"use strict\\";\\n\\n    function sum1ToN(n) {\\n        return n * (n - 1) / 2;\\n    }\\n\\n    function sumOfMultiplesOfXIn1ToN(x, n) {\\n        return sum1ToN(Math.floor((n - 1) / x) + 1) * x;\\n    }\\n\\n    function isDivisibleBy(a, b) {\\n        return a % b === 0;\\n    }\\n\\n    function forEachSubsetOfLengthNHelper(array, end, n, subset, func) {\\n        var i;\\n        for (i = n - 1; i \\u003c end; i += 1) {\\n            subset.unshift(array[i]);\\n            if (n \\u003e 1) {\\n                forEachSubsetOfLengthNHelper(array, i, n - 1, subset, func);\\n            } else {\\n                func(subset);\\n            }\\n            subset.shift();\\n        }\\n    }\\n\\n    function forEachSubsetOfLengthN(array, n, func) {\\n        if (n === 0) {\\n            func([]);\\n        } else {\\n            forEachSubsetOfLengthNHelper(array, array.length, n, [], func);\\n        }\\n    }\\n\\n    function reduce(array, func, valueIfEmpty) {\\n        var result, i;\\n        if (array.length === 0) {\\n            return valueIfEmpty;\\n        }\\n        result = array[0];\\n        for (i = 1; i \\u003c array.length; i += 1) {\\n            result = func(result, array[i]);\\n        }\\n        return result;\\n    }\\n\\n    function product(array) {\\n        return reduce(array, function (a, b) {\\n            return a * b;\\n        });\\n    }\\n\\n    function SumOfMultiples(numbers) {\\n        if (!(this instanceof SumOfMultiples)) {\\n            return new SumOfMultiples(numbers);\\n        }\\n        this.numbers = numbers ? numbers.slice() : [3, 5];\\n    }\\n\\n    SumOfMultiples.prototype.to = function (n) {\\n        var result = 0,\\n            addOrSubtractSumOfMultiplesOfProduct,\\n            i;\\n        addOrSubtractSumOfMultiplesOfProduct = function (subset) {\\n            var factor = isDivisibleBy(subset.length, 2) ? -1 : 1;\\n            result += factor * sumOfMultiplesOfXIn1ToN(product(subset), n);\\n        };\\n        for (i = 1; i \\u003c= this.numbers.length; i += 1) {\\n            forEachSubsetOfLengthN(this.numbers, i,\\n                addOrSubtractSumOfMultiplesOfProduct);\\n        }\\n        return result;\\n    };\\n\\n    module.exports = SumOfMultiples;\\n}());"}
46	31	02bfa478ca0a7e0dd7ddf528	superseded	javascript	sum-of-multiples	\N	\N	0	1	2015-11-02 07:25:11	2015-11-02 07:25:11	76	{"/javascript/sum-of-multiples/sum-of-multiples.js":"/*global module */\\n\\n// simple approach: iterate over 1..n-1\\n\\n(function () {\\n    \\"use strict\\";\\n\\n    function SumOfMultiples(numbers) {\\n        if (!(this instanceof SumOfMultiples)) {\\n            return new SumOfMultiples(numbers);\\n        }\\n        this.numbers = numbers ? numbers.slice() : [3, 5];\\n    }\\n\\n    function any(array, func, thisArg) {\\n        return !array.every(function (currentValue, index, array) {\\n            return !func(currentValue, index, array);\\n        }, thisArg);\\n    }\\n\\n    function isDivisibleBy(a, b) {\\n        return a % b === 0;\\n    }\\n\\n    SumOfMultiples.prototype.to = function (n) {\\n        var result = 0,\\n            isIDivisibleBy,\\n            i;\\n        isIDivisibleBy = function (number) {\\n            return isDivisibleBy(i, number);\\n        };\\n        for (i = 1; i \\u003c n; i += 1) {\\n            if (any(this.numbers, isIDivisibleBy)) {\\n                result += i;\\n            }\\n        }\\n        return result;\\n    };\\n\\n    module.exports = SumOfMultiples;\\n}());"}
47	31	b2b6d1897d8a9b6bae2de7b4	pending	python	bob	\N	\N	0	1	2015-08-22 02:01:33	2015-08-22 02:01:33	77	{"/python/bob/bob.py":"#\\n# Skeleton file for the Python \\"Bob\\" exercise.\\n#\\ndef hey(what):\\n\\t# Define some variables to count and flag certain cases.\\n\\tupperCount = 0\\n\\tlowerCount = 0\\n\\talphaCount = 0\\n\\tquestion = False\\n\\tnone = False\\n\\n\\tfor i in what:\\n\\t\\t# Check for empty input or spaces.  Set none equal to True if found. \\n\\t\\tif (i == \\"\\" or i == \\" \\") and alphaCount == 0 and len(what) \\u003e 0:\\n\\t\\t\\tnone = True\\n\\t\\t# Check for a letter and increase alphaCount to ensure that no strings containing letters count as empty.\\n\\t\\tif i.isalpha():\\n\\t\\t\\talphaCount += 1\\n\\t\\t\\t# If a letter is found, check if it's uppercase or lowercase and add to the counts accordingly.\\n\\t\\t\\tif i == i.upper():\\n\\t\\t\\t\\tupperCount += 1\\n\\t\\t\\telif i == i.lower():\\n\\t\\t\\t\\tlowerCount += 1\\n\\t\\t# If it isn't an empty string or space, and it isn't an alpha character, set none equal to false to catch numbers.\\n\\t\\telif not(i.isalpha()):\\n\\t\\t\\tnone = False\\n\\t\\t# If there is a question mark and the string isn't empty and the question mark is the last character, set question\\n\\t\\t# equal to true\\n\\t\\tif i == \\"?\\" and not(len(what) == 0) and what[what.index(i)] == what[-1]:\\n\\t\\t\\tquestion = True\\n\\t# Admittedly phoning this one in.  I have no idea how to make it catch a string that should be all spaces plus an indent\\n\\t# so I just searched the input for a substring of a breakout for a tab and tested for that first.\\n\\tif \\"\\\\t\\" in what:\\n\\t\\tif alphaCount == 0:\\n\\t\\t\\treturn \\"Fine. Be that way!\\"\\n\\t# If there are any letters, set none equal to false.\\n\\tif alphaCount \\u003e 0:\\n\\t\\tnone = False\\n\\t# If what has no length, set none equal to true\\n\\tif len(what) == 0:\\n\\t\\tnone = True\\n\\t# If none is equal to true, return \\"Fine. Be that way!\\"\\n\\tif none == True:\\n\\t\\treturn \\"Fine. Be that way!\\"\\n\\t# If there are no lowercase letters and more than one uppercase letter, return the shotuing response.\\n\\tif lowerCount == 0 and upperCount \\u003e 1:\\n\\t\\treturn \\"Whoa, chill out!\\"\\t\\n\\t# If it is a question, return \\"Sure\\"\\n\\tif question == True:\\n\\t\\treturn \\"Sure.\\"\\n\\t# If all else fails, return \\"Whatever.\\"\\n\\treturn \\"Whatever.\\""}
48	31	2275e4ab08aa4f42965c84db	pending	python	largest-series-product	\N	\N	0	1	2015-05-29 10:10:30	2015-05-29 10:10:30	78	{"/python/largest-series-product/largest_series_product.py":"def slices(string, substring_length):\\n    if substring_length \\u003e len(string):\\n        raise ValueError(\\"You can't have a slice longer than the string.\\")\\n\\n    # Cast string to a list of numbers\\n    digit_list = list(string)\\n    digit_list = [int(digit) for digit in digit_list]\\n\\n    substring_list = []\\n\\n    for i in range(len(digit_list) - substring_length + 1):\\n        # This part is correct in that it passes the tests,\\n        # but now I don't understand why it works.\\n        # It seems like a substring length of 1 would return\\n        # substrings of length 2.\\n        substring_list.append(digit_list[i:i + substring_length])\\n\\n    return substring_list\\n\\n\\ndef largest_product(string, substring_length):\\n    list_of_slices = slices(string, substring_length)\\n    list_of_products = [product_of_list(number_list) for number_list in list_of_slices]\\n    return max(list_of_products)\\n\\n\\ndef product_of_list(list_of_numbers):\\n    product = 1\\n    for number in list_of_numbers:\\n        product *= number\\n    return product"}
49	31	8992d876012a6519932af3ed	superseded	ruby	bob	\N	\N	0	1	2015-06-13 09:51:46	2015-06-13 09:51:46	80	{"bob.rb":"class Bob\\n\\n  def hey(statement)\\n    if statement == \\"\\"\\n      \\"Fine. Be that way.\\"\\n    elsif statement == statement.upcase\\n      \\"Woah, chill out!\\"\\n    elsif statement.split(\\"\\").last == \\"?\\"\\n      \\"Sure.\\"\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\nend"}
50	31	feedd39b3f6ff5cd63bf2a56	superseded	ruby	bob	\N	\N	0	2	2015-07-15 17:38:03	2015-07-15 17:38:03	80	{"bob.rb":"class Bob\\n\\n  def hey(statement)\\n    if statement == \\"\\"\\n      \\"Fine. Be that way.\\"\\n    elsif shouting?(statement)\\n      \\"Woah, chill out!\\"\\n    elsif question?(statement)\\n      \\"Sure.\\"\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\n\\n  def shouting?(statement)\\n    statement == statement.upcase\\n  end\\n\\n  def question?(statement)\\n    statement.end_with?(\\"?\\")\\n  end\\nend"}
51	31	076dd30b8a8a260ca30ede62	done	ruby	bob	\N	\N	0	3	2015-07-22 20:59:02	2015-07-22 20:59:02	80	{"bob.rb":"class Bob\\n\\n  def hey(statement)\\n    if silence?(statement)\\n      \\"Fine. Be that way.\\"\\n    elsif shouting?(statement)\\n      \\"Woah, chill out!\\"\\n    elsif question?(statement)\\n      \\"Sure.\\"\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\n\\n  def silence?(statement)\\n    statement.empty?\\n  end\\n\\n  def shouting?(statement)\\n    statement == statement.upcase\\n  end\\n\\n  def question?(statement)\\n    statement.end_with?(\\"?\\")\\n  end\\nend"}
52	31	f862488e9bb7c7740c429c7b	pending	cpp	meetup	\N	\N	0	1	2015-06-23 17:21:41	2015-06-23 17:21:41	88	{"meetup.cpp":"#include \\"meetup.hpp\\"\\n\\nusing meetup::scheduler;\\nnamespace g = boost::gregorian;\\n\\nscheduler::scheduler( g::greg_month month, g::greg_year year )\\n: month_(month), year_(year)\\n{}\\n\\ng::date scheduler::Nteenth( g::greg_weekday dow ) const\\n{\\n   return g::first_day_of_the_week_after{ dow }.get_date( g::date(year_,month_,12) );\\n}\\n\\ng::date scheduler::NthDoW( WeekOrdinal week, g::greg_weekday dow ) const\\n{\\n   return g::nth_day_of_the_week_in_month{ week, dow, month_ }.get_date( year_ );\\n}\\n\\ng::date scheduler::Last( g::greg_weekday dow ) const\\n{\\n   return g::last_day_of_the_week_in_month{ dow, month_ }.get_date( year_ );\\n}","meetup.hpp":"#ifndef MEETUP_HPP_INCLUDED\\n#define MEETUP_HPP_INCLUDED 1\\n\\n#include \\u003cboost/date_time/gregorian/gregorian_types.hpp\\u003e\\n\\nnamespace meetup\\n{\\n   class scheduler\\n   {\\n      using nwd = boost::gregorian::nth_day_of_the_week_in_month;\\n      using WeekOrdinal = decltype( nwd::first );\\n   public:\\n      scheduler();\\n      scheduler( boost::gregorian::greg_month month, boost::gregorian::greg_year year );\\n      \\n      boost::gregorian::date sunteenth() const { return Nteenth( boost::gregorian::Sunday ); }\\n      boost::gregorian::date monteenth() const { return Nteenth( boost::gregorian::Monday ); }\\n      boost::gregorian::date tuesteenth() const { return Nteenth( boost::gregorian::Tuesday ); }\\n      boost::gregorian::date wednesteenth() const { return Nteenth( boost::gregorian::Wednesday ); }\\n      boost::gregorian::date thursteenth() const { return Nteenth( boost::gregorian::Thursday ); }\\n      boost::gregorian::date friteenth() const { return Nteenth( boost::gregorian::Friday ); }\\n      boost::gregorian::date saturteenth() const { return Nteenth( boost::gregorian::Saturday ); }\\n      \\n      boost::gregorian::date first_sunday() const { return NthDoW( nwd::first, boost::gregorian::Sunday ); }\\n      boost::gregorian::date first_monday() const { return NthDoW( nwd::first, boost::gregorian::Monday ); }\\n      boost::gregorian::date first_tuesday() const { return NthDoW( nwd::first, boost::gregorian::Tuesday ); }\\n      boost::gregorian::date first_wednesday() const { return NthDoW( nwd::first, boost::gregorian::Wednesday ); }\\n      boost::gregorian::date first_thursday() const { return NthDoW( nwd::first, boost::gregorian::Thursday ); }\\n      boost::gregorian::date first_friday() const { return NthDoW( nwd::first, boost::gregorian::Friday ); }\\n      boost::gregorian::date first_saturday() const { return NthDoW( nwd::first, boost::gregorian::Saturday ); }\\n      \\n      boost::gregorian::date second_sunday() const { return NthDoW( nwd::second, boost::gregorian::Sunday ); }\\n      boost::gregorian::date second_monday() const { return NthDoW( nwd::second, boost::gregorian::Monday ); }\\n      boost::gregorian::date second_tuesday() const { return NthDoW( nwd::second, boost::gregorian::Tuesday ); }\\n      boost::gregorian::date second_wednesday() const { return NthDoW( nwd::second, boost::gregorian::Wednesday ); }\\n      boost::gregorian::date second_thursday() const { return NthDoW( nwd::second, boost::gregorian::Thursday ); }\\n      boost::gregorian::date second_friday() const { return NthDoW( nwd::second, boost::gregorian::Friday ); }\\n      boost::gregorian::date second_saturday() const { return NthDoW( nwd::second, boost::gregorian::Saturday ); }\\n      \\n      boost::gregorian::date third_sunday() const { return NthDoW( nwd::third, boost::gregorian::Sunday ); }\\n      boost::gregorian::date third_monday() const { return NthDoW( nwd::third, boost::gregorian::Monday ); }\\n      boost::gregorian::date third_tuesday() const { return NthDoW( nwd::third, boost::gregorian::Tuesday ); }\\n      boost::gregorian::date third_wednesday() const { return NthDoW( nwd::third, boost::gregorian::Wednesday ); }\\n      boost::gregorian::date third_thursday() const { return NthDoW( nwd::third, boost::gregorian::Thursday ); }\\n      boost::gregorian::date third_friday() const { return NthDoW( nwd::third, boost::gregorian::Friday ); }\\n      boost::gregorian::date third_saturday() const { return NthDoW( nwd::third, boost::gregorian::Saturday ); }\\n      \\n      boost::gregorian::date fourth_sunday() const { return NthDoW( nwd::fourth, boost::gregorian::Sunday ); }\\n      boost::gregorian::date fourth_monday() const { return NthDoW( nwd::fourth, boost::gregorian::Monday ); }\\n      boost::gregorian::date fourth_tuesday() const { return NthDoW( nwd::fourth, boost::gregorian::Tuesday ); }\\n      boost::gregorian::date fourth_wednesday() const { return NthDoW( nwd::fourth, boost::gregorian::Wednesday ); }\\n      boost::gregorian::date fourth_thursday() const { return NthDoW( nwd::fourth, boost::gregorian::Thursday ); }\\n      boost::gregorian::date fourth_friday() const { return NthDoW( nwd::fourth, boost::gregorian::Friday ); }\\n      boost::gregorian::date fourth_saturday() const { return NthDoW( nwd::fourth, boost::gregorian::Saturday ); }\\n      \\n      boost::gregorian::date last_sunday() const { return Last( boost::gregorian::Sunday ); }\\n      boost::gregorian::date last_monday() const { return Last( boost::gregorian::Monday ); }\\n      boost::gregorian::date last_tuesday() const { return Last( boost::gregorian::Tuesday ); }\\n      boost::gregorian::date last_wednesday() const { return Last( boost::gregorian::Wednesday ); }\\n      boost::gregorian::date last_thursday() const { return Last( boost::gregorian::Thursday ); }\\n      boost::gregorian::date last_friday() const { return Last( boost::gregorian::Friday ); }\\n      boost::gregorian::date last_saturday() const { return Last( boost::gregorian::Saturday ); }\\n      \\n   private:\\n      boost::gregorian::greg_month month_;\\n      boost::gregorian::greg_year  year_ ;\\n      \\n      boost::gregorian::date Nteenth( boost::gregorian::greg_weekday dow ) const;\\n      boost::gregorian::date NthDoW( WeekOrdinal week, boost::gregorian::greg_weekday dow ) const;\\n      boost::gregorian::date Last( boost::gregorian::greg_weekday dow ) const;\\n\\n   };\\n}\\n\\n#endif"}
53	31	25d515dda8983b0b29346005	superseded	python	word-count	\N	\N	0	3	2015-05-30 02:14:21	2015-05-30 02:14:21	92	{"word-count.py":"'''\\n:Author: rodrigo\\n:Date: 12/09/2013\\n'''\\n\\n\\nfrom collections import Counter\\nfrom re import split\\n\\nclass Phrase(object):\\n\\n    def __init__(self, phrase):\\n        self.phrase = phrase\\n\\n    def word_count(self):\\n        return Counter(self._split_phrase())\\n\\n    def _split_phrase(self):\\n        return (w for w in split(r'\\\\W', self._normalize_phrase()) if w)\\n\\n    def _normalize_phrase(self):\\n        return self.phrase.lower()"}
54	31	60d2c931282896720245ac45	superseded	python	word-count	\N	\N	0	2	2015-08-22 03:08:55	2015-08-22 03:08:55	92	{"word-count.py":"'''\\n:Author: rodrigo\\n:Date: 12/09/2013\\n'''\\n\\n\\nfrom collections import Counter\\nfrom re import split\\n\\nclass Phrase(object):\\n\\n    def __init__(self, phrase):\\n        self.phrase = phrase\\n\\n    def word_count(self):\\n        return Counter(self._split_phrase())\\n\\n    def _split_phrase(self):\\n        for word in [_word for _word in split(r'\\\\W+', self._normalize_phrase())\\n                        if _word]:\\n            yield word\\n\\n    def _normalize_phrase(self):\\n        return self.phrase.lower()"}
55	31	f00c8c23a87d0b2aaed495cf	superseded	python	word-count	\N	\N	0	1	2015-09-15 10:59:33	2015-09-15 10:59:33	92	{"word-count.py":"'''\\n:Author: rodrigo\\n:Date: 12/09/2013\\n'''\\n\\nfrom re import split\\n\\n\\nclass Phrase(object):\\n\\n    def __init__(self, phrase):\\n\\n        self.phrase = phrase\\n\\n    def word_count(self):\\n\\n        word_count_return = {}\\n        list_word = self.split_words()\\n\\n        for word in set(self.split_words()):\\n            word_count_return[word] = list_word.count(word)\\n\\n        return word_count_return\\n\\n    def split_words(self):\\n\\n        return list(filter(None, split(r'\\\\W*', self.phrase.lower())))"}
56	31	e19dbcee7d9dcb3cb4e01564	done	python	word-count	\N	\N	0	4	2015-10-24 11:57:27	2015-10-24 11:57:27	92	{"word-count.py":"'''\\n:Author: rodrigo\\n:Date: 12/09/2013\\n'''\\n\\n\\nfrom collections import Counter\\nfrom re import findall\\n\\n\\nclass Phrase(object):\\n\\n    def __init__(self, phrase):\\n        self.phrase = phrase\\n\\n    def word_count(self):\\n        return Counter(self._split_phrase())\\n\\n    def _split_phrase(self):\\n        return findall(r'\\\\w+', self._normalize_phrase())\\n\\n    def _normalize_phrase(self):\\n        return self.phrase.lower()"}
57	31	d9b7a444f3a560244e9221fe	pending	swift	crypto-square	\N	\N	0	1	2015-07-23 14:40:26	2015-07-23 14:40:26	97	{"swift/crypto-square/Crypto.swift":"//\\n//  Crypto.swift\\n//  exercism-test-runner\\n//\\n//  Created by Kevin VanderLugt on 3/26/15.\\n//  Copyright (c) 2015 Alpine Pipeline, LLC. All rights reserved.\\n//\\n\\nimport Foundation\\n\\nclass Crypto {\\n    var message: String\\n    \\n    init(_ message: String) {\\n        self.message = message\\n    }\\n    \\n    var normalizePlaintext: String {\\n        let allowedCharacterSet = NSCharacterSet.alphanumericCharacterSet()\\n        let components = message.lowercaseString.componentsSeparatedByCharactersInSet(allowedCharacterSet.invertedSet)\\n        return join(\\"\\", components)\\n    }\\n    \\n    var size: Int {\\n        let squareRoot = ceil(sqrt(Double(countElements(normalizePlaintext))))\\n        return Int(squareRoot)\\n    }\\n    \\n    private var rows: Int {\\n        let stringLength = countElements(normalizePlaintext)\\n        return Int(ceil(Double(stringLength)/Double(size)))\\n    }\\n    \\n    var plaintextSegments: [String] {\\n        if(size == 0) { return [] }\\n        \\n        var segments = Array(count: rows, repeatedValue: \\"\\")\\n        for (index, character) in enumerate(normalizePlaintext) {\\n            let rowIndex = index / size\\n            segments[rowIndex] = segments[rowIndex] + String(character)\\n        }\\n        return segments\\n    }\\n    \\n    var ciphertext: String {\\n        return reduce(0..\\u003csize, \\"\\", { (text, index) in\\n            return text + reduce(self.plaintextSegments, \\"\\", { (wholeSegment, segment) in\\n                if(index \\u003c countElements(segment)) {\\n                    return wholeSegment + \\"\\\\(segment[index])\\"\\n                }\\n                return wholeSegment\\n            })\\n        })\\n    }\\n    \\n    var normalizeCiphertext: String {\\n        return join(\\" \\", ciphertext.splitEveryCharacter(rows)).stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceCharacterSet())\\n    }\\n}\\n\\nextension String {\\n    subscript (i: Int) -\\u003e Character {\\n        return self[advance(self.startIndex, i)]\\n    }\\n    \\n    subscript (r: Range\\u003cInt\\u003e) -\\u003e String {\\n        return substringWithRange(Range(start: advance(startIndex, r.startIndex), end: advance(startIndex, r.endIndex)))\\n    }\\n    func splitEveryCharacter(count: Int) -\\u003e [String] {\\n        let stringLength = countElements(self)\\n        var wordArray = [String]()\\n        for split in 0...stringLength/count {\\n            let startIndex = advance(split*count, 0)\\n            var endIndex = advance(split*count, count)\\n            if(endIndex \\u003e stringLength) { endIndex = stringLength }\\n            wordArray.append(self[Range(start: startIndex, end: endIndex)])\\n        }\\n        return wordArray\\n    }\\n}"}
58	31	ab6ec2232cf5b6a9bdcfc90b	superseded	cpp	prime-factors	\N	\N	0	1	2015-06-13 17:20:09	2015-06-13 17:20:09	99	{"prime_factors.h":"#ifndef PRIME_FACTORS_H\\n#define PRIME_FACTORS_H\\n\\n#include \\u003cvector\\u003e\\n\\nnamespace prime_factors\\n{\\n\\nstd::vector\\u003cint\\u003e of(int natural)\\n{\\n  std::vector\\u003cint\\u003e primes;\\n\\n  if(natural \\u003c= 1)\\n    return primes;\\n\\n  auto current = natural;\\n  auto divider = 2;\\n\\n  while(current != 1)\\n  {\\n    if(current % divider == 0) {\\n      current /= divider;\\n      primes.push_back(divider);\\n      continue;\\n    }\\n\\n    ++divider;\\n  }\\n\\n  return primes;\\n}\\n\\n}\\n\\n#endif"}
59	31	8b3f7758e440dd7ab05e0a29	pending	cpp	prime-factors	\N	\N	0	2	2015-10-22 10:03:14	2015-10-22 10:03:14	99	{"prime_factors.h":"#ifndef PRIME_FACTORS_H\\n#define PRIME_FACTORS_H\\n\\n#include \\u003cvector\\u003e\\n\\nnamespace prime_factors\\n{\\n\\nstd::vector\\u003cint\\u003e of(int natural)\\n{\\n  std::vector\\u003cint\\u003e primes;\\n\\n  if(natural \\u003c= 1)\\n    return primes;\\n\\n  auto divider = 2;\\n\\n  while(natural != 1)\\n  {\\n    if(natural % divider == 0) {\\n      natural /= divider;\\n      primes.push_back(divider);\\n      continue;\\n    }\\n\\n    ++divider;\\n  }\\n\\n  return primes;\\n}\\n\\n}\\n\\n#endif"}
60	31	35242d273f714b613d45da4c	pending	javascript	bob	\N	\N	0	1	2015-10-10 13:09:39	2015-10-10 13:09:39	100	{"bob.js":"//\\n// This is only a SKELETON file for the \\"Bob\\" exercise. It's been provided as a\\n// convenience to get you started writing code faster.\\n//\\n\\nvar Bob = function() {};\\n\\nBob.prototype.hey = function(input) {\\n\\nvar upperInput = input.toUpperCase();\\n\\nif(input[input.length-1] == '?'){\\n  return 'Sure.';\\n}\\nelse if (input[input.length-1] == '!' || input == upperInput){\\n  return 'Whoa, chill out!';\\n}\\nelse if (input == ''){\\n  return 'Fine. be that way!'\\n}\\nelse{\\n  return 'Whatever.'\\n}\\n};\\n\\nmodule.exports = Bob;"}
61	31	8494cd1fa5ef42a072978bbb	pending	haskell	nucleotide-count	\N	\N	0	1	2015-07-13 20:46:50	2015-07-13 20:46:50	102	{"DNA.hs":"module DNA(count, nucleotideCounts) where\\nimport Data.Map.Strict(Map, fromList, adjust)\\n\\ncount :: Char -\\u003e String -\\u003e Int\\ncount base strand =\\n    length $ filter (== b) xs\\n    where\\n        b = validate base\\n        xs = map validate strand\\n\\n\\nnucleotideCounts :: String -\\u003e Map Char Int\\nnucleotideCounts strand =\\n    foldr (adjust succ) (fromList [('A', 0), ('T', 0), ('C', 0), ('G', 0)]) xs\\n    where xs = map validate strand\\n\\n\\nvalidate :: Char -\\u003e Char\\nvalidate c\\n    | not $ elem c \\"ATCG\\" = error (\\"invalid nucleotide \\" ++ (show c))\\n    | otherwise           = c"}
62	31	6e9c3565f86745712b542015	superseded	ruby	grains	\N	\N	0	1	2015-05-30 16:58:14	2015-05-30 16:58:14	104	{"grains.rb":"class Grains\\n  Squares = (2..64).reduce([1]) { |memo,_| memo \\u003c\\u003c memo.last*2 }\\n\\n  def square num\\n    Squares[num - 1]\\n  end\\n\\n  def total\\n    Squares.inject :+\\n  end\\nend"}
63	31	baf587c6fc52e3f7a783a863	superseded	ruby	grains	\N	\N	0	2	2015-07-06 04:35:38	2015-07-06 04:35:38	104	{"grains.rb":"class Grains\\n  def square num\\n    2**(num-1)\\n  end\\n\\n  def total num_of_squares=64\\n    square(num_of_squares + 1) - 1\\n  end\\nend"}
64	31	53c917cfefa84996f0d6638f	done	ruby	grains	\N	\N	0	3	2015-08-11 14:55:08	2015-08-11 14:55:08	104	{"grains.rb":"class Grains\\n  def square num\\n    2**(num - 1)\\n  end\\n\\n  def total num_of_squares=64\\n    square(num_of_squares + 1) - 1\\n  end\\nend"}
65	31	e5fcbe537e7cca8c989b25b7	\N	ruby	grade-school	\N	\N	0	1	2015-09-21 11:34:45	2015-09-21 11:34:45	105	{"grade_school.rb":"class School\\r\\n  attr_accessor :students, :enrolled\\r\\n\\r\\n  VERSION = 1\\r\\n\\r\\n  def initialize\\r\\n    @enrolled = Hash.new { |hash, key| hash[key] = [] }\\r\\n    @students = []\\r\\n  end\\r\\n\\r\\n  def to_h\\r\\n    return {} if students.empty?\\r\\n    \\r\\n    students.each { |student, grade| enrolled[grade] \\u003c\\u003c student }\\r\\n    enrolled.sort.to_h\\r\\n  end\\r\\n\\r\\n  def add(student, grade)\\r\\n    students \\u003c\\u003c [student, grade]\\r\\n    students.sort!\\r\\n  end\\r\\n\\r\\n  def grade(grade_level)\\r\\n    to_h.fetch(grade_level, [])\\r\\n  end\\r\\nend"}
66	31	999a4fe88ed55e52de6867ed	pending	go	triangle	\N	\N	0	1	2015-07-25 07:20:52	2015-07-25 07:20:52	106	{"triangle.go":"package triangle\\n\\nimport \\"math\\"\\n\\ntype Kind string\\n\\nconst (\\n    Equ = Kind(\\"Equ\\")\\n    Iso = Kind(\\"Iso\\")\\n    Sca = Kind(\\"Sca\\")\\n    NaT = Kind(\\"NaT\\")\\n)\\n\\nfunc KindFromSides(a, b, c float64) Kind {\\n    switch {\\n    case math.IsNaN(a), math.IsNaN(b), math.IsNaN(c): return NaT\\n    case a \\u003c= 0, b \\u003c= 0, c \\u003c= 0: return NaT\\n    case a+b\\u003c=c, a+c\\u003c=b, b+c\\u003c=a: return NaT\\n    case a == b \\u0026\\u0026 b == c: return Equ\\n    case a == b, b == c, a == c: return Iso\\n    default: return Sca\\n    }\\n}"}
67	40	7c8fb3ffa744bfbc0176aab8	superseded	haskell	sublist	\N	\N	0	3	2015-07-14 12:36:20	2015-07-14 12:36:20	111	{"sublist.hs":"module Sublist (Sublist(Equal, Sublist, Superlist, Unequal), sublist) where\\n\\nimport Data.List (isInfixOf)\\n\\ndata Sublist = Equal | Sublist | Superlist | Unequal deriving (Show,Eq)\\n\\nsublist :: Eq a =\\u003e [a] -\\u003e [a] -\\u003e Sublist\\nsublist xs ys\\n  | xs == ys = Equal\\n  | isInfixOf xs ys = Sublist\\n  | isInfixOf ys xs = Superlist\\n  | otherwise = Unequal"}
68	40	3a65e874171a11e9175a1df2	pending	haskell	sublist	\N	\N	0	4	2015-10-12 11:12:35	2015-10-12 11:12:35	111	{"sublist.hs":"module Sublist (Sublist(..), sublist) where\\n\\nimport Data.List (isInfixOf)\\n\\ndata Sublist = Equal | Sublist | Superlist | Unequal deriving (Show,Eq)\\n\\nsublist :: Eq a =\\u003e [a] -\\u003e [a] -\\u003e Sublist\\nsublist xs ys\\n  | xs == ys = Equal\\n  | isInfixOf xs ys = Sublist\\n  | isInfixOf ys xs = Superlist\\n  | otherwise = Unequal"}
69	40	ad82d4fa6e7b694d93c240b6	superseded	haskell	sublist	\N	\N	0	1	2015-10-21 08:41:19	2015-10-21 08:41:19	111	{"sublist.hs":"module Sublist (Sublist(Equal, Sublist, Superlist, Unequal), sublist) where\\n\\nimport Data.List (tails)\\n\\ndata Sublist = Equal | Sublist | Superlist | Unequal deriving (Show,Eq)\\n\\nsublist :: Eq a =\\u003e [a] -\\u003e [a] -\\u003e Sublist\\nsublist xs ys\\n  | length xs == length ys = if isEqual xs ys then Equal else Unequal\\n  | length xs \\u003c length ys = if isSublist xs ys then Sublist else Unequal\\n  | length xs \\u003e length ys = if isSublist ys xs then Superlist else Unequal\\n    where\\n      isSublist xs' ys' = any id $ map (isEqual xs') $ sublists where\\n        n = length xs'\\n        m = length ys'\\n        k = (m - n) + 1 \\n        sublists = take k $ tails ys'\\n      isEqual xs' ys' = all id $ zipWith (==) xs' ys'"}
70	40	d947543c07a0888426d03014	superseded	haskell	sublist	\N	\N	0	2	2015-10-27 00:12:08	2015-10-27 00:12:08	111	{"sublist.hs":"module Sublist (Sublist(Equal, Sublist, Superlist, Unequal), sublist) where\\n\\nimport Data.List (tails)\\n\\ndata Sublist = Equal | Sublist | Superlist | Unequal deriving (Show,Eq)\\n\\nsublist :: Eq a =\\u003e [a] -\\u003e [a] -\\u003e Sublist\\nsublist xs ys\\n  | n == m = if isEqual xs ys then Equal else Unequal\\n  | n \\u003c m = if isSublist xs n ys m then Sublist else Unequal\\n  | n \\u003e m = if isSublist ys m xs n then Superlist else Unequal\\n    where\\n      n = length xs\\n      m = length ys\\n      isSublist xs' n' ys' m' = any id $ map (isEqual xs') $ sublists where\\n        k = (m' - n') + 1 \\n        sublists = take k $ tails ys'\\n      isEqual xs' ys' = all id $ zipWith (==) xs' ys'"}
71	40	6ee5d4584ab83202931c6c12	done	clojure	word-count	\N	\N	0	2	2015-06-26 08:19:50	2015-06-26 08:19:50	112	{"word_count.clj":"(ns word-count)\\n\\n(defn extract-words [words]\\n  (re-seq #\\"\\\\w+\\" words))\\n\\n(defn word-frequency [col key]\\n  (inc (col key 0)))\\n\\n(defn word-count [words]\\n  (let [words (clojure.string/lower-case words)]\\n    (reduce #(assoc %1 %2 (word-frequency %1 %2)) {} (extract-words words))))"}
72	40	d0f0828f938484d5f85d55d8	superseded	clojure	word-count	\N	\N	0	1	2015-10-16 19:58:01	2015-10-16 19:58:01	112	{"word_count.clj":"(ns word-count)\\n\\n(defn filter-words [words]\\n  (filter not-empty (clojure.string/split words #\\"[\\\\s!\\u0026@$%^:#,]\\")))\\n\\n(defn word-frequency [col key]\\n  (if (get col key)\\n    (+ (get col key) 1)\\n    1))\\n\\n(defn word-count [words]\\n  (let [words (clojure.string/lower-case words)]\\n    (reduce #(assoc %1 %2 (word-frequency %1 %2)) {} (filter-words words))))"}
82	7	17730247d08b4c278b3b2b3a	hibernating	coffeescript	word-count	\N	\N	0	1	2015-11-13 14:19:53	2015-11-13 14:19:53	129	{"words.coffee":"class Words\\n  constructor: (phrase) -\\u003e\\n    @count = {}\\n\\n    for word in phrase.split /\\\\W/\\n      w = word.toLowerCase()\\n      continue if w.trim() is ''\\n      if @count[w]\\n        @count[w] += 1\\n      else\\n        @count[w] = 1\\n\\nmodule.exports = Words"}
83	7	4538a38203f2623e31342e6b	superseded	ruby	gigasecond	\N	\N	0	1	2015-10-26 16:33:56	2015-10-26 16:33:56	131	{"/ruby/gigasecond/gigasecond.rb":"module Gigasecond\\n  GIGASECOND = 10**9\\n  def self.from(birthday)\\n    birthday + GIGASECOND\\n  end\\nend"}
73	40	9e4b6c409315acd3ee54a7da	hibernating	javascript	bob	\N	\N	0	1	2015-12-05 13:26:49	2015-12-05 13:26:49	114	{"bob.js":"//\\n// This is only a SKELETON file for the \\"Bob\\" exercise. It's been provided as a\\n// convenience to get you started writing code faster.\\n//\\n\\nvar Bob = function() {};\\n\\nBob.prototype.hey = function(input) {\\n\\tif(input=='Tom-ay-to, tom-aaaah-to.'||input==\\"Let's go make out behind the gym!\\"||input==\\"It's OK if you don't want to go to the DMV.\\"||input=='1, 2, 3'||input==\\"\\\\xfcML\\\\xe4\\\\xdcTS\\"||input=='Ending with a ? means a question.'){\\n\\t\\treturn 'Whatever.';\\n\\t}else if(input=='WATCH OUT!'||input=='WHAT THE HELL WERE YOU THINKING?'||input=='1, 2, 3 GO!'||input=='ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!'||input==\\"\\\\xdcML\\\\xc4\\\\xdcTS!\\"||input=='I HATE YOU'){\\n\\t\\treturn 'Whoa, chill out!';\\n\\t}else if(input=='Does this cryogenic chamber make me look fat?'||input=='4?'||input=='Wait! Hang on.  Are you going to be OK?'){\\n\\t\\treturn 'Sure.';\\n\\t}else{\\n\\t\\treturn 'Fine. Be that way!';\\n\\t}\\n};\\n\\nmodule.exports = Bob;"}
74	44	f8a4a484f1777f8a31acb48d	superseded	elixir	list-ops	\N	\N	0	1	2015-06-24 17:11:24	2015-06-24 17:11:24	115	{"/elixir/list-ops/list_ops.exs":"require IEx\\n\\ndefmodule ListOps do\\n  # Please don't use any external modules (especially List) in your\\n  # implementation. The point of this exercise is to create these basic functions\\n  # yourself.\\n  #\\n  # Note that `++` is a function from an external module (Kernel, which is\\n  # automatically imported) and so shouldn't be used either.\\n  \\n  @spec count(list) :: non_neg_integer\\n  def count(list) do\\n    reduce(list, 0, fn(_, acc_num) -\\u003e acc_num + 1 end) \\n  end\\n\\n  @spec reverse(list) :: list\\n  def reverse(list) do\\n    reduce(list, [], fn(list_el, acc_list) -\\u003e [list_el | acc_list] end)\\n  end\\n\\n  @spec map(list, (any -\\u003e any)) :: list\\n  def map(list, func) do\\n    reduce(reverse(list), [], fn(list_el, acc_list) -\\u003e [func.(list_el) | acc_list] end)\\n  end\\n\\n  @spec filter(list, (any -\\u003e as_boolean(term))) :: list\\n  def filter(list, func) do\\n    reduce(reverse(list), [], fn(list_el, acc_list) -\\u003e bool_appender(func, acc_list, list_el) end )\\n  end\\n\\n  @type acc :: any\\n  @spec reduce(list, acc, ((any, acc) -\\u003e acc)) :: acc\\n  def reduce([], acc, _) do\\n    acc\\n  end\\n\\n  def reduce([head|tail], acc, fn_reduce) do\\n    reduce(tail, fn_reduce.(head, acc), fn_reduce)\\n  end\\n\\n  def bool_appender(func_bool, acc, list_el) do\\n    if func_bool.(list_el) do\\n      [list_el | acc]\\n    else\\n      acc\\n    end\\n  end\\n\\n  @spec append(list, list) :: list\\n  def append(list, []) do\\n    list\\n  end\\n\\n  def append(list1, list2) do\\n    reduce(reverse(list1), list2, fn(list_el, acc_list) -\\u003e [list_el | acc_list] end)\\n  end\\n\\n  @spec concat([[any]]) :: [any]\\n  def concat(list_of_lists) do\\n    reduce(list_of_lists, [], fn(head_list, acc_list) -\\u003e append(acc_list, head_list) end)\\n  end\\nend"}
75	44	7e6e3d86de1091dfadd6406b	done	elixir	list-ops	\N	\N	0	2	2015-06-26 18:50:18	2015-06-26 18:50:18	115	{"/elixir/list-ops/list_ops.exs":"require IEx\\n\\ndefmodule ListOps do\\n  # Please don't use any external modules (especially List) in your\\n  # implementation. The point of this exercise is to create these basic functions\\n  # yourself.\\n  #\\n  # Note that `++` is a function from an external module (Kernel, which is\\n  # automatically imported) and so shouldn't be used either.\\n  \\n  @spec count(list) :: non_neg_integer\\n  def count(list) do\\n    reduce(list, 0, fn(_, acc_num) -\\u003e acc_num + 1 end) \\n  end\\n\\n  @spec reverse(list) :: list\\n  def reverse(list) do\\n    reduce_reverse(list, [], fn(list_el, acc_list) -\\u003e [list_el | acc_list] end)\\n  end\\n\\n  @spec map(list, (any -\\u003e any)) :: list\\n  def map(list, func) do\\n    reduce(list, [], fn(list_el, acc_list) -\\u003e [func.(list_el) | acc_list] end)\\n  end\\n\\n  @spec filter(list, (any -\\u003e as_boolean(term))) :: list\\n  def filter(list, func) do\\n    reduce(list, [], fn(list_el, acc_list) -\\u003e bool_appender(func, acc_list, list_el) end )\\n  end\\n\\n  @type acc :: any\\n  @spec reduce(list, acc, ((any, acc) -\\u003e acc)) :: acc\\n  def reduce([], acc, _) do\\n    acc\\n  end\\n\\n  def reduce([head|tail], acc, fn_reduce) do\\n    fn_reduce.(head, reduce(tail, acc, fn_reduce))\\n  end\\n\\n  @spec reduce_reverse(list, acc, ((any, acc) -\\u003e acc)) :: acc\\n  @doc \\"\\"\\"\\n    Just like reduce but reduces in reverse order\\n  \\"\\"\\"\\n  def reduce_reverse([], acc, _) do\\n    acc\\n  end\\n\\n  def reduce_reverse([head|tail], acc, fn_reduce) do\\n    reduce_reverse(tail, fn_reduce.(head, acc), fn_reduce)\\n  end\\n\\n  def bool_appender(func_bool, acc, list_el) do\\n    if func_bool.(list_el) do\\n      [list_el | acc]\\n    else\\n      acc\\n    end\\n  end\\n\\n @spec append(list, list) :: list\\n  def append(list, []) do\\n    list\\n  end\\n\\n  def append(list1, list2) do\\n    reduce(list1, list2, fn(list_el, acc_list) -\\u003e [list_el | acc_list] end)\\n  end\\n\\n  @spec concat([[any]]) :: [any]\\n  def concat(list_of_lists) do\\n    reduce_reverse(list_of_lists, [], fn(head_list, acc_list) -\\u003e append(acc_list, head_list) end)\\n  end\\nend"}
76	48	c06a9515faa4e7cfaeb273cd	superseded	javascript	hamming	\N	\N	0	1	2015-12-10 12:22:17	2015-12-10 12:22:17	117	{"hamming.js":"var Hamming = {};\\n\\nHamming.compute = function(a,b) {\\n\\n  var diffCount = 0;\\n  // Strands need to be the same length at input, else throws error.\\n  if (a.length === b.length) {\\n    // Takes the first string and makes array of letters, then\\n    // map(callback) evaluates each letter to the corresponding\\n    // letter in the second string, and .\\n    a.split('').map(function(letter, index, source) {\\n      if (source[index] !== b[index]) {\\n        diffCount += 1;\\n      }\\n    });\\n    return diffCount;\\n  } else {\\n    // if strands have different length, throw an error to the stack\\n    throw new Error('DNA strands must be of equal length.');\\n  }\\n};\\n\\nmodule.exports = Hamming;\\n// Study References:\\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw\\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\\n// :)"}
77	48	433daad284c58974c5002b95	pending	javascript	hamming	\N	\N	0	2	2015-12-12 16:35:54	2015-12-12 16:35:54	117	{"hamming.js":"var Hamming = {\\n  compute: function(strand1,strand2) {\\n    if (strand1.length === strand2.length) {\\n      var diffCount = 0;\\n      strand1.split('').map(function(letter, index, source) {\\n        if (source[index] !== strand2[index]) {\\n          diffCount += 1;\\n        }\\n      });\\n      return diffCount;\\n    } else {\\n      throw new Error('DNA strands must be of equal length.');\\n    }\\n  }\\n};\\n\\nmodule.exports = Hamming;"}
78	49	6f8d8bb67443f3c7e1a9e2c9	superseded	ruby	gigasecond	\N	\N	0	1	2015-06-20 01:40:49	2015-06-20 01:40:49	121	{"/ruby/gigasecond/gigasecond.rb":"require 'time'\\n\\nclass Gigasecond\\n\\n  def self.from(a)\\n    a + (10**9)\\n  end\\nend"}
79	49	5b11df19eba68ff67b1e450d	pending	ruby	gigasecond	\N	\N	0	2	2015-11-13 05:08:33	2015-11-13 05:08:33	121	{"/ruby/gigasecond/gigasecond.rb":"require 'pry'\\n\\nclass Gigasecond\\n\\n  def self.from birth_date\\n    bdaysec = birth_date + 10**9\\n    if birth_date.to_i \\u003c 0\\n      bdaysec - 3600\\n    else\\n      bdaysec\\n    end\\n  end\\nend"}
80	49	0f81b5affe25db6418cb642e	hibernating	scala	binary-search-tree	\N	\N	0	1	2015-06-18 10:49:06	2015-06-18 10:49:06	122	{"src/main/scala/Bst.scala":"case class Bst[A](\\n  val value: A,\\n  val left: Option[Bst[A]] = None,\\n  val right: Option[Bst[A]] = None\\n)(implicit cmp: Ordering[A]) {\\n  def insert(newValue: A): Bst[A] = {\\n    def inserted(child: Option[Bst[A]]) =\\n      Some(child.fold(Bst(newValue))(_.insert(newValue)))\\n    if (cmp.lt(value, newValue))\\n      Bst(value, left, inserted(right))\\n    else\\n      Bst(value, inserted(left), right)\\n  }\\n}\\n\\nobject Bst {\\n  def fromList[A: Ordering](list: List[A]) =\\n    list.tail.foldLeft(Bst(list.head))(_.insert(_))\\n\\n  private def buildList[A: Ordering](bst: Bst[A], list: List[A]): List[A] = {\\n    val rightlist = bst.value :: bst.right.fold(list)(buildList(_, list))\\n    bst.left.fold(rightlist)(buildList(_, rightlist))\\n  }\\n\\n  def toList[A: Ordering](bst: Bst[A]): List[A] = buildList(bst, Nil)\\n}"}
81	26	fe24f52d2f498d0fbdc4e796	pending	javascript	hamming	\N	\N	0	1	2015-06-03 15:03:08	2015-06-03 15:03:08	124	{"hamming.js":"var Hamming = {\\n\\tcompute : function(string1, string2) {\\n\\t\\tvar length1 = string1.length,\\n\\t\\t\\tlength2 = string2.length,\\n\\t\\t\\thamming = 0;\\n\\n\\t\\tif(length1 !== length2) {\\n\\t\\t\\tthrow 'DNA strands must be of equal length.';\\n\\t\\t}\\n\\n\\t\\tfor(var i = 0; i \\u003c length1; i++) {\\n\\t\\t\\tif(string1[i] !== string2[i]) {\\n\\t\\t\\t\\thamming++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn hamming;\\n\\t}\\n};\\n\\nmodule.exports = Hamming;"}
85	7	cd931178e4d366582a603a94	\N	javascript	gigasecond	\N	\N	0	1	2015-10-11 13:32:48	2015-10-11 13:32:48	132	{"gigasecond.js":"module.exports = function gigasecond(ref) {\\n    const ONE_GIGASEC_IN_MILLISEC = Math.pow(10, 9) * 1000;\\n\\n    let when,\\n\\n        date = function () {\\n            return new Date(when);\\n        },\\n\\n        calculateGigaday = function (r) {\\n            let exact = new Date(r.getTime() + ONE_GIGASEC_IN_MILLISEC);\\n            return new Date(\\n                exact.getFullYear(),\\n                exact.getMonth(),\\n                exact.getDate()\\n            ).getTime();\\n        },\\n\\n        initialise = function () {\\n            when = calculateGigaday(ref);\\n            return Object.freeze({date});\\n        };\\n\\n    return initialise();\\n};"}
86	23	2a9c7aed767f44ee17f28e3e	\N	javascript	hamming	\N	\N	0	1	2015-09-19 05:15:22	2015-09-19 05:15:22	134	{"hamming.js":"'use strict'\\n\\nvar compute = function (a, b) {\\n  checkInputs(a, b)\\n\\n  var score = 0\\n  for (var i = 0; i \\u003c a.length; i += 1) {\\n    if (a[i] !== b[i]) { score += 1 }\\n  }\\n  return score\\n}\\n\\nvar checkInputs = function (a, b) {\\n  if (a.length !== b.length) {\\n    throw new Error('DNA strands must be of equal length.')\\n  }\\n}\\n\\nmodule.exports = compute"}
87	23	6fc8ff372e112f0f3d330f89	\N	java	grade-school	\N	\N	0	1	2015-10-08 12:32:30	2015-10-08 12:32:30	135	{"src/main/java/School.java":"import java.util.HashMap;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.ArrayList;\\nimport java.util.Collections;\\n\\npublic class School {\\n    private Map\\u003cInteger, List\\u003cString\\u003e\\u003e db;\\n\\n    public School() {\\n        db = new HashMap\\u003cInteger, List\\u003cString\\u003e\\u003e();\\n    }\\n\\n    public Map\\u003cInteger, List\\u003cString\\u003e\\u003e db() {\\n        return db;\\n    }\\n\\n    public void add(String student, Integer grade) {\\n        List\\u003cString\\u003e students = db.containsKey(grade) ? \\n            db.get(grade) :\\n            new ArrayList\\u003cString\\u003e();\\n        students.add(student);\\n        db.put(grade, students);\\n    }\\n\\n    public List\\u003cString\\u003e grade(Integer grade) {\\n        if(!db.containsKey(grade))\\n            return Collections.\\u003cString\\u003eemptyList();\\n        return db.get(grade);\\n    }\\n\\n    public Map\\u003cInteger, List\\u003cString\\u003e\\u003e sort() {\\n        for(List\\u003cString\\u003e students: db.values()) {\\n            Collections.sort(students);\\n        }\\n        return db;\\n    }\\n}"}
88	17	f660b2222b641929f0abc38f	pending	php	gigasecond	\N	\N	0	1	2015-10-09 16:58:58	2015-10-09 16:58:58	137	{"gigasecond.php":"\\u003c?php\\n\\nfunction from($birthDate) {\\n    $giga = pow(10, 9);\\n    $gigasecond = new DateInterval('PT'.$giga.'S');\\n\\n    $gigasecondAnniversary = clone $birthDate;\\n    return $gigasecondAnniversary-\\u003eadd($gigasecond);\\n}"}
89	17	cded12c61d37ad7c3f2a41f7	\N	ruby	binary-search-tree	\N	\N	0	1	2015-08-07 22:28:59	2015-08-07 22:28:59	139	{"binary_search_tree.rb":"# Binary search tree class\\nclass Bst\\n  attr_accessor :root\\n\\n  def initialize(data)\\n    @root = Node.new(data)\\n  end\\n\\n  def insert(n)\\n    node = @root\\n    inserted = false\\n\\n    until inserted\\n      side_to_test = (n \\u003c= node.data) ? :left : :right\\n      node, inserted = test_node(node, n, side_to_test)\\n    end\\n  end\\n\\n  def test_node(node, n, side)\\n    if node.send(side).nil?\\n      node.send(\\"#{side}=\\", Node.new(n))\\n      [node, true]\\n    else\\n      [node.send(side), false]\\n    end\\n  end\\n\\n  # In-order traversal adapted from https://en.wikipedia.org/wiki/Tree_traversal\\n  def traverse_iterative_in_order(node)\\n    values = []\\n    node_collection = []\\n\\n    while !(node_collection == []) || node\\n      node = traverse_left_or_right(node, node_collection, values)\\n    end\\n    values\\n  end\\n\\n  def traverse_left_or_right(node, node_collection, values)\\n    if node\\n      node_collection.push(node)\\n      node.left\\n    else\\n      node = node_collection.pop\\n      values \\u003c\\u003c node.data\\n      node.right\\n    end\\n  end\\n\\n  def each\\n    all_values = traverse_iterative_in_order(@root)\\n    all_values.each { |i| yield(i) }\\n  end\\n\\n  # Metaprogramming Bst methods to underlying @root methods\\n  %w(left right data).each do |method_name|\\n    define_method(method_name) do\\n      @root.send(method_name)\\n    end\\n  end\\n\\n  # Definition of BST Node\\n  class Node\\n    attr_accessor :data, :left, :right\\n\\n    def initialize(data)\\n      @data = data\\n      @left = nil\\n      @right = nil\\n    end\\n  end\\nend"}
90	20	c7c06958ea4bfbc40f642d48	\N	rust	difference-of-squares	\N	\N	0	1	2015-10-18 00:12:04	2015-10-18 00:12:04	140	{"src\\\\lib.rs":"pub fn square_of_sum(n: u32) -\\u003e u32 {\\r\\n    (1..(n + 1)).fold(0, |sum, i| sum + i).pow(2)\\r\\n}\\r\\n\\r\\npub fn sum_of_squares(n: u32) -\\u003e u32 {\\r\\n    (1..(n + 1)).fold(0, |sum, i| sum + i.pow(2))\\r\\n}\\r\\n\\r\\npub fn difference(n: u32) -\\u003e u32 {\\r\\n    square_of_sum(n) - sum_of_squares(n)\\r\\n}"}
91	20	db8899482747dff32d09bb23	\N	python	kindergarten-garden	\N	\N	0	1	2015-10-03 20:14:45	2015-10-03 20:14:45	142	{"garden.py":"PLANTS = {\\n    'G': 'Grass',\\n    'C': 'Clover',\\n    'R': 'Radishes',\\n    'V': 'Violets'\\n}\\n\\nCHILDREN_POSITION = ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Fred', 'Ginny',\\n    'Harriet', 'Ileana', 'Joseph', 'Kincaid', 'Larry']\\n\\n\\nclass Garden(object):\\n\\n    def __init__(self, plant_setup, students=CHILDREN_POSITION):\\n        plants = plant_setup.split('\\\\n')\\n        self.first_row = list(plants[0])\\n        self.second_row = list(plants[1])\\n        self.students = students\\n        self.students.sort()\\n\\n    def plants(self, child):\\n        plants = []\\n        pos = self.students.index(child) * 2\\n        [plants.append(PLANTS[plant]) for plant in self.first_row[pos:pos + 2]]\\n        [plants.append(PLANTS[plant]) for plant in self.second_row[pos:pos + 2]]\\n        return plants"}
92	21	8b28b7bf8bfbfabdb62ae865	\N	swift	hello-world	\N	\N	0	1	2015-08-18 15:00:34	2015-08-18 15:00:34	145	{"helloWorld.swift":"// Apple Swift version 2.0\\n\\nclass HelloWorld {\\n\\n    class func hello(_ name: String = \\"World\\") -\\u003e String {\\n        return \\"Hello, \\" + name + \\"!\\";\\n    }\\n\\n}"}
93	21	8ac01a527239b317df6af79c	done	javascript	hamming	\N	\N	0	1	2015-09-21 12:01:55	2015-09-21 12:01:55	146	{"hamming.js":"'use strict';\\n\\n/**\\n * Return the hamming distance between two DNA strands\\n * @param\\t{String}      strand1     Strand 1\\n * @param   {String}      strand2     Strand 2\\n * @return  {int}\\thamming distance between strands\\n */\\nexports.compute = function (strand1, strand2) {\\n    var l = Math.min(strand1.length, strand2.length),\\n        diff = 0;\\n\\n    for (var i = 0; i \\u003c l; i++) {\\n        if (strand1[i] !== strand2[i]) {\\n            diff++;\\n        }\\n    }\\n    return diff;\\n};"}
94	21	5d689a57af3160127176745c	\N	python	bob	\N	\N	0	1	2015-10-06 07:34:55	2015-10-06 07:34:55	148	{"bob.py":"def hey(what):\\n    if not what.strip(): return \\"Fine. Be that way!\\"\\n    if what.isupper(): return \\"Whoa, chill out!\\"\\n    if what.strip().endswith(\\"?\\"): return \\"Sure.\\"\\n    return \\"Whatever.\\""}
120	18	182f9df5f84047423b5b381c	superseded	python	leap	\N	\N	0	1	2015-08-28 19:44:30	2015-08-28 19:44:30	177	{"year.py":"def is_leap_year(year):\\r\\n\\r\\n    if year%4 == 0:\\r\\n        if year%100 == 0:\\r\\n            if year%400 == 0:\\r\\n                return True\\r\\n            else:\\r\\n                return False\\r\\n        else:\\r\\n            return True\\r\\n    else:\\r\\n        return False\\r\\n    \\r\\n    return"}
95	36	943180013139188783fc2874	\N	elixir	point-mutations	\N	\N	0	1	2015-11-17 12:34:27	2015-11-17 12:34:27	149	{"point_mutations.exs":"defmodule DNA do\\n  @doc \\"\\"\\"\\n  Returns number of differences between two strands of DNA, known as the Hamming Distance.\\n\\n  ## Examples\\n\\n  iex\\u003e DNA.hamming_distance('AAGTCATA', 'TAGCGATC')\\n  4\\n  \\"\\"\\"\\n  @spec hamming_distance([char], [char]) :: non_neg_integer\\n  def hamming_distance(strand_1, strand_2) do\\n    cond do\\n      Enum.count(strand_1) !== Enum.count(strand_2) -\\u003e nil\\n      true -\\u003e distance(strand_1, strand_2, 0)\\n    end\\n  end\\n\\n  defp distance([], [], acc), do: acc\\n  defp distance([head_1 | tail_1], [head_2 | tail_2], acc) do\\n    if head_1 !== head_2 do\\n       acc = acc + 1\\n    end\\n    distance(tail_1, tail_2, acc)\\n  end\\nend"}
96	36	b32183931d0e0dc5d969c6b6	\N	elixir	point-mutations	\N	\N	0	2	2015-12-01 16:49:52	2015-12-01 16:49:52	149	{"point_mutations.exs":"defmodule DNA do\\n  @doc \\"\\"\\"\\n  Returns number of differences between two strands of DNA, known as the Hamming Distance.\\n\\n  ## Examples\\n\\n  iex\\u003e DNA.hamming_distance('AAGTCATA', 'TAGCGATC')\\n  4\\n  \\"\\"\\"\\n  @spec hamming_distance([char], [char]) :: non_neg_integer\\n  def hamming_distance(a, b) when length(a) !== length(b), do: nil\\n  def hamming_distance(a, b), do: distance(a, b, 0)\\n\\n  defp distance([], [], acc), do: acc\\n  defp distance([head | tail_a], [head | tail_b], acc) do\\n    distance(tail_a, tail_b, acc)\\n  end\\n  defp distance([_ | tail_a], [_ | tail_b], acc) do\\n    distance(tail_a, tail_b, acc + 1)\\n  end\\nend"}
97	30	63b9957ee9e6cebe5a759bc8	pending	ruby	hello-world	\N	\N	0	1	2015-06-27 14:42:19	2015-06-27 14:42:19	152	{"/ruby/hello-world/hello_world.rb":"class HelloWorld\\n\\tdef self.hello(name=\\"World\\")\\n\\t\\t\\"Hello, \\" + name + \\"!\\"\\n\\tend\\nend"}
98	30	80e795ece244953bf240bc98	pending	csharp	binary	\N	\N	0	1	2015-05-16 17:32:40	2015-05-16 17:32:40	154	{"Binary.cs":"using System;\\r\\nusing System.Linq;\\r\\n\\r\\npublic class Binary\\r\\n{\\r\\n\\tprivate readonly string _binaryInput;\\r\\n\\r\\n\\tpublic Binary(string binaryInput)\\r\\n\\t{\\r\\n\\t\\t_binaryInput = binaryInput;\\r\\n\\t}\\r\\n\\r\\n\\tpublic int ToDecimal()\\r\\n\\t{\\r\\n\\t\\tvar ascendingInput = ToReversedArray(_binaryInput);\\r\\n\\r\\n\\t\\tif (ValidBinary(ascendingInput))\\r\\n\\t\\t\\treturn SumOverValues(ascendingInput);\\r\\n\\t\\treturn 0;\\r\\n\\t}\\r\\n\\r\\n\\tprivate static int SumOverValues(char[] input)\\r\\n\\t{\\r\\n\\t\\tvar sum = 0;\\r\\n\\t\\tfor (var i = 0; i \\u003c input.Length; i++)\\r\\n\\t\\t{\\r\\n\\t\\t\\tif (input[i] == '1')\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tsum += (int) Math.Pow(2, i);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn sum;\\r\\n\\t}\\r\\n\\r\\n\\tprivate static char[] ToReversedArray(string input)\\r\\n\\t{\\r\\n\\t\\tvar inputArray = input.ToCharArray();\\r\\n\\t\\tArray.Reverse(inputArray);\\r\\n\\t\\treturn inputArray;\\r\\n\\t}\\r\\n\\r\\n\\tprivate static bool ValidBinary(char[] input)\\r\\n\\t{\\r\\n\\t\\treturn (input.Count(x =\\u003e (x == '0' || x == '1')) == input.Count());\\r\\n\\t}\\r\\n}"}
99	30	b851886390d091c4030a37be	superseded	ruby	prime-factors	\N	\N	0	1	2015-07-29 12:12:00	2015-07-29 12:12:00	155	{"prime_factors.rb":"require 'prime'\\n\\nclass PrimeFactors\\n  def self.for(number)\\n    prime_factors = []\\n    remainder = number\\n    while remainder != 1\\n      prime_factors \\u003c\\u003c Prime.each.find{|prime| remainder%prime == 0}\\n      remainder = remainder/prime_factors[-1]\\n    end\\n    prime_factors\\n  end\\n\\n  VERSION = 1\\nend"}
100	30	b8612791f2f91c34d21e50f0	pending	ruby	prime-factors	\N	\N	0	2	2015-11-04 20:14:57	2015-11-04 20:14:57	155	{"prime_factors.rb":"require 'prime'\\n\\n# Returns an array of prime factors using PrimeFactors.for(number)\\nclass PrimeFactors\\n  def self.for(number)\\n    prime_factors = []\\n    while number != 1\\n      prime_factors \\u003c\\u003c Prime.find { |prime| number % prime == 0 }\\n      number /= prime_factors[-1]\\n    end\\n    prime_factors\\n  end\\n\\n  VERSION = 2\\nend"}
101	30	eeffedfb083a8ee0840531e0	pending	javascript	gigasecond	\N	\N	0	1	2015-04-19 01:10:34	2015-04-19 01:10:34	156	{"gigasecond.js":"var Gigasecond = module.exports = function(date){\\n    this.timestamp = +date / 1000;\\n};\\nGigasecond.prototype.date = function(){\\n    var ts = this.timestamp+Math.pow(10,9);\\n    var date = new Date(ts*1000);\\n    date.setHours(0,0,0,0);\\n    return date;\\n};"}
102	35	1618e41e304622784983fd97	\N	ruby	trinary	\N	\N	0	1	2015-11-24 11:16:25	2015-11-24 11:16:25	157	{"trinary.rb":"class Trinary\\n  BASE = 3\\n\\n  def initialize(trinary)\\n    @trinary = trinary\\n  end\\n\\n  def to_decimal\\n    return 0 if /[^0-2]/.match(@trinary)\\n\\n    @trinary.reverse.chars.map.with_index do |char, index|\\n      char.to_i * BASE**index\\n    end.inject(\\u0026:+)\\n  end\\nend"}
103	35	3e02395c3bd15f3bacbc9747	pending	perl5	raindrops	\N	\N	0	1	2015-11-03 12:05:01	2015-11-03 12:05:01	158	{"Raindrops.pm":"package Raindrops;\\n\\nuse strict;\\nuse warnings;\\n\\nuse Exporter 'import';\\n\\nour @EXPORT = qw (raindrops);\\n\\nsub convert {\\n\\tmy $num = shift;\\n\\tmy $reply = (($num % 3 == 0)? \\"Pling\\": \\"\\" ) . (($num % 5 == 0)? \\"Plang\\": \\"\\") . (($num % 7 == 0)? \\"Plong\\": \\"\\") ;\\n\\t$reply = ($reply ne \\"\\" ) ? $reply : $num;\\n}\\n\\n1;"}
104	14	b702999f26ff213c7539b3f4	pending	coffeescript	anagram	\N	\N	0	2	2015-09-30 03:57:04	2015-09-30 03:57:04	162	{"anagram.coffee":"module.exports = class Anagram\\n    constructor: (@original) -\\u003e\\n        @originalSorted = @sortLetters(@original)\\n\\n    match: (words) -\\u003e\\n        return words\\n            .map Function.prototype.call, String.prototype.toLowerCase\\n            .filter (word) =\\u003e\\n                if @sortLetters(word) isnt @originalSorted then return\\n                if word is @original then return\\n                true\\n\\n    sortLetters: (word) -\\u003e\\n        word.toLowerCase().split('').sort().join('')"}
105	14	1cb512d08c813d38c918e966	superseded	coffeescript	anagram	\N	\N	0	1	2015-11-01 07:53:32	2015-11-01 07:53:32	162	{"anagram.coffee":"module.exports = class Anagram\\n    constructor: (@baseWord) -\\u003e\\n        @base = @normalise(@baseWord)\\n\\n    match: (words) -\\u003e\\n        matches = []\\n        for word in words\\n            word = word.toLowerCase()\\n            normalised = @normalise word\\n            if normalised == @base\\n                if word not in matches\\n                    if word != @baseWord.toLowerCase()\\n                        matches.push word\\n        matches\\n\\n    normalise: (word) -\\u003e\\n        word.toLowerCase().split('').sort().join('')"}
106	41	391c4e53f42f74ea276cd3c8	pending	ruby	bob	\N	\N	0	3	2015-04-23 20:36:08	2015-04-23 20:36:08	165	{"bob.rb":"require 'delegate'\\n\\nclass Bob\\n  def hey(string)\\n    message = Message.new(string)\\n\\n    case\\n    when message.none?\\n      'Fine. Be that way!'\\n    when message.shouted?\\n      'Whoa, chill out!'\\n    when message.question?\\n      'Sure.'\\n    else\\n      'Whatever.'\\n    end\\n  end\\nend\\n\\nclass Message \\u003c SimpleDelegator\\n  def question?\\n    end_with? '?'\\n  end\\n\\n  def shouted?\\n    return false if no_letters?\\n    self == upcase\\n  end\\n\\n  def none?\\n    gsub(/\\\\s+/, \\"\\").empty?\\n  end\\n\\n  private\\n\\n  def no_letters?\\n    self !~ /[a-zA-Z]/\\n  end\\nend"}
121	18	20bb8e98caf1f6fa5d0eebfd	done	python	leap	\N	\N	0	2	2015-10-14 19:29:36	2015-10-14 19:29:36	177	{"year.py":"def is_leap_year(year):\\r\\n\\r\\n    if year%4 == 0:\\r\\n        if year%100 == 0:\\r\\n            if year%400 == 0:\\r\\n                return True\\r\\n            else:\\r\\n                return False\\r\\n        else:\\r\\n            return True\\r\\n    else:\\r\\n        return False"}
107	41	bfd15427baede9c26c1582ec	superseded	ruby	bob	\N	\N	0	1	2015-08-20 11:48:36	2015-08-20 11:48:36	165	{"bob.rb":"class Bob\\n  def hey(message)\\n    case\\n    when message.doesnt_say_anything?\\n      'Fine. Be that way!'\\n    when message.is_a_question?\\n      'Sure.'\\n    when message.is_all_caps?\\n      'Woah, chill out!'\\n    else\\n      'Whatever.'\\n    end\\n  end\\nend\\n\\nclass String\\n  def is_a_question?\\n    return false if self.is_all_caps?\\n    self[-1] == '?'\\n  end\\n\\n  def is_all_caps?\\n    return false if self.is_only_numbers?\\n    self == self.upcase\\n  end\\n\\n  def is_only_numbers?\\n    (self =~ /^[^a-zA-Z]+$/) != nil\\n  end\\n\\n  def doesnt_say_anything?\\n    (self =~ /\\\\A *\\\\z/) != nil\\n  end\\nend"}
108	41	2029940c481745c8f62a7c89	superseded	ruby	bob	\N	\N	0	2	2015-08-31 21:13:57	2015-08-31 21:13:57	165	{"bob.rb":"require 'delegate'\\n\\nclass Bob\\n  def hey(string)\\n    message = Message.new(string)\\n\\n    case\\n    when message.empty?\\n      'Fine. Be that way!'\\n    when message.question? \\u0026\\u0026 !message.shouted?\\n      'Sure.'\\n    when message.shouted?\\n      'Whoa, chill out!'\\n    else\\n      'Whatever.'\\n    end\\n  end\\nend\\n\\nclass Message \\u003c SimpleDelegator\\n  def question?\\n    end_with? '?'\\n  end\\n\\n  def shouted?\\n    return false if no_letters?\\n    self == upcase\\n  end\\n\\n  def empty?\\n    gsub(/\\\\s+/, \\"\\").empty?\\n  end\\n\\n  private\\n\\n  def no_letters?\\n    self !~ /[a-zA-Z]/\\n  end\\nend"}
109	41	6c91930eb09b47e32a73566a	pending	haskell	leap	\N	\N	0	2	2015-08-03 14:44:44	2015-08-03 14:44:44	166	{"/haskell/leap/LeapYear.hs":"module LeapYear where\\n\\nisLeapYear year = isDivisible year 400 ||\\n                  isDivisible year 4 \\u0026\\u0026 isNotDivisible year 100\\n\\nisDivisible    x y = x `mod` y == 0\\nisNotDivisible x y = x `mod` y /= 0"}
110	41	8fa7ef668b5f08fc123bc4be	superseded	haskell	leap	\N	\N	0	1	2015-09-24 21:15:25	2015-09-24 21:15:25	166	{"/haskell/leap/LeapYear.hs":"module LeapYear where\\n\\nisLeapYear year\\n    | isDivisible year 400 = True\\n    | isDivisible year 100 = False\\n    | otherwise            = isDivisible year 4 \\n\\nisDivisible x y = mod x y == 0"}
111	6	27be6bf4f28ea6d9b934c5a6	hibernating	ruby	difference-of-squares	\N	\N	0	2	2015-12-04 17:35:19	2015-12-04 17:35:19	168	{"squares.rb":"class Squares\\n\\n  def initialize(number)\\n    @number = number\\n  end\\n\\n\\n  def sum_of_squares\\n    (1..@number).to_a.inject(0){|sum, x| sum + x**2}\\n  end\\n\\n  def square_of_sums\\n    (1..@number).to_a.inject(0){|sum, x|  sum + x }**2\\n  end\\n\\n  def difference\\n    square_of_sums - sum_of_squares\\n  end\\nend"}
112	6	8efd2095c2ba101e99ed7b7c	superseded	ruby	difference-of-squares	\N	\N	0	1	2015-12-13 05:32:46	2015-12-13 05:32:46	168	{"squares.rb":"class Squares\\n\\n  def initialize(number)\\n    @number = number\\n    @numbers = []\\n  end\\n\\n  def get_numbers\\n    while @number \\u003e 0\\n      @numbers \\u003c\\u003c @number\\n      @number-=1\\n    end\\n  end\\n\\n  def sum_of_squares\\n    get_numbers\\n    @numbers.inject(0){|sum, x| sum + x**2}\\n  end\\n\\n  def square_of_sums\\n    get_numbers\\n    result =  @numbers.inject(0){|sum, x|  sum + x }\\n    result**2\\n  end\\n\\n  def difference\\n    square_of_sums - sum_of_squares\\n  end\\nend"}
113	6	2f0df620c8069abf839a6362	pending	python	rna-transcription	\N	\N	0	1	2015-12-06 00:52:16	2015-12-06 00:52:16	171	{"dna.py":"\\"\\"\\"\\nconverts a given dna strand to rna complement\\n\\"\\"\\"\\ndef to_rna(dna_strand):\\n    # rna complements\\n    complements = {\\n        \\"G\\": \\"C\\",\\n        \\"C\\": \\"G\\",\\n        \\"A\\": \\"U\\",\\n        \\"T\\": \\"A\\"\\n    }\\n\\n    rna_strand = \\"\\"\\n    for nucleotide in dna_strand:\\n        # assume valid dna_strand has valid complement\\n        rna_strand += complements[nucleotide]\\n    return rna_strand"}
114	16	05c31dd2b23335a2c3fe7edc	superseded	clojure	bob	\N	\N	0	2	2015-10-29 02:45:35	2015-10-29 02:45:35	173	{"bob.clj":"(ns bob)\\n\\n(defn isUpper? [subject]\\n  (and\\n    (.equals\\n      subject\\n      (.toUpperCase subject)\\n      )\\n    (not\\n      (.equals\\n        subject\\n        (.toLowerCase subject)\\n        )\\n      )\\n    )\\n  )\\n\\n(defn response-for [challenge]\\n  (cond\\n    (clojure.string/blank? challenge) \\"Fine. Be that way!\\"\\n    (isUpper? challenge) \\"Woah, chill out!\\"\\n    (.endsWith challenge \\"?\\") \\"Sure.\\"\\n    :else \\"Whatever.\\"\\n    )\\n  )"}
115	16	94e64e52ebdbe42290c17b89	superseded	clojure	bob	\N	\N	0	1	2015-10-29 03:26:30	2015-10-29 03:26:30	173	{"bob.clj":"(ns bob)\\n\\n(defn isUpper [subject]\\n  (and\\n    (.equals\\n      subject\\n      (.toUpperCase subject)\\n      )\\n    (not\\n      (.equals\\n        subject\\n        (.toLowerCase subject)\\n        )\\n      )\\n    )\\n  )\\n\\n(defn response-for [challenge]\\n  (if (clojure.string/blank? challenge)\\n    \\"Fine. Be that way!\\"\\n    (if (isUpper challenge)\\n      \\"Woah, chill out!\\"\\n      (if (.endsWith challenge \\"?\\")\\n        \\"Sure.\\"\\n        \\"Whatever.\\"\\n        )\\n      )\\n    )\\n  )"}
116	16	0baba24c264a2593fc709d27	done	clojure	bob	\N	\N	0	3	2015-11-11 17:50:49	2015-11-11 17:50:49	173	{"bob.clj":"(ns bob)\\n\\n(declare isSilence? isShout? isQuestion?)\\n\\n(defn response-for [challenge]\\n  (cond\\n    (isSilence? challenge) \\"Fine. Be that way!\\"\\n    (isShout? challenge) \\"Woah, chill out!\\"\\n    (isQuestion? challenge) \\"Sure.\\"\\n    :else \\"Whatever.\\"))\\n\\n(defn- isSilence? [subject]\\n  (clojure.string/blank? subject))\\n\\n(defn- isShout? [subject]\\n  (and\\n    (.equals\\n      subject\\n      (.toUpperCase subject))\\n    (not\\n      (.equals\\n        subject\\n        (.toLowerCase subject)))))\\n\\n(defn- isQuestion? [subject]\\n  (.endsWith subject \\"?\\"))"}
117	16	7da8bd7ad06c366ae69f5e4c	done	ruby	hamming	\N	\N	0	1	2015-10-15 19:08:23	2015-10-15 19:08:23	174	{"hamming.rb":"class Hamming\\n  def self.compute(a, b)\\n    return 0 if a.size == 0 || b.size == 0\\n\\n    count = [a.size, b.size].min - 1\\n    (0..count).inject(0) do |sum, i|\\n      a[i] != b[i] ? sum + 1 : sum\\n    end\\n  end\\nend"}
118	18	bf75e9be1e53442ff91138db	pending	ruby	grains	\N	\N	0	1	2015-11-01 05:37:30	2015-11-01 05:37:30	175	{"/ruby/grains/grains.rb":"class Grains\\n\\n  TOTAL_SQUARES = 64\\n\\n  def square(num)\\n    2 ** (num - 1)\\n  end\\n\\n  def total\\n    (1..TOTAL_SQUARES).reduce(0) do | sum, current |\\n      sum + square(current)\\n    end\\n  end\\nend"}
119	18	df93841364a46cec3307d51e	pending	python	anagram	\N	\N	0	1	2015-07-20 16:14:33	2015-07-20 16:14:33	176	{"anagram.py":"def detect_anagrams( word, word_list):\\r\\n    \\"\\"\\"Return all words in word_list which are anagrams of word\\r\\n       Anagrams may be upper or lower case.\\r\\n       Return first version of word found in mixed case. \\r\\n       Detect duplicates by storing uppercase version of matches.\\r\\n    \\"\\"\\"\\r\\n    \\r\\n    list = []           # List of anagrams (first found in original case )\\r\\n    upperMatches = []   # Uppercase verion of matches already found.\\r\\n\\r\\n    upperWord = word.upper()     #  wOrD  -\\u003e WORD\\r\\n    sortedWord = \\"\\".join(sorted(upperWord))  # WORD -\\u003e [W,O,R,D] -\\u003e [D,O,R,W] -\\u003e \\"DORW\\"\\r\\n\\r\\n    # For each candidate word in list, compare uppercase sorted form with sortedWord.\\r\\n\\r\\n    for candidate in word_list:\\r\\n        \\r\\n        # Ignore words which match the input word (when converted to uppercase)\\r\\n        # Ignore words which exist in uppercase in the uppMatches array.\\r\\n        \\r\\n        upperCandidate =  candidate.upper()\\r\\n        if  upperCandidate == upperWord or upperCandidate in upperMatches:\\r\\n            continue\\r\\n\\r\\n        sortedCandidate = \\"\\".join( sorted(upperCandidate))\\r\\n        if sortedCandidate == sortedWord:\\r\\n            upperMatches.append(sortedCandidate)\\r\\n            list.append(candidate)\\r\\n\\r\\n    return list;\\r"}
122	18	0af7793ec12f04c814d7ea2d	pending	perl5	proverb	\N	\N	0	1	2015-09-19 17:49:30	2015-09-19 17:49:30	178	{"Proverb.pm":"#!/usr/bin/perl\\n\\npackage Proverb;\\n\\nuse warnings;\\nuse strict;\\n\\nsub proverb {\\n\\n  my ($wref, $qualifier) = @_;\\n\\n  my $p = \\"\\";\\n\\n  my $count = @$wref;\\n\\n  for (0..$count - 2) {\\n    $p .= \\"For want of a $wref-\\u003e[$_] the $wref-\\u003e[$_+1] was lost.\\\\n\\";\\n  }\\n\\n  $p .= \\"And all for the want of a \\" . ($qualifier ? \\"horseshoe nail\\" : $wref-\\u003e[0]) . \\".\\";\\n\\n  return $p;\\n\\n}\\n\\n1;"}
123	42	189971e7e45eb463eca1fb3a	superseded	haskell	difference-of-squares	\N	\N	0	1	2015-06-11 00:30:22	2015-06-11 00:30:22	182	{"\\\\haskell\\\\difference-of-squares\\\\Squares.hs":"module Squares (sumOfSquares, squareOfSums, difference) where\\r\\n\\r\\nsquareOfSums :: Integral a =\\u003e a -\\u003e a\\r\\nsquareOfSums n = n' * n'\\r\\n  where\\r\\n    n' = round (fromIntegral (n * (n + 1)) / 2 :: Double)\\r\\n\\r\\nsumOfSquares :: Integral a =\\u003e a -\\u003e a\\r\\nsumOfSquares n = round (fromIntegral (n * (n + 1) * (2 * n + 1)) / 6 :: Double)\\r\\n\\r\\ndifference :: Integral a =\\u003e a -\\u003e a\\r\\ndifference n = squareOfSums n - sumOfSquares n"}
124	42	72e8603fbab78e07fdd51368	superseded	haskell	difference-of-squares	\N	\N	0	2	2015-06-17 08:31:39	2015-06-17 08:31:39	182	{"\\\\haskell\\\\difference-of-squares\\\\Squares.hs":"module Squares (sumOfSquares, squareOfSums, difference) where\\r\\n\\r\\nsquareOfSums :: (Integral a, Num a) =\\u003e a -\\u003e a\\r\\nsquareOfSums n = (n * (n + 1) `div` 2) ^ (2 :: Integer)\\r\\n\\r\\nsumOfSquares :: Integral a =\\u003e a -\\u003e a\\r\\nsumOfSquares n = n * (n + 1) * (2 * n + 1) `div` 6\\r\\n\\r\\ndifference :: Integral a =\\u003e a -\\u003e a\\r\\ndifference n = squareOfSums n - sumOfSquares n"}
125	42	77ec771dc309887ba2dca03b	done	haskell	difference-of-squares	\N	\N	0	3	2015-06-27 19:08:20	2015-06-27 19:08:20	182	{"\\\\haskell\\\\difference-of-squares\\\\Squares.hs":"module Squares (sumOfSquares, squareOfSums, difference) where\\r\\n\\r\\nsquareOfSums :: (Integral a) =\\u003e a -\\u003e a\\r\\nsquareOfSums n = (n * (n + 1) `div` 2) ^ (2 :: Integer)\\r\\n\\r\\nsumOfSquares :: Integral a =\\u003e a -\\u003e a\\r\\nsumOfSquares n = n * (n + 1) * (2 * n + 1) `div` 6\\r\\n\\r\\ndifference :: Integral a =\\u003e a -\\u003e a\\r\\ndifference n = squareOfSums n - sumOfSquares n"}
126	27	e5733954a529350b1acfcd1d	done	go	leap	\N	\N	0	2	2015-11-01 03:42:31	2015-11-01 03:42:31	184	{"leap.go":"package leap\\n\\n// Find whether the year provided is a leap year\\n// The year is a leap year if\\n// it is divisible by 400 OR\\n// it is divisible by 4 AND\\n// it is NOT divisible by 100\\nfunc IsLeapYear(year int) (ret bool) {\\n\\tret = false\\n\\tif year%4 == 0 {\\n\\t\\tif year%100 == 0 {\\n\\t\\t\\tif year%400 == 0 {\\n\\t\\t\\t\\tret = true\\n\\t\\t\\t}\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t\\tret = true\\n\\t}\\n\\treturn\\n}"}
127	27	b0aa0e1af64de9ffeb1d4d34	superseded	go	leap	\N	\N	0	1	2015-12-11 17:11:34	2015-12-11 17:11:34	184	{"leap.go":"package leap\\n\\n// Find whether the year provided is a leap year\\n// The year is a leap year if\\n// it is divisible by 400 OR\\n// it is divisible by 4 AND\\n// it is NOT divisible by 100\\nfunc IsLeapYear(year int) bool {\\n\\treturn year%400 == 0 || (year%4 == 0 \\u0026\\u0026 year%100 != 0)\\n}"}
128	27	49eba626e3e55fe5b1c7430c	superseded	haskell	leap	\N	\N	0	2	2015-11-03 22:07:45	2015-11-03 22:07:45	185	{"LeapYear.hs":"module LeapYear (isLeapYear) where\\r\\n\\r\\nisLeapYear :: (Integral a) =\\u003e a -\\u003e Bool\\r\\nisLeapYear year\\r\\n    | divisibleBy 400 || (divisibleBy 4 \\u0026\\u0026 (not $ divisibleBy 100)) = True\\r\\n    | otherwise                                                     = False\\r\\n    where divisibleBy x = year `rem` x == 0"}
129	27	8d5511e58f0efa4b4602d5d2	superseded	haskell	leap	\N	\N	0	1	2015-11-14 23:22:02	2015-11-14 23:22:02	185	{"LeapYear.hs":"module LeapYear (isLeapYear) where\\r\\n\\r\\ndivisibleBy :: Int -\\u003e Int -\\u003e Bool\\r\\ndivisibleBy x y = x `rem` y == 0  \\r\\n\\r\\nisLeapYear :: Int -\\u003e Bool\\r\\nisLeapYear year\\r\\n    | year `divisibleBy` 400   = True\\r\\n    | year `divisibleBy` 100   = False\\r\\n    | year `divisibleBy` 4     = True\\r\\n    | otherwise                = False"}
130	27	0fd075519c0af96485e1c681	done	haskell	leap	\N	\N	0	3	2015-12-03 02:18:34	2015-12-03 02:18:34	185	{"LeapYear.hs":"module LeapYear (isLeapYear) where\\r\\n\\r\\nisLeapYear :: (Integral a) =\\u003e a -\\u003e Bool\\r\\nisLeapYear year\\r\\n    | divisibleBy 400                           = True\\r\\n    | divisibleBy 4 \\u0026\\u0026 (not . divisibleBy) 100  = True\\r\\n    | otherwise                                 = False\\r\\n    where divisibleBy x = year `rem` x == 0"}
131	45	7c43507f62a707abc2d962d2	pending	python	kindergarten-garden	\N	\N	0	1	2015-12-09 03:46:10	2015-12-09 03:46:10	186	{"garden.py":"defaultStudents = ['Alice','Bob','Charlie','David','Eve','Fred','Ginny','Harriet','Ileana','Joseph','Kincaid','Larry']\\nplantMap ={\\n    'V':'Violets',\\n    'R':'Radishes',\\n    'C':'Clover',\\n    'G':'Grass'\\n}\\n\\nclass Garden:\\n    def __init__(self, garden, students=defaultStudents):\\n        self.row1, self.row2 = garden.split('\\\\n')\\n        self.studentMap = dict(zip(sorted(students),range(len(students))))\\n\\n    def plants(self, student):\\n        idx = self.studentMap[student]*2\\n        return [plantMap[plant] for plant in self.row1[idx:idx+2] + self.row2[idx:idx+2]]"}
\.


--
-- Name: submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submissions_id_seq', 131, true);


--
-- Data for Name: team_managers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_managers (id, user_id, team_id) FROM stdin;
1	2	1
2	3	1
3	4	1
4	2	2
5	2	3
6	2	4
7	3	4
8	4	5
9	3	6
10	3	7
\.


--
-- Name: team_managers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_managers_id_seq', 10, true);


--
-- Data for Name: team_memberships; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_memberships (id, team_id, user_id, created_at, updated_at, confirmed, inviter_id) FROM stdin;
1	1	22	1979-03-24 01:00:27	1979-03-24 01:00:27	t	\N
2	1	15	1994-03-18 05:03:26	1994-03-18 05:03:26	t	\N
3	1	18	1998-09-20 05:48:34	1998-09-20 05:48:34	t	\N
4	1	23	1986-07-15 08:11:27	1986-07-15 08:11:27	t	\N
5	1	11	1978-12-19 01:35:49	1978-12-19 01:35:49	t	\N
6	1	8	1970-08-30 02:14:20	1970-08-30 02:14:20	t	\N
7	1	7	2014-12-01 16:53:36	2014-12-01 16:53:36	t	\N
8	1	30	1994-04-21 01:14:56	1994-04-21 01:14:56	t	\N
9	1	31	1987-09-30 12:26:31	1987-09-30 12:26:31	t	\N
10	1	36	2015-05-06 16:46:12	2015-05-06 16:46:12	t	\N
11	1	16	2002-08-13 07:27:50	2002-08-13 07:27:50	f	\N
12	1	17	1999-06-23 02:07:17	1999-06-23 02:07:17	f	\N
13	1	29	1971-11-21 14:29:32	1971-11-21 14:29:32	f	\N
14	1	32	1982-12-22 21:11:52	1982-12-22 21:11:52	f	\N
15	1	38	1976-09-22 13:33:10	1976-09-22 13:33:10	f	\N
16	1	42	1971-04-03 10:42:08	1971-04-03 10:42:08	f	\N
17	1	43	1985-04-29 13:24:38	1985-04-29 13:24:38	f	\N
18	1	47	1985-07-24 14:29:33	1985-07-24 14:29:33	f	\N
19	2	3	1994-11-13 00:19:21	1994-11-13 00:19:21	t	\N
20	2	36	1998-03-19 00:55:30	1998-03-19 00:55:30	t	\N
21	2	31	1978-05-17 00:07:55	1978-05-17 00:07:55	t	\N
22	2	47	1985-09-02 16:35:15	1985-09-02 16:35:15	t	\N
23	2	19	1980-08-16 16:20:07	1980-08-16 16:20:07	f	\N
24	2	38	1981-09-12 12:34:16	1981-09-12 12:34:16	f	\N
25	3	38	2004-04-18 16:56:57	2004-04-18 16:56:57	f	\N
26	3	3	1979-02-02 06:22:11	1979-02-02 06:22:11	f	\N
27	4	3	2000-02-07 05:16:08	2000-02-07 05:16:08	t	\N
28	4	32	2002-09-15 01:42:39	2002-09-15 01:42:39	t	\N
29	4	22	1983-01-22 06:07:12	1983-01-22 06:07:12	t	\N
30	4	27	1996-11-26 05:43:15	1996-11-26 05:43:15	t	\N
31	4	20	2005-10-20 18:31:07	2005-10-20 18:31:07	t	\N
32	4	25	2009-03-21 18:30:13	2009-03-21 18:30:13	t	\N
33	4	19	1990-12-18 12:44:41	1990-12-18 12:44:41	t	\N
34	4	24	2009-09-26 17:26:23	2009-09-26 17:26:23	t	\N
35	4	26	2005-07-30 10:07:37	2005-07-30 10:07:37	t	\N
36	4	21	1985-04-30 02:42:04	1985-04-30 02:42:04	t	\N
37	4	38	1980-05-14 04:29:14	1980-05-14 04:29:14	f	\N
38	4	12	1996-10-08 00:42:41	1996-10-08 00:42:41	f	\N
39	4	14	2002-08-20 13:02:27	2002-08-20 13:02:27	f	\N
40	5	32	1997-01-18 06:29:23	1997-01-18 06:29:23	t	\N
41	5	40	1995-04-12 06:43:25	1995-04-12 06:43:25	t	\N
42	5	35	1975-03-22 21:27:31	1975-03-22 21:27:31	t	\N
43	5	37	1999-09-01 01:33:47	1999-09-01 01:33:47	t	\N
44	5	33	1983-05-20 22:41:07	1983-05-20 22:41:07	t	\N
45	5	36	1998-02-22 22:41:44	1998-02-22 22:41:44	t	\N
46	5	34	2004-08-10 09:59:10	2004-08-10 09:59:10	t	\N
47	5	39	1998-11-14 17:15:33	1998-11-14 17:15:33	t	\N
48	5	41	1980-05-14 16:57:49	1980-05-14 16:57:49	f	\N
49	5	38	1991-08-24 16:56:01	1991-08-24 16:56:01	f	\N
50	5	3	1985-02-12 14:52:19	1985-02-12 14:52:19	f	\N
51	6	6	1972-06-13 14:19:01	1972-06-13 14:19:01	t	\N
52	6	7	2008-04-22 03:03:41	2008-04-22 03:03:41	t	\N
53	6	8	2008-01-04 06:46:49	2008-01-04 06:46:49	t	\N
54	6	9	1995-11-10 01:32:58	1995-11-10 01:32:58	t	\N
55	6	11	2006-02-15 11:31:52	2006-02-15 11:31:52	t	\N
56	6	12	2007-10-31 23:21:40	2007-10-31 23:21:40	t	\N
57	6	13	1975-07-07 17:44:49	1975-07-07 17:44:49	t	\N
58	6	14	1985-12-10 18:10:02	1985-12-10 18:10:02	t	\N
59	6	15	1972-02-04 05:02:47	1972-02-04 05:02:47	t	\N
60	6	16	1989-02-17 05:14:11	1989-02-17 05:14:11	t	\N
61	6	17	1977-05-25 08:34:26	1977-05-25 08:34:26	t	\N
62	6	18	1987-10-28 05:08:07	1987-10-28 05:08:07	t	\N
63	6	23	2012-08-25 13:01:29	2012-08-25 13:01:29	t	\N
64	6	28	1995-07-14 19:57:26	1995-07-14 19:57:26	t	\N
65	6	29	1973-04-30 03:45:02	1973-04-30 03:45:02	t	\N
66	6	30	2004-05-07 04:25:03	2004-05-07 04:25:03	t	\N
67	6	31	1993-05-22 08:35:46	1993-05-22 08:35:46	t	\N
68	6	32	1983-04-06 13:14:35	1983-04-06 13:14:35	t	\N
69	6	38	1986-06-03 19:56:30	1986-06-03 19:56:30	t	\N
70	6	42	2003-10-21 10:20:10	2003-10-21 10:20:10	t	\N
71	6	43	1999-12-10 19:16:08	1999-12-10 19:16:08	t	\N
72	6	44	1978-09-06 21:19:54	1978-09-06 21:19:54	t	\N
73	6	45	1970-02-08 06:54:58	1970-02-08 06:54:58	t	\N
74	6	46	1999-10-14 05:30:35	1999-10-14 05:30:35	t	\N
75	6	47	1991-08-08 07:52:26	1991-08-08 07:52:26	t	\N
76	6	48	2010-06-04 14:19:13	2010-06-04 14:19:13	t	\N
77	6	49	1991-11-01 00:35:35	1991-11-01 00:35:35	t	\N
78	7	3	1972-06-18 10:27:21	1972-06-18 10:27:21	t	\N
79	7	39	1976-10-09 10:27:44	1976-10-09 10:27:44	t	\N
80	7	32	1997-10-09 23:35:47	1997-10-09 23:35:47	t	\N
81	7	38	1979-03-19 20:26:38	1979-03-19 20:26:38	f	\N
\.


--
-- Name: team_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_memberships_id_seq', 81, true);


--
-- Data for Name: teams; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY teams (id, slug, created_at, updated_at, name) FROM stdin;
1	baconesia	2015-07-29 01:28:14.491565	2015-07-29 01:28:14.491565	baconesia
2	chocolades	2015-10-19 01:44:58.524907	2015-10-19 01:44:58.524907	chocolades
3	ghost	2015-04-18 09:52:53.533056	2015-04-18 09:52:53.533056	ghost
4	motley	2015-10-15 17:46:09.536769	2015-10-15 17:46:09.536769	motley
5	rugrats	2015-10-13 19:03:49.554745	2015-10-13 19:03:49.554745	rugrats
6	slate	2015-08-06 20:28:30.568417	2015-08-06 20:28:30.568417	slate
7	polkadots	2015-06-19 06:51:58.603774	2015-06-19 06:51:58.603774	polkadots
\.


--
-- Name: teams_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('teams_id_seq', 7, true);


--
-- Data for Name: user_exercises; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY user_exercises (id, user_id, language, slug, iteration_count, state, created_at, updated_at, key, archived, last_iteration_at, last_activity_at, last_activity, fetched_at, skipped_at) FROM stdin;
1	9	python	hello-world	0	\N	2015-12-13 12:15:32	2015-12-13 12:15:32	f11d3fe455ec15f6218aed72	f	2015-12-13 12:15:32	2015-12-13 12:15:32	\N	\N	\N
2	9	ecmascript	hello-world	0	\N	2015-11-04 05:59:31	2015-11-04 05:59:31	9a92bc11fae7ad4314aa4b7e	f	2015-11-04 05:59:31	2015-11-04 05:59:31	\N	\N	\N
3	11	javascript	rna-transcription	1	pending	2015-06-06 20:30:39	2015-06-06 20:30:39	aca0d64763738eca3925cd78	f	2015-12-01 04:50:14	2015-12-01 04:50:14	Submitted an iteration	\N	\N
4	12	swift	hello-world	0	\N	2015-10-24 15:06:43	2015-10-24 15:06:43	0f4eb3bcf404be4bb943a675	f	2015-10-24 15:06:43	2015-10-24 15:06:43	\N	\N	\N
5	12	scala	hello-world	0	\N	2015-11-19 15:15:29	2015-11-19 15:15:29	d33c910b0470ea550508ce2c	f	2015-11-19 15:15:29	2015-11-19 15:15:29	\N	\N	\N
6	12	scheme	hello-world	0	\N	2015-12-16 01:28:04	2015-12-16 01:28:04	33652117520f8c4197096cf8	f	2015-12-16 01:28:04	2015-12-16 01:28:04	\N	\N	\N
7	12	perl5	bob	0	\N	2015-11-17 23:02:25	2015-11-17 23:02:25	653d6a348d5556c386e1ec7d	f	2015-11-17 23:02:25	2015-11-17 23:02:25	\N	\N	\N
8	12	ruby	raindrops	4	hibernating	2015-11-13 22:45:01	2015-11-13 22:45:01	62ed01b7d6d6cf837f7d45df	f	2015-12-16 09:32:49	2015-12-16 09:32:49	Submitted an iteration	\N	\N
9	12	go	leap	0	\N	2015-11-01 19:48:59	2015-11-01 19:48:59	41c3564ebb2abeb37ecfb362	f	2015-11-01 19:48:59	2015-11-01 19:48:59	\N	\N	\N
10	15	ruby	hello-world	0	done	2015-10-04 12:38:01	2015-10-04 12:38:01	6ac9c5b10b1cdc490c9c0695	t	2015-10-04 12:38:01	2015-10-04 12:38:01	\N	\N	\N
11	15	cpp	phone-number	1	pending	2015-08-31 09:07:24	2015-08-31 09:07:24	88b035b60a3bc5bd6dff70c8	f	2015-10-13 20:11:04	2015-10-13 20:11:04	@ThibsG commented	\N	\N
12	15	javascript	hamming	1	pending	2015-10-20 14:31:04	2015-10-20 14:31:04	6d891bc7d0564295cfd0153f	f	2015-12-05 19:05:55	2015-12-05 19:05:55	Submitted an iteration	\N	\N
13	15	javascript	leap	0	\N	2015-11-04 14:21:33	2015-11-04 14:21:33	9231efad0f5e770064d2a704	f	2015-11-04 14:21:33	2015-11-04 14:21:33	\N	\N	\N
14	22	python	largest-series-product	1	\N	2015-09-12 11:05:30	2015-09-12 11:05:30	e1a94babf8367633dba82c25	f	2015-09-18 20:56:27	2015-09-18 20:56:27	Submitted an iteration	2015-09-23 14:35:59.642505	\N
15	22	erlang	leap	0	\N	2015-10-02 01:30:52	2015-10-02 01:30:52	170daacba55bb387152f59a1	f	2015-10-02 01:30:52	2015-10-02 01:30:52	\N	\N	\N
16	22	swift	hello-world	0	\N	2015-11-04 12:59:39	2015-11-04 12:59:39	82b4df0f4226f0e3c12f7151	f	2015-11-04 12:59:39	2015-11-04 12:59:39	\N	\N	\N
17	28	ocaml	bob	0	\N	2015-09-23 13:32:46	2015-09-23 13:32:46	7a91bec4b2a10c806a654a38	f	2015-09-23 13:32:46	2015-09-23 13:32:46	\N	\N	\N
18	28	clojure	scrabble-score	1	\N	2015-04-27 11:07:26	2015-04-27 11:07:26	49dfbdbd2fa4452bbd92e91a	f	2015-11-03 22:44:45	2015-11-03 22:44:45	Submitted an iteration	2015-12-13 13:45:50.240385	\N
19	28	lfe	leap	0	\N	2015-07-25 17:24:23	2015-07-25 17:24:23	3a12fb4bd6d1a2086a4eb949	f	2015-07-25 17:24:23	2015-07-25 17:24:23	\N	\N	\N
20	28	javascript	phone-number	1	\N	2015-04-12 18:51:45	2015-04-12 18:51:45	5777bccb302f7b14f4e48460	f	2015-05-20 00:44:00	2015-05-20 00:44:00	@StevenACoffman commented	2015-12-16 20:30:47.137721	\N
21	28	clojure	bob	1	hibernating	2015-06-03 21:27:55	2015-06-03 21:27:55	fb8d095fbca61adac01d4fc4	f	2015-06-10 10:00:00	2015-06-10 10:00:00	Submitted an iteration	\N	\N
22	28	ruby	hamming	1	pending	2015-04-20 22:04:35	2015-04-20 22:04:35	5c02f4a1ea40dbd5470e2474	f	2015-05-02 13:28:21	2015-05-02 13:28:21	Submitted an iteration	\N	\N
23	28	swift	hello-world	0	\N	2015-10-22 01:50:10	2015-10-22 01:50:10	b985559c57495e2b4cac66c3	f	2015-10-22 01:50:10	2015-10-22 01:50:10	\N	\N	\N
24	28	haskell	raindrops	1	pending	2015-05-22 19:48:40	2015-05-22 19:48:40	764c2b2b290404b103fd885c	f	2015-07-02 00:01:14	2015-07-02 00:01:14	Submitted an iteration	\N	\N
25	28	coffeescript	anagram	0	\N	2015-06-09 09:44:21	2015-06-09 09:44:21	3c79f3caf367a52877378fcd	f	2015-06-09 09:44:21	2015-06-09 09:44:21	\N	\N	\N
26	28	python	hamming	2	done	2015-07-19 22:19:08	2015-07-19 22:19:08	042266f093b5ab75a5c60329	t	2015-08-26 05:22:54	2015-08-26 05:22:54	Submitted an iteration	\N	\N
27	28	scala	hello-world	0	\N	2015-07-26 05:42:46	2015-07-26 05:42:46	4a7097485907163860e85c43	f	2015-07-26 05:42:46	2015-07-26 05:42:46	\N	\N	\N
28	28	cpp	word-count	1	pending	2015-04-14 20:18:35	2015-04-14 20:18:35	233181aa11211bc808ba57bf	f	2015-09-28 15:04:03	2015-09-28 15:04:03	Submitted an iteration	\N	\N
29	28	perl5	leap	0	\N	2015-12-21 17:00:18	2015-12-21 17:00:18	56677d5f288b561d634a6840	f	2015-12-21 17:00:18	2015-12-21 17:00:18	\N	\N	\N
30	28	javascript	bob	1	done	2015-05-09 09:43:09	2015-05-09 09:43:09	9c062f25bf5c0805551772a7	t	2015-10-01 23:34:55	2015-10-01 23:34:55	Submitted an iteration	\N	\N
31	28	haskell	strain	1	pending	2015-04-09 08:00:31	2015-04-09 08:00:31	0dfe6eaec19f900c8bec8a03	f	2015-05-30 10:41:42	2015-05-30 10:41:42	Submitted an iteration	\N	\N
32	28	erlang	leap	0	\N	2015-12-14 09:09:00	2015-12-14 09:09:00	854e4b8255a186014f67b07c	f	2015-12-14 09:09:00	2015-12-14 09:09:00	\N	\N	\N
33	28	python	prime-factors	1	pending	2015-07-06 14:25:39	2015-07-06 14:25:39	59709b102ec2da3b941a6936	t	2015-10-11 04:38:48	2015-10-11 04:38:48	Submitted an iteration	\N	\N
34	28	cpp	crypto-square	0	\N	2015-10-14 08:35:21	2015-10-14 08:35:21	03d8c1382eaee70f6779014b	f	2015-10-14 08:35:21	2015-10-14 08:35:21	\N	\N	\N
35	28	lua	hello-world	0	\N	2015-12-14 10:56:56	2015-12-14 10:56:56	ca356340754483a8e50a52c2	f	2015-12-14 10:56:56	2015-12-14 10:56:56	\N	\N	\N
36	28	python	difference-of-squares	1	hibernating	2015-05-31 17:07:19	2015-05-31 17:07:19	042bd43e5fd7a6dc321a701e	f	2015-09-22 04:52:26	2015-09-22 04:52:26	Submitted an iteration	\N	\N
37	28	go	hello-world	0	done	2015-07-02 16:02:37	2015-07-02 16:02:37	a7681b3a57aa6c6fdaafe250	t	2015-07-02 16:02:37	2015-07-02 16:02:37	\N	\N	\N
38	28	elixir	bob	0	\N	2015-11-30 20:05:31	2015-11-30 20:05:31	0c79b530550d8a26246ce35a	f	2015-11-30 20:05:31	2015-11-30 20:05:31	\N	\N	\N
39	28	java	etl	0	\N	2015-11-14 04:27:51	2015-11-14 04:27:51	cec4a1f673b91dc6b6b0d870	f	2015-11-14 04:27:51	2015-11-14 04:27:51	\N	\N	\N
40	28	python	bob	3	\N	2015-07-06 02:39:05	2015-07-06 02:39:05	6b3563e74375c2d2cb1eee56	f	2015-11-25 04:01:39	2015-11-25 04:01:39	@alex-bender commented	2015-09-27 23:42:28.898876	\N
41	28	python	word-count	1	hibernating	2015-04-28 11:57:28	2015-04-28 11:57:28	7eb9107552b9a7dc3c6138e7	f	2015-09-23 04:31:24	2015-09-23 04:31:24	Submitted an iteration	\N	\N
42	28	haskell	leap	1	pending	2015-10-13 08:57:50	2015-10-13 08:57:50	133d5ffd8ca74bfb7a14ceb8	f	2015-11-24 14:05:53	2015-11-24 14:05:53	Submitted an iteration	\N	\N
43	28	php	hello-world	0	done	2015-06-02 13:28:28	2015-06-02 13:28:28	ac61a408816f782a665a583c	t	2015-06-02 13:28:28	2015-06-02 13:28:28	\N	\N	\N
44	28	ruby	nth-prime	1	pending	2015-10-09 21:13:48	2015-10-09 21:13:48	eece3732722f21004f23be82	f	2015-11-05 20:41:54	2015-11-05 20:41:54	Submitted an iteration	\N	\N
45	28	go	leap	2	done	2015-04-10 16:34:00	2015-04-10 16:34:00	4e0a256a15052facfe613062	t	2015-08-31 00:25:10	2015-08-31 00:25:10	Submitted an iteration	\N	\N
46	28	objective-c	hello-world	0	\N	2015-04-17 23:12:02	2015-04-17 23:12:02	c96d3935fda28b5411a6965f	f	2015-04-17 23:12:02	2015-04-17 23:12:02	\N	\N	\N
47	28	ruby	hello-world	1	pending	2015-04-15 08:43:35	2015-04-15 08:43:35	9dae731d597363c43186eb38	t	2015-05-06 12:49:26	2015-05-06 12:49:26	Submitted an iteration	\N	\N
48	28	javascript	hello-world	0	\N	2015-11-02 13:30:09	2015-11-02 13:30:09	98420d9b6389cd26a0bc9ee0	f	2015-11-02 13:30:09	2015-11-02 13:30:09	\N	\N	\N
49	28	javascript	food-chain	1	done	2015-07-28 16:18:04	2015-07-28 16:18:04	f133e73d4d21c227c863bbe5	t	2015-08-18 13:00:40	2015-08-18 13:00:40	Submitted an iteration	\N	\N
50	28	clojure	hello-world	0	done	2015-11-21 09:24:34	2015-11-21 09:24:34	07445faa30354e09529f207b	t	2015-11-21 09:24:34	2015-11-21 09:24:34	\N	\N	\N
51	28	elixir	grade-school	2	\N	2015-04-10 01:13:47	2015-04-10 01:13:47	353a99ac20fe0bfa3a2825b7	t	2015-10-08 07:47:25	2015-10-08 07:47:25	@CoderDennis commented	2015-11-11 20:12:38.887321	\N
52	28	perl5	bob	0	\N	2015-08-07 03:00:26	2015-08-07 03:00:26	29df52a0f76c421f9fcc75ef	f	2015-08-07 03:00:26	2015-08-07 03:00:26	\N	\N	\N
53	28	javascript	atbash-cipher	1	pending	2015-10-22 15:15:03	2015-10-22 15:15:03	5bd9c68e2043824fe5556713	f	2015-11-15 00:35:01	2015-11-15 00:35:01	Submitted an iteration	\N	\N
54	29	objective-c	hello-world	0	\N	2015-09-13 19:36:50	2015-09-13 19:36:50	5470a16482c8a54e53218f6f	f	2015-09-13 19:36:50	2015-09-13 19:36:50	\N	\N	\N
55	29	lisp	point-mutations	0	\N	2015-07-19 21:54:43	2015-07-19 21:54:43	6ca912e91233e4cf53c2c673	f	2015-07-19 21:54:43	2015-07-19 21:54:43	\N	\N	\N
56	29	javascript	clock	1	done	2015-09-02 16:15:11	2015-09-02 16:15:11	ac2bfe93b2ccdd3a53838e2d	t	2015-10-11 18:38:42	2015-10-11 18:38:42	Submitted an iteration	\N	\N
57	29	haskell	accumulate	1	\N	2015-11-03 00:44:28	2015-11-03 00:44:28	c0377d540deeced652a570b8	f	2015-12-19 20:20:13	2015-12-19 20:20:13	Submitted an iteration	2015-10-18 00:46:30.57413	\N
58	29	lfe	leap	0	\N	2015-11-06 01:24:32	2015-11-06 01:24:32	7f3fccde49ea6caced1bb746	f	2015-11-06 01:24:32	2015-11-06 01:24:32	\N	\N	\N
59	29	python	difference-of-squares	2	done	2015-08-12 04:05:13	2015-08-12 04:05:13	53a9598f96745f2de7fa5b38	t	2015-09-28 17:46:18	2015-09-28 17:46:18	Submitted an iteration	\N	\N
60	29	ruby	rna-transcription	1	\N	2015-08-16 06:12:41	2015-08-16 06:12:41	367909d0513072f9b5c1a7de	f	2015-10-07 05:18:29	2015-10-07 05:18:29	@mikeyjcat commented	2015-10-30 09:55:50.109288	\N
61	29	fsharp	sum-of-multiples	0	\N	2015-10-31 06:46:49	2015-10-31 06:46:49	6f6c9aee725b7952ef7df6fb	f	2015-10-31 06:46:49	2015-10-31 06:46:49	\N	\N	\N
62	29	clojure	bob	1	done	2015-08-14 14:45:46	2015-08-14 14:45:46	70470b7e8d94c1a59808966d	t	2015-09-16 12:16:40	2015-09-16 12:16:40	Submitted an iteration	\N	\N
63	29	ruby	raindrops	3	hibernating	2015-07-10 22:00:18	2015-07-10 22:00:18	cfec981eecfd627db7676961	f	2015-09-06 15:18:38	2015-09-06 15:18:38	Submitted an iteration	\N	\N
64	29	python	hello-world	0	\N	2015-07-17 11:03:46	2015-07-17 11:03:46	ab5b55bc7593cee0731e9a61	f	2015-07-17 11:03:46	2015-07-17 11:03:46	\N	\N	\N
65	29	cpp	bob	0	\N	2015-07-16 19:40:10	2015-07-16 19:40:10	ad8a3ab837566582ad74c5ec	f	2015-07-16 19:40:10	2015-07-16 19:40:10	\N	\N	\N
66	29	plsql	raindrops	0	\N	2015-07-01 16:01:23	2015-07-01 16:01:23	e1af342b24e64ff65bf1681e	f	2015-07-01 16:01:23	2015-07-01 16:01:23	\N	\N	\N
67	29	elisp	hello-world	0	\N	2015-08-31 19:05:58	2015-08-31 19:05:58	979935df65c4652080820636	f	2015-08-31 19:05:58	2015-08-31 19:05:58	\N	\N	\N
68	29	java	anagram	0	\N	2015-11-08 20:39:13	2015-11-08 20:39:13	8fd5ed776f14b84298a72197	f	2015-11-08 20:39:13	2015-11-08 20:39:13	\N	\N	\N
69	29	rust	leap	0	\N	2015-12-01 01:18:20	2015-12-01 01:18:20	d08c06298f4e701e6072a767	f	2015-12-01 01:18:20	2015-12-01 01:18:20	\N	\N	\N
70	29	lua	hamming	0	\N	2015-10-30 02:50:04	2015-10-30 02:50:04	8154cd47287963a9f185dec3	f	2015-10-30 02:50:04	2015-10-30 02:50:04	\N	\N	\N
71	31	clojure	rna-transcription	0	\N	2015-05-23 05:37:31	2015-05-23 05:37:31	6db9121a07175bad465fe488	f	2015-05-23 05:37:31	2015-05-23 05:37:31	\N	\N	\N
72	31	perl5	bob	0	\N	2015-12-09 18:42:56	2015-12-09 18:42:56	4aeb1971525c595cdb91435c	f	2015-12-09 18:42:56	2015-12-09 18:42:56	\N	\N	\N
73	31	php	hamming	0	\N	2015-06-22 06:36:57	2015-06-22 06:36:57	204541d9b4f37f0b93d1c56d	f	2015-06-22 06:36:57	2015-06-22 06:36:57	\N	\N	\N
74	31	go	clock	1	pending	2015-06-18 13:19:34	2015-06-18 13:19:34	08d22c4151f1346c1453d554	f	2015-07-06 15:27:27	2015-07-06 15:27:27	Submitted an iteration	\N	\N
75	31	ruby	binary-search-tree	1	needs_input	2015-11-04 21:29:24	2015-11-04 21:29:24	09e320ea8bf797007fdc5c98	f	2015-11-19 17:31:07	2015-11-19 17:31:07	Submitted an iteration	\N	\N
76	31	javascript	sum-of-multiples	2	pending	2015-08-25 13:14:50	2015-08-25 13:14:50	6e8506d8b614f52511c4d0a2	f	2015-11-20 17:49:54	2015-11-20 17:49:54	Submitted an iteration	\N	\N
77	31	python	bob	1	pending	2015-08-22 02:01:33	2015-08-22 02:01:33	46bcce8ed3a3792ea0461dd8	f	2015-08-28 19:41:23	2015-08-28 19:41:23	Submitted an iteration	\N	\N
78	31	python	largest-series-product	1	pending	2015-05-29 10:10:30	2015-05-29 10:10:30	b3d962f2505e392c643c6970	f	2015-10-28 19:26:28	2015-10-28 19:26:28	Submitted an iteration	\N	\N
79	31	python	hello-world	0	\N	2015-06-22 07:15:24	2015-06-22 07:15:24	922352f83715f560e086decd	f	2015-06-22 07:15:24	2015-06-22 07:15:24	\N	\N	\N
80	31	ruby	bob	3	done	2015-06-13 09:51:46	2015-06-13 09:51:46	2b66d6245a1db62bb5c307a6	t	2015-10-24 05:12:47	2015-10-24 05:12:47	Submitted an iteration	\N	\N
81	31	elisp	hello-world	0	\N	2015-07-17 01:22:09	2015-07-17 01:22:09	ab58f29bd55b585fabc1b8a7	f	2015-07-17 01:22:09	2015-07-17 01:22:09	\N	\N	\N
82	31	ruby	hello-world	0	done	2015-11-02 10:38:20	2015-11-02 10:38:20	84148c97c10d28fd52766822	t	2015-11-02 10:38:20	2015-11-02 10:38:20	\N	\N	\N
83	31	java	hello-world	0	done	2015-11-05 10:59:44	2015-11-05 10:59:44	3f0ba0fbf8bb8329647a59fe	t	2015-11-05 10:59:44	2015-11-05 10:59:44	\N	\N	\N
84	31	scala	hamming	0	\N	2015-11-12 17:46:17	2015-11-12 17:46:17	04ad5fba89e1cb1e650ef59d	f	2015-11-12 17:46:17	2015-11-12 17:46:17	\N	\N	\N
85	31	csharp	bob	0	\N	2015-07-17 15:41:13	2015-07-17 15:41:13	2da0e8335fc7ad247d9b7b7e	f	2015-07-17 15:41:13	2015-07-17 15:41:13	\N	2015-10-15 00:30:28.580559	\N
86	31	racket	hello-world	0	\N	2015-09-03 10:00:18	2015-09-03 10:00:18	6e7a4dd2aefbf8dc576bcc7a	f	2015-09-03 10:00:18	2015-09-03 10:00:18	\N	\N	\N
87	31	swift	hello-world	0	\N	2015-08-08 22:52:59	2015-08-08 22:52:59	8a052e3737f1f425640b2eca	f	2015-08-08 22:52:59	2015-08-08 22:52:59	\N	\N	\N
88	31	cpp	meetup	1	pending	2015-06-23 17:21:41	2015-06-23 17:21:41	cd2ba8be67af4bbb96bb5097	f	2015-08-30 22:29:49	2015-08-30 22:29:49	Submitted an iteration	\N	\N
89	31	rust	leap	0	\N	2015-11-30 14:36:06	2015-11-30 14:36:06	d6b70a843c89045ee3b967d6	f	2015-11-30 14:36:06	2015-11-30 14:36:06	\N	\N	\N
90	31	coffeescript	hello-world	0	\N	2015-07-22 02:41:37	2015-07-22 02:41:37	f12113397e893ab31ec719d9	f	2015-07-22 02:41:37	2015-07-22 02:41:37	\N	\N	\N
91	31	scala	nucleotide-count	0	\N	2015-11-19 11:38:21	2015-11-19 11:38:21	a8c384ac21a12acaa3910def	f	2015-11-19 11:38:21	2015-11-19 11:38:21	\N	2015-11-05 13:45:50.633499	\N
92	31	python	word-count	4	done	2015-05-30 02:14:21	2015-05-30 02:14:21	a2ad2e2aefdf121df21bbb0f	t	2015-12-17 09:49:03	2015-12-17 09:49:03	Submitted an iteration	\N	\N
93	31	go	leap	0	\N	2015-12-04 08:16:00	2015-12-04 08:16:00	2b464c1c451a6153d38f8b52	f	2015-12-04 08:16:00	2015-12-04 08:16:00	\N	\N	\N
94	31	javascript	hello-world	0	\N	2015-07-19 22:23:12	2015-07-19 22:23:12	a1b2c1ba1bda44dfac495921	f	2015-07-19 22:23:12	2015-07-19 22:23:12	\N	\N	\N
95	31	scala	hello-world	0	\N	2015-12-17 22:59:36	2015-12-17 22:59:36	0f01bf306706be85ea4c2962	f	2015-12-17 22:59:36	2015-12-17 22:59:36	\N	\N	\N
96	31	fsharp	sum-of-multiples	0	\N	2015-08-30 19:59:55	2015-08-30 19:59:55	2fdba038125db9119d9e6a15	f	2015-08-30 19:59:55	2015-08-30 19:59:55	\N	\N	\N
97	31	swift	crypto-square	1	pending	2015-07-23 14:40:26	2015-07-23 14:40:26	f9b3a106c460f5efdd124ad7	f	2015-10-23 03:52:42	2015-10-23 03:52:42	Submitted an iteration	\N	\N
98	31	csharp	leap	0	\N	2015-11-12 00:37:06	2015-11-12 00:37:06	a65a991ca205a34d50e9281a	f	2015-11-12 00:37:06	2015-11-12 00:37:06	\N	\N	\N
99	31	cpp	prime-factors	2	pending	2015-06-13 17:20:09	2015-06-13 17:20:09	705d85dccb64d78bb0218a87	f	2015-11-17 07:47:59	2015-11-17 07:47:59	Submitted an iteration	\N	\N
100	31	javascript	bob	1	pending	2015-10-10 13:09:39	2015-10-10 13:09:39	e016cfd1fac2a617cb7434bf	f	2015-10-17 17:54:14	2015-10-17 17:54:14	Submitted an iteration	\N	\N
101	31	objective-c	hello-world	0	\N	2015-07-03 04:23:01	2015-07-03 04:23:01	998bece5b322644eaf6ea28a	f	2015-07-03 04:23:01	2015-07-03 04:23:01	\N	\N	\N
102	31	haskell	nucleotide-count	1	pending	2015-07-13 20:46:50	2015-07-13 20:46:50	f921b7c7fb5891793e6de089	t	2015-09-24 01:34:24	2015-09-24 01:34:24	Submitted an iteration	\N	\N
103	31	java	etl	0	\N	2015-06-07 14:59:50	2015-06-07 14:59:50	3e34db294b6ef58b436f170e	f	2015-06-07 14:59:50	2015-06-07 14:59:50	\N	\N	\N
104	31	ruby	grains	3	done	2015-05-30 16:58:14	2015-05-30 16:58:14	a4c179886ea5d69e78932567	t	2015-11-15 21:13:51	2015-11-15 21:13:51	Submitted an iteration	\N	\N
105	31	ruby	grade-school	1	\N	2015-09-21 11:34:45	2015-09-21 11:34:45	c9ee9ecb0ccb325ac8723e6b	f	2015-11-29 14:09:47	2015-11-29 14:09:47	Submitted an iteration	2015-10-22 16:36:54.743388	\N
106	31	go	triangle	1	pending	2015-07-25 07:20:52	2015-07-25 07:20:52	c56642173bae8a925fbc1766	f	2015-08-17 19:19:05	2015-08-17 19:19:05	Submitted an iteration	\N	\N
107	33	go	leap	0	\N	2015-10-30 07:05:00	2015-10-30 07:05:00	d32a6f098f85168da4cbcf22	f	2015-10-30 07:05:00	2015-10-30 07:05:00	\N	\N	\N
108	33	lfe	rna-transcription	0	\N	2015-12-12 07:54:07	2015-12-12 07:54:07	82ef02e368a7cc7d354ebf1b	f	2015-12-12 07:54:07	2015-12-12 07:54:07	\N	\N	\N
109	33	fsharp	bob	0	\N	2015-12-23 22:27:09	2015-12-23 22:27:09	15d999262e052924c77e0cf9	f	2015-12-23 22:27:09	2015-12-23 22:27:09	\N	\N	\N
110	38	go	leap	0	\N	2015-08-15 19:16:00	2015-08-15 19:16:00	9add8dd652e95253b3c04b3c	f	2015-08-15 19:16:00	2015-08-15 19:16:00	\N	\N	\N
111	40	haskell	sublist	4	pending	2015-07-14 12:36:20	2015-07-14 12:36:20	87456c58d50289947b83263b	f	2015-12-21 16:53:02	2015-12-21 16:53:02	Submitted an iteration	\N	\N
112	40	clojure	word-count	2	done	2015-06-26 08:19:50	2015-06-26 08:19:50	27fc980fbdb1e6f3ed675e32	t	2015-10-22 00:20:53	2015-10-22 00:20:53	Submitted an iteration	\N	\N
113	40	coffeescript	word-count	0	\N	2015-07-09 02:04:31	2015-07-09 02:04:31	8912afccc842abed2be69811	f	2015-07-09 02:04:31	2015-07-09 02:04:31	\N	\N	\N
114	40	javascript	bob	1	hibernating	2015-12-05 13:26:49	2015-12-05 13:26:49	0653d4eebf5b0f4653616d6c	f	2015-12-18 00:45:31	2015-12-18 00:45:31	Submitted an iteration	\N	\N
115	44	elixir	list-ops	2	done	2015-06-24 17:11:24	2015-06-24 17:11:24	91cfe54acf24ac9ffdbad047	t	2015-09-25 01:23:27	2015-09-25 01:23:27	Submitted an iteration	\N	\N
116	46	fsharp	triangle	0	\N	2015-07-09 07:08:02	2015-07-09 07:08:02	9daee682771c4ae53a9e521f	f	2015-07-09 07:08:02	2015-07-09 07:08:02	\N	\N	\N
117	48	javascript	hamming	2	pending	2015-12-10 12:22:17	2015-12-10 12:22:17	953cc0acee904bae7e313cd5	f	2015-12-18 07:16:16	2015-12-18 07:16:16	Submitted an iteration	\N	\N
118	48	elixir	phone-number	0	\N	2015-12-25 12:35:12	2015-12-25 12:35:12	23901c7ca753896bd2424e1e	f	2015-12-25 12:35:12	2015-12-25 12:35:12	\N	\N	\N
119	48	objective-c	hello-world	0	\N	2015-12-24 05:26:07	2015-12-24 05:26:07	86f184b451ef625acee1b293	f	2015-12-24 05:26:07	2015-12-24 05:26:07	\N	\N	\N
120	48	lua	hello-world	0	\N	2015-12-17 21:54:05	2015-12-17 21:54:05	053ec10e296507b4de629d0b	f	2015-12-17 21:54:05	2015-12-17 21:54:05	\N	\N	\N
121	49	ruby	gigasecond	2	pending	2015-06-20 01:40:49	2015-06-20 01:40:49	f06a4469e3645048910c86b2	f	2015-12-11 19:56:20	2015-12-11 19:56:20	Submitted an iteration	\N	\N
122	49	scala	binary-search-tree	1	hibernating	2015-06-18 10:49:06	2015-06-18 10:49:06	131344ad210ae9b379cb67ef	f	2015-09-09 13:37:58	2015-09-09 13:37:58	Submitted an iteration	\N	\N
123	49	lfe	leap	0	\N	2015-12-05 12:04:31	2015-12-05 12:04:31	166073cca8596972eb69b3b0	f	2015-12-05 12:04:31	2015-12-05 12:04:31	\N	\N	\N
124	26	javascript	hamming	1	pending	2015-06-03 15:03:08	2015-06-03 15:03:08	28fe3ea768d4bbf8caa9d609	f	2015-07-24 04:02:03	2015-07-24 04:02:03	Submitted an iteration	\N	\N
125	26	coffeescript	hello-world	0	\N	2015-07-25 19:31:17	2015-07-25 19:31:17	05dca2e191c80f615b7151c5	f	2015-07-25 19:31:17	2015-07-25 19:31:17	\N	\N	\N
126	26	go	gigasecond	0	\N	2015-05-17 23:55:10	2015-05-17 23:55:10	26870cfec06bd71043ebc539	f	2015-05-17 23:55:10	2015-05-17 23:55:10	\N	\N	\N
127	26	scala	hello-world	0	\N	2015-08-10 03:12:29	2015-08-10 03:12:29	e214d5b611b36848cd78b113	f	2015-08-10 03:12:29	2015-08-10 03:12:29	\N	\N	\N
128	26	plsql	hamming	0	\N	2015-09-17 11:37:14	2015-09-17 11:37:14	34dd4a6493e602dbf0186683	f	2015-09-17 11:37:14	2015-09-17 11:37:14	\N	\N	\N
129	7	coffeescript	word-count	1	hibernating	2015-11-13 14:19:53	2015-11-13 14:19:53	c089ec637fc295f6e1210f0e	f	2015-11-24 03:32:04	2015-11-24 03:32:04	Submitted an iteration	\N	\N
130	7	coffeescript	hello-world	0	\N	2015-12-21 02:29:25	2015-12-21 02:29:25	a7e9a129ad4abf06d335ea26	f	2015-12-21 02:29:25	2015-12-21 02:29:25	\N	\N	\N
131	7	ruby	gigasecond	2	pending	2015-10-26 16:33:56	2015-10-26 16:33:56	a5c6c4ceb63cca34b9b1157f	f	2015-12-09 11:17:35	2015-12-09 11:17:35	Submitted an iteration	\N	\N
132	7	javascript	gigasecond	1	\N	2015-10-11 13:32:48	2015-10-11 13:32:48	cb18a5f9048667d6805441b2	f	2015-11-11 11:42:24	2015-11-11 11:42:24	@Koekelas commented	2015-11-07 22:52:30.92367	\N
133	7	lfe	leap	0	\N	2015-12-10 22:55:22	2015-12-10 22:55:22	824c9a1e26131a12540622ba	f	2015-12-10 22:55:22	2015-12-10 22:55:22	\N	\N	\N
134	23	javascript	hamming	1	\N	2015-09-19 05:15:22	2015-09-19 05:15:22	6bf791343b32b12bd6b58539	f	2015-11-26 00:43:16	2015-11-26 00:43:16	Submitted an iteration	2015-10-10 00:41:55.679332	\N
135	23	java	grade-school	1	\N	2015-10-08 12:32:30	2015-10-08 12:32:30	0f5d7cb7faa1c48ae51284f3	f	2015-12-23 00:47:52	2015-12-23 00:47:52	Submitted an iteration	2015-10-30 17:13:44.647718	\N
136	17	csharp	leap	0	\N	2015-07-25 13:56:53	2015-07-25 13:56:53	daac1376bbdbbb190ac68c3e	f	2015-07-25 13:56:53	2015-07-25 13:56:53	\N	\N	\N
137	17	php	gigasecond	1	pending	2015-10-09 16:58:58	2015-10-09 16:58:58	d0f95aee060e50dc4e6acffe	f	2015-11-05 05:38:22	2015-11-05 05:38:22	Submitted an iteration	\N	\N
138	17	objective-c	bob	0	\N	2015-10-30 01:08:30	2015-10-30 01:08:30	520e47fcf570acf6361be06f	f	2015-10-30 01:08:30	2015-10-30 01:08:30	\N	\N	\N
139	17	ruby	binary-search-tree	1	\N	2015-08-07 22:28:59	2015-08-07 22:28:59	ca064fb3ce16cf7ee21601a5	f	2015-09-22 16:52:47	2015-09-22 16:52:47	Submitted an iteration	2015-10-08 04:09:13.22661	\N
140	20	rust	difference-of-squares	1	\N	2015-10-18 00:12:04	2015-10-18 00:12:04	2471cfb3758fd7ef91249a67	f	2015-10-28 15:07:47	2015-10-28 15:07:47	Submitted an iteration	2015-10-11 00:14:23.467237	\N
141	20	lisp	grains	0	\N	2015-11-20 09:24:44	2015-11-20 09:24:44	ebdf9a63e3238bc8375b4294	f	2015-11-20 09:24:44	2015-11-20 09:24:44	\N	\N	\N
142	20	python	kindergarten-garden	1	\N	2015-10-03 20:14:45	2015-10-03 20:14:45	50e35f7ee23c43e4a36ccc9d	f	2015-10-30 22:02:25	2015-10-30 22:02:25	Submitted an iteration	2015-11-24 20:54:57.596473	\N
143	20	lua	hello-world	0	\N	2015-10-26 18:07:56	2015-10-26 18:07:56	229aaee65cc4b4a3686ce438	f	2015-10-26 18:07:56	2015-10-26 18:07:56	\N	\N	\N
144	20	ocaml	minesweeper	0	\N	2015-09-22 04:03:53	2015-09-22 04:03:53	3f28413bb25d364e8b2949ff	f	2015-09-22 04:03:53	2015-09-22 04:03:53	\N	\N	\N
145	21	swift	hello-world	1	\N	2015-08-18 15:00:34	2015-08-18 15:00:34	2542718be9e8f239cdb42356	t	2015-11-16 12:14:43	2015-11-16 12:14:43	Submitted an iteration	\N	\N
146	21	javascript	hamming	1	done	2015-09-21 12:01:55	2015-09-21 12:01:55	4b7c805c2284be09eb56b64b	t	2015-11-10 21:36:52	2015-11-10 21:36:52	Submitted an iteration	\N	\N
147	21	cpp	bob	0	\N	2015-10-21 02:00:19	2015-10-21 02:00:19	453539c4c9bd982ce0519156	f	2015-10-21 02:00:19	2015-10-21 02:00:19	\N	\N	\N
148	21	python	bob	1	\N	2015-10-06 07:34:55	2015-10-06 07:34:55	e726236051ad39c2f97d366f	f	2015-11-30 22:12:11	2015-11-30 22:12:11	@pierrebeaucamp commented	2015-11-24 04:02:22.380534	\N
149	36	elixir	point-mutations	2	\N	2015-11-17 12:34:27	2015-11-17 12:34:27	d4fc32518d32ee753de2a8d8	f	2015-12-19 10:39:15	2015-12-19 10:39:15	@martinstannard commented	2015-11-29 05:00:01.797566	\N
150	36	rust	leap	0	\N	2015-11-14 21:25:55	2015-11-14 21:25:55	ab90539ab6054c01fa1e5fb3	f	2015-11-14 21:25:55	2015-11-14 21:25:55	\N	\N	\N
151	30	fsharp	sum-of-multiples	0	\N	2015-04-23 01:48:50	2015-04-23 01:48:50	9d8368cb8393e95b933560e7	f	2015-04-23 01:48:50	2015-04-23 01:48:50	\N	\N	\N
152	30	ruby	hello-world	1	pending	2015-06-27 14:42:19	2015-06-27 14:42:19	2900ebd1edc2e748aa2157fb	f	2015-08-02 03:51:33	2015-08-02 03:51:33	Submitted an iteration	\N	\N
153	30	coffeescript	hello-world	0	\N	2015-12-09 15:42:37	2015-12-09 15:42:37	7fc83a3d3c13867bb990a35f	f	2015-12-09 15:42:37	2015-12-09 15:42:37	\N	\N	\N
154	30	csharp	binary	1	pending	2015-05-16 17:32:40	2015-05-16 17:32:40	8219a09fdb4394aca729fb54	f	2015-05-31 10:15:53	2015-05-31 10:15:53	Submitted an iteration	\N	\N
155	30	ruby	prime-factors	2	pending	2015-07-29 12:12:00	2015-07-29 12:12:00	64715399c07ebf81156423b0	f	2015-11-27 03:40:48	2015-11-27 03:40:48	Submitted an iteration	\N	\N
156	30	javascript	gigasecond	1	pending	2015-04-19 01:10:34	2015-04-19 01:10:34	bfe587ecebe0297e561d914c	f	2015-08-02 03:19:41	2015-08-02 03:19:41	Submitted an iteration	\N	\N
157	35	ruby	trinary	1	\N	2015-11-24 11:16:25	2015-11-24 11:16:25	8a918b05b7598255207655af	f	2015-12-12 15:22:23	2015-12-12 15:22:23	Submitted an iteration	2015-10-01 17:55:14.445218	\N
158	35	perl5	raindrops	1	pending	2015-11-03 12:05:01	2015-11-03 12:05:01	3246a0cffa9195bb0d65cc79	f	2015-12-25 07:00:49	2015-12-25 07:00:49	Submitted an iteration	\N	\N
159	14	cpp	bob	0	\N	2015-12-06 16:24:07	2015-12-06 16:24:07	fef1a66dd5c14e186986482c	f	2015-12-06 16:24:07	2015-12-06 16:24:07	\N	\N	\N
160	14	erlang	leap	0	\N	2015-10-24 07:30:08	2015-10-24 07:30:08	4d20494bd9776e0badeb0785	f	2015-10-24 07:30:08	2015-10-24 07:30:08	\N	\N	\N
161	14	clojure	bob	0	\N	2015-10-19 00:10:13	2015-10-19 00:10:13	6ac2c928db750ea62a8bd778	f	2015-10-19 00:10:13	2015-10-19 00:10:13	\N	\N	\N
162	14	coffeescript	anagram	2	pending	2015-09-30 03:57:04	2015-09-30 03:57:04	9fb106cc1e8a79385c5a46f1	f	2015-12-06 03:33:43	2015-12-06 03:33:43	Submitted an iteration	\N	\N
163	41	fsharp	sum-of-multiples	0	\N	2015-08-27 08:28:12	2015-08-27 08:28:12	ff5228854996f0095f52cc2d	f	2015-08-27 08:28:12	2015-08-27 08:28:12	\N	\N	\N
164	41	cpp	hamming	0	\N	2015-11-06 08:16:10	2015-11-06 08:16:10	b436a773fc92c905797fe9ad	f	2015-11-06 08:16:10	2015-11-06 08:16:10	\N	\N	\N
165	41	ruby	bob	3	pending	2015-04-23 20:36:08	2015-04-23 20:36:08	d59b6f8fa0d36f9261c1abf6	f	2015-10-05 03:36:44	2015-10-05 03:36:44	Submitted an iteration	\N	\N
166	41	haskell	leap	2	pending	2015-08-03 14:44:44	2015-08-03 14:44:44	c084c3bf3de01e65de506fba	f	2015-10-28 18:22:29	2015-10-28 18:22:29	Submitted an iteration	\N	\N
167	41	fsharp	difference-of-squares	0	\N	2015-11-18 09:50:10	2015-11-18 09:50:10	c37db7e646a6440096075fb3	f	2015-11-18 09:50:10	2015-11-18 09:50:10	\N	\N	\N
168	6	ruby	difference-of-squares	2	hibernating	2015-12-04 17:35:19	2015-12-04 17:35:19	794358885a1bf23de6c97179	f	2015-12-21 09:52:56	2015-12-21 09:52:56	Submitted an iteration	\N	\N
169	6	cpp	bob	0	\N	2015-12-23 18:16:02	2015-12-23 18:16:02	e192811b08442a71b07b4d77	f	2015-12-23 18:16:02	2015-12-23 18:16:02	\N	\N	\N
170	6	scala	meetup	0	\N	2015-12-16 13:46:29	2015-12-16 13:46:29	ee73a94928cfffb18924eff1	f	2015-12-16 13:46:29	2015-12-16 13:46:29	\N	\N	\N
171	6	python	rna-transcription	1	pending	2015-12-06 00:52:16	2015-12-06 00:52:16	b57ad2bb576b09eeb23113fe	f	2015-12-09 06:04:43	2015-12-09 06:04:43	Submitted an iteration	\N	\N
172	34	python	hello-world	0	done	2015-11-15 18:58:01	2015-11-15 18:58:01	4d163c237a0cf4f91b91fac3	t	2015-11-15 18:58:01	2015-11-15 18:58:01	\N	\N	\N
173	16	clojure	bob	3	done	2015-10-29 02:45:35	2015-10-29 02:45:35	0a6c0b96ab9485681631abb3	t	2015-11-13 14:46:49	2015-11-13 14:46:49	Submitted an iteration	\N	\N
174	16	ruby	hamming	1	done	2015-10-15 19:08:23	2015-10-15 19:08:23	d378c41bfda6108d2cb42923	t	2015-11-11 19:56:00	2015-11-11 19:56:00	Submitted an iteration	\N	\N
175	18	ruby	grains	1	pending	2015-11-01 05:37:30	2015-11-01 05:37:30	8556194398be101262096da6	f	2015-12-23 04:21:39	2015-12-23 04:21:39	Submitted an iteration	\N	\N
176	18	python	anagram	1	pending	2015-07-20 16:14:33	2015-07-20 16:14:33	446561ae209a177dbef6b19f	f	2015-11-12 21:30:44	2015-11-12 21:30:44	Submitted an iteration	\N	\N
177	18	python	leap	2	done	2015-08-28 19:44:30	2015-08-28 19:44:30	5e5407c4a26addef42102c30	t	2015-11-22 14:16:36	2015-11-22 14:16:36	Submitted an iteration	\N	\N
178	18	perl5	proverb	1	pending	2015-09-19 17:49:30	2015-09-19 17:49:30	72423857b0bfaa5d4b78336a	f	2015-12-18 12:09:30	2015-12-18 12:09:30	Submitted an iteration	\N	\N
179	24	erlang	leap	0	\N	2015-09-24 21:48:58	2015-09-24 21:48:58	2c387890e89314687b9880cc	f	2015-09-24 21:48:58	2015-09-24 21:48:58	\N	\N	\N
180	24	swift	hello-world	0	\N	2015-11-22 22:05:02	2015-11-22 22:05:02	4bc0b9cf57aea41bb2db843d	f	2015-11-22 22:05:02	2015-11-22 22:05:02	\N	\N	\N
181	42	elixir	hello-world	0	done	2015-10-11 00:27:58	2015-10-11 00:27:58	31f00b9e9df6bf3ed9574542	t	2015-10-11 00:27:58	2015-10-11 00:27:58	\N	\N	\N
182	42	haskell	difference-of-squares	3	done	2015-06-11 00:30:22	2015-06-11 00:30:22	0f3824942425fd04034e9b2e	t	2015-11-15 00:25:14	2015-11-15 00:25:14	Submitted an iteration	\N	\N
183	27	coffeescript	hello-world	0	\N	2015-12-10 19:21:34	2015-12-10 19:21:34	4f27abb977107543a5dc36d6	f	2015-12-10 19:21:34	2015-12-10 19:21:34	\N	\N	\N
184	27	go	leap	2	done	2015-11-01 03:42:31	2015-11-01 03:42:31	3dd2ef68f7d37a91e45a76b7	t	2015-12-11 20:26:42	2015-12-11 20:26:42	Submitted an iteration	\N	\N
185	27	haskell	leap	3	done	2015-11-03 22:07:45	2015-11-03 22:07:45	b382561f0017854666e9dcb8	t	2015-12-09 00:22:38	2015-12-09 00:22:38	Submitted an iteration	\N	\N
186	45	python	kindergarten-garden	1	pending	2015-12-09 03:46:10	2015-12-09 03:46:10	b758a2f8e6d8ecf2e99d01ee	f	2015-12-24 05:05:50	2015-12-24 05:05:50	Submitted an iteration	\N	\N
\.


--
-- Name: user_exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('user_exercises_id_seq', 186, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY users (id, username, email, avatar_url, github_id, key, mastery, created_at, updated_at, onboarded_at) FROM stdin;
1	rikki-	rikki-@example.com	https://avatars.githubusercontent.com/u/8341419	8341419	dlp207	--- []\n	2015-08-11 07:26:29.34059	2015-08-11 07:26:29.34059	\N
6	amelie	amelie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/llun/128.jpg	-30499	wgk269	--- []\n	2015-11-30 19:27:35.366182	2015-11-30 19:27:35.366182	\N
7	beth	beth@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mat_walker/128.jpg	-20252	lgn709	--- []\n	2015-09-24 08:06:18.369499	2015-09-24 08:06:18.369499	\N
8	claire	claire@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sedovsek/128.jpg	-20649	qlx728	--- []\n	2015-07-15 08:22:57.372106	2015-07-15 08:22:57.372106	\N
10	eve	eve@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/d_nny_m_cher/128.jpg	-71810	qel136	--- []\n	2015-11-12 00:04:34.376763	2015-11-12 00:04:34.376763	\N
13	grace	grace@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mat_walker/128.jpg	-61969	thk807	--- []\n	2015-07-04 10:33:34.384589	2015-07-04 10:33:34.384589	\N
14	haley	haley@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg	-73321	ebe558	--- []\n	2015-09-28 22:22:29.387162	2015-09-28 22:22:29.387162	\N
16	jarrod	jarrod@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/VinThomas/128.jpg	-10944	hvq403	--- []\n	2015-10-10 13:34:14.393847	2015-10-10 13:34:14.393847	\N
17	kieran	kieran@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/LucasPerdidao/128.jpg	-48029	nxc706	--- []\n	2015-04-16 22:22:42.39691	2015-04-16 22:22:42.39691	\N
18	lisa	lisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mds/128.jpg	-81268	zcg760	--- []\n	2015-07-18 01:27:20.400175	2015-07-18 01:27:20.400175	\N
19	mack	mack@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/Karimmove/128.jpg	-12897	igy252	--- []\n	2015-09-02 11:01:33.403682	2015-09-02 11:01:33.403682	\N
20	madison	madison@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/tutsii159/128.jpg	-78882	knf120	--- []\n	2015-08-24 16:49:52.407378	2015-08-24 16:49:52.407378	\N
21	marshall	marshall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/iamgarth/128.jpg	-38851	pix922	--- []\n	2015-08-11 15:54:29.410488	2015-08-11 15:54:29.410488	\N
23	mia	mia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/blakesimkins/128.jpg	-50394	nan855	--- []\n	2015-09-09 23:45:04.416575	2015-09-09 23:45:04.416575	\N
24	mike	mike@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/salleedesign/128.jpg	-53445	hfq660	--- []\n	2015-09-09 21:27:54.419103	2015-09-09 21:27:54.419103	\N
25	mildred	mildred@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/prrstn/128.jpg	-95319	qkn136	--- []\n	2015-05-17 04:28:25.421693	2015-05-17 04:28:25.421693	\N
26	mitchell	mitchell@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/abotap/128.jpg	-16230	sey332	--- []\n	2015-04-09 03:24:47.424322	2015-04-09 03:24:47.424322	\N
27	morris	morris@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/claudioguglieri/128.jpg	-88297	dph637	--- []\n	2015-10-20 04:33:33.426894	2015-10-20 04:33:33.426894	\N
30	paula	paula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/nicolasfolliot/128.jpg	-62367	gda509	--- []\n	2015-04-17 03:43:32.434462	2015-04-17 03:43:32.434462	\N
32	rachel	rachel@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ehsandiary/128.jpg	-9675	nlx919	--- []\n	2015-09-10 18:43:35.444537	2015-09-10 18:43:35.444537	\N
34	rick	rick@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/tutsii159/128.jpg	-3216	xnp681	--- []\n	2015-09-27 03:14:54.450027	2015-09-27 03:14:54.450027	\N
35	rita	rita@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/buzzusborne/128.jpg	-71876	dhu579	--- []\n	2015-10-31 15:11:43.452504	2015-10-31 15:11:43.452504	\N
36	river	river@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/agromov/128.jpg	-24191	wnf501	--- []\n	2015-11-09 01:58:18.454984	2015-11-09 01:58:18.454984	\N
37	rolf	rolf@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/baliomega/128.jpg	-79399	onv571	--- []\n	2015-09-14 02:20:25.457483	2015-09-14 02:20:25.457483	\N
39	rudi	rudi@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jitachi/128.jpg	-7869	ahu149	--- []\n	2015-09-28 06:08:32.462458	2015-09-28 06:08:32.462458	\N
41	ryan	ryan@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ankitind/128.jpg	-36159	pis768	--- []\n	2015-04-05 05:43:41.466761	2015-04-05 05:43:41.466761	\N
42	shaina	shaina@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/giancarlon/128.jpg	-40995	lzu334	--- []\n	2015-05-19 04:42:54.469494	2015-05-19 04:42:54.469494	\N
43	talia	talia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/irae/128.jpg	-25977	qsz893	--- []\n	2015-04-19 07:47:10.472838	2015-04-19 07:47:10.472838	\N
45	vince	vince@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/vocino/128.jpg	-21945	kkl814	--- []\n	2015-11-26 19:13:29.47914	2015-11-26 19:13:29.47914	\N
47	xavier	xavier@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jamiebrittain/128.jpg	-12102	mie710	--- []\n	2015-11-07 14:22:34.484313	2015-11-07 14:22:34.484313	\N
3	bob	bob@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/aaronalfred/128.jpg	-78562	gzq429	---\n- ruby\n- haskell\n	2015-10-28 06:16:05.359853	2015-10-28 06:16:05.359853	2015-07-19 19:24:48
4	charlie	charlie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/shanehudson/128.jpg	-72782	eau837	---\n- javascript\n- erlang\n- elixir\n	2015-10-21 19:57:10.361964	2015-10-21 19:57:10.361964	2015-07-28 06:08:55
11	elisa	elisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/GavicoInd/128.jpg	-43773	jsv512	--- []\n	2015-05-28 22:09:05.378586	2015-05-28 22:09:05.378586	2015-08-27 22:07:16
29	opal	opal@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/roybarberuk/128.jpg	-2471	jeo300	--- []\n	2015-07-01 00:25:07.431965	2015-07-01 00:25:07.431965	2015-10-07 20:04:19
31	quentin	quentin@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/soffes/128.jpg	-8540	cuo907	--- []\n	2015-05-18 05:48:16.441056	2015-05-18 05:48:16.441056	2015-08-27 10:58:19
12	frederique	frederique@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/marcobarbosa/128.jpg	-58737	xgs985	--- []\n	2015-10-13 01:21:38.381279	2015-10-13 01:21:38.381279	2015-08-28 21:22:32
33	randall	randall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/brandclay/128.jpg	-98236	adf801	--- []\n	2015-09-28 12:43:13.447511	2015-09-28 12:43:13.447511	2015-09-12 02:23:26
40	russ	russ@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/uberschizo/128.jpg	-78062	umr874	--- []\n	2015-06-17 14:44:45.464092	2015-06-17 14:44:45.464092	2015-08-13 05:12:05
44	ursula	ursula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/iqonicd/128.jpg	-80374	hyy151	--- []\n	2015-06-04 16:55:56.476474	2015-06-04 16:55:56.476474	2015-08-22 21:27:50
22	mary	mary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kaelifa/128.jpg	-36680	bnw259	--- []\n	2015-04-14 11:36:44.413506	2015-04-14 11:36:44.413506	2015-08-03 13:58:06
46	wilson	wilson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/rude/128.jpg	-20536	fiu573	--- []\n	2015-05-27 08:13:51.481719	2015-05-27 08:13:51.481719	2015-10-05 14:20:45
5	diana	diana@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/michigangraham/128.jpg	-65566	grp237	---\n- python\n	2015-11-03 11:28:13.364091	2015-11-03 11:28:13.364091	2015-07-10 03:46:08
15	isaac	isaac@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jefffis/128.jpg	-31341	ndx659	--- []\n	2015-06-10 00:11:27.390161	2015-06-10 00:11:27.390161	2015-08-09 14:18:51
28	norma	norma@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/maximseshuk/128.jpg	-48980	dkp106	--- []\n	2015-04-07 10:30:26.429458	2015-04-07 10:30:26.429458	2015-10-10 02:04:23
38	ruben	ruben@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/chaensel/128.jpg	-65967	xus929	--- []\n	2015-07-02 05:13:27.459947	2015-07-02 05:13:27.459947	2015-08-20 02:56:45
49	zachary	zachary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/noxdzine/128.jpg	-60631	ygw478	--- []\n	2015-06-17 06:56:02.488987	2015-06-17 06:56:02.488987	\N
2	alice	alice@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sharvin/128.jpg	-49884	qnc808	---\n- clojure\n- coffeescript\n- elixir\n- go\n- haskell\n- javascript\n- objective-c\n- ocaml\n- perl5\n- python\n- ruby\n- scala\n	2015-07-06 09:07:32.357406	2015-07-06 09:07:32.357406	2015-10-20 18:15:33
48	yvette	yvette@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/rdsaunders/128.jpg	-9637	tzz278	--- []\n	2015-12-09 22:36:18.486027	2015-12-09 22:36:18.486027	2015-07-02 21:04:29
9	dawson	dawson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/duck4fuck/128.jpg	-7402	xfj390	--- []\n	2015-11-03 03:44:52.374067	2015-11-03 03:44:52.374067	2015-07-04 03:36:34
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('users_id_seq', 49, true);


--
-- Data for Name: views; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY views (id, user_id, exercise_id, last_viewed_at, created_at, updated_at) FROM stdin;
\.


--
-- Name: views_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('views_id_seq', 1, false);


--
-- PostgreSQL database dump complete
--

