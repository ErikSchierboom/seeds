--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

--
-- Data for Name: alerts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY alerts (id, user_id, text, url, link_text, read, created_at, updated_at) FROM stdin;
1	15	jarrod would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2013-12-17 03:11:03	2013-12-17 03:11:03
2	16	kieran would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2013-11-22 10:05:30	2013-11-22 10:05:30
3	28	opal would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-06-03 00:54:25	2014-06-03 00:54:25
4	31	rachel would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-31 08:09:01	2014-03-31 08:09:01
5	37	ruben would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-10 10:28:28	2014-03-10 10:28:28
6	41	shaina would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-06-17 01:50:58	2014-06-17 01:50:58
7	42	talia would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-07-13 06:33:31	2014-07-13 06:33:31
8	46	xavier would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-07-21 22:47:01	2014-07-21 22:47:01
9	18	mack would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-07-14 17:30:31	2014-07-14 17:30:31
10	37	ruben would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-07-23 13:42:06	2014-07-23 13:42:06
11	37	ruben would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-06-30 21:10:10	2014-06-30 21:10:10
12	2	bob would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-06-26 14:30:57	2014-06-26 14:30:57
13	37	ruben would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-05-07 12:28:26	2014-05-07 12:28:26
14	11	frederique would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-04-19 04:37:24	2014-04-19 04:37:24
15	13	haley would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-04-26 14:03:01	2014-04-26 14:03:01
16	40	ryan would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-04-22 12:33:14	2014-04-22 12:33:14
17	37	ruben would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-04-28 01:59:49	2014-04-28 01:59:49
18	2	bob would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-05-04 18:03:07	2014-05-04 18:03:07
19	37	ruben would like you to join the team polkadots. You can accept the invitation	/account	on your account page.	f	2014-05-04 18:20:15	2014-05-04 18:20:15
\.


--
-- Name: alerts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('alerts_id_seq', 19, true);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comments (id, user_id, submission_id, body, html_body, created_at, updated_at) FROM stdin;
1	8	1	A COMMENT	\N	2014-07-12 13:25:12	2014-07-12 13:25:12
2	28	1	A COMMENT	\N	2014-07-15 09:58:37	2014-07-15 09:58:37
3	10	1	A COMMENT	\N	2014-07-18 08:51:47	2014-07-18 08:51:47
4	39	1	A COMMENT	\N	2014-07-18 18:29:37	2014-07-18 18:29:37
5	43	1	A COMMENT	\N	2014-07-20 10:25:11	2014-07-20 10:25:11
6	30	1	A COMMENT	\N	2014-07-26 09:07:43	2014-07-26 09:07:43
7	1	2	A COMMENT	\N	2014-07-20 00:25:53	2014-07-20 00:25:53
8	8	3	A COMMENT	\N	2014-07-17 15:53:52	2014-07-17 15:53:52
9	8	4	A COMMENT	\N	2014-07-09 21:58:32	2014-07-09 21:58:32
10	27	4	A COMMENT	\N	2014-07-11 21:40:13	2014-07-11 21:40:13
11	4	4	A COMMENT	\N	2014-07-15 01:22:19	2014-07-15 01:22:19
12	3	4	A COMMENT	\N	2014-07-16 13:06:07	2014-07-16 13:06:07
13	11	4	A COMMENT	\N	2014-07-21 16:12:00	2014-07-21 16:12:00
14	27	5	A COMMENT	\N	2014-07-13 13:01:24	2014-07-13 13:01:24
15	8	5	A COMMENT	\N	2014-07-15 10:58:07	2014-07-15 10:58:07
16	3	5	A COMMENT	\N	2014-07-18 19:28:37	2014-07-18 19:28:37
17	47	5	A COMMENT	\N	2014-07-18 23:44:31	2014-07-18 23:44:31
18	37	5	A COMMENT	\N	2014-07-20 22:08:27	2014-07-20 22:08:27
19	8	6	A COMMENT	\N	2014-07-17 23:27:59	2014-07-17 23:27:59
20	8	7	A COMMENT	\N	2014-07-23 22:57:38	2014-07-23 22:57:38
21	27	7	A COMMENT	\N	2014-07-24 01:04:08	2014-07-24 01:04:08
22	32	7	A COMMENT	\N	2014-07-24 03:43:13	2014-07-24 03:43:13
23	10	7	A COMMENT	\N	2014-07-24 08:13:42	2014-07-24 08:13:42
24	1	7	A COMMENT	\N	2014-07-25 09:29:02	2014-07-25 09:29:02
25	1	7	A COMMENT	\N	2014-07-25 13:31:57	2014-07-25 13:31:57
26	21	7	A COMMENT	\N	2014-07-26 08:39:32	2014-07-26 08:39:32
27	8	8	A COMMENT	\N	2014-07-15 14:08:02	2014-07-15 14:08:02
28	47	9	A COMMENT	\N	2014-07-26 03:47:35	2014-07-26 03:47:35
29	37	11	A COMMENT	\N	2014-07-08 08:20:03	2014-07-08 08:20:03
30	1	11	A COMMENT	\N	2014-07-11 18:23:21	2014-07-11 18:23:21
31	32	11	A COMMENT	\N	2014-07-14 00:20:53	2014-07-14 00:20:53
32	43	11	A COMMENT	\N	2014-07-14 20:22:11	2014-07-14 20:22:11
33	8	11	A COMMENT	\N	2014-07-16 13:48:21	2014-07-16 13:48:21
34	2	11	A COMMENT	\N	2014-07-17 07:58:24	2014-07-17 07:58:24
35	32	11	A COMMENT	\N	2014-07-17 18:25:50	2014-07-17 18:25:50
36	21	11	A COMMENT	\N	2014-07-23 04:04:11	2014-07-23 04:04:11
37	4	11	A COMMENT	\N	2014-07-25 06:30:02	2014-07-25 06:30:02
38	2	11	A COMMENT	\N	2014-07-25 19:07:32	2014-07-25 19:07:32
39	8	12	A COMMENT	\N	2014-07-06 18:48:18	2014-07-06 18:48:18
40	21	12	A COMMENT	\N	2014-07-23 19:38:03	2014-07-23 19:38:03
41	11	13	A COMMENT	\N	2014-07-17 18:27:12	2014-07-17 18:27:12
42	21	13	A COMMENT	\N	2014-07-19 08:07:49	2014-07-19 08:07:49
43	11	15	A COMMENT	\N	2014-07-12 09:09:51	2014-07-12 09:09:51
44	47	15	A COMMENT	\N	2014-07-13 06:34:27	2014-07-13 06:34:27
45	27	15	A COMMENT	\N	2014-07-14 07:57:43	2014-07-14 07:57:43
46	1	15	A COMMENT	\N	2014-07-24 02:08:29	2014-07-24 02:08:29
47	43	16	A COMMENT	\N	2014-07-17 03:50:08	2014-07-17 03:50:08
48	14	16	A COMMENT	\N	2014-07-22 10:31:23	2014-07-22 10:31:23
49	3	16	A COMMENT	\N	2014-07-24 22:11:31	2014-07-24 22:11:31
50	30	17	A COMMENT	\N	2014-07-23 14:34:53	2014-07-23 14:34:53
51	21	17	A COMMENT	\N	2014-07-24 00:52:59	2014-07-24 00:52:59
52	37	17	A COMMENT	\N	2014-07-24 16:34:15	2014-07-24 16:34:15
53	45	17	A COMMENT	\N	2014-07-25 07:06:21	2014-07-25 07:06:21
54	32	17	A COMMENT	\N	2014-07-26 10:38:29	2014-07-26 10:38:29
55	8	18	A COMMENT	\N	2014-07-09 10:42:31	2014-07-09 10:42:31
56	27	18	A COMMENT	\N	2014-07-18 00:41:15	2014-07-18 00:41:15
57	1	18	A COMMENT	\N	2014-07-19 13:07:44	2014-07-19 13:07:44
58	8	19	A COMMENT	\N	2014-07-07 21:55:32	2014-07-07 21:55:32
59	1	19	A COMMENT	\N	2014-07-10 00:21:41	2014-07-10 00:21:41
60	32	19	A COMMENT	\N	2014-07-14 17:28:27	2014-07-14 17:28:27
61	30	19	A COMMENT	\N	2014-07-17 00:20:47	2014-07-17 00:20:47
62	32	19	A COMMENT	\N	2014-07-18 17:09:50	2014-07-18 17:09:50
63	45	19	A COMMENT	\N	2014-07-18 17:42:58	2014-07-18 17:42:58
64	11	19	A COMMENT	\N	2014-07-19 12:10:14	2014-07-19 12:10:14
65	37	19	A COMMENT	\N	2014-07-19 15:41:37	2014-07-19 15:41:37
66	21	19	A COMMENT	\N	2014-07-21 04:46:53	2014-07-21 04:46:53
67	37	19	A COMMENT	\N	2014-07-22 11:24:51	2014-07-22 11:24:51
68	47	20	A COMMENT	\N	2014-07-08 16:21:42	2014-07-08 16:21:42
69	14	20	A COMMENT	\N	2014-07-09 11:04:22	2014-07-09 11:04:22
70	30	20	A COMMENT	\N	2014-07-13 08:05:18	2014-07-13 08:05:18
71	32	20	A COMMENT	\N	2014-07-18 07:53:48	2014-07-18 07:53:48
72	32	20	A COMMENT	\N	2014-07-21 19:04:20	2014-07-21 19:04:20
73	47	22	A COMMENT	\N	2014-07-16 05:02:06	2014-07-16 05:02:06
74	10	22	A COMMENT	\N	2014-07-16 14:43:28	2014-07-16 14:43:28
75	43	22	A COMMENT	\N	2014-07-17 15:07:34	2014-07-17 15:07:34
76	30	22	A COMMENT	\N	2014-07-24 04:04:54	2014-07-24 04:04:54
77	11	22	A COMMENT	\N	2014-07-24 23:50:54	2014-07-24 23:50:54
78	2	23	A COMMENT	\N	2014-07-18 15:32:03	2014-07-18 15:32:03
79	4	23	A COMMENT	\N	2014-07-19 03:44:12	2014-07-19 03:44:12
80	27	23	A COMMENT	\N	2014-07-19 06:08:47	2014-07-19 06:08:47
81	1	23	A COMMENT	\N	2014-07-24 00:44:11	2014-07-24 00:44:11
82	37	23	A COMMENT	\N	2014-07-25 09:20:18	2014-07-25 09:20:18
83	8	24	A COMMENT	\N	2014-07-21 22:51:05	2014-07-21 22:51:05
84	11	24	A COMMENT	\N	2014-07-22 01:03:49	2014-07-22 01:03:49
85	28	24	A COMMENT	\N	2014-07-22 02:36:30	2014-07-22 02:36:30
86	21	24	A COMMENT	\N	2014-07-22 03:10:22	2014-07-22 03:10:22
87	28	24	A COMMENT	\N	2014-07-22 09:22:11	2014-07-22 09:22:11
88	3	24	A COMMENT	\N	2014-07-22 17:08:00	2014-07-22 17:08:00
89	43	24	A COMMENT	\N	2014-07-22 22:19:01	2014-07-22 22:19:01
90	43	24	A COMMENT	\N	2014-07-23 01:19:10	2014-07-23 01:19:10
91	1	24	A COMMENT	\N	2014-07-23 05:55:15	2014-07-23 05:55:15
92	3	24	A COMMENT	\N	2014-07-23 11:33:27	2014-07-23 11:33:27
93	8	24	A COMMENT	\N	2014-07-23 11:51:14	2014-07-23 11:51:14
94	10	24	A COMMENT	\N	2014-07-23 15:41:47	2014-07-23 15:41:47
95	2	24	A COMMENT	\N	2014-07-23 23:17:38	2014-07-23 23:17:38
96	30	24	A COMMENT	\N	2014-07-24 02:27:07	2014-07-24 02:27:07
97	4	24	A COMMENT	\N	2014-07-24 05:48:29	2014-07-24 05:48:29
98	45	24	A COMMENT	\N	2014-07-24 23:06:00	2014-07-24 23:06:00
99	30	24	A COMMENT	\N	2014-07-24 23:30:47	2014-07-24 23:30:47
100	4	24	A COMMENT	\N	2014-07-26 03:46:06	2014-07-26 03:46:06
101	14	24	A COMMENT	\N	2014-07-26 09:25:46	2014-07-26 09:25:46
102	37	24	A COMMENT	\N	2014-07-26 17:12:01	2014-07-26 17:12:01
103	10	25	A COMMENT	\N	2014-07-24 12:47:23	2014-07-24 12:47:23
104	21	25	A COMMENT	\N	2014-07-24 22:17:21	2014-07-24 22:17:21
105	43	25	A COMMENT	\N	2014-07-24 22:53:45	2014-07-24 22:53:45
106	4	25	A COMMENT	\N	2014-07-25 12:19:57	2014-07-25 12:19:57
107	47	25	A COMMENT	\N	2014-07-26 10:44:02	2014-07-26 10:44:02
108	8	26	A COMMENT	\N	2014-07-10 09:56:55	2014-07-10 09:56:55
109	43	26	A COMMENT	\N	2014-07-10 22:24:11	2014-07-10 22:24:11
110	39	26	A COMMENT	\N	2014-07-18 01:26:40	2014-07-18 01:26:40
111	45	26	A COMMENT	\N	2014-07-19 06:02:01	2014-07-19 06:02:01
112	21	26	A COMMENT	\N	2014-07-22 00:17:37	2014-07-22 00:17:37
113	3	28	A COMMENT	\N	2014-07-10 16:16:43	2014-07-10 16:16:43
114	21	28	A COMMENT	\N	2014-07-13 22:08:30	2014-07-13 22:08:30
115	11	28	A COMMENT	\N	2014-07-16 08:21:31	2014-07-16 08:21:31
116	4	28	A COMMENT	\N	2014-07-21 08:57:03	2014-07-21 08:57:03
117	10	28	A COMMENT	\N	2014-07-25 22:51:06	2014-07-25 22:51:06
118	1	29	A COMMENT	\N	2014-07-22 11:32:30	2014-07-22 11:32:30
119	28	29	A COMMENT	\N	2014-07-23 05:03:16	2014-07-23 05:03:16
120	37	29	A COMMENT	\N	2014-07-23 16:20:20	2014-07-23 16:20:20
121	3	29	A COMMENT	\N	2014-07-24 21:15:18	2014-07-24 21:15:18
122	45	29	A COMMENT	\N	2014-07-25 03:24:48	2014-07-25 03:24:48
123	4	29	A COMMENT	\N	2014-07-26 11:42:13	2014-07-26 11:42:13
124	27	31	A COMMENT	\N	2014-06-30 01:22:52	2014-06-30 01:22:52
125	28	31	A COMMENT	\N	2014-07-10 02:28:52	2014-07-10 02:28:52
126	1	31	A COMMENT	\N	2014-07-16 11:07:55	2014-07-16 11:07:55
127	3	31	A COMMENT	\N	2014-07-17 00:24:46	2014-07-17 00:24:46
128	14	31	A COMMENT	\N	2014-07-20 23:55:37	2014-07-20 23:55:37
129	11	31	A COMMENT	\N	2014-07-23 23:33:01	2014-07-23 23:33:01
130	37	32	A COMMENT	\N	2014-07-02 06:50:44	2014-07-02 06:50:44
131	1	32	A COMMENT	\N	2014-07-03 14:32:59	2014-07-03 14:32:59
132	2	32	A COMMENT	\N	2014-07-06 08:04:33	2014-07-06 08:04:33
133	11	32	A COMMENT	\N	2014-07-08 23:21:58	2014-07-08 23:21:58
134	30	32	A COMMENT	\N	2014-07-12 01:11:34	2014-07-12 01:11:34
135	30	32	A COMMENT	\N	2014-07-16 04:01:24	2014-07-16 04:01:24
136	30	32	A COMMENT	\N	2014-07-16 16:07:51	2014-07-16 16:07:51
137	43	32	A COMMENT	\N	2014-07-18 23:43:19	2014-07-18 23:43:19
138	39	32	A COMMENT	\N	2014-07-21 20:25:04	2014-07-21 20:25:04
139	14	32	A COMMENT	\N	2014-07-26 13:55:59	2014-07-26 13:55:59
140	30	33	A COMMENT	\N	2014-07-05 19:52:12	2014-07-05 19:52:12
141	47	33	A COMMENT	\N	2014-07-15 02:34:54	2014-07-15 02:34:54
142	2	33	A COMMENT	\N	2014-07-16 05:09:58	2014-07-16 05:09:58
143	32	33	A COMMENT	\N	2014-07-16 18:36:58	2014-07-16 18:36:58
144	39	33	A COMMENT	\N	2014-07-19 14:58:36	2014-07-19 14:58:36
145	27	33	A COMMENT	\N	2014-07-23 06:57:49	2014-07-23 06:57:49
146	28	33	A COMMENT	\N	2014-07-25 10:05:32	2014-07-25 10:05:32
147	2	33	A COMMENT	\N	2014-07-26 05:11:04	2014-07-26 05:11:04
148	39	34	A COMMENT	\N	2014-07-17 17:02:44	2014-07-17 17:02:44
149	4	34	A COMMENT	\N	2014-07-17 22:21:14	2014-07-17 22:21:14
150	30	34	A COMMENT	\N	2014-07-18 13:37:45	2014-07-18 13:37:45
151	45	34	A COMMENT	\N	2014-07-21 13:05:40	2014-07-21 13:05:40
152	11	34	A COMMENT	\N	2014-07-25 03:56:46	2014-07-25 03:56:46
153	10	35	A COMMENT	\N	2014-07-18 12:18:19	2014-07-18 12:18:19
154	14	35	A COMMENT	\N	2014-07-20 12:44:23	2014-07-20 12:44:23
155	37	35	A COMMENT	\N	2014-07-20 12:45:59	2014-07-20 12:45:59
156	43	35	A COMMENT	\N	2014-07-21 15:36:54	2014-07-21 15:36:54
157	4	35	A COMMENT	\N	2014-07-22 17:11:31	2014-07-22 17:11:31
158	47	35	A COMMENT	\N	2014-07-25 04:55:42	2014-07-25 04:55:42
159	45	35	A COMMENT	\N	2014-07-25 13:57:17	2014-07-25 13:57:17
160	10	36	A COMMENT	\N	2014-07-10 17:41:12	2014-07-10 17:41:12
161	4	37	A COMMENT	\N	2014-07-15 02:16:26	2014-07-15 02:16:26
162	32	39	A COMMENT	\N	2014-07-03 08:16:17	2014-07-03 08:16:17
163	10	39	A COMMENT	\N	2014-07-12 11:46:47	2014-07-12 11:46:47
164	43	39	A COMMENT	\N	2014-07-19 04:35:23	2014-07-19 04:35:23
165	28	39	A COMMENT	\N	2014-07-21 06:08:07	2014-07-21 06:08:07
166	43	40	A COMMENT	\N	2014-07-16 14:11:59	2014-07-16 14:11:59
167	4	40	A COMMENT	\N	2014-07-17 07:43:13	2014-07-17 07:43:13
168	1	40	A COMMENT	\N	2014-07-18 15:45:40	2014-07-18 15:45:40
169	2	40	A COMMENT	\N	2014-07-20 00:27:59	2014-07-20 00:27:59
170	30	40	A COMMENT	\N	2014-07-21 02:16:44	2014-07-21 02:16:44
171	11	40	A COMMENT	\N	2014-07-22 17:19:19	2014-07-22 17:19:19
172	45	40	A COMMENT	\N	2014-07-22 18:46:46	2014-07-22 18:46:46
173	32	40	A COMMENT	\N	2014-07-22 19:01:16	2014-07-22 19:01:16
174	37	40	A COMMENT	\N	2014-07-22 21:00:05	2014-07-22 21:00:05
175	27	40	A COMMENT	\N	2014-07-26 10:58:17	2014-07-26 10:58:17
176	21	41	A COMMENT	\N	2014-07-23 07:36:36	2014-07-23 07:36:36
177	37	41	A COMMENT	\N	2014-07-23 22:55:48	2014-07-23 22:55:48
178	10	41	A COMMENT	\N	2014-07-24 08:29:32	2014-07-24 08:29:32
179	8	41	A COMMENT	\N	2014-07-24 15:38:40	2014-07-24 15:38:40
180	4	41	A COMMENT	\N	2014-07-25 12:36:35	2014-07-25 12:36:35
181	10	41	A COMMENT	\N	2014-07-25 15:14:22	2014-07-25 15:14:22
182	30	41	A COMMENT	\N	2014-07-26 07:07:03	2014-07-26 07:07:03
183	39	41	A COMMENT	\N	2014-07-26 16:49:52	2014-07-26 16:49:52
184	45	43	A COMMENT	\N	2014-07-02 12:35:04	2014-07-02 12:35:04
185	43	43	A COMMENT	\N	2014-07-03 15:38:21	2014-07-03 15:38:21
186	8	43	A COMMENT	\N	2014-07-05 16:03:31	2014-07-05 16:03:31
187	47	43	A COMMENT	\N	2014-07-07 08:55:22	2014-07-07 08:55:22
188	3	43	A COMMENT	\N	2014-07-10 07:28:50	2014-07-10 07:28:50
189	14	43	A COMMENT	\N	2014-07-21 07:15:33	2014-07-21 07:15:33
190	10	44	A COMMENT	\N	2014-06-27 00:05:45	2014-06-27 00:05:45
191	2	44	A COMMENT	\N	2014-06-27 10:49:07	2014-06-27 10:49:07
192	28	44	A COMMENT	\N	2014-06-29 13:40:33	2014-06-29 13:40:33
193	4	44	A COMMENT	\N	2014-07-02 13:06:49	2014-07-02 13:06:49
194	27	44	A COMMENT	\N	2014-07-04 09:03:03	2014-07-04 09:03:03
195	39	44	A COMMENT	\N	2014-07-08 19:32:36	2014-07-08 19:32:36
196	45	44	A COMMENT	\N	2014-07-09 22:39:27	2014-07-09 22:39:27
197	32	44	A COMMENT	\N	2014-07-10 08:14:00	2014-07-10 08:14:00
198	11	44	A COMMENT	\N	2014-07-12 09:14:53	2014-07-12 09:14:53
199	14	44	A COMMENT	\N	2014-07-13 06:39:34	2014-07-13 06:39:34
200	1	44	A COMMENT	\N	2014-07-15 23:40:09	2014-07-15 23:40:09
201	10	44	A COMMENT	\N	2014-07-17 07:35:46	2014-07-17 07:35:46
202	28	44	A COMMENT	\N	2014-07-19 12:03:27	2014-07-19 12:03:27
203	3	44	A COMMENT	\N	2014-07-20 23:12:37	2014-07-20 23:12:37
204	45	44	A COMMENT	\N	2014-07-22 19:51:28	2014-07-22 19:51:28
205	45	44	A COMMENT	\N	2014-07-24 23:08:51	2014-07-24 23:08:51
206	37	45	A COMMENT	\N	2014-07-20 06:05:30	2014-07-20 06:05:30
207	3	45	A COMMENT	\N	2014-07-21 08:27:59	2014-07-21 08:27:59
208	45	45	A COMMENT	\N	2014-07-21 11:01:22	2014-07-21 11:01:22
209	2	45	A COMMENT	\N	2014-07-22 06:31:45	2014-07-22 06:31:45
210	47	45	A COMMENT	\N	2014-07-22 13:33:08	2014-07-22 13:33:08
211	21	45	A COMMENT	\N	2014-07-22 14:10:54	2014-07-22 14:10:54
212	39	45	A COMMENT	\N	2014-07-22 22:59:55	2014-07-22 22:59:55
213	39	45	A COMMENT	\N	2014-07-23 15:19:56	2014-07-23 15:19:56
214	30	45	A COMMENT	\N	2014-07-23 15:39:37	2014-07-23 15:39:37
215	28	45	A COMMENT	\N	2014-07-23 16:42:44	2014-07-23 16:42:44
216	4	45	A COMMENT	\N	2014-07-24 05:25:39	2014-07-24 05:25:39
217	4	45	A COMMENT	\N	2014-07-24 11:22:40	2014-07-24 11:22:40
218	14	45	A COMMENT	\N	2014-07-24 22:56:07	2014-07-24 22:56:07
219	3	45	A COMMENT	\N	2014-07-25 10:09:02	2014-07-25 10:09:02
220	32	45	A COMMENT	\N	2014-07-25 10:14:27	2014-07-25 10:14:27
221	45	45	A COMMENT	\N	2014-07-25 11:08:23	2014-07-25 11:08:23
222	32	45	A COMMENT	\N	2014-07-25 13:52:33	2014-07-25 13:52:33
223	28	45	A COMMENT	\N	2014-07-26 05:21:38	2014-07-26 05:21:38
224	32	45	A COMMENT	\N	2014-07-26 06:14:19	2014-07-26 06:14:19
225	1	45	A COMMENT	\N	2014-07-26 10:44:44	2014-07-26 10:44:44
226	10	46	A COMMENT	\N	2014-07-09 12:08:46	2014-07-09 12:08:46
227	10	47	A COMMENT	\N	2014-07-04 01:03:05	2014-07-04 01:03:05
228	10	47	A COMMENT	\N	2014-07-09 09:00:17	2014-07-09 09:00:17
229	27	47	A COMMENT	\N	2014-07-12 17:33:05	2014-07-12 17:33:05
230	39	47	A COMMENT	\N	2014-07-13 00:40:57	2014-07-13 00:40:57
231	32	47	A COMMENT	\N	2014-07-13 20:15:28	2014-07-13 20:15:28
232	39	47	A COMMENT	\N	2014-07-17 14:32:39	2014-07-17 14:32:39
233	11	47	A COMMENT	\N	2014-07-19 20:36:53	2014-07-19 20:36:53
234	32	47	A COMMENT	\N	2014-07-21 00:45:26	2014-07-21 00:45:26
235	47	47	A COMMENT	\N	2014-07-21 16:33:30	2014-07-21 16:33:30
236	8	47	A COMMENT	\N	2014-07-24 09:06:23	2014-07-24 09:06:23
237	47	47	A COMMENT	\N	2014-07-25 21:12:34	2014-07-25 21:12:34
238	37	47	A COMMENT	\N	2014-07-26 16:03:42	2014-07-26 16:03:42
239	47	48	A COMMENT	\N	2014-07-15 15:59:50	2014-07-15 15:59:50
240	21	48	A COMMENT	\N	2014-07-21 01:16:34	2014-07-21 01:16:34
241	30	48	A COMMENT	\N	2014-07-22 13:53:55	2014-07-22 13:53:55
242	47	51	A COMMENT	\N	2014-07-10 04:47:30	2014-07-10 04:47:30
243	43	51	A COMMENT	\N	2014-07-12 17:49:42	2014-07-12 17:49:42
244	3	51	A COMMENT	\N	2014-07-23 10:58:52	2014-07-23 10:58:52
245	2	52	A COMMENT	\N	2014-07-26 02:59:31	2014-07-26 02:59:31
246	10	54	A COMMENT	\N	2014-07-20 18:47:38	2014-07-20 18:47:38
247	27	55	A COMMENT	\N	2014-07-05 23:02:00	2014-07-05 23:02:00
248	3	55	A COMMENT	\N	2014-07-07 02:41:41	2014-07-07 02:41:41
249	21	55	A COMMENT	\N	2014-07-11 11:21:26	2014-07-11 11:21:26
250	32	55	A COMMENT	\N	2014-07-18 06:24:42	2014-07-18 06:24:42
251	43	55	A COMMENT	\N	2014-07-19 03:21:43	2014-07-19 03:21:43
252	10	56	A COMMENT	\N	2014-06-30 03:16:35	2014-06-30 03:16:35
253	30	56	A COMMENT	\N	2014-07-15 13:20:45	2014-07-15 13:20:45
254	45	57	A COMMENT	\N	2014-07-11 08:23:37	2014-07-11 08:23:37
255	14	57	A COMMENT	\N	2014-07-12 12:12:25	2014-07-12 12:12:25
256	21	57	A COMMENT	\N	2014-07-13 22:50:34	2014-07-13 22:50:34
257	30	57	A COMMENT	\N	2014-07-14 08:48:58	2014-07-14 08:48:58
258	37	57	A COMMENT	\N	2014-07-15 13:31:03	2014-07-15 13:31:03
259	14	57	A COMMENT	\N	2014-07-19 06:23:26	2014-07-19 06:23:26
260	3	57	A COMMENT	\N	2014-07-21 16:30:51	2014-07-21 16:30:51
261	8	57	A COMMENT	\N	2014-07-21 19:56:50	2014-07-21 19:56:50
262	37	58	A COMMENT	\N	2014-07-06 05:44:52	2014-07-06 05:44:52
263	3	58	A COMMENT	\N	2014-07-15 22:37:52	2014-07-15 22:37:52
264	39	58	A COMMENT	\N	2014-07-21 09:19:41	2014-07-21 09:19:41
265	10	59	A COMMENT	\N	2014-06-27 11:27:33	2014-06-27 11:27:33
266	37	59	A COMMENT	\N	2014-06-30 00:28:30	2014-06-30 00:28:30
267	27	59	A COMMENT	\N	2014-06-30 17:11:42	2014-06-30 17:11:42
268	39	59	A COMMENT	\N	2014-07-05 11:05:01	2014-07-05 11:05:01
269	32	59	A COMMENT	\N	2014-07-08 02:18:52	2014-07-08 02:18:52
270	47	59	A COMMENT	\N	2014-07-10 01:02:52	2014-07-10 01:02:52
271	45	59	A COMMENT	\N	2014-07-10 10:18:07	2014-07-10 10:18:07
272	28	59	A COMMENT	\N	2014-07-11 23:30:15	2014-07-11 23:30:15
273	10	59	A COMMENT	\N	2014-07-13 04:50:39	2014-07-13 04:50:39
274	8	59	A COMMENT	\N	2014-07-13 20:39:48	2014-07-13 20:39:48
275	1	59	A COMMENT	\N	2014-07-17 13:11:52	2014-07-17 13:11:52
276	10	59	A COMMENT	\N	2014-07-18 22:00:11	2014-07-18 22:00:11
277	30	59	A COMMENT	\N	2014-07-21 06:08:35	2014-07-21 06:08:35
278	37	59	A COMMENT	\N	2014-07-21 10:43:51	2014-07-21 10:43:51
279	10	60	A COMMENT	\N	2014-06-27 22:35:39	2014-06-27 22:35:39
280	43	60	A COMMENT	\N	2014-06-28 14:38:33	2014-06-28 14:38:33
281	32	62	A COMMENT	\N	2014-07-07 00:21:04	2014-07-07 00:21:04
282	30	62	A COMMENT	\N	2014-07-08 06:51:39	2014-07-08 06:51:39
283	14	62	A COMMENT	\N	2014-07-09 19:55:22	2014-07-09 19:55:22
284	2	62	A COMMENT	\N	2014-07-13 05:20:53	2014-07-13 05:20:53
285	14	62	A COMMENT	\N	2014-07-16 02:05:09	2014-07-16 02:05:09
286	39	62	A COMMENT	\N	2014-07-17 15:19:34	2014-07-17 15:19:34
287	27	62	A COMMENT	\N	2014-07-18 03:23:47	2014-07-18 03:23:47
288	2	62	A COMMENT	\N	2014-07-23 14:09:53	2014-07-23 14:09:53
289	32	62	A COMMENT	\N	2014-07-23 20:04:53	2014-07-23 20:04:53
290	10	63	A COMMENT	\N	2014-06-29 22:41:09	2014-06-29 22:41:09
291	39	63	A COMMENT	\N	2014-07-01 14:08:38	2014-07-01 14:08:38
292	30	63	A COMMENT	\N	2014-07-03 21:26:29	2014-07-03 21:26:29
293	21	63	A COMMENT	\N	2014-07-19 17:33:28	2014-07-19 17:33:28
294	3	63	A COMMENT	\N	2014-07-19 17:42:44	2014-07-19 17:42:44
295	39	63	A COMMENT	\N	2014-07-20 10:24:51	2014-07-20 10:24:51
296	21	63	A COMMENT	\N	2014-07-21 13:45:10	2014-07-21 13:45:10
297	10	65	A COMMENT	\N	2014-06-29 19:20:38	2014-06-29 19:20:38
298	43	65	A COMMENT	\N	2014-06-30 03:20:33	2014-06-30 03:20:33
299	14	65	A COMMENT	\N	2014-07-02 00:08:38	2014-07-02 00:08:38
300	10	66	A COMMENT	\N	2014-07-11 07:29:11	2014-07-11 07:29:11
301	10	66	A COMMENT	\N	2014-07-11 10:24:37	2014-07-11 10:24:37
302	1	66	A COMMENT	\N	2014-07-11 15:49:34	2014-07-11 15:49:34
303	30	66	A COMMENT	\N	2014-07-12 03:14:41	2014-07-12 03:14:41
304	45	66	A COMMENT	\N	2014-07-12 08:10:58	2014-07-12 08:10:58
305	14	66	A COMMENT	\N	2014-07-12 17:25:10	2014-07-12 17:25:10
306	4	66	A COMMENT	\N	2014-07-13 10:46:34	2014-07-13 10:46:34
307	45	66	A COMMENT	\N	2014-07-13 14:54:13	2014-07-13 14:54:13
308	11	66	A COMMENT	\N	2014-07-16 13:33:52	2014-07-16 13:33:52
309	11	66	A COMMENT	\N	2014-07-16 16:26:29	2014-07-16 16:26:29
310	45	66	A COMMENT	\N	2014-07-16 18:34:20	2014-07-16 18:34:20
311	4	66	A COMMENT	\N	2014-07-17 16:08:49	2014-07-17 16:08:49
312	2	66	A COMMENT	\N	2014-07-18 18:14:23	2014-07-18 18:14:23
313	21	66	A COMMENT	\N	2014-07-19 00:39:13	2014-07-19 00:39:13
314	30	66	A COMMENT	\N	2014-07-20 03:34:55	2014-07-20 03:34:55
315	30	66	A COMMENT	\N	2014-07-21 09:48:11	2014-07-21 09:48:11
316	11	66	A COMMENT	\N	2014-07-22 04:03:03	2014-07-22 04:03:03
317	43	66	A COMMENT	\N	2014-07-22 06:46:42	2014-07-22 06:46:42
318	27	66	A COMMENT	\N	2014-07-22 23:09:49	2014-07-22 23:09:49
319	37	66	A COMMENT	\N	2014-07-24 14:18:59	2014-07-24 14:18:59
320	32	66	A COMMENT	\N	2014-07-24 20:25:17	2014-07-24 20:25:17
321	27	68	A COMMENT	\N	2014-06-30 07:04:05	2014-06-30 07:04:05
322	32	68	A COMMENT	\N	2014-07-14 05:36:09	2014-07-14 05:36:09
323	14	68	A COMMENT	\N	2014-07-17 21:03:43	2014-07-17 21:03:43
324	14	68	A COMMENT	\N	2014-07-19 13:32:17	2014-07-19 13:32:17
325	3	68	A COMMENT	\N	2014-07-19 13:39:23	2014-07-19 13:39:23
326	28	70	A COMMENT	\N	2014-05-11 23:30:58	2014-05-11 23:30:58
327	30	70	A COMMENT	\N	2014-07-12 03:57:44	2014-07-12 03:57:44
328	1	70	A COMMENT	\N	2014-07-19 06:20:18	2014-07-19 06:20:18
329	37	71	A COMMENT	\N	2014-04-12 22:56:37	2014-04-12 22:56:37
330	10	71	A COMMENT	\N	2014-05-06 06:13:55	2014-05-06 06:13:55
331	11	71	A COMMENT	\N	2014-06-06 19:07:28	2014-06-06 19:07:28
332	43	71	A COMMENT	\N	2014-06-12 11:30:21	2014-06-12 11:30:21
333	4	71	A COMMENT	\N	2014-07-14 17:12:08	2014-07-14 17:12:08
334	47	71	A COMMENT	\N	2014-07-23 11:12:08	2014-07-23 11:12:08
335	14	72	A COMMENT	\N	2014-01-09 05:02:17	2014-01-09 05:02:17
336	14	73	A COMMENT	\N	2014-03-28 22:22:35	2014-03-28 22:22:35
337	1	73	A COMMENT	\N	2014-04-05 10:57:29	2014-04-05 10:57:29
338	43	73	A COMMENT	\N	2014-04-14 13:19:20	2014-04-14 13:19:20
339	21	73	A COMMENT	\N	2014-04-15 07:52:18	2014-04-15 07:52:18
340	32	73	A COMMENT	\N	2014-05-05 09:08:23	2014-05-05 09:08:23
341	21	73	A COMMENT	\N	2014-05-29 08:40:24	2014-05-29 08:40:24
342	3	73	A COMMENT	\N	2014-06-24 21:40:26	2014-06-24 21:40:26
343	27	73	A COMMENT	\N	2014-07-15 14:22:37	2014-07-15 14:22:37
344	45	75	A COMMENT	\N	2014-04-12 16:28:14	2014-04-12 16:28:14
345	30	75	A COMMENT	\N	2014-04-30 22:52:29	2014-04-30 22:52:29
346	14	77	A COMMENT	\N	2013-11-27 07:03:55	2013-11-27 07:03:55
347	43	79	A COMMENT	\N	2014-02-16 07:34:20	2014-02-16 07:34:20
348	30	79	A COMMENT	\N	2014-04-12 08:40:16	2014-04-12 08:40:16
349	10	79	A COMMENT	\N	2014-04-16 13:58:17	2014-04-16 13:58:17
350	32	79	A COMMENT	\N	2014-04-24 03:01:52	2014-04-24 03:01:52
351	4	79	A COMMENT	\N	2014-07-19 11:04:32	2014-07-19 11:04:32
352	43	79	A COMMENT	\N	2014-07-20 01:30:01	2014-07-20 01:30:01
353	14	80	A COMMENT	\N	2014-01-03 01:41:09	2014-01-03 01:41:09
354	1	80	A COMMENT	\N	2014-01-22 10:38:53	2014-01-22 10:38:53
355	14	80	A COMMENT	\N	2014-02-01 16:14:44	2014-02-01 16:14:44
356	4	80	A COMMENT	\N	2014-03-01 13:31:29	2014-03-01 13:31:29
357	47	80	A COMMENT	\N	2014-03-12 02:31:27	2014-03-12 02:31:27
358	39	80	A COMMENT	\N	2014-05-08 04:28:24	2014-05-08 04:28:24
359	45	80	A COMMENT	\N	2014-06-02 20:19:28	2014-06-02 20:19:28
360	14	81	A COMMENT	\N	2014-03-10 03:01:52	2014-03-10 03:01:52
361	11	82	A COMMENT	\N	2014-05-09 14:52:05	2014-05-09 14:52:05
362	1	82	A COMMENT	\N	2014-05-21 08:02:15	2014-05-21 08:02:15
363	32	82	A COMMENT	\N	2014-05-23 00:37:02	2014-05-23 00:37:02
364	2	82	A COMMENT	\N	2014-05-28 14:11:39	2014-05-28 14:11:39
365	1	82	A COMMENT	\N	2014-06-04 07:13:01	2014-06-04 07:13:01
366	1	82	A COMMENT	\N	2014-06-04 07:37:15	2014-06-04 07:37:15
367	10	82	A COMMENT	\N	2014-06-10 12:23:06	2014-06-10 12:23:06
368	21	82	A COMMENT	\N	2014-06-10 19:17:28	2014-06-10 19:17:28
369	2	82	A COMMENT	\N	2014-06-16 16:54:43	2014-06-16 16:54:43
370	43	82	A COMMENT	\N	2014-06-17 23:28:56	2014-06-17 23:28:56
371	45	82	A COMMENT	\N	2014-07-09 19:53:26	2014-07-09 19:53:26
372	32	82	A COMMENT	\N	2014-07-12 13:28:03	2014-07-12 13:28:03
373	47	82	A COMMENT	\N	2014-07-13 03:56:59	2014-07-13 03:56:59
374	28	82	A COMMENT	\N	2014-07-13 09:07:47	2014-07-13 09:07:47
375	32	82	A COMMENT	\N	2014-07-14 07:48:55	2014-07-14 07:48:55
376	14	82	A COMMENT	\N	2014-07-14 13:00:10	2014-07-14 13:00:10
377	27	82	A COMMENT	\N	2014-07-17 09:16:35	2014-07-17 09:16:35
378	39	82	A COMMENT	\N	2014-07-20 07:20:00	2014-07-20 07:20:00
379	2	82	A COMMENT	\N	2014-07-21 21:26:19	2014-07-21 21:26:19
380	14	83	A COMMENT	\N	2014-03-06 15:51:33	2014-03-06 15:51:33
381	30	83	A COMMENT	\N	2014-03-12 01:42:05	2014-03-12 01:42:05
382	21	83	A COMMENT	\N	2014-04-30 20:55:55	2014-04-30 20:55:55
383	39	83	A COMMENT	\N	2014-05-02 06:53:49	2014-05-02 06:53:49
384	45	83	A COMMENT	\N	2014-05-20 11:24:52	2014-05-20 11:24:52
385	11	84	A COMMENT	\N	2014-06-05 07:09:25	2014-06-05 07:09:25
386	45	84	A COMMENT	\N	2014-06-16 03:58:25	2014-06-16 03:58:25
387	8	84	A COMMENT	\N	2014-07-04 10:33:06	2014-07-04 10:33:06
388	27	85	A COMMENT	\N	2014-05-25 14:54:48	2014-05-25 14:54:48
389	3	85	A COMMENT	\N	2014-05-29 00:47:13	2014-05-29 00:47:13
390	28	85	A COMMENT	\N	2014-06-13 02:23:38	2014-06-13 02:23:38
391	45	85	A COMMENT	\N	2014-06-22 23:50:03	2014-06-22 23:50:03
392	11	85	A COMMENT	\N	2014-07-07 11:53:36	2014-07-07 11:53:36
393	14	86	A COMMENT	\N	2013-12-10 06:01:47	2013-12-10 06:01:47
394	8	86	A COMMENT	\N	2014-07-23 17:23:37	2014-07-23 17:23:37
395	21	87	A COMMENT	\N	2014-02-17 15:03:46	2014-02-17 15:03:46
396	27	87	A COMMENT	\N	2014-02-27 22:28:30	2014-02-27 22:28:30
397	10	87	A COMMENT	\N	2014-03-01 06:48:13	2014-03-01 06:48:13
398	3	87	A COMMENT	\N	2014-05-15 15:42:24	2014-05-15 15:42:24
399	43	87	A COMMENT	\N	2014-06-04 07:06:14	2014-06-04 07:06:14
400	8	87	A COMMENT	\N	2014-06-30 20:54:38	2014-06-30 20:54:38
401	10	87	A COMMENT	\N	2014-07-13 02:26:33	2014-07-13 02:26:33
402	30	87	A COMMENT	\N	2014-07-24 04:47:13	2014-07-24 04:47:13
403	4	87	A COMMENT	\N	2014-07-25 10:33:24	2014-07-25 10:33:24
404	14	89	A COMMENT	\N	2014-03-07 04:06:05	2014-03-07 04:06:05
405	14	90	A COMMENT	\N	2014-04-10 07:30:56	2014-04-10 07:30:56
406	8	90	A COMMENT	\N	2014-04-16 12:40:29	2014-04-16 12:40:29
407	43	90	A COMMENT	\N	2014-04-30 14:11:43	2014-04-30 14:11:43
408	30	90	A COMMENT	\N	2014-05-05 11:07:55	2014-05-05 11:07:55
409	2	90	A COMMENT	\N	2014-06-01 13:34:42	2014-06-01 13:34:42
410	21	90	A COMMENT	\N	2014-06-04 01:09:16	2014-06-04 01:09:16
411	8	91	A COMMENT	\N	2014-05-17 18:27:43	2014-05-17 18:27:43
412	30	92	A COMMENT	\N	2014-02-19 23:34:55	2014-02-19 23:34:55
413	43	92	A COMMENT	\N	2014-03-02 14:17:23	2014-03-02 14:17:23
414	1	92	A COMMENT	\N	2014-05-09 20:35:14	2014-05-09 20:35:14
415	11	92	A COMMENT	\N	2014-05-21 14:24:46	2014-05-21 14:24:46
416	47	92	A COMMENT	\N	2014-06-06 01:14:00	2014-06-06 01:14:00
417	47	92	A COMMENT	\N	2014-06-07 14:33:20	2014-06-07 14:33:20
418	21	92	A COMMENT	\N	2014-06-18 04:08:32	2014-06-18 04:08:32
419	47	92	A COMMENT	\N	2014-07-10 20:42:03	2014-07-10 20:42:03
420	1	93	A COMMENT	\N	2014-03-21 01:37:26	2014-03-21 01:37:26
421	28	93	A COMMENT	\N	2014-04-17 16:38:32	2014-04-17 16:38:32
422	28	93	A COMMENT	\N	2014-05-04 19:52:58	2014-05-04 19:52:58
423	45	93	A COMMENT	\N	2014-06-22 13:13:02	2014-06-22 13:13:02
424	21	93	A COMMENT	\N	2014-06-26 09:34:24	2014-06-26 09:34:24
425	1	93	A COMMENT	\N	2014-06-30 21:26:25	2014-06-30 21:26:25
426	39	93	A COMMENT	\N	2014-07-03 16:12:38	2014-07-03 16:12:38
427	14	94	A COMMENT	\N	2014-04-02 11:51:32	2014-04-02 11:51:32
428	11	94	A COMMENT	\N	2014-04-11 03:50:29	2014-04-11 03:50:29
429	4	94	A COMMENT	\N	2014-04-14 09:58:13	2014-04-14 09:58:13
430	43	94	A COMMENT	\N	2014-04-23 23:56:54	2014-04-23 23:56:54
431	11	94	A COMMENT	\N	2014-05-03 21:16:49	2014-05-03 21:16:49
432	39	94	A COMMENT	\N	2014-05-19 07:37:09	2014-05-19 07:37:09
433	37	94	A COMMENT	\N	2014-05-19 17:56:23	2014-05-19 17:56:23
434	28	94	A COMMENT	\N	2014-05-23 11:55:37	2014-05-23 11:55:37
435	11	94	A COMMENT	\N	2014-05-24 12:08:01	2014-05-24 12:08:01
436	47	94	A COMMENT	\N	2014-06-08 07:42:47	2014-06-08 07:42:47
437	14	94	A COMMENT	\N	2014-06-23 20:55:58	2014-06-23 20:55:58
438	21	94	A COMMENT	\N	2014-07-02 16:04:58	2014-07-02 16:04:58
439	21	94	A COMMENT	\N	2014-07-10 09:22:48	2014-07-10 09:22:48
440	45	96	A COMMENT	\N	2014-07-10 15:45:57	2014-07-10 15:45:57
441	21	98	A COMMENT	\N	2014-06-24 20:52:45	2014-06-24 20:52:45
442	27	99	A COMMENT	\N	2014-06-21 04:00:18	2014-06-21 04:00:18
443	32	100	A COMMENT	\N	2014-06-30 14:02:59	2014-06-30 14:02:59
444	2	100	A COMMENT	\N	2014-07-21 15:09:20	2014-07-21 15:09:20
445	28	100	A COMMENT	\N	2014-07-26 00:02:19	2014-07-26 00:02:19
446	3	101	A COMMENT	\N	2014-05-15 07:39:00	2014-05-15 07:39:00
447	4	101	A COMMENT	\N	2014-05-17 08:29:28	2014-05-17 08:29:28
448	21	101	A COMMENT	\N	2014-06-22 07:22:50	2014-06-22 07:22:50
449	3	101	A COMMENT	\N	2014-07-10 07:55:26	2014-07-10 07:55:26
450	27	101	A COMMENT	\N	2014-07-12 03:42:13	2014-07-12 03:42:13
451	32	102	A COMMENT	\N	2014-07-07 17:29:11	2014-07-07 17:29:11
452	27	103	A COMMENT	\N	2014-04-15 00:42:56	2014-04-15 00:42:56
453	27	105	A COMMENT	\N	2014-07-07 17:11:04	2014-07-07 17:11:04
454	27	105	A COMMENT	\N	2014-07-12 22:19:25	2014-07-12 22:19:25
455	43	105	A COMMENT	\N	2014-07-12 23:45:02	2014-07-12 23:45:02
456	2	105	A COMMENT	\N	2014-07-17 14:43:31	2014-07-17 14:43:31
457	30	105	A COMMENT	\N	2014-07-17 23:07:47	2014-07-17 23:07:47
458	4	105	A COMMENT	\N	2014-07-19 17:31:51	2014-07-19 17:31:51
459	1	105	A COMMENT	\N	2014-07-20 03:25:34	2014-07-20 03:25:34
460	32	105	A COMMENT	\N	2014-07-20 04:34:56	2014-07-20 04:34:56
461	21	105	A COMMENT	\N	2014-07-22 08:17:50	2014-07-22 08:17:50
462	4	105	A COMMENT	\N	2014-07-23 07:10:50	2014-07-23 07:10:50
463	27	106	A COMMENT	\N	2014-07-10 04:14:13	2014-07-10 04:14:13
464	8	106	A COMMENT	\N	2014-07-12 21:44:23	2014-07-12 21:44:23
465	28	106	A COMMENT	\N	2014-07-13 15:05:25	2014-07-13 15:05:25
466	4	106	A COMMENT	\N	2014-07-16 20:25:38	2014-07-16 20:25:38
467	2	106	A COMMENT	\N	2014-07-17 05:59:06	2014-07-17 05:59:06
468	47	106	A COMMENT	\N	2014-07-23 07:19:49	2014-07-23 07:19:49
469	27	107	A COMMENT	\N	2014-07-16 16:07:20	2014-07-16 16:07:20
470	1	108	A COMMENT	\N	2014-05-07 23:29:49	2014-05-07 23:29:49
471	8	108	A COMMENT	\N	2014-05-20 03:41:39	2014-05-20 03:41:39
472	10	108	A COMMENT	\N	2014-06-06 04:41:08	2014-06-06 04:41:08
473	4	108	A COMMENT	\N	2014-06-18 01:12:47	2014-06-18 01:12:47
474	14	108	A COMMENT	\N	2014-06-18 04:29:29	2014-06-18 04:29:29
475	47	108	A COMMENT	\N	2014-07-05 15:38:40	2014-07-05 15:38:40
476	10	108	A COMMENT	\N	2014-07-24 16:17:18	2014-07-24 16:17:18
477	27	109	A COMMENT	\N	2014-06-03 05:02:03	2014-06-03 05:02:03
478	30	109	A COMMENT	\N	2014-07-11 13:15:11	2014-07-11 13:15:11
479	39	109	A COMMENT	\N	2014-07-20 01:09:45	2014-07-20 01:09:45
480	21	109	A COMMENT	\N	2014-07-22 03:01:12	2014-07-22 03:01:12
481	27	110	A COMMENT	\N	2014-06-16 10:52:10	2014-06-16 10:52:10
482	32	110	A COMMENT	\N	2014-06-29 05:35:21	2014-06-29 05:35:21
483	37	110	A COMMENT	\N	2014-07-24 09:12:11	2014-07-24 09:12:11
484	27	111	A COMMENT	\N	2014-06-18 03:26:24	2014-06-18 03:26:24
485	27	112	A COMMENT	\N	2014-07-17 23:06:43	2014-07-17 23:06:43
486	45	112	A COMMENT	\N	2014-07-20 15:00:22	2014-07-20 15:00:22
487	10	112	A COMMENT	\N	2014-07-23 16:33:53	2014-07-23 16:33:53
488	28	113	A COMMENT	\N	2014-02-06 15:13:38	2014-02-06 15:13:38
489	10	113	A COMMENT	\N	2014-04-01 15:30:43	2014-04-01 15:30:43
490	27	113	A COMMENT	\N	2014-07-22 08:38:05	2014-07-22 08:38:05
491	45	114	A COMMENT	\N	2014-01-09 23:18:07	2014-01-09 23:18:07
492	21	114	A COMMENT	\N	2014-02-19 17:53:15	2014-02-19 17:53:15
493	27	114	A COMMENT	\N	2014-02-24 15:57:22	2014-02-24 15:57:22
494	30	114	A COMMENT	\N	2014-03-06 05:26:50	2014-03-06 05:26:50
495	8	114	A COMMENT	\N	2014-07-07 08:49:41	2014-07-07 08:49:41
496	11	115	A COMMENT	\N	2014-07-26 03:53:16	2014-07-26 03:53:16
497	47	116	A COMMENT	\N	2014-04-13 13:57:11	2014-04-13 13:57:11
498	28	116	A COMMENT	\N	2014-04-15 20:17:35	2014-04-15 20:17:35
499	27	116	A COMMENT	\N	2014-05-01 18:14:07	2014-05-01 18:14:07
500	8	116	A COMMENT	\N	2014-06-02 01:13:22	2014-06-02 01:13:22
501	30	116	A COMMENT	\N	2014-06-04 08:50:50	2014-06-04 08:50:50
502	43	116	A COMMENT	\N	2014-07-04 11:33:14	2014-07-04 11:33:14
503	28	117	A COMMENT	\N	2014-04-21 02:56:07	2014-04-21 02:56:07
504	45	117	A COMMENT	\N	2014-05-03 00:56:42	2014-05-03 00:56:42
505	14	117	A COMMENT	\N	2014-05-04 00:34:32	2014-05-04 00:34:32
506	21	117	A COMMENT	\N	2014-05-30 22:36:08	2014-05-30 22:36:08
507	8	117	A COMMENT	\N	2014-06-13 07:48:55	2014-06-13 07:48:55
508	8	117	A COMMENT	\N	2014-06-13 10:05:52	2014-06-13 10:05:52
509	11	117	A COMMENT	\N	2014-07-26 08:22:15	2014-07-26 08:22:15
510	28	118	A COMMENT	\N	2014-03-05 10:28:24	2014-03-05 10:28:24
511	32	121	A COMMENT	\N	2014-07-03 16:31:03	2014-07-03 16:31:03
512	28	122	A COMMENT	\N	2014-01-21 15:37:58	2014-01-21 15:37:58
513	2	123	A COMMENT	\N	2014-05-02 04:00:01	2014-05-02 04:00:01
514	45	123	A COMMENT	\N	2014-05-31 14:59:04	2014-05-31 14:59:04
515	10	123	A COMMENT	\N	2014-06-05 05:38:57	2014-06-05 05:38:57
516	47	123	A COMMENT	\N	2014-06-10 16:26:57	2014-06-10 16:26:57
517	11	123	A COMMENT	\N	2014-06-10 20:23:29	2014-06-10 20:23:29
518	1	123	A COMMENT	\N	2014-06-19 17:19:02	2014-06-19 17:19:02
519	28	124	A COMMENT	\N	2014-05-23 01:28:45	2014-05-23 01:28:45
520	32	124	A COMMENT	\N	2014-06-17 19:40:32	2014-06-17 19:40:32
521	2	124	A COMMENT	\N	2014-07-17 13:43:45	2014-07-17 13:43:45
522	8	125	A COMMENT	\N	2014-06-23 03:00:53	2014-06-23 03:00:53
523	27	125	A COMMENT	\N	2014-07-08 22:33:29	2014-07-08 22:33:29
524	3	125	A COMMENT	\N	2014-07-21 05:25:34	2014-07-21 05:25:34
525	47	125	A COMMENT	\N	2014-07-23 03:40:56	2014-07-23 03:40:56
526	10	125	A COMMENT	\N	2014-07-25 17:38:20	2014-07-25 17:38:20
527	28	128	A COMMENT	\N	2014-03-07 19:13:21	2014-03-07 19:13:21
528	45	130	A COMMENT	\N	2014-05-10 12:16:04	2014-05-10 12:16:04
529	43	130	A COMMENT	\N	2014-05-28 20:07:34	2014-05-28 20:07:34
530	39	130	A COMMENT	\N	2014-05-29 21:55:31	2014-05-29 21:55:31
531	21	130	A COMMENT	\N	2014-05-30 18:25:21	2014-05-30 18:25:21
532	1	130	A COMMENT	\N	2014-05-31 15:32:13	2014-05-31 15:32:13
533	32	130	A COMMENT	\N	2014-06-08 20:37:00	2014-06-08 20:37:00
534	8	130	A COMMENT	\N	2014-06-12 20:47:24	2014-06-12 20:47:24
535	37	130	A COMMENT	\N	2014-06-15 05:13:02	2014-06-15 05:13:02
536	30	130	A COMMENT	\N	2014-06-25 07:48:12	2014-06-25 07:48:12
537	3	130	A COMMENT	\N	2014-06-25 17:38:42	2014-06-25 17:38:42
538	30	131	A COMMENT	\N	2014-05-29 04:57:28	2014-05-29 04:57:28
539	3	131	A COMMENT	\N	2014-06-19 23:58:13	2014-06-19 23:58:13
540	47	131	A COMMENT	\N	2014-07-05 06:31:45	2014-07-05 06:31:45
541	39	132	A COMMENT	\N	2014-07-14 13:10:03	2014-07-14 13:10:03
542	4	132	A COMMENT	\N	2014-07-16 01:03:23	2014-07-16 01:03:23
543	2	132	A COMMENT	\N	2014-07-17 23:48:44	2014-07-17 23:48:44
544	39	132	A COMMENT	\N	2014-07-22 02:13:01	2014-07-22 02:13:01
545	43	132	A COMMENT	\N	2014-07-22 03:27:18	2014-07-22 03:27:18
546	3	132	A COMMENT	\N	2014-07-23 06:45:50	2014-07-23 06:45:50
547	43	132	A COMMENT	\N	2014-07-23 17:45:51	2014-07-23 17:45:51
548	30	132	A COMMENT	\N	2014-07-25 06:28:31	2014-07-25 06:28:31
549	30	132	A COMMENT	\N	2014-07-25 19:34:12	2014-07-25 19:34:12
550	28	132	A COMMENT	\N	2014-07-26 09:41:19	2014-07-26 09:41:19
551	3	133	A COMMENT	\N	2014-02-11 19:14:40	2014-02-11 19:14:40
552	43	133	A COMMENT	\N	2014-04-13 00:46:57	2014-04-13 00:46:57
553	11	133	A COMMENT	\N	2014-04-29 16:49:24	2014-04-29 16:49:24
554	45	133	A COMMENT	\N	2014-05-18 16:52:11	2014-05-18 16:52:11
555	30	133	A COMMENT	\N	2014-05-29 04:25:25	2014-05-29 04:25:25
556	45	133	A COMMENT	\N	2014-06-27 16:19:46	2014-06-27 16:19:46
557	30	135	A COMMENT	\N	2014-02-02 21:38:30	2014-02-02 21:38:30
558	30	135	A COMMENT	\N	2014-03-20 07:21:57	2014-03-20 07:21:57
559	21	135	A COMMENT	\N	2014-03-24 08:52:10	2014-03-24 08:52:10
560	32	135	A COMMENT	\N	2014-03-26 14:48:25	2014-03-26 14:48:25
561	4	135	A COMMENT	\N	2014-05-21 21:40:54	2014-05-21 21:40:54
562	37	135	A COMMENT	\N	2014-06-01 16:22:45	2014-06-01 16:22:45
563	28	135	A COMMENT	\N	2014-06-13 22:32:02	2014-06-13 22:32:02
564	39	135	A COMMENT	\N	2014-06-17 21:14:00	2014-06-17 21:14:00
565	11	135	A COMMENT	\N	2014-07-07 03:26:53	2014-07-07 03:26:53
566	21	135	A COMMENT	\N	2014-07-18 14:35:20	2014-07-18 14:35:20
567	11	136	A COMMENT	\N	2014-05-12 14:21:26	2014-05-12 14:21:26
568	14	136	A COMMENT	\N	2014-05-21 13:42:12	2014-05-21 13:42:12
569	45	136	A COMMENT	\N	2014-05-22 19:01:59	2014-05-22 19:01:59
570	30	136	A COMMENT	\N	2014-06-03 07:05:49	2014-06-03 07:05:49
571	32	136	A COMMENT	\N	2014-06-07 03:33:04	2014-06-07 03:33:04
572	27	136	A COMMENT	\N	2014-06-13 19:27:13	2014-06-13 19:27:13
573	4	136	A COMMENT	\N	2014-06-20 10:56:21	2014-06-20 10:56:21
574	3	136	A COMMENT	\N	2014-06-28 12:33:48	2014-06-28 12:33:48
575	47	136	A COMMENT	\N	2014-07-02 07:13:36	2014-07-02 07:13:36
576	43	136	A COMMENT	\N	2014-07-05 18:07:23	2014-07-05 18:07:23
577	21	137	A COMMENT	\N	2014-04-15 03:52:46	2014-04-15 03:52:46
578	37	137	A COMMENT	\N	2014-05-30 16:18:04	2014-05-30 16:18:04
579	45	137	A COMMENT	\N	2014-06-05 00:20:39	2014-06-05 00:20:39
580	27	137	A COMMENT	\N	2014-07-02 04:43:43	2014-07-02 04:43:43
581	27	139	A COMMENT	\N	2014-01-15 00:24:36	2014-01-15 00:24:36
582	37	139	A COMMENT	\N	2014-01-16 02:21:07	2014-01-16 02:21:07
583	3	139	A COMMENT	\N	2014-01-24 22:38:15	2014-01-24 22:38:15
584	39	139	A COMMENT	\N	2014-02-08 01:20:42	2014-02-08 01:20:42
585	45	139	A COMMENT	\N	2014-02-20 13:26:13	2014-02-20 13:26:13
586	47	139	A COMMENT	\N	2014-02-23 07:33:27	2014-02-23 07:33:27
587	8	139	A COMMENT	\N	2014-02-27 20:03:21	2014-02-27 20:03:21
588	21	139	A COMMENT	\N	2014-02-28 08:10:37	2014-02-28 08:10:37
589	28	139	A COMMENT	\N	2014-03-09 17:00:37	2014-03-09 17:00:37
590	4	139	A COMMENT	\N	2014-04-10 12:44:28	2014-04-10 12:44:28
591	1	139	A COMMENT	\N	2014-04-11 18:59:08	2014-04-11 18:59:08
592	43	139	A COMMENT	\N	2014-04-16 17:42:31	2014-04-16 17:42:31
593	47	139	A COMMENT	\N	2014-04-20 16:09:31	2014-04-20 16:09:31
594	1	139	A COMMENT	\N	2014-04-30 16:59:57	2014-04-30 16:59:57
595	8	139	A COMMENT	\N	2014-05-15 09:38:40	2014-05-15 09:38:40
596	39	139	A COMMENT	\N	2014-05-18 02:28:47	2014-05-18 02:28:47
597	10	139	A COMMENT	\N	2014-06-10 03:11:49	2014-06-10 03:11:49
598	2	139	A COMMENT	\N	2014-06-17 19:36:07	2014-06-17 19:36:07
599	45	139	A COMMENT	\N	2014-07-10 18:58:58	2014-07-10 18:58:58
600	27	139	A COMMENT	\N	2014-07-16 00:08:47	2014-07-16 00:08:47
601	10	140	A COMMENT	\N	2014-02-04 01:36:23	2014-02-04 01:36:23
602	39	140	A COMMENT	\N	2014-02-06 02:34:21	2014-02-06 02:34:21
603	1	140	A COMMENT	\N	2014-04-20 12:55:58	2014-04-20 12:55:58
604	8	140	A COMMENT	\N	2014-05-07 00:06:49	2014-05-07 00:06:49
605	2	140	A COMMENT	\N	2014-05-19 19:58:30	2014-05-19 19:58:30
606	21	140	A COMMENT	\N	2014-05-21 06:04:20	2014-05-21 06:04:20
607	3	140	A COMMENT	\N	2014-05-27 09:54:05	2014-05-27 09:54:05
608	30	140	A COMMENT	\N	2014-06-10 21:34:36	2014-06-10 21:34:36
609	8	140	A COMMENT	\N	2014-06-24 02:18:09	2014-06-24 02:18:09
610	39	140	A COMMENT	\N	2014-06-28 00:29:52	2014-06-28 00:29:52
611	14	140	A COMMENT	\N	2014-07-16 05:43:31	2014-07-16 05:43:31
612	21	140	A COMMENT	\N	2014-07-24 14:45:32	2014-07-24 14:45:32
613	4	140	A COMMENT	\N	2014-07-25 21:58:43	2014-07-25 21:58:43
614	30	141	A COMMENT	\N	2014-02-05 06:15:31	2014-02-05 06:15:31
615	14	141	A COMMENT	\N	2014-02-15 19:41:33	2014-02-15 19:41:33
616	37	141	A COMMENT	\N	2014-02-18 03:49:17	2014-02-18 03:49:17
617	43	141	A COMMENT	\N	2014-03-17 15:40:50	2014-03-17 15:40:50
618	30	141	A COMMENT	\N	2014-04-01 20:57:53	2014-04-01 20:57:53
619	2	141	A COMMENT	\N	2014-04-24 09:28:41	2014-04-24 09:28:41
620	47	141	A COMMENT	\N	2014-05-30 20:02:12	2014-05-30 20:02:12
621	8	141	A COMMENT	\N	2014-05-31 11:21:47	2014-05-31 11:21:47
622	32	141	A COMMENT	\N	2014-07-10 10:33:16	2014-07-10 10:33:16
623	14	141	A COMMENT	\N	2014-07-22 14:09:35	2014-07-22 14:09:35
624	30	142	A COMMENT	\N	2014-02-22 08:00:07	2014-02-22 08:00:07
625	3	142	A COMMENT	\N	2014-03-23 01:35:38	2014-03-23 01:35:38
626	32	142	A COMMENT	\N	2014-03-27 09:11:04	2014-03-27 09:11:04
627	37	142	A COMMENT	\N	2014-06-04 18:01:35	2014-06-04 18:01:35
628	39	142	A COMMENT	\N	2014-06-14 02:32:57	2014-06-14 02:32:57
629	45	143	A COMMENT	\N	2014-03-22 16:09:58	2014-03-22 16:09:58
630	32	143	A COMMENT	\N	2014-05-11 22:03:04	2014-05-11 22:03:04
631	14	144	A COMMENT	\N	2014-05-13 23:10:17	2014-05-13 23:10:17
632	10	144	A COMMENT	\N	2014-06-14 01:46:20	2014-06-14 01:46:20
633	14	144	A COMMENT	\N	2014-06-27 03:54:21	2014-06-27 03:54:21
634	3	144	A COMMENT	\N	2014-07-11 17:36:58	2014-07-11 17:36:58
635	30	145	A COMMENT	\N	2014-05-13 21:20:01	2014-05-13 21:20:01
636	39	145	A COMMENT	\N	2014-07-06 09:50:34	2014-07-06 09:50:34
637	27	145	A COMMENT	\N	2014-07-07 00:25:41	2014-07-07 00:25:41
638	2	145	A COMMENT	\N	2014-07-13 06:44:56	2014-07-13 06:44:56
639	28	145	A COMMENT	\N	2014-07-26 11:25:30	2014-07-26 11:25:30
640	10	146	A COMMENT	\N	2014-02-15 07:42:08	2014-02-15 07:42:08
641	2	146	A COMMENT	\N	2014-02-17 13:33:55	2014-02-17 13:33:55
642	39	146	A COMMENT	\N	2014-02-21 15:41:03	2014-02-21 15:41:03
643	28	146	A COMMENT	\N	2014-03-05 15:12:51	2014-03-05 15:12:51
644	1	146	A COMMENT	\N	2014-05-02 10:43:35	2014-05-02 10:43:35
645	32	146	A COMMENT	\N	2014-05-16 19:26:17	2014-05-16 19:26:17
646	3	146	A COMMENT	\N	2014-06-10 02:47:28	2014-06-10 02:47:28
647	43	146	A COMMENT	\N	2014-06-20 08:06:53	2014-06-20 08:06:53
648	30	148	A COMMENT	\N	2014-01-15 14:40:16	2014-01-15 14:40:16
649	1	150	A COMMENT	\N	2014-05-14 13:14:23	2014-05-14 13:14:23
650	27	150	A COMMENT	\N	2014-05-15 19:15:14	2014-05-15 19:15:14
651	45	150	A COMMENT	\N	2014-05-25 00:29:13	2014-05-25 00:29:13
652	4	150	A COMMENT	\N	2014-06-13 11:56:34	2014-06-13 11:56:34
653	2	150	A COMMENT	\N	2014-06-21 10:16:37	2014-06-21 10:16:37
654	10	150	A COMMENT	\N	2014-07-04 22:17:37	2014-07-04 22:17:37
655	27	150	A COMMENT	\N	2014-07-07 05:48:16	2014-07-07 05:48:16
656	28	150	A COMMENT	\N	2014-07-10 16:08:42	2014-07-10 16:08:42
657	32	150	A COMMENT	\N	2014-07-26 13:41:29	2014-07-26 13:41:29
658	30	153	A COMMENT	\N	2014-02-09 15:55:22	2014-02-09 15:55:22
659	32	153	A COMMENT	\N	2014-02-23 18:28:39	2014-02-23 18:28:39
660	37	153	A COMMENT	\N	2014-03-08 22:10:14	2014-03-08 22:10:14
661	28	153	A COMMENT	\N	2014-03-16 14:15:52	2014-03-16 14:15:52
662	21	153	A COMMENT	\N	2014-03-30 17:35:51	2014-03-30 17:35:51
663	11	153	A COMMENT	\N	2014-04-15 18:11:09	2014-04-15 18:11:09
664	1	153	A COMMENT	\N	2014-04-20 00:21:17	2014-04-20 00:21:17
665	43	153	A COMMENT	\N	2014-05-11 16:45:01	2014-05-11 16:45:01
666	4	153	A COMMENT	\N	2014-06-18 23:09:07	2014-06-18 23:09:07
667	8	153	A COMMENT	\N	2014-06-22 08:06:14	2014-06-22 08:06:14
668	45	153	A COMMENT	\N	2014-07-12 09:17:08	2014-07-12 09:17:08
669	32	154	A COMMENT	\N	2014-07-20 01:15:06	2014-07-20 01:15:06
670	43	155	A COMMENT	\N	2013-11-28 20:01:33	2013-11-28 20:01:33
671	27	155	A COMMENT	\N	2014-01-05 12:27:34	2014-01-05 12:27:34
672	14	155	A COMMENT	\N	2014-01-12 11:48:54	2014-01-12 11:48:54
673	39	155	A COMMENT	\N	2014-02-22 22:46:23	2014-02-22 22:46:23
674	3	155	A COMMENT	\N	2014-03-17 20:48:24	2014-03-17 20:48:24
675	4	155	A COMMENT	\N	2014-03-22 20:54:18	2014-03-22 20:54:18
676	30	155	A COMMENT	\N	2014-05-11 22:29:02	2014-05-11 22:29:02
677	37	156	A COMMENT	\N	2014-03-22 12:47:31	2014-03-22 12:47:31
678	32	156	A COMMENT	\N	2014-06-11 20:17:57	2014-06-11 20:17:57
679	43	156	A COMMENT	\N	2014-06-21 02:43:15	2014-06-21 02:43:15
680	8	156	A COMMENT	\N	2014-07-25 12:42:01	2014-07-25 12:42:01
681	1	157	A COMMENT	\N	2014-05-09 00:42:32	2014-05-09 00:42:32
682	45	157	A COMMENT	\N	2014-05-09 13:51:41	2014-05-09 13:51:41
683	14	157	A COMMENT	\N	2014-05-20 09:03:27	2014-05-20 09:03:27
684	28	157	A COMMENT	\N	2014-05-20 20:03:14	2014-05-20 20:03:14
685	47	157	A COMMENT	\N	2014-06-11 12:50:07	2014-06-11 12:50:07
686	37	158	A COMMENT	\N	2013-12-17 22:46:37	2013-12-17 22:46:37
687	28	158	A COMMENT	\N	2014-05-18 14:31:31	2014-05-18 14:31:31
688	3	158	A COMMENT	\N	2014-05-24 20:36:25	2014-05-24 20:36:25
689	8	158	A COMMENT	\N	2014-07-10 19:49:23	2014-07-10 19:49:23
690	37	161	A COMMENT	\N	2014-03-04 18:56:48	2014-03-04 18:56:48
691	32	162	A COMMENT	\N	2014-02-02 06:47:59	2014-02-02 06:47:59
692	45	162	A COMMENT	\N	2014-02-25 11:59:57	2014-02-25 11:59:57
693	45	162	A COMMENT	\N	2014-03-08 04:24:15	2014-03-08 04:24:15
694	1	162	A COMMENT	\N	2014-03-14 11:24:56	2014-03-14 11:24:56
695	39	162	A COMMENT	\N	2014-03-27 12:34:18	2014-03-27 12:34:18
696	43	162	A COMMENT	\N	2014-04-21 22:21:52	2014-04-21 22:21:52
697	14	162	A COMMENT	\N	2014-05-10 23:47:24	2014-05-10 23:47:24
698	2	162	A COMMENT	\N	2014-05-20 19:55:25	2014-05-20 19:55:25
699	32	162	A COMMENT	\N	2014-05-22 05:25:58	2014-05-22 05:25:58
700	14	162	A COMMENT	\N	2014-06-07 00:09:24	2014-06-07 00:09:24
701	11	162	A COMMENT	\N	2014-06-21 20:28:48	2014-06-21 20:28:48
702	1	162	A COMMENT	\N	2014-07-05 13:19:22	2014-07-05 13:19:22
703	27	162	A COMMENT	\N	2014-07-18 20:56:08	2014-07-18 20:56:08
704	10	162	A COMMENT	\N	2014-07-19 05:10:36	2014-07-19 05:10:36
705	4	163	A COMMENT	\N	2014-06-09 01:54:57	2014-06-09 01:54:57
706	45	163	A COMMENT	\N	2014-06-25 09:59:05	2014-06-25 09:59:05
707	27	163	A COMMENT	\N	2014-07-25 20:49:23	2014-07-25 20:49:23
708	4	163	A COMMENT	\N	2014-07-26 01:40:36	2014-07-26 01:40:36
709	39	164	A COMMENT	\N	2014-07-11 15:27:19	2014-07-11 15:27:19
710	37	165	A COMMENT	\N	2014-05-29 00:17:19	2014-05-29 00:17:19
711	43	165	A COMMENT	\N	2014-06-03 10:26:49	2014-06-03 10:26:49
712	2	165	A COMMENT	\N	2014-06-13 10:37:33	2014-06-13 10:37:33
713	11	165	A COMMENT	\N	2014-06-13 21:32:57	2014-06-13 21:32:57
714	30	165	A COMMENT	\N	2014-06-25 23:55:54	2014-06-25 23:55:54
715	43	165	A COMMENT	\N	2014-07-12 02:38:03	2014-07-12 02:38:03
716	8	165	A COMMENT	\N	2014-07-15 10:56:43	2014-07-15 10:56:43
717	45	165	A COMMENT	\N	2014-07-21 23:17:38	2014-07-21 23:17:38
718	39	166	A COMMENT	\N	2014-06-01 14:42:17	2014-06-01 14:42:17
719	28	166	A COMMENT	\N	2014-06-04 03:41:45	2014-06-04 03:41:45
720	3	166	A COMMENT	\N	2014-06-07 14:45:21	2014-06-07 14:45:21
721	21	166	A COMMENT	\N	2014-06-19 02:23:31	2014-06-19 02:23:31
722	39	166	A COMMENT	\N	2014-07-10 11:29:12	2014-07-10 11:29:12
723	2	166	A COMMENT	\N	2014-07-25 13:10:56	2014-07-25 13:10:56
724	39	167	A COMMENT	\N	2014-06-06 07:22:31	2014-06-06 07:22:31
725	32	167	A COMMENT	\N	2014-06-23 14:56:59	2014-06-23 14:56:59
726	39	169	A COMMENT	\N	2014-06-23 03:59:20	2014-06-23 03:59:20
727	28	169	A COMMENT	\N	2014-06-25 23:26:44	2014-06-25 23:26:44
728	21	169	A COMMENT	\N	2014-06-27 00:19:35	2014-06-27 00:19:35
729	45	169	A COMMENT	\N	2014-06-29 22:13:03	2014-06-29 22:13:03
730	27	169	A COMMENT	\N	2014-06-30 05:26:27	2014-06-30 05:26:27
731	4	169	A COMMENT	\N	2014-06-30 07:28:51	2014-06-30 07:28:51
732	47	169	A COMMENT	\N	2014-06-30 13:11:00	2014-06-30 13:11:00
733	11	169	A COMMENT	\N	2014-07-01 19:50:20	2014-07-01 19:50:20
734	30	169	A COMMENT	\N	2014-07-02 10:12:09	2014-07-02 10:12:09
735	27	169	A COMMENT	\N	2014-07-02 14:01:29	2014-07-02 14:01:29
736	14	169	A COMMENT	\N	2014-07-09 07:15:14	2014-07-09 07:15:14
737	39	169	A COMMENT	\N	2014-07-09 12:11:46	2014-07-09 12:11:46
738	37	169	A COMMENT	\N	2014-07-13 14:42:03	2014-07-13 14:42:03
739	11	169	A COMMENT	\N	2014-07-16 07:57:39	2014-07-16 07:57:39
740	28	170	A COMMENT	\N	2014-06-28 03:13:42	2014-06-28 03:13:42
741	2	170	A COMMENT	\N	2014-07-05 08:47:37	2014-07-05 08:47:37
742	8	170	A COMMENT	\N	2014-07-06 12:09:32	2014-07-06 12:09:32
743	3	170	A COMMENT	\N	2014-07-06 19:22:18	2014-07-06 19:22:18
744	21	170	A COMMENT	\N	2014-07-07 00:09:11	2014-07-07 00:09:11
745	45	170	A COMMENT	\N	2014-07-08 18:08:41	2014-07-08 18:08:41
746	3	170	A COMMENT	\N	2014-07-12 00:40:40	2014-07-12 00:40:40
747	11	170	A COMMENT	\N	2014-07-19 04:37:20	2014-07-19 04:37:20
748	39	170	A COMMENT	\N	2014-07-20 00:10:51	2014-07-20 00:10:51
749	10	170	A COMMENT	\N	2014-07-21 14:54:01	2014-07-21 14:54:01
750	45	171	A COMMENT	\N	2014-05-28 20:16:30	2014-05-28 20:16:30
751	11	171	A COMMENT	\N	2014-05-30 13:59:33	2014-05-30 13:59:33
752	27	171	A COMMENT	\N	2014-05-31 14:12:50	2014-05-31 14:12:50
753	32	171	A COMMENT	\N	2014-06-15 22:07:01	2014-06-15 22:07:01
754	39	171	A COMMENT	\N	2014-06-16 11:09:48	2014-06-16 11:09:48
755	43	171	A COMMENT	\N	2014-07-01 05:00:43	2014-07-01 05:00:43
756	32	171	A COMMENT	\N	2014-07-15 07:49:55	2014-07-15 07:49:55
757	8	171	A COMMENT	\N	2014-07-15 20:26:51	2014-07-15 20:26:51
758	21	171	A COMMENT	\N	2014-07-20 12:04:46	2014-07-20 12:04:46
759	2	171	A COMMENT	\N	2014-07-21 01:41:12	2014-07-21 01:41:12
760	39	172	A COMMENT	\N	2014-05-24 22:06:19	2014-05-24 22:06:19
761	8	174	A COMMENT	\N	2014-07-01 05:37:22	2014-07-01 05:37:22
762	8	174	A COMMENT	\N	2014-07-02 21:45:52	2014-07-02 21:45:52
763	30	174	A COMMENT	\N	2014-07-05 16:19:23	2014-07-05 16:19:23
764	1	174	A COMMENT	\N	2014-07-09 12:26:12	2014-07-09 12:26:12
765	32	174	A COMMENT	\N	2014-07-11 15:25:25	2014-07-11 15:25:25
766	4	174	A COMMENT	\N	2014-07-12 00:42:30	2014-07-12 00:42:30
767	11	174	A COMMENT	\N	2014-07-14 07:21:36	2014-07-14 07:21:36
768	11	174	A COMMENT	\N	2014-07-19 05:59:50	2014-07-19 05:59:50
769	10	174	A COMMENT	\N	2014-07-25 00:49:51	2014-07-25 00:49:51
770	30	174	A COMMENT	\N	2014-07-25 21:34:11	2014-07-25 21:34:11
771	4	175	A COMMENT	\N	2014-07-02 13:37:57	2014-07-02 13:37:57
772	32	175	A COMMENT	\N	2014-07-12 03:08:06	2014-07-12 03:08:06
773	32	175	A COMMENT	\N	2014-07-15 14:04:06	2014-07-15 14:04:06
774	2	175	A COMMENT	\N	2014-07-16 17:50:46	2014-07-16 17:50:46
775	39	176	A COMMENT	\N	2014-07-02 21:00:08	2014-07-02 21:00:08
776	32	176	A COMMENT	\N	2014-07-03 22:52:30	2014-07-03 22:52:30
777	4	176	A COMMENT	\N	2014-07-05 04:06:13	2014-07-05 04:06:13
778	14	176	A COMMENT	\N	2014-07-05 05:54:41	2014-07-05 05:54:41
779	45	176	A COMMENT	\N	2014-07-07 03:07:58	2014-07-07 03:07:58
780	47	176	A COMMENT	\N	2014-07-07 10:01:40	2014-07-07 10:01:40
781	8	176	A COMMENT	\N	2014-07-07 21:09:55	2014-07-07 21:09:55
782	30	176	A COMMENT	\N	2014-07-10 22:15:56	2014-07-10 22:15:56
783	37	176	A COMMENT	\N	2014-07-14 20:44:14	2014-07-14 20:44:14
784	21	176	A COMMENT	\N	2014-07-15 19:01:25	2014-07-15 19:01:25
785	28	176	A COMMENT	\N	2014-07-16 15:56:35	2014-07-16 15:56:35
786	21	176	A COMMENT	\N	2014-07-18 09:31:40	2014-07-18 09:31:40
787	2	176	A COMMENT	\N	2014-07-20 14:42:04	2014-07-20 14:42:04
788	39	176	A COMMENT	\N	2014-07-21 19:55:46	2014-07-21 19:55:46
789	47	176	A COMMENT	\N	2014-07-24 21:44:01	2014-07-24 21:44:01
790	11	176	A COMMENT	\N	2014-07-25 00:54:43	2014-07-25 00:54:43
791	4	176	A COMMENT	\N	2014-07-25 11:44:54	2014-07-25 11:44:54
792	39	178	A COMMENT	\N	2014-07-06 17:59:48	2014-07-06 17:59:48
793	4	179	A COMMENT	\N	2014-06-26 13:24:03	2014-06-26 13:24:03
794	10	179	A COMMENT	\N	2014-06-26 19:25:05	2014-06-26 19:25:05
795	8	179	A COMMENT	\N	2014-06-27 14:43:27	2014-06-27 14:43:27
796	28	179	A COMMENT	\N	2014-06-28 20:18:31	2014-06-28 20:18:31
797	43	179	A COMMENT	\N	2014-07-02 04:31:58	2014-07-02 04:31:58
798	30	179	A COMMENT	\N	2014-07-02 08:50:07	2014-07-02 08:50:07
799	43	179	A COMMENT	\N	2014-07-03 04:11:38	2014-07-03 04:11:38
800	27	179	A COMMENT	\N	2014-07-09 10:36:52	2014-07-09 10:36:52
801	45	179	A COMMENT	\N	2014-07-10 04:46:02	2014-07-10 04:46:02
802	30	179	A COMMENT	\N	2014-07-13 07:31:23	2014-07-13 07:31:23
803	3	179	A COMMENT	\N	2014-07-15 09:49:46	2014-07-15 09:49:46
804	43	179	A COMMENT	\N	2014-07-23 09:15:54	2014-07-23 09:15:54
805	2	179	A COMMENT	\N	2014-07-23 10:07:32	2014-07-23 10:07:32
806	39	180	A COMMENT	\N	2014-07-14 14:11:38	2014-07-14 14:11:38
807	30	181	A COMMENT	\N	2014-06-09 00:43:49	2014-06-09 00:43:49
808	27	182	A COMMENT	\N	2014-07-16 05:07:07	2014-07-16 05:07:07
809	39	183	A COMMENT	\N	2014-06-23 12:18:31	2014-06-23 12:18:31
810	47	183	A COMMENT	\N	2014-07-08 07:44:02	2014-07-08 07:44:02
811	4	183	A COMMENT	\N	2014-07-19 20:13:17	2014-07-19 20:13:17
812	47	184	A COMMENT	\N	2014-05-25 02:47:50	2014-05-25 02:47:50
813	27	184	A COMMENT	\N	2014-05-26 21:11:57	2014-05-26 21:11:57
814	14	184	A COMMENT	\N	2014-06-07 04:30:04	2014-06-07 04:30:04
815	27	184	A COMMENT	\N	2014-06-26 08:21:52	2014-06-26 08:21:52
816	4	184	A COMMENT	\N	2014-07-10 08:38:20	2014-07-10 08:38:20
817	45	185	A COMMENT	\N	2014-05-29 09:05:31	2014-05-29 09:05:31
818	11	185	A COMMENT	\N	2014-05-30 19:26:05	2014-05-30 19:26:05
819	28	185	A COMMENT	\N	2014-06-01 02:32:56	2014-06-01 02:32:56
820	3	185	A COMMENT	\N	2014-06-02 02:45:46	2014-06-02 02:45:46
821	43	185	A COMMENT	\N	2014-06-04 12:53:42	2014-06-04 12:53:42
822	21	185	A COMMENT	\N	2014-06-10 00:21:00	2014-06-10 00:21:00
823	1	185	A COMMENT	\N	2014-06-10 23:20:36	2014-06-10 23:20:36
824	28	185	A COMMENT	\N	2014-06-15 05:19:28	2014-06-15 05:19:28
825	27	185	A COMMENT	\N	2014-07-06 21:48:30	2014-07-06 21:48:30
826	1	185	A COMMENT	\N	2014-07-19 07:06:59	2014-07-19 07:06:59
827	47	187	A COMMENT	\N	2014-06-11 13:11:32	2014-06-11 13:11:32
828	11	187	A COMMENT	\N	2014-06-15 02:51:26	2014-06-15 02:51:26
829	3	187	A COMMENT	\N	2014-06-29 12:48:03	2014-06-29 12:48:03
830	43	189	A COMMENT	\N	2014-06-18 05:25:21	2014-06-18 05:25:21
831	30	189	A COMMENT	\N	2014-06-19 08:19:33	2014-06-19 08:19:33
832	8	189	A COMMENT	\N	2014-06-20 06:11:10	2014-06-20 06:11:10
833	3	189	A COMMENT	\N	2014-06-22 21:48:22	2014-06-22 21:48:22
834	27	189	A COMMENT	\N	2014-06-24 16:49:43	2014-06-24 16:49:43
835	27	189	A COMMENT	\N	2014-07-02 16:27:07	2014-07-02 16:27:07
836	2	189	A COMMENT	\N	2014-07-04 17:20:35	2014-07-04 17:20:35
837	4	189	A COMMENT	\N	2014-07-07 09:32:29	2014-07-07 09:32:29
838	4	189	A COMMENT	\N	2014-07-14 18:56:54	2014-07-14 18:56:54
839	47	189	A COMMENT	\N	2014-07-16 14:23:25	2014-07-16 14:23:25
840	11	189	A COMMENT	\N	2014-07-20 09:59:25	2014-07-20 09:59:25
841	43	189	A COMMENT	\N	2014-07-24 11:47:00	2014-07-24 11:47:00
842	14	190	A COMMENT	\N	2014-06-29 00:00:01	2014-06-29 00:00:01
843	30	190	A COMMENT	\N	2014-07-07 02:40:47	2014-07-07 02:40:47
844	28	190	A COMMENT	\N	2014-07-18 10:45:45	2014-07-18 10:45:45
845	14	192	A COMMENT	\N	2014-07-05 23:33:48	2014-07-05 23:33:48
846	8	192	A COMMENT	\N	2014-07-06 06:38:45	2014-07-06 06:38:45
847	4	192	A COMMENT	\N	2014-07-18 13:49:36	2014-07-18 13:49:36
848	37	192	A COMMENT	\N	2014-07-18 19:29:57	2014-07-18 19:29:57
849	43	192	A COMMENT	\N	2014-07-20 09:26:42	2014-07-20 09:26:42
850	37	192	A COMMENT	\N	2014-07-25 02:01:34	2014-07-25 02:01:34
851	14	195	A COMMENT	\N	2014-07-14 02:52:03	2014-07-14 02:52:03
852	45	195	A COMMENT	\N	2014-07-14 21:03:39	2014-07-14 21:03:39
853	30	195	A COMMENT	\N	2014-07-15 06:23:49	2014-07-15 06:23:49
854	10	195	A COMMENT	\N	2014-07-15 20:59:48	2014-07-15 20:59:48
855	27	195	A COMMENT	\N	2014-07-16 21:15:54	2014-07-16 21:15:54
856	37	195	A COMMENT	\N	2014-07-17 06:49:09	2014-07-17 06:49:09
857	8	195	A COMMENT	\N	2014-07-18 02:30:15	2014-07-18 02:30:15
858	39	195	A COMMENT	\N	2014-07-18 19:24:10	2014-07-18 19:24:10
859	45	195	A COMMENT	\N	2014-07-19 22:48:25	2014-07-19 22:48:25
860	10	195	A COMMENT	\N	2014-07-20 10:27:23	2014-07-20 10:27:23
861	4	195	A COMMENT	\N	2014-07-20 12:45:26	2014-07-20 12:45:26
862	2	195	A COMMENT	\N	2014-07-20 23:09:41	2014-07-20 23:09:41
863	47	195	A COMMENT	\N	2014-07-23 00:01:34	2014-07-23 00:01:34
864	4	195	A COMMENT	\N	2014-07-24 17:31:51	2014-07-24 17:31:51
865	47	195	A COMMENT	\N	2014-07-24 23:22:54	2014-07-24 23:22:54
866	43	195	A COMMENT	\N	2014-07-25 00:10:37	2014-07-25 00:10:37
867	21	195	A COMMENT	\N	2014-07-25 07:28:01	2014-07-25 07:28:01
868	3	195	A COMMENT	\N	2014-07-25 15:08:50	2014-07-25 15:08:50
869	11	195	A COMMENT	\N	2014-07-26 05:23:31	2014-07-26 05:23:31
870	1	195	A COMMENT	\N	2014-07-26 13:08:47	2014-07-26 13:08:47
871	2	196	A COMMENT	\N	2014-07-16 00:36:57	2014-07-16 00:36:57
872	28	196	A COMMENT	\N	2014-07-16 05:01:36	2014-07-16 05:01:36
873	8	196	A COMMENT	\N	2014-07-16 17:40:18	2014-07-16 17:40:18
874	4	196	A COMMENT	\N	2014-07-18 06:41:36	2014-07-18 06:41:36
875	28	196	A COMMENT	\N	2014-07-20 15:34:17	2014-07-20 15:34:17
876	1	196	A COMMENT	\N	2014-07-22 12:07:39	2014-07-22 12:07:39
877	37	196	A COMMENT	\N	2014-07-24 09:09:15	2014-07-24 09:09:15
878	37	196	A COMMENT	\N	2014-07-25 05:30:16	2014-07-25 05:30:16
879	27	196	A COMMENT	\N	2014-07-26 12:50:44	2014-07-26 12:50:44
880	39	197	A COMMENT	\N	2014-07-14 15:08:05	2014-07-14 15:08:05
881	39	198	A COMMENT	\N	2014-07-15 07:35:27	2014-07-15 07:35:27
882	45	198	A COMMENT	\N	2014-07-16 21:39:07	2014-07-16 21:39:07
883	2	200	A COMMENT	\N	2014-06-05 00:31:43	2014-06-05 00:31:43
884	30	200	A COMMENT	\N	2014-06-22 06:07:39	2014-06-22 06:07:39
885	1	200	A COMMENT	\N	2014-07-21 17:56:44	2014-07-21 17:56:44
886	14	201	A COMMENT	\N	2014-06-16 17:25:48	2014-06-16 17:25:48
887	4	201	A COMMENT	\N	2014-06-24 10:56:02	2014-06-24 10:56:02
888	10	201	A COMMENT	\N	2014-06-30 09:35:16	2014-06-30 09:35:16
889	43	201	A COMMENT	\N	2014-06-30 16:28:55	2014-06-30 16:28:55
890	47	201	A COMMENT	\N	2014-07-18 17:47:08	2014-07-18 17:47:08
891	43	204	A COMMENT	\N	2014-07-12 00:35:59	2014-07-12 00:35:59
892	2	205	A COMMENT	\N	2014-06-22 17:53:12	2014-06-22 17:53:12
893	3	205	A COMMENT	\N	2014-06-28 21:28:33	2014-06-28 21:28:33
894	39	205	A COMMENT	\N	2014-07-03 14:37:58	2014-07-03 14:37:58
895	37	205	A COMMENT	\N	2014-07-04 12:56:21	2014-07-04 12:56:21
896	28	205	A COMMENT	\N	2014-07-04 19:32:05	2014-07-04 19:32:05
897	21	205	A COMMENT	\N	2014-07-19 19:18:57	2014-07-19 19:18:57
898	39	206	A COMMENT	\N	2014-06-27 08:53:10	2014-06-27 08:53:10
899	30	206	A COMMENT	\N	2014-06-28 08:20:35	2014-06-28 08:20:35
900	43	206	A COMMENT	\N	2014-06-29 17:44:01	2014-06-29 17:44:01
901	14	206	A COMMENT	\N	2014-07-01 12:54:27	2014-07-01 12:54:27
902	32	206	A COMMENT	\N	2014-07-02 09:59:44	2014-07-02 09:59:44
903	30	206	A COMMENT	\N	2014-07-02 10:10:47	2014-07-02 10:10:47
904	2	206	A COMMENT	\N	2014-07-07 17:49:28	2014-07-07 17:49:28
905	43	206	A COMMENT	\N	2014-07-08 21:04:09	2014-07-08 21:04:09
906	45	206	A COMMENT	\N	2014-07-09 06:08:09	2014-07-09 06:08:09
907	28	206	A COMMENT	\N	2014-07-11 18:19:56	2014-07-11 18:19:56
908	27	206	A COMMENT	\N	2014-07-14 05:17:53	2014-07-14 05:17:53
909	1	206	A COMMENT	\N	2014-07-14 14:25:08	2014-07-14 14:25:08
910	39	206	A COMMENT	\N	2014-07-20 17:38:03	2014-07-20 17:38:03
911	2	206	A COMMENT	\N	2014-07-23 18:16:06	2014-07-23 18:16:06
912	21	206	A COMMENT	\N	2014-07-24 05:40:02	2014-07-24 05:40:02
913	4	206	A COMMENT	\N	2014-07-25 09:57:27	2014-07-25 09:57:27
914	39	208	A COMMENT	\N	2014-05-24 01:48:59	2014-05-24 01:48:59
915	39	209	A COMMENT	\N	2014-05-24 18:55:03	2014-05-24 18:55:03
916	43	209	A COMMENT	\N	2014-05-28 00:53:40	2014-05-28 00:53:40
917	28	209	A COMMENT	\N	2014-06-03 07:34:21	2014-06-03 07:34:21
918	30	209	A COMMENT	\N	2014-06-15 03:28:28	2014-06-15 03:28:28
919	21	209	A COMMENT	\N	2014-07-17 04:05:35	2014-07-17 04:05:35
920	43	209	A COMMENT	\N	2014-07-17 21:04:12	2014-07-17 21:04:12
921	39	210	A COMMENT	\N	2014-06-29 02:14:44	2014-06-29 02:14:44
922	27	210	A COMMENT	\N	2014-07-20 23:59:43	2014-07-20 23:59:43
923	8	211	A COMMENT	\N	2014-05-31 08:25:49	2014-05-31 08:25:49
924	39	211	A COMMENT	\N	2014-06-01 06:25:43	2014-06-01 06:25:43
925	1	211	A COMMENT	\N	2014-07-04 06:08:50	2014-07-04 06:08:50
926	1	212	A COMMENT	\N	2014-05-25 12:14:34	2014-05-25 12:14:34
927	14	212	A COMMENT	\N	2014-05-30 22:55:40	2014-05-30 22:55:40
928	3	212	A COMMENT	\N	2014-06-03 18:20:10	2014-06-03 18:20:10
929	10	212	A COMMENT	\N	2014-06-09 08:12:03	2014-06-09 08:12:03
930	47	212	A COMMENT	\N	2014-06-11 21:48:12	2014-06-11 21:48:12
931	43	212	A COMMENT	\N	2014-06-17 00:43:33	2014-06-17 00:43:33
932	11	212	A COMMENT	\N	2014-06-20 19:50:25	2014-06-20 19:50:25
933	39	212	A COMMENT	\N	2014-06-22 12:04:55	2014-06-22 12:04:55
934	45	212	A COMMENT	\N	2014-06-24 14:12:56	2014-06-24 14:12:56
935	14	212	A COMMENT	\N	2014-07-01 00:56:26	2014-07-01 00:56:26
936	3	212	A COMMENT	\N	2014-07-03 06:39:25	2014-07-03 06:39:25
937	32	212	A COMMENT	\N	2014-07-09 10:02:55	2014-07-09 10:02:55
938	32	212	A COMMENT	\N	2014-07-15 19:49:31	2014-07-15 19:49:31
939	2	212	A COMMENT	\N	2014-07-18 10:38:17	2014-07-18 10:38:17
940	2	212	A COMMENT	\N	2014-07-18 21:39:32	2014-07-18 21:39:32
941	28	212	A COMMENT	\N	2014-07-21 13:16:52	2014-07-21 13:16:52
942	39	214	A COMMENT	\N	2014-06-22 13:07:20	2014-06-22 13:07:20
943	39	216	A COMMENT	\N	2014-07-14 12:43:02	2014-07-14 12:43:02
944	39	216	A COMMENT	\N	2014-07-17 03:53:48	2014-07-17 03:53:48
945	47	216	A COMMENT	\N	2014-07-18 19:37:39	2014-07-18 19:37:39
946	21	216	A COMMENT	\N	2014-07-19 07:14:33	2014-07-19 07:14:33
947	1	216	A COMMENT	\N	2014-07-20 06:46:57	2014-07-20 06:46:57
948	28	216	A COMMENT	\N	2014-07-20 22:50:45	2014-07-20 22:50:45
949	27	216	A COMMENT	\N	2014-07-23 02:44:02	2014-07-23 02:44:02
950	4	216	A COMMENT	\N	2014-07-23 22:03:24	2014-07-23 22:03:24
951	43	216	A COMMENT	\N	2014-07-24 20:00:47	2014-07-24 20:00:47
952	21	217	A COMMENT	\N	2014-06-24 03:41:42	2014-06-24 03:41:42
953	32	217	A COMMENT	\N	2014-06-26 02:41:02	2014-06-26 02:41:02
954	30	217	A COMMENT	\N	2014-06-28 21:35:19	2014-06-28 21:35:19
955	27	217	A COMMENT	\N	2014-06-30 18:57:29	2014-06-30 18:57:29
956	8	217	A COMMENT	\N	2014-07-23 22:25:23	2014-07-23 22:25:23
957	39	218	A COMMENT	\N	2014-05-19 19:30:46	2014-05-19 19:30:46
958	3	218	A COMMENT	\N	2014-05-22 12:22:29	2014-05-22 12:22:29
959	11	218	A COMMENT	\N	2014-05-24 19:58:40	2014-05-24 19:58:40
960	2	218	A COMMENT	\N	2014-05-24 20:06:49	2014-05-24 20:06:49
961	43	218	A COMMENT	\N	2014-05-26 02:49:53	2014-05-26 02:49:53
962	45	218	A COMMENT	\N	2014-05-27 07:17:48	2014-05-27 07:17:48
963	43	218	A COMMENT	\N	2014-06-15 16:51:05	2014-06-15 16:51:05
964	39	218	A COMMENT	\N	2014-06-20 01:15:51	2014-06-20 01:15:51
965	4	218	A COMMENT	\N	2014-07-01 12:22:09	2014-07-01 12:22:09
966	30	218	A COMMENT	\N	2014-07-11 13:15:07	2014-07-11 13:15:07
967	11	218	A COMMENT	\N	2014-07-17 23:55:27	2014-07-17 23:55:27
968	39	220	A COMMENT	\N	2014-07-02 12:30:13	2014-07-02 12:30:13
969	10	220	A COMMENT	\N	2014-07-06 06:14:01	2014-07-06 06:14:01
970	47	220	A COMMENT	\N	2014-07-09 17:27:57	2014-07-09 17:27:57
971	4	220	A COMMENT	\N	2014-07-10 04:44:19	2014-07-10 04:44:19
972	32	220	A COMMENT	\N	2014-07-12 03:47:06	2014-07-12 03:47:06
973	2	220	A COMMENT	\N	2014-07-12 19:02:20	2014-07-12 19:02:20
974	43	220	A COMMENT	\N	2014-07-14 00:11:33	2014-07-14 00:11:33
975	39	220	A COMMENT	\N	2014-07-14 17:32:35	2014-07-14 17:32:35
976	3	220	A COMMENT	\N	2014-07-16 09:59:32	2014-07-16 09:59:32
977	11	220	A COMMENT	\N	2014-07-19 13:04:33	2014-07-19 13:04:33
978	39	221	A COMMENT	\N	2014-06-26 06:21:40	2014-06-26 06:21:40
979	11	221	A COMMENT	\N	2014-06-30 18:21:38	2014-06-30 18:21:38
980	10	221	A COMMENT	\N	2014-07-14 11:31:47	2014-07-14 11:31:47
981	3	221	A COMMENT	\N	2014-07-18 17:14:04	2014-07-18 17:14:04
982	32	221	A COMMENT	\N	2014-07-23 05:36:42	2014-07-23 05:36:42
983	28	221	A COMMENT	\N	2014-07-23 11:56:55	2014-07-23 11:56:55
984	21	222	A COMMENT	\N	2014-07-14 03:10:19	2014-07-14 03:10:19
985	2	222	A COMMENT	\N	2014-07-15 15:35:54	2014-07-15 15:35:54
986	39	223	A COMMENT	\N	2014-06-26 07:26:42	2014-06-26 07:26:42
987	39	224	A COMMENT	\N	2014-06-01 13:23:11	2014-06-01 13:23:11
988	47	224	A COMMENT	\N	2014-06-05 02:25:06	2014-06-05 02:25:06
989	37	224	A COMMENT	\N	2014-06-07 13:59:38	2014-06-07 13:59:38
990	3	224	A COMMENT	\N	2014-06-08 03:16:50	2014-06-08 03:16:50
991	47	224	A COMMENT	\N	2014-06-11 07:26:21	2014-06-11 07:26:21
992	43	224	A COMMENT	\N	2014-06-12 15:19:44	2014-06-12 15:19:44
993	47	224	A COMMENT	\N	2014-06-15 13:08:02	2014-06-15 13:08:02
994	37	224	A COMMENT	\N	2014-06-20 19:17:06	2014-06-20 19:17:06
995	27	224	A COMMENT	\N	2014-06-21 22:27:13	2014-06-21 22:27:13
996	39	224	A COMMENT	\N	2014-06-22 11:11:31	2014-06-22 11:11:31
997	14	224	A COMMENT	\N	2014-06-25 05:55:52	2014-06-25 05:55:52
998	32	224	A COMMENT	\N	2014-06-29 21:45:57	2014-06-29 21:45:57
999	30	224	A COMMENT	\N	2014-07-15 16:18:15	2014-07-15 16:18:15
1000	11	224	A COMMENT	\N	2014-07-15 22:02:19	2014-07-15 22:02:19
1001	11	224	A COMMENT	\N	2014-07-17 05:03:40	2014-07-17 05:03:40
1002	8	224	A COMMENT	\N	2014-07-18 12:31:38	2014-07-18 12:31:38
1003	30	224	A COMMENT	\N	2014-07-23 17:33:57	2014-07-23 17:33:57
1004	2	224	A COMMENT	\N	2014-07-25 19:26:52	2014-07-25 19:26:52
1005	39	227	A COMMENT	\N	2014-06-16 03:44:53	2014-06-16 03:44:53
1006	2	227	A COMMENT	\N	2014-07-24 15:41:46	2014-07-24 15:41:46
1007	39	228	A COMMENT	\N	2014-06-22 19:22:37	2014-06-22 19:22:37
1008	45	228	A COMMENT	\N	2014-07-04 20:49:38	2014-07-04 20:49:38
1009	39	229	A COMMENT	\N	2014-05-20 20:41:47	2014-05-20 20:41:47
1010	14	229	A COMMENT	\N	2014-07-11 09:49:54	2014-07-11 09:49:54
1011	8	230	A COMMENT	\N	2014-06-22 18:50:45	2014-06-22 18:50:45
1012	43	231	A COMMENT	\N	2014-06-13 17:16:33	2014-06-13 17:16:33
1013	11	231	A COMMENT	\N	2014-06-25 07:18:57	2014-06-25 07:18:57
1014	47	231	A COMMENT	\N	2014-07-07 10:30:11	2014-07-07 10:30:11
1015	45	232	A COMMENT	\N	2014-05-08 13:23:30	2014-05-08 13:23:30
1016	4	232	A COMMENT	\N	2014-05-13 23:09:41	2014-05-13 23:09:41
1017	3	232	A COMMENT	\N	2014-05-28 14:55:03	2014-05-28 14:55:03
1018	30	232	A COMMENT	\N	2014-05-29 00:05:30	2014-05-29 00:05:30
1019	45	232	A COMMENT	\N	2014-06-25 23:06:50	2014-06-25 23:06:50
1020	43	232	A COMMENT	\N	2014-07-07 10:58:54	2014-07-07 10:58:54
1021	45	233	A COMMENT	\N	2014-06-24 16:20:10	2014-06-24 16:20:10
1022	43	233	A COMMENT	\N	2014-06-29 17:16:27	2014-06-29 17:16:27
1023	47	233	A COMMENT	\N	2014-07-04 10:08:18	2014-07-04 10:08:18
1024	11	233	A COMMENT	\N	2014-07-05 02:45:59	2014-07-05 02:45:59
1025	21	233	A COMMENT	\N	2014-07-08 08:45:51	2014-07-08 08:45:51
1026	39	233	A COMMENT	\N	2014-07-12 11:03:31	2014-07-12 11:03:31
1027	10	233	A COMMENT	\N	2014-07-25 23:24:11	2014-07-25 23:24:11
1028	27	234	A COMMENT	\N	2014-05-14 00:40:29	2014-05-14 00:40:29
1029	37	234	A COMMENT	\N	2014-05-16 07:04:27	2014-05-16 07:04:27
1030	14	234	A COMMENT	\N	2014-05-16 17:07:27	2014-05-16 17:07:27
1031	1	234	A COMMENT	\N	2014-05-24 16:32:18	2014-05-24 16:32:18
1032	32	234	A COMMENT	\N	2014-06-06 09:28:00	2014-06-06 09:28:00
1033	21	234	A COMMENT	\N	2014-06-26 02:06:44	2014-06-26 02:06:44
1034	32	234	A COMMENT	\N	2014-07-19 21:25:59	2014-07-19 21:25:59
1035	37	234	A COMMENT	\N	2014-07-20 10:51:03	2014-07-20 10:51:03
1036	3	235	A COMMENT	\N	2014-06-10 12:19:42	2014-06-10 12:19:42
1037	3	235	A COMMENT	\N	2014-06-11 15:28:48	2014-06-11 15:28:48
1038	11	235	A COMMENT	\N	2014-06-13 05:44:19	2014-06-13 05:44:19
1039	10	235	A COMMENT	\N	2014-06-13 19:05:44	2014-06-13 19:05:44
1040	4	235	A COMMENT	\N	2014-06-16 22:28:05	2014-06-16 22:28:05
1041	43	235	A COMMENT	\N	2014-06-27 00:08:33	2014-06-27 00:08:33
1042	28	235	A COMMENT	\N	2014-07-02 03:30:51	2014-07-02 03:30:51
1043	21	235	A COMMENT	\N	2014-07-09 17:09:26	2014-07-09 17:09:26
1044	11	235	A COMMENT	\N	2014-07-14 21:51:11	2014-07-14 21:51:11
1045	10	235	A COMMENT	\N	2014-07-26 19:23:28	2014-07-26 19:23:28
1046	1	236	A COMMENT	\N	2014-06-13 11:51:02	2014-06-13 11:51:02
1047	37	237	A COMMENT	\N	2014-04-26 23:23:09	2014-04-26 23:23:09
1048	27	237	A COMMENT	\N	2014-05-29 01:35:47	2014-05-29 01:35:47
1049	2	237	A COMMENT	\N	2014-06-26 17:38:33	2014-06-26 17:38:33
1050	37	237	A COMMENT	\N	2014-07-10 07:51:35	2014-07-10 07:51:35
1051	45	238	A COMMENT	\N	2014-04-15 07:53:09	2014-04-15 07:53:09
1052	47	240	A COMMENT	\N	2014-04-23 06:05:18	2014-04-23 06:05:18
1053	47	240	A COMMENT	\N	2014-05-24 16:20:13	2014-05-24 16:20:13
1054	2	240	A COMMENT	\N	2014-06-18 09:55:22	2014-06-18 09:55:22
1055	47	242	A COMMENT	\N	2013-12-20 09:48:32	2013-12-20 09:48:32
1056	2	244	A COMMENT	\N	2014-02-21 01:15:47	2014-02-21 01:15:47
1057	45	244	A COMMENT	\N	2014-02-21 11:44:29	2014-02-21 11:44:29
1058	32	244	A COMMENT	\N	2014-04-11 05:45:41	2014-04-11 05:45:41
1059	21	245	A COMMENT	\N	2014-03-10 06:37:18	2014-03-10 06:37:18
1060	2	245	A COMMENT	\N	2014-05-03 19:14:00	2014-05-03 19:14:00
1061	10	245	A COMMENT	\N	2014-06-05 15:01:03	2014-06-05 15:01:03
1062	8	245	A COMMENT	\N	2014-07-25 08:29:35	2014-07-25 08:29:35
1063	47	247	A COMMENT	\N	2014-03-26 22:42:29	2014-03-26 22:42:29
1064	45	247	A COMMENT	\N	2014-06-07 21:19:39	2014-06-07 21:19:39
1065	48	248	A COMMENT	\N	2014-04-12 09:03:54	2014-04-12 09:03:54
1066	39	248	A COMMENT	\N	2014-05-07 13:46:06	2014-05-07 13:46:06
1067	27	248	A COMMENT	\N	2014-06-26 06:32:08	2014-06-26 06:32:08
1068	48	250	A COMMENT	\N	2014-06-04 22:18:24	2014-06-04 22:18:24
1069	11	250	A COMMENT	\N	2014-06-28 09:49:38	2014-06-28 09:49:38
1070	28	250	A COMMENT	\N	2014-07-03 05:30:31	2014-07-03 05:30:31
1071	39	250	A COMMENT	\N	2014-07-08 13:24:58	2014-07-08 13:24:58
1072	10	250	A COMMENT	\N	2014-07-18 04:09:10	2014-07-18 04:09:10
1073	14	250	A COMMENT	\N	2014-07-18 11:34:07	2014-07-18 11:34:07
1074	2	251	A COMMENT	\N	2014-06-27 18:50:43	2014-06-27 18:50:43
1075	48	253	A COMMENT	\N	2014-06-12 11:50:38	2014-06-12 11:50:38
1076	37	253	A COMMENT	\N	2014-06-12 23:36:51	2014-06-12 23:36:51
1077	11	253	A COMMENT	\N	2014-06-15 13:34:57	2014-06-15 13:34:57
1078	43	253	A COMMENT	\N	2014-06-22 20:29:27	2014-06-22 20:29:27
1079	32	253	A COMMENT	\N	2014-06-24 10:29:28	2014-06-24 10:29:28
1080	47	253	A COMMENT	\N	2014-06-24 15:08:14	2014-06-24 15:08:14
1081	8	253	A COMMENT	\N	2014-06-28 17:57:57	2014-06-28 17:57:57
1082	27	253	A COMMENT	\N	2014-07-07 06:09:21	2014-07-07 06:09:21
1083	4	253	A COMMENT	\N	2014-07-16 11:03:09	2014-07-16 11:03:09
1084	30	253	A COMMENT	\N	2014-07-17 15:44:30	2014-07-17 15:44:30
1085	27	253	A COMMENT	\N	2014-07-18 12:37:11	2014-07-18 12:37:11
1086	14	253	A COMMENT	\N	2014-07-25 08:22:15	2014-07-25 08:22:15
1087	14	253	A COMMENT	\N	2014-07-26 14:06:34	2014-07-26 14:06:34
1088	48	254	A COMMENT	\N	2014-07-06 06:46:48	2014-07-06 06:46:48
1089	10	254	A COMMENT	\N	2014-07-08 13:39:35	2014-07-08 13:39:35
1090	3	254	A COMMENT	\N	2014-07-10 09:41:50	2014-07-10 09:41:50
1091	45	254	A COMMENT	\N	2014-07-10 18:07:51	2014-07-10 18:07:51
1092	3	254	A COMMENT	\N	2014-07-11 05:02:26	2014-07-11 05:02:26
1093	39	254	A COMMENT	\N	2014-07-16 01:08:23	2014-07-16 01:08:23
1094	43	254	A COMMENT	\N	2014-07-17 03:07:14	2014-07-17 03:07:14
1095	8	254	A COMMENT	\N	2014-07-19 10:57:27	2014-07-19 10:57:27
1096	10	254	A COMMENT	\N	2014-07-20 01:20:15	2014-07-20 01:20:15
1097	37	254	A COMMENT	\N	2014-07-23 13:07:03	2014-07-23 13:07:03
1098	48	255	A COMMENT	\N	2014-07-17 06:19:44	2014-07-17 06:19:44
1099	48	256	A COMMENT	\N	2014-03-28 11:15:31	2014-03-28 11:15:31
1100	45	256	A COMMENT	\N	2014-03-28 22:39:13	2014-03-28 22:39:13
1101	10	256	A COMMENT	\N	2014-03-30 14:45:25	2014-03-30 14:45:25
1102	3	256	A COMMENT	\N	2014-04-05 07:04:17	2014-04-05 07:04:17
1103	30	256	A COMMENT	\N	2014-05-04 18:52:22	2014-05-04 18:52:22
1104	1	256	A COMMENT	\N	2014-05-06 15:35:45	2014-05-06 15:35:45
1105	27	256	A COMMENT	\N	2014-05-12 22:27:11	2014-05-12 22:27:11
1106	37	256	A COMMENT	\N	2014-05-30 20:23:31	2014-05-30 20:23:31
1107	39	256	A COMMENT	\N	2014-06-10 03:17:00	2014-06-10 03:17:00
1108	10	256	A COMMENT	\N	2014-06-14 18:29:25	2014-06-14 18:29:25
1109	1	256	A COMMENT	\N	2014-06-25 17:21:50	2014-06-25 17:21:50
1110	27	256	A COMMENT	\N	2014-07-14 06:19:42	2014-07-14 06:19:42
1111	37	257	A COMMENT	\N	2014-05-01 19:55:10	2014-05-01 19:55:10
1112	39	257	A COMMENT	\N	2014-05-29 19:52:37	2014-05-29 19:52:37
1113	8	257	A COMMENT	\N	2014-06-20 18:03:35	2014-06-20 18:03:35
1114	4	257	A COMMENT	\N	2014-07-05 03:57:01	2014-07-05 03:57:01
1115	39	257	A COMMENT	\N	2014-07-24 17:07:32	2014-07-24 17:07:32
1116	48	258	A COMMENT	\N	2014-06-20 08:33:52	2014-06-20 08:33:52
1117	28	262	A COMMENT	\N	2014-05-11 09:58:51	2014-05-11 09:58:51
1118	3	262	A COMMENT	\N	2014-05-12 12:11:19	2014-05-12 12:11:19
1119	39	262	A COMMENT	\N	2014-05-21 17:13:32	2014-05-21 17:13:32
1120	37	262	A COMMENT	\N	2014-05-22 21:08:24	2014-05-22 21:08:24
1121	30	262	A COMMENT	\N	2014-05-24 16:50:34	2014-05-24 16:50:34
1122	3	262	A COMMENT	\N	2014-05-26 14:16:06	2014-05-26 14:16:06
1123	1	262	A COMMENT	\N	2014-06-02 16:41:43	2014-06-02 16:41:43
1124	32	262	A COMMENT	\N	2014-06-09 07:16:38	2014-06-09 07:16:38
1125	43	262	A COMMENT	\N	2014-06-12 16:48:20	2014-06-12 16:48:20
1126	2	262	A COMMENT	\N	2014-06-30 13:08:49	2014-06-30 13:08:49
1127	45	262	A COMMENT	\N	2014-07-05 08:02:17	2014-07-05 08:02:17
1128	43	262	A COMMENT	\N	2014-07-12 18:56:21	2014-07-12 18:56:21
1129	11	262	A COMMENT	\N	2014-07-15 20:32:15	2014-07-15 20:32:15
1130	28	262	A COMMENT	\N	2014-07-16 04:17:09	2014-07-16 04:17:09
1131	47	262	A COMMENT	\N	2014-07-20 04:53:31	2014-07-20 04:53:31
1132	1	262	A COMMENT	\N	2014-07-24 23:44:59	2014-07-24 23:44:59
1133	47	262	A COMMENT	\N	2014-07-25 14:28:47	2014-07-25 14:28:47
1134	25	263	A COMMENT	\N	2013-12-25 12:37:07	2013-12-25 12:37:07
1135	1	263	A COMMENT	\N	2014-01-25 04:08:58	2014-01-25 04:08:58
1136	45	263	A COMMENT	\N	2014-07-04 12:44:53	2014-07-04 12:44:53
1137	37	264	A COMMENT	\N	2014-01-31 17:49:55	2014-01-31 17:49:55
1138	39	264	A COMMENT	\N	2014-02-05 07:43:04	2014-02-05 07:43:04
1139	21	264	A COMMENT	\N	2014-02-28 18:35:38	2014-02-28 18:35:38
1140	27	264	A COMMENT	\N	2014-04-21 09:30:58	2014-04-21 09:30:58
1141	1	264	A COMMENT	\N	2014-04-23 02:59:50	2014-04-23 02:59:50
1142	8	264	A COMMENT	\N	2014-05-10 06:31:19	2014-05-10 06:31:19
1143	32	264	A COMMENT	\N	2014-06-03 06:40:25	2014-06-03 06:40:25
1144	30	264	A COMMENT	\N	2014-06-18 00:57:15	2014-06-18 00:57:15
1145	1	264	A COMMENT	\N	2014-07-20 19:48:58	2014-07-20 19:48:58
1146	25	265	A COMMENT	\N	2014-01-02 04:47:48	2014-01-02 04:47:48
1147	30	266	A COMMENT	\N	2014-03-28 17:53:24	2014-03-28 17:53:24
1148	1	266	A COMMENT	\N	2014-05-04 17:57:44	2014-05-04 17:57:44
1149	3	266	A COMMENT	\N	2014-05-07 19:05:06	2014-05-07 19:05:06
1150	11	266	A COMMENT	\N	2014-06-14 14:12:57	2014-06-14 14:12:57
1151	45	267	A COMMENT	\N	2014-06-19 16:17:24	2014-06-19 16:17:24
1152	3	268	A COMMENT	\N	2014-04-23 11:00:50	2014-04-23 11:00:50
1153	10	268	A COMMENT	\N	2014-05-12 01:38:19	2014-05-12 01:38:19
1154	32	268	A COMMENT	\N	2014-05-12 04:46:57	2014-05-12 04:46:57
1155	3	268	A COMMENT	\N	2014-05-21 20:28:42	2014-05-21 20:28:42
1156	28	268	A COMMENT	\N	2014-05-27 04:04:48	2014-05-27 04:04:48
1157	4	268	A COMMENT	\N	2014-06-01 13:32:13	2014-06-01 13:32:13
1158	1	268	A COMMENT	\N	2014-06-09 09:22:52	2014-06-09 09:22:52
1159	2	268	A COMMENT	\N	2014-06-21 23:04:13	2014-06-21 23:04:13
1160	27	268	A COMMENT	\N	2014-06-24 03:01:11	2014-06-24 03:01:11
1161	47	268	A COMMENT	\N	2014-06-24 15:55:50	2014-06-24 15:55:50
1162	2	268	A COMMENT	\N	2014-06-30 16:20:22	2014-06-30 16:20:22
1163	4	268	A COMMENT	\N	2014-07-15 06:05:42	2014-07-15 06:05:42
1164	10	268	A COMMENT	\N	2014-07-21 19:11:38	2014-07-21 19:11:38
1165	2	269	A COMMENT	\N	2014-03-12 06:43:24	2014-03-12 06:43:24
1166	3	269	A COMMENT	\N	2014-03-27 16:54:22	2014-03-27 16:54:22
1167	3	269	A COMMENT	\N	2014-04-02 02:57:19	2014-04-02 02:57:19
1168	2	269	A COMMENT	\N	2014-04-07 18:39:13	2014-04-07 18:39:13
1169	14	269	A COMMENT	\N	2014-04-07 21:12:28	2014-04-07 21:12:28
1170	39	269	A COMMENT	\N	2014-04-14 19:24:36	2014-04-14 19:24:36
1171	11	269	A COMMENT	\N	2014-04-21 11:40:04	2014-04-21 11:40:04
1172	8	269	A COMMENT	\N	2014-04-28 05:52:29	2014-04-28 05:52:29
1173	4	269	A COMMENT	\N	2014-05-27 08:25:27	2014-05-27 08:25:27
1174	45	269	A COMMENT	\N	2014-05-29 08:27:30	2014-05-29 08:27:30
1175	32	269	A COMMENT	\N	2014-06-06 23:45:54	2014-06-06 23:45:54
1176	21	270	A COMMENT	\N	2014-04-02 02:32:01	2014-04-02 02:32:01
1177	43	270	A COMMENT	\N	2014-04-03 09:00:19	2014-04-03 09:00:19
1178	25	271	A COMMENT	\N	2014-04-29 18:28:31	2014-04-29 18:28:31
1179	39	271	A COMMENT	\N	2014-05-04 07:10:19	2014-05-04 07:10:19
1180	27	271	A COMMENT	\N	2014-07-07 15:22:33	2014-07-07 15:22:33
1181	45	271	A COMMENT	\N	2014-07-22 19:36:30	2014-07-22 19:36:30
1182	47	271	A COMMENT	\N	2014-07-26 00:36:18	2014-07-26 00:36:18
1183	6	272	A COMMENT	\N	2014-07-21 08:56:06	2014-07-21 08:56:06
1184	10	273	A COMMENT	\N	2014-07-22 08:13:02	2014-07-22 08:13:02
1185	21	273	A COMMENT	\N	2014-07-22 17:22:53	2014-07-22 17:22:53
1186	30	273	A COMMENT	\N	2014-07-22 18:42:10	2014-07-22 18:42:10
1187	11	273	A COMMENT	\N	2014-07-23 00:02:47	2014-07-23 00:02:47
1188	4	273	A COMMENT	\N	2014-07-23 01:12:12	2014-07-23 01:12:12
1189	43	273	A COMMENT	\N	2014-07-23 21:41:32	2014-07-23 21:41:32
1190	14	273	A COMMENT	\N	2014-07-24 01:38:16	2014-07-24 01:38:16
1191	37	273	A COMMENT	\N	2014-07-24 20:44:25	2014-07-24 20:44:25
1192	3	273	A COMMENT	\N	2014-07-24 21:23:15	2014-07-24 21:23:15
1193	3	273	A COMMENT	\N	2014-07-24 22:15:02	2014-07-24 22:15:02
1194	43	273	A COMMENT	\N	2014-07-25 00:06:17	2014-07-25 00:06:17
1195	30	273	A COMMENT	\N	2014-07-25 06:04:29	2014-07-25 06:04:29
1196	37	273	A COMMENT	\N	2014-07-25 21:08:04	2014-07-25 21:08:04
1197	47	273	A COMMENT	\N	2014-07-25 23:11:44	2014-07-25 23:11:44
1198	10	273	A COMMENT	\N	2014-07-26 04:36:20	2014-07-26 04:36:20
1199	45	273	A COMMENT	\N	2014-07-26 06:30:29	2014-07-26 06:30:29
1200	27	273	A COMMENT	\N	2014-07-26 07:11:11	2014-07-26 07:11:11
1201	8	273	A COMMENT	\N	2014-07-26 10:30:11	2014-07-26 10:30:11
1202	6	274	A COMMENT	\N	2014-07-22 07:59:16	2014-07-22 07:59:16
1203	28	274	A COMMENT	\N	2014-07-24 00:33:36	2014-07-24 00:33:36
1204	27	274	A COMMENT	\N	2014-07-25 02:20:43	2014-07-25 02:20:43
1205	2	274	A COMMENT	\N	2014-07-25 09:15:35	2014-07-25 09:15:35
1206	22	275	A COMMENT	\N	2014-07-18 05:03:18	2014-07-18 05:03:18
1207	3	275	A COMMENT	\N	2014-07-19 02:59:47	2014-07-19 02:59:47
1208	45	275	A COMMENT	\N	2014-07-19 15:49:14	2014-07-19 15:49:14
1209	32	275	A COMMENT	\N	2014-07-19 19:46:58	2014-07-19 19:46:58
1210	32	275	A COMMENT	\N	2014-07-26 10:51:45	2014-07-26 10:51:45
1211	22	280	A COMMENT	\N	2014-07-16 21:21:19	2014-07-16 21:21:19
1212	14	280	A COMMENT	\N	2014-07-17 22:49:19	2014-07-17 22:49:19
1213	27	280	A COMMENT	\N	2014-07-18 05:30:44	2014-07-18 05:30:44
1214	39	280	A COMMENT	\N	2014-07-18 14:40:54	2014-07-18 14:40:54
1215	10	280	A COMMENT	\N	2014-07-19 05:19:53	2014-07-19 05:19:53
1216	27	280	A COMMENT	\N	2014-07-19 23:09:47	2014-07-19 23:09:47
1217	47	280	A COMMENT	\N	2014-07-21 05:25:14	2014-07-21 05:25:14
1218	11	280	A COMMENT	\N	2014-07-21 23:14:11	2014-07-21 23:14:11
1219	3	280	A COMMENT	\N	2014-07-22 01:05:48	2014-07-22 01:05:48
1220	43	280	A COMMENT	\N	2014-07-22 01:57:01	2014-07-22 01:57:01
1221	28	280	A COMMENT	\N	2014-07-22 18:25:48	2014-07-22 18:25:48
1222	32	280	A COMMENT	\N	2014-07-23 14:15:44	2014-07-23 14:15:44
1223	45	280	A COMMENT	\N	2014-07-23 18:13:55	2014-07-23 18:13:55
1224	21	280	A COMMENT	\N	2014-07-24 07:55:32	2014-07-24 07:55:32
1225	32	280	A COMMENT	\N	2014-07-25 13:46:58	2014-07-25 13:46:58
1226	2	280	A COMMENT	\N	2014-07-26 09:56:55	2014-07-26 09:56:55
1227	32	281	A COMMENT	\N	2014-06-23 08:57:28	2014-06-23 08:57:28
1228	45	281	A COMMENT	\N	2014-06-28 19:23:32	2014-06-28 19:23:32
1229	28	281	A COMMENT	\N	2014-06-29 06:55:50	2014-06-29 06:55:50
1230	43	281	A COMMENT	\N	2014-06-29 15:29:52	2014-06-29 15:29:52
1231	3	281	A COMMENT	\N	2014-06-29 16:13:32	2014-06-29 16:13:32
1232	27	281	A COMMENT	\N	2014-07-01 19:48:46	2014-07-01 19:48:46
1233	1	281	A COMMENT	\N	2014-07-03 10:59:12	2014-07-03 10:59:12
1234	2	281	A COMMENT	\N	2014-07-09 05:50:28	2014-07-09 05:50:28
1235	11	281	A COMMENT	\N	2014-07-11 23:33:13	2014-07-11 23:33:13
1236	3	281	A COMMENT	\N	2014-07-26 09:20:22	2014-07-26 09:20:22
1237	22	282	A COMMENT	\N	2014-05-20 09:36:07	2014-05-20 09:36:07
1238	28	283	A COMMENT	\N	2014-06-25 08:48:40	2014-06-25 08:48:40
1239	39	283	A COMMENT	\N	2014-07-13 20:46:25	2014-07-13 20:46:25
1240	28	284	A COMMENT	\N	2014-06-30 22:59:54	2014-06-30 22:59:54
1241	1	284	A COMMENT	\N	2014-07-08 10:58:26	2014-07-08 10:58:26
1242	14	284	A COMMENT	\N	2014-07-08 15:15:15	2014-07-08 15:15:15
1243	14	284	A COMMENT	\N	2014-07-19 18:29:25	2014-07-19 18:29:25
1244	39	284	A COMMENT	\N	2014-07-24 17:01:57	2014-07-24 17:01:57
1245	45	286	A COMMENT	\N	2014-05-26 18:06:13	2014-05-26 18:06:13
1246	2	286	A COMMENT	\N	2014-06-21 10:10:53	2014-06-21 10:10:53
1247	28	286	A COMMENT	\N	2014-07-20 07:13:21	2014-07-20 07:13:21
1248	21	286	A COMMENT	\N	2014-07-21 04:10:05	2014-07-21 04:10:05
1249	43	287	A COMMENT	\N	2014-05-13 09:00:47	2014-05-13 09:00:47
1250	4	287	A COMMENT	\N	2014-05-26 23:54:02	2014-05-26 23:54:02
1251	8	287	A COMMENT	\N	2014-06-23 10:34:47	2014-06-23 10:34:47
1252	28	287	A COMMENT	\N	2014-07-02 07:24:29	2014-07-02 07:24:29
1253	37	287	A COMMENT	\N	2014-07-08 11:35:51	2014-07-08 11:35:51
1254	47	287	A COMMENT	\N	2014-07-08 16:47:35	2014-07-08 16:47:35
1255	32	287	A COMMENT	\N	2014-07-15 19:10:42	2014-07-15 19:10:42
1256	14	287	A COMMENT	\N	2014-07-22 04:28:16	2014-07-22 04:28:16
1257	2	287	A COMMENT	\N	2014-07-23 03:21:17	2014-07-23 03:21:17
1258	8	288	A COMMENT	\N	2014-07-08 08:36:04	2014-07-08 08:36:04
1259	37	288	A COMMENT	\N	2014-07-08 09:40:12	2014-07-08 09:40:12
1260	39	288	A COMMENT	\N	2014-07-26 14:21:48	2014-07-26 14:21:48
1261	27	289	A COMMENT	\N	2014-07-24 10:11:01	2014-07-24 10:11:01
1262	1	291	A COMMENT	\N	2014-06-18 14:51:38	2014-06-18 14:51:38
1263	37	291	A COMMENT	\N	2014-06-24 03:28:40	2014-06-24 03:28:40
1264	2	291	A COMMENT	\N	2014-06-25 09:41:23	2014-06-25 09:41:23
1265	3	291	A COMMENT	\N	2014-07-13 01:03:20	2014-07-13 01:03:20
1266	22	292	A COMMENT	\N	2014-05-12 16:34:51	2014-05-12 16:34:51
1267	14	293	A COMMENT	\N	2014-05-25 20:45:36	2014-05-25 20:45:36
1268	10	293	A COMMENT	\N	2014-05-27 11:27:16	2014-05-27 11:27:16
1269	1	293	A COMMENT	\N	2014-06-06 04:14:43	2014-06-06 04:14:43
1270	32	293	A COMMENT	\N	2014-06-08 11:50:57	2014-06-08 11:50:57
1271	3	293	A COMMENT	\N	2014-06-16 07:56:48	2014-06-16 07:56:48
1272	4	293	A COMMENT	\N	2014-07-10 16:24:10	2014-07-10 16:24:10
1273	11	293	A COMMENT	\N	2014-07-13 13:58:02	2014-07-13 13:58:02
1274	45	293	A COMMENT	\N	2014-07-25 23:51:33	2014-07-25 23:51:33
1275	22	294	A COMMENT	\N	2014-05-28 18:28:49	2014-05-28 18:28:49
1276	3	294	A COMMENT	\N	2014-07-16 16:45:34	2014-07-16 16:45:34
1277	30	294	A COMMENT	\N	2014-07-25 21:27:58	2014-07-25 21:27:58
1278	28	294	A COMMENT	\N	2014-07-25 22:33:12	2014-07-25 22:33:12
1279	4	295	A COMMENT	\N	2014-07-10 22:52:54	2014-07-10 22:52:54
1280	28	295	A COMMENT	\N	2014-07-24 19:10:30	2014-07-24 19:10:30
1281	22	297	A COMMENT	\N	2014-05-08 08:38:55	2014-05-08 08:38:55
1282	14	297	A COMMENT	\N	2014-05-08 15:26:59	2014-05-08 15:26:59
1283	8	297	A COMMENT	\N	2014-05-24 16:40:36	2014-05-24 16:40:36
1284	21	297	A COMMENT	\N	2014-06-01 02:10:39	2014-06-01 02:10:39
1285	47	297	A COMMENT	\N	2014-06-07 16:30:43	2014-06-07 16:30:43
1286	27	297	A COMMENT	\N	2014-06-25 21:52:25	2014-06-25 21:52:25
1287	37	297	A COMMENT	\N	2014-06-26 07:54:13	2014-06-26 07:54:13
1288	39	297	A COMMENT	\N	2014-07-10 21:03:11	2014-07-10 21:03:11
1289	37	297	A COMMENT	\N	2014-07-11 23:29:34	2014-07-11 23:29:34
1290	11	297	A COMMENT	\N	2014-07-19 18:43:11	2014-07-19 18:43:11
1291	22	298	A COMMENT	\N	2014-05-10 08:45:27	2014-05-10 08:45:27
1292	1	298	A COMMENT	\N	2014-05-25 06:56:43	2014-05-25 06:56:43
1293	8	298	A COMMENT	\N	2014-05-30 02:03:30	2014-05-30 02:03:30
1294	3	298	A COMMENT	\N	2014-06-01 12:54:30	2014-06-01 12:54:30
1295	27	298	A COMMENT	\N	2014-06-05 10:44:11	2014-06-05 10:44:11
1296	21	298	A COMMENT	\N	2014-06-18 23:46:31	2014-06-18 23:46:31
1297	37	298	A COMMENT	\N	2014-06-30 15:03:57	2014-06-30 15:03:57
1298	39	298	A COMMENT	\N	2014-07-11 11:32:50	2014-07-11 11:32:50
1299	39	298	A COMMENT	\N	2014-07-16 14:18:27	2014-07-16 14:18:27
1300	10	298	A COMMENT	\N	2014-07-21 20:38:15	2014-07-21 20:38:15
1301	10	298	A COMMENT	\N	2014-07-23 12:09:13	2014-07-23 12:09:13
1302	39	299	A COMMENT	\N	2014-06-09 15:28:31	2014-06-09 15:28:31
1303	21	299	A COMMENT	\N	2014-06-29 02:44:53	2014-06-29 02:44:53
1304	4	299	A COMMENT	\N	2014-07-20 15:56:03	2014-07-20 15:56:03
1305	1	300	A COMMENT	\N	2014-06-10 04:05:39	2014-06-10 04:05:39
1306	3	300	A COMMENT	\N	2014-06-30 07:49:19	2014-06-30 07:49:19
1307	43	300	A COMMENT	\N	2014-07-10 10:15:52	2014-07-10 10:15:52
1308	45	300	A COMMENT	\N	2014-07-18 04:31:51	2014-07-18 04:31:51
1309	30	300	A COMMENT	\N	2014-07-19 17:39:59	2014-07-19 17:39:59
1310	22	301	A COMMENT	\N	2014-06-02 06:13:59	2014-06-02 06:13:59
1311	22	302	A COMMENT	\N	2014-06-18 05:02:57	2014-06-18 05:02:57
1312	32	303	A COMMENT	\N	2014-06-30 02:49:23	2014-06-30 02:49:23
1313	30	303	A COMMENT	\N	2014-07-02 02:59:51	2014-07-02 02:59:51
1314	37	303	A COMMENT	\N	2014-07-08 18:43:01	2014-07-08 18:43:01
1315	8	303	A COMMENT	\N	2014-07-20 16:21:48	2014-07-20 16:21:48
1316	43	303	A COMMENT	\N	2014-07-23 20:39:25	2014-07-23 20:39:25
1317	30	303	A COMMENT	\N	2014-07-24 07:02:32	2014-07-24 07:02:32
1318	37	303	A COMMENT	\N	2014-07-26 12:50:58	2014-07-26 12:50:58
1319	22	304	A COMMENT	\N	2014-07-07 12:19:56	2014-07-07 12:19:56
1320	3	304	A COMMENT	\N	2014-07-08 00:53:14	2014-07-08 00:53:14
1321	21	304	A COMMENT	\N	2014-07-16 16:51:25	2014-07-16 16:51:25
1322	4	304	A COMMENT	\N	2014-07-21 12:05:51	2014-07-21 12:05:51
1323	32	304	A COMMENT	\N	2014-07-22 18:32:30	2014-07-22 18:32:30
1324	3	305	A COMMENT	\N	2014-06-06 10:37:44	2014-06-06 10:37:44
1325	14	305	A COMMENT	\N	2014-06-13 17:10:49	2014-06-13 17:10:49
1326	30	305	A COMMENT	\N	2014-06-22 15:46:29	2014-06-22 15:46:29
1327	8	305	A COMMENT	\N	2014-06-26 23:02:44	2014-06-26 23:02:44
1328	28	305	A COMMENT	\N	2014-06-28 10:50:29	2014-06-28 10:50:29
1329	43	305	A COMMENT	\N	2014-07-07 07:46:38	2014-07-07 07:46:38
1330	2	305	A COMMENT	\N	2014-07-09 22:16:26	2014-07-09 22:16:26
1331	30	305	A COMMENT	\N	2014-07-10 04:13:59	2014-07-10 04:13:59
1332	3	305	A COMMENT	\N	2014-07-11 10:15:24	2014-07-11 10:15:24
1333	39	305	A COMMENT	\N	2014-07-12 08:24:26	2014-07-12 08:24:26
1334	1	305	A COMMENT	\N	2014-07-22 04:05:38	2014-07-22 04:05:38
1335	10	306	A COMMENT	\N	2014-05-26 16:31:17	2014-05-26 16:31:17
1336	4	306	A COMMENT	\N	2014-06-29 23:47:53	2014-06-29 23:47:53
1337	47	306	A COMMENT	\N	2014-07-24 12:15:39	2014-07-24 12:15:39
1338	22	307	A COMMENT	\N	2014-05-22 04:39:52	2014-05-22 04:39:52
1339	37	307	A COMMENT	\N	2014-06-10 20:42:10	2014-06-10 20:42:10
1340	45	307	A COMMENT	\N	2014-07-02 06:05:31	2014-07-02 06:05:31
1341	2	307	A COMMENT	\N	2014-07-03 03:34:03	2014-07-03 03:34:03
1342	30	307	A COMMENT	\N	2014-07-22 18:49:38	2014-07-22 18:49:38
1343	28	307	A COMMENT	\N	2014-07-26 16:09:24	2014-07-26 16:09:24
1344	22	308	A COMMENT	\N	2014-05-24 19:53:31	2014-05-24 19:53:31
1345	8	308	A COMMENT	\N	2014-05-26 13:41:20	2014-05-26 13:41:20
1346	8	308	A COMMENT	\N	2014-05-27 13:21:15	2014-05-27 13:21:15
1347	21	308	A COMMENT	\N	2014-05-31 14:40:34	2014-05-31 14:40:34
1348	3	308	A COMMENT	\N	2014-06-04 22:07:33	2014-06-04 22:07:33
1349	1	308	A COMMENT	\N	2014-07-02 04:36:53	2014-07-02 04:36:53
1350	10	308	A COMMENT	\N	2014-07-08 22:09:08	2014-07-08 22:09:08
1351	32	308	A COMMENT	\N	2014-07-11 08:27:13	2014-07-11 08:27:13
1352	1	308	A COMMENT	\N	2014-07-16 23:54:17	2014-07-16 23:54:17
1353	21	310	A COMMENT	\N	2014-06-08 07:38:55	2014-06-08 07:38:55
1354	11	310	A COMMENT	\N	2014-06-09 15:13:10	2014-06-09 15:13:10
1355	21	310	A COMMENT	\N	2014-06-17 02:01:24	2014-06-17 02:01:24
1356	2	311	A COMMENT	\N	2014-06-03 20:05:20	2014-06-03 20:05:20
1357	37	311	A COMMENT	\N	2014-06-17 04:01:41	2014-06-17 04:01:41
1358	3	311	A COMMENT	\N	2014-07-11 18:11:26	2014-07-11 18:11:26
1359	3	311	A COMMENT	\N	2014-07-22 09:18:40	2014-07-22 09:18:40
1360	30	311	A COMMENT	\N	2014-07-23 14:31:36	2014-07-23 14:31:36
1361	22	312	A COMMENT	\N	2014-04-27 18:26:09	2014-04-27 18:26:09
1362	30	312	A COMMENT	\N	2014-05-15 18:24:50	2014-05-15 18:24:50
1363	11	312	A COMMENT	\N	2014-05-30 17:58:38	2014-05-30 17:58:38
1364	39	312	A COMMENT	\N	2014-06-30 17:09:32	2014-06-30 17:09:32
1365	45	313	A COMMENT	\N	2014-07-22 22:57:29	2014-07-22 22:57:29
1366	43	314	A COMMENT	\N	2014-05-27 15:39:19	2014-05-27 15:39:19
1367	28	314	A COMMENT	\N	2014-06-03 03:58:25	2014-06-03 03:58:25
1368	11	314	A COMMENT	\N	2014-06-06 22:58:26	2014-06-06 22:58:26
1369	43	314	A COMMENT	\N	2014-06-11 03:49:11	2014-06-11 03:49:11
1370	1	314	A COMMENT	\N	2014-07-13 01:27:04	2014-07-13 01:27:04
1371	8	315	A COMMENT	\N	2014-07-17 11:52:13	2014-07-17 11:52:13
1372	14	315	A COMMENT	\N	2014-07-18 08:16:17	2014-07-18 08:16:17
1373	27	315	A COMMENT	\N	2014-07-20 13:26:06	2014-07-20 13:26:06
1374	45	315	A COMMENT	\N	2014-07-22 12:33:15	2014-07-22 12:33:15
1375	3	315	A COMMENT	\N	2014-07-23 22:36:34	2014-07-23 22:36:34
1376	45	315	A COMMENT	\N	2014-07-25 15:44:42	2014-07-25 15:44:42
1377	4	315	A COMMENT	\N	2014-07-26 04:18:38	2014-07-26 04:18:38
1378	11	315	A COMMENT	\N	2014-07-26 14:34:04	2014-07-26 14:34:04
1379	16	316	A COMMENT	\N	2014-02-18 15:26:43	2014-02-18 15:26:43
1380	39	316	A COMMENT	\N	2014-05-02 03:06:38	2014-05-02 03:06:38
1381	1	316	A COMMENT	\N	2014-05-27 12:28:30	2014-05-27 12:28:30
1382	43	316	A COMMENT	\N	2014-06-01 19:39:53	2014-06-01 19:39:53
1383	37	316	A COMMENT	\N	2014-07-06 07:09:08	2014-07-06 07:09:08
1384	2	316	A COMMENT	\N	2014-07-22 00:30:04	2014-07-22 00:30:04
1385	1	316	A COMMENT	\N	2014-07-25 18:24:09	2014-07-25 18:24:09
1386	45	317	A COMMENT	\N	2014-05-27 00:09:08	2014-05-27 00:09:08
1387	16	318	A COMMENT	\N	2014-01-21 19:12:26	2014-01-21 19:12:26
1388	47	318	A COMMENT	\N	2014-01-31 22:59:48	2014-01-31 22:59:48
1389	2	318	A COMMENT	\N	2014-02-19 08:57:07	2014-02-19 08:57:07
1390	28	318	A COMMENT	\N	2014-03-08 17:37:14	2014-03-08 17:37:14
1391	8	318	A COMMENT	\N	2014-03-15 19:24:57	2014-03-15 19:24:57
1392	37	318	A COMMENT	\N	2014-04-13 06:17:39	2014-04-13 06:17:39
1393	39	318	A COMMENT	\N	2014-05-14 12:47:55	2014-05-14 12:47:55
1394	2	318	A COMMENT	\N	2014-05-24 22:44:06	2014-05-24 22:44:06
1395	16	319	A COMMENT	\N	2014-02-19 05:23:18	2014-02-19 05:23:18
1396	32	319	A COMMENT	\N	2014-02-22 17:45:59	2014-02-22 17:45:59
1397	27	319	A COMMENT	\N	2014-03-20 17:49:14	2014-03-20 17:49:14
1398	39	319	A COMMENT	\N	2014-03-26 17:51:25	2014-03-26 17:51:25
1399	45	319	A COMMENT	\N	2014-04-17 14:33:55	2014-04-17 14:33:55
1400	1	319	A COMMENT	\N	2014-05-01 19:08:55	2014-05-01 19:08:55
1401	21	319	A COMMENT	\N	2014-05-03 12:01:49	2014-05-03 12:01:49
1402	27	319	A COMMENT	\N	2014-05-10 15:58:43	2014-05-10 15:58:43
1403	10	319	A COMMENT	\N	2014-06-13 04:31:40	2014-06-13 04:31:40
1404	4	319	A COMMENT	\N	2014-07-25 16:40:24	2014-07-25 16:40:24
1405	16	320	A COMMENT	\N	2014-03-13 14:43:48	2014-03-13 14:43:48
1406	28	321	A COMMENT	\N	2014-07-09 14:28:16	2014-07-09 14:28:16
1407	2	321	A COMMENT	\N	2014-07-09 22:21:01	2014-07-09 22:21:01
1408	37	321	A COMMENT	\N	2014-07-10 15:57:46	2014-07-10 15:57:46
1409	14	321	A COMMENT	\N	2014-07-10 22:30:26	2014-07-10 22:30:26
1410	37	321	A COMMENT	\N	2014-07-12 11:35:38	2014-07-12 11:35:38
1411	2	321	A COMMENT	\N	2014-07-12 17:06:07	2014-07-12 17:06:07
1412	11	321	A COMMENT	\N	2014-07-13 16:10:44	2014-07-13 16:10:44
1413	32	321	A COMMENT	\N	2014-07-14 03:22:46	2014-07-14 03:22:46
1414	1	321	A COMMENT	\N	2014-07-17 01:34:22	2014-07-17 01:34:22
1415	14	321	A COMMENT	\N	2014-07-20 07:08:22	2014-07-20 07:08:22
1416	45	321	A COMMENT	\N	2014-07-21 09:12:09	2014-07-21 09:12:09
1417	27	321	A COMMENT	\N	2014-07-22 00:55:44	2014-07-22 00:55:44
1418	43	321	A COMMENT	\N	2014-07-22 09:48:29	2014-07-22 09:48:29
1419	4	321	A COMMENT	\N	2014-07-23 04:28:25	2014-07-23 04:28:25
1420	30	321	A COMMENT	\N	2014-07-23 09:18:48	2014-07-23 09:18:48
1421	47	321	A COMMENT	\N	2014-07-23 11:46:16	2014-07-23 11:46:16
1422	8	321	A COMMENT	\N	2014-07-25 23:52:44	2014-07-25 23:52:44
1423	43	321	A COMMENT	\N	2014-07-26 14:27:31	2014-07-26 14:27:31
1424	3	321	A COMMENT	\N	2014-07-26 18:02:49	2014-07-26 18:02:49
1425	10	322	A COMMENT	\N	2014-01-30 00:46:30	2014-01-30 00:46:30
1426	2	322	A COMMENT	\N	2014-03-17 02:16:42	2014-03-17 02:16:42
1427	27	322	A COMMENT	\N	2014-03-24 01:10:21	2014-03-24 01:10:21
1428	4	322	A COMMENT	\N	2014-03-27 12:24:53	2014-03-27 12:24:53
1429	47	322	A COMMENT	\N	2014-03-29 04:05:55	2014-03-29 04:05:55
1430	45	322	A COMMENT	\N	2014-04-09 04:28:40	2014-04-09 04:28:40
1431	30	322	A COMMENT	\N	2014-05-20 23:55:52	2014-05-20 23:55:52
1432	4	322	A COMMENT	\N	2014-05-27 21:41:24	2014-05-27 21:41:24
1433	39	322	A COMMENT	\N	2014-06-25 01:53:06	2014-06-25 01:53:06
1434	43	323	A COMMENT	\N	2014-02-09 20:46:11	2014-02-09 20:46:11
1435	28	323	A COMMENT	\N	2014-03-17 12:12:27	2014-03-17 12:12:27
1436	37	323	A COMMENT	\N	2014-06-10 21:32:07	2014-06-10 21:32:07
1437	16	324	A COMMENT	\N	2014-03-17 16:23:10	2014-03-17 16:23:10
1438	37	324	A COMMENT	\N	2014-05-01 06:39:38	2014-05-01 06:39:38
1439	39	324	A COMMENT	\N	2014-05-04 06:44:52	2014-05-04 06:44:52
1440	1	324	A COMMENT	\N	2014-05-23 23:26:49	2014-05-23 23:26:49
1441	43	324	A COMMENT	\N	2014-05-24 23:41:10	2014-05-24 23:41:10
1442	21	324	A COMMENT	\N	2014-06-28 00:39:07	2014-06-28 00:39:07
1443	47	325	A COMMENT	\N	2014-02-20 00:16:32	2014-02-20 00:16:32
1444	37	325	A COMMENT	\N	2014-05-21 15:35:41	2014-05-21 15:35:41
1445	14	325	A COMMENT	\N	2014-06-05 05:17:03	2014-06-05 05:17:03
1446	21	325	A COMMENT	\N	2014-06-05 17:14:38	2014-06-05 17:14:38
1447	3	325	A COMMENT	\N	2014-06-21 18:45:02	2014-06-21 18:45:02
1448	16	326	A COMMENT	\N	2014-01-20 20:47:51	2014-01-20 20:47:51
1449	47	326	A COMMENT	\N	2014-05-26 09:03:13	2014-05-26 09:03:13
1450	3	327	A COMMENT	\N	2014-04-11 13:07:11	2014-04-11 13:07:11
1451	37	327	A COMMENT	\N	2014-04-21 02:03:04	2014-04-21 02:03:04
1452	45	327	A COMMENT	\N	2014-05-07 19:24:01	2014-05-07 19:24:01
1453	39	327	A COMMENT	\N	2014-05-31 13:54:35	2014-05-31 13:54:35
1454	11	327	A COMMENT	\N	2014-07-07 13:06:04	2014-07-07 13:06:04
1455	30	327	A COMMENT	\N	2014-07-08 23:30:45	2014-07-08 23:30:45
1456	37	327	A COMMENT	\N	2014-07-09 13:12:20	2014-07-09 13:12:20
1457	4	328	A COMMENT	\N	2014-03-26 21:28:09	2014-03-26 21:28:09
1458	39	328	A COMMENT	\N	2014-04-10 06:06:13	2014-04-10 06:06:13
1459	32	328	A COMMENT	\N	2014-05-02 19:31:47	2014-05-02 19:31:47
1460	27	328	A COMMENT	\N	2014-06-27 16:21:52	2014-06-27 16:21:52
1461	10	328	A COMMENT	\N	2014-06-28 08:06:30	2014-06-28 08:06:30
1462	30	329	A COMMENT	\N	2014-07-07 02:16:06	2014-07-07 02:16:06
1463	28	330	A COMMENT	\N	2014-07-06 06:56:20	2014-07-06 06:56:20
1464	45	330	A COMMENT	\N	2014-07-09 21:51:01	2014-07-09 21:51:01
1465	4	332	A COMMENT	\N	2014-06-04 09:17:44	2014-06-04 09:17:44
1466	47	332	A COMMENT	\N	2014-06-11 03:31:23	2014-06-11 03:31:23
1467	1	332	A COMMENT	\N	2014-06-21 00:54:57	2014-06-21 00:54:57
1468	21	332	A COMMENT	\N	2014-07-02 00:02:37	2014-07-02 00:02:37
1469	1	332	A COMMENT	\N	2014-07-05 13:35:27	2014-07-05 13:35:27
1470	39	332	A COMMENT	\N	2014-07-07 12:30:23	2014-07-07 12:30:23
1471	1	332	A COMMENT	\N	2014-07-10 09:57:14	2014-07-10 09:57:14
1472	3	332	A COMMENT	\N	2014-07-24 11:17:45	2014-07-24 11:17:45
1473	16	333	A COMMENT	\N	2014-02-13 07:27:01	2014-02-13 07:27:01
1474	16	334	A COMMENT	\N	2014-06-29 12:25:32	2014-06-29 12:25:32
1475	4	334	A COMMENT	\N	2014-07-03 18:56:09	2014-07-03 18:56:09
1476	2	334	A COMMENT	\N	2014-07-09 09:22:45	2014-07-09 09:22:45
1477	47	334	A COMMENT	\N	2014-07-17 22:59:05	2014-07-17 22:59:05
1478	1	334	A COMMENT	\N	2014-07-19 15:24:49	2014-07-19 15:24:49
1479	27	334	A COMMENT	\N	2014-07-25 21:47:07	2014-07-25 21:47:07
1480	37	335	A COMMENT	\N	2014-07-06 08:01:34	2014-07-06 08:01:34
1481	8	335	A COMMENT	\N	2014-07-10 17:46:41	2014-07-10 17:46:41
1482	16	337	A COMMENT	\N	2014-04-07 10:22:18	2014-04-07 10:22:18
1483	43	337	A COMMENT	\N	2014-04-25 15:08:14	2014-04-25 15:08:14
1484	39	337	A COMMENT	\N	2014-05-07 15:43:17	2014-05-07 15:43:17
1485	21	337	A COMMENT	\N	2014-05-13 01:59:48	2014-05-13 01:59:48
1486	1	337	A COMMENT	\N	2014-05-17 06:11:18	2014-05-17 06:11:18
1487	37	337	A COMMENT	\N	2014-05-31 14:57:25	2014-05-31 14:57:25
1488	32	337	A COMMENT	\N	2014-06-03 20:34:11	2014-06-03 20:34:11
1489	2	337	A COMMENT	\N	2014-06-06 05:39:34	2014-06-06 05:39:34
1490	47	337	A COMMENT	\N	2014-06-06 19:35:56	2014-06-06 19:35:56
1491	4	337	A COMMENT	\N	2014-06-11 05:02:05	2014-06-11 05:02:05
1492	27	337	A COMMENT	\N	2014-06-13 10:35:42	2014-06-13 10:35:42
1493	30	337	A COMMENT	\N	2014-06-24 13:45:03	2014-06-24 13:45:03
1494	39	337	A COMMENT	\N	2014-06-25 00:54:30	2014-06-25 00:54:30
1495	10	337	A COMMENT	\N	2014-07-01 22:45:24	2014-07-01 22:45:24
1496	27	337	A COMMENT	\N	2014-07-03 21:57:26	2014-07-03 21:57:26
1497	39	337	A COMMENT	\N	2014-07-20 05:31:39	2014-07-20 05:31:39
1498	1	337	A COMMENT	\N	2014-07-25 02:37:05	2014-07-25 02:37:05
1499	39	338	A COMMENT	\N	2014-04-16 15:50:53	2014-04-16 15:50:53
1500	10	338	A COMMENT	\N	2014-04-18 19:53:58	2014-04-18 19:53:58
1501	14	338	A COMMENT	\N	2014-05-24 05:36:22	2014-05-24 05:36:22
1502	21	338	A COMMENT	\N	2014-06-26 04:33:38	2014-06-26 04:33:38
1503	8	338	A COMMENT	\N	2014-06-27 05:12:40	2014-06-27 05:12:40
1504	1	338	A COMMENT	\N	2014-06-28 10:11:46	2014-06-28 10:11:46
1505	14	338	A COMMENT	\N	2014-07-18 02:45:53	2014-07-18 02:45:53
1506	3	340	A COMMENT	\N	2014-03-15 10:11:06	2014-03-15 10:11:06
1507	1	340	A COMMENT	\N	2014-04-15 20:04:08	2014-04-15 20:04:08
1508	4	340	A COMMENT	\N	2014-05-30 20:12:34	2014-05-30 20:12:34
1509	8	340	A COMMENT	\N	2014-06-17 14:41:49	2014-06-17 14:41:49
1510	10	340	A COMMENT	\N	2014-07-14 10:40:17	2014-07-14 10:40:17
1511	8	341	A COMMENT	\N	2014-03-02 16:08:04	2014-03-02 16:08:04
1512	28	341	A COMMENT	\N	2014-03-18 08:18:51	2014-03-18 08:18:51
1513	14	341	A COMMENT	\N	2014-04-25 18:44:42	2014-04-25 18:44:42
1514	2	341	A COMMENT	\N	2014-05-05 02:30:31	2014-05-05 02:30:31
1515	32	341	A COMMENT	\N	2014-06-16 18:36:33	2014-06-16 18:36:33
1516	37	341	A COMMENT	\N	2014-06-18 20:51:18	2014-06-18 20:51:18
1517	1	341	A COMMENT	\N	2014-06-29 07:17:10	2014-06-29 07:17:10
1518	2	342	A COMMENT	\N	2014-06-07 01:57:01	2014-06-07 01:57:01
1519	11	342	A COMMENT	\N	2014-06-12 10:43:41	2014-06-12 10:43:41
1520	45	342	A COMMENT	\N	2014-07-01 03:57:56	2014-07-01 03:57:56
1521	30	342	A COMMENT	\N	2014-07-11 04:39:52	2014-07-11 04:39:52
1522	8	342	A COMMENT	\N	2014-07-24 22:19:33	2014-07-24 22:19:33
1523	16	343	A COMMENT	\N	2014-05-17 22:34:10	2014-05-17 22:34:10
1524	2	344	A COMMENT	\N	2014-05-23 16:01:32	2014-05-23 16:01:32
1525	30	344	A COMMENT	\N	2014-07-12 13:55:35	2014-07-12 13:55:35
1526	16	345	A COMMENT	\N	2014-02-25 06:59:27	2014-02-25 06:59:27
1527	27	345	A COMMENT	\N	2014-03-01 08:49:50	2014-03-01 08:49:50
1528	32	345	A COMMENT	\N	2014-03-21 13:00:13	2014-03-21 13:00:13
1529	47	345	A COMMENT	\N	2014-03-28 16:36:54	2014-03-28 16:36:54
1530	3	345	A COMMENT	\N	2014-03-29 01:26:26	2014-03-29 01:26:26
1531	8	345	A COMMENT	\N	2014-03-30 00:32:36	2014-03-30 00:32:36
1532	30	345	A COMMENT	\N	2014-04-01 02:30:32	2014-04-01 02:30:32
1533	30	345	A COMMENT	\N	2014-04-01 21:48:33	2014-04-01 21:48:33
1534	27	345	A COMMENT	\N	2014-04-18 10:38:17	2014-04-18 10:38:17
1535	43	345	A COMMENT	\N	2014-05-07 09:28:16	2014-05-07 09:28:16
1536	11	345	A COMMENT	\N	2014-05-13 06:42:09	2014-05-13 06:42:09
1537	28	345	A COMMENT	\N	2014-06-10 01:30:09	2014-06-10 01:30:09
1538	10	345	A COMMENT	\N	2014-06-10 04:05:59	2014-06-10 04:05:59
1539	45	345	A COMMENT	\N	2014-06-10 14:34:34	2014-06-10 14:34:34
1540	37	345	A COMMENT	\N	2014-07-16 15:53:57	2014-07-16 15:53:57
1541	43	345	A COMMENT	\N	2014-07-18 12:10:14	2014-07-18 12:10:14
1542	16	346	A COMMENT	\N	2014-02-24 22:40:09	2014-02-24 22:40:09
1543	43	346	A COMMENT	\N	2014-03-19 12:11:20	2014-03-19 12:11:20
1544	14	346	A COMMENT	\N	2014-04-12 13:43:06	2014-04-12 13:43:06
1545	45	346	A COMMENT	\N	2014-04-13 09:19:41	2014-04-13 09:19:41
1546	28	346	A COMMENT	\N	2014-04-13 17:09:02	2014-04-13 17:09:02
1547	43	346	A COMMENT	\N	2014-06-12 23:51:06	2014-06-12 23:51:06
1548	11	346	A COMMENT	\N	2014-06-22 14:51:57	2014-06-22 14:51:57
1549	47	346	A COMMENT	\N	2014-06-27 23:17:38	2014-06-27 23:17:38
1550	2	347	A COMMENT	\N	2014-03-31 00:30:05	2014-03-31 00:30:05
1551	39	347	A COMMENT	\N	2014-04-15 07:27:56	2014-04-15 07:27:56
1552	1	347	A COMMENT	\N	2014-05-24 05:52:17	2014-05-24 05:52:17
1553	1	347	A COMMENT	\N	2014-06-08 05:51:47	2014-06-08 05:51:47
1554	4	347	A COMMENT	\N	2014-06-26 13:28:55	2014-06-26 13:28:55
1555	8	347	A COMMENT	\N	2014-06-30 04:09:03	2014-06-30 04:09:03
1556	10	347	A COMMENT	\N	2014-07-16 12:27:13	2014-07-16 12:27:13
1557	39	347	A COMMENT	\N	2014-07-18 18:15:34	2014-07-18 18:15:34
1558	27	347	A COMMENT	\N	2014-07-20 07:17:21	2014-07-20 07:17:21
1559	21	348	A COMMENT	\N	2014-05-06 04:31:59	2014-05-06 04:31:59
1560	30	348	A COMMENT	\N	2014-05-08 11:55:01	2014-05-08 11:55:01
1561	2	348	A COMMENT	\N	2014-05-11 20:53:11	2014-05-11 20:53:11
1562	39	348	A COMMENT	\N	2014-05-30 02:58:43	2014-05-30 02:58:43
1563	8	348	A COMMENT	\N	2014-06-12 05:39:12	2014-06-12 05:39:12
1564	27	349	A COMMENT	\N	2014-06-18 15:38:06	2014-06-18 15:38:06
1565	4	349	A COMMENT	\N	2014-06-19 00:45:38	2014-06-19 00:45:38
1566	21	349	A COMMENT	\N	2014-06-19 13:15:39	2014-06-19 13:15:39
1567	3	349	A COMMENT	\N	2014-06-22 05:58:47	2014-06-22 05:58:47
1568	11	349	A COMMENT	\N	2014-06-27 14:23:05	2014-06-27 14:23:05
1569	2	349	A COMMENT	\N	2014-06-27 21:25:27	2014-06-27 21:25:27
1570	3	349	A COMMENT	\N	2014-06-30 12:28:16	2014-06-30 12:28:16
1571	14	349	A COMMENT	\N	2014-07-02 14:08:50	2014-07-02 14:08:50
1572	45	349	A COMMENT	\N	2014-07-02 22:53:18	2014-07-02 22:53:18
1573	32	349	A COMMENT	\N	2014-07-03 13:13:02	2014-07-03 13:13:02
1574	1	349	A COMMENT	\N	2014-07-10 00:12:18	2014-07-10 00:12:18
1575	14	349	A COMMENT	\N	2014-07-11 21:22:27	2014-07-11 21:22:27
1576	8	349	A COMMENT	\N	2014-07-17 10:14:02	2014-07-17 10:14:02
1577	37	349	A COMMENT	\N	2014-07-17 14:30:34	2014-07-17 14:30:34
1578	27	349	A COMMENT	\N	2014-07-22 06:55:49	2014-07-22 06:55:49
1579	30	349	A COMMENT	\N	2014-07-23 02:07:58	2014-07-23 02:07:58
1580	27	350	A COMMENT	\N	2014-03-06 22:51:02	2014-03-06 22:51:02
1581	28	350	A COMMENT	\N	2014-05-29 03:20:23	2014-05-29 03:20:23
1582	11	350	A COMMENT	\N	2014-06-22 22:26:53	2014-06-22 22:26:53
1583	43	351	A COMMENT	\N	2014-05-09 09:51:39	2014-05-09 09:51:39
1584	2	351	A COMMENT	\N	2014-07-04 23:59:10	2014-07-04 23:59:10
1585	45	351	A COMMENT	\N	2014-07-08 13:23:54	2014-07-08 13:23:54
1586	8	351	A COMMENT	\N	2014-07-10 05:11:48	2014-07-10 05:11:48
1587	14	351	A COMMENT	\N	2014-07-24 02:03:05	2014-07-24 02:03:05
1588	16	354	A COMMENT	\N	2014-06-05 14:24:10	2014-06-05 14:24:10
1589	2	354	A COMMENT	\N	2014-06-06 09:22:52	2014-06-06 09:22:52
1590	10	354	A COMMENT	\N	2014-06-18 04:04:41	2014-06-18 04:04:41
1591	3	354	A COMMENT	\N	2014-06-23 03:50:40	2014-06-23 03:50:40
1592	1	354	A COMMENT	\N	2014-06-25 20:43:09	2014-06-25 20:43:09
1593	16	355	A COMMENT	\N	2014-06-07 03:29:07	2014-06-07 03:29:07
1594	39	358	A COMMENT	\N	2014-06-18 08:51:48	2014-06-18 08:51:48
1595	4	358	A COMMENT	\N	2014-06-23 08:28:11	2014-06-23 08:28:11
1596	21	358	A COMMENT	\N	2014-07-06 13:29:26	2014-07-06 13:29:26
1597	39	358	A COMMENT	\N	2014-07-14 05:00:41	2014-07-14 05:00:41
1598	8	358	A COMMENT	\N	2014-07-16 01:30:11	2014-07-16 01:30:11
1599	32	358	A COMMENT	\N	2014-07-16 07:18:28	2014-07-16 07:18:28
1600	27	358	A COMMENT	\N	2014-07-20 03:06:13	2014-07-20 03:06:13
1601	43	358	A COMMENT	\N	2014-07-23 10:45:02	2014-07-23 10:45:02
1602	1	358	A COMMENT	\N	2014-07-26 11:23:37	2014-07-26 11:23:37
1603	16	359	A COMMENT	\N	2014-06-06 06:31:29	2014-06-06 06:31:29
1604	43	359	A COMMENT	\N	2014-06-21 16:00:08	2014-06-21 16:00:08
1605	27	359	A COMMENT	\N	2014-06-27 04:12:56	2014-06-27 04:12:56
1606	28	359	A COMMENT	\N	2014-06-29 04:14:19	2014-06-29 04:14:19
1607	3	359	A COMMENT	\N	2014-06-30 18:33:03	2014-06-30 18:33:03
1608	3	359	A COMMENT	\N	2014-07-14 00:25:43	2014-07-14 00:25:43
1609	14	359	A COMMENT	\N	2014-07-22 15:39:35	2014-07-22 15:39:35
1610	3	360	A COMMENT	\N	2014-06-20 21:35:11	2014-06-20 21:35:11
1611	3	360	A COMMENT	\N	2014-06-29 18:02:01	2014-06-29 18:02:01
1612	45	360	A COMMENT	\N	2014-07-03 09:11:25	2014-07-03 09:11:25
1613	8	360	A COMMENT	\N	2014-07-22 20:04:14	2014-07-22 20:04:14
1614	28	361	A COMMENT	\N	2014-07-11 21:30:32	2014-07-11 21:30:32
1615	28	361	A COMMENT	\N	2014-07-11 23:51:45	2014-07-11 23:51:45
1616	27	361	A COMMENT	\N	2014-07-12 00:13:49	2014-07-12 00:13:49
1617	14	361	A COMMENT	\N	2014-07-14 10:00:38	2014-07-14 10:00:38
1618	30	361	A COMMENT	\N	2014-07-17 20:26:16	2014-07-17 20:26:16
1619	43	361	A COMMENT	\N	2014-07-18 19:40:55	2014-07-18 19:40:55
1620	45	361	A COMMENT	\N	2014-07-19 02:14:30	2014-07-19 02:14:30
1621	47	361	A COMMENT	\N	2014-07-19 16:50:45	2014-07-19 16:50:45
1622	3	361	A COMMENT	\N	2014-07-22 00:12:49	2014-07-22 00:12:49
1623	37	361	A COMMENT	\N	2014-07-26 01:56:22	2014-07-26 01:56:22
1624	16	363	A COMMENT	\N	2014-02-18 09:56:38	2014-02-18 09:56:38
1625	28	363	A COMMENT	\N	2014-05-13 20:59:02	2014-05-13 20:59:02
1626	8	363	A COMMENT	\N	2014-06-17 21:05:09	2014-06-17 21:05:09
1627	11	363	A COMMENT	\N	2014-07-03 07:00:11	2014-07-03 07:00:11
1628	16	365	A COMMENT	\N	2014-02-13 03:33:23	2014-02-13 03:33:23
1629	37	365	A COMMENT	\N	2014-04-13 18:38:41	2014-04-13 18:38:41
1630	2	365	A COMMENT	\N	2014-05-12 05:19:31	2014-05-12 05:19:31
1631	43	365	A COMMENT	\N	2014-07-14 17:09:44	2014-07-14 17:09:44
1632	19	366	A COMMENT	\N	2014-02-16 14:15:10	2014-02-16 14:15:10
1633	3	367	A COMMENT	\N	2014-02-03 13:38:49	2014-02-03 13:38:49
1634	37	367	A COMMENT	\N	2014-02-20 21:54:13	2014-02-20 21:54:13
1635	19	369	A COMMENT	\N	2014-05-18 17:51:18	2014-05-18 17:51:18
1636	19	371	A COMMENT	\N	2014-01-24 05:38:36	2014-01-24 05:38:36
1637	30	371	A COMMENT	\N	2014-01-29 02:01:14	2014-01-29 02:01:14
1638	39	371	A COMMENT	\N	2014-02-02 00:43:29	2014-02-02 00:43:29
1639	10	371	A COMMENT	\N	2014-02-04 07:56:38	2014-02-04 07:56:38
1640	37	371	A COMMENT	\N	2014-02-15 13:39:07	2014-02-15 13:39:07
1641	10	371	A COMMENT	\N	2014-02-22 16:53:29	2014-02-22 16:53:29
1642	8	371	A COMMENT	\N	2014-03-08 04:22:50	2014-03-08 04:22:50
1643	2	371	A COMMENT	\N	2014-03-25 10:07:58	2014-03-25 10:07:58
1644	27	371	A COMMENT	\N	2014-04-03 09:06:24	2014-04-03 09:06:24
1645	11	371	A COMMENT	\N	2014-04-12 14:33:26	2014-04-12 14:33:26
1646	32	371	A COMMENT	\N	2014-04-15 13:47:05	2014-04-15 13:47:05
1647	1	371	A COMMENT	\N	2014-04-15 21:48:19	2014-04-15 21:48:19
1648	28	371	A COMMENT	\N	2014-05-02 10:41:03	2014-05-02 10:41:03
1649	32	371	A COMMENT	\N	2014-05-29 20:49:43	2014-05-29 20:49:43
1650	1	371	A COMMENT	\N	2014-06-21 20:49:36	2014-06-21 20:49:36
1651	21	371	A COMMENT	\N	2014-06-25 19:45:30	2014-06-25 19:45:30
1652	8	371	A COMMENT	\N	2014-06-27 22:23:47	2014-06-27 22:23:47
1653	47	371	A COMMENT	\N	2014-06-30 07:47:23	2014-06-30 07:47:23
1654	45	371	A COMMENT	\N	2014-07-19 13:51:18	2014-07-19 13:51:18
1655	21	372	A COMMENT	\N	2013-12-27 11:36:34	2013-12-27 11:36:34
1656	11	372	A COMMENT	\N	2014-06-27 21:21:07	2014-06-27 21:21:07
1657	45	373	A COMMENT	\N	2014-02-03 21:27:26	2014-02-03 21:27:26
1658	45	373	A COMMENT	\N	2014-03-15 06:53:00	2014-03-15 06:53:00
1659	37	373	A COMMENT	\N	2014-05-14 00:50:19	2014-05-14 00:50:19
1660	19	374	A COMMENT	\N	2014-01-26 12:26:06	2014-01-26 12:26:06
1661	28	374	A COMMENT	\N	2014-01-28 18:00:26	2014-01-28 18:00:26
1662	47	374	A COMMENT	\N	2014-03-18 14:05:18	2014-03-18 14:05:18
1663	30	374	A COMMENT	\N	2014-03-19 15:27:22	2014-03-19 15:27:22
1664	21	374	A COMMENT	\N	2014-04-16 17:31:25	2014-04-16 17:31:25
1665	3	374	A COMMENT	\N	2014-04-29 04:54:47	2014-04-29 04:54:47
1666	8	374	A COMMENT	\N	2014-05-02 21:24:09	2014-05-02 21:24:09
1667	43	374	A COMMENT	\N	2014-06-23 20:36:55	2014-06-23 20:36:55
1668	28	374	A COMMENT	\N	2014-07-17 11:54:18	2014-07-17 11:54:18
1669	37	374	A COMMENT	\N	2014-07-19 23:19:24	2014-07-19 23:19:24
1670	45	374	A COMMENT	\N	2014-07-25 11:06:28	2014-07-25 11:06:28
1671	19	376	A COMMENT	\N	2014-05-14 11:57:09	2014-05-14 11:57:09
1672	10	376	A COMMENT	\N	2014-06-01 00:27:51	2014-06-01 00:27:51
1673	32	376	A COMMENT	\N	2014-06-24 21:06:46	2014-06-24 21:06:46
1674	39	376	A COMMENT	\N	2014-06-30 07:08:47	2014-06-30 07:08:47
1675	14	376	A COMMENT	\N	2014-07-03 04:23:14	2014-07-03 04:23:14
1676	37	376	A COMMENT	\N	2014-07-17 19:49:55	2014-07-17 19:49:55
1677	2	377	A COMMENT	\N	2014-05-05 22:39:55	2014-05-05 22:39:55
1678	3	377	A COMMENT	\N	2014-06-09 19:03:19	2014-06-09 19:03:19
1679	11	377	A COMMENT	\N	2014-06-14 02:30:02	2014-06-14 02:30:02
1680	11	377	A COMMENT	\N	2014-06-17 12:01:17	2014-06-17 12:01:17
1681	32	377	A COMMENT	\N	2014-06-20 15:13:09	2014-06-20 15:13:09
1682	8	377	A COMMENT	\N	2014-07-03 01:17:50	2014-07-03 01:17:50
1683	39	377	A COMMENT	\N	2014-07-03 02:26:47	2014-07-03 02:26:47
1684	8	377	A COMMENT	\N	2014-07-08 06:07:14	2014-07-08 06:07:14
1685	43	377	A COMMENT	\N	2014-07-20 05:38:25	2014-07-20 05:38:25
1686	43	377	A COMMENT	\N	2014-07-22 02:36:01	2014-07-22 02:36:01
1687	20	378	A COMMENT	\N	2014-07-21 01:04:29	2014-07-21 01:04:29
1688	8	378	A COMMENT	\N	2014-07-21 06:42:05	2014-07-21 06:42:05
1689	21	378	A COMMENT	\N	2014-07-21 06:46:24	2014-07-21 06:46:24
1690	39	378	A COMMENT	\N	2014-07-22 00:10:59	2014-07-22 00:10:59
1691	27	378	A COMMENT	\N	2014-07-23 13:22:30	2014-07-23 13:22:30
1692	37	378	A COMMENT	\N	2014-07-23 14:15:43	2014-07-23 14:15:43
1693	30	378	A COMMENT	\N	2014-07-23 21:16:56	2014-07-23 21:16:56
1694	28	378	A COMMENT	\N	2014-07-24 01:57:31	2014-07-24 01:57:31
1695	8	378	A COMMENT	\N	2014-07-24 09:08:28	2014-07-24 09:08:28
1696	1	378	A COMMENT	\N	2014-07-24 19:23:42	2014-07-24 19:23:42
1697	2	379	A COMMENT	\N	2014-07-24 07:21:38	2014-07-24 07:21:38
1698	8	379	A COMMENT	\N	2014-07-24 11:49:44	2014-07-24 11:49:44
1699	14	379	A COMMENT	\N	2014-07-25 18:18:29	2014-07-25 18:18:29
1700	4	379	A COMMENT	\N	2014-07-25 19:33:39	2014-07-25 19:33:39
1701	11	379	A COMMENT	\N	2014-07-26 11:03:38	2014-07-26 11:03:38
1702	20	380	A COMMENT	\N	2014-07-20 06:34:40	2014-07-20 06:34:40
1703	27	380	A COMMENT	\N	2014-07-21 04:12:36	2014-07-21 04:12:36
1704	45	381	A COMMENT	\N	2014-01-29 15:32:56	2014-01-29 15:32:56
1705	10	381	A COMMENT	\N	2014-02-26 18:13:08	2014-02-26 18:13:08
1706	8	381	A COMMENT	\N	2014-05-29 03:07:28	2014-05-29 03:07:28
1707	1	381	A COMMENT	\N	2014-06-12 13:16:38	2014-06-12 13:16:38
1708	21	381	A COMMENT	\N	2014-07-02 07:59:49	2014-07-02 07:59:49
1709	45	383	A COMMENT	\N	2014-03-25 00:29:41	2014-03-25 00:29:41
1710	11	383	A COMMENT	\N	2014-04-30 12:23:56	2014-04-30 12:23:56
1711	30	383	A COMMENT	\N	2014-05-20 17:31:30	2014-05-20 17:31:30
1712	35	384	A COMMENT	\N	2014-04-28 01:56:29	2014-04-28 01:56:29
1713	4	384	A COMMENT	\N	2014-05-27 10:28:47	2014-05-27 10:28:47
1714	21	385	A COMMENT	\N	2014-06-08 13:19:08	2014-06-08 13:19:08
1715	32	385	A COMMENT	\N	2014-06-27 04:09:28	2014-06-27 04:09:28
1716	45	385	A COMMENT	\N	2014-07-16 19:04:13	2014-07-16 19:04:13
1717	35	386	A COMMENT	\N	2013-12-24 00:08:03	2013-12-24 00:08:03
1718	4	386	A COMMENT	\N	2013-12-25 11:44:35	2013-12-25 11:44:35
1719	47	388	A COMMENT	\N	2014-03-16 04:49:45	2014-03-16 04:49:45
1720	14	388	A COMMENT	\N	2014-05-02 07:08:15	2014-05-02 07:08:15
1721	10	388	A COMMENT	\N	2014-05-14 19:30:17	2014-05-14 19:30:17
1722	8	388	A COMMENT	\N	2014-06-12 09:01:35	2014-06-12 09:01:35
1723	2	388	A COMMENT	\N	2014-06-14 23:10:36	2014-06-14 23:10:36
1724	8	388	A COMMENT	\N	2014-06-18 13:36:28	2014-06-18 13:36:28
1725	45	388	A COMMENT	\N	2014-06-28 07:20:33	2014-06-28 07:20:33
1726	21	388	A COMMENT	\N	2014-07-20 20:59:18	2014-07-20 20:59:18
1727	35	390	A COMMENT	\N	2014-06-26 06:35:47	2014-06-26 06:35:47
1728	27	390	A COMMENT	\N	2014-06-27 20:54:32	2014-06-27 20:54:32
1729	1	390	A COMMENT	\N	2014-06-30 04:53:24	2014-06-30 04:53:24
1730	30	390	A COMMENT	\N	2014-07-06 02:41:51	2014-07-06 02:41:51
1731	35	391	A COMMENT	\N	2014-07-18 08:04:41	2014-07-18 08:04:41
1732	37	391	A COMMENT	\N	2014-07-18 15:44:29	2014-07-18 15:44:29
1733	30	391	A COMMENT	\N	2014-07-23 08:51:47	2014-07-23 08:51:47
1734	45	391	A COMMENT	\N	2014-07-23 09:24:42	2014-07-23 09:24:42
1735	1	391	A COMMENT	\N	2014-07-23 13:15:01	2014-07-23 13:15:01
1736	14	391	A COMMENT	\N	2014-07-23 17:15:26	2014-07-23 17:15:26
1737	45	391	A COMMENT	\N	2014-07-24 14:06:13	2014-07-24 14:06:13
1738	1	391	A COMMENT	\N	2014-07-26 00:51:59	2014-07-26 00:51:59
1739	29	393	A COMMENT	\N	2014-04-29 07:36:49	2014-04-29 07:36:49
1740	4	393	A COMMENT	\N	2014-05-04 12:50:50	2014-05-04 12:50:50
1741	45	393	A COMMENT	\N	2014-05-23 04:13:30	2014-05-23 04:13:30
1742	10	394	A COMMENT	\N	2014-06-11 15:07:37	2014-06-11 15:07:37
1743	11	394	A COMMENT	\N	2014-06-13 22:15:05	2014-06-13 22:15:05
1744	28	394	A COMMENT	\N	2014-06-23 21:40:33	2014-06-23 21:40:33
1745	1	394	A COMMENT	\N	2014-07-05 06:50:38	2014-07-05 06:50:38
1746	32	394	A COMMENT	\N	2014-07-15 16:43:46	2014-07-15 16:43:46
1747	28	394	A COMMENT	\N	2014-07-25 04:49:29	2014-07-25 04:49:29
1748	8	396	A COMMENT	\N	2014-06-04 19:42:19	2014-06-04 19:42:19
1749	39	396	A COMMENT	\N	2014-06-16 14:00:06	2014-06-16 14:00:06
1750	30	396	A COMMENT	\N	2014-06-19 00:19:54	2014-06-19 00:19:54
1751	3	396	A COMMENT	\N	2014-06-19 09:38:40	2014-06-19 09:38:40
1752	30	396	A COMMENT	\N	2014-07-02 15:55:34	2014-07-02 15:55:34
1753	10	396	A COMMENT	\N	2014-07-14 17:37:47	2014-07-14 17:37:47
1754	39	396	A COMMENT	\N	2014-07-17 05:52:43	2014-07-17 05:52:43
1755	27	397	A COMMENT	\N	2014-06-01 23:17:32	2014-06-01 23:17:32
1756	28	397	A COMMENT	\N	2014-06-07 11:20:48	2014-06-07 11:20:48
1757	11	397	A COMMENT	\N	2014-06-09 16:37:29	2014-06-09 16:37:29
1758	8	397	A COMMENT	\N	2014-06-10 07:59:35	2014-06-10 07:59:35
1759	30	397	A COMMENT	\N	2014-06-10 22:08:44	2014-06-10 22:08:44
1760	2	397	A COMMENT	\N	2014-06-27 00:01:37	2014-06-27 00:01:37
1761	32	398	A COMMENT	\N	2014-05-17 09:07:19	2014-05-17 09:07:19
1762	11	398	A COMMENT	\N	2014-05-17 20:18:52	2014-05-17 20:18:52
1763	47	398	A COMMENT	\N	2014-05-21 05:03:03	2014-05-21 05:03:03
1764	8	398	A COMMENT	\N	2014-06-04 04:35:44	2014-06-04 04:35:44
1765	14	398	A COMMENT	\N	2014-06-17 06:01:53	2014-06-17 06:01:53
1766	8	398	A COMMENT	\N	2014-06-17 10:01:03	2014-06-17 10:01:03
1767	45	398	A COMMENT	\N	2014-06-21 21:07:37	2014-06-21 21:07:37
1768	14	398	A COMMENT	\N	2014-06-28 16:30:57	2014-06-28 16:30:57
1769	4	398	A COMMENT	\N	2014-06-29 19:49:09	2014-06-29 19:49:09
1770	45	398	A COMMENT	\N	2014-07-08 21:47:09	2014-07-08 21:47:09
1771	32	398	A COMMENT	\N	2014-07-13 13:09:35	2014-07-13 13:09:35
1772	10	398	A COMMENT	\N	2014-07-18 21:48:53	2014-07-18 21:48:53
1773	4	398	A COMMENT	\N	2014-07-19 02:57:26	2014-07-19 02:57:26
1774	1	398	A COMMENT	\N	2014-07-22 05:52:24	2014-07-22 05:52:24
1775	43	398	A COMMENT	\N	2014-07-22 20:23:34	2014-07-22 20:23:34
1776	4	398	A COMMENT	\N	2014-07-25 08:09:47	2014-07-25 08:09:47
1777	34	402	A COMMENT	\N	2014-06-12 05:07:43	2014-06-12 05:07:43
1778	28	402	A COMMENT	\N	2014-07-14 05:08:15	2014-07-14 05:08:15
1779	39	402	A COMMENT	\N	2014-07-17 21:10:19	2014-07-17 21:10:19
1780	34	403	A COMMENT	\N	2014-06-08 00:57:15	2014-06-08 00:57:15
1781	10	403	A COMMENT	\N	2014-06-18 09:01:22	2014-06-18 09:01:22
1782	21	403	A COMMENT	\N	2014-07-16 08:47:41	2014-07-16 08:47:41
1783	47	403	A COMMENT	\N	2014-07-19 23:05:03	2014-07-19 23:05:03
1784	34	404	A COMMENT	\N	2014-04-30 01:56:50	2014-04-30 01:56:50
1785	43	404	A COMMENT	\N	2014-05-14 22:26:42	2014-05-14 22:26:42
1786	39	404	A COMMENT	\N	2014-05-30 09:09:47	2014-05-30 09:09:47
1787	47	404	A COMMENT	\N	2014-06-02 00:47:05	2014-06-02 00:47:05
1788	47	404	A COMMENT	\N	2014-07-06 02:24:14	2014-07-06 02:24:14
1789	34	405	A COMMENT	\N	2014-04-07 18:47:35	2014-04-07 18:47:35
1790	30	405	A COMMENT	\N	2014-04-18 18:56:33	2014-04-18 18:56:33
1791	4	405	A COMMENT	\N	2014-04-20 07:38:53	2014-04-20 07:38:53
1792	39	405	A COMMENT	\N	2014-04-25 08:12:52	2014-04-25 08:12:52
1793	8	405	A COMMENT	\N	2014-05-05 03:00:28	2014-05-05 03:00:28
1794	10	405	A COMMENT	\N	2014-05-05 16:15:14	2014-05-05 16:15:14
1795	37	405	A COMMENT	\N	2014-05-12 11:34:50	2014-05-12 11:34:50
1796	21	405	A COMMENT	\N	2014-06-06 16:59:12	2014-06-06 16:59:12
1797	14	405	A COMMENT	\N	2014-06-17 06:13:58	2014-06-17 06:13:58
1798	28	405	A COMMENT	\N	2014-06-30 02:09:06	2014-06-30 02:09:06
1799	27	405	A COMMENT	\N	2014-07-07 21:40:52	2014-07-07 21:40:52
1800	47	405	A COMMENT	\N	2014-07-10 17:18:32	2014-07-10 17:18:32
1801	37	405	A COMMENT	\N	2014-07-10 17:40:27	2014-07-10 17:40:27
1802	45	405	A COMMENT	\N	2014-07-13 12:16:06	2014-07-13 12:16:06
1803	11	405	A COMMENT	\N	2014-07-14 09:11:12	2014-07-14 09:11:12
1804	47	405	A COMMENT	\N	2014-07-16 07:14:57	2014-07-16 07:14:57
1805	14	405	A COMMENT	\N	2014-07-19 07:06:42	2014-07-19 07:06:42
1806	27	405	A COMMENT	\N	2014-07-20 02:47:51	2014-07-20 02:47:51
1807	45	406	A COMMENT	\N	2014-07-01 19:23:59	2014-07-01 19:23:59
1808	10	406	A COMMENT	\N	2014-07-01 20:29:19	2014-07-01 20:29:19
1809	21	406	A COMMENT	\N	2014-07-17 17:38:58	2014-07-17 17:38:58
1810	45	408	A COMMENT	\N	2014-05-08 09:32:48	2014-05-08 09:32:48
1811	27	408	A COMMENT	\N	2014-05-12 08:12:49	2014-05-12 08:12:49
1812	43	408	A COMMENT	\N	2014-05-25 11:42:27	2014-05-25 11:42:27
1813	4	408	A COMMENT	\N	2014-05-25 11:51:23	2014-05-25 11:51:23
1814	10	408	A COMMENT	\N	2014-06-11 00:46:02	2014-06-11 00:46:02
1815	32	408	A COMMENT	\N	2014-06-13 21:10:46	2014-06-13 21:10:46
1816	3	408	A COMMENT	\N	2014-06-14 17:27:10	2014-06-14 17:27:10
1817	30	408	A COMMENT	\N	2014-07-13 22:48:09	2014-07-13 22:48:09
1818	11	408	A COMMENT	\N	2014-07-21 15:34:17	2014-07-21 15:34:17
1819	37	408	A COMMENT	\N	2014-07-24 03:56:58	2014-07-24 03:56:58
1820	10	408	A COMMENT	\N	2014-07-26 05:29:10	2014-07-26 05:29:10
1821	39	409	A COMMENT	\N	2014-06-11 18:27:26	2014-06-11 18:27:26
1822	2	409	A COMMENT	\N	2014-07-14 21:25:42	2014-07-14 21:25:42
1823	30	409	A COMMENT	\N	2014-07-20 23:53:29	2014-07-20 23:53:29
1824	4	409	A COMMENT	\N	2014-07-21 22:04:09	2014-07-21 22:04:09
1825	45	409	A COMMENT	\N	2014-07-25 01:07:00	2014-07-25 01:07:00
1826	37	410	A COMMENT	\N	2014-06-29 14:28:42	2014-06-29 14:28:42
1827	10	410	A COMMENT	\N	2014-06-30 10:07:29	2014-06-30 10:07:29
1828	11	410	A COMMENT	\N	2014-07-02 08:22:09	2014-07-02 08:22:09
1829	43	410	A COMMENT	\N	2014-07-04 01:54:02	2014-07-04 01:54:02
1830	45	410	A COMMENT	\N	2014-07-07 00:44:20	2014-07-07 00:44:20
1831	10	410	A COMMENT	\N	2014-07-11 21:11:30	2014-07-11 21:11:30
1832	45	411	A COMMENT	\N	2014-07-03 06:28:27	2014-07-03 06:28:27
1833	8	411	A COMMENT	\N	2014-07-14 11:15:27	2014-07-14 11:15:27
1834	27	411	A COMMENT	\N	2014-07-18 13:52:20	2014-07-18 13:52:20
1835	39	411	A COMMENT	\N	2014-07-20 06:50:35	2014-07-20 06:50:35
1836	11	411	A COMMENT	\N	2014-07-26 10:00:15	2014-07-26 10:00:15
1837	34	413	A COMMENT	\N	2014-07-08 08:31:48	2014-07-08 08:31:48
1838	32	413	A COMMENT	\N	2014-07-09 19:52:35	2014-07-09 19:52:35
1839	2	413	A COMMENT	\N	2014-07-10 00:53:51	2014-07-10 00:53:51
1840	14	413	A COMMENT	\N	2014-07-11 21:51:43	2014-07-11 21:51:43
1841	1	413	A COMMENT	\N	2014-07-16 13:40:34	2014-07-16 13:40:34
1842	3	415	A COMMENT	\N	2014-06-17 10:07:17	2014-06-17 10:07:17
1843	3	415	A COMMENT	\N	2014-06-21 16:28:18	2014-06-21 16:28:18
1844	45	415	A COMMENT	\N	2014-06-23 17:03:46	2014-06-23 17:03:46
1845	10	415	A COMMENT	\N	2014-07-05 12:11:11	2014-07-05 12:11:11
1846	11	415	A COMMENT	\N	2014-07-23 06:12:15	2014-07-23 06:12:15
1847	13	416	A COMMENT	\N	2013-11-15 23:52:01	2013-11-15 23:52:01
1848	30	416	A COMMENT	\N	2013-12-11 13:45:57	2013-12-11 13:45:57
1849	43	416	A COMMENT	\N	2013-12-19 10:34:54	2013-12-19 10:34:54
1850	30	416	A COMMENT	\N	2013-12-27 14:14:47	2013-12-27 14:14:47
1851	8	416	A COMMENT	\N	2014-01-03 20:53:44	2014-01-03 20:53:44
1852	21	416	A COMMENT	\N	2014-01-04 05:57:29	2014-01-04 05:57:29
1853	47	416	A COMMENT	\N	2014-01-30 03:50:42	2014-01-30 03:50:42
1854	39	416	A COMMENT	\N	2014-03-15 04:04:16	2014-03-15 04:04:16
1855	14	416	A COMMENT	\N	2014-04-08 01:14:52	2014-04-08 01:14:52
1856	37	416	A COMMENT	\N	2014-05-31 13:36:37	2014-05-31 13:36:37
1857	10	416	A COMMENT	\N	2014-06-08 19:09:37	2014-06-08 19:09:37
1858	45	417	A COMMENT	\N	2014-03-28 07:00:04	2014-03-28 07:00:04
1859	14	417	A COMMENT	\N	2014-03-28 22:24:58	2014-03-28 22:24:58
1860	28	417	A COMMENT	\N	2014-05-16 10:12:16	2014-05-16 10:12:16
1861	27	417	A COMMENT	\N	2014-05-24 06:05:13	2014-05-24 06:05:13
1862	2	417	A COMMENT	\N	2014-05-30 13:48:34	2014-05-30 13:48:34
1863	13	418	A COMMENT	\N	2014-03-26 15:40:20	2014-03-26 15:40:20
1864	14	418	A COMMENT	\N	2014-04-01 16:57:43	2014-04-01 16:57:43
1865	21	418	A COMMENT	\N	2014-04-13 02:23:45	2014-04-13 02:23:45
1866	27	418	A COMMENT	\N	2014-05-19 10:29:02	2014-05-19 10:29:02
1867	30	420	A COMMENT	\N	2014-04-24 21:57:37	2014-04-24 21:57:37
1868	4	420	A COMMENT	\N	2014-05-02 11:49:40	2014-05-02 11:49:40
1869	43	420	A COMMENT	\N	2014-05-16 19:02:14	2014-05-16 19:02:14
1870	27	420	A COMMENT	\N	2014-06-27 06:13:12	2014-06-27 06:13:12
1871	21	420	A COMMENT	\N	2014-07-04 23:49:27	2014-07-04 23:49:27
1872	1	420	A COMMENT	\N	2014-07-07 17:52:06	2014-07-07 17:52:06
1873	39	420	A COMMENT	\N	2014-07-09 14:54:20	2014-07-09 14:54:20
1874	8	420	A COMMENT	\N	2014-07-17 09:45:02	2014-07-17 09:45:02
1875	21	420	A COMMENT	\N	2014-07-25 01:52:21	2014-07-25 01:52:21
1876	40	422	A COMMENT	\N	2014-04-19 14:04:15	2014-04-19 14:04:15
1877	40	423	A COMMENT	\N	2014-05-15 20:56:06	2014-05-15 20:56:06
1878	40	424	A COMMENT	\N	2014-05-23 18:39:07	2014-05-23 18:39:07
1879	45	424	A COMMENT	\N	2014-07-16 01:10:54	2014-07-16 01:10:54
1880	27	425	A COMMENT	\N	2014-06-19 05:53:14	2014-06-19 05:53:14
1881	10	425	A COMMENT	\N	2014-07-19 09:19:04	2014-07-19 09:19:04
1882	8	426	A COMMENT	\N	2014-06-25 10:47:50	2014-06-25 10:47:50
1883	11	426	A COMMENT	\N	2014-06-27 16:08:27	2014-06-27 16:08:27
1884	2	426	A COMMENT	\N	2014-07-03 12:52:28	2014-07-03 12:52:28
1885	43	426	A COMMENT	\N	2014-07-03 20:14:55	2014-07-03 20:14:55
1886	45	426	A COMMENT	\N	2014-07-07 23:31:11	2014-07-07 23:31:11
1887	43	426	A COMMENT	\N	2014-07-16 04:11:19	2014-07-16 04:11:19
1888	30	426	A COMMENT	\N	2014-07-17 04:26:16	2014-07-17 04:26:16
1889	39	426	A COMMENT	\N	2014-07-20 15:51:01	2014-07-20 15:51:01
1890	30	426	A COMMENT	\N	2014-07-21 20:46:30	2014-07-21 20:46:30
1891	45	426	A COMMENT	\N	2014-07-24 02:41:19	2014-07-24 02:41:19
1892	45	427	A COMMENT	\N	2014-05-26 14:59:35	2014-05-26 14:59:35
1893	21	427	A COMMENT	\N	2014-06-26 15:40:23	2014-06-26 15:40:23
1894	8	427	A COMMENT	\N	2014-07-13 23:02:53	2014-07-13 23:02:53
1895	32	428	A COMMENT	\N	2014-04-08 16:10:44	2014-04-08 16:10:44
1896	11	428	A COMMENT	\N	2014-04-21 06:20:20	2014-04-21 06:20:20
1897	43	428	A COMMENT	\N	2014-05-07 05:51:36	2014-05-07 05:51:36
1898	47	428	A COMMENT	\N	2014-05-17 17:37:42	2014-05-17 17:37:42
1899	3	428	A COMMENT	\N	2014-05-26 21:06:35	2014-05-26 21:06:35
1900	8	428	A COMMENT	\N	2014-05-31 12:46:58	2014-05-31 12:46:58
1901	14	428	A COMMENT	\N	2014-06-01 12:04:57	2014-06-01 12:04:57
1902	10	428	A COMMENT	\N	2014-07-01 10:17:06	2014-07-01 10:17:06
1903	45	428	A COMMENT	\N	2014-07-20 17:45:15	2014-07-20 17:45:15
1904	40	429	A COMMENT	\N	2014-04-27 04:12:12	2014-04-27 04:12:12
1905	14	429	A COMMENT	\N	2014-05-17 03:02:48	2014-05-17 03:02:48
1906	8	429	A COMMENT	\N	2014-05-26 09:13:14	2014-05-26 09:13:14
1907	8	429	A COMMENT	\N	2014-06-02 22:32:36	2014-06-02 22:32:36
1908	11	429	A COMMENT	\N	2014-06-14 22:55:00	2014-06-14 22:55:00
1909	39	429	A COMMENT	\N	2014-06-20 03:49:18	2014-06-20 03:49:18
1910	40	431	A COMMENT	\N	2014-04-10 23:46:57	2014-04-10 23:46:57
1911	47	431	A COMMENT	\N	2014-04-11 13:28:07	2014-04-11 13:28:07
1912	10	431	A COMMENT	\N	2014-04-27 22:04:23	2014-04-27 22:04:23
1913	47	431	A COMMENT	\N	2014-05-13 18:46:28	2014-05-13 18:46:28
1914	8	431	A COMMENT	\N	2014-06-17 20:10:06	2014-06-17 20:10:06
1915	14	431	A COMMENT	\N	2014-07-11 19:29:56	2014-07-11 19:29:56
1916	14	432	A COMMENT	\N	2014-05-01 18:53:24	2014-05-01 18:53:24
1917	1	432	A COMMENT	\N	2014-05-04 11:44:59	2014-05-04 11:44:59
1918	8	432	A COMMENT	\N	2014-05-08 17:00:13	2014-05-08 17:00:13
1919	4	432	A COMMENT	\N	2014-05-31 04:45:54	2014-05-31 04:45:54
1920	2	432	A COMMENT	\N	2014-06-10 20:44:58	2014-06-10 20:44:58
1921	43	432	A COMMENT	\N	2014-06-18 17:04:50	2014-06-18 17:04:50
1922	47	432	A COMMENT	\N	2014-07-12 14:09:17	2014-07-12 14:09:17
1923	40	433	A COMMENT	\N	2014-05-14 13:42:38	2014-05-14 13:42:38
1924	14	434	A COMMENT	\N	2014-05-29 07:45:38	2014-05-29 07:45:38
1925	10	434	A COMMENT	\N	2014-06-30 01:31:17	2014-06-30 01:31:17
1926	1	434	A COMMENT	\N	2014-07-14 10:00:14	2014-07-14 10:00:14
1927	28	434	A COMMENT	\N	2014-07-16 11:32:02	2014-07-16 11:32:02
1928	1	434	A COMMENT	\N	2014-07-16 21:47:22	2014-07-16 21:47:22
1929	21	435	A COMMENT	\N	2014-04-25 03:46:03	2014-04-25 03:46:03
1930	5	437	A COMMENT	\N	2014-03-22 06:57:56	2014-03-22 06:57:56
1931	5	438	A COMMENT	\N	2014-04-13 01:09:08	2014-04-13 01:09:08
1932	4	438	A COMMENT	\N	2014-04-13 21:20:27	2014-04-13 21:20:27
1933	14	438	A COMMENT	\N	2014-04-30 19:25:51	2014-04-30 19:25:51
1934	3	438	A COMMENT	\N	2014-05-09 02:50:56	2014-05-09 02:50:56
1935	45	438	A COMMENT	\N	2014-05-16 04:47:37	2014-05-16 04:47:37
1936	11	438	A COMMENT	\N	2014-07-24 11:13:42	2014-07-24 11:13:42
1937	37	439	A COMMENT	\N	2014-05-03 14:27:33	2014-05-03 14:27:33
1938	47	440	A COMMENT	\N	2014-05-03 11:50:54	2014-05-03 11:50:54
1939	47	440	A COMMENT	\N	2014-05-03 14:11:00	2014-05-03 14:11:00
1940	28	440	A COMMENT	\N	2014-05-03 16:28:53	2014-05-03 16:28:53
1941	4	440	A COMMENT	\N	2014-05-11 21:02:46	2014-05-11 21:02:46
1942	45	440	A COMMENT	\N	2014-05-19 09:16:49	2014-05-19 09:16:49
1943	10	440	A COMMENT	\N	2014-05-25 19:56:10	2014-05-25 19:56:10
1944	43	440	A COMMENT	\N	2014-05-27 01:55:51	2014-05-27 01:55:51
1945	14	440	A COMMENT	\N	2014-05-30 01:12:36	2014-05-30 01:12:36
1946	37	440	A COMMENT	\N	2014-05-30 17:22:19	2014-05-30 17:22:19
1947	11	440	A COMMENT	\N	2014-05-31 14:56:26	2014-05-31 14:56:26
1948	1	440	A COMMENT	\N	2014-05-31 16:14:30	2014-05-31 16:14:30
1949	11	440	A COMMENT	\N	2014-06-03 09:56:09	2014-06-03 09:56:09
1950	47	440	A COMMENT	\N	2014-06-05 09:45:01	2014-06-05 09:45:01
1951	14	440	A COMMENT	\N	2014-06-21 08:57:48	2014-06-21 08:57:48
1952	45	440	A COMMENT	\N	2014-06-27 03:50:29	2014-06-27 03:50:29
1953	43	440	A COMMENT	\N	2014-07-14 05:22:51	2014-07-14 05:22:51
1954	30	440	A COMMENT	\N	2014-07-16 20:43:07	2014-07-16 20:43:07
1955	45	440	A COMMENT	\N	2014-07-17 01:58:24	2014-07-17 01:58:24
1956	10	440	A COMMENT	\N	2014-07-25 18:11:11	2014-07-25 18:11:11
1957	43	441	A COMMENT	\N	2014-04-15 12:07:20	2014-04-15 12:07:20
1958	5	443	A COMMENT	\N	2014-05-24 09:03:20	2014-05-24 09:03:20
1959	2	443	A COMMENT	\N	2014-05-29 12:26:04	2014-05-29 12:26:04
1960	14	443	A COMMENT	\N	2014-06-06 12:22:23	2014-06-06 12:22:23
1961	32	443	A COMMENT	\N	2014-06-06 22:18:10	2014-06-06 22:18:10
1962	32	443	A COMMENT	\N	2014-06-09 12:46:10	2014-06-09 12:46:10
1963	37	443	A COMMENT	\N	2014-06-12 20:06:30	2014-06-12 20:06:30
1964	8	443	A COMMENT	\N	2014-06-25 19:21:02	2014-06-25 19:21:02
1965	30	443	A COMMENT	\N	2014-06-27 19:03:04	2014-06-27 19:03:04
1966	47	443	A COMMENT	\N	2014-06-29 08:43:04	2014-06-29 08:43:04
1967	39	443	A COMMENT	\N	2014-07-02 22:13:12	2014-07-02 22:13:12
1968	37	443	A COMMENT	\N	2014-07-04 17:59:44	2014-07-04 17:59:44
1969	32	443	A COMMENT	\N	2014-07-05 01:38:56	2014-07-05 01:38:56
1970	45	443	A COMMENT	\N	2014-07-07 04:51:00	2014-07-07 04:51:00
1971	2	443	A COMMENT	\N	2014-07-09 22:41:03	2014-07-09 22:41:03
1972	47	443	A COMMENT	\N	2014-07-18 10:53:45	2014-07-18 10:53:45
1973	27	443	A COMMENT	\N	2014-07-19 12:47:52	2014-07-19 12:47:52
1974	3	443	A COMMENT	\N	2014-07-19 19:47:52	2014-07-19 19:47:52
1975	45	443	A COMMENT	\N	2014-07-21 12:53:04	2014-07-21 12:53:04
1976	21	443	A COMMENT	\N	2014-07-22 04:56:09	2014-07-22 04:56:09
1977	27	443	A COMMENT	\N	2014-07-25 00:03:17	2014-07-25 00:03:17
1978	33	445	A COMMENT	\N	2014-02-03 05:20:43	2014-02-03 05:20:43
1979	33	446	A COMMENT	\N	2014-02-15 09:05:52	2014-02-15 09:05:52
1980	4	446	A COMMENT	\N	2014-03-02 15:38:00	2014-03-02 15:38:00
1981	2	446	A COMMENT	\N	2014-03-10 13:44:49	2014-03-10 13:44:49
1982	28	446	A COMMENT	\N	2014-06-11 05:10:32	2014-06-11 05:10:32
1983	47	446	A COMMENT	\N	2014-06-12 07:34:03	2014-06-12 07:34:03
1984	32	446	A COMMENT	\N	2014-07-24 00:08:59	2014-07-24 00:08:59
1985	33	447	A COMMENT	\N	2013-12-20 14:47:57	2013-12-20 14:47:57
1986	45	447	A COMMENT	\N	2014-05-05 05:29:10	2014-05-05 05:29:10
1987	27	448	A COMMENT	\N	2014-01-24 10:19:20	2014-01-24 10:19:20
1988	43	448	A COMMENT	\N	2014-01-28 20:19:41	2014-01-28 20:19:41
1989	32	448	A COMMENT	\N	2014-02-03 02:39:44	2014-02-03 02:39:44
1990	1	448	A COMMENT	\N	2014-05-01 18:20:59	2014-05-01 18:20:59
1991	21	448	A COMMENT	\N	2014-05-20 08:54:56	2014-05-20 08:54:56
1992	2	448	A COMMENT	\N	2014-06-05 13:23:15	2014-06-05 13:23:15
1993	30	448	A COMMENT	\N	2014-06-10 14:06:06	2014-06-10 14:06:06
1994	45	448	A COMMENT	\N	2014-06-13 14:48:21	2014-06-13 14:48:21
1995	14	449	A COMMENT	\N	2014-07-14 19:20:31	2014-07-14 19:20:31
1996	33	450	A COMMENT	\N	2013-12-30 14:01:51	2013-12-30 14:01:51
1997	10	450	A COMMENT	\N	2014-04-06 23:35:37	2014-04-06 23:35:37
1998	10	450	A COMMENT	\N	2014-04-29 13:14:55	2014-04-29 13:14:55
1999	1	450	A COMMENT	\N	2014-05-11 10:19:35	2014-05-11 10:19:35
2000	3	450	A COMMENT	\N	2014-05-27 15:46:57	2014-05-27 15:46:57
2001	2	450	A COMMENT	\N	2014-06-21 04:22:47	2014-06-21 04:22:47
2002	45	450	A COMMENT	\N	2014-06-28 09:48:44	2014-06-28 09:48:44
2003	30	450	A COMMENT	\N	2014-07-16 17:55:21	2014-07-16 17:55:21
2004	28	450	A COMMENT	\N	2014-07-22 00:27:57	2014-07-22 00:27:57
2005	2	451	A COMMENT	\N	2014-04-05 05:30:52	2014-04-05 05:30:52
2006	27	451	A COMMENT	\N	2014-04-11 13:14:06	2014-04-11 13:14:06
2007	47	451	A COMMENT	\N	2014-04-17 13:53:53	2014-04-17 13:53:53
2008	4	451	A COMMENT	\N	2014-04-28 09:32:52	2014-04-28 09:32:52
2009	43	451	A COMMENT	\N	2014-05-21 21:18:16	2014-05-21 21:18:16
2010	10	451	A COMMENT	\N	2014-05-31 11:06:53	2014-05-31 11:06:53
2011	28	451	A COMMENT	\N	2014-06-27 06:33:19	2014-06-27 06:33:19
2012	45	451	A COMMENT	\N	2014-07-06 09:55:48	2014-07-06 09:55:48
2013	45	452	A COMMENT	\N	2014-01-12 08:30:18	2014-01-12 08:30:18
2014	28	452	A COMMENT	\N	2014-01-28 04:19:24	2014-01-28 04:19:24
2015	2	452	A COMMENT	\N	2014-02-07 15:19:08	2014-02-07 15:19:08
2016	30	452	A COMMENT	\N	2014-02-15 10:32:40	2014-02-15 10:32:40
2017	30	452	A COMMENT	\N	2014-02-25 00:29:49	2014-02-25 00:29:49
2018	47	452	A COMMENT	\N	2014-03-02 12:50:18	2014-03-02 12:50:18
2019	37	452	A COMMENT	\N	2014-03-14 02:58:01	2014-03-14 02:58:01
2020	27	452	A COMMENT	\N	2014-03-15 11:09:57	2014-03-15 11:09:57
2021	37	452	A COMMENT	\N	2014-03-18 19:58:46	2014-03-18 19:58:46
2022	3	452	A COMMENT	\N	2014-04-16 16:47:17	2014-04-16 16:47:17
2023	47	452	A COMMENT	\N	2014-05-10 09:44:05	2014-05-10 09:44:05
2024	14	452	A COMMENT	\N	2014-05-20 04:34:39	2014-05-20 04:34:39
2025	3	452	A COMMENT	\N	2014-05-20 16:23:25	2014-05-20 16:23:25
2026	27	452	A COMMENT	\N	2014-06-07 07:55:24	2014-06-07 07:55:24
2027	10	452	A COMMENT	\N	2014-06-07 16:46:15	2014-06-07 16:46:15
2028	45	452	A COMMENT	\N	2014-07-01 15:45:48	2014-07-01 15:45:48
2029	37	452	A COMMENT	\N	2014-07-02 02:48:53	2014-07-02 02:48:53
2030	43	452	A COMMENT	\N	2014-07-06 10:24:10	2014-07-06 10:24:10
2031	21	452	A COMMENT	\N	2014-07-06 17:28:21	2014-07-06 17:28:21
2032	21	452	A COMMENT	\N	2014-07-09 17:28:19	2014-07-09 17:28:19
2033	10	453	A COMMENT	\N	2014-05-17 05:14:29	2014-05-17 05:14:29
2034	15	454	A COMMENT	\N	2014-04-15 16:31:40	2014-04-15 16:31:40
2035	43	454	A COMMENT	\N	2014-06-12 14:56:10	2014-06-12 14:56:10
2036	45	454	A COMMENT	\N	2014-06-22 02:28:29	2014-06-22 02:28:29
2037	2	454	A COMMENT	\N	2014-07-02 11:49:58	2014-07-02 11:49:58
2038	14	455	A COMMENT	\N	2014-04-12 23:36:20	2014-04-12 23:36:20
2039	30	455	A COMMENT	\N	2014-04-26 06:52:22	2014-04-26 06:52:22
2040	14	455	A COMMENT	\N	2014-05-20 17:13:11	2014-05-20 17:13:11
2041	47	455	A COMMENT	\N	2014-05-25 08:07:04	2014-05-25 08:07:04
2042	37	456	A COMMENT	\N	2014-05-16 22:22:36	2014-05-16 22:22:36
2043	47	456	A COMMENT	\N	2014-05-24 11:28:52	2014-05-24 11:28:52
2044	3	456	A COMMENT	\N	2014-07-12 20:13:36	2014-07-12 20:13:36
2045	10	457	A COMMENT	\N	2014-04-29 22:21:01	2014-04-29 22:21:01
2046	27	457	A COMMENT	\N	2014-05-10 00:02:19	2014-05-10 00:02:19
2047	14	457	A COMMENT	\N	2014-05-31 23:30:51	2014-05-31 23:30:51
2048	10	457	A COMMENT	\N	2014-06-03 12:47:54	2014-06-03 12:47:54
2049	45	457	A COMMENT	\N	2014-06-05 09:51:37	2014-06-05 09:51:37
2050	32	457	A COMMENT	\N	2014-06-18 18:38:03	2014-06-18 18:38:03
2051	4	457	A COMMENT	\N	2014-06-23 12:21:18	2014-06-23 12:21:18
2052	28	457	A COMMENT	\N	2014-06-27 08:05:59	2014-06-27 08:05:59
2053	10	457	A COMMENT	\N	2014-07-01 21:21:10	2014-07-01 21:21:10
2054	14	457	A COMMENT	\N	2014-07-04 08:48:13	2014-07-04 08:48:13
2055	2	457	A COMMENT	\N	2014-07-12 10:14:27	2014-07-12 10:14:27
2056	27	457	A COMMENT	\N	2014-07-20 19:58:34	2014-07-20 19:58:34
2057	39	458	A COMMENT	\N	2014-06-09 17:40:52	2014-06-09 17:40:52
2058	27	458	A COMMENT	\N	2014-06-11 01:51:57	2014-06-11 01:51:57
2059	37	458	A COMMENT	\N	2014-06-12 23:40:42	2014-06-12 23:40:42
2060	30	458	A COMMENT	\N	2014-06-20 06:00:20	2014-06-20 06:00:20
2061	2	458	A COMMENT	\N	2014-06-22 17:06:51	2014-06-22 17:06:51
2062	43	458	A COMMENT	\N	2014-07-05 02:22:51	2014-07-05 02:22:51
2063	47	458	A COMMENT	\N	2014-07-06 21:27:51	2014-07-06 21:27:51
2064	1	458	A COMMENT	\N	2014-07-07 18:01:23	2014-07-07 18:01:23
2065	27	458	A COMMENT	\N	2014-07-22 02:55:06	2014-07-22 02:55:06
2066	17	459	A COMMENT	\N	2014-04-30 10:29:24	2014-04-30 10:29:24
2067	17	462	A COMMENT	\N	2014-05-29 01:49:36	2014-05-29 01:49:36
2068	17	464	A COMMENT	\N	2014-06-26 18:14:07	2014-06-26 18:14:07
2069	17	468	A COMMENT	\N	2014-05-21 01:15:04	2014-05-21 01:15:04
2070	17	472	A COMMENT	\N	2014-07-01 11:35:48	2014-07-01 11:35:48
2071	17	474	A COMMENT	\N	2014-05-31 20:17:05	2014-05-31 20:17:05
2072	17	475	A COMMENT	\N	2014-04-13 19:26:48	2014-04-13 19:26:48
2073	17	480	A COMMENT	\N	2014-05-07 03:26:43	2014-05-07 03:26:43
2074	17	482	A COMMENT	\N	2014-04-18 06:02:19	2014-04-18 06:02:19
2075	17	485	A COMMENT	\N	2014-05-06 20:50:15	2014-05-06 20:50:15
2076	17	489	A COMMENT	\N	2014-06-15 04:50:59	2014-06-15 04:50:59
2077	17	490	A COMMENT	\N	2014-07-10 04:52:17	2014-07-10 04:52:17
2078	17	496	A COMMENT	\N	2014-06-27 00:28:15	2014-06-27 00:28:15
2079	17	500	A COMMENT	\N	2014-04-13 09:57:50	2014-04-13 09:57:50
2080	17	501	A COMMENT	\N	2014-04-22 12:33:26	2014-04-22 12:33:26
2081	17	508	A COMMENT	\N	2014-07-13 07:58:54	2014-07-13 07:58:54
2082	17	512	A COMMENT	\N	2014-06-30 13:52:36	2014-06-30 13:52:36
2083	17	513	A COMMENT	\N	2014-05-13 02:40:42	2014-05-13 02:40:42
2084	17	514	A COMMENT	\N	2014-04-14 03:31:55	2014-04-14 03:31:55
2085	23	519	A COMMENT	\N	2013-11-28 09:15:16	2013-11-28 09:15:16
2086	23	523	A COMMENT	\N	2013-12-13 09:19:26	2013-12-13 09:19:26
2087	23	524	A COMMENT	\N	2014-02-15 17:11:26	2014-02-15 17:11:26
2088	23	526	A COMMENT	\N	2013-12-02 06:18:18	2013-12-02 06:18:18
2089	23	530	A COMMENT	\N	2013-12-28 04:30:09	2013-12-28 04:30:09
2090	23	532	A COMMENT	\N	2014-05-22 11:02:03	2014-05-22 11:02:03
2091	23	535	A COMMENT	\N	2014-06-20 03:32:32	2014-06-20 03:32:32
2092	23	537	A COMMENT	\N	2014-05-30 06:28:31	2014-05-30 06:28:31
2093	23	538	A COMMENT	\N	2014-01-29 05:59:23	2014-01-29 05:59:23
2094	23	539	A COMMENT	\N	2014-04-20 07:44:19	2014-04-20 07:44:19
2095	23	540	A COMMENT	\N	2014-05-08 22:30:29	2014-05-08 22:30:29
2096	23	541	A COMMENT	\N	2014-01-24 00:28:37	2014-01-24 00:28:37
2097	23	550	A COMMENT	\N	2014-01-26 08:52:57	2014-01-26 08:52:57
2098	23	552	A COMMENT	\N	2014-03-14 02:04:12	2014-03-14 02:04:12
2099	23	554	A COMMENT	\N	2014-04-26 01:18:22	2014-04-26 01:18:22
2100	23	557	A COMMENT	\N	2014-02-05 05:56:45	2014-02-05 05:56:45
2101	23	560	A COMMENT	\N	2013-12-08 06:48:26	2013-12-08 06:48:26
2102	23	562	A COMMENT	\N	2013-11-26 15:31:57	2013-11-26 15:31:57
2103	41	566	A COMMENT	\N	2014-04-07 08:39:08	2014-04-07 08:39:08
2104	41	567	A COMMENT	\N	2014-05-13 22:08:30	2014-05-13 22:08:30
2105	41	570	A COMMENT	\N	2014-03-28 17:40:51	2014-03-28 17:40:51
2106	44	581	A COMMENT	\N	2014-02-26 18:15:53	2014-02-26 18:15:53
2107	44	587	A COMMENT	\N	2014-01-22 19:56:02	2014-01-22 19:56:02
2108	44	589	A COMMENT	\N	2013-12-29 04:01:28	2013-12-29 04:01:28
2109	44	591	A COMMENT	\N	2014-01-09 02:21:50	2014-01-09 02:21:50
2110	44	592	A COMMENT	\N	2014-02-23 07:57:52	2014-02-23 07:57:52
2111	44	595	A COMMENT	\N	2014-03-20 14:55:08	2014-03-20 14:55:08
2112	44	602	A COMMENT	\N	2014-01-04 17:45:56	2014-01-04 17:45:56
2113	44	609	A COMMENT	\N	2014-05-04 16:08:23	2014-05-04 16:08:23
2114	44	612	A COMMENT	\N	2013-12-30 01:22:09	2013-12-30 01:22:09
2115	44	616	A COMMENT	\N	2014-03-08 02:38:03	2014-03-08 02:38:03
2116	44	620	A COMMENT	\N	2014-06-21 04:28:26	2014-06-21 04:28:26
2117	48	278	A COMMENT	\N	2014-06-11 22:38:12	2014-06-11 22:38:12
2118	25	82	A COMMENT	\N	2014-05-09 14:47:04	2014-05-09 14:47:04
2119	6	17	A COMMENT	\N	2014-07-26 19:31:08.726145	2014-07-26 19:31:08.726145
2120	22	478	A COMMENT	\N	2014-06-03 02:38:55	2014-06-03 02:38:55
2121	16	465	A COMMENT	\N	2014-07-06 20:10:28	2014-07-06 20:10:28
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comments_id_seq', 2121, true);


--
-- Data for Name: lifecycle_events; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY lifecycle_events (id, user_id, key, happened_at, created_at, updated_at) FROM stdin;
1	1	joined	\N	\N	\N
2	2	joined	\N	\N	\N
3	3	joined	\N	\N	\N
4	4	joined	\N	\N	\N
5	5	joined	\N	\N	\N
6	5	fetched	2014-02-27 21:19:45.694291	\N	\N
7	6	joined	\N	\N	\N
8	6	fetched	2014-07-21 07:38:29.696835	\N	\N
9	7	joined	\N	\N	\N
10	8	joined	\N	\N	\N
11	8	fetched	2014-07-05 20:37:31.701054	\N	\N
12	9	joined	\N	\N	\N
13	10	joined	\N	\N	\N
14	10	fetched	2014-06-25 02:12:12.705502	\N	\N
15	11	joined	\N	\N	\N
16	11	fetched	2013-11-23 15:37:29.707985	\N	\N
17	12	joined	\N	\N	\N
18	13	joined	\N	\N	\N
19	13	fetched	2013-11-06 23:17:53.711945	\N	\N
20	14	joined	\N	\N	\N
21	14	fetched	2013-11-25 13:16:14.714323	\N	\N
22	15	joined	\N	\N	\N
23	15	fetched	2013-12-23 16:35:33.716672	\N	\N
24	16	joined	\N	\N	\N
25	16	fetched	2014-01-09 16:00:14.719022	\N	\N
26	17	joined	\N	\N	\N
27	17	fetched	2014-04-11 11:15:29.739496	\N	\N
28	18	joined	\N	\N	\N
29	18	fetched	2014-06-19 02:29:40.744709	\N	\N
30	19	joined	\N	\N	\N
31	19	fetched	2013-11-28 20:07:21.747864	\N	\N
32	20	joined	\N	\N	\N
33	20	fetched	2014-07-19 14:16:58.75074	\N	\N
34	21	joined	\N	\N	\N
35	21	fetched	2013-10-30 01:48:54.754065	\N	\N
36	22	joined	\N	\N	\N
37	22	fetched	2014-04-27 11:56:21.756861	\N	\N
38	23	joined	\N	\N	\N
39	23	fetched	2013-11-24 20:55:30.759392	\N	\N
40	24	joined	\N	\N	\N
41	24	fetched	2014-06-08 20:28:25.761775	\N	\N
42	25	joined	\N	\N	\N
43	25	fetched	2013-12-14 12:22:57.764232	\N	\N
44	26	joined	\N	\N	\N
45	26	fetched	2014-07-11 18:40:24.766971	\N	\N
46	27	joined	\N	\N	\N
47	27	fetched	2014-04-13 19:46:05.770182	\N	\N
48	28	joined	\N	\N	\N
49	28	fetched	2013-12-19 12:08:54.774021	\N	\N
50	29	joined	\N	\N	\N
51	29	fetched	2014-04-25 19:49:41.776956	\N	\N
52	30	joined	\N	\N	\N
53	30	fetched	2014-01-05 12:06:02.779454	\N	\N
54	31	joined	\N	\N	\N
55	31	fetched	2014-06-02 20:39:09.781989	\N	\N
56	32	joined	\N	\N	\N
57	32	fetched	2014-05-13 04:35:25.784475	\N	\N
58	33	joined	\N	\N	\N
59	33	fetched	2013-12-13 10:09:11.78702	\N	\N
60	34	joined	\N	\N	\N
61	34	fetched	2014-04-05 07:35:45.789533	\N	\N
62	35	joined	\N	\N	\N
63	35	fetched	2013-12-21 12:07:33.791962	\N	\N
64	36	joined	\N	\N	\N
65	36	fetched	2014-06-20 12:40:33.794514	\N	\N
66	37	joined	\N	\N	\N
67	37	fetched	2013-11-05 18:27:35.796953	\N	\N
68	38	joined	\N	\N	\N
69	39	joined	\N	\N	\N
70	39	fetched	2014-05-16 01:41:50.80111	\N	\N
71	40	joined	\N	\N	\N
72	40	fetched	2014-04-01 14:12:32.803528	\N	\N
73	41	joined	\N	\N	\N
74	41	fetched	2014-03-14 23:20:44.80587	\N	\N
75	42	joined	\N	\N	\N
76	42	fetched	2014-01-26 16:36:32.808325	\N	\N
77	43	joined	\N	\N	\N
78	43	fetched	2014-03-22 20:02:50.810779	\N	\N
79	44	joined	\N	\N	\N
80	44	fetched	2013-12-16 00:40:42.813142	\N	\N
81	45	joined	\N	\N	\N
82	45	fetched	2014-04-01 02:09:17.815474	\N	\N
83	46	joined	\N	\N	\N
84	47	joined	\N	\N	\N
85	47	fetched	2013-11-24 21:19:36.819648	\N	\N
86	48	joined	\N	\N	\N
87	48	fetched	2014-03-28 11:06:40.82203	\N	\N
88	8	submitted	2014-07-12 13:17:15	\N	\N
89	8	received_feedback	2014-07-15 09:58:37	\N	\N
90	28	commented	2014-07-15 09:58:37	\N	\N
91	10	commented	2014-07-18 08:51:47	\N	\N
92	39	commented	2014-07-18 18:29:37	\N	\N
93	43	commented	2014-07-20 10:25:11	\N	\N
94	30	commented	2014-07-26 09:07:43	\N	\N
95	8	completed	2014-07-17 05:26:18	\N	\N
96	1	commented	2014-07-20 00:25:53	\N	\N
97	27	commented	2014-07-11 21:40:13	\N	\N
98	4	commented	2014-07-15 01:22:19	\N	\N
99	3	commented	2014-07-16 13:06:07	\N	\N
100	11	commented	2014-07-21 16:12:00	\N	\N
101	47	commented	2014-07-18 23:44:31	\N	\N
102	37	commented	2014-07-20 22:08:27	\N	\N
103	32	commented	2014-07-24 03:43:13	\N	\N
104	21	commented	2014-07-26 08:39:32	\N	\N
105	2	commented	2014-07-17 07:58:24	\N	\N
106	14	commented	2014-07-22 10:31:23	\N	\N
107	45	commented	2014-07-25 07:06:21	\N	\N
108	10	submitted	2014-06-28 09:33:52	\N	\N
109	10	completed	2014-06-30 12:43:43	\N	\N
110	10	received_feedback	2014-06-30 01:22:52	\N	\N
111	8	commented	2014-07-24 15:38:40	\N	\N
112	11	submitted	2014-03-03 16:28:49	\N	\N
113	11	received_feedback	2014-05-11 23:30:58	\N	\N
114	14	submitted	2014-01-09 04:58:53	\N	\N
115	14	completed	2014-01-16 16:51:15	\N	\N
116	14	received_feedback	2014-04-05 10:57:29	\N	\N
117	21	submitted	2014-06-25 13:07:44	\N	\N
118	21	received_feedback	2014-07-10 15:45:57	\N	\N
119	21	completed	2014-06-27 17:16:55	\N	\N
120	27	submitted	2014-06-21 03:57:26	\N	\N
121	27	completed	2014-06-26 20:41:42	\N	\N
122	27	received_feedback	2014-06-30 14:02:59	\N	\N
123	28	submitted	2014-02-06 15:07:54	\N	\N
124	28	received_feedback	2014-04-01 15:30:43	\N	\N
125	28	completed	2014-04-24 05:42:34	\N	\N
126	30	submitted	2014-02-04 01:34:15	\N	\N
127	30	received_feedback	2014-02-11 19:14:40	\N	\N
128	30	completed	2014-02-13 01:51:12	\N	\N
129	32	submitted	2014-05-13 07:59:33	\N	\N
130	37	submitted	2013-11-11 08:11:50	\N	\N
131	37	received_feedback	2013-11-28 20:01:33	\N	\N
132	37	completed	2014-04-22 16:51:12	\N	\N
133	39	submitted	2014-05-29 15:17:57	\N	\N
134	39	received_feedback	2014-06-09 01:54:57	\N	\N
135	39	completed	2014-06-07 23:54:03	\N	\N
136	43	submitted	2014-06-13 17:10:21	\N	\N
137	43	received_feedback	2014-06-25 07:18:57	\N	\N
138	45	submitted	2014-05-08 13:14:17	\N	\N
139	45	received_feedback	2014-05-13 23:09:41	\N	\N
140	45	completed	2014-05-11 20:23:29	\N	\N
141	47	submitted	2014-02-15 03:33:26	\N	\N
142	47	received_feedback	2014-06-18 09:55:22	\N	\N
143	47	completed	2013-12-31 23:33:39	\N	\N
144	48	submitted	2014-04-12 08:58:24	\N	\N
145	48	received_feedback	2014-05-07 13:46:06	\N	\N
146	25	submitted	2013-12-25 13:10:47	\N	\N
147	25	received_feedback	2014-05-11 09:58:51	\N	\N
148	6	submitted	2014-07-21 08:51:36	\N	\N
149	6	received_feedback	2014-07-22 08:13:02	\N	\N
150	22	submitted	2014-07-18 04:58:34	\N	\N
151	22	received_feedback	2014-07-19 02:59:47	\N	\N
152	16	submitted	2014-02-18 15:17:20	\N	\N
153	16	received_feedback	2014-05-02 03:06:38	\N	\N
154	19	submitted	2014-02-16 14:10:21	\N	\N
155	19	completed	2014-02-19 16:40:07	\N	\N
156	19	received_feedback	2014-02-03 13:38:49	\N	\N
157	20	submitted	2014-07-21 00:55:57	\N	\N
158	20	received_feedback	2014-07-21 06:42:05	\N	\N
159	20	completed	2014-07-26 19:31:06.48527	\N	\N
160	35	submitted	2013-12-22 09:33:53	\N	\N
161	35	received_feedback	2014-01-29 15:32:56	\N	\N
162	35	completed	2014-05-05 10:12:41	\N	\N
163	29	submitted	2014-04-29 07:28:21	\N	\N
164	29	received_feedback	2014-05-04 12:50:50	\N	\N
165	29	completed	2014-05-09 09:05:15	\N	\N
166	34	submitted	2014-04-08 06:21:44	\N	\N
167	34	completed	2014-04-15 12:55:53	\N	\N
168	34	received_feedback	2014-07-14 05:08:15	\N	\N
169	13	submitted	2013-11-15 23:49:44	\N	\N
170	13	received_feedback	2013-12-11 13:45:57	\N	\N
171	40	submitted	2014-04-03 19:20:11	\N	\N
172	40	received_feedback	2014-07-16 01:10:54	\N	\N
173	5	submitted	2014-04-15 05:01:29	\N	\N
174	5	received_feedback	2014-04-25 03:46:03	\N	\N
175	33	submitted	2014-01-11 10:32:16	\N	\N
176	33	received_feedback	2014-03-02 15:38:00	\N	\N
177	15	submitted	2014-01-11 15:21:47	\N	\N
178	15	received_feedback	2014-01-12 08:30:18	\N	\N
179	17	submitted	2014-04-30 10:22:24	\N	\N
180	23	submitted	2013-12-16 11:07:00	\N	\N
181	41	submitted	2014-05-13 09:31:26	\N	\N
182	26	submitted	2014-07-11 20:44:34	\N	\N
183	44	submitted	2014-01-02 06:48:35	\N	\N
184	48	commented	2014-06-11 22:38:12	\N	\N
185	25	commented	2014-05-09 14:47:04	\N	\N
186	6	commented	2014-07-26 19:31:08.726145	\N	\N
187	17	received_feedback	2014-06-03 02:38:55	\N	\N
188	22	commented	2014-06-03 02:38:55	\N	\N
189	16	commented	2014-07-06 20:10:28	\N	\N
\.


--
-- Name: lifecycle_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('lifecycle_events_id_seq', 189, true);


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY likes (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('likes_id_seq', 1, false);


--
-- Data for Name: log_entries; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY log_entries (id, user_id, body, created_at, updated_at) FROM stdin;
\.


--
-- Name: log_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('log_entries_id_seq', 1, false);


--
-- Data for Name: looks; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY looks (id, user_id, exercise_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: looks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('looks_id_seq', 1, false);


--
-- Data for Name: muted_submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY muted_submissions (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: muted_submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('muted_submissions_id_seq', 1, false);


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY notifications (id, user_id, item_id, regarding, read, count, created_at, updated_at, item_type, creator_id) FROM stdin;
\.


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('notifications_id_seq', 1, false);


--
-- Data for Name: posts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY posts (id, slug, title, blurb, body, testimonial_keyword, event_on, archive_on, is_indestructible, is_featured, is_service, priority, created_at, updated_at) FROM stdin;
\.


--
-- Name: posts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('posts_id_seq', 1, false);


--
-- Data for Name: products; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY products (id, title, price, created_at, updated_at, sort_order) FROM stdin;
\.


--
-- Name: products_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('products_id_seq', 1, false);


--
-- Data for Name: quotes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY quotes (id, body, cite, created_at, updated_at) FROM stdin;
\.


--
-- Name: quotes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('quotes_id_seq', 1, false);


--
-- Data for Name: submission_viewers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submission_viewers (id, submission_id, viewer_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: submission_viewers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submission_viewers_id_seq', 1, false);


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submissions (id, user_id, key, state, language, slug, code, done_at, is_liked, nit_count, version, created_at, updated_at, user_exercise_id, filename) FROM stdin;
1	8	a69a113289936e995f864255	done	python	bob	__author__ = 'Daniel'\r\n\r\n\r\nclass Bob(object):\r\n    def hey(self, statement):\r\n        if statement.isupper():\r\n            return "Woah, chill out!"\r\n        elif statement.isspace() or statement == '':\r\n            return "Fine. Be that way!"\r\n        elif statement.rfind("?") == (len(statement)-1):\r\n            return "Sure."\r\n        else:\r\n            return "Whatever."\r	2014-07-17 05:26:18	\N	0	1	2014-07-12 13:17:15	2014-07-12 13:17:15	1	bob.py
2	8	9df6fae6333600be5c23a5af	superseded	javascript	grains	;\nvar _square = [],\n    _total = 0,\n    i, num_squares = 64;\n\nfor(i = 0; i < num_squares; i++) {\n    n = Math.pow(2, i);\n    _square.push(n);\n    _total += n;\n}\n\nvar Grains = function() {\n    this.square = function(num) {\n        return _square[num - 1];\n    };\n\n    this.total = function() { return _total; }\n};\n\nmodule.exports = Grains;	\N	\N	0	1	2014-07-16 08:26:35	2014-07-16 08:26:35	2	grains.js
3	8	f7186c41f8da2fb94613828d	pending	javascript	grains	;\nvar _square = [],\n    _total = 0,\n    i, num_squares = 64;\n\nvar make_total = function() {\n    var total = 0;\n    for(i = 0; i < num_squares; i++) {\n        total += Math.pow(2, i);\n    }\n    return total;\n}\n\nvar Grains = function() {\n    this.square = function(num) {\n        var i = num - 1\n        if(!_square[i])\n            _square[i] = Math.pow(2,i);\n        return _square[i];\n    };\n\n    this.total = function() { \n        if(!_total)\n            _total = make_total();\n        return _total;\n    }\n};\n\nmodule.exports = Grains;	\N	\N	0	2	2014-07-17 15:45:05	2014-07-17 15:45:05	2	grains.js
4	8	2a962b715a33c2f3983b60c4	pending	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map translate\n  where\n    translate 'U' = 'T'\n    translate 'T' = 'U'\n    translate  x  = x	\N	\N	0	2	2014-07-09 21:56:19	2014-07-09 21:56:19	3	rna-transcription.hs
5	8	5bd0f65624e2d6ab68401064	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = foldr f []\n  where\n    f 'U' = ('T':)\n    f 'T' = ('U':)\n    f x   = (x:)	\N	\N	0	1	2014-07-10 20:00:53	2014-07-10 20:00:53	3	rna-transcription.hs
6	8	34dc62f72ea4df64415d7500	superseded	ruby	word-count	class Tally\n  def initialize\n    @running_total = Hash.new {|hash,key| hash[key] = 0 }\n  end\n\n  def mark(value)\n    @running_total[value] += 1\n  end\n\n  def to_hash\n    @running_total\n  end\nend\n\nclass Phrase\n  def initialize(string)\n    @string = string\n  end\n\n  def word_count\n    tally = Tally.new\n    each_word {|word| tally.mark(word) }\n    tally.to_hash\n  end\n\n  private\n\n  WORD = /\\w+/\n  def each_word(&block)\n    @string.downcase.scan(WORD) {|word| block.call(word) }\n  end\nend	\N	\N	0	1	2014-07-17 23:18:47	2014-07-17 23:18:47	4	word-count.rb
7	8	b1826d439cd24d9ca94e4738	pending	ruby	word-count	class Tally\n  def initialize\n    @running_total = Hash.new(0)\n  end\n\n  def mark(value)\n    @running_total[value] += 1\n  end\n\n  def to_hash\n    @running_total\n  end\nend\n\nclass Phrase\n  def initialize(string)\n    @string = string\n  end\n\n  def word_count\n    tally = Tally.new\n    each_word {|word| tally.mark(word) }\n    tally.to_hash\n  end\n\n  private\n\n  WORD = /\\w+/\n  def each_word(&block)\n    @string.downcase.scan(WORD) {|word| block.call(word) }\n  end\nend	\N	\N	0	2	2014-07-23 22:54:56	2014-07-23 22:54:56	4	word-count.rb
8	8	cc17fa4b603116e062686d49	done	haskell	luhn	module Luhn (checkDigit, addends, checksum, isValid, create) where\n\nimport Data.List\nimport Data.List.Split\nimport Data.Maybe\n\ncheckDigit :: Integer -> Integer\ncheckDigit = (`mod` 10)\n\naddends :: Integer -> [Integer]\naddends = map toInteger . reverse . zipWith reduce (cycle [1, 2]) . reverse .\n    mapMaybe (`elemIndex` ['0'..'9']) . show where\n    reduce x y = let m = x * y in if m > 9 then m - 9 else m\n\nchecksum :: Integer -> Integer\nchecksum = checkDigit . sum . addends\n\nisValid :: Integer -> Bool\nisValid = (== 0) . checksum\n\ncreate :: Integer -> Integer\ncreate n = let n10 = n * 10 in n10 + (10 - checksum n10) `mod` 10	2014-07-24 18:34:29	\N	0	1	2014-07-15 13:58:46	2014-07-15 13:58:46	5	luhn.hs
9	8	968bfabedfa388d64bd23325	done	haskell	bob	module Bob (responseFor) where\nimport Data.Char\n\n-- create response\nresponseFor :: String -> String\nresponseFor =  define\n\n-- define response by input\n-- in OO I would have made variables for each response\n-- so that it is reusable\n-- not sure how to do this here\n\ndefine :: String -> String\ndefine s    | all isSpace s = "Fine. Be that way!"\n            | (all isUpper $ filter isAlpha s) && any isUpper s = "Woah, chill out!"\n            | '?' == last s = "Sure."\n            | otherwise = "Whatever."	2014-07-22 06:33:27	\N	0	1	2014-07-12 00:50:34	2014-07-12 00:50:34	6	Bob.hs
10	8	c24cc5263fef4173eb9c0841	pending	ruby	hamming	module Hamming\n\n\tdef self.compute(a, b)\n\t\tif a.length < b.length\n\t\t\tmax = a.length\n\t\telse \n\t\t\tmax = b.length\n\t\tend\n\t\tdistance = 0\n\t\tfor i in 0..max-1\n\t\t\tif a[i] != b[i]\n\t\t\t\tdistance += 1\n\t\t\tend\n\t\tend\n\t\treturn distance\n\tend\n\t\nend	\N	\N	0	1	2014-07-07 18:47:24	2014-07-07 18:47:24	7	hamming.rb
11	8	c200272e3f768ca03974e65a	superseded	javascript	word-count	module.exports = function (phrase) {\n    var count = {};\n\n    phrase.replace(/[^\\w\\d\\s]/g, '').toLowerCase().split(/\\s+/).forEach(function (word) {\n        count[word] = (count[word] || 0) + 1;\n    });\n\n    this.count = count;\n};	\N	\N	0	1	2014-07-06 13:55:20	2014-07-06 13:55:20	8	word-count.js
12	8	6791c588db2dca5ea89329c9	superseded	javascript	word-count	module.exports = function (phrase) {\n    var count = {};\n\n    phrase.toLowerCase().match(/\\w+/g).forEach(function (word) {\n        count[word] = (count[word] || 0) + 1;\n    });\n\n    this.count = count;\n};	\N	\N	0	2	2014-07-06 18:38:31	2014-07-06 18:38:31	8	word-count.js
13	8	ef6b446c450f7b74c7764331	pending	javascript	word-count	module.exports = function (phrase) {\n\n    this.count = phrase.toLowerCase().match(/\\w+/g).reduce(function (count, word) {\n        count[word] = (count[word] || 0) + 1;\n        return count;\n    }, {});\n\n};	\N	\N	0	3	2014-07-08 00:16:49	2014-07-08 00:16:49	8	word-count.js
14	8	ce24528feff8e101b6eb3587	superseded	ruby	bob	class Bob\n  def hey(input)\n    if input.strip.empty? then\n      return 'Fine. Be that way!'\n    elsif input.upcase == input and /[A-Z]+/ =~ input then\n      return 'Woah, chill out!'\n    elsif /\\?\\z/ =~ input then\n      return 'Sure.'\n    else\n      return 'Whatever.'\n    end\n  end\nend	\N	\N	0	1	2014-07-09 18:10:44	2014-07-09 18:10:44	9	bob.rb
15	8	46face2ff592799a07d2aaec	pending	ruby	bob	class Bob\n  def hey(input)\n    if input.strip.empty? then\n      return 'Fine. Be that way!'\n    elsif input.upcase == input and /[A-Z]+/ =~ input then\n      return 'Woah, chill out!'\n    elsif input.end_with?('?') then\n      return 'Sure.'\n    else\n      return 'Whatever.'\n    end\n  end\nend	\N	\N	0	2	2014-07-11 23:16:01	2014-07-11 23:16:01	9	bob.rb
16	8	cf9d8e63fc7b6df25551132e	pending	javascript	beer-song	function soMany(bottles) {\n  var thisMany = +((bottles + 100).toString().slice(-2)) || 'No more',\n    bottles = ' bottle' + (thisMany == 1 ? '' : 's');\n\n  return {\n    ofBeer: function(arg) {\n      return (arg.match(/\\n/) ?\n        thisMany.toString().toLowerCase() : thisMany) +\n        bottles + ' of beer' + arg;\n    }\n  };\n};\n\nfunction notSoMany(bottles) {\n  return soMany(--bottles);\n};\n\nfunction doSomethingWith(bottles) {\n  return bottles == 0 ? 'Go to the store and buy some more, ' :\n    'Take ' + (bottles == 1 ? 'it' : 'one') + ' down and pass it around, '\n};\n\nmodule.exports = {\n  verse: function(bottles) {\n    return soMany(bottles).ofBeer(' on the wall, ') +\n      soMany(bottles).ofBeer('.\\n') +\n      doSomethingWith(bottles) +\n      notSoMany(bottles).ofBeer(' on the wall.\\n');\n  },\n  sing: function(from, to) {\n    return Array\n      .apply(null, {length: 1 + from - (to || 0)})\n      .map(function(_, i) {return this.verse(from - i)}, this)\n      .join('\\n');\n  }\n};	\N	\N	0	2	2014-07-16 16:39:31	2014-07-16 16:39:31	10	beer.js
17	8	fff0372188c66f206df48961	superseded	javascript	beer-song	var Beer = (function () {\n    'use strict';\n\n    var sing = function (start, end) {\n        var i = start, end = end || 0, song = '';\n        while (i >= end) {\n            song += verse(i) + "\\n";\n            i--;\n        }\n        return song.slice(0, -1);\n    }\n    var verse = function (bottles) {\n        return firstLine(count(fancy(bottles))) + secondLine(fancy(bottles));\n    }\n    function firstLine(bottles) {\n        return bottles + " on the wall, " + bottles.toLowerCase() + ".\\n";\n    }\n    function secondLine(bottles) {\n        return doSomethingWith(fancy(bottles)) + again(count(fancy(bottles - 1)));\n    }\n    function again(bottles) {\n        return bottles.toLowerCase() + " on the wall.\\n";\n    }\n    function count(bottles) {\n        if (bottles === 0) {\n            return "No more bottles of beer";\n        }\n        else if (bottles === 1) {\n            return "1 bottle of beer";\n        }\n        return bottles + " bottles of beer";\n    }\n    function doSomethingWith(bottles) {\n        if (bottles === 0) {\n            return "Go to the store and buy some more, ";\n        }\n        else if (bottles === 1) {\n            return "Take it down and pass it around, ";\n        }\n        return "Take one down and pass it around, ";\n    }\n    function fancy(bottles) {\n        return parseInt((bottles + 100).toString().slice(-2));\n    }\n\n    return {\n        verse: verse,\n        sing: sing\n    }\n}());\nmodule.exports = Beer;	\N	\N	0	1	2014-07-22 21:50:59	2014-07-22 21:50:59	10	beer-song.js
18	8	74b97ba230a338f6db3b6c91	pending	python	word-count	#!/usr/bin/python\nimport string\n\nclass Phrase:\n  def __init__(self, phrase):\n    self.__phrase = phrase\n    self.__counts = {}\n\n\n  def __sanitize(self, phrase):\n    phrase = phrase.translate(None, string.punctuation)\n    phrase = phrase.lower()\n    return phrase\n\n  def word_count(self):\n    phrase = self.__sanitize(self.__phrase)\n    for word in phrase.split():\n      self.__counts[word] = self.__counts.setdefault(word, 0) + 1\n    return self.__counts	\N	\N	0	1	2014-07-09 10:36:05	2014-07-09 10:36:05	11	wordcount.py
19	8	7e392267872c8d726a66f755	pending	ruby	anagram	class Anagram\n\n  attr_reader :initial_word, :initial_word_letters\n\n  def initialize initial_word\n    @initial_word = initial_word.downcase\n    @initial_word_letters = char_count @initial_word\n  end\n\n  def match wordset\n    matches = Array.new\n\n    wordset.each do |anagram_word|\n      anagram_word_letters = char_count(anagram_word)\n      matches << anagram_word unless hashes_differ? anagram_word_letters or same_word? anagram_word\n    end\n\n    return matches\n  end\n\n  def char_count any_word\n      letters = Hash.new\n      any_word = any_word.downcase\n\n      any_word.each_char do |char|\n          letters[char] = any_word.count char unless letters.include? char\n      end\n\n      return letters\n  end\n\n  def hashes_differ? anagram_word_hash\n    anagram_word_hash != initial_word_letters\n  end\n\n  def same_word? anagram_word\n    anagram_word.downcase == initial_word\n  end\nend	\N	\N	0	1	2014-07-07 21:47:35	2014-07-07 21:47:35	12	anagram.rb
20	8	eb410d28d4d65abfe5fc8413	done	ruby	gigasecond	class Gigasecond\n  DAYS_TO_GIGASECOND = 10**9 / 60 / 60 / 24\n  def initialize(date_of_birth)\n    @date_of_birth = date_of_birth\n  end\n\n  def date\n    @date_of_birth + DAYS_TO_GIGASECOND\n  end\nend	2014-07-15 15:13:52	\N	0	1	2014-07-07 15:54:27	2014-07-07 15:54:27	13	gigasecond.rb
21	8	21d129fc89e75b2088ed8a1c	done	javascript	simple-cipher	var Cipher = function() {\n//  this.key = 'eeeeeeeeee';\n};\n\nCipher.prototype.encode = function(str) {\n\n};\n\nCipher.prototype.decode = function(str) {\n\n};	2014-07-11 23:54:49	\N	0	1	2014-07-07 16:15:21	2014-07-07 16:15:21	14	simple-cipher_test.js
32	10	c4707acd6776072818c59dfe	superseded	ruby	bob	class Bob\n  def hey(message)\n    message ||= ""\n\n    return "Sure."              if question?(message)\n    return "Whatever."          if tell_something?(message)\n    return "Woah, chill out!"   if shouting?(message)\n    return "Fine. Be that way!" if silence?(message)\n  end\n\n  private\n  def silence?(message)\n    message.empty?\n  end\n\n  def shouting?(message)\n    !silence?(message) && (message.upcase == message)\n  end\n\n  def question?(message)\n    !shouting?(message) && (message[-1] == "?")\n  end\n\n  def tell_something?(message)\n    !silence?(message) && !question?(message) && !shouting?(message)\n  end\nend	\N	\N	0	2	2014-06-30 08:58:28	2014-06-30 08:58:28	22	bob.rb
22	8	8039204eb87e0fcaab5c7136	done	python	allergies	class Allergies:\n    SCORES = {\n            128: 'cats',\n            64: 'pollen',\n            32: 'chocolate',\n            16: 'tomatoes',\n            8: 'strawberries',\n            4: 'shellfish',\n            2: 'peanuts',\n            1: 'eggs'\n    }\n\n    def __init__(self, score):\n        self.score = self._normalize_score(score)\n        self.list = self._determine_allergies()\n\n    def is_allergic_to(self, substance):\n        return substance in self.list\n\n\n\n    def _determine_allergies(self):\n        allergies = list()\n        remainder = self.score\n        for score, allergy in reversed(sorted(self.SCORES.items())):\n            if score <= remainder:\n                allergies.append(allergy)\n                remainder %= score\n        return list(reversed(allergies))\n\n    def _normalize_score(self, score):\n        while score > 255:\n            score -= 256\n        return score	2014-07-22 05:13:30	\N	0	1	2014-07-15 23:35:15	2014-07-15 23:35:15	15	allergies.py
23	8	80a82305c81dc012028390a1	done	javascript	nucleotide-count	function DNA (string) {\n  this.string = string;\n  var result = { A : 0, T : 0, G : 0, C : 0 };\n  if (this.string.length === 0) {\n    return result;\n  }\n  for (var i = 0; i < this.string.length; i++) {\n    if (result[this.string[i]] >= 0 ) {\n      result[this.string[i]]++;\n    }\n  }\n    this.nucleotideCounts = result;\n}\n\nDNA.prototype.count = function(search) {\n  var count = [];\n  for (var i = 0; i < this.string.length; i++) {\n    if (this.string[i] === search){\n      count.push(i);\n    }\n  }\n  return count.length;\n}\n\n\n// dna = new DNA();\n\n// DNA.prototype.nucleotideCounts = function() {\n//   var result = { A : 0, T : 0, C : 0, G : 0 };\n//   if (this.string.length === 0) {\n//     return result;\n//   }\n//   console.log(result);\n//   for (var i =0; i < this.string.length; i++) {\n//     if (result[this.string[i]]) {\n//       result[this.string[i]]++;\n//     }\n//   }\n//   this.nucleotideCounts = result;\n// };	2014-07-21 02:24:41	\N	0	1	2014-07-14 02:33:55	2014-07-14 02:33:55	16	nucleotide-count_test.js
24	8	27cfc14efa9e702126b92975	superseded	haskell	point-mutations	module DNA\n    (hammingDistance) where\n\nimport Data.Bool (bool)\n\nhammingDistance :: String -> String -> Integer\nhammingDistance xs = sum . zipWith go xs\n    where\n        go x y = bool 0 1 (x /= y)	\N	\N	0	1	2014-07-21 22:44:13	2014-07-21 22:44:13	17	DNA.hs
25	8	a4a6934ca43c87345d818113	done	haskell	point-mutations	module DNA\n    (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance xs = sum . zipWith go xs\n    where\n        go x y = fromEnum (x /= y)	2014-07-24 12:50:04	\N	0	2	2014-07-24 02:22:26	2014-07-24 02:22:26	17	DNA.hs
26	8	d3ae846a9f2d0e9e89c54f5e	done	go	binary	package binary\n\nfunc ToDecimal(bin string) (dec int) {\n\tsize := len(bin) - 1\n\tfor i, b := range bin {\n\t\tswitch b {\n\t\tcase '1':\n\t\t\tdec += 1 << uint(size-i)\n\t\tcase '0':\n\t\tdefault:\n\t\t\treturn 0\n\t\t}\n\t}\n\treturn\n}	2014-07-20 04:24:51	\N	0	1	2014-07-10 09:50:03	2014-07-10 09:50:03	18	binary.go
27	8	6f49ffc23c025647d385cc74	pending	python	nucleotide-count	class DNA(object):\n    NUCLEOTIDES = 'ACGT'\n\n    def __init__(self, strand):\n        self._strand = strand\n\n    def count(self, nucleotide):\n        if nucleotide not in self.NUCLEOTIDES and nucleotide != 'U':\n            raise ValueError("%s is not a nucleotide." % nucleotide)\n        return self._strand.count(nucleotide)\n\n    def nucleotide_counts(self):\n        counts = dict((n, 0) for n in self.NUCLEOTIDES)\n        for c in self._strand:\n            counts[c] += 1\n        return counts	\N	\N	0	1	2014-07-19 13:13:44	2014-07-19 13:13:44	19	nucleotide-count.py
28	8	db322999cdfbe517bf2f59e1	superseded	haskell	beer-song	module Beer(sing, verse) where\n\nimport Data.List (intercalate)\n\nverse :: Int -> String\nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse 1 = "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\nverse 2 = "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\nverse v = vs ++ " bottles of beer on the wall, " ++ vs ++ " bottles of beer.\\nTake one down and pass it around, " ++ vspred ++ " bottles of beer on the wall.\\n"\n  where vs = show v\n        vspred = show . pred $ v\n\nsing :: Int -> Int -> String\nsing start end\n  | start < end = ""\n  | otherwise    = intercalate "\\n" [verse start, sing (pred start) end]	\N	\N	0	1	2014-07-10 10:46:32	2014-07-10 10:46:32	20	beer.hs
29	8	36ed70ea5628a6a6ddc397bf	pending	haskell	beer-song	module Beer(sing, verse) where\n\nimport Data.List (intercalate)\n\nverse :: Int -> String\nverse 0 = "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\nverse 1 = "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\nverse 2 = "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\nverse v = vs ++ " bottles of beer on the wall, " ++ vs ++ " bottles of beer.\\nTake one down and pass it around, " ++ vspred ++ " bottles of beer on the wall.\\n"\n  where vs = show v\n        vspred = show . pred $ v\n\nsing :: Int -> Int -> String\nsing start end = unlines $ map verse [start, start - 1 .. end]	\N	\N	0	2	2014-07-22 07:04:48	2014-07-22 07:04:48	20	beer.hs
30	10	3b09edb8851d42178dd1f54c	done	ruby	grains	# This version is very slightly optimized but follows the letter of the method (doubling each in turn, and only when requested)\n\nclass Grains\n  def initialize\n    @squares = []\n    @squares[1] = 1\n    @total = nil\n  end\n\n  def square(x)\n    if @squares[x].nil?\n      @squares[x] = square(x-1) * 2\n    end\n    return @squares[x]\n  end\n\n  def total\n    if @total.nil?\n      @total = (1..64).inject(0){ | result, element | result += square(element) }\n    end\n    return @total\n  end\nend	2014-06-30 12:43:43	\N	0	1	2014-06-28 09:33:52	2014-06-28 09:33:52	21	grains.rb
31	10	be61e5ac6fad648cb745a8b9	done	ruby	bob	class Bob\n  DEFAULT = "Whatever."\n  MESSAGES = {\n    :question? => "Sure.",\n    :shouting? => "Woah, chill out!",\n    :silence?  => "Fine. Be that way!"\n  }\n\n  PREDICATES = [\n    :silence?, :shouting?, :question?\n  ]\n\n  def hey(message)\n    message = message.to_s  \n\n    MESSAGES.fetch(message_type(message), DEFAULT)\n  end\n\n  private\n  def message_type(message)\n    PREDICATES.detect {|sym| send(sym, message) }\n  end\n\n  def silence?(message)\n    message.empty?\n  end\n\n  def shouting?(message)\n    !silence?(message) && (message.upcase == message)\n  end\n\n  def question?(message)\n    !shouting?(message) && (message[-1] == "?")\n  end\nend	2014-07-04 02:54:38	\N	0	5	2014-06-26 15:03:10	2014-06-26 15:03:10	22	bob.rb
33	10	b0e165db9207932e6a7bd0e6	superseded	ruby	bob	class Bob\n  def hey(message)\n    return "Fine. Be that way!" if silence?(message)\n    return "Woah, chill out!"   if shouting?(message)\n    return "Sure."              if question?(message)\n    return "Whatever."\n  end\n\n  private\n  def silence?(message)\n    message.nil? || message.empty?\n  end\n\n  def shouting?(message)\n    message.upcase == message\n  end\n\n  def question?(message)\n    message[-1] == "?"\n  end\nend	\N	\N	0	1	2014-07-04 23:28:19	2014-07-04 23:28:19	22	bob.rb
34	10	a4a9ddd3b172a7de5f7d7d14	superseded	ruby	bob	class Bob\n  def hey(message)\n    message = message.to_s  \n\n    return "Sure."              if question?(message)\n    return "Woah, chill out!"   if shouting?(message)\n    return "Fine. Be that way!" if silence?(message)\n    return "Whatever."\n  end\n\n  private\n  def silence?(message)\n    message.empty?\n  end\n\n  def shouting?(message)\n    !silence?(message) && (message.upcase == message)\n  end\n\n  def question?(message)\n    !shouting?(message) && (message[-1] == "?")\n  end\nend	\N	\N	0	4	2014-07-16 23:06:40	2014-07-16 23:06:40	22	bob.rb
35	10	3fb89d2070802aced4de684e	superseded	ruby	bob	class Bob\n  def hey(message)\n    message ||= ""\n\n    return "Sure."              if question?(message)\n    return "Woah, chill out!"   if shouting?(message)\n    return "Fine. Be that way!" if silence?(message)\n    return "Whatever."\n  end\n\n  private\n  def silence?(message)\n    message.empty?\n  end\n\n  def shouting?(message)\n    !silence?(message) && (message.upcase == message)\n  end\n\n  def question?(message)\n    !shouting?(message) && (message[-1] == "?")\n  end\nend	\N	\N	0	3	2014-07-18 12:10:12	2014-07-18 12:10:12	22	bob.rb
36	10	fa339e807cda200458515c17	superseded	haskell	etl	module ETL (transform) where\r\n\r\nimport qualified Data.Map as M\r\nimport qualified Data.Char as C\r\n\r\ntransform :: M.Map Int [String] -> M.Map String Int\r\ntransform m = M.fromList $ concat $ [map (\\z -> (z,y)) x| (x,y) <- zip j k]\r\n    where {j = map (map lowerStr) h;\r\n\t       k = M.keys m;\r\n\t\t  lowerStr = map C.toLower;\r\n\t\t  h = map snd $ map f [0 .. (M.size m) - 1];\r\n\t\t  f a = (flip $ M.elemAt) m a;} -- Flip the elemAt function so we can use it with map on every index in the input Map	\N	\N	0	1	2014-07-10 17:35:17	2014-07-10 17:35:17	23	ETL.hs
37	10	8924a151c0b04632321d6bf8	pending	haskell	etl	module ETL (transform) where\r\n\r\nimport qualified Data.Map as M\r\nimport qualified Data.Char as C\r\n\r\ntransform :: M.Map Int [String] -> M.Map String Int\r\ntransform m = M.fromList $ concat $ [map (\\z -> (lowerStr z,x)) y | (x,y) <- M.toList m]\r\n\twhere lowerStr = map C.toLower	\N	\N	0	2	2014-07-12 07:20:06	2014-07-12 07:20:06	23	ETL.hs
38	10	5d21ef13bddfb5553dc17b1c	pending	python	bob	class Bob(object):\n    def hey(self, stimulus):\n        if self._is_silence(stimulus):\n            return 'Fine. Be that way!'\n\n        elif self._is_shouting(stimulus):\n            return 'Woah, chill out!'\n\n        elif self._is_question(stimulus):\n            return 'Sure.'\n\n        else:\n            return 'Whatever.'\n\n\n\n    def _is_silence(self, stimulus):\n        return (stimulus == None or stimulus.strip() == '')\n\n    def _is_shouting(self, stimulus):\n        return stimulus == stimulus.upper()\n\n    def _is_statement(self, stimulus):\n        return stimulus.endswith('.')\n\n    def _is_question(self, stimulus):\n        return stimulus.endswith('?')	\N	\N	0	1	2014-06-28 13:17:49	2014-06-28 13:17:49	24	bob.py
39	10	702e08dcca4184ebffeaf0ba	superseded	haskell	allergies	module Allergies (\n  Allergen(..),\n  isAllergicTo,\n  allergies\n) where\n\nimport Data.Bits ((.&.))\n\ndata Allergen = Eggs            -- 2^0\n              | Peanuts         -- 2^1\n              | Shellfish       -- 2^2\n              | Strawberries    -- 2^3\n              | Tomatoes        -- 2^4\n              | Chocolate       -- 2^5\n              | Pollen          -- 2^6\n              | Cats            -- 2^7\n  deriving (Eq, Show, Enum, Bounded)\n\nallergens :: [Allergen]\nallergens = [minBound .. maxBound]\n\nscore :: Allergen -> Int\nscore = (2^) . fromEnum\n\nisAllergicTo :: Allergen -> Int -> Bool\nisAllergicTo a s = score a .&. s /= 0\n\nallergies :: Int -> [Allergen]\nallergies s = [a | a <- allergens, isAllergicTo a s] 	\N	\N	0	1	2014-07-02 05:29:42	2014-07-02 05:29:42	25	allergies.hs
40	10	fbdb56c962749c5e77c91604	superseded	haskell	allergies	module Allergies (\n  Allergen(..),\n  isAllergicTo,\n  allergies\n) where\n\nimport Data.Bits (testBit)\n\ndata Allergen = Eggs            -- 2^0\n              | Peanuts         -- 2^1\n              | Shellfish       -- 2^2\n              | Strawberries    -- 2^3\n              | Tomatoes        -- 2^4\n              | Chocolate       -- 2^5\n              | Pollen          -- 2^6\n              | Cats            -- 2^7\n  deriving (Eq, Show, Enum, Bounded)\n\nallergens :: [Allergen]\nallergens = [minBound .. maxBound]\n\nisAllergicTo :: Allergen -> Int -> Bool\nisAllergicTo a s = testBit s $ fromEnum a\n\nallergies :: Int -> [Allergen]\nallergies s = [a | a <- allergens, isAllergicTo a s] 	\N	\N	0	2	2014-07-16 03:34:35	2014-07-16 03:34:35	25	allergies.hs
41	10	6cbecf2c3809d857476953c4	done	haskell	allergies	module Allergies (\n  Allergen(..),\n  isAllergicTo,\n  allergies\n) where\n\nimport Data.Bits (testBit)\n\ndata Allergen = Eggs            -- 2^0\n              | Peanuts         -- 2^1\n              | Shellfish       -- 2^2\n              | Strawberries    -- 2^3\n              | Tomatoes        -- 2^4\n              | Chocolate       -- 2^5\n              | Pollen          -- 2^6\n              | Cats            -- 2^7\n  deriving (Eq, Show, Enum, Bounded)\n\nallergens :: [Allergen]\nallergens = [minBound .. maxBound]\n\nisAllergicTo :: Allergen -> Int -> Bool\nisAllergicTo a s = testBit s $ fromEnum a\n\nallergies :: Int -> [Allergen]\nallergies s = filter (`isAllergicTo` s) allergens	2014-07-25 00:28:46	\N	0	3	2014-07-23 06:26:16	2014-07-23 06:26:16	25	allergies.hs
42	10	3fcb26f2920f802a4b3f7529	pending	javascript	bob	function isEmpty(s) {\n  var is = /^[ \\n\\r]*$/;\n  return is.test(s);\n}\n\nfunction shouts(s) {\n  var has_upper = /[A-Z]/;\n  return (has_upper.test(s) && (s.toUpperCase() == s));\n}\n\nfunction questions(s) {\n  var isq = /[?]$/;\n  return isq.test(s);\n}\n\nvar Bob = function () {\n  this.hey = function (s) {\n    if(isEmpty(s))\n      return 'Fine. Be that way!';\n    else if(shouts(s))\n      return 'Woah, chill out!';\n    else if(questions(s))\n      return 'Sure.';\n    else\n      return 'Whatever.';\n  }\n};\n\n\n\nmodule.exports = Bob;	\N	\N	0	1	2014-07-13 00:03:59	2014-07-13 00:03:59	26	bob.js
64	10	9598ed0420238041c1bf95de	superseded	scala	bob	class Bob {\n\n  def hey(req:String):String = {\n        if (req.trim == "")\n\t\t"Fine. Be that way!"\n\telse if (req.equals(req.toUpperCase) && !req.equals(req.toLowerCase))\n\t\t"Woah, chill out!" \n\telse if (req.endsWith("?"))\n\t\t"Sure."\n\telse\n\t\t"Whatever."\n  }\n\n}	\N	\N	0	1	2014-06-25 09:56:54	2014-06-25 09:56:54	40	Bob.scala
43	10	1bbf9384b565a34c4c5ea1bb	pending	haskell	beer-song	module Beer\n( sing\n, verse\n) where\n\nimport Data.Char\n\ngetBottle :: Int -> String\ngetBottle 1 = "1 bottle"\ngetBottle 0 = "no more bottles"\ngetBottle n = (show n) ++ " bottles"\n\ngetPronoun :: Int -> String\ngetPronoun 1 = "it"\ngetPronoun _ = "one"\n\nverse :: Int -> String\nverse 0 = caps ++ " of beer on the wall, " ++ curr ++ \n                  " of beer.\\nGo to the store and buy some more, " ++ \n                  (getBottle 99) ++ " of beer on the wall.\\n"\n    where \n        caps = toUpper (head curr) : (tail curr)\n        curr = getBottle 0\nverse n = curr ++ " of beer on the wall, " ++ curr ++ \n                  " of beer.\\nTake " ++ (getPronoun n) ++\n                  " down and pass it around, " ++ \n                  next ++ " of beer on the wall.\\n"\n    where\n        curr = getBottle n\n        next = getBottle (n-1)\n\nsing :: Int -> Int -> String\nsing curr end\n    | curr > end = (verse curr) ++ "\\n" ++ sing (curr-1) end\n    | otherwise  = (verse curr) ++ "\\n"	\N	\N	0	1	2014-06-29 23:24:08	2014-06-29 23:24:08	27	Beer.hs
44	10	8f5cbad92913b947a4758d19	pending	ruby	proverb	class Proverb\n  def initialize(*nouns, qualifier: '')\n    @nouns = nouns\n    @qualifier = qualifier\n  end\n\n  def to_s\n    @to_s ||= sentences(@nouns).push(conclusion(@nouns.first)).join("\\n")\n  end\n\n  private\n\n  def sentence(a, b)\n    "For want of a #{a} the #{b} was lost."\n  end\n\n  def sentences(nouns)\n    nouns.each_cons(2).map { |a, b| sentence(a, b) }\n  end\n\n  def conclusion(noun)\n    "And all for the want of a #{qualified(noun)}."\n  end\n\n  def qualified(noun)\n    "#{@qualifier} #{noun}".strip\n  end\nend	\N	\N	0	2	2014-06-27 00:01:06	2014-06-27 00:01:06	28	proverb.rb
45	10	dd333b7c91d2de339beac118	superseded	ruby	proverb	class Proverb\n  def initialize(*nouns, qualifier: '')\n    @nouns = nouns\n    @qualifier = qualifier\n  end\n\n  def to_s\n    @to_s ||= sentences(@nouns).push(conclusion(@nouns.first)).join("\\n")\n  end\n\n  private\n\n  def sentence(a, b)\n    "For want of a #{a} the #{b} was lost."\n  end\n\n  def sentences(nouns)\n    nouns.map.with_index { |noun, i| sentence(noun, nouns[i + 1]) }[0..-2]\n  end\n\n  def conclusion(noun)\n    "And all for the want of a #{qualified(noun)}."\n  end\n\n  def qualified(noun)\n    "#{@qualifier} #{noun}".strip\n  end\nend	\N	\N	0	1	2014-07-18 06:53:11	2014-07-18 06:53:11	28	proverb.rb
46	10	dbbf26a06261db620fd170a3	done	haskell	triangle	module Triangle (TriangleType(..), triangleType) where\nimport Data.List (sort)\n\ndata TriangleType = Equilateral \n                  | Isosceles \n                  | Scalene \n                  | Illogical \n                  deriving (Eq, Show)\n\n\ntriangleType :: Int -> Int -> Int -> TriangleType\ntriangleType x y z\n    | a == b && a == c = Equilateral\n    | b == c           = Isosceles\n    | a + b > c        = Scalene\n    | otherwise        = Illogical\n    where (a:b:c:[]) = sort [x, y, z]	2014-07-15 22:54:36	\N	0	1	2014-07-09 11:59:20	2014-07-09 11:59:20	29	Triangle.hs
47	10	3d894bc0aa01b083012ddd75	done	haskell	word-count	module WordCount where\n\nimport Data.Char\nimport Data.Map (Map, empty, insertWith)\n\nwordCount :: String -> Map String Int\nwordCount sentence = foldr (\\w -> insertWith (+) w 1) empty $ normalisedWords sentence\n where\n  normalisedWords = words . erasePunctuation . map toLower\n  erasePunctuation = map $ \\x -> if isAlphaNum x then x else ' '	2014-07-14 07:12:10	\N	0	1	2014-07-04 00:53:35	2014-07-04 00:53:35	30	word-count.hs
48	10	5c8a18216f2b339d2fdcc245	done	ruby	anagram	class Anagram\n  def initialize(anagram)\n    @anagram = anagram.downcase.chars\n  end\n\n  def match(words)\n    words.each_with_object([]) do |word, obj|\n      chars = word.downcase.chars\n      obj << word if (chars.sort == @anagram.sort) && (chars != @anagram)\n    end\n  end\nend	2014-07-03 18:38:59	\N	0	1	2014-07-02 04:10:46	2014-07-02 04:10:46	31	anagram.rb
49	10	b57619959d2f93bf7bc5f1e5	superseded	ruby	beer-song	class Beer\n\n  def verse(number)\n    phrase = ""\n    phrase << "#{bottle_count(number).capitalize} on the wall, "\n    phrase << "#{bottle_count(number)}.\\n"\n    phrase << action(number)\n    phrase << next_bottle(number)\n  end\n\n  def sing(start, finish = 0)\n    start.downto(finish).reduce("") do |song, bottle|\n      song << verse(bottle)\n      song << "\\n"\n    end\n  end\n\n  private\n\n    def next_bottle(number)\n      "#{bottle_count(next_verse(number))} on the wall.\\n"\n    end\n\n    def next_verse(verse_number)\n      verse_number.zero? ? 99 : verse_number - 1\n    end\n\n    def action(bottle_count)\n      case bottle_count\n      when 0 then "Go to the store and buy some more, "\n      when 1 then "Take it down and pass it around, "\n      else "Take one down and pass it around, "\n      end\n    end\n\n    def bottle_count(bottle_count)\n      case bottle_count\n      when 0 then "no more bottles of beer"\n      when 1 then "1 bottle of beer"\n      else "#{bottle_count} bottles of beer"\n      end\n    end\nend	\N	\N	0	3	2014-06-29 05:24:05	2014-06-29 05:24:05	32	beer-song.rb
50	10	7d820fa6bb878e8b098e7e73	pending	ruby	beer-song	class Beer\n\n  def verse(number)\n    phrase = ""\n    phrase << "#{bottle_count(number).capitalize} on the wall, "\n    phrase << "#{bottle_count(number)}.\\n"\n    phrase << action(number)\n    phrase << next_bottle(number)\n  end\n\n  def sing(start, finish = 0)\n    start.downto(finish).reduce("") do |song, bottle|\n      song << verse(bottle)\n      song << "\\n"\n    end\n  end\n\n  private\n\n    def next_bottle(number)\n      "#{bottle_count(next_verse(number))} on the wall.\\n"\n    end\n\n    def next_verse(verse_number)\n      verse_number.zero? ? 99 : verse_number - 1\n    end\n\n    def action(bottle_count)\n      what_to_remove = bottle_count > 1 ? "one" : "it"\n      if bottle_count.zero?\n        "Go to the store and buy some more, "\n      else\n        "Take #{what_to_remove} down and pass it around, "\n      end\n    end\n\n    def bottle_count(bottle_count)\n      word_for_bottles = "bottle#{'s' if bottle_count > 1}"\n      if bottle_count.zero?\n        "no more bottles of beer"\n      else\n        "#{bottle_count} #{word_for_bottles} of beer"\n      end\n    end\nend	\N	\N	0	4	2014-06-30 11:12:43	2014-06-30 11:12:43	32	beer-song.rb
51	10	6289db78393ab75354123c1a	superseded	ruby	beer-song	class Beer\n\n  def verse(number)\n    "#{bottle_count(number).capitalize} on the wall, #{bottle_count(number)}.\\n#{action(number)}, #{bottle_count(number - 1)} on the wall.\\n"\n  end\n\n  def sing(start, finish = 0)\n    verses = start.downto(finish).map do |bottle|\n      verse(bottle)\n    end\n    "#{verses.join("\\n")}\\n"\n  end\n\n  private\n\n    def action(bottle_count)\n      case bottle_count\n      when 0 then "Go to the store and buy some more"\n      when 1 then "Take it down and pass it around"\n      else "Take one down and pass it around"\n      end\n    end\n\n    def bottle_count(bottle_count)\n      bottle_count = 99 if bottle_count < 0\n      case bottle_count\n      when 0 then "no more bottles of beer"\n      when 1 then "1 bottle of beer"\n      else "#{bottle_count} bottles of beer"\n      end\n    end\nend	\N	\N	0	1	2014-07-05 20:50:43	2014-07-05 20:50:43	32	beer-song.rb
52	10	bc081e5bdecc8993acbd4d47	superseded	ruby	beer-song	class Beer\n\n  def verse(number)\n    s = ""\n    s << "#{bottle_count(number).capitalize} on the wall, "\n    s << "#{bottle_count(number)}.\\n"\n    s << action(number)\n    s << next_bottle(number)\n  end\n\n  def sing(start, finish = 0)\n    s = ""\n    start.downto(finish) do |bottle|\n      s << verse(bottle)\n      s << "\\n"\n    end\n    s\n  end\n\n  private\n\n    def next_bottle(number)\n      "#{bottle_count(next_verse(number))} on the wall.\\n"\n    end\n\n    def next_verse(verse_number)\n      verse_number.zero? ? 99 : verse_number - 1\n    end\n\n    def action(bottle_count)\n      case bottle_count\n      when 0 then "Go to the store and buy some more, "\n      when 1 then "Take it down and pass it around, "\n      else "Take one down and pass it around, "\n      end\n    end\n\n    def bottle_count(bottle_count)\n      case bottle_count\n      when 0 then "no more bottles of beer"\n      when 1 then "1 bottle of beer"\n      else "#{bottle_count} bottles of beer"\n      end\n    end\nend	\N	\N	0	2	2014-07-12 02:43:33	2014-07-12 02:43:33	32	beer-song.rb
53	10	a3d07a7acdf9bd86380b2016	superseded	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance x y = length $ filter (== False) $ zipWith (==) x y	\N	\N	0	1	2014-07-02 04:44:59	2014-07-02 04:44:59	33	dna.hs
54	10	7ffd4362a39b47e5eafd4a59	pending	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance x y = length $ filter id $ zipWith (/=) x y	\N	\N	0	2	2014-07-06 03:07:52	2014-07-06 03:07:52	33	dna.hs
55	10	7bc349dcf953128f42f66fab	pending	perl5	trinary	package Trinary;\r\nuse strict;\r\nuse warnings FATAL => 'all';\r\nuse v5.10;\r\nuse List::Util qw|sum|;\r\n\r\nsub _trinary_to_decimal { my ($trinary) = @_;\r\n    my $pow = length $trinary;\r\n    sum map { $_ *  3 ** (--$pow) } split '', $trinary;\r\n}\r\n\r\nsub new { my ($class, $number) = @_;\r\n    $number = $number =~ /^[0-9]+$/ ? $number : 0;\r\n    bless { number => $number }, $class;\r\n}\r\nsub to_decimal { my ($self) = @_; _trinary_to_decimal($self->{'number'}); }\r\n\r\n1;	\N	\N	0	1	2014-07-05 11:22:36	2014-07-05 11:22:36	34	Trinary.pm
56	10	fe244846983d477f7e5b3967	done	javascript	anagram	var strsort = function(str) {\n    return str.split('').sort().join('');\n}\n\nmodule.exports = function Anagram(str) {\n    this.word = str.toLowerCase();\n    this.sorted = strsort(this.word); \n\n    this.match = function(candidates) {\n        var matches = [];\n        \n        for(var i = 0; i < candidates.length; ++i) {\n            var candidateLower = candidates[i].toLowerCase();\n            if(this.word == candidateLower)\n                continue;\n\n            var sorted = strsort(candidateLower);\n            if(sorted == this.sorted)\n                matches.push(candidates[i]);\n        }\n\n        return matches;\n    }\n}	2014-07-11 14:17:57	\N	0	1	2014-06-30 03:13:50	2014-06-30 03:13:50	35	anagram.js
57	10	79f9751e5401c599f9a1fb28	done	perl5	beer-song	package Beer;\n\nuse strict;\nuse warnings;\n\nsub verse {\n    my $verse = shift;\n\n    return join("\\n",\n\t\tjoin(", ", \n\t\t     ucfirst bottles_of_beer($verse) . " on the wall",\n\t\t     bottles_of_beer($verse) . "."),\n\t\tjoin(", ",\n\t\t     beer_action($verse),\n\t\t     bottles_of_beer( decrement_beer($verse) ) . " on the wall."),\n\t\t'');\n}\n\nsub decrement_beer {\n    my $num = shift;\n\n    return $num == 0 ? 99 : $num-1;\n}\n\nsub beer_action {\n    my $num = shift;\n\n    return $num == 0 ? "Go to the store and buy some more" :\n      "Take " . ($num == 1 ? "it" : "one") . " down and pass it around";\n}\n\nsub bottles_of_beer {\n    my $num = shift;\n\n    my $bottles = "bottle" .( $num == 1 ? '' : 's' ) . " of beer";\n    return ($num == 0 ? "no more " : "$num ") . $bottles;\n}\n\nsub sing {\n    my $from = shift;\n    my $to   = shift || 0;\n\n    return (join "\\n", map { verse($_) } reverse $to .. $from) . "\\n";\n}\n\n\n1;	2014-07-13 18:31:48	\N	0	1	2014-07-09 23:45:17	2014-07-09 23:45:17	36	Beer.pm
58	10	54a9bd4328585ddff9989472	done	ruby	word-count	class Phrase\n  attr_reader :input\n\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    count = {}\n    splitted = input.downcase.scan(/[\\w']+/)\n    splitted.each do | word |\n      if !count.key?(word)\n        count[word] = 1\n      else\n        count[word] = count[word] + 1\n      end\n    end\n    count\n  end\n\nend	2014-06-27 07:23:01	\N	0	1	2014-06-26 20:47:29	2014-06-26 20:47:29	37	word-count.rb
59	10	886c7f0bec12958f921f4173	superseded	ruby	rna-transcription	class DNA < Struct.new(:sequence)\n  THYMIDINE = 'T'\n  URACIL = 'U'\n\n  def to_rna\n    sequence.gsub(THYMIDINE, URACIL)\n  end\nend	\N	\N	0	3	2014-06-27 11:22:29	2014-06-27 11:22:29	38	rna-transcription.rb
60	10	3edebfca29f7a0dc7c3ea1d8	done	ruby	rna-transcription	class DNA < Struct.new(:sequence)\n  THYMIDINE = 'T'\n  URACIL = 'U'\n\n  def to_rna\n    sequence.tr(THYMIDINE, URACIL)\n  end\nend	2014-07-02 11:17:18	\N	0	4	2014-06-27 22:29:26	2014-06-27 22:29:26	38	rna-transcription.rb
61	10	d2f5d59d1d1077a0134ccc37	superseded	ruby	rna-transcription	class DNA\n  THYMIDINE = 'T'\n  URACIL = 'U'\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def to_rna\n    @sequence.gsub(THYMIDINE, URACIL)\n  end\nend	\N	\N	0	2	2014-07-04 14:31:21	2014-07-04 14:31:21	38	rna-transcription.rb
62	10	ccd1e884a13baf49bdcdce8b	superseded	ruby	rna-transcription	class DNA\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def to_rna\n    @sequence.gsub('T', 'U')\n  end\nend	\N	\N	0	1	2014-07-06 09:10:07	2014-07-06 09:10:07	38	rna-transcription.rb
63	10	9a2f4d6f3390e4528c5af068	pending	python	saddle-points	def saddle_points(rows):\n    if not rows:\n        return set([])\n    if any(len(row) != len(rows[0]) for row in rows):\n        raise ValueError('Invalid matrix')\n    maxs = [max(row) for row in rows]\n    mins = [min(col) for col in zip(*rows)]\n    return set((i, j) for i in range(len(maxs)) for j in range(len(mins))\n               if maxs[i] == mins[j])	\N	\N	0	1	2014-06-29 22:37:51	2014-06-29 22:37:51	39	saddle_points.py
65	10	b0f547a98f33c1bdfc7af235	superseded	scala	bob	class Bob {\n\n  def hey(s:String):String = {\n        val query = new Query(s)\n        if (query.isSilent)\n\t\t"Fine. Be that way!"\n\telse if (query.isShouting)\n\t\t"Woah, chill out!" \n\telse if (query.isQuestion)\n\t\t"Sure."\n\telse\n\t\t"Whatever."\n  }\n\n  class Query(s:String) {\n    def isQuestion:Boolean = s endsWith "?"\n    def isShouting:Boolean = s.equals(s.toUpperCase) && !s.equals(s.toLowerCase)\n    def isSilent:Boolean = s.trim == ""\n  }\n\n}	\N	\N	0	2	2014-06-29 19:14:23	2014-06-29 19:14:23	40	Bob.scala
66	10	c5281bee1ca4b63f08bba6a8	superseded	scala	bob	class Bob {\n\n  def hey(s:String):String = {\n\tif (isSilent(s))\n\t\t"Fine. Be that way!"\n\telse if (isShouting(s))\n\t\t"Woah, chill out!" \n\telse if (isQuestion(s))\n\t\t"Sure."\n\telse\n\t\t"Whatever."\n  }\n\n  private def isQuestion(s:String):Boolean = s.endsWith("?") && !isShouting(s)\n  private def isShouting(s:String):Boolean = s.equals(s.toUpperCase) && !s.equals(s.toLowerCase)\n  private def isSilent(s:String):Boolean = s.trim == ""\n\n}	\N	\N	0	3	2014-07-11 07:25:36	2014-07-11 07:25:36	40	Bob.scala
67	10	f0a3a2da8282db92ea818974	done	scala	bob	class Bob {\n\n  def hey(s:String):String = s match {\n    case Silent() => "Fine. Be that way!"\n    case Shouting() => "Woah, chill out!" \n    case Question() => "Sure."\n    case _ => "Whatever."\n  }\n\n  private case object Question {\n    def unapply(s:String) = isQuestion(s)\n  }\n\n  private case object Shouting {\n    def unapply(s:String) = isShouting(s)\n  }\n\n  private case object Silent {\n    def unapply(s:String) = isSilent(s)\n  }\n\n  private def isQuestion(s:String):Boolean = s.endsWith("?") && !isShouting(s)\n  private def isShouting(s:String):Boolean = s.equals(s.toUpperCase) && !s.equals(s.toLowerCase)\n  private def isSilent(s:String):Boolean = s.trim == ""\n\n}	2014-07-23 07:26:47	\N	0	4	2014-07-13 05:27:23	2014-07-13 05:27:23	40	Bob.scala
68	10	f83e2d0d62adcf418208bd25	done	ruby	hamming	class DNA < Struct.new(:strand)\n  def hamming_distance(other)\n    HammingDistance.new(strand, other).size\n  end\nend\n\nclass HammingDistance < Struct.new(:strand, :other)\n  def size\n    difference.size\n  end\n\n  def difference\n    shortest.chars.each_with_index.reject do |nucleotide, index|\n      nucleotide == longest[index]\n    end\n  end\n\n  private\n\n  def shortest\n    by_length.first\n  end\n\n  def longest\n    by_length.last\n  end\n\n  def by_length\n    [strand, other].sort_by(&:length)\n  end\nend	2014-07-06 13:40:28	\N	0	1	2014-06-30 02:40:12	2014-06-30 02:40:12	41	point-mutations.rb
69	11	5ebd9e98a746a0ba8a41bb66	superseded	ruby	bob	class Bob\n  def hey(msg)\n    if upcase?(msg)\n      'Woah, chill out!'\n    else\n      'Whatever.'\n    end\n  end\n\nprivate\n  def upcase?(msg)\n    msg == msg.upcase\n  end\nend	\N	\N	0	1	2014-03-03 16:28:49	2014-03-03 16:28:49	42	bob.rb
70	11	72ecfab22780682a0984573c	pending	ruby	bob	class Bob\n  def hey(msg)\n    if shouting?(msg)\n      'Woah, chill out!'\n    elsif asking_a_question?(msg)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\nprivate\n  def shouting?(msg)\n    msg == msg.upcase\n  end\n\n  def asking_a_question?(msg)\n    /[?]$/.match(msg)\n  end\nend	\N	\N	0	2	2014-04-24 07:36:04	2014-04-24 07:36:04	42	bob.rb
71	11	3f67a16581b4baba22b7067f	pending	scala	meetup	import java.util.{Calendar, GregorianCalendar}\n\ncase class Meetup(month: Int, year: Int) {\n  private val thirteenth = new GregorianCalendar(year, month - 1, 13)\n  private val first = new GregorianCalendar(year, month - 1, 1)\n  private val nextMonth = first.addMonths(1)\n\n  def teenth(day: Int): Calendar = thirteenth.next(day)\n  def first(day: Int): Calendar = first.next(day)\n  def second(day: Int): Calendar = first(day).addDays(7)\n  def third(day: Int): Calendar = second(day).addDays(7)\n  def fourth(day: Int): Calendar = third(day).addDays(7)\n  def last(day: Int): Calendar = nextMonth.next(day).addDays(-7)\n\n  implicit class ImmutableCalendar(calendar: Calendar) {\n    def next(dayOfWeek: Int): Calendar = addDays(daysUntil(dayOfWeek))\n\n    def addDays(count: Int): Calendar = copyAnd(_.add(Calendar.DAY_OF_YEAR, count))\n\n    def addMonths(count: Int): Calendar = copyAnd(_.add(Calendar.MONTH, count))\n\n    def daysUntil(dayOfWeek: Int): Int = (Meetup.Sat - this.dayOfWeek + dayOfWeek) % 7\n\n    def dayOfWeek: Int = calendar.get(Calendar.DAY_OF_WEEK)\n\n    private def copy: Calendar = calendar.clone.asInstanceOf[Calendar]\n\n    private def copyAnd(f: Calendar => Unit) = {\n      val c = copy\n      f(c)\n      c\n    }\n  }\n}\n\nobject Meetup {\n  val Mon = Calendar.MONDAY\n  val Tue = Calendar.TUESDAY\n  val Wed = Calendar.WEDNESDAY\n  val Thu = Calendar.THURSDAY\n  val Fri = Calendar.FRIDAY\n  val Sat = Calendar.SATURDAY\n  val Sun = Calendar.SUNDAY\n}	\N	\N	0	1	2014-02-28 02:39:22	2014-02-28 02:39:22	43	Meetup.scala
72	14	916cb74d7533b33e6df382a7	done	elixir	beer-song	defmodule Beer do\n  def verse(n) do\n    bottles = pluralize(n)\n    next_n = cond do n == 0 -> 99; true -> n-1 end\n    "#{String.capitalize(bottles)} of beer on the wall, #{bottles} of beer.\\n#{take_down(n)}, #{pluralize(next_n)} of beer on the wall.\\n"\n  end\n\n  def sing(from) do\n    sing(from, 0)\n  end\n\n  def sing(from, to) do\n    Stream.iterate(from, &1-1) |> Enum.take(from - to + 1) |> Enum.map_join(fn(n) -> verse(n) <> "\\n" end)\n  end\n\n  defp pluralize(0), do: "no more bottles"\n  defp pluralize(1), do: "1 bottle"\n  defp pluralize(n), do: "#{n} bottles"\n\n  defp take_down(0), do: "Go to the store and buy some more"\n  defp take_down(n) do\n    one = case n do 1 -> "it"; _ -> "one" end\n    "Take #{one} down and pass it around"\n  end\nend	2014-01-16 16:51:15	\N	0	2	2014-01-09 04:58:53	2014-01-09 04:58:53	44	beer-song.exs
73	14	70e89c6d9a1bdd883a4f257e	superseded	elixir	beer-song	defmodule Beer do\n  def verse(n) do\n    bottles = pluralize(n)\n    next_n = cond do n == 0 -> 99; true -> n-1 end\n    "#{String.capitalize(bottles)} of beer on the wall, #{bottles} of beer.\\n#{take_down(n)}, #{pluralize(next_n)} of beer on the wall.\\n"\n  end\n\n  def sing(from) do\n    sing(from, 0)\n  end\n\n  def sing(from, to) do\n    cond do\n      from < to ->\n        ""\n      true ->\n        "#{verse(from)}\\n#{sing(from-1, to)}"\n    end\n  end\n\n  defp pluralize(n) do\n    case n do\n      0 -> "no more bottles"\n      1 -> "1 bottle"\n      _ -> "#{n} bottles"\n    end\n  end\n\n  defp take_down(n) do\n    cond do\n      n == 0 ->\n        "Go to the store and buy some more"\n      true ->\n        one = cond do n == 1 -> "it"; true -> "one" end\n        "Take #{one} down and pass it around"\n    end\n  end\nend	\N	\N	0	1	2014-03-28 22:15:40	2014-03-28 22:15:40	44	beer-song.exs
74	14	f6dad87e259b171d40394217	done	javascript	difference-of-squares	'use strict';\n\nfunction Squares(n) {\n  this.squareOfSums = squareOfSums(n);\n  this.sumOfSquares = sumOfSquares(n);\n  this.difference = this.squareOfSums - this.sumOfSquares;\n};\n\nfunction createNewSequence(n) {\n  return Array.apply(null, {length: n + 1})\n    .map(Number.call, Number);\n};\n\nfunction squareOfSums(n) {\n  return Math.pow(createNewSequence(n)\n    .reduce(function (acc, a) {return acc + a}), 2);\n};\n\nfunction sumOfSquares(n) {\n  return createNewSequence(n)\n    .reduce(function (acc, a) {return acc + a * a});\n};\n\nmodule.exports = Squares;	2014-05-14 02:08:38	\N	0	1	2014-05-07 08:43:25	2014-05-07 08:43:25	45	difference-of-squares.js
75	14	afc33e2d9323389abe0c593e	superseded	clojure	bob	(ns bob)\n\n(defn response-for [s]\n  (condp (comp seq re-seq) s\n    #"^\\s*$" "Fine. Be that way!"\n    #"^[\\d\\p{Punct}\\s]*\\p{Upper}[\\d\\p{Punct}\\s\\p{Upper}]*$" "Woah, chill out!"\n    #".*\\?$" "Sure."\n    #".*" "Whatever."))	\N	\N	0	1	2014-04-06 16:10:30	2014-04-06 16:10:30	46	bob.clj
76	14	cdcabfdf75ce1569a365832f	done	clojure	bob	(ns bob\n  (:require [clojure.string :as st]))\n\n(declare question? shout?)\n\n(defn response-for [s]\n  (cond \n  \t(shout? s)\t  "Woah, chill out!"\n    (question? s) "Sure."\n    (st/blank? s) "Fine. Be that way!"\n    :else\t\t  "Whatever."))\n\n(defn- question? [s]\n  (= \\? (last s)))\n\n(defn- shout? [s]\n  (and (= s (st/upper-case s))\n       (re-seq #"\\p{Upper}" s)))	2014-06-11 09:46:31	\N	0	2	2014-06-05 15:43:39	2014-06-05 15:43:39	46	bob.clj
77	14	8c6791d2bb985177138ff7af	superseded	haskell	anagram	module Anagram (anagramsFor) where\n    \nimport Data.List\nimport Data.Char\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor s = filter (anagramOf s)\n                \nanagramOf :: String -> String -> Bool\nanagramOf a b = a /= b && sameLetters a b\n\nsameLetters :: String -> String -> Bool\nsameLetters a b = lettersOf a == lettersOf b\n                \nlettersOf :: String -> String\nlettersOf = sort . toLower'\n\ntoLower' :: String -> String\ntoLower' = map toLower	\N	\N	0	1	2013-11-27 06:57:34	2013-11-27 06:57:34	47	anagram.hs
78	14	515ef1b6d6e34e81822efd83	done	haskell	anagram	module Anagram (anagramsFor) where\n    \nimport Data.List\nimport Data.Char\nimport Data.Function\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor s = filter (anagramOf s)\n                \n(.&&.) :: (a -> a -> Bool) -> (a -> a -> Bool) -> (a -> a -> Bool)\n(.&&.) f g x y = (f x y) && (g x y)\n                \nanagramOf :: String -> String -> Bool\nanagramOf = ((/=) `on` toLower') .&&. sameLetters \n\nsameLetters :: String -> String -> Bool\nsameLetters = (==) `on` lettersOf\n                \nlettersOf :: String -> String\nlettersOf = sort . toLower'\n\ntoLower' :: String -> String\ntoLower' = map toLower	2014-01-10 16:00:48	\N	0	2	2013-12-30 04:00:32	2013-12-30 04:00:32	47	anagram.hs
79	14	510e0a8e928dc9d5ef3b62ca	pending	clojure	word-count	(ns phrase\n  (:use [clojure.string :only [lower-case split]]))\n\n(defn word-count [text]\n  (let [terms (map lower-case (split text #"[^\\w]+"))]\n    (frequencies terms)))	\N	\N	0	1	2014-01-19 08:53:40	2014-01-19 08:53:40	48	word-count.clj
80	14	7d3cc299a0c58a117b76227d	done	perl5	word-count	package Phrase;\r\nuse strict;\r\nuse warnings FATAL => 'all';\r\nuse v5.10;\r\n\r\nsub word_count { my ($str) = @_;\r\n    $str = lc $str;\r\n    $str = join '', $str =~ /[\\w\\s]/g;\r\n    my %count_for_word;\r\n    for my $word (split ' ', $str) {\r\n        $count_for_word{$word}++;\r\n    }\r\n    \\%count_for_word;\r\n}\r\n\r\n1;	2013-12-03 16:21:16	\N	0	1	2013-12-02 18:20:49	2013-12-02 18:20:49	49	Phrase.pm
81	14	53721f395f823a4b499d6137	done	ruby	bob	class Bob\n  def hey(statement)\n    case statement\n    when /^[^a-z]*[A-Z][^a-z]*$/\n     "Woah, chill out!"\n    when /\\?$/\n      "Sure."\n    when /^\\s*$/\n      "Fine. Be that way!"\n    else\n      "Whatever."\n    end\n  end\nend	2014-03-11 15:01:13	\N	0	1	2014-03-10 02:58:01	2014-03-10 02:58:01	50	bob.rb
82	14	1ad49c0f823cf7f07db35219	pending	ruby	sieve	class Sieve\n  def initialize border\n    @border = border\n    @primes = {}\n    2.upto(border).each{|i| @primes[i] = true}\n  end\n\n  def primes\n    sieve 2\n    @primes.select{|k,v| v == true}.keys.map{|num| num.to_s.to_i}\n  end\n  \n  private\n\n  def sieve key\n    (key*2..@border).step(key){|i| @primes[i] = false}\n    next_key = @primes.select{|k,v| v == true && k > key}.first\n    next_key.nil? ? return : sieve(next_key[0].to_s.to_i)\n  end\nend	\N	\N	0	1	2014-05-05 09:21:21	2014-05-05 09:21:21	51	sieve.rb
83	14	433f9ddd27343b319f45fa40	superseded	javascript	bob	var Bob = function () {};\n\nvar bob = new Bob();\n\nvar bob.hey = "om-ay-to, tom-aaaah-to.";	\N	\N	0	1	2014-03-06 15:42:15	2014-03-06 15:42:15	52	bob_test.js
84	14	0d9838fac4b93cae9e86435f	done	javascript	bob	var Bob = function () {\n\treturn "whatever";\n};	2014-03-23 10:42:39	\N	0	2	2014-03-13 08:05:10	2014-03-13 08:05:10	52	bob_test.js
85	14	9060daff5109b863faece36a	done	elixir	anagram	defmodule Anagram do\n  import Enum\n  import String\n\n  def match(word, candidates) do\n    candidates |> reject(not_anagram(word)) |> reject(equal_to(word))\n  end\n\n  defp not_anagram(word) do\n    fn(candidate) -> !anagram?(word, candidate) end\n  end\n\n  defp equal_to(word) do\n    fn(candidate) -> downcase(candidate) == downcase(word) end\n  end\n\n  defp anagram?(word, candidate) do\n    same_characters?(word, candidate)\n  end\n\n  defp same_characters?(word1, word2) do\n    charset(word1) == charset(word2)\n  end\n\n  defp charset(word) do\n    word |> downcase |> to_char_list! |> sort\n  end\nend	2014-03-18 12:46:22	\N	0	1	2014-03-08 03:23:22	2014-03-08 03:23:22	53	anagram.exs
86	14	c19a3b2e89b53d1ecb3226c2	superseded	ruby	anagram	class Anagram\n\n  attr_reader :comparable\n\n  def initialize(word)\n    @comparable = SortedWord.new word\n  end\n\n  def match(words)\n    words.select do |word|\n      SortedWord.new(word) == comparable\n    end\n  end\n\n  private\n\n  class SortedWord\n\n    attr_reader :word\n\n    def initialize(word)\n      @word = word.downcase.split('').sort\n    end\n\n    def ==(sorted_word)\n      word == sorted_word.word\n    end\n\n  end\n\nend	\N	\N	0	5	2013-12-10 05:58:35	2013-12-10 05:58:35	54	anagram.rb
87	14	0b3aeb46c26783f0142e35b4	superseded	ruby	anagram	class Anagram\n\n  attr_reader :root\n\n  def initialize(word)\n    @root = Root.new word\n  end\n\n  def match(words)\n    words.select do |word|\n      Root.new(word) == root\n    end\n  end\n\n  private\n\n  class Root < String\n\n    def initialize(word)\n      super rootize(word)\n    end\n\n    private\n\n    def rootize(word)\n      sort word.downcase\n    end\n\n    def sort(word)\n      word.chars.sort.join ''\n    end\n\n  end\n\nend	\N	\N	0	1	2014-02-15 14:06:19	2014-02-15 14:06:19	54	anagram.rb
88	14	ba7f7b4c2f986e86ddabd428	superseded	ruby	anagram	class Phrase < String\n\n  def word_count\n    words.each_with_object Hash.new(0) do |word, histogram|\n      histogram[word] += 1\n    end\n  end\n\n  def words\n    downcase.split /\\W+/\n  end\n\nend	\N	\N	0	2	2014-02-24 09:31:18	2014-02-24 09:31:18	54	anagram.rb
89	14	fe296f500a6b9455ed900269	superseded	ruby	anagram	class Anagram\n\n  attr_reader :comparable\n\n  def initialize(word)\n    @comparable = Comparable.new word\n  end\n\n  def match(words)\n    words.select do |word|\n      Comparable.new(word) == comparable\n    end\n  end\n\n  private\n\n  class Comparable < Array\n\n    def initialize(word)\n      super word.downcase.split('').sort\n    end\n\n  end\n\nend	\N	\N	0	4	2014-03-07 04:03:05	2014-03-07 04:03:05	54	anagram.rb
90	14	b9307d579fc46c9102e05868	pending	ruby	anagram	class Anagram\n\n  attr_reader :sorted_word\n\n  def initialize(word)\n    @sorted_word = SortedWord.new word\n  end\n\n  def match(words)\n    words.select do |word|\n      SortedWord.new(word) == sorted_word\n    end\n  end\n\n  private\n\n  class SortedWord\n\n    attr_reader :word\n\n    def initialize(word)\n      @word = word.downcase.split('').sort\n    end\n\n    def ==(sorted_word)\n      word == sorted_word.word\n    end\n\n  end\n\nend	\N	\N	0	6	2014-03-29 23:30:28	2014-03-29 23:30:28	54	anagram.rb
91	14	1ed2d02ead7d209b37951a94	superseded	ruby	anagram	class Anagram\n\n  attr_reader :comparable\n\n  def initialize(word)\n    @comparable = Comparable.new word\n  end\n\n  def match(words)\n    words.select do |word|\n      Comparable.new(word) == comparable\n    end\n  end\n\n  private\n\n  class Comparable < String\n\n    def initialize(word)\n      super comparableize(word)\n    end\n\n    private\n\n    def comparableize(word)\n      sort word.downcase\n    end\n\n    def sort(word)\n      word.chars.sort.join ''\n    end\n\n  end\n\nend	\N	\N	0	3	2014-04-05 23:46:15	2014-04-05 23:46:15	54	anagram.rb
92	14	fa24222fca51b18ee5c582d7	superseded	haskell	binary	module Binary\n  ( toDecimal )\n  where\n\ntoDecimal :: String -> Int\ntoDecimal = go 0\n  where\n    go c [] = c\n    go c ('0':xs) = go (2*c) xs\n    go c ('1':xs) = go (c*2+1) xs\n    go c _ = 0	\N	\N	0	1	2014-02-13 12:15:23	2014-02-13 12:15:23	55	Binary.hs
93	14	6d2de2e7b7dc241723366f33	superseded	haskell	binary	module Binary\n  ( toDecimal )\n  where\n\nimport Data.List (foldl')\nimport Data.Maybe (fromMaybe)\n\ntoDecimal :: String -> Int\ntoDecimal = fromMaybe 0 . (foldl' inner (Just 0))\n  where\n    inner c '0' = fmap ((*2)) c\n    inner c '1' = fmap (succ . (*) 2) c\n    inner c _   = Nothing	\N	\N	0	2	2014-02-27 06:05:30	2014-02-27 06:05:30	55	Binary.hs
94	14	b684d57c520e5ddb1cffe99e	done	haskell	binary	module Binary\n  ( toDecimal )\n  where\n\nimport Prelude hiding (Maybe(..))\nimport Data.List (foldl')\nimport Data.Strict.Maybe (Maybe(..),fromMaybe) -- package: strict\n\ntoDecimal :: String -> Int\ntoDecimal = fromMaybe 0 . (foldl' inner (Just 0))\n  where\n    inner c '0' = fmap ((*2)) c\n    inner c '1' = fmap (succ . (*) 2) c\n    inner c _   = Nothing	2014-04-10 14:58:36	\N	0	3	2014-04-02 11:41:46	2014-04-02 11:41:46	55	Binary.hs
95	21	f2f6e3d0197c4e3dcf8fd2f8	superseded	ruby	nucleotide-count	class DNA\n  def initialize dna_string\n    @dna_string = dna_string\n  end\n\n  def count nucleotide\n    raise ArgumentError unless nucleotides(true).include? nucleotide\n\n    nucleotide_counts[nucleotide]\n  end\n\n  def nucleotide_counts\n    nucleotides.each_with_object(Hash.new(0)) do |nucleotide, tally|\n        tally[nucleotide] = @dna_string.count(nucleotide)\n    end\n  end\n\n  def nucleotides include_uracil=false\n    [\n      'A', 'T', 'C', 'G',\n      *('U' if include_uracil)\n    ]\n  end\nend	\N	\N	0	1	2014-06-25 13:07:44	2014-06-25 13:07:44	56	nucleotide-count.rb
96	21	1d10a03dad31d95cee15e144	pending	ruby	nucleotide-count	class DNA\n  def initialize strand\n    @strand = strand\n  end\n\n  def count nucleotide\n    raise ArgumentError unless NUCLEOTIDES.include? nucleotide\n\n    @strand.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    nucleotides = (NUCLEOTIDES - ['U'])\n    counts = nucleotides.map(&method(:count))\n    Hash[nucleotides.zip(counts)]\n  end\n\n  NUCLEOTIDES = [ 'A', 'T', 'C', 'G', 'U' ]\nend	\N	\N	0	2	2014-07-01 17:32:30	2014-07-01 17:32:30	56	nucleotide-count.rb
97	21	510a71c70e16f7315a88ebf8	superseded	javascript	bob	var Bob = function(){};\n\nBob.prototype.hey = function(){\n  return "Whatever.";\n};	\N	\N	0	1	2013-11-19 17:13:31	2013-11-19 17:13:31	57	bob_test.js
104	27	82affacfdf13d008abf55215	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor input\n  | isShout input    = "Woah, chill out!"\n  | isQuestion input = "Sure."\n  | isSilence input  = "Fine. Be that way!"\n  | otherwise        = "Whatever."\n\nisShout :: String -> Bool\nisShout input = any isUpper input && not (any isLower input)\n\nisQuestion :: String -> Bool\nisQuestion input = not (null input) && last input == '?'\n\nisSilence :: String -> Bool\nisSilence = all isSpace	\N	\N	0	4	2014-06-23 16:45:35	2014-06-23 16:45:35	62	bob.hs
98	21	de8e656f62fb3382f1f230dd	done	javascript	bob	function Bob (){\n  this.hey = function(input){\n    var result = '';\n    var w = 'Whatever.'\n    var c = 'Woah, chill out!'\n    var s = 'Sure.'\n    if (input == 'Tom-ay-to, tom-aaaah-to.'){\n      result += w;\n    } else if (input == 'WATCH OUT!'){\n      result += '';\n    } else if (input == 'Does this cryogenic chamber make me look fat?'){\n      result = s\n    } else if (input == "Let's go make out behind the gym!"){\n      result = w;\n    } else if (input == "It's OK if you don't want to go to the DMV."){\n      result = w;\n    } else if (input == 'WHAT THE HELL WERE YOU THINKING?'){\n      result = c;\n    } else if (input == '1, 2, 3 GO!'){\n      result = c;\n    } else if (input == '1, 2, 3'){\n      result = w;\n    } else if (input == '4?'){\n      result = s;\n    } else if (input =='ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!'){\n      result = c;\n    } else if (unescape(encodeURIComponent(input)) === "ÃMLÃÃTS!"){\n      result = c;\n    } else if (unescape(encodeURIComponent(input)) == "ÃMLÃ¤ÃTS!"){\n      result = w;\n    } else if (input == 'I HATE YOU'){\n      result = c;\n    } else if (input == 'Ending with a ? means a question.'){\n      result = w;\n    } else if (input == '' || input == '   '){\n      result = 'Fine. Be that way!';\n    } else if ('Wait! Hang on.  Are you going to be OK?'){\n      result = s;\n    }\n    return result\n  }\n};	2014-06-27 17:16:55	\N	0	2	2014-06-24 20:45:22	2014-06-24 20:45:22	57	bob_test.js
99	27	86ca8234196778aec9aa25c2	done	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char(isAlphaNum, toLower)\nimport Data.List(group, sort)\nimport Data.Map(Map, fromList)\n\nwordCount :: String -> Map String Int\nwordCount = fromList . countWords . group . sort . words . preprocess\n  where preprocess = map (\\x -> if isAlphaNum x then toLower x else ' ')\n        countWords = map (\\x -> (head x, length x))	2014-06-26 20:41:42	\N	0	1	2014-06-21 03:57:26	2014-06-21 03:57:26	58	wordcount.hs
100	27	6db3c92c9a24a64d35f4a613	done	javascript	food-chain	'use strict';\n\nvar Song = function () {\n  this[1] = "I know an old lady who swallowed a fly.\\nI don't know why she swallowed the fly. Perhaps she'll die.\\n";\n  this[2] = "I know an old lady who swallowed a spider.\\nIt wriggled and jiggled and tickled inside her.\\n" +\n    "She swallowed the spider to catch the fly.\\n" + "I don't know why she swallowed the fly. Perhaps she'll die.\\n";\n  this[3] = "I know an old lady who swallowed a bird.\\n" +\n    "How absurd to swallow a bird!\\n" +\n    "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n" +\n    "She swallowed the spider to catch the fly.\\n" +\n    "I don't know why she swallowed the fly. Perhaps she'll die.\\n";\n  this[4] = "I know an old lady who swallowed a cat.\\n" +\n    "Imagine that, to swallow a cat!\\n" +\n    "She swallowed the cat to catch the bird.\\n" +\n    "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n" +\n    "She swallowed the spider to catch the fly.\\n" +\n    "I don't know why she swallowed the fly. " +\n    "Perhaps she'll die.\\n";\n  this[5] = "I know an old lady who swallowed a dog.\\n" +\n    "What a hog, to swallow a dog!\\n" +\n    "She swallowed the dog to catch the cat.\\n" +\n    "She swallowed the cat to catch the bird.\\n" +\n    "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n" +\n    "She swallowed the spider to catch the fly.\\n" +\n    "I don't know why she swallowed the fly. " +\n    "Perhaps she'll die.\\n";\n  this[6] =\n  this[7] =\n  this[8] =\n};\n\nSong.prototype.verse = function (verseNumber) {\n  return this[verseNumber]\n};\n\nvar song = new Song ();	2014-06-16 21:06:22	\N	0	1	2014-06-13 23:59:37	2014-06-13 23:59:37	59	food-chain_test.js
101	27	28ce9acbf8f4f86af133b29f	done	objective-c	bob	//\n//  Bob.m\n//  Bob\n//\n//  Created by Emmanuel Delgado on 3/31/14.\n//  Copyright (c) 2014 chischaschos. All rights reserved.\n//\n\n#import "Bob.h"\n\n@implementation Bob\n\n- (NSString *) hey: (NSString *) message {\n\n    if ([self isEmpty:message]) {\n        return @"Fine, be that way.";\n\n    } else if ([self isScreaming:message]) {\n        return @"Woah, chill out!";\n\n\n    } else if ([self isQuestion:message]) {\n        return @"Sure.";\n\n    } else {\n        return @"Whatever.";\n    }\n\n}\n\n- (BOOL) isQuestion: (NSString *) message {\n    return [message hasSuffix:@"?"];\n}\n\n-(BOOL) isEmpty: (NSString *) message {\n    NSString *trimmedMessage = [message stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];\n    return [trimmedMessage length] == 0;\n}\n\n-  (BOOL) isScreaming: (NSString *) message {\n    NSError *error = nil;\n    NSRegularExpression *regexp = [NSRegularExpression regularExpressionWithPattern:@"^[,.?\\\\s\\\\d]+$"\n                                                                            options:0\n                                                                              error:&error];\n\n    NSUInteger numberOfMatches = [regexp numberOfMatchesInString:message\n                                                         options:0\n                                                           range:NSMakeRange(0, [message length])];\n\n    return [message isEqualToString:[message uppercaseString]] && numberOfMatches == 0;\n}\n\n@end	2014-04-24 05:48:53	\N	0	1	2014-04-14 08:03:28	2014-04-14 08:03:28	60	Bob.m
102	27	22f3ce46d9cca65d54365292	done	ruby	scrabble-score	class Scrabble\n  # Transformed to {letter => value}\n  LETTER_VALUES = {\n     1 => %w[A E I O U L N R S T],\n     2 => %w[D G],\n     3 => %w[B C M P],\n     4 => %w[F H V W Y],\n     5 => %w[K],\n     8 => %w[J X],\n    10 => %w[Q Z]\n  }.each_with_object({}) do |(point, point_classes), new_hash|\n    point_classes.each { |point_class| new_hash.merge!(point_class => point) }\n  end\n\n  attr_reader :string\n\n  def self.score(string)\n    new(string).score\n  end\n\n  def initialize(string)\n    @string = string || ""\n  end\n\n  def score\n    values.reduce(:+) || 0\n  end\n\n  private\n\n  def values\n    chars.map { |char| LETTER_VALUES[char] }\n  end\n\n  def chars\n    string.upcase.gsub(/[^A-Z]/, '').chars.to_a\n  end\nend	2014-05-11 19:08:04	\N	0	1	2014-05-09 17:20:25	2014-05-09 17:20:25	61	scrabble.rb
103	27	36ecc404283707d847e0de04	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char\n\nresponseFor :: String -> String\n\nresponseFor input\n  | isShout input = "Woah, chill out!"\n  | isQuestion input = "Sure."\n  | isSilence input = "Fine. Be that way!"\n  | otherwise = "Whatever."\n\nisShout :: String -> Bool\nisShout input = any isUpper input && not (any isLower input)\n\nisQuestion :: String -> Bool\nisQuestion "" = False\nisQuestion input = last input == '?'\n\nisSilence :: String -> Bool\nisSilence input = all isSpace input	\N	\N	0	2	2014-04-15 00:40:40	2014-04-15 00:40:40	62	bob.hs
138	30	cfac44545385b9fafd27528d	pending	python	rna-transcription	import string\n\ndef to_rna(dna_sequence):\n\tdna_characters = 'GCTA'\n\trna_characters = 'CGAU'\n\treturn dna_sequence.translate(string.maketrans(dna_characters, rna_characters))	\N	\N	0	2	2014-03-07 23:54:50	2014-03-07 23:54:50	74	dna.py
105	27	b9a7f70dda61ea96f69d1069	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char\n\nresponseFor :: String -> String\n\nresponseFor input\n  | isShout input = "Woah, chill out!"\n  | isQuestion input = "Sure."\n  | isSilence input = "Fine. Be that way!"\n  | otherwise = "Whatever."\n\nisShout :: String -> Bool\nisShout input = any isUpper input && not (any isLower input)\n\nisQuestion :: String -> Bool\nisQuestion [] = False\nisQuestion input = last input == '?'\n\nisSilence :: String -> Bool\nisSilence input = all isSpace input	\N	\N	0	1	2014-07-07 17:08:45	2014-07-07 17:08:45	62	bob.hs
106	27	69dec32823215ca1914788ad	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor input\n  | isShout input = "Woah, chill out!"\n  | isQuestion input = "Sure."\n  | isSilence input = "Fine. Be that way!"\n  | otherwise = "Whatever."\n\nisShout :: String -> Bool\nisShout input = any isUpper input && not (any isLower input)\n\nisQuestion :: String -> Bool\nisQuestion "" = False\nisQuestion input = last input == '?'\n\nisSilence :: String -> Bool\nisSilence input = all isSpace input	\N	\N	0	3	2014-07-10 04:08:28	2014-07-10 04:08:28	62	bob.hs
107	27	8121790b827533a7bd998990	done	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor input\n  | isSilence input  = "Fine. Be that way!"\n  | isShout input    = "Woah, chill out!"\n  | isQuestion input = "Sure."\n  | otherwise        = "Whatever."\n\nisSilence :: String -> Bool\nisSilence = all isSpace\n\nisShout :: String -> Bool\nisShout input = any isUpper input && not (any isLower input)\n\nisQuestion :: String -> Bool\nisQuestion input = last input == '?'	2014-07-26 19:31:02.847307	\N	0	5	2014-07-16 15:57:26	2014-07-16 15:57:26	62	bob.hs
108	27	a26736dee755a19718441739	superseded	elixir	beer-song	defmodule Beer do\n  def verse(x) do\n    line1(x) <> line2(x)\n  end\n\n  def sing(start, stop // 0) do\n    Enum.reduce(stop..start, "", fn(x, song) ->\n      verse(x) <> "\\n" <> song\n    end)\n  end\n\n  defp line1(x) do\n    bottles = bottleize x\n    "#{String.capitalize bottles} of beer on the wall, #{bottles} of beer.\\n"\n  end\n\n  defp line2(x) do\n    if x > 0 do\n      one  = if x > 1, do: "one", else: "it"\n      left = bottleize x-1\n      "Take #{one} down and pass it around, #{left} of beer on the wall.\\n"\n    else\n      "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    end\n  end\n\n  defp bottleize(x) do\n    case x do\n      0 -> "no more bottles"\n      1 -> "1 bottle"\n      x -> "#{x} bottles"\n    end\n  end\nend	\N	\N	0	2	2014-05-01 22:48:18	2014-05-01 22:48:18	63	beer-song.exs
109	27	4e4824d9f21ba22c18daf9cc	superseded	elixir	beer-song	defmodule Beer do\n  def verse(x) do\n    line1(x) <> line2(x)\n  end\n\n  def sing(start, stop // 0) do\n    Enum.reduce(stop..start, "", fn(x, song) ->\n      verse(x) <> "\\n" <> song\n    end)\n  end\n\n  defp line1(x) do\n    bottles = bottles x\n    "#{String.capitalize bottles} of beer on the wall, #{bottles} of beer.\\n"\n  end\n\n  defp line2(x) do\n    if x > 0 do\n      left = bottles x-1\n      one  = if x > 1, do: "one", else: "it"\n      "Take #{one} down and pass it around, #{left} of beer on the wall.\\n"\n    else\n      "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    end\n  end\n\n  defp bottles(x) do\n    case x do\n      0 ->\n        "no more bottles"\n      1 ->\n        "1 bottle"\n      x ->\n        "#{x} bottles"\n    end\n  end\nend	\N	\N	0	1	2014-06-03 04:55:36	2014-06-03 04:55:36	63	beer-song.exs
110	27	0f82e455e86a428121b76a44	superseded	elixir	beer-song	defmodule Beer do\n  def verse(x) do\n    iolist_to_binary [line1(x), line2(x)]\n  end\n\n  def sing(start, stop // 0) do\n    Enum.reduce(stop..start, "", fn(x, song) ->\n      [verse(x), "\\n", song]\n    end)\n  end\n\n  defp line1(x) do\n    bottles = bottleize x\n    "#{String.capitalize bottles} of beer on the wall, #{bottles} of beer.\\n"\n  end\n\n  defp line2(0) do\n    "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n  end\n\n  defp line2(1) do\n    "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n  end\n\n  defp line2(x) when x > 1 do\n    bottles = bottleize x-1\n    "Take one down and pass it around, #{bottles} of beer on the wall.\\n"\n  end\n\n  defp bottleize(0), do: "no more bottles"\n\n  defp bottleize(1), do: "1 bottle"\n\n  defp bottleize(x), do: "#{x} bottles"\nend	\N	\N	0	4	2014-06-16 10:49:24	2014-06-16 10:49:24	63	beer-song.exs
111	27	839fa4b01f267a3d358f7e22	superseded	elixir	beer-song	defmodule Beer do\n  def verse(x) do\n    iolist_to_binary [line1(x), line2(x)]\n  end\n\n  def sing(start, stop // 0) do\n    Enum.reduce(stop..start, "", fn(x, song) ->\n      iolist_to_binary [verse(x), "\\n", song]\n    end)\n  end\n\n  defp line1(x) do\n    bottles = bottleize x\n    "#{String.capitalize bottles} of beer on the wall, #{bottles} of beer.\\n"\n  end\n\n  defp line2(0) do\n    "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n  end\n\n  defp line2(1) do\n    "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n  end\n\n  defp line2(x) when x > 1 do\n    bottles = bottleize x-1\n    "Take one down and pass it around, #{bottles} of beer on the wall.\\n"\n  end\n\n  defp bottleize(0), do: "no more bottles"\n\n  defp bottleize(1), do: "1 bottle"\n\n  defp bottleize(x), do: "#{x} bottles"\nend	\N	\N	0	3	2014-06-18 03:17:11	2014-06-18 03:17:11	63	beer-song.exs
112	27	0410a28895d51ccdd8ed7751	done	elixir	beer-song	defmodule Beer do\n  def verse(x) do\n    iolist_to_binary [line1(x), line2(x)]\n  end\n\n  def sing(start, stop // 0) do\n    Enum.reduce(stop..start, "", fn(x, song) ->\n      [verse(x), "\\n", song]\n    end) |> iolist_to_binary\n  end\n\n  defp line1(x) do\n    bottles = bottleize x\n    "#{String.capitalize bottles} of beer on the wall, #{bottles} of beer.\\n"\n  end\n\n  defp line2(0) do\n    "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n  end\n\n  defp line2(1) do\n    "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n  end\n\n  defp line2(x) when x > 1 do\n    bottles = bottleize x-1\n    "Take one down and pass it around, #{bottles} of beer on the wall.\\n"\n  end\n\n  defp bottleize(0), do: "no more bottles"\n\n  defp bottleize(1), do: "1 bottle"\n\n  defp bottleize(x), do: "#{x} bottles"\nend	2014-07-16 17:06:02	\N	0	5	2014-07-13 19:19:06	2014-07-13 19:19:06	63	beer-song.exs
113	28	9435799c93c1cd6b0f5b1afd	pending	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char\nimport Data.List\n\nanagramsFor word = filter $ isAnagramFor word\n\nword' `isAnagramFor` other' = \n    sort word == sort other && word /= other\n\n  where\n    [word, other] = map (map toLower) [word', other']	\N	\N	0	1	2014-02-06 15:07:54	2014-02-06 15:07:54	64	Anagram.hs
114	28	20e32d0688ccc4e68b98be92	superseded	javascript	word-count	var words = function(text) {\n    text = text.toLowerCase();\n    var words = text.match(/\\w+/g);\n    return words.reduce(function(counts, word) {\n        var wordCount = counts[word];\n        counts[word] = (wordCount === undefined) ? 1 : wordCount + 1;\n        return counts;\n    }, {});\n};\n\nmodule.exports = words;	\N	\N	0	2	2013-12-22 08:42:58	2013-12-22 08:42:58	65	word-count.js
115	28	a30052adb7564aafb42cea1d	superseded	javascript	word-count	var words = function(string) {\n    var counts = {};\n    string = string.toLowerCase();\n    var words = string.match(/\\w+/g);\n    for(var i = 0; i < words.length; i++) {\n        var word = words[i];\n        var wordCount = counts[word];\n        counts[word] = wordCount === undefined ? 1 : wordCount + 1;\n    }\n    return counts;\n};\n\nmodule.exports = words;	\N	\N	0	1	2014-03-12 11:42:33	2014-03-12 11:42:33	65	word-count.js
116	28	093346492bb8bebc10f8e20c	superseded	javascript	word-count	var words = function(text) {\n    var words = text.toLowerCase().match(/\\w+/g);\n    return words.reduce(function(counts, word) {\n        var wordCount = counts[word];\n        counts[word] = (wordCount === undefined) ? 1 : wordCount + 1;\n        return counts;\n    }, {});\n};\n\nmodule.exports = words;	\N	\N	0	3	2014-04-04 10:21:51	2014-04-04 10:21:51	65	word-count.js
117	28	e2da64967e0478cbe2a1485b	done	javascript	word-count	var words = function(str) {\n    var words = str.toLowerCase().match(/\\w+/g);\n    return words.reduce(function(counts, word) {\n        counts[word] ? counts[word]++ : counts[word] = 1;\n        return counts;\n    }, {});\n};\n\nmodule.exports = words;	2014-04-24 05:42:34	\N	0	4	2014-04-21 02:52:55	2014-04-21 02:52:55	65	word-count.js
118	28	687fd2210057d81fb74d5687	superseded	ruby	house	class House\n\n  def recite\n\n  end\n\nend	\N	\N	0	1	2014-03-05 10:19:21	2014-03-05 10:19:21	66	house.rb
119	28	8aa5ecd6959b04a48122312b	done	ruby	house	class House\n  def self.recite\n    "This is the house that Jack built.\n\nThis is the malt\nthat lay in the house that Jack built.\n\nThis is the rat\nthat ate the malt\nthat lay in the house that Jack built.\n\nThis is the cat\nthat killed the rat\nthat ate the malt\nthat lay in the house that Jack built.\n\nThis is the dog\nthat worried the cat\nthat killed the rat\nthat ate the malt\nthat lay in the house that Jack built.\n\nThis is the cow with the crumpled horn\nthat tossed the dog\nthat worried the cat\nthat killed the rat\nthat ate the malt\nthat lay in the house that Jack built.\n\nThis is the maiden all forlorn\nthat milked the cow with the crumpled horn\nthat tossed the dog\nthat worried the cat\nthat killed the rat\nthat ate the malt\nthat lay in the house that Jack built.\n\nThis is the man all tattered and torn\nthat kissed the maiden all forlorn\nthat milked the cow with the crumpled horn\nthat tossed the dog\nthat worried the cat\nthat killed the rat\nthat ate the malt\nthat lay in the house that Jack built.\n\nThis is the priest all shaven and shorn\nthat married the man all tattered and torn\nthat kissed the maiden all forlorn\nthat milked the cow with the crumpled horn\nthat tossed the dog\nthat worried the cat\nthat killed the rat\nthat ate the malt\nthat lay in the house that Jack built.\n\nThis is the rooster that crowed in the morn\nthat woke the priest all shaven and shorn\nthat married the man all tattered and torn\nthat kissed the maiden all forlorn\nthat milked the cow with the crumpled horn\nthat tossed the dog\nthat worried the cat\nthat killed the rat\nthat ate the malt\nthat lay in the house that Jack built.\n\nThis is the farmer sowing his corn\nthat kept the rooster that crowed in the morn\nthat woke the priest all shaven and shorn\nthat married the man all tattered and torn\nthat kissed the maiden all forlorn\nthat milked the cow with the crumpled horn\nthat tossed the dog\nthat worried the cat\nthat killed the rat\nthat ate the malt\nthat lay in the house that Jack built.\n\nThis is the horse and the hound and the horn\nthat belonged to the farmer sowing his corn\nthat kept the rooster that crowed in the morn\nthat woke the priest all shaven and shorn\nthat married the man all tattered and torn\nthat kissed the maiden all forlorn\nthat milked the cow with the crumpled horn\nthat tossed the dog\nthat worried the cat\nthat killed the rat\nthat ate the malt\nthat lay in the house that Jack built.\n"\n  end\nend	2014-04-23 10:20:06	\N	0	2	2014-04-21 10:26:52	2014-04-21 10:26:52	66	house.rb
120	28	cdd96825508c075a8d48d50c	superseded	clojure	bob	(ns bob)\n\n(defn response-for [text]\n  (let [shout #"([A-Z]+ [A-Z]+) | ([A-Z]+!)"\n        question #"\\?$"\n        any #"\\S+"\n        found? (comp not nil? re-find)]\n\n    (cond\n     (found? shout text) "Woah, chill out!"\n     (found? question text) "Sure."\n     (found? any text) "Whatever."\n     :empty "Fine. Be that way!")))	\N	\N	0	1	2014-02-12 15:31:55	2014-02-12 15:31:55	67	bob.clj
121	28	8ca07d642d8d392d12664767	done	clojure	bob	(ns bob)\n\n(defn response-for [text]\n  (let [shout #"([A-Z]+ [A-Z]+) | ([A-Z]+!)"\n        question #"\\?$"\n        any #"\\S+"\n        found? (comp not nil? #(re-find % text))]\n\n    (cond\n     (found? shout) "Woah, chill out!"\n     (found? question) "Sure."\n     (found? any) "Whatever."\n     :empty "Fine. Be that way!")))	2014-05-05 23:48:49	\N	0	2	2014-04-29 04:14:00	2014-04-29 04:14:00	67	bob.clj
122	28	edb17fe16a2d4c8858321f73	superseded	javascript	bob	var Bob = function() {};\n\nBob.prototype.hey = function (phrase) {\n\n  if ( phrase.trim() === "" ) {\n    return "Fine. Be that way!";\n  } else if ( phrase.toUpperCase() === phrase ) {\n    return "Woah, chill out!";\n  } else if ( phrase.slice(-1) === "?" ) {\n    return "Sure.";\n  } else {\n    return "Whatever.";\n  }\n\n};\n\n\nmodule.exports = Bob;	\N	\N	0	3	2014-01-21 15:33:39	2014-01-21 15:33:39	68	bob.js
123	28	eb8a922c26a48af73d99aaa2	done	javascript	bob	var Bob = function() {};\nvar Message = function(input) {\n  this.input = input;\n};\n\nBob.prototype.hey = function (phrase) {\n\n  var message = new Message(phrase);\n\n  if (message.isSilence()) {\n    return "Fine. Be that way!";\n  } else if (message.isShouting()) {\n    return "Woah, chill out!";\n  } else if (message.isQuestion()) {\n    return "Sure.";\n  } else {\n    return "Whatever.";\n  }\n\n};\n\nMessage.prototype.isSilence = function() {\n  return this.input.trim() === "";\n}\n\nMessage.prototype.isShouting = function() {\n  return this.input.toUpperCase() === this.input;\n}\n\nMessage.prototype.isQuestion = function() {\n  return this.input.slice(-1) === "?";\n}\n\n\nmodule.exports = Bob;	2014-04-12 23:30:04	\N	0	5	2014-04-03 11:05:29	2014-04-03 11:05:29	68	bob.js
124	28	504ec51922a6d5829009b015	superseded	javascript	bob	var Bob = function() {\n\n  this.hey = function (phrase) {\n\n    if ( phrase.trim() === "" ) {\n      return "Fine. Be that way!";\n    } else if ( phrase.toUpperCase() === phrase ) {\n      return "Woah, chill out!";\n    } else if ( phrase.slice(-1) === "?" ) {\n      return "Sure.";\n    } else {\n      return "Whatever.";\n    }\n\n  };\n\n};\n\nmodule.exports = Bob;	\N	\N	0	2	2014-05-23 01:25:35	2014-05-23 01:25:35	68	bob.js
182	39	91c9bb482d9c4999064f39cc	superseded	ruby	rna-transcription	class DNA\n\n\tdef initialize(dna)\n\t \t@dna = dna\n  \tend\n\n\tdef to_rna\n\t\t@dna.gsub(/T/, 'U')\n\tend\n\nend	\N	\N	0	1	2014-06-16 06:41:01	2014-06-16 06:41:01	95	rna-transcription.rb
125	28	5d3dd261dec77a8b775045b0	superseded	javascript	bob	var Bob = function() {\n\n  this.hey = function (phrase) {\n\n    if ( phrase.replace(" ", "").trim() == "" ) {\n      return "Fine. Be that way!";\n    } else if ( phrase.toUpperCase() === phrase ) {\n      return "Woah, chill out!";\n    } else if ( phrase.charAt(phrase.length-1) === "?" ) {\n      return "Sure.";\n    } else {\n      return "Whatever.";\n    }\n\n  };\n\n};\n\nmodule.exports = Bob;	\N	\N	0	1	2014-05-28 14:40:24	2014-05-28 14:40:24	68	bob.js
126	28	995ef71dcdc835172a1cfad8	superseded	javascript	bob	var Bob = function() {};\nvar Message = function() {};\n\nBob.prototype.hey = function (phrase) {\n\n  var message = new Message\n\n  if (message.isSilence(phrase)) {\n    return "Fine. Be that way!";\n  } else if (message.isShouting(phrase)) {\n    return "Woah, chill out!";\n  } else if (message.isQuestion(phrase)) {\n    return "Sure.";\n  } else {\n    return "Whatever.";\n  }\n\n};\n\nMessage.prototype.isSilence = function(phrase) {\n  if (phrase.trim() === "") {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nMessage.prototype.isShouting = function(phrase) {\n  if (phrase.toUpperCase() === phrase) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nMessage.prototype.isQuestion = function(phrase) {\n  if (phrase.slice(-1) === "?") {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\nmodule.exports = Bob;	\N	\N	0	4	2014-06-03 02:03:49	2014-06-03 02:03:49	68	bob.js
127	28	10c14bcbd13f2133c42320d0	done	ruby	hamming	class DNA\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(target)\n    original, other = normalize_length(@strand, target)\n    original.chars.zip(other.chars).count { |a, b| a != b }\n  end\n\n  private\n\n  def normalize_length(a, b)\n    length = [ a.length, b.length ].min\n    [ a.slice(0, length), b.slice(0, length) ]\n  end\nend	2014-02-13 00:46:52	\N	0	1	2014-02-02 08:23:10	2014-02-02 08:23:10	69	point-mutations.rb
128	28	025b6a1231f5f76b825777e0	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @letters = Letters.from_word(word)\n  end\n\n  def match(words)\n    words.select { |w| anagram?(w) }\n  end\n\n  private\n\n  def anagram?(word)\n    @letters == Letters.from_word(word)\n  end\nend\n\nclass Letters\n  def self.from_word(word)\n    word.chars.sort\n  end\nend	\N	\N	0	3	2014-03-07 19:10:49	2014-03-07 19:10:49	70	anagram.rb
129	28	acc37fea0ef556431e93c716	superseded	ruby	anagram	module Word \n  def letters(word)\n    word.chars.sort\n  end\nend\n\nclass Anagram\n  include Word\n\n  def initialize(word)\n    @letters = letters(word)\n  end\n\n  def match(words)\n    words.select { |w| anagram?(w) }\n  end\n\n  private\n\n  def anagram?(word)\n    @letters == letters(word)\n  end\nend	\N	\N	0	4	2014-03-30 01:23:23	2014-03-30 01:23:23	70	anagram.rb
130	28	b9d21b0bc8e2bc34134dbbb2	done	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = Word.new(word)\n  end\n\n  def match(words)\n    words.select { |w| @word.anagram_of?(w) }\n  end\nend\n\nclass Word < String\n  def anagram_of?(word)\n    letters(self) == letters(word)\n  end\n\n  private\n\n  def letters(word)\n    word.chars.sort\n  end\nend	2014-05-13 03:40:45	\N	0	5	2014-05-10 09:54:23	2014-05-10 09:54:23	70	anagram.rb
131	28	62c290751a034478a5872e38	superseded	ruby	anagram	class Anagram < Struct.new(:word)\n  def match(potential_anagrams)\n    potential_anagrams.each_with_object([]) do |potential_anagram, anagrams|\n      anagrams << potential_anagram if anagram?(potential_anagram)\n    end\n  end\n\n  private\n\n  def anagram?(potential_anagram)\n    word.split('').sort == potential_anagram.split('').sort\n  end\nend	\N	\N	0	1	2014-05-28 16:25:11	2014-05-28 16:25:11	70	anagram.rb
132	28	88e171b620a233990516e5d3	superseded	ruby	anagram	class Anagram < Struct.new(:word)\n  def match(potential_anagrams)\n    potential_anagrams.select { |potential_anagram| anagram?(potential_anagram) }\n  end\n\n  private\n\n  def anagram?(potential_anagram)\n    word.chars.sort == potential_anagram.chars.sort\n  end\nend	\N	\N	0	2	2014-07-13 18:11:05	2014-07-13 18:11:05	70	anagram.rb
133	30	55f863bf5bc196647fe522f0	done	go	grains	package grains\n\nimport "math"\n\nfunc Square(input int) uint64 {\n\treturn uint64(math.Exp2(float64(input) - 1))\n}\n\nfunc Total() uint64 {\n\tvar total uint64\n\n\tfor i := 0; i < 65; i++ {\n\t\ttotal += Square(i)\n\t}\n\n\treturn total\n}	2014-02-13 01:51:12	\N	0	1	2014-02-04 01:34:15	2014-02-04 01:34:15	71	grains.go
134	30	b32dcd943adcc4aee915936c	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map compl\n  where\n    compl 'G' = 'C'\n    compl 'C' = 'G'\n    compl 'T' = 'A'\n    compl 'A' = 'U'	\N	\N	0	1	2014-02-01 09:42:25	2014-02-01 09:42:25	72	DNA.hs
135	30	a98ffce346ec0daa10fd4cbf	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map compl\n\ncompl :: Char -> Char\ncompl 'G' = 'C'\ncompl 'C' = 'G'\ncompl 'T' = 'A'\ncompl 'A' = 'U'\ncompl c   = error $ "Invalid nucleotide: " ++ [c]	2014-02-11 11:36:08	\N	0	2	2014-02-02 21:28:44	2014-02-02 21:28:44	72	DNA.hs
136	30	8b1ac0691994dc0418379d16	done	ruby	rna-transcription	class DeoxyribonucleicAcid < String\n  def initialize(dna)\n    super\n    @dna = dna\n  end\n\n  def to_rna\n    RibonucleicAcid.new(@dna.gsub('T','U'))\n  end\nend\n\nclass RibonucleicAcid < String\n  def initialize(rna)\n    super\n    @rna = rna\n  end\nend\n\n# ...okay.	2014-05-07 11:01:13	\N	0	1	2014-05-04 05:18:34	2014-05-04 05:18:34	73	rna-transcription.rb
137	30	a7ecc9b1d98bb1bf5337aab0	superseded	python	rna-transcription	def to_rna(dna_sequence):\n\tresult = ''\n\tfor nucleotide in dna_sequence:\n\t\tif nucleotide == 'G':\n\t\t\tresult += 'C'\n\t\telif nucleotide == 'C':\n\t\t\tresult += 'G'\n\t\telif nucleotide == 'T':\n\t\t\tresult+= 'A'\n\t\telif nucleotide == 'A':\n\t\t\tresult += 'U'\n\treturn result	\N	\N	0	1	2014-02-19 05:42:30	2014-02-19 05:42:30	74	dna.py
139	30	877eef2100b80d817c2421c4	superseded	ruby	bob	class Reaction\n  def initialize(test_method_name, resp)\n    @test_method_name = test_method_name\n    @response = resp\n  end\n\n  def test(input)\n    input.send(@test_method_name)\n  end\n\n  def response\n    @response\n  end\nend\n\nclass Bob\n  REACTIONS = [\n    Reaction.new(:is_empty?,      'Fine. Be that way!'),\n    Reaction.new(:is_loud?,       'Woah, chill out!'),\n    Reaction.new(:is_a_question?, 'Sure.'),\n  ]\n\n  def hey(input)\n    stimulus = Stimulus.new input\n    REACTIONS.each do |possible_reaction|\n      return possible_reaction.response if possible_reaction.test(stimulus)\n    end\n    'Whatever.'\n  end\nend\n\nclass Stimulus\n  def initialize(stimulus)\n    @stimulus = stimulus.strip\n  end\n\n  def is_empty?\n    @stimulus.length == 0\n  end\n\n  def is_loud?\n    @stimulus.upcase == @stimulus && @stimulus.swapcase != @stimulus\n  end\n\n  def is_a_question?\n    @stimulus.end_with? '?'\n  end\nend	\N	\N	0	6	2014-01-09 00:08:09	2014-01-09 00:08:09	75	bob.rb
140	30	3e2b82d04460d460007038c0	superseded	ruby	bob	class Bob\n\n  def hey(arg)\n    return 'Fine. Be that way!' if arg.nil? || arg.strip.length == 0\n\n    arg.gsub!(/\\n/, '')\n\n    if arg.match(/[a-z]/i) && arg.upcase == arg\n      'Woah, chill out!'\n    elsif arg.match(/\\?$/)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\nend	\N	\N	0	1	2014-01-29 08:45:19	2014-01-29 08:45:19	75	bob.rb
141	30	fb0ab260b098d168efc1f38f	superseded	ruby	bob	class Bob\n\n  def hey(stimulus='')\n    stimulus.delete! "\\n"\n    if is_empty?(stimulus)\n      'Fine. Be that way!'\n    elsif is_loud?(stimulus)\n      'Woah, chill out!'\n    elsif is_a_question?(stimulus)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n\n  def is_empty?(stimulus)\n    stimulus.strip.length == 0\n  end\n\n  def is_loud?(stimulus)\n    stimulus.match(/[a-z]/i) && stimulus.upcase == stimulus\n  end\n\n  def is_a_question?(stimulus)\n    stimulus.match(/\\?$/)\n  end\n\nend	\N	\N	0	2	2014-02-05 06:05:46	2014-02-05 06:05:46	75	bob.rb
142	30	848b7ea9c3ab754389e4eaa2	superseded	ruby	bob	class Bob\n\n  def hey(stimulus='')\n    if is_empty?(stimulus)\n      'Fine. Be that way!'\n    elsif is_loud?(stimulus)\n      'Woah, chill out!'\n    elsif is_a_question?(stimulus)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n\n  def is_empty?(stimulus)\n    stimulus.strip.length == 0\n  end\n\n  def is_loud?(stimulus)\n    stimulus.match(/[a-z]/i) && stimulus.upcase == stimulus\n  end\n\n  def is_a_question?(stimulus)\n    stimulus.end_with? '?'\n  end\n\nend	\N	\N	0	3	2014-02-22 07:57:45	2014-02-22 07:57:45	75	bob.rb
143	30	021731b05697093e78b82714	superseded	ruby	bob	class Bob\n  def hey(stimulus)\n    Responder.new(stimulus).response\n  end\nend\n\nclass Responder\n\n  def initialize(stimulus)\n    @stimulus = stimulus.strip\n  end\n\n  def response\n    if is_empty?\n      'Fine. Be that way!'\n    elsif is_loud?\n      'Woah, chill out!'\n    elsif is_a_question?\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n\n  def is_empty?\n    @stimulus.length == 0\n  end\n\n  def is_loud?\n    @stimulus.upcase == @stimulus && @stimulus.swapcase != @stimulus\n  end\n\n  def is_a_question?\n    @stimulus.end_with? '?'\n  end\n\nend	\N	\N	0	4	2014-03-10 05:35:22	2014-03-10 05:35:22	75	bob.rb
144	30	66a3e4068c4bd7f36cdcb1ea	superseded	ruby	bob	class Bob\n  def hey(stimulus)\n    Responder.new(Stimulus.new stimulus).response\n  end\nend\n\nclass Stimulus\n  def initialize(stimulus)\n    @stimulus = stimulus.strip\n  end\n  def is_empty?\n    @stimulus.length == 0\n  end\n\n  def is_loud?\n    @stimulus.upcase == @stimulus && @stimulus.swapcase != @stimulus\n  end\n\n  def is_a_question?\n    @stimulus.end_with? '?'\n  end\nend\n\nclass Responder\n  def initialize(input)\n    @input = input\n  end\n  def response\n    if @input.is_empty?\n      'Fine. Be that way!'\n    elsif @input.is_loud?\n      'Woah, chill out!'\n    elsif @input.is_a_question?\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n\nend	\N	\N	0	5	2014-04-26 19:34:39	2014-04-26 19:34:39	75	bob.rb
145	30	f4fd1a975527830e90694ac6	done	ruby	bob	class Bob\n  def initialize(reactions=[ SilentReaction, YellingReaction, QuestioningReaction, Reaction ])\n    @reactions = reactions\n  end\n\n  def hey(input)\n    respond_to(Stimulus.new input)\n  end\n\n  private\n\n  def respond_to(stimulus)\n    @reactions.find { |reaction| reaction.test(stimulus) }.response\n  end\nend\n\nclass Reaction\n  def self.test(_stimulus)\n    true\n  end\n\n  def self.response\n    'Whatever.'\n  end\nend\n\nclass SilentReaction < Reaction\n  def self.test(stimulus)\n    stimulus.is_empty?\n  end\n\n  def self.response\n    'Fine. Be that way!'\n  end\nend\n\nclass YellingReaction < Reaction\n  def self.test(stimulus)\n    stimulus.is_loud?\n  end\n\n  def self.response\n    'Woah, chill out!'\n  end\nend\n\nclass QuestioningReaction < Reaction\n  def self.test(stimulus)\n    stimulus.is_a_question? && !stimulus.is_loud?\n  end\n\n  def self.response\n    'Sure.'\n  end\nend\n\nclass Stimulus\n  def initialize(stimulus)\n    @stimulus = stimulus.strip\n  end\n\n  def is_empty?\n    @stimulus.length == 0\n  end\n\n  def is_loud?\n    @stimulus.upcase == @stimulus && @stimulus.swapcase != @stimulus\n  end\n\n  def is_a_question?\n    @stimulus.end_with? '?'\n  end\nend	2014-05-17 16:05:09	\N	0	7	2014-05-13 21:14:59	2014-05-13 21:14:59	75	bob.rb
146	30	19714367d22e5ad58aa7305e	pending	ruby	twelve-days	class TwelveDaysSong\n  LINES = [\n    ["first","a Partridge in a Pear Tree"],\n    ["second","two Turtle Doves"],\n    ["third","three French Hens"],\n    ["fourth","four Calling Birds"],\n    ["fifth","five Gold Rings"],\n    ["sixth","six Geese-a-Laying"],\n    ["seventh","seven Swans-a-Swimming"],\n    ["eighth","eight Maids-a-Milking"],\n    ["ninth","nine Ladies Dancing"],\n    ["tenth","ten Lords-a-Leaping"],\n    ["eleventh","eleven Pipers Piping"],\n    ["twelfth","twelve Drummers Drumming"],\n  ]\n  \n  def sing\n    verses 1,12\n  end\n  \n  def verses first, last\n    (first..last).map{|number| verse number}.join("\\n") + "\\n"\n  end\n  \n  def verse number\n    "On the #{line_ord number} day of Christmas my true love gave to me, "+\n    presents(number)+\n    ".\\n"\n  end\n  \n  private\n  def presents number\n    return present number if number == 1\n    number.downto(2).map{|n| present n}.join(", ")+", and #{present 1}"\n  end\n  \n  def present number\n    LINES[number-1][1]\n  end\n  \n  def line_ord number\n    LINES[number-1][0]\n  end\nend	\N	\N	0	1	2014-02-06 22:54:18	2014-02-06 22:54:18	76	twelve_days.rb
147	30	ed00a2a5b416c2f4998d7333	done	python	roman-numerals	romans = [("M", 1000), ("CM", 900), ("D", 500), ("CD", 400),\n          ("C", 100), ("XC", 90), ("L", 50), ("XL", 40),\n          ("X", 10), ("IX", 9), ("V", 5), ("IV", 4), ("I", 1)]\n\n\ndef RomanNumeral(arabic):\n    s = ""\n    for roman, value in romans:\n        s += arabic // value * roman\n        arabic %= value\n    return s	2014-03-01 13:25:48	\N	0	1	2014-02-19 16:39:20	2014-02-19 16:39:20	77	roman-numerals.py
148	30	6fc4ebaca6f464af0ad551db	pending	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @words = split_words(phrase.downcase)\n  end\n\n  def word_count\n    @words.each_with_object(Hash.new(0)) { |w,hsh| hsh[w] += 1 }\n  end\n\n  private\n\n  def split_words(phrase)\n    phrase.gsub(/\\W+/, ' ').split(' ')\n  end\nend	\N	\N	0	1	2014-01-15 14:35:19	2014-01-15 14:35:19	78	word-count.rb
149	30	693f5d2a99e3b8db892e18a9	superseded	python	nucleotide-count	nucleotides = ('A','T','C','G')\r\n\r\nclass DNA(object):\r\n    def __init__(self, dna):\r\n        self.dna = dna\r\n\r\n    def count(self, nucleotide):\r\n        return self.dna.count(nucleotide)\r\n\r\n    def nucleotide_counts(self):\r\n        answer = {}\r\n        for nucleotide in nucleotides:\r\n            answer[nucleotide] = self.dna.count(nucleotide)\r\n        return answer\r	\N	\N	0	1	2014-01-26 21:54:31	2014-01-26 21:54:31	79	dna.py
150	30	cf84eb4b4e7425f1ed48e9a8	done	python	nucleotide-count	NUCLEOTIDES = ('A','T','C','G')\r\nVALID_NUCLEOTIDES = ('A', 'T', 'C', 'G', 'U')\r\n\r\nclass DNA(object):\r\n    def __init__(self, dna):\r\n        self.dna = dna\r\n\r\n    def count(self, nucleotide):\r\n        self.test(nucleotide)\r\n        return self.dna.count(nucleotide)\r\n\r\n    def nucleotide_counts(self):\r\n        answer = {}\r\n        for nucleotide in NUCLEOTIDES:\r\n            answer[nucleotide] = self.dna.count(nucleotide)\r\n        return answer\r\n\r\n    def test(self, nucleotide):\r\n        if nucleotide not in VALID_NUCLEOTIDES:\r\n            raise ValueError("{0} is not a nucleotide.".format(nucleotide))\r	2014-05-11 16:58:09	\N	0	2	2014-05-10 22:40:01	2014-05-10 22:40:01	79	dna.py
151	30	f0d2c124ff6605f7fdd64573	superseded	ruby	etl	class ETL\n  def self.transform(old)\n    old.each_with_object({}) do |(key, values), acc|\n      values.each { |value| acc[value.downcase] = key }\n    end\n  end\nend	\N	\N	0	2	2014-01-17 17:16:30	2014-01-17 17:16:30	80	etl.rb
152	30	8742e4b5263896c42ff8d5eb	superseded	ruby	etl	class ETL\n  def self.transform(old)\n    old.inject({}) do |acc, entry|\n      entry.last.each do |element|\n        acc[element.downcase] = entry.first\n      end\n      acc\n    end\n  end\nend	\N	\N	0	1	2014-02-01 19:33:17	2014-02-01 19:33:17	80	etl.rb
153	30	9317337783ac7f8db2bd80bd	done	ruby	etl	class ETL\n  def self.transform(old_scoreboard)\n    old_scoreboard.each_with_object({}) do |(score, letters), new_scoreboard|\n      letters.each { |letter| new_scoreboard[letter.downcase] = score }\n    end\n  end\nend	2014-02-11 11:23:22	\N	0	3	2014-02-09 15:47:32	2014-02-09 15:47:32	80	etl.rb
154	32	78e88012847002d6ee120fba	pending	go	word-count	package wc\n\nimport (\n\t"regexp"\n\t"strings"\n)\n\nfunc WordCount(str string) Histogram {\n\tcount := Histogram{}\n\tregex, _ := regexp.Compile("\\\\w+")\n\tfor _, word := range regex.FindAllString(strings.ToLower(str), -1) {\n\t\tcount[word]++\n\t}\n\treturn count\n}	\N	\N	0	1	2014-05-13 07:59:33	2014-05-13 07:59:33	81	word_count.go
155	37	ec313cc46d3211659df59ea7	pending	clojure	grade-school	(ns school)\n\n\n(defn- vector-merge [& x]\n  (apply vector (apply concat x)))\n\n\n(defn add [db name grade]\n  (merge-with vector-merge db {grade [name]}))\n\n\n(defn grade [db grade]\n  (let [students (db grade)]\n    (if students students [])))\n\n\n(defn sorted [db]\n  (into {} (for [[k v] db] [k (sort v)])))	\N	\N	0	1	2013-11-11 08:11:50	2013-11-11 08:11:50	82	school.clj
156	37	09a8c6f02cc1df3454de866f	superseded	elixir	anagram	defmodule Anagram do\n\n  def match(word, word_pool) do\n      char_word = sort_word(word)\n      Enum.filter word_pool, fn(w) -> char_word == sort_word w  end\n  end\n\n  defp sort_word(w) do\n    :lists.sort  String.codepoints(w)\n  end\nend	\N	\N	0	1	2014-03-22 12:45:16	2014-03-22 12:45:16	83	anagram.exs
157	37	df68ffdf66db6c0ded158c1a	done	elixir	anagram	defmodule Anagram do\n\n  def match(word, word_pool) do\n    Enum.filter_map(word_pool, fn(w) -> word ==  w  end, sort_word &1)\n  end\n\n  defp sort_word(w) do\n    Enum.sort String.codepoints(w)\n  end\nend	2014-04-22 16:51:12	\N	0	2	2014-04-19 23:13:26	2014-04-19 23:13:26	83	anagram.exs
158	37	cfa4b9b85cce26b21be80d1b	superseded	javascript	nucleotide-count	var DNA = function (seq) {\n    this.seq = seq;\n    this.nucleotideCounts = {'A':0, 'G':0, 'T':0, 'C':0 };\n\n    for( var i in seq ) {\n        this.nucleotideCounts[seq[i]]++;\n    }\n};\n\nDNA.prototype.count = function (c) {\n    var nc = this.nucleotideCounts;\n\n    nc['U'] = 0;\n\n    if( nc[c] === undefined ) {\n        throw "Invalid Nucleotide";\n    }\n\n    return nc[c];\n};\n\nmodule.exports = DNA;	\N	\N	0	1	2013-12-17 22:37:40	2013-12-17 22:37:40	84	nucleotide-count.js
159	37	d69ea1ac50c1c1c296ce3950	done	javascript	nucleotide-count	var DNA = function (seq) {\n    this.nucleotideCounts = {'A':0, 'G':0, 'T':0, 'C':0 };\n\n    for( var i in seq ) {\n        this.nucleotideCounts[seq[i]]++;\n    }\n};\n\nDNA.prototype.count = function (c) {\n    var nc = this.nucleotideCounts;\n\n    nc['U'] = 0;\n\n    if( nc[c] === undefined ) {\n        throw "Invalid Nucleotide";\n    }\n\n    return nc[c];\n};\n\nmodule.exports = DNA;	2014-01-28 09:53:01	\N	0	2	2014-01-22 15:32:03	2014-01-22 15:32:03	84	nucleotide-count.js
160	37	7734b9e4318358abb247c641	done	haskell	bob	module Bob (responseFor) where\r\n\r\nimport Data.Char\r\n\r\nresponseFor :: String -> String\r\nresponseFor str \r\n    | all isUpper letters && \r\n      letters /= []   = "Woah, chill out!"\r\n    | all isSpace str = "Fine. Be that way!"\r\n    | last str == '?' = "Sure."\r\n    | otherwise       = "Whatever."\r\n    where letters = filter isLetter str	2013-12-31 18:12:33	\N	0	2	2013-12-24 11:05:30	2013-12-24 11:05:30	85	bob.hs
161	37	2ce271107760301182734bfb	superseded	haskell	bob	module Bob (responseFor) where\r\n\r\nimport qualified Data.Text as T\r\nimport Data.Char\r\n\r\nresponseFor :: String -> String\r\nresponseFor str \r\n    | all isUpper letters && \r\n      letters /= []   = "Woah, chill out!"\r\n    | all isSpace str = "Fine. Be that way!"\r\n    | last str == '?' = "Sure."\r\n    | otherwise       = "Whatever."\r\n    where letters = filter isLetter str	\N	\N	0	1	2014-03-04 18:47:06	2014-03-04 18:47:06	85	bob.hs
183	39	f9e773bef9bdc903c8ea862e	done	ruby	rna-transcription	class DNA\n@@thymine='T'\n@@uracil='U'\n\n\tdef initialize(dna)\n\t \t@dna = dna\n  \tend\n\n\tdef to_rna\n\t\t@dna.gsub(@@thymine, @@uracil)\n\tend\n\nend	2014-06-29 10:20:59	\N	0	3	2014-06-23 12:08:32	2014-06-23 12:08:32	95	rna-transcription.rb
184	39	613ef9886556d22a3e7b2433	done	clojure	rna-transcription	(ns dna\n  (:require clojure.string))\n\n(defn to-rna\n  "Translates a DNA string to corresponding RNA."\n  [strand]\n  {:pre [(re-matches #"[ACGT]*" strand)]}\n  (clojure.string/replace strand \\T \\U))	2014-05-23 17:22:17	\N	0	2	2014-05-19 04:13:12	2014-05-19 04:13:12	96	rna-transcription.clj
162	37	f8d487c863ee5f5c9f6b5d08	pending	ruby	roman-numerals	class Integer\n  NUMERALS = ['I', 'V', 'X', 'L', 'C', 'D', 'M']\n  \n  def to_roman\n    digits = to_s.chars.map(&:to_i)\n    digits.reverse.each_with_index.map do |digit, place|\n      convert_digit(digit, *numerals_for_place(place))\n    end.reverse.join\n  end\n\n  def numerals_for_place(place)\n    NUMERALS[2 * place, 3]\n  end\n\n  def convert_digit(digit, one, five = "", ten = "")\n    case digit\n    when 0\n      ""\n    when 1..3\n      one * digit\n    when 4\n      one + five\n    when 5..8\n      five + one * (digit - 5)\n    when 9\n      one + ten\n    end\n  end\nend	\N	\N	0	1	2014-01-05 09:55:09	2014-01-05 09:55:09	86	roman.rb
163	39	585c90ddc743dbc1dd0b54fd	done	ruby	bob	class Bob  \n  def hey(arg)\n    result = 'Whatever.'\n    if arg[-1] == '?'\n      result = 'Sure.'\n    end\n    if !arg.index(/[A-Z]/).nil? && arg.upcase == arg\n      result = 'Woah, chill out!'\n    end\n    if arg !~ /[^[:space:]]/\n      result = 'Fine. Be that way!'\n    end\n    return result\n  end  \nend	2014-06-07 23:54:03	\N	0	1	2014-05-29 15:17:57	2014-05-29 15:17:57	87	bob.rb
164	39	2660ecf5a996d418b92c03b1	done	ruby	gigasecond	class Gigasecond\n  def initialize(date)\n    @date = date\n    @gigasec_in_days = 1_000_000_000 / 60 / 60 / 24\n  end\n\n  def date\n    @date + @gigasec_in_days\n  end\nend	2014-07-22 09:53:31	\N	0	1	2014-07-11 15:21:55	2014-07-11 15:21:55	88	gigasecond.rb
165	39	81420de5ed80a88fb628ea9f	done	ruby	difference-of-squares	class Squares\n\tdef initialize(num)\n\t\t@num = num\n\t\t@sum_of_square = 0\n\t\t@square_of_sum = 0\n\tend\n\tdef sum_of_squares\n\t\t(0..@num).each do |n|\n\t\t\t@sum_of_square += (n**2) \n\t\tend\n\t\t@sum_of_square\n\tend\n\tdef square_of_sums\n\t\t(0..@num).each do |n|\n\t\t\t@square_of_sum += n\n\t\tend\n\t\t@square_of_sum = @square_of_sum**2\n\tend\n\tdef difference\n\t\tself.sum_of_squares\n\t\tself.square_of_sums\n\t\t@square_of_sum - @sum_of_square\n\tend\nend	2014-05-31 20:10:54	\N	0	1	2014-05-24 12:51:25	2014-05-24 12:51:25	89	squares.rb
166	39	75059c7204425777cfe078e3	superseded	coffeescript	bob	class Bob\n    hey: (text) ->\n        # Check to see if you are being silent\n        if text.trim() == ""\n            return "Fine. Be that way!"\n\n        # Check if you are shouting\n        else if text == text.toUpperCase()\n            return "Woah, chill out!"\n\n        # Check if you are asking a question\n        else if text.split("")[text.length - 1] == "?"\n            return "Sure."\n\n        # Check if you are talking forcefully\n        else if text.split("")[text.length - 1] == "!"\n            return "Whatever."\n        \n        # If all else fails, just say whatever\n        return "Whatever."\n\nmodule.exports = Bob	\N	\N	0	1	2014-06-01 14:34:35	2014-06-01 14:34:35	90	bob.coffee
167	39	82c270c19603cf55b7417f13	done	coffeescript	bob	class Bob\n    hey: (text) ->\n        # Check to see if you are being silent\n        if text.trim() == ""\n            return "Fine. Be that way!"\n\n        # Check if you are shouting\n        else if text == text.toUpperCase()\n            return "Woah, chill out!"\n\n        # Check if you are asking a question\n        else if text.slice(-1) == "?"\n            return "Sure."\n\n        # Check if you are talking forcefully\n        else if text.slice(-1) == "!"\n            return "Whatever."\n        \n        # If all else fails, just say whatever\n        return "Whatever."\n\nmodule.exports = Bob	2014-06-07 10:49:25	\N	0	2	2014-06-06 07:18:50	2014-06-06 07:18:50	90	bob.coffee
168	39	93ea2e314c827b82476793e4	done	go	etl	package etl\n\nimport ("strings")\n\nfunc Transform(given map[int][]string) map[string]int {\n\tcount :=0\n    score := map[string]int{\n\t\t\t"a": 1, "e": 1, "i": 1, "o": 1, "u": 1, "l": 1, "n": 1, "r": 1, "s": 1, "t": 1,\n\t\t\t"d": 2, "g": 2,\n\t\t\t"b": 3, "c": 3, "m": 3, "p": 3,\n\t\t\t"f": 4, "h": 4, "v": 4, "w": 4, "y": 4,\n\t\t\t"k": 5,\n\t\t\t"j": 8, "x": 8,\n\t\t\t"q": 10, "z": 10,\n\t\t}\n    \n    for i:=range given {\n         count = count + len(given[i])\n    }\n\t\n    result := make(map[string]int,count)\n    \n    for index := range given {\n        for key := range given[index] {\n            result[strings.ToLower(given[index][key])] = score[strings.ToLower(given[index][key])]\n        }\n    }    \n    \n    return result\n}	2014-06-28 09:39:35	\N	0	1	2014-06-24 06:05:17	2014-06-24 06:05:17	91	etl.go
169	39	5154677142d516123d8b057c	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char\nimport Control.Applicative\n\nresponseFor :: String -> String\nresponseFor s\n  | onlySpaces s = "Fine. Be that way!"\n  | onlyUppers s = "Woah, chill out!"\n  | isQuestion s = "Sure."\n  | otherwise    = "Whatever."\n\n\nonlySpaces :: String -> Bool\nonlySpaces = ("" ==) . dropWhile isSpace\n\nonlyUppers :: String -> Bool\nonlyUppers =\n        let isUpperString = liftA2 (==) (map toUpper) id\n            isAlphanumericString = any isAlpha\n        in  liftA2 (&&) isUpperString isAlphanumericString\n\nisQuestion :: String -> Bool\nisQuestion = ('?' ==) . last	\N	\N	0	1	2014-06-23 03:49:31	2014-06-23 03:49:31	92	bob.hs
170	39	5c52ac20f2306550dec9ad96	pending	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char\nimport Control.Applicative\n\nresponseFor :: String -> String\nresponseFor s\n  | onlySpaces s = "Fine. Be that way!"\n  | onlyUppers s = "Woah, chill out!"\n  | isQuestion s = "Sure."\n  | otherwise    = "Whatever."\n\n\nonlySpaces :: String -> Bool\nonlySpaces = all isSpace\n\nonlyUppers :: String -> Bool\nonlyUppers =\n        let isUpperString = not . (any isLower)\n            hasLetters = any isAlpha\n        in  liftA2 (&&) isUpperString hasLetters\n\nisQuestion :: String -> Bool\nisQuestion = ('?' ==) . last	\N	\N	0	2	2014-06-27 12:54:18	2014-06-27 12:54:18	92	bob.hs
171	39	799e0e225d455f188c49e819	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char\nimport qualified Data.ByteString.Char8 as C\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor string = filter (\\s -> (sortedByteString s == sortedByteString string) && (s /= string)) where\n                        sortedByteString = C.sort . C.pack . map toLower	\N	\N	0	1	2014-05-24 05:11:49	2014-05-24 05:11:49	93	Anagram.hs
172	39	656d8ccd7ea6f6196de405b3	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char\nimport Data.Function\nimport qualified Data.List as List\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor string = filter (\\s -> compareAnagram s string && (s /= string)) where\n                        compareAnagram = (==) `on` sortedString\n                        sortedString = List.sort . map toLower	\N	\N	0	2	2014-05-24 22:04:13	2014-05-24 22:04:13	93	Anagram.hs
173	39	ae787bee03eadea155ac400a	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char\nimport Data.Function\nimport qualified Data.List as List\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor string = filter (\\s -> compareAnagram s string && notDuplicate s string) where\n                        notDuplicate s' string' = s' /= string'\n                        compareAnagram = (==) `on` sortedString\n                        sortedString = List.sort . map toLower	\N	\N	0	3	2014-06-17 12:25:39	2014-06-17 12:25:39	93	Anagram.hs
174	39	060f7ddad5a641721df821c3	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char\nimport Data.Function\nimport qualified Data.List as List\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor string = filter compareAnagram . filter notDuplicate  where\n                        notDuplicate = (/=) string\n                        compareAnagram = ((==) `on` sortedString) string\n                        sortedString = List.sort . map toLower	\N	\N	0	4	2014-06-29 19:12:40	2014-06-29 19:12:40	93	Anagram.hs
175	39	b71ff400b787280d942b698c	superseded	haskell	anagram	module Anagram (anagramsFor)\n  where\n\nimport Data.Char\nimport Data.Function\nimport qualified Data.List as List\n\nsanitizeInput :: String -> String\nsanitizeInput = map toLower\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor string = filter compareAnagram . filter notDuplicate\n  where notDuplicate = ((/=) . sanitizeInput) string\n        compareAnagram = ((==) `on` List.sort . sanitizeInput) string	\N	\N	0	5	2014-07-01 18:59:09	2014-07-01 18:59:09	93	Anagram.hs
176	39	4f3217eadcaa4178bad39aba	superseded	haskell	anagram	module Anagram (anagramsFor)\n  where\n\nimport Data.Char\nimport Data.Function\nimport qualified Data.List as List\n\nsanitizeInput :: String -> String\nsanitizeInput s = s `seq` map toLower s\n\nsortInput :: String -> String\nsortInput s =  s `seq` (List.sort . sanitizeInput) s\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor string = filter compareAnagram . filter notDuplicate\n  where notDuplicate = ((/=) . sanitizeInput) string\n        compareAnagram = ((==) `on` sortInput) string	\N	\N	0	6	2014-07-02 20:53:49	2014-07-02 20:53:49	93	Anagram.hs
177	39	d8feedc39858d32f1b13e13a	done	haskell	anagram	module Anagram (anagramsFor)\n  where\n\nimport Data.Char\nimport Data.Function\nimport qualified Data.List as List\n\nsanitizeInput :: String -> String\nsanitizeInput = map toLower\n\nsortInput :: String -> String\nsortInput = List.sort . sanitizeInput\n\nnotDuplicate :: String -> String -> Bool\nnotDuplicate = (/=) . sanitizeInput\n\ncompareAnagram :: String -> String -> Bool\ncompareAnagram = (==) `on` sortInput\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor string = filter (notDuplicate normalizedString) . filter (compareAnagram sortedString)\n    where normalizedString = sanitizeInput string\n          sortedString = sortInput string	2014-07-14 00:20:41	\N	0	8	2014-07-04 20:59:25	2014-07-04 20:59:25	93	Anagram.hs
178	39	898c786d4f36a7d1ea09e3a2	superseded	haskell	anagram	module Anagram (anagramsFor)\n  where\n\nimport Data.Char\nimport Data.Function\nimport qualified Data.List as List\n\nsanitizeInput :: String -> String\nsanitizeInput = map toLower\n\nsortInput :: String -> String\nsortInput = List.sort . sanitizeInput\n\nnotDuplicate :: String -> String -> Bool\nnotDuplicate = (/=) . sanitizeInput\n\ncompareAnagram :: String -> String -> Bool\ncompareAnagram = (==) `on` sortInput\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor string =\n    let normalizedString = sanitizeInput string\n        sortedString = sortInput string\n    in  filter (notDuplicate normalizedString) . filter (compareAnagram sortedString)	\N	\N	0	7	2014-07-06 17:51:58	2014-07-06 17:51:58	93	Anagram.hs
179	39	7636009e5f8c803cd9f8ef76	superseded	haskell	grade-school	module School\n(School, add, empty, grade, sorted)\nwhere\n\nimport qualified Data.Map.Strict as M\nimport qualified Data.Set as S\nimport Data.List (sort)\n\ntype Student = String\ntype Roster = [Student]\ntype Grade = Int\n\ntype School = M.Map Grade (S.Set Student)\n\nempty :: School\nempty = M.empty\n\nadd :: Grade -> Student -> School -> School\nadd g s = M.insertWith S.union g (S.singleton s)\n\ngrade :: Grade -> School -> Roster\ngrade g = sort . S.toList . M.findWithDefault S.empty g\n\nsorted :: School -> [(Grade, Roster)]\nsorted = map flatten . M.assocs\n    where \n        flatten (g, c) = (g, sort $ S.toList c)	\N	\N	0	1	2014-06-26 12:24:00	2014-06-26 12:24:00	94	School.hs
180	39	854bc0e4c64e1488ecbe4430	done	haskell	grade-school	module School\n(School, add, empty, grade, sorted)\nwhere\n\nimport qualified Data.Map.Strict as M\nimport qualified Data.Set as S\nimport Control.Arrow (second)\n\ntype Student = String\ntype Roster = [Student]\ntype Grade = Int\n\ntype School = M.Map Grade (S.Set Student)\n\nempty :: School\nempty = M.empty\n\nadd :: Grade -> Student -> School -> School\nadd g s = M.insertWith S.union g (S.singleton s)\n\ngrade :: Grade -> School -> Roster\ngrade g = S.toAscList . M.findWithDefault S.empty g\n\nsorted :: School -> [(Grade, Roster)]\nsorted = map (second S.toAscList) . M.toAscList	2014-07-20 15:14:30	\N	0	2	2014-07-14 14:04:11	2014-07-14 14:04:11	94	School.hs
181	39	9b4134839c7d6680933a75c3	superseded	ruby	rna-transcription	class DNA\n@@thymine=/T/\n@@uracil='U'\n\n\tdef initialize(dna)\n\t \t@dna = dna\n  \tend\n\n\tdef to_rna\n\t\t@dna.gsub(@@thymine, @@uracil)\n\tend\n\nend	\N	\N	0	2	2014-05-28 00:17:32	2014-05-28 00:17:32	95	rna-transcription.rb
185	39	0010b874d3826b42a246a1fc	superseded	clojure	rna-transcription	(ns dna\n  (:require clojure.string))\n\n(defn to-rna\n  "Translates a DNA string to corresponding RNA."\n  [strand]\n  (assert (re-matches #"[ACGT]*" strand))\n  (clojure.string/replace strand \\T \\U))	\N	\N	0	1	2014-05-28 22:35:34	2014-05-28 22:35:34	96	rna-transcription.clj
186	39	61b585fe0c9caecda8f9d467	superseded	ruby	leap	require "bigdecimal"\n\nclass Year < BigDecimal\n  def leap?\n    divisible_by? 4 and\n      not divisible_by? 100 or\n      divisible_by? 400\n  end\n\n  def divisible_by? divisor\n    self % divisor == 0\n  end\nend	\N	\N	0	4	2014-05-17 06:51:44	2014-05-17 06:51:44	97	year.rb
187	39	aab271dbee7c68007208b00b	superseded	ruby	leap	class Year\n  def initialize number\n    @number = number\n  end\n\n  def leap?\n    divisible_by? 4 and\n      not divisible_by? 100 or\n      divisible_by? 400\n  end\n\n  def to_i\n    @number\n  end\n\n  private\n\n  def divisible_by? divisor\n    self.to_i % divisor == 0\n  end\nend	\N	\N	0	5	2014-05-24 01:56:16	2014-05-24 01:56:16	97	year.rb
188	39	d8db9d8989f6b27f558dd520	superseded	ruby	leap	class Year < Struct.new(:to_i)\n  def leap?\n    means every(4).years except_on turn_of_the_century but_not every(4).centuries\n  end\n\n  private\n\n  def means lazy_expression\n    lazy_expression.call\n  end\n\n  def every divisor\n    lazy_divisibility_test self.to_i, divisor\n  end\n\n  def except_on lazy_expression\n    { except: lazy_expression }\n  end\n\n  def turn_of_the_century *args\n    every(1).century *args\n  end\n\n  alias :but_not :except_on\n\n  class DivisibilityTest < Struct.new(:dividend, :divisor_in_units) ; end\n\n  def lazy_divisibility_test dividend, divisor\n    DivisibilityTest.new(dividend, divisor)\n  end\n\n  class LazyUnless ; end\n\n  class DivisibilityTest\n    def years *args\n      predicate 1, *args\n    end\n\n    def centuries *args\n      predicate 100, *args\n    end\n\n    alias :century :centuries\n\n    def predicate unit, *args\n      LazyUnless.new -> { dividend % (divisor_in_units * unit) == 0 }, *args\n    end\n  end\n\n  class LazyUnless\n    def initialize common_case, except: -> { false }\n      @common_case = common_case\n      @exceptional_case = except\n    end\n\n    def call\n      @common_case.call && !@exceptional_case.call\n    end\n  end\n\nend	\N	\N	0	10	2014-05-28 04:12:01	2014-05-28 04:12:01	97	year.rb
189	39	b1805d75c9691adb7d00af39	superseded	ruby	leap	class Year < Struct.new(:number)\n  def leap?\n    means every(4).years except_on:\n      turn_of_the_century(but_not: every(4).centuries)\n  end\n\n  private\n\n  module DSL\n    def never\n      -> { false }\n    end\n  end\n\n  include DSL\n\n  class DivisibilityTest < Struct.new(:dividend, :divisor) ; end\n\n  def every amount\n    DivisibilityTest.new(number, amount)\n  end\n\n  def turn_of_the_century but_not: never\n    every(1).century except_on: but_not\n  end\n\n  def means predicate\n    predicate.call\n  end\n\n  class DivisibilityTest\n    include Year::DSL\n\n    def years except_on: never\n      divisible_by? divisor, exception: except_on\n    end\n\n    def centuries except_on: never\n      divisible_by? divisor*100, exception: except_on\n    end\n\n    def divisible_by? actual_divisor, exception: never\n      -> { dividend % actual_divisor == 0 && !exception.call }\n    end\n\n    alias :century :centuries\n  end\nend	\N	\N	0	8	2014-06-07 14:09:48	2014-06-07 14:09:48	97	year.rb
190	39	a6abd54b466423da7db37721	superseded	ruby	leap	class Year\n  def initialize number\n    @number = number\n  end\n\n  # DON'T TRY THIS AT HOME\n  def leap?\n    means every(4).years except_on: turn_of_the_century(but_not: every(4).centuries)\n  end\n\n  private\n\n  class DivisibilityTest < Struct.new(:dividend, :divisor) ; end\n\n  def every amount\n    DivisibilityTest.new(@number, amount)\n  end\n\n  def turn_of_the_century but_not: -> { false }\n    every(1).century except_on: but_not\n  end\n\n  def means predicate\n    predicate.call\n  end\n\n  class DivisibilityTest\n    def years except_on: -> { false }\n      divisible_by? divisor, exception: except_on\n    end\n\n    def centuries except_on: -> { false }\n      divisible_by? divisor*100, exception: except_on\n    end\n\n    def divisible_by? actual_divisor, exception: false\n      -> { !(dividend % actual_divisor != 0 || exception.call) }\n    end\n\n    alias :century :centuries\n  end\nend	\N	\N	0	6	2014-06-14 12:56:25	2014-06-14 12:56:25	97	year.rb
191	39	ea3eb03a3c5b9e3b9821d7c5	superseded	ruby	leap	class Year\n  def initialize number\n    @number = number\n  end\n\n  # DON'T TRY THIS AT HOME\n  def leap?\n    means every(4).years except_on: turn_of_the_century(but_not: every(4).centuries)\n  end\n\n  private\n\n  module DSL\n    def never\n      -> { false }\n    end\n  end\n\n  include DSL\n\n  class DivisibilityTest < Struct.new(:dividend, :divisor) ; end\n\n  def every amount\n    DivisibilityTest.new(@number, amount)\n  end\n\n  def turn_of_the_century but_not: never\n    every(1).century except_on: but_not\n  end\n\n  def means predicate\n    predicate.call\n  end\n\n  class DivisibilityTest\n    include Year::DSL\n\n    def years except_on: never\n      divisible_by? divisor, exception: except_on\n    end\n\n    def centuries except_on: never\n      divisible_by? divisor*100, exception: except_on\n    end\n\n    def divisible_by? actual_divisor, exception: never\n      -> { dividend % actual_divisor == 0 && !exception.call }\n    end\n\n    alias :century :centuries\n  end\nend	\N	\N	0	7	2014-06-20 05:19:57	2014-06-20 05:19:57	97	year.rb
192	39	3aeff3e3c2e93a4ac8491fba	superseded	ruby	leap	class Year < Struct.new(:to_i)\n  def leap?\n    means every(4).years except_on turn_of_the_century but_not every(4).centuries\n  end\n\n  private\n\n  module DSL\n    def never\n      -> { false }\n    end\n\n    def except_on exception\n      { exception: exception }\n    end\n\n    alias :but_not :except_on\n  end\n\n  include DSL\n\n  class DivisibilityTest < Struct.new(:dividend, :divisor) ; end\n\n  def every amount\n    DivisibilityTest.new(self.to_i, amount)\n  end\n\n  def turn_of_the_century exception: never\n    every(1).century exception: exception\n  end\n\n  def means predicate\n    predicate.call\n  end\n\n  class DivisibilityTest\n    include Year::DSL\n\n    def years exception: never\n      divisible_by? divisor, exception: exception\n    end\n\n    def centuries exception: never\n      divisible_by? divisor*100, exception: exception\n    end\n\n    def divisible_by? actual_divisor, exception: never\n      -> { dividend % actual_divisor == 0 && !exception.call }\n    end\n\n    alias :century :centuries\n  end\nend	\N	\N	0	9	2014-07-01 13:29:07	2014-07-01 13:29:07	97	year.rb
193	39	6f532d5c79e673ec159c1ccf	superseded	ruby	leap	require "delegate"\n\nclass Year < Struct.new(:to_i)\n  def self.declare method, &block\n    define_method method do\n      YearLogicDSL.new(self).instance_eval(&block).call\n    end\n  end\n\n  declare :leap? do\n    every(4).years except_on turn_of_the_century but_not every(4).centuries\n  end\n\n  private\n\n  class DivisibilityTest < Struct.new(:dividend, :divisor_in_units)\n    def years *args\n      predicate 1, *args\n    end\n\n    def centuries *args\n      predicate 100, *args\n    end\n\n    alias :century :centuries\n\n    def predicate unit, *args\n      ButNot.new -> { dividend % (divisor_in_units * unit) == 0 }, *args\n    end\n  end\n\n  class YearLogicDSL < SimpleDelegator\n    include ButNot::Syntax\n\n    def every divisor\n      DivisibilityTest.new(self.to_i, divisor)\n    end\n\n    def turn_of_the_century *args\n      every(1).century *args\n    end\n\n    alias :except_on :but_not\n  end\nend\n\nBEGIN {\n  class ButNot\n    def initialize common_case, except: -> { false }\n      @common_case = common_case\n      @exceptional_case = except\n    end\n\n    def call\n      @common_case.call && !@exceptional_case.call\n    end\n\n    module Syntax\n      def but_not lazy_expression\n        { except: lazy_expression }\n      end\n    end\n  end\n}	\N	\N	0	11	2014-07-06 21:26:12	2014-07-06 21:26:12	97	year.rb
194	39	01ecd3234f6c10af013cc1a5	done	ruby	leap	require "delegate"\n\nclass Year < SimpleDelegator\n  def leap?\n    multiple_of?(4) and not multiple_of?(100) or multiple_of?(400)\n  end\n\n  private\n\n  def multiple_of? divisor\n    (self % divisor).zero?\n  end\nend	2014-07-18 03:09:26	\N	0	13	2014-07-08 23:16:13	2014-07-08 23:16:13	97	year.rb
195	39	feb6edf24543c45f9fecf8ec	superseded	ruby	leap	# Year::declare is defined at the bottom, I'm imagining it's functionality comes from\n# some library here.\nclass Year\n  declare :leap? do\n    every(4).years except_on turn_of_the_century but_not every(4).centuries\n  end\n\n  class DivisibilityTest < Struct.new(:dividend, :divisor_in_units)\n    def divisible?(*lazy_expression, unit:)\n      ButNot.new -> { dividend % (divisor_in_units * unit) == 0 }, *lazy_expression\n    end\n\n    def years *lazy_expression\n      divisible? *lazy_expression, unit: 1\n    end\n\n    def centuries *lazy_expression\n      divisible? *lazy_expression, unit: 100\n    end\n\n    alias :century :centuries\n  end\nend\n\nBEGIN {\n  require "delegate"\n\n  class ButNot\n    def initialize common_case, except: -> { false }\n      @common_case = common_case\n      @exceptional_case = except\n    end\n\n    def call\n      @common_case.call && !@exceptional_case.call\n    end\n\n    module Syntax\n      def but_not lazy_expression\n        { except: lazy_expression }\n      end\n    end\n  end\n\n  class Year < Struct.new(:to_i)\n    def self.declare method, &block\n      define_method method do\n        YearLogicDSL.new(self).instance_eval(&block).call\n      end\n    end\n\n    class YearLogicDSL < SimpleDelegator\n      include ButNot::Syntax\n\n      def every divisor\n        DivisibilityTest.new(self.to_i, divisor)\n      end\n\n      def turn_of_the_century *lazy_expression\n        every(1).century *lazy_expression\n      end\n\n      alias :except_on :but_not\n    end\n  end\n}	\N	\N	0	12	2014-07-11 15:23:34	2014-07-11 15:23:34	97	year.rb
196	39	2a1c37918e3d23930c451e0f	superseded	ruby	leap	class Year\n\n  attr_reader :number\n\n  def leap?\n    number.evenly_divisible_by? 4 and\n      number.not.evenly_divisible_by? 100 or\n      number.evenly_divisible_by? 400\n  end\n\n  def initialize number\n    @number = number\n  end\n\nend\n\nclass Integer\n\n  def evenly_divisible_by? divisor\n    self % divisor == 0\n  end\n\nend\n\nclass PredicateNegator\n\n  def initialize original_object\n    @original_object = original_object\n  end\n\n  def method_missing meth, *args, &block\n    not @original_object.send meth, *args, &block\n  end\n\nend\n\nclass Object\n\n  def not\n    PredicateNegator.new self\n  end\n\nend	\N	\N	0	1	2014-07-14 11:31:13	2014-07-14 11:31:13	97	year.rb
197	39	9691a79a56cb356f66c1dab3	superseded	ruby	leap	class Year\n  attr_reader :number\n\n  def initialize number\n    @number = number\n  end\n\n  def leap?\n    number.divisible_by? 4 and\n      number.not.divisible_by? 100 or\n      number.divisible_by? 400\n  end\nend\n\nclass Integer\n  def divisible_by? divisor\n    self % divisor == 0\n  end\nend\n\nclass Object\n  def not\n    PredicateNegator.new self\n  end\n\n  private\n\n  class PredicateNegator\n    def initialize original_object\n      @original_object = original_object\n    end\n\n    def method_missing method, *args, &block\n      not @original_object.send method, *args, &block\n    end\n\n    def respond_to? method\n      @original_object.respond_to? method\n    end\n  end\nend	\N	\N	0	3	2014-07-14 14:59:28	2014-07-14 14:59:28	97	year.rb
198	39	5eebd15a42b7095300ca02da	superseded	ruby	leap	class Year\n  attr_reader :number\n\n  def initialize number\n    @number = number\n  end\n\n  def leap?\n    number.divisible_by? 4 and\n      number.not.divisible_by? 100 or\n      number.divisible_by? 400\n  end\nend\n\nclass Integer\n  def divisible_by? divisor\n    self % divisor == 0\n  end\nend\n\nclass Object\n  def not\n    PredicateNegator.new self\n  end\n\n  private\n\n  class PredicateNegator\n    def initialize original_object\n      @original_object = original_object\n    end\n\n    def method_missing method, *args, &block\n      not @original_object.send method, *args, &block\n    end\n\n    def respond_to? method\n      method == :not or super\n    end\n  end\nend	\N	\N	0	2	2014-07-15 07:29:04	2014-07-15 07:29:04	97	year.rb
199	39	314e2861f6577d437572875e	done	javascript	word-count	function words(input) {\n\t\n\tinput = input.replace(/[^\\w\\s]|_/g,"").replace(/\\s+/g, " ").toLowerCase();\n\t\n\tvar wordsArray = input.split(' ');\n\tvar counts = new Object();\n\t\n\twordsArray.forEach(function(word) {\n\t\tvar regEx = new RegExp('\\\\b'+word+'\\\\b','g');\n\t\tvar result = input.match(regEx);\n\t\t\n\t\tif (result) {\n\t\t\tcounts[word] = result.length;\n\t\t}\n\t});\n\n\treturn counts;\n}\n\nmodule.exports = words;	2014-07-02 17:14:18	\N	0	1	2014-06-22 03:22:33	2014-06-22 03:22:33	98	word-count.js
200	39	6ee98503a9cd5a6ea4857822	done	ruby	nucleotide-count	class DNA\n  NUCLEOTIDES = %w[A T C G U].freeze\n  DNA_NUCLEOTIDES = %w[A T C G].freeze\n\n  def initialize sequence\n    @sequence = sequence\n  end\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.each.with_object({}) do |nucleotide, counts|\n      counts[nucleotide] = count nucleotide\n    end\n  end\n\n  def count nucleotide\n    raise ArgumentError, 'Not a valid nucleotide' unless nucleotide? nucleotide\n    @sequence.count nucleotide\n  end\n\n  private\n  def nucleotide? nucleotide\n    NUCLEOTIDES.include? nucleotide\n  end\nend	2014-06-12 11:35:12	\N	0	3	2014-06-04 21:39:09	2014-06-04 21:39:09	99	nucleotide-count.rb
201	39	ed38b64d21667c37ff8d0866	superseded	ruby	nucleotide-count	class DNA\n  NUCLEOTIDES = %w[A T C G U].freeze\n  DNA_NUCLEOTIDES = %w[A T C G].freeze\n\n  def initialize dna_sequence\n    @dna_sequence = dna_sequence\n  end\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.each.with_object({}) do |nucleotide, counts|\n      counts[nucleotide] = count nucleotide\n    end\n  end\n\n  def count nucleotide\n    if NUCLEOTIDES.include? nucleotide\n      @dna_sequence.count nucleotide\n    else\n      raise ArgumentError, 'Not a valid nucleotide'\n    end\n  end\nend	\N	\N	0	2	2014-06-12 23:07:33	2014-06-12 23:07:33	99	nucleotide-count.rb
240	47	0ded86df36f4676857f5e02f	pending	ruby	rna-transcription	class DNA\n\n  attr_reader :nucleotides\n\n  THYMINE = 'T'\n  URACIL = 'U'\n  \n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n  \n  def to_rna\n    nucleotides.gsub(THYMINE,URACIL)\n  end\nend	\N	\N	0	2	2014-04-23 06:02:06	2014-04-23 06:02:06	119	rna-transcription.rb
202	39	4e54d386531647c0a1fb019f	superseded	ruby	nucleotide-count	class DNA\n  NUCLEOTIDES = %w[A T C G U].freeze\n  DNA_NUCLEOTIDES = %w[A T C G].freeze\n\n  def initialize dna\n    @dna = dna\n  end\n\n  def count nucleotide\n    raise ArgumentError unless NUCLEOTIDES.include? nucleotide\n\n    @dna.count nucleotide\n  end\n\n  def nucleotide_counts\n    counts = Hash[DNA_NUCLEOTIDES.map { |n| [n, 0] }]\n\n    @dna.each_char.with_object(counts) do |nucleotide, counts|\n      counts[nucleotide] += 1\n    end\n  end\nend	\N	\N	0	1	2014-07-19 04:31:46	2014-07-19 04:31:46	99	nucleotide-count.rb
203	39	e46d61b795d86ce0eb39f57d	superseded	haskell	robot-simulator	module Robot (\n  Bearing(..)\n, Robot\n, mkRobot\n, coordinates\n, simulate\n, bearing\n, turnRight\n, turnLeft\n) where\n\nimport Data.List (foldl')\n\ndata Bearing = North\n             | East\n             | South\n             | West\n             deriving (Show, Eq, Enum)\n\ntype Position = (Int, Int)\n\ndata Robot = Robot !Bearing !Position\n             deriving (Show, Eq)\n\nmkRobot :: Bearing -> Position -> Robot\nmkRobot = Robot\n\ncoordinates :: Robot -> Position\ncoordinates (Robot _ p) = p\n\nbearing :: Robot -> Bearing\nbearing (Robot b _) = b\n\nsimulate :: Robot -> String -> Robot\nsimulate = foldl' action\n\naction :: Robot -> Char -> Robot\naction r cmd =\n  case cmd of\n    'R' -> mkRobot (turnRight b) c\n    'L' -> mkRobot (turnLeft b) c\n    'A' -> mkRobot b (move b c)\n    _   -> mkRobot b c\n  where b = bearing r\n        c = coordinates r\n        move North (x, y) = (x, y + 1)\n        move East  (x, y) = (x + 1, y)\n        move South (x, y) = (x, y - 1)\n        move West  (x, y) = (x - 1, y)\n\nturnRight :: Bearing -> Bearing\nturnRight West = North\nturnRight b = succ b\n\nturnLeft :: Bearing -> Bearing\nturnLeft North = West\nturnLeft b = pred b	\N	\N	0	3	2014-05-23 22:50:34	2014-05-23 22:50:34	100	Robot.hs
204	39	7b1d46596c1a765a4241d633	pending	haskell	robot-simulator	module Robot (\n  Bearing(..)\n, Robot\n, mkRobot\n, coordinates\n, simulate\n, bearing\n, turnRight\n, turnLeft\n) where\n\nimport Data.List (foldl')\n\ndata Bearing = North\n             | East\n             | South\n             | West\n             deriving (Show, Eq, Enum)\n\ntype Position = (Int, Int)\n\ndata Robot = Robot !Bearing !Int !Int\n             deriving (Show, Eq)\n\nmkRobot :: Bearing -> Position -> Robot\nmkRobot b (x, y) = Robot b x y\n\ncoordinates :: Robot -> Position\ncoordinates (Robot _ x y) = (x, y)\n\nbearing :: Robot -> Bearing\nbearing (Robot b _ _) = b\n\nsimulate :: Robot -> String -> Robot\nsimulate = foldl' action\n\naction :: Robot -> Char -> Robot\naction r cmd =\n  case cmd of\n    'R' -> mkRobot (turnRight b) c\n    'L' -> mkRobot (turnLeft b) c\n    'A' -> mkRobot b (move b c)\n    _   -> mkRobot b c\n  where b = bearing r\n        c = coordinates r\n        move North (x, y) = (x, y + 1)\n        move East  (x, y) = (x + 1, y)\n        move South (x, y) = (x, y - 1)\n        move West  (x, y) = (x - 1, y)\n\nturnRight :: Bearing -> Bearing\nturnRight West = North\nturnRight b = succ b\n\nturnLeft :: Bearing -> Bearing\nturnLeft North = West\nturnLeft b = pred b	\N	\N	0	4	2014-06-14 06:45:58	2014-06-14 06:45:58	100	Robot.hs
205	39	9b93b1a45878245fac4df6da	superseded	haskell	robot-simulator	module Robot (\n  Bearing(..)\n, Robot\n, mkRobot\n, coordinates\n, simulate\n, bearing\n, turnRight\n, turnLeft\n) where\n\nimport Data.List (foldl')\n\ndata Bearing = North\n             | East\n             | South\n             | West\n             deriving (Show, Eq, Enum)\n\ntype Position = (Int, Int)\ntype Robot = (Bearing, Position)\n\nmkRobot :: Bearing -> Position -> Robot\nmkRobot = (,)\n\ncoordinates :: Robot -> Position\ncoordinates = snd\n\nbearing :: Robot -> Bearing\nbearing = fst\n\nsimulate :: Robot -> String -> Robot\nsimulate = foldl' action\n  where action (b, p) 'R' = (turnRight b, p)\n        action (b, p) 'L' = (turnLeft b, p)\n        action (b, p) 'A' = (b, move b p)\n        action r _        = r\n        move North (x, y) = (x, y + 1)\n        move East  (x, y) = (x + 1, y)\n        move South (x, y) = (x, y - 1)\n        move West  (x, y) = (x - 1, y)\n\nturnRight :: Bearing -> Bearing\nturnRight West = North\nturnRight b = succ b\n\nturnLeft :: Bearing -> Bearing\nturnLeft North = West\nturnLeft b = pred b	\N	\N	0	1	2014-06-20 15:26:23	2014-06-20 15:26:23	100	Robot.hs
206	39	8f296328cd893c26249c2599	superseded	haskell	robot-simulator	module Robot (\n  Bearing(..)\n, Robot\n, mkRobot\n, coordinates\n, simulate\n, bearing\n, turnRight\n, turnLeft\n) where\n\nimport Data.List (foldl')\n\ndata Bearing = North\n             | East\n             | South\n             | West\n             deriving (Show, Eq, Enum)\n\ntype Position = (Int, Int)\ntype Robot = (Bearing, Position)\n\nmkRobot :: Bearing -> Position -> Robot\nmkRobot = (,)\n\ncoordinates :: Robot -> Position\ncoordinates = snd\n\nbearing :: Robot -> Bearing\nbearing = fst\n\nsimulate :: Robot -> String -> Robot\nsimulate = foldl' action\n\naction :: Robot -> Char -> Robot\naction r cmd =\n  case cmd of\n    'R' -> mkRobot (turnRight b) c\n    'L' -> mkRobot (turnLeft b) c\n    'A' -> mkRobot b (move b c)\n    _   -> mkRobot b c\n  where b = bearing r\n        c = coordinates r\n        move North (x, y) = (x, y + 1)\n        move East  (x, y) = (x + 1, y)\n        move South (x, y) = (x, y - 1)\n        move West  (x, y) = (x - 1, y)\n\nturnRight :: Bearing -> Bearing\nturnRight West = North\nturnRight b = succ b\n\nturnLeft :: Bearing -> Bearing\nturnLeft North = West\nturnLeft b = pred b	\N	\N	0	2	2014-06-27 08:46:59	2014-06-27 08:46:59	100	Robot.hs
207	39	a656e96ff39c309494850010	superseded	javascript	bob	var Bob = function(){\n    this.hey = function(noise){\n        var noise = new Noise(noise);\n\n        if (noise.silence()){\n            return "Fine. Be that way!";\n        }\n\n        if (noise.shouting()){\n            return "Woah, chill out!";\n        }\n\n        if (noise.question()) {\n            return "Sure.";\n        }\n\n        return "Whatever.";\n    }\n}\n\nvar Noise = function(noise){\n    var noise = noise;\n\n    this.shouting = function(){\n        return (noise.toUpperCase() == noise);\n    }\n\n    this.question = function(){\n        return (noise.slice(-1) == "?");\n    }\n\n    this.silence = function(){\n        return (noise.trim().length == 0);\n    }\n}\n\nmodule.exports = Bob;	\N	\N	0	2	2014-05-21 12:01:51	2014-05-21 12:01:51	101	bob.js
208	39	becbdafd5881ee16709cbbb1	done	javascript	bob	var Bob = function(){\n    this.hey = function(noise){\n        var noise = new Noise(noise);\n\n        if (noise.silence()){\n            return "Fine. Be that way!";\n        }\n\n        if (noise.shouting()){\n            return "Woah, chill out!";\n        }\n\n        if (noise.question()) {\n            return "Sure.";\n        }\n\n        return "Whatever.";\n    }\n};\n\nvar Noise = function(noise){\n    var noise = noise;\n\n    this.shouting = function(){\n        return (noise.toUpperCase() == noise);\n    }\n\n    this.question = function(){\n        return (noise.slice(-1) == "?");\n    }\n\n    this.silence = function(){\n        return (noise.trim() == false);\n    }\n}\n\nmodule.exports = Bob;	2014-05-29 11:29:31	\N	0	3	2014-05-24 01:46:35	2014-05-24 01:46:35	101	bob.js
209	39	a3873890cec5d17e41219766	superseded	javascript	bob	var Bob = function(){\n    this.hey = function(noise){\n        var noise = new Noise(noise);\n\n        if (noise.silence()){\n            return "Fine. Be that way!";\n        } else if (noise.shouting()){\n            return "Woah, chill out!";\n        } else if (noise.question()) {\n            return "Sure.";\n        } else {\n            return "Whatever.";\n        }\n    }\n}\n\nvar Noise = function(noise){\n    var noise = noise;\n\n    this.shouting = function(){\n        return (noise.toUpperCase() == noise);\n    }\n\n    this.question = function(){\n        return (noise.match(/\\?$/));\n    }\n\n    this.silence = function(){\n        return (noise.match(/^\\s*$/));\n    }\n}\n\nmodule.exports = Bob;	\N	\N	0	1	2014-05-24 18:52:48	2014-05-24 18:52:48	101	bob.js
210	39	129b816edaeacf476faaaf45	pending	clojure	bob	(ns bob\n   (:require  [clojure.string :as str]))\n\n(defn response-for\n  [request]\n  (cond\n    (empty? (str/trim request)) "Fine. Be that way!"\n    (and (= (str/upper-case request) request)\n         (not (= (str/lower-case request) request))) "Woah, chill out!"\n    (= (str (last request)) "?") "Sure."\n    :else "Whatever."))	\N	\N	0	1	2014-06-29 02:05:18	2014-06-29 02:05:18	102	bob.clj
211	39	d1010a9bf39fc884438765ff	superseded	elixir	bob	defmodule Words do\n\n  def count(words) do\n    words |> split_by_spec |> build_word_hash_dict\n  end\n\n  defp split_by_spec(words) do\n    # return words for now until next iteration\n    [words]\n  end\n\n  defp build_word_hash_dict([_]) do\n    # return exactly what spec want until general case is necessary\n    HashDict.new [{ "word", 1}]\n  end\n\nend	\N	\N	0	2	2014-05-23 04:13:03	2014-05-23 04:13:03	103	bob.exs
212	39	8ef00ec79a4fac1fb73521e7	superseded	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    "Whatever."\n  end\nend	\N	\N	0	1	2014-05-24 09:10:26	2014-05-24 09:10:26	103	bob.exs
213	39	9cd212f5161c90a7dcb752f1	superseded	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    "Whatever."\n  end\nend	\N	\N	0	3	2014-06-19 21:45:57	2014-06-19 21:45:57	103	bob.exs
214	39	207cdd1f558bf9c43189f318	superseded	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    cond do\n      Phrase.is_silent(phrase) -> "Fine. Be that way."\n      Phrase.is_shouting(phrase) -> "Woah, chill out!"\n      Phrase.is_asking(phrase) -> "Sure."\n      true -> "Whatever."\n    end\n  end\nend\n\ndefmodule Phrase do\n\n  def is_shouting(phrase) do\n    phrase == String.upcase(phrase)\n  end\n\n  def is_asking(words) do\n    String.ends_with? words, "?"\n  end\n\n  def is_silent(phrase) do\n    String.length(String.strip(phrase)) === 0\n  end\n\nend	\N	\N	0	4	2014-06-22 13:04:13	2014-06-22 13:04:13	103	bob.exs
215	39	12c8b6157a22fc910b5cdc55	pending	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    cond do\n      Phrase.is_silent(phrase) -> "Fine. Be that way."\n      Phrase.is_shouting(phrase) -> "Woah, chill out!"\n      Phrase.is_asking(phrase) -> "Sure."\n      true -> "Whatever."\n    end\n  end\nend\n\ndefmodule Phrase do\n\n  def is_shouting(phrase) do\n    phrase == String.upcase(phrase)\n  end\n\n  def is_asking(words) do\n    String.ends_with? words, "?"\n  end\n\n  def is_silent(phrase) do\n    (phrase |> String.strip |> String.length) === 0\n  end\n\nend	\N	\N	0	6	2014-07-03 10:56:13	2014-07-03 10:56:13	103	bob.exs
216	39	c6ef96cd3590fe91e3403bba	superseded	elixir	bob	defmodule Teenager do\n  def hey(phrase) do\n    cond do\n      Phrase.is_silent(phrase) -> "Fine. Be that way."\n      Phrase.is_shouting(phrase) -> "Woah, chill out!"\n      Phrase.is_asking(phrase) -> "Sure."\n      true -> "Whatever."\n    end\n  end\nend\n\ndefmodule Phrase do\n\n  def is_shouting(phrase) do\n    phrase == String.upcase(phrase)\n  end\n\n  def is_asking(words) do\n    String.ends_with? words, "?"\n  end\n\n  def is_silent(phrase) do\n    (phrase |> String.strip |> String.length) === 0\n  end\n\nend	\N	\N	0	5	2014-07-14 12:37:25	2014-07-14 12:37:25	103	bob.exs
217	39	6cc46911628e537e1eb9b8d4	pending	clojure	word-count	(ns phrase)\n\n(defn- increment-count-for-word [counts, word]\n  (assoc counts word (inc (get counts word 0))))\n\n(defn- words [phrase]\n  (re-seq #"\\w+" (.toLowerCase phrase)))\n\n(defn word-count [phrase]\n  (reduce increment-count-for-word (hash-map) (words phrase)))	\N	\N	0	1	2014-06-20 12:11:51	2014-06-20 12:11:51	104	word-count.clj
218	39	4e47ec201d81b3d073b7202d	done	ruby	raindrops	class Raindrops\n  def convert(n)\n    result = "#{pling(n)}#{plang(n)}#{plong(n)}"\n    return n.to_s if result == ''\n    result\n  end\n\n  private\n\n  def pling(n)\n    return 'Pling' if n % 3 == 0\n  end\n\n  def plang(n)\n    return 'Plang' if n % 5 == 0\n  end\n\n  def plong(n)\n    return 'Plong' if n % 7 == 0\n  end\nend	2014-05-19 23:52:29	\N	0	2	2014-05-19 19:24:38	2014-05-19 19:24:38	105	raindrops.rb
219	39	ab3a23d1ca4f5d5d41f0363c	superseded	ruby	raindrops	class Raindrops\n  def convert(n)\n    result = "#{pling(n)}#{plang(n)}#{plong(n)}"\n    return n.to_s if result == ''\n    result\n  end\n\n  private\n\n  def pling(n)\n    return 'Pling' if n % 3 == 0\n    ''\n  end\n\n  def plang(n)\n    return 'Plang' if n % 5 == 0\n    ''\n  end\n\n  def plong(n)\n    return 'Plong' if n % 7 == 0\n    ''\n  end\nend	\N	\N	0	1	2014-07-08 01:46:44	2014-07-08 01:46:44	105	raindrops.rb
220	39	ca01f5b1088ef82053bb8aa6	done	perl5	hamming	package Hamming;\n\nsub compute {\n    my $strn1 = [split //, shift];\n    my $strn2 = [split //, shift];\n    ($strn1, $strn2) = ($strn2, $strn1) if @$strn1 > @$strn2;\n    my $dist = 0;\n    for my $i (0 .. @$strn1 - 1) {\n        $dist++ if $strn1->[$i] ne $strn2->[$i];\n    }\n    return $dist;\n}\n\n1;	2014-07-04 01:58:06	\N	0	1	2014-07-02 12:22:28	2014-07-02 12:22:28	106	Hamming.pm
221	39	4fce76fe3f0842bfc0de075e	done	go	clock	package clock\n\nimport "fmt"\n\ntype Clock int\n\nfunc New(h, m int) Clock {\n\tc := Clock((h * 60) + m)\n\n\treturn c\n}\n\nfunc (c Clock) Add(amount int) Clock {\n\tc = (c + Clock(amount)) % 1440\n\n\t// if we are less that 0 we go back to next day\n\tif c < 0 {\n\t\tc = c + 1440\n\t}\n\n\treturn c\n}\n\nfunc (c Clock) String() string {\n\treturn fmt.Sprintf("%02d:%02d", c/60, c%60)\n}	2014-06-26 11:53:34	\N	0	1	2014-06-26 06:19:19	2014-06-26 06:19:19	107	clock.go
254	48	3427f5a89cf13d49ec37ca60	superseded	ruby	anagram	class Anagram\n  def initialize(string)\n    @sorted_anagram = normalized(string)\n  end\n\n  def match(list)\n    list.select {|x| normalized(x) == @sorted_anagram }\n  end\n\n  private\n  def normalized(string)\n    string.downcase.chars.sort\n  end\nend	\N	\N	0	3	2014-07-06 06:37:02	2014-07-06 06:37:02	126	anagram.rb
222	39	8103a3017d22b066274fa1c1	done	python	word-count	import re\nfrom collections import defaultdict\nget_words = re.compile("\\w+").findall\n\nclass Phrase(object):\n    def __init__(self, v):\n        self.words = [w.lower() for w in get_words(v)]\n\n    def word_count(self):\n        result = defaultdict(int)\n\n        for word in self.words:\n            result[word] += 1\n\n        return result	2014-07-08 08:18:22	\N	0	1	2014-07-02 05:05:58	2014-07-02 05:05:58	108	wordcount.py
223	39	7c65c51d1fdf8422f68665b3	done	haskell	prime-factors	module PrimeFactors (primeFactors) where\n\nprimeFactors :: Int -> [Int]\nprimeFactors n = primeFactors' n 2\n\nprimeFactors' 1 _ = []\nprimeFactors' n d\n    | (n `mod` d == 0) = d : primeFactors' (n `div` d) d\n    | d*d > n = [n]\n    | otherwise = primeFactors' n (d+1)	2014-07-01 04:25:20	\N	0	1	2014-06-26 07:16:50	2014-06-26 07:16:50	109	prime-factors.hs
224	39	30afc3541b052f6b7e6a4849	done	ruby	simple-linked-list	class Element\n  attr_reader :datum, :next\n\n  def initialize(datum, next_element)\n    @datum, @next = datum, next_element\n  end\n\n  def to_a\n    [datum].push *self.next.to_a\n  end\n\n\n  def reverse\n    self.class.create_multiple(to_a)\n  end\n\n  class << self\n    def to_a(element)\n      element.to_a\n    end\n\n    def from_a(list)\n      create_multiple(list.to_a.reverse)\n    end\n\n    def create_multiple(elements)\n      elements.inject(nil) do |head, datum| \n        new(datum, head)\n      end\n    end\n  end\nend	2014-06-07 00:27:42	\N	0	1	2014-06-01 13:17:28	2014-06-01 13:17:28	110	linked_list.rb
225	39	a9b544f88a6d0712127115e1	superseded	haskell	beer-song	module Beer(sing, verse) where\n\nimport Data.Char\n\nsing :: Integer -> Integer -> String\nsing x y = concatMap (++ "\\n") $ map verse (reverse [y..x])\n\nverse :: Integer -> String\nverse n =\n  let upperCount = if n == 0 then "No more" else show n\n      lowerCount = map toLower upperCount\n  in concat [\n    upperCount, bottles n, " of beer on the wall, ",\n    lowerCount, bottles n, " of beer.\\n",\n    drink n, remaining n]\n\nbottles :: Integer -> String\nbottles n = if n == 1 then " bottle" else " bottles"\n\ndrink :: Integer -> String\ndrink n =\n  if n == 0\n  then "Go to the store and buy some more, "\n  else concat [ "Take "\n              , if n == 1 then "it" else "one"\n              , " down and pass it around, "\n              ]\n\nremaining :: Integer -> String\nremaining n = concat [\n  case n of\n    0 -> "99"\n    1 -> "no more"\n    _ -> show (n-1)\n  , bottles (n-1)\n  , " of beer on the wall.\\n"]	\N	\N	0	1	2014-05-18 00:03:50	2014-05-18 00:03:50	111	Beer.hs
226	39	ff1176a5ab3b59d2ecff8aa5	superseded	haskell	beer-song	module Beer(sing, verse) where\n\nimport Data.Char\n\nsing :: Integer -> Integer -> String\nsing hi lo = concatMap (++ "\\n") $ map verse [hi, hi-1 .. lo]\n\nverse :: Integer -> String\nverse n =\n  concat\n  [ upperCount, bottles n, " of beer on the wall, "\n  , lowerCount, bottles n, " of beer.\\n"\n  , if n == 0\n    then "Go to the store and buy some more, "\n    else concat ["Take ", itOne, " down and pass it around, "]\n  , downCount, bottles (n-1), " of beer on the wall.\\n"\n  ]\n  where bottles c = if c == 1 then " bottle" else " bottles"\n        itOne = if n == 1 then "it" else "one"\n        upperCount = if n == 0 then "No more" else show n\n        lowerCount = map toLower upperCount\n        downCount = case n of\n          1 -> "no more"\n          0 -> "99"\n          _ -> show (n-1)	\N	\N	0	2	2014-05-20 11:46:17	2014-05-20 11:46:17	111	Beer.hs
227	39	bb7bb7b9083ac26adaf07e5e	superseded	haskell	beer-song	module Beer(sing, verse) where\n\nimport Data.Char\n\nsing :: Integer -> Integer -> String\nsing x y = unlines $ map verse (reverse [y..x])\n\nverse :: Integer -> String\nverse n =\n  concat\n  [ upperCount, bottles n, " of beer on the wall, "\n  , lowerCount, bottles n, " of beer.\\n"\n  , if n == 0\n    then "Go to the store and buy some more, "\n    else concat ["Take ", one, " down and pass it around, "]\n  , downCount, bottles (n-1), " of beer on the wall.\\n"\n  ]\n  where bottles c = if c == 1 then " bottle" else " bottles"\n        one = if n == 1 then "it" else "one"\n        upperCount = if n == 0 then "No more" else show n\n        lowerCount = map toLower upperCount\n        downCount = case n of\n          1 -> "no more"\n          0 -> "99"\n          _ -> show (n-1)	\N	\N	0	3	2014-06-16 03:35:08	2014-06-16 03:35:08	111	Beer.hs
228	39	e7eec8f4645b49a5702bf88a	done	haskell	beer-song	module Beer(sing, verse) where\n\nimport Data.Char\n\nsing :: Integer -> Integer -> String\nsing x y = unlines $ map verse [x,(x-1)..y]\n\nverse :: Integer -> String\nverse n =\n  concat\n  [ upperCount, bottles n, " of beer on the wall, "\n  , lowerCount, bottles n, " of beer.\\n"\n  , if n == 0\n    then "Go to the store and buy some more, "\n    else concat ["Take ", one, " down and pass it around, "]\n  , downCount, bottles (n-1), " of beer on the wall.\\n"\n  ]\n  where bottles c = if c == 1 then " bottle" else " bottles"\n        one = if n == 1 then "it" else "one"\n        upperCount = if n == 0 then "No more" else show n\n        lowerCount = map toLower upperCount\n        downCount = case n of\n          1 -> "no more"\n          0 -> "99"\n          _ -> show (n-1)	2014-06-25 07:42:08	\N	0	4	2014-06-22 19:12:43	2014-06-22 19:12:43	111	Beer.hs
229	39	719d49413cd94d83d4bbbbe6	superseded	go	hamming	package hamming\n\n// Returns the length of the shorter string.\nfunc minLen(a, b string) int {\n\tl := len(a)\n\tlb := len(b)\n\tif lb < l {\n\t\tl = lb\n\t}\n\treturn l\n}\n\n// Calculates Hamming distance between two DNA strands. The behaviour is undefined\n// when the parameters contain non-ASCII characters.\nfunc Distance(a, b string) int {\n\td := 0\n\tl := minLen(a, b)\n\tfor i := 0; i < l; i++ {\n\t\tif a[i] != b[i] {\n\t\t\td += 1\n\t\t}\n\t}\n\treturn d\n}	\N	\N	0	1	2014-05-20 20:37:25	2014-05-20 20:37:25	112	hamming.go
230	39	5bcf589ad733e574ba3bce18	done	go	hamming	package hamming\n\n// Calculates Hamming distance between two DNA strands. The behaviour is undefined\n// when the parameters contain non-ASCII characters.\nfunc Distance(a, b string) int {\n\td := 0\n\tfor i := 0; i < len(a) && i < len(b); i++ {\n\t\tif a[i] != b[i] {\n\t\t\td++\n\t\t}\n\t}\n\treturn d\n}	2014-06-18 05:28:37	\N	0	2	2014-06-11 10:37:09	2014-06-11 10:37:09	112	hamming.go
231	43	e987f9a49a7a5b846496964f	pending	clojure	rna-transcription	(ns dna\n  (:use [clojure.string :only [replace]])\n  )\n\n(defn to-rna [dna]\n  (replace dna "T" "U"))	\N	\N	0	1	2014-06-13 17:10:21	2014-06-13 17:10:21	113	rna-transcription.clj
232	45	c54541a43b929cb4b9287cdf	done	haskell	grade-school	module School (\n  Grade,\n  Student,\n  School,\n  add, \n  empty, \n  grade, \n  sorted) where\n\nimport qualified Data.Map.Lazy as M\nimport Data.List (sort)\n\ntype Grade      = Int\ntype Student    = String\ntype School     = M.Map Grade [Student]\n\nempty :: School\nempty = M.empty\n\nadd :: Grade -> Student -> School -> School\nadd g s b = M.insertWith (++) g [s] b\n\nmapSorted :: School -> School\nmapSorted = M.map sort\n\nsorted :: School -> [(Grade, [Student])]\nsorted = M.toList . mapSorted\n\ngrade :: Grade -> School -> [Student]\ngrade g = M.findWithDefault [] g . mapSorted	2014-05-11 20:23:29	\N	0	1	2014-05-08 13:14:17	2014-05-08 13:14:17	114	grade-school.hs
233	45	f5d9f5d07f81bbe90b5f9fed	pending	ruby	rna-transcription	class Complement\n  def self.of_dna(dna_strand)\n    rna_complement = ''\n    dna_strand.each_char do |nucleotide|\n      case nucleotide\n      when 'C'\n        rna_complement << 'G'\n      when 'G'\n        rna_complement << 'C'\n      when 'T'\n        rna_complement << 'A'\n      when 'A'\n        rna_complement << 'U'\n      end\n    end\n    rna_complement\n  end\n\n  def self.of_rna(rna, dna = '')\n    return dna if rna == ''\n    case rna.slice!(0)\n      when 'C'\n        dna << 'G'\n      when 'G'\n        dna << 'C'\n      when 'A'\n        dna << 'T'\n      when 'U'\n        dna << 'A'\n      end\n    self.of_rna(rna, dna)\n  end\nend	\N	\N	0	1	2014-06-24 16:12:57	2014-06-24 16:12:57	115	complement.rb
234	45	411d00f2610fa1a5ec06d172	superseded	ruby	triangle	class Triangle\n  def initialize(a,b,c)\n    @sides = [a , b, c].sort\n    raise TriangleError if @sides.any?{|side| side <= 0} || @sides[2] >= (@sides[0] + @sides[1])\n  end\n\n  def kind\n    number_of_unique_sides = @sides.uniq.size\n    case number_of_unique_sides\n    when 1 then :equilateral\n    when 2 then :isosceles\n    else :scalene\n    end\n  end\nend\n\nclass TriangleError < StandardError; end	\N	\N	0	2	2014-05-09 21:08:33	2014-05-09 21:08:33	116	triangle.rb
235	45	bd2c470b87ae496d9b895b04	done	ruby	triangle	class Triangle\n  def initialize(a,b,c)\n    @sides = [a , b, c].sort\n    raise TriangleError, 'Invalid side length. Should be positive.' if @sides.any?{|side| side <= 0}\n    raise TriangleError, 'Invalid combination of sides' if @sides[2] >= (@sides[0] + @sides[1])\n  end\n\n  def kind\n    number_of_unique_sides = @sides.uniq.size\n    case number_of_unique_sides\n    when 1 then :equilateral\n    when 2 then :isosceles\n    else :scalene\n    end\n  end\nend\n\nclass TriangleError < StandardError; end	2014-06-07 04:30:27	\N	0	3	2014-06-06 16:09:24	2014-06-06 16:09:24	116	triangle.rb
236	45	8fb1f74849eddee0a2178ba7	superseded	ruby	triangle	class Triangle\n  def initialize(a,b,c)\n    @sides = [a , b, c].sort\n    raise TriangleError if @sides.any?{|side| side <= 0} || @sides[2] >= (@sides[0] + @sides[1])\n  end\n\n  def kind\n    num_unique_sides = @sides.uniq.size\n    case num_unique_sides\n    when 1 then return :equilateral\n    when 2 then return :isosceles\n    else return :scalene\n    end\n  end\nend\n\nclass TriangleError < StandardError; end	\N	\N	0	1	2014-06-12 21:07:14	2014-06-12 21:07:14	116	triangle.rb
237	45	d5a251df4f19799ba66dde60	done	ruby	hamming	class Hamming\n  def self.compute(first_strand, second_strand)\n    length = [first_strand.size, second_strand.size].min\n    (0...length).reduce(0) do |error, n| \n      error += 1 if (first_strand[n] != second_strand[n])\n      error\n    end\n  end\nend	2014-05-04 06:29:39	\N	0	1	2014-04-26 04:20:25	2014-04-26 04:20:25	117	hamming.rb
238	45	b4e9109e36b3deb971829334	pending	javascript	word-count	var sanitizeString = function(words){\n  words = words.replace(/[:!&\\$%\\^@,]*/g, '');\n  words = words.replace(/[ ]+/g, ' ');\n  words = words.toLowerCase();\n  return words;\n};\n\nvar words = function(stringOfWords){\n  stringOfWords = sanitizeString(stringOfWords);\n  var wordCounts = {};\n  var words = stringOfWords.split(' ');\n  words.forEach(function(word){\n    if (typeof(wordCounts[word]) != 'number'){\n      wordCounts[word] = 0;\n    }\n    wordCounts[word] = wordCounts[word]+1;\n  });\n  return wordCounts;\n};\n\nmodule.exports = words;	\N	\N	0	1	2014-04-15 07:49:27	2014-04-15 07:49:27	118	word-count.js
239	47	6e7d61d573e84a884e31deea	superseded	ruby	rna-transcription	class DNA\n\n  attr_reader :nucleotides\n  \n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n  \n  def to_rna\n    nucleotides.gsub('T','U')\n  end\nend	\N	\N	0	1	2014-02-15 03:33:26	2014-02-15 03:33:26	119	rna-transcription.rb
241	47	1e3fbae9ef8f0703028045b2	pending	ruby	bob	class Bob\n\n\tdef initialize\n\t\t@silent = "Fine. Be that way!"\n      \t@anger = "Woah, chill out!"\n      \t@whatever = "Whatever."\n      \t@question = "Sure."\n    end\n\n\tdef hey(msg)\n\n\t\tif msg.gsub(/\\s+/, "").empty?\n\t\t\t@silent\n\t\telsif msg.upcase === msg && msg.match('.*[A-Z].*[A-Z].*')\n\t\t\t@anger\n\t\telsif msg.end_with?('?')\n\t\t\t@question \n\t\telse\n\t\t\t@whatever\n\t\tend\n\t\t\n\tend\n\nend	\N	\N	0	1	2014-05-06 07:28:05	2014-05-06 07:28:05	120	bob.rb
242	47	a78c590346093464a8be30c9	pending	go	etl	package etl\n\nimport "bytes"\n\nfunc Transform(input map[int][]string) map[string]int {\n\tret := make(map[string]int, len(input))\n\tfor point, values := range input {\n\t\tfor _, value := range values {\n\t\t\tv := string(bytes.ToLower([]byte(value)))\n\t\t\tret[v] = point\n\t\t}\n\t}\n\treturn ret\n}	\N	\N	0	1	2013-12-20 09:42:06	2013-12-20 09:42:06	121	etl.go
243	47	67601801da715de87febbfd8	done	ruby	grade-school	class School\n  attr_reader :db\n\n  def initialize\n    @db = Hash.new([])\n  end\n\n  def add(student, grade)\n    if db.has_key?(grade)\n      db[grade] << student\n    else\n      db[grade] = [student]\n    end\n  end\n\n  def grade(n)\n    db[n]\n  end\n\n  def sort\n    ordered_grades.reduce({}) do |sorted, grade|\n      sorted[grade] = grade(grade).sort\n      sorted\n    end\n  end\n\n  private\n\n  attr_reader :database\n\n  def ordered_grades\n    db.keys.sort\n  end\nend	2013-12-31 23:33:39	\N	0	2	2013-12-22 14:25:46	2013-12-22 14:25:46	122	grade-school.rb
244	47	23d356506f8c1fd95e04d55e	superseded	ruby	grade-school	class School\n\n  def initialize\n    @database = ListDatabase.new\n  end\n\n  def db\n    database.all_data\n  end\n\n  def add(student, grade)\n    database.add(grade, student)\n  end\n\n  def grade(n)\n    database.get(n)\n  end\n\n  def sort\n    ordered_grades.reduce({}) do |sorted, grade|\n      sorted[grade] = grade(grade).sort\n      sorted\n    end\n  end\n\n  private\n\n  attr_reader :database\n\n  def ordered_grades\n    database.ids.sort\n  end\n\n  class ListDatabase\n    attr_reader :store\n\n    def initialize\n      @store = Hash.new([])\n    end\n\n    def add(key, value)\n      if store.has_key?(key)\n        store[key] << value\n      else\n        store[key] = [value]\n      end\n    end\n\n    def get(key)\n      store[key]\n    end\n\n    def ids\n      store.keys\n    end\n\n    def all_data\n      store\n    end\n  end\nend	\N	\N	0	1	2013-12-30 08:59:42	2013-12-30 08:59:42	122	grade-school.rb
245	47	5e0108e48556d17b17024688	done	javascript	nucleotide-count	(function() {\n    'use strict';\n\n    var DNA = function(dnaString) {\n        this.nucleotideCounts = { A : 0, T : 0, C : 0, G : 0 };\n\n        if (dnaString && dnaString !== '') {\n            dnaString.match(/[ATCG]/g).forEach(function(nucleotide) {\n                this.nucleotideCounts[nucleotide] += 1;\n            }, this);\n        }\n    };\n    DNA.prototype.count = function(nucleotide) {\n        if (/[^ATCGU]/.test(nucleotide)) {\n            throw new Error('Invalid Nucleotide');\n        }\n        return this.nucleotideCounts[nucleotide] || 0;\n    };\n\n    module.exports = DNA;\n})();	2014-01-21 20:19:24	\N	0	1	2014-01-10 21:58:39	2014-01-10 21:58:39	123	nucleotide-count.js
246	47	3063387642ec76cad47df154	superseded	python	point-mutations	class DNA(object):\n\tdef __init__(self, strand):\n\t\tself.strand = strand\n\t\n\tdef hamming_distance(self, strand):\n\t\tham_dist = 0\n\t\tif self.strand == strand:\n\t\t\treturn ham_dist\n\t\tcheck = len(strand) if len(self.strand) > len(strand) else len(self.strand)\n\t\tfor i in range(check):\n\t\t\tif self.strand[i] != strand[i]:\n\t\t\t\tham_dist += 1\n\t\treturn ham_dist	\N	\N	0	1	2013-12-07 10:54:51	2013-12-07 10:54:51	124	point-mutations.py
247	47	af93e404d0e27b251905fd30	pending	python	point-mutations	class DNA(object):\n\tdef __init__(self, strand):\n\t\tself.strand = strand\n\t\n\tdef hamming_distance(self, strand):\n\t\treturn 0 if self.strand == strand else sum(n1 != n2 for n1, n2 in zip(self.strand, strand))	\N	\N	0	2	2014-03-26 22:38:25	2014-03-26 22:38:25	124	point-mutations.py
248	48	3be56c9c25eef167c223cccf	superseded	clojure	bob	(ns bob)\n\n(defn response-for [words]\n  (cond\n    (= words "") "Fine, be that way."\n    (= words (clojure.string/upper-case words)) "Woah, chill out!"\n    (= (+ (.lastIndexOf words "?") 1) (count words)) "Sure."\n    :else "Whatever."))	\N	\N	0	1	2014-04-12 08:58:24	2014-04-12 08:58:24	125	bob.clj
249	48	f1a6dc0155eadec5b0f3757a	pending	clojure	bob	(ns bob)\n\n(defn- silent? [words]\n  (clojure.string/blank? words))\n\n(defn- shouting? [words]\n  (= words (clojure.string/upper-case words)))\n\n(defn- question? [words]\n  (= (last words) \\?))\n\n(defn response-for [words]\n  (cond\n    (silent? words) "Fine. Be that way!"\n    (shouting? words) "Woah, chill out!"\n    (question? words) "Sure."\n    :else "Whatever."))	\N	\N	0	3	2014-05-26 15:28:15	2014-05-26 15:28:15	125	bob.clj
250	48	b2d4f1c50e94d6367b107040	superseded	clojure	bob	(ns bob)\n\n(defn- is-silent [words]\n  (clojure.string/blank? words))\n\n(defn- is-shouting [words]\n  (= words (clojure.string/upper-case words)))\n\n(defn- is-question [words]\n  (= (last words) \\?))\n\n(defn response-for [words]\n  (cond\n    (is-silent words) "Fine. Be that way!"\n    (is-shouting words) "Woah, chill out!"\n    (is-question words) "Sure."\n    :else "Whatever."))	\N	\N	0	2	2014-06-04 22:13:41	2014-06-04 22:13:41	125	bob.clj
251	48	ceffb4ed56d489b55791f800	superseded	ruby	anagram	class Anagram\n  def initialize(string)\n    @sorted_anagram = string.downcase.split('').sort\n  end\n\n  def match(list)\n    list.select {|x| x.downcase.split('').sort == @sorted_anagram }\n  end\nend	\N	\N	0	1	2014-04-10 01:26:42	2014-04-10 01:26:42	126	anagram.rb
252	48	9a182695a5b30b582f3810cb	superseded	ruby	anagram	class Anagram\n  def initialize(string)\n    @normalized_word = normalized(string)\n  end\n\n  def match(word_list)\n    word_list.select {|word| normalized(word) == @normalized_word }\n  end\n\n  private\n  def normalized(string)\n    string.downcase.chars.sort\n  end\nend	\N	\N	0	4	2014-05-13 01:00:14	2014-05-13 01:00:14	126	anagram.rb
253	48	961065d00cd2b1a1cd04a1a1	pending	ruby	anagram	class Anagram\n  def initialize(word)\n    @normalized_word = normalized(word)\n  end\n\n  def match(words)\n    word_list.select {|word| normalized(word) == @normalized_word }\n  end\n\n  private\n  def normalized(word)\n    word.downcase.chars.sort\n  end\nend	\N	\N	0	5	2014-06-12 11:48:06	2014-06-12 11:48:06	126	anagram.rb
255	48	bca74d1ea3e88e03371aa1ca	superseded	ruby	anagram	class Anagram\n  def initialize(string)\n    @sorted_anagram = string.normalize\n  end\n\n  def match(list)\n    list.select {|x| x.normalize == @sorted_anagram }\n  end\nend\n\nclass String\n  def normalize\n    self.downcase.split('').sort\n  end\nend	\N	\N	0	2	2014-07-17 06:12:48	2014-07-17 06:12:48	126	anagram.rb
256	48	f8f02a7b52ca49541e03165e	superseded	ruby	bob	class Bob\n  def hey(input)\n    RESPONSES.find {|k,v| send(k, input) }.last\n  end\n\n  private\n\n  RESPONSES = {\n    :shouting? => "Woah, chill out!",\n    :question? => "Sure.",\n    :silence?  => "Fine. Be that way!",\n    :default   => "Whatever."\n  }\n\n  def shouting?(input)\n    letters = letters_only(input)\n    letters.any? && (letters == letters.map(&:upcase))\n  end\n\n  def letters_only(input)\n    input.scan(/[a-zA-Z]/)\n  end\n\n  def question?(input)\n    input.chars.last == "?"\n  end\n\n  def silence?(input)\n    input.empty? || input.gsub(/\\s/,'').empty?\n  end\n\n  def default(*)\n    true\n  end\nend	\N	\N	0	1	2014-03-28 11:12:32	2014-03-28 11:12:32	127	bob.rb
257	48	d95e636612d7a6f629aa2d17	pending	ruby	bob	class Bob\n  def hey(input)\n    RESPONSES.find {|k,v| send(k, input) }.last\n  end\n\n  private\n\n  RESPONSES = {\n    :shouting? => "Woah, chill out!",\n    :question? => "Sure.",\n    :silence?  => "Fine. Be that way!",\n    :default   => "Whatever."\n  }\n\n  def shouting?(input)\n    letters = letters_only(input)\n    letters.any? && (letters == letters.map(&:upcase))\n  end\n\n  def letters_only(input)\n    input.scan(/[a-zA-Z]/)\n  end\n\n  def question?(input)\n    input.chars.last == "?"\n  end\n\n  def silence?(input)\n    input.strip.empty?\n  end\n\n  def default(*)\n    true\n  end\nend	\N	\N	0	2	2014-04-28 22:43:49	2014-04-28 22:43:49	127	bob.rb
258	48	fcbab54a67976e8407ed47c3	pending	python	rna-transcription	class DNA:\n\n    def __init__(self, dna):\n        self.dna = dna\n\n    def to_rna(self):\n        return self.dna.replace("T", "U")	\N	\N	0	1	2014-06-20 08:27:42	2014-06-20 08:27:42	128	rna-transcription.py
259	48	c4549256bc38c7f1467bdc4c	pending	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    return false if !divisible_by(4)\n    return false if divisible_by(100) && !divisible_by(400)\n    return true\n  end\n\n  def divisible_by(num)\n    @year % num == 0\n  end\nend	\N	\N	0	1	2014-04-22 21:05:28	2014-04-22 21:05:28	129	leap.rb
260	25	b08c0727d29004921b0005db	pending	ruby	phone-number	class PhoneNumber\r\n\tattr_reader :number\r\n\tdef initialize(number)\r\n\t\t@number = clean_number number\r\n\tend\r\n\r\n\tdef area_code\r\n\t\t@number.chars.take(3).join\r\n\tend\r\n\r\n\tdef to_s\r\n\t\t"(#{area_code}) #{exchange}-#{extension}"\r\n\tend\r\n\r\n\tprivate\r\n\r\n\tdef exchange\r\n\t\t@number.chars.drop(3).take(3).join\r\n\tend\r\n\r\n\tdef extension\r\n\t\t@number.chars.drop(6).join\r\n\tend\r\n\r\n\tdef clean_number(number)\r\n\t\ttemp = number.gsub(/[^0-9]/, "")\r\n\t\tif temp.length == 11\r\n\t\t\tif temp.chars[0] == "1"\r\n\t\t\t\ttemp = temp.chars.drop(1).join\r\n\t\t\telse\r\n\t\t\t\ttemp = "0000000000"\r\n\t\t\tend\r\n\t\telsif temp.length == 9\r\n\t\t\ttemp = "0000000000"\r\n\t\tend\r\n\t\ttemp\r\n\tend\r\nend	\N	\N	0	1	2013-12-25 13:10:47	2013-12-25 13:10:47	130	phone-number.rb
261	25	155d2dd7c59095c8e79dcd65	superseded	ruby	etl	class ETL\n\n  def self.transform(old_data)\n    ETL.new(old_data).transform\n  end\n\n  attr_reader :old_data, :new_data\n\n  def initialize(old_data)\n    @old_data = old_data.invert\n    @new_data = {}\n  end\n\n  def transform\n    old_data.keys.each do |key|\n      write_new_key(key)\n    end\n    new_data\n  end\n\n  def write_new_key(old_key)\n    old_key.each do |letter|\n      new_data[letter.downcase] = old_data[old_key]\n    end\n  end\nend	\N	\N	0	1	2014-03-03 12:47:39	2014-03-03 12:47:39	131	etl.rb
262	25	4e74692226e4804fdccf494f	pending	ruby	etl	class ETL\n  def self.transform(old_format)\n    old_format.each_with_object({}) do |(score, letters), new_format|\n      letters.each do |letter|\n        new_format[letter.downcase] = score\n      end\n    end\n  end\nend	\N	\N	0	2	2014-05-08 18:52:39	2014-05-08 18:52:39	131	etl.rb
263	25	34d00a56ce5aa986cc8fdb75	pending	ruby	scrabble-score	class Scrabble\n  def self.score(word)\n    new(word).score\n  end\n\n  def initialize(word)\n    @word = word.to_s.upcase\n  end\n\n  def score\n    letters.map(&method(:points)).inject(0, :+)\n  end\n\n  private\n\n  def letters\n    @word.chars\n  end\n\n  def points(letter)\n    case letter\n    when in_group("AEIOULNRST") then 1\n    when in_group("DG")         then 2\n    when in_group("BCMP")       then 3\n    when in_group("FHVWY")      then 4\n    when in_group("K")          then 5\n    when in_group("JX")         then 8\n    when in_group("QZ")         then 10\n    else 0\n    end\n  end\n\n  def in_group(letters)\n    letters.extend(ThreequalsInclude)\n  end\n\n  module ThreequalsInclude\n    def ===(other)\n      include?(other)\n    end\n  end\nend	\N	\N	0	5	2013-12-25 12:28:22	2013-12-25 12:28:22	132	scrabble-score.rb
264	25	6e8d6e8a6c4f8390cf1965a9	superseded	ruby	scrabble-score	class Scrabble\n  module ThreequalsInclude\n    def ===(other)\n      include?(other)\n    end\n  end\n\n  def self.score(word)\n    new(word).score\n  end\n\n  def initialize(word)\n    @word = word.to_s.upcase\n  end\n\n  def score\n    letters.map(&method(:points)).inject(0, :+)\n  end\n\n  private\n\n  def letters\n    @word.chars\n  end\n\n  def points(letter)\n    case letter\n    when in_group("AEIOULNRST") then 1\n    when in_group("DG")         then 2\n    when in_group("BCMP")       then 3\n    when in_group("FHVWY")      then 4\n    when in_group("K")          then 5\n    when in_group("JX")         then 8\n    when in_group("QZ")         then 10\n    else 0\n    end\n  end\n\n  def in_group(letters)\n    letters.tap { |group| group.extend ThreequalsInclude }\n  end\nend	\N	\N	0	4	2013-12-31 19:05:08	2013-12-31 19:05:08	132	scrabble-score.rb
265	25	6370b90128d6ea8c2adf250f	superseded	ruby	scrabble-score	class Scrabble\n  POINTS = {\n    [:other]                => 0,\n    %w[A E I O U L N R S T] => 1,\n    %w[D G]                 => 2,\n    %w[B C M P]             => 3,\n    %w[F H V W Y ]          => 4,\n    %w[K]                   => 5,\n    %w[J X]                 => 8,\n    %w[Q Z]                 => 10\n  }\n\n  def self.score(word)\n    new(word).score\n  end\n\n  def initialize(word)\n    @word = word.to_s.upcase\n  end\n\n  def score\n    letters.inject(0) { |total, letter| total + points(letter) }\n  end\n\n  private\n\n  def points(letter)\n    group = POINTS.keys.find { |group| group.include?(letter) } || [:other]\n    POINTS.fetch(group)\n  end\n\n  def letters\n    @word.chars.to_a\n  end\nend	\N	\N	0	1	2014-01-02 04:44:40	2014-01-02 04:44:40	132	scrabble-score.rb
266	25	56a1f15442aa600b6b79c4c2	superseded	ruby	scrabble-score	class Scrabble\n  POINTS = {\n    %w[A E I O U L N R S T] => 1,\n    %w[D G]                 => 2,\n    %w[B C M P]             => 3,\n    %w[F H V W Y]           => 4,\n    %w[K]                   => 5,\n    %w[J X]                 => 8,\n    %w[Q Z]                 => 10\n  }\n\n  def self.score(word)\n    new(word).score\n  end\n\n  def initialize(word)\n    @word = word.to_s.upcase\n  end\n\n  def score\n    letters.inject(0) { |total, letter| total + points(letter) }\n  end\n\n  private\n\n  def points(letter)\n    POINTS.each { |group, points| return points if group.include?(letter) }\n    return 0\n  end\n\n  def letters\n    @word.chars.to_a\n  end\nend	\N	\N	0	2	2014-03-23 14:25:21	2014-03-23 14:25:21	132	scrabble-score.rb
297	22	3a493ee744ff619318eead31	pending	coffeescript	trinary	class Trinary\n  constructor: (str) ->\n    @numbers = str.match(/[0-2]/g)\n  toDecimal: ->\n    if @numbers\n      binary = (number * Math.pow(3, i) for number, i in @numbers.reverse())\n      binary.reduce (sum, i) -> sum + i\n    else\n      0\n\nmodule.exports = Trinary	\N	\N	0	1	2014-05-08 08:35:16	2014-05-08 08:35:16	149	example.coffee
267	25	e0fa4414e33d32062f8f4072	superseded	ruby	scrabble-score	class Scrabble\n  def self.score(word)\n    new(word).score\n  end\n\n  def initialize(word)\n    @word = word.to_s.upcase\n  end\n\n  def score\n    letters.inject(0) { |total, letter| total + points(letter) }\n  end\n\n  private\n\n  def letters\n    @word.chars.to_a\n  end\n\n  def points(letter)\n    case letter\n    when group("AEIOULNRST") then 1\n    when group("DG")         then 2\n    when group("BCMP")       then 3\n    when group("FHVWY")      then 4\n    when group("K")          then 5\n    when group("JX")         then 8\n    when group("QZ")         then 10\n    else 0\n    end\n  end\n\n  def group(letters)\n    letters.dup.tap do |set|\n      set.define_singleton_method(:===) { |letter| include?(letter) }\n    end\n  end\nend	\N	\N	0	3	2014-06-07 04:18:20	2014-06-07 04:18:20	132	scrabble-score.rb
268	25	67b291f6108b40b744ac0387	pending	go	accumulate	package accumulate\n\nfunc Accumulate(inputs []string, converter func(string) string) []string {\n\tconverted := make([]string, 0, len(inputs))\n\tfor _, input := range inputs {\n\t\tconverted = append(converted, converter(input))\n\t}\n\treturn converted\n}	\N	\N	0	1	2014-04-08 21:36:51	2014-04-08 21:36:51	133	accumulate.go
269	25	dfd767a52a8b16bfa6053b93	pending	python	twelve-days	TWELVE_DAYS_SOURCE = 'twelve_days.txt'\nwith open(TWELVE_DAYS_SOURCE, 'r') as input_file:\n    TWELVE_DAYS_VERSES = input_file.read().split('\\n\\n')\n\ndef sing():\n\treturn verses(1, 12)\n\ndef verse(number):\n\treturn TWELVE_DAYS_VERSES[number - 1] + '\\n'\n\ndef verses(start, end):\n\treturn '\\n\\n'.join(TWELVE_DAYS_VERSES[start-1:end]) + '\\n\\n'	\N	\N	0	1	2014-01-18 14:36:01	2014-01-18 14:36:01	134	twelve_days.py
270	25	db0169c96fcd6a332904fd57	superseded	clojure	rna-transcription	(ns dna)\n\n(defn to-rna [sequence]\n  (clojure.string/replace sequence \\T \\U))	\N	\N	0	1	2014-02-21 08:50:22	2014-02-21 08:50:22	135	rna-transcription.clj
271	25	3557a412abf1e0c48ffef27c	pending	clojure	rna-transcription	(ns dna)\n\n(def thymine \\T)\n(def uracil  \\U)\n\n(defn to-rna [sequence]\n  (clojure.string/replace sequence thymine uracil))	\N	\N	0	2	2014-04-29 18:19:34	2014-04-29 18:19:34	135	rna-transcription.clj
272	6	c964764d04fe04c962689c2d	pending	javascript	pig-latin	module.exports.translate = function(input) {\n  return input.split(' ').map(function(word){\n    return word.replace(/^(s?qu|[^aeiou]+)?(.+)$/, '$2$1ay');\n  }).join(' ');\n}	\N	\N	0	1	2014-07-21 08:51:36	2014-07-21 08:51:36	136	pig-latin.js
273	6	0bc267c56ff0fd3b809df39c	superseded	python	grains	"""Calculate the number of grains of wheat on a chessboard.\n\nThe number of grains on each square doubles.\n"""\n\n\ndef on_square(nth):\n    """Return the number of grains on the n-th square."""\n    return 2 ** (nth - 1)\n\n\ndef total_after(nth):\n    """Return the total number of grains up to the n-th square."""\n    # 1 + 2 + (2 ** 2) + ... + (2 ** (n - 1)) = (2 ** n) - 1.\n    return (2 ** nth) - 1	\N	\N	0	1	2014-07-22 07:47:14	2014-07-22 07:47:14	137	grains.py
274	6	caa54a0374dbd12032853123	pending	python	grains	"""Calculate the number of grains of wheat on a chessboard.\n\nThe number of grains on each square doubles.\n"""\n\n\ndef on_square(nth):\n    """Return the number of grains on the n-th square."""\n    # 1 << (n - 1) = 2 ** (n - 1).\n    return 1 << (nth - 1)\n\n\ndef total_after(nth):\n    """Return the total number of grains up to the n-th square."""\n    # 1 + 2 + (2 ** 2) + ... + (2 ** (n - 1)) = (2 ** n) - 1 = (1 << n) - 1.\n    return (1 << nth) - 1	\N	\N	0	2	2014-07-22 07:51:55	2014-07-22 07:51:55	137	grains.py
275	22	32337d06990efbe50b189e45	pending	ruby	beer-song	class Song\n  attr_reader :current_verse, :max_verse\n\n  def initialize\n    fail NotImplementedError, 'Must use subclass and assign @max_verse'\n  end\n\n  def verse_format\n    fail NotImplementedError, 'Override this method.'\n  end\n\n  def index\n    current_verse - 1\n  end\n\n  def verse(num)\n    verse_string(num).map do |line|\n      @current_verse = num\n      method(line).call\n    end.join\n  end\n\n  def verses(from, to)\n    from = [0, from].max\n    to   = [to, max_verse].min\n\n    (to..from).each_with_object([]) do |num, lyrics|\n      lyrics << verse(num)\n    end.reverse.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses(max_verse, 0)\n  end\n\n  def verse_string(num)\n    verse_formats(num).split('/').map(&:to_sym)\n  end\nend\n\nclass BeerSong < Song\n  def initialize\n    @max_verse = 99\n  end\n\n  def verse_formats(num)\n    if num == 0\n      'line1/end_line'\n    else\n      'line1/take_one'\n    end\n  end\n\n  def line1\n    wall.gsub(/^n/, 'N') + how_many\n  end\n\n  def take_one\n    "Take #{current_verse == 1 ? 'it' : 'one'} down and pass it around, #{wall(".\\n", true)}"\n  end\n\n  def end_line\n    "Go to the store and buy some more, #{wall(".\\n", true)}"\n  end\n\n  def how_many(append = ".\\n", second_line = false)\n    number = second_line ? current_verse - 1 : current_verse\n    number = 99 if number < 0\n    number = 'no more' if number.zero?\n    bottle = number == 1 ? 'bottle' : 'bottles'\n    "#{number} #{bottle} of beer#{append}"\n  end\n\n  def wall(append = ', ', second_line = false)\n    how_many(" on the wall#{append}", second_line)\n  end\nend	\N	\N	0	1	2014-07-18 04:58:34	2014-07-18 04:58:34	138	beer_song.rb
276	22	050c861a2ef53f47f48f89b9	pending	haskell	parallel-letter-frequency	module Frequency ( frequency ) where\n\nimport qualified Control.Parallel.Strategies as S\nimport Data.Char ( isLetter, toLower )\nimport qualified Data.Map.Strict as M\nimport qualified Data.Text as T\n\nfrequency :: Int -> [T.Text] -> M.Map Char Int\nfrequency n = M.unionsWith (+)\n            . S.withStrategy (S.parBuffer n S.rdeepseq)\n            . map frequency'\n\nfrequency' :: T.Text -> M.Map Char Int\nfrequency' = T.foldl' f M.empty . T.filter isLetter\n  where f counts char = M.insertWith (+) (toLower char) 1 counts	\N	\N	0	1	2014-05-10 10:02:37	2014-05-10 10:02:37	139	Frequency.hs
277	22	bcdb6251742c756d66b43c56	pending	ruby	bob	class Bob\n  def hey(phrase)\n    return 'Fine. Be that way!' if is_silent?(phrase)\n    return 'Woah, chill out!'   if is_shouting?(phrase)\n    return 'Sure.'              if is_asking?(phrase)\n    'Whatever.'\n  end\n\n  def is_silent?(phrase)\n    phrase.strip.empty?\n  end\n\n  def is_shouting?(phrase)\n    phrase == phrase.upcase && phrase =~ /[A-Za-z]/\n  end\n\n  def is_asking?(phrase)\n    phrase.end_with?('?')\n  end\nend	\N	\N	0	2	2014-05-23 09:11:56	2014-05-23 09:11:56	140	bob.rb
278	22	a2d7d3110dcfeabae9177f6c	superseded	ruby	bob	class Bob\n  def hey(input)\n    return 'Fine. Be that way!' if input.strip.empty?\n    return 'Woah, chill out!'   if input == input.upcase && input =~ /[A-Za-z]/\n    return 'Sure.'              if input.end_with?('?')\n    'Whatever.'\n  end\nend	\N	\N	0	1	2014-06-09 12:23:36	2014-06-09 12:23:36	140	bob.rb
279	22	177da8cd68850efbc47a4e4d	superseded	clojure	bob	(ns bob)\r\n\r\n(defn- is-a-question? [s]\r\n  (= \\? (last (seq s))))\r\n\r\n(defn- is-silence? [s]\r\n  (every? #(= \\space %) (seq s)))\r\n\r\n(defn- is-a-shout? [s]\r\n  (and\r\n    (     some #(Character/isUpperCase %) (seq s)))\r\n    (not (some #(Character/isLowerCase %) (seq s))))\r\n\r\n(defn response-for [s]\r\n  (cond\r\n    (is-silence? s)    "Fine. Be that way!"\r\n    (is-a-shout? s)    "Woah, chill out!"\r\n    (is-a-question? s) "Sure."\r\n    :else              "Whatever."))\r\n\r	\N	\N	0	1	2014-05-22 01:11:36	2014-05-22 01:11:36	141	bob.clj
340	16	7099217d242bf3b42d70bfc3	pending	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    case\n    when year_is_divisible_by(400)\n      true\n    when year_is_divisible_by(100)\n      false\n    when year_is_divisible_by(4)\n      true\n    end\n  end\n\n  def year_is_divisible_by(factor)\n    @year % factor == 0\n  end\nend	\N	\N	0	1	2014-02-03 07:44:00	2014-02-03 07:44:00	172	year.rb
280	22	44dca8c3af1ea278b8f8b5ea	pending	clojure	bob	(ns bob)\n\n(defn- is-a-question? [s]\n  (= \\? (last (seq s))))\n\n(defn- is-silence? [s]\n  (every? #(= \\space %) (seq s)))\n\n(defn- is-a-shout? [s]\n  (and\n    (     some #(Character/isUpperCase %) (seq s)))\n    (not (some #(Character/isLowerCase %) (seq s))))\n\n(defn response-for [s]\n  (cond\n    (is-silence? s)    "Fine. Be that way!"\n    (is-a-shout? s)    "Woah, chill out!"\n    (is-a-question? s) "Sure."\n    :else              "Whatever."))	\N	\N	0	2	2014-07-16 21:15:43	2014-07-16 21:15:43	141	bob.clj
281	22	93b42a8934c8d106bb906efb	pending	ruby	grade-school	class School\n\nattr_accessor :db\n\n  def initialize\n    @db ||= Hash.new { |students, grade| students[grade] = [] }\n  end\n\n  def add(student, grade)\n    db[grade] << student\n  end\n\n  def grade(section)\n    db[section] || year\n  end\n\n  def sort\n    Hash[collected]\n  end\n\n  def collected\n    db.collect { |grade, students| [ grade, students.sort ] }.sort\n  end\n\nend	\N	\N	0	1	2014-06-23 02:19:10	2014-06-23 02:19:10	142	grade-school.rb
282	22	978012fe2ef0d7137f53ad63	pending	clojure	word-count	(ns phrase\n  [:require [clojure.string :refer [lower-case]]])\n\n(defn word-count [phrase]\n  """\n  A function to count word frequencies in a phrase\n  """\n  (let [words (re-seq #"\\w+" (lower-case phrase))]\n    (frequencies words)))	\N	\N	0	4	2014-05-20 09:30:30	2014-05-20 09:30:30	143	word-count.clj
283	22	c3c23436a97927d7e7a4861e	superseded	clojure	word-count	(ns phrase\n  [:require [clojure.string :refer [split lower-case]]])\n\n(defn word-count [phrase]\n  """\n  A function to count word frequencies in a phrase\n  """\n  (let [words (re-seq #"\\w+" phrase)\n        normalized (map lower-case words)]\n    (frequencies normalized)))	\N	\N	0	2	2014-06-01 08:37:26	2014-06-01 08:37:26	143	word-count.clj
284	22	d99e0761bdf401907e2ce4a4	superseded	clojure	word-count	(ns phrase\n  [:require [clojure.string :refer [split lower-case]]])\n\n(defn word-count [phrase]\n  """\n  A function to count word frequencies in a phrase\n  """\n  (let [words (split phrase #"[^\\w]+")\n        normalized (map lower-case words)]\n    (frequencies normalized)))	\N	\N	0	1	2014-06-20 23:49:40	2014-06-20 23:49:40	143	word-count.clj
285	22	5b4e9b7912b7ae3465ef73d5	superseded	clojure	word-count	(ns phrase\n  [:require [clojure.string :refer [lower-case]]])\n\n(defn word-count [phrase]\n  """\n  A function to count word frequencies in a phrase\n  """\n  (let [words (re-seq #"\\w+" phrase)\n        normalized (map lower-case words)]\n    (frequencies normalized)))	\N	\N	0	3	2014-07-16 15:23:39	2014-07-16 15:23:39	143	word-count.clj
286	22	684141ba4852bd8fdd5b6b0f	pending	python	house	"""This is the House that Jack Built"""\n\nfrom collections import namedtuple\n\n\nPhrase = namedtuple("Phrase", ["verb", "noun"])\n\nphrases = [\n    Phrase("lay in", "the house that Jack built"),\n    Phrase("ate", "the malt"),\n    Phrase("killed", "the rat"),\n    Phrase("worried", "the cat"),\n    Phrase("tossed", "the dog"),\n    Phrase("milked", "the cow with the crumpled horn"),\n    Phrase("kissed", "the maiden all forlorn"),\n    Phrase("married", "the man all tattered and torn"),\n    Phrase("woke", "the priest all shaven and shorn"),\n    Phrase("kept", "the rooster that crowed in the morn"),\n    Phrase("belonged to", "the farmer sowing his corn"),\n    Phrase(None, "the horse and the hound and the horn")\n]\n\n\ndef rhyme():\n    return "\\n\\n".join(stanza(i) for i in xrange(len(phrases)))\n\n\ndef stanza(nth):\n    lines = ["This is {}".format(phrases[nth].noun)]\n    lines.extend(\n        "that {} {}".format(phrases[i].verb, phrases[i].noun)\n        for i in xrange(nth - 1, -1, -1)\n    )\n    lines[-1] += "."\n    return "\\n".join(lines)	\N	\N	0	1	2014-04-30 02:43:43	2014-04-30 02:43:43	144	house.py
287	22	e7d7d93f126ed32a63d5059b	pending	elixir	leap	defmodule Year do\n\n  def leap_year?(year) when rem(year, 400) == 0, do: true\n  def leap_year?(year) when rem(year, 100) == 0, do: false\n  def leap_year?(year) when rem(year, 4) == 0,   do: true\n  def leap_year?(year), do: false\n\nend	\N	\N	0	1	2014-05-04 19:09:49	2014-05-04 19:09:49	145	leap.exs
288	22	8533458e3667b7132dcbb89a	superseded	ruby	hamming	class DNA\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(strand)\n    0.upto(strand_length).each_with_object([]) do |base, mutations| \n      mutations.push base if mutation_for strand, base \n    end.count\n  end\n\n  private\n\n  def mutation_for(strand, base)\n    strand[base] && strand[base] != @strand[base]\n  end\n\n  def strand_length\n    @strand.size - 1\n  end\nend	\N	\N	0	1	2014-06-21 12:14:57	2014-06-21 12:14:57	146	point-mutations.rb
289	22	b16e9ecf3e61fb411c058338	pending	ruby	hamming	class DNA\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(strand)\n    0.upto(strand_length).count { |base| mutated? strand, base }\n  end\n\n  private\n\n  def mutated?(strand, base)\n    strand[base] && strand[base] != @strand[base]\n  end\n\n  def strand_length\n    @strand.size - 1\n  end\nend	\N	\N	0	2	2014-07-14 07:35:51	2014-07-14 07:35:51	146	point-mutations.rb
290	22	1a998b766d9a3eab0dd88137	superseded	elixir	etl	defmodule ETL do\n  import String, only: [downcase: 1]\n  import Enum,   only: [map: 2, flat_map: 2]\n\n  def transform extract do\n    HashDict.new(flat_map extract, &do_transform/1)\n  end\n\n  defp do_transform { k, vs } do\n    map vs, fn v -> { downcase(v), k } end\n  end\nend	\N	\N	0	1	2014-06-01 17:48:45	2014-06-01 17:48:45	147	etl.exs
291	22	2126464a22f0f8d291617b03	pending	elixir	etl	defmodule ETL do\n  import String, only: [downcase: 1]\n  import Enum,   only: [map: 2, flat_map: 2]\n\n  def transform(extract) do\n    HashDict.new(flat_map extract, &do_transform/1)\n  end\n\n  defp do_transform({ k, vs }) do\n    map vs, fn v -> { downcase(v), k } end\n  end\nend	\N	\N	0	2	2014-06-06 09:27:47	2014-06-06 09:27:47	147	etl.exs
292	22	5291863735371783f6976833	pending	ruby	leap	Year = Struct.new(:year) do\n  def leap?\n    (divisible_by?(4) && !divisible_by?(100)) || divisible_by?(400)\n  end\n\n  private\n  def divisible_by?(num)\n    year % num == 0\n  end\nend	\N	\N	0	5	2014-05-12 16:29:28	2014-05-12 16:29:28	148	leap.rb
293	22	5fea3e966cda7c78d133d877	superseded	ruby	leap	class Year < Struct.new(:year)\n  def leap?\n    (divisible_by?(400) || (divisible_by?(4) && !divisible_by?(100))) ? true : false\n  end\n\nprivate\n  def divisible_by?(num)\n    year % num == 0\n  end\nend	\N	\N	0	3	2014-05-17 03:11:35	2014-05-17 03:11:35	148	leap.rb
294	22	c7cabfd4e7d5f167dd148fb8	superseded	ruby	leap	class Year < Struct.new(:year)\n  def leap?\n    (!divisible_by_4? || (!divisible_by_400? && divisible_by_100?)) ? false : true\n  end\n\nprivate\n  def divisible_by_4?\n    year % 4 == 0\n  end\n\n  def divisible_by_100?\n    year % 100 == 0\n  end\n\n  def divisible_by_400?\n    year % 400 == 0\n  end\n\nend	\N	\N	0	1	2014-05-28 18:25:22	2014-05-28 18:25:22	148	leap.rb
295	22	778650485e813259cee676c9	superseded	ruby	leap	class Year < Struct.new(:year)\n  def leap?\n    (divisible_by_400? || (divisible_by_4? && !divisible_by_100?)) ? true : false\n  end\n\nprivate\n  def divisible_by_4?\n    year % 4 == 0\n  end\n\n  def divisible_by_100?\n    year % 100 == 0\n  end\n\n  def divisible_by_400?\n    year % 400 == 0\n  end\nend	\N	\N	0	2	2014-06-05 04:30:04	2014-06-05 04:30:04	148	leap.rb
296	22	836afa4babde251c9c0e717c	superseded	ruby	leap	class Year < Struct.new(:year)\n  def leap?\n    divisible_by?(400) || (divisible_by?(4) && !divisible_by?(100))\n  end\n\nprivate\n  def divisible_by?(num)\n    year % num == 0\n  end\nend	\N	\N	0	4	2014-06-14 11:51:57	2014-06-14 11:51:57	148	leap.rb
298	22	bde750f6628dd2c7712b353a	pending	javascript	bob	function Bob() {\n    this.state = '';\n};\n\nBob.prototype.responses = {\n    silence: 'Fine, be that way.',\n    question: 'Sure',\n    shouting: 'Woah, chill out!',\n    forceful: 'Whatever',\n    statement: 'Whatever'\n}\n\nBob.prototype.scan = function(str) {\n    var len = str.length,\n        lastChar = len ? str[len-1] : '';\n\n    // Empty string\n    if (!str) {\n        this.state = 'silence';\n        return;\n    }\n\n    // Asking question\n    if (lastChar === '?') {\n        this.state = 'question';\n        return;\n    }\n\n    // Are all letters uppercase?\n    if (str === str.toUpperCase()) {\n        this.state = 'shouting';\n    } else {\n        this.state = 'statement';\n    }\n\n    // Forceful? Only if not shouting\n    if (lastChar === '!' && this.state !== 'shouting') {\n        this.state = 'forceful';\n    }\n}\n\nBob.prototype.hey = function(str) {\n    this.scan(str);\n    return this.responses[this.state];\n}\n\nglobal.Bob = module.exports = Bob;	\N	\N	0	3	2014-05-10 08:39:27	2014-05-10 08:39:27	150	bob.js
299	22	85e09ff2aa122a2d986e05c7	superseded	javascript	bob	/**\n * Bob\n * @constructor\n */\nfunction Bob() {};\n\n/**\n * Test if character is uppercase\n * @param  {String} c Character\n * @return {Boolean}\n */\nBob.prototype.isUpper = function(c) {\n    return /[A-Z]/.test(c);\n}\n\n/**\n * Test if character is lowercase\n * @param  {String} c Character\n * @return {Boolean}\n */\nBob.prototype.isLower = function(c) {\n    return /[a-z]/.test(c);\n}\n\n/**\n * Test if character is a number\n * @param  {String} c Character\n * @return {Boolean}\n */\nBob.prototype.isNumber = function(c) {\n    return /[0-9]/.test(c);\n}\n\n/**\n * Give specific response to specific input\n * @param  {String} str Input\n * @return {String}     Response\n */\nBob.prototype.respond = function(str) {\n    var c,\n        len = str.length,\n        i = 0;\n\n    // Keep track of input type\n    var STATEMENT = false,\n        SHOUTING = false;\n\n    // Types of input\n    var RESPONSES = {\n        'SILENCE': 'Fine, be that way.',\n        'QUESTION': 'Sure',\n        'SHOUTING': 'Woah, chill out!',\n        'FORCEFUL': 'Woah, chill out!',\n        'STATEMENT': 'Whatever'\n    };\n\n    // Silence\n    if (!len) {\n        return RESPONSES['SILENCE'];\n    }\n\n    // Question\n    if ( str[len-1] === '?' ) {\n        return RESPONSES['QUESTION'];\n    }\n\n    // Iterate through characters\n    // to determine type of sentence\n    while (i < len) {\n        c = str[i];\n        switch(true) {\n            case this.isLower(c):\n                // Not shouting if lowercase letters exist\n                STATEMENT = true;\n                SHOUTING = false;\n                TYPE = 'STATEMENT';\n                break;\n            case (this.isUpper(c) && !STATEMENT):\n                // Must be shouting I've only seen\n                // uppercase letters so far\n                SHOUTING = true;\n                TYPE = 'SHOUTING'\n                break;\n            default:\n        }\n        ++i;\n    }\n\n    // Not shouting, but ended with exclamation?\n    // Must be forceful\n    if (!SHOUTING && str[i] === '!') {\n        TYPE = 'FORCEFUL';\n    }\n\n    return RESPONSES[TYPE];\n}\n\nBob.prototype.hey = function(str) {\n    return this.respond(str);\n}\n\nglobal.Bob = module.exports = Bob;	\N	\N	0	1	2014-05-26 09:33:07	2014-05-26 09:33:07	150	bob.js
300	22	d17fde1efcb6963e928aa48f	superseded	javascript	bob	/**\n * Bob\n * @constructor\n */\nfunction Bob() {\n    this.state = '';\n};\n\nBob.prototype.responses = {\n    silence: 'Fine, be that way.',\n    question: 'Sure',\n    shouting: 'Woah, chill out!',\n    forceful: 'Whatever',\n    statement: 'Whatever'\n}\n\n/**\n * Test if character is uppercase (A-Z)\n * @param  {String} c Character\n * @return {Boolean}\n */\nBob.prototype.isUpper = function(c) {\n    var code = c.charCodeAt(0);\n    return (code >= 65 && code <= 90);\n}\n\n/**\n * Test if character is lowercase (a-z)\n * @param  {String} c Character\n * @return {Boolean}\n */\nBob.prototype.isLower = function(c) {\n    var code = c.charCodeAt(0);\n    return (code >= 97 && code <= 122);\n}\n\n/**\n * Scan string and determine sentence type\n * @param  {String} str String\n */\nBob.prototype.scan = function(str) {\n    var c,\n        len = str.length,\n        i = 0;\n\n    // Silence if empty string\n    if ( !len ) {\n        this.state = 'silence';\n        return;\n    }\n\n    // Question if last character is question mark\n    if ( str[len-1] === '?' ) {\n        this.state = 'question';\n        return;\n    }\n\n    //\n    // Iterate through characters\n    // to determine sentence type\n    //\n\n    // Label enables breaking out of while\n    // loop from within switch statement, which\n    // prevents interating over all characters\n    // when it's no longer necessary\n    charloop:\n    while (i < len) {\n        c = str[i];\n        switch(true) {\n            case this.isLower(c):\n                // Not shouting if lowercase letters exist\n                this.state = 'statement'\n                break charloop;\n            case this.isUpper(c):\n                // Must be shouting if I've only seen\n                // uppercase letters so far\n                this.state = 'shouting';\n                break;\n            default:\n        }\n        ++i;\n    }\n\n    // Not shouting, but ended with exclamation?\n    // Must be forceful\n    if ( this.state !== 'shouting' && str[len-1] === '!' ) {\n        this.state = 'forceful';\n    }\n}\n\n/**\n * Give specific response to specific input\n * @param  {String} str Input\n * @return {String}     Response\n */\nBob.prototype.respond = function(str) {\n    this.scan(str);\n    return this.responses[this.state];\n}\n\nBob.prototype.hey = function(str) {\n    return this.respond(str);\n}\n\nglobal.Bob = module.exports = Bob;	\N	\N	0	2	2014-05-30 10:43:57	2014-05-30 10:43:57	150	bob.js
301	22	f3b8588f38a5af40ad214140	superseded	javascript	anagram	"use strict";\n\nfunction Anagram(word) {\n  var word = word;\n\n  this.match = function(words) {\n    var matches = [];\n\n    for (var i = 0; i < words.length; i++) {\n      var currentWord = words[i];\n\n      if (word.length != currentWord.length) { continue; }\n      if (word.toLowerCase() == currentWord.toLowerCase()) { continue; }\n\n      var splitWord = word.toLowerCase().split('').sort();\n      var splitCurrentWord = currentWord.toLowerCase().split('').sort();\n\n      var isMatch = true;\n      for (var j = 0; j < splitCurrentWord.length; j++) {\n        if (splitCurrentWord[j] != splitWord[j]) {\n          isMatch = false;\n        }\n      }\n\n      if (isMatch) { matches.push(currentWord); }\n    }\n\n\n    return matches;\n  };\n};\n\nmodule.exports = Anagram;	\N	\N	0	1	2014-06-02 06:04:13	2014-06-02 06:04:13	151	anagram.js
302	22	a2833a2fdd03a0eaddb32a16	superseded	javascript	anagram	module.exports = Anagram;\n\nfunction Anagram(subject) {\n  var subject = subject;\n\n  function alphabetize(word) {\n    return word.toLowerCase().split('').sort().join('');\n  };\n\n  function isAnagram(word) {\n    if (word.length != subject.length) { return false; }\n    if (word.toLowerCase() == subject.toLowerCase()) { return false; }\n\n    return alphabetize(word) == alphabetize(subject);\n  };\n\n  this.match = function(words) {\n    return words.filter(isAnagram);\n  };\n};	\N	\N	0	2	2014-06-18 04:59:30	2014-06-18 04:59:30	151	anagram.js
303	22	cd885af3fcc70da353a79800	superseded	javascript	anagram	module.exports = Anagram;\n\nfunction alphabetized(word) {\n  return word.toLowerCase().split('').sort().join('');\n};\n\nfunction Anagram(subject) {\n  var subject = subject.toLowerCase();\n  var alphabetizedSubject = alphabetized(subject);\n\n  function isAnagram(word) {\n    if (word.length != subject.length) { return false; }\n    if (word.toLowerCase() == subject) { return false; }\n\n    return alphabetized(word) == alphabetizedSubject;\n  };\n\n  this.match = function(words) {\n    return words.filter(isAnagram);\n  };\n};	\N	\N	0	3	2014-06-28 03:18:44	2014-06-28 03:18:44	151	anagram.js
304	22	67fa92ec39aa65c3ddd32848	pending	javascript	anagram	module.exports = Anagram;\n\nfunction alphabetized(word) {\n  return word.toLowerCase().split('').sort().join('');\n};\n\nfunction Anagram(subject) {\n  var subject = subject.toLowerCase();\n  var alphabetizedSubject = alphabetized(subject);\n\n  function isAnagram(word) {\n    if (word.length !== subject.length) { return false; }\n    if (word.toLowerCase() === subject) { return false; }\n\n    return alphabetized(word) === alphabetizedSubject;\n  };\n\n  this.match = function(words) {\n    return words.filter(isAnagram);\n  };\n};	\N	\N	0	4	2014-07-07 12:16:15	2014-07-07 12:16:15	151	anagram.js
305	22	3c48a4657f8b366c10f66eb9	pending	ruby	gigasecond	require 'date'\nrequire 'time'\n\nclass Gigasecond\n  def initialize(date)\n    @birthdate = date\n  end\n\n  def date\n    seconds = @birthdate.to_time.to_i + 10**9\n    Date.strptime(seconds.to_s, '%s')\n  end\nend	\N	\N	0	1	2014-05-05 04:16:24	2014-05-05 04:16:24	152	gigasecond.rb
306	22	8ff945814e734e7f20b0f385	pending	python	accumulate	def accumulate(my_list, func):\n    new_list = [func(x) for x in my_list]\n    return new_list	\N	\N	0	1	2014-05-19 10:44:19	2014-05-19 10:44:19	153	accumulate.py
307	22	4014e124302f4b7ad618eeb4	pending	ruby	robot-name	class Robot\n\n\tdef initialize\n\t\t@name = ''\n\tend\n\n\tdef reset\n\t\t@name = ''\n\tend\n\n\tdef name\n\t\tif @name.empty?\n\t\t\t@name =  ((0...2).map { (65 + rand(26)).chr } + (0...3).map{ rand(9) }).join\n\t\tend\n\t\treturn @name\n\tend\n\nend\n\t	\N	\N	0	1	2014-05-22 04:30:52	2014-05-22 04:30:52	154	robot-name.rb
308	22	1aa2e77bb34b6587f6f21958	superseded	ruby	word-count	require "pry"\n\nclass Phrase\n  def initialize(sentence)\n    @sentence = sentence.downcase\n  end\n\n  def word_count\n    @sentence.split(/[\\s,.:!&@\\$%^]+/i).each_with_object({}) do |word, count|\n      count[word] ||= 0\n      count[word] += 1\n    end\n  end\nend	\N	\N	0	1	2014-05-24 19:47:14	2014-05-24 19:47:14	155	word-count.rb
309	22	5275aa81f6e2379cee322903	pending	ruby	word-count	class Phrase\n  def initialize(sentence)\n    @sentence = sentence.downcase\n  end\n\n  def word_count\n    @sentence.split(/[\\s,.:!&@\\$%^]+/i).each_with_object({}) do |word, count|\n      count[word] ||= 0\n      count[word] += 1\n    end\n  end\nend	\N	\N	0	2	2014-06-19 22:27:38	2014-06-19 22:27:38	155	word-count.rb
310	22	613437e4e857d10630ae1126	superseded	haskell	space-age	module SpaceAge (Planet(..), ageOn) where\n\ndata Planet = Mercury | Venus  | Earth  | Mars\n            | Jupiter | Saturn | Uranus | Neptune\n\nageOn :: Planet -> Int -> Float\nageOn planet seconds = ageEarth / scale where\n  ageEarth = fromIntegral seconds / 31557600\n  scale = case planet of\n    Mercury -> 0.2408467\n    Venus   -> 0.61519726\n    Earth   -> 1.0\n    Mars    -> 1.8808158\n    Jupiter -> 11.862615\n    Saturn  -> 29.447498\n    Uranus  -> 84.016846\n    Neptune -> 164.79132	\N	\N	0	1	2014-05-27 05:31:14	2014-05-27 05:31:14	156	SpaceAge.hs
311	22	e3bb8c9b27adb3982501c4db	pending	haskell	space-age	module SpaceAge (Planet(..), ageOn) where\n\ndata Planet = Mercury | Venus  | Earth  | Mars\n            | Jupiter | Saturn | Uranus | Neptune\n\nsecondsPerEarthYear :: Float\nsecondsPerEarthYear = 31557600\n\nageOn :: Planet -> Int -> Float\nageOn planet seconds = ageEarth / scale where\n  ageEarth = fromIntegral seconds / secondsPerEarthYear\n  scale = case planet of\n    Mercury -> 0.2408467\n    Venus   -> 0.61519726\n    Earth   -> 1.0\n    Mars    -> 1.8808158\n    Jupiter -> 11.862615\n    Saturn  -> 29.447498\n    Uranus  -> 84.016846\n    Neptune -> 164.79132	\N	\N	0	2	2014-05-28 13:25:57	2014-05-28 13:25:57	156	SpaceAge.hs
312	22	6b6c39884cb48e2fa1e1bdfb	pending	ruby	grains	# Grains on a chessboard class\nclass Grains\n  def square( n )\n    2 ** (n - 1)\n  end\n\n  def total\n    (2 ** 64) - 1\n  end\nend	\N	\N	0	2	2014-04-27 18:18:04	2014-04-27 18:18:04	157	grains.rb
313	22	44de6f27a1d37f29b3e135af	superseded	ruby	grains	# Grains on a chessboard class\nclass Grains\n  def square( n )\n    2 ** (n - 1)\n  end\n\n  def total\n    (1..64).reduce { |a, e| a + square( e ) }\n  end\nend	\N	\N	0	1	2014-05-15 11:58:21	2014-05-15 11:58:21	157	grains.rb
314	22	2213f99302e2db1f6e7fd56f	superseded	ruby	anagram	#!/usr/bin/ruby\n\nclass Anagram\n  def initialize(input)\n    @input = input\n  end\n\n  def match(possible_matches)\n    possible_matches.each_with_object([]) do |match_canidate, matches|\n      if anagram? match_canidate\n        matches << match_canidate\n      end\n    end\n  end\n\n  def anagram?(match_canidate)\n    (arrayed(match_canidate) == arrayed(@input)) && (match_canidate.downcase != @input.downcase)\n  end\n\n  def arrayed(word)\n    word.downcase.chars.sort\n  end\nend	\N	\N	0	1	2014-05-24 10:41:47	2014-05-24 10:41:47	158	anagram.rb
315	22	16210c676f2271e881b670d0	pending	ruby	anagram	#!/usr/bin/ruby\n\nclass Anagram\n  def initialize(input)\n    @input = input.downcase\n  end\n\n  def match(possible_matches)\n    possible_matches.find_all() do |match_candidate|\n      anagram? match_candidate.downcase\n    end\n  end\n\n  def anagram?(match_candidate)\n    (sorted(match_candidate) == sorted(@input)) && (match_candidate != @input)\n  end\n\n  def sorted(word)\n    word.chars.sort\n  end\nend	\N	\N	0	2	2014-07-16 14:10:45	2014-07-16 14:10:45	158	anagram.rb
316	16	32a8bdc787f31f1212b62bcc	superseded	ruby	rna-transcription	class Complement\n  @transcription_key = {'G' => 'C', 'C' => 'G', 'T' => 'A', 'A' => 'U'}\n\n  def self.of_dna(strand)\n    complement(strand, @transcription_key)\n  end\n\n  def self.of_rna(strand)\n    complement(strand, @transcription_key.invert)\n  end\n\n  def self.complement(strand, key)\n    strand.chars.map {|residue| key[residue]}.join\n  end\nend	\N	\N	0	1	2014-02-18 15:17:20	2014-02-18 15:17:20	159	complement.rb
317	16	cdc8e792029f6c9c2c6b9d21	pending	ruby	rna-transcription	class Complement\n  TRANSCRIPTION_KEY = ['GCTA','CGAU']\n\n  def self.of_dna(strand)\n    strand.tr(*TRANSCRIPTION_KEY)\n  end\n\n  def self.of_rna(strand)\n    strand.tr(*TRANSCRIPTION_KEY.reverse)\n  end\n\nend	\N	\N	0	2	2014-02-23 09:44:42	2014-02-23 09:44:42	159	complement.rb
318	16	5651b5440bf61a11ebce00a1	superseded	ruby	hamming	class DNA\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(another_strand)\n    acids_from_another_strand = nucleic_acids(another_strand)\n\n    each_acid_with_index.count do |acid, index|\n      another_acid = acids_from_another_strand[index]\n      mutation?(acid, another_acid)\n    end\n  end\n\n  private\n\n  def each_acid_with_index\n    nucleic_acids(strand).each_with_index\n  end\n\n  def nucleic_acids(strand)\n    strand.chars.to_a\n  end\n\n  def mutation?(this, that)\n    this && that && !(this == that)\n  end\nend	\N	\N	0	1	2014-01-21 19:04:37	2014-01-21 19:04:37	160	point-mutations.rb
319	16	3c981c43c83a3ed2cd9ecb0e	superseded	ruby	hamming	class DNA\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(another_strand)\n    acid_pairs(another_strand).count do |acid, another_acid|\n      mutation?(acid, another_acid)\n    end\n  end\n\n  private\n\n  def acid_pairs(another_strand)\n    nucleic_acids(strand).zip(nucleic_acids(another_strand))\n  end\n\n  def mutation?(acid, another_acid)\n    another_acid && !(acid == another_acid)\n  end\n\n  def nucleic_acids(strand)\n    strand.chars\n  end\nend	\N	\N	0	3	2014-02-19 05:13:18	2014-02-19 05:13:18	160	point-mutations.rb
320	16	47eab7e16e5bd2e39a123df6	superseded	ruby	hamming	class DNA\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(another_strand)\n    acid_pairs(another_strand).count do |acid, another_acid|\n      mutation?(acid, another_acid)\n    end\n  end\n\n  private\n\n  def acid_pairs(another_strand)\n    nucleic_acids(strand).zip(nucleic_acids(another_strand))\n  end\n\n  def each_acid_with_index\n    nucleic_acids(strand).each_with_index\n  end\n\n  def mutation?(acid, another_acid)\n    another_acid && !(acid == another_acid)\n  end\n\n  def nucleic_acids(strand)\n    strand.chars\n  end\nend	\N	\N	0	2	2014-03-13 14:38:25	2014-03-13 14:38:25	160	point-mutations.rb
321	16	7d0e25763a0ccbb825906802	pending	ruby	hamming	class DNA\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(another_strand)\n    acid_pairs(another_strand).count do |acid, another_acid|\n      mutation?(acid, another_acid)\n    end\n  end\n\n  private\n\n  attr_reader :strand\n\n  def acid_pairs(another_strand)\n    nucleic_acids(strand).zip(nucleic_acids(another_strand))\n  end\n\n  def mutation?(acid, another_acid)\n    another_acid && acid != another_acid\n  end\n\n  def nucleic_acids(strand)\n    strand.chars\n  end\nend	\N	\N	0	4	2014-07-07 13:13:29	2014-07-07 13:13:29	160	point-mutations.rb
322	16	a9697075352bbe3beac576a3	superseded	javascript	anagram	var Anagram = function( word ) {\n\t\n\tvar match = function(candidates){\n\n\t\tvar anagrams = [];\t\t\n\n\t\tfor(var i = 0; i < candidates.length; i++){\t\t\t\n\t\t\t\n\t\t\tvar candidate = candidates[i];\n\n\t\t\tif( isAnagram(candidate) ){\n\t\t\t\tanagrams.push(candidate);\n\t\t\t}\n\n\t\t}\n\n\t\treturn anagrams;\n\t}\n\n\tvar rankWord = function(word){\n\t\tvar rank = 0;\n\n\t\tword = word.toLowerCase();\n\n\t\tfor(var i = 0; i < word.length; i++){\n\t\t\trank += word.charCodeAt(i);\t\t\t\n\t\t}\n\n\t\treturn rank;\n\t}\n\n\tvar isAnagram = function(candidate){\n\t\tvar isEqualToWordRank = rank === rankWord(candidate);\n\t\tvar isDuplicate = candidate === word;\n\t\treturn  isEqualToWordRank && !isDuplicate;\n\t}\n\n\tvar rank = rankWord(word);\n\n\treturn {\n\t\tmatch:match\n\t}\n}\n\n\nmodule.exports = Anagram;	\N	\N	0	1	2014-01-18 15:28:55	2014-01-18 15:28:55	161	anagram.js
341	16	51460672335be35a4b0f6744	superseded	elixir	rna-transcription	defmodule DNA do\n  \n  @thymidine "T"\n  @uracil "U"\n\n  def to_rna(dna) do  \n  \tString.replace("#{dna}",  @thymidine, @uracil)\n  \t|> dna_string_to_char\n  end\n\n  defp dna_string_to_char(dna_string) do\n    { _ , char_dna} =  String.to_char_list(dna_string)\n    char_dna\n  end\t\n\nend	\N	\N	0	1	2014-02-03 20:26:39	2014-02-03 20:26:39	173	rna-transcription.exs
323	16	1524522a64aad497d5c930f2	superseded	javascript	anagram	var Anagram = function( word ) {\n\tthis.word = word;\n}\n\nAnagram.prototype = {\n\n\tmatch: function( candidates ){\t\t\n\t\treturn candidates.filter(this.isAnagramOf, this);\n\t},\n\n\tisAnagramOf: function(other){\t\t\n\t\tvar isAnagram = this.quantify(this.word) === this.quantify(other);\n\t\tvar isNotSameWord = this.word !== other;\n\t\treturn isAnagram && isNotSameWord;\n\t},\n\n\tquantify: function(word){\t\t\n\t\t\n\t\tword = word.toLowerCase();\n\n\t\tvar value = word.length;\n\t\t\n\t\tfor( var i = 0; i < word.length; i++ ){\n\t\t\tvalue += word.charCodeAt(i);\n\t\t}\t\t\n\n\t\treturn value;\n\t}\n}\n\nmodule.exports = Anagram;	\N	\N	0	2	2014-01-21 07:04:08	2014-01-21 07:04:08	161	anagram.js
324	16	60273bf36f6d720566306d15	pending	javascript	anagram	var Anagram = function( word ) {\n\tthis.word = word;\n}\n\nAnagram.prototype = {\n\n\tmatch: function( candidates ){\t\t\n\t\treturn candidates.filter(this.isAnagramOf, this);\n\t},\n\n\tisAnagramOf: function(other){\t\t\n\t\tvar isAnagram = this.normalize(this.word) === this.normalize(other);\n\t\tvar isNotSameWord = this.word !== other;\n\t\treturn isAnagram && isNotSameWord;\n\t},\n\n\tnormalize: function(word){\t\t\n\t\treturn word.toLowerCase()\n\t\t\t.split('')\n\t\t\t.sort()\n\t\t\t.join('');\t\t\n\t}\n}\n\nmodule.exports = Anagram;	\N	\N	0	3	2014-03-17 16:18:26	2014-03-17 16:18:26	161	anagram.js
325	16	0e3ba7a45fbded0b8108f053	pending	javascript	clock	'use strict';\n\nvar Clock = function(hour, min) {\n  hour = hour.toString();\n  hour = hour > 9 ? hour : 0 + hour;\n\n  min = min ? (min > 9 ? min : '0' + min) : '00';\n\n  return hour + ':' + min;\n};\n\nvar at = new Clock(hour, min);	\N	\N	0	1	2014-02-11 14:59:09	2014-02-11 14:59:09	162	clock_test.js
326	16	a7c542283a3412cb6dc84bdc	pending	elixir	etl	defmodule ETL do\n  @doc """\n  \n    Transpose key, value pairs \n\n    iex> hsh = HashDict.new([{"a", ["a1","a2"]}])\n    ...> ETL.transform(hsh)\n    HashDict.new([{"a1", "a"},{"a2", "a"}])\n  \n  """\n  def transform(data) do\n      transpose(data)\n      |> List.flatten\n      |> HashDict.new\n  end\n  defp transpose(data) do\n    Enum.map(data, fn({key,values}) -> \n      lc value inlist values do \n        {String.downcase(value) ,key}\n      end\n    end)\n  end\nend	\N	\N	0	1	2014-01-20 20:43:28	2014-01-20 20:43:28	163	etl.exs
327	16	5834c3aafbe37f24cb7e5952	superseded	ruby	grains	class Grains\n\n  def square(position)\n    2**(position-1)\n  end\n\n  def total\n    square(65) - 1\n  end\n\nend	\N	\N	0	1	2014-03-11 00:46:00	2014-03-11 00:46:00	164	grains.rb
328	16	57ed5a82556dbe6712cd7565	pending	ruby	grains	class Grains\n\n  def square(position)\n    1 << (position-1)\n  end\n\n  def total\n    square(65) - 1\n  end\n\nend	\N	\N	0	2	2014-03-11 14:02:18	2014-03-11 14:02:18	164	grains.rb
329	16	b89cf0d7aa36073b11cfd0b2	pending	ruby	word-count	class Phrase\n  def initialize(content)\n    @content = content.downcase\n  end\n  \n  def word_count\n    words.inject(Hash.new(0)) do |counts, word|\n      counts[word] += 1\n      counts\n    end\n  end\n  \n  protected\n  \n  def words\n    unpunctuated_content.split(/[[:space:]]+/)\n  end\n  \n  def unpunctuated_content\n    @content.gsub(/[^[:alnum:]]+/, ' ')\n  end\nend	\N	\N	0	1	2014-01-26 05:12:25	2014-01-26 05:12:25	165	word-count.rb
330	16	7d25bb1c63c47875b900d324	pending	ruby	gigasecond	require "date"\nrequire "time"\n\nclass Gigasecond\n\n  def self.from date\n    seconds = date.to_time + 1_000_000_000\n    Time.at(seconds).to_date\n  end\n\nend	\N	\N	0	1	2014-07-05 17:52:50	2014-07-05 17:52:50	166	gigasecond.rb
331	16	266badf032dabfec6413bdaa	pending	python	binary	import re\n\ndef Binary(binary):\n    if _is_invalid(binary):\n        return 0\n\n    total = 0\n    for i, char in enumerate(reversed(binary)):\n        total += (2 ** i) * int(char)\n    return total\n\ndef _is_invalid(binary):\n    return re.search(r"\\D", binary)	\N	\N	0	1	2014-05-24 09:42:25	2014-05-24 09:42:25	167	binary.py
332	16	bf4b4f6428654ef910d4f909	pending	python	word-count	import re\n\nclass Phrase:\n    def __init__(self,phrase):\n        self.words = {}\n        phrase = re.sub( '[^\\w\\s]', '', phrase )\n        for word in phrase.split():\n            word = word.lower()\n            if self.words.has_key( word ):\n                self.words[word] = self.words[word]+1\n            else:\n                self.words[word] = 1\n\n    def word_count(self):\n        return self.words	\N	\N	0	1	2014-05-17 23:31:09	2014-05-17 23:31:09	168	wordcount.py
333	16	aed45490b81e67347ce64983	pending	clojure	beer-song	(ns beer\n  (require [clojure.string :as string]))\n\n(defn- bottle-phrase [n]\n  (cond\n    (= n 0) "no more bottles of beer"\n    (= n 1) "1 bottle of beer"\n    :else   (str n " bottles of beer")))\n\n(defn- bottle-pronoun [n]\n  (if (= n 1) "it" "one"))\n\n(defn- first-stanza [n]\n  (str (string/capitalize (bottle-phrase n)) " on the wall, "\n       (bottle-phrase n) "."))\n\n(defn- second-stanza [n]\n  (if (> n 0)\n    (str "Take " (bottle-pronoun n) " down and pass it around, "\n         (bottle-phrase (dec n)) " on the wall.")\n    (str "Go to the store and buy some more, "\n         (bottle-phrase 99) " on the wall.")))\n\n(defn verse [n]\n  (str (first-stanza n) "\\n" (second-stanza n) "\\n"))\n\n(defn sing\n  ([n] (sing n 0))\n  ([start stop]\n   (str (string/join "\\n" (map verse (range start (dec stop) -1)))\n        "\\n")))	\N	\N	0	1	2014-02-13 07:23:22	2014-02-13 07:23:22	169	beer-song.clj
334	16	34e3fcb91869d8a337f5fbb1	superseded	ruby	bob	class Bob\n  def hey(input)\n    case\n    when input.strip.empty?\n      'Fine. Be that way!'\n    when input =~ /[a-z]/i && input.upcase == input\n      "Woah, chill out!"\n    when input[-1] == '?'\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	1	2014-06-29 12:16:22	2014-06-29 12:16:22	170	bob.rb
335	16	9af44d264ef11f732371ed33	pending	ruby	bob	class Bob\n  def hey(input)\n    case\n    when input.strip.empty?\n      'Fine. Be that way!'\n    when input =~ /[a-z]/i && input.upcase == input\n      "Woah, chill out!"\n    when input.ends_with? '?'\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	2	2014-07-05 04:29:27	2014-07-05 04:29:27	170	bob.rb
336	16	14d5aa76fbf2842437b347c7	pending	ruby	sieve	class Sieve\n  FIRST = 2\n  def initialize(max)\n    @max = max\n  end\n\n  def primes\n    @primes ||= sieve (FIRST..@max).to_a, FIRST\n  end\n\n  def sieve(list, start)\n    while start \n      list.reject! { |n| n > start && n % start == 0 }\n      start = list.detect { |n| n > start }\n    end \n    list\n  end\nend	\N	\N	0	4	2014-03-24 22:36:31	2014-03-24 22:36:31	171	sieve.rb
337	16	a1bfd4a4943447947be266ad	superseded	ruby	sieve	class Sieve\n  FIRST = 2\n  def initialize(max)\n    @max = max\n  end\n\n  def primes\n    @primes ||= sieve (FIRST..@max).to_a, FIRST\n  end\n\n  def sieve(list, start)\n    list.reject! { |n| n > start && n % start == 0 }\n    new_start = list.detect { |n| n > start }\n    new_start ? sieve(list, new_start) : list\n  end\nend	\N	\N	0	1	2014-04-07 10:14:13	2014-04-07 10:14:13	171	sieve.rb
338	16	05ca7dca6d19e16895b0837a	superseded	ruby	sieve	class Sieve\n  FIRST = 2\n  def initialize(max)\n    @max = max\n  end\n\n  def primes\n    @primes ||= sieve (FIRST..@max).to_a, FIRST\n  end\n\n  def sieve(list, start)\n    while start \n      list.reject! { |n| n > start && n % start == 0 }\n      start = list.detect { |n| n > start }\n    end \n    list\n  end\nend	\N	\N	0	2	2014-04-10 15:56:03	2014-04-10 15:56:03	171	sieve.rb
339	16	304488d21df68ad1193891ee	superseded	ruby	sieve	class Sieve\n  FIRST = 2\n  def initialize(max)\n    @max = max\n  end\n\n  def primes\n    @primes ||= sieve (FIRST..@max).to_a, FIRST\n  end\n\n  def sieve(list, start)\n    while start \n      list.each { |n| n = 0 if n > start && n % start == 0 }\n      start = list.detect { |n| n > start }\n    end \n    list.reject!{ |n| n==0 }\n  end\nend	\N	\N	0	3	2014-05-17 15:22:05	2014-05-17 15:22:05	171	sieve.rb
342	16	70f292f3c2d86ca906afcc44	superseded	elixir	rna-transcription	defmodule DNA do\n  \n  @thymidine 84\n  @uracil 85\n\n  def to_rna(dna) do  \n    Enum.map(dna, &(replace_thymidine/1))\n  end\n\n  defp replace_thymidine(occurrence) do    \n    case occurrence do\n      @thymidine -> @uracil\n      _  -> occurrence\n    end\n  end\nend	\N	\N	0	2	2014-05-16 06:44:46	2014-05-16 06:44:46	173	rna-transcription.exs
343	16	156cceb5aac3c503744b9a50	pending	elixir	rna-transcription	defmodule DNA do\n  \n  @thymidine ?T\n  @uracil ?U\n\n  def to_rna(dna), do: Enum.map(dna, &(replace_when_is_thymidine/1))\n\n  defp replace_when_is_thymidine(@thymidine), do: @uracil   \n     \n  defp replace_when_is_thymidine(nucleotide), do: nucleotide    \n       \nend	\N	\N	0	3	2014-05-17 22:25:14	2014-05-17 22:25:14	173	rna-transcription.exs
344	16	aa6afb3868454bcc3f0b435b	pending	javascript	point-mutations	var DNA = function(base){\n  return {\n    examinationSequence : function(base, comparator){\n      return base.slice(0, comparator.length);\n    },\n    \n    hammingDistance : function(comparator){\n      var distance = 0;\n      var baseElements = base.split('');\n      var comparatorElements = comparator.split('');\n\n      this.examinationSequence(baseElements, comparatorElements).forEach(function(element, index){\n        if(element != comparatorElements[index]){\n          distance++;\n        }\n      });\n\n      return distance;\n    }\n  }\n};\n\nmodule.exports = DNA;	\N	\N	0	1	2014-01-22 02:40:50	2014-01-22 02:40:50	174	point-mutations.js
345	16	4669cf219ecaee88f37e14b2	pending	haskell	beer-song	module Beer (sing, verse) where\n\nimport Data.Char (toUpper)\n\nverse :: Int -> String\nverse n = capitalizeFirstLetter $ \n    bottlesOfBeer n ++  " on the wall, " ++ bottlesOfBeer n  ++ ".\\n" ++\n    command                              ++ bottlesOfBeer n' ++ " on the wall.\\n" where \n\n    capitalizeFirstLetter (c : cs) = toUpper c : cs\n\n    command \n        | n == 0 = "Go to the store and buy some more, "\n        | n == 1 = "Take it down and pass it around, "\n        | n >  1 = "Take one down and pass it around, "\n\n    n' = next n\n\nbottlesOfBeer :: Int -> String\nbottlesOfBeer n = numberWord ++ " bottle" ++ optionalPluralEnding ++ " of beer" where\n\n    numberWord | n == 0    = "no more"\n               | otherwise = show n\n\n    optionalPluralEnding  | n == 1    = ""\n                          | otherwise = "s"\n\nnext :: Int -> Int\nnext n = (n - 1) `mod` 100 \n\nsing :: Int -> Int -> String\nsing m n = verse m ++ "\\n" ++ if m==n then "" else sing (next m) n	\N	\N	0	1	2014-02-25 06:50:15	2014-02-25 06:50:15	175	beer-song.hs
346	16	c3ec9b6e218a470aad5dc34b	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n  \n  def initialize word\n    @word = word.downcase\n  end\n  \n  def match wordlist\n    wordlist.select { |word| anagram_of?(Anagram.new(word)) }\n  end\n  \n  private\n  def sorted_chars\n    @word.downcase.chars.sort\n  end\n\n  def anagram_of? anagram\n    @word != anagram.word &&\n    sorted_chars == anagram.send(:sorted_chars)\n  end\n\nend	\N	\N	0	2	2014-02-24 22:35:11	2014-02-24 22:35:11	176	anagram.rb
347	16	09d5ee46643ef251a060d37d	pending	ruby	anagram	class Anagram\n  attr_reader :word\n  \n  def initialize word\n    @word = word.downcase\n  end\n  \n  def match wordlist\n    wordlist.select { |word| anagram_of?(Anagram.new(word)) }\n  end\n  \n  protected\n  def sorted_chars\n    @word.chars.sort\n  end\n\n  private\n  def anagram_of? anagram\n    @word != anagram.word &&\n    sorted_chars == anagram.sorted_chars\n  end\n\nend	\N	\N	0	4	2014-03-26 06:01:01	2014-03-26 06:01:01	176	anagram.rb
348	16	469d01e14f6aada0c501bc98	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n  \n  def initialize word\n    @word = word.downcase\n  end\n  \n  def match wordlist\n    wordlist.select { |word| anagram_of?(Anagram.new(word)) }\n  end\n  \n  private\n  def sorted_chars\n    @word.chars.sort\n  end\n\n  def anagram_of? anagram\n    @word != anagram.word &&\n    sorted_chars == anagram.send(:sorted_chars)\n  end\n\nend	\N	\N	0	3	2014-04-26 11:32:53	2014-04-26 11:32:53	176	anagram.rb
349	16	4eaaa5f2498b4e201dea0d1f	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n  \n  def initialize word\n    @word = word\n  end\n  \n  def match wordlist\n    wordlist.each_with_object([]) do |word, matches|\n      matches << word if self.anagram_of?(Anagram.new(word))\n    end\n  end\n  \n  def anagram_of? anagram\n    return false if @word.downcase == anagram.word.downcase\n    @word.downcase.chars.sort == anagram.word.downcase.chars.sort\n  end\nend	\N	\N	0	1	2014-06-18 14:59:31	2014-06-18 14:59:31	176	anagram.rb
350	16	782de80494930113f5f0f5a5	superseded	haskell	word-count	module WordCount where\nimport Data.List.Split (wordsBy)\nimport Data.Map (Map, alter, empty)\nimport Data.Char (toLower, isAlphaNum)\n\nwordCount :: String -> Map String Int\nwordCount = foldr (alter accu) empty . wordsBy (not . isAlphaNum) . lower\n    where accu = maybe (Just 1) (Just . (+1))\n          lower = map toLower	\N	\N	0	4	2014-03-06 05:07:03	2014-03-06 05:07:03	177	WordCount.hs
351	16	f4adbb6a231ca977f81335ea	superseded	haskell	word-count	module WordCount where\nimport Data.List.Split (wordsBy)\nimport Data.Map (Map, alter, empty)\nimport Data.Char (toLower, isAlphaNum)\n\nwordCount :: String -> Map String Int\nwordCount = foldr (alter accu) empty . wordsBy (not . isAlphaNum) . map toLower\n    where accu = maybe (Just 1) (Just . (+1))	\N	\N	0	5	2014-04-02 06:09:06	2014-04-02 06:09:06	177	WordCount.hs
352	16	09302f147e0f226a9bea9f91	superseded	haskell	word-count	module WordCount where\nimport Data.List.Split (wordsBy)\nimport Data.Map (Map, fromList, alter)\nimport Data.Char (toLower, isAlphaNum)\nimport Data.String.Utils (replace)\n\nwordCount :: String -> Map String Int\nwordCount = foldr (alter accu) (fromList []) . wordsBy (not . isAlphaNum) . lower\n    where accu = maybe (Just 1) (Just . (+1))\n          lower = map toLower\n\nsymbolsToSpace :: String -> String\nsymbolsToSpace = flip (foldr (\\s st -> replace s " " st)) symbols\n    where symbols = ["@", "!", "#", "$", "%", "^", "&", ":", ",", "_", "."]	\N	\N	0	2	2014-05-10 11:03:29	2014-05-10 11:03:29	177	WordCount.hs
353	16	1c38a14641d70385ba245f39	superseded	haskell	word-count	module WordCount where\nimport Data.List.Split (wordsBy)\nimport Data.Map (Map, fromList, alter)\nimport Data.Char (toLower, isAlphaNum)\n\nwordCount :: String -> Map String Int\nwordCount = foldr (alter accu) (fromList []) . wordsBy (not . isAlphaNum) . lower\n    where accu = maybe (Just 1) (Just . (+1))\n          lower = map toLower	\N	\N	0	3	2014-05-25 18:39:36	2014-05-25 18:39:36	177	WordCount.hs
354	16	b45a56f1f89bb9d81186668d	pending	haskell	word-count	module WordCount where\nimport Data.List.Split (wordsBy)\nimport Data.Map (Map, alter, empty)\nimport Data.Char (toLower, isAlphaNum)\n\nwordCount :: String -> Map String Int\nwordCount = foldr fill empty . wordsBy (not . isAlphaNum) . map toLower\n    where fill = alter $ maybe (Just 1) (Just . (+1))	\N	\N	0	6	2014-06-05 14:17:32	2014-06-05 14:17:32	177	WordCount.hs
355	16	e946493e6357ad73ef993e25	superseded	haskell	word-count	module WordCount where\nimport Data.Map (Map, fromList, alter)\nimport Data.Char (toLower)\nimport Data.String.Utils (replace)\n\nwordCount :: String -> Map String Int\nwordCount = foldr (alter accu) (fromList []) . words . symbolsToSpace . lower\n    where accu = maybe (Just 1) (Just . (+1))\n          lower = map toLower\n\nsymbolsToSpace :: String -> String\nsymbolsToSpace = flip (foldr (\\s st -> replace s " " st)) symbols\n    where symbols = ["@", "!", "#", "$", "%", "^", "&", ":", ",", "_", "."]	\N	\N	0	1	2014-06-07 03:20:47	2014-06-07 03:20:47	177	WordCount.hs
356	16	90eab082f05c528a45de24d1	superseded	javascript	bob	function Bob() {\n  function strip(text) {\n    return text.replace(/^\\s+|\\s+$/, '');\n  }\n  function is_silent(text) {\n    return (!strip(text).length);\n  }\n  function is_questioning(text) {\n    return (/\\?$/.test(text));\n  }\n  function is_yelling(text) {\n    return (text.toUpperCase() == text && /[A-Z]/.test(text));\n  }\n  this.hey = function hey(stimulus) {\n    switch (true) {\n      case (is_silent(stimulus)):\n        return 'Fine. Be that way!';\n\n      case (is_yelling(stimulus)):\n        return 'Woah, chill out!';\n\n      case (is_questioning(stimulus)):\n        return 'Sure.';\n\n      default:\n        return 'Whatever.';\n    }\n  };\n}\n\nif (module) {\n  module.exports = Bob;\n}	\N	\N	0	1	2014-04-21 14:36:31	2014-04-21 14:36:31	178	bob.js
357	16	f20920299e3ef45fa1efa170	superseded	javascript	bob	function Bob() {\n  function strip(text) {\n    return text.trim();\n  }\n  function is_silent(text) {\n    return (!strip(text).length);\n  }\n  function is_questioning(text) {\n    return (/\\?$/.test(text));\n  }\n  function is_yelling(text) {\n    return (text.toUpperCase() == text && /[A-Z]/.test(text));\n  }\n  this.hey = function hey(stimulus) {\n    switch (true) {\n      case is_silent(stimulus):\n        return 'Fine. Be that way!';\n\n      case is_yelling(stimulus):\n        return 'Woah, chill out!';\n\n      case is_questioning(stimulus):\n        return 'Sure.';\n\n      default:\n        return 'Whatever.';\n    }\n  };\n}\n\nif (module) {\n  module.exports = Bob;\n}	\N	\N	0	2	2014-05-05 18:19:49	2014-05-05 18:19:49	178	bob.js
358	16	b9131154519fb72534dee632	superseded	javascript	bob	function Bob() {\n  function is_silent(text) {\n    return (!text.length);\n  }\n  function is_questioning(text) {\n    return (/\\?$/.test(text));\n  }\n  function is_yelling(text) {\n    return (text.toUpperCase() == text && /[A-Z]/.test(text));\n  }\n  this.hey = function hey(stimulus) {\n    stimulus = stimulus.trim();\n    switch (true) {\n      case is_silent(stimulus):\n        return 'Fine. Be that way!';\n\n      case is_yelling(stimulus):\n        return 'Woah, chill out!';\n\n      case is_questioning(stimulus):\n        return 'Sure.';\n\n      default:\n        return 'Whatever.';\n    }\n  };\n}\n\nif (module) {\n  module.exports = Bob;\n}	\N	\N	0	3	2014-06-04 06:44:54	2014-06-04 06:44:54	178	bob.js
359	16	503fe56b29b16a0be9b73d9d	superseded	javascript	bob	function Bob() {\n  function is_silent(text) {\n    return (text === '');\n  }\n  function is_questioning(text) {\n    return (text.slice(-1) === '?');\n  }\n  function is_yelling(text) {\n    return (text.toUpperCase() === text && /[A-Z]/.test(text));\n  }\n  function respond_to_stimulus(stimulus) {\n    stimulus = stimulus.trim();\n    switch (true) {\n      case is_silent(stimulus):\n        return 'Fine. Be that way!';\n\n      case is_yelling(stimulus):\n        return 'Woah, chill out!';\n\n      case is_questioning(stimulus):\n        return 'Sure.';\n\n      default:\n        return 'Whatever.';\n    }\n  }\n\n  // public interface\n  this.hey = respond_to_stimulus;\n}\n\nif (module) {\n  module.exports = Bob;\n}	\N	\N	0	4	2014-06-06 06:23:32	2014-06-06 06:23:32	178	bob.js
360	16	3c8b9573caa049209cc42188	superseded	javascript	bob	function is_silent(text) {\n  return (text === '');\n}\nfunction is_yelling(text) {\n  return (text.toUpperCase() === text && /[A-Z]/.test(text));\n}\nfunction is_questioning(text) {\n  return (text.slice(-1) === '?' && !is_yelling(text));\n}\n\nfunction Bob() {\n  var DEFAULT = 'default'; // weird\n  var RESPONSES = [\n    { test: is_silent,      result: 'Fine. Be that way!' },\n    { test: is_yelling,     result: 'Woah, chill out!' },\n    { test: is_questioning, result: 'Sure.' },\n    { test: DEFAULT,        result: 'Whatever.' }\n  ];\n\n  function respond_to(stimulus) {\n    var response;\n    stimulus = stimulus.trim();\n    RESPONSES.some(function(registered_response) {\n      var test_method = registered_response.test;\n      if (!response && test_method === DEFAULT || test_method(stimulus)) {\n        response = registered_response.result;\n        return true;\n      }\n    });\n    return response;\n  }\n\n  // public interface\n  this.hey = function respond_to_stimulus(stimulus) {\n    return respond_to(stimulus);\n  };\n}\n\nif (module) {\n  module.exports = Bob;\n}	\N	\N	0	5	2014-06-11 03:44:07	2014-06-11 03:44:07	178	bob.js
361	16	52442d304b0ad5b705878332	superseded	javascript	bob	function is_silent(text) {\n  return (text === '');\n}\nfunction is_yelling(text) {\n  return (text.toUpperCase() === text && /[A-Z]/.test(text));\n}\nfunction is_questioning(text) {\n  return (text.slice(-1) === '?' && !is_yelling(text));\n}\n\nfunction Bob() {\n  var DEFAULT = 'default'; // weird\n  var RESPONSES = [\n    { test: is_silent,      result: 'Fine. Be that way!' },\n    { test: is_yelling,     result: 'Woah, chill out!' },\n    { test: is_questioning, result: 'Sure.' },\n    { test: DEFAULT,        result: 'Whatever.' }\n  ];\n\n  function respond_to(stimulus) {\n    var response;\n    stimulus = stimulus.trim();\n    RESPONSES.some(function(registered_response) {\n      var test_method = registered_response.test;\n      if (test_method === DEFAULT || test_method(stimulus)) {\n        response = registered_response.result;\n        return true;\n      }\n    });\n    return response;\n  }\n\n  // public interface\n  this.hey = function respond_to_stimulus(stimulus) {\n    return respond_to(stimulus);\n  };\n}\n\nif (module) {\n  module.exports = Bob;\n}	\N	\N	0	6	2014-07-09 18:29:59	2014-07-09 18:29:59	178	bob.js
362	16	697e2adc23b5d83ef784ac15	pending	javascript	bob	function Reaction(input) {\n  this.input = input;\n  this.test = function() { return true; };\n  this.response = 'Whatever.';\n  this.get_response = function() { return this.response; };\n}\n\nfunction SilentReaction() {\n  Reaction.apply(this, arguments);\n  this.test = function is_silent() { return (this.input === ''); };\n  this.response = 'Fine. Be that way!';\n}\nSilentReaction.prototype = Object.create(Reaction.prototype);\n\nfunction YellingReaction() {\n  Reaction.apply(this, arguments);\n  this.test = function is_yelling() { return (this.input.toUpperCase() === this.input && /[A-Z]/.test(this.input)); };\n  this.response = 'Woah, chill out!';\n}\nYellingReaction.prototype = Object.create(Reaction.prototype);\n\nfunction QuestioningReaction() {\n  Reaction.apply(this, arguments);\n  this.test = function is_questioning() { return (this.input.slice(-1) === '?' && !new YellingReaction(this.input).test()); };\n  this.response = 'Sure.';\n}\nQuestioningReaction.prototype = Object.create(Reaction.prototype);\n\nfunction Bob() {\n  var REACTIONS = [ SilentReaction, YellingReaction, QuestioningReaction, Reaction ];\n\n  function respond_to(stimulus) {\n    var response;\n    stimulus = stimulus.trim();\n    REACTIONS.some(function(AReaction) {\n      var reaction = new AReaction(stimulus);\n      if (reaction.test()) {\n        response = reaction.get_response();\n        return true;\n      }\n    });\n    return response;\n  }\n\n  this.hey = respond_to;\n}\n\nif (module) {\n  module.exports = Bob;\n}	\N	\N	0	7	2014-07-16 16:09:53	2014-07-16 16:09:53	178	bob.js
363	16	5ea545ead38cece02e12f1d7	pending	python	bob	class Bob(object):\n\n    def hey(self, query):\n        if not query or not query.strip():\n            return 'Fine. Be that way!'\n        if query.upper() == query:\n            return 'Woah, chill out!'\n        if query[-1] == '?':\n            return 'Sure.'\n        return 'Whatever.'	\N	\N	0	1	2014-02-18 09:49:00	2014-02-18 09:49:00	179	bob.py
372	19	ca0eb42a43cde819643adf76	superseded	ruby	robot-name	class Robot\n\n  attr_reader :name\n\n  @@all_names = []\n\n  def initialize\n    @name = random_name\n  end\n\n  def reset\n    @name = random_name\n  end\n\n  private\n\n  def random_name\n    (0...2).map{ ('a'..'z').to_a[rand(26)] }.join +\n      (0...3).map{ (0..9).to_a[rand(10)] }.join\n  end\n\nend	\N	\N	0	1	2013-12-08 20:25:32	2013-12-08 20:25:32	184	robot-name.rb
364	16	b018f4867865f8f851a5b00e	pending	elixir	anagram	defmodule Anagram do\n  def match(word, words) do\n    words\n    |> exclude_similar(word)\n    |> select_anagrams(fingerprint(word))\n  end\n\n  def exclude_similar(words, word) do\n    Enum.filter(words, &different?(word, &1))\n  end\n\n  defp select_anagrams(words, fingerprint) do\n    Enum.filter(words, &anagram?(fingerprint, &1))\n  end\n\n  defp different?(word1, word2) do\n    word1 != word2\n  end\n\n  def anagram?(fingerprint1, word) do\n    fingerprint1 == fingerprint(word)\n  end\n\n  defp fingerprint(word) do\n    word\n    |> String.downcase\n    |> String.to_char_list!\n    |> Enum.sort\n  end\nend	\N	\N	0	2	2014-02-02 20:09:15	2014-02-02 20:09:15	180	anagram.exs
365	16	fe63cd7eb750229f3bc431da	superseded	elixir	anagram	defmodule Anagram do\n  def match(word, words) do\n    Enum.filter(words, &filter_anagrams(fingerprint(word), &1))\n  end\n\n  defp different_words?(word1, word2) do\n    word1 != word2\n  end\n\n  defp filter_anagrams(source, test_word) do\n    different_words?(source, test_word) && source == fingerprint(test_word)\n  end\n\n  defp fingerprint(word) do\n    word\n    |> String.downcase\n    |> String.to_char_list!\n    |> Enum.sort\n    |> String.from_char_list!\n  end\nend	\N	\N	0	1	2014-02-13 03:29:49	2014-02-13 03:29:49	180	anagram.exs
366	19	c96d1e9b4db9945e9607def3	done	ruby	accumulate	class Array\n  def accumulate\n    new_array = []\n    each do |x|\n      new_array << (yield x)\n    end\n    new_array\n  end\nend	2014-02-19 16:40:07	\N	0	1	2014-02-16 14:10:21	2014-02-16 14:10:21	181	array.rb
367	19	cc928e4132a7a2b52e075d43	superseded	ruby	bob	module EmotionHelper\n  # Determines the emotion of a message\n  # Returns a symbol of the emotion\n  def emotion(text)\n    if text.upcase == text and text.gsub(/[a-zA-Z]/, '') != text\n      :angry\n    elsif text[-1] == '?'\n      :query\n    elsif text.gsub(/[\\s)(]/,'').empty?\n      :taciturn\n    else\n      :indifferent\n    end\n  end\nend\n\nclass Bob\n  include EmotionHelper\n\n  attr_accessor :responses\n\n  def initialize\n    @responses = { angry: 'Woah, chill out!', query: 'Sure.',\n      taciturn: 'Fine. Be that way!', indifferent: 'Whatever.' }\n  end\n\n  def hey(text)\n    responses[emotion(text)]\n  end\nend	\N	\N	0	1	2014-01-17 01:10:23	2014-01-17 01:10:23	182	bob.rb
368	19	f3f86a3043ddaa650e20eeb7	superseded	ruby	bob	class Bob\n  # This is the hash of responses that the Bob class can give.\n  def self.responses\n    { angry: 'Woah, chill out!', inquisitive: 'Sure.',\n      taciturn: 'Fine. Be that way!', indifferent: 'Whatever.' }\n  end\n\n  def hey(text)\n    self.class.responses[emotion(text)]\n  end\n\n  # Determines how Bob interprets a message\n  # Returns a symbol of the emotion he feels the text is\n  def emotion(text)\n    if text.upcase == text && text.gsub(/[a-zA-Z]/, '') != text\n      :angry\n    elsif text[-1] == '?'\n      :inquisitive\n    elsif text.gsub(/[\\s)(]/,'').empty?\n      :taciturn\n    else\n      :indifferent\n    end\n  end\nend	\N	\N	0	2	2014-01-28 17:09:32	2014-01-28 17:09:32	182	bob.rb
369	19	4905f8e6b4d22eca40a70a34	superseded	ruby	bob	class Bob\n  # This is the hash of responses that the Bob class can give.\n  def self.responses\n    { angry: 'Woah, chill out!', inquisitive: 'Sure.',\n      taciturn: 'Fine. Be that way!', indifferent: 'Whatever.' }\n  end\n\n  def hey(text)\n    if angry?(text)\n      self.class.responses[:angry]\n    elsif inquisitive?(text)\n      self.class.responses[:inquisitive]\n    elsif taciturn?(text)\n      self.class.responses[:taciturn]\n    else\n      self.class.responses[:indifferent]\n    end\n  end\n\n  private\n\n  def angry?(text)\n    text.upcase == text && text.gsub(/[a-zA-Z]/, '') != text\n  end\n\n  def inquisitive?(text)\n    text[-1] == '?'\n  end\n\n  def taciturn?(text)\n    text.gsub(/[\\s)(]/,'').empty?\n  end\nend	\N	\N	0	3	2014-05-18 17:42:24	2014-05-18 17:42:24	182	bob.rb
370	19	569a6c5e6d3beaece718bf41	done	ruby	bob	class Message\n  attr_reader :text\n\n  def initialize(text)\n    @text = text\n  end\n\n  def angry?\n    text.upcase == text && text.gsub(/[a-zA-Z]/, '') != text\n  end\n\n  def inquisitive?\n    text.end_with? '?'\n  end\n\n  def taciturn?\n    text.strip.empty?\n  end\nend\n\nclass Bob\n  def hey(text)\n    message = Message.new(text)\n\n    if message.angry?\n      "Woah, chill out!"\n    elsif message.inquisitive?\n      "Sure."\n    elsif message.taciturn?\n      "Fine. Be that way!"\n    else\n      "Whatever."\n    end\n  end\nend	2014-06-11 06:03:39	\N	0	4	2014-06-07 21:56:50	2014-06-07 21:56:50	182	bob.rb
371	19	63fab77c64f1dc47ab861fa7	done	python	queen-attack	"""Queen Attack"""\n\nBOARD_ROWS, BOARD_COLS = (8, 8)\n\n\ndef board(white, black):\n    """Return a chessboard representation."""\n    check_queens(white, black)\n\n    white_row, white_col = white\n    black_row, black_col = black\n\n    rows = [["0"] * BOARD_COLS for _ in xrange(BOARD_ROWS)]\n    rows[white_row][white_col] = "W"\n    rows[black_row][black_col] = "B"\n\n    return ["".join(row) for row in rows]\n\n\ndef can_attack(white, black):\n    """Return true if two queens can attack each other."""\n    check_queens(white, black)\n\n    white_row, white_col = white\n    black_row, black_col = black\n\n    return white_row == black_row or white_col == black_col or \\\n        white_row - white_col == black_row - black_col or \\\n        white_row + white_col == black_row + black_col\n\n\ndef check_queens(white, black):\n    """Check if queens' coordinates are valid."""\n    if white == black:\n        raise ValueError(white)\n\n    for r, c in (white, black):\n        if not (0 <= r < BOARD_ROWS) or not (0 <= c < BOARD_COLS):\n            raise ValueError((r, c))	2014-01-28 19:28:56	\N	0	1	2014-01-24 05:34:35	2014-01-24 05:34:35	183	queen_attack.py
373	19	9c323c09a9dd97004ed475d7	superseded	ruby	robot-name	class Robot\n\n  attr_reader :name\n\n  @@all_names = []\n\n  def initialize\n    @name = random_name\n    @@all_names << @name\n  end\n\n  def reset\n    @@all_names.delete(@name)\n    @name = random_name\n  end\n\n  private\n\n  def random_name\n    candidate = (0...2).map{ ('a'..'z').to_a[rand(26)] }.join +\n      (0...3).map{ (0..9).to_a[rand(10)] }.join\n    if @@all_names.include? candidate\n      raise CollisionError\n    end\n  end\n\nend	\N	\N	0	2	2014-01-24 06:37:03	2014-01-24 06:37:03	184	robot-name.rb
374	19	cf109772e18250827ef83380	superseded	ruby	robot-name	class Robot\n\n  attr_reader :name\n\n  @@all_names = []\n\n  def initialize\n    @name = random_name\n    @@all_names << @name\n  end\n\n  def reset\n    @@all_names.delete(@name)\n    @name = random_name\n  end\n\n  private\n\n  def random_name\n    candidate = ""\n    loop do\n      candidate = (0...2).map{ ('a'..'z').to_a[rand(26)] }.join +\n        (0...3).map{ (0..9).to_a[rand(10)] }.join\n      break unless @@all_names.include? candidate\n    end\n    candidate\n  end\n\nend	\N	\N	0	3	2014-01-26 12:18:54	2014-01-26 12:18:54	184	robot-name.rb
375	19	da2e7ce3278dac6b94d6d9a4	done	ruby	robot-name	class Robot\n\n  attr_reader :name\n\n  @@all_names = []\n\n  def initialize\n    @name = random_name\n    @@all_names << @name\n  end\n\n  def reset\n    @@all_names.delete(@name)\n    @name = random_name\n  end\n\n  # private\n\n  def random_name\n    candidate = ""\n    loop do\n      candidate = gen_name [ 'a'..'z', 'a'..'z', '0'..'9', '0'..'9', '0'..'9' ]\n      break unless @@all_names.include? candidate\n    end\n    candidate\n  end\n\n  def gen_name pat\n    pat.each_with_object([]) { |p, a|\n      v2 = p.to_a\n      a << v2[Random.rand(v2.size)]\n    }.join\n  end\n\n\nend	2014-04-30 05:03:41	\N	0	4	2014-04-22 13:24:48	2014-04-22 13:24:48	184	robot-name.rb
376	19	a6c87827168053aaf7679fc6	done	javascript	word-count	var Words = function(inp) {\n  var w = inp.split(/[^\\w]+/g);\n  var ret = {};\n  for(var i=0;i<w.length;i++) {\n    if(w[i] === '') continue;\n    if(Object.hasOwnProperty(ret,w[i])) ret[w[i]]++;\n    else ret[w[i]]=1;\n  }\n  this.count = ret;\n}\n\nmodule.exports = Words;	2014-05-23 21:17:21	\N	0	1	2014-05-14 11:53:13	2014-05-14 11:53:13	185	word-count.js
377	19	b5e5a02662824773704a1a5d	done	ruby	raindrops	def has_as_primefactor?(value, primefactor)\n  value % primefactor == 0\nend\n\nclass Raindrops\n  def self.convert(i)\n    output = ''\n    output += 'Pling' if has_as_primefactor?(i, 3)\n    output += 'Plang' if has_as_primefactor?(i, 5)\n    output += 'Plong' if has_as_primefactor?(i, 7)\n    if output.empty?\n      i.to_s\n    else\n      output\n    end\n  end\nend	2014-04-28 23:50:50	\N	0	1	2014-04-22 01:19:43	2014-04-22 01:19:43	186	raindrops.rb
378	20	8011d0b0958c43ccd17aeb12	superseded	scala	nucleotide-count	class DNA(nucleotides: String) {\n  nucleotides.map {\n    _ match {\n      case 'A' | 'C' | 'T' | 'G' =>\n      case _ => throw new IllegalArgumentException\n    }\n  }\n\n  def count(nucleotide: Char) = nucleotide match {\n    case 'A' | 'C' | 'T' | 'G' | 'U' => nucleotides.count { _ == nucleotide }\n    case _ => throw new IllegalArgumentException\n  }\n\n  def nucleotideCounts() = {\n    "ACTG".toCharArray.foldLeft(Map[Char, Int]().withDefaultValue(0)) {\n      (memo, nucleotide) => memo + (nucleotide -> count(nucleotide))\n    }\n  }\n}	\N	\N	0	1	2014-07-21 00:55:57	2014-07-21 00:55:57	187	DNA.scala
379	20	98a8ec812e940088f970203f	done	scala	nucleotide-count	class DNA(nucleotides: String) {\n  nucleotides.map {\n    _ match {\n      case 'A' | 'C' | 'T' | 'G' =>\n      case _ => throw new IllegalArgumentException\n    }\n  }\n\n  def count(nucleotide: Char) = nucleotide match {\n    case 'A' | 'C' | 'T' | 'G' | 'U' => nucleotides.count { _ == nucleotide }\n    case _ => throw new IllegalArgumentException\n  }\n\n  def nucleotideCounts() = {\n    "ACTG".foldLeft(Map[Char, Int]().withDefaultValue(0)) {\n      (memo, nucleotide) => memo + (nucleotide -> count(nucleotide))\n    }\n  }\n}	2014-07-26 19:31:06.48527	\N	0	2	2014-07-24 05:48:32	2014-07-24 05:48:32	187	DNA.scala
380	20	090b48897ba80c3fef4f0555	done	ruby	etl	class ETL\n  def self.transform(data)\n    {}.tap do |res|\n      data.each { |k,v| v.each { |w| res[w.downcase] = k }}\n    end\n  end\nend	2014-07-25 22:32:55	\N	0	1	2014-07-20 06:27:12	2014-07-20 06:27:12	188	etl.rb
381	35	24b9ce6f15f32f1c90ad4d81	superseded	javascript	bob	var Bob = function() {};\nmodule.exports = Bob;\n\nBob.prototype.hey = function(message) {\n\tif (this.is_empty_message(message)) {\n\t\treturn 'Fine. Be that way!';\n\t} else if (this.is_shout(message)) {\n\t\treturn 'Woah, chill out!';\n\t} else if (this.is_question(message)) {\n\t\treturn 'Sure.';\n\t} else {\n\t\treturn 'Whatever.';\n\t}\n}\n\nBob.prototype.is_shout = function(message) {\n\treturn message.toUpperCase() == message;\n}\n\nBob.prototype.is_empty_message = function(message) {\n\treturn message.trim() === '';\n}\n\nBob.prototype.is_question = function(message) {\n\treturn '?' === message.slice(-1);\n}	\N	\N	0	2	2013-12-22 09:33:53	2013-12-22 09:33:53	189	bob.js
404	34	26c21fed1265c06126feba01	done	ruby	gigasecond	require 'date'\nrequire 'time'\n\nclass Gigasecond\n\tdef initialize(date)\n\t\tyear = date.year\n\t\tmonth = date.month\n\t\tday = date.day\n\t\t@birthday = Time.new(year, month, day)\n\tend\n\n\tdef date\n\t\t@anniversary = @birthday + (10**9)\n\t\treturn @anniversary.to_date\n\tend\nend	2014-05-02 15:13:05	\N	0	1	2014-04-30 01:50:35	2014-04-30 01:50:35	200	gigasecond.rb
405	34	a1f0ee01ebef568c7e524b8c	superseded	clojure	anagram	(ns anagram\n    (:require [clojure.string :as string]))\n\n(defn- letters-of-word\n  [word]\n  (frequencies (string/lower-case word))\n)\n\n(defn- compare-letters-for\n  [word]\n  (let [word-letters (letters-of-word word)]\n    (fn [proposition] \n      (= word-letters (letters-of-word proposition))\n    )\n  )\n)\n\n(defn- check-anagram-for\n  [word]\n  (let [word-letters-comparator (compare-letters-for word)]\n    (fn [proposition]\n      (and  (not= word proposition)\n            (word-letters-comparator proposition)))))\n\n(defn anagrams-for [word propositions]\n  (filter (check-anagram-for word) propositions))	\N	\N	0	7	2014-04-07 18:38:16	2014-04-07 18:38:16	201	anagram.clj
406	34	d96dee1f645a4db3dfa029c0	done	clojure	anagram	(ns anagram\n    (:require [clojure.string :as string]))\n\n(defn- letters-of-word\n  [word]\n  (frequencies (string/lower-case word)))\n\n(defn- letters-comparator-for\n  [word]\n  (let [word-letters (letters-of-word word)]\n    (fn [proposition] \n      (= word-letters (letters-of-word proposition)))))\n\n(defn- anagram-checker-for\n  [word]\n  (let [word-letters-comparator (letters-comparator-for word)]\n    (fn [proposition]\n      (and  (not= word proposition)\n            (word-letters-comparator proposition)))))\n\n(defn anagrams-for [word propositions]\n  (filter (anagram-checker-for word) propositions))	2014-05-03 20:24:32	\N	0	10	2014-04-22 23:59:32	2014-04-22 23:59:32	201	anagram.clj
382	35	480bcb22fbd134cca5aa01e7	superseded	javascript	bob	var Bob = function() {}; module.exports = Bob;\n\nBob.prototype.hey = function(message) {\n\tif (this.is_empty_message(message)) {\n\t\treturn 'Fine. Be that way!';\n\t} else if (message.toUpperCase() == message) {\n\t\treturn 'Woah, chill out!';\n\t} else if (this.is_question(message)) {\n\t\treturn 'Sure.';\n\t} else {\n\t\treturn 'Whatever.';\n\t}\n}\n\nBob.prototype.is_empty_message = function(message) {\n\treturn message.trim() === '';\n}\n\nBob.prototype.is_question = function(message) {\n\treturn '?' === message.slice(-1);\n}	\N	\N	0	1	2013-12-24 20:14:11	2013-12-24 20:14:11	189	bob.js
383	35	0617c9fa99ad6d321c1326b5	superseded	javascript	bob	var Bob = function() {};\nmodule.exports = Bob;\n\nString.prototype.is_empty = function() {\n\treturn this.trim() === '';\n}\n\nString.prototype.is_all_caps = function() {\n\treturn this.toUpperCase() == this;\n}\n\nString.prototype.ends_with = function(target) {\n\treturn this.slice(-1) === target;\n}\n\nBob.prototype.hey = function(message) {\n\n\tif (message.is_empty()) {\n\t\treturn 'Fine. Be that way!';\n\t}\n\n\tif (message.is_all_caps()) {\n\t\treturn 'Woah, chill out!';\n\t}\n\n\tif (message.ends_with('?')) {\n\t\treturn 'Sure.';\n\t}\n\n\treturn 'Whatever.';\n}	\N	\N	0	4	2014-02-03 10:46:49	2014-02-03 10:46:49	189	bob.js
384	35	77446c7e537261c0249372a8	done	javascript	bob	var Bob = function() {};\nmodule.exports = Bob;\n\nString.prototype.isEmpty = function() {\n\treturn this.trim() === '';\n}\n\nString.prototype.isAllCaps = function() {\n\treturn this.toUpperCase() == this;\n}\n\nString.prototype.endsWith = function(target) {\n\treturn this.slice(-1) === target;\n}\n\nBob.prototype.hey = function(message) {\n\n\tif (message.isEmpty()) {\n\t\treturn 'Fine. Be that way!';\n\t}\n\n\tif (message.isAllCaps()) {\n\t\treturn 'Woah, chill out!';\n\t}\n\n\tif (message.endsWith('?')) {\n\t\treturn 'Sure.';\n\t}\n\n\treturn 'Whatever.';\n}	2014-05-05 10:12:41	\N	0	5	2014-04-28 01:53:07	2014-04-28 01:53:07	189	bob.js
385	35	e8dd5b445186da021007a488	superseded	javascript	bob	var Bob = function() {};\nmodule.exports = Bob;\n\nString.prototype.is_empty = function() {\n\treturn this.trim() === '';\n}\n\nString.prototype.is_all_caps = function() {\n\treturn this.toUpperCase() == this;\n}\n\nString.prototype.ends_with = function(target) {\n\treturn this.slice(-1) === target;\n}\n\nBob.prototype.hey = function(message) {\n\tif (message.is_empty()) {\n\t\treturn 'Fine. Be that way!';\n\t} else if (message.is_all_caps()) {\n\t\treturn 'Woah, chill out!';\n\t} else if (message.ends_with('?')) {\n\t\treturn 'Sure.';\n\t} else {\n\t\treturn 'Whatever.';\n\t}\n}	\N	\N	0	3	2014-05-23 18:30:08	2014-05-23 18:30:08	189	bob.js
386	35	068c45c230871d401fd3241e	superseded	ruby	anagram	Anagram = Struct.new(:word) do\n  def match(words)\n    words.select { |x| matches?(x) }\n  end\n\n  private\n\n  def matches?(other_word)\n    @sorted_word ||= word.chars.sort\n    other_word.chars.sort == @sorted_word\n  end\nend	\N	\N	0	1	2013-12-24 00:03:02	2013-12-24 00:03:02	190	anagram.rb
387	35	f9ebd77ddaef20b1d97da600	superseded	ruby	anagram	Anagram = Struct.new(:word) do\n  def match(words)\n    words.select { |x| anagram_of?(x) }\n  end\n\n  private\n\n  def anagram_of?(other_word)\n    alphabetize(other_word) == alphabetized_word\n  end\n\n  def alphabetized_word\n    @alphabetized_word ||= alphabetize(word)\n  end\n\n  def alphabetize(item)\n    item.chars.sort\n  end\nend	\N	\N	0	5	2014-01-03 04:56:07	2014-01-03 04:56:07	190	anagram.rb
388	35	3d4e2532a5c000d0415cafff	done	ruby	anagram	Anagram = Struct.new(:word) do\n  def match(words)\n    words.select { |x| anagram_of?(x) }\n  end\n\n  private\n\n  def anagram_of?(other_word)\n    alphabetize(other_word) == alphabetize(word)\n  end\n\n  def alphabetize(item)\n    item.chars.sort\n  end\nend	2014-03-18 18:42:19	\N	0	6	2014-03-15 21:49:22	2014-03-15 21:49:22	190	anagram.rb
389	35	1982ae6ae77309cace0c3e6a	superseded	ruby	anagram	Anagram = Struct.new(:word) do\n  def match(words)\n    words.select { |x| matches?(x) }\n  end\n\n  private\n\n  def matches?(other_word)\n    other_word.chars.sort == sorted_word\n  end\n\n  def sorted_word\n    # lazy initialization of @sorted_word\n    @sorted_word ||= word.chars.sort\n  end\nend	\N	\N	0	2	2014-05-22 20:05:25	2014-05-22 20:05:25	190	anagram.rb
390	35	cf96efd424cc2c63bd750c39	superseded	ruby	anagram	Anagram = Struct.new(:word) do\n  def match(words)\n    words.select { |x| is_anagram_of?(x) }\n  end\n\n  private\n\n  def is_anagram_of?(other_word)\n    other_word.chars.sort == sorted_word\n  end\n\n  def sorted_word\n    # lazy initialization of @sorted_word\n    @sorted_word ||= word.chars.sort\n  end\nend	\N	\N	0	3	2014-06-26 06:30:19	2014-06-26 06:30:19	190	anagram.rb
391	35	c6109a37bbf362ebda9b5ed7	superseded	ruby	anagram	Anagram = Struct.new(:word) do\n  def match(words)\n    words.select { |x| anagram_of?(x) }\n  end\n\n  private\n\n  def anagram_of?(other_word)\n    other_word.chars.sort == sorted_word\n  end\n\n  def sorted_word\n    # lazy initialization of @sorted_word\n    @sorted_word ||= word.chars.sort\n  end\nend	\N	\N	0	4	2014-07-18 07:58:15	2014-07-18 07:58:15	190	anagram.rb
392	35	60d9dbb30a3530b8bb7fc2ec	done	python	anagram	class Anagram:\n    def __init__(self, word):\n        self.word = word\n\n    def match(self, candidates):\n        sorted_word = sorted(self.word.lower())\n        matches = [word for word in candidates  if sorted(word.lower()) == sorted_word ]\n        matches = [word for word in matches if not word.lower() == self.word.lower()]\n        return matches	2014-02-12 13:10:19	\N	0	1	2014-02-06 00:52:45	2014-02-06 00:52:45	191	anagram.py
393	29	fd1f4c10c8ebd6f66669dee5	superseded	javascript	word-count	var words = function (message) {\n  return _getSanitizedWords(message).reduce(_countOccurrences, {});\n};\n\nvar _getSanitizedWords = function (message) {\n  return message.match(/\\w+/g).map(_toLower);\n};\n\nvar _toLower = function (word) {\n  return word.toLowerCase();\n};\n\nvar _countOccurrences = function (occurrences, word) {\n  if (!occurrences.hasOwnProperty(word)) occurrences[word] = 0;\n  occurrences[word] += 1\n\n  return occurrences;\n};\n\nmodule.exports = words;	\N	\N	0	3	2014-04-29 07:28:21	2014-04-29 07:28:21	192	word-count.js
475	17	563856a38202acf09775f41e	superseded	ruby	gigasecond	class Gigasecond\n  attr_reader :date\n  def initialize(date)\n    @date = date + (10**9 / (60*60*24))\n  end\nend	\N	\N	0	1	2014-04-13 19:23:03	2014-04-13 19:23:03	228	gigasecond.rb
394	29	3b06aeb157a2082446b3f75d	done	javascript	word-count	var words = function (message) {\n  return _getSanitizedWords(message).reduce(_countOccurrences, Object.create(null));\n};\n\nvar _getSanitizedWords = function (message) {\n  return message\n    .toLowerCase()\n    .match(/\\w+/g);\n};\n\nvar _countOccurrences = function (occurrences, word) {\n  occurrences[word] = (word in occurrences) ? occurrences[word] + 1 : 1;\n\n  return occurrences;\n};\n\nmodule.exports = words;	2014-05-09 09:05:15	\N	0	4	2014-05-08 17:32:40	2014-05-08 17:32:40	192	word-count.js
395	29	9e73a49adfad7e9ff7cf2fbf	superseded	javascript	word-count	var words = function (message) {\n  return _countOccurrences(_getSanitizedWords(message));\n};\n\nvar _getSanitizedWords = function (message) {\n  return message.split(' ').map(_sanitizeWord).filter(_emptyWords); \n};\n\nvar _sanitizeWord = function (word) {\n  return word.match(/\\w*/)[0].toLowerCase();\n};\n\nvar _emptyWords = function (word) {\n  return word !== '';\n};\n\nvar _countOccurrences = function (words) {\n  var occurrences = {};\n\n  words.forEach(function (word) {\n    if (!occurrences[word]) occurrences[word] = 0;\n\n    occurrences[word] += 1\n  });\n\n  return occurrences;\n};\n\nmodule.exports = words;	\N	\N	0	1	2014-05-21 16:43:54	2014-05-21 16:43:54	192	word-count.js
396	29	205364267e3b85be35f91789	superseded	javascript	word-count	var words = function (message) {\n  return _getSanitizedWords(message).reduce(_countOccurrences, {});\n};\n\nvar _getSanitizedWords = function (message) {\n  return message.match(/\\w*/g).filter(_emptyWords).map(_toLower);\n};\n\nvar _emptyWords = function (word) {\n  return word !== '';\n};\n\nvar _toLower = function (word) {\n  return word.toLowerCase();\n};\n\nvar _countOccurrences = function (occurrences, word) {\n  if (!occurrences.hasOwnProperty(word)) occurrences[word] = 0;\n  occurrences[word] += 1\n\n  return occurrences;\n};\n\nmodule.exports = words;	\N	\N	0	2	2014-06-03 14:02:16	2014-06-03 14:02:16	192	word-count.js
397	29	5d488e054b3761afbd78fee0	done	go	etl	package etl\n\nimport "strings"\n\ntype legacyFormat map[int][]string\ntype newFormat map[string]int\n\nfunc Transform(legacy legacyFormat) newFormat {\n\tout := make(newFormat)\n\n\tfor score, letters := range legacy {\n\t\tfor _, letter := range letters {\n\t\t\tout[strings.ToLower(letter)] = score\n\t\t}\n\t}\n\n\treturn out\n}	2014-06-01 11:34:14	\N	0	1	2014-05-29 15:36:56	2014-05-29 15:36:56	193	etl.go
398	29	4c860e2e8b128c112374fa8e	done	ruby	hamming	class Hamming\r\n\r\n  def self.compute(strand1, strand2)\r\n    min_length = [strand1.length, strand2.length].min\r\n    hamming_distance = 0\r\n    (0...min_length).each do |i|\r\n      hamming_distance += 1 unless strand1[i] == strand2[i]\r\n    end\r\n    hamming_distance\r\n  end\r\nend	2014-05-25 22:11:18	\N	0	1	2014-05-15 10:08:04	2014-05-15 10:08:04	194	hamming.rb
399	29	1dc8f696f71cbbcb8a8a85ca	done	ruby	allergies	class Allergies\n\n  ALLERGY_SCORES = {\n    128 => 'cats',\n    64 => 'pollen',\n    32 => 'chocolate',\n    16 => 'tomatoes',\n    8 => 'strawberries',\n    4 => 'shellfish',\n    2 => 'peanuts',\n    1 => 'eggs'\n  }\n\n  def initialize(allergy_score)\n    @score = allergy_score\n  end\n\n  def list\n    allergy_list = []\n    return allergy_list if @score == 0\n\n    ALLERGY_SCORES.each do |allergy_score, food|\n      allergy_list << food if @score / allergy_score >= 1\n      @score = @score % allergy_score\n    end\n    allergy_list.reverse\n  end\n\n  def allergic_to?(food)\n    list.include?(food)\n  end\nend	2014-07-26 19:31:06.724935	\N	0	1	2014-07-22 04:04:22	2014-07-22 04:04:22	195	allergies.rb
400	29	4bd4ef0c341742a11173f181	done	python	nucleotide-count	class DNA(object):\n\n    nucleotides = "ACGT"\n\n    def __init__(self, strand):\n        self.strand = strand\n\n    def count(self, nucleotide):\n        if nucleotide in DNA.nucleotides:\n            count = self.strand.count(nucleotide)\n        elif nucleotide == 'U':\n            count = 0\n        else:\n            raise ValueError, nucleotide + " is not a nucleotide."\n        return count\n\n    def nucleotide_counts(self):\n        counts = {}\n        for nucleotide in DNA.nucleotides:\n            counts[nucleotide] = self.strand.count(nucleotide)\n        return counts	2014-06-02 04:19:50	\N	0	1	2014-05-26 14:52:51	2014-05-26 14:52:51	196	dna.py
401	34	4aeabcd488967d65728af262	done	ruby	raindrops	class Raindrops\r\n\tdef self.convert(num)\r\n\t\tnoise = ""\r\n\t\tif num%3 == 0\r\n\t\t\tnoise = noise + 'Pling'\r\n\t\tend\r\n\t\tif num%5 == 0\r\n\t\t\tnoise = noise + 'Plang'\r\n\t\tend\r\n\t\tif num%7 == 0\r\n\t\t\tnoise = noise + 'Plong'\r\n\t\tend\r\n\t\tif num%3!=0 && num%5!=0 && num%7 !=0\r\n\t\t\tnoise = num\r\n\t\tend\r\n\t\tnoise.to_s\r\n\tend\r\nend	2014-04-15 12:55:53	\N	0	1	2014-04-08 06:21:44	2014-04-08 06:21:44	197	raindrops.rb
402	34	cc87e923d268c26be825db83	done	haskell	roman-numerals	module Roman (numerals) where\n\nimport Data.List (find)\n\nnumerals :: Int -> String\nnumerals n = case tuple of\n               Just (q, sym) -> sym ++ numerals (n - q)\n               Nothing       -> ""\n  where tuple = find (\\(q, _) -> n >= q) symbols\n\nsymbols :: [(Int, String)]\nsymbols = [(1000, "M")\n          ,(900,  "CM")\n          ,(500,  "D")\n          ,(400,  "CD")\n          ,(100,  "C")\n          ,(90,   "XC")\n          ,(50,   "L")\n          ,(40,   "XL")\n          ,(10,   "X")\n          ,(9,    "IX")\n          ,(5,    "V")\n          ,(4,    "IV")\n          ,(1,    "I")\n          ]	2014-06-20 18:06:52	\N	0	1	2014-06-12 05:04:58	2014-06-12 05:04:58	198	Roman.hs
403	34	9e42e195fffaa331b4104463	done	python	bob	#!/usr/bin/python\nimport re\n\nQUESTION = re.compile(".*\\?$");\nYELLING  = re.compile("[^a-z]+$");\nIGNORING = re.compile("\\s*$");\nclass Bob:\n   def hey(self, message):\n      if message == None or IGNORING.match( message ): \n         return 'Fine. Be that way!'\n\n      if YELLING.match( message ):\n         return 'Woah, chill out!'\n      elif QUESTION.match( message ):\n         return 'Sure.'\n      else:\n         return 'Whatever.'	2014-06-16 03:12:45	\N	0	1	2014-06-08 00:54:22	2014-06-08 00:54:22	199	bob.py
407	34	2be1727b8d824b70f9d59324	superseded	clojure	anagram	(ns anagram\n    (:require [clojure.string :as string]))\n\n(defn- word-description\n  [word]\n  (frequencies (string/lower-case word)))\n\n(defn- check-anagram-for\n  [word]\n  (let [wdesc (word-description word)]\n    (fn [proposition] \n      (and (not= word proposition) \n           (= wdesc (word-description proposition))))))\n\n(defn anagrams-for [word propositions]\n  (filter (check-anagram-for word) propositions))\n\n;(defn- word-description\n  ;[word]\n  ;(frequencies (string/lower-case word))\n;)\n\n;(defn- same-letters?\n  ;[word]\n  ;(let [wdesc] (word-description word)\n    ;(fn [proposition] \n      ;(= wdesc (word-description proposition))\n    ;)\n  ;)\n;)\n\n;(defn- anagram? \n  ;[word]\n  ;(and (not= word proposition)\n       ;(fn [proposition] ((same-letters? word) proposition))\n  ;)\n;)\n\n;(defn anagrams-for [word propositions]\n  ;(filter (anagram? word) propositions)\n;)	\N	\N	0	6	2014-04-30 16:51:33	2014-04-30 16:51:33	201	anagram.clj
408	34	effbb5f74baec1443cc4b3c9	superseded	clojure	anagram	(ns anagram\n    (:require [clojure.string :as string]))\n\n(defn- letters-of-word\n  [word]\n  (frequencies (string/lower-case word)))\n\n(defn- compare-letters-for\n  [word]\n  (let [word-letters (letters-of-word word)]\n    (fn [proposition] \n      (= word-letters (letters-of-word proposition)))))\n\n(defn- check-anagram-for\n  [word]\n  (let [word-letters-comparator (compare-letters-for word)]\n    (fn [proposition]\n      (and  (not= word proposition)\n            (word-letters-comparator proposition)))))\n\n(defn anagrams-for [word propositions]\n  (filter (check-anagram-for word) propositions))	\N	\N	0	9	2014-05-02 02:34:41	2014-05-02 02:34:41	201	anagram.clj
409	34	952e711dd940417493197079	superseded	clojure	anagram	(ns anagram\n    (:require [clojure.string :as string]))\n\n\n(defn- characters-frequencies\n  [word]\n  (frequencies (string/lower-case word)))\n\n(defn- anagram? \n  [word]\n  (let [word-caracterisation (characters-frequencies word)]\n    (fn [proposition] \n      (and (not= word proposition) \n           (= word-caracterisation (characters-frequencies proposition)))\n    )\n  )\n)\n\n(defn anagrams-for [word propositions]\n  (filter (anagram? word) propositions))	\N	\N	0	5	2014-06-06 07:00:53	2014-06-06 07:00:53	201	anagram.clj
410	34	83f4194057d87b7b520ef6c2	superseded	clojure	anagram	(ns anagram\n    (:require [clojure.string :as string]))\n\n(defn- letters-of-word\n  [word]\n  (frequencies (string/lower-case word))\n)\n\n(defn- compare-letters-for\n  [word]\n  (let [word-letters (letters-of-word word)]\n    (fn [proposition] \n      (= word-letters (letters-of-word proposition)))))\n\n(defn- check-anagram-for\n  [word]\n  (let [word-letters-comparator (compare-letters-for word)]\n    (fn [proposition]\n      (and  (not= word proposition)\n            (word-letters-comparator proposition)))))\n\n(defn anagrams-for [word propositions]\n  (filter (check-anagram-for word) propositions))	\N	\N	0	8	2014-06-23 09:07:08	2014-06-23 09:07:08	201	anagram.clj
411	34	e012279ef08c433480a12930	superseded	clojure	anagram	(ns anagram\n    (require [clojure.string :as string]))\n\n\n(defn- characters-frequencies\n  [word]\n  (frequencies (string/lower-case word)))\n\n(defn- anagram? \n  [word]\n  (let [word-caracterisation (characters-frequencies word)]\n    (fn [proposition] \n      (and (not= word proposition) \n           (= word-caracterisation (characters-frequencies proposition)))\n    )\n  )\n)\n\n(defn anagrams-for [word propositions]\n  (filter (anagram? word) propositions))	\N	\N	0	4	2014-06-26 15:08:42	2014-06-26 15:08:42	201	anagram.clj
412	34	9927212c31f21b68f02df3a4	superseded	clojure	anagram	(ns anagram\n    (require [clojure.string :as string]))\n\n\n(defn characters-frequencies\n  [word]\n  (frequencies (string/lower-case word)))\n\n(defn anagrams? \n  [word proposition]\n  (and (not= word proposition) (= (characters-frequencies word) (characters-frequencies proposition))))\n\n(defn anagrams-for [word propositions]\n  (filter (fn [w] (anagrams? word w)) propositions))	\N	\N	0	1	2014-07-06 23:17:36	2014-07-06 23:17:36	201	anagram.clj
413	34	9a5a836c580d99c85b3ba99b	superseded	clojure	anagram	(ns anagram\n  (require [clojure.string :as string]))\n\n(defn characters-frequencies\n  [word]\n  (frequencies (string/lower-case word)))\n\n(defn anagrams?\n  [word proposition]\n  (and (not= word proposition)\n       (= (characters-frequencies word) (characters-frequencies proposition))))\n\n(defn anagrams-for \n  [word propositons]\n  (filter (fn [w] (anagrams? word w)) propositons))	\N	\N	0	2	2014-07-08 08:29:19	2014-07-08 08:29:19	201	anagram.clj
414	34	69f6efdfaa6f6c01b4560ac8	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :as string]))\n\n(defn characters-frequencies\n  [word]\n  (frequencies (string/lower-case word)))\n\n(defn anagrams?\n  [word proposition]\n  (and (not= word proposition)\n       (= (characters-frequencies word) (characters-frequencies proposition))))\n\n(defn anagrams-for \n  [word propositons]\n  (filter (fn [w] (anagrams? word w)) propositons))	\N	\N	0	3	2014-07-15 17:46:00	2014-07-15 17:46:00	201	anagram.clj
415	34	1980f9df316dde4cd355c9f8	done	ruby	proverb	class Proverb\n\n  attr_reader :desired, :qualifier\n\n  def initialize(*desired_verses)\n    if desired_verses.last.class == Hash\n      @desired = desired_verses[0..-3]\n      @qualifier = desired_verses.last\n    else\n      @desired = desired_verses[0..-2]\n      @qualifier = nil\n    end\n  end\n\n  def to_s\n    convert_desired_to_proverb << last_verse\n  end\n\n  private\n\n  def convert_desired_to_proverb\n    desired.inject("") do |proverb, item|\n      proverb << verse(item)\n    end\n  end\n\n  def verse(item)\n    "For want of a #{item} the #{item_relations[item]} was lost.\\n"\n  end\n\n  def last_verse\n    if qualifier\n      "And all for the want of a #{qualifier[:qualifier]} nail."\n    else\n      "And all for the want of a nail."\n    end\n  end\n\n  def item_relations\n    {\n      "nail"    => "shoe",\n      "shoe"    => "horse",\n      "horse"   => "rider",\n      "rider"   => "message",\n      "message" => "battle",\n      "battle"  => "kingdom"\n    }\n  end\n\nend	2014-06-11 22:37:42	\N	0	1	2014-06-02 16:20:44	2014-06-02 16:20:44	202	proverb.rb
416	13	9699aae7d74f37a41ebdabbd	pending	python	bob	class Bob:\n    def hey(self, str):\n        if self.silent(str):   return "Fine. Be that way."\n        if self.shouting(str): return "Woah, chill out!"\n        if self.asking(str):   return "Sure."\n        return "Whatever."\n\n    def silent(self, str):\n        return str is None or not str.strip()\n\n    def shouting(self, str):\n        return str.isupper()\n\n    def asking(self, str):\n        return str.endswith('?')	\N	\N	0	5	2013-11-15 23:49:44	2013-11-15 23:49:44	203	bob.py
417	13	f1a3019cf8aecc655d248476	superseded	python	bob	class Bob:\n    def hey(self, str):\n        if self.silent(str):\n            return "Fine. Be that way."\n        elif self.shouting(str):\n            return "Woah, chill out!"\n        elif self.asking(str):\n            return "Sure."\n        else:\n            return "Whatever."\n\n    def silent(self, str):\n        return str is None or len(str.strip()) == 0\n\n    def shouting(self, str):\n        return str == str.upper()\n\n    def asking(self, str):\n        return str.endswith('?')	\N	\N	0	2	2014-02-03 08:30:39	2014-02-03 08:30:39	203	bob.py
418	13	4fde34266d034465f25856a3	superseded	python	bob	class Bob:\n    def hey(self, str):\n        if self.silent(str):\n            return "Fine. Be that way."\n        elif self.shouting(str):\n            return "Woah, chill out!"\n        elif self.asking(str):\n            return "Sure."\n        else:\n            return "Whatever."\n\n    def silent(self, str):\n        return str is None or str.strip().__len__() == 0\n\n    def shouting(self, str):\n        return str == str.upper()\n\n    def asking(self, str):\n        return str[-1] == '?'	\N	\N	0	1	2014-03-26 15:36:51	2014-03-26 15:36:51	203	bob.py
419	13	b4a577218408d5366f1f9364	superseded	python	bob	class Bob:\n    def hey(self, str):\n        if str is None or self.__silent(str):\n            return "Fine. Be that way."\n        elif self.__shouting(str):\n            return "Woah, chill out!"\n        elif self.__asking(str):\n            return "Sure."\n        else:\n            return "Whatever."\n\n    def __silent(self, str):\n        return not str.strip()\n\n    def __shouting(self, str):\n        return str == str.upper()\n\n    def __asking(self, str):\n        return str.endswith('?')	\N	\N	0	3	2014-04-02 11:41:57	2014-04-02 11:41:57	203	bob.py
420	13	0c35a9a8c058ec7fc760e76f	superseded	python	bob	class Bob:\n    def hey(self, str):\n        if self.silent(str):   return "Fine. Be that way."\n        if self.shouting(str): return "Woah, chill out!"\n        if self.asking(str):   return "Sure."\n        return "Whatever."\n\n    def silent(self, str):\n        return str is None or not str.strip()\n\n    def shouting(self, str):\n        return str == str.upper()\n\n    def asking(self, str):\n        return str.endswith('?')	\N	\N	0	4	2014-04-10 15:14:16	2014-04-10 15:14:16	203	bob.py
421	40	5734217118e486cdfafceba1	pending	go	rna-transcription	package strand\n\nimport "strings"\n\nfunc ToRna(rna string) string {\n\ttranscribed := []string{}\n\n\tnucleotide_map := map[rune]string{\n\t\t'G': "C",\n\t\t'C': "G",\n\t\t'A': "U",\n\t\t'T': "A",\n\t}\n\n\tfor _, nucleotide := range rna {\n\t\ttranscribed = append(transcribed, nucleotide_map[nucleotide])\n\t}\n\n\treturn strings.Join(transcribed, "")\n}	\N	\N	0	1	2014-04-03 19:20:11	2014-04-03 19:20:11	204	strand.go
422	40	0d737e6bab4c2dd340af8199	superseded	elixir	bob	defmodule Teenager do\n  def hey(str) do\n    cond do\n      is_nothing?(str) -> "Fine. Be that way!"\n      is_yelling?(str) -> "Woah, chill out!"\n      is_asking?(str)  -> "Sure."\n      true             -> "Whatever."\n    end\n  end\n\n  defp is_yelling?(str), do: String.upcase(str) == str\n  defp is_asking?(str),  do: String.last(str) == "?"\n  defp is_nothing?(str) when str == nil, do: true\n  defp is_nothing?(str), do: String.strip(str) == ""\nend	\N	\N	0	2	2014-04-19 13:59:34	2014-04-19 13:59:34	205	bob.exs
423	40	064b08dd307d8107ca9902c5	superseded	elixir	bob	defmodule Teenager do\n  def hey(str) do\n    cond do\n      is_nothing?(str) -> "Fine. Be that way!"\n      is_yelling?(str) -> "Woah, chill out!"\n      is_asking?(str)  -> "Sure."\n      true             -> "Whatever."\n    end\n  end\n\n  defp is_yelling?(str), do: String.upcase(str) == str\n  defp is_asking?(str),  do: String.ends_with?(str, "?")\n  defp is_nothing?(str) when str == nil, do: true\n  defp is_nothing?(str), do: String.strip(str) == ""\nend	\N	\N	0	3	2014-05-15 20:51:35	2014-05-15 20:51:35	205	bob.exs
424	40	742dade072db8abf2044b16b	pending	elixir	bob	defmodule Teenager do\n  def hey(message) do\n    cond do\n      nothing?(message) -> "Fine. Be that way!"\n      yelling?(message) -> "Woah, chill out!"\n      asking?(message)  -> "Sure."\n      true                -> "Whatever."\n    end\n  end\n\n  defp yelling?(message), do: String.upcase(message) == message\n  defp asking?(message),  do: String.ends_with?(message, "?")\n  defp nothing?(message), do: String.strip(message) == ""\nend	\N	\N	0	5	2014-05-23 18:30:33	2014-05-23 18:30:33	205	bob.exs
425	40	b0b0c6676f0a61dd126248ac	superseded	elixir	bob	defmodule Teenager do\n  def hey(str) do\n    cond do\n      is_nothing?(str) -> "Fine. Be that way!"\n      is_yelling?(str) -> "Woah, chill out!"\n      is_asking?(str)  -> "Sure."\n      true             -> "Whatever."\n    end\n  end\n\n  defp is_yelling?(str), do: String.upcase(str) == str\n  defp is_asking?(str),  do: String.last(str) == "?"\n  defp is_nothing?(str), do: str == nil || String.strip(str) == ""\nend	\N	\N	0	1	2014-06-03 19:00:18	2014-06-03 19:00:18	205	bob.exs
426	40	0a4fdec467d890d1c89572cf	superseded	elixir	bob	defmodule Teenager do\n  def hey(message) do\n    cond do\n      is_nothing(message) -> "Fine. Be that way!"\n      is_yelling(message) -> "Woah, chill out!"\n      is_asking(message)  -> "Sure."\n      true                -> "Whatever."\n    end\n  end\n\n  defp is_yelling(message), do: String.upcase(message) == message\n  defp is_asking(message),  do: String.ends_with?(message, "?")\n  defp is_nothing(message), do: String.strip(message) == ""\nend	\N	\N	0	4	2014-06-24 09:56:12	2014-06-24 09:56:12	205	bob.exs
427	40	6668db6b3107c933f485d073	pending	python	anagram	class Anagram:\n    def __init__(self, word):\n        self.word = word\n\n    def match(self, candidates):\n        sorted_word = sorted(self.word.lower())\n        matches = [word for word in candidates  if sorted(word.lower()) == sorted_word ]\n        matches = [word for word in matches if not word.lower() == self.word.lower()]\n        return matches	\N	\N	0	1	2014-04-27 15:35:42	2014-04-27 15:35:42	206	anagram.py
428	40	08447b474c80dad8fb64a478	pending	ruby	leap	class Year\n  attr_accessor :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    divisible_by? 4 and not divisible_by? 100 or divisible_by? 400\n  end\n\n  private\n\n  def divisible_by?(number)\n    @year % number == 0\n  end\nend	\N	\N	0	3	2014-04-05 22:56:42	2014-04-05 22:56:42	207	leap.rb
429	40	29b7d4bb38a1707e9f9deecf	superseded	ruby	leap	class Year\n  attr_accessor :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    divisible_by_4? && !divisible_by_100? || divisible_by_400?\n  end\n\n  private\n\n  def divisible_by_4?\n    @year % 4 == 0\n  end\n\n  def divisible_by_100?\n    @year % 100 == 0\n  end\n\n  def divisible_by_400?\n    @year % 400 == 0\n  end\nend	\N	\N	0	1	2014-04-27 04:07:23	2014-04-27 04:07:23	207	leap.rb
430	40	25ae6f76e9c44060cc975c90	superseded	ruby	leap	class Year\n  attr_accessor :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    divisible_by?(4) && !divisible_by?(100) || divisible_by?(400)\n  end\n\n  private\n\n  def divisible_by? number\n    @year % number == 0\n  end\nend	\N	\N	0	2	2014-06-03 03:02:06	2014-06-03 03:02:06	207	leap.rb
476	17	b182abbe1a773218e98dfb91	pending	ruby	gigasecond	class Gigasecond\n  GIGASECOND_AS_DAYS = 10**9 / (60 * 60 * 24)\n\n  attr_reader :date\n\n  def initialize date\n    @date = date + GIGASECOND_AS_DAYS\n  end\nend	\N	\N	0	2	2014-04-20 00:32:04	2014-04-20 00:32:04	228	gigasecond.rb
431	40	ee82c782440b28216417184a	superseded	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\r\nimport Data.Char\r\nimport Data.List\r\nimport Text.Printf\r\n\r\nnumber :: String -> String\r\nnumber = check . filter isDigit\r\n  where check s = case length s of\r\n                    10 -> s\r\n                    11 -> trim s\r\n                    _  -> bad\r\n                    where bad = replicate 10 '0'\r\n                          trim ('1':z) = z\r\n                          trim _ = bad\r\n\r\nareaCode :: String -> String\r\nareaCode = take 3 . number\r\n\r\nprettyPrint :: String -> String\r\nprettyPrint s = printf "(%s) %s-%s" a b c\r\n  where (a,x) = splitAt 3 $ number s\r\n        (b,c) = splitAt 3 x\r	\N	\N	0	1	2014-04-10 23:43:02	2014-04-10 23:43:02	208	Phone.hs
432	40	7eee361825ed346df23d0f13	superseded	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\r\nimport Data.Char\r\nimport Data.List\r\nimport Text.Printf\r\n\r\ncheckNumber :: String -> String\r\ncheckNumber ('1':n@[_,_,_,_,_,_,_,_,_,_]) = n\r\ncheckNumber      n@[_,_,_,_,_,_,_,_,_,_]  = n\r\ncheckNumber _ = replicate 10 '0'\r\n\r\nnumber :: String -> String\r\nnumber = checkNumber . filter isDigit\r\n\r\nareaCode :: String -> String\r\nareaCode = take 3 . number\r\n\r\nprettyPrint :: String -> String\r\nprettyPrint s = printf "(%s) %s-%s" a b c\r\n  where (a,x) = splitAt 3 $ number s\r\n        (b,c) = splitAt 3 x\r	\N	\N	0	2	2014-04-14 04:29:20	2014-04-14 04:29:20	208	Phone.hs
433	40	17b8caf2a6304c98cb6cd6dc	superseded	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\r\nimport Data.Char\r\nimport Data.List\r\nimport Text.Printf\r\n\r\ncheckNumber :: String -> String\r\ncheckNumber = go . splitAt 9\r\n  where\r\n    go ('1':n,[y,z]) = n ++ [y,z]\r\n    go (    n,[y]  ) = n ++ [y]\r\n    go _ = replicate 10 '0'\r\n\r\nnumber :: String -> String\r\nnumber = checkNumber . filter isDigit\r\n\r\nareaCode :: String -> String\r\nareaCode = take 3 . number\r\n\r\nprettyPrint :: String -> String\r\nprettyPrint s = printf "(%s) %s-%s" a b c\r\n  where (a,x) = splitAt 3 $ number s\r\n        (b,c) = splitAt 3 x\r	\N	\N	0	3	2014-05-14 13:36:04	2014-05-14 13:36:04	208	Phone.hs
434	40	b5392ac1fc485c9d329aa3f6	pending	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\r\nimport Data.Char\r\nimport Data.List\r\nimport Data.List.Split\r\nimport Text.Printf\r\n\r\ncheckNumber :: String -> String\r\ncheckNumber = go . splitAt 9\r\n  where\r\n    go ('1':n,[y,z]) = n ++ [y,z]\r\n    go (    n,[z]  ) = n ++ [z]\r\n    go _ = replicate 10 '0'\r\n\r\nnumber :: String -> String\r\nnumber = checkNumber . filter isDigit\r\n\r\nareaCode :: String -> String\r\nareaCode = take 3 . number\r\n\r\nprettyPrint :: String -> String\r\nprettyPrint s = printf "(%s) %s-%s" a b c\r\n  where [a,b,c] = splitPlaces [3,3,4] $ number s\r\n  	\N	\N	0	4	2014-05-20 22:13:16	2014-05-20 22:13:16	208	Phone.hs
435	5	2302043db9a7c0c52dac9b01	superseded	haskell	bob	module Bob (responseFor) where\n\nresponseFor :: String -> String\nresponseFor = undefined	\N	\N	0	1	2014-04-15 05:01:29	2014-04-15 05:01:29	209	bob.hs
436	5	cf48fcf65c3e267d4fe9bfa0	pending	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (toUpper, isAlpha, isSpace)\n\nshout :: String -> String\nshout xs = [ toUpper x | x <- xs ]\n\nshouting :: String -> Bool\nshouting stmt = stmt == (shout stmt) && any isAlpha stmt\n\nsilence :: String -> Bool\nsilence s = all isSpace s\n\nresponseFor :: String -> String\nresponseFor stmt\n            | silence stmt     = "Fine. Be that way!"\n            | shouting stmt    = "Woah, chill out!"\n            | last stmt == '?' = "Sure."\n            | otherwise        = "Whatever."	\N	\N	0	2	2014-05-28 15:48:29	2014-05-28 15:48:29	209	bob.hs
437	5	775397690ecf81bd731987bd	superseded	perl5	bob	package Bob;\n\nuse strict;\n\nmy ($is_shouted, $is_question, $is_silence);\nmy ($contains_alpha, $is_upper_case, $ends_with);\n\nsub hey\n{\n    my $message = shift;\n\n    if ($is_shouted->($message))\n    {\n        'Woah, chill out!';\n    }\n    elsif ($is_question->($message))\n    {\n        'Sure.';\n    }\n    elsif ($is_silence->($message))\n    {\n        'Fine. Be that way!';\n    }\n    else\n    {\n        'Whatever.';\n    }\n}\n\n$is_shouted = sub\n{\n    my $message = shift;\n\n    $contains_alpha->($message) && $is_upper_case->($message);\n};\n\n$is_question = sub\n{\n    my $message = shift;\n\n    $ends_with->($message, '?')\n};\n\n$is_silence = sub\n{\n    my $message = shift;\n\n    $message =~ /^\\s*$/;\n};\n\n$contains_alpha = sub\n{\n    my $message = shift;\n\n    $message =~ /[A-Z]/i;\n};\n\n$is_upper_case = sub\n{\n    my $message = shift;\n\n    $message eq uc($message);\n};\n\n$ends_with = sub\n{\n    my $string = shift;\n    my $sub_string = shift;\n\n    substr($string, -1, length($sub_string)) eq $sub_string;\n};\n\n1;	\N	\N	0	1	2014-03-22 06:48:48	2014-03-22 06:48:48	210	bob.pm
438	5	b3d59c80e565ba3c975042c2	superseded	perl5	bob	package Bob;\n\nuse strict;\nno warnings "experimental::lexical_subs";\nuse feature 'lexical_subs'; # requires Perl 5.18\n\nmy sub is_shouted; my sub is_question; my sub is_silence;\nmy sub contains_alpha; my sub is_upper_case;\n\nsub hey \n{ \n    my $message = shift;\n\n    return 'Fine. Be that way!' if is_silence($message);\n    return 'Woah, chill out!' if is_shouted($message);\n    return 'Sure.' if is_question($message);\n    return 'Whatever.';\n}\n\nsub is_shouted \n{ \n    my $message = shift;\n\n    is_words($message) && is_upper_case($message);\n}\n\nsub is_question\n{\n    shift =~ /\\?$/;\n}\n\nsub is_silence\n{\n    shift =~ /^\\s*$/;\n}\n\nsub is_words\n{\n    shift =~ /\\p{Letter}/;\n}\n\nsub is_upper_case\n{\n    shift !~ /\\p{Lowercase}/;\n}\n\n1;	\N	\N	0	3	2014-04-13 01:00:02	2014-04-13 01:00:02	210	bob.pm
439	5	b8b73c0559faf0b909864af3	pending	perl5	bob	package Bob;\n\nuse v5.18; # required for 'lexical_subs'\nuse strict;\nno warnings "experimental::lexical_subs";\nuse feature 'lexical_subs';\n\nmy sub is_shouted; my sub is_question; my sub is_silence;\nmy sub contains_alpha; my sub is_upper_case;\n\nsub hey \n{ \n    my $message = shift;\n\n    return 'Fine. Be that way!' if is_silence($message);\n    return 'Woah, chill out!' if is_shouted($message);\n    return 'Sure.' if is_question($message);\n    return 'Whatever.';\n}\n\nsub is_shouted \n{ \n    my $message = shift;\n\n    is_words($message) && is_upper_case($message);\n}\n\nsub is_question\n{\n    shift =~ /\\?$/;\n}\n\nsub is_silence\n{\n    shift =~ /^\\s*$/;\n}\n\nsub is_words\n{\n    shift =~ /\\p{Letter}/;\n}\n\nsub is_upper_case\n{\n    shift !~ /\\p{Lowercase}/;\n}\n\n1;	\N	\N	0	4	2014-04-16 19:24:51	2014-04-16 19:24:51	210	bob.pm
440	5	034ff8372f6ba1e4dd660cda	superseded	perl5	bob	package Bob;\n\nuse strict;\nno warnings "experimental::lexical_subs";\nuse feature 'lexical_subs'; # requires Perl 5.18\n\nmy sub is_shouted; my sub is_question; my sub is_silence;\nmy sub contains_alpha; my sub is_upper_case;\n\nsub hey\n{\n    my $message = shift;\n\n    return 'Woah, chill out!' if is_shouted($message);\n    return 'Sure.' if is_question($message);\n    return 'Fine. Be that way!' if is_silence($message);\n    return 'Whatever.';\n}\n\nsub is_shouted\n{\n    my $message = shift;\n\n    is_words($message) && is_upper_case($message);\n}\n\nsub is_question\n{\n    my $message = shift;\n\n    $message =~ /\\?$/;\n}\n\nsub is_silence\n{\n    my $message = shift;\n\n    $message =~ /^\\s*$/;\n}\n\nsub is_words\n{\n    my $message = shift;\n\n    $message =~ /\\p{Letter}/;\n}\n\nsub is_upper_case\n{\n    my $message = shift;\n\n    $message eq uc($message);\n}\n\n1;	\N	\N	0	2	2014-04-28 04:46:17	2014-04-28 04:46:17	210	bob.pm
477	17	b0009114fb48ede418e0dd0c	superseded	scala	anagram	class Anagram(given:String) {\n  def matches(candidates:Seq[String]):Seq[String] = {\n    candidates.filter(_.toLowerCase.sortWith(_ > _) == given.toLowerCase.sortWith(_ > _))\n    .foldLeft(Seq[String]())((b:Seq[String],a:String)=> if (b exists (_ equalsIgnoreCase a)) b else a+:b)\n  }\n}	\N	\N	0	1	2014-05-26 14:29:31	2014-05-26 14:29:31	229	anagram.scala
441	5	c8cb4dcf347b1fc3763a82c1	pending	javascript	bob	// jasmine-node bob_test.spec.js\nfunction Bob() {\n  var isAQuestion = function(string,character) {\n      return character === string.slice(-1);\n  };\n  var isShouting = function(string) {\n      return string === string.toUpperCase();\n  };\n  var isSilent = function(string) {\n      return string.trim().length === 0;\n  };\n  var isNumbersOnly = function(string) {\n      return string.match(/[a-zA-Z]/) === null;\n  };\n\n  this.hey = function(message){\n      if (isSilent(message)){\n          return 'Fine. Be that way!';\n      } else if (isAQuestion(message,'?') && (isNumbersOnly(message) || !(isShouting(message)))) {\n          return 'Sure.';\n      } else if ((!isNumbersOnly(message)) && isShouting(message)) {\n          return 'Woah, chill out!';\n      } else {\n          return 'Whatever.';\n      };\n  }\n}\n\nmodule.exports = Bob	\N	\N	0	2	2014-04-06 12:02:57	2014-04-06 12:02:57	211	bob.js
442	5	b78e87e8f15176a19ed7d68a	superseded	javascript	bob	// jasmine-node bob_test.spec.js\nfunction Bob() {\n\tvar ends_with = function(string,character) {\n\t\treturn character === string.slice(-1);\n\t};\n\tvar isShouting = function(string) {\n\t\treturn string === string.toUpperCase();\n\t};\n\tvar isEmpty = function(string) {\n\t\treturn string === '';\n\t};\n\n\tthis.hey = function(message){\n\t\tif (isEmpty(message)){\n\t\t\treturn 'Fine, be that way.'\n\t\t}\telse if (ends_with(message,'?')) {\n\t\t\treturn 'Sure';\n\t\t} else if (isShouting(message)) {\n\t\t\treturn 'Woah, chill out!';\n\t\t} else {\n\t\t\treturn 'Whatever';\n\t\t};\n\t}\n}\n\nmodule.exports = Bob;	\N	\N	0	1	2014-04-29 11:04:11	2014-04-29 11:04:11	211	bob.js
443	5	7736dd209a03c91ecc609fb6	pending	python	octal	class Octal(object):\n    def __init__(self, data):\n        self.digits = []\n        for ch in data:\n            if ch < '0' or ch > '7':\n                raise ValueError, "Invalid octal digit: %s" % ch\n            self.digits.append(int(ch))\n\n    def to_decimal(self):\n        base = 1\n        value = 0\n        for digit in reversed(self.digits):\n            value += digit * base\n            base *= 8\n        return value	\N	\N	0	1	2014-05-24 08:58:43	2014-05-24 08:58:43	212	octal.py
444	33	a74455792ae942c46258f714	superseded	ruby	bob	class Bob\n  def hey(prompt)\n    return case prompt\n    when /\\A\\s*\\Z/     then "Fine. Be that way!"\n    when /\\A[^a-z]*\\Z/ then "Woah, chill out!"\n    when /\\?\\Z/        then "Sure."\n    else                    "Whatever."\n    end\n  end\nend	\N	\N	0	1	2014-01-11 10:32:16	2014-01-11 10:32:16	213	bob.rb
445	33	0692a4e386048f7f4c5412dd	pending	ruby	bob	class Message\n  def initialize(message)\n    @message = message.strip\n  end\n\n  def silence?\n    return @message.empty?\n  end\n\n  def question?\n    return @message.end_with?('?')\n  end\n\n  def shouting?\n    return @message == @message.upcase\n  end\nend\n\nclass TeenageBrain\n  def response_to(message)\n    return "Fine. Be that way!" if message.silence?\n    return "Woah, chill out!"   if message.shouting?\n    return "Sure."              if message.question?\n    return "Whatever."        # if anything else\n  end\nend\n\nclass Bob\n  def initialize(brain_type = TeenageBrain)\n    @brain = brain_type.new\n  end\n\n  def hey(str)\n    return @brain.response_to(Message.new(str))\n  end\nend	\N	\N	0	3	2014-02-03 05:11:12	2014-02-03 05:11:12	213	bob.rb
446	33	9c79e0130e0a1b522bac7589	superseded	ruby	bob	class Bob\n  def hey(message)\n    @prompt = message\n    return response\n  end\n\n  private\n  def response\n    return "Fine. Be that way!" if silence?\n    return "Woah, chill out!"   if shouting?\n    return "Sure."              if question?\n    return "Whatever."        # if anything else\n  end\n\n  def silence?      # Entire @prompt is 0 or more whitespace characters\n    return @prompt =~ /\\A\\s*\\Z/\n  end\n\n  def question?     # Last character of @prompt is '?'\n    return @prompt =~ /\\?\\Z/\n  end\n\n  def shouting?     # Entire @prompt is 0 or more chars which are not lowercase\n    return @prompt =~ /\\A[^a-z]*\\Z/\n  end\nend	\N	\N	0	2	2014-02-15 09:03:45	2014-02-15 09:03:45	213	bob.rb
447	33	66b6b95d5087991e38fc370b	superseded	python	rna-transcription	'''\nDNA-RNA Translator\n'''\n\nclass DNA(object):\n    '''\n    DNA Module\n    '''\n    ACID_TABLE = {'G': 'C', 'C': 'G', 'T': 'A', 'A': 'U'}\n    def __init__(self, nucleotides):\n        self.nucleotides = nucleotides\n\n    def to_rna(self):\n        '''\n        Translates DNA to RNA using a quick lookup table.\n        '''\n        self.rna = ""\n        for acid in self.nucleotides:\n            self.rna += self.ACID_TABLE[acid]\n        return self.rna	\N	\N	0	2	2013-12-20 14:41:30	2013-12-20 14:41:30	214	dna.py
448	33	ab5844a3d475304e306e85a2	pending	python	rna-transcription	'''\nDNA-RNA Translator\n'''\n\nclass DNA(object):\n    '''\n    DNA Module\n    '''\n    ACID_TABLE = {'G': 'C', 'C': 'G', 'T': 'A', 'A': 'U'}\n    def __init__(self, nucleotides):\n        self.nucleotides = nucleotides\n\n    def to_rna(self):\n        '''\n        Translates DNA to RNA using a quick lookup table.\n        '''\n        return ''.join(map(lambda acid: self.ACID_TABLE[acid], self.nucleotides))	\N	\N	0	3	2014-01-23 22:28:49	2014-01-23 22:28:49	214	dna.py
449	33	cb28d8dc4c64d5d2490954e4	superseded	python	rna-transcription	'''\nDNA-RNA Translator\n'''\n\nclass DNA(object):\n    '''\n    DNA Module\n    '''\n    def __init__(self, nucleotides=None):\n        self.nucleotides = nucleotides\n\n    def to_rna(self):\n        '''\n        Translate DNA to RNA\n        '''\n        translated_nucleotides = ''\n        for nucleotide in self.nucleotides:\n            if nucleotide is 'T':\n                nucleotide = 'U'\n            translated_nucleotides += nucleotide\n        return  translated_nucleotides	\N	\N	0	1	2014-05-17 13:37:27	2014-05-17 13:37:27	214	rna-transcription.py
450	33	3898bc80825b461c9e5f6128	superseded	ruby	leap	module Year\n  def self.leap?(year)\n    (year & 3).zero? && (year % 25).nonzero? || (year & 15).zero?\n  end\nend	\N	\N	0	1	2013-12-30 13:58:54	2013-12-30 13:58:54	215	year.rb
451	33	4b833879ccaef177d2ded5d4	pending	ruby	leap	module Year\n  def self.leap?(year)\n    (year & 3).zero? && ((year % 25).nonzero? || (year & 15).zero?)\n  end\nend	\N	\N	0	2	2014-03-28 14:53:04	2014-03-28 14:53:04	215	year.rb
452	15	fd148d850d214241453218d4	pending	objective-c	nucleotide-count	//\n//  NucleotideCount.m\n//  ObjCNucleotideCount\n//\n//  Created by BJ Miller on 6/23/14.\n//  Copyright (c) 2014 Six Five Software, LLC. All rights reserved.\n//\n\n#import "NucleotideCount.h"\n\n@interface DNA ()\n@property (nonatomic, copy) NSString *strand;\n@end\n\n\n@implementation DNA\n\n- (instancetype)initWithStrand:(NSString *)strand\n{\n    if (self = [super init]) {\n        self.strand = strand;\n    }\n    return self;\n}\n\n- (NSInteger)count:(NSString *)nucleotide\n{\n    NSInteger result = 0;\n    if ([self isValidNucleotide:nucleotide]) {\n        for (NSInteger i = 0; i < self.strand.length; ++i) {\n            NSString *character = [self.strand substringWithRange:NSMakeRange(i, 1)];\n            if ([character isEqual:nucleotide]) {\n                ++result;\n            }\n        }\n    } else {\n        @throw [NSException exceptionWithName:@"Invalid nucleotide" reason:@"Invalid" userInfo:nil];\n    }\n    return result;\n}\n\n- (NSDictionary *)nucleotideCounts\n{\n    return @{ @"A" : @([self count:@"A"]),\n              @"T" : @([self count:@"T"]),\n              @"C" : @([self count:@"C"]),\n              @"G" : @([self count:@"G"])};\n}\n\n- (BOOL)isValidNucleotide:(NSString *)nucleotide\n{\n    NSCharacterSet *invalidNucleotides = [NSCharacterSet characterSetWithCharactersInString:@"ACGTU"];\n    NSRange range = [nucleotide rangeOfCharacterFromSet:invalidNucleotides];\n    if (range.location != NSNotFound) {\n        return YES;\n    }\n    return NO;\n}\n\n@end	\N	\N	0	1	2014-01-11 15:21:47	2014-01-11 15:21:47	216	NucleotideCount.m
453	15	43b13854b31a041bd88229fe	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\nimport Data.Map (Map)\nimport qualified Data.Map as M\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts ns = M.fromList [('A', a), ('T', t), ('C', c), ('G', g)] where\n    (a, t, c, g) = nucleotideCounts' ns\n\nnucleotideCounts' :: String -> (Int, Int, Int, Int)\nnucleotideCounts' "" = (0, 0, 0, 0)\nnucleotideCounts' (n : ns)\n    | n == 'A'  = (a + 1, t, c, g)\n    | n == 'T'  = (a, t + 1, c, g)\n    | n == 'C'  = (a, t, c + 1, g)\n    | n == 'G'  = (a, t, c, g + 1)\n    | otherwise = invalidNucleotide n\n    where\n        (a, t, c, g) = nucleotideCounts' ns\n\ncount :: Char -> String -> Int\ncount n ns\n    | n == 'A'  = a\n    | n == 'T'  = t\n    | n == 'C'  = c\n    | n == 'G'  = g\n    | n == 'U'  = 0\n    | otherwise = invalidNucleotide n\n    where\n        (a, t, c, g) = nucleotideCounts' ns\n\ninvalidNucleotide :: Char -> a\ninvalidNucleotide = error . ("invalid nucleotide " ++) . show	\N	\N	0	1	2014-03-09 19:32:09	2014-03-09 19:32:09	217	nucleotide-count.hs
454	15	b94060bd3b45bb5dd8282b0c	pending	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\nimport Data.Map (Map, fromList)\n\ntype Nucleotide = Char\n\nnucleotideCounts :: [Nucleotide] -> Map Nucleotide Int\nnucleotideCounts ns = fromList [('A', a), ('T', t), ('C', c), ('G', g)] where\n    (a, t, c, g) = nucleotideCounts' ns\n\nnucleotideCounts' :: [Nucleotide] -> (Int, Int, Int, Int)\nnucleotideCounts' "" = (0, 0, 0, 0)\nnucleotideCounts' (n : ns)\n    | n == 'A'  = (a + 1, t, c, g)\n    | n == 'T'  = (a, t + 1, c, g)\n    | n == 'C'  = (a, t, c + 1, g)\n    | n == 'G'  = (a, t, c, g + 1)\n    | otherwise = error $ "invalid nucleotide " ++ show n\n    where\n        (a, t, c, g) = nucleotideCounts' ns\n\ncount :: Nucleotide -> [Nucleotide] -> Int\ncount n ns\n    | n == 'A'  = a\n    | n == 'T'  = t\n    | n == 'C'  = c\n    | n == 'G'  = g\n    | n == 'U'  = 0\n    | otherwise = error $ "invalid nucleotide " ++ show n\n    where\n        (a, t, c, g) = nucleotideCounts' ns	\N	\N	0	2	2014-04-15 16:23:20	2014-04-15 16:23:20	217	nucleotide-count.hs
455	15	f788db118729d5c042aefc51	pending	ruby	bob	# A module that contains common language analysis functions,\n# Which could be useful to any teenager in our times...\nmodule LanguageAnalyzer\n\n  # is the phrase made only of whitespace? (i.e. 'silent')\n  def silent?( phrase )\n    phrase.nil? || phrase.strip.empty?\n  end\n\n  # is the phrase ALL CAPS? (i.e.'yelling')\n  def yelling?( phrase )\n    !phrase.nil? && phrase.strip.upcase == phrase.strip\n  end\n\n  # does the phrase end in a question mark? (i.e. question)\n  def question?( phrase )\n    !phrase.nil? && ( phrase.end_with? '?' )\n  end\n\nend\n\nclass Bob\n\n  include LanguageAnalyzer\n\n  def hey( phrase)\n    if silent? phrase\n      "Fine. Be that way!"\n    elsif yelling? phrase\n      "Woah, chill out!"\n    elsif question? phrase\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\nend	\N	\N	0	4	2014-01-14 04:44:37	2014-01-14 04:44:37	218	bob.rb
456	15	9ec683f8fb15eb33363ed546	superseded	ruby	bob	class Bob\n\n  def hey( phrase)\n    if silent?( phrase )\n      "Fine. Be that way!"\n    elsif yelling?( phrase )\n      "Woah, chill out!"\n    elsif question?( phrase )\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def silent?( phrase )\n    phrase.strip == ''\n  end\n\n  def yelling?( phrase )\n    phrase.strip.upcase == phrase.strip\n  end\n\n  def question?( phrase )\n    phrase[-1] == '?'\n  end\n\nend	\N	\N	0	1	2014-04-16 11:24:30	2014-04-16 11:24:30	218	bob.rb
457	15	16cc9a2798bd5a3324e3b3c0	superseded	ruby	bob	# A module that contains common language analysis functions,\n# Which could be useful to any teenager in our times...\nmodule LanguageAnalyzer\n\n  # is the phrase made only of whitespace? (i.e. 'silent')\n  def self.silent?( phrase )\n    phrase.nil? || phrase.strip.empty?\n  end\n\n  # is the phrase ALL CAPS? (i.e.'yelling')\n  def self.yelling?( phrase )\n    !phrase.nil? && phrase.strip.upcase == phrase.strip\n  end\n\n  # does the phrase end in a question mark? (i.e. question)\n  def self.question?( phrase )\n    !phrase.nil? && phrase[-1] == '?'\n  end\n\nend\n\nclass Bob\n\n  include LanguageAnalyzer\n\n  def hey( phrase)\n    if LanguageAnalyzer::silent?( phrase )\n      "Fine. Be that way!"\n    elsif LanguageAnalyzer::yelling?( phrase )\n      "Woah, chill out!"\n    elsif LanguageAnalyzer::question?( phrase )\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\nend	\N	\N	0	3	2014-04-29 20:54:35	2014-04-29 20:54:35	218	bob.rb
458	15	ec3c13a63fbdce93200d7027	superseded	ruby	bob	# A module that contains common language analysis functions,\n# Which could be useful to any teenager in our times...\nmodule LanguageAnalyzer\n\n  # is the phrase made only of whitespace? (i.e. 'silent')\n  def self.silent?( phrase )\n    phrase.strip.empty?\n  end\n\n  # is the phrase ALL CAPS? (i.e.'yelling')\n  def self.yelling?( phrase )\n    phrase.strip.upcase == phrase.strip\n  end\n\n  # does the phrase end in a question mark? (i.e. question)\n  def self.question?( phrase )\n    phrase[-1] == '?'\n  end\n\nend\n\nclass Bob\n\n  include LanguageAnalyzer\n\n  def hey( phrase)\n    if LanguageAnalyzer::silent?( phrase )\n      "Fine. Be that way!"\n    elsif LanguageAnalyzer::yelling?( phrase )\n      "Woah, chill out!"\n    elsif LanguageAnalyzer::question?( phrase )\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\nend	\N	\N	0	2	2014-06-09 11:16:24	2014-06-09 11:16:24	218	bob.rb
459	17	a34af2bd94a5516966171448	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.List (sort)\nimport Data.Char (toLower)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word = filter isAnagram \n    where isAnagram str = word /= str && (prepare str) == (prepare word) \n          prepare str = sort $ map toLower str	\N	\N	0	1	2014-04-30 10:22:24	2014-04-30 10:22:24	219	Anagram.hs
460	17	3fc9ea473e337724159fd59e	pending	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.List (sort)\nimport Data.Char (toLower)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word = filter isAnagram \n    where isAnagram str = word /= str && prepare str == prepare word \n          prepare = sort . map toLower	\N	\N	0	2	2014-05-16 16:43:59	2014-05-16 16:43:59	219	Anagram.hs
461	17	1dfd3573e11ab94b939ae7b1	pending	perl5	hamming	package Hamming;\n\nuse strict;\nuse warnings;\n \nsub compute {\n\n    my $distance = 0;\n    my $length   = 0;\n\n    my @dna_A = split '', shift;\n    my @dna_B = split '', shift;\n    \n    ($#dna_A <= $#dna_B) ? ($length = $#dna_A) : ($length = $#dna_B);\n    map { $dna_A[$_] ne $dna_B[$_] ? $distance++ : () } 0..$length;\n \n    return $distance;\n}\n\n1;	\N	\N	0	1	2014-05-07 01:35:23	2014-05-07 01:35:23	220	Hamming.pm
462	17	b8358a63c07083162a4a548c	superseded	ruby	scrabble-score	class Scrabble\n\n  def initialize(word)\n    @word = word\n\n    @score_table = Hash.new(0)\n    table = {%w{A E I O U L N R S T} => 1,\n    %w{D G} => 2,\n    %w{B C M P} => 3,\n    %w{F H V W Y} => 4,\n    %w{K} => 5,\n    %w{J X} => 8,\n    %w{Q Z} => 10}\n    setup(table)\n  end\n\n  def setup(table)\n    table.each_pair do |letters, num|\n      letters.each { |letter| @score_table[letter] = num }\n    end\n  end\n\n  def score\n    return 0 if @word == nil\n    @word.upcase.each_char.reduce(0) { |acc, letter| acc += @score_table[letter] }\n  end\n\n  def self.score(word)\n    self.new(word).score\n  end\n\nend	\N	\N	0	1	2014-05-29 01:44:14	2014-05-29 01:44:14	221	scrabble.rb
478	17	d73eed0119e30ea3f68d8cb7	pending	scala	anagram	class Anagram(given:String) {\n  def matches(candidates:Seq[String]):Seq[String] = {\n    candidates.filter(_.toLowerCase.sorted == given.toLowerCase.sorted)\n    .foldLeft(Seq[String]())((b:Seq[String],a:String)=> if (b exists (_ equalsIgnoreCase a)) b else a+:b)\n  }\n}	\N	\N	0	2	2014-05-30 15:45:24	2014-05-30 15:45:24	229	anagram.scala
463	17	c8fc7914a6388318c0ff148e	superseded	ruby	scrabble-score	class Scrabble\n\n    Table = { %w{A E I O U L N R S T} => 1,\n              %w{D G} => 2,\n              %w{B C M P} => 3,\n              %w{F H V W Y} => 4,\n              %w{K} => 5,\n              %w{J X} => 8,\n              %w{Q Z} => 10 }\n\n    ScoreTable = Table.each_pair.with_object(Hash.new(0)) do |(letters, num), score_table |\n      letters.each { |letter| score_table[letter] = num }\n    end\n\n  def initialize(word)\n    @word = word\n  end\n\n  def score\n    return 0 if @word == nil\n    @word.upcase.each_char.reduce(0) { |acc, letter| acc += ScoreTable[letter] }\n  end\n\n  def self.score(word)\n    self.new(word).score\n  end\n\nend	\N	\N	0	2	2014-06-11 03:04:22	2014-06-11 03:04:22	221	scrabble.rb
464	17	f11a83557479adbff4ee5e5e	superseded	ruby	scrabble-score	class Scrabble\n\n    Table = { %w{A E I O U L N R S T} => 1,\n              %w{D G} => 2,\n              %w{B C M P} => 3,\n              %w{F H V W Y} => 4,\n              %w{K} => 5,\n              %w{J X} => 8,\n              %w{Q Z} => 10 }\n\n    ScoreTable = Table.each_pair.with_object(Hash.new(0)) do |(letters, num), score_table |\n      letters.each { |letter| score_table[letter] = num }\n    end\n\n  def initialize(word)\n    @word = word\n  end\n\n  def score\n    @word.to_s.upcase.each_char.reduce(0) { |acc, letter| acc += ScoreTable[letter] }\n  end\n\n  def self.score(word)\n    self.new(word).score\n  end\n\nend	\N	\N	0	3	2014-06-26 18:04:45	2014-06-26 18:04:45	221	scrabble.rb
465	17	386e47ada5cae185e36a51ea	pending	ruby	scrabble-score	class Scrabble\n\n    TABLE = { %w{A E I O U L N R S T} => 1,\n              %w{D G} => 2,\n              %w{B C M P} => 3,\n              %w{F H V W Y} => 4,\n              %w{K} => 5,\n              %w{J X} => 8,\n              %w{Q Z} => 10 }\n\n    SCORETABLE = TABLE.each_pair.with_object(Hash.new(0)) do |(letters, num), score_table |\n      letters.each { |letter| score_table[letter] = num }\n    end\n\n  def initialize(word)\n    @word = word\n  end\n\n  def score\n    @word.to_s.upcase.each_char.reduce(0) { |acc, letter| acc += SCORETABLE[letter] }\n  end\n\n  def self.score(word)\n    self.new(word).score\n  end\n\nend	\N	\N	0	4	2014-06-27 07:44:18	2014-06-27 07:44:18	221	scrabble.rb
466	17	7e025a4cb93521850fb026f3	superseded	javascript	robot-name	module.exports = function() {\n\t"use strict";\n\n\tfunction randomBetween(min, max) {\n\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t}\n\n\tfunction randomChar() {\n\t\treturn String.fromCharCode(randomBetween(95,122));\n\t}\n\n\tfunction randomNumber() {\n\t\treturn randomBetween(0,9);\n\t}\n\n\tfunction generateName() {\n\t\treturn randomChar() + randomChar() + randomNumber() + randomNumber() + randomNumber();\n\t}\n\n\tthis.name = generateName();\n\n\tthis.reset = function() {\n\t\tthis.name = generateName();\n\t};\n};	\N	\N	0	1	2014-06-15 15:36:17	2014-06-15 15:36:17	222	robot-name.js
467	17	4d8da8f1ec58c749758ff6a3	pending	javascript	robot-name	module.exports = function Robot() {\n\t"use strict";\n\n\tvar name = "";\n\n\tfunction randomBetween(min, max) {\n\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t}\n\n\tfunction randomChar() {\n\t\treturn String.fromCharCode(randomBetween(95,122));\n\t}\n\n\tfunction randomNumber() {\n\t\treturn randomBetween(0,9);\n\t}\n\n\tfunction generateName() {\n\t\treturn randomChar() + randomChar() + randomNumber() + randomNumber() + randomNumber();\n\t}\n\n\treturn {\n\t\tget name() {\n\t\t\tif (name === "") { \n\t\t\t\tname = generateName();\n\t\t\t}\n\t\t\treturn name;\n\t\t},\n\t\treset : function() {\n\t\t\tname = "";\n\t\t}\n\t};\n\n};	\N	\N	0	2	2014-07-07 00:15:51	2014-07-07 00:15:51	222	robot-name.js
468	17	2ece462a0e05e32414533be3	pending	ruby	space-age	class SpaceAge\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  def seconds\n    @seconds\n  end\n\n  def on_earth\n    seconds_on_planet :earth\n  end\n\n  def on_mercury\n    seconds_on_planet :mercury\n  end\n\n  def on_venus\n    seconds_on_planet :venus\n  end\n\n  def on_mars\n    seconds_on_planet :mars\n  end\n\n  def on_jupiter\n    seconds_on_planet :jupiter\n  end\n\n  def on_saturn\n    seconds_on_planet :saturn\n  end\n\n  def on_uranus\n    seconds_on_planet :uranus\n  end\n\n  def on_neptune\n    seconds_on_planet :neptune\n  end\n\n  private\n\n  def seconds_on_planet(planet)\n    format_seconds @seconds / send("seconds_in_#{planet}_day")\n  end\n\n  def format_seconds(seconds)\n    seconds.round(2)\n  end\n\n  def seconds_in_earth_day\n    (365.25 * 60 * 60 * 24).to_f\n  end\n\n  def seconds_in_mercury_day\n    mercury_orbital_period_in_earth_years * seconds_in_earth_day\n  end\n\n  def seconds_in_venus_day\n    venus_orbital_period_in_earth_years * seconds_in_earth_day\n  end\n\n  def seconds_in_mars_day\n    mars_orbital_period_in_earth_years * seconds_in_earth_day\n  end\n\n  def seconds_in_jupiter_day\n    jupiter_orbital_period_in_earth_years * seconds_in_earth_day\n  end\n\n  def seconds_in_saturn_day\n    saturn_orbital_period_in_earth_years * seconds_in_earth_day\n  end\n\n  def seconds_in_uranus_day\n    uranus_orbital_period_in_earth_years * seconds_in_earth_day\n  end\n\n  def seconds_in_neptune_day\n    neptune_orbital_period_in_earth_years * seconds_in_earth_day\n  end\n\n  def mercury_orbital_period_in_earth_years\n    0.2408467\n  end\n\n  def venus_orbital_period_in_earth_years\n    0.61519726\n  end\n\n  def mars_orbital_period_in_earth_years\n    1.8808158\n  end\n\n  def jupiter_orbital_period_in_earth_years\n    11.862615\n  end\n\n  def saturn_orbital_period_in_earth_years\n    29.447498\n  end\n\n  def uranus_orbital_period_in_earth_years\n    84.016846\n  end\n\n  def neptune_orbital_period_in_earth_years\n    164.79132\n  end\n\nend	\N	\N	0	1	2014-05-21 01:06:05	2014-05-21 01:06:05	223	space-age.rb
469	17	fc1bb560c02cb832230896c0	pending	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn year%4 == 0 && year%100 != 0 || year%400 == 0\n}	\N	\N	0	1	2014-05-05 06:50:54	2014-05-05 06:50:54	224	leap.go
470	17	14ea7c869287f53c455e90e1	pending	ruby	bob	class Bob\n  def hey(msg)\n    if empty?(msg)\n      "Fine. Be that way!"\n    elsif shout?(msg)\n      "Woah, chill out!"\n    elsif query?(msg)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\nprivate\n  def query?(msg)\n    msg.end_with? "?"\n  end\n\n  def shout?(msg)\n    msg.upcase == msg\n  end\n\n  def empty?(msg)\n    msg.gsub(/ /, '') == ''\n  end\n\nend	\N	\N	0	1	2014-05-28 14:59:15	2014-05-28 14:59:15	225	bob.rb
471	17	beba87d7b0aa793f2e3a2c4d	superseded	elixir	bob	defmodule Teenager do\n  def hey(input) do\n    cond do\n      Regex.match?(%r/\\?$/, input) -> "Sure."\n      String.strip(input) == "" -> "Fine. Be that way!"\n      Regex.match?(%r/[A-Z]|\\p{L}/, input) && String.upcase(input) == input ->  "Woah, chill out!"\n      true -> "Whatever."\n    end\n  end\nend	\N	\N	0	1	2014-06-02 08:52:52	2014-06-02 08:52:52	226	bob.exs
472	17	e904df86e491bfaa87f8c7d9	superseded	elixir	bob	defmodule Teenager do\n  def hey(input) do\n    cond do\n      Greeting.question?(input) -> "Sure."\n      Greeting.silence?(input) -> "Fine. Be that way!"\n      Greeting.shout?(input) ->  "Woah, chill out!"\n      true -> "Whatever."\n    end\n  end\nend\n\ndefmodule Greeting do\n  def shout?(input) do\n    Regex.match?(%r/[A-Z]|\\p{L}/, input) && String.upcase(input) == input\n  end\n\n  def silence?(input) do\n    String.strip(input) == ""\n  end\n\n  def question?(input) do\n    Regex.match?(%r/\\?$/, input)\n  end\nend	\N	\N	0	2	2014-07-01 11:30:16	2014-07-01 11:30:16	226	bob.exs
473	17	d9b5f5e2dc224d06bebff8ac	pending	elixir	bob	defmodule Teenager do\n  def hey(input) do\n    cond do\n      Greeting.question?(input) -> "Sure."\n      Greeting.silence?(input) -> "Fine. Be that way!"\n      Greeting.shout?(input) ->  "Woah, chill out!"\n      true -> "Whatever."\n    end\n  end\nend\n\ndefmodule Greeting do\n  def shout?(input) do\n    Regex.match?(%r/\\p{L}/, input) && String.upcase(input) == input\n  end\n\n  def silence?(input) do\n    String.strip(input) == ""\n  end\n\n  def question?(input) do\n    String.ends_with?(input, "?")\n  end\nend	\N	\N	0	3	2014-07-14 08:47:17	2014-07-14 08:47:17	226	bob.exs
474	17	5020163d82f5b1dafb4bab5d	pending	ruby	wordy	require 'strscan'\n\nclass StrictStringScanner < StringScanner\n\n  def scan!(pattern)\n    token = scan(pattern)\n    raise ArgumentError unless token\n    token\n  end\n\nend\n\nclass WordProblem\n\n  class CalculationState\n\n    attr_reader :state, :answer, :operation\n\n    def initialize(state, answer, operation)\n      @state, @answer, @operation = state, answer, operation\n    end\n\n  end\n\n  class StateTransition\n\n    attr_reader :expected_token\n\n    def initialize(expected_token)\n      @expected_token = expected_token\n    end\n\n    def update(calculation, token)\n      raise NotImplemented\n    end\n\n  end\n\n  class OnFirstNumber < StateTransition\n\n    def initialize\n      super(:number)\n    end\n\n    def update(calculation, token)\n      CalculationState.new(:operation, token.to_i, nil)\n    end\n\n  end\n\n  class OnNumber < StateTransition\n\n    def initialize\n      super(:number)\n    end\n\n    def update(calculation, token)\n      CalculationState.new(:operation, calculation.operation.(calculation.answer, token.to_i), nil)\n    end\n\n  end\n\n  class OnOperation < StateTransition\n\n    def initialize\n      super(:operation)\n    end\n\n    def update(calculation, token)\n      if token =~ /raised to the (\\d+)/\n        raise_to_nth_power(calculation, $1.to_i)\n      else\n        arithmetic_operation(calculation, token)\n      end\n    end\n\n    private\n\n    def raise_to_nth_power(calculation, n)\n      CalculationState.new(:operation, calculation.answer ** n, nil)\n    end\n\n    def arithmetic_operation(calculation, token)\n      CalculationState.new(:number, calculation.answer, operation_for(token))\n    end\n\n    def operation_for(token)\n      case token\n        when "plus"          then -> (answer, x) { answer + x }\n        when "minus"         then -> (answer, x) { answer - x }\n        when "multiplied by" then -> (answer, x) { answer * x }\n        when "divided by"    then -> (answer, x) { answer / x }\n      end\n    end\n\n  end\n\n  TOKENS = {\n    :spaces       => /\\s+/,\n    :first_number => /-?\\d+/,\n    :number       => /-?\\d+/,\n    :operation    => /plus|minus|multiplied by|divided by|raised to the \\d+(st|nd|th) power/,\n  }\n\n  STATE_TRANSITIONS = {\n    :first_number => OnFirstNumber.new,\n    :operation    => OnOperation.new,\n    :number       => OnNumber.new,\n  }\n\n  def initialize(question)\n    @question = question\n  end\n\n  def answer\n    calculation = CalculationState.new(:first_number, nil, nil)\n    scan_question do |scanner|\n      state_transition_for calculation do |transition|\n        token = scanner.scan!(TOKENS[transition.expected_token])\n        calculation = transition.update(calculation, token)\n      end\n    end\n    calculation.answer\n  end\n\n  private\n\n  def state_transition_for(calculation)\n    yield STATE_TRANSITIONS[calculation.state]\n  end\n\n  def scan_question\n    scanner = StrictStringScanner.new(sanitize(@question))\n    while not scanner.eos?\n      scanner.skip(TOKENS[:spaces])\n      yield scanner\n    end\n  end\n\n  def sanitize(question)\n    question.\n      gsub(/^What is/, "").\n      gsub(/\\?$/, "")\n  end\n\nend	\N	\N	0	1	2014-05-31 20:13:02	2014-05-31 20:13:02	227	word_problem.rb
479	17	1017ad2ebcc11c0d2382fed3	superseded	ruby	hamming	class Hamming\n\n  def self.compute(stranda, strandb)\n    count = 0\n    self.smallest_strand_size(stranda, strandb).times do |index|\n      count += 1 unless stranda.chars.to_a[index] == strandb.chars.to_a[index]\n    end\n    count\n  end\n\n  private\n\n  def self.smallest_strand_size(stranda, strandb)\n    return strandb.length if stranda.length > strandb.length\n    stranda.length\n  end\nend	\N	\N	0	2	2014-04-22 22:27:09	2014-04-22 22:27:09	230	hamming.rb
480	17	4d056adae2b7647e01ae5544	superseded	ruby	hamming	class Hamming\n\n  def self.compute(stranda, strandb)\n    strandb = strandb.chars.to_a\n    count = 0\n    0.upto(strandb.length).each do |index|\n      return count if self.no_strand_to_compare?(stranda[index], strandb[index])\n      unless stranda[index] == strandb[index]\n        count += 1\n      end\n    end\n  end\n\n  private\n  \n  def self.no_strand_to_compare?(a, b)\n    a.nil? || b.nil?\n  end\nend	\N	\N	0	1	2014-05-07 03:17:01	2014-05-07 03:17:01	230	hamming.rb
481	17	c612b4df8e57e3e6ecaa63f3	pending	ruby	hamming	class Hamming\n\n  def self.compute(stranda, strandb)\n    count = 0\n    self.smallest_strand_size(stranda, strandb).times do |index|\n      count += 1 unless strands_match_on_index?(stranda, strandb, index)\n    end\n    count\n  end\n\n  private\n\n  def self.smallest_strand_size(stranda, strandb)\n    [stranda, strandb].min.length\n  end\n\n  def self.strands_match_on_index?(stranda, strandb, index)\n    stranda.chars.to_a[index] == strandb.chars.to_a[index]\n  end\nend	\N	\N	0	3	2014-05-18 13:12:09	2014-05-18 13:12:09	230	hamming.rb
482	17	63be94d35a4d2edae73b84ba	superseded	javascript	anagram	module.exports = function(word) {\n  var letter_counts = function(word) {\n    var counts = {};\n    for (var i=0; i < word.length; i++) {\n      var char = word.charAt(i).toLowerCase();\n      counts[char] = counts[char] ? counts[char] + 1 : 1;\n    }\n    return counts;\n  };\n\n  var letter_counts_in_word = letter_counts(word);\n\n  return {\n    match: function(words) {\n      var anagrams = [];\n      for(var i=0; i < words.length; i++) {\n        var potential = words[i];\n        if (potential.length != word.length || potential.toLowerCase() === word.toLowerCase()) {\n          continue;\n        }\n        var counts = letter_counts(potential);\n        var match = true;\n\n        var letters = Object.keys(counts);\n        for (var j=0; j < letters.length; j++) {\n          var letter = letters[j];\n          if (counts[letter] !== letter_counts_in_word[letter]) {\n            match = false;\n            break;\n          }\n        }\n        if (match) {\n          anagrams.push(potential);\n        }\n      }\n      return anagrams;\n    }\n  };\n};	\N	\N	0	2	2014-04-18 05:55:11	2014-04-18 05:55:11	231	anagram.js
483	17	49a111baf6ae257d933a0346	superseded	javascript	anagram	module.exports = function(word) {\n  var letter_counts = function(word) {\n    var counts = {};\n    for (var i=0; i < word.length; i++) {\n      var char = word.charAt(i).toLowerCase();\n      counts[char] = counts[char] ? counts[char] + 1 : 1;\n    }\n    return counts;\n  };\n\n  var equal_counts = function(a, b) {\n    var keys_a = Object.keys(a);\n    var keys_b = Object.keys(b);\n\n    if (keys_a.length != keys_b.length) {\n      return false;\n    }\n\n    for (var i=0; i < keys_a.length; i++) {\n      var key = keys_a[i];\n      if (a[key] !== b[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var same_word = function(a, b) {\n    return a.toLowerCase() === b.toLowerCase();\n  };\n\n  var letter_counts_in_word = letter_counts(word);\n\n  return {\n    match: function(words) {\n      var anagrams = [];\n\n      for (var i=0; i < words.length; i++) {\n        var potential = words[i];\n\n        if (same_word(word, potential)) {\n          continue;\n        }\n\n        if (equal_counts(letter_counts_in_word, letter_counts(potential))) {\n          anagrams.push(potential);\n        }\n      }\n\n      return anagrams;\n    }\n  };\n};	\N	\N	0	4	2014-04-24 06:26:59	2014-04-24 06:26:59	231	anagram.js
484	17	1bb286a4b6349d90d78b5749	superseded	javascript	anagram	module.exports = function(word) {\n  var letter_counts = function(word) {\n    var counts = {};\n    for (var i=0; i < word.length; i++) {\n      var char = word.charAt(i).toLowerCase();\n      counts[char] = counts[char] ? counts[char] + 1 : 1;\n    }\n    return counts;\n  };\n\n  var equal_counts = function(a, b) {\n    var keys_a = Object.keys(a);\n    var keys_b = Object.keys(b);\n\n    if (keys_a.length != keys_b.length) {\n      return false;\n    }\n\n    for (var i=0; i < keys_a.length; i++) {\n      var key = keys_a[i];\n      if (a[key] !== b[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var same_word = function(a, b) {\n    return a.toLowerCase() === b.toLowerCase();\n  };\n\n  var letter_counts_in_word = letter_counts(word);\n\n  var is_anagram = function(value) {\n    var counts = letter_counts(value);\n    return !same_word(word, value) && equal_counts(letter_counts_in_word, counts);\n  }\n\n  return {\n    match: function(words) {\n      var anagrams = [];\n\n      for (var i=0; i < words.length; i++) {\n        var potential = words[i];\n\n        if (is_anagram(potential)) {\n          anagrams.push(potential);\n        }\n      }\n\n      return anagrams;\n    }\n  };\n};	\N	\N	0	6	2014-04-28 20:00:07	2014-04-28 20:00:07	231	anagram.js
485	17	694b2c881784ded1d52c2902	superseded	javascript	anagram	module.exports = function(word) {\n  var letter_counts = function(word) {\n    var counts = {};\n    for (var i=0; i < word.length; i++) {\n      var char = word.charAt(i).toLowerCase();\n      counts[char] = counts[char] ? counts[char] + 1 : 1;\n    }\n    return counts;\n  };\n\n  var equal_counts = function(a, b) {\n    var keys_a = Object.keys(a);\n    var keys_b = Object.keys(b);\n\n    if (keys_a.length != keys_b.length) {\n      return false;\n    }\n\n    for (var i=0; i < keys_a.length; i++) {\n      var key = keys_a[i];\n      if (a[key] !== b[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var same_word = function(a, b) {\n    return a.toLowerCase() === b.toLowerCase();\n  };\n\n  var letter_counts_in_word = letter_counts(word);\n\n  var is_anagram = function(value) {\n    var counts = letter_counts(value);\n    return !same_word(word, value) && equal_counts(letter_counts_in_word, counts);\n  }\n\n\n  return {\n    match: function(words) {\n      var anagrams = [];\n\n      for (var i=0; i < words.length; i++) {\n        var potential = words[i];\n\n        if (is_anagram(potential)) {\n          anagrams.push(potential);\n        }\n      }\n\n      return anagrams;\n    }\n  };\n};	\N	\N	0	5	2014-05-06 20:46:30	2014-05-06 20:46:30	231	anagram.js
486	17	c757caae85448270d96f840d	superseded	javascript	anagram	module.exports = function(word) {\n  var letter_counts = function(word) {\n    var counts = {};\n    for (var i=0; i < word.length; i++) {\n      var char = word.charAt(i).toLowerCase();\n      counts[char] = counts[char] ? counts[char] + 1 : 1;\n    }\n    return counts;\n  };\n\n  var equal_counts = function(a, b) {\n    var keys_a = Object.keys(a);\n    var keys_b = Object.keys(b);\n\n    if (keys_a.length != keys_b.length) {\n      return false;\n    }\n\n    for (var i=0; i < keys_a.length; i++) {\n      var key = keys_a[i];\n      if (a[key] !== b[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var same_word = function(a, b) {\n    return a.toLowerCase() === b.toLowerCase();\n  };\n\n  var letter_counts_in_word = letter_counts(word);\n\n  var is_anagram = function(value) {\n    var counts = letter_counts(value);\n    return !same_word(word, value) && equal_counts(letter_counts_in_word, counts);\n  };\n\n  return {\n    match: function(words) {\n      var anagrams = [];\n\n      words.forEach(function(potential) {\n\n        if (is_anagram(potential)) {\n          anagrams.push(potential);\n        }\n      });\n\n      return anagrams;\n    }\n  };\n};	\N	\N	0	8	2014-05-19 06:55:35	2014-05-19 06:55:35	231	anagram.js
487	17	770e67ff4bbd0b7fc00229fc	pending	javascript	anagram	module.exports = function(word) {\n  var letter_counts = function(word) {\n    var counts = {};\n    for (var i=0; i < word.length; i++) {\n      var char = word.charAt(i).toLowerCase();\n      counts[char] = counts[char] ? counts[char] + 1 : 1;\n    }\n    return counts;\n  };\n\n  var equal_counts = function(a, b) {\n    var keys_a = Object.keys(a);\n    var keys_b = Object.keys(b);\n\n    if (keys_a.length != keys_b.length) {\n      return false;\n    }\n\n    for (var i=0; i < keys_a.length; i++) {\n      var key = keys_a[i];\n      if (a[key] !== b[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var same_word = function(a, b) {\n    return a.toLowerCase() === b.toLowerCase();\n  };\n\n  var letter_counts_in_word = letter_counts(word);\n\n  var is_anagram = function(value) {\n    var counts = letter_counts(value);\n    return !same_word(word, value) && equal_counts(letter_counts_in_word, counts);\n  };\n\n  return {\n    match: function(words) {\n      var anagrams = [];\n\n      words.forEach(function(potential) {\n        if (is_anagram(potential)) {\n          anagrams.push(potential);\n        }\n      });\n\n      return anagrams;\n    }\n  };\n};	\N	\N	0	9	2014-05-25 21:28:38	2014-05-25 21:28:38	231	anagram.js
488	17	c736a3036f38f68a9e2a139f	superseded	javascript	anagram	module.exports = function(word) {\n  var letter_counts = function(word) {\n    var counts = {};\n    for (var i=0; i < word.length; i++) {\n      var char = word.charAt(i).toLowerCase();\n      counts[char] = counts[char] ? counts[char] + 1 : 1;\n    }\n    return counts;\n  };\n\n  var letter_counts_in_word = letter_counts(word);\n\n  return {\n    match: function(words) {\n      var anagrams = [];\n      for(var i=0; i < words.length; i++) {\n        var potential = words[i];\n        if (potential.length != word.length || potential === word) {\n          continue;\n        }\n        var counts = letter_counts(potential);\n        var match = true;\n\n        var letters = Object.keys(counts);\n        for (var j=0; j < letters.length; j++) {\n          var letter = letters[j];\n          if (counts[letter] !== letter_counts_in_word[letter]) {\n            match = false;\n            break;\n          }\n        }\n        if (match) {\n          anagrams.push(potential);\n        }\n      }\n      return anagrams;\n    }\n  };\n};	\N	\N	0	1	2014-06-10 14:39:41	2014-06-10 14:39:41	231	anagram.js
489	17	363082d56b2cd90978c54e20	superseded	javascript	anagram	module.exports = function(word) {\n  var letter_counts = function(word) {\n    var counts = {};\n    for (var i=0; i < word.length; i++) {\n      var char = word.charAt(i).toLowerCase();\n      counts[char] = counts[char] ? counts[char] + 1 : 1;\n    }\n    return counts;\n  };\n\n  var equal_counts = function(a, b) {\n    var keys_a = Object.keys(a);\n    var keys_b = Object.keys(b);\n\n    if (keys_a.length != keys_b.length) {\n      return false;\n    }\n\n    for (var i=0; i < keys_a.length; i++) {\n      var key = keys_a[i];\n      if (a[key] !== b[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var letter_counts_in_word = letter_counts(word);\n\n  return {\n    match: function(words) {\n      var anagrams = [];\n      for (var i=0; i < words.length; i++) {\n        var potential = words[i];\n\n        if (potential.length != word.length) {\n          continue;\n        }\n            \n        if (potential.toLowerCase() === word.toLowerCase()) {\n          continue;\n        }\n\n        if (equal_counts(letter_counts_in_word, letter_counts(potential))) {\n          anagrams.push(potential);\n        }\n      }\n\n      return anagrams;\n    }\n  };\n};	\N	\N	0	3	2014-06-15 04:46:20	2014-06-15 04:46:20	231	anagram.js
490	17	3ddd0a0b7d35f3f6b6673031	superseded	javascript	anagram	module.exports = function(word) {\n  var letter_counts = function(word) {\n    var counts = {};\n    for (var i=0; i < word.length; i++) {\n      var char = word.charAt(i).toLowerCase();\n      counts[char] = counts[char] ? counts[char] + 1 : 1;\n    }\n    return counts;\n  };\n\n  var equal_counts = function(a, b) {\n    var keys_a = Object.keys(a);\n    var keys_b = Object.keys(b);\n\n    if (keys_a.length != keys_b.length) {\n      return false;\n    }\n\n    for (var i=0; i < keys_a.length; i++) {\n      var key = keys_a[i];\n      if (a[key] !== b[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var same_word = function(a, b) {\n    return a.toLowerCase() === b.toLowerCase();\n  };\n\n  var letter_counts_in_word = letter_counts(word);\n\n  var is_anagram = function(value) {\n    var counts = letter_counts(value);\n    return !same_word(word, value) && equal_counts(letter_counts_in_word, counts);\n  };\n\n  return {\n    match: function(words) {\n      var anagrams = [];\n\n      for (var i=0; i < words.length; i++) {\n        var potential = words[i];\n\n        if (is_anagram(potential)) {\n          anagrams.push(potential);\n        }\n      }\n\n      return anagrams;\n    }\n  };\n};	\N	\N	0	7	2014-07-10 04:48:50	2014-07-10 04:48:50	231	anagram.js
491	17	b61e6fb2c9fe499baa3b1294	superseded	ruby	word-count	#!/usr/bin/ruby\n# Word count exercise\n\nclass Phrase  \n  def initialize(phrase)\n    @phrase = phrase\n    @counts = Hash.new(0)\n    @done = false\n  end\n  \n  def word_count\n    process unless @done\n    @counts\n  end\n  \n  def process\n    @phrase.split(/[^\\w']+/).each do |word|\n      @counts[word.downcase]+=1\n    end\n    @done=true\n  end\nend	\N	\N	0	1	2014-05-17 14:14:17	2014-05-17 14:14:17	232	word-count.rb
492	17	80823cb6c5ca37d093f13022	superseded	ruby	word-count	#!/usr/bin/ruby\n# Word count exercise\n\nclass Phrase  \n  def initialize(phrase)\n    @phrase = phrase\n    @counts = Hash.new(0)\n    @done = false\n  end\n  \n  def word_count\n    process unless @done\n    @counts\n  end\n  \n  def process\n    @phrase.scan(/\\w'+/).each do |word|\n      @counts[word.downcase]+=1\n    end\n    @done=true\n  end\nend	\N	\N	0	2	2014-06-15 08:50:15	2014-06-15 08:50:15	232	word-count.rb
493	17	f7993010b638e978ad675c56	pending	ruby	word-count	#!/usr/bin/ruby\n# Word count exercise\n\nclass Phrase  \n  def initialize(phrase)\n    @phrase = phrase.downcase\n    @counts = Hash.new(0)\n    @done = false\n  end\n  \n  def word_count\n    process unless @done\n    @counts\n  end\n  \n  def process\n    @phrase.scan(/[\\w']+/).each do |word|\n      @counts[word]+=1\n    end\n    @done=true\n  end\nend	\N	\N	0	3	2014-06-28 19:02:23	2014-06-28 19:02:23	232	word-count.rb
494	17	4aa84b676db31db2815f35aa	pending	python	rna-transcription	class DNA:\n\tdef __init__(self, strand):\n\t\tself.strand = strand; #DNA's strand in a string format\n\n\tdef to_rna(self):\n\t\treturn self.strand.replace('T', 'U');	\N	\N	0	1	2014-05-26 17:42:28	2014-05-26 17:42:28	233	dna.py
495	17	ed5d9226fe85682c464bb32e	pending	ruby	robot-name	class Robot\r\n  attr_reader :name\r\n  \r\n  def initialize\r\n    @used_names = []\r\n    @name = pick_name\r\n  end\r\n  \r\n  def reset\r\n    @name = pick_name\r\n  end\r\n  \r\n  def pick_name\r\n    begin \r\n      @name = generate_name\r\n    end while @used_names.include? @name\r\n    @used_names << @name\r\n\t@name\r\n  end\r\n  \r\n  def generate_name\r\n    (1..2).map { random_letter }.join + (1..3).map { random_digit }.join\r\n  end\r\n  \r\n  def random_letter\r\n    ('A'..'Z').to_a[rand(26)]\r\n  end\r\n  \r\n  def random_digit\r\n    rand(9)\r\n  end\r\nend\r	\N	\N	0	1	2014-04-21 02:37:45	2014-04-21 02:37:45	234	robot.rb
496	17	623a823b89b0835fb06dbb6d	pending	ruby	rna-transcription	class Complement\n\tclass << self\n\t\tdef of_dna(ch)\n\t\t\tmap = {\n\t\t\t\t"C" => "G",\n\t\t\t\t"G" => "C",\n\t\t\t\t"T" => "A",\n\t\t\t\t"A" => "U"\n\t\t\t}\n\t\t\tch.split("").map{|f| map[f] }.join\n\t\tend\n\n\t\tdef of_rna(ch)\n\t\t\tmap = {\n\t\t\t\t"G" => "C",\n\t\t\t\t"C" => "G",\n\t\t\t\t"U" => "A",\n\t\t\t\t"A" => "T"\n\t\t\t}\n\t\t\tch.split("").map{|f| map[f] }.join\n\t\tend\n\tend\nend	\N	\N	0	1	2014-06-27 00:22:23	2014-06-27 00:22:23	235	complement.rb
497	17	f2830c46d8b955113829f624	pending	python	anagram	class Anagram:\n\n    def __init__(self, w):\n        self.word=w\n\n    def match(self,cands):\n         return [ m for m in cands if self._is_anagram(self.word, m) ]   \n\n    def _is_anagram(self, s1, s2):\n        if (len(s1)!=len(s2) or s1==s2):\n            return False\n        for s in s1:\n            if( s1.lower().count(s) != s2.lower().count(s) ) :\n                return False\n        else:\n            return True\n\ndef main():\n    print(Anagram("listen").match(["inlets","google","listen","longword"]))\n\nif __name__=="__main__":\n    main()	\N	\N	0	2	2014-06-05 04:21:57	2014-06-05 04:21:57	236	anagram.py
498	17	f1f1890f27989ccfba5ee987	superseded	python	anagram	class Anagram:\n    def __init__(self,w):\n        self.word=w\n\n    def match(self,cands):\n        \n         matches = filter(lambda x: len(x)==len(self.word) and x!=self.word, cands)\n         return [match for match in matches if is_anagram(self.word,match)]   \n\ndef is_anagram(s1,s2):\n    """Assumes words equal length but not identical"""\n    for s in s1:\n        if(s1.lower().count(s)!=s2.lower().count(s)):\n            return False\n    else:\n        return True\n\ndef main():\n    print(Anagram("listen").match(["inlets","google","listen","longword"]))\n\nif __name__=="__main__":\n    main()	\N	\N	0	1	2014-06-26 07:48:02	2014-06-26 07:48:02	236	anagram.py
499	17	bd6840f8d6270c40be327224	pending	ruby	grains	class Grains\n\n  def squareX(num)\n    result = 1\n    (num-1).times { result *= 2 }\n    result\n  end\n\n  def totalX\n    result = 0\n    (1..64).each { |i| result += square(i) }\n    result\n  end\n\n  def squareY(num)\n    2 ** ( num -1 )\n  end\n\n  def square(num)\n    1 << ( num -1 )\n  end\n\n  def total\n    # so the total is all the space fill with one\n    # or 0xffffffffffffffff\n    0b1111111111111111111111111111111111111111111111111111111111111111\n  end\n\nend\n\n=begin\nFile: grains_profile.rb\n\nrequire_relative 'grains'\nrequire 'profiler'\n\ndef functionToBeProfiled\n  grains = Grains.new\n  1000000.times do |i|\n    result = grains.squareY(i%64)\n  end\nend\n\ndef functionToBeProfiledX\n  grains = Grains.new\n  1000000.times do |i|\n    result = grains.square(i%64)\n  end\nend\nProfiler__::start_profile\nfunctionToBeProfiled\nProfiler__::stop_profile\nProfiler__::print_profile($stdout)\nputs "--------------------------"\nProfiler__::start_profile\nfunctionToBeProfiledX\nProfiler__::stop_profile\nProfiler__::print_profile($stdout)\n\n\nruby grains_profile.rb\n  %   cumulative   self              self     total\n time   seconds   seconds    calls  ms/call  ms/call  name\n 34.43     4.92      4.92  1000000     0.00     0.01  Grains#squareY\n 29.67     9.16      4.24  1000001     0.00     0.03  Object#functionToBeProfiled\n 24.21    12.62      3.46        1  3460.00 14290.00  Integer#times\n  8.54    13.84      1.22  1031250     0.00     0.00  Fixnum#**\n  2.80    14.24      0.40    15625     0.03     0.03  Rational#**\n  0.21    14.27      0.03    31250     0.00     0.00  Fixnum#div\n  0.14    14.29      0.02    31250     0.00     0.00  Fixnum#-@\n  0.00    14.29      0.00        1     0.00     0.00  TracePoint#enable\n  0.00    14.29      0.00        1     0.00     0.00  Class#new\n  0.00    14.29      0.00        1     0.00     0.00  BasicObject#initialize\n  0.00    14.29      0.00        1     0.00     0.00  TracePoint#disable\n  0.00    14.29      0.00        1     0.00 14290.00  #toplevel\n--------------------------\n  %   cumulative   self              self     total\n time   seconds   seconds    calls  ms/call  ms/call  name\n 34.30     4.74      4.74  1000000     0.00     0.01  Grains#square\n 33.07     9.31      4.57  1000001     0.00     0.02  Object#functionToBeProfiledX\n 26.85    13.02      3.71        1  3710.00 13820.00  Integer#times\n  5.79    13.82      0.80  1000000     0.00     0.00  Fixnum#<<\n  0.00    13.82      0.00        1     0.00     0.00  TracePoint#enable\n  0.00    13.82      0.00        1     0.00     0.00  Class#new\n  0.00    13.82      0.00        1     0.00     0.00  BasicObject#initialize\n  0.00    13.82      0.00        1     0.00     0.00  TracePoint#disable\n  0.00    13.82      0.00        1     0.00 13820.00  #toplevel\n\nResult: Looks like << operation a little fast.\n\n=end	\N	\N	0	1	2014-05-09 03:25:26	2014-05-09 03:25:26	237	grains.rb
500	17	5ba8983ab48842f33036173b	superseded	ruby	grade-school	class School\n  attr_reader :db\n\n  def initialize\n    @db = {}\n  end\n\n  def add(name, grade)\n    @db[grade] ||= []\n    @db[grade] << name\n  end\n\n  def grade(num)\n    @db[num] || []\n  end\n\n  def sort\n    Hash[@db.sort_by { |grade, name| grade }.map{|k,v| [k,v.sort]}]\n  end\n\nend	\N	\N	0	1	2014-04-13 09:54:03	2014-04-13 09:54:03	238	grade-school.rb
501	17	fc6d6faca0d037d54c2866ae	superseded	ruby	grade-school	class School\n  attr_reader :db\n\n  def initialize\n    @db = {}\n  end\n\n  def add(name, grade)\n    @db[grade.to_i] ||= []\n    @db[grade.to_i] << name.to_s\n  end\n\n  def grade(num)\n    @db[num] || []\n  end\n\n  def sort\n    Hash[\n      @db.sort_by { |grade, name| grade }\n         .map { |grade, names| [grade, names.sort] }\n    ]\n  end\n\nend	\N	\N	0	2	2014-04-22 12:28:58	2014-04-22 12:28:58	238	grade-school.rb
502	17	c6423bc10fdb5c72e3ef21e5	pending	ruby	grade-school	class School\n  attr_reader :db\n\n  def initialize\n    @db = {}\n  end\n\n  def add(name, grade)\n    name, grade = name.to_s, grade.to_i\n    unless grade < 1 || name.empty?\n      @db[grade.to_i] ||= []\n      @db[grade.to_i] << name.to_s\n    end\n  end\n\n  def grade(num)\n    @db[num] || []\n  end\n\n  def sort\n    Hash[\n      @db.sort_by { |grade, name| grade }\n         .map { |grade, names| [grade, names.sort] }\n    ]\n  end\n\nend	\N	\N	0	3	2014-05-25 16:25:48	2014-05-25 16:25:48	238	grade-school.rb
503	17	6cce1fb1a549ec7afa78d1ed	pending	clojure	beer-song	(ns beer\n  (:require [clojure.string :as s]))\n\n(defn str_count_of_bottle [number]\n  (def bottles {0 "no more bottles" 1 "%d bottle" :default "%d bottles"})\n  (format \n    (or (bottles number) (bottles :default)) \n    number))\n\n(defn verse [number]\n  (if (not= number 0)\n    (format \n      "%1$s of beer on the wall, %1$s of beer.\\nTake %2$s down and pass it around, %3$s of beer on the wall.\\n"\n      (str_count_of_bottle number)\n      (if (not= number 1) "one" "it")\n      (str_count_of_bottle (- number 1)))\n    "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"))\n\n(defn sing \n  ([from to] \n   (s/join \n     "\\n" \n     (map \n       #(verse %1) \n       (range from (- to 1) -1))))\n  ([from]   \n   (sing from 0)))	\N	\N	0	1	2014-05-28 14:56:06	2014-05-28 14:56:06	239	beer.clj
504	17	89fe99da9afa3c702ac83ef3	superseded	haskell	robot-name	module Robot (robotName, mkRobot, resetName) where\n\nimport Data.IORef (IORef, readIORef, newIORef, writeIORef)\nimport System.Random (randomRIO)\n\ndata Robot = Robot { rbtName :: IORef String }\ndata CharPattern = C | N deriving Eq\n\nrobotNamePattern :: [CharPattern]\nrobotNamePattern = [C, C, N, N, N]\n\nrobotName :: Robot -> IO String\nrobotName (Robot n) = readIORef n\n\nmkRobot :: IO Robot\nmkRobot = do\n        randomName <- randomString robotNamePattern\n        name <- newIORef randomName\n        return $ Robot name\n\nresetName :: Robot -> IO ()\nresetName (Robot n) = do\n        name <- randomString robotNamePattern\n        writeIORef n name\n\nrandomString :: [CharPattern] -> IO String\nrandomString = mapM randomChar\n        where randomChar N = randomRIO ('0','9')\n              randomChar _ = randomRIO ('A','Z')	\N	\N	0	4	2014-04-17 17:01:16	2014-04-17 17:01:16	240	robot-name.hs
505	17	e8e568dfbe0f829f23055aa2	superseded	haskell	robot-name	module Robot (robotName, mkRobot, resetName) where\n\nimport Data.IORef (IORef, readIORef, newIORef, writeIORef)\nimport System.Random (randomRIO)\n\ndata Robot = Robot { name :: IORef String }\ntype RandomStringPattern = String\n\nrobotNamePattern :: String\nrobotNamePattern = "CCNNN"\n\nrobotName :: Robot -> IO String\nrobotName (Robot n) = do\n        name <- readIORef n\n        return name\n\nmkRobot :: IO Robot\nmkRobot = do\n        randomName <- randomString robotNamePattern\n        name <- newIORef randomName\n        return $ Robot name\n\nresetName :: Robot -> IO ()\nresetName (Robot n) = do\n        name <- randomString "LLNNN"\n        writeIORef n name\n\nrandomString :: RandomStringPattern -> IO String\nrandomString p = mapM randomChar p\n        where randomChar x\n                | x == 'N' = randomRIO ('0','9')\n                | otherwise = randomRIO ('A','Z')	\N	\N	0	1	2014-05-12 17:16:14	2014-05-12 17:16:14	240	robot-name.hs
506	17	3f588b04065698144a1e1ee9	superseded	haskell	robot-name	module Robot (robotName, mkRobot, resetName) where\n\nimport Data.IORef (IORef, readIORef, newIORef, writeIORef)\nimport System.Random (randomRIO)\n\ndata Robot = Robot { name :: IORef String }\ndata CharPattern = C | N deriving Eq\ntype RandomStringPattern = String\n\nrobotNamePattern :: [CharPattern]\nrobotNamePattern = [C, C, N, N, N]\n\nrobotName :: Robot -> IO String\nrobotName (Robot n) = do\n        name <- readIORef n\n        return name\n\nmkRobot :: IO Robot\nmkRobot = do\n        randomName <- randomString robotNamePattern\n        name <- newIORef randomName\n        return $ Robot name\n\nresetName :: Robot -> IO ()\nresetName (Robot n) = do\n        name <- randomString robotNamePattern\n        writeIORef n name\n\nrandomString :: [CharPattern] -> IO String\nrandomString p = mapM randomChar p\n        where randomChar x\n                | x == N = randomRIO ('0','9')\n                | otherwise = randomRIO ('A','Z')	\N	\N	0	2	2014-06-09 03:42:35	2014-06-09 03:42:35	240	robot-name.hs
507	17	0dd19c6b031e461a04bd041b	superseded	haskell	robot-name	module Robot (robotName, mkRobot, resetName) where\n\nimport Data.IORef (IORef, readIORef, newIORef, writeIORef)\nimport System.Random (randomRIO)\n\ndata Robot = Robot { name :: IORef String }\ndata CharPattern = C | N deriving Eq\n\nrobotNamePattern :: [CharPattern]\nrobotNamePattern = [C, C, N, N, N]\n\nrobotName :: Robot -> IO String\nrobotName (Robot n) = readIORef n\n\nmkRobot :: IO Robot\nmkRobot = do\n        randomName <- randomString robotNamePattern\n        name <- newIORef randomName\n        return $ Robot name\n\nresetName :: Robot -> IO ()\nresetName (Robot n) = do\n        name <- randomString robotNamePattern\n        writeIORef n name\n\nrandomString :: [CharPattern] -> IO String\nrandomString p = mapM randomChar p\n        where randomChar x\n                | x == N = randomRIO ('0','9')\n                | otherwise = randomRIO ('A','Z')	\N	\N	0	3	2014-06-29 20:50:12	2014-06-29 20:50:12	240	robot-name.hs
508	17	10ede741b159166bbe8c270b	pending	haskell	robot-name	module Robot (robotName, mkRobot, resetName) where\n\nimport Data.IORef (IORef, readIORef, newIORef, writeIORef)\nimport System.Random (randomRIO)\n\ndata Robot = Robot { rbtName :: IORef String }\ndata CharPattern = C | N deriving Eq\n\nrobotNamePattern :: [CharPattern]\nrobotNamePattern = [C, C, N, N, N]\n\nrobotName :: Robot -> IO String\nrobotName (Robot n) = readIORef n\n\nmkRobot :: IO Robot\nmkRobot = do\n        randomName <- randomString robotNamePattern\n        name <- newIORef randomName\n        return $ Robot name\n\nresetName :: Robot -> IO ()\nresetName (Robot n) = do\n        name <- randomString robotNamePattern\n        writeIORef n name\n\nrandomString :: [CharPattern] -> IO String\nrandomString = mapM randomChar\n        where randomChar N = randomRIO ('0','9')\n              randomChar C = randomRIO ('A','Z')	\N	\N	0	5	2014-07-13 07:55:36	2014-07-13 07:55:36	240	robot-name.hs
509	17	6e1560cb3f9fd0715c869664	pending	scala	hamming	object Hamming {\n    def compute(strand1: String, strand2: String): Int = {\n        (strand1 zip strand2) count (c => c._1 != c._2);\n    }\n}	\N	\N	0	2	2014-06-11 22:53:52	2014-06-11 22:53:52	241	hamming.scala
510	17	99922ace936e71db4abf2264	superseded	scala	hamming	object Hamming {\n    def compute(strand1: String, strand2: String): Int = {\n        var count = 0\n        strand1.zip(strand2).foreach(char => {\n            if (char._1 != char._2) {\n                count += 1\n            }\n        })\n        count\n    }\n}	\N	\N	0	1	2014-06-16 04:29:13	2014-06-16 04:29:13	241	hamming.scala
511	17	f4e45a86d0e94629f2cd9665	pending	ruby	prime-factors	class PrimeFactors\n\n  def self.for(number)\n    factors = []\n    divisor = 2\n    while number > 1\n      while number % divisor == 0\n        factors << divisor\n        number /= divisor\n      end\n      divisor += 1\n    end\n    factors\n  end\nend	\N	\N	0	2	2014-06-07 04:59:53	2014-06-07 04:59:53	242	prime-factors.rb
512	17	1e8b6547ef645f0658a7ef70	superseded	ruby	prime-factors	class PrimeFactors\n  \n  def self.for(i)\n    factor = 2\n    value = []\n    until i < factor\n      div, mod = i.divmod(factor)\n      if mod == 0\n       value << factor\n       number = div \n    else\n      factor += 1 \n    end\n  end\n    value\n  end\nend	\N	\N	0	1	2014-06-30 13:45:18	2014-06-30 13:45:18	242	prime-factors.rb
513	17	f160438b6afdd3ca0b78c2dc	pending	ruby	clock	class Clock\n  def self.at(*args)\n    new(*args)\n  end\n\n  attr_reader :hour, :minute\n\n  def initialize(hour, minute = 0)\n    @hour = hour\n    @minute = minute\n  end\n\n  def to_s\n    "%02d:%02d" % [hour, minute]\n  end\n\n  def +(mins)\n    h, m = adjust_clock(hour, minute + mins)\n    self.class.new(h, m)\n  end\n\n  def -(mins)\n    h, m = adjust_clock(hour, minute - mins)\n    self.class.new(h, m)\n  end\n\n  def ==(other)\n    hour == other.hour && minute == other.minute\n  end\n\n  private\n\n  def adjust_clock(hour, minute)\n    while minute < 0\n      minute += 60\n      hour -= 1\n    end\n\n    while minute > 59\n      minute -= 60\n      hour += 1\n    end\n\n    if hour < 0\n      hour = 23\n    end\n\n    if hour > 23\n      hour = 0\n    end\n\n    [hour, minute]\n  end\nend	\N	\N	0	1	2014-05-13 02:33:58	2014-05-13 02:33:58	243	clock.rb
514	17	2032c2964961c8afd88b3989	pending	go	gigasecond	package gigasecond\n\nimport "time"\n\nconst Gigasecond time.Duration = 1e9 * time.Second\n\nfunc AddGigasecond(t time.Time) time.Time {\n\treturn t.Add(Gigasecond)\n}	\N	\N	0	2	2014-04-14 03:27:32	2014-04-14 03:27:32	244	gigasecond.go
515	17	1fefb642311f8111d2890b5f	superseded	go	gigasecond	package gigasecond\n\nimport "time"\n\nconst Gigasecond time.Duration = 1000000000 * time.Second\n\nfunc AddGigasecond(t time.Time) time.Time {\n\treturn t.Add(Gigasecond)\n}	\N	\N	0	1	2014-06-28 09:52:46	2014-06-28 09:52:46	244	gigasecond.go
516	23	125961f4ca9e82b1bc0ec1ec	pending	ruby	binary	class Binary\n\n  def initialize(num)\n    @num = num\n  end\n\n  def to_decimal\n    if @num =~ /[^0-9]/\n      return 0\n    end\n    binary_array = @num.chars.to_a\n    binary_array.reverse!\n    sum = 0\n    decimal_value = 1\n    binary_array.each do |b_digit|\n      if b_digit.to_i == 1\n        sum += decimal_value\n      end\n      decimal_value *= 2\n    end\n    sum\n  end\nend	\N	\N	0	1	2013-12-16 11:07:00	2013-12-16 11:07:00	245	binary.rb
517	23	cb18e37ef221657178576d02	pending	javascript	anagram	(function() {\n  "use strict";\n\n  var Anagram = function(word) {\n    this.subject = sortLetters(word);\n  };\n\n  Anagram.prototype.match = function(words) {\n    return words.filter(function(word) {\n      return this.subject === sortLetters(word);\n    }, this);\n  };\n\n  var sortLetters = function(word) {\n    return word.split("").sort().join();\n  };\n\n  module.exports = Anagram;\n})();	\N	\N	0	2	2013-11-25 01:45:49	2013-11-25 01:45:49	246	anagram.js
518	23	dbf11b93ded60c4e72da99d2	superseded	javascript	anagram	(function() {\n  "use strict";\n\n  var Anagram = function(word) {\n    this.subject = payload(word);\n  };\n\n  Anagram.prototype.match = function(words) {\n    return words.filter(function(word) {\n      return this.subject === payload(word);\n    }, this);\n  };\n\n  var payload = function(word) {\n    return word.split("").sort().join();\n  };\n\n  module.exports = Anagram;\n})();	\N	\N	0	1	2013-12-02 01:25:14	2013-12-02 01:25:14	246	anagram.js
519	23	538f80cc1ffb1d008abef7f5	superseded	haskell	rna-transcription	module DNA\n   (toRNA)\nwhere\n\ntoRNA = foldr (\\v acc -> dnaToRna v : acc) []\n  where\n    dnaToRna 'T' = 'U'\n    dnaToRna c = c	\N	\N	0	1	2013-11-28 09:08:53	2013-11-28 09:08:53	247	rna-transcription.hs
520	23	13d059d5297de73eea530c62	pending	haskell	rna-transcription	module DNA\n   (toRNA)\nwhere\n\ntoRNA = map dnaToRna\n  where\n    dnaToRna 'T' = 'U'\n    dnaToRna c = c	\N	\N	0	2	2014-03-25 11:12:32	2014-03-25 11:12:32	247	rna-transcription.hs
521	23	36be444b2f225cb901cbe9b2	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)\n}	\N	\N	0	1	2013-12-05 14:31:01	2013-12-05 14:31:01	248	leap.go
522	23	cf82701edec6a26b329182d2	pending	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn year%4 == 0 && (year%100 != 0 || year%400 == 0)\n}	\N	\N	0	2	2014-04-12 22:51:02	2014-04-12 22:51:02	248	leap.go
535	23	5c278651c3495654a133c981	pending	ruby	word-count	class Phrase\n\tattr_reader :input\n\tdef initialize(input)\n\t\t@phrase = input.downcase().gsub(/[^0-9A-Za-z']/, ' ').split(' ')\n\tend\n\tdef word_count\n  \tcounts = Hash.new(0)\n   \t@phrase.each do |word|\n    \tcounts[word] += 1\n\t \tend\n\treturn counts\n\tend\nend	\N	\N	0	1	2014-06-20 03:28:54	2014-06-20 03:28:54	256	phrase.rb
523	23	6867f8794c59ea9acf2792d7	pending	ruby	bob	class Bob\n  def hey(text)\n    something = Something.new(text)\n    answer(something)\n  end\n\n  def answer(something)\n    case\n    when something.silent?\n      "Fine. Be that way!"\n    when something.loud?\n      "Woah, chill out!"\n    when something.question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  class Something\n    def initialize(text)\n      @text = text\n    end\n\n    def silent?\n      text.nil? || text.strip == ''\n    end\n\n    def loud?\n      text.upcase == text\n    end\n\n    def question?\n      text.end_with? '?'\n    end\n\n    private\n    def text\n      @text\n    end\n  end\nend	\N	\N	0	2	2013-12-13 09:10:09	2013-12-13 09:10:09	249	bob.rb
524	23	ead6ace9308313a8543052d9	superseded	ruby	bob	class Bob\n  def hey(text)\n    something = Something.new(text)\n    return "Fine. Be that way!" if something.empty?\n    return "Woah, chill out!" if something.loud?\n    return "Sure." if something.question?\n    "Whatever."\n  end\n\n  Something = Struct.new(:text) do\n    def empty?\n      text.nil? || text.strip == ''\n    end\n\n    def loud?\n      text.upcase == text\n    end\n\n    def question?\n      text[-1] == '?'\n    end\n  end\nend	\N	\N	0	1	2014-02-15 17:03:06	2014-02-15 17:03:06	249	bob.rb
525	23	c783499553b2137c93a39484	pending	haskell	bob	module Bob (\nresponseFor\n) where\n\nimport Data.Char\n\nstrip :: String -> String\nstrip s = case s of\n                 [] -> []\n                 (x:xs) -> if elem x " \\t\\r\\n"\n                           then strip xs\n                           else s\n\nresponseFor :: String -> String\nresponseFor phrase | null (strip phrase)          = "Fine. Be that way."\n                   | map toUpper phrase == phrase = "Woah, chill out!"\n                   | last phrase == '?'           = "Sure."\n                   | otherwise                    = "Whatever."	\N	\N	0	1	2013-12-16 19:37:39	2013-12-16 19:37:39	250	bob.hs
526	23	97582922ec5420e8e5432970	pending	perl5	word-count	#!/usr/bin/env perl\n\npackage Phrase;\n\nuse Modern::Perl;\n\nsub word_count {\n    my ($text) = @_;\n    $text = lc $text;\n    $text =~ s/[^a-z0-9\\s]//g;\n    my %count;\n    for my $word (split /\\s+/, $text) {\n        $count{$word}++;\n    }\n    return \\%count;\n}\n1;	\N	\N	0	1	2013-12-02 06:12:58	2013-12-02 06:12:58	251	word-count.pm
527	23	e25716c07d45124b6953ba83	pending	clojure	leap	(ns leap)\n\n(defn divisible-by?\n  "Returns true if n is evenly divisible by d."\n  [d n]\n  (zero? (rem n d)))\n\n(defn leap-year? [year]\n  (and\n   (divisible-by? 4 year)\n   (or (not (divisible-by? 100 year))\n       (divisible-by? 400 year))))	\N	\N	0	1	2014-01-19 11:59:55	2014-01-19 11:59:55	252	leap.clj
528	23	976691ffb2310f2610a50654	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = AnagramWord.new(word)\n  end\n\n  def match(list)\n    list.select do |possible_anagram|\n      word.anagram_of?(AnagramWord.new(possible_anagram))\n    end\n  end\n\nend\n\nclass AnagramWord\n  attr_reader :source\n\n  def initialize(source)\n    @source = source\n  end\n\n  def anagram_of?(other)\n    if duplicate?(other)\n      other_word = other.source.clone\n      if source.length == other_word.length\n        source.each_char {|c| other_word.sub!(/#{c}/i, '')}\n      end\n      other_word.empty?\n    end\n  end\n\n  private\n\n  def duplicate?(other)\n    source.upcase != other.source.upcase\n  end\n\nend	\N	\N	0	1	2013-12-09 09:57:39	2013-12-09 09:57:39	253	anagram.rb
529	23	cfb5ffe43ab590f70f8308c8	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = AnagramWord.new(word)\n  end\n\n  def match(list)\n    list.select do |possible_anagram|\n      word.anagram_of?(AnagramWord.new(possible_anagram))\n    end\n  end\n\nend\n\nclass AnagramWord\n  attr_reader :source\n\n  def initialize(source)\n    @source = source\n  end\n\n  def anagram_of?(other)\n    if duplicate?(other)\n      other_word = other.source.clone\n      if source.length == other_word.length\n        source.each_char {|c| other_word.sub!(/#{c}/i, '')}\n      end\n      other_word.empty?\n    end\n  end\n\n  private\n\n  def duplicate?(other)\n    source.upcase != other.source.upcase\n  end\n\nend	\N	\N	0	2	2013-12-15 13:27:17	2013-12-15 13:27:17	253	anagram.rb
530	23	227a6611c3c3493822b93acb	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = AnagramWord.new(word)\n  end\n\n  def match(possible_anagrams)\n    possible_anagrams.select do |possible_anagram|\n      word.anagram_of?(AnagramWord.new(possible_anagram))\n    end\n  end\n\nend\n\nclass AnagramWord\n  attr_reader :source\n\n  def initialize(source)\n    @source = source.upcase\n  end\n\n  def anagram_of?(other)\n    self == other if different? other\n  end\n\n  def ==(other)\n    self.identity == other.identity\n  end  \n  \n  protected\n\n  def identity\n    source.chars.sort\n  end\n  \n  private\n\n  def different?(other)\n    source != other.source\n  end\n  \nend	\N	\N	0	3	2013-12-28 04:27:07	2013-12-28 04:27:07	253	anagram.rb
531	23	6e34c785bc3521c24b4d3280	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = AnagramWord.new(word)\n  end\n\n  def match(possible_anagrams)\n    possible_anagrams.select do |possible_anagram|\n      word.anagram_of?(AnagramWord.new(possible_anagram))\n    end\n  end\n\nend\n\nclass AnagramWord\n  attr_reader :source\n\n  def initialize(source)\n    @source = source.upcase\n  end\n\n  def anagram_of?(other)\n    source != other.source and self == other\n  end\n\n  def ==(other)\n    self.identity == other.identity\n  end  \n  \n  protected\n\n  def identity\n    source.chars.sort\n  end\n\nend	\N	\N	0	4	2014-04-21 11:41:58	2014-04-21 11:41:58	253	anagram.rb
532	23	a71bd47bc4e6b7031aaffd1f	pending	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @word = AnagramWord.new(word)\n  end\n\n  def match(possible_anagrams)\n    possible_anagrams.select do |possible_anagram|\n      word.anagram_of?(AnagramWord.new(possible_anagram))\n    end\n  end\n\n  private\n\n  attr_reader :word\nend\n\nclass AnagramWord\n  def initialize(subject)\n    @subject = subject.upcase\n  end\n\n  def anagram_of?(other)\n    subject != other.subject and self == other\n  end\n\n  def ==(other)\n    self.identity == other.identity\n  end  \n  \n  protected\n\n  attr_reader :subject\n\n  def identity\n    subject.chars.sort\n  end\n\nend	\N	\N	0	5	2014-05-22 10:57:36	2014-05-22 10:57:36	253	anagram.rb
533	23	33d7f11b087cb4e9748a813d	pending	python	bob	class Bob:\r\n  def hey(self, text):\r\n    if not text or text.isspace(): # not saying anything\r\n      return 'Fine. Be that way!'\r\n    elif text.isupper(): # all caps\r\n      return 'Woah, chill out!'\r\n    elif text[-1]=='?': # question\r\n      return 'Sure.'\r\n    else: # anything else\r\n      return 'Whatever.'	\N	\N	0	1	2014-01-22 20:28:48	2014-01-22 20:28:48	254	bob.py
534	23	1ca5f0cfdc67df54bd6d4eb4	pending	perl5	pascals-triangle	package Triangle;\r\nuse strict;\r\nuse warnings FATAL => 'all';\r\nuse v5.14;\r\n\r\n#http://rosettacode.org/wiki/Pascal%27s_triangle#Perl\r\n\r\nsub pascal_triangle { my ($n) = @_;\r\n    return [1] if $n <= 1;\r\n\r\n    my @pascal_triangle = ([1]);\r\n    my @last = (1);\r\n    for my $row (1 .. $n - 1) {\r\n        my @this = map { $last[$_] + $last[$_ + 1] } 0 .. $row - 2;\r\n        @last = (1, @this, 1);\r\n        push @pascal_triangle, [ @last ];\r\n    }\r\n\r\n    @pascal_triangle;\r\n}\r\n\r\nsub triangle { my ($n) = @_;\r\n    [ map { join ' ', @$_ } pascal_triangle($n + 1) ];\r\n}\r\n\r\nsub row { my ($n) = @_;\r\n    join ' ', @{ ( pascal_triangle($n + 1) )[$n] };\r\n}\r\n\r\nsub is_triangle { my ($maybe_triangle) = @_;\r\n    my @triangle = pascal_triangle(0+@$maybe_triangle);\r\n\r\n    for my $i (0 .. $#triangle) {\r\n        return 'false' if join(' ', @{ $triangle[$i] }) ne $maybe_triangle->[$i];\r\n    }\r\n    return 'true';\r\n}\r\n\r\n1;	\N	\N	0	1	2013-12-09 11:42:34	2013-12-09 11:42:34	255	Triangle.pm
536	23	520dec7100a4a9a0b9a5a9c8	pending	ruby	rna-transcription	class Complement\n  def self.of_dna(nucleotide)\n    nucleotide.gsub(/[ACTG]/, 'A' => 'U', 'C' => 'G', 'T' => 'A', 'G' => 'C')\n  end\n\n  def self.of_rna(nucleotide)\n    nucleotide.gsub(/[UGAC]/, 'U' => 'A', 'G' => 'C', 'A' => 'T', 'C' => 'G')\n  end\nend	\N	\N	0	1	2014-03-02 06:09:41	2014-03-02 06:09:41	257	complement.rb
537	23	b3da8d4b96e0c13adf91d415	pending	python	word-count	import string\n\nclass Phrase(object):\n\tdef __init__(self, phrase):\n\t\tsuper(Phrase, self).__init__()\n\t\tself.phrase = phrase\n\t\t\n\tdef word_count(self):\n\t\tfreqDist = {}\n\t\ttranslator = string.maketrans(string.punctuation, ' ' * len(string.punctuation))\n\t\tfor w in self.phrase.lower().translate(translator).split():\n\t\t\tif w in freqDist.keys():\n\t\t\t\tfreqDist[w] += 1\n\t\t\telse:\n\t\t\t\tfreqDist[w] = 1\n\t\treturn freqDist	\N	\N	0	1	2014-05-30 06:26:21	2014-05-30 06:26:21	258	word-count.py
538	23	c407649ba56e48a1fd935130	superseded	ruby	accumulate	class Array\n\n  def accumulate(&block)\n    self.map { |e| yield e }\n  end\n\nend	\N	\N	0	1	2014-01-29 05:51:33	2014-01-29 05:51:33	259	array.rb
539	23	30c45eb232657ea95560ada1	superseded	ruby	accumulate	class Array\n\n  def accumulate\n    self.map { |e| yield e }\n  end\n\nend	\N	\N	0	2	2014-04-20 07:36:36	2014-04-20 07:36:36	259	array.rb
540	23	7e0ba01c93bd50179abc6b13	pending	ruby	accumulate	class Array\n\n  def accumulate\n    accumulated = []\n    self.each do |e|\n      accumulated << (yield e)\n    end\n    accumulated\n  end\n\nend	\N	\N	0	3	2014-05-08 22:20:37	2014-05-08 22:20:37	259	array.rb
541	23	fcf8f315e077e6d42549b937	superseded	ruby	raindrops	\r\nclass Raindrops\r\n\r\n\tdef self.convert(num)\r\n    \tresult = ""\r\n\r\n\t\tif num.modulo(3) == 0\r\n\t\t  result = "Pling" \r\n\t\tend\r\n\t\t  \r\n\t\tif num.modulo(5) == 0\r\n\t\t  result += "Plang" \r\n\t\tend \r\n\r\n\t\tif num.modulo(7) == 0\r\n\t\t  result += "Plong" \r\n\t\tend\r\n\r\n        result = num.to_s  if result.empty? \r\n        result        \r\n    end\r\nend	\N	\N	0	1	2014-01-24 00:22:57	2014-01-24 00:22:57	260	raindrops.rb
542	23	81e465f4ee0e24bd51db1607	superseded	ruby	raindrops	\r\nclass Raindrops\r\n\r\n\tdef convert(num)\r\n    \tresult = ""\r\n\r\n\t\tif num.modulo(3) == 0\r\n\t\t  result = "Pling" \r\n\t\tend\r\n\t\t  \r\n\t\tif num.modulo(5) == 0\r\n\t\t  result += "Plang" \r\n\t\tend \r\n\r\n\t\tif num.modulo(7) == 0\r\n\t\t  result += "Plong" \r\n\t\tend\r\n\r\n        result = num.to_s  if result.empty? \r\n        result        \r\n    end\r\nend	\N	\N	0	2	2014-02-03 18:56:39	2014-02-03 18:56:39	260	raindrops.rb
543	23	fdf5a4ba91791f8c478b2eec	superseded	ruby	raindrops	\r\nclass Raindrops\r\n\r\n\tdef self.convert(num)\r\n    \tresult = ""\r\n\r\n\t\tif num.modulo(3) == 0\r\n\t\t  result = "Pling" \r\n\t\tend\r\n\t\t  \r\n\t\tif num.modulo(5) == 0\r\n\t\t  result += "Plang" \r\n\t\tend \r\n\r\n\t\tif num.modulo(7) == 0\r\n\t\t  result += "Plong" \r\n\t\tend\r\n\r\n        result = num.to_s  if result.empty? \r\n        result        \r\n    end\r\nend	\N	\N	0	3	2014-04-17 23:06:57	2014-04-17 23:06:57	260	raindrops.rb
544	23	3e2f5176d1620cfda7381ee4	superseded	ruby	raindrops	\r\nclass Raindrops\r\n\r\n\tdef self.convert(num)\r\n    \tresult = ""\r\n\r\n\t\tif num.remainder(3) == 0\r\n\t\t  result = "Pling" \r\n\t\tend\r\n\t\t  \r\n\t\tif num.remainder(5) == 0\r\n\t\t  result += "Plang" \r\n\t\tend \r\n\r\n\t\tif num.remainder(7) == 0\r\n\t\t  result += "Plong" \r\n\t\tend\r\n\r\n        return result.empty? ? num.to_s  : result \r\n               \r\n    end\r\nend	\N	\N	0	4	2014-05-17 23:15:33	2014-05-17 23:15:33	260	raindrops.rb
545	23	f6b0bed2f631f6b6ca9714f6	superseded	ruby	raindrops	\r\nclass Raindrops\r\n\r\n\tdef self.convert(num)\r\n\r\n    \tsounds = ""\r\n\r\n\t\tif divisible_by_3?(num)\r\n\t\t  sounds.concat "Pling" \r\n\t\tend\r\n\t\t  \r\n\t\tif divisible_by_5?(num)\r\n\t\t  sounds.concat "Plang" \r\n\t\tend \r\n\r\n\t\tif divisible_by_7?(num)\r\n\t\t  sounds.concat "Plong" \r\n\t\tend\r\n\r\n    \treturn result.empty? ? num.to_s  : result \r\n               \r\n    end\r\n\r\n    def self.divisible_by_3?(num)\r\n  \t\tnum.remainder(3) == 0\r\n    end\r\n\r\n    def self.divisible_by_5?(num)\r\n    \tnum.remainder(5) == 0\r\n    end\r\n\r\n    def self.divisible_by_7?(num)\r\n    \tnum.remainder(7) == 0\r\n    end\r\n\r\nend\r	\N	\N	0	6	2014-05-19 03:44:06	2014-05-19 03:44:06	260	raindrops.rb
546	23	3d42a6cae3ae015bc4b4ea6d	superseded	ruby	raindrops	\r\nclass Raindrops\r\n\r\n\tdef self.convert(num)\r\n\r\n    \tresult = ""\r\n\r\n\t\tif divisible_by_3?(num)\r\n\t\t  result = "Pling" \r\n\t\tend\r\n\t\t  \r\n\t\tif divisible_by_5?(num)\r\n\t\t  result += "Plang" \r\n\t\tend \r\n\r\n\t\tif divisible_by_7?(num)\r\n\t\t  result += "Plong" \r\n\t\tend\r\n\r\n    \treturn result.empty? ? num.to_s  : result \r\n               \r\n    end\r\n\r\n    def self.divisible_by_3?(num)\r\n  \t\tnum.remainder(3) == 0\r\n    end\r\n\r\n    def self.divisible_by_5?(num)\r\n    \tnum.remainder(5) == 0\r\n    end\r\n\r\n    def self.divisible_by_7?(num)\r\n    \tnum.remainder(7) == 0\r\n    end\r\n\r\nend\r	\N	\N	0	5	2014-06-21 07:05:24	2014-06-21 07:05:24	260	raindrops.rb
547	23	adb47ccbeb90890a59c37e95	pending	ruby	raindrops	\r\nclass Raindrops\r\n\r\n\tdef self.convert(num)\r\n\r\n    \tsounds = ""\r\n\r\n\t\tif divisible_by_3?(num)\r\n\t\t  sounds.concat "Pling" \r\n\t\tend\r\n\t\t  \r\n\t\tif divisible_by_5?(num)\r\n\t\t  sounds.concat "Plang" \r\n\t\tend \r\n\r\n\t\tif divisible_by_7?(num)\r\n\t\t  sounds.concat "Plong" \r\n\t\tend\r\n\r\n    \treturn sounds.empty? ? num.to_s  : sounds \r\n               \r\n    end\r\n\r\n    def self.divisible_by_3?(num)\r\n  \t\tnum.remainder(3) == 0\r\n    end\r\n\r\n    def self.divisible_by_5?(num)\r\n    \tnum.remainder(5) == 0\r\n    end\r\n\r\n    def self.divisible_by_7?(num)\r\n    \tnum.remainder(7) == 0\r\n    end\r\n\r\nend\r	\N	\N	0	7	2014-06-30 07:07:36	2014-06-30 07:07:36	260	raindrops.rb
548	23	38c73331184a810267143049	pending	python	rna-transcription	class DNA:\n    dna_to_rna_mapping = {\n        "G": "C",\n        "C": "G",\n        "T": "A",\n        "A": "U"\n    }\n\n    def __init__(self,dna):\n        self.dna = dna\n\n    def to_rna(self):\n        return ''.join([DNA.dna_to_rna_mapping[x] for x in self.dna])	\N	\N	0	1	2013-12-19 01:28:40	2013-12-19 01:28:40	261	dna.py
549	23	8c913ebbea6630f8f273cffb	pending	clojure	bob	(ns bob)\n\n(defn is-all-caps\n  [input]\n  (= input (clojure.string/upper-case input)))\n\n(is-all-caps "SOME STRING!")\n\n(defn ends-in-questionmark\n  [input]\n  (= (last input) \\?))\n\n(ends-in-questionmark "testi?")\n\n(defn response-for\n  [input]\n  (cond\n   (is-all-caps input) "Woah, chill out!"\n   (ends-in-questionmark input) "Sure."\n   :else "Whatever."))	\N	\N	0	1	2014-03-28 21:07:14	2014-03-28 21:07:14	262	bob.clj
550	23	055d8f367dc72096df332870	pending	elixir	nucleotide-count	defmodule DNA do\n  @nucleotides [?A, ?C, ?G, ?T]\n\n  @doc """\n  Counts individual nucleotides in a DNA strand.\n\n  ## Examples\n\n  iex> DNA.count('AATAA', ?A)\n  4\n\n  iex> DNA.count('AATAA', ?T)\n  1\n  """\n  @spec count([char], char) :: non_neg_integer\n  def count(strand, nucleotide) do\n    Enum.count(strand, fn(e) -> e == nucleotide end)\n  end\n\n\n  @doc """\n  Returns a summary of counts by nucleotide.\n\n  ## Examples\n\n  iex> DNA.nucleotide_counts('AATAA')\n  HashDict.new [{?A, 4}, {?T, 1}, {?C, 0}, {?G, 0}]\n  """\n  @spec nucleotide_counts([char]) :: HashDict.t\n  def nucleotide_counts(strand) do\n    HashDict.new(@nucleotides, fn(e) -> { e, count(strand, e) } end)\n  end\nend	\N	\N	0	1	2014-01-26 08:43:08	2014-01-26 08:43:08	263	dna.exs
572	41	899a1ffe16557c9b5f3ec48f	superseded	ruby	bob	class Bob\n  def hey(message)\n    case message\n    when shouted? then "Woah, chill out!"\n    when question? then "Sure."\n    when silent? then "Fine. Be that way!"\n    else "Whatever."\n    end\n  end\n  \nprivate\n  def shouted?\n    ->(message) { message.upcase == message && message.chars.any? { |l| l =~ /[[:alpha:]]/ } }\n  end\n  \n  def question?\n    ->(message) { message.end_with? '?' }\n  end\n  \n  def silent?\n    ->(message) { message.strip.empty? }\n  end\nend	\N	\N	0	1	2014-05-23 06:22:10	2014-05-23 06:22:10	274	bob.rb
551	23	4e42ae4797153fe664feee5d	superseded	haskell	phone-number	module Phone(areaCode,number,prettyPrint) where\n\nimport Data.Char\n\nbadNumber :: String\nbadNumber = replicate 10 '0'\n\nnumber :: String -> String\nnumber raw = \n  let digits = filter isNumber raw\n  in case length digits of\n    10 -> digits\n    11 -> if head digits == '1' then drop 1 digits else badNumber\n    _  -> badNumber\n\nareaCode :: String -> String\nareaCode = take 3 . number\n\nprettyPrint :: String -> String\nprettyPrint raw =\n  let clean = number raw\n      (area,digits) = splitAt 3 clean\n      (exchange,phone) = splitAt 3 digits\n  in concat ["(", area, ") ", exchange, "-", phone]	\N	\N	0	1	2014-02-15 19:35:29	2014-02-15 19:35:29	264	Phone.hs
552	23	e941943292e8ac2910b075f5	superseded	haskell	phone-number	module Phone(areaCode,number,prettyPrint) where\n\nimport Data.Char\nimport Data.List.Split\n\nnumber :: String -> String\nnumber raw = \n  let digits = filter isNumber raw\n  in case (length digits, digits) of\n    (10, _)         -> digits\n    (11, '1':phone) -> phone\n    _               -> replicate 10 '0'\n\nareaCode :: String -> String\nareaCode = take 3 . number\n\nprettyPrint :: String -> String\nprettyPrint raw =\n  let [area,exchange,phone] = splitPlaces [3::Int,3,4] (number raw)\n  in concat ["(", area, ") ", exchange, "-", phone]	\N	\N	0	4	2014-03-14 02:00:14	2014-03-14 02:00:14	264	Phone.hs
553	23	a6a99d438575d057d4a0b6c6	pending	haskell	phone-number	module Phone(areaCode,number,prettyPrint) where\n\nimport Data.Char (isDigit)\nimport Data.List.Split (splitPlaces)\nimport Text.Printf (printf)\n\nnumber :: String -> String\nnumber raw = \n  let digits = filter isDigit raw\n  in case (length digits, digits) of\n    (10, _)           -> digits\n    (11, '1':digits') -> digits'\n    _                 -> replicate 10 '0'\n\nareaCode :: String -> String\nareaCode = take 3 . number\n\nprettyPrint :: String -> String\nprettyPrint raw = printf "(%s) %s-%s" area exchange phone\n  where [area,exchange,phone] = splitPlaces [3,3,4::Int] (number raw)	\N	\N	0	6	2014-03-23 16:09:36	2014-03-23 16:09:36	264	Phone.hs
554	23	68e4f140e4681bc644ede775	superseded	haskell	phone-number	module Phone(areaCode,number,prettyPrint) where\n\nimport Data.Char\nimport Data.List.Split\n\nbadNumber :: String\nbadNumber = replicate 10 '0'\n\nnumber :: String -> String\nnumber raw = \n  let digits = filter isNumber raw\n  in case length digits of\n    10 -> digits\n    11 -> if head digits == '1' then tail digits else badNumber\n    _  -> badNumber\n\nareaCode :: String -> String\nareaCode = take 3 . number\n\nprettyPrint :: String -> String\nprettyPrint raw =\n  let [area,exchange,phone] = splitPlaces [3::Int,3,4] (number raw)\n  in concat ["(", area, ") ", exchange, "-", phone]	\N	\N	0	2	2014-04-26 01:10:43	2014-04-26 01:10:43	264	Phone.hs
555	23	1789b5a60950f65a9a0a3701	superseded	haskell	phone-number	module Phone(areaCode,number,prettyPrint) where\n\nimport Data.Char\nimport Data.List.Split\n\nnumber :: String -> String\nnumber raw = \n  let digits = filter isNumber raw\n  in case (length digits, digits) of\n    (10, _)         -> digits\n    (11, '1':phone) -> phone\n    otherwise       -> replicate 10 '0'\n\nareaCode :: String -> String\nareaCode = take 3 . number\n\nprettyPrint :: String -> String\nprettyPrint raw =\n  let [area,exchange,phone] = splitPlaces [3::Int,3,4] (number raw)\n  in concat ["(", area, ") ", exchange, "-", phone]	\N	\N	0	3	2014-04-28 03:41:34	2014-04-28 03:41:34	264	Phone.hs
556	23	a9ae8d6934c255841e212486	superseded	haskell	phone-number	module Phone(areaCode,number,prettyPrint) where\n\nimport Data.Char (isDigit)\nimport Data.List.Split (splitPlaces)\nimport Text.Printf (printf)\n\nnumber :: String -> String\nnumber raw = \n  let digits = filter isDigit raw\n  in case (length digits, digits) of\n    (10, _)         -> digits\n    (11, '1':phone) -> phone\n    _               -> replicate 10 '0'\n\nareaCode :: String -> String\nareaCode = take 3 . number\n\nprettyPrint :: String -> String\nprettyPrint raw = printf "(%s) %s-%s" area exchange phone\n  where [area,exchange,phone] = splitPlaces [3,3,4::Int] (number raw)	\N	\N	0	5	2014-05-17 10:03:41	2014-05-17 10:03:41	264	Phone.hs
557	23	9f13539800ac2a5532873c52	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(input map[int][]string) map[string]int {\n  result := map[string]int{}\n  for score, values := range input {\n    for _, value := range values {\n      result[strings.ToLower(value)] = score\n    }\n  }\n  return result\n}	\N	\N	0	1	2014-02-05 05:46:56	2014-02-05 05:46:56	265	etl.go
558	23	e4de1698a0f30e6f5da44a46	superseded	go	etl	package etl\n\nimport "strings"\n\ntype OldFormat map[int][]string\ntype NewFormat map[string]int\n\nfunc Transform(input OldFormat) NewFormat {\n  result := make(NewFormat)\n  for score, values := range input {\n    for _, value := range values {\n      result[strings.ToLower(value)] = score\n    }\n  }\n  return result\n}	\N	\N	0	2	2014-04-14 01:19:55	2014-04-14 01:19:55	265	etl.go
559	23	aef3b8ce9650b525b9f5c230	pending	go	etl	package etl\n\nimport "strings"\n\ntype oldFormat map[int][]string\ntype newFormat map[string]int\n\nfunc (o oldFormat) transform() newFormat {\n\tresult := make(newFormat)\n\tfor score, values := range o {\n\t\tfor _, value := range values {\n\t\t\tresult[strings.ToLower(value)] = score\n\t\t}\n\t}\n\treturn result\n}\n\nfunc Transform(input oldFormat) newFormat {\n\treturn input.transform()\n}	\N	\N	0	3	2014-06-07 16:01:27	2014-06-07 16:01:27	265	etl.go
560	23	2d01b79f5df20c2e78ccf8fa	pending	ruby	gigasecond	class Gigasecond\n  def initialize(given_date)\n    @given_date = given_date\n  end\n\n  def date\n    given_date + one_billion_gigaseconds_to_days\n  end\n\n  private\n\n  attr_reader :given_date\n\n  def one_billion_gigaseconds_to_days\n    10**9 / seconds_in_a_day\n  end\n\n  def seconds_in_a_hour\n    60 * 60\n  end\n\n  def seconds_in_a_day\n    24 * seconds_in_a_hour\n  end\nend	\N	\N	0	1	2013-12-08 06:44:08	2013-12-08 06:44:08	266	gigasecond.rb
561	23	87b1ee2978b75584291fa3c4	pending	clojure	anagram	(ns anagram)\n\n(defn anagrams-for\n  [word candidates]\n  (let [word (clojure.string/lower-case word)\n        freq (frequencies word)]\n    (filter #(let [candidate (clojure.string/lower-case %)]\n               (and (not= word candidate) (= freq (frequencies candidate)))) candidates)))	\N	\N	0	1	2014-03-13 00:37:08	2014-03-13 00:37:08	267	anagram.clj
562	23	b7b9383cbfb7ca806abb4034	superseded	go	accumulate	package accumulate\n\nfunc Accumulate(input []string, converter func(string) string) []string {\n\tacc := []string{}\n\tfor _, s := range input {\n\t\tacc = append(acc, converter(s))\n\t}\n\treturn acc\n}	\N	\N	0	1	2013-11-26 15:23:05	2013-11-26 15:23:05	268	accumulate.go
563	23	345f80d42a524cf92712920f	pending	go	accumulate	package accumulate\n\nfunc Accumulate(input []string, converter func(string) string) []string {\n\tacc := make([]string, len(input))\n\tfor i, s := range input {\n\t\tacc[i] = converter(s)\n\t}\n\treturn acc\n}	\N	\N	0	2	2014-01-07 15:42:43	2014-01-07 15:42:43	268	accumulate.go
564	23	9de18f78ca20cb1b3b8b07a5	pending	ruby	hamming	require 'pry'\nclass Hamming\n  def self.compute(a, b)\n    a = a.split('')\n    b = b.split('')\n    a.pop until a.count <= b.count\n    return 0 if a == b\n    if a != b\n      i = 0\n      counter = 0\n      a.each do |letter|\n        letter != b[i] ? counter += 1 : counter += 0\n        i += 1\n      end\n      counter\n    end\n  end\nend	\N	\N	0	1	2014-01-05 19:02:12	2014-01-05 19:02:12	269	hamming.rb
565	41	93a0d58d793240ba01ed74fe	pending	ruby	meetup	class Meetup\n  SUNDAY = 0\n  MONDAY = 1\n  TUESDAY = 2\n  WEDNESDAY = 3\n  THURSDAY = 4\n  FRIDAY = 5\n  SATURDAY = 6\n\n  def initialize(month, year)\n    @month = month\n    @year = year\n  end\n\n  %w{sun mon tues wednes thurs fri satur}.each do |prefix|\n    the_day = self.const_get("#{prefix.upcase}DAY")\n\n    define_method "#{prefix}teenth" do\n      someteenth the_day\n    end\n\n    define_method "first_#{prefix}day" do\n      first_someday the_day\n    end\n\n    define_method "second_#{prefix}day" do\n      second_someday the_day\n    end\n\n    define_method "third_#{prefix}day" do\n      third_someday the_day\n    end\n\n    define_method "fourth_#{prefix}day" do\n      fourth_someday the_day\n    end\n\n    define_method "last_#{prefix}day" do\n      last_someday the_day\n    end\n  end\n\nprivate\n\n  def someteenth(day_of_week)\n    someday(day_of_week, 13..19)\n  end\n\n  def first_someday(day_of_week)\n    someday(day_of_week, 1..7)\n  end\n\n  def second_someday(day_of_week)\n    someday(day_of_week, 8..14)\n  end\n\n  def third_someday(day_of_week)\n    someday(day_of_week, 15..21)\n  end\n\n  def fourth_someday(day_of_week)\n    someday(day_of_week, 22..28)\n  end\n\n  def last_someday(day_of_week)\n    first_day_of_the_next_month = if @month < 12\n      Date.new(@year, @month + 1, 1)\n    else\n      Date.new(@year + 1, 1, 1)\n    end\n    last_day_of_this_month = first_day_of_the_next_month.day - 1\n    someday(day_of_week, (last_day_of_this_month-7)..last_day_of_this_month)\n  end\n\n  def someday(day_of_week, range)\n    current_date = nil\n    range.each do | mday |\n      current_date = Date.new(@year, @month, mday)\n      break if current_date.wday == day_of_week\n    end\n    current_date\n  end\n\n\n\nend	\N	\N	0	1	2014-05-13 09:31:26	2014-05-13 09:31:26	270	meetup.rb
566	41	7912fa7758432704cf31cde3	pending	clojure	kindergarden-garden	(def default-students ["Alice" "Bob" "Charlie" "David" "Eve" "Fred" "Ginny"\n                       "Harriet" "Ileana" "Joseph" "Kincaid" "Larry"])\n\n(def seeds { "G" :grass "C" :clover "R" :radishes "V" :violets })\n\n(defn row-to-seeds [row-string]\n  (map seeds (rest (clojure.string/split row-string #""))))\n\n(defn garden-to-rows [garden]\n  (clojure.string/split-lines garden))\n\n(defn garden\n  ([string]\n    (garden string default-students))\n  ([string students]\n    (let [students (map #(keyword (.toLowerCase %1)) (sort students))\n          [front back] (map #(partition 2 %1)\n                             (map row-to-seeds (garden-to-rows string)))]\n      (zipmap students (map vec\n                          (map flatten\n                             (partition 2 (interleave front back))))))))	\N	\N	0	1	2014-04-07 08:32:05	2014-04-07 08:32:05	271	kindergarden-garden.clj
567	41	413fe523e6334aa11072e8b9	superseded	clojure	meetup	(ns meetup)\n\n;; 1 is Sunday, 2 is Monday, etc.\n(defn- day-of-week\n  [year month day]\n  ;; in java Calendar, months start at 0 for some reason\n  ;; not days though :P\n  (.get (java.util.GregorianCalendar. year (dec month) day) java.util.Calendar/DAY_OF_WEEK))\n\n(defn- day-range\n  [year month]\n  (range\n    1\n    (inc\n      (.getActualMaximum (java.util.GregorianCalendar. year (dec month) 1) java.util.Calendar/DATE))))\n\n(defn- day-of-week-match\n  [day-of-week-value year month day-range]\n  (map\n    #(vector year month %)\n    (filter #(= day-of-week-value (day-of-week year month %)) day-range)))\n\n(def teenth-days (range 13 20))\n\n(defn- xteenth [day-of-week-value]\n  (fn [month year] (first (day-of-week-match day-of-week-value year month teenth-days))))\n\n(def days-of-week '("sun" "mon" "tues" "wednes" "thurs" "fri" "satur"))\n\n(def counters '("first" "second" "third" "fourth"))\n\n(doall\n  (map-indexed\n    #(intern *ns* (symbol (str %2 "teenth")) (xteenth (inc %1)))\n    days-of-week))\n\n(doall\n  (map-indexed\n    (fn [day-idx day]\n      (doall\n        (map-indexed\n          (fn [counter-idx counter]\n            (intern *ns* (symbol (str counter "-" day "day"))\n                    (fn [month year]\n                      (nth (day-of-week-match (inc day-idx) year month (day-range year month)) counter-idx))))\n          counters)))\n    days-of-week))\n\n(doall\n  (map-indexed\n    #(intern *ns* (symbol (str "last-" %2 "day"))\n             (fn [month year]\n               (last (day-of-week-match (inc %1) year month (day-range year month)))))\n    days-of-week))	\N	\N	0	1	2014-05-13 22:04:56	2014-05-13 22:04:56	272	meetup.clj
568	41	4ca846d3d47c8fc62ff8da42	pending	clojure	meetup	(ns meetup)\n\n;; 1 is Sunday, 2 is Monday, etc.\n(defn- day-of-week\n  [year month day]\n  ;; in java Calendar, months start at 0 for some reason\n  ;; not days though :P\n  (.get (java.util.GregorianCalendar. year (dec month) day) java.util.Calendar/DAY_OF_WEEK))\n\n(defn- day-range\n  [year month]\n  (range\n    1\n    (inc\n      (.getActualMaximum (java.util.GregorianCalendar. year (dec month) 1) java.util.Calendar/DATE))))\n\n(defn- day-of-week-matches\n  [day-of-week-value year month day-range]\n  (map\n    #(vector year month %)\n    (filter #(= day-of-week-value (day-of-week year month %)) day-range)))\n\n(defn- indexed-seq\n  [coll]\n  (map-indexed #(vector %1 %2) coll))\n\n;; "teenth" days are "thirteenth" through "nineteenth"\n(def teenth-days (range 13 20))\n\n(def days-of-week '("sun" "mon" "tues" "wednes" "thurs" "fri" "satur"))\n\n(def counters '("first" "second" "third" "fourth"))\n\n;; define "monteenth" etc. methods\n(doall\n  (for\n    [[day-idx day] (indexed-seq days-of-week)]\n    (intern *ns* (symbol (str day "teenth"))\n            (fn [month year]\n              (first (day-of-week-matches (inc day-idx) year month teenth-days))))))\n\n;; define "first-sunday", "third-wednesday", etc. methods\n(doall\n  (for\n    [[day-idx day] (indexed-seq days-of-week)\n     [counter-idx counter] (indexed-seq counters)]\n    (intern *ns* (symbol (str counter "-" day "day"))\n            (fn [month year]\n              (nth (day-of-week-matches (inc day-idx) year month (day-range year month)) counter-idx)))))\n\n;; define "last-thursday" etc. methods\n(doall\n  (for\n    [[day-idx day] (indexed-seq days-of-week)]\n    (intern *ns* (symbol (str "last-" day "day"))\n            (fn [month year]\n              (last (day-of-week-matches (inc day-idx) year month (day-range year month)))))))	\N	\N	0	2	2014-06-25 06:45:17	2014-06-25 06:45:17	272	meetup.clj
569	41	64792f2bc5595ce8bfb65bfe	pending	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn (year % 4 == 0) && ((year % 100 != 0) || (year % 400 == 0))\n}	\N	\N	0	1	2014-05-23 00:28:39	2014-05-23 00:28:39	273	leap.go
570	41	dd5271c9cd141bf5950a7a04	superseded	ruby	bob	class Bob\n  def hey(message)\n    case message\n    when shouted then "Woah, chill out!"\n    when question then "Sure."\n    when silent then "Fine. Be that way!"\n    else "Whatever."\n    end\n  end\n  \nprivate\n  def shouted\n    ->(message) { message.upcase == message && message.chars.any? { |l| l =~ /[[:alpha:]]/ } }\n  end\n  \n  def question\n    ->(message) { message.end_with? '?' }\n  end\n  \n  def silent\n    ->(message) { message.strip.empty? }\n  end\nend	\N	\N	0	2	2014-03-28 17:31:47	2014-03-28 17:31:47	274	bob.rb
571	41	be1a97380aaa82b58855284e	pending	ruby	bob	class Bob\n  def hey(message)\n    case message\n    when shouted then "Woah, chill out!"\n    when question then "Sure."\n    when silent then "Fine. Be that way!"\n    else "Whatever."\n    end\n  end\n  \nprivate\n  def shouted\n    ->(message) { !message[/\\p{Lower}/] && message[/\\p{Alpha}/] }\n  end\n  \n  def question\n    ->(message) { message.end_with? '?' }\n  end\n  \n  def silent\n    ->(message) { message.strip.empty? }\n  end\nend	\N	\N	0	3	2014-03-30 17:55:34	2014-03-30 17:55:34	274	bob.rb
573	26	ac2cba4844055057bf2fc9a3	superseded	haskell	wordy	{-# LANGUAGE OverloadedStrings #-}\n\nmodule WordProblem (answer) where\n\nimport Data.Text (pack)\nimport Data.Attoparsec.Text\nimport Control.Applicative\n\ndata Operator = Plus | Minus | Mult | Div\ndata Expr a = Number a | Expr Operator (Expr a) (Expr a)\n\nevalExpr :: Fractional a => Expr a -> a\nevalExpr (Number val)      = val\nevalExpr (Expr op ex1 ex2) = evalExpr ex1 `f` evalExpr ex2\n  where f = case op of\n              Plus  -> (+)\n              Minus -> (-)\n              Mult  -> (*)\n              Div   -> (/)\n\nparseOperator :: Parser Operator\nparseOperator =\n      (string "plus"          >> return Plus)\n  <|> (string "minus"         >> return Minus)\n  <|> (string "multiplied by" >> return Mult)\n  <|> (string "divided by"    >> return Div)\n\nparseExprWith :: Fractional a => Parser (Expr a) -> Parser (Expr a)\nparseExprWith parser' = do\n  expr <- parser' <* char ' '\n  op   <- parseOperator <* char ' '\n  num  <- signed rational\n  return $ Expr op expr (Number num)\n\nparseExpression :: Fractional a => Parser (Expr a)\nparseExpression = (oneExpr <* char '?') <|>\n                  (parseExprWith oneExpr <* char '?')\n  where oneExpr = parseExprWith $ Number <$> signed rational\n\nquestionParser :: Fractional a => Parser (Expr a)\nquestionParser = string "What is " *> parseExpression\n\nanswer :: Fractional a => String -> Maybe a\nanswer str = evalExpr <$> maybeResult parsed\n  where parsed = parse questionParser $ pack str	\N	\N	0	1	2014-07-11 20:44:34	2014-07-11 20:44:34	275	WordProblem.hs
574	26	c7cefab1f554d99399a6b94e	superseded	haskell	wordy	{-# LANGUAGE OverloadedStrings #-}\n\nmodule WordProblem (answer) where\n\nimport Data.Text (pack)\nimport Data.Attoparsec.Text\nimport Control.Applicative\n\ndata Operator = Plus | Minus | Mult | Div\ndata Expr a = Number a | Expr Operator (Expr a) (Expr a)\n\nevalExpr :: Fractional a => Expr a -> a\nevalExpr (Number val)      = val\nevalExpr (Expr op ex1 ex2) = evalExpr ex1 `f` evalExpr ex2\n  where f = case op of\n              Plus  -> (+)\n              Minus -> (-)\n              Mult  -> (*)\n              Div   -> (/)\n\nparseOperator :: Parser Operator\nparseOperator =\n      (string "plus"          >> return Plus)\n  <|> (string "minus"         >> return Minus)\n  <|> (string "multiplied by" >> return Mult)\n  <|> (string "divided by"    >> return Div)\n\nparseExprWith :: Fractional a => Parser (Expr a) -> Parser (Expr a)\nparseExprWith parser' = do\n  expr <- parser' <* char ' '\n  op   <- parseOperator <* char ' '\n  num  <- signed rational\n  return $ Expr op expr (Number num)\n\nparseExpression :: Fractional a => Parser (Expr a)\nparseExpression = (oneExpr <* char '?') <|> parseExprWith oneExpr\n  where oneExpr = parseExprWith $ Number <$> signed rational\n\nanswer :: Fractional a => String -> Maybe a\nanswer str = evalExpr <$> maybeResult (parse qParser (pack str))\n  where qParser = string "What is " *> parseExpression	\N	\N	0	2	2014-07-13 19:07:21	2014-07-13 19:07:21	275	WordProblem.hs
575	26	b48db6e8d41af07d407829d4	superseded	haskell	wordy	{-# LANGUAGE OverloadedStrings #-}\n\nmodule WordProblem (answer) where\n\nimport Data.Text (pack)\nimport Data.Attoparsec.Text\nimport Control.Applicative\n\ndata Operator = Plus | Minus | Mult | Div\n  deriving Show\n\ndata Expr a = Number a | Expr Operator (Expr a) (Expr a)\n  deriving Show\n\nevalExpr :: Fractional a => Expr a -> a\nevalExpr (Number val)      = val\nevalExpr (Expr op ex1 ex2) = evalExpr ex1 `f` evalExpr ex2\n  where f = case op of\n              Plus  -> (+)\n              Minus -> (-)\n              Mult  -> (*)\n              Div   -> (/)\n\nparseOperator :: Parser Operator\nparseOperator = choice [ string "plus"          >> return Plus\n                       , string "minus"         >> return Minus\n                       , string "multiplied by" >> return Mult\n                       , string "divided by"    >> return Div\n                       ]\n\nparseExprWith :: Fractional a => Parser (Expr a) -> Parser (Expr a)\nparseExprWith parser' = do\n  expr <- parser' <* skipSpace\n  op   <- parseOperator <* skipSpace\n  num  <- signed rational\n  return $ Expr op expr (Number num)\n\nparseExpression :: Fractional a => Parser (Expr a)\nparseExpression = (oneExpr <* char '?') <|> parseExprWith oneExpr\n  where oneExpr = parseExprWith $ Number <$> signed rational\n\nanswer :: Fractional a => String -> Maybe a\nanswer str = evalExpr <$> maybeResult (parse qParser (pack str))\n  where qParser = string "What is " *> parseExpression	\N	\N	0	3	2014-07-15 00:40:28	2014-07-15 00:40:28	275	WordProblem.hs
576	26	381b1fc4fa09bf999e09a28e	pending	haskell	wordy	{-# LANGUAGE OverloadedStrings #-}\n\nmodule WordProblem (answer) where\n\nimport Data.Text (pack)\nimport Data.Attoparsec.Text\nimport Control.Applicative\n\ndata Operator = Plus | Minus | Mult | Div\n  deriving Show\n\ndata Expr a = Number a | Expr Operator (Expr a) (Expr a)\n  deriving Show\n\nevalExpr :: Fractional a => Expr a -> a\nevalExpr (Number val)      = val\nevalExpr (Expr op ex1 ex2) = evalExpr ex1 `f` evalExpr ex2\n  where f = case op of\n              Plus  -> (+)\n              Minus -> (-)\n              Mult  -> (*)\n              Div   -> (/)\n\nparseOperator :: Parser Operator\nparseOperator = choice [ string "plus"          *> pure Plus\n                       , string "minus"         *> pure Minus\n                       , string "multiplied by" *> pure Mult\n                       , string "divided by"    *> pure Div\n                       ]\n\nparseExprWith :: Fractional a => Parser (Expr a) -> Parser (Expr a)\nparseExprWith parser' = do\n  expr <- parser' <* skipSpace\n  op   <- parseOperator <* skipSpace\n  num  <- signed rational\n  return $ Expr op expr (Number num)\n\nparseExpression :: Fractional a => Parser (Expr a)\nparseExpression = (oneExpr <* char '?') <|> parseExprWith oneExpr\n  where oneExpr = parseExprWith $ Number <$> signed rational\n\nanswer :: Fractional a => String -> Maybe a\nanswer str = evalExpr <$> maybeResult (parse qParser (pack str))\n  where qParser = string "What is " *> parseExpression	\N	\N	0	4	2014-07-22 06:31:18	2014-07-22 06:31:18	275	WordProblem.hs
577	44	f28744478c90d01c88e13da4	pending	python	rna-transcription	import string\n\nclass DNA(object):\n    "Second python exercise in exercism"\n\n    rna_translation = string.maketrans("GCTA", "CGAU")\n\n    def __init__(self, text):\n        "Create a dna sequence from a string"\n        # No error checking. YAGNI\n        self.dna = text\n\n    def to_rna(self):\n        "Return the rna sequence corresponding to the dna"\n        return self.dna.translate(DNA.rna_translation)	\N	\N	0	1	2014-01-02 06:48:35	2014-01-02 06:48:35	276	dna.py
589	44	c1572a50f047d55c01064a54	superseded	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def evenly_divisible_by?(number)\n    year % number == 0\n  end\n\n  def evenly_divisible_by_100_unless_evenly_divisible_by_400?\n    evenly_divisible_by?(100) && !evenly_divisible_by?(400)\n  end\n\n  class << self\n    def leap?(year)\n      year = Year.new(year)\n\n      year.evenly_divisible_by?(4) &&\n        !year.evenly_divisible_by_100_unless_evenly_divisible_by_400?\n    end\n  end\nend	\N	\N	0	2	2013-12-29 03:59:26	2013-12-29 03:59:26	284	year.rb
590	44	8ded569e026083367706978b	superseded	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    evenly_divisible_by?(4) &&\n      not_evenly_divisible_by_100_unless_evenly_divisible_by_400?\n  end\n\n  def evenly_divisible_by?(number)\n    year % number == 0\n  end\n\n  def not_evenly_divisible_by_100_unless_evenly_divisible_by_400?\n    !(evenly_divisible_by?(100) && !evenly_divisible_by?(400))\n  end\n\n  class << self\n    def leap?(year)\n      Year.new(year).leap?\n    end\n  end\nend	\N	\N	0	3	2014-01-07 04:43:06	2014-01-07 04:43:06	284	year.rb
578	44	b31467a95d2c28eefc45b2a7	pending	scala	bob	class Bob {\n\n  def hey: String => String = { \n    hey_partial(_)\n    // hey_anon(_)\n    // hey_non_partial(_)\n    // hey_conditional(_) \n  }\n\n  val hey_partial: String => String = {\n    case q if q.trim == "" => "Fine. Be that way!"\n    case q if q == q.toUpperCase && q != q.toLowerCase => "Woah, chill out!"\n    case q if (q takeRight 1) == "?" => "Sure."\n    case _ => "Whatever."\n  }\n\n//   val addOne = (num: Int) => { num + 1 }\n\n// val b = List(1, 2)\n// b map({case 1 => "one"\n//        case 2 => "two"})\n\n  val hey_anon = (q: String) => q match {\n    case q if q.trim == "" => "Fine. Be that way!"\n    case q if q == q.toUpperCase && q != q.toLowerCase => "Woah, chill out!"\n    case q if (q takeRight 1) == "?" => "Sure."\n    case _ => "Whatever."\n  }\n\n  // experimenting...\n  def hey_non_partial(q: String): String = q match {\n    case q if q.trim == "" => "Fine. Be that way!"\n    case q if q == q.toUpperCase && q != q.toLowerCase => "Woah, chill out!"\n    case q if (q takeRight 1) == "?" => "Sure."\n    case _ => "Whatever."\n  }\n\n  def hey_conditional(q: String): String = {\n    if (q.trim == "") "Fine. Be that way!"\n    else if (q == q.toUpperCase && q != q.toLowerCase) "Woah, chill out!"\n    else if ((q takeRight 1) == "?") "Sure."\n    else "Whatever."\n  }     \n}\n\n\n/*\nval = constant declaration\nvar = variable declaration\nnew required when no initialization\nwith initialization new forbidden\n\n*/	\N	\N	0	1	2014-02-02 01:31:12	2014-02-02 01:31:12	277	bob.scala
579	44	e934a096b4cba4cc41b9c3fe	pending	ruby	anagram	class Anagram\n  def initialize word\n    @word = word.downcase\n    @sorted_word = sort_letters @word\n  end\n\n  def match word_list\n    word_list.select { |word| is_anagram? word.downcase }\n  end\n\n  private\n\n  def is_anagram? word\n    @word != word && @sorted_word == sort_letters(word)\n  end\n\n  def sort_letters word\n    word.chars.sort\n  end\nend	\N	\N	0	1	2014-02-13 03:40:33	2014-02-13 03:40:33	278	anagram.rb
580	44	9946a8cd86dd7defd1f8bbdc	superseded	javascript	bob	module.exports = function () {\n    var is_silence, is_yelling, is_question;\n\n    is_silence = function (msg) {\n        return msg === '';\n    };\n\n    is_yelling = function (msg) {\n        return !msg.match(/[a-z]/);\n    };\n\n    is_question = function (msg) {\n        return msg.match(/\\?$/);\n    };\n\n    this.hey = function (msg) {\n        if (is_silence(msg)) {\n            return 'Fine, be that way!';\n        } else if (is_yelling(msg)) {\n            return 'Woah, chill out!';\n        } else if (is_question(msg)) {\n            return 'Sure.';\n        } else {\n            return 'Whatever.';\n        }\n    };\n};	\N	\N	0	2	2014-01-16 23:41:22	2014-01-16 23:41:22	279	bob.js
581	44	bb031e247f6f4e178163f84c	pending	javascript	bob	module.exports = function () {\n    var is_silence, is_yelling, is_question;\n\n    is_silence = function (msg) {\n        return msg.match(/^$/);\n    };\n\n    is_yelling = function (msg) {\n        return !msg.match(/[a-z]/);\n    };\n\n    is_question = function (msg) {\n        return msg.match(/\\?$/);\n    };\n\n    this.hey = function (msg) {\n        if (is_silence(msg)) {\n            return 'Fine, be that way!';\n        } else if (is_yelling(msg)) {\n            return 'Woah, chill out!';\n        } else if (is_question(msg)) {\n            return 'Sure.';\n        } else {\n            return 'Whatever.';\n        }\n    };\n};	\N	\N	0	3	2014-02-26 18:12:40	2014-02-26 18:12:40	279	bob.js
582	44	72f40f373a97ed74f0bae141	superseded	javascript	bob	module.exports = function () {\n\n    this.hey = function (msg) {\n        if (msg == '') {\n            return 'Fine, be that way!';\n        } else if (!msg.match(/[a-z]/)) {\n            return 'Woah, chill out!';\n        } else if (msg.match(/\\?$/)) {\n            return 'Sure.';\n        } else {\n            return 'Whatever.';\n        };\n    };\n\n};	\N	\N	0	1	2014-05-17 00:52:09	2014-05-17 00:52:09	279	bob.js
583	44	be7fec7ac48526d93bb278cc	pending	ruby	hamming	#!/usr/bin/env ruby\nclass Hamming \n\n\tdef self.compute(dna_one, dna_two)\n\t\tx = 0\n\t\tcount = 0\n\t\tif dna_one.length < dna_two.length\n\t\t\tshortest_string = dna_one\n\t\t\tother_string = dna_two\n\t\telse\n\t\t\tshortest_string = dna_two\n\t\t\tother_string = dna_one\n\t\tend\n\t\twhile x < shortest_string.length\n\t\t\tcount += 1 if shortest_string[x] != other_string[x]\n\t\t\tx += 1\t\n\t\tend\n\t\treturn count\n\tend\n\nend	\N	\N	0	1	2013-12-21 10:07:51	2013-12-21 10:07:51	280	hamming.rb
584	44	6545d198f82f2755607b4690	pending	haskell	pig-latin	module PigLatin (translate) where\n\nimport Data.List (isSuffixOf, isPrefixOf, words, unwords)\n\nvowels :: String\nvowels = "aeiou"\n\npiglatin :: String -> String\npiglatin word | prefix == ""                                       = word ++ "ay"\n              | "q" `isSuffixOf` prefix && "u" `isPrefixOf` suffix = tail suffix ++ prefix ++ "uay"\n              | otherwise                                          = suffix ++ prefix ++ "ay"\n  where\n    (prefix, suffix) = break (`elem` vowels) word\n\ntranslate :: String -> String\ntranslate = unwords . map piglatin . words	\N	\N	0	1	2013-12-18 15:22:32	2013-12-18 15:22:32	281	pig-latin.hs
585	44	649214ce1c77e67b27436fd1	superseded	clojure	nucleotide-count	(ns dna)\n\n(defn- default-hash-map [default keys]\n  (into {} (map #(hash-map % default) (seq keys))))\n\n(defn- error [message]\n  (throw (Exception. (str message))))\n\n(defn- nucleotides\n  ([]     (nucleotides :all))\n  ([type] (map str (cond\n            (= type :dna) "CGAT"\n            (= type :rna) "CGAU"\n            (= type :all) "CGATU"\n            :else         (error "Unsupported type.")))))\n\n(defn- valid-nucleotide?\n  ([n]      (valid-nucleotide? n :all))\n  ([n type] (some #(= n %) (nucleotides type))))\n\n(defn nucleotide-counts [sequence]\n  (merge (default-hash-map 0 (nucleotides :dna))\n         (frequencies (map str sequence))))\n\n(defn count [nucleotide sequence]\n  (if (not (valid-nucleotide? nucleotide :all))\n    (error (format "invalid nucleotide %s" nucleotide))\n    (get (nucleotide-counts sequence) nucleotide 0)))	\N	\N	0	1	2014-03-31 20:40:59	2014-03-31 20:40:59	282	nucleotide-count.clj
586	44	2463f3c7840fa3f684e264e7	pending	clojure	nucleotide-count	(ns dna)\n\n(def ^:private nucleotides {:dna "CGAT"\n                            :rna "CGAU"\n                            :all "CGATU"})\n\n(defn- strseq [seq] (map str seq))\n\n(defn- default-hash-map [default keys]\n  (apply hash-map (interleave keys (repeat default))))\n\n(defn- valid-nucleotide?\n  ([n]      (valid-nucleotide? n :all))\n  ([n type] (some #(= n %) (strseq (type nucleotides)))))\n\n(defn nucleotide-counts [sequence]\n  (merge (default-hash-map 0 (strseq (:dna nucleotides)))\n         (frequencies (strseq sequence))))\n\n(defn count [n sequence]\n  (if (not (valid-nucleotide? n :all))\n    (throw (Exception. (format "invalid nucleotide %s" n)))\n    (get (nucleotide-counts sequence) n 0)))	\N	\N	0	2	2014-04-30 16:54:17	2014-04-30 16:54:17	282	nucleotide-count.clj
587	44	bd7ab26d030e9e1204dd62c2	pending	clojure	rna-transcription	(ns dna)\n\n(defn to-rna [dna]\n  (.replace dna \\T \\U))	\N	\N	0	1	2014-01-22 19:51:16	2014-01-22 19:51:16	283	rna-transcription.clj
588	44	0806afd75caa090afcadab64	superseded	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def evenly_divisible_by?(number)\n    year % number == 0\n  end\n\n  def evenly_divisible_by_4?\n    evenly_divisible_by? 4\n  end\n\n  def evenly_divisible_by_100?\n    evenly_divisible_by? 100\n  end\n\n  def evenly_divisible_by_400?\n    evenly_divisible_by? 400\n  end\n\n  def evenly_divisible_by_100_unless_evenly_divisible_by_400?\n    evenly_divisible_by_100? && !evenly_divisible_by_400?\n  end\n\n  class << self\n    def leap?(year)\n      year = Year.new(year)\n\n      year.evenly_divisible_by_4? &&\n        !year.evenly_divisible_by_100_unless_evenly_divisible_by_400?\n    end\n  end\nend	\N	\N	0	1	2013-12-20 13:55:37	2013-12-20 13:55:37	284	year.rb
591	44	e258e1d1e45ac9945ec29128	superseded	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    evenly_divisible_by?(4) && !evenly_divisible_by_100_but_not_400?\n  end\n\n  def evenly_divisible_by?(number)\n    year % number == 0\n  end\n\n  def evenly_divisible_by_100_but_not_400?\n    evenly_divisible_by?(100) && !evenly_divisible_by?(400)\n  end\n\n  class << self\n    def leap?(year)\n      Year.new(year).leap?\n    end\n  end\nend	\N	\N	0	4	2014-01-09 02:14:35	2014-01-09 02:14:35	284	year.rb
592	44	f0da9d767608ffdb5985f046	superseded	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    evenly_divisible_by?(4) && !evenly_divisible_by_100_but_not_400?\n  end\n\n  def evenly_divisible_by?(number)\n    year % number == 0\n  end\n\n  def evenly_divisible_by_100_but_not_400?\n    evenly_divisible_by?(100) && !evenly_divisible_by?(400)\n  end\n\n  class << self\n    def leap?(year)\n      self.new(year).leap?\n    end\n  end\nend	\N	\N	0	5	2014-02-23 07:49:49	2014-02-23 07:49:49	284	year.rb
593	44	31faa404dd55891c87817639	superseded	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    evenly_divisible_by?(4) && !evenly_divisible_by_100_but_not_400?\n  end\n\n  def evenly_divisible_by?(number)\n    year % number == 0\n  end\n\n  def evenly_divisible_by_100_but_not_400?\n    evenly_divisible_by?(100) && !evenly_divisible_by?(400)\n  end\n\n  class << self\n    def leap?(year)\n      new(year).leap?\n    end\n  end\nend	\N	\N	0	6	2014-03-01 23:01:44	2014-03-01 23:01:44	284	year.rb
594	44	247038952453fa1d6d429981	superseded	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    evenly_divisible_by?(4) && !evenly_divisible_by_100_but_not_400?\n  end\n\n  def evenly_divisible_by?(number)\n    (year % number).zero?\n  end\n\n  def evenly_divisible_by_100_but_not_400?\n    evenly_divisible_by?(100) && !evenly_divisible_by?(400)\n  end\n\n  class << self\n    def leap?(year)\n      new(year).leap?\n    end\n  end\nend	\N	\N	0	7	2014-03-18 16:06:13	2014-03-18 16:06:13	284	year.rb
595	44	ed9b1273ff6fb2589c09f1da	superseded	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    evenly_divisible_by?(4) && evenly_divisible_by_400_and_100?\n  end\n\n  def evenly_divisible_by?(number)\n    (year % number).zero?\n  end\n\n  def evenly_divisible_by_400_and_100?\n    !evenly_divisible_by?(100) || evenly_divisible_by?(400)\n  end\n\n  class << self\n    def leap?(year)\n      new(year).leap?\n    end\n  end\nend	\N	\N	0	8	2014-03-20 14:49:36	2014-03-20 14:49:36	284	year.rb
596	44	d92f7c5fc4251a7a98f1c39f	superseded	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    evenly_divisible_by?(4) &&\n      !evenly_divisible_by?(100) ||\n      evenly_divisible_by?(400)\n  end\n\n  def evenly_divisible_by?(number)\n    (year % number).zero?\n  end\n\n  class << self\n    def leap?(year)\n      new(year).leap?\n    end\n  end\nend	\N	\N	0	10	2014-03-21 00:28:40	2014-03-21 00:28:40	284	year.rb
597	44	5e161e591623cdc82ce61961	superseded	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    evenly_divisible_by?(4) &&\n      !evenly_divisible_by?(100) ||\n      evenly_divisible_by?(400)\n  end\n\n  def evenly_divisible_by?(number)\n    (year % number).zero?\n  end\n\n  class << self\n    def leap?(year)\n      new(year).leap?\n    end\n  end\nend	\N	\N	0	12	2014-03-30 14:35:15	2014-03-30 14:35:15	284	year.rb
598	44	3aa332567f164ab5d4ca6ca6	superseded	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    evenly_divisible_by?(4) && !evenly_divisible_by?(100) ||\n      evenly_divisible_by?(400)\n  end\n\n  def evenly_divisible_by?(number)\n    (year % number).zero?\n  end\n\n  class << self\n    def leap?(year)\n      new(year).leap?\n    end\n  end\nend	\N	\N	0	9	2014-04-15 19:49:46	2014-04-15 19:49:46	284	year.rb
599	44	fd8b3518ff7de9c575d6050b	superseded	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    divisible_by?(400) || divisible_by?(4) && !divisible_by?(100)\n  end\n\n  def divisible_by?(number)\n    (year % number).zero?\n  end\n\n  class << self\n    def leap?(year)\n      new(year).leap?\n    end\n  end\nend	\N	\N	0	11	2014-05-08 03:53:42	2014-05-08 03:53:42	284	year.rb
600	44	f7c9fea46398878b5361d21f	pending	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    divisible_by?(4) && !divisible_by?(100) || divisible_by?(400)\n  end\n\n  def divisible_by?(number)\n    (year % number).zero?\n  end\n\n  class << self\n    def leap?(year)\n      new(year).leap?\n    end\n  end\nend	\N	\N	0	14	2014-05-18 06:03:34	2014-05-18 06:03:34	284	year.rb
601	44	b60b3ef6867a7fc51a9646e2	superseded	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    divisible_by?(4) &&\n      !divisible_by?(100) ||\n      divisible_by?(400)\n  end\n\n  def divisible_by?(number)\n    (year % number).zero?\n  end\n\n  class << self\n    def leap?(year)\n      new(year).leap?\n    end\n  end\nend	\N	\N	0	13	2014-05-25 16:33:55	2014-05-25 16:33:55	284	year.rb
602	44	1e921ca0ce64625ba23e5d59	superseded	ruby	bob	class Bob\n    def hey(sentence)\n        if shouting?(sentence)\n            'Woah, chill out!'\n        elsif question?(sentence)\n            'Sure.'\n        elsif nothing?(sentence)\n            'Fine. Be that way!'\n        else\n            'Whatever.'\n        end\n    end\n\n    private\n\n    def shouting?(sentence)\n        /[a-zA-Z]/ =~ sentence && sentence.upcase == sentence\n    end\n\n    def question?(sentence)\n        sentence[-1] == '?'\n    end\n\n    def nothing?(sentence)\n        sentence.split("\\n").join("").match(/^\\s*$/)\n    end\nend	\N	\N	0	1	2014-01-04 17:39:17	2014-01-04 17:39:17	285	bob.rb
603	44	60223bfaccf30c003d1f7a76	superseded	ruby	bob	class Bob\n    def hey(sentence)\n        if shouting?(sentence)\n            'Woah, chill out!'\n        elsif question?(sentence)\n            'Sure.'\n        elsif nothing?(sentence)\n            'Fine. Be that way!'\n        else\n            'Whatever.'\n        end\n    end\n\n    private\n\n    def shouting?(sentence)\n        /[A-Z]/ =~ sentence && /[a-z]/ !~ sentence\n    end\n\n    def question?(sentence)\n        sentence[-1] == '?'\n    end\n\n    def nothing?(sentence)\n        sentence.split("\\n").join("").match(/^\\s*$/)\n    end\nend	\N	\N	0	2	2014-02-01 00:51:13	2014-02-01 00:51:13	285	bob.rb
604	44	173889c8ae378f0e5aa11343	pending	ruby	bob	class Bob\n  def hey(sentence)\n    if shouting?(sentence)\n      'Woah, chill out!'\n    elsif question?(sentence)\n      'Sure.'\n    elsif something?(sentence)\n      'Whatever.'\n    else\n      'Fine. Be that way!'\n    end\n  end\n\n  private\n\n  def shouting?(sentence)\n    sentence.match(/[A-Z]/) and not sentence.match(/[a-z]/)\n  end\n\n  def question?(sentence)\n    sentence.end_with?('?')\n  end\n\n  def something?(sentence)\n    sentence.match(/\\S/)\n  end\nend	\N	\N	0	3	2014-07-15 11:34:58	2014-07-15 11:34:58	285	bob.rb
605	44	4fb60163f25d951566942bca	pending	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\tif year%4 == 0 {\n\t\tif year%100 == 0 {\n\t\t\treturn year%400 == 0\n\t\t}\n\t\treturn true\n\t}\n\n\treturn false\n}	\N	\N	0	1	2013-12-25 13:56:19	2013-12-25 13:56:19	286	leap.go
606	44	ad98ffe4553dc2db0abef873	pending	haskell	house	module House (rhyme) where\n\nrhyme :: String\nrhyme = unlines $ map ("This is " ++) $ scanl1 f pieces\n  where f tail' piece = piece ++ ' ' : tail'\n\npieces :: [String]\npieces = [\n    "the house that Jack built.\\n"\n  , "the malt\\nthat lay in"\n  , "the rat\\nthat ate"\n  , "the cat\\nthat killed"\n  , "the dog\\nthat worried"\n  , "the cow with the crumpled horn\\nthat tossed"\n  , "the maiden all forlorn\\nthat milked"\n  , "the man all tattered and torn\\nthat kissed"\n  , "the priest all shaven and shorn\\nthat married"\n  , "the rooster that crowed in the morn\\nthat woke"\n  , "the farmer sowing his corn\\nthat kept"\n  , "the horse and the hound and the horn\\nthat belonged to"\n  ]	\N	\N	0	1	2014-01-29 02:55:54	2014-01-29 02:55:54	287	House.hs
607	44	bd776b90720d0b935cb42407	pending	elixir	scrabble-score	defmodule Scrabble do\n\n  @letter_scores Enum.reduce \\\n    [ ['AEIOULNRST', 1],\n      ['DG',         2],\n      ['BCMP',       3],\n      ['FHVWY',      4],\n      ['K',          5],\n      ['JX',         8],\n      ['QZ',         10] ],\n    HashDict.new,\n    fn([letters, score], acc) ->\n      Enum.reduce letters, acc, fn(letter, acc) -> HashDict.put acc, letter, score end\n    end\n\n  def score(word) do\n    word |> String.upcase\n         |> to_char_list\n         |> Enum.reduce 0,\n              fn(letter, acc) ->\n                acc + HashDict.get(@letter_scores, letter, 0)\n              end\n  end\n\nend	\N	\N	0	1	2014-03-24 04:14:28	2014-03-24 04:14:28	288	scrabble-score.exs
608	44	5d2f6dc9f91523a36a8eb4ad	pending	clojure	robot-name	(ns robot)\n\n(def robots (atom #{}))\n\n(def letters\n  (->> "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n       (re-seq #"[A-Z]")\n       (vec)))\n\n(defn random-letter []\n  (let [n (rand-int 26)]\n    (nth letters n)))\n\n(defn new-robot-name\n  "Create a new random robot name, matching the form AB123.\n   Does not guarantee uniqueness."\n  []\n  (str\n    (random-letter) (random-letter) (rand-int 10) (rand-int 10) (rand-int 10)))\n\n(defn new-unique-name\n  "Same as new-robot-id, but guarantees that the name is not in use."\n  []\n  (loop [possible-name (new-robot-name)]\n    (if (contains? @robots possible-name)\n      (recur (new-robot-name))\n      possible-name)))\n\n(defn robot\n  "Constructs a robot by generating a unique name and adding it\n   to the set of robots. Returns an atom containing the name."\n  []\n  (let [new-id (new-unique-name)]\n    (swap! robots conj new-id)\n    (atom new-id)))\n\n(def robot-name deref)\n\n(defn reset-name\n  "Removes the record for the named robot, and assigns it a new name."\n  [robot-atom]\n  (let [old-name (robot-name robot-atom)\n        new-name (robot-name (robot))]\n    (swap! robots disj old-name)\n    (reset! robot-atom new-name)))	\N	\N	0	1	2014-02-27 10:15:49	2014-02-27 10:15:49	289	robot.clj
609	44	0b5f270c7395cd13d7e2a93e	superseded	haskell	bob	module Bob where\n\nimport Data.Char (isSpace, isUpper, isAlpha)\n\nisYelled :: Char -> Bool\nisYelled c | isAlpha c = isUpper c\nisYelled _ = True\n\n\n\nresponseFor :: String -> String\nresponseFor s | foldr (\\c b -> b && isSpace c) True s = "Fine. Be that way!"\n              | foldr (\\c b -> b && isYelled c) True s = "Woah, chill out!"\n              | last s == '?' = "Sure."\n              \n              \n              \nresponseFor _ = "Whatever."	\N	\N	0	1	2014-05-04 16:00:35	2014-05-04 16:00:35	290	Bob.hs
610	44	324278f1a0de3854369430d3	pending	haskell	bob	module Bob(responseFor) where\n\nimport Data.Char (isSpace, isUpper, isAlpha)\n\nisYelled :: Char -> Bool\nisYelled c | isAlpha c = isUpper c\nisYelled _ = True\n\nresponseFor :: String -> String\nresponseFor s | all isSpace s = "Fine. Be that way!"\n              | all isYelled s = "Woah, chill out!"\n              | last s == '?' = "Sure."\nresponseFor _ = "Whatever."	\N	\N	0	2	2014-05-30 02:55:27	2014-05-30 02:55:27	290	Bob.hs
611	44	0fb58182e049551b3de30047	superseded	ruby	nucleotide-count	class DNA\n  \n  NUCLEOTIDES = "ATCG".chars\n  \n  def initialize(dna_string)\n    unless (dna_string.chars - NUCLEOTIDES).empty?\n      raise ArgumentError, "Invalid nucleotide in #{dna_string}"\n    end\n    @dna_string = dna_string\n  end\n  \n  def nucleotide_counts\n    NUCLEOTIDES.each_with_object({}) do |nucleotide,counts|\n      counts[nucleotide] = count(nucleotide)\n    end\n  end\n  \n  def count(nucleotide)\n    unless (NUCLEOTIDES + ["U"]).include? nucleotide\n      raise ArgumentError, "Invalid nucleotide #{nucleotide}"\n    end\n    @dna_string.count(nucleotide)\n  end\nend	\N	\N	0	5	2013-12-26 08:42:39	2013-12-26 08:42:39	291	nucleotide-count.rb
612	44	28e9c735c41f2f0e32af9409	superseded	ruby	nucleotide-count	class DNA\n\n  NUCLEOTIDES = "ATCG".chars\n\n  def initialize(dna_string)\n    ensure_dna_nucleotides(dna_string)\n    @dna_string = dna_string\n  end\n\n  def nucleotide_counts\n    NUCLEOTIDES.each_with_object({}) do |nucleotide,counts|\n      counts[nucleotide] = count(nucleotide)\n    end\n  end\n\n  def count(nucleotide)\n    ensure_rna_nucleotide(nucleotide)\n    @dna_string.count(nucleotide)\n  end\n\nprivate\n\n  def ensure_dna_nucleotides(dna_string)\n    if dna_string =~ /([^#{NUCLEOTIDES.join}])/\n      raise ArgumentError, "Invalid nucleotide: #{$1}"\n    end\n  end\n\n  def ensure_rna_nucleotide(nucleotide)\n    unless (NUCLEOTIDES + ["U"]).include? nucleotide\n      raise ArgumentError, "Invalid nucleotide #{nucleotide}"\n    end\n  end\n\nend	\N	\N	0	7	2013-12-30 01:13:23	2013-12-30 01:13:23	291	nucleotide-count.rb
613	44	4d02fb91988b2d6035c97245	pending	ruby	nucleotide-count	class DNA\n\n  NUCLEOTIDES = %w{A C G T}\n\n  def initialize(dna_string)\n    ensure_valid_nucleotides(dna_string, NUCLEOTIDES)\n    @dna_string = dna_string\n  end\n\n  def nucleotide_counts\n    NUCLEOTIDES.each_with_object({}) do |nucleotide,counts|\n      counts[nucleotide] = count(nucleotide)\n    end\n  end\n\n  def count(nucleotide)\n    ensure_valid_nucleotides(nucleotide, NUCLEOTIDES | RNA::NUCLEOTIDES)\n    @dna_string.count(nucleotide)\n  end\n\nprivate\n\n  def ensure_valid_nucleotides(dna_string, nucleotides)\n    if dna_string =~ /([^#{nucleotides.join}])/\n      raise ArgumentError, "Invalid nucleotide: #{$1}"\n    end\n  end\n\nend\n\nclass RNA\n  NUCLEOTIDES = %w{A C G U}\nend	\N	\N	0	10	2014-01-29 12:16:48	2014-01-29 12:16:48	291	nucleotide-count.rb
614	44	b857895dbb630831937dc2e0	superseded	ruby	nucleotide-count	class DNA\n  \n  def initialize(dna_string)\n    DNA.validate_dna(dna_string)\n    @dna_string = dna_string\n  end\n  \n  def nucleotide_counts\n    "ATCG".chars.each_with_object({}) do |nucleotide,counts|\n      counts[nucleotide] = count(nucleotide)\n    end\n  end\n  \n  def count(nucleotide)\n    return 0 if nucleotide == 'U'\n    DNA.validate_dna(nucleotide)\n    @dna_string.count(nucleotide)\n  end\n  \n  def self.validate_dna(dna_string)\n    raise ArgumentError, "Invalid nucleotide in #{dna_string}" unless dna_string =~ /^[ATCG]*$/\n  end\n  \nend	\N	\N	0	3	2014-01-29 18:28:38	2014-01-29 18:28:38	291	nucleotide-count.rb
615	44	ac739eb8fdf35e68e222d21b	superseded	ruby	nucleotide-count	require 'pp'\n\nclass DNA\n  \n  attr_reader :nucleotide_counts\n  \n  def initialize(dna_string)\n    @nucleotide_counts = dna_string.split('').reduce({'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}) do |counts, nocleotide|\n      raise ArgumentError, "Invalid nocleotide" if counts[nocleotide].nil? \n      counts[nocleotide] += + 1\n      counts\n    end\n  end\n  \n  def nucleotide_counts\n    @nucleotide_counts\n  end\n  \n  def count(nocleotide)\n    return 0 if nocleotide == 'U'\n    raise ArgumentError, "Invalid nocleotide" if nucleotide_counts[nocleotide].nil?\n    nucleotide_counts[nocleotide]\n  end\n  \nend	\N	\N	0	1	2014-02-08 06:39:09	2014-02-08 06:39:09	291	nucleotide-count.rb
616	44	e85ec5fcf7ddd104698ff27b	superseded	ruby	nucleotide-count	require 'pp'\n\nclass DNA\n  \n  attr_reader :nucleotide_counts\n  \n  def initialize(dna_string)\n    raise ArgumentError, "Invalid nucleotide" unless dna_string =~ /^[ATCG]*$/\n    @nucleotide_counts = {}\n    ['A','T','C','G'].each do |nucleotide|\n      @nucleotide_counts[nucleotide] = dna_string.count(nucleotide)\n    end\n  end\n  \n  def nucleotide_counts\n    @nucleotide_counts\n  end\n  \n  def count(nucleotide)\n    return 0 if nucleotide == 'U'\n    raise ArgumentError, "Invalid nucleotide" if nucleotide_counts[nucleotide].nil?\n    nucleotide_counts[nucleotide]\n  end\n  \nend	\N	\N	0	2	2014-03-08 02:35:51	2014-03-08 02:35:51	291	nucleotide-count.rb
617	44	6ca4c1202cbc5062ea9c5c62	superseded	ruby	nucleotide-count	class DNA\n\n  NUCLEOTIDES = "ATCG".chars\n\n  def initialize(dna_string)\n    ensure_valid_nucleotides(dna_string, NUCLEOTIDES)\n    @dna_string = dna_string\n  end\n\n  def nucleotide_counts\n    NUCLEOTIDES.each_with_object({}) do |nucleotide,counts|\n      counts[nucleotide] = count(nucleotide)\n    end\n  end\n\n  def count(nucleotide)\n    ensure_valid_nucleotides(nucleotide, NUCLEOTIDES | RNA::NUCLEOTIDES)\n    @dna_string.count(nucleotide)\n  end\n\nprivate\n\n  def ensure_valid_nucleotides(dna_string, nucleotides)\n    if dna_string =~ /([^#{nucleotides.join}])/\n      raise ArgumentError, "Invalid nucleotide: #{$1}"\n    end\n  end\n\nend\n\nclass RNA\n  NUCLEOTIDES = "AUCG".chars\nend	\N	\N	0	9	2014-03-21 11:57:38	2014-03-21 11:57:38	291	nucleotide-count.rb
618	44	aea7318df578e4bcaad65e64	superseded	ruby	nucleotide-count	class DNA\n  \n  def initialize(dna_string)\n    raise ArgumentError, "Invalid nucleotide in #{dna_string}" unless dna_string =~ /^[ATCG]*$/\n    @dna_string = dna_string\n  end\n  \n  def nucleotide_counts\n    "ATCG".chars.each_with_object({}) do |nucleotide,counts|\n      counts[nucleotide] = count(nucleotide)\n    end\n  end\n  \n  def count(nucleotide)\n    raise ArgumentError, "Invalid nucleotide #{nucleotide}" unless nucleotide =~ /^[ATCGU]*$/\n    @dna_string.count(nucleotide)\n  end\nend	\N	\N	0	4	2014-04-12 06:38:31	2014-04-12 06:38:31	291	nucleotide-count.rb
619	44	455f8803da69299b3db2e951	superseded	ruby	nucleotide-count	class DNA\n\n  NUCLEOTIDES = "ATCG".chars\n\n  def initialize(dna_string)\n    ensure_dna_nucleotides(dna_string)\n    @dna_string = dna_string\n  end\n\n  def nucleotide_counts\n    NUCLEOTIDES.each_with_object({}) do |nucleotide,counts|\n      counts[nucleotide] = count(nucleotide)\n    end\n  end\n\n  def count(nucleotide)\n    ensure_rna_nucleotide(nucleotide)\n    @dna_string.count(nucleotide)\n  end\n\nprivate\n\n  def ensure_dna_nucleotides(dna_string)\n    unless (dna_string.chars - NUCLEOTIDES).empty?\n      raise ArgumentError, "Invalid nucleotide in #{dna_string}"\n    end\n  end\n\n  def ensure_rna_nucleotide(nucleotide)\n    unless (NUCLEOTIDES + ["U"]).include? nucleotide\n      raise ArgumentError, "Invalid nucleotide #{nucleotide}"\n    end\n  end\n\nend	\N	\N	0	6	2014-06-02 07:01:40	2014-06-02 07:01:40	291	nucleotide-count.rb
620	44	d15a287fb8520c06e6dbe775	superseded	ruby	nucleotide-count	class DNA\n\n  NUCLEOTIDES = "ATCG".chars\n\n  def initialize(dna_string)\n    ensure_valid_nucleotides(dna_string, NUCLEOTIDES)\n    @dna_string = dna_string\n  end\n\n  def nucleotide_counts\n    NUCLEOTIDES.each_with_object({}) do |nucleotide,counts|\n      counts[nucleotide] = count(nucleotide)\n    end\n  end\n\n  def count(nucleotide)\n    ensure_valid_nucleotides(nucleotide, NUCLEOTIDES + RNA::NUCLEOTIDES)\n    @dna_string.count(nucleotide)\n  end\n\nprivate\n\n  def ensure_valid_nucleotides(dna_string, nucleotides)\n    if dna_string =~ /([^#{nucleotides.join}])/\n      raise ArgumentError, "Invalid nucleotide: #{$1}"\n    end\n  end\n\nend\n\nclass RNA\n  NUCLEOTIDES = "AUCG".chars\nend	\N	\N	0	8	2014-06-21 04:19:32	2014-06-21 04:19:32	291	nucleotide-count.rb
621	44	80ad7ef3341e6279ffa83f18	pending	ruby	difference-of-squares	class Squares\n  @num = 0\n  def initialize(num)\n    @num = num\n  end\n\n  def sum_of_squares\n    (1..@num).reduce(0) {|sum, cur| sum + cur ** 2}\n  end\n\n  def square_of_sums\n    (1..@num).reduce(:+) ** 2\n  end\n\n  def difference\n    self.square_of_sums - self.sum_of_squares\n  end\nend	\N	\N	0	1	2014-02-19 03:20:22	2014-02-19 03:20:22	292	squares.rb
\.


--
-- Name: submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submissions_id_seq', 621, true);


--
-- Data for Name: team_managers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_managers (id, user_id, team_id) FROM stdin;
1	1	1
2	2	1
3	3	1
4	1	2
5	1	3
6	1	4
7	2	4
8	3	5
9	2	6
10	2	7
\.


--
-- Name: team_managers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_managers_id_seq', 10, true);


--
-- Data for Name: team_memberships; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_memberships (id, team_id, user_id, created_at, updated_at, confirmed) FROM stdin;
1	1	21	1985-08-23 23:09:48	1985-08-23 23:09:48	t
2	1	14	1988-06-14 18:00:13	1988-06-14 18:00:13	t
3	1	17	1989-02-10 09:24:19	1989-02-10 09:24:19	t
4	1	22	1985-05-25 15:27:35	1985-05-25 15:27:35	t
5	1	10	2008-11-08 07:17:30	2008-11-08 07:17:30	t
6	1	7	2012-01-06 03:21:46	2012-01-06 03:21:46	t
7	1	6	2004-12-13 13:19:21	2004-12-13 13:19:21	t
8	1	29	2002-07-15 12:20:41	2002-07-15 12:20:41	t
9	1	30	1985-06-11 19:30:15	1985-06-11 19:30:15	t
10	1	35	1996-03-25 11:35:57	1996-03-25 11:35:57	t
11	1	15	2000-09-11 17:00:15	2000-09-11 17:00:15	f
12	1	16	2006-04-07 09:57:18	2006-04-07 09:57:18	f
13	1	28	1985-02-16 21:47:28	1985-02-16 21:47:28	f
14	1	31	1984-12-20 08:41:42	1984-12-20 08:41:42	f
15	1	37	2014-01-14 16:52:28	2014-01-14 16:52:28	f
16	1	41	2004-09-01 03:09:05	2004-09-01 03:09:05	f
17	1	42	1997-11-26 02:13:02	1997-11-26 02:13:02	f
18	1	46	2002-11-28 09:56:08	2002-11-28 09:56:08	f
19	2	2	1995-01-24 14:56:23	1995-01-24 14:56:23	t
20	2	35	1996-07-20 22:38:28	1996-07-20 22:38:28	t
21	2	30	1989-03-17 10:40:06	1989-03-17 10:40:06	t
22	2	46	2003-12-20 19:04:04	2003-12-20 19:04:04	t
23	2	18	2001-04-25 06:41:47	2001-04-25 06:41:47	f
24	2	37	1971-05-14 02:31:42	1971-05-14 02:31:42	f
25	3	37	1983-12-26 15:55:22	1983-12-26 15:55:22	f
26	3	2	1978-06-23 11:47:52	1978-06-23 11:47:52	f
27	4	2	1985-01-17 04:13:36	1985-01-17 04:13:36	t
28	4	31	1972-11-19 17:04:50	1972-11-19 17:04:50	t
29	4	21	2011-11-22 23:17:01	2011-11-22 23:17:01	t
30	4	26	1972-12-01 11:41:13	1972-12-01 11:41:13	t
31	4	19	1974-10-11 22:32:48	1974-10-11 22:32:48	t
32	4	24	1973-11-26 08:49:11	1973-11-26 08:49:11	t
33	4	18	1977-05-05 19:39:10	1977-05-05 19:39:10	t
34	4	23	1986-11-20 15:20:34	1986-11-20 15:20:34	t
35	4	25	1983-11-14 15:32:27	1983-11-14 15:32:27	t
36	4	20	2011-12-01 21:05:07	2011-12-01 21:05:07	t
37	4	37	1989-06-09 01:31:44	1989-06-09 01:31:44	f
38	4	11	1978-05-01 01:17:42	1978-05-01 01:17:42	f
39	4	13	1997-02-10 13:57:37	1997-02-10 13:57:37	f
40	5	31	2002-01-09 00:10:03	2002-01-09 00:10:03	t
41	5	39	1972-05-29 17:44:12	1972-05-29 17:44:12	t
42	5	34	1976-11-23 20:46:35	1976-11-23 20:46:35	t
43	5	36	1971-03-24 14:58:35	1971-03-24 14:58:35	t
44	5	32	2013-08-18 09:33:48	2013-08-18 09:33:48	t
45	5	35	1975-10-06 08:56:59	1975-10-06 08:56:59	t
46	5	33	1993-07-16 19:28:35	1993-07-16 19:28:35	t
47	5	38	1985-11-30 03:36:32	1985-11-30 03:36:32	t
48	5	40	2012-09-02 17:14:33	2012-09-02 17:14:33	f
49	5	37	1989-07-04 22:00:38	1989-07-04 22:00:38	f
50	5	2	2004-02-22 21:50:56	2004-02-22 21:50:56	f
51	6	5	1979-10-10 16:13:36	1979-10-10 16:13:36	t
52	6	6	2009-02-16 00:47:31	2009-02-16 00:47:31	t
53	6	7	1975-09-08 21:15:21	1975-09-08 21:15:21	t
54	6	8	2011-03-03 12:31:37	2011-03-03 12:31:37	t
55	6	10	1994-05-02 11:14:44	1994-05-02 11:14:44	t
56	6	11	1972-02-28 04:52:25	1972-02-28 04:52:25	t
57	6	12	1982-05-10 05:42:33	1982-05-10 05:42:33	t
58	6	13	2009-09-20 15:28:29	2009-09-20 15:28:29	t
59	6	14	2006-10-25 10:59:05	2006-10-25 10:59:05	t
60	6	15	1985-01-02 11:33:15	1985-01-02 11:33:15	t
61	6	16	1987-09-15 12:39:12	1987-09-15 12:39:12	t
62	6	17	1976-03-11 20:35:42	1976-03-11 20:35:42	t
63	6	22	2012-07-03 21:44:22	2012-07-03 21:44:22	t
64	6	27	2010-11-17 10:02:09	2010-11-17 10:02:09	t
65	6	28	2011-10-11 01:01:12	2011-10-11 01:01:12	t
66	6	29	2010-05-09 07:21:24	2010-05-09 07:21:24	t
67	6	30	1985-07-14 18:50:46	1985-07-14 18:50:46	t
68	6	31	1997-05-04 04:58:57	1997-05-04 04:58:57	t
69	6	37	1986-02-25 14:02:18	1986-02-25 14:02:18	t
70	6	41	1997-09-14 04:11:09	1997-09-14 04:11:09	t
71	6	42	2012-03-22 04:20:28	2012-03-22 04:20:28	t
72	6	43	1974-07-24 08:17:43	1974-07-24 08:17:43	t
73	6	44	1983-11-02 05:15:37	1983-11-02 05:15:37	t
74	6	45	1973-01-09 00:33:48	1973-01-09 00:33:48	t
75	6	46	1989-06-25 17:25:50	1989-06-25 17:25:50	t
76	6	47	1994-11-17 02:23:53	1994-11-17 02:23:53	t
77	6	48	1974-04-26 19:36:21	1974-04-26 19:36:21	t
78	7	2	1998-07-06 20:16:02	1998-07-06 20:16:02	t
79	7	38	1981-12-29 20:41:11	1981-12-29 20:41:11	t
80	7	31	2004-10-22 23:57:15	2004-10-22 23:57:15	t
81	7	37	1974-07-25 22:55:48	1974-07-25 22:55:48	f
\.


--
-- Name: team_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_memberships_id_seq', 81, true);


--
-- Data for Name: teams; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY teams (id, slug, created_at, updated_at, name) FROM stdin;
1	baconesia	2013-11-06 13:32:36.824319	2013-11-06 13:32:36.824319	baconesia
2	chocolades	2014-07-08 17:35:09.860666	2014-07-08 17:35:09.860666	chocolades
3	ghost	2014-06-15 00:39:57.871196	2014-06-15 00:39:57.871196	ghost
4	motley	2014-04-04 18:29:08.877456	2014-04-04 18:29:08.877456	motley
5	rugrats	2013-11-10 10:26:04.8991	2013-11-10 10:26:04.8991	rugrats
6	slate	2014-06-15 20:31:39.916045	2014-06-15 20:31:39.916045	slate
7	polkadots	2013-11-29 09:57:39.951029	2013-11-29 09:57:39.951029	polkadots
\.


--
-- Name: teams_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('teams_id_seq', 7, true);


--
-- Data for Name: testimonials; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY testimonials (id, body, name, about, homepage, keyword, featured, created_at, updated_at) FROM stdin;
\.


--
-- Name: testimonials_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('testimonials_id_seq', 1, false);


--
-- Data for Name: user_exercises; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY user_exercises (id, user_id, language, slug, iteration_count, state, completed_at, created_at, updated_at, key, is_nitpicker) FROM stdin;
1	8	python	bob	1	done	2014-07-17 05:26:18	2014-07-12 13:17:15	2014-07-12 13:17:15	1c9e1dcfbc64e865af80d314	t
2	8	javascript	grains	2	pending	\N	2014-07-16 08:26:35	2014-07-16 08:26:35	7598000804e2509da2d29123	f
3	8	haskell	rna-transcription	2	pending	\N	2014-07-09 21:56:19	2014-07-09 21:56:19	b9f4da07716fae62c35d2818	f
4	8	ruby	word-count	2	pending	\N	2014-07-17 23:18:47	2014-07-17 23:18:47	8d03b03a5d054737174007cc	f
5	8	haskell	luhn	1	done	2014-07-24 18:34:29	2014-07-15 13:58:46	2014-07-15 13:58:46	fdae4f643f87a2dfd4200df8	t
6	8	haskell	bob	1	done	2014-07-22 06:33:27	2014-07-12 00:50:34	2014-07-12 00:50:34	4fd6c7668c875bff2a3c4c9a	t
7	8	ruby	hamming	1	pending	\N	2014-07-07 18:47:24	2014-07-07 18:47:24	9e8e2ff736e46732a24d318e	f
8	8	javascript	word-count	3	pending	\N	2014-07-06 13:55:20	2014-07-06 13:55:20	fbc40de29371329af2172ee8	f
9	8	ruby	bob	2	pending	\N	2014-07-09 18:10:44	2014-07-09 18:10:44	df382dabdbdeff58b24e787e	f
10	8	javascript	beer-song	2	pending	\N	2014-07-16 16:39:31	2014-07-16 16:39:31	d6989d483c19d11ad137995c	f
11	8	python	word-count	1	pending	\N	2014-07-09 10:36:05	2014-07-09 10:36:05	56e3047efe199d0fb272120c	f
12	8	ruby	anagram	1	pending	\N	2014-07-07 21:47:35	2014-07-07 21:47:35	29f8b8c1d3c788c73ad35d64	f
13	8	ruby	gigasecond	1	done	2014-07-15 15:13:52	2014-07-07 15:54:27	2014-07-07 15:54:27	4efc662bce25e9ccf378f4fd	t
14	8	javascript	simple-cipher	1	done	2014-07-11 23:54:49	2014-07-07 16:15:21	2014-07-07 16:15:21	b4110fefd8858cc3ced852ad	t
15	8	python	allergies	1	done	2014-07-22 05:13:30	2014-07-15 23:35:15	2014-07-15 23:35:15	672f7d1399b638bed320d76e	t
16	8	javascript	nucleotide-count	1	done	2014-07-21 02:24:41	2014-07-14 02:33:55	2014-07-14 02:33:55	30ab605ff239ec35045514eb	t
17	8	haskell	point-mutations	2	done	2014-07-24 12:50:04	2014-07-21 22:44:13	2014-07-21 22:44:13	7c2dfaaf331f51e0a29df353	t
18	8	go	binary	1	done	2014-07-20 04:24:51	2014-07-10 09:50:03	2014-07-10 09:50:03	feb4dbb88e10cf78f68f639b	t
19	8	python	nucleotide-count	1	pending	\N	2014-07-19 13:13:44	2014-07-19 13:13:44	9b1db556dd9bce449929f737	f
20	8	haskell	beer-song	2	pending	\N	2014-07-10 10:46:32	2014-07-10 10:46:32	4d0905cad2de232a29149154	f
21	10	ruby	grains	1	done	2014-06-30 12:43:43	2014-06-28 09:33:52	2014-06-28 09:33:52	81ef034f3de4b06f7454a854	t
22	10	ruby	bob	5	done	2014-07-04 02:54:38	2014-06-26 15:03:10	2014-06-26 15:03:10	79cc746ce50e96c6640956d2	t
23	10	haskell	etl	2	pending	\N	2014-07-10 17:35:17	2014-07-10 17:35:17	56621077d3dba0f90d071dca	f
24	10	python	bob	1	pending	\N	2014-06-28 13:17:49	2014-06-28 13:17:49	3f978b93a05db4f8d9c16341	f
25	10	haskell	allergies	3	done	2014-07-25 00:28:46	2014-07-02 05:29:42	2014-07-02 05:29:42	123d4712b4310c558e140cae	t
26	10	javascript	bob	1	pending	\N	2014-07-13 00:03:59	2014-07-13 00:03:59	38f5f4ba98f8534fee06036a	f
27	10	haskell	beer-song	1	pending	\N	2014-06-29 23:24:08	2014-06-29 23:24:08	190d6fd910989d7ee5f36e3d	f
28	10	ruby	proverb	2	pending	\N	2014-06-27 00:01:06	2014-06-27 00:01:06	97660291072b0e8f537d9e6f	f
29	10	haskell	triangle	1	done	2014-07-15 22:54:36	2014-07-09 11:59:20	2014-07-09 11:59:20	ddbc90e72ff02a354030d57a	t
30	10	haskell	word-count	1	done	2014-07-14 07:12:10	2014-07-04 00:53:35	2014-07-04 00:53:35	24b882f771330df4b15f999e	t
31	10	ruby	anagram	1	done	2014-07-03 18:38:59	2014-07-02 04:10:46	2014-07-02 04:10:46	b6e19f9c994de3cc56100174	t
32	10	ruby	beer-song	4	pending	\N	2014-06-29 05:24:05	2014-06-29 05:24:05	c3bb76ed2942477c73180ebc	f
33	10	haskell	point-mutations	2	pending	\N	2014-07-02 04:44:59	2014-07-02 04:44:59	1b24dad3be88026899b12732	f
34	10	perl5	trinary	1	pending	\N	2014-07-05 11:22:36	2014-07-05 11:22:36	5dc90c91de2d84915a37620d	f
35	10	javascript	anagram	1	done	2014-07-11 14:17:57	2014-06-30 03:13:50	2014-06-30 03:13:50	3a6b4a1e8fea1e4fea5d1e89	t
36	10	perl5	beer-song	1	done	2014-07-13 18:31:48	2014-07-09 23:45:17	2014-07-09 23:45:17	4c303de4b738b0b4d7a5f03c	t
37	10	ruby	word-count	1	done	2014-06-27 07:23:01	2014-06-26 20:47:29	2014-06-26 20:47:29	b2da05c949f103213c1ef654	t
38	10	ruby	rna-transcription	4	done	2014-07-02 11:17:18	2014-06-27 11:22:29	2014-06-27 11:22:29	5620b16eca1f07136107102e	t
39	10	python	saddle-points	1	pending	\N	2014-06-29 22:37:51	2014-06-29 22:37:51	d2b7f760ed244e457e45e7fc	f
40	10	scala	bob	4	done	2014-07-23 07:26:47	2014-06-25 09:56:54	2014-06-25 09:56:54	df6abc2a90425afd719a8869	t
41	10	ruby	hamming	1	done	2014-07-06 13:40:28	2014-06-30 02:40:12	2014-06-30 02:40:12	74d6dc3a37c0b71f1af2550b	t
42	11	ruby	bob	2	pending	\N	2014-03-03 16:28:49	2014-03-03 16:28:49	82462fa1de72e632f4bc7ce6	f
43	11	scala	meetup	1	pending	\N	2014-02-28 02:39:22	2014-02-28 02:39:22	d604c866ef4ece4e1659f8af	f
44	14	elixir	beer-song	2	done	2014-01-16 16:51:15	2014-01-09 04:58:53	2014-01-09 04:58:53	4489179facee8612c49e9ebc	t
45	14	javascript	difference-of-squares	1	done	2014-05-14 02:08:38	2014-05-07 08:43:25	2014-05-07 08:43:25	058e25420feee99e9fe71ac1	t
46	14	clojure	bob	2	done	2014-06-11 09:46:31	2014-04-06 16:10:30	2014-04-06 16:10:30	60f217a069786d9f0428f457	t
47	14	haskell	anagram	2	done	2014-01-10 16:00:48	2013-11-27 06:57:34	2013-11-27 06:57:34	27b5f81a2fce8865c39b99e6	t
48	14	clojure	word-count	1	pending	\N	2014-01-19 08:53:40	2014-01-19 08:53:40	37e35fa7427344e7f75ef9aa	f
49	14	perl5	word-count	1	done	2013-12-03 16:21:16	2013-12-02 18:20:49	2013-12-02 18:20:49	3a9383e5db1dd67c11294479	t
50	14	ruby	bob	1	done	2014-03-11 15:01:13	2014-03-10 02:58:01	2014-03-10 02:58:01	def4bae2de1b7b92af9e319a	t
51	14	ruby	sieve	1	pending	\N	2014-05-05 09:21:21	2014-05-05 09:21:21	2098a0f116e180f08b304945	f
52	14	javascript	bob	2	done	2014-03-23 10:42:39	2014-03-06 15:42:15	2014-03-06 15:42:15	2d263de86de12a2103ab7fe1	t
53	14	elixir	anagram	1	done	2014-03-18 12:46:22	2014-03-08 03:23:22	2014-03-08 03:23:22	cd68b0f6244645b56731eeeb	t
54	14	ruby	anagram	6	pending	\N	2013-12-10 05:58:35	2013-12-10 05:58:35	042b5addac2942d4bfe85c18	f
55	14	haskell	binary	3	done	2014-04-10 14:58:36	2014-02-13 12:15:23	2014-02-13 12:15:23	a6ad1637a64fda269e978daa	t
56	21	ruby	nucleotide-count	2	pending	\N	2014-06-25 13:07:44	2014-06-25 13:07:44	70041b3414f12d7169bd0aff	f
57	21	javascript	bob	2	done	2014-06-27 17:16:55	2013-11-19 17:13:31	2013-11-19 17:13:31	e4c4dab85b774fd0f91e4f74	t
58	27	haskell	word-count	1	done	2014-06-26 20:41:42	2014-06-21 03:57:26	2014-06-21 03:57:26	a46c242b8e68b942fb8fbdbe	t
59	27	javascript	food-chain	1	done	2014-06-16 21:06:22	2014-06-13 23:59:37	2014-06-13 23:59:37	c3c199f7d13a5c07d04ca061	t
60	27	objective-c	bob	1	done	2014-04-24 05:48:53	2014-04-14 08:03:28	2014-04-14 08:03:28	d3e81c06dc9cfcb1b10ca061	t
61	27	ruby	scrabble-score	1	done	2014-05-11 19:08:04	2014-05-09 17:20:25	2014-05-09 17:20:25	72112e915e344b4c04904962	t
62	27	haskell	bob	5	done	2014-07-26 19:31:02.847307	2014-04-15 00:40:40	2014-04-15 00:40:40	339355298e2496300bf99f1b	t
63	27	elixir	beer-song	5	done	2014-07-16 17:06:02	2014-05-01 22:48:18	2014-05-01 22:48:18	bca41f50a7c69a73466e4d92	t
64	28	haskell	anagram	1	pending	\N	2014-02-06 15:07:54	2014-02-06 15:07:54	dfd4f2d1dbdfd14a06d28267	f
65	28	javascript	word-count	4	done	2014-04-24 05:42:34	2013-12-22 08:42:58	2013-12-22 08:42:58	0c7463b41c45bd7b2cb06236	t
66	28	ruby	house	2	done	2014-04-23 10:20:06	2014-03-05 10:19:21	2014-03-05 10:19:21	5bfff9c758768004e2360d9f	t
67	28	clojure	bob	2	done	2014-05-05 23:48:49	2014-02-12 15:31:55	2014-02-12 15:31:55	a19291ebf07e3b0929f4006a	t
68	28	javascript	bob	5	done	2014-04-12 23:30:04	2014-01-21 15:33:39	2014-01-21 15:33:39	9bdd319bee8b47903cd37696	t
69	28	ruby	hamming	1	done	2014-02-13 00:46:52	2014-02-02 08:23:10	2014-02-02 08:23:10	51c544d43a2ab836f4e36e86	t
70	28	ruby	anagram	5	done	2014-05-13 03:40:45	2014-03-07 19:10:49	2014-03-07 19:10:49	ae6f52efb8bc38508203bdf5	t
71	30	go	grains	1	done	2014-02-13 01:51:12	2014-02-04 01:34:15	2014-02-04 01:34:15	b6a2e1a98257da97e4c89af9	t
72	30	haskell	rna-transcription	2	done	2014-02-11 11:36:08	2014-02-01 09:42:25	2014-02-01 09:42:25	06fdc4f5ee00eb51e36a035e	t
73	30	ruby	rna-transcription	1	done	2014-05-07 11:01:13	2014-05-04 05:18:34	2014-05-04 05:18:34	2268e1b1a309d5545b8a05c9	t
74	30	python	rna-transcription	2	pending	\N	2014-02-19 05:42:30	2014-02-19 05:42:30	19badb3f9541a57b940aa18e	f
75	30	ruby	bob	7	done	2014-05-17 16:05:09	2014-01-09 00:08:09	2014-01-09 00:08:09	e7e040ab9b69a4c39c22a449	t
76	30	ruby	twelve-days	1	pending	\N	2014-02-06 22:54:18	2014-02-06 22:54:18	a197852a650de69481cddb51	f
77	30	python	roman-numerals	1	done	2014-03-01 13:25:48	2014-02-19 16:39:20	2014-02-19 16:39:20	132a3533bcbd8a4e75fac566	t
78	30	ruby	word-count	1	pending	\N	2014-01-15 14:35:19	2014-01-15 14:35:19	a27442337bfacdd58e130967	f
79	30	python	nucleotide-count	2	done	2014-05-11 16:58:09	2014-01-26 21:54:31	2014-01-26 21:54:31	b8357857d206ff26758e2c60	t
80	30	ruby	etl	3	done	2014-02-11 11:23:22	2014-01-17 17:16:30	2014-01-17 17:16:30	af1d2fe55035b7310a6bbfb9	t
81	32	go	word-count	1	pending	\N	2014-05-13 07:59:33	2014-05-13 07:59:33	3d757d5dd5ec1718ecee44eb	f
82	37	clojure	grade-school	1	pending	\N	2013-11-11 08:11:50	2013-11-11 08:11:50	40b141509921b8af5662a917	f
83	37	elixir	anagram	2	done	2014-04-22 16:51:12	2014-03-22 12:45:16	2014-03-22 12:45:16	a9a58fa503447a3dd2136218	t
84	37	javascript	nucleotide-count	2	done	2014-01-28 09:53:01	2013-12-17 22:37:40	2013-12-17 22:37:40	abf7898deffd4d677e6157c4	t
85	37	haskell	bob	2	done	2013-12-31 18:12:33	2013-12-24 11:05:30	2013-12-24 11:05:30	b9b5c816b731e88ac79b8eae	t
86	37	ruby	roman-numerals	1	pending	\N	2014-01-05 09:55:09	2014-01-05 09:55:09	153e0bb3048a1d0eb339eb8d	f
87	39	ruby	bob	1	done	2014-06-07 23:54:03	2014-05-29 15:17:57	2014-05-29 15:17:57	842018c7c228756ec1d3193d	t
88	39	ruby	gigasecond	1	done	2014-07-22 09:53:31	2014-07-11 15:21:55	2014-07-11 15:21:55	cb56110fc450fe064ea7d886	t
89	39	ruby	difference-of-squares	1	done	2014-05-31 20:10:54	2014-05-24 12:51:25	2014-05-24 12:51:25	816f2af0344f57af5302e6ba	t
90	39	coffeescript	bob	2	done	2014-06-07 10:49:25	2014-06-01 14:34:35	2014-06-01 14:34:35	498b6b3d297c3a5c550c25cb	t
91	39	go	etl	1	done	2014-06-28 09:39:35	2014-06-24 06:05:17	2014-06-24 06:05:17	ba4cbe43c90280ee9cbe823e	t
92	39	haskell	bob	2	pending	\N	2014-06-23 03:49:31	2014-06-23 03:49:31	8ccbb3514a19e2e17f34a025	f
93	39	haskell	anagram	8	done	2014-07-14 00:20:41	2014-05-24 05:11:49	2014-05-24 05:11:49	c48ea1fb7260099020facbe6	t
94	39	haskell	grade-school	2	done	2014-07-20 15:14:30	2014-06-26 12:24:00	2014-06-26 12:24:00	465b962c4def158991950b47	t
95	39	ruby	rna-transcription	3	done	2014-06-29 10:20:59	2014-05-28 00:17:32	2014-05-28 00:17:32	71b691ff887ae43f1de1d04c	t
96	39	clojure	rna-transcription	2	done	2014-05-23 17:22:17	2014-05-19 04:13:12	2014-05-19 04:13:12	bff116f0bad19fbbf7635624	t
97	39	ruby	leap	13	done	2014-07-18 03:09:26	2014-05-17 06:51:44	2014-05-17 06:51:44	f0a8c7706b9f9c6baa95731f	t
98	39	javascript	word-count	1	done	2014-07-02 17:14:18	2014-06-22 03:22:33	2014-06-22 03:22:33	1eaa06587fb9532ebdc30f90	t
99	39	ruby	nucleotide-count	3	done	2014-06-12 11:35:12	2014-06-04 21:39:09	2014-06-04 21:39:09	575dc5530c2455a8a454f9b8	t
100	39	haskell	robot-simulator	4	pending	\N	2014-05-23 22:50:34	2014-05-23 22:50:34	247fa83ba991d8b5f1f34967	f
101	39	javascript	bob	3	done	2014-05-29 11:29:31	2014-05-21 12:01:51	2014-05-21 12:01:51	d606dd1dbd4734dab1727c42	t
102	39	clojure	bob	1	pending	\N	2014-06-29 02:05:18	2014-06-29 02:05:18	c6a0522ad87a6e3fc3a740dc	f
103	39	elixir	bob	6	pending	\N	2014-05-23 04:13:03	2014-05-23 04:13:03	ca6cf513aa430c54c77e644b	f
104	39	clojure	word-count	1	pending	\N	2014-06-20 12:11:51	2014-06-20 12:11:51	bd9400fde935e8cae0dff685	f
105	39	ruby	raindrops	2	done	2014-05-19 23:52:29	2014-05-19 19:24:38	2014-05-19 19:24:38	1d53e4139242b0a0a5157b51	t
106	39	perl5	hamming	1	done	2014-07-04 01:58:06	2014-07-02 12:22:28	2014-07-02 12:22:28	0d2b06e2e4f5664b150d1a69	t
107	39	go	clock	1	done	2014-06-26 11:53:34	2014-06-26 06:19:19	2014-06-26 06:19:19	0789e56d1de357c9bb19728d	t
108	39	python	word-count	1	done	2014-07-08 08:18:22	2014-07-02 05:05:58	2014-07-02 05:05:58	e971e3ac72b4aa3dbe6d5cd8	t
109	39	haskell	prime-factors	1	done	2014-07-01 04:25:20	2014-06-26 07:16:50	2014-06-26 07:16:50	23b619a688fb3d05a46ee531	t
110	39	ruby	simple-linked-list	1	done	2014-06-07 00:27:42	2014-06-01 13:17:28	2014-06-01 13:17:28	fb2affccb526a6ba8e11541d	t
111	39	haskell	beer-song	4	done	2014-06-25 07:42:08	2014-05-18 00:03:50	2014-05-18 00:03:50	94926f7b19ff32bbda68d149	t
112	39	go	hamming	2	done	2014-06-18 05:28:37	2014-05-20 20:37:25	2014-05-20 20:37:25	e580bc435e9d60e2baebfb3d	t
113	43	clojure	rna-transcription	1	pending	\N	2014-06-13 17:10:21	2014-06-13 17:10:21	45b269d7f2210472d4b5dc5e	f
114	45	haskell	grade-school	1	done	2014-05-11 20:23:29	2014-05-08 13:14:17	2014-05-08 13:14:17	8fc352427584675588cd7ee9	t
115	45	ruby	rna-transcription	1	pending	\N	2014-06-24 16:12:57	2014-06-24 16:12:57	e73c637d92017dfb30dfa3ec	f
116	45	ruby	triangle	3	done	2014-06-07 04:30:27	2014-05-09 21:08:33	2014-05-09 21:08:33	f2ebb7085d25289bf098f822	t
117	45	ruby	hamming	1	done	2014-05-04 06:29:39	2014-04-26 04:20:25	2014-04-26 04:20:25	2c6ceb867b0fbd4ed3cea8bd	t
118	45	javascript	word-count	1	pending	\N	2014-04-15 07:49:27	2014-04-15 07:49:27	53a0f7f55b59835b3a40c11e	f
119	47	ruby	rna-transcription	2	pending	\N	2014-02-15 03:33:26	2014-02-15 03:33:26	cc5ca361f70e78be787aff30	f
120	47	ruby	bob	1	pending	\N	2014-05-06 07:28:05	2014-05-06 07:28:05	d3c0e767701872724690a133	f
121	47	go	etl	1	pending	\N	2013-12-20 09:42:06	2013-12-20 09:42:06	c97ea2c67a63b90151a48664	f
122	47	ruby	grade-school	2	done	2013-12-31 23:33:39	2013-12-22 14:25:46	2013-12-22 14:25:46	42955a6e2f77779bd7014e79	t
123	47	javascript	nucleotide-count	1	done	2014-01-21 20:19:24	2014-01-10 21:58:39	2014-01-10 21:58:39	ef37c48271627d640b8f8fce	t
124	47	python	point-mutations	2	pending	\N	2013-12-07 10:54:51	2013-12-07 10:54:51	c263362cfa6ad69173236396	f
125	48	clojure	bob	3	pending	\N	2014-04-12 08:58:24	2014-04-12 08:58:24	541200916e412ac1950a1b76	f
126	48	ruby	anagram	5	pending	\N	2014-04-10 01:26:42	2014-04-10 01:26:42	d488ac3641d9fa188c242f2e	f
127	48	ruby	bob	2	pending	\N	2014-03-28 11:12:32	2014-03-28 11:12:32	6bdaa187784c118b5442a95f	f
128	48	python	rna-transcription	1	pending	\N	2014-06-20 08:27:42	2014-06-20 08:27:42	8259541bc18ac88914304739	f
129	48	ruby	leap	1	pending	\N	2014-04-22 21:05:28	2014-04-22 21:05:28	c529344085c985c3d9cb1fca	f
130	25	ruby	phone-number	1	pending	\N	2013-12-25 13:10:47	2013-12-25 13:10:47	91a4f1c98ec389c952c46803	f
131	25	ruby	etl	2	pending	\N	2014-03-03 12:47:39	2014-03-03 12:47:39	732dc719ed2f79a2c60af1e8	f
132	25	ruby	scrabble-score	5	pending	\N	2013-12-25 12:28:22	2013-12-25 12:28:22	0b128137fbafe261823ff57c	f
133	25	go	accumulate	1	pending	\N	2014-04-08 21:36:51	2014-04-08 21:36:51	bc3eb22a425e39e6e2391552	f
134	25	python	twelve-days	1	pending	\N	2014-01-18 14:36:01	2014-01-18 14:36:01	7fe0048737f7727dcf055d4e	f
135	25	clojure	rna-transcription	2	pending	\N	2014-02-21 08:50:22	2014-02-21 08:50:22	7b514a9a8162e7b78b440640	f
136	6	javascript	pig-latin	1	pending	\N	2014-07-21 08:51:36	2014-07-21 08:51:36	ca0e54174e2e97d00556f6b3	f
137	6	python	grains	2	pending	\N	2014-07-22 07:47:14	2014-07-22 07:47:14	d9880421ade23471589170b3	f
138	22	ruby	beer-song	1	pending	\N	2014-07-18 04:58:34	2014-07-18 04:58:34	28e7bfb486db39aaed07dd29	f
139	22	haskell	parallel-letter-frequency	1	pending	\N	2014-05-10 10:02:37	2014-05-10 10:02:37	f5697e3c038713c3a6928670	f
140	22	ruby	bob	2	pending	\N	2014-05-23 09:11:56	2014-05-23 09:11:56	81d8beae2741bfedb3a717c2	f
141	22	clojure	bob	2	pending	\N	2014-05-22 01:11:36	2014-05-22 01:11:36	24353e84f1e6f26385191e2f	f
142	22	ruby	grade-school	1	pending	\N	2014-06-23 02:19:10	2014-06-23 02:19:10	339ac4f66f40539db4834991	f
143	22	clojure	word-count	4	pending	\N	2014-05-20 09:30:30	2014-05-20 09:30:30	b6e6b865b9da5c45a3cedad3	f
144	22	python	house	1	pending	\N	2014-04-30 02:43:43	2014-04-30 02:43:43	d4700e594dbb59d797a4670e	f
145	22	elixir	leap	1	pending	\N	2014-05-04 19:09:49	2014-05-04 19:09:49	2371b0be6086c537c0486fb7	f
146	22	ruby	hamming	2	pending	\N	2014-06-21 12:14:57	2014-06-21 12:14:57	73a5751805b77a6d75d465c2	f
147	22	elixir	etl	2	pending	\N	2014-06-01 17:48:45	2014-06-01 17:48:45	7fb92d80f6c2b66c82de7901	f
148	22	ruby	leap	5	pending	\N	2014-05-12 16:29:28	2014-05-12 16:29:28	0cf2ce8d4f7a69572704f0aa	f
149	22	coffeescript	trinary	1	pending	\N	2014-05-08 08:35:16	2014-05-08 08:35:16	90db7ab7047ab79ab0bd56eb	f
150	22	javascript	bob	3	pending	\N	2014-05-10 08:39:27	2014-05-10 08:39:27	1c131ec2af8f8af37ebdf18c	f
151	22	javascript	anagram	4	pending	\N	2014-06-02 06:04:13	2014-06-02 06:04:13	b45f01a782159dcffc984fee	f
152	22	ruby	gigasecond	1	pending	\N	2014-05-05 04:16:24	2014-05-05 04:16:24	5b9b1b646d1f2ce2742784f6	f
153	22	python	accumulate	1	pending	\N	2014-05-19 10:44:19	2014-05-19 10:44:19	9404beb6bf01e2f58c1d4f0e	f
154	22	ruby	robot-name	1	pending	\N	2014-05-22 04:30:52	2014-05-22 04:30:52	49c07d0e2caed795c2909b09	f
155	22	ruby	word-count	2	pending	\N	2014-05-24 19:47:14	2014-05-24 19:47:14	32535027a96773901172458c	f
156	22	haskell	space-age	2	pending	\N	2014-05-27 05:31:14	2014-05-27 05:31:14	1f40b8bf078c4e5b77364f52	f
157	22	ruby	grains	2	pending	\N	2014-04-27 18:18:04	2014-04-27 18:18:04	6a0aefd01a7b4b0e7345aa7b	f
158	22	ruby	anagram	2	pending	\N	2014-05-24 10:41:47	2014-05-24 10:41:47	ddfcd8b1bbcbf8e05e159e58	f
159	16	ruby	rna-transcription	2	pending	\N	2014-02-18 15:17:20	2014-02-18 15:17:20	ac5a1579943275e8f6422377	f
160	16	ruby	hamming	4	pending	\N	2014-01-21 19:04:37	2014-01-21 19:04:37	4582b1401ba16c1c28d5e0dc	f
161	16	javascript	anagram	3	pending	\N	2014-01-18 15:28:55	2014-01-18 15:28:55	38a98961de4425144e39c09a	f
162	16	javascript	clock	1	pending	\N	2014-02-11 14:59:09	2014-02-11 14:59:09	ff72f28c5240e66a7b1b4eae	f
163	16	elixir	etl	1	pending	\N	2014-01-20 20:43:28	2014-01-20 20:43:28	26a2eed0e3ec03041ed4cb0c	f
164	16	ruby	grains	2	pending	\N	2014-03-11 00:46:00	2014-03-11 00:46:00	7d2299640e68c6a8d4199e7d	f
165	16	ruby	word-count	1	pending	\N	2014-01-26 05:12:25	2014-01-26 05:12:25	ea82a63ccfc219cc62082a5f	f
166	16	ruby	gigasecond	1	pending	\N	2014-07-05 17:52:50	2014-07-05 17:52:50	6f33c648cd2bba8f590a85e9	f
167	16	python	binary	1	pending	\N	2014-05-24 09:42:25	2014-05-24 09:42:25	7138529870cb4f90623dcb56	f
168	16	python	word-count	1	pending	\N	2014-05-17 23:31:09	2014-05-17 23:31:09	aefc2136451a3481cb81502b	f
169	16	clojure	beer-song	1	pending	\N	2014-02-13 07:23:22	2014-02-13 07:23:22	60a447acc86cb6b0a5364ed9	f
170	16	ruby	bob	2	pending	\N	2014-06-29 12:16:22	2014-06-29 12:16:22	ff67008358aba59209373e10	f
171	16	ruby	sieve	4	pending	\N	2014-03-24 22:36:31	2014-03-24 22:36:31	34f4a8b8630adab6eba391e0	f
172	16	ruby	leap	1	pending	\N	2014-02-03 07:44:00	2014-02-03 07:44:00	04c29a12f1406129b9f94873	f
173	16	elixir	rna-transcription	3	pending	\N	2014-02-03 20:26:39	2014-02-03 20:26:39	d04068012b07834d234194d0	f
174	16	javascript	point-mutations	1	pending	\N	2014-01-22 02:40:50	2014-01-22 02:40:50	d9c8b4c7881a5443a389ebf4	f
175	16	haskell	beer-song	1	pending	\N	2014-02-25 06:50:15	2014-02-25 06:50:15	30a5358a81d50ae0f9618823	f
176	16	ruby	anagram	4	pending	\N	2014-02-24 22:35:11	2014-02-24 22:35:11	c23d2799fa1ded6f00f72e03	f
177	16	haskell	word-count	6	pending	\N	2014-03-06 05:07:03	2014-03-06 05:07:03	886b3b4f71a12547cd39c0ba	f
178	16	javascript	bob	7	pending	\N	2014-04-21 14:36:31	2014-04-21 14:36:31	fc9928897a898a7f1e572a56	f
179	16	python	bob	1	pending	\N	2014-02-18 09:49:00	2014-02-18 09:49:00	d6eee4a789e7621ca797625a	f
180	16	elixir	anagram	2	pending	\N	2014-02-02 20:09:15	2014-02-02 20:09:15	2d0138a1ea7d93c96023fae6	f
181	19	ruby	accumulate	1	done	2014-02-19 16:40:07	2014-02-16 14:10:21	2014-02-16 14:10:21	73af0be61d85e8af3fe6cadd	t
182	19	ruby	bob	4	done	2014-06-11 06:03:39	2014-01-17 01:10:23	2014-01-17 01:10:23	b4a08f1d1b0788e25a07c069	t
183	19	python	queen-attack	1	done	2014-01-28 19:28:56	2014-01-24 05:34:35	2014-01-24 05:34:35	1529a557e261633d7b364ba8	t
184	19	ruby	robot-name	4	done	2014-04-30 05:03:41	2013-12-08 20:25:32	2013-12-08 20:25:32	3679ef57b15bf75f8772a1f3	t
185	19	javascript	word-count	1	done	2014-05-23 21:17:21	2014-05-14 11:53:13	2014-05-14 11:53:13	76920357e3defb99a31b906a	t
186	19	ruby	raindrops	1	done	2014-04-28 23:50:50	2014-04-22 01:19:43	2014-04-22 01:19:43	d9ce97ffc770f578ba271d9f	t
187	20	scala	nucleotide-count	2	done	2014-07-26 19:31:06.48527	2014-07-21 00:55:57	2014-07-21 00:55:57	88f5e3cd0f2fc56f2c53982e	t
188	20	ruby	etl	1	done	2014-07-25 22:32:55	2014-07-20 06:27:12	2014-07-20 06:27:12	cc68a72f6202ad4ffbcb1b9c	t
189	35	javascript	bob	5	done	2014-05-05 10:12:41	2013-12-22 09:33:53	2013-12-22 09:33:53	d64406d3e67d0598cd5ac165	t
190	35	ruby	anagram	6	done	2014-03-18 18:42:19	2013-12-24 00:03:02	2013-12-24 00:03:02	6545601905eda23538ef78e4	t
191	35	python	anagram	1	done	2014-02-12 13:10:19	2014-02-06 00:52:45	2014-02-06 00:52:45	f4d5dd9a5e53430effd0e05a	t
192	29	javascript	word-count	4	done	2014-05-09 09:05:15	2014-04-29 07:28:21	2014-04-29 07:28:21	ca80de64f0c9c3afde354d50	t
193	29	go	etl	1	done	2014-06-01 11:34:14	2014-05-29 15:36:56	2014-05-29 15:36:56	4c1b0d1d7691a1173212b148	t
194	29	ruby	hamming	1	done	2014-05-25 22:11:18	2014-05-15 10:08:04	2014-05-15 10:08:04	cdf7339f26b92a77c740e62c	t
195	29	ruby	allergies	1	done	2014-07-26 19:31:06.724935	2014-07-22 04:04:22	2014-07-22 04:04:22	096c84d15f29c10ccbf289c1	t
196	29	python	nucleotide-count	1	done	2014-06-02 04:19:50	2014-05-26 14:52:51	2014-05-26 14:52:51	d71ec4e7d75d9c9e04ab73df	t
197	34	ruby	raindrops	1	done	2014-04-15 12:55:53	2014-04-08 06:21:44	2014-04-08 06:21:44	4bc71c1eea6edd7c520a2271	t
198	34	haskell	roman-numerals	1	done	2014-06-20 18:06:52	2014-06-12 05:04:58	2014-06-12 05:04:58	309711d7578d9f9f6c8e2a7b	t
199	34	python	bob	1	done	2014-06-16 03:12:45	2014-06-08 00:54:22	2014-06-08 00:54:22	8ddeb6b3b2b52bf54121fe1a	t
200	34	ruby	gigasecond	1	done	2014-05-02 15:13:05	2014-04-30 01:50:35	2014-04-30 01:50:35	a4aab06daf769f5dded29510	t
201	34	clojure	anagram	10	done	2014-05-03 20:24:32	2014-04-07 18:38:16	2014-04-07 18:38:16	d79d60f8fc46ef77aef343df	t
202	34	ruby	proverb	1	done	2014-06-11 22:37:42	2014-06-02 16:20:44	2014-06-02 16:20:44	b3ff950b8dead21b324a822e	t
203	13	python	bob	5	pending	\N	2013-11-15 23:49:44	2013-11-15 23:49:44	3aae8f7171dd1d19af788de4	f
204	40	go	rna-transcription	1	pending	\N	2014-04-03 19:20:11	2014-04-03 19:20:11	8679c61080f4551dc6799d76	f
205	40	elixir	bob	5	pending	\N	2014-04-19 13:59:34	2014-04-19 13:59:34	f0beb23b48567c77e29131a6	f
206	40	python	anagram	1	pending	\N	2014-04-27 15:35:42	2014-04-27 15:35:42	0b52121ed9743676e0208af1	f
207	40	ruby	leap	3	pending	\N	2014-04-05 22:56:42	2014-04-05 22:56:42	156680ff13ed0e68a86bae05	f
208	40	haskell	phone-number	4	pending	\N	2014-04-10 23:43:02	2014-04-10 23:43:02	ed69b5637fac72626315e46f	f
209	5	haskell	bob	2	pending	\N	2014-04-15 05:01:29	2014-04-15 05:01:29	55f4f363b778d17a33ddba89	f
210	5	perl5	bob	4	pending	\N	2014-03-22 06:48:48	2014-03-22 06:48:48	796651400151eff33a1e1adc	f
211	5	javascript	bob	2	pending	\N	2014-04-06 12:02:57	2014-04-06 12:02:57	609dfe7bad4d465bca13cb26	f
212	5	python	octal	1	pending	\N	2014-05-24 08:58:43	2014-05-24 08:58:43	b8aa374aa014d0729f549e09	f
213	33	ruby	bob	3	pending	\N	2014-01-11 10:32:16	2014-01-11 10:32:16	36bd9c4da6c2fbe21174a212	f
214	33	python	rna-transcription	3	pending	\N	2013-12-20 14:41:30	2013-12-20 14:41:30	95284b1985ffd32bc2e519a4	f
215	33	ruby	leap	2	pending	\N	2013-12-30 13:58:54	2013-12-30 13:58:54	a61dbede87b99c9d8451b120	f
216	15	objective-c	nucleotide-count	1	pending	\N	2014-01-11 15:21:47	2014-01-11 15:21:47	eff1d0c930210b6ad39d9c7a	f
217	15	haskell	nucleotide-count	2	pending	\N	2014-03-09 19:32:09	2014-03-09 19:32:09	86769eb06ab8bbd0ac8545a1	f
218	15	ruby	bob	4	pending	\N	2014-01-14 04:44:37	2014-01-14 04:44:37	e2c4e0e39d6f4a3eff34ea1c	f
219	17	haskell	anagram	2	pending	\N	2014-04-30 10:22:24	2014-04-30 10:22:24	9aea04a585dd2f9897645780	f
220	17	perl5	hamming	1	pending	\N	2014-05-07 01:35:23	2014-05-07 01:35:23	f4478e5f2c83634131d23b0c	f
221	17	ruby	scrabble-score	4	pending	\N	2014-05-29 01:44:14	2014-05-29 01:44:14	1fe071b975daf036e0f8637f	f
222	17	javascript	robot-name	2	pending	\N	2014-06-15 15:36:17	2014-06-15 15:36:17	7e6015a633d957c25f77c5bf	f
223	17	ruby	space-age	1	pending	\N	2014-05-21 01:06:05	2014-05-21 01:06:05	21e97ac8b392dc447fce6cab	f
224	17	go	leap	1	pending	\N	2014-05-05 06:50:54	2014-05-05 06:50:54	9f1d49358c3af4af2bb7b678	f
225	17	ruby	bob	1	pending	\N	2014-05-28 14:59:15	2014-05-28 14:59:15	afb205ff91c7b1c5e497480c	f
226	17	elixir	bob	3	pending	\N	2014-06-02 08:52:52	2014-06-02 08:52:52	7a109231203f7fdcd1813c57	f
227	17	ruby	wordy	1	pending	\N	2014-05-31 20:13:02	2014-05-31 20:13:02	40d9b6a4a29659bd0d0bc293	f
228	17	ruby	gigasecond	2	pending	\N	2014-04-13 19:23:03	2014-04-13 19:23:03	5028b3da5a5ce32e761649b8	f
229	17	scala	anagram	2	pending	\N	2014-05-26 14:29:31	2014-05-26 14:29:31	44f87c2b00608ef33dcda129	f
230	17	ruby	hamming	3	pending	\N	2014-04-22 22:27:09	2014-04-22 22:27:09	45edb0c3f86a4dd1469491a9	f
231	17	javascript	anagram	9	pending	\N	2014-04-18 05:55:11	2014-04-18 05:55:11	3c4bd6e888c6f8165d2687a2	f
232	17	ruby	word-count	3	pending	\N	2014-05-17 14:14:17	2014-05-17 14:14:17	3adce2ed4f2b325b7fed1c69	f
233	17	python	rna-transcription	1	pending	\N	2014-05-26 17:42:28	2014-05-26 17:42:28	6a08193a29adfe1b7f01a067	f
234	17	ruby	robot-name	1	pending	\N	2014-04-21 02:37:45	2014-04-21 02:37:45	389abd409b022abbb3537b84	f
235	17	ruby	rna-transcription	1	pending	\N	2014-06-27 00:22:23	2014-06-27 00:22:23	e45b4fcab9a68335aa731637	f
236	17	python	anagram	2	pending	\N	2014-06-05 04:21:57	2014-06-05 04:21:57	5c9dab7e5dd806114d566cac	f
237	17	ruby	grains	1	pending	\N	2014-05-09 03:25:26	2014-05-09 03:25:26	29cf0fe2238e053e3aa09073	f
238	17	ruby	grade-school	3	pending	\N	2014-04-13 09:54:03	2014-04-13 09:54:03	d3d21094d261d726b9b97670	f
239	17	clojure	beer-song	1	pending	\N	2014-05-28 14:56:06	2014-05-28 14:56:06	62ec54aaf0c1d2dd9b0cf19f	f
240	17	haskell	robot-name	5	pending	\N	2014-04-17 17:01:16	2014-04-17 17:01:16	280c8a254580d1d8b4824d99	f
241	17	scala	hamming	2	pending	\N	2014-06-11 22:53:52	2014-06-11 22:53:52	23896698aec042c89de0a3b7	f
242	17	ruby	prime-factors	2	pending	\N	2014-06-07 04:59:53	2014-06-07 04:59:53	3e4cd8a1d7a1148f8dc75ad2	f
243	17	ruby	clock	1	pending	\N	2014-05-13 02:33:58	2014-05-13 02:33:58	dbd75bdbfa44b7d3ad35d844	f
244	17	go	gigasecond	2	pending	\N	2014-04-14 03:27:32	2014-04-14 03:27:32	cfe6a01020e89adbb1c11aef	f
245	23	ruby	binary	1	pending	\N	2013-12-16 11:07:00	2013-12-16 11:07:00	6ac9456e908cfaeec2ab3ced	f
246	23	javascript	anagram	2	pending	\N	2013-11-25 01:45:49	2013-11-25 01:45:49	7b6385570874ed5e23da1410	f
247	23	haskell	rna-transcription	2	pending	\N	2013-11-28 09:08:53	2013-11-28 09:08:53	fbab28df9d79d89f933fdc16	f
248	23	go	leap	2	pending	\N	2013-12-05 14:31:01	2013-12-05 14:31:01	abe9c2430f6ae44178f1709f	f
249	23	ruby	bob	2	pending	\N	2013-12-13 09:10:09	2013-12-13 09:10:09	475728383cce2776258c66c1	f
250	23	haskell	bob	1	pending	\N	2013-12-16 19:37:39	2013-12-16 19:37:39	dad18a1dcecc2cd6fee77919	f
251	23	perl5	word-count	1	pending	\N	2013-12-02 06:12:58	2013-12-02 06:12:58	72ff15cc39a6400bc7da7b11	f
252	23	clojure	leap	1	pending	\N	2014-01-19 11:59:55	2014-01-19 11:59:55	62afcb1888bff38ee9583198	f
253	23	ruby	anagram	5	pending	\N	2013-12-09 09:57:39	2013-12-09 09:57:39	4d53da914a16e55427fb4659	f
254	23	python	bob	1	pending	\N	2014-01-22 20:28:48	2014-01-22 20:28:48	a08ed84aaf402eead28504ce	f
255	23	perl5	pascals-triangle	1	pending	\N	2013-12-09 11:42:34	2013-12-09 11:42:34	b8a843082651f27b955c1b46	f
256	23	ruby	word-count	1	pending	\N	2014-06-20 03:28:54	2014-06-20 03:28:54	dc04468d6480897f3fd4bcca	f
257	23	ruby	rna-transcription	1	pending	\N	2014-03-02 06:09:41	2014-03-02 06:09:41	64dd224aa8ad4b462415b003	f
258	23	python	word-count	1	pending	\N	2014-05-30 06:26:21	2014-05-30 06:26:21	584e46e5b1ea3a1744a7b5c1	f
259	23	ruby	accumulate	3	pending	\N	2014-01-29 05:51:33	2014-01-29 05:51:33	fd81415f809d3c8121e75db8	f
260	23	ruby	raindrops	7	pending	\N	2014-01-24 00:22:57	2014-01-24 00:22:57	91d46bfd99cc1352eaa6a71f	f
261	23	python	rna-transcription	1	pending	\N	2013-12-19 01:28:40	2013-12-19 01:28:40	748ba191289d96ffbc7ce07a	f
262	23	clojure	bob	1	pending	\N	2014-03-28 21:07:14	2014-03-28 21:07:14	e366c7f9325dc71bc5cfe6e1	f
263	23	elixir	nucleotide-count	1	pending	\N	2014-01-26 08:43:08	2014-01-26 08:43:08	76ff573283364a5783e78ffd	f
264	23	haskell	phone-number	6	pending	\N	2014-02-15 19:35:29	2014-02-15 19:35:29	6a6402424554fca86b139b1e	f
265	23	go	etl	3	pending	\N	2014-02-05 05:46:56	2014-02-05 05:46:56	6c6103d4fbb99b76ef6fbc21	f
266	23	ruby	gigasecond	1	pending	\N	2013-12-08 06:44:08	2013-12-08 06:44:08	397d0cd7d20b594026568aad	f
267	23	clojure	anagram	1	pending	\N	2014-03-13 00:37:08	2014-03-13 00:37:08	e0e2a22f8a9dd776a20d3048	f
268	23	go	accumulate	2	pending	\N	2013-11-26 15:23:05	2013-11-26 15:23:05	8bd8cfc9aa82fd0590903698	f
269	23	ruby	hamming	1	pending	\N	2014-01-05 19:02:12	2014-01-05 19:02:12	46f3779c8929cc9252fb24e7	f
270	41	ruby	meetup	1	pending	\N	2014-05-13 09:31:26	2014-05-13 09:31:26	300f88ea50a5cf0bf344988a	f
271	41	clojure	kindergarden-garden	1	pending	\N	2014-04-07 08:32:05	2014-04-07 08:32:05	fe304042f3599a8396ec95b7	f
272	41	clojure	meetup	2	pending	\N	2014-05-13 22:04:56	2014-05-13 22:04:56	35e29a773623d913dac233ac	f
273	41	go	leap	1	pending	\N	2014-05-23 00:28:39	2014-05-23 00:28:39	c3121e563e94c1587f049ee4	f
274	41	ruby	bob	3	pending	\N	2014-03-28 17:31:47	2014-03-28 17:31:47	35f5498c24cd36d3816c336d	f
275	26	haskell	wordy	4	pending	\N	2014-07-11 20:44:34	2014-07-11 20:44:34	9fe72fd07a3277d5ffdf896a	f
276	44	python	rna-transcription	1	pending	\N	2014-01-02 06:48:35	2014-01-02 06:48:35	f220e391b2f075658b43d792	f
277	44	scala	bob	1	pending	\N	2014-02-02 01:31:12	2014-02-02 01:31:12	ba043bd6fb6a2df4f23770a3	f
278	44	ruby	anagram	1	pending	\N	2014-02-13 03:40:33	2014-02-13 03:40:33	b1716a8d29af0cf119682a04	f
279	44	javascript	bob	3	pending	\N	2014-01-16 23:41:22	2014-01-16 23:41:22	1218bf37e4c6b90593153cec	f
280	44	ruby	hamming	2	pending	\N	2013-12-21 10:07:51	2013-12-21 10:07:51	71f0f6bb9b630a202526cc8b	f
281	44	haskell	pig-latin	1	pending	\N	2013-12-18 15:22:32	2013-12-18 15:22:32	2944334b5506cff2276a9633	f
282	44	clojure	nucleotide-count	2	pending	\N	2014-03-31 20:40:59	2014-03-31 20:40:59	ea95965b82ad05d459374349	f
283	44	clojure	rna-transcription	1	pending	\N	2014-01-22 19:51:16	2014-01-22 19:51:16	c2d431ff15f3b9c7d789310a	f
284	44	ruby	leap	14	pending	\N	2013-12-20 13:55:37	2013-12-20 13:55:37	ef5630d06e11a282ec52f8d4	f
285	44	ruby	bob	3	pending	\N	2014-01-04 17:39:17	2014-01-04 17:39:17	f6954eb72c9844e2ed96d028	f
286	44	go	leap	1	pending	\N	2013-12-25 13:56:19	2013-12-25 13:56:19	c2c22a65f5db79ae5e81bcf2	f
287	44	haskell	house	1	pending	\N	2014-01-29 02:55:54	2014-01-29 02:55:54	c0632a206e665b3d9ac37be5	f
288	44	elixir	scrabble-score	1	pending	\N	2014-03-24 04:14:28	2014-03-24 04:14:28	02d77ad752948964c5ba5335	f
289	44	clojure	robot-name	1	pending	\N	2014-02-27 10:15:49	2014-02-27 10:15:49	e2ca3cd01f91210cbf265721	f
290	44	haskell	bob	2	pending	\N	2014-05-04 16:00:35	2014-05-04 16:00:35	148645924401f010061ee3bd	f
291	44	ruby	nucleotide-count	10	pending	\N	2013-12-26 08:42:39	2013-12-26 08:42:39	96352f1073eb52b747fe7710	f
292	44	ruby	difference-of-squares	1	pending	\N	2014-02-19 03:20:22	2014-02-19 03:20:22	e2e868ef022e9fc882035e07	f
\.


--
-- Name: user_exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('user_exercises_id_seq', 292, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY users (id, username, email, avatar_url, github_id, key, mastery, created_at, updated_at) FROM stdin;
1	alice	alice@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kinday/128.jpg	-35522	jwd185	---\n- clojure\n- coffeescript\n- elixir\n- go\n- haskell\n- javascript\n- objective-c\n- ocaml\n- perl5\n- python\n- ruby\n- scala\n	2014-02-17 17:33:45.648969	2014-02-17 17:33:45.648969
2	bob	bob@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/starburst1977/128.jpg	-74710	ydq308	---\n- ruby\n- haskell\n	2014-02-09 23:18:56.677888	2014-02-09 23:18:56.677888
3	charlie	charlie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/_shahedk/128.jpg	-16394	qrm829	---\n- javascript\n- erlang\n- elixir\n	2014-01-11 22:02:26.689298	2014-01-11 22:02:26.689298
4	diana	diana@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/akmur/128.jpg	-48162	xrx993	---\n- python\n	2014-07-22 07:09:53.692317	2014-07-22 07:09:53.692317
5	amelie	amelie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/buzzusborne/128.jpg	-23728	wew241	--- []\n	2014-02-27 21:15:42.694291	2014-02-27 21:15:42.694291
6	beth	beth@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/brajeshwar/128.jpg	-60096	wbo932	--- []\n	2014-07-21 07:32:44.696835	2014-07-21 07:32:44.696835
7	claire	claire@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/opnsrce/128.jpg	-77544	cnm775	--- []\n	2013-11-09 01:39:21.699303	2013-11-09 01:39:21.699303
8	dawson	dawson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/traneblow/128.jpg	-3554	stf718	--- []\n	2014-07-05 20:33:46.701054	2014-07-05 20:33:46.701054
9	eve	eve@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/nicolasfolliot/128.jpg	-67841	yis659	--- []\n	2013-12-20 18:00:10.703918	2013-12-20 18:00:10.703918
10	elisa	elisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/tjrus/128.jpg	-89331	dai130	--- []\n	2014-06-25 02:07:27.705502	2014-06-25 02:07:27.705502
11	frederique	frederique@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/brandclay/128.jpg	-85549	afy848	--- []\n	2013-11-23 15:33:12.707985	2013-11-23 15:33:12.707985
12	grace	grace@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/iqonicd/128.jpg	-97565	xxg598	--- []\n	2014-02-18 05:48:03.710423	2014-02-18 05:48:03.710423
13	haley	haley@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jm_denis/128.jpg	-77342	hzh297	--- []\n	2013-11-06 23:12:46.711945	2013-11-06 23:12:46.711945
14	isaac	isaac@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/arindam_/128.jpg	-92304	zeb683	--- []\n	2013-11-25 13:07:17.714323	2013-11-25 13:07:17.714323
15	jarrod	jarrod@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/SlaapMe/128.jpg	-30759	vvm826	--- []\n	2013-12-23 16:28:08.716672	2013-12-23 16:28:08.716672
16	kieran	kieran@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/pifagor/128.jpg	-49588	tuk218	--- []\n	2014-01-09 15:54:07.719022	2014-01-09 15:54:07.719022
17	lisa	lisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/bajazetov/128.jpg	-24230	jwk140	--- []\n	2014-04-11 11:06:32.739496	2014-04-11 11:06:32.739496
18	mack	mack@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/terryxlife/128.jpg	-43411	vhi985	--- []\n	2014-06-19 02:27:17.744709	2014-06-19 02:27:17.744709
19	madison	madison@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/catarino/128.jpg	-97107	wox799	--- []\n	2013-11-28 20:03:38.747864	2013-11-28 20:03:38.747864
20	marshall	marshall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/bradenhamm/128.jpg	-60519	pfr518	--- []\n	2014-07-19 14:08:59.75074	2014-07-19 14:08:59.75074
21	mary	mary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kolage/128.jpg	-97530	yap476	--- []\n	2013-10-30 01:46:29.754065	2013-10-30 01:46:29.754065
22	mia	mia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/diesellaws/128.jpg	-4204	hdq932	--- []\n	2014-04-27 11:52:21.756861	2014-04-27 11:52:21.756861
23	mike	mike@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/iamgarth/128.jpg	-59756	aca139	--- []\n	2013-11-24 20:51:15.759392	2013-11-24 20:51:15.759392
24	mildred	mildred@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jamiebrittain/128.jpg	-66193	bgt778	--- []\n	2014-06-08 20:23:39.761775	2014-06-08 20:23:39.761775
25	mitchell	mitchell@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/rmlewisuk/128.jpg	-82629	oon669	--- []\n	2013-12-14 12:18:39.764232	2013-12-14 12:18:39.764232
26	morris	morris@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/iamgarth/128.jpg	-90210	npr313	--- []\n	2014-07-11 18:36:03.766971	2014-07-11 18:36:03.766971
27	norma	norma@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/andychipster/128.jpg	-24064	ltq205	--- []\n	2014-04-13 19:37:20.770182	2014-04-13 19:37:20.770182
28	opal	opal@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/GavicoInd/128.jpg	-38653	ehf440	--- []\n	2013-12-19 12:03:39.774021	2013-12-19 12:03:39.774021
29	paula	paula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/bublienko/128.jpg	-39482	hmf976	--- []\n	2014-04-25 19:39:44.776956	2014-04-25 19:39:44.776956
30	quentin	quentin@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/pmeissner/128.jpg	-9730	fkl606	--- []\n	2014-01-05 12:00:02.779454	2014-01-05 12:00:02.779454
31	rachel	rachel@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/madysondesigns/128.jpg	-70547	yss784	--- []\n	2014-06-02 20:29:52.781989	2014-06-02 20:29:52.781989
32	randall	randall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/raquelwilson/128.jpg	-69860	rsi187	--- []\n	2014-05-13 04:27:55.784475	2014-05-13 04:27:55.784475
33	rick	rick@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/divya/128.jpg	-45025	nvg605	--- []\n	2013-12-13 10:06:07.78702	2013-12-13 10:06:07.78702
34	rita	rita@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kerem/128.jpg	-12860	qwq636	--- []\n	2014-04-05 07:33:32.789533	2014-04-05 07:33:32.789533
35	river	river@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/buzzusborne/128.jpg	-42690	fan565	--- []\n	2013-12-21 12:01:44.791962	2013-12-21 12:01:44.791962
36	rolf	rolf@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/andychipster/128.jpg	-39601	xcg733	--- []\n	2014-06-20 12:34:24.794514	2014-06-20 12:34:24.794514
37	ruben	ruben@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/themadray/128.jpg	-72403	ali677	--- []\n	2013-11-05 18:18:37.796953	2013-11-05 18:18:37.796953
38	rudi	rudi@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/rdsaunders/128.jpg	-98531	mnj598	--- []\n	2014-01-27 02:24:15.799416	2014-01-27 02:24:15.799416
39	russ	russ@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/chatyrko/128.jpg	-66731	oba701	--- []\n	2014-05-16 01:36:14.80111	2014-05-16 01:36:14.80111
40	ryan	ryan@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/_shahedk/128.jpg	-97775	hro235	--- []\n	2014-04-01 14:06:00.803528	2014-04-01 14:06:00.803528
41	shaina	shaina@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/haydn_woods/128.jpg	-44963	byq208	--- []\n	2014-03-14 23:16:28.80587	2014-03-14 23:16:28.80587
42	talia	talia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/anoff/128.jpg	-63542	vnx857	--- []\n	2014-01-26 16:27:57.808325	2014-01-26 16:27:57.808325
43	ursula	ursula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/devankoshal/128.jpg	-25736	gpm310	--- []\n	2014-03-22 19:57:07.810779	2014-03-22 19:57:07.810779
44	vince	vince@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/andrewarrow/128.jpg	-31368	bjj973	--- []\n	2013-12-16 00:33:15.813142	2013-12-16 00:33:15.813142
45	wilson	wilson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/krystalfister/128.jpg	-91667	gme361	--- []\n	2014-04-01 02:01:42.815474	2014-04-01 02:01:42.815474
46	xavier	xavier@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/thinmatt/128.jpg	-53874	mkk223	--- []\n	2014-04-13 11:54:45.817879	2014-04-13 11:54:45.817879
47	yvette	yvette@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/timmillwood/128.jpg	-53871	ayt949	--- []\n	2013-11-24 21:16:33.819648	2013-11-24 21:16:33.819648
48	zachary	zachary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/amboy00/128.jpg	-77540	oxh343	--- []\n	2014-03-28 10:56:56.82203	2014-03-28 10:56:56.82203
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('users_id_seq', 48, true);


--
-- PostgreSQL database dump complete
--

