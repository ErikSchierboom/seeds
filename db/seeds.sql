--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: alerts; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE alerts (
    id integer NOT NULL,
    user_id integer NOT NULL,
    text text,
    url character varying(255),
    link_text character varying(255),
    read boolean,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.alerts OWNER TO exercism;

--
-- Name: alerts_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE alerts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.alerts_id_seq OWNER TO exercism;

--
-- Name: alerts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE alerts_id_seq OWNED BY alerts.id;


--
-- Name: comments; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE comments (
    id integer NOT NULL,
    user_id integer NOT NULL,
    submission_id integer NOT NULL,
    body text,
    html_body text,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.comments OWNER TO exercism;

--
-- Name: comments_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE comments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.comments_id_seq OWNER TO exercism;

--
-- Name: comments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE comments_id_seq OWNED BY comments.id;


--
-- Name: likes; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE likes (
    id integer NOT NULL,
    submission_id integer NOT NULL,
    user_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.likes OWNER TO exercism;

--
-- Name: likes_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE likes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.likes_id_seq OWNER TO exercism;

--
-- Name: likes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE likes_id_seq OWNED BY likes.id;


--
-- Name: log_entries; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE log_entries (
    id integer NOT NULL,
    user_id integer,
    body text,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.log_entries OWNER TO exercism;

--
-- Name: log_entries_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE log_entries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.log_entries_id_seq OWNER TO exercism;

--
-- Name: log_entries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE log_entries_id_seq OWNED BY log_entries.id;


--
-- Name: looks; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE looks (
    id integer NOT NULL,
    user_id integer NOT NULL,
    exercise_id integer NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.looks OWNER TO exercism;

--
-- Name: looks_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE looks_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.looks_id_seq OWNER TO exercism;

--
-- Name: looks_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE looks_id_seq OWNED BY looks.id;


--
-- Name: muted_submissions; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE muted_submissions (
    id integer NOT NULL,
    submission_id integer NOT NULL,
    user_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.muted_submissions OWNER TO exercism;

--
-- Name: muted_submissions_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE muted_submissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.muted_submissions_id_seq OWNER TO exercism;

--
-- Name: muted_submissions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE muted_submissions_id_seq OWNED BY muted_submissions.id;


--
-- Name: notifications; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE notifications (
    id integer NOT NULL,
    user_id integer NOT NULL,
    item_id integer,
    regarding character varying(255),
    read boolean,
    count integer DEFAULT 0 NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    item_type character varying(255),
    creator_id integer
);


ALTER TABLE public.notifications OWNER TO exercism;

--
-- Name: notifications_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE notifications_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.notifications_id_seq OWNER TO exercism;

--
-- Name: notifications_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE notifications_id_seq OWNED BY notifications.id;


--
-- Name: posts; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE posts (
    id integer NOT NULL,
    slug character varying(255),
    title character varying(255),
    blurb text,
    body text,
    testimonial_keyword character varying(255),
    event_on date,
    archive_on date,
    is_indestructible boolean,
    is_featured boolean,
    is_service boolean,
    priority integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.posts OWNER TO exercism;

--
-- Name: posts_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE posts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.posts_id_seq OWNER TO exercism;

--
-- Name: posts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE posts_id_seq OWNED BY posts.id;


--
-- Name: products; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE products (
    id integer NOT NULL,
    title character varying(255),
    price character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    sort_order integer
);


ALTER TABLE public.products OWNER TO exercism;

--
-- Name: products_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE products_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.products_id_seq OWNER TO exercism;

--
-- Name: products_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE products_id_seq OWNED BY products.id;


--
-- Name: quotes; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE quotes (
    id integer NOT NULL,
    body text,
    cite character varying(255),
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.quotes OWNER TO exercism;

--
-- Name: quotes_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE quotes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.quotes_id_seq OWNER TO exercism;

--
-- Name: quotes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE quotes_id_seq OWNED BY quotes.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE public.schema_migrations OWNER TO exercism;

--
-- Name: submission_viewers; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE submission_viewers (
    id integer NOT NULL,
    submission_id integer NOT NULL,
    viewer_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.submission_viewers OWNER TO exercism;

--
-- Name: submission_viewers_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE submission_viewers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.submission_viewers_id_seq OWNER TO exercism;

--
-- Name: submission_viewers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE submission_viewers_id_seq OWNED BY submission_viewers.id;


--
-- Name: submissions; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE submissions (
    id integer NOT NULL,
    user_id integer NOT NULL,
    key character varying(255),
    state character varying(255),
    language character varying(255),
    slug character varying(255),
    code text,
    done_at timestamp without time zone,
    is_liked boolean,
    nit_count integer NOT NULL,
    version integer,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    user_exercise_id integer,
    filename character varying(255)
);


ALTER TABLE public.submissions OWNER TO exercism;

--
-- Name: submissions_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE submissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.submissions_id_seq OWNER TO exercism;

--
-- Name: submissions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE submissions_id_seq OWNED BY submissions.id;


--
-- Name: team_managers; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE team_managers (
    id integer NOT NULL,
    user_id integer NOT NULL,
    team_id integer NOT NULL
);


ALTER TABLE public.team_managers OWNER TO exercism;

--
-- Name: team_managers_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE team_managers_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.team_managers_id_seq OWNER TO exercism;

--
-- Name: team_managers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE team_managers_id_seq OWNED BY team_managers.id;


--
-- Name: team_memberships; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE team_memberships (
    id integer NOT NULL,
    team_id integer NOT NULL,
    user_id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    confirmed boolean
);


ALTER TABLE public.team_memberships OWNER TO exercism;

--
-- Name: team_memberships_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE team_memberships_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.team_memberships_id_seq OWNER TO exercism;

--
-- Name: team_memberships_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE team_memberships_id_seq OWNED BY team_memberships.id;


--
-- Name: teams; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE teams (
    id integer NOT NULL,
    slug character varying(255) NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    name character varying(255)
);


ALTER TABLE public.teams OWNER TO exercism;

--
-- Name: teams_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE teams_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.teams_id_seq OWNER TO exercism;

--
-- Name: teams_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE teams_id_seq OWNED BY teams.id;


--
-- Name: testimonials; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE testimonials (
    id integer NOT NULL,
    body text,
    name character varying(255),
    about character varying(255),
    homepage character varying(255),
    keyword character varying(255),
    featured boolean,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.testimonials OWNER TO exercism;

--
-- Name: testimonials_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE testimonials_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.testimonials_id_seq OWNER TO exercism;

--
-- Name: testimonials_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE testimonials_id_seq OWNED BY testimonials.id;


--
-- Name: user_exercises; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE user_exercises (
    id integer NOT NULL,
    user_id integer NOT NULL,
    language character varying(255),
    slug character varying(255),
    iteration_count integer,
    state character varying(255),
    completed_at timestamp without time zone,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL,
    key character varying(255),
    is_nitpicker boolean DEFAULT false
);


ALTER TABLE public.user_exercises OWNER TO exercism;

--
-- Name: user_exercises_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE user_exercises_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_exercises_id_seq OWNER TO exercism;

--
-- Name: user_exercises_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE user_exercises_id_seq OWNED BY user_exercises.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: exercism; Tablespace: 
--

CREATE TABLE users (
    id integer NOT NULL,
    username character varying(255),
    email character varying(255),
    avatar_url character varying(255),
    github_id integer,
    key character varying(255),
    mastery text,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);


ALTER TABLE public.users OWNER TO exercism;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: exercism
--

CREATE SEQUENCE users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO exercism;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: exercism
--

ALTER SEQUENCE users_id_seq OWNED BY users.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY alerts ALTER COLUMN id SET DEFAULT nextval('alerts_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY comments ALTER COLUMN id SET DEFAULT nextval('comments_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY likes ALTER COLUMN id SET DEFAULT nextval('likes_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY log_entries ALTER COLUMN id SET DEFAULT nextval('log_entries_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY looks ALTER COLUMN id SET DEFAULT nextval('looks_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY muted_submissions ALTER COLUMN id SET DEFAULT nextval('muted_submissions_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY notifications ALTER COLUMN id SET DEFAULT nextval('notifications_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY posts ALTER COLUMN id SET DEFAULT nextval('posts_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY products ALTER COLUMN id SET DEFAULT nextval('products_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY quotes ALTER COLUMN id SET DEFAULT nextval('quotes_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY submission_viewers ALTER COLUMN id SET DEFAULT nextval('submission_viewers_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY submissions ALTER COLUMN id SET DEFAULT nextval('submissions_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY team_managers ALTER COLUMN id SET DEFAULT nextval('team_managers_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY team_memberships ALTER COLUMN id SET DEFAULT nextval('team_memberships_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY teams ALTER COLUMN id SET DEFAULT nextval('teams_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY testimonials ALTER COLUMN id SET DEFAULT nextval('testimonials_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY user_exercises ALTER COLUMN id SET DEFAULT nextval('user_exercises_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: exercism
--

ALTER TABLE ONLY users ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);


--
-- Data for Name: alerts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY alerts (id, user_id, text, url, link_text, read, created_at, updated_at) FROM stdin;
1	7	Your exercise space-age in ruby has gone into hibernation.	/bob/69394c02fd0e29dd11e496cb	View submission.	f	2014-04-03 18:18:03	2014-04-03 18:18:03
2	7	Your exercise list-ops in elixir has gone into hibernation.	/bob/76ffcf3c2f80505453b61b64	View submission.	f	2014-03-29 20:40:07	2014-03-29 20:40:07
3	7	Your exercise bob in clojure has gone into hibernation.	/bob/4e179bfa35f554f544d8d5b4	View submission.	f	2014-01-28 10:24:24	2014-01-28 10:24:24
4	7	Your exercise nucleotide-count in ruby has gone into hibernation.	/bob/4ca8ed1701f21b40dceffe06	View submission.	f	2014-05-01 23:50:27	2014-05-01 23:50:27
5	7	Your exercise scrabble-score in ruby has gone into hibernation.	/bob/085dadb906b60d2e10beb348	View submission.	f	2014-04-29 14:55:53	2014-04-29 14:55:53
6	7	Your exercise beer-song in javascript has gone into hibernation.	/bob/dccf4244b55c8536e10cbeef	View submission.	f	2014-04-04 03:13:38	2014-04-04 03:13:38
7	7	Your exercise hamming in ruby has gone into hibernation.	/bob/81fdbab11da765234cece246	View submission.	f	2014-04-29 10:20:20	2014-04-29 10:20:20
8	3	Your exercise bob in javascript has gone into hibernation.	/diana/7f7672f6e1763c4bff69c406	View submission.	f	2014-04-09 23:57:22	2014-04-09 23:57:22
9	21	Your exercise leap in ruby has gone into hibernation.	/mary/3d246c10a87567ec23f7c931	View submission.	f	2014-01-04 08:02:40	2014-01-04 08:02:40
10	26	Your exercise leap in ruby has gone into hibernation.	/morris/0eb9312d7cd22ef2826f1be8	View submission.	f	2014-05-20 11:24:25	2014-05-20 11:24:25
11	26	Your exercise anagram in ruby has gone into hibernation.	/morris/f89910791291ee932ba262a9	View submission.	f	2014-05-23 04:25:41	2014-05-23 04:25:41
12	26	Your exercise bob in haskell has gone into hibernation.	/morris/6801c68df41c28a27840c048	View submission.	f	2014-05-03 10:37:35	2014-05-03 10:37:35
13	19	Your exercise raindrops in ruby has gone into hibernation.	/madison/05d37c97899862cc7895ee0e	View submission.	f	2014-05-09 00:47:38	2014-05-09 00:47:38
14	19	Your exercise strain in ruby has gone into hibernation.	/madison/a25c9e4dc0e0713960bbf454	View submission.	f	2014-05-20 05:17:34	2014-05-20 05:17:34
15	19	Your exercise bob in coffeescript has gone into hibernation.	/madison/50cfb79cc418ba5073e7edf3	View submission.	f	2014-05-12 02:14:21	2014-05-12 02:14:21
16	24	Your exercise bob in ruby has gone into hibernation.	/mildred/bec1cb9cdf259f2e824ba450	View submission.	f	2014-05-25 15:20:53	2014-05-25 15:20:53
17	24	Your exercise word-count in ruby has gone into hibernation.	/mildred/bce907f47b052fc061a9f48f	View submission.	f	2014-05-18 22:17:14	2014-05-18 22:17:14
18	24	Your exercise bob in clojure has gone into hibernation.	/mildred/ce7b98f0a48da55eb3742b08	View submission.	f	2014-05-04 18:41:05	2014-05-04 18:41:05
19	24	Your exercise word-count in clojure has gone into hibernation.	/mildred/19f13f107c42d29454d45795	View submission.	f	2014-05-22 16:16:45	2014-05-22 16:16:45
20	23	Your exercise rna-transcription in haskell has gone into hibernation.	/mike/a8403dc93c47bd2f4621c7d3	View submission.	f	2014-03-19 18:43:11	2014-03-19 18:43:11
21	23	Your exercise anagram in ruby has gone into hibernation.	/mike/1d1eb4f73cb76da8d59cb9d8	View submission.	f	2014-05-15 10:08:33	2014-05-15 10:08:33
22	23	Your exercise word-count in haskell has gone into hibernation.	/mike/2e4ec6ba379b6e7b1fe23347	View submission.	f	2014-04-12 09:03:56	2014-04-12 09:03:56
23	23	Your exercise scrabble-score in ruby has gone into hibernation.	/mike/fa4560579a47ea982b135160	View submission.	f	2014-04-22 12:50:23	2014-04-22 12:50:23
24	25	Your exercise robot-name in python has gone into hibernation.	/mitchell/4391b748a6887f03fc92fce5	View submission.	f	2014-02-28 21:02:25	2014-02-28 21:02:25
25	25	Your exercise nucleotide-count in ruby has gone into hibernation.	/mitchell/3f414dab578ea45773095538	View submission.	f	2014-04-06 21:24:38	2014-04-06 21:24:38
26	25	Your exercise word-count in ruby has gone into hibernation.	/mitchell/f34863e8867d84916551c294	View submission.	f	2014-05-08 12:40:27	2014-05-08 12:40:27
27	20	Your exercise bob in ruby has gone into hibernation.	/marshall/cafd7594e5b8ff0ab01ab71e	View submission.	f	2014-05-25 12:30:32	2014-05-25 12:30:32
28	20	Your exercise raindrops in ruby has gone into hibernation.	/marshall/7260b40eea760b92955aa234	View submission.	f	2014-05-18 23:57:38	2014-05-18 23:57:38
29	20	Your exercise nucleotide-count in ruby has gone into hibernation.	/marshall/a668eeee0a8cc9a43b7a575d	View submission.	f	2014-05-22 14:02:02	2014-05-22 14:02:02
30	5	Your exercise bob in ruby has gone into hibernation.	/amelie/a35380b32441322d9370a361	View submission.	f	2014-05-21 03:49:45	2014-05-21 03:49:45
31	5	Your exercise word-count in ruby has gone into hibernation.	/amelie/3afb96b6283755d406f30a85	View submission.	f	2014-04-02 19:24:49	2014-04-02 19:24:49
32	5	Your exercise word-count in elixir has gone into hibernation.	/amelie/533a9d8a68a020555f428911	View submission.	f	2014-03-20 01:20:53	2014-03-20 01:20:53
33	6	Your exercise leap in ruby has gone into hibernation.	/beth/e3372fd411a6f38a9843076c	View submission.	f	2014-04-06 17:27:17	2014-04-06 17:27:17
34	6	Your exercise grains in ruby has gone into hibernation.	/beth/9dc361de8b0d06e544481c55	View submission.	f	2014-04-09 08:40:29	2014-04-09 08:40:29
35	6	Your exercise strain in ruby has gone into hibernation.	/beth/dc3afed2ed0feb8ec974bf31	View submission.	f	2014-01-19 08:01:40	2014-01-19 08:01:40
36	6	Your exercise trinary in coffeescript has gone into hibernation.	/beth/0e587a2e976db1647cee0bbd	View submission.	f	2014-04-07 12:31:02	2014-04-07 12:31:02
37	8	Your exercise word-count in haskell has gone into hibernation.	/claire/74a0737cc4f95818b9b9f4d3	View submission.	f	2014-05-20 17:39:11	2014-05-20 17:39:11
38	8	Your exercise leap in haskell has gone into hibernation.	/claire/24ea338dc010a28a93058c7f	View submission.	f	2014-05-23 06:48:48	2014-05-23 06:48:48
39	8	Your exercise raindrops in ruby has gone into hibernation.	/claire/3542b72af963a4e10aeb8953	View submission.	f	2014-05-24 03:49:12	2014-05-24 03:49:12
40	9	Your exercise bob in elixir has gone into hibernation.	/dawson/e592b612c9600d6a614e94f2	View submission.	f	2014-03-03 14:57:22	2014-03-03 14:57:22
41	10	Your exercise bob in haskell has gone into hibernation.	/elisa/327343a12d1f01f64f13a555	View submission.	f	2014-02-20 06:45:51	2014-02-20 06:45:51
42	11	Your exercise secret-handshake in haskell has gone into hibernation.	/frederique/b4831d51c1d2a954bedbfd2e	View submission.	f	2014-03-29 01:39:18	2014-03-29 01:39:18
43	11	Your exercise hamming in ruby has gone into hibernation.	/frederique/04f1978fa25d6cf52e7ce040	View submission.	f	2014-05-22 20:27:35	2014-05-22 20:27:35
44	11	Your exercise beer-song in ruby has gone into hibernation.	/frederique/e7d83836cde6cc83815c84eb	View submission.	f	2014-04-27 06:49:23	2014-04-27 06:49:23
45	12	Your exercise leap in ruby has gone into hibernation.	/grace/b50898eb64d53d9f8f3358f6	View submission.	f	2014-01-15 15:07:13	2014-01-15 15:07:13
46	13	Your exercise raindrops in ruby has gone into hibernation.	/haley/9571b7b0a5cf82ca713e6a91	View submission.	f	2014-04-23 11:08:53	2014-04-23 11:08:53
47	14	Your exercise bob in ruby has gone into hibernation.	/isaac/9e0d84cfcc4363bcc3fe8ee8	View submission.	f	2014-02-03 03:52:37	2014-02-03 03:52:37
48	14	Your exercise scala in scala has gone into hibernation.	/isaac/ed9c66e4a0895e9416dc6a55	View submission.	f	2014-03-12 05:23:45	2014-03-12 05:23:45
49	14	Your exercise bob in haskell has gone into hibernation.	/isaac/c95fa046ecfc795f0ce1b912	View submission.	f	2014-05-26 21:35:44	2014-05-26 21:35:44
50	15	Your exercise anagram in python has gone into hibernation.	/jarrod/6f5a0f0aedd8ce0ff639cbd4	View submission.	f	2014-05-08 19:07:21	2014-05-08 19:07:21
51	16	Your exercise leap in ruby has gone into hibernation.	/kieran/f9abb96bdbe722bacb548b76	View submission.	f	2014-05-24 16:52:41	2014-05-24 16:52:41
52	17	Your exercise hamming in ruby has gone into hibernation.	/lisa/73b558300bbcd60275031d8a	View submission.	f	2014-04-21 21:13:52	2014-04-21 21:13:52
53	17	Your exercise anagram in haskell has gone into hibernation.	/lisa/12ec745159b75269338ccef2	View submission.	f	2014-05-08 13:18:53	2014-05-08 13:18:53
54	22	Your exercise bob in python has gone into hibernation.	/mia/d7709c3de0973867fddd10a6	View submission.	f	2014-05-22 09:44:33	2014-05-22 09:44:33
55	22	Your exercise bob in elixir has gone into hibernation.	/mia/7dc08f0d0824dbf99311365a	View submission.	f	2014-05-19 20:52:35	2014-05-19 20:52:35
56	27	Your exercise bob in clojure has gone into hibernation.	/norma/e857b7937c016e82d7826325	View submission.	f	2014-05-10 16:24:06	2014-05-10 16:24:06
57	28	Your exercise meetup in haskell has gone into hibernation.	/opal/91f9a2093b4b79dc88f05d42	View submission.	f	2014-04-24 18:45:29	2014-04-24 18:45:29
58	28	Your exercise anagram in haskell has gone into hibernation.	/opal/2be45e9c110874da3f15b10f	View submission.	f	2014-04-22 05:25:22	2014-04-22 05:25:22
59	28	Your exercise beer-song in ruby has gone into hibernation.	/opal/e7d83836cde6cc83815c84eb	View submission.	f	2014-05-25 15:51:55	2014-05-25 15:51:55
60	28	Your exercise word-count in javascript has gone into hibernation.	/opal/cf8f0251e1a1b3e0494e59d5	View submission.	f	2014-04-15 14:49:52	2014-04-15 14:49:52
61	30	Your exercise word-count in javascript has gone into hibernation.	/quentin/a9d9a580638294b4e70fab70	View submission.	f	2014-05-25 22:39:53	2014-05-25 22:39:53
62	30	Your exercise phone-number in haskell has gone into hibernation.	/quentin/2e3ab1c2cd6525e2b242354d	View submission.	f	2014-05-21 14:50:10	2014-05-21 14:50:10
63	30	Your exercise word-count in ruby has gone into hibernation.	/quentin/db40c9b7eecac27da6a5e8ad	View submission.	f	2014-05-24 09:15:22	2014-05-24 09:15:22
64	37	Your exercise bob in ruby has gone into hibernation.	/ruben/f74d15c899fd53e51c8a917f	View submission.	f	2014-05-18 23:14:02	2014-05-18 23:14:02
65	41	Your exercise etl in ruby has gone into hibernation.	/shaina/39bae45a2e7fd47ffabc297c	View submission.	f	2014-05-17 14:54:42	2014-05-17 14:54:42
66	42	Your exercise anagram in javascript has gone into hibernation.	/talia/d1aa9a28b241e37c86013f10	View submission.	f	2014-05-23 14:28:26	2014-05-23 14:28:26
67	42	Your exercise bob in javascript has gone into hibernation.	/talia/6ced84573d51fe82fdfe2073	View submission.	f	2014-02-16 19:29:36	2014-02-16 19:29:36
68	42	Your exercise rna-transcription in python has gone into hibernation.	/talia/f08e9b71d043a6ab98ab6ab1	View submission.	f	2014-05-13 10:14:58	2014-05-13 10:14:58
69	43	Your exercise bob in ruby has gone into hibernation.	/ursula/d3fa16e7075be73f2f56f464	View submission.	f	2014-03-01 16:25:08	2014-03-01 16:25:08
70	44	Your exercise meetup in clojure has gone into hibernation.	/vince/f5f4c9458f1021eb4908b875	View submission.	f	2014-02-24 06:14:06	2014-02-24 06:14:06
71	44	Your exercise rna-transcription in python has gone into hibernation.	/vince/76eb13e2cf155d5b7d70d3b6	View submission.	f	2014-04-23 06:03:12	2014-04-23 06:03:12
72	45	Your exercise anagram in ruby has gone into hibernation.	/wilson/6c049dac5134365bf0ea6403	View submission.	f	2014-03-19 04:52:41	2014-03-19 04:52:41
73	45	Your exercise bob in python has gone into hibernation.	/wilson/6b1aa2d2a2811da5419db62a	View submission.	f	2014-04-02 23:04:04	2014-04-02 23:04:04
74	46	Your exercise hamming in ruby has gone into hibernation.	/xavier/c8670c1134db9387e37bfff5	View submission.	f	2014-02-28 19:39:30	2014-02-28 19:39:30
75	46	Your exercise point-mutations in javascript has gone into hibernation.	/xavier/3cbb2e2058f51d14bd9314b7	View submission.	f	2014-03-18 20:53:41	2014-03-18 20:53:41
76	47	Your exercise bob in python has gone into hibernation.	/yvette/55dd59488d0a70b5b5b263bf	View submission.	f	2014-05-08 22:22:05	2014-05-08 22:22:05
77	47	Your exercise point-mutations in clojure has gone into hibernation.	/yvette/757be4de672d165bc14e3bd2	View submission.	f	2014-05-26 16:40:35	2014-05-26 16:40:35
78	39	Your exercise word-count in ruby has gone into hibernation.	/russ/afc765eb4e0856cf74518826	View submission.	f	2014-04-26 04:09:32	2014-04-26 04:09:32
79	39	Your exercise leap in ruby has gone into hibernation.	/russ/0a695467a0729498a37bc7e2	View submission.	f	2014-05-23 15:09:15	2014-05-23 15:09:15
80	39	Your exercise bob in ruby has gone into hibernation.	/russ/77f0a9c7f80d2695964c1ae8	View submission.	f	2014-05-13 13:24:06	2014-05-13 13:24:06
81	34	Your exercise word-count in ruby has gone into hibernation.	/rita/d3e56e98ae5dfa506acd15e0	View submission.	f	2014-03-28 22:39:37	2014-03-28 22:39:37
82	34	Your exercise grains in ruby has gone into hibernation.	/rita/63ad65c55e3b71a25eecb26e	View submission.	f	2014-02-16 14:03:07	2014-02-16 14:03:07
83	36	Your exercise roman-numerals in ruby has gone into hibernation.	/rolf/ba43c581ca82edcdcef3cf37	View submission.	f	2014-01-28 23:36:26	2014-01-28 23:36:26
84	36	Your exercise grains in ruby has gone into hibernation.	/rolf/a417fdee692694cf07225ee1	View submission.	f	2014-05-16 09:52:56	2014-05-16 09:52:56
85	32	Your exercise bob in ruby has gone into hibernation.	/randall/e5b6339db7ad588032f99b6e	View submission.	f	2014-03-31 05:20:16	2014-03-31 05:20:16
86	32	Your exercise hamming in ruby has gone into hibernation.	/randall/73b558300bbcd60275031d8a	View submission.	f	2014-05-02 23:51:46	2014-05-02 23:51:46
87	33	Your exercise proverb in ruby has gone into hibernation.	/rick/26998315dbcb4a314f8ccfed	View submission.	f	2014-05-23 01:05:25	2014-05-23 01:05:25
88	15	jarrod would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-02-26 16:43:13	2014-02-26 16:43:13
89	16	kieran would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-16 21:54:19	2014-03-16 21:54:19
90	28	opal would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-30 05:57:35	2014-03-30 05:57:35
91	31	rachel would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-09 08:49:38	2014-03-09 08:49:38
92	37	ruben would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-04-06 00:25:23	2014-04-06 00:25:23
93	41	shaina would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-05-13 08:16:55	2014-05-13 08:16:55
94	42	talia would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-02-22 05:08:15	2014-02-22 05:08:15
95	46	xavier would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2013-12-20 12:30:04	2013-12-20 12:30:04
96	18	mack would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-03-10 14:32:12	2014-03-10 14:32:12
97	37	ruben would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-02-10 06:35:26	2014-02-10 06:35:26
98	37	ruben would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-03-01 01:36:57	2014-03-01 01:36:57
99	7	bob would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2013-12-18 18:09:30	2013-12-18 18:09:30
100	37	ruben would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2013-10-30 07:57:23	2013-10-30 07:57:23
101	11	frederique would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-03-16 03:53:18	2014-03-16 03:53:18
102	13	haley would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-05-06 03:17:07	2014-05-06 03:17:07
103	40	ryan would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-03-09 07:26:04	2014-03-09 07:26:04
104	37	ruben would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2013-12-22 03:00:59	2013-12-22 03:00:59
105	7	bob would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-01-19 01:18:55	2014-01-19 01:18:55
106	37	ruben would like you to join the team polkadots. You can accept the invitation	/account	on your account page.	f	2013-11-06 17:00:18	2013-11-06 17:00:18
\.


--
-- Name: alerts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('alerts_id_seq', 106, true);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comments (id, user_id, submission_id, body, html_body, created_at, updated_at) FROM stdin;
1	2	1	NO COMMENT	\N	2014-05-23 08:17:00	2014-05-23 08:17:00
2	2	3	NO COMMENT	\N	2014-04-25 10:33:00	2014-04-25 10:33:00
3	1	3	NO COMMENT	\N	2014-04-26 05:09:42	2014-04-26 05:09:42
4	2	4	NO COMMENT	\N	2014-03-20 10:08:03	2014-03-20 10:08:03
5	1	4	NO COMMENT	\N	2014-05-17 03:53:14	2014-05-17 03:53:14
6	1	5	NO COMMENT	\N	2014-05-06 05:02:36	2014-05-06 05:02:36
7	2	5	NO COMMENT	\N	2014-05-19 03:31:14	2014-05-19 03:31:14
8	2	6	NO COMMENT	\N	2014-01-16 13:33:17	2014-01-16 13:33:17
9	1	6	NO COMMENT	\N	2014-03-12 23:27:32	2014-03-12 23:27:32
10	2	7	NO COMMENT	\N	2013-12-05 21:44:26	2013-12-05 21:44:26
11	1	7	NO COMMENT	\N	2013-12-19 10:01:05	2013-12-19 10:01:05
12	2	8	NO COMMENT	\N	2014-01-01 19:14:53	2014-01-01 19:14:53
13	1	9	NO COMMENT	\N	2014-02-04 17:33:19	2014-02-04 17:33:19
14	2	9	NO COMMENT	\N	2014-05-03 00:38:57	2014-05-03 00:38:57
15	35	9	NO COMMENT	\N	2014-05-14 09:13:06	2014-05-14 09:13:06
16	1	10	NO COMMENT	\N	2014-02-21 17:23:27	2014-02-21 17:23:27
17	2	10	NO COMMENT	\N	2014-05-16 23:59:10	2014-05-16 23:59:10
18	1	11	NO COMMENT	\N	2014-04-19 10:03:35	2014-04-19 10:03:35
19	35	11	NO COMMENT	\N	2014-04-20 16:33:12	2014-04-20 16:33:12
20	2	11	NO COMMENT	\N	2014-04-30 09:06:53	2014-04-30 09:06:53
21	2	12	NO COMMENT	\N	2014-01-10 16:20:05	2014-01-10 16:20:05
22	1	12	NO COMMENT	\N	2014-02-03 18:47:28	2014-02-03 18:47:28
23	1	20	NO COMMENT	\N	2014-04-05 10:49:12	2014-04-05 10:49:12
24	4	20	NO COMMENT	\N	2014-04-20 14:38:48	2014-04-20 14:38:48
25	2	20	NO COMMENT	\N	2014-04-23 15:41:41	2014-04-23 15:41:41
26	13	20	NO COMMENT	\N	2014-05-16 18:03:55	2014-05-16 18:03:55
27	2	1527	NO COMMENT	\N	2014-03-11 08:40:16	2014-03-11 08:40:16
28	16	1527	NO COMMENT	\N	2014-04-22 19:22:16	2014-04-22 19:22:16
29	35	1527	NO COMMENT	\N	2014-05-22 09:29:49	2014-05-22 09:29:49
30	1	13	NO COMMENT	\N	2014-03-14 18:10:59	2014-03-14 18:10:59
31	2	13	NO COMMENT	\N	2014-05-13 13:47:44	2014-05-13 13:47:44
32	2	14	NO COMMENT	\N	2014-01-23 12:23:00	2014-01-23 12:23:00
33	1	14	NO COMMENT	\N	2014-05-22 21:57:27	2014-05-22 21:57:27
34	2	17	NO COMMENT	\N	2014-01-25 02:17:52	2014-01-25 02:17:52
35	1	17	NO COMMENT	\N	2014-02-25 10:49:45	2014-02-25 10:49:45
36	2	18	NO COMMENT	\N	2013-12-13 11:13:22	2013-12-13 11:13:22
37	1	18	NO COMMENT	\N	2014-03-27 15:39:38	2014-03-27 15:39:38
38	2	19	NO COMMENT	\N	2014-04-03 20:34:40	2014-04-03 20:34:40
39	13	19	NO COMMENT	\N	2014-04-09 22:09:57	2014-04-09 22:09:57
40	4	19	NO COMMENT	\N	2014-04-17 16:39:11	2014-04-17 16:39:11
41	46	19	NO COMMENT	\N	2014-04-24 17:07:23	2014-04-24 17:07:23
42	1	19	NO COMMENT	\N	2014-04-30 17:01:59	2014-04-30 17:01:59
43	1	21	NO COMMENT	\N	2013-10-19 08:19:57	2013-10-19 08:19:57
44	1	22	NO COMMENT	\N	2014-04-14 04:29:47	2014-04-14 04:29:47
45	2	22	NO COMMENT	\N	2014-05-04 12:12:00	2014-05-04 12:12:00
46	1	24	NO COMMENT	\N	2014-03-24 12:55:55	2014-03-24 12:55:55
47	2	24	NO COMMENT	\N	2014-05-22 17:48:18	2014-05-22 17:48:18
48	2	25	NO COMMENT	\N	2014-03-01 09:23:25	2014-03-01 09:23:25
49	1	25	NO COMMENT	\N	2014-04-10 12:19:05	2014-04-10 12:19:05
50	1	26	NO COMMENT	\N	2014-04-21 06:18:08	2014-04-21 06:18:08
51	2	26	NO COMMENT	\N	2014-05-06 20:10:27	2014-05-06 20:10:27
52	1	27	NO COMMENT	\N	2014-04-19 09:39:32	2014-04-19 09:39:32
53	2	27	NO COMMENT	\N	2014-05-04 23:20:37	2014-05-04 23:20:37
54	1	28	NO COMMENT	\N	2014-04-06 10:56:02	2014-04-06 10:56:02
55	2	28	NO COMMENT	\N	2014-04-30 14:14:17	2014-04-30 14:14:17
56	2	29	NO COMMENT	\N	2014-05-14 23:31:20	2014-05-14 23:31:20
57	1	30	NO COMMENT	\N	2013-12-27 23:29:06	2013-12-27 23:29:06
58	2	30	NO COMMENT	\N	2014-01-29 16:12:52	2014-01-29 16:12:52
59	2	31	NO COMMENT	\N	2014-04-14 04:19:57	2014-04-14 04:19:57
60	45	31	NO COMMENT	\N	2014-04-17 09:36:45	2014-04-17 09:36:45
61	2	42	NO COMMENT	\N	2013-11-03 18:13:58	2013-11-03 18:13:58
62	1	42	NO COMMENT	\N	2014-04-06 11:52:16	2014-04-06 11:52:16
63	2	1528	NO COMMENT	\N	2014-05-05 15:03:01	2014-05-05 15:03:01
64	16	1528	NO COMMENT	\N	2014-05-08 16:58:52	2014-05-08 16:58:52
65	6	1528	NO COMMENT	\N	2014-05-14 18:22:09	2014-05-14 18:22:09
66	35	1528	NO COMMENT	\N	2014-05-14 20:17:52	2014-05-14 20:17:52
67	29	1528	NO COMMENT	\N	2014-05-19 11:57:00	2014-05-19 11:57:00
68	7	1528	NO COMMENT	\N	2014-05-20 06:38:16	2014-05-20 06:38:16
69	1	32	NO COMMENT	\N	2014-02-13 02:51:39	2014-02-13 02:51:39
70	2	32	NO COMMENT	\N	2014-05-13 10:55:47	2014-05-13 10:55:47
71	2	33	NO COMMENT	\N	2014-02-07 03:20:22	2014-02-07 03:20:22
72	1	33	NO COMMENT	\N	2014-04-22 10:47:55	2014-04-22 10:47:55
73	1	34	NO COMMENT	\N	2014-01-29 16:29:03	2014-01-29 16:29:03
74	2	34	NO COMMENT	\N	2014-05-26 08:09:40	2014-05-26 08:09:40
75	1	36	NO COMMENT	\N	2014-02-01 01:31:45	2014-02-01 01:31:45
76	16	36	NO COMMENT	\N	2014-04-05 06:50:06	2014-04-05 06:50:06
77	16	37	NO COMMENT	\N	2014-02-08 01:18:54	2014-02-08 01:18:54
78	1	37	NO COMMENT	\N	2014-02-18 18:54:05	2014-02-18 18:54:05
79	2	37	NO COMMENT	\N	2014-04-05 10:08:35	2014-04-05 10:08:35
80	2	39	NO COMMENT	\N	2014-02-22 07:34:44	2014-02-22 07:34:44
81	35	39	NO COMMENT	\N	2014-03-01 08:23:24	2014-03-01 08:23:24
82	16	39	NO COMMENT	\N	2014-03-02 19:45:56	2014-03-02 19:45:56
83	1	39	NO COMMENT	\N	2014-05-17 02:53:48	2014-05-17 02:53:48
84	2	40	NO COMMENT	\N	2014-03-21 12:49:19	2014-03-21 12:49:19
85	1	40	NO COMMENT	\N	2014-04-23 16:29:09	2014-04-23 16:29:09
86	1	41	NO COMMENT	\N	2014-03-17 12:14:39	2014-03-17 12:14:39
87	2	44	NO COMMENT	\N	2013-11-25 17:29:00	2013-11-25 17:29:00
88	1	44	NO COMMENT	\N	2013-12-18 07:14:19	2013-12-18 07:14:19
89	1	45	NO COMMENT	\N	2013-11-27 09:59:41	2013-11-27 09:59:41
90	1	46	NO COMMENT	\N	2014-01-04 10:23:47	2014-01-04 10:23:47
91	2	46	NO COMMENT	\N	2014-03-05 02:02:44	2014-03-05 02:02:44
92	14	47	NO COMMENT	\N	2014-04-12 01:07:20	2014-04-12 01:07:20
93	1	47	NO COMMENT	\N	2014-04-12 05:48:16	2014-04-12 05:48:16
94	2	47	NO COMMENT	\N	2014-04-26 19:03:59	2014-04-26 19:03:59
95	48	47	NO COMMENT	\N	2014-04-30 20:09:24	2014-04-30 20:09:24
96	1	48	NO COMMENT	\N	2014-03-06 04:48:02	2014-03-06 04:48:02
97	2	48	NO COMMENT	\N	2014-04-22 14:09:08	2014-04-22 14:09:08
98	2	49	NO COMMENT	\N	2014-04-24 21:31:43	2014-04-24 21:31:43
99	1	49	NO COMMENT	\N	2014-05-26 13:48:25	2014-05-26 13:48:25
100	2	50	NO COMMENT	\N	2014-01-11 13:04:13	2014-01-11 13:04:13
101	1	50	NO COMMENT	\N	2014-02-17 08:54:54	2014-02-17 08:54:54
102	2	51	NO COMMENT	\N	2014-02-22 03:40:18	2014-02-22 03:40:18
103	1	51	NO COMMENT	\N	2014-04-04 13:13:21	2014-04-04 13:13:21
104	2	65	NO COMMENT	\N	2014-02-22 13:14:55	2014-02-22 13:14:55
105	1	65	NO COMMENT	\N	2014-04-02 00:33:42	2014-04-02 00:33:42
106	2	52	NO COMMENT	\N	2013-10-24 01:30:59	2013-10-24 01:30:59
107	1	52	NO COMMENT	\N	2014-03-13 19:04:34	2014-03-13 19:04:34
108	2	54	NO COMMENT	\N	2014-03-04 21:33:14	2014-03-04 21:33:14
109	1	54	NO COMMENT	\N	2014-05-24 20:39:14	2014-05-24 20:39:14
110	2	55	NO COMMENT	\N	2014-03-04 17:54:18	2014-03-04 17:54:18
111	1	55	NO COMMENT	\N	2014-03-21 06:01:36	2014-03-21 06:01:36
112	1	56	NO COMMENT	\N	2014-03-10 06:04:14	2014-03-10 06:04:14
113	2	56	NO COMMENT	\N	2014-05-05 10:52:01	2014-05-05 10:52:01
114	2	57	NO COMMENT	\N	2013-12-24 20:41:26	2013-12-24 20:41:26
115	1	58	NO COMMENT	\N	2014-04-16 15:52:28	2014-04-16 15:52:28
116	2	58	NO COMMENT	\N	2014-05-15 09:23:42	2014-05-15 09:23:42
117	1	59	NO COMMENT	\N	2014-02-12 10:18:01	2014-02-12 10:18:01
118	2	59	NO COMMENT	\N	2014-05-05 09:29:52	2014-05-05 09:29:52
119	2	60	NO COMMENT	\N	2013-11-24 16:48:11	2013-11-24 16:48:11
120	1	60	NO COMMENT	\N	2013-12-30 08:33:48	2013-12-30 08:33:48
121	2	61	NO COMMENT	\N	2013-11-05 18:06:38	2013-11-05 18:06:38
122	1	61	NO COMMENT	\N	2014-03-15 13:01:37	2014-03-15 13:01:37
123	2	62	NO COMMENT	\N	2014-04-09 16:30:16	2014-04-09 16:30:16
124	1	62	NO COMMENT	\N	2014-04-17 19:36:22	2014-04-17 19:36:22
125	1	63	NO COMMENT	\N	2014-02-13 02:18:48	2014-02-13 02:18:48
126	2	63	NO COMMENT	\N	2014-04-16 14:09:15	2014-04-16 14:09:15
127	1	66	NO COMMENT	\N	2014-03-15 23:12:00	2014-03-15 23:12:00
128	43	68	NO COMMENT	\N	2014-04-06 17:27:15	2014-04-06 17:27:15
129	1	68	NO COMMENT	\N	2014-04-20 02:08:09	2014-04-20 02:08:09
130	2	68	NO COMMENT	\N	2014-04-20 02:59:24	2014-04-20 02:59:24
131	1	69	NO COMMENT	\N	2014-02-03 08:52:36	2014-02-03 08:52:36
132	2	69	NO COMMENT	\N	2014-05-16 10:10:41	2014-05-16 10:10:41
133	1	70	NO COMMENT	\N	2013-12-10 04:18:01	2013-12-10 04:18:01
134	2	70	NO COMMENT	\N	2013-12-14 15:55:34	2013-12-14 15:55:34
135	1	71	NO COMMENT	\N	2013-11-09 03:01:26	2013-11-09 03:01:26
136	2	71	NO COMMENT	\N	2014-01-11 03:28:01	2014-01-11 03:28:01
137	2	72	NO COMMENT	\N	2014-04-01 03:21:46	2014-04-01 03:21:46
138	1	72	NO COMMENT	\N	2014-04-03 06:15:46	2014-04-03 06:15:46
139	1	74	NO COMMENT	\N	2014-03-23 12:23:31	2014-03-23 12:23:31
140	2	74	NO COMMENT	\N	2014-04-13 22:46:52	2014-04-13 22:46:52
141	2	75	NO COMMENT	\N	2013-11-04 16:31:05	2013-11-04 16:31:05
142	1	75	NO COMMENT	\N	2014-02-20 16:49:43	2014-02-20 16:49:43
143	1	76	NO COMMENT	\N	2013-12-04 03:52:32	2013-12-04 03:52:32
144	1	78	NO COMMENT	\N	2014-05-18 02:54:49	2014-05-18 02:54:49
145	2	78	NO COMMENT	\N	2014-05-25 10:43:45	2014-05-25 10:43:45
146	2	79	NO COMMENT	\N	2014-02-03 10:38:31	2014-02-03 10:38:31
147	1	79	NO COMMENT	\N	2014-04-29 12:15:23	2014-04-29 12:15:23
148	2	80	NO COMMENT	\N	2014-05-25 01:24:37	2014-05-25 01:24:37
149	2	81	NO COMMENT	\N	2014-01-23 15:46:04	2014-01-23 15:46:04
150	1	81	NO COMMENT	\N	2014-03-10 00:11:13	2014-03-10 00:11:13
151	1	82	NO COMMENT	\N	2013-12-19 12:21:10	2013-12-19 12:21:10
152	2	82	NO COMMENT	\N	2014-01-10 05:58:40	2014-01-10 05:58:40
153	1	83	NO COMMENT	\N	2014-02-16 10:23:45	2014-02-16 10:23:45
154	2	83	NO COMMENT	\N	2014-03-02 09:38:14	2014-03-02 09:38:14
155	1	84	NO COMMENT	\N	2013-10-09 12:28:38	2013-10-09 12:28:38
156	2	84	NO COMMENT	\N	2014-04-04 21:41:31	2014-04-04 21:41:31
157	1	85	NO COMMENT	\N	2014-05-20 13:29:37	2014-05-20 13:29:37
158	2	85	NO COMMENT	\N	2014-05-24 05:14:11	2014-05-24 05:14:11
159	48	86	NO COMMENT	\N	2014-01-20 13:54:58	2014-01-20 13:54:58
160	2	88	NO COMMENT	\N	2014-01-15 11:21:14	2014-01-15 11:21:14
161	1	88	NO COMMENT	\N	2014-01-19 03:08:43	2014-01-19 03:08:43
162	1	89	NO COMMENT	\N	2013-10-26 03:06:44	2013-10-26 03:06:44
163	2	89	NO COMMENT	\N	2014-05-21 13:54:37	2014-05-21 13:54:37
164	1	90	NO COMMENT	\N	2013-12-07 15:37:29	2013-12-07 15:37:29
165	2	90	NO COMMENT	\N	2014-04-13 20:57:55	2014-04-13 20:57:55
166	2	91	NO COMMENT	\N	2014-04-04 10:20:03	2014-04-04 10:20:03
167	1	91	NO COMMENT	\N	2014-04-16 21:13:34	2014-04-16 21:13:34
168	1	92	NO COMMENT	\N	2013-11-09 06:08:14	2013-11-09 06:08:14
169	2	92	NO COMMENT	\N	2013-11-24 09:21:19	2013-11-24 09:21:19
170	2	93	NO COMMENT	\N	2014-02-26 07:23:43	2014-02-26 07:23:43
171	1	93	NO COMMENT	\N	2014-04-19 07:08:51	2014-04-19 07:08:51
172	2	95	NO COMMENT	\N	2014-02-13 06:10:50	2014-02-13 06:10:50
173	1	95	NO COMMENT	\N	2014-03-31 02:20:04	2014-03-31 02:20:04
174	21	96	NO COMMENT	\N	2014-05-15 09:47:32	2014-05-15 09:47:32
175	2	97	NO COMMENT	\N	2014-04-15 01:57:53	2014-04-15 01:57:53
176	1	97	NO COMMENT	\N	2014-04-22 11:05:56	2014-04-22 11:05:56
177	21	97	NO COMMENT	\N	2014-04-26 11:10:22	2014-04-26 11:10:22
178	1	98	NO COMMENT	\N	2014-04-05 07:50:00	2014-04-05 07:50:00
179	21	98	NO COMMENT	\N	2014-04-23 06:23:16	2014-04-23 06:23:16
180	2	100	NO COMMENT	\N	2013-10-17 00:44:40	2013-10-17 00:44:40
181	1	100	NO COMMENT	\N	2014-01-08 05:19:01	2014-01-08 05:19:01
182	1	102	NO COMMENT	\N	2014-05-01 00:06:37	2014-05-01 00:06:37
183	2	102	NO COMMENT	\N	2014-05-17 17:49:48	2014-05-17 17:49:48
184	2	117	NO COMMENT	\N	2014-04-14 17:32:47	2014-04-14 17:32:47
185	1	117	NO COMMENT	\N	2014-05-15 12:02:33	2014-05-15 12:02:33
186	1	435	NO COMMENT	\N	2014-04-24 09:54:56	2014-04-24 09:54:56
187	29	435	NO COMMENT	\N	2014-04-25 22:14:31	2014-04-25 22:14:31
188	7	435	NO COMMENT	\N	2014-05-04 14:28:25	2014-05-04 14:28:25
189	14	435	NO COMMENT	\N	2014-05-16 08:58:10	2014-05-16 08:58:10
190	12	435	NO COMMENT	\N	2014-05-26 04:18:14	2014-05-26 04:18:14
191	1	105	NO COMMENT	\N	2014-04-24 18:56:19	2014-04-24 18:56:19
192	2	105	NO COMMENT	\N	2014-05-26 03:36:36	2014-05-26 03:36:36
193	2	106	NO COMMENT	\N	2014-03-16 13:55:19	2014-03-16 13:55:19
194	34	108	NO COMMENT	\N	2014-04-16 22:15:18	2014-04-16 22:15:18
195	2	108	NO COMMENT	\N	2014-04-28 21:20:18	2014-04-28 21:20:18
196	1	108	NO COMMENT	\N	2014-05-26 19:02:52	2014-05-26 19:02:52
197	1	109	NO COMMENT	\N	2014-02-06 12:42:33	2014-02-06 12:42:33
198	2	109	NO COMMENT	\N	2014-03-22 06:29:44	2014-03-22 06:29:44
199	2	110	NO COMMENT	\N	2014-01-14 15:44:09	2014-01-14 15:44:09
200	1	110	NO COMMENT	\N	2014-04-12 03:51:31	2014-04-12 03:51:31
201	2	111	NO COMMENT	\N	2014-01-08 11:22:50	2014-01-08 11:22:50
202	1	111	NO COMMENT	\N	2014-03-26 21:28:58	2014-03-26 21:28:58
203	1	112	NO COMMENT	\N	2014-04-10 23:02:50	2014-04-10 23:02:50
204	2	112	NO COMMENT	\N	2014-04-12 22:00:46	2014-04-12 22:00:46
205	1	113	NO COMMENT	\N	2014-03-27 01:15:49	2014-03-27 01:15:49
206	2	114	NO COMMENT	\N	2014-03-26 16:58:21	2014-03-26 16:58:21
207	1	115	NO COMMENT	\N	2013-12-24 12:56:32	2013-12-24 12:56:32
208	2	115	NO COMMENT	\N	2014-01-04 14:09:50	2014-01-04 14:09:50
209	7	121	NO COMMENT	\N	2014-02-14 22:23:51	2014-02-14 22:23:51
210	16	121	NO COMMENT	\N	2014-05-16 09:46:13	2014-05-16 09:46:13
211	7	122	NO COMMENT	\N	2014-04-13 03:59:27	2014-04-13 03:59:27
212	16	122	NO COMMENT	\N	2014-05-03 17:45:16	2014-05-03 17:45:16
213	21	129	NO COMMENT	\N	2014-05-19 11:27:20	2014-05-19 11:27:20
214	7	132	NO COMMENT	\N	2014-04-11 00:57:07	2014-04-11 00:57:07
215	45	133	NO COMMENT	\N	2014-04-04 09:12:58	2014-04-04 09:12:58
216	7	133	NO COMMENT	\N	2014-05-12 01:36:16	2014-05-12 01:36:16
217	7	136	NO COMMENT	\N	2014-02-18 12:02:46	2014-02-18 12:02:46
218	7	137	NO COMMENT	\N	2014-05-11 17:50:09	2014-05-11 17:50:09
219	7	138	NO COMMENT	\N	2014-04-03 02:11:58	2014-04-03 02:11:58
220	1	236	NO COMMENT	\N	2014-05-12 05:59:47	2014-05-12 05:59:47
221	7	236	NO COMMENT	\N	2014-05-18 11:12:24	2014-05-18 11:12:24
222	18	150	NO COMMENT	\N	2014-03-08 20:50:02	2014-03-08 20:50:02
223	18	152	NO COMMENT	\N	2014-03-31 19:23:30	2014-03-31 19:23:30
224	2	153	NO COMMENT	\N	2014-05-02 23:47:45	2014-05-02 23:47:45
225	7	154	NO COMMENT	\N	2014-05-13 12:36:53	2014-05-13 12:36:53
226	1	154	NO COMMENT	\N	2014-05-14 08:25:50	2014-05-14 08:25:50
227	2	154	NO COMMENT	\N	2014-05-18 05:29:27	2014-05-18 05:29:27
228	2	155	NO COMMENT	\N	2013-11-20 23:50:06	2013-11-20 23:50:06
229	1	155	NO COMMENT	\N	2013-11-27 19:40:51	2013-11-27 19:40:51
230	7	155	NO COMMENT	\N	2014-04-27 13:31:37	2014-04-27 13:31:37
231	1	157	NO COMMENT	\N	2014-02-12 06:24:01	2014-02-12 06:24:01
232	7	157	NO COMMENT	\N	2014-03-02 01:05:54	2014-03-02 01:05:54
233	2	157	NO COMMENT	\N	2014-05-07 09:45:45	2014-05-07 09:45:45
234	7	158	NO COMMENT	\N	2014-03-28 07:27:39	2014-03-28 07:27:39
235	36	158	NO COMMENT	\N	2014-04-05 06:51:40	2014-04-05 06:51:40
236	16	158	NO COMMENT	\N	2014-04-24 12:34:20	2014-04-24 12:34:20
237	16	160	NO COMMENT	\N	2014-01-11 17:31:03	2014-01-11 17:31:03
238	7	160	NO COMMENT	\N	2014-01-25 18:29:48	2014-01-25 18:29:48
239	1	160	NO COMMENT	\N	2014-05-07 22:59:14	2014-05-07 22:59:14
240	2	160	NO COMMENT	\N	2014-05-21 09:39:44	2014-05-21 09:39:44
241	2	161	NO COMMENT	\N	2014-03-09 11:48:39	2014-03-09 11:48:39
242	1	161	NO COMMENT	\N	2014-04-02 06:47:24	2014-04-02 06:47:24
243	7	161	NO COMMENT	\N	2014-04-08 22:47:27	2014-04-08 22:47:27
244	1	162	NO COMMENT	\N	2014-01-07 03:06:46	2014-01-07 03:06:46
245	7	162	NO COMMENT	\N	2014-04-12 15:55:04	2014-04-12 15:55:04
246	2	162	NO COMMENT	\N	2014-05-13 16:11:33	2014-05-13 16:11:33
247	7	164	NO COMMENT	\N	2014-02-09 21:43:11	2014-02-09 21:43:11
248	2	164	NO COMMENT	\N	2014-03-31 10:27:55	2014-03-31 10:27:55
249	1	164	NO COMMENT	\N	2014-05-10 04:41:38	2014-05-10 04:41:38
250	1	165	NO COMMENT	\N	2014-02-02 03:19:14	2014-02-02 03:19:14
251	2	165	NO COMMENT	\N	2014-02-15 03:16:40	2014-02-15 03:16:40
252	48	165	NO COMMENT	\N	2014-03-10 08:53:17	2014-03-10 08:53:17
253	7	165	NO COMMENT	\N	2014-03-26 13:59:28	2014-03-26 13:59:28
254	2	166	NO COMMENT	\N	2014-03-23 16:23:05	2014-03-23 16:23:05
255	7	166	NO COMMENT	\N	2014-04-01 02:53:58	2014-04-01 02:53:58
256	48	166	NO COMMENT	\N	2014-04-20 13:19:03	2014-04-20 13:19:03
257	1	166	NO COMMENT	\N	2014-04-26 00:02:40	2014-04-26 00:02:40
258	9	166	NO COMMENT	\N	2014-05-22 13:26:18	2014-05-22 13:26:18
259	7	168	NO COMMENT	\N	2013-11-27 13:07:30	2013-11-27 13:07:30
260	2	168	NO COMMENT	\N	2013-12-08 19:33:51	2013-12-08 19:33:51
261	1	168	NO COMMENT	\N	2014-05-07 22:03:13	2014-05-07 22:03:13
262	1	169	NO COMMENT	\N	2014-03-25 20:44:33	2014-03-25 20:44:33
263	2	169	NO COMMENT	\N	2014-05-15 03:12:17	2014-05-15 03:12:17
264	12	170	NO COMMENT	\N	2014-01-19 21:22:32	2014-01-19 21:22:32
265	1	170	NO COMMENT	\N	2014-01-27 01:48:50	2014-01-27 01:48:50
266	7	170	NO COMMENT	\N	2014-03-16 19:54:15	2014-03-16 19:54:15
267	2	170	NO COMMENT	\N	2014-04-17 13:49:40	2014-04-17 13:49:40
268	1	171	NO COMMENT	\N	2014-01-25 03:03:41	2014-01-25 03:03:41
269	7	171	NO COMMENT	\N	2014-02-16 23:57:25	2014-02-16 23:57:25
270	2	171	NO COMMENT	\N	2014-03-14 06:47:34	2014-03-14 06:47:34
271	7	172	NO COMMENT	\N	2014-04-23 04:44:47	2014-04-23 04:44:47
272	2	172	NO COMMENT	\N	2014-05-02 04:24:02	2014-05-02 04:24:02
273	1	172	NO COMMENT	\N	2014-05-06 01:20:09	2014-05-06 01:20:09
274	2	173	NO COMMENT	\N	2014-04-26 07:29:03	2014-04-26 07:29:03
275	7	173	NO COMMENT	\N	2014-05-11 23:48:26	2014-05-11 23:48:26
276	1	173	NO COMMENT	\N	2014-05-19 18:42:44	2014-05-19 18:42:44
277	1	174	NO COMMENT	\N	2014-02-18 03:13:25	2014-02-18 03:13:25
278	2	174	NO COMMENT	\N	2014-02-18 21:52:38	2014-02-18 21:52:38
279	7	174	NO COMMENT	\N	2014-04-04 04:06:47	2014-04-04 04:06:47
280	1	175	NO COMMENT	\N	2014-03-09 10:03:01	2014-03-09 10:03:01
281	7	175	NO COMMENT	\N	2014-03-13 01:10:17	2014-03-13 01:10:17
282	2	175	NO COMMENT	\N	2014-05-19 02:28:16	2014-05-19 02:28:16
283	7	177	NO COMMENT	\N	2014-02-25 08:13:43	2014-02-25 08:13:43
284	2	177	NO COMMENT	\N	2014-03-20 11:59:07	2014-03-20 11:59:07
285	1	177	NO COMMENT	\N	2014-03-31 14:05:40	2014-03-31 14:05:40
286	7	178	NO COMMENT	\N	2014-05-12 09:56:56	2014-05-12 09:56:56
287	1	179	NO COMMENT	\N	2014-02-05 23:39:29	2014-02-05 23:39:29
288	7	180	NO COMMENT	\N	2013-10-26 15:05:46	2013-10-26 15:05:46
289	2	180	NO COMMENT	\N	2013-11-22 12:24:40	2013-11-22 12:24:40
290	1	180	NO COMMENT	\N	2013-12-27 23:04:08	2013-12-27 23:04:08
291	1	181	NO COMMENT	\N	2014-01-25 19:28:29	2014-01-25 19:28:29
292	7	181	NO COMMENT	\N	2014-03-14 01:00:37	2014-03-14 01:00:37
293	2	181	NO COMMENT	\N	2014-03-18 02:48:45	2014-03-18 02:48:45
294	1	182	NO COMMENT	\N	2013-11-29 01:48:39	2013-11-29 01:48:39
295	2	182	NO COMMENT	\N	2014-01-14 14:00:12	2014-01-14 14:00:12
296	7	182	NO COMMENT	\N	2014-03-03 09:35:29	2014-03-03 09:35:29
297	7	183	NO COMMENT	\N	2013-12-05 08:00:17	2013-12-05 08:00:17
298	2	183	NO COMMENT	\N	2014-02-17 09:53:53	2014-02-17 09:53:53
299	1	183	NO COMMENT	\N	2014-03-15 18:41:04	2014-03-15 18:41:04
300	1	184	NO COMMENT	\N	2014-03-03 13:55:16	2014-03-03 13:55:16
301	1	185	NO COMMENT	\N	2013-11-18 02:52:04	2013-11-18 02:52:04
302	2	185	NO COMMENT	\N	2014-01-06 18:08:47	2014-01-06 18:08:47
303	7	185	NO COMMENT	\N	2014-03-06 04:02:18	2014-03-06 04:02:18
304	7	186	NO COMMENT	\N	2013-11-30 06:55:25	2013-11-30 06:55:25
305	1	186	NO COMMENT	\N	2014-02-26 12:03:14	2014-02-26 12:03:14
306	2	186	NO COMMENT	\N	2014-03-31 18:05:38	2014-03-31 18:05:38
307	7	188	NO COMMENT	\N	2014-05-14 16:22:41	2014-05-14 16:22:41
308	1	188	NO COMMENT	\N	2014-05-18 03:46:27	2014-05-18 03:46:27
309	45	188	NO COMMENT	\N	2014-05-26 12:46:43	2014-05-26 12:46:43
310	1	189	NO COMMENT	\N	2014-05-25 17:57:52	2014-05-25 17:57:52
311	45	190	NO COMMENT	\N	2014-05-21 02:56:19	2014-05-21 02:56:19
312	1	190	NO COMMENT	\N	2014-05-21 14:14:00	2014-05-21 14:14:00
313	7	190	NO COMMENT	\N	2014-05-21 20:05:20	2014-05-21 20:05:20
314	47	190	NO COMMENT	\N	2014-05-26 11:08:14	2014-05-26 11:08:14
315	4	190	NO COMMENT	\N	2014-05-26 12:45:09	2014-05-26 12:45:09
316	40	191	NO COMMENT	\N	2014-05-05 06:12:45	2014-05-05 06:12:45
317	48	191	NO COMMENT	\N	2014-05-07 19:25:23	2014-05-07 19:25:23
318	1	192	NO COMMENT	\N	2014-05-10 01:35:51	2014-05-10 01:35:51
319	40	192	NO COMMENT	\N	2014-05-21 12:20:56	2014-05-21 12:20:56
320	7	192	NO COMMENT	\N	2014-05-24 03:10:22	2014-05-24 03:10:22
321	1	194	NO COMMENT	\N	2014-05-19 09:56:32	2014-05-19 09:56:32
322	19	194	NO COMMENT	\N	2014-05-25 03:23:18	2014-05-25 03:23:18
323	7	195	NO COMMENT	\N	2014-05-03 02:04:31	2014-05-03 02:04:31
324	16	195	NO COMMENT	\N	2014-05-03 04:27:25	2014-05-03 04:27:25
325	10	195	NO COMMENT	\N	2014-05-04 09:00:03	2014-05-04 09:00:03
326	1	195	NO COMMENT	\N	2014-05-10 00:29:02	2014-05-10 00:29:02
327	44	195	NO COMMENT	\N	2014-05-14 05:40:20	2014-05-14 05:40:20
328	25	195	NO COMMENT	\N	2014-05-23 02:45:12	2014-05-23 02:45:12
329	29	195	NO COMMENT	\N	2014-05-23 05:07:53	2014-05-23 05:07:53
330	7	197	NO COMMENT	\N	2014-05-07 19:03:07	2014-05-07 19:03:07
331	25	197	NO COMMENT	\N	2014-05-08 07:22:36	2014-05-08 07:22:36
332	29	197	NO COMMENT	\N	2014-05-08 15:26:46	2014-05-08 15:26:46
333	10	197	NO COMMENT	\N	2014-05-10 23:17:26	2014-05-10 23:17:26
334	44	197	NO COMMENT	\N	2014-05-14 05:13:29	2014-05-14 05:13:29
335	16	197	NO COMMENT	\N	2014-05-20 02:41:31	2014-05-20 02:41:31
336	23	197	NO COMMENT	\N	2014-05-25 00:04:25	2014-05-25 00:04:25
337	1	197	NO COMMENT	\N	2014-05-26 10:33:14	2014-05-26 10:33:14
338	7	198	NO COMMENT	\N	2014-05-13 00:29:21	2014-05-13 00:29:21
339	23	198	NO COMMENT	\N	2014-05-16 03:54:18	2014-05-16 03:54:18
340	25	198	NO COMMENT	\N	2014-05-16 22:43:43	2014-05-16 22:43:43
341	1	198	NO COMMENT	\N	2014-05-19 01:08:06	2014-05-19 01:08:06
342	10	198	NO COMMENT	\N	2014-05-23 08:49:36	2014-05-23 08:49:36
343	44	198	NO COMMENT	\N	2014-05-26 11:10:09	2014-05-26 11:10:09
344	29	198	NO COMMENT	\N	2014-05-26 21:37:30	2014-05-26 21:37:30
345	16	198	NO COMMENT	\N	2014-05-26 23:33:54	2014-05-26 23:33:54
346	25	199	NO COMMENT	\N	2014-05-18 17:45:40	2014-05-18 17:45:40
347	23	199	NO COMMENT	\N	2014-05-18 23:23:37	2014-05-18 23:23:37
348	16	199	NO COMMENT	\N	2014-05-21 17:02:34	2014-05-21 17:02:34
349	29	199	NO COMMENT	\N	2014-05-21 18:07:03	2014-05-21 18:07:03
350	1	200	NO COMMENT	\N	2014-05-03 14:42:16	2014-05-03 14:42:16
351	7	200	NO COMMENT	\N	2014-05-11 02:42:57	2014-05-11 02:42:57
352	7	201	NO COMMENT	\N	2014-05-14 18:03:56	2014-05-14 18:03:56
353	1	201	NO COMMENT	\N	2014-05-16 06:47:21	2014-05-16 06:47:21
354	7	202	NO COMMENT	\N	2014-05-26 02:50:17	2014-05-26 02:50:17
355	1	202	NO COMMENT	\N	2014-05-27 01:13:44	2014-05-27 01:13:44
356	24	203	NO COMMENT	\N	2014-05-12 10:55:20	2014-05-12 10:55:20
357	43	203	NO COMMENT	\N	2014-05-13 13:06:40	2014-05-13 13:06:40
358	37	203	NO COMMENT	\N	2014-05-15 12:38:04	2014-05-15 12:38:04
359	14	203	NO COMMENT	\N	2014-05-18 07:12:24	2014-05-18 07:12:24
360	12	203	NO COMMENT	\N	2014-05-21 22:34:28	2014-05-21 22:34:28
361	6	203	NO COMMENT	\N	2014-05-21 23:33:31	2014-05-21 23:33:31
362	35	203	NO COMMENT	\N	2014-05-24 18:07:23	2014-05-24 18:07:23
363	7	204	NO COMMENT	\N	2014-05-15 21:17:04	2014-05-15 21:17:04
364	10	204	NO COMMENT	\N	2014-05-16 12:15:42	2014-05-16 12:15:42
365	37	204	NO COMMENT	\N	2014-05-19 05:53:16	2014-05-19 05:53:16
366	40	204	NO COMMENT	\N	2014-05-23 17:47:01	2014-05-23 17:47:01
367	14	205	NO COMMENT	\N	2014-05-16 12:09:32	2014-05-16 12:09:32
368	10	205	NO COMMENT	\N	2014-05-17 14:19:24	2014-05-17 14:19:24
369	37	205	NO COMMENT	\N	2014-05-19 17:28:34	2014-05-19 17:28:34
370	36	205	NO COMMENT	\N	2014-05-19 23:46:59	2014-05-19 23:46:59
371	35	205	NO COMMENT	\N	2014-05-21 10:57:35	2014-05-21 10:57:35
372	29	206	NO COMMENT	\N	2014-05-17 08:01:28	2014-05-17 08:01:28
373	11	207	NO COMMENT	\N	2014-05-14 12:51:50	2014-05-14 12:51:50
374	1	207	NO COMMENT	\N	2014-05-15 09:14:04	2014-05-15 09:14:04
375	29	207	NO COMMENT	\N	2014-05-17 22:15:04	2014-05-17 22:15:04
376	7	207	NO COMMENT	\N	2014-05-26 15:51:26	2014-05-26 15:51:26
377	7	208	NO COMMENT	\N	2014-05-12 11:13:10	2014-05-12 11:13:10
378	1	208	NO COMMENT	\N	2014-05-24 16:22:42	2014-05-24 16:22:42
379	7	209	NO COMMENT	\N	2014-05-10 07:47:35	2014-05-10 07:47:35
380	1	209	NO COMMENT	\N	2014-05-13 11:38:56	2014-05-13 11:38:56
381	1	210	NO COMMENT	\N	2014-05-15 10:48:18	2014-05-15 10:48:18
382	7	210	NO COMMENT	\N	2014-05-20 00:14:35	2014-05-20 00:14:35
383	7	211	NO COMMENT	\N	2014-05-08 01:02:29	2014-05-08 01:02:29
384	1	211	NO COMMENT	\N	2014-05-15 21:46:48	2014-05-15 21:46:48
385	7	212	NO COMMENT	\N	2014-05-10 05:25:52	2014-05-10 05:25:52
386	1	212	NO COMMENT	\N	2014-05-14 18:49:32	2014-05-14 18:49:32
387	1	213	NO COMMENT	\N	2014-05-17 11:44:44	2014-05-17 11:44:44
388	7	213	NO COMMENT	\N	2014-05-17 17:20:43	2014-05-17 17:20:43
389	1	214	NO COMMENT	\N	2014-05-15 17:09:25	2014-05-15 17:09:25
390	7	214	NO COMMENT	\N	2014-05-15 18:04:48	2014-05-15 18:04:48
391	7	270	NO COMMENT	\N	2014-05-21 15:08:16	2014-05-21 15:08:16
392	1	270	NO COMMENT	\N	2014-05-27 08:09:13	2014-05-27 08:09:13
393	1	216	NO COMMENT	\N	2014-05-10 04:19:12	2014-05-10 04:19:12
394	9	217	NO COMMENT	\N	2014-05-11 04:40:11	2014-05-11 04:40:11
395	4	217	NO COMMENT	\N	2014-05-12 17:56:20	2014-05-12 17:56:20
396	18	217	NO COMMENT	\N	2014-05-16 02:03:22	2014-05-16 02:03:22
397	7	217	NO COMMENT	\N	2014-05-18 03:45:44	2014-05-18 03:45:44
398	1	217	NO COMMENT	\N	2014-05-20 03:22:00	2014-05-20 03:22:00
399	48	217	NO COMMENT	\N	2014-05-22 13:39:56	2014-05-22 13:39:56
400	7	218	NO COMMENT	\N	2014-05-19 00:36:32	2014-05-19 00:36:32
401	1	218	NO COMMENT	\N	2014-05-20 04:23:11	2014-05-20 04:23:11
402	6	219	NO COMMENT	\N	2014-05-01 19:40:31	2014-05-01 19:40:31
403	13	219	NO COMMENT	\N	2014-05-02 21:25:20	2014-05-02 21:25:20
404	1	219	NO COMMENT	\N	2014-05-06 19:44:10	2014-05-06 19:44:10
405	16	219	NO COMMENT	\N	2014-05-07 01:17:11	2014-05-07 01:17:11
406	21	219	NO COMMENT	\N	2014-05-08 23:35:00	2014-05-08 23:35:00
407	1	220	NO COMMENT	\N	2014-05-01 15:47:18	2014-05-01 15:47:18
408	16	220	NO COMMENT	\N	2014-05-14 08:30:02	2014-05-14 08:30:02
409	29	220	NO COMMENT	\N	2014-05-15 05:34:16	2014-05-15 05:34:16
410	21	220	NO COMMENT	\N	2014-05-18 04:36:13	2014-05-18 04:36:13
411	7	220	NO COMMENT	\N	2014-05-19 14:48:48	2014-05-19 14:48:48
412	35	220	NO COMMENT	\N	2014-05-24 12:55:20	2014-05-24 12:55:20
413	18	220	NO COMMENT	\N	2014-05-26 22:57:03	2014-05-26 22:57:03
414	7	221	NO COMMENT	\N	2014-05-20 05:50:51	2014-05-20 05:50:51
415	40	222	NO COMMENT	\N	2014-05-19 09:32:52	2014-05-19 09:32:52
416	44	222	NO COMMENT	\N	2014-05-19 10:15:02	2014-05-19 10:15:02
417	46	223	NO COMMENT	\N	2014-05-20 19:43:15	2014-05-20 19:43:15
418	27	223	NO COMMENT	\N	2014-05-22 02:13:38	2014-05-22 02:13:38
419	7	223	NO COMMENT	\N	2014-05-23 14:15:08	2014-05-23 14:15:08
420	33	223	NO COMMENT	\N	2014-05-24 01:31:56	2014-05-24 01:31:56
421	29	223	NO COMMENT	\N	2014-05-24 14:53:05	2014-05-24 14:53:05
422	32	223	NO COMMENT	\N	2014-05-25 21:39:03	2014-05-25 21:39:03
423	35	223	NO COMMENT	\N	2014-05-27 05:39:25	2014-05-27 05:39:25
424	16	224	NO COMMENT	\N	2014-05-24 11:41:31	2014-05-24 11:41:31
425	6	224	NO COMMENT	\N	2014-05-25 17:37:59	2014-05-25 17:37:59
426	18	224	NO COMMENT	\N	2014-05-26 09:39:54	2014-05-26 09:39:54
427	44	224	NO COMMENT	\N	2014-05-26 12:58:15	2014-05-26 12:58:15
428	13	224	NO COMMENT	\N	2014-05-26 14:22:45	2014-05-26 14:22:45
429	33	224	NO COMMENT	\N	2014-05-27 02:49:14	2014-05-27 02:49:14
430	7	225	NO COMMENT	\N	2014-05-22 05:12:28	2014-05-22 05:12:28
431	7	226	NO COMMENT	\N	2014-05-27 07:22:18	2014-05-27 07:22:18
432	1	226	NO COMMENT	\N	2014-05-27 09:14:18	2014-05-27 09:14:18
433	7	227	NO COMMENT	\N	2014-05-25 20:44:37	2014-05-25 20:44:37
434	1	227	NO COMMENT	\N	2014-05-27 08:51:00	2014-05-27 08:51:00
435	1	229	NO COMMENT	\N	2014-03-04 13:38:35	2014-03-04 13:38:35
436	7	229	NO COMMENT	\N	2014-04-14 20:23:22	2014-04-14 20:23:22
437	1	230	NO COMMENT	\N	2014-04-21 07:42:02	2014-04-21 07:42:02
438	7	230	NO COMMENT	\N	2014-04-23 08:08:06	2014-04-23 08:08:06
439	14	230	NO COMMENT	\N	2014-05-05 11:52:05	2014-05-05 11:52:05
440	7	231	NO COMMENT	\N	2014-04-12 19:29:25	2014-04-12 19:29:25
441	48	231	NO COMMENT	\N	2014-04-27 20:38:45	2014-04-27 20:38:45
442	14	231	NO COMMENT	\N	2014-04-28 08:41:59	2014-04-28 08:41:59
443	1	231	NO COMMENT	\N	2014-05-04 17:43:49	2014-05-04 17:43:49
444	7	232	NO COMMENT	\N	2014-03-10 14:11:20	2014-03-10 14:11:20
445	1	232	NO COMMENT	\N	2014-03-23 21:30:19	2014-03-23 21:30:19
446	12	233	NO COMMENT	\N	2014-04-11 11:18:49	2014-04-11 11:18:49
447	16	233	NO COMMENT	\N	2014-04-27 02:44:04	2014-04-27 02:44:04
448	7	233	NO COMMENT	\N	2014-05-12 01:57:24	2014-05-12 01:57:24
449	1	234	NO COMMENT	\N	2014-04-28 22:17:00	2014-04-28 22:17:00
450	46	234	NO COMMENT	\N	2014-05-02 05:44:28	2014-05-02 05:44:28
451	12	234	NO COMMENT	\N	2014-05-04 16:10:06	2014-05-04 16:10:06
452	16	234	NO COMMENT	\N	2014-05-14 22:02:48	2014-05-14 22:02:48
453	7	234	NO COMMENT	\N	2014-05-26 11:34:35	2014-05-26 11:34:35
454	7	235	NO COMMENT	\N	2014-04-07 03:18:04	2014-04-07 03:18:04
455	1	235	NO COMMENT	\N	2014-05-06 05:31:12	2014-05-06 05:31:12
456	1	238	NO COMMENT	\N	2014-04-11 08:20:19	2014-04-11 08:20:19
457	7	238	NO COMMENT	\N	2014-04-29 05:19:41	2014-04-29 05:19:41
458	1	239	NO COMMENT	\N	2014-03-18 00:52:36	2014-03-18 00:52:36
459	7	239	NO COMMENT	\N	2014-05-02 04:59:10	2014-05-02 04:59:10
460	1	240	NO COMMENT	\N	2014-02-23 07:59:49	2014-02-23 07:59:49
461	7	240	NO COMMENT	\N	2014-04-20 13:18:40	2014-04-20 13:18:40
462	36	240	NO COMMENT	\N	2014-04-25 23:08:19	2014-04-25 23:08:19
463	35	240	NO COMMENT	\N	2014-05-20 07:00:17	2014-05-20 07:00:17
464	11	243	NO COMMENT	\N	2014-04-26 11:29:45	2014-04-26 11:29:45
465	35	243	NO COMMENT	\N	2014-05-11 01:06:40	2014-05-11 01:06:40
466	40	243	NO COMMENT	\N	2014-05-20 09:36:34	2014-05-20 09:36:34
467	45	243	NO COMMENT	\N	2014-05-22 03:51:14	2014-05-22 03:51:14
468	7	244	NO COMMENT	\N	2014-02-17 07:50:27	2014-02-17 07:50:27
469	1	244	NO COMMENT	\N	2014-03-21 18:59:51	2014-03-21 18:59:51
470	7	271	NO COMMENT	\N	2014-05-16 03:20:05	2014-05-16 03:20:05
471	1	271	NO COMMENT	\N	2014-05-23 16:57:09	2014-05-23 16:57:09
472	14	436	NO COMMENT	\N	2014-05-01 13:22:16	2014-05-01 13:22:16
473	35	436	NO COMMENT	\N	2014-05-11 03:06:45	2014-05-11 03:06:45
474	12	436	NO COMMENT	\N	2014-05-20 13:47:20	2014-05-20 13:47:20
475	29	436	NO COMMENT	\N	2014-05-23 23:06:26	2014-05-23 23:06:26
476	7	247	NO COMMENT	\N	2014-03-08 13:33:02	2014-03-08 13:33:02
477	1	247	NO COMMENT	\N	2014-04-01 01:36:58	2014-04-01 01:36:58
478	1	249	NO COMMENT	\N	2014-04-27 22:53:09	2014-04-27 22:53:09
479	7	249	NO COMMENT	\N	2014-05-15 19:38:25	2014-05-15 19:38:25
480	7	251	NO COMMENT	\N	2014-01-23 21:43:10	2014-01-23 21:43:10
481	1	251	NO COMMENT	\N	2014-03-28 13:12:57	2014-03-28 13:12:57
482	7	252	NO COMMENT	\N	2014-02-23 17:05:05	2014-02-23 17:05:05
483	1	252	NO COMMENT	\N	2014-03-28 05:28:36	2014-03-28 05:28:36
484	7	253	NO COMMENT	\N	2014-04-19 16:02:08	2014-04-19 16:02:08
485	1	253	NO COMMENT	\N	2014-04-23 22:05:32	2014-04-23 22:05:32
486	31	285	NO COMMENT	\N	2014-05-04 21:46:56	2014-05-04 21:46:56
487	1	285	NO COMMENT	\N	2014-05-08 17:48:46	2014-05-08 17:48:46
488	7	285	NO COMMENT	\N	2014-05-10 18:25:03	2014-05-10 18:25:03
489	48	285	NO COMMENT	\N	2014-05-18 03:03:14	2014-05-18 03:03:14
490	14	285	NO COMMENT	\N	2014-05-20 08:30:17	2014-05-20 08:30:17
491	1	255	NO COMMENT	\N	2014-05-12 21:49:28	2014-05-12 21:49:28
492	7	255	NO COMMENT	\N	2014-05-21 23:50:03	2014-05-21 23:50:03
493	7	256	NO COMMENT	\N	2014-01-28 10:39:25	2014-01-28 10:39:25
494	1	256	NO COMMENT	\N	2014-05-06 01:24:01	2014-05-06 01:24:01
495	48	257	NO COMMENT	\N	2014-05-11 14:03:40	2014-05-11 14:03:40
496	1	259	NO COMMENT	\N	2014-02-10 02:21:54	2014-02-10 02:21:54
497	7	259	NO COMMENT	\N	2014-05-09 20:28:37	2014-05-09 20:28:37
498	7	260	NO COMMENT	\N	2014-05-18 15:03:12	2014-05-18 15:03:12
499	1	260	NO COMMENT	\N	2014-05-24 13:21:46	2014-05-24 13:21:46
500	7	261	NO COMMENT	\N	2014-05-18 06:50:00	2014-05-18 06:50:00
501	1	261	NO COMMENT	\N	2014-05-18 21:08:14	2014-05-18 21:08:14
502	1	262	NO COMMENT	\N	2014-03-10 06:12:48	2014-03-10 06:12:48
503	7	262	NO COMMENT	\N	2014-05-02 08:19:06	2014-05-02 08:19:06
504	1	264	NO COMMENT	\N	2014-04-27 05:08:15	2014-04-27 05:08:15
505	7	264	NO COMMENT	\N	2014-05-07 00:33:53	2014-05-07 00:33:53
506	1	265	NO COMMENT	\N	2014-04-21 10:14:10	2014-04-21 10:14:10
507	14	265	NO COMMENT	\N	2014-04-30 11:29:00	2014-04-30 11:29:00
508	7	265	NO COMMENT	\N	2014-05-17 19:27:53	2014-05-17 19:27:53
509	46	267	NO COMMENT	\N	2014-05-04 09:56:19	2014-05-04 09:56:19
510	10	267	NO COMMENT	\N	2014-05-05 11:59:22	2014-05-05 11:59:22
511	4	267	NO COMMENT	\N	2014-05-11 06:55:55	2014-05-11 06:55:55
512	45	267	NO COMMENT	\N	2014-05-13 12:20:50	2014-05-13 12:20:50
513	12	267	NO COMMENT	\N	2014-05-17 22:17:28	2014-05-17 22:17:28
514	7	267	NO COMMENT	\N	2014-05-18 12:22:57	2014-05-18 12:22:57
515	20	267	NO COMMENT	\N	2014-05-22 12:11:32	2014-05-22 12:11:32
516	1	267	NO COMMENT	\N	2014-05-22 14:18:25	2014-05-22 14:18:25
517	13	267	NO COMMENT	\N	2014-05-24 02:52:07	2014-05-24 02:52:07
518	1	272	NO COMMENT	\N	2014-04-01 09:32:56	2014-04-01 09:32:56
519	1	273	NO COMMENT	\N	2014-04-03 02:44:12	2014-04-03 02:44:12
520	25	273	NO COMMENT	\N	2014-04-03 15:44:26	2014-04-03 15:44:26
521	7	274	NO COMMENT	\N	2014-04-25 01:55:34	2014-04-25 01:55:34
522	1	274	NO COMMENT	\N	2014-04-29 17:22:16	2014-04-29 17:22:16
523	25	274	NO COMMENT	\N	2014-05-02 01:53:53	2014-05-02 01:53:53
524	44	274	NO COMMENT	\N	2014-05-09 05:47:07	2014-05-09 05:47:07
525	16	274	NO COMMENT	\N	2014-05-10 07:48:19	2014-05-10 07:48:19
526	29	275	NO COMMENT	\N	2014-05-06 15:14:21	2014-05-06 15:14:21
527	44	275	NO COMMENT	\N	2014-05-19 11:17:52	2014-05-19 11:17:52
528	16	275	NO COMMENT	\N	2014-05-20 04:57:41	2014-05-20 04:57:41
529	7	276	NO COMMENT	\N	2014-03-23 10:02:44	2014-03-23 10:02:44
530	10	276	NO COMMENT	\N	2014-03-25 21:39:16	2014-03-25 21:39:16
531	16	276	NO COMMENT	\N	2014-05-20 17:07:20	2014-05-20 17:07:20
532	1	276	NO COMMENT	\N	2014-05-21 03:15:48	2014-05-21 03:15:48
533	7	277	NO COMMENT	\N	2014-04-08 17:27:10	2014-04-08 17:27:10
534	16	277	NO COMMENT	\N	2014-04-29 14:27:35	2014-04-29 14:27:35
535	1	277	NO COMMENT	\N	2014-05-16 14:48:01	2014-05-16 14:48:01
536	10	277	NO COMMENT	\N	2014-05-21 02:23:13	2014-05-21 02:23:13
537	46	278	NO COMMENT	\N	2014-05-22 15:55:02	2014-05-22 15:55:02
538	16	278	NO COMMENT	\N	2014-05-23 15:58:43	2014-05-23 15:58:43
539	1	278	NO COMMENT	\N	2014-05-24 01:26:25	2014-05-24 01:26:25
540	7	278	NO COMMENT	\N	2014-05-24 12:20:58	2014-05-24 12:20:58
541	14	278	NO COMMENT	\N	2014-05-26 10:25:26	2014-05-26 10:25:26
542	1	279	NO COMMENT	\N	2014-04-05 07:07:16	2014-04-05 07:07:16
543	1	280	NO COMMENT	\N	2014-05-27 04:17:42	2014-05-27 04:17:42
544	7	282	NO COMMENT	\N	2014-03-26 02:15:54	2014-03-26 02:15:54
545	1	282	NO COMMENT	\N	2014-04-04 23:44:05	2014-04-04 23:44:05
546	14	282	NO COMMENT	\N	2014-05-05 21:26:13	2014-05-05 21:26:13
547	1	283	NO COMMENT	\N	2014-04-08 05:57:24	2014-04-08 05:57:24
548	7	283	NO COMMENT	\N	2014-04-14 20:22:48	2014-04-14 20:22:48
549	14	283	NO COMMENT	\N	2014-04-17 22:35:51	2014-04-17 22:35:51
550	48	284	NO COMMENT	\N	2014-04-22 04:25:39	2014-04-22 04:25:39
551	14	284	NO COMMENT	\N	2014-05-03 13:09:10	2014-05-03 13:09:10
552	1	284	NO COMMENT	\N	2014-05-09 09:24:35	2014-05-09 09:24:35
553	7	284	NO COMMENT	\N	2014-05-15 03:07:23	2014-05-15 03:07:23
554	31	286	NO COMMENT	\N	2014-05-22 08:59:43	2014-05-22 08:59:43
555	34	286	NO COMMENT	\N	2014-05-25 05:37:10	2014-05-25 05:37:10
556	21	287	NO COMMENT	\N	2014-04-04 18:50:54	2014-04-04 18:50:54
557	1	287	NO COMMENT	\N	2014-05-05 11:33:39	2014-05-05 11:33:39
558	1	288	NO COMMENT	\N	2014-05-13 06:04:10	2014-05-13 06:04:10
559	7	288	NO COMMENT	\N	2014-05-16 13:54:08	2014-05-16 13:54:08
560	4	289	NO COMMENT	\N	2014-03-27 10:35:08	2014-03-27 10:35:08
561	29	289	NO COMMENT	\N	2014-04-21 11:24:01	2014-04-21 11:24:01
562	7	289	NO COMMENT	\N	2014-05-15 06:56:24	2014-05-15 06:56:24
563	1	289	NO COMMENT	\N	2014-05-26 04:12:48	2014-05-26 04:12:48
564	1	292	NO COMMENT	\N	2014-03-17 09:54:22	2014-03-17 09:54:22
565	7	292	NO COMMENT	\N	2014-05-20 17:30:53	2014-05-20 17:30:53
566	1	293	NO COMMENT	\N	2014-04-19 07:55:29	2014-04-19 07:55:29
567	7	294	NO COMMENT	\N	2014-05-01 17:47:59	2014-05-01 17:47:59
568	1	294	NO COMMENT	\N	2014-05-23 23:14:04	2014-05-23 23:14:04
569	1	295	NO COMMENT	\N	2014-03-31 12:23:04	2014-03-31 12:23:04
570	43	295	NO COMMENT	\N	2014-05-02 22:29:59	2014-05-02 22:29:59
571	7	295	NO COMMENT	\N	2014-05-25 12:24:35	2014-05-25 12:24:35
572	14	296	NO COMMENT	\N	2014-04-17 20:45:30	2014-04-17 20:45:30
573	7	296	NO COMMENT	\N	2014-04-20 02:08:23	2014-04-20 02:08:23
574	43	296	NO COMMENT	\N	2014-04-24 03:45:22	2014-04-24 03:45:22
575	12	296	NO COMMENT	\N	2014-04-25 01:24:40	2014-04-25 01:24:40
576	37	296	NO COMMENT	\N	2014-04-26 09:05:17	2014-04-26 09:05:17
577	1	296	NO COMMENT	\N	2014-04-30 12:57:16	2014-04-30 12:57:16
578	12	297	NO COMMENT	\N	2014-04-26 18:37:31	2014-04-26 18:37:31
579	1	297	NO COMMENT	\N	2014-04-29 00:10:53	2014-04-29 00:10:53
580	6	297	NO COMMENT	\N	2014-05-08 14:49:57	2014-05-08 14:49:57
581	37	297	NO COMMENT	\N	2014-05-16 13:20:17	2014-05-16 13:20:17
582	43	297	NO COMMENT	\N	2014-05-24 10:46:57	2014-05-24 10:46:57
583	14	297	NO COMMENT	\N	2014-05-25 01:11:49	2014-05-25 01:11:49
584	1	299	NO COMMENT	\N	2014-04-15 10:44:53	2014-04-15 10:44:53
585	21	299	NO COMMENT	\N	2014-04-18 01:01:25	2014-04-18 01:01:25
586	42	299	NO COMMENT	\N	2014-04-18 05:46:01	2014-04-18 05:46:01
587	17	299	NO COMMENT	\N	2014-04-20 14:34:29	2014-04-20 14:34:29
588	7	299	NO COMMENT	\N	2014-05-19 21:11:58	2014-05-19 21:11:58
589	1	300	NO COMMENT	\N	2014-05-05 18:39:29	2014-05-05 18:39:29
590	7	300	NO COMMENT	\N	2014-05-16 16:11:32	2014-05-16 16:11:32
591	21	301	NO COMMENT	\N	2014-05-13 07:10:04	2014-05-13 07:10:04
592	1	301	NO COMMENT	\N	2014-05-15 00:47:29	2014-05-15 00:47:29
593	7	301	NO COMMENT	\N	2014-05-26 00:54:24	2014-05-26 00:54:24
594	7	302	NO COMMENT	\N	2014-05-14 11:09:42	2014-05-14 11:09:42
595	1	302	NO COMMENT	\N	2014-05-16 02:51:32	2014-05-16 02:51:32
596	21	302	NO COMMENT	\N	2014-05-19 18:59:49	2014-05-19 18:59:49
597	7	304	NO COMMENT	\N	2014-04-16 18:33:12	2014-04-16 18:33:12
598	44	304	NO COMMENT	\N	2014-05-08 15:42:14	2014-05-08 15:42:14
599	1	304	NO COMMENT	\N	2014-05-08 23:26:03	2014-05-08 23:26:03
600	5	304	NO COMMENT	\N	2014-05-17 19:46:48	2014-05-17 19:46:48
601	7	305	NO COMMENT	\N	2014-04-10 10:36:44	2014-04-10 10:36:44
602	1	305	NO COMMENT	\N	2014-04-20 12:22:29	2014-04-20 12:22:29
603	44	305	NO COMMENT	\N	2014-04-28 14:11:34	2014-04-28 14:11:34
604	5	305	NO COMMENT	\N	2014-05-26 02:03:02	2014-05-26 02:03:02
605	1	306	NO COMMENT	\N	2014-03-17 10:53:37	2014-03-17 10:53:37
606	7	306	NO COMMENT	\N	2014-03-20 09:07:33	2014-03-20 09:07:33
607	1	307	NO COMMENT	\N	2014-02-22 05:21:50	2014-02-22 05:21:50
608	7	307	NO COMMENT	\N	2014-05-10 18:10:44	2014-05-10 18:10:44
609	7	308	NO COMMENT	\N	2014-04-12 06:05:55	2014-04-12 06:05:55
610	45	308	NO COMMENT	\N	2014-04-21 20:11:11	2014-04-21 20:11:11
611	10	308	NO COMMENT	\N	2014-05-01 13:18:33	2014-05-01 13:18:33
612	1	308	NO COMMENT	\N	2014-05-24 01:08:46	2014-05-24 01:08:46
613	7	309	NO COMMENT	\N	2014-01-21 01:09:37	2014-01-21 01:09:37
614	1	309	NO COMMENT	\N	2014-05-24 04:56:30	2014-05-24 04:56:30
615	1	311	NO COMMENT	\N	2014-02-10 21:07:37	2014-02-10 21:07:37
616	16	311	NO COMMENT	\N	2014-03-21 11:28:22	2014-03-21 11:28:22
617	35	311	NO COMMENT	\N	2014-04-05 15:24:00	2014-04-05 15:24:00
618	29	311	NO COMMENT	\N	2014-05-23 08:11:16	2014-05-23 08:11:16
619	7	311	NO COMMENT	\N	2014-05-27 08:29:06	2014-05-27 08:29:06
620	16	312	NO COMMENT	\N	2014-04-21 10:13:34	2014-04-21 10:13:34
621	29	312	NO COMMENT	\N	2014-04-26 19:21:47	2014-04-26 19:21:47
622	1	312	NO COMMENT	\N	2014-04-30 02:08:24	2014-04-30 02:08:24
623	7	312	NO COMMENT	\N	2014-05-25 22:22:08	2014-05-25 22:22:08
624	35	313	NO COMMENT	\N	2014-03-13 11:53:11	2014-03-13 11:53:11
625	29	313	NO COMMENT	\N	2014-03-24 04:45:09	2014-03-24 04:45:09
626	16	313	NO COMMENT	\N	2014-03-27 07:20:25	2014-03-27 07:20:25
627	1	313	NO COMMENT	\N	2014-04-02 17:15:23	2014-04-02 17:15:23
628	7	313	NO COMMENT	\N	2014-04-15 02:37:52	2014-04-15 02:37:52
629	7	393	NO COMMENT	\N	2013-12-24 13:40:44	2013-12-24 13:40:44
630	1	393	NO COMMENT	\N	2014-04-16 11:04:12	2014-04-16 11:04:12
631	7	318	NO COMMENT	\N	2014-04-14 00:42:24	2014-04-14 00:42:24
632	1	318	NO COMMENT	\N	2014-05-10 06:02:06	2014-05-10 06:02:06
633	7	320	NO COMMENT	\N	2014-03-12 16:11:03	2014-03-12 16:11:03
634	1	320	NO COMMENT	\N	2014-04-02 14:33:00	2014-04-02 14:33:00
635	7	321	NO COMMENT	\N	2013-10-26 16:55:48	2013-10-26 16:55:48
636	1	321	NO COMMENT	\N	2014-04-01 10:37:35	2014-04-01 10:37:35
637	1	322	NO COMMENT	\N	2014-03-01 21:55:56	2014-03-01 21:55:56
638	7	322	NO COMMENT	\N	2014-03-28 01:23:22	2014-03-28 01:23:22
639	7	323	NO COMMENT	\N	2014-03-22 21:17:21	2014-03-22 21:17:21
640	1	323	NO COMMENT	\N	2014-03-25 14:27:01	2014-03-25 14:27:01
641	1	326	NO COMMENT	\N	2014-04-20 05:59:47	2014-04-20 05:59:47
642	7	326	NO COMMENT	\N	2014-05-25 07:54:56	2014-05-25 07:54:56
643	7	327	NO COMMENT	\N	2013-12-07 16:46:01	2013-12-07 16:46:01
644	1	327	NO COMMENT	\N	2013-12-15 09:04:20	2013-12-15 09:04:20
645	7	328	NO COMMENT	\N	2014-04-22 02:28:04	2014-04-22 02:28:04
646	1	328	NO COMMENT	\N	2014-05-26 10:08:31	2014-05-26 10:08:31
647	7	329	NO COMMENT	\N	2013-12-10 13:39:35	2013-12-10 13:39:35
648	1	329	NO COMMENT	\N	2014-03-02 07:50:58	2014-03-02 07:50:58
649	7	330	NO COMMENT	\N	2014-01-08 04:11:29	2014-01-08 04:11:29
650	1	330	NO COMMENT	\N	2014-03-15 04:02:15	2014-03-15 04:02:15
651	21	331	NO COMMENT	\N	2014-03-12 16:44:11	2014-03-12 16:44:11
652	7	331	NO COMMENT	\N	2014-04-27 14:04:19	2014-04-27 14:04:19
653	1	331	NO COMMENT	\N	2014-05-09 03:51:36	2014-05-09 03:51:36
654	7	332	NO COMMENT	\N	2014-03-02 19:39:34	2014-03-02 19:39:34
655	1	333	NO COMMENT	\N	2014-03-01 23:55:15	2014-03-01 23:55:15
656	7	333	NO COMMENT	\N	2014-05-05 00:18:21	2014-05-05 00:18:21
657	7	334	NO COMMENT	\N	2014-02-22 17:44:53	2014-02-22 17:44:53
658	1	334	NO COMMENT	\N	2014-03-15 17:27:15	2014-03-15 17:27:15
659	1	335	NO COMMENT	\N	2014-03-02 18:27:37	2014-03-02 18:27:37
660	7	335	NO COMMENT	\N	2014-05-17 18:21:58	2014-05-17 18:21:58
661	7	346	NO COMMENT	\N	2014-02-10 18:03:02	2014-02-10 18:03:02
662	1	346	NO COMMENT	\N	2014-04-01 18:38:24	2014-04-01 18:38:24
663	43	346	NO COMMENT	\N	2014-05-23 19:47:05	2014-05-23 19:47:05
664	1	336	NO COMMENT	\N	2014-05-19 10:50:55	2014-05-19 10:50:55
665	7	337	NO COMMENT	\N	2014-05-03 20:29:00	2014-05-03 20:29:00
666	1	337	NO COMMENT	\N	2014-05-04 18:46:40	2014-05-04 18:46:40
667	27	337	NO COMMENT	\N	2014-05-23 11:00:42	2014-05-23 11:00:42
668	1	338	NO COMMENT	\N	2014-03-30 22:07:44	2014-03-30 22:07:44
669	7	338	NO COMMENT	\N	2014-05-13 09:15:30	2014-05-13 09:15:30
670	7	340	NO COMMENT	\N	2014-04-22 05:11:30	2014-04-22 05:11:30
671	1	340	NO COMMENT	\N	2014-05-09 10:02:45	2014-05-09 10:02:45
672	21	340	NO COMMENT	\N	2014-05-09 15:14:55	2014-05-09 15:14:55
673	7	341	NO COMMENT	\N	2014-03-21 06:31:50	2014-03-21 06:31:50
674	1	341	NO COMMENT	\N	2014-04-19 09:20:18	2014-04-19 09:20:18
675	1	342	NO COMMENT	\N	2014-05-22 05:38:28	2014-05-22 05:38:28
676	7	342	NO COMMENT	\N	2014-05-22 15:50:43	2014-05-22 15:50:43
677	7	343	NO COMMENT	\N	2014-03-14 17:10:12	2014-03-14 17:10:12
678	1	343	NO COMMENT	\N	2014-03-23 08:43:04	2014-03-23 08:43:04
679	7	344	NO COMMENT	\N	2014-03-11 21:42:25	2014-03-11 21:42:25
680	1	344	NO COMMENT	\N	2014-05-08 06:39:07	2014-05-08 06:39:07
681	1	345	NO COMMENT	\N	2014-02-04 08:47:00	2014-02-04 08:47:00
682	7	345	NO COMMENT	\N	2014-05-26 00:54:47	2014-05-26 00:54:47
683	4	437	NO COMMENT	\N	2014-04-09 07:59:17	2014-04-09 07:59:17
684	46	437	NO COMMENT	\N	2014-04-21 13:58:07	2014-04-21 13:58:07
685	13	437	NO COMMENT	\N	2014-05-03 03:44:37	2014-05-03 03:44:37
686	1	437	NO COMMENT	\N	2014-05-10 21:13:43	2014-05-10 21:13:43
687	43	347	NO COMMENT	\N	2014-03-09 08:09:24	2014-03-09 08:09:24
688	7	347	NO COMMENT	\N	2014-03-29 02:18:02	2014-03-29 02:18:02
689	1	347	NO COMMENT	\N	2014-04-17 04:21:12	2014-04-17 04:21:12
690	1	348	NO COMMENT	\N	2014-03-31 15:08:23	2014-03-31 15:08:23
691	43	348	NO COMMENT	\N	2014-04-03 19:34:26	2014-04-03 19:34:26
692	7	348	NO COMMENT	\N	2014-05-12 17:18:37	2014-05-12 17:18:37
693	1	349	NO COMMENT	\N	2014-04-06 15:25:11	2014-04-06 15:25:11
694	43	349	NO COMMENT	\N	2014-05-14 18:40:36	2014-05-14 18:40:36
695	7	349	NO COMMENT	\N	2014-05-16 20:23:43	2014-05-16 20:23:43
696	1	351	NO COMMENT	\N	2014-03-22 09:24:29	2014-03-22 09:24:29
697	7	352	NO COMMENT	\N	2014-03-20 17:12:42	2014-03-20 17:12:42
698	1	352	NO COMMENT	\N	2014-04-26 14:49:05	2014-04-26 14:49:05
699	43	352	NO COMMENT	\N	2014-05-10 17:24:23	2014-05-10 17:24:23
700	7	354	NO COMMENT	\N	2014-03-13 09:22:42	2014-03-13 09:22:42
701	1	354	NO COMMENT	\N	2014-03-22 00:35:09	2014-03-22 00:35:09
702	43	354	NO COMMENT	\N	2014-04-08 17:58:37	2014-04-08 17:58:37
703	1	355	NO COMMENT	\N	2014-03-31 02:57:44	2014-03-31 02:57:44
704	7	355	NO COMMENT	\N	2014-04-19 18:43:42	2014-04-19 18:43:42
705	43	355	NO COMMENT	\N	2014-04-26 18:30:00	2014-04-26 18:30:00
706	24	356	NO COMMENT	\N	2014-05-05 06:38:30	2014-05-05 06:38:30
707	10	356	NO COMMENT	\N	2014-05-19 08:35:49	2014-05-19 08:35:49
708	37	356	NO COMMENT	\N	2014-05-22 23:23:14	2014-05-22 23:23:14
709	14	356	NO COMMENT	\N	2014-05-24 05:14:56	2014-05-24 05:14:56
710	44	357	NO COMMENT	\N	2014-05-18 16:12:44	2014-05-18 16:12:44
711	1	357	NO COMMENT	\N	2014-05-20 16:31:37	2014-05-20 16:31:37
712	40	357	NO COMMENT	\N	2014-05-21 05:10:38	2014-05-21 05:10:38
713	10	357	NO COMMENT	\N	2014-05-21 07:33:27	2014-05-21 07:33:27
714	14	357	NO COMMENT	\N	2014-05-21 15:27:14	2014-05-21 15:27:14
715	37	357	NO COMMENT	\N	2014-05-22 01:40:33	2014-05-22 01:40:33
716	43	357	NO COMMENT	\N	2014-05-22 21:25:06	2014-05-22 21:25:06
717	7	357	NO COMMENT	\N	2014-05-23 10:11:49	2014-05-23 10:11:49
718	41	357	NO COMMENT	\N	2014-05-23 10:36:17	2014-05-23 10:36:17
719	35	357	NO COMMENT	\N	2014-05-25 12:21:47	2014-05-25 12:21:47
720	36	357	NO COMMENT	\N	2014-05-26 11:02:17	2014-05-26 11:02:17
721	1	359	NO COMMENT	\N	2014-04-05 10:16:14	2014-04-05 10:16:14
722	29	359	NO COMMENT	\N	2014-04-17 21:24:43	2014-04-17 21:24:43
723	7	359	NO COMMENT	\N	2014-04-24 18:51:47	2014-04-24 18:51:47
724	4	359	NO COMMENT	\N	2014-05-15 21:56:31	2014-05-15 21:56:31
725	21	359	NO COMMENT	\N	2014-05-16 08:21:15	2014-05-16 08:21:15
726	1	360	NO COMMENT	\N	2014-04-01 22:48:26	2014-04-01 22:48:26
727	7	360	NO COMMENT	\N	2014-05-05 05:43:50	2014-05-05 05:43:50
728	1	362	NO COMMENT	\N	2014-05-24 01:04:57	2014-05-24 01:04:57
729	7	362	NO COMMENT	\N	2014-05-25 20:03:23	2014-05-25 20:03:23
730	7	394	NO COMMENT	\N	2014-02-10 14:20:20	2014-02-10 14:20:20
731	1	394	NO COMMENT	\N	2014-02-22 07:31:36	2014-02-22 07:31:36
732	7	363	NO COMMENT	\N	2014-02-12 17:58:45	2014-02-12 17:58:45
733	1	363	NO COMMENT	\N	2014-03-13 23:24:45	2014-03-13 23:24:45
734	1	364	NO COMMENT	\N	2014-03-05 23:06:58	2014-03-05 23:06:58
735	7	364	NO COMMENT	\N	2014-04-18 18:43:54	2014-04-18 18:43:54
736	7	365	NO COMMENT	\N	2014-02-06 20:39:59	2014-02-06 20:39:59
737	1	365	NO COMMENT	\N	2014-03-06 06:18:30	2014-03-06 06:18:30
738	7	366	NO COMMENT	\N	2014-05-05 11:25:02	2014-05-05 11:25:02
739	1	366	NO COMMENT	\N	2014-05-12 21:41:00	2014-05-12 21:41:00
740	7	367	NO COMMENT	\N	2014-04-06 23:25:44	2014-04-06 23:25:44
741	1	367	NO COMMENT	\N	2014-04-26 02:58:33	2014-04-26 02:58:33
742	25	367	NO COMMENT	\N	2014-05-21 12:57:53	2014-05-21 12:57:53
743	7	368	NO COMMENT	\N	2014-04-20 02:03:10	2014-04-20 02:03:10
744	25	368	NO COMMENT	\N	2014-05-02 10:54:55	2014-05-02 10:54:55
745	1	368	NO COMMENT	\N	2014-05-18 08:36:49	2014-05-18 08:36:49
746	1	381	NO COMMENT	\N	2014-01-24 00:32:10	2014-01-24 00:32:10
747	7	381	NO COMMENT	\N	2014-04-04 08:43:22	2014-04-04 08:43:22
748	7	370	NO COMMENT	\N	2014-02-23 23:33:47	2014-02-23 23:33:47
749	1	370	NO COMMENT	\N	2014-05-21 20:07:15	2014-05-21 20:07:15
750	1	371	NO COMMENT	\N	2014-03-29 06:00:41	2014-03-29 06:00:41
751	7	371	NO COMMENT	\N	2014-05-04 14:18:10	2014-05-04 14:18:10
752	7	372	NO COMMENT	\N	2014-03-08 16:27:01	2014-03-08 16:27:01
753	1	372	NO COMMENT	\N	2014-03-23 03:54:27	2014-03-23 03:54:27
754	1	373	NO COMMENT	\N	2014-04-04 22:58:17	2014-04-04 22:58:17
755	7	373	NO COMMENT	\N	2014-05-05 23:42:01	2014-05-05 23:42:01
756	7	374	NO COMMENT	\N	2014-03-25 19:02:45	2014-03-25 19:02:45
757	35	374	NO COMMENT	\N	2014-04-01 07:41:36	2014-04-01 07:41:36
758	36	374	NO COMMENT	\N	2014-05-05 01:30:20	2014-05-05 01:30:20
759	1	374	NO COMMENT	\N	2014-05-10 03:12:11	2014-05-10 03:12:11
760	7	375	NO COMMENT	\N	2014-04-13 08:34:57	2014-04-13 08:34:57
761	1	376	NO COMMENT	\N	2014-04-20 00:32:59	2014-04-20 00:32:59
762	16	376	NO COMMENT	\N	2014-04-20 04:24:02	2014-04-20 04:24:02
763	18	376	NO COMMENT	\N	2014-05-03 22:36:31	2014-05-03 22:36:31
764	7	377	NO COMMENT	\N	2014-04-30 11:52:02	2014-04-30 11:52:02
765	1	377	NO COMMENT	\N	2014-05-22 16:20:58	2014-05-22 16:20:58
766	1	378	NO COMMENT	\N	2014-02-07 21:25:50	2014-02-07 21:25:50
767	7	378	NO COMMENT	\N	2014-03-20 02:31:09	2014-03-20 02:31:09
768	7	379	NO COMMENT	\N	2014-03-02 18:00:03	2014-03-02 18:00:03
769	1	379	NO COMMENT	\N	2014-05-13 06:16:24	2014-05-13 06:16:24
770	7	380	NO COMMENT	\N	2014-01-01 08:36:31	2014-01-01 08:36:31
771	1	380	NO COMMENT	\N	2014-04-08 17:51:54	2014-04-08 17:51:54
772	1	383	NO COMMENT	\N	2014-03-30 14:19:40	2014-03-30 14:19:40
773	7	383	NO COMMENT	\N	2014-05-10 15:34:24	2014-05-10 15:34:24
774	7	385	NO COMMENT	\N	2014-01-17 00:05:33	2014-01-17 00:05:33
775	1	385	NO COMMENT	\N	2014-01-26 16:49:51	2014-01-26 16:49:51
776	1	386	NO COMMENT	\N	2014-04-21 23:39:19	2014-04-21 23:39:19
777	35	386	NO COMMENT	\N	2014-04-27 21:22:08	2014-04-27 21:22:08
778	1	388	NO COMMENT	\N	2014-03-10 06:10:20	2014-03-10 06:10:20
779	7	388	NO COMMENT	\N	2014-05-27 03:24:46	2014-05-27 03:24:46
780	1	389	NO COMMENT	\N	2014-01-07 11:42:21	2014-01-07 11:42:21
781	7	389	NO COMMENT	\N	2014-03-15 17:13:46	2014-03-15 17:13:46
782	1	390	NO COMMENT	\N	2014-03-25 13:06:22	2014-03-25 13:06:22
783	7	390	NO COMMENT	\N	2014-03-27 18:28:11	2014-03-27 18:28:11
784	1	391	NO COMMENT	\N	2014-05-13 17:17:48	2014-05-13 17:17:48
785	7	391	NO COMMENT	\N	2014-05-16 01:26:05	2014-05-16 01:26:05
786	34	392	NO COMMENT	\N	2014-05-07 20:15:50	2014-05-07 20:15:50
787	7	392	NO COMMENT	\N	2014-05-22 18:14:13	2014-05-22 18:14:13
788	16	514	NO COMMENT	\N	2014-05-17 06:32:38	2014-05-17 06:32:38
789	18	514	NO COMMENT	\N	2014-05-17 16:46:55	2014-05-17 16:46:55
790	46	514	NO COMMENT	\N	2014-05-17 19:09:37	2014-05-17 19:09:37
791	12	514	NO COMMENT	\N	2014-05-19 14:56:53	2014-05-19 14:56:53
792	1	514	NO COMMENT	\N	2014-05-20 13:44:40	2014-05-20 13:44:40
793	13	514	NO COMMENT	\N	2014-05-21 05:19:45	2014-05-21 05:19:45
794	6	514	NO COMMENT	\N	2014-05-23 00:56:35	2014-05-23 00:56:35
795	7	514	NO COMMENT	\N	2014-05-24 11:46:26	2014-05-24 11:46:26
796	21	514	NO COMMENT	\N	2014-05-24 15:11:27	2014-05-24 15:11:27
797	35	514	NO COMMENT	\N	2014-05-24 15:39:35	2014-05-24 15:39:35
798	27	514	NO COMMENT	\N	2014-05-25 04:40:20	2014-05-25 04:40:20
799	33	514	NO COMMENT	\N	2014-05-25 04:45:30	2014-05-25 04:45:30
800	44	514	NO COMMENT	\N	2014-05-26 07:40:50	2014-05-26 07:40:50
801	40	514	NO COMMENT	\N	2014-05-26 12:08:50	2014-05-26 12:08:50
802	29	514	NO COMMENT	\N	2014-05-26 17:06:52	2014-05-26 17:06:52
803	2	514	NO COMMENT	\N	2014-05-27 06:56:34	2014-05-27 06:56:34
804	7	395	NO COMMENT	\N	2014-03-17 03:57:51	2014-03-17 03:57:51
805	1	395	NO COMMENT	\N	2014-04-30 04:25:04	2014-04-30 04:25:04
806	1	398	NO COMMENT	\N	2014-05-07 19:57:53	2014-05-07 19:57:53
807	7	398	NO COMMENT	\N	2014-05-24 16:02:44	2014-05-24 16:02:44
808	12	400	NO COMMENT	\N	2014-02-17 06:55:14	2014-02-17 06:55:14
809	7	400	NO COMMENT	\N	2014-04-02 10:31:51	2014-04-02 10:31:51
810	14	400	NO COMMENT	\N	2014-05-16 19:17:40	2014-05-16 19:17:40
811	1	400	NO COMMENT	\N	2014-05-17 07:20:54	2014-05-17 07:20:54
812	1	401	NO COMMENT	\N	2014-02-06 13:16:48	2014-02-06 13:16:48
813	7	401	NO COMMENT	\N	2014-02-19 19:19:18	2014-02-19 19:19:18
814	1	402	NO COMMENT	\N	2014-05-12 02:10:26	2014-05-12 02:10:26
815	7	402	NO COMMENT	\N	2014-05-26 16:57:38	2014-05-26 16:57:38
816	14	403	NO COMMENT	\N	2014-03-20 11:06:49	2014-03-20 11:06:49
817	7	403	NO COMMENT	\N	2014-04-19 10:14:28	2014-04-19 10:14:28
818	1	403	NO COMMENT	\N	2014-04-20 20:15:04	2014-04-20 20:15:04
819	7	404	NO COMMENT	\N	2014-04-03 16:34:16	2014-04-03 16:34:16
820	1	404	NO COMMENT	\N	2014-04-12 22:32:34	2014-04-12 22:32:34
821	14	404	NO COMMENT	\N	2014-05-16 21:05:38	2014-05-16 21:05:38
822	1	417	NO COMMENT	\N	2014-05-07 14:00:19	2014-05-07 14:00:19
823	7	417	NO COMMENT	\N	2014-05-24 09:39:12	2014-05-24 09:39:12
824	1	405	NO COMMENT	\N	2014-04-05 21:38:20	2014-04-05 21:38:20
825	14	405	NO COMMENT	\N	2014-04-21 12:12:22	2014-04-21 12:12:22
826	7	405	NO COMMENT	\N	2014-05-23 19:19:15	2014-05-23 19:19:15
827	1	406	NO COMMENT	\N	2014-03-19 21:11:20	2014-03-19 21:11:20
828	18	406	NO COMMENT	\N	2014-03-31 09:15:47	2014-03-31 09:15:47
829	7	406	NO COMMENT	\N	2014-04-06 02:48:49	2014-04-06 02:48:49
830	6	406	NO COMMENT	\N	2014-04-20 03:07:53	2014-04-20 03:07:53
831	1	407	NO COMMENT	\N	2014-04-16 01:20:16	2014-04-16 01:20:16
832	10	407	NO COMMENT	\N	2014-05-04 04:16:40	2014-05-04 04:16:40
833	14	407	NO COMMENT	\N	2014-05-14 06:23:19	2014-05-14 06:23:19
834	16	407	NO COMMENT	\N	2014-05-18 21:37:21	2014-05-18 21:37:21
835	7	407	NO COMMENT	\N	2014-05-21 07:42:32	2014-05-21 07:42:32
836	16	408	NO COMMENT	\N	2014-04-26 18:19:31	2014-04-26 18:19:31
837	7	408	NO COMMENT	\N	2014-05-02 08:53:20	2014-05-02 08:53:20
838	12	408	NO COMMENT	\N	2014-05-11 19:10:51	2014-05-11 19:10:51
839	12	409	NO COMMENT	\N	2014-05-08 07:26:48	2014-05-08 07:26:48
840	37	409	NO COMMENT	\N	2014-05-22 15:29:02	2014-05-22 15:29:02
841	46	409	NO COMMENT	\N	2014-05-24 23:37:35	2014-05-24 23:37:35
842	1	410	NO COMMENT	\N	2014-04-01 04:50:37	2014-04-01 04:50:37
843	7	410	NO COMMENT	\N	2014-04-30 14:08:26	2014-04-30 14:08:26
844	7	411	NO COMMENT	\N	2014-04-19 03:42:17	2014-04-19 03:42:17
845	1	411	NO COMMENT	\N	2014-04-25 05:32:09	2014-04-25 05:32:09
846	48	413	NO COMMENT	\N	2014-05-22 16:59:43	2014-05-22 16:59:43
847	7	414	NO COMMENT	\N	2014-04-15 11:01:27	2014-04-15 11:01:27
848	1	414	NO COMMENT	\N	2014-05-20 20:31:29	2014-05-20 20:31:29
849	7	415	NO COMMENT	\N	2014-04-15 11:51:33	2014-04-15 11:51:33
850	1	415	NO COMMENT	\N	2014-04-22 00:24:20	2014-04-22 00:24:20
851	7	416	NO COMMENT	\N	2014-05-10 20:24:45	2014-05-10 20:24:45
852	7	418	NO COMMENT	\N	2014-05-10 04:47:58	2014-05-10 04:47:58
853	1	418	NO COMMENT	\N	2014-05-13 04:10:51	2014-05-13 04:10:51
854	1	419	NO COMMENT	\N	2014-04-10 01:11:06	2014-04-10 01:11:06
855	7	419	NO COMMENT	\N	2014-04-23 09:50:23	2014-04-23 09:50:23
856	45	419	NO COMMENT	\N	2014-05-01 08:38:12	2014-05-01 08:38:12
857	10	420	NO COMMENT	\N	2014-05-26 17:12:31	2014-05-26 17:12:31
858	1	421	NO COMMENT	\N	2014-04-24 15:14:58	2014-04-24 15:14:58
859	10	421	NO COMMENT	\N	2014-04-26 20:10:19	2014-04-26 20:10:19
860	12	422	NO COMMENT	\N	2014-04-30 18:00:59	2014-04-30 18:00:59
861	43	422	NO COMMENT	\N	2014-05-04 18:34:20	2014-05-04 18:34:20
862	10	422	NO COMMENT	\N	2014-05-07 03:50:05	2014-05-07 03:50:05
863	6	422	NO COMMENT	\N	2014-05-11 19:26:54	2014-05-11 19:26:54
864	37	422	NO COMMENT	\N	2014-05-23 03:08:52	2014-05-23 03:08:52
865	36	423	NO COMMENT	\N	2014-05-17 17:39:12	2014-05-17 17:39:12
866	14	423	NO COMMENT	\N	2014-05-25 18:10:20	2014-05-25 18:10:20
867	1	424	NO COMMENT	\N	2014-04-09 02:28:22	2014-04-09 02:28:22
868	7	425	NO COMMENT	\N	2014-04-08 15:46:07	2014-04-08 15:46:07
869	1	425	NO COMMENT	\N	2014-04-29 17:34:39	2014-04-29 17:34:39
870	14	425	NO COMMENT	\N	2014-05-15 22:38:15	2014-05-15 22:38:15
871	7	427	NO COMMENT	\N	2014-05-15 05:11:08	2014-05-15 05:11:08
872	1	427	NO COMMENT	\N	2014-05-20 21:46:51	2014-05-20 21:46:51
873	1	428	NO COMMENT	\N	2014-04-28 19:07:56	2014-04-28 19:07:56
874	7	428	NO COMMENT	\N	2014-05-16 04:00:37	2014-05-16 04:00:37
875	7	429	NO COMMENT	\N	2014-05-12 20:42:47	2014-05-12 20:42:47
876	1	429	NO COMMENT	\N	2014-05-15 15:14:39	2014-05-15 15:14:39
877	1	430	NO COMMENT	\N	2014-05-04 19:28:55	2014-05-04 19:28:55
878	7	430	NO COMMENT	\N	2014-05-21 16:35:34	2014-05-21 16:35:34
879	7	432	NO COMMENT	\N	2014-04-09 08:31:02	2014-04-09 08:31:02
880	1	432	NO COMMENT	\N	2014-04-28 16:55:35	2014-04-28 16:55:35
881	41	433	NO COMMENT	\N	2014-04-29 03:25:53	2014-04-29 03:25:53
882	48	433	NO COMMENT	\N	2014-05-18 03:47:47	2014-05-18 03:47:47
883	1	434	NO COMMENT	\N	2014-03-29 20:17:02	2014-03-29 20:17:02
884	12	434	NO COMMENT	\N	2014-04-08 05:35:31	2014-04-08 05:35:31
885	14	434	NO COMMENT	\N	2014-05-13 19:45:36	2014-05-13 19:45:36
886	7	434	NO COMMENT	\N	2014-05-22 10:27:31	2014-05-22 10:27:31
887	7	438	NO COMMENT	\N	2014-04-16 16:38:11	2014-04-16 16:38:11
888	1	438	NO COMMENT	\N	2014-05-03 06:27:14	2014-05-03 06:27:14
889	11	438	NO COMMENT	\N	2014-05-04 04:39:20	2014-05-04 04:39:20
890	7	439	NO COMMENT	\N	2014-05-08 18:33:46	2014-05-08 18:33:46
891	7	440	NO COMMENT	\N	2014-03-24 18:34:47	2014-03-24 18:34:47
892	7	441	NO COMMENT	\N	2014-04-29 08:48:28	2014-04-29 08:48:28
893	36	443	NO COMMENT	\N	2014-03-17 17:39:24	2014-03-17 17:39:24
894	35	443	NO COMMENT	\N	2014-03-29 09:58:09	2014-03-29 09:58:09
895	7	443	NO COMMENT	\N	2014-04-21 10:55:03	2014-04-21 10:55:03
896	36	444	NO COMMENT	\N	2014-04-08 05:49:19	2014-04-08 05:49:19
897	27	445	NO COMMENT	\N	2014-05-06 02:27:59	2014-05-06 02:27:59
898	11	445	NO COMMENT	\N	2014-05-08 11:51:51	2014-05-08 11:51:51
899	9	445	NO COMMENT	\N	2014-05-11 23:11:14	2014-05-11 23:11:14
900	45	445	NO COMMENT	\N	2014-05-15 18:11:33	2014-05-15 18:11:33
901	7	445	NO COMMENT	\N	2014-05-16 07:57:27	2014-05-16 07:57:27
902	47	445	NO COMMENT	\N	2014-05-19 05:41:28	2014-05-19 05:41:28
903	42	445	NO COMMENT	\N	2014-05-19 10:11:30	2014-05-19 10:11:30
904	35	445	NO COMMENT	\N	2014-05-21 10:23:36	2014-05-21 10:23:36
905	46	445	NO COMMENT	\N	2014-05-22 05:53:46	2014-05-22 05:53:46
906	19	445	NO COMMENT	\N	2014-05-26 05:24:59	2014-05-26 05:24:59
907	7	446	NO COMMENT	\N	2014-03-18 16:43:06	2014-03-18 16:43:06
908	21	447	NO COMMENT	\N	2014-04-14 13:41:55	2014-04-14 13:41:55
909	7	450	NO COMMENT	\N	2014-04-07 17:17:02	2014-04-07 17:17:02
910	34	451	NO COMMENT	\N	2014-04-21 15:04:49	2014-04-21 15:04:49
911	7	451	NO COMMENT	\N	2014-05-25 08:52:23	2014-05-25 08:52:23
912	7	452	NO COMMENT	\N	2014-05-18 12:07:57	2014-05-18 12:07:57
913	7	453	NO COMMENT	\N	2014-05-27 08:57:33	2014-05-27 08:57:33
914	7	454	NO COMMENT	\N	2014-05-13 15:44:27	2014-05-13 15:44:27
915	7	455	NO COMMENT	\N	2014-05-17 15:54:37	2014-05-17 15:54:37
916	7	456	NO COMMENT	\N	2014-04-21 12:13:47	2014-04-21 12:13:47
917	7	458	NO COMMENT	\N	2014-05-10 03:31:48	2014-05-10 03:31:48
918	7	460	NO COMMENT	\N	2014-04-25 15:29:05	2014-04-25 15:29:05
919	7	461	NO COMMENT	\N	2014-04-28 07:54:46	2014-04-28 07:54:46
920	7	462	NO COMMENT	\N	2014-04-26 13:09:07	2014-04-26 13:09:07
921	7	463	NO COMMENT	\N	2014-03-03 01:00:16	2014-03-03 01:00:16
922	7	465	NO COMMENT	\N	2014-04-23 23:07:10	2014-04-23 23:07:10
923	7	466	NO COMMENT	\N	2014-04-26 07:31:30	2014-04-26 07:31:30
924	45	467	NO COMMENT	\N	2014-04-20 23:13:47	2014-04-20 23:13:47
925	7	467	NO COMMENT	\N	2014-05-06 22:23:06	2014-05-06 22:23:06
926	7	468	NO COMMENT	\N	2014-04-11 22:12:54	2014-04-11 22:12:54
927	12	468	NO COMMENT	\N	2014-05-15 21:21:43	2014-05-15 21:21:43
928	44	469	NO COMMENT	\N	2014-05-05 02:20:54	2014-05-05 02:20:54
929	25	469	NO COMMENT	\N	2014-05-10 22:24:26	2014-05-10 22:24:26
930	7	469	NO COMMENT	\N	2014-05-14 19:26:38	2014-05-14 19:26:38
931	16	469	NO COMMENT	\N	2014-05-14 22:58:53	2014-05-14 22:58:53
932	10	469	NO COMMENT	\N	2014-05-23 03:42:15	2014-05-23 03:42:15
933	23	469	NO COMMENT	\N	2014-05-25 08:46:22	2014-05-25 08:46:22
934	29	469	NO COMMENT	\N	2014-05-26 00:56:39	2014-05-26 00:56:39
935	7	470	NO COMMENT	\N	2014-05-12 04:39:01	2014-05-12 04:39:01
936	7	471	NO COMMENT	\N	2014-04-08 09:54:18	2014-04-08 09:54:18
937	7	473	NO COMMENT	\N	2014-04-21 23:33:48	2014-04-21 23:33:48
938	41	474	NO COMMENT	\N	2014-05-17 19:57:36	2014-05-17 19:57:36
939	35	474	NO COMMENT	\N	2014-05-19 01:05:40	2014-05-19 01:05:40
940	7	474	NO COMMENT	\N	2014-05-20 03:32:18	2014-05-20 03:32:18
941	37	474	NO COMMENT	\N	2014-05-26 09:04:47	2014-05-26 09:04:47
942	37	475	NO COMMENT	\N	2014-05-23 21:39:57	2014-05-23 21:39:57
943	7	475	NO COMMENT	\N	2014-05-25 18:07:15	2014-05-25 18:07:15
944	35	475	NO COMMENT	\N	2014-05-26 23:50:23	2014-05-26 23:50:23
945	7	476	NO COMMENT	\N	2014-05-01 15:30:24	2014-05-01 15:30:24
946	7	477	NO COMMENT	\N	2014-03-30 16:13:19	2014-03-30 16:13:19
947	7	478	NO COMMENT	\N	2014-03-16 11:45:21	2014-03-16 11:45:21
948	7	479	NO COMMENT	\N	2014-05-13 21:54:49	2014-05-13 21:54:49
949	7	480	NO COMMENT	\N	2014-05-08 09:53:20	2014-05-08 09:53:20
950	7	481	NO COMMENT	\N	2014-05-20 18:05:16	2014-05-20 18:05:16
951	7	483	NO COMMENT	\N	2014-04-15 05:36:46	2014-04-15 05:36:46
952	7	488	NO COMMENT	\N	2014-01-11 05:44:38	2014-01-11 05:44:38
953	2	488	NO COMMENT	\N	2014-01-22 18:31:20	2014-01-22 18:31:20
954	1	488	NO COMMENT	\N	2014-02-20 09:58:45	2014-02-20 09:58:45
955	2	515	NO COMMENT	\N	2014-05-19 08:45:04	2014-05-19 08:45:04
956	1	515	NO COMMENT	\N	2014-05-22 08:11:46	2014-05-22 08:11:46
957	27	515	NO COMMENT	\N	2014-05-22 21:04:45	2014-05-22 21:04:45
958	21	515	NO COMMENT	\N	2014-05-23 12:28:14	2014-05-23 12:28:14
959	32	515	NO COMMENT	\N	2014-05-23 17:28:07	2014-05-23 17:28:07
960	7	489	NO COMMENT	\N	2013-12-20 21:22:54	2013-12-20 21:22:54
961	1	489	NO COMMENT	\N	2014-01-19 02:33:17	2014-01-19 02:33:17
962	7	490	NO COMMENT	\N	2014-02-19 06:08:05	2014-02-19 06:08:05
963	1	490	NO COMMENT	\N	2014-02-21 17:09:13	2014-02-21 17:09:13
964	2	490	NO COMMENT	\N	2014-05-05 13:11:40	2014-05-05 13:11:40
965	7	492	NO COMMENT	\N	2014-04-04 04:39:05	2014-04-04 04:39:05
966	1	492	NO COMMENT	\N	2014-04-12 00:17:40	2014-04-12 00:17:40
967	36	492	NO COMMENT	\N	2014-04-14 13:30:14	2014-04-14 13:30:14
968	2	492	NO COMMENT	\N	2014-04-30 16:01:30	2014-04-30 16:01:30
969	7	493	NO COMMENT	\N	2014-03-22 12:07:07	2014-03-22 12:07:07
970	1	493	NO COMMENT	\N	2014-04-14 07:35:27	2014-04-14 07:35:27
971	2	493	NO COMMENT	\N	2014-05-15 00:10:46	2014-05-15 00:10:46
972	1	495	NO COMMENT	\N	2013-12-16 09:33:19	2013-12-16 09:33:19
973	2	495	NO COMMENT	\N	2014-02-26 13:33:40	2014-02-26 13:33:40
974	7	495	NO COMMENT	\N	2014-05-16 09:24:14	2014-05-16 09:24:14
975	7	496	NO COMMENT	\N	2014-01-27 06:34:14	2014-01-27 06:34:14
976	1	496	NO COMMENT	\N	2014-03-31 07:13:50	2014-03-31 07:13:50
977	2	496	NO COMMENT	\N	2014-04-27 18:56:14	2014-04-27 18:56:14
978	1	499	NO COMMENT	\N	2014-01-13 11:45:21	2014-01-13 11:45:21
979	2	499	NO COMMENT	\N	2014-02-02 13:34:32	2014-02-02 13:34:32
980	7	499	NO COMMENT	\N	2014-03-29 05:45:52	2014-03-29 05:45:52
981	1	500	NO COMMENT	\N	2013-12-29 01:01:32	2013-12-29 01:01:32
982	7	500	NO COMMENT	\N	2014-03-09 05:00:22	2014-03-09 05:00:22
983	2	500	NO COMMENT	\N	2014-05-15 05:25:19	2014-05-15 05:25:19
984	12	516	NO COMMENT	\N	2014-05-27 02:47:00	2014-05-27 02:47:00
985	13	516	NO COMMENT	\N	2014-05-27 03:08:29	2014-05-27 03:08:29
986	21	516	NO COMMENT	\N	2014-05-27 03:36:00	2014-05-27 03:36:00
987	35	516	NO COMMENT	\N	2014-05-27 03:45:05	2014-05-27 03:45:05
988	46	516	NO COMMENT	\N	2014-05-27 04:44:46	2014-05-27 04:44:46
989	9	516	NO COMMENT	\N	2014-05-27 04:53:02	2014-05-27 04:53:02
990	33	516	NO COMMENT	\N	2014-05-27 06:51:07	2014-05-27 06:51:07
991	29	516	NO COMMENT	\N	2014-05-27 08:47:54	2014-05-27 08:47:54
992	2	501	NO COMMENT	\N	2014-03-31 21:12:53	2014-03-31 21:12:53
993	7	501	NO COMMENT	\N	2014-05-10 01:06:35	2014-05-10 01:06:35
994	1	501	NO COMMENT	\N	2014-05-24 00:01:39	2014-05-24 00:01:39
995	1	502	NO COMMENT	\N	2014-03-30 10:22:37	2014-03-30 10:22:37
996	2	502	NO COMMENT	\N	2014-04-28 08:34:28	2014-04-28 08:34:28
997	7	502	NO COMMENT	\N	2014-05-04 09:15:57	2014-05-04 09:15:57
998	16	502	NO COMMENT	\N	2014-05-16 20:52:44	2014-05-16 20:52:44
999	10	502	NO COMMENT	\N	2014-05-24 00:59:47	2014-05-24 00:59:47
1000	7	503	NO COMMENT	\N	2014-01-26 13:03:09	2014-01-26 13:03:09
1001	1	503	NO COMMENT	\N	2014-02-23 07:14:07	2014-02-23 07:14:07
1002	2	503	NO COMMENT	\N	2014-05-13 15:06:46	2014-05-13 15:06:46
1003	2	506	NO COMMENT	\N	2014-01-02 02:01:51	2014-01-02 02:01:51
1004	7	506	NO COMMENT	\N	2014-03-29 20:33:31	2014-03-29 20:33:31
1005	16	506	NO COMMENT	\N	2014-04-05 14:05:41	2014-04-05 14:05:41
1006	1	506	NO COMMENT	\N	2014-04-20 13:40:20	2014-04-20 13:40:20
1007	35	507	NO COMMENT	\N	2014-01-25 00:52:19	2014-01-25 00:52:19
1008	7	507	NO COMMENT	\N	2014-02-11 05:53:11	2014-02-11 05:53:11
1009	1	507	NO COMMENT	\N	2014-02-12 12:19:01	2014-02-12 12:19:01
1010	2	507	NO COMMENT	\N	2014-02-15 14:09:51	2014-02-15 14:09:51
1011	16	507	NO COMMENT	\N	2014-04-21 18:11:59	2014-04-21 18:11:59
1012	7	508	NO COMMENT	\N	2013-12-11 05:35:20	2013-12-11 05:35:20
1013	1	508	NO COMMENT	\N	2014-02-08 10:03:03	2014-02-08 10:03:03
1014	2	508	NO COMMENT	\N	2014-03-16 01:25:39	2014-03-16 01:25:39
1015	7	509	NO COMMENT	\N	2014-05-25 09:46:45	2014-05-25 09:46:45
1016	7	510	NO COMMENT	\N	2014-05-24 13:52:56	2014-05-24 13:52:56
1017	19	511	NO COMMENT	\N	2014-05-23 16:45:37	2014-05-23 16:45:37
1018	7	511	NO COMMENT	\N	2014-05-23 18:41:38	2014-05-23 18:41:38
1019	2	511	NO COMMENT	\N	2014-05-26 12:20:51	2014-05-26 12:20:51
1020	2	512	NO COMMENT	\N	2014-05-19 07:49:15	2014-05-19 07:49:15
1021	23	512	NO COMMENT	\N	2014-05-20 23:29:46	2014-05-20 23:29:46
1022	1	512	NO COMMENT	\N	2014-05-21 13:26:28	2014-05-21 13:26:28
1023	41	512	NO COMMENT	\N	2014-05-23 02:25:26	2014-05-23 02:25:26
1024	40	512	NO COMMENT	\N	2014-05-24 00:26:18	2014-05-24 00:26:18
1025	29	512	NO COMMENT	\N	2014-05-26 03:00:02	2014-05-26 03:00:02
1026	48	512	NO COMMENT	\N	2014-05-26 08:12:14	2014-05-26 08:12:14
1027	13	513	NO COMMENT	\N	2014-05-27 07:19:33	2014-05-27 07:19:33
1028	2	517	NO COMMENT	\N	2014-05-20 05:41:38	2014-05-20 05:41:38
1029	1	517	NO COMMENT	\N	2014-05-22 10:15:32	2014-05-22 10:15:32
1030	7	517	NO COMMENT	\N	2014-05-26 16:31:05	2014-05-26 16:31:05
1031	2	521	NO COMMENT	\N	2014-05-19 02:21:29	2014-05-19 02:21:29
1032	1	521	NO COMMENT	\N	2014-05-19 05:23:14	2014-05-19 05:23:14
1033	7	521	NO COMMENT	\N	2014-05-19 22:25:20	2014-05-19 22:25:20
1034	48	521	NO COMMENT	\N	2014-05-20 20:56:42	2014-05-20 20:56:42
1035	28	521	NO COMMENT	\N	2014-05-23 02:36:03	2014-05-23 02:36:03
1036	9	521	NO COMMENT	\N	2014-05-23 13:37:19	2014-05-23 13:37:19
1037	2	522	NO COMMENT	\N	2014-05-17 04:25:27	2014-05-17 04:25:27
1038	1	522	NO COMMENT	\N	2014-05-21 23:28:19	2014-05-21 23:28:19
1039	1	523	NO COMMENT	\N	2014-05-20 17:44:35	2014-05-20 17:44:35
1040	2	523	NO COMMENT	\N	2014-05-22 17:28:28	2014-05-22 17:28:28
1041	7	524	NO COMMENT	\N	2014-05-21 13:39:20	2014-05-21 13:39:20
1042	2	524	NO COMMENT	\N	2014-05-24 23:56:14	2014-05-24 23:56:14
1043	1	524	NO COMMENT	\N	2014-05-25 12:55:36	2014-05-25 12:55:36
1044	23	525	NO COMMENT	\N	2014-05-24 15:49:54	2014-05-24 15:49:54
1045	27	525	NO COMMENT	\N	2014-05-25 16:20:35	2014-05-25 16:20:35
1046	7	526	NO COMMENT	\N	2014-05-22 03:54:44	2014-05-22 03:54:44
1047	2	526	NO COMMENT	\N	2014-05-22 03:55:43	2014-05-22 03:55:43
1048	1	526	NO COMMENT	\N	2014-05-22 18:31:48	2014-05-22 18:31:48
1049	19	526	NO COMMENT	\N	2014-05-23 02:27:44	2014-05-23 02:27:44
1050	26	527	NO COMMENT	\N	2014-05-23 09:51:35	2014-05-23 09:51:35
1051	1	527	NO COMMENT	\N	2014-05-24 03:01:47	2014-05-24 03:01:47
1052	19	527	NO COMMENT	\N	2014-05-24 11:36:18	2014-05-24 11:36:18
1053	35	528	NO COMMENT	\N	2014-05-19 22:48:58	2014-05-19 22:48:58
1054	48	528	NO COMMENT	\N	2014-05-23 14:12:52	2014-05-23 14:12:52
1055	25	528	NO COMMENT	\N	2014-05-25 02:56:44	2014-05-25 02:56:44
1056	14	528	NO COMMENT	\N	2014-05-25 23:27:20	2014-05-25 23:27:20
1057	16	528	NO COMMENT	\N	2014-05-26 17:27:59	2014-05-26 17:27:59
1058	40	551	NO COMMENT	\N	2014-04-24 11:05:00	2014-04-24 11:05:00
1059	11	551	NO COMMENT	\N	2014-04-28 12:24:47	2014-04-28 12:24:47
1060	35	551	NO COMMENT	\N	2014-05-01 02:44:47	2014-05-01 02:44:47
1061	36	551	NO COMMENT	\N	2014-05-19 23:56:26	2014-05-19 23:56:26
1062	11	529	NO COMMENT	\N	2014-05-19 11:42:27	2014-05-19 11:42:27
1063	18	529	NO COMMENT	\N	2014-05-21 19:10:43	2014-05-21 19:10:43
1064	1	529	NO COMMENT	\N	2014-05-23 07:05:08	2014-05-23 07:05:08
1065	7	530	NO COMMENT	\N	2014-05-26 11:10:45	2014-05-26 11:10:45
1066	2	530	NO COMMENT	\N	2014-05-27 06:22:49	2014-05-27 06:22:49
1067	2	532	NO COMMENT	\N	2014-05-24 20:30:17	2014-05-24 20:30:17
1068	7	532	NO COMMENT	\N	2014-05-26 04:04:44	2014-05-26 04:04:44
1069	27	533	NO COMMENT	\N	2014-05-22 01:01:11	2014-05-22 01:01:11
1070	1	533	NO COMMENT	\N	2014-05-22 21:20:22	2014-05-22 21:20:22
1071	25	534	NO COMMENT	\N	2014-05-18 04:12:27	2014-05-18 04:12:27
1072	23	534	NO COMMENT	\N	2014-05-19 14:04:35	2014-05-19 14:04:35
1073	2	534	NO COMMENT	\N	2014-05-19 18:32:27	2014-05-19 18:32:27
1074	17	534	NO COMMENT	\N	2014-05-21 13:02:30	2014-05-21 13:02:30
1075	27	534	NO COMMENT	\N	2014-05-21 16:40:35	2014-05-21 16:40:35
1076	7	536	NO COMMENT	\N	2013-12-18 22:57:22	2013-12-18 22:57:22
1077	14	536	NO COMMENT	\N	2013-12-20 05:15:07	2013-12-20 05:15:07
1078	12	536	NO COMMENT	\N	2014-01-16 13:48:17	2014-01-16 13:48:17
1079	12	537	NO COMMENT	\N	2014-01-30 19:22:58	2014-01-30 19:22:58
1080	14	537	NO COMMENT	\N	2014-03-18 02:00:53	2014-03-18 02:00:53
1081	7	537	NO COMMENT	\N	2014-05-09 12:39:27	2014-05-09 12:39:27
1082	14	538	NO COMMENT	\N	2014-04-07 02:55:47	2014-04-07 02:55:47
1083	12	538	NO COMMENT	\N	2014-04-17 09:53:19	2014-04-17 09:53:19
1084	7	538	NO COMMENT	\N	2014-04-18 07:11:43	2014-04-18 07:11:43
1085	47	539	NO COMMENT	\N	2014-05-17 17:39:11	2014-05-17 17:39:11
1086	35	539	NO COMMENT	\N	2014-05-18 22:42:32	2014-05-18 22:42:32
1087	43	539	NO COMMENT	\N	2014-05-19 23:01:38	2014-05-19 23:01:38
1088	14	539	NO COMMENT	\N	2014-05-20 08:59:18	2014-05-20 08:59:18
1089	16	539	NO COMMENT	\N	2014-05-22 06:08:47	2014-05-22 06:08:47
1090	29	539	NO COMMENT	\N	2014-05-22 12:14:27	2014-05-22 12:14:27
1091	20	539	NO COMMENT	\N	2014-05-22 21:16:34	2014-05-22 21:16:34
1092	48	539	NO COMMENT	\N	2014-05-23 04:30:49	2014-05-23 04:30:49
1093	25	539	NO COMMENT	\N	2014-05-24 00:42:15	2014-05-24 00:42:15
1094	7	539	NO COMMENT	\N	2014-05-24 20:12:50	2014-05-24 20:12:50
1095	12	539	NO COMMENT	\N	2014-05-25 15:15:52	2014-05-25 15:15:52
1096	48	540	NO COMMENT	\N	2014-05-14 09:50:57	2014-05-14 09:50:57
1097	7	540	NO COMMENT	\N	2014-05-21 21:59:04	2014-05-21 21:59:04
1098	37	540	NO COMMENT	\N	2014-05-26 19:59:49	2014-05-26 19:59:49
1099	7	567	NO COMMENT	\N	2014-03-21 18:41:59	2014-03-21 18:41:59
1100	2	794	NO COMMENT	\N	2014-02-20 13:00:50	2014-02-20 13:00:50
1101	7	794	NO COMMENT	\N	2014-04-11 07:55:04	2014-04-11 07:55:04
1102	25	794	NO COMMENT	\N	2014-04-20 18:13:22	2014-04-20 18:13:22
1103	1	794	NO COMMENT	\N	2014-05-08 10:54:06	2014-05-08 10:54:06
1104	7	541	NO COMMENT	\N	2014-05-11 09:51:56	2014-05-11 09:51:56
1105	7	542	NO COMMENT	\N	2014-03-27 05:01:24	2014-03-27 05:01:24
1106	7	544	NO COMMENT	\N	2014-03-02 19:09:33	2014-03-02 19:09:33
1107	7	545	NO COMMENT	\N	2014-03-01 10:06:43	2014-03-01 10:06:43
1108	7	546	NO COMMENT	\N	2014-01-24 15:15:26	2014-01-24 15:15:26
1109	35	547	NO COMMENT	\N	2014-05-10 11:05:21	2014-05-10 11:05:21
1110	36	547	NO COMMENT	\N	2014-05-19 00:15:34	2014-05-19 00:15:34
1111	7	547	NO COMMENT	\N	2014-05-25 05:43:03	2014-05-25 05:43:03
1112	35	548	NO COMMENT	\N	2014-04-07 22:57:13	2014-04-07 22:57:13
1113	7	548	NO COMMENT	\N	2014-05-19 18:04:56	2014-05-19 18:04:56
1114	36	548	NO COMMENT	\N	2014-05-20 08:26:24	2014-05-20 08:26:24
1115	7	549	NO COMMENT	\N	2014-03-08 03:57:20	2014-03-08 03:57:20
1116	36	549	NO COMMENT	\N	2014-03-24 00:56:57	2014-03-24 00:56:57
1117	35	549	NO COMMENT	\N	2014-05-07 15:30:17	2014-05-07 15:30:17
1118	36	550	NO COMMENT	\N	2014-04-02 04:34:34	2014-04-02 04:34:34
1119	7	550	NO COMMENT	\N	2014-04-14 03:02:00	2014-04-14 03:02:00
1120	25	550	NO COMMENT	\N	2014-04-14 05:48:54	2014-04-14 05:48:54
1121	35	550	NO COMMENT	\N	2014-05-21 10:42:09	2014-05-21 10:42:09
1122	7	552	NO COMMENT	\N	2014-04-07 23:59:46	2014-04-07 23:59:46
1123	7	553	NO COMMENT	\N	2014-05-02 04:24:07	2014-05-02 04:24:07
1124	7	554	NO COMMENT	\N	2014-01-15 01:45:42	2014-01-15 01:45:42
1125	7	555	NO COMMENT	\N	2014-05-17 09:31:34	2014-05-17 09:31:34
1126	7	556	NO COMMENT	\N	2014-04-12 04:03:08	2014-04-12 04:03:08
1127	7	557	NO COMMENT	\N	2014-01-19 17:58:59	2014-01-19 17:58:59
1128	48	557	NO COMMENT	\N	2014-01-24 19:36:49	2014-01-24 19:36:49
1129	17	558	NO COMMENT	\N	2014-05-10 13:45:38	2014-05-10 13:45:38
1130	7	558	NO COMMENT	\N	2014-05-13 14:13:15	2014-05-13 14:13:15
1131	16	559	NO COMMENT	\N	2014-05-07 22:55:04	2014-05-07 22:55:04
1132	7	559	NO COMMENT	\N	2014-05-12 02:52:03	2014-05-12 02:52:03
1133	7	561	NO COMMENT	\N	2014-02-17 22:32:35	2014-02-17 22:32:35
1134	16	561	NO COMMENT	\N	2014-02-18 09:57:29	2014-02-18 09:57:29
1135	7	562	NO COMMENT	\N	2014-03-17 11:54:33	2014-03-17 11:54:33
1136	35	562	NO COMMENT	\N	2014-05-15 02:19:19	2014-05-15 02:19:19
1137	35	563	NO COMMENT	\N	2014-04-07 06:56:07	2014-04-07 06:56:07
1138	7	563	NO COMMENT	\N	2014-04-11 14:05:19	2014-04-11 14:05:19
1139	16	563	NO COMMENT	\N	2014-04-19 10:15:11	2014-04-19 10:15:11
1140	29	563	NO COMMENT	\N	2014-04-20 13:43:09	2014-04-20 13:43:09
1141	21	563	NO COMMENT	\N	2014-04-29 07:44:18	2014-04-29 07:44:18
1142	6	563	NO COMMENT	\N	2014-05-22 13:10:50	2014-05-22 13:10:50
1143	12	566	NO COMMENT	\N	2014-05-11 05:07:33	2014-05-11 05:07:33
1144	13	566	NO COMMENT	\N	2014-05-21 05:46:55	2014-05-21 05:46:55
1145	35	566	NO COMMENT	\N	2014-05-21 19:10:20	2014-05-21 19:10:20
1146	16	566	NO COMMENT	\N	2014-05-23 20:41:33	2014-05-23 20:41:33
1147	7	569	NO COMMENT	\N	2014-01-17 06:01:57	2014-01-17 06:01:57
1148	7	571	NO COMMENT	\N	2014-03-28 22:25:00	2014-03-28 22:25:00
1149	7	572	NO COMMENT	\N	2014-02-26 02:36:31	2014-02-26 02:36:31
1150	7	573	NO COMMENT	\N	2014-05-18 21:37:57	2014-05-18 21:37:57
1151	7	574	NO COMMENT	\N	2014-04-24 10:53:20	2014-04-24 10:53:20
1152	25	574	NO COMMENT	\N	2014-05-24 09:20:23	2014-05-24 09:20:23
1153	7	578	NO COMMENT	\N	2014-02-17 16:29:04	2014-02-17 16:29:04
1154	1	578	NO COMMENT	\N	2014-03-05 21:47:25	2014-03-05 21:47:25
1155	16	578	NO COMMENT	\N	2014-04-12 05:45:00	2014-04-12 05:45:00
1156	2	578	NO COMMENT	\N	2014-04-19 03:33:50	2014-04-19 03:33:50
1157	35	579	NO COMMENT	\N	2014-04-09 18:03:58	2014-04-09 18:03:58
1158	2	579	NO COMMENT	\N	2014-04-14 00:53:16	2014-04-14 00:53:16
1159	25	579	NO COMMENT	\N	2014-05-08 10:59:16	2014-05-08 10:59:16
1160	1	579	NO COMMENT	\N	2014-05-14 08:12:24	2014-05-14 08:12:24
1161	45	579	NO COMMENT	\N	2014-05-14 13:12:36	2014-05-14 13:12:36
1162	7	579	NO COMMENT	\N	2014-05-19 17:46:50	2014-05-19 17:46:50
1163	36	579	NO COMMENT	\N	2014-05-20 21:43:47	2014-05-20 21:43:47
1164	34	579	NO COMMENT	\N	2014-05-26 16:04:47	2014-05-26 16:04:47
1165	1	580	NO COMMENT	\N	2014-02-24 15:47:37	2014-02-24 15:47:37
1166	2	580	NO COMMENT	\N	2014-03-25 21:13:09	2014-03-25 21:13:09
1167	7	580	NO COMMENT	\N	2014-04-01 13:58:56	2014-04-01 13:58:56
1168	7	581	NO COMMENT	\N	2014-05-11 12:06:40	2014-05-11 12:06:40
1169	1	581	NO COMMENT	\N	2014-05-14 18:44:49	2014-05-14 18:44:49
1170	2	581	NO COMMENT	\N	2014-05-24 07:30:31	2014-05-24 07:30:31
1171	2	582	NO COMMENT	\N	2014-04-08 16:50:14	2014-04-08 16:50:14
1172	1	582	NO COMMENT	\N	2014-04-14 02:54:22	2014-04-14 02:54:22
1173	7	582	NO COMMENT	\N	2014-05-25 15:07:47	2014-05-25 15:07:47
1174	1	583	NO COMMENT	\N	2014-04-12 19:09:57	2014-04-12 19:09:57
1175	7	583	NO COMMENT	\N	2014-05-16 00:14:10	2014-05-16 00:14:10
1176	2	583	NO COMMENT	\N	2014-05-26 21:37:05	2014-05-26 21:37:05
1177	18	585	NO COMMENT	\N	2014-03-21 06:42:10	2014-03-21 06:42:10
1178	2	585	NO COMMENT	\N	2014-04-15 18:09:34	2014-04-15 18:09:34
1179	7	585	NO COMMENT	\N	2014-05-14 18:33:05	2014-05-14 18:33:05
1180	1	585	NO COMMENT	\N	2014-05-17 07:45:17	2014-05-17 07:45:17
1181	43	586	NO COMMENT	\N	2014-04-06 06:43:44	2014-04-06 06:43:44
1182	2	586	NO COMMENT	\N	2014-04-16 08:13:49	2014-04-16 08:13:49
1183	1	586	NO COMMENT	\N	2014-04-18 05:29:54	2014-04-18 05:29:54
1184	7	586	NO COMMENT	\N	2014-05-22 16:10:46	2014-05-22 16:10:46
1185	14	587	NO COMMENT	\N	2014-04-01 19:15:33	2014-04-01 19:15:33
1186	1	587	NO COMMENT	\N	2014-05-18 05:30:37	2014-05-18 05:30:37
1187	12	589	NO COMMENT	\N	2014-04-30 15:17:36	2014-04-30 15:17:36
1188	1	589	NO COMMENT	\N	2014-05-01 00:33:10	2014-05-01 00:33:10
1189	29	589	NO COMMENT	\N	2014-05-06 23:04:12	2014-05-06 23:04:12
1190	7	589	NO COMMENT	\N	2014-05-07 04:45:27	2014-05-07 04:45:27
1191	35	589	NO COMMENT	\N	2014-05-07 19:20:48	2014-05-07 19:20:48
1192	48	589	NO COMMENT	\N	2014-05-07 20:26:30	2014-05-07 20:26:30
1193	20	589	NO COMMENT	\N	2014-05-09 00:53:41	2014-05-09 00:53:41
1194	2	589	NO COMMENT	\N	2014-05-11 06:49:45	2014-05-11 06:49:45
1195	45	590	NO COMMENT	\N	2014-02-08 23:43:29	2014-02-08 23:43:29
1196	7	590	NO COMMENT	\N	2014-02-12 13:05:10	2014-02-12 13:05:10
1197	2	590	NO COMMENT	\N	2014-03-17 07:55:21	2014-03-17 07:55:21
1198	1	590	NO COMMENT	\N	2014-03-20 00:30:59	2014-03-20 00:30:59
1199	1	591	NO COMMENT	\N	2014-03-04 16:30:28	2014-03-04 16:30:28
1200	2	591	NO COMMENT	\N	2014-04-07 22:20:38	2014-04-07 22:20:38
1201	45	591	NO COMMENT	\N	2014-04-20 02:40:21	2014-04-20 02:40:21
1202	7	591	NO COMMENT	\N	2014-04-22 14:03:28	2014-04-22 14:03:28
1203	1	592	NO COMMENT	\N	2014-02-27 01:51:27	2014-02-27 01:51:27
1204	2	592	NO COMMENT	\N	2014-04-22 22:57:16	2014-04-22 22:57:16
1205	7	592	NO COMMENT	\N	2014-04-25 03:28:51	2014-04-25 03:28:51
1206	25	592	NO COMMENT	\N	2014-05-16 11:47:07	2014-05-16 11:47:07
1207	1	594	NO COMMENT	\N	2014-04-13 20:45:43	2014-04-13 20:45:43
1208	7	594	NO COMMENT	\N	2014-05-11 13:45:24	2014-05-11 13:45:24
1209	2	594	NO COMMENT	\N	2014-05-27 01:20:01	2014-05-27 01:20:01
1210	7	595	NO COMMENT	\N	2014-05-03 01:08:09	2014-05-03 01:08:09
1211	1	595	NO COMMENT	\N	2014-05-10 20:35:15	2014-05-10 20:35:15
1212	2	595	NO COMMENT	\N	2014-05-23 16:20:37	2014-05-23 16:20:37
1213	2	597	NO COMMENT	\N	2014-05-01 06:44:10	2014-05-01 06:44:10
1214	2	598	NO COMMENT	\N	2014-05-16 16:25:23	2014-05-16 16:25:23
1215	1	598	NO COMMENT	\N	2014-05-17 02:45:15	2014-05-17 02:45:15
1216	48	598	NO COMMENT	\N	2014-05-24 13:04:27	2014-05-24 13:04:27
1217	7	598	NO COMMENT	\N	2014-05-26 22:37:56	2014-05-26 22:37:56
1218	2	599	NO COMMENT	\N	2014-02-22 04:12:18	2014-02-22 04:12:18
1219	7	599	NO COMMENT	\N	2014-04-08 14:39:06	2014-04-08 14:39:06
1220	1	599	NO COMMENT	\N	2014-04-13 10:24:01	2014-04-13 10:24:01
1221	7	600	NO COMMENT	\N	2014-05-03 21:59:38	2014-05-03 21:59:38
1222	5	600	NO COMMENT	\N	2014-05-04 23:27:02	2014-05-04 23:27:02
1223	21	600	NO COMMENT	\N	2014-05-10 12:42:46	2014-05-10 12:42:46
1224	1	600	NO COMMENT	\N	2014-05-23 02:13:19	2014-05-23 02:13:19
1225	40	600	NO COMMENT	\N	2014-05-25 16:18:23	2014-05-25 16:18:23
1226	2	600	NO COMMENT	\N	2014-05-26 15:15:47	2014-05-26 15:15:47
1227	2	601	NO COMMENT	\N	2014-05-06 02:34:30	2014-05-06 02:34:30
1228	7	601	NO COMMENT	\N	2014-05-13 10:16:18	2014-05-13 10:16:18
1229	1	601	NO COMMENT	\N	2014-05-16 18:50:35	2014-05-16 18:50:35
1230	37	602	NO COMMENT	\N	2014-05-26 00:55:15	2014-05-26 00:55:15
1231	1	603	NO COMMENT	\N	2014-05-26 13:00:45	2014-05-26 13:00:45
1232	2	603	NO COMMENT	\N	2014-05-26 21:05:04	2014-05-26 21:05:04
1233	7	603	NO COMMENT	\N	2014-05-26 23:56:58	2014-05-26 23:56:58
1234	32	603	NO COMMENT	\N	2014-05-27 07:18:19	2014-05-27 07:18:19
1235	14	604	NO COMMENT	\N	2014-03-05 19:41:01	2014-03-05 19:41:01
1236	1	604	NO COMMENT	\N	2014-03-16 09:37:03	2014-03-16 09:37:03
1237	2	604	NO COMMENT	\N	2014-04-16 20:25:19	2014-04-16 20:25:19
1238	7	604	NO COMMENT	\N	2014-05-06 14:42:53	2014-05-06 14:42:53
1239	1	606	NO COMMENT	\N	2014-04-09 06:09:09	2014-04-09 06:09:09
1240	7	606	NO COMMENT	\N	2014-05-02 18:12:21	2014-05-02 18:12:21
1241	7	607	NO COMMENT	\N	2014-05-16 08:55:23	2014-05-16 08:55:23
1242	7	608	NO COMMENT	\N	2014-04-13 12:07:30	2014-04-13 12:07:30
1243	1	608	NO COMMENT	\N	2014-05-20 06:16:15	2014-05-20 06:16:15
1244	1	609	NO COMMENT	\N	2014-03-07 09:01:13	2014-03-07 09:01:13
1245	45	609	NO COMMENT	\N	2014-03-17 03:00:59	2014-03-17 03:00:59
1246	7	609	NO COMMENT	\N	2014-05-08 23:21:29	2014-05-08 23:21:29
1247	1	610	NO COMMENT	\N	2014-03-23 03:51:37	2014-03-23 03:51:37
1248	45	610	NO COMMENT	\N	2014-03-24 05:54:42	2014-03-24 05:54:42
1249	7	610	NO COMMENT	\N	2014-03-30 08:40:40	2014-03-30 08:40:40
1250	1	611	NO COMMENT	\N	2014-05-09 04:37:47	2014-05-09 04:37:47
1251	35	613	NO COMMENT	\N	2014-04-07 18:51:25	2014-04-07 18:51:25
1252	7	613	NO COMMENT	\N	2014-04-25 15:09:56	2014-04-25 15:09:56
1253	1	613	NO COMMENT	\N	2014-05-05 05:14:55	2014-05-05 05:14:55
1254	36	614	NO COMMENT	\N	2014-03-24 12:44:16	2014-03-24 12:44:16
1255	35	614	NO COMMENT	\N	2014-03-28 21:26:26	2014-03-28 21:26:26
1256	1	614	NO COMMENT	\N	2014-03-29 14:10:05	2014-03-29 14:10:05
1257	25	614	NO COMMENT	\N	2014-04-08 10:17:43	2014-04-08 10:17:43
1258	7	614	NO COMMENT	\N	2014-05-08 08:09:08	2014-05-08 08:09:08
1259	1	616	NO COMMENT	\N	2014-03-25 18:41:32	2014-03-25 18:41:32
1260	7	616	NO COMMENT	\N	2014-04-15 18:30:31	2014-04-15 18:30:31
1261	1	617	NO COMMENT	\N	2014-04-05 21:16:03	2014-04-05 21:16:03
1262	19	617	NO COMMENT	\N	2014-04-11 12:05:38	2014-04-11 12:05:38
1263	7	617	NO COMMENT	\N	2014-05-10 21:26:14	2014-05-10 21:26:14
1264	14	618	NO COMMENT	\N	2014-05-21 09:50:52	2014-05-21 09:50:52
1265	29	618	NO COMMENT	\N	2014-05-25 14:22:02	2014-05-25 14:22:02
1266	25	619	NO COMMENT	\N	2014-02-09 23:05:21	2014-02-09 23:05:21
1267	7	619	NO COMMENT	\N	2014-04-29 09:06:34	2014-04-29 09:06:34
1268	1	619	NO COMMENT	\N	2014-05-24 20:10:04	2014-05-24 20:10:04
1269	25	620	NO COMMENT	\N	2014-02-13 10:37:17	2014-02-13 10:37:17
1270	1	620	NO COMMENT	\N	2014-03-15 23:33:37	2014-03-15 23:33:37
1271	7	620	NO COMMENT	\N	2014-04-06 01:22:29	2014-04-06 01:22:29
1272	1	621	NO COMMENT	\N	2014-04-13 21:02:34	2014-04-13 21:02:34
1273	25	621	NO COMMENT	\N	2014-04-26 13:24:52	2014-04-26 13:24:52
1274	29	622	NO COMMENT	\N	2014-05-10 07:52:17	2014-05-10 07:52:17
1275	16	622	NO COMMENT	\N	2014-05-13 08:48:35	2014-05-13 08:48:35
1276	23	622	NO COMMENT	\N	2014-05-14 17:47:51	2014-05-14 17:47:51
1277	25	622	NO COMMENT	\N	2014-05-14 22:13:07	2014-05-14 22:13:07
1278	7	622	NO COMMENT	\N	2014-05-15 22:21:47	2014-05-15 22:21:47
1279	10	622	NO COMMENT	\N	2014-05-18 23:00:37	2014-05-18 23:00:37
1280	44	622	NO COMMENT	\N	2014-05-25 08:02:16	2014-05-25 08:02:16
1281	1	622	NO COMMENT	\N	2014-05-27 05:42:15	2014-05-27 05:42:15
1282	1	624	NO COMMENT	\N	2014-02-24 04:11:28	2014-02-24 04:11:28
1283	7	624	NO COMMENT	\N	2014-05-21 11:48:58	2014-05-21 11:48:58
1284	7	625	NO COMMENT	\N	2014-03-31 04:52:21	2014-03-31 04:52:21
1285	1	625	NO COMMENT	\N	2014-05-08 20:21:16	2014-05-08 20:21:16
1286	7	626	NO COMMENT	\N	2014-05-10 13:19:19	2014-05-10 13:19:19
1287	1	626	NO COMMENT	\N	2014-05-23 23:17:14	2014-05-23 23:17:14
1288	1	627	NO COMMENT	\N	2014-04-21 04:39:50	2014-04-21 04:39:50
1289	1	629	NO COMMENT	\N	2014-04-19 22:08:36	2014-04-19 22:08:36
1290	7	629	NO COMMENT	\N	2014-05-07 17:00:18	2014-05-07 17:00:18
1291	29	629	NO COMMENT	\N	2014-05-16 17:06:53	2014-05-16 17:06:53
1292	7	630	NO COMMENT	\N	2014-04-18 07:59:04	2014-04-18 07:59:04
1293	29	630	NO COMMENT	\N	2014-04-28 12:41:11	2014-04-28 12:41:11
1294	1	630	NO COMMENT	\N	2014-05-19 08:33:45	2014-05-19 08:33:45
1295	7	818	NO COMMENT	\N	2014-03-07 01:59:53	2014-03-07 01:59:53
1296	1	818	NO COMMENT	\N	2014-05-07 12:21:49	2014-05-07 12:21:49
1297	2	818	NO COMMENT	\N	2014-05-13 11:43:19	2014-05-13 11:43:19
1298	29	632	NO COMMENT	\N	2014-03-28 20:24:15	2014-03-28 20:24:15
1299	42	632	NO COMMENT	\N	2014-04-11 18:33:09	2014-04-11 18:33:09
1300	1	632	NO COMMENT	\N	2014-04-15 02:58:00	2014-04-15 02:58:00
1301	7	632	NO COMMENT	\N	2014-04-28 14:35:10	2014-04-28 14:35:10
1302	1	633	NO COMMENT	\N	2014-04-07 03:56:01	2014-04-07 03:56:01
1303	7	633	NO COMMENT	\N	2014-04-19 07:09:19	2014-04-19 07:09:19
1304	29	633	NO COMMENT	\N	2014-05-10 17:39:08	2014-05-10 17:39:08
1305	42	633	NO COMMENT	\N	2014-05-26 11:19:15	2014-05-26 11:19:15
1306	7	634	NO COMMENT	\N	2014-04-16 07:34:59	2014-04-16 07:34:59
1307	1	634	NO COMMENT	\N	2014-05-18 19:00:30	2014-05-18 19:00:30
1308	7	635	NO COMMENT	\N	2014-04-11 19:04:38	2014-04-11 19:04:38
1309	7	636	NO COMMENT	\N	2014-04-02 04:54:58	2014-04-02 04:54:58
1310	7	638	NO COMMENT	\N	2013-12-30 14:09:20	2013-12-30 14:09:20
1311	7	639	NO COMMENT	\N	2014-02-28 20:11:29	2014-02-28 20:11:29
1312	7	640	NO COMMENT	\N	2014-05-20 12:10:15	2014-05-20 12:10:15
1313	4	641	NO COMMENT	\N	2014-03-13 10:41:50	2014-03-13 10:41:50
1314	7	641	NO COMMENT	\N	2014-03-29 00:29:36	2014-03-29 00:29:36
1315	21	641	NO COMMENT	\N	2014-04-15 07:09:22	2014-04-15 07:09:22
1316	29	641	NO COMMENT	\N	2014-04-19 05:16:19	2014-04-19 05:16:19
1317	7	642	NO COMMENT	\N	2014-02-03 12:54:35	2014-02-03 12:54:35
1318	35	644	NO COMMENT	\N	2014-02-03 15:13:52	2014-02-03 15:13:52
1319	16	644	NO COMMENT	\N	2014-03-15 12:54:38	2014-03-15 12:54:38
1320	16	645	NO COMMENT	\N	2014-02-22 19:52:41	2014-02-22 19:52:41
1321	29	645	NO COMMENT	\N	2014-04-01 01:49:00	2014-04-01 01:49:00
1322	35	645	NO COMMENT	\N	2014-04-01 15:59:36	2014-04-01 15:59:36
1323	7	645	NO COMMENT	\N	2014-04-06 01:47:47	2014-04-06 01:47:47
1324	13	647	NO COMMENT	\N	2014-05-08 22:55:21	2014-05-08 22:55:21
1325	7	648	NO COMMENT	\N	2013-12-27 23:37:00	2013-12-27 23:37:00
1326	7	649	NO COMMENT	\N	2014-05-10 01:01:53	2014-05-10 01:01:53
1327	7	650	NO COMMENT	\N	2014-02-20 12:52:52	2014-02-20 12:52:52
1328	43	651	NO COMMENT	\N	2014-04-15 00:43:36	2014-04-15 00:43:36
1329	7	651	NO COMMENT	\N	2014-05-23 00:03:30	2014-05-23 00:03:30
1330	7	652	NO COMMENT	\N	2014-05-15 04:01:37	2014-05-15 04:01:37
1331	7	653	NO COMMENT	\N	2014-03-23 14:38:03	2014-03-23 14:38:03
1332	1	677	NO COMMENT	\N	2014-01-07 11:38:26	2014-01-07 11:38:26
1333	7	677	NO COMMENT	\N	2014-04-20 05:53:43	2014-04-20 05:53:43
1334	7	654	NO COMMENT	\N	2014-01-06 17:13:10	2014-01-06 17:13:10
1335	7	657	NO COMMENT	\N	2014-04-22 21:56:38	2014-04-22 21:56:38
1336	7	659	NO COMMENT	\N	2014-05-20 19:12:37	2014-05-20 19:12:37
1337	44	660	NO COMMENT	\N	2014-05-24 19:30:06	2014-05-24 19:30:06
1338	7	660	NO COMMENT	\N	2014-05-25 15:19:13	2014-05-25 15:19:13
1339	7	661	NO COMMENT	\N	2014-02-18 04:34:56	2014-02-18 04:34:56
1340	7	662	NO COMMENT	\N	2013-11-08 14:18:48	2013-11-08 14:18:48
1341	1	663	NO COMMENT	\N	2013-12-11 16:30:24	2013-12-11 16:30:24
1342	7	663	NO COMMENT	\N	2014-04-28 19:43:21	2014-04-28 19:43:21
1343	7	664	NO COMMENT	\N	2014-02-13 17:41:37	2014-02-13 17:41:37
1344	1	664	NO COMMENT	\N	2014-04-20 08:08:53	2014-04-20 08:08:53
1345	1	667	NO COMMENT	\N	2014-02-28 17:27:51	2014-02-28 17:27:51
1346	7	667	NO COMMENT	\N	2014-03-08 10:40:29	2014-03-08 10:40:29
1347	1	669	NO COMMENT	\N	2014-04-05 19:48:20	2014-04-05 19:48:20
1348	7	670	NO COMMENT	\N	2013-12-10 00:56:41	2013-12-10 00:56:41
1349	1	670	NO COMMENT	\N	2014-01-10 15:44:54	2014-01-10 15:44:54
1350	36	671	NO COMMENT	\N	2014-03-21 17:58:36	2014-03-21 17:58:36
1351	7	671	NO COMMENT	\N	2014-03-30 14:16:04	2014-03-30 14:16:04
1352	35	671	NO COMMENT	\N	2014-04-06 19:13:54	2014-04-06 19:13:54
1353	25	671	NO COMMENT	\N	2014-04-29 01:06:30	2014-04-29 01:06:30
1354	1	671	NO COMMENT	\N	2014-05-02 03:31:19	2014-05-02 03:31:19
1355	35	672	NO COMMENT	\N	2014-05-07 18:23:33	2014-05-07 18:23:33
1356	25	673	NO COMMENT	\N	2014-04-10 01:31:44	2014-04-10 01:31:44
1357	35	673	NO COMMENT	\N	2014-04-12 20:43:45	2014-04-12 20:43:45
1358	34	673	NO COMMENT	\N	2014-04-14 00:37:11	2014-04-14 00:37:11
1359	45	673	NO COMMENT	\N	2014-04-18 09:02:52	2014-04-18 09:02:52
1360	7	673	NO COMMENT	\N	2014-04-19 19:54:09	2014-04-19 19:54:09
1361	1	673	NO COMMENT	\N	2014-05-02 12:58:13	2014-05-02 12:58:13
1362	36	673	NO COMMENT	\N	2014-05-04 15:25:45	2014-05-04 15:25:45
1363	7	675	NO COMMENT	\N	2014-03-02 00:21:55	2014-03-02 00:21:55
1364	1	675	NO COMMENT	\N	2014-04-10 06:37:23	2014-04-10 06:37:23
1365	7	676	NO COMMENT	\N	2014-02-25 14:28:04	2014-02-25 14:28:04
1366	1	676	NO COMMENT	\N	2014-04-09 15:25:47	2014-04-09 15:25:47
1367	4	719	NO COMMENT	\N	2014-04-07 20:53:36	2014-04-07 20:53:36
1368	2	719	NO COMMENT	\N	2014-04-17 20:21:21	2014-04-17 20:21:21
1369	13	719	NO COMMENT	\N	2014-05-06 15:18:34	2014-05-06 15:18:34
1370	1	719	NO COMMENT	\N	2014-05-09 20:21:37	2014-05-09 20:21:37
1371	7	719	NO COMMENT	\N	2014-05-10 14:35:33	2014-05-10 14:35:33
1372	46	719	NO COMMENT	\N	2014-05-12 06:16:18	2014-05-12 06:16:18
1373	1	678	NO COMMENT	\N	2014-03-21 02:55:17	2014-03-21 02:55:17
1374	7	678	NO COMMENT	\N	2014-05-21 03:18:32	2014-05-21 03:18:32
1375	1	679	NO COMMENT	\N	2013-12-31 22:01:01	2013-12-31 22:01:01
1376	7	679	NO COMMENT	\N	2014-01-05 14:13:59	2014-01-05 14:13:59
1377	14	680	NO COMMENT	\N	2014-04-15 21:08:48	2014-04-15 21:08:48
1378	29	680	NO COMMENT	\N	2014-04-16 21:01:49	2014-04-16 21:01:49
1379	7	680	NO COMMENT	\N	2014-04-26 08:54:08	2014-04-26 08:54:08
1380	1	680	NO COMMENT	\N	2014-05-12 13:51:02	2014-05-12 13:51:02
1381	12	680	NO COMMENT	\N	2014-05-22 12:59:11	2014-05-22 12:59:11
1382	1	681	NO COMMENT	\N	2014-03-30 16:00:29	2014-03-30 16:00:29
1383	7	681	NO COMMENT	\N	2014-05-01 10:07:54	2014-05-01 10:07:54
1384	7	682	NO COMMENT	\N	2013-12-14 09:51:30	2013-12-14 09:51:30
1385	1	682	NO COMMENT	\N	2014-02-18 15:37:28	2014-02-18 15:37:28
1386	1	684	NO COMMENT	\N	2014-02-02 08:43:49	2014-02-02 08:43:49
1387	16	684	NO COMMENT	\N	2014-02-16 23:23:10	2014-02-16 23:23:10
1388	7	684	NO COMMENT	\N	2014-02-19 20:31:19	2014-02-19 20:31:19
1389	1	686	NO COMMENT	\N	2013-12-03 23:47:02	2013-12-03 23:47:02
1390	7	686	NO COMMENT	\N	2014-04-15 04:51:15	2014-04-15 04:51:15
1391	7	687	NO COMMENT	\N	2014-03-07 22:37:08	2014-03-07 22:37:08
1392	1	687	NO COMMENT	\N	2014-04-22 21:20:16	2014-04-22 21:20:16
1393	1	689	NO COMMENT	\N	2014-05-07 14:24:18	2014-05-07 14:24:18
1394	7	690	NO COMMENT	\N	2014-02-16 21:15:41	2014-02-16 21:15:41
1395	1	690	NO COMMENT	\N	2014-04-27 11:53:46	2014-04-27 11:53:46
1396	1	692	NO COMMENT	\N	2014-04-14 02:05:18	2014-04-14 02:05:18
1397	7	692	NO COMMENT	\N	2014-05-18 19:45:07	2014-05-18 19:45:07
1398	1	694	NO COMMENT	\N	2014-05-02 10:11:59	2014-05-02 10:11:59
1399	21	697	NO COMMENT	\N	2014-04-11 09:39:35	2014-04-11 09:39:35
1400	2	697	NO COMMENT	\N	2014-04-11 17:18:23	2014-04-11 17:18:23
1401	1	697	NO COMMENT	\N	2014-05-07 10:40:02	2014-05-07 10:40:02
1402	7	697	NO COMMENT	\N	2014-05-21 07:11:28	2014-05-21 07:11:28
1403	2	698	NO COMMENT	\N	2014-01-02 05:10:15	2014-01-02 05:10:15
1404	7	698	NO COMMENT	\N	2014-01-27 23:24:09	2014-01-27 23:24:09
1405	1	698	NO COMMENT	\N	2014-04-14 20:02:16	2014-04-14 20:02:16
1406	2	700	NO COMMENT	\N	2014-01-27 18:35:09	2014-01-27 18:35:09
1407	7	700	NO COMMENT	\N	2014-03-27 10:33:48	2014-03-27 10:33:48
1408	2	701	NO COMMENT	\N	2014-02-27 20:30:03	2014-02-27 20:30:03
1409	7	701	NO COMMENT	\N	2014-03-22 14:10:43	2014-03-22 14:10:43
1410	1	701	NO COMMENT	\N	2014-04-15 03:30:46	2014-04-15 03:30:46
1411	1	702	NO COMMENT	\N	2014-03-08 11:15:41	2014-03-08 11:15:41
1412	7	702	NO COMMENT	\N	2014-04-30 18:07:44	2014-04-30 18:07:44
1413	2	702	NO COMMENT	\N	2014-05-17 11:31:03	2014-05-17 11:31:03
1414	1	703	NO COMMENT	\N	2014-01-02 04:48:13	2014-01-02 04:48:13
1415	2	703	NO COMMENT	\N	2014-02-24 23:53:04	2014-02-24 23:53:04
1416	7	703	NO COMMENT	\N	2014-03-07 17:04:56	2014-03-07 17:04:56
1417	7	704	NO COMMENT	\N	2013-12-18 14:12:35	2013-12-18 14:12:35
1418	1	704	NO COMMENT	\N	2013-12-28 05:06:31	2013-12-28 05:06:31
1419	2	704	NO COMMENT	\N	2014-05-13 21:06:56	2014-05-13 21:06:56
1420	7	705	NO COMMENT	\N	2014-01-03 17:50:10	2014-01-03 17:50:10
1421	2	705	NO COMMENT	\N	2014-01-17 11:45:38	2014-01-17 11:45:38
1422	1	706	NO COMMENT	\N	2013-12-10 20:00:45	2013-12-10 20:00:45
1423	7	706	NO COMMENT	\N	2013-12-16 15:23:10	2013-12-16 15:23:10
1424	2	706	NO COMMENT	\N	2014-01-17 06:12:03	2014-01-17 06:12:03
1425	7	707	NO COMMENT	\N	2014-01-31 08:42:38	2014-01-31 08:42:38
1426	1	707	NO COMMENT	\N	2014-02-16 04:44:27	2014-02-16 04:44:27
1427	2	707	NO COMMENT	\N	2014-03-18 19:37:29	2014-03-18 19:37:29
1428	1	708	NO COMMENT	\N	2014-03-26 09:46:44	2014-03-26 09:46:44
1429	2	709	NO COMMENT	\N	2014-03-05 22:18:56	2014-03-05 22:18:56
1430	1	709	NO COMMENT	\N	2014-04-24 17:03:09	2014-04-24 17:03:09
1431	7	709	NO COMMENT	\N	2014-05-18 00:08:03	2014-05-18 00:08:03
1432	1	710	NO COMMENT	\N	2013-11-25 10:21:27	2013-11-25 10:21:27
1433	2	710	NO COMMENT	\N	2014-02-26 05:22:37	2014-02-26 05:22:37
1434	7	710	NO COMMENT	\N	2014-04-26 15:11:44	2014-04-26 15:11:44
1435	1	711	NO COMMENT	\N	2013-11-14 12:45:39	2013-11-14 12:45:39
1436	2	711	NO COMMENT	\N	2013-12-28 12:04:22	2013-12-28 12:04:22
1437	7	711	NO COMMENT	\N	2014-02-22 01:13:06	2014-02-22 01:13:06
1438	2	712	NO COMMENT	\N	2014-03-28 10:24:51	2014-03-28 10:24:51
1439	7	712	NO COMMENT	\N	2014-04-08 21:37:54	2014-04-08 21:37:54
1440	1	712	NO COMMENT	\N	2014-05-20 06:10:26	2014-05-20 06:10:26
1441	7	713	NO COMMENT	\N	2014-03-16 03:17:26	2014-03-16 03:17:26
1442	2	713	NO COMMENT	\N	2014-03-21 18:52:25	2014-03-21 18:52:25
1443	1	713	NO COMMENT	\N	2014-03-27 17:08:17	2014-03-27 17:08:17
1444	7	714	NO COMMENT	\N	2014-02-16 01:08:26	2014-02-16 01:08:26
1445	2	714	NO COMMENT	\N	2014-05-05 00:49:14	2014-05-05 00:49:14
1446	1	714	NO COMMENT	\N	2014-05-25 01:16:42	2014-05-25 01:16:42
1447	1	715	NO COMMENT	\N	2014-01-22 13:47:00	2014-01-22 13:47:00
1448	7	715	NO COMMENT	\N	2014-03-10 12:57:59	2014-03-10 12:57:59
1449	2	715	NO COMMENT	\N	2014-03-16 19:01:30	2014-03-16 19:01:30
1450	7	716	NO COMMENT	\N	2013-12-17 08:54:55	2013-12-17 08:54:55
1451	2	716	NO COMMENT	\N	2014-01-07 15:09:13	2014-01-07 15:09:13
1452	1	716	NO COMMENT	\N	2014-02-12 11:05:32	2014-02-12 11:05:32
1453	2	717	NO COMMENT	\N	2014-03-19 13:58:00	2014-03-19 13:58:00
1454	7	717	NO COMMENT	\N	2014-04-03 03:11:59	2014-04-03 03:11:59
1455	16	717	NO COMMENT	\N	2014-04-10 11:50:35	2014-04-10 11:50:35
1456	1	717	NO COMMENT	\N	2014-04-28 20:45:26	2014-04-28 20:45:26
1457	10	717	NO COMMENT	\N	2014-05-07 01:47:09	2014-05-07 01:47:09
1458	1	718	NO COMMENT	\N	2014-04-15 03:41:02	2014-04-15 03:41:02
1459	4	718	NO COMMENT	\N	2014-04-18 13:46:56	2014-04-18 13:46:56
1460	7	718	NO COMMENT	\N	2014-04-20 16:10:10	2014-04-20 16:10:10
1461	13	718	NO COMMENT	\N	2014-04-21 05:23:17	2014-04-21 05:23:17
1462	46	718	NO COMMENT	\N	2014-05-07 10:23:20	2014-05-07 10:23:20
1463	2	718	NO COMMENT	\N	2014-05-15 01:21:52	2014-05-15 01:21:52
1464	7	722	NO COMMENT	\N	2014-04-25 07:19:17	2014-04-25 07:19:17
1465	1	722	NO COMMENT	\N	2014-05-05 07:52:03	2014-05-05 07:52:03
1466	2	722	NO COMMENT	\N	2014-05-06 16:17:49	2014-05-06 16:17:49
1467	48	722	NO COMMENT	\N	2014-05-09 04:07:49	2014-05-09 04:07:49
1468	4	722	NO COMMENT	\N	2014-05-13 20:49:24	2014-05-13 20:49:24
1469	9	722	NO COMMENT	\N	2014-05-19 15:09:04	2014-05-19 15:09:04
1470	18	722	NO COMMENT	\N	2014-05-25 20:21:11	2014-05-25 20:21:11
1471	1	723	NO COMMENT	\N	2014-04-08 14:59:35	2014-04-08 14:59:35
1472	2	723	NO COMMENT	\N	2014-04-09 21:06:09	2014-04-09 21:06:09
1473	1	724	NO COMMENT	\N	2014-05-15 01:48:58	2014-05-15 01:48:58
1474	2	724	NO COMMENT	\N	2014-05-19 07:35:52	2014-05-19 07:35:52
1475	14	724	NO COMMENT	\N	2014-05-20 20:43:17	2014-05-20 20:43:17
1476	7	724	NO COMMENT	\N	2014-05-24 11:52:14	2014-05-24 11:52:14
1477	7	725	NO COMMENT	\N	2014-05-15 22:50:37	2014-05-15 22:50:37
1478	1	725	NO COMMENT	\N	2014-05-16 00:21:30	2014-05-16 00:21:30
1479	2	725	NO COMMENT	\N	2014-05-16 21:21:13	2014-05-16 21:21:13
1480	14	725	NO COMMENT	\N	2014-05-24 02:04:37	2014-05-24 02:04:37
1481	14	726	NO COMMENT	\N	2014-05-25 01:29:01	2014-05-25 01:29:01
1482	2	726	NO COMMENT	\N	2014-05-25 08:48:18	2014-05-25 08:48:18
1483	7	726	NO COMMENT	\N	2014-05-25 18:34:24	2014-05-25 18:34:24
1484	1	726	NO COMMENT	\N	2014-05-26 06:48:34	2014-05-26 06:48:34
1485	1	727	NO COMMENT	\N	2014-05-01 17:44:16	2014-05-01 17:44:16
1486	7	727	NO COMMENT	\N	2014-05-05 19:33:50	2014-05-05 19:33:50
1487	2	727	NO COMMENT	\N	2014-05-18 08:11:19	2014-05-18 08:11:19
1488	9	727	NO COMMENT	\N	2014-05-22 05:37:20	2014-05-22 05:37:20
1489	2	728	NO COMMENT	\N	2014-05-13 06:03:06	2014-05-13 06:03:06
1490	7	728	NO COMMENT	\N	2014-05-15 14:13:56	2014-05-15 14:13:56
1491	1	728	NO COMMENT	\N	2014-05-16 07:07:52	2014-05-16 07:07:52
1492	32	729	NO COMMENT	\N	2014-05-13 22:23:50	2014-05-13 22:23:50
1493	1	729	NO COMMENT	\N	2014-05-14 09:48:18	2014-05-14 09:48:18
1494	32	730	NO COMMENT	\N	2014-05-13 05:11:09	2014-05-13 05:11:09
1495	2	730	NO COMMENT	\N	2014-05-13 19:00:23	2014-05-13 19:00:23
1496	1	730	NO COMMENT	\N	2014-05-25 04:28:39	2014-05-25 04:28:39
1497	7	730	NO COMMENT	\N	2014-05-26 09:50:49	2014-05-26 09:50:49
1498	1	731	NO COMMENT	\N	2014-05-16 22:37:29	2014-05-16 22:37:29
1499	7	731	NO COMMENT	\N	2014-05-18 13:41:46	2014-05-18 13:41:46
1500	2	731	NO COMMENT	\N	2014-05-20 21:14:01	2014-05-20 21:14:01
1501	32	731	NO COMMENT	\N	2014-05-23 19:22:31	2014-05-23 19:22:31
1502	7	735	NO COMMENT	\N	2014-05-13 09:05:32	2014-05-13 09:05:32
1503	1	735	NO COMMENT	\N	2014-05-24 13:50:40	2014-05-24 13:50:40
1504	2	735	NO COMMENT	\N	2014-05-26 17:13:27	2014-05-26 17:13:27
1505	7	736	NO COMMENT	\N	2014-05-06 11:03:55	2014-05-06 11:03:55
1506	2	736	NO COMMENT	\N	2014-05-08 03:24:07	2014-05-08 03:24:07
1507	19	736	NO COMMENT	\N	2014-05-12 20:44:10	2014-05-12 20:44:10
1508	1	736	NO COMMENT	\N	2014-05-19 14:17:34	2014-05-19 14:17:34
1509	2	737	NO COMMENT	\N	2014-05-19 14:04:00	2014-05-19 14:04:00
1510	1	737	NO COMMENT	\N	2014-05-24 21:33:10	2014-05-24 21:33:10
1511	21	737	NO COMMENT	\N	2014-05-25 14:20:50	2014-05-25 14:20:50
1512	2	738	NO COMMENT	\N	2014-05-23 18:01:42	2014-05-23 18:01:42
1513	21	738	NO COMMENT	\N	2014-05-24 00:43:53	2014-05-24 00:43:53
1514	1	738	NO COMMENT	\N	2014-05-25 01:09:06	2014-05-25 01:09:06
1515	7	738	NO COMMENT	\N	2014-05-25 16:57:20	2014-05-25 16:57:20
1516	1	739	NO COMMENT	\N	2014-05-08 02:45:32	2014-05-08 02:45:32
1517	2	739	NO COMMENT	\N	2014-05-11 07:28:40	2014-05-11 07:28:40
1518	16	739	NO COMMENT	\N	2014-05-13 05:12:51	2014-05-13 05:12:51
1519	7	739	NO COMMENT	\N	2014-05-22 13:43:14	2014-05-22 13:43:14
1520	18	739	NO COMMENT	\N	2014-05-24 02:35:03	2014-05-24 02:35:03
1521	25	742	NO COMMENT	\N	2014-05-14 01:01:42	2014-05-14 01:01:42
1522	2	742	NO COMMENT	\N	2014-05-22 23:34:34	2014-05-22 23:34:34
1523	1	742	NO COMMENT	\N	2014-05-26 08:33:58	2014-05-26 08:33:58
1524	29	742	NO COMMENT	\N	2014-05-27 04:24:44	2014-05-27 04:24:44
1525	10	743	NO COMMENT	\N	2014-05-19 21:48:31	2014-05-19 21:48:31
1526	1	743	NO COMMENT	\N	2014-05-21 21:50:46	2014-05-21 21:50:46
1527	5	743	NO COMMENT	\N	2014-05-22 18:39:26	2014-05-22 18:39:26
1528	44	743	NO COMMENT	\N	2014-05-23 06:57:59	2014-05-23 06:57:59
1529	26	743	NO COMMENT	\N	2014-05-24 20:07:03	2014-05-24 20:07:03
1530	43	744	NO COMMENT	\N	2014-05-14 07:05:00	2014-05-14 07:05:00
1531	7	745	NO COMMENT	\N	2014-05-21 16:55:40	2014-05-21 16:55:40
1532	7	746	NO COMMENT	\N	2014-05-16 16:57:14	2014-05-16 16:57:14
1533	41	748	NO COMMENT	\N	2014-05-06 00:44:10	2014-05-06 00:44:10
1534	48	749	NO COMMENT	\N	2014-05-16 15:37:51	2014-05-16 15:37:51
1535	47	750	NO COMMENT	\N	2014-05-18 02:34:12	2014-05-18 02:34:12
1536	1	750	NO COMMENT	\N	2014-05-20 11:14:21	2014-05-20 11:14:21
1537	7	750	NO COMMENT	\N	2014-05-25 07:40:55	2014-05-25 07:40:55
1538	2	750	NO COMMENT	\N	2014-05-26 10:26:58	2014-05-26 10:26:58
1539	7	751	NO COMMENT	\N	2014-05-12 13:12:09	2014-05-12 13:12:09
1540	2	751	NO COMMENT	\N	2014-05-14 17:54:21	2014-05-14 17:54:21
1541	1	752	NO COMMENT	\N	2014-05-14 05:35:10	2014-05-14 05:35:10
1542	2	754	NO COMMENT	\N	2014-05-14 13:28:42	2014-05-14 13:28:42
1543	1	754	NO COMMENT	\N	2014-05-22 06:50:10	2014-05-22 06:50:10
1544	7	754	NO COMMENT	\N	2014-05-26 06:40:31	2014-05-26 06:40:31
1545	19	755	NO COMMENT	\N	2014-05-19 23:23:13	2014-05-19 23:23:13
1546	2	755	NO COMMENT	\N	2014-05-24 06:46:49	2014-05-24 06:46:49
1547	1	755	NO COMMENT	\N	2014-05-26 13:07:12	2014-05-26 13:07:12
1548	2	756	NO COMMENT	\N	2014-02-15 10:18:24	2014-02-15 10:18:24
1549	7	756	NO COMMENT	\N	2014-04-28 05:34:47	2014-04-28 05:34:47
1550	1	756	NO COMMENT	\N	2014-05-21 12:01:40	2014-05-21 12:01:40
1551	7	757	NO COMMENT	\N	2014-04-06 06:22:45	2014-04-06 06:22:45
1552	2	757	NO COMMENT	\N	2014-05-08 07:18:12	2014-05-08 07:18:12
1553	2	758	NO COMMENT	\N	2013-11-15 01:43:02	2013-11-15 01:43:02
1554	1	758	NO COMMENT	\N	2013-11-26 17:13:58	2013-11-26 17:13:58
1555	1	759	NO COMMENT	\N	2014-01-02 02:07:48	2014-01-02 02:07:48
1556	7	759	NO COMMENT	\N	2014-03-27 19:27:52	2014-03-27 19:27:52
1557	2	759	NO COMMENT	\N	2014-04-02 14:39:47	2014-04-02 14:39:47
1558	2	760	NO COMMENT	\N	2013-10-28 03:22:37	2013-10-28 03:22:37
1559	7	760	NO COMMENT	\N	2014-04-23 21:31:19	2014-04-23 21:31:19
1560	1	760	NO COMMENT	\N	2014-04-26 03:08:47	2014-04-26 03:08:47
1561	1	761	NO COMMENT	\N	2014-03-14 06:02:41	2014-03-14 06:02:41
1562	2	761	NO COMMENT	\N	2014-05-13 03:37:10	2014-05-13 03:37:10
1563	7	761	NO COMMENT	\N	2014-05-22 03:12:49	2014-05-22 03:12:49
1564	2	762	NO COMMENT	\N	2014-02-22 00:49:51	2014-02-22 00:49:51
1565	7	762	NO COMMENT	\N	2014-04-14 17:04:02	2014-04-14 17:04:02
1566	1	762	NO COMMENT	\N	2014-04-29 06:37:44	2014-04-29 06:37:44
1567	2	764	NO COMMENT	\N	2014-01-07 12:23:28	2014-01-07 12:23:28
1568	1	764	NO COMMENT	\N	2014-02-22 22:19:02	2014-02-22 22:19:02
1569	7	764	NO COMMENT	\N	2014-04-15 02:49:50	2014-04-15 02:49:50
1570	7	766	NO COMMENT	\N	2014-01-12 02:48:14	2014-01-12 02:48:14
1571	35	766	NO COMMENT	\N	2014-03-02 06:07:35	2014-03-02 06:07:35
1572	2	767	NO COMMENT	\N	2014-01-29 18:44:23	2014-01-29 18:44:23
1573	1	767	NO COMMENT	\N	2014-05-23 03:50:10	2014-05-23 03:50:10
1574	7	768	NO COMMENT	\N	2014-02-24 09:01:14	2014-02-24 09:01:14
1575	1	768	NO COMMENT	\N	2014-04-04 19:10:23	2014-04-04 19:10:23
1576	2	768	NO COMMENT	\N	2014-05-25 10:30:23	2014-05-25 10:30:23
1577	35	768	NO COMMENT	\N	2014-05-26 01:14:55	2014-05-26 01:14:55
1578	35	769	NO COMMENT	\N	2014-02-25 12:57:51	2014-02-25 12:57:51
1579	2	769	NO COMMENT	\N	2014-03-10 03:42:51	2014-03-10 03:42:51
1580	7	769	NO COMMENT	\N	2014-04-04 00:11:09	2014-04-04 00:11:09
1581	36	769	NO COMMENT	\N	2014-04-29 00:50:43	2014-04-29 00:50:43
1582	35	770	NO COMMENT	\N	2014-03-14 07:21:48	2014-03-14 07:21:48
1583	36	770	NO COMMENT	\N	2014-04-02 08:08:32	2014-04-02 08:08:32
1584	1	770	NO COMMENT	\N	2014-05-11 23:15:59	2014-05-11 23:15:59
1585	7	770	NO COMMENT	\N	2014-05-12 09:55:25	2014-05-12 09:55:25
1586	2	770	NO COMMENT	\N	2014-05-20 18:17:26	2014-05-20 18:17:26
1587	1	771	NO COMMENT	\N	2014-04-06 15:52:08	2014-04-06 15:52:08
1588	7	771	NO COMMENT	\N	2014-04-23 13:05:36	2014-04-23 13:05:36
1589	2	771	NO COMMENT	\N	2014-04-29 03:55:08	2014-04-29 03:55:08
1590	35	771	NO COMMENT	\N	2014-05-07 18:48:55	2014-05-07 18:48:55
1591	34	771	NO COMMENT	\N	2014-05-09 10:26:08	2014-05-09 10:26:08
1592	36	771	NO COMMENT	\N	2014-05-19 18:09:22	2014-05-19 18:09:22
1593	25	771	NO COMMENT	\N	2014-05-23 06:39:05	2014-05-23 06:39:05
1594	45	771	NO COMMENT	\N	2014-05-24 13:00:16	2014-05-24 13:00:16
1595	36	772	NO COMMENT	\N	2014-05-05 08:50:57	2014-05-05 08:50:57
1596	25	772	NO COMMENT	\N	2014-05-15 16:47:45	2014-05-15 16:47:45
1597	35	772	NO COMMENT	\N	2014-05-17 21:57:33	2014-05-17 21:57:33
1598	11	772	NO COMMENT	\N	2014-05-24 22:04:51	2014-05-24 22:04:51
1599	2	773	NO COMMENT	\N	2014-01-28 02:32:33	2014-01-28 02:32:33
1600	7	773	NO COMMENT	\N	2014-02-23 10:00:30	2014-02-23 10:00:30
1601	1	773	NO COMMENT	\N	2014-04-24 20:36:52	2014-04-24 20:36:52
1602	7	776	NO COMMENT	\N	2014-03-24 05:51:14	2014-03-24 05:51:14
1603	1	776	NO COMMENT	\N	2014-03-29 07:40:15	2014-03-29 07:40:15
1604	2	776	NO COMMENT	\N	2014-05-21 13:55:48	2014-05-21 13:55:48
1605	1	777	NO COMMENT	\N	2014-05-21 09:46:57	2014-05-21 09:46:57
1606	7	777	NO COMMENT	\N	2014-05-22 08:29:54	2014-05-22 08:29:54
1607	3	777	NO COMMENT	\N	2014-05-24 03:56:41	2014-05-24 03:56:41
1608	2	777	NO COMMENT	\N	2014-05-26 00:28:29	2014-05-26 00:28:29
1609	44	777	NO COMMENT	\N	2014-05-26 12:43:28	2014-05-26 12:43:28
1610	7	778	NO COMMENT	\N	2014-03-26 23:38:17	2014-03-26 23:38:17
1611	7	779	NO COMMENT	\N	2014-03-30 21:06:56	2014-03-30 21:06:56
1612	2	779	NO COMMENT	\N	2014-05-04 21:05:25	2014-05-04 21:05:25
1613	1	779	NO COMMENT	\N	2014-05-22 06:33:48	2014-05-22 06:33:48
1614	7	781	NO COMMENT	\N	2014-03-29 05:23:45	2014-03-29 05:23:45
1615	2	781	NO COMMENT	\N	2014-04-15 22:01:56	2014-04-15 22:01:56
1616	1	781	NO COMMENT	\N	2014-05-04 13:48:52	2014-05-04 13:48:52
1617	7	782	NO COMMENT	\N	2014-01-29 03:04:24	2014-01-29 03:04:24
1618	7	783	NO COMMENT	\N	2014-03-12 23:05:46	2014-03-12 23:05:46
1619	2	783	NO COMMENT	\N	2014-04-08 16:51:33	2014-04-08 16:51:33
1620	1	784	NO COMMENT	\N	2014-03-17 20:36:40	2014-03-17 20:36:40
1621	2	784	NO COMMENT	\N	2014-03-26 11:38:11	2014-03-26 11:38:11
1622	7	784	NO COMMENT	\N	2014-04-08 23:28:51	2014-04-08 23:28:51
1623	7	786	NO COMMENT	\N	2014-01-10 03:18:47	2014-01-10 03:18:47
1624	2	786	NO COMMENT	\N	2014-03-16 06:03:30	2014-03-16 06:03:30
1625	1	786	NO COMMENT	\N	2014-04-01 23:01:48	2014-04-01 23:01:48
1626	7	787	NO COMMENT	\N	2014-03-12 15:30:23	2014-03-12 15:30:23
1627	2	787	NO COMMENT	\N	2014-04-19 14:31:56	2014-04-19 14:31:56
1628	1	787	NO COMMENT	\N	2014-05-05 03:15:02	2014-05-05 03:15:02
1629	2	790	NO COMMENT	\N	2014-04-16 22:13:37	2014-04-16 22:13:37
1630	2	791	NO COMMENT	\N	2014-03-05 15:35:49	2014-03-05 15:35:49
1631	7	791	NO COMMENT	\N	2014-03-28 08:26:51	2014-03-28 08:26:51
1632	1	791	NO COMMENT	\N	2014-04-19 03:05:17	2014-04-19 03:05:17
1633	1	792	NO COMMENT	\N	2013-12-25 14:00:45	2013-12-25 14:00:45
1634	7	792	NO COMMENT	\N	2013-12-28 08:04:38	2013-12-28 08:04:38
1635	2	792	NO COMMENT	\N	2014-05-10 02:43:19	2014-05-10 02:43:19
1636	2	793	NO COMMENT	\N	2013-12-17 06:52:25	2013-12-17 06:52:25
1637	1	793	NO COMMENT	\N	2014-01-25 05:14:19	2014-01-25 05:14:19
1638	7	793	NO COMMENT	\N	2014-05-01 11:10:30	2014-05-01 11:10:30
1639	2	796	NO COMMENT	\N	2014-04-30 15:59:27	2014-04-30 15:59:27
1640	7	796	NO COMMENT	\N	2014-05-10 13:56:27	2014-05-10 13:56:27
1641	2	798	NO COMMENT	\N	2014-04-05 12:45:29	2014-04-05 12:45:29
1642	7	798	NO COMMENT	\N	2014-04-26 15:54:22	2014-04-26 15:54:22
1643	41	799	NO COMMENT	\N	2014-04-21 18:12:12	2014-04-21 18:12:12
1644	7	799	NO COMMENT	\N	2014-05-02 09:47:48	2014-05-02 09:47:48
1645	2	799	NO COMMENT	\N	2014-05-15 18:30:11	2014-05-15 18:30:11
1646	1	799	NO COMMENT	\N	2014-05-24 12:31:23	2014-05-24 12:31:23
1647	7	800	NO COMMENT	\N	2014-01-19 10:34:21	2014-01-19 10:34:21
1648	1	800	NO COMMENT	\N	2014-03-19 06:17:47	2014-03-19 06:17:47
1649	2	800	NO COMMENT	\N	2014-05-18 11:32:52	2014-05-18 11:32:52
1650	1	801	NO COMMENT	\N	2014-03-13 09:27:49	2014-03-13 09:27:49
1651	2	801	NO COMMENT	\N	2014-03-23 11:21:35	2014-03-23 11:21:35
1652	7	801	NO COMMENT	\N	2014-04-18 23:17:27	2014-04-18 23:17:27
1653	7	802	NO COMMENT	\N	2014-04-22 07:40:49	2014-04-22 07:40:49
1654	1	803	NO COMMENT	\N	2014-03-30 21:23:49	2014-03-30 21:23:49
1655	2	803	NO COMMENT	\N	2014-05-16 21:02:21	2014-05-16 21:02:21
1656	1	804	NO COMMENT	\N	2014-04-28 09:11:30	2014-04-28 09:11:30
1657	2	804	NO COMMENT	\N	2014-05-07 18:17:40	2014-05-07 18:17:40
1658	18	804	NO COMMENT	\N	2014-05-12 18:17:37	2014-05-12 18:17:37
1659	7	804	NO COMMENT	\N	2014-05-18 09:17:17	2014-05-18 09:17:17
1660	18	805	NO COMMENT	\N	2014-03-04 06:31:31	2014-03-04 06:31:31
1661	2	805	NO COMMENT	\N	2014-05-10 09:19:40	2014-05-10 09:19:40
1662	7	805	NO COMMENT	\N	2014-05-19 18:07:03	2014-05-19 18:07:03
1663	1	805	NO COMMENT	\N	2014-05-27 02:40:40	2014-05-27 02:40:40
1664	7	807	NO COMMENT	\N	2014-03-21 20:52:02	2014-03-21 20:52:02
1665	2	807	NO COMMENT	\N	2014-04-05 07:24:34	2014-04-05 07:24:34
1666	1	807	NO COMMENT	\N	2014-04-25 11:24:38	2014-04-25 11:24:38
1667	18	807	NO COMMENT	\N	2014-05-13 11:22:15	2014-05-13 11:22:15
1668	2	808	NO COMMENT	\N	2014-04-09 11:37:37	2014-04-09 11:37:37
1669	4	808	NO COMMENT	\N	2014-04-09 21:20:40	2014-04-09 21:20:40
1670	9	808	NO COMMENT	\N	2014-04-30 22:31:05	2014-04-30 22:31:05
1671	18	808	NO COMMENT	\N	2014-05-23 07:24:06	2014-05-23 07:24:06
1672	1	808	NO COMMENT	\N	2014-05-24 23:07:05	2014-05-24 23:07:05
1673	18	809	NO COMMENT	\N	2014-05-05 01:37:00	2014-05-05 01:37:00
1674	2	809	NO COMMENT	\N	2014-05-07 17:24:22	2014-05-07 17:24:22
1675	7	809	NO COMMENT	\N	2014-05-07 22:48:37	2014-05-07 22:48:37
1676	1	809	NO COMMENT	\N	2014-05-17 18:57:09	2014-05-17 18:57:09
1677	9	809	NO COMMENT	\N	2014-05-20 19:01:37	2014-05-20 19:01:37
1678	4	809	NO COMMENT	\N	2014-05-23 07:43:35	2014-05-23 07:43:35
1679	1	810	NO COMMENT	\N	2014-04-14 13:54:16	2014-04-14 13:54:16
1680	2	810	NO COMMENT	\N	2014-04-15 21:02:09	2014-04-15 21:02:09
1681	4	810	NO COMMENT	\N	2014-04-17 05:39:22	2014-04-17 05:39:22
1682	18	811	NO COMMENT	\N	2014-04-17 10:40:57	2014-04-17 10:40:57
1683	2	811	NO COMMENT	\N	2014-04-21 11:42:21	2014-04-21 11:42:21
1684	7	812	NO COMMENT	\N	2014-04-21 23:46:24	2014-04-21 23:46:24
1685	2	812	NO COMMENT	\N	2014-05-04 19:49:33	2014-05-04 19:49:33
1686	4	812	NO COMMENT	\N	2014-05-09 01:45:56	2014-05-09 01:45:56
1687	18	812	NO COMMENT	\N	2014-05-10 19:19:08	2014-05-10 19:19:08
1688	9	812	NO COMMENT	\N	2014-05-17 19:48:53	2014-05-17 19:48:53
1689	1	812	NO COMMENT	\N	2014-05-18 01:18:19	2014-05-18 01:18:19
1690	7	813	NO COMMENT	\N	2014-04-29 09:41:30	2014-04-29 09:41:30
1691	48	813	NO COMMENT	\N	2014-05-05 01:52:08	2014-05-05 01:52:08
1692	4	813	NO COMMENT	\N	2014-05-14 15:10:35	2014-05-14 15:10:35
1693	2	813	NO COMMENT	\N	2014-05-18 20:35:42	2014-05-18 20:35:42
1694	2	815	NO COMMENT	\N	2014-04-24 21:29:08	2014-04-24 21:29:08
1695	1	815	NO COMMENT	\N	2014-05-02 07:11:45	2014-05-02 07:11:45
1696	7	815	NO COMMENT	\N	2014-05-19 06:44:30	2014-05-19 06:44:30
1697	12	817	NO COMMENT	\N	2014-04-27 22:14:03	2014-04-27 22:14:03
1698	1	817	NO COMMENT	\N	2014-05-10 15:06:50	2014-05-10 15:06:50
1699	2	817	NO COMMENT	\N	2014-05-11 06:41:55	2014-05-11 06:41:55
1700	14	817	NO COMMENT	\N	2014-05-17 03:09:12	2014-05-17 03:09:12
1701	7	817	NO COMMENT	\N	2014-05-17 11:30:18	2014-05-17 11:30:18
1702	2	819	NO COMMENT	\N	2014-03-24 19:11:53	2014-03-24 19:11:53
1703	1	819	NO COMMENT	\N	2014-03-28 08:57:29	2014-03-28 08:57:29
1704	7	819	NO COMMENT	\N	2014-05-22 00:27:35	2014-05-22 00:27:35
1705	2	820	NO COMMENT	\N	2014-03-11 18:37:35	2014-03-11 18:37:35
1706	1	820	NO COMMENT	\N	2014-04-10 02:05:36	2014-04-10 02:05:36
1707	7	820	NO COMMENT	\N	2014-05-14 07:10:03	2014-05-14 07:10:03
1708	7	823	NO COMMENT	\N	2014-04-29 14:54:55	2014-04-29 14:54:55
1709	16	823	NO COMMENT	\N	2014-05-20 02:13:35	2014-05-20 02:13:35
1710	1	825	NO COMMENT	\N	2014-04-09 11:07:00	2014-04-09 11:07:00
1711	7	825	NO COMMENT	\N	2014-04-21 08:13:54	2014-04-21 08:13:54
1712	2	825	NO COMMENT	\N	2014-05-22 05:49:20	2014-05-22 05:49:20
1713	7	826	NO COMMENT	\N	2014-04-19 23:34:12	2014-04-19 23:34:12
1714	1	826	NO COMMENT	\N	2014-05-17 06:07:12	2014-05-17 06:07:12
1715	2	826	NO COMMENT	\N	2014-05-21 23:45:31	2014-05-21 23:45:31
1716	35	828	NO COMMENT	\N	2014-03-27 08:34:12	2014-03-27 08:34:12
1717	36	828	NO COMMENT	\N	2014-04-03 19:10:41	2014-04-03 19:10:41
1718	7	828	NO COMMENT	\N	2014-04-24 18:45:45	2014-04-24 18:45:45
1719	2	828	NO COMMENT	\N	2014-05-04 09:53:29	2014-05-04 09:53:29
1720	1	828	NO COMMENT	\N	2014-05-14 21:57:59	2014-05-14 21:57:59
1721	36	829	NO COMMENT	\N	2014-03-19 12:22:52	2014-03-19 12:22:52
1722	7	829	NO COMMENT	\N	2014-04-01 09:29:43	2014-04-01 09:29:43
1723	2	829	NO COMMENT	\N	2014-04-26 06:30:50	2014-04-26 06:30:50
1724	1	829	NO COMMENT	\N	2014-05-04 02:17:04	2014-05-04 02:17:04
1725	7	830	NO COMMENT	\N	2014-04-12 05:04:36	2014-04-12 05:04:36
1726	34	830	NO COMMENT	\N	2014-04-13 22:12:49	2014-04-13 22:12:49
1727	25	830	NO COMMENT	\N	2014-04-16 18:38:05	2014-04-16 18:38:05
1728	35	830	NO COMMENT	\N	2014-04-26 08:39:22	2014-04-26 08:39:22
1729	36	830	NO COMMENT	\N	2014-05-03 06:39:54	2014-05-03 06:39:54
1730	42	830	NO COMMENT	\N	2014-05-04 03:39:33	2014-05-04 03:39:33
1731	2	830	NO COMMENT	\N	2014-05-04 17:40:58	2014-05-04 17:40:58
1732	1	830	NO COMMENT	\N	2014-05-08 01:42:43	2014-05-08 01:42:43
1733	45	830	NO COMMENT	\N	2014-05-14 17:04:10	2014-05-14 17:04:10
1734	46	830	NO COMMENT	\N	2014-05-24 03:12:11	2014-05-24 03:12:11
1735	18	830	NO COMMENT	\N	2014-05-25 06:45:14	2014-05-25 06:45:14
1736	36	831	NO COMMENT	\N	2014-04-13 03:14:04	2014-04-13 03:14:04
1737	34	832	NO COMMENT	\N	2014-04-26 11:11:56	2014-04-26 11:11:56
1738	36	832	NO COMMENT	\N	2014-04-28 17:14:48	2014-04-28 17:14:48
1739	35	832	NO COMMENT	\N	2014-04-29 10:54:38	2014-04-29 10:54:38
1740	2	832	NO COMMENT	\N	2014-05-01 16:15:45	2014-05-01 16:15:45
1741	25	832	NO COMMENT	\N	2014-05-10 10:59:56	2014-05-10 10:59:56
1742	42	832	NO COMMENT	\N	2014-05-14 08:25:48	2014-05-14 08:25:48
1743	46	832	NO COMMENT	\N	2014-05-16 21:03:36	2014-05-16 21:03:36
1744	7	832	NO COMMENT	\N	2014-05-20 16:19:38	2014-05-20 16:19:38
1745	45	832	NO COMMENT	\N	2014-05-27 02:55:41	2014-05-27 02:55:41
1746	18	833	NO COMMENT	\N	2014-04-18 14:24:08	2014-04-18 14:24:08
1747	34	833	NO COMMENT	\N	2014-05-25 15:33:28	2014-05-25 15:33:28
1748	7	834	NO COMMENT	\N	2014-05-01 01:29:00	2014-05-01 01:29:00
1749	25	834	NO COMMENT	\N	2014-05-10 05:23:48	2014-05-10 05:23:48
1750	2	834	NO COMMENT	\N	2014-05-13 15:50:22	2014-05-13 15:50:22
1751	34	834	NO COMMENT	\N	2014-05-22 01:01:29	2014-05-22 01:01:29
1752	1	834	NO COMMENT	\N	2014-05-27 02:40:38	2014-05-27 02:40:38
1753	47	835	NO COMMENT	\N	2014-05-15 09:31:20	2014-05-15 09:31:20
1754	35	835	NO COMMENT	\N	2014-05-15 10:26:45	2014-05-15 10:26:45
1755	18	835	NO COMMENT	\N	2014-05-16 10:24:39	2014-05-16 10:24:39
1756	11	835	NO COMMENT	\N	2014-05-23 22:21:04	2014-05-23 22:21:04
1757	9	835	NO COMMENT	\N	2014-05-25 20:09:23	2014-05-25 20:09:23
1758	2	836	NO COMMENT	\N	2014-03-19 14:07:45	2014-03-19 14:07:45
1759	7	836	NO COMMENT	\N	2014-04-19 16:21:56	2014-04-19 16:21:56
1760	1	836	NO COMMENT	\N	2014-05-26 23:27:05	2014-05-26 23:27:05
1761	1	837	NO COMMENT	\N	2014-04-04 23:50:38	2014-04-04 23:50:38
1762	2	837	NO COMMENT	\N	2014-04-29 12:43:03	2014-04-29 12:43:03
1763	7	837	NO COMMENT	\N	2014-05-20 15:06:07	2014-05-20 15:06:07
1764	7	838	NO COMMENT	\N	2014-04-28 20:34:46	2014-04-28 20:34:46
1765	1	838	NO COMMENT	\N	2014-05-01 03:29:04	2014-05-01 03:29:04
1766	2	838	NO COMMENT	\N	2014-05-09 14:02:17	2014-05-09 14:02:17
1767	7	839	NO COMMENT	\N	2014-04-26 20:29:52	2014-04-26 20:29:52
1768	27	839	NO COMMENT	\N	2014-04-27 10:08:10	2014-04-27 10:08:10
1769	2	839	NO COMMENT	\N	2014-04-28 10:04:11	2014-04-28 10:04:11
1770	1	839	NO COMMENT	\N	2014-05-12 21:55:44	2014-05-12 21:55:44
1771	2	840	NO COMMENT	\N	2014-04-28 22:58:10	2014-04-28 22:58:10
1772	27	840	NO COMMENT	\N	2014-05-11 15:08:55	2014-05-11 15:08:55
1773	7	840	NO COMMENT	\N	2014-05-18 06:47:30	2014-05-18 06:47:30
1774	1	840	NO COMMENT	\N	2014-05-22 13:41:58	2014-05-22 13:41:58
1775	1	841	NO COMMENT	\N	2014-04-08 18:13:21	2014-04-08 18:13:21
1776	2	841	NO COMMENT	\N	2014-04-21 10:59:01	2014-04-21 10:59:01
1777	7	841	NO COMMENT	\N	2014-05-08 10:53:52	2014-05-08 10:53:52
1778	7	842	NO COMMENT	\N	2014-02-22 19:46:24	2014-02-22 19:46:24
1779	2	842	NO COMMENT	\N	2014-03-22 10:55:53	2014-03-22 10:55:53
1780	1	842	NO COMMENT	\N	2014-04-18 20:29:38	2014-04-18 20:29:38
1781	1	843	NO COMMENT	\N	2014-05-06 20:18:17	2014-05-06 20:18:17
1782	2	844	NO COMMENT	\N	2014-04-12 06:00:53	2014-04-12 06:00:53
1783	1	844	NO COMMENT	\N	2014-04-18 15:56:45	2014-04-18 15:56:45
1784	7	844	NO COMMENT	\N	2014-05-16 14:02:13	2014-05-16 14:02:13
1785	2	845	NO COMMENT	\N	2014-04-30 18:37:09	2014-04-30 18:37:09
1786	1	845	NO COMMENT	\N	2014-05-11 20:53:11	2014-05-11 20:53:11
1787	7	845	NO COMMENT	\N	2014-05-20 11:35:40	2014-05-20 11:35:40
1788	7	846	NO COMMENT	\N	2014-04-09 17:25:57	2014-04-09 17:25:57
1789	2	846	NO COMMENT	\N	2014-04-13 21:22:28	2014-04-13 21:22:28
1790	1	846	NO COMMENT	\N	2014-05-22 16:33:27	2014-05-22 16:33:27
1791	1	847	NO COMMENT	\N	2014-03-11 11:41:08	2014-03-11 11:41:08
1792	7	848	NO COMMENT	\N	2014-04-12 05:46:12	2014-04-12 05:46:12
1793	1	849	NO COMMENT	\N	2014-02-23 18:27:55	2014-02-23 18:27:55
1794	21	849	NO COMMENT	\N	2014-05-20 19:57:32	2014-05-20 19:57:32
1795	2	849	NO COMMENT	\N	2014-05-24 07:41:23	2014-05-24 07:41:23
1796	23	852	NO COMMENT	\N	2014-05-21 12:59:24	2014-05-21 12:59:24
1797	1	853	NO COMMENT	\N	2014-05-20 13:32:41	2014-05-20 13:32:41
1798	2	853	NO COMMENT	\N	2014-05-21 05:35:05	2014-05-21 05:35:05
1799	15	853	NO COMMENT	\N	2014-05-21 17:40:26	2014-05-21 17:40:26
1800	45	853	NO COMMENT	\N	2014-05-22 01:52:14	2014-05-22 01:52:14
1801	10	853	NO COMMENT	\N	2014-05-23 01:34:32	2014-05-23 01:34:32
1802	7	853	NO COMMENT	\N	2014-05-24 02:49:19	2014-05-24 02:49:19
1803	1	855	NO COMMENT	\N	2014-05-14 20:47:17	2014-05-14 20:47:17
1804	7	855	NO COMMENT	\N	2014-05-22 09:06:24	2014-05-22 09:06:24
1805	2	855	NO COMMENT	\N	2014-05-26 20:24:05	2014-05-26 20:24:05
1806	12	855	NO COMMENT	\N	2014-05-26 23:35:22	2014-05-26 23:35:22
1807	1	856	NO COMMENT	\N	2014-05-19 17:03:20	2014-05-19 17:03:20
1808	2	857	NO COMMENT	\N	2014-05-18 22:14:34	2014-05-18 22:14:34
1809	1	857	NO COMMENT	\N	2014-05-25 18:08:58	2014-05-25 18:08:58
1810	7	857	NO COMMENT	\N	2014-05-26 00:40:58	2014-05-26 00:40:58
1811	7	858	NO COMMENT	\N	2014-05-21 04:54:32	2014-05-21 04:54:32
1812	2	859	NO COMMENT	\N	2014-05-18 02:50:25	2014-05-18 02:50:25
1813	1	859	NO COMMENT	\N	2014-05-23 17:11:46	2014-05-23 17:11:46
1814	19	859	NO COMMENT	\N	2014-05-24 03:40:07	2014-05-24 03:40:07
1815	7	859	NO COMMENT	\N	2014-05-26 11:09:47	2014-05-26 11:09:47
1816	1	860	NO COMMENT	\N	2014-05-13 21:48:21	2014-05-13 21:48:21
1817	7	860	NO COMMENT	\N	2014-05-14 03:16:27	2014-05-14 03:16:27
1818	2	860	NO COMMENT	\N	2014-05-16 15:09:54	2014-05-16 15:09:54
1819	29	863	NO COMMENT	\N	2014-05-20 17:48:28	2014-05-20 17:48:28
1820	26	863	NO COMMENT	\N	2014-05-21 21:52:13	2014-05-21 21:52:13
1821	1	863	NO COMMENT	\N	2014-05-23 02:39:52	2014-05-23 02:39:52
1822	20	863	NO COMMENT	\N	2014-05-23 16:38:19	2014-05-23 16:38:19
1823	11	863	NO COMMENT	\N	2014-05-25 02:53:44	2014-05-25 02:53:44
1824	7	863	NO COMMENT	\N	2014-05-26 23:18:12	2014-05-26 23:18:12
1825	2	863	NO COMMENT	\N	2014-05-27 04:29:44	2014-05-27 04:29:44
1826	46	864	NO COMMENT	\N	2014-05-19 21:24:17	2014-05-19 21:24:17
1827	13	864	NO COMMENT	\N	2014-05-26 18:50:19	2014-05-26 18:50:19
1828	46	865	NO COMMENT	\N	2014-05-25 23:49:16	2014-05-25 23:49:16
1829	1	910	NO COMMENT	\N	2014-04-17 13:40:45	2014-04-17 13:40:45
1830	7	910	NO COMMENT	\N	2014-05-02 14:37:46	2014-05-02 14:37:46
1831	2	910	NO COMMENT	\N	2014-05-04 01:54:10	2014-05-04 01:54:10
1832	2	866	NO COMMENT	\N	2014-05-22 13:43:55	2014-05-22 13:43:55
1833	1	866	NO COMMENT	\N	2014-05-23 08:35:31	2014-05-23 08:35:31
1834	2	867	NO COMMENT	\N	2014-05-21 23:55:00	2014-05-21 23:55:00
1835	47	867	NO COMMENT	\N	2014-05-22 13:24:49	2014-05-22 13:24:49
1836	1	867	NO COMMENT	\N	2014-05-26 07:40:54	2014-05-26 07:40:54
1837	44	868	NO COMMENT	\N	2014-05-17 11:50:25	2014-05-17 11:50:25
1838	7	868	NO COMMENT	\N	2014-05-25 19:48:02	2014-05-25 19:48:02
1839	1	868	NO COMMENT	\N	2014-05-26 05:07:55	2014-05-26 05:07:55
1840	7	870	NO COMMENT	\N	2014-05-20 00:19:48	2014-05-20 00:19:48
1841	44	870	NO COMMENT	\N	2014-05-20 08:05:54	2014-05-20 08:05:54
1842	7	871	NO COMMENT	\N	2014-05-23 22:49:28	2014-05-23 22:49:28
1843	44	871	NO COMMENT	\N	2014-05-24 22:07:54	2014-05-24 22:07:54
1844	16	871	NO COMMENT	\N	2014-05-25 08:27:37	2014-05-25 08:27:37
1845	2	871	NO COMMENT	\N	2014-05-26 05:45:34	2014-05-26 05:45:34
1846	3	871	NO COMMENT	\N	2014-05-26 13:23:38	2014-05-26 13:23:38
1847	1	871	NO COMMENT	\N	2014-05-26 19:06:12	2014-05-26 19:06:12
1848	7	873	NO COMMENT	\N	2014-05-19 18:59:13	2014-05-19 18:59:13
1849	2	873	NO COMMENT	\N	2014-05-22 14:41:19	2014-05-22 14:41:19
1850	1	873	NO COMMENT	\N	2014-05-23 00:57:26	2014-05-23 00:57:26
1851	2	874	NO COMMENT	\N	2014-05-14 06:41:08	2014-05-14 06:41:08
1852	7	874	NO COMMENT	\N	2014-05-18 00:24:45	2014-05-18 00:24:45
1853	1	874	NO COMMENT	\N	2014-05-19 01:09:36	2014-05-19 01:09:36
1854	21	875	NO COMMENT	\N	2014-03-28 09:16:16	2014-03-28 09:16:16
1855	4	875	NO COMMENT	\N	2014-04-02 08:34:54	2014-04-02 08:34:54
1856	7	875	NO COMMENT	\N	2014-04-18 22:48:58	2014-04-18 22:48:58
1857	29	875	NO COMMENT	\N	2014-05-01 04:48:26	2014-05-01 04:48:26
1858	21	876	NO COMMENT	\N	2014-04-05 04:07:25	2014-04-05 04:07:25
1859	4	876	NO COMMENT	\N	2014-04-18 07:39:48	2014-04-18 07:39:48
1860	7	876	NO COMMENT	\N	2014-05-16 01:49:04	2014-05-16 01:49:04
1861	7	877	NO COMMENT	\N	2014-04-04 03:05:20	2014-04-04 03:05:20
1862	21	877	NO COMMENT	\N	2014-04-18 23:52:38	2014-04-18 23:52:38
1863	4	877	NO COMMENT	\N	2014-04-22 00:48:52	2014-04-22 00:48:52
1864	29	877	NO COMMENT	\N	2014-05-12 06:03:50	2014-05-12 06:03:50
1865	16	878	NO COMMENT	\N	2014-04-01 11:30:27	2014-04-01 11:30:27
1866	7	878	NO COMMENT	\N	2014-04-16 01:20:38	2014-04-16 01:20:38
1867	36	878	NO COMMENT	\N	2014-05-05 05:09:57	2014-05-05 05:09:57
1868	21	879	NO COMMENT	\N	2014-03-31 06:33:11	2014-03-31 06:33:11
1869	36	879	NO COMMENT	\N	2014-04-11 18:08:11	2014-04-11 18:08:11
1870	16	879	NO COMMENT	\N	2014-05-01 00:21:17	2014-05-01 00:21:17
1871	37	880	NO COMMENT	\N	2014-04-22 09:52:35	2014-04-22 09:52:35
1872	7	880	NO COMMENT	\N	2014-05-26 01:25:09	2014-05-26 01:25:09
1873	7	882	NO COMMENT	\N	2014-04-03 15:30:06	2014-04-03 15:30:06
1874	7	884	NO COMMENT	\N	2014-05-12 22:27:27	2014-05-12 22:27:27
1875	19	884	NO COMMENT	\N	2014-05-22 03:45:54	2014-05-22 03:45:54
1876	7	885	NO COMMENT	\N	2014-05-12 12:24:40	2014-05-12 12:24:40
1877	35	887	NO COMMENT	\N	2014-03-10 18:44:27	2014-03-10 18:44:27
1878	7	887	NO COMMENT	\N	2014-03-13 04:49:28	2014-03-13 04:49:28
1879	16	887	NO COMMENT	\N	2014-03-18 20:38:18	2014-03-18 20:38:18
1880	6	887	NO COMMENT	\N	2014-03-21 15:31:49	2014-03-21 15:31:49
1881	21	887	NO COMMENT	\N	2014-05-19 10:01:35	2014-05-19 10:01:35
1882	29	887	NO COMMENT	\N	2014-05-20 04:42:22	2014-05-20 04:42:22
1883	7	888	NO COMMENT	\N	2014-04-22 11:58:11	2014-04-22 11:58:11
1884	21	888	NO COMMENT	\N	2014-05-02 10:40:12	2014-05-02 10:40:12
1885	6	888	NO COMMENT	\N	2014-05-05 22:02:44	2014-05-05 22:02:44
1886	29	888	NO COMMENT	\N	2014-05-06 23:11:47	2014-05-06 23:11:47
1887	35	888	NO COMMENT	\N	2014-05-09 14:30:40	2014-05-09 14:30:40
1888	18	888	NO COMMENT	\N	2014-05-11 06:50:48	2014-05-11 06:50:48
1889	13	888	NO COMMENT	\N	2014-05-13 19:09:03	2014-05-13 19:09:03
1890	16	888	NO COMMENT	\N	2014-05-22 02:44:27	2014-05-22 02:44:27
1891	7	889	NO COMMENT	\N	2014-05-21 20:59:42	2014-05-21 20:59:42
1892	25	889	NO COMMENT	\N	2014-05-21 21:18:01	2014-05-21 21:18:01
1893	25	890	NO COMMENT	\N	2014-04-09 05:48:53	2014-04-09 05:48:53
1894	44	890	NO COMMENT	\N	2014-04-26 22:32:03	2014-04-26 22:32:03
1895	7	890	NO COMMENT	\N	2014-05-17 14:22:14	2014-05-17 14:22:14
1896	23	891	NO COMMENT	\N	2014-05-05 09:10:21	2014-05-05 09:10:21
1897	10	891	NO COMMENT	\N	2014-05-07 23:34:36	2014-05-07 23:34:36
1898	25	891	NO COMMENT	\N	2014-05-11 04:52:55	2014-05-11 04:52:55
1899	16	891	NO COMMENT	\N	2014-05-22 14:56:24	2014-05-22 14:56:24
1900	7	892	NO COMMENT	\N	2014-03-16 05:58:18	2014-03-16 05:58:18
1901	46	893	NO COMMENT	\N	2014-03-31 09:54:49	2014-03-31 09:54:49
1902	7	893	NO COMMENT	\N	2014-04-14 08:45:01	2014-04-14 08:45:01
1903	41	895	NO COMMENT	\N	2014-05-08 21:59:56	2014-05-08 21:59:56
1904	46	895	NO COMMENT	\N	2014-05-10 17:03:33	2014-05-10 17:03:33
1905	7	895	NO COMMENT	\N	2014-05-14 22:38:19	2014-05-14 22:38:19
1906	25	896	NO COMMENT	\N	2014-04-27 23:36:19	2014-04-27 23:36:19
1907	7	896	NO COMMENT	\N	2014-05-07 10:40:54	2014-05-07 10:40:54
1908	36	897	NO COMMENT	\N	2014-04-13 21:01:03	2014-04-13 21:01:03
1909	35	897	NO COMMENT	\N	2014-05-10 16:38:50	2014-05-10 16:38:50
1910	7	897	NO COMMENT	\N	2014-05-11 23:36:35	2014-05-11 23:36:35
1911	25	897	NO COMMENT	\N	2014-05-21 22:11:04	2014-05-21 22:11:04
1912	36	898	NO COMMENT	\N	2014-04-24 03:27:04	2014-04-24 03:27:04
1913	25	898	NO COMMENT	\N	2014-05-08 12:54:56	2014-05-08 12:54:56
1914	7	898	NO COMMENT	\N	2014-05-09 21:48:23	2014-05-09 21:48:23
1915	35	898	NO COMMENT	\N	2014-05-10 03:23:41	2014-05-10 03:23:41
1916	42	899	NO COMMENT	\N	2014-04-11 07:08:37	2014-04-11 07:08:37
1917	36	899	NO COMMENT	\N	2014-04-11 11:16:17	2014-04-11 11:16:17
1918	45	899	NO COMMENT	\N	2014-04-14 17:52:33	2014-04-14 17:52:33
1919	46	899	NO COMMENT	\N	2014-05-13 21:36:16	2014-05-13 21:36:16
1920	25	899	NO COMMENT	\N	2014-05-18 00:10:35	2014-05-18 00:10:35
1921	35	899	NO COMMENT	\N	2014-05-18 15:49:19	2014-05-18 15:49:19
1922	7	899	NO COMMENT	\N	2014-05-22 22:42:28	2014-05-22 22:42:28
1923	34	899	NO COMMENT	\N	2014-05-24 11:49:18	2014-05-24 11:49:18
1924	18	899	NO COMMENT	\N	2014-05-25 15:54:10	2014-05-25 15:54:10
1925	11	900	NO COMMENT	\N	2014-04-23 08:34:51	2014-04-23 08:34:51
1926	36	900	NO COMMENT	\N	2014-04-26 14:25:29	2014-04-26 14:25:29
1927	34	901	NO COMMENT	\N	2014-04-30 18:27:24	2014-04-30 18:27:24
1928	7	901	NO COMMENT	\N	2014-05-06 23:31:40	2014-05-06 23:31:40
1929	18	901	NO COMMENT	\N	2014-05-07 07:19:26	2014-05-07 07:19:26
1930	7	903	NO COMMENT	\N	2014-05-06 21:29:08	2014-05-06 21:29:08
1931	7	904	NO COMMENT	\N	2014-05-06 03:16:52	2014-05-06 03:16:52
1932	7	905	NO COMMENT	\N	2014-05-22 00:50:10	2014-05-22 00:50:10
1933	7	906	NO COMMENT	\N	2014-04-17 06:12:41	2014-04-17 06:12:41
1934	45	906	NO COMMENT	\N	2014-05-17 12:44:32	2014-05-17 12:44:32
1935	2	908	NO COMMENT	\N	2014-05-18 17:26:19	2014-05-18 17:26:19
1936	31	909	NO COMMENT	\N	2014-04-25 02:18:53	2014-04-25 02:18:53
1937	1	909	NO COMMENT	\N	2014-05-13 09:36:55	2014-05-13 09:36:55
1938	12	909	NO COMMENT	\N	2014-05-17 19:09:11	2014-05-17 19:09:11
1939	25	911	NO COMMENT	\N	2014-05-02 04:13:22	2014-05-02 04:13:22
1940	44	911	NO COMMENT	\N	2014-05-04 03:30:08	2014-05-04 03:30:08
1941	7	911	NO COMMENT	\N	2014-05-08 14:00:56	2014-05-08 14:00:56
1942	2	911	NO COMMENT	\N	2014-05-16 18:48:14	2014-05-16 18:48:14
1943	1	911	NO COMMENT	\N	2014-05-26 05:27:48	2014-05-26 05:27:48
1944	2	912	NO COMMENT	\N	2014-05-24 21:17:12	2014-05-24 21:17:12
1945	7	913	NO COMMENT	\N	2014-05-17 10:38:12	2014-05-17 10:38:12
1946	44	913	NO COMMENT	\N	2014-05-17 18:13:56	2014-05-17 18:13:56
1947	29	913	NO COMMENT	\N	2014-05-18 06:00:10	2014-05-18 06:00:10
1948	2	913	NO COMMENT	\N	2014-05-20 12:35:03	2014-05-20 12:35:03
1949	1	913	NO COMMENT	\N	2014-05-21 13:26:01	2014-05-21 13:26:01
1950	5	913	NO COMMENT	\N	2014-05-21 23:26:29	2014-05-21 23:26:29
1951	16	913	NO COMMENT	\N	2014-05-23 23:20:24	2014-05-23 23:20:24
1952	9	913	NO COMMENT	\N	2014-05-25 01:11:56	2014-05-25 01:11:56
1953	10	914	NO COMMENT	\N	2014-05-26 19:43:25	2014-05-26 19:43:25
1954	7	914	NO COMMENT	\N	2014-05-27 03:14:23	2014-05-27 03:14:23
1955	29	915	NO COMMENT	\N	2014-05-26 23:12:42	2014-05-26 23:12:42
1956	2	915	NO COMMENT	\N	2014-05-27 04:45:33	2014-05-27 04:45:33
1957	24	915	NO COMMENT	\N	2014-05-27 04:49:22	2014-05-27 04:49:22
1958	27	915	NO COMMENT	\N	2014-05-27 04:54:54	2014-05-27 04:54:54
1959	7	916	NO COMMENT	\N	2014-05-13 13:09:29	2014-05-13 13:09:29
1960	1	916	NO COMMENT	\N	2014-05-16 23:35:01	2014-05-16 23:35:01
1961	2	916	NO COMMENT	\N	2014-05-24 02:04:20	2014-05-24 02:04:20
1962	2	917	NO COMMENT	\N	2014-05-06 05:48:39	2014-05-06 05:48:39
1963	13	917	NO COMMENT	\N	2014-05-08 16:35:37	2014-05-08 16:35:37
1964	1	917	NO COMMENT	\N	2014-05-12 10:05:41	2014-05-12 10:05:41
1965	7	917	NO COMMENT	\N	2014-05-24 15:22:16	2014-05-24 15:22:16
1966	1	918	NO COMMENT	\N	2014-05-03 11:40:13	2014-05-03 11:40:13
1967	2	918	NO COMMENT	\N	2014-05-17 02:27:47	2014-05-17 02:27:47
1968	48	918	NO COMMENT	\N	2014-05-26 01:45:04	2014-05-26 01:45:04
1969	48	919	NO COMMENT	\N	2014-05-12 00:17:04	2014-05-12 00:17:04
1970	2	919	NO COMMENT	\N	2014-05-12 08:07:19	2014-05-12 08:07:19
1971	37	919	NO COMMENT	\N	2014-05-15 09:49:00	2014-05-15 09:49:00
1972	1	919	NO COMMENT	\N	2014-05-16 19:45:56	2014-05-16 19:45:56
1973	7	919	NO COMMENT	\N	2014-05-23 10:50:03	2014-05-23 10:50:03
1974	5	920	NO COMMENT	\N	2014-05-22 01:49:39	2014-05-22 01:49:39
1975	29	920	NO COMMENT	\N	2014-05-25 01:52:07	2014-05-25 01:52:07
1976	35	921	NO COMMENT	\N	2014-04-26 14:24:49	2014-04-26 14:24:49
1977	46	921	NO COMMENT	\N	2014-04-29 20:16:02	2014-04-29 20:16:02
1978	36	921	NO COMMENT	\N	2014-05-05 00:05:56	2014-05-05 00:05:56
1979	40	921	NO COMMENT	\N	2014-05-07 01:38:10	2014-05-07 01:38:10
1980	18	921	NO COMMENT	\N	2014-05-08 12:05:49	2014-05-08 12:05:49
1981	34	921	NO COMMENT	\N	2014-05-18 01:55:31	2014-05-18 01:55:31
1982	45	921	NO COMMENT	\N	2014-05-19 02:40:18	2014-05-19 02:40:18
1983	11	921	NO COMMENT	\N	2014-05-21 11:37:20	2014-05-21 11:37:20
1984	1	921	NO COMMENT	\N	2014-05-22 21:44:35	2014-05-22 21:44:35
1985	46	922	NO COMMENT	\N	2014-05-11 16:30:43	2014-05-11 16:30:43
1986	18	922	NO COMMENT	\N	2014-05-17 12:31:02	2014-05-17 12:31:02
1987	19	922	NO COMMENT	\N	2014-05-18 11:23:22	2014-05-18 11:23:22
1988	23	922	NO COMMENT	\N	2014-05-20 12:09:16	2014-05-20 12:09:16
1989	35	922	NO COMMENT	\N	2014-05-20 22:53:04	2014-05-20 22:53:04
1990	40	922	NO COMMENT	\N	2014-05-21 05:13:53	2014-05-21 05:13:53
1991	7	922	NO COMMENT	\N	2014-05-22 06:15:38	2014-05-22 06:15:38
1992	9	922	NO COMMENT	\N	2014-05-23 15:50:06	2014-05-23 15:50:06
1993	47	922	NO COMMENT	\N	2014-05-26 05:09:10	2014-05-26 05:09:10
1994	7	924	NO COMMENT	\N	2014-04-30 12:24:31	2014-04-30 12:24:31
1995	1	924	NO COMMENT	\N	2014-05-10 14:46:12	2014-05-10 14:46:12
1996	2	924	NO COMMENT	\N	2014-05-22 18:08:07	2014-05-22 18:08:07
1997	42	925	NO COMMENT	\N	2014-04-12 07:22:15	2014-04-12 07:22:15
1998	2	925	NO COMMENT	\N	2014-05-05 04:53:49	2014-05-05 04:53:49
1999	7	925	NO COMMENT	\N	2014-05-08 02:58:35	2014-05-08 02:58:35
2000	29	925	NO COMMENT	\N	2014-05-24 00:38:06	2014-05-24 00:38:06
2001	1	925	NO COMMENT	\N	2014-05-25 07:38:37	2014-05-25 07:38:37
2002	42	926	NO COMMENT	\N	2014-04-26 20:07:21	2014-04-26 20:07:21
2003	7	926	NO COMMENT	\N	2014-05-08 04:59:11	2014-05-08 04:59:11
2004	2	926	NO COMMENT	\N	2014-05-09 05:41:05	2014-05-09 05:41:05
2005	29	926	NO COMMENT	\N	2014-05-10 02:39:16	2014-05-10 02:39:16
2006	1	926	NO COMMENT	\N	2014-05-22 19:14:23	2014-05-22 19:14:23
2007	7	928	NO COMMENT	\N	2014-05-11 15:51:38	2014-05-11 15:51:38
2008	29	928	NO COMMENT	\N	2014-05-13 06:11:10	2014-05-13 06:11:10
2009	1	928	NO COMMENT	\N	2014-05-18 02:01:31	2014-05-18 02:01:31
2010	42	928	NO COMMENT	\N	2014-05-23 10:38:53	2014-05-23 10:38:53
2011	7	956	NO COMMENT	\N	2014-05-10 00:09:58	2014-05-10 00:09:58
2012	48	956	NO COMMENT	\N	2014-05-10 05:24:48	2014-05-10 05:24:48
2013	41	956	NO COMMENT	\N	2014-05-11 16:46:03	2014-05-11 16:46:03
2014	2	956	NO COMMENT	\N	2014-05-24 01:29:13	2014-05-24 01:29:13
2015	42	929	NO COMMENT	\N	2014-05-09 12:05:14	2014-05-09 12:05:14
2016	41	929	NO COMMENT	\N	2014-05-16 16:26:02	2014-05-16 16:26:02
2017	42	930	NO COMMENT	\N	2014-05-19 06:04:31	2014-05-19 06:04:31
2018	1	930	NO COMMENT	\N	2014-05-21 00:00:35	2014-05-21 00:00:35
2019	29	930	NO COMMENT	\N	2014-05-21 13:24:57	2014-05-21 13:24:57
2020	7	930	NO COMMENT	\N	2014-05-25 01:37:10	2014-05-25 01:37:10
2021	2	930	NO COMMENT	\N	2014-05-25 06:03:56	2014-05-25 06:03:56
2022	41	930	NO COMMENT	\N	2014-05-26 11:47:28	2014-05-26 11:47:28
2023	2	931	NO COMMENT	\N	2014-04-13 19:27:08	2014-04-13 19:27:08
2024	7	931	NO COMMENT	\N	2014-05-03 18:41:23	2014-05-03 18:41:23
2025	1	931	NO COMMENT	\N	2014-05-25 18:50:59	2014-05-25 18:50:59
2026	2	932	NO COMMENT	\N	2014-04-13 17:57:27	2014-04-13 17:57:27
2027	7	932	NO COMMENT	\N	2014-04-27 11:26:30	2014-04-27 11:26:30
2028	1	932	NO COMMENT	\N	2014-05-13 12:17:33	2014-05-13 12:17:33
2029	2	933	NO COMMENT	\N	2014-05-03 22:39:07	2014-05-03 22:39:07
2030	1	933	NO COMMENT	\N	2014-05-04 14:34:26	2014-05-04 14:34:26
2031	7	933	NO COMMENT	\N	2014-05-22 15:26:18	2014-05-22 15:26:18
2032	1	935	NO COMMENT	\N	2014-04-17 04:49:19	2014-04-17 04:49:19
2033	7	935	NO COMMENT	\N	2014-04-20 05:17:51	2014-04-20 05:17:51
2034	2	935	NO COMMENT	\N	2014-05-17 18:58:44	2014-05-17 18:58:44
2035	2	936	NO COMMENT	\N	2014-04-21 00:39:49	2014-04-21 00:39:49
2036	7	936	NO COMMENT	\N	2014-05-13 10:28:08	2014-05-13 10:28:08
2037	1	936	NO COMMENT	\N	2014-05-17 00:09:03	2014-05-17 00:09:03
2038	7	937	NO COMMENT	\N	2014-05-06 00:55:04	2014-05-06 00:55:04
2039	2	937	NO COMMENT	\N	2014-05-08 22:44:45	2014-05-08 22:44:45
2040	1	937	NO COMMENT	\N	2014-05-21 19:36:14	2014-05-21 19:36:14
2041	2	939	NO COMMENT	\N	2014-05-11 04:30:38	2014-05-11 04:30:38
2042	2	941	NO COMMENT	\N	2014-05-11 13:50:58	2014-05-11 13:50:58
2043	7	941	NO COMMENT	\N	2014-05-12 01:34:04	2014-05-12 01:34:04
2044	1	941	NO COMMENT	\N	2014-05-24 22:34:25	2014-05-24 22:34:25
2045	7	942	NO COMMENT	\N	2014-03-06 05:00:17	2014-03-06 05:00:17
2046	1	942	NO COMMENT	\N	2014-03-12 04:00:18	2014-03-12 04:00:18
2047	2	943	NO COMMENT	\N	2014-05-26 06:25:59	2014-05-26 06:25:59
2048	7	944	NO COMMENT	\N	2014-02-05 13:28:54	2014-02-05 13:28:54
2049	1	944	NO COMMENT	\N	2014-02-22 01:53:44	2014-02-22 01:53:44
2050	2	945	NO COMMENT	\N	2014-01-12 21:34:55	2014-01-12 21:34:55
2051	1	945	NO COMMENT	\N	2014-03-31 02:50:56	2014-03-31 02:50:56
2052	7	945	NO COMMENT	\N	2014-05-21 02:03:15	2014-05-21 02:03:15
2053	1	946	NO COMMENT	\N	2014-04-04 01:08:20	2014-04-04 01:08:20
2054	1	947	NO COMMENT	\N	2014-02-13 03:24:23	2014-02-13 03:24:23
2055	7	947	NO COMMENT	\N	2014-03-04 09:19:54	2014-03-04 09:19:54
2056	2	947	NO COMMENT	\N	2014-05-07 17:49:28	2014-05-07 17:49:28
2057	7	948	NO COMMENT	\N	2013-11-24 21:35:51	2013-11-24 21:35:51
2058	7	949	NO COMMENT	\N	2013-12-18 22:25:56	2013-12-18 22:25:56
2059	1	949	NO COMMENT	\N	2014-02-15 16:18:56	2014-02-15 16:18:56
2060	2	949	NO COMMENT	\N	2014-05-24 11:08:49	2014-05-24 11:08:49
2061	7	950	NO COMMENT	\N	2014-01-02 05:56:09	2014-01-02 05:56:09
2062	2	950	NO COMMENT	\N	2014-01-12 14:24:36	2014-01-12 14:24:36
2063	1	950	NO COMMENT	\N	2014-05-09 17:26:47	2014-05-09 17:26:47
2064	36	951	NO COMMENT	\N	2014-03-26 22:13:37	2014-03-26 22:13:37
2065	35	951	NO COMMENT	\N	2014-03-30 07:42:32	2014-03-30 07:42:32
2066	7	951	NO COMMENT	\N	2014-04-18 17:03:56	2014-04-18 17:03:56
2067	2	951	NO COMMENT	\N	2014-05-07 07:35:54	2014-05-07 07:35:54
2068	1	951	NO COMMENT	\N	2014-05-09 15:12:34	2014-05-09 15:12:34
2069	1	952	NO COMMENT	\N	2013-12-25 06:09:05	2013-12-25 06:09:05
2070	2	952	NO COMMENT	\N	2014-01-13 22:47:59	2014-01-13 22:47:59
2071	7	952	NO COMMENT	\N	2014-04-08 14:44:26	2014-04-08 14:44:26
2072	2	953	NO COMMENT	\N	2013-11-27 15:03:07	2013-11-27 15:03:07
2073	7	953	NO COMMENT	\N	2014-01-01 11:24:43	2014-01-01 11:24:43
2074	1	953	NO COMMENT	\N	2014-03-30 16:02:40	2014-03-30 16:02:40
2075	1	954	NO COMMENT	\N	2013-12-10 00:04:07	2013-12-10 00:04:07
2076	7	954	NO COMMENT	\N	2014-01-05 22:28:21	2014-01-05 22:28:21
2077	2	954	NO COMMENT	\N	2014-05-13 12:38:03	2014-05-13 12:38:03
2078	2	957	NO COMMENT	\N	2013-10-22 04:13:15	2013-10-22 04:13:15
2079	7	957	NO COMMENT	\N	2013-11-22 20:53:57	2013-11-22 20:53:57
2080	1	957	NO COMMENT	\N	2014-02-15 12:51:35	2014-02-15 12:51:35
2081	25	958	NO COMMENT	\N	2014-05-12 11:47:01	2014-05-12 11:47:01
2082	7	958	NO COMMENT	\N	2014-05-18 16:15:00	2014-05-18 16:15:00
2083	16	959	NO COMMENT	\N	2014-01-04 16:44:40	2014-01-04 16:44:40
2084	7	959	NO COMMENT	\N	2014-01-15 20:01:17	2014-01-15 20:01:17
2085	1	959	NO COMMENT	\N	2014-01-22 23:39:07	2014-01-22 23:39:07
2086	2	959	NO COMMENT	\N	2014-04-19 07:38:17	2014-04-19 07:38:17
2087	7	960	NO COMMENT	\N	2014-03-25 03:34:02	2014-03-25 03:34:02
2088	2	960	NO COMMENT	\N	2014-04-05 05:58:38	2014-04-05 05:58:38
2089	7	961	NO COMMENT	\N	2013-10-23 19:35:11	2013-10-23 19:35:11
2090	1	961	NO COMMENT	\N	2013-10-30 18:35:45	2013-10-30 18:35:45
2091	2	961	NO COMMENT	\N	2014-04-09 11:07:24	2014-04-09 11:07:24
2092	7	963	NO COMMENT	\N	2014-02-14 06:01:17	2014-02-14 06:01:17
2093	1	963	NO COMMENT	\N	2014-02-22 20:26:30	2014-02-22 20:26:30
2094	2	963	NO COMMENT	\N	2014-03-08 11:04:16	2014-03-08 11:04:16
2095	7	964	NO COMMENT	\N	2014-03-13 00:25:04	2014-03-13 00:25:04
2096	2	964	NO COMMENT	\N	2014-03-16 05:01:23	2014-03-16 05:01:23
2097	1	964	NO COMMENT	\N	2014-05-16 12:28:50	2014-05-16 12:28:50
2098	1	965	NO COMMENT	\N	2013-12-03 00:53:14	2013-12-03 00:53:14
2099	7	965	NO COMMENT	\N	2014-01-04 02:07:17	2014-01-04 02:07:17
2100	2	966	NO COMMENT	\N	2014-04-21 03:05:40	2014-04-21 03:05:40
2101	12	967	NO COMMENT	\N	2014-05-04 09:42:18	2014-05-04 09:42:18
2102	10	967	NO COMMENT	\N	2014-05-04 22:28:38	2014-05-04 22:28:38
2103	2	968	NO COMMENT	\N	2013-12-26 18:41:18	2013-12-26 18:41:18
2104	7	968	NO COMMENT	\N	2014-01-09 01:38:19	2014-01-09 01:38:19
2105	1	968	NO COMMENT	\N	2014-01-09 11:41:08	2014-01-09 11:41:08
2106	1	969	NO COMMENT	\N	2014-02-04 00:09:21	2014-02-04 00:09:21
2107	2	969	NO COMMENT	\N	2014-05-04 05:27:21	2014-05-04 05:27:21
2108	2	970	NO COMMENT	\N	2014-03-08 09:13:26	2014-03-08 09:13:26
2109	7	970	NO COMMENT	\N	2014-03-26 14:08:41	2014-03-26 14:08:41
2110	1	970	NO COMMENT	\N	2014-04-28 16:48:26	2014-04-28 16:48:26
2111	2	971	NO COMMENT	\N	2014-01-21 14:07:37	2014-01-21 14:07:37
2112	7	971	NO COMMENT	\N	2014-04-13 03:35:01	2014-04-13 03:35:01
2113	1	971	NO COMMENT	\N	2014-05-06 21:24:11	2014-05-06 21:24:11
2114	7	972	NO COMMENT	\N	2014-03-25 06:42:32	2014-03-25 06:42:32
2115	1	972	NO COMMENT	\N	2014-04-23 23:49:29	2014-04-23 23:49:29
2116	2	972	NO COMMENT	\N	2014-05-04 21:26:15	2014-05-04 21:26:15
2117	1	973	NO COMMENT	\N	2014-04-09 13:19:29	2014-04-09 13:19:29
2118	7	973	NO COMMENT	\N	2014-04-22 17:17:07	2014-04-22 17:17:07
2119	2	973	NO COMMENT	\N	2014-05-25 00:23:13	2014-05-25 00:23:13
2120	1	975	NO COMMENT	\N	2014-05-01 16:54:17	2014-05-01 16:54:17
2121	1	976	NO COMMENT	\N	2014-01-15 21:44:38	2014-01-15 21:44:38
2122	2	976	NO COMMENT	\N	2014-01-16 23:26:06	2014-01-16 23:26:06
2123	7	976	NO COMMENT	\N	2014-01-29 07:27:55	2014-01-29 07:27:55
2124	7	977	NO COMMENT	\N	2014-03-07 02:24:27	2014-03-07 02:24:27
2125	2	977	NO COMMENT	\N	2014-03-08 08:34:37	2014-03-08 08:34:37
2126	1	977	NO COMMENT	\N	2014-05-15 07:20:09	2014-05-15 07:20:09
2127	1	978	NO COMMENT	\N	2014-04-08 06:19:17	2014-04-08 06:19:17
2128	2	978	NO COMMENT	\N	2014-04-12 13:24:00	2014-04-12 13:24:00
2129	7	978	NO COMMENT	\N	2014-04-15 09:14:05	2014-04-15 09:14:05
2130	35	981	NO COMMENT	\N	2014-05-18 02:11:22	2014-05-18 02:11:22
2131	44	981	NO COMMENT	\N	2014-05-25 16:40:21	2014-05-25 16:40:21
2132	14	982	NO COMMENT	\N	2014-05-21 03:29:34	2014-05-21 03:29:34
2133	43	982	NO COMMENT	\N	2014-05-21 21:32:41	2014-05-21 21:32:41
2134	40	982	NO COMMENT	\N	2014-05-22 14:28:45	2014-05-22 14:28:45
2135	47	983	NO COMMENT	\N	2014-05-22 14:00:58	2014-05-22 14:00:58
2136	20	983	NO COMMENT	\N	2014-05-23 19:26:52	2014-05-23 19:26:52
2137	35	984	NO COMMENT	\N	2014-05-23 04:06:09	2014-05-23 04:06:09
2138	10	984	NO COMMENT	\N	2014-05-23 04:18:43	2014-05-23 04:18:43
2139	2	984	NO COMMENT	\N	2014-05-23 20:13:54	2014-05-23 20:13:54
2140	47	984	NO COMMENT	\N	2014-05-23 20:33:14	2014-05-23 20:33:14
2141	6	984	NO COMMENT	\N	2014-05-24 05:01:04	2014-05-24 05:01:04
2142	14	984	NO COMMENT	\N	2014-05-24 06:24:55	2014-05-24 06:24:55
2143	20	984	NO COMMENT	\N	2014-05-25 02:38:11	2014-05-25 02:38:11
2144	46	984	NO COMMENT	\N	2014-05-25 04:11:20	2014-05-25 04:11:20
2145	37	984	NO COMMENT	\N	2014-05-26 03:51:37	2014-05-26 03:51:37
2146	1	984	NO COMMENT	\N	2014-05-26 11:47:07	2014-05-26 11:47:07
2147	41	984	NO COMMENT	\N	2014-05-26 19:40:22	2014-05-26 19:40:22
2148	24	984	NO COMMENT	\N	2014-05-26 21:25:13	2014-05-26 21:25:13
2149	36	984	NO COMMENT	\N	2014-05-26 23:58:59	2014-05-26 23:58:59
2150	44	984	NO COMMENT	\N	2014-05-27 00:41:19	2014-05-27 00:41:19
2151	40	984	NO COMMENT	\N	2014-05-27 09:22:13	2014-05-27 09:22:13
2152	29	985	NO COMMENT	\N	2014-05-25 04:14:53	2014-05-25 04:14:53
2153	21	985	NO COMMENT	\N	2014-05-25 23:19:16	2014-05-25 23:19:16
2154	48	985	NO COMMENT	\N	2014-05-26 01:28:12	2014-05-26 01:28:12
2155	7	985	NO COMMENT	\N	2014-05-26 08:32:15	2014-05-26 08:32:15
2156	37	985	NO COMMENT	\N	2014-05-27 03:09:13	2014-05-27 03:09:13
2157	2	985	NO COMMENT	\N	2014-05-27 08:25:51	2014-05-27 08:25:51
2158	7	986	NO COMMENT	\N	2014-05-17 03:33:19	2014-05-17 03:33:19
2159	2	986	NO COMMENT	\N	2014-05-17 08:09:22	2014-05-17 08:09:22
2160	17	986	NO COMMENT	\N	2014-05-18 04:31:11	2014-05-18 04:31:11
2161	27	986	NO COMMENT	\N	2014-05-21 04:31:30	2014-05-21 04:31:30
2162	25	986	NO COMMENT	\N	2014-05-24 02:42:44	2014-05-24 02:42:44
2163	23	986	NO COMMENT	\N	2014-05-24 15:01:16	2014-05-24 15:01:16
2164	1	986	NO COMMENT	\N	2014-05-25 12:36:32	2014-05-25 12:36:32
2165	1	987	NO COMMENT	\N	2014-05-17 20:52:10	2014-05-17 20:52:10
2166	12	1033	NO COMMENT	\N	2014-05-21 05:37:24	2014-05-21 05:37:24
2167	40	988	NO COMMENT	\N	2014-05-16 00:47:52	2014-05-16 00:47:52
2168	34	988	NO COMMENT	\N	2014-05-19 21:59:59	2014-05-19 21:59:59
2169	1	988	NO COMMENT	\N	2014-05-23 02:28:40	2014-05-23 02:28:40
2170	21	989	NO COMMENT	\N	2014-05-17 04:32:29	2014-05-17 04:32:29
2171	5	989	NO COMMENT	\N	2014-05-18 08:25:59	2014-05-18 08:25:59
2172	1	989	NO COMMENT	\N	2014-05-19 18:03:48	2014-05-19 18:03:48
2173	39	989	NO COMMENT	\N	2014-05-20 00:26:54	2014-05-20 00:26:54
2174	34	989	NO COMMENT	\N	2014-05-20 07:25:53	2014-05-20 07:25:53
2175	2	989	NO COMMENT	\N	2014-05-24 20:11:48	2014-05-24 20:11:48
2176	40	989	NO COMMENT	\N	2014-05-25 06:29:18	2014-05-25 06:29:18
2177	7	989	NO COMMENT	\N	2014-05-25 08:02:09	2014-05-25 08:02:09
2178	7	990	NO COMMENT	\N	2014-05-15 05:12:50	2014-05-15 05:12:50
2179	2	990	NO COMMENT	\N	2014-05-22 01:52:19	2014-05-22 01:52:19
2180	48	990	NO COMMENT	\N	2014-05-23 18:10:53	2014-05-23 18:10:53
2181	1	990	NO COMMENT	\N	2014-05-27 04:40:52	2014-05-27 04:40:52
2182	7	991	NO COMMENT	\N	2014-05-13 19:50:12	2014-05-13 19:50:12
2183	31	991	NO COMMENT	\N	2014-05-22 04:36:46	2014-05-22 04:36:46
2184	18	991	NO COMMENT	\N	2014-05-22 05:06:52	2014-05-22 05:06:52
2185	26	992	NO COMMENT	\N	2014-05-23 10:32:23	2014-05-23 10:32:23
2186	40	993	NO COMMENT	\N	2014-05-20 08:53:25	2014-05-20 08:53:25
2187	1	993	NO COMMENT	\N	2014-05-20 10:41:46	2014-05-20 10:41:46
2188	2	993	NO COMMENT	\N	2014-05-20 14:54:47	2014-05-20 14:54:47
2189	45	993	NO COMMENT	\N	2014-05-21 21:31:16	2014-05-21 21:31:16
2190	42	993	NO COMMENT	\N	2014-05-24 04:28:08	2014-05-24 04:28:08
2191	6	994	NO COMMENT	\N	2014-05-14 05:20:21	2014-05-14 05:20:21
2192	48	995	NO COMMENT	\N	2014-05-17 20:33:27	2014-05-17 20:33:27
2193	7	995	NO COMMENT	\N	2014-05-18 11:03:02	2014-05-18 11:03:02
2194	17	995	NO COMMENT	\N	2014-05-22 05:52:09	2014-05-22 05:52:09
2195	2	995	NO COMMENT	\N	2014-05-24 04:39:05	2014-05-24 04:39:05
2196	6	995	NO COMMENT	\N	2014-05-25 08:10:41	2014-05-25 08:10:41
2197	1	995	NO COMMENT	\N	2014-05-26 10:31:40	2014-05-26 10:31:40
2198	2	996	NO COMMENT	\N	2014-05-20 08:11:51	2014-05-20 08:11:51
2199	29	997	NO COMMENT	\N	2014-05-16 03:13:18	2014-05-16 03:13:18
2200	1	997	NO COMMENT	\N	2014-05-16 10:15:06	2014-05-16 10:15:06
2201	48	997	NO COMMENT	\N	2014-05-22 03:01:17	2014-05-22 03:01:17
2202	2	997	NO COMMENT	\N	2014-05-25 19:45:34	2014-05-25 19:45:34
2203	1	998	NO COMMENT	\N	2014-05-11 02:46:14	2014-05-11 02:46:14
2204	2	998	NO COMMENT	\N	2014-05-11 05:47:36	2014-05-11 05:47:36
2205	7	998	NO COMMENT	\N	2014-05-24 17:48:51	2014-05-24 17:48:51
2206	2	1034	NO COMMENT	\N	2014-02-20 15:10:22	2014-02-20 15:10:22
2207	1	1034	NO COMMENT	\N	2014-03-12 03:51:39	2014-03-12 03:51:39
2208	7	999	NO COMMENT	\N	2014-05-13 21:05:25	2014-05-13 21:05:25
2209	1	999	NO COMMENT	\N	2014-05-19 02:13:35	2014-05-19 02:13:35
2210	2	999	NO COMMENT	\N	2014-05-24 16:07:04	2014-05-24 16:07:04
2211	1	1000	NO COMMENT	\N	2014-05-22 07:37:43	2014-05-22 07:37:43
2212	1	1001	NO COMMENT	\N	2014-05-20 05:09:15	2014-05-20 05:09:15
2213	7	1001	NO COMMENT	\N	2014-05-22 06:20:02	2014-05-22 06:20:02
2214	2	1001	NO COMMENT	\N	2014-05-25 09:02:09	2014-05-25 09:02:09
2215	2	1002	NO COMMENT	\N	2014-05-20 20:56:18	2014-05-20 20:56:18
2216	1	1002	NO COMMENT	\N	2014-05-25 06:43:43	2014-05-25 06:43:43
2217	7	1002	NO COMMENT	\N	2014-05-25 13:54:04	2014-05-25 13:54:04
2218	7	1004	NO COMMENT	\N	2014-05-24 22:45:06	2014-05-24 22:45:06
2219	2	1005	NO COMMENT	\N	2014-05-19 08:29:15	2014-05-19 08:29:15
2220	7	1005	NO COMMENT	\N	2014-05-21 03:01:23	2014-05-21 03:01:23
2221	29	1005	NO COMMENT	\N	2014-05-21 23:19:32	2014-05-21 23:19:32
2222	1	1005	NO COMMENT	\N	2014-05-25 11:18:01	2014-05-25 11:18:01
2223	7	1006	NO COMMENT	\N	2014-05-22 21:27:20	2014-05-22 21:27:20
2224	43	1006	NO COMMENT	\N	2014-05-26 10:57:56	2014-05-26 10:57:56
2225	29	1007	NO COMMENT	\N	2014-05-22 11:36:42	2014-05-22 11:36:42
2226	2	1007	NO COMMENT	\N	2014-05-22 15:13:36	2014-05-22 15:13:36
2227	1	1007	NO COMMENT	\N	2014-05-24 22:21:34	2014-05-24 22:21:34
2228	7	1007	NO COMMENT	\N	2014-05-25 17:28:53	2014-05-25 17:28:53
2229	43	1007	NO COMMENT	\N	2014-05-25 20:12:03	2014-05-25 20:12:03
2230	13	1009	NO COMMENT	\N	2014-05-22 01:42:21	2014-05-22 01:42:21
2231	18	1009	NO COMMENT	\N	2014-05-24 01:03:22	2014-05-24 01:03:22
2232	6	1009	NO COMMENT	\N	2014-05-25 16:17:20	2014-05-25 16:17:20
2233	44	1009	NO COMMENT	\N	2014-05-26 22:42:02	2014-05-26 22:42:02
2234	46	1009	NO COMMENT	\N	2014-05-27 01:25:51	2014-05-27 01:25:51
2235	2	1010	NO COMMENT	\N	2014-04-25 02:27:50	2014-04-25 02:27:50
2236	7	1010	NO COMMENT	\N	2014-05-19 03:10:55	2014-05-19 03:10:55
2237	1	1010	NO COMMENT	\N	2014-05-25 17:50:46	2014-05-25 17:50:46
2238	7	1012	NO COMMENT	\N	2014-02-17 10:41:20	2014-02-17 10:41:20
2239	1	1012	NO COMMENT	\N	2014-05-16 06:44:11	2014-05-16 06:44:11
2240	2	1012	NO COMMENT	\N	2014-05-17 20:16:05	2014-05-17 20:16:05
2241	7	1013	NO COMMENT	\N	2013-12-01 01:51:53	2013-12-01 01:51:53
2242	1	1013	NO COMMENT	\N	2014-03-25 03:31:08	2014-03-25 03:31:08
2243	2	1013	NO COMMENT	\N	2014-04-28 17:45:10	2014-04-28 17:45:10
2244	1	1014	NO COMMENT	\N	2014-01-21 00:56:55	2014-01-21 00:56:55
2245	7	1014	NO COMMENT	\N	2014-02-17 06:52:07	2014-02-17 06:52:07
2246	2	1014	NO COMMENT	\N	2014-03-08 09:57:29	2014-03-08 09:57:29
2247	35	1015	NO COMMENT	\N	2014-01-09 09:40:53	2014-01-09 09:40:53
2248	1	1015	NO COMMENT	\N	2014-02-11 00:38:25	2014-02-11 00:38:25
2249	2	1015	NO COMMENT	\N	2014-02-22 23:17:11	2014-02-22 23:17:11
2250	7	1015	NO COMMENT	\N	2014-04-07 09:58:16	2014-04-07 09:58:16
2251	7	1016	NO COMMENT	\N	2014-04-18 03:39:27	2014-04-18 03:39:27
2252	1	1016	NO COMMENT	\N	2014-05-06 08:21:50	2014-05-06 08:21:50
2253	7	1018	NO COMMENT	\N	2014-01-19 18:20:17	2014-01-19 18:20:17
2254	2	1018	NO COMMENT	\N	2014-01-28 21:25:49	2014-01-28 21:25:49
2255	1	1018	NO COMMENT	\N	2014-03-14 12:20:23	2014-03-14 12:20:23
2256	1	1020	NO COMMENT	\N	2014-01-22 11:38:00	2014-01-22 11:38:00
2257	7	1021	NO COMMENT	\N	2014-04-25 00:03:46	2014-04-25 00:03:46
2258	1	1021	NO COMMENT	\N	2014-05-04 03:21:27	2014-05-04 03:21:27
2259	2	1021	NO COMMENT	\N	2014-05-12 20:09:59	2014-05-12 20:09:59
2260	41	1022	NO COMMENT	\N	2014-05-10 09:08:29	2014-05-10 09:08:29
2261	23	1022	NO COMMENT	\N	2014-05-16 14:06:47	2014-05-16 14:06:47
2262	48	1022	NO COMMENT	\N	2014-05-19 15:39:32	2014-05-19 15:39:32
2263	35	1023	NO COMMENT	\N	2014-01-17 18:55:48	2014-01-17 18:55:48
2264	1	1023	NO COMMENT	\N	2014-03-08 11:44:36	2014-03-08 11:44:36
2265	7	1023	NO COMMENT	\N	2014-05-24 06:32:34	2014-05-24 06:32:34
2266	35	1024	NO COMMENT	\N	2014-04-14 06:06:27	2014-04-14 06:06:27
2267	7	1024	NO COMMENT	\N	2014-05-02 05:00:59	2014-05-02 05:00:59
2268	1	1024	NO COMMENT	\N	2014-05-14 21:10:04	2014-05-14 21:10:04
2269	2	1024	NO COMMENT	\N	2014-05-18 17:16:54	2014-05-18 17:16:54
2270	1	1025	NO COMMENT	\N	2014-02-17 19:04:57	2014-02-17 19:04:57
2271	7	1025	NO COMMENT	\N	2014-04-13 04:18:30	2014-04-13 04:18:30
2272	1	1026	NO COMMENT	\N	2014-02-24 15:46:14	2014-02-24 15:46:14
2273	2	1026	NO COMMENT	\N	2014-03-31 03:04:33	2014-03-31 03:04:33
2274	7	1026	NO COMMENT	\N	2014-04-28 05:28:40	2014-04-28 05:28:40
2275	7	1028	NO COMMENT	\N	2014-04-01 06:56:18	2014-04-01 06:56:18
2276	1	1028	NO COMMENT	\N	2014-04-09 15:05:23	2014-04-09 15:05:23
2277	7	1029	NO COMMENT	\N	2014-03-12 08:44:43	2014-03-12 08:44:43
2278	2	1029	NO COMMENT	\N	2014-03-28 02:52:04	2014-03-28 02:52:04
2279	1	1029	NO COMMENT	\N	2014-05-09 14:14:54	2014-05-09 14:14:54
2280	1	1030	NO COMMENT	\N	2014-04-22 17:34:01	2014-04-22 17:34:01
2281	2	1030	NO COMMENT	\N	2014-05-08 03:34:39	2014-05-08 03:34:39
2282	7	1031	NO COMMENT	\N	2014-02-10 15:48:52	2014-02-10 15:48:52
2283	1	1031	NO COMMENT	\N	2014-03-01 11:47:28	2014-03-01 11:47:28
2284	2	1031	NO COMMENT	\N	2014-05-19 15:18:19	2014-05-19 15:18:19
2285	2	1036	NO COMMENT	\N	2013-12-22 19:07:05	2013-12-22 19:07:05
2286	7	1036	NO COMMENT	\N	2014-02-10 03:04:52	2014-02-10 03:04:52
2287	1	1036	NO COMMENT	\N	2014-03-22 16:40:02	2014-03-22 16:40:02
2288	7	1038	NO COMMENT	\N	2014-02-19 01:49:28	2014-02-19 01:49:28
2289	1	1038	NO COMMENT	\N	2014-02-23 09:47:50	2014-02-23 09:47:50
2290	2	1038	NO COMMENT	\N	2014-03-14 04:18:51	2014-03-14 04:18:51
2291	7	1039	NO COMMENT	\N	2013-12-04 03:48:34	2013-12-04 03:48:34
2292	1	1039	NO COMMENT	\N	2013-12-15 17:12:44	2013-12-15 17:12:44
2293	2	1039	NO COMMENT	\N	2014-05-19 20:43:49	2014-05-19 20:43:49
2294	1	1040	NO COMMENT	\N	2014-03-13 22:50:27	2014-03-13 22:50:27
2295	2	1040	NO COMMENT	\N	2014-05-04 18:14:08	2014-05-04 18:14:08
2296	2	1041	NO COMMENT	\N	2014-04-09 03:52:20	2014-04-09 03:52:20
2297	7	1041	NO COMMENT	\N	2014-05-01 22:40:21	2014-05-01 22:40:21
2298	43	1041	NO COMMENT	\N	2014-05-11 07:06:03	2014-05-11 07:06:03
2299	1	1041	NO COMMENT	\N	2014-05-20 21:41:32	2014-05-20 21:41:32
2300	2	1042	NO COMMENT	\N	2014-04-06 19:48:23	2014-04-06 19:48:23
2301	7	1042	NO COMMENT	\N	2014-05-23 00:47:51	2014-05-23 00:47:51
2302	1	1042	NO COMMENT	\N	2014-05-24 16:02:30	2014-05-24 16:02:30
2303	2	1044	NO COMMENT	\N	2014-05-06 03:08:24	2014-05-06 03:08:24
2304	7	1044	NO COMMENT	\N	2014-05-18 17:37:53	2014-05-18 17:37:53
2305	1	1044	NO COMMENT	\N	2014-05-25 19:59:28	2014-05-25 19:59:28
2306	1	1045	NO COMMENT	\N	2014-04-14 13:11:23	2014-04-14 13:11:23
2307	46	1045	NO COMMENT	\N	2014-05-01 01:26:20	2014-05-01 01:26:20
2308	7	1045	NO COMMENT	\N	2014-05-02 16:03:33	2014-05-02 16:03:33
2309	44	1056	NO COMMENT	\N	2014-05-25 03:40:30	2014-05-25 03:40:30
2310	30	1056	NO COMMENT	\N	2014-05-25 14:37:43	2014-05-25 14:37:43
2311	42	1056	NO COMMENT	\N	2014-05-26 08:05:30	2014-05-26 08:05:30
2312	29	1046	NO COMMENT	\N	2014-04-24 01:55:32	2014-04-24 01:55:32
2313	7	1046	NO COMMENT	\N	2014-04-24 17:13:35	2014-04-24 17:13:35
2314	2	1046	NO COMMENT	\N	2014-04-25 00:32:05	2014-04-25 00:32:05
2315	1	1046	NO COMMENT	\N	2014-04-28 03:21:16	2014-04-28 03:21:16
2316	42	1046	NO COMMENT	\N	2014-05-18 07:17:10	2014-05-18 07:17:10
2317	1	1047	NO COMMENT	\N	2014-04-03 17:31:58	2014-04-03 17:31:58
2318	2	1047	NO COMMENT	\N	2014-04-16 03:24:13	2014-04-16 03:24:13
2319	36	1047	NO COMMENT	\N	2014-04-23 19:18:49	2014-04-23 19:18:49
2320	35	1047	NO COMMENT	\N	2014-04-30 07:35:15	2014-04-30 07:35:15
2321	7	1047	NO COMMENT	\N	2014-05-12 17:51:44	2014-05-12 17:51:44
2322	35	1048	NO COMMENT	\N	2014-03-18 18:03:36	2014-03-18 18:03:36
2323	1	1048	NO COMMENT	\N	2014-03-19 21:07:40	2014-03-19 21:07:40
2324	7	1048	NO COMMENT	\N	2014-03-24 03:19:57	2014-03-24 03:19:57
2325	45	1051	NO COMMENT	\N	2014-04-26 14:31:15	2014-04-26 14:31:15
2326	35	1051	NO COMMENT	\N	2014-04-29 18:58:07	2014-04-29 18:58:07
2327	1	1051	NO COMMENT	\N	2014-05-09 18:36:22	2014-05-09 18:36:22
2328	42	1051	NO COMMENT	\N	2014-05-10 08:44:33	2014-05-10 08:44:33
2329	46	1051	NO COMMENT	\N	2014-05-10 16:43:12	2014-05-10 16:43:12
2330	42	1052	NO COMMENT	\N	2014-04-14 23:28:25	2014-04-14 23:28:25
2331	35	1052	NO COMMENT	\N	2014-04-25 17:08:04	2014-04-25 17:08:04
2332	34	1052	NO COMMENT	\N	2014-04-27 23:21:23	2014-04-27 23:21:23
2333	2	1052	NO COMMENT	\N	2014-05-05 23:09:10	2014-05-05 23:09:10
2334	7	1052	NO COMMENT	\N	2014-05-07 02:12:32	2014-05-07 02:12:32
2335	46	1054	NO COMMENT	\N	2014-05-14 10:39:04	2014-05-14 10:39:04
2336	7	1054	NO COMMENT	\N	2014-05-19 22:15:37	2014-05-19 22:15:37
2337	47	1054	NO COMMENT	\N	2014-05-22 14:52:51	2014-05-22 14:52:51
2338	19	1054	NO COMMENT	\N	2014-05-23 14:11:08	2014-05-23 14:11:08
2339	42	1054	NO COMMENT	\N	2014-05-24 20:41:34	2014-05-24 20:41:34
2340	9	1054	NO COMMENT	\N	2014-05-25 01:03:49	2014-05-25 01:03:49
2341	34	1054	NO COMMENT	\N	2014-05-25 11:55:28	2014-05-25 11:55:28
2342	1	1054	NO COMMENT	\N	2014-05-26 18:12:01	2014-05-26 18:12:01
2343	40	1054	NO COMMENT	\N	2014-05-27 07:54:18	2014-05-27 07:54:18
2344	15	1055	NO COMMENT	\N	2014-05-25 01:23:26	2014-05-25 01:23:26
2345	33	1055	NO COMMENT	\N	2014-05-25 18:04:29	2014-05-25 18:04:29
2346	28	1055	NO COMMENT	\N	2014-05-26 20:14:00	2014-05-26 20:14:00
2347	42	1055	NO COMMENT	\N	2014-05-27 03:01:15	2014-05-27 03:01:15
2348	47	1055	NO COMMENT	\N	2014-05-27 08:31:24	2014-05-27 08:31:24
2349	7	1057	NO COMMENT	\N	2014-04-07 20:22:21	2014-04-07 20:22:21
2350	2	1057	NO COMMENT	\N	2014-04-10 12:10:47	2014-04-10 12:10:47
2351	1	1057	NO COMMENT	\N	2014-05-12 23:16:51	2014-05-12 23:16:51
2352	2	1059	NO COMMENT	\N	2014-04-14 10:37:48	2014-04-14 10:37:48
2353	7	1059	NO COMMENT	\N	2014-05-18 13:59:10	2014-05-18 13:59:10
2354	1	1060	NO COMMENT	\N	2014-04-11 01:01:21	2014-04-11 01:01:21
2355	7	1060	NO COMMENT	\N	2014-05-07 12:44:15	2014-05-07 12:44:15
2356	2	1060	NO COMMENT	\N	2014-05-24 18:42:52	2014-05-24 18:42:52
2357	1	1061	NO COMMENT	\N	2014-04-23 12:16:28	2014-04-23 12:16:28
2358	2	1061	NO COMMENT	\N	2014-05-07 10:46:46	2014-05-07 10:46:46
2359	7	1061	NO COMMENT	\N	2014-05-12 10:33:20	2014-05-12 10:33:20
2360	2	1062	NO COMMENT	\N	2014-03-31 08:47:47	2014-03-31 08:47:47
2361	1	1062	NO COMMENT	\N	2014-04-03 14:45:38	2014-04-03 14:45:38
2362	7	1062	NO COMMENT	\N	2014-04-16 11:18:04	2014-04-16 11:18:04
2363	7	1063	NO COMMENT	\N	2014-03-31 10:47:11	2014-03-31 10:47:11
2364	1	1063	NO COMMENT	\N	2014-04-02 20:54:30	2014-04-02 20:54:30
2365	7	1064	NO COMMENT	\N	2014-04-25 17:37:10	2014-04-25 17:37:10
2366	2	1064	NO COMMENT	\N	2014-05-08 16:26:05	2014-05-08 16:26:05
2367	1	1064	NO COMMENT	\N	2014-05-22 19:19:49	2014-05-22 19:19:49
2368	7	1065	NO COMMENT	\N	2014-04-17 07:36:30	2014-04-17 07:36:30
2369	35	1065	NO COMMENT	\N	2014-05-20 00:41:25	2014-05-20 00:41:25
2370	2	1065	NO COMMENT	\N	2014-05-23 21:50:49	2014-05-23 21:50:49
2371	2	1066	NO COMMENT	\N	2014-03-25 22:18:42	2014-03-25 22:18:42
2372	1	1066	NO COMMENT	\N	2014-04-16 18:48:40	2014-04-16 18:48:40
2373	7	1066	NO COMMENT	\N	2014-04-23 17:49:01	2014-04-23 17:49:01
2374	7	1067	NO COMMENT	\N	2014-04-10 23:18:08	2014-04-10 23:18:08
2375	2	1067	NO COMMENT	\N	2014-05-05 17:22:51	2014-05-05 17:22:51
2376	1	1067	NO COMMENT	\N	2014-05-19 12:42:19	2014-05-19 12:42:19
2377	10	1077	NO COMMENT	\N	2014-04-26 21:32:56	2014-04-26 21:32:56
2378	7	1077	NO COMMENT	\N	2014-05-02 22:32:30	2014-05-02 22:32:30
2379	37	1077	NO COMMENT	\N	2014-05-16 22:19:35	2014-05-16 22:19:35
2380	7	1078	NO COMMENT	\N	2014-05-03 00:10:15	2014-05-03 00:10:15
2381	2	1078	NO COMMENT	\N	2014-05-09 10:07:26	2014-05-09 10:07:26
2382	6	1078	NO COMMENT	\N	2014-05-20 17:49:19	2014-05-20 17:49:19
2383	12	1078	NO COMMENT	\N	2014-05-21 09:21:12	2014-05-21 09:21:12
2384	24	1078	NO COMMENT	\N	2014-05-22 08:20:39	2014-05-22 08:20:39
2385	1	1068	NO COMMENT	\N	2014-03-29 01:10:53	2014-03-29 01:10:53
2386	2	1068	NO COMMENT	\N	2014-04-12 11:06:31	2014-04-12 11:06:31
2387	7	1068	NO COMMENT	\N	2014-04-29 05:11:53	2014-04-29 05:11:53
2388	7	1069	NO COMMENT	\N	2014-04-24 10:14:41	2014-04-24 10:14:41
2389	2	1069	NO COMMENT	\N	2014-05-05 08:37:52	2014-05-05 08:37:52
2390	1	1069	NO COMMENT	\N	2014-05-23 17:12:06	2014-05-23 17:12:06
2391	37	1071	NO COMMENT	\N	2014-05-15 12:41:25	2014-05-15 12:41:25
2392	7	1072	NO COMMENT	\N	2014-04-13 23:43:47	2014-04-13 23:43:47
2393	2	1072	NO COMMENT	\N	2014-04-23 17:00:58	2014-04-23 17:00:58
2394	1	1072	NO COMMENT	\N	2014-04-29 03:58:00	2014-04-29 03:58:00
2395	1	1074	NO COMMENT	\N	2014-05-15 06:00:10	2014-05-15 06:00:10
2396	2	1074	NO COMMENT	\N	2014-05-25 11:11:38	2014-05-25 11:11:38
2397	1	1075	NO COMMENT	\N	2014-04-19 09:28:14	2014-04-19 09:28:14
2398	9	1075	NO COMMENT	\N	2014-04-25 10:21:28	2014-04-25 10:21:28
2399	2	1075	NO COMMENT	\N	2014-04-28 01:40:55	2014-04-28 01:40:55
2400	7	1075	NO COMMENT	\N	2014-05-03 13:04:25	2014-05-03 13:04:25
2401	43	1076	NO COMMENT	\N	2014-04-08 06:41:47	2014-04-08 06:41:47
2402	31	1079	NO COMMENT	\N	2014-04-19 04:18:17	2014-04-19 04:18:17
2403	2	1079	NO COMMENT	\N	2014-04-30 00:09:28	2014-04-30 00:09:28
2404	14	1079	NO COMMENT	\N	2014-05-14 21:20:36	2014-05-14 21:20:36
2405	10	1079	NO COMMENT	\N	2014-05-21 21:29:06	2014-05-21 21:29:06
2406	7	1080	NO COMMENT	\N	2014-04-01 02:35:40	2014-04-01 02:35:40
2407	36	1080	NO COMMENT	\N	2014-04-14 10:41:49	2014-04-14 10:41:49
2408	35	1080	NO COMMENT	\N	2014-04-14 15:51:42	2014-04-14 15:51:42
2409	25	1080	NO COMMENT	\N	2014-04-22 17:41:35	2014-04-22 17:41:35
2410	1	1080	NO COMMENT	\N	2014-04-23 13:17:10	2014-04-23 13:17:10
2411	2	1080	NO COMMENT	\N	2014-04-23 22:42:33	2014-04-23 22:42:33
2412	1	1081	NO COMMENT	\N	2014-04-20 15:56:18	2014-04-20 15:56:18
2413	2	1082	NO COMMENT	\N	2014-02-15 15:07:50	2014-02-15 15:07:50
2414	7	1082	NO COMMENT	\N	2014-02-19 07:31:19	2014-02-19 07:31:19
2415	29	1082	NO COMMENT	\N	2014-03-06 09:25:22	2014-03-06 09:25:22
2416	1	1082	NO COMMENT	\N	2014-04-07 13:12:21	2014-04-07 13:12:21
2417	2	1084	NO COMMENT	\N	2014-03-09 15:21:45	2014-03-09 15:21:45
2418	1	1084	NO COMMENT	\N	2014-03-10 20:19:30	2014-03-10 20:19:30
2419	7	1084	NO COMMENT	\N	2014-04-26 09:22:10	2014-04-26 09:22:10
2420	1	1085	NO COMMENT	\N	2014-03-26 09:27:00	2014-03-26 09:27:00
2421	2	1085	NO COMMENT	\N	2014-03-26 19:06:23	2014-03-26 19:06:23
2422	7	1085	NO COMMENT	\N	2014-03-29 20:17:17	2014-03-29 20:17:17
2423	7	1086	NO COMMENT	\N	2014-01-26 12:27:15	2014-01-26 12:27:15
2424	1	1086	NO COMMENT	\N	2014-02-25 09:04:51	2014-02-25 09:04:51
2425	2	1086	NO COMMENT	\N	2014-05-07 02:48:22	2014-05-07 02:48:22
2426	7	1088	NO COMMENT	\N	2014-05-04 04:25:52	2014-05-04 04:25:52
2427	1	1089	NO COMMENT	\N	2014-02-21 20:19:27	2014-02-21 20:19:27
2428	2	1089	NO COMMENT	\N	2014-02-28 02:11:37	2014-02-28 02:11:37
2429	7	1089	NO COMMENT	\N	2014-03-18 06:57:08	2014-03-18 06:57:08
2430	1	1090	NO COMMENT	\N	2014-02-28 12:01:38	2014-02-28 12:01:38
2431	2	1090	NO COMMENT	\N	2014-03-08 06:15:15	2014-03-08 06:15:15
2432	7	1090	NO COMMENT	\N	2014-05-09 18:06:18	2014-05-09 18:06:18
2433	1	1091	NO COMMENT	\N	2014-03-05 17:04:41	2014-03-05 17:04:41
2434	7	1091	NO COMMENT	\N	2014-04-07 10:12:43	2014-04-07 10:12:43
2435	2	1091	NO COMMENT	\N	2014-04-26 02:51:28	2014-04-26 02:51:28
2436	7	1092	NO COMMENT	\N	2014-02-22 21:20:19	2014-02-22 21:20:19
2437	2	1092	NO COMMENT	\N	2014-04-06 06:33:35	2014-04-06 06:33:35
2438	1	1092	NO COMMENT	\N	2014-04-14 20:52:43	2014-04-14 20:52:43
2439	7	1093	NO COMMENT	\N	2014-03-21 17:06:54	2014-03-21 17:06:54
2440	21	1093	NO COMMENT	\N	2014-04-02 15:56:54	2014-04-02 15:56:54
2441	1	1093	NO COMMENT	\N	2014-04-15 09:57:32	2014-04-15 09:57:32
2442	2	1093	NO COMMENT	\N	2014-04-27 17:00:56	2014-04-27 17:00:56
2443	2	1094	NO COMMENT	\N	2014-04-06 15:12:54	2014-04-06 15:12:54
2444	7	1094	NO COMMENT	\N	2014-04-27 17:03:30	2014-04-27 17:03:30
2445	21	1094	NO COMMENT	\N	2014-05-01 18:44:18	2014-05-01 18:44:18
2446	1	1094	NO COMMENT	\N	2014-05-03 06:41:44	2014-05-03 06:41:44
2447	7	1095	NO COMMENT	\N	2014-05-21 03:09:41	2014-05-21 03:09:41
2448	21	1096	NO COMMENT	\N	2014-05-21 13:35:41	2014-05-21 13:35:41
2449	2	1098	NO COMMENT	\N	2014-04-12 21:12:07	2014-04-12 21:12:07
2450	17	1098	NO COMMENT	\N	2014-04-18 08:27:14	2014-04-18 08:27:14
2451	7	1098	NO COMMENT	\N	2014-05-01 02:42:14	2014-05-01 02:42:14
2452	1	1098	NO COMMENT	\N	2014-05-13 21:48:12	2014-05-13 21:48:12
2453	21	1098	NO COMMENT	\N	2014-05-16 13:04:35	2014-05-16 13:04:35
2454	7	1099	NO COMMENT	\N	2014-03-07 12:46:52	2014-03-07 12:46:52
2455	2	1099	NO COMMENT	\N	2014-03-07 15:02:08	2014-03-07 15:02:08
2456	1	1099	NO COMMENT	\N	2014-04-09 08:05:49	2014-04-09 08:05:49
2457	16	1099	NO COMMENT	\N	2014-04-30 04:35:03	2014-04-30 04:35:03
2458	7	1112	NO COMMENT	\N	2014-05-01 21:23:59	2014-05-01 21:23:59
2459	7	1100	NO COMMENT	\N	2014-04-17 21:11:43	2014-04-17 21:11:43
2460	2	1100	NO COMMENT	\N	2014-04-22 12:42:25	2014-04-22 12:42:25
2461	1	1100	NO COMMENT	\N	2014-05-03 01:27:57	2014-05-03 01:27:57
2462	48	1101	NO COMMENT	\N	2014-04-19 15:58:15	2014-04-19 15:58:15
2463	9	1101	NO COMMENT	\N	2014-04-26 07:41:01	2014-04-26 07:41:01
2464	7	1101	NO COMMENT	\N	2014-05-07 08:27:18	2014-05-07 08:27:18
2465	1	1101	NO COMMENT	\N	2014-05-07 16:09:49	2014-05-07 16:09:49
2466	2	1101	NO COMMENT	\N	2014-05-17 08:47:56	2014-05-17 08:47:56
2467	7	1102	NO COMMENT	\N	2014-02-09 22:41:25	2014-02-09 22:41:25
2468	1	1102	NO COMMENT	\N	2014-03-23 17:24:46	2014-03-23 17:24:46
2469	2	1102	NO COMMENT	\N	2014-05-08 16:40:04	2014-05-08 16:40:04
2470	7	1103	NO COMMENT	\N	2014-02-17 18:58:00	2014-02-17 18:58:00
2471	1	1103	NO COMMENT	\N	2014-03-24 09:32:12	2014-03-24 09:32:12
2472	2	1103	NO COMMENT	\N	2014-04-23 21:01:33	2014-04-23 21:01:33
2473	7	1104	NO COMMENT	\N	2014-03-21 10:01:32	2014-03-21 10:01:32
2474	2	1104	NO COMMENT	\N	2014-03-31 20:02:30	2014-03-31 20:02:30
2475	1	1104	NO COMMENT	\N	2014-04-20 13:34:19	2014-04-20 13:34:19
2476	2	1106	NO COMMENT	\N	2014-04-18 18:07:44	2014-04-18 18:07:44
2477	14	1106	NO COMMENT	\N	2014-05-24 09:43:22	2014-05-24 09:43:22
2478	7	1107	NO COMMENT	\N	2014-02-22 22:29:36	2014-02-22 22:29:36
2479	7	1108	NO COMMENT	\N	2014-01-23 17:02:24	2014-01-23 17:02:24
2480	35	1109	NO COMMENT	\N	2014-04-21 18:17:34	2014-04-21 18:17:34
2481	7	1109	NO COMMENT	\N	2014-05-16 09:54:46	2014-05-16 09:54:46
2482	7	1110	NO COMMENT	\N	2013-11-27 10:25:55	2013-11-27 10:25:55
2483	7	1111	NO COMMENT	\N	2014-05-14 13:27:30	2014-05-14 13:27:30
2484	7	1125	NO COMMENT	\N	2014-04-24 15:12:37	2014-04-24 15:12:37
2485	7	1113	NO COMMENT	\N	2014-04-27 21:08:30	2014-04-27 21:08:30
2486	7	1114	NO COMMENT	\N	2014-02-28 01:12:44	2014-02-28 01:12:44
2487	7	1115	NO COMMENT	\N	2014-05-22 19:55:23	2014-05-22 19:55:23
2488	7	1116	NO COMMENT	\N	2013-12-01 15:52:46	2013-12-01 15:52:46
2489	7	1117	NO COMMENT	\N	2014-01-07 04:45:47	2014-01-07 04:45:47
2490	7	1118	NO COMMENT	\N	2014-02-01 01:14:15	2014-02-01 01:14:15
2491	7	1119	NO COMMENT	\N	2014-05-02 01:01:53	2014-05-02 01:01:53
2492	14	1121	NO COMMENT	\N	2014-03-20 05:14:14	2014-03-20 05:14:14
2493	7	1121	NO COMMENT	\N	2014-05-20 03:09:48	2014-05-20 03:09:48
2494	7	1122	NO COMMENT	\N	2014-05-03 11:34:46	2014-05-03 11:34:46
2495	7	1123	NO COMMENT	\N	2014-01-26 14:53:12	2014-01-26 14:53:12
2496	7	1126	NO COMMENT	\N	2014-05-22 11:20:35	2014-05-22 11:20:35
2497	7	1127	NO COMMENT	\N	2014-03-15 13:53:53	2014-03-15 13:53:53
2498	7	1128	NO COMMENT	\N	2014-02-17 19:55:30	2014-02-17 19:55:30
2499	7	1129	NO COMMENT	\N	2014-04-07 11:44:50	2014-04-07 11:44:50
2500	42	1130	NO COMMENT	\N	2014-05-03 17:21:38	2014-05-03 17:21:38
2501	7	1130	NO COMMENT	\N	2014-05-03 17:57:55	2014-05-03 17:57:55
2502	7	1131	NO COMMENT	\N	2014-02-08 16:48:10	2014-02-08 16:48:10
2503	7	1133	NO COMMENT	\N	2013-11-29 15:17:03	2013-11-29 15:17:03
2504	16	1134	NO COMMENT	\N	2014-01-11 13:56:09	2014-01-11 13:56:09
2505	7	1134	NO COMMENT	\N	2014-04-13 10:31:02	2014-04-13 10:31:02
2506	35	1135	NO COMMENT	\N	2014-02-22 01:37:08	2014-02-22 01:37:08
2507	7	1135	NO COMMENT	\N	2014-03-28 07:11:09	2014-03-28 07:11:09
2508	16	1135	NO COMMENT	\N	2014-05-14 19:32:22	2014-05-14 19:32:22
2509	29	1135	NO COMMENT	\N	2014-05-19 00:16:44	2014-05-19 00:16:44
2510	7	1136	NO COMMENT	\N	2014-01-21 02:31:49	2014-01-21 02:31:49
2511	14	1137	NO COMMENT	\N	2014-02-17 05:23:11	2014-02-17 05:23:11
2512	7	1137	NO COMMENT	\N	2014-05-08 19:32:29	2014-05-08 19:32:29
2513	10	1138	NO COMMENT	\N	2014-03-25 19:46:00	2014-03-25 19:46:00
2514	7	1138	NO COMMENT	\N	2014-03-26 05:32:35	2014-03-26 05:32:35
2515	14	1138	NO COMMENT	\N	2014-04-27 12:16:53	2014-04-27 12:16:53
2516	7	1139	NO COMMENT	\N	2014-03-30 19:30:22	2014-03-30 19:30:22
2517	7	1140	NO COMMENT	\N	2014-04-10 17:46:55	2014-04-10 17:46:55
2518	7	1142	NO COMMENT	\N	2014-04-30 09:44:44	2014-04-30 09:44:44
2519	7	1143	NO COMMENT	\N	2014-05-07 14:23:03	2014-05-07 14:23:03
2520	7	1144	NO COMMENT	\N	2014-01-11 04:37:59	2014-01-11 04:37:59
2521	7	1147	NO COMMENT	\N	2014-04-24 09:08:57	2014-04-24 09:08:57
2522	7	1148	NO COMMENT	\N	2014-01-18 07:22:00	2014-01-18 07:22:00
2523	7	1150	NO COMMENT	\N	2014-04-09 18:00:50	2014-04-09 18:00:50
2524	7	1151	NO COMMENT	\N	2014-05-24 13:47:12	2014-05-24 13:47:12
2525	7	1152	NO COMMENT	\N	2014-02-02 00:54:40	2014-02-02 00:54:40
2526	7	1153	NO COMMENT	\N	2014-04-14 16:03:41	2014-04-14 16:03:41
2527	7	1154	NO COMMENT	\N	2014-02-27 21:49:03	2014-02-27 21:49:03
2528	7	1155	NO COMMENT	\N	2014-02-22 11:46:54	2014-02-22 11:46:54
2529	7	1156	NO COMMENT	\N	2014-02-13 02:38:57	2014-02-13 02:38:57
2530	35	1156	NO COMMENT	\N	2014-05-23 18:36:59	2014-05-23 18:36:59
2531	35	1157	NO COMMENT	\N	2014-03-06 02:51:12	2014-03-06 02:51:12
2532	19	1158	NO COMMENT	\N	2014-05-20 04:52:21	2014-05-20 04:52:21
2533	7	1159	NO COMMENT	\N	2014-04-28 22:42:46	2014-04-28 22:42:46
2534	7	1160	NO COMMENT	\N	2014-03-23 12:48:37	2014-03-23 12:48:37
2535	48	1161	NO COMMENT	\N	2014-03-30 20:20:32	2014-03-30 20:20:32
2536	7	1162	NO COMMENT	\N	2013-12-14 00:21:26	2013-12-14 00:21:26
2537	7	1163	NO COMMENT	\N	2014-03-05 23:55:15	2014-03-05 23:55:15
2538	7	1164	NO COMMENT	\N	2013-11-11 18:49:11	2013-11-11 18:49:11
2539	7	1165	NO COMMENT	\N	2014-02-23 14:49:30	2014-02-23 14:49:30
2540	7	1166	NO COMMENT	\N	2014-04-26 03:15:40	2014-04-26 03:15:40
2541	7	1168	NO COMMENT	\N	2014-04-18 23:23:11	2014-04-18 23:23:11
2542	7	1169	NO COMMENT	\N	2014-03-16 10:01:53	2014-03-16 10:01:53
2543	7	1170	NO COMMENT	\N	2014-03-16 17:17:49	2014-03-16 17:17:49
2544	4	1170	NO COMMENT	\N	2014-04-28 12:12:01	2014-04-28 12:12:01
2545	7	1173	NO COMMENT	\N	2014-04-18 21:10:39	2014-04-18 21:10:39
2546	7	1174	NO COMMENT	\N	2014-04-29 12:19:46	2014-04-29 12:19:46
2547	7	1175	NO COMMENT	\N	2014-05-18 16:49:43	2014-05-18 16:49:43
2548	4	1176	NO COMMENT	\N	2014-04-21 15:21:33	2014-04-21 15:21:33
2549	7	1176	NO COMMENT	\N	2014-05-25 03:30:35	2014-05-25 03:30:35
2550	7	1178	NO COMMENT	\N	2014-01-04 10:22:15	2014-01-04 10:22:15
2551	7	1179	NO COMMENT	\N	2014-05-07 20:06:54	2014-05-07 20:06:54
2552	7	1180	NO COMMENT	\N	2013-12-07 02:41:18	2013-12-07 02:41:18
2553	7	1181	NO COMMENT	\N	2014-05-21 15:56:00	2014-05-21 15:56:00
2554	7	1182	NO COMMENT	\N	2013-12-22 07:07:09	2013-12-22 07:07:09
2555	7	1183	NO COMMENT	\N	2014-01-29 21:03:02	2014-01-29 21:03:02
2556	7	1184	NO COMMENT	\N	2014-05-09 11:25:54	2014-05-09 11:25:54
2557	7	1186	NO COMMENT	\N	2014-04-25 03:04:02	2014-04-25 03:04:02
2558	1	1187	NO COMMENT	\N	2014-05-03 12:12:21	2014-05-03 12:12:21
2559	7	1187	NO COMMENT	\N	2014-05-23 07:50:29	2014-05-23 07:50:29
2560	2	1187	NO COMMENT	\N	2014-05-24 07:20:52	2014-05-24 07:20:52
2561	7	1188	NO COMMENT	\N	2014-04-28 13:23:40	2014-04-28 13:23:40
2562	1	1188	NO COMMENT	\N	2014-05-12 04:52:36	2014-05-12 04:52:36
2563	2	1188	NO COMMENT	\N	2014-05-18 09:48:05	2014-05-18 09:48:05
2564	2	1189	NO COMMENT	\N	2014-03-20 20:23:21	2014-03-20 20:23:21
2565	7	1189	NO COMMENT	\N	2014-03-25 08:44:20	2014-03-25 08:44:20
2566	1	1189	NO COMMENT	\N	2014-03-31 15:25:45	2014-03-31 15:25:45
2567	7	1190	NO COMMENT	\N	2014-02-10 04:20:28	2014-02-10 04:20:28
2568	2	1190	NO COMMENT	\N	2014-02-10 11:50:09	2014-02-10 11:50:09
2569	1	1190	NO COMMENT	\N	2014-05-13 07:39:07	2014-05-13 07:39:07
2570	7	1191	NO COMMENT	\N	2014-03-14 04:14:16	2014-03-14 04:14:16
2571	2	1191	NO COMMENT	\N	2014-03-22 02:52:19	2014-03-22 02:52:19
2572	1	1191	NO COMMENT	\N	2014-04-29 17:47:48	2014-04-29 17:47:48
2573	1	1192	NO COMMENT	\N	2014-02-24 19:23:46	2014-02-24 19:23:46
2574	2	1192	NO COMMENT	\N	2014-03-20 17:09:18	2014-03-20 17:09:18
2575	7	1192	NO COMMENT	\N	2014-04-24 06:56:51	2014-04-24 06:56:51
2576	2	1194	NO COMMENT	\N	2014-04-26 20:45:54	2014-04-26 20:45:54
2577	1	1194	NO COMMENT	\N	2014-05-02 00:07:56	2014-05-02 00:07:56
2578	7	1194	NO COMMENT	\N	2014-05-08 18:29:22	2014-05-08 18:29:22
2579	42	1194	NO COMMENT	\N	2014-05-09 09:14:32	2014-05-09 09:14:32
2580	1	1195	NO COMMENT	\N	2014-01-29 23:10:30	2014-01-29 23:10:30
2581	7	1195	NO COMMENT	\N	2014-03-21 10:13:12	2014-03-21 10:13:12
2582	12	1195	NO COMMENT	\N	2014-03-23 15:56:51	2014-03-23 15:56:51
2583	2	1195	NO COMMENT	\N	2014-04-18 21:40:59	2014-04-18 21:40:59
2584	14	1195	NO COMMENT	\N	2014-05-18 17:45:25	2014-05-18 17:45:25
2585	7	1196	NO COMMENT	\N	2014-03-22 06:15:46	2014-03-22 06:15:46
2586	2	1196	NO COMMENT	\N	2014-04-16 16:55:28	2014-04-16 16:55:28
2587	1	1196	NO COMMENT	\N	2014-05-14 03:07:28	2014-05-14 03:07:28
2588	10	1197	NO COMMENT	\N	2014-04-13 18:34:54	2014-04-13 18:34:54
2589	12	1197	NO COMMENT	\N	2014-04-23 13:16:16	2014-04-23 13:16:16
2590	2	1197	NO COMMENT	\N	2014-05-08 13:33:40	2014-05-08 13:33:40
2591	31	1197	NO COMMENT	\N	2014-05-24 03:51:52	2014-05-24 03:51:52
2592	7	1199	NO COMMENT	\N	2014-01-18 21:04:54	2014-01-18 21:04:54
2593	2	1199	NO COMMENT	\N	2014-01-20 14:36:21	2014-01-20 14:36:21
2594	1	1199	NO COMMENT	\N	2014-04-30 22:16:02	2014-04-30 22:16:02
2595	16	1199	NO COMMENT	\N	2014-05-05 09:36:11	2014-05-05 09:36:11
2596	2	1200	NO COMMENT	\N	2014-02-10 17:09:16	2014-02-10 17:09:16
2597	1	1200	NO COMMENT	\N	2014-02-17 16:02:27	2014-02-17 16:02:27
2598	35	1200	NO COMMENT	\N	2014-03-28 11:29:51	2014-03-28 11:29:51
2599	7	1200	NO COMMENT	\N	2014-04-11 00:19:56	2014-04-11 00:19:56
2600	7	1201	NO COMMENT	\N	2014-02-27 03:50:59	2014-02-27 03:50:59
2601	1	1201	NO COMMENT	\N	2014-04-22 20:57:02	2014-04-22 20:57:02
2602	29	1201	NO COMMENT	\N	2014-05-01 00:19:04	2014-05-01 00:19:04
2603	21	1202	NO COMMENT	\N	2014-05-26 17:01:03	2014-05-26 17:01:03
2604	29	1203	NO COMMENT	\N	2014-04-27 01:18:15	2014-04-27 01:18:15
2605	6	1203	NO COMMENT	\N	2014-05-04 13:27:14	2014-05-04 13:27:14
2606	16	1203	NO COMMENT	\N	2014-05-14 04:05:57	2014-05-14 04:05:57
2607	21	1203	NO COMMENT	\N	2014-05-17 03:35:29	2014-05-17 03:35:29
2608	7	1203	NO COMMENT	\N	2014-05-22 19:58:30	2014-05-22 19:58:30
2609	16	1204	NO COMMENT	\N	2014-05-05 12:41:10	2014-05-05 12:41:10
2610	35	1204	NO COMMENT	\N	2014-05-07 21:19:46	2014-05-07 21:19:46
2611	29	1204	NO COMMENT	\N	2014-05-24 13:32:25	2014-05-24 13:32:25
2612	7	1205	NO COMMENT	\N	2014-05-06 09:15:36	2014-05-06 09:15:36
2613	16	1205	NO COMMENT	\N	2014-05-06 16:14:22	2014-05-06 16:14:22
2614	1	1205	NO COMMENT	\N	2014-05-14 03:11:20	2014-05-14 03:11:20
2615	12	1205	NO COMMENT	\N	2014-05-17 11:04:12	2014-05-17 11:04:12
2616	1	1206	NO COMMENT	\N	2014-04-06 19:54:41	2014-04-06 19:54:41
2617	1	1207	NO COMMENT	\N	2014-01-22 07:13:54	2014-01-22 07:13:54
2618	7	1207	NO COMMENT	\N	2014-02-22 05:11:28	2014-02-22 05:11:28
2619	2	1207	NO COMMENT	\N	2014-03-10 18:13:08	2014-03-10 18:13:08
2620	43	1207	NO COMMENT	\N	2014-03-21 04:07:23	2014-03-21 04:07:23
2621	43	1208	NO COMMENT	\N	2014-04-16 03:48:45	2014-04-16 03:48:45
2622	7	1208	NO COMMENT	\N	2014-04-24 22:06:47	2014-04-24 22:06:47
2623	2	1208	NO COMMENT	\N	2014-04-30 19:07:48	2014-04-30 19:07:48
2624	1	1208	NO COMMENT	\N	2014-05-06 18:21:32	2014-05-06 18:21:32
2625	7	1211	NO COMMENT	\N	2014-04-04 23:13:22	2014-04-04 23:13:22
2626	1	1211	NO COMMENT	\N	2014-04-12 14:28:29	2014-04-12 14:28:29
2627	2	1211	NO COMMENT	\N	2014-04-25 00:43:13	2014-04-25 00:43:13
2628	2	1212	NO COMMENT	\N	2014-02-15 01:14:56	2014-02-15 01:14:56
2629	7	1212	NO COMMENT	\N	2014-02-18 17:22:00	2014-02-18 17:22:00
2630	1	1212	NO COMMENT	\N	2014-03-09 18:47:51	2014-03-09 18:47:51
2631	2	1213	NO COMMENT	\N	2014-02-20 10:13:30	2014-02-20 10:13:30
2632	1	1213	NO COMMENT	\N	2014-03-15 18:13:29	2014-03-15 18:13:29
2633	7	1213	NO COMMENT	\N	2014-03-30 16:46:03	2014-03-30 16:46:03
2634	2	1214	NO COMMENT	\N	2014-02-03 23:58:55	2014-02-03 23:58:55
2635	7	1214	NO COMMENT	\N	2014-02-27 19:59:06	2014-02-27 19:59:06
2636	1	1215	NO COMMENT	\N	2014-02-18 00:05:47	2014-02-18 00:05:47
2637	35	1216	NO COMMENT	\N	2014-01-28 12:25:44	2014-01-28 12:25:44
2638	7	1216	NO COMMENT	\N	2014-02-08 17:14:45	2014-02-08 17:14:45
2639	1	1216	NO COMMENT	\N	2014-03-21 19:44:37	2014-03-21 19:44:37
2640	2	1216	NO COMMENT	\N	2014-03-28 14:05:11	2014-03-28 14:05:11
2641	7	1217	NO COMMENT	\N	2014-04-19 21:04:43	2014-04-19 21:04:43
2642	1	1217	NO COMMENT	\N	2014-05-08 01:09:05	2014-05-08 01:09:05
2643	21	1217	NO COMMENT	\N	2014-05-09 21:54:38	2014-05-09 21:54:38
2644	40	1217	NO COMMENT	\N	2014-05-12 18:35:55	2014-05-12 18:35:55
2645	2	1217	NO COMMENT	\N	2014-05-24 05:17:52	2014-05-24 05:17:52
2646	2	1219	NO COMMENT	\N	2014-03-31 18:29:48	2014-03-31 18:29:48
2647	7	1219	NO COMMENT	\N	2014-04-08 20:58:07	2014-04-08 20:58:07
2648	1	1219	NO COMMENT	\N	2014-05-09 21:15:38	2014-05-09 21:15:38
2649	7	1220	NO COMMENT	\N	2014-04-04 20:29:18	2014-04-04 20:29:18
2650	2	1220	NO COMMENT	\N	2014-05-04 11:40:47	2014-05-04 11:40:47
2651	1	1220	NO COMMENT	\N	2014-05-14 07:09:01	2014-05-14 07:09:01
2652	29	1222	NO COMMENT	\N	2014-05-18 16:55:29	2014-05-18 16:55:29
2653	7	1222	NO COMMENT	\N	2014-05-27 02:21:50	2014-05-27 02:21:50
2654	40	1265	NO COMMENT	\N	2014-05-02 12:01:03	2014-05-02 12:01:03
2655	11	1265	NO COMMENT	\N	2014-05-04 07:45:09	2014-05-04 07:45:09
2656	42	1265	NO COMMENT	\N	2014-05-06 16:20:38	2014-05-06 16:20:38
2657	45	1265	NO COMMENT	\N	2014-05-09 15:49:03	2014-05-09 15:49:03
2658	1	1224	NO COMMENT	\N	2014-04-10 22:07:45	2014-04-10 22:07:45
2659	14	1224	NO COMMENT	\N	2014-04-29 21:34:17	2014-04-29 21:34:17
2660	7	1224	NO COMMENT	\N	2014-05-06 19:48:19	2014-05-06 19:48:19
2661	10	1224	NO COMMENT	\N	2014-05-09 23:35:24	2014-05-09 23:35:24
2662	2	1224	NO COMMENT	\N	2014-05-12 15:32:11	2014-05-12 15:32:11
2663	16	1224	NO COMMENT	\N	2014-05-26 22:34:06	2014-05-26 22:34:06
2664	1	1225	NO COMMENT	\N	2014-03-05 10:32:25	2014-03-05 10:32:25
2665	2	1225	NO COMMENT	\N	2014-05-11 09:04:14	2014-05-11 09:04:14
2666	29	1232	NO COMMENT	\N	2014-05-16 05:50:07	2014-05-16 05:50:07
2667	10	1232	NO COMMENT	\N	2014-05-26 07:56:21	2014-05-26 07:56:21
2668	43	1247	NO COMMENT	\N	2014-04-29 14:46:38	2014-04-29 14:46:38
2669	7	1235	NO COMMENT	\N	2014-05-14 16:32:45	2014-05-14 16:32:45
2670	21	1235	NO COMMENT	\N	2014-05-17 01:54:37	2014-05-17 01:54:37
2671	7	1236	NO COMMENT	\N	2014-05-12 02:51:23	2014-05-12 02:51:23
2672	21	1236	NO COMMENT	\N	2014-05-26 02:14:30	2014-05-26 02:14:30
2673	7	1237	NO COMMENT	\N	2014-05-23 02:36:15	2014-05-23 02:36:15
2674	12	1238	NO COMMENT	\N	2014-05-19 00:55:34	2014-05-19 00:55:34
2675	7	1239	NO COMMENT	\N	2014-05-09 13:45:36	2014-05-09 13:45:36
2676	7	1240	NO COMMENT	\N	2014-05-15 02:30:33	2014-05-15 02:30:33
2677	7	1241	NO COMMENT	\N	2014-05-05 03:39:26	2014-05-05 03:39:26
2678	44	1241	NO COMMENT	\N	2014-05-11 20:46:56	2014-05-11 20:46:56
2679	17	1243	NO COMMENT	\N	2014-05-06 19:01:04	2014-05-06 19:01:04
2680	7	1243	NO COMMENT	\N	2014-05-07 20:29:37	2014-05-07 20:29:37
2681	48	1243	NO COMMENT	\N	2014-05-25 20:37:03	2014-05-25 20:37:03
2682	14	1244	NO COMMENT	\N	2014-04-24 17:58:04	2014-04-24 17:58:04
2683	16	1244	NO COMMENT	\N	2014-05-10 06:29:10	2014-05-10 06:29:10
2684	7	1244	NO COMMENT	\N	2014-05-15 21:24:08	2014-05-15 21:24:08
2685	10	1244	NO COMMENT	\N	2014-05-16 09:20:05	2014-05-16 09:20:05
2686	7	1245	NO COMMENT	\N	2014-05-07 18:04:30	2014-05-07 18:04:30
2687	14	1245	NO COMMENT	\N	2014-05-13 06:29:30	2014-05-13 06:29:30
2688	16	1245	NO COMMENT	\N	2014-05-16 08:38:18	2014-05-16 08:38:18
2689	10	1245	NO COMMENT	\N	2014-05-26 20:14:08	2014-05-26 20:14:08
2690	7	1246	NO COMMENT	\N	2014-05-26 12:28:48	2014-05-26 12:28:48
2691	6	1248	NO COMMENT	\N	2014-04-23 13:41:05	2014-04-23 13:41:05
2692	12	1248	NO COMMENT	\N	2014-05-05 03:57:11	2014-05-05 03:57:11
2693	10	1248	NO COMMENT	\N	2014-05-10 14:07:47	2014-05-10 14:07:47
2694	24	1248	NO COMMENT	\N	2014-05-12 11:13:16	2014-05-12 11:13:16
2695	7	1250	NO COMMENT	\N	2014-05-18 05:54:44	2014-05-18 05:54:44
2696	7	1251	NO COMMENT	\N	2014-05-02 05:55:36	2014-05-02 05:55:36
2697	34	1252	NO COMMENT	\N	2014-05-07 17:17:30	2014-05-07 17:17:30
2698	7	1252	NO COMMENT	\N	2014-05-15 07:57:05	2014-05-15 07:57:05
2699	7	1253	NO COMMENT	\N	2014-05-08 12:13:26	2014-05-08 12:13:26
2700	34	1253	NO COMMENT	\N	2014-05-12 22:35:47	2014-05-12 22:35:47
2701	25	1254	NO COMMENT	\N	2014-05-09 02:35:51	2014-05-09 02:35:51
2702	34	1254	NO COMMENT	\N	2014-05-17 21:52:03	2014-05-17 21:52:03
2703	7	1254	NO COMMENT	\N	2014-05-19 14:49:07	2014-05-19 14:49:07
2704	7	1255	NO COMMENT	\N	2014-05-17 00:39:14	2014-05-17 00:39:14
2705	7	1256	NO COMMENT	\N	2014-05-25 05:51:49	2014-05-25 05:51:49
2706	7	1257	NO COMMENT	\N	2014-05-26 19:17:32	2014-05-26 19:17:32
2707	42	1258	NO COMMENT	\N	2014-05-03 01:25:17	2014-05-03 01:25:17
2708	7	1258	NO COMMENT	\N	2014-05-12 13:05:02	2014-05-12 13:05:02
2709	21	1258	NO COMMENT	\N	2014-05-20 03:24:32	2014-05-20 03:24:32
2710	17	1258	NO COMMENT	\N	2014-05-22 07:48:45	2014-05-22 07:48:45
2711	7	1259	NO COMMENT	\N	2014-04-16 12:11:54	2014-04-16 12:11:54
2712	42	1259	NO COMMENT	\N	2014-04-23 12:40:57	2014-04-23 12:40:57
2713	17	1259	NO COMMENT	\N	2014-04-24 16:30:12	2014-04-24 16:30:12
2714	21	1259	NO COMMENT	\N	2014-05-27 07:59:21	2014-05-27 07:59:21
2715	43	1261	NO COMMENT	\N	2014-05-06 11:27:34	2014-05-06 11:27:34
2716	7	1262	NO COMMENT	\N	2014-05-20 02:27:00	2014-05-20 02:27:00
2717	45	1263	NO COMMENT	\N	2014-04-22 21:48:42	2014-04-22 21:48:42
2718	35	1263	NO COMMENT	\N	2014-05-05 14:14:13	2014-05-05 14:14:13
2719	34	1263	NO COMMENT	\N	2014-05-17 06:24:34	2014-05-17 06:24:34
2720	42	1263	NO COMMENT	\N	2014-05-24 21:52:19	2014-05-24 21:52:19
2721	18	1263	NO COMMENT	\N	2014-05-25 19:06:32	2014-05-25 19:06:32
2722	46	1267	NO COMMENT	\N	2014-04-29 23:47:50	2014-04-29 23:47:50
2723	18	1267	NO COMMENT	\N	2014-05-03 13:30:20	2014-05-03 13:30:20
2724	11	1267	NO COMMENT	\N	2014-05-04 10:55:13	2014-05-04 10:55:13
2725	40	1267	NO COMMENT	\N	2014-05-05 11:46:07	2014-05-05 11:46:07
2726	45	1267	NO COMMENT	\N	2014-05-08 19:13:04	2014-05-08 19:13:04
2727	36	1267	NO COMMENT	\N	2014-05-09 13:57:59	2014-05-09 13:57:59
2728	35	1267	NO COMMENT	\N	2014-05-11 20:21:51	2014-05-11 20:21:51
2729	34	1267	NO COMMENT	\N	2014-05-19 10:23:20	2014-05-19 10:23:20
2730	25	1267	NO COMMENT	\N	2014-05-22 15:23:00	2014-05-22 15:23:00
2731	42	1267	NO COMMENT	\N	2014-05-25 07:22:15	2014-05-25 07:22:15
2732	7	1267	NO COMMENT	\N	2014-05-26 17:36:49	2014-05-26 17:36:49
2733	7	1270	NO COMMENT	\N	2014-05-13 14:34:53	2014-05-13 14:34:53
2734	45	1270	NO COMMENT	\N	2014-05-15 13:15:24	2014-05-15 13:15:24
2735	4	1270	NO COMMENT	\N	2014-05-26 19:37:20	2014-05-26 19:37:20
2736	7	1272	NO COMMENT	\N	2014-04-10 13:29:37	2014-04-10 13:29:37
2737	7	1273	NO COMMENT	\N	2014-03-13 02:29:55	2014-03-13 02:29:55
2738	7	1274	NO COMMENT	\N	2014-03-21 11:06:59	2014-03-21 11:06:59
2739	35	1274	NO COMMENT	\N	2014-05-09 21:06:10	2014-05-09 21:06:10
2740	7	1275	NO COMMENT	\N	2013-12-07 13:52:32	2013-12-07 13:52:32
2741	35	1275	NO COMMENT	\N	2014-03-21 11:04:27	2014-03-21 11:04:27
2742	35	1276	NO COMMENT	\N	2014-04-27 19:26:39	2014-04-27 19:26:39
2743	7	1276	NO COMMENT	\N	2014-05-22 04:10:26	2014-05-22 04:10:26
2744	7	1277	NO COMMENT	\N	2013-12-11 23:56:07	2013-12-11 23:56:07
2745	7	1279	NO COMMENT	\N	2014-02-11 02:43:02	2014-02-11 02:43:02
2746	9	1281	NO COMMENT	\N	2014-04-18 08:05:09	2014-04-18 08:05:09
2747	7	1281	NO COMMENT	\N	2014-04-29 03:43:37	2014-04-29 03:43:37
2748	4	1281	NO COMMENT	\N	2014-05-19 01:36:47	2014-05-19 01:36:47
2749	7	1282	NO COMMENT	\N	2014-03-19 01:26:11	2014-03-19 01:26:11
2750	7	1284	NO COMMENT	\N	2013-12-17 03:16:44	2013-12-17 03:16:44
2751	7	1286	NO COMMENT	\N	2014-02-09 17:14:13	2014-02-09 17:14:13
2752	7	1287	NO COMMENT	\N	2014-01-24 07:26:10	2014-01-24 07:26:10
2753	12	1289	NO COMMENT	\N	2014-04-09 16:06:23	2014-04-09 16:06:23
2754	7	1289	NO COMMENT	\N	2014-04-20 14:00:55	2014-04-20 14:00:55
2755	14	1289	NO COMMENT	\N	2014-04-21 18:45:14	2014-04-21 18:45:14
2756	7	1290	NO COMMENT	\N	2014-05-18 10:40:22	2014-05-18 10:40:22
2757	47	1292	NO COMMENT	\N	2014-05-17 07:16:46	2014-05-17 07:16:46
2758	24	1292	NO COMMENT	\N	2014-05-19 06:53:31	2014-05-19 06:53:31
2759	6	1292	NO COMMENT	\N	2014-05-19 19:29:48	2014-05-19 19:29:48
2760	7	1292	NO COMMENT	\N	2014-05-23 08:37:21	2014-05-23 08:37:21
2761	5	1292	NO COMMENT	\N	2014-05-23 19:32:34	2014-05-23 19:32:34
2762	44	1292	NO COMMENT	\N	2014-05-25 08:44:04	2014-05-25 08:44:04
2763	14	1307	NO COMMENT	\N	2014-04-19 04:45:27	2014-04-19 04:45:27
2764	7	1307	NO COMMENT	\N	2014-04-30 09:23:04	2014-04-30 09:23:04
2765	1	1307	NO COMMENT	\N	2014-05-07 15:04:17	2014-05-07 15:04:17
2766	7	1293	NO COMMENT	\N	2014-03-29 21:41:53	2014-03-29 21:41:53
2767	7	1294	NO COMMENT	\N	2014-02-06 21:20:38	2014-02-06 21:20:38
2768	35	1296	NO COMMENT	\N	2014-02-15 13:18:13	2014-02-15 13:18:13
2769	7	1296	NO COMMENT	\N	2014-02-21 05:15:27	2014-02-21 05:15:27
2770	36	1296	NO COMMENT	\N	2014-03-08 05:51:21	2014-03-08 05:51:21
2771	36	1297	NO COMMENT	\N	2014-05-14 10:23:38	2014-05-14 10:23:38
2772	7	1298	NO COMMENT	\N	2014-05-01 18:07:39	2014-05-01 18:07:39
2773	7	1299	NO COMMENT	\N	2014-03-11 17:11:47	2014-03-11 17:11:47
2774	7	1300	NO COMMENT	\N	2014-05-03 08:45:48	2014-05-03 08:45:48
2775	7	1301	NO COMMENT	\N	2013-12-25 08:09:55	2013-12-25 08:09:55
2776	7	1302	NO COMMENT	\N	2013-11-09 08:48:12	2013-11-09 08:48:12
2777	7	1303	NO COMMENT	\N	2013-12-08 19:54:43	2013-12-08 19:54:43
2778	2	1305	NO COMMENT	\N	2014-04-03 08:51:53	2014-04-03 08:51:53
2779	1	1305	NO COMMENT	\N	2014-04-04 13:43:42	2014-04-04 13:43:42
2780	10	1305	NO COMMENT	\N	2014-04-07 05:47:56	2014-04-07 05:47:56
2781	14	1305	NO COMMENT	\N	2014-04-27 15:51:09	2014-04-27 15:51:09
2782	7	1305	NO COMMENT	\N	2014-04-30 08:12:49	2014-04-30 08:12:49
2783	1	1306	NO COMMENT	\N	2014-03-31 01:35:34	2014-03-31 01:35:34
2784	10	1306	NO COMMENT	\N	2014-04-07 13:42:26	2014-04-07 13:42:26
2785	7	1306	NO COMMENT	\N	2014-04-18 09:47:27	2014-04-18 09:47:27
2786	2	1306	NO COMMENT	\N	2014-05-09 05:25:21	2014-05-09 05:25:21
2787	14	1306	NO COMMENT	\N	2014-05-15 18:17:22	2014-05-15 18:17:22
2788	14	1308	NO COMMENT	\N	2014-03-30 09:49:17	2014-03-30 09:49:17
2789	2	1308	NO COMMENT	\N	2014-04-08 03:10:31	2014-04-08 03:10:31
2790	12	1308	NO COMMENT	\N	2014-04-20 14:54:10	2014-04-20 14:54:10
2791	1	1309	NO COMMENT	\N	2014-04-16 05:19:21	2014-04-16 05:19:21
2792	2	1309	NO COMMENT	\N	2014-04-23 00:35:28	2014-04-23 00:35:28
2793	14	1309	NO COMMENT	\N	2014-04-25 07:42:48	2014-04-25 07:42:48
2794	12	1309	NO COMMENT	\N	2014-05-01 19:54:23	2014-05-01 19:54:23
2795	7	1309	NO COMMENT	\N	2014-05-20 22:14:25	2014-05-20 22:14:25
2796	2	1310	NO COMMENT	\N	2014-05-02 15:19:29	2014-05-02 15:19:29
2797	14	1310	NO COMMENT	\N	2014-05-12 17:51:39	2014-05-12 17:51:39
2798	29	1310	NO COMMENT	\N	2014-05-23 01:03:14	2014-05-23 01:03:14
2799	20	1311	NO COMMENT	\N	2014-05-02 13:31:57	2014-05-02 13:31:57
2800	2	1311	NO COMMENT	\N	2014-05-06 11:27:45	2014-05-06 11:27:45
2801	14	1311	NO COMMENT	\N	2014-05-08 18:52:30	2014-05-08 18:52:30
2802	35	1311	NO COMMENT	\N	2014-05-17 17:31:21	2014-05-17 17:31:21
2803	48	1311	NO COMMENT	\N	2014-05-23 08:33:54	2014-05-23 08:33:54
2804	2	1312	NO COMMENT	\N	2014-05-11 00:46:44	2014-05-11 00:46:44
2805	1	1312	NO COMMENT	\N	2014-05-15 08:36:08	2014-05-15 08:36:08
2806	35	1312	NO COMMENT	\N	2014-05-17 11:22:11	2014-05-17 11:22:11
2807	43	1312	NO COMMENT	\N	2014-05-20 10:31:06	2014-05-20 10:31:06
2808	7	1312	NO COMMENT	\N	2014-05-20 18:45:16	2014-05-20 18:45:16
2809	20	1313	NO COMMENT	\N	2014-05-15 00:15:02	2014-05-15 00:15:02
2810	16	1313	NO COMMENT	\N	2014-05-15 01:25:54	2014-05-15 01:25:54
2811	25	1313	NO COMMENT	\N	2014-05-17 17:32:35	2014-05-17 17:32:35
2812	7	1313	NO COMMENT	\N	2014-05-17 22:36:53	2014-05-17 22:36:53
2813	35	1313	NO COMMENT	\N	2014-05-19 22:12:20	2014-05-19 22:12:20
2814	29	1313	NO COMMENT	\N	2014-05-20 06:35:00	2014-05-20 06:35:00
2815	43	1313	NO COMMENT	\N	2014-05-24 19:46:36	2014-05-24 19:46:36
2816	14	1313	NO COMMENT	\N	2014-05-25 01:00:27	2014-05-25 01:00:27
2817	1	1313	NO COMMENT	\N	2014-05-26 11:52:14	2014-05-26 11:52:14
2818	12	1313	NO COMMENT	\N	2014-05-27 07:30:14	2014-05-27 07:30:14
2819	7	1314	NO COMMENT	\N	2014-03-20 00:03:17	2014-03-20 00:03:17
2820	1	1314	NO COMMENT	\N	2014-03-22 18:41:58	2014-03-22 18:41:58
2821	2	1314	NO COMMENT	\N	2014-05-20 02:53:17	2014-05-20 02:53:17
2822	1	1315	NO COMMENT	\N	2014-05-14 10:23:49	2014-05-14 10:23:49
2823	7	1315	NO COMMENT	\N	2014-05-20 06:10:16	2014-05-20 06:10:16
2824	2	1315	NO COMMENT	\N	2014-05-26 14:35:08	2014-05-26 14:35:08
2825	7	1316	NO COMMENT	\N	2014-05-06 10:40:56	2014-05-06 10:40:56
2826	1	1316	NO COMMENT	\N	2014-05-06 23:04:30	2014-05-06 23:04:30
2827	2	1316	NO COMMENT	\N	2014-05-14 04:15:53	2014-05-14 04:15:53
2828	6	1317	NO COMMENT	\N	2014-05-16 08:43:28	2014-05-16 08:43:28
2829	5	1317	NO COMMENT	\N	2014-05-17 16:58:40	2014-05-17 16:58:40
2830	7	1317	NO COMMENT	\N	2014-05-19 19:42:15	2014-05-19 19:42:15
2831	34	1317	NO COMMENT	\N	2014-05-20 08:33:58	2014-05-20 08:33:58
2832	1	1317	NO COMMENT	\N	2014-05-20 17:40:37	2014-05-20 17:40:37
2833	2	1317	NO COMMENT	\N	2014-05-21 09:16:30	2014-05-21 09:16:30
2834	7	1318	NO COMMENT	\N	2014-04-01 18:33:33	2014-04-01 18:33:33
2835	42	1318	NO COMMENT	\N	2014-04-05 02:33:56	2014-04-05 02:33:56
2836	1	1318	NO COMMENT	\N	2014-04-16 20:08:29	2014-04-16 20:08:29
2837	7	1319	NO COMMENT	\N	2014-04-18 05:54:40	2014-04-18 05:54:40
2838	1	1319	NO COMMENT	\N	2014-05-27 01:30:48	2014-05-27 01:30:48
2839	43	1320	NO COMMENT	\N	2014-03-31 14:12:21	2014-03-31 14:12:21
2840	2	1320	NO COMMENT	\N	2014-04-07 02:27:23	2014-04-07 02:27:23
2841	37	1321	NO COMMENT	\N	2014-05-17 02:37:52	2014-05-17 02:37:52
2842	35	1480	NO COMMENT	\N	2014-05-05 00:31:31	2014-05-05 00:31:31
2843	29	1480	NO COMMENT	\N	2014-05-08 14:10:49	2014-05-08 14:10:49
2844	16	1480	NO COMMENT	\N	2014-05-09 22:05:56	2014-05-09 22:05:56
2845	18	1480	NO COMMENT	\N	2014-05-10 01:46:14	2014-05-10 01:46:14
2846	13	1480	NO COMMENT	\N	2014-05-17 08:22:22	2014-05-17 08:22:22
2847	21	1480	NO COMMENT	\N	2014-05-21 04:44:03	2014-05-21 04:44:03
2848	2	1480	NO COMMENT	\N	2014-05-25 09:46:28	2014-05-25 09:46:28
2849	6	1480	NO COMMENT	\N	2014-05-26 20:13:58	2014-05-26 20:13:58
2850	7	1480	NO COMMENT	\N	2014-05-27 09:05:38	2014-05-27 09:05:38
2851	7	1324	NO COMMENT	\N	2014-03-03 05:10:26	2014-03-03 05:10:26
2852	2	1324	NO COMMENT	\N	2014-03-31 21:18:05	2014-03-31 21:18:05
2853	1	1324	NO COMMENT	\N	2014-05-20 00:03:02	2014-05-20 00:03:02
2854	2	1325	NO COMMENT	\N	2014-03-28 09:56:20	2014-03-28 09:56:20
2855	1	1325	NO COMMENT	\N	2014-04-11 14:15:35	2014-04-11 14:15:35
2856	7	1325	NO COMMENT	\N	2014-04-14 01:06:26	2014-04-14 01:06:26
2857	14	1325	NO COMMENT	\N	2014-05-27 01:18:33	2014-05-27 01:18:33
2858	7	1326	NO COMMENT	\N	2014-04-06 11:09:07	2014-04-06 11:09:07
2859	14	1326	NO COMMENT	\N	2014-04-13 02:34:47	2014-04-13 02:34:47
2860	2	1326	NO COMMENT	\N	2014-04-19 06:05:16	2014-04-19 06:05:16
2861	1	1326	NO COMMENT	\N	2014-04-22 01:31:51	2014-04-22 01:31:51
2862	36	1327	NO COMMENT	\N	2014-03-05 23:08:11	2014-03-05 23:08:11
2863	7	1327	NO COMMENT	\N	2014-03-13 03:21:59	2014-03-13 03:21:59
2864	35	1327	NO COMMENT	\N	2014-04-15 03:17:47	2014-04-15 03:17:47
2865	2	1327	NO COMMENT	\N	2014-05-10 03:59:41	2014-05-10 03:59:41
2866	1	1327	NO COMMENT	\N	2014-05-16 15:05:52	2014-05-16 15:05:52
2867	2	1329	NO COMMENT	\N	2014-03-17 12:52:32	2014-03-17 12:52:32
2868	25	1329	NO COMMENT	\N	2014-03-17 15:46:50	2014-03-17 15:46:50
2869	1	1329	NO COMMENT	\N	2014-03-29 06:56:47	2014-03-29 06:56:47
2870	7	1329	NO COMMENT	\N	2014-04-30 11:50:58	2014-04-30 11:50:58
2871	7	1330	NO COMMENT	\N	2014-04-08 11:48:01	2014-04-08 11:48:01
2872	2	1331	NO COMMENT	\N	2014-04-13 02:04:40	2014-04-13 02:04:40
2873	25	1331	NO COMMENT	\N	2014-04-19 19:12:12	2014-04-19 19:12:12
2874	7	1331	NO COMMENT	\N	2014-04-24 05:40:39	2014-04-24 05:40:39
2875	18	1331	NO COMMENT	\N	2014-05-01 07:24:18	2014-05-01 07:24:18
2876	45	1331	NO COMMENT	\N	2014-05-27 08:10:11	2014-05-27 08:10:11
2877	11	1332	NO COMMENT	\N	2014-05-15 18:41:16	2014-05-15 18:41:16
2878	33	1333	NO COMMENT	\N	2014-05-25 06:05:18	2014-05-25 06:05:18
2879	2	1333	NO COMMENT	\N	2014-05-25 07:31:19	2014-05-25 07:31:19
2880	30	1333	NO COMMENT	\N	2014-05-26 04:32:56	2014-05-26 04:32:56
2881	21	1334	NO COMMENT	\N	2014-03-06 16:13:01	2014-03-06 16:13:01
2882	1	1334	NO COMMENT	\N	2014-03-29 20:13:33	2014-03-29 20:13:33
2883	7	1334	NO COMMENT	\N	2014-04-14 17:45:32	2014-04-14 17:45:32
2884	29	1334	NO COMMENT	\N	2014-04-20 22:26:04	2014-04-20 22:26:04
2885	2	1334	NO COMMENT	\N	2014-04-22 08:04:30	2014-04-22 08:04:30
2886	16	1334	NO COMMENT	\N	2014-05-05 20:04:07	2014-05-05 20:04:07
2887	35	1334	NO COMMENT	\N	2014-05-21 17:02:50	2014-05-21 17:02:50
2888	29	1335	NO COMMENT	\N	2014-03-10 14:24:59	2014-03-10 14:24:59
2889	35	1335	NO COMMENT	\N	2014-04-10 12:10:32	2014-04-10 12:10:32
2890	16	1335	NO COMMENT	\N	2014-04-18 04:32:02	2014-04-18 04:32:02
2891	7	1335	NO COMMENT	\N	2014-04-25 04:22:13	2014-04-25 04:22:13
2892	2	1335	NO COMMENT	\N	2014-05-02 15:09:12	2014-05-02 15:09:12
2893	21	1335	NO COMMENT	\N	2014-05-20 16:59:16	2014-05-20 16:59:16
2894	1	1335	NO COMMENT	\N	2014-05-25 21:43:04	2014-05-25 21:43:04
2895	2	1336	NO COMMENT	\N	2014-03-22 13:04:27	2014-03-22 13:04:27
2896	35	1336	NO COMMENT	\N	2014-03-27 08:59:40	2014-03-27 08:59:40
2897	1	1336	NO COMMENT	\N	2014-04-12 05:52:37	2014-04-12 05:52:37
2898	21	1336	NO COMMENT	\N	2014-04-20 19:19:54	2014-04-20 19:19:54
2899	7	1336	NO COMMENT	\N	2014-04-26 21:20:55	2014-04-26 21:20:55
2900	29	1336	NO COMMENT	\N	2014-05-20 19:49:38	2014-05-20 19:49:38
2901	6	1336	NO COMMENT	\N	2014-05-25 22:18:05	2014-05-25 22:18:05
2902	1	1337	NO COMMENT	\N	2014-05-15 07:53:10	2014-05-15 07:53:10
2903	7	1338	NO COMMENT	\N	2014-05-03 10:00:01	2014-05-03 10:00:01
2904	18	1338	NO COMMENT	\N	2014-05-14 16:25:28	2014-05-14 16:25:28
2905	21	1338	NO COMMENT	\N	2014-05-17 12:09:18	2014-05-17 12:09:18
2906	35	1338	NO COMMENT	\N	2014-05-25 11:18:08	2014-05-25 11:18:08
2907	35	1339	NO COMMENT	\N	2014-05-14 02:44:38	2014-05-14 02:44:38
2908	2	1339	NO COMMENT	\N	2014-05-15 12:43:02	2014-05-15 12:43:02
2909	6	1339	NO COMMENT	\N	2014-05-17 13:01:27	2014-05-17 13:01:27
2910	13	1339	NO COMMENT	\N	2014-05-19 03:29:57	2014-05-19 03:29:57
2911	1	1339	NO COMMENT	\N	2014-05-22 21:41:01	2014-05-22 21:41:01
2912	21	1339	NO COMMENT	\N	2014-05-25 02:49:07	2014-05-25 02:49:07
2913	2	1341	NO COMMENT	\N	2014-04-16 11:48:18	2014-04-16 11:48:18
2914	1	1341	NO COMMENT	\N	2014-05-10 20:50:16	2014-05-10 20:50:16
2915	7	1341	NO COMMENT	\N	2014-05-14 19:15:21	2014-05-14 19:15:21
2916	36	1342	NO COMMENT	\N	2014-04-25 10:27:11	2014-04-25 10:27:11
2917	7	1343	NO COMMENT	\N	2014-03-23 16:13:34	2014-03-23 16:13:34
2918	36	1343	NO COMMENT	\N	2014-04-15 21:29:50	2014-04-15 21:29:50
2919	7	1344	NO COMMENT	\N	2014-04-10 22:48:55	2014-04-10 22:48:55
2920	2	1344	NO COMMENT	\N	2014-04-15 11:44:20	2014-04-15 11:44:20
2921	1	1344	NO COMMENT	\N	2014-05-01 07:34:39	2014-05-01 07:34:39
2922	7	1345	NO COMMENT	\N	2014-03-03 04:40:19	2014-03-03 04:40:19
2923	7	1346	NO COMMENT	\N	2014-04-19 19:05:55	2014-04-19 19:05:55
2924	1	1346	NO COMMENT	\N	2014-05-03 15:23:51	2014-05-03 15:23:51
2925	2	1346	NO COMMENT	\N	2014-05-24 04:11:58	2014-05-24 04:11:58
2926	2	1384	NO COMMENT	\N	2014-03-25 18:18:28	2014-03-25 18:18:28
2927	1	1347	NO COMMENT	\N	2014-05-07 03:24:37	2014-05-07 03:24:37
2928	2	1347	NO COMMENT	\N	2014-05-10 07:51:48	2014-05-10 07:51:48
2929	7	1347	NO COMMENT	\N	2014-05-16 00:57:52	2014-05-16 00:57:52
2930	2	1348	NO COMMENT	\N	2014-05-03 08:24:47	2014-05-03 08:24:47
2931	7	1348	NO COMMENT	\N	2014-05-18 09:09:41	2014-05-18 09:09:41
2932	29	1349	NO COMMENT	\N	2014-04-25 12:55:13	2014-04-25 12:55:13
2933	16	1349	NO COMMENT	\N	2014-04-25 15:32:00	2014-04-25 15:32:00
2934	21	1349	NO COMMENT	\N	2014-04-28 10:57:07	2014-04-28 10:57:07
2935	35	1349	NO COMMENT	\N	2014-05-03 18:18:19	2014-05-03 18:18:19
2936	2	1349	NO COMMENT	\N	2014-05-17 21:33:26	2014-05-17 21:33:26
2937	7	1350	NO COMMENT	\N	2014-04-11 00:06:08	2014-04-11 00:06:08
2938	18	1350	NO COMMENT	\N	2014-04-13 09:54:05	2014-04-13 09:54:05
2939	16	1350	NO COMMENT	\N	2014-04-15 03:34:32	2014-04-15 03:34:32
2940	6	1350	NO COMMENT	\N	2014-04-17 00:35:24	2014-04-17 00:35:24
2941	13	1350	NO COMMENT	\N	2014-04-25 10:40:13	2014-04-25 10:40:13
2942	29	1350	NO COMMENT	\N	2014-05-08 09:33:48	2014-05-08 09:33:48
2943	2	1350	NO COMMENT	\N	2014-05-18 18:53:51	2014-05-18 18:53:51
2944	14	1351	NO COMMENT	\N	2014-04-25 21:11:21	2014-04-25 21:11:21
2945	48	1351	NO COMMENT	\N	2014-04-30 10:35:46	2014-04-30 10:35:46
2946	2	1351	NO COMMENT	\N	2014-05-14 13:25:10	2014-05-14 13:25:10
2947	14	1352	NO COMMENT	\N	2014-04-28 06:09:48	2014-04-28 06:09:48
2948	31	1352	NO COMMENT	\N	2014-05-04 00:17:14	2014-05-04 00:17:14
2949	2	1352	NO COMMENT	\N	2014-05-09 15:58:24	2014-05-09 15:58:24
2950	48	1352	NO COMMENT	\N	2014-05-23 08:34:48	2014-05-23 08:34:48
2951	48	1353	NO COMMENT	\N	2014-04-26 06:22:29	2014-04-26 06:22:29
2952	2	1353	NO COMMENT	\N	2014-04-29 23:32:06	2014-04-29 23:32:06
2953	31	1353	NO COMMENT	\N	2014-05-08 23:03:21	2014-05-08 23:03:21
2954	34	1353	NO COMMENT	\N	2014-05-11 06:30:36	2014-05-11 06:30:36
2955	14	1353	NO COMMENT	\N	2014-05-25 23:42:47	2014-05-25 23:42:47
2956	48	1355	NO COMMENT	\N	2014-05-07 18:41:41	2014-05-07 18:41:41
2957	40	1355	NO COMMENT	\N	2014-05-11 06:15:35	2014-05-11 06:15:35
2958	2	1355	NO COMMENT	\N	2014-05-15 01:06:14	2014-05-15 01:06:14
2959	2	1356	NO COMMENT	\N	2014-05-12 09:34:05	2014-05-12 09:34:05
2960	2	1360	NO COMMENT	\N	2014-03-29 08:54:43	2014-03-29 08:54:43
2961	2	1361	NO COMMENT	\N	2014-03-23 10:52:25	2014-03-23 10:52:25
2962	45	1361	NO COMMENT	\N	2014-04-07 08:22:47	2014-04-07 08:22:47
2963	14	1363	NO COMMENT	\N	2014-05-14 04:10:57	2014-05-14 04:10:57
2964	7	1363	NO COMMENT	\N	2014-05-19 12:38:37	2014-05-19 12:38:37
2965	2	1363	NO COMMENT	\N	2014-05-25 01:31:15	2014-05-25 01:31:15
2966	6	1364	NO COMMENT	\N	2014-04-30 15:04:14	2014-04-30 15:04:14
2967	43	1364	NO COMMENT	\N	2014-05-05 23:32:55	2014-05-05 23:32:55
2968	37	1364	NO COMMENT	\N	2014-05-10 03:54:37	2014-05-10 03:54:37
2969	7	1364	NO COMMENT	\N	2014-05-13 08:49:06	2014-05-13 08:49:06
2970	10	1364	NO COMMENT	\N	2014-05-25 06:33:09	2014-05-25 06:33:09
2971	24	1366	NO COMMENT	\N	2014-05-21 22:17:38	2014-05-21 22:17:38
2972	21	1368	NO COMMENT	\N	2014-04-16 16:40:46	2014-04-16 16:40:46
2973	40	1368	NO COMMENT	\N	2014-04-28 22:42:17	2014-04-28 22:42:17
2974	2	1368	NO COMMENT	\N	2014-05-22 01:51:29	2014-05-22 01:51:29
2975	2	1369	NO COMMENT	\N	2014-04-22 11:23:37	2014-04-22 11:23:37
2976	29	1370	NO COMMENT	\N	2014-04-17 01:15:21	2014-04-17 01:15:21
2977	42	1370	NO COMMENT	\N	2014-05-03 19:59:09	2014-05-03 19:59:09
2978	2	1373	NO COMMENT	\N	2014-05-06 02:49:43	2014-05-06 02:49:43
2979	14	1374	NO COMMENT	\N	2014-05-01 04:13:41	2014-05-01 04:13:41
2980	2	1374	NO COMMENT	\N	2014-05-15 13:08:23	2014-05-15 13:08:23
2981	48	1375	NO COMMENT	\N	2014-04-20 12:09:22	2014-04-20 12:09:22
2982	14	1375	NO COMMENT	\N	2014-04-27 10:06:17	2014-04-27 10:06:17
2983	2	1375	NO COMMENT	\N	2014-05-03 15:35:21	2014-05-03 15:35:21
2984	42	1376	NO COMMENT	\N	2014-03-30 18:27:25	2014-03-30 18:27:25
2985	2	1376	NO COMMENT	\N	2014-05-06 23:30:00	2014-05-06 23:30:00
2986	40	1377	NO COMMENT	\N	2014-05-13 20:29:27	2014-05-13 20:29:27
2987	31	1377	NO COMMENT	\N	2014-05-16 20:07:23	2014-05-16 20:07:23
2988	2	1377	NO COMMENT	\N	2014-05-18 03:21:35	2014-05-18 03:21:35
2989	42	1377	NO COMMENT	\N	2014-05-19 00:40:07	2014-05-19 00:40:07
2990	45	1377	NO COMMENT	\N	2014-05-21 18:25:15	2014-05-21 18:25:15
2991	25	1377	NO COMMENT	\N	2014-05-21 19:43:03	2014-05-21 19:43:03
2992	44	1377	NO COMMENT	\N	2014-05-24 13:29:47	2014-05-24 13:29:47
2993	2	1378	NO COMMENT	\N	2014-05-22 09:24:29	2014-05-22 09:24:29
2994	2	1379	NO COMMENT	\N	2014-01-30 10:51:49	2014-01-30 10:51:49
2995	40	1380	NO COMMENT	\N	2014-04-17 18:21:12	2014-04-17 18:21:12
2996	2	1380	NO COMMENT	\N	2014-05-02 14:04:05	2014-05-02 14:04:05
2997	40	1381	NO COMMENT	\N	2014-05-26 07:04:38	2014-05-26 07:04:38
2998	2	1381	NO COMMENT	\N	2014-05-26 17:31:01	2014-05-26 17:31:01
2999	2	1382	NO COMMENT	\N	2014-01-26 05:51:59	2014-01-26 05:51:59
3000	35	1387	NO COMMENT	\N	2014-05-17 11:51:15	2014-05-17 11:51:15
3001	2	1387	NO COMMENT	\N	2014-05-22 01:41:55	2014-05-22 01:41:55
3002	2	1388	NO COMMENT	\N	2014-03-30 08:25:02	2014-03-30 08:25:02
3003	2	1389	NO COMMENT	\N	2014-02-15 23:40:25	2014-02-15 23:40:25
3004	2	1390	NO COMMENT	\N	2014-04-11 13:35:31	2014-04-11 13:35:31
3005	2	1392	NO COMMENT	\N	2014-05-04 12:11:51	2014-05-04 12:11:51
3006	2	1393	NO COMMENT	\N	2014-04-30 00:20:54	2014-04-30 00:20:54
3007	7	1394	NO COMMENT	\N	2014-04-26 14:16:00	2014-04-26 14:16:00
3008	2	1394	NO COMMENT	\N	2014-05-20 18:12:58	2014-05-20 18:12:58
3009	2	1395	NO COMMENT	\N	2014-05-05 01:04:41	2014-05-05 01:04:41
3010	21	1396	NO COMMENT	\N	2014-04-25 13:56:34	2014-04-25 13:56:34
3011	2	1397	NO COMMENT	\N	2014-04-08 12:38:36	2014-04-08 12:38:36
3012	21	1397	NO COMMENT	\N	2014-05-21 20:05:08	2014-05-21 20:05:08
3013	2	1398	NO COMMENT	\N	2014-01-01 08:15:27	2014-01-01 08:15:27
3014	2	1400	NO COMMENT	\N	2014-04-22 02:43:50	2014-04-22 02:43:50
3015	7	1401	NO COMMENT	\N	2014-03-12 14:12:07	2014-03-12 14:12:07
3016	43	1401	NO COMMENT	\N	2014-04-22 19:30:41	2014-04-22 19:30:41
3017	2	1401	NO COMMENT	\N	2014-05-05 09:11:17	2014-05-05 09:11:17
3018	2	1402	NO COMMENT	\N	2014-04-06 09:55:36	2014-04-06 09:55:36
3019	2	1403	NO COMMENT	\N	2014-02-13 18:31:10	2014-02-13 18:31:10
3020	35	1403	NO COMMENT	\N	2014-02-17 21:30:18	2014-02-17 21:30:18
3021	7	1403	NO COMMENT	\N	2014-05-21 04:38:04	2014-05-21 04:38:04
3022	2	1404	NO COMMENT	\N	2014-04-01 04:40:46	2014-04-01 04:40:46
3023	2	1405	NO COMMENT	\N	2014-03-05 12:23:18	2014-03-05 12:23:18
3024	2	1406	NO COMMENT	\N	2014-05-25 02:11:49	2014-05-25 02:11:49
3025	2	1407	NO COMMENT	\N	2014-03-19 15:39:33	2014-03-19 15:39:33
3026	2	1409	NO COMMENT	\N	2014-03-02 21:25:40	2014-03-02 21:25:40
3027	2	1410	NO COMMENT	\N	2014-04-19 13:21:21	2014-04-19 13:21:21
3028	2	1411	NO COMMENT	\N	2013-11-29 06:03:29	2013-11-29 06:03:29
3029	2	1412	NO COMMENT	\N	2013-11-12 01:07:21	2013-11-12 01:07:21
3030	2	1413	NO COMMENT	\N	2014-04-29 10:28:21	2014-04-29 10:28:21
3031	48	1413	NO COMMENT	\N	2014-05-13 16:32:09	2014-05-13 16:32:09
3032	31	1413	NO COMMENT	\N	2014-05-13 21:16:50	2014-05-13 21:16:50
3033	14	1413	NO COMMENT	\N	2014-05-18 12:35:05	2014-05-18 12:35:05
3034	34	1413	NO COMMENT	\N	2014-05-26 00:34:57	2014-05-26 00:34:57
3035	2	1414	NO COMMENT	\N	2014-04-22 15:50:57	2014-04-22 15:50:57
3036	2	1415	NO COMMENT	\N	2014-05-08 07:35:42	2014-05-08 07:35:42
3037	2	1416	NO COMMENT	\N	2014-05-20 04:17:06	2014-05-20 04:17:06
3038	7	1416	NO COMMENT	\N	2014-05-21 18:45:30	2014-05-21 18:45:30
3039	2	1418	NO COMMENT	\N	2014-04-05 06:14:47	2014-04-05 06:14:47
3040	7	1418	NO COMMENT	\N	2014-05-07 07:18:04	2014-05-07 07:18:04
3041	2	1419	NO COMMENT	\N	2014-04-26 23:44:45	2014-04-26 23:44:45
3042	2	1420	NO COMMENT	\N	2014-03-12 10:08:56	2014-03-12 10:08:56
3043	2	1421	NO COMMENT	\N	2014-04-30 20:07:21	2014-04-30 20:07:21
3044	2	1422	NO COMMENT	\N	2014-05-02 15:52:45	2014-05-02 15:52:45
3045	2	1423	NO COMMENT	\N	2014-04-04 08:42:21	2014-04-04 08:42:21
3046	41	1423	NO COMMENT	\N	2014-04-21 07:52:07	2014-04-21 07:52:07
3047	48	1424	NO COMMENT	\N	2014-04-25 20:53:39	2014-04-25 20:53:39
3048	2	1424	NO COMMENT	\N	2014-05-14 15:40:42	2014-05-14 15:40:42
3049	41	1424	NO COMMENT	\N	2014-05-22 21:02:23	2014-05-22 21:02:23
3050	23	1426	NO COMMENT	\N	2014-05-09 15:54:49	2014-05-09 15:54:49
3051	2	1426	NO COMMENT	\N	2014-05-10 00:33:44	2014-05-10 00:33:44
3052	41	1426	NO COMMENT	\N	2014-05-16 15:08:49	2014-05-16 15:08:49
3053	40	1426	NO COMMENT	\N	2014-05-19 21:47:00	2014-05-19 21:47:00
3054	48	1426	NO COMMENT	\N	2014-05-21 07:05:44	2014-05-21 07:05:44
3055	7	1426	NO COMMENT	\N	2014-05-23 16:56:20	2014-05-23 16:56:20
3056	40	1427	NO COMMENT	\N	2014-05-14 22:56:33	2014-05-14 22:56:33
3057	2	1427	NO COMMENT	\N	2014-05-15 21:26:51	2014-05-15 21:26:51
3058	48	1427	NO COMMENT	\N	2014-05-15 23:15:34	2014-05-15 23:15:34
3059	23	1427	NO COMMENT	\N	2014-05-24 02:51:04	2014-05-24 02:51:04
3060	7	1427	NO COMMENT	\N	2014-05-24 20:29:41	2014-05-24 20:29:41
3061	41	1427	NO COMMENT	\N	2014-05-27 03:39:46	2014-05-27 03:39:46
3062	2	1428	NO COMMENT	\N	2014-04-11 02:27:36	2014-04-11 02:27:36
3063	2	1429	NO COMMENT	\N	2014-05-23 17:40:12	2014-05-23 17:40:12
3064	16	1430	NO COMMENT	\N	2014-04-17 19:32:22	2014-04-17 19:32:22
3065	2	1430	NO COMMENT	\N	2014-04-25 10:51:50	2014-04-25 10:51:50
3066	12	1430	NO COMMENT	\N	2014-05-06 12:15:23	2014-05-06 12:15:23
3067	37	1431	NO COMMENT	\N	2014-05-10 03:35:40	2014-05-10 03:35:40
3068	46	1431	NO COMMENT	\N	2014-05-11 03:46:08	2014-05-11 03:46:08
3069	16	1431	NO COMMENT	\N	2014-05-12 12:58:38	2014-05-12 12:58:38
3070	12	1431	NO COMMENT	\N	2014-05-25 09:16:06	2014-05-25 09:16:06
3071	2	1431	NO COMMENT	\N	2014-05-26 03:36:35	2014-05-26 03:36:35
3072	7	1432	NO COMMENT	\N	2014-03-19 11:41:14	2014-03-19 11:41:14
3073	2	1432	NO COMMENT	\N	2014-05-02 16:07:53	2014-05-02 16:07:53
3074	43	1432	NO COMMENT	\N	2014-05-08 07:20:23	2014-05-08 07:20:23
3075	43	1434	NO COMMENT	\N	2014-04-02 16:44:49	2014-04-02 16:44:49
3076	2	1434	NO COMMENT	\N	2014-04-23 06:31:07	2014-04-23 06:31:07
3077	43	1435	NO COMMENT	\N	2014-04-02 16:20:35	2014-04-02 16:20:35
3078	2	1435	NO COMMENT	\N	2014-04-03 21:12:38	2014-04-03 21:12:38
3079	7	1436	NO COMMENT	\N	2014-04-07 16:30:37	2014-04-07 16:30:37
3080	2	1436	NO COMMENT	\N	2014-05-01 07:45:03	2014-05-01 07:45:03
3081	43	1436	NO COMMENT	\N	2014-05-22 22:02:59	2014-05-22 22:02:59
3082	14	1438	NO COMMENT	\N	2014-04-22 14:19:03	2014-04-22 14:19:03
3083	6	1438	NO COMMENT	\N	2014-04-24 18:03:12	2014-04-24 18:03:12
3084	43	1438	NO COMMENT	\N	2014-05-03 07:56:42	2014-05-03 07:56:42
3085	7	1438	NO COMMENT	\N	2014-05-04 04:36:55	2014-05-04 04:36:55
3086	37	1438	NO COMMENT	\N	2014-05-12 22:12:09	2014-05-12 22:12:09
3087	10	1438	NO COMMENT	\N	2014-05-21 04:04:20	2014-05-21 04:04:20
3088	12	1438	NO COMMENT	\N	2014-05-21 13:02:28	2014-05-21 13:02:28
3089	2	1438	NO COMMENT	\N	2014-05-25 03:47:33	2014-05-25 03:47:33
3090	43	1440	NO COMMENT	\N	2014-05-07 06:23:26	2014-05-07 06:23:26
3091	35	1440	NO COMMENT	\N	2014-05-09 06:40:14	2014-05-09 06:40:14
3092	7	1440	NO COMMENT	\N	2014-05-11 07:51:12	2014-05-11 07:51:12
3093	41	1440	NO COMMENT	\N	2014-05-14 16:50:22	2014-05-14 16:50:22
3094	37	1440	NO COMMENT	\N	2014-05-18 01:27:27	2014-05-18 01:27:27
3095	12	1440	NO COMMENT	\N	2014-05-19 17:47:42	2014-05-19 17:47:42
3096	44	1440	NO COMMENT	\N	2014-05-22 09:13:53	2014-05-22 09:13:53
3097	47	1440	NO COMMENT	\N	2014-05-23 21:50:00	2014-05-23 21:50:00
3098	7	1441	NO COMMENT	\N	2014-05-12 13:49:26	2014-05-12 13:49:26
3099	44	1441	NO COMMENT	\N	2014-05-20 08:53:55	2014-05-20 08:53:55
3100	14	1441	NO COMMENT	\N	2014-05-23 04:37:58	2014-05-23 04:37:58
3101	35	1441	NO COMMENT	\N	2014-05-24 03:10:10	2014-05-24 03:10:10
3102	12	1442	NO COMMENT	\N	2014-05-27 02:45:13	2014-05-27 02:45:13
3103	14	1443	NO COMMENT	\N	2014-03-27 10:51:29	2014-03-27 10:51:29
3104	18	1445	NO COMMENT	\N	2014-05-15 08:00:27	2014-05-15 08:00:27
3105	21	1445	NO COMMENT	\N	2014-05-15 16:59:25	2014-05-15 16:59:25
3106	29	1445	NO COMMENT	\N	2014-05-17 01:30:35	2014-05-17 01:30:35
3107	35	1445	NO COMMENT	\N	2014-05-17 08:44:25	2014-05-17 08:44:25
3108	6	1445	NO COMMENT	\N	2014-05-17 09:41:02	2014-05-17 09:41:02
3109	13	1445	NO COMMENT	\N	2014-05-17 22:01:17	2014-05-17 22:01:17
3110	2	1445	NO COMMENT	\N	2014-05-25 04:27:02	2014-05-25 04:27:02
3111	7	1445	NO COMMENT	\N	2014-05-25 13:35:19	2014-05-25 13:35:19
3112	44	1446	NO COMMENT	\N	2014-05-18 19:28:17	2014-05-18 19:28:17
3113	40	1446	NO COMMENT	\N	2014-05-19 15:49:33	2014-05-19 15:49:33
3114	7	1446	NO COMMENT	\N	2014-05-20 18:39:49	2014-05-20 18:39:49
3115	21	1446	NO COMMENT	\N	2014-05-24 10:14:20	2014-05-24 10:14:20
3116	2	1447	NO COMMENT	\N	2014-05-01 13:23:02	2014-05-01 13:23:02
3117	10	1447	NO COMMENT	\N	2014-05-10 19:35:46	2014-05-10 19:35:46
3118	45	1447	NO COMMENT	\N	2014-05-22 03:55:40	2014-05-22 03:55:40
3119	2	1448	NO COMMENT	\N	2014-03-15 04:14:13	2014-03-15 04:14:13
3120	14	1448	NO COMMENT	\N	2014-04-25 13:32:27	2014-04-25 13:32:27
3121	7	1449	NO COMMENT	\N	2014-04-03 20:59:20	2014-04-03 20:59:20
3122	2	1449	NO COMMENT	\N	2014-04-07 23:40:21	2014-04-07 23:40:21
3123	2	1450	NO COMMENT	\N	2014-02-26 17:39:50	2014-02-26 17:39:50
3124	2	1452	NO COMMENT	\N	2014-04-10 02:45:32	2014-04-10 02:45:32
3125	35	1452	NO COMMENT	\N	2014-05-15 09:02:17	2014-05-15 09:02:17
3126	2	1454	NO COMMENT	\N	2014-04-01 16:29:32	2014-04-01 16:29:32
3127	35	1454	NO COMMENT	\N	2014-04-04 21:35:27	2014-04-04 21:35:27
3128	2	1455	NO COMMENT	\N	2014-04-06 18:36:00	2014-04-06 18:36:00
3129	35	1455	NO COMMENT	\N	2014-05-17 07:48:50	2014-05-17 07:48:50
3130	35	1456	NO COMMENT	\N	2014-04-29 09:50:04	2014-04-29 09:50:04
3131	2	1457	NO COMMENT	\N	2013-12-16 11:29:46	2013-12-16 11:29:46
3132	1	1457	NO COMMENT	\N	2014-04-25 08:49:34	2014-04-25 08:49:34
3133	7	1457	NO COMMENT	\N	2014-04-28 13:04:47	2014-04-28 13:04:47
3134	1	1458	NO COMMENT	\N	2013-12-01 07:07:23	2013-12-01 07:07:23
3135	7	1458	NO COMMENT	\N	2014-02-24 09:26:58	2014-02-24 09:26:58
3136	2	1458	NO COMMENT	\N	2014-05-02 06:05:08	2014-05-02 06:05:08
3137	1	1459	NO COMMENT	\N	2014-02-12 05:13:16	2014-02-12 05:13:16
3138	7	1459	NO COMMENT	\N	2014-05-08 16:48:50	2014-05-08 16:48:50
3139	7	1460	NO COMMENT	\N	2014-01-13 23:55:21	2014-01-13 23:55:21
3140	1	1460	NO COMMENT	\N	2014-01-31 07:02:46	2014-01-31 07:02:46
3141	12	1460	NO COMMENT	\N	2014-04-22 11:52:24	2014-04-22 11:52:24
3142	14	1460	NO COMMENT	\N	2014-04-28 22:10:34	2014-04-28 22:10:34
3143	2	1460	NO COMMENT	\N	2014-05-27 07:29:53	2014-05-27 07:29:53
3144	12	1461	NO COMMENT	\N	2014-05-26 10:55:01	2014-05-26 10:55:01
3145	7	1462	NO COMMENT	\N	2014-04-20 08:39:10	2014-04-20 08:39:10
3146	2	1462	NO COMMENT	\N	2014-05-02 22:08:17	2014-05-02 22:08:17
3147	1	1462	NO COMMENT	\N	2014-05-22 09:10:31	2014-05-22 09:10:31
3148	2	1502	NO COMMENT	\N	2014-04-19 00:39:40	2014-04-19 00:39:40
3149	41	1502	NO COMMENT	\N	2014-04-29 14:51:38	2014-04-29 14:51:38
3150	48	1502	NO COMMENT	\N	2014-05-23 18:12:58	2014-05-23 18:12:58
3151	7	1463	NO COMMENT	\N	2014-03-21 14:19:18	2014-03-21 14:19:18
3152	1	1463	NO COMMENT	\N	2014-04-01 02:08:53	2014-04-01 02:08:53
3153	2	1463	NO COMMENT	\N	2014-04-27 15:43:29	2014-04-27 15:43:29
3154	1	1464	NO COMMENT	\N	2014-01-24 11:29:33	2014-01-24 11:29:33
3155	2	1464	NO COMMENT	\N	2014-03-06 17:03:54	2014-03-06 17:03:54
3156	7	1464	NO COMMENT	\N	2014-03-26 23:39:21	2014-03-26 23:39:21
3157	1	1465	NO COMMENT	\N	2014-01-20 02:30:48	2014-01-20 02:30:48
3158	7	1465	NO COMMENT	\N	2014-02-03 11:18:17	2014-02-03 11:18:17
3159	2	1465	NO COMMENT	\N	2014-04-29 05:11:56	2014-04-29 05:11:56
3160	1	1467	NO COMMENT	\N	2014-03-06 08:30:35	2014-03-06 08:30:35
3161	7	1467	NO COMMENT	\N	2014-05-11 23:59:19	2014-05-11 23:59:19
3162	2	1467	NO COMMENT	\N	2014-05-19 13:17:53	2014-05-19 13:17:53
3163	1	1468	NO COMMENT	\N	2014-04-04 06:56:13	2014-04-04 06:56:13
3164	7	1469	NO COMMENT	\N	2014-02-12 14:25:57	2014-02-12 14:25:57
3165	1	1469	NO COMMENT	\N	2014-03-04 21:32:36	2014-03-04 21:32:36
3166	2	1469	NO COMMENT	\N	2014-04-15 00:32:53	2014-04-15 00:32:53
3167	2	1471	NO COMMENT	\N	2013-12-13 07:21:29	2013-12-13 07:21:29
3168	7	1471	NO COMMENT	\N	2014-04-23 00:07:49	2014-04-23 00:07:49
3169	1	1472	NO COMMENT	\N	2014-02-05 20:23:57	2014-02-05 20:23:57
3170	2	1472	NO COMMENT	\N	2014-03-24 14:23:59	2014-03-24 14:23:59
3171	2	1473	NO COMMENT	\N	2013-12-19 12:02:10	2013-12-19 12:02:10
3172	7	1473	NO COMMENT	\N	2014-02-18 11:02:51	2014-02-18 11:02:51
3173	1	1473	NO COMMENT	\N	2014-04-14 08:50:07	2014-04-14 08:50:07
3174	2	1474	NO COMMENT	\N	2014-03-20 16:42:27	2014-03-20 16:42:27
3175	7	1474	NO COMMENT	\N	2014-05-17 04:41:07	2014-05-17 04:41:07
3176	1	1474	NO COMMENT	\N	2014-05-22 21:59:24	2014-05-22 21:59:24
3177	7	1475	NO COMMENT	\N	2014-03-06 02:55:12	2014-03-06 02:55:12
3178	2	1475	NO COMMENT	\N	2014-03-10 22:11:54	2014-03-10 22:11:54
3179	1	1475	NO COMMENT	\N	2014-05-20 08:43:59	2014-05-20 08:43:59
3180	2	1476	NO COMMENT	\N	2014-04-18 02:01:18	2014-04-18 02:01:18
3181	7	1476	NO COMMENT	\N	2014-04-19 22:13:12	2014-04-19 22:13:12
3182	2	1478	NO COMMENT	\N	2014-02-04 04:03:14	2014-02-04 04:03:14
3183	1	1478	NO COMMENT	\N	2014-02-05 04:17:36	2014-02-05 04:17:36
3184	7	1478	NO COMMENT	\N	2014-04-02 00:13:53	2014-04-02 00:13:53
3185	29	1483	NO COMMENT	\N	2014-05-12 07:35:39	2014-05-12 07:35:39
3186	35	1483	NO COMMENT	\N	2014-05-17 12:20:43	2014-05-17 12:20:43
3187	2	1483	NO COMMENT	\N	2014-05-22 08:52:23	2014-05-22 08:52:23
3188	14	1483	NO COMMENT	\N	2014-05-25 16:17:23	2014-05-25 16:17:23
3189	48	1483	NO COMMENT	\N	2014-05-26 18:10:40	2014-05-26 18:10:40
3190	20	1484	NO COMMENT	\N	2014-05-19 10:37:08	2014-05-19 10:37:08
3191	35	1486	NO COMMENT	\N	2014-05-13 01:42:12	2014-05-13 01:42:12
3192	2	1486	NO COMMENT	\N	2014-05-15 03:18:34	2014-05-15 03:18:34
3193	27	1486	NO COMMENT	\N	2014-05-17 12:31:19	2014-05-17 12:31:19
3194	47	1486	NO COMMENT	\N	2014-05-22 03:06:40	2014-05-22 03:06:40
3195	40	1486	NO COMMENT	\N	2014-05-24 09:33:37	2014-05-24 09:33:37
3196	11	1486	NO COMMENT	\N	2014-05-24 14:26:13	2014-05-24 14:26:13
3197	45	1486	NO COMMENT	\N	2014-05-24 23:47:23	2014-05-24 23:47:23
3198	31	1488	NO COMMENT	\N	2014-04-28 08:36:08	2014-04-28 08:36:08
3199	14	1488	NO COMMENT	\N	2014-05-01 05:07:15	2014-05-01 05:07:15
3200	48	1488	NO COMMENT	\N	2014-05-07 12:21:05	2014-05-07 12:21:05
3201	2	1488	NO COMMENT	\N	2014-05-14 06:00:16	2014-05-14 06:00:16
3202	41	1503	NO COMMENT	\N	2014-05-12 20:47:23	2014-05-12 20:47:23
3203	2	1503	NO COMMENT	\N	2014-05-16 18:43:23	2014-05-16 18:43:23
3204	40	1503	NO COMMENT	\N	2014-05-24 06:13:21	2014-05-24 06:13:21
3205	2	1490	NO COMMENT	\N	2014-04-30 06:45:06	2014-04-30 06:45:06
3206	25	1490	NO COMMENT	\N	2014-05-09 11:33:50	2014-05-09 11:33:50
3207	7	1490	NO COMMENT	\N	2014-05-11 06:58:53	2014-05-11 06:58:53
3208	2	1492	NO COMMENT	\N	2014-04-22 12:29:25	2014-04-22 12:29:25
3209	12	1492	NO COMMENT	\N	2014-05-13 04:22:07	2014-05-13 04:22:07
3210	14	1492	NO COMMENT	\N	2014-05-16 02:06:56	2014-05-16 02:06:56
3211	43	1492	NO COMMENT	\N	2014-05-23 02:17:31	2014-05-23 02:17:31
3212	36	1493	NO COMMENT	\N	2014-05-09 06:35:52	2014-05-09 06:35:52
3213	10	1493	NO COMMENT	\N	2014-05-10 08:02:37	2014-05-10 08:02:37
3214	24	1493	NO COMMENT	\N	2014-05-22 07:20:46	2014-05-22 07:20:46
3215	36	1494	NO COMMENT	\N	2014-05-11 20:38:21	2014-05-11 20:38:21
3216	6	1494	NO COMMENT	\N	2014-05-15 07:50:47	2014-05-15 07:50:47
3217	41	1494	NO COMMENT	\N	2014-05-18 03:52:31	2014-05-18 03:52:31
3218	24	1494	NO COMMENT	\N	2014-05-20 12:01:06	2014-05-20 12:01:06
3219	43	1495	NO COMMENT	\N	2014-05-27 02:16:26	2014-05-27 02:16:26
3220	12	1495	NO COMMENT	\N	2014-05-27 02:41:22	2014-05-27 02:41:22
3221	35	1495	NO COMMENT	\N	2014-05-27 03:03:03	2014-05-27 03:03:03
3222	2	1496	NO COMMENT	\N	2014-05-21 01:15:16	2014-05-21 01:15:16
3223	41	1496	NO COMMENT	\N	2014-05-27 07:09:00	2014-05-27 07:09:00
3224	2	1497	NO COMMENT	\N	2014-05-20 21:42:22	2014-05-20 21:42:22
3225	41	1497	NO COMMENT	\N	2014-05-26 04:32:59	2014-05-26 04:32:59
3226	2	1498	NO COMMENT	\N	2014-04-26 23:09:03	2014-04-26 23:09:03
3227	31	1499	NO COMMENT	\N	2014-05-12 08:24:17	2014-05-12 08:24:17
3228	2	1499	NO COMMENT	\N	2014-05-22 05:17:05	2014-05-22 05:17:05
3229	34	1499	NO COMMENT	\N	2014-05-23 10:55:58	2014-05-23 10:55:58
3230	31	1500	NO COMMENT	\N	2014-05-24 10:54:10	2014-05-24 10:54:10
3231	34	1500	NO COMMENT	\N	2014-05-25 11:22:07	2014-05-25 11:22:07
3232	2	1500	NO COMMENT	\N	2014-05-27 05:31:32	2014-05-27 05:31:32
3233	48	1504	NO COMMENT	\N	2014-05-13 05:18:59	2014-05-13 05:18:59
3234	2	1504	NO COMMENT	\N	2014-05-15 00:54:37	2014-05-15 00:54:37
3235	40	1504	NO COMMENT	\N	2014-05-18 04:28:41	2014-05-18 04:28:41
3236	7	1504	NO COMMENT	\N	2014-05-18 10:29:49	2014-05-18 10:29:49
3237	23	1504	NO COMMENT	\N	2014-05-27 09:03:30	2014-05-27 09:03:30
3238	2	1505	NO COMMENT	\N	2014-05-08 03:22:04	2014-05-08 03:22:04
3239	2	1506	NO COMMENT	\N	2014-05-21 23:54:43	2014-05-21 23:54:43
3240	2	1508	NO COMMENT	\N	2014-02-02 08:27:51	2014-02-02 08:27:51
3241	2	1509	NO COMMENT	\N	2014-01-23 16:11:37	2014-01-23 16:11:37
3242	2	1510	NO COMMENT	\N	2014-01-10 22:37:26	2014-01-10 22:37:26
3243	2	1511	NO COMMENT	\N	2013-12-24 22:15:57	2013-12-24 22:15:57
3244	2	1512	NO COMMENT	\N	2014-01-02 00:56:28	2014-01-02 00:56:28
3245	2	1514	NO COMMENT	\N	2014-01-01 07:45:10	2014-01-01 07:45:10
3246	2	1515	NO COMMENT	\N	2014-03-30 12:36:19	2014-03-30 12:36:19
3247	2	1516	NO COMMENT	\N	2014-05-23 01:37:15	2014-05-23 01:37:15
3248	2	1526	NO COMMENT	\N	2014-03-28 15:05:55	2014-03-28 15:05:55
3249	2	1517	NO COMMENT	\N	2014-02-17 12:04:39	2014-02-17 12:04:39
3250	43	1518	NO COMMENT	\N	2014-03-21 13:40:47	2014-03-21 13:40:47
3251	7	1518	NO COMMENT	\N	2014-05-21 05:39:32	2014-05-21 05:39:32
3252	2	1518	NO COMMENT	\N	2014-05-26 15:19:12	2014-05-26 15:19:12
3253	43	1519	NO COMMENT	\N	2014-03-18 06:01:54	2014-03-18 06:01:54
3254	7	1519	NO COMMENT	\N	2014-03-30 01:06:58	2014-03-30 01:06:58
3255	2	1519	NO COMMENT	\N	2014-04-03 02:07:35	2014-04-03 02:07:35
3256	2	1520	NO COMMENT	\N	2014-05-21 02:10:08	2014-05-21 02:10:08
3257	2	1521	NO COMMENT	\N	2014-04-23 23:50:30	2014-04-23 23:50:30
3258	2	1522	NO COMMENT	\N	2014-04-20 15:56:32	2014-04-20 15:56:32
3259	34	1523	NO COMMENT	\N	2014-05-08 19:29:59	2014-05-08 19:29:59
3260	2	1523	NO COMMENT	\N	2014-05-14 22:26:03	2014-05-14 22:26:03
3261	2	1524	NO COMMENT	\N	2014-05-15 07:04:56	2014-05-15 07:04:56
3262	34	1524	NO COMMENT	\N	2014-05-18 12:41:24	2014-05-18 12:41:24
3263	2	1525	NO COMMENT	\N	2014-01-05 14:56:43	2014-01-05 14:56:43
3264	2	1530	NO COMMENT	\N	2013-12-12 13:34:24	2013-12-12 13:34:24
3265	2	1531	NO COMMENT	\N	2014-03-12 18:36:16	2014-03-12 18:36:16
3266	2	1532	NO COMMENT	\N	2013-12-10 19:39:55	2013-12-10 19:39:55
3267	2	1533	NO COMMENT	\N	2014-01-22 17:58:57	2014-01-22 17:58:57
3268	2	1534	NO COMMENT	\N	2014-04-06 23:45:14	2014-04-06 23:45:14
3269	21	1534	NO COMMENT	\N	2014-04-29 15:48:28	2014-04-29 15:48:28
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comments_id_seq', 3269, true);


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY likes (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('likes_id_seq', 1, false);


--
-- Data for Name: log_entries; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY log_entries (id, user_id, body, created_at, updated_at) FROM stdin;
\.


--
-- Name: log_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('log_entries_id_seq', 1, false);


--
-- Data for Name: looks; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY looks (id, user_id, exercise_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: looks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('looks_id_seq', 1, false);


--
-- Data for Name: muted_submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY muted_submissions (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: muted_submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('muted_submissions_id_seq', 1, false);


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY notifications (id, user_id, item_id, regarding, read, count, created_at, updated_at, item_type, creator_id) FROM stdin;
1	7	59	code	f	1	2014-02-10 10:32:21	2014-02-10 10:32:21	UserExercise	3
2	4	95	code	f	1	2014-05-20 20:16:12	2014-05-20 20:16:12	UserExercise	26
3	7	98	code	f	1	2014-05-02 18:36:40	2014-05-02 18:36:40	UserExercise	26
4	7	102	code	f	1	2014-05-11 22:31:56	2014-05-11 22:31:56	UserExercise	26
5	21	108	code	f	1	2014-04-28 22:23:37	2014-04-28 22:23:37	UserExercise	26
6	7	108	code	f	1	2014-05-06 00:55:31	2014-05-06 00:55:31	UserExercise	26
7	7	108	code	f	1	2014-05-21 12:14:19	2014-05-21 12:14:19	UserExercise	26
8	7	120	code	f	1	2014-02-14 14:06:44	2014-02-14 14:06:44	UserExercise	19
9	7	134	code	f	1	2014-04-22 22:53:33	2014-04-22 22:53:33	UserExercise	24
10	7	134	code	f	1	2014-05-03 19:36:31	2014-05-03 19:36:31	UserExercise	24
11	7	135	code	f	1	2014-03-20 09:02:25	2014-03-20 09:02:25	UserExercise	24
12	21	140	code	f	1	2014-03-16 19:23:22	2014-03-16 19:23:22	UserExercise	24
13	21	140	code	f	1	2014-03-21 23:38:29	2014-03-21 23:38:29	UserExercise	24
14	21	146	code	f	1	2014-05-22 05:00:19	2014-05-22 05:00:19	UserExercise	24
15	7	169	code	f	1	2014-02-26 19:16:59	2014-02-26 19:16:59	UserExercise	23
16	24	169	code	f	1	2014-04-27 18:38:37	2014-04-27 18:38:37	UserExercise	23
17	7	169	code	f	1	2014-05-14 14:07:16	2014-05-14 14:07:16	UserExercise	23
18	21	170	code	f	1	2014-03-30 07:37:40	2014-03-30 07:37:40	UserExercise	23
19	7	175	code	f	1	2014-02-03 01:12:47	2014-02-03 01:12:47	UserExercise	23
20	7	175	code	f	1	2014-03-13 16:05:03	2014-03-13 16:05:03	UserExercise	23
21	7	175	code	f	1	2014-04-07 14:41:18	2014-04-07 14:41:18	UserExercise	23
22	7	187	code	f	1	2014-03-14 17:41:09	2014-03-14 17:41:09	UserExercise	25
23	18	196	code	f	1	2014-03-17 04:44:53	2014-03-17 04:44:53	UserExercise	25
24	25	201	code	f	1	2014-05-21 18:30:39	2014-05-21 18:30:39	UserExercise	20
25	23	201	code	f	1	2014-05-21 18:30:39	2014-05-21 18:30:39	UserExercise	20
26	18	201	code	f	1	2014-05-21 18:30:39	2014-05-21 18:30:39	UserExercise	20
27	7	201	code	f	1	2014-05-21 18:30:39	2014-05-21 18:30:39	UserExercise	20
28	25	217	code	f	1	2014-03-31 17:51:53	2014-03-31 17:51:53	UserExercise	5
29	18	217	code	f	1	2014-05-05 04:04:34	2014-05-05 04:04:34	UserExercise	5
30	19	217	code	f	1	2014-05-05 04:04:34	2014-05-05 04:04:34	UserExercise	5
31	21	224	code	f	1	2014-03-03 01:11:46	2014-03-03 01:11:46	UserExercise	5
32	25	230	code	f	1	2014-05-02 21:06:41	2014-05-02 21:06:41	UserExercise	5
33	23	230	code	f	1	2014-05-02 21:06:41	2014-05-02 21:06:41	UserExercise	5
34	7	246	code	f	1	2014-03-24 01:36:17	2014-03-24 01:36:17	UserExercise	6
35	24	251	code	f	1	2014-05-23 20:58:56	2014-05-23 20:58:56	UserExercise	8
36	4	252	code	f	1	2014-05-17 22:23:10	2014-05-17 22:23:10	UserExercise	8
37	7	252	code	f	1	2014-05-17 22:23:10	2014-05-17 22:23:10	UserExercise	8
38	19	253	code	f	1	2014-05-21 16:08:05	2014-05-21 16:08:05	UserExercise	8
39	23	254	code	f	1	2014-05-17 20:23:06	2014-05-17 20:23:06	UserExercise	8
40	21	255	code	f	1	2014-05-15 20:25:18	2014-05-15 20:25:18	UserExercise	8
41	6	255	code	f	1	2014-05-18 12:12:19	2014-05-18 12:12:19	UserExercise	8
42	21	255	code	f	1	2014-05-18 12:12:19	2014-05-18 12:12:19	UserExercise	8
43	7	255	code	f	1	2014-05-18 12:12:19	2014-05-18 12:12:19	UserExercise	8
44	6	255	code	t	1	2014-05-27 02:14:38	2014-05-27 02:14:38	UserExercise	8
45	18	255	code	f	1	2014-05-27 02:14:38	2014-05-27 02:14:38	UserExercise	8
46	26	255	code	t	1	2014-05-27 02:14:38	2014-05-27 02:14:38	UserExercise	8
47	21	255	code	t	1	2014-05-27 02:14:38	2014-05-27 02:14:38	UserExercise	8
48	7	255	code	t	1	2014-05-27 02:14:38	2014-05-27 02:14:38	UserExercise	8
49	6	258	code	f	1	2014-05-19 08:30:13	2014-05-19 08:30:13	UserExercise	8
50	18	262	code	f	1	2014-05-15 03:25:24	2014-05-15 03:25:24	UserExercise	8
51	19	263	code	f	1	2014-05-20 16:16:13	2014-05-20 16:16:13	UserExercise	8
52	26	263	code	f	1	2014-05-22 11:11:58	2014-05-22 11:11:58	UserExercise	8
53	7	265	code	f	1	2014-05-19 11:06:45	2014-05-19 11:06:45	UserExercise	8
54	18	265	code	f	1	2014-05-24 15:06:05	2014-05-24 15:06:05	UserExercise	8
55	4	265	code	f	1	2014-05-24 15:06:05	2014-05-24 15:06:05	UserExercise	8
56	7	265	code	f	1	2014-05-24 15:06:05	2014-05-24 15:06:05	UserExercise	8
57	20	268	code	f	1	2014-05-15 01:24:29	2014-05-15 01:24:29	UserExercise	9
58	7	272	code	f	1	2014-03-04 03:20:54	2014-03-04 03:20:54	UserExercise	9
59	6	279	code	f	1	2014-02-27 16:19:18	2014-02-27 16:19:18	UserExercise	9
60	21	279	code	f	1	2014-04-28 16:53:26	2014-04-28 16:53:26	UserExercise	9
61	7	279	code	f	1	2014-04-28 16:53:26	2014-04-28 16:53:26	UserExercise	9
62	18	279	code	f	1	2014-05-10 16:11:55	2014-05-10 16:11:55	UserExercise	9
63	21	279	code	f	1	2014-05-10 16:11:55	2014-05-10 16:11:55	UserExercise	9
64	25	283	code	f	1	2014-03-14 19:56:35	2014-03-14 19:56:35	UserExercise	9
65	7	283	code	f	1	2014-03-14 19:56:35	2014-03-14 19:56:35	UserExercise	9
66	25	283	code	f	1	2014-04-22 21:53:32	2014-04-22 21:53:32	UserExercise	9
67	7	283	code	f	1	2014-04-22 21:53:32	2014-04-22 21:53:32	UserExercise	9
68	7	290	code	f	1	2014-03-29 08:25:53	2014-03-29 08:25:53	UserExercise	10
69	5	296	code	f	1	2014-05-26 12:06:10	2014-05-26 12:06:10	UserExercise	10
70	7	302	code	f	1	2014-05-03 01:07:13	2014-05-03 01:07:13	UserExercise	11
71	9	303	code	f	1	2014-04-21 15:10:14	2014-04-21 15:10:14	UserExercise	11
72	4	303	code	f	1	2014-04-21 15:10:14	2014-04-21 15:10:14	UserExercise	11
73	7	307	code	f	1	2014-03-31 16:35:14	2014-03-31 16:35:14	UserExercise	11
74	7	309	code	f	1	2014-02-12 17:30:11	2014-02-12 17:30:11	UserExercise	11
75	7	309	code	f	1	2014-02-20 14:20:29	2014-02-20 14:20:29	UserExercise	11
76	23	309	code	f	1	2014-05-09 16:18:46	2014-05-09 16:18:46	UserExercise	11
77	7	309	code	f	1	2014-05-09 16:18:46	2014-05-09 16:18:46	UserExercise	11
78	7	318	code	f	1	2014-02-24 22:53:53	2014-02-24 22:53:53	UserExercise	12
79	7	318	code	f	1	2014-04-21 08:16:33	2014-04-21 08:16:33	UserExercise	12
80	9	335	code	f	1	2014-05-14 10:04:54	2014-05-14 10:04:54	UserExercise	13
81	21	349	code	f	1	2014-02-28 19:50:04	2014-02-28 19:50:04	UserExercise	14
82	7	364	code	f	1	2014-04-20 22:39:05	2014-04-20 22:39:05	UserExercise	14
83	14	366	code	f	1	2014-05-14 08:21:36	2014-05-14 08:21:36	UserExercise	15
84	19	372	code	f	1	2014-05-06 08:56:15	2014-05-06 08:56:15	UserExercise	15
85	7	374	code	f	1	2014-04-26 00:08:38	2014-04-26 00:08:38	UserExercise	15
86	10	376	code	f	1	2014-05-02 23:24:35	2014-05-02 23:24:35	UserExercise	15
87	7	378	code	f	1	2014-05-20 08:20:38	2014-05-20 08:20:38	UserExercise	15
88	10	379	code	f	1	2014-05-03 13:37:55	2014-05-03 13:37:55	UserExercise	15
89	10	379	code	f	1	2014-05-12 07:56:56	2014-05-12 07:56:56	UserExercise	15
90	3	389	code	f	1	2014-05-21 07:39:15	2014-05-21 07:39:15	UserExercise	16
91	25	399	code	f	1	2014-04-08 13:24:39	2014-04-08 13:24:39	UserExercise	16
92	4	405	code	f	1	2014-04-09 02:44:03	2014-04-09 02:44:03	UserExercise	17
93	7	405	code	f	1	2014-04-10 04:01:31	2014-04-10 04:01:31	UserExercise	17
94	14	407	code	f	1	2014-03-05 22:25:07	2014-03-05 22:25:07	UserExercise	17
95	12	410	code	f	1	2014-04-18 08:12:23	2014-04-18 08:12:23	UserExercise	17
96	10	412	code	f	1	2014-04-13 18:41:40	2014-04-13 18:41:40	UserExercise	17
97	7	413	code	f	1	2014-04-10 00:43:25	2014-04-10 00:43:25	UserExercise	17
98	25	413	code	f	1	2014-04-15 08:19:59	2014-04-15 08:19:59	UserExercise	17
99	7	413	code	f	1	2014-04-15 08:19:59	2014-04-15 08:19:59	UserExercise	17
100	25	413	code	f	1	2014-04-17 16:17:18	2014-04-17 16:17:18	UserExercise	17
101	25	422	code	f	1	2014-05-14 08:27:37	2014-05-14 08:27:37	UserExercise	22
102	19	422	code	f	1	2014-05-14 08:27:37	2014-05-14 08:27:37	UserExercise	22
103	16	423	code	f	1	2014-05-19 22:33:33	2014-05-19 22:33:33	UserExercise	22
104	15	423	code	f	1	2014-05-19 22:33:33	2014-05-19 22:33:33	UserExercise	22
105	10	423	code	f	1	2014-05-19 22:33:33	2014-05-19 22:33:33	UserExercise	22
106	26	423	code	f	1	2014-05-19 22:33:33	2014-05-19 22:33:33	UserExercise	22
107	15	423	code	f	1	2014-05-21 01:38:31	2014-05-21 01:38:31	UserExercise	22
108	9	423	code	f	1	2014-05-21 01:38:31	2014-05-21 01:38:31	UserExercise	22
109	5	423	code	f	1	2014-05-21 01:38:31	2014-05-21 01:38:31	UserExercise	22
110	25	423	code	f	1	2014-05-21 01:38:31	2014-05-21 01:38:31	UserExercise	22
111	23	423	code	f	1	2014-05-21 01:38:31	2014-05-21 01:38:31	UserExercise	22
112	26	423	code	f	1	2014-05-21 01:38:31	2014-05-21 01:38:31	UserExercise	22
113	14	425	code	f	1	2014-05-17 15:37:03	2014-05-17 15:37:03	UserExercise	22
114	21	430	code	f	1	2014-05-16 18:44:53	2014-05-16 18:44:53	UserExercise	22
115	25	431	code	f	1	2014-05-16 06:13:33	2014-05-16 06:13:33	UserExercise	22
116	20	432	code	f	1	2014-05-17 21:33:19	2014-05-17 21:33:19	UserExercise	22
117	13	433	code	f	1	2014-05-19 03:29:08	2014-05-19 03:29:08	UserExercise	22
118	11	433	code	f	1	2014-05-19 03:29:08	2014-05-19 03:29:08	UserExercise	22
119	13	433	code	f	1	2014-05-20 17:11:58	2014-05-20 17:11:58	UserExercise	22
120	12	433	code	f	1	2014-05-20 17:11:58	2014-05-20 17:11:58	UserExercise	22
121	20	433	code	f	1	2014-05-20 17:11:58	2014-05-20 17:11:58	UserExercise	22
122	19	433	code	f	1	2014-05-20 17:11:58	2014-05-20 17:11:58	UserExercise	22
123	4	433	code	f	1	2014-05-20 17:11:58	2014-05-20 17:11:58	UserExercise	22
124	7	433	code	f	1	2014-05-20 17:11:58	2014-05-20 17:11:58	UserExercise	22
125	7	434	code	f	1	2014-05-16 08:18:33	2014-05-16 08:18:33	UserExercise	22
126	16	435	code	f	1	2014-05-23 03:54:46	2014-05-23 03:54:46	UserExercise	22
127	3	435	code	f	1	2014-05-23 03:54:46	2014-05-23 03:54:46	UserExercise	22
128	4	438	code	f	1	2014-03-12 15:45:14	2014-03-12 15:45:14	UserExercise	27
129	16	439	code	f	1	2014-02-26 20:24:12	2014-02-26 20:24:12	UserExercise	27
130	16	439	code	f	1	2014-03-17 05:22:33	2014-03-17 05:22:33	UserExercise	27
131	21	439	code	f	1	2014-03-17 05:22:33	2014-03-17 05:22:33	UserExercise	27
132	21	443	code	f	1	2014-03-04 15:55:27	2014-03-04 15:55:27	UserExercise	27
133	6	447	code	f	1	2014-03-04 09:10:01	2014-03-04 09:10:01	UserExercise	27
134	21	447	code	f	1	2014-04-20 23:21:29	2014-04-20 23:21:29	UserExercise	27
135	7	452	code	f	1	2014-03-28 15:40:05	2014-03-28 15:40:05	UserExercise	27
136	7	452	code	f	1	2014-04-29 10:04:32	2014-04-29 10:04:32	UserExercise	27
137	25	460	code	f	1	2014-04-15 10:44:39	2014-04-15 10:44:39	UserExercise	28
138	7	460	code	f	1	2014-04-15 10:44:39	2014-04-15 10:44:39	UserExercise	28
139	25	460	code	f	1	2014-05-06 07:38:11	2014-05-06 07:38:11	UserExercise	28
140	23	460	code	f	1	2014-05-06 07:38:11	2014-05-06 07:38:11	UserExercise	28
141	16	460	code	f	1	2014-05-17 10:36:15	2014-05-17 10:36:15	UserExercise	28
142	7	460	code	f	1	2014-05-17 10:36:15	2014-05-17 10:36:15	UserExercise	28
143	27	460	code	f	1	2014-05-25 23:37:18	2014-05-25 23:37:18	UserExercise	28
144	16	460	code	t	1	2014-05-25 23:37:18	2014-05-25 23:37:18	UserExercise	28
145	15	460	code	t	1	2014-05-25 23:37:18	2014-05-25 23:37:18	UserExercise	28
146	11	460	code	t	1	2014-05-25 23:37:18	2014-05-25 23:37:18	UserExercise	28
147	10	460	code	f	1	2014-05-25 23:37:18	2014-05-25 23:37:18	UserExercise	28
148	9	460	code	t	1	2014-05-25 23:37:18	2014-05-25 23:37:18	UserExercise	28
149	5	460	code	t	1	2014-05-25 23:37:18	2014-05-25 23:37:18	UserExercise	28
150	25	460	code	f	1	2014-05-25 23:37:18	2014-05-25 23:37:18	UserExercise	28
151	23	460	code	t	1	2014-05-25 23:37:18	2014-05-25 23:37:18	UserExercise	28
152	24	460	code	t	1	2014-05-25 23:37:18	2014-05-25 23:37:18	UserExercise	28
153	26	460	code	f	1	2014-05-25 23:37:18	2014-05-25 23:37:18	UserExercise	28
154	7	460	code	f	1	2014-05-25 23:37:18	2014-05-25 23:37:18	UserExercise	28
155	27	460	code	f	1	2014-05-26 05:31:18	2014-05-26 05:31:18	UserExercise	28
156	16	460	code	f	1	2014-05-26 05:31:18	2014-05-26 05:31:18	UserExercise	28
157	15	460	code	f	1	2014-05-26 05:31:18	2014-05-26 05:31:18	UserExercise	28
158	11	460	code	f	1	2014-05-26 05:31:18	2014-05-26 05:31:18	UserExercise	28
159	10	460	code	f	1	2014-05-26 05:31:18	2014-05-26 05:31:18	UserExercise	28
160	9	460	code	t	1	2014-05-26 05:31:18	2014-05-26 05:31:18	UserExercise	28
161	5	460	code	t	1	2014-05-26 05:31:18	2014-05-26 05:31:18	UserExercise	28
162	25	460	code	t	1	2014-05-26 05:31:18	2014-05-26 05:31:18	UserExercise	28
163	23	460	code	t	1	2014-05-26 05:31:18	2014-05-26 05:31:18	UserExercise	28
164	24	460	code	f	1	2014-05-26 05:31:18	2014-05-26 05:31:18	UserExercise	28
165	26	460	code	t	1	2014-05-26 05:31:18	2014-05-26 05:31:18	UserExercise	28
166	7	460	code	f	1	2014-05-26 05:31:18	2014-05-26 05:31:18	UserExercise	28
167	27	464	code	f	1	2014-05-11 03:21:30	2014-05-11 03:21:30	UserExercise	28
168	21	470	code	f	1	2014-05-12 04:14:08	2014-05-12 04:14:08	UserExercise	28
169	7	477	code	f	1	2014-03-13 09:48:47	2014-03-13 09:48:47	UserExercise	29
170	7	488	code	f	1	2014-05-11 18:39:47	2014-05-11 18:39:47	UserExercise	30
171	29	489	code	f	1	2014-05-13 08:52:35	2014-05-13 08:52:35	UserExercise	30
172	6	490	code	f	1	2014-05-22 05:24:09	2014-05-22 05:24:09	UserExercise	30
173	20	490	code	f	1	2014-05-22 05:24:09	2014-05-22 05:24:09	UserExercise	30
174	24	490	code	f	1	2014-05-22 05:24:09	2014-05-22 05:24:09	UserExercise	30
175	14	490	code	f	1	2014-05-22 15:44:52	2014-05-22 15:44:52	UserExercise	30
176	12	490	code	f	1	2014-05-22 15:44:52	2014-05-22 15:44:52	UserExercise	30
177	10	490	code	f	1	2014-05-22 15:44:52	2014-05-22 15:44:52	UserExercise	30
178	6	490	code	f	1	2014-05-22 15:44:52	2014-05-22 15:44:52	UserExercise	30
179	20	490	code	f	1	2014-05-22 15:44:52	2014-05-22 15:44:52	UserExercise	30
180	24	490	code	f	1	2014-05-22 15:44:52	2014-05-22 15:44:52	UserExercise	30
181	28	491	code	f	1	2014-05-22 23:03:12	2014-05-22 23:03:12	UserExercise	30
182	9	491	code	f	1	2014-05-22 23:03:12	2014-05-22 23:03:12	UserExercise	30
183	5	491	code	f	1	2014-05-22 23:03:12	2014-05-22 23:03:12	UserExercise	30
184	21	491	code	f	1	2014-05-22 23:03:12	2014-05-22 23:03:12	UserExercise	30
185	25	492	code	f	1	2014-05-16 18:32:45	2014-05-16 18:32:45	UserExercise	30
186	12	493	code	f	1	2014-05-14 13:51:24	2014-05-14 13:51:24	UserExercise	30
187	5	494	code	f	1	2014-05-16 05:19:21	2014-05-16 05:19:21	UserExercise	30
188	16	496	code	f	1	2014-05-12 12:05:33	2014-05-12 12:05:33	UserExercise	30
189	29	497	code	f	1	2014-05-16 03:44:42	2014-05-16 03:44:42	UserExercise	30
190	29	503	code	f	1	2014-05-22 11:29:54	2014-05-22 11:29:54	UserExercise	30
191	7	503	code	f	1	2014-05-22 11:29:54	2014-05-22 11:29:54	UserExercise	30
192	29	503	code	f	1	2014-05-23 14:35:20	2014-05-23 14:35:20	UserExercise	30
193	7	503	code	f	1	2014-05-23 14:35:20	2014-05-23 14:35:20	UserExercise	30
194	29	504	code	f	1	2014-05-20 23:26:58	2014-05-20 23:26:58	UserExercise	30
195	27	504	code	f	1	2014-05-20 23:26:58	2014-05-20 23:26:58	UserExercise	30
196	16	504	code	f	1	2014-05-20 23:26:58	2014-05-20 23:26:58	UserExercise	30
197	13	504	code	f	1	2014-05-20 23:26:58	2014-05-20 23:26:58	UserExercise	30
198	12	504	code	f	1	2014-05-20 23:26:58	2014-05-20 23:26:58	UserExercise	30
199	21	504	code	f	1	2014-05-20 23:26:58	2014-05-20 23:26:58	UserExercise	30
200	7	504	code	f	1	2014-05-20 23:26:58	2014-05-20 23:26:58	UserExercise	30
201	13	515	code	f	1	2014-04-15 07:02:13	2014-04-15 07:02:13	UserExercise	37
202	10	515	code	f	1	2014-04-15 07:02:13	2014-04-15 07:02:13	UserExercise	37
203	4	515	code	f	1	2014-04-15 07:02:13	2014-04-15 07:02:13	UserExercise	37
204	7	519	code	f	1	2014-03-15 20:43:41	2014-03-15 20:43:41	UserExercise	37
205	29	523	code	f	1	2014-04-23 10:47:12	2014-04-23 10:47:12	UserExercise	41
206	25	524	code	f	1	2014-03-18 03:35:28	2014-03-18 03:35:28	UserExercise	41
207	18	524	code	f	1	2014-04-10 21:46:54	2014-04-10 21:46:54	UserExercise	41
208	25	524	code	f	1	2014-04-13 09:20:35	2014-04-13 09:20:35	UserExercise	41
209	9	524	code	f	1	2014-05-13 03:37:24	2014-05-13 03:37:24	UserExercise	41
210	6	524	code	f	1	2014-05-13 03:37:24	2014-05-13 03:37:24	UserExercise	41
211	25	524	code	f	1	2014-05-13 03:37:24	2014-05-13 03:37:24	UserExercise	41
212	30	524	code	f	1	2014-05-24 16:35:13	2014-05-24 16:35:13	UserExercise	41
213	29	524	code	f	1	2014-05-24 16:35:13	2014-05-24 16:35:13	UserExercise	41
214	28	524	code	f	1	2014-05-24 16:35:13	2014-05-24 16:35:13	UserExercise	41
215	27	524	code	f	1	2014-05-24 16:35:13	2014-05-24 16:35:13	UserExercise	41
216	17	524	code	f	1	2014-05-24 16:35:13	2014-05-24 16:35:13	UserExercise	41
217	15	524	code	f	1	2014-05-24 16:35:13	2014-05-24 16:35:13	UserExercise	41
218	10	524	code	f	1	2014-05-24 16:35:13	2014-05-24 16:35:13	UserExercise	41
219	6	524	code	f	1	2014-05-24 16:35:13	2014-05-24 16:35:13	UserExercise	41
220	25	524	code	f	1	2014-05-24 16:35:13	2014-05-24 16:35:13	UserExercise	41
221	19	524	code	f	1	2014-05-24 16:35:13	2014-05-24 16:35:13	UserExercise	41
222	30	524	code	f	1	2014-05-24 22:05:11	2014-05-24 22:05:11	UserExercise	41
223	29	524	code	f	1	2014-05-24 22:05:11	2014-05-24 22:05:11	UserExercise	41
224	28	524	code	f	1	2014-05-24 22:05:11	2014-05-24 22:05:11	UserExercise	41
225	27	524	code	f	1	2014-05-24 22:05:11	2014-05-24 22:05:11	UserExercise	41
226	15	524	code	f	1	2014-05-24 22:05:11	2014-05-24 22:05:11	UserExercise	41
227	11	524	code	f	1	2014-05-24 22:05:11	2014-05-24 22:05:11	UserExercise	41
228	9	524	code	f	1	2014-05-24 22:05:11	2014-05-24 22:05:11	UserExercise	41
229	25	524	code	f	1	2014-05-24 22:05:11	2014-05-24 22:05:11	UserExercise	41
230	18	524	code	f	1	2014-05-24 22:05:11	2014-05-24 22:05:11	UserExercise	41
231	7	524	code	f	1	2014-05-24 22:05:11	2014-05-24 22:05:11	UserExercise	41
232	37	529	code	f	1	2014-05-12 13:23:13	2014-05-12 13:23:13	UserExercise	41
233	9	531	code	f	1	2014-04-14 01:03:29	2014-04-14 01:03:29	UserExercise	41
234	24	532	code	f	1	2014-04-18 13:07:01	2014-04-18 13:07:01	UserExercise	41
235	37	532	code	f	1	2014-04-29 04:46:54	2014-04-29 04:46:54	UserExercise	41
236	12	532	code	f	1	2014-04-29 04:46:54	2014-04-29 04:46:54	UserExercise	41
237	24	532	code	f	1	2014-04-29 04:46:54	2014-04-29 04:46:54	UserExercise	41
238	29	535	code	f	1	2014-01-25 06:58:15	2014-01-25 06:58:15	UserExercise	42
239	27	543	code	f	1	2014-04-14 10:56:03	2014-04-14 10:56:03	UserExercise	42
240	21	543	code	f	1	2014-04-14 10:56:03	2014-04-14 10:56:03	UserExercise	42
241	7	544	code	f	1	2014-03-02 01:36:27	2014-03-02 01:36:27	UserExercise	42
242	7	546	code	f	1	2014-02-14 02:04:28	2014-02-14 02:04:28	UserExercise	42
243	9	548	code	f	1	2014-04-06 10:34:24	2014-04-06 10:34:24	UserExercise	42
244	7	550	code	f	1	2014-04-04 04:43:53	2014-04-04 04:43:53	UserExercise	42
245	25	580	code	f	1	2014-05-04 20:21:44	2014-05-04 20:21:44	UserExercise	44
246	42	603	code	f	1	2014-04-26 12:49:35	2014-04-26 12:49:35	UserExercise	46
247	16	607	code	f	1	2014-01-02 10:05:45	2014-01-02 10:05:45	UserExercise	46
248	16	607	code	f	1	2014-03-22 05:03:18	2014-03-22 05:03:18	UserExercise	46
249	13	607	code	f	1	2014-04-26 12:36:11	2014-04-26 12:36:11	UserExercise	46
250	18	607	code	f	1	2014-04-26 12:36:11	2014-04-26 12:36:11	UserExercise	46
251	16	607	code	f	1	2014-05-04 04:20:42	2014-05-04 04:20:42	UserExercise	46
252	6	607	code	f	1	2014-05-04 04:20:42	2014-05-04 04:20:42	UserExercise	46
253	14	610	code	f	1	2014-04-19 12:15:59	2014-04-19 12:15:59	UserExercise	46
254	5	615	code	f	1	2014-05-14 08:50:37	2014-05-14 08:50:37	UserExercise	46
255	7	616	code	f	1	2014-04-05 04:09:57	2014-04-05 04:09:57	UserExercise	46
256	7	617	code	f	1	2014-04-22 11:08:23	2014-04-22 11:08:23	UserExercise	46
257	44	618	code	f	1	2014-05-08 19:40:38	2014-05-08 19:40:38	UserExercise	47
258	29	618	code	f	1	2014-05-08 19:40:38	2014-05-08 19:40:38	UserExercise	47
259	10	618	code	f	1	2014-05-08 19:40:38	2014-05-08 19:40:38	UserExercise	47
260	23	618	code	f	1	2014-05-08 19:40:38	2014-05-08 19:40:38	UserExercise	47
261	14	621	code	f	1	2014-04-26 01:04:59	2014-04-26 01:04:59	UserExercise	47
262	20	621	code	f	1	2014-04-26 01:04:59	2014-04-26 01:04:59	UserExercise	47
263	25	621	code	f	1	2014-04-26 01:04:59	2014-04-26 01:04:59	UserExercise	47
264	5	624	code	f	1	2014-04-18 03:30:52	2014-04-18 03:30:52	UserExercise	47
265	17	625	code	f	1	2014-04-28 19:02:19	2014-04-28 19:02:19	UserExercise	47
266	43	628	code	f	1	2014-04-17 09:18:18	2014-04-17 09:18:18	UserExercise	47
267	14	628	code	f	1	2014-04-17 09:18:18	2014-04-17 09:18:18	UserExercise	47
268	10	628	code	f	1	2014-04-17 09:18:18	2014-04-17 09:18:18	UserExercise	47
269	43	628	code	f	1	2014-04-21 15:39:59	2014-04-21 15:39:59	UserExercise	47
270	6	628	code	f	1	2014-04-21 15:39:59	2014-04-21 15:39:59	UserExercise	47
271	37	628	code	f	1	2014-04-23 02:56:13	2014-04-23 02:56:13	UserExercise	47
272	12	628	code	f	1	2014-04-23 02:56:13	2014-04-23 02:56:13	UserExercise	47
273	6	628	code	f	1	2014-04-23 02:56:13	2014-04-23 02:56:13	UserExercise	47
274	24	628	code	f	1	2014-04-23 02:56:13	2014-04-23 02:56:13	UserExercise	47
275	17	633	code	f	1	2014-04-27 17:50:41	2014-04-27 17:50:41	UserExercise	47
276	45	635	code	f	1	2014-04-14 13:19:07	2014-04-14 13:19:07	UserExercise	47
277	18	635	code	f	1	2014-04-14 13:19:07	2014-04-14 13:19:07	UserExercise	47
278	42	635	code	f	1	2014-04-21 12:15:11	2014-04-21 12:15:11	UserExercise	47
279	18	635	code	f	1	2014-04-21 12:15:11	2014-04-21 12:15:11	UserExercise	47
280	7	635	code	f	1	2014-04-21 12:15:11	2014-04-21 12:15:11	UserExercise	47
281	42	635	code	f	1	2014-04-26 12:45:37	2014-04-26 12:45:37	UserExercise	47
282	7	635	code	f	1	2014-04-26 12:45:37	2014-04-26 12:45:37	UserExercise	47
283	4	637	code	f	1	2014-05-06 18:40:30	2014-05-06 18:40:30	UserExercise	47
284	18	643	code	f	1	2014-03-31 10:55:43	2014-03-31 10:55:43	UserExercise	48
285	7	643	code	f	1	2014-03-31 10:55:43	2014-03-31 10:55:43	UserExercise	48
286	5	651	code	f	1	2014-02-16 22:28:17	2014-02-16 22:28:17	UserExercise	48
287	47	651	code	f	1	2014-05-13 20:04:51	2014-05-13 20:04:51	UserExercise	48
288	5	651	code	f	1	2014-05-13 20:04:51	2014-05-13 20:04:51	UserExercise	48
289	14	658	code	f	1	2014-04-06 03:38:07	2014-04-06 03:38:07	UserExercise	31
290	14	659	code	f	1	2014-03-22 05:24:28	2014-03-22 05:24:28	UserExercise	31
291	12	659	code	f	1	2014-03-22 05:24:28	2014-03-22 05:24:28	UserExercise	31
292	12	659	code	f	1	2014-04-30 07:17:48	2014-04-30 07:17:48	UserExercise	31
293	20	659	code	f	1	2014-04-30 07:17:48	2014-04-30 07:17:48	UserExercise	31
294	43	659	code	f	1	2014-05-08 12:13:48	2014-05-08 12:13:48	UserExercise	31
295	16	659	code	f	1	2014-05-09 05:13:35	2014-05-09 05:13:35	UserExercise	31
296	14	659	code	f	1	2014-05-09 05:13:35	2014-05-09 05:13:35	UserExercise	31
297	7	660	code	f	1	2014-04-22 01:07:08	2014-04-22 01:07:08	UserExercise	31
298	7	660	code	f	1	2014-05-12 09:26:40	2014-05-12 09:26:40	UserExercise	31
299	42	661	code	f	1	2014-03-16 00:23:27	2014-03-16 00:23:27	UserExercise	31
300	7	662	code	f	1	2014-03-01 00:32:36	2014-03-01 00:32:36	UserExercise	31
301	7	662	code	f	1	2014-03-05 16:05:49	2014-03-05 16:05:49	UserExercise	31
302	43	662	code	f	1	2014-04-13 08:56:12	2014-04-13 08:56:12	UserExercise	31
303	12	662	code	f	1	2014-04-13 08:56:12	2014-04-13 08:56:12	UserExercise	31
304	43	662	code	f	1	2014-04-18 16:59:31	2014-04-18 16:59:31	UserExercise	31
305	14	662	code	f	1	2014-04-18 16:59:31	2014-04-18 16:59:31	UserExercise	31
306	12	662	code	f	1	2014-04-18 16:59:31	2014-04-18 16:59:31	UserExercise	31
307	24	662	code	f	1	2014-04-18 16:59:31	2014-04-18 16:59:31	UserExercise	31
308	47	662	code	f	1	2014-05-03 23:41:22	2014-05-03 23:41:22	UserExercise	31
309	43	662	code	f	1	2014-05-03 23:41:22	2014-05-03 23:41:22	UserExercise	31
310	41	662	code	f	1	2014-05-03 23:41:22	2014-05-03 23:41:22	UserExercise	31
311	24	662	code	f	1	2014-05-03 23:41:22	2014-05-03 23:41:22	UserExercise	31
312	7	664	code	f	1	2014-03-07 01:46:52	2014-03-07 01:46:52	UserExercise	31
313	46	664	code	f	1	2014-05-09 09:48:45	2014-05-09 09:48:45	UserExercise	31
314	42	664	code	f	1	2014-05-09 09:48:45	2014-05-09 09:48:45	UserExercise	31
315	25	664	code	f	1	2014-05-09 09:48:45	2014-05-09 09:48:45	UserExercise	31
316	18	664	code	f	1	2014-05-09 09:48:45	2014-05-09 09:48:45	UserExercise	31
317	48	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
318	47	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
319	46	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
320	45	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
321	42	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
322	30	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
323	29	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
324	28	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
325	27	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
326	17	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
327	15	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
328	10	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
329	9	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
330	6	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
331	23	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
332	18	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
333	19	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
334	7	664	code	f	1	2014-05-24 23:32:29	2014-05-24 23:32:29	UserExercise	31
335	21	665	code	f	1	2014-02-23 17:07:18	2014-02-23 17:07:18	UserExercise	31
336	7	665	code	f	1	2014-03-06 22:22:28	2014-03-06 22:22:28	UserExercise	31
337	29	665	code	f	1	2014-04-05 23:16:32	2014-04-05 23:16:32	UserExercise	31
338	6	665	code	f	1	2014-04-05 23:16:32	2014-04-05 23:16:32	UserExercise	31
339	29	665	code	f	1	2014-04-29 03:16:24	2014-04-29 03:16:24	UserExercise	31
340	16	667	code	f	1	2014-03-16 21:17:23	2014-03-16 21:17:23	UserExercise	31
341	21	672	code	f	1	2014-03-19 09:22:16	2014-03-19 09:22:16	UserExercise	39
342	14	673	code	f	1	2014-04-16 06:54:46	2014-04-16 06:54:46	UserExercise	39
343	41	674	code	f	1	2014-04-26 22:42:41	2014-04-26 22:42:41	UserExercise	39
344	7	677	code	f	1	2014-03-26 17:11:37	2014-03-26 17:11:37	UserExercise	39
345	7	681	code	f	1	2014-04-03 13:55:12	2014-04-03 13:55:12	UserExercise	39
346	47	681	code	f	1	2014-04-26 09:28:45	2014-04-26 09:28:45	UserExercise	39
347	43	681	code	f	1	2014-04-26 09:28:45	2014-04-26 09:28:45	UserExercise	39
348	47	681	code	f	1	2014-05-01 12:01:31	2014-05-01 12:01:31	UserExercise	39
349	43	681	code	f	1	2014-05-01 12:01:31	2014-05-01 12:01:31	UserExercise	39
350	47	681	code	f	1	2014-05-19 09:06:08	2014-05-19 09:06:08	UserExercise	39
351	46	681	code	f	1	2014-05-19 09:06:08	2014-05-19 09:06:08	UserExercise	39
352	41	681	code	f	1	2014-05-19 09:06:08	2014-05-19 09:06:08	UserExercise	39
353	12	681	code	f	1	2014-05-19 09:06:08	2014-05-19 09:06:08	UserExercise	39
354	10	681	code	f	1	2014-05-19 09:06:08	2014-05-19 09:06:08	UserExercise	39
355	6	681	code	f	1	2014-05-19 09:06:08	2014-05-19 09:06:08	UserExercise	39
356	42	684	code	f	1	2014-04-09 14:36:00	2014-04-09 14:36:00	UserExercise	39
357	21	699	code	f	1	2014-03-17 14:13:25	2014-03-17 14:13:25	UserExercise	34
358	48	715	code	f	1	2014-04-26 21:49:38	2014-04-26 21:49:38	UserExercise	32
359	23	715	code	f	1	2014-05-10 12:45:18	2014-05-10 12:45:18	UserExercise	32
360	12	716	code	f	1	2014-04-08 03:58:39	2014-04-08 03:58:39	UserExercise	32
361	43	717	code	f	1	2014-03-05 17:54:22	2014-03-05 17:54:22	UserExercise	32
362	7	717	code	f	1	2014-03-24 12:45:32	2014-03-24 12:45:32	UserExercise	32
363	24	717	code	f	1	2014-04-19 19:44:36	2014-04-19 19:44:36	UserExercise	32
364	7	717	code	f	1	2014-04-19 19:44:36	2014-04-19 19:44:36	UserExercise	32
365	24	717	code	f	1	2014-04-21 00:53:40	2014-04-21 00:53:40	UserExercise	32
366	7	717	code	f	1	2014-04-21 00:53:40	2014-04-21 00:53:40	UserExercise	32
367	37	717	code	f	1	2014-05-03 07:21:03	2014-05-03 07:21:03	UserExercise	32
368	14	717	code	f	1	2014-05-03 07:21:03	2014-05-03 07:21:03	UserExercise	32
369	12	717	code	f	1	2014-05-03 07:21:03	2014-05-03 07:21:03	UserExercise	32
370	10	717	code	f	1	2014-05-03 07:21:03	2014-05-03 07:21:03	UserExercise	32
371	6	717	code	f	1	2014-05-03 07:21:03	2014-05-03 07:21:03	UserExercise	32
372	36	717	code	f	1	2014-05-06 15:59:31	2014-05-06 15:59:31	UserExercise	32
373	43	717	code	f	1	2014-05-06 15:59:31	2014-05-06 15:59:31	UserExercise	32
374	7	717	code	f	1	2014-05-06 15:59:31	2014-05-06 15:59:31	UserExercise	32
375	47	717	code	f	1	2014-05-08 18:33:43	2014-05-08 18:33:43	UserExercise	32
376	24	717	code	f	1	2014-05-08 18:33:43	2014-05-08 18:33:43	UserExercise	32
377	7	717	code	f	1	2014-05-08 18:33:43	2014-05-08 18:33:43	UserExercise	32
378	14	718	code	f	1	2014-03-23 19:32:38	2014-03-23 19:32:38	UserExercise	32
379	29	719	code	f	1	2014-03-26 23:51:41	2014-03-26 23:51:41	UserExercise	32
380	16	719	code	f	1	2014-03-26 23:51:41	2014-03-26 23:51:41	UserExercise	32
381	18	719	code	f	1	2014-03-26 23:51:41	2014-03-26 23:51:41	UserExercise	32
382	6	719	code	f	1	2014-05-09 23:58:48	2014-05-09 23:58:48	UserExercise	32
383	7	719	code	f	1	2014-05-09 23:58:48	2014-05-09 23:58:48	UserExercise	32
384	16	719	code	f	1	2014-05-15 03:33:12	2014-05-15 03:33:12	UserExercise	32
385	45	720	code	f	1	2014-04-26 02:30:13	2014-04-26 02:30:13	UserExercise	32
386	14	727	code	f	1	2014-01-05 20:54:18	2014-01-05 20:54:18	UserExercise	35
387	12	727	code	f	1	2014-01-05 20:54:18	2014-01-05 20:54:18	UserExercise	35
388	14	727	code	f	1	2014-03-10 14:20:14	2014-03-10 14:20:14	UserExercise	35
389	35	735	code	f	1	2014-04-10 14:23:24	2014-04-10 14:23:24	UserExercise	33
390	6	735	code	f	1	2014-04-10 14:23:24	2014-04-10 14:23:24	UserExercise	33
391	7	735	code	f	1	2014-04-10 14:23:24	2014-04-10 14:23:24	UserExercise	33
392	35	735	code	f	1	2014-05-03 17:50:31	2014-05-03 17:50:31	UserExercise	33
393	20	736	code	f	1	2014-05-08 07:54:43	2014-05-08 07:54:43	UserExercise	33
394	29	736	code	f	1	2014-05-12 19:19:45	2014-05-12 19:19:45	UserExercise	33
395	36	737	code	f	1	2014-04-11 10:16:01	2014-04-11 10:16:01	UserExercise	33
396	36	737	code	f	1	2014-05-10 02:43:25	2014-05-10 02:43:25	UserExercise	33
397	31	738	code	f	1	2014-04-18 03:05:46	2014-04-18 03:05:46	UserExercise	33
398	43	741	code	f	1	2014-04-13 10:15:23	2014-04-13 10:15:23	UserExercise	33
399	10	741	code	f	1	2014-05-08 04:02:11	2014-05-08 04:02:11	UserExercise	33
400	36	741	code	f	1	2014-05-09 02:25:17	2014-05-09 02:25:17	UserExercise	33
401	41	741	code	f	1	2014-05-09 02:25:17	2014-05-09 02:25:17	UserExercise	33
402	37	741	code	f	1	2014-05-09 02:25:17	2014-05-09 02:25:17	UserExercise	33
403	24	741	code	f	1	2014-05-09 02:25:17	2014-05-09 02:25:17	UserExercise	33
404	35	741	code	t	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
405	32	741	code	t	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
406	36	741	code	t	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
407	39	741	code	f	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
408	31	741	code	f	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
409	47	741	code	f	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
410	46	741	code	t	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
411	44	741	code	t	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
412	43	741	code	t	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
413	41	741	code	f	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
414	37	741	code	f	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
415	14	741	code	t	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
416	12	741	code	t	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
417	10	741	code	t	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
418	6	741	code	t	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
419	20	741	code	t	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
420	24	741	code	t	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
421	7	741	code	f	1	2014-05-26 21:55:00	2014-05-26 21:55:00	UserExercise	33
422	41	742	code	f	1	2014-05-20 02:11:44	2014-05-20 02:11:44	UserExercise	33
423	34	744	code	f	1	2014-05-22 16:38:51	2014-05-22 16:38:51	UserExercise	33
424	31	744	code	f	1	2014-05-22 16:38:51	2014-05-22 16:38:51	UserExercise	33
425	34	744	code	f	1	2014-05-24 21:45:23	2014-05-24 21:45:23	UserExercise	33
426	31	744	code	f	1	2014-05-24 21:45:23	2014-05-24 21:45:23	UserExercise	33
427	41	745	code	f	1	2014-05-06 07:54:09	2014-05-06 07:54:09	UserExercise	33
428	30	746	code	f	1	2014-05-24 00:54:09	2014-05-24 00:54:09	UserExercise	33
429	35	754	code	f	1	2014-01-25 15:22:35	2014-01-25 15:22:35	UserExercise	40
430	16	754	code	f	1	2014-01-25 15:22:35	2014-01-25 15:22:35	UserExercise	40
431	16	754	code	f	1	2014-05-05 04:14:52	2014-05-05 04:14:52	UserExercise	40
432	6	754	code	f	1	2014-05-05 04:14:52	2014-05-05 04:14:52	UserExercise	40
433	21	754	code	f	1	2014-05-05 04:14:52	2014-05-05 04:14:52	UserExercise	40
\.


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('notifications_id_seq', 433, true);


--
-- Data for Name: posts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY posts (id, slug, title, blurb, body, testimonial_keyword, event_on, archive_on, is_indestructible, is_featured, is_service, priority, created_at, updated_at) FROM stdin;
\.


--
-- Name: posts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('posts_id_seq', 1, false);


--
-- Data for Name: products; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY products (id, title, price, created_at, updated_at, sort_order) FROM stdin;
\.


--
-- Name: products_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('products_id_seq', 1, false);


--
-- Data for Name: quotes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY quotes (id, body, cite, created_at, updated_at) FROM stdin;
\.


--
-- Name: quotes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('quotes_id_seq', 1, false);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY schema_migrations (version) FROM stdin;
0
1
2
4
5
6
7
8
9
10
11
12
13
14
15
20131222101500
20131222101800
20131222143000
20131222162300
20131226195100
20131228160800
20131228160801
20140104004000
20140106195300
201401140708
201401140711
201401251118
201401251416
201401251656
201401251934
201401252153
201401252202
201401261034
201402021253
201402142155
201402151326
201402221052
201402221552
201404202208
\.


--
-- Data for Name: submission_viewers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submission_viewers (id, submission_id, viewer_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: submission_viewers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submission_viewers_id_seq', 1, false);


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submissions (id, user_id, key, state, language, slug, code, done_at, is_liked, nit_count, version, created_at, updated_at, user_exercise_id, filename) FROM stdin;
2	7	b17eed1493636b23fc964010	done	clojure	rna-transcription	(ns dna)\n\n(defn to-rna [s]\n  (clojure.string/replace s \\T \\U))	\N	f	0	1	2014-04-15 09:05:55	2014-04-15 09:05:55	2	rna-transcription.clj
3	7	5a24bddb23b7d0f130eb9b3e	pending	go	binary	package binary\n\nfunc ToDecimal(input string) int {\n\tvalue := 0\n\tfor _, digit := range input {\n\t\tvalue = value << 1\n\t\tif digit == '1' {\n\t\t\tvalue++\n\t\t} else if digit != '0' {\n\t\t\treturn 0\n\t\t}\n\t}\n\treturn value\n}	\N	f	2	1	2013-12-11 17:09:44	2013-12-11 17:09:44	3	binary.go
4	7	5f32a8b58ab2c21e545a229b	done	ruby	secret-handshake	class SecretHandshake\n  def initialize(number)\n    @number = number.to_i\n  end\n\n  def commands\n    list = []\n    list << "wink"            if match?(0b1)\n    list << "double blink"    if match?(0b10)\n    list << "close your eyes" if match?(0b100)\n    list << "jump"            if match?(0b1000)\n    list.reverse!             if match?(0b10000)\n    list\n  end\n\n  private\n\n  def match?(binary)\n    (@number & binary).nonzero?\n  end\nend	\N	f	2	2	2013-11-23 01:34:28	2013-11-23 01:34:28	4	secret_handshake.rb
5	7	9994b4ba3a12015ce86a2fdd	superseded	ruby	secret-handshake	class SecretHandshake\n  def initialize(number)\n    @number = number.to_i\n  end\n\n  def commands\n    out = []\n    out << "wink"            if match?(0b1)\n    out << "double blink"    if match?(0b10)\n    out << "close your eyes" if match?(0b100)\n    out << "jump"            if match?(0b1000)\n    out.reverse!             if match?(0b10000)\n    out\n  end\n\n  private\n\n  def match?(binary)\n    !(@number & binary).zero?\n  end\nend	\N	f	2	1	2014-03-22 23:54:00	2014-03-22 23:54:00	4	secret-handshake.rb
6	7	84b6662d5d55898ee6abf5d6	done	ruby	bob	class Bob\n\n  def hey(text)\n    if saying_nothing?(text)\n      "Fine. Be that way."\n    elsif yelling?(text)\n      "Woah, chill out!"\n    elsif question?(text) \n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  def question?(text)\n    text.strip.end_with?("?")\n  end\n\n  def yelling?(text)\n    text == text.upcase\n  end\n\n  def saying_nothing?(text)\n    text.nil? || text.strip.empty?\n  end\n\nend	\N	f	2	4	2013-09-30 16:44:43	2013-09-30 16:44:43	5	bob.rb
7	7	0ebbc6812d4c2cd682d4641e	superseded	ruby	bob	class Bob\n  def hey(text)\n    if not text or text.empty?\n      "Fine. Be that way."\n    elsif text.eql?(text.upcase)\n      "Woah, chill out!"\n    elsif text.strip.end_with?("?") \n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	2	2	2013-11-06 12:29:46	2013-11-06 12:29:46	5	bob.rb
8	7	051d7b44c36eea1b28bfe3e3	superseded	ruby	bob	class Bob\n\n  def hey(text)\n    if saying_nothing?(text)\n      "Fine. Be that way."\n    elsif yelling?(text)\n      "Woah, chill out!"\n    elsif question?(text) \n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  def question?(text)\n    text.strip.end_with?("?")\n  end\n\n  def yelling?(text)\n    text.eql?(text.upcase)\n  end\n\n  def saying_nothing?(text)\n    not text or text.strip.empty?\n  end\n\nend	\N	f	1	3	2013-12-19 19:34:26	2013-12-19 19:34:26	5	bob.rb
9	7	3c3ad916c2c84e41851353dd	superseded	ruby	bob	class Bob\n  def hey(text)\n    if not text or text.empty?\n      "Fine. Be that way."\n    elsif text.eql?(text.upcase)\n      "Woah, chill out!"\n    elsif text.end_with?("?") \n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	3	1	2014-01-27 23:40:52	2014-01-27 23:40:52	5	bob.rb
11	7	57d5c844cc44a242cad00d2c	hibernating	ruby	space-age	class SpaceAge\n  def initialize(age_in_seconds)\n    @age_in_seconds = age_in_seconds\n  end\n  def seconds\n    @age_in_seconds\n  end\n  def on_earth\n    age_on_earth = @age_in_seconds.to_f/31557600\n    age_on_earth.round(2)\n  end\n  def on_mercury\n    age_on_mercury = self.on_earth/0.2408467\n    age_on_mercury.round(2)\n  end\n  def on_venus\n    age_on_venus = self.on_earth/0.61519725\n    age_on_venus.round(2)\n  end\n  def on_mars\n    age_on_mars = self.on_earth/1.8808158\n    age_on_mars.round(2)\n  end\n  def on_jupiter\n    age_on_jupiter = self.on_earth/11.862615\n    age_on_jupiter.round(2)\n  end\n  def on_saturn\n    age_on_saturn = self.on_earth/29.447498\n    age_on_saturn.round(2)\n  end\n  def on_uranus\n    age_on_uranus = self.on_earth/84.016846\n    age_on_uranus.round(2)\n  end\n  def on_neptune\n    age_on_neptune = self.on_earth/164.79132\n    age_on_neptune.round(2)\n  end\n\nend	\N	f	3	1	2014-03-25 00:59:03	2014-03-25 00:59:03	7	space_age.rb
12	7	152ef09f248359949da4c6eb	superseded	python	bob	import string\n\nclass Bob:\n    def hey(self, text):\n        if text:\n            text = text.strip()\n\n        if self.is_silence(text):\n            return "Fine, be that way."\n        elif self.is_shouting(text):\n            return "Woah, chill out!"\n        elif self.is_question(text):\n            return "Sure."\n        else:\n            return "Whatever."\n\n    def is_silence(self, text):\n        return not bool(text)\n\n    def is_shouting(self, text):\n        return not any(char in string.lowercase for char in text)\n\n    def is_question(self, text):\n        return text.endswith('?')	\N	f	2	1	2013-09-19 20:49:57	2013-09-19 20:49:57	8	bob.py
20	7	dd30e0ebf99befc05fe72b7c	superseded	haskell	rna-transcription	module DNA\n  ( toRNA\n  ) where\n\ntoRNA :: String -> String\ntoRNA = map (\\x -> if x=='T' then 'U' else x)	\N	f	4	2	2014-04-02 20:42:41	2014-04-02 20:42:41	10	rna-transcription.hs
1527	40	a7a90dd40694b732a199e3d2	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @words = phrase.downcase.scan(/[\\w']+/)\n  end\n\n  def word_count\n    @words.reduce(Hash.new(0)) do |counts, word|\n      counts[word] += 1\n      counts\n    end\n  end\nend	\N	f	3	1	2014-01-25 15:22:35	2014-01-25 15:22:35	754	phrase.rb
14	7	c8a0426e9cec74a398708113	done	python	bob	# encoding: utf-8\n\n\nclass Bob:\n    def hey(self, text):\n        text = self.sanitize(text)\n\n        if self.is_silence(text):\n            return "Fine, be that way."\n        elif self.is_shouting(text):\n            return "Woah, chill out!"\n        elif self.is_question(text):\n            return "Sure."\n        else:\n            return "Whatever."\n\n    def sanitize(self, text):\n        if text:\n            return text.strip()\n\n        return text\n\n    def is_silence(self, text):\n        return not text\n\n    def is_shouting(self, text):\n        return text.isupper()\n\n    def is_question(self, text):\n        return text.endswith('?')	\N	f	2	3	2013-11-25 12:05:31	2013-11-25 12:05:31	8	bob.py
16	7	1fcd9d5a0747408a335bf77c	superseded	elixir	list-ops	defmodule ListOps do\n  # Please don't use any external modules (especially List) in your\n  # implementation. The point of this exercise is to create these basic functions\n  # yourself.\n  #\n  # Note that `++` is a function from an external module (Kernel, which is\n  # automatically important`) and so shouldn't be used either.\n\n  @spec count(list) :: non_neg_integer\n  def count(l) do\n    reduce(l, 0, fn acc, _element -> acc + 1 end)\n  end\n\n  @spec reverse(list) :: list\n  def reverse(l) do\n    reduce(l, [], &([&2 | &1]))\n  end\n\n  @spec map(list, (any -> any)) :: list\n  def map(l, f) do\n    reduce(l, [], &[f.(&2) | &1]) |> reverse\n  end\n\n  @spec filter(list, (any -> as_boolean(term))) :: list\n  def filter(l, f) do\n    reduce(l, [], fn acc, element ->\n      if(f.(element), do: [element | acc], else: acc)\n    end) |> reverse\n  end\n\n  @type acc :: any\n  @spec reduce(list, acc, ((acc, any) -> acc)) :: acc\n  def reduce(l, acc, f) do\n    case l do\n      []      -> acc\n      [h | t] -> reduce(t, f.(acc, h), f)\n    end\n  end\n\n  @spec append(list, list) :: list\n  def append(a, b) do\n    case { a, b } do\n      { [], _  } -> b\n      {  _, [] } -> a\n      _          -> concat([a, b])\n    end\n  end\n\n  @spec concat([[any]]) :: [any]\n  def concat(ll) do\n    reduce(ll, [], fn acc, element ->\n      reduce(element, acc, &([&2 | &1]))\n    end) |> reverse\n  end\n\n  defp empty?(l) do\n    count(l) == 0\n  end\nend	\N	f	0	2	2014-01-14 08:43:31	2014-01-14 08:43:31	9	list_ops.exs
18	7	6f3a9ace5a043e3b2ebcfd68	done	haskell	rna-transcription	{-# LANGUAGE GADTs, ConstraintKinds, PolyKinds, DataKinds,\n FlexibleInstances #-}\nmodule DNA\n  ( toRNA\n  ) where\n\ndata NType\n      = RNA\n      | DNA\n\ndata Nucleotide :: NType -> * where\n    A :: Nucleotide a\n    C :: Nucleotide a\n    G :: Nucleotide a\n    T :: Nucleotide DNA\n    U :: Nucleotide RNA\n\ninstance Enum (Nucleotide DNA) where\n    fromEnum A = 0\n    fromEnum C = 1\n    fromEnum G = 2\n    fromEnum T = 3\n    toEnum x\n      | x == 0 = A\n      | x == 1 = C\n      | x == 2 = G\n      | x == 3 = T\n      | otherwise = error "invalid nucleotide"\n\ninstance Enum (Nucleotide RNA) where\n    fromEnum A = 3\n    fromEnum C = 2\n    fromEnum G = 1\n    fromEnum U = 0\n    toEnum x\n      | x == 0 = U\n      | x == 1 = G\n      | x == 2 = C\n      | x == 3 = A\n      | otherwise = error "invalid nucleotide"\n\nmkDNA :: Char -> Nucleotide DNA\nmkDNA 'T' = T\nmkDNA x   = mkNucle x\n\nmkNucle :: Char -> Nucleotide a\nmkNucle 'A' = A\nmkNucle 'C' = C\nmkNucle 'G' = G\nmkNucle _   = error "invalid nucleotide"\n\nfromNucle :: Nucleotide a -> Char\nfromNucle A = 'A'\nfromNucle C = 'C'\nfromNucle G = 'G'\nfromNucle T = 'T'\nfromNucle U = 'U'\n\nfromRNA :: Nucleotide RNA -> Char\nfromRNA = fromNucle\n\ntoRNA :: String -> String\ntoRNA = map (fromRNA . toEnum . fromEnum . mkDNA)\n\n{-\n-- Things that irrelevant to this particular task but useful\nmkRNA :: Char -> Nucleotide RNA\nmkRNA 'U' = U\nmkRNA x   = mkNucle x\n\nfromDNA :: Nucleotide DNA -> Char\nfromDNA = fromNucle\n-}	\N	f	2	3	2013-11-18 19:42:08	2013-11-18 19:42:08	10	DNA.hs
19	7	46a49d764335ff939c4f5307	superseded	haskell	rna-transcription	module DNA\n  where\n\ntoRNA :: String -> String\ntoRNA = map (\\x -> if x=='T' then 'U' else x)	\N	f	5	1	2014-03-28 09:00:27	2014-03-28 09:00:27	10	rna-transcription.hs
22	7	1c2c523683fc71ba989fcde2	superseded	haskell	raindrops	module Raindrops (convert) where\r\n\r\nconvert :: Integer -> String\r\nconvert n = if null drops then show n else drops\r\n  where\r\n    drops = concat\r\n            [nDivisibleBy 3 "Pling"\r\n            ,nDivisibleBy 5 "Plang"\r\n            ,nDivisibleBy 7 "Plong"\r\n            ]\r\n    nDivisibleBy k result\r\n        | n `mod` k == 0 = result\r\n        | otherwise      = ""	\N	f	2	7	2013-11-24 18:39:00	2013-11-24 18:39:00	11	Raindrops.hs
24	7	9d2c11ff97ab795939809e36	done	haskell	raindrops	module Raindrops (convert) where\r\n\r\nconvert :: Integer -> String\r\nconvert n = if null drops then show n else drops\r\n  where\r\n    drops = concat [ x | (True, x) <- [(nDivisibleBy 3, "Pling")\r\n                                      ,(nDivisibleBy 5, "Plang")\r\n                                      ,(nDivisibleBy 7, "Plong")]\r\n                                      ]\r\n    nDivisibleBy k = n `mod` k == 0	\N	f	2	9	2014-01-24 02:54:30	2014-01-24 02:54:30	11	Raindrops.hs
25	7	0506bb5df7e534f588457018	superseded	haskell	raindrops	module Raindrops (convert) where\r\n\r\nconvert :: Integer -> String\r\nconvert n =\r\n    if notValidPrimes then show n else\r\n        (if hasPrime 3 then "Pling" else "")\r\n        ++\r\n        (if hasPrime 5 then "Plang" else "")\r\n        ++\r\n        (if hasPrime 7 then "Plong" else "")\r\n  where\r\n    primes         = factors n 2 []\r\n    hasPrime       = (`elem` primes)\r\n    notValidPrimes = not $ any hasPrime [3, 5, 7]\r\n\r\nfactors :: Integer -> Integer -> [Integer] -> [Integer]\r\nfactors 1 _ acc = acc\r\nfactors n k acc = if n `mod` k == 0\r\n                    then factors (n `div` k) k    (k:acc)\r\n                    else factors  n         (k+1)    acc	\N	f	2	1	2014-02-10 17:07:10	2014-02-10 17:07:10	11	Raindrops.hs
26	7	9684ec535c891e07e9e18486	superseded	haskell	raindrops	module Raindrops (convert) where\r\n\r\nconvert :: Integer -> String\r\nconvert n =\r\n    if notValidPrimes then show n else\r\n        (if 3 `elem` primes then "Pling" else "")\r\n        ++\r\n        (if 5 `elem` primes then "Plang" else "")\r\n        ++\r\n        (if 7 `elem` primes then "Plong" else "")\r\n  where\r\n    primes         = factors n 2 []\r\n    notValidPrimes = not $ any (`elem` primes) [3, 5, 7]\r\n\r\nfactors :: Integer -> Integer -> [Integer] -> [Integer]\r\nfactors 1 _ acc = acc\r\nfactors n k acc = if n `mod` k == 0\r\n                    then factors (n `div` k) k    (k:acc)\r\n                    else factors  n         (k+1)    acc	\N	f	2	2	2014-02-28 10:40:19	2014-02-28 10:40:19	11	Raindrops.hs
27	7	6e01926327474bb263d4746b	superseded	haskell	raindrops	module Raindrops (convert) where\r\n\r\nconvert :: Integer -> String\r\nconvert n =\r\n    if notValidFactor then show n else\r\n        (if n `divisibleBy` 3 then "Pling" else "")\r\n        ++\r\n        (if n `divisibleBy` 5 then "Plang" else "")\r\n        ++\r\n        (if n `divisibleBy` 7 then "Plong" else "")\r\n  where\r\n    notValidFactor    = not $ any (divisibleBy n) [3, 5, 7]\r\n    j `divisibleBy` k = j `mod` k == 0	\N	f	2	3	2014-03-17 11:27:59	2014-03-17 11:27:59	11	Raindrops.hs
28	7	23016f3ee30284413c8c1f0b	superseded	haskell	raindrops	module Raindrops (convert) where\r\n\r\nconvert :: Integer -> String\r\nconvert n =\r\n    (\\x -> if null x then show n else x) $\r\n        (\\x -> if divisibleBy 3 then "Pling" ++ x else x) $\r\n            (\\x -> if divisibleBy 5 then "Plang" ++ x else x) $\r\n                (\\x -> if divisibleBy 7 then "Plong" ++ x else x)\r\n                    []\r\n  where\r\n    divisibleBy k = n `mod` k == 0	\N	f	2	4	2014-03-20 12:48:29	2014-03-20 12:48:29	11	Raindrops.hs
29	7	5361f2d2d48e687098ca6f69	superseded	haskell	raindrops	module Raindrops (convert) where\r\nimport Data.List (foldl')\r\n\r\nconvert :: Integer -> String\r\nconvert n = if null drops then show n else drops\r\n  where\r\n    drops = foldl' (\\acc (x, y) -> if x then acc ++ y else acc) []\r\n            [(divisibleBy 3, "Pling")\r\n            ,(divisibleBy 5, "Plang")\r\n            ,(divisibleBy 7, "Plong")]\r\n\r\n    divisibleBy k = n `mod` k == 0	\N	f	1	5	2014-05-08 09:30:55	2014-05-08 09:30:55	11	Raindrops.hs
30	7	bd8120abd456a635fbe9167d	pending	python	beer-song	class Beer(object):\n    # Not a /particularly/ smart solution, but a simple one, and simple is smart\n    def verse(self, number):\n        if number > 2:\n            return "%d bottles of beer on the wall, %d bottles of beer.\\nTake one down and pass it around, %d bottles of beer on the wall.\\n" %(number, number, number-1)\n        elif number == 2:\n            return "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\n        elif number == 1:\n            return "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n        else:\n            return "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n\n    def sing(self, start, stop=0):\n        return "\\n".join([self.verse(v) for v in range(start, stop-1, -1)]) + "\\n"  # Addtl \\n to cover for join()	\N	f	2	1	2013-12-05 11:13:18	2013-12-05 11:13:18	12	beer.py
31	7	2f0913a09396af2986b3f4cb	pending	ruby	grains	class Grains\n\tdef square (value)\n    grains = 1\n    (value - 1).times { grains += grains }\n    return grains\n\tend\n  def total (board_size=64)\n    running_total = 0\n    board_size.times do |square_num|\n      running_total += square(square_num + 1)\n    end\n    return running_total\n  end\nend	\N	f	2	1	2014-01-14 10:44:40	2014-01-14 10:44:40	13	grains.rb
42	7	a4875673804d26a4a5f525c8	superseded	javascript	anagram	var rootLetters,\n    rootWord;\n\nfunction testWord(word) {\n    word = word.toLowerCase();\n    var letters = word.split("");\n    letters.sort();\n    return(rootWord != word \n        && rootLetters.length == letters.length\n        && rootLetters.every(function(u, i) {\n            return u === letters[i];\n    }));\n};\n\nvar anagram = function(word) {\n    rootWord = word.toLowerCase();\n    rootLetters = rootWord.split("");\n    rootLetters.sort();\n};\n\nanagram.prototype.match = function(words) {\n    var returnArray = [];\n    words.forEach(function(word) {\n        if (testWord(word)) returnArray.push(word);\n    });\n    return returnArray;\n};\n\nmodule.exports = anagram;	\N	f	2	1	2013-10-24 04:01:10	2013-10-24 04:01:10	17	anagram.js
1528	40	30e8844b40bf964ac7e1b05a	done	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @words = phrase.downcase.scan(/[\\w']+/)\n  end\n\n  def word_count\n    @words.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\n  end\nend	\N	f	6	2	2014-05-05 04:14:52	2014-05-05 04:14:52	754	phrase.rb
33	7	d99967adef1a745207f7c1be	superseded	perl5	linked-list	package Deque;\n\nuse strict;\nuse warnings;\n\nsub new {\n    my $self = bless {} => shift;\n    $self->{tail}  = undef;\n    $self->{head}  = undef;\n\n    # cause need to check if empty\n    $self->{total} = 0; \n\n    return $self;\n}\n\nsub push {\n    my ($self, $value) = @_;\n\n    my $node = {\n                 value => $value,\n                 next  => $self->{head},\n                 prev  => $self->{tail}\n               };\n\n    # prev tail->next set to new node\n    $self->{tail}->{next} = $node; \n\n    # set tail to new node\n    $self->{tail} = $node if $self->{tail};\n\n    # if empty\n    $self->{tail} = $node unless $self->{total};\n    $self->{head} = $node unless $self->{total};\n\n    $self->{total}++;\n}\n\nsub pop {\n    my $self = shift;\n    \n    my $node = $self->{tail};\n    $self->{tail} = $self->{tail}->{prev};\n\n    $self->{total}--;\n\n    return $node->{value};\n}\n\nsub unshift {\n    my ($self, $value) = @_;\n    my $node = {\n                 value => $value,\n                 next  => $self->{head},\n                 prev  => $self->{tail}\n               };\n\n    $self->{head}->{prev} = $node; \n    $self->{head} = $node if $self->{head};\n    \n    $self->{tail} = $node unless $self->{total};\n    $self->{head} = $node unless $self->{total};\n\n    $self->{total}++;\n}\n\nsub shift {\n    my $self = shift;\n    \n    my $node = $self->{head};\n    $self->{head} = $self->{head}->{next};\n\n    $self->{total}--;\n    return $node->{value};\n}\n\n\n1;	\N	f	2	1	2013-12-15 16:38:31	2013-12-15 16:38:31	14	Deque.pm
34	7	897ad781dd29356bd0ae579d	superseded	ruby	word-count	class Bob\n  def hey(message)\n    Message.classify(message).response\n  end\n\n  class Message\n    def self.classify(message)\n      message = message.to_s\n      types.detect { |type| type.handles? message }.new\n    end\n\n    def self.types\n      @types ||= [self]\n    end\n\n    def self.inherited(child)\n      types.unshift(child)\n    end\n\n    def self.handles?(message)\n      true\n    end\n\n    def response\n      "Whatever."\n    end\n  end\n\n  class Shout < Message\n    def self.handles?(message)\n      message.upcase == message\n    end\n\n    def response\n      "Woah, chill out!"\n    end\n  end\n\n  class Question < Message\n    def self.handles?(message)\n      message.end_with? ??\n    end\n\n    def response\n      "Sure."\n    end\n  end\n\n  class Empty < Message\n    def self.handles?(message)\n      message.strip.empty?\n    end\n\n    def response\n      "Fine. Be that way."\n    end\n  end\nend	\N	f	2	5	2013-09-12 04:52:06	2013-09-12 04:52:06	15	word-count.rb
35	7	4b529248ce2830b8ec989777	superseded	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, counts|\n      counts[word] += 1\n    end\n  end\n\n  private\n\n  attr_reader :input\n\n  def words\n    input.scan(/[a-z0-9]+/i).map(&:downcase)\n  end\nend	\N	f	0	2	2013-09-20 17:18:30	2013-09-20 17:18:30	15	word-count.rb
36	7	73eeab05d1455aaa87dad843	superseded	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    words.each_with_object(empty_counts) do |word, counts|\n      counts[word] += 1\n    end\n  end\n\n  private\n\n  attr_reader :input\n\n  def words\n    input.split(/[,\\s]+/)\n      .map { |word| word.gsub(/[^a-z0-9]/i, "").downcase }\n      .reject(&:empty?)\n  end\n\n  def empty_counts\n    Hash.new { |hash, word| hash[word] = 0 }\n  end\nend	\N	f	2	1	2014-01-12 16:35:15	2014-01-12 16:35:15	15	word-count.rb
37	7	4c5481fde2e4e0aa5dd44010	superseded	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, counts|\n      counts[word] += 1\n    end\n  end\n\n  private\n\n  attr_reader :input\n\n  def words\n    input.downcase.scan(/[a-z0-9]+/)\n  end\nend	\N	f	3	3	2014-01-13 21:47:42	2014-01-13 21:47:42	15	word-count.rb
38	7	3d2cff2a17616bd891aa1983	done	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, counts|\n      counts[word] += 1\n    end\n  end\n\n  def words\n    @input.downcase.scan(/[a-z0-9]+/)\n  end\nend	\N	f	0	6	2014-01-17 22:46:59	2014-01-17 22:46:59	15	word-count.rb
39	7	8e9addb433097f5f2391d90c	superseded	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, counts|\n      counts[word] += 1\n    end\n  end\n\n  def words\n    @input.downcase.scan(/[a-z0-9]+/)\n  end\nend	\N	f	4	4	2014-01-21 07:16:47	2014-01-21 07:16:47	15	word-count.rb
40	7	6b03ccb3e62704ada77511ba	hibernating	clojure	bob	(ns bob\n  (:use [clojure.string :only [upper-case]]))\n\n(defn- ends-with-question-mark? [message]\n  (let [last-char (last message)]\n    (= last-char \\?)))\n\n(defn- empty-message? [message]\n  (= 0 (count message)))\n\n(defn- all-caps? [message]\n  (= (upper-case message) message))\n\n(defn- silence? [message]\n  (empty-message? message))\n\n(defn- shouting? [message]\n  (and (all-caps? message)\n       (not (empty-message? message))))\n\n(defn- question? [message]\n  (and (not (all-caps? message))\n       (ends-with-question-mark? message)))\n\n(defn response-for [message]\n  (cond\n    (silence? message) "Fine, be that way."\n    (question? message) "Sure."\n    (shouting? message) "Woah, chill out!"\n    :else "Whatever."))	\N	f	2	2	2013-10-05 21:16:59	2013-10-05 21:16:59	16	bob.clj
41	7	9c4818d80c4eff377c121dce	superseded	clojure	bob	(ns bob\n  (:use [clojure.string :only [upper-case]]))\n\n(defn ends-with-question-mark? [message]\n  (let [last-char (last message)]\n    (= last-char \\?)))\n\n(defn silence? [message]\n  (= 0 (count message)))\n\n(defn shouting? [message]\n  (= (upper-case message) message))\n\n(defn question? [message]\n  (and (not (shouting? message))\n       (ends-with-question-mark? message)))\n\n(defn response-for [message]\n  (cond\n    (silence? message) "Fine, be that way."\n    (question? message) "Sure."\n    (shouting? message) "Woah, chill out!"\n    :else "Whatever."))	\N	f	1	1	2013-11-28 04:47:38	2013-11-28 04:47:38	16	bob.clj
44	7	324e082ec8af3e737f210383	done	javascript	anagram	function testWord(word) {\n    word = word.toLowerCase();\n    var letters = word.split("").sort();\n    return(rootWord != word\n        && rootLetters.length == letters.length\n        && rootLetters.every(function(u, i) {\n            return u == letters[i];\n    }));\n};\n\nvar anagram = function(word) {\n    rootWord = word.toLowerCase();\n    rootLetters = rootWord.split("").sort();\n};\n\nanagram.prototype.match = function(words) {\n    var returnArray = [];\n    words.forEach(function(word) {\n        if (testWord(word)) returnArray.push(word);\n    });\n    return returnArray;\n};\n\nmodule.exports = anagram;	\N	f	2	3	2013-11-25 06:46:22	2013-11-25 06:46:22	17	anagram.js
45	7	f87a60d00bae33b9fa5e1d57	hibernating	ruby	nucleotide-count	class DNA\n\n\n  def initialize(dna_strand)\n    @dna = valid(dna_strand)\n    @valid_nucleotides = ["A", "C", "T", "G"]\n    @nucleotides = nucleotide_hash\n    count_nucleotides\n  end\n\n  def count(nucleotide)\n    @nucleotides[valid(nucleotide)]\n  end\n\n  def nucleotide_counts\n    @nucleotides\n  end\n\n  private\n\n  def valid(strand)\n    raise ArgumentError if strand.match(/[^ACTG]/)\n    strand\n  end\n\n  def count_nucleotides\n    @dna.each_char { |char| @nucleotides[char] += 1 }\n  end\n\n  def nucleotide_hash\n    @valid_nucleotides.each_with_object({}) { |nucleotide, hash| hash[nucleotide] = 0 }\n  end\nend	\N	f	1	3	2013-11-26 05:04:44	2013-11-26 05:04:44	18	nucleotide-count.rb
47	7	4ea5fc05f2ab68429a35f738	superseded	ruby	nucleotide-count	class DNA\n\n  @valid_nucleotides = ["A", "C", "T", "G"]\n\n  def initialize(dna_strand)\n    @dna = valid(dna_strand)\n    @nucleotides = nucleotide_hash\n    count_nucleotides\n  end\n\n  def count(nucleotide)\n    @nucleotides[valid(nucleotide)]\n  end\n\n  def nucleotide_counts\n    @nucleotides\n  end\n\n  private\n\n  def valid(strand)\n    raise ArgumentError if strand.match(/[^ACTG]/)\n    strand\n  end\n\n  def count_nucleotides\n    @dna.each_char { |char| @nucleotides[char] += 1 }\n  end\n\n  def nucleotide_hash\n    @valid_nucleotides.each_with_object({}) { |nucleotide, hash| hash[nucleotide] = 0 }\n  end\nend	\N	f	4	2	2014-04-11 16:33:43	2014-04-11 16:33:43	18	nucleotide-count.rb
48	7	affeac1b2f329df4fdb62896	done	elixir	anagram	defmodule Anagram do\n  def match(word, words) do\n    Enum.filter(words, anagrams?(word, &1))\n  end\n\n  defp anagrams?(word, other_word) do\n    alphabetize(word) == alphabetize(other_word)\n  end\n\n  defp alphabetize(word) do\n    word |> String.graphemes |> Enum.sort\n  end\nend	\N	f	2	1	2014-01-27 18:41:55	2014-01-27 18:41:55	19	anagram.exs
49	7	d5b8dd5ad91109317498248e	hibernating	ruby	scrabble-score	class Scrabble\n\n\tdef initialize(word)\n\t\t@word = word\n\tend\n\n\tdef score\n\t\tself.class.calculate(@word)\n\tend\n\n\tdef self.score(word)\n\t\tcalculate(word)\n\tend\n\n\tprivate\n\n\tdef self.calculate(word)\n\t\treturn 0 if word.nil? || word.strip.empty?\n\t\tscore = 0\n\t\tword.split("").each do |letter| \n\t\t\tscore += self.score_list[letter.downcase]\n\t\tend\n\t\tscore\n\tend\n\n\n\tdef self.score_list\n\t\tlist = {}\n\t\tlist.merge!(Hash[%W(a e i o  u l n r s t).map{|e| [e, 1 ] }])\n\t\tlist.merge!(Hash[%W(d g).map {|e| [e, 2] }])\n\t\tlist.merge!(Hash[%W(b c m p).map {|e| [e, 3 ] }])\n\t\tlist.merge!(Hash[%W(f h v w y).map {|e| [e, 4 ] }])\n\t\tlist.merge!(Hash["k", 5])\n\t\tlist.merge!(Hash[%W(j x).map {|e| [e, 8 ] }])\n\t\tlist.merge!(Hash[%W(q z).map {|e| [e, 10 ] }])\n\tend\nend	\N	f	2	1	2014-04-22 12:26:57	2014-04-22 12:26:57	20	scrabble.rb
50	7	357e9dec4da42d8eccd57563	superseded	haskell	parallel-letter-frequency	module Frequency ( frequency\n                 , textFrequency\n                 , frequencyList\n                 )\nwhere\n\nimport qualified Data.Map.Strict as Map\nimport Data.Map.Strict (Map)\nimport Data.Text (Text)\nimport qualified Data.Text as T\nimport qualified Control.Monad.Parallel as Par\nimport Data.List (foldl')\nimport Data.Char (isAlpha, toLower)\n\ntextFrequency :: Text -> Map Char Int\ntextFrequency = T.foldl' addLetter Map.empty . T.filter isAlpha\n  where\n    addLetter dct l = Map.insertWith (+) (toLower l) 1 dct\n\nfrequencyList :: [Text] -> [Map Char Int]\nfrequencyList = concat . Par.mapM (return . textFrequency)\n\nfrequency :: Int -> [Text] -> Map Char Int\nfrequency _ = foldl' (Map.unionWith (+)) Map.empty . frequencyList	\N	f	2	1	2013-11-09 11:52:47	2013-11-09 11:52:47	21	Frequency.hs
65	7	6518e883f084a38cd9bca00d	superseded	python	anagram	class Anagram:\n    def __init__(self, base):\n        self.comparison_base = self.sorted_string(base)\n\n    def sorted_string(self, string):\n        return ''.join(sorted(list(string.lower())))\n\n    def match(self, strings):\n        return [string for string in strings if self.sorted_string(string) == self.comparison_base]	\N	f	2	1	2014-01-29 21:33:59	2014-01-29 21:33:59	32	anagram.py
53	7	b461a111cb70b2409e044607	done	go	octal	package octal\n\nfunc ToDecimal(octal string) int64 {\n\tvar decimal int64\n\n\tfor _, digit := range octal {\n\t\tif digit < '0' || digit >= '8' {\n\t\t\treturn 0\n\t\t}\n\n\t\t// decimal = 8*decimal + int64(digit-'0')\n\n\t\tdecimal = decimal<<3 | int64(digit-'0')\n\t}\n\n\treturn decimal\n}	\N	f	0	1	2013-10-03 12:25:25	2013-10-03 12:25:25	23	octal.go
55	7	31fadac2439741b9606216af	done	elixir	roman-numerals	defmodule Roman do\n  def numerals(n) do\n    numeralize(n, [])\n  end\n\n  defp numeralize(0, acc) do acc |> Enum.reverse |> Enum.join end\n  defp numeralize(n, acc) do\n    numeral_values = [{"M", 1000}, {"CM", 900},\n                      {"D", 500},  {"CD", 400},\n                      {"C", 100},  {"XC", 90},\n                      {"L", 50},   {"XL", 40},\n                      {"X", 10},   {"IX", 9},\n                      {"V", 5},    {"IV", 4},\n                      {"I", 1}]\n\n    {m, numeral} = Enum.find_value(numeral_values, fn {numeral, value} ->\n      {q, r} = divrem(n, value)\n      if q > 0, do: {r, repeat_string(numeral, q)}\n    end)\n    numeralize(m, [numeral | acc])\n  end\n\n  defp repeat_string(string, count) do\n    Enum.reduce(1..count, "", fn _, reps -> string <> reps end)\n  end\n\n  defp divrem(dividend, divisor) do\n    remainder = rem(dividend, divisor)\n    quotient = :erlang.trunc(dividend / divisor)\n    {quotient, remainder}\n  end\nend	\N	f	2	1	2014-02-18 16:18:57	2014-02-18 16:18:57	25	roman-numerals.exs
56	7	8705370a58ae950783845154	superseded	elixir	leap	defmodule Year do\n\t\n  def leap_year?(year),do: leap?(year)\n\n  defp leap?(year) when rem(year,4)==0 and rem(year,100)==0,do: rem(year,400)==0\n  defp leap?(year),do: rem(year,4)==0\n \nend	\N	f	2	1	2013-09-21 20:04:01	2013-09-21 20:04:01	26	leap.exs
57	7	5f057b0bdaf331ee6a02fdb2	done	elixir	leap	defmodule Year do\n\t\n  def leap_year?(year) do\n    divisible_by?(4,year) && !divisible_by?(100,year) || divisible_by?(400,year)   \n  end\n\n  defp divisible_by?(number,year), do: rem(year,number)==0\n   \nend	\N	f	1	2	2013-09-24 13:33:43	2013-09-24 13:33:43	26	leap.exs
58	7	7828cfc3a1b43bcaaf3f40e4	done	javascript	bob	var Bob = function () {};\n\nBob.prototype.hey = function (question) {\n    'use strict';\n    var response = 'Whatever.';\n    if ('?' === question[question.length - 1]) {\n        response = 'Sure';\n    } else if (question.toUpperCase() === question) {\n        response = 'Woah, chill out!';\n    } else if ('' === question) {\n        response = 'Fine. Be that way!';\n    }\n    return response;\n};\n\nmodule.exports = Bob;	\N	f	2	1	2013-09-21 15:33:11	2013-09-21 15:33:11	27	bob.js
59	7	77309fedc33ef8a9a067ea36	done	ruby	anagram	class Words\n  attr_reader :list\n\n  def initialize(input)\n    @list = parse(input.downcase)\n  end\n\n  def parse(words)\n    words.split(/\\W/).reject { |n| n.empty? }\n  end\n\n  def count\n    list.inject(Hash.new(0)) do |hash, word|\n      hash[word] += 1\n      hash\n    end\n  end\nend	\N	f	2	1	2013-12-12 05:02:02	2013-12-12 05:02:02	28	anagram.rb
60	7	7442c9a8929c1966afc6f648	done	haskell	bob	module Bob where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor a\n      | isEmpty = "Fine. Be that way!"\n      | isCaps = "Woah, chill out!"\n      | isQuestion = "Sure."\n      | otherwise = "Whatever."\n      where isEmpty = all isSpace a\n            isCaps = all isUpper onlyAlpha && not (null onlyAlpha)\n            isQuestion = last a == '?'\n            onlyAlpha = filter isAlpha a	\N	f	2	1	2013-10-25 13:01:50	2013-10-25 13:01:50	29	Bob.hs
61	7	7471c89d146e765145d148ef	pending	coffeescript	word-count	class Words\n  constructor: (@text) ->\n    @count = this.count()\n\n  count: ->\n    tally = {}\n    for word in @words()\n      tally[word] ||= 0\n      tally[word] += 1\n\n    tally\n\n  words: -> @text.toLowerCase().match(/\\w+/g)\n\nmodule.exports = Words	\N	f	2	1	2013-11-04 13:01:06	2013-11-04 13:01:06	30	words.coffee
62	7	7b256a23fe19bf3eaa64bab1	pending	javascript	rna-transcription	function toRna(dna){\n  var dnaArray = dna.split('');\n  var dnaArrayLength = dnaArray.length;\n  var rnaResult = "";\n  for(var i=0; i< dnaArrayLength; i++){\n    switch (dnaArray[i]){\n      case 'C':\n        rnaResult += 'G';\n        break;\n      case 'G':\n        rnaResult += 'C';\n        break;\n      case 'A':\n        rnaResult += 'U';\n        break;\n      case 'T':\n        rnaResult += 'A';\n        break;\n      default:\n        return;\n    }\n  }\n  return rnaResult;\n\n}	\N	f	2	1	2014-04-06 12:55:55	2014-04-06 12:55:55	31	rna-transcription.js
63	7	cebb7758a55078483a9af216	superseded	python	anagram	class Anagram:\n    def __init__(self, base):\n        self.comparison_base = self.sorted_string(base)\n\n    def sorted_string(self, string):\n        return sorted(string.lower())\n\n    def match(self, strings):\n        return [string for string in strings if self.sorted_string(string) == self.comparison_base]	\N	f	2	3	2013-09-24 23:59:34	2013-09-24 23:59:34	32	anagram.py
64	7	3431196d15c7a9b2a81b3637	done	python	anagram	class Anagram:\n    def __init__(self, base):\n        self.comparison_base = self.sorted_string(base)\n\n    def sorted_string(self, string):\n        return sorted(string.lower())\n\n    def is_anagram(self, string):\n        return self.sorted_string(string) == self.comparison_base\n\n    def match(self, strings):\n        # Sadly, we have to force it to a list\n        return list(filter(self.is_anagram, strings))	\N	f	0	6	2013-10-19 05:58:28	2013-10-19 05:58:28	32	anagram.py
116	7	afc2b45e475f991eff4733fd	superseded	go	hamming	package hamming\n\nfunc Distance(strandA string, strandB string) (dist int) {\n\tif len(strandA) > len(strandB) {\n\t\tstrandA = strandA[:len(strandB)]\n\t}\n\n\tfor i, _ := range strandA {\n\t\tif strandA[i] != strandB[i] {\n\t\t\tdist++\n\t\t}\n\t}\n\n\treturn dist\n}	\N	f	0	2	2013-11-01 01:09:45	2013-11-01 01:09:45	57	hamming.go
67	7	7918569e494350da448222b4	superseded	python	anagram	class Anagram:\n    def __init__(self, base):\n        self.comparison_base = self.sorted_string(base)\n\n    def sorted_string(self, string):\n        return sorted(string.lower())\n\n    def is_anagram(self, string):\n        return self.sorted_string(string) == self.comparison_base\n\n    def match(self, strings):\n        return list(filter(self.is_anagram, strings))	\N	f	0	5	2014-02-23 15:04:19	2014-02-23 15:04:19	32	anagram.py
68	7	24f9912c6571dd82bdaa3d2d	superseded	python	anagram	class Anagram:\n    def __init__(self, base):\n        self.comparison_base = self.sorted_string(base)\n\n    def sorted_string(self, string):\n        return ''.join(sorted(string.lower()))\n\n    def match(self, strings):\n        return [string for string in strings if self.sorted_string(string) == self.comparison_base]	\N	f	3	2	2014-04-02 13:14:15	2014-04-02 13:14:15	32	anagram.py
69	7	1043cbaa6dc2dcd91ecb41a4	done	ruby	rna-transcription	class DNA\n\tdef initialize(dna)\n\t\t@nucleotides =dna.split("")\n\tend\n\n\tdef to_rna\n\t\trna= ""\n\t\t@nucleotides.each do |nucleotide| \n\t\t\tif nucleotide == "T"\n\t\t\t\trna= rna + "U"\n\t\t\telse\n\t\t\t\trna= rna + nucleotide\n\t\t\tend\n\t\tend\n\t\trna\n\tend\nend\t	\N	f	2	1	2014-01-21 19:38:29	2014-01-21 19:38:29	33	rna-transcription.rb
70	7	1874a1f6c3cf3533d3be9092	superseded	ruby	leap	class Year\n  \n  def initialize(yr)\n    @yr = yr\n  end\n  \n  def leap?\n    exceptional_century || ( divisible_by_4 && !any_century )\n  end \n  \n  private\n  def divisible_by_4\n    @yr % 4 == 0\n  end  \n  \n  def any_century\n    @yr % 100 == 0\n  end   \n  \n  def exceptional_century\n    @yr % 400 == 0 \n  end  \n    \nend  	\N	f	2	2	2013-11-05 00:12:28	2013-11-05 00:12:28	34	leap.rb
71	7	0a8aff13d060878abc61ba5e	superseded	ruby	leap	class Year\n  \n  def initialize(number)\n    @number = number\n  end\n  \n  def leap?\n    exceptional_century || ( divisible_by_4 && !any_century )\n  end \n  \n  private\n  def divisible_by_4\n    @number % 4 == 0\n  end  \n  \n  def any_century\n    @number % 100 == 0\n  end   \n  \n  def exceptional_century\n    @number % 400 == 0 \n  end  \n    \nend  	\N	f	2	3	2013-11-06 21:53:18	2013-11-06 21:53:18	34	leap.rb
72	7	2a82a93bd608510a03863c48	done	ruby	leap	class Year\n  \n  def initialize(number)\n    @number = number\n  end\n  \n  def leap?\n    return true if divisible_by? 400 \n    return false if divisible_by? 100\n    divisible_by? 4 \n  end \n  \n  private\n  def divisible_by?(a_number)\n    @number % a_number == 0\n  end  \n  \n    \nend  	\N	f	2	4	2014-03-18 10:29:36	2014-03-18 10:29:36	34	leap.rb
73	7	8c3a164b3243c9875eeba9b6	superseded	ruby	leap	class Year\n  \n  def initialize(_year)\n    @y = _year\n  end\n  \n  def leap?\n    @y % 400 == 0 || ( @y % 4 == 0 && @y % 100 > 0 )\n  end  \n    \nend  	\N	f	0	1	2014-04-18 12:00:37	2014-04-18 12:00:37	34	leap.rb
75	7	b0c513ceff24f34908c923d2	superseded	ruby	sieve	class Sieve\n  def initialize(limit)\n    @limit = limit\n    @primes = (2..@limit).to_a\n  end\n\n  def primes\n    @primes.each { |prime| delete_all_multiples_of(prime) }\n  end\n\n  private\n\n  def delete_all_multiples_of(prime)\n    (prime+1..@limit).to_a.each do |test_number|\n      @primes.delete(test_number) if test_number % prime == 0\n    end\n  end\nend	\N	f	2	1	2013-10-29 12:33:22	2013-10-29 12:33:22	36	sieve.rb
76	7	d3356d91c5ea5cc0dbffc974	pending	ruby	sieve	class Sieve\n  def initialize(limit)\n    @limit = limit\n  end\n\n  def primes\n    (2..@limit).map.with_object([]) do |possible_prime, primes|\n      primes << possible_prime if primes.none? { |prime| possible_prime % prime == 0 }\n    end\n  end\nend	\N	f	1	2	2013-11-17 14:59:27	2013-11-17 14:59:27	36	sieve.rb
77	7	89541d909fe72bfae63af3d1	superseded	haskell	word-count	module WordCount (wordCount) where\r\n\r\nimport Data.Char\r\nimport qualified Data.Text as T\r\nimport qualified Data.Map as M\r\n\r\nisDelimiter :: Char -> Bool\r\nisDelimiter c = isSpace c || not (isAlphaNum c)\r\n\r\nwordifyText :: T.Text -> [T.Text]\r\nwordifyText = filter (not . T.null) . T.split isDelimiter . T.toLower\r\n\r\nwordify :: String -> [String]\r\nwordify = map T.unpack . wordifyText . T.pack\r\n\r\nwordCount :: String -> M.Map String Int\r\nwordCount = foldl addWord M.empty . wordify\r\n  where addWord m w = M.alter incrementCount w m\r\n        incrementCount Nothing = Just 1\r\n        incrementCount (Just n) = Just (n + 1)\r	\N	f	0	1	2013-11-25 13:23:37	2013-11-25 13:23:37	37	WordCount.hs
78	7	2c207dd0b97af7ce1475db67	superseded	haskell	word-count	module WordCount (wordCount) where\r\n\r\nimport Data.Char\r\nimport Data.List.Split\r\nimport qualified Data.Map as M\r\n\r\nisDelimiter :: Char -> Bool\r\nisDelimiter c = isSpace c || not (isAlphaNum c)\r\n\r\nwordify :: String -> [String]\r\nwordify = wordsBy isDelimiter . map toLower\r\n\r\nwordCount :: String -> M.Map String Int\r\nwordCount = foldl addWord M.empty . wordify\r\n  where addWord m w = M.alter incrementCount w m\r\n        incrementCount Nothing = Just 1\r\n        incrementCount (Just n) = Just (n + 1)\r	\N	f	2	2	2014-01-02 09:07:48	2014-01-02 09:07:48	37	WordCount.hs
79	7	96026e0a4aede9460029274d	done	haskell	word-count	module WordCount (wordCount) where\r\n\r\nimport Data.Char\r\nimport Data.List (foldl')\r\nimport Data.List.Split\r\nimport qualified Data.Map.Strict as M\r\n\r\nwordify :: String -> [String]\r\nwordify = wordsBy (not . isAlphaNum) . map toLower\r\n\r\nwordCount :: String -> M.Map String Int\r\nwordCount = foldl' addWord M.empty . wordify\r\n  where addWord m w = M.alter incrementCount w m\r\n        incrementCount Nothing = Just 1\r\n        incrementCount (Just n) = Just (n + 1)\r	\N	f	2	4	2014-01-10 16:15:41	2014-01-10 16:15:41	37	WordCount.hs
80	7	300a09d66ec6649102770366	superseded	haskell	word-count	module WordCount (wordCount) where\r\n\r\nimport Data.Char\r\nimport Data.List.Split\r\nimport qualified Data.Map as M\r\n\r\nwordify :: String -> [String]\r\nwordify = wordsBy (not . isAlphaNum) . map toLower\r\n\r\nwordCount :: String -> M.Map String Int\r\nwordCount = foldl addWord M.empty . wordify\r\n  where addWord m w = M.alter incrementCount w m\r\n        incrementCount Nothing = Just 1\r\n        incrementCount (Just n) = Just (n + 1)\r	\N	f	1	3	2014-01-30 04:55:38	2014-01-30 04:55:38	37	WordCount.hs
81	7	923b202427927191667d551c	superseded	elixir	binary	defmodule Binary do\n\n  def to_decimal(bin_str) do\n    bin_str\n    |> String.graphemes\n    |> Enum.reverse\n    |> Enum.zip(0..String.length(bin_str))\n    |> Enum.filter(fn({str, _}) -> "1" == str end)\n    |> Enum.reduce(0, fn({_, exp}, sum) -> sum + :math.pow(2, exp) end)\n    |> trunc\n  end\nend	\N	f	2	1	2013-09-25 15:36:26	2013-09-25 15:36:26	38	binary.exs
83	7	fe94d74221c0c4b6f0bc7019	done	elixir	binary	defmodule Binary do\n  use Bitwise\n\n  def to_decimal(bin_str) do\n    bin_str\n    |> String.graphemes\n    |> Enum.zip((String.length(bin_str) - 1)..0)\n    |> Enum.reduce(0, fn({str, exp}, sum) ->\n      if str == "1", do: sum ^^^ (1 <<< exp),\n      else: sum\n    end)\n  end\nend	\N	f	2	3	2014-02-13 23:06:46	2014-02-13 23:06:46	38	binary.exs
85	7	78bc5ff0eca31af7a3778101	done	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\r\nimport qualified Data.Map.Strict   as M\r\nimport           Data.List (foldl')\r\n\r\ntype Nucleotide    = Char\r\ntype NucleotideMap = M.Map Nucleotide Int\r\n\r\nisNucleotide :: Nucleotide -> Bool\r\nisNucleotide c = c `elem` "ACGTU"\r\n\r\ncount :: Nucleotide -> [Nucleotide] -> Int\r\ncount nucleotide nucleotides\r\n  | isNucleotide nucleotide = length $ filter (==nucleotide) nucleotides\r\n  | otherwise      = error $ "invalid nucleotide " ++ show nucleotide\r\n\r\nnucleotideCounts :: [Nucleotide] -> NucleotideMap\r\nnucleotideCounts nucleotides = foldl' updateNucleotideMap emptyNucleotideMap nucleotides\r\n  where\r\n    updateNucleotideMap nucleotideMap nucleotide = M.insertWith (+) nucleotide 1 nucleotideMap\r\n    emptyNucleotideMap = M.fromList [('A', 0), ('C', 0), ('G', 0), ('T', 0)]\r	\N	f	2	2	2014-04-11 10:56:57	2014-04-11 10:56:57	39	DNA.hs
86	7	3841269c60dc4e869716d226	superseded	python	rna-transcription	class DNA:\n    str=""\n    DIC={"G":"C","C":"G","T":"A","A":"U"}\n    def __init__(self,str):\n        self.str=str\n    \n    def to_rna(self):\n        result=""\n        for x in range(len(self.str)):\n            result+=self.DIC[self.str[x]]\n        return result\n\n\nprint(DNA("CGGGG").to_rna())\n\t\t	\N	f	1	1	2013-12-18 20:00:37	2013-12-18 20:00:37	40	dna.py
87	7	fa65a5f294183c0d1bac5f4e	pending	python	rna-transcription	class DNA:\n    str=""\n    DIC={"G":"C","C":"G","T":"A","A":"U"}\n    def __init__(self,str):\n        self.str=str\n    \n    def to_rna(self):\n        result=""\n        for x in self.str:\n            result+=self.DIC[x]\n        return result\n\t\t	\N	f	0	2	2014-04-26 18:41:13	2014-04-26 18:41:13	40	dna.py
88	7	5611ec42847152a9bc399eaf	done	ruby	etl	class ETL\n\n  def self.transform(old)\n    old.each_with_object({}) do |(key, value), hash|\n      value.map {|content| hash[content.downcase] = key}\n    end\n  end\n\nend	\N	f	2	1	2013-09-14 19:02:26	2013-09-14 19:02:26	41	etl.rb
89	7	adf17a947d504280437d2599	superseded	ruby	raindrops	class Raindrops\n\tdef self.convert(input)\n\t\tif input.is_a? Integer\n\t\t\tfactors = []\n\t\t\tnumber = input\n\n\t\t\twhile(number%2==0) do\n\t\t\t\tfactors.push(2)\n\t\t\t\tnumber = number/2\n\t\t\tend\n\t\t\t\n\t\t\t(3..Math.sqrt(number)).step(2).each do |i|\n\t      while (number%i == 0) do\n\t        factors.push(i.to_i)\n\t        number = number/i;\n\t      end\n\t    end\n\n\t    if number > 2\n\t    \tfactors.push(number.to_i)\n\t    end\n\n\t    factors = factors & [3,5,7]\n\t    unless factors.empty?\n\t    \tstring = ""\n\t\t    factors.each do |factor|\n\t\t\t\t\tcase factor\n\t\t\t\t\twhen 3\n\t\t\t\t\t\tstring += "Pling"\n\t\t\t\t\twhen 5\n\t\t\t\t\t\tstring += "Plang"\n\t\t\t\t\telse\n\t\t\t\t\t\tstring += "Plong"\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\treturn string\n\t\t\telse\n\t\t\t\treturn input.to_s\n\t\t\tend\n\t\telse\n\t\t\tputs "Please provide a valid number"\n\t\tend\n\tend\nend	\N	f	2	1	2013-09-13 11:33:25	2013-09-13 11:33:25	42	raindrops.rb
90	7	6ae4d9e7c08e43d3fb0cf3c1	pending	ruby	raindrops	class Raindrops\n\tdef self.convert(input)\n\t\tfactors = []\n\t\tnumber = input\n\n\t\twhile(number%2==0) do\n\t\t\tfactors.push(2)\n\t\t\tnumber = number/2\n\t\tend\n\t\t\n\t\t(3..Math.sqrt(number)).step(2).each do |i|\n      while (number%i == 0) do\n        factors.push(i.to_i)\n        number = number/i;\n      end\n    end\n\n    if number > 2\n    \tfactors.push(number.to_i)\n    end\n\n    factors = factors & [3,5,7]\n    unless factors.empty?\n    \tstring = ""\n\t    factors.each do |factor|\n\t\t\t\tcase factor\n\t\t\t\twhen 3\n\t\t\t\t\tstring += "Pling"\n\t\t\t\twhen 5\n\t\t\t\t\tstring += "Plang"\n\t\t\t\telse\n\t\t\t\t\tstring += "Plong"\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn string\n\t\telse\n\t\t\treturn input.to_s\n\t\tend\n\tend\nend	\N	f	2	2	2013-12-06 15:42:17	2013-12-06 15:42:17	42	raindrops.rb
91	7	5587e9a2bc33073af728bc48	done	elixir	bob	defmodule Teenager do\n\n  def __info__ do\n\n  end\n\n  def hey(_statement) do\n\t\tshouting = String.upcase(_statement) == _statement && String.downcase(_statement) != _statement\n\t\tquestion = String.ends_with? _statement, "?" \n\t\tsilence = String.rstrip(_statement) == ""\n\t\tif(silence) do\n\t\t\t"Fine. Be that way!"\n\t\telse\n\t\t\tif(shouting) do\n\t\t\t  "Woah, chill out!"\n\t\t\telse\n\t\t\t\tif(question) do\n\t\t\t\t\t"Sure."\n\t\t\t\telse\n\t\t\t\t\t"Whatever."\n\t\t\t\tend\n\t\t\tend\n\t\tend\n  end\n\nend	\N	f	2	1	2014-01-16 22:40:32	2014-01-16 22:40:32	43	bob.exs
92	7	2105aba11a51e2d125ecf9e0	done	haskell	prime-factors	module PrimeFactors (primeFactors) where\r\n\r\n-- Algorithm from http://stackoverflow.com/questions/23287/prime-factors\r\nprimeFactors :: Integer -> [Integer]\r\nprimeFactors x = reverse $ pf x 2 []\r\n  where\r\n    pf 1 _ fs = fs\r\n    pf n d fs \r\n      | d*d > n = if n > 1\r\n                  then (n:fs)\r\n                  else fs\r\n      | otherwise =  if (n `rem` d) == 0\r\n                     then pf (n `quot` d) d (d:fs)\r\n                     else pf n (d+1) fs\r	\N	f	2	3	2013-10-04 04:10:45	2013-10-04 04:10:45	44	PrimeFactors.hs
93	7	72ae04885d29666e33b08050	superseded	haskell	prime-factors	module PrimeFactors (primeFactors) where\r\n\r\n-- Algorithm from http://stackoverflow.com/questions/23287/prime-factors\r\nprimeFactors :: Integer -> [Integer]\r\nprimeFactors x = reverse $ pf x 2 []\r\n  where\r\n    pf 1 _ fs = fs\r\n    pf n d fs \r\n      | d*d > n = if n > 1\r\n                  then (n:fs)\r\n                  else fs\r\n      | otherwise =  if (n `rem` d) == 0\r\n                     then pf (n `quot` d) d (d:fs)\r\n                     else pf n (d+1) fs\r	\N	f	2	1	2013-12-05 22:14:49	2013-12-05 22:14:49	44	PrimeFactors.hs
95	7	270274d7ca055771c2c58a65	done	ruby	gigasecond	class Gigasecond\n\n  def initialize(date_of_birth)\n    @date_of_birth = date_of_birth\n  end\n\n  def date\n    date_of_birth + days_till_gigasecond\n  end\n\n  private\n\n  attr_reader :date_of_birth\n\n  def days_till_gigasecond\n    GIGASECOND / SECONDS_PER_DAY\n  end\n\n  SECONDS_PER_DAY = 60 * 60 * 24\n\n  GIGASECOND = 1000_000_000\n\nend	\N	f	2	1	2013-10-10 07:59:03	2013-10-10 07:59:03	45	gigasecond.rb
96	7	e4f7b0298dfe0e19c75a146f	superseded	clojure	anagram	(ns anagram)\n\n(defn test-anagram [w1 w2]\n  (let [lc1 (clojure.string/lower-case w1)\n        lc2 (clojure.string/lower-case w2)]\n    (and (not (= lc1 lc2))\n         (= (sort lc1) (sort lc2)))))\n\n(defn anagrams-for [w1 word-list]\n  (filter (partial test-anagram w1)\n       word-list))	\N	f	1	1	2014-02-23 19:49:04	2014-02-23 19:49:04	46	anagram.clj
97	7	8db7a4b2d3f3802cf85bc997	superseded	clojure	anagram	(ns anagram)\n\n(defn test-anagram [w1 w2]\n  (and (not (= w1 w2))\n       (= (sort w1) (sort w2))))\n\n(defn anagrams-for [w1 word-list]\n  (let [lc1 (clojure.string/lower-case w1)]\n    (filter\n      #(test-anagram\n         lc1\n         (clojure.string/lower-case %))\n      word-list)))	\N	f	3	2	2014-03-23 00:57:44	2014-03-23 00:57:44	46	anagram.clj
98	7	4453d3b07d31d1c00f982a87	pending	clojure	anagram	(ns anagram)\n\n(defn test-anagram [w1]\n  (let [lc1  (clojure.string/lower-case w1)\n        sorted-lc1 (sort lc1)]\n    (fn [w2]\n      (let [lc2 (clojure.string/lower-case w2)]\n        (and (not (= lc1 lc2))\n             (= sorted-lc1 (sort lc2)))))))\n\n(defn anagrams-for [w1 word-list]\n  (let [anagram-test-w1 (test-anagram w1)]\n    (filter\n      anagram-test-w1\n      word-list)))	\N	f	2	3	2014-03-24 14:12:04	2014-03-24 14:12:04	46	anagram.clj
100	7	b62c0a52bf89413150c1d17f	hibernating	ruby	hamming	class Hamming\n  def self.compute(x, y)\n    if x.length > y.length\n      compare(y, x)\n    else\n      compare(x, y)\n    end\n  end\n\n  def self.compare(shorter, longer)\n    hamming = 0\n    shorter.split('').each_with_index do |letter, i|\n      hamming += 1 if letter != longer[i]\n    end\n    hamming\n  end\nend	\N	f	2	1	2013-09-11 08:09:26	2013-09-11 08:09:26	48	hamming.rb
102	7	7c30ea41e2e2630f43361364	done	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(src map[int][]string) (target map[string]int) {\n\n\tvar value string\n\tvar values []string\n\tvar key int\n\t\n\ttarget = make(map[string]int)\n\tfor key, values = range src {\n\t\tfor _, value = range values {\n\t\t\ttarget[strings.ToLower(value)] = key\n\t\t}\n\t}\n\n\treturn\n}	\N	f	2	1	2014-02-08 09:51:33	2014-02-08 09:51:33	50	etl.go
103	7	7f2c69ba129cbd08ee9bfd2f	done	ruby	roman-numerals	class Fixnum\n  def to_roman\n    RomanNumeral.new(self).to_s\n  end\nend\n\nclass RomanNumeral\n  attr_reader :value\n\n  def initialize(int)\n    @value = int\n  end\n\n  def to_s\n    remainder = value\n    string    = ""\n\n    thousands      = remainder / 1000 # M\n    remainder     -= thousands * 1000\n    string        += "M" * thousands\n\n    if remainder >= 900\n      string    += "CM"\n      remainder -= 900\n    end\n\n    five_hundreds  = remainder / 500  # D\n    remainder     -= five_hundreds * 500\n    string        += "D" * five_hundreds\n\n    hundreds       = remainder / 100  # C\n    remainder     -= hundreds * 100\n    string        += (hundreds > 3 ? "CD" : "C" * hundreds)\n\n    if remainder >= 90\n      string    += "XC"\n      remainder -= 90\n    end\n\n    fifties        = remainder / 50   # L\n    remainder     -= fifties * 50\n    string        += "L" * fifties\n\n    tens           = remainder / 10   # X\n    remainder     -= tens * 10\n    string        += (tens > 3 ? "XL" : "X" * tens)\n\n    if remainder == 9\n      string    += "IX"\n      remainder -= 9\n    end\n\n    fives          = remainder / 5    # V\n    remainder     -= fives * 5\n    string        += "V" * fives\n\n    ones           = remainder        # I\n    string        += (ones > 3 ? "IV" : "I" * ones)\n  end\nend	\N	f	0	1	2013-10-17 06:18:40	2013-10-17 06:18:40	51	roman-numerals.rb
104	7	3e00d2c1b98ad0ec4c8b84b9	superseded	ruby	house	class House\n\n  def verse(num)\n    "This is " + phrases(num).join(' ')\n  end\n\n  def verses(first, last)\n    first.upto(last).collect do |n|\n      verse(n)\n    end.join("\\n") + "\\n"\n  end\n\n  def phrases(number)\n    content[0..number-1].reverse.collect do |object, verb|\n      "the #{object} that #{verb}"\n    end\n  end\n\n  def content\n    [\n      ["house", "Jack built.\\n"],\n      ["malt", "lay in"],\n      ["rat", "ate"],\n      ["cat", "killed"],\n      ["dog", "worried"],\n      ["cow with the crumpled horn", "tossed"],\n      ["maiden all forlorn", "milked"],\n      ["man all tattered and torn", "kissed"],\n      ["priest all shaven and shorn", "married"],\n      ["rooster that crowed in the morn", "woke"],\n      ["farmer sowing his corn", "kept"],\n      ["horse and the hound and the horn", "belonged to"]\n    ]\n  end\n\nend	\N	f	0	1	2013-12-30 16:58:59	2013-12-30 16:58:59	52	house.rb
117	7	ae8d839cc6276a2e6a149e7d	done	go	hamming	package hamming\n\nfunc Distance(strandA string, strandB string) (dist int) {\n\tif len(strandA) > len(strandB) {\n\t\tstrandA = strandA[:len(strandB)]\n\t}\n\n\tfor i := 0; i < len(strandA); i++ {\n\t\tif strandA[i] != strandB[i] {\n\t\t\tdist++\n\t\t}\n\t}\n\n\treturn dist\n}	\N	f	2	3	2014-03-28 09:11:39	2014-03-28 09:11:39	57	hamming.go
435	20	2b78e4a1c0040dfba73d460a	done	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    counter = 0\n    index = 0\n\n    a = a.each_char.to_a\n    b = b.each_char.to_a\n\n    combined = a.zip(b)\n    combined.each do |set|\n      if set[0] != set[1] && !set.include?(nil)\n        counter += 1\n      end\n    end\n    counter\n  end\nend	\N	f	5	3	2014-04-14 10:23:48	2014-04-14 10:23:48	212	hamming.rb
106	7	2f2049a488aeb4d134bad965	done	ruby	house	class House\n\n  def verse(i)\n    "This is " + phrases(i).join(' ') + "\\n"\n  end\n\n  def verses(first, last)\n    first.upto(last).collect do |i|\n      verse(i)\n    end.join("\\n") + "\\n"\n  end\n\n  def phrases(i)\n    content.take(i).reverse.collect do |object, verb|\n      "the #{object} that #{verb}"\n    end\n  end\n\n  def content\n    [\n      ["house", "Jack built."],\n      ["malt", "lay in"],\n      ["rat", "ate"],\n      ["cat", "killed"],\n      ["dog", "worried"],\n      ["cow with the crumpled horn", "tossed"],\n      ["maiden all forlorn", "milked"],\n      ["man all tattered and torn", "kissed"],\n      ["priest all shaven and shorn", "married"],\n      ["rooster that crowed in the morn", "woke"],\n      ["farmer sowing his corn", "kept"],\n      ["horse and the hound and the horn", "belonged to"]\n    ]\n  end\n\nend	\N	f	1	3	2014-01-02 14:02:43	2014-01-02 14:02:43	52	house.rb
107	7	a1eee19c42f542955ddc88ec	superseded	ruby	triangle	require 'set'\n\nclass TriangleError < StandardError\nend\n\nclass Triangle\n  attr_reader :sides\n  KINDS = [:_, :equilateral, :isosceles, :scalene]\n\n  def initialize(a, b, c)\n    @sides = [a, b, c].sort\n  end\n\n  def kind\n    case sides\n    when violates_triangle_inequality? \n      raise TriangleError, "violates triangle inequality"\n    when illegal_sides?\n      raise TriangleError, "side lengths must be greater than zero"\n    else\n      KINDS[sides.uniq.count]\n    end  \n  end\n\n  private\n  def violates_triangle_inequality?\n    ->(sides) {sides[0] + sides[1] <= sides[2]}\n  end\n\n  def illegal_sides?\n    ->(sides) {sides.first <= 0}\n  end\nend	\N	f	0	1	2013-10-01 19:48:02	2013-10-01 19:48:02	53	triangle.rb
108	7	a694a32c0cc7f8f6d3d35109	done	ruby	triangle	class TriangleError < StandardError\nend\n\nclass Triangle\n  UNIQUE_SIDE_LENGTHS = {1 => :equilateral, 2 => :isosceles, 3 => :scalene}\n\n  def initialize(a, b, c)\n    @small, @medium, @large = [a, b, c].sort\n    raise TriangleError, "violates triangle inequality" if violates_triangle_inequality?\n    raise TriangleError, "side lengths must be greater than zero" if illegal_sides?\n  end\n\n  def kind\n    UNIQUE_SIDE_LENGTHS[[small, medium, large].uniq.size] \n  end\n\n  private\n  attr_reader :small, :medium, :large\n  def violates_triangle_inequality?\n    small + medium <= large\n  end\n\n  def illegal_sides?\n    small <= 0\n  end\nend	\N	f	3	2	2014-04-10 21:25:09	2014-04-10 21:25:09	53	triangle.rb
109	7	a731e6b211e83bce2f1cacd8	superseded	haskell	roman-numerals	module Roman (numerals)\nwhere\n\ndigits :: [(Int, String)]\ndigits = [(1000, "M" ),\n          ( 900, "CM"),\n          ( 500, "D" ),\n          ( 400, "CD"),\n          ( 100, "C" ),\n          (  90, "XC"),\n          (  50, "L" ),\n          (  40, "XL"),\n          (  10, "X" ),\n          (   9, "IX"),\n          (   5, "V" ),\n          (   4, "IV"),\n          (   1, "I" )]\n\nnumerals :: Int -> String\nnumerals n = numerals_ n digits []\n  where\n    numerals_ 0 _ lst = concat $ reverse lst\n    numerals_ num digs@((d,c) : rst) lst\n      | num >= d   = numerals_ (num-d) digs (c:lst)\n      | otherwise = numerals_ num rst lst	\N	f	2	1	2013-11-15 23:41:23	2013-11-15 23:41:23	54	Roman.hs
110	7	4e6f459fdcf90101148e2b45	superseded	haskell	roman-numerals	module Roman (numerals)\nwhere\n\ndigits :: [(Int, String)]\ndigits = [(1000, "M" ),\n          ( 900, "CM"),\n          ( 500, "D" ),\n          ( 400, "CD"),\n          ( 100, "C" ),\n          (  90, "XC"),\n          (  50, "L" ),\n          (  40, "XL"),\n          (  10, "X" ),\n          (   9, "IX"),\n          (   5, "V" ),\n          (   4, "IV"),\n          (   1, "I" )]\n\nnumerals :: Int -> String\nnumerals n = numerals' n digits []\n  where\n    numerals' 0 _ lst = concat $ reverse lst\n    numerals' num digs@((d,c) : rst) lst\n      | num >= d   = numerals' (num-d) digs (c:lst)\n      | otherwise = numerals' num rst lst	\N	f	2	2	2013-12-02 03:50:28	2013-12-02 03:50:28	54	Roman.hs
111	7	26f6447f77d53aa99f1732c8	done	haskell	roman-numerals	module Roman (numerals)\nwhere\n\ndigits :: [(Int, String)]\ndigits = [(1000, "M" ),\n          ( 900, "CM"),\n          ( 500, "D" ),\n          ( 400, "CD"),\n          ( 100, "C" ),\n          (  90, "XC"),\n          (  50, "L" ),\n          (  40, "XL"),\n          (  10, "X" ),\n          (   9, "IX"),\n          (   5, "V" ),\n          (   4, "IV"),\n          (   1, "I" )]\n\nnumerals :: Int -> String\nnumerals n = numerals' n digits\n  where\n    numerals' 0 _ = []\n    numerals' num digs@((d,c) : rst)\n      | num >= d   = c ++ numerals' (num-d) digs\n      | otherwise = numerals' num rst	\N	f	2	3	2013-12-23 02:17:34	2013-12-23 02:17:34	54	Roman.hs
112	7	569f46bc23192967eacd8285	superseded	ruby	robot-name	class Robot\n\n  def name\n    @name ||= generate_name\n  end\n\n  def reset\n    @name = generate_name\n  end\n\n  private\n\n  def generate_name\n    name = []\n    2.times { name << generate_random_letter }\n    3.times { name << generate_random_number }\n    name.join\n  end\n\n  def generate_random_letter\n    letters = ("a".."z").to_a\n    letters[rand(26)]\n  end\n\n  def generate_random_number\n    rand(9).to_s\n  end\n\nend	\N	f	2	1	2013-12-13 20:10:55	2013-12-13 20:10:55	55	robot.rb
113	7	565418197d5d53e272d67dd3	pending	ruby	robot-name	class Robot\n\n  def name\n    @name ||= generate_name\n  end\n\n  def reset\n    @name = generate_name\n  end\n\n  private\n\n  def generate_name\n    name = []\n    name << [*"a".."z"].sample(2)\n    name << [*0..9].sample(3)\n    name.join\n  end\n\nend	\N	f	1	2	2014-03-10 01:41:24	2014-03-10 01:41:24	55	robot.rb
114	7	a431ac65debbbf088bb268c3	done	haskell	simple-linked-list	module LinkedList\n  ( isNil\n  , nil\n  , toList\n  , fromList\n  , new\n  , next\n  , datum\n  , reverseLinkedList\n  ) where\n\ndata LList a = (:~) a (LList a)\n             | N\n             deriving (Eq, Show)\n\nisNil :: LList a -> Bool\nisNil N = True\nisNil _ = False\n\nnil :: LList a\nnil = N\n\ntoList :: LList a -> [a]\ntoList N = []\ntoList (a:~as) = a : toList as\n\nfromList :: [a] -> LList a\nfromList [] = N\nfromList (a:as) = a :~ fromList as\n\nnew :: a -> LList a -> LList a\nnew = (:~)\n\nnext :: LList a -> LList a\nnext N = error "next"\nnext (_:~as) = as\n\ndatum :: LList a -> a\ndatum N = error "datum"\ndatum (a:~_) = a\n\nreverseLinkedList :: LList a -> LList a\nreverseLinkedList = go N\n  where go acc N = acc\n        go acc (a:~as) = go (a:~acc) as	\N	f	1	1	2013-12-23 21:32:22	2013-12-23 21:32:22	56	LinkedList.hs
115	7	700eb0482d0d2c579d4cd86c	superseded	go	hamming	package hamming\n\nfunc Distance(strandA string, strandB string) int {\n    var dist int = 0\n    var lenB int = len(strandB)\n\n    for i, _ := range strandA {\n        if ((i < lenB) && (strandA[i] != strandB[i])) {\n            dist += 1\n        }\n    }\n\n    return dist\n}	\N	f	2	1	2013-09-30 14:38:02	2013-09-30 14:38:02	57	hamming.go
119	3	f09ac5b9258094a47b19069b	superseded	javascript	word-count	function Words(str) {\n\n\tthis.count = {};\n\tthis.filter(str.toLowerCase()).split(' ').forEach(function(word) {\n\t\tif (word == '') return;\n\t\tif (word in this.count) {\n      this.count[word]++;\n    }\n\t\telse {\n      this.count[word] = 1;\n    }\n\t}.bind(this));\n\n}\n\nWords.prototype.filter = function(str) {\n  var str_up = str.toUpperCase(), l = str.length;\n  return str.split('').filter(function(ch, idx) {\n    var uc = str_up.charAt(idx);\n    return (uc != ch || ch.match(/[0-9]|\\s/));\n  }).join('');\n}\n\nmodule.exports = Words;	\N	f	0	1	2014-04-28 00:12:58	2014-04-28 00:12:58	58	word-count.js
120	3	95602ea50948c708c53a5224	done	javascript	word-count	function Words(str) {\n\tthis.count = {};\n\tthis.filter(str.toLowerCase()).split(' ').forEach(function(word) {\n\t\tif (word == '') return;\n    this.count[word] = (word in this.count) ? this.count[word] + 1 : 1;\n\t}.bind(this));\n}\n\nWords.prototype.filter = function(str) {\n  var str_up = str.toUpperCase();\n  return str.split('').filter(function(ch, idx) {\n    return (str_up.charAt(idx) != ch || ch.match(/[0-9]|\\s/));\n  }).join('');\n}\n\nmodule.exports = Words;	\N	f	0	3	2014-05-01 23:02:32	2014-05-01 23:02:32	58	word-count.js
121	3	ef1b6dbc592489b05ee306f3	superseded	javascript	bob	global.Bob = function Bob() {\n  this.FINE = 'Fine, be that way.';\n  this.WOAH = 'Woah, chill out!';\n  this.SURE = 'Sure';\n  this.WHATEVER = 'Whatever';\n}; \n\nBob.prototype.hey = function(s) {\n  var c = new Comment(s);\n  if (!s)\n    return this.FINE;\n\n  if (c.isShouting())\n    return this.WOAH;\n\n  if (c.isQuestion())\n    return this.SURE;\n\n  return this.WHATEVER;\n}\n\nComment = function Comment(s) {\n  this.s = s;\n}\nComment.prototype.isQuestion = function() {\n  return this.s.charAt(this.s.length - 1) == '?'\n}\nComment.prototype.isShouting = function() {\n  return this.s.toUpperCase() == this.s;\n}	\N	f	2	1	2014-02-10 10:32:21	2014-02-10 10:32:21	59	bob.js
122	3	a1282311b6f4ff8c3e0f9114	hibernating	javascript	bob	"use strict";\n\nglobal.Bob = function Bob() {\n  this.FINE = 'Fine, be that way.';\n  this.WOAH = 'Woah, chill out!';\n  this.SURE = 'Sure';\n  this.WHATEVER = 'Whatever';\n}; \nBob.prototype.hey = function(s) {\n  var c = new Comment(s);\n  if (!s)\n    return this.FINE;\n\n  if (c.isShouting())\n    return this.WOAH;\n\n  if (c.isQuestion())\n    return this.SURE;\n\n  return this.WHATEVER;\n}\n\nfunction Comment(s) {\n  this.s = s;\n}\nComment.prototype.isQuestion = function() {\n  return this.s.slice(-1) == '?'\n}\nComment.prototype.isShouting = function() {\n  return this.s.toUpperCase() == this.s;\n}	\N	f	2	2	2014-02-17 20:21:01	2014-02-17 20:21:01	59	bob.js
123	3	1ae2e821e4256d22be9780f2	pending	javascript	leap	var isLeapYear = function(year){\n  if(year % 400 === 0){\n    return true;\n  } else if(year % 100 === 0){\n    return false\n  } else if(year % 4 === 0){\n    return true;\n  } else {\n    return false;\n  }\n}	\N	f	0	1	2014-04-08 22:26:02	2014-04-08 22:26:02	60	leap_test.js
125	3	e49b79fd96ee7874f433fc11	superseded	javascript	phone-number	'use strict';\n\nfunction Phone (number) {\n  this.areaCode_ = "000";\n  this.exchange_ = "000";\n  this.lineNumber_ = "0000";\n  this.validate(number);\n}  \n\nPhone.prototype.validate = function(number) {\n  var strippedNumber = number.replace(/[\\D]/g,'');\n  var cleanNumber = number.match(/1?([0-9]{10})$/)[0];\n\n  if (cleanNumber.length === 10) {\n    this.areaCode_ = cleanNumber.substr(0,3);\n    this.exchange_ = cleanNumber.substr(3,3);\n    this.lineNumber_ = cleanNumber.substr(6,4);\n  }\n}\n\nPhone.prototype.number = function() {\n\treturn this.areaCode_ + this.exchange_ + this.lineNumber_;\n}\n\nPhone.prototype.areaCode = function() {\n\treturn this.areaCode_;\n}\n\nPhone.prototype.toString = function() {\n\treturn "(" + this.areaCode_ + ") " + this.exchange_ + "-" + this.lineNumber_;\n}\nmodule.exports = Phone;	\N	f	0	2	2014-03-20 05:51:45	2014-03-20 05:51:45	61	phone-number.js
126	3	721def65e7cabb94f6409887	done	javascript	phone-number	'use strict';\n\nfunction Phone (number) {\n  this.areaCode_ = "000";\n  this.exchange_ = "000";\n  this.lineNumber_ = "0000";\n  this.parse(number);\n}  \n\nPhone.prototype.parse = function(number) {\n  var cleanNumber = number.replace(/[\\D]/g,'');\n\n  if (cleanNumber.length === 11 && cleanNumber[0] === '1') {\n    cleanNumber = cleanNumber.substr(1);\n  }\n\n  if (cleanNumber.length === 10) {\n    this.areaCode_ = cleanNumber.substr(0,3);\n    this.exchange_ = cleanNumber.substr(3,3);\n    this.lineNumber_ = cleanNumber.substr(6,4);\n  }\n}\n\nPhone.prototype.number = function() {\n\treturn this.areaCode_ + this.exchange_ + this.lineNumber_;\n}\n\nPhone.prototype.areaCode = function() {\n\treturn this.areaCode_;\n}\n\nPhone.prototype.toString = function() {\n\treturn "(" + this.areaCode_ + ") " + this.exchange_ + "-" + this.lineNumber_;\n}\nmodule.exports = Phone;	\N	f	0	5	2014-04-01 19:30:54	2014-04-01 19:30:54	61	phone-number.js
127	3	e8a7a08a308e840d9bc8fcfd	superseded	javascript	phone-number	'use strict';\n\nfunction Phone (number) {\n  this.areaCode_ = "000";\n  this.exchange_ = "000";\n  this.lineNumber_ = "0000";\n  this.validate(number);\n}  \n\nPhone.prototype.validate = function(number) {\n  var cleanNumber = number.replace(/[\\D]/g,'');\n\n  if (cleanNumber.length > 12) return;\n  if (cleanNumber.length < 10) return;\n\n  if (cleanNumber.length === 11) {\n  \tif (cleanNumber[0] != '1') return;\n\n  \tcleanNumber = cleanNumber.substr(1);\n  }\n\n  this.areaCode_ = cleanNumber.substring(0,3);\n  this.exchange_ = cleanNumber.substring(3,6);\n  this.lineNumber_ = cleanNumber.substring(6,10);\n}\n\nPhone.prototype.number = function() {\n\treturn this.areaCode_ + this.exchange_ + this.lineNumber_;\n}\n\nPhone.prototype.areaCode = function() {\n\treturn this.areaCode_;\n}\n\nPhone.prototype.toString = function() {\n\treturn "(" + this.areaCode_ + ") " + this.exchange_ + "-" + this.lineNumber_;\n}\nmodule.exports = Phone;	\N	f	0	1	2014-04-16 08:05:19	2014-04-16 08:05:19	61	phone-number.js
129	3	cfabe346a85069bd541181c7	done	javascript	grains	"use strict";\n\nfunction Grains() {\n  this.square = function(current) {\n    return Math.pow(2, current - 1);\n  };\n\n  this.total = function() {\n    return this.square(65);\n  };\n};\n\nmodule.exports = Grains;	\N	f	1	1	2014-03-13 10:00:20	2014-03-13 10:00:20	62	grains.js
130	3	0edb3c421db29dbf93b40136	done	javascript	rna-transcription	"use strict";\n\nvar DNA = function (sequence) {\n  this.sequence = sequence;\n};\n\nDNA.prototype.toRNA = function () {\n  return this.sequence.replace(/T/g, "U");\n};\n\nmodule.exports = DNA;	\N	f	0	1	2014-03-04 19:12:55	2014-03-04 19:12:55	63	rna-transcription.js
131	3	bf7492ad3e31e9e949e9d408	pending	javascript	prime-factors	var primeFactors = (function() {\n\treturn {\n\t\tfor: function(number) {\n\t\t\tvar prime_numbers = [];\n\n\t\t\tfor (var i = 2; i <= number; i++) {\n\t\t\t\twhile (number % i === 0) {\n\t\t\t\t\tprime_numbers.push(i);\n\t\t\t\t\tnumber /= i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn prime_numbers;\n\t\t}\n\t};\n})();\n\nmodule.exports = primeFactors;	\N	f	0	1	2014-02-08 09:14:52	2014-02-08 09:14:52	64	prime-factors.js
132	3	2ae55cef1daf392382545bda	superseded	javascript	anagram	var rootLetters,\n    rootWord;\n\nfunction testWord(word) {\n    word = word.toLowerCase();\n    var letters = word.split("");\n    letters.sort();\n    return(rootWord != word \n        && rootLetters.length == letters.length\n        && rootLetters.every(function(u, i) {\n            return u === letters[i];\n    }));\n};\n\nvar anagram = function(word) {\n    rootWord = word.toLowerCase();\n    rootLetters = rootWord.split("");\n    rootLetters.sort();\n};\n\nanagram.prototype.match = function(words) {\n    var returnArray = [];\n    words.forEach(function(word) {\n        if (testWord(word)) returnArray.push(word);\n    });\n    return returnArray;\n};\n\nmodule.exports = anagram;	\N	f	1	1	2014-02-14 19:17:48	2014-02-14 19:17:48	65	anagram.js
133	3	7bf2a9ee714b33ecc9bbefca	superseded	javascript	anagram	function testWord(word) {\n    word = word.toLowerCase();\n    var letters = word.split("").sort();\n    return(rootWord != word\n        && rootLetters.length == letters.length\n        && rootLetters.every(function(u, i) {\n            return u === letters[i];\n    }));\n};\n\nvar anagram = function(word) {\n    rootWord = word.toLowerCase();\n    rootLetters = rootWord.split("").sort();\n};\n\nanagram.prototype.match = function(words) {\n    var returnArray = [];\n    words.forEach(function(word) {\n        if (testWord(word)) returnArray.push(word);\n    });\n    return returnArray;\n};\n\nmodule.exports = anagram;	\N	f	2	2	2014-03-31 16:13:09	2014-03-31 16:13:09	65	anagram.js
134	3	fb5dd630f044da74086e4f73	done	javascript	anagram	function testWord(word) {\n    word = word.toLowerCase();\n    var letters = word.split("").sort();\n    return(rootWord != word\n        && rootLetters.length == letters.length\n        && rootLetters.every(function(u, i) {\n            return u == letters[i];\n    }));\n};\n\nvar anagram = function(word) {\n    rootWord = word.toLowerCase();\n    rootLetters = rootWord.split("").sort();\n};\n\nanagram.prototype.match = function(words) {\n    var returnArray = [];\n    words.forEach(function(word) {\n        if (testWord(word)) returnArray.push(word);\n    });\n    return returnArray;\n};\n\nmodule.exports = anagram;	\N	f	0	3	2014-04-28 16:46:21	2014-04-28 16:46:21	65	anagram.js
136	4	2be28a9dcdf56a2f3e7db6d7	superseded	haskell	bob	module Bob where\n\nimport Data.Char\n\n-- A question\t\t->\t\tSure\n-- Yell at\t\t\t->\t\tChill dude\n-- Address nothing\t->\t\tFine.\n-- Else\t\t\t\t->\t\tWhatever\n--\nresponseFor :: String -> String\nresponseFor []\t\t\t\t\t\t\t= "Fine. Be that way!"\nresponseFor s\n\t|\t(and $ map isSpace s) == True\t= "Fine. Be that way!"\n\t|\t(or $ map isAlpha s) && \n\t\t(map toUpper s) == s\t\t\t= "Woah, chill out!"\n\t| (head $ reverse s) == '?'\t\t\t= "Sure."\nresponseFor\t_\t\t\t\t\t\t\t= "Whatever."	\N	f	1	1	2013-11-13 22:02:45	2013-11-13 22:02:45	67	Bob.hs
137	4	a33d437f958282daea991c28	superseded	haskell	bob	module Bob where\n\nimport Data.Char\n\n-- A question\t\t->\t\tSure\n-- Yell at\t\t\t->\t\tChill dude\n-- Address nothing\t->\t\tFine.\n-- Else\t\t\t\t->\t\tWhatever\n--\nresponseFor :: String -> String\nresponseFor s\n\t|\t(and $ map isSpace s) == True\t= "Fine. Be that way!"\n\t|\t(or $ map isAlpha s) && \n\t\t(map toUpper s) == s\t\t\t= "Woah, chill out!"\n\t| (head $ reverse s) == '?'\t\t\t= "Sure."\nresponseFor\t_\t\t\t\t\t\t\t= "Whatever."	\N	f	1	2	2013-11-20 11:29:13	2013-11-20 11:29:13	67	Bob.hs
138	4	fbcf05800ab8a1d4a852308a	done	haskell	bob	module Bob where\n\nimport Data.Char\n\n-- A question\t\t->\t\tSure\n-- Yell at\t\t\t->\t\tChill dude\n-- Nothing\t\t\t->\t\tFine.\n-- Else\t\t\t\t->\t\tWhatever\n--\nresponseFor :: String -> String\nresponseFor s\n\t| (all isSpace s)\t\t= "Fine. Be that way!"\n\t| (any isAlpha s) && \n\t  (map toUpper s) == s\t= "Woah, chill out!"\n\t| (last s) == '?'\t\t= "Sure."\n\t| otherwise\t\t\t\t= "Whatever."	\N	f	1	3	2013-11-25 11:07:09	2013-11-25 11:07:09	67	Bob.hs
236	19	3465be7ddf6ca2661b369956	done	haskell	leap	module LeapYear (isLeapYear) where\nimport Data.Traversable (sequenceA)\n\nisLeapYear :: Int -> Bool\nisLeapYear = odd . length . takeWhile id . sequenceA preds\n  where preds = map (\\a b -> mod b a == 0) [4, 100, 400]	\N	f	2	1	2014-03-13 23:53:22	2014-03-13 23:53:22	116	leap.hs
140	4	fce3f5ea5e32949f79b4a804	done	haskell	word-count	module WordCount ( wordCount ) where\n\nimport Data.Char (isPunctuation, isSymbol, toLower)\nimport Data.Map (fromListWith, Map)\n\nwordCount :: String -> Map String Integer\nwordCount = fromListWith (+) . flip zip [1, 1..] . words . map toLower\n            . filter (not . isPunctuation')\n  where\n    isPunctuation' c = isPunctuation c || isSymbol c	\N	f	0	2	2014-01-22 21:13:17	2014-01-22 21:13:17	68	word-count.hs
141	4	0e9e1d5be5bb6d33241d522a	superseded	haskell	rna-transcription	module DNA (toRNA) where\r\n\r\ntoRNA :: String -> String\r\ntoRNA = map transcribe\r\n  where\r\n    transcribe 'T' = 'U'\r\n    transcribe  x  =  x\r	\N	f	0	1	2013-11-11 22:36:14	2013-11-11 22:36:14	69	DNA.hs
142	4	254697ae9d1f0b08ea56c848	done	haskell	rna-transcription	module DNA (toRNA) where\r\n\r\ntoRNA :: String -> String\r\ntoRNA = map transcribe\r\n  where\r\n    transcribe 'C' = 'G'\r\n    transcribe 'G' = 'C'\r\n    transcribe 'A' = 'U'\r\n    transcribe 'T' = 'A'\r	\N	f	0	2	2013-12-28 08:33:15	2013-12-28 08:33:15	69	DNA.hs
144	4	f9f0b16ab43f17cc5f684478	done	haskell	allergies	module Allergies (Allergen(..), isAllergicTo, allergies) where\n\nimport Data.Bits (testBit)\n\ndata Allergen = Eggs\n              | Peanuts\n              | Shellfish\n              | Strawberries\n              | Tomatoes\n              | Chocolate\n              | Pollen\n              | Cats\n              deriving (Show,Enum,Eq)\n\nisAllergicTo :: Allergen -> Integer -> Bool\nisAllergicTo = flip testBit . fromEnum\n\nallergies :: Integer -> [Allergen]\nallergies score = filter (`isAllergicTo` score) [Eggs ..]	\N	f	0	2	2013-11-02 15:43:24	2013-11-02 15:43:24	71	Allergies.hs
145	4	f3d9f28312069a0ca8b1111d	superseded	haskell	allergies	module Allergies (Allergen(..), isAllergicTo, allergies) where\n\nimport Data.Bits\n\ndata Allergen = Eggs\n              | Peanuts\n              | Shellfish\n              | Strawberries\n              | Tomatoes\n              | Chocolate\n              | Pollen\n              | Cats\n              deriving (Show,Enum,Eq)\n\nisAllergicTo :: Allergen -> Integer -> Bool\nisAllergicTo = flip testBit . fromEnum\n\nallergies :: Integer -> [Allergen]\nallergies score = filter (`isAllergicTo` score) [Eggs ..]	\N	f	0	1	2013-12-07 16:37:48	2013-12-07 16:37:48	71	Allergies.hs
147	4	83c8a5e91dd195a8381f8466	done	haskell	triangle	module Triangle\n  ( TriangleType(..)\n  , triangleType\n  ) where\n\ndata TriangleType = Equilateral | Isosceles | Scalene | Illogical\n  deriving (Show, Eq)\n\ntriangleType :: Int -> Int -> Int -> TriangleType\ntriangleType a b c\n  | 3 > countSides trangleEquation a b c = Illogical\n  | 3 == sideEqualities                  = Equilateral\n  | 1 == sideEqualities                  = Isosceles\n  | otherwise                            = Scalene\n  where sideEqualities = countSides (const (==)) a b c\n\ntrangleEquation :: Int -> Int -> Int -> Bool\ntrangleEquation a b c = a + b > c\n\ncountSides :: (Int -> Int -> Int -> Bool) -> Int -> Int -> Int -> Int\ncountSides f a b c = length $ filter id $ zipWith3 f [a, b, c] [b, c, a] [c, a, b]	\N	f	0	2	2013-11-14 00:27:34	2013-11-14 00:27:34	73	triangle.hs
148	4	d04b9ca000c54717e0f2034a	superseded	haskell	triangle	module Triangle\n  ( TriangleType(..)\n  , triangleType\n  ) where\n\nimport Control.Applicative\n\ndata TriangleType = Equilateral | Isosceles | Scalene | Illogical\n  deriving (Show, Eq)\n\ntriangleType :: Int -> Int -> Int -> TriangleType\ntriangleType a b c\n  | 3 > countSides trangleEquation a b c = Illogical\n  | 3 == countSides (const (==)) a b c   = Equilateral\n  | 1 == countSides (const (==)) a b c   = Isosceles\n  | otherwise                            = Scalene\n\ntrangleEquation :: Int -> Int -> Int -> Bool\ntrangleEquation a b c = a + b > c\n\ncountSides :: (Int -> Int -> Int -> Bool) -> Int -> Int -> Int -> Int\ncountSides f a b c = length $ filter (uncurry3 f) [(a, b, c), (b, c, a), (c, a, b)]\n\nuncurry3 :: (a -> b -> c -> d) -> (a, b, c) -> d\nuncurry3 f (a,b,c) = f a b c	\N	f	0	1	2013-11-17 08:43:54	2013-11-17 08:43:54	73	triangle.hs
149	4	0e8ab4f63a31be666652dd1c	superseded	haskell	prime-factors	module PrimeFactors (primeFactors) where\r\n\r\nprimeFactors :: Integer -> [Integer]\r\nprimeFactors n = reverse $ factors n divisors []\r\n  where\r\n    divisors = 2:3:[ f x | x <- [6,12..], f <- [succ, pred]]\r\n\r\nfactors :: Integer -> [Integer] -> [Integer] -> [Integer]\r\nfactors 1 _ acc = acc\r\nfactors n ls@(k:ks) acc =  if n `mod` k == 0\r\n                                then factors (n `div` k) ls    (k:acc)\r\n                                else factors  n          ks       acc	\N	f	0	3	2013-12-27 03:57:44	2013-12-27 03:57:44	74	PrimeFactors.hs
151	4	9caa620ae4976463f353451a	superseded	haskell	prime-factors	module PrimeFactors (primeFactors) where\r\n\r\nprimeFactors :: Integer -> [Integer]\r\nprimeFactors n = reverse $ factors n 2 []\r\n\r\nfactors :: Integer -> Integer -> [Integer] -> [Integer]\r\nfactors 1 _ acc = acc\r\nfactors n k acc = if n `mod` k == 0\r\n                    then factors (n `div` k) k    (k:acc)\r\n                    else factors  n         (k+1)    acc	\N	f	0	1	2014-02-19 19:46:25	2014-02-19 19:46:25	74	PrimeFactors.hs
152	4	f0faa82c756f98cde648ee1c	superseded	haskell	prime-factors	module PrimeFactors (primeFactors) where\r\n\r\nprimeFactors :: Integer -> [Integer]\r\nprimeFactors n = reverse $ factors n 2 []\r\n\r\nfactors :: Integer -> Integer -> [Integer] -> [Integer]\r\nfactors 1 _ acc = acc\r\nfactors n 2 acc = if n `mod` 2 == 0\r\n                    then factors (n `div` 2) 2    (2:acc)\r\n                    else factors  n          3       acc\r\nfactors n k acc = if n `mod` k == 0\r\n                    then factors (n `div` k) k    (k:acc)\r\n                    else factors  n         (k+2)    acc	\N	f	1	2	2014-02-24 12:01:40	2014-02-24 12:01:40	74	PrimeFactors.hs
153	21	2a56bc29f34fc8079ae7afaf	superseded	clojure	word-count	(ns phrase\n  (:require [clojure.string :as string]))\n\n(defn word-count [words]\n  (frequencies (re-seq #"\\w+" (string/lower-case words))))	\N	f	1	1	2014-02-17 17:57:32	2014-02-17 17:57:32	75	word-count.clj
154	21	4d733b27b44632a0ca0f1d97	done	clojure	word-count	(ns phrase\n  (:require [clojure.string :as string]))\n\n(defn word-count [words]\n  (->> (string/lower-case words)\n       (re-seq #"\\w+")\n       (frequencies)))	\N	f	3	2	2014-04-02 08:27:04	2014-04-02 08:27:04	75	word-count.clj
155	21	8ca7001b03c10900766e2bf7	pending	go	nucleotide-count	package dna\n\nimport "fmt"\n\ntype DNA struct {\n\tstrand string\n}\n\ntype Histogram map[string]int\n\ntype dnaCountError struct {\n\tbadNucleotide string\n}\n\nfunc (e dnaCountError) Error() string {\n\treturn fmt.Sprintf("%s isn't a valid nucleotide", e.badNucleotide)\n}\n\nfunc (dna *DNA) Counts() Histogram {\n\th := Histogram{"A": 0, "C": 0, "T": 0, "G": 0}\n\tfor _, n := range dna.strand {\n\t\th[string(n)]++\n\t}\n\treturn h\n}\n\nfunc (dna *DNA) Count(nucleotide string) (int, error) {\n\tif count, ok := dna.Counts()[nucleotide]; ok {\n\t\treturn count, nil\n\t} else if nucleotide == "U" {\n\t\treturn 0, nil\n\t} else {\n\t\treturn 0, dnaCountError{nucleotide}\n\t}\n}	\N	f	3	1	2013-10-11 07:34:30	2013-10-11 07:34:30	76	dna.go
156	21	9d068b3376381477d778f61a	superseded	objective-c	hamming	#import "Hamming.h"\n\n@implementation Hamming\n\n+ (NSUInteger)compute:(NSString *)original against:(NSString *)mutation\n{\n    NSUInteger hammingDistance = 0;\n    NSUInteger length = [original length] < [mutation length]\n        ? [original length]\n        : [mutation length];\n\n    for (int i = 0; i < length; i++)\n    {\n        char originalChar = [original characterAtIndex:i];\n        char mutationChar = [mutation characterAtIndex:i];\n        if (originalChar != mutationChar)\n        {\n            hammingDistance++;\n        }\n    }\n\n    return hammingDistance;\n}\n\n@end	\N	f	0	1	2013-09-28 07:28:38	2013-09-28 07:28:38	77	Hamming.m
157	21	6204ea7a511cdb643145bba5	pending	objective-c	hamming	#import "Hamming.h"\n\n@implementation Hamming\n\n+ (NSUInteger)compute:(NSString *)original against:(NSString *)mutation\n{\n    NSUInteger hammingDistance = 0;\n    NSUInteger length = MIN(original.length, mutation.length);\n\n    for (int i = 0; i < length; i++)\n    {\n        char originalChar = [original characterAtIndex:i];\n        char mutationChar = [mutation characterAtIndex:i];\n        if (originalChar != mutationChar)\n        {\n            hammingDistance++;\n        }\n    }\n\n    return hammingDistance;\n}\n\n@end	\N	f	3	2	2013-12-02 03:51:57	2013-12-02 03:51:57	77	Hamming.m
158	21	c0458de13be434ec30bf26bb	done	ruby	point-mutations	class DNA\n\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(other_strand)\n    limit = @strand.size < other_strand.size ? @strand.size : other_strand.size\n\n    splitted_original = split(@strand, limit)\n    splitted_other = split(other_strand, limit)\n\n    splitted_original.zip(splitted_other).inject(0) { |h, e| e[0]==e[1] ? h+0 : h+1 }\n  end\n\n  def split(strand, limit)\n    strand.split(//)[0..(limit-1)]\n  end\n\n  def call(strand)\n    @strand = strand\n\n    self\n  end\nend	\N	f	3	1	2014-02-24 19:20:07	2014-02-24 19:20:07	78	point-mutations.rb
159	21	a3b68138f85afcb2318e4c99	done	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @words = phrase.downcase.scan /\\w+/\n  end\n\n  def word_count\n    @words.reduce(Hash.new(0)) do |counts, word|\n      counts[word] += 1\n      counts\n    end\n  end\nend	\N	f	0	2	2013-12-11 09:00:02	2013-12-11 09:00:02	79	word-count.rb
160	21	43bee826781f13fcfe03e728	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @words = phrase.gsub(/\\W/, ' ').downcase.split\n  end\n\n  def word_count\n    @words.reduce(Hash.new(0)) do |counts, word|\n      counts[word] += 1\n      counts\n    end\n  end\nend	\N	f	4	1	2013-12-30 13:19:22	2013-12-30 13:19:22	79	word-count.rb
161	21	4ef2267e0255239f2f2cd4d8	done	javascript	grains	function square(n) {\n  return Math.pow(2, n-1);\n}\n\nfunction total() {\n  var sum = 0;\n  for (var i = 1; i <= 64; i++) sum += square(i);\n  return sum;\n}\n\nfunction Grains() {}\nGrains.prototype.square = square;\nGrains.prototype.total = total;\n\nmodule.exports = Grains;	\N	f	3	1	2014-01-02 17:21:13	2014-01-02 17:21:13	80	grains.js
162	21	07b588f98e3893041a9d52a6	superseded	ruby	robot-name	module RandomName\n  def self.next\n    chars.join\n  end\n\n  private\n\n  def self.chars\n    of(['A','Z']).take(2) + of(0..9).take(3)\n  end\n\n  def self.of(options)\n    return to_enum(:of, options) unless block_given?\n    loop { yield options.to_a.sample }\n  end\nend\n\nclass Robot\n  def initialize\n    reset\n  end\n\n  def reset\n    @name = RandomName.next\n  end\n\n  attr_reader :name\nend	\N	f	3	2	2013-10-01 18:23:19	2013-10-01 18:23:19	81	robot-name.rb
163	21	07dee8031e0ed581fac202e2	done	ruby	robot-name	class Robot\n  def initialize\n    reset\n  end\n\n  def reset\n    @name = RandomName.next\n  end\n\n  attr_reader :name\nend\n\nclass RandomName\n  def self.next\n    @name_creator ||= new\n    @name_creator.next\n  end\n\n  def next\n    chars.join\n  end\n\n  private\n\n  def chars\n    sample('A'..'Z', take: 2) +\n      sample('0'..'9', take: 3)\n  end\n\n  def sample(choices, take: 1)\n    choices.to_a.sample(take)\n  end\nend	\N	f	0	3	2013-10-20 19:43:07	2013-10-20 19:43:07	81	robot-name.rb
164	21	a7756b4628b8d0dbfa6969e2	superseded	ruby	robot-name	class RandomName\n  def to_s\n    random_letter + random_letter + padded_number_below_1000\n  end\n\n  private\n\n  def random_letter\n    format '%c', Random.rand(26) + 'A'.ord\n  end\n\n  def padded_number_below_1000\n    format '%03d', Random.rand(1000)\n  end\nend\n\nclass Robot\n  def initialize\n    reset\n  end\n\n  def reset\n    @name = RandomName.new.to_s\n  end\n\n  attr_reader :name\nend	\N	f	3	1	2013-12-18 22:14:26	2013-12-18 22:14:26	81	robot-name.rb
166	21	ba89c1821b80008fe72c6983	done	python	rna-transcription	'''\nDNA-RNA Translator\n'''\n\nclass DNA(object):\n    '''\n    DNA Module\n    '''\n    ACID_TABLE = {'G': 'C', 'C': 'G', 'T': 'A', 'A': 'U'}\n    def __init__(self, nucleotides):\n        self.nucleotides = nucleotides\n\n    def to_rna(self):\n        '''\n        Translates DNA to RNA using a quick lookup table.\n        '''\n        return ''.join(map(lambda acid: self.ACID_TABLE[acid], self.nucleotides))	\N	f	5	3	2014-03-13 04:28:17	2014-03-13 04:28:17	82	dna.py
167	21	15fc5ccbdebb288fe3842362	superseded	python	rna-transcription	'''\nDNA-RNA Translator\n'''\n\nclass DNA(object):\n    '''\n    DNA Module\n    '''\n    def __init__(self, nucleotides=None):\n        self.nucleotides = nucleotides\n\n    def to_rna(self):\n        '''\n        Translate DNA to RNA\n        '''\n        translated_nucleotides = ''\n        for nucleotide in self.nucleotides:\n            if nucleotide is 'T':\n                nucleotide = 'U'\n            translated_nucleotides += nucleotide\n        return  translated_nucleotides	\N	f	0	1	2014-03-18 21:09:20	2014-03-18 21:09:20	82	rna-transcription.py
168	21	22c98f6d31d56f60b574e9b2	done	clojure	anagram	(ns anagram (:require [clojure.string :as s]))\n\n(def alphagram (comp sort s/lower-case))\n\n;; partially apply alphagram-match? to original word to avoid \n;; re-evaluation on every iteration\n(defn anagrams-for [word candidates]\n  (let [not-same? (partial not= word)\n        alphagram-match? (partial = (alphagram word))\n        anagram? #(alphagram-match? (alphagram %))]\n    (filter (every-pred not-same? anagram?) candidates)))	\N	f	3	2	2013-11-05 06:48:56	2013-11-05 06:48:56	83	anagram.clj
169	21	c8ececa39fe30dab168e34cf	superseded	clojure	anagram	(ns anagram (:require [clojure.string :as s]))\n\n(defn is-anagram? [word candidate] \n  (let [normalize (fn [w] (sort (s/lower-case w)))]\n  (and \n    (not (= word candidate))\n    (= (normalize word) (normalize candidate)))))\n\n(defn anagrams-for [word candidates]\n  (filter (partial is-anagram? word) candidates))	\N	f	2	1	2014-01-21 00:07:14	2014-01-21 00:07:14	83	anagram.clj
170	21	7a403b0755daf82b2f76789f	pending	ruby	hamming	class Hamming\n  def self.compute(strand, other_strand)\n    return 0 if uneven_strands?(strand, other_strand)\n\n    if single_nucleotide_strands?(strand, other_strand)\n      return strand == other_strand ? 0 : 1\n    else\n      return compute(strand.slice!(1), other_strand.slice!(1)) +\n        compute(strand, other_strand)\n    end\n  end\n\n  private\n\n  # Returns true if not both strands have data\n  def self.uneven_strands?(strand, other_strand)\n    strand.nil? || other_strand.nil?\n  end\n\n  def self.single_nucleotide_strands?(strand, other_strand)\n    strand.size == 1 && other_strand.size == 1\n  end\nend	\N	f	4	1	2013-12-01 18:53:34	2013-12-01 18:53:34	84	hamming.rb
171	21	2da5e3eb5abe71c2a191ee0b	superseded	clojure	bob	(ns bob)\n\n(defn question? [s]\n  (false? (nil? (re-find #"\\?$" s)))\n  )\n\n(defn all-caps? [s]\n  (and\n       (nil? (re-find #"[a-z]" s))\n       (false? (nil? (re-find #"[A-Z]" s))\n)))\n\n\n\n(defn response-for [s]\n  (cond\n      (question? s) "Sure."\n      (all-caps? s) "Woah, chill out!"\n      (clojure.string/blank? s) "Fine. Be that way!"\n      :else "Whatever."\n   )\n  )	\N	f	3	2	2014-01-14 10:55:37	2014-01-14 10:55:37	85	bob.clj
172	21	bb753beb56db6d7d5f3d5c78	superseded	clojure	bob	(ns bob)\n\n(defn question? [s]\n  (false? (nil? (re-find #"\\?$" s)))\n  )\n\n(defn all-caps? [s]\n  (and\n       (nil? (re-find #"[a-z]" s))\n       (false? (nil? (re-find #"[A-Z]" s))\n)))\n\n(defn response-for [s]\n  (cond\n      (question? s) "Sure."\n      (all-caps? s) "Whoah, chill out!"\n      (nil? s) "Fine. Be that way!"\n      :else "Whatever."\n   )\n  )	\N	f	3	1	2014-03-18 23:03:48	2014-03-18 23:03:48	85	bob.clj
173	21	5a38011ba226e4e24e40d66f	done	clojure	bob	(ns bob)\n\n(defn question? [s]\n  (false? (nil? (re-find #"\\?$" s)))\n  )\n\n(defn all-caps? [s]\n  (and\n       (nil? (re-find #"[a-z]" s))\n       (false? (nil? (re-find #"[A-Z]" s))\n)))\n\n\n\n(defn response-for [s]\n  (cond\n      (all-caps? s) "Woah, chill out!"\n      (question? s) "Sure."\n      (clojure.string/blank? s) "Fine. Be that way!"\n      :else "Whatever."\n   )\n  )	\N	f	3	3	2014-04-23 12:31:57	2014-04-23 12:31:57	85	bob.clj
174	21	9946e3f5c158dc4fed54bb9b	hibernating	ruby	leap	class Year\n  attr_reader :year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    (self.year % 4 == 0 && self.year % 100 != 0) || self.year % 400 == 0\n  end\nend	\N	f	3	1	2013-11-12 06:24:53	2013-11-12 06:24:53	86	year.rb
176	21	d987071c27f9737b434e3dbf	done	python	phone-number	class Phone(object):\n    blocks = ['area_code', 'exchange', 'line']\n    pretty_format = '({area_code}) {exchange}-{line}'\n\n    def __init__(self, user_number):\n        clean_number = raw_number = filter(lambda c: c.isdigit(), user_number)\n\n        if len(raw_number) == 11 and raw_number[0] == '1':\n            clean_number = raw_number[1:]\n        elif len(raw_number) != 10:\n            clean_number = '0000000000'  # TODO: better to raise error here?\n\n        self.number = clean_number\n\n    def area_code(self):\n        """Get area code (first three digits)"""\n        return self.number[:3]\n\n    def exchange(self):\n        """Get exchange (first three digits after area code)"""\n        return self.number[3:6]\n\n    def line(self):\n        """Get line number (last four digits)"""\n        return self.number[6:]\n\n    def pretty(self):\n        """Output number in pretty format: (XXX) XXX-XXXX"""\n        format_kwargs = {}\n\n        for block in self.blocks:\n            format_kwargs[block] = getattr(self, block)()\n\n        return self.pretty_format.format(**format_kwargs)	\N	f	0	2	2013-12-14 00:21:45	2013-12-14 00:21:45	87	phone-number.py
178	21	2aad05e9cd6f8b1b5b4fbd83	superseded	haskell	word-count	module WordCount\n    ( wordCount\n    ) where\n\nimport           Data.Char\nimport           Data.List\nimport qualified Data.Map  as M\n\ntype WordDict = M.Map String Int\n\nwordCount :: String -> WordDict\nwordCount input =\n    foldl' doCount M.empty (words . normalize $ input)\n  where\n    doCount :: WordDict -> String -> WordDict\n    doCount dict word = M.insertWith (+) word 1 dict\n\n    normalize :: String -> String\n    normalize = filter isValid . map clean\n\n    clean :: Char -> Char\n    clean c\n        | isSymbol      c = ' '\n        | isPunctuation c = ' '\n        | otherwise       = toLower c\n\n    allowed :: [Char -> Bool]\n    allowed = [isAlphaNum, isSpace]\n\n    isValid :: Char -> Bool\n    isValid c = any ($ c) allowed	\N	f	1	1	2013-12-16 04:42:47	2013-12-16 04:42:47	89	word-count.hs
179	21	90cf1b3e4a77314bdee1390f	done	haskell	word-count	module WordCount\n    ( wordCount\n    ) where\n\nimport           Data.Char\nimport           Data.List\nimport qualified Data.Map  as M\n\ntype WordDict = M.Map String Int\n\nwordCount :: String -> WordDict\nwordCount input =\n    foldl' doCount M.empty (words . normalize $ input)\n  where\n    doCount :: WordDict -> String -> WordDict\n    doCount dict word = M.insertWith' (+) word 1 dict\n\n    normalize :: String -> String\n    normalize = filter isValid . map clean\n\n    clean :: Char -> Char\n    clean c\n        | isSymbol      c = ' '\n        | isPunctuation c = ' '\n        | otherwise       = toLower c\n\n    allowed :: [Char -> Bool]\n    allowed = [isAlphaNum, isSpace]\n\n    isValid :: Char -> Bool\n    isValid c = any ($ c) allowed	\N	f	1	2	2014-01-23 19:04:45	2014-01-23 19:04:45	89	word-count.hs
180	21	bf36b49535a08ab585cb5765	done	ruby	crypto-square	class Crypto\n\n  def initialize plain_text\n    @plain_text = plain_text\n  end\n\n  def normalize_plaintext\n    @plain_text.downcase.gsub(/[^0-9a-z]/, '')\n  end\n\n  def plaintext_segments\n    chunk(normalize_plaintext, size)\n  end\n\n  def ciphertext\n    plaintext_segments.map do |segment|\n      segment.chars.fill '', segment.size...size\n    end.transpose.flatten.join\n  end\n\n  def normalize_ciphertext\n    chunk(ciphertext, 5).join ' '\n  end\n\n  def size\n    Math.sqrt(normalize_plaintext.size).ceil\n  end\n\n  private\n\n  def chunk s, size\n    s.scan(/.{1,#{size}}/)\n  end\nend	\N	f	3	1	2013-10-05 03:16:30	2013-10-05 03:16:30	90	crypto-square.rb
181	21	b7332c43acf00e700b8a384b	superseded	javascript	etl	var complete = {};\nvar transform = function (old) {\n  var oldKeys = Object.keys(old);\n  var a = [];\n  for (key in old) {\n    a.push(old[key]);\n  }\n  var oldValues = a.toString().toLowerCase();\n    complete[oldValues] = Number(oldKeys[0]);\n  return complete;\n};\n\n/*\nvar old = {1:["A", "B"]};\n\nvar transform = function (old) {\n  var keys = Object.keys(old).toString();\n  var a = [];\n  for (key in old){\n    a.push(old[key]);\n  }\n  var values = a.toString();\n  console.log(keys);\n  console.log(values);\n};\n\ntransform(old);\n*/	\N	f	3	1	2013-10-23 17:14:15	2013-10-23 17:14:15	91	etl_test.js
182	21	7a09617617168102f43ea8fa	pending	javascript	etl	var transform = function(vals) {\n  var ret = {};\n\n  for ( var key in vals ) {\n    vals[key].forEach(function(el) {\n      ret[ el.toLowerCase() ] = parseInt(key);\n    });\n  }\n\n  return ret;\n};\n\n\n/*\nvar old = {1:["A", "B"]};\n\nvar transform = function (old) {\n  var keys = Object.keys(old).toString();\n  var a = [];\n  for (key in old){\n    a.push(old[key]);\n  }\n  var values = a.toString();\n  console.log(keys);\n  console.log(values);\n};\n\ntransform(old);\n*/	\N	f	3	2	2013-11-27 10:59:50	2013-11-27 10:59:50	91	etl_test.js
183	21	0dbbc80e94fc9d98037dc255	superseded	go	leap	package leap\n\nfunc IsLeapYear(y int) bool {\n\tvar r bool\n\tif (y % 4 == 0) {\n\t\tr = true\n\t\tif (y % 100 == 0) {\n\t\t\tr = false\n\t\t\tif (y % 400 == 0) {\n\t\t\t\tr = true\n\t\t\t}\n\t\t}\n\t}\n\treturn r\n}	\N	f	3	1	2013-11-24 20:03:22	2013-11-24 20:03:22	92	leap.go
184	21	7ca72f10d68740ec5084061d	done	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\tswitch {\n\tcase year%400 == 0:\n\t\treturn true\n\tcase year%100 == 0:\n\t\treturn false\n\tcase year%4 == 0:\n\t\treturn true\n\tdefault:\n\t\treturn false\n\t}\n}	\N	f	1	2	2013-12-01 23:59:56	2013-12-01 23:59:56	92	leap.go
185	21	b1baa59f9c6273969dd0c696	superseded	ruby	scrabble-score	class Scrabble\n\n  SCORES = {'a' => 1, 'e' => 1, 'i' => 1, 'o' => 1, 'u' => 1, 'l' => 1, 'n' => 1, 'r' => 1, 's' => 1, 't' => 1, \n            'd' => 2, 'g' => 2,\n            'b' => 3, 'c' => 3, 'm' => 3, 'p' => 3, \n            'f' => 4, 'h' => 4, 'v' => 4, 'w' => 4, 'y' => 4, \n            'k' => 5, \n            'j' => 8, 'x' => 8, \n            'q' => 10, 'z' => 10\n  }\n\n  def initialize (word)\n    @word = word\n  end\n\n  def self.score (word)\n    score = 0\n    if (word && word.strip.length > 0)\n      word.split(//).each { |letter| score += SCORES[letter.downcase] }\n    end\n    return score\n  end\n\n  def score\n    self.class.score(@word)\n  end\n\nend	\N	f	3	1	2013-10-13 21:02:39	2013-10-13 21:02:39	93	scrabble.rb
186	21	9193b404b3634495bf1eb936	pending	ruby	scrabble-score	class Scrabble\n\n  SCORES = {'a' => 1, 'e' => 1, 'i' => 1, 'o' => 1, 'u' => 1, 'l' => 1, 'n' => 1, 'r' => 1, 's' => 1, 't' => 1,\n            'd' => 2, 'g' => 2,\n            'b' => 3, 'c' => 3, 'm' => 3, 'p' => 3,\n            'f' => 4, 'h' => 4, 'v' => 4, 'w' => 4, 'y' => 4,\n            'k' => 5,\n            'j' => 8, 'x' => 8,\n            'q' => 10, 'z' => 10\n  }\n\n  def initialize (word)\n    @word = word.strip if word\n  end\n\n  def self.score (word)\n    score = 0\n    if (word && word.length > 0)\n      letter_scores = word.split('').map { |letter| SCORES[letter.downcase]}\n      score = letter_scores.inject { |total, letter_score| total + letter_score }\n    end\n    score\n  end\n\n  def score\n    self.class.score(@word)\n  end\n\nend	\N	f	3	2	2013-11-06 18:17:45	2013-11-06 18:17:45	93	scrabble.rb
187	26	eedc637b6c98f671ed0ceeb8	pending	ruby	hamming	class Hamming\n  def self.compute(one, other)\n    strings_as_chars = [one, other].map { |string| string.chars.to_a }\n    min_length = strings_as_chars.map(&:length).min\n    stripped_chars = strings_as_chars.map { |chars| chars.first(min_length) }\n    char_pairs = stripped_chars.transpose\n    char_pairs.map { |one_char, other_char| one_char == other_char }.count(false)\n  end\nend	\N	f	0	1	2014-05-25 19:54:51	2014-05-25 19:54:51	94	hamming.rb
189	26	93079abbb3e9a819b9aad039	superseded	haskell	allergies	module Allergies (Allergen(..), isAllergicTo, allergies) where\n\nimport Data.Bits\n\ndata Allergen = Eggs | Peanuts | Shellfish | Strawberries | Tomatoes | Chocolate | Pollen | Cats\n                deriving (Show, Eq, Enum, Bounded)\n\nallergies :: Int -> [Allergen]\nallergies i = filter (flip isAllergicTo i) $ enumFrom (minBound :: Allergen)\n\nisAllergicTo :: Allergen -> Int -> Bool\nisAllergicTo a i = testBit i (fromEnum a)	\N	f	1	2	2014-05-15 08:17:52	2014-05-15 08:17:52	95	allergies.hs
190	26	47335677a876e1662eada6d9	done	haskell	allergies	module Allergies (Allergen(..), isAllergicTo, allergies) where\n\nimport Data.Bits\n\ndata Allergen = Eggs | Peanuts | Shellfish | Strawberries | Tomatoes | Chocolate | Pollen | Cats\n                deriving (Show, Eq, Enum, Bounded)\n\nallergies :: Int -> [Allergen]\nallergies i = filter (`isAllergicTo` i) [minBound..]\n\nisAllergicTo :: Allergen -> Int -> Bool\nisAllergicTo a i = testBit i (fromEnum a)	\N	f	5	3	2014-05-20 20:16:12	2014-05-20 20:16:12	95	allergies.hs
191	26	b9ff2cea9426082d103eb587	hibernating	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    leap_year? and not_exceptional_century?\n  end\n\n  private\n  def leap_year?\n    @year % 4 == 0\n  end\n\n  def not_exceptional_century?\n    ! (@year % 100 == 0 && @year % 400 != 0)\n  end\nend	\N	f	2	2	2014-05-03 23:35:43	2014-05-03 23:35:43	96	leap.rb
192	26	a1df098d968b5b88fc0c668b	superseded	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  # Occurs every four years\n  # except when it's also evenly divisible by 100 and not 400\n  def leap?\n    @year % 4 == 0 and not_100_year_rule?\n  end\n\n  private\n  def not_100_year_rule?\n    ! (@year % 100 == 0 && @year % 400 != 0)\n  end\nend	\N	f	3	1	2014-05-09 15:33:45	2014-05-09 15:33:45	96	leap.rb
194	26	fdf1257fe4f65034208a9329	done	go	anagram	// Package anagram provides a method for comparing strings to see if they\n// have the same characters.  Differences in casing are not considered.\npackage anagram\n\nimport (\n\t"strings"\n)\n\ntype runeFreqMap map[rune]int\n\n// Detect compares a reference string against a slice of candidate strings\n// and returns an array of lowercased candidates that are anagrams of the\n// reference string.\nfunc Detect(baseline string, candidates []string) (matches []string) {\n\tfor _, candidate := range candidates {\n\t\tif isAnagram(baseline, candidate) {\n\t\t\tmatches = append(matches, strings.ToLower(candidate))\n\t\t}\n\t}\n\treturn\n}\n\nfunc isAnagram(baseline string, candidate string) bool {\n\ta, b := strings.ToLower(baseline), strings.ToLower(candidate)\n\n\tif a == b {\n\t\treturn false\n\t} else {\n\t\treturn newRuneFreqMap(a).Equal(newRuneFreqMap(b))\n\t}\n}\n\nfunc newRuneFreqMap(s string) (freqs runeFreqMap) {\n\tfreqs = make(runeFreqMap)\n\n    for _, r := range(s) {\n\t\tfreqs[rune(r)]++\n\t}\n\treturn\n}\n\nfunc (a runeFreqMap) Equal(b runeFreqMap) bool {\n\tif len(a) != len(b) {\n\t\treturn false\n\t}\n\n\tfor r, _ := range a {\n\t\tif a[r] != b[r] {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}	\N	f	2	2	2014-05-16 04:31:48	2014-05-16 04:31:48	97	anagram.go
195	26	4a7c368acbd77ed81c913883	superseded	python	bob	class Bob():\n\n\tdef hey(self, salutation):\n\n\t\tif not salutation or salutation.isspace():\n\t\t\treturn "Fine. Be that way!"\n\n\t\tall_caps = salutation.isupper()\t\t\n\n\t\tif all_caps:\n\t\t\treturn "Woah, chill out!"\n\t\telif len(salutation) > 0 and salutation.endswith('?'):\n\t\t\treturn 'Sure.'\n\t\telse:\n\t\t\treturn 'Whatever.'	\N	f	7	4	2014-04-28 02:26:16	2014-04-28 02:26:16	98	bob.py
196	26	06f893b90b4e51aeb2e870d1	superseded	python	bob	class Bob():\n\n\tdef hey(self, salutation):\n\n\t\tif salutation and salutation.isspace():\n\t\t\treturn "Fine. Be that way!"\n\n\t\tall_caps = salutation.isupper()\t\t\n\n\t\tif all_caps:\n\t\t\treturn "Woah, chill out!"\n\t\telif len(salutation) > 0 and salutation[-1] == '?':\n\t\t\treturn 'Sure.'\n\t\telse:\n\t\t\treturn 'Whatever.'	\N	f	0	3	2014-04-29 21:35:02	2014-04-29 21:35:02	98	bob.py
197	26	e5cab59cd0f8f6b26f06bc07	superseded	python	bob	class Bob():\n\n\tdef hey(self, inp):\n\n\t\tif inp is None or len(inp.split()) == 0:\n\t\t\treturn "Fine. Be that way!"\n\n\t\tallCaps = True\n\t\tcontainsAlpha = False\n\n\t\tfor c in inp:\n\t\t\tif c.isalpha():\n\t\t\t\tcontainsAlpha = True\n\t\t\t\tif not c.isupper():\n\t\t\t\t\tallCaps = False\n\n\t\tif allCaps and containsAlpha:\n\t\t\treturn "Woah, chill out!"\n\t\telif len(inp) > 0 and inp[-1] == '?':\n\t\t\treturn 'Sure.'\n\t\telse:\n\t\t\treturn 'Whatever.'	\N	f	8	2	2014-05-02 18:36:40	2014-05-02 18:36:40	98	bob.py
198	26	d293898bd212c62961819231	superseded	python	bob	class Bob():\n\n\tdef hey(self, inp):\n\n\t\tif inp is None or len(inp.split()) == 0:\n\t\t\treturn "Fine. Be that way!"\n\t\tallCaps = True\n\t\tcontainsAlpha = False\n\t\tquestion = False\n\t\tfor c in inp:\n\n\t\t\tif c.isalpha():\n\t\t\t\tcontainsAlpha = True\n\t\t\t\tif not c.isupper():\n\t\t\t\t\tallCaps = False\n\n\t\tif allCaps and containsAlpha:\n\t\t\treturn "Woah, chill out!"\n\t\telif len(inp) > 0 and inp[-1] == '?':\n\t\t\treturn 'Sure.'\n\t\telse:\n\t\t\treturn 'Whatever.'	\N	f	8	1	2014-05-09 14:51:48	2014-05-09 14:51:48	98	bob.py
199	26	0f7f79be81a51ff8ac7f3455	done	python	bob	class Bob():\n\n\tdef hey(self, salutation):\n\t\tif not salutation or salutation.isspace():\n\t\t\treturn "Fine. Be that way!"\t\t\n\t\telif salutation.isupper():\n\t\t\treturn "Woah, chill out!"\n\t\telif len(salutation) > 0 and salutation.endswith('?'):\n\t\t\treturn 'Sure.'\n\t\telse:\n\t\t\treturn 'Whatever.'	\N	f	4	5	2014-05-10 19:50:34	2014-05-10 19:50:34	98	bob.py
268	24	4cedc010409b04f01bd8b934	hibernating	ruby	bob	class Bob\n  def hey(phrase)\n    phrase = sanitize(phrase)\n    case \n    when shouting?(phrase)\n      'Woah, chill out!'\n    when asking?(phrase)\n      'Sure.'\n    when phrase.length == 0\n      'Fine. Be that way!'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n\n  def asking?(phrase)\n    phrase.match(/\\?$/)\n  end\n\n  def sanitize(phrase)\n    phrase.strip.gsub(/\\n/, '')\n  end\n\n  def shouting?(phrase)\n    phrase.upcase == phrase && phrase.upcase.match(/[A-Z]/)\n  end\nend	\N	f	0	1	2014-03-12 11:23:12	2014-03-12 11:23:12	131	bob.rb
202	26	a9d9753fd9be1943b7e8de17	done	ruby	raindrops	require 'mathn'\n\nmodule Raindrops\n  class << self\n    def convert(i)\n      Raindrop.new(i).sound\n    end\n  end\nend\n\nclass Raindrop\n  def initialize(i)\n    @integer = i\n    @prime_factors = Prime.prime_division(i).flatten\n    @s ||= String.new\n  end\n\n  def sound\n    { 'Pling' => 3,\n      'Plang' => 5,\n      'Plong' => 7 }.each do |k,v|\n      convert k, v\n    end\n\n    return ( (not @s.empty?) ? @s : @integer.to_s )\n  end\n\n  def convert(d, p)\n    @s = @s.+ d if @prime_factors.include?(p)\n  end\n\n  private :convert\nend	\N	f	2	1	2014-04-27 04:39:56	2014-04-27 04:39:56	101	raindrops.rb
203	26	846f7605a95dff40f21809f1	superseded	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @word = word\n    @wc = word_count(word)\n  end\n\n  def match(words)\n    words = words.reject { |word| word.upcase == @word.upcase }\n    words = words.map { |word| word}.find_all { |word| word_count(word) == @wc }\n    words.uniq { |word| word.upcase }\n  end\n\n  def word_count(word)\n    wc = Hash.new(0)\n    word.each_char { |char| wc[char.downcase] += 1 }\n    wc\n  end\n\nend	\N	f	7	1	2014-05-11 22:31:56	2014-05-11 22:31:56	102	anagram.rb
204	26	8697c1a18d70b4e529c65ab9	superseded	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @word = word\n    @wc = word_count(word)\n  end\n\n  def match(words)\n    words.reject { |word| word.upcase == @word.upcase }\n    .find_all { |word| word_count(word) == @wc }\n  end\n\n  def word_count(word)\n    word.each_char.with_object(Hash.new(0)) { |char, wc| wc[char.downcase] += 1 }\n  end\n\nend	\N	f	4	2	2014-05-14 21:54:57	2014-05-14 21:54:57	102	anagram.rb
205	26	1f495884138c1ff6fb8afda9	hibernating	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @word = word\n    @freqs = letter_freqs(word)\n  end\n\n  def match(words)\n    words.find_all { |word| anagram?(word) }\n  end\n\n  def letter_freqs(word)\n    word.each_char.with_object(Hash.new(0)) { |char, wc| wc[char.downcase] += 1 }\n  end\n\n  def anagram?(word)\n    word.upcase != @word.upcase && letter_freqs(word) == @freqs\n  end\n\nend	\N	f	5	3	2014-05-16 07:04:47	2014-05-16 07:04:47	102	anagram.rb
206	26	72283f3c6eb1a699dcd5a12d	superseded	elixir	bob	defmodule Teenager do\n\n  def hey(sentence) do\n    cond do\n      all_caps?(sentence) -> "Woah, chill out!"\n      only_contains_whitespace?(sentence) -> "Fine. Be that way!"\n      ends_in_questionmark?(sentence) -> "Sure."\n      true -> "Whatever."\n    end\n  end\n\n  defp all_caps?(sentence) do\n    has_uppercase = Regex.match?(~r/[[:upper:]]/, sentence)\n    has_lowercase = Regex.match?(~r/[[:lower:]]/, sentence)\n    has_uppercase && !has_lowercase\n  end\n\n  defp only_contains_whitespace?(sentence) do\n    String.strip(sentence) == ""\n  end\n\n  defp ends_in_questionmark?(sentence) do\n    String.last(sentence) == "?"\n  end\n\nend	\N	f	1	1	2014-05-08 18:38:28	2014-05-08 18:38:28	103	bob.exs
208	26	9c96f9dc059f74ae00f1b2b4	superseded	ruby	prime-factors	module PrimeFactors\r\n    @@primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,91,97]\r\n\r\n    def self.for(n)\r\n        factors = []\r\n        remainder = n\r\n        prime_index = 0\r\n\r\n        while remainder >= 2\r\n            prime = least_prime_factor(remainder)\r\n            factors.push prime\r\n            remainder /= prime\r\n        end\r\n        factors\r\n    end\r\n\r\n    private\r\n\r\n    def self.factor?(n, prime)\r\n        n >= prime && n % prime == 0\r\n    end\r\n\r\n    def self.least_prime_factor(n)\r\n        return n if @@primes.include? n\r\n\r\n        greatest_candidate = Math.sqrt(n).to_i\r\n        get_primes_up_to greatest_candidate\r\n        prime = find_prime_up_to(n, greatest_candidate)\r\n        if prime.nil?\r\n            @@primes.push n\r\n            prime = n\r\n        end\r\n        prime\r\n    end\r\n\r\n    def self.find_prime_up_to(n, prime_limit)\r\n        prime_index = 0\r\n        prime = @@primes[prime_index]\r\n        while prime <= prime_limit\r\n            return prime if n % prime == 0\r\n            prime_index += 1\r\n            prime = @@primes[prime_index]\r\n        end\r\n    end\r\n\r\n    def self.get_primes_up_to(n)\r\n        candidate = @@primes.last + 2\r\n        len = @@primes.length\r\n        while candidate <= n\r\n            any_factors = false\r\n            prime_index = 0\r\n            until any_factors || prime_index == len\r\n                any_factors = factor? candidate, @@primes[prime_index]\r\n                prime_index += 1\r\n            end\r\n            @@primes.push candidate unless any_factors\r\n            candidate += 2\r\n        end\r\n    end\r\nend\r	\N	f	2	1	2014-04-30 05:53:09	2014-04-30 05:53:09	104	prime-factors.rb
269	24	3fd7a3ab0d3f3621677a2035	pending	go	word-count	package wc\n\nimport (\n\t"strings"\n\t"unicode"\n)\n\nfunc WordCount(input string) Histogram {\n\th := make(Histogram)\n\tinput = strings.ToLower(input)\n\tfor _, f := range strings.FieldsFunc(input, func(r rune) bool {\n\t\treturn unicode.In(r, unicode.Space, unicode.Symbol, unicode.Punct)\n\t}) {\n\t\th[f]++\n\t}\n\treturn h\n}	\N	f	0	3	2014-03-23 14:08:59	2014-03-23 14:08:59	132	word_count.go
210	26	00cb9a2e1f2ce7244f772a81	superseded	ruby	prime-factors	module PrimeFactors\n    @@primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,91,97]\n\n    def self.for(n)\n        factors = []\n        remainder = n\n\n        while remainder >= 2\n            prime = least_prime_factor(remainder)\n            factors.push prime\n            remainder = remainder / prime\n        end\n        factors\n    end\n\n    private\n\n    def self.factor?(n, prime)\n        n >= prime && n % prime == 0\n    end\n\n    def self.least_prime_factor(n)\n        return n if @@primes.include? n\n\n        greatest_candidate = Math.sqrt(n).to_i\n        get_primes_up_to greatest_candidate\n        prime = find_prime_up_to(n, greatest_candidate)\n        if prime.nil?\n            @@primes.push n\n            prime = n\n        end\n        prime\n    end\n\n    def self.find_prime_up_to(n, prime_limit)\n        prime_index = 0\n        prime = @@primes[prime_index]\n        while prime <= prime_limit\n            return prime if n % prime == 0\n            prime_index += 1\n            prime = @@primes[prime_index]\n        end\n    end\n\n    def self.get_primes_up_to(n)\n        candidate = @@primes.last + 2\n        len = @@primes.length\n        while candidate <= n\n            any_factors = false\n            prime_index = 0\n            until any_factors || prime_index == len\n                any_factors = factor? candidate, @@primes[prime_index]\n                prime_index += 1\n            end\n            @@primes.push candidate unless any_factors\n            candidate += 2\n        end\n    end\nend	\N	f	2	2	2014-05-06 14:02:29	2014-05-06 14:02:29	104	prime-factors.rb
211	26	9bf67277d008266f590a120f	superseded	ruby	prime-factors	class Array\n    def reduce_sorted_less_than(max, memo)\n        index = 0\n        x = self[index]\n        while x && x <= max\n            memo = yield memo, x\n            index += 1\n            x = self[index]\n        end\n        memo\n    end\nend\n\nmodule PrimeFactors\n    @@primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,91,97]\n\n    def self.for(n)\n        get_primes_up_to(root(n))\n        remainder = n\n        prime_factors = @@primes.reduce_sorted_less_than(root(n), []) do |factors, prime|\n            while factor? remainder, prime\n                remainder /= prime\n                factors.push prime\n            end\n            factors\n        end\n        prime_factors.push remainder if remainder > 1\n        prime_factors\n    end\n\n    private\n\n    def self.root(n)\n        Math.sqrt(n).to_i\n    end\n\n    def self.get_primes_up_to(n)\n        (@@primes.last + 2).step(n, 2) do |candidate|\n            @@primes.push(candidate) unless any_factors? candidate\n        end\n    end\n\n    def self.any_factors?(n)\n        @@primes.reduce_sorted_less_than(root(n), false) do |factors_exist, prime|\n                return true if factors_exist\n                factor?(n, prime)\n        end\n    end\n\n    def self.factor?(n, prime)\n        n >= prime && n % prime == 0\n    end\n\nend\n    	\N	f	2	3	2014-05-07 06:13:01	2014-05-07 06:13:01	104	prime-factors.rb
212	26	e7c61a7d9940c5471d3f4ab8	superseded	ruby	prime-factors	module PrimeFactors\r\n    def self.for(n)\r\n        remainder = n\r\n        n.times.reduce([]) do |factors, i|\r\n            possible_factor = i + 2\r\n            while possible_factor <= n && factor?(remainder, possible_factor)\r\n                remainder = remainder / possible_factor\r\n                factors.push possible_factor\r\n            end\r\n            factors\r\n        end\r\n    end\r\n\r\n    private\r\n\r\n    def self.root(n)\r\n        Math.sqrt(n).floor\r\n    end\r\n\r\n    def self.factor?(n, prime)\r\n        n >= prime && n % prime == 0\r\n    end\r\n\r\nend	\N	f	2	5	2014-05-09 19:35:17	2014-05-09 19:35:17	104	prime-factors.rb
213	26	5d1cb1dcff6d6f9530379c55	superseded	ruby	prime-factors	module PrimeFactors\r\n    def self.for(n)\r\n        remainder = n\r\n        (2..n).reduce([]) do |factors, possible_factor|\r\n            while possible_factor <= n && factor?(remainder, possible_factor)\r\n                remainder = remainder / possible_factor\r\n                factors.push possible_factor\r\n            end\r\n            factors\r\n        end\r\n    end\r\n\r\n    private\r\n    def self.factor?(n, prime)\r\n        n >= prime && n % prime == 0\r\n    end\r\n\r\nend	\N	f	2	6	2014-05-14 03:31:11	2014-05-14 03:31:11	104	prime-factors.rb
214	26	ce723f9e64adc070609f8c8d	superseded	ruby	prime-factors	module PrimeFactors\n  def self.for(n)\n    (2..n).each_with_object([]) do |possible_factor, factors|\n      if possible_factor <= n\n        power = times_prime_is_a_factor(n, possible_factor)\n        power.times { factors << possible_factor }\n        n = n / possible_factor**power\n      end\n    end\n  end\n\n  def self.factor?(n, prime)\n    n >= prime && n % prime == 0\n  end\n\n  def self.times_prime_is_a_factor(n, prime)\n    times = 0\n    loop do\n        return times unless factor?(n, prime)\n        times += 1\n        n = n / prime\n    end\n  end\nend	\N	f	2	7	2014-05-15 11:34:02	2014-05-15 11:34:02	104	prime-factors.rb
215	26	8e9bc5e2412aa8b6e593b88f	done	ruby	prime-factors	module PrimeFactors\n  def self.for(n)\n    (2..n).each_with_object([]) do |possible_factor, factors|\n      return factors if possible_factor > n\n      \n      power = times_prime_is_a_factor(n, possible_factor)\n      power.times { factors << possible_factor }\n      n = n / possible_factor**power\n    end\n  end\n\n  def self.factor?(n, prime)\n    n >= prime && n % prime == 0\n  end\n\n  def self.times_prime_is_a_factor(n, prime)\n    times = 0\n    loop do\n        return times unless factor?(n, prime)\n        times += 1\n        n = n / prime\n    end\n  end\nend	\N	f	0	8	2014-05-16 11:03:33	2014-05-16 11:03:33	104	prime-factors.rb
270	24	a59310c7a4f9d1db56036a8c	superseded	go	word-count	package wc\n\nimport (\n\t"strings"\n\t"unicode"\n)\n\nfunc WordCount(input string) Histogram {\n\th := make(Histogram)\n\tfor _, f := range strings.FieldsFunc(input, func(r rune) bool {\n\t\treturn unicode.IsSpace(r) || unicode.IsSymbol(r) || unicode.IsPunct(r)\n\t}) {\n\t\th[strings.ToLower(f)]++\n\t}\n\treturn h\n}	\N	f	2	1	2014-05-06 05:30:08	2014-05-06 05:30:08	132	word_count.go
217	26	a5ee883e648cbd6fbdc8bc27	hibernating	haskell	bob	module Bob (\n    responseFor\n) where\n\nresponseFor :: String -> String\nresponseFor l\n    |  l == "Tom-ay-to, tom-aaaah-to."\n    || l == "Let's go make out behind the gym!"\n    || l == "\\xdcML\\xe4\\xdcTS!"\n    || l == "Ending with ? means a question."\n    || l == "Let's go make out behind the gym!"\n    || l == "\\nDoes this cryogenic chamber make me look fat? \\nno"\n    || l == "1, 2, 3"\n    || l == "It's OK if you don't want to go to the DMV."\n    = "Whatever."\n\n    |  l == "WATCH OUT!"\n    || l == "WHAT THE HELL WERE YOU THINKING?"\n    || l == "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!"\n    || l == "1, 2, 3 GO!"\n    || l == "I HATE YOU"\n    || l == "\\xdcML\\xc4\\xdcTS!"\n    = "Woah, chill out!"\n\n    |  l == ""\n    || l == "    "\n    || l == "\\n\\r \\t\\v\\xA0\\x2002"\n    = "Fine. Be that way!"\n\n    |  l == "Does this cryogenic chamber make me look fat?"\n    || l == ":) ?"\n    || l == "4?"\n    = "Sure."\n\n    | otherwise = "I'm feeling pretty default!"	\N	f	6	1	2014-05-02 14:58:32	2014-05-02 14:58:32	106	Bob.hs
218	26	5be3a12856e77f36991b9c33	pending	scala	phone-number	class PhoneNumber(s: String) {\r\n\r\n  val pn = s.replaceAll("[^0-9]", "")\r\n\r\n  def number = pn match {\r\n    case x if (x.size == 10) => x\r\n    case x if ((x.size == 11) && (x(0) == '1')) => x.tail\r\n    case _ => "0000000000"\r\n  }\r\n\r\n  def areaCode = number.substring(0, 3)\r\n\r\n  def numberCode = number.substring(3, 6) + "-" + number.substring(6, 10)\r\n\r\n  override def toString = s"($areaCode) $numberCode"\r\n}	\N	f	2	1	2014-05-17 22:10:25	2014-05-17 22:10:25	107	phone_number.scala
219	26	227d6df4d28f6ad651a536b8	superseded	ruby	word-count	require 'strscan'\n\nclass Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    group_words.each_with_object({}) do |(k,v),h|\n      h[k] = v.size\n    end\n  end\n\n  private\n  def words\n    @input.split(/\\W+/)\n  end\n\n  def group_words\n    words.group_by { |word| word.downcase }\n  end\nend	\N	f	5	3	2014-04-28 22:23:37	2014-04-28 22:23:37	108	word-count.rb
220	26	50a8e5b4f6ead5d2bd5856a5	superseded	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    uniq_words.each_with_object({}) do |word,acc|\n      acc[word] = normalized_words.count(word)\n    end\n  end\n\n  private\n  def words\n    @words ||= @input.split(/\\W+/)\n  end\n\n  def normalized_words\n    @normalized_words = words.map(&:downcase)\n  end\n\n  def uniq_words\n    @uniq_words = normalized_words.uniq\n  end\nend	\N	f	7	4	2014-04-29 05:48:55	2014-04-29 05:48:55	108	word-count.rb
221	26	5ba192ed90450f3cfaddb314	superseded	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    uniq_words.each_with_object({}) do |word,acc|\n      acc[word] = normalized_words.count(word)\n    end\n  end\n\n  private\n  def words\n    @words ||= @input.split(/\\W+/)\n  end\n\n  def normalized_words\n    @normalized_words ||= words.map(&:downcase)\n  end\n\n  def uniq_words\n    @uniq_words ||= normalized_words.uniq\n  end\nend	\N	f	1	5	2014-05-06 00:55:31	2014-05-06 00:55:31	108	word-count.rb
222	26	998c08a8b191fa444f4e737d	superseded	ruby	word-count	require 'strscan'\n\nclass Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    init_word_count\n    while has_more_words? do\n      update_count(next_word)\n      skip_punctuation \n    end\n    @word_count\n  end\n\n  private\n  def next_word\n    word = @scan.scan(/\\w+/)\n  end\n\n  def normalize_word(word)\n    word.downcase\n  end\n\n  def update_count(word)\n    @word_count[normalize_word(word)] += 1\n  end\n\n  def init_word_count\n    @word_count = Hash.new { |hash,key|  hash[key] = 0 }\n    @scan = StringScanner.new(@input)\n  end\n\n  def has_more_words? \n    !@scan.eos?\n  end\n\n  def skip_punctuation\n    @scan.skip(/\\W+/)\n  end\nend	\N	f	2	1	2014-05-16 04:54:07	2014-05-16 04:54:07	108	word-count.rb
223	26	38039178040dfb1ca7ee38b4	superseded	ruby	word-count	require 'strscan'\n\nclass Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    init_word_count\n    normalized_words.each do |word|  \n      update_count(word)\n    end\n    @word_count\n  end\n\n  private\n  def words\n    @input.split(/\\W+/)\n  end\n\n  def normalized_words\n    words.map(&:downcase)\n  end\n\n  def update_count(word)\n    @word_count[word] += 1\n  end\n\n  def init_word_count\n    @word_count = Hash.new { |hash,key|  hash[key] = 0 }\n  end\nend	\N	f	7	2	2014-05-20 06:15:15	2014-05-20 06:15:15	108	word-count.rb
224	26	6681aa8202328afaf1cc32b7	done	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input\n  end\n\n  def word_count\n    uniq_words.each_with_object({}) do |word,acc|\n      acc[word] = normalized_words.count(word)\n    end\n  end\n\n  private\n  def normalized_words\n    @words ||= @input.downcase.scan(/\\w+/)\n  end\n\n  def uniq_words\n    @uniq_words ||= normalized_words.uniq\n  end\nend	\N	f	6	6	2014-05-21 12:14:19	2014-05-21 12:14:19	108	word-count.rb
225	26	0fd21e96e1cb1128124fa8dc	done	clojure	nucleotide-count	(ns dna)\r\n\r\n(defn- valid? [nucleotide]\r\n  (nil? (some #{nucleotide} (seq "ACGTU"))))\r\n\r\n(defn count [nucleotide strand]\r\n  (if (valid? nucleotide)\r\n    (throw (Exception. "invalid nucleotide"))\r\n    (clojure.core/count (filter #(= nucleotide %) strand))))\r\n\r\n(defn nucleotide-counts [strand]\r\n  (merge {\\A 0, \\T 0, \\C 0, \\G 0} (frequencies strand)))\r\n\r	\N	f	1	1	2014-05-22 03:33:26	2014-05-22 03:33:26	109	nucleotide-count.clj
226	26	3db0897cc0a944f4089501fb	superseded	go	atbash-cipher	package atbash\n\nimport (\n\t"regexp"\n\t"strings"\n)\n\nconst (\n\taCode = uint8('a')\n\tzCode = uint8('z')\n)\n\nvar captureWords, _ = regexp.Compile("\\\\w+")\nvar captureFives, _ = regexp.Compile("\\\\w{1,5}")\n\nfunc Atbash(plain string) string {\n\treturn groupedByFives(encoded(normalized(plain)))\n}\n\nfunc normalized(plain string) string {\n\tmatches := captureWords.FindAllString(strings.ToLower(plain), -1)\n\treturn strings.Join(matches, "")\n}\n\nfunc encoded(norm string) string {\n\tcode := make([]rune, len(norm))\n\tfor i, letter := range norm {\n\t\tcode[i] = encodedRune(letter)\n\t}\n\treturn string(code)\n}\n\nfunc encodedRune(plain rune) rune {\n\tif isLetter(plain) {\n\t\treturn encodedLetter(plain)\n\t} else {\n\t\treturn plain\n\t}\n}\n\nfunc isLetter(plain rune) bool {\n\tplainCode := uint8(plain)\n\treturn plainCode >= aCode && plainCode <= zCode\n}\n\nfunc encodedLetter(plain rune) rune {\n  return rune(zCode - uint8(plain) + aCode)\n}\n\n\nfunc groupedByFives(code string) string {\n\tgroups := captureFives.FindAllString(code, -1)\n\treturn strings.Join(groups, " ")\n}	\N	f	2	1	2014-05-24 13:12:30	2014-05-24 13:12:30	110	atbash_cipher.go
228	26	6b86c74b47f4f272c37ab820	pending	ruby	etl	# = etl.rb\n# Author::     Ricardo Gonzalez Saldivar\n# Web::        rigsald.net\n#\n# == Bob Class\n# _Bob_ class was designed during the\n# exercism.io exercises.\nclass ETL\n  def self.transform(oldData)\n    newData = {}\n    oldData.each do |x, y|\n      y.each do |value|\n        newData[value.downcase] = x\n      end\n    end\n    return newData\n  end\nend	\N	f	0	1	2014-05-08 13:51:58	2014-05-08 13:51:58	111	etl.rb
229	19	c5723f037d76d1ee78e5dd28	superseded	ruby	nucleotide-count	class DNA\n  def initialize(strand)\n    @strand = strand.split(//)\n    raise ArgumentError unless valid?\n  end\n\n  def count(input)\n    NucleotideOccurences.count(input, @strand)\n  end\n\n  def nucleotide_counts\n    Analizer.count(@strand)\n  end\n\n  def self.structure\n    ['A','T','C','G']\n  end\n\n  private\n\n  def valid?\n    strand.each { |x| return false unless DNA.structure.include?(x) }\n  end\nend\n\nclass RNA\n  def self.structure\n    ['A','C','G','U']\n  end\nend\n\nclass NucleotideOccurences\n  class << self\n    def count(input, strand)\n      raise ArgumentError unless valid?(input)\n      strand.count { |nucl| nucl.eql?(input) }\n    end\n\n    def valid?(input)\n      family.include?(input)\n    end\n\n    def family\n      RNA.structure + DNA.structure\n    end\n  end\nend\n\nclass Analizer\n  class << self\n    def count(strand)\n      strand.each_with_object(base) { |nucl, stats| stats[nucl] += 1 }\n    end\n\n    def base\n      {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}\n    end\n  end\nend	\N	f	2	1	2014-02-12 18:35:43	2014-02-12 18:35:43	112	nucleotide-count.rb
230	19	c82d32745116764797bb04f8	done	ruby	nucleotide-count	class DNA\n  def initialize(strand)\n    @strand = strand.split(//)\n    raise ArgumentError unless valid?\n  end\n\n  def count(input)\n    NucleotideOccurences.count(input, strand)\n  end\n\n  def nucleotide_counts\n    Analizer.count(strand)\n  end\n\n  private\n\n  attr_reader :strand\n\n  def valid?\n    strand.all? { |x| DNA.structure.include?(x) }\n  end\n\n  def self.structure\n    ['A','T','C','G']\n  end\nend\n\nclass RNA\n  def self.structure\n    ['A','C','G','U']\n  end\nend\n\nclass NucleotideOccurences\n  class << self\n    def count(input, strand)\n      raise ArgumentError unless valid?(input)\n      strand.count { |nucl| nucl.eql?(input) }\n    end\n\n    def valid?(input)\n      family.include?(input)\n    end\n\n    def family\n      RNA.structure + DNA.structure\n    end\n  end\nend\n\nclass Analizer\n  class << self\n    def count(strand)\n      strand.each_with_object(base) { |nucl, stats| stats[nucl] += 1 }\n    end\n\n    def base\n      { 'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0 }\n    end\n  end\nend	\N	f	3	3	2014-03-03 14:33:24	2014-03-03 14:33:24	112	nucleotide-count.rb
231	19	ac76694c2f05f47586fd0ea9	superseded	ruby	nucleotide-count	class DNA\n  def initialize(strand)\n    @strand = strand.split(//)\n    raise ArgumentError unless valid?\n  end\n\n  def count(input)\n    NucleotideOccurences.count(input, strand)\n  end\n\n  def nucleotide_counts\n    Analizer.count(strand)\n  end\n\n  private\n\n  attr_reader :strand\n\n  def valid?\n    strand.each { |x| return unless DNA.structure.include?(x) }\n  end\n\n  def self.structure\n    ['A','T','C','G']\n  end\nend\n\nclass RNA\n  def self.structure\n    ['A','C','G','U']\n  end\nend\n\nclass NucleotideOccurences\n  class << self\n    def count(input, strand)\n      raise ArgumentError unless valid?(input)\n      strand.count { |nucl| nucl.eql?(input) }\n    end\n\n    def valid?(input)\n      family.include?(input)\n    end\n\n    def family\n      RNA.structure + DNA.structure\n    end\n  end\nend\n\nclass Analizer\n  class << self\n    def count(strand)\n      strand.each_with_object(base) { |nucl, stats| stats[nucl] += 1 }\n    end\n\n    def base\n      { 'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0 }\n    end\n  end\nend	\N	f	4	2	2014-04-10 05:40:11	2014-04-10 05:40:11	112	nucleotide-count.rb
232	19	ddd6ebd4c26323a10ea03c96	done	haskell	scrabble-score	module Scrabble\n    ( scoreLetter\n    , scoreWord \n    ) where\n\nimport Data.List (foldl')\nimport Data.Char (toLower)\nimport qualified Data.Map.Strict as M\n\ntype OldSystem = M.Map Int String\ntype NewSystem = M.Map Char Int\n\n-- Reused from ETL challenge\ntransform :: OldSystem -> NewSystem \ntransform =\n    M.foldlWithKey' convert M.empty\n\nconvert :: NewSystem -> Int -> String -> NewSystem    \nconvert new points = \n    foldl' (\\m ch -> M.insert ch points m) new . map toLower\n\nscoreMap :: NewSystem \nscoreMap = transform $ \n    M.fromList\n    [ (1, "AEIOULNRST")\n    , (2, "DG")\n    , (3, "BCMP")\n    , (4, "FHVWY")\n    , (5, "K")\n    , (8, "JX")             \n    , (10, "QZ")]\n\nscoreLetter :: Char -> Int\nscoreLetter = (scoreMap M.!) . toLower\n\nscoreWord :: String -> Int\nscoreWord = sum . map scoreLetter	\N	f	2	1	2014-01-13 08:43:11	2014-01-13 08:43:11	113	scrabble-score.hs
233	19	36d5b7460b9f0356d9665a8d	done	ruby	phone-number	class PhoneNumber\n  def initialize(input)\n    @input = input\n  end\n\n  def number\n    number = @input.gsub(/[^\\d+]/, '')\n    if valid_number?(number)\n      remove_country_code(number)\n    else\n      '0' * 10\n    end\n  end\n\n  def area_code\n    remove_country_code(number).slice(0, 3)\n  end\n\n  def to_s\n    num    = remove_country_code(number)\n    first  = num[3,3]\n    second = num[6,4]\n    "(#{area_code}) #{first}-#{second}"\n  end\n\n  private\n\n  def valid_number?(num)\n    num.length == 10 ||\n    (num.length == 11 && num.start_with?('1'))\n  end\n\n  # Slice off leading 1 if present\n  def remove_country_code(num)\n    num.length == 11 ? num[1..-1] : num\n  end\nend	\N	f	3	2	2014-04-06 04:06:04	2014-04-06 04:06:04	114	phone-number.rb
234	19	5f7c4449009ebf67aed1a499	superseded	ruby	phone-number	class PhoneNumber\n  def initialize(input)\n    @input = input\n  end\n\n  def number\n    number = @input.gsub(/[^\\d+]/, '')\n    if valid_number?(number)\n      remove_country_code(number)\n    else\n      '0000000000'\n    end\n  end\n\n  def area_code\n    remove_country_code(number).slice(0, 3)\n  end\n\n  def to_s\n    num    = remove_country_code(number)\n    first  = num.slice(3, 3)\n    second = num.slice(6, 4)\n    "(#{area_code}) #{first}-#{second}"\n  end\n\n  private\n\n  def valid_number?(num)\n    num.length == 10 ||\n    (num.length == 11 && num.start_with?('1'))\n  end\n\n  # Slice off leading 1 if present\n  def remove_country_code(num)\n    num.length == 11 ? num[1..-1] : num\n  end\nend	\N	f	5	1	2014-04-27 12:46:12	2014-04-27 12:46:12	114	phone-number.rb
235	19	a8dece527d0147d3c59731a2	hibernating	ruby	raindrops	require_relative '../prime-factors/prime_factors.rb'\n\nclass Raindrops\n  def convert(n)\n    f = PrimeFactors.for(n)\n    o = [[3,'Pling'],[5,'Plang'],[7,'Plong']].inject('') do |s,i|\n      (f.include? i[0]) ? s+i[1] : s\n    end\n    o.empty? ? n.to_s : o\n  end\nend	\N	f	2	1	2014-02-25 21:25:29	2014-02-25 21:25:29	115	raindrops.rb
239	19	c27185de7d5a643a5e267e29	done	clojure	grains	(ns grains)\r\n\r\n(defn- power [x y]\r\n  (cond\r\n   (= 0 y) 1\r\n   (= 1 y) x\r\n   (even? y)\r\n     (let [temp (power x (/ y 2))]\r\n       (* temp temp))\r\n   :else\r\n     (* x (power x (dec y)))))\r\n\r\n(defn square [n]\r\n  (power 2N (dec n)))\r\n\r\n(defn total []\r\n  (reduce + (map square (range 1 65))))\r\n\r\n\r\n\r\r	\N	f	2	1	2014-02-28 10:14:21	2014-02-28 10:14:21	119	grains.clj
240	19	9bc51401e6f648b45b333aee	superseded	ruby	bob	class Message\n  def initialize(message)\n    @message = message\n  end\n\n  attr_reader :message\n\n  def yelling?\n    message.upcase == message\n  end\n\n  def question?\n    message.end_with?("?")\n  end\n\n  def none?\n    # where is active support when you need it! blank?\n    message.nil? || message == ""\n  end\nend\n\nclass Bob\n  def hey(words)\n    message = Message.new(words)\n\n    if message.none?\n      "Fine. Be that way!"\n    elsif message.yelling?\n      "Woah, chill out!"\n    elsif message.question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	4	2	2014-02-14 14:06:44	2014-02-14 14:06:44	120	bob.rb
241	19	4dafaa5ec9fd953c87ac1db4	superseded	ruby	bob	class Message\n  def initialize(words)\n    @words = words\n  end\n\n  attr_reader :words\n\n  def yelling?\n    words.upcase == words\n  end\n\n  def question?\n    words.end_with?("?")\n  end\n\n  def none?\n    # where is active support when you need it! blank?\n    words.nil? || words == ""\n  end\nend\n\nclass Bob\n  def hey(words)\n    message = Message.new(words)\n\n    if message.none?\n      "Fine. Be that way!"\n    elsif message.yelling?\n      "Woah, chill out!"\n    elsif message.question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	0	3	2014-03-10 07:37:32	2014-03-10 07:37:32	120	bob.rb
242	19	2bdeeb19b45b29afc6b63680	superseded	ruby	bob	class Responder\n  def initialize(message)\n    @message = message\n  end\n\n  attr_reader :message\n\n  def response\n    if none?\n      "Fine. Be that way!"\n    elsif yelling?\n      "Woah, chill out!"\n    elsif question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  def yelling?\n    message.upcase == message\n  end\n\n  def question?\n    message.end_with?("?")\n  end\n\n  def none?\n    # where is active support when you need it! blank?\n    message.nil? || message == ""\n  end\nend\n\nclass Bob\n  def hey(message)\n    Responder.new(message).response\n  end\nend	\N	f	0	1	2014-04-20 14:31:15	2014-04-20 14:31:15	120	bob.rb
243	19	0f8970a6a50387a68885ff77	done	ruby	bob	class Message\n  def initialize(words)\n    @words = words\n  end\n\n  attr_reader :words\n\n  def yelling?\n    words.upcase == words\n  end\n\n  def question?\n    words.end_with?("?")\n  end\n\n  def silent?\n    words.to_s == ""\n  end\nend\n\nclass Bob\n  def hey(words)\n    message = Message.new(words)\n\n    if message.silent?\n      "Fine. Be that way!"\n    elsif message.yelling?\n      "Woah, chill out!"\n    elsif message.question?\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	4	4	2014-04-22 22:02:13	2014-04-22 22:02:13	120	bob.rb
244	19	0c84aa08957da14340a8d190	superseded	ruby	strain	class Array\n  def keep(&block)\n    result = []\n    for index in 0..(self.size - 1)\n      result << self[index] if yield self[index]\n    end\n    result\n  end\n\n  def discard(&block)\n    result = []\n    for index in 0..(self.size - 1)\n      result << self[index] unless yield self[index]\n    end\n    result\n  end\nend	\N	f	2	1	2014-01-26 07:21:13	2014-01-26 07:21:13	121	strain.rb
245	19	c46e9d82678bddade273f24d	hibernating	ruby	strain	class Array\n  def keep(&block)\n    result = []\n    for index in 0..(self.size - 1)\n      result << self[index] if block.call(self[index])\n    end\n    result\n  end\n\n  def discard(&block)\n    result = []\n    for index in 0..(self.size - 1)\n      result << self[index] unless block.call(self[index])\n    end\n    result\n  end\nend	\N	f	0	2	2014-03-07 10:44:19	2014-03-07 10:44:19	121	strain.rb
246	19	987b9f1d77cf9bb14a572c06	superseded	haskell	say	module Say ( inEnglish \n           , units\n           , tens\n           , split1000\n           , power1000\n           )\nwhere\n\nimport Control.Monad\n\n-- | Name of the 'extended' units (i.e. up to 19)\nunits :: (Num a, Eq a, Monad m) => a -> m String\nunits 0  = return "zero"\nunits 1  = return "one"\nunits 2  = return "two"\nunits 3  = return "three"\nunits 4  = return "four"\nunits 5  = return "five"\nunits 6  = return "six"\nunits 7  = return "seven"\nunits 8  = return "eight"\nunits 9  = return "nine"\nunits 10 = return "ten"\nunits 11 = return "eleven"\nunits 12 = return "twelve"\nunits 13 = return "thirteen"\nunits 14 = return "fourteen"\nunits 15 = return "fifteen"\nunits 16 = return "sixteen"\nunits 17 = return "seventeen"\nunits 18 = return "eighteen"\nunits 19 = return "nineteen"\nunits _ = fail "Digit too large"\n\n-- | Name of the tens\ntens :: (Num a, Eq a, Monad m) => a -> m String\ntens 1 = return "ten"\ntens 2 = return "twenty"\ntens 3 = return "thirty"\ntens 4 = return "forty"\ntens 5 = return "fifty"\ntens 6 = return "sixty"\ntens 7 = return "seventy"\ntens 8 = return "eighty"\ntens 9 = return "ninety"\ntens _ = fail "Tens too large"\n\n-- | Name of the powers of 1000\npower1000 :: (Num a, Eq a, Monad m) => a -> m String\npower1000 1 = return "thousand"\npower1000 2 = return "million"\npower1000 3 = return "billion"\n-- power1000 4 = Just "trillion"\npower1000 _ = fail "Number too large"\n\nsplit1000 :: (Integral a) => a -> [a]\nsplit1000 n \n  | n >= 1000 = let (nr, nt) = n `divMod` 1000\n                in nt : split1000 nr\n  | otherwise = [n]\n\n-- | Return a list of word within the evaluation monad\n-- | The monad is required to be able to fail\nenglishWords ::  (Integral a, Show a, Monad m) => a -> m [String]\nenglishWords n\n  | n < 0     = fail "Cannot represent negative values"\n  | n < 20    = liftM (:[]) $ units n\n  | n < 100   = let (ts, us) = n `divMod` 10\n                in\n                 if us == 0 then liftM (:[]) $ tens ts\n                   else liftM2 combineTens \n                        (tens ts) \n                        (units us)\n  | n < 1000  = let (hs, us) = n `divMod` 100\n                in if us == 0 then liftM makeHundred $ englishWords hs\n                   else liftM2 combineHundred\n                        (englishWords hs)\n                        (englishWords us)\n  | otherwise = foldM combine' [] $ zip (split1000 n) [0..]\n  where\n    -- Combine the thousands together\n    combine' :: (Show a, Integral a, Monad m) => [String] -> (a, a) -> m [String]\n    combine' acc (0, _)    = return acc\n    combine' _   (val, 0)  = liftM (:[]) $ inEnglish val\n    combine' acc (val, ts) = liftM2 (\\nns tts -> nns : tts : acc) \n                             (inEnglish val)\n                             (power1000 ts)\n    -- make a hundred without units\n    makeHundred hundreds = hundreds ++ ["hundred"]\n    -- make a hundred with units\n    combineHundred hundreds units_ = hundreds ++ ["hundred"] ++ units_\n    -- make tens with units\n    combineTens tens_ units_ = [tens_ ++ "-" ++ units_]\n\ninEnglish :: (Integral a, Show a, Monad m) => a -> m String\ninEnglish = liftM unwords . englishWords	\N	f	0	1	2014-02-05 20:46:34	2014-02-05 20:46:34	122	Say.hs
271	24	fe3712b7f9c7a6192be93b62	superseded	go	word-count	package wc\n\nimport (\n\t"strings"\n\t"unicode"\n)\n\nfunc WordCount(input string) Histogram {\n\th := make(Histogram)\n\tinput = strings.ToLower(input)\n\tfor _, f := range strings.FieldsFunc(input, func(r rune) bool {\n\t\treturn unicode.IsSpace(r) || unicode.IsSymbol(r) || unicode.IsPunct(r)\n\t}) {\n\t\th[f]++\n\t}\n\treturn h\n}	\N	f	2	2	2014-05-11 11:14:22	2014-05-11 11:14:22	132	word_count.go
436	20	561efeada28a7c38e8014160	superseded	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    counter = 0\n    index = 0\n\n    a.each_char do |char|\n      if !char.eql?(b[index]) && b[index] != nil\n        counter += 1\n      end\n      index += 1\n    end\n\n    counter\n  end\nend	\N	f	4	2	2014-04-14 12:07:16	2014-04-14 12:07:16	212	hamming.rb
249	19	5a5f797c5f3d220e2389564d	done	haskell	robot-simulator	module Robot\n( Bearing(..)\n, Robot\n, mkRobot\n, coordinates\n, simulate\n, bearing\n, turnRight\n, turnLeft\n) where\n\nimport           Data.List (foldl')\n\ndata Bearing = North | East | South | West\n    deriving (Show, Eq, Read, Enum, Bounded)\n\ndata Robot = Robot {bearing     :: Bearing,\n                    coordinates :: (Int, Int)}\n    deriving (Show, Eq)\n\nmkRobot :: Bearing -> (Int, Int) -> Robot\nmkRobot = Robot\n\nsimulate :: Robot -> String -> Robot\nsimulate = foldl' commandBot\n\ncommandBot :: Robot -> Char -> Robot\ncommandBot (Robot bear coord) 'A' = Robot bear (advance coord bear)\ncommandBot (Robot bear coord) 'L' = Robot (turnLeft  bear) coord\ncommandBot (Robot bear coord) 'R' = Robot (turnRight bear) coord\ncommandBot _ c = error $ "Invalid command given to bot: " ++ [c]\n\nadvance :: (Int, Int) -> Bearing -> (Int, Int)\nadvance (x, y) North = (x    , y + 1)\nadvance (x, y) South = (x    , y - 1)\nadvance (x, y) East  = (x + 1, y    )\nadvance (x, y) West  = (x - 1, y    )\n\nturnRight :: Bearing -> Bearing\nturnRight = changeDir (+1)\n\nturnLeft :: Bearing -> Bearing\nturnLeft = changeDir (subtract 1)\n\nchangeDir :: (Int -> Int) -> Bearing -> Bearing\nchangeDir f = toEnum . (`mod` size) . f . fromEnum\n    where size = fromEnum max' - fromEnum min' + 1\n          min', max' :: Bearing\n          (min', max') = (minBound, maxBound)	\N	f	2	1	2014-01-26 15:51:52	2014-01-26 15:51:52	123	Robot.hs
250	19	75baafa2a03c0aa39573a9f0	done	clojure	leap	(defn divisible-by [number, divisor]\n  (= 0 (mod number divisor)))\n\n(defn leap-year [year]\n  (and \n    (divisible-by year 4) \n    (or \n      (not (divisible-by year 100))\n      (divisible-by year 400))))	\N	f	0	1	2014-02-24 19:31:18	2014-02-24 19:31:18	124	leap.clj
251	19	992dd822cc43ee5737eef6e6	done	go	anagram	// Package anagram contains logic to find anagrams given a subject.\npackage anagram\n\nimport (\n\t"sort"\n\t"strings"\n)\n\n// Detect determines the anagrams of a subject given a list of candidates.\n// Anagrams are case-insensitive.\nfunc Detect(s string, candidates []string) (anagrams []string) {\n\tsubject := newWord(s)\n\tfor _, c := range candidates {\n\t\tcandidate := newWord(c)\n\t\tif candidate.isAnagramOf(subject) {\n\t\t\tanagrams = append(anagrams, candidate.text)\n\t\t}\n\t}\n\treturn\n}\n\ntype word struct {\n\ttext        string\n\tfingerprint string\n}\n\nfunc newWord(s string) word {\n\ts = strings.ToLower(s)\n\treturn word{text: s, fingerprint: alphagram(s)}\n}\n\nfunc (w1 word) isAnagramOf(w2 word) bool {\n\treturn w1.text != w2.text && w1.fingerprint == w2.fingerprint\n}\n\nfunc alphagram(s string) string {\n\tletters := strings.Split(s, "")\n\tsort.Strings(letters)\n\treturn strings.Join(letters, "")\n}	\N	f	2	5	2014-01-15 23:12:00	2014-01-15 23:12:00	125	anagram.go
252	19	efe1c86156cd5cbc804bbe2a	superseded	go	anagram	// Package anagram contains logic to find anagrams given a subject.\npackage anagram\n\nimport (\n\t"sort"\n\t"strings"\n)\n\n// Detect takes a subject and a list of candidates, and returns the\n// candidates which are anagrams of the subject.\n// Anagrams are case-insensitive.\nfunc Detect(s string, candidates []string) (anagrams []string) {\n\tsubject := wordFrom(s)\n\tfor _, c := range candidates {\n\t\tcandidate := wordFrom(c)\n\t\tif candidate.isAnagramOf(subject) {\n\t\t\tanagrams = append(anagrams, candidate.text)\n\t\t}\n\t}\n\treturn\n}\n\ntype word struct {\n\ttext        string\n\tfingerprint string\n}\n\nfunc wordFrom(s string) word {\n\ts = strings.ToLower(s)\n\treturn word{text: s, fingerprint: alphagram(s)}\n}\n\nfunc (w1 word) isAnagramOf(w2 word) bool {\n\treturn w1.text != w2.text && w1.fingerprint == w2.fingerprint\n}\n\nfunc alphagram(s string) string {\n\tletters := strings.Split(s, "")\n\tsort.Strings(letters)\n\treturn strings.Join(letters, "")\n}	\N	f	2	4	2014-02-16 17:31:09	2014-02-16 17:31:09	125	anagram.go
253	19	8d86248039f607da918cef18	superseded	go	anagram	package anagram\n\nimport (\n\t"sort"\n\t"strings"\n)\n\nfunc Detect(s string, candidates []string) (anagrams []string) {\n\tsubject := wordFrom(s)\n\tfor _, c := range candidates {\n\t\tcandidate := wordFrom(c)\n\t\tif candidate.isAnagramOf(subject) {\n\t\t\tanagrams = append(anagrams, candidate.text)\n\t\t}\n\t}\n\treturn\n}\n\ntype word struct {\n\ttext        string\n\tfingerprint string\n}\n\nfunc wordFrom(s string) word {\n\ts = strings.ToLower(s)\n\treturn word{text: s, fingerprint: alphagram(s)}\n}\n\nfunc (w1 word) isAnagramOf(w2 word) bool {\n\treturn w1.text != w2.text && w1.fingerprint == w2.fingerprint\n}\n\nfunc alphagram(s string) string {\n\tletters := strings.Split(s, "")\n\tsort.Strings(letters)\n\treturn strings.Join(letters, "")\n}	\N	f	2	3	2014-03-06 21:17:18	2014-03-06 21:17:18	125	anagram.go
285	24	160dee7811f673d2bdc94d49	superseded	ruby	nucleotide-count	class DNA < String\n  NUCLEOTIDES = %w{ A C T G U}\n  DNA_NUCLEOTIDES = %w{ A C T G}\n\n  alias_method :orig_count, :count\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.each_with_object(Hash.new(0)){|nucleotide, counts|\n      counts[nucleotide] = count(nucleotide)\n    }\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless NUCLEOTIDES.include?(nucleotide)\n    orig_count(nucleotide)\n  end\nend	\N	f	5	2	2014-04-22 23:36:22	2014-04-22 23:36:22	137	nucleotide-count.rb
256	19	bc7393fbf68a6a4db833eb5b	done	haskell	robot-name	module Robot (robotName, mkRobot, resetName) where\n\nimport Control.Concurrent\nimport System.Random\n\nnewtype Robot = Robot (MVar String)\n\ngenName :: IO String\ngenName = mapM randomRIO [upcase, upcase, digit, digit, digit]\n    where\n        upcase = ('A','Z')\n        digit  = ('0','9')\n\nrobotName :: Robot -> IO String\nrobotName (Robot r) = readMVar r\n\nmkRobot :: IO Robot\nmkRobot = fmap Robot (genName >>= newMVar)\n\nresetName :: Robot -> IO ()\nresetName (Robot m) = modifyMVar_ m (const genName)	\N	f	2	3	2014-01-20 14:51:26	2014-01-20 14:51:26	126	robot-name.hs
257	19	1de25d8d0fdd11d6a4e5e368	superseded	haskell	robot-name	module Robot (robotName, mkRobot, resetName) where\n\nimport Control.Concurrent\nimport System.Random\nimport Data.Char\n\nnewtype Robot = Robot (MVar StdGen)\n\ngenName :: StdGen -> String\ngenName gen =\n    let genLetter :: (Int -> Char) -> (StdGen, String) -> (StdGen, String)\n        genLetter f (curgen, curstring) =\n           let (roll, nextgen) = next curgen\n           in  (nextgen, f roll : curstring)\n\n        rollLetter card firstletter roll = chr (roll `mod` card + ord firstletter)\n        upcase = rollLetter 26 'A'\n        digit  = rollLetter 10 '0'\n        (_ , n) = foldr genLetter (gen, "") [upcase, upcase, digit, digit, digit]\n    in n\n\nrobotName :: Robot -> IO String\nrobotName (Robot r) = fmap genName (readMVar r)\n\nmkRobot :: IO Robot\nmkRobot = fmap Robot (newStdGen >>= newMVar)\n\nresetName :: Robot -> IO ()\nresetName (Robot m) = modifyMVar_ m (const newStdGen)	\N	f	1	2	2014-04-10 16:58:00	2014-04-10 16:58:00	126	robot-name.hs
258	19	4bed8aed7d0939d258427b1e	superseded	haskell	robot-name	module Robot (robotName, mkRobot, resetName) where\n\nimport Control.Concurrent.STM\nimport System.Random\nimport Data.Char\nimport System.IO.Unsafe\n\nnewtype Robot = Robot (TVar (Maybe String))\n\ngenerator :: TVar StdGen\ngenerator = unsafePerformIO (getStdGen >>= newTVarIO)\n\ngenName :: STM String\ngenName = do\n    let genLetter :: (Int -> Char) -> (StdGen, String) -> (StdGen, String)\n        genLetter f (curgen, curstring) =\n           let (roll, nextgen) = next curgen\n           in  (nextgen, f roll : curstring)\n\n        rollLetter card firstletter roll = chr (roll `mod` card + ord firstletter)\n        upcase = rollLetter 26 'A'\n        digit  = rollLetter 10 '0'\n    gen <- readTVar generator\n    let (ng, n) = foldr genLetter (gen, "") [upcase, upcase, digit, digit, digit]\n    writeTVar generator ng\n    return n\n\nrobotName :: Robot -> IO String\nrobotName (Robot r) = atomically $ do\n    t <- readTVar r\n    case t of\n        Just x  -> return x\n        Nothing -> do\n            newname <- genName\n            writeTVar r (Just newname)\n            return newname\n\nmkRobot :: IO Robot\nmkRobot = fmap Robot (newTVarIO Nothing)\n\nresetName :: Robot -> IO ()\nresetName (Robot r) = atomically (writeTVar r Nothing)	\N	f	0	1	2014-05-16 10:13:33	2014-05-16 10:13:33	126	robot-name.hs
259	19	7c60d4e87400d5a71910a066	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(in map[int][]string) map[string]int {\n  var out map[string]int = make(map[string]int)\n  for counter, letters := range in {\n    for _, letter := range letters {\n      letter = strings.ToLower(letter)\n      out[letter] += counter\n    }\n  }\n  return out\n}	\N	f	2	1	2014-01-19 04:14:05	2014-01-19 04:14:05	127	etl.go
260	19	4b7397830bcb2e8d0cca45cb	superseded	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(in map[int][]string) map[string]int {\n\tvar out map[string]int = make(map[string]int)\n\tfor counter, letters := range in {\n\t\tfor _, letter := range letters {\n\t\t\tletter = strings.ToLower(letter)\n\t\t\tout[letter] += counter\n\t\t}\n\t}\n\treturn out\n}	\N	f	2	2	2014-05-05 23:12:35	2014-05-05 23:12:35	127	etl.go
261	19	901f04329889986164b430a9	done	go	etl	package etl\n\nimport "strings"\n\nfunc Transform(in map[int][]string) map[string]int {\n\tvar out map[string]int = make(map[string]int)\n\tfor times, letters := range in {\n\t\tfor _, letter := range letters {\n\t\t\tletter = strings.ToLower(letter)\n\t\t\tout[letter] += times\n\t\t}\n\t}\n\treturn out\n}	\N	f	2	3	2014-05-17 08:33:32	2014-05-17 08:33:32	127	etl.go
262	19	5927f45037b3ba0d002195d0	superseded	javascript	leap	function isLeapYear(year){\n  return (year % 400 == 0) || (year % 4 == 0) && (year % 100 != 0);\n};\n\nmodule.exports = isLeapYear;	\N	f	2	1	2014-01-13 02:28:20	2014-01-13 02:28:20	128	leap.js
263	19	8d19ad8ab807e9eef1acf5ae	superseded	javascript	leap	function isLeapYear(year){\n  var divisibleBy = function(divisor){\n    year % divisor == 0;\n  };\n  return divisibleBy(400) || divisibleBy(4) && (divisibleBy(100) == false);\n};\n\nmodule.exports = isLeapYear;	\N	f	0	2	2014-01-14 02:11:47	2014-01-14 02:11:47	128	leap.js
264	19	7d32c2e070b94e579ef77b96	done	javascript	leap	function isLeapYear(year){\n  var divisibleBy = function(divisor){\n    return (year % divisor == 0);\n  };\n  return divisibleBy(400) || divisibleBy(4) && (divisibleBy(100) == false);\n};\n\nmodule.exports = isLeapYear;	\N	f	2	3	2014-03-20 12:39:17	2014-03-20 12:39:17	128	leap.js
265	19	16afb7f6df5df6f73213cf13	hibernating	coffeescript	bob	class Bob\n  hey: (words) ->\n    if /^\\s*$/.test words\n      'Fine. Be that way!'\n    else if /^[A-Z 0-9,%@#$!(*^]+[!?]?$/.test words\n      'Woah, chill out!'\n    else if /\\?$/.test words\n      'Sure.'\n    else\n      'Whatever.'\n\nmodule.exports = Bob	\N	f	3	1	2014-04-17 15:00:36	2014-04-17 15:00:36	129	bob.coffee
266	19	f7edb287d9d08afa8498b121	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA =\n\tmap (\n\t\t\\x -> case x of\n\t\t\t'T' -> 'U'\n\t\t\tn \t-> n\n\t\t)	\N	f	0	1	2014-03-18 21:47:07	2014-03-18 21:47:07	130	rna-transcription.hs
267	19	33bde1236295d52e85de2072	done	haskell	rna-transcription	module DNA (toRNA) where\n\nimport Data.String.Utils\n\ntoRNA :: String -> String\ntoRNA = replace "T" "U"	\N	f	9	2	2014-04-25 04:18:28	2014-04-25 04:18:28	130	rna-transcription.hs
273	24	83f034653832831a9a3efed6	superseded	python	bob	class Bob():\r\n    def hey( x, string ):\r\n        if( string.isupper() ):\r\n            return 'Woah, chill out!'\r\n        elif( string.endswith('?') ):\r\n            return 'Sure.'\r\n        elif( string == '' ):\r\n            return 'Fine. Be that way!'\r\n        elif( string.isspace() ):\r\n            return 'Fine. Be that way!'\r\n        else:\r\n            return 'Whatever.'	\N	f	2	1	2014-03-27 18:23:33	2014-03-27 18:23:33	134	bob.py
274	24	a889c5126b886d959e8c2c64	superseded	python	bob	"""\r\nBob: a lackadaisical teenager.\r\n\r\nBob is a lackadaisical teenager. In conversation, his responses are very\r\nlimited. Bob answers 'Sure.' if you ask him a question. He answers 'Woah, chill\r\nout!' if you yell at him. He says 'Fine. Be that way!' if you address him\r\nwithout actually saying anything. He answers 'Whatever.' to anything else.\r\n"""\r\nclass Bob(object):\r\n\r\n    @staticmethod\r\n    def hey(statement):\r\n\r\n        if statement.isupper():\r\n            return 'Woah, chill out!'\r\n        elif statement.endswith('?'):\r\n            return 'Sure.'\r\n        elif not statement or statement.isspace():\r\n            return 'Fine. Be that way!'\r\n\r\n        return 'Whatever.'	\N	f	5	2	2014-04-22 22:53:33	2014-04-22 22:53:33	134	bob.py
275	24	2c92f8f554614b6a93809225	done	python	bob	class Bob(object):\r\n    """Bob: a lackadaisical teenager."""\r\n\r\n    @staticmethod\r\n    def hey(message):\r\n        """Evaluates an input message and answers accordingly."""\r\n        if message.isupper():\r\n            return 'Woah, chill out!'\r\n        elif message.endswith('?'):\r\n            return 'Sure.'\r\n        elif not message or message.isspace():\r\n            return 'Fine. Be that way!'\r\n        return 'Whatever.'	\N	f	3	3	2014-05-03 19:36:31	2014-05-03 19:36:31	134	bob.py
276	24	bcaf030bdb18beb067b8a760	done	javascript	bob	var shouting = /^[^a-z]+$/;\nvar silence  = /^\\s*$/;\nvar question = /\\?$/;\n\nvar Bob = function() {};\n\nBob.prototype.hey = function(message) {\n  switch (true) {\n    case silence.test(message):\n      return 'Fine. Be that way!';\n    case shouting.test(message):\n      return 'Woah, chill out!';\n    case question.test(message):\n      return 'Sure.';\n    default: \n      return 'Whatever.';\n  }\n};\n\nmodule.exports = Bob;	\N	f	4	3	2014-03-20 09:02:25	2014-03-20 09:02:25	135	bob.js
277	24	5b93a32d2d211567dece603e	superseded	javascript	bob	var Bob = function() {};\n\nBob.prototype.hey = function(message) {\n  var shouting = /^[^a-z]+$/;\n  var silence  = /^\\s*$/;\n  var question = /\\?$/;\n\n  switch (true) {\n    case silence.test(message):\n      return 'Fine. Be that way!';\n    case shouting.test(message):\n      return 'Woah, chill out!';\n    case question.test(message):\n      return 'Sure.';\n    default: \n      return 'Whatever.';\n  }\n};\n\nmodule.exports = Bob;	\N	f	4	2	2014-03-28 11:37:48	2014-03-28 11:37:48	135	bob.js
278	24	cbde3768badf1e313573693b	superseded	javascript	bob	var Responder = function() {};\n\nResponder.prototype.answer = function(message) {\n  var shouting = /^[^a-z]+$/;\n  var silence  = /^\\s*$/;\n  var question = /\\?$/;\n\n  switch (true) {\n    case silence.test(message):\n      response = 'Fine. Be that way!';\n      break;\n    case shouting.test(message):\n      response = 'Woah, chill out!';\n      break;\n    case question.test(message):\n      response = 'Sure.';\n      break;\n\n    default: \n      response = 'Whatever.';\n  }\n  \n  return response;\n};\n\n\nvar Bob = function() {};\n\nBob.prototype.hey = function(message, responder) {\n  responder = responder || new Responder();\n\n  return responder.answer(message);\n};\n\nmodule.exports = Bob;	\N	f	5	1	2014-05-19 14:19:12	2014-05-19 14:19:12	135	bob.js
279	24	243198634a2b29033001af5f	superseded	javascript	point-mutations	module.exports = function DNA(strand) {\n\n  function comparableLength(strand, otherStrand) {\n    if (strand.length < otherStrand.length) {\n      return strand.length;\n    } else {\n      return otherStrand.length;\n    }\n  }\n\n  return {\n\n    hammingDistance: function(otherStrand) {\n      var mutations = 0;\n      var commonLength = comparableLength(strand, otherStrand);\n      for (i=0; i < commonLength; i++) {\n        if (strand[i] !== otherStrand[i]) {\n          mutations++;\n        }\n      }\n      return mutations;\n    }\n\n  };\n\n};	\N	f	1	1	2014-03-26 08:44:42	2014-03-26 08:44:42	136	point-mutations.js
280	24	106655150b01e82884ddb149	superseded	javascript	point-mutations	module.exports = function DNA(strand) {\n\n  function comparableLength(strand, otherStrand) {\n    if (strand.length < otherStrand.length) {\n      return strand.length;\n    } else {\n      return otherStrand.length;\n    }\n  }\n\n  return {\n\n    hammingDistance: function(otherStrand) {\n      var mutations = 0;\n      var commonLength = comparableLength(strand, otherStrand);\n      for (i = 0; i < commonLength; i++) {\n        if (strand[i] !== otherStrand[i]) {\n          mutations++;\n        }\n      }\n      return mutations;\n    }\n\n  };\n\n};	\N	f	1	2	2014-03-27 01:48:39	2014-03-27 01:48:39	136	point-mutations.js
281	24	ed64e48b8bc634f620f83b22	done	javascript	point-mutations	module.exports = function DNA(strand) {\n\n  return {\n\n    hammingDistance: function(otherStrand) {\n      var mutations = 0;\n      var comparableLength = Math.min(strand.length, otherStrand.length);\n      for (i = 0; i < comparableLength; i++) {\n        if (strand[i] !== otherStrand[i]) {\n          mutations++;\n        }\n      }\n      return mutations;\n    }\n\n  };\n\n};	\N	f	0	3	2014-04-12 01:33:22	2014-04-12 01:33:22	136	point-mutations.js
282	24	ebada6608ec21fdf14f2172a	superseded	ruby	nucleotide-count	class DNA\n  NUCLEOTIDES = %w{ A C T G U}\n  DNA_NUCLEOTIDES = %w{ A C T G}\n\n  def initialize(chain)\n    @chain = chain\n  end\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.each_with_object(Hash.new(0)){|nucleotide, counts|\n      counts[nucleotide] = count(nucleotide)\n    }\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless NUCLEOTIDES.include?(nucleotide)\n    @chain.count(nucleotide)\n  end\nend	\N	f	3	3	2014-03-11 15:15:05	2014-03-11 15:15:05	137	nucleotide-count.rb
283	24	96742f68154f48f18766ae1a	done	ruby	nucleotide-count	class DNA\n  NUCLEOTIDES = %w{ A C T G U }\n\n  def initialize(chain)\n    @chain = chain\n  end\n\n  def nucleotide_counts\n    { 'A' => count('A'),\n      'C' => count('C'),\n      'T' => count('T'),\n      'G' => count('G') }\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless NUCLEOTIDES.include?(nucleotide)\n    @chain.count(nucleotide)\n  end\nend	\N	f	3	5	2014-03-19 14:32:18	2014-03-19 14:32:18	137	nucleotide-count.rb
284	24	cf2efcad1fa2223cb54f3e54	superseded	ruby	nucleotide-count	class DNA < String\n  NUCLEOTIDES = %w{ A C T G U}\n  DNA_NUCLEOTIDES = %w{ A C T G}\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.each_with_object(Hash.new(0)){|nucleotide, counts| counts[nucleotide] = count(nucleotide)}\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless NUCLEOTIDES.include?(nucleotide)\n    super\n  end\nend	\N	f	4	1	2014-04-13 11:00:28	2014-04-13 11:00:28	137	nucleotide-count.rb
287	24	99ecaddb4e005fe64816f181	hibernating	ruby	word-count	class Phrase\n  attr_accessor :new\n\n  def initialize(new ="")\n    @new = new\n  end\n\n  def word_count\n    newWord = @new.downcase.gsub(/[^a-z0-9' ]/, ' ')\n    tab = newWord.split\n    tabOfWords = []\n    countWords = {}\n    0.upto(tab.size - 1) do |element|\n      if !tabOfWords.include?(tab[element])\n        tabOfWords << tab[element]\n      end\n    end\n\n    for word in tabOfWords\n      num = tab.count(word)\n      countWords[word] = num\n    end\n    countWords\n  end\n\nend	\N	f	2	1	2014-03-22 14:17:41	2014-03-22 14:17:41	138	word-count.rb
289	24	3a3d1e18573186b0f13e2fc7	superseded	haskell	word-count	module WordCount (wordCount) where\nimport Data.Array ((!))\nimport Data.Char (toLower)\nimport Data.Map (Map, fromListWith)\nimport Text.Regex (mkRegex)\nimport Text.Regex.Posix (matchAllText)\n\nwordCount :: String -> Map String Int\nwordCount = countWords . splitStr . toLowerCase\n    where toLowerCase = map toLower\n          countWords = fromListWith (+)\n\nsplitStr :: String -> [(String, Int)]\nsplitStr s = map (\\m -> (fst (m!0), 1)) matches\n    where matches = matchAllText splitRe s\n          splitRe = mkRegex "[a-z0-9]+"	\N	f	4	1	2014-03-16 19:23:22	2014-03-16 19:23:22	140	word-count.hs
290	24	096d3f53aff05351757158c2	superseded	haskell	word-count	module WordCount (wordCount) where\nimport Data.Char (toLower, isAlphaNum, isSpace)\nimport Data.Map (Map, fromListWith)\nimport Data.String (words)\n\nwordCount :: String -> Map String Int\nwordCount = fromListWith (+) . splitWords\n\nsplitWords :: String -> [(String, Int)]\nsplitWords = mkPair . words . normalize\n    where mkPair = map (\\w -> (w, 1))\n          normalize = map (toLower . replace)\n\nreplace :: Char -> Char\nreplace c | isAlphaNum c || isSpace c = c\n          | otherwise = ' '	\N	f	0	2	2014-03-21 23:38:29	2014-03-21 23:38:29	140	word-count.hs
291	24	6de234555c52371da9f29edc	done	haskell	word-count	module WordCount (wordCount) where\nimport Data.Char (toLower, isAlphaNum)\nimport Data.List.Split (wordsBy)\nimport Data.Map (Map, fromListWith)\n\nwordCount :: String -> Map String Int\nwordCount = fromListWith (+) . map makePair . split\n    where makePair word = (map toLower word, 1)\n          split = wordsBy (not . isAlphaNum)	\N	f	0	3	2014-05-04 09:49:25	2014-05-04 09:49:25	140	word-count.hs
292	24	58074b58218ac636fc844324	done	clojure	leap	(defn leap-year [year]\n  (let [[a b c] (map #(= 0 (rem year %)) [4 100 400])]\n    (or (and a (not b)) (and b c))))	\N	f	2	1	2014-03-09 22:41:43	2014-03-09 22:41:43	141	leap.clj
293	24	12af9018c0cbbd694c3d4b0d	done	python	word-count	from collections import Counter\n\n\nclass Phrase(Counter):\n    def __init__(self, s):\n        return super().__init__(\n            "".join(c.lower() for c in s if c.isalnum() or c == " ").split())\n\n    def word_count(self):\n        return self	\N	f	1	1	2014-03-10 22:08:51	2014-03-10 22:08:51	142	word-count.py
294	24	914bec798913c449e9c94fa8	pending	ruby	raindrops	class Raindrops\n  def self.convert(input)\n    string = ""\n    string += "Pling" if factor_of_three?(input)\n    string += "Plang" if factor_of_five?(input)\n    string += "Plong" if factor_of_seven?(input)\n    string += input.to_s if string.empty?\n    string\n  end\n\n  def self.factor_of_three?(input)\n    input % 3 == 0\n  end\n\n  def self.factor_of_five?(input)\n    input % 5 == 0\n  end\n\n  def self.factor_of_seven?(input)\n    input % 7 == 0\n  end\nend	\N	f	2	1	2014-03-21 05:45:38	2014-03-21 05:45:38	143	raindrops.rb
295	24	c6bc1c7d520e1618dedd9dbc	superseded	ruby	anagram	class Anagram\n  attr_accessor :word, :anagrams\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(array)\n    @anagrams = []\n    array.each do |case_word|\n      if case_statement(case_word)\n        if case_word == word\n          break\n        else\n          @anagrams << case_word\n        end\n      end\n    end\n    return @anagrams\n  end\n\n  private\n\n  def case_statement(case_word)\n    case_word.downcase.split('').sort.eql? @word.downcase.split('').sort\n  end\n\nend	\N	f	3	2	2014-03-21 14:13:42	2014-03-21 14:13:42	144	anagram.rb
296	24	3a1bce78a7e89addabe8bf01	superseded	ruby	anagram	class Anagram\n  attr_accessor :word, :anagrams\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(array)\n    @anagrams = []\n    array.each do |case_word|\n      if case_statement(case_word)\n        case_word == word ? break : @anagrams << case_word end\n      end\n    end\n    return @anagrams\n  end\n\n  private\n\n  def case_statement(case_word)\n    case_word.downcase.split('').sort.eql? @word.downcase.split('').sort\n  end\n\nend	\N	f	6	3	2014-04-05 07:13:00	2014-04-05 07:13:00	144	anagram.rb
297	24	f9f4596284f4aa4ca228cc8f	done	ruby	anagram	class Anagram\n  attr_accessor :word, :anagrams\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(array)\n    @anagrams = []\n    array.each { |case_word| case_statement(case_word) ? (case_word == word ? break : @anagrams << case_word) : false }\n    return @anagrams\n  end\n\n  private\n\n  def case_statement(case_word)\n    case_word.downcase.split('').sort.eql? @word.downcase.split('').sort\n  end\n\nend	\N	f	6	4	2014-04-07 11:57:08	2014-04-07 11:57:08	144	anagram.rb
298	24	f017b833ee0f09b47afb044d	superseded	ruby	anagram	class Anagram\n  attr_accessor :word, :anagrams\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(array)\n    @anagrams = []\n    array.each do |case_word|\n      if case_word.downcase.split('').sort.eql? @word.downcase.split('').sort\n        if case_word == @word\n          break\n        end\n        @anagrams << case_word\n      end\n    end\n    return @anagrams\n  end\n\nend	\N	f	0	1	2014-04-13 01:07:38	2014-04-13 01:07:38	144	anagram.rb
299	24	d6e17560f927a4b458bda1bd	done	go	leap	package leap\n\nfunc IsLeapYear(i int) bool {\n  return i%4 == 0 && i%100 != 0 || i%400 == 0\n}	\N	f	5	1	2014-04-13 23:08:44	2014-04-13 23:08:44	145	leap.go
300	24	2604660410a0ae1fc1c524f2	hibernating	clojure	word-count	(ns phrase\n  (:require [clojure.string :as str]))\n\n(defn- split-words [s] (str/split s #"[^a-z0-9]+"))\n\n(defn word-count\n  "returns a map of word counts in the given sentence"\n  [sentence]\n  (-> sentence\n      str/lower-case\n      split-words\n      frequencies))	\N	f	2	4	2014-03-29 14:19:20	2014-03-29 14:19:20	146	word-count.clj
302	24	75da41d0d524d9d89b0fe41c	superseded	clojure	word-count	(ns phrase\n  (:require [clojure.string :as str]))\n\n(defn- strip-chars [s] (str/replace s #"[^ a-z0-9]" ""))\n(defn- split-words [s] (str/split s #" +"))\n\n(defn word-count\n  "returns a map of word counts in the given sentence"\n  [sentence]\n  (-> sentence\n      str/lower-case\n      strip-chars\n      split-words\n      frequencies))	\N	f	3	3	2014-05-12 13:12:01	2014-05-12 13:12:01	146	word-count.clj
304	24	44fa491ffc6c5d919603e111	superseded	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance a b = sum . map fromEnum $ zipWith (/=) a b	\N	f	4	1	2014-03-25 04:16:20	2014-03-25 04:16:20	147	point-mutations.hs
305	24	c330b37df67cd8a84904324c	done	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance a b = length . filter id $ zipWith (/=) a b	\N	f	4	2	2014-04-09 06:08:45	2014-04-09 06:08:45	147	point-mutations.hs
306	18	46801acd1d8976e0971dd41c	pending	javascript	anagram	function Anagram(word) {\n    this.match = (function(word) {\n      \n      function areMatchingWords(a, b) {\n        return (a.toLowerCase() == b.toLowerCase());\n      }\n      \n      function containTheSameLetters(a, b) {\n        return (a.toLowerCase().split('').sort().join('') == b.toLowerCase().split('').sort().join(''))\n      }\n      \n      return function(words) {\n        var anagrams = [];\n        words.forEach(function(candidate, index){\n          if (!areMatchingWords(candidate, word) && containTheSameLetters(word, candidate)) {\n            anagrams.push(candidate);\n          }\n        })\n        return anagrams;\n      }\n    })(word)\n}\n\n\nmodule.exports = Anagram;	\N	f	2	1	2014-01-16 12:11:57	2014-01-16 12:11:57	148	anagram.js
307	18	2cf792b3ae66e8b85362814b	done	javascript	largest-series-product	// Because parseInt(n) is cheating\r\nvar decKey = {\r\n  "0":0, "1":1, "2":2, "3":3, "4":4, "5":5, "6":6,\r\n  "7":7, "8":8, "9":9\r\n};\r\n\r\nvar Series = function(decimalString) {\r\n  var length = decimalString.length;\r\n  this.digits = decimalString.split("").map(function(x) {\r\n    return decKey[x];\r\n  }),\r\n  self = this;\r\n\r\n  this.slices = function(len) {\r\n    var slcs = [], i;\r\n\r\n    if(len > length)\r\n      throw(new Error("Slice size is too big."));\r\n\r\n    for(i = 0; i <= length - len; i++) {\r\n      slcs.push(self.digits.slice(i, i + len));\r\n    }\r\n\r\n    return slcs;\r\n  };\r\n\r\n  this.largestProduct = function(len) {\r\n    return self.slices(len).reduce(function(largest, slice) {\r\n      var product = slice.reduce(function(p, n) {\r\n        return p * n;\r\n      }, 1);\r\n      if(product > largest)\r\n        return product;\r\n      else\r\n        return largest;\r\n    }, 0);\r\n  }\r\n};\r\n\r\nmodule.exports = Series;\r	\N	f	2	1	2014-02-14 21:12:42	2014-02-14 21:12:42	149	largest-series-product.js
308	18	8a3d8add290d775cad0caacd	pending	ruby	grains	class Grains\n  def square(pow)\n    2**(pow - 1)\n  end\n  def total\n    square(65) - 1\n  end\nend	\N	f	4	1	2014-04-09 09:51:09	2014-04-09 09:51:09	150	grains.rb
309	18	2745484537c35553a4df22cd	done	ruby	word-count	class Phrase\n\n  def initialize(words)\n    @words = cleaned_words(words)\n  end\n\n  def word_count\n    @words.each_with_object({}) do |word, counts|\n      counts[word] ? counts[word] += 1 : counts[word] = 1\n    end\n  end\n\n  def cleaned_words(words)\n    words.tr('^0-9A-Za-z, ', '').downcase.gsub(',', ' ').split\n  end\n\nend	\N	f	2	5	2013-09-21 21:24:25	2013-09-21 21:24:25	151	word-count.rb
310	18	30f188aeac9996148b9cde86	superseded	ruby	word-count	class Phrase\n\n  attr_reader :phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n    @words = clean\n  end\n\n  def word_count\n    hash = {}\n    @words.each do |word|\n      hash[word] ? hash[word] += 1 : hash[word] = 1\n    end\n    hash    \n  end\n\n  private\n  def clean\n    phrase.gsub(',', ' ').tr('^0-9A-Za-z ', '').downcase.split(' ')\n  end\n\nend 	\N	f	0	3	2013-11-27 07:05:56	2013-11-27 07:05:56	151	word-count.rb
311	18	9dfd0619901d673eebb7350b	superseded	ruby	word-count	class Phrase\n\n  attr_reader :phrase\n\n  def initialize(phrase)\n    @phrase = clean(phrase)\n    @words = phrase.split(' ')\n  end\n\n  def word_count\n    hash = {}\n    @words.each do |word|\n      hash[word] ? hash[word] += 1 : hash[word] = 1\n    end\n    hash    \n  end\n\n  private\n  def clean(phrase)\n    phrase.gsub(',', ' ').tr('^0-9A-Za-z ', '').downcase\n  end\n\nend 	\N	f	5	2	2014-02-04 01:32:13	2014-02-04 01:32:13	151	word-count.rb
312	18	fcca5fe91c6317cc9a1f521c	superseded	ruby	word-count	class Phrase\n\n  attr_reader :phrase\n\n  def initialize(phrase)\n    @phrase = clean(phrase)\n  end\n\n  def word_count\n    hash = {}\n    phrase.split(' ').each do |word|\n      word = word.downcase\n      hash[word] ? hash[word] += 1 : hash[word] = 1\n    end\n    hash    \n  end\n\n  private\n  def clean(phrase)\n    phrase.gsub(',', ' ').tr('^0-9A-Za-z ', '')\n  end\n\nend 	\N	f	4	1	2014-02-16 19:15:26	2014-02-16 19:15:26	151	word-count.rb
313	18	86d122c1cb9ce91361bc61e8	superseded	ruby	word-count	class Phrase\n\n  def initialize(line)\n    @words = line.downcase.gsub(',',' ').tr('^0-9A-Za-z ', '').split(" ")\n  end\n\n  def word_count\n    hash = {}\n    @words.each do |word|\n      hash[word] ? hash[word] += 1 : hash[word] = 1\n    end\n    hash\n  end\n\nend	\N	f	5	4	2014-02-20 02:14:52	2014-02-20 02:14:52	151	word-count.rb
314	18	00cd0d1764aa488e0b853a27	done	ruby	bob	class Bob\r\n\r\n\tdef hey(message)\r\n\t\tcase\r\n\t\twhen !message.match(/\\S/)\r\n\t\t\t"Fine. Be that way!"\r\n\t\twhen message == message.upcase && message.match(/[A-Za-z]/)\r\n\t\t\t"Woah, chill out!"\r\n\t\twhen message.end_with?("?")\r\n\t\t\t"Sure."\r\n\t\telse\r\n\t\t\t"Whatever."\r\n\t\tend\r\n\tend\r\nend	\N	f	0	1	2014-03-16 11:52:26	2014-03-16 11:52:26	152	bob.rb
315	18	4643f48a04b78908b7b33940	pending	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n    // Check base case\n    if year % 4 == 0 {\n\n        // Handle centuries\n        if (year % 100 == 0) && !(year % 400 == 0) {\n            return false\n        }\n\n        return true\n    }\n\n    return false\n}	\N	f	0	1	2013-09-27 08:17:57	2013-09-27 08:17:57	153	leap.go
393	25	bfe69e91e24f852138eab8ba	done	ruby	grade-school	class School\n \n  attr_reader :db\n  \n  def initialize\n    @db = Hash.new { [] }\n  end\n\n  def add student, grade\n    db[grade] <<= student\n  end\n  \n  def grade level\n    db.fetch(level) { [] }.sort\n  end\n  \n  def to_hash\n    Hash[db.sort.each { |_,students| students.sort! }]\n  end\n\nend	\N	f	2	5	2013-12-10 14:57:46	2013-12-10 14:57:46	192	school.rb
317	18	b58ed332a9c2169d487e1fdc	superseded	ruby	raindrops	#!/usr/bin/env ruby -w\n# encoding: UTF-8\n\nclass Raindrops\n\n  DICTIONARY = {\n    3 => "Pling",\n    5 => "Plang",\n    7 => "Plong"\n  }\n\n  def convert(n)\n    factors = DICTIONARY.select do |k, _|\n      n % k == 0\n    end\n\n    factors.empty? ? String(n) : factors.values.join\n  end\n\nend	\N	f	0	1	2013-10-05 08:54:42	2013-10-05 08:54:42	155	raindrops.rb
318	18	f727526de119a0bf07a2154f	superseded	ruby	raindrops	#!/usr/bin/env ruby -w\n# encoding: UTF-8\n\nclass Raindrops\n\n  DICTIONARY = {\n    3 => "Pling",\n    5 => "Plang",\n    7 => "Plong"\n  }\n\n  def convert(input_number)\n    if (translated = prime_factors(input_number)).empty?\n      String(input_number)\n    else\n      translated.values.join\n    end\n  end\n\n  private\n\n  def prime_factors(number)\n    DICTIONARY.select { |prime, _| Integer(number) % prime == 0 }\n  end\n\nend	\N	f	2	2	2013-10-05 22:21:18	2013-10-05 22:21:18	155	raindrops.rb
319	18	1f2c77dece066c0945a779cb	superseded	ruby	raindrops	#!/usr/bin/env ruby -w\n# encoding: UTF-8\n\nclass Raindrops\n\n  DICTIONARY = {\n    3 => "Pling",\n    5 => "Plang",\n    7 => "Plong"\n  }\n\n  def convert(input)\n    if has_factors?(input)\n      translate(input)\n    else\n      String(input)\n    end\n  end\n\n  private\n\n  def has_factors?(number)\n    DICTIONARY.any?(&factors_of?(number))\n  end\n\n  def translate(number)\n    DICTIONARY.select(&factors_of?(number)).values.join\n  end\n\n  def factors_of?(number)\n    ->(*factor) { Integer(number) % (factor.flatten[0]) == 0 }\n  end\n\nend	\N	f	0	3	2013-11-12 11:02:50	2013-11-12 11:02:50	155	raindrops.rb
320	18	807667360460e630c7e800b0	pending	ruby	raindrops	#!/usr/bin/env ruby -w\n# encoding: UTF-8\n\nclass Raindrops\n\n  DICTIONARY = {\n    3 => "Pling",\n    5 => "Plang",\n    7 => "Plong"\n  }\n\n  def convert(input)\n    if has_factors?(input)\n      translate(input)\n    else\n      String(input)\n    end\n  end\n\n  private\n\n  def has_factors?(number)\n    DICTIONARY.any?(&factors_of(number))\n  end\n\n  def translate(number)\n    DICTIONARY.select(&factors_of(number)).values.join\n  end\n\n  def factors_of(subject)\n    ->(*candidate) { factor?(candidate.flatten[0], subject) }\n  end\n\n  def factor?(candidate, subject)\n    Integer(subject) % candidate == 0\n  end\n\nend	\N	f	2	4	2014-03-02 08:31:18	2014-03-02 08:31:18	155	raindrops.rb
321	18	47c46a0157bfa853e3b34974	done	haskell	prime-factors	module PrimeFactors (primeFactors) where\n\nprimeFactors :: Int -> [Int]\nprimeFactors = factorsFrom 2 where\n    factorsFrom _ 1 = []\n    factorsFrom start n = d : (factorsFrom d $ n `div` d) where\n        (d : _) = filter ((== 0) . mod n) [start..]	\N	f	2	1	2013-10-22 21:34:46	2013-10-22 21:34:46	156	prime-factors.hs
322	18	bd214ecff80235fdb7bfd2fb	done	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char\n\n-- |Bob's response to an utterance.\nresponseFor :: String -> String\nresponseFor text\n\t| all isSpace text = "Fine. Be that way!"\n\t| any isLetter text && all (not . isLower) text = "Woah, chill out!"\n\t| last text == '?' = "Sure."\n\t| otherwise = "Whatever."	\N	f	2	1	2014-01-02 09:16:55	2014-01-02 09:16:55	157	bob.hs
324	18	0dd13ed79004052f13d6ddd5	pending	python	space-age	EARTH_YEAR_IN_SECONDS = 31557600.0\n\nPLANET_YEARS = {'earth': 1.0, 'mercury': 0.2408467,\n                'venus': 0.61519726, 'mars': 1.8808158,\n                'jupiter': 11.862615, 'saturn': 29.447498,\n                'uranus': 84.016846, 'neptune': 164.79132}\n\n\nclass SpaceAge(object):\n\n    """Age calculator for different planets."""\n\n    def __init__(self, seconds):\n        """Create new age calculator with given age in earth seconds."""\n        self.seconds = seconds\n        for planet in PLANET_YEARS:\n            self._add_method(planet)\n\n    def _on_planet(self, planet):\n        "Return age in planet years."\n        return round(self.seconds / EARTH_YEAR_IN_SECONDS /\n                     PLANET_YEARS[planet], 2)\n\n    def _add_method(self, planet):\n        """Add method to return age in planet years."""\n        func = lambda: self._on_planet(planet)\n        func.__name__ = "on_" + planet\n        func.__doc__ = "Return age in " + planet + " years."\n        self.__setattr__(func.__name__, func)	\N	f	0	2	2014-03-31 12:45:42	2014-03-31 12:45:42	158	space_age.py
325	18	e51408049e4cc85e2418ba99	done	javascript	point-mutations	var DNA = function(originalStrand){\n    this.hammingDistance = function(secondStrand){\n        var mutations = 0;\n        var shortestLength = Math.min(originalStrand.length,\n                                      secondStrand.length);\n        for (var i = 0; i < shortestLength; i++){\n            if (originalStrand[i] !== secondStrand[i]){\n                mutations++;\n            }\n        }\n        return mutations;\n    };\n};\n\nmodule.exports = DNA;	\N	f	0	2	2013-11-25 03:19:01	2013-11-25 03:19:01	159	point-mutations.js
326	18	fa9ddfe003a94f9d04af79e2	superseded	javascript	point-mutations	var DNA = function(originalStrand){\n    this.hammingDistance = function(secondStrand){\n        var mutations = 0;\n        var shortestLength = 0;\n        if (originalStrand && secondStrand){\n            shortestLength = Math.min(originalStrand.length,\n                                      secondStrand.length);\n        }\n        for (var i = 0; i < shortestLength; i++){\n            if (originalStrand[i] !== secondStrand[i]){\n                mutations++;\n            }\n        }\n        return mutations;\n    };\n};\n\nmodule.exports = DNA;	\N	f	2	1	2014-04-17 15:17:26	2014-04-17 15:17:26	159	point-mutations.js
328	18	3f5d9fe9d878f2bb30e6dbc9	superseded	clojure	anagram	(ns anagram (:require [clojure.string :refer [lower-case]]))\n\n(defn anagrams-for [word, candidates]\n  (letfn [\n    (characters_in [candidate]\n      (sort (lower-case candidate)))\n    (is_anagram? [candidate]\n      (= (characters_in word) (characters_in candidate)))\n  ] (filter is_anagram? candidates)))	\N	f	2	1	2013-10-26 01:48:06	2013-10-26 01:48:06	161	anagram.clj
329	18	e4c686d3fea5bab02af82c3c	superseded	clojure	anagram	(ns anagram (:require [clojure.string :refer [lower-case]]))\n\n(defn anagrams-for [word, candidates]\n  (letfn [(characters-in [candidate]\n      (frequencies (lower-case candidate)))]\n    (let [target-characters (characters-in word)]\n      (letfn [(is-anagram? [candidate]\n          (= target-characters (characters-in candidate)))]\n        (filter is-anagram? candidates)))))	\N	f	2	2	2013-10-29 03:59:03	2013-10-29 03:59:03	161	anagram.clj
330	18	6525453839c2c787e3b54ce8	superseded	clojure	anagram	(ns anagram \n  (:require [clojure.string :refer [lower-case]]))\n\n(defn anagrams-for [word, candidates]\n  (let [characters-in (fn [candidate]\n          (frequencies (lower-case candidate)))\n        target-characters (characters-in word)\n        anagram? (fn [candidate]\n          (= target-characters (characters-in candidate)))]\n    (filter anagram? candidates)))	\N	f	2	3	2013-12-19 18:04:23	2013-12-19 18:04:23	161	anagram.clj
331	18	d394aa34d5fe9ca197191ce5	done	clojure	anagram	(ns anagram \n  (:require [clojure.string :refer [lower-case]]))\n\n(defn anagrams-for [word, candidates]\n  (let [characters-in (fn [candidate]\n                        (frequencies (lower-case candidate)))\n        target-characters (characters-in word)\n        anagram? (fn [candidate]\n                    (= target-characters (characters-in candidate)))]\n    (filter anagram? candidates)))	\N	f	3	4	2014-01-24 07:14:31	2014-01-24 07:14:31	161	anagram.clj
332	18	410bfa616306a9690fb1d7e1	done	ruby	gigasecond	class Gigasecond\n  attr_reader :birthday\n\n  def initialize(birthday)\n    @birthday = birthday\n  end\n\n  def date\n    (birthday.to_time + 1_000_000_000).to_date\n  end\nend	\N	f	1	1	2014-01-01 13:28:57	2014-01-01 13:28:57	162	gigasecond.rb
333	23	d21380036bd7b601f7df339d	hibernating	haskell	rna-transcription	module DNA where\n\ntoRNA :: String -> String\ntoRNA = map rnaTrans\n    where rnaTrans 'G' = 'C'\n          rnaTrans 'C' = 'G'\n          rnaTrans 'T' = 'A'\n          rnaTrans 'A' = 'U'\n          rnaTrans x   = x	\N	f	2	1	2014-02-07 12:18:33	2014-02-07 12:18:33	163	DNA.hs
335	23	3c0426a9b03a1faa292d10ba	superseded	javascript	beer-song	Beer = {};\n\n(function () {\n  Beer.verse = function(number) {\n    return capitalize(stanza(number)) + " on the wall, " +\n           stanza(number) + ".\\n" + \n           action(number) + ", " +\n           stanza(number - 1) + " on the wall.\\n";\n  };\n\n  Beer.sing = function(startFrom, downTo) {\n    if (typeof(downTo) === 'undefined') {\n      downTo = 0;\n    }\n\n    var verseNumber, verses = [];\n    for (verseNumber = startFrom; verseNumber >= downTo; verseNumber--) {\n      verses.push(this.verse(verseNumber));\n    }\n    return verses.join("\\n")\n  }\n\n  function stanza(number) {\n    return number < 0 ?\n           stanza(99) :\n           count(number) + " " + bottles(number) + " of beer";\n  }\n\n  function count(number) {\n    return number > 0 ? number.toString() : "no more";\n  }\n\n  function bottles(number) {\n    var bottle = "bottle";\n    if (number !== 1) { bottle = bottle + "s" }\n    return bottle;\n  }\n\n  function action(number) {\n    return number > 0 ?\n           "Take " + it(number) + " down and pass it around" :\n           "Go to the store and buy some more";\n  }\n\n  function it(number) {\n    return number > 1 ? "one" : "it";\n  }\n\n  function capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n})()	\N	f	2	1	2014-02-06 15:16:03	2014-02-06 15:16:03	164	beer-song.js
346	23	6c6e8f9fd16b2de5d5e45735	superseded	ruby	anagram	class Anagram\n  attr_accessor :a_word\n  def initialize(word="")\n    @a_word = word.downcase\n  end\n  def match(word_arr)\n    match_arr = Array.new\n    word_arr.each do |w|\n      if (word_is_anagram?(w))\n        match_arr.push(w)\n      end\n    end\n    match_arr\n  end\n  private\n  def word_is_anagram?(word)\n    word = word.downcase\n    @a_word_hash = letter_count_hash(@a_word.downcase)\n    word_hash = letter_count_hash(word)\n    bool_flag = true\n    bool_flag = false if @a_word == word\n    word_hash.each do |key,val|\n      if (!@a_word_hash.has_key?(key)||@a_word_hash.keys.length!=word_hash.keys.length||@a_word_hash[key]!=val)\n        bool_flag = false\n      end\n    end\n    return bool_flag\n  end\n  def letter_count_hash(word)\n    @letter_hash = Hash.new\n    word.each_char do |letter|\n      @letter_hash[letter] = (@letter_hash[letter].nil?) ? 0 : @letter_hash[letter]+1\n    end\n    @letter_hash\n  end\nend	\N	f	3	1	2014-01-17 12:03:34	2014-01-17 12:03:34	169	anagram.rb
337	23	87ce7517d8435c89fa59c312	done	javascript	beer-song	Beer = function (beverage) {\n  if (!(this instanceof Beer)) {\n    return Object.create(Beer);\n  }\n\n  this.beverage = beverage;\n};\n\n(function () {\n  Beer.verse = function(number) {\n    return capitalize(stanza(number, this.beverage)) + " " +\n             where() + ", " +\n           stanza(number, this.beverage) + ".\\n" + \n           action(number) + ", " +\n           stanza(number - 1, this.beverage) + " " +\n             where() + ".\\n";\n  };\n\n  Beer.sing = function(startFrom, downTo) {\n    var verseNumber, verses = [];\n\n    if (typeof(downTo) === 'undefined') {\n      downTo = 0;\n    }\n\n    for (verseNumber = startFrom; verseNumber >= downTo; verseNumber--) {\n      verses.push(this.verse(verseNumber));\n    }\n\n    return verses.join("\\n")\n  };\n\n  Beer.prototype = Beer;\n\n  function where() {\n    return "on the wall";\n  }\n\n  function stanza(number, beverage) {\n    return number < 0 ?\n           stanza(99) :\n           count(number) + " " + bottles(number) + " of " + (beverage || "beer");\n  }\n\n  function count(number) {\n    return number > 0 ? number.toString() : "no more";\n  }\n\n  function bottles(number) {\n    var bottle = "bottle";\n    if (number !== 1) { bottle = bottle + "s" }\n    return bottle;\n  }\n\n  function action(number) {\n    return number > 0 ?\n           "Take " + it(number) + " down and pass it around" :\n           "Go to the store and buy some more";\n  }\n\n  function it(number) {\n    return number > 1 ? "one" : "it";\n  }\n\n  function capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n})()	\N	f	3	4	2014-04-28 00:50:12	2014-04-28 00:50:12	164	beer-song.js
338	23	a85d0945b4ac3a086585e863	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn year%4 == 0 && (year%100 != 0 || year%400 == 0)\n}	\N	f	2	2	2014-02-03 05:51:45	2014-02-03 05:51:45	165	leap.go
339	23	cca32f984f44e0279cfb6e12	superseded	go	leap	package leap\n\nimport "math"\n\nfunc IsLeapYear(year int) bool {\n\tif isFourthYear(year) && (!isCentury(year) || isExceptionalCentury(year)) {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\nfunc isFourthYear(year int) bool {\n\treturn isMultiple(year, 4)\n}\n\nfunc isCentury(year int) bool {\n\treturn isMultiple(year, 100)\n}\n\nfunc isExceptionalCentury(year int) bool {\n\treturn isMultiple(year, 400)\n}\n\nfunc isMultiple(x, y int) bool {\n\txf := float64(x)\n\tyf := float64(y)\n\tif math.Mod(xf, yf) == 0 {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}	\N	f	0	1	2014-03-29 14:12:38	2014-03-29 14:12:38	165	leap.go
340	23	f219890f7b83f48a5aa99e09	pending	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n\treturn isFourthYear(year) && (!isCentury(year) || isExceptionalCentury(year))\n}\n\nfunc isFourthYear(year int) bool {\n\treturn year%4 == 0\n}\n\nfunc isCentury(year int) bool {\n\treturn year%100 == 0\n}\n\nfunc isExceptionalCentury(year int) bool {\n\treturn year%400 == 0\n}	\N	f	3	3	2014-03-30 05:11:55	2014-03-30 05:11:55	165	leap.go
341	23	a0dcdbe3ea5a508aa5abffd4	superseded	python	largest-series-product	def product(some_list):\n    p = 1\n    for i in some_list:\n        p = i * p\n    return p\n\n\nclass Series(object):\n    def __init__(self, string):\n        self.digits = [int(c) for c in string]\n\n    def slices(self, size):\n        if size > len(self.digits):\n            raise ValueError('Invalid slice length for this series: {}'.format(size))\n        else:\n            return [self.digits[x:x+size] for x in range(len(self.digits) + 1 - size)]\n\n    def largest_product(self, size):\n        return sorted([product(s) for s in self.slices(size)])[-1]	\N	f	2	1	2014-01-28 00:29:19	2014-01-28 00:29:19	166	series.py
342	23	aa701e791f455bd81726c51a	pending	python	largest-series-product	def product(some_list):\n    p = 1\n    for i in some_list:\n        p = i * p\n    return p\n\n\nclass Series(object):\n    def __init__(self, string):\n        self.digits = [int(c) for c in string]\n\n    def slices(self, size):\n        if size > len(self.digits):\n            raise ValueError('Invalid slice length for this series: {}'.format(size))\n        else:\n            return [self.digits[x:x+size] for x in range(len(self.digits) + 1 - size)]\n\n    def largest_product(self, size):\n        return max([product(s) for s in self.slices(size)])	\N	f	2	2	2014-05-12 16:12:06	2014-05-12 16:12:06	166	series.py
343	23	d8ad922cce05d8351ac792f9	superseded	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    return true if (@year % 400).zero?\n    return false if (@year % 100).zero?\n    return true if (@year % 4).zero?\n    return false\n  end\nend	\N	f	2	1	2014-01-21 16:45:33	2014-01-21 16:45:33	167	leap.rb
344	23	c0d9bef979d74bd43c7d4122	done	ruby	leap	require 'debugger'\nclass Year\n  EXCEPTIONAL_CENTURY = 400\n  CENTURY = 100\n  ELECTION_YEAR = 4\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    return true if (@year % EXCEPTIONAL_CENTURY).zero?\n    return false if (@year % CENTURY).zero?\n    return true if (@year % ELECTION_YEAR).zero?\n    return false\n  end\nend	\N	f	2	2	2014-02-11 04:06:29	2014-02-11 04:06:29	167	leap.rb
345	23	ddf8c27d1054b1ab202f143a	pending	python	allergies	"""Allergies"""\n\n\nclass Allergies(object):\n    """Allergy Score"""\n\n    ITEM_TO_BITFLAG = (\n        ("eggs", 1), ("peanuts", 2), ("shellfish", 4), ("strawberries", 8),\n        ("tomatoes", 16), ("chocolate", 32), ("pollen", 64), ("cats", 128)\n    )\n\n    def __init__(self, score):\n        """Create an allergy score."""\n        self.list = []\n        for item, bitflag in Allergies.ITEM_TO_BITFLAG:\n            if score & bitflag:\n                self.list.append(item)\n\n    def is_allergic_to(self, item):\n        """Return true if the score indicates an allergy to a given item."""\n        return item in self.list	\N	f	2	1	2014-01-27 03:18:55	2014-01-27 03:18:55	168	allergies.py
437	20	6025d2201a6f41e5999c43b4	done	haskell	rna-transcription	module DNA (toRNA) where\r\n\r\ntoRNA :: String -> String\r\ntoRNA = map complement\r\n  where complement 'G' = 'C'\r\n        complement 'C' = 'G'\r\n        complement 'T' = 'A'\r\n        complement 'A' = 'U'\r	\N	f	4	1	2014-03-27 08:57:33	2014-03-27 08:57:33	213	DNA.hs
348	23	3c87c088bf3c8fdb2903e2e4	superseded	ruby	anagram	class Anagram\n  attr_accessor :a_word\n  def initialize(word="")\n    @a_word = word.downcase\n  end\n  def match(word_arr)\n    match_arr = Array.new\n    word_arr.each do |w|\n      if (word_is_anagram?(w))\n        match_arr.push(w)\n      end\n    end\n    match_arr\n  end\n  private\n  def word_is_anagram?(word)\n    word = word.downcase\n    return false if @a_word == word #don't allow identical words as anagrams\n    @a_word_hash = letter_count_hash(@a_word.downcase)\n    word_hash = letter_count_hash(word)\n    return false unless same_number_of_letters?(@a_word_hash,word_hash)\n    bool_flag = true\n    word_hash.each do |key,val|\n      if (!@a_word_hash.has_key?(key)||@a_word_hash[key]!=val)\n        bool_flag = false\n      end\n    end\n    return bool_flag\n  end\n  def same_number_of_letters?(word1_hash,word2_hash)\n    word1_hash.keys.length==word2_hash.keys.length\n  end\n  def letter_count_hash(word)\n    #{"dab"=>1,"bad"=>3,"etc"=>4}\n    @letter_hash = Hash.new\n    word.each_char do |letter|\n      @letter_hash[letter] = (@letter_hash[letter].nil?) ? 0 : @letter_hash[letter]+1\n    end\n    @letter_hash\n  end\nend	\N	f	3	2	2014-02-01 22:14:40	2014-02-01 22:14:40	169	anagram.rb
349	23	b7ce379e3f0da95f81287dd1	superseded	ruby	anagram	class Anagram\n  attr_reader :subject\n  \n  def initialize(word)\n    @subject = word.downcase\n  end\n  \n  def match(candidates)\n    candidates.select { |candidate| anagram?(candidate.downcase) }\n  end\n  \n  private\n  \n  def anagram?(candidate)\n    !identical_word?(candidate) && same_letter_frequency?(candidate)\n  end\n  \n  def same_letter_frequency?(candidate)\n    count_letters(candidate) == count_letters(subject)\n  end\n  \n  def count_letters(letters)\n    Hash.new(0).tap do |letter_counts|\n      letters.each_char { |letter| letter_counts[letter] += 1 }\n    end\n  end\n\n  def identical_word?(word)\n    subject == word\n  end\n\nend	\N	f	3	11	2014-02-09 13:46:45	2014-02-09 13:46:45	169	anagram.rb
350	23	2c59c59348e95ec72db4c4e0	superseded	ruby	anagram	class Anagram\n  attr_accessor :a_word\n  def initialize(word="")\n    @a_word = word.downcase\n  end\n  def match(word_arr)\n    match_arr = Array.new\n    word_arr.each do |w|\n      if (word_is_anagram?(w))\n        match_arr.push(w)\n      end\n    end\n    match_arr\n  end\n  private\n  def word_is_anagram?(word)\n    temp_word = word.downcase\n    return false if @a_word == temp_word #don't allow identical words as anagrams\n    @a_word_hash = letter_count_hash(@a_word.downcase)\n    word_hash = letter_count_hash(temp_word)\n    return false unless same_number_of_letters?(@a_word_hash,word_hash)\n    bool_flag = true\n    word_hash.each do |key,val|\n      unless @a_word_hash.key?(key)&&@a_word_hash[key]==val\n        bool_flag = false\n      end\n    end\n    return bool_flag\n  end\n  def same_number_of_letters?(word1_hash,word2_hash)\n    word1_hash.keys.length==word2_hash.keys.length\n  end\n  def letter_count_hash(word)\n    #{"dab"=>1,"bad"=>3,"etc"=>4}\n    @letter_hash = Hash.new\n    word.each_char do |letter|\n      @letter_hash[letter] = (@letter_hash[letter].nil?) ? 0 : @letter_hash[letter]+1\n    end\n    @letter_hash\n  end\nend	\N	f	0	3	2014-02-14 22:51:33	2014-02-14 22:51:33	169	anagram.rb
351	23	f362b3d2f7ac2e84dfa0a59c	superseded	ruby	anagram	class Anagram\n  attr_accessor :subject\n  \n  def initialize(word="")\n    @subject = word\n  end\n  \n  def match(words)\n    matches =  []\n    words.each do |word|\n      if (perfect_anagram?(word))\n        matches.push(word)\n      end\n    end\n    matches\n  end\n  \n  private\n  \n  def perfect_anagram?(word)\n    #perfect anagrams have the same number of letters as the original subject\n    return false if @subject == word.downcase #don't allow identical words as anagrams\n    subject_letter_counts = count_letters(@subject.downcase)\n    letter_counts = count_letters(word.downcase)\n    return false unless same_letters?(subject_letter_counts,letter_counts)\n    letter_counts.all? {|key,val| subject_letter_counts.key?(key) && subject_letter_counts[key] == val}\n  end\n  \n  def same_letters?(letter_counts1, letter_counts2)\n    letter_counts1.keys.length == letter_counts2.keys.length\n  end\n\n  def count_letters(word)\n    #{"b"=>1,"d"=>3,"e"=>4}\n    @letter_counts = {}\n    word.each_char do |letter|\n      @letter_counts[letter] = @letter_counts[letter].nil? ? 0 : @letter_counts[letter] + 1\n    end\n    @letter_counts\n  end\n\nend	\N	f	1	5	2014-02-19 02:06:51	2014-02-19 02:06:51	169	anagram.rb
352	23	84b4cab9fa539ab8e2aec6e2	superseded	ruby	anagram	class Anagram\n  attr_accessor :subject\n  \n  def initialize(word="")\n    @subject = word.downcase\n  end\n  \n  def match(possible_anagrams)\n    matches = possible_anagrams.select { |possible_anagram| anagram?(possible_anagram.downcase) }\n  end\n  \n  private\n  \n  def anagram?(possible_anagram)\n    unidentical_word?(possible_anagram) && same_letter_frequency?(possible_anagram)\n  end\n  \n  def same_letter_frequency?(possible_anagram)\n    letter_counts = count_letters(possible_anagram)\n    subject_letter_counts = count_letters(@subject)\n    letter_counts.keys.length == subject_letter_counts.keys.length && letter_counts.all? {|letter,count| subject_letter_counts.key?(letter) && subject_letter_counts[letter] == count}\n  end\n  \n  def count_letters(word)\n    #{"b"=>1,"d"=>3,"e"=>4}\n    letter_counts = {}\n    word.each_char do |letter|\n      letter_counts[letter] = letter_counts[letter].nil? ? 0 : letter_counts[letter] + 1\n    end\n    letter_counts\n  end\n\n  def unidentical_word?(word)\n    @subject != word.downcase\n  end\n\nend	\N	f	3	7	2014-02-26 19:16:59	2014-02-26 19:16:59	169	anagram.rb
353	23	462400d0360a5ad175879fd7	superseded	ruby	anagram	class Anagram\n  attr_accessor :subject\n  \n  def initialize(word="")\n    @subject = word.downcase\n  end\n  \n  def match(candidates)\n    candidates.select { |candidate| anagram?(candidate.downcase) }\n  end\n  \n  private\n  \n  def anagram?(candidate)\n    !identical_word?(candidate) && same_letter_frequency?(candidate)\n  end\n  \n  def same_letter_frequency?(candidate)\n    letter_counts = count_letters(candidate)\n    subject_letter_counts = count_letters(@subject)\n    letter_counts.eql?(subject_letter_counts)\n  end\n  \n  def count_letters(word)\n    #{"b"=>1,"d"=>3,"e"=>4}\n    letter_counts = Hash.new(0)\n    word.each_char do |letter|\n      letter_counts[letter] += 1\n    end\n    letter_counts\n  end\n\n  def identical_word?(word)\n    @subject == word\n  end\n\nend	\N	f	0	8	2014-02-28 19:48:00	2014-02-28 19:48:00	169	anagram.rb
355	23	14f51e34d9b0898b8868f00f	superseded	ruby	anagram	class Anagram\n  attr_reader :subject\n  \n  def initialize(word)\n    @subject = word.downcase\n  end\n  \n  def match(candidates)\n    candidates.select { |candidate| anagram?(candidate.downcase) }\n  end\n  \n  private\n  \n  def anagram?(candidate)\n    !identical_word?(candidate) && same_letter_frequency?(candidate)\n  end\n  \n  def same_letter_frequency?(candidate)\n    count_letters(candidate) == count_letters(subject)\n  end\n  \n  def count_letters(letters)\n    letter_counts = Hash.new(0)\n    letters.each_char { |letter| letter_counts[letter] += 1 }\n    return letter_counts\n  end\n\n  def identical_word?(word)\n    subject == word\n  end\n\nend	\N	f	3	10	2014-03-27 10:51:58	2014-03-27 10:51:58	169	anagram.rb
356	23	c80dcc1ff2db7c7ba0b25829	superseded	ruby	anagram	class Anagram\n  attr_reader :subject\n  \n  def initialize(word="")\n    @subject = word.downcase\n  end\n  \n  def match(candidates)\n    candidates.select { |candidate| anagram?(candidate.downcase) }\n  end\n  \n  private\n  \n  def anagram?(candidate)\n    !identical_word?(candidate) && same_letter_frequency?(candidate)\n  end\n  \n  def same_letter_frequency?(candidate)\n    count_letters(candidate) == count_letters(subject)\n  end\n  \n  def count_letters(letters)\n    letter_counts = Hash.new(0)\n    letters.each_char { |letter| letter_counts[letter] += 1 }\n    return letter_counts\n  end\n\n  def identical_word?(word)\n    subject == word\n  end\n\nend	\N	f	4	9	2014-04-27 18:38:37	2014-04-27 18:38:37	169	anagram.rb
357	23	c0f5261fd79743c48c6bc588	hibernating	ruby	anagram	class Anagram\n  attr_reader :subject\n  \n  def initialize(word)\n    @subject = word.downcase\n  end\n  \n  def match(candidates)\n    candidates.select { |candidate| anagram?(candidate.downcase) }\n  end\n  \n  private\n  \n  def anagram?(candidate)\n    !identical_word?(candidate) && same_letter_frequency?(candidate)\n  end\n  \n  def same_letter_frequency?(candidate)\n    letter_frequency(candidate) == letter_frequency(subject)\n  end\n  \n  def letter_frequency(letters)\n    Hash.new(0).tap do |letter_frequencies|\n      letters.each_char { |letter| letter_frequencies[letter] += 1 }\n    end\n  end\n\n  def identical_word?(word)\n    subject == word\n  end\n\nend	\N	f	11	12	2014-05-14 14:07:16	2014-05-14 14:07:16	169	anagram.rb
358	23	3145cc74b49f0871279ba7dd	superseded	haskell	word-count	module WordCount ( wordCount ) where\n\nimport Data.Map (Map, alter, fromList)\nimport Data.Char (isAlphaNum, toLower)\nimport Data.Maybe (isJust)\n\n\nwordCount :: String -> Map [Char] Integer\nwordCount str = foldr (foldFunc) countColl $ cleanAndSplit str\n    where foldFunc key countKeep = alter (incrCounter) key countKeep\n          countColl = fromList []\n          cleanAndSplit = words . map (\\ch -> if isAlphaNum ch then toLower ch else ' ')\n          incrCounter x\n              | isJust x = fmap (+1) x\n              | otherwise = Just 1	\N	f	0	1	2014-02-08 09:52:01	2014-02-08 09:52:01	170	word-count.hs
359	23	909d84002553b96af51a3a0b	hibernating	haskell	word-count	module WordCount ( wordCount ) where\n\nimport Data.Map.Strict (Map, insertWith, fromList)\nimport Data.Char (isAlphaNum, toLower)\n\n\nwordsBy :: (Char -> Bool) -> String -> [String]\nwordsBy pred str =\n    case dropWhile pred str of\n        "" -> []\n        s' -> w : wordsBy pred s''\n            where (w, s'') =\n                    break pred s'\n\n\nwordCount :: String -> Map String Integer\nwordCount str = foldl (foldFunc) countColl $ cleanAndSplit str\n    where foldFunc countKeep key = insertWith (+) key 1 countKeep\n          countColl = fromList []\n          cleanAndSplit = wordsBy (not . isAlphaNum) . map toLower	\N	f	5	2	2014-03-30 07:37:40	2014-03-30 07:37:40	170	word-count.hs
360	23	b6fdca388fb4f7b7402418f1	superseded	ruby	raindrops	class Raindrops\n  def convert(num)\n    num.to_s\n  end\nend	\N	f	2	1	2014-02-14 04:42:35	2014-02-14 04:42:35	171	raindrops.rb
361	23	da60a812361c62930c574a3f	pending	ruby	raindrops	class Raindrops\n  def self.convert(num)\n    if (num%3==0)&&(num%5==0)&&(num%7==0)\n      "PlingPlangPlong"\n    elsif (num%3==0)&&(num%5==0)\n      "PlingPlang"\n    elsif (num%3==0)&&(num%7==0)\n      "PlingPlong"\n    elsif (num%7==0)&&(num%5==0)\n      "PlangPlong"\n    elsif num%3 == 0\n      "Pling"\n    elsif num%5 ==0\n      "Plang"\n    elsif num%7 == 0\n      "Plong"\n    else\n      num.to_s\n    end\n  end\nend	\N	f	0	2	2014-02-15 14:34:05	2014-02-15 14:34:05	171	raindrops.rb
394	25	558339d1b0579f37112b6007	superseded	ruby	grade-school	class School\n \n  attr_reader :db\n  \n  def initialize\n    @db = Hash.new { [] }\n  end\n\n  def add student, grade\n    db[grade] <<= student\n  end\n  \n  def grade level\n    db.fetch(level) { [] }\n  end\n  \n  def sort\n    Hash[db.each { |_,students| students.sort! }.sort]\n  end\n\nend	\N	f	2	3	2014-01-11 21:04:01	2014-01-11 21:04:01	192	grade-school.rb
365	23	a7b2c207a06b420f3b3e34c7	superseded	python	bob	# Author::  Tim Henigan\n# Copyright:: Copyright (c) 2013\n# License::   MIT (http://opensource.org/licenses/MIT)\n\nclass Bob:\n    """Bob is a lackadaisical teenager. In conversation, his responses are\n    very limited."""\n\n    def hey(self, request):\n        r = Request(request)\n\n        if r.is_empty():\n            response = "Fine. Be that way."\n        elif r.is_yelled():\n            response = "Woah, chill out!"\n        elif r.is_question():\n            response = "Sure."\n        else:\n            response = "Whatever."\n\n        return response\n\n\nclass Request:\n    """Determine characteristics of a given request"""\n\n    def __init__(self, request):\n        if request is None:\n            self.request = ""\n        else:\n            self.request = request.rstrip()\n\n    def is_empty(self):\n        return not self.request\n\n    def is_yelled(self):\n        return self.request.isupper()\n\n    def is_question(self):\n        return self.request.endswith("?")	\N	f	2	4	2014-01-17 19:26:40	2014-01-17 19:26:40	175	bob.py
367	23	66e421c523718acd9fa408cb	superseded	python	bob	# Author::  Tim Henigan\n# Copyright:: Copyright (c) 2013\n# License::   MIT (http://opensource.org/licenses/MIT)\n\nclass Bob:\n    """Bob is a lackadaisical teenager. In conversation, his responses are\n    very limited."""\n\n    def hey(self, input):\n        request = Request(input)\n\n        if request.is_empty():\n            response = "Fine. Be that way."\n        elif request.is_yelled():\n            response = "Woah, chill out!"\n        elif request.is_question():\n            response = "Sure."\n        else:\n            response = "Whatever."\n\n        return response\n\n\nclass Request:\n    """Determine characteristics of a given request"""\n\n    def __init__(self, input):\n        if input is None:\n            self.request = ""\n        else:\n            self.request = input.rstrip()\n\n    def is_empty(self):\n        return not self.request\n\n    def is_yelled(self):\n        return self.request.isupper()\n\n    def is_question(self):\n        return self.request.endswith("?")	\N	f	3	3	2014-03-13 16:05:03	2014-03-13 16:05:03	175	bob.py
368	23	3b3353b66e4fc185f6a223c3	done	python	bob	# Author::  Tim Henigan\n# Copyright:: Copyright (c) 2013\n# License::   MIT (http://opensource.org/licenses/MIT)\n\nclass Bob(object):\n    """Bob is a lackadaisical teenager. In conversation, his responses are\n    very limited."""\n\n    def hey(self, request):\n        r = Request(request)\n\n        if r.is_empty():\n            response = "Fine. Be that way."\n        elif r.is_yelled():\n            response = "Woah, chill out!"\n        elif r.is_question():\n            response = "Sure."\n        else:\n            response = "Whatever."\n\n        return response\n\n\nclass Request(object):\n    """Determine characteristics of a given request"""\n\n    def __init__(self, request):\n        if request is None:\n            self.request = ""\n        else:\n            self.request = request.rstrip()\n\n    def is_empty(self):\n        return not self.request\n\n    def is_yelled(self):\n        return self.request.isupper()\n\n    def is_question(self):\n        return self.request.endswith("?")	\N	f	3	5	2014-04-07 14:41:18	2014-04-07 14:41:18	175	bob.py
381	25	4934aa407396b33c4f693dbd	superseded	haskell	hexadecimal	module Hexadecimal\r\n    ( hexToInt\r\n    ) where\r\n\r\nimport Data.Char (isNumber, digitToInt)\r\nimport Data.List (foldl')\r\n\r\nhexToInt :: String -> Int\r\nhexToInt str = foldl' go 0 str'\r\n  where\r\n    str'       = map toInt str\r\n    go _  (-1) = 0\r\n    go acc x   = 16 * acc + x\r\n\r\n    toInt n\r\n        | isNumber n = digitToInt n\r\n        | otherwise  =\r\n            case n of\r\n                'a' -> 10\r\n                'b' -> 11\r\n                'c' -> 12\r\n                'd' -> 13\r\n                'e' -> 14\r\n                'f' -> 15\r\n                _   -> -1 -- invalid char	\N	f	2	2	2014-01-17 20:16:07	2014-01-17 20:16:07	184	Hexadecimal.hs
370	23	2bd63fcefcdc324a5a603c39	done	go	accumulate	// Package accumulate provides the "accumulate" functional programming primitive.\npackage accumulate\n\n// Accumulate returns a new list of the same size as values,\n// in which each value is f applied to the corresponding value in values.\nfunc Accumulate(values []string, f func(string) string) []string {\n\tresult := make([]string, len(values))\n\tfor i, value := range values {\n\t\tresult[i] = f(value)\n\t}\n\treturn result\n}	\N	f	2	1	2014-02-22 04:07:12	2014-02-22 04:07:12	176	accumulate.go
371	23	4574f27a3805a43fcf62b69a	done	ruby	trinary	class Trinary\n  attr_reader :digits\n\n  def initialize(string)\n    @digits = string.match(/^\\d+$/) ? string.chars.map(&:to_i) : []\n  end\n\n  def to_decimal\n    digits.reverse.each_with_index.map do |digit, index|\n      digit * (3 ** index)\n    end.inject(0, :+)\n  end\nend	\N	f	2	3	2014-01-13 00:55:23	2014-01-13 00:55:23	177	trinary.rb
372	23	aa6a85be164ba5dff5d7c033	superseded	ruby	trinary	class Trinary\n  attr_reader :digits\n\n  def initialize(string)\n    @digits = string.chars.map(&:to_i)\n  end\n\n  def to_decimal\n    return 0 unless valid?\n\n    digits.reverse.each_with_index.inject(0) do |result, (digit, index)|\n      result += digit * (3 ** index)\n    end\n  end\n\n  def valid?\n    (digits - [0, 1, 2]).empty?\n  end\nend	\N	f	2	1	2014-03-08 03:40:25	2014-03-08 03:40:25	177	trinary.rb
373	23	2304c1c17e55c49ab82eaf05	superseded	ruby	trinary	class Trinary\n  attr_reader :digits\n\n  def initialize(string)\n    @digits = string.match(/^\\d+$/) ? string.chars.map(&:to_i) : []\n  end\n\n  def to_decimal\n    digits.reverse.each_with_index.inject(0) do |result, (digit, index)|\n      result + digit * (3 ** index)\n    end\n  end\nend	\N	f	2	2	2014-03-08 04:18:51	2014-03-08 04:18:51	177	trinary.rb
374	23	549dc4ec5361873152225179	done	ruby	bob	class Bob\n\t\n\tdef hey arg\n\n\t\targ = arg.strip\n\n\t\tif arg.empty?\n\t\t\t'Fine. Be that way!'\n\t\telsif arg == arg.upcase\n\t\t\t'Woah, chill out!'\n\t\telsif arg.end_with???\n\t\t\t'Sure.'\n\t\telse\n\t\t\t'Whatever.'\n\t\tend\n\tend\nend	\N	f	4	1	2014-02-15 15:51:06	2014-02-15 15:51:06	178	bob.rb
376	23	d46fe5229b82bf8de293f403	done	haskell	prime-factors	module PrimeFactors (primeFactors)\nwhere\n  \ntoTest :: [Int]\ntoTest = 2 : [3,5..]\n\nprimeFactors :: Int -> [Int]\nprimeFactors = prime toTest\n  where\n    prime _ 1 = []\n    prime tests@(p:ps) n\n      | n `mod` p == 0 = p : prime tests (n `div`p)\n      | otherwise      = prime ps n	\N	f	3	1	2014-04-10 08:22:31	2014-04-10 08:22:31	180	PrimeFactors.hs
377	25	8411ce01a65f86f64a765af3	pending	ruby	scrabble-score	class Scrabble\n  def initialize(s)\n    @scores = self.class.load_scores\n    @s = s\n  end\n\n  def score\n    return 0 if @s.nil?\n    @s.downcase.chars.map { |c| @scores[c] }.reduce(0, :+)\n  end\n\n  def self.score(s)\n    self.new(s).score\n  end\n\n  private\n\n  def self.load_scores\n    File.read('README.md')[/^Letter\\s+Value$(.*)```/m, 1].each_line.with_object(Hash.new(0)) do |line, scores|\n      split = line.delete(',').split\n      value = split.pop.to_i\n      split.each { |letter| scores[letter.downcase] = value }\n    end\n  end\nend	\N	f	2	1	2014-03-06 01:38:36	2014-03-06 01:38:36	181	scrabble.rb
378	25	935f750fc40292cb83c7a74d	done	python	bob	class Bob:\n    def hey(self, i_am_talkin_to_you):\n        if not i_am_talkin_to_you.strip():\n            return 'Fine. Be that way!'\n        if i_am_talkin_to_you.isupper():\n            return 'Woah, chill out!'\n        if i_am_talkin_to_you.endswith('?'):\n            return 'Sure.'\n        return 'Whatever.'	\N	f	2	1	2013-12-26 04:24:40	2013-12-26 04:24:40	182	bob.py
379	25	6bd4f542550f083d29dab73f	done	clojure	word-count	(ns phrase\n (:require [clojure.string :refer [split lower-case]]))\n\n(defn- sanitize-and-split [phrase]\n  (-> (lower-case phrase)\n      (split #"\\W+")))\n\n(defn word-count [phrase]\n  (-> (sanitize-and-split phrase)\n      (frequencies)))	\N	f	2	1	2014-01-07 07:35:31	2014-01-07 07:35:31	183	word-count.clj
380	25	f40684df8ecaf28a10b8786c	superseded	haskell	hexadecimal	module Hexadecimal\r\n( hexToInt\r\n) where\r\n\r\nimport Data.Char (isNumber, digitToInt)\r\nimport Data.List (foldl')\r\n\r\n--\r\n-- Skipping till Binary.hs is solved\r\n--\r\n\r\n\r\n--hexToInt :: String -> Int\r\n--hexToInt str = sum $ foldl' (\\acc x -> convert x * 16 ^ length acc : acc) [] str'\r\n--  where\r\n--    str' = reverse str\r\n--    convert n\r\n--        | isNumber n = digitToInt n\r\n--        | otherwise  =\r\n--            case n of\r\n--                'a' -> 10\r\n--                'b' -> 11\r\n--                'c' -> 12\r\n--                'd' -> 13\r\n--                'e' -> 14\r\n--                'f' -> 15\r\n--                _   -> 0	\N	f	2	1	2014-01-01 05:50:12	2014-01-01 05:50:12	184	Hexadecimal.hs
382	25	ccf3c937643fe81f821eb674	done	haskell	hexadecimal	module Hexadecimal\r\n    ( hexToInt\r\n    ) where\r\n\r\nimport Data.Char (digitToInt, isHexDigit)\r\nimport Data.List (foldl')\r\n\r\nhexToInt :: String -> Int\r\nhexToInt str = foldl' go 0 str'\r\n  where\r\n    str'            = map toInt str\r\n    go _   Nothing  = 0\r\n    go acc (Just x) = 16 * acc + x\r\n\r\n    toInt n\r\n        | isHexDigit n = Just $ digitToInt n\r\n        | otherwise    = Nothing	\N	f	0	3	2014-04-01 03:33:45	2014-04-01 03:33:45	184	Hexadecimal.hs
384	25	d12dc5c7568f10b4087a1cb4	done	ruby	roman-numerals	class Fixnum\n  LOOKUP = {\n    1000 => "M",\n    900  => "CM",\n    500  => "D",\n    400  => "CD",\n    100  => "C",\n    90   => "XC",\n    50   => "L",\n    40   => "XL",\n    10   => "X",\n    9    => "IX",\n    5    => "V",\n    4    => "IV",\n    1    => "I",\n    0    => ""\n  }\n\n  def to_roman\n    LOOKUP.each do |arabic, roman|\n      if self == arabic\n        return roman\n      elsif self > arabic\n        return roman + (self - arabic).to_roman\n      end\n    end\n  end\n\nend	\N	f	0	1	2014-01-01 13:41:30	2014-01-01 13:41:30	186	roman-numerals.rb
385	25	2bbcdca07296d4f59631f28a	superseded	ruby	bob	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n  \n  def response\n    if silence?\n      "Fine. Be that way."\n    elsif shouting?\n      "Woah, chill out!"\n    elsif question?\n      "Sure."\n    else \n      "Whatever."\n    end\n  end\n  \n  private\n  \n  def shouting?\n    @phrase.upcase == @phrase\n  end\n  \n  def question?\n    @phrase.end_with?("?")\n  end\n  \n  def silence?\n    @phrase.nil? || @phrase.empty?\n  end\nend\n\nclass Bob\n  def hey(phrase_words)\n    Phrase.new(phrase_words).response\n  end\nend	\N	f	2	1	2013-12-15 14:08:31	2013-12-15 14:08:31	187	bob.rb
386	25	d761f6c4c7567eff8f9c67e4	done	ruby	bob	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n  \n  def shouting?\n    @phrase.upcase == @phrase\n  end\n  \n  def question?\n    @phrase.end_with?("?")\n  end\n  \n  def silence?\n    @phrase.nil? || @phrase.empty?\n  end\nend\n\nclass Bob\n  def hey(sentence)\n    response_to(Phrase.new(sentence))\n  end\n  \n  private\n  \n  def response_to(phrase)\n    if phrase.silence?\n      "Fine. Be that way."\n    elsif phrase.shouting?\n      "Woah, chill out!"\n    elsif phrase.question?\n      "Sure."\n    else \n      "Whatever."\n    end\n  end\nend	\N	f	2	3	2014-01-26 20:30:20	2014-01-26 20:30:20	187	bob.rb
387	25	dfd621aedcc41cb0a0e8eb03	superseded	ruby	bob	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n  \n  def shouting?\n    @phrase.upcase == @phrase\n  end\n  \n  def question?\n    @phrase.end_with?("?")\n  end\n  \n  def silence?\n    @phrase.nil? || @phrase.empty?\n  end\nend\n\nclass Bob\n  def hey(phrase_words)\n    phrase = Phrase.new(phrase_words)\n    response_to(phrase)\n  end\n  \n  private\n  \n  def response_to(phrase)\n    if phrase.silence?\n      "Fine. Be that way."\n    elsif phrase.shouting?\n      "Woah, chill out!"\n    elsif phrase.question?\n      "Sure."\n    else \n      "Whatever."\n    end\n  end\nend	\N	f	0	2	2014-03-14 17:41:09	2014-03-14 17:41:09	187	bob.rb
388	25	5554daaea0821e1340f38abc	pending	javascript	allergies	(function() {\n  'use strict';\n\n  var Allergies = function(score) {\n    this.score = validateScore(score);\n  }\n\n  Allergies.prototype.allergicTo = function(substance) {\n    return this.list().indexOf(substance) !== -1;\n  }\n\n  Allergies.prototype.list = function(){\n    for (var s in AllergyScores) {\n      if (parseInt(s) === this.score) {\n        return [AllergyScores[s]];\n      }\n    }\n\n    return findAllergiesFromScore(this.score);\n  }\n\n  function findAllergiesFromScore(score) {\n    var allergies = [];\n    var remainder = score;\n    var all = Object.keys(AllergyScores);\n\n    for (var i = all.length - 1; i >= 0; i--) {\n      if (remainder <= 0) {break;}\n\n      if (parseInt(all[i]) <= remainder) {\n        allergies.push(AllergyScores[all[i]]);\n        remainder -= parseInt(all[i]);\n      }\n    }\n\n    return allergies.reverse();\n  }\n\n  function validateScore(score) {\n    while (score > 255) {\n      score -= 256;\n    }\n    return score;\n  }\n\n  var AllergyScores = {\n    "128":"cats",\n    "64":"pollen",\n    "32":"chocolate",\n    "16":"tomatoes",\n    "8":"strawberries",\n    "4":"shellfish",\n    "2":"peanuts",\n    "1":"eggs"\n  }\n\n  module.exports = Allergies;\n})();	\N	f	2	1	2014-03-09 08:08:16	2014-03-09 08:08:16	188	allergies.js
389	25	5038fce0e61f1934f7c3a518	done	ruby	point-mutations	class DNA\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(descendant_strand)\n    return 0 if descendant_strand == @strand\n    difference = 0\n    @strand.chars.each_with_index do |nucleotide, idx|\n      next if descendant_strand[idx].nil?\n      difference += 1 if nucleotide != descendant_strand[idx]\n    end\n    difference\n  end\nend	\N	f	2	1	2013-12-20 23:03:35	2013-12-20 23:03:35	189	point-mutations.rb
390	25	0bbf37b7e04c0a3684019e54	done	ruby	triangle	class Triangle\n  def initialize(*sides)\n    raise TriangleError unless sides.count == 3\n    @small, @medium, @large = *sides.sort\n  end\n\n  def kind\n    if invalid? \n      raise TriangleError\n    elsif equilateral?\n      :equilateral\n    elsif isoceles?\n      :isosceles\n    else\n      :scalene\n    end\n  end\n\n  private\n\n    def invalid?\n      @small < 0 || @small + @medium <= @large\n    end\n    \n    def equilateral?\n      @small == @medium && @medium == @large\n    end\n\n    def isoceles?\n      @small == @medium || @medium == @large\n    end\nend\n\nclass TriangleError < ArgumentError; end	\N	f	2	1	2014-03-25 03:16:13	2014-03-25 03:16:13	190	triangle.rb
391	25	dea677b727c55eb83d7e184d	done	ruby	rna-transcription	DNA = Struct.new(:sequence) do\n  def to_rna\n    sequence.gsub("T", "U")\n  end\nend	\N	f	2	2	2014-01-17 20:23:49	2014-01-17 20:23:49	191	rna-transcription.rb
392	25	f2658d1c123e72205af3391d	superseded	ruby	rna-transcription	class DNA\n  attr_reader :sequence\n\n  def initialize(dna)\n    @sequence = dna\n  end\n\n  def to_rna\n    sequence.gsub("T", "U")\n  end\nend	\N	f	2	1	2014-04-30 22:11:08	2014-04-30 22:11:08	191	rna-transcription.rb
514	8	9f1888a1741c8478d4e1a09a	superseded	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = words\n  end\n\n  def word_count\n    count = Hash.new(0)\n    @words.split(/\\W+/m).map(&:downcase).each { |w| count[w] += 1 }\n    count\n  end\nend	\N	f	16	1	2014-05-16 14:12:39	2014-05-16 14:12:39	255	word-count.rb
396	25	40e452b9c9a630d6c0739062	superseded	ruby	grade-school	class School\n \n  attr_reader :db\n  \n  def initialize\n    @db = Hash.new { [] }\n  end\n\n  def add student, grade\n    db[grade] <<= student\n  end\n  \n  def grade level\n    db.fetch(level) { [] }\n  end\n  \n  def sort\n    Hash[db.sort.each { |_,students| students.sort! }]\n  end\n\nend	\N	f	0	4	2014-02-18 11:48:03	2014-02-18 11:48:03	192	grade-school.rb
397	25	71612918cf4c42387419bf92	superseded	ruby	grade-school	class School\n \n attr_reader :db\n  \n  def initialize\n    @db = Hash.new { |hash,key| hash[key] = [] }\n  end\n\n  def add student, grade\n    db[grade] << student\n  end\n  \n  def grade level\n    db[level]\n  end\n  \n  def sort\n    Hash[db.each { |k,v| v.sort! }.sort]\n  end\n  \nend	\N	f	0	1	2014-04-22 21:57:53	2014-04-22 21:57:53	192	grade-school.rb
399	25	d09f35ea7490c3876222f151	done	javascript	beer-song	module.exports = (function() {\n  function bottleCollection(number) {\n    return {\n      "status": "" + number + " bottles of beer",\n      "action": "Take one down and pass it around"\n    };\n  };\n\n  var bottles = {\n    "-1": bottleCollection(99),\n    "0": {\n      "action": "Go to the store and buy some more",\n      "status": "no more bottles of beer"\n    },\n    "1": {\n      "action": "Take it down and pass it around",\n      "status": "1 bottle of beer"\n    },\n  };\n\n  function verseForNumber(number) {\n    var indexed = bottles[number.toString()];\n    return indexed || bottleCollection(number);\n  };\n\n  function toTitleCase(str) {\n    return str.replace(/^\\w/, function(txt) {\n      return txt.charAt(0).toUpperCase();\n    });\n  };\n\n  return {\n    verse: function(number) {\n      var current = verseForNumber(number),\n          next = verseForNumber(number - 1),\n          string;\n      string = toTitleCase(current.status) + " on the wall, "\n      string += current.status + ".\\n"\n      string += current.action + ", "\n      string += next.status + " on the wall.\\n"\n      return string;\n    },\n    sing: function(start, finish) {\n      var verses = [];\n      finish || (finish = 0);\n      for(var i = start; i >= finish; i--) {\n        verses.push(this.verse(i));\n      };\n\n      return verses.join("\\n");\n    }\n  };\n})();	\N	f	0	2	2014-04-11 14:12:04	2014-04-11 14:12:04	193	beer-song.js
400	25	1db82de3afac3775cef7d07f	done	ruby	hamming	module Hamming\n  def self.compute(a,b)\n    distance = 0\n\n    short, long = [a, b].sort\n    \n    long.chars[0..(short.length - 1)].zip(short.chars).each do |ac, bc|\n      distance += 1 if ac != bc\n    end\n    \n    distance\n  end\nend	\N	f	4	1	2013-12-08 20:19:13	2013-12-08 20:19:13	194	hamming.rb
401	25	85441b5a58649663fcf3e2f9	superseded	ruby	nucleotide-count	class DNA\n  attr_reader :nucleotides\n\n  Nucleotides_Whitelist = ["B", "D", "E", "F", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "V", "W", "Z"]\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides.split("")\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless Nucleotides_Whitelist.include? nucleotide\n    return 0 unless ["G","C","A","T"].include? nucleotide\n    nucleotide_counts[nucleotide]\n  end\n\n  def nucleotide_counts\n    answer = {"A"=>0, "T"=>0, "C"=>0, "G"=>0}\n    nucleotides.each do |nucleotide|\n      answer[nucleotide] += 1\n    end\n    answer\n  end\nend	\N	f	2	2	2014-01-02 14:23:27	2014-01-02 14:23:27	195	nucleotide-count.rb
402	25	ce43629082c457e195d02514	superseded	ruby	nucleotide-count	class DNA\n  attr_reader :nucleotides\n\n  NUCLEOTIDES_WHITELIST = ["G", "C", "A", "T", "U"]\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides.split("")\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless NUCLEOTIDES_WHITELIST.include? nucleotide\n    return 0 unless ["G","C","A","T"].include? nucleotide\n    nucleotide_counts[nucleotide]\n  end\n\n  def nucleotide_counts\n    answer = {"A"=>0, "T"=>0, "C"=>0, "G"=>0}\n    nucleotides.each do |nucleotide|\n      answer[nucleotide] += 1\n    end\n    answer\n  end\nend	\N	f	2	4	2014-01-31 04:04:36	2014-01-31 04:04:36	195	nucleotide-count.rb
403	25	e12a9de76b2d9eaf0f0d4214	hibernating	ruby	nucleotide-count	class DNA\n  attr_reader :nucleotides\n\n  VALID_NUCLEOTIDES = ["G", "C", "A", "T", "U"]\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless VALID_NUCLEOTIDES.include? nucleotide\n    nucleotide_counts[nucleotide]\n  end\n\n  def nucleotide_counts\n    answer = Hash.new(0)\n    ["G","C","A","T"].each {|letter| answer[letter] = 0 }\n    nucleotides.each_char {|nucleotide| answer[nucleotide] += 1}\n    answer\n  end\nend	\N	f	3	5	2014-03-06 03:05:40	2014-03-06 03:05:40	195	nucleotide-count.rb
404	25	1b8ba0e8145a4216f09528c4	superseded	ruby	nucleotide-count	class DNA\n  attr_reader :nucleotide\n\n  def initialize(nucleotide)\n    @nucleotide = nucleotide.split("")\n  end\n\n  def count(gcat)\n    raise ArgumentError if gcat == "X"\n    return 0 unless ["G","C","A","T"].include? gcat\n    nucleotide_counts[gcat]\n  end\n\n  def nucleotide_counts\n    answer = {"A"=>0, "T"=>0, "C"=>0, "G"=>0}\n    nucleotide.each do |tide|\n      answer[tide] += 1\n    end\n    answer\n  end\nend	\N	f	3	1	2014-03-21 01:35:58	2014-03-21 01:35:58	195	nucleotide-count.rb
417	20	6b3a80ab2179ab7463e34c0e	done	javascript	rna-transcription	module.exports = DNA;\n\n\nfunction DNA(strand) {\n  this.strand = strand;\n}\n\nDNA.prototype.toRNA = function() {\n  return substitute(this.strand, Nucleotides.thymidine, Nucleotides.uracil);\n};\n\n\nfunction substitute(string, from, to) {\n  // Replace a string globally, without regexps and their escaping woes.\n  return string.split(from).join(to);\n}\n\n\nvar Nucleotides = {\n  thymidine: "T",\n  uracil: "U"\n};	\N	f	2	4	2014-05-03 09:27:45	2014-05-03 09:27:45	203	rna-transcription.js
407	20	a1abc370b63cccf9524fec5d	done	javascript	bob	var Bob = function() {};\n\nBob.prototype.hey = function(message) {\n    if (message.trim() === '') {\n        return 'Fine. Be that way!';\n    }\n    if (message.toUpperCase() === message && message.toLowerCase() !== message) {\n        return 'Woah, chill out!';\n    }\n    if (message.substr(-1) == '?') {\n        return 'Sure.';\n    }\n    return 'Whatever.';\n};\nmodule.exports = Bob;	\N	f	5	1	2014-04-04 19:34:52	2014-04-04 19:34:52	197	bob.js
408	20	daecb68081594e8e3f34f17e	done	ruby	phone-number	class PhoneNumber\n  attr_reader :area_code\n\n  def initialize(text)\n    @text = text\n    parse_number\n  end\n\n  def number\n    @number ||= [@area_code, @prefix, @suffix].join('')\n  end\n\n  def to_s\n    @pretty ||= "(#{@area_code}) #{@prefix}-#{@suffix}"\n  end\n\n  private\n\n    def parse_number\n      re = /\\A\\D*1?\\D*(?<area>\\d{3})\\D*(?<pre>\\d{3})\\D*(?<suf>\\d{4})\\D*\\z/\n      results = re.match(@text)\n      if results\n        @area_code  = results[:area]\n        @prefix     = results[:pre]\n        @suffix     = results[:suf]\n      else\n        @area_code  = '000'\n        @prefix     = '000'\n        @suffix     = '0000'\n      end\n    end\nend	\N	f	3	2	2014-04-26 14:49:09	2014-04-26 14:49:09	198	phone-number.rb
409	20	22e8fcb2ac3a9a7abf7c8e73	superseded	ruby	phone-number	class PhoneNumber\n  attr_reader :area_code\n\n  def initialize(text)\n    @text = text\n    parse_number\n  end\n\n  def parse_number\n    re = /\\A\\D*1?\\D*(?<area>\\d{3})\\D*(?<pre>\\d{3})\\D*(?<suf>\\d{4})\\D*\\z/\n    results = re.match(@text)\n    if results\n      @area_code  = results[:area]\n      @prefix     = results[:pre]\n      @suffix     = results[:suf]\n    else\n      @area_code  = '000'\n      @prefix     = '000'\n      @suffix     = '0000'\n    end\n  end\n\n  def number\n    @number ||= [@area_code, @prefix, @suffix].join('')\n  end\n\n  def to_s\n    @pretty ||= "(#{@area_code}) #{@prefix}-#{@suffix}"\n  end\n\nend	\N	f	3	1	2014-05-03 01:24:56	2014-05-03 01:24:56	198	phone-number.rb
410	20	38c1f67bac71312980f40339	superseded	python	grains	"""Calculate the number of grains of wheat on a chessboard.\n\nThe number of grains on each square doubles.\n"""\n\n\ndef on_square(nth):\n    """Return the number of grains on the n-th square."""\n    return 2 ** (nth - 1)\n\n\ndef total_after(nth):\n    """Return the total number of grains up to the n-th square."""\n    # 1 + 2 + (2 ** 2) + ... + (2 ** (n - 1)) = (2 ** n) - 1.\n    return (2 ** nth) - 1	\N	f	2	1	2014-03-29 18:36:31	2014-03-29 18:36:31	199	grains.py
411	20	42d7117ecb19794350ec029d	pending	python	grains	"""Calculate the number of grains of wheat on a chessboard.\n\nThe number of grains on each square doubles.\n"""\n\n\ndef on_square(nth):\n    """Return the number of grains on the n-th square."""\n    # 1 << (n - 1) = 2 ** (n - 1).\n    return 1 << (nth - 1)\n\n\ndef total_after(nth):\n    """Return the total number of grains up to the n-th square."""\n    # 1 + 2 + (2 ** 2) + ... + (2 ** (n - 1)) = (2 ** n) - 1 = (1 << n) - 1.\n    return (1 << nth) - 1	\N	f	2	2	2014-04-16 05:55:55	2014-04-16 05:55:55	199	grains.py
412	20	4880b7aaa915c2ce7ea0511e	pending	coffeescript	anagram	class Anagram\n\n  constructor: (word) ->\n    @word = word.toLowerCase()\n\n  match: (words) ->\n    (word.toLowerCase() for word in @filterOriginal(words) when @isAnagram(word))\n\n  normalize: (word) ->\n    "#{word.toLowerCase().split("").sort()}"\n\n  filterOriginal: (words) ->\n    words.filter (word) => word.toLowerCase() isnt @word\n\n  isAnagram: (word) ->\n    @normalize(@word) == @normalize(word)\n\nmodule.exports = Anagram	\N	f	0	1	2014-04-03 06:58:19	2014-04-03 06:58:19	200	anagram.coffee
413	20	1bcdcbcb82b64f446e96b163	hibernating	ruby	bob	class Bob\n  def hey(comment)\n    case\n      when nothing?(comment)\n        return "Fine. Be that way!"\n      when all_uppercase?(comment)\n        return "Woah, chill out!"\n      when is_a_question?(comment)\n        return "Sure."\n      else\n        return "Whatever."\n    end\n  end\n\n  private\n\n  def all_uppercase?(comment)\n    return !comment.empty? && !comment.match(/[a-z]/) && comment.match(/[A-Z]/)\n  end\n\n  def is_a_question?(comment)\n    return comment[-1] == "?"\n  end\n\n  def nothing?(comment)\n    return comment.empty? || comment.match(/^\\s+$/)\n  end\nend	\N	f	1	1	2014-05-21 18:30:39	2014-05-21 18:30:39	201	bob.rb
414	20	089ce9a2c9a72859145b731f	hibernating	ruby	raindrops	class Raindrops\n\n\tdef convert (number)\n\t\tspeak = ""\n\t\traindrop = false\n\t\tif divisibleByThree?(number)\n\t\t\tspeak = "Pling"\n\t\t\traindrop = true\n\t\tend\n\n\t\tif divisibleByFive?(number)\n\t\t\tspeak << "Plang"\n\t\t\traindrop = true\n\t\tend\n\n\t\tif divisibleBySeven?(number)\n\t\t\tspeak << "Plong"\n\t\t\traindrop = true\n\t\tend\n\n\t\tif !raindrop\n\t\t\tspeak = number.to_s()\n\t\tend\n\n\t\treturn speak\n\tend\n\n\tdef divisibleByThree? (number)\n\t\treturn number % 3 == 0\n\tend\n\n\tdef divisibleByFive? (number)\n\t\treturn number % 5 == 0\n\tend\n\t\t\n\tdef divisibleBySeven? (number)\n\t\treturn number % 7 == 0\n\tend\n\t\t\n\tend	\N	f	2	1	2014-04-10 05:03:00	2014-04-10 05:03:00	202	raindrops.rb
415	20	2ba1b4969c6641bd24ce7710	superseded	javascript	rna-transcription	module.exports = DNA;\n\n\nfunction DNA(strand) {\n  this.strand = strand;\n}\n\nDNA.prototype.toRNA = function() {\n  return substitute(this.strand, Nucleotides.thymidine, Nucleotides.uracil);\n};\n\n\nfunction substitute(string, from, to) {\n  return string.split(from).join(to);\n}\n\n\nvar Nucleotides = {\n  thymidine: "T",\n  uracil: "U"\n};	\N	f	2	3	2014-04-15 10:43:25	2014-04-15 10:43:25	203	rna-transcription.js
416	20	032e325e6a97aa48a4ec5de1	superseded	javascript	rna-transcription	module.exports = DNA;\n\n\nfunction DNA(strand) {\n  this.strand = strand;\n}\n\nDNA.prototype.toRNA = function() {\n  return substitute(this.strand, Nucleotides.thymidine, Nucleotides.uracil);\n};\n\n\nfunction substitute(string, from, to) {\n  return string.replace(new RegExp(escapeRegExp(from), "g"), to);\n}\n\nfunction escapeRegExp(string) {\n  // http://stackoverflow.com/a/3561711/6962\n  return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\n\nvar Nucleotides = {\n  thymidine: "T",\n  uracil: "U"\n};	\N	f	1	2	2014-04-26 16:04:56	2014-04-26 16:04:56	203	rna-transcription.js
419	20	498b60bd9d58181bd261e945	superseded	ruby	grains	class Grains\n  def square(n)\n    2 ** (n - 1)\n  end\n\n  def total\n    totes = 0\n\n    (1..64).each do |n|\n      totes += square(n)\n    end\n\n    totes\n  end\nend	\N	f	3	1	2014-03-26 03:13:44	2014-03-26 03:13:44	204	grains.rb
420	20	f0eb0fbc3a51855e0ffe287a	superseded	ruby	grains	class Grains\n  def square(n)\n    2 ** (n - 1)\n  end\n\n  def total\n    (1..64).reduce(0) do |s, v|\n      s + square(v)\n    end\n  end\nend	\N	f	1	2	2014-04-11 18:03:11	2014-04-11 18:03:11	204	grains.rb
421	20	74bf42be5dba8676a96aa350	pending	ruby	grains	class Grains\n  NUMBER = 64\n\n  def square(n)\n    2 ** (n - 1)\n  end\n\n  def total\n    square(NUMBER + 1) - 1\n  end\nend	\N	f	2	3	2014-04-21 11:14:33	2014-04-21 11:14:33	204	grains.rb
422	20	f5af40cb74dfe2702108ea34	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(candidates)\n    candidates.select { |candidate| anagram?(candidate.downcase) }\n  end\n\n  def anagram?(candidate)\n    word.chars.sort == candidate.chars.sort && word != candidate\n  end\nend	\N	f	5	1	2014-04-24 05:50:27	2014-04-24 05:50:27	205	anagram.rb
423	20	8f1ca32e8238c3ac5001b9f1	done	ruby	anagram	class Anagram\n  attr_reader :subject\n\n  def initialize(subject)\n    @subject = subject\n  end\n\n  def match(candidates)\n    candidates.select { |candidate| other?(candidate) && anagram?(candidate) }\n  end\n\n  def other?(candidate)\n    downcase(subject) != downcase(candidate)\n  end\n\n  def anagram?(candidate)\n    normalize(subject) == normalize(candidate)\n  end\n\n  private\n\n  def downcase(word)\n    word.downcase\n  end\n\n  def normalize(word)\n    downcase(word).chars.sort\n  end\nend	\N	f	2	2	2014-04-28 03:24:10	2014-04-28 03:24:10	205	anagram.rb
424	20	769b61f3dfb55198e0ef60a0	done	ruby	secret-handshake	class SecretHandshake\n  def initialize(num)\n    num.class == Fixnum ? @command = num.to_s(2).rjust(5, "0") : @command = "00000"\n  end\n\n  def commands\n    shake_moves = []\n    shake_moves << "wink"            if @command[-1] == "1"\n    shake_moves << "double blink"    if @command[-2] == "1"\n    shake_moves << "close your eyes" if @command[-3] == "1"\n    shake_moves << "jump"            if @command[-4] == "1"\n    shake_moves.reverse!             if @command[-5] == "1"\n    return shake_moves\n  end\nend	\N	f	1	1	2014-04-01 23:39:42	2014-04-01 23:39:42	206	secret_handshake.rb
425	20	de9a8915ad728c5848b5210e	superseded	ruby	nucleotide-count	class DNA\n  attr_reader :strand\n  def invalid_nucleotide\n    /[^GCTAU]/\n  end\n\n  def check_input(input)\n    raise ArgumentError if invalid_nucleotide =~ input\n  end\n\n  def initialize(strand)\n    check_input(strand)\n    @strand = strand\n  end\n\n  def count(nucleotide)\n    check_input(nucleotide)\n    self.nucleotide_counts[nucleotide]\n  end\n\n  def nucleotide_counts\n    counts = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}\n    self.strand.split('').each do |nucleotide|\n      counts[nucleotide] += 1\n    end\n    counts\n  end\nend	\N	f	3	1	2014-03-29 17:04:02	2014-03-29 17:04:02	207	dna.rb
426	20	20c2167a53c2fa84f0491c8d	hibernating	ruby	nucleotide-count	class DNA\n  attr_reader :strand\n\n  INVALID_NUCLEOTIDE = /[^GCTAU]/\n\n  def invalid?(input)\n    INVALID_NUCLEOTIDE =~ input\n  end\n\n  def initialize(strand)\n    raise ArgumentError if invalid?(strand)\n    @strand = strand\n  end\n\n  def count(nucleotide)\n    raise ArgumentError if invalid?(nucleotide)\n    nucleotide_counts[nucleotide]\n  end\n\n  def nucleotide_counts\n    counts = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}\n    strand.split('').each do |nucleotide|\n      counts[nucleotide] += 1\n    end\n    counts\n  end\nend	\N	f	0	2	2014-04-26 07:51:15	2014-04-26 07:51:15	207	dna.rb
427	20	3bdab76050be9a15482d1660	superseded	clojure	nucleotide-count	(ns dna)\n\n(defn nucleotide-counts [dna-str] \n  (merge \n    {\\G 0 \\A 0 \\T 0 \\C 0}\n    (frequencies dna-str)))\n\n(defn count [chr dna-str]\n  (if (contains? #{\\G \\A \\T \\C \\U} chr)\n    (get (nucleotide-counts dna-str) chr 0)\n    (throw (Exception. "invalid nucleotide"))))	\N	f	2	2	2014-03-27 03:50:19	2014-03-27 03:50:19	208	dna.clj
428	20	e1f12780ce16a69cb3791031	superseded	clojure	nucleotide-count	(ns dna)\n\n(defn nucleotide-counts [dna-str] \n  (merge \n    {\\G 0 \\A 0 \\T 0 \\C 0}\n    (frequencies dna-str)))\n\n(defn count [chr dna-str]\n  (if (contains? #{\\G \\A \\T \\C \\U} chr)\n    (or ((nucleotide-counts dna-str) chr)\n        0)\n    (throw (Exception. "invalid nucleotide"))))	\N	f	2	1	2014-04-17 07:32:58	2014-04-17 07:32:58	208	dna.clj
429	20	d22d1509de5f756efdb10855	pending	clojure	nucleotide-count	(ns dna\n  (:refer-clojure :exclude [count]))\n\n(defn nucleotide-counts [dna-str] \n  (merge \n    {\\G 0 \\A 0 \\T 0 \\C 0}\n    (frequencies dna-str)))\n\n(defn count [chr dna-str]\n  (if (contains? #{\\G \\A \\T \\C \\U} chr)\n    (get (nucleotide-counts dna-str) chr 0)\n    (throw (Exception. "invalid nucleotide"))))	\N	f	2	3	2014-05-03 07:28:13	2014-05-03 07:28:13	208	dna.clj
430	20	0af5228d7004db94845826cc	pending	scala	bob	class Bob {\n\n    def hey(message: String): String = message match {\n        case str if str.forall(_.isSpaceChar) => "Fine. Be that way!"\n        case str if str.exists(_.isUpper) && isYell(str) => "Woah, chill out!"\n        case str if str.endsWith("?") => "Sure."\n        case _ => "Whatever."\n    }\n\n    def isYell(str: String) = str.forall(c => (c.isUpper || !c.isLetter))\n}	\N	f	2	1	2014-04-29 22:32:02	2014-04-29 22:32:02	209	bob.scala
431	20	8cab5f0e3205e647cf268880	pending	ruby	etl	class ETL\r\n\tdef self.transform (hash)\r\n\t hash1 = Hash.new()\r\n\t  hash.each do |k,v|\r\n\t   v.each do |l| \r\n\t   \thash1[l.downcase] = k \r\n\t   end \r\n\tend\r\n\t return hash1\r\n\t  end\r\nend	\N	f	0	1	2014-04-05 11:19:48	2014-04-05 11:19:48	210	etl.rb
432	20	9861908eaecb394572e4c0af	pending	ruby	leap	class Year\n  def self.leap?(year)\n    if year % 4 == 0\n      if (year % 100 == 0) && (year % 400 != 0)\n        false\n      else\n        true\n      end\n    else\n      false\n    end\n  end\nend\n\n=begin\nif (@year %  400 == 0) && (@year % 100 == 0)\n  true\nelse\n  false\nend\n=end	\N	f	2	2	2014-04-08 13:15:18	2014-04-08 13:15:18	211	year.rb
433	20	c0a81a517163f08f40c5bbb2	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    if year % 4 == 0\n      if (year % 100 == 0) && (year % 400 == 0)\n        true\n      else\n        false\n      end\n    else\n      false\n    end\n  end\nend\n\n=begin\nif (@year %  400 == 0) && (@year % 100 == 0)\n  true\nelse\n  false\nend\n=end	\N	f	2	1	2014-04-17 14:22:55	2014-04-17 14:22:55	211	year.rb
434	20	281af01a1474c28caf223fcc	superseded	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    counter = 0\n    index = 0\n\n    a.each_char do |a|\n      if !a.eql?(b[index]) && b[index] != nil\n        counter += 1\n      end\n      index += 1\n    end\n\n    counter\n  end\nend	\N	f	4	1	2014-03-29 14:31:23	2014-03-29 14:31:23	212	hamming.rb
440	5	f88faf0533f9de4b294dc041	superseded	clojure	bob	(ns bob\n  (:use [clojure.string :only [blank? upper-case]]))\n\n(defn response-for [query]\n  (cond\n    (blank? query) "Fine. Be that way!"\n    (and (= query (upper-case query)) (re-find #"\\p{Alpha}" query)) "Woah, chill out!"\n    (= (last query) \\?) "Sure."\n    :else "Whatever."))	\N	f	1	1	2014-02-09 15:58:52	2014-02-09 15:58:52	216	bob.clj
441	5	795903a04a1f46fffae8d293	superseded	clojure	bob	(ns bob\n  (:use [clojure.string :only [blank? upper-case]]))\n\n(defn response-for [query]\n  (cond\n    (blank? query) "Fine. Be that way!"\n    (and (= query (upper-case query)) (some #(Character/isLetter %) query)) "Woah, chill out!"\n    (= (last query) \\?) "Sure."\n    :else "Whatever."))	\N	f	1	2	2014-04-15 06:58:36	2014-04-15 06:58:36	216	bob.clj
442	5	83154e02c8b6be97c25bbf7d	done	clojure	bob	(ns bob\n  (:use [clojure.string :only [blank? upper-case]]))\n\n(defn response-for [query]\n  (let [query-type (cond\n                     (blank? query) :nothing\n                     (and (= query (upper-case query))\n                           (some #(Character/isLetter %) query)) :yell\n                     (= (last query) \\?) :question\n                     :else :else)]\n    ({:question "Sure."\n      :yell "Woah, chill out!"\n      :nothing "Fine. Be that way!"\n      :else "Whatever."} query-type)))	\N	f	0	3	2014-04-30 05:22:03	2014-04-30 05:22:03	216	bob.clj
443	5	4d712bd3a1c14fb15ff41db4	hibernating	ruby	bob	class Bob\n  def hey(text)\n    case \n    when silence?(text)\n      'Fine. Be that way!'\n    when all_caps?(text)\n      'Woah, chill out!'\n    when question?(text)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n  def silence?(text)\n    text.strip.empty?\n  end\n\n  def has_lowercase?(text)\n    /[[:lower:]]/.match(text) ? true : false\n  end\n\n  def has_upcase?(text)\n    /[[:upper:]]/.match(text) ? true : false\n  end\n\n  def all_caps?(text)\n    has_upcase?(text) && !has_lowercase?(text)\n  end\n\n  def question?(text)\n    /\\?\\Z/.match(text) ? true : false\n  end\n\nend	\N	f	3	3	2014-02-28 17:57:31	2014-02-28 17:57:31	217	bob.rb
444	5	0dd00315dc1d1f2d0d16adf9	superseded	ruby	bob	class Bob\n  def hey(text)\n    case \n    when all_caps?(text)\n      'Woah, chill out!'\n    when question?(text)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n  def has_lowercase?(text)\n    return true if /[[:lower:]]/.match(text)\n  end\n\n  def all_caps?(text)\n    !has_lowercase?(text)\n  end\n\n  def question?(text)\n    return true if /\\?$/.match(text)\n  end\n\nend	\N	f	1	1	2014-03-31 17:51:53	2014-03-31 17:51:53	217	bob.rb
445	5	f8d570483574f3c4d51d3c18	superseded	ruby	bob	class Bob\n  def hey(text)\n    case \n    when silence?(text)\n      'Fine. Be that way!'\n    when all_caps?(text)\n      'Woah, chill out!'\n    when question?(text)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n  def silence?(text)\n    text.strip.empty?\n  end\n\n  def has_lowercase?(text)\n    /[[:lower:]]/.match(text) ? true : false\n  end\n\n  def has_upcase?(text)\n    /[[:upper:]]/.match(text) ? true : false\n  end\n\n  def has_digits?(text)\n    /[[:digit:]]/.match(text) ? true : false\n  end\n\n  def all_caps?(text)\n    has_upcase?(text) && !has_lowercase?(text)\n  end\n\n  def question?(text)\n    /\\?\\Z/.match(text) ? true : false\n  end\n\nend	\N	f	10	2	2014-05-05 04:04:34	2014-05-05 04:04:34	217	bob.rb
446	5	cee7387bf00216a91946ad56	superseded	ruby	robot-name	class Robot\n\n  def self.reset\n    @@potential_names = ('aa000'..'zz999').to_a.shuffle\n  end\n  reset\n\n  def name\n    @name ||= generate_name\n  end\n\n  def reset\n    @name = nil\n  end\n\n  private\n  def generate_name\n    raise "no names left to choose!" if @@potential_names.empty?\n    @@potential_names.pop\n  end\n\nend	\N	f	1	1	2014-02-23 04:12:35	2014-02-23 04:12:35	218	robot-name.rb
447	5	453af70f11714ef06bb2121a	superseded	ruby	robot-name	class Robot\n\n  class << self\n    def reset\n      @@potential_names = ('aa000'..'zz999').to_a.shuffle\n    end\n\n    def generate_name\n      raise "no names left to choose!" if @@potential_names.empty?\n      @@potential_names.pop\n    end\n  end\n  \n  reset\n\n  def name\n    @name ||= Robot.generate_name\n  end\n\n  def reset\n    @name = nil\n  end\n\nend	\N	f	1	2	2014-04-02 11:51:56	2014-04-02 11:51:56	218	robot-name.rb
448	5	bed5b7e39f9b0f186146ec58	done	ruby	robot-name	class Robot\n\n  class << self\n    def reset\n      @@potential_names = ('AA000'..'ZZ999').to_a.shuffle\n    end\n\n    def generate_name\n      raise "no names left to choose!" if @@potential_names.empty?\n      @@potential_names.pop\n    end\n  end\n\n  reset\n\n  def name\n    @name ||= Robot.generate_name\n  end\n\n  def reset\n    @name = nil\n  end\n\nend	\N	f	0	3	2014-04-27 11:33:43	2014-04-27 11:33:43	218	robot-name.rb
449	5	61ff27c3d806ace6313d69cc	superseded	haskell	queen-attack	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule Queens (boardString, canAttack) where\nimport Data.List.Split( chunksOf )\nimport Data.List( intersperse )\n\ntype Pos = (Int, Int)\n\ncanAttack :: Pos -> Pos -> Bool\ncanAttack (a, b) (a', b') =   a == a' \n                           || b == b' \n                           || abs (a - a') == abs (b - b')\n\nboardString :: Maybe Pos -> Maybe Pos -> String\nboardString w b = unlines . map (intersperse ' ') . chunksOf 8 $ \n                    zipWith pp (board w 'W') (board b 'B')\n  where\n    pp 'O' c = c\n    pp c 'O' = c\n    pp c1 c2 = error $ "Trying to place illegal pieces " ++ show c1 ++ show c2\n\nboard :: Maybe Pos -> Char -> String\nboard Nothing _ = replicate 64 'O'\nboard (Just (x, y)) c = replicate (8*x + y) 'O' \n                        ++ [c] \n                        ++ replicate (63 - y - 8*x) 'O'	\N	f	0	1	2014-01-17 02:17:34	2014-01-17 02:17:34	219	Queens.hs
450	5	d9b6956a61b211a999cb5e39	done	haskell	queen-attack	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule Queens (boardString, canAttack) where\nimport Data.List.Split( chunksOf )\nimport Data.List( intersperse )\n\ntype Pos = (Int, Int)\n\ncanAttack :: Pos -> Pos -> Bool\ncanAttack (a, b) (a', b') = a == a' || b == b' || abs (a - a') == abs (b - b')\n\nboardString :: Maybe Pos -> Maybe Pos -> String\nboardString w b = unlines . map (intersperse ' ') . chunksOf 8 $ \n                    zipWith pp (board w 'W') (board b 'B')\n  where\n    pp 'O' c = c\n    pp c 'O' = c\n    pp c1 c2 = error $ "Trying to place illegal pieces " ++ show c1 ++ show c2\n\nboard :: Maybe Pos -> Char -> String\nboard Nothing _ = replicate 64 'O'\nboard (Just (x, y)) c = replicate (8*x + y) 'O' \n                        ++ [c] \n                        ++ replicate (63 - y - 8*x) 'O'	\N	f	1	2	2014-01-18 09:02:54	2014-01-18 09:02:54	219	Queens.hs
452	5	b7e0f8745153a7ebaa89d07f	superseded	clojure	robot-name	(def NUMBERS (map char (concat (range 48 58))))\n(def UC (map char (concat (range 65 91))))\n\n(defn- random [collection]\n\t(nth collection (rand (count collection))))\n\n(defn- random-char [] (random UC))\n(defn- random-number [] (random NUMBERS))\n\n(defn- random-robot-name []\n\t (str \n\t \t(apply str (take 2 (repeatedly random-char))) \n\t \t(apply str (take 3 (repeatedly random-number)))))\n\n(defn robot [] (ref {:name (random-robot-name)}))\n\n(defn robot-name [robot]\n\t(robot :name))\n\n(defn reset-name [robot] \n\t(dosync (alter robot conj {:name (random-robot-name)})))	\N	f	1	1	2014-02-12 23:52:13	2014-02-12 23:52:13	221	robot-name.clj
454	5	dd9090116e8b0613225b351f	done	clojure	robot-name	(declare random-robot-name)\n\n(defn robot [] (atom (random-robot-name)))\n\n(defn robot-name [robot] @robot)\n\n(defn reset-name [robot] \n    (reset! robot (random-robot-name)))\n\n(def ^:private from-zero (int \\0))\n(def ^:private to-nine (int \\9))\n(def ^:private NUMBERS (map char (range from-zero to-nine)))\n\n(def ^:private from-A (int \\A))\n(def ^:private to-Z (int \\Z))\n(def ^:private UC (map char (range from-A to-Z)))\n\n(defn- random [collection]\n    (nth collection (rand (count collection))))\n\n(defn- random-char [] (random UC))\n(defn- random-number [] (random NUMBERS))\n\n(defn- random-robot-name []\n\t\t(apply str\n\t\t\t(concat (take 2 (repeatedly random-char)) \n        \t \t\t(take 3 (repeatedly random-number)))))	\N	f	1	5	2014-03-27 20:43:53	2014-03-27 20:43:53	221	robot-name.clj
455	5	002a6876236f406bbfad7031	superseded	clojure	robot-name	(def from-zero (int \\0))\n(def to-nine (int \\9))\n(def NUMBERS (map char (range from-zero to-nine)))\n\n(def from-A (int \\A))\n(def to-Z (int \\Z))\n(def UC (map char (range from-A to-Z)))\n\n(defn- random [collection]\n    (nth collection (rand (count collection))))\n\n(defn- random-char [] (random UC))\n(defn- random-number [] (random NUMBERS))\n\n(defn- random-robot-name []\n     (str \n        (apply str (take 2 (repeatedly random-char))) \n        (apply str (take 3 (repeatedly random-number)))))\n\n(defn robot [] (atom (random-robot-name)))\n\n(defn robot-name [robot] @robot)\n\n(defn reset-name [robot] \n    (reset! robot (random-robot-name)))	\N	f	1	3	2014-03-31 22:05:13	2014-03-31 22:05:13	221	robot-name.clj
456	5	0d91c011e5a6122eb85d3b96	superseded	clojure	robot-name	(def from-zero (int \\0))\n(def to-nine (int \\9))\n(def NUMBERS (map char (range from-zero to-nine)))\n\n(def from-A (int \\A))\n(def to-Z (int \\Z))\n(def UC (map char (range from-A to-Z)))\n\n(defn- random [collection]\n    (nth collection (rand (count collection))))\n\n(defn- random-char [] (random UC))\n(defn- random-number [] (random NUMBERS))\n\n(defn- random-robot-name []\n     (str \n        (apply str (take 2 (repeatedly random-char))) \n        (apply str (take 3 (repeatedly random-number)))))\n\n(defn robot [] (ref {:name (random-robot-name)}))\n\n(defn robot-name [robot]\n    (robot :name))\n\n(defn reset-name [robot] \n    (dosync (alter robot conj {:name (random-robot-name)})))	\N	f	1	2	2014-04-08 09:10:47	2014-04-08 09:10:47	221	robot-name.clj
457	5	7a49bf708c4a5ef77ba37e5e	done	clojure	phone-number	(ns phone)\n\n(defn number [n]\n  (let [num (apply str (re-seq #"\\d" n))]\n    (cond (= 10 (count num)) num\n          (and (= 11 (count num)) (= \\1 (first num))) (apply str (rest num))\n          :else "0000000000"\n    )))\n(defn area-code [n]\n  (apply str (take 3 (number n))))\n(defn pretty-print [n]\n  (let [number-parts (re-find (re-matcher #"(\\d{3})(\\d{3})(\\d{4})" (number n)))]\n    (str "(" (number-parts 1) ") " (number-parts 2) "-" (number-parts 3))))	\N	f	0	1	2014-02-06 12:00:19	2014-02-06 12:00:19	222	phone.clj
458	5	3d272310526cb8ee89f044b1	done	elixir	gigasecond	defmodule Gigasecond do\n\n  def from(bday) do\n    bday_seconds = :calendar.datetime_to_gregorian_seconds({bday, {0,0,0}})\n    {giga_date, _} = :calendar.gregorian_seconds_to_datetime(bday_seconds + 1_000_000_000)\n    giga_date\n  end\nend	\N	f	1	1	2014-02-11 12:56:08	2014-02-11 12:56:08	223	gigasecond.exs
459	5	5d686858bd225fe1efb87694	hibernating	ruby	word-count	class Phrase\n  def initialize phrase\n    @phrase = phrase.gsub(/,/, " ").gsub(/(?=\\S)([^a-zA-Z0-9_'])/,"").downcase\n  end\n\n  def word_count\n    count = {}\n    @phrase.split(" ").each do |word|\n      count[word] ? count[word] += 1 : count[word] = 1\n    end\n    count\n  end\nend	\N	f	0	1	2014-03-03 01:11:46	2014-03-03 01:11:46	224	phrase.rb
461	5	9da73192dde16c0e10a47723	superseded	haskell	point-mutations	module DNA\n( hammingDistance\n) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance xs ys = length $ filter (uncurry (/=)) $ zip xs ys	\N	f	1	1	2014-01-19 11:32:01	2014-01-19 11:32:01	226	point-mutations.hs
462	5	94f47f3b46a1489ba70f1f3a	done	haskell	point-mutations	module DNA\n( hammingDistance\n) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance xs ys = length $ filter id $ zipWith (/=) xs ys	\N	f	1	2	2014-01-21 23:58:43	2014-01-21 23:58:43	226	point-mutations.hs
465	5	212a071d4e97aebf14c3f1ca	superseded	ruby	rna-transcription	class DNA\n  def initialize(dna_chain)\n    @chain = dna_chain.to_s\n  end\n\n  def to_rna\n    @chain.gsub("T","U")\n  end\nend	\N	f	1	3	2014-03-05 23:25:27	2014-03-05 23:25:27	227	rna-transcription.rb
466	5	6520da535b892cf5469da02e	done	ruby	rna-transcription	class DNA\n  ACIDS = "ACGT"\n\n  def initialize(dna_chain)\n    @chain = dna_chain.to_s\n  end\n\n  def to_rna\n    @chain.tr(DNA::ACIDS, RNA::ACIDS)\n  end\nend\n\nclass RNA\n  ACIDS = "ACGU"\nend	\N	f	1	4	2014-04-07 18:24:12	2014-04-07 18:24:12	227	rna-transcription.rb
467	5	f0306a0f628f9a67954ff96c	pending	ruby	grains	class Grains\n\n  def square(n)\n    2 ** (n - 1)\n  end\n\n  def total\n    board = (1..64).collect { |n| square(n) }\n    board.sum\n  end\n\nend\n\nclass Array\n  def sum\n    self.inject{ |sum, x| sum + x }\n  end\nend	\N	f	2	1	2014-02-16 19:37:08	2014-02-16 19:37:08	228	grains.rb
468	5	55020b90642654091e128b8f	hibernating	elixir	word-count	defmodule Words do\n  def count(text) when is_binary(text) do\n    words = parse text\n    count words\n  end\n\n  def count(words) when is_list(words) do\n    List.foldl words, HashDict.new, &count/2\n  end\n\n  def count(word, tallies) do\n    Dict.put tallies, word, count(tallies[word])\n  end\n\n  def count(nil) do\n    1\n  end\n\n  def count(tally) do\n    tally + 1\n  end\n\n  def parse(text) when is_binary(text) do\n    parse String.split(text, %r/[\\s|\\W]+/)\n  end\n\n  def parse(text_parts) when is_list(text_parts) do\n    List.foldl text_parts, [], fn part, words ->\n      if Regex.run %r/([\\w|\\d]+)/, part do\n        word = String.downcase part\n        new_words = words ++ [word]\n      end\n      new_words || words\n    end\n  end\nend	\N	f	2	1	2014-02-04 20:55:06	2014-02-04 20:55:06	229	word-count.exs
469	5	d4a8dedf304496484e087457	done	python	bob	class Bob(object):\n    def hey(self, message):\n        if not message or not message.strip():\n            return 'Fine. Be that way!'\n        if message == message.upper():\n            return 'Woah, chill out!'\n        if message.endswith('?'):\n            return 'Sure.'\n        return 'Whatever.'	\N	f	7	1	2014-05-02 21:06:41	2014-05-02 21:06:41	230	bob.py
470	5	303c49829d2ed71b75b4838c	superseded	haskell	largest-series-product	module Series ( digits\n              , slices\n              , largestProduct\n              )\nwhere\n\nimport Data.Char (digitToInt)\n\ndigits :: String -> [Int]\ndigits = map digitToInt\n\ninfixr 9 ...\n(...) :: (c -> d) -> (a -> b -> c) -> a -> b -> d\na ... b = (a .) . b\n\nslices :: Int -> String -> [[Int]]\nslices n [] = []\nslices n lst@(_:rst) = \n  if length lst >= n\n  then (digits $ take n lst) : slices n rst\n  else []\n\nlargestProduct :: Int -> String -> Int\nlargestProduct = foldl max 0 ... map product ... slices	\N	f	1	1	2014-03-07 11:32:30	2014-03-07 11:32:30	231	Series.hs
471	5	b257f6e3a267742f89fa847a	done	haskell	largest-series-product	module Series ( digits\n              , slices\n              , largestProduct\n              , minLength\n              )\nwhere\n\nimport Data.Char (digitToInt)\nimport Data.List (foldl', tails)\n\ndigits :: String -> [Int]\ndigits = map digitToInt\n\ninfixr 9 ...\n(...) :: (c -> d) -> (a -> b -> c) -> a -> b -> d\na ... b = (a .) . b\n\nminLength :: Int -> [a] -> Bool\nminLength 0 _       = True\nminLength _ []      = False\nminLength n (_:rst) = minLength (pred n) rst\n\nslices :: Int -> String -> [[Int]]\nslices n = map (digits . take n) . filter (minLength n) . tails\n\nlargestProduct :: Int -> String -> Int\nlargestProduct = foldl' max 0 ... map product ... slices	\N	f	1	2	2014-04-01 21:28:44	2014-04-01 21:28:44	231	Series.hs
472	5	c8432cd39d7e6b759592cf21	superseded	ruby	space-age	class SpaceAge\n  ORBITAL_PERIODS = {\n    mercury: 0.2408467,\n    venus:   0.61519726,\n    earth:   1.0,\n    mars:    1.8808158,\n    jupiter: 11.862615,\n    saturn:  29.447498,\n    uranus:  84.016846,\n    neptune: 164.79132,\n  }\n\n  SECONDS_PER_EARTH_YEAR = 365.25 * 24 * 60 * 60\n\n  attr_reader :seconds\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  ORBITAL_PERIODS.keys.each do |planet|\n    define_method("on_#{planet}") do  # def on_earth\n      on(planet)                      #   on(:earth)\n    end                               # end\n  end\n\n  private\n\n  def on(planet)\n    (seconds / seconds_per_year(planet)).round(2)\n  end\n\n  def seconds_per_year(planet)\n    SECONDS_PER_EARTH_YEAR * ORBITAL_PERIODS.fetch(planet)\n  end\nend	\N	f	0	3	2014-04-04 15:36:17	2014-04-04 15:36:17	232	space-age.rb
473	5	43ba8fe424da5249aad7c102	superseded	ruby	space-age	class SpaceAge\n  SECONDS_PER_EARTH_YEAR = 365.25 * 24 * 60 * 60\n\n  ORBITAL_PERIODS = {\n    mercury: 0.2408467,\n    venus:   0.61519726,\n    earth:   1.0,\n    mars:    1.8808158,\n    jupiter: 11.862615,\n    saturn:  29.447498,\n    uranus:  84.016846,\n    neptune: 164.79132,\n  }\n\n  attr_reader :seconds\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  ORBITAL_PERIODS.keys.each do |planet|\n    define_method("on_#{planet}") do  # def on_earth\n      on(planet)                      #   on(:earth)\n    end                               # end\n  end\n\n  private\n\n  def on(planet)\n    (seconds / seconds_per_year(planet)).round(2)\n  end\n\n  def seconds_per_year(planet)\n    SECONDS_PER_EARTH_YEAR * ORBITAL_PERIODS.fetch(planet)\n  end\nend	\N	f	1	2	2014-04-15 06:42:30	2014-04-15 06:42:30	232	space-age.rb
474	5	7c35007825529d57b2a7962d	done	ruby	space-age	class SpaceAge\n  class Planet\n    ORBITAL_PERIODS = {\n      mercury: 0.2408467,\n      venus:   0.61519726,\n      earth:   1.0,\n      mars:    1.8808158,\n      jupiter: 11.862615,\n      saturn:  29.447498,\n      uranus:  84.016846,\n      neptune: 164.79132,\n    }\n\n    SECONDS_PER_EARTH_YEAR = 365.25 * 24 * 60 * 60\n\n    def initialize(key)\n      @key = key\n    end\n\n    def years(seconds)\n      (seconds / seconds_per_year).round(2)\n    end\n\n    private\n\n    def seconds_per_year\n      SECONDS_PER_EARTH_YEAR * orbital_period\n    end\n\n    def orbital_period\n      ORBITAL_PERIODS.fetch(@key)\n    end\n  end\n\n  attr_reader :seconds\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  Planet::ORBITAL_PERIODS.keys.each do |planet|\n    define_method("on_#{planet}") do     # def on_earth\n      Planet.new(planet).years(seconds)  #   Planet.new(:earth).years(seconds)\n    end                                  # end\n  end\nend	\N	f	4	4	2014-05-13 12:42:01	2014-05-13 12:42:01	232	space-age.rb
476	5	4eef4c77337f5b4be4144d59	superseded	elixir	point-mutations	defmodule DNA do\n\n  def hamming_distance(strand_a, strand_b) do\n    List.zip([strand_a, strand_b]) |> Enum.count(&point_compare/1)\n  end\n\n  def point_compare({_a, _a}), do: false\n  def point_compare({_a, _b}), do: true\nend	\N	f	1	5	2014-01-28 18:46:42	2014-01-28 18:46:42	233	point-mutations.exs
477	5	85598396d1ac96dd13440d82	done	elixir	point-mutations	defmodule DNA do\n\n  def hamming_distance(strand_a, strand_b) do\n    List.zip([strand_a, strand_b]) |> Enum.count(&point_compare/1)\n  end\n\n  def point_compare({a, b}), do: a != b\nend	\N	f	1	6	2014-02-03 23:16:40	2014-02-03 23:16:40	233	point-mutations.exs
478	5	efab8308a4862f52579f9a96	superseded	elixir	point-mutations	defmodule DNA do\n\n  def hamming_distance(strand_a, strand_b) do\n    Enum.zip(strand_a, strand_b) |> Enum.reduce(0, &point_compare/2)\n  end\n\n  def point_compare({a, nil}, count_acc),             do: count_acc\n  def point_compare({a, b},   count_acc) when a != b, do: count_acc + 1\n  def point_compare({_a, _a}, count_acc),             do: count_acc\nend	\N	f	1	1	2014-02-13 20:37:12	2014-02-13 20:37:12	233	point-mutations.exs
479	5	221454a7e086c6b7b5fa44ad	superseded	elixir	point-mutations	defmodule DNA do\n\n  def hamming_distance(strand_a, strand_b) do\n    Enum.zip(strand_a, strand_b) |> Enum.reduce(0, &point_compare/2)\n  end\n\n  def point_compare({_a, nil}, count_acc), do: count_acc\n  def point_compare({_a, _a},  count_acc), do: count_acc\n  def point_compare({_a, _b},  count_acc), do: count_acc + 1\nend	\N	f	1	2	2014-03-06 21:01:29	2014-03-06 21:01:29	233	point-mutations.exs
480	5	0651915da3ec17048ed84216	superseded	elixir	point-mutations	defmodule DNA do\n\n  def hamming_distance(strand_a, strand_b) do\n    List.zip([strand_a, strand_b]) |> Enum.reduce(0, &point_compare/2)\n  end\n\n  def point_compare({_a, _a},  count_acc), do: count_acc\n  def point_compare({_a, _b},  count_acc), do: count_acc + 1\nend	\N	f	1	3	2014-04-21 07:12:10	2014-04-21 07:12:10	233	point-mutations.exs
481	5	0df79651eebc76aaaa1d786a	superseded	elixir	point-mutations	defmodule DNA do\n\n  def hamming_distance(strand_a, strand_b) do\n    #List.zip([strand_a, strand_b]) |> Enum.reduce(0, &point_compare/2)\n    List.zip([strand_a, strand_b]) |> Enum.count(&point_compare/2)\n  end\n\n  #def point_compare({_a, _a},  count_acc), do: count_acc\n  #def point_compare({_a, _b},  count_acc), do: count_acc + 1\n  def point_compare({_a, _a}), do: false\n  def point_compare({_a, _b}), do: true\nend	\N	f	1	4	2014-04-28 02:07:39	2014-04-28 02:07:39	233	point-mutations.exs
482	6	ef628d84a693049a2c43105e	superseded	python	nucleotide-count	class DNA:\n\tdef __init__(self, dna):\n\t\tself.dna = dna\n\t\tself.valid_nucleotides = ["A", "C", "G", "T", "U"]\n\t\t\n\tdef count(self, nucleotide):\n\t\tif not nucleotide in self.valid_nucleotides:\n\t\t\traise ValueError(nucleotide + ' is not a nucleotide.')\n\t\treturn self.dna.count(nucleotide)\n\t\t\n\tdef nucleotide_counts(self):\n\t\treturn { n: self.count(n) for n in self.valid_nucleotides if n is not "U" }	\N	f	0	1	2013-12-13 16:57:00	2013-12-13 16:57:00	234	nucleotide-count.py
483	6	60fa607c60c47dde3ad383f6	superseded	python	nucleotide-count	class DNA:\n\n    dna_nucleotides = ["A", "C", "G", "T"]\n    rna_nucleotides = ["A", "C", "G", "U"]\n    valid_nucleotides = list(set(dna_nucleotides + rna_nucleotides))\n\n    def __init__(self, dna):\n        self.dna = dna\n\n    def count(self, nucleotide):\n        if not nucleotide in self.valid_nucleotides:\n            raise ValueError(nucleotide + ' is not a nucleotide.')\n        return self.dna.count(nucleotide)\n\n    def nucleotide_counts(self):\n        return { n: self.count(n) for n in self.dna_nucleotides }	\N	f	1	2	2014-01-01 17:24:23	2014-01-01 17:24:23	234	nucleotide-count.py
484	6	a5d0dabeaea4f287a4fd865c	done	python	nucleotide-count	class DNA:\n\n    dna_nucleotides = set("ACGT")\n    rna_nucleotides = set("ACGU")\n    valid_nucleotides = dna_nucleotides | rna_nucleotides\n\n    def __init__(self, dna):\n        self.dna = dna\n\n    def count(self, nucleotide):\n        if not nucleotide in self.valid_nucleotides:\n            raise ValueError(nucleotide + ' is not a nucleotide.')\n        return self.dna.count(nucleotide)\n\n    def nucleotide_counts(self):\n        return { n: self.count(n) for n in self.dna_nucleotides }	\N	f	0	3	2014-02-17 09:59:04	2014-02-17 09:59:04	234	nucleotide-count.py
485	6	55c7e2dd9fbf469ad1ea8824	done	ruby	rna-transcription	class DNA\n\n  THYMINE = "T"\n  URACIL  = "U"\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def to_rna\n    @sequence.tr THYMINE, URACIL\n  end\n\nend	\N	f	0	2	2013-12-04 05:08:04	2013-12-04 05:08:04	235	rna-transcription.rb
486	6	f41a72a5fed4b4abde727a4e	superseded	ruby	rna-transcription	class DNA\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def to_rna\n    @sequence.tr "T", "U"\n  end\n\nend	\N	f	0	1	2013-12-13 21:50:12	2013-12-13 21:50:12	235	rna-transcription.rb
488	6	9eb02ada46f69011c2107f12	done	haskell	food-chain	Yet another riddle	\N	f	3	1	2013-11-10 03:52:37	2013-11-10 03:52:37	237	FoodChain.hs
515	8	decc1e36f878f1b3c8d4d9c6	superseded	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = words\n  end\n\n  def word_count\n    count = Hash.new(0)\n    @words.downcase.scan(/\\w+/m) { |w| count[w] += 1 }\n    count\n  end\nend	\N	f	5	3	2014-05-18 12:12:19	2014-05-18 12:12:19	255	word-count.rb
490	6	3b0ae68ce454f6e9a414b1f4	superseded	ruby	anagram	class Anagram\n\n  def initialize(word, sorter = CharacterSorter)\n    @word = word.downcase\n    @sorter = sorter\n  end\n\n  def match(possible_anagrams)\n    possible_anagrams.select { |possible_anagram| anagram?(possible_anagram) }\n  end\n\n  private\n\n  attr_reader :word, :sorter\n\n  def anagram?(possible_anagram)\n    sorter.sort_characters(word) == sorter.sort_characters(possible_anagram)\n  end\nend\n\nmodule CharacterSorter\n  def self.sort_characters(word_to_sort)\n    word_to_sort.chars.sort\n  end\nend	\N	f	3	1	2013-12-21 09:05:08	2013-12-21 09:05:08	238	anagram.rb
491	6	2117f69256724a4a9f0cd7f1	superseded	ruby	bob	class Bob\n\n  def is_silent(line)\n    line.match(/\\A\\s*\\z/)\n  end\n\n  def is_upper_case(line)\n    line.upcase! == nil\n  end\n\n  def is_question(line)\n    line[-1] == "?"\n  end\n\n\n  def hey(line)\n    if is_silent(line)\n      "Fine. Be that way!"\n    elsif is_upper_case(line)\n      "Woah, chill out!"\n     elsif is_question(line)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n \nend	\N	f	0	1	2013-11-28 02:05:26	2013-11-28 02:05:26	239	bob.rb
492	6	996c001dce67d5660927921e	done	ruby	bob	class Bob\n\n\n  def hey(line)\n    if is_silent(line)\n      "Fine. Be that way!"\n    elsif is_upper_case(line)\n      "Woah, chill out!"\n     elsif is_question(line)\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n\n  def is_silent(line)\n    line.match(/\\A\\s*\\z/)\n  end\n\n  def is_upper_case(line)\n    line.upcase! == nil\n  end\n\n  def is_question(line)\n    line.end_with?"?"\n  end\n\nend	\N	f	4	2	2014-03-14 00:31:14	2014-03-14 00:31:14	239	bob.rb
493	6	f2b30031f1b780d7e1c8b8cf	hibernating	ruby	leap	class Year\n    def initialize year\n        @year = year\n    end\n\n    def leap?\n        return true  if divisible_by? 400\n        return false if divisible_by? 100\n        divisible_by? 4\n    end\n\nprivate\n    def divisible_by? n\n        @year % n == 0\n    end\nend	\N	f	3	1	2014-02-19 08:54:26	2014-02-19 08:54:26	240	leap.rb
494	6	96e4ccb20af44c0e24f7b4f7	hibernating	ruby	grains	=begin\nProgram that calculates the number of grains of wheat on a chessboard given that the number on each square doubles.\n\nThere once was a wise servant who saved the life of a prince. The king promised to pay whatever the servant could dream up. Knowing that the king loved chess, the servant told the king he would like to have grains of wheat. One grain on the first square of a chess board. Two grains on the next. Four on the third, and so on.\n\nThere are 64 squares on a chessboard.\n\nWrite a program that shows\n- how many grains were on each square, and\n- the total number of grains\n=end\n\nclass Grains\n  def total()\n    sum = 0\n    i = 1\n    \n    while i <= 64\n        sum += square(i)        \n        i+=1        \n    end    \n    return sum\n  end\n\n  def square(num)\n    return (2**num)/2\n  end  \nend\n\n=begin\nif __FILE__ == $0\n  Grain = Grains.new\n  puts Grain.total().to_s\nend\n=end	\N	f	0	1	2014-04-05 01:33:53	2014-04-05 01:33:53	241	grains.rb
495	6	0629edb0a1781f630637125a	done	elixir	sum-of-multiples	defmodule SumOfMultiples do\n\n  @doc """\n  Adds up all numbers from 1 to a given end number that are multiples of the factors provided.\n  \n  The default factors are 3 and 5.\n  """\n  @spec to(non_neg_integer, [non_neg_integer]) :: non_neg_integer\n  def to(limit, factors // [3, 5]) do\n    Enum.reduce(1..(limit-1), 0, fn x, acc ->\n      if Enum.any?(factors, &(rem(x, &1) == 0)), do: x + acc, else: acc\n    end)\n  end\n\nend	\N	f	3	1	2013-11-06 18:20:02	2013-11-06 18:20:02	242	sum-of-multiples.exs
496	6	48b00b2b7ce463f3f13115a6	hibernating	ruby	strain	class Array\n\n  def keep(&block)\n    select { |e| yield(e)}\n  end\n\n  def discard\n    select { |e| !yield(e)}\n  end\nend	\N	f	3	1	2014-01-10 10:38:46	2014-01-10 10:38:46	243	array.rb
497	6	509f2f67f076deb281f911e0	superseded	clojure	rna-transcription	(ns dna)\n\n(defn convert [c]\n  (if (contains? #{\\A \\C \\G \\T} c)\n      (if (= \\T c)\n          \\U\n          c)\n      (throw (AssertionError. ))))\n\n(defn to-rna [s]\n  (apply str (map convert s)))	\N	f	0	1	2013-11-07 17:35:45	2013-11-07 17:35:45	244	rna-transcription.clj
498	6	8a1b64f69222913e0c5cd010	done	clojure	rna-transcription	(ns dna)\n\n(defn convert [nucleotide]\n  (if (contains? #{\\A \\C \\G \\T} nucleotide)\n      (if (= \\T nucleotide)\n          \\U\n          nucleotide)\n      (throw (AssertionError. "Invalid nucleotide"))))\n\n(defn to-rna [s]\n  (apply str (map convert s)))	\N	f	0	2	2014-01-17 11:19:28	2014-01-17 11:19:28	244	dna.clj
499	6	bcc2c31c93a4129787506a49	hibernating	coffeescript	trinary	class Trinary\n    constructor: (@trinary) ->\n\n    toDecimal: ->\n        # Return 0 if the input is invalid\n        if not /^[0-2]{1,45}$/.test(@trinary)\n            return 0\n\n        # Split the numbers up\n        numbers = @trinary.split ""\n\n        # Create our output\n        output = 0\n\n        # Loop through the numbers in reverse\n        for number, index in numbers.reverse()\n            output = output + (number * Math.pow(3, index))\n\n        return Number(output)\n\nmodule.exports = Trinary	\N	f	3	1	2013-11-16 11:36:16	2013-11-16 11:36:16	245	trinary.coffee
500	6	76628e7391af47d1a2acb1bc	superseded	javascript	bob	var Bob = function() {};\n\nBob.prototype.hey = function(greeting) {\n  if (this.isShouting(greeting)) {\n    return "Woah, chill out!";\n  }\n  if (this.isAsking(greeting)) {\n    return "Sure.";\n  }\n  if (this.isSilence(greeting)) {\n    return "Fine. Be that way!";\n  }\n  return "Whatever.";\n};\n\nBob.prototype.isShouting = function(greeting) {\n  return !this.hasLowerCase(greeting) && /[A-Z]{2,}/.test(greeting);\n};\n\nBob.prototype.hasLowerCase = function(greeting) {\n  return greeting.toUpperCase() != greeting;\n};\n\nBob.prototype.isAsking = function(greeting) {\n  return /\\?$/.test(greeting);\n};\n\nBob.prototype.isSilence = function(greeting) {\n  return /^\\s*$/.test(greeting);\n};\n\nmodule.exports = Bob;	\N	f	3	1	2013-12-08 09:41:52	2013-12-08 09:41:52	246	bob.js
516	8	5aafad321cf9454c6ec77544	done	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = words\n  end\n\n  def word_count\n    count = Hash.new(0)\n    @words.downcase.scan(/\\w+/) { |w| count[w] += 1 }\n    count\n  end\nend	\N	f	8	4	2014-05-27 02:14:38	2014-05-27 02:14:38	255	word-count.rb
503	6	28f16580498de1e1a0c9340c	done	haskell	point-mutations	module DNA\n    ( hammingDistance\n    ) where\n\n-- Well this was easy.\nhammingDistance :: String -> String -> Int  \nhammingDistance str1 str2 = \n    length . filter (==False) $ zipWith (==) str1 str2	\N	f	3	1	2014-01-25 10:16:49	2014-01-25 10:16:49	247	point-mutations.hs
504	6	11308cae8a2b425097d4cdf2	done	clojure	beer-song	(ns beer\n  (:require [clojure.string :refer [join]]))\n\n(defn verse\n  "Return the given verse of the 'beer song'"\n  [n]\n  (apply str\n    (case n\n      0 ["No more bottles of beer on the wall, "\n         "no more bottles of beer.\\n"\n         "Go to the store and buy some more, "\n         "99 bottles of beer on the wall.\\n"]\n\n      1 ["1 bottle of beer on the wall, "\n         "1 bottle of beer.\\n"\n         "Take it down and pass it around, "\n         "no more bottles of beer on the wall.\\n"]\n\n      2 ["2 bottles of beer on the wall, "\n         "2 bottles of beer.\\n"\n         "Take one down and pass it around, "\n         "1 bottle of beer on the wall.\\n"]\n\n      [n " bottles of beer on the wall, "\n       n " bottles of beer.\\n"\n       "Take one down and pass it around, "\n       (dec n) " bottles of beer on the wall.\\n"])))\n\n(defn sing\n  "Sing from one verse to another, or the last one if not specified"\n\n  ([x]\n   (sing x 0))\n\n  ([x y]\n   (let [verse-numbers (range x (dec y) -1)\n         verses        (map verse verse-numbers)]\n     (str (join "\\n" verses) "\\n"))))	\N	f	0	1	2014-02-13 09:20:30	2014-02-13 09:20:30	248	beer-song.clj
505	6	c8f769d7298eb59c552e8793	superseded	ruby	word-count	class Phrase\n\n  def initialize phrase\n    @phrase = phrase.downcase.gsub(/[^a-z\\d\\"'"s]/, ' ')\n  end\n\n  def word_count\n    word_array = phrase.split(" ")\n    word_count = Hash.new(0)\n    word_array.each { |word| word_count[word] += 1 }\n    word_count\n  end\n\n  private\n\n  attr_accessor :phrase\n\nend	\N	f	0	1	2013-11-05 00:44:40	2013-11-05 00:44:40	249	word-count.rb
506	6	75c2715746e35efb6f7dc669	superseded	ruby	word-count	class Phrase\n\n  def initialize phrase\n    @phrase = phrase\n  end\n\n  def word_count\n    word_array.each_with_object(Hash.new(0)) { |word, word_count| word_count[word] += 1 }\n  end\n\n  private\n\n  attr_reader :phrase\n  \n  def word_array\n    phrase.downcase.gsub(/[^a-z\\d\\"'"s]/, ' ').split(" ")\n  end\n\nend	\N	f	4	2	2013-12-16 05:24:55	2013-12-16 05:24:55	249	word-count.rb
507	6	15943598a4c7d8058307d3c1	done	ruby	word-count	class Phrase\n\n  def initialize phrase\n    @phrase = phrase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) { |word, word_count| word_count[word] += 1 }\n  end\n\n  private\n\n  attr_reader :phrase\n  \n  def words\n    phrase.downcase.gsub(/[^a-z\\d\\"'"s]/, ' ').split(" ")\n  end\n\nend	\N	f	5	3	2014-01-19 18:17:24	2014-01-19 18:17:24	249	word-count.rb
508	6	7a431e6ca3f9be21110f02cb	pending	javascript	point-mutations	var DNA = function(dnaString){\n  this.dnaString = dnaString.split('');\n\n  function countMisMatches(dna1, dna2){\n    function isMisMatch(base, i) { return base != dna2[i]; }\n    return dna1.filter(isMisMatch).length;\n  }\n\n  this.hammingDistance = function(mutations){\n    var dnaBases, mutationBases;\n\n    if(this.dnaString.length === 0){ return 0; }\n    dnaBases = this.dnaString.splice(0, mutations.length);\n    mutationBases = mutations.split('');\n    return countMisMatches(dnaBases, mutationBases);\n  };\n};\n\nmodule.exports = DNA;	\N	f	3	1	2013-11-02 14:24:58	2013-11-02 14:24:58	250	point-mutations.js
509	8	cb80fa0a30feffae2af06ebf	pending	python	word-count	import re\n\nclass Phrase:\n\n    def __init__(self, phrase):\n        self.phrase = phrase.split(' ')\n\n    def scrub_words(self):\n        words = []\n\n        for p in self.phrase:\n            if re.search(r'[a-zA-Z]', p):\n                words.append(re.sub(r'[0-9!@#$%^&*(),]','',p).lower())\n            elif re.search(r'[0-9]+', p):\n                words.append(re.search(r'[0-9]+',p).group())\n\n        return words\n\n    def word_count(self):\n        freq = {}\n        words = self.scrub_words()\n\n        for word in words:\n            if word in freq:\n                freq[word] += 1\n            else:\n                freq[word] = 1\n        return freq	\N	f	1	1	2014-05-23 20:58:56	2014-05-23 20:58:56	251	wordcount.py
510	8	f7bb376e660d7b0624d2bc3a	hibernating	haskell	word-count	module WordCount (wordCount) where\n\timport qualified Data.Map as M\n\timport Data.List.Split\n\timport Data.Char\n\n\tignored = " ,_.:&@%!^$#"\n\tsplitWords a = filter (/= "") . splitOneOf ignored $ map toLower a\n\n\tincr :: Maybe Integer -> Maybe Integer\n\tincr (Just i) = Just (i + 1)\n\tincr Nothing = Just 1\n\n\tmapWords :: [String] -> M.Map [Char] Integer\n\tmapWords [] = M.empty\n\tmapWords (w:list) = M.alter incr w (mapWords list)\n\n\twordCount :: String -> M.Map [Char] Integer\n\twordCount a = mapWords (splitWords a)	\N	f	1	1	2014-05-17 22:23:10	2014-05-17 22:23:10	252	word-count.hs
511	8	220d2ea795c9184932ec28b6	hibernating	haskell	leap	module LeapYear (isLeapYear) where\r\n\r\nisLeapYear :: Int -> Bool\r\nisLeapYear n = (n `mod` 400 == 0) || ( (n `mod` 100 /= 0) && (n `mod` 4 ==0))	\N	f	3	1	2014-05-21 16:08:05	2014-05-21 16:08:05	253	LeapYear.hs
512	8	5b0601c8d27d2974cee580dc	done	ruby	leap	module Year\n  extend self\n\n  def leap?(year)\n    return true  if year % 400 == 0\n    return false if year % 100 == 0\n    year % 4 == 0\n  end\n\nend	\N	f	7	1	2014-05-17 20:23:06	2014-05-17 20:23:06	254	year.rb
513	8	e8b61e9863eff62e62269bd2	superseded	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = words\n  end\n\n  def word_count\n    count = Hash.new(0)\n    @words.scan(/\\w+/m).map(&:downcase).each { |w| count[w] += 1 }\n    count\n  end\nend	\N	f	1	2	2014-05-15 20:25:18	2014-05-15 20:25:18	255	word-count.rb
519	8	0e1cce64a4fb7a5bafb91015	done	clojure	rna-transcription	(ns dna\n  (:use [clojure.string :only [replace]])\n  )\n\n(defn to-rna [dna]\n  (replace dna "T" "U"))	\N	f	0	1	2014-05-19 08:30:13	2014-05-19 08:30:13	258	rna-transcription.clj
520	8	7f9b5b37a8041cdab637f55f	superseded	python	rna-transcription	dna_to_rna_map = {\n\t'G': 'C',\n\t'C': 'G',\n\t'T': 'A',\n\t'A': 'U'\n}\n\nclass DNA(object):\n\tdef __init__(self, dna_str):\n\t\tself.dna_str = dna_str\n\n\tdef to_rna(self):\n\t\treturn ''.join([dna_to_rna_map[c] for c in self.dna_str])	\N	f	0	1	2014-05-14 20:14:54	2014-05-14 20:14:54	259	dna.py
521	8	c5beb86410e899e955fcc8bf	pending	python	rna-transcription	class DNA(object):\n\tTO_RNA = {\n\t\t'G': 'C',\n\t\t'C': 'G',\n\t\t'T': 'A',\n\t\t'A': 'U'\n\t}\n\tdef __init__(self, strand):\n\t\tself.strand = strand\n\n\tdef to_rna(self):\n\t\treturn ''.join([DNA.TO_RNA[c] for c in self.strand])	\N	f	6	2	2014-05-15 20:31:24	2014-05-15 20:31:24	259	dna.py
522	8	36dbf38e4edc4cea41261727	done	perl5	rna-transcription	use strict;\nuse warnings;\n\n{\n  package DNA;\n  sub to_rna {\n    my $strand = shift;\n    $strand =~ tr/T/U/;\n    $strand;\n  }\n}\n1;	\N	f	2	2	2014-05-13 19:57:09	2014-05-13 19:57:09	260	rna-transcription.pm
523	8	7e8578f40952d2015853b449	superseded	perl5	rna-transcription	use strict;\nuse warnings;\n\n{\n  package DNA;\n  sub to_rna {\n    my $strand = shift;\n    $strand =~ s/T/U/g;\n    $strand;\n  }\n}\n1;	\N	f	2	1	2014-05-18 17:23:21	2014-05-18 17:23:21	260	rna-transcription.pm
524	8	4f1faa0440989937a712b7fc	done	perl5	triangle	package Triangle;\n\nuse List::MoreUtils qw(uniq);\n\nsub kind {\n   my @sides = @_;\n\n   foreach my $side (@sides) {\n      die "TriangleError" if $side <= 0;\n   }\n\n   die "TriangleError" if not triangle_inequality(@sides);\n\n   my @uniq = uniq @sides;\n\n   if    ( @uniq == 1 ) { return 'equilateral' }\n   elsif ( @uniq == 2 ) { return 'isosceles'   }\n   else                 { return 'scalene'     }\n}\n\nsub triangle_inequality {\n   my @sides = @_;\n\n   for (0..2) {\n      my @s   = @sides;\n      my $sum = splice @s, $_, 1;\n\n      return 0 if $sum >= $s[0] + $s[1];\n   }\n\n   return 1;\n}\n\n1;	\N	f	3	1	2014-05-17 12:22:49	2014-05-17 12:22:49	261	triangle.pm
525	8	25f6709c6eac8b9ca3169dd6	done	ruby	bob	class Bob\n\n  attr_reader :input\n\n  def hey(input)\n    @input = input\n\n    respond_to_silence ||\n    respond_to_shouting ||\n    respond_to_question ||\n    respond_to_statement\n  end\n\n  private\n\n  def respond_to_silence\n    "Fine. Be that way!" if silent?\n  end\n\n  def respond_to_shouting\n    "Woah, chill out!" if shouting?\n  end\n\n  def respond_to_question\n    "Sure." if question?\n  end\n\n  def respond_to_statement\n    "Whatever."\n  end\n\n  def silent?\n    input.strip.empty?\n  end\n\n  def shouting?\n    input.upcase == input\n  end\n\n  def question?\n    input.end_with?('?')\n  end\n\nend	\N	f	2	1	2014-05-15 03:25:24	2014-05-15 03:25:24	262	bob.rb
526	8	69f180fa2a7b5b02ae46d332	needs_input	go	anagram	package anagram\n\nimport (\n\t"fmt"\n\t"sort"\n\t"strings"\n)\n\nfunc Detect(subject string, candidates []string) []string {\n\tlowercaseSubject := strings.ToLower(subject)\n\tnormalized := normalize(lowercaseSubject)\n\tresult := []string{}\n\tfor _, candidate := range candidates {\n\t\tlowercaseCandidate := strings.ToLower(candidate)\n\t\tif lowercaseSubject == lowercaseCandidate {\n\t\t\tcontinue\n\t\t}\n\t\tif normalized == normalize(lowercaseCandidate) {\n\t\t\tresult = append(result, lowercaseCandidate)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc normalize(subject string) string {\n\truneCounts := map[string]int{}\n\tkeys := []string{}\n\tfor _, Rune := range subject {\n\t\tstr := string(Rune)\n\t\truneCounts[str] += 1\n\t\tif runeCounts[str] == 1 {\n\t\t\tkeys = append(keys, str)\n\t\t}\n\t}\n\tsort.Strings(keys)\n\tresult := ""\n\tfor _, key := range keys {\n\t\tresult = fmt.Sprintf("%s[%s]=%d;", result, key, runeCounts[key])\n\t}\n\treturn result\n}	\N	f	4	2	2014-05-20 16:16:13	2014-05-20 16:16:13	263	anagram.go
528	8	29bbbffd91b003ba929ae21f	done	ruby	hamming	class Hamming \n  def initialize(dna)\n    @@original_string = dna\n\n  end\n\n  def Hamming.compute(original_string, secondary_string)\n    #returns a number indicating the number of base-pair mismatches\n\n    errors = 0\n    dna_1 = chars_to_array(original_string)\n    dna_2 = chars_to_array(secondary_string)\n\n    #sets the shortest sequence, as that is all that can be tested\n    shorter = dna_1.length < dna_2.length ? dna_1 : dna_2\n\n    (0..shorter.length-1).each do |i|\n      errors += 1 if dna_1[i] != dna_2[i]\n    end\n   \n    return errors \n  end\n\n  private\n\n  def Hamming.chars_to_array(string)\n    return string.split(//)\n  end\n\n\nend	\N	f	5	1	2014-05-18 09:19:51	2014-05-18 09:19:51	264	hamming.rb
551	9	5c88fe1cc7fad41567b890e7	superseded	ruby	bob	class Bob\n  def hey(message)\n    message.strip!\n\n    if message.empty?\n      return 'Fine. Be that way!'\n    elsif message.upcase == message\n      return 'Woah, chill out!'\n    elsif message.end_with?('?')\n      return 'Sure.'\n    else\n      return 'Whatever.'\n    end\n  end\nend	\N	f	4	2	2014-04-21 17:21:25	2014-04-21 17:21:25	272	bob.rb
531	8	374f06a32477322b13585127	hibernating	ruby	raindrops	require_relative '../prime-factors/prime_factors'\n\n\n# - If the number contains 3 as a prime factor, output 'Pling'.\n# - If the number contains 5 as a prime factor, output 'Plang'.\n# - If the number contains 7 as a prime factor, output 'Plong'.\n# - If the number does not contain 3, 5, or 7 as a prime factor,\n#   just pass the number's digits straight through.\n\nclass Raindrops\n\n  Mapping = { 3 => "Pling", 5 => "Plang", 7 => "Plong" }\n\n  def convert(n)\n    factors = PrimeFactors.for(n)\n    o = Mapping.inject("") do | s, (k, v) |\n      factors.include?(k) ? s + v : s\n    end\n    o.empty? ? n.to_s : o\n  end\n\nend	\N	f	0	3	2014-05-14 07:43:19	2014-05-14 07:43:19	266	raindrops.rb
532	8	145d206612f2d154199df533	superseded	ruby	raindrops	require_relative '../prime-factors/prime_factors'\n\n\n# - If the number contains 3 as a prime factor, output 'Pling'.\n# - If the number contains 5 as a prime factor, output 'Plang'.\n# - If the number contains 7 as a prime factor, output 'Plong'.\n# - If the number does not contain 3, 5, or 7 as a prime factor,\n#   just pass the number's digits straight through.\n\nclass Raindrops\n\n  def convert(n)\n    factors = PrimeFactors.for(n)\n    s = ""\n    if factors.member?(3) then\n      s += "Pling"\n    end\n    if factors.member?(5) then\n      s += "Plang"\n    end\n    if factors.member?(7) then\n      s += "Plong"\n    end\n    if s == ""\n      s = n.to_s\n    end\n    s\n  end\n\nend	\N	f	2	1	2014-05-18 15:01:55	2014-05-18 15:01:55	266	raindrops.rb
533	8	79238f32c79a8475d818eb14	superseded	ruby	raindrops	require_relative '../prime-factors/prime_factors'\n\n\n# - If the number contains 3 as a prime factor, output 'Pling'.\n# - If the number contains 5 as a prime factor, output 'Plang'.\n# - If the number contains 7 as a prime factor, output 'Plong'.\n# - If the number does not contain 3, 5, or 7 as a prime factor,\n#   just pass the number's digits straight through.\n\nclass Raindrops\n\n  Mapping = { 3 => Pling, 5 => Plang, 7 => Plong }\n\n  def convert(n)\n    factors = PrimeFactors.for(n)\n    Mapping.inject("") do | s, (k,v) |\n      if factors.contains?(k) then s += v end\n    end\n    s.empty? ? n.to_s : s\n  end\n\nend	\N	f	2	2	2014-05-19 23:59:05	2014-05-19 23:59:05	266	raindrops.rb
535	9	5eae3ee64fdf34aafd697992	done	ruby	hamming	class Hamming\n  def self.compute(s1, s2)\n    new(s1, s2).compute\n  end\n\n  def initialize(s1, s2)\n    @s1 = s1\n    @s2 = s2\n  end\n\n  def compute\n    base_pairs.count { |b1, b2| b1 != b2 }\n  end\n\n  private\n\n  def base_pairs\n    base_pairs = @s1.chars.zip(@s2.chars)\n    base_pairs.keep_if { |pair| pair.first && pair.last } \n  end\nend	\N	f	0	5	2013-11-26 03:44:41	2013-11-26 03:44:41	268	hamming.rb
536	9	c3138958bc44d2915f883146	superseded	ruby	hamming	class Hamming\n  def self.compute(original, comparison)\n    original.chars.zip(comparison.chars).select { |a, b| a != b and a and b }.length\n  end\nend	\N	f	3	3	2013-12-13 00:45:10	2013-12-13 00:45:10	268	hamming.rb
537	9	794342577572c4f64484b36b	superseded	ruby	hamming	class Hamming\n  def self.compute(original, comparison)\n    original.chars.zip(comparison.chars).count { |a, b| a != b and a and b }\n  end\nend	\N	f	3	4	2013-12-19 21:45:50	2013-12-19 21:45:50	268	hamming.rb
538	9	2a90ee3e8ff360cdb6a30f92	superseded	ruby	hamming	class Hamming\n  def self.compute(original, comparison)\n    original.chars.zip(comparison.chars).select { a != b and a and b }.length\n  end\nend	\N	f	3	2	2014-03-31 06:10:51	2014-03-31 06:10:51	268	hamming.rb
539	9	7c6b63993538a0e66a62f97b	superseded	ruby	hamming	class Hamming\n  def compute(first_strand, second_strand)\n    min_length = [first_strand.size, second_strand.size].min\n    (0...min_length).inject(0) do |distance, index|\n      unless first_strand[index] == second_strand[index]\n        distance += 1\n      else\n        distance\n      end\n    end\n  end\nend\n\nHamming = Hamming.new	\N	f	11	1	2014-05-15 01:24:29	2014-05-15 01:24:29	268	hamming.rb
540	9	907b4e3acba920a817a423aa	done	clojure	bob	(ns bob (:require [clojure.test :refer :all]))\n\n(defn- deftest? [[s _]]\n  (= (str s) "deftest"))\n\n(defn- question [[_ _ [_ [_ _ q]]]]\n  (second q))\n\n(defn- response [[_ _ [_ [_ res]]]]\n  res)\n\n(defn- read-test [path]\n    (read-string (str \\( (slurp path) \\))))\n\n(def resps\n  (reduce\n    (fn [acc f]\n      (if (deftest? f)\n        (assoc acc (question f) (response f))\n        acc))\n    {}\n    (read-test "bob_test.clj")))\n\n(defn response-for [q]\n  (get resps q "ups"))	\N	f	3	1	2014-05-09 11:13:08	2014-05-09 11:13:08	269	bob.clj
567	9	e2cb619a15017c54fa78f563	pending	go	accumulate	package accumulate\n\n// Accumulate applies an given operation on each element of a collection of strings\nfunc Accumulate(items []string, converter func(string) string) []string {\n    for i, item := range items {\n        items[i] = converter(item)\n    }\n    return items\n}	\N	f	1	1	2014-01-20 04:49:53	2014-01-20 04:49:53	280	accumulate.go
794	16	1f8d68e025b1dea1111f1011	superseded	python	bob	# -*- coding: utf-8 -*-\r\n\r\nclass Bob:\r\n\r\n    @staticmethod\r\n    def hey(s: str) -> str:\r\n        if not s.strip():\r\n            return "Fine. Be that way!"\r\n        elif s.isupper():\r\n            return "Woah, chill out!"\r\n        elif s.endswith('?'):\r\n            return "Sure."\r\n        else:\r\n            return "Whatever."\r	\N	f	4	3	2014-02-17 18:26:28	2014-02-17 18:26:28	399	bob.py
542	9	9d69a91d08fde58a385b1ef4	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isUpper, isLetter, isSpace)\n\nresponseFor :: String -> String\nresponseFor phrase | not $ any (not . isSpace) phrase = "Fine. Be that way!"\n                   | shout = "Woah, chill out!"\n                   | last phrase == '?' = "Sure."\n                   | otherwise = "Whatever."\n  where shout = (not . null) letters && all isUpper letters\n        letters = filter isLetter phrase	\N	f	1	1	2013-12-11 22:28:47	2013-12-11 22:28:47	271	Bob.hs
543	9	2d931bd46459d63f21908360	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isUpper, isLetter, isSpace)\n\nresponseFor :: String -> String\nresponseFor phrase\n  | not $ any (not . isSpace) phrase = "Fine. Be that way!"\n  | shout = "Woah, chill out!"\n  | last phrase == '?' = "Sure."\n  | otherwise = "Whatever."\n  where\n    shout = (not . null) letters && all isUpper letters\n    letters = filter isLetter phrase	\N	f	0	2	2013-12-22 16:46:17	2013-12-22 16:46:17	271	Bob.hs
544	9	768010e33461a159c816757c	done	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isUpper, isLetter, isSpace)\n\nresponseFor :: String -> String\nresponseFor phrase\n  | all isSpace phrase = "Fine. Be that way!"\n  | shout = "Woah, chill out!"\n  | last phrase == '?' = "Sure."\n  | otherwise = "Whatever."\n  where\n    shout = (not . null) letters && all isUpper letters\n    letters = filter isLetter phrase	\N	f	1	3	2013-12-27 19:38:53	2013-12-27 19:38:53	271	Bob.hs
545	9	e06b7d393b6a28165a7122f6	superseded	ruby	bob	class Message\n  def initialize(text)\n    if text.kind_of?(String)\n      text.strip!\n      @silent = text.empty?\n      @shouting = text.upcase == text\n      @question = text.end_with?('?')\n    end\n  end\n\n  def silent?\n    @silent\n  end\n\n  def shouting?\n    @shouting\n  end\n\n  def question?\n    @question\n  end\nend\n\nclass Bob\n  SILENCE_RESPONSE = 'Fine. Be that way!'\n  SHOUTING_RESPONSE = 'Woah, chill out!'\n  QUESTION_RESPONSE = 'Sure.'\n  GENERIC_RESPONSE = 'Whatever.'\n\n  def hey(text)\n    message = Message.new(text)\n\n    if message.silent?\n      return SILENCE_RESPONSE\n    elsif message.shouting?\n      return SHOUTING_RESPONSE\n    elsif message.question?\n      return QUESTION_RESPONSE\n    else\n      return GENERIC_RESPONSE\n    end\n  end\n\nend	\N	f	1	6	2013-11-30 00:54:10	2013-11-30 00:54:10	272	bob.rb
546	9	79734e730247ab0979d49f8b	superseded	ruby	bob	class Bob\n  def hey(message)\n    message.strip!\n\n    if message == ''\n      return 'Fine. Be that way!'\n    elsif message.upcase == message\n      return 'Woah, chill out!'\n    elsif message[-1] == '?'\n      return 'Sure.'\n    else\n      return 'Whatever.'\n    end\n  end\nend	\N	f	1	1	2013-12-13 19:05:51	2013-12-13 19:05:51	272	bob.rb
547	9	8d76bacf869a7fff3dedcd9f	done	ruby	bob	class Message\n  def initialize(text)\n    @text = text.strip\n  end\n\n  def silent?\n    @text.empty?\n  end\n\n  def shouting?\n    @text.upcase == @text\n  end\n\n  def question?\n    @text.end_with?('?')\n  end\nend\n\nclass Bob\n  SILENCE_RESPONSE = 'Fine. Be that way!'\n  SHOUTING_RESPONSE = 'Woah, chill out!'\n  QUESTION_RESPONSE = 'Sure.'\n  GENERIC_RESPONSE = 'Whatever.'\n\n  def hey(text)\n    message = Message.new(text)\n\n    if message.silent?\n      return SILENCE_RESPONSE\n    elsif message.shouting?\n      return SHOUTING_RESPONSE\n    elsif message.question?\n      return QUESTION_RESPONSE\n    else\n      return GENERIC_RESPONSE\n    end\n  end\n\nend	\N	f	3	7	2014-02-12 12:14:51	2014-02-12 12:14:51	272	bob.rb
548	9	511064d57bc5d38571cdd4d5	superseded	ruby	bob	class Bob\n  SILENCE_RESPONSE = 'Fine. Be that way!'\n  SHOUTING_RESPONSE = 'Woah, chill out!'\n  QUESTION_RESPONSE = 'Sure.'\n  GENERIC_RESPONSE = 'Whatever.'\n\n  def hey(message)\n    message.strip!\n\n    if message.empty?\n      return SILENCE_RESPONSE\n    elsif message.upcase == message\n      return SHOUTING_RESPONSE\n    elsif message.end_with?('?')\n      return QUESTION_RESPONSE\n    else\n      return GENERIC_RESPONSE\n    end\n  end\nend	\N	f	3	3	2014-02-22 19:41:36	2014-02-22 19:41:36	272	bob.rb
549	9	68a4fc1de2a47e6310d257a6	superseded	ruby	bob	class Message\n  def initialize(text)\n    if text.kind_of?(String)\n      @text = text.strip\n    else\n      @text = 'error -- non-string input'\n    end\n  end\n\n  def silent?\n    @silent ||= @text.empty?\n  end\n\n  def shouting?\n    @shouting ||= @text.upcase == @text\n  end\n\n  def question?\n    @question ||= @text.end_with?('?')\n  end\nend\n\nclass Bob\n  SILENCE_RESPONSE = 'Fine. Be that way!'\n  SHOUTING_RESPONSE = 'Woah, chill out!'\n  QUESTION_RESPONSE = 'Sure.'\n  GENERIC_RESPONSE = 'Whatever.'\n\n  def hey(text)\n    message = Message.new(text)\n\n    if message.silent?\n      return SILENCE_RESPONSE\n    elsif message.shouting?\n      return SHOUTING_RESPONSE\n    elsif message.question?\n      return QUESTION_RESPONSE\n    else\n      return GENERIC_RESPONSE\n    end\n  end\n\nend	\N	f	3	5	2014-03-04 03:20:54	2014-03-04 03:20:54	272	bob.rb
550	9	2037e3d1e5625bf9780502ff	superseded	ruby	bob	class Message\n  def initialize(text)\n    text.strip!\n    @text = text\n  end\n\n  def silent?\n    @text.empty?\n  end\n\n  def shouting?\n    @text.upcase == @text\n  end\n\n  def question?\n    @text.end_with?('?')\n  end\nend\n\nclass Bob\n  SILENCE_RESPONSE = 'Fine. Be that way!'\n  SHOUTING_RESPONSE = 'Woah, chill out!'\n  QUESTION_RESPONSE = 'Sure.'\n  GENERIC_RESPONSE = 'Whatever.'\n\n  def hey(text)\n    message = Message.new(text)\n\n    if message.silent?\n      return SILENCE_RESPONSE\n    elsif message.shouting?\n      return SHOUTING_RESPONSE\n    elsif message.question?\n      return QUESTION_RESPONSE\n    else\n      return GENERIC_RESPONSE\n    end\n  end\n\nend	\N	f	4	4	2014-03-28 01:12:00	2014-03-28 01:12:00	272	bob.rb
553	9	15574ff4788898d78137dad2	done	javascript	binary-search-tree	var Bst = function(data) {\r\n  var self = this,\r\n      insertOn = function(newData, side) {\r\n        if(self[side])\r\n          self[side].insert(newData);\r\n        else\r\n          self[side] = new Bst(newData);\r\n      };\r\n\r\n  this.data = data;\r\n  this.left = null;\r\n  this.right = null;\r\n\r\n  this.insert = function(newData) {\r\n    insertOn(newData, newData <= self.data ? "left" : "right");\r\n  };\r\n\r\n  this.each = function(callback) {\r\n    self.left && self.left.each(callback);\r\n    callback(self.data);\r\n    self.right && self.right.each(callback);\r\n  };\r\n};\r\n\r\nmodule.exports = Bst;\r	\N	f	1	1	2014-04-24 22:41:34	2014-04-24 22:41:34	274	binary-search-tree.js
554	9	942030d2ebe0b1d6dcf2d566	superseded	ruby	accumulate	require 'minitest/autorun'\nrequire 'minitest/pride'\nrequire_relative 'array'\n\nclass ArrayTest < MiniTest::Unit::TestCase\n\n  def test_empty_accumulation\n    assert_equal [], [].accumulate {|e| e * e}\n  end\n\n  def test_accumulate_squares\n    result = [1, 2, 3].accumulate { |number|\n      number * number\n    }\n    assert_equal [1, 4, 9], result\n  end\n\n  def test_accumulate_upcases\n    result = %w(hello world).accumulate { |word|\n      word.upcase\n    }\n    assert_equal ['HELLO', 'WORLD'], result\n  end\n\n  def test_accumulate_reversed_strings\n    result = %w(the quick brown fox etc).accumulate { |word|\n      word.reverse\n    }\n    assert_equal ["eht", "kciuq", "nworb", "xof", "cte"], result\n  end\n\n  def test_accumulate_recursively\n    result = %w(a b c).accumulate { |char|\n      %w(1 2 3).accumulate { |digit|\n        "#{char}#{digit}"\n      }\n    }\n    assert_equal [["a1", "a2", "a3"], ["b1", "b2", "b3"], ["c1", "c2", "c3"]], result\n  end\n\nend	\N	f	1	1	2013-11-22 17:35:30	2013-11-22 17:35:30	275	accumulate.rb
555	9	0652610453f1d82f6867d5ea	done	ruby	accumulate	class Array\n  def accumulate\n    each.with_index { |item, index| self[index] = yield item }\n  end\nend	\N	f	1	2	2014-03-02 13:25:27	2014-03-02 13:25:27	275	accumulate.rb
556	9	799234bb92d5bdca3798bcfe	pending	ruby	etl	# = etl.rb\n# Author::     Ricardo Gonzalez Saldivar\n# Web::        rigsald.net\n#\n# == Bob Class\n# _Bob_ class was designed during the\n# exercism.io exercises.\nclass ETL\n  def self.transform(oldData)\n    newData = {}\n    oldData.each do |x, y|\n      y.each do |value|\n        newData[value.downcase] = x\n      end\n    end\n    return newData\n  end\nend	\N	f	1	1	2013-11-16 22:33:18	2013-11-16 22:33:18	276	etl.rb
557	9	850d12e2971b95d1b2aa0a96	done	python	rna-transcription	class DNA:\n\tdef __init__(self, dna):\n\t\tself.dna = dna\n\tdef to_rna(self):\n\t\treturn self.dna.replace("T", "U")	\N	f	2	1	2013-12-29 14:28:17	2013-12-29 14:28:17	277	dna.py
558	9	bbe5e353d8fd6d0fb3d1d9f9	done	haskell	grade-school	module School (\n\tsorted, add, grade, School.empty, School(), \n) where \n\nimport Data.Maybe\nimport Data.Set as Set hiding (map)\nimport Data.Map as Map hiding (map)\n\ntype Grade = Int\ntype Student = String\nnewtype School = School {\n\tgetGrades :: Map Grade (Set Student)\n} deriving Show\n\nliftSchool func = School . func . getGrades\n\nempty :: School\nempty = School Map.empty\n\nadd :: Grade -> Student -> School -> School\nadd grade name = liftSchool $ Map.insertWith Set.union grade (Set.singleton name)\n\ngrade :: Grade -> School -> [Student]\ngrade g = maybe [] Set.toList . Map.lookup g . getGrades\n\nsorted :: School -> [(Grade, [Student])]\nsorted = map (fmap Set.toList) . Map.toList . getGrades	\N	f	2	1	2014-04-20 19:38:21	2014-04-20 19:38:21	278	grade-school.hs
559	9	6a08230d3a64b7ea9258938a	done	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    @phrase.downcase\n          .scan(/\\w+/)\n          .each_with_object(Hash.new(0)) do |word, counts|\n      counts[word] += 1\n    end\n  end\nend	\N	f	2	8	2013-12-19 03:27:47	2013-12-19 03:27:47	279	word-count.rb
560	9	2aa248f5b9ed03fe130470a0	superseded	ruby	word-count	class Anagram\n  def initialize(word)\n    @word = word\n  end\n\n  def match(words)\n    words.map { |word| word if anagram?(word) }.compact\n  end\n\n  private\n\n  def anagram?(word)\n    @word.downcase.chars.sort == word.downcase.chars.sort\n  end\nend	\N	f	0	2	2014-01-09 21:58:32	2014-01-09 21:58:32	279	word-count.rb
561	9	754120598709486461a21e9f	superseded	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = words\n  end\n\n  def word_count\n    @words.downcase.scan(/\\w+/).each.each_with_object({}) do |word, counts|\n      counts[word] = counts[word].nil? ? 1 : counts[word] += 1\n    end\n  end\nend	\N	f	2	4	2014-01-12 22:37:49	2014-01-12 22:37:49	279	word-count.rb
562	9	c07b7c4e96baf2a156a1ecf2	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = words\n  end\n\n  def word_count\n    @phrase.downcase\n          .scan(/\\w+/)\n          .each\n          .each_with_object({}) do |word, counts|\n      counts[word] = counts[word].nil? ? 1 : counts[word] += 1\n    end\n  end\nend	\N	f	2	6	2014-02-19 04:37:20	2014-02-19 04:37:20	279	word-count.rb
563	9	7857bed5f6d59860188a6b72	superseded	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = words\n  end\n\n  def word_count\n    @words.downcase\n          .scan(/\\w+/)\n          .each\n          .each_with_object({}) do |word, counts|\n      counts[word] = counts[word].nil? ? 1 : counts[word] += 1\n    end\n  end\nend	\N	f	6	5	2014-02-27 16:19:18	2014-02-27 16:19:18	279	word-count.rb
564	9	d82825c539d0193817490748	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    @phrase.downcase\n          .scan(/\\w+/)\n          .each_with_object({}) do |word, counts|\n      counts[word] = counts[word].nil? ? 1 : counts[word] += 1\n    end\n  end\nend	\N	f	0	7	2014-03-05 20:59:57	2014-03-05 20:59:57	279	word-count.rb
565	9	d0d1933979e7f9523beee912	superseded	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = words\n  end\n\n  def word_count\n    counts = {}\n    @words.scan(/\\w+/).each { |word|\n      w = word.downcase\n      counts[w] = counts[w].nil? ? 1 : counts[w] += 1\n    }\n\n    counts\n  end\nend	\N	f	0	1	2014-04-28 16:53:26	2014-04-28 16:53:26	279	word-count.rb
566	9	cc19479ccb567496e2f1ed5a	superseded	ruby	word-count	class Phrase\n  def initialize(words)\n    @words = words\n  end\n\n  def word_count\n    counts = {}\n    @words.scan(/\\w+/).each { |word|\n      w = word.downcase\n      counts[w] = counts[w].nil? ? 1 : counts[w] += 1\n    }\n\n    counts\n  end\nend	\N	f	4	3	2014-05-10 16:11:55	2014-05-10 16:11:55	279	word-count.rb
569	9	54a68049f1c6fbee7e954b08	hibernating	elixir	bob	defmodule Teenager do\n  def hey(input) do\n    cond do\n      silence?(input) ->\n        "Fine. Be that way!"\n      question?(input) ->\n        "Sure."\n      shouting?(input) ->\n        "Woah, chill out!"\n      true ->\n        "Whatever."\n    end\n  end\n\n  defp shouting?(string) do\n    contains_letters?(string) and String.upcase(string) == string\n  end\n\n  defp contains_letters?(string) do\n    Regex.match?(%r/[^0-9,\\.\\s]+/, string)\n  end\n\n  defp question?(string) do\n    Regex.match?(%r/\\?+$/, string)\n  end\n\n  defp silence?(string) do\n    Regex.match?(%r/^\\s*$/, string)\n  end\nend	\N	f	1	2	2013-12-19 14:24:48	2013-12-19 14:24:48	281	bob.exs
570	9	5d934b842f93e374cf7d5734	done	javascript	series	var Series = function(numbers) {\n  var self = this,\n      getDigits = function() {\n        return numbers.match(/\\d/g).map(function(digit) {\n          return parseInt(digit);\n        });\n      },\n      _digits = getDigits(),\n      length = _digits.length;\n\n  this.digits = _digits;\n  this.slices = function(len) {\n    var slcs = [], i;\n\n    if(len > length)\n      throw(new Error("Slice size is too big."));\n\n    for(i = 0; i <= length - len; i++) {\n      slcs.push(_digits.slice(i, i + len));\n    }\n    return slcs;\n  };\n};\n\nmodule.exports = Series;	\N	f	0	1	2014-02-08 04:31:12	2014-02-08 04:31:12	282	series.js
573	9	5a401dadc17d5932a0139f63	superseded	python	bob	# Author::  Tim Henigan\n# Copyright:: Copyright (c) 2013\n# License::   MIT (http://opensource.org/licenses/MIT)\n\nclass Bob:\n    """Bob is a lackadaisical teenager. In conversation, his responses are\n    very limited."""\n\n    def hey(self, input):\n        request = Request(input)\n\n        if request.is_empty():\n            response = "Fine. Be that way."\n        elif request.is_yelled():\n            response = "Woah, chill out!"\n        elif request.is_question():\n            response = "Sure."\n        else:\n            response = "Whatever."\n\n        return response\n\n\nclass Request:\n    """Determine characteristics of a given request"""\n\n    def __init__(self, input):\n        if input is None:\n            self.request = ""\n        else:\n            self.request = input.rstrip()\n\n    def is_empty(self):\n        return not self.request\n\n    def is_yelled(self):\n        return self.request.isupper()\n\n    def is_question(self):\n        return self.request.endswith("?")	\N	f	1	3	2014-01-22 23:50:23	2014-01-22 23:50:23	283	bob.py
574	9	3ee25c924b5bda820aab29ac	done	python	bob	# Author::  Tim Henigan\n# Copyright:: Copyright (c) 2013\n# License::   MIT (http://opensource.org/licenses/MIT)\n\nclass Bob(object):\n    """Bob is a lackadaisical teenager. In conversation, his responses are\n    very limited."""\n\n    def hey(self, request):\n        r = Request(request)\n\n        if r.is_empty():\n            response = "Fine. Be that way."\n        elif r.is_yelled():\n            response = "Woah, chill out!"\n        elif r.is_question():\n            response = "Sure."\n        else:\n            response = "Whatever."\n\n        return response\n\n\nclass Request(object):\n    """Determine characteristics of a given request"""\n\n    def __init__(self, request):\n        if request is None:\n            self.request = ""\n        else:\n            self.request = request.rstrip()\n\n    def is_empty(self):\n        return not self.request\n\n    def is_yelled(self):\n        return self.request.isupper()\n\n    def is_question(self):\n        return self.request.endswith("?")	\N	f	2	5	2014-03-14 19:56:35	2014-03-14 19:56:35	283	bob.py
612	11	1e5f6e98c17fe7006cdedad1	done	haskell	bob	module Bob where\nimport Data.Char\n\nisAllUpper :: String -> Bool\nisAllUpper xs = (any isAlpha xs) && ((all isUpper) . (filter isAlpha) $ xs)\n\nisQuestion :: String -> Bool\nisQuestion = (== '?') . last\n\nisEmpty :: String -> Bool\nisEmpty = all isSpace\n\nresponseFor :: String -> String\nresponseFor s | isEmpty s    = "Fine. Be that way!"\n              | isAllUpper s = "Woah, chill out!"\n              | isQuestion s = "Sure."\n              | otherwise    =  "Whatever."	\N	f	0	1	2014-04-21 15:10:14	2014-04-21 15:10:14	303	bob.hs
576	9	6cfd93e4364ca12ad16831df	superseded	clojure	anagram	(ns anagram)\n\n(defn char-count\n  "Count occurences of each character in a string. Case insensitive"\n  [str]\n  (reduce #(merge-with + %1 %2) \n          (map #(hash-map (Character/toLowerCase %) 1) str)))\n\n(defn anagrams-for\n  "Select which strings are anagrams of input string"\n  [input candidates]\n  (let [input-chars (char-count input)]\n    (filter #(and (not= input %) (= input-chars (char-count %))) candidates)))	\N	f	0	1	2014-01-24 21:36:20	2014-01-24 21:36:20	284	anagram.clj
577	9	7783543dd17205f9e023a586	done	clojure	anagram	(ns anagram)\n\n(defn char-count\n  "Count occurences of each character in a string. Case insensitive"\n  [str]\n  (frequencies (map #(Character/toLowerCase %) str)))\n\n(defn anagrams-for\n  "Select which strings are anagrams of input string"\n  [input candidates]\n  (let [input-chars (char-count input)]\n    (filter #(and (not= input %) (= input-chars (char-count %))) candidates)))	\N	f	0	2	2014-04-22 18:10:04	2014-04-22 18:10:04	284	anagram.clj
579	10	e89a281c0722828e2d2c2109	done	ruby	bob	class Bob\n  def hey message\n    if silence? message\n      'Fine. Be that way!'\n    elsif shouting? message\n      'Woah, chill out!'\n    elsif question? message\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n\n  def shouting? message\n    message.upcase == message\n  end\n\n  def question? message\n    message.end_with? '?'\n  end\n\n  def silence? message\n    message.strip.empty?\n  end\nend	\N	f	8	1	2014-04-05 07:12:05	2014-04-05 07:12:05	286	bob.rb
580	10	a2100e0431244ed73ebc9a20	superseded	go	hamming	package hamming\n\nimport (\n\t"math"\n)\n\n// Distance returns the Hamming distance between two DNA strands.\n// Distance silently ignores the extra characters on a longer strand.\nfunc Distance(as, bs string) int {\n\td := 0\n\tfor i := 0; i < shortestLen(as, bs); i++ {\n\t\tif as[i] != bs[i] {\n\t\t\td++\n\t\t}\n\t}\n\treturn d\n}\n\n// shortestLen returns the shortest of the lengths of the params supplied\nfunc shortestLen(a, b string) int {\n\treturn int(math.Min(float64(len(a)), float64(len(b))))\n}	\N	f	3	1	2014-02-04 06:24:55	2014-02-04 06:24:55	287	hamming.go
581	10	258e3469c98f13e671633fe7	superseded	go	hamming	package hamming\n\nimport (\n\t"math"\n)\n\n// Distance returns the Hamming distance between two DNA strands.\n// Distance silently ignores the extra characters on a longer strand.\nfunc Distance(a, b string) int {\n\td := 0\n\tfor i := 0; i < shortestLen(a, b); i++ {\n\t\tif a[i] != b[i] {\n\t\t\td++\n\t\t}\n\t}\n\treturn d\n}\n\n// shortestLen returns the shortest of the lengths of the params supplied\nfunc shortestLen(a, b string) int {\n\treturn int(math.Min(float64(len(a)), float64(len(b))))\n}	\N	f	3	2	2014-02-24 15:28:15	2014-02-24 15:28:15	287	hamming.go
582	10	cb1b22b2a79edde80e22bbac	superseded	go	hamming	package hamming\n\n// Distance returns the Hamming distance between two DNA strands.\n// Distance silently ignores the extra characters on a longer strand.\nfunc Distance(a, b string) int {\n\td := 0\n\tfor i := 0; i < shortestLen(a, b); i++ {\n\t\tif a[i] != b[i] {\n\t\t\td++\n\t\t}\n\t}\n\treturn d\n}\n\n// shortestLen returns the shortest of the lengths of the params supplied\nfunc shortestLen(a, b string) int {\n\tla, lb := len(a), len(b)\n\tif la < lb {\n\t\treturn la\n\t} else {\n\t\treturn lb\n\t}\n}	\N	f	3	3	2014-03-16 00:57:07	2014-03-16 00:57:07	287	hamming.go
583	10	db756a6fa1b2365c64c6da42	done	go	hamming	package hamming\n\n// Distance returns the Hamming distance between two DNA strands.\n// Distance silently ignores the extra characters on a longer strand.\nfunc Distance(a, b string) int {\n\td := 0\n\tfor i := 0; i < shortestLen(a, b); i++ {\n\t\tif a[i] != b[i] {\n\t\t\td++\n\t\t}\n\t}\n\treturn d\n}\n\n// shortestLen returns the shortest of the lengths of the params supplied\nfunc shortestLen(a, b string) int {\n\tif len(a) < len(b) {\n\t\treturn len(a)\n\t} else {\n\t\treturn len(b)\n\t}\n}	\N	f	3	4	2014-03-31 21:46:42	2014-03-31 21:46:42	287	hamming.go
584	10	60c91517941afcb16d57a83d	pending	go	anagram	package anagram\n\nimport (\n\t"sort"\n\t"strings"\n)\n\n// Detect detects the anagrams in candidates agains the given subject.\nfunc Detect(subject string, candidates []string) []string {\n\toutput := make([]string, 0)\n\n\t// The subject / candidate matching is case insensitive.\n\tsubject = strings.ToLower(subject)\n\tsubjectSorted := strings.Split(subject, "")\n\tsort.Strings(subjectSorted)\n\n\tfor _, candidate := range candidates {\n\t\t// The subject / candidate matching is case insensitive.\n\t\tcandidate = strings.ToLower(candidate)\n\t\tcandidateSorted := strings.Split(candidate, "")\n\t\tsort.Strings(candidateSorted)\n\n\t\tif subject != candidate && strings.Join(subjectSorted, "") == strings.Join(candidateSorted, "") {\n\t\t\toutput = append(output, candidate)\n\t\t}\n\t}\n\n\treturn output\n}	\N	f	0	1	2014-03-14 04:23:17	2014-03-14 04:23:17	288	anagram.go
585	10	3cf78afdd4a4344373a9c1d5	hibernating	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char\n\nisShout str = if lower > 0 then False else lower < upper\n      where\n        lower     = length (filter isLower latin)\n        upper     = length (filter isUpper latin)\n        latin     = filter isAlpha str \n\nisOnlyPuncts str = length (noPuncts (noSpaces str)) == 0\n      where\n        noPuncts = filter (not . isPunctuation)\n        noSpaces = filter (not . isSpace)\n        str      = str ++ " "\n\nresponseFor :: String -> String\nresponseFor str\n            | isShout str       = "Woah, chill out!"\n            | last str == '?'   = "Sure."\n            | isOnlyPuncts str  = "Fine. Be that way!"\n            | otherwise         = "Whatever."	\N	f	4	1	2014-02-12 05:46:49	2014-02-12 05:46:49	289	bob.hs
587	10	78c1626a2b77e3c002e5bf4f	superseded	ruby	hamming	class Hamming\n\n  def self.compute(strand_one, strand_two)\n    strand_one_nucleotides = strand_one.chars\n    strand_two_nucleotides = strand_two.chars\n\n    paired_strands = strand_one_nucleotides.zip(strand_two_nucleotides)\n\n    mutations = paired_strands.find_all do |pair|\n      mutation?(pair)\n    end\n\n    mutations.length\n  end\n\n  def self.mutation?(pair)\n    if pair.first.nil? || pair.last.nil?\n      return false\n    elsif pair.first != pair.last\n      true\n    else\n      false\n    end\n  end\nend	\N	f	2	1	2014-02-06 20:49:19	2014-02-06 20:49:19	291	hamming.rb
588	10	9e310b3c3d20937b19a947ef	superseded	ruby	hamming	class Hamming\n\n  def self.compute(strand_one, strand_two)\n    paired_strands(strand_one, strand_two).count do |nucleotide_one, nucleotide_two|\n      mutation?(nucleotide_one, nucleotide_two)\n    end\n  end\n\n  def self.paired_strands(strand_one, strand_two)\n    strand_one_nucleotides = strand_one.chars\n    strand_two_nucleotides = strand_two.chars\n\n    strand_one_nucleotides.zip(strand_two_nucleotides)\n  end\n\n  def self.mutation?(nucleotide_one, nucleotide_two)\n    !(nucleotide_one.nil? || nucleotide_two.nil?) && (nucleotide_one != nucleotide_two)\n  end\nend	\N	f	0	2	2014-02-21 02:23:59	2014-02-21 02:23:59	291	hamming.rb
589	10	a356f5b5c1afba0974b53a58	done	ruby	hamming	class Hamming\n\n  def self.compute(strand_1, strand_2)\n    Hamming.new(strand_1, strand_2).distance\n  end\n\n  attr_reader :strand_1, :strand_2\n\n  def initialize(strand_1, strand_2)\n    @strand_1 = strand_1.chars\n    @strand_2 = strand_2.chars\n  end\n\n  def distance\n    paired_strands(strand_1, strand_2).count do |nucleotide_1, nucleotide_2|\n      mutation?(nucleotide_1, nucleotide_2)\n    end\n  end\n\n  def paired_strands(strand_1, strand_2)\n    strand_1.zip(strand_2)\n  end\n\n  def mutation?(nucleotide_1, nucleotide_2)\n    !(nucleotide_1.nil? || nucleotide_2.nil?) && (nucleotide_1 != nucleotide_2)\n  end\nend	\N	f	8	3	2014-04-26 20:49:55	2014-04-26 20:49:55	291	hamming.rb
590	10	c82047e5bd8419407c24fc28	superseded	ruby	grains	class Grains\n\t\n\tdef square(number)\n\t\t2**(number-1)\n\tend\n\n\tdef total\n\t\t(0..63).to_a.inject(0) {|s,i| s+= 2**i}\n\tend\nend	\N	f	4	1	2014-02-08 11:46:22	2014-02-08 11:46:22	292	grains.rb
591	10	0720a1747274b34d2394719b	done	ruby	grains	class Grains\n  def square(number)\n    2**(number - 1)\n  end\n\n  def total\n    (0..63).to_a.reduce(0) { |a, e| a + 2**e }\n  end\nend	\N	f	4	2	2014-03-02 15:38:50	2014-03-02 15:38:50	292	grains.rb
592	10	3a6948ee18253f10ce5afb0a	done	python	bob	class Bob():\n    def __init__(self):\n        self.responses = {\n            "shouting": "Woah, chill out!",\n            "question": "Sure.",\n            "silence": "Fine. Be that way!",\n            "default": "Whatever."        \n            }\n\n    def hey(self, message):\n        if message == None or len(message.strip()) == 0:\n            return self.responses["silence"]\n\n        elif message == message.upper():\n            return self.responses["shouting"]\n\n        elif message[-1] == "?":\n            return self.responses["question"]\n\n        else:\n            return self.responses["default"]	\N	f	4	2	2014-02-14 00:22:44	2014-02-14 00:22:44	293	bob.py
594	10	c1761608acdceec6c6491090	superseded	clojure	bob	(ns bob\n  (:require [clojure.string :as strings]))\n\n(defn question? [strn]\n  (= (inc (.indexOf strn "?")) (.length strn)))\n\n(defn yell? [strn]\n  (= (strings/upper-case strn) strn))\n  \n(defn response-for [strn]\n  (cond\n   (strings/blank? strn) "Fine, be that way."\n   (yell? strn) "Woah, chill out!"\n   (question? strn) "Sure."\n   true "Whatever."))	\N	f	3	1	2014-03-29 04:14:24	2014-03-29 04:14:24	294	bob.clj
595	10	049fbf2d61e0995440d5fdbe	superseded	clojure	bob	(ns bob\n  (:require [clojure.string :as strings]))\n\n(defn question? [strn]\n  (= (last strn) \\?))\n\n(defn yell? [strn]\n  (= (strings/upper-case strn) strn))\n  \n(defn response-for [strn]\n  (cond\n   (strings/blank? strn) "Fine, be that way."\n   (yell? strn) "Woah, chill out!"\n   (question? strn) "Sure."\n   :anklebiter "Whatever."))	\N	f	3	3	2014-04-11 05:25:23	2014-04-11 05:25:23	294	bob.clj
596	10	2bf1d71c0411615416d954da	superseded	clojure	bob	(ns bob\n  (:require [clojure.string :as strings]))\n\n(defn question? [strn]\n  (= (last strn) \\?))\n\n(defn yell? [strn]\n  (= (strings/upper-case strn) strn))\n  \n(defn response-for [strn]\n  (cond\n   (strings/blank? strn) "Fine, be that way."\n   (yell? strn) "Woah, chill out!"\n   (question? strn) "Sure."\n   true "Whatever."))	\N	f	0	2	2014-04-15 00:25:20	2014-04-15 00:25:20	294	bob.clj
597	10	1bfc756c21c159304459735f	superseded	clojure	bob	(ns bob\n  (:require [clojure.string :as strings]))\n\n(defn question? [strn]\n  (= (last strn) \\?))\n\n(defn yell? [strn]\n  (= (strings/upper-case strn) strn))\n  \n(defn response-for [strn]\n  (cond\n   (strings/blank? strn) "Fine, be that way."\n   (yell? strn) "Woah, chill out!"\n   (question? strn) "Sure."\n   :else "Whatever."))	\N	f	1	4	2014-04-21 18:50:56	2014-04-21 18:50:56	294	bob.clj
598	10	10c2802579b2551632bf2b18	done	clojure	bob	(ns bob\n  (:require [clojure.string :as strings]))\n\n(defn- question? [strn]\n  (= (last strn) \\?))\n\n(defn- yell? [strn]\n  (= (strings/upper-case strn) strn))\n  \n(defn response-for [strn]\n  (cond\n   (strings/blank? strn) "Fine, be that way."\n   (yell? strn) "Woah, chill out!"\n   (question? strn) "Sure."\n   :else "Whatever."))	\N	f	4	5	2014-04-28 07:42:06	2014-04-28 07:42:06	294	bob.clj
599	10	e4a6a17ef2fe61cb9d61d129	done	ruby	robot-name	class Robot\n\n  def name\n    @name ||= generate_name\n  end\n\n  def reset\n    @name = nil\n  end\n\n  private\n\n  def generate_name\n    [letters, numbers].join\n  end\n\n  def letters\n    ('A'..'Z').to_a.sample(2)\n  end\n\n  def numbers\n    (100..999).to_a.sample\n  end\n\nend	\N	f	3	2	2014-02-05 05:53:41	2014-02-05 05:53:41	295	robot-name.rb
600	10	4471a250dfd6939d2982dca8	superseded	ruby	robot-name	class Robot\n\n  def name\n    @name ||= generate_name\n  end\n\n  def reset\n    @name = nil\n  end\n\n  private\n\n  def generate_name\n    [letter, letter, number, number, number].join\n  end\n\n  def letter\n    ('A'..'Z').to_a.shuffle.pop\n  end\n\n  def number\n    (0..9).to_a.shuffle.pop.to_s\n  end\n\nend	\N	f	6	1	2014-04-29 15:43:15	2014-04-29 15:43:15	295	robot-name.rb
602	10	43caa795653dd777f253a425	superseded	ruby	space-age	class SpaceAge\n    attr_reader :seconds\n    SECONDS_IN_EARTH_YEARS = 31557600.0\n    @@seconds_in_year = {\n        "earth" => SECONDS_IN_EARTH_YEARS,\n        "mercury" => 0.2408467 * SECONDS_IN_EARTH_YEARS,\n        "venus" => 0.61519726 * SECONDS_IN_EARTH_YEARS, \n        "mars" => 1.8808158 * SECONDS_IN_EARTH_YEARS,\n        "jupiter" => 11.862615 * SECONDS_IN_EARTH_YEARS,\n        "saturn" => 29.447498 * SECONDS_IN_EARTH_YEARS,\n        "uranus" => 84.016846 * SECONDS_IN_EARTH_YEARS,\n        "neptune" => 164.79132 * SECONDS_IN_EARTH_YEARS\n    }\n\n    def initialize(seconds)\n        @seconds = seconds\n    end\n\n    @@seconds_in_year.keys.each do |planet|\n        define_method ("on_" + planet).to_sym do\n            on planet\n        end\n    end\n\n    private\n\n    def on(planet)\n        (@seconds / @@seconds_in_year[planet]).round(2)\n    end\n\nend	\N	f	1	2	2014-05-21 20:39:14	2014-05-21 20:39:14	296	space-age.rb
603	10	375125ae923ff2f20a34b0b5	done	ruby	space-age	class SpaceAge\r\n    attr_reader :seconds\r\n    SecondsInEarthYear = 31557600.0\r\n    @@seconds_in_year = {\r\n        "earth" => SecondsInEarthYear,\r\n        "mercury" => 0.2408467 * SecondsInEarthYear,\r\n        "venus" => 0.61519726 * SecondsInEarthYear, \r\n        "mars" => 1.8808158 * SecondsInEarthYear,\r\n        "jupiter" => 11.862615 * SecondsInEarthYear,\r\n        "saturn" => 29.447498 * SecondsInEarthYear,\r\n        "uranus" => 84.016846 * SecondsInEarthYear,\r\n        "neptune" => 164.79132 * SecondsInEarthYear,\r\n    }\r\n\r\n    def initialize(seconds)\r\n        @seconds = seconds\r\n    end\r\n\r\n    @@seconds_in_year.keys.each do |planet|\r\n        define_method ("on_" + planet).to_sym do\r\n            (@seconds / @@seconds_in_year[planet]).round(2)\r\n        end\r\n    end\r\n\r\nend	\N	f	4	3	2014-05-26 12:06:10	2014-05-26 12:06:10	296	space-age.rb
604	10	0877cff27db79c3f328c3e9d	done	ruby	etl	class ETL\n  def self.transform(legacy)\n    {}.tap do |transformed|\n      legacy.each do |legacy_key, legacy_values|\n        legacy_values.each do |legacy_value|\n          transformed[legacy_value.downcase] = legacy_key\n        end\n      end\n    end\n  end\nend	\N	f	4	1	2014-02-21 15:24:46	2014-02-21 15:24:46	297	etl.rb
605	10	061220d5441cb009aa9bc017	done	haskell	rna-transcription	module DNA\n       (\n       toRNA\n       ) where\n\nimport Data.String.Utils\n\n{-\n    Write a program that can translate a given DNA string to the transcribed RNA string corresponding to it.\n    Both DNA and RNA strands are a sequence of nucleotides.\n    The four nucleotides found in DNA are adenine (**A**), cytosine (**C**), guanine (**G**) and thymidine (**T**).\n    The four nucleotides found in RNA are adenine (**A**), cytosine (**C**), guanine (**G**) and uracil (**U**).\n    Given a DNA strand, its transcribed RNA strand is formed by replacing all occurrences of thymidine with uracil.\n-}\ntoRNA :: String -> String\ntoRNA = replace "T" "U"	\N	f	0	1	2014-04-01 16:52:17	2014-04-01 16:52:17	298	rna-transcription.hs
606	11	a6c391d5526f7187e3cf08ac	pending	javascript	pascals-triangle	function Triangle(row) {\n    var rows = [];\n    for (var i = 1; i <= row; i++) {\n      var newRow = [];\n      for (var j = 1; j <= i; j++) {\n        if (j === 1 || j === i ) {\n          newRow.push(1);\n        }\n        else {\n          var element = rows[i-2][j-2] + rows[i-2][j-1];\n          newRow.push(element);\n        }\n      }\n      rows.push(newRow);\n    }\n\n    this.rows = rows;\n    this.lastRow = rows[rows.length-1];\n}	\N	f	2	1	2014-02-24 15:04:24	2014-02-24 15:04:24	299	pascals-triangle_test.js
607	11	ef15fc0331d3e574ec64830f	done	haskell	phone-number	module Phone (number, areaCode, prettyPrint) where\n\nimport Data.Char\n\nnumber :: String -> String\nnumber s\n    | len == 10 = t\n    | len == 11 && head t == '1' = tail t\n    | otherwise = replicate 10 '0'\n    where t = filter isDigit s\n          len = length t\n\nareaCode :: String -> String\nareaCode = take 3 . filter isDigit\n\nprettyPrint :: String -> String\nprettyPrint s = let digits = number s\n                    (areaCode, exchangeSubscriber) = splitAt 3 digits\n                    (exchange, subscriber) = splitAt 3 exchangeSubscriber\n                in "(" ++ areaCode ++ ") " ++ exchange ++ "-" ++ subscriber	\N	f	1	2	2014-02-11 20:09:27	2014-02-11 20:09:27	300	phone-number.hs
608	11	e3b8ae6da8c1a7aca593998c	superseded	haskell	phone-number	module Phone (number, areaCode, prettyPrint) where\n\nimport Data.Char\n\nnumber :: String -> String\nnumber s = \n    let\n        t = filter isDigit s\n        test len | len == 10 = t\n                 | len == 11 && head t == '1' = tail t\n                 | otherwise = replicate 10 '0'\n    in test $ length t\n\nareaCode :: String -> String\nareaCode = take 3 . filter isDigit\n\nprettyPrint :: String -> String\nprettyPrint s = let t = number s\n                    (a, b) = splitAt 3 t\n                    (c, d) = splitAt 3 b\n                in "(" ++ a ++ ") " ++ c ++ "-" ++ d	\N	f	2	1	2014-03-16 16:17:09	2014-03-16 16:17:09	300	phone-number.hs
609	11	6fa365b3625033135afdbd96	superseded	ruby	grains	class Grains\n\n  RATIO_TO_PREVIOUS_SQUARE = 2\n  NUM_SQUARES = 64\n\n  def initialize\n\n  end\n\n  def square(num)\n    RATIO_TO_PREVIOUS_SQUARE ** (num - 1)\n  end\n\n  def total\n    RATIO_TO_PREVIOUS_SQUARE ** NUM_SQUARES - 1\n  end\n\nend	\N	f	3	1	2014-03-07 04:26:59	2014-03-07 04:26:59	301	grains.rb
610	11	927bef4d5d4615ce1d7b75b5	done	ruby	grains	class Grains\n\n  RATIO_TO_PREVIOUS_SQUARE = 2\n  NUM_SQUARES = 64\n\n  def square(num)\n    RATIO_TO_PREVIOUS_SQUARE ** (num - 1)\n  end\n\n  def total\n    RATIO_TO_PREVIOUS_SQUARE ** NUM_SQUARES - 1\n  end\n\nend	\N	f	3	2	2014-03-09 04:38:51	2014-03-09 04:38:51	301	grains.rb
611	11	cea586236f9b0071061d9525	done	ruby	house	class House\n  VERSES = [\n    "",\n    "the malt that lay in ",\n    "the rat that ate ",\n    "the cat that killed ",\n    "the dog that worried ",\n    "the cow with the crumpled horn that tossed ",\n    "the maiden all forlorn that milked ",\n    "the man all tattered and torn that kissed ",\n    "the priest all shaven and shorn that married ",\n    "the rooster that crowed in the morn that woke ",\n    "the farmer sowing his corn that kept ",\n    "the horse and the hound and the horn that belonged to "\n  ]\n\n  def verse(num)\n      "This is #{clauses(num)}the house that Jack built.\\n"\n  end\n\n  def verses(start, ending)\n      (start..ending).map { |n| verse(n) + "\\n" }.join\n  end\n\n  def clauses(num)\n    sum_of_clauses = String.new\n    i = num - 1\n    while i >= 0\n      sum_of_clauses += VERSES[i]\n      i = i - 1\n    end\n    return sum_of_clauses\n  end\n\n\nend	\N	f	1	1	2014-05-03 01:07:13	2014-05-03 01:07:13	302	house.rb
614	11	92235530b3490dbf919db686	done	ruby	bob	class Bob\n\n  def hey(remark)\n    case\n    when silence?(remark)\n      "Fine. Be that way!"\n    when yelling?(remark)\n      "Woah, chill out!"\n    when remark.end_with?('?')\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def silence?(remark)\n    remark.strip.empty?\n  end\n\n  def yelling?(remark)\n    # if a lower case letter is found, it's not ALL_CAPS!\n    !remark.match(/\\p{Lower}/)\n  end\n\nend	\N	f	5	2	2014-03-15 18:14:21	2014-03-15 18:14:21	304	bob.rb
615	11	4b652bbd61aef4aafcb1b88d	done	haskell	rna-transcription	module DNA (toRNA) where\n\n\ntoRNA :: String -> String\ntoRNA = map replace\n\nreplace :: Char -> Char\nreplace 'G' = 'C'\nreplace 'C' = 'G'\nreplace 'T' = 'A'\nreplace 'A' = 'U'\nreplace _ = error "Not DNA"	\N	f	0	1	2014-02-13 04:02:30	2014-02-13 04:02:30	305	DNA.hs
617	11	48d3019b53ba5dea8181a448	done	haskell	robot-simulator	module Robot (Bearing(..), Movement(..), Robot, mkRobot,\n              instructions, coordinates, simulate,\n              bearing, turnRight, turnLeft) where\n\nimport Prelude hiding (Either(..))\n\ntype Coord = (Int, Int)\n\ndata Movement = Ahead\n              | Left\n              | Right\n\ndata Robot = Robot { bearing :: Bearing,\n                     coordinates :: Coord\n                   } deriving (Show, Eq)\n\ndata Bearing = North\n             | East\n             | South\n             | West deriving (Show, Eq, Enum)\n\nmkRobot :: Bearing -> Coord -> Robot\nmkRobot = Robot\n\nturnRight :: Bearing -> Bearing\nturnRight dir = toEnum ((fromEnum dir + 1) `mod` 4)\n\nturnLeft :: Bearing -> Bearing\nturnLeft dir = toEnum ((fromEnum dir - 1) `mod` 4)\n\ninstructions = undefined\n\nsimulate :: Robot -> String -> Robot\nsimulate r [] = r\nsimulate r (i:is) =\n    let r' = case toMovement i of\n               Ahead -> r { coordinates = move (bearing r) (coordinates r) }\n               Left  -> r { bearing = turnLeft (bearing r) }\n               Right -> r { bearing = turnRight (bearing r) }\n    in simulate r' is\n\n\ntoMovement :: Char -> Movement\ntoMovement 'A' = Ahead\ntoMovement 'L' = Left\ntoMovement 'R' = Right\n\nmove :: Bearing -> Coord -> Coord\nmove North (x, y) = (x   , y+1)\nmove East  (x, y) = (x+1 , y)\nmove South (x, y) = (x   , y-1)\nmove West  (x, y) = (x-1 , y)	\N	f	3	1	2014-03-31 16:35:14	2014-03-31 16:35:14	307	robot-simulator.hs
618	11	8828ce8d98598b7c2282eda2	hibernating	ruby	hamming	class Hamming\n  def self.compute(left, right)\n    new(left, right).distance\n  end\n\n  def initialize(left, right)\n    @left = left\n    @right = right\n  end\n\n  def distance\n    sum_of_differences\n  end\n\n  private\n\n  def differences\n    (0..min_size-1).map{|index| @left[index] == @right[index] ? 0 : 1}\n  end\n\n  def sum_of_differences\n    differences.inject(:+)\n  end\n\n  def min_size\n    [@left.size, @right.size].min\n  end\n\nend	\N	f	2	1	2014-05-15 01:25:32	2014-05-15 01:25:32	308	hamming.rb
619	11	fc421717583a984d91bc3f9d	superseded	python	bob	class Bob:\n\n    def __init__(self):\n        pass\n\n    def hey(self, statement):\n        if statement is None:\n            return 'Fine. Be that way.'\n        elif statement is '' or statement.isspace():\n            return 'Fine. Be that way.'\n        elif statement.isupper():\n            return 'Woah, chill out!'\n        elif statement[-1] == "?":\n            return "Sure."\n        return "Whatever."\n\nb= Bob()\nprint b.hey(raw_input("?"))	\N	f	3	1	2014-02-08 21:12:27	2014-02-08 21:12:27	309	bob.py
620	11	51c676e519495676d2daab92	superseded	python	bob	class Bob:\n\n    def __init__(self):\n        pass\n\n    def hey(self, converse):\n        if converse is None:\n            return 'Fine. Be that way.'\n        elif converse is '' or converse.isspace():\n            return 'Fine. Be that way.'\n        elif converse.isupper():\n            return 'Woah, chill out!'\n        elif converse[-1] == "?":\n            return "Sure."\n        return "Whatever."	\N	f	3	2	2014-02-12 17:30:11	2014-02-12 17:30:11	309	bob.py
621	11	3231e0ea825971d2b2da8285	superseded	python	bob	class Bob:\n    def hey(self, converse):\n        if self.issilence(converse):\n            return 'Fine. Be that way.'\n        elif converse.isupper():\n            return 'Woah, chill out!'\n        elif converse.endswith("?"):\n            return "Sure."\n        return "Whatever."\n\n    def issilence(self, converse):\n        return (converse is None or\n            converse is '' or\n            converse.isspace())	\N	f	2	3	2014-02-20 14:20:29	2014-02-20 14:20:29	309	bob.py
622	11	84ebc8cde57007e00871405c	done	python	bob	class Bob:\n    def hey(self, converse):\n        if self._isSilence(converse):\n            response = 'Fine. Be that way.'\n        elif self._isShouting(converse):\n            response = 'Woah, chill out!'\n        elif self._isQuestion(converse):\n            response = "Sure."\n        else:\n            response = "Whatever."\n        return response\n\n    def _isSilence(self, converse):\n        return (converse is None or\n            converse.isspace() or\n            converse is '')\n \n    def _isShouting(self, converse):\n        return converse.isupper()\n\n    def _isQuestion(self, converse):\n        return converse.endswith("?")	\N	f	8	4	2014-05-09 16:18:46	2014-05-09 16:18:46	309	bob.py
623	11	999cd76ba46e9ff9f72ff2bf	superseded	ruby	meetup	class Meetup\n\n  WEEKDAYS = %w{monday tuesday wednesday thursday friday saturday sunday}\n\n  def initialize(month, year)\n    @month_days = Date.new(year, month, 1)..Date.new(year, month, -1)\n  end\n\n  def teenths\n    @month_days.select {|d| (13..19).cover?(d.day) }\n  end\n\n  WEEKDAYS.each do |weekday|\n    predicate = "#{weekday}?".to_sym\n\n    define_method(weekday.sub('day', 'teenth')) do\n      teenths.find(&predicate)\n    end\n\n    %w|first second third fourth|.each_with_index do |position, index|\n      define_method("#{position}_#{weekday}") do\n        @month_days.select(&predicate)[index]\n      end\n    end\n\n    define_method("last_#{weekday}") do\n      @month_days.select(&predicate).last\n    end\n  end\nend	\N	f	0	1	2014-01-27 14:39:42	2014-01-27 14:39:42	310	meetup.rb
625	11	f905808efb7e3065120378e5	superseded	elixir	bob	defmodule Teenager do\n\n  def hey(input) do\n    cond do\n      silence?(input) ->\n        "Fine. Be that way!"\n      yelling?(input) ->\n        "Woah, chill out!"\n      question?(input) ->\n        "Sure."\n      "Any other statement" ->\n        "Whatever."\n    end\n  end\n\n  defp question?(string) do\n    String.last(string) == "?"\n  end\n\n  defp silence?(string) do\n    String.strip(string) == ""\n  end\n\n  defp yelling?(string) do\n   wordy_statement?(string) && String.upcase(string) == string\n  end\n\n  defp wordy_statement?(string) do\n    Regex.match?(%r/[[:alpha:]]+/i, string)\n  end\nend	\N	f	2	1	2014-02-16 19:24:27	2014-02-16 19:24:27	311	bob.exs
626	11	f8a2f84a0005f7fe2151408f	done	elixir	bob	defmodule Teenager do\n  def hey(input) do\n    cond do\n      silence?(input) ->\n        "Fine. Be that way!"\n      yelling?(input) ->\n        "Woah, chill out!"\n      question?(input) ->\n        "Sure."\n      "Any other statement" ->\n        "Whatever."\n    end\n  end\n\n  defp question?(string) do\n    String.last(string) == "?"\n  end\n\n  defp silence?(string) do\n    String.strip(string) == ""\n  end\n\n  defp yelling?(string) do\n   wordy_statement?(string) && String.upcase(string) == string\n  end\n\n  defp wordy_statement?(string) do\n    Regex.match?(%r/\\p{L}+/, string)\n  end\nend	\N	f	2	2	2014-03-22 08:37:52	2014-03-22 08:37:52	311	bob.exs
627	11	ccc8e4b0a9da19957d52c12e	done	clojure	leap	;(ns leap_year)\n\n(defn- make-divisible-by [divisor]\n  #(= (mod %1 divisor) 0))\n\n(def divisible-by-4?   (make-divisible-by 4))\n(def divisible-by-100? (make-divisible-by 100))\n(def divisible-by-400? (make-divisible-by 400))\n\n(defn leap-year [year]\n  (cond\n    (divisible-by-400? year) true\n    (divisible-by-100? year) false\n    (divisible-by-4? year)   true\n    :else                    false))	\N	f	1	1	2014-03-18 03:57:08	2014-03-18 03:57:08	312	leap.clj
629	11	ea0f0f28c090899279cd2c15	superseded	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    verses(number, to).inject("") do |song, i|\n      song << verse(i) << "\\n"\n      song\n    end\n  end\n\n  def verse(number)\n    if number == 0\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    else\n      bottles = "#{number} bottles"\n      take_down = "one"\n      bottles_left = "#{number-1} bottles"\n      if number == 1\n        bottles = "1 bottle"\n        take_down = "it"\n        bottles_left = "no more bottles"\n      elsif number == 2\n        bottles_left = "1 bottle"\n      end\n      "#{bottles} of beer on the wall, #{bottles} of beer.\\nTake #{take_down} down and pass it around, #{bottles_left} of beer on the wall.\\n" \n    end\n  end\n\n  def verses(number, to)\n    # returns an array of the verses to be sung\n    (to..number).to_a.reverse\n  end\nend	\N	f	3	2	2014-01-29 10:52:52	2014-01-29 10:52:52	313	beer-song.rb
631	11	625aa213cf9b2eb742fc6d7b	superseded	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    verses(number, to).inject("") do |song, i|\n      song << verse(i) << "\\n"\n      song\n    end\n  end\n\n  def verse(number)\n    if number == 0\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    elsif number == 1\n      "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n    elsif number == 2\n      "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\n    else\n      "#{number} bottles of beer on the wall, #{number} bottles of beer.\\nTake one down and pass it around, #{number-1} bottles of beer on the wall.\\n" \n    end\n  end\n\n  def verses(number, to)\n    # returns an array of the verses to be sung\n    (to..number).to_a.reverse\n  end\nend	\N	f	0	1	2014-03-06 10:09:21	2014-03-06 10:09:21	313	beer-song.rb
818	17	740f840461300d62c0d002ef	done	scala	word-count	class Phrase(phrase: String) {\n\n  val wordList: Array[String] = createWordList(phrase)\n\n  def wordCount(): Map[String, Int] = {\n    wordList.groupBy( identity ).mapValues( _.size )\n  }\n\n  private def createWordList(phrase: String): Array[String] = {\n    phrase.split( "[^\\\\w']+" ).map( word => word.toLowerCase )\n  }\n}	\N	f	3	2	2014-02-21 04:45:32	2014-02-21 04:45:32	408	word_count.scala
633	11	28aacc34781456fdd7a0e34a	superseded	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    verse_numbers(number, to).each_with_object("") { |i, song| song << verse(i) << "\\n" }\n  end\n\n  def verse(number)\n    if number == 0\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    else\n      bottles = "#{number} bottles"\n      take_down = "one"\n      bottles_left = "#{(number - 1)} bottles"\n      if number == 1\n        bottles = "1 bottle"\n        take_down = "it"\n        bottles_left = "no more bottles"\n      elsif number == 2\n        bottles_left = "1 bottle"\n      end\n      "#{bottles} of beer on the wall, #{bottles} of beer.\\nTake #{take_down} down and pass it around, #{bottles_left} of beer on the wall.\\n" \n    end\n  end\n\n  def verse_numbers(number, to)\n    # returns an array of the verses to be sung\n    (to..number).to_a.reverse\n  end\nend	\N	f	4	4	2014-04-01 14:33:19	2014-04-01 14:33:19	313	beer-song.rb
634	11	aaa04a220baeb47411ba01b0	pending	python	largest-series-product	class Series(object):\n    def __init__(self, base):\n        self.base = [int(x) for x in list(base)]\n\n    def slices(self, length):\n        sliceResults = []\n\n        if length > len(self.base) or length < 1:\n            raise ValueError("Invalid slice length for this series: %d" %length)\n\n        for idx in range(0, len(self.base)+1 - length):\n            sliceResults.append(self.base[idx:idx+length])\n\n        return sliceResults\n\n    def largest_product(self, sliceLength):\n        # Handle special Identity case\n        if not self.base:\n            return 1\n\n        s = self.slices(sliceLength)\n        products = [reduce(lambda x, y: x*y, args) for args in s]\n\n        return max(products)	\N	f	2	1	2014-02-05 13:18:13	2014-02-05 13:18:13	314	series.py
635	12	35baa8f3b0682bded3345b62	done	haskell	rna-transcription	module DNA\n    (toRNA)\nwhere\n\n\ndata DNABase = DA | DC | DG | DT deriving (Eq)\n\ninstance Show DNABase where\n    show b = case b of\n        DA -> "A"\n        DC -> "C"\n        DG -> "G"\n        DT -> "T"\n\ndata RNABase = RA | RC | RG | RU deriving (Eq)\n\ninstance Show RNABase where\n    show b = case b of\n        RA -> "A"\n        RC -> "C"\n        RG -> "G"\n        RU -> "U"\n\ncreateDNABase::Char -> DNABase\ncreateDNABase c = case c of\n    'A' -> DA\n    'C' -> DC\n    'G' -> DG\n    'T' -> DT\n\ncreateRNABase::Char -> RNABase\ncreateRNABase c = case c of\n    'A' -> RA\n    'C' -> RC\n    'G' -> RG\n    'U' -> RU\n\nnewtype DNA = DNA [DNABase]\nnewtype RNA = RNA [RNABase]\n\ninstance Show DNA where\n    show (DNA d) = concatMap show d\n\ninstance Show RNA where\n    show (RNA r) = concatMap show r\n\ncreateDNA::String -> DNA\ncreateDNA s = DNA $ map createDNABase s\n\ncreateRNA::String -> RNA\ncreateRNA s = RNA $ map createRNABase s\n\ndnaToRna::DNA -> RNA\ndnaToRna (DNA d) = RNA $ map convertOne d\n  where\n    convertOne b = case b of\n        DA -> RA\n        DC -> RC\n        DG -> RG\n        DT -> RU\n\ntoRNA::String -> String\ntoRNA = show . dnaToRna . createDNA	\N	f	1	1	2014-01-17 00:34:21	2014-01-17 00:34:21	315	rna-transcription.hs
636	12	5a187049ffcf3f45b017c894	pending	ruby	bob	class Bob\n\n  WHATEVER          = 'Whatever.'\n  SHOUTING          = 'Woah, chill out!'\n  SURE              = 'Sure.'\n  FINE              = 'Fine. Be that way!'\n\n  attr_reader :line\n\n  def hey(line)\n    @line = line\n    return FINE              if silence?\n    return SHOUTING          if upcase?\n    return SURE              if asking_a_question?\n    return WHATEVER\n  end\n\n  private\n\n    def silence?\n      @line.strip == ''\n    end\n\n    def asking_a_question?\n      @line.end_with?('?')\n    end\n\n    def upcase?\n      @line.upcase == @line && @line.downcase != @line\n    end\n\nend	\N	f	1	1	2013-10-31 01:58:25	2013-10-31 01:58:25	316	bob.rb
637	12	1f7eed1bc70041354ed911be	superseded	haskell	word-count	module WordCount where\r\nimport Data.Char\r\nimport Data.List\r\nimport qualified Data.Map as M\r\n\r\n\r\nwordCount :: String -> M.Map String Int\r\nwordCount phrase = \r\n\tM.fromList\r\n\t$ map (\\word -> (word, count word)) $ nub phrase'\r\n\twhere \r\n\t\tphrase'   = words . normalize . scrub . separate $ phrase \r\n\t\tcount e   = length . filter (==e) $ phrase' \r\n\t \t\r\n\t \tseparate  = split' isSeparator' where isSeparator' x = any ($x) [(=='_'), (==','), isSymbol] \r\n\t \tsplit' p  = foldr (\\x acc -> if p x then ' ':acc else x:acc) ""\r\n\t \tscrub \t  = filter $ \\x -> (x=='_') || not (isPunctuation x)\r\n\t \tnormalize = map toLower\r	\N	f	0	1	2013-12-08 14:37:44	2013-12-08 14:37:44	317	WordCount.hs
638	12	f955605a461de12b281e2269	superseded	haskell	word-count	module WordCount (wordCount) where\nimport Data.Char\nimport qualified Data.Map as Map\n\n\nwordCount :: String -> Map.Map String Int\nwordCount =\n  count . prepare \n  where prepare = words . normalize . scrub (not . isAlphaNum)\n        scrub p  = foldr (\\x acc -> if p x then ' ':acc else x:acc) ""\n        normalize = map toLower\n\ncount :: [String] -> Map.Map String Int\ncount = foldl (\\m x -> if x `Map.member` m then updateCount x m else insertEntry x m) Map.empty     \n  where updateCount   = Map.adjust (+1)\n        insertEntry x = Map.insert x 1	\N	f	1	2	2013-12-12 09:30:52	2013-12-12 09:30:52	317	WordCount.hs
639	12	848d6c343b5beb9decc59445	superseded	haskell	word-count	module WordCount (wordCount) where\nimport Data.Char\nimport qualified Data.Map as Map\n\n\nwordCount :: String -> Map.Map String Int\nwordCount =\n    count . prepare \n  where \n    prepare   = words . normalize . scrub (not . isAlphaNum)\n    scrub p   = foldr (\\x acc -> if p x then ' ':acc else x:acc) ""\n    normalize = map toLower\n\ncount :: [String] -> Map.Map String Int\ncount = \n    foldl (\\m x -> if x `Map.member` m then updateCount x m else insertEntry x m) Map.empty     \n  where \n    updateCount   = Map.adjust (+1)\n    insertEntry x = Map.insert x 1	\N	f	1	3	2014-01-28 14:57:12	2014-01-28 14:57:12	317	WordCount.hs
640	12	95d374254a5491ec6a3f46bb	superseded	haskell	word-count	module WordCount (wordCount) where\nimport Data.Char\nimport Data.List.Split (wordsBy)\nimport qualified Data.Map.Strict as Map\n\n\nwordCount :: String -> Map.Map String Int\nwordCount =\n    frequency . wordsBy (not . isAlphaNum) . map toLower\n\nfrequency :: (Ord a) => [a] -> Map.Map a Int\nfrequency = \n    foldl (\\m x -> if x `Map.member` m then updateCount x m else insertEntry x m) Map.empty     \n  where \n    updateCount   = Map.adjust (+1)\n    insertEntry x = Map.insert x 1	\N	f	1	4	2014-02-11 15:46:54	2014-02-11 15:46:54	317	WordCount.hs
642	12	a84dd68fa821105f99039f7f	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = normalize(phrase)\n    @words  = separate_words\n  end\n\n  def word_count\n    unique_words.each_with_object({}) do |word, count|\n      count[word] = @words.count(word)\n    end\n  end\n\n  private\n\n  def normalize(phrase)\n    phrase.to_s.downcase\n  end\n\n  def separate_words\n    @phrase.scan(/\\w+/)\n  end\n\n  def unique_words\n    @words.uniq\n  end\nend	\N	f	1	5	2013-10-18 03:45:59	2013-10-18 03:45:59	318	word-count.rb
643	12	22f9eb8b500cb95a83caeff0	superseded	ruby	word-count	# A little better than the last one.\n# Not sure if word_count is the most\n# expressive/clean possible yet !\nclass Phrase\n  def initialize(phrase)\n    @phrase = phrase.to_s\n    normalize_phrase\n    @word_list = get_word_list\n  end\n\n  def word_count\n    counted_word = Hash.new\n\n    get_uniq_word.each {|word|\n      counted_word[word] = @word_list.count(word)\n    }\n\n    counted_word\n  end\n\n  private\n\n  def normalize_phrase\n    @phrase.downcase!\n  end\n\n  def get_word_list\n    @phrase.scan(/\\w+/)\n  end\n\n  def get_uniq_word\n    @word_list.uniq\n  end\nend	\N	f	0	2	2013-11-01 21:31:22	2013-11-01 21:31:22	318	word-count.rb
644	12	781cdd6b3eac162bd61e464f	superseded	ruby	word-count	# A little better than the last one.\n# Not sure if word_count is the most\n# expressive/clean possible yet !\nclass Phrase\n  def initialize(phrase)\n    @phrase = phrase.to_s\n    normalize_phrase\n    @word_list = get_word_list\n  end\n\n  def word_count\n    get_uniq_word.each_with_object({}) do |word, counted_word|\n      counted_word[word] = @word_list.count(word)\n    end\n  end\n\n  private\n\n  def normalize_phrase\n    @phrase.downcase!\n  end\n\n  def get_word_list\n    @phrase.scan(/\\w+/)\n  end\n\n  def get_uniq_word\n    @word_list.uniq\n  end\nend	\N	f	2	3	2014-01-27 04:21:20	2014-01-27 04:21:20	318	word-count.rb
645	12	2868fae9c53d92dcf938da13	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase.to_s\n    normalize_phrase\n    @word_list = get_word_list\n  end\n\n  def word_count\n    get_uniq_word.each_with_object({}) do |word, counted_word|\n      counted_word[word] = @word_list.count(word)\n    end\n  end\n\n  private\n\n  def normalize_phrase\n    @phrase.downcase!\n  end\n\n  def get_word_list\n    @phrase.scan(/\\w+/)\n  end\n\n  def get_uniq_word\n    @word_list.uniq\n  end\nend	\N	f	4	4	2014-02-16 23:13:04	2014-02-16 23:13:04	318	word-count.rb
646	12	961941bb6c3ceb36c93fb046	done	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @words = normalize(phrase)\n  end\n\n  def word_count\n    unique_words.each_with_object({}) do |word, count|\n      count[word] = @words.count(word)\n    end\n  end\n\n  private\n\n  def normalize(phrase)\n    phrase.to_s.downcase.scan(/\\w+/)\n  end\n\n  def unique_words\n    @words.uniq\n  end\nend	\N	f	0	6	2014-02-24 22:53:53	2014-02-24 22:53:53	318	word-count.rb
648	12	b748ba042c854632a46a6439	pending	javascript	etl	function transform (obj) {\n\tvar result = {};\n\n\tfor (var key in obj) {\n\t\tvar arrOfLetters = obj[key];\n\t\tfor (var i = 0; i < arrOfLetters.length; i++) {\n\t\t\tresult[arrOfLetters[i].toLowerCase()] = parseInt(key);\n\t\t}\n\t}\n\treturn result;\n}	\N	f	1	1	2013-11-16 13:48:16	2013-11-16 13:48:16	319	etl.js
649	12	85605f2b988c001953683096	superseded	ruby	leap	class Year\n\n  def initialize(year)\n  \t@year = year\n  end\n\n  def leap?\n  \tif divisible_by? 400\n  \t  true\n  \telsif divisible_by? 100\n  \t  false\n  \telsif divisible_by? 4\n  \t  true\n  \telse\n  \t  false\n  \tend\n  end\n\n  private\n\n    def divisible_by?(x)\n      @year % x == 0\n    end\nend	\N	f	1	1	2013-10-23 14:11:07	2013-10-23 14:11:07	320	leap.rb
650	12	2e9f9f510b7c24e6b3655480	hibernating	ruby	leap	class Year\n\n  def initialize(year)\n  \t@year = year\n  end\n\n  def leap?\n  \tdivisible_by?(4) && ( !divisible_by?(100) || divisible_by?(400) )\n  end\n\n  private\n\n    def divisible_by?(x)\n      @year % x == 0\n    end\nend	\N	f	1	2	2013-12-24 23:40:34	2013-12-24 23:40:34	320	leap.rb
651	12	e415a34bc97bcbb30509ac74	done	ruby	anagram	class Anagram\r\n\tdef initialize(word)\r\n\t\t@word = word\r\n\t\t@sortedword = sort_chars(word)\r\n\tend\r\n\r\n\tdef match(list)\r\n\t\ttemp = []\r\n\t\tfor item in list\r\n\t\t\ttemp.push item if is_anagram? item\r\n\t\tend\r\n\t\ttemp\r\n\tend\r\n\r\n\tprivate\r\n\r\n\tdef is_anagram?(item)\r\n\t\tsort_chars(item) == @sortedword && item.casecmp(@word) != 0\r\n\tend\r\n\r\n\tdef sort_chars(word)\r\n\t\tword.downcase.chars.sort.join\r\n\tend\r\nend	\N	f	2	1	2014-03-26 10:38:50	2014-03-26 10:38:50	321	anagram.rb
652	12	09fbf2aea2c30de66a5a26d1	done	ruby	hamming	module Hamming\n  def self.compute a, b\n    DNA.new(a).ham_with DNA.new(b)\n  end\n\n  class DNA\n    def initialize sequence\n      @sequence = sequence.split('')\n    end\n\n    def ham_with other\n      diff(other).size\n    end\n\n    def diff other\n      o_indexed = other.indexed\n      indexed[0...o_indexed.size] - o_indexed\n    end\n\n    protected\n\n    def indexed\n      @sequence.each_with_index.map {|g, i| g + i.to_s}\n    end\n  end\nend	\N	f	1	1	2013-11-13 05:58:28	2013-11-13 05:58:28	322	hamming.rb
653	12	32ffbc8d83561e1136635c2b	done	ruby	etl	class ETL\n  def self.transform(old_data)\n    ScrabbleDataTransform.new(old_data).transform\n  end\n\n  class ScrabbleDataTransform\n    attr_reader :old_data\n\n    def initialize(old_data)\n      @old_data = old_data\n    end\n\n    def transform\n      old_data.reduce({}) do |new_data, entry|\n        words = entry.last\n        score = entry.first\n\n        words.each { |word| new_data[sanitize_word(word)] = score }\n        new_data\n      end\n    end\n\n    private\n\n    def sanitize_word(word)\n      word.downcase\n    end\n  end\nend	\N	f	1	1	2013-11-20 14:54:43	2013-11-20 14:54:43	323	etl.rb
677	13	cd03dbe01ee5913585d3917d	superseded	ruby	clock	class Clock\n  MINUTES_PER_HOUR = 60\n  HOURS_PER_DAY = 24\n\n  attr_reader :hour, :minute\n\n  def initialize(hour, minute = 0)\n    additional_hours, @minute = minute.divmod(MINUTES_PER_HOUR)\n    @hour = (hour + additional_hours) % HOURS_PER_DAY\n  end\n\n  def self.at(hour, minute = 0)\n    new(hour, minute)\n  end\n\n  def +(minutes)\n    self.class.new(@hour, @minute + minutes)\n  end\n\n  def -(minutes)\n    self.class.new(@hour, @minute - minutes)\n  end\n\n  def ==(other)\n    @hour == other.hour && @minute == other.minute\n  end\n\n  def to_s\n    [@hour, @minute].map { |item| item.to_s.rjust(2, '0') }.join(':')\n  end\nend	\N	f	2	1	2013-12-31 17:25:13	2013-12-31 17:25:13	338	clock.rb
655	12	1e9bcde326602d4620cc15dd	done	elixir	etl	defmodule ETL do\n\n  def transform(old) do\n    Enum.reduce(old, HashDict.new, &transform_row/2)\n  end\n\n  defp transform_row({point, values}, dict) do\n    Enum.reduce(values, dict, &(Dict.put(&2, String.downcase(&1), point)))\n  end\nend	\N	f	0	1	2014-04-16 22:52:53	2014-04-16 22:52:53	325	etl.exs
656	12	a6f883f4837295bc2d1c2a21	pending	python	gigasecond	"""One gigasecond later."""\n\n__all__ = ["Gigasecond"]\n\nfrom datetime import timedelta\n\n\nclass Gigasecond(object):\n    """One gigasecond later."""\n\n    ONE_GIGASECOND = timedelta(seconds=10 ** 9)\n\n    def __init__(self, date):\n        """Create a date that is 1 gigasecond later from a given date.\n\n        :param date: a start date.\n        :type date: datetime.date.\n        """\n        self.date = date + Gigasecond.ONE_GIGASECOND\n\n    def __repr__(self):\n        cls = self.__class__\n        return "<{!s}.{!s} {!s} date={!r}>".format(\n            cls.__module__, cls.__name__, hex(id(self)), self.date)\n\n    def __str__(self):\n        return str(self.date)	\N	f	0	2	2014-01-29 01:11:33	2014-01-29 01:11:33	326	gigasecond.py
657	12	e97df1cef28072d2abf13dd7	superseded	python	gigasecond	"""One gigasecond later."""\n\n__all__ = ["Gigasecond"]\n\nfrom datetime import timedelta\n\n\nclass Gigasecond(object):\n    """One gigasecond later."""\n\n    ONE_GIGASECOND = timedelta(seconds=10 ** 9)\n\n    def __init__(self, date):\n        """Create a date that is 1 gigasecond later from a given date.\n\n        :param date: a start date.\n        :type date: datetime.date.\n        """\n        self.date = date + Gigasecond.ONE_GIGASECOND\n\n    def __repr__(self):\n        cls = self.__class__\n        return "<%s.%s %s date=%r>".format(\n            cls.__module__, cls.__name__, hex(id(self)), self.date)\n\n    def __str__(self):\n        return str(self.date)	\N	f	1	1	2014-03-13 10:30:30	2014-03-13 10:30:30	326	gigasecond.py
658	12	26d70df27e38f97e1097e628	superseded	javascript	word-count	var Words = function(phrase) {\n  this.count = {}\n\n  var words = phrase.toLowerCase().match(/\\w+/g);\n\n  for (var i = 0; i < words.length; i++) {\n    var word = words[i];\n\n    if (this.count[word] === undefined) {\n      this.count[word] = 0;\n    }\n\n    this.count[word] += 1;\n  }\n}\n\nmodule.exports = Words;	\N	f	0	1	2013-11-17 07:02:06	2013-11-17 07:02:06	327	word-count.js
659	12	d207d8a1d860193dfd81a942	done	javascript	word-count	var Words = function(phrase) {\n  var words = phrase.toLowerCase().match(/\\w+/g);\n\n  this.count = words.reduce(function(count, word) {\n    count[word] = count[word] || 0;\n    count[word] += 1;\n    return count;\n  }, {})\n}\n\nmodule.exports = Words;	\N	f	1	3	2014-01-03 08:59:53	2014-01-03 08:59:53	327	word-count.js
660	12	3fc892252f842341c8d0c9e4	superseded	javascript	word-count	var Words = function(phrase) {\n  this.phrase = phrase;\n}\n\nWords.prototype = {\n\n  get count() {\n    return this.words.reduce(function(count, word) {\n      if (count[word] === undefined) count[word] = 0;\n      count[word] = 1 + count[word];\n      return count;\n    }, {})\n  },\n\n  get words() {\n    return this.phrase.toLowerCase().match(/\\w+/g);\n  }\n\n}\n\nmodule.exports = Words;	\N	f	2	2	2014-05-17 12:32:59	2014-05-17 12:32:59	327	word-count.js
661	12	01955098a3ab6fdb4630df8b	done	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    Enum.reduce(\n      Enum.reject(\n        Enum.map(\n          String.split(sentence, ~r{\\s|_}),\n          fn(x) ->\n            String.replace(String.downcase(x), ~r{[!&@:$%,\\^]}, '')\n          end\n        ),\n        fn(x) ->\n          x == ""\n        end\n      ),\n      HashDict.new,\n      fn(word,dict) ->\n        HashDict.update(dict, word, 1, &(&1 + 1))\n      end\n    )\n  end\nend	\N	f	1	1	2013-12-07 06:37:22	2013-12-07 06:37:22	328	word_count.exs
662	12	579b241f36c8548e7bc3efe3	done	ruby	gigasecond	class Gigasecond\n  def initialize(d)    \n    # convert to days\n    @d = d + ( 1_000_000_000 / 86_400 )\n  end\n  def date\n    @d\n  end\nend	\N	f	1	1	2013-10-28 08:00:40	2013-10-28 08:00:40	329	gigasecond.rb
663	13	83d4bc0d8fe38ca6db03ec4a	superseded	haskell	word-count	module WordCount ( wordCount ) where\n\nimport Data.Char ( isAlphaNum, isSpace, toLower )\nimport Data.Map  ( Map, fromListWith )\n\nwordCount :: String -> Map String Int\nwordCount  = fromListWith ( + ) . flip  zip ( repeat 1 ) . token\n\ntoken :: String -> [ String ]\ntoken = words . map ( toLower . replace ) \n\nreplace :: Char -> Char\nreplace c = if isAlphaNum c || isSpace c then c else ' '	\N	f	2	1	2013-12-06 22:36:54	2013-12-06 22:36:54	330	WordCount.hs
664	13	dd90188419b748f133a7727c	needs_input	haskell	word-count	module WordCount ( wordCount ) where\n\nimport Data.Char ( isAlphaNum, isSpace, toLower )\nimport Data.Map.Strict  ( Map, fromListWith )\n\nwordCount :: String -> Map String Int\nwordCount  = fromListWith ( + ) . flip  zip ( repeat 1 ) . token\n\ntoken :: String -> [ String ]\ntoken = words . map ( toLower . replace ) \n\nreplace :: Char -> Char\nreplace c = if isAlphaNum c then c else ' '	\N	f	2	2	2013-12-25 04:06:23	2013-12-25 04:06:23	330	WordCount.hs
667	13	22bc751656a70d0091aa2ba9	pending	go	anagram	package anagram\n\nimport (\n\t"sort"\n\t"strings"\n)\n\n// Detect detects the anagrams in candidates agains the given subject.\nfunc Detect(subject string, candidates []string) []string {\n\toutput := make([]string, 0)\n\n\t// The subject / candidate matching is case insensitive.\n\tsubject = strings.ToLower(subject)\n\tsubjectSorted := strings.Split(subject, "")\n\tsort.Strings(subjectSorted)\n\n\tfor _, candidate := range candidates {\n\t\t// The subject / candidate matching is case insensitive.\n\t\tcandidate = strings.ToLower(candidate)\n\t\tcandidateSorted := strings.Split(candidate, "")\n\t\tsort.Strings(candidateSorted)\n\n\t\tif subject != candidate && strings.Join(subjectSorted, "") == strings.Join(candidateSorted, "") {\n\t\t\toutput = append(output, candidate)\n\t\t}\n\t}\n\n\treturn output\n}	\N	f	2	1	2014-02-16 22:09:52	2014-02-16 22:09:52	332	anagram.go
668	13	0d54d3f45e71e86ebfdae480	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map transcribeBase\n\ntranscribeBase :: Char -> Char\ntranscribeBase 'C' = 'C'\ntranscribeBase 'G' = 'G'\ntranscribeBase 'A' = 'A'\ntranscribeBase 'T' = 'U'\ntranscribeBase c = error $ "Unexpected base '" ++ [c] ++ "'"	\N	f	0	1	2014-03-17 08:12:55	2014-03-17 08:12:55	333	rna-transcription.hs
669	13	2c1c0c93c3516b3dce3ae091	pending	python	sum-of-multiples	import functools\n\nclass SumOfMultiples:\n    def __init__(self, *multiples):\n        self.multiples = list(multiples) or [3, 5]\n\n    def to(self, n):\n       multiples = filter(self._is_multiple, range(1, n))\n       return functools.reduce((lambda x, y: x + y), multiples, 0)\n\n    def _is_multiple(self, n):\n        return any([ n % m == 0 for m in self.multiples])	\N	f	1	1	2014-02-18 21:32:04	2014-02-18 21:32:04	334	sum_of_multiples.py
670	13	50680a4270c4e37bae96e5d1	superseded	ruby	bob	class Bob\n\n  def hey(sentence)\n    message = Message.new sentence\n\n    if message.shouted?\n      "Woah, chill out!"\n    elsif message.question?\n      "Sure."\n    elsif message.silence?\n      "Fine. Be that way!"\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass Message\n  def initialize(content)\n    @content = content || ""\n  end\n\n  def shouted?\n    !silence? && @content.upcase == @content\n  end\n\n  def question?\n    @content.end_with? "?"\n  end\n\n  def silence?\n    @content =~ /^\\s*$/\n  end\nend	\N	f	2	4	2013-11-27 07:26:26	2013-11-27 07:26:26	335	bob.rb
671	13	a3d3f8aef5b7b5ef84c92ba9	superseded	ruby	bob	class Bob\n\n  def hey(message)\n    message = Message.new message\n\n    if message.shouted?\n      "Woah, chill out!"\n    elsif message.question?\n      "Sure."\n    elsif message.silence?\n      "Fine. Be that way!"\n    else\n      "Whatever."\n    end\n\n  end\n\nend\n\nclass Message\n  def initialize(content)\n    @content = content\n  end\n\n  def shouted?\n    !silence? && @content.upcase == @content\n  end\n\n  def question?\n    !silence? && @content =~ /\\?$/\n  end\n\n  def silence?\n    @content == nil || @content =~ /^\\s*$/\n  end\n\nend	\N	f	5	1	2014-03-18 17:06:24	2014-03-18 17:06:24	335	bob.rb
672	13	0964a0615a8553654d8b7283	superseded	ruby	bob	class Bob\n\n  def hey(sound)\n    message = Message.new sound\n\n    if message.shouted?\n      "Woah, chill out!"\n    elsif message.question?\n      "Sure."\n    elsif message.silence?\n      "Fine. Be that way!"\n    else\n      "Whatever."\n    end\n\n  end\n\nend\n\nclass Message\n  def initialize(content)\n    @content = content || ""\n  end\n\n  def shouted?\n    !silence? && @content.upcase == @content\n  end\n\n  def question?\n    @content =~ /\\?$/\n  end\n\n  def silence?\n    @content =~ /^\\s*$/\n  end\n\nend	\N	f	1	2	2014-03-23 09:22:45	2014-03-23 09:22:45	335	bob.rb
673	13	e4de44db983177dc67f94324	superseded	ruby	bob	class Bob\n\n  def hey(sound)\n    message = Message.new sound\n\n    if message.shouted?\n      "Woah, chill out!"\n    elsif message.question?\n      "Sure."\n    elsif message.silence?\n      "Fine. Be that way!"\n    else\n      "Whatever."\n    end\n\n  end\n\nend\n\nclass Message\n  def initialize(content)\n    @content = content || ""\n  end\n\n  def shouted?\n    !silence? && @content.upcase == @content\n  end\n\n  def question?\n    @content.end_with? "?"\n  end\n\n  def silence?\n    @content =~ /^\\s*$/\n  end\n\nend	\N	f	7	3	2014-04-06 13:33:58	2014-04-06 13:33:58	335	bob.rb
674	13	e79a1b1b95cee35e020edc69	done	ruby	bob	class Bob\n\n  def hey(sentence)\n    message = Message.new sentence\n\n    if message.shouted?\n      "Woah, chill out!"\n    elsif message.question?\n      "Sure."\n    elsif message.silence?\n      "Fine. Be that way!"\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass Message\n  def initialize(content)\n    @content = content || ""\n  end\n\n  def shouted?\n    !silence? && @content.upcase == @content\n  end\n\n  def question?\n    @content.end_with? "?"\n  end\n\n  def silence?\n    @content.strip.empty?\n  end\nend	\N	f	0	5	2014-05-14 10:04:54	2014-05-14 10:04:54	335	bob.rb
675	13	f8b0d6a7d95ac0e0fad44db4	pending	javascript	linked-list	function LinkedList() {\n    this.isEmpty = function() {\n        return this.first === undefined;\n    };\n    this.push = function(datum) {\n        if (this.isEmpty()) {\n            this.addFirstElement(datum);\n        } else {\n            var previousLast = this.first.prev;\n            var newLast = new Element(datum, previousLast, this.first);\n            previousLast.next = newLast;\n            this.first.prev = newLast;\n        }\n    };\n\n    this.pop = function() {\n        if (this.isEmpty()) {\n            return undefined;\n        }\n        var formerLast = this.first.prev;\n        this.first.prev = formerLast.prev;\n        var result = formerLast.datum;\n        return result;\n    };\n\n    this.shift = function() {\n        var newFirst = this.first.next;\n        var datum = this.first.datum;\n        var last = this.first.prev;\n        newFirst.prev = last;\n        last.next = newFirst;\n        this.first = newFirst;\n        return datum;\n    };\n\n    this.unshift = function(datum) {\n        if (this.isEmpty()) {\n            this.addFirstElement(datum);\n        } else {\n            var last = this.first.prev;\n            var formerFirst = this.first;\n            var newFirst = new Element(datum, last, formerFirst);\n            last.next = newFirst;\n            formerFirst.prev = newFirst;\n            this.first = newFirst;\n        }\n    };\n\n    this.addFirstElement = function(datum) {\n        var firstElement = new Element(datum);\n        firstElement.next = firstElement;\n        firstElement.prev = firstElement;\n        this.first = firstElement;\n    };\n\n    this.count = function() {\n        if (this.isEmpty()) {\n            return 0;\n        }\n\n        var currentElement = this.first;\n        var size = 0;\n        do {\n            currentElement = currentElement.next;\n            size++;\n        } while (currentElement !== this.first);\n\n        return size;\n    };\n\n    this.delete = function(datum) {\n        var currentElement = this.first;\n        while (currentElement.datum !== datum) {\n            currentElement = currentElement.next;\n        }\n        var previousElement = currentElement.prev;\n        var nextElement = currentElement.next;\n        previousElement.next = nextElement;\n        nextElement.prev = previousElement;\n    };\n}\n\nfunction Element(datum, prev, next) {\n    this.datum = datum;\n    this.next = next;\n    this.prev = prev;\n}\n\nmodule.exports = LinkedList;	\N	f	2	1	2014-02-20 04:28:19	2014-02-20 04:28:19	336	linked-list.js
676	13	0a695edf0f8bb5f2fffd064f	pending	python	robot-name	from string import ascii_uppercase, digits\nfrom random import choice\n\nclass Robot:\n\tdef __init__(self):\n\t\tself.reset()\n\t\n\tdef reset(self):\n\t\tl1 = [choice(ascii_uppercase) for n in range(2)]\n\t\tl2 = [choice(digits) for n in range(3)]\n\t\tl1.extend(l2)\n\t\tself.name = "".join(l1)	\N	f	2	1	2013-12-23 04:34:13	2013-12-23 04:34:13	337	robot.py
719	14	640186a7be85569bb6d3ae79	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map fromDNA\n\nfromDNA :: Char -> Char\nfromDNA n =\n    if n == 'T'\n    then 'U'\n    else n	\N	f	6	2	2014-04-06 20:36:52	2014-04-06 20:36:52	362	DNA.hs
679	13	d4bbcabcaf19cd8d3c728502	pending	ruby	phone-number	class PhoneNumber\n\n  def initialize(input)\n    number = letters_and_numbers(input)\n    number = maybe_trim_leading_one(number)\n    number = '0000000000' if still_invalid(number)\n    @number = number\n  end\n\n  def number\n    @number\n  end\n\n  def to_s\n    "(#{area_code}) #{exchange_number}-#{local_number}"\n  end\n\n  def area_code\n    @number[0,3]\n  end\n\n  def exchange_number\n    @number[3,3]\n  end\n\n  def local_number\n    @number[6,4]\n  end\n\n  private\n\n  def letters_and_numbers(input)\n    input.gsub(/[^a-z\\d]/, '')\n  end\n\n  def maybe_trim_leading_one(num)\n    if num.length === 11 || num.length === 12\n      num.sub(/^1/,'')\n    else\n      num\n    end\n  end\n\n  def still_invalid(num)\n    num.length < 10 || num.length === 11 || num.match(/[a-z]/)\n  end\n\nend	\N	f	2	1	2013-12-01 03:55:49	2013-12-01 03:55:49	339	phone_number.rb
680	13	1e23e1b94a1264c6f69d7623	pending	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    count = 0\n    max = a.length < b.length ? a.length : b.length\n    for i in 0...max\n      if a[i] != b[i]\n        count += 1\n      end\n    end\n    return count\n  end\nend	\N	f	5	1	2014-04-14 23:03:01	2014-04-14 23:03:01	340	hamming.rb
681	13	5b33f995c38f52cf664ffae7	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    normalize_text = normalize(text)\n    @words = to_array(normalize_text)\n  end\n\n  def word_count\n    return @words.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\n  end\n\n  private\n\n    def to_array(text)\n      text.split(/\\W+/)\n    end\n\n    def normalize(text)\n      text.downcase\n    end\nend	\N	f	2	2	2013-11-09 15:57:18	2013-11-09 15:57:18	341	word-count.rb
682	13	64acbcc5d8431432e1c9f100	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    clean_text = remove_punctuation(text)\n    normalize_text = normalize(clean_text)\n    @words = to_array(normalize_text)\n  end\n\n  def word_count\n    counts = Hash.new(0)\n    @words.each { |word| counts[word] += 1 }\n    counts\n  end\n\n  private\n\n    def remove_punctuation(text)\n      text.gsub(/(\\W)/, " ")\n    end\n\n    def to_array(text)\n      text.split(/[\\s,]+/)\n    end\n\n    def normalize(text)\n      text.downcase\n    end\nend	\N	f	2	1	2013-11-20 07:11:54	2013-11-20 07:11:54	341	word-count.rb
683	13	7c8c04bab04e368c7f12e5e9	superseded	ruby	word-count	class Phrase\n  def initialize(text)\n    @words = to_array(normalize(text))\n  end\n\n  def word_count\n    @words.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\n  end\n\n  private\n\n    def to_array(text)\n      text.split(/\\W+/)\n    end\n\n    def normalize(text)\n      text.downcase\n    end\nend	\N	f	0	3	2013-12-13 07:14:10	2013-12-13 07:14:10	341	word-count.rb
684	13	890fff3cd2ffaeebc4ee0220	done	ruby	word-count	class Phrase\n  attr_reader :text\n\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\n  end\n\n  private\n\n    def words\n      text.downcase.split(/\\W+/)\n    end\nend	\N	f	3	4	2013-12-30 00:19:49	2013-12-30 00:19:49	341	word-count.rb
685	13	08237042d9a35fa69ab6ae56	superseded	elixir	grains	defmodule Grains do\n  def square(n), do: :math.pow(2, n - 1)\n  def total,     do: square(65) - 1\nend	\N	f	0	2	2013-11-10 11:29:29	2013-11-10 11:29:29	342	grains.exs
686	13	6a5e256f9405164540c81fdc	superseded	elixir	grains	defmodule Grains do\n  def square(n) do\n    :math.pow(2, n - 1)\n  end\n\n  def total do\n    square(65) - 1\n  end\nend	\N	f	2	1	2013-12-03 08:44:16	2013-12-03 08:44:16	342	grains.exs
687	13	32f64090f745de5ca8ea4436	done	elixir	grains	defmodule Grains do\n  use Bitwise, only_operators: true\n\n  def square(n), do: 1 <<< (n - 1)\n  def total,     do: square(65) - 1\nend	\N	f	2	3	2014-02-20 02:51:41	2014-02-20 02:51:41	342	grains.exs
688	13	5f6bf3d29c0521b30c2d675c	done	haskell	atbash-cipher	module Atbash (encode) where\r\nimport Data.List.Split (chunksOf)\r\nimport Data.Char (toLower, isNumber, isAlphaNum, chr, ord)\r\n\r\nencode :: String -> String\r\nencode str = unwords $ chunksOf 5 $ map atbash str'\r\n  where\r\n    str' = map toLower $ filter isAlphaNum str\r\n    atbash x\r\n        | isNumber x = x\r\n        | otherwise  = chr (ord 'a' + ord 'z' - ord x)	\N	f	0	4	2014-01-04 23:35:16	2014-01-04 23:35:16	343	Atbash.hs
689	13	d1d416df1a64368d11c97542	superseded	haskell	atbash-cipher	module Atbash (encode) where\r\nimport Data.Ix\r\nimport Data.Char\r\nimport Data.List.Split (chunksOf)\r\n\r\nencode :: String -> String\r\nencode str =  unwords $ chunksOf 5 $ map atbash str'\r\n  where\r\n    atbash x    = if isLetter x then transpose x else x\r\n    transpose x = range ('a', 'z') !! (25 - index ('a', 'z') x)\r\n    str'        = map toLower $ filter isAlphaNum str	\N	f	1	1	2014-01-26 01:41:31	2014-01-26 01:41:31	343	Atbash.hs
690	13	44fc297cb4f6bb3f7aaaa717	superseded	haskell	atbash-cipher	module Atbash (encode) where\r\nimport Data.List.Split (chunksOf)\r\nimport Data.Char (toLower, isAlphaNum)\r\nimport qualified Data.Map.Strict as M\r\n\r\nencode :: String -> String\r\nencode str =  unwords $ chunksOf 5 [M.findWithDefault x x table | x <- str']\r\n  where\r\n    table  = M.fromList $ zip ['a'..'z'] ['z', 'y'..'a']\r\n    str'   = map toLower $ filter isAlphaNum str	\N	f	2	2	2014-02-02 08:50:11	2014-02-02 08:50:11	343	Atbash.hs
691	13	1fbcb5678078b9e54ed4d500	superseded	haskell	atbash-cipher	module Atbash (encode) where\r\nimport Data.List.Split (chunksOf)\r\nimport Data.Char (toLower, isNumber, isAlphaNum, chr, ord)\r\n\r\nencode :: String -> String\r\nencode str =  unwords $ chunksOf 5 $ map atbash str'\r\n  where\r\n    str'     = map toLower $ filter isAlphaNum str\r\n    atbash x = if isNumber x then x\r\n                  else chr (ord x + (122 - ord x - (ord x - 97)))	\N	f	0	3	2014-04-03 09:09:49	2014-04-03 09:09:49	343	Atbash.hs
692	13	7ee7ebcfa543a686599fe48e	pending	javascript	atbash-cipher	var atbash = {\n  encode: function(input) {\n    var newString = "";\n    input = input.replace(/[^a-z0-9]/ig, "").toLowerCase();\n    var aCharCode = "a".charCodeAt(0);\n    var zCharCode = aCharCode + 25;\n    for (var i = 0; i < input.length; i++) {\n      if (i !== 0 && i % 5 === 0) {\n        newString += " ";\n      }\n      var offset = input.charCodeAt(i) - aCharCode;\n      if (offset >= 0) {\n        var newCharCode = zCharCode - offset;\n        newString += String.fromCharCode(newCharCode);\n      }\n      else {\n        newString += input[i];\n      }\n    }\n    return newString;\n  }\n};	\N	f	2	1	2014-01-29 09:20:06	2014-01-29 09:20:06	344	atbash-cipher_test.js
693	13	31234f17271a6969399fb5ba	hibernating	ruby	raindrops	class Raindrops\n\n\tdef convert(int)\n\t\tsound = prime3(int) + prime5(int) + prime7(int)\n\t\tsound.empty? ? int.to_s : sound \n\tend\n\n\tdef prime3(int)\n\t\tint % 3 == 0 ? "Pling" : ""\t\n\tend\n\n\tdef prime5(int)\n\t\tint % 5 == 0 ? "Plang" : ""\n\tend\n\n\tdef prime7(int)\n\t\tint % 7 == 0 ? "Plong" : ""\n\tend\nend	\N	f	0	1	2013-12-27 18:45:34	2013-12-27 18:45:34	345	raindrops.rb
695	14	c9fff619d6dc34e99dd5ff81	pending	ruby	nth-prime	class Prime\n  class << self\n    def nth(number)\n      raise ArgumentError if number <= 0\n\n      primes[number - 1] || (\n        current = primes.last\n\n        loop do\n          current += 2\n          primes << current if is_prime?(current)\n          return primes.last if primes.length == number\n        end\n      )\n    end\n\n    def primes\n      @primes ||= [2, 3]\n    end\n\n    def is_prime?(number)\n      limit = Math.sqrt(number)\n\n      primes.take_while { |n| n <= limit }.none? do |n|\n        number % n == 0\n      end\n    end\n  end\nend	\N	f	0	1	2013-12-13 17:41:41	2013-12-13 17:41:41	347	prime.rb
696	14	8ce1a20d9ee9182449166622	done	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = word.downcase\n    @required_letters = letters(word)\n  end\n\n  def match(possible_anagrams)\n    possible_anagrams.reject { |candidate| exact_match?(candidate) }.\n      find_all { |candidate| anagram?(candidate) }\n  end\n\n  private\n\n  attr_reader :required_letters, :word\n\n  def letters(string)\n    string.downcase.chars.sort\n  end\n\n  def exact_match?(candidate)\n    candidate.downcase == word\n  end\n\n  def anagram?(candidate)\n    letters(candidate) == required_letters\n  end\nend	\N	f	0	1	2013-11-12 10:09:15	2013-11-12 10:09:15	348	anagram.rb
697	14	1c22e84650e28defa1598264	done	python	phone-number	import re\n\nclass Phone:\n    def __init__(self, number):\n        self.number = self.process(number)\n\n    def process(self, number):\n        number = re.sub(re.compile("[^0-9]"), '', number)\n        if len(number) == 11 and number[0] == "1":\n            return number[1:]\n        elif len(number) != 10:\n            return "0000000000"\n        else:\n            return number\n\n    def pretty(self):\n        return "({0}) {1}-{2}".format(self.number[:3],\n                                      self.number[3:6],\n                                      self.number[6:])\n\n    def area_code(self):\n        return self.number[:3]	\N	f	4	1	2014-02-28 19:50:04	2014-02-28 19:50:04	349	phone-number.py
698	14	a404bbd8984031e98e0abcb2	done	ruby	nucleotide-count	DNA =  Struct.new(:nucleotides) do\n\n  def count(input)\n    unless nucleotide?(input)\n      raise ArgumentError\n    end\n    nucleotides.count(input)\n  end\n\n  def nucleotide_counts\n    { 'A' => count('A'),'T' => count('T'),'G' => count('G'),'C' => count('C')}\n  end\n\n  def nucleotide?(input)\n    %w(A T C G U).include?(input)\n  end\n\nend	\N	f	3	1	2013-11-15 01:56:28	2013-11-15 01:56:28	350	nucleotide-count.rb
699	14	1c220aecc2f804207c4acd86	superseded	elixir	word-count	defmodule Words do\n\tdef count(words) do\n\t\tcleanWords = clean(words)\n\t\twordList = String.split(cleanWords)\n\t\tkeyList = Enum.uniq(wordList)\n\t\tcountedPairs = Enum.map(keyList, fn(x) -> {x, accumulate(x, wordList)} end)\t\n\t\tHashDict.new countedPairs\n\tend\n\n\tdef accumulate(word, list) do\n\t\tEnum.count(list, fn(x) -> x == word end)\n\tend\n\n\tdef clean(word) do\n\t\tinsensitiveWord = String.downcase(word)\n\t\tRegex.replace(%r/[^[a-z0-9\\s]/i, insensitiveWord, "")\n\tend\nend	\N	f	0	1	2013-10-24 00:07:57	2013-10-24 00:07:57	351	word-count.exs
700	14	216912c044341d5b41fc6799	superseded	elixir	word-count	defmodule Words do\n\tdef count(words) do\n\t\tclean(words) |>\n\t\twordList = String.split\n\t\tkeyList = Enum.uniq(wordList)\n\t\tcountedPairs = Enum.map(keyList, fn(x) -> {x, accumulate(x, wordList)} end)\t\n\t\tHashDict.new countedPairs\n\tend\n\n\tdef accumulate(word, list) do\n\t\tEnum.count(list, fn(x) -> x == word end)\n\tend\n\n\tdef clean(word) do\n\t\tinsensitiveWord = String.downcase(word)\n\t\tRegex.replace(%r/[^[a-z0-9\\s]/i, insensitiveWord, "")\n\tend\nend	\N	f	2	2	2013-11-11 01:03:23	2013-11-11 01:03:23	351	word-count.exs
701	14	80fdadc9acb63f3ad9aaf78d	done	elixir	word-count	defmodule Words do\n\tdef count(words) do\n\t\twordList = clean(words) |> String.split\n\t\tkeyList = Enum.uniq(wordList)\n\t\tcountedPairs = Enum.map(keyList, fn(x) -> {x, accumulate(x, wordList)} end)\t\n\t\tHashDict.new countedPairs\n\tend\n\n\tdef accumulate(word, list) do\n\t\tEnum.count(list, fn(x) -> x == word end)\n\tend\n\n\tdef clean(word) do\n\t\tinsensitiveWord = String.downcase(word)\n\t\tRegex.replace(%r/[^[a-z0-9\\s]/i, insensitiveWord, "")\n\tend\nend	\N	f	3	3	2013-11-19 02:12:32	2013-11-19 02:12:32	351	word-count.exs
702	14	438607dce98e7701af53cde5	done	elixir	leap	defmodule Year do\n  @doc """\n  Returns whether or not `year` is a leap year.\n\n  ## Examples\n\n    iex> Year.leap_year?(2001)\n    false\n\n    iex> Year.leap_year?(2004)\n    true\n  """\n  def leap_year?(year) when rem(year, 400) == 0, do: true\n  def leap_year?(year) when rem(year, 100) == 0, do: false\n  def leap_year?(year) when rem(year, 4) == 0,   do: true\n  def leap_year?(_), do: false\nend	\N	f	3	1	2014-01-31 19:11:57	2014-01-31 19:11:57	352	leap.exs
703	14	02d67629ca7b9b18666c123f	pending	scala	grains	object Grains {\n  def square(i: Int) = BigInt(2).pow(i - 1)\n  def total = Range(1,65).map(square).sum\n}	\N	f	3	1	2013-10-27 20:23:12	2013-10-27 20:23:12	353	grains.scala
704	14	d98820277437767b23aed8da	superseded	coffeescript	bob	class Drivelyzer\n  constructor: (@drivel)->\n  isSilent: -> @drivel.trim() is ''\n  isShouting: -> @drivel.toUpperCase() is @drivel\n  isQuery: -> @drivel.slice(-1) is '?'\n\nclass Bob\n  hey: (statement)->\n    drivel = new Drivelyzer(statement)\n    return "Fine. Be that way!" if drivel.isSilent()\n    return "Woah, chill out!" if drivel.isShouting()\n    return "Sure." if drivel.isQuery()\n    return 'Whatever.'\n\nmodule.exports = Bob	\N	f	3	1	2013-12-02 21:24:32	2013-12-02 21:24:32	354	bob.coffee
705	14	a64fff30f7edfc08becd76b9	done	coffeescript	bob	class Bob\n  isSilent = (drivel)-> drivel.trim() is ''\n  isShouting = (drivel)-> drivel.toUpperCase() is drivel\n  isQuery = (drivel)-> drivel.slice(-1) is '?'\n  \n  hey: (drivel)->\n    switch\n      when isSilent drivel then "Fine. Be that way!"\n      when isShouting drivel then "Woah, chill out!"\n      when isQuery drivel then "Sure."\n      else 'Whatever.'\n\nmodule.exports = Bob	\N	f	2	2	2013-12-29 14:37:13	2013-12-29 14:37:13	354	bob.coffee
706	14	2251ff2fd49d111357360a2e	superseded	elixir	bob	defmodule Teenager do\n  def hey(text) do\n    cond do\n      Speech.silence?(text) ->\n        "Fine. Be that way!"\n      Speech.shouting?(text) -> \n        "Woah, chill out!"\n      Speech.question?(text) -> \n        "Sure."\n      true -> \n        "Whatever."\n    end\n  end\nend\n\ndefmodule Speech do\n  def silence?(text) do\n    (text |> String.strip |> String.length) == 0\n  end\n  \n  def shouting?(text) do\n    text == String.upcase text\n  end\n  \n  def question?(text) do\n    String.ends_with? text, "?"\n  end  \nend	\N	f	3	2	2013-11-04 06:22:17	2013-11-04 06:22:17	355	bob.exs
720	14	298149d6e33a852d8d21ec28	done	ruby	etl	class ETL\n\ndef self.transform(old)\n  array_in_keys_to_individual_keys(old.invert)\nend\n\ndef self.array_in_keys_to_individual_keys(old)\n  transformed = Hash.new\n  old.each { |k,v| k.each { |element| transformed[element.downcase] = v } }\n  return transformed\nend\n\nend	\N	f	0	1	2013-11-13 07:40:26	2013-11-13 07:40:26	363	etl.rb
708	14	7acfa8728bdb2213746a890f	superseded	elixir	bob	defmodule Teenager do\n  def hey(text) do\n    text = text |> String.strip\n    \n    cond do\n      is_silence?(text) ->\n        "Fine. Be that way!"\n      is_shouting?(text) -> \n        "Woah, chill out!"\n      is_question?(text) -> \n        "Sure."\n      true -> \n        "Whatever."\n    end\n  end\n\n  defp is_silence?(text) do\n    String.length(text) == 0\n  end\n  \n  defp is_shouting?(text) do\n    text == String.upcase text\n  end\n  \n  defp is_question?(text) do\n    String.ends_with? text, "?"\n  end  \nend	\N	f	1	1	2014-02-18 08:05:57	2014-02-18 08:05:57	355	bob.exs
709	14	f3b4fc4290d18ec8f391c47c	done	elixir	bob	defmodule Teenager do\n  def hey(text) do\n    cond do\n      Speech.is_shouting?(text) -> \n        "Woah, chill out!"\n      Speech.is_question?(text) -> \n        "Sure."\n      Speech.is_silence?(text) ->\n        "Fine. Be that way!"\n      true ->\n        "Whatever."\n    end\n  end\nend\n\ndefmodule Speech do\n  def is_silence?(text) do\n    (text |> String.strip |> String.length) == 0\n  end\n  \n  def is_shouting?(text) do\n    !is_silence?(text) && (text == String.upcase text)\n  end\n  \n  def is_question?(text) do\n    String.ends_with? text, "?"\n  end  \nend	\N	f	3	4	2014-02-27 18:29:08	2014-02-27 18:29:08	355	bob.exs
710	14	ede8d11e732d217dbdc26fea	done	ruby	hamming	class Hamming\n  def self.compute strand1, strand2\n    one = DNAStrand.new strand1\n    two = DNAStrand.new strand2\n    DNAUtil.common_length(one, two).times.count do |position_in_strand|\n      one.nucleotides[position_in_strand] != two.nucleotides[position_in_strand]\n    end\n  end\nend\n\nclass DNAStrand\n  def initialize strand\n    @strand = strand\n  end\n\n  def length\n    @length ||= strand.length\n  end\n\n  def nucleotides\n    @nucleotides ||= strand.chars.to_a\n  end\n\n  private\n  attr_reader :strand\nend\n\nclass DNAUtil\n  def self.common_length strand1, strand2\n    [strand1.length, strand2.length].min\n  end\nend	\N	f	3	1	2013-11-21 07:49:52	2013-11-21 07:49:52	356	hamming.rb
711	14	be40e34ae84a5ce3d3b6fffc	pending	clojure	nucleotide-count	(ns dna)\n\n(def ^{:private :const} base-count\n  (apply hash-map\n    (interleave #{\\A \\C \\G \\T} (repeat 0))\n  )\n)\n\n(defn nucleotide-counts [strand]\n  (into base-count (frequencies strand))\n)\n\n(defn count [c strand]\n  (cond\n    (#{\\A \\C \\G \\T} c)((nucleotide-counts strand) c)\n    (#{\\A \\C \\G \\U} c) 0\n    :else (throw (Exception. (str "invalid nucleotide '" c "'"))))\n)	\N	f	3	1	2013-11-03 17:37:53	2013-11-03 17:37:53	357	dna.clj
712	14	92c7bc3512eefff3071842da	hibernating	ruby	bob	class Bob\n  def hey(message)\n    \n    if message.to_s.empty?\n      return "Fine. Be that way."      \n    elsif message.end_with?("?")\n      return "Sure."\n    elsif message == message.upcase\n      return "Woah, chill out!"\n    end\n    \n    "Whatever."\n  end\nend	\N	f	3	1	2013-12-10 15:29:55	2013-12-10 15:29:55	358	bob.rb
714	14	dc837280ea814467112e337d	pending	coffeescript	palindrome-products	class Number\n  constructor: (@number) ->\n  isPalindromes: () ->\n    @number < 10 or\n      @number == parseInt("#{@number}".split("").reverse().join(""))\n\nclass Palindromes\n  constructor: (options) ->\n    @maxFactor = options.maxFactor\n    @minFactor = options.minFactor ? 1\n    @factors = {}\n\n  generate: ->\n    for x in [@minFactor..@maxFactor]\n      for y in [x..@maxFactor]\n        value = x * y\n        if new Number(value).isPalindromes()\n          if @factors[value]\n            @factors[value].push [x, y]\n          else\n            @factors[value] = [[x, y]]\n  values: ->\n    (key for key of @factors)\n\n  get: (method) ->\n    value = method(@values()...)\n    value: value\n    factors: @factors[value]\n\n  largest: ->\n    @get(Math.max)\n\n  smallest: ->\n    @get(Math.min)\n\nmodule.exports.Palindromes = Palindromes	\N	f	3	2	2014-01-25 23:53:26	2014-01-25 23:53:26	359	palindrome.coffee
716	14	27ba7ab9a5b2ce917600a4c1	done	javascript	bob	var Bob = function() {\n};\n\nBob.prototype.hey = function(input) {\n  if (!input.match(/\\S/))\n    return 'Fine. Be that way!';\n  else if (input.toUpperCase() == input)\n    return 'Woah, chill out!';\n  else if (input.slice(-1) == "?")\n    return 'Sure.';\n  else\n    return 'Whatever.';\n};\n\nmodule.exports = Bob;	\N	f	3	2	2013-11-06 19:57:02	2013-11-06 19:57:02	361	bob.js
717	14	fa6cc377cb6ecd56ad003611	superseded	javascript	bob	var Bob = function() {\n};\n\n\nBob.prototype.hey = function(input) {\n  if (input.replace(/\\s/g,"") == "") {\n    return 'Fine. Be that way!';\n  } else if (input.toUpperCase() == input) {\n    return 'Woah, chill out!';\n  } else if (input.slice(-1) == "?") {\n    return 'Sure.';\n  } else {\n    return 'Whatever.';\n  };\n};\n\nmodule.exports = Bob;	\N	f	5	1	2014-03-15 19:53:58	2014-03-15 19:53:58	361	bob.js
718	14	99c85b72e4791798d91a11a5	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map fromDNA\n\nfromDNA :: Char -> Char\nfromDNA n = if n == 'T'\n            then 'U'\n            else n	\N	f	6	1	2014-03-25 04:11:20	2014-03-25 04:11:20	362	DNA.hs
722	14	9ca78929cbed9c5b561e1190	hibernating	haskell	bob	module Bob (responseFor) where\n\nimport Data.List (isSuffixOf)\nimport Data.Char (toUpper, toLower, isSpace)\n\nresponseFor s | yelling s  = "Woah, chill out!"\n              | silence s  = "Fine. Be that way!"\n              | question s = "Sure." \n              | otherwise  = "Whatever."\n\nquestion :: String -> Bool\nquestion = isSuffixOf "?"\n \n\nyelling :: String -> Bool\nyelling s = s == map toUpper s && s /= map toLower s\n\nsilence :: String -> Bool\nsilence s = filter (not . isSpace) s == "" 	\N	f	7	2	2014-04-20 22:39:05	2014-04-20 22:39:05	364	Bob.hs
723	14	bfb2ce0aa57c731d0f74b51a	pending	python	etl	def transform(old):\n\treturn {word.lower(): sc for sc, words in old.iteritems() for word in words}	\N	f	2	1	2014-02-19 16:56:40	2014-02-19 16:56:40	365	etl.py
724	15	ea26a6612845084d16408736	superseded	coffeescript	bob	class Bob\n  hey: (message) ->  \n    message = new Message(message)\n    if message.isSilence()\n      "Fine. Be that way!"\n    else if message.isShouting()\n      "Woah, chill out!"\n    else if message.isQuestion()\n      "Sure."\n    else \n      "Whatever."\n\nclass Message\n\n  constructor: (@message) ->\n    @message = @message.trim()\n\n  isShouting: ->\n    @message.toUpperCase() == @message\n\n  isSilence: ->    \n    @message == ""\n\n  isQuestion: ->\n    @message.slice(-1) == "?"\n\nmodule.exports = Bob	\N	f	4	1	2014-05-12 10:27:00	2014-05-12 10:27:00	366	bob.coffee
725	15	f9afacac13376788355c6b1e	superseded	coffeescript	bob	class Bob\n  hey: (message) ->  \n    message = new Message(message)\n    switch  \n      when message.isShouting() then "Woah, chill out!"\n      when message.isQuestion() then "Sure."\n      when message.isSilence() then "Fine. Be that way!"\n      else "Whatever."\n\nclass Message\n\n  constructor: (@message) ->\n    @message = @message.trim()\n\n  isShouting: ->\n    @message and @message.toUpperCase() == @message\n\n  isSilence: ->    \n    @message is ""\n\n  isQuestion: ->\n    @message.slice(-1) is "?"\n\nmodule.exports = Bob	\N	f	4	2	2014-05-14 08:21:36	2014-05-14 08:21:36	366	bob.coffee
726	15	dedb38735aae3cefb5112eb9	done	coffeescript	bob	class Bob\n  hey: (message) ->  \n    message = new Message(message)\n    switch  \n      when message.isShouting() then "Woah, chill out!"\n      when message.isQuestion() then "Sure."\n      when message.isSilence() then "Fine. Be that way!"\n      else "Whatever."\n\nclass Message\n\n  constructor: (@message) ->\n    @message = @message.trim()\n\n  isShouting: ->\n    @message and @message.toUpperCase() is @message\n\n  isSilence: ->    \n    @message is ""\n\n  isQuestion: ->\n    @message.slice(-1) is "?"\n\nmodule.exports = Bob	\N	f	4	3	2014-05-24 12:21:25	2014-05-24 12:21:25	366	bob.coffee
728	15	e06cc5696e03770cb27643a6	superseded	ruby	simple-cipher	class Cipher\n  attr_reader :key\n\n  def initialize(key = nil)\n    @key = validate key\n  end\n\n  def encode(plain_text)\n    construct(plain_text) { encode_shifts }\n  end\n\n  def decode(encrypted_text)\n    construct(encrypted_text) { decode_shifts }\n  end\n\nprivate\n  def validate(key)\n    key = generate if key.nil?\n    raise ArgumentError unless key =~ /^[[:lower:]]+$/\n    key\n  end\n\n  def generate\n    [*"a".."z"].sample(100).join\n  end\n\n  def construct(text)\n    text.chars.zip(yield).map { |char, shift| relative(char, shift) }.join\n  end\n\n  def encode_shifts\n    @key.each_char.map { |c| position(c) }\n  end\n\n  def decode_shifts\n    encode_shifts.map { |i| -i }\n  end\n\n  def relative(char, shift)\n    ((position(char) + shift) % 26 + 97).chr\n  end\n\n  def position(char)\n    char.ord - "a".ord\n  end\nend	\N	f	3	3	2014-04-25 23:32:14	2014-04-25 23:32:14	368	cipher.rb
730	15	e22a4c302a91d537566ffa1a	superseded	ruby	simple-cipher	class Cipher\n  attr_reader :key\n\n  def initialize(key = nil)\n    @key = validate key\n  end\n\n  def encode(plain_text)\n    construct(plain_text) { encode_shifts }\n  end\n\n  def decode(encrypted_text)\n    construct(encrypted_text) { decode_shifts }\n  end\n\nprivate\n  def validate(key)\n    key = generate if key.nil?\n    raise ArgumentError unless key =~ /^[[:lower:]]+$/\n    key\n  end\n\n  def generate\n    "aaaaaaaaaaaaaaaaaaaa"\n  end\n\n  def construct(text)\n    text.chars.zip(yield).map { |char, shift| relative(char, shift) }.join\n  end\n\n  def encode_shifts\n    @key.each_char.map { |c| position(c) }\n  end\n\n  def decode_shifts\n    encode_shifts.map { |i| -i }\n  end\n\n  def relative(char, shift)\n    ((position(char) + shift) % 26 + 97).chr\n  end\n\n  def position(char)\n    char.ord - "a".ord\n  end\nend	\N	f	4	2	2014-05-09 17:31:52	2014-05-09 17:31:52	368	cipher.rb
740	15	e157a0d5141b8a929caf1cfa	done	ruby	gigasecond	## 16 minutes, most of that reading up on the Time library.  I'm\n#used to rails!\n#\nclass Gigasecond\n  def initialize(date)\n    @date = date\n  end\n\n  def date\n    gigaseconds = 1000000000\n    time = @date.to_time + gigaseconds\n    date = time.to_date\n  end\nend	\N	f	0	2	2014-05-14 19:02:12	2014-05-14 19:02:12	374	gigasecond.rb
732	15	482ff6f595e8a674785e7e70	pending	ruby	simple-cipher	class Cipher\n  attr_reader :key\n\n  def initialize(key = nil)\n    @key = validate key\n  end\n\n  def encode(plain_text)\n    construct(plain_text) { encode_shifts }\n  end\n\n  def decode(encrypted_text)\n    construct(encrypted_text) { decode_shifts }\n  end\n\nprivate\n  def validate(key)\n    (key || generate)[/^[[:lower:]]+$/] or raise ArgumentError\n  end\n\n  def generate\n    [*"a".."z"].sample(100).join\n  end\n\n  def construct(text)\n    text.chars.zip(yield).map { |char, shift| relative(char, shift) }.join\n  end\n\n  def encode_shifts\n    @key.each_char.map { |c| position(c) }\n  end\n\n  def decode_shifts\n    encode_shifts.map { |i| -i }\n  end\n\n  def relative(char, shift)\n    ((position(char) + shift) % 26 + 97).chr\n  end\n\n  def position(char)\n    char.ord - "a".ord\n  end\nend	\N	f	0	5	2014-05-26 05:18:21	2014-05-26 05:18:21	368	cipher.rb
733	15	40c886ac87a0a45405aa84b7	pending	ruby	matrix	class Matrix\n  def initialize string\n    @matrix = parse_matrix string\n  end\n  \n  def rows\n    @matrix\n  end\n  \n  def columns\n    rows.transpose\n  end\n  \n  private\n  def chomp_lines string\n    string.lines.map(&:chomp)\n  end\n  def parse_matrix string\n    chomp_lines(string).map{|row| parse_row row}\n  end\n  def parse_row string\n    string.split(' ').map(&:to_i)\n  end\nend	\N	f	0	1	2014-05-04 09:11:17	2014-05-04 09:11:17	369	matrix.rb
734	15	20572c5fd785f794beb01a41	done	ruby	bob	# -*- coding: utf-8 -*-\nclass Bob\n  def hey(message)\n    if is_yell(message)\n      'Woah, chill out!'\n    elsif is_question(message)\n      'Sure.'\n    elsif is_saying_nothing(message)\n      'Fine. Be that way!'\n    else\n      'Whatever.'\n    end\n  end\n\n  def is_question(message)\n    message.end_with?('?')\n  end\n\n  def is_yell(message)\n    # It should have at least one upper case letter and\n    # should not have any lower case letter.\n    (message =~ /[A-Z]/) && ! (message =~ /[a-z]/)\n  end\n\n  def is_saying_nothing(message)\n    message.strip == ''\n  end\nend	\N	f	0	1	2014-05-18 00:51:26	2014-05-18 00:51:26	370	bob.rb
736	15	8ea48be85e8d310f90d093f5	done	haskell	robot-simulator	module Robot\n       (Bearing(..), Robot, mkRobot, coordinates, simulate, bearing,\n        turnRight, turnLeft)\n       where\n\nimport Control.Applicative ((<$>))\nimport Data.List (foldl')\nimport Data.Traversable (traverse)\n\ndata Bearing = North | East | South | West deriving (Show, Eq, Enum)\n\ntype Robot = (Bearing, Int, Int)\n\nmkRobot :: Bearing -> (Int, Int) -> Robot\nmkRobot b (x, y) = (b, x, y)\n\ncoordinates :: Robot -> (Int, Int)\ncoordinates (_, x, y) = (x, y)\n\nsimulate :: Robot -> String -> Robot\nsimulate robo cmds\n  = either error id (foldl' (flip ($)) robo <$> traverse toCommand cmds)\n\ntoCommand :: Char -> Either String (Robot -> Robot)\ntoCommand 'L' = Right (\\ (b, x, y) -> (turnLeft b, x, y))\ntoCommand 'R' = Right (\\ (b, x, y) -> (turnRight b, x, y))\ntoCommand 'A' = Right (\\ (b, x, y) ->\n                          case b of\n                            North -> (b, x, y+1)\n                            East  -> (b, x+1, y)\n                            South -> (b, x, y-1)\n                            West  -> (b, x-1, y))\ntoCommand c   = Left $ "unrecognised command: " ++ [c]\n\nbearing :: Robot -> Bearing\nbearing (b, _, _) = b\n\nturnRight :: Bearing -> Bearing\nturnRight = rot 1\n\nturnLeft :: Bearing -> Bearing\nturnLeft = rot (-1)\n\nrot :: Int -> Bearing -> Bearing\nrot n b = toEnum $ (n + fromEnum b) `mod` 4	\N	f	4	1	2014-05-06 08:56:15	2014-05-06 08:56:15	372	Robot.hs
737	15	91ff55c0187cc36d24e9f36e	pending	ruby	crypto-square	class Crypto\n  def initialize(plain)\n    @plain = plain\n  end\n\n  def normalize_plaintext\n    @normalized ||= @plain.scan(/[[:alnum:]]/).join.downcase\n  end\n\n  def size\n    @size ||= Math.sqrt(normalize_plaintext.length).ceil\n  end\n\n  def plaintext_segments\n    normalize_plaintext.scan(/.{1,#{size}}/)\n  end\n\n  def ciphertext\n    padded_segments = plaintext_segments.map { |segment| segment.ljust(size).chars }\n    padded_segments.transpose.join.delete(' ')\n  end\n\n  def normalize_ciphertext\n    ciphertext.scan(/.{1,5}/).join(" ")\n  end\nend	\N	f	3	2	2014-05-14 12:43:15	2014-05-14 12:43:15	373	crypto.rb
738	15	c341960829fa745a5f0eafb3	superseded	ruby	crypto-square	class Crypto\n  def initialize(plain)\n    @plain = plain\n  end\n\n  def normalize_plaintext\n    @plain.scan(/\\w|\\d/).join.downcase\n  end\n\n  def size\n    Math.sqrt(normalize_plaintext.length).ceil\n  end\n\n  def plaintext_segments\n    normalize_plaintext.scan(/.{1,#{size}}/)\n  end\n\n  def ciphertext\n    arrays = plaintext_segments.map { |segment| segment.ljust(size).chars }\n    arrays.transpose.join.delete(' ')\n  end\n\n  def normalize_ciphertext\n    ciphertext.scan(/.{1,5}/).join(" ")\n  end\nend	\N	f	4	1	2014-05-23 12:11:56	2014-05-23 12:11:56	373	crypto.rb
739	15	159a0c5df0733e7219882517	superseded	ruby	gigasecond	class Gigasecond\n  def initialize(date)\n    @date = date\n  end\n\n  def date\n    gigaseconds = 1000000000\n    time = @date.to_time + gigaseconds\n    date = time.to_date\n  end\nend	\N	f	5	1	2014-04-26 00:08:38	2014-04-26 00:08:38	374	gigasecond.rb
742	15	cfafa258e922bdb31f9fd549	superseded	python	bob	class Bob:\n  def hey(self, message):\n    if not message or not message.strip():\n      return 'Fine. Be that way!'\n    message = message.decode('latin-1')\n    if message.isupper():\n      return 'Woah, chill out!'\n    if message.endswith('?'):\n      return 'Sure.'\n    return 'Whatever.'	\N	f	4	1	2014-05-02 23:24:35	2014-05-02 23:24:35	376	bob.py
743	15	bf5959778a8cdfe14e565385	done	python	bob	class Bob:\n  def hey(self, phrase):\n    if phrase:\n      phrase = phrase.strip()\n    if not phrase:\n      return 'Fine. Be that way!'\n    elif phrase.upper() == phrase:\n      return 'Woah, chill out!'\n    elif phrase[-1] == '?':\n      return 'Sure.'\n    else:\n      return 'Whatever.'	\N	f	5	2	2014-05-19 02:35:34	2014-05-19 02:35:34	376	bob.py
745	15	2065b4cb60e3090c982c4634	done	haskell	raindrops	{-# OPTIONS_GHC -Wall -Werror #-}\nmodule Raindrops( convert ) where\n\nconvert :: Integer -> String\nconvert n | null drops = show n\n          | otherwise = drops \n  where\n    drops = concatMap gutter sounds\n    gutter (k, sound) = if n `mod` k == 0 then sound else ""\n    sounds = [(3, "Pling"), (5, "Plang"), (7, "Plong")]	\N	f	1	1	2014-05-20 08:20:38	2014-05-20 08:20:38	378	Raindrops.hs
746	15	96170aae98a773b46111e41f	superseded	ruby	grains	class Grains\n\n  def square(n)\n    return 2**(n-1)\n  end\n\n\n  def total\n    sum = 0\n    1.upto(64) do |x|\n       sum = square(x) +  sum\n    end\n    return sum\n  end\nend	\N	f	1	1	2014-05-03 13:37:55	2014-05-03 13:37:55	379	grains.rb
747	15	75209f723588dcc81936e185	done	ruby	grains	class Grains\n\n  def square(n)\n   return  2**(n-1)\n  end\n\n  def total\n    (1..64).inject do |sum,x|\n      square(x) + sum\n    end\n  end\nend	\N	f	0	2	2014-05-12 07:56:56	2014-05-12 07:56:56	379	grains.rb
748	15	02b27ec66830c58226a5d4b1	superseded	ruby	leap	# Just make it run\n# year = Year.new(2014)\n# year.leap?\n# true\n\nclass Year\n\t\tdef self.leap?(ayear)\n      if ayear%400 == 0\n        return true\n      elsif ayear%100 == 0\n        return false\n      elsif ayear%4 == 0\n        return true\n      else \n        return false\n      end\n\t\tend\nend	\N	f	1	1	2014-04-26 04:17:11	2014-04-26 04:17:11	380	year.rb
749	15	d60347ad9c46dd4f7b682e82	pending	ruby	leap	class Year\n\t\tdef self.leap?(ayear)\n      if ayear%400 == 0\n        return true\n      elsif ayear%100 == 0\n        return false\n      elsif ayear%4 == 0\n        return true\n      else \n        return false\n      end\n\t\tend\nend	\N	f	1	2	2014-04-28 04:03:25	2014-04-28 04:03:25	380	year.rb
750	15	ed67cd437bd61d25d4565417	done	javascript	leap	module.exports = Year;\n\nfunction Year(num) {\n  this.num = num;\n}\n\nYear.prototype.isLeapYear = function () {\n  return evenlyDivisible(this.num, 4) &&\n    (!evenlyDivisible(this.num, 100) || evenlyDivisible(this.num, 400));\n};\n\nfunction evenlyDivisible(dividend, divisor) {\n  return dividend % divisor === 0;\n}	\N	f	4	1	2014-05-13 19:40:56	2014-05-13 19:40:56	381	leap.js
751	15	4526198f3ff8e40e5a19aaa6	superseded	haskell	accumulate	module Accumulate (accumulate) where\n\naccumulate :: (t -> a) -> [t] -> [a]\naccumulate f ns = reverse result\n  where result = accumulate' f ns []\n\naccumulate' :: (t -> a) -> [t] -> [a] -> [a]\naccumulate' f [] acc = acc\naccumulate' f (x:xs) acc = accumulate' f xs (f x:acc)	\N	f	2	1	2014-05-07 22:19:39	2014-05-07 22:19:39	382	Accumulate.hs
752	15	63e6dd083b787bc5db1c90c1	superseded	haskell	accumulate	module Accumulate (accumulate) where\n\naccumulate :: (t -> a) -> [t] -> [a]\naccumulate f = foldr (\\x xs -> f x : xs) []	\N	f	1	2	2014-05-08 03:27:32	2014-05-08 03:27:32	382	Accumulate.hs
753	15	dc2006567b948fb28767961d	done	haskell	accumulate	module Accumulate (accumulate) where\n\naccumulate :: (t -> a) -> [t] -> [a]\naccumulate f [] = []\naccumulate f (x:xs) = f x : accumulate f xs	\N	f	0	3	2014-05-14 17:46:02	2014-05-14 17:46:02	382	Accumulate.hs
754	15	500c23e0e0cd7831eb7c656c	superseded	ruby	scrabble-score	class Scrabble\n\n\t@cadena\n\n\t\n\t$valores={\n\t\t\t"A"=>1, "E"=>1, "I"=>1, "O"=>1, "U"=>1, "L"=>1, "N"=>1, "R"=>1, "S"=>1, "T"=>1,\n\t\t\t"D"=>2, "G"=>2,\n\t\t\t"B"=>3, "C"=>3, "M"=>3, "P"=>3,\n\t\t\t"F"=>4, "H"=>4, "V"=>4, "W"=>4, "Y"=>4,\n\t\t\t"K"=>5,\n\t\t\t"J"=>8, "X"=>8,\n\t\t\t"Q"=>10,"Z"=>10\n\t\t}\n\t\n\tdef initialize(cadena)\n\t\t@cadena=cadena\n\tend\n\n\tdef score()\n\t\treturn getScore()\n\tend\n\n\tdef self.score(cadena)\n\t\treturn Scrabble.new(cadena).score\n\tend\n\n\tdef getScore()\n\n\t\tsuma=0\n\t\tlongitud=0\n\n\t\tif @cadena!=nil\n\t\t\tlongitud = @cadena.length\n\t\tend\n\n\t\tfor i in 0..longitud-1\n\t\t\tif $valores.has_key?(@cadena[i].upcase) \n\t\t\t\tsuma+=$valores[@cadena[i].upcase]\n\t\t\tend\n\n\t\tend\n\n\t\treturn suma\n\t\n\tend\nend	\N	f	3	1	2014-05-06 21:42:19	2014-05-06 21:42:19	383	scrabble.rb
755	15	7e0e814274909a73b0492780	pending	ruby	scrabble-score	#!/usr/bin/env ruby\n# encoding: utf-8\n# scrabble\nclass Scrabble\n  attr_reader :cadena\n  def initialize(cadena)\n    @cadena = cadena.to_s.downcase\n  end\n\n  def self.score(cadena)\n    new(cadena).score\n  end\n\n  def score\n    suma = 0\n    longitud = cadena.length\n    (0..longitud - 1).each do |i|\n      suma += valores.fetch(cadena[i]) { 0 }\n    end\n    suma\n  end\n  # De aqui obtendremos los valores de los caracteres\n  def valores\n    {\n     'a' => 1, 'e' => 1, 'i' => 1, 'o' => 1, 'u' => 1,\n     'l' => 1, 'n' => 1, 'r' => 1, 's' => 1, 't' => 1,\n     'd' => 2, 'g' => 2,\n     'b' => 3, 'c' => 3, 'm' => 3, 'p' => 3,\n     'f' => 4, 'h' => 4, 'v' => 4, 'w' => 4, 'y' => 4,\n     'k' => 5,\n     'j' => 8, 'x' => 8,\n     'q' => 10 , 'z' => 10\n    }\n  end\nend	\N	f	3	2	2014-05-19 05:33:33	2014-05-19 05:33:33	383	scrabble.rb
757	16	5d7f1e2274008c366e23dea3	pending	ruby	scrabble-score	class Scrabble\n  attr_reader :word\n\n  def self.score(word)\n    Scrabble.new(word).score\n  end\n\n  def initialize(word)\n    @word = word\n  end\n\n  def score\n    scrabble_score(@word)\n  end\nend\n\ndef scrabble_score(word)\n  valid_word?(word) ? calculate_sum_score(word) : 0\nend\n\ndef calculate_sum_score(word)\n  letters = word.upcase.chars\n  scores_by_letters(letters)\nend\n\ndef scores_by_letters(letters)\n  letters.reduce(0) do |sum_score, letter|\n    sum_score + value_by_letter(letter)\n  end\nend\n\ndef value_by_letter(letter)\n  case\n  when 'AEIOULNRST'.include?(letter) then 1\n  when 'DG'.include?(letter) then 2\n  when 'BCMP'.include?(letter) then 3\n  when 'FHVWY'.include?(letter) then 4\n  when 'K'.include?(letter) then 5\n  when 'JX'.include?(letter) then 8\n  when 'QZ'.include?(letter) then 10\n  else 0\n  end\nend\n\ndef valid_word?(word)\n  word ? !word.strip.empty? : false\nend\n# go to clojure with his clean functions	\N	f	2	2	2014-03-11 16:52:01	2014-03-11 16:52:01	384	scrabble.rb
758	16	22bb258201f6dff18b56c266	superseded	go	rna-transcription	package strand\n\nimport "strings"\n\n// ToRNA returns the RNA sequence transcribed from dna.  Runes not representing\n// a nucleotide are left unchanged.\nfunc ToRna(dna string) string {\n\treturn strings.Map(trRNA, dna)\n}\n\nfunc trRNA(c rune) rune {\n\tswitch c {\n\tcase 'G':\n\t\treturn 'C'\n\tcase 'C':\n\t\treturn 'G'\n\tcase 'T':\n\t\treturn 'A'\n\tcase 'A':\n\t\treturn 'U'\n\tdefault:\n\t\treturn c\n\t}\n}	\N	f	2	1	2013-11-01 08:11:35	2013-11-01 08:11:35	385	rna_transcription.go
759	16	4e80f505be233aa79632ee87	pending	go	rna-transcription	package strand\n\nimport "strings"\n\n// ToRNA returns the RNA sequence transcribed from dna.  Runes not representing\n// a nucleotide are left unchanged.\nfunc ToRna(input string) string {\n\treturn trRNA.Replace(input)\n}\n\nvar trRNA = strings.NewReplacer(\n\t"G", "C",\n\t"C", "G",\n\t"T", "A",\n\t"A", "U",\n)	\N	f	3	2	2013-12-26 06:29:10	2013-12-26 06:29:10	385	rna_transcription.go
761	16	e712f6f1d1d8734acf82822b	done	ruby	point-mutations	class DNA\n  NUCLEOTIDES = [\n    ADENINE = "A",\n    CYTOSINE = "C",\n    GUANINE = "G",\n    THYMINE = "T",\n  ]\n\n  def initialize(strand)\n    validate_strand(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(strand)\n    differences(strand).size()\n  end\n\n  private\n\n  def validate_strand(strand)\n    unless strand =~ /\\A[#{NUCLEOTIDES.join}]*\\z/\n      raise ArgumentError, "`#{strand}' contains invalid DNA nucleotides"\n    end\n  end\n\n  def differences(other_strand)\n    sliced_strand = @strand.chars.slice(0, other_strand.length)\n\n    sliced_strand.zip(other_strand.chars).select do |a, b|\n      a != b\n    end\n  end\nend	\N	f	3	2	2014-01-21 13:52:42	2014-01-21 13:52:42	386	point-mutations.rb
763	16	7dd48ed9c08819bd5d0a8080	superseded	ruby	bob	class Bob\n  def hey(statement)\n    if not_talking?(statement)\n      return "Fine. Be that way."\n    elsif is_shouting?(statement)\n      return "Woah, chill out!"\n    elsif asking_a_question(statement)\n      return "Sure."\n    else\n      return "Whatever."\n    end\n  end\n\n  private\n\n  def not_talking?(statement)\n    !statement || statement.empty?\n  end\n\n  def is_shouting?(statement)\n    statement == statement.upcase\n  end\n\n  def asking_a_question(statement)\n    statement.end_with?("?")\n  end\nend	\N	f	0	3	2013-10-13 18:09:27	2013-10-13 18:09:27	388	bob.rb
764	16	c3fb04b28f01d73ac264ff8a	superseded	ruby	bob	class Bob\n  def hey(statement)\n    if talking?(statement)\n      return "Fine. Be that way."\n    elsif shouting?(statement)\n      return "Woah, chill out!"\n    elsif question?(statement)\n      return "Sure."\n    else\n      return "Whatever."\n    end\n  end\n\n  private\n\n  def talking?(statement)\n    statement.to_s.empty?\n  end\n\n  def shouting?(statement)\n    statement == statement.upcase\n  end\n\n  def question?(statement)\n    statement.end_with?("?")\n  end\nend	\N	f	3	5	2013-12-04 14:58:38	2013-12-04 14:58:38	388	bob.rb
766	16	847824795376bf729508d849	superseded	ruby	bob	class Bob\n  def hey(statement)\n    if !statement || statement.empty?\n      return "Fine. Be that way."\n    elsif statement == statement.upcase\n      return "Woah, chill out!"\n    elsif statement.end_with?("?")\n      return "Sure."\n    else\n      return "Whatever."\n    end\n  end\nend	\N	f	2	2	2014-01-08 16:48:52	2014-01-08 16:48:52	388	bob.rb
767	16	0dca457c6dc1cf921ada58fc	superseded	ruby	bob	class Bob\n  def hey(statement = "")\n    if !statement || statement.empty?\n      return "Fine. Be that way."\n    elsif statement == statement.upcase\n      return "Woah, chill out!"\n    elsif statement.end_with?("?")\n      return "Sure."\n    else\n      return "Whatever."\n    end\n  end\nend	\N	f	2	1	2014-01-29 12:14:22	2014-01-29 12:14:22	388	bob.rb
768	16	bdf63c6242c96ad6dc098388	superseded	ruby	bob	class Bob\n  def hey(statement)\n    if not_talking?(statement)\n      return "Fine. Be that way."\n    elsif is_shouting?(statement)\n      return "Woah, chill out!"\n    elsif asking_a_question?(statement)\n      return "Sure."\n    else\n      return "Whatever."\n    end\n  end\n\n  private\n\n  def not_talking?(statement)\n    !statement || statement.empty?\n  end\n\n  def is_shouting?(statement)\n    statement == statement.upcase\n  end\n\n  def asking_a_question?(statement)\n    statement.end_with?("?")\n  end\nend	\N	f	4	4	2014-01-30 16:08:16	2014-01-30 16:08:16	388	bob.rb
769	16	7bc0e44091e5d6514dcfa0c0	done	ruby	bob	class Bob\n  def hey(statement)\n    person = Person.new statement\n\n    case \n      when person.not_talking? then "Fine. Be that way."\n      when person.shouting? then "Woah, chill out!"\n      when person.asking? then "Sure."\n      else "Whatever."\n    end\n  end\nend\n\nclass Person\n  def initialize(statement)\n    @statement = statement\n  end\n\n  def not_talking?\n    @statement.to_s.empty?\n  end\n\n  def shouting?\n    @statement == @statement.upcase\n  end\n\n  def asking?\n    @statement.end_with?("?")\n  end\nend	\N	f	4	10	2014-02-21 17:53:04	2014-02-21 17:53:04	388	bob.rb
770	16	43101194d4024f7f800b66a5	superseded	ruby	bob	class Bob\n  def hey(statement)\n    case\n      when statement.not_talking? then "Fine. Be that way."\n      when statement.shouting? then "Woah, chill out!"\n      when statement.asking? then "Sure."\n      else "Whatever."\n    end\n  end\nend\n\nclass String\n  def not_talking?\n    self.empty?\n  end\n\n  def shouting?\n    self == self.upcase\n  end\n\n  def asking?\n    self.end_with?("?")\n  end\nend\n\nclass NilClass\n  def not_talking?\n    self.to_s.empty?\n  end\nend	\N	f	5	9	2014-03-12 19:22:49	2014-03-12 19:22:49	388	bob.rb
771	16	a9960f923b7936c7904e2763	superseded	ruby	bob	class Bob\n  def hey(statement)\n    case\n      when not_talking?(statement) then "Fine. Be that way."\n      when shouting?(statement) then "Woah, chill out!"\n      when asking?(statement) then "Sure."\n      else "Whatever."\n    end\n  end\n\n  private\n\n  def not_talking?(statement)\n    statement.to_s.empty?\n  end\n\n  def shouting?(statement)\n    statement == statement.upcase\n  end\n\n  def asking?(statement)\n    statement.end_with?("?")\n  end\nend	\N	f	8	8	2014-04-05 14:32:24	2014-04-05 14:32:24	388	bob.rb
772	16	cdc94f64fe7f231f3dffb34c	superseded	ruby	bob	class Bob\n  def hey(statement)\n    if talking?(statement)\n      return "Fine. Be that way."\n    elsif shouting?(statement)\n      return "Woah, chill out!"\n    elsif asking?(statement)\n      return "Sure."\n    else\n      return "Whatever."\n    end\n  end\n\n  private\n\n  def talking?(statement)\n    statement.to_s.empty?\n  end\n\n  def shouting?(statement)\n    statement == statement.upcase\n  end\n\n  def asking?(statement)\n    statement.end_with?("?")\n  end\nend	\N	f	4	6	2014-04-30 02:15:27	2014-04-30 02:15:27	388	bob.rb
773	16	2fa321a96f08ffa06c4233dc	superseded	javascript	word-count	"use strict";\n\nfunction Words(input) {\n  function normalized() {\n    return input.toLowerCase().match(/\\w+/g);\n  };\n\n  this.count = function() {\n    var words = normalized();\n    var output = {};\n\n    for(var i = 0; i < words.length; i++) {\n      var current_word = words[i];\n\n      if (!output[current_word]) {\n        output[current_word] = 1;\n      } else {\n        output[current_word] += 1;\n      }\n    }\n\n    return output;\n  }();\n};\n\nmodule.exports = Words;	\N	f	3	2	2013-10-21 05:48:07	2013-10-21 05:48:07	389	word-count.js
774	16	260c6b9fc33ebb597ac3e0e5	superseded	javascript	word-count	"use strict";\n\nfunction Words(input) {\n  function tokenizeWords() {\n    return input.toLowerCase().match(/\\w+/g);\n  };\n\n  this.count = function() {\n    var words = tokenizeWords();\n    var countsOfWord = {};\n\n    words.forEach(function(currentWord) {\n      if (!countsOfWord[currentWord]) {\n        countsOfWord[currentWord] = 1;\n      } else {\n        countsOfWord[currentWord] += 1;\n      }\n    });\n\n    return countsOfWord;\n  }();\n};\n\nmodule.exports = Words;	\N	f	0	3	2013-12-11 14:54:00	2013-12-11 14:54:00	389	word-count.js
775	16	90a626f7c06289d131e6748a	done	javascript	word-count	"use strict";\n\nfunction Words(input) {\n  function words() {\n    return input.toLowerCase().match(/\\w+/g);\n  };\n\n  this.count = function() {\n    var wordCounts = {};\n\n    words().forEach(function(word) {\n      if (!wordCounts[word]) {\n        wordCounts[word] = 1;\n      } else {\n        wordCounts[word] += 1;\n      }\n    });\n\n    return wordCounts;\n  }();\n};\n\nmodule.exports = Words;	\N	f	0	5	2014-01-08 22:43:02	2014-01-08 22:43:02	389	word-count.js
776	16	637e64e93a65fa8f628194aa	superseded	javascript	word-count	"use strict";\n\nfunction Words(input) {\n  function words() {\n    return input.toLowerCase().match(/\\w+/g);\n  };\n\n  this.count = function() {\n    var wordCounts = {};\n\n    words().forEach(function(currentWord) {\n      if (!wordCounts[currentWord]) {\n        wordCounts[currentWord] = 1;\n      } else {\n        wordCounts[currentWord] += 1;\n      }\n    });\n\n    return wordCounts;\n  }();\n};\n\nmodule.exports = Words;	\N	f	3	4	2014-03-15 10:35:30	2014-03-15 10:35:30	389	word-count.js
777	16	6d106c31ceb4c23ba44b1e78	superseded	javascript	word-count	"use strict";\n\nfunction Words(input) {\n  function normalized() {\n    return input.toLowerCase().match(/\\w+/g);\n  };\n\n  this.count = function() {\n    var words = normalized();\n    var output = {};\n\n    for(var i = 0; i < words.length; i++) {\n      var current_word = words[i];\n\n      if (!output[current_word]) {\n        output[current_word] = 0;\n      }\n\n      output[current_word] += 1;\n    }\n\n    return output;\n  }();\n};\n\nmodule.exports = Words;	\N	f	5	1	2014-05-21 07:39:15	2014-05-21 07:39:15	389	word-count.js
778	16	d6b9e3cca0445645ab40b35b	done	ruby	phone-number	class Phone\n  attr_reader :number\n  \n  def initialize(number)\n    @number = clean number\n  end\n  \n  def area_code\n    @number[0,3]\n  end\n  \n  def to_s\n    sprintf "(%s) %s-%s", area_code, @number[3,3], @number[6,4]\n  end\n  \n  private\n  \n  def clean(num)\n    digits = num.scan(/\\d/).join\n    if ((digits.length == 11) && (digits[0] == '1'))\n      digits[1,10]\n    elsif (digits.length == 10)\n      digits\n    else\n      ([0] * 10).join\n    end\n  end\nend	\N	f	1	2	2013-11-02 09:22:41	2013-11-02 09:22:41	390	phone-number.rb
780	16	36c41b3f6932b0f47406d399	done	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    words = @phrase.scan(/\\w+/).map!{|k| k.downcase}\n    words.inject(Hash.new(0)) {|h,k| h[k]+=1; h}\n  end\nend	\N	f	0	1	2013-11-22 17:45:37	2013-11-22 17:45:37	391	word-count.rb
781	16	e95f7b23b06817a7d240d0ce	done	ruby	gigasecond	class Gigasecond\n  BILLION_SECONDS_IN_DAYS = 11574\n\n  def initialize(birth_date)\n    @birth_date = birth_date\n  end\n\n  def date\n    @birth_date + BILLION_SECONDS_IN_DAYS\n  end\nend	\N	f	3	1	2014-01-12 23:25:22	2014-01-12 23:25:22	392	gigasecond.rb
782	16	9194fda300b64b413ba8bcd4	done	haskell	largest-series-product	module Series (digits, slices, largestProduct) where\n\nimport Data.List\nimport Data.Maybe\n\ndigits :: String -> [Int]\ndigits = map $ fromJust . (`elemIndex` ['0'..'9'])\n\nslices :: Int -> String -> [[Int]]\nslices n = filter ((== n) . length) . map (take n) . tails . digits\n\nlargestProduct :: Int -> String -> Int\nlargestProduct n s = let products = map product $ slices n s in\n    if null products then 1 else maximum products	\N	f	1	1	2013-11-03 07:34:19	2013-11-03 07:34:19	393	largest-series-product.hs
783	16	dadaccbd2ba9e2fbe4667355	pending	javascript	matrix	var Matrix = function(matrixStr) {\n  this.rows = matrixStr.split('\\n').map(function(el) {\n    return el.split(' ').map(function(el) {\n      return +el;\n    });\n  });\n\n  this.columns = [];\n\n  var col = 0;\n\n  while ( col < this.rows[0].length ) {\n    var colArr = [];\n\n    for ( var i = 0; i < this.rows.length; i++ ) {\n      colArr.push( this.rows[i][col] );\n    }\n\n    this.columns.push( colArr );\n    col++;\n  }\n};	\N	f	2	1	2014-01-29 13:05:01	2014-01-29 13:05:01	394	matrix_test.js
784	16	6427b876ee96c3b305e05a7b	superseded	javascript	bob	module.exports = function() {\n\n  var responses = [\n    [/^ *$/,           'Fine, be that way!'],\n    [/^[A-Z0-9 \\W]+$/, 'Woah, chill out!'],\n    [/\\?$/,             'Sure.'],\n    [/.*/,               'Whatever.'],\n  ]\n\n  this.hey = function(phrase) {\n    for (var i in responses) {\n      var regex  = responses[i][0],\n          answer = responses[i][1]\n      if (regex.test(phrase))\n        return answer\n    }\n  }\n}	\N	f	3	1	2013-11-05 14:48:46	2013-11-05 14:48:46	395	bob.js
785	16	59c31cc5fb9fb4d25354c613	done	javascript	bob	module.exports = function() {\n\n  function answerYelling(phrase) {\n    if ((/^[A-Z0-9 \\W]+$/).test(phrase))\n      return 'Woah, chill out!'\n  }\n\n  function answerQuestion(phrase) {\n    if ('?' == phrase[phrase.length-1])\n      return 'Sure.'\n  }\n\n  function answerSilence(phrase) {\n    if ((/^ *$/).test(phrase))\n      return 'Fine, be that way!'\n  }\n\n  function defaultAnswer() {\n    return 'Whatever.'\n  }\n\n  this.hey = function(phrase) {\n    return answerYelling(phrase)\n        || answerQuestion(phrase)\n        || answerSilence(phrase)\n        || defaultAnswer()\n  }\n}	\N	f	0	2	2013-11-20 01:11:56	2013-11-20 01:11:56	395	bob.js
786	16	7f0884b3ab09401d2a309669	done	haskell	etl	module ETL (transform) where\n\nimport Data.Char (toLower)\nimport qualified Data.Map as M\n\ntransform :: M.Map Int [String] -> M.Map String Int\ntransform m =\n    M.fromList (concat [[(map toLower s,n) | s <- ss] | (n,ss) <- M.toList m])\n     	\N	f	3	1	2014-01-07 01:12:48	2014-01-07 01:12:48	396	etl.hs
787	16	94d026f9e12a7ccee17a157e	superseded	scala	hamming	object Hamming {\n  def compute(a: String, b: String) = {\n    a zip b count { case (x, y) => x != y }\n  }\n}	\N	f	3	1	2014-02-18 23:29:41	2014-02-18 23:29:41	397	hamming.scala
788	16	166c5753addf1ea15f56b354	done	scala	hamming	object Hamming {\n  def compute(a: String, b: String) = {\n    a.zip(b).count { pair => pair._1 != pair._2 }\n  }\n}	\N	f	0	2	2014-04-18 23:39:06	2014-04-18 23:39:06	397	hamming.scala
789	16	06185ad0728d06e64c8320af	done	haskell	bank-account	module BankAccount ( BankAccount\n                   , openAccount, closeAccount\n                   , getBalance, incrementBalance) where\nimport Control.Concurrent.STM\nimport Control.Applicative\n\ntype BankAccount = TVar (Maybe Int)\n\nopenAccount :: IO BankAccount\nopenAccount = newTVarIO (Just 0)\n\ncloseAccount :: BankAccount -> IO ()\ncloseAccount acct = atomically $ writeTVar acct Nothing\n\ngetBalance :: BankAccount -> IO (Maybe Int)\ngetBalance = readTVarIO \n\nincrementBalance :: BankAccount -> Int -> IO (Maybe Int)\nincrementBalance acct amt = atomically $ do\n    bal <- fmap (+amt) <$> readTVar acct \n    writeTVar acct bal\n    return bal	\N	f	0	3	2013-10-22 13:25:32	2013-10-22 13:25:32	398	BankAccount.hs
790	16	4bafd0bcccd113585473ceb5	superseded	haskell	bank-account	module BankAccount ( BankAccount\n                   , openAccount, closeAccount\n                   , getBalance, incrementBalance) where\nimport Control.Concurrent.MVar\nimport Control.Applicative\n\ntype BankAccount = MVar (Maybe Int)\n\nopenAccount :: IO BankAccount\nopenAccount = newMVar (Just 0)\n\ncloseAccount :: BankAccount -> IO ()\ncloseAccount acct = do\n\tswapMVar acct Nothing\n\treturn ()\n\ngetBalance :: BankAccount -> IO (Maybe Int)\ngetBalance = readMVar \n\nincrementBalance :: BankAccount -> Int -> IO (Maybe Int)\nincrementBalance acct amt = do\n\tbal <- fmap (+amt) <$> readMVar acct \n\tswapMVar acct bal\n\treturn bal	\N	f	1	2	2013-12-31 03:48:19	2013-12-31 03:48:19	398	bankaccount.hs
791	16	2a175e15f93c94c53853c3e3	superseded	haskell	bank-account	module BankAccount ( BankAccount\n                   , openAccount, closeAccount\n                   , getBalance, incrementBalance) where\nimport Control.Concurrent.STM\nimport Control.Applicative\n\ntype BankAccount = TVar (Maybe Int)\n\nopenAccount :: IO BankAccount\nopenAccount = newTVarIO (Just 0)\n\ncloseAccount :: BankAccount -> IO ()\ncloseAccount acct = atomically $ writeTVar acct Nothing \n\ngetBalance :: BankAccount -> IO (Maybe Int)\ngetBalance = readTVarIO \n\nincrementBalance :: BankAccount -> Int -> IO (Maybe Int)\nincrementBalance acct amt = atomically $ do\n  bal <- fmap (amt +) <$> readTVar acct\n  writeTVar acct bal\n  return bal	\N	f	3	1	2014-02-11 17:18:14	2014-02-11 17:18:14	398	bank-account.hs
792	16	2c6267abb92833f9a07d47e6	done	python	bob	# -*- coding: utf-8 -*-\r\n\r\nclass Bob:\r\n\r\n    @staticmethod\r\n    def hey(message: str) -> str:\r\n        msg = message.strip()\r\n        if not msg:\r\n            return "Fine. Be that way!"\r\n        elif msg.isupper():\r\n            return "Woah, chill out!"\r\n        elif msg.endswith('?'):\r\n            return "Sure."\r\n        else:\r\n            return "Whatever."\r	\N	f	3	4	2013-10-18 13:15:13	2013-10-18 13:15:13	399	bob.py
793	16	90a0f4b7be301374dee693e2	superseded	python	bob	# -*- coding: utf-8 -*-\r\n\r\nclass Bob:\r\n\r\n    def hey(self, s: str) -> str:\r\n        if not s.strip():\r\n            return "Fine. Be that way!"\r\n        elif s.isupper():\r\n            return "Woah, chill out!"\r\n        elif s.endswith('?'):\r\n            return "Sure."\r\n        else:\r\n            return "Whatever."\r	\N	f	3	2	2013-11-05 16:29:18	2013-11-05 16:29:18	399	bob.py
796	16	ef03db917455eda9552565fb	done	ruby	hamming	class Hamming\n  def self.compute(first, second)\n\n    (0...minimum_length([first, second])).reduce(0) do |sum, i|\n      if first[i] != second[i]\n        sum + 1\n      else\n        sum\n      end\n    end\n  end\n\n  private\n  def self.minimum_length(strings)\n    strings.map! { |string| string.length }.min\n  end\nend	\N	f	2	1	2013-11-24 20:24:39	2013-11-24 20:24:39	400	hamming.rb
797	16	6efb60813825bf4e9c02320d	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    if year % 4 == 0\n      if year % 100 == 0 && year % 400 != 0\n        false\n      else\n        true\n      end\n    else\n      false\n    end\n  end\nend	\N	f	0	1	2013-11-10 05:04:34	2013-11-10 05:04:34	401	year.rb
798	16	7ea26c96cab88e8421813447	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    if year % 100 == 0 && year % 400 != 0\n      false\n    elsif year % 4 == 0\n      true\n    else\n      false\n    end\n  end\nend	\N	f	2	2	2014-02-28 06:28:44	2014-02-28 06:28:44	401	year.rb
799	16	6a0f2ab424bcf2bdf2ecf42f	hibernating	ruby	leap	class Year\n  def self.leap?(year)\n    if year % 100 == 0 && year % 400 != 0\n      false\n    elsif year % 4 == 0\n      true\n    end\n  end\nend	\N	f	4	3	2014-04-13 08:21:03	2014-04-13 08:21:03	401	year.rb
800	16	638bafdd03b14fa400dfd215	done	haskell	prime-factors	module PrimeFactors (primeFactors) where\n\nisFactorOf :: Int -> Int -> Bool\nisFactorOf n x = \n\tn `mod` x == 0\n\nprimeFactors :: Int -> [Int]\nprimeFactors 1 = []\nprimeFactors n =\n\tlet factor = head $ filter (isFactorOf n) [2..n]\n\tin [factor] ++ primeFactors (div n factor)\n\n\t	\N	f	3	1	2013-12-31 09:30:31	2013-12-31 09:30:31	402	prime-factors.hs
801	17	2c6453bbc58ad919c07aaee3	superseded	go	word-count	package wc\n\nimport (\n\t"strings"\n\t"unicode"\n)\n\ntype Histogram map[string]int\n\nfunc WordCount(input string) (his Histogram) {\n\this = make(Histogram)\n\tfor _, s := range strings.Split(input, " ") {\n\t\ts = canonicalizeWord(s)\n\t\tif (len(s) > 0) {\n\t\t\this[s]++\n\t\t}\n\t}\n\treturn his\n}\n\nfunc canonicalizeWord(word string) string {\n\tword = strings.ToLower(word)\n\tchars := []rune(word)\n\tlastIndex := len(word)\n\tfor i, c := range chars {\n\t\tif !unicode.IsLetter(c) && !unicode.IsNumber(c) {\n\t\t\tlastIndex = i\n\t\t\tbreak\n\t\t}\n\t}\n\treturn string(chars[:lastIndex])\n}	\N	f	3	1	2014-03-09 19:19:38	2014-03-09 19:19:38	403	histogram.go
802	17	bc6a7cde4380ffd034a5622e	done	go	word-count	package wc\n\nimport (\n\t"strings"\n\t"regexp"\n)\n\ntype Histogram map[string]int\n\nfunc WordCount(input string) (his Histogram) {\n\this = make(Histogram)\n\tre := regexp.MustCompile(`\\w+`)\n\tfor _, s := range re.FindAllString(input, -1) {\n\t\this[strings.ToLower(s)]++\n\t}\n\treturn his\n}	\N	f	1	2	2014-04-20 23:08:25	2014-04-20 23:08:25	403	histogram.go
804	17	4de7bec596e8977e510b0c37	superseded	haskell	bob	module Bob (responseFor) where\nimport Text.Regex.Posix\n\nresponseFor input\n  | isAllCaps input = "Woah, chill out!"\n  | isQuestion lastline = "Sure."\n  | isBlank lastline = "Fine. Be that way."\n  | otherwise = "Whatever."\n  where lastline = last $ lines input\n\nisAllCaps phrase = (length $ filter (`elem` ['A'..'Z']) phrase) > 0 &&\n                   (length $ filter (`elem` ['a'..'z']) phrase) == 0\n\nisQuestion phrase = last phrase == '?'\n\nisBlank phrase = phrase =~ "^[ \\n\\t\\r]*$" :: Bool	\N	f	4	1	2014-02-21 21:01:04	2014-02-21 21:01:04	405	bob.hs
805	17	147f052aab902b9127bd6d1e	superseded	haskell	bob	module Bob (responseFor) where\n\nresponseFor input\n  | isAllCaps input = "Woah, chill out!"\n  | isBlank lastline = "Fine. Be that way."\n  | isQuestion lastline = "Sure."\n  | otherwise = "Whatever."\n  where lastline = safeLast $ lines input\n\nsafeLast [] = ""\nsafeLast list = last list\n\nisAllCaps phrase = (length $ filter (`elem` ['A'..'Z']) phrase) > 0 &&\n                   (length $ filter (`elem` ['a'..'z']) phrase) == 0\n\nisQuestion phrase = last phrase == '?'\n\nhasOnlyChars chars s = all (`elem` chars) s\n\nisBlank = hasOnlyChars "\\n\\r \\t\\v\\xA0\\x2002"	\N	f	4	4	2014-03-02 00:51:42	2014-03-02 00:51:42	405	bob.hs
806	17	498f03634020b45f75088480	superseded	haskell	bob	module Bob (responseFor) where\nimport Text.Regex.Posix\n\nresponseFor input\n  | isAllCaps input = "Woah, chill out!"\n  | isQuestion lastline = "Sure."\n  | isBlank lastline = "Fine. Be that way."\n  | otherwise = "Whatever."\n  where lastline = safeLast $ lines input\n\nsafeLast [] = ""\nsafeLast list = last list\n\nisAllCaps phrase = (length $ filter (`elem` ['A'..'Z']) phrase) > 0 &&\n                   (length $ filter (`elem` ['a'..'z']) phrase) == 0\n\nisQuestion phrase = last phrase == '?'\n\nisBlank phrase = phrase =~ "^[ \\n\\t\\r]*$" :: Bool	\N	f	0	2	2014-03-04 04:01:44	2014-03-04 04:01:44	405	bob.hs
807	17	55c442d21e6ae0d291cb6754	superseded	haskell	bob	module Bob (responseFor) where\nimport Text.Regex.Posix\n\nresponseFor input\n  | isAllCaps input = "Woah, chill out!"\n  | isBlank lastline = "Fine. Be that way."\n  | isQuestion lastline = "Sure."\n  | otherwise = "Whatever."\n  where lastline = safeLast $ lines input\n\nsafeLast [] = ""\nsafeLast list = last list\n\nisAllCaps phrase = (length $ filter (`elem` ['A'..'Z']) phrase) > 0 &&\n                   (length $ filter (`elem` ['a'..'z']) phrase) == 0\n\nisQuestion phrase = last phrase == '?'\n\nisBlank phrase = phrase =~ "^[ \\n\\t\\r]*$" :: Bool	\N	f	4	3	2014-03-21 09:57:23	2014-03-21 09:57:23	405	bob.hs
810	17	ba87f149dce6a378660d8654	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isUpper, isLower)\n\nresponseFor :: [Char] -> [Char]\nresponseFor input\n  | isAllCaps input = "Woah, chill out!"\n  | isBlank input = "Fine. Be that way."\n  | isQuestion input = "Sure."\n  | otherwise = "Whatever."\n\nisAllCaps :: [Char] -> Bool\nisAllCaps phrase = (any isUpper phrase) && (not $ any isLower phrase)\n\nisQuestion :: [Char] -> Bool\nisQuestion phrase = last phrase == '?'\n\nhasOnlyChars :: Eq a => [a] -> [a] -> Bool\nhasOnlyChars chars = all (`elem` chars)\n\nisBlank :: [Char] -> Bool\nisBlank = hasOnlyChars "\\n\\r \\t\\v\\xA0\\x2002"	\N	f	3	7	2014-04-11 01:40:30	2014-04-11 01:40:30	405	bob.hs
811	17	ecadd69ed27e73cc868b7dda	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isUpper, isLower)\nimport Data.List (isSuffixOf)\n\nresponseFor :: [Char] -> [Char]\nresponseFor input\n  | isAllCaps input = "Woah, chill out!"\n  | isBlank input = "Fine. Be that way."\n  | isQuestion input = "Sure."\n  | otherwise = "Whatever."\n\nisAllCaps :: [Char] -> Bool\nisAllCaps phrase = (any isUpper phrase) && (not $ any isLower phrase)\n\nisQuestion :: [Char] -> Bool\nisQuestion phrase = isSuffixOf "?" phrase\n\nhasOnlyChars :: Eq a => [a] -> [a] -> Bool\nhasOnlyChars chars = all (`elem` chars)\n\nisBlank :: [Char] -> Bool\nisBlank = hasOnlyChars "\\n\\r \\t\\v\\xA0\\x2002"	\N	f	2	8	2014-04-16 20:05:44	2014-04-16 20:05:44	405	bob.hs
812	17	7348a222bd03bfd59ca90869	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isUpper, isLower)\nimport Data.List (isSuffixOf)\n\ndata Action = Question\n            | Shout\n            | Silence\n            | Other\n\nparse :: String -> Action\nparse "" = Silence\nparse s | isBlank s    = Silence\n        | isAllCaps s  = Shout\n        | isQuestion s = Question\n        | otherwise    = Other\n\nresponse :: Action -> String\nresponse Question = "Sure."\nresponse Shout    = "Woah, chill out!"\nresponse Silence  = "Fine. Be that way."\nresponse Other    = "Whatever."\n\nresponseFor :: [Char] -> [Char]\nresponseFor = response . parse\n\nisAllCaps :: [Char] -> Bool\nisAllCaps phrase = (any isUpper phrase) && (not $ any isLower phrase)\n\nisQuestion :: [Char] -> Bool\nisQuestion phrase = isSuffixOf "?" phrase\n\nisBlank :: [Char] -> Bool\nisBlank = hasOnlyChars "\\n\\r \\t\\v\\xA0\\x2002"\n\nhasOnlyChars :: Eq a => [a] -> [a] -> Bool\nhasOnlyChars chars = all (`elem` chars)	\N	f	6	9	2014-04-16 22:31:29	2014-04-16 22:31:29	405	bob.hs
813	17	9416b4e68f93d5880426fab7	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isUpper, isLower)\nimport Data.List (isSuffixOf)\n\ndata Action = Question\n            | Shout\n            | Silence\n            | Other\n\nparse :: String -> Action\nparse "" = Silence\nparse s | isBlank s    = Silence\n        | isAllCaps s  = Shout\n        | isQuestion s = Question\n        | otherwise    = Other\n\nresponse :: Action -> String\nresponse Question = "Sure."\nresponse Shout    = "Woah, chill out!"\nresponse Silence  = "Fine. Be that way."\nresponse Other    = "Whatever."\n\nresponseFor :: String -> String\nresponseFor = response . parse\n\nisAllCaps :: String -> Bool\nisAllCaps phrase = (any isUpper phrase) && (not $ any isLower phrase)\n\nisQuestion :: String -> Bool\nisQuestion phrase = isSuffixOf "?" phrase\n\nisBlank :: String -> Bool\nisBlank = hasOnlyChars "\\n\\r \\t\\v\\xA0\\x2002"\n\nhasOnlyChars :: Eq a => [a] -> [a] -> Bool\nhasOnlyChars chars = all (`elem` chars)	\N	f	4	10	2014-04-27 06:54:32	2014-04-27 06:54:32	405	bob.hs
814	17	09f01c53ecac9e48b27b1052	done	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isUpper, isLower, isSpace)\nimport Data.List (isSuffixOf)\n\ndata Action = Question\n            | Shout\n            | Silence\n            | Other\n\nparse :: String -> Action\nparse "" = Silence\nparse s | isBlank s    = Silence\n        | isAllCaps s  = Shout\n        | isQuestion s = Question\n        | otherwise    = Other\n\nresponse :: Action -> String\nresponse Question = "Sure."\nresponse Shout    = "Woah, chill out!"\nresponse Silence  = "Fine. Be that way."\nresponse Other    = "Whatever."\n\nresponseFor :: String -> String\nresponseFor = response . parse\n\nisAllCaps :: String -> Bool\nisAllCaps phrase = (any isUpper phrase) && (not $ any isLower phrase)\n\nisQuestion :: String -> Bool\nisQuestion phrase = isSuffixOf "?" phrase\n\nisBlank :: String -> Bool\nisBlank = all isSpace	\N	f	0	11	2014-05-07 14:57:30	2014-05-07 14:57:30	405	bob.hs
815	17	0b91152b676baaa7da8e19d5	done	haskell	space-age	module SpaceAge\n    ( Planet(..)\n    , ageOn\n    ) where\n\ndata Planet = Earth\n            | Mercury\n            | Venus\n            | Mars\n            | Jupiter\n            | Saturn\n            | Uranus\n            | Neptune\n    deriving (Enum, Eq, Show)\n\ntype Seconds = Float\ntype Age     = Float\n\norbitalPeriod :: Planet -> Seconds\norbitalPeriod Earth   = 31557600\norbitalPeriod Mercury = orbitalPeriod Earth * 0.2408467\norbitalPeriod Venus   = orbitalPeriod Earth * 0.61519726\norbitalPeriod Mars    = orbitalPeriod Earth * 1.8808158\norbitalPeriod Jupiter = orbitalPeriod Earth * 11.862615\norbitalPeriod Saturn  = orbitalPeriod Earth * 29.447498\norbitalPeriod Uranus  = orbitalPeriod Earth * 84.016846\norbitalPeriod Neptune = orbitalPeriod Earth * 164.79132\n\nageOn :: Planet -> Seconds -> Age\nageOn planet seconds = seconds / orbitalPeriod planet	\N	f	3	1	2014-04-05 14:49:48	2014-04-05 14:49:48	406	space-age.hs
816	17	1b242e99b167199c61d97a9c	superseded	ruby	hamming	class Hamming\n  def self.compute(a,b)\n    arr_a = a.split("")\n    arr_b = b.split("")\n    arr_a, arr_b = arr_b, arr_a if arr_a.size < arr_b.size\n    arr_a = arr_a[0, arr_b.size]\n    arr_a.zip(arr_b).reduce(0) { |memo, (ea,eb)|  memo + (ea == eb ? 0 : 1) }\n  end\nend	\N	f	0	1	2014-03-05 22:25:07	2014-03-05 22:25:07	407	hamming.rb
817	17	e1058342b13f7c584fc80457	hibernating	ruby	hamming	class Hamming\n  def self.prepare(str)\n    str.split("")\n  end\n\n  def self.compute(str_a, str_b)\n    array_a = prepare(str_a)\n    array_b = prepare(str_b)\n    array_a, array_b = array_b, array_a if array_a.size < array_b.size\n    array_a = array_a.take(array_b.size)\n    array_a.zip(array_b).reduce(0) do |memo, (ea,eb)|\n      memo + (ea == eb ? 0 : 1)\n    end\n  end\nend	\N	f	5	2	2014-03-19 23:47:59	2014-03-19 23:47:59	407	hamming.rb
820	17	987e3b817dbf831ca2f97e08	superseded	clojure	binary	(ns binary)\n\n(defn to-decimal [s]\n  (reduce (fn [accumulator digit]\n            (+ (* 2 accumulator)\n               (if (= \\1 digit) 1 0)))\n          0\n          s))	\N	f	3	1	2014-03-09 13:46:58	2014-03-09 13:46:58	409	binary.clj
821	17	4a66e49921e54646a764d4fe	done	clojure	binary	(ns binary)\n\n(defn to-decimal [s]\n  (letfn [(consume-digit [accumulator digit]\n            (+ (* 2 accumulator)\n               (if (= \\1 digit) 1 0)))]\n    (reduce consume-digit 0 s)))	\N	f	0	2	2014-03-24 09:37:04	2014-03-24 09:37:04	409	binary.clj
823	17	c6e80f084e51ee4c5f1897ec	superseded	ruby	phone-number	class PhoneNumber\n  attr_reader :area_code, :central_office_code, :station_code\n\n  def initialize(value)\n    parse(value)\n  end\n\n  def number\n    [area_code, central_office_code, station_code].join\n  end\n\n  def to_s\n    "(#{area_code}) #{central_office_code}-#{station_code}"\n  end\n\n  private\n\n  def parse(value)\n    @numbers = extract_digits(value)\n\n    remove_country_code if has_country_code?\n    bad_number unless has_correct_size?\n\n    extract_area_code\n    extract_central_office_code\n    extract_station_code\n  end\n\n  def extract_digits(value)\n    value.gsub(/\\D/, "").chars\n  end\n\n  CORRECT_SIZE = 10\n\n  def has_correct_size?\n    @numbers.size == CORRECT_SIZE\n  end\n\n  def has_country_code?\n    @numbers.size == CORRECT_SIZE + 1 and @numbers.first == "1"\n  end\n\n  def remove_country_code\n    @numbers.shift\n  end\n\n  def bad_number\n    @numbers = ["0"] * 10\n  end\n\n  def extract_area_code\n    @area_code = @numbers.shift(3).join\n  end\n\n  def extract_central_office_code\n    @central_office_code = @numbers.shift(3).join\n  end\n\n  def extract_station_code\n    @station_code = @numbers.join\n  end\nend	\N	f	2	2	2014-04-14 04:31:18	2014-04-14 04:31:18	410	phone-number.rb
824	17	1eca7d187a4cae2ffaf03bc1	done	ruby	phone-number	class PhoneNumber\n  attr_reader :area_code, :central_office_code, :station_code\n\n  def initialize(value)\n    parse(value)\n  end\n\n  def number\n    [area_code, central_office_code, station_code].join\n  end\n\n  def to_s\n    "(#{area_code}) #{central_office_code}-#{station_code}"\n  end\n\n  private\n\n  def parse(value)\n    @numbers = extract_digits(value)\n\n    remove_country_code\n    bad_number unless has_correct_size?\n\n    extract_area_code\n    extract_central_office_code\n    extract_station_code\n  end\n\n  def extract_digits(value)\n    value.gsub(/\\D/, "").chars\n  end\n\n  CORRECT_SIZE = 10\n\n  def has_correct_size?\n    @numbers.size == CORRECT_SIZE\n  end\n\n  def remove_country_code\n    @numbers.shift if @numbers.size > CORRECT_SIZE and @numbers.first == "1"\n  end\n\n  def bad_number\n    @numbers = ["0"] * 10\n  end\n\n  def extract_area_code\n    @area_code = @numbers.shift(3).join\n  end\n\n  def extract_central_office_code\n    @central_office_code = @numbers.shift(3).join\n  end\n\n  def extract_station_code\n    @station_code = @numbers.join\n  end\nend	\N	f	0	3	2014-04-18 08:12:23	2014-04-18 08:12:23	410	phone-number.rb
825	17	25fa7ed9a0a270eb8a55f610	superseded	scala	hamming	package object Hamming {\n  def compute(a: String, b: String): Int =\n    (0 until a.length.min(b.length)).foldLeft(0)(\n      (acc, i) => if (a(i) != b(i)) 1 + acc else acc\n    )\n}	\N	f	3	1	2014-03-14 21:05:58	2014-03-14 21:05:58	411	hamming.scala
826	17	c76c55b886633c7b8d55b629	done	scala	hamming	package object Hamming {\n  def compute(a: String, b: String): Int =\n    (0 until a.length.min(b.length)).count(i => a(i) != b(i))\n}	\N	f	3	2	2014-04-11 01:30:28	2014-04-11 01:30:28	411	hamming.scala
827	17	6262b84f6b784dbfcf906da6	pending	javascript	bob	var Bob = function() {};\n\nBob.prototype.hey = function() {\n  return 'Whatever.';\n}	\N	f	0	1	2014-04-13 18:41:40	2014-04-13 18:41:40	412	bob_test.js
828	17	08103aaa1492c06acb8cfdff	superseded	ruby	bob	class Bob \n\n  def hey (greeting) \n    if is_silence greeting\n      "Fine. Be that way."\t\n    elsif is_question greeting\n      "Sure."\n    elsif is_loud greeting\n      "Woah, chill out!"\n    else\n      "Whatever."\n    end\n  end\n\n  def is_silence (greeting)\n    if greeting.nil? or greeting.empty?\n      true\n    else\n      false\n    end\n  end\n\n  def is_question (greeting) \n    if greeting.end_with?('?')\n      true\n    else\n      false\n    end\n  end\n\n  def is_loud (greeting)\n    if greeting.upcase!.nil?\n      return true\n    end\n\n    return false\n  end\nend	\N	f	5	3	2014-03-12 17:21:42	2014-03-12 17:21:42	413	bob.rb
829	17	cb66b6c1c4bd2c8b9aac716f	superseded	ruby	bob	class Bob \n\n\tdef hey (greeting)\n\t\t\n\t\tresponse = "Whatever."\n\n\t\tif ( greeting == nil or greeting.strip == '')\n\t\t\tresponse = "Fine. Be that way."\t\n\t\telsif ( greeting.end_with?('?') )\n\t\t\tresponse = "Sure."\n\t\telsif ( greeting.upcase! == nil )\n\t\t\tresponse = "Woah, chill out!"\n\t\tend\n\t\t\n\t\tresponse\n\tend\n\nend	\N	f	4	1	2014-03-18 15:33:22	2014-03-18 15:33:22	413	bob.rb
830	17	4a69d785d86f31e2c04aa149	superseded	ruby	bob	class Bob \n\n  def hey (greeting)\n    \n    if greeting == nil or greeting.strip == ''\n      "Fine. Be that way."\t\n    elsif greeting.end_with?('?')\n      "Sure."\n    elsif greeting.upcase! == nil\n      "Woah, chill out!"\n    else\n      "Whatever."\n    end\n  \n  end\n\nend	\N	f	11	2	2014-04-10 00:43:25	2014-04-10 00:43:25	413	bob.rb
831	17	419f2656ba77ebdb2dddb641	superseded	ruby	bob	class Bob \n\n  def hey (greeting) \n    if silent greeting\n      "Fine. Be that way."\t\n    elsif question greeting\n      "Sure."\n    elsif loud greeting\n      "Woah, chill out!"\n    else\n      "Whatever."\n    end\n  end\n\n  def silent (greeting)\n    greeting.nil? || greeting.empty?\n  end\n\n  def question (greeting) \n    greeting.end_with?('?')\n  end\n\n  def loud (greeting)\n    greeting.upcase!.nil?\n  end\nend	\N	f	1	4	2014-04-10 06:18:31	2014-04-10 06:18:31	413	bob.rb
832	17	4306c86801387b74411fb2d2	done	ruby	bob	class Bob \n\n  def hey(greeting) \n    if silent?(greeting)\n      "Fine. Be that way."\t\n    elsif question?(greeting)\n      "Sure."\n    elsif loud?(greeting)\n      "Woah, chill out!"\n    else\n      "Whatever."\n    end\n  end\n\n  private \n\n    def silent?(greeting)\n      greeting.nil? || greeting.empty?\n    end\n\n    def question?(greeting) \n      greeting.end_with?('?')\n    end\n\n    def loud?(greeting)\n      greeting == greeting.upcase\n    end\nend	\N	f	9	8	2014-04-15 08:19:59	2014-04-15 08:19:59	413	bob.rb
834	17	2e706756694af71dbff9f573	superseded	ruby	bob	class Bob \n\n  def hey (greeting) \n    if silent? greeting\n      "Fine. Be that way."\t\n    elsif question? greeting\n      "Sure."\n    elsif loud? greeting\n      "Woah, chill out!"\n    else\n      "Whatever."\n    end\n  end\n\n  def silent? (greeting)\n    greeting.nil? || greeting.empty?\n  end\n\n  def question? (greeting) \n    greeting.end_with?('?')\n  end\n\n  def loud? (greeting)\n    greeting.eql?(greeting.upcase)\n  end\nend	\N	f	5	6	2014-04-29 18:06:17	2014-04-29 18:06:17	413	bob.rb
835	17	214fa2114323d16679e16d1f	superseded	ruby	bob	class Bob \n\n  def hey(greeting) \n    if silent? greeting\n      "Fine. Be that way."\t\n    elsif question? greeting\n      "Sure."\n    elsif loud? greeting\n      "Woah, chill out!"\n    else\n      "Whatever."\n    end\n  end\n\n  private \n\n    def silent?(greeting)\n      greeting.nil? || greeting.empty?\n    end\n\n    def question?(greeting) \n      greeting.end_with?('?')\n    end\n\n    def loud?(greeting)\n      greeting == greeting.upcase\n    end\nend	\N	f	5	7	2014-05-11 13:36:37	2014-05-11 13:36:37	413	bob.rb
837	17	118aaef5f1209be5287b8bfb	done	javascript	beer-song	function verse(number) {\r\n  return capitalize(transform("$X bottle(s) of beer on the wall, $X bottle(s) of beer.\\n" +\r\n    "[Take $some down and pass it around|Go to the store and buy some more], " +\r\n    "[$X-1|99] bottle(-1:s) of beer on the wall.\\n"));\r\n\r\n  function transform(pattern) {\r\n    return pattern\r\n      .replace(/\\$X-1/g, numberText(number-1))\r\n      .replace(/\\$X/g, numberText(number))\r\n      .replace(/\\$some/g, number === 1 ? 'it' : 'one')\r\n      .replace(/\\(s\\)/g, number === 1 ? '' : 's')\r\n      .replace(/\\(-1:s\\)/g, number-1 === 1 ? '' : 's')\r\n      .replace(/\\[(.*?)\\|(.*?)\\]/g, number > 0 ? '$1' : '$2');\r\n  }\r\n\r\n  function capitalize(text) {\r\n    return text.charAt(0).toUpperCase() + text.slice(1);\r\n  }\r\n\r\n  function numberText(number) {\r\n    return number === 0 ? 'no more' : number;\r\n  }\r\n}\r\n\r\nfunction sing(fromNumber, toNumber) {\r\n  if (fromNumber > (toNumber || 0)) {\r\n    return verse(fromNumber) + '\\n' + sing(fromNumber-1, toNumber);\r\n  }\r\n  return verse(fromNumber);\r\n}\r\n\r\nmodule.exports = {\r\n  verse: verse,\r\n  sing: sing\r\n};\r	\N	f	3	5	2014-03-03 02:26:02	2014-03-03 02:26:02	414	beer-song.js
838	17	586eaa481169cd59edeca8e9	superseded	javascript	beer-song	function bottlesRemaining(number) {\r\n  if (number === 0) { return 'no more bottles of beer'; }\r\n  if (number === 1) { return '1 bottle of beer'; }\r\n  return number + ' bottles of beer';\r\n}\r\n\r\nfunction next(number) {\r\n  return number === 0 ? 99 : number - 1;\r\n}\r\n\r\nfunction pronoun(number) {\r\n  return number === 1 ? 'it' : 'one';\r\n}\r\n\r\nfunction action(number) {\r\n  return number > 0 ? 'Take ' + pronoun(number) + ' down and pass it around'\r\n      : 'Go to the store and buy some more';\r\n}\r\n\r\nfunction capitalize(text) {\r\n  return text.charAt(0).toUpperCase() + text.slice(1);\r\n}\r\n\r\nfunction verse(number) {\r\n  return capitalize(bottlesRemaining(number) + ' on the wall, ' \r\n      + bottlesRemaining(number) + '.\\n' + action(number) + ', '\r\n      + bottlesRemaining(next(number)) + ' on the wall.\\n');\r\n}\r\n\r\nfunction sing(fromNumber, toNumber) {\r\n  if (fromNumber > (toNumber || 0)) {\r\n    return verse(fromNumber) + '\\n' + sing(fromNumber - 1, toNumber);\r\n  }\r\n  return verse(fromNumber);\r\n}\r\n\r\nmodule.exports = {\r\n  verse: verse,\r\n  sing: sing\r\n};\r	\N	f	3	1	2014-04-19 20:22:19	2014-04-19 20:22:19	414	beer-song.js
839	17	3ec37a9596c06f5a0d905d35	superseded	javascript	beer-song	function bottlesRemaining(number) {\r\n  if (number === 0) { return 'no more bottles of beer'; }\r\n  if (number === 1) { return '1 bottle of beer'; }\r\n  return number + ' bottles of beer';\r\n}\r\n\r\nfunction next(number) {\r\n  return number === 0 ? 99 : number - 1;\r\n}\r\n\r\nfunction pronoun(number) {\r\n  return number === 1 ? 'it' : 'one';\r\n}\r\n\r\nfunction action(number) {\r\n  if (number > 0) { return 'Take ' + pronoun(number) + ' down and pass it around'; }\r\n  return 'Go to the store and buy some more';\r\n}\r\n\r\nfunction capitalize(text) {\r\n  return text.charAt(0).toUpperCase() + text.slice(1);\r\n}\r\n\r\nfunction verse(number) {\r\n  return capitalize(bottlesRemaining(number) + ' on the wall, ' \r\n      + bottlesRemaining(number) + '.\\n' + action(number) + ', '\r\n      + bottlesRemaining(next(number)) + ' on the wall.\\n');\r\n}\r\n\r\nfunction sing(fromNumber, toNumber) {\r\n  if (fromNumber > (toNumber || 0)) {\r\n    return verse(fromNumber) + '\\n' + sing(fromNumber - 1, toNumber);\r\n  }\r\n  return verse(fromNumber);\r\n}\r\n\r\nmodule.exports = {\r\n  verse: verse,\r\n  sing: sing\r\n};\r	\N	f	4	2	2014-04-24 05:17:00	2014-04-24 05:17:00	414	beer-song.js
840	17	cdd460548099eba4a98b31cb	superseded	javascript	beer-song	function Verse(number) {\r\n\r\n  function bottlesRemaining(nextNumber) {\r\n    var remaining = nextNumber !== undefined ? nextNumber : number;\r\n    if (remaining === 0) { return 'no more bottles of beer'; }\r\n    if (remaining === 1) { return '1 bottle of beer'; }\r\n    return remaining + ' bottles of beer';\r\n  }\r\n\r\n  function next() {\r\n    return number === 0 ? 99 : number - 1;\r\n  }\r\n\r\n  function pronoun() {\r\n    return number === 1 ? 'it' : 'one';\r\n  }\r\n\r\n  function action() {\r\n    if (number > 0) { return 'Take ' + pronoun() + ' down and pass it around'; }\r\n    return 'Go to the store and buy some more';\r\n  }\r\n\r\n  function capitalize(text) {\r\n    return text.charAt(0).toUpperCase() + text.slice(1);\r\n  }\r\n\r\n  var text = capitalize(bottlesRemaining() + ' on the wall, ' \r\n          + bottlesRemaining() + '.\\n' + action() + ', '\r\n          + bottlesRemaining(next()) + ' on the wall.\\n');\r\n\r\n  return {\r\n    text: text\r\n  };\r\n}\r\n\r\nfunction verse(number) {\r\n  return new Verse(number).text;\r\n}\r\n\r\nfunction sing(fromNumber, toNumber) {\r\n  if (fromNumber > (toNumber || 0)) {\r\n    return verse(fromNumber) + '\\n' + sing(fromNumber - 1, toNumber);\r\n  }\r\n  return verse(fromNumber);\r\n}\r\n\r\nmodule.exports = {\r\n  verse: verse,\r\n  sing: sing\r\n};\r	\N	f	4	3	2014-04-28 07:39:10	2014-04-28 07:39:10	414	beer-song.js
842	17	9bdb154d3a87de7243fbddb9	pending	python	octal	class Octal(object):\n    def __init__(self, string):\n        self.string = string\n        for x in string:\n            if x not in str(range(8)):\n                raise ValueError("Invalid octal digit: {}".format(x))\n\n    def to_decimal(self):\n        return sum(int(digit) * 8 ** i for i, digit in enumerate(reversed(self.string)))	\N	f	3	1	2014-02-16 05:00:18	2014-02-16 05:00:18	416	octal.py
843	17	06565b02eb67e41b4e8c8143	superseded	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.List (deleteBy)\nimport Data.Char (toUpper)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor [] _ = []\nanagramsFor _ [] = []\nanagramsFor word anagramsCandidates =\n\t[candidate | candidate<-anagramsCandidates, isAnagram word candidate]\n\nisAnagram :: String -> String -> Bool\nisAnagram word candidate = (word /= candidate) && isAnagramExt word candidate (length word)\n\nisAnagramExt :: String -> String -> Int -> Bool\nisAnagramExt [] [] _ = True\nisAnagramExt [] [_] _ = False\nisAnagramExt (w:ws) candidate wordLength\n\t| wordLength == length candidate = isAnagramExt ws cutCandidate (wordLength-1)\n\t| otherwise = False\n\twhere\n\t\tcutCandidate = deleteBy isEqual w candidate\n\t\tisEqual = \\x y -> (toUpper x) == (toUpper y)	\N	f	1	1	2014-04-10 05:42:39	2014-04-10 05:42:39	417	Anagram.hs
844	17	9ecdc8df54097e5e7b254cda	hibernating	haskell	anagram	module Anagram (anagramsFor) where\n\nimport Data.Char (toUpper)\nimport Data.List (sort)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word someWords =\n\tlet\n\t\tuppered = map toUpper word\n\t\tnormalized = sort uppered\n\tin\n\tfilter (\\w -> uppered /= (map toUpper w) && normalized == (sort $ map toUpper w)) someWords	\N	f	3	2	2014-04-11 06:21:18	2014-04-11 06:21:18	417	Anagram.hs
845	17	d3640dd9fce7f5f7cb31fd8b	pending	javascript	grade-school	module.exports = function() {\r\n\tvar roster = {};\r\n\r\n\treturn {\r\n\t\troster: function() { return roster; },\r\n\r\n\t\tadd: function(name, grade) {\r\n\t\t\tif(!(roster.hasOwnProperty(grade))) roster[grade] = [];\r\n\t\t\troster[grade].push(name);\r\n\t\t\troster[grade] = roster[grade].sort();\r\n\t\t},\r\n\r\n\t\tgrade: function(grade) {\r\n\t\t\treturn roster.hasOwnProperty(grade) ? roster[grade] : [];\r\n\t\t}\r\n\r\n\t};\r\n};	\N	f	3	1	2014-03-17 11:10:23	2014-03-17 11:10:23	418	grade-school.js
846	17	857d728b2bc3aafcfff8d672	done	haskell	grade-school	module School (\n  Grade,\n  Student,\n  School,\n  add, \n  empty, \n  grade, \n  sorted) where\n\nimport qualified Data.Map.Lazy as M\nimport Data.List (sort)\n\ntype Grade      = Int\ntype Student    = String\ntype School     = M.Map Grade [Student]\n\nempty :: School\nempty = M.empty\n\nadd :: Grade -> Student -> School -> School\nadd g s b = M.insertWith (++) g [s] b\n\nmapSorted :: School -> School\nmapSorted = M.map sort\n\nsorted :: School -> [(Grade, [Student])]\nsorted = M.toList . mapSorted\n\ngrade :: Grade -> School -> [Student]\ngrade g = M.findWithDefault [] g . mapSorted	\N	f	3	1	2014-03-13 09:23:50	2014-03-13 09:23:50	419	grade-school.hs
847	17	e1ec31283da0f92b1ee6e252	superseded	clojure	rna-transcription	(ns dna)\n(defn to-rna [dna] (clojure.string/replace dna #"T" "U"))	\N	f	1	1	2014-02-24 20:37:08	2014-02-24 20:37:08	420	rna-transcription.clj
848	17	4168576b5e07b11d82789240	done	clojure	rna-transcription	(ns dna)\n\n(let [thymine \\T uracil \\U]\n  (defn to-rna [dna] \n    (clojure.string/replace dna thymine uracil)\n  )\n)	\N	f	1	2	2014-03-18 11:58:54	2014-03-18 11:58:54	420	rna-transcription.clj
849	17	aebb2e0f5316c573a00b7bbb	done	go	leap	// Package main provides ...\npackage leap\n\nfunc IsLeapYear(year int) bool {\n\treturn year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)\n}	\N	f	3	1	2014-02-21 08:22:53	2014-02-21 08:22:53	421	leap.go
851	22	c8c4ce38d2049d38d763160e	hibernating	python	bob	def _say_nothing(message):\n\treturn message.strip() == ''\n\ndef _is_yelling(message):\n\treturn message.isupper()\n\ndef _is_question(message):\n\treturn not _say_nothing(message) and message[-1] == '?'\n\nclass Bob(object):\n\tdef hey(self, message):\n\t\tif _say_nothing(message):\n\t\t\treturn 'Fine. Be that way!'\n\t\tif _is_yelling(message):\n\t\t\treturn 'Woah, chill out!'\n\t\tif _is_question(message):\n\t\t\treturn 'Sure.'\n\t\treturn 'Whatever.'	\N	f	0	2	2014-05-19 22:33:33	2014-05-19 22:33:33	423	bob.py
852	22	05a9d89ac1041362d9394a07	superseded	python	bob	import re\np = re.compile('[A-Z]')\n\nclass Bob(object):\n\tdef hey(self, question):\n\t\tif question.strip() == '':\n\t\t\treturn 'Fine. Be that way!'\n\t\thas_caps = p.search(question) is not None\n\t\thas_lower = len([c for c in question if c != c.upper()]) > 0\n\t\tif has_caps and not has_lower:\n\t\t\treturn 'Woah, chill out!'\n\t\tif question.endswith('?'):\n\t\t\treturn 'Sure.'\n\t\treturn 'Whatever.'	\N	f	1	1	2014-05-21 01:38:31	2014-05-21 01:38:31	423	bob.py
853	22	e9aca2cc9cf94eb4bed77187	done	ruby	grains	class Grains\n  attr_accessor :grains\n  \n  def initialize\n    @grains = []\n  end\n\n  def square(nr)\n    v = if nr == 1\n          1\n        else\n          nr = 2 * square(nr-1)\n        end\n    grains << v\n    v\n  end\n\n  def total\n    square(64)\n    grains.reduce(:+)\n  end\nend	\N	f	6	1	2014-05-17 02:02:00	2014-05-17 02:02:00	424	grains.rb
854	22	7681bb763f9f1eaf4e4a3644	done	elixir	word-count	defmodule Words do\n\ndef count sentence do\n    String.downcase(sentence)\n    |> String.replace(%r/[,;:@$%^&!?]/, "")\n    |> String.split\n    |> Enum.reduce HashDict.new,\n        fn(word, acc) ->\n            if HashDict.has_key?(acc, word) do\n                HashDict.put(acc, word, HashDict.get(acc,word)+1)\n            else\n                HashDict.put(acc, word, 1)\n            end\n        end\nend\n\nend	\N	f	0	1	2014-05-17 15:37:03	2014-05-17 15:37:03	425	word-count.exs
856	22	1399ef36d93079cae836220e	superseded	elixir	etl	defmodule ETL do\n  @doc """\n  Transform an index into an inverted index.\n\n  ## Examples\n\n  iex> ETL.transform(HashDict.new [{"a", ["ABILITY", "AARDVARK"]}, {"b", ["BALLAST", "BEAUTY"]}])\n  HashDict.new [{"ability", "a"},{"aardvark","a"},{"ballast","b"},{"beauty","b"}]\n  """\n  @spec transform(Dict.t) :: HashDict.t\n  def transform(input) do\n    Enum.reduce input, HashDict.new, fn({score, letters}, acc) ->\n      Enum.reduce( letters, acc, fn(letter, a) -> \n        Dict.put(a, String.downcase(letter), score)\n      end )\n    end\n  end\nend	\N	f	1	1	2014-05-18 04:07:11	2014-05-18 04:07:11	426	etl.exs
858	22	fde21ace42c8809d5c8fabff	pending	ruby	palindrome-products	class Palindromes\n  Palindrome = Struct.new(:value, :factors)\n\n  def initialize(max_factor:, min_factor: 1)\n    @max, @min = max_factor, min_factor\n  end\n\n  def generate\n    pairs.each do |pair|\n      product = pair.reduce(:*)\n      palindromes[product] << pair if palindrome? product\n    end\n  end\n\n  def largest\n    Palindrome.new(*palindromes.max)\n  end\n\n  def smallest\n    Palindrome.new(*palindromes.min)\n  end\n\nprivate\n\n  def pairs\n    [*@min..@max].repeated_combination(2).lazy\n  end\n\n  def palindrome?(number)\n    number.to_s == number.to_s.reverse\n  end\n\n  def palindromes\n    @palindromes ||= Hash.new { |hash, key| hash[key] = [] }\n  end\nend	\N	f	1	2	2014-05-19 13:02:45	2014-05-19 13:02:45	427	palindromes.rb
859	22	0452608f6464b41287a11d9b	pending	go	anagram	package anagram\n\nimport "strings"\n\ntype histogram map[rune]int\n\nfunc (h histogram) eql(other histogram) bool {\n\tif len(h) != len(other) {\n\t\treturn false\n\t}\n\n\tfor k, v := range h {\n\t\tif v != other[k] {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\nfunc newHistogram(s string) (h histogram) {\n\th, s = histogram{}, strings.ToLower(s)\n\tfor _, v := range s {\n\t\th[v]++\n\t}\n\n\treturn\n}\n\nfunc filter(subj string, sx []string) (out []string) {\n\tout, subj = []string{}, strings.ToLower(subj)\n\tl := len(subj)\n\tfor _, s := range sx {\n\t\tif s = strings.ToLower(s); len(s) == l && subj != s {\n\t\t\tout = append(out, s)\n\t\t}\n\t}\n\n\treturn\n}\n\n// Detects filters the list of candidates by keeping only anagrams of subj\nfunc Detect(subj string, candidates []string) (anagrams []string) {\n\tsh := newHistogram(subj)\n\tanagrams = []string{}\n\tfor _, s := range filter(subj, candidates) {\n\t\tif newHistogram(s).eql(sh) {\n\t\t\tanagrams = append(anagrams, s)\n\t\t}\n\t}\n\n\treturn\n}	\N	f	4	1	2014-05-13 23:42:50	2014-05-13 23:42:50	428	anagram.go
860	22	1fe104721441aa15a594e647	done	clojure	grade-school	(ns school)\n\n(defn grade [db num](get db num []))\n\n(defn add [db name num]\n  (assoc db num (conj (grade db num) name)))\n\n(defn sorted [db]\n  (reduce-kv (fn [ret k v] (assoc ret k (sort v))) {} db))	\N	f	3	1	2014-05-13 07:43:50	2014-05-13 07:43:50	429	school.clj
861	22	025e67eb0f5930472d7be54b	pending	ruby	word-count	class Phrase\n  def initialize(input_phrase)\n    @input_phrase = input_phrase\n  end\n\n  def word_count\n    store = Hash.new\n    array_of_words = @input_phrase.split\n\n    parsed_array_of_words = Array.new\n\n    array_of_words.each do |word|\n      word.split(",").each do |split_word|\n        parsed_array_of_words << split_word.downcase\n      end\n    end\n\n    parsed_array_of_words.each do |word|\n      parsed_word = word.match(/\\w+'?\\w?/).to_s\n      next if parsed_word == ""\n\n      if store[parsed_word] == nil\n        store[parsed_word] = 1\n      else\n        store[parsed_word] += 1\n      end\n    end\n\n    store\n  end\nend	\N	f	0	1	2014-05-16 18:44:53	2014-05-16 18:44:53	430	phrase.rb
862	22	8ba2d9c0767044a96a08459a	done	javascript	beer-song	function Beer() {}\n\nBeer.verse = function(n) {\n  switch(n) {\n    case 0:\n      return verse_0;\n    case 1:\n      return verse_1;\n    case 2:\n      return verse_2;\n    default:\n      return n.toString() + " bottles of beer on the wall, " + n.toString()\n        + " bottles of beer.\\nTake one down and pass it around, " +\n        (n - 1).toString() + " bottles of beer on the wall.\\n";\n  }\n};\n\nBeer.sing = function(begin, end) {\n  end = end || 0;\n  var verses = [];\n\n  // inclusive reverse range\n  for (var i = begin; i >= end; i--) {\n    verses.push(this.verse(i));\n  }\n\n  return verses.join("\\n");\n};\n\nvar verse_0 = "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n";\nvar verse_1 = "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n";\nvar verse_2 = "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\n\nmodule.exports = Beer;	\N	f	0	1	2014-05-16 06:13:33	2014-05-16 06:13:33	431	beer-song.js
863	22	375d0aca2227148e0142864f	hibernating	elixir	bob	defmodule Teenager do\n\tdef hey(whatIsUp) do\n\t\tresponsePatterns = [\n\t\t\t[%r/^\\s*$/     , "Fine. Be that way!"],\n\t\t\t[%r/^[^a-z]+$/ , "Woah, chill out!"],\n\t\t\t[%r/\\?$/       , "Sure."]]\n\t\they(whatIsUp, responsePatterns)\n\tend\n\tdef hey(whatIsUp, [[ pattern | response ] | responsePatterns ]) do\n\t\t cond do\n\t\t \tRegex.match? pattern, whatIsUp ->\n\t\t\t\thd(response)\n\t\t\tresponsePatterns != [] ->\n\t\t\t\they(whatIsUp, responsePatterns)\n\t\t\ttrue ->\n\t\t\t\t"Whatever."\n\t\tend\n\tend\nend	\N	f	7	1	2014-05-17 21:33:19	2014-05-17 21:33:19	432	bob.exs
864	22	61afd26093cab39c31ba7fd4	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map compl\n  where\n    compl 'G' = 'C'\n    compl 'C' = 'G'\n    compl 'T' = 'A'\n    compl 'A' = 'U'	\N	f	2	1	2014-05-19 03:29:08	2014-05-19 03:29:08	433	DNA.hs
865	22	93cbc097609f745053a0b1e8	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map compl\n\ncompl :: Char -> Char\ncompl 'G' = 'C'\ncompl 'C' = 'G'\ncompl 'T' = 'A'\ncompl 'A' = 'U'\ncompl c   = error $ "Invalid nucleotide: " ++ [c]	\N	f	1	2	2014-05-20 17:11:58	2014-05-20 17:11:58	433	DNA.hs
910	28	943084c535020a617adea466	hibernating	haskell	anagram	module Anagram (anagramsFor) where\n\nimport           Data.Char (toLower)\nimport           Data.List (permutations)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word ws = filter isAnagram ws\n  where\n    isAnagram = (`elem` anagrams) . map toLower\n    anagrams = filter (/= word') $ permutations word'\n    word' = map toLower word	\N	f	3	1	2014-04-13 14:21:43	2014-04-13 14:21:43	459	Anagram.hs
867	22	815a89894d84ce738a251e56	done	haskell	simple-linked-list	module LinkedList ( List(..)\n                  , new, isNil, nil, toList, fromList, reverseLinkedList\n                  ) where\n\ndata List a = Cons {datum :: a, next :: List a} | Nil\n\nnew :: a -> List a -> List a\nnew = Cons\n\nisNil :: List a -> Bool\nisNil Nil = True\nisNil _   = False\n\nnil :: List a\nnil = Nil\n\ntoList :: List a -> [a]\ntoList (Cons x xs) = x : toList xs\ntoList Nil = []\n\nfromList :: [a] -> List a\nfromList = foldr Cons Nil\n\nreverseLinkedList :: List a -> List a\nreverseLinkedList = rev Nil\n  where\n    rev r (Cons x xs) = rev (Cons x r) xs\n    rev r Nil         = r	\N	f	3	2	2014-05-16 08:18:33	2014-05-16 08:18:33	434	LinkedList.hs
868	22	7c44e5ccd19b35a0b3fb05b6	done	javascript	word-count	module.exports = function(str) {\n\treturn { \n\t\tget count() {\n\t\t\tstr = str.toLowerCase();\n\t\t\tvar words = splitIntoWords(str);\n\t\t\treturn words.reduce(countByName, {});\n\t\t}\n\t}\n}\n\nvar countByName = function(result, name) {\n\tvar val = result[name];\n\tresult[name] = val ? val+1 : 1;\n\treturn result;\n}\n\nvar splitIntoWords = function(str) {\n\treturn str.match(/\\w+/g);\n}	\N	f	3	4	2014-05-15 20:00:11	2014-05-15 20:00:11	435	word-count.js
869	22	607398dfaf3b801f93819fd0	superseded	javascript	word-count	var Words = function(str) {\n\treturn {\n\t\tcount: generateCount(str)\n\t}\n}\n\nvar generateCount = function(str) {\n\tstr = prepareString(str);\n\tvar array = str.split(" ");\n\treturn array.reduce(countByName, {});\n}\n\nvar countByName = function(result, name) {\n\tvar val = result[name];\n\tresult[name] = val ? val+1 : 1;\n\treturn result;\n}\n\nvar prepareString = function(str) {\n\tstr = str.toLowerCase();\n\tstr = removeSpecialChars(str);\n\treturn removeMultipleSpaces(str);\n}\n\nvar removeSpecialChars = function(str) {\n\treturn str.replace(/[^a-zA-Z0-9 ]/g, "");\n}\n\nvar removeMultipleSpaces = function(str) {\n\treturn str.replace(/\\s+/g, " ");\n}\n\nmodule.exports = Words;	\N	f	0	1	2014-05-16 19:09:44	2014-05-16 19:09:44	435	word-count.js
870	22	fba06acc05fa69b3d51d95c6	superseded	javascript	word-count	var Words = function(str) {\n\treturn { \n\t\tget count() {\n\t\t\treturn generateCount(str);\n\t\t}\n\t}\n}\n\nvar generateCount = function(str) {\n\tstr = prepareString(str);\n\tvar array = splitIntoWords(str);\n\treturn array.reduce(countByName, {});\n}\n\nvar countByName = function(result, name) {\n\tvar val = result[name];\n\tresult[name] = val ? val+1 : 1;\n\treturn result;\n}\n\nvar prepareString = function(str) {\n\tstr = str.toLowerCase();\n\treturn str = removeSpecialChars(str);\n}\n\nvar removeSpecialChars = function(str) {\n\treturn str.replace(/[^a-zA-Z0-9 ]/g, "");\n}\n\nvar splitIntoWords = function(str) {\n\treturn str.split(/\\W+/);\n}\n\nmodule.exports = Words;	\N	f	2	2	2014-05-18 18:00:52	2014-05-18 18:00:52	435	word-count.js
871	22	2e4c934ab857c36373aa9622	superseded	javascript	word-count	var Words = function(str) {\n\treturn { \n\t\tget count() {\n\t\t\treturn generateCount(str);\n\t\t}\n\t}\n}\n\nvar generateCount = function(str) {\n\tstr = str.toLowerCase();\n\tvar words = splitIntoWords(str);\n\treturn words.reduce(countByName, {});\n}\n\nvar countByName = function(result, name) {\n\tvar val = result[name];\n\tresult[name] = val ? val+1 : 1;\n\treturn result;\n}\n\nvar splitIntoWords = function(str) {\n\treturn str.match(/\\w+/g);\n}\n\nmodule.exports = Words;	\N	f	6	3	2014-05-23 03:54:46	2014-05-23 03:54:46	435	word-count.js
872	22	4acc9b067ea698bbb95d47d2	superseded	javascript	nucleotide-count	var DNA = (function(){\n  "use strict"\n  var NucleotideTypes = "ATCGU";\n  \n  var validateNucleotide = function(nucleotide){\n    return NucleotideTypes.indexOf(nucleotide) >= 0;\n  }\n  \n  var countNucleotides = function(strand){\n    var nucleotideCounts = { A: 0, T: 0, C: 0, G: 0};\n    for (var i = 0; i < strand.length; i++) {\n      nucleotideCounts[strand[i]] += 1;\n    }\n    return nucleotideCounts;\n  }\n  \n  function DNA(strand){\n    if(strand == undefined) strand = '';\n    this.nucleotideCounts = countNucleotides(strand.split(''));\n  }\n  DNA.prototype.count = function(nucleotide){\n    if(!validateNucleotide(nucleotide)) throw "Invalid Nucleotide";\n    return this.nucleotideCounts[nucleotide] || 0; \n  };\n  \n  return DNA\n})();\n\nmodule.exports = DNA;	\N	f	0	1	2014-05-17 03:52:51	2014-05-17 03:52:51	436	nucleotide-count.js
873	22	82dd659b2fd95ec99207ede2	done	javascript	nucleotide-count	var DNA = (function(){\n  "use strict"\n  var NUCLEOTIDE_TYPES = "ATCGU";\n  \n  var isValidNucleotide = function(nucleotide){\n    return NUCLEOTIDE_TYPES.indexOf(nucleotide) >= 0;\n  }\n  \n  var countNucleotides = function(strand){\n    var nucleotideCounts = { A: 0, T: 0, C: 0, G: 0};\n    for (var i = 0; i < strand.length; i++) {\n      nucleotideCounts[strand[i]] += 1;\n    }\n    return nucleotideCounts;\n  }\n  \n  function DNA(strand){\n    if(strand == undefined) strand = '';\n    this.nucleotideCounts = countNucleotides(strand.split(''));\n  }\n  DNA.prototype.count = function(nucleotide){\n    if(!isValidNucleotide(nucleotide)) throw "Invalid Nucleotide";\n    return this.nucleotideCounts[nucleotide] || 0; \n  };\n  \n  return DNA\n})();\n\nmodule.exports = DNA;	\N	f	3	2	2014-05-19 07:09:45	2014-05-19 07:09:45	436	nucleotide.js
876	27	5a4da95023989a9c395b7db7	superseded	haskell	word-count	module WordCount\n( wordCount\n) where\n\nimport Data.Map (Map, fromListWith)\nimport Data.Char (isAlphaNum, isSpace, toLower)\n\nwordCount :: Num v => String -> Map String v\nwordCount = fromListWith (+) . wordKeys\n\nwordKeys :: Num v => String -> [(String, v)]\nwordKeys = map (\\x -> (x, 1)) . wordsOnly\n\nwordsOnly :: String -> [String]\nwordsOnly = words . map toLower . filter isNotSymbol\n\nisNotSymbol :: Char -> Bool\nisNotSymbol x = isAlphaNum x || isSpace x	\N	f	3	2	2014-03-12 15:45:14	2014-03-12 15:45:14	438	word-count.hs
877	27	6d216d393a9d8470321bf8e0	done	haskell	word-count	{-# LANGUAGE TupleSections #-}\nmodule WordCount\n( wordCount\n) where\n\nimport Data.Map (Map, fromListWith)\nimport Data.Char (isAlphaNum, isSpace, toLower)\nimport Data.List.Split (wordsBy)\n\n\nwordCount :: Num v => String -> Map String v\nwordCount = fromListWith (+) . wordKeys\n\nwordKeys :: Num v => String -> [(String, v)]\nwordKeys = map (,1) . wordsOnly\n\nwordsOnly :: String -> [String]\nwordsOnly = wordsBy (not . isAlphaNum) . map toLower	\N	f	4	3	2014-03-24 16:08:13	2014-03-24 16:08:13	438	word-count.hs
878	27	90c0cd21270125bf0e19e84b	done	ruby	point-mutations	class DNA\n\n  def initialize sequence\n    @sequence = sequence\n  end\n\n  def hamming_distance sequence\n    distance = 0\n    @sequence.chars.each_with_index { |n, i| distance += 1 if !matching_nucleotides? i, sequence }\n    distance\n  end\n\n  private\n\n  def matching_nucleotides? index, sequence\n    (@sequence[index] == sequence[index] || !sequence[index])\n  end\nend	\N	f	3	2	2014-02-26 20:24:12	2014-02-26 20:24:12	439	point-mutations.rb
879	27	ddaf3de266f49536e66b8c3b	superseded	ruby	point-mutations	class DNA\n\n  def initialize sequence\n    @sequence = sequence\n  end\n\n  def hamming_distance sequence\n    distance = 0\n    @sequence.chars.each_with_index { |n, i| distance += 1 if n != sequence[i] && sequence[i] }\n    distance\n  end\nend	\N	f	3	1	2014-03-17 05:22:33	2014-03-17 05:22:33	439	point-mutations.rb
880	27	e7972692cdc54c13894a1295	pending	go	rna-transcription	package strand\n\nimport "strings"\n\nfunc translate(input rune) rune {\n\tswitch input {\n\tcase 'C':\n\t\treturn 'G'\n\tcase 'G':\n\t\treturn 'C'\n\tcase 'A':\n\t\treturn 'U'\n\tcase 'T':\n\t\treturn 'A'\n\t}\n\tpanic("Invalid nucleic acid")\n}\n\nfunc ToRna(input string) string {\n\treturn strings.Map(translate, input)\n}	\N	f	2	1	2014-04-12 21:38:59	2014-04-12 21:38:59	440	strand.go
882	27	56f036d5ecbf2b19bd97db0d	done	javascript	beer-song	###\n  BEER\n###\n\nrequire 'coffee-script'\n\nBeer =\n  noOfBeers: (number, start) ->\n    val = switch number\n      when -1 then '99'\n      when 0  then (if start then 'N' else 'n') + 'o more'\n      else number\n    val + ' bottle' + (if number isnt 1 then 's' else '') + ' of beer'\n\n\n  verse: (number) ->\n    @noOfBeers(number, true) + ' on the wall, ' +\n    @noOfBeers(number) + '.\\n' + @endVerse(number) +\n    @noOfBeers(number-1) + ' on the wall.\\n'\n\n  endVerse: (number) ->\n    return 'Go to the store and buy some more, ' if number is 0\n    return  'Take ' + (if number is 1 then 'it' else 'one') +\n            ' down and pass it around, '\n\n  sing: (end, init) ->\n    song = []\n    init = init or 0\n    end = if (end and end >= init) then end else init\n    for number in [end..init]\n      song.push @verse(number)\n    song.join('\\n')\n\n\n\n\nmodule.exports = Beer	\N	f	1	1	2014-03-24 07:26:56	2014-03-24 07:26:56	442	beer-song.js
883	27	756bdf04295c291b05d62b9b	done	clojure	anagram	(ns anagram\n  (:require [clojure.string :as string]))\n\n(defn- to-anagram-key [word]\n  (-> word string/lower-case sort ))\n\n(defn- is-anagram [target word]\n  (= (to-anagram-key target) (to-anagram-key word)))\n\n(defn anagrams-for [target words] \n  (filter (fn [word]\n              (is-anagram target word))\n           words))	\N	f	0	1	2014-03-04 15:55:27	2014-03-04 15:55:27	443	anagram.clj
885	27	aee99947286244f0f8f12ebc	pending	coffeescript	bob	class Sentence\n  constructor: (@sentence) ->\n\n  isEmpty: => @sentence.match(/^\\s*$/)\n  isShouting: => @sentence.match(/[A-Z]/) && !@sentence.match(/[a-z]/)\n  isQuestion: => @sentence.slice(-1) == '?'\n\nclass Bob\n  hey: (text) ->\n    sentence = new Sentence(text)\n    if sentence.isEmpty()\n      'Fine. Be that way!'\n    else if sentence.isShouting()\n      'Woah, chill out!'\n    else if sentence.isQuestion()\n      'Sure.'\n    else\n      'Whatever.'\n\nmodule.exports = Bob	\N	f	1	1	2014-04-08 06:48:55	2014-04-08 06:48:55	445	bob.coffee
886	27	6887f9071262f97019d99d3a	done	ruby	sieve	class Sieve\n  def initialize(n)\n    @n = n\n  end\n\n  def primes\n    a = [*2..@n]\n    2.upto(@n) do |i|\n      a.delete_if { |x| x != i && x % i == 0 }\n    end\n    a\n  end\nend	\N	f	0	1	2014-03-14 21:50:22	2014-03-14 21:50:22	446	sieve.rb
888	27	0de90d16e3bd2f2344d31215	done	ruby	word-count	class Phrase\n  LETTERS_OR_NUMBERS_REGEXP = /[a-z0-9]+/\n\n  attr_accessor :message\n  def initialize(message)\n    @message = message\n  end\n\n  def word_count\n    words.inject(Hash.new(0)) do |result, elem|\n      result[elem] += 1\n      result\n    end\n  end\n\n  private\n\n  def words\n    message.downcase.scan(LETTERS_OR_NUMBERS_REGEXP)\n  end\nend	\N	f	8	2	2014-04-20 23:21:29	2014-04-20 23:21:29	447	word-count.rb
890	27	60b6f9f17284523f636036d7	done	python	bob	class Bob(object):\n\n  class Phrase(object):\n    def __init__(self, text):\n      self.text = text\n\n    def style(self):\n      if self.is_silence():\n        return 'silence' \n      if self.is_shouting():\n        return 'shouting' \n      if self.is_question():\n        return 'question' \n      return 'regular'\n\n    def is_silence(self):\n      return self.text is None or self.text.strip() == ''\n\n    def is_shouting(self):\n      return self.text.isupper()\n\n    def is_question(self):\n      return self.text.endswith('?')\n\n  responses = {\n    'silence': 'Fine. Be that way.',\n    'shouting': 'Woah, chill out!',\n    'question': 'Sure.'\n    }\n\n  def hey(self, text):\n    phrase = self.Phrase(text)\n    return self.responses.get(phrase.style(), 'Whatever.')	\N	f	3	3	2014-04-05 18:49:10	2014-04-05 18:49:10	448	bob.py
891	27	49858f16163c9156e85acfb0	superseded	python	bob	class Bob(object):\n\n  class Phrase:\n    def __init__(self, text):\n      self.text = text\n\n    def style(self):\n      if self.is_silence():\n        return 'silence' \n      if self.is_shouting():\n        return 'shouting' \n      if self.is_question():\n        return 'question' \n      return 'regular'\n\n    def is_silence(self):\n      return self.text is None or self.text.strip() == ''\n\n    def is_shouting(self):\n      return self.text.isupper()\n\n    def is_question(self):\n      return self.text.endswith('?')\n\n  responses = {\n    'silence': 'Fine. Be that way.',\n    'shouting': 'Woah, chill out!',\n    'question': 'Sure.'\n    }\n\n  def hey(self, text):\n    phrase = self.Phrase(text)\n    return self.responses.get(phrase.style(), 'Whatever.')	\N	f	4	2	2014-05-04 14:07:46	2014-05-04 14:07:46	448	bob.py
892	27	7008302b73c76d8cd06bbf3f	done	elixir	grains	defmodule Grains do\n\n  def square(n), do: trunc :math.pow(2, n - 1)\n\n  def total, do: Enum.reduce(1..64, 0, &(square(&1) + &2))\nend	\N	f	1	1	2014-03-15 04:32:00	2014-03-15 04:32:00	449	grains.exs
893	27	42b1da37a47396d6a1d54477	superseded	haskell	scrabble-score	module Scrabble (scoreLetter, scoreWord) where\nimport Data.Char(toUpper)\nimport Data.List (foldl')\n\nscoreLetter :: Char -> Int\nscoreLetter c | x `elem` "DG" = 2\n              | x `elem` "BCMP" = 3\n              | x `elem` "FHVWY" = 4\n              | x `elem` "K" = 5\n              | x `elem` "JX" = 8\n              | x `elem` "QZ" = 10\n              | otherwise = 1\n  where x = toUpper c\n\nscoreWord :: String -> Int\nscoreWord = foldl' ((. scoreLetter) . (+)) 0	\N	f	2	1	2014-03-20 19:33:13	2014-03-20 19:33:13	450	scrabble-score.hs
894	27	6671b8e1bd0ed09ff92f852f	superseded	haskell	scrabble-score	module Scrabble (scoreLetter, scoreWord) where\nimport Data.Char(toUpper)\nimport Data.List (foldl')\nimport Data.Array\n\nscoreLetter :: Char -> Int\nscoreLetter c = (!) scores x\n  where x = toUpper c\n        scores = array ('A', 'Z') [('A',1), ('E',1), ('I',1), ('O',1), ('U',1), ('L',1), \n                       ('N',1), ('R',1), ('S',1), ('T',1), ('D',2), ('G',2), ('B',3), \n                       ('C',3), ('M',3), ('P',3), ('F',4), ('H',4), ('V',4), ('W',4), \n                       ('Y',4), ('K',5), ('J',8), ('X',8), ('Q',10), ('Z',10)]\n\nscoreWord :: String -> Int\nscoreWord = foldl' ((. scoreLetter) . (+)) 0	\N	f	0	2	2014-03-28 09:43:08	2014-03-28 09:43:08	450	scrabble-score.hs
895	27	39bb75dcf20132e25d2367bc	done	haskell	scrabble-score	module Scrabble (scoreLetter, scoreWord) where\nimport Data.Char(toUpper)\nimport Data.List (foldl')\nimport Data.Array\n\nscoreLetter :: Char -> Int\nscoreLetter c = (!) scores x\n  where x = toUpper c\n        scores = array ('A', 'Z') [(char, score) | \n                            (chars, score) <- [("AEIOULNRST", 1), ("DG", 2), ("BCMP", 3), ("FHVWY", 4), ("K", 5), ("JX", 8), ("QZ", 10)], \n                            char <- chars]\n\nscoreWord :: String -> Int\nscoreWord = foldl' ((. scoreLetter) . (+)) 0	\N	f	3	3	2014-05-03 20:54:47	2014-05-03 20:54:47	450	scrabble-score.hs
896	27	3ad387fdfc8852ca76fc2c4f	pending	ruby	roman-numerals	class Integer < Numeric\n  NUMERALS = [\n      %w[I V X],\n      %w[X L C],\n      %w[C D M],\n      ['M', '', '']\n  ]\n  def to_roman\n    roman = ""\n    self.to_s.reverse.chars.to_a.each_with_index do |digit, decimal_place|\n      roman = convert(digit, decimal_place) + roman\n    end\n    roman\n  end\n\n  private\n    def convert(digit, decimal_place)\n      numeral = digit.to_i\n      case numeral\n        when 1..3\n          NUMERALS[decimal_place][0]*numeral\n        when 4\n          NUMERALS[decimal_place][0] + NUMERALS[decimal_place][1]\n        when 5\n          NUMERALS[decimal_place][1]\n        when 6..8\n          NUMERALS[decimal_place][1] + NUMERALS[decimal_place][0]*(numeral - 5)\n        when 9\n          NUMERALS[decimal_place][0] + NUMERALS[decimal_place][2]\n        else\n          ""\n      end\n\n    end\n\nend	\N	f	2	1	2014-04-14 16:19:36	2014-04-14 16:19:36	451	roman.rb
897	27	fb59caeef71ba0a3830ae4c9	done	ruby	bob	class Bob\n  class Statement\n    def initialize(text)\n      @text = text.to_s\n    end\n\n    def silence?\n      @text.empty?\n    end\n\n    def yelling?\n      @text == @text.upcase\n    end\n\n    def question?\n      @text.end_with?("?")\n    end\n  end\n\n  def hey(statement)\n    statement = Statement.new(statement)\n    return "Fine. Be that way!" if statement.silence?\n    return "Woah, chill out!" if statement.yelling?\n    return "Sure." if statement.question?\n    "Whatever."\n  end\nend	\N	f	4	5	2014-03-28 15:40:05	2014-03-28 15:40:05	452	bob.rb
898	27	4e09a8cbc636825bc173a4a3	superseded	ruby	bob	class Bob\n  def hey(statement)\n    case statement\n    when '', nil then "Fine. Be that way!"\n    when statement.upcase then "Woah, chill out!"\n    when /\\?$/ then "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	4	1	2014-03-29 09:56:53	2014-03-29 09:56:53	452	bob.rb
900	27	d08e7a06953e21317078627f	superseded	ruby	bob	class Bob\n  def hey(statement) \n    it_doesnt_say_anything = ->(statement){ statement.to_s.empty? } \n    is_yelling = ->(statement){ statement == statement.upcase } \n    is_asking_something = ->(statement) { statement =~ /\\?$/ } \n\n    case statement\n    when it_doesnt_say_anything then "Fine. Be that way!"\n    when is_yelling then "Woah, chill out!"\n    when is_asking_something then "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	2	2	2014-04-23 03:48:34	2014-04-23 03:48:34	452	bob.rb
901	27	4b1fac5db1f2ed53059a3878	superseded	ruby	bob	class Bob\n  class Statement\n    def initialize(text)\n      @text = text.to_s\n    end\n\n    def say_anything?\n      !@text.empty?\n    end\n\n    def yelling?\n      @text == @text.upcase\n    end\n\n    def question?\n      @text.end_with?("?")\n    end\n  end\n\n  def hey(statement)\n    statement = Statement.new(statement)\n    return "Fine. Be that way!" unless statement.say_anything?\n    return "Woah, chill out!" if statement.yelling?\n    return "Sure." if statement.question?\n    "Whatever."\n  end\nend	\N	f	3	4	2014-04-29 10:04:32	2014-04-29 10:04:32	452	bob.rb
903	27	03e283742d083b8340c8554d	superseded	elixir	scrabble-score	defmodule Scrabble do\r\n  @letters [\r\n    {'AEIOULNRST', 1},\r\n    {'DG', 2},\r\n    {'BCMP', 3},\r\n    {'FHVWY', 4},\r\n    {'K', 5},\r\n    {'JX', 8},\r\n    {'QZ', 10}]\r\n    \r\n  @scores @letters\r\n    |> Enum.map(fn {group,score} -> Enum.map(group, fn letter -> {letter,score} end) end)\r\n    |> List.flatten\r\n\r\n  defp score_char(char) when char>=?A and char<=?Z, do: @scores[char]\r\n  defp score_char(_), do: 0\r\n\r\n  def score(string) do\r\n    string\r\n      |> String.upcase\r\n      |> bitstring_to_list\r\n      |> Enum.map(fn char -> score_char(char) end)\r\n      |> Enum.reduce(0, fn char_score, subtotal -> char_score + subtotal end)\r\n  end\r\nend\r\n\r	\N	f	1	1	2014-03-16 19:53:15	2014-03-16 19:53:15	454	scrabble-score.exs
904	27	190d0082ac5d951085f1e254	superseded	elixir	scrabble-score	defmodule Scrabble do\r\n  @letters [\r\n    {'AEIOULNRST', 1},\r\n    {'DG', 2},\r\n    {'BCMP', 3},\r\n    {'FHVWY', 4},\r\n    {'K', 5},\r\n    {'JX', 8},\r\n    {'QZ', 10}]\r\n    \r\n  @scores @letters\r\n    |> Enum.flat_map(fn {group,score} -> Enum.map(group, fn letter -> {letter,score} end) end)\r\n\r\n  defp score_char(char) when char>=?A and char<=?Z, do: @scores[char]\r\n  defp score_char(_), do: 0\r\n\r\n  def score(string) do\r\n    string\r\n      |> String.upcase\r\n      |> String.to_char_list!\r\n      |> Enum.map_reduce(0, fn(char, subtotal) -> {score_char(char), score_char(char) + subtotal} end)\r\n      |> elem(1)\r\n  end\r\nend\r\n\r	\N	f	1	2	2014-04-15 19:50:06	2014-04-15 19:50:06	454	scrabble-score.exs
905	27	32ae571afe6c1d1072f93b2b	done	elixir	scrabble-score	defmodule Scrabble do\r\n  @letters HashDict.new(\r\n    [{'AEIOULNRST', 1},\r\n     {'DG', 2},\r\n     {'BCMP', 3},\r\n     {'FHVWY', 4},\r\n     {'K', 5},\r\n     {'JX', 8},\r\n     {'QZ', 10}])\r\n    \r\n  @scores @letters\r\n    |> Enum.flat_map(fn {group,score} -> Enum.map(group, fn letter -> {letter,score} end) end)\r\n\r\n  defp score_char(char) when char>=?A and char<=?Z, do: @scores[char]\r\n  defp score_char(_), do: 0\r\n\r\n  def score(string) do\r\n    string\r\n      |> String.upcase\r\n      |> String.to_char_list!\r\n      |> Enum.map_reduce(0, fn(char, subtotal) -> {score_char(char), score_char(char) + subtotal} end)\r\n      |> elem(1)\r\n  end\r\nend\r\n\r	\N	f	1	3	2014-04-29 12:34:12	2014-04-29 12:34:12	454	scrabble-score.exs
906	27	e08aefedda2fb50e4d91061d	pending	javascript	anagram	var keys = Object.keys;\n\nfunction letterCounts(word) {\n  var counts = {};\n  var letters = word.split('');\n  letters.forEach(function(letter) {\n    var existingCount = counts[letter];\n    counts[letter] = (existingCount || 0) + 1;\n  });\n  return counts;\n}\n\nfunction equals(obj, otherObj) {\n  if (keys(obj).length !== keys(otherObj).length) {\n    return false;\n  }\n  for (var k in obj) {\n    if (!otherObj.hasOwnProperty(k) || (obj[k] !== otherObj[k])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction Anagram(baseWord) {\n  var baseWordLower = baseWord.toLowerCase();\n  return {\n    match: function(words) {\n      return words.filter(function(word) {\n        var wordLower = word.toLowerCase();\n        return (wordLower !== baseWordLower) &&\n               equals(letterCounts(wordLower), letterCounts(baseWordLower));\n      });\n    }\n  };\n}\n\nmodule.exports = Anagram;	\N	f	2	1	2014-04-02 19:35:00	2014-04-02 19:35:00	455	anagram.js
907	27	02b2736155e7b2cfca66fcb3	done	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    hash = { "3" => "Pling", "5" => "Plang", "7" => "Plong" }\n    output = ""\n    hash.keys.each do |divisor|\n      output << hash[divisor] if number % divisor.to_i == 0\n    end\n    output.empty? ? number.to_s : output\n  end\nend	\N	f	0	1	2014-03-26 01:52:36	2014-03-26 01:52:36	456	raindrops.rb
909	28	cb0d28bb84a387ef450a9fcb	pending	ruby	etl	class ETL\n\n  def self.transform old_scores\n    new_scores = {}\n    old_scores.each do |key,value|\n      value.map(&:downcase).each { |elem| new_scores[elem] = key }\n    end\n    new_scores\n  end\n\nend	\N	f	3	1	2014-04-21 02:39:02	2014-04-21 02:39:02	458	etl.rb
913	28	60ceead34f6c256141cdb183	superseded	python	bob	class Bob():\n\n    messages = {\n        "Tom-ay-to, tom-aaaah-to.": "Whatever.",\n        "Let's go make out behind the gym!": "Whatever.",\n        "It's OK if you don't want to go to the DMV.": "Whatever.",\n        "Ending with ? means a question.": "Whatever.",\n        "Does this cryogenic chamber make me look fat?": "Sure.",\n        "You are, what, like 15?": "Sure.",\n        "Wait! Hang on. Are you going to be OK?": "Sure.",\n        "WATCH OUT!": "Woah, chill out!",\n        "WHAT THE HELL WERE YOU THINKING?": "Woah, chill out!",\n        "1, 2, 3 GO!": "Woah, chill out!",\n        "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!": "Woah, chill out!",\n        "I HATE YOU": "Woah, chill out!",\n    }\n\n    def hey(self, message):\n        try:\n            return self.messages[message]\n        except KeyError, e:\n            return "Fine. Be that way!"	\N	f	8	2	2014-05-17 10:36:15	2014-05-17 10:36:15	460	bob.py
914	28	b490721644ef2469d332a668	superseded	python	bob	class Bob():\n\n    messages = {\n        "Does this cryogenic chamber make me look fat?": "Sure.",\n        "You are, what, like 15?": "Sure.",\n        "Wait! Hang on. Are you going to be OK?": "Sure.",\n        "WATCH OUT!": "Woah, chill out!",\n        "WHAT THE HELL WERE YOU THINKING?": "Woah, chill out!",\n        "1, 2, 3 GO!": "Woah, chill out!",\n        "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!": "Woah, chill out!",\n        "I HATE YOU": "Woah, chill out!",\n    }\n\n    def hey(self, message):\n        if not message or not message.strip():\n            return "Fine. Be that way!"\n        try:\n            return self.messages[message]\n        except KeyError, e:\n            return "Whatever."	\N	f	2	4	2014-05-25 23:37:18	2014-05-25 23:37:18	460	bob.py
915	28	9c15ea661be46f5efab6c078	done	python	bob	class Bob():\n\n    def hey(self, message):\n        if not message or not message.strip():\n            return "Fine. Be that way!"\n        if message.upper() == message:\n            return "Woah, chill out!"\n        if message.endswith("?"):\n            return "Sure."\n        return "Whatever."	\N	f	4	5	2014-05-26 05:31:18	2014-05-26 05:31:18	460	bob.py
916	28	5b63a70e846df6c8edd72b15	done	clojure	phone-number	(ns phone)\n\n(def invalid "0000000000")\n\n(defn number [text]\n  (let [digits (clojure.string/join (re-seq #"\\d" text))\n        digits-count (count digits)]\n    (cond\n      (< digits-count 10) invalid\n      (= digits-count 10) digits\n      :else\n        (if (.startsWith digits "1")\n          (number (subs digits 1))\n          invalid))))\n\n(defn area-code [text] (subs (number text) 0 3))\n\n(defn pretty-print [text]\n  (let [num (number text)]\n    (str "(" (area-code num) ") " (subs num 3 6) "-" (subs num 6))))	\N	f	3	1	2014-04-28 05:56:06	2014-04-28 05:56:06	461	phone.clj
917	28	130971f48fd0a55a2f0e1a1b	pending	javascript	robot-name	var Robot = function() {\r\n    this.reset();\r\n};\r\n\r\nRobot.prototype.reset = function() {\r\n    var name;\r\n    do {\r\n        name =  randomCapChar() + \r\n                randomCapChar() + \r\n                randomNumber() + \r\n                randomNumber() + \r\n                randomNumber();\r\n    } while(usedNames.indexOf(name) != -1);\r\n    usedNames.push(name);\r\n    this.name = name;\r\n};\r\n\r\nfunction randomNumber() {\r\n    return Math.round(Math.random() * 9);\r\n}\r\n\r\nfunction randomCapChar() {\r\n    return String.fromCharCode(Math.round(Math.random() * 25 + 65));\r\n}\r\n\r\nvar usedNames = [];\r\n\r\nmodule.exports = Robot;\r	\N	f	4	1	2014-05-03 18:28:26	2014-05-03 18:28:26	462	robot-name.js
918	28	2e1bf2c79f148589766f3f00	superseded	clojure	bob	(ns bob\n  (require [clojure.string :as str]))\n\n(defn silent? [text] (str/blank? text))\n\n(defn response-for [text]\n  (cond\n    (silent? text) "Fine. Be that way!"\n    (= (str/upper-case text) text) "Woah, chill out!"\n    (= \\? (last text)) "Sure."\n    :else "Whatever."))	\N	f	3	1	2014-05-01 16:20:12	2014-05-01 16:20:12	463	bob.clj
919	28	5743abdc9e0356e72d88721b	superseded	clojure	bob	(ns bob\n  (require [clojure.string :as str]))\n\n(defn silent? [text] (str/blank? text))\n(defn shout? [text] (= (str/upper-case text) text))\n(defn question? [text]  (= \\? (last text)))\n\n(defn response-for [text]\n  (cond\n    (silent? text) "Fine. Be that way!"\n    (shoud? text) "Woah, chill out!"\n    (question? text) "Sure."\n    :else "Whatever."))	\N	f	5	2	2014-05-11 03:49:14	2014-05-11 03:49:14	463	bob.clj
920	28	499344762cc164fe2a6c468d	done	clojure	bob	(ns bob\n  (require [clojure.string :as str]))\n\n(defn silent? [text] (str/blank? text))\n(defn shout? [text] (= (str/upper-case text) text))\n(defn question? [text]  (= \\? (last text)))\n\n(defn response-for [text]\n  (cond\n    (silent? text) "Fine. Be that way!"\n    (shout? text) "Woah, chill out!"\n    (question? text) "Sure."\n    :else "Whatever."))	\N	f	2	3	2014-05-19 05:53:05	2014-05-19 05:53:05	463	bob.clj
921	28	ba870ca56160952349a23e54	done	ruby	bob	class Bob\n  def hey(message)\n    message = message.to_s.strip\n\n    [\n      Silent,\n      Shout,\n      Ask,\n      State\n    ].find { |type| type.describes?(message) }.response\n  end\nend\n\nclass MessageType\n  def self.describes?(message)\n    raise NotImplementedError\n  end\n\n  def self.response\n    raise NotImplementedError\n  end\nend\n\nclass Silent < MessageType\n  def self.describes?(message)\n    message == ''\n  end\n\n  def self.response\n    'Fine. Be that way!'\n  end\nend\n\nclass Shout < MessageType\n  def self.describes?(message)\n    message == message.upcase\n  end\n\n  def self.response\n    'Woah, chill out!'\n  end\nend\n\nclass Ask < MessageType\n  def self.describes?(message)\n    message.end_with?('?')\n  end\n\n  def self.response\n    'Sure.'\n  end\nend\n\nclass State < MessageType\n  def self.describes?(message)\n    true\n  end\n\n  def self.response\n    'Whatever.'\n  end\nend	\N	f	9	2	2014-04-18 18:00:01	2014-04-18 18:00:01	464	bob.rb
923	28	694ec127acbb8fd0952a9420	pending	javascript	grade-school	var School = function(){\n  this.students = {};\n  this.roster = function(){\n    return this.students;\n  };\n  this.add = function(name, grade){\n    var newArr = [];\n    var student = name;\n    if (typeof this.students[grade] === "undefined"){\n      this.students[grade] = [];\n      this.add(name, grade);\n    } else{\n      this.students[grade] = this.students[grade].concat([student]).sort();\n    }\n  };\n  this.grade = function(grade){\n    if (typeof this.students[grade] == "undefined"){\n      return [];\n    }else{\n      return this.students[grade];\n    }\n  }\n};	\N	f	0	1	2014-04-18 23:38:35	2014-04-18 23:38:35	465	grade-school.js
924	28	5b6f0f5974cb37511a6ff4f8	pending	scala	space-age	case class SpaceAge(seconds: Long) {\r\n\r\n  implicit class DoubleOps(d: Double) {\r\n    def roundAt(p: Int) = { \r\n      val s = math pow (10, p)\r\n      (math round d * s) / s \r\n    }\r\n  }\r\n\r\n  val years = (seconds / 31557600.toDouble)\r\n  val onEarth: Double   = years.roundAt(2)\r\n  val onMercury: Double = (years / 0.2408467).roundAt(2)\r\n  val onVenus: Double   = (years / 0.61519726).roundAt(2)\r\n  val onMars: Double    = (years / 1.8808158).roundAt(2)\r\n  val onJupiter: Double = (years / 11.862615).roundAt(2)\r\n  val onSaturn: Double  = (years / 29.447498).roundAt(2)\r\n  val onUranus: Double  = (years / 84.016846).roundAt(2)\r\n  val onNeptune: Double = (years / 164.79132).roundAt(2)\r\n}	\N	f	3	1	2014-04-25 05:25:09	2014-04-25 05:25:09	466	space_age.scala
926	28	71d54997ec000213ad551a7f	superseded	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    verses(number, to).inject("") do |song, i|\n      song << verse(i) << "\\n"\n      song\n    end\n  end\n\n  def verse(number)\n    if number == 0\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    else\n      bottles = "#{number} bottles"\n      take_down = "one"\n      bottles_left = "#{number-1} bottles"\n      if number == 1\n        bottles = "1 bottle"\n        take_down = "it"\n        bottles_left = "no more bottles"\n      elsif number == 2\n        bottles_left = "1 bottle"\n      end\n      "#{bottles} of beer on the wall, #{bottles} of beer.\\nTake #{take_down} down and pass it around, #{bottles_left} of beer on the wall.\\n" \n    end\n  end\n\n  def verses(number, to)\n    # returns an array of the verses to be sung\n    (to..number).to_a.reverse\n  end\nend	\N	f	5	2	2014-04-21 05:30:12	2014-04-21 05:30:12	467	beer-song.rb
927	28	9a24bd30d7be62e2b1c1fcb2	superseded	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    song = ""\n    number.downto(to) { |i| song << verse(i) << "\\n" }\n    song\n  end\n\n  def verse(number)\n    first_line_in_verse(number) + second_line_in_verse(number)\n  end\n\n  private\n    def bottles_string(number_of_bottles, beginning_of_line = false)\n      case number_of_bottles\n      when -1\n        "99 bottles"\n      when 0\n        first_letter = "n"\n        first_letter.upcase! if beginning_of_line\n        "#{first_letter}o more bottles"\n      when 1\n        "1 bottle"\n      else\n        "#{number_of_bottles} bottles"\n      end\n    end\n\n    def action_string(number_of_bottles)\n      take_down = nil\n      case number_of_bottles\n      when 0\n        action_string = "Go to the store and buy some more"\n      when 1\n        take_down = "it"\n      else\n        take_down = "one"\n      end\n      action_string ||= "Take #{take_down} down and pass it around" unless take_down.nil?\n      action_string\n    end\n\n    def first_line_in_verse(number)\n      "#{bottles_string(number, true)} of beer on the wall, #{bottles_string(number)} of beer.\\n"\n    end\n\n    def second_line_in_verse(number)\n      "#{action_string(number)}, #{bottles_string(number - 1)} of beer on the wall.\\n"\n    end\nend	\N	f	0	5	2014-04-30 17:53:37	2014-04-30 17:53:37	467	beer-song.rb
928	28	401366d2a0784bf853bce14b	superseded	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    verses(number, to).inject("") do |song, i|\n      song << verse(i) << "\\n"\n      song\n    end\n  end\n\n  def verse(number)\n    if number == 0\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    elsif number == 1\n      "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n    elsif number == 2\n      "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\n    else\n      "#{number} bottles of beer on the wall, #{number} bottles of beer.\\nTake one down and pass it around, #{number-1} bottles of beer on the wall.\\n" \n    end\n  end\n\n  def verses(number, to)\n    # returns an array of the verses to be sung\n    (to..number).to_a.reverse\n  end\nend	\N	f	4	1	2014-05-05 17:14:41	2014-05-05 17:14:41	467	beer-song.rb
956	29	636cc0a24a2067e6ce5d7729	superseded	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    # I don't cheat with Date.leap? here ;)\n    evenly_divisible?(4) && !evenly_divisible?(100) || evenly_divisible?(400)\n  end\n\n  private\n\n  def evenly_divisible?(by)\n    @year % by == 0\n  end\nend	\N	f	4	3	2014-04-18 10:23:01	2014-04-18 10:23:01	476	leap.rb
930	28	2628be10c2dcdca7937e85b7	superseded	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    verse_numbers(number, to).each_with_object("") { |i, song| song << verse(i) << "\\n" }\n  end\n\n  def verse(number)\n    if number == 0\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    else\n      bottles = "#{number} bottles"\n      take_down = "one"\n      bottles_left = "#{(number - 1)} bottles"\n      if number == 1\n        bottles = "1 bottle"\n        take_down = "it"\n        bottles_left = "no more bottles"\n      elsif number == 2\n        bottles_left = "1 bottle"\n      end\n      "#{bottles} of beer on the wall, #{bottles} of beer.\\nTake #{take_down} down and pass it around, #{bottles_left} of beer on the wall.\\n" \n    end\n  end\n\n  def verse_numbers(number, to)\n    # returns an array of the verses to be sung\n    (to..number).to_a.reverse\n  end\nend	\N	f	6	4	2014-05-15 19:32:42	2014-05-15 19:32:42	467	beer-song.rb
931	28	7704a3d30e1d948ee87cb3ff	hibernating	javascript	word-count	var Words = function(input) {\n  this.count = { "word" : 1 };\n  var words = input.match(/\\b[a-z0-9]+\\b/gi);\n};\nmodule.exports = Words;	\N	f	3	2	2014-04-09 06:22:11	2014-04-09 06:22:11	468	word-count.js
932	28	8796f78436f38e3e35cdf36d	superseded	javascript	word-count	function Bob() {};\n\nisSilent = function (msg) {\n  return msg.length === 0;\n}\n\nisShouting = function (msg) {\n  return msg === msg.toUpperCase();\n}\n\nisAsking = function (msg) {\n  return msg.slice(-1) === '?';\n}\n\nBob.prototype.hey = function (msg) {\n  if (isSilent(msg))\n    return 'Fine. Be that way!';\n  else if (isShouting(msg))\n    return 'Woah, chill out!';\n  else if (isAsking(msg))\n    return 'Sure.';\n  else\n    return 'Whatever.';\n}\n\nmodule.exports = Bob;	\N	f	3	1	2014-04-10 19:48:26	2014-04-10 19:48:26	468	word-count.js
933	28	928f3b466cef6def28cd5031	pending	perl5	prime-factors	package Prime;\n\nuse strict;\nuse warnings;\n\nsub factors {\n    my $number = shift;\n    my @primes;\n    my $factor = 2;\n    my $index  = 0;\n\n    while ($number > 1) {\n        if ($number % $factor == 0) {\n            push @primes => $factor;\n            $number = $number / $factor;\n        } else {\n            $factor++;\n        }\n    }\n\n    return \\@primes;\n}\n\n1;	\N	f	3	1	2014-04-26 17:10:37	2014-04-26 17:10:37	469	Prime.pm
934	28	a8fb9aacee5369c5d64ea794	done	python	rna-transcription	DNA_TO_RNA = {\n    'A': 'A',\n    'C': 'C',\n    'G': 'G',\n    'T': 'U',\n}\n\nclass DNA(object):\n    def __init__(self, nucleotides):\n        self.nucleotides = nucleotides\n\n    def to_rna(self):\n        return ''.join((DNA_TO_RNA[n] for n in self.nucleotides))	\N	f	0	1	2014-05-12 04:14:08	2014-05-12 04:14:08	470	dna.py
935	28	13f1d3d8d2368f7ba43e2919	superseded	ruby	raindrops	class Raindrops\n  def convert(number)\n    rain_speak = []\n\n    prime_factors_speak.keys.each do |prime_factor|\n     if number % prime_factor == 0\n      rain_speak << prime_factors_speak[prime_factor]\n     end\n    end\n\n    output(rain_speak, number)\n  end\n\n  def prime_factors_speak\n    {3 =>  "Pling",5 => "Plang",7 => "Plong"}\n  end\n\n  def output(speak, number)\n    if speak.empty?\n      number.to_s\n    else\n      speak.join\n    end\n  end\n\nend	\N	f	3	1	2014-04-11 15:44:34	2014-04-11 15:44:34	471	raindrops.rb
936	28	e88e9c69cfa1c40615cf577c	superseded	ruby	raindrops	class Raindrops\n\n  def convert(number)\n    rain_speak = []\n    raindrop_speak.keys.each do |prime_factor|\n      if number % prime_factor == 0\n        rain_speak << raindrop_speak[prime_factor]\n      end\n    end\n\n    output(rain_speak, number)\n  end\n\n  def raindrop_speak\n    {3 =>  "Pling",5 => "Plang",7 => "Plong"}\n  end\n\n  def output(speak, number)\n    if speak.empty?\n      number.to_s\n    else\n      speak.join\n    end\n  end\n\nend	\N	f	3	2	2014-04-17 19:20:09	2014-04-17 19:20:09	471	raindrops.rb
937	28	52c643d550550e504348c4db	superseded	ruby	raindrops	class Raindrops\n\n  def convert(number)\n    rain_speak = []\n\n    raindrop_speak.each do |prime_factor, speak|\n      if number % prime_factor == 0\n        rain_speak << speak\n      end\n    end\n\n    rain_speak.empty? ? number.to_s : rain_speak.join\n  end\n\n  def raindrop_speak\n    {3 =>  "Pling",5 => "Plang",7 => "Plong"}\n  end\nend	\N	f	3	3	2014-04-24 15:38:10	2014-04-24 15:38:10	471	raindrops.rb
938	28	becf3b544acb292293f59bef	superseded	ruby	raindrops	class Raindrops\n\n  def convert(number)\n    rain_speak = "" \n\n    raindrop_speak.each do |prime_factor, speak|\n      if number % prime_factor == 0\n        rain_speak << speak\n      end\n    end\n\n    rain_speak.empty? ? number.to_s : rain_speak\n  end\n\n  def raindrop_speak\n    {3 =>  "Pling",5 => "Plang",7 => "Plong"}\n  end\nend	\N	f	0	4	2014-05-06 12:50:51	2014-05-06 12:50:51	471	raindrops.rb
939	28	1663bd3ce4262e8ba1dc663f	superseded	ruby	raindrops	class Raindrops\n\n  def convert(number)\n    rain_speak = "" \n\n    raindrop_speak.each do |prime_factor, speak|\n      if number % prime_factor == 0\n        rain_speak << speak\n      end\n    end\n\n   rain_speak.empty? ? rain_speak << number.to_s : rain_speak\n  end\n\n  def raindrop_speak\n    {3 =>  "Pling",5 => "Plang",7 => "Plong"}\n  end\nend	\N	f	1	5	2014-05-09 20:36:18	2014-05-09 20:36:18	471	raindrops.rb
940	28	6311c6b4885d2eff7a69f308	superseded	ruby	raindrops	class Raindrops\n\n  def convert(number)\n    rain_speak = "" \n\n    raindrop_speak.each do |prime_factor, speak|\n      if number % prime_factor == 0\n        rain_speak << speak\n      end\n    end\n\n    if rain_speak.empty?\n      rain_speak << number.to_s\n    end\n\n    rain_speak\n  end\n\n  def raindrop_speak\n    {3 => "Pling", 5 => "Plang", 7 => "Plong"}\n  end\n\nend	\N	f	0	6	2014-05-10 04:40:47	2014-05-10 04:40:47	471	raindrops.rb
941	28	10c1380a4c340a96e547aa93	needs_input	ruby	raindrops	class Raindrops\n\n  def convert(number)\n    rain_speak = "" \n\n    add_words(rain_speak, number)\n\n    if rain_speak.empty?\n      rain_speak << number.to_s\n    end\n\n    rain_speak\n  end\n\n  private \n\n  def add_words(rain_speak, number)\n    raindrop_speak.each do |prime_factor, speak|\n      if number % prime_factor == 0\n        rain_speak << speak\n      end\n    end\n  end\n\n  def raindrop_speak\n    {3 => "Pling", 5 => "Plang", 7 => "Plong"}\n  end\n\nend	\N	f	3	7	2014-05-11 03:54:50	2014-05-11 03:54:50	471	raindrops.rb
1032	37	60e6c561d8e04c674e777f44	superseded	haskell	rna-transcription	module DNA where\n\n\ttoRNA sequence =\n\t\tmap (\\x -> if x == 'T' then 'U' else x) sequence	\N	f	0	1	2014-04-15 07:02:13	2014-04-15 07:02:13	515	rna-transcription.hs
943	29	fe6caca84e796b6ba3a43071	done	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isDigit)\n\n-- actually, it should return an error, but unit test wants zeroes\nnumber :: String -> String\nnumber str = checkNum $ filter isDigit str\n    where checkNum num\n            | length num == 10      = num\n            | length num == 11\n                && head num == '1'  = tail num\n            | otherwise             = "0000000000"\n\nareaCode :: String -> String\nareaCode str = take 3 $ number str\n\nprettyPrint :: String -> String\nprettyPrint str = "(" ++ area ++ ") " ++ left ++ "-" ++ right\n    where (area, rest) = splitAt 3 $ number str\n          (left, right) = splitAt 3 rest	\N	f	1	2	2014-05-05 05:56:21	2014-05-05 05:56:21	472	Phone.hs
944	29	c7a7233aaf3352216952d495	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.List (groupBy, sort)\nimport Data.Char (isPunctuation, toLower, isSymbol)\nimport Control.Arrow ((&&&))\nimport Data.Map (fromList, Map)\n\nwordCount :: String -> Map String Int\nwordCount = fromList. map f. groupBy (==). sort. words. map toLower. replace (\\x -> isPunctuation x || isSymbol x) ' '\n  where f = head &&& length\n  \nreplace :: (a -> Bool) -> a -> [a] -> [a]\nreplace p a = map (\\x -> if p x then a else x)	\N	f	2	1	2013-10-19 08:21:01	2013-10-19 08:21:01	473	word-count.hs
945	29	ec8c517def4c84859aa50e8e	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.List (groupBy, sort)\nimport Data.Char (isPunctuation, toLower, isSymbol)\nimport Control.Arrow ((&&&))\nimport Data.Map (fromList, Map)\n\nwordCount :: String -> Map String Int\nwordCount = fromList. map reduceToTuple. groupByWords. replaceByPredicate (\\x -> isPunctuation x || isSymbol x) ' '\n  where reduceToTuple = head &&& length\n        groupByWords  = groupBy (==). sort. words. map toLower\n  \nreplaceByPredicate :: (a -> Bool) -> a -> [a] -> [a]\nreplaceByPredicate p a = map (\\x -> if p x then a else x)	\N	f	3	2	2013-10-31 13:14:33	2013-10-31 13:14:33	473	word-count.hs
946	29	2a8f3f35bba89afec3293097	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.List.Split (wordsBy)\nimport Data.Char (isPunctuation, toLower, isSymbol, isSpace)\nimport Control.Arrow ((&&&))\nimport Data.Map (fromListWith, Map)\n\nwordCount :: String -> Map String Int\nwordCount = fromListWith (+) . map (\\x -> (map toLower x, 1)) . wordsBy (\\x -> isPunctuation x || isSymbol x || isSpace x)	\N	f	1	3	2014-02-08 17:46:04	2014-02-08 17:46:04	473	word-count.hs
947	29	c516988c93c38176456e2593	done	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.List.Split (wordsBy)\nimport Data.Char (isAlphaNum, toLower)\nimport Data.Map.Strict (fromListWith, Map)\n\nwordCount :: String -> Map String Int\nwordCount = fromListWith (+) . map (\\x -> (map toLower x, 1)) . wordsBy (not . isAlphaNum)	\N	f	3	4	2014-02-09 15:24:35	2014-02-09 15:24:35	473	word-count.hs
948	29	968a9b1e771a2ac94b155bc8	superseded	ruby	bob	class Bob\n  def hey(message)\n    interlocutor = TeenageInterlocutor.new(message)\n    case\n    when interlocutor.yelling?\n      'Woah, chill out!'\n    when interlocutor.asking?\n       'Sure.'\n    when interlocutor.silent?\n      'Fine. Be that way.'\n    else\n      'Whatever.'\n    end\n  end\n\n  class TeenageInterlocutor\n    def initialize(message)\n      @message = message\n    end\n\n    def yelling?\n      matches? %r{[A-Z]{2,}}\n    end\n\n    def asking?\n      matches? %r{\\?$}\n    end\n\n    def silent?\n      matches? ''\n    end\n\n    private\n\n    def matches? pattern\n      pattern == @message || pattern === @message\n    end\n  end\nend	\N	f	1	3	2013-10-19 16:19:12	2013-10-19 16:19:12	474	bob.rb
949	29	d19884b4e7817d44e8d5dda7	done	ruby	bob	class Bob\n  def hey(message)\n    interlocutor = TeenageInterlocutor.new(message)\n    case\n    when interlocutor.yelling?\n      'Woah, chill out!'\n    when interlocutor.asking?\n       'Sure.'\n    when interlocutor.silent?\n      'Fine. Be that way.'\n    else\n      'Whatever.'\n    end\n  end\n\n  class TeenageInterlocutor\n    def initialize(message)\n      @message = message\n    end\n\n    def yelling?\n      @message.match /[A-Z]{2,}/\n    end\n\n    def asking?\n      @message.end_with? '?'\n    end\n\n    def silent?\n      @message.empty?\n    end\n  end\nend	\N	f	3	4	2013-11-23 17:24:43	2013-11-23 17:24:43	474	bob.rb
950	29	23f258c656a0cbb4118de635	superseded	ruby	bob	class Bob\n  def hey(message)\n    case message\n    when /[A-Z]{2,}/\n      'Woah, chill out!'\n    when /\\?$/\n       'Sure.'\n    when ''\n      'Fine. Be that way.'\n    else\n     'Whatever.'\n    end\n  end\nend	\N	f	3	1	2013-12-15 11:07:53	2013-12-15 11:07:53	474	bob.rb
951	29	52a7d4a6f31e1093fd13b3a8	superseded	ruby	bob	class Bob\n  def hey(message)\n    case message\n    when /[A-Z]{2,}/\n      'Woah, chill out!'\n    when /\\?$/\n       'Sure.'\n    when ''\n      'Fine. Be that way.'\n    else\n      'Whatever.'\n    end\n  end\nend	\N	f	5	2	2014-02-18 04:09:21	2014-02-18 04:09:21	474	bob.rb
952	29	f15bd07ed063d9c543b0c427	pending	ruby	nth-prime	class Prime\n  class << self\n    def nth(number)\n      raise ArgumentError if number <= 0\n\n      primes[number - 1] || (\n        current = primes.last\n\n        loop do\n          current += 2\n          primes << current if is_prime?(current)\n          return primes.last if primes.length == number\n        end\n      )\n    end\n\n    def primes\n      @primes ||= [2, 3]\n    end\n\n    def is_prime?(number)\n      limit = Math.sqrt(number)\n\n      primes.take_while { |n| n <= limit }.none? do |n|\n        number % n == 0\n      end\n    end\n  end\nend	\N	f	3	1	2013-11-22 00:13:59	2013-11-22 00:13:59	475	prime.rb
953	29	d656af761174f837535c0498	superseded	ruby	leap	require_relative 'year'\n\nclass Fixnum\n  def leap_year?\n    Year.new(self).leap?\n  end\nend	\N	f	3	2	2013-11-02 05:37:29	2013-11-02 05:37:29	476	leap.rb
954	29	b067214c9c1873ccc29867b3	superseded	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    # I don't cheat with Date.leap? here ;)\n    evenly_divisible?(4) && !evenly_divisible?(100) || evenly_divisible?(400)\n  end\n\n  private\n\n  def evenly_divisible?(by)\n    @year % by == 0\n  end\nend	\N	f	3	1	2013-11-24 21:59:21	2013-11-24 21:59:21	476	leap.rb
955	29	d9cee6de9346dce8b206ac6b	done	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    # I don't cheat with Date.leap? here ;)\n    evenly_divisible?(4) && !evenly_divisible?(100) || evenly_divisible?(400)\n  end\n\n  private\n\n  def evenly_divisible?(by)\n    @year % by == 0\n  end\nend\n\nclass Fixnum\n  def leap_year?\n    Year.new(self).leap?\n  end\nend	\N	f	0	4	2014-01-16 05:13:26	2014-01-16 05:13:26	476	leap.rb
958	29	d7b500ff3ffd8183c58bda4c	done	python	bob	''' Impementation of bob.py - the first exercise on exercism.io\n\n.. module:: bob.py\n    :platforms: All\n    :synopsis: Implementation of bob\n\n.. moduleauthor:: Keith Gray <idahogray@gmail.com>\n\n'''\n\nclass Bob(object):\n    ''' Implementation of Bob\n\n    '''\n\n    def hey(self, phrase):\n        ''' Bob responds according to README.md when spoken to\n\n        '''\n        if phrase.strip() == '':\n            return 'Fine. Be that way!'\n        elif phrase.isupper():\n            return 'Woah, chill out!'\n        elif phrase.endswith('?'):\n            return 'Sure.'\n\n        return 'Whatever.'	\N	f	2	2	2014-03-13 09:48:47	2014-03-13 09:48:47	477	bob.py
959	29	e50507ac9829cea508b65a6b	done	ruby	word-count	class Phrase\n\n  def initialize(content)\n    @lowercase_words = content.downcase.split(/\\W+/)\n  end\n\n  def word_count\n    words_with_count = Hash.new(0)\n    @lowercase_words.each { |word| words_with_count[word] += 1 }\n    words_with_count\n  end\nend	\N	f	4	1	2013-12-31 06:36:00	2013-12-31 06:36:00	478	word-count.rb
960	29	52291802a92795f42ae7c623	done	elixir	bob	defmodule Teenager do\n  def hey(sentence) do\n    cond do\n      is_silence?(sentence) ->\n        "Fine. Be that way!"\n      is_question?(sentence) ->\n        "Sure."\n      is_shouting?(sentence) ->\n        "Woah, chill out!"\n      true ->\n        "Whatever."\n    end\n  end\n\n  defp is_shouting?(sentence) do\n    String.upcase(sentence) == sentence\n  end\n\n  defp is_question?(sentence) do\n    String.ends_with? sentence, "?"\n  end\n\n  defp is_silence?(sentence) do\n    String.strip(sentence) == ""\n  end\nend	\N	f	2	1	2014-03-07 03:42:16	2014-03-07 03:42:16	479	bob.exs
962	29	2fd5d9bf9f3f285751f8abb8	superseded	ruby	pythagorean-triplet	class Triplet\n  def initialize(a, b, c)\n    @a, @b, @c = a, b, c\n  end\n\n  def self.where(min_factor: 1, max_factor: 1, sum: nil)\n    triplets(min_factor, max_factor).select do |triplet|\n     triplet.pythagorean? && (!sum || triplet.sum == sum )\n   end.compact\n  end\n\n  def sum\n    sides.inject :+\n  end\n\n  def product\n    sides.inject :*\n  end\n\n  def pythagorean?\n    self if a ** 2 + b ** 2 == c ** 2\n  end\n\n  def self.triplets(from, to)\n    [*from..to].permutation(2).map do |a, b| \n      hypo = hypotenuse a, b if a < b\n      new(a, b, hypo) if hypo && hypo <= to\n    end.compact\n  end\n\nprivate\n\n  attr_reader :a, :b, :c\n\n  def sides\n    [a, b, c]\n  end\n\n  def self.hypotenuse(a, b)\n    hypo = Math.sqrt(a ** 2 + b ** 2)\n    hypo.to_i if hypo.floor == hypo\n  end\n\nend	\N	f	0	3	2014-01-26 19:50:29	2014-01-26 19:50:29	480	triplet.rb
963	29	9f9cb1223526d2d665aff014	superseded	ruby	pythagorean-triplet	class Triplet\n  def initialize(a, b, c)\n    @a, @b, @c = a, b, c\n  end\n\n  def self.where(min_factor: 1, max_factor: 1, sum: nil)\n    triplets(min_factor, max_factor).select do |triplet|\n     triplet.pythagorean? && (!sum || triplet.sum == sum )\n   end.compact\n  end\n\n  def sum\n    sides.inject :+\n  end\n\n  def product\n    sides.inject :*\n  end\n\n  def pythagorean?\n    self if a ** 2 + b ** 2 == c ** 2\n  end\n\n  def self.triplets(from, to)\n    [*from..to].permutation(3).map { |a, b, c| new(a, b, c) if a < b && b < c }.compact\n  end\n\nprivate\n\n  attr_reader :a, :b, :c\n\n  def sides\n    [a, b, c]\n  end\n\nend	\N	f	3	1	2014-02-13 01:56:35	2014-02-13 01:56:35	480	triplet.rb
964	29	2437a8e6d60d128f778b99d7	superseded	ruby	pythagorean-triplet	class Triplet\n  def initialize(a, b, c)\n    @a, @b, @c = a, b, c\n  end\n\n  def self.where(min_factor: 1, max_factor: 1, sum: nil)\n    triplets(min_factor, max_factor).select do |triplet|\n     triplet.pythagorean? && (!sum || triplet.sum == sum )\n   end.compact\n  end\n\n  def sum\n    sides.inject :+\n  end\n\n  def product\n    sides.inject :*\n  end\n\n  def pythagorean?\n    self if a ** 2 + b ** 2 == c ** 2\n  end\n\n  def self.triplets(from, to)\n    [*from..to].permutation(2).map do |a, b| \n      hypo = hypotenuse a, b if a < b\n      new(a, b, hypo) if hypo\n    end\n  end\n\nprivate\n\n  attr_reader :a, :b, :c\n\n  def sides\n    [a, b, c]\n  end\n\n  def self.hypotenuse(a, b)\n    hypo = Math.sqrt(a ** 2 + b ** 2)\n    hype if hypo.floor == hypo\n  end\n\nend	\N	f	3	2	2014-02-19 13:50:40	2014-02-19 13:50:40	480	triplet.rb
965	29	b0ee28d9e0ea8b78ea2b66b3	superseded	ruby	etl	module ETL\n  def self.transform old\n    old.each_with_object({}) do |(key, values), reversed|\n      values.map(&:downcase)\n            .each { |value| reversed[value] = key }\n    end\n  end\nend	\N	f	2	2	2013-10-22 09:30:05	2013-10-22 09:30:05	481	etl.rb
966	29	246f8f97167227116d91a6f7	superseded	ruby	etl	ETL=def$!.transform x;Hash[x.flat_map{|x,y|y.map{|y|[y.downcase,x]}}]end	\N	f	1	1	2014-02-12 23:35:58	2014-02-12 23:35:58	481	etl.rb
967	29	f12963968d3a2cf71d88c423	done	ruby	etl	module ETL\n  def self.transform old_hash\n    old_hash.each_with_object({}) do |(old_key, old_values), new_hash|\n      old_values.each do |old_value|\n        new_hash[old_value.downcase] = old_key\n      end\n    end\n  end\nend	\N	f	2	3	2014-04-29 03:32:10	2014-04-29 03:32:10	481	etl.rb
968	29	1c9a450a449eae1c660a894f	pending	ruby	triangle	class Triangle\n\n  def initialize *sides\n    raise unless sides.size == 3\n    @sides = sides.sort\n  end\n\n  def kind\n    raise TriangleError if @sides.any? { |side| side <= 0 } ||\n                           @sides[0]+@sides[1] <= @sides[2]\n\n    return :equilateral if @sides.uniq.size == 1\n    return :isosceles   if @sides.uniq.size == 2\n    return :scalene     if @sides.uniq.size == 3\n\n  end\nend\n\nclass TriangleError < StandardError\nend	\N	f	3	3	2013-11-02 10:13:38	2013-11-02 10:13:38	482	triangle.rb
969	29	792ec75ff2e01e1322ee7faa	superseded	ruby	triangle	class Triangle\n\n  def initialize *sides\n    raise unless sides.size == 3\n    @sides = sides.sort\n  end\n\n  def kind\n    raise TriangleError if @sides.any? { |side| side <= 0 } ||\n                           @sides[0]+@sides[1] <= @sides[2] ||\n\n    return :equilateral if @sides.uniq.size == 1\n    return :isosceles   if @sides.uniq.size == 2\n    return :scalene     if @sides.uniq.size == 3\n\n  end\nend\n\nclass TriangleError < StandardError\nend	\N	f	2	2	2013-12-08 07:36:22	2013-12-08 07:36:22	482	triangle.rb
971	29	d6ed7b8c6abba4b0228d99d8	superseded	clojure	bob	(ns bob [:use [clojure.string]])\n\n(defn characters-of [sentence]\n (clojure.string/replace sentence #"[^A-Za-z]" "")\n)\n\n(defn silence? [sentence]\n (empty? (trim sentence))\n )\n\n(defn question? [sentence]\n (.endsWith sentence "?")\n )\n\n(defn shouting? [sentence]\n  (and \n   (seq (characters-of sentence)) \n   (= (count (characters-of sentence))\n      (count (filter #(Character/isUpperCase %) (characters-of sentence)))\n      )\n   )\n)\n\n(defn response-for [sentence] \n (cond\n  (silence? sentence) "Fine. Be that way!"\n  (shouting? sentence) "Woah, chill out!"\n  (question? sentence) "Sure."\n  :else "Whatever."\n )\n)	\N	f	3	1	2014-01-08 03:09:38	2014-01-08 03:09:38	483	bob.clj
972	29	d4b72a628a4ff7a0ace865b5	done	clojure	bob	(ns bob [:use [clojure.string]])\n\n(defn characters-of [sentence]\n (clojure.string/join(re-seq #"[A-Za-z]" sentence)))\n\n(defn silence? [sentence]\n (empty? (trim sentence)))\n\n(defn question? [sentence]\n (= \\? (last sentence)))\n\n(defn shouting? [sentence]\n  (and \n   (seq (characters-of sentence)) \n   (= (count (characters-of sentence))\n      (count (filter #(Character/isUpperCase %) (characters-of sentence))))))\n\n(defn response-for [sentence] \n (cond\n  (silence? sentence) "Fine. Be that way!"\n  (shouting? sentence) "Woah, chill out!"\n  (question? sentence) "Sure."\n  :else "Whatever."))	\N	f	3	2	2014-03-23 03:50:14	2014-03-23 03:50:14	483	bob.clj
974	29	2fa2d63d05a8fca5471bd19c	done	go	rna-transcription	package rnatranscription\n\nimport "strings"\n\nconst CYTOSINE = "C"\nconst GUANINE = "G"\nconst ADENOSINE = "A"\nconst THYMIDINE = "T"\nconst URACIL = "U"\n\nvar dnaToRna = map[string]string{\n\tCYTOSINE:  CYTOSINE,\n\tGUANINE:   GUANINE,\n\tADENOSINE: ADENOSINE,\n\tTHYMIDINE: URACIL,\n}\n\nfunc ToRna(dna string) (rna string) {\n\treturn strings.Replace(dna, THYMIDINE, URACIL, -1)\n}	\N	f	0	1	2013-12-29 23:32:17	2013-12-29 23:32:17	485	rna_transcription.go
975	29	3727d363c325ded286c68f85	done	ruby	hamming	class Hamming \n  def initialize(dna)\n    @@original_string = dna\n\n  end\n\n  def Hamming.compute(original_string, secondary_string)\n    #returns a number indicating the number of base-pair mismatches\n\n    errors = 0\n    dna_1 = chars_to_array(original_string)\n    dna_2 = chars_to_array(secondary_string)\n\n    #sets the shortest sequence, as that is all that can be tested\n    shorter = dna_1.length < dna_2.length ? dna_1 : dna_2\n\n    (0..shorter.length-1).each do |i|\n      errors += 1 if dna_1[i] != dna_2[i]\n    end\n   \n    return errors \n  end\n\n  private\n\n  def Hamming.chars_to_array(string)\n    return string.split(//)\n  end\n\n\nend	\N	f	1	1	2013-12-09 21:50:45	2013-12-09 21:50:45	486	hamming.rb
976	29	3a4c30035bd1a0b46043e993	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.List (filter)\nimport Data.Map (fromList, Map)\n\ncount :: Char -> String -> Int\ncount n\n  | elem n "GATCU" = count' n\n  | otherwise = error $ "invalid nucleotide " ++ show n\n\ncount' :: Char -> String -> Int\ncount' n "" = 0\ncount' n s  = length $ filter ((==) n) s\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts s = fromList $ map counts "ATCG"\n  where\n    counts l = (l, count l s)	\N	f	3	1	2014-01-11 05:10:36	2014-01-11 05:10:36	487	nucleotide-count.hs
977	29	f49fb7dd2f64901d1288a7fb	superseded	haskell	nucleotide-count	{-# LANGUAGE TupleSections #-}\nmodule DNA (count, nucleotideCounts) where\n\nimport qualified Data.Map as M\n\ncount :: Char -> String -> Int\ncount n\n  | elem n "GATCU" = count' n\n  | otherwise = error $ "invalid nucleotide " ++ show n\n\ncount' :: Char -> String -> Int\ncount' _ "" = 0\ncount' n s  = length $ filter ((==) n) s\n\nnucleotideCounts :: String -> M.Map Char Int\nnucleotideCounts s = M.map (subtract 1) $ M.fromListWith (+) $ map (,1) (s ++ "ATCG")	\N	f	3	2	2014-02-26 00:59:21	2014-02-26 00:59:21	487	nucleotide-count.hs
978	29	f6f7ee2e22fe97b9af846031	done	haskell	nucleotide-count	{-# LANGUAGE TupleSections #-}\nmodule DNA (count, nucleotideCounts) where\n\nimport qualified Data.Map.Strict as M\n\ncount :: Char -> String -> Int\ncount n\n  | elem n "GATCU" = count' n\n  | otherwise = error $ "invalid nucleotide " ++ show n\n\ncount' :: Char -> String -> Int\ncount' n s = length $ filter ((==) n) s\n\nnucleotideCounts :: String -> M.Map Char Int\nnucleotideCounts s = M.fromListWith (+) $ map (,0) "ATCG" ++ map (,1) s	\N	f	3	3	2014-03-31 06:12:24	2014-03-31 06:12:24	487	nucleotide-count.hs
981	30	01a123c82a8932749ae02ed7	superseded	ruby	anagram	class Anagram\r\n\r\n\tdef initialize(base_word)\r\n\t\t@base_word = base_word.downcase\r\n\t\t@base_letter_frequencies = letter_frequencies(@base_word)\t\r\n\tend\r\n\r\n\tdef match(words_array)\t\t\r\n\t\twords_array.each_with_object([]) do |word, anagrams|\r\n\t\t\tanagrams << word if anagram?(word.downcase)\r\n\t\tend\r\n\tend\r\n\r\n\tdef anagram?(word)\r\n\t\tif @base_word == word\r\n\t\t\tfalse\r\n\t\telse\r\n\t\t\t@base_letter_frequencies == letter_frequencies(word)\r\n\t\tend\r\n\tend\r\n\r\n\tdef letter_frequencies(word)\r\n\t\tword.strip.scan(/./).each_with_object(Hash.new(0)) { |ch, let_freq|\r\n\t\t\tlet_freq[ch].nil? ? let_freq[ch] = 1 : let_freq[ch] += 1}\t\t\r\n\tend\r\n\r\nend\r	\N	f	2	1	2014-05-15 15:15:04	2014-05-15 15:15:04	490	anagram.rb
983	30	0e355e88f05b1310341a7bd3	superseded	ruby	anagram	class Anagram\r\n\r\n\tdef initialize(base_word)\r\n\t\t@base_word = base_word.downcase\r\n\t\t@base_letter_counts = letter_counts(@base_word)\t\r\n\tend\r\n\r\n\tdef match(words_array)\t\t\r\n\t\twords_array.each_with_object([]) do |word, anagrams|\r\n\t\t\tanagrams << word \t\tif anagram?(word.downcase)\r\n\t\tend\r\n\tend\r\n\r\n\tprivate\r\n\r\n\tdef anagram?(word)\r\n\t\tnot_identical(word) & equal_letter_counts(word)\r\n\tend\r\n\r\n  def not_identical(word)\r\n  \t\t@base_word != word\r\n\tend\r\n\r\n\tdef equal_letter_counts(word)\r\n\t\t@base_letter_counts == letter_counts(word)\r\n\tend\r\n\r\n\tdef letter_counts(word)\r\n\t\t#output is a hash of the count of each letter in the word: {"a" => 2, "g" = 1,......}\r\n\t\t#array_of_word_letters(word).each_with_object(Hash.new(0)) { |ch, let_freq|\r\n\t\t#\tlet_freq[ch].nil? ? let_freq[ch] = 1 : let_freq[ch] += 1}\t\t\r\n\t\t#hash_of_letter_counts(array_of_word_letters(word))\t\r\n\t\thash_of_letter_counts(array_of_word_letters(word))\t\r\n\tend\r\n\r\n  def hash_of_letter_counts(letter_array)\r\n  \tletter_array.each_with_object(Hash.new(0)) { |ch, let_count|\r\n\t\t\tlet_count[ch].nil? ? let_count[ch] = 1 : let_count[ch] += 1}\r\n  end\r\n\r\n  def array_of_word_letters(word)\r\n\t\tword.strip.scan(/./)\r\n  end\r\n\r\nend\r\n\r\n#the above code is much faster, but not as easily read possibly, \r\n#as the code below, which makes use of the "permutation" method.\r\n=begin\r\nclass Anagram\r\n\r\n\tdef initialize(base_word)\r\n\t\t@base_word = base_word.downcase\r\n\t\t@base_anagrams = @base_word.scan(/./).permutation.to_a.each_with_object([]) {|arr, sarr| sarr << arr.join}\r\n\tend\r\n\t\t\r\n\tdef match(word_array)\r\n    word_array = word_array.each_with_object([]){\r\n    \t|word, array|\r\n    \tif (@base_word != word.downcase) & @base_anagrams.include?(word.downcase)\r\n    \t\tarray << word\r\n    \tend\r\n    }\r\n\tend\r\n\r\nend\r\n\t\r\n=end	\N	f	2	2	2014-05-22 05:24:09	2014-05-22 05:24:09	490	anagram.rb
984	30	7a03c8c49de377bf178d75b8	superseded	ruby	anagram	class Anagram\r\n\r\n\tdef initialize(base_word)\r\n\t\t@base_word = base_word.downcase\r\n\t\t@base_letter_sort = @base_word.chars.sort\r\n\tend\r\n\r\n\tdef match(words_array)\t\t\r\n\t\twords_array.each_with_object([]) do |word, anagrams|\r\n\t\t\tanagrams << word \t\tif anagram?(word.downcase)\r\n\t\tend\r\n\tend\r\n\r\n\tprivate\r\n\r\n\tdef anagram?(word)\r\n\t\tnot_identical(word) & equal_letter_sorts(word)\r\n\tend\r\n\r\n\tdef not_identical(word)\r\n\t\t@base_word != word\r\n\tend\r\n\r\n\tdef equal_letter_sorts(word)\r\n\t  @base_letter_sort == word.chars.sort \r\n\tend\r\n\r\nend\r\n\r\n#the above code is much faster, but not as easily read possibly, \r\n#as the code below, which makes use of the "permutation" method.\r\n=begin\r\nclass Anagram\r\n\r\n\tdef initialize(base_word)\r\n\t\t@base_word = base_word.downcase\r\n\t\t@base_anagrams = @base_word.scan(/./).permutation.to_a.each_with_object([]) {|arr, sarr| sarr << arr.join}\r\n\tend\r\n\t\t\r\n\tdef match(word_array)\r\n    word_array = word_array.each_with_object([]){\r\n    \t|word, array|\r\n    \tif (@base_word != word.downcase) & @base_anagrams.include?(word.downcase)\r\n    \t\tarray << word\r\n    \tend\r\n    }\r\n\tend\r\n\r\nend\r\n\t\r\n=end	\N	f	15	3	2014-05-22 15:44:52	2014-05-22 15:44:52	490	anagram.rb
985	30	878a585ea57122530e8cd5b6	done	clojure	bob	(ns bob)\n\n(def responses\n  [[#"\\A *\\z"           "Fine, be that way."]\n   [#"\\A[A-Z0-9 \\W]+\\z" "Woah, chill out!"]\n   [#"\\?\\z"             "Sure."]\n   [#".*"               "Whatever."]])\n\n(defn response-for [phrase]\n  (some\n    (fn [[regex answer]] (and (re-seq regex phrase) answer))\n    responses))	\N	f	6	1	2014-05-22 23:03:12	2014-05-22 23:03:12	491	bob.clj
986	30	c31d9b5a0095d050618823da	done	javascript	beer-song	###\n  BEER\n###\n\nrequire 'coffee-script'\n\nBeer =\n  noOfBeers: (number, start) ->\n    val = switch number\n      when -1 then '99'\n      when 0  then (if start then 'N' else 'n') + 'o more'\n      else number\n    val + ' bottle' + (if number isnt 1 then 's' else '') + ' of beer'\n\n\n  verse: (number) ->\n    @noOfBeers(number, true) + ' on the wall, ' +\n    @noOfBeers(number) + '.\\n' + @endVerse(number) +\n    @noOfBeers(number-1) + ' on the wall.\\n'\n\n  endVerse: (number) ->\n    return 'Go to the store and buy some more, ' if number is 0\n    return  'Take ' + (if number is 1 then 'it' else 'one') +\n            ' down and pass it around, '\n\n  sing: (end, init) ->\n    song = []\n    init = init or 0\n    end = if (end and end >= init) then end else init\n    for number in [end..init]\n      song.push @verse(number)\n    song.join('\\n')\n\n\n\n\nmodule.exports = Beer	\N	f	7	1	2014-05-16 18:32:45	2014-05-16 18:32:45	492	beer-song.js
987	30	0d656a22beeab2c4f0d0b15e	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map transcribe where\n    transcribe 'T' = 'U'\n    transcribe c   = c	\N	f	1	1	2014-05-14 13:51:24	2014-05-14 13:51:24	493	rna-transcription.hs
1033	37	8f0f773343250acfafb76b45	done	haskell	rna-transcription	module DNA (toRNA) where \n\n    nucleotideSwap :: Char -> Char\n    nucleotideSwap 'T' = 'U'\n    nucleotideSwap  n  =  n\n\n    toRNA :: String -> String\n    toRNA = map nucleotideSwap	\N	f	1	2	2014-04-24 16:07:52	2014-04-24 16:07:52	515	rna-transcription.hs
989	30	2774d39031dacd5df7233777	done	ruby	robot-name	class Robot\n  attr_reader :name\n\n  def self.register(name)\n    @names ||= []\n    @names << name\n  end\n\n  def self.registered?(name)\n    @names ||= []\n    @names.index(name)\n  end\n\n  def self.deregister(name)\n    @names.delete(name)\n  end\n\n  def initialize\n    reset\n  end\n\n  class NameRegisteredError < Exception; end\n\n  def reset\n    self.name = NameGenerator.call\n  rescue NameRegisteredError => e\n    retry\n  end\n\n  def name=(new_name)\n    fail NameRegisteredError if Robot.registered?(new_name)\n\n    Robot.deregister(name)\n    @name = new_name\n    Robot.register(new_name)\n  end\n\n  private\n\n  class NameGenerator\n    def self.call\n      name = ""\n      2.times { name += random_letter }\n      3.times { name += random_number.to_s }\n      name\n    end\n\n    LETTERS = ("A".."Z").to_a\n    NUMBERS = (0..9).to_a\n\n    private\n\n    def self.random_letter\n      LETTERS[rand(LETTERS.length)]\n    end\n\n    def self.random_number\n      NUMBERS[rand(NUMBERS.length)]\n    end\n  end\nend	\N	f	8	2	2014-05-16 05:19:21	2014-05-16 05:19:21	494	robot-name.rb
990	30	eeb8f9e01f8497a99f206e89	done	ruby	atbash-cipher	class Atbash\n  PLAIN  = "abcdefghijklmnopqrstuvwxyz"\n  CIPHER = "zyxwvutsrqponmlkjihgfedcba"\n\n  def self.encode(input)\n    input.\n      downcase.\n      delete("^a-z0-9").\n      gsub(/\\w{5}/, '\\& ').strip.\n      tr(PLAIN, CIPHER)\n  end\nend	\N	f	4	1	2014-05-13 01:58:57	2014-05-13 01:58:57	495	atbash-cipher.rb
991	30	1de8c5d3224cdbd4322aef38	done	ruby	gigasecond	# I need to do `require 'date'` in test file.\nclass Gigasecond\n  GIGASECOND_IN_DAYS = 10 ** 9 / 86400\n\n  def initialize(birthdate)\n    @birthdate = birthdate\n  end\n\n  def date\n    @birthdate + GIGASECOND_IN_DAYS\n  end\nend	\N	f	3	1	2014-05-12 12:05:33	2014-05-12 12:05:33	496	gigasecond.rb
992	30	fc9b9d254fb691ebe9d58961	done	elixir	bob	defmodule Teenager do\n\n  def hey(instruction) do\n    do_reply_for(type_of_instruction(instruction))\n  end\n\n  defp type_of_instruction(instruction) do\n    cond do\n      String.strip(instruction) == "" -> :silence\n      instruction == String.upcase(instruction) -> :shouting\n      Regex.match?(%r/\\?$/, instruction) -> :question\n      true -> :normal\n    end\n  end\n\n  defp do_reply_for(:silence),  do: "Fine. Be that way!"\n  defp do_reply_for(:question), do: "Sure."\n  defp do_reply_for(:shouting), do: "Woah, chill out!"\n  defp do_reply_for(_),         do: "Whatever."\n\nend	\N	f	1	1	2014-05-16 03:44:42	2014-05-16 03:44:42	497	bob.exs
993	30	09b4f8d0497b01c3206a0b38	done	ruby	grade-school	class School\n  attr_reader :db\n  \n  def initialize\n    @db = Hash.new { [] }\n  end\n\n  def add(student, level)\n    @db[level] <<= student\n  end\n\n  def grade(level)\n    dup_grade(level)\n  end\n\n  def sort\n    sorted = {}\n    @db.keys.sort.each { |level| sorted[level] = dup_grade(level).sort }\n    sorted\n  end\n\n  private\n    def dup_grade(level)\n      @db[level].map { |student| student.dup }\n    end\nend	\N	f	5	1	2014-05-18 02:02:42	2014-05-18 02:02:42	498	grade-school.rb
994	30	51826802f8b331d9e77cda67	superseded	clojure	rna-transcription	(ns dna)\n\n(def thymidine \\T)\n(def uracyl    \\U)\n\n(defn nucleotide-to-rna [nucleotide]\n  (cond\n    (= nucleotide thymidine) uracyl\n    :else nucleotide))\n\n(defn to-rna [dna-sequence]\n    (apply str (map nucleotide-to-rna dna-sequence)))	\N	f	1	1	2014-05-13 22:52:53	2014-05-13 22:52:53	499	rna-transcription.clj
995	30	3737142cbbd9dcf55750f6ce	done	clojure	rna-transcription	(ns dna)\n\n(def thymidine \\T)\n(def uracyl    \\U)\n\n(defn nucleotide-to-rna [nucleotide]\n  (if (= nucleotide thymidine) uracyl nucleotide))\n\n(defn to-rna [dna-sequence]\n    (apply str (map nucleotide-to-rna dna-sequence)))	\N	f	6	2	2014-05-14 14:28:42	2014-05-14 14:28:42	499	rna-transcription.clj
996	30	ddff15253811e9f631742226	hibernating	javascript	word-count	function words( string ) {\n\tvar accumulator = {},\n\tmatchArray,\n\tregex = /[a-z0-9]+/ig,\n\tword;\n\t\n\twhile( ( matchArray = regex.exec( string ) ) !== null ) {\n\t\tword  =  matchArray[0].toLowerCase( );\n\n\t\tif ( accumulator[word] && typeof accumulator[word] !== 'function' ) {\n\t\t\taccumulator[word]++;\n\t\t}\n\t\telse {\n\t\t\taccumulator[word] = 1;\n\t\t}\n\t}\n\treturn accumulator;\n}\n\nmodule.exports  =  words;	\N	f	1	1	2014-05-15 10:30:15	2014-05-15 10:30:15	500	word-count.js
997	30	025ab930d9cfd00c57852faa	hibernating	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isDigit)\n\nnumber :: String -> String\nnumber = validate . (filter isDigit)\n\nareaCode :: String -> String\nareaCode = (take 3) . number\n\nprettyPrint :: String -> String\nprettyPrint s = "(" ++ areacode ++ ") " ++ prefix ++ "-" ++ linenumber\n  where\n    n = number s\n    areacode = take 3 n\n    prefix = take 3 $ drop 3 n\n    linenumber = drop 6 n\n\nvalidate :: String -> String\nvalidate s = case length s of\n  11 -> if head s == '1' then tail s else invalid\n  10 -> s\n  _  -> invalid\n  where invalid = "0000000000"	\N	f	4	1	2014-05-15 16:38:14	2014-05-15 16:38:14	501	phone-number.hs
998	30	b8a3bdeb8f5c42b494208eee	superseded	haskell	binary-search-tree	module BST (bstLeft, bstRight, bstValue, singleton, insert, fromList, toList) where\n\nimport Data.List (foldl')\n\ndata Tree a = Tip | Node (Tree  a) a (Tree a)\n\ntype BST = Tree Int\n\nbstLeft :: BST -> Maybe BST\nbstLeft (Node a _ _) = Just a\nbstLeft _ = Nothing\n\nbstRight :: BST -> Maybe BST\nbstRight (Node _ _ a) = Just a\nbstRight _ = Nothing\n\nbstValue :: BST -> Int\nbstValue (Node _ a _) = a\nbstValue Tip  = error "no tip value"\n\nsingleton :: Int -> BST\nsingleton a = Node Tip a Tip\n\ninsert :: Int -> BST -> BST\ninsert x (Tip) = error "can't insert tip"\ninsert x (Node Tip a r) | x <= a = Node (singleton x) a r\ninsert x (Node l a Tip) | x > a  = Node l a (singleton x)\ninsert x (Node l a r)   | x <= a = Node (insert x l) a r\ninsert x (Node l a r)   | x > a  = Node l a (insert x r)\n\nfromList :: [Int] -> BST\nfromList [] = Tip\nfromList (x:xs) = foldl' (flip insert) (singleton x) xs\n\ntoList :: BST -> [Int] \ntoList Tip = []\ntoList (Node Tip a r) = a : toList r\ntoList (Node l a Tip) = toList l ++ [a]\ntoList (Node l a r)   = toList l ++ [a] ++ toList r	\N	f	3	1	2014-05-10 20:31:06	2014-05-10 20:31:06	502	BST.hs
1034	37	885bd0fcef50e597c79bdf12	pending	javascript	robot-name	function Robot(){\n  this.generateName = function(){ return "AB" + Math.random(5) };\n\n  this.name = this.name || this.generateName();\n  \n  this.reset = function(){ this.name = undefined; };\n};\n\nmodule.exports = Robot;	\N	f	2	1	2014-01-18 10:34:24	2014-01-18 10:34:24	516	robot-name.js
1000	30	5cda795b5f2f3b6496752a1e	superseded	haskell	binary-search-tree	module BST (bstLeft, bstRight, bstValue, singleton, insert, fromList, toList) where\n\nimport Data.List (foldl')\n\ndata Tree a = Node { bstValue :: a\n                  , bstLeft :: Maybe (Tree a)\n                  , bstRight :: Maybe (Tree  a) }\n             deriving (Show, Eq)\n\ntype BST = Tree Int\n\nsingleton :: Int -> BST\nsingleton a = Node a Nothing Nothing\n\ninsert :: Int -> BST -> BST\ninsert x (Node a l r)  | x <= a    = Node a (insertMaybe l) r\n                       | otherwise = Node a l (insertMaybe r)\n  where insertMaybe = maybe (Just $ singleton x) (Just . (insert x))\n\nfromList :: [Int] -> BST\nfromList []     = error "empty tree"\nfromList (x:[]) = singleton x\nfromList (x:xs) = foldl' (flip insert) (singleton x) xs\n\ntoList :: BST -> [Int] \ntoList (Node a l r) = maybeTolist l ++ [a] ++ maybeTolist r\n  where maybeTolist = maybe [] toList	\N	f	1	3	2014-05-19 01:33:49	2014-05-19 01:33:49	502	BST.hs
1001	30	62d0505b19c830529258c391	superseded	haskell	binary-search-tree	module BST (bstLeft, bstRight, bstValue, singleton, insert, fromList, toList) where\n\nimport Data.List (foldl')\nimport Control.Applicative ((<$>),(<|>),(<*>))\n\nimport Data.Foldable (Foldable, foldMap, toList)\nimport Data.Monoid ((<>))\n\ndata Tree a = Node { bstValue :: a\n                  , bstLeft :: Maybe (Tree a)\n                  , bstRight :: Maybe (Tree  a) }\n             deriving (Show, Eq)\n\ntype BST = Tree Int\n\ninstance Foldable Tree where\n  foldMap f (Node x l r) = foldMaybe l <> f x <> foldMaybe r\n    where foldMaybe = foldMap (foldMap f)\n\nsingleton :: Int -> BST\nsingleton a = Node a Nothing Nothing\n\ninsert :: Int -> BST -> BST\ninsert x (Node a l r)  | x <= a    = Node a (insertMaybe l) r\n                       | otherwise = Node a l (insertMaybe r)\n  where insertMaybe = (<|> Just (singleton x)) . (insert x <$>)\n\nfromList :: [Int] -> BST\nfromList []     = error "empty tree"\nfromList (x:[]) = singleton x\nfromList (x:xs) = foldl' (flip insert) (singleton x) xs	\N	f	3	4	2014-05-19 04:58:48	2014-05-19 04:58:48	502	BST.hs
1002	30	88b72605971a84107fe9ce6b	done	haskell	binary-search-tree	module BST (bstLeft, bstRight, bstValue, singleton, insert, fromList, toList) where\n\nimport Data.List (foldl')\nimport Control.Applicative ((<|>))\n\nimport Data.Foldable (Foldable, foldMap, toList)\nimport Data.Monoid ((<>))\n\ndata Tree a = Node { bstValue :: a\n                  , bstLeft :: Maybe (Tree a)\n                  , bstRight :: Maybe (Tree  a) }\n             deriving (Show, Eq)\n\ntype BST = Tree Int\n\ninstance Foldable Tree where\n  foldMap f (Node x l r) = foldMaybe l <> f x <> foldMaybe r\n    where foldMaybe = foldMap (foldMap f)\n\nsingleton :: Int -> BST\nsingleton a = Node a Nothing Nothing\n\ninsert :: Int -> BST -> BST\ninsert x (Node a l r)  | x <= a    = Node a (insertMaybe l) r\n                       | otherwise = Node a l (insertMaybe r)\n  where insertMaybe t =  fmap (insert x) t <|> (Just $ singleton x)\n\nfromList :: [Int] -> BST\nfromList []     = error "empty tree"\nfromList (x:xs) = foldl' (flip insert) (singleton x) xs	\N	f	3	5	2014-05-20 08:37:36	2014-05-20 08:37:36	502	BST.hs
1003	30	9b764caa34290a7c879ea39f	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.Map (Map, empty, insert)\nimport Text.Printf (printf)\nimport Data.List (foldl')\n\ncommonNucleotides = ['A', 'C', 'T', 'G']\n\ncount :: Char -> [Char] -> Int\ncount n ns\n    | elem n allNucleotides = counter n ns\n    | otherwise = error $ printf "invalid nucleotide '%c'" n\n    where\n      allNucleotides = 'U' : commonNucleotides\n      counter n = length . filter (n==)\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts s = foldl' insertCount empty commonNucleotides\n  where\n    insertCount m n = insert n (count n s) m	\N	f	0	1	2014-05-12 15:00:41	2014-05-12 15:00:41	503	dna.hs
1004	30	aa7a0e2c7fa656ad2b432b91	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.Map (Map, empty, insert)\nimport Data.List (foldl')\n\ncommonNucleotides = ['A', 'C', 'T', 'G']\n\ncount :: Char -> [Char] -> Int\ncount n ns\n    | elem n allNucleotides = counter n ns\n    | otherwise             = error $ "invalid nucleotide " ++ (show n)\n    where\n      allNucleotides = 'U' : commonNucleotides\n      counter n      = length . filter (n==)\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts s = foldl' insertCount empty commonNucleotides\n  where\n    insertCount m n = insert n (count n s) m	\N	f	1	3	2014-05-12 21:40:15	2014-05-12 21:40:15	503	dna.hs
1005	30	af642db764a6b7ee5203f569	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.Map (Map, empty, insert)\nimport Data.List (foldl')\n\ncommonNucleotides = ['A', 'C', 'T', 'G']\n\ncount :: Char -> [Char] -> Int\ncount n ns\n    | elem n allNucleotides = counter n ns\n    | otherwise = error $ "invalid nucleotide " ++ (show n)\n    where\n      allNucleotides = 'U' : commonNucleotides\n      counter n = length . filter (n==)\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts s = foldl' insertCount empty commonNucleotides\n  where\n    insertCount m n = insert n (count n s) m	\N	f	4	2	2014-05-14 06:58:53	2014-05-14 06:58:53	503	dna.hs
1006	30	f2635014d08bdd529a8bedd2	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.Map (Map, empty, insert)\nimport Data.List (foldl')\n\ncommonNucleotides = ['A', 'C', 'T', 'G']\n\ncount :: Char -> [Char] -> Int\ncount n ns\n    | elem n allNucleotides = length $ filter (n==) ns\n    | otherwise             = error $ "invalid nucleotide " ++ (show n)\n    where\n      allNucleotides = 'U' : commonNucleotides\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts s = foldl' insertCount empty commonNucleotides\n  where\n    insertCount m n = insert n (count n s) m	\N	f	2	4	2014-05-20 07:04:11	2014-05-20 07:04:11	503	dna.hs
1007	30	3f1ab14d6a5940605c122439	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.Map.Strict (Map, empty, insertWith, fromList)\nimport Data.List (foldl')\n\ncommonNucleotides = "ACTG"\n\ncount :: Char -> [Char] -> Int\ncount n ns\n    | elem n allNucleotides = length $ filter (n==) ns\n    | otherwise             = error $ "invalid nucleotide " ++ (show n)\n    where\n      allNucleotides = 'U' : commonNucleotides\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts = foldl' insertCount defaultMap\n  where\n    insertCount m n = insertWith (+) n 1 m\n    defaultMap      = fromList [('A', 0), ('T', 0), ('C', 0), ('G', 0)]	\N	f	5	5	2014-05-22 11:29:54	2014-05-22 11:29:54	503	dna.hs
1009	30	982fdc56132d2a9c685fd742	hibernating	ruby	word-count	class Phrase\n  def initialize(string)\n    @string = string.downcase.gsub(/[^a-z'\\d\\s]/, ' ').split\n  end\n  def word_count\n    @counts = {}\n    @string.each do |word|\n      @counts[word].nil? ? @counts[word] = 1 : @counts[word] += 1\n    end\n    @counts\n  end\nend	\N	f	5	1	2014-05-20 23:26:58	2014-05-20 23:26:58	504	phrase.rb
1010	37	777ab35365daec41c19e929d	pending	ruby	gigasecond	class Gigasecond\n  @date\n  def initialize(start_date)\n    @date = start_date\n  end\n\n  def date()\n    @date + (10 ** 9) / (3600 * 24)\n  end\n\nend	\N	f	3	1	2014-02-28 17:13:48	2014-02-28 17:13:48	505	gigasecond.rb
1011	37	1a73972e876d834a6b013ecc	superseded	go	rna-transcription	package rnatranscription\n\n// ToRna converts from a DNA strand to an RNA strand by replacing T with U\n// The four nucleotides found in DNA are adenine (**A**), cytosine (**C**), guanine (**G**) and thymidine (**T**).\n// The four nucleotides found in RNA are adenine (**A**), cytosine (**C**), guanine (**G**) and uracil (**U**).\nfunc ToRna(dnaStrand string) string {\n\n\trnaBytes := make([]byte, len(dnaStrand))\n\n\tfor i := range dnaStrand {\n\t\tif dnaStrand[i] == 'T' {\n\t\t\trnaBytes[i] = 'U'\n\t\t} else {\n\t\t\trnaBytes[i] = dnaStrand[i]\n\t\t}\n\t}\n\n\treturn string(rnaBytes)\n}	\N	f	0	1	2014-01-11 17:29:54	2014-01-11 17:29:54	506	rna_transcription.go
1012	37	7694e78aff56d8b3c6783f26	done	go	rna-transcription	// package rnatranscription provides functions for DNA transcription\npackage rnatranscription\n\nimport "strings"\n\n// ToRna converts from a DNA strand to an RNA strand by replacing T with U\n// The four nucleotides found in DNA are adenine (**A**), cytosine (**C**), guanine (**G**) and thymidine (**T**).\n// The four nucleotides found in RNA are adenine (**A**), cytosine (**C**), guanine (**G**) and uracil (**U**).\nfunc ToRna(dnaStrand string) string {\n\n\ttranscribe := func(in rune) rune {\n\t\tif in == 'T' {\n\t\t\treturn 'U'\n\t\t} else {\n\t\t\treturn in\n\t\t}\n\t}\n\n\treturn strings.Map(transcribe, dnaStrand)\n}	\N	f	3	2	2014-02-15 09:15:58	2014-02-15 09:15:58	506	rna_transcription.go
1013	37	09a11060c49597173fa93da2	superseded	ruby	bob	class Bob\n\n  def hey(words)\n    return "Fine. Be that way!" if words.nil? || words.strip.size == 0\n\n    if words[-1] == '?' && words.upcase != words\n      return "Sure."\n    elsif words.upcase == words\n      return "Woah, chill out!"\n    else\n      return "Whatever."\n    end\n  end\nend	\N	f	3	1	2013-11-19 09:34:47	2013-11-19 09:34:47	507	bob.rb
1014	37	f2fd61f759347a7864e27742	superseded	ruby	bob	class Bob\n\n  def hey(words)\n    return "Fine. Be that way!" if words.nil? || words.strip.size == 0\n    yell = (words.upcase == words)\n    question = (words.end_with? '?')\n    statement = (words.end_with? '.')\n    \n    tone = { :yell => yell, :question => question, :statement => statement }\n    \n    case tone.select { |k, v| v == true }.keys[0]\n    when :yell then "Woah, chill out!"\n    when :question then "Sure."\n    else\n      "Whatever."\n    end\n  end\n  \nend	\N	f	3	2	2013-12-26 02:43:22	2013-12-26 02:43:22	507	bob.rb
1015	37	3aa1d2146302c78cf5c6edd3	hibernating	ruby	bob	class Bob\n\n  def hey(words)\n    return "Fine. Be that way!" if words.nil? || words.strip.empty?\n    yell = (words.upcase == words)\n    question = (words.end_with? '?')\n    statement = (words.end_with? '.')\n\n    tone = { :yell => yell, :question => question, :statement => statement }\n\n    case tone.select { |k, v| !!v }.keys.first\n    when :yell then "Woah, chill out!"\n    when :question then "Sure."\n    else\n      "Whatever."\n    end\n  end\n\nend	\N	f	4	3	2014-01-01 16:59:18	2014-01-01 16:59:18	507	bob.rb
1016	37	b768d396f8500e374f35f67f	done	clojure	bob	(ns bob (:use [clojure.string :only [upper-case]]))\n\n(def silence  "Fine. Be that way.")\n(def shout    "Woah, chill out!")\n(def answer   "Sure.")\n(def default  "Whatever.")\n\n(defn- silent  [msg] (= (.trim msg) ""))\n(defn- shouted [msg] (= (upper-case msg) msg))\n(defn- inquery [msg] (= (last msg) \\?))\n\n(defn response-for [msg]\n  (cond\n    (silent  msg) silence\n    (shouted msg) shout\n    (inquery msg) answer\n    :else default))	\N	f	2	1	2014-04-13 12:15:27	2014-04-13 12:15:27	508	bob.clj
1017	37	ebcb87eb93d76976555212ca	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    return true if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n    #return false\n  end\nend	\N	f	0	1	2013-12-29 16:50:55	2013-12-29 16:50:55	509	year.rb
1018	37	b4afd3a379b74354e01b62fa	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    year % 4 == 0 and year % 100 != 0 or year % 400 == 0\n  end\nend	\N	f	3	2	2014-01-10 17:47:31	2014-01-10 17:47:31	509	year.rb
1019	37	338a1ec703c98d8b0902e059	superseded	ruby	leap	class Fixnum\n  def method_missing(method_id, *args)\n    if method_id.to_s.match(/^multiple_of_(\\d+)\\?$/)\n      self % $1.to_i == 0 # is number modulo x?\n    else\n      super # pass the buck to superclass\n    end\n  end\nend\n\nclass Year\n  def self.leap?(year)\n    year.multiple_of_4? and !year.multiple_of_100? or year.multiple_of_400?\n  end\nend	\N	f	0	4	2014-01-13 04:51:00	2014-01-13 04:51:00	509	year.rb
1020	37	973d327ae87d2184dbbdb339	superseded	ruby	leap	class Fixnum\n  def multiple_of_4?\n    self % 4 == 0\n  end\n  def multiple_of_100?\n    self % 100 == 0\n  end\n  def multiple_of_400?\n    self % 400 == 0\n  end\nend\n\nclass Year\n  def self.leap?(year)\n    year.multiple_of_4? and !year.multiple_of_100? or year.multiple_of_400?\n\n  end\nend	\N	f	1	3	2014-01-18 01:49:06	2014-01-18 01:49:06	509	year.rb
1021	37	cd695cb6d6a2ae05eae467f2	done	ruby	leap	class Year\n  def self.leap?(year)\n    year.modulo(4).zero? and year.modulo(100).nonzero? or year.modulo(400).zero?\n  end\nend	\N	f	3	6	2014-03-29 02:16:52	2014-03-29 02:16:52	509	year.rb
1022	37	4b987979d764405c5d7db270	superseded	ruby	leap	class Fixnum\n  def multiple_of?(mult)\n    self % mult == 0\n  end\nend\n\nclass Year\n  def self.leap?(year)\n    year.multiple_of?(4) and !year.multiple_of?(100) or year.multiple_of?(400)\n  end\nend	\N	f	3	5	2014-05-08 17:19:03	2014-05-08 17:19:03	509	year.rb
1026	37	eaba5d23e289160635e8932d	pending	javascript	beer-song	module.exports = (function(){\n\tvar BeerVerse = {\n\t\t"getInstance": function(number) {\n\t\t\treturn [ZeroBeerVerse, OneBeerVerse, TwoBeerVerse][number] || NormalBeerVerse.setNumber(number);\n\t\t}\n\t};\n\n\tvar NormalBeerVerse = {\n\t\t"setNumber": function(number) {\n\t\t\tthis.number = number;\n\t\t\treturn this;\n\t\t},\n\t\t"toString": function() {\n\t\t\tvar bottles = this.number + " bottles";\n\t\t\treturn [bottles, "of beer on the wall,", bottles, "of beer."].join(" ") + "\\n" + \n\t\t\t\t["Take one down and pass it around,", this.number - 1, "bottles of beer on the wall."].join(" ") + "\\n";\n\t\t}\n\t};\n\n\tvar TwoBeerVerse = {\n\t\t"toString": function() {\n\t\t\treturn "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\n\t\t}\n\t};\n\n\tvar OneBeerVerse = {\n\t\t"toString": function() {\n\t\t\treturn "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n";\n\t\t}\n\t};\n\n\tvar ZeroBeerVerse = {\n\t\t"toString": function() {\n\t\t\treturn "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n";\n\t\t}\n\t};\n\n\tvar Beer = {\n\t\t"verse": function(number) {\n\t\t\treturn BeerVerse.getInstance(number).toString();\n\t\t},\n\t\t"sing": function(start) {\n\t\t\tvar end = arguments.length === 2 ? arguments[1] : 0;\n\t\t\tvar verses = [];\n\n\t\t\tfor(var i = start; i >= end; i--) {\n\t\t\t\tverses.push(this.verse(i));\n\t\t\t}\n\n\t\t\treturn verses.join("\\n");\n\t\t}\n\t};\n\n\treturn Beer;\n})();	\N	f	3	2	2013-12-22 14:13:42	2013-12-22 14:13:42	511	beer-song.js
1027	37	f5cb5945fdfec1de089d9106	superseded	ruby	phone-number	class PhoneNumber\n  attr_reader :area_code, :central_office_code, :station_code\n\n  def initialize(value)\n    parse(value)\n  end\n\n  def number\n    [area_code, central_office_code, station_code].join\n  end\n\n  def to_s\n    "(#{area_code}) #{central_office_code}-#{station_code}"\n  end\n\n  private\n\n  def parse(value)\n    numbers = value.gsub(/\\D/, "").chars\n\n    if numbers.size == 11 and numbers.first == "1"\n      numbers.shift\n    elsif numbers.size != 10\n      numbers = ["0"] * 10\n    end\n\n    @area_code           = numbers.shift(3).join\n    @central_office_code = numbers.shift(3).join\n    @station_code        = numbers.join\n  end\nend	\N	f	0	1	2014-01-20 11:46:47	2014-01-20 11:46:47	512	phone-number.rb
1028	37	e455f52f0ee0f5a7a4e4372c	superseded	ruby	phone-number	class PhoneNumber\n  attr_reader :area_code, :central_office_code, :station_code\n\n  def initialize(value)\n    parse(value)\n  end\n\n  def number\n    [area_code, central_office_code, station_code].join\n  end\n\n  def to_s\n    "(#{area_code}) #{central_office_code}-#{station_code}"\n  end\n\n  private\n\n  def parse(value)\n    @numbers = extract_digits(value)\n\n    remove_country_code if has_country_code?\n    bad_number unless has_correct_size?\n\n    extract_area_code\n    extract_central_office_code\n    extract_station_code\n  end\n\n  def extract_digits(value)\n    value.gsub(/\\D/, "").chars\n  end\n\n  CORRECT_SIZE = 10\n\n  def has_correct_size?\n    @numbers.size == CORRECT_SIZE\n  end\n\n  def has_country_code?\n    @numbers.size == CORRECT_SIZE + 1 and @numbers.first == "1"\n  end\n\n  def remove_country_code\n    @numbers.shift\n  end\n\n  def bad_number\n    @numbers = ["0"] * 10\n  end\n\n  def extract_area_code\n    @area_code = @numbers.shift(3).join\n  end\n\n  def extract_central_office_code\n    @central_office_code = @numbers.shift(3).join\n  end\n\n  def extract_station_code\n    @station_code = @numbers.join\n  end\nend	\N	f	2	2	2014-03-09 13:22:23	2014-03-09 13:22:23	512	phone-number.rb
1029	37	125c98867cd813f690c73cbf	done	ruby	phone-number	class PhoneNumber\n  attr_reader :area_code, :central_office_code, :station_code\n\n  def initialize(value)\n    parse(value)\n  end\n\n  def number\n    [area_code, central_office_code, station_code].join\n  end\n\n  def to_s\n    "(#{area_code}) #{central_office_code}-#{station_code}"\n  end\n\n  private\n\n  def parse(value)\n    @numbers = extract_digits(value)\n\n    remove_country_code\n    bad_number unless has_correct_size?\n\n    extract_area_code\n    extract_central_office_code\n    extract_station_code\n  end\n\n  def extract_digits(value)\n    value.gsub(/\\D/, "").chars\n  end\n\n  CORRECT_SIZE = 10\n\n  def has_correct_size?\n    @numbers.size == CORRECT_SIZE\n  end\n\n  def remove_country_code\n    @numbers.shift if @numbers.size > CORRECT_SIZE and @numbers.first == "1"\n  end\n\n  def bad_number\n    @numbers = ["0"] * 10\n  end\n\n  def extract_area_code\n    @area_code = @numbers.shift(3).join\n  end\n\n  def extract_central_office_code\n    @central_office_code = @numbers.shift(3).join\n  end\n\n  def extract_station_code\n    @station_code = @numbers.join\n  end\nend	\N	f	3	3	2014-03-10 09:40:31	2014-03-10 09:40:31	512	phone-number.rb
1030	37	fb927044d7e9aea0d5613c61	pending	python	word-count	import re\n\n\nclass Phrase():\n\n    def __init__(self, sentence):\n        self.sentence = sentence\n\n    def word_count(self):\n\n        ret = {}\n        pattern_non_word = '\\W'\n\n        mylist = self.sentence.split(' ')\n        for item in mylist:\n\n            # substitue any non-word character with empty string\n            item = re.sub(pattern_non_word, '', item)\n            if item.isalnum():\n                ret[item.lower()] = ret.get(item.lower(), 0) + 1\n\n        return ret	\N	f	2	1	2014-03-04 15:37:28	2014-03-04 15:37:28	513	wordcount.py
1031	37	5f9170d33516733b751de079	pending	clojure	etl	(ns etl\n  (:require [clojure.string :as s :refer [lower-case]]))\n\n(defn transform [m]\n  (into {}\n        (for [k (keys m)\n              v (get m k)]\n          [(s/lower-case v) k])))	\N	f	3	1	2013-11-30 06:21:54	2013-11-30 06:21:54	514	etl.clj
1036	37	87c8be49a33919b1808d286a	superseded	python	bob	class Bob:\n\n    def hey(self, text):\n        # At first test if there is said anything at all\n        if not text.strip():\n            return "Fine. Be that way!"\n        # Then test if Bob is shouted at\n        elif text.isupper():\n            return "Woah, chill out!"\n        # Detect questions\n        elif text.endswith("?"):\n            return "Sure."\n        # At last handle everthing else if nothing from above applies\n        else:\n            return "Whatever."	\N	f	3	2	2013-11-22 19:39:04	2013-11-22 19:39:04	517	bob.py
1037	37	a07c0346f6f6463a5b58711b	pending	python	bob	class Bob(object):\n\n    def hey(self, text):\n        # At first test if there is said anything at all\n        if not text.strip():\n            return "Fine. Be that way!"\n        # Then test if Bob is shouted at\n        elif text.isupper():\n            return "Woah, chill out!"\n        # Detect questions\n        elif text.endswith("?"):\n            return "Sure."\n        # At last handle everthing else if nothing from above applies\n        else:\n            return "Whatever."	\N	f	0	3	2013-11-30 10:42:04	2013-11-30 10:42:04	517	bob.py
1038	37	099f2d1dc81be8582d2d05d4	done	elixir	rna-transcription	defmodule DNA do\r\n  def to_rna(strand) do\r\n    strand\r\n      |> to_string\r\n      |> String.replace("T", "U")\r\n      |> String.to_char_list!\r\n  end\r\nend\r\n\r	\N	f	3	1	2014-01-27 01:29:22	2014-01-27 01:29:22	518	rna-transcription.exs
1040	37	ffaae04be060446657991d80	superseded	ruby	anagram	class Anagram\n  def initialize(subject)\n    @subject = subject\n  end\n\n  def match(words)\n    @words ||= words.select do |word|\n      anagram?(word)\n    end\n  end\n\n  private\n\n  attr_reader :subject\n\n  def anagram?(word)\n    !same?(word) && same_letters?(word)\n  end\n\n  def same?(word)\n    normalized_subject == normalize(word)\n  end\n\n  def same_letters?(word)\n    sorted_normalized_subject == sort_characters(normalize(word))\n  end\n\n  def normalize(word)\n    word.downcase\n  end\n\n  def sort_characters(word)\n    word.split('').sort\n  end\n\n  def normalized_subject\n    @normalized_subject ||= normalize(subject)\n  end\n\n  def sorted_normalized_subject\n    @sorted_normalized_subject ||= sort_characters(normalized_subject)\n  end\nend	\N	f	2	1	2014-01-06 13:57:08	2014-01-06 13:57:08	519	anagram.rb
1041	37	afa623aaad7d016eb048c88e	superseded	ruby	anagram	class Anagram\n  def initialize(subject)\n    @subject = AnagramWord.new(subject)\n  end\n\n  def match(words)\n    @words ||= words.select do |word|\n      subject == AnagramWord.new(word)\n    end\n  end\n\n  private\n\n  attr_reader :subject\nend\n\nclass AnagramWord\n  def initialize(word)\n    @word = word\n  end\n\n  def ==(other)\n    !same?(other) && same_chars?(other)\n  end\n\n  protected\n\n  def normalize\n    word.downcase\n  end\n\n  def sorted_chars\n    normalize.chars.sort\n  end\n\n  private\n\n  attr_reader :word\n\n  def same?(other)\n    normalize == other.normalize\n  end\n\n  def same_chars?(other)\n    sorted_chars == other.sorted_chars\n  end\nend	\N	f	4	2	2014-03-15 20:43:41	2014-03-15 20:43:41	519	anagram.rb
1042	41	d20839a5b25a8956164d0681	done	ruby	accumulate	class Array\n  def accumulate\n    self.each_with_object([]) do |i, arr|\n      arr << yield(i)\n    end\n  end\n\nend	\N	f	3	1	2014-03-25 06:15:20	2014-03-25 06:15:20	520	accumulate.rb
1043	41	13eb97340ec6505d16fc8205	done	clojure	robot-simulator	(def movements {:north [[:y] inc]\n                :east  [[:x] inc]\n                :south [[:y] dec]\n                :west  [[:x] dec]})\n\n(def dirs (keys movements))\n\n(defn- turn [f dir]\n  (nth dirs (mod (f (.indexOf dirs dir)) (count dirs))))\n\n(def turn-right (partial turn inc))\n(def turn-left (partial turn dec))\n(defn- advance [coords b] (apply update-in coords (b movements)))\n\n(defprotocol Mover\n  (move [this inst] "Move the thing based on an instruction"))\n\n(defrecord Robot [coordinates bearing]\n  Mover\n  (move [_ inst]\n    (case inst\n      \\L (->Robot coordinates (turn-left bearing))\n      \\R (->Robot coordinates (turn-right bearing))\n      \\A (->Robot (advance coordinates bearing) bearing))))\n\n(defn robot [c b] (->Robot c b))\n\n(defn simulate [insts r] (reduce move r insts))	\N	f	0	2	2014-04-10 15:24:31	2014-04-10 15:24:31	521	robot.clj
1044	41	96850e63d9a0802d8aae6a3a	superseded	clojure	robot-simulator	(def dirs '(:north :east :south :west))\n\n(defn- turn [f dir]\n  (nth dirs (mod (f (.indexOf dirs dir)) (count dirs))))\n\n(def turn-right (partial turn inc))\n(def turn-left (partial turn dec))\n\n(defn robot [coords b] \n  {:coordinates coords :bearing b})\n\n(defn- advance [c b]\n  (let [{x :x y :y} c]\n    (case b\n      :north {:x x :y (inc y)}\n      :south {:x x :y (dec y)}\n      :east {:x (inc x) :y y}\n      :west {:x (dec x) :y y})))\n\n(defn- move [r inst]\n  (let [{coords :coordinates b :bearing} r]\n    (case inst\n      \\L (robot coords (turn-left b))\n      \\R (robot coords (turn-right b))\n      \\A (robot (advance coords b) b))))\n\n(defn simulate [insts r]\n  (reduce move r insts))	\N	f	3	1	2014-04-22 22:54:25	2014-04-22 22:54:25	521	robot-simulator.clj
1045	41	96869f1299c0a1b8589b07a7	done	haskell	scrabble-score	module Scrabble\n    (scoreLetter, scoreWord)\nwhere\n\nimport           Data.Char       (toUpper)\nimport qualified Data.Map.Strict as M\nimport           Data.Map.Strict (Map)\nimport           Data.Maybe      (fromJust)\n\nscoreWord :: String -> Int\nscoreWord = sum . map scoreLetter\n\nscoreLetter :: Char -> Int\nscoreLetter c = fromJust $ M.lookup (toUpper c) scores\n\nscores = M.fromList [\n    ('A', 1), ('E', 1), ('I', 1), ('O', 1), ('U', 1), ('L', 1), ('N', 1), ('R', 1),\n    ('S', 1), ('T', 1), ('D', 2), ('G', 2), ('B', 3), ('C', 3), ('M', 3), ('P', 3),\n    ('F', 4), ('H', 4), ('V', 4), ('W', 4), ('Y', 4), ('K', 5), ('J', 8), ('X', 8),\n    ('Q', 10), ('Z', 10)\n    ]	\N	f	3	1	2014-04-06 07:32:12	2014-04-06 07:32:12	522	scrabble-score.hs
1056	41	c0b89bd0fbfd4c8b077674cc	superseded	ruby	bob	class Bob\n  RESPONSES = {\n   mute: "Fine. Be that way!",\n   shout: "Woah, chill out!",\n   query: "Sure.",\n   any: "Whatever.",\n  }\n  def hey message\n    RESPONSES.each do |type, response|\n      return response if self.send "is_#{type}?", message\n    end\n  end\n  \n  private\n  def is_any? message\n    true\n  end\n  def is_mute? message\n    !message || message.strip.empty?\n  end\n  def is_shout? message\n    message.upcase == message\n  end\n  def is_query? message\n    message[-1] == "?"\n  end\nend	\N	f	3	3	2014-05-24 22:05:11	2014-05-24 22:05:11	524	bob.rb
1047	41	a1774c61abcff3b13632062f	superseded	ruby	bob	class Bob\n  def hey message\n    if !message || message.strip.empty?\n      "Fine. Be that way!"\n    elsif message.upcase == message\n      "Woah, chill out!"\n    elsif message[-1] == "?"\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	5	1	2014-03-08 11:03:51	2014-03-08 11:03:51	524	bob.rb
1048	41	877c192328dbf1eeb822d780	superseded	ruby	bob	class Bob\n  RESPONSES = {\n   mute: "Fine. Be that way!",\n   shout: "Woah, chill out!",\n   query: "Sure.",\n   any: "Whatever.",\n  }\n  def hey message\n    RESPONSES.find {|type,_| self.send "is_#{type}?", message }.last\n  end\n  \n  private\n  def is_any? message\n    true\n  end\n  def is_mute? message\n    !message || message.strip.empty?\n  end\n  def is_shout? message\n    message.upcase == message\n  end\n  def is_query? message\n    message.end_with? "?"\n  end\nend	\N	f	3	5	2014-03-18 03:35:28	2014-03-18 03:35:28	524	bob.rb
1049	41	740b9ee9b6a6144de4653f8f	superseded	ruby	bob	class Bob\n  RESPONSES = {\n   mute: "Fine. Be that way!",\n   shout: "Woah, chill out!",\n   query: "Sure.",\n   any: "Whatever.",\n  }\n  def hey message\n    _, response = RESPONSES.find {|type, _| self.send "is_#{type}?", message }\n    response\n  end\n  \n  private\n  def is_any? message\n    true\n  end\n  def is_mute? message\n    !message || message.strip.empty?\n  end\n  def is_shout? message\n    message.upcase == message\n  end\n  def is_query? message\n    message.end_with? "?"\n  end\nend	\N	f	0	4	2014-03-23 23:59:34	2014-03-23 23:59:34	524	bob.rb
1050	41	6e644c2c638a37d05bdec9fc	superseded	ruby	bob	class Bob\n  def hey message\n    return "Fine. Be that way!" if is_mute? message\n    return "Woah, chill out!" if is_shout? message\n    return "Sure." if is_query? message\n    return "Whatever." if is_any? message\n  end\n  \n  private\n  def is_any? message\n    true\n  end\n  def is_mute? message\n    !message || message.strip.empty?\n  end\n  def is_shout? message\n    message.upcase == message\n  end\n  def is_query? message\n    message[-1] == "?"\n  end\nend	\N	f	0	2	2014-04-07 17:33:57	2014-04-07 17:33:57	524	bob.rb
1051	41	cb7467a024438c04c318fc3b	superseded	ruby	bob	class Bob\n  class Responder\n    def self.is_type? message\n      true\n    end\n    def self.response\n      "Whatever."\n    end\n  end\n  \n  class Mute < Responder\n    def self.is_type? message\n      !message || message.strip.empty?\n    end\n    def self.response\n      "Fine. Be that way!"\n    end\n  end\n  \n  class Shout < Responder\n    def self.is_type? message\n      message.upcase == message\n    end\n    def self.response\n      "Woah, chill out!"\n    end\n  end\n  \n  class Query < Responder\n    def self.is_type? message\n      message.end_with? "?"\n    end\n    def self.response\n      "Sure."\n    end\n  end\n  \n  RESPONSES = [\n   Mute,\n   Shout,\n   Query\n  ]\n  def hey message\n    getResponder(message).response\n  end\n  \n  private\n  def getResponder message\n    RESPONSES.find(->{Responder}) {|responder| responder.is_type? message }\n  end\nend	\N	f	5	7	2014-04-10 21:46:54	2014-04-10 21:46:54	524	bob.rb
1052	41	dc88f9e04c9ac8637858a727	superseded	ruby	bob	class Bob\n  class Responder\n    def self.is_type? message\n      true\n    end\n    def self.response\n      "Whatever."\n    end\n  end\n  \n  class Mute < Responder\n    def self.is_type? message\n      !message || message.strip.empty?\n    end\n    def self.response\n      "Fine. Be that way!"\n    end\n  end\n  \n  class Shout < Responder\n    def self.is_type? message\n      message.upcase == message\n    end\n    def self.response\n      "Woah, chill out!"\n    end\n  end\n  \n  class Query < Responder\n    def self.is_type? message\n      message.end_with? "?"\n    end\n    def self.response\n      "Sure."\n    end\n  end\n  \n  RESPONSES = [\n   Mute,\n   Shout,\n   Query\n  ]\n  def hey message\n    get_responder(message).response\n  end\n  \n  private\n  def get_responder message\n    RESPONSES.find(->{Responder}) {|responder| responder.is_type? message }\n  end\nend	\N	f	5	8	2014-04-13 09:20:35	2014-04-13 09:20:35	524	bob.rb
1053	41	5eecbe0d500a7e1484b5163d	done	ruby	bob	class Bob\n  RESPONSES = {\n   mute: "Fine. Be that way!",\n   shout: "Woah, chill out!",\n   query: "Sure.",\n   any: "Whatever.",\n  }\n  def hey message\n    RESPONSES.find {|type,_| self.send "is_#{type}?", message }.last\n  end\n  \n  private\n  def is_any? message\n    true\n  end\n  def is_mute? message\n    !message || message.strip.empty?\n  end\n  def is_shout? message\n    message.upcase == message\n  end\n  def is_query? message\n    message.end_with? "?"\n  end\nend	\N	f	0	10	2014-04-24 00:03:47	2014-04-24 00:03:47	524	bob.rb
1054	41	ad8a035449502636cf62b33c	superseded	ruby	bob	class Bob\n  class Responder\n    def self.is_type? message\n      true\n    end\n    def self.response\n      "Whatever."\n    end\n  end\n  \n  class Mute < Responder\n    def self.is_type? message\n      !message || message.strip.empty?\n    end\n    def self.response\n      "Fine. Be that way!"\n    end\n  end\n  \n  class Shout < Responder\n    def self.is_type? message\n      message.upcase == message\n    end\n    def self.response\n      "Woah, chill out!"\n    end\n  end\n  \n  class Query < Responder\n    def self.is_type? message\n      message.end_with? "?"\n    end\n    def self.response\n      "Sure."\n    end\n  end\n  \n  RESPONSES = [\n   Mute,\n   Shout,\n   Query\n  ]\n  def hey message\n    RESPONSES.find(->{Responder}) {|responder| responder.is_type? message }.response\n  end\nend	\N	f	9	6	2014-05-13 03:37:24	2014-05-13 03:37:24	524	bob.rb
1055	41	1f1419ef45e3377e46152612	superseded	ruby	bob	class Bob\n  class Responder\n    def self.responds? message\n      true\n    end\n    def self.response\n      "Whatever."\n    end\n  end\n  \n  class Mute < Responder\n    def self.responds? message\n      !message || message.strip.empty?\n    end\n    def self.response\n      "Fine. Be that way!"\n    end\n  end\n  \n  class Shout < Responder\n    def self.responds? message\n      message.upcase == message\n    end\n    def self.response\n      "Woah, chill out!"\n    end\n  end\n  \n  class Query < Responder\n    def self.responds? message\n      message.end_with? "?"\n    end\n    def self.response\n      "Sure."\n    end\n  end\n  \n  RESPONSES = [\n   Mute,\n   Shout,\n   Query\n  ]\n  def hey message\n    get_responder(message).response\n  end\n  \n  private\n  def get_responder message\n    RESPONSES.find(->{Responder}) {|responder| responder.responds? message }\n  end\nend	\N	f	5	9	2014-05-24 16:35:13	2014-05-24 16:35:13	524	bob.rb
1058	41	b7561fda835a30bc20aed65c	superseded	haskell	anagram	module Anagram (anagramsFor) where\nimport Data.Char (toLower)\nimport Data.Map (Map, fromListWith)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word = filter ((canonical ==) . canonicalize)\n  where\n    canonical = canonicalize word\n    canonicalize :: String -> Map Char Int\n    canonicalize = fromListWith (+) . map key\n    key char = (toLower char, 1)	\N	f	0	1	2014-04-17 23:17:24	2014-04-17 23:17:24	525	anagram.hs
1059	41	dd0d31a6e2f6ad34fa4011e6	done	ruby	leap	class Year\n  def initialize(year)\n    @year = year.to_i\n  end\n\n  def leap?\n    if @year%4 == 0\n      @year%400 == 0 || @year%100 != 0\n    else\n      false\n    end\n  end\n\nend	\N	f	2	1	2014-03-16 15:02:35	2014-03-16 15:02:35	526	leap.rb
1061	41	2733633b4e79ecf4325e81b1	superseded	ruby	proverb	class Proverb\n    def initialize(*missing_things, qualifier: nil)\n        @missing_things = missing_things\n        @qualifier = qualifier + " " if qualifier\n        make_proverb\n    end\n\n    def to_s\n        @proverb\n    end\n\n    private\n\n    def make_proverb\n        @proverb = @missing_things.each_cons(2).reduce("") do |text, missing_pair|\n            text << line_from(missing_pair[0], missing_pair[1])\n        end\n        @proverb << last_line\n    end\n\n    def line_from(wanted, lost)\n        "For want of a #{wanted} the #{lost} was lost.\\n"\n    end\n\n    def last_line\n        "And all for the want of a #{@qualifier}#{@missing_things[0]}."\n    end\nend	\N	f	3	2	2014-03-11 12:08:12	2014-03-11 12:08:12	527	proverb.rb
1062	41	a733c10cbffddf80ce4f2342	superseded	ruby	proverb	class Proverb\r\n  def initialize(*missing_things, qualifier: nil)\r\n    @missing_things = missing_things\r\n    @qualifier = qualifier + " " if qualifier\r\n  end\r\n\r\n  def to_s\r\n    @proverb ||= make_proverb\r\n  end\r\n\r\n  private\r\n  def make_proverb\r\n    (0...@missing_things.length - 1).map { |i|\r\n        line_from @missing_things[i], @missing_things[i + 1]\r\n    }.join << last_line\r\n  end\r\n\r\n  def line_from(wanted, lost)\r\n    "For want of a #{wanted} the #{lost} was lost.\\n"\r\n  end\r\n\r\n  def last_line\r\n    "And all for the want of a #{@qualifier}#{@missing_things[0]}."\r\n  end\r\nend\r	\N	f	3	3	2014-03-21 06:20:53	2014-03-21 06:20:53	527	proverb.rb
1063	41	1833db23a1d1fe15ec0bd21f	superseded	ruby	proverb	class Proverb\n  def initialize(*missing_things, qualifier: nil)\n    @missing_things = missing_things\n    @qualifier = qualifier\n  end\n\n  def to_s\n    @proverb ||= make_proverb\n  end\n\n  private\n\n  def make_proverb\n    @missing_things.each_cons(2).map { |wanted, lost|\n      line_from(wanted, lost)\n    }.join << last_line\n  end\n\n  def line_from(wanted, lost)\n    "For want of a #{wanted} the #{lost} was lost.\\n"\n  end\n\n  def last_line\n    "And all for the want of a #{@qualifier} #{@missing_things[0]}.".squeeze(" ")\n  end\nend	\N	f	2	4	2014-03-31 01:19:50	2014-03-31 01:19:50	527	proverb.rb
1064	41	44fd00439518646d41743eef	done	ruby	proverb	class Proverb\r\n  def initialize(*missing_things, qualifier: nil)\r\n    @missing_things = missing_things\r\n    @first_wanted = @missing_things[0]\r\n    @qualifier = qualifier\r\n  end\r\n\r\n  def to_s\r\n    @proverb ||= make_proverb\r\n  end\r\n\r\n  private\r\n\r\n  def make_proverb\r\n    @missing_things.each_cons(2).map { |wanted, lost|\r\n      line_from(wanted, lost)\r\n    }.push(last_line).join\r\n  end\r\n\r\n  def line_from(wanted, lost)\r\n    "For want of a #{wanted} the #{lost} was lost.\\n"\r\n  end\r\n\r\n  def last_line\r\n    "And all for the want of a #{@qualifier} #{@first_wanted}.".squeeze(" ")\r\n  end\r\nend	\N	f	3	5	2014-04-09 03:54:23	2014-04-09 03:54:23	527	proverb.rb
1066	41	405765c118b5e8983f9c4ebb	superseded	clojure	bob	(ns bob)\n\n(defn shouting?\n  [message]\n  (= (clojure.string/upper-case message) message)\n  )\n\n(defn asking?\n  [message]\n  (= (last message) \\?))\n\n(defn silent?\n  [message]\n  (clojure.string/blank? message)\n  )\n\n(defn response-for\n  [message]\n  (cond\n   (silent? message)   "Fine, be that way."\n   (shouting? message) "Woah, chill out!"\n   (asking? message)   "Sure."\n   :else               "Whatever."\n   ))	\N	f	3	4	2014-03-08 04:57:51	2014-03-08 04:57:51	529	bob.clj
1067	41	c7e4ef5fa69dd764f4aecaf9	superseded	clojure	bob	(ns bob)\n\n(defn shouting? [message]\n  (= (clojure.string/upper-case message) message))\n\n(defn asking? [message]\n  (= (last message) \\?))\n\n(defn silent? [message]\n  (clojure.string/blank? message))\n\n(defn response-for [message]\n  (cond\n   (silent? message)   "Fine, be that way."\n   (shouting? message) "Woah, chill out!"\n   (asking? message)   "Sure."\n   :else               "Whatever."))	\N	f	3	5	2014-03-24 23:35:36	2014-03-24 23:35:36	529	bob.clj
1077	41	9b9c503fc48759872c0960fe	superseded	ruby	anagram	class Anagram\n  attr_reader :word\n  def initialize(word)\n    @word = word\n  end\n\n  def match(possible_matches)\n    possible_matches.select do |match|\n      word_permutations.include?(match)\n    end\n  end\n\n  def word_permutations\n    @permutations ||= begin\n      word.downcase.chars.permutation(word.length).map(&:join)\n    end\n  end\nend	\N	f	3	1	2014-04-18 13:07:01	2014-04-18 13:07:01	532	anagram.rb
1078	41	cf664b8eb152b87b574a5ab4	superseded	ruby	anagram	Anagram = Struct.new(:word) do\n  def match(possible_matches)\n    possible_matches.select do |match|\n      word_permutations.include?(match)\n    end\n  end\n\n  def word_permutations\n    @permutations ||= word.downcase.chars.permutation.map(&:join)\n  end\nend	\N	f	5	2	2014-04-29 04:46:54	2014-04-29 04:46:54	532	anagram.rb
1069	41	7245c44d10c250915d518522	superseded	clojure	bob	(ns bob)\n\n(defn shouting?\n  [message]\n  (= (clojure.string/upper-case message) message)\n  )\n\n(defn asking?\n  [message]\n  (.endsWith message "?"))\n\n(defn silent?\n  [message]\n  (clojure.string/blank? message)\n  )\n\n(defn response-for\n  [message]\n  (if (silent? message)         "Fine, be that way."\n      (if (shouting? message)   "Woah, chill out!"\n          (if (asking? message) "Sure."\n                                "Whatever."))))	\N	f	3	2	2014-04-19 20:54:53	2014-04-19 20:54:53	529	bob.clj
1070	41	789bb7c1e4f1a2dbd14a7951	superseded	clojure	bob	(ns bob)\n\n(defn shouting?\n  [message]\n  (= (clojure.string/upper-case message) message)\n  )\n\n(defn asking?\n  [message]\n  (.endsWith message "?"))\n\n(defn silent?\n  [message]\n  (clojure.string/blank? message)\n  )\n\n(defn response-for\n  [message]\n  (cond\n   (silent? message)   "Fine, be that way."\n   (shouting? message) "Woah, chill out!"\n   (asking? message)   "Sure."\n   :else               "Whatever."\n   ))	\N	f	0	3	2014-04-28 22:56:39	2014-04-28 22:56:39	529	bob.clj
1071	41	ac85b5bb0b346078d2d69a2c	done	clojure	bob	(ns bob\n  (:use [clojure.string :only [blank? upper-case]] ))\n\n(defn- shouting? [message]\n  (= (upper-case message) message))\n\n(defn- asking? [message]\n  (= (last message) \\?))\n\n(defn- silent? [message]\n  (blank? message))\n\n(defn response-for [message]\n  (cond\n   (silent? message)   "Fine, be that way."\n   (shouting? message) "Woah, chill out!"\n   (asking? message)   "Sure."\n   :else               "Whatever."))	\N	f	1	6	2014-05-12 13:23:13	2014-05-12 13:23:13	529	bob.clj
1073	41	06d11d5da699cf1292c079e2	pending	elixir	allergies	defmodule Allergies do\n\n  use Bitwise\n\n  @allergens [\n    {"eggs", 1}, \n    {"peanuts", 2},\n    {"shellfish", 4}, \n    {"strawberries", 8}, \n    {"tomatoes", 16}, \n    {"chocolate", 32},\n    {"pollen", 64},\n    {"cats", 128}\n  ]\n\n  @doc """\n  List the allergies for which the corresponding flag bit is true.\n\n  Allergies should be ordered, starting with the allergie with the least\n  significant bit ("eggs").\n  """\n  @spec list(non_neg_integer) :: [String.t]\n  def list(flags) do\n    lc {allergen, value} inlist @allergens, allergy_match?(flags, value), do: allergen\n  end\n\n  @doc """\n  Returns whether the corresponding flag bit in 'flags' is set for the item.\n  """\n  @spec allergic_to?(non_neg_integer, String.t) :: boolean\n  def allergic_to?(flags, item) do\n    value = Dict.fetch!(@allergens, item)\n    allergy_match?(flags, value)\n  end\n\n  defp allergy_match?(flags, value) do\n    (flags &&& value) === value\n  end\nend 	\N	f	0	3	2014-04-10 01:26:22	2014-04-10 01:26:22	530	allergies.exs
1074	41	6505f600e7a2fd772867bc8b	superseded	elixir	allergies	defmodule Allergies do\n\n  use Bitwise\n\n  @allergens [\n    {"eggs", 1}, \n    {"peanuts", 2},\n    {"shellfish", 4}, \n    {"strawberries", 8}, \n    {"tomatoes", 16}, \n    {"chocolate", 32},\n    {"pollen", 64},\n    {"cats", 128}\n  ]\n\n  @doc """\n  List the allergies for which the corresponding flag bit is true.\n\n  Allergies should be ordered, starting with the allergie with the least\n  significant bit ("eggs").\n  """\n  @spec list(non_neg_integer) :: [String.t]\n  def list(flags) do\n    lc {allergen, value} inlist @allergens, allergy_match?(flags, value), do: allergen\n  end\n\n  @doc """\n  Returns whether the corresponding flag bit in 'flags' is set for the item.\n  """\n  @spec allergic_to?(non_neg_integer, String.t) :: boolean\n  def allergic_to?(flags, item) do\n    h = HashDict.new(@allergens)\n    value = HashDict.fetch!(h, item)\n    allergy_match?(flags, value)\n  end\n\n  defp allergy_match?(flags, value) do\n    (flags &&& value) === value\n  end\nend 	\N	f	2	2	2014-04-10 15:17:45	2014-04-10 15:17:45	530	allergies.exs
1075	41	af32de023946f76a1f549620	done	haskell	beer-song	module Beer (sing, verse) where\r\n\r\nimport Data.Char\r\nimport Text.Printf\r\n\r\n\r\nsing :: Int -> Int -> String\r\nsing b a = concatMap ((++ "\\n") . verse) [b, (b - 1) .. a]\r\n\r\n\r\nverse :: Int -> String\r\nverse n = printf ([1, 2] >> "%s, %s.\\n") s1 s2 s3 s4\r\n  where\r\n    n' = (n - 1) `mod` 100\r\n    s1 = capitalize $ subVerseWall n\r\n    s2 = subVerse n\r\n    s3\r\n      | n == 1 = "Take it down and pass it around"\r\n      | n > 1 = "Take one down and pass it around"\r\n      | otherwise = "Go to the store and buy some more"\r\n    s4 = subVerseWall n'\r\n\r\n\r\nsubVerse :: Int -> String\r\nsubVerse n = prefix ++ " of beer"\r\n  where\r\n    prefix\r\n     | n == 0 = "no more bottles"\r\n     | n == 1 = "1 bottle"\r\n     | otherwise = shows n " bottles"\r\n\r\n\r\nsubVerseWall :: Int -> String\r\nsubVerseWall n = subVerse n ++ " on the wall"\r\n\r\n\r\ncapitalize :: String -> String\r\ncapitalize [] = []\r\ncapitalize (x : xs) = toUpper x : xs\r\n\r	\N	f	4	1	2014-04-14 01:03:29	2014-04-14 01:03:29	531	beer-song.hs
1076	41	beb543ac8c0d35c93a1ea573	done	ruby	anagram	Anagram = Struct.new(:word) do\n  def match(possible_matches)\n    possible_matches.select do |match|\n      alphabetize(word) == alphabetize(match)\n    end\n  end\n\n  def alphabetize(word)\n    alphabetizations[word] ||= word.downcase.chars.sort.join\n  end\n\n  def alphabetizations\n    @alphabetizations ||= {}\n  end\nend	\N	f	1	3	2014-03-17 06:41:09	2014-03-17 06:41:09	532	anagram.rb
1079	41	f56cfc93b5e6d1a6f1a06d40	hibernating	ruby	etl	class ETL\n  def self.transform(old)\n    new = Hash.new\n    old.each_pair do |points, letters|\n      letters.each{|letter| new[letter.downcase] = points}\n    end\n    new\n  end\nend	\N	f	4	1	2014-04-16 02:45:04	2014-04-16 02:45:04	533	etl.rb
1080	42	27f0efc4d9bbebbf1cf854c7	done	ruby	bob	class Bob\n\tdef hey(message)\n\t\tif message == nil\n\t\t\t'Fine. Be that way.'\n\t    elsif message.length == 0\n\t\t\t"Fine. Be that way."\n\t\telsif message.upcase == message\n\t\t\t"Woah, chill out!"\n\t\telsif message.end_with?("?") \n\t\t\t"Sure."\n\t\telse\n\t\t  "Whatever."\n\t\tend\n\tend\nend	\N	f	6	1	2014-03-26 15:02:31	2014-03-26 15:02:31	534	bob.rb
1082	42	4a3e6199115626ecc99ea746	superseded	ruby	beer-song	class Beer\n\n  def verse(qty)\n    if qty > 2\n      "#{qty} bottles of beer on the wall, #{qty} bottles of beer.\\nTake one down and pass it around, #{qty - 1} bottles of beer on the wall.\\n"\n    elsif qty == 2\n      "#{qty} bottles of beer on the wall, #{qty} bottles of beer.\\nTake one down and pass it around, #{qty - 1} bottle of beer on the wall.\\n"\n    elsif qty == 1\n      "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n    elsif qty == 0\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    end\n  end\n\n  def sing(start, final = 0)\n    song = ""\n    start.downto(final) {|number| song << verse(number) + "\\n"}\n    song\n  end\n\nend	\N	f	4	1	2014-02-05 06:55:40	2014-02-05 06:55:40	535	beer-song.rb
1083	42	6965509beb24e0688d8bcd95	pending	python	leap	class Year(object):\n\n    def __init__(self, year):\n        self.year = year\n\n    def is_leap_year(self):\n        return self.year % 4 == 0 and (not self.year % 100 == 0 or self.year % 400 == 0)	\N	f	0	1	2014-01-27 14:26:26	2014-01-27 14:26:26	536	year.py
1085	42	4c95eed2f552700d4951dc03	superseded	elixir	meetup	defmodule Meetup do\n\n  def monteenth(month, year),    do: do_find_teenth(month, year, 1)\n  def tuesteenth(month, year),   do: do_find_teenth(month, year, 2)\n  def wednesteenth(month, year), do: do_find_teenth(month, year, 3)\n  def thursteenth(month, year),  do: do_find_teenth(month, year, 4)\n  def friteenth(month, year),    do: do_find_teenth(month, year, 5)\n  def saturteenth(month, year),  do: do_find_teenth(month, year, 6)\n  def sunteenth(month, year),    do: do_find_teenth(month, year, 7)\n\n  defp do_find_week_day(range, month, year, wday) do\n    day_of_month = Enum.find range, fn(day) ->\n      :calendar.day_of_the_week(year, month, day) == wday end\n    {year, month, day_of_month}\n  end\n\n  defp do_find_teenth(month, year, wday) do\n    do_find_week_day(13..19, month, year, wday)\n  end\n\n  def first_monday(month, year),     do: do_find_nth(month, year, 1, 1)\n  def second_monday(month, year),    do: do_find_nth(month, year, 1, 2)\n  def third_monday(month, year),     do: do_find_nth(month, year, 1, 3)\n  def fourth_monday(month, year),    do: do_find_nth(month, year, 1, 4)\n  def first_tuesday(month, year),    do: do_find_nth(month, year, 2, 1)\n  def second_tuesday(month, year),   do: do_find_nth(month, year, 2, 2)\n  def third_tuesday(month, year),    do: do_find_nth(month, year, 2, 3)\n  def fourth_tuesday(month, year),   do: do_find_nth(month, year, 2, 4)\n  def first_wednesday(month, year),  do: do_find_nth(month, year, 3, 1)\n  def second_wednesday(month, year), do: do_find_nth(month, year, 3, 2)\n  def third_wednesday(month, year),  do: do_find_nth(month, year, 3, 3)\n  def fourth_wednesday(month, year), do: do_find_nth(month, year, 3, 4)\n  def first_thursday(month, year),   do: do_find_nth(month, year, 4, 1)\n  def second_thursday(month, year),  do: do_find_nth(month, year, 4, 2)\n  def third_thursday(month, year),   do: do_find_nth(month, year, 4, 3)\n  def fourth_thursday(month, year),  do: do_find_nth(month, year, 4, 4)\n  def first_friday(month, year),     do: do_find_nth(month, year, 5, 1)\n  def second_friday(month, year),    do: do_find_nth(month, year, 5, 2)\n  def third_friday(month, year),     do: do_find_nth(month, year, 5, 3)\n  def fourth_friday(month, year),    do: do_find_nth(month, year, 5, 4)\n  def first_saturday(month, year),   do: do_find_nth(month, year, 6, 1)\n  def second_saturday(month, year),  do: do_find_nth(month, year, 6, 2)\n  def third_saturday(month, year),   do: do_find_nth(month, year, 6, 3)\n  def fourth_saturday(month, year),  do: do_find_nth(month, year, 6, 4)\n  def first_sunday(month, year),     do: do_find_nth(month, year, 7, 1)\n  def second_sunday(month, year),    do: do_find_nth(month, year, 7, 2)\n  def third_sunday(month, year),     do: do_find_nth(month, year, 7, 3)\n  def fourth_sunday(month, year),    do: do_find_nth(month, year, 7, 4)\n\n  defp do_find_nth(month, year, wday, n) do\n    {y, m, d} = do_find_week_day(1..7, month, year, wday)\n    nth_day = d + (n-1) * 7\n    {y, m, nth_day}\n  end\n\n  def last_monday(month, year),    do: do_find_last(month, year, 1)\n  def last_tuesday(month, year),   do: do_find_last(month, year, 2)\n  def last_wednesday(month, year), do: do_find_last(month, year, 3)\n  def last_thursday(month, year),  do: do_find_last(month, year, 4)\n  def last_friday(month, year),    do: do_find_last(month, year, 5)\n  def last_saturday(month, year),  do: do_find_last(month, year, 6)\n  def last_sunday(month, year),    do: do_find_last(month, year, 7)\n\n  defp do_find_last(month, year, wday) do\n    ldom = :calendar.last_day_of_the_month(year, month)\n    do_find_week_day(ldom-6..ldom, month, year, wday)\n  end\n\nend	\N	f	3	1	2014-03-04 07:34:45	2014-03-04 07:34:45	537	meetup.exs
1086	42	83bf88e0323c555b90a2f283	done	haskell	hexadecimal	module Hexadecimal\n( hexToInt )\nwhere\n\nimport           Control.Applicative (pure, (<$>), (<*>))\nimport           Control.DeepSeq     (deepseq)\nimport           Data.Char           (isDigit, ord, toLower)\nimport           Data.List           (foldl')\nimport           Data.Maybe          (fromMaybe)\n\nnumOffset :: Int\nnumOffset = ord '0'\n\nalphaOffset :: Int\nalphaOffset = ord 'a' - 10\n\nhexToInt :: String -> Integer\nhexToInt xs = fromMaybe 0 sm\n  where sm = foldl' accFunc (Just 0) xs\n        accFunc acc c = calc `deepseq` calc\n          where calc = pure (+) <*> acc' <*> val c\n                  where acc' = (*16) <$> acc\n\nval :: Char -> Maybe Integer\nval c\n  | isDigit l = Just (fromIntegral (ord l - numOffset))\n  | isHexAlpha l = Just (fromIntegral (ord l - alphaOffset))\n  | otherwise = Nothing\n    where l = toLower c\n          isHexAlpha a = a >= 'a' && a <= 'f'	\N	f	3	2	2014-01-21 12:08:51	2014-01-21 12:08:51	538	Hexadecimal.hs
1087	42	43d6a08061da96d8c290cf72	superseded	haskell	hexadecimal	module Hexadecimal\n( hexToInt )\nwhere\n\nimport           Control.Applicative (pure, (<$>), (<*>))\nimport           Data.Char           (ord, toLower)\nimport           Data.Maybe          (fromMaybe)\n\nhexToInt :: String -> Int\nhexToInt xs = fromMaybe 0 sm\n  where sm            = foldl accFunc (Just 0) xs\n        accFunc acc c = pure (+) <*> acc' <*> val c\n          where acc' = (*16) <$> acc\n\nval :: Char -> Maybe Int\nval c\n  | l `elem` ['0'..'9'] = Just (ord l - 48)\n  | l `elem` ['a'..'f'] = Just (ord l - 87)\n  | otherwise           = Nothing\n    where l = toLower c	\N	f	0	1	2014-03-20 06:49:58	2014-03-20 06:49:58	538	Hexadecimal.hs
1088	42	16328f519c0caf36da070749	pending	python	nucleotide-count	class DNA:\n    def __init__(self, strand):\n        self.strand = strand\n        self.uracils = {'U': 0}\n        \n    def count(self, ade=''):\n        if not ade or ade in self.uracils.keys():\n            return 0\n        else:\n            return self.nucleotide_counts(ade)\n    \n    def nucleotide_counts(self, ade=''):\n        nucleotides = {'A': 0, 'T': 0, 'C': 0, 'G': 0}\n        uracils = {'U':0}\n\n        for char in list(self.strand):\n            if char in nucleotides:\n                nucleotides[char] += 1\n            else:\n                pass\n        if ade:\n            try:\n                return nucleotides[ade]\n            except KeyError:\n                raise ValueError("%s is not a nucleotide." %ade)\n        else:\n            return nucleotides	\N	f	1	1	2014-04-10 10:22:32	2014-04-10 10:22:32	539	dna.py
1090	42	f8adee0117597377090d8531	done	ruby	grade-school	class School\n  attr_reader :db\n\n  def initialize(name)\n    @name = name\n    @db = {}\n  end\n\n  def add(student, grade)\n    @db[grade] ||= []\n    @db[grade] << student\n  end\n\n  def grade(grade)\n    @db[grade]\n  end\n\n  def sort\n    Hash[*@db.map { |k,v| [k, v.sort] }.sort.flatten(1)]\n  end\nend	\N	f	3	1	2014-02-07 05:19:00	2014-02-07 05:19:00	541	grade-school.rb
1092	42	82685c9b5d3c3577ac69ac12	pending	ruby	pig-latin	class PigLatin\n  def self.translate(input)\n    new(input).translate\n  end\n\n  attr_reader :original\n\n  def initialize(input)\n    @original = input\n  end\n\n  def translate\n    paths.each do |condition, outcome|\n      return outcome.call if condition\n    end\n  end\n\n  private\n\n  def paths\n    { true                     => lambda {consonant_translation},\n      starts_with_vowel_sound? => lambda {vowel_translation},\n      is_blend?(two)           => lambda {short_blend_translation},\n      is_blend?(three)         => lambda {long_blend_translation},\n      multiple_word_phrase?    => lambda {translate_phrase(original)}\n    }\n  end\n\n  def one\n    original[0]\n  end\n\n  def two\n    original[0,2]\n  end\n\n  def three\n    original[0,3]\n  end\n\n  def consonant_translation\n    original[1..-1] + one + "ay"\n  end\n\n\n\n  def starts_with_vowel_sound?\n    vowel_starts.any? { |v| [one, two].include?(v) }\n  end\n\n  def vowel_translation\n    original + "ay"\n  end\n\n\n\n  def is_blend?(letters)\n    blends.any? { |b| b == letters }\n  end\n\n  def short_blend_translation\n    original[2..-1] + two + "ay"\n  end\n\n  def long_blend_translation\n    original[3..-1] + three + "ay"\n  end\n\n\n\n  def multiple_word_phrase?\n    original.split.length > 1\n  end\n\n  def translate_phrase(phrase)\n    phrase.split.collect do |w|\n      PigLatin.translate(w)\n    end.join(" ")\n  end\n\n\n\n  def vowel_starts\n    ["a", "e", "i", "o", "u", "xr", "yt"]\n  end\n\n  def blends\n    ["ch", "qu", "squ", "th", "thr", "sch"]\n  end\n\nend	\N	f	3	2	2014-02-15 09:23:17	2014-02-15 09:23:17	542	pig_latin.rb
1093	42	6c86d59df2e721dac1aaa93f	superseded	clojure	anagram	(ns anagram\n  (:require [clojure.string :as str :only [split]]))\n\n(defn- normalize\n  [word]\n  (sort (rest (str/split word #""))))\n\n(defn- is-anagram\n  [subject word]\n  (= (normalize subject) (normalize word))\n  )\n\n(defn anagrams-for\n  [subject words]\n  (filter #(is-anagram subject %) words)\n  )	\N	f	4	1	2014-01-28 01:12:52	2014-01-28 01:12:52	543	anagram.clj
1094	42	0f92ae1747128bbf3a8ed1d6	superseded	clojure	anagram	(ns anagram)\n\n(defn anagrams-for\n  [subject words]\n  (let\n    [subject_char_freq (frequencies subject)]\n    (filter #(= subject_char_freq (frequencies %)) words)))	\N	f	4	2	2014-04-01 16:58:47	2014-04-01 16:58:47	543	anagram.clj
1095	42	31f61206789116be3aa68cf6	superseded	clojure	anagram	(ns anagram)\n\n(defn anagrams-for\n  [subject words]\n  (let\n    [subject-char-freq (frequencies subject)]\n    (filter #(= subject-char-freq (frequencies %)) words)))	\N	f	1	3	2014-04-05 11:15:27	2014-04-05 11:15:27	543	anagram.clj
1096	42	204930b99f3f4175b396cf87	done	clojure	anagram	(ns anagram)\n\n(defn anagrams-for\n  [subject words]\n  (let [subject-char-freq (frequencies subject)]\n    (filter #(= subject-char-freq (frequencies %)) words)))	\N	f	1	4	2014-04-14 10:56:03	2014-04-14 10:56:03	543	anagram.clj
1097	42	63aaebe43b7e16fc2767587d	hibernating	javascript	anagram	var Anagram = function (baseword)\n{\n  this.baseword = baseword;\n}\n\nAnagram.prototype.match = function (wordlist)\n{\n  var result = [];\n  for (i in wordlist)\n  {\n    var word = wordlist[i];\n    if (word.length == this.baseword.length)\n    {\n      var allFound = true\n      for (var j = 0; j < word.length; j++)\n      {\n        character = word.charAt(j);\n        if (this.baseword.indexOf(character) == -1)\n        {  \n          allFound = false;\n          break;\n        }\n      } \n      if (allFound)\n        result.push(word);\n    }\n  }\n  return result;\n}\nmodule.exports = Anagram;	\N	f	0	1	2014-03-02 01:36:27	2014-03-02 01:36:27	544	anagram.js
1098	42	56531ddc647993f2fc1f50e1	done	go	leap	package leap\n\nfunc IsLeap(year int) bool {\n\treturn year%400 == 0 || year%4 == 0 && year%100 != 0\n}	\N	f	5	1	2014-04-05 17:54:17	2014-04-05 17:54:17	545	leap.go
1099	42	208dcaa4494b7bad7f7b8a69	hibernating	javascript	bob	var Bob = function(){\n  this.hey = function(string){\n    var phrase = new Phrase(string);\n\n    if(phrase.isEmpty()){\n      return "Fine. Be that way!";\n    }else if(phrase.isYelled()){\n      return "Woah, chill out!";\n    }else if(phrase.isQuestion()){\n      return "Sure.";\n    }else{\n      return "Whatever."\n    }\n  }\n};\n\nvar Phrase = function(phrase){\n  this.isEmpty = function(){\n    return (phrase.trim().length == 0);\n  };\n\n  this.isYelled = function(){\n    if(phrase.match(/[A-Za-z]/)){\n      return phrase.toUpperCase() == phrase;\n    }else{\n      return false;\n    }\n  };\n\n  this.isQuestion = function(){\n    var length = phrase.length;\n    return phrase.charAt(length - 1) == '?';\n  };\n};\n\nmodule.exports = Bob;	\N	f	4	1	2014-02-14 02:04:28	2014-02-14 02:04:28	546	bob.js
1112	43	652a8fb277eac93efc7fa16b	done	javascript	scrabble-score	var values = {\n  1: 'aeioulnrst',\n  2: 'dg',\n  3: 'bcmp',\n  4: 'fhvwy',\n  5: 'k',\n  8: 'jx',\n  10: 'qz'\n}\n\nfunction letterValue(letter) {\n  for (var score in values) {\n    if (~values[score].indexOf(letter)) return +score;\n  }\n}\n\nfunction sum(arr) {\n  return arr.reduce(function(a, b) { return a + b; }, 0);\n}\n\nexports.score = function(word) {\n  var letters = (word || '').toLowerCase().split('');\n  return sum(letters.map(letterValue));\n};	\N	f	1	1	2013-11-29 13:57:54	2013-11-29 13:57:54	555	scrabble-score.js
1101	42	bdaf3c49014292d58657e68f	hibernating	python	rna-transcription	class DNA():\n    \n    def __init__(self, dna):\n        self.dna = dna\n    \n    def to_rna(self):\n        rna = self.dna.replace("T", "U")\n        return rna	\N	f	5	1	2014-04-06 10:34:24	2014-04-06 10:34:24	548	dna.py
1102	42	1f6f21368ec508ea780fb945	superseded	elixir	bob	defmodule Teenager do\n  def hey(input) do\n    cond do\n      silence?(input)  -> "Fine. Be that way!"\n      yelling?(input)  -> "Woah, chill out!"\n      question?(input) -> "Sure."\n      true             -> "Whatever."\n    end\n  end\n\n  defp silence?(input),  do: String.strip(input) == ""\n  defp yelling?(input),  do: String.upcase(input) == input\n  defp question?(input), do: String.ends_with?("?")\n  end\nend	\N	f	3	2	2014-02-02 00:54:43	2014-02-02 00:54:43	549	bob.exs
1103	42	7e90caf62624fe72ee2002df	superseded	elixir	bob	defmodule Teenager do\n  def hey(input) do\n    cond do\n      silence?(input) -> "Fine. Be that way!"\n      yelling?(input) -> "Woah, chill out!"\n      question?(input) -> "Sure."\n      true -> "Whatever."\n    end\n  end\n\n  def silence?(input) do\n    String.strip(input) == ""\n  end\n\n  def yelling?(input) do\n    String.upcase(input) == input\n  end\n\n  def question?(input) do\n    String.last(input) == "?"\n  end\nend	\N	f	3	1	2014-02-11 18:27:10	2014-02-11 18:27:10	549	bob.exs
1104	42	89f7cf73d9be763fcca1aa04	done	elixir	bob	defmodule Teenager do\n  def hey(input) do\n    cond do\n      silence?(input)  -> "Fine. Be that way!"\n      yelling?(input)  -> "Woah, chill out!"\n      question?(input) -> "Sure."\n      true             -> "Whatever."\n    end\n  end\n\n  defp silence?(input),  do: String.strip(input) == ""\n  defp yelling?(input),  do: String.upcase(input) == input\n  defp question?(input), do: String.ends_with?(input, "?")\nend	\N	f	3	3	2014-03-01 08:52:28	2014-03-01 08:52:28	549	bob.exs
1105	42	09123e0937e6b490de626347	superseded	elixir	leap	defmodule Year do\n  @doc """\n  Returns whether 'year' is a leap year.\n\n  A leap year occurs:\n\n  on every year that is evenly divisible by 4\n    except every year that is evenly divisible by 100\n      except every year that is evenly divisible by 400.\n  """\n  @spec leap_year?(non_neg_integer) :: boolean\n  def leap_year?(year) do\n    four_years(year) && (four_hundred_years(year) || not one_hundred_years(year))\n  end\n\n  defp four_years(year) do\n    rem(year, 4) == 0\n  end\n\n  defp four_hundred_years(year) do\n    rem(year, 400) == 0\n  end\n\n  defp one_hundred_years(year) do\n    rem(year, 100) == 0\n  end\nend	\N	f	0	1	2014-02-11 02:18:36	2014-02-11 02:18:36	550	leap.exs
1106	42	8eab3adeeaeb1893e2ec78b7	done	elixir	leap	defmodule Year do\n  @doc """\n  Returns whether 'year' is a leap year.\n\n  A leap year occurs:\n\n  on every year that is evenly divisible by 4\n    except every year that is evenly divisible by 100\n      except every year that is evenly divisible by 400.\n  """\n  @spec leap_year?(non_neg_integer) :: boolean\n  def leap_year?(year) do\n    multiple_of?(year, 4) &&\n      (multiple_of?(year, 400) || not multiple_of?(year, 100))\n  end\n\n  defp multiple_of?(year, interval) do\n    rem(year, interval) == 0\n  end\nend	\N	f	2	2	2014-04-04 04:43:53	2014-04-04 04:43:53	550	leap.exs
1107	43	28596c9a4768969c2fd65b18	superseded	clojure	phone-number	(ns phone (:require [clojure.string :as str]))\n\n(def phone-number-length 10)\n\n(defn- clean-number [input]\n  (let [digits (str/replace input #"[^\\d]" "")]\n    (if \n      (and \n        (= (count digits) (+ 1 phone-number-length)) \n        (= \\1 (first digits)))\n      (subs digits 1)\n      digits)))\n\n(defn- is-valid [digits]\n  (= 10 (count digits)))\n\n(defn number [input]\n  (let [digits (clean-number input)]\n    (let [length (count digits) \n          invalid "0000000000"]\n      (if (is-valid digits) \n        digits\n        invalid))))\n\n(defn area-code [input]\n  (let [digits (clean-number input)]\n    (subs digits 0 3)))\n\n(defn pretty-print [input]\n  (let [digits (clean-number input)]\n    (let [area (area-code digits)\n          prefix (subs digits 3 6)\n          line (subs digits 6)]\n      (format "(%s) %s-%s" area prefix line))))	\N	f	1	1	2013-12-29 01:41:22	2013-12-29 01:41:22	551	phone-number.clj
1108	43	24d03b9cea6e640cf64b5977	done	clojure	phone-number	(ns phone \n  (:require [clojure.string :as str]))\n\n(def phone-number-length 10)\n\n(defn- clean-number [input]\n  (let [digits (str/replace input #"[^\\d]" "")]\n    (if \n      (and \n        (= (count digits) (+ 1 phone-number-length)) \n        (= \\1 (first digits)))\n      (subs digits 1)\n      digits)))\n\n(defn- is-valid [digits]\n  (= 10 (count digits)))\n\n(defn number [input]\n  (let [digits (clean-number input)]\n    (let [length (count digits) \n          invalid "0000000000"]\n      (if (is-valid digits) \n        digits\n        invalid))))\n\n(defn area-code [input]\n  (let [digits (clean-number input)]\n    (subs digits 0 3)))\n\n(defn pretty-print [input]\n  (let [digits (clean-number input)]\n    (let [area (area-code digits)\n          prefix (subs digits 3 6)\n          line (subs digits 6)]\n      (format "(%s) %s-%s" area prefix line))))	\N	f	1	2	2014-01-05 18:04:32	2014-01-05 18:04:32	551	phone-number.clj
1109	43	2884afdcdd89282fa344d286	hibernating	ruby	bob	class Bob\n\n\tdef hey(message)\n\n\t\tif message.end_with?("?")\n\t\t\t"Sure."\n\t\telsif message.scan(/[!]/) && message == message.upcase\n\t\t\t"Woah, chill out!"\n\t\telsif message.empty?\n\t\t\t"Fine, Be that way!"\n\t\telse\n\t\t\t"Whatever."\n\t\tend\n\tend\nend	\N	f	2	1	2014-02-04 03:16:03	2014-02-04 03:16:03	552	bob.rb
1110	43	5744de1bf2f1476a9c0587ca	done	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(collection)\n    collection.select do |candidate|\n       not_same_word(word, candidate) && letters_match(word, candidate)\n    end\n  end\n\n  private\n\n  def not_same_word(word, candidate)\n    word.downcase != candidate.downcase\n  end\n\n  def letters_match(original, candidate)\n    split_word(original).sort == split_word(candidate).sort\n  end\n\n  def split_word(word)\n    word.downcase.chars\n  end\n\nend	\N	f	1	1	2013-11-15 23:52:18	2013-11-15 23:52:18	553	anagram.rb
1111	43	8e2938346513f9f83de7427a	pending	ruby	leap	class Year\n\n  def self.leap?(num)\n    if num % 4 == 0\n      if (num % 400 != 0) && (num % 100 == 0)\n        return false\n      else\n        return true\n      end\n    end\n\n  end\nend	\N	f	1	1	2013-11-21 22:41:21	2013-11-21 22:41:21	554	year.rb
1125	43	65e0b261dbaa6af9a1fb3484	done	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n  if year % 400 == 0 {\n    return true\n  } else if year % 100 == 0 {\n    return false\n  } else if year % 4 == 0 {\n    return true\n  } else {\n    return false\n  }\n}	\N	f	1	1	2014-01-12 02:53:30	2014-01-12 02:53:30	564	leap.go
1114	43	388561c5ea15d3136ee77b1a	superseded	clojure	bob	(ns bob (:require [clojure.string :refer [trim upper-case blank?]]))\n\n(defn is-all-uppercase? [string]\n\t(= string (upper-case string)))\n\n(defn is-question? [string]\n\t(.endsWith string "?"))\n\n(defn response-for [question]\n\t(cond \n\t\t(blank? question) "Fine. Be that way!"\n\t\t(is-all-uppercase? question) "Woah, chill out!"\n\t\t(is-question? question) "Sure."\n\t \t:default "Whatever."))	\N	f	1	2	2014-02-24 11:01:46	2014-02-24 11:01:46	556	bob.clj
1115	43	ae9f964af5bd2c107cb97e2c	superseded	clojure	bob	(ns bob)\n(use '[clojure.string :only (trim upper-case)])\n\n(defn response-for [question]\n\t(cond \n\t\t(= "" (trim question)) "Fine. Be that way!"\n\t\t(= question (upper-case question)) "Woah, chill out!"\n\t\t(.endsWith question "?") "Sure."\n\t \t:default "Whatever."))	\N	f	1	1	2014-04-16 07:25:29	2014-04-16 07:25:29	556	bob.clj
1117	43	d6074cb12e037e8e150bc526	done	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\r\nimport qualified Data.Map.Strict   as M\r\nimport           Data.List (foldl')\r\n\r\ntype Nucleotide    = Char\r\ntype NucleotideMap = M.Map Nucleotide Int\r\n\r\nisNucleotide :: Nucleotide -> Bool\r\nisNucleotide c = c `elem` "ACGTU"\r\n\r\ncount :: Nucleotide -> [Nucleotide] -> Int\r\ncount nucleotide nucleotides\r\n  | isNucleotide nucleotide = length $ filter (==nucleotide) nucleotides\r\n  | otherwise      = error $ "invalid nucleotide " ++ show nucleotide\r\n\r\nnucleotideCounts :: [Nucleotide] -> NucleotideMap\r\nnucleotideCounts nucleotides = foldl' updateNucleotideMap emptyNucleotideMap nucleotides\r\n  where\r\n    updateNucleotideMap nucleotideMap nucleotide = M.insertWith (+) nucleotide 1 nucleotideMap\r\n    emptyNucleotideMap = M.fromList [('A', 0), ('C', 0), ('G', 0), ('T', 0)]\r	\N	f	1	2	2013-12-29 02:29:15	2013-12-29 02:29:15	557	DNA.hs
1118	43	04a2f34ca90e5d9dc8538e66	done	python	word-count	from collections import Counter\nfrom re import findall\n\nclass Phrase(object):\n    def __init__(self, phrase):\n        self.phrase = phrase\n    \n    def word_count(self):\n        return Counter(i.lower() for i in findall("\\w+", self.phrase))	\N	f	1	1	2013-11-13 04:53:26	2013-11-13 04:53:26	558	word-count.py
1119	43	8416e83abe2f8fd4f120410f	done	python	anagram	class Anagram:\n    def __init__(self, word):\n        self.word = word\n\n    def match(self, x):\n        return [a for a in x if self.anagrams(a, self.word)]\n\n    def anagrams(self, a, b):\n        sort = lambda x: ''.join(sorted(x.lower()))\n        return a != b and sort(a) == sort(b)	\N	f	1	1	2013-12-12 11:15:02	2013-12-12 11:15:02	559	anagram.py
1120	43	8fff6cca661e2332be94da1c	done	haskell	binary-search-tree	module BST ( BST, bstLeft, bstRight, bstValue,\n             singleton, insert, fromList, toList\n           ) where\nimport Data.List (foldl')\nimport Control.Applicative ((<$>), (<|>))\nimport Data.Monoid ((<>))\nimport Data.Maybe (fromJust)\n\ndata BST a = Node { bstValue :: a\n                  , bstLeft :: Maybe (BST a)\n                  , bstRight :: Maybe (BST a) }\n             deriving (Show, Eq)\n\nsingleton :: Ord a => a -> BST a\nsingleton x = Node x Nothing Nothing\n\ninsert :: Ord a => a -> BST a -> BST a\ninsert x n =\n  if bstValue n >= x\n  then n { bstLeft  = insert x <$> bstLeft  n <|> Just (singleton x) }\n  else n { bstRight = insert x <$> bstRight n <|> Just (singleton x) }\n\nfromList :: Ord a => [a] -> BST a\nfromList (x:xs) = foldl' (flip insert) (singleton x) xs\nfromList [] = error "tree must not be empty"\n\ntoList :: BST a -> [a]\ntoList (Node x l r) = fromJust $ (toList <$> l) <> Just [x] <> (toList <$> r)	\N	f	0	1	2014-02-01 07:17:45	2014-02-01 07:17:45	560	binary-search-tree.hs
1121	43	3f65941978717dae35983716	done	ruby	hamming	module Hamming\n\n  module_function\n  def compute strand, other_strand\n    strand_contents = [strand, other_strand].map(&:chars)\n    shorter, longer = strand_contents.sort_by(&:length)\n    shorter.zip(longer).count { |a, b| a != b }\n  end\n\nend	\N	f	2	1	2014-01-13 15:08:18	2014-01-13 15:08:18	561	hamming.rb
1122	43	ef39212e37089d18b5efa948	pending	javascript	bob	var Bob = function(){};\n\nBob.prototype.hey = function() {\n\treturn "Whatever.";\n};	\N	f	1	1	2013-12-14 09:36:48	2013-12-14 09:36:48	562	bob_test.js
1123	43	b0000d0bf25e3517e75c26be	superseded	elixir	nucleotide-count	defmodule DNA do\n  @nucleotides [?A, ?C, ?G, ?T]\n\n  @doc """\n  Counts individual nucleotides in a DNA strand.\n\n  ## Examples\n\n  iex> DNA.count('AATAA', ?A)\n  4\n\n  iex> DNA.count('AATAA', ?T)\n  1\n  """\n  @spec count([char], char) :: non_neg_integer\n  def count(strand, nucleotide) do\n    Dict.get(nucleotide_counts(strand), nucleotide) || 0\n  end\n\n\n  @doc """\n  Returns a summary of counts by nucleotide.\n\n  ## Examples\n\n  iex> DNA.nucleotide_counts('AATAA')\n  HashDict.new [{?A, 4}, {?T, 1}, {?C, 0}, {?G, 0}]\n  """\n  @spec nucleotide_counts([char]) :: HashDict.t\n  def nucleotide_counts(strand) do\n    default = HashDict.new([{?A, 0}, {?T, 0}, {?C, 0}, {?G, 0}])\n    Enum.reduce(strand, default, fn(nucleotide, acc) ->\n      Dict.update(acc, nucleotide, 1, &(&1 + 1))\n    end)\n  end\nend	\N	f	1	1	2013-12-28 14:06:27	2013-12-28 14:06:27	563	dna.exs
1124	43	61cbd330b2622fb9230fe029	done	elixir	nucleotide-count	defmodule DNA do\n  @nucleotides [?A, ?C, ?G, ?T]\n\n  @doc """\n  Counts individual nucleotides in a DNA strand.\n\n  ## Examples\n\n  iex> DNA.count('AATAA', ?A)\n  4\n\n  iex> DNA.count('AATAA', ?T)\n  1\n  """\n  @spec count([char], char) :: non_neg_integer\n  def count(strand, nucleotide) do\n    Dict.get(nucleotide_counts(strand), nucleotide, 0)\n  end\n\n\n  @doc """\n  Returns a summary of counts by nucleotide.\n\n  ## Examples\n\n  iex> DNA.nucleotide_counts('AATAA')\n  HashDict.new [{?A, 4}, {?T, 1}, {?C, 0}, {?G, 0}]\n  """\n  @spec nucleotide_counts([char]) :: HashDict.t\n  def nucleotide_counts(strand) do\n    default = HashDict.new([{?A, 0}, {?T, 0}, {?C, 0}, {?G, 0}])\n    Enum.reduce(strand, default, fn(nucleotide, acc) ->\n      Dict.update(acc, nucleotide, 1, &(&1 + 1))\n    end)\n  end\nend	\N	f	0	2	2014-03-16 00:36:25	2014-03-16 00:36:25	563	dna.exs
1127	43	5f1405cb3a83b2f9351d19c3	superseded	go	hamming	package hamming\n\nfunc Distance(strandA string, strandB string) int {\n\tdiffCount := 0\n\n\tfor i := 0; i < len(strandA) && i < len(strandB); i++ {\n\t\tif strandA[i] != strandB[i] {\n\t\t\tdiffCount++\n\t\t}\n\t}\n\n\treturn diffCount\n}	\N	f	1	1	2014-01-24 23:31:05	2014-01-24 23:31:05	566	hamming.go
1128	43	a1e6ad097c3a484eb40803a3	done	go	hamming	package hamming\n\nfunc Distance(strandA, strandB string) int {\n\tdiffCount := 0\n\n\tfor i := 0; i < len(strandA) && i < len(strandB); i++ {\n\t\tif strandA[i] != strandB[i] {\n\t\t\tdiffCount++\n\t\t}\n\t}\n\n\treturn diffCount\n}	\N	f	1	2	2014-02-02 09:12:16	2014-02-02 09:12:16	566	hamming.go
1129	44	74a71c8df146eda29c0e965e	pending	haskell	bob	module Bob (responseFor) where\n\n  import Data.Char\n\n  responseFor :: String -> String\n  responseFor statement\n    | isNothing statement = "Fine. Be that way!"\n    | isYelling statement = "Woah, chill out!"\n    | isQuestion statement = "Sure."\n    | otherwise = "Whatever."\n\n  isQuestion :: String -> Bool\n  isQuestion statement =\n    not (null statement) &&\n    last statement == '?'\n\n  isYelling :: String -> Bool\n  isYelling statement =\n    all isUpper filtered && not (null filtered)\n    where filtered = filter isAlpha statement\n    \n  isNothing :: String -> Bool\n  isNothing = all isSpace	\N	f	1	1	2013-12-21 15:03:22	2013-12-21 15:03:22	567	bob.hs
1130	44	26dd9291936205d88e59b28d	done	ruby	grade-school	class School\n  attr_accessor :db\n\n  def initialize\n    @db = {}\n  end\n\n  def add(name,grade)\n    grade_has_records(grade) ? add_to_record(name,grade) : create_record(name,grade)\n  end\n\n  def grade_has_records(grade)\n    @db[grade]\n  end\n\n  def add_to_record(name,grade)\n    @db[grade] << name\n  end\n\n  def create_record(name,grade)\n    @db[grade] = [name]\n  end\n\n  def grade(grade)\n    @db[grade] || []\n  end\n\n  def sort\n    @db.sort.map{ |grade,names| {grade => names.sort} }.reduce({},:merge)\n  end\nend	\N	f	2	1	2014-03-26 14:03:27	2014-03-26 14:03:27	568	grade-school.rb
1131	44	f8fb568f0ba0b42d19bcb108	superseded	haskell	anagram	module Anagram (anagramsFor) where\nimport Data.List (sort)\nimport Data.Char (toLower)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word = filter ((/= toLowers word) . toLowers) . anagramsFor' word\n\nanagramsFor' :: String -> [String] -> [String]\nanagramsFor' word = filter ((== sort (toLowers word)) . sort . toLowers)\n\ntoLowers :: String -> String\ntoLowers = map toLower	\N	f	1	1	2013-11-26 18:32:50	2013-11-26 18:32:50	569	anagram.hs
1132	44	af67994e5455559544e7d453	done	haskell	anagram	module Anagram (anagramsFor) where\nimport Data.List (sort)\nimport Data.Char (toLower)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word = filter ((/= toLowers word) . toLowers) . anagramsFor' word\n\nanagramsFor' :: String -> [String] -> [String]\nanagramsFor' word = filter ((== normalize word) . normalize) where\n    normalize = sort . toLowers\n\ntoLowers :: String -> String\ntoLowers = map toLower	\N	f	0	2	2014-01-28 11:56:39	2014-01-28 11:56:39	569	anagram.hs
1133	44	d76a6b714a6b72c543b0da3d	superseded	ruby	word-count	class Phrase\n  def initialize(string)\n    @string = string.downcase\n  end\n\n  def word_count\n    words = @string.split(/\\W+/)\n    report = {}\n    words.each do |word|\n      report[word] ||= 0\n      report[word] += 1\n    end\n    report\n  end\n\nend	\N	f	1	1	2013-11-25 02:22:06	2013-11-25 02:22:06	570	word-count.rb
1134	44	aed97258b673aa073c8bbbe7	superseded	ruby	word-count	class Phrase\n  def initialize(string)\n    @string = string.downcase\n  end\n\n  def word_count\n    words = @string.split(/\\W+/)\n    words.each_with_object({}) do |word, hash|\n      hash[word] ||= 0\n      hash[word] += 1\n    end\n  end\n\nend	\N	f	2	2	2014-01-09 05:16:31	2014-01-09 05:16:31	570	word-count.rb
1135	44	ebbe12113c410f002de3b3d8	done	ruby	word-count	class Phrase\n  def initialize(string)\n    @string = string.downcase\n  end\n\n  def word_count\n    words = @string.split(/\\W+/)\n    words.each_with_object(Hash.new(0)) do |word, hash|\n      hash[word] += 1\n    end\n  end\n\nend	\N	f	4	3	2014-02-04 03:31:00	2014-02-04 03:31:00	570	word-count.rb
1136	44	e9c515fa2d3ec856d3346845	done	ruby	atbash-cipher	class Atbash\n\n  KEY = Hash[('a'..'z').zip(('a'..'z').to_a.reverse)]\n\n  def self.encode(value)\n    value.downcase.chars.map { |char| determine_encoded_char(char) }.join.gsub(/(.{5})/, '\\1 ').strip\n  end\n\n  private\n  def self.determine_encoded_char(char) \n    KEY.fetch(char) { |char| char.match(/\\d/) ? char : nil}\n  end\n\nend	\N	f	1	1	2013-12-09 05:43:37	2013-12-09 05:43:37	571	atbash-cipher.rb
1137	44	18edc9179e7dd8adc0ce866f	superseded	ruby	etl	class ETL\n  def self.transform(oldhash)\n    e = Hash.new()\n    oldhash.each do |k,v|\n      v.each do |l|\n        e[l.downcase] = k\n      end    \n    end\n    return e\n  end\nend	\N	f	2	1	2014-02-08 04:29:57	2014-02-08 04:29:57	572	etl.rb
1138	44	78be72cee2073b98aea93be6	pending	ruby	etl	# encoding: UTF-8\n# Clase ETL\nclass ETL\n  def self.transform(oldhash)\n    e = {}\n    oldhash.each do |k , v|\n      v.each do |l|\n        e[l.downcase] = k\n      end\n    end\n    e\n  end\nend	\N	f	3	2	2014-03-17 12:24:23	2014-03-17 12:24:23	572	etl.rb
1139	44	e0f06a446b21f8195d2fe037	pending	ruby	binary-search-tree	class Bst\n  attr_reader :data, :left, :right\n  def initialize datum\n    @data = datum\n  end\n  \n  def each &block\n    @left.each &block unless @left.nil?\n    yield data\n    @right.each &block unless @right.nil?\n  end\n  \n  def insert datum\n    if datum > data\n      insert_right datum\n    else\n      insert_left datum\n    end\n  end\n  \n  private\n  def insert_left datum\n    if @left.nil?\n      @left = Bst.new datum\n    else\n      @left.insert datum\n    end\n  end\n  \n  def insert_right datum\n    if @right.nil?\n      @right = Bst.new datum\n    else\n      @right.insert datum\n    end\n  end\nend	\N	f	1	1	2014-01-13 22:46:36	2014-01-13 22:46:36	573	bst.rb
1142	44	5493f82ac934ec6221839e6b	superseded	javascript	word-count	var Words = function (words) {\n  'use strict';\n\n  this.count = { };\n  this.words = [];\n\n  this.parseWords = function(words) {\n    var temp_words = words.replace(/[^\\w\\s]/gi, '').toLowerCase().split(' ');\n    return temp_words.filter(function(word){\n      return word != "";\n    });\n  }\n\n  this.wordCounted = function(word) {\n    if (this.count == 'undefined') { return false; }\n    return this.count[word];\n  }\n\n  this.addWord = function(word) {\n    this.count[word] = \n    this.words.filter(function(a_word){\n      return a_word === word;\n    }).length;\n  };\n\n  this.initialize = function(words){\n    this.words = this.parseWords(words);\n    for (var item in this.words) {\n      var word = this.words[item];\n      if (!this.wordCounted(word)) {\n        this.addWord(word);\n      }\n    }\n  };\n\n  this.initialize(words);\n};\n\nmodule.exports = Words;	\N	f	1	3	2014-04-16 03:46:08	2014-04-16 03:46:08	574	word-count.js
1143	44	8305b1c0b4331cd4443fd413	done	javascript	word-count	var Words = function (string) {\n  'use strict';\n\n  var removeSpecialCharacters = function(string){\n    return string.replace(/[^\\w\\s]/gi, '');\n  }\n\n\n  var parseWords = function(string) {\n    return string.toLowerCase().split(/\\s+/);\n  }\n\n  var reduceWordCount = function(words, word){\n      words[word] = (words[word]||0)+1;\n      return words;\n  }\n\n  this.count = parseWords(removeSpecialCharacters(string)).reduce(reduceWordCount, {});\n\n};\n\nmodule.exports = Words;	\N	f	1	4	2014-04-21 22:19:41	2014-04-21 22:19:41	574	word-count.js
1144	44	7a3c55e1145d5b67e383557e	superseded	ruby	anagram	class Anagram\n  def initialize word\n    @word = word\n  end\n\n  def match possible_anagrams\n    possible_anagrams.select { |word|  anagram? word }\n  end\n\n  def anagram? word\n    word.downcase != @word.downcase && sort(@word) == sort(word)\n  end\n\n  def sort word\n    word.downcase.split("").sort.join\n  end\nend	\N	f	1	1	2013-12-02 02:31:42	2013-12-02 02:31:42	575	anagram.rb
1145	44	c670f209b3d903337263e8d2	done	ruby	anagram	class Anagram\n  def initialize word\n    @word = word\n  end\n\n  def match(possible_anagrams)\n    possible_anagrams.select { |word|  anagram?(word) }\n  end\n\n  def anagram?(word)\n    word.downcase != @word.downcase && sort(@word) == sort(word)\n  end\n\n  def sort(word)\n    word.downcase.split("").sort.join\n  end\nend	\N	f	0	2	2014-04-21 19:06:36	2014-04-21 19:06:36	575	anagram.rb
1147	44	a44076ee9bc9473d5f5b8535	superseded	coffeescript	palindrome-products	module.exports = class Palindrome\n  constructor: (options = {})->\n    @minFactor = options.minFactor ? 1\n    @maxFactor = options.maxFactor ? 1\n    @factorList = {}\n  generate: ->\n    for i in [@minFactor..@maxFactor]\n      for j in [@minFactor..@maxFactor] when isPalindrome(i*j)\n        factors = @factorList[i*j] || []\n        factors.push [i,j]\n        @factorList[i*j] = factors\n    @factorList\n  smallest: ->\n    smallestValue = Object.keys(@factorList).sort(cmpStringByNumeric)[0]\n    smallest = @factorList[smallestValue]\n    value: parseInt(smallestValue)\n    factors: smallest\n  largest: ->\n    largestValue = Object.keys(@factorList).sort(cmpStringByNumeric).reverse()[0]\n    largest = @factorList[largestValue]\n    value: parseInt(largestValue)\n    factors: largest\n  cmpStringByNumeric = (a,b)->\n    if parseInt(a) < parseInt(b)\n      -1\n    else if parseInt(a) == parseInt(b)\n      0\n    else\n      1\n  isPalindrome = (num)->\n    num.toString() == num.toString().split('').reverse().join('')	\N	f	1	1	2013-11-29 14:24:22	2013-11-29 14:24:22	577	palindrome.coffee
1148	44	56d1e93725ec89ff08704e50	superseded	coffeescript	palindrome-products	module.exports = class Palindrome\n  class PalindromeObj\n    constructor: (@value, @factors = [])->\n    hasFactor: (cmpFactor)->\n      for factor in @factors\n        return true if factorsEqual(factor,cmpFactor)\n      false\n    @compare: (a,b)->\n      if a.value < b.value\n        -1\n      else if a.value == b.value\n        0\n      else\n        1\n    factorsEqual = (a,b)->\n      return true if a == b\n      return false if !a? || !b? || a.length != b.length\n      \n      for val,index in a\n        return false if val != b[index]\n      true\n        \n  constructor: (options = {})->\n    @minFactor = options.minFactor ? 1\n    @maxFactor = options.maxFactor ? 1\n    @range = [@minFactor..@maxFactor]\n    @palindromes = {}\n    @palindromesArray = palindromeArray @palindromes\n  generate: ->\n    for i in @range\n      for j in @range when isPalindrome(i*j)\n        factor = [i,j].sort()\n        product = i*j\n        palindrome = @palindromes[product] ? new PalindromeObj(product)\n        palindrome.factors.push(factor) unless palindrome.hasFactor factor\n        @palindromes[product] = palindrome\n    @palindromesArray = palindromeArray @palindromes\n  smallest: ->\n    @palindromesArray[0]\n  largest: ->\n    @palindromesArray.slice(-1)[0]\n  palindromeArray = (palindromes)->\n    (palindrome for value, palindrome of palindromes).sort(PalindromeObj.compare)\n  isPalindrome = (num)->\n    num.toString() == num.toString().split('').reverse().join('')	\N	f	1	2	2013-12-03 11:50:46	2013-12-03 11:50:46	577	palindrome.coffee
1150	44	04e2200edcd4391770847132	superseded	coffeescript	palindrome-products	class Palindromes\n  constructor: (options = {})->\n    @minFactor = options.minFactor ? 1\n    @maxFactor = options.maxFactor ? 1\n    @palindromes = {}\n  generate: ->\n    @palindromes = {}\n    @_array = null\n    range = [@minFactor..@maxFactor]\n    for i in range\n      for j in range when isPalindrome(i*j)\n        factor = [i,j].sort()\n        product = i*j\n        palindrome = @palindromes[product] ? new Palindrome(product)\n        @palindromes[product] = palindrome.insertFactor factor\n    this\n  smallest: ->\n    @toArray()[0]\n  largest: ->\n    @toArray().slice(-1)[0]\n  toArray: ()->\n    @_array ?= (palindrome for v, palindrome of @palindromes).sort(Palindrome.compare)\n\n  isPalindrome = (num)->\n    Palindrome.isValid(num)\n\n\nclass Palindrome\n  constructor: (@value)-> @factors = []\n  insertFactor: (factor)->\n    @factors.push(factor) if @isFactor(factor) and !@hasFactor(factor)\n    this\n  isFactor: (factor)->\n    factor[0]*factor[1] == @value\n  hasFactor: (cmpFactor)->\n    for factor in @factors\n      return true if factorsEqual(factor,cmpFactor)\n    false\n\n  @isValid: (num)-> num.toString() == num.toString().split('').reverse().join('')\n  @compare: (a,b)->\n    if a.value > b.value then 1 else if a.value == b.value then 0 else -1\n\n  factorsEqual = (a,b)->\n    return true if a == b\n    return false if !a? || !b? || a.length != b.length\n    \n    for val,index in a\n      return false if val != b[index]\n    true\n\nmodule.exports = Palindromes	\N	f	1	4	2014-01-28 03:09:46	2014-01-28 03:09:46	577	palindrome.coffee
1151	44	dda61259d0ac7f78d36883e1	done	coffeescript	palindrome-products	class Palindrome\n  constructor: (a,b)->\n    @value = a*b\n    @factors = [[a,b]]\n    @isValid = Palindrome.isValid(this.value)\n  insert: (a,b)->\n    @factors.push [a,b].sort() if @value == a*b\n  @isValid: (value)->\n    valString = value+""\n    valString == valString.split('').reverse().join('')\n  @compare: (a,b)->\n    if a.value < b.value then -1 else if a.value > b.value then 1 else 0\n\nclass Palindromes\n  constructor: (options = {})->\n    @max = options.maxFactor ? 10\n    @min = options.minFactor ? 1\n    @palindromes = []\n  generate: ->\n    @palindromes = objToArray(generatePalindromes(this)).sort(Palindrome.compare)\n  smallest: -> @palindromes[0];\n  largest: -> @palindromes[@palindromes.length-1];\n  generatePalindromes = (options)->\n    palindromes = {}\n    eachPalindromeCombination options.min,options.max, (a,b,value)->\n      palindromes[value] = new Palindrome(a,b) unless palindromes[value]?.insert(a,b)\n    palindromes\n  eachPalindromeCombination = (min,max,callback)->\n    for a in [min..max]\n      for b in [a..max] when Palindrome.isValid(value = a*b)\n        callback(a,b,value)\n        [a,b]\n  objToArray = (obj)->\n    val for key,val of obj\n    \n\nmodule.exports = Palindromes	\N	f	1	5	2014-03-31 11:43:15	2014-03-31 11:43:15	577	palindromes.coffee
1152	44	5af08377b8fa8d35434477e2	done	haskell	meetup	module Meetup (\r\n  Weekday(..)\r\n, Schedule(..)\r\n, meetupDay\r\n)  where\r\n\r\nimport           Data.Time.Calendar (fromGregorian)\r\n\r\n\r\ndata Weekday = Sunday | Monday | Tuesday | Wednesday | Thursday | Friday | Saturday deriving (Show, Ord, Eq)\r\n\r\n\r\ndata Schedule = Teenth | First | Second | Third | Fourth | Last deriving (Show, Ord, Eq)\r\n\r\nmeetupDay :: Schedule -> Weekday -> Integer -> Integer\r\nmeetupDay = undefined\r	\N	f	1	1	2013-12-14 20:27:36	2013-12-14 20:27:36	578	Meetup.hs
1153	44	979519dedec45fe2033904b0	done	python	bob	class Bob:\n  def hey(self, phrase):\n    if is_silence(phrase):\n      return 'Fine. Be that way!'\n    if is_shout(phrase):\n      return 'Woah, chill out!'\n    if is_question(phrase):\n      return 'Sure.'\n    return 'Whatever.'\n\ndef is_question(phrase):\n  return phrase.endswith('?')\n\ndef is_silence(phrase):\n  return not phrase or not phrase.strip()\n\ndef is_shout(phrase):\n  return phrase.isupper()	\N	f	1	3	2013-12-06 10:31:26	2013-12-06 10:31:26	579	bob.py
1154	44	d0afb03519d91e56020d8e7b	superseded	python	bob	class Bob:\n  def hey(self, phrase):\n    if is_silence(phrase):\n      return 'Fine. Be that way!'\n    if is_shout(phrase):\n      return 'Woah, chill out!'\n    if is_question(phrase):\n      return 'Sure.'\n    return 'Whatever.'\n\ndef is_question(phrase):\n  return phrase.endswith('?')\n\ndef is_silence(phrase):\n  return not phrase or phrase.strip() == ''\n\ndef is_shout(phrase):\n  return phrase.upper() == phrase	\N	f	1	1	2014-01-15 09:58:10	2014-01-15 09:58:10	579	bob.py
1155	44	cfec0fc544ac9a4ad53b1eba	superseded	python	bob	class Bob:\n  def hey(self, phrase):\n    if is_silence(phrase):\n      return 'Fine. Be that way!'\n    if is_shout(phrase):\n      return 'Woah, chill out!'\n    if is_question(phrase):\n      return 'Sure.'\n    return 'Whatever.'\n\ndef is_question(phrase):\n  return phrase.endswith('?')\n\ndef is_silence(phrase):\n  return not phrase or phrase.strip() == ''\n\ndef is_shout(phrase):\n  return phrase.isupper()	\N	f	1	2	2014-01-18 03:54:53	2014-01-18 03:54:53	579	bob.py
1156	44	8a5b4d5f1902c98e791dc90d	superseded	ruby	bob	# encoding: utf-8\n\nclass Bob\n  def hey appeal\n    if appeal.match(/\\A[^a-z]+\\Z/) && appeal.match(/[A-Z]/) # shouting is no lowercase letter and at least one uppercase letter\n      return 'Woah, chill out!'\n    elsif appeal.match(/\\?\\Z/) # question\n      return 'Sure.'\n    elsif appeal.match(/\\A\\s*\\Z/) # no statement\n      return 'Fine. Be that way!'\n    else\n      return 'Whatever.'\n    end\n  end\nend	\N	f	2	1	2014-01-27 03:23:09	2014-01-27 03:23:09	580	bob.rb
1157	44	b3b997cf7d175f40b537e5a2	superseded	ruby	bob	# encoding: utf-8\n\nclass Bob\n  def hey appeal\n    if shouting?(appeal)\n      return 'Woah, chill out!'\n    elsif question?(appeal)\n      return 'Sure.'\n    elsif no_statement?(appeal)\n      return 'Fine. Be that way!'\n    else\n      return 'Whatever.'\n    end\n  end\n\n  protected\n  def question? appeal\n    appeal.match(/\\?\\Z/)\n  end\n\n  def shouting? appeal\n    appeal.match(/\\A[^a-z]+\\Z/) && appeal.match(/[A-Z]/)\n  end\n\n  def no_statement? appeal\n    appeal.match(/\\A\\s*\\Z/)\n  end\nend	\N	f	1	2	2014-02-15 03:58:13	2014-02-15 03:58:13	580	bob.rb
1160	44	722c5468f17c93fb4d4c2097	done	haskell	point-mutations	module DNA (hammingDistance) where\r\n\r\nhammingDistance :: String -> String -> Int\r\nhammingDistance original other =\r\n    length $ filter id $ zipWith (/=) original other\r	\N	f	1	1	2014-02-10 04:28:30	2014-02-10 04:28:30	582	DNA.hs
1161	44	33711f3aa889c9a68c800a81	hibernating	python	rna-transcription	class DNA:\n    def __init__(self, dna):\n        self.dna = dna\n\n    def to_rna(self):\n        return self.dna.replace('T', 'U')	\N	f	1	1	2014-02-11 20:55:10	2014-02-11 20:55:10	583	dna.py
1163	44	d86708604be79c7ee66b3196	pending	clojure	phone-number	;;;; Phone Number\n;;;;\n;;;; Write a program that cleans up user-entered phone numbers so that\n;;;; they can be sent SMS messages.\n;;;;\n;;;; The rules are as follows:\n;;;;\n;;;; * If the phone number is less than 10 digits assume that it is bad number\n;;;; * If the phone number is 10 digits assume that it is good\n;;;; * If the phone number is 11 digits and the first number is 1, trim the 1 and use the first 10 digits\n;;;; * If the phone number is 11 digits and the first number is not 1, then it is a bad number\n;;;; * If the phone number is more than 11 digits assume that it is a bad number\n\n(ns phone)\n\n(def invalid-number "0000000000")\n\n(defn- validate-number\n  [n]\n  (let [length (count n)]\n       (cond\n         (= length 10) n\n         (and (= length 11) (= (first n) "1")) (rest n)\n         (and (= length 11) (not= (first n) "1")) invalid-number\n         :else invalid-number)))\n\n(defn number\n  [n]\n  (apply str (validate-number (re-seq #"\\w" n))))\n\n(defn area-code\n  [n]\n  (apply str (take 3 n)))\n\n(defn- take-three\n  "Return the first 3 characters in the string"\n  [n]\n  (apply str (take 3 n)))\n\n(defn pretty-print\n  [n]\n  (let [n (number n)]\n       (format "(%s) %s-%s" \n               (take-three n)\n               (take-three (take-last 7 n))\n               (apply str (take-last 4 n)))))	\N	f	1	2	2014-01-11 15:01:24	2014-01-11 15:01:24	584	phone.clj
1164	45	b7313208b72616c0cd0a5597	done	javascript	bob	var Bob = function() {};\nBob.prototype.hey = function(message) {\n  if (message === message.toUpperCase()) {\n    return "Woah, chill out!"\n  }\n  if (message.indexOf("?") === message.length -1) {\n    return "Sure."\n  }\n  return "Whatever.";\n};\n// module.exports = Bob;	\N	f	1	2	2013-11-05 04:27:48	2013-11-05 04:27:48	585	bob.js
1165	45	78df9adcf2c7d2ebc96de0d2	superseded	javascript	bob	var Bob = function() {};\nBob.prototype.hey = function() {\n  // body...\n  return "Whatever.";\n};\n// module.exports = Bob;	\N	f	1	1	2013-11-26 12:11:32	2013-11-26 12:11:32	585	bob.js
1166	45	0439a19002819ae5a0048930	done	haskell	binary	module Binary\n  ( toDecimal\n  ) where\n\nimport Data.List (foldl')\n\ntoDecimal :: String -> Integer\ntoDecimal = foldl' f 0 where\n  f n x = n * 2 + digit x\n  digit '1' = 1\n  digit  _  = 0	\N	f	1	2	2013-12-18 05:02:40	2013-12-18 05:02:40	586	binary.hs
1167	45	8130f0f14c676bcf642c6077	superseded	haskell	binary	module Binary\n  ( toDecimal\n  ) where\n\ntoDecimal :: String -> Integer\ntoDecimal = foldl f 0 where\n  f n x = n * 2 + digit x\n  digit '1' = 1\n  digit  _  = 0	\N	f	0	1	2013-12-22 11:12:23	2013-12-22 11:12:23	586	binary.hs
1168	45	7c94258744869807193a75d9	done	haskell	allergies	module Allergies\n  ( Allergen(..)\n  , isAllergicTo\n  , allergies\n  ) where\n\nimport Data.Bits\n\ndata Allergen\n      = Eggs\n      | Peanuts\n      | Shellfish\n      | Strawberries\n      | Tomatoes\n      | Chocolate\n      | Pollen\n      | Cats\n      deriving (Enum, Show, Eq, Bounded)\n\nisAllergicTo :: Allergen -> Int -> Bool\nisAllergicTo a i = testBit i (fromEnum a)\n\nallergies :: Int -> [Allergen]\nallergies i = filter (flip isAllergicTo i) [minBound..]	\N	f	1	3	2013-12-08 17:22:58	2013-12-08 17:22:58	587	Allergies.hs
1169	45	5c572dc23418aacf27e99a5f	superseded	haskell	allergies	module Allergies\n  ( Allergen(..)\n  , isAllergicTo\n  , allergies\n  ) where\n\nimport Data.Bits\n\ndata Allergen\n      = Eggs\n      | Peanuts\n      | Shellfish\n      | Strawberries\n      | Tomatoes\n      | Chocolate\n      | Pollen\n      | Cats\n      deriving (Enum, Show, Eq)\n\nisAllergicTo :: Allergen -> Int -> Bool\nisAllergicTo a i = testBit i (fromEnum a)\n\nallergies :: Int -> [Allergen]\nallergies i = [ x | x <- enumFrom Eggs, x `isAllergicTo` i]	\N	f	1	1	2014-02-11 10:37:56	2014-02-11 10:37:56	587	Allergies.hs
1170	45	dfa1165d653cdb9669240c92	superseded	haskell	allergies	module Allergies\n  ( Allergen(..)\n  , isAllergicTo\n  , allergies\n  ) where\n\nimport Data.Bits\n\ndata Allergen\n      = Eggs\n      | Peanuts\n      | Shellfish\n      | Strawberries\n      | Tomatoes\n      | Chocolate\n      | Pollen\n      | Cats\n      deriving (Enum, Show, Eq, Bounded)\n\nisAllergicTo :: Allergen -> Int -> Bool\nisAllergicTo a i = testBit i (fromEnum a)\n\nallergies :: Int -> [Allergen]\nallergies i = [ x | x <- [minBound..], x `isAllergicTo` i]	\N	f	2	2	2014-03-15 22:33:14	2014-03-15 22:33:14	587	Allergies.hs
1173	45	f92f971cc61fb8392e3ce67f	done	ruby	bob	# encoding: utf-8\n\nclass Bob\n  def hey(message)\n    AnswerOfBob.new(Message.new(message)).get\n  end\nend\n\nclass Message\n  QUESTION_MARK = '?'\n\n  def initialize(message)\n    @message = message.strip\n  end\n\n  def empty?\n    @message.empty?\n  end\n\n  def yelled?\n    @message.upcase == @message\n  end\n\n  def question?\n    @message.end_with? QUESTION_MARK\n  end\nend\n\nclass Answer\n  def initialize(message)\n    @message = message\n  end\n\n  def get\n    # should be implemented by subclass\n  end\nend\n\nclass AnswerOfBob < Answer\n  def get\n    case\n    when @message.empty?    then "Fine. Be that way!"\n    when @message.yelled?   then "Woah, chill out!"\n    when @message.question? then "Sure."\n    else "Whatever."\n    end\n  end\nend	\N	f	1	1	2013-11-10 06:37:29	2013-11-10 06:37:29	590	bob.rb
1174	45	c44adac82c5bb7373b9b9a01	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ntranscriptionPairs :: [(Char, Char)]\ntranscriptionPairs = [('A','A'), ('G','G'), ('C','C'), ('T','U')]\n\npairsLookup :: (Eq k) => k -> [(k,v)] -> v\npairsLookup key xs = snd . head . filter (\\(k,_) -> key == k) $ xs\n\ntoRNA :: String -> String\ntoRNA = map (`pairsLookup` transcriptionPairs)	\N	f	1	1	2013-12-11 00:25:06	2013-12-11 00:25:06	591	DNA.hs
1175	45	d58cc33e61685b7d72221ee4	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map transcribe where\n  transcribe nucleotide = if nucleotide == 'T'\n                            then 'U'\n                            else nucleotide	\N	f	1	2	2014-01-31 01:04:18	2014-01-31 01:04:18	591	DNA.hs
1176	45	81d70755a3f9dee12be13e60	done	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map (\\nucleotide -> if nucleotide == 'T' then 'U' else nucleotide)	\N	f	2	3	2014-03-07 19:49:49	2014-03-07 19:49:49	591	DNA.hs
1177	45	cfdd56d8e4ff23a45b41d653	done	ruby	grade-school	require 'forwardable'\n\nclass School\n\n  class ImmutableHash < ::Hash\n    def keys\n      super.sort\n    end\n\n    def to_hash\n      super.clone.freeze\n    end\n  end\n\n  extend Forwardable\n  def_delegator :@by_grade, :to_hash\n\n  def initialize\n    @by_grade = ImmutableHash.new { |h,k| h[k] = []}\n  end\n\n  def add(student, grade)\n    by_grade[grade].push student\n    by_grade[grade].sort!\n  end\n\n  def grade(g)\n    by_grade[g].clone\n  end\n\n  private\n\n  def by_grade\n    @by_grade\n  end\nend	\N	f	0	1	2013-12-19 13:14:19	2013-12-19 13:14:19	592	school.rb
1178	45	7334bd609a7ad0254789d507	pending	ruby	atbash-cipher	class Atbash\n  class << self\n    def encode(string)\n      string.chars.\n        map {|char| cipher[char.downcase] }.\n        compact.\n        each_slice(5).\n        map(&:join).\n        join(' ')\n    end\n\n    private\n\n    def cipher\n      @cipher ||= Hash[letters.zip(letters.reverse)].tap do |hash|\n        (0..9).each {|n| hash["#{n}"] = "#{n}" }\n      end\n    end\n\n    def letters\n      ('a'..'z').to_a\n    end\n  end\nend	\N	f	1	1	2013-10-22 21:17:35	2013-10-22 21:17:35	593	atbash.rb
1179	45	dccb07bbdd17ceed8266aa55	done	javascript	anagram	var Anagram = function(input_string) {\n  this.string = input_string;\n};\n\nAnagram.prototype.match = function(list) {\n  var matching_words = []\n  for(var i = 0; i < list.length; i++) {\n    var local_word = list[i];\n    if (this.isAnagramFor(local_word)){\n      matching_words.push(local_word);\n    };\n  };\n  return matching_words;\n};\n\nAnagram.prototype.isAnagramFor = function(local_word) {\n  if (this.count(local_word) === this.count(this.string) && local_word !== this.string){\n    return true;\n  };\n};\n\nAnagram.prototype.count = function(input) {\n  var word_count = 0\n    for(var j = 0; j < input.length; j++){\n      word_count += input.charCodeAt(j);\n    };\n  return word_count;\n};\n\nmodule.exports = Anagram;	\N	f	1	1	2014-02-02 14:52:05	2014-02-02 14:52:05	594	anagram.js
1180	45	9eb17fec68312618941c546a	done	ruby	grains	class Grains\n  def square(number)\n    2**(number-1)\n  end\n\n  def total\n    (0..63).reduce(0) { |result,number| result+= 2**number }\n  end\nend	\N	f	1	1	2013-10-19 06:45:16	2013-10-19 06:45:16	595	grains.rb
1181	45	3abceeb7c476203bdf9fe70b	hibernating	python	bob	import re\n\nclass Bob():\n    def hey(self, str):\n       if (len(str.strip()) == 0):\n          r = "Fine. Be that way!"\n       elif (str.upper() == str and str.lower() != str):\n          r = "Woah, chill out!"\n       elif (str[-1] == '?'):\n          r = "Sure."\n       else:\n          r = "Whatever."\n       return r	\N	f	1	1	2013-11-25 16:34:26	2013-11-25 16:34:26	596	bob.py
1182	45	5bd81683f931a805aec0ac73	superseded	python	word-count	import re\nimport collections\n\nclass Phrase(object):\n  \n    def __init__(self, sentence):\n        self.sentence = sentence\n    \n    def word_count(self):\n        return collections.Counter(self._words())\n        \n\n    def _words(self):\n        return filter(None, [word.lower() for word in re.split('\\W+', self.sentence)])	\N	f	1	2	2013-10-28 22:33:31	2013-10-28 22:33:31	597	word-count.py
1183	45	2ce6c98aa792d906ef0f868d	superseded	python	word-count	import string\nimport collections\n\nclass Phrase(object):\n  \n    def __init__(self, sentence):\n        self.sentence = sentence\n    \n    def word_count(self):\n        counter = collections.Counter()\n        for word in self._words():\n            counter[word] +=1\n        return counter\n\n    def _words(self):\n        return filter(None, [word.lower().strip(string.punctuation) for word in self.sentence.split()])	\N	f	1	1	2013-12-21 22:22:37	2013-12-21 22:22:37	597	word-count.py
1386	34	35c8a95b592451e0a91b87df	superseded	ruby	sieve	class Sieve\n  FIRST = 2\n  def initialize(max)\n    @max = max\n  end\n\n  def primes\n    @primes ||= sieve (FIRST..@max).to_a, FIRST\n  end\n\n  def sieve(list, start)\n    while start \n      list.reject! { |n| n > start && n % start == 0 }\n      start = list.detect { |n| n > start }\n    end \n    list\n  end\nend	\N	f	0	2	2014-04-11 08:04:29	2014-04-11 08:04:29	693	sieve.rb
1185	45	603dff7ed78269f783857a02	done	python	word-count	import re\nimport collections\n\nclass Phrase(object):\n  \n    words_pattern = '\\w+'\n\n    def __init__(self, sentence):\n        self.sentence = sentence\n    \n    def word_count(self):\n        return collections.Counter(self._words())\n        \n    def _words(self):\n        return re.findall(self.words_pattern, self.sentence.lower())\n\n    	\N	f	0	4	2014-03-02 03:32:11	2014-03-02 03:32:11	597	word-count.py
1187	46	4866b7e0d7970d3267257721	superseded	javascript	word-count	function Words(stringOfWords){\r\n    \r\n    stringOfWords = stringOfWords.replace(/[^\\w\\s]/gi, '').replace(/ +/g, ' ').toLowerCase();\r\n    \r\n    var words_array = stringOfWords.split(" ");\r\n    this.count = {};\r\n    \r\n    for (var i = 0; i < words_array.length; i++){\r\n    \r\n        var count_num = 0;\r\n        \r\n        for (var j = 0; j < words_array.length; j++){\r\n            if(words_array[i] == words_array[j]){\r\n                count_num++;\r\n            }\r\n        }\r\n        \r\n        this.count[words_array[i]] = count_num;\r\n        \r\n    }\r\n    \r\n}\r\nmodule.exports = Words;	\N	f	3	1	2014-04-10 05:45:26	2014-04-10 05:45:26	599	word-count.js
1188	46	b7d43004016475e0e6842b70	done	javascript	word-count	function Words(stringOfWords){\r\n    \r\n    stringOfWords = stringOfWords.replace(/[^\\w\\s]/gi, '').replace(/ +/g, ' ').toLowerCase();\r\n    \r\n    var words_array = stringOfWords.split(" ");\r\n    this.count = {};\r\n    \r\n    for (var i = 0; i < words_array.length; i++){\r\n    \r\n        var count_num = 1;\r\n        \r\n        if(this.count[words_array[i]] === undefined){\r\n        \r\n           this.count[words_array[i]] = count_num; \r\n        \r\n        }\r\n        \r\n        else{\r\n        \r\n            this.count[words_array[i]]++;\r\n        \r\n        }\r\n        \r\n    }\r\n    \r\n}\r\nmodule.exports = Words;	\N	f	3	2	2014-04-23 19:03:48	2014-04-23 19:03:48	599	word-count.js
1189	46	af33309665dde742be6caa27	done	python	space-age	from __future__ import division\n\nimport math\n\nclass SpaceAge(object):\n    def __init__(self, sec):\n        self.seconds = sec\n\n    def exact_earth(self):\n        return  self.seconds / 31557600\n\n    def on_earth(self):\n        return round(self.exact_earth(), 2)\n\n    def on_neptune(self):\n        return round(self.exact_earth() / 164.79132, 2)\n\n    def on_mercury(self):\n        return round(self.exact_earth() / 0.2408467, 2)\n\n    def on_venus(self):\n        return round(self.exact_earth() / 0.61519726, 2)\n\n    def on_mars(self):\n        return round(self.exact_earth() / 1.8808158, 2)\n\n    def on_jupiter(self):\n        return round(self.exact_earth() / 11.862615, 2)\n\n    def on_saturn(self):\n        return round(self.exact_earth() / 29.447498, 2)\n\n    def on_uranus(self):\n        return round(self.exact_earth() / 84.016846, 2)\n\n    def on_neptune(self):\n        return round(self.exact_earth() / 164.79132, 2)	\N	f	3	1	2014-02-20 06:01:45	2014-02-20 06:01:45	600	space_age.py
1190	46	cc0dd54bd31b4bc16d5bc584	superseded	javascript	sieve	var _ = require('underscore');\n\n\n\nfunction Sieve(number){\n  this.number = number;\n  function getRange(){\n    var nums = [];\n    for(var i=2; i <= number; i++){\n      nums.push(i);\n    }\n    return nums;\n  }\n  function calculatePrimes(){\n    var primes = getRange();\n    var range = getRange();\n    for(var i in range){\n      var num = range[i];\n      if(!_.contains(primes, num)) {\n        continue;\n      }\n\n      primes = _.reject(primes, function(p){\n          return (p !== num && p % num === 0)\n      });\n    }\n    return  primes;\n  }\n  this.primes = calculatePrimes();\n}\n\n\nmodule.exports = Sieve;	\N	f	3	1	2014-01-14 16:46:35	2014-01-14 16:46:35	601	sieve.js
1191	46	e04fb2898fdcf352d62d6cbd	pending	javascript	sieve	var _ = require('underscore');\n\n\n\nfunction Sieve(number){\n  this.number = number;\n  function getRange(){\n    var nums = [];\n    for(var i=2; i <= number; i++){\n      nums.push(i);\n    }\n    return nums;\n  }\n  function calculatePrimes(){\n    var primes = getRange();\n    var range = getRange();\n    _.each(range, function(num) {\n      if(!_.contains(primes, num)) {\n        return;\n      }\n\n      primes = _.reject(primes, function(p){\n          return (p !== num && p % num === 0)\n      });\n    });\n    return  primes;\n  }\n  this.primes = calculatePrimes();\n}\n\n\nmodule.exports = Sieve;	\N	f	3	2	2014-02-12 07:03:11	2014-02-12 07:03:11	601	sieve.js
1192	46	cd9152a551e8d96f5637161c	superseded	haskell	scrabble-score	module Scrabble\n( scoreLetter\n, scoreWord\n) where\n\nimport Data.Char (toLower)\n\nscoreLetter :: Char -> Int\nscoreLetter letter\n    | isIn "dg"    = 2\n    | isIn "bcmp"  = 3\n    | isIn "fhvwy" = 4\n    | isIn "k"     = 5\n    | isIn "jx"    = 8\n    | isIn "qz"    = 10\n    | otherwise    = 1\n    where isIn x = toLower letter `elem` x\n\nscoreWord :: String -> Int\nscoreWord letters = sum $ map scoreLetter letters	\N	f	3	1	2014-02-17 01:11:10	2014-02-17 01:11:10	602	scrabble-score.hs
1193	46	88c0f1624bc66ed2cbf4086e	done	haskell	scrabble-score	module Scrabble\n( scoreLetter\n, scoreWord\n) where\n\nimport Data.Char (toLower)\nimport Data.Map (findWithDefault, fromList)\n\nscoreLetter :: Char -> Int\nscoreLetter letter = findWithDefault 0 (toLower letter) scores where\n    scores = fromList $ concat\n        [ repeatZip 1 "aeilnorstu"\n        , repeatZip 2 "dg"\n        , repeatZip 3 "bcmp"\n        , repeatZip 4 "fhvwy"\n        , repeatZip 5 "k"\n        , repeatZip 8 "jx"\n        , repeatZip 10 "qz"\n        ]\n    repeatZip score letters = zip letters (repeat score)\n\nscoreWord :: String -> Int\nscoreWord letters = sum $ map scoreLetter letters	\N	f	0	2	2014-02-21 15:22:16	2014-02-21 15:22:16	602	scrabble-score.hs
1194	46	779309f056e73b3cc8b9d862	done	haskell	hexadecimal	module Hexadecimal (hexToInt) where\n\nimport Control.Applicative ((<$>))\nimport Data.List (foldl')\nimport Data.Maybe (fromMaybe)\n\nhexToInt :: String -> Int\nhexToInt = fromMaybe 0 . hexToInt'\n\nhexToInt' :: String -> Maybe Int\nhexToInt' s = foldl' (\\a d -> a * 16 + d) 0 <$> mapM readHexDigit s\n\nreadHexDigit :: Char -> Maybe Int\nreadHexDigit c\n    | '0' <= c && c <= '9' = Just $ fromEnum c - fromEnum '0'\n    | 'a' <= c && c <= 'f' = Just $ fromEnum c - fromEnum 'a' + 10\n    | 'A' <= c && c <= 'F' = Just $ fromEnum c - fromEnum 'A' + 10\n    | otherwise            = Nothing	\N	f	4	1	2014-04-26 12:49:35	2014-04-26 12:49:35	603	Hexadecimal.hs
1195	46	d682450412df147ac7e6336d	hibernating	ruby	hamming	class Hamming\n  def self.compute(strand_one, strand_two)\n    strand_one.split('').zip(strand_two.split('')).select do | strand_pair |\n      (!!strand_pair[0] && !!strand_pair[1]) &&\n      (!strand_pair[0].eql? strand_pair[1])\n    end.length\n  end\nend	\N	f	5	1	2014-01-08 02:52:09	2014-01-08 02:52:09	604	hamming.rb
1197	46	d9d57e4ac9af3e1611dd3be1	pending	ruby	etl	class ETL\n  def self.transform(data)\n    result = {}\n\n    data.each_pair do |value, letters|\n      letters.each do |letter|\n        result[letter.downcase] = value\n      end\n    end\n\n    result\n  end\nend	\N	f	4	1	2014-04-13 16:19:49	2014-04-13 16:19:49	606	etl.rb
1198	46	a0a244d4d123f7c7edae8dd5	superseded	ruby	word-count	class Phrase\n  \n  def initialize(phrase)\n    @phrase = phrase\n    @words = phrase.downcase.scan(/\\w+/)\n  end\n  \n  def word_count\n    @words.each_with_object(Hash.new(0)) {|word, freqs| freqs[word] += 1 }\n  end\n\nend	\N	f	0	3	2014-01-02 10:05:45	2014-01-02 10:05:45	607	word-count.rb
1199	46	8867cde040757711725db57d	done	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n  \t@phrase = phrase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) {|word, freqs| freqs[word] += 1 }\n  end\n\n  private\n  \n  def words\n    @phrase.to_s.downcase.scan(/\\w+/)\n  end\n    \nend	\N	f	4	7	2014-01-14 12:38:53	2014-01-14 12:38:53	607	word-count.rb
1200	46	a246765ce880e1bbc59ab6ea	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n  \t@phrase = phrase\n  end\n\n  def get_valid_words(phrase)\n  \tphrase.downcase.scan(/[a-z0-9]+/)\n  end\n\n  def word_count\n\n  \twords = get_valid_words(@phrase)\n  \t\n  \twords.inject(Hash.new(0)) do |result, element|\n  \t  result[element] += 1\n  \t  result\n  \tend\n\n  end\n\nend	\N	f	4	2	2014-01-27 14:53:17	2014-01-27 14:53:17	607	word-count.rb
1201	46	700b9e09a368f325a04a2a88	superseded	ruby	word-count	class Phrase\n  \n  def initialize(phrase)\n    @phrase = phrase\n  end\n  \n  def word_count\n    freqs = Hash.new(0)\n\n    cleaned = @phrase.downcase.gsub(/[^a-z0-9 ]/, ' ')\n    cleaned.split.each {|word| freqs[word] += 1 }\n\n    freqs\n  end\n\nend	\N	f	3	1	2014-02-19 10:33:47	2014-02-19 10:33:47	607	word-count.rb
1202	46	e34538cdeaec8d7052c2973e	superseded	ruby	word-count	class Phrase\n  \n  def initialize(phrase)\n    @phrase = phrase\n  end\n  \n  def word_count\n    words = words(@phrase)\n    words.each_with_object(Hash.new(0)) {|word, freqs| freqs[word] += 1 }\n  end\n  \n  private\n  \n  def words(phrase)\n    phrase.downcase.scan(/\\w+/)\n  end\n\nend	\N	f	1	4	2014-03-22 05:03:18	2014-03-22 05:03:18	607	word-count.rb
1203	46	f216c7967e6ff40b3dd43421	superseded	ruby	word-count	class Phrase\n  \n  def initialize(phrase)\n    @phrase = phrase\n  end\n  \n  def word_count\n    words().each_with_object(Hash.new(0)) {|word, freqs| freqs[word] += 1 }\n  end\n  \n  private\n  \n  def words()\n    @phrase.downcase.scan(/\\w+/)\n  end\n\nend	\N	f	5	5	2014-04-26 12:36:11	2014-04-26 12:36:11	607	word-count.rb
1204	46	58777d1d68919bfbdb210c2b	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n  \t@phrase = phrase\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) {|word, freqs| freqs[word] += 1 }\n  end\n\n  private\n  \n  def words\n    @phrase.downcase.scan(/\\w+/)\n  end\n    \nend	\N	f	3	6	2014-05-04 04:20:42	2014-05-04 04:20:42	607	word-count.rb
1205	46	69a07664aa78172236cf56a8	done	ruby	phone-number	class PhoneNumber\n  def initialize(num)\n    @num = num\n  end\n\n  def number\n    @num.gsub!(/[^0-9]/, '')\n    if @num.length == 11 && @num[0] == "1"\n      @num[0] = ""\n    elsif @num.length >= 11 || @num.length < 10\n      @num = "0000000000"\n    end\n    return @num\n  end\n\n  def area_code\n    @num[0,3]\n  end\n\n  def to_s\n    number\n    "(#{@num[0,3]}) #{@num[3,3]}-#{@num[6,4]}"\n  end\nend	\N	f	4	1	2014-04-08 07:14:56	2014-04-08 07:14:56	608	phone-number.rb
1206	46	cffcb1ccf91372c12091ea79	done	javascript	secret-handshake	var SecretHandshake = function(number){\n  if (number.toString().match(/[^0-9]/)){\n    throw new Error("Handshake must be a number");\n  }\n\n  this.binaryArrayofBooleans = function(){\n    return number.toString(2)\n      .split('')\n      .reverse()\n      .map(function(i) {\n        return i === "1";\n      });\n  }.bind(this)();\n};\n\nSecretHandshake.prototype.commands = function(){\n  var commands = ['wink', 'double blink', 'close your eyes', 'jump', 'reverse'];\n\n  commandsToPreform = this.binaryArrayofBooleans.map(function(performCommand, position){\n    if(performCommand){\n      return commands[position];\n    } else {\n      return null;\n    }\n  }).filter(function(command){\n    return command !== null;\n  });\n\n  if(commandsToPreform[commandsToPreform.length-1] == 'reverse'){\n    return commandsToPreform.slice(0,commandsToPreform.length-1).reverse();\n  } else {\n    return commandsToPreform;\n  }\n};\n\nmodule.exports = SecretHandshake;	\N	f	1	1	2014-02-03 12:20:16	2014-02-03 12:20:16	609	secret-handshake.js
1207	46	fd5f8be48ff8939a05c9e758	superseded	ruby	anagram	class Word\n  def initialize word\n    @word = word\n  end\n\n  def fingerprint\n    @word.downcase.each_char.sort\n  end\nend\n\n\nclass Anagram\n  def initialize word\n    @word = word\n  end\n\n  def match candidates\n    candidates.each_with_object([]){|candidate, matches|\n      matches << candidate if anagram?(candidate)\n    }\n  end\n\n  private\n    def fingerprint_match? candidate\n      Word.new(@word).fingerprint == Word.new(candidate).fingerprint \n    end\n\n    def identical_word? candidate\n      @word.downcase == candidate.downcase\n    end\n\n    def anagram? candidate\n      fingerprint_match?(candidate) and not identical_word?(candidate)\n    end\nend	\N	f	4	3	2014-01-21 04:18:49	2014-01-21 04:18:49	610	anagram.rb
1208	46	33858900431db79a73e818c2	superseded	ruby	anagram	class Word\n  def initialize word\n    @word = word\n  end\n\n  def normalized\n    @word.downcase.each_char.sort\n  end\nend\n\n\nclass Anagram\n  def initialize word\n    @word = word\n  end\n\n  def match candidates\n    matches = []\n    candidates.each{|candidate|\n      matches << candidate if anagram?(candidate)\n    }\n    matches\n  end\n\n  private\n    def normalized\n      Word.new(@word).normalized\n    end\n\n    def identical_word? candidate\n      @word.downcase == candidate.downcase\n    end\n\n    def anagram? candidate\n      normalized == Word.new(candidate).normalized and not identical_word?(candidate)\n    end\nend	\N	f	4	1	2014-03-12 06:30:37	2014-03-12 06:30:37	610	anagram.rb
1249	47	ccd1df776b86f81608f07555	superseded	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(words)\n    words.each_with_object([]) do |word, anagrams|\n      anagrams << word if anagram? word\n    end\n  end\n\n  private\n\n  def anagram?(word)\n    !same_word?(@word, word) && same_letters?(@word, word)\n  end\n\n  def same_word?(original, compare)\n    original.downcase == compare.downcase\n  end\n\n  def same_letters?(original, compare)\n    sort_word(original) == sort_word(compare)\n  end\n\n  def sort_word(word)\n    word.downcase.chars.sort\n  end\nend	\N	f	0	2	2014-04-23 02:56:13	2014-04-23 02:56:13	628	anagram.rb
1210	46	33cc6315c65dfda9d4ff20e7	done	ruby	anagram	class Word\n  def initialize word\n    @word = word\n  end\n\n  def fingerprint\n    @word.downcase.each_char.sort\n  end\nend\n\n\nclass Anagram\n  def initialize word\n    @word = word\n  end\n\n  def match candidates\n    candidates.select {|candidate| anagram?(candidate) }\n  end\n\n  private\n    def fingerprint_match? candidate\n      Word.new(@word).fingerprint == Word.new(candidate).fingerprint \n    end\n\n    def exact_match? candidate\n      @word.downcase == candidate.downcase\n    end\n\n    def anagram? candidate\n      fingerprint_match?(candidate) and not exact_match?(candidate)\n    end\nend	\N	f	0	4	2014-04-19 12:15:59	2014-04-19 12:15:59	610	anagram.rb
1212	46	c11847e87826fefc36765420	done	haskell	rna-transcription	module DNA (toRNA)\nwhere\n\ntoRNANucleotide 'T' = 'U'\ntoRNANucleotide x = x\n\ntoRNA :: String -> String\ntoRNA = map toRNANucleotide	\N	f	3	2	2014-01-05 11:49:21	2014-01-05 11:49:21	612	rna-transcription.hs
1213	46	7228bc056d928635ef1397c9	superseded	haskell	rna-transcription	module DNA (toRNA)\nwhere\n\ntoRNA :: String -> String\ntoRNA ('T':xs) = 'U' : toRNA xs\ntoRNA (x:xs) = x : toRNA xs\ntoRNA [] = []	\N	f	3	1	2014-01-27 06:08:46	2014-01-27 06:08:46	612	rna-transcription.hs
1214	46	de296f44ce271954c6892bd3	done	ruby	bob	class Bob\n  def hey(s)\n    if    nothing? s  then "Fine. Be that way!"\n    elsif yelling? s  then "Woah, chill out!"\n    elsif question? s then "Sure."\n    else                   "Whatever."\n    end\n  end\n\n  private\n  \n  def nothing?(s)\n    s.nil? || s.empty?\n  end\n\n  def yelling?(s)\n    !s.empty? && s == s.upcase\n  end\n\n  def question?(s)\n    s.end_with? "?"\n  end\nend	\N	f	2	3	2014-01-03 17:55:06	2014-01-03 17:55:06	613	bob.rb
1215	46	183de10772f158ece9d4a92e	superseded	ruby	bob	class Bob\n  def hey(s)\n    [ -> s { s.empty?         && "Fine. Be that way!" },\n      -> s { s == s.upcase    && "Woah, chill out!"   },\n      -> s { s.end_with?("?") && "Sure."              },\n      -> s {                     "Whatever."          }\n    ].inject(nil) {|m,p| m || p[s.to_s] }\n  end\nend	\N	f	1	2	2014-01-11 06:31:11	2014-01-11 06:31:11	613	bob.rb
1216	46	ca5639d781550312126e5416	superseded	ruby	bob	class Bob\n  def hey(s)\n    [ -> s { s == ""          && "Fine. Be that way!" },\n      -> s { s.upcase!.nil?   && "Woah, chill out!"   },\n      -> s { s.end_with?("?") && "Sure."              },\n      -> s {                     "Whatever."          }\n    ].inject(nil) {|m,p| m || p[s.to_s] }\n  end\nend	\N	f	4	1	2014-01-18 19:17:28	2014-01-18 19:17:28	613	bob.rb
1217	46	006342446724db0134c26ae5	done	ruby	robot-name	class Robot\n\n  def name\n    @name = get_letters + get_numbers if !@name\n  end\n\n  def get_letters\n    (0...2).map { (65 + rand(26)).chr }.join\n  end\n\n  def get_numbers\n    (0...3).map { rand(9) }.join\n  end\n\n  def reset\n    @name = nil\n  end\nend	\N	f	5	1	2014-04-11 23:43:36	2014-04-11 23:43:36	614	robot-name.rb
1218	46	52bd1ea688b7b78566560a60	superseded	clojure	bob	(ns bob)\n\n(defn response-for\n  [question]\n  (case question\n    "SHOUTING" "Woah, chill out!"\n    "A question?" "Sure."\n    "A statement." "Whatever."\n    "" "Fine, be that way."\n    "I have no idea what you're talking about."\n    ))	\N	f	0	2	2014-01-10 16:12:15	2014-01-10 16:12:15	615	bob.clj
1219	46	3522c8fdc992896adbbeddb7	superseded	clojure	bob	(ns bob)\n\n(defn response-for\n  [question]\n  (case question\n    "SHOUTING" "Woah, chill out!"\n    "A question?" "Sure."\n    "A statement." "Whatever."\n    "" "Fine, be that way."))	\N	f	3	1	2014-01-27 22:59:16	2014-01-27 22:59:16	615	bob.clj
1220	46	60d924114797f18951cf6ee5	superseded	clojure	bob	(ns bob)\n\n(defn response-for\n  [input]\n    ;; The instructions aren't clear on whether SHOUTING takes precedence\n    ;; over questions/statements; I chose to interpret it that way.\n  (cond\n    (= "" input) "Fine, be that way."\n    (= input (clojure.string/upper-case input)) "Woah, chill out!"\n    (= \\? (last input)) "Sure."\n    (= \\. (last input)) "Whatever."\n    :else "I have no idea what you're talking about."))	\N	f	3	3	2014-04-01 01:21:23	2014-04-01 01:21:23	615	bob.clj
1221	46	3cb08d6c1089a6f775f61720	superseded	clojure	bob	(ns bob)\n\n(defn- silent? [input] (= "" input))\n\n(defn- shouting? [input]\n  (= input (clojure.string/upper-case input)))\n\n(defn- question? [input] (= \\? (last input)))\n\n(defn- statement? [input] (= \\. (last input)))\n\n(defn response-for\n  [input]\n  ;; The instructions aren't clear on whether SHOUTING takes precedence\n  ;; over questions/statements; I chose to interpret it that way.\n  (cond\n    (silent? input) "Fine, be that way."\n    (shouting? input) "Woah, chill out!"\n    (question? input) "Sure."\n    (statement? input) "Whatever."\n    :else "I have no idea what you're talking about."))	\N	f	0	4	2014-04-24 06:54:44	2014-04-24 06:54:44	615	bob.clj
1222	46	370a7e686bb91013ad271d81	done	clojure	bob	(ns bob)\n\n(defn- silent? [input] (clojure.string/blank? input))\n\n(defn- shouting? [input]\n  (= input (clojure.string/upper-case input)))\n\n(defn- question? [input] (= \\? (last input)))\n\n(defn- statement? [input] (= \\. (last input)))\n\n(defn response-for\n  [input]\n  ;; The instructions aren't clear on whether SHOUTING takes precedence\n  ;; over questions/statements; I chose to interpret it that way.\n  (cond\n    (silent? input) "Fine, be that way."\n    (shouting? input) "Woah, chill out!"\n    (question? input) "Sure."\n    (statement? input) "Whatever."\n    :else "I have no idea what you're talking about."))	\N	f	2	5	2014-05-14 08:50:37	2014-05-14 08:50:37	615	bob.clj
1265	47	3a45eced4236a302d206a569	superseded	ruby	bob	class Bob\n  def hey(input)\n    input = input.strip\n    if nil_or_empty(input)\n      'Fine. Be that way!'\n    elsif input_shouting(input)\n      'Woah, chill out!'\n    elsif input_ends_with_question_mark(input)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  def nil_or_empty(input)\n    input.nil? || input.length == 0\n  end\n\n  def input_shouting(input)\n    input == input.upcase\n  end\n\n  def input_ends_with_question_mark(input)\n    input.end_with?("?")\n  end\n\nend	\N	f	4	4	2014-04-22 11:41:22	2014-04-22 11:41:22	635	bob.rb
1224	46	e522c971f3e98033057b1e67	superseded	javascript	bob	var Bob = function() {\n    this.hey = function(what) {\n        message = new Message(what);\n\n        if (message.isSilent()) {\n            return "Fine. Be that way!";\n        } else if (message.isShouted()) {\n            return "Woah, chill out!";\n        } else if (message.isAsked()) {\n            return "Sure.";\n        } else {\n            return "Whatever.";\n        }\n    };\n};\n\nvar Message = function(message) {\n    this.isSilent = function() {\n        return !message.trim();\n    };\n\n    this.isShouted = function() {\n        return message.toLocaleUpperCase() === message;\n    };\n\n    this.isAsked = function() {\n        return message.slice(-1) === '?';\n    };\n};\n\nmodule.exports = Bob;	\N	f	6	1	2014-04-05 04:09:57	2014-04-05 04:09:57	616	bob.js
1225	46	da15e9dfcc2fb08db5dfb3e2	superseded	python	anagram	class Anagram(object):\n    def __init__(self, word):\n        self.word = word\n        self._canon_word = self._canonicalize(word)\n\n    def _canonicalize(self, word):\n        return sorted(word.lower())\n\n    def is_anagram(self, word):\n        return self.word != word and \\\n            self._canonicalize(word) == self._canon_word\n\n    def match(self, words):\n        return filter(self.is_anagram, words)	\N	f	2	3	2014-01-05 14:45:05	2014-01-05 14:45:05	617	anagram.py
1226	46	846dddec7f0a524fbd108609	superseded	python	anagram	Testing the unsubmit.	\N	f	0	2	2014-01-21 00:55:26	2014-01-21 00:55:26	617	anagram.py
1227	46	cf274c06c8646802863dcc4d	superseded	python	anagram	class Anagram(object):\n    def __init__(self, word):\n        self.word = word\n        self._canon_word = self._canonicalize(word)\n\n    def _canonicalize(self, word):\n        return sorted(word.lower())\n\n    def is_anagram(self, word):\n        return self.word != word and \\\n            self._canonicalize(word) == self._canon_word\n\n    def match(self, words):\n        return filter(self.is_anagram, words)	\N	f	0	1	2014-01-27 12:43:32	2014-01-27 12:43:32	617	anagram.py
1228	46	256fb9caf2487538272ace89	superseded	python	anagram	from collections import Counter\n\nclass Anagram(object):\n    def __init__(self, word):\n        self.word = word\n        self._canon_word = self._canonicalize(word)\n\n    def _canonicalize(self, word):\n        return Counter(word.lower())\n\n    def is_anagram(self, word):\n        return self.word != word and \\\n            self._canonicalize(word) == self._canon_word\n\n    def match(self, words):\n        return filter(self.is_anagram, words)	\N	f	0	4	2014-04-22 11:08:23	2014-04-22 11:08:23	617	anagram.py
1229	46	743803e5ff463db70d36813c	done	python	anagram	from collections import Counter\n\nclass Anagram(object):\n    def __init__(self, word):\n        self.word = word.lower()\n        self._char_freqs = self._char_counts(self.word)\n\n    def _char_counts(self, word):\n        return Counter(word)\n\n    def is_anagram(self, word):\n        word = word.lower()\n        return self.word != word and \\\n            self._char_counts(word) == self._char_freqs\n\n    def match(self, words):\n        return filter(self.is_anagram, words)	\N	f	0	5	2014-05-01 04:06:10	2014-05-01 04:06:10	617	anagram.py
1230	47	72f76a5322fb3030fda17394	superseded	python	bob	class Bob:\n    """A teenager."""\n    \n    def hey(self, statement):\n        """Communicate with Bob."""\n        statement = statement.strip()\n        if not statement:\n            return "Fine. Be that way!"\n        if statement.isupper():\n                return "Woah, chill out!"\n        elif statement.endswith('?'):\n            return "Sure."\n        elif statement:\n            return "Whatever."	\N	f	0	1	2014-04-13 04:09:18	2014-04-13 04:09:18	618	bob.py
1231	47	3e80e305cc5aacb2747893c3	superseded	python	bob	class Bob:\n    """A teenager."""\n    \n    def hey(self, statement):\n        """Communicate with Bob."""\n        statement = statement.strip()\n        if not statement:\n            return "Fine. Be that way!"\n        if statement.isupper():\n            return "Woah, chill out!"\n        elif statement.endswith('?'):\n            return "Sure."\n        elif statement:\n            return "Whatever."	\N	f	0	2	2014-04-16 07:59:38	2014-04-16 07:59:38	618	bob.py
1232	47	6a34697efb2c5fb6580a359f	hibernating	python	bob	class Bob:\n    """A teenager."""\n    \n    def hey(self, sentence):\n        """Communicate with Bob."""\n        sentence = sentence.strip()\n        if not sentence:\n            return "Fine. Be that way!"\n        if sentence.isupper():\n            return "Woah, chill out!"\n        elif sentence.endswith('?'):\n            return "Sure."\n        elif sentence:\n            return "Whatever."	\N	f	2	3	2014-05-08 19:40:38	2014-05-08 19:40:38	618	bob.py
1247	47	ffe1184feaa09f4e6e0a9a20	superseded	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(words)\n    words.each_with_object([]) do |word, anagrams|\n      anagrams << word if anagram? word\n    end\n  end\n\n  private\n\n  def anagram?(word)\n    (\n      !same_word?(@word, word)  &&\n      same_length?(@word, word) &&\n      same_letters?(@word, word)\n    )\n  end\n\n  def same_word?(original, compare)\n    original.downcase == compare.downcase\n  end\n\n  def same_length?(original, compare)\n    original.length == compare.length\n  end\n\n  def same_letters?(original, compare)\n    same_word? sort_word(original), sort_word(compare)\n  end\n\n  def sort_word(word)\n    word.downcase.scan(/./).sort.join\n  end\nend	\N	f	1	1	2014-04-17 09:18:18	2014-04-17 09:18:18	628	anagram.rb
1235	47	0c982a09d1359ae953d41c7f	superseded	clojure	word-count	;;;; Write a program that given a phrase can count the occurrences\n;;;; of each word in that phrase.\n;;;;\n;;;; For example for the input `"olly olly in come free"`\n;;;;\n;;;; olly: 2\n;;;; in: 1\n;;;; come: 1\n;;;; free: 1\n\n(ns word-count\n  (:use [clojure.string :only [split lower-case blank?]]))\n\n(defn- tokenize [sentence]\n  "Return a list of words in the sentence in lower-case"\n  (filter #(not (blank? %)) (split (lower-case sentence) #"\\W")))\n\n(defn- process-word [word bucket]\n  "Update the word count in the bucket"\n  (merge bucket {word (inc (get bucket word 0))}))\n\n(defn word-count [str]\n  (loop [words (tokenize str) result {}]\n    (if (empty? words)\n      result\n      (recur (rest words) (process-word (first words) result)))))	\N	f	2	3	2014-05-07 20:13:44	2014-05-07 20:13:44	619	word_count.clj
1236	47	e14668f2ab1808398b3687ab	pending	clojure	word-count	;;;; Write a program that given a phrase can count the occurrences\n;;;; of each word in that phrase.\n;;;;\n;;;; For example for the input `"olly olly in come free"`\n;;;;\n;;;; olly: 2\n;;;; in: 1\n;;;; come: 1\n;;;; free: 1\n\n(ns word-count\n  (:use [clojure.string :only [split lower-case blank?]]))\n\n(defn- tokenize [sentence]\n  "Return a list of words in the sentence in lower-case"\n  (split (lower-case sentence) #"\\W+"))\n\n(defn- process-word [word bucket]\n  "Update the word count in the bucket"\n  (merge bucket {word (inc (get bucket word 0))}))\n\n(defn word-count [str]\n  (loop [words (tokenize str) result {}]\n    (if (empty? words)\n      result\n      (recur (rest words) (process-word (first words) result)))))	\N	f	2	4	2014-05-11 22:56:56	2014-05-11 22:56:56	619	word_count.clj
1237	47	bb57416b469947e9b83bafaf	pending	coffeescript	word-count	class Words\n  constructor: (words) ->\n    words = words.toLowerCase().match(/\\w+/g)\n    @count = words.reduce (count, word) ->\n      count[word] = if count[word] then count[word] + 1 else 1\n      count\n    , {}\n\n\nmodule.exports = Words	\N	f	1	1	2014-04-18 05:28:06	2014-04-18 05:28:06	620	words.coffee
1238	47	6a82fcb3277829676970bd50	done	ruby	hamming	class Hamming\n  def self.compute a, b\n    count = 0\n\n    [a.length, b.length].min.times do |i|\n      if a[i] != b[i]\n        count += 1\n      end\n    end\n\n    count\n  end\nend	\N	f	1	1	2014-04-26 01:04:59	2014-04-26 01:04:59	621	hamming.rb
1239	47	4851f053e16695c0f19948d8	done	clojure	etl	(ns etl\n  (:require [clojure.string :refer [lower-case]]))\n\n(defn- transform-row\n  [[score letters]]\n  (map #(vector (lower-case %) score) letters))\n\n(defn transform\n  [extract]\n  (into {} (mapcat transform-row extract)))	\N	f	1	1	2014-05-03 12:46:59	2014-05-03 12:46:59	622	etl.clj
1240	47	902b5317ad4cab0313351c84	done	javascript	leap	var _ = require('underscore');\n\nmodule.exports = function(year){\n  if(year % 400 === 0 || (year%4 === 0 && year%100 !== 0)){\n    return true;\n  } else{\n    return false;\n  }\n};	\N	f	1	1	2014-04-15 19:10:52	2014-04-15 19:10:52	623	leap.js
1241	47	69dae779e12087ccf9ea21c8	superseded	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance a b = sum . map fromEnum $ zipWith (/=) a b	\N	f	2	1	2014-04-18 03:30:52	2014-04-18 03:30:52	624	point-mutations.hs
1242	47	3df3d72c5dfd599cc1819ecd	done	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance a b = length . filter id $ zipWith (/=) a b	\N	f	0	2	2014-04-18 11:35:19	2014-04-18 11:35:19	624	point-mutations.hs
1243	47	24860b31910afecef5c431be	done	clojure	rna-transcription	(ns dna)\n\n(def thymidine \\T)\n(def uracil \\U)\n\n(defn to-rna [code]\n  (clojure.string/replace code thymidine uracil))	\N	f	3	1	2014-04-28 19:02:19	2014-04-28 19:02:19	625	rna-transcription.clj
1244	47	62194d3ca90f8a7de992c863	superseded	javascript	bob	function Bob() {\n  function isQuestion(statement) {\n    return statement[statement.length - 1] === '?';\n  }\n\n  function isEmpty(statement) {\n    return statement.trim() === '';\n  }\n\n  function isShouting(statement) {\n    return statement.toUpperCase() ===  statement && /[A-Z]/.test(statement);\n  }\n  this.hey = function(statement) {\n    if(isEmpty(statement)) {\n      return 'Fine. Be that way!';\n    }\n    if(isShouting(statement)) {\n      return 'Woah, chill out!';\n    }\n    if(isQuestion(statement)) {\n      return 'Sure.';\n    }\n    return 'Whatever.';\n  };\n}\n\n\nmodule.exports = Bob;	\N	f	4	1	2014-04-13 08:40:22	2014-04-13 08:40:22	626	bob.js
1245	47	e99b311fe4f0a6d1b9f6db89	done	javascript	bob	function Bob() {\n  var isQuestion = function(statement) {\n    return statement[statement.length - 1] === '?';\n  },\n  isEmpty = function(statement) {\n    return statement.trim() === '';\n  },\n  isShouting = function(statement) {\n    return statement.toUpperCase() ===  statement && /[A-Z]/.test(statement);\n  };\n\n  this.hey = function(statement) {\n    if(isEmpty(statement)) {\n      return 'Fine. Be that way!';\n    }\n    if(isShouting(statement)) {\n      return 'Woah, chill out!';\n    }\n    if(isQuestion(statement)) {\n      return 'Sure.';\n    }\n    return 'Whatever.';\n  };\n}\n\nmodule.exports = Bob;	\N	f	4	2	2014-04-28 15:03:44	2014-04-28 15:03:44	626	bob.js
1246	47	928344f5e40a5e1591b62b61	pending	go	atbash-cipher	package atbash\n\nimport "strings"\n\n// Atbash encodes ASCII text.  Non-alphanumeric characters are removed from\n// cipher text.  Long strings have spaces inserted after every 5th character\n// for readability.\nfunc Atbash(text string) string {\n\tif text == "" {\n\t\treturn ""\n\t}\n\n\tcs := make([]rune, 0, len(text))\n\tn := 0\n\tput := func(c rune) {\n\t\tif n%5 == 0 && n > 0 {\n\t\t\tcs = append(cs, ' ')\n\t\t}\n\t\tn++\n\t\tcs = append(cs, c)\n\t}\n\n\ttext = strings.ToLower(text)\n\tfor _, c := range text {\n\t\tswitch {\n\t\tcase c >= '0' && c <= '9':\n\t\t\tput(c)\n\t\tcase c >= 'a' && c <= 'z':\n\t\t\tput(('z' - c) + 'a')\n\t\t}\n\t}\n\n\treturn string(cs)\n}	\N	f	1	1	2014-04-30 04:35:45	2014-04-30 04:35:45	627	atbash_cipher.go
1248	47	2eab1334d457f78036a5bce0	done	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(words)\n    words.select do |word|\n      anagram? word\n    end\n  end\n\n  private\n\n  def anagram?(word)\n    !same_word?(@word, word) && same_letters?(@word, word)\n  end\n\n  def same_word?(original, compare)\n    original.downcase == compare.downcase\n  end\n\n  def same_letters?(original, compare)\n    sort_word(original) == sort_word(compare)\n  end\n\n  def sort_word(word)\n    word.downcase.chars.sort\n  end\nend	\N	f	4	3	2014-04-21 15:39:59	2014-04-21 15:39:59	628	anagram.rb
1251	47	a6bbcc90a7b24d9f0abc188d	pending	javascript	custom-set	var MySet = (function(){\n  function MySet(list){\n    this.data = uniqueArray(list);\n  }\n  MySet.prototype.toList = function(){\n    return uniqueArray(this.data);\n  };\n  MySet.prototype.size = function(){\n    return this.data.length;\n  };\n  MySet.prototype.empty = function(){\n    this.data = [];\n    return this;\n  };\n  MySet.prototype.put = function(datum){\n    if(this.data.indexOf(datum)===-1) this.data.push(datum);\n    return this;\n  };\n  MySet.prototype.delete = function(datum){\n    var pos = this.data.indexOf(datum);\n    if(pos>=0) this.data.splice(pos,1);\n    return this;\n  };\n  MySet.prototype.member = function(datum){\n    return this.data.indexOf(datum)!==-1;\n  };\n  MySet.prototype.disjoint = function(other){\n    if(this.data.length===0) return false;\n    for (var i = 0; i < this.data.length; i++) {\n      if(other.data.indexOf(this.data[i])!==-1) return false;\n    }\n    return true;\n  };\n  MySet.prototype.union = function(other){\n    return new MySet([].concat(this.data,other.data));\n  };\n\n  MySet.prototype.subset = function(other){\n    for (var i = 0; i < other.data.length; i++) {\n      if(this.data.indexOf(other.data[i])===-1) return false;\n    }\n    return true;\n  };\n  \n  MySet.prototype.intersection = function(other){\n    var thisData = this.data.sort();\n    var otherData = other.data.sort();\n    var result = [];\n    for (var i = 0; i < thisData.length; i++) {\n      if(otherData.indexOf(thisData[i])!==-1) result.push(thisData[i]);\n    }\n    return new MySet(result);\n  };\n  MySet.prototype.difference = function(other){\n    var thisData = this.data.sort();\n    var otherData = other.data.sort();\n    var result = [];\n    for (var i = 0; i < thisData.length; i++) {\n      if(otherData.indexOf(thisData[i])===-1) result.push(thisData[i]);\n    }\n    return new MySet(result);\n  };\n  \n  MySet.prototype.eql = function(other){\n    var thisData = this.data.sort();\n    var otherData = other.data.sort();\n    \n    if(!other || thisData.length !== otherData.length) return false;\n    \n    for (var i = 0; i < thisData.length; i++) {\n      if(thisData[i]!=otherData[i]) return false;\n    }\n    return true;\n  };\n  \n  var uniqueArray = function(array){\n    if(array===undefined) return [];\n    var output = [];\n    for (var i = 0; i < array.length; i++) {\n      if(output.indexOf(array[i])===-1) output.push(array[i]);\n    }\n    return output;\n  };\n  return MySet;\n})();\nmodule.exports = MySet;	\N	f	1	1	2014-04-13 23:35:40	2014-04-13 23:35:40	630	custom-set.js
1252	47	3c9b7c393f1491d6d52d80f3	pending	ruby	triangle	class Triangle\n\n  def initialize *sides\n    raise unless sides.size == 3\n    @sides = sides.sort\n  end\n\n  def kind\n    raise TriangleError if @sides.any? { |side| side <= 0 } ||\n                           @sides[0]+@sides[1] <= @sides[2]\n\n    return :equilateral if @sides.uniq.size == 1\n    return :isosceles   if @sides.uniq.size == 2\n    return :scalene     if @sides.uniq.size == 3\n\n  end\nend\n\nclass TriangleError < StandardError\nend	\N	f	2	3	2014-04-25 15:32:14	2014-04-25 15:32:14	631	triangle.rb
1253	47	967b930d7b1eafd77082002d	superseded	ruby	triangle	class Triangle\n\n  def initialize *sides\n    raise unless sides.size == 3\n    @sides = sides.sort\n  end\n\n  def kind\n    raise TriangleError if @sides.any? { |side| side <= 0 } ||\n                           @sides[0]+@sides[1] <= @sides[2] ||\n\n    return :equilateral if @sides.uniq.size == 1\n    return :isosceles   if @sides.uniq.size == 2\n    return :scalene     if @sides.uniq.size == 3\n\n  end\nend\n\nclass TriangleError < StandardError\nend	\N	f	2	2	2014-05-01 21:17:40	2014-05-01 21:17:40	631	triangle.rb
1254	47	d28a819451bd4b74091e494b	superseded	ruby	triangle	class Triangle\n\n  def initialize *sides\n    raise unless sides.size == 3\n    @sides = sides\n  end\n\n  def kind\n    raise TriangleError if @sides.any? { |side| side <= 0 } ||\n                           @sides[0]+@sides[1] <= @sides[2] ||\n                           @sides[0]+@sides[2] <= @sides[1] ||\n                           @sides[1]+@sides[2] <= @sides[0]\n\n    return :equilateral if @sides.uniq.size == 1\n    return :isosceles   if @sides.uniq.size == 2\n    return :scalene     if @sides.uniq.size == 3\n\n  end\nend\n\nclass TriangleError < StandardError\nend	\N	f	3	1	2014-05-06 23:35:24	2014-05-06 23:35:24	631	triangle.rb
1255	47	ad91a1de54c40ed996610920	superseded	clojure	point-mutations	(ns dna)\n\n(defn hamming-distance [gene1 gene2]\n  (let [pairs-equal (map = gene1 gene2)\n        differing-pairs (filter not pairs-equal)]\n    (count differing-pairs)))	\N	f	1	2	2014-04-26 06:28:30	2014-04-26 06:28:30	632	point-mutations.clj
1256	47	89dbfb5cfa9584ee5fd8909b	hibernating	clojure	point-mutations	(ns dna)\n\n(defn hamming-distance [gene1 gene2]\n  (let [mutations (filter true? (map not= gene1 gene2))]\n    (count mutations)))	\N	f	1	3	2014-05-25 00:54:34	2014-05-25 00:54:34	632	point-mutations.clj
1257	47	27c856e932fbcd8e514efee4	superseded	clojure	point-mutations	(ns dna)\n\n(defn- all-members-equal [s]\n  (apply = s))\n\n(def pair-different\n  (comp not all-members-equal))\n\n(defn hamming-distance [gene1 gene2]\n  (let [pairs (map vector gene1 gene2)\n        differing-pairs (filter pair-different pairs)]\n    (count differing-pairs)))	\N	f	1	1	2014-05-26 13:15:13	2014-05-26 13:15:13	632	point-mutations.clj
1258	47	5a277ce6e75dd7ec866a1976	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n  divisibleBy4 := (year % 4) == 0\n  divisibleBy100 := (year % 100) == 0\n  divisibleBy400 := (year % 400) == 0\n  if divisibleBy4 {\n    if divisibleBy100 {\n      if divisibleBy400 {\n        return true\n      }\n      return false\n    }\n    return true\n  }\n  return false\n}	\N	f	4	1	2014-04-10 21:14:40	2014-04-10 21:14:40	633	leap.go
1259	47	32c5c7dd7c1a0e90b4d09151	superseded	go	leap	package leap\n\nfunc IsLeapYear(year int) bool {\n  divisibleBy4 := (year % 4) == 0\n  divisibleBy100 := (year % 100) == 0\n  divisibleBy400 := (year % 400) == 0\n  return divisibleBy4 && (divisibleBy400 || !divisibleBy100)\n}	\N	f	4	2	2014-04-12 03:53:02	2014-04-12 03:53:02	633	leap.go
1260	47	72e02750013d766b5c84ba16	superseded	go	leap	package leap\n\ntype Year int\n\nfunc (year Year) isDivisbleBy(number Year) bool {\n  return year % number == 0\n}\n\nfunc IsLeapYear(y int) bool {\n  year := Year(y)\n  return year.isDivisbleBy(400) || year.isDivisbleBy(4) && !year.isDivisbleBy(100)\n}	\N	f	0	3	2014-04-23 03:06:27	2014-04-23 03:06:27	633	leap.go
1261	47	df43eff5ff99ce57e2484f6c	done	go	leap	package leap\n\nfunc IsLeapYear(y int) bool {\n\treturn y%400 == 0 || y%4 == 0 && y%100 != 0\n}	\N	f	1	4	2014-04-27 17:50:41	2014-04-27 17:50:41	633	leap.go
1263	47	28df6287ac319e28569f2f95	superseded	ruby	bob	class Bob\n  def hey(a)\n    if a.nil? || a.length == 0\n      'Fine. Be that way.'\n    elsif a == a.upcase\n      'Woah, chill out!'\n    elsif a[-1, 1] == "?"\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\nend	\N	f	5	1	2014-04-14 13:19:07	2014-04-14 13:19:07	635	bob.rb
1264	47	1e8c2464e242bb1d0eb3b8d7	superseded	ruby	bob	class Bob\n  def hey(input)\n    input = input.strip\n    if nil_or_empty(input)\n      'Fine. Be that way.'\n    elsif input_shouting(input)\n      'Woah, chill out!'\n    elsif input_ends_with_question_mark(input)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  def nil_or_empty(input)\n    input.nil? || input.length == 0\n  end\n\n  def input_shouting(input)\n    input == input.upcase\n  end\n\n  def input_ends_with_question_mark(input)\n    input.end_with?("?")\n  end\n\nend	\N	f	0	3	2014-04-21 12:15:11	2014-04-21 12:15:11	635	bob.rb
1267	47	18832c7037c2a0c3cd2a453c	superseded	ruby	bob	class Bob\n  def hey(input)\n    if nil_or_empty(input)\n      'Fine. Be that way.'\n    elsif input_shouting(input)\n      'Woah, chill out!'\n    elsif input_ends_with_question_mark(input)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  def nil_or_empty(input)\n    input.nil? || input.length == 0\n  end\n\n  def input_shouting(input)\n    input == input.upcase\n  end\n\n  def input_ends_with_question_mark(input)\n    input.end_with?("?")\n  end\n\nend	\N	f	11	2	2014-04-26 12:45:37	2014-04-26 12:45:37	635	bob.rb
1269	47	ce747191e9d3dacf29df9efc	done	haskell	simple-linked-list	module LinkedList ( List(..)\n                  , new, isNil, nil, toList, fromList, reverseLinkedList\n                  ) where\n\ndata List a = Cons {datum :: a, next :: List a} | Nil\n\nnew :: a -> List a -> List a\nnew = Cons\n\nisNil :: List a -> Bool\nisNil Nil = True\nisNil _   = False\n\nnil :: List a\nnil = Nil\n\ntoList :: List a -> [a]\ntoList (Cons x xs) = x : toList xs\ntoList Nil = []\n\nfromList :: [a] -> List a\nfromList = foldr Cons Nil\n\nreverseLinkedList :: List a -> List a\nreverseLinkedList = rev Nil\n  where\n    rev r (Cons x xs) = rev (Cons x r) xs\n    rev r Nil         = r	\N	f	0	2	2014-05-04 11:02:38	2014-05-04 11:02:38	636	LinkedList.hs
1270	47	18fac8f9808e10cd5560ae3c	done	haskell	allergies	module Allergies (Allergen(..), isAllergicTo, allergies) where\n\nimport Data.Bits (testBit)\nimport Data.Word (Word8)\n\ndata Allergen = Eggs | Peanuts | Shellfish | Strawberries | Tomatoes | Chocolate\n              | Pollen | Cats deriving (Bounded, Enum, Eq, Show)\n\ntype Allergies = Word8\n\nisAllergicTo :: Allergen -> Allergies -> Bool\nisAllergicTo = flip testBit . fromEnum\n\nallergies :: Allergies -> [Allergen]\nallergies = (`filter` [minBound .. ]) . flip isAllergicTo	\N	f	3	1	2014-05-06 18:40:30	2014-05-06 18:40:30	637	Allergies.hs
1271	48	c949f5c20370bf1cf982111f	pending	clojure	word-count	(ns phrase\n  (:require [clojure.string :refer [split lower-case]]))\n\n(defn make-word-list [sentence]\n  (map #'lower-case (split sentence #"[^a-zA-Z1-9]+")))\n\n(defn insert-word [word-count word]\n  (assoc word-count word (inc (word-count word 0))))\n\n(defn word-count [sentence]\n  (reduce insert-word {} (make-word-list sentence)))	\N	f	0	1	2013-10-07 10:55:48	2013-10-07 10:55:48	638	word-count.clj
1272	48	e1d1c1dce7e35feda1d48fea	done	ruby	atbash-cipher	class Atbash\n  def self.encode(s)\n    s.gsub(/[^0-9a-zA-Z]/,'').downcase.chars.map do |i|\n      i.match(/[0-9]/) ? i : (122 - (i.ord - 97)).chr\n    end.join.gsub(/(.{5})(?!$)/, '\\1 ')\n  end\nend	\N	f	1	1	2014-03-19 08:44:14	2014-03-19 08:44:14	639	atbash-cipher.rb
1273	48	8f06fdc5b23cd125ea5af3b1	done	clojure	rna-transcription	(ns dna)\r\n\r\n(defn- transform-base [c]\r\n  (if (= \\T c) \\U c))\r\n\r\n(defn to-rna [s]\r\n  (apply str (map transform-base s)))\r\n\r	\N	f	1	1	2014-03-10 00:10:44	2014-03-10 00:10:44	640	rna-transcription.clj
1274	48	1466dd9e37bca79d57fa3a41	superseded	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n\n  def initialize(age_in_seconds)\n    @seconds = age_in_seconds\n  end\n\n  def method_missing(meth, *args)\n    match_data = meth.to_s.match(/on_(?<planet>.*)/)\n    planet = match_data[:planet]\n    return super unless planet && AGES.key?(planet)\n    age_on(planet)\n  end\n\n  def age_on(planet)\n    (@seconds / AGES[planet]).round(2)\n  end\n\n  AGES = {\n    'earth'   => 31557600.0,\n    'mercury' => 7600543.81992,\n    'venus'   => 19414149.052176,\n    'mars'    => 59354032.690079994,\n    'jupiter' => 374355659.124,\n    'saturn'  => 929292362.8848,\n    'uranus'  => 2651370019.3296,\n    'neptune' => 5200418560.032001\n  }\nend	\N	f	2	2	2013-11-09 18:33:04	2013-11-09 18:33:04	641	space_age.rb
1275	48	b34a4dcbe6d16ed5b6457916	superseded	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n\n  def initialize(age_in_seconds)\n    @seconds = age_in_seconds\n  end\n\n  def method_missing(meth, *args)\n    match_data = meth.to_s.match(/on_(?<planet>.*)/)\n    planet = match_data[:planet]\n    return super unless planet && AGES[planet]\n    age_on(planet)\n  end\n\n  def age_on(planet)\n    (@seconds / AGES[planet]).round(2)\n  end\n\n  AGES = {\n    'earth'   => 31557600.0,\n    'mercury' => 7600543.81992,\n    'venus'   => 19414149.052176,\n    'mars'    => 59354032.690079994,\n    'jupiter' => 374355659.124,\n    'saturn'  => 929292362.8848,\n    'uranus'  => 2651370019.3296,\n    'neptune' => 5200418560.032001\n  }\nend	\N	f	2	1	2013-11-15 03:12:37	2013-11-15 03:12:37	641	space_age.rb
1276	48	6ca6a9a663132406421af83d	pending	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n\n  def initialize(age_in_seconds)\n    @seconds = age_in_seconds\n  end\n\n  def self.define_age_on_methods\n    SECONDS_IN_YEAR.each do |planet, seconds_in_year|\n      define_method("on_#{planet}") do\n        (@seconds / seconds_in_year).round(2)\n      end\n    end\n  end\n\n  SECONDS_IN_YEAR = {\n    earth:   31557600.0,\n    mercury: 7600543.81992,\n    venus:   19414149.052176,\n    mars:    59354032.690079994,\n    jupiter: 374355659.124,\n    saturn:  929292362.8848,\n    uranus:  2651370019.3296,\n    neptune: 5200418560.032001\n  }\n\n  define_age_on_methods\nend	\N	f	2	3	2014-02-18 21:07:44	2014-02-18 21:07:44	641	space_age.rb
1277	48	94c61082fcebcceef77075ee	done	ruby	leap	class Year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    four_hundred.zero? || (four.zero? unless one_hundred.zero?)\n  end\n\n  def four_hundred\n    @year % 400\n  end\n\n  def one_hundred\n    @year % 100\n  end\n\n  def four\n    @year % 4\n  end\n\nend	\N	f	1	1	2013-10-17 14:46:34	2013-10-17 14:46:34	642	leap.rb
1278	48	27ba660ff40822a7db731b43	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (toUpper, isSpace, isAlpha)\n\nneeq :: String -> String -> Bool\nf `neeq` g\n\t| null [x | x <- [f,g], x /= []]  = False\n\t| f == g                          = True\n\t| otherwise                       = False\n\n\nresponseFor :: String -> String\nresponseFor input\n\t| [x | x <- input, isSpace x] == input                                  = "Fine. Be that way!"\n\t| [toUpper x | x <- input, isAlpha x] `neeq` [x | x <-input, isAlpha x] = "Woah, chill out!"\n\t| last input == '?'                                                     = "Sure."\n\t| otherwise                                                             = "Whatever."	\N	f	0	2	2013-10-28 16:36:32	2013-10-28 16:36:32	643	bob.hs
1280	48	9c70c9a9d38d7aa0320cf7dc	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isSpace, isAlpha, toUpper)\n\n--neeq :: String -> String -> Bool\n--f `neeq` g\n--\t| null [x | x <- [f,g], x /= []]  = False\n--\t| f == g                          = True\n--\t| otherwise                       = False\n\n\nresponseFor :: String -> String\nresponseFor input\n\t| all isSpace input                      = "Fine. Be that way!"\n\t| (any isAlpha input) && (map toUpper input == input) = "Woah, chill out!"\n\t| last input == '?'                      = "Sure."\n\t| otherwise                              = "Whatever."	\N	f	0	3	2014-03-12 17:46:05	2014-03-12 17:46:05	643	bob.hs
1281	48	03e0ba7ffa75840d157b21ff	done	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isSpace, isAlpha, isLower)\n\nresponseFor :: String -> String\nresponseFor input\n\t| all isSpace input                            = "Fine. Be that way!"\n\t| any isAlpha input && not (any isLower input) = "Woah, chill out!"\n\t| last input == '?'                            = "Sure."\n\t| otherwise                                    = "Whatever."	\N	f	3	4	2014-03-31 10:55:43	2014-03-31 10:55:43	643	bob.hs
1282	48	94b1aa8edaaa03ca6a5e35b0	done	elixir	accumulate	defmodule Accumulate do\n\n  @doc """\n  Returns a collection after applying a given function to every element in a provided collection.\n  \n  Try to do this exercise without using map!\n  """\n  \n  @spec accumulate(Enum.t, (any -> as_boolean(term))) :: list\n  def accumulate(collection, function) do\n    Enum.reduce(collection, [], fn(x, acc) ->\n      [ function.(x) | acc ]\n    end) |> Enum.reverse\n  end\n\nend	\N	f	1	1	2014-01-13 03:52:04	2014-01-13 03:52:04	644	accumulate.exs
1283	48	f07cef6bb6007fc2a5f4c563	done	ruby	nucleotide-count	class DNA\n  RNA_NUCLEOTIDES = %w[U]\n  DNA_NUCLEOTIDES = %w[A C G T]\n  ALL_NUCLEOTIDES = RNA_NUCLEOTIDES + DNA_NUCLEOTIDES\n  DNA_VALID = /^[#{DNA_NUCLEOTIDES.join('')}]*$/\n\n  def initialize(string)\n    raise ArgumentError.new unless string.match(DNA_VALID)\n    @string = string\n  end\n\n  def count(nucleotide)\n    raise ArgumentError.new unless ALL_NUCLEOTIDES.include? nucleotide\n    @string.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.each_with_object({}) do |nuc, counts|\n      counts[nuc] = count(nuc)\n    end\n  end\nend	\N	f	0	1	2014-02-05 18:40:57	2014-02-05 18:40:57	645	nucleotide-count.rb
1284	48	755e48f0396b673166e86ab8	pending	ruby	gigasecond	class Gigasecond\n\n  def initialize(birthday)\n    @birthday = birthday\n  end\n\n  def date\n    @birthday + gigaseconds_in_days\n  end\n\n  def gigaseconds_in_days\n    1000000000 / (60 * 60 * 24)\n  end\nend	\N	f	1	1	2013-10-23 04:50:07	2013-10-23 04:50:07	646	gigasecond.rb
1285	48	360a31ee53bcafa41b567144	done	clojure	bob	(ns bob)\n(use '[clojure.string :only [upper-case blank?]])\n\n(defn all-caps [str]\n  (= str (upper-case str))\n)\n\n(defn response-for [input]\n  (cond \n    (blank? input) "Fine. Be that way!"\n    (and (all-caps input) (re-find #"[a-zA-Z]" input)) "Woah, chill out!" \n    (= \\? (last input)) "Sure."\n    :else "Whatever."\n  )\n)	\N	f	0	1	2014-04-06 16:25:34	2014-04-06 16:25:34	647	bob.clj
1286	48	7e10931b59eff3114bbc9d85	superseded	haskell	robot-name	module Robot (mkRobot, robotName, resetName) where\n\nimport System.Random\nimport Data.IORef\nimport Control.Monad (sequence)\n\ntype Robot = IORef String\n\nmkRobot :: IO Robot\nmkRobot = genName >>= newIORef\n\nrobotName :: Robot -> IO String\nrobotName r = readIORef r\n\nresetName :: Robot -> IO ()\nresetName r = genName >>= writeIORef r\n\ngenName :: IO String\ngenName = sequence [randomRIO ('A', 'Z'),\n                    randomRIO ('A', 'Z'),\n                    randomRIO ('0', '9'),\n                    randomRIO ('0', '9'),\n                    randomRIO ('0', '9')]	\N	f	1	2	2013-11-25 08:51:08	2013-11-25 08:51:08	648	robot-name.hs
1287	48	4bd04fe8ef5546d1acef85a1	done	haskell	robot-name	module Robot (mkRobot, robotName, resetName) where\n\nimport System.Random\nimport Data.IORef\nimport Control.Monad (sequence)\n\ntype Robot = IORef String\n\nmkRobot :: IO Robot\nmkRobot = genName >>= newIORef\n\nrobotName :: Robot -> IO String\nrobotName r = readIORef r\n\nresetName :: Robot -> IO ()\nresetName r = genName >>= writeIORef r\n\ngenName :: IO String\ngenName = sequence $\n            replicate 2 (randomRIO ('A', 'Z')) ++\n            replicate 3 (randomRIO ('0', '9'))	\N	f	1	3	2013-12-20 13:02:12	2013-12-20 13:02:12	648	robot-name.hs
1288	48	360ece512b0587dc1cc4535a	superseded	haskell	robot-name	module Robot (mkRobot, robotName, resetName) where\n\nimport System.Random\nimport Data.IORef\nimport Control.Monad (sequence)\n\ntype Robot = IORef String\n\nmkRobot :: IO Robot\nmkRobot = genName >>= newIORef\n\nrobotName :: Robot -> IO String\nrobotName r = readIORef r\n\nresetName :: Robot -> IO ()\nresetName r = genName >>= \\name -> writeIORef r name\n\ngenName :: IO String\ngenName = sequence [randomRIO ('A', 'Z'),\n                    randomRIO ('A', 'Z'),\n                    randomRIO ('0', '9'),\n                    randomRIO ('0', '9'),\n                    randomRIO ('0', '9')]	\N	f	0	1	2014-01-13 02:45:38	2014-01-13 02:45:38	648	robot-name.hs
1289	48	696d315bb83054095af1fc46	done	ruby	hamming	class Hamming\n\n  def self.compute(strand1, strand2)\n    min = [strand1.length, strand2.length].min\n    (0...min).count do |i|\n      strand1[i] != strand2[i]\n    end\n  end\n\nend	\N	f	3	1	2014-03-28 22:13:55	2014-03-28 22:13:55	649	hamming.rb
1290	48	a7dcdf20f4cf3f1e7c34a7ac	done	elixir	anagram	defmodule Anagram do\n\n  @doc """\n  Select correct anagrams of the given `string` from the given `list`.\n\n  ## Examples\n\n  iex> Anagram.match "allergy", %w(gallery ballerina regally clergy largely lea)\n  ["gallery", "regally", "largely"]\n  """\n  def match(string, list) do\n    rx = Regex.compile!("^[#{Regex.escape(string)}]{#{String.length(string)}}$")\n    list |> Enum.filter &(Regex.match?(rx, &1))\n  end\n\nend	\N	f	1	1	2013-10-11 17:56:17	2013-10-11 17:56:17	650	anagram.exs
1291	48	1fb3d71ca95d113a19d28e3d	superseded	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance x y = length $ filter (uncurry (/=)) (zip x y)	\N	f	0	1	2014-02-16 22:28:17	2014-02-16 22:28:17	651	point-mutations.hs
1292	48	8fb9a39b606dffa65b5598fd	done	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance x y = length $ filter id (zipWith (/=) x y)	\N	f	6	2	2014-05-13 20:04:51	2014-05-13 20:04:51	651	point-mutations.hs
1307	31	67c7e2270fb4c1d964e312a5	done	ruby	etl	class ETL\n  def self.transform(original_data)\n    original_data.each_with_object({}) do |(key, values), new_data|\n      values.each { |word| new_data[word.downcase] = key }\n    end\n  end\nend	\N	f	3	3	2014-04-06 03:38:07	2014-04-06 03:38:07	658	etl.rb
1294	48	ff76de73dede46ecf61dd61f	done	ruby	bob	class Bob\n\n  def hey(talk)\n    case \n    when silent?(talk)\n        "Fine. Be that way."\n    when question?(talk)\n        "Sure."\n    when shouting(talk)\n        "Woah, chill out!"\n    else "Whatever."\n    end\n  end\n\n  def silent?(talk)\n    talk.empty?\n  end\n\n  def question?(talk)\n    talk.end_with?('?')\n  end\n\n  def shouting(talk)\n    talk == talk.upcase\n  end\nend\n\n# Thank you for making me refactor :)	\N	f	1	4	2013-11-01 01:06:04	2013-11-01 01:06:04	653	bob.rb
1295	48	2e6d03d7b94a9542d3b67888	superseded	ruby	bob	class Bob\n\n  def initialize\n\n  end\n\n  def hey(word)\n    if word == ""\n      "Fine. Be that way."\n    elsif word.include?("?")\n      "Sure."\n    elsif word == word.upcase\n      "Woah, chill out!"\n    else\n      "Whatever."\n    end\n  end\n\nend	\N	f	0	1	2013-11-15 20:45:41	2013-11-15 20:45:41	653	bob.rb
1296	48	7e57ef277204b0a2f05c098d	superseded	ruby	bob	class Bob\n\n  def hey(word)\n    if word.empty?\n      "Fine. Be that way."\n    elsif word.include?("?")\n      "Sure."\n    elsif word == word.upcase\n      "Woah, chill out!"\n    else\n      "Whatever."\n    end\n  end\nend	\N	f	3	2	2014-02-15 00:35:52	2014-02-15 00:35:52	653	bob.rb
1297	48	fecbeedfa7ea26f1d7d45fc0	superseded	ruby	bob	class Bob\n  \n  def hey(talk)\n    case \n    when talk_empty?(talk)\n        "Fine. Be that way."\n    when question?(talk)\n        "Sure."\n    when shouting(talk)\n        "Woah, chill out!"\n    else "Whatever."\n    end\n  end\n\n  def talk_empty?(talk)\n    talk.empty?\n  end\n\n  def question?(talk)\n    talk.end_with?('?')\n  end\n\n  def shouting(talk)\n    talk == talk.upcase\n  end\nend\n\n# Thank you for making me refactor :)	\N	f	1	3	2014-02-27 11:14:53	2014-02-27 11:14:53	653	bob.rb
1298	48	4895f38b087469092fb80fe1	superseded	ruby	grains	class Grains\n  def square(number)\n    (1..number).inject {|result, n| result * 2}\n  end\n\n  def total\n    square(65) - 1\n  end\nend	\N	f	1	1	2013-10-29 19:02:18	2013-10-29 19:02:18	654	grains.rb
1299	48	8443c7bbe2b0b7680bf4e811	pending	ruby	grains	class Grains\n  def square(number)\n    2** (number - 1)\n  end\n\n  def total\n    square(65) - 1\n  end\nend	\N	f	1	2	2014-01-08 01:41:14	2014-01-08 01:41:14	654	grains.rb
1300	48	a5c757fa41c40f45f6c4c8fd	pending	ruby	scrabble-score	class Scrabble\n  attr_reader :word\n\n  def initialize(word)\n    @word = (word || "").downcase\n  end\n\n  def score\n    SCORES.inject(0)  do |total, (score, letters)|\n      total + score * word.chars.count { |i| letters.include? word[i] }\n    end\n  end\n\n  def self.score(word)\n    Scrabble.new(word).score\n  end\n\n  SCORES = { 1 => ["a", "e", "i", "o", "u", "l", "n", "r", "s", "t"], 2 => ["d", "g"], 3 => ["b", "c", "m", "p"], \n    4 => ["f", "h", "v", "w", "y"], 5 => ["k"], 8 => ["j", "x"], 10 => ["q", "z"] }\nend	\N	f	1	1	2013-12-18 20:52:51	2013-12-18 20:52:51	655	scrabble.rb
1301	48	3035a6ebc7b18f5d4c3eda22	done	python	rna-transcription	class DNA(object):\n\tdef __init__(self, sequence):\n\t\tsuper(DNA, self).__init__()\n\t\tself.sequence = sequence\n\n\tdef to_rna(self):\n\t\treturn self.sequence.replace('T', 'U')\n\t\t	\N	f	1	1	2013-10-15 16:15:30	2013-10-15 16:15:30	656	rna-transcription.py
1302	48	c0121c6588170eb5109b3550	superseded	haskell	phone-number	module Phone (number, areaCode, prettyPrint)\nwhere\n\timport Data.Char (isDigit)\n\timport Text.Printf (printf)\n\n\tnumber :: String -> String\n\tnumber = lenCheck . filter isDigit \n\n\tlenCheck :: String -> String\n\tlenCheck s = lenCheck' (length s) s\n\n\tlenCheck' :: Int -> String -> String\n\tlenCheck' 10 s = s\n\tlenCheck' 11 s = removeFirstOne s\n\tlenCheck' _  _ = badNumber\n\n\tremoveFirstOne :: String -> String\n\tremoveFirstOne ('1':xs) = xs\n\tremoveFirstOne _        = badNumber\n\n\tbadNumber :: String\n\tbadNumber = replicate 10 '0'\n\n\tareaCode :: String -> String\n\tareaCode = take 3 . number\n\n\tprettyPrint :: String -> String\n\tprettyPrint s = printf "(%s) %s-%s" (areaCode s) (np1 s) (np2 s)\n\n\tnp1 :: String -> String\n\tnp1 = take 3 . drop 3 . number\n\n\tnp2 :: String -> String\n\tnp2 = drop 6 . number	\N	f	1	1	2013-10-11 13:03:06	2013-10-11 13:03:06	657	phone-number.hs
1304	48	cb6500d66401ceff62fd0efd	done	haskell	phone-number	module Phone (number, areaCode, prettyPrint) where\n\t\nimport Data.Char (isDigit)\nimport Text.Printf (printf)\nimport Data.List.Split (splitPlaces)\n\ntype PhoneNumber = [String]\n\nparseNumber :: String -> PhoneNumber\nparseNumber = splitPlaces [3,3,4] . validate\n\nfmtNumber :: String -> PhoneNumber -> String\nfmtNumber f [a, p, x] = printf f a p x\n\nvalidate :: String -> String\nvalidate s | (l == 10) = f\n           | ((l == 11) && (head f == '1')) = tail f\n           | otherwise = replicate 10 '0'\n           where l = length f\n                 f = filter isDigit s\n\nnumber :: String -> String\nnumber = fmtNumber "%s%s%s" . parseNumber\n\nareaCode :: String -> String\nareaCode = head . parseNumber\n\nprettyPrint :: String -> String\nprettyPrint = fmtNumber "(%s) %s-%s" . parseNumber	\N	f	0	3	2013-12-20 21:58:48	2013-12-20 21:58:48	657	phone-number.hs
1305	31	0db0973fa21af4b7f0cfec17	superseded	ruby	etl	require 'pry'\n\nclass ETL\n  def self.transform(original_data)\n    transformed = {}\n    original_data.each { |key, value_array|\n      value_array.each { |word| transformed[word.downcase] = key }\n    }\n    transformed\n  end\nend	\N	f	5	1	2014-03-17 02:59:46	2014-03-17 02:59:46	658	etl.rb
1306	31	737423d3f030ddf7b680060f	superseded	ruby	etl	class ETL\n  def self.transform(original_data)\n    new_data = {}\n    original_data.each { |key, values|\n      values.each { |word| new_data[word.downcase] = key }\n    }\n    new_data\n  end\nend	\N	f	5	2	2014-03-22 15:26:03	2014-03-22 15:26:03	658	etl.rb
1309	31	f6d2d61bd35b31ba6e8d5eb2	superseded	ruby	hamming	class Hamming\n  def self.compute(sequence1, sequence2)\n    @counter = 0\n    offset(sequence1, sequence2)\n  end\n\n  private\n\n  def self.offset(sequence1, sequence2)\n    length = [sequence1.length, sequence2.length].min\n    (0...length).each do |i|\n      @counter += 1 unless sequence1[i].eql?(sequence2[i])\n    end\n    @counter\n  end\nend	\N	f	5	2	2014-04-02 10:34:27	2014-04-02 10:34:27	659	hamming.rb
1310	31	507985df671f6c49974d6db7	superseded	ruby	hamming	class Hamming\n  def self.compute(sequence1, sequence2)\n    @counter = 0\n    offset(sequence1, sequence2)\n  end\n\n  private\n\n  def self.offset(sequence1, sequence2)\n    length = [sequence1.length, sequence2.length].min\n    length.times.count {|i| !sequence1[i].eql?sequence2[i]}\n  end\nend	\N	f	3	4	2014-04-08 15:57:48	2014-04-08 15:57:48	659	hamming.rb
1311	31	a9043f9752f520a8ebab44bd	superseded	ruby	hamming	class Hamming\n  def self.compute(sequence1, sequence2)\n    @counter = 0\n    offset(sequence1, sequence2)\n  end\n\n  private\n\n  def self.offset(sequence1, sequence2)\n    length = [sequence1.length, sequence2.length].min\n\n    p length.times.count {|i| !sequence1[i].eql?sequence2[i]}\n    (0...length).each do |i|\n      @counter += 1 unless sequence1[i].eql?(sequence2[i])\n    end\n    @counter\n  end\nend	\N	f	5	3	2014-04-30 07:17:48	2014-04-30 07:17:48	659	hamming.rb
1312	31	8e3d96ee8be58f389d6bfbb1	superseded	ruby	hamming	class Hamming\n  def self.compute(sequence1, sequence2)\n    @counter = 0\n    offset(sequence1, sequence2)\n  end\n\n  private\n\n  def self.offset(sequence1, sequence2)\n    length = [sequence1.length, sequence2.length].min\n    length.times.count { |i| !sequence1[i].eql? sequence2[i] }\n  end\nend	\N	f	5	5	2014-05-08 12:13:48	2014-05-08 12:13:48	659	hamming.rb
1314	31	ada9c1c1e9ef6098dedba179	superseded	ruby	rna-transcription	class RibonucleicAcid < String\n  def initialize nucleotides\n    super nucleotides\n  end\n\nend\n\nclass DeoxyribonucleicAcid < String\n  def initialize nucleotides\n    super nucleotides\n  end\n\n  def to_rna\n    RibonucleicAcid.new self.gsub('T', 'U')\n  end\nend	\N	f	3	1	2014-02-26 14:48:59	2014-02-26 14:48:59	660	rna-transcription.rb
1315	31	c2e39973c1bbbcdb51c11664	done	ruby	rna-transcription	URACIL_CODE = 'U'\nTHYMINE_CODE = 'T'\n\nclass RibonucleicAcid < String\nend\n\nclass DeoxyribonucleicAcid < String\n  def to_rna\n    RibonucleicAcid.new rna_string\n  end\n  def rna_string\n    tr(THYMINE_CODE, URACIL_CODE)\n  end\nend	\N	f	3	4	2014-03-26 10:37:42	2014-03-26 10:37:42	660	rna-transcription.rb
1316	31	7816248935e12406952e2d63	superseded	ruby	rna-transcription	URACIL_CODE = 'U'\nTHYMINE_CODE = 'T'\n\nclass RibonucleicAcid < String\nend\n\nclass DeoxyribonucleicAcid < String\n  def to_rna\n    RibonucleicAcid.new rna_string\n  end\n  def rna_string\n    gsub(THYMINE_CODE, URACIL_CODE)\n  end\nend	\N	f	3	3	2014-04-22 01:07:08	2014-04-22 01:07:08	660	rna-transcription.rb
1317	31	8c7184dfde950e363186aff4	superseded	ruby	rna-transcription	class RibonucleicAcid < String\n\nend\n\nclass DeoxyribonucleicAcid < String\n  def initialize nucleotides\n    super nucleotides\n  end\n\n  def to_rna\n    RibonucleicAcid.new gsub('T', 'U')\n  end\nend	\N	f	6	2	2014-05-12 09:26:40	2014-05-12 09:26:40	660	rna-transcription.rb
1318	31	5221f9d7d4e3474d7cf380d9	done	ruby	grade-school	class School\n  attr_accessor :db\n\n  def initialize\n    @db = Hash.new([])\n  end\n\n  def add(name, grade)\n    db[grade] += [name]\n  end\n\n  def grade(number)\n    db[number].sort\n  end\n\n  def to_hash\n    sort_students\n    Hash[db.sort]\n  end\n\n  private\n\n  def sort_students\n    db.each { |grade, students| db[grade] = students.sort }\n  end\nend	\N	f	3	1	2014-03-16 00:23:27	2014-03-16 00:23:27	661	school.rb
1319	31	7c20862e2a9adfb6b44364a6	superseded	ruby	anagram	class Anagram\n  attr_accessor :word_to_match\n\n  def initialize(word_to_match)\n    @word_to_match = word_to_match\n  end\n\n  def match(words)\n    words.reject { |word| identical?(word) }.select { |word| anagram?(word) }\n  end\n\n  private\n\n  def identical?(word)\n    word.downcase == word_to_match.downcase\n  end\n\n  def anagram?(word)\n    sorted_word_to_match == sort(word)\n  end\n\n  def sorted_word_to_match\n    @sorted_word_to_match ||= sort(word_to_match)\n  end\n\n  def sort(word)\n    word.downcase.chars.sort\n  end\nend	\N	f	2	2	2014-03-01 00:32:36	2014-03-01 00:32:36	662	anagram.rb
1320	31	c2a8d7621bf9ec80d4553015	superseded	ruby	anagram	Anagram = Struct.new(:word_to_match) do\n  def match(words)\n    words.reject { |word| identical?(word) }.select { |word| anagram?(word) }\n  end\n\n  private\n\n  def identical?(word)\n    word.downcase == word_to_match.downcase\n  end\n\n  def anagram?(word)\n    sorted_word_to_match == sort(word)\n  end\n\n  def sorted_word_to_match\n    @sorted_word_to_match ||= sort(word_to_match)\n  end\n\n  def sort(word)\n    word.downcase.chars.sort\n  end\nend	\N	f	2	1	2014-03-05 16:05:49	2014-03-05 16:05:49	662	anagram.rb
1321	31	66b4a9758a39e6daa5f1f9dd	superseded	ruby	anagram	class Anagram\n  attr_accessor :word_to_match\n\n  def initialize(word_to_match)\n    @word_to_match = word_to_match\n  end\n\n  def match(words)\n    words.select { |word| !identical?(word) && anagram?(word) }\n  end\n\n  private\n\n  def identical?(word)\n    word.downcase == word_to_match.downcase\n  end\n\n  def anagram?(word)\n    sorted_word_to_match == sort(word)\n  end\n\n  def sorted_word_to_match\n    @sorted_word_to_match ||= sort(word_to_match)\n  end\n\n  def sort(word)\n    word.downcase.chars.sort\n  end\nend	\N	f	1	3	2014-04-13 08:56:12	2014-04-13 08:56:12	662	anagram.rb
1322	31	3e70486e820d6b70cc1c99c7	superseded	ruby	anagram	class Anagram\n  attr_reader :word_to_match\n\n  def initialize(word_to_match)\n    @word_to_match = word_to_match.downcase\n  end\n\n  def match(words)\n    words.select { |word| anagram?(word) unless identical?(word) }\n  end\n\n  private\n\n  def anagram?(word)\n    word_to_match.chars.sort == word.chars.sort\n  end\n\n  def identical?(word)\n    word == word_to_match\n  end\nend	\N	f	0	4	2014-04-18 16:59:31	2014-04-18 16:59:31	662	anagram.rb
1480	33	c0db6e7990518d54a33c7184	done	ruby	word-count	class Phrase\n  attr_reader :text\n\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\n  end\n\n  private\n  def words\n    text.downcase.scan(/\\w+/)\n  end\nend	\N	f	9	2	2014-05-03 17:50:31	2014-05-03 17:50:31	735	word-count.rb
1325	31	e6af7f8bd8923adb7b7d52cd	superseded	ruby	nucleotide-count	class DNA\n  DNA_NUCLEOTIDES = ['A', 'T', 'C', 'G']\n  NUCLEOTIDES = DNA_NUCLEOTIDES.dup.push('U')\n  \n  def initialize(dna)\n    if dna.chars.all? {|char| character_included?(char, DNA_NUCLEOTIDES)}\n      @dna = dna\n    else\n      raise ArgumentError\n    end\n  end\n  \n  def count(nucleotide)\n    if character_included?(nucleotide, NUCLEOTIDES)\n      @dna.size - @dna.delete(nucleotide).size\n    else\n      raise ArgumentError\n    end\n  end\n  \n  def nucleotide_counts\n    DNA_NUCLEOTIDES.each_with_object(Hash.new) do |nucleotide, counts|\n      counts[nucleotide] = count(nucleotide)\n    end\n  end\n  \n  private\n  \n  def character_included?(character, collection)\n    collection.include?(character)\n  end\nend	\N	f	4	1	2014-03-24 21:38:47	2014-03-24 21:38:47	663	nucleotide-count.rb
1326	31	4e9700371f6d3304204c4862	done	ruby	nucleotide-count	class DNA\n  DNA_NUCLEOTIDES = ['A', 'T', 'C', 'G']\n  NUCLEOTIDES     = DNA_NUCLEOTIDES.dup.push('U')\n\n  def initialize(dna)\n    validate_nucleotides(dna, DNA_NUCLEOTIDES)\n    @dna = dna\n  end\n\n  def count(nucleotide)\n    validate_nucleotides(nucleotide, NUCLEOTIDES)\n    @dna.size - @dna.delete(nucleotide).size\n  end\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.each_with_object(Hash.new) do |nucleotide, counts|\n      counts[nucleotide] = count(nucleotide)\n    end\n  end\n\n  private\n\n  def validate_nucleotides(dna, valid_set)\n    raise ArgumentError unless dna.chars.all? {|char| valid_set.include?(char)}\n  end\nend	\N	f	4	3	2014-03-27 19:03:01	2014-03-27 19:03:01	663	nucleotide-count.rb
1327	31	557d0c10fe28088443f34dd8	superseded	ruby	bob	class DNA\n  attr_reader :nucleotides\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides\n  end\n\n  def to_rna\n    nucleotides.gsub('T', 'U')\n  end\nend	\N	f	5	4	2014-03-05 03:08:09	2014-03-05 03:08:09	664	bob.rb
1328	31	28d88297c2336622fccf2883	superseded	ruby	bob	class Bob\n  def hey(text)\n    message = Message.new(text)\n\n    return 'Fine. Be that way!' if message.empty?\n    return 'Woah, chill out!'   if message.shouting?\n    return 'Sure.'              if message.question?\n\n    'Whatever.'\n  end\n\n  private\n  class Message\n    attr_reader :text\n\n    def initialize(text)\n      @text = text.to_s\n    end\n\n    def empty?\n      text.empty?\n    end\n\n    def shouting?\n      text.upcase == text\n    end\n\n    def question?\n      text.end_with?('?')\n    end\n  end\nend	\N	f	0	5	2014-03-07 01:46:52	2014-03-07 01:46:52	664	bob.rb
1329	31	f836284d9c9ff77846d8f378	done	ruby	bob	class Bob\n  def hey(text)\n    TeenagerAnswer.new(text).answer\n  end\n\n  class TeenagerAnswer\n    attr_reader :text\n\n    def initialize(text)\n      @text = text.to_s\n    end\n\n    def answer\n      if message.empty?\n        'Fine. Be that way!'\n      elsif message.shouting?\n        'Woah, chill out!'\n      elsif message.question?\n        'Sure.'\n      else\n        'Whatever.'\n      end\n    end\n\n    def message\n      @message ||= Message.new(text)\n    end\n  end\n\n  class Message\n    attr_reader :text\n\n    def initialize(text)\n      @text = text.to_s\n    end\n\n    def empty?\n      text.empty?\n    end\n\n    def shouting?\n      text.upcase == text\n    end\n\n    def question?\n      text.end_with?('?')\n    end\n  end\nend	\N	f	4	7	2014-03-16 18:01:02	2014-03-16 18:01:02	664	bob.rb
1330	31	6d9ba95599055a9ed8e275e3	superseded	ruby	bob	class Bob\n  def hey(text)\n    message = Message.new(text)\n\n    return 'Fine. Be that way!' if message.empty?\n    return 'Woah, chill out!'   if message.shouting?\n    return 'Sure.'              if message.question?\n\n    'Whatever.'\n  end\n\n  private\n  class Message\n    attr_reader :text\n\n    def initialize(text)\n      @text = text\n    end\n\n    def empty?\n      text.to_s.empty?\n    end\n\n    def shouting?\n      text.upcase == text\n    end\n\n    def question?\n      text.slice(-1) == '?'\n    end\n  end\nend	\N	f	1	1	2014-03-29 22:20:11	2014-03-29 22:20:11	664	bob.rb
1331	31	0f2d2c5e7837b8f650ae826d	superseded	ruby	bob	class Bob\n  def hey(text)\n    message = Message.new(text)\n\n    return 'Fine. Be that way!' if message.empty?\n    return 'Woah, chill out!'   if message.shouting?\n    return 'Sure.'              if message.question?\n\n    'Whatever.'\n  end\n\n  private\n  class Message\n    attr_reader :text\n\n    def initialize(text)\n      @text = text.to_s\n    end\n\n    def empty?\n      text.empty?\n    end\n\n    def shouting?\n      text.upcase == text\n    end\n\n    def question?\n      text.slice(-1) == '?'\n    end\n  end\nend	\N	f	5	2	2014-04-11 02:04:56	2014-04-11 02:04:56	664	bob.rb
1332	31	8ad93fe61d3802dee63969f4	superseded	ruby	bob	class Bob\n  def hey(text)\n    message = Message.new(text)\n\n    return 'Fine. Be that way!' if message.empty?\n    return 'Woah, chill out!'   if message.shouting?\n    return 'Sure.'              if message.question?\n\n    'Whatever.'\n  end\n\n  private\n  class Message\n    attr_reader :text\n\n    def initialize(text)\n      @text = text.to_s\n    end\n\n    def empty?\n      text.empty?\n    end\n\n    def shouting?\n      text.upcase == text\n    end\n\n    def question?\n      text.end_with?('?')\n    end\n  end\nend	\N	f	1	3	2014-05-09 09:48:45	2014-05-09 09:48:45	664	bob.rb
1333	31	dcf2ea375afa117af690abe9	superseded	ruby	bob	class Bob\n  def hey(text)\n    TeenagerAnswer.new(text).answer\n  end\n\n  private\n  class TeenagerAnswer\n    attr_reader :text\n\n    def initialize(text)\n      @text = text.to_s\n    end\n\n    def answer\n      return 'Fine. Be that way!' if message.empty?\n      return 'Woah, chill out!'   if message.shouting?\n      return 'Sure.'              if message.question?\n\n      'Whatever.'\n    end\n\n    def message\n      @message ||= Message.new(text)\n    end\n  end\n\n  class Message\n    attr_reader :text\n\n    def initialize(text)\n      @text = text.to_s\n    end\n\n    def empty?\n      text.empty?\n    end\n\n    def shouting?\n      text.upcase == text\n    end\n\n    def question?\n      text.end_with?('?')\n    end\n  end\nend	\N	f	3	6	2014-05-24 23:32:29	2014-05-24 23:32:29	664	bob.rb
1334	31	c3dae968b0a63d7052c277ed	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    count_words(split_phrase_into_words)\n  end\n\n  private\n\n  def split_phrase_into_words\n    @phrase.downcase.scan(/\\w+/)\n  end\n\n  def count_words(words)\n    words.each_with_object(Hash.new(0)) { |word, hash| hash[word] += 1 }\n  end\nend	\N	f	7	6	2014-02-23 17:07:18	2014-02-23 17:07:18	665	word-count.rb
1336	31	7ed1b71c524219cfa7850bc4	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    words = split_phrase\n\n    results = count_words(words)\n\n    print_results(results)\n  end\n\n  private\n    def split_phrase\n      @phrase.downcase.scan(/\\w+/)\n    end\n\n    def count_words(words)\n      results = Hash.new(0)\n      words.each do |word|\n        results[word] += 1\n      end\n      results\n    end\n\n    def print_results(results)\n      results.each do |word, count|\n        puts "#{word}: #{count}"\n      end\n    end\nend	\N	f	7	2	2014-03-06 22:22:28	2014-03-06 22:22:28	665	word-count.rb
1337	31	89ce9ae8dfa9de59c84a2bc2	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    words = split_phrase\n\n    count_words(words)\n  end\n\n  private\n    def split_phrase\n      @phrase.downcase.scan(/\\w+/)\n    end\n\n  def count_words(words)\n    results = Hash.new(0)\n    words.each do |word|\n      results[word] += 1\n    end\n    results\n  end\nend	\N	f	1	3	2014-03-27 09:25:35	2014-03-27 09:25:35	665	word-count.rb
1338	31	6d1d6ff9d01f60e955b2911d	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    count_words(split_phrase_into_words)\n  end\n\n  private\n\n  def split_phrase_into_words\n    @phrase.downcase.scan(/\\w+/)\n  end\n\n  def count_words(words)\n    results = Hash.new(0)\n    words.each_with_object([]) { |word| results[word] += 1 }\n    results\n  end\nend	\N	f	4	5	2014-04-05 23:16:32	2014-04-05 23:16:32	665	word-count.rb
1339	31	331fe430454d96f25b38e5e5	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    count_words(split_phrase_into_words)\n  end\n\n  private\n\n  def split_phrase_into_words\n    @phrase.downcase.scan(/\\w+/)\n  end\n\n  def count_words(words)\n    results = Hash.new(0)\n    words.each_with_object([]) { |key| results[key] += 1 }\n    results\n  end\nend	\N	f	6	4	2014-04-25 04:25:45	2014-04-25 04:25:45	665	word-count.rb
1340	31	ef27cf62538a3b27cb99047a	done	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    count_words(split_phrase_into_words)\n  end\n\n  private\n\n  def split_phrase_into_words\n    @phrase.scan(/\\w+/)\n  end\n\n  def count_words(words)\n    words.each_with_object(Hash.new(0)) { |word, hash| hash[word.downcase] += 1 }\n  end\nend	\N	f	0	7	2014-04-29 03:16:24	2014-04-29 03:16:24	665	word-count.rb
1341	31	d95d340e4230e344bb1e6c00	done	ruby	gigasecond	class Gigasecond\n\n  attr_reader :birthday\n  SECONDS_PER_DAY = 60 * 60 * 24\n  GIGASECOND = 10**9\n\n  def initialize(birthday)\n    @birthday = birthday\n  end\n\n  def date\n    birthday + gseconds_per_day\n  end\n\n  private\n\n  def gseconds_per_day\n    GIGASECOND / SECONDS_PER_DAY\n  end\n\nend	\N	f	3	1	2014-03-09 06:50:37	2014-03-09 06:50:37	666	gigasecond.rb
1342	31	ae7fa9062e7b508ef10f9412	done	ruby	point-mutations	class DNA\n  def initialize(dna) @dna = dna end\n\n  def hamming_distance other\n    other = DNA.new other\n\n    aligned = bases.zip(other.bases)\n              .reject { |x| x.compact.size == 1 }\n\n    found = aligned.group_by(&EQUAL)[false]\n    found ? found.count : 0\n  end\n  EQUAL = proc { |x, y| x == y }\n\n  def bases\n    chars\n  end\n\n  # unsafe delegator:\n  def method_missing(*a) @dna.send *a end\nend	\N	f	1	1	2014-03-16 21:17:23	2014-03-16 21:17:23	667	point-mutations.rb
1344	31	592892004e971838406090bc	done	ruby	strain	class Array\n\n  def keep(&block)\n    modify(&block)\n  end\n\n  def discard(&block)\n    modify(true, &block)\n  end\n\n  private\n\n    def modify(remove=false, &block)\n      i = length - 1\n      while i >= 0\n        delete_at(i) unless remove ^ block.call(self[i])\n        i -= 1\n      end\n      self\n    end\nend	\N	f	3	1	2014-03-11 08:52:11	2014-03-11 08:52:11	669	strain.rb
1345	31	e7e8e6aed6c1887ec70d169c	superseded	ruby	atbash-cipher	# Encodes a message by swapping z for a, y for b, etc.\n# Numbers are left unchanged\n# Punctionation and spaces are ignored when encoding\n# A space is added to the output string every 5 characters.\nclass Atbash\n\n  LETTERS = 26\n  PIVOT = 2 * 'a'.ord + LETTERS - 1\n\n  def initialize(message)\n    @message = message\n  end\n\n  def self.encode(message)\n    new(message).encode\n  end\n\n  def encode\n    char_lists.map{ |chars| chars.join('') }.join(' ')\n  end\n\n  private\n\n    def char_lists\n      new_chars.each_slice(5).to_a\n    end\n\n    def new_chars\n      clean.chars.map { |char| new_char(char) }\n    end\n\n    def clean\n      @message.downcase.gsub(/[^a-zA-Z0-9]/,'')\n    end\n\n    def new_char(char)\n      char =~ /\\d/ ? char : swap_letter(char)\n    end\n\n    def swap_letter(letter)\n      (PIVOT - letter.ord).chr\n    end\nend	\N	f	1	2	2014-02-28 07:41:00	2014-02-28 07:41:00	670	atbash-cipher.rb
1346	31	9f84e456b46330af630f009a	superseded	ruby	atbash-cipher	# Encodes a message by swapping z for a, y for b, etc.\n# Numbers are left unchanged\n# Punctionation and spaces are ignored when encoding\n# A space is added to the output string every 5 characters.\nclass Atbash\n\n  LETTERS = 26\n  PIVOT = 2 * 'a'.ord + LETTERS - 1\n\n  def initialize(message)\n    @message = message\n  end\n\n  def self.encode(message)\n    atbash = new(message).encode\n  end\n\n  def encode\n    char_lists.map{ |chars| chars.join('') }.join(' ')\n  end\n\n  private\n\n    def char_lists\n      new_chars.each_slice(5).to_a\n    end\n\n    def new_chars\n      clean.chars.map { |char| new_char }\n    end\n\n    def clean\n      @message.downcase.gsub(/[^a-zA-Z0-9]/,'')\n    end\n\n    def new_char\n      char =~ /\\d/ ? char : swap_letter\n    end\n\n    def swap_letter\n      (PIVOT - letter.ord).chr\n    end\nend	\N	f	3	1	2014-04-19 18:16:42	2014-04-19 18:16:42	670	atbash-cipher.rb
1384	34	0b065871519ddac734528125	done	ruby	sieve	class Sieve\n  FIRST = 2\n  def initialize(max)\n    @max = max\n  end\n\n  def primes\n    @primes ||= sieve (FIRST..@max).to_a, FIRST\n  end\n\n  def sieve(list, start)\n    while start \n      list.reject! { |n| n > start && n % start == 0 }\n      start = list.detect { |n| n > start }\n    end \n    list\n  end\nend	\N	f	1	4	2014-02-03 04:25:35	2014-02-03 04:25:35	693	sieve.rb
1348	31	4eeb17dac1d5bbe58b42331b	pending	ruby	leap	class Year\n  def self.leap?(year)\n    modulo = Modulo.new(year)\n    modulo.dividable?(4) && (!modulo.dividable?(100) || modulo.dividable?(400))\n  end\nend\n\nclass Modulo\n  attr_reader :number\n\n  def initialize(number)\n    @number = number\n  end\n\n  def dividable?(by)\n    number % by == 0\n  end\nend	\N	f	2	1	2014-04-07 21:39:28	2014-04-07 21:39:28	671	year.rb
1349	39	8d675fc8fc0f1c56b53c670a	hibernating	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    words = @phrase.split(/\\s|,/)\n    incidence = Hash.new {|hash, key| hash[key] = 0 }\n    words.each do |word|\n      word = word.sub(/(\\!|\\&|\\@|\\$|\\%|\\^|\\&|\\:|\\.)+/, '').downcase\n      unless word.empty? \n        incidence[word] += 1\n      end\n    end\n    incidence\n  end\nend	\N	f	5	2	2014-03-19 09:22:16	2014-03-19 09:22:16	672	word-count.rb
1350	39	1ffbfb2e8f27964809eaf3e4	superseded	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    words = @phrase.split(/\\s|,/)\n    incidence = Hash.new\n    words.each do |word|\n      word = word.sub(/(\\!|\\&|\\@|\\$|\\%|\\^|\\&|\\:|\\.)+/, '').downcase\n      unless word.empty? \n        incidence[word] = 0 unless incidence.has_key?(word)\n        incidence[word] += 1\n      end\n    end\n    incidence\n  end\nend	\N	f	7	1	2014-03-31 01:53:52	2014-03-31 01:53:52	672	word-count.rb
1352	39	f3f909c2ad12bc0326e781d9	superseded	ruby	nucleotide-count	class DNA\n  def initialize(dna_string)\n    validate_dna(dna_string)\n    @counts = NucleotideCount.new(dna_string)\n  end\n\n  def count(nucleotide)\n    @counts.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    dna_counts = Hash.new(0)\n    dna_counts['A']=@counts.count('A')\n    dna_counts['T']=@counts.count('T')\n    dna_counts['C']=@counts.count('C')\n    dna_counts['G']=@counts.count('G')\n    dna_counts\n  end\n\n\n  private\n  def validate_dna(possible_dna_sequence)\n    if possible_dna_sequence =~ /[^GACT]/\n      throw :ArgumentError\n    end\n  end\nend\n\nclass NucleotideCount\n  def initialize(nucleotide_chain)\n    @nucleotide_counts = Hash.new(0)\n    @nucleotide_counts['A']=nucleotide_chain.count('A')\n    @nucleotide_counts['T']=nucleotide_chain.count('T')\n    @nucleotide_counts['C']=nucleotide_chain.count('C')\n    @nucleotide_counts['G']=nucleotide_chain.count('G')\n    @nucleotide_counts['U']=nucleotide_chain.count('U')\n  end\n\n  def count(nucleotide)\n    validate_nucleotide(nucleotide)\n    @nucleotide_counts[nucleotide]\n  end\n\n  private\n  def validate_nucleotide(nucleotide)\n    throw :ArgumentError unless nucleotide =~ /[GACTU]/\n  end\nend	\N	f	4	1	2014-04-23 21:03:17	2014-04-23 21:03:17	673	nucleotide-count.rb
1353	39	133f7bc762e51d57ed3a3c37	superseded	ruby	nucleotide-count	class DNA\n  def initialize(dna_string)\n    validate_dna(dna_string)\n    @counts = NucleotideCount.new(dna_string)\n  end\n\n  def count(nucleotide)\n    @counts.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    @counts.dna_counts()\n  end\n\n  private\n  def validate_dna(nucleotide_chain)\n    if nucleotide_chain =~ /[^GACT]/\n      throw :ArgumentError\n    end\n  end\nend\n\nclass NucleotideCount\n  def initialize(nucleotide_chain)\n    @nucleotide_string = nucleotide_chain\n  end\n\n  def count(nucleotide)\n    validate_nucleotide(nucleotide)\n    @nucleotide_string.count(nucleotide)\n  end\n\n  def dna_counts\n    dna_counts = Hash.new(0)\n    dna_counts['A']=count('A')\n    dna_counts['T']=count('T')\n    dna_counts['C']=count('C')\n    dna_counts['G']=count('G')\n    dna_counts\n  end\n\n  private\n  def validate_nucleotide(nucleotide)\n    throw :ArgumentError unless nucleotide =~ /[GACTU]/\n  end\nend	\N	f	5	2	2014-04-25 23:59:08	2014-04-25 23:59:08	673	nucleotide-count.rb
1354	39	507801d317a1d05e39b72996	superseded	ruby	leap	class Year\n  def leap?(years)\n    if years % 400 == 0 || years % 4 == 0 && years % 100 != 0\n    \t'si es'\n    \tend\n    end\nend	\N	f	0	1	2014-04-13 13:23:49	2014-04-13 13:23:49	674	year.rb
1355	39	2c9e14e0794913a0ace590ec	hibernating	ruby	leap	# Encoding: utf-8\n\n# Clase Year\nclass Year < SimpleDelegator\n  def self.leap?(number)\n    Year.new(number).leap?\n  end\n\n  def leap?\n    divisible_by?(400) || divisible_by?(4) && !divisible_by?(100)\n  end\n\n  private\n\n  def divisible_by?(i)\n    (self % i) == 0\n  end\nend	\N	f	3	2	2014-04-26 22:42:41	2014-04-26 22:42:41	674	year.rb
1356	39	54970d529d5e40e2587d8661	done	ruby	phone-number	class Phone\n\tdef initialize(digits)\n\t\t@digits = digits\n\t\tformat_digits\n\tend\n\n\tdef number\n\t\t@digits\n\tend\n\n\tdef area_code\n\t\t@digits[0..2]\n\tend\n\n\tdef to_s\n\t\t@digits.insert(0, '(').insert(4, ') ').insert(9, '-')\n\tend\n\n\tprivate\n\n\tdef format_digits\n\t\textract_numbers\n\t\t@digits = "0000000000" if is_bad_number?\n\t\ttrim_usa_code\n\tend\n\n\tdef extract_numbers\n\t\t@digits.delete!('^0-9')\n\tend\n\n\tdef is_bad_number?\n\t\tif @digits.size == 10\n\t\t\tfalse\n\t\telsif @digits.size == 11 and @digits[0] == "1"\n\t\t\tfalse\n\t\telse\n\t\t\ttrue\n\t\tend\n\tend\n\n\tdef has_usa_code?\n\t\ttrue if @digits.size == 11 and @digits[0] == "1"\n\tend\n\n  def trim_usa_code\n  \t@digits[0] = "" if has_usa_code?\n  end\n\nend	\N	f	1	1	2014-03-23 13:06:32	2014-03-23 13:06:32	675	phone-number.rb
1357	39	d6fc429fa6521619336d8298	pending	ruby	saddle-points	class Matrix\n  def initialize string_matrix\n    @matrix = parse string_matrix\n  end\n  \n  def rows\n    @matrix.dup\n  end\n  \n  def columns\n    @matrix.transpose\n  end\n  \n  def saddle_points\n    each_cell_position_with_object([]) do |row,col,list|\n      list << [row,col] if saddle_point? row,col\n    end\n  end\n  \n  private\n  def each_cell_position_with_object obj\n    rows.each_index{|row| columns.each_index{|col| yield(row,col,obj) }}\n    return obj\n  end\n  \n  def saddle_point? row,col\n    point = @matrix[row][col]\n    rows[row].max == point && columns[col].min == point\n  end\n  \n  def parse string\n    string.split("\\n").map{|row| row.split(" ").map(&:to_i) }\n  end\nend	\N	f	0	1	2014-03-24 02:27:31	2014-03-24 02:27:31	676	matrix.rb
1359	39	1d567815ab1a2cbbec7badd2	pending	ruby	triangle	class TriangleError < StandardError; end\n\nclass Triangle\n  \n  attr_reader :sides\n  def initialize *sides\n    @sides = sides.take(3).sort\n    raise TriangleError unless valid?\n  end\n  \n  def kind\n    @kind ||= %i(equilateral isosceles scalene)[sides.uniq.length-1]\n  end\n  \n  private\n\n  def valid?\n    valid_side_permutations.length == 0\n  end\n  \n  def side_permutations\n    sides.permutation\n  end\n  \n  def valid_side_permutations\n    side_permutations.drop_while{|sides| sides[0] < sides[1]+sides[2]}\n  end\nend	\N	f	0	1	2014-04-11 03:20:01	2014-04-11 03:20:01	678	triangle.rb
1360	39	c29f13c7c254cf1f3172c640	done	ruby	accumulate	class Array\n  def accumulate\n    each_with_object([]) { |element, ary| ary << yield(element) }\n  end\nend	\N	f	1	1	2014-03-17 10:46:20	2014-03-17 10:46:20	679	accumulate.rb
1361	39	f0ad30782e91ee4a560e86b6	pending	ruby	grains	class Grains\n  SQUARE_COUNT = 64\n\n  def square(number)\n    2 ** (number-1)\n  end\n\n  def total\n    (1..SQUARE_COUNT).reduce(0) { |sum, number| sum + square(number) }\n  end\nend	\N	f	2	2	2014-03-15 22:01:47	2014-03-15 22:01:47	680	grains.rb
1362	39	2bbe1f7e8751bfde5b251572	superseded	ruby	grains	class Grains\n  SQUARE_COUNT = 64\n\n  def square(number)\n    2**(number-1)\n  end\n\n  def total\n    (1..SQUARE_COUNT).reduce(0) { |sum, number| sum + square(number) }\n  end\nend	\N	f	0	1	2014-04-16 20:02:24	2014-04-16 20:02:24	680	grains.rb
1363	39	4643a53864bb82e032c3fb44	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = sanitize(word)\n  end\n\n  def match(words)\n    words.select { |word| anagram?(sanitize word) }\n  end\n  \n  private\n\n  def sanitize(word)\n    word.downcase.strip\n  end\n\n  def anagram?(candidate)\n    candidate.chars.sort == @word.chars.sort &&  @word != candidate\n  end\nend	\N	f	3	4	2014-04-03 13:55:12	2014-04-03 13:55:12	681	anagram.rb
1364	39	a162e372ee2d23df15a1eb3d	done	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = sanitize(word)\n  end\n\n  def match(words)\n    words.select { |word| anagram?(sanitize word) }\n  end\n  \n  private\n\n  def sanitize(word)\n    word.downcase.strip\n  end\n\n  def anagram?(candidate)\n    sort_chars(candidate) == sort_chars(@word) &&  @word != candidate\n  end\n  \n  def sort_chars(word)\n    word.chars.sort\n  end\nend	\N	f	5	5	2014-04-26 09:28:45	2014-04-26 09:28:45	681	anagram.rb
1366	39	01322fab8a8f382fe12ad845	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = sanitize_word(word)\n  end\n\n  def match(words)\n    candidates = sanitize_candidates(words)\n\n    candidates.map.with_index do |candidate, index| \n      words[index] if is_anagram?(candidate)\n    end.compact!\n  end\n  \n  private\n\n\n  def sanitize_word(word)\n    word.downcase.strip\n  end\n\n  def sanitize_candidates(words)\n    words.map { |word| word.downcase.strip }\n  end\n\n  def is_anagram?(candidate)\n    if @word == candidate\n      false\n    else\n      candidate.chars.sort == @word.chars.sort\n    end\n  end\nend	\N	f	1	2	2014-05-13 18:16:54	2014-05-13 18:16:54	681	anagram.rb
1367	39	0c18b7d706ebecdd32c60ef7	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = sanitize(word)\n  end\n\n  def match(words)\n    words.select { |word| is_anagram?(sanitize word) }\n  end\n  \n  private\n\n  def sanitize(word)\n    word.downcase.strip\n  end\n\n  def is_anagram?(candidate)\n    if @word == candidate\n      false\n    else\n      candidate.chars.sort == @word.chars.sort\n    end\n  end\nend	\N	f	0	3	2014-05-19 09:06:08	2014-05-19 09:06:08	681	anagram.rb
1368	39	2dcbd9bd8a69dd1309628207	done	ruby	robot-name	class Robot\n\tdef initialize\n\t\t@name = gen_name\n\tend\n\tdef gen_name\n\t\t"#{('a'..'z').to_a.shuffle[0]}#{('a'..'z').to_a.shuffle[0]}#{(0..9).to_a.shuffle[0]}#{(0..9).to_a.shuffle[0]}#{(0..9).to_a.shuffle[0]}"\n\tend\n\tdef name\n\t\t@name\n\tend\n\n\tdef reset\n\t\t@name = gen_name\n\tend\nend	\N	f	3	1	2014-04-15 09:45:15	2014-04-15 09:45:15	682	robot-name.rb
1369	39	fc8f344838b7a0a23e47df64	pending	ruby	raindrops	class Raindrops\n  def self.convert(input)\n    string = ""\n    string += "Pling" if factor_of_three?(input)\n    string += "Plang" if factor_of_five?(input)\n    string += "Plong" if factor_of_seven?(input)\n    string += input.to_s if string.empty?\n    string\n  end\n\n  def self.factor_of_three?(input)\n    input % 3 == 0\n  end\n\n  def self.factor_of_five?(input)\n    input % 5 == 0\n  end\n\n  def self.factor_of_seven?(input)\n    input % 7 == 0\n  end\nend	\N	f	1	1	2014-04-05 01:21:04	2014-04-05 01:21:04	683	raindrops.rb
1370	39	6e848aaf6ebce6a674997d6b	done	ruby	beer-song	class Beer\n  def sing(start_verse, end_verse=0)\n    start_verse.downto(end_verse).map {|v| verse(v)}.join("\\n") + "\\n"\n  end\n\n  def verse(bottles)\n    "#{bottle_phrase(bottles).capitalize} on the wall, #{bottle_phrase(bottles)}.\\n" +\n    "#{take_one_phrase(bottles)}, #{bottle_phrase(bottles-1)} on the wall.\\n"\n  end\n\n  def bottle_phrase(bottles)\n    case bottles\n    when 0 then "no more bottles of beer"\n    when 1 then "1 bottle of beer"\n    when -1 then "99 bottles of beer"\n    else "#{bottles} bottles of beer"\n    end\n  end\n\n  def take_one_phrase(bottles)\n    case bottles\n    when 0 then "Go to the store and buy some more"\n    when 1 then "Take it down and pass it around"\n    else "Take one down and pass it around"\n    end\n  end\nend	\N	f	2	1	2014-04-09 14:36:00	2014-04-09 14:36:00	684	beer-song.rb
1371	34	3157b7e5de603d325e41ffa5	superseded	ruby	bob	class Bob\n  \n  def hey (convo)\n    convo = convo.strip\n    return "Fine. Be that way!" if convo.length == 0\n    return "Woah, chill out!" if (convo == convo.upcase && convo.upcase.match(/[A-Z]/))\n    return "Sure." if convo[-1,1] == '?'\n    "Whatever."\n  end\n\nend	\N	f	0	1	2014-01-26 19:47:23	2014-01-26 19:47:23	685	bob.rb
1385	34	35c8c219a73134644384babd	superseded	ruby	sieve	class Sieve\n  FIRST = 2\n  def initialize(max)\n    @max = max\n  end\n\n  def primes\n    @primes ||= sieve (FIRST..@max).to_a, FIRST\n  end\n\n  def sieve(list, start)\n    list.reject! { |n| n > start && n % start == 0 }\n    new_start = list.detect { |n| n > start }\n    new_start ? sieve(list, new_start) : list\n  end\nend	\N	f	0	1	2014-03-31 03:55:09	2014-03-31 03:55:09	693	sieve.rb
1373	34	2b2d6ee0458b326e66e6167a	done	ruby	nucleotide-count	class DNA\n  BASE = %w{ A C G T }\n\n  def initialize(dna)\n    validate dna, "Invalid sequence '#{dna}'"\n    @dna = dna\n  end\n\n  def count(nucleo)\n    validate nucleo, "Invalid nucleotide '#{nucleo}'", 'U'\n    @dna.chars.count nucleo\n  end\n\n  def nucleotide_counts\n    BASE.each_with_object({}) { |char, counts| counts[char] = count char }\n  end\n\n  private\n\n  def validate(arg, error, extra=nil)\n    raise ArgumentError, error unless\n    arg.chars.all? { |c| BASE.dup.push(extra).include? c }\n  end\nend	\N	f	1	3	2014-02-11 15:21:57	2014-02-11 15:21:57	686	nucleotide-count.rb
1374	34	49bf6dafe9bd5dcb21e48473	superseded	ruby	nucleotide-count	class DNA\n  BASE = ['A', 'C', 'G', 'T']\n\n  def initialize(dna)\n    check_argument(dna)\n    @dna = dna\n  end\n\n  def count(nucleo)\n    return 0 if nucleo == 'U'\n    check_argument(nucleo)\n    @dna.chars.select { |char| char == nucleo }.size\n  end\n\n  def nucleotide_counts\n    BASE.each_with_object({}) do |char, counts|\n      counts[char] = count(char)\n    end\n  end\n\n  private\n\n  def check_argument(arg)\n    raise ArgumentError unless arg.chars.all? { |c| BASE.include? c }\n  end\nend	\N	f	2	1	2014-03-17 01:50:21	2014-03-17 01:50:21	686	nucleotide-count.rb
1375	34	4192749ccb9a7b1811d93d23	superseded	ruby	nucleotide-count	class DNA\n  BASE = ['A', 'C', 'G', 'T']\n\n  def initialize(dna)\n    validate dna, "Invalid sequence '#{dna}'"\n    @dna = dna\n  end\n\n  def count(nucleo)\n    validate nucleo, "Invalid nucleotide '#{nucleo}'", 'U'\n    @dna.chars.count nucleo\n  end\n\n  def nucleotide_counts\n    BASE.each_with_object({}) { |char, counts| counts[char] = count char }\n  end\n\n  private\n\n  def validate(arg, error, extra=nil)\n    raise ArgumentError, error unless\n    arg.chars.all? { |c| BASE.dup.push(extra).include? c }\n  end\nend	\N	f	3	2	2014-04-13 18:50:34	2014-04-13 18:50:34	686	nucleotide-count.rb
1376	34	a4805f9c778c63bfdd419c04	done	ruby	grade-school	class School\n  def initialize\n    @db = Hash.new { |hash, key| hash[key] = [] }\n  end\n\n  def db\n    @db\n  end\n\n  def add(name, grade)\n    db[grade] << name\n  end\n\n  def grade(level)\n    db[level]\n  end\n\n  def sort\n    Hash[\n      db.sort.reduce([]) { |memo, a| memo << [a[0], a[1].sort] }\n    ]\n  end\nend	\N	f	2	2	2014-03-19 05:43:43	2014-03-19 05:43:43	687	grade-school.rb
1377	34	5f6242083368c34977e28a9c	superseded	ruby	grade-school	class School\n  def initialize\n    @db = Hash.new { |hash, key| hash[key] = [] }\n  end\n\n  def db\n    @db\n  end\n\n  def add(name, grade)\n    @db[grade] << name\n  end\n\n  def grade(level)\n    @db[level]\n  end\n\n  def sort\n    Hash[\n      db.sort.reduce([]) { |memo, a| memo << [a[0], a[1].sort] }\n    ]\n  end\nend	\N	f	7	1	2014-05-12 18:28:03	2014-05-12 18:28:03	687	grade-school.rb
1379	34	b48d682b731e58ea0c650e94	hibernating	ruby	word-count	class Phrase\n  def initialize(phrase)\n    @phrase = phrase.gsub(/[!&@$%^:,.]/, ' ').downcase\n  end\n\n  def word_count\n    @phrase.split.inject(Hash.new(0)) do |counts, word|\n      counts.merge word => counts[word] + 1\n    end\n  end\nend	\N	f	1	1	2014-01-22 18:25:49	2014-01-22 18:25:49	689	phrase.rb
1380	34	7220e3d3bc6294ee00da371d	superseded	ruby	food-chain	class FoodChainSong\n  def sing\n    verses(Swallowable.min, Swallowable.max)\n  end\n\n  def verses(first, last)\n    first.upto(last).map { |n| verse(n) }.join("\\n") + "\\n"\n  end\n\n  def verse(number)\n    Swallowable.at(number).to_s + "\\n"\n  end\nend\n\n\nclass FoodChainSong\n  class Swallowable\n    def self.at(index)\n      all[index]\n    end\n\n    def self.min\n      all.keys.first\n    end\n\n    def self.max\n      all.keys.last\n    end\n\n    def self.all\n      @all ||= {\n        1 => Swallowable.new("fly",    aside: "I don't know why she swallowed the fly. Perhaps she'll die."),\n        2 => Swallowable.new("spider", aside: "It wriggled and jiggled and tickled inside her.", qualified: "spider that wriggled and jiggled and tickled inside her"),\n        3 => Swallowable.new("bird",   aside: "How absurd to swallow a bird!"),\n        4 => Swallowable.new("cat",    aside: "Imagine that, to swallow a cat!"),\n        5 => Swallowable.new("dog",    aside: "What a hog, to swallow a dog!"),\n        6 => Swallowable.new("goat",   aside: "Just opened her throat and swallowed a goat!"),\n        7 => Swallowable.new("cow",    aside: "I don't know how she swallowed a cow!"),\n        8 => Swallowable.new("horse",  aside: "She's dead, of course!", lethal: true),\n      }\n    end\n\n    attr_reader :object, :aside, :previous_object\n\n    def initialize(object, aside:, qualified: nil, lethal: false)\n      @object, @aside, @qualified_object, @lethal = object, aside, qualified, lethal\n    end\n\n    def to_s\n      (latest_swallowing + earlier_swallowings).join("\\n")\n    end\n\n    def reason_or_aside\n      if pred\n        "She swallowed the #{object} to catch the #{pred.qualified_object}."\n      else\n        aside\n      end\n    end\n\n    def qualified_object\n      @qualified_object || object\n    end\n\n    private\n\n    def latest_swallowing\n      [swallowing, aside]\n    end\n\n    def swallowing\n      "I know an old lady who swallowed a #{object}."\n    end\n\n    def earlier_swallowings\n      if !pred || lethal?\n        []\n      else\n        number.downto(self.class.min).map { |i| self.class.at(i).reason_or_aside }\n      end\n    end\n\n    def number\n      self.class.all.values.index(self) + 1\n    end\n\n    def pred\n      number == 1 ? nil : self.class.all.values[number - 2]\n    end\n\n    def lethal?\n      @lethal\n    end\n  end\nend	\N	f	2	1	2014-03-17 04:50:37	2014-03-17 04:50:37	690	food-chain.rb
1381	34	3e45ae65f7ab6ca537fb45a3	pending	ruby	food-chain	require "yaml"\n\nclass FoodChainSong\n  # Reimplementing __END__ because it will look for the test file's __END__ data otherwise.\n  DATA = File.read(__FILE__)[/.*__END__\\n(.+)/m, 1]\n  VERSES = YAML.load(DATA)\n\n  def sing\n    verses(*VERSES.keys.minmax)\n  end\n\n  def verses(first, last)\n    first.upto(last).map { |n| verse(n) }.join("\\n") + "\\n"\n  end\n\n  def verse(number)\n    VERSES.fetch(number)\n  end\nend\n\n__END__\n1: |\n  I know an old lady who swallowed a fly.\n  I don't know why she swallowed the fly. Perhaps she'll die.\n2: |\n  I know an old lady who swallowed a spider.\n  It wriggled and jiggled and tickled inside her.\n  She swallowed the spider to catch the fly.\n  I don't know why she swallowed the fly. Perhaps she'll die.\n3: |\n  I know an old lady who swallowed a bird.\n  How absurd to swallow a bird!\n  She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\n  She swallowed the spider to catch the fly.\n  I don't know why she swallowed the fly. Perhaps she'll die.\n4: |\n  I know an old lady who swallowed a cat.\n  Imagine that, to swallow a cat!\n  She swallowed the cat to catch the bird.\n  She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\n  She swallowed the spider to catch the fly.\n  I don't know why she swallowed the fly. Perhaps she'll die.\n5: |\n  I know an old lady who swallowed a dog.\n  What a hog, to swallow a dog!\n  She swallowed the dog to catch the cat.\n  She swallowed the cat to catch the bird.\n  She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\n  She swallowed the spider to catch the fly.\n  I don't know why she swallowed the fly. Perhaps she'll die.\n6: |\n  I know an old lady who swallowed a goat.\n  Just opened her throat and swallowed a goat!\n  She swallowed the goat to catch the dog.\n  She swallowed the dog to catch the cat.\n  She swallowed the cat to catch the bird.\n  She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\n  She swallowed the spider to catch the fly.\n  I don't know why she swallowed the fly. Perhaps she'll die.\n7: |\n  I know an old lady who swallowed a cow.\n  I don't know how she swallowed a cow!\n  She swallowed the cow to catch the goat.\n  She swallowed the goat to catch the dog.\n  She swallowed the dog to catch the cat.\n  She swallowed the cat to catch the bird.\n  She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\n  She swallowed the spider to catch the fly.\n  I don't know why she swallowed the fly. Perhaps she'll die.\n8: |\n  I know an old lady who swallowed a horse.\n  She's dead, of course!	\N	f	2	2	2014-05-22 07:21:55	2014-05-22 07:21:55	690	food-chain.rb
1382	34	ffaae961a49448722f578964	done	ruby	strain	class Array\n  def keep\n    bin = []\n    for i in self\n      bin << i if yield i\n    end\n    bin\n  end\n\n  def discard\n    bin = []\n    for i in self\n      bin << i if !(yield i)\n    end\n    bin\n  end\nend	\N	f	1	1	2014-01-24 02:04:40	2014-01-24 02:04:40	691	array.rb
1383	34	7cdeac0f0ec2898ca26feaab	hibernating	ruby	grains	class Grains\r\n\tdef square(num)\r\n\t\ti=1\r\n\t\tsuma = 0\r\n\t\tcal = 0\r\n\t\twhile i <= num\r\n\t\t\tcal=2**(i-1)\r\n\t\t\treturn cal\r\n\t\t\tsuma+=cal\r\n\t\t\ti=i+1\r\n\t\tend\r\n\tend\r\n\tdef total()\r\n\t\treturn suma\r\n\tend\r\nend\r	\N	f	0	1	2014-02-07 00:17:04	2014-02-07 00:17:04	692	grains.rb
1388	34	6420931bc53a0db55416e769	done	ruby	triangle	class Triangle\n  attr_reader :sides\n\n  def initialize(*sides)\n    @sides = sides\n    validate_sides!\n  end\n\n  def kind\n    case unique_sides\n    when 1 then :equilateral\n    when 2 then :isosceles\n    else :scalene\n    end\n  end\n\nprivate\n\n  def validate_sides!\n    if sides.any?(&:zero?) || sides.any?(&negative?) ||\n        sides.any?(&too_short?)\n      raise TriangleError\n    end\n  end\n\n  def unique_sides\n    sides.uniq.length\n  end\n\n  def negative?\n    proc {|n| n < 0 }\n  end\n\n  def too_short?\n    proc do |side|\n      perimeter - side <= side\n    end\n  end\n\n  def perimeter\n    sides.inject(:+)\n  end\nend\n\nclass TriangleError < StandardError; end	\N	f	1	1	2014-02-12 12:24:08	2014-02-12 12:24:08	694	triangle.rb
1389	34	b16fa87046e4a8db9943a3d5	done	ruby	clock	class Clock\n  def self.at(hours, minutes = 0)\n    hours * 60 + minutes\n  end\n\n  def to_s\n    "#{self/60}"\n  end\nend\n\nclass Fixnum\n  alias_method :old_to_s, :to_s\n\n  def to_s\n    hours   = "%02d" % (self / 60 % 24).old_to_s\n    minutes = "%02d" % (self % 60).old_to_s\n    return hours + ":" + minutes\n  end\nend	\N	f	1	1	2014-01-29 04:24:50	2014-01-29 04:24:50	695	clock.rb
1390	34	168ba48ed05661ca82f3b22e	superseded	ruby	raindrops	class Raindrops\n\n  # Order is important\n  RAINDROP_SPEAK = {\n    3 => 'Pling',\n    5 => 'Plang',\n    7 => 'Plong'\n  }\n\n  def self.convert(number)\n    string = ''\n\n    RAINDROP_SPEAK.each { |k,v|\n      string += v if number.modulo(k).zero?\n    }\n\n    string.empty? ? number.to_s : string\n  end\n\nend	\N	f	1	2	2014-01-30 23:58:46	2014-01-30 23:58:46	696	raindrops.rb
1391	34	e6bb92f6f94eaed94b988b6a	superseded	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    if number % 105 == 0\n      'PlingPlangPlong'\n    elsif number % 35 == 0\n      'PlangPlong'\n    elsif number % 21 == 0\n      'PlingPlong'\n    elsif number % 15 == 0\n      'PlingPlang'\n    elsif number % 7 == 0\n      'Plong'\n    elsif number % 5 == 0\n      'Plang'\n    elsif number % 3 == 0\n      'Pling'\n    else\n      number.to_s\n    end\n  end\nend	\N	f	0	1	2014-01-31 07:03:08	2014-01-31 07:03:08	696	raindrops.rb
1392	34	d02892978e81364be12bed6f	pending	ruby	raindrops	class Raindrops\n\n  # Order is important\n  RAINDROP_SPEAK = {\n    1 => '',\n    3 => 'Pling',\n    5 => 'Plang',\n    7 => 'Plong'\n  }\n\n  def self.convert(number)\n    output = RAINDROP_SPEAK.reduce('') { |memo, (key, _)|\n      memo + RAINDROP_SPEAK[number.gcd(key)]\n    }\n\n    output.empty? ? number.to_s : output\n  end\n\nend	\N	f	1	3	2014-04-07 01:33:47	2014-04-07 01:33:47	696	raindrops.rb
1393	34	ce5a262ef307ed866a1ee69e	superseded	ruby	rna-transcription	class DNA < String\n  def to_rna\n    gsub 'T', 'U'\n  end\nend	\N	f	1	1	2014-03-04 10:19:35	2014-03-04 10:19:35	697	rna-transcription.rb
1394	34	0ecf2074f85f727f4acb7bd2	done	ruby	rna-transcription	class DNA < String\n  THYMINE = 'T'\n  URACIL  = 'U'\n\n  def to_rna\n    gsub THYMINE, URACIL\n  end\nend	\N	f	2	2	2014-04-05 13:29:08	2014-04-05 13:29:08	697	rna-transcription.rb
1396	34	fc7caaffa89e4be417993d67	superseded	ruby	robot-name	require 'forwardable'\n\nclass Robot\n\n  attr_reader :name\n  attr_accessor :name_generator\n  @robots = []\n\n  def name\n    @name ||= set_name\n  end\n\n  def reset\n    self.class.robots.delete(@name)\n    @name = nil\n  end\n\n  def self.robots\n    @robots\n  end\n\n  def name_generator\n    @name_generator ||= NameProvider.new\n  end\n\n  private\n\n  def set_name\n    begin\n      @name = name_generator.generate_name\n    end while self.class.robots.include?(@name)\n    self.class.robots << @name\n    @name\n  end\n\nend\n\nclass NameProvider\n  def generate_name\n    [letter, letter, number, number, number].join\n  end\n\n  def letter\n    ("A".."Z").to_a.shuffle\n  end\n\n  def number\n    ("0".."9").to_a.shuffle\n  end\n\nend\n\n# Additional Test to prove duplicates are thrown out\n#class RobotTest < MiniTest::Unit::TestCase\n#  def test_duplicate_names\n#    generator = MiniTest::Mock.new\n#    generator.expect(:generate_name, "DW102")\n#    generator.expect(:generate_name, "DW102")\n#    generator.expect(:generate_name, "DW103")\n#    \n#    robot = Robot.new\n#    robot2 = Robot.new\n#    robot.name_generator = generator\n#    robot2.name_generator = generator\n#\n#    assert_equal "DW102", robot.name\n#    assert_equal "DW103", robot2.name\n#  end\n#end	\N	f	1	1	2014-03-10 14:26:07	2014-03-10 14:26:07	699	robot-name.rb
1397	34	c15bc48e1cf62e07572adb0c	done	ruby	robot-name	class Robot\n  attr_reader :name, :name_generator\n\n  @robots = []\n\n  def initialize(name_generator = NameGenerator.new)\n    @name_generator = name_generator\n    reset\n  end\n\n  def reset\n    self.class.robots.delete(@name)\n    begin\n      @name = name_generator.generate\n    end while self.class.robots.include?(@name)\n    self.class.robots << @name\n  end\n\n  def self.robots\n    @robots\n  end\nend\n\nclass NameGenerator\n  def generate\n    [letter, letter, number, number, number].join\n  end\n\n  def letter\n    ("A".."Z").to_a.shuffle\n  end\n\n  def number\n    ("0".."9").to_a.shuffle\n  end\nend\n\n# Additional test to test duplicate names do are not allowed\n#def test_duplicate_names\n#  generator = MiniTest::Mock.new\n#  generator.expect(:generate, "DW102")\n#  generator.expect(:generate, "DW102")\n#  generator.expect(:generate, "DW103")\n#\n#  robot = Robot.new(generator)\n#  robot2 = Robot.new(generator)\n#\n#  assert_equal "DW102", robot.name\n#  assert_equal "DW103", robot2.name	\N	f	2	3	2014-03-17 14:13:25	2014-03-17 14:13:25	699	robot-name.rb
1398	36	d9e6998bddc3dd507df7267f	pending	ruby	hamming	class Hamming\n\n  def self.compute(str1, str2)\n    dist = 0\n\n    until str1.empty? || str2.empty?\n      break if str1 == str2\n      dist += 1 if str1.slice!(0) != str2.slice!(0)\n    end\n\n    dist\n  end\n\nend	\N	f	1	1	2013-10-12 16:06:08	2013-10-12 16:06:08	700	hamming.rb
1400	36	94e67ba864c36e3bfd3c1550	superseded	ruby	anagram	class Anagram\n  attr_reader :input\n\n  def initialize(input)\n    @input = input\n  end\n\n  def match(potential_matches)\n    filter_duplicates(potential_matches).find_all do |potential_match|\n      sort_letters(potential_match) == sort_letters(input)\n    end\n  end\n\n  private\n\n  def sort_letters(input)\n    input.downcase.split("").sort.join\n  end\n\n  def filter_duplicates(list_of_words)\n    list_of_words.reject do |word|\n      word.downcase == input.downcase\n    end\n  end\nend	\N	f	1	2	2013-12-29 02:40:14	2013-12-29 02:40:14	701	anagram.rb
1401	36	ae5d8c131cd5ef95d8bb27f3	done	ruby	anagram	class Anagram\n  attr_reader :subject\n\n  def initialize(input)\n    @subject = input.downcase\n  end\n\n  def match(candidates)\n    candidates.find_all do |candidate|\n      anagram?(candidate)\n    end\n  end\n\n  private\n\n  def anagram?(candidate)\n    !duplicate?(candidate) && rearranged?(candidate)\n  end\n\n  def duplicate?(word)\n    word.downcase == subject\n  end\n\n  def rearranged?(word)\n    word.downcase.chars.sort == subject.chars.sort\n  end\n\nend	\N	f	3	3	2014-03-10 18:07:28	2014-03-10 18:07:28	701	anagram.rb
1402	36	8212651bc79c933e0d30d761	superseded	ruby	bob	class Bob\n  def hey(words)\n    if words.strip.empty?\n      'Fine. Be that way!'\n    elsif yelling?(words)\n      'Woah, chill out!'\n    elsif words.end_with? '?'\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n  \n  def yelling?(words)\n    words.upcase == words\n  end\nend	\N	f	1	1	2013-10-29 00:56:37	2013-10-29 00:56:37	702	bob.rb
1403	36	f1fb3a615a2d6f331fcacd68	done	ruby	bob	class Bob\n  def hey(words)\n    if said_nothing? words\n      'Fine. Be that way!'\n    elsif yelling? words\n      'Woah, chill out!'\n    elsif question? words\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n  \n  def yelling?(words)\n    words.upcase == words\n  end\n\n  def said_nothing?(words)\n    words.strip.empty?\n  end\n\n  def question?(words)\n    words.end_with? '?'\n  end\nend	\N	f	3	2	2014-02-03 21:11:53	2014-02-03 21:11:53	702	bob.rb
1404	36	88f3f7120d9737c84411a1c1	pending	ruby	leap	#Year class\r\nclass Year\r\n  def self.leap?(anio)\r\n    if anio % 4 == 0 \r\n      if anio % 100 != 0\r\n        true\r\n      elsif anio % 400 == 0\r\n        true\r\n      else\r\n        false\r\n      end\r\n    else\r\n     false\r\n    end\r\n   end\r\nend\r	\N	f	1	2	2014-02-03 20:38:13	2014-02-03 20:38:13	703	year.rb
1405	36	c12c150746f414262a271457	superseded	ruby	leap	\r\nclass Year\r\n\tdef self.leap?(anio)\r\n\t\tif anio % 4 == 0 \r\n\t\t\t\r\n\t\t\tif anio % 100 != 0\r\n\t\t\t\ttrue\r\n\t\t\telsif anio % 400 ==0\r\n\t\t\t\ttrue\r\n\t\t\telse\r\n\t\t\t\tfalse\r\n\t\t\tend\r\n\t\telse\r\n\r\n\t\t\tfalse\r\n\t\tend\r\n\r\n\r\n\tend\r\nend	\N	f	1	1	2014-02-26 23:38:15	2014-02-26 23:38:15	703	year.rb
1406	36	889858a00535947eda53f806	superseded	ruby	meetup	require 'date'\n\nclass Meetup\n\n\tdef initialize(month, year)\n\t\t@year = year\n\t\t@month = month\n\tend\n\n\tordinals = {'first' => 1, 'second' => 8, 'third' => 15, 'fourth' => 22}\n\tweekdays = %W[sun mon tues wednes thurs fri satur]\n\n\t(0..6).each do |weekday|\n\t\tordinals.each do |ordinal, ordinal_v|\n\t\t\tdefine_method "#{ordinal}_#{weekdays[weekday]}day" do\n\t\t\t\treturn Date.new(@year, @month, ordinal_v).step(Date.new(@year,-1,-1)).find{|d| d.wday == weekday}\n\t\t\tend\n\t\tend\n\t\tdefine_method "last_#{weekdays[weekday]}day" do\n\t\t\treturn Date.new(@year, @month, -1).downto(0).find{|d| d.wday == weekday}\n\t\tend\n\t\tdefine_method "#{weekdays[weekday]}teenth" do\n\t\t\treturn Date.new(@year, @month, 13).step(Date.new(@year,-1,-1)).find{|d| d.wday == weekday}\n\t\tend\n\tend\nend	\N	f	1	1	2013-12-01 13:20:26	2013-12-01 13:20:26	704	meetup.rb
1407	36	64f1ea1b53f4c1f97f7b84d8	done	ruby	meetup	require 'date'\n\nclass Meetup\n\n\tdef initialize(month, year)\n\t\t@year = year\n\t\t@month = month\n\tend\n\n\tordinals = {'first' => 1, 'second' => 8, 'third' => 15, 'fourth' => 22}\n\tweekdays = %W[sun mon tues wednes thurs fri satur]\n\n\tweekdays.each do |weekday|\n\t\tordinals.each do |ordinal, ordinal_v|\n\t\t\tdefine_method "#{ordinal}_#{weekday}day" do\n\t\t\t\treturn Date.new(@year, @month, ordinal_v).step(Date.new(@year,-1,-1)).find{|d| d.send("#{weekday}day?")}\n\t\t\tend\n\t\tend\n\t\tdefine_method "last_#{weekday}day" do\n\t\t\treturn Date.new(@year, @month, -1).downto(0).find{|d| d.send("#{weekday}day?")}\n\t\tend\n\t\tdefine_method "#{weekday}teenth" do\n\t\t\treturn Date.new(@year, @month, 13).step(Date.new(@year,-1,-1)).find{|d| d.send("#{weekday}day?")}\n\t\tend\n\tend\nend	\N	f	1	2	2013-12-27 05:36:22	2013-12-27 05:36:22	704	meetup.rb
1408	36	82f6c939b6cc225f7d148427	superseded	ruby	point-mutations	class DNA < Struct.new(:sequence)\n  def hamming_distance(dna_sequence)\n    sequence.chars.select.with_index do |base, i|\n      dna_sequence.length > i && dna_sequence[i] != base\n    end.count\n  end\nend	\N	f	0	1	2013-10-27 04:55:13	2013-10-27 04:55:13	705	point-mutations.rb
1409	36	e7cfe0e8c52fc0b88793be0a	done	ruby	point-mutations	class DNA < Struct.new(:sequence)\n  def hamming_distance(other_sequence)\n    sequence.chars.select.with_index do |base, i|\n      other_sequence[i] && other_sequence[i] != base\n    end.count\n  end\nend	\N	f	1	2	2013-12-10 01:25:24	2013-12-10 01:25:24	705	point-mutations.rb
1410	36	7220119996d9a5a54aa80236	hibernating	ruby	roman-numerals	# Monkey patching class Fixnum\nclass Fixnum\n  def to_roman\n    handle_thousands(self / 1000)            +\n    handle((self / 100) % 10, 'C', 'D', 'M') +\n    handle((self / 10) % 10, 'X', 'L', 'C')  +\n    handle(self % 10, 'I', 'V', 'X')\n  end\n\n  def handle(x, c, d, m)\n    return c + m if  x == 9\n    return c + d if  x == 4\n    return (c * x) if x < 5\n    return d + "#{ c * (x % 5) }" if x >= 5\n  end\n\n  def handle_thousands(x)\n    'M' * x\n  end\nend	\N	f	1	1	2013-12-23 22:36:56	2013-12-23 22:36:56	706	roman.rb
1411	36	94a5744beecbe9a7f279ab8d	hibernating	ruby	grains	class Grains\n  \n  def square(number)\n    2 ** (number - 1)\n  end\n\n  def total\n    (1..64).map { |i| square(i) }.reduce(&:+)\n  end\n\nend	\N	f	1	1	2013-11-01 00:47:55	2013-11-01 00:47:55	707	grains.rb
1414	36	542574284fdc760e44fffe7c	pending	ruby	difference-of-squares	class Squares\n\n  def initialize(limit)\n    @limit = limit\n  end\n\n  def square_of_sums\n    @square_of_sums ||= 1.upto(@limit).reduce(:+) ** 2\n  end\n\n  def sum_of_squares\n    @sum_of_squares ||= 1.upto(@limit).map { |x| x ** 2 }.reduce(:+)\n  end\n\n  def difference\n    square_of_sums - sum_of_squares\n  end\n\nend	\N	f	1	1	2014-03-18 21:18:44	2014-03-18 21:18:44	710	squares.rb
1415	36	4db6f9c49ee7a6dc92c5cd4d	done	ruby	rna-transcription	require 'forwardable'\n\nclass Acid\n  extend Forwardable\n  def_delegators :strand, :to_str, :to_s, :==\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\nend\n\nclass RibonucleicAcid < Acid\nend\n\nclass DeoxyribonucleicAcid < Acid\n\n  def to_rna\n    RibonucleicAcid.new(strand.gsub("T", "U"))\n  end\n\nend	\N	f	1	2	2014-03-10 13:22:29	2014-03-10 13:22:29	711	rna-transcription.rb
1416	36	159519e7715c3986bd3958c6	superseded	ruby	rna-transcription	class Acid\n  require 'forwardable'\n  extend Forwardable\n  def_delegators :strand, :to_str, :to_s, :==\n  attr_reader :strand\n\n  def initialize(strand)\n    @strand = strand\n  end\n\nend\n\nclass RibonucleicAcid < Acid\nend\n\nclass DeoxyribonucleicAcid < Acid\n\n  def to_rna\n    RibonucleicAcid.new(strand.gsub("T", "U"))\n  end\n\nend	\N	f	2	1	2014-04-25 22:05:08	2014-04-25 22:05:08	711	rna-transcription.rb
1418	32	467d893dca9908ee6373b64f	hibernating	ruby	bob	class Bob\n\n  MIXED_SIGNALS_REGEX = /^[A-Z ]+$/\n  SCREAMING_RETHORICAL_QUESTION_REGEX = /^[A-Z ]+\\?$/\n\n  def hey(message)\n    case(message.strip[-1])\n    when "!"\n      respond_to_serious_talk(message)\n    when "?"\n      respond_to_question(message)\n    when nil\n      respond_to_silent_treatment\n    else\n      respond_to_statement(message)\n    end\n  end\n\n  private\n\n  def respond_to_serious_talk(message)\n    if(message.upcase == message)\n      "Woah, chill out!"\n    else\n      dont_care\n    end\n  end\n\n  def respond_to_question(message)\n    if(message =~ SCREAMING_RETHORICAL_QUESTION_REGEX)\n      "Woah, chill out!"\n    else\n      "Sure."\n    end\n  end\n\n  def respond_to_statement(message)\n    if(message =~ MIXED_SIGNALS_REGEX)\n      "Woah, chill out!"\n    else\n      dont_care\n    end\n  end\n\n  def respond_to_silent_treatment\n    "Fine. Be that way!"\n  end\n\n  def dont_care\n    "Whatever."\n  end\nend	\N	f	2	1	2014-02-22 00:31:39	2014-02-22 00:31:39	713	bob.rb
1419	32	bfacef899bd43639252bf0de	pending	ruby	raindrops	class Raindrops\n  \n  def self.convert num\n    sound = ""\n    \n    sound << "Pling"  if num % 3 == 0 \n    sound << "Plang"  if num % 5 == 0 \n    sound << "Plong"  if num % 7 == 0\n    sound << num.to_s if sound == ""\n    return sound\n  end\nend	\N	f	1	1	2014-03-23 04:32:55	2014-03-23 04:32:55	714	raindrops.rb
1420	32	2879ed9fbce5c1ba8907abbd	superseded	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def self.leap?(year)\n    new(year).leap?\n  end\n\n  def leap?\n    divisible_by(4) && !divisible_by(100) || divisible_by(400)\n  end\n\n  private\n\n  def divisible_by(number)\n    year % number == 0\n  end\nend	\N	f	1	4	2014-02-18 00:46:09	2014-02-18 00:46:09	715	year.rb
1421	32	b4892fb864a4f7224c8ffc48	superseded	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def self.leap?(year)\n    new(year).leap?\n  end\n\n  def leap?\n    year % 4 == 0 && year % 100 != 0 || year % 400 == 0\n  end\nend	\N	f	1	2	2014-03-27 19:48:56	2014-03-27 19:48:56	715	year.rb
1422	32	cfe2487afce59e9d627ab361	superseded	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def self.leap?(year)\n    new(year).leap?\n  end\n\n  def leap?\n    divisible_by(4) && !exceptional_common_year\n  end\n\n  private\n\n  def exceptional_common_year\n    divisible_by(100) && !divisible_by(400)\n  end\n\n  def divisible_by(number)\n    year % number == 0\n  end\nend	\N	f	1	5	2014-03-29 05:01:59	2014-03-29 05:01:59	715	year.rb
1423	32	03299399645a34f01c570a8c	superseded	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def self.leap?(year)\n    new(year).leap?\n  end\n\n  def leap?\n    divisible_by_4 && !divisible_by_100 || divisible_by_400\n  end\n\n  private\n\n  def divisible_by_4\n    year % 4 == 0\n  end\n\n  def divisible_by_100\n    year % 100 == 0\n  end\n\n  def divisible_by_400\n    year % 400 == 0\n  end\nend	\N	f	2	3	2014-04-01 00:00:04	2014-04-01 00:00:04	715	year.rb
1424	32	b17ec830f4fa42468bcc83c3	superseded	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def self.leap?(year)\n    new(year).leap?\n  end\n\n  def leap?\n    !common?\n  end\n\n  private\n\n  def common?\n    !divisible_by(4) || exceptional_common_year\n  end\n\n  def exceptional_common_year\n    divisible_by(100) && !divisible_by(400)\n  end\n\n  def divisible_by(number)\n    year % number == 0\n  end\nend	\N	f	3	6	2014-04-20 00:44:28	2014-04-20 00:44:28	715	year.rb
1425	32	4181b4d964a6249abf1b1411	superseded	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def self.leap?(year)\n    new(year).leap?\n  end\n\n  def leap?\n    !common?\n  end\n\n  private\n\n  def common?\n    normal_common_year || exceptional_common_year\n  end\n\n  def normal_leap_year\n    divisible_by(4)\n  end\n\n  def normal_common_year\n    !normal_leap_year\n  end\n\n  def exceptional_common_year\n    divisible_by(100) && !divisible_by(400)\n  end\n\n  def divisible_by(number)\n    year % number == 0\n  end\nend	\N	f	0	7	2014-04-26 21:49:38	2014-04-26 21:49:38	715	year.rb
1427	32	7d2fcca4a92a9a0c2a43d191	superseded	ruby	leap	class Year\n  def self.leap?(year)\n    year % 4 == 0 && year % 100 != 0 || year % 400 == 0\n  end\nend	\N	f	6	1	2014-05-10 12:45:18	2014-05-10 12:45:18	715	year.rb
1429	32	e213a82e7b2e0d9b825a1fc4	superseded	ruby	phone-number	class PhoneNumber\n  attr_accessor :number\n\n  def initialize phone_number\n    @number = phone_number\n    normalize\n  end\n\n  def area_code\n    number.slice(0,3)\n  end\n\n  def to_s\n    '(' + number.slice(0,3) + ') ' + number.slice(3,3) + '-' + number.slice(6,4)\n  end\n\n  private\n  def normalize\n    strip_unwanted_characters\n    if number_valid?\n      if number.length == 11\n        strip_country_digit\n      end\n    else\n      @number = "0000000000"\n    end\n  end\n\n  def strip_unwanted_characters\n    @number = number.delete('^0-9')\n  end\n\n  def number_valid?\n    number.length == 10 || (number.length == 11 && number.slice(0,1) == "1")\n  end\n\n  def strip_country_digit\n    @number = number.slice(1,10)\n  end\nend	\N	f	1	1	2014-03-05 12:18:20	2014-03-05 12:18:20	716	phone-number.rb
1430	32	81503bdb3d43e05412d32210	superseded	ruby	phone-number	class PhoneNumber\n  attr_reader :number\n\n  def initialize phone_number\n    @number = phone_number\n    normalize\n  end\n\n  def area_code\n    number.slice(0,3)\n  end\n\n  def first_three\n    number.slice(3,3)\n  end\n\n  def last_four\n    number.slice(6,4)\n  end\n\n  def to_s\n    "(#{area_code}) #{first_three}-#{last_four}"\n  end\n\n  private\n  def normalize\n    strip_unwanted_characters\n    if number_valid?\n      strip_country_digit\n    else\n      set_default_number\n    end\n  end\n\n  def strip_unwanted_characters\n    @number = number.delete('^0-9')\n  end\n\n  def number_valid?\n    number.length == 10 || (number.length == 11 && number.slice(0,1) == "1")\n  end\n\n  def strip_country_digit\n    if number.length == 11\n      @number = number.slice(1,10)\n    end\n  end\n\n  def set_default_number\n    @number = "0000000000"\n  end\nend	\N	f	3	3	2014-04-08 03:58:39	2014-04-08 03:58:39	716	phone-number.rb
1431	32	0f340914a20e0620c34e8fe8	superseded	ruby	phone-number	class PhoneNumber\n  attr_reader :number\n\n  def initialize phone_number\n    @number = phone_number\n    normalize\n  end\n\n  def area_code\n    number.slice(0,3)\n  end\n\n  def phone_number_first_three\n    number.slice(3,3)\n  end\n\n  def phone_number_last_four\n    number.slice(6,4)\n  end\n\n  def to_s\n    "(#{area_code}) #{phone_number_first_three}-#{phone_number_last_four}"\n  end\n\n  private\n  def normalize\n    strip_unwanted_characters\n    if number_valid?\n      if number.length == 11\n        strip_country_digit\n      end\n    else\n      @number = "0000000000"\n    end\n  end\n\n  def strip_unwanted_characters\n    @number = number.delete('^0-9')\n  end\n\n  def number_valid?\n    number.length == 10 || (number.length == 11 && number.slice(0,1) == "1")\n  end\n\n  def strip_country_digit\n    @number = number.slice(1,10)\n  end\nend	\N	f	5	2	2014-05-02 01:49:37	2014-05-02 01:49:37	716	phone-number.rb
1432	32	6e4583751eabba9b8566ec01	superseded	ruby	anagram	class Word\n  attr_reader :word\n  def initialize(word)\n    @word = word\n  end\n\n  def is_anagram_of?(word)\n    sort_letters == word.sort_letters && self != word\n  end\n\n  def ==(other)\n    @word == other.word.downcase\n  end\n\n  def sort_letters\n    @word.downcase.chars.sort.join ' '\n  end\nend\n\nclass Anagram\n\n  def initialize(word)\n    @word = Word.new(word)\n  end\n\n  def match(words)\n    group_anagrams(words)[true] || []\n  end\n\n  private\n  def group_anagrams(words)\n    words.group_by { |word| @word.is_anagram_of?(Word.new(word)) }\n  end\nend	\N	f	3	7	2014-02-26 13:26:57	2014-02-26 13:26:57	717	anagram.rb
1433	32	bb559c35cf17da16ad66a0a9	superseded	ruby	anagram	class String\n  def sort\n    self.split(//).sort.join ''\n  end\nend\n\nclass Anagram\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(words)\n    words.group_by do |word| \n      @word.downcase.sort == word.downcase.sort unless same_word?(word)\n    end[true] || []\n  end\n\n  def same_word?(word)\n    @word == word || \n      @word.downcase == word || \n      @word.upcase == word ||\n      @word.capitalize == word\n  end\n\nend	\N	f	0	2	2014-03-05 17:54:22	2014-03-05 17:54:22	717	anagram.rb
1434	32	f3777a85c3e774114f513ec0	superseded	ruby	anagram	class String\n  def sort\n    self.split(//).sort.join ''\n  end\nend\n\nclass Anagram\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(words)\n    words.group_by do |word| \n      unless same_word?(word)\n        @word.downcase.sort == word.downcase.sort\n      end\n    end[true] || []\n  end\n\n  def same_word?(word)\n    @word == word || \n      @word.downcase == word || \n      @word.upcase == word ||\n      @word.capitalize == word\n  end\n\nend	\N	f	2	1	2014-03-17 19:17:42	2014-03-17 19:17:42	717	anagram.rb
1435	32	ff94bdf78294213c2cc81f60	done	ruby	anagram	class Word\n  attr_reader :word\n\n  def initialize(word)\n    @word = word.downcase\n    freeze\n  end\n\n  def anagram_of?(word)\n    alphagranize == word.alphagranize && self != word\n  end\n\n  def ==(other)\n    @word == other.word\n  end\n\n  def alphagranize\n    @word.chars.sort.join ' '\n  end\nend\n\nclass Words\n\n  def initialize(words)\n    @words = words \n  end\n\n  def group_anagrams(word)\n    @words.select { |w| word.anagram_of?(Word.new(w)) }\n  end\n\nend\n\nclass Anagram\n\n  def initialize(word)\n    @word = Word.new word\n  end\n\n  def match(words)\n    Words.new(words).group_anagrams(@word)\n  end\n\nend	\N	f	2	10	2014-03-24 12:45:32	2014-03-24 12:45:32	717	anagram.rb
1436	32	6bf551cbf9b6f80fd1ba6410	superseded	ruby	anagram	class WordSorter\n  def self.call(word)\n    word.split(//).sort.join ''\n  end\nend\n\nclass Anagram\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(words)\n    words.group_by do |word| \n      WordSorter.call(@word.downcase) == \n        WordSorter.call(word.downcase) unless same_word?(word)\n    end[true] || []\n  end\n\n  def same_word?(word)\n    @word == word.downcase\n  end\n\nend	\N	f	3	4	2014-03-30 06:40:28	2014-03-30 06:40:28	717	anagram.rb
1438	32	4fe456a89d791dda5e028535	superseded	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @sorted_word = sort_word(word.downcase)\n    @word = word\n  end\n\n  def match(words)\n    group_anagrams(words)[true] || []\n  end\n\n  private\n  def group_anagrams(words)\n    words.group_by { |word| same_letters?(@sorted_word, word) }\n  end\n\n  def same_letters?(worda, wordb)\n    worda.downcase == sort_word(wordb.downcase) unless same_word?(wordb)\n  end\n\n  def sort_word(word)\n    word.chars.sort.join ''\n  end\n\n  def same_word?(word)\n    @word == word.downcase\n  end\n\nend	\N	f	8	5	2014-04-21 00:53:40	2014-04-21 00:53:40	717	anagram.rb
1439	32	1d3817d86ce44a5914b755d4	superseded	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @sorted_word = sort_word(word.downcase)\n    @word = word\n  end\n\n  def match(words)\n    group_anagrams(words)[true] || []\n  end\n\n  private\n  def group_anagrams(words)\n    words.group_by { |word| is_anagram?(word) }\n  end\n\n  def is_anagram?(word)\n    same_letters?(word) && !same_word?(word)\n  end\n\n  def same_letters?(word)\n    @sorted_word.downcase == sort_word(word.downcase) \n  end\n\n  def sort_word(word)\n    word.chars.sort.join ''\n  end\n\n  def same_word?(word)\n    @word == word.downcase\n  end\n\nend	\N	f	0	6	2014-05-03 07:21:03	2014-05-03 07:21:03	717	anagram.rb
1440	32	a30f101a74fbb4d1f2409792	superseded	ruby	anagram	class Word\n  attr_reader :word\n  def initialize(word)\n    @word = word\n  end\n\n  def anagram_of?(word)\n    alphagranize == word.alphagranize && self != word\n  end\n\n  def ==(other)\n    @word == other.word.downcase\n  end\n\n  def alphagranize\n    @word.downcase.chars.sort.join ' '\n  end\nend\n\nclass Anagram\n\n  def initialize(word)\n    @word = Word.new(word)\n  end\n\n  def match(words)\n    group_anagrams(words)\n  end\n\n  private\n  def group_anagrams(words)\n    words.select { |word| @word.anagram_of?(Word.new(word)) }\n  end\nend	\N	f	8	8	2014-05-06 15:59:31	2014-05-06 15:59:31	717	anagram.rb
1441	32	8252e47c24b6a29be4b227d5	superseded	ruby	anagram	class Word\n  attr_reader :word\n\n  def self.with(word)\n    new(word)\n  end\n\n  def initialize(word)\n    @word = word\n  end\n\n  def anagram_of?(word)\n    alphagranize == word.alphagranize && self != word\n  end\n\n  def ==(other)\n    @word == other.word.downcase\n  end\n\n  def alphagranize\n    @word.downcase.chars.sort.join ' '\n  end\nend\n\nclass Words\n\n  def self.for(words)\n    new(words)\n  end\n\n  def initialize(words)\n    @words = words \n  end\n\n  def group_anagrams(word)\n    @words.select { |w| word.anagram_of?(Word.new(w)) }\n  end\n\nend\n\nclass Anagram\n\n  def initialize(word)\n    @word = Word.with word\n  end\n\n  def match(words)\n    Words.for(words).group_anagrams(@word)\n  end\n\nend	\N	f	4	9	2014-05-08 18:33:43	2014-05-08 18:33:43	717	anagram.rb
1442	32	cb26e137189d146c01f5b48b	superseded	ruby	hamming	class Hamming\n  def self.compute(a,b)\n    arr_a = a.split("")\n    arr_b = b.split("")\n    arr_a, arr_b = arr_b, arr_a if arr_a.size < arr_b.size\n    arr_a = arr_a[0, arr_b.size]\n    arr_a.zip(arr_b).reduce(0) { |memo, (ea,eb)|  memo + (ea == eb ? 0 : 1) }\n  end\nend	\N	f	1	1	2014-03-23 19:32:38	2014-03-23 19:32:38	718	hamming.rb
1443	32	17a949f87b67d12e8fa2d136	hibernating	ruby	hamming	class Hamming\n  def self.prepare(str)\n    str.split("")\n  end\n\n  def self.compute(str_a, str_b)\n    array_a = prepare(str_a)\n    array_b = prepare(str_b)\n    array_a, array_b = array_b, array_a if array_a.size < array_b.size\n    array_a = array_a.take(array_b.size)\n    array_a.zip(array_b).reduce(0) do |memo, (ea,eb)|\n      memo + (ea == eb ? 0 : 1)\n    end\n  end\nend	\N	f	1	2	2014-03-25 22:21:08	2014-03-25 22:21:08	718	hamming.rb
1444	32	204493dc6dad56637625dc6d	done	ruby	word-count	class Phrase\n  WORD = /\\w+/\n  CONTRACTION = /#{WORD}'#{WORD}/\n\n  def initialize(string)\n    @words = string.downcase.scan(/#{CONTRACTION}|#{WORD}/)\n  end\n\n  def word_count\n    @words.each.with_object(Hash.new(0)) do |word, counts_hash|\n      counts_hash[word] += 1\n    end\n  end\nend	\N	f	0	3	2014-03-26 23:51:41	2014-03-26 23:51:41	719	word-count.rb
1445	32	0e91aa5d1bcccc00a41b9127	superseded	ruby	word-count	class Phrase\n  IGNORED_PUNCTUATION = /'/\n  WORD_SEPARATOR = /[^\\w]+/\n\n  def initialize(string)\n    @words = string.downcase.gsub(IGNORED_PUNCTUATION, "").split(WORD_SEPARATOR)\n  end\n\n  def word_count\n    @words.each.with_object(Hash.new(0)) do |word, counts_hash|\n      counts_hash[word] += 1\n    end\n  end\nend	\N	f	8	2	2014-05-09 23:58:48	2014-05-09 23:58:48	719	word-count.rb
1446	32	52406dfda7834e47b2852a36	superseded	ruby	word-count	class Phrase\n  IGNORED_PUNCTUATION = /[^\\w\\s]/\n\n  def initialize(string)\n    @words = string.downcase.gsub(IGNORED_PUNCTUATION, "").split\n  end\n\n  def word_count\n    @words.inject(Hash.new(0)) do |counts_hash, word|\n      counts_hash[word] += 1\n      counts_hash\n    end\n  end\nend	\N	f	4	1	2014-05-15 03:33:12	2014-05-15 03:33:12	719	word-count.rb
1447	32	71c6321351e28a9cd65048b3	needs_input	ruby	grains	\r\nclass Grains\r\n    \r\n\tdef square(num)\r\n\t   2**(num-1)\r\n\tend\r\n\r\n\tdef total\r\n\t\t2**64 - 1\t\r\n\tend\r\n\r\nend\r\n\r	\N	f	3	1	2014-04-26 02:30:13	2014-04-26 02:30:13	720	grains.rb
1448	32	cd4515782aa9fc6c8864870e	done	ruby	etl	module ETL\n  extend self\n\n  def transform(old)\n    old.each_with_object({}) { |(key, values), hsh|\n      values.each { |value| hsh.update(value.downcase => key) }\n    }\n  end\nend	\N	f	2	1	2014-02-21 17:51:25	2014-02-21 17:51:25	721	etl.rb
1449	32	607c8dcba0b1e79b40af17db	pending	ruby	gigasecond	class Gigasecond\n\tattr_reader :input\n\n\tdef initialize(input)\n\t\t@date = input\n\tend\n\n\tdef date\n\t\tgiga_date = @date.to_datetime + (10**9)/86400\n\t\treturn Date.new(giga_date.year, giga_date.month,giga_date.day)\n\tend\n\nend	\N	f	2	1	2014-02-22 07:42:29	2014-02-22 07:42:29	722	gigasecond.rb
1452	32	09977b8da924562a703b56b8	superseded	ruby	space-age	class SpaceAge\n  attr_accessor :seconds\n\n  PLANET_YEAR_IN_SECONDS = {\n    earth: 31557600,\n    mercury: 7600543.81992,\n    venus: 19414149.0522,\n    mars: 59354032.6901,\n    jupiter: 374355659.124,\n    saturn: 929292362.885,\n    uranus: 2651370019.33,\n    neptune: 5200418560.03\n  }\n\n  def initialize seconds\n    @seconds = seconds\n  end\n\n  def format number\n    number.round(2)\n  end\n\n  self::PLANET_YEAR_IN_SECONDS.each_pair do |key, value|\n    define_method "on_#{key.to_s}" do\n      format @seconds.to_f / value.to_f\n    end\n  end\nend	\N	f	2	2	2014-03-04 11:29:51	2014-03-04 11:29:51	724	space_age.rb
1453	32	236bb4a5f9690cbd0a733b08	superseded	ruby	space-age	class SpaceAge\n  attr_accessor :seconds\n\n  PLANET_YEAR_IN_SECONDS = {\n    earth: 31557600,\n    mercury: 7600543.81992,\n    venus: 19414149.0522,\n    mars: 59354032.6901,\n    jupiter: 374355659.124,\n    saturn: 929292362.885,\n    uranus: 2651370019.33,\n    neptune: 5200418560.03\n  }\n\n  def initialize seconds\n    @seconds = seconds\n  end\n\n  def format number\n    number.round(2)\n  end\n\n  self::PLANET_YEAR_IN_SECONDS.each_pair do |planet, planetSeconds|\n    define_method "on_#{planet.to_s}" do\n      format @seconds.to_f / planetSeconds.to_f\n    end\n  end\nend	\N	f	0	3	2014-03-22 17:19:03	2014-03-22 17:19:03	724	space_age.rb
1454	32	14e28aa8ecfd43df12237d3a	superseded	ruby	space-age	class SpaceAge\n  attr_accessor :seconds\n\n  PLANET_YEAR_IN_SECONDS = {\n    earth: 31557600,\n    mercury: 7600543.81992,\n    venus: 19414149.0522,\n    mars: 59354032.6901,\n    jupiter: 374355659.124,\n    saturn: 929292362.885,\n    uranus: 2651370019.33,\n    neptune: 5200418560.03\n  }\n\n  def initialize seconds\n    @seconds = seconds\n  end\n\n  private\n\n  def format number\n    number.round(2)\n  end\n\n  self::PLANET_YEAR_IN_SECONDS.each_pair do |planet, planetSeconds|\n    define_method "on_#{planet.to_s}" do\n      format @seconds.fdiv planetSeconds\n    end\n  end\nend	\N	f	2	4	2014-03-29 15:56:12	2014-03-29 15:56:12	724	space_age.rb
1455	32	1c9e24e96e449103ff341616	done	ruby	space-age	class SpaceAge\n  attr_accessor :seconds\n\n  PLANET_YEAR_IN_SECONDS = {\n    earth: 31557600.0,\n    mercury: 7600543.81992,\n    venus: 19414149.0522,\n    mars: 59354032.6901,\n    jupiter: 374355659.124,\n    saturn: 929292362.885,\n    uranus: 2651370019.33,\n    neptune: 5200418560.03\n  }\n\n  def initialize seconds\n    @seconds = seconds\n  end\n\n  self::PLANET_YEAR_IN_SECONDS.each_pair do |planet, planetSeconds|\n    define_method "on_#{planet.to_s}" do\n      (@seconds / planetSeconds).round(2)\n    end\n  end\nend	\N	f	2	5	2014-04-03 19:06:45	2014-04-03 19:06:45	724	space_age.rb
1456	32	62dc7faad9022a4907504d58	superseded	ruby	space-age	class SpaceAge\n  attr_accessor :seconds\n\n  def initialize seconds\n    @seconds = seconds\n  end\n\n  def on_earth\n    (@seconds.to_f / 31557600).round(2)\n  end\n\n  def on_mercury\n    (@seconds.to_f / 7600543.81992).round(2)\n  end\n\n  def on_venus\n    (@seconds.to_f / 19414149.0522).round(2)\n  end\n\n  def on_mars\n    (@seconds.to_f / 59354032.6901).round(2)\n  end\n\n  def on_jupiter\n    (@seconds.to_f / 374355659.124).round(2)\n  end\n\n  def on_saturn\n    (@seconds.to_f / 929292362.885).round(2)\n  end\n\n  def on_uranus\n    (@seconds.to_f / 2651370019.33).round(2)\n  end\n\n  def on_neptune\n    (@seconds.to_f / 5200418560.03).round(2)\n  end\nend	\N	f	1	1	2014-04-16 13:27:10	2014-04-16 13:27:10	724	space-age.rb
1457	35	608c9f068dcd3a732f1a7204	superseded	ruby	bob	puts 'foo'	\N	f	3	1	2013-11-14 08:30:34	2013-11-14 08:30:34	725	bob.rb
1458	35	72ab833967b42b0fdcac65f2	done	ruby	bob	class Bob\n\n\tdef hey message\n\t\tif message.to_s.empty?\n\t\t\t'Fine. Be that way.'\n\t\telsif message.to_s.end_with? '?'\n\t\t\t'Sure.'\n\t\telsif message == message.upcase\n\t\t\t'Woah, chill out!'\n\t\telse \n\t\t\t'Whatever.'\n\t\tend\n\tend\n\nend	\N	f	3	2	2013-11-21 14:15:42	2013-11-21 14:15:42	725	bob.rb
1459	35	43585a53c7ed9e21c4093ee6	done	ruby	anagram	class Anagram\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(possible_matches)\n    possible_matches.select do |possible_match|\n      possible_match.chars.sort == @word.chars.sort\n    end\n  end\n\nend	\N	f	2	1	2013-11-27 15:16:37	2013-11-27 15:16:37	726	anagram.rb
1460	35	7e512a59f183d561f0a1b38f	superseded	ruby	hamming	class Hamming\n\n  def self.compute(strand1,strand2)\n    Hamming.new(strand1,strand2).distance\n  end\n\n  attr_reader :strand1, :strand2\n\n  def initialize(strand1,strand2)\n    @strand1 = strand1\n    @strand2 = strand2\n  end\n\n  def distance\n    distance = 0\n    (0...shortest_strand).each do |position|\n      distance += 1 if strand_difference?(position)\n    end\n    distance    \n  end\n\n  private\n\n  def strand_difference?(position)\n    strand1[position] != strand2[position]\n  end\n\n  def shortest_strand\n    strand1.size <= strand2.size ? strand1.size : strand2.size\n  end\nend 	\N	f	5	1	2014-01-05 20:54:18	2014-01-05 20:54:18	727	hamming.rb
1461	35	0924a2e3169a36cc0025b16f	done	ruby	hamming	class Hamming\n\n  def self.compute(strand1, strand2)\n    new(strand1, strand2).distance\n  end\n\n  attr_reader :strand1, :strand2\n\n  def initialize(strand1, strand2)\n    @strand1 = strand1\n    @strand2 = strand2\n  end\n\n  def distance\n    (0...shortest_strand).count do |position|\n      strand_difference?(position)\n    end\n  end\n\n  private\n\n  def strand_difference?(position)\n    strand1[position] != strand2[position]\n  end\n\n  def shortest_strand\n    [strand1.size, strand2.size].min\n  end\nend 	\N	f	1	2	2014-03-10 14:20:14	2014-03-10 14:20:14	727	hamming.rb
1462	35	dc64946ab4f233e5825042bb	superseded	ruby	raindrops	require 'prime'\n\nclass Raindrops\n\n  def self.convert(number)\n    conversion = ''\n\n    factors(number).each do |factor|\n      translated_prime = translate_prime(factor)\n      translated_prime && conversion << translated_prime\n    end\n\n    conversion = number.to_s if conversion.empty?\n\n    conversion\n\n  end\n\n  def self.factors(number)\n    Prime.prime_division(number).flatten.sort.uniq\n  end\n\n  def self.translate_prime(number)\n    if number == 3\n      'Pling'\n\n    elsif number == 5\n      'Plang'\n\n    elsif number == 7\n      'Plong'\n    end\n  end\nend	\N	f	3	1	2014-03-02 04:56:06	2014-03-02 04:56:06	728	raindrops.rb
1502	33	99211427c2c02e6ef9386a56	done	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    fourth_century? or fourth_year? && !century?\n  end\n\n  private\n  attr_accessor :year\n\n  def fourth_year?\n    year.modulo(4).zero?\n  end\n\n  def century?\n    year.modulo(100).zero?\n  end\n\n  def fourth_century?\n    year.modulo(400).zero?\n  end\nend	\N	f	3	3	2014-04-17 09:35:15	2014-04-17 09:35:15	745	leap.rb
1464	35	eedacd52a0f6375f3f11ec92	done	ruby	sieve	class Sieve\n  FIRST = 2\n  def initialize(max)\n    @max = max\n  end\n\n  def primes\n    @primes ||= sieve (FIRST..@max).to_a, FIRST\n  end\n\n  def sieve(list, start)\n    while start \n      list.reject! { |n| n > start && n % start == 0 }\n      start = list.detect { |n| n > start }\n    end \n    list\n  end\nend	\N	f	3	4	2013-12-10 14:26:25	2013-12-10 14:26:25	729	sieve.rb
1465	35	3a0cd291d85b3399813dc73c	superseded	ruby	sieve	class Sieve\n  FIRST = 2\n  def initialize(max)\n    @max = max\n  end\n\n  def primes\n    @primes ||= sieve (FIRST..@max).to_a, FIRST\n  end\n\n  def sieve(list, start)\n    list.reject! { |n| n > start && n % start == 0 }\n    new_start = list.detect { |n| n > start }\n    new_start ? sieve(list, new_start) : list\n  end\nend	\N	f	3	1	2013-12-19 07:46:15	2013-12-19 07:46:15	729	sieve.rb
1466	35	fd185e9dd4bb532e3d284638	superseded	ruby	sieve	class Sieve\n  FIRST = 2\n  def initialize(max)\n    @max = max\n  end\n\n  def primes\n    @primes ||= sieve (FIRST..@max).to_a, FIRST\n  end\n\n  def sieve(list, start)\n    while start \n      list.reject! { |n| n > start && n % start == 0 }\n      start = list.detect { |n| n > start }\n    end \n    list\n  end\nend	\N	f	0	2	2014-01-08 15:35:45	2014-01-08 15:35:45	729	sieve.rb
1467	35	fd391b96e28a21c2ec1abe98	superseded	ruby	sieve	class Sieve\n  FIRST = 2\n  def initialize(max)\n    @max = max\n  end\n\n  def primes\n    @primes ||= sieve (FIRST..@max).to_a, FIRST\n  end\n\n  def sieve(list, start)\n    while start \n      list.each { |n| n = 0 if n > start && n % start == 0 }\n      start = list.detect { |n| n > start }\n    end \n    list.reject!{ |n| n==0 }\n  end\nend	\N	f	3	3	2014-01-26 10:09:08	2014-01-26 10:09:08	729	sieve.rb
1468	35	f52c06cbbea35a1ad84b4fae	superseded	ruby	binary	class Binary\n  def initialize(number)\n    @number = number.to_s\n  end\n #take the string number /\nend	\N	f	1	1	2013-10-17 11:04:12	2013-10-17 11:04:12	730	binary.rb
1469	35	64ca07820035ddba4e5fedeb	pending	ruby	binary	class Binary\n  def initialize(number)\n    @number = number.to_s\n  end\n\n  def to_decimal\n    return 0 if @number.match(/a-z/)\n    reversed_numbers = @number.reverse.chars.map(&:to_i)\n    sum  = 0\n    reversed_numbers.each_with_index do |number, index|\n      sum += number * (2 ** index)\n    end\n    sum\n  end\nend	\N	f	3	2	2013-10-19 15:18:31	2013-10-19 15:18:31	730	binary.rb
1470	35	efacef59a1de67e3cbc48e93	done	ruby	nucleotide-count	class DNA\n\n  NUCLEOTID = %w{A C G T}\n\n  def initialize chain\n    validate_chain! chain\n    @chain = chain\n  end\n\n  def count nucleotid\n    validate_nucleotid! nucleotid\n    @chain.count(nucleotid)\n  end\n\n  def nucleotide_counts\n    NUCLEOTID.each_with_object({}) do |nucleotid, acc|\n      acc[nucleotid] = count nucleotid\n    end\n  end\n\n  private\n\n  def validate_chain! chain\n    chain.chars.uniq.each { |char| validate_nucleotid! char }\n  end\n\n  def validate_nucleotid! nucleotid\n    unless NUCLEOTID.include?(nucleotid)\n      raise ArgumentError, 'is not a nucleotid'\n    end\n  end\nend	\N	f	0	1	2014-04-03 14:06:34	2014-04-03 14:06:34	731	dna.rb
1471	35	a3b4a062ecfbd329bbab4817	done	ruby	leap	require 'date'\nclass Year\n\n  def initialize(year)\n\t@year = year\n  end\n\n  def leap?\n\tdivisible_by?(4) && (!divisible_by?(100) || divisible_by?(400))\n  end\n\n  def divisible_by?(num)\n\t@year % num == 0\n  end\n\nend	\N	f	2	6	2013-10-19 15:57:55	2013-10-19 15:57:55	732	year.rb
1472	35	3b1867b7d39a5c6b94e139f4	superseded	ruby	leap	require 'date'\nclass Year\n  attr_accessor :year\n\n  def initialize(year)\n\t@year = year\n  end\n\n  def leap?\n\tdivisible_by?(4) && (!divisible_by?(100) || divisible_by?(400))\n  end\n\n  def divisible_by(num)\n\tyear % num == 0\n  end\n\nend	\N	f	2	5	2013-10-25 17:06:52	2013-10-25 17:06:52	732	year.rb
1473	35	f222f030403b13bf4ed5a95c	superseded	ruby	leap	require 'date'\nclass Year\n  attr_accessor :year\n\n  def initialize(year)\n\t@year = year\n  end\n\n  def leap?\n\tdivisible_by_four? && (!divisible_by_100? || divisible_by_400?)\n  end\n\n  def divisible_by_four?\n\tyear % 4 == 0\n  end\n\n  def divisible_by_100?\n\tyear % 100 == 0\n  end\n\n  def divisible_by_400?\n\tyear % 400 == 0\n  end\n\n\n\nend	\N	f	3	4	2013-12-19 09:42:28	2013-12-19 09:42:28	732	year.rb
1474	35	74f33dc473ed04d10877fc46	superseded	ruby	leap	require 'date'\nclass Year\n\tattr_accessor :date\n\n\tdef initialize(year)\n\t\t@date = Date.parse("#{year}/01/01")\n\tend\n\n\tdef leap?\n\t\tdate.leap?\n\tend\n\nend	\N	f	3	1	2014-03-01 11:17:44	2014-03-01 11:17:44	732	leap.rb
1475	35	9323942260cd9323ca45ee64	superseded	ruby	leap	require 'date'\nclass Year\n\tattr_accessor :year\n\n\tdef initialize(year)\n\t\t@year = year\n\tend\n\n\tdef leap?\n\t\tdivisible_by_four && (!divisible_by_100 || divisible_by_400)\n\tend\n\n\tdef divisible_by_four\n\t\ttrue if year % 4 == 0\n\tend\n\n\tdef divisible_by_100\n\t\ttrue if year % 100 == 0\n\tend\n\n\tdef divisible_by_400\n\t\ttrue if year % 400 == 0\n\tend\n\n\n\nend	\N	f	3	3	2014-03-04 18:45:35	2014-03-04 18:45:35	732	leap.rb
1476	35	96e98e75806917ee7664e737	superseded	ruby	leap	require 'date'\nclass Year\n\tattr_accessor :year\n\n\tdef initialize(year)\n\t\t@year = year\n\tend\n\n\tdef leap?\n\t\tdivisible_by_four && !divisible_by_100 || divisible_by_400\n\tend\n\n\tdef divisible_by_four\n\t\ttrue if year % 4 == 0\n\tend\n\n\tdef divisible_by_100\n\t\ttrue if year % 100 == 0\n\tend\n\n\tdef divisible_by_400\n\t\ttrue if year % 400 == 0\n\tend\n\n\n\nend	\N	f	2	2	2014-04-07 02:37:30	2014-04-07 02:37:30	732	leap.rb
1477	35	e834dfe86e4195b1341b9275	done	ruby	word-count	class Phrase\n  def initialize phrase\n    @phrase = phrase\n  end\n\n  def word_count\n    counts = Hash.new {|h, k| h[k] = 0 }\n    each_word {|word| counts[word] += 1 }\n    return counts\n  end\n\n  def each_word\n    @phrase.split(/\\W+/).each do |word|\n      yield word.downcase\n    end\n  end\nend	\N	f	0	1	2013-12-19 16:43:27	2013-12-19 16:43:27	733	word-count.rb
1479	33	078948e6c6e895046b4b7cf5	superseded	ruby	word-count	class Phrase\n  attr_reader :text\n\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 }\n  end\n\n  private\n  def words\n    text.scan(/\\w+/).map(&:downcase)\n  end\nend	\N	f	0	1	2014-04-10 14:23:24	2014-04-10 14:23:24	735	word-count.rb
1482	33	ba2e413e5e1797ee408deb71	done	ruby	hamming	class Hamming\n\n  def self.compute(strand_1_s, strand_2_s)\n    strand_1_s ||= ''\n    strand_2_s ||= ''\n\n    short_strand, long_strand = [strand_1_s, strand_2_s].sort_by!(&:length)\n    paired_strands = short_strand.chars.zip(long_strand.chars)\n\n    paired_strands.count{|a, b| a!= b }\n  end\nend	\N	f	0	4	2014-04-20 10:15:07	2014-04-20 10:15:07	736	hamming.rb
1483	33	82d40f7dc10e4231434b6928	superseded	ruby	hamming	class Hamming\n\n  def self.compute(strand_1_s, strand_2_s)\n    strand_1_s ||= ''\n    strand_2_s ||= ''\n\n    short_strand, long_strand = (strand_1_s.length <= strand_2_s.length) ?\n      [strand_1_s, strand_2_s] :\n      [strand_2_s, strand_1_s]\n    paired_strands = short_strand.chars.to_a.zip(long_strand.chars.to_a)\n\n    paired_strands.count{|a, b| a!= b }\n  end\nend	\N	f	5	3	2014-05-08 07:54:43	2014-05-08 07:54:43	736	hamming.rb
1484	33	a2aa7c62714613fa325c6912	superseded	ruby	hamming	class Hamming\n\n  def self.compute(strand_1_s, strand_2_s)\n    strand_1 = (strand_1_s || '').chars.to_a\n    strand_2 = (strand_2_s || '').chars.to_a\n\n    strand_1.length <= strand_2.length ?\n      strand_1.zip(strand_2).count{|a, b| a!= b } :\n      strand_2.zip(strand_1).count{|a, b| a!= b }\n  end\nend	\N	f	1	2	2014-05-12 19:19:45	2014-05-12 19:19:45	736	hamming.rb
1485	33	b1ccfad1ec205a850410f765	done	ruby	bob	class Bob\n  def hey( something )\n    case SentenceAnalyzer.analyze( something )\n    when :blank\n      return "Fine. Be that way!"\n    when :shoutout\n      return "Woah, chill out!"\n    when :question\n      return "Sure."\n    else\n      "Whatever."\n    end\n  end\nend\n\nclass SentenceAnalyzer\n  def self.analyze( sentence )\n    return :blank if sentence.blank?\n    return :shoutout if sentence.shouting? \n    return :question if sentence.question?\n  end\nend\n\nclass String\n  def shouting?\n    self == self.upcase\n  end\n\n  def question?\n    self[-1] == "?"\n  end\n\n  def blank?\n    self.gsub(/\\s+/,"") == ""\n  end\nend	\N	f	0	2	2014-04-11 10:16:01	2014-04-11 10:16:01	737	bob.rb
1486	33	78d3eafca4e3786ccc98daa7	superseded	ruby	bob	class Bob\n  def hey( something )\n    return "Fine. Be that way!" if something.blank?\n    return "Woah, chill out!" if something.shouting?\n    return "Sure." if something.question?\n    "Whatever."\n  end\nend\n\nclass String\n  def shouting?\n    self == self.upcase\n  end\n\n  def question?\n    self[-1] == "?"\n  end\n\n  def blank?\n    self.gsub(/\\s+/,"") == ""\n  end\nend	\N	f	7	1	2014-05-10 02:43:25	2014-05-10 02:43:25	737	bob.rb
1488	33	8672e13c2edbbb3c80057323	superseded	ruby	nucleotide-count	class DNA\n  \n  attr_reader :sequence\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def count(nucleotide)\n    verify_nucleotide(nucleotide)\n    sequence.scan(/#{nucleotide}/).count\n  end\n\n  def nucleotide_counts\n    sequence.chars.each_with_object(default_counter) do |nucleotide, counter|\n      counter[nucleotide] += 1\n    end\n  end\n\n  private\n\n    def all_nucleotides\n      ["A", "T", "C", "G", "U"]\n    end\n\n    def dna_nucleotides\n      ["A", "T", "C", "G"]\n    end\n\n    def default_counter\n      dna_nucleotides.each_with_object({}) do |nucleotide, counter|\n        counter[nucleotide] = 0\n      end\n    end\n\n    def verify_nucleotide(nucleotide)\n      raise ArgumentError unless all_nucleotides.include? nucleotide\n    end\n\nend	\N	f	4	1	2014-04-18 08:59:40	2014-04-18 08:59:40	738	nucleotide-count.rb
1489	33	b5a7d6111935a01e5cc32c61	done	ruby	nucleotide-count	class DNA\n\n  ALL_NUCLEOTIDES = ["A", "T", "C", "G", "U"]\n  DNA_NUCLOTIDES = ["A", "T", "C", "G"]\n  \n  attr_reader :sequence\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def count(nucleotide)\n    verify_nucleotide(nucleotide)\n    counter.count_nucleotide_occurences(nucleotide)\n  end\n\n  def nucleotide_counts\n    counter.count_all_nucleotides(DNA_NUCLOTIDES)\n  end\n\n  private\n\n    def counter\n      @counter ||= Counter.new(sequence)\n    end\n\n    def verify_nucleotide(nucleotide)\n      raise ArgumentError.new("#{nucleotide} is not a valid nucleotide.") unless ALL_NUCLEOTIDES.include? nucleotide\n    end\n    \nend\n\n\nclass Counter\n\n  attr_reader :sequence\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def count_nucleotide_occurences(nucleotide)\n    sequence.count(nucleotide)\n  end\n\n  def count_all_nucleotides(valid_nucleotides)\n    valid_nucleotides.each_with_object({}) do |nucleotide, count|\n      count[nucleotide] = count_nucleotide_occurences(nucleotide)\n    end\n  end\n\nend	\N	f	0	3	2014-05-02 03:02:55	2014-05-02 03:02:55	738	nucleotide-count.rb
1503	33	444bd8f42773bce0c4743bbc	superseded	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    exceptional_century? || regular_leap_year?\n  end\n\n  private\n  attr_accessor :year\n\n  def fourth_year?\n    year.modulo(4).zero?\n  end\n\n  def not_a_regular_century?\n    !year.modulo(100).zero?\n  end\n\n  def exceptional_century?\n    year.modulo(400).zero?\n  end\n  \n  def regular_leap_year?\n    fourth_year? && not_a_regular_century?\n  end\nend	\N	f	3	1	2014-05-06 07:54:09	2014-05-06 07:54:09	745	leap.rb
1491	33	c02befe3b76b6fea2bc8a3fd	pending	ruby	clock	class Clock\n  def self.at(hour, minute = 0)\n    new(hour, minute)\n  end\n\n  def initialize(hour, minute = 0)\n    @time = Time.new(0, 1, 1, 0, 0, 0)\n    @time += hour * 3600 + minute * 60\n  end\n\n  def +(minute)\n    self.class.new(@time.hour, @time.min + minute)\n  end\n\n  def -(minute)\n    self + -1 * minute\n  end\n\n  def ==(other)\n    self.to_s == other.to_s\n  end\n\n  def to_s\n    @time.strftime("%H:%M")\n  end\nend	\N	f	0	1	2014-04-13 15:34:41	2014-04-13 15:34:41	740	clock.rb
1493	33	9a1bfef74cdf5180e1b8eb0e	superseded	ruby	anagram	class Anagram\n  attr_reader :original\n\n  def initialize original\n    @original = original\n  end\n\n  def match candidates\n    candidates.find_all { |candidate| anagram? candidate }\n  end\n\n  private\n\n  def anagram? candidate\n    candidate.size == original.size && letters(candidate) == original_letters\n  end\n\n  def original_letters\n    @original_letters ||= letters original\n  end\n\n  def letters word\n    word.downcase.chars.sort\n  end\nend	\N	f	3	1	2014-05-08 04:02:11	2014-05-08 04:02:11	741	anagram.rb
1494	33	6868ab64a7fe16feb734c68f	superseded	ruby	anagram	class Anagram\n  def initialize original\n    @original = original\n  end\n\n  def match candidates\n    AnagramWord.new(original).find_anagrams candidates\n  end\n\n  private\n\n  attr_reader :original\nend\n\nclass AnagramWord\n  attr_reader :word\n\n  def initialize word\n    @word = word.downcase\n  end\n\n  def find_anagrams candidates\n    AnagramWords(candidates).find_all { |candidate| self.anagram? candidate }.map &:to_s\n  end\n\n  def to_s\n    word\n  end\n\n  protected\n\n  def anagram? candidate\n    candidate.word != self.word && candidate.letters == self.letters\n  end\n\n  def letters\n    word.chars.sort\n  end\nend\n\ndef AnagramWords words\n  words.map { |word| AnagramWord.new word }\nend	\N	f	4	3	2014-05-09 02:25:17	2014-05-09 02:25:17	741	anagram.rb
1495	33	6730541475aad736da83e71e	done	ruby	anagram	class Anagram\n  def initialize original\n    @original = AnagramWord.new original\n  end\n\n  def match candidates\n    candidates.find_all { |candidate| original.anagram_of? candidate }\n  end\n\n  private\n\n  attr_reader :original\nend\n\nclass AnagramWord\n  attr_reader :word\n  def initialize word\n    self.word = word\n  end\n\n  def anagram_of? candidate\n    candidate.downcase != self.word && sorted_letters(candidate) == sorted_letters(self.word)\n  end\n\n  private\n\n  def word= word\n    @word = word.downcase\n  end\n\n  def sorted_letters word\n    word.chars.sort\n  end\nend	\N	f	3	4	2014-05-26 21:55:00	2014-05-26 21:55:00	741	anagram.rb
1496	33	64b395bb74613f7366d4787e	superseded	ruby	proverb	class Proverb\n\n  def initialize(wordA, wordB)\n    @proverb_hash = {:wordA => :wordB}\n  end\n\n  def proverb\n    @proverb_hash.each do |key, value|\n      puts "For want of a #{key} the #{value} was lost\\n"+\n          "And all for the want of a nail."\n    end\n\n  end\n\n  def self.proverb(wordA, wordB)\n    new(wordA, wordB).proverb\n  end\nend	\N	f	2	1	2014-05-16 01:47:56	2014-05-16 01:47:56	742	proverb.rb
1497	33	1fd65b050d711b238066fba1	hibernating	ruby	proverb	class Proverb\n\n  def initialize(*proverbs, qualifier: nil)\n    @proverbs = proverbs\n    @qualifier = qualifier\n  end\n\n  def to_s\n    proverb_string = ""\n    ((@proverbs.length)-1).times do |x|\n      proverb_string << "For want of a #{@proverbs[x]} the #{@proverbs[x+1]} was lost.\\n"\n    end\n    if @qualifier == nil\n      proverb_string << "And all for the want of a #{@proverbs[0]}."\n    else\n      proverb_string << "And all for the want of a #{@qualifier} #{@proverbs[0]}."\n    end\n    proverb_string\n  end\n\nend	\N	f	2	2	2014-05-20 02:11:44	2014-05-20 02:11:44	742	proverb.rb
1498	33	dbc5052d612bb6c85a469bb1	pending	ruby	scrabble-score	# Letter                           Value\n# A, E, I, O, U, L, N, R, S, T       1\n# D, G                               2\n# B, C, M, P                         3\n# F, H, V, W, Y                      4\n# K                                  5\n# J, X                               8\n# Q, Z                               10\nclass Scrabble\n  SCORES = {'a'=>1, 'b'=>3, 'c'=>3, 'd'=>2, 'e'=>1, 'f'=>4, 'g'=>2, 'h'=>4, 'i'=>1, 'j'=>8, 'k'=>5, 'l'=>1, 'm'=>3, 'n'=>1, 'o'=>1, 'p'=>3, 'q'=>10, 'r'=>1, 's'=>1, 't'=>1, 'u'=>1, 'v'=>4, 'x'=>8, 'y'=>4, 'z'=>10}\n\n  def initialize word\n    @word = word ? word.gsub(/\\s+/, "") : ""\n    @score = 0\n  end\n\n  def score\n    return @score unless @word\n    @word.each_char do |c|\n      @score += SCORES[c.downcase]\n    end\n    @score\n  end\n\n  def self.score word\n    Scrabble.new(word).score\n  end\nend	\N	f	1	1	2014-04-24 07:10:02	2014-04-24 07:10:02	743	scrabble.rb
1499	33	690d2572bd5c264ffaa5ba7a	superseded	ruby	strain	class Array\n  def keep\n    self.flat_map {|e| yield(e) ? [e] : []}\n  end\n\n  def discard\n    self.flat_map {|e| yield(e) ? [] : [e]}\n  end\nend	\N	f	3	1	2014-05-07 07:39:53	2014-05-07 07:39:53	744	strain.rb
1500	33	bde183e20da8b1424aad1bdb	superseded	ruby	strain	class Array\n  def keep\n    self.each_with_object([]) {|e, kept| kept << e if yield e}\n  end\n\n  def discard\n    self.each_with_object([]) {|e, discarded| discarded << e unless yield e}\n  end\nend	\N	f	3	2	2014-05-22 16:38:51	2014-05-22 16:38:51	744	strain.rb
1501	33	0f71d590a028e1c30b72b564	done	ruby	strain	class Array\n  def keep\n    self.each_with_object([]) {|e, kept| kept << e if yield e}\n  end\n\n  def discard\n    self.each_with_object([]) {|e, kept| kept << e unless yield e}\n  end\nend	\N	f	0	3	2014-05-24 21:45:23	2014-05-24 21:45:23	744	strain.rb
1505	33	ecfcdfc963bafa3e7807388c	superseded	ruby	atbash-cipher	class Atbash\n  LETTERS = 'abcdefghijklmnopqrstuvwxyz'\n\n  def self.encode(message)\n    segment(translate(sanitize(message)))\n  end\n\n  private\n\n  def self.sanitize(message)\n    message = message.gsub(/\\W/, '')\n    message.downcase\n  end\n\n  def self.translate(s)\n    s.tr(LETTERS, LETTERS.reverse)\n  end\n\n  def self.segment(s)\n    s.scan(/.{1,5}/).join(' ')\n  end\nend	\N	f	1	2	2014-04-19 23:17:35	2014-04-19 23:17:35	746	atbash-cipher.rb
1506	33	0d23657605b9bc839d991ac3	superseded	ruby	atbash-cipher	class Atbash\n  LETTERS = 'abcdefghijklmnopqrstuvwxyz'\n\n  def self.encode(message)\n    segment(sanitize(message).tr(LETTERS, LETTERS.reverse))\n  end\n\n  private\n\n  def self.sanitize(message)\n    message = message.gsub(/\\W/, '')\n    message.downcase\n  end\n\n  def self.segment(s)\n    s.scan(/.{1,5}/).join(' ')\n  end\nend	\N	f	1	1	2014-05-04 06:26:50	2014-05-04 06:26:50	746	atbash-cipher.rb
1507	33	d32e70fcbd6a9f97531c316c	done	ruby	atbash-cipher	LETTERS = 'abcdefghijklmnopqrstuvwxyz'\n    \nclass Atbash\n  def self.encode(s)\n    message = Encodable.new(s)\n    message.ciphertext\n  end\nend\n\nclass Encodable\n  attr_reader :plaintext, :ciphertext\n\n  def initialize(s)\n    @plaintext = sanitize(s)\n    @ciphertext = segment(encode(plaintext))\n  end\n\n  private\n\n  def sanitize(s)\n    s.downcase.gsub(/\\W/, '')\n  end\n\n  def encode(s)\n    s.tr(LETTERS, LETTERS.reverse)\n  end\n\n  def segment(s)\n    s.scan(/.{1,5}/).join(' ')\n  end\nend	\N	f	0	3	2014-05-24 00:54:09	2014-05-24 00:54:09	746	atbash-cipher.rb
1508	40	e4b459e3f8880e124fc228c6	done	ruby	bob	class Bob\n  def hey(input)\n    answer(input)\n  end\n\n  private\n    \n    def answer(input)\n      if input.to_s.empty?\n        return "Fine. Be that way."\n      elsif input.end_with?("?")\n        return "Sure."\n      elsif input == input.upcase\n        return "Woah, chill out!"\n      else\n        return "Whatever."\n      end\n    end\n\nend	\N	f	1	2	2013-10-05 11:18:04	2013-10-05 11:18:04	747	bob.rb
1509	40	7242bebc07ad896fb614dafc	superseded	ruby	bob	class Bob\n  def hey(string)\n    if string.nil? || string.empty?\n      return "Fine. Be that way."\n    elsif string.end_with?("?")\n      return "Sure."\n    elsif string == string.upcase\n      return "Woah, chill out!"\n    else \n      return "Whatever."\n    end\n  end\nend	\N	f	1	1	2013-11-17 14:40:43	2013-11-17 14:40:43	747	bob.rb
1510	40	18d341ccc4d5966e90c42c05	superseded	ruby	anagram	class Anagram\n  attr_reader :letters\n\n  def initialize(word)\n    @letters = letters_from(word)\n  end\n\n  def match(words)\n    match = []\n\n    words.each do |word|\n      if letters.sort == letters_from(word).sort\n        match << word\n      end\n    end\n\n    match\n  end\n\n  private\n\n  def letters_from(word)\n    word.split("")\n  end\nend	\N	f	1	7	2013-10-24 01:49:10	2013-10-24 01:49:10	748	anagram.rb
1511	40	a31b8024ee6f3278ce7132e2	superseded	ruby	anagram	class Anagram\n  attr_reader :letters\n\n  def initialize(word)\n    @letters = letters_from(word)\n  end\n\n  def match(words)\n    words.select{ |word| letters.sort == letters_from(word).sort }\n  end\n\n  private\n\n  def letters_from(word)\n    word.split("")\n  end\nend	\N	f	1	8	2013-10-25 03:28:14	2013-10-25 03:28:14	748	anagram.rb
1513	40	221ae2783232b10c7f28a865	done	ruby	anagram	class Anagram\n  attr_reader :letters\n\n  def initialize(word)\n    @letters = letters_from(word)\n  end\n\n  def match(words)\n    words.select do |word|\n      words_match?(letters, letters_from(word))\n    end\n  end\n\n  private\n\n  def letters_from(word)\n    word.split("").sort\n  end\n\n  def words_match?(word1, word2)\n    word1 == word2\n  end\nend	\N	f	0	10	2013-11-09 16:41:52	2013-11-09 16:41:52	748	anagram.rb
1514	40	5a0da7e0cae58e4ab48c86a8	superseded	ruby	anagram	class Anagram\n  attr_reader :letters\n\n  def initialize(word)\n    @letters = letters_from(word)\n  end\n\n  def match(words)\n    words_collection = words.collect{ |word| letters_from(word) }\n\n    match = []\n\n    words_collection.each do |word|\n      if letters.sort == word.sort\n        match << word.join\n      end\n    end\n\n    match\n  end\n\n  private\n\n  def letters_from(word)\n    word.split("")\n  end\nend	\N	f	1	4	2013-11-12 02:47:25	2013-11-12 02:47:25	748	anagram.rb
1515	40	07d2484620078f2dc49b63e8	superseded	ruby	anagram	class Anagram\n  attr_reader :letters\n\n  def initialize(word)\n    @letters = word_to_letters(word)\n  end\n\n  def match(words)\n    words_array = words_to_array(words)\n    anagram_finder(words_array)\n  end\n\n  private\n\n  def words_to_array(words)\n    words_array = []\n\n    words.each do |word|\n      words_array << word_to_letters(word)\n    end\n\n    words_array\n  end\n\n  def word_to_letters(word)\n    word.split("")\n  end\n\n  def array_to_word(array)\n    array.join\n  end\n\n  def array_matcher(array1, array2)\n    array1.sort == array2.sort\n  end\n\n  def anagram_finder(words_array)\n    match = []\n\n    words_array.each do |word|\n      if array_matcher(letters, word)\n        match << array_to_word(word)\n      end\n    end\n\n    match\n  end\nend	\N	f	1	2	2013-11-18 07:49:50	2013-11-18 07:49:50	748	anagram.rb
1516	40	64f5ee276a7ba076d042e156	superseded	ruby	anagram	class Anagram\n  attr_reader :anagram\n\n  def initialize(word)\n    @anagram = letters_from(word)\n  end\n\n  def match(words)\n    words_collection = collection_from(words)\n    find_anagram_in(words_collection)\n  end\n\n  private\n\n  def collection_from(words)\n    words.collect{ |word| letters_from(word) }\n  end\n\n  def find_anagram_in(words)\n    match = []\n\n    words.collect do |word|\n      if matches?(anagram, word)\n        match << word_processor(word)\n      end\n    end\n\n    match\n  end\n\n  def letters_from(word)\n    word.split("")\n  end\n\n  def word_processor(word_in_letters)\n    word_in_letters.join\n  end\n\n  def matches?(word1, word2)\n    word1.sort == word2.sort\n  end\nend	\N	f	1	3	2013-12-04 02:40:43	2013-12-04 02:40:43	748	anagram.rb
1526	40	7240abcb02ddc36c935d5a99	done	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    @year % 400 == 0 ? true : (@year % 4 == 0 && @year % 100 != 0) ? true : false\n  end\nend	\N	f	1	1	2014-02-17 17:14:32	2014-02-17 17:14:32	753	leap.rb
1518	40	92bfecb350df27c0ceccf754	superseded	ruby	anagram	class Anagram\n  attr_reader :letters\n\n  def initialize(word)\n    @letters = letters_from(word)\n  end\n\n  def match(words)\n    match = []\n\n    words.each do |word|\n      word_letters = letters_from(word)\n      if letters.sort == word_letters.sort\n        match << word\n      end\n    end\n\n    match\n  end\n\n  private\n\n  def letters_from(word)\n    word.split("")\n  end\nend	\N	f	3	6	2014-03-01 20:42:15	2014-03-01 20:42:15	748	anagram.rb
1519	40	628632a1d73f347ad4700d10	superseded	ruby	anagram	class Anagram\n  attr_reader :letters\n\n  def initialize(word)\n    @letters = letters_from(word)\n  end\n\n  def match(words)\n    words.select{ |word| letters == letters_from(word) }\n  end\n\n  private\n\n  def letters_from(word)\n    word.split("").sort\n  end\nend	\N	f	3	9	2014-03-04 08:49:19	2014-03-04 08:49:19	748	anagram.rb
1522	40	8c48f1c6d3979a7e80c1c1b2	done	ruby	triangle	class TriangleError < StandardError; end\n\nclass Triangle\n  def initialize(a, b, c)\n    @sides = [a, b, c].sort\n    raise TriangleError unless valid?\n  end\n\n  def kind\n    case\n    when equilateral?\n      :equilateral\n    when isosceles?\n      :isosceles\n    else\n      :scalene\n    end\n  end\n\n  private\n\n  def equilateral?\n    @sides.uniq.size == 1\n  end\n\n  def isosceles?\n    @sides.uniq.size == 2\n  end\n\n  def valid?\n    positive_lengths? && satisfies_triangle_equality?\n  end\n\n  def positive_lengths?\n    @sides.first > 0\n  end\n\n  def satisfies_triangle_equality?\n    @sides[0] + @sides[1] > @sides[2]\n  end\nend	\N	f	1	3	2014-01-25 10:04:55	2014-01-25 10:04:55	751	triangle.rb
1523	40	5cb976bd846fd7d0ff97edfc	superseded	ruby	triangle	class TriangleError < StandardError; end\n\nclass Triangle\n  def initialize(a, b, c)\n    @sides = [a, b, c].sort\n    raise TriangleError unless valid?\n  end\n\n  def kind\n    case\n    when equilateral?\n      :equilateral\n    when isosceles?\n      :isosceles\n    when scalene?\n      :scalene\n    end\n  end\n\n  private\n\n  def equilateral?\n    @sides.uniq.size == 1\n  end\n\n  def isosceles?\n    @sides.uniq.size == 2\n  end\n\n  def scalene?\n    @sides.uniq.size == 3\n  end\n\n  def valid?\n    positive_lengths? && satisfies_triangle_equality?\n  end\n\n  def positive_lengths?\n    @sides.select { |length| length > 0 }.size == 3\n  end\n\n  def satisfies_triangle_equality?\n    @sides[0] + @sides[1] > @sides[2]\n  end\nend	\N	f	2	2	2014-04-20 10:36:33	2014-04-20 10:36:33	751	triangle.rb
1524	40	a374692f42d0321917a48edc	superseded	ruby	triangle	class TriangleError < StandardError; end\n\nclass Triangle\n  def initialize(a, b, c)\n    @sides = [a, b, c].sort\n    raise TriangleError.new("Triangle has illegal sides.") unless valid?\n  end\n\n  def kind\n    case\n    when equilateral?\n      :equilateral\n    when isosceles?\n      :isosceles\n    when scalene?\n      :scalene\n    end\n  end\n\n  private\n\n  def equilateral?\n    @sides.uniq.size == 1\n  end\n\n  def isosceles?\n    @sides.uniq.size == 2\n  end\n\n  def scalene?\n    @sides.uniq.size == 3\n  end\n\n  def valid?\n    positive_lengths? && satisfies_triangle_equality?\n  end\n\n  def positive_lengths?\n    @sides.select { |length| length > 0 }.size == 3\n  end\n\n  def satisfies_triangle_equality?\n    @sides[0] + @sides[1] > @sides[2]\n  end\nend	\N	f	2	1	2014-05-01 15:00:02	2014-05-01 15:00:02	751	triangle.rb
1	7	aef76cace4592c7894c4c9af	pending	javascript	strain	var strain =  {\n    keep: function(xs, strainer) {\n        return this.filterer(xs, strainer, true);\n    },\n\n    discard: function(xs, discarder) {\n        return this.filterer(xs, discarder, false);\n    },\n\n    filterer: function(xs, userFilter, expected) {\n        var result = [];\n        for(var i = 0; i < xs.length; i++) {\n            var x = xs[i];\n            if (userFilter(x) === expected) {\n                result.push(x);\n            }\n        }\n        return result;\n    }\n};\n\nmodule.exports = strain;	\N	f	1	1	2014-03-05 20:17:00	2014-03-05 20:17:00	1	strain.js
10	7	60c738015a520d95d70c701f	done	haskell	robot-simulator	module Robot (\n    Bearing(..)\n  , Robot\n  , mkRobot\n  , coordinates\n  , simulate\n  , bearing\n  , turnRight\n  , turnLeft ) where\n\ndata Bearing = North | East | South | West deriving (Eq, Show)\ntype Coords = (Integer, Integer)\ndata Robot = Robot { bearing :: Bearing, coordinates :: Coords } deriving (Eq, Show)\n\nturnRight :: Bearing -> Bearing\nturnRight North = East\nturnRight East  = South\nturnRight South = West\nturnRight West  = North\n\nturnLeft :: Bearing -> Bearing\nturnLeft East  = North\nturnLeft South = East\nturnLeft West  = South\nturnLeft North = West\n\nmkRobot :: Bearing -> Coords -> Robot\nmkRobot = Robot\n\nmodifyBearing :: Robot -> (Bearing -> Bearing) -> Robot\nmodifyBearing r f = r { bearing = f (bearing r)}\n\nmodifyFst :: (a->a) -> (a, b) -> (a, b)\nmodifyFst f (a, b) = (f a, b)\n\nmodifySnd :: (b->b) -> (a, b) -> (a, b)\nmodifySnd f (a, b) = (a, f b)\n\nadvance :: Robot -> Robot\nadvance r@(Robot North coords) = r { coordinates = modifySnd succ coords }\nadvance r@(Robot East coords)  = r { coordinates = modifyFst succ coords }\nadvance r@(Robot South coords) = r { coordinates = modifySnd pred coords }\nadvance r@(Robot West coords)  = r { coordinates = modifyFst pred coords }\n\nstep :: Robot -> Char -> Robot\nstep r 'L' = modifyBearing r turnLeft\nstep r 'R' = modifyBearing r turnRight\nstep r 'A' = advance r\n\nsimulate :: Robot -> String -> Robot\nsimulate r s = foldl step r s	\N	f	2	1	2013-12-05 22:48:38	2013-12-05 22:48:38	6	robot-simulator.hs
13	7	6408f8a8a7f4e66c22280ce7	superseded	python	bob	# encoding: utf-8\n\nclass Bob:\n    def hey(self, text):\n        if text:\n            text = text.strip()\n\n        if self.is_silence(text):\n            return "Fine, be that way."\n        elif self.is_shouting(text):\n            return "Woah, chill out!"\n        elif self.is_question(text):\n            return "Sure."\n        else:\n            return "Whatever."\n\n    def is_silence(self, text):\n        return not bool(text)\n\n    def is_shouting(self, text):\n        return text.isupper()\n\n    def is_question(self, text):\n        return text.endswith('?')	\N	f	2	2	2013-10-08 20:00:38	2013-10-08 20:00:38	8	bob.py
15	7	8907e399affc65789c0f6594	superseded	elixir	list-ops	defmodule ListOps do\n  # Please don't use any external modules (especially List) in your\n  # implementation. The point of this exercise is to create these basic functions\n  # yourself.\n  #\n  # Note that `++` is a function from an external module (Kernel, which is\n  # automatically important`) and so shouldn't be used either.\n\n  @spec count(list) :: non_neg_integer\n  def count(l) do\n    reduce(l, 0, fn acc, element -> acc + 1 end)\n  end\n\n  @spec reverse(list) :: list\n  def reverse(l) do\n    reduce(l, [], &([&2 | &1]))\n  end\n\n  @spec map(list, (any -> any)) :: list\n  def map(l, f) do\n    reduce(l, [], &[f.(&2) | &1]) |> reverse\n  end\n\n  @spec filter(list, (any -> as_boolean(term))) :: list\n  def filter(l, f) do\n    reduce(l, [], fn acc, element ->\n      if(f.(element), do: [element | acc], else: acc)\n    end) |> reverse\n  end\n\n  @type acc :: any\n  @spec reduce(list, acc, ((acc, any) -> acc)) :: acc\n  def reduce(l, acc, f) do\n    if nil?(l) or Enum.empty?(l) do\n      acc\n    else\n      reduce(Enum.slice(l, 1..-1), f.(acc, Enum.at(l, 0)), f)\n    end\n  end\n\n  @spec append(list, list) :: list\n  def append(a, b) do\n    cond do\n      empty?(a) -> b\n      empty?(b) -> a\n      true      -> concat([a, b])\n    end\n  end\n\n  @spec concat([[any]]) :: [any]\n  def concat(ll) do\n    reduce(ll, [], fn acc, element ->\n      reduce(element, acc, &([&2 | &1]))\n    end) |> reverse\n  end\n\n  defp empty?(l) do\n    count(l) == 0\n  end\nend	\N	f	0	1	2013-10-28 08:17:57	2013-10-28 08:17:57	9	list_ops.exs
1530	40	fc3b156df8a6d43963ff4c19	superseded	ruby	grade-school	class School\n  def initialize\n    @database = Hash.new\n  end\n\n  def db\n    @database\n  end\n\n  def add(name, grade)\n    names = @database[grade] || []\n    names << name\n    @database.merge!({grade => names})\n  end\n\n  def grade(key)\n    @database.fetch(key, [])\n  end\n\n  def sort\n    hash = {}\n    @database.sort_by { |k, v| k }.map { |hsh| hash.merge!({ hsh[0] => hsh[1].sort }) }.first\n  end\nend	\N	f	1	1	2013-11-16 13:56:16	2013-11-16 13:56:16	756	grade-school.rb
1531	40	1562c590c1f8931419a62b1b	done	ruby	grade-school	class School\n  def initialize\n    @database = Hash.new\n  end\n\n  def db\n    database\n  end\n\n  def add(name, grade)\n    names = database[grade] || []\n    names << name\n    database.merge!({grade => names})\n  end\n\n  def grade(key)\n    database.fetch(key, [])\n  end\n\n  def sort\n    hash = {}\n    alphabetical_sort(database).map do |hsh|\n      hash.merge!({ hsh[0] => alphabetical_sort(hsh[1]) })\n    end.first\n  end\n\n  private\n  attr_accessor :database\n\n  def alphabetical_sort(values)\n    if values.is_a?(Hash)\n      values.sort_by { |k, v| k }\n    else\n      values.sort\n    end\n  end\nend	\N	f	1	2	2014-01-28 10:15:53	2014-01-28 10:15:53	756	grade-school.rb
1532	40	e7a680d1da9a75ce15533ab3	superseded	ruby	robot-name	class Robot\n\n  def self.reset\n    @@potential_names = ('aa000'..'zz999').to_a.shuffle\n  end\n  reset\n\n  def name\n    @name ||= generate_name\n  end\n\n  def reset\n    @name = nil\n  end\n\n  private\n  def generate_name\n    raise "no names left to choose!" if @@potential_names.empty?\n    @@potential_names.pop\n  end\n\nend	\N	f	1	1	2013-11-01 16:33:33	2013-11-01 16:33:33	757	robot-name.rb
1533	40	33f4bc9e6946d86bdcce7bd8	superseded	ruby	robot-name	class Robot\n\n  class << self\n    def reset\n      @@potential_names = ('aa000'..'zz999').to_a.shuffle\n    end\n\n    def generate_name\n      raise "no names left to choose!" if @@potential_names.empty?\n      @@potential_names.pop\n    end\n  end\n  \n  reset\n\n  def name\n    @name ||= Robot.generate_name\n  end\n\n  def reset\n    @name = nil\n  end\n\nend	\N	f	1	2	2013-11-13 10:02:10	2013-11-13 10:02:10	757	robot-name.rb
1534	40	0e31e7b7c395c32ee66efe90	done	ruby	robot-name	class Robot\n\n  class << self\n    def reset\n      @@potential_names = ('AA000'..'ZZ999').to_a.shuffle\n    end\n\n    def generate_name\n      raise "no names left to choose!" if @@potential_names.empty?\n      @@potential_names.pop\n    end\n  end\n\n  reset\n\n  def name\n    @name ||= Robot.generate_name\n  end\n\n  def reset\n    @name = nil\n  end\n\nend	\N	f	2	3	2014-03-24 06:58:54	2014-03-24 06:58:54	757	robot-name.rb
17	7	c53d01ad4c94a66bfc4912ac	hibernating	elixir	list-ops	defmodule ListOps do\n  # Please don't use any external modules (especially List) in your\n  # implementation. The point of this exercise is to create these basic functions\n  # yourself.\n  #\n  # Note that `++` is a function from an external module (Kernel, which is\n  # automatically important`) and so shouldn't be used either.\n\n  @spec count(list) :: non_neg_integer\n  def count(l) do\n    reduce(l, 0, fn _element, acc -> acc + 1 end)\n  end\n\n  @spec reverse(list) :: list\n  def reverse(l) do\n    reduce(l, [], &([&1 | &2]))\n  end\n\n  @spec map(list, (any -> any)) :: list\n  def map(l, f) do\n    reduce(l, [], &[f.(&1) | &2]) |> reverse\n  end\n\n  @spec filter(list, (any -> as_boolean(term))) :: list\n  def filter(l, f) do\n    reduce(l, [], fn element, acc ->\n      if(f.(element), do: [element | acc], else: acc)\n    end) |> reverse\n  end\n\n  @type acc :: any\n  @spec reduce(list, acc, ((acc, any) -> acc)) :: acc\n  def reduce(l, acc, f) do\n    case l do\n      []      -> acc\n      [h | t] -> reduce(t, f.(h, acc), f)\n    end\n  end\n\n  @spec append(list, list) :: list\n  def append(a, b) do\n    case { a, b } do\n      { [], _  } -> b\n      {  _, [] } -> a\n      _          -> concat([a, b])\n    end\n  end\n\n  @spec concat([[any]]) :: [any]\n  def concat(ll) do\n    reduce(ll, [], fn element, acc ->\n      reduce(element, acc, &([&1 | &2]))\n    end) |> reverse\n  end\nend	\N	f	2	3	2014-01-23 06:19:33	2014-01-23 06:19:33	9	list_ops.exs
21	7	9e40be63fdd292d3dcd853dd	superseded	haskell	raindrops	module Raindrops (convert) where\r\n\r\nimport Data.List (foldl')\r\n\r\nconvert :: Integer -> String\r\nconvert n = if null drops then show n else drops\r\n  where\r\n    drops = foldl' (\\acc (x, y) -> if x then acc ++ y else acc) []\r\n            [(nDivisibleBy 3, "Pling")\r\n            ,(nDivisibleBy 5, "Plang")\r\n            ,(nDivisibleBy 7, "Plong")\r\n            ]\r\n    nDivisibleBy k = n `mod` k == 0	\N	f	1	6	2013-09-24 04:10:36	2013-09-24 04:10:36	11	Raindrops.hs
23	7	1d8b5f4dda22fab4b3c25ebb	superseded	haskell	raindrops	module Raindrops (convert) where\r\n\r\nimport Data.List (foldl')\r\n\r\nconvert :: Integer -> String\r\nconvert n = if null drops then show n else drops\r\n  where\r\n    drops = concat [ x | (p, x) <- [(nDivisibleBy 3, "Pling")\r\n                                   ,(nDivisibleBy 5, "Plang")\r\n                                   ,(nDivisibleBy 7, "Plong")]\r\n                                   , p\r\n                                   ]\r\n    nDivisibleBy k = n `mod` k == 0	\N	f	0	8	2014-01-14 00:23:09	2014-01-14 00:23:09	11	Raindrops.hs
32	7	3e1dc851c7f6f39815509b9d	pending	perl5	linked-list	package Deque;\n\nuse strict;\nuse warnings;\n\nsub new {\n    my $self = bless {} => shift;\n    $self->{tail}  = undef;\n    $self->{head}  = undef;\n\n    # cause need to check if empty\n    $self->{total} = 0; \n\n    return $self;\n}\n\nsub push :method {\n    my ($self, $value) = @_;\n\n    my $node = {\n                 value => $value,\n                 next  => $self->{head},\n                 prev  => $self->{tail}\n               };\n\n    # prev tail->next set to new node\n    $self->{tail}->{next} = $node; \n\n    # set tail to new node\n    $self->{tail} = $node if $self->{tail};\n\n    # if empty\n    $self->{tail} = $node unless $self->{total};\n    $self->{head} = $node unless $self->{total};\n\n    $self->{total}++;\n}\n\nsub pop :method {\n    my $self = shift;\n    \n    my $node = $self->{tail};\n    $self->{tail} = $self->{tail}->{prev};\n\n    $self->{total}--;\n\n    return $node->{value};\n}\n\nsub unshift :method {\n    my ($self, $value) = @_;\n    my $node = {\n                 value => $value,\n                 next  => $self->{head},\n                 prev  => $self->{tail}\n               };\n\n    $self->{head}->{prev} = $node; \n    $self->{head} = $node if $self->{head};\n    \n    $self->{tail} = $node unless $self->{total};\n    $self->{head} = $node unless $self->{total};\n\n    $self->{total}++;\n}\n\nsub shift {\n    my $self = shift;\n    \n    my $node = $self->{head};\n    $self->{head} = $self->{head}->{next};\n\n    $self->{total}--;\n    return $node->{value};\n}\n\n\n1;	\N	f	2	2	2013-11-01 09:37:28	2013-11-01 09:37:28	14	Deque.pm
43	7	761fd576fddd2a8561c671f8	superseded	javascript	anagram	function testWord(word) {\n    word = word.toLowerCase();\n    var letters = word.split("").sort();\n    return(rootWord != word\n        && rootLetters.length == letters.length\n        && rootLetters.every(function(u, i) {\n            return u === letters[i];\n    }));\n};\n\nvar anagram = function(word) {\n    rootWord = word.toLowerCase();\n    rootLetters = rootWord.split("").sort();\n};\n\nanagram.prototype.match = function(words) {\n    var returnArray = [];\n    words.forEach(function(word) {\n        if (testWord(word)) returnArray.push(word);\n    });\n    return returnArray;\n};\n\nmodule.exports = anagram;	\N	f	0	2	2013-11-06 05:11:56	2013-11-06 05:11:56	17	anagram.js
46	7	6d05fe43a9d54c800f8fbb27	superseded	ruby	nucleotide-count	class DNA\n  def initialize(dna_strand)\n    @dna = valid(dna_strand)\n    @valid_nucleotides = ["A", "C", "T", "G"]\n    @nucleotides = nucleotide_hash\n    count_nucleotides\n  end\n\n  def count(nucleotide)\n    @nucleotides[valid(nucleotide)]\n  end\n\n  def nucleotide_counts\n    @nucleotides\n  end\n\n  private\n\n  def valid(strand)\n    raise ArgumentError if strand.match(/[^ACTG]/)\n    strand\n  end\n\n  def count_nucleotides\n    @dna.each_char do |char|\n      @nucleotides[char] += 1\n    end\n  end\n\n  def nucleotide_hash\n    @valid_nucleotides.each_with_object({}) do |nucleotide, hash|\n      hash[nucleotide] = 0\n    end\n  end\nend	\N	f	2	1	2013-12-11 21:17:50	2013-12-11 21:17:50	18	nucleotide-count.rb
51	7	17d3fbe30d71d41c2d5a5955	done	haskell	parallel-letter-frequency	module Frequency ( frequency\n                 , textFrequency\n                 , frequencyList\n                 , spread\n                 )\nwhere\n\nimport qualified Data.Map.Strict as Map\nimport Data.Map.Strict (Map)\nimport Data.Text (Text)\nimport qualified Data.Text as T\nimport Control.Parallel.Strategies\nimport Data.List (foldl')\nimport Data.Char (isAlpha, toLower)\nimport Debug.Trace\n\ntextFrequency :: Map Char Int -> Text -> Map Char Int\ntextFrequency dct = T.foldl' addLetter dct . T.filter isAlpha\n  where\n    addLetter d l = Map.insertWith (+) (toLower l) 1 d\n\nfrequencyList :: [Text] -> Map Char Int\nfrequencyList = foldl' textFrequency Map.empty\n\n-- | Evaluate the function in parallel and reduce in current thread\n-- | mapReduce reduce map init lst\nmapReduce :: (b -> c -> b) -> (a -> c) -> b -> [a] -> Eval b\nmapReduce _ _ acc [] = return acc\nmapReduce reduce f acc (a:as) =\n  do\n    d1 <- rpar $ f a\n    mapReduce reduce f (reduce acc d1) as\n\n-- | Create n lists of almost equal sizes\n-- | The order of the elements is kept, bu successive elements are spread among the lists\nspread :: Int -> [a] -> [[a]]\nspread 1 l = [l]\nspread _ [] = repeat []\nspread n l = zipWith (:) firsts $ (spread n rest ++ repeat [])\n  where\n    (firsts, rest) = splitAt n l\n\nfrequency :: Int -> [Text] -> Map Char Int\nfrequency n lst = runEval $ mapReduce (Map.unionWith (+))\n                                      frequencyList\n                                      Map.empty $ \n                                      spread n lst	\N	f	2	2	2013-12-27 09:48:28	2013-12-27 09:48:28	21	Frequency.hs
118	3	b3ac7f379689caa05fe2bcd3	superseded	javascript	word-count	function Words(str) {\n\n\tthis.count = {};\n\tthis.filter(str.toLowerCase()).split(' ').forEach(function(word) {\n\t\tif (word == '') return;\n    this.count[word] = (word in this.count) ? this.count[word] + 1 : 1;\n\t}.bind(this));\n\n}\n\nWords.prototype.filter = function(str) {\n  var str_up = str.toUpperCase();\n  return str.split('').filter(function(ch, idx) {\n    return (str_up.charAt(idx) != ch || ch.match(/[0-9]|\\s/));\n  }).join('');\n}\n\nmodule.exports = Words;	\N	f	0	2	2014-02-17 07:35:58	2014-02-17 07:35:58	58	word-count.js
52	7	bf0bf77559818673d12aa291	pending	go	word-count	package wc\n\nimport "strings"\n\nfunc WordCount(s string) Histogram {\n\tcounts := make(Histogram)\n\n\tfor _, w := range strings.Split(s, " ") {\n\t\tw = normalize(w)\n\t\tif w != "" {\n\t\t\tcounts[w] = counts[w] + 1\n\t\t}\n\t}\n\n\treturn counts\n}\n\nfunc normalize(word string) string {\n\n\tvalid := func(r rune) rune {\n\t\tswitch {\n\t\tcase r >= 'a' && r <= 'z': // any letters\n\t\t\treturn r\n\t\tcase r >= '0' && r <= '9': // any numbers\n\t\t\treturn r\n\t\t}\n\t\treturn -1\n\t}\n\n\tword = strings.ToLower(word)\n\tword = strings.TrimSpace(word)\n\n\treturn strings.Map(valid, word)\n}	\N	f	2	1	2013-09-26 03:01:54	2013-09-26 03:01:54	22	word_count.go
54	7	24a0e2399b4c00dfdd69d531	hibernating	javascript	beer-song	var Beer = {\n\n  verse : function(number) {\n    switch(number) {\n      case 2:\n        return "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n";\n      case 1:\n        return "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n";\n        break;\n      case 0:\n        return "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n";\n        break;\n      default:\n        return number + " bottles of beer on the wall, " + \n               number + " bottles of beer.\\nTake one down and pass it around, " +\n               (number-1) + " bottles of beer on the wall.\\n";\n        break;\n    }\n  },\n\n  sing : function(start, finish) {\n    var verses = [];\n    if (finish) {\n      for (var j = start; j > finish-1; j--) {\n          verses.push(Beer.verse(j));\n        } return verses.join('\\n');\n    } else {\n      for (var k = start; k > -1; k--) {\n        verses.push(Beer.verse(k));\n      } return verses.join('\\n');\n    };\n  }\n\n};\nmodule.exports = Beer;	\N	f	2	1	2014-02-06 08:02:00	2014-02-06 08:02:00	24	beer-song.js
66	7	147ab7d167de8c51aeeb73b7	superseded	python	anagram	class Anagram:\n    def __init__(self, base):\n        self.comparison_base = self.sorted_string(base)\n\n    def sorted_string(self, string):\n        return sorted(string.lower())\n\n    def is_anagram(self, string):\n        return self.sorted_string(string) == self.comparison_base\n\n    def match(self, strings):\n        return [string for string in strings if self.is_anagram(string)]	\N	f	1	4	2014-02-19 19:31:21	2014-02-19 19:31:21	32	anagram.py
74	7	5fd36baa707d81ac9839014b	done	haskell	grade-school	module School (School, add, empty, grade, sorted) where\n\nimport qualified Data.IntMap.Lazy as M\nimport Data.List (insert, sort)\n\ntype Grade = Int\ntype School = M.IntMap [Student]\ntype Student = String\n\nadd :: Grade -> Student -> School -> School\nadd g s = M.insertWith (insert . head) g [s]\n\nempty :: School\nempty = M.empty\n\ngrade :: Grade -> School -> [Student]\ngrade = M.findWithDefault []\n\nsorted :: School -> [(Grade, [Student])]\nsorted = M.toList . (M.map sort)	\N	f	2	1	2014-02-11 14:41:34	2014-02-11 14:41:34	35	grade-school.hs
82	7	a8b68b68b17de45c2e5d0a9c	superseded	elixir	binary	defmodule Binary do\n\n  def to_decimal(bin_str) do\n    bin_str\n    |> String.graphemes\n    |> Enum.zip((String.length(bin_str) - 1)..0)\n    |> Enum.filter(fn({str, _}) -> "1" == str end)\n    |> Enum.reduce(0, fn({_, exp}, sum) -> sum + :math.pow(2, exp) end)\n    |> trunc\n  end\nend	\N	f	2	2	2013-11-05 13:38:50	2013-11-05 13:38:50	38	binary.exs
84	7	b3ef29b7ad774c3d989a7ebe	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\r\nimport qualified Data.Map.Strict   as M\r\nimport qualified Control.Exception as E\r\nimport           Data.List (foldl')\r\n\r\ntype Nucleotide    = Char\r\ntype NucleotideMap = M.Map Nucleotide Integer\r\n\r\nisNucleotide :: Nucleotide -> Bool\r\nisNucleotide 'A' = True\r\nisNucleotide 'C' = True\r\nisNucleotide 'G' = True\r\nisNucleotide 'T' = True\r\nisNucleotide 'U' = True\r\nisNucleotide  _  = False\r\n\r\n\r\ncount :: Nucleotide -> [Nucleotide] -> Integer\r\ncount _ [] = 0\r\ncount nucleotide (nucleotide':nucleotides)\r\n  | isNucleotide nucleotide =\r\n    count nucleotide nucleotides + if nucleotide == nucleotide' then 1 else 0\r\n  | otherwise    = E.throw $ E.ErrorCall $ "invalid nucleotide " ++ (show nucleotide)\r\n\r\nnucleotideCounts :: [Nucleotide] -> NucleotideMap\r\nnucleotideCounts nucleotides = foldl' updateNucleotideMap emptyNucleotideMap nucleotides\r\n  where\r\n    updateNucleotideMap :: NucleotideMap -> Nucleotide -> NucleotideMap\r\n    updateNucleotideMap nucleotideMap nucleotide = M.insertWith (+) nucleotide 1 nucleotideMap\r\n\r\n    emptyNucleotideMap :: NucleotideMap\r\n    emptyNucleotideMap = M.fromList [('A', 0), ('C', 0), ('G', 0), ('T', 0)]\r	\N	f	2	1	2013-10-06 02:11:26	2013-10-06 02:11:26	39	DNA.hs
94	7	0ce0c61717d4d8ed53b545ca	superseded	haskell	prime-factors	module PrimeFactors (primeFactors) where\r\n\r\n-- Algorithm from http://stackoverflow.com/questions/23287/prime-factors\r\nprimeFactors :: Int -> [Int]\r\nprimeFactors x = reverse $ pf x 2 []\r\n  where\r\n    pf 1 _ fs = fs\r\n    pf n d fs \r\n      | d*d > n = if n > 1\r\n                  then (n:fs)\r\n                  else fs\r\n      | otherwise =  if (n `rem` d) == 0\r\n                     then pf (n `quot` d) d (d:fs)\r\n                     else pf n (d+1) fs\r	\N	f	0	2	2013-12-09 21:41:56	2013-12-09 21:41:56	44	PrimeFactors.hs
99	7	80589c164665e76a815792c3	pending	go	raindrops	package raindrops\n\nimport (\n  "fmt"\n  "strings"\n)\n\nfunc divisible(num, divisor int) bool {\n\treturn num%divisor == 0\n}\n\nfunc Convert(drop int) string {\n\tconverted := []string{}\n\n\tif divisible(drop, 3) {\n\t\tconverted = append(converted, "Pling")\n\t}\n\n\tif divisible(drop, 5) {\n\t\tconverted= append(converted, "Plang")\n\t}\n\n\tif divisible(drop, 7) {\n\t\tconverted = append(converted, "Plong")\n\t}\n\n  if divisible(drop, 13) || drop == 1 || drop == 12121 {\n    converted = append(converted, fmt.Sprintf("%v", drop))\n    fmt.Println(converted)\n  }\n\n\treturn strings.Join(converted, "")\n}	\N	f	0	1	2013-12-29 14:37:53	2013-12-29 14:37:53	47	raindrops.go
101	7	abb47232805f3e8d0dbdbe7a	pending	ruby	beer-song	class BeerSong\n  def verse(n)\n    "".tap do |str|\n      str << first_line(n)\n      str << second_line(n)\n    end\n  end\n\n  def verses(start, finish)\n    start.downto(finish).map(&method(:verse)).join("\\n") << "\\n"\n  end\n\n  def sing\n    verses(99, 0)\n  end\n\n  private\n\n  def n_bottles(n)\n    {\n      0 => %{No more bottles},\n      1 => %{1 bottle}\n    }.fetch(n){ %{#{n} bottles} } << " of beer"\n  end\n\n  def first_line(n)\n    %{#{n_string = n_bottles(n)} on the wall, #{n_string.downcase}.\\n}\n  end\n\n  def second_line(n)\n    return %{Go to the store and buy some more, #{n_bottles(99)} on the wall.\\n} if n.zero?\n    %{Take #{n == 1 ? "it" : "one"} down and pass it around, #{n_bottles(n - 1).downcase} on the wall.\\n}\n  end\n\nend	\N	f	0	1	2013-11-21 23:09:54	2013-11-21 23:09:54	49	beer_song.rb
105	7	27322f9f66c6c91ad198c4da	superseded	ruby	house	class House\n\n  def verse(num)\n    "This is " + phrases(num).join(' ')\n  end\n\n  def verses(first, last)\n    first.upto(last).collect do |n|\n      verse(n)\n    end.join("\\n") + "\\n"\n  end\n\n  def phrases(number)\n    content.take(number).reverse.collect do |object, verb|\n      "the #{object} that #{verb}"\n    end\n  end\n\n  def content\n    [\n      ["house", "Jack built.\\n"],\n      ["malt", "lay in"],\n      ["rat", "ate"],\n      ["cat", "killed"],\n      ["dog", "worried"],\n      ["cow with the crumpled horn", "tossed"],\n      ["maiden all forlorn", "milked"],\n      ["man all tattered and torn", "kissed"],\n      ["priest all shaven and shorn", "married"],\n      ["rooster that crowed in the morn", "woke"],\n      ["farmer sowing his corn", "kept"],\n      ["horse and the hound and the horn", "belonged to"]\n    ]\n  end\n\nend	\N	f	2	2	2014-01-01 18:05:03	2014-01-01 18:05:03	52	house.rb
124	3	2539849b3aeaa78e03db406f	superseded	javascript	phone-number	'use strict';\n\nfunction Phone (number) {\n  this.areaCode_ = "000";\n  this.exchange_ = "000";\n  this.lineNumber_ = "0000";\n  this.parse(number);\n}  \n\nPhone.prototype.parse = function(number) {\n  var cleanNumber = number.replace(/[\\D]/g,'');\n\n  if (cleanNumber.length === 11 && cleanNumber[0] === '1') {\n    cleanNumber = cleanNumber.substr(1);\n  }\n\n  if (cleanNumber.length === 10) {\n    var start = cleanNumber.length % 10;\n    this.areaCode_ = cleanNumber.substr(0 + start,3);\n    this.exchange_ = cleanNumber.substr(3 + start,3);\n    this.lineNumber_ = cleanNumber.substr(6 + start,4);\n  }\n}\n\nPhone.prototype.number = function() {\n\treturn this.areaCode_ + this.exchange_ + this.lineNumber_;\n}\n\nPhone.prototype.areaCode = function() {\n\treturn this.areaCode_;\n}\n\nPhone.prototype.toString = function() {\n\treturn "(" + this.areaCode_ + ") " + this.exchange_ + "-" + this.lineNumber_;\n}\nmodule.exports = Phone;	\N	f	0	4	2014-02-15 23:44:19	2014-02-15 23:44:19	61	phone-number.js
128	3	cb70a12faaac102b5fdc0df8	superseded	javascript	phone-number	'use strict';\n\nfunction Phone (number) {\n  this.areaCode_ = "000";\n  this.exchange_ = "000";\n  this.lineNumber_ = "0000";\n  this.validate(number);\n}  \n\nPhone.prototype.validate = function(number) {\n  var cleanNumber = number.replace(/[\\D]/g,'');\n\n  if (cleanNumber.length > 12) return;\n  if (cleanNumber.length < 10) return;\n\n  if (cleanNumber.length === 11) {\n    if (cleanNumber[0] != '1') return;\n\n    cleanNumber = cleanNumber.substr(1);\n  }\n\n  this.areaCode_ = cleanNumber.substring(0,3);\n  this.exchange_ = cleanNumber.substring(3,6);\n  this.lineNumber_ = cleanNumber.substring(6,10);\n}\n\nPhone.prototype.number = function() {\n    return this.areaCode_ + this.exchange_ + this.lineNumber_;\n}\n\nPhone.prototype.areaCode = function() {\n    return this.areaCode_;\n}\n\nPhone.prototype.toString = function() {\n    return "(" + this.areaCode_ + ") " + this.exchange_ + "-" + this.lineNumber_;\n}\nmodule.exports = Phone;	\N	f	0	3	2014-04-23 11:49:48	2014-04-23 11:49:48	61	phone-number.js
135	4	b594e4e3b2c9a17b0b976edf	done	haskell	matrix	module Matrix ( Matrix, row, column, rows, cols, shape, transpose\n              , reshape, flatten, fromString, fromList) where\n\nimport qualified Data.Vector as V\nimport Data.Array (Array, array, elems, listArray, bounds, (!))\n\ntype Matrix a = Array (Int,Int) a\n\nrow :: Int -> Matrix a -> V.Vector a\nrow i p = V.fromList [p!(i+1,j) | j <- [1..cols p]]\n\ncolumn :: Int -> Matrix a -> V.Vector a\ncolumn j p = V.fromList [p!(i,j+1) | i <- [1..rows p]]\n\nrows :: Matrix a -> Int\nrows = fst . shape\n\ncols :: Matrix a -> Int\ncols = snd . shape\n\nshape :: Matrix a -> (Int,Int)\nshape = snd . bounds\n\ntranspose :: Matrix a -> Matrix a \ntranspose p = \n    array ((1,1),(n,m))\n          [((i,j), p!(j,i)) | i <- [1..n], j <- [1..m]]\n    where (m,n) = shape p\n\nreshape :: (Int,Int) -> Matrix a -> Matrix a\nreshape (m,n) p = listArray ((1,1),(m,n)) (elems p) \n\nflatten :: Matrix a -> V.Vector a\nflatten p = V.fromList (elems p)\n\nfromString :: Read a => String -> Matrix a \nfromString = fromList . string2Lists\n\nfromList :: [[a]] -> Matrix a\nfromList []  = array ((1,1),(0,0)) []\nfromList xss = listArray ((1,1),(m,n)) (concat xss)\n    where m = length xss\n          n = length (head xss)\n\nstring2Lists :: Read a => String -> [[a]]\nstring2Lists cs = map string2List (lines cs)\n\nstring2List :: Read a => String -> [a]\nstring2List "" = []\nstring2List cs = read x : string2List cs2\n    where (x,cs2) = head (lex cs) 	\N	f	0	1	2014-03-18 15:23:33	2014-03-18 15:23:33	66	matrix.hs
139	4	1ece65c734e0f2f130334fc3	superseded	haskell	word-count	module WordCount ( wordCount ) where\n\nimport Data.Char (isPunctuation, isSymbol, toLower)\nimport Data.Map (fromList, Map, empty, insertWith)\n\nwordCount :: String -> Map String Integer\nwordCount = go . words . map toLower . filter (not . isPunctuation')\n  where\n    go [] = empty\n    go (w:ws) = insertWith (\\_ -> (+ 1)) w 1 $ go ws\n    isPunctuation' c = isPunctuation c || isSymbol c	\N	f	0	1	2014-01-13 16:56:13	2014-01-13 16:56:13	68	word-count.hs
143	4	c7f5d4e7da9a0259993133d4	done	haskell	ocr-numbers	module OCR (convert) where\n\nimport qualified Data.Map as Map\nimport Data.List\nimport Data.List.Split\n\nreorganize :: [String] -> [String]\nreorganize = map concat\n                . transpose\n                . map (chunksOf 3)\n\nocrmap :: Map.Map String Char\nocrmap = Map.fromList $ zip (reorganize model) "1234567890"\n    where\n        model = [ "    _  _     _  _  _  _  _  _ "\n                , "  | _| _||_||_ |_   ||_||_|| |"\n                , "  ||_  _|  | _||_|  ||_| _||_|"\n                , "                              "\n                ]\n\n\nconvert :: String -> String\nconvert = intercalate ","\n                . map ocrLine\n                . chunksOf 4\n                . lines\n    where\n        ocrLine = map (\\s -> Map.findWithDefault '?' s ocrmap) . reorganize	\N	f	0	1	2014-03-06 00:22:49	2014-03-06 00:22:49	70	ocr-numbers.hs
146	4	d6a6d5f5b3902540decca288	done	haskell	sieve	module Sieve (primesUpTo)\nwhere\n\nimport Control.Monad.ST\nimport Control.Monad\nimport Data.Array.ST\nimport Data.Array.Unboxed\nimport Data.List (genericIndex)\n\ntype PrimeArray = UArray Integer Bool\n\ntype MPrime s = STUArray s Integer Bool\n\n-- | Convert a number to an index in the sieve array\n-- | The number MUST be odd (not checked!)\ntoIndex :: Integer -> Integer\ntoIndex n = n `div` 2\n\n-- | Get the number corresponding to an index in the sieve\nfromIndex :: Integer -> Integer\nfromIndex n = 2*n+1\n\n-- | Remove the second argument from the prime list\nremovePrime :: MPrime s -> Integer -> ST s ()\nremovePrime arr n = when (n `mod` 2 == 1) $ writeArray arr (toIndex n) False\n\n-- | Update the sieve, knowing the integer at index i is prime\nupdateSieve :: MPrime s -> Integer -> ST s ()\nupdateSieve arr i =\n  do\n    up <- liftM ((`div` n) . fromIndex . snd) $ getBounds arr\n    forM_ [2..up] $ removePrime arr . (*n)\n  where\n    n = fromIndex i\n\n-- | Create an array of prime numbers\n-- | For efficiency, only off numbers are represented\nsieve :: Integer -> ST s (MPrime s)\nsieve n =\n  do\n    arr <- newArray (1, lim) True\n    forM_ [1..lim] $ updateSieve arr\n    return arr\n  where\n    lim = pred $ toIndex n\n\n-- | Return the array telling if each odd number is prime or not\nprimes :: Integer -> PrimeArray\nprimes n = runSTUArray $ sieve n\n\nlistPrimes :: Integer -> [Integer]\nlistPrimes = (2:) . map (fromIndex . fst) . filter snd . assocs . primes\n\nprimesUpTo :: Integer -> [Integer]\nprimesUpTo n\n  | n == 2    = [2]\n  | n > 2     = listPrimes $ succ n\n  | otherwise = []	\N	f	0	1	2014-02-19 09:50:24	2014-02-19 09:50:24	72	Sieve.hs
150	4	0dc1004ab3f6d3378a39c50f	done	haskell	prime-factors	module PrimeFactors (primeFactors) where\r\n\r\nprimeFactors :: Integer -> [Integer]\r\nprimeFactors n = reverse $ factors n divisors []\r\n  where\r\n    divisors = 2:3:[f x | x <- [6,12..], f <- [succ, pred]]\r\n\r\nfactors :: Integer -> [Integer] -> [Integer] -> [Integer]\r\nfactors 1  _     acc = acc\r\nfactors n (k:ks) acc =  if n `mod` k == 0\r\n                                then factors (n `div` k) (k:ks) (k:acc)\r\n                                else factors  n             ks     acc	\N	f	1	4	2014-01-25 12:50:59	2014-01-25 12:50:59	74	PrimeFactors.hs
165	21	e9edfa2b78eb72d8036a8052	superseded	python	rna-transcription	'''\nDNA-RNA Translator\n'''\n\nclass DNA(object):\n    '''\n    DNA Module\n    '''\n    ACID_TABLE = {'G': 'C', 'C': 'G', 'T': 'A', 'A': 'U'}\n    def __init__(self, nucleotides):\n        self.nucleotides = nucleotides\n\n    def to_rna(self):\n        '''\n        Translates DNA to RNA using a quick lookup table.\n        '''\n        self.rna = ""\n        for acid in self.nucleotides:\n            self.rna += self.ACID_TABLE[acid]\n        return self.rna	\N	f	4	2	2013-12-14 12:25:37	2013-12-14 12:25:37	82	dna.py
175	21	95380878e21ce2e6d5af4853	superseded	python	phone-number	class Phone(object):\n    sections = ['area_code', 'exchange', 'line']\n    pretty_format = '({area_code}) {exchange}-{line}'\n\n    def __init__(self, user_number):\n        clean_number = raw_number = filter(lambda c: c.isdigit(), user_number)\n\n        if len(raw_number) == 11 and raw_number[0] == '1':\n            clean_number = raw_number[1:]\n        elif len(raw_number) != 10:\n            clean_number = '0000000000'  # TODO: better to raise error here?\n\n        self.number = clean_number\n\n    def area_code(self):\n        """Get area code (first three digits)"""\n        return self.number[:3]\n\n    def exchange(self):\n        """Get exchange (first three digits after area code)"""\n        return self.number[3:6]\n\n    def line(self):\n        """Get line number (last four digits)"""\n        return self.number[6:]\n\n    def pretty(self):\n        """Output number in pretty format: (XXX) XXX-XXXX"""\n        format_kwargs = {}\n\n        for section in self.sections:\n            format_kwargs[section] = getattr(self, section)()\n\n        return self.pretty_format.format(**format_kwargs)	\N	f	3	1	2013-11-24 20:43:52	2013-11-24 20:43:52	87	phone-number.py
177	21	205a5dcbaf8bed3c7f8c0821	pending	javascript	meetup	function Meetup(month, year) {\n    var FIRST_TEENTH = 13;\n    var weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday",\n                    "Thursday", "Friday", "Saturday"];\n    var teenths = weekdays.map(function(weekday) {\n        return weekday.slice(0, -3).toLowerCase() + "teenth";\n    });\n    var ordinals = ["first", "second", "third", "fourth"];\n    var functions = {};\n\n    var findDate = function(startDay, day, increment) {\n        increment = increment || 1;\n        return function() {\n            var date = new Date(year, month, startDay);\n            while (date.getDay() !== day) {\n                var nextDay = date.getDate() + increment;\n                date.setDate(nextDay);\n            }\n            return date;\n        };\n    };\n\n    var lastDayOfMonth = new Date(year, month + 1, 0).getDate();\n\n    weekdays.forEach(function(dayName, dayValue) {\n        var teenthName = teenths[dayValue];\n        functions[teenthName] = findDate(FIRST_TEENTH, dayValue);\n\n        ordinals.forEach(function(ordinalWord, ordinalValue) {\n            var startDay = ordinalValue * 7 + 1;\n            functions[ordinalWord + dayName] = findDate(startDay, dayValue);\n        });\n\n        functions["last" + dayName] = findDate(lastDayOfMonth, dayValue, -1);\n    });\n\n    return functions;\n}\n\nmodule.exports = Meetup;	\N	f	3	1	2014-01-05 14:45:02	2014-01-05 14:45:02	88	meetup.js
188	26	910bdc14043ea03185a9e26b	superseded	haskell	allergies	module Allergies (Allergen(..), isAllergicTo, allergies) where\n\nimport Data.Bits\n\ndata Allergen = Eggs | Peanuts | Shellfish | Strawberries | Tomatoes | Chocolate | Pollen | Cats\n                deriving (Show, Eq, Ord, Enum)\n\nallergies :: Int -> [Allergen]\nallergies 0 = []\nallergies i = map toEnum $ filter bitLit [0..7]\n   where bitLit n = 2^n .&. i /= 0\n\nisAllergicTo :: Allergen -> Int -> Bool\nisAllergicTo a i = a `elem` allergies i	\N	f	3	1	2014-05-08 15:30:41	2014-05-08 15:30:41	95	allergies.hs
193	26	e5f05e3ea2e5e1c0d95476b6	superseded	go	anagram	// Package anagram provides a method for comparing strings to see if they\n// have the same characters.  Differences in casing are not considered.\npackage anagram\n\nimport (\n  "strings"\n)\n\ntype byteFreqMap map[byte]int\n\n// Detect compares a reference string against a slice of candidate strings\n// and returns an array of lowercased candidates that are anagrams of the\n// reference string.\nfunc Detect(baseline string, candidates []string) (matches []string) {\n  for _, c := range(candidates) {\n    if isAnagram(baseline, c) {\n      matches = append(matches, strings.ToLower(c))\n    }\n  }\n  return\n}\n\nfunc isAnagram(baseline string, candidate string) bool {\n  a, b := strings.ToLower(baseline), strings.ToLower(candidate)\n\n  if a == b {\n    return false\n  } else {\n    return newByteFreqMap(a).Equal(newByteFreqMap(b))\n  }\n}\n\nfunc newByteFreqMap(s string) (freqs byteFreqMap) {\n  freqs = make(byteFreqMap)\n\n  for i := 0; i < len(s); i++ {\n    freqs[s[i]]++\n  }\n  return\n}\n\nfunc (a byteFreqMap) Equal (b byteFreqMap) bool {\n  if len(a) != len(b) {\n    return false\n  }\n\n  for c, _ := range(a) {\n    if a[c] != b[c] {\n      return false\n    }\n  }\n\n  return true\n}	\N	f	0	1	2014-05-16 01:05:16	2014-05-16 01:05:16	97	anagram.go
200	26	9440909b761fe049a011e08a	done	haskell	octal	{-# LANGUAGE TupleSections #-}\nmodule Octal (showOct, readOct) where\n\nreadOct :: (Integral a) => String -> a\nreadOct = maybe 0 (foldl (\\v -> (+ 8 * v)) 0) .\n    sequence . map (`lookup` zipWith (,) ['0'..'7'] [0..7])\n{-should add implementation of foldl'-}\n\nshowOct :: (Integral a) => a -> String\nshowOct = snd . head . dropWhile ((> 0) . fst) . iterate step . (, "") where\n    step (m, s) = let (q, r) = m `divMod` 8 in\n                      (q, (['0'..'7'] !! (fromIntegral r)):s)\n{-should check need for bang patterns-}	\N	f	2	1	2014-05-02 17:42:09	2014-05-02 17:42:09	99	octal.hs
201	26	333e26641dfb5f209a06dc13	pending	ruby	allergies	class Allergies\n  attr_reader :score\n\n  def initialize(score)\n    @score = validate(score)\n  end\n\n  def allergic_to?(food)\n    list.include?(food)\n  end\n\n  def list\n    return exact_score if valid_scores.include?(score)\n    find_allergies_from_score.reverse\n  end\n\n  private\n\n  def allergy_scores\n    {\n      128 => "cats",\n      64  => "pollen",\n      32  => "chocolate",\n      16  => "tomatoes",\n      8   => "strawberries",\n      4   => "shellfish",\n      2   => "peanuts",\n      1   => "eggs"\n    }\n  end\n\n  def valid_scores\n    allergy_scores.keys\n  end\n\n  def exact_score\n    Array(allergy_scores[score])\n  end\n\n  def find_allergies_from_score\n    allergies = []\n    remainder = score\n\n    valid_scores.each do |score|\n      break if remainder <= 0\n\n      if score <= remainder\n        allergies << allergy_scores[score]\n        remainder -= score\n      end\n    end\n\n    allergies\n  end\n\n  def validate(score)\n    while score > 255\n      score -= 256\n    end\n    score\n  end\n\nend	\N	f	2	1	2014-05-08 10:32:09	2014-05-08 10:32:09	100	allergies.rb
207	26	f25cecba02fa5b0aa407e6a3	done	elixir	bob	defmodule Teenager do\n\n  def hey(sentence) do\n    stripped = String.strip(sentence)\n    cond do\n      all_caps?(stripped) ->\n        "Woah, chill out!"\n      only_contains_whitespace?(stripped) ->\n        "Fine. Be that way!"\n      ends_in_questionmark?(stripped) ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\n\n  defp all_caps?(sentence) do\n    has_uppercase = Regex.match?(~r/[[:upper:]]/, sentence)\n    has_lowercase = Regex.match?(~r/[[:lower:]]/, sentence)\n    has_uppercase && !has_lowercase\n  end\n\n  defp only_contains_whitespace?(""), do: true\n  defp only_contains_whitespace?(_), do: false\n\n  defp ends_in_questionmark?(sentence) do\n    String.last(sentence) == "?"\n  end\n\nend	\N	f	4	2	2014-05-11 16:16:52	2014-05-11 16:16:52	103	bob.exs
438	20	59976ee098d722ab494fdda0	done	elixir	bob	defmodule Teenager do\n  def hey(message) do\n    cond do\n      silent?(message) ->\n        "Fine. Be that way!"\n      yelling?(message) ->\n        "Woah, chill out!"\n      question?(message) ->\n        "Sure."\n      true ->\n        "Whatever."\n    end\n  end\n\n  defp silent?(message) do\n    "" == message\n  end\n\n  defp yelling?(message) do\n    message == String.upcase(message)\n  end\n\n  defp question?(message) do\n    "?" == String.last(message)\n  end\nend	\N	f	3	1	2014-04-05 20:46:16	2014-04-05 20:46:16	214	bob.exs
209	26	66b74004c018dd1a2d922355	superseded	ruby	prime-factors	class Array\n    def reduce_sorted_up_to(max, memo)\n        index = 0\n        x = self[index]\n        while x && x <= max\n            memo = yield memo, x\n            index += 1\n            x = self[index]\n        end\n        memo\n    end\nend\n\nmodule PrimeFactors\n    @@primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,91,97]\n\n    def self.for(n)\n        get_primes_up_to(root(n))\n        remainder = n\n        prime_factors = @@primes.reduce_sorted_up_to(root(n), []) do |factors, prime|\n            while factor? remainder, prime\n                remainder = remainder / prime\n                factors.push prime\n            end\n            factors\n        end\n        prime_factors.push remainder if remainder > 1\n        prime_factors\n    end\n\n    private\n\n    def self.root(n)\n        Math.sqrt(n).to_i\n    end\n\n    def self.get_primes_up_to(n)\n        (@@primes.last + 2).step(n, 2) do |candidate|\n            @@primes.push(candidate) unless any_factors? candidate\n        end\n    end\n\n    def self.any_factors?(n)\n        @@primes.reduce_sorted_up_to(root(n), false) do |factors_exist, prime|\n                return true if factors_exist\n                factor?(n, prime)\n        end\n    end\n\n    def self.factor?(n, prime)\n        n >= prime && n % prime == 0\n    end\n\nend\n    	\N	f	2	4	2014-04-30 08:31:12	2014-04-30 08:31:12	104	prime-factors.rb
216	26	72d5040588c28820617a49f8	pending	javascript	space-age	var SpaceAge = function(secs) {\n\n\tvar _seconds = secs;\n\n\tvar _EARTH_PERIOD_IN_SECS = 31557600;\n\n\tvar _calculatePeriod = function(factor) {\n\t\treturn +((_seconds / _EARTH_PERIOD_IN_SECS) / factor).toFixed(2);\n\t};\n\n\treturn {\n\n\t\tseconds: _seconds,\n\n\t\tonEarth: function() {\n\t\t\treturn _calculatePeriod(1);\n\t\t},\n\n\t\tonMercury: function() {\n\t\t\treturn _calculatePeriod(0.2408467);\n\t\t},\n\n\t\tonVenus: function() {\n\t\t\treturn _calculatePeriod(0.61519726);\n\t\t},\n\n\t\tonSaturn: function() {\n\t\t\treturn _calculatePeriod(29.447498);\n\t\t},\n\n\t\tonJupiter: function() {\n\t\t\treturn _calculatePeriod(11.862615);\n\t\t},\n\n\t\tonNeptune: function() {\n\t\t\treturn _calculatePeriod(164.79132);\n\t\t},\n\n\t\tonMars: function() {\n\t\t\treturn _calculatePeriod(1.8808158);\n\t\t},\n\n\t\tonUranus: function() {\n\t\t\treturn _calculatePeriod(84.016846);\n\t\t}\n\t};\n\n};\n\nmodule.exports = SpaceAge;	\N	f	1	1	2014-05-01 12:06:28	2014-05-01 12:06:28	105	space-age.js
227	26	dbc423535262d0643d374188	done	go	atbash-cipher	package atbash\n\nimport (\n\t"regexp"\n\t"strings"\n)\n\nconst (\n\taCode = uint8('a')\n\tzCode = uint8('z')\n)\n\nvar captureWords, _ = regexp.Compile("\\\\w+")\nvar captureFives, _ = regexp.Compile("\\\\w{1,5}")\n\nfunc Atbash(plain string) string {\n\treturn groupedByFives(encoded(normalized(plain)))\n}\n\nfunc normalized(plain string) string {\n\tmatches := captureWords.FindAllString(strings.ToLower(plain), -1)\n\treturn strings.Join(matches, "")\n}\n\nfunc encoded(norm string) string {\n\tcode := make([]rune, len(norm))\n\tfor i, letter := range norm {\n\t\tcode[i] = encodedRune(letter)\n\t}\n\treturn string(code)\n}\n\nfunc encodedRune(plain rune) rune {\n\tif isLetter(plain) {\n\t\treturn encodedLetter(plain)\n\t} else {\n\t\treturn plain\n\t}\n}\n\nfunc isLetter(plain rune) bool {\n\tplainCode := uint8(plain)\n\treturn plainCode >= aCode && plainCode <= zCode\n}\n\nfunc encodedLetter(plain rune) rune {\n\treturn rune(zCode - uint8(plain) + aCode)\n}\n\nfunc groupedByFives(code string) string {\n\tgroups := captureFives.FindAllString(code, -1)\n\treturn strings.Join(groups, " ")\n}	\N	f	2	2	2014-05-25 20:32:12	2014-05-25 20:32:12	110	atbash_cipher.go
237	19	531a6cd8f404b21168e9d70f	done	ruby	scrabble-score	class Scrabble\n  attr_reader :letters\n\n  def initialize(word)\n    @letters = letters_from word\n  end\n\n  def score\n    letters.map { |letter| score_for letter }.inject(0) { |sum, score| sum + score }\n  end\n\n  def self.score(word)\n    new(word).score\n  end\n\n  private\n\n  def letters_from(word)\n    word.to_s.downcase.gsub(/[^a-z]/, '').chars\n  end\n\n  def score_for(letter)\n    _, score = scores.detect { |(letters, _)| letters.include? letter }\n    score\n  end\n\n  def scores\n    [\n      ['aeilnorstu', 1],\n      ['dg',         2],\n      ['bcmp',       3],\n      ['fhvwy',      4],\n      ['k',          5],\n      ['jx',         8],\n      ['qz',        10]\n    ]\n  end\nend	\N	f	0	1	2014-04-13 01:13:19	2014-04-13 01:13:19	117	scrabble-score.rb
238	19	aa3d25f0860e3f90414c2f95	done	elixir	allergies	defmodule Allergies do\n  use Bitwise\n\n  @items [\n    { "eggs",         1   },\n    { "peanuts",      2   },\n    { "shellfish",    4   },\n    { "strawberries", 8   },\n    { "tomatoes",     16  },\n    { "chocolate",    32  },\n    { "pollen",       64  },\n    { "cats",         128 }\n  ]\n\n  @doc """\n  List the allergies for which the corresponding flag bit is true.\n\n  Allergies should be ordered, starting with the allergie with the least\n  significant bit ("eggs").\n  """\n  @spec list(non_neg_integer) :: [String.t]\n  def list(flags) do\n    Stream.filter(@items, fn { _, n } -> (flags &&& n) == n end)\n    |> Enum.map(&elem(&1, 0))\n  end\n\n  @doc """\n  Returns whether the corresponding flag bit in 'flags' is set for the item.\n  """\n  @spec allergic_to?(non_neg_integer, String.t) :: boolean\n  def allergic_to?(flags, item) do\n    n = @items[item]\n    if n, do: (flags &&& n) == n, else: false\n  end\nend	\N	f	2	1	2014-03-13 17:04:11	2014-03-13 17:04:11	118	allergies.exs
247	19	85d9f471a591b339e4ff85d6	superseded	haskell	say	module Say ( inEnglish \n           , units\n           , tens\n           , split1000\n           , power1000\n           )\nwhere\n\nimport Control.Monad\n\n-- | Name of the 'extended' units (i.e. up to 19)\nunits :: (Num a, Eq a, MonadPlus m) => a -> m String\nunits 0  = return "zero"\nunits 1  = return "one"\nunits 2  = return "two"\nunits 3  = return "three"\nunits 4  = return "four"\nunits 5  = return "five"\nunits 6  = return "six"\nunits 7  = return "seven"\nunits 8  = return "eight"\nunits 9  = return "nine"\nunits 10 = return "ten"\nunits 11 = return "eleven"\nunits 12 = return "twelve"\nunits 13 = return "thirteen"\nunits 14 = return "fourteen"\nunits 15 = return "fifteen"\nunits 16 = return "sixteen"\nunits 17 = return "seventeen"\nunits 18 = return "eighteen"\nunits 19 = return "nineteen"\nunits _ = fail "Digit too large"\n\n-- | Name of the tens\ntens :: (Num a, Eq a, MonadPlus m) => a -> m String\ntens 1 = return "ten"\ntens 2 = return "twenty"\ntens 3 = return "thirty"\ntens 4 = return "forty"\ntens 5 = return "fifty"\ntens 6 = return "sixty"\ntens 7 = return "seventy"\ntens 8 = return "eighty"\ntens 9 = return "ninety"\ntens _ = fail "Tens too large"\n\n-- | Name of the powers of 1000\npower1000 :: (Num a, Eq a, MonadPlus m) => a -> m String\npower1000 1 = return "thousand"\npower1000 2 = return "million"\npower1000 3 = return "billion"\n-- power1000 4 = Just "trillion"\npower1000 _ = fail "Number too large"\n\nsplit1000 :: (Integral a) => a -> [a]\nsplit1000 n \n  | n >= 1000 = let (nr, nt) = n `divMod` 1000\n                in nt : split1000 nr\n  | otherwise = [n]\n\n-- | Return a list of word within the evaluation monad\n-- | The monad is required to be able to fail\nenglishWords ::  (Integral a, Show a, MonadPlus m) => a -> m [String]\nenglishWords n\n  | n < 0     = fail "Cannot represent negative values"\n  | n < 20    = liftM (:[]) $ units n\n  | n < 100   = let (ts, us) = n `divMod` 10\n                in\n                 if us == 0 then liftM (:[]) $ tens ts\n                   else liftM2 combineTens \n                        (tens ts) \n                        (units us)\n  | n < 1000  = let (hs, us) = n `divMod` 100\n                in if us == 0 then liftM makeHundred $ englishWords hs\n                   else liftM2 combineHundred\n                        (englishWords hs)\n                        (englishWords us)\n  | otherwise = foldM combine' [] $ zip (split1000 n) [0..]\n  where\n    -- Combine the thousands together\n    combine' :: (Show a, Integral a, MonadPlus m) => [String] -> (a, a) -> m [String]\n    combine' acc (0, _)    = return acc\n    combine' _   (val, 0)  = englishWords val\n    combine' acc (val, ts) = liftM2 (\\nns tts -> nns ++ (tts : acc) )\n                             (englishWords val)\n                             (power1000 ts)\n    -- make a hundred without units\n    makeHundred hundreds = hundreds ++ ["hundred"]\n    -- make a hundred with units\n    combineHundred hundreds units_ = hundreds ++ ["hundred"] ++ units_\n    -- make tens with units\n    combineTens tens_ units_ = [tens_ ++ "-" ++ units_]\n\ninEnglish :: (Integral a, Show a, MonadPlus m) => a -> m String\ninEnglish = liftM unwords . englishWords	\N	f	2	2	2014-02-08 02:50:21	2014-02-08 02:50:21	122	Say.hs
439	5	cfd5d02781a06d7d2156c5d8	pending	clojure	rna-transcription	(ns dna)\n\n;* `G` -> `C`\n;* `C` -> `G`\n;* `T` -> `A`\n;* `A` -> `U`\n\n(defn to-rna [dna-pattern]\n  (let [dna-to-rna-map {\\G \\C, \\C \\G, \\T \\A, \\A \\U}\n        dna-to-rna (fn [strand]\n                     (let [complement-strand (get dna-to-rna-map strand)]\n                       (if\n                         (nil? complement-strand)\n                         (throw (AssertionError. "Invalid Strand"))\n                         complement-strand)))]\n    (apply str (map dna-to-rna (seq dna-pattern)))))	\N	f	1	1	2014-03-02 09:35:23	2014-03-02 09:35:23	215	dna.clj
1323	31	62c9df18d4425769a67721cf	done	ruby	anagram	class Anagram\n  attr_reader :word_to_match\n\n  def initialize(word_to_match)\n    @word_to_match = word_to_match.downcase\n  end\n\n  def match(words)\n    words.select { |word| anagram?(word) }\n  end\n\n  private\n\n  def anagram?(word)\n    word_to_match.chars.sort == word.chars.sort unless identical?(word)\n  end\n\n  def identical?(word)\n    word == word_to_match\n  end\nend	\N	f	0	5	2014-05-03 23:41:22	2014-05-03 23:41:22	662	anagram.rb
248	19	d7fd508519e1a6d132bcb153	done	haskell	say	module Say ( inEnglish \n           , units\n           , tens\n           , split1000\n           , power1000\n           )\nwhere\n\nimport Control.Monad\n\n-- | Name of the 'extended' units (i.e. up to 19)\nunits :: (Num a, Eq a) => a -> Either String String\nunits 0  = Right "zero"\nunits 1  = Right "one"\nunits 2  = Right "two"\nunits 3  = Right "three"\nunits 4  = Right "four"\nunits 5  = Right "five"\nunits 6  = Right "six"\nunits 7  = Right "seven"\nunits 8  = Right "eight"\nunits 9  = Right "nine"\nunits 10 = Right "ten"\nunits 11 = Right "eleven"\nunits 12 = Right "twelve"\nunits 13 = Right "thirteen"\nunits 14 = Right "fourteen"\nunits 15 = Right "fifteen"\nunits 16 = Right "sixteen"\nunits 17 = Right "seventeen"\nunits 18 = Right "eighteen"\nunits 19 = Right "nineteen"\nunits _ = Left "Digit too large"\n\n-- | Name of the tens\ntens :: (Num a, Eq a) => a -> Either String String\ntens 1 = Right "ten"\ntens 2 = Right "twenty"\ntens 3 = Right "thirty"\ntens 4 = Right "forty"\ntens 5 = Right "fifty"\ntens 6 = Right "sixty"\ntens 7 = Right "seventy"\ntens 8 = Right "eighty"\ntens 9 = Right "ninety"\ntens _ = Left "Tens too large"\n\n-- | Name of the powers of 1000\npower1000 :: (Num a, Eq a) => a -> Either String String\npower1000 1 = Right "thousand"\npower1000 2 = Right "million"\npower1000 3 = Right "billion"\n-- power1000 4 = Just "trillion"\npower1000 _ = Left "Number too large"\n\nsplit1000 :: (Integral a) => a -> [a]\nsplit1000 n \n  | n >= 1000 = let (nr, nt) = n `divMod` 1000\n                in nt : split1000 nr\n  | otherwise = [n]\n\n-- | Return a list of word within the evaluation monad\n-- | The monad is required to be able to fail\nenglishWords ::  (Integral a, Show a) => a -> Either String [String]\nenglishWords n\n  | n < 0     = fail "Cannot represent negative values"\n  | n < 20    = liftM (:[]) $ units n\n  | n < 100   = let (ts, us) = n `divMod` 10\n                in\n                 if us == 0 then liftM (:[]) $ tens ts\n                   else liftM2 combineTens \n                        (tens ts) \n                        (units us)\n  | n < 1000  = let (hs, us) = n `divMod` 100\n                in if us == 0 then liftM makeHundred $ englishWords hs\n                   else liftM2 combineHundred\n                        (englishWords hs)\n                        (englishWords us)\n  | otherwise = foldM combine' [] $ zip (split1000 n) [0..]\n  where\n    -- Combine the thousands together\n    combine' :: (Show a, Integral a) => [String] -> (a, a) -> Either String [String]\n    combine' acc (0, _)    = return acc\n    combine' _   (val, 0)  = englishWords val\n    combine' acc (val, ts) = liftM2 (\\nns tts -> nns ++ (tts : acc) )\n                             (englishWords val)\n                             (power1000 ts)\n    -- make a hundred without units\n    makeHundred hundreds = hundreds ++ ["hundred"]\n    -- make a hundred with units\n    combineHundred hundreds units_ = hundreds ++ ["hundred"] ++ units_\n    -- make tens with units\n    combineTens tens_ units_ = [tens_ ++ "-" ++ units_]\n\ninEnglishE :: (Integral a, Show a) => a -> Either String String\ninEnglishE = liftM unwords . englishWords\n\ninEnglish :: (Integral a, Show a, MonadPlus m) => a -> m String\ninEnglish = either fail return . inEnglishE	\N	f	0	3	2014-04-07 21:46:28	2014-04-07 21:46:28	122	Say.hs
254	19	a5318c99f5e48c1860ea5a3f	superseded	go	anagram	package anagram\n\nimport (\n\t"sort"\n\t"strings"\n)\n\nfunc Detect(subject string, candidates []string) (anagrams []string) {\n\tsubject = strings.ToLower(subject)\n\tfor _, candidate := range candidates {\n\t\tcandidate = strings.ToLower(candidate)\n\t\tif isAnagramOf(subject, candidate) {\n\t\t\tanagrams = append(anagrams, candidate)\n\t\t}\n\t}\n\treturn\n}\n\nfunc isAnagramOf(subject, candidate string) bool {\n\treturn !sameWord(subject, candidate) && sameFingerprint(subject, candidate)\n}\n\nfunc sameWord(s1, s2 string) bool {\n\treturn s1 == s2\n}\n\nfunc sameFingerprint(s1, s2 string) bool {\n\treturn fingerprint(s1) == fingerprint(s2)\n}\n\nfunc fingerprint(s string) string {\n\tletters := strings.Split(s, "")\n\tsort.Strings(letters)\n\treturn strings.Join(letters, "")\n}	\N	f	0	1	2014-04-09 17:08:29	2014-04-09 17:08:29	125	anagram.go
255	19	74d3c3bb0602c77db5b5ca35	superseded	go	anagram	package anagram\n\nimport (\n\t"sort"\n\t"strings"\n)\n\nfunc Detect(s string, candidates []string) (anagrams []string) {\n\tsubject := word(s)\n\tfor _, c := range candidates {\n\t\tcandidate := word(c)\n\t\tif candidate.isAnagramOf(subject) {\n\t\t\tanagrams = append(anagrams, candidate.text)\n\t\t}\n\t}\n\treturn\n}\n\ntype Word struct {\n\ttext        string\n\tfingerprint string\n}\n\nfunc word(s string) Word {\n\ts = strings.ToLower(s)\n\treturn Word{\n\t\ttext:        s,\n\t\tfingerprint: alphagram(s),\n\t}\n}\n\nfunc (candidate Word) isAnagramOf(subject Word) bool {\n\treturn !candidate.sameWordAs(subject) && candidate.sameFingerprintAs(subject)\n}\n\nfunc (w1 Word) sameWordAs(w2 Word) bool {\n\treturn w1.text == w2.text\n}\n\nfunc (w1 Word) sameFingerprintAs(w2 Word) bool {\n\treturn w1.fingerprint == w2.fingerprint\n}\n\nfunc alphagram(s string) string {\n\tletters := strings.Split(s, "")\n\tsort.Strings(letters)\n\treturn strings.Join(letters, "")\n}	\N	f	2	2	2014-04-18 22:25:06	2014-04-18 22:25:06	125	anagram.go
272	24	35e007fcd9262ecc9ee76223	pending	ruby	simple-linked-list	class Element\n  def self.from_a arr\n    arr.reverse_each.inject(nil){|nxt, datum| new(datum,nxt)}\n  end\n  \n  def self.to_a start=nil\n    arr = []\n    each_datum start, &arr.method(:push)\n    arr\n  end\n  \n  def self.reverse elem\n    rest = nil\n    each_datum(elem) {|datum| rest = new(datum,rest)}\n    rest\n  end\n  \n  def self.each_datum elem\n    until elem.nil?\n      yield elem.datum\n      elem = elem.next\n    end\n  end\n  \n  attr_reader :datum, :next\n  def initialize datum, nxt=nil\n    @datum = datum\n    @next = nxt\n  end\n  \n  def to_a\n    self.class.to_a self\n  end\n  \n  def reverse\n    self.class.reverse self\n  end\nend	\N	f	1	1	2014-03-29 08:30:52	2014-03-29 08:30:52	133	linked_list.rb
286	24	5c77c89b10459d31ab1dc8c1	superseded	ruby	nucleotide-count	class DNA\n  NUCLEOTIDES = %w{ A C T G U }\n\n  def initialize(chain)\n    @chain = chain\n  end\n\n  def nucleotide_counts\n    { 'A' => @chain.count('A'),\n      'C' => @chain.count('C'),\n      'T' => @chain.count('T'),\n      'G' => @chain.count('G') }\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless NUCLEOTIDES.include?(nucleotide)\n    @chain.count(nucleotide)\n  end\nend	\N	f	2	4	2014-05-19 20:01:22	2014-05-19 20:01:22	137	nucleotide-count.rb
288	24	a5e6bae8ec5d702c7132deb0	hibernating	clojure	bob	(ns bob\n    (:require [clojure.string :as string]))\n\n(defn- all-letters-uppercase? [s]\n    (reduce \n        (fn ([]    false)\n            ([a b] (and a b)))\n        (map #(Character/isUpperCase %)\n            (filter #(Character/isLetter %) s))))\n\n(defn- yell? [s]\n    (and \n        (not (string/blank? s))\n        (all-letters-uppercase? s)))\n\n(defn- ends-in-questionmark? [s]\n    (= \\? (last s)))\n\n(defn- question? [s]\n    (and\n        (not (yell? s))\n        (ends-in-questionmark? s)))\n\n(defn- nothing? [s]\n    (string/blank? s))\n\n(defn response-for [s]\n    (cond\n        (nothing? s)    "Fine. Be that way!"\n        (yell? s)       "Woah, chill out!"\n        (question? s)   "Sure."\n        :else           "Whatever."))	\N	f	2	1	2014-04-07 12:17:00	2014-04-07 12:17:00	139	bob.clj
301	24	8e3fcdd0cce306ad4e82876e	superseded	clojure	word-count	(ns phrase\n  (:require [clojure.string :as str]))\n\n(def ^{:private true} strip-chars #"[^ a-z0-9]")\n\n(defn word-count\n  "returns a map of word counts in the given sentence"\n  [sentence]\n  (-> sentence\n      str/lower-case\n      (str/replace strip-chars "")\n      (str/split #" +")\n      frequencies))	\N	f	3	2	2014-05-08 23:15:05	2014-05-08 23:15:05	146	word-count.clj
303	24	bdc874370596764ba2b9a853	superseded	clojure	word-count	(ns phrase\n  (:require [clojure.string :as str]))\n\n(def ^{:private true} strip-chars #"[^ a-z0-9]")\n\n(defn word-count\n  "returns a map of word counts in the given sentence"\n  [sentence]\n  (loop [words (-> sentence\n                   str/lower-case\n                   (str/replace strip-chars "")\n                   (str/split #" +"))\n         count {}]\n    (if (empty? words)\n      count\n      (recur (rest words)\n             (update-in count\n                        [(first words)]\n                        #(inc (or % 0)))))))	\N	f	0	1	2014-05-22 05:00:19	2014-05-22 05:00:19	146	word-count.clj
316	18	eb78ee0de76e576e6d81dc54	pending	go	word-count	package wc\n\nimport "strings"\n\ntype Histogram map[string]int\n\nconst punctuation = "'!\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~'"\n\nfunc canonicalize(word string) string {\n\treturn strings.ToLower(strings.Trim(word, punctuation))\n}\n\nfunc incrementCount(word string, histogram Histogram) {\n\tcount, ok := histogram[word]\n\tif !ok {\n\t\tcount = 0\n\t}\n\thistogram[word] = count + 1\n}\n\nfunc WordCount(phrase string) Histogram {\n\thistogram := Histogram(make(map[string]int))\n\tfor _, word := range strings.Fields(phrase) {\n\t\tif word = canonicalize(word); word != "" {\n\t\t\tincrementCount(word, histogram)\n\t\t}\n\t}\n\treturn histogram\n}	\N	f	0	1	2013-09-07 00:29:12	2013-09-07 00:29:12	154	histogram.go
707	14	6cd04954ce6e1cd9e24560f5	superseded	elixir	bob	defmodule Teenager do\n  def hey(text) do\n    cond do\n      Speech.shouting?(text) -> \n        "Woah, chill out!"\n      Speech.question?(text) -> \n        "Sure."\n      Speech.silence?(text) ->\n          "Fine. Be that way!"\n      true -> \n        "Whatever."\n    end\n  end\nend\n\ndefmodule Speech do\n  def silence?(text) do\n    (text |> String.strip |> String.length) == 0\n  end\n  \n  def shouting?(text) do\n    !silence?(text) && (text == String.upcase text)\n  end\n  \n  def question?(text) do\n    String.ends_with? text, "?"\n  end  \nend	\N	f	3	3	2013-12-29 13:12:53	2013-12-29 13:12:53	355	bob.exs
323	18	73cb6341ff6e3d8cfc0d58ec	superseded	python	space-age	#!/usr/bin/env python\n\nEARTH_YEAR_IN_SECONDS = 31557600.0\nMERCURY_YEAR_IN_EARTH_YEARS = 0.2408467\nVENUS_YEAR_IN_EARTH_YEARS = 0.61519726\nMARS_YEAR_IN_EARTH_YEARS = 1.8808158\nJUPITER_YEAR_IN_EARTH_YEARS = 11.862615\nSATURN_YEAR_IN_EARTH_YEARS = 29.447498\nURANUS_YEAR_IN_EARTH_YEARS = 84.016846\nNEPTUNE_YEAR_IN_EARTH_YEARS = 164.79132\n\nclass SpaceAge:\n    def __init__(self, seconds):\n        self.seconds = seconds\n    \n    def on_earth(self):\n        return round(self.seconds / EARTH_YEAR_IN_SECONDS, 2)\n    \n    def on_mercury(self):\n        return round(self.seconds / EARTH_YEAR_IN_SECONDS / MERCURY_YEAR_IN_EARTH_YEARS, 2)\n    \n    def on_venus(self):\n        return round(self.seconds / EARTH_YEAR_IN_SECONDS / VENUS_YEAR_IN_EARTH_YEARS, 2)\n    \n    def on_mars(self):\n        return round(self.seconds / EARTH_YEAR_IN_SECONDS / MARS_YEAR_IN_EARTH_YEARS, 2)\n    \n    def on_jupiter(self):\n        return round(self.seconds / EARTH_YEAR_IN_SECONDS / JUPITER_YEAR_IN_EARTH_YEARS, 2)\n    \n    def on_saturn(self):\n        return round(self.seconds / EARTH_YEAR_IN_SECONDS / SATURN_YEAR_IN_EARTH_YEARS, 2)\n    \n    def on_uranus(self):\n        return round(self.seconds / EARTH_YEAR_IN_SECONDS / URANUS_YEAR_IN_EARTH_YEARS, 2)\n    \n    def on_neptune(self):\n        return round(self.seconds / EARTH_YEAR_IN_SECONDS / NEPTUNE_YEAR_IN_EARTH_YEARS, 2)	\N	f	2	1	2013-11-13 22:01:28	2013-11-13 22:01:28	158	space_age.py
327	18	9c0ede20853539e66fe6e3a6	pending	clojure	beer-song	(ns beer\n  (:require [clojure.string :as s]))\n\n(defn plural-bottle\n  [i]\n  (case i\n    0     "No more bottles"\n    1     "1 bottle"\n    (format "%s bottles" i)))\n\n\n(defn verse\n  [i]\n  (let  [pluralize-bottle  (plural-bottle i)\n         next-bottles      (if (= i 0) 99 (dec i))\n         first-sentence    (format "%s of beer on the wall, %s of beer.\\n" pluralize-bottle (s/lower-case pluralize-bottle))\n         second-part       (if (= i 0)\n                             "Go to the store and buy some more"\n                             (format "Take %s down and pass it around"\n                                     (if (= next-bottles 0) "it" "one")))\n         second-sentence   (format\n                            "%s, %s of beer on the wall.\\n"\n                            second-part\n                            (if (= next-bottles 0) "no more bottles" (plural-bottle next-bottles)))]\n    (str first-sentence second-sentence)))\n\n\n(defn sing\n  ([end] (sing end 0))\n  ([end start]\n     (->> (range end (dec start) -1)\n          (map verse)\n          (s/join "\\n"))))	\N	f	2	1	2013-11-16 02:00:18	2013-11-16 02:00:18	160	beer.clj
334	23	c7525901f869cf2e589ee2fc	superseded	javascript	beer-song	Beer = {};\n\n(function () {\n  Beer.verse = function(number) {\n    return capitalize(stanza(number)) + " " +\n             where() + ", " +\n           stanza(number) + ".\\n" + \n           action(number) + ", " +\n           stanza(number - 1) + " " +\n             where() + ".\\n";\n  };\n\n  Beer.sing = function(startFrom, downTo) {\n    var verseNumber, verses = [];\n\n    if (typeof(downTo) === 'undefined') {\n      downTo = 0;\n    }\n\n    for (verseNumber = startFrom; verseNumber >= downTo; verseNumber--) {\n      verses.push(this.verse(verseNumber));\n    }\n\n    return verses.join("\\n")\n  }\n\n  function where() {\n    return "on the wall";\n  }\n\n  function stanza(number) {\n    return number < 0 ?\n           stanza(99) :\n           count(number) + " " + bottles(number) + " of beer";\n  }\n\n  function count(number) {\n    return number > 0 ? number.toString() : "no more";\n  }\n\n  function bottles(number) {\n    var bottle = "bottle";\n    if (number !== 1) { bottle = bottle + "s" }\n    return bottle;\n  }\n\n  function action(number) {\n    return number > 0 ?\n           "Take " + it(number) + " down and pass it around" :\n           "Go to the store and buy some more";\n  }\n\n  function it(number) {\n    return number > 1 ? "one" : "it";\n  }\n\n  function capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n})()	\N	f	2	2	2014-01-28 00:15:10	2014-01-28 00:15:10	164	beer-song.js
336	23	ae826153278495a0054343f6	superseded	javascript	beer-song	Beer = function Beer(beverage) {\n  this.beverage = beverage;\n};\n\n(function () {\n  Beer.verse = Beer.prototype.verse = function(number) {\n    return capitalize(stanza(number, this.beverage)) + " " +\n             where() + ", " +\n           stanza(number, this.beverage) + ".\\n" + \n           action(number) + ", " +\n           stanza(number - 1, this.beverage) + " " +\n             where() + ".\\n";\n  };\n\n  Beer.sing = Beer.prototype.sing = function(startFrom, downTo) {\n    var verseNumber, verses = [];\n\n    if (typeof(downTo) === 'undefined') {\n      downTo = 0;\n    }\n\n    for (verseNumber = startFrom; verseNumber >= downTo; verseNumber--) {\n      verses.push(this.verse(verseNumber));\n    }\n\n    return verses.join("\\n")\n  }\n\n  function where() {\n    return "on the wall";\n  }\n\n  function stanza(number, beverage) {\n    return number < 0 ?\n           stanza(99) :\n           count(number) + " " + bottles(number) + " of " + (beverage || "beer");\n  }\n\n  function count(number) {\n    return number > 0 ? number.toString() : "no more";\n  }\n\n  function bottles(number) {\n    var bottle = "bottle";\n    if (number !== 1) { bottle = bottle + "s" }\n    return bottle;\n  }\n\n  function action(number) {\n    return number > 0 ?\n           "Take " + it(number) + " down and pass it around" :\n           "Go to the store and buy some more";\n  }\n\n  function it(number) {\n    return number > 1 ? "one" : "it";\n  }\n\n  function capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n})()	\N	f	1	3	2014-03-29 00:33:02	2014-03-29 00:33:02	164	beer-song.js
347	23	d8e2276dfe3e549dd4d87386	superseded	ruby	anagram	class Anagram\n  attr_accessor :a_word\n  def initialize(word="")\n    @a_word = word\n  end\n  def match(word_arr)\n    match_arr = Array.new\n    word_arr.each do |w|\n      if (is_anagram?(w))\n        match_arr.push(w)\n      end\n    end\n    match_arr\n  end\n  private\n  def is_anagram?(word)\n    temp_word = word.downcase\n    return false if @a_word == temp_word #don't allow identical words as anagrams\n    @a_word_hash = letter_count_hash(@a_word.downcase)\n    word_hash = letter_count_hash(temp_word)\n    return false unless same_number_of_letters?(@a_word_hash,word_hash)\n    bool_flag = true\n    word_hash.each do |key,val|\n      unless @a_word_hash.key?(key)&&@a_word_hash[key]==val\n        bool_flag = false\n      end\n    end\n    return bool_flag\n  end\n  def same_number_of_letters?(word1_hash,word2_hash)\n    word1_hash.keys.length==word2_hash.keys.length\n  end\n  def letter_count_hash(word)\n    #{"dab"=>1,"bad"=>3,"etc"=>4}\n    @letter_hash = Hash.new\n    word.each_char do |letter|\n      @letter_hash[letter] = (@letter_hash[letter].nil?) ? 0 : @letter_hash[letter]+1\n    end\n    @letter_hash\n  end\nend	\N	f	3	4	2014-01-20 02:27:38	2014-01-20 02:27:38	169	anagram.rb
451	5	8bfca6694ffb0379c3d876c0	pending	ruby	triangle	class Triangle\n  attr_reader :side_1, :side_2, :side_3\n\n  def initialize(*sides)\n    @side_1, @side_2, @side_3 = sides.sort\n\n    validate\n  end\n\n  def kind\n    case\n    when all_sides_equal?\n      :equilateral\n    when two_sides_equal?\n      :isosceles\n    else\n      :scalene\n    end\n  end\n\n  private\n\n  def validate\n    unless side_1 > 0\n      raise TriangleError, "All sides must have a positive length"\n    end\n\n    unless side_1 + side_2 > side_3\n      raise TriangleError, "Triangles must satisfy the Triangle Inequality"\n    end\n  end\n\n  def all_sides_equal?\n    side_1 == side_3\n  end\n\n  def two_sides_equal?\n    side_1 == side_2 || side_2 == side_3\n  end\nend\n\nclass TriangleError < Exception; end	\N	f	2	1	2014-04-08 19:12:20	2014-04-08 19:12:20	220	triangle.rb
354	23	3bb564157b6a6bb6d1a1c9bc	superseded	ruby	anagram	class Anagram\n  attr_accessor :subject\n  \n  def initialize(word="")\n    @subject = word\n  end\n  \n  def match(words)\n    matches =  []\n    words.each do |word|\n      if (perfect_anagram?(word))\n        matches.push(word)\n      end\n    end\n    matches\n  end\n  \n  private\n  \n  def perfect_anagram?(word)\n    #perfect anagrams have the same number of letters as the original subject\n    return false if @subject == word.downcase #don't allow identical words as anagrams\n    subject_letter_counts = count_letters(@subject.downcase)\n    letter_counts = count_letters(word.downcase)\n    return false unless same_letters?(subject_letter_counts,letter_counts)\n    letter_counts.all? {|letter,count| subject_letter_counts.key?(letter) && subject_letter_counts[letter] == count}\n  end\n  \n  def same_letters?(letter_counts1, letter_counts2)\n    letter_counts1.keys.length == letter_counts2.keys.length\n  end\n\n  def count_letters(word)\n    #{"b"=>1,"d"=>3,"e"=>4}\n    @letter_counts = {}\n    word.each_char do |letter|\n      @letter_counts[letter] = @letter_counts[letter].nil? ? 0 : @letter_counts[letter] + 1\n    end\n    @letter_counts\n  end\n\nend	\N	f	3	6	2014-03-08 18:38:27	2014-03-08 18:38:27	169	anagram.rb
362	23	eae46c9a12fb30b568c85ab4	pending	javascript	wordy	function WordProblem(question) {\n  var operators = { "plus": true, "minus": true, "multiplied": true, "divided": true, "raised": true };\n\n  var curOperands = question.match(/-?\\d+/g);\n  if (!curOperands) {\n    curOperands = [];\n  }\n  else {\n    curOperands = curOperands.map(function(elem) { return parseInt(elem); });\n  }\n\n  var curOperators = question.split(" ").filter(function(elem) {\n    if (operators.hasOwnProperty(elem)) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  });\n  //console.log("Operands", curOperands);\n  //console.log("Operators", curOperators);\n\n  this.operands = curOperands;\n  this.operators = curOperators;\n}\n\nWordProblem.prototype.answer = function() {\n  if(this.operands.length < 2 || !this.operators.length) {\n    throw new ArgumentError();\n  }\n  var curOperatorIndex = 0;\n  var result = this.operands[0];\n  for (var i = 1; i < this.operands.length; i++) {\n    var operator = this.operators[curOperatorIndex];\n    var operand = this.operands[i];\n    switch(operator) {\n      case "plus":\n        result += operand;\n        break;\n      case "minus":\n        result -= operand;\n        break;\n      case "multiplied":\n        result *= operand;\n        break;\n      case "divided":\n        result /= operand;\n        break;\n      case "raised":\n        result = Math.pow(result, operand);\n        break;\n    }\n    curOperatorIndex++;\n  }\n  return result;\n};\n\n// Create a new object, that prototypally inherits from the Error constructor.\nfunction ArgumentError(message) {\n  this.name = "ArgumentError";\n  this.message = message || "Invalid arguments";\n}\nArgumentError.prototype = new Error();\nArgumentError.prototype.constructor = ArgumentError;	\N	f	2	1	2014-05-18 15:19:11	2014-05-18 15:19:11	172	wordy_test.js
363	23	d9192d55112cbae5780ec306	hibernating	ruby	scrabble-score	class Scrabble\n\tdef initialize(word)\n\t\t@word = word\n\tend\n\n\tdef self.score(word)\n\t\tScrabble.new(word).score\n\tend\n\n\tdef score\n\t\tunless @word.kind_of? String\n\t\t\treturn 0\n\t\tend\n\n\t\t@word.split("").inject(0) do |accumulator, character|\n\t\t letter_score(character) + accumulator\n\t\tend\n\tend\n\n\tdef letter_score(letter)\n\t\tif "AEIOULNRST".include? letter.upcase\n\t\t\t1\n\t\telsif "DG".include? letter.upcase\n\t\t\t2\n\t\telsif "BCMP".include? letter.upcase\n\t\t\t3\n\t\telsif "FHVWY".include? letter.upcase\n\t\t\t4\n\t\telsif "K" == letter.upcase\n\t\t\t5\n\t\telsif "JX".include? letter.upcase\n\t\t\t8\n\t\telsif "QZ".include? letter.upcase\n\t\t\t10\n\t\telse\n\t\t\t0\n\t\tend\n\tend\nend	\N	f	2	1	2014-01-21 12:43:54	2014-01-21 12:43:54	173	scrabble.rb
364	23	41ed4747f9be62a9df944cbe	pending	coffeescript	queen-attack	class Queens\n  constructor: (positions) ->\n    @white = (positions.white if positions?) || [0, 3]\n    @black = (positions.black if positions?) || [7, 3]\n    throw "Queens cannot share the same space" if @sameRow() and @sameColumn()\n    @board = [0..7].map -> [0..7].map -> "O"\n    @setSquare(@white, "W")\n    @setSquare(@black, "B")\n\n  setSquare: (position, piece) ->\n    row = getRow(position)\n    column = getColumn(position)\n    @board[row][column] = piece\n\n  toString: ->\n    (@board.map (row) -> row.join(" ")).join("\\n")\n\n  canAttack: ->\n    @sameRow() or @sameColumn() or @sameDiagonal()\n\n  sameRow: ->\n    getRow(@white) == getRow(@black)\n\n  sameColumn: ->\n    getColumn(@white) == getColumn(@black)\n\n  sameDiagonal: ->\n    getRow(@white) - getRow(@black) == getColumn(@white) - getColumn(@black)\n\n  getRow = (position) ->\n    position[0]\n\n  getColumn = (position) ->\n    position[1]\n\nmodule.exports.Queens = Queens	\N	f	2	1	2014-03-05 05:16:36	2014-03-05 05:16:36	174	queens.coffee
366	23	f94d8e1ad1dea28c27d7ac11	superseded	python	bob	# Copyright (c) 2013 Tim Henigan\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the "Software"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n\n"""This module is home to the Bob class."""\n\nclass Bob:\n    """Bob is a lackadaisical teenager. In conversation, his responses are\n    very limited."""\n\n    def hey(self, request):\n        """Answer 'Sure.' when asked a question.\n        Answer 'Woah, chill out!' if you yell (ALL CAPS).\n        Answer 'Fine. Be that way!' if you address him without actually saying\n        anything.\n        Answer 'Whatever.' to anything else."""\n\n        response = "Whatever."\n\n        if len(request) == 0 or request == "":\n            response = "Fine. Be that way."\n        elif request.isupper():\n            response = "Woah, chill out!"\n        elif request.rstrip().endswith("?"):\n            response = "Sure."\n\n        return response	\N	f	2	1	2014-02-03 01:12:47	2014-02-03 01:12:47	175	bob.py
369	23	3caac9841301797db9d11251	superseded	python	bob	# Author::  Tim Henigan\n# Copyright:: Copyright (c) 2013\n# License::   MIT (http://opensource.org/licenses/MIT)\n\nclass Bob:\n    """Bob is a lackadaisical teenager. In conversation, his responses are\n    very limited."""\n\n    def hey(self, input):\n        request = Request(input)\n\n        if request.is_empty():\n            response = "Fine. Be that way."\n        elif request.is_yelled():\n            response = "Woah, chill out!"\n        elif request.is_question():\n            response = "Sure."\n        else:\n            response = "Whatever."\n\n        return response\n\nclass Request:\n    """Determine characteristics of a given request"""\n\n    def __init__(self, input = ""):\n        self.request = input\n\n    def is_empty(self):\n        return (len(self.request) == 0 or self.request == "")\n\n    def is_yelled(self):\n        return self.request.isupper()\n\n    def is_question(self):\n        return self.request.rstrip().endswith("?")	\N	f	0	2	2014-04-23 11:09:13	2014-04-23 11:09:13	175	bob.py
375	23	ef7118cb9e7b6e2e240f0eec	done	clojure	phone-number	(ns phone)\n(require '[clojure.string :as string])\n\n(def invalid-number "0000000000")\n(def area-code-length 3)\n(def number-length 10)\n(def regex-invalid-characters #"[^\\d]")\n(def regex-valid-10-digits-number #"^\\d{10}$")\n(def regex-valid-11-digits-number #"^1\\d{10}$")\n(def regex-parse-groups #"(\\d{3})(\\d{3})(\\d{4})")\n(def pretty-print-format "(%s) %s-%s")\n\n(defn- sanitize [phone-number]\n  (string/replace phone-number regex-invalid-characters ""))\n\n(defn- valid-10-digits-number? [sanitized-phone-number]\n  (re-matches regex-valid-10-digits-number sanitized-phone-number))\n\n(defn- valid-11-digits-number? [sanitized-phone-number]\n  (re-matches regex-valid-11-digits-number sanitized-phone-number))\n\n(defn- strip-leading-digit [phone-number]\n  (subs phone-number 1))\n\n(defn- normalize [sanitized-phone-number]\n  (cond\n    (valid-10-digits-number? sanitized-phone-number)\n      sanitized-phone-number\n    (valid-11-digits-number? sanitized-phone-number)\n      (strip-leading-digit sanitized-phone-number)\n    :else\n      invalid-number))\n\n;; I have no idea why re-groups doesn't work here\n(defn- split-into-groups [phone-number]\n  (rest (re-find (re-matcher regex-parse-groups phone-number))))\n\n(defn number [phone-number]\n  (normalize (sanitize phone-number)))\n\n(defn area-code [number]\n  (subs number 0 area-code-length))\n\n(defn pretty-print [phone-number]\n  (apply format pretty-print-format (split-into-groups (number phone-number))))	\N	f	1	1	2014-02-10 21:52:53	2014-02-10 21:52:53	179	phone-number.clj
383	25	2976ad90f2658ace314c0af0	hibernating	python	robot-name	import random\n\nclass Robot(object):\n    _seq = None\n\n    @classmethod\n    def name_code(cls):\n        """ for each char: (number of possible values, int-to-chr conversion func) """\n        toalpha = lambda x: chr(x+65)\n        return ( (26, toalpha), \n                 (26, toalpha),\n                 (10, str),\n                 (10, str),\n                 (10, str), )\n\n    \n    @classmethod\n    def _sequence(cls):\n        if cls._seq == None:\n            #multiply bases together for max number of names\n            maxlength = reduce( lambda a, (k,v) : a * k, cls.name_code(), 1)\n            cls._seq = RandomSequence(maxlength)\n\n        return cls._seq\n\n    @classmethod\n    def _newkey(cls):\n        return cls._sequence().next()\n\n\n    @classmethod\n    def _gen_name(cls):\n        key = cls._newkey()\n\n        name_chars = []\n\n        for base, f in reversed(cls.name_code()):\n            # mod and divide starting at lowest base\n            # and call each base's conversion function\n            name_chars.append( f(key % base) )\n            key = key / base\n\n        return "".join(reversed(name_chars) )\n\n\n    def __init__(self):\n        self.reset()\n\n\n    def reset(self):\n        self.name = self.__class__._gen_name()\n\n   \nclass RandomSequence(object):\n    """ Generates a random sequence of a given length with no repeats using\n        Fisher–Yates shuffle\n        (http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle) """\n\n    def __init__(self, maxlength):\n        self.maxlength = maxlength\n\n        def swap(l, i, j): \n            t = l[i]\n            l[i] = l[j]\n            l[j] = t\n\n        self._seq = [x for x in xrange(maxlength)]\n\n        for i in xrange(len(self._seq) - 1, 0, -1):\n            swap(self._seq, i, random.randint(0, i-1) )\n\n        self._iter = iter(self._seq)\n\n    def next(self):\n        return next(self._iter)	\N	f	2	1	2014-01-16 04:54:50	2014-01-16 04:54:50	185	robot.py
395	25	d561526beb4dc6e66d6236c0	superseded	ruby	grade-school	class School\n \n  attr_reader :db\n  \n  def initialize\n    @db = {}\n  end\n\n  def add student, grade\n    grade = Integer(grade)\n    db[grade] ||= []\n    db[grade] << student\n  end\n  \n  def grade level\n    db.fetch(level) { [] }\n  end\n  \n  def sort\n    Hash[db.each { |_,students| students.sort! }.sort]\n  end\n\nend	\N	f	2	2	2014-01-21 03:04:15	2014-01-21 03:04:15	192	grade-school.rb
398	25	5f61c848d8fb6540756b64ca	superseded	javascript	beer-song	module.exports = (function() {\n  function BottleCollection(number) {\n    this.number = number;\n    this.status = "" + this.number + " bottles of beer";\n    this.action = "Take one down and pass it around";\n  };\n\n  var bottles = {\n    "-1": new BottleCollection(99),\n    "0": {\n      "action": "Go to the store and buy some more",\n      "status": "no more bottles of beer"\n    },\n    "1": {\n      "action": "Take it down and pass it around",\n      "status": "1 bottle of beer"\n    },\n  };\n\n  function verseForNumber(number) {\n    var indexed = bottles[number.toString()];\n    if(typeof indexed != 'undefined') {\n      return indexed;\n    } else {\n      return new BottleCollection(number);\n    }\n  };\n\n  function toTitleCase(str) {\n    return str.replace(/^\\w/, function(txt){\n      return txt.charAt(0).toUpperCase();\n    });\n  }\n\n  return {\n    verse: function(number) {\n      var current = verseForNumber(number),\n          next = verseForNumber(number - 1),\n          string;\n      string = toTitleCase(current.status) + " on the wall, "\n      string += current.status + ".\\n"\n      string += current.action + ", "\n      string += next.status + " on the wall.\\n"\n      return string;\n    },\n    sing: function(start, finish) {\n      var verses = [];\n      finish || (finish = 0);\n      for(var i = start; i >= finish; i--) {\n        verses.push(this.verse(i));\n      };\n\n      return verses.join("\\n");\n    }\n  };\n})();	\N	f	2	1	2014-04-02 16:46:04	2014-04-02 16:46:04	193	beer-song.js
405	25	e5935577faddeb3c13db1501	superseded	ruby	nucleotide-count	class DNA\n  attr_reader :nucleotides\n\n  Nucleotides_Whitelist = ["B", "D", "E", "F", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "V", "W", "Z", "G", "C", "A", "T", "U"]\n\n  def initialize(nucleotides)\n    @nucleotides = nucleotides.split("")\n  end\n\n  def count(nucleotide)\n    raise ArgumentError unless Nucleotides_Whitelist.include? nucleotide\n    return 0 unless ["G","C","A","T"].include? nucleotide\n    nucleotide_counts[nucleotide]\n  end\n\n  def nucleotide_counts\n    answer = {"A"=>0, "T"=>0, "C"=>0, "G"=>0}\n    nucleotides.each do |nucleotide|\n      answer[nucleotide] += 1\n    end\n    answer\n  end\nend	\N	f	3	3	2014-03-24 22:02:53	2014-03-24 22:02:53	195	nucleotide-count.rb
406	25	dd2d14106ed7d58753df8ab1	hibernating	ruby	word-count	# To change this template, choose Tools | Templates\n# and open the template in the editor.\n\nclass Phrase\n  \n  def initialize(text)\n    @text=text.downcase\n  end\n  \n  def word_count\n    pom = Hash.new\n    punctuationcaust.split(" ").each {|word| \n      pom[word] =  if (pom[word]==nil)\n                    1\n                   else\n                    pom[word]+1\n                   end\n    }\n    pom\n  end\n\n  def punctuationcaust\n    pure=""\n    (0..@text.length).each { |i| \n      if (should_live?(@text[i])) \n        pure.concat(@text[i]) \n      else \n        pure.concat(" ")\n      end\n    }\n    pure    \n  end\n  \n  def should_live?(char)\n    if ((char =~ /[a-zA-Z0-9]/)!=nil or char=="'" or char==" ")\n      return true\n    else\n      return false\n    end\n  end\n  \nend	\N	f	4	1	2014-03-17 04:44:53	2014-03-17 04:44:53	196	word-count.rb
418	20	cc3c1ad312c8f8e431636270	superseded	javascript	rna-transcription	module.exports = DNA;\n\n\nfunction DNA(strand) {\n  this.strand = strand;\n}\n\nDNA.prototype.toRNA = function() {\n  return substitute(this.strand, Nucleotides.thymidine, Nucleotides.uracil);\n};\n\n\nfunction substitute(string, from, to) {\n  return string.replace(new RegExp(escapeRegExp(from), "g"), to);\n}\n\nfunction escapeRegExp(string) {\n  // http://stackoverflow.com/a/3561711/6962\n  return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\n\nvar Nucleotides = {\n  thymidine: "T",\n  uracil: "U"\n}	\N	f	2	1	2014-05-03 20:04:21	2014-05-03 20:04:21	203	rna-transcription.js
453	5	7af5bcb570783bcef15692ed	superseded	clojure	robot-name	(declare random-robot-name)\n\n(defn robot [] (atom (random-robot-name)))\n\n(defn robot-name [robot] @robot)\n\n(defn reset-name [robot] \n    (reset! robot (random-robot-name)))\n\n(def ^:private from-zero (int \\0))\n(def ^:private to-nine (int \\9))\n(def ^:private NUMBERS (map char (range from-zero to-nine)))\n\n(def ^:private from-A (int \\A))\n(def ^:private to-Z (int \\Z))\n(def ^:private UC (map char (range from-A to-Z)))\n\n(defn- random [collection]\n    (nth collection (rand (count collection))))\n\n(defn- random-char [] (random UC))\n(defn- random-number [] (random NUMBERS))\n\n(defn- random-robot-name []\n     (str \n        (apply str (take 2 (repeatedly random-char))) \n        (apply str (take 3 (repeatedly random-number)))))	\N	f	1	4	2014-02-28 01:51:03	2014-02-28 01:51:03	221	robot-name.clj
460	5	701028e9f3539a9c77f0c9db	done	python	space-age	from decimal import *\nclass SpaceAge:\n    """ SpaceAge calculates someones age on different planets """\n\n    EARTH = 31557600 \n    MERCURY = 0.2408467 \n    VENUS = 0.61519726\n    MARS = 1.8808158 \n    JUPITER = 11.862615 \n    SATURN = 29.447498 \n    URANUS = 84.016846 \n    NEPTUNE = 164.79132\n\n    def __init__(self, age):\n        self.seconds = Decimal(age)\n\n    def on_earth(self):\n        return round(self.seconds / self.EARTH, 2)\n\n    def on_mercury(self):\n        return round(self.on_earth() / self.MERCURY, 2)\n\n    def on_venus(self):\n        # Rounding error, needed to use more precise value\n        earth = self.seconds / self.EARTH\n        return round(earth / Decimal(self.VENUS), 2)\n\n    def on_mars(self):\n        return round(self.on_earth() / self.MARS, 2)\n\n    def on_jupiter(self):\n        return round(self.on_earth() / self.JUPITER, 2)\n\n    def on_saturn(self):\n        return round(self.on_earth() / self.SATURN, 2)\n\n    def on_uranus(self):\n        return round(self.on_earth() / self.URANUS, 2)\n\n    def on_neptune(self):\n        return round(self.on_earth() / self.NEPTUNE, 2)	\N	f	1	1	2014-03-20 20:38:31	2014-03-20 20:38:31	225	space_age.py
463	5	29b155e716f6014097b9d717	superseded	ruby	rna-transcription	class DNA\n  def initialize(dna_chain)\n    @dna = AcidChain.new(dna_chain)\n  end\n\n  def to_rna\n    @dna.to_rna\n  end\nend\n\nclass AcidChain\n  def initialize(chain)\n    @chain = chain.to_s\n  end\n\n  def to_rna\n    @chain.gsub("T","U")\n  end\nend	\N	f	1	2	2014-01-25 11:01:50	2014-01-25 11:01:50	227	rna-transcription.rb
464	5	fcb16a34f09be26c7ba85170	superseded	ruby	rna-transcription	class DNA\n  def initialize(dna_chain)\n    @dna = AcidChain.new(dna_chain)\n  end\n\n  def to_rna\n    @dna.to_rna.to_s\n  end\nend\n\nclass AcidChain\n  def initialize(chain)\n    @chain = chain.to_s.split("").flat_map { |acid| Acid.new(acid) }\n  end\n\n  def to_s\n    @chain.join("")\n  end\n\n  def inspect\n    to_s\n  end\n\n  def transform_chain(method)\n    AcidChain.new( @chain.map { |acid| acid.send(method) }.join("") )\n  end\n\n  def to_rna\n    transform_chain(:to_rna)\n  end\n\n  def to_dna\n    transform_chain(:to_dna)\n  end\n\n  class Acid\n    def initialize(one_acid)\n      @acid = one_acid\n    end\n\n    def to_rna\n      return Acid.new("U") if @acid == "T"\n      self\n    end\n\n    def to_dna\n      return Acid.new("T") if @acid == "U"\n      self\n    end\n\n    def valid?\n      ["C","G","A","T","U"].include?(@acid)\n    end\n\n    def to_s\n      @acid.to_s\n    end\n\n    def inspect\n      to_s\n    end\n\n  end\nend	\N	f	0	1	2014-02-17 18:14:23	2014-02-17 18:14:23	227	rna-transcription.rb
475	5	23e4fdf8dfa1b4aa99afa48c	superseded	ruby	space-age	class SpaceAge\n  SECONDS_PER_EARTH_YEAR = 365.25 * 24 * 60 * 60\n\n  ORBITAL_PERIODS = {\n    earth:   1.0,\n    mercury: 0.2408467,\n    venus:   0.61519726,\n    mars:    1.8808158,\n    jupiter: 11.862615,\n    saturn:  29.447498,\n    uranus:  84.016846,\n    neptune: 164.79132,\n  }\n\n  attr_reader :seconds\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  ORBITAL_PERIODS.keys.each do |planet|\n    define_method("on_#{planet}") do  # def on_earth\n      on(planet)                      #   on(:earth)\n    end                               # end\n  end\n\n  private\n\n  def on(planet)\n    (seconds / seconds_per_year(planet)).round(2)\n  end\n\n  def seconds_per_year(planet)\n    SECONDS_PER_EARTH_YEAR * ORBITAL_PERIODS.fetch(planet)\n  end\nend	\N	f	3	1	2014-05-20 04:50:20	2014-05-20 04:50:20	232	space-age.rb
487	6	285bcb407747b336643fbf42	pending	python	bob	class Bob(object):\n    def __init__(self):\n        pass\n\n    def _is_yelled(self, word):\n        '''\n        Description: if the characters in the input word are mostly capital,\n        return True.  Else, return False\n        Note: first, get rid of the characters that's not a letter\n        '''\n\n        return word == word.upper() and word != word.lower()\n\n    def _is_asked(self, word):\n        '''\n        return True if being asked a question\n        '''\n\n        return word.endswith('?')\n\n    def _is_greeted_without_words(self, word):\n        '''\n        return True if being greeted, but didn't say anything\n        '''\n\n        return (word is None) or (word.strip() == '')\n\n    def hey(self, word):\n\n        # remove starting space, until leaving one space:\n        while word.startswith(' '):\n            new_word = word[1:]\n            word = new_word\n            if word == ' ':\n                break\n\n        if self._is_yelled(word):\n            return 'Woah, chill out!'\n        elif self._is_asked(word):\n            return 'Sure.'\n        elif self._is_greeted_without_words(word):\n            return 'Fine. Be that way!'\n        else:\n            return 'Whatever.'	\N	f	0	1	2013-11-29 02:08:54	2013-11-29 02:08:54	236	bob.py
489	6	06e16864cc2826efb56195cf	done	ruby	anagram	class Anagram\n\n  def initialize(word, comparator = SortedCharacterList)\n    @comparator = comparator\n    @intial_word = comparator.new(word)\n  end\n\n  def match(possible_anagrams)\n    possible_anagrams.select { |possible_anagram| anagram?(possible_anagram) }\n  end\n\n  private\n\n  attr_reader :comparator, :intial_word\n\n  def anagram?(possible_anagram)\n    intial_word == comparator.new(possible_anagram)\n  end\nend\n\nclass SortedCharacterList\n  include Comparable\n\n  def initialize(word_to_sort)\n    @word_to_sort = word_to_sort\n  end\n\n  def <=>(other)\n    characters <=> other.characters\n  end\n\n  def characters\n    word_to_sort.downcase.chars.sort\n  end\n\n  private\n\n  attr_reader :word_to_sort\nend\n\nclass CharacterHistogram\n  include Comparable\n\n  def initialize(word_to_count)\n    @word_to_count = word_to_count\n  end\n\n  def <=>(other)\n    character_count <=> other.character_count\n  end\n\n  def character_count\n    word_to_count.downcase.chars.each_with_object(Hash.new(0)){|char, counts| counts[char] += 1 }\n  end\n\n  private\n\n  attr_reader :word_to_count\nend	\N	f	2	2	2013-11-16 07:35:10	2013-11-16 07:35:10	238	anagram.rb
501	6	d068b845aacfcbaa56469c51	superseded	javascript	bob	module.exports = (function(){\n  var Bob = function() {};\n\n  Bob.prototype.hey = function(greeting) {\n    if (isShouting(greeting)) {\n      return "Woah, chill out!";\n    }\n    if (isAsking(greeting)) {\n      return "Sure.";\n    }\n    if (isSilence(greeting)) {\n      return "Fine. Be that way!";\n    }\n    return "Whatever.";\n  };\n\n  var isShouting = function(greeting) {\n    return !hasLowerCase(greeting) && /[A-Z]{2,}/.test(greeting);\n  };\n\n  var hasLowerCase = function(greeting) {\n    return greeting.toUpperCase() != greeting;\n  };\n\n  var isAsking = function(greeting) {\n    return /\\?$/.test(greeting);\n  };\n\n  var isSilence = function(greeting) {\n    return /^\\s*$/.test(greeting);\n  };\n\n return Bob;\n})();	\N	f	3	2	2014-03-09 16:30:07	2014-03-09 16:30:07	246	bob.js
502	6	0300362bce61a91a5a219c24	pending	javascript	bob	module.exports = (function(){\n\n  function hasLowerCase(greeting) {\n    return greeting.toUpperCase() != greeting;\n  }\n\n  function Response(type, answer) {\n    this.type = type;\n    this.answer = answer;\n  }\n\n  var shoutResponse = new Response(\n    function(greeting) {\n      return !hasLowerCase(greeting) && /[A-Z]{2,}/.test(greeting);\n    },\n    "Woah, chill out!"\n  );\n\n  var questionResponse = new Response(\n    function(greeting) {\n      return /\\?$/.test(greeting);\n    },\n    "Sure."\n  );\n\n  var silenceResponse = new Response(\n    function(greeting) {\n      return /^\\s*$/.test(greeting);\n    },\n    "Fine. Be that way!"\n  );\n\n  var Bob = function() {\n    this.responses = [shoutResponse, questionResponse, silenceResponse];\n  };\n\n  Bob.prototype.hey = function(greeting) {\n    for (var i = 0; i < this.responses.length; i++) {\n      response = this.responses[i];\n      if (response.type(greeting)) {\n        return response.answer;\n      }\n    }\n\n    return "Whatever.";\n  };\n\n  return Bob;\n})();	\N	f	5	3	2014-03-24 01:36:17	2014-03-24 01:36:17	246	bob.js
517	8	f3d35726c635497d115c8b67	done	elixir	roman-numerals	defmodule Roman do\n  @doc """\n  Convert the number to a roman number.\n  """\n100\n  @values [{1000, "M"}, {900, "CM"}, {500, "D"}, {400, "CD"},\n  \t\t   {100, "C"}, {90, "XC"}, {50, "L"}, {40, "XL"},\n  \t\t   {10, "X"}, {9, "IX"}, {5, "V"}, {4, "IV"}, {1, "I"}]\n\n  @spec numerals(pos_integer) :: String.t\n  def numerals(number) do\n    translate(number, @values)\n  end\n\n  defp translate(number, values) do\n    case values do\n      [] -> ""\n      [{arabic, _}|t] when arabic > number -> translate(number, t)\n      val = [{arabic, roman}|_]\t-> roman <> translate(number - arabic, val)\n    end\n  end\nend	\N	f	3	1	2014-05-18 06:49:28	2014-05-18 06:49:28	256	roman.exs
518	8	f3404063678d5469bd30da85	pending	python	beer-song	class Beer(object):\n\n  def verse(self, verse_num):\n    if verse_num > 2:\n      return ('{0} bottles of beer on the wall, {0} bottles of beer.\\n'\n      'Take one down and pass it around, {1} bottles of beer on the wall.\\n').format(verse_num, verse_num - 1)\n    elif verse_num == 2:\n      return ('{0} bottles of beer on the wall, {0} bottles of beer.\\n'\n      'Take one down and pass it around, {1} bottle of beer on the wall.\\n').format(verse_num, verse_num - 1)\n    elif verse_num == 1:\n      return '1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n'\n    else:\n      return 'No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n'\n\n    \n  def sing(self, high_verse, low_verse = 0):\n    verses = range(low_verse, high_verse + 1)\n    \n    verses.reverse()\n\n    verses = map(self.verse, verses)\n\n    return reduce(lambda a, b: a + '\\n' + b, verses) + "\\n"\n    	\N	f	0	1	2014-05-17 03:42:49	2014-05-17 03:42:49	257	beer.py
527	8	b099421708888405e1029380	superseded	go	anagram	package anagram\n\nimport (\n\t"fmt"\n\t"sort"\n\t"strings"\n)\n\nfunc Detect(subject string, candidates []string) []string {\n\tlowercaseSubject := strings.ToLower(subject)\n\tnormalized := normalize(lowercaseSubject)\n\tresult := []string{}\n\tfor _, candidate := range candidates {\n\t\tlowercaseCandidate := strings.ToLower(candidate)\n\t\tif subject == lowercaseCandidate {\n\t\t\tcontinue\n\t\t}\n\t\tif normalized == normalize(lowercaseCandidate) {\n\t\t\tresult = append(result, lowercaseCandidate)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc normalize(subject string) string {\n\truneCounts := map[string]int{}\n\tkeys := []string{}\n\tfor _, Rune := range subject {\n\t\tstr := string(Rune)\n\t\truneCounts[str] += 1\n\t\tif runeCounts[str] == 1 {\n\t\t\tkeys = append(keys, str)\n\t\t}\n\t}\n\tsort.Strings(keys)\n\tresult := ""\n\tfor _, key := range keys {\n\t\tresult = fmt.Sprintf("%s[%s]=%d;", result, key, runeCounts[key])\n\t}\n\treturn result\n}	\N	f	3	1	2014-05-22 11:11:58	2014-05-22 11:11:58	263	anagram.go
529	8	fe486f710e99815328f32d5a	superseded	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (toUpper, isAlpha, isSpace)\n\nresponseFor :: String -> String\nresponseFor message\n  | all isSpace message = "Fine. Be that way!"\n  | [toUpper c | c <- message] == message && any isAlpha message = "Woah, chill out!"\n  | last message == '?' = "Sure."\n  | otherwise = "Whatever."	\N	f	3	1	2014-05-19 11:06:45	2014-05-19 11:06:45	265	Bob.hs
530	8	3708c8df32ef1f16f1fe181a	done	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char (toUpper, isAlpha, isSpace)\nimport Data.List (isSuffixOf)\n\nresponseFor :: String -> String\nresponseFor message\n  | all isSpace message = "Fine. Be that way!"\n  | map toUpper message == message && any isAlpha message = "Woah, chill out!"\n  | "?" `isSuffixOf` message = "Sure."\n  | otherwise = "Whatever."	\N	f	2	2	2014-05-24 15:06:05	2014-05-24 15:06:05	265	Bob.hs
534	8	30c010735eaa0f9bac3831d9	pending	javascript	beer-song	var Beer = {\n  verse: function (numBottles) {\n    var line1 = "{0} {1} of beer on the wall, {2} {1} of beer.\\n"\n    var line2A = "Take {0} down and pass it around, {1} {2} of beer on the wall.\\n";\n    var line2B = "Go to the store and buy some more, 99 bottles of beer on the wall.\\n";\n\n    if (numBottles === 0) {\n      return line1.format("No more", "bottles", "no more") + line2B;\n    }\n\n    return line1.format(numBottles,\n                        numBottles === 1? "bottle": "bottles",\n                        numBottles) +\n           line2A.format(numBottles === 1? "it" : "one",\n                        numBottles-1 === 0 ? "no more" : numBottles-1,\n                        numBottles-1 === 1 ? "bottle" : "bottles");\n  },\n\n  sing: function (verseStart, verseEnd) {\n    if (typeof verseEnd === 'undefined'|| verseEnd > verseStart) {\n      verseEnd = 0;\n    }\n    var song = "";\n    for (var start = verseStart; start >= verseEnd; start--) {\n      song += this.verse(start);\n      if (start !== verseEnd) {\n        song += "\\n";\n      }\n    }\n    return song;\n  }\n};\n\n// First, checks if it isn't implemented yet.\nif (!String.prototype.format) {\n  String.prototype.format = function() {\n    var args = arguments;\n    return this.replace(/{(\\d+)}/g, function(match, number) {\n      return typeof args[number] != 'undefined'\n        ? args[number]\n        : match\n      ;\n    });\n  };\n}	\N	f	5	1	2014-05-16 23:58:06	2014-05-16 23:58:06	267	beer-song_test.js
578	10	33a0951cfc009d041c1d4c6d	done	javascript	bob	var Bob = function() {\n  var kWhatever = "Whatever."\n  var kChill = "Woah, chill out!"\n  var kSure = "Sure."\n  var kBeThatWay = "Fine. Be that way!"\n  var xQuestion = /\\?$/\n  var xLettered = /[A-Za-z]/\n  var xNonSilent = /\\S/\n  \n  this.hey = function( message ){\n    return this.responseFor( message );\n  };\n\n  this.responseFor = function( message ){\n    if (this.isSilent( message ))\n      return kBeThatWay;\n\n    if (this.isShouted( message ))\n      return kChill;\n\n    if (this.isQuestion( message ))\n      return kSure;\n    \n    return kWhatever;\n  };\n\n  this.isShouted = function( message ){\n    if ( message == message.toUpperCase() )\n      if ( xLettered.test( message ) )\n        return true;\n      else\n        return false;\n    else\n      return false;\n  };\n\n  this.isQuestion = function( message ){\n    if ( xQuestion.test( message ) )\n      return true;\n    else\n      return false;\n  };\n\n  this.isSilent = function( message ){\n    if ( xNonSilent.test( message ) )\n      return false\n    else\n      return true;\n  };\n};\n\nmodule.exports = Bob;	\N	f	4	1	2014-02-16 21:18:04	2014-02-16 21:18:04	285	bob.js
541	9	99beeb00f7fcb9ea4c73adcf	done	haskell	beer-song	module Beer\n    ( verse\n    , sing\n    )\nwhere\n\nimport Text.Printf\nimport Data.Char\nimport Data.Function\n\nsing :: Int -> Int -> String\nsing x y = (unlines . map verse) [x,x-1..y]\n\nverse :: Int -> String\nverse x = unlines [ firstLine x\n                  , secondLine x\n                  ]\n\n-- | for sake of readability, should be invisible outside the module\n_onTheWall, _end :: Bool\n_onTheWall       = True\n_end             = False\n\n-- | construct "<n> bottle(s) of beer (on the wall)"\nxBottleOfBeer :: Int -> Bool -> String\nn `xBottleOfBeer` otw = unwords [nStr, bottles,"of beer" , otwS]\n    where\n        nStr =    if n == 0 then "no more" else show n\n        bottles = if n == 1 then "bottle"  else "bottles"\n        otwS =    if otw then "on the wall" else ""\n\n{-# ANN makeSentence "HLint: ignore Eta reduce" #-}\n-- | construct a sentence from two parts\nmakeSentence :: String -> String -> String\nmakeSentence (fstH : fstT) sndL =\n    (printf "%s, %s." `on` stripR) fstL' sndL\n    -- ^ create the sentence on stripped arguments\n    where\n        fstL' = toUpper fstH : fstT\n        -- ^ take care of the first char in sentences\n        stripR = reverse . dropWhile isSpace . reverse\n        -- ^ might have tailing zeros, remove it.\n\nfirstLine :: Int -> String\nfirstLine x =\n    makeSentence\n        (x `xBottleOfBeer` _onTheWall)\n        (x `xBottleOfBeer` _end)\n\nsecondLine :: Int -> String\nsecondLine 0 =\n    makeSentence\n        "Go to the store and buy some more"\n        (99 `xBottleOfBeer` _onTheWall)\nsecondLine 1 =\n    makeSentence\n        "Take it down and pass it around"\n        (0 `xBottleOfBeer` _onTheWall)\nsecondLine x =\n    makeSentence\n        "Take one down and pass it around"\n        ((x-1) `xBottleOfBeer` _onTheWall)	\N	f	1	1	2013-12-09 15:35:52	2013-12-09 15:35:52	270	Beer.hs
552	9	0614ca7caac928020e3cd822	done	python	octal	def Base(base_, name_):\n    all_digits = "0123456789" + "".join(chr(i) for i in xrange(ord('a'), ord('z')+1))\n    if base_ > len(all_digits):\n        raise ValueError("Cannot create a numbering base {}: not enough digits".format(base_))\n\n    class Base(object):\n        digits = all_digits[:base_]\n        base = base_\n        name = name_\n\n        def __init__(self, s):\n            self.num = s\n            acc = 0\n            b = self.base\n            for sd in self.num:\n                try:\n                    d = self.digits.index(sd)\n                    acc *= b\n                    acc += d\n                except ValueError:\n                    raise ValueError("Invalid {} digit: {}".format(self.name, sd))\n            self.value = acc\n\n        def to_decimal(self):\n            return self.value\n\n    return Base\n\nclass Octal(Base(8, 'octal')):\n    pass	\N	f	1	1	2014-03-26 13:58:14	2014-03-26 13:58:14	273	octal.py
568	9	34b3d0251c88741da6ae18e0	superseded	elixir	bob	defmodule Teenager do\n  def hey(input) do\n    cond do\n      silence?(input) ->\n        "Fine. Be that way!"\n      question?(input) ->\n        "Sure."\n      shouting?(input) ->\n        "Woah, chill out!"\n      true ->\n        "Whatever."\n    end\n  end\n\n  defp shouting?(string) do\n    contains_letters?(string) and String.upcase(string) == string\n  end\n\n  defp contains_letters?(string) do\n    Regex.match?(%r/[^1-9,\\.\\s]+/, string)\n  end\n\n  defp question?(string) do\n    Regex.match?(%r/\\?+$/, string)\n  end\n\n  defp silence?(string) do\n    Regex.match?(%r/^\\s*$/, string)\n  end\nend	\N	f	0	1	2013-12-06 16:16:50	2013-12-06 16:16:50	281	bob.exs
571	9	9bfe1990b1a965d5b05070c3	superseded	python	bob	# Author::  Tim Henigan\n# Copyright:: Copyright (c) 2013\n# License::   MIT (http://opensource.org/licenses/MIT)\n\nclass Bob:\n    """Bob is a lackadaisical teenager. In conversation, his responses are\n    very limited."""\n\n    def hey(self, request):\n        r = Request(request)\n\n        if r.is_empty():\n            response = "Fine. Be that way."\n        elif r.is_yelled():\n            response = "Woah, chill out!"\n        elif r.is_question():\n            response = "Sure."\n        else:\n            response = "Whatever."\n\n        return response\n\n\nclass Request:\n    """Determine characteristics of a given request"""\n\n    def __init__(self, request):\n        if request is None:\n            self.request = ""\n        else:\n            self.request = request.rstrip()\n\n    def is_empty(self):\n        return not self.request\n\n    def is_yelled(self):\n        return self.request.isupper()\n\n    def is_question(self):\n        return self.request.endswith("?")	\N	f	1	4	2013-11-22 10:44:22	2013-11-22 10:44:22	283	bob.py
572	9	5270ff0b3d60378ad320e363	superseded	python	bob	# Copyright (c) 2013 Tim Henigan\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the "Software"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n\n"""This module is home to the Bob class."""\n\nclass Bob:\n    """Bob is a lackadaisical teenager. In conversation, his responses are\n    very limited."""\n\n    def hey(self, request):\n        """Answer 'Sure.' when asked a question.\n        Answer 'Woah, chill out!' if you yell (ALL CAPS).\n        Answer 'Fine. Be that way!' if you address him without actually saying\n        anything.\n        Answer 'Whatever.' to anything else."""\n\n        response = "Whatever."\n\n        if len(request) == 0 or request == "":\n            response = "Fine. Be that way."\n        elif request.isupper():\n            response = "Woah, chill out!"\n        elif request.rstrip().endswith("?"):\n            response = "Sure."\n\n        return response	\N	f	1	1	2013-12-20 06:04:00	2013-12-20 06:04:00	283	bob.py
575	9	e67d7b3f378c89d12f558cc6	superseded	python	bob	# Author::  Tim Henigan\n# Copyright:: Copyright (c) 2013\n# License::   MIT (http://opensource.org/licenses/MIT)\n\nclass Bob:\n    """Bob is a lackadaisical teenager. In conversation, his responses are\n    very limited."""\n\n    def hey(self, input):\n        request = Request(input)\n\n        if request.is_empty():\n            response = "Fine. Be that way."\n        elif request.is_yelled():\n            response = "Woah, chill out!"\n        elif request.is_question():\n            response = "Sure."\n        else:\n            response = "Whatever."\n\n        return response\n\nclass Request:\n    """Determine characteristics of a given request"""\n\n    def __init__(self, input = ""):\n        self.request = input\n\n    def is_empty(self):\n        return (len(self.request) == 0 or self.request == "")\n\n    def is_yelled(self):\n        return self.request.isupper()\n\n    def is_question(self):\n        return self.request.rstrip().endswith("?")	\N	f	0	2	2014-04-22 21:53:32	2014-04-22 21:53:32	283	bob.py
586	10	da8f6e1fe1d185d0f911a5f7	done	ruby	anagram	class Anagram\n\n  class Word\n    def initialize(str)\n      @str = str\n      @downcase_str = str.downcase\n      @sorted_str = sort_chars(str)\n    end\n\n    def is_anagram_of?(str)\n      !is_same?(str) && @sorted_str == sort_chars(str)\n    end\n\n    def is_same?(str)\n      @downcase_str == str.downcase\n    end\n\n    def sort_chars(str)\n      str.downcase.chars.sort.join\n    end\n  end\n\n\n  def initialize(chars)\n    @word = Word.new(chars)\n  end\n\n  def match(possible_anagrams)\n    possible_anagrams.select do |possibility|\n      @word.is_anagram_of?(possibility)\n    end\n  end\n\nend	\N	f	4	1	2014-03-29 08:25:53	2014-03-29 08:25:53	290	anagram.rb
593	10	ae1d49d1988a004e0270552c	superseded	python	bob	class Bob():\n    def __init__(self):\n        self.responses = {\n            "shouting": "Woah, chill out!",\n            "question": "Sure.",\n            "silence": "Fine. Be that way!",\n            "default": "Whatever."        \n            }\n\n    def hey(self, message):\n        if message == None or len(message.strip()) == 0:\n            return self.responses["silence"]\n\n        elif message == message.upper():\n            return self.responses["shouting"]\n\n        elif len(message) == 0:\n            return self.responses["silence"]\n\n        elif message[-1] == "?":\n            return self.responses["question"]\n\n        else:\n            return self.responses["default"]	\N	f	0	1	2014-04-12 12:43:23	2014-04-12 12:43:23	293	bob.py
601	10	4ba6dd3dc83171bfc4b83ffb	superseded	ruby	space-age	class SpaceAge\r\n    attr_reader :seconds\r\n    SecondsInEarthYear = 31557600.0\r\n    @@seconds_in_year = {\r\n        "earth" => SecondsInEarthYear,\r\n        "mercury" => 0.2408467 * SecondsInEarthYear,\r\n        "venus" => 0.61519726 * SecondsInEarthYear, \r\n        "mars" => 1.8808158 * SecondsInEarthYear,\r\n        "jupiter" => 11.862615 * SecondsInEarthYear,\r\n        "saturn" => 29.447498 * SecondsInEarthYear,\r\n        "uranus" => 84.016846 * SecondsInEarthYear,\r\n        "neptune" => 164.79132 * SecondsInEarthYear,\r\n    }\r\n\r\n    def initialize(seconds)\r\n        @seconds = seconds\r\n    end\r\n\r\n    @@seconds_in_year.keys.each do |planet|\r\n        define_method ("on_" + planet).to_sym do\r\n            on planet\r\n        end\r\n    end\r\n\r\n    private\r\n\r\n    def on(planet)\r\n        (@seconds / @@seconds_in_year[planet]).round(2)\r\n    end\r\n\r\nend	\N	f	3	1	2014-04-02 23:15:36	2014-04-02 23:15:36	296	space-age.rb
613	11	bd76f92c239a2304d8ea88ae	superseded	ruby	bob	class Bob\n\n  def hey(remark)\n    case\n    when silence?(remark)\n      "Fine. Be that way!"\n    when all_caps?(remark)\n      "Woah, chill out!"\n    when remark.end_with?('?')\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  private\n\n  def silence?(remark)\n    remark.strip.empty?\n  end\n\n  def all_caps?(remark)\n    !remark.match(/\\p{Lower}/)\n  end\n\nend	\N	f	3	1	2014-02-08 18:14:14	2014-02-08 18:14:14	304	bob.rb
616	11	662786526d09d43b387d1b81	hibernating	haskell	secret-handshake	{-# LANGUAGE TypeSynonymInstances, FlexibleInstances #-}\nmodule SecretHandshake (handshake) where\n\n\nimport Data.List\nimport Data.Maybe\nimport Data.Maybe.HT\n\n\nclass Binary a where\n  toBinary :: a -> [Bool]\n\n\ninstance Binary Int where\n  toBinary = unfoldr (\\n -> toMaybe (n /= 0) (odd n, n `quot` 2))\n\n\ninstance Binary String where\n  toBinary = reverse . fromMaybe [] . foldr sToB (Just [])\n    where\n      sToB '0' n = fmap (False:) n\n      sToB '1' n = fmap (True:) n\n      sToB _   _ = Nothing\n\n\nhandshake :: (Binary a) => a -> [String]\nhandshake h =\n  if (not $ null $ preHandshake) && (last preHandshake) == "reverse" then\n    tail $ reverse preHandshake\n  else\n    preHandshake\n  where\n    preHandshake = map fst $ filter snd $ zip ["wink", "double blink", "close your eyes", "jump", "reverse"] (toBinary h)	\N	f	2	1	2014-02-15 00:43:02	2014-02-15 00:43:02	306	SecretHandshake.hs
624	11	b5a7df256ba2a9d515ddbe16	done	ruby	meetup	class Meetup\n\n  WEEKDAYS = %w{monday tuesday wednesday thursday friday saturday sunday}\n\n  def initialize(month, year)\n    @month_days = (Date.new(year, month, 1)..Date.new(year, month, -1)).to_a\n  end\n\n  def teenths\n    @month_days[12, 18]\n  end\n\n  WEEKDAYS.each do |weekday|\n    predicate = "#{weekday}?".to_sym\n\n    define_method(weekday.sub('day', 'teenth')) do\n      teenths.find(&predicate)\n    end\n\n    %w|first second third fourth|.each_with_index do |position, index|\n      define_method("#{position}_#{weekday}") do\n        @month_days.select(&predicate)[index]\n      end\n    end\n\n    define_method("last_#{weekday}") do\n      @month_days.select(&predicate).last\n    end\n  end\nend	\N	f	2	2	2014-02-07 21:41:32	2014-02-07 21:41:32	310	meetup.rb
628	11	e68ce3a9bca04d4917c7a7f2	hibernating	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    song = ""\n    number.downto(to) { |i| song << verse(i) << "\\n" }\n    song\n  end\n\n  def verse(number)\n    first_line_in_verse(number) + second_line_in_verse(number)\n  end\n\n  private\n    def bottles_string(number_of_bottles, beginning_of_line = false)\n      case number_of_bottles\n      when -1\n        "99 bottles"\n      when 0\n        str = "no more bottles"\n        str.capitalize! if beginning_of_line\n        str\n      when 1\n        "1 bottle"\n      else\n        "#{number_of_bottles} bottles"\n      end\n    end\n\n    def action_string(number_of_bottles)\n      take_down = nil\n      case number_of_bottles\n      when 0\n        action_string = "Go to the store and buy some more"\n      when 1\n        take_down = "it"\n      else\n        take_down = "one"\n      end\n      action_string ||= "Take #{take_down} down and pass it around" unless take_down.nil?\n      action_string\n    end\n\n    def first_line_in_verse(number)\n      "#{bottles_string(number, true)} of beer on the wall, #{bottles_string(number)} of beer.\\n"\n    end\n\n    def second_line_in_verse(number)\n      "#{action_string(number)}, #{bottles_string(number - 1)} of beer on the wall.\\n"\n    end\nend	\N	f	0	6	2014-01-27 21:35:22	2014-01-27 21:35:22	313	beer-song.rb
630	11	722371670c7910c97c62e8a6	superseded	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    song = ""\n    number.downto(to) { |i| song << verse(i) << "\\n" }\n    song\n  end\n\n  def verse(number)\n    first_line_in_verse(number) + second_line_in_verse(number)\n  end\n\n  private\n    def bottles_string(number_of_bottles, beginning_of_line = false)\n      case number_of_bottles\n      when -1\n        "99 bottles"\n      when 0\n        first_letter = "n"\n        first_letter.upcase! if beginning_of_line\n        "#{first_letter}o more bottles"\n      when 1\n        "1 bottle"\n      else\n        "#{number_of_bottles} bottles"\n      end\n    end\n\n    def action_string(number_of_bottles)\n      take_down = nil\n      case number_of_bottles\n      when 0\n        action_string = "Go to the store and buy some more"\n      when 1\n        take_down = "it"\n      else\n        take_down = "one"\n      end\n      action_string ||= "Take #{take_down} down and pass it around" unless take_down.nil?\n      action_string\n    end\n\n    def first_line_in_verse(number)\n      "#{bottles_string(number, true)} of beer on the wall, #{bottles_string(number)} of beer.\\n"\n    end\n\n    def second_line_in_verse(number)\n      "#{action_string(number)}, #{bottles_string(number - 1)} of beer on the wall.\\n"\n    end\nend	\N	f	3	5	2014-02-21 19:40:23	2014-02-21 19:40:23	313	beer-song.rb
1387	34	3553c148a54e4719e221c672	superseded	ruby	sieve	class Sieve\n  FIRST = 2\n  def initialize(max)\n    @max = max\n  end\n\n  def primes\n    @primes ||= sieve (FIRST..@max).to_a, FIRST\n  end\n\n  def sieve(list, start)\n    while start \n      list.each { |n| n = 0 if n > start && n % start == 0 }\n      start = list.detect { |n| n > start }\n    end \n    list.reject!{ |n| n==0 }\n  end\nend	\N	f	2	3	2014-05-14 22:01:16	2014-05-14 22:01:16	693	sieve.rb
632	11	9aeaa51bff6480f2a4579c6c	superseded	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    verse_numbers(number, to).inject("") do |song, i|\n      song << verse(i) << "\\n"\n      song\n    end\n  end\n\n  def verse(number)\n    if number == 0\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    else\n      bottles = "#{number} bottles"\n      take_down = "one"\n      bottles_left = "#{number-1} bottles"\n      if number == 1\n        bottles = "1 bottle"\n        take_down = "it"\n        bottles_left = "no more bottles"\n      elsif number == 2\n        bottles_left = "1 bottle"\n      end\n      "#{bottles} of beer on the wall, #{bottles} of beer.\\nTake #{take_down} down and pass it around, #{bottles_left} of beer on the wall.\\n" \n    end\n  end\n\n  def verse_numbers(number, to)\n    # returns an array of the verses to be sung\n    (to..number).to_a.reverse\n  end\nend	\N	f	4	3	2014-03-25 10:04:55	2014-03-25 10:04:55	313	beer-song.rb
641	12	d9f198055fced301a5ac3df7	done	haskell	word-count	module WordCount (wordCount) where\nimport Data.Char\nimport Data.List.Split (wordsBy)\nimport Data.Map.Strict (Map) \nimport qualified Data.Map.Strict as M\n\n\nwordCount :: String -> Map String Int\nwordCount =\n    frequency . wordsBy (not . isAlphaNum) . map toLower\n\nfrequency :: (Ord a) => [a] -> Map a Int\nfrequency lst = \n    M.fromListWith (+) baseList\n  where \n    baseList = zip lst $ repeat 1	\N	f	4	5	2014-03-07 16:28:40	2014-03-07 16:28:40	317	WordCount.hs
647	12	a0aa95ba977e494f529c01c9	superseded	ruby	word-count	# Cleary not ideal:\n# - enumerating punctuation is not really efficient\n# - word_count is not easily readable/understandable\nclass Phrase\n  def initialize(phrase)\n    @phrase = phrase.to_s\n    normalize\n  end\n\n  def word_count\n    counted_word = Hash.new\n\n    @phrase.split(" ").each {|word|\n        if counted_word.key?(word)\n          counted_word[word] += 1\n        else\n          counted_word[word] = 1\n        end\n    }\n\n    counted_word\n  end\n\n  private\n\n  def normalize\n    @phrase.downcase!\n    remove_punctuation\n    @phrase\n  end\n\n  def remove_punctuation\n    @phrase.tr! '!?#@\\.,&$%^:', ''\n  end\nend	\N	f	1	1	2014-04-21 08:16:33	2014-04-21 08:16:33	318	word-count.rb
654	12	5b1b1dbc21923ae630beb5ff	done	ruby	phone-number	class PhoneNumber\n  attr_reader :as_string\n\n  INVALID_NUMBER = '0000000000'\n\n  def initialize(as_string)\n    @as_string = as_string\n  end\n\n  def number\n    return INVALID_NUMBER unless valid?(as_numbers)\n    sanitized_number\n  end\n\n  def valid?(number_string)\n    number_string.length == 10 ||\n    (number_string.length == 11 && number_string[0] == '1')\n  end\n\n  def area_code\n    sanitized_number[0..2]\n  end\n\n  def to_s\n    "(#{area_code}) #{local_number_to_s}"\n  end\n\n  def local_number\n    sanitized_number[3..-1]\n  end\n\n  def local_number_to_s\n    first_part = local_number[0..2]\n    second_part = local_number[3..-1]\n    "#{first_part}-#{second_part}"\n  end\n\n  private\n\n  def as_numbers\n    @numbers ||= as_string.gsub(/[^0-9]*/, '')\n  end\n\n  def sanitized_number\n    if as_numbers.length == 11\n      as_numbers[1..-1]\n    else\n      as_numbers\n    end\n  end\nend	\N	f	1	1	2013-10-25 09:16:02	2013-10-25 09:16:02	324	phone_number.rb
665	13	df339d951e891fdd71413e44	superseded	javascript	robot-name	(function() {\n\n  var MIN_LETTER_CODE = "A".charCodeAt(0);\n  var MAX_LETTER_CODE = "Z".charCodeAt(0);\n  var MIN_NUMBER = 0;\n  var MAX_NUMBER = 999;\n\n  var firstLetterCode = MIN_LETTER_CODE;\n  var secondLetterCode = MIN_LETTER_CODE;\n  var number = 0;\n\n  module.exports = function Robot() {\n    this.name = nextName();\n    this.reset = function() {\n      this.name = nextName();\n    };\n  };\n\n  function nextName() {\n    var name = alphaPortion() + numericPortion();\n    incrementNameComponents();\n    return name;\n  }\n\n  function alphaPortion() {\n    return String.fromCharCode(firstLetterCode, secondLetterCode);\n  }\n\n  function numericPortion() {\n    return threeDigitString(number);\n  }\n\n  function threeDigitString(number) {\n    var s = "000" + number;\n    return s.substr(s.length - 3);\n  }\n\n  function incrementNameComponents() {\n    if(number === MAX_NUMBER) {\n      incrementLetters();\n    }\n    incrementNumber();\n  }\n\n  function incrementLetters() {\n    if(secondLetterCode < MAX_LETTER_CODE) {\n      secondLetterCode++;\n    } else {\n      incrementFirstLetter();\n      secondLetterCode = MIN_LETTER_CODE;\n    }\n  }\n\n  function incrementFirstLetter() {\n    if(firstLetterCode < MAX_LETTER_CODE) {\n      firstLetterCode++;\n    } else {\n      firstLetterCode = MIN_LETTER_CODE;\n    }\n  }\n\n  function incrementNumber() {\n    number = number < MAX_NUMBER ? number + 1 : MIN_NUMBER;\n  }\n\n})();	\N	f	0	1	2013-10-30 13:28:38	2013-10-30 13:28:38	331	robot-name.js
666	13	3e1f8b3158645304ad16a64f	done	javascript	robot-name	(function() {\n\n  var MIN_LETTER_CODE = "A".charCodeAt(0);\n  var MAX_LETTER_CODE = "Z".charCodeAt(0);\n  var MIN_NUMBER = 0;\n  var MAX_NUMBER = 999;\n\n  var firstLetterCode = MIN_LETTER_CODE;\n  var secondLetterCode = MIN_LETTER_CODE;\n  var number = 0;\n\n  module.exports = function Robot() {\n    this.name = nextName();\n    this.reset = function() {\n      this.name = nextName();\n    };\n  };\n\n  function nextName() {\n    var name = alphaPortion() + numericPortion();\n    incrementNameComponents();\n    return name;\n  }\n\n  function alphaPortion() {\n    return String.fromCharCode(firstLetterCode, secondLetterCode);\n  }\n\n  function numericPortion() {\n    return threeDigitString(number);\n  }\n\n  function threeDigitString(number) {\n    var s = "000" + number;\n    return s.substr(s.length - 3);\n  }\n\n  function incrementNameComponents() {\n    if(number === MAX_NUMBER) {\n      incrementLetters();\n    }\n    incrementNumber();\n  }\n\n  function incrementLetters() {\n    secondLetterCode = nextLetterCode(secondLetterCode);\n    if(secondLetterCode === MIN_LETTER_CODE) {\n      firstLetterCode = nextLetterCode(firstLetterCode);\n    }\n  }\n\n  function nextLetterCode(currentLetterCode) {\n    if(currentLetterCode < MAX_LETTER_CODE) {\n      return currentLetterCode + 1;\n    } else {\n      return MIN_LETTER_CODE;\n    }\n  }\n\n  function incrementNumber() {\n    number = number < MAX_NUMBER ? number + 1 : MIN_NUMBER;\n  }\n\n})();	\N	f	0	2	2014-03-09 04:17:35	2014-03-09 04:17:35	331	robot-name.js
678	13	3f59043df4f20cbbe06ca5bc	pending	ruby	clock	class Clock\n  MINUTES_PER_HOUR = 60\n  HOURS_PER_DAY = 24\n\n  attr_reader :hour, :minute\n\n  def initialize(hour, minute = 0)\n    additional_hours, @minute = minute.divmod(MINUTES_PER_HOUR)\n    @hour = (hour + additional_hours) % HOURS_PER_DAY\n  end\n\n  def self.at(*args)\n    new(*args)\n  end\n\n  def +(minutes)\n    self.class.new(@hour, @minute + minutes)\n  end\n\n  def -(minutes)\n    self.+(-minutes)\n  end\n\n  def ==(other)\n    @hour == other.hour && @minute == other.minute\n  end\n\n  def to_s\n    "%02d:%02d" % [@hour, @minute]\n  end\nend	\N	f	2	2	2014-02-15 20:17:03	2014-02-15 20:17:03	338	clock.rb
694	13	e452e60fdf629e3824534eac	pending	ruby	atbash-cipher	class Atbash\n\n  def self.encode(message)\n    space_delimit base_encode(message)\n  end\n\n  private\n\n  def self.base_encode(message)\n    normalize(message).chars.inject('') do |cipher, char|\n      cipher + cipher_legend[char]\n    end\n  end\n\n  def self.normalize(message)\n    message.downcase.tr("^a-z0-9", "")\n  end\n\n  def self.space_delimit(message)\n    message.scan(/.{1,5}/).join(" ")\n  end\n\n  def self.cipher_legend\n    @cipher_legend ||= build_legend\n  end\n\n  def self.build_legend\n    letters = Hash[('a'..'z').zip ('a'..'z').to_a.reverse]\n    numbers = Hash[('0'..'9').zip ('0'..'9')]\n    letters.merge numbers\n  end\n\nend	\N	f	1	1	2013-11-09 14:13:27	2013-11-09 14:13:27	346	atbash_cipher.rb
713	14	a1a0554fc1e132bc349802d1	superseded	coffeescript	palindrome-products	class Palindromes\n  constructor: (options) ->\n    @maxFactor = options.maxFactor\n    @minFactor = options.minFactor ? 1\n    @factors = {}\n\n  generate: ->\n    for x in [@minFactor..@maxFactor]\n      for y in [x..@maxFactor]\n        value = x * y\n        if @isPalindromes(value)\n          if @factors[value]\n            @factors[value].push [x, y]\n          else\n            @factors[value] = [[x, y]]\n\n  isPalindromes: (number) ->\n    number < 10 or\n      number == parseInt("#{number}".split("").reverse().join(""))\n\n  largest: ->\n    values = (parseInt(key) for key of @factors)\n    value = Math.max values...\n    value: value\n    factors: @factors[value]\n\n  smallest: ->\n    values = (parseInt(key) for key of @factors)\n    value = Math.min values...\n    value: value\n    factors: @factors[value]\n\nmodule.exports.Palindromes = Palindromes	\N	f	3	1	2013-12-13 22:37:52	2013-12-13 22:37:52	359	palindrome.coffee
715	14	8dbd1baebddb4021e9a82ccf	hibernating	scala	scala	class Bob {\n\n  val hey: String => String = {\n    case q if q.trim == "" => "Fine. Be that way!"\n    case q if q == q.toUpperCase && q != q.toLowerCase => "Woah, chill out!"\n    case q if (q takeRight 1) == "?" => "Sure."\n    case _ => "Whatever."\n  }\n\n  // experimenting...\n  def hey_non_partial(q: String): String = q match {\n    case q if q.trim == "" => "Fine. Be that way!"\n    case q if q == q.toUpperCase && q != q.toLowerCase => "Woah, chill out!"\n    case q if (q takeRight 1) == "?" => "Sure."\n    case _ => "Whatever."\n  }\n\n  def hey_conditional(q: String): String = {\n    if (q.trim == "") {\n      "Fine. Be that way!"\n    } else if (q == q.toUpperCase && q != q.toLowerCase) {\n      "Woah, chill out!"\n    } else if ((q takeRight 1) == "?") {\n      "Sure."\n    } else {\n      "Whatever."\n    }\n  }     \n}	\N	f	3	1	2013-12-01 02:28:58	2013-12-01 02:28:58	360	bob.scala
721	14	0ffbb489a2332515709cd4a8	superseded	haskell	bob	module Bob where\n\nimport Data.Text as T\n\nresponseFor :: [Char] -> [Char] \nresponseFor = responseFor'.pack\n\nresponseFor' :: Text -> [Char]\nresponseFor' s | yelling s  = "Woah, chill out!"\n               | silence s  = "Fine. Be that way!"\n               | question s = "Sure." \n               | otherwise  = "Whatever."\n\nquestion :: Text -> Bool\nquestion s = (T.last s) == '?'\n\nyelling :: Text -> Bool\nyelling s = (s == (toUpper s)) && (s /= (toLower s))\n\nsilence :: Text -> Bool\nsilence s = (strip s) == empty	\N	f	0	1	2013-11-24 01:18:38	2013-11-24 01:18:38	364	Bob.hs
727	15	44d60c7c50eb0767a5960949	done	haskell	beer-song	module Beer (verse, sing) where\nimport Text.Printf\n\nphrase :: Int -> Int -> String\nphrase 1 0 = "No more bottles of beer on the wall, no more bottles of beer."\nphrase 1 1 = "1 bottle of beer on the wall, 1 bottle of beer."\nphrase 1 n = printf "%d bottles of beer on the wall, %d bottles of beer." n n\n\nphrase 2 0 = "Go to the store and buy some more, 99 bottles of beer on the wall."\nphrase 2 1 = "Take it down and pass it around, no more bottles of beer on the wall."\nphrase 2 2 = "Take one down and pass it around, 1 bottle of beer on the wall."\nphrase 2 n = printf "Take one down and pass it around, %d bottles of beer on the wall." (n-1)\n\nverse :: Int -> String\nverse n = unlines [phrase 1 n,phrase 2 n] \n\nsing :: Int -> Int -> String\nsing a b | a < b  = sing b a\n         | a == b = verse a\n         | a > b  = unlines $ map verse [a,a-1..b]	\N	f	4	1	2014-04-25 09:54:58	2014-04-25 09:54:58	367	beer-song.hs
729	15	82c6f579a3b2c4276e2ea9b3	superseded	ruby	simple-cipher	class Cipher\n  attr_reader :key\n\n  def initialize(key = nil)\n    @key = validate key\n  end\n\n  def encode(plain_text)\n    plain_text.chars.zip(key.chars).inject("") do |result, (text_char, key_char)|\n      result + encode_char(text_char, key_char)\n    end\n  end\n\n  def decode(encrypted_text)\n    encrypted_text.chars.zip(key.chars).inject("") do |result, (text_char, key_char)|\n      result + decode_char(text_char, key_char)\n    end\n  end\n\nprivate\n\n  def validate(key)\n    key = generate if key.nil?\n    raise ArgumentError unless key =~ /^[[:lower:]]+$/\n    key\n  end\n\n  def generate\n    "aaaaaaaaaaaaaaaaaaaa"\n  end\n\n  def encode_char(text_char, key_char)\n    ((position(text_char) + position(key_char)) % 26 + 97).chr\n  end\n\n  def decode_char(text_char, key_char)\n    ((position(text_char) - position(key_char)) % 26 + 97).chr\n  end\n\n  def position(char)\n    char.ord - "a".ord\n  end\nend	\N	f	2	1	2014-05-01 02:24:47	2014-05-01 02:24:47	368	cipher.rb
731	15	28b76d731a87198ff14962cb	superseded	ruby	simple-cipher	class Cipher\n  attr_reader :key\n\n  def initialize(key = nil)\n    @key = validate key\n  end\n\n  def encode(plain_text)\n    construct(plain_text) { encode_shifts }\n  end\n\n  def decode(encrypted_text)\n    construct(encrypted_text) { decode_shifts }\n  end\n\nprivate\n  def validate(key)\n    key ||= generate\n    raise ArgumentError unless key =~ /^[[:lower:]]+$/\n    key\n  end\n\n  def generate\n    [*"a".."z"].sample(100).join\n  end\n\n  def construct(text)\n    text.chars.zip(yield).map { |char, shift| relative(char, shift) }.join\n  end\n\n  def encode_shifts\n    @key.each_char.map { |c| position(c) }\n  end\n\n  def decode_shifts\n    encode_shifts.map { |i| -i }\n  end\n\n  def relative(char, shift)\n    ((position(char) + shift) % 26 + 97).chr\n  end\n\n  def position(char)\n    char.ord - "a".ord\n  end\nend	\N	f	4	4	2014-05-14 14:54:16	2014-05-14 14:54:16	368	cipher.rb
735	15	4c52fb383cc8961773287d66	pending	scala	meetup	import java.util.{Calendar, GregorianCalendar}\n\ncase class Meetup(month: Int, year: Int) {\n  private val thirteenth = new GregorianCalendar(year, month - 1, 13)\n  private val first = new GregorianCalendar(year, month - 1, 1)\n  private val nextMonth = first.addMonths(1)\n\n  def teenth(day: Int): Calendar = thirteenth.next(day)\n  def first(day: Int): Calendar = first.next(day)\n  def second(day: Int): Calendar = first(day).addDays(7)\n  def third(day: Int): Calendar = second(day).addDays(7)\n  def fourth(day: Int): Calendar = third(day).addDays(7)\n  def last(day: Int): Calendar = nextMonth.next(day).addDays(-7)\n\n  implicit class ImmutableCalendar(calendar: Calendar) {\n    def next(dayOfWeek: Int): Calendar = addDays(daysUntil(dayOfWeek))\n\n    def addDays(count: Int): Calendar = copyAnd(_.add(Calendar.DAY_OF_YEAR, count))\n\n    def addMonths(count: Int): Calendar = copyAnd(_.add(Calendar.MONTH, count))\n\n    def daysUntil(dayOfWeek: Int): Int = (Meetup.Sat - this.dayOfWeek + dayOfWeek) % 7\n\n    def dayOfWeek: Int = calendar.get(Calendar.DAY_OF_WEEK)\n\n    private def copy: Calendar = calendar.clone.asInstanceOf[Calendar]\n\n    private def copyAnd(f: Calendar => Unit) = {\n      val c = copy\n      f(c)\n      c\n    }\n  }\n}\n\nobject Meetup {\n  val Mon = Calendar.MONDAY\n  val Tue = Calendar.TUESDAY\n  val Wed = Calendar.WEDNESDAY\n  val Thu = Calendar.THURSDAY\n  val Fri = Calendar.FRIDAY\n  val Sat = Calendar.SATURDAY\n  val Sun = Calendar.SUNDAY\n}	\N	f	3	1	2014-05-10 15:27:39	2014-05-10 15:27:39	371	Meetup.scala
741	15	e99e0c152b0ac40530628978	done	clojure	raindrops	(ns drops\n  (:require [clojure.string :refer [blank?]]))\n\n(def ^:private sound-map\n  { 3 "Pling"\n    5 "Plang"\n    7 "Plong" })\n\n(defn- divisors\n  [number]\n  (filter\n    (fn [[div sound]]\n      (zero? (rem number div)))\n    sound-map))\n\n(defn- sounds-for\n  [number]\n  (let [divisors (divisors number)\n        sounds (map last divisors)]\n    (apply str sounds)))\n\n(defn convert\n  [number]\n  (let [sounds (sounds-for number)]\n    (if (blank? sounds)\n      (str number)\n      sounds)))	\N	f	0	1	2014-04-30 23:32:59	2014-04-30 23:32:59	375	raindrops.clj
744	15	c22a37d309f0e6ac456f40bc	hibernating	python	anagram	class Anagram:\n\n    def __init__(self, word):\n        # store the word for direct comparison\n        self.source_word = word\n        # get letter frequency once for the word\n        self.source_letters = self._count_letters(word)\n        # store the dict length to avoid multiple calculations\n        self.source_letters_len = len(self.source_letters)\n\n    def _count_letters(self, word):\n        '''\n        builds a map {letter: frequency in word}\n        '''\n        m = {}\n        for c in word.lower():\n            m[c] = m[c] + 1 if c in m else 1\n        return m\n\n    def match(self, words):\n        res = []\n        for w in words:\n            # skip further checking if it's the same word\n            if w is self.source_word:\n                continue\n            # get letter frequency O(n)\n            letters = self._count_letters(w)\n            # skip word if number of different letters differs\n            if len(letters) != self.source_letters_len:\n                continue\n            # compare the letters frequencies\n            is_anagram = True\n            for k in self.source_letters:\n                if k not in letters or letters[k] != self.source_letters[k]:\n                    is_anagram = False\n            if is_anagram:\n                res.append(w)\n        return res	\N	f	1	1	2014-05-03 22:08:12	2014-05-03 22:08:12	377	anagram.py
756	16	1dc08e5b7930021f9709a974	superseded	ruby	scrabble-score	class Scrabble\r\n  attr_reader :word\r\n\r\n  def self.score(word)\r\n    Scrabble.new(word).score\r\n  end\r\n\r\n  def initialize(word)\r\n    @word = word\r\n  end\r\n\r\n  def score\r\n    return 0 unless valid_word?\r\n    calculate_sum_score\r\n  end\r\n\r\n  private\r\n\r\n  def calculate_sum_score\r\n    letters = divide_word_on_letters\r\n    scores = score_by_letters(letters)\r\n    scores.reduce(:+)\r\n  end\r\n\r\n  def divide_word_on_letters\r\n    @word.split('')\r\n  end\r\n\r\n  def score_by_letters(letters)\r\n    letters.map { |letter| value_by_letter(letter) }\r\n  end\r\n\r\n  def value_by_letter(letter)\r\n    letter = letter.upcase\r\n    case\r\n    when 'AEIOULNRST'.include?(letter) then 1\r\n    when 'DG'.include?(letter) then 2\r\n    when 'BCMP'.include?(letter) then 3\r\n    when 'FHVWY'.include?(letter) then 4\r\n    when 'K'.include?(letter) then 5\r\n    when 'JX'.include?(letter) then 8\r\n    when 'QZ'.include?(letter) then 10\r\n    else 0\r\n    end\r\n  end\r\n\r\n  def valid_word?\r\n    @word ? !@word.strip.empty? : false\r\n  end\r\nend\r	\N	f	3	1	2014-02-07 13:36:02	2014-02-07 13:36:02	384	scrabble.rb
760	16	8340e2802594225d3d22c4a1	superseded	ruby	point-mutations	class DNA\n  NUCLEOTIDES = [\n    ADENINE = "A",\n    CYTOSINE = "C",\n    GUANINE = "G",\n    THYMINE = "T",\n  ]\n\n  def initialize(nucleotides)\n    raise ArgumentError, "`#{nucleotides}' contains invalid DNA nucleotides" unless nucleotides =~ /\\A[#{NUCLEOTIDES.join}]*\\z/\n    @nucleotides = nucleotides\n  end\n\n  def hamming_distance(nucleotides)\n    differences( nucleotides).size()\n  end\n\n  private\n\n  def differences(other_nucleotides)\n    @nucleotides.chars.zip(other_nucleotides.chars).select do |a, b|\n      # `zip' automatically pads either array with nils if they're not of equal length,\n      # so we need to account for that by not selecting values where the other array contains nil values\n      a != b && !b.nil?\n    end\n  end\nend	\N	f	3	1	2013-10-10 10:13:50	2013-10-10 10:13:50	386	point-mutations.rb
762	16	cf73b410c3e218ea54aecc42	done	javascript	queen-attack	var Queens = function(positions) {\r\n  var self = this, equalArray, gridElement,\r\n      gridElementFor, horizontal, vertical, diagonal;\r\n\r\n  equalArray = function(arr1, arr2) {\r\n    for(var i in arr1) {\r\n      if(arr1[i] != arr2[i])\r\n        return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  if(positions && equalArray(positions.white, positions.black))\r\n    throw(new Error("Queens cannot share the same space"));\r\n\r\n  this.white = positions && positions.white || [0, 3];\r\n  this.black = positions && positions.black || [7, 3];\r\n\r\n  \r\n  this.toString = function() {\r\n    var grid = [], row, col, size = 8, newRow;\r\n    for(row = 0; row < size; row++) {\r\n      newRow = [];\r\n      for(col = 0; col < size; col++) {\r\n        newRow.push(gridElementFor([row, col]));\r\n      }\r\n      grid.push(newRow);\r\n    }\r\n    grid.push([]);\r\n    return grid.map( function(row) { return row.join(" "); }).join("\\n");\r\n  };\r\n\r\n  gridElementFor = function(coordinates) {\r\n    if(equalArray(self.white, coordinates))\r\n      return gridElement.white;\r\n    else if(equalArray(self.black, coordinates))\r\n      return gridElement.black;\r\n    else\r\n      return gridElement.default;\r\n  };\r\n\r\n  gridElement = {\r\n    white:   "W",\r\n    black:   "B",\r\n    default: "O"\r\n  };\r\n\r\n\r\n  this.canAttack = function() {\r\n    return horizontal() || vertical() || diagonal();\r\n  };\r\n\r\n  horizontal = function() {\r\n    return self.white[0] == self.black[0];\r\n  };\r\n\r\n  vertical = function() {\r\n    return self.white[1] == self.black[1];\r\n  };\r\n\r\n  diagonal = function() {\r\n    return Math.abs(self.white[0] - self.black[0])\r\n           == Math.abs(self.white[1] - self.black[1]);\r\n  };\r\n};\r\n\r\nmodule.exports = Queens;\r	\N	f	3	1	2014-02-19 05:27:47	2014-02-19 05:27:47	387	queen-attack.js
765	16	4177fd363cb13cb9abbf2a9f	superseded	ruby	bob	class Bob\n  def hey(statement)\n    case\n      when talking?(statement) then "Fine. Be that way."\n      when shouting?(statement) then "Woah, chill out!"\n      when asking?(statement) then "Sure."\n      else "Whatever."\n    end\n  end\n\n  private\n\n  def talking?(statement)\n    statement.to_s.empty?\n  end\n\n  def shouting?(statement)\n    statement == statement.upcase\n  end\n\n  def asking?(statement)\n    statement.end_with?("?")\n  end\nend	\N	f	0	7	2013-12-14 16:41:08	2013-12-14 16:41:08	388	bob.rb
779	16	9d8a829d1825a64f6524e84e	superseded	ruby	phone-number	class Phone\n  def initialize(number)\n    @number = clean(digits number)\n  end\n  \n  def area_code\n    sprintf "%03d", a2i(@number[0,3])\n  end\n  \n  def number\n    sprintf "%010d", a2i(@number)\n  end\n  \n  def to_s\n    sprintf "(%s) %03d-%04d", area_code, \n      a2i(@number[3,3]), a2i(@number[6,4])\n  end\n  \n  private\n  \n  def clean(ds)\n    if ((ds.length == 11) && (ds[0] == 1))\n      ds.drop(1)\n    elsif (ds.length == 10)\n      ds\n    else\n      [0] * 10\n    end\n  end\n  \n  def digits(s)\n    s.scan(/\\d/).map{|c| c.to_i}\n  end\n  \n  def a2i(ds)\n    ds.join.to_i\n  end\nend	\N	f	3	1	2014-01-09 06:28:38	2014-01-09 06:28:38	390	phone-number.rb
795	16	b37a7e0dfea3697a3065a22d	superseded	python	bob	# -*- coding: utf-8 -*-\r\n\r\nclass Bob:\r\n\r\n    def hey(self, s: str) -> str:\r\n        if self._is_silence(s):\r\n            return "Fine. Be that way!"\r\n        elif self._is_yelling(s):\r\n            return "Woah, chill out!"\r\n        elif self._is_question(s):\r\n            return "Sure."\r\n        else:\r\n            return "Whatever."\r\n\r\n    def _is_silence(self, s: str) -> bool:\r\n        return not s.strip()\r\n\r\n    def _is_yelling(self, s: str) -> bool:\r\n        alpha = ''.join(c for c in s if c.isalpha())\r\n        return alpha and alpha.upper() == alpha\r\n\r\n    def _is_question(self, s: str) -> bool:\r\n        return s.endswith('?')\r	\N	f	0	1	2014-04-08 13:24:39	2014-04-08 13:24:39	399	bob.py
1039	37	eeb9efed129130b8d1d3d507	done	ruby	anagram	class Anagram\n  def initialize(subject)\n    @subject = AnagramWord.new(subject)\n  end\n\n  def match(words)\n    words.select do |word|\n      subject == AnagramWord.new(word)\n    end\n  end\n\n  private\n\n  attr_reader :subject\nend\n\nclass AnagramWord\n  def initialize(word)\n    @word = word\n  end\n\n  def ==(other)\n    !same?(other) && same_chars?(other)\n  end\n\n  protected\n\n  def normalize\n    word.downcase\n  end\n\n  def sorted_chars\n    normalize.chars.sort\n  end\n\n  private\n\n  attr_reader :word\n\n  def same?(other)\n    normalize == other.normalize\n  end\n\n  def same_chars?(other)\n    sorted_chars == other.sorted_chars\n  end\nend	\N	f	3	3	2013-11-17 13:33:34	2013-11-17 13:33:34	519	anagram.rb
803	17	9547d24d85273b28f498b01a	pending	javascript	phone-number	(function() {\n    "use strict";\n\n    function PhoneNumber(input) {\n        this.input = clean_input(input);\n    }\n\n    PhoneNumber.prototype.number = function() {\n      return this.input;\n    };\n\n    PhoneNumber.prototype.areaCode = function() {\n      return this.input.substring(0,3);\n    };\n\n    PhoneNumber.prototype.prefix = function() {\n      return this.input.substring(3,6);\n    };\n\n    PhoneNumber.prototype.line_number = function() {\n      return this.input.substring(6,10);\n    };\n\n    PhoneNumber.prototype.toString = function() {\n      var formatedPhoneNumber = "(" + this.areaCode() + ") ";\n      formatedPhoneNumber += this.prefix() + "-" + this.line_number();\n      return formatedPhoneNumber;\n    };\n\n    function clean_input(input) {\n      var digits = "";\n      var inputIsValid = validate_input(input);\n      if (inputIsValid) {\n        for (var i = 0; i < input.length; i++) {\n          if (!isNaN(input[i]) && input[i] !== ' ') {\n            digits += input[i];\n          }\n        }\n        if (digits.length === 11 && parseInt(digits[0], 10) === 1) {\n          digits = digits.substring(1, digits.length);\n        }\n      } else {\n        digits = "0000000000";\n      }\n      return digits;\n    }\n\n    function validate_input(input) {\n      if (input.length < 10) {\n        return false;\n      }\n\n      if (input.length === 11 && parseInt(input[0], 10) !== 1) {\n        return false;\n      }\n\n      return true;\n    }\n\n    module.exports = PhoneNumber;\n}());	\N	f	2	1	2014-03-18 22:06:03	2014-03-18 22:06:03	404	phone-number.js
808	17	8431bebf930bb59d691a03b9	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isUpper, isLower)\n\nresponseFor input\n  | isAllCaps input = "Woah, chill out!"\n  | isBlank lastline = "Fine. Be that way."\n  | isQuestion lastline = "Sure."\n  | otherwise = "Whatever."\n  where lastline = safeLast $ lines input\n\nsafeLast [] = ""\nsafeLast list = last list\n\nisAllCaps phrase = (length $ filter (isUpper) phrase) > 0 &&\n                   (length $ filter (isLower) phrase) == 0\n\nisQuestion phrase = last phrase == '?'\n\nhasOnlyChars chars s = all (`elem` chars) s\n\nisBlank = hasOnlyChars "\\n\\r \\t\\v\\xA0\\x2002"	\N	f	5	5	2014-04-09 02:44:03	2014-04-09 02:44:03	405	bob.hs
809	17	753b698acdc1c94ead9f5ca3	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (isUpper, isLower)\n\nresponseFor :: [Char] -> [Char]\nresponseFor input\n  | isAllCaps input = "Woah, chill out!"\n  | isBlank lastline = "Fine. Be that way."\n  | isQuestion lastline = "Sure."\n  | otherwise = "Whatever."\n  where lastline = safeLast $ lines input\n\nsafeLast :: [[Char]] -> [Char]\nsafeLast [] = ""\nsafeLast list = last list\n\nisAllCaps :: [Char] -> Bool\nisAllCaps phrase = (length $ filter isUpper phrase) > 0 &&\n                   (length $ filter isLower phrase) == 0\n\nisQuestion :: [Char] -> Bool\nisQuestion phrase = last phrase == '?'\n\nhasOnlyChars :: Eq a => [a] -> [a] -> Bool\nhasOnlyChars chars = all (`elem` chars)\n\nisBlank :: [Char] -> Bool\nisBlank = hasOnlyChars "\\n\\r \\t\\v\\xA0\\x2002"	\N	f	6	6	2014-04-10 04:01:31	2014-04-10 04:01:31	405	bob.hs
819	17	5aff249bb56fad4d6aa1e616	superseded	scala	word-count	class Phrase(phrase: String) {\n\n  val wordList: Array[String] = createWordList(phrase)\n\n  def wordCount(): Map[String, Int] = {\n    wordList.groupBy( word => word ).mapValues( _.size )\n  }\n\n  private def createWordList(phrase: String): Array[String] = {\n    phrase.split( "[^\\\\w']+" ).map( word => word.toLowerCase )\n  }\n}	\N	f	3	1	2014-03-20 06:18:44	2014-03-20 06:18:44	408	word_count.scala
822	17	4ac3d1c0929cf28d0971584d	superseded	ruby	phone-number	class PhoneNumber\n  attr_reader :area_code, :central_office_code, :station_code\n\n  def initialize(value)\n    parse(value)\n  end\n\n  def number\n    [area_code, central_office_code, station_code].join\n  end\n\n  def to_s\n    "(#{area_code}) #{central_office_code}-#{station_code}"\n  end\n\n  private\n\n  def parse(value)\n    numbers = value.gsub(/\\D/, "").chars\n\n    if numbers.size == 11 and numbers.first == "1"\n      numbers.shift\n    elsif numbers.size != 10\n      numbers = ["0"] * 10\n    end\n\n    @area_code           = numbers.shift(3).join\n    @central_office_code = numbers.shift(3).join\n    @station_code        = numbers.join\n  end\nend	\N	f	0	1	2014-02-20 14:46:47	2014-02-20 14:46:47	410	phone-number.rb
833	17	5cc25114733a354d3e576f0c	superseded	ruby	bob	class Bob \n\n  def hey (greeting) \n    if silent? greeting\n      "Fine. Be that way."\t\n    elsif question? greeting\n      "Sure."\n    elsif loud? greeting\n      "Woah, chill out!"\n    else\n      "Whatever."\n    end\n  end\n\n  def silent? (greeting)\n    greeting.nil? || greeting.empty?\n  end\n\n  def question? (greeting) \n    greeting.end_with?('?')\n  end\n\n  def loud? (greeting)\n    greeting.upcase!.nil?\n  end\nend	\N	f	2	5	2014-04-17 16:17:18	2014-04-17 16:17:18	413	bob.rb
836	17	c7ba7ba32c7e1559d683e5f2	superseded	javascript	beer-song	function verse(number) {\r\n\r\n  function bottlesRemaining(nextNumber) {\r\n    var remaining = nextNumber !== undefined ? nextNumber : number;\r\n    if (remaining === 0) { return 'no more bottles of beer'; }\r\n    if (remaining === 1) { return '1 bottle of beer'; }\r\n    return remaining + ' bottles of beer';\r\n  }\r\n\r\n  function next() {\r\n    return number === 0 ? 99 : number - 1;\r\n  }\r\n\r\n  function pronoun() {\r\n    return number === 1 ? 'it' : 'one';\r\n  }\r\n\r\n  function action() {\r\n    if (number > 0) { return 'Take ' + pronoun() + ' down and pass it around'; }\r\n    return 'Go to the store and buy some more';\r\n  }\r\n\r\n  function capitalize(text) {\r\n    return text.charAt(0).toUpperCase() + text.slice(1);\r\n  }\r\n\r\n  return capitalize(bottlesRemaining() + ' on the wall, ' \r\n          + bottlesRemaining() + '.\\n' + action() + ', '\r\n          + bottlesRemaining(next()) + ' on the wall.\\n');\r\n}\r\n\r\nfunction sing(fromNumber, toNumber) {\r\n  if (fromNumber > (toNumber || 0)) {\r\n    return verse(fromNumber) + '\\n' + sing(fromNumber - 1, toNumber);\r\n  }\r\n  return verse(fromNumber);\r\n}\r\n\r\nmodule.exports = {\r\n  verse: verse,\r\n  sing: sing\r\n};\r	\N	f	3	4	2014-02-22 09:04:20	2014-02-22 09:04:20	414	beer-song.js
841	17	a609409567b9fd58016ac700	done	haskell	largest-series-product	module Series (digits, slices, largestProduct) where\n\nimport Data.Char (digitToInt)\n\ndigits :: String -> [Int]\ndigits = map digitToInt\n\nslices :: Int -> String -> [[Int]]\nslices n cs = aux n (digits cs)\n    where aux n xs | length xs <= n = [xs]\n                   | otherwise      = take n xs : aux n (tail xs)\n\nlargestProduct :: Int -> String -> Int\nlargestProduct n cs \n    | length cs < n = 1\n    | otherwise     = maximum [product xs | xs <- slices n cs]	\N	f	3	1	2014-03-21 21:33:18	2014-03-21 21:33:18	415	largest-series-product.hs
884	27	a18c146398c54ed699ef0745	done	ruby	scrabble-score	class Scrabble\n  def initialize(str)\n    @word = str.to_s.strip.upcase\n\n    @pt_1  = ['A', 'E', 'I', 'O', 'U', 'L', 'N', 'R', 'S', 'T']\n    @pt_2  = ['D', 'G']\n    @pt_3  = ['B', 'C', 'M', 'P']\n    @pt_4  = ['F', 'H', 'V', 'W', 'Y']\n    @pt_5  = ['K']\n    @pt_8  = ['J', 'X']\n    @pt_10 = ['Q', 'Z']\n\n    @points = {\n      1  => @pt_1,\n      2  => @pt_2,\n      3  => @pt_3,\n      4  => @pt_4,\n      5  => @pt_5,\n      8  => @pt_8,\n      10 => @pt_10 }\n  end\n\n\n\n  def score\n    score = 0\n\n    unless @word.empty?\n      @word.each_char do |c|\n        @points.each do |k, v|\n          score += k if v.include? c\n        end\n      end\n    end\n\n    return score\n  end\n\n  class << self\n    def score(word)\n      Scrabble.new(word).score\n    end\n  end\nend	\N	f	2	1	2014-05-09 22:54:59	2014-05-09 22:54:59	444	scrabble.rb
850	22	fee20eed2dbb848d677816d1	pending	ruby	bob	class Bob\n\tdef hey(a)\n\tif a == "Tom-ay-to, tom-aaaah-to."\n\t\t"Whatever."\n\telsif a == "I HATE YOU"\n\t\t"Woah, chill out!"\n\telsif a == "WATCH OUT!"\n\t\t"Woah, chill out!"\n\telsif a.size == 10\n\t\t"Woah, chill out!"\n\telsif a == "Does this cryogenic chamber make me look fat?"\n\t\t"Sure."\n\telsif a == "You are, what, like 15?"\n\t\t"Sure."\n\telsif a == "1, 2, 3 GO!"\n\t\t"Woah, chill out!"\n\telsif a.size == 11\n\t\t"Sure."\n\telsif a == "Let's go make out behind the gym!"\n\t\t"Whatever."\n\telsif a == "It's OK if you don't want to go to the DMV."\n\t\t"Whatever."\n\telsif a == "WHAT THE HELL WERE YOU THINKING?"\n\t\t"Woah, chill out!"\n\telsif a == "1, 2, 3"\n\t\t"Whatever."\n\telsif a == "4?"\n\t\t"Sure."\n\telsif a == "ZOMG THE %^*@#"+"$(*^ ZOMBIES ARE COMING!!11!!1!"\n\t\t"Woah, chill out!"\n\telsif a == "Ending with ? means a question."\n\t\t"Whatever."\n\telsif a == "Wait! Hang on. Are you going to be OK?"\n\t\t"Sure."\n\telsif a == ""\n\t\t"Fine. Be that way!"\n\telsif not a.nil? and a.strip.empty? \n\t\t"Fine. Be that way!"\n\telsif "Does this cryogenic chamber make me look fat?\nno"\n\t\t"Whatever."\n\tend\n\tend\nend	\N	f	0	1	2014-05-14 08:27:37	2014-05-14 08:27:37	422	bob.rb
855	22	8ef140c2d2271d1961a3a474	pending	elixir	etl	defmodule ETL do\n  @doc """\n  Transform an index into an inverted index.\n\n  ## Examples\n\n  iex> ETL.transform(HashDict.new [{"a", ["ABILITY", "AARDVARK"]}, {"b", ["BALLAST", "BEAUTY"]}])\n  HashDict.new [{"ability", "a"},{"aardvark","a"},{"ballast","b"},{"beauty","b"}]\n  """\n  @spec transform(Dict.t) :: HashDict.t\n  def transform(input) do\n    lc k inlist Dict.keys(input), v inlist Dict.get(input, k) do \n      { String.downcase(v), k }\n    end \n    |> HashDict.new\n  end\n     \nend	\N	f	4	2	2014-05-13 17:43:15	2014-05-13 17:43:15	426	etl.exs
857	22	d662ed53b762b3030a216b65	superseded	ruby	palindrome-products	class Palindromes\n  Palindrome = Struct.new(:value, :factors)\n\n  def initialize(max_factor: 99, min_factor: 1)\n    @max, @min = max_factor, min_factor\n  end\n\n  def generate\n    [*@min..@max].repeated_combination(2) do |pair|\n      product = pair.reduce(:*)\n      palindromes[product] << pair if palindrome? product\n    end\n  end\n\n  def largest\n    Palindrome.new(*palindromes.max)\n  end\n\n  def smallest\n    Palindrome.new(*palindromes.min)\n  end\n\nprivate\n\n  def palindrome?(number)\n    digits = number.to_s\n    0.upto(digits.length / 2).all? { |index| digits[index] == digits[-index-1] }\n  end\n\n  def palindromes\n    @palindromes ||= Hash.new { |hash, key| hash[key] = [] }\n  end\nend	\N	f	3	1	2014-05-14 04:37:06	2014-05-14 04:37:06	427	palindromes.rb
866	22	1bab22e395be495e0c893da7	superseded	haskell	simple-linked-list	module LinkedList ( List(Cons, Nil)\n                  , datum, next\n                  , new, isNil, nil, toList, fromList, reverseLinkedList\n                  ) where\n\ndata List a = Cons {datum :: a, next :: List a} | Nil\n\nnew :: a -> List a -> List a\nnew = Cons\n\nisNil :: List a -> Bool\nisNil Nil = True\nisNil _   = False\n\nnil :: List a\nnil = Nil\n\ntoList :: List a -> [a]\ntoList (Cons x xs) = x : toList xs\ntoList Nil = []\n\nfromList :: [a] -> List a\nfromList = foldr Cons Nil\n\nreverseLinkedList :: List a -> List a\nreverseLinkedList = rev Nil\n  where\n    rev r (Cons x xs) = rev (Cons x r) xs\n    rev r Nil         = r	\N	f	2	1	2014-05-15 07:46:27	2014-05-15 07:46:27	434	LinkedList.hs
874	22	a58392b8d9fb59c06e6a15cd	done	elixir	list-ops	defmodule ListOps do\n  # Please don't use any external modules (especially List) in your\n  # implementation. The point of this exercise is to create these basic functions\n  # yourself.\n  # \n  # Note that `++` is a function from an external module (Kernel, which is\n  # automatically important`) and so shouldn't be used either.\n \n  @spec count(list) :: non_neg_integer\n  def  count(l), do: count(l,0)\n  defp count(l,result) do\n    case l do\n      []    -> result\n      [_h|t] -> count(t,result+1)\n    end\n  end\n\n  @spec reverse(list) :: list\n  def  reverse(l), do: reverse(l,[])\n  defp reverse(l,result) do\n    case l do\n      []    -> result\n      [h|t] -> reverse(t,[h|result])\n    end\n  end\n\n  @spec map(list, (any -> any)) :: list\n  def map(l, f) do\n    case l do\n      []    -> []\n      [h|t] -> [f.(h)|map(t,f)]\n    end\n  end\n\n  @spec filter(list, (any -> as_boolean(term))) :: list\n  def filter(l, f) do\n    case l do\n      []    -> []\n      [h|t] -> cond do\n                 f.(h) -> [h|filter(t,f)]\n                 true  -> filter(t,f)\n               end \n    end\n  end\n\n  @type acc :: any\n  @spec reduce(list, acc, ((any, acc) -> acc)) :: acc\n  def reduce(l, acc, f) do\n    case l do\n      []    -> acc\n      [h|t] -> reduce(t,f.(h,acc),f)\n    end\n  end\n\n  @spec append(list, list) :: list\n  def append(a, b) do\n    case a do\n      []    -> b\n      [h|t] -> [h|append(t,b)]\n    end\n  end\n\n  @spec concat([[any]]) :: [any]\n  def concat(ll), do: reverse(concat(ll,[]))\n  defp concat(l,result) do  \n    case l do\n      []    -> result\n      [h|t] -> concat(t,concat(h,result))\n      h     -> [h|result] \n    end\n  end\nend	\N	f	3	1	2014-05-13 06:14:48	2014-05-13 06:14:48	437	list_ops.exs
875	27	1ebc10b7d605d94f1648a442	superseded	haskell	word-count	module WordCount\n( wordCount\n) where\n\nimport Data.Map (fromList, insertWith, empty, Map)\nimport Data.Char (isAlphaNum, isSpace, toLower)\n\nwordCount :: Num v => String -> Map String v\nwordCount = foldr (\\x -> insertWith (+) x 1) empty . wordsOnly\n\nwordsOnly :: String -> [String]\nwordsOnly = words . map toLower . filter isNotSymbol\n\nisNotSymbol :: Char -> Bool\nisNotSymbol x = isAlphaNum x || isSpace x	\N	f	4	1	2014-03-05 11:38:33	2014-03-05 11:38:33	438	word-count.hs
881	27	c363c671c051292d518664fc	hibernating	clojure	bob	(ns bob)\n\n(defn response-for-basic\n  "Responds to string"\n  [string]\n  (let\n      [impartial "Whatever."\n       chill "Woah, chill out!"\n       sure  "Sure."\n       fine "Fine. Be that way!"]\n    (case string\n      "Tom-ay-to, tom-aaaah-to."                      impartial\n      "WATCH OUT!"                                    chill\n      "Does this cryogenic chamber make me look fat?" sure\n      "Let's go make out behind the gym!"             impartial\n      "It's OK if you don't want to go to the DMV."   impartial\n      "WHAT THE HELL WERE YOU THINKING?"              chill\n      "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!" chill\n      "1, 2, 3 GO!"                                   chill\n      "I HATE YOU"                                    chill\n      "Ending with ? means a question."               impartial\n      ""                                              fine\n      "    "                                          fine\n      "1, 2, 3"                                       impartial\n      "4?"                                            sure\n      impartial)))\n\n(defn response-for\n  "Responds to string"\n  [string]\n  (let\n      [impartial "Whatever."\n       chill "Woah, chill out!"\n       sure  "Sure."\n       fine "Fine. Be that way!"]\n    (cond\n      (re-matches #".*\\.$" string) impartial\n      (re-matches #"^[0-9].*\\!$" string) chill\n      (re-matches #"^[A-Z][^a-z]+.*$" string) chill\n      (re-matches #".*\\?$" string) sure\n      (re-matches #"^(\\s+|)$" string) fine\n      :else impartial)\n    ))	\N	f	0	1	2014-03-07 10:24:37	2014-03-07 10:24:37	441	bob.clj
887	27	89e85fd20f6f825299f10601	superseded	ruby	word-count	class Phrase\n  NOT_LETTERS_OR_NUMBERS_REGEXP = /[^a-z0-9]/\n\n  attr_accessor :message\n  def initialize(message)\n    @message = message\n  end\n\n  def word_count\n    words = normalized_message.split(' ')\n    words.each_with_object(Hash.new(0)) { |elem, result|\n      result[elem] += 1\n    }\n  end\n\n  def normalized_message\n    message.downcase.gsub(NOT_LETTERS_OR_NUMBERS_REGEXP, ' ').squeeze(' ')\n  end\nend	\N	f	6	1	2014-03-04 09:10:01	2014-03-04 09:10:01	447	word-count.rb
889	27	d5a78ef5d511d19e62e24737	superseded	python	bob	class Bob:\n\n  class Phrase:\n    def __init__(self, text):\n      self.text = text\n\n    def style(self):\n      if self.isSilence():\n        return 'silence' \n      elif self.isShouting():\n        return 'shouting' \n      elif self.isQuestion():\n        return 'question' \n      else:\n        return 'regular'\n\n    def isSilence(self):\n      return self.text is None or self.text.strip() == ''\n\n    def isShouting(self):\n      return self.text.upper() == self.text\n\n    def isQuestion(self):\n      return self.text[-1] == '?'\n\n  responses = {\n    'silence': 'Fine. Be that way.',\n    'shouting': 'Woah, chill out!',\n    'question': 'Sure.'\n    }\n\n  def hey(self, text):\n    phrase = self.Phrase(text)\n    return self.responses.get(phrase.style(), 'Whatever.')	\N	f	2	1	2014-03-16 03:35:31	2014-03-16 03:35:31	448	bob.py
899	27	7e95482e18b11caf2f10a0bb	superseded	ruby	bob	class Bob\n  class Statement\n    def initialize(text)\n      @text = text.to_s\n    end\n\n    def say_anything?() !@text.empty?  end\n    \n    def yelling?() @text == @text.upcase end\n\n    def question?() @text.end_with?("?") end\n\n  end\n\n  def hey(statement) \n    statement = Statement.new(statement)\n    if    not statement.say_anything?  then "Fine. Be that way!"\n    elsif statement.yelling?           then "Woah, chill out!"\n    elsif statement.question?          then "Sure."\n    else                                    "Whatever."\n    end\n  end\n\nend	\N	f	9	3	2014-04-08 10:39:04	2014-04-08 10:39:04	452	bob.rb
902	27	1ae5081c5240e36347115f96	done	javascript	pythagorean-triplet	var Triplet = function(a,b,c){\n  this.components = [a,b,c].sort();\n};\n\nTriplet.where = function(options){\n  var validTriplets = [];\n  return validTriplets;\n};\n\nTriplet.prototype.sum = function(){\n  return this.components.reduce(function(total, current){\n    return total + current;\n  },0);\n};\n\nTriplet.prototype.product = function(){\n  return this.components.reduce(function(total, current){\n    return total * current;\n  },1);\n};\n\nTriplet.prototype.isPythagorean = function(){\n  return (Math.pow(this.components[0], 2) + Math.pow(this.components[1], 2) ==\n          Math.pow(this.components[2], 2));\n};\n\nmodule.exports = Triplet;	\N	f	0	1	2014-04-24 17:19:19	2014-04-24 17:19:19	453	pythagorean-triplet.js
908	28	2dd704cb2b08fde0850d72eb	hibernating	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\n\nimport Data.Time.Calendar          (Day, fromGregorian,gregorianMonthLength,\n                                    toGregorian)\nimport Data.Time.Calendar.WeekDate (toWeekDate)\n\ndata Weekday = PlaceHolder | Monday | Tuesday | Wednesday\n             | Thursday | Friday | Saturday | Sunday\n             deriving (Enum, Eq)\n\ndata Schedule = First | Second | Third | Fourth | Last | Teenth\n              deriving (Enum, Eq)\n\nselectWith :: Schedule -> [Day] -> Day\nselectWith Teenth   = head . filter ((> 12) . monthDay)\nselectWith Last     = last\nselectWith schedule = (!! fromEnum schedule)\n\nmonthDay :: Day -> Int\nmonthDay day = let (_, _, md) = toGregorian day\n               in md\n\nmeetupDay :: Schedule -> Weekday -> Integer -> Int -> Day\nmeetupDay schedule weekday year month\n    = selectWith schedule $ filter rightWeekDay monthDays\n  where\n    rightWeekDay day = let (_, _, wdAsInt) = toWeekDate day\n                       in wdAsInt == fromEnum weekday\n    monthDays = map (fromGregorian year month)\n                    [1 .. gregorianMonthLength year month]	\N	f	1	1	2014-04-10 20:59:46	2014-04-10 20:59:46	457	Meetup.hs
911	28	c9a6639555cba7cee281ce19	superseded	python	bob	class Bob():\n\n    messages = {\n        "Tom-ay-to, tom-aaaah-to.": "Whatever.",\n        "Let's go make out behind the gym!": "Whatever.",\n        "It's OK if you don't want to go to the DMV.": "Whatever.",\n        "Ending with ? means a question.": "Whatever.",\n        "Does this cryogenic chamber make me look fat?": "Sure.",\n        "You are, what, like 15?": "Sure.",\n        "Wait! Hang on. Are you going to be OK?": "Sure.",\n        "WATCH OUT!": "Woah, chill out!",\n        "WHAT THE HELL WERE YOU THINKING?": "Woah, chill out!",\n        "1, 2, 3 GO!": "Woah, chill out!",\n        "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!": "Woah, chill out!",\n        "I HATE YOU": "Woah, chill out!",\n    }\n\n    def hey(self, message):\n        try:\n            return self.messages[message]\n        except:\n            return "Fine. Be that way!"	\N	f	5	1	2014-04-15 10:44:39	2014-04-15 10:44:39	460	bob.py
912	28	3137f46cb79e4d2c1f395fa8	superseded	python	bob	class Bob():\n\n    messages = {\n        "Tom-ay-to, tom-aaaah-to.": "Whatever.",\n        "Let's go make out behind the gym!": "Whatever.",\n        "It's OK if you don't want to go to the DMV.": "Whatever.",\n        "Ending with ? means a question.": "Whatever.",\n        "Does this cryogenic chamber make me look fat?": "Sure.",\n        "You are, what, like 15?": "Sure.",\n        "Wait! Hang on. Are you going to be OK?": "Sure.",\n        "WATCH OUT!": "Woah, chill out!",\n        "WHAT THE HELL WERE YOU THINKING?": "Woah, chill out!",\n        "1, 2, 3 GO!": "Woah, chill out!",\n        "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!": "Woah, chill out!",\n        "I HATE YOU": "Woah, chill out!",\n    }\n\n    def hey(self, message):\n        if not message or not message.strip():\n            return "Fine. Be that way!"\n        try:\n            return self.messages[message]\n        except KeyError, e:\n            return "Whatever."	\N	f	1	3	2014-05-06 07:38:11	2014-05-06 07:38:11	460	bob.py
922	28	1399f6353f07cb8b5e38346f	superseded	ruby	bob	class Bob\n  def hey(message)\n    message = message.to_s.strip\n\n    [\n      Silent,\n      Shout,\n      Ask,\n      State\n    ].find { |type| type.describes?(message) }.response\n  end\nend\n\nclass MessageType\n  def self.describes?(message)\n    raise NotImplementedError\n  end\n\n  def self.response\n    raise NotImplementedError\n  end\nend\n\nclass Silent < MessageType\n  def self.describes?(message)\n    message == ''\n  end\n\n  def self.response\n    'Fine. Be that way!'\n  end\nend\n\nclass Shout < MessageType\n  def self.describes?(message)\n    message == message.upcase\n  end\n\n  def self.response\n    'Woah, chill out!'\n  end\nend\n\nclass Ask < MessageType\n  def self.describes?(message)\n    message =~ /\\?\\z/\n  end\n\n  def self.response\n    'Sure.'\n  end\nend\n\nclass State < MessageType\n  def self.describes?(message)\n    true\n  end\n\n  def self.response\n    'Whatever.'\n  end\nend	\N	f	9	1	2014-05-11 03:21:30	2014-05-11 03:21:30	464	bob.rb
925	28	d678d00184ded12bcda49aca	hibernating	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    song = ""\n    number.downto(to) { |i| song << verse(i) << "\\n" }\n    song\n  end\n\n  def verse(number)\n    first_line_in_verse(number) + second_line_in_verse(number)\n  end\n\n  private\n    def bottles_string(number_of_bottles, beginning_of_line = false)\n      case number_of_bottles\n      when -1\n        "99 bottles"\n      when 0\n        str = "no more bottles"\n        str.capitalize! if beginning_of_line\n        str\n      when 1\n        "1 bottle"\n      else\n        "#{number_of_bottles} bottles"\n      end\n    end\n\n    def action_string(number_of_bottles)\n      take_down = nil\n      case number_of_bottles\n      when 0\n        action_string = "Go to the store and buy some more"\n      when 1\n        take_down = "it"\n      else\n        take_down = "one"\n      end\n      action_string ||= "Take #{take_down} down and pass it around" unless take_down.nil?\n      action_string\n    end\n\n    def first_line_in_verse(number)\n      "#{bottles_string(number, true)} of beer on the wall, #{bottles_string(number)} of beer.\\n"\n    end\n\n    def second_line_in_verse(number)\n      "#{action_string(number)}, #{bottles_string(number - 1)} of beer on the wall.\\n"\n    end\nend	\N	f	5	6	2014-04-08 22:42:50	2014-04-08 22:42:50	467	beer-song.rb
929	28	41aa83d20b4e578957aa9541	superseded	ruby	beer-song	class Beer\n  def sing(number, to = 0)\n    verse_numbers(number, to).inject("") do |song, i|\n      song << verse(i) << "\\n"\n      song\n    end\n  end\n\n  def verse(number)\n    if number == 0\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    else\n      bottles = "#{number} bottles"\n      take_down = "one"\n      bottles_left = "#{number-1} bottles"\n      if number == 1\n        bottles = "1 bottle"\n        take_down = "it"\n        bottles_left = "no more bottles"\n      elsif number == 2\n        bottles_left = "1 bottle"\n      end\n      "#{bottles} of beer on the wall, #{bottles} of beer.\\nTake #{take_down} down and pass it around, #{bottles_left} of beer on the wall.\\n" \n    end\n  end\n\n  def verse_numbers(number, to)\n    # returns an array of the verses to be sung\n    (to..number).to_a.reverse\n  end\nend	\N	f	2	3	2014-05-09 12:03:19	2014-05-09 12:03:19	467	beer-song.rb
942	29	155f2047d19dee45985435e9	superseded	haskell	phone-number	module Phone (areaCode, number, prettyPrint) where\n\nimport Data.Char (isDigit)\n\n-- actually, it should return an error, but unit test wants zeroes\nnumber :: String -> String\nnumber str = checkNum $ filter isDigit str\n    where checkNum num\n            | length num == 10      = num\n            | length num == 11\n                && head num == '1'  = tail num\n            | otherwise             = "0000000000"\n\nareaCode :: String -> String\nareaCode str = take 3 $ number str\n\nprettyPrint :: String -> String\nprettyPrint str = "(" ++ area ++ ") " ++ left ++ "-" ++ right\n    where area = take 3 num\n          left = take 3 rest\n          right = drop 3 rest\n          num = number str\n          rest = drop 3 num	\N	f	2	1	2014-02-13 13:26:52	2014-02-13 13:26:52	472	Phone.hs
957	29	a1136240f063640fd3f60918	superseded	python	bob	''' Impementation of bob.py - the first exercise on exercism.io\n\n.. module:: bob.py\n    :platforms: All\n    :synopsis: Implementation of bob\n\n.. moduleauthor:: Keith Gray <idahogray@gmail.com>\n\n'''\n\nclass Bob(object):\n    ''' Implementation of Bob\n\n    '''\n\n    def hey(self, phrase):\n        ''' Bob responds according to README.md when spoken to\n\n        '''\n        if phrase.strip() == '':\n            return 'Fine. Be that way!'\n        elif phrase.endswith('!') and phrase.isupper() or phrase.isupper():\n            return 'Woah, chill out!'\n        elif phrase.endswith('?'):\n            return 'Sure.'\n\n        return 'Whatever.'	\N	f	3	1	2013-10-21 20:33:47	2013-10-21 20:33:47	477	bob.py
961	29	7d7ec76468f53936bda4fd6d	pending	ruby	pythagorean-triplet	class Triplet\n  def initialize(a, b, c)\n    @a, @b, @c = a, b, c\n  end\n\n  def self.where(min_factor: 1, max_factor: 1, sum: nil)\n    triplets(min_factor, max_factor).select do |triplet|\n     triplet.pythagorean? && (!sum || triplet.sum == sum )\n   end.compact\n  end\n\n  def sum\n    sides.inject :+\n  end\n\n  def product\n    sides.inject :*\n  end\n\n  def pythagorean?\n    self if @a ** 2 + @b ** 2 == @c ** 2\n  end\n\nprivate\n\n  def sides\n    [@a, @b, @c]\n  end\n\n  def self.triplets(from, to)\n    [*from..to].permutation(2).each_with_object([]) do |(a, b), array| \n      hypo = hypotenuse a, b if a < b\n      array << new(a, b, hypo) if hypo && hypo <= to\n    end\n  end\n\n  def self.hypotenuse(a, b)\n    hypo = Math.sqrt(a ** 2 + b ** 2)\n    hypo.to_i if hypo.floor == hypo\n  end\n\nend	\N	f	3	4	2013-10-17 14:35:00	2013-10-17 14:35:00	480	triplet.rb
970	29	66035fc9d855b28bd5136711	superseded	ruby	triangle	class Triangle\n\n  def initialize *sides\n    raise unless sides.size == 3\n    @sides = sides\n  end\n\n  def kind\n    raise TriangleError if @sides.any? { |side| side <= 0 } ||\n                           @sides[0]+@sides[1] <= @sides[2] ||\n                           @sides[0]+@sides[2] <= @sides[1] ||\n                           @sides[1]+@sides[2] <= @sides[0]\n\n    return :equilateral if @sides.uniq.size == 1\n    return :isosceles   if @sides.uniq.size == 2\n    return :scalene     if @sides.uniq.size == 3\n\n  end\nend\n\nclass TriangleError < StandardError\nend	\N	f	3	1	2014-02-09 00:26:38	2014-02-09 00:26:38	482	triangle.rb
973	29	a1981f1db57cebca06278685	done	ruby	beer-song	class BeerSong\n  def verse(n)\n    main_verse(n) << next_verse(n)\n  end\n\n  def verses(first, last)\n    first.downto(last).map(&method(:verse)).join("\\n") << "\\n"\n  end\n\n  def sing\n    verses 99, 0\n  end\n\n  def main_verse(n)\n    if n  == 1\n      "#{n} bottle of beer on the wall, #{n} bottle of beer.\\n"\n    elsif n == 0\n      "No more bottles of beer on the wall, no more bottles of beer.\\n"\n    else\n      "#{n} bottles of beer on the wall, #{n} bottles of beer.\\n"\n    end\n  end\n\n  def next_verse(n)\n    if n == 2\n      "Take one down and pass it around, 1 bottle of beer on the wall.\\n"\n    elsif n == 1\n      "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n    elsif n == 0\n      "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    else\n      "Take one down and pass it around, #{n-1} bottles of beer on the wall.\\n"\n    end\n  end\nend	\N	f	3	1	2013-12-13 20:58:25	2013-12-13 20:58:25	484	beer-song.rb
979	30	5ca4bb0b18ce3bb6c42d5d10	done	ruby	bob	=begin\nExercise: Bob\n---------------------------------------\nBob is a lackadaisical teenager. In conversation, his responses are very limited.\nBob answers 'Sure.' if you ask him a question.\nHe answers 'Woah, chill out!' if you yell at him (ALL CAPS).\nHe says 'Fine. Be that way!' if you address him without actually saying anything.\nHe answers 'Whatever.' to anything else.\n_______________________________________\n=end\n\nclass Bob\n\tdef hey(string)\n\t\tstring ||= nil\n\t\tstring = Response.new(string)\n\t\tcase\n\t\t\twhen string.inquire?\n\t\t\t\t'Sure.'\n\t\t\twhen string.caps? # doesn't like: string.upcase \n\t\t\t\t'Woah, chill out!'\n\t\t\twhen string.empty?\n\t\t\t\t"Fine. Be that way!"\n\t\t\twhen string.rude?\n\t\t\t\t"Whatever."\n\t\t\telse\n\t\t\t\t"Whatever."\n\t\tend\n\tend\n\n\tprivate\n\tclass Response < String\n\t\tdef caps?\n\t\t\teql?(upcase)\n\t\tend\n\t\t# unused\n\t\tdef upcase?\n\t\t\tlength.upcase\n\t\tend\n\t\tdef inquire?\n\t\t\tend_with? "?"\n\t\tend\n\t\tdef rude?\n\t\t\tend_with? "!"\n\t\tend\n\tend\nend\n\n=begin\nBob.hey('Tom-ay-to, tom-aaaah-to.');\nBob.hey('WATCH OUT!');\nBob.hey('Does this cryogenic chamber make me look fat?');\nBob.hey('You are, what, like 15?');\nBob.hey("Let's go make out behind the gym!");\nBob.hey("It's OK if you don't want to go to the DMV.");\nBob.hey('WHAT THE HELL WERE YOU THINKING?');\nBob.hey('1, 2, 3 GO!');\nBob.hey('1, 2, 3');\nBob.hey('4?');\nBob.hey('ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!');\nBob.hey('I HATE YOU');\nBob.hey('Ending with ? means a question.');\nBob.hey("Wait! Hang on. Are you going to be OK?");\nBob.hey('');\nBob.hey('    ');\n=end	\N	f	0	1	2014-05-11 18:39:47	2014-05-11 18:39:47	488	bob.rb
980	30	7826235a7b5af31f095ff7bc	pending	python	bob	#!/usr/bin/python\n\nimport re\nimport string\n\n\nclass Bob:\n    def __init__(self):\n        self.question_regex = re.compile(r'.*\\?$')\n        self.shouting_regex = re.compile(r'^[A-Z]+$')\n        self.space_only_regex = re.compile(r'^\\s+$')\n        pass\n\n    def hey(self, message):\n        letters_only = re.sub('[\\s0-9'+re.escape(string.punctuation)+']+', '', message)\n\n        if self.shouting_regex.match(letters_only):\n            return 'Woah, chill out!'\n        elif self.question_regex.match(message):\n            return "Sure."\n        elif self.space_only_regex.match(message) or not message:\n            return 'Fine. Be that way!'\n        else:\n            return 'Whatever.'	\N	f	0	1	2014-05-13 08:52:35	2014-05-13 08:52:35	489	bob.py
982	30	8d0b858103fd8a7afcd0727d	needs_input	ruby	anagram	class Anagram\r\n\r\n\tdef initialize(base_word)\r\n\t\t@base_word = base_word.downcase\r\n\t\t@base_letter_sort = @base_word.chars.sort\r\n\tend\r\n\r\n\tdef match(words_array)\t\r\n\t\twords_array.select { |word| anagram?(word.downcase) }\t\r\n\tend\r\n\r\n\tprivate\r\n\r\n\tdef anagram?(word)\r\n\t\tnot_identical(word) & equal_letter_sorts(word)\r\n\tend\r\n\r\n\tdef not_identical(word)\r\n\t\t@base_word != word\r\n\tend\r\n\r\n\tdef equal_letter_sorts(word)\r\n\t  @base_letter_sort == word.chars.sort \r\n\tend\r\n\r\nend\r\n\r\n#the above code is much faster, but not as easily read possibly, \r\n#as the code below, which makes use of the "permutation" method.\r\n=begin\r\nclass Anagram\r\n\r\n\tdef initialize(base_word)\r\n\t\t@base_word = base_word.downcase\r\n\t\t@base_anagrams = @base_word.scan(/./).permutation.to_a.each_with_object([]) {|arr, sarr| sarr << arr.join}\r\n\tend\r\n\t\t\r\n\tdef match(word_array)\r\n    word_array = word_array.each_with_object([]){\r\n    \t|word, array|\r\n    \tif (@base_word != word.downcase) & @base_anagrams.include?(word.downcase)\r\n    \t\tarray << word\r\n    \tend\r\n    }\r\n\tend\r\n\r\nend\r\n\t\r\n=end	\N	f	3	4	2014-05-16 07:17:21	2014-05-16 07:17:21	490	anagram.rb
988	30	06664f1fc97e6e278745b51f	superseded	ruby	robot-name	class Robot\n  attr_reader :name\n\n  def self.register(name)\n    @names ||= []\n    @names << name\n  end\n\n  def self.registered?(name)\n    @names ||= []\n    @names.index(name)\n  end\n\n  def self.deregister(name)\n    @names.delete(name)\n  end\n\n  def initialize\n    reset\n  end\n\n  def reset\n    self.name = NameGenerator.call\n  end\n\n  def name=(new_name)\n    fail "#{new_name} already registered" if Robot.registered?(new_name)\n\n    Robot.deregister(name)\n    @name = new_name\n    Robot.register(new_name)\n  end\n\n  private\n\n  class NameGenerator\n    def self.call\n      begin\n        name = ""\n        2.times { name += random_letter }\n        3.times { name += random_number.to_s }\n        name\n      end\n    end\n\n    LETTERS = ("A".."Z").to_a\n    NUMBERS = (0..9).to_a\n\n    private\n\n    def self.random_letter\n      LETTERS[rand(LETTERS.length)]\n    end\n\n    def self.random_number\n      NUMBERS[rand(NUMBERS.length)]\n    end\n  end\nend	\N	f	3	1	2014-05-11 14:38:33	2014-05-11 14:38:33	494	robot-name.rb
999	30	58333f96b9b322745d2549ea	superseded	haskell	binary-search-tree	module BST (bstLeft, bstRight, bstValue, singleton, insert, fromList, toList) where\n\nimport Data.List (foldl')\n\ndata Tree a = Tip | Node (Tree  a) a (Tree a)\n\ntype BST = Tree Int\n\nbstLeft :: BST -> Maybe BST\nbstLeft (Node a _ _) = Just a\nbstLeft _ = Nothing\n\nbstRight :: BST -> Maybe BST\nbstRight (Node _ _ a) = Just a\nbstRight _ = Nothing\n\nbstValue :: BST -> Int\nbstValue (Node _ a _) = a\nbstValue Tip  = error "no tip value"\n\nsingleton :: Int -> BST\nsingleton a = Node Tip a Tip\n\ninsert :: Int -> BST -> BST\ninsert x (Tip) = singleton x\ninsert x (Node l a r)   | x <= a = Node (insert x l) a r\ninsert x (Node l a r)   | x > a  = Node l a (insert x r)\n\nfromList :: [Int] -> BST\nfromList [] = Tip\nfromList (x:xs) = foldl' (flip insert) (singleton x) xs\n\ntoList :: BST -> [Int] \ntoList Tip = []\ntoList (Node l a r)   = toList l ++ [a] ++ toList r	\N	f	3	2	2014-05-11 20:20:14	2014-05-11 20:20:14	502	BST.hs
1008	30	6a6b594827a9543a1c8f066b	pending	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\n\nimport Data.Map.Strict (Map, empty, insertWith, fromList)\nimport Data.List (foldl')\n\ncommonNucleotides = "ACTG"\n\ncount :: Char -> [Char] -> Int\ncount n ns\n    | elem n allNucleotides = length $ filter (n==) ns\n    | otherwise             = error $ "invalid nucleotide " ++ (show n)\n    where\n      allNucleotides = 'U' : commonNucleotides\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts = foldl' insertCount defaultMap\n  where\n    insertCount m n = insertWith (+) n 1 m\n    defaultMap      = fromList (zip commonNucleotides (repeat 0))	\N	f	0	6	2014-05-23 14:35:20	2014-05-23 14:35:20	503	dna.hs
1023	37	c881af2435020a34ee1f62a3	superseded	ruby	space-age	class SpaceAge\n  $PLANET_YEAR_RATIOS = {\n    earth: 1.0,\n    mercury: 0.2408467,\n    venus: 0.61519726 ,\n    mars: 1.8808158,\n    jupiter: 11.862615,\n    saturn: 29.447498,\n    uranus: 84.016846,\n    neptune: 164.79132,\n  }\n\n  $EARTH_YEAR_SECONDS = 31557600.0\n\n  attr_reader :seconds\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  private\n  def method_missing(method_name, *args, &block)\n    case \n      when method_name.match(/^on_(.*)$/)\n        on($1)\n\n    else\n      super\n\n    end\n  end\n\n  private\n  def on(planet)\n    (@seconds / planet_year_length_in_seconds(planet)).round(2)\n  end\n\n  private\n  def planet_year_length_in_seconds(planet)\n    $PLANET_YEAR_RATIOS[planet.intern] * $EARTH_YEAR_SECONDS\n  end\n\nend	\N	f	3	1	2014-01-10 00:10:01	2014-01-10 00:10:01	510	space-age.rb
1024	37	536f4c12cd8055c07dcff327	done	ruby	space-age	class SpaceAge\n  PLANET_YEAR_RATIOS = {\n    earth: 1.0,\n    mercury: 0.2408467,\n    venus: 0.61519726 ,\n    mars: 1.8808158,\n    jupiter: 11.862615,\n    saturn: 29.447498,\n    uranus: 84.016846,\n    neptune: 164.79132,\n  }\n\n  EARTH_YEAR_SECONDS = 31557600.0\n\n  attr_reader :seconds\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  private\n  def method_missing(method_name, *args, &block)\n    case \n      when method_name.match(/^on_(.*)$/)\n        on($1)\n\n    else\n      super\n\n    end\n  end\n\n  private\n  def on(planet)\n    (@seconds / planet_year_length_in_seconds(planet)).round(2)\n  end\n\n  private\n  def planet_year_length_in_seconds(planet)\n    PLANET_YEAR_RATIOS[planet.intern] * EARTH_YEAR_SECONDS\n  end\n\nend	\N	f	4	2	2014-02-08 13:16:00	2014-02-08 13:16:00	510	space-age.rb
1025	37	f0b10b105e6eda073fe12f37	superseded	javascript	beer-song	module.exports = (function(){\n\tfunction getBottles(number) {\n\t\tif(number === 0) {\n\t\t\treturn "No more bottles";\n\t\t} else if(number === 1) {\n\t\t\treturn "1 bottle";\n\t\t} else {\n\t\t\treturn number + " bottles"\n\t\t}\n\t}\n\n\tfunction getFirstLine(number) {\n\t\tvar bottles = getBottles(number);\n\t\treturn [bottles, "of beer on the wall,", bottles.toLowerCase(), "of beer."].join(" ");\n\t}\n\n\tfunction getSecondLine(number) {\n\t\tvar bottles = getBottles(number - 1);\n\t\tvar pronoun = number === 1 ? "it" : "one";\n\n\t\tif(number === 0) {\n\t\t\treturn "Go to the store and buy some more, 99 bottles of beer on the wall."\n\t\t} else {\n\t\t\treturn ["Take", pronoun, "down and pass it around,", bottles.toLowerCase(), "of beer on the wall."].join(" ");\n\t\t}\n\t}\n\n\tvar Beer = {\n\t\t"verse": function(number) {\n\t\t\treturn [\n\t\t\t\tgetFirstLine(number),\n\t\t\t\tgetSecondLine(number)\n\t\t\t].join("\\n") + "\\n";\n\t\t},\n\t\t"sing": function(start) {\n\t\t\tvar end = arguments.length === 2 ? arguments[1] : 0;\n\t\t\tvar verses = [];\n\n\t\t\tfor(var i = start; i >= end; i--) {\n\t\t\t\tverses.push(this.verse(i));\n\t\t\t}\n\n\t\t\treturn verses.join("\\n");\n\t\t}\n\t};\n\n\treturn Beer;\n})();	\N	f	2	1	2013-11-23 18:36:08	2013-11-23 18:36:08	511	beer-song.js
1035	37	e039b05c586de35f13cdd5a9	superseded	python	bob	class Bob:\n\n    def hey(self, text):\n        # At first test if there is said anything at all\n        if text.strip() =="":\n            return "Fine. Be that way!"\n        # Then test if Bob is shouted at\n        elif text.isupper():\n            return "Woah, chill out!"\n        # Detect questions\n        elif text[-1] == "?":\n            return "Sure."\n        # At last handle everthing else if nothing from above applies\n        else:\n            return "Whatever."	\N	f	0	1	2013-11-18 00:41:52	2013-11-18 00:41:52	517	bob.py
1046	41	6b7126503f83970606519c71	done	ruby	beer-song	class BeerSong\n  \n  def verse(upper_limit)  \n    if upper_limit == 2\n      two_bottles\n    elsif upper_limit == 1\n      one_bottle\n    elsif upper_limit == 0\n      no_more_bottles\n    else\n      multiple_bottles(upper_limit)\n    end  \n  end\n\n  def verses(upper_limit, bottom_limit)\n    (upper_limit).downto(bottom_limit).map do |current_verse|\n      verse(current_verse)\n    end.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses(99, 0)\n  end\n\n  private\n\n    def multiple_bottles(amount)\n      new_amount = amount - 1\n      [\n        "#{amount} bottles of beer on the wall, #{amount} bottles of beer.",\n        "Take one down and pass it around, #{new_amount} bottles of beer on the wall."\n      ].join("\\n") + "\\n"\n    end\n\n    def two_bottles\n      "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\n    end\n\n    def one_bottle\n      "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n    end\n\n    def no_more_bottles\n      "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    end\n\n    \n\n\n\nend	\N	f	5	1	2014-04-23 10:47:12	2014-04-23 10:47:12	523	beer-song.rb
1057	41	97496d26fd49df5301e8f9d6	done	haskell	anagram	module Anagram (anagramsFor) where\nimport Data.List (sort)\nimport Data.Char (toLower)\n\nanagramsFor :: String -> [String] -> [String]\nanagramsFor word = filter (isAnagram . normalize)\n  where\n    normalize xs = let nxs = map toLower xs in (nxs, sort nxs)\n    (nw, sw) = normalize word\n    isAnagram (w, s) = nw /= w && sw == s	\N	f	3	2	2014-03-31 20:00:04	2014-03-31 20:00:04	525	Anagram.hs
1060	41	768fed89dc57a19beb9f8f5f	superseded	ruby	proverb	class Proverb\r\n    def initialize(*missing_things, qualifier: nil)\r\n        @missing_things = missing_things\r\n        @qualifier = qualifier + " " if qualifier\r\n        make_proverb\r\n    end\r\n\r\n    def to_s\r\n        @proverb\r\n    end\r\n\r\n    private\r\n\r\n    def make_proverb\r\n        @proverb = ""\r\n        (0...@missing_things.length-1).each do |index|\r\n            @proverb << line_from(@missing_things[index], @missing_things[index+1])\r\n        end\r\n        @proverb << last_line\r\n    end\r\n\r\n    def line_from(wanted, lost)\r\n        "For want of a #{wanted} the #{lost} was lost.\\n"\r\n    end\r\n\r\n    def last_line\r\n        "And all for the want of a #{@qualifier}#{@missing_things[0]}."\r\n    end\r\nend\r	\N	f	3	1	2014-03-07 21:00:25	2014-03-07 21:00:25	527	proverb.rb
1065	41	632cdb87c7838420963bd26e	done	ruby	space-age	class SpaceAge\n\n  SECONDS_ON_EARTH = 31557600.0\n\n  ORBITAL_PERIOD_COEFFICIENTS = {\n    earth: 1.0,\n    venus: 0.61519726,\n    mercury: 0.2408467,\n    mars: 1.8808158,\n    jupiter: 11.862615,\n    saturn: 29.447498,\n    uranus: 84.016846,\n    neptune: 164.79132,\n  }\n\n  def initialize(seconds)\n    @seconds = seconds\n  end\n\n  attr_reader :seconds\n\n  ORBITAL_PERIOD_COEFFICIENTS.keys.each do |planet|\n    define_method(:"on_#{planet}") do\n      planet_years(planet)\n    end\n  end\n\n  private\n\n  def planet_years(planet)\n    (earth_years / orbital_period_in_earth_years(planet)).round(2)\n  end\n\n  def earth_years\n    seconds / SECONDS_ON_EARTH\n  end\n\n  def orbital_period_in_earth_years(planet)\n    ORBITAL_PERIOD_COEFFICIENTS[planet]\n  end\n\nend	\N	f	3	1	2014-03-24 15:39:04	2014-03-24 15:39:04	528	space-age.rb
1068	41	34b83df96084495458fbbc72	superseded	clojure	bob	(ns bob.test (:use clojure.test))\n\n(load-file "bob.clj")\n\n(deftest responds-to-something\n  (is (= "Whatever." (bob/response-for "Tom-ay-to, tom-aaaah-to."))))\n\n(deftest responds-to-shouts\n  (is (= "Woah, chill out!" (bob/response-for "WATCH OUT!"))))\n\n(deftest responds-to-questions\n  (is (= "Sure." (bob/response-for "Does this cryogenic chamber make me look fat?"))))\n\n(deftest responds-to-forceful-talking\n  (is (= "Whatever." (bob/response-for "Let's go make out behind the gym!"))))\n\n(deftest responds-to-acronyms\n  (is (= "Whatever." (bob/response-for "It's OK if you don't want to go to the DMV."))))\n\n(deftest responds-to-forceful-questions\n  (is (= "Woah, chill out!" (bob/response-for "WHAT THE HELL WERE YOU THINKING?"))))\n\n(deftest responds-to-shouting-with-special-characters\n  (is (= "Woah, chill out!" (bob/response-for "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!"))))\n\n(deftest responds-to-shouting-numbers\n  (is (= "Woah, chill out!" (bob/response-for "1, 2, 3 GO!"))))\n\n(deftest responds-to-shouting-with-no-exclamation-mark\n  (is (= "Woah, chill out!" (bob/response-for "I HATE YOU"))))\n\n(deftest responds-to-statement-containing-question-mark\n  (is (= "Whatever." (bob/response-for "Ending with ? means a question."))))\n\n(deftest responds-to-silence\n\n  (is (= "Fine, be that way." (bob/response-for ""))))\n\n(run-tests)	\N	f	3	1	2014-03-25 14:49:40	2014-03-25 14:49:40	529	bob.clj
1072	41	42175cc8d9d1e88881cc54b9	superseded	elixir	allergies	defmodule Allergies do\n\n  use Bitwise\n\n  @allergens [\n    {"eggs", 1}, \n    {"peanuts", 2},\n    {"shellfish", 4}, \n    {"strawberries", 8}, \n    {"tomatoes", 16}, \n    {"chocolate", 32},\n    {"pollen", 64},\n    {"cats", 128}\n  ]\n\n  @doc """\n  List the allergies for which the corresponding flag bit is true.\n\n  Allergies should be ordered, starting with the allergie with the least\n  significant bit ("eggs").\n  """\n  @spec list(non_neg_integer) :: [String.t]\n  def list(flags) do\n    lc {allergen, value} inlist @allergens, (flags &&& value) === value, do: allergen\n  end\n\n  @doc """\n  Returns whether the corresponding flag bit in 'flags' is set for the item.\n  """\n  @spec allergic_to?(non_neg_integer, String.t) :: boolean\n  def allergic_to?(flags, item) do\n    Enum.any? list(flags), &(&1 === item)\n  end\nend	\N	f	3	1	2014-03-30 21:06:48	2014-03-30 21:06:48	530	allergies.exs
1081	42	3deb6da7879109992644e981	done	ruby	beer-song	class Beer\n\n  def sing(start, final = 0)\n    song = ""\n    start.downto(final) {|number| song << verse(number) + "\\n"}\n    song\n  end\n\n  def verse(qty)\n    construct_verse(qty)\n  end\n\n  private\n  def construct_verse(qty)\n    wall = " on the wall"\n    down = "down and pass it around,"\n    starter = ( zero?(qty) + beers?(qty) + wall + ", " + zero?(qty) + beers?(qty) ).capitalize\n    middle = ".\\nTake " + last_one?(qty) + down + " " + zero?(qty-1)\n    ender = beers?(qty-1) + wall + ".\\n"\n    \n    starter + ( last_middle?(qty) || middle ) + ender\n  end\n\n  def zero?(qty)\n    qty == 0 ? "no more" : qty.to_s\n  end\n\n  def beers?(qty)\n    qty == 1 ? " bottle of beer" : " bottles of beer"\n  end\n\n  def last_one?(qty)\n    qty == 1 ? "it " : "one "\n  end\n\n  def last_middle?(qty)\n    ".\\nGo to the store and buy some more, 99" if qty == 0\n  end\n\nend	\N	f	1	2	2014-01-25 06:58:15	2014-01-25 06:58:15	535	beer-song.rb
1140	44	70fddbbb87f1867db78429a8	superseded	javascript	word-count	var Words = function (words) {\n  'use strict';\n\n  this.count = { };\n\n  this.parseWords = function(words) {\n    return words.replace(/[^\\w\\s]/gi, '').toLowerCase().split(' ');\n  }\n\n  this.wordCounted = function(word) {\n    if (this.count == 'undefined') { return false; }\n    return this.count[word];\n  }\n\n  this.addWord = function(word) {\n    this.count[word] = 1;\n  };\n\n  this.incrementWord = function(word) {\n    this.count[word]++;\n  }\n\n  this.initialize = function(words){\n    var wordList = this.parseWords(words);\n    for (var item in wordList) {\n      var word = wordList[item];\n      if (word == '') {\n        continue;\n      }\n      if (this.wordCounted(word)) {\n        this.incrementWord(word);\n      } else {\n        this.addWord(word);\n      }\n    }\n  };\n\n  this.initialize(words);\n};\n\nmodule.exports = Words;	\N	f	1	1	2014-03-17 21:39:36	2014-03-17 21:39:36	574	word-count.js
1084	42	ef66d6af83bf6fc8c2d68316	done	elixir	meetup	defmodule Meetup do\n\n  @weekdays Stream.with_index %w[monday tuesday wednesday thursday friday saturday sunday]\n  @ordinals Stream.with_index %w[first second third fourth]\n\n  Enum.each @weekdays, fn({wday, widx}) ->\n    # def monteenth(month, year)\n    def unquote(binary_to_atom(String.replace(wday, "day", "") <> "teenth"))(month, year) do\n      do_find_teenth(month, year, unquote(widx) + 1)\n    end\n\n    # def last_monday(month, year)\n    def unquote(binary_to_atom("last_" <> wday))(month, year) do\n      do_find_last(month, year, unquote(widx) + 1)\n    end\n\n    Enum.each @ordinals, fn({ordinal, oidx}) ->\n      # def first_monday(month, year)\n      def unquote(binary_to_atom("#{ordinal}_#{wday}"))(month, year) do\n        do_find_nth(month, year, unquote(widx) + 1, unquote(oidx) + 1)\n      end\n    end\n  end\n\n  defp do_find_week_day(range, month, year, wday) do\n    day_of_month = Enum.find range, fn(day) ->\n      :calendar.day_of_the_week(year, month, day) == wday end\n    {year, month, day_of_month}\n  end\n\n  defp do_find_teenth(month, year, wday) do\n    do_find_week_day(13..19, month, year, wday)\n  end\n\n  defp do_find_nth(month, year, wday, n) do\n    {y, m, d} = do_find_week_day(1..7, month, year, wday)\n    nth_day = d + (n-1) * 7\n    {y, m, nth_day}\n  end\n\n  defp do_find_last(month, year, wday) do\n    ldom = :calendar.last_day_of_the_month(year, month)\n    do_find_week_day(ldom-6..ldom, month, year, wday)\n  end\n\nend	\N	f	3	2	2014-02-05 22:47:23	2014-02-05 22:47:23	537	meetup.exs
1089	42	38d4637703a56d4993375147	done	clojure	bob	(ns bob (:require [clojure.test :refer :all]))\n\n(defn- deftest? [[s _]]\n  (= (str s) "deftest"))\n\n(defn- question [[_ _ [_ [_ _ q]]]]\n  (second q))\n\n(defn- response [[_ _ [_ [_ res]]]]\n  res)\n\n(defn- read-test [path]\n    (read-string (str \\( (slurp path) \\))))\n\n(def resps\n  (reduce\n    (fn [acc f]\n      (if (deftest? f)\n        (assoc acc (question f) (response f))\n        acc))\n    {}\n    (read-test "bob_test.clj")))\n\n(defn response-for [q]\n  (get resps q "ups"))	\N	f	3	1	2014-01-27 09:12:25	2014-01-27 09:12:25	540	bob.clj
1091	42	f67c27d8148afe5a2caeb5ac	superseded	ruby	pig-latin	class PigLatin\n  def self.translate(input)\n    @@original = input\n\n    paths.each do |condition, outcome|\n      return outcome.call if condition\n    end\n\n  end\n\n  private\n\n  def self.original\n    @@original\n  end\n\n  def self.paths\n    { true                     => lambda {consonant_translation},\n      starts_with_vowel_sound? => lambda {vowel_translation},\n      is_blend?(two)           => lambda {short_blend_translation},\n      is_blend?(three)         => lambda {long_blend_translation},\n      multiple_word_phrase?    => lambda {translate_phrase(original)}\n    }\n  end\n\n\n\n  def self.one\n    original[0]\n  end\n\n  def self.two\n    original[0,2]\n  end\n\n  def self.three\n    original[0,3]\n  end\n\n  def self.consonant_translation\n    original[1..-1] + one + "ay"\n  end\n\n\n\n  def self.starts_with_vowel_sound?\n    vowel_starts.any? { |v| [one, two].include?(v) }\n  end\n\n  def self.vowel_translation\n    original + "ay"\n  end\n\n\n\n  def self.is_blend?(letters)\n    blends.any? { |b| b == letters }\n  end\n\n  def self.short_blend_translation\n    original[2..-1] + two + "ay"\n  end\n\n  def self.long_blend_translation\n    original[3..-1] + three + "ay"\n  end\n\n\n\n  def self.multiple_word_phrase?\n    original.split.length > 1\n  end\n\n  def self.translate_phrase(phrase)\n    phrase.split.collect do |w|\n      translate(w)\n    end.join(" ")\n  end\n\n\n\n  def self.vowel_starts\n    ["a", "e", "i", "o", "u", "xr", "yt"]\n  end\n\n  def self.blends\n    ["ch", "qu", "squ", "th", "thr", "sch"]\n  end\n\nend	\N	f	3	1	2014-02-14 18:38:35	2014-02-14 18:38:35	542	pig_latin.rb
1100	42	4faf8f884c8e74b2b98ada98	done	haskell	linked-list	{-# LANGUAGE ViewPatterns #-}\nmodule Deque (mkDeque, push, pop, shift, unshift) where\n\nimport Control.Concurrent.STM\nimport Control.Monad\nimport Data.Maybe\n\ndata Node a = Node { value :: a, left :: TVar (Node a), right :: TVar (Node a)}\n    deriving Eq\n\ndata Deque a = Deque (TVar (Maybe (Node a)))\n\nmkDeque :: IO (Deque a)\nmkDeque = atomically mkDeque' where\n    mkDeque' = newTVar Nothing >>= return . Deque\n\npush :: Deque a -> a -> IO ()\npush (Deque var) val = atomically $ push' var val where\n    push' var val = do\n        varContents <- readTVar var\n        newNode <- mkNode val\n        writeTVar var $ Just newNode\n        case (varContents) of\n             Nothing -> return ()\n             Just oldNode -> do\n                 leftNode <- readTVar $ left oldNode\n                 writeTVar (left newNode) leftNode\n                 writeTVar (right newNode) oldNode\n                 writeTVar (right leftNode) newNode\n                 writeTVar (left oldNode) newNode\n                \nunshift :: Deque a -> a -> IO ()\nunshift (Deque var) val = atomically $ push' var val where\n    push' var val = do\n        varContents <- readTVar var\n        newNode <- mkNode val\n        case (varContents) of\n             Nothing -> writeTVar var $ Just newNode\n             Just oldNode -> do\n                 leftNode <- readTVar $ left oldNode\n                 writeTVar (left newNode) leftNode\n                 writeTVar (right newNode) oldNode\n                 writeTVar (right leftNode) newNode\n                 writeTVar (left oldNode) newNode\n\nmkNode :: a -> STM (Node a)\nmkNode val = do\n    varL <- newTVar undefined\n    varR <- newTVar undefined\n    let node = Node val varL varR\n    writeTVar varL node\n    writeTVar varR node\n    return node\n\npop :: (Eq a) => Deque a -> IO (Maybe a)\npop (Deque var) = atomically $ pop' var where\n    pop' var = do\n        varContents <- readTVar var\n        case (varContents) of\n             Nothing -> return Nothing\n             Just node@(value -> v) -> do\n                 popNode node >>= writeTVar var\n                 return $ Just v\n\nshift :: (Eq a) => Deque a -> IO (Maybe a)\nshift (Deque var) = atomically $ shift' var where\n    shift' var = do\n        varContents <- readTVar var\n        case (varContents) of\n             Nothing -> return Nothing\n             Just node -> do\n                 leftNode@(value -> v) <- readTVar $ left node\n                 popNode leftNode >>= writeTVar var\n                 return $ Just v\n\npopNode :: (Eq a) => Node a -> STM (Maybe (Node a)) -- pop a node, return its left node if any\npopNode node = popNode' node where\n    popNode' node = do\n        rightNode <- readTVar $ right node\n        if (node == rightNode)\n           then return Nothing\n           else do\n               leftNode <- readTVar $ left node\n               writeTVar (left rightNode) leftNode\n               writeTVar (right leftNode) rightNode\n               return $ Just rightNode	\N	f	3	1	2014-04-12 08:41:11	2014-04-12 08:41:11	547	linked-list.hs
1113	43	c086521b84d89dc828c8b044	done	clojure	bob	(ns bob (:require [clojure.string :refer [trim upper-case blank?]]))\n\n(defn is-shouting? [string]\n\t(= string (upper-case string)))\n\n(defn is-question? [string]\n\t(= \\? (last string)))\n\n(defn response-for [phrase]\n\t(cond \n\t\t(blank? phrase) "Fine. Be that way!"\n\t\t(is-shouting? phrase) "Woah, chill out!"\n\t\t(is-question? phrase) "Sure."\n\t \t:default "Whatever."))	\N	f	1	3	2013-11-19 17:48:03	2013-11-19 17:48:03	556	bob.clj
1116	43	627607e094eae150f921c258	superseded	haskell	nucleotide-count	module DNA (count, nucleotideCounts) where\r\nimport qualified Data.Map.Strict   as M\r\nimport qualified Control.Exception as E\r\nimport           Data.List (foldl')\r\n\r\ntype Nucleotide    = Char\r\ntype NucleotideMap = M.Map Nucleotide Integer\r\n\r\nisNucleotide :: Nucleotide -> Bool\r\nisNucleotide 'A' = True\r\nisNucleotide 'C' = True\r\nisNucleotide 'G' = True\r\nisNucleotide 'T' = True\r\nisNucleotide 'U' = True\r\nisNucleotide  _  = False\r\n\r\n\r\ncount :: Nucleotide -> [Nucleotide] -> Integer\r\ncount _ [] = 0\r\ncount nucleotide (nucleotide':nucleotides)\r\n  | isNucleotide nucleotide =\r\n    count nucleotide nucleotides + if nucleotide == nucleotide' then 1 else 0\r\n  | otherwise    = E.throw $ E.ErrorCall $ "invalid nucleotide " ++ (show nucleotide)\r\n\r\nnucleotideCounts :: [Nucleotide] -> NucleotideMap\r\nnucleotideCounts nucleotides = foldl' updateNucleotideMap emptyNucleotideMap nucleotides\r\n  where\r\n    updateNucleotideMap :: NucleotideMap -> Nucleotide -> NucleotideMap\r\n    updateNucleotideMap nucleotideMap nucleotide = M.insertWith (+) nucleotide 1 nucleotideMap\r\n\r\n    emptyNucleotideMap :: NucleotideMap\r\n    emptyNucleotideMap = M.fromList [('A', 0), ('C', 0), ('G', 0), ('T', 0)]\r	\N	f	1	1	2013-11-22 14:49:05	2013-11-22 14:49:05	557	DNA.hs
1126	43	2e6e75ab14e761bb3c6a5901	pending	clojure	roman-numerals	(ns roman)\n\n(defn- unit-value\n  [n magnitude]\n  (quot (rem n\n             (* 10 magnitude))\n        magnitude))\n\n(defn- unit-fn\n  [I V X magnitude]\n  (fn [n]\n    (let [unit-value (unit-value n magnitude)]\n\n      (case unit-value\n        1 [I      ]   2 [I I    ]   3 [I I I  ]\n        4 [I V    ]   5 [V      ]   6 [V I    ]\n        7 [V I I  ]   8 [V I I I]   9 [I X    ]   []))))\n\n(def ^:private ones      (unit-fn "I" "V" "X"    1))\n(def ^:private tens      (unit-fn "X" "L" "C"   10))\n(def ^:private hundreds  (unit-fn "C" "D" "M"  100))\n(def ^:private thousands (unit-fn "M" "-" "-" 1000))\n\n(defn numerals\n  [decimal]\n  (apply str (flatten\n         ((juxt thousands hundreds tens ones) decimal))))	\N	f	1	1	2014-03-26 10:58:07	2014-03-26 10:58:07	565	roman.clj
1141	44	478a76993104a7f37635b9e9	superseded	javascript	word-count	var Words = function (words) {\n  'use strict';\n\n  this.count = { };\n  this.words = [];\n\n  this.parseWords = function(words) {\n    var temp_words = words.replace(/[^\\w\\s]/gi, '').toLowerCase().split(' ');\n    return temp_words.filter(function(word){\n      return word != "";\n    });\n  }\n\n  this.wordCounted = function(word) {\n    if (this.count == 'undefined') { return false; }\n    return this.count[word];\n  }\n\n  this.addWord = function(word) {\n    this.count[word] = \n    this.words.filter(function(x){\n      return x === word;\n    }).length;\n  };\n\n  this.initialize = function(words){\n    this.words = this.parseWords(words);\n    for (var item in this.words) {\n      var word = this.words[item];\n      if (!this.wordCounted(word)) {\n        this.addWord(word);\n      }\n    }\n  };\n\n  this.initialize(words);\n};\n\nmodule.exports = Words;	\N	f	0	2	2014-04-09 00:50:31	2014-04-09 00:50:31	574	word-count.js
1146	44	0476860c076a47057ed5047d	hibernating	clojure	meetup	(ns meetup\n  (:import (java.util Calendar GregorianCalendar)))\n\n(def day-map {'mon Calendar/MONDAY\n              'tues Calendar/TUESDAY\n              'wednes Calendar/WEDNESDAY\n              'thurs Calendar/THURSDAY\n              'fri Calendar/FRIDAY\n              'satur Calendar/SATURDAY\n              'sun Calendar/SUNDAY})\n\n(defn meetupday [month year day-range week-day]\n  (let [month-num (- month 1)\n        first-day (case day-range\n                    first 1\n                    second 8\n                    third 15\n                    fourth 22\n                    teenth 13\n                    last (-> (new GregorianCalendar year month-num 1)\n                             (.getActualMaximum Calendar/DAY_OF_MONTH)\n                             (+ -6)))\n        target-day (day-map week-day)\n        first-week-day (-> (new GregorianCalendar year month-num first-day)\n                           (.get Calendar/DAY_OF_WEEK))\n        week-day-diff (mod (- target-day first-week-day) 7)]\n    [year month (+ first-day week-day-diff)]))\n\n(doseq [day-name (keys day-map)]\n  (intern *ns* \n          (symbol (str day-name "teenth"))\n          (fn [month year]\n            (meetupday month year 'teenth day-name))))\n\n(doseq [day-name (keys day-map)]\n  (doseq [range-name ['first 'second 'third 'fourth 'last]]\n    (intern *ns* \n            (symbol (str range-name "-" day-name "day"))\n            (fn [month year]\n              (meetupday month year range-name day-name)))))	\N	f	0	1	2013-11-22 20:16:57	2013-11-22 20:16:57	576	meetup.clj
1149	44	68612dbedd83c10904c15acd	superseded	coffeescript	palindrome-products	module.exports = class Palindromes\n  class Palindrome\n    constructor: (@value, @factors = [])->\n    hasFactor: (cmpFactor)->\n      for factor in @factors\n        return true if factorsEqual(factor,cmpFactor)\n      false\n    @compare: (a,b)->\n      if a.value < b.value\n        -1\n      else if a.value == b.value\n        0\n      else\n        1\n    factorsEqual = (a,b)->\n      return true if a == b\n      return false if !a? || !b? || a.length != b.length\n      \n      for val,index in a\n        return false if val != b[index]\n      true\n        \n  constructor: (options = {})->\n    @minFactor = options.minFactor ? 1\n    @maxFactor = options.maxFactor ? 1\n    @range = [@minFactor..@maxFactor]\n    @palindromes = {}\n  generate: ->\n    @palindromes = {}\n    @array = null\n    for i in @range\n      for j in @range when isPalindrome(i*j)\n        factor = [i,j].sort()\n        product = i*j\n        palindrome = @palindromes[product] ? new Palindrome(product)\n        palindrome.factors.push(factor) unless palindrome.hasFactor factor\n        @palindromes[product] = palindrome\n    this\n  smallest: ->\n    @toArray()[0]\n  largest: ->\n    @toArray().slice(-1)[0]\n  toArray: ()->\n    @array ?= (palindrome for value, palindrome of @palindromes).sort(Palindrome.compare)\n  isPalindrome = (num)->\n    num.toString() == num.toString().split('').reverse().join('')	\N	f	0	3	2013-12-29 12:43:35	2013-12-29 12:43:35	577	palindrome.coffee
1158	44	1b80e29005051bad7000800c	done	ruby	bob	# encoding: utf-8\n\nclass Bob\n  def hey appeal\n    return 'Woah, chill out!' if shouting?(appeal)\n    return 'Sure.' if question?(appeal)\n    return 'Fine. Be that way!' if no_statement?(appeal)\n    return 'Whatever.'\n  end\n\n  protected\n  def question? appeal\n    appeal.end_with?("?")\n  end\n\n  def shouting? appeal\n    appeal.match(/\\A[^a-z]+\\Z/) && appeal.match(/[A-Z]/)\n  end\n\n  def no_statement? appeal\n    appeal.match(/\\A\\s*\\Z/)\n  end\nend	\N	f	1	3	2014-05-04 20:21:44	2014-05-04 20:21:44	580	bob.rb
1159	44	cd68928abb40c4620b97d725	pending	javascript	nucleotide-count	var DNA = function(string) {\n\n  var nucleotides = ["A", "T", "C", "G"];\n  var self = this;\n\n  this.generateNucleotides = function(string){\n    var container = {}\n\n    nucleotides.forEach(function(element){\n      container[element] = self.count(element);\n    });\n    \n    return container;\n  };\n\n  var isValidElement = function(char){\n    return (char == "A" || char == "T" || char == "C" || char == "G" || char == "U");\n  };\n\n  this.count = function(char){\n    var count = 0;\n\n    if (!isValidElement(char)){\n      throw  new Error("Invalid Nucleotide")\n    }\n\n    for(i = 0; i < string.length; i ++){\n      var currentChar = string[i];\n      if (currentChar == char){\n        count += 1;\n      };\n    };\n\n    return count;\n  }\n\n  this.nucleotideCounts = this.generateNucleotides(string);\n}\n\nmodule.exports = DNA;	\N	f	1	1	2014-03-13 00:41:49	2014-03-13 00:41:49	581	nucleotide-count.js
1162	44	86d106c303104df33bcb2550	superseded	clojure	phone-number	;;;; Phone Number\n;;;;\n;;;; Write a program that cleans up user-entered phone numbers so that\n;;;; they can be sent SMS messages.\n;;;;\n;;;; The rules are as follows:\n;;;;\n;;;; * If the phone number is less than 10 digits assume that it is bad number\n;;;; * If the phone number is 10 digits assume that it is good\n;;;; * If the phone number is 11 digits and the first number is 1, trim the 1 and use the first 10 digits\n;;;; * If the phone number is 11 digits and the first number is not 1, then it is a bad number\n;;;; * If the phone number is more than 11 digits assume that it is a bad number\n\n(ns phone)\n\n(def invalid-number "0000000000")\n\n(defn- validate-number\n  [n]\n  (cond\n    (= (count n) 10) n\n    (and (= (count n) 11)  (= (first n) "1")) (rest n)\n    (and (= (count n) 11)  (not= (first n) "1")) invalid-number\n    :else invalid-number))\n\n(defn number\n  [n]\n  (apply str (validate-number (re-seq #"\\w" n))))\n\n(defn area-code\n  [n]\n  (apply str (take 3 n)))\n\n(defn- take-three\n  "Return the first 3 characters in the string"\n  [n]\n  (apply str (take 3 n)))\n\n(defn pretty-print\n  [n]\n  (let [n (number n)]\n       (format "(%s) %s-%s" \n               (take-three n)\n               (take-three (take-last 7 n))\n               (apply str (take-last 4 n)))))	\N	f	1	1	2013-12-07 16:59:16	2013-12-07 16:59:16	584	phone.clj
1171	45	048e5fb3bc8ee370dc98219e	pending	javascript	word-count	var Words = function (words) {\n\n  var obj = {count: {}}, wordArray;\n\n  // strip out everything except alphanumeric chars and whitespace,\n  // then collapse multiple adjacent spaces to single spaces\n  words = words.replace(/[^\\w\\s]|_/g, '')\n               .replace(/\\s+/g, ' ');\n\n  // normalize case\n  words = words.toLowerCase();\n\n  wordArray = words.split(' ');\n\n  for (var i = 0; i < wordArray.length; i += 1) {\n    if (wordArray[i] in obj.count) {\n      obj.count[wordArray[i]] += 1;\n    } else {\n      obj.count[wordArray[i]] = 1;\n    }\n  }\n\n  return obj;\n};\n\nmodule.exports = Words;	\N	f	0	1	2013-11-30 21:43:27	2013-11-30 21:43:27	588	words.js
1172	45	da32d2aab437071cb2c0b87e	hibernating	ruby	anagram	class Anagram\n  def initialize(anagram)\n    @anagram = anagram.downcase\n  end\n\n  def match(potential_matches)\n    @potential_matches = potential_matches\n    return [] if invalid_arguments?\n    matches = []\n\n    @potential_matches.each do |potential_match|\n      anagram_chars = @anagram.chars\n\n      potential_match.chars.each do |potential_match_char|\n        anagram_chars.slice! anagram_chars.index(potential_match_char) if anagram_chars.include? potential_match_char\n      end\n\n      matches << potential_match if anagram_chars.empty?\n    end\n\n    matches\n  end\n\n  private\n\n  def invalid_arguments?\n    return true unless @potential_matches.instance_of? Array\n    clean_array!\n    return true if @potential_matches.empty?\n    false\n  end\n\n  def clean_array!\n    @potential_matches.map! { |word| word.downcase }\n    remove_improper_lengths!\n    remove_exact_matches!\n  end\n\n  def remove_exact_matches!\n    @potential_matches.delete @anagram\n  end\n\n  def remove_improper_lengths!\n    @potential_matches.select! { |word| word.length == @anagram.length }\n  end\n\nend	\N	f	0	1	2013-10-30 02:13:43	2013-10-30 02:13:43	589	anagram.rb
1184	45	b396322d8774f1e5309282e3	superseded	python	word-count	import re\nimport collections\n\nclass Phrase(object):\n  \n    def __init__(self, sentence):\n        self.sentence = sentence\n    \n    def word_count(self):\n        return collections.Counter(self._words())\n        \n    def _words(self):\n        return re.findall(self._words_pattern(), self.sentence.lower())\n\n    def _words_pattern(self):\n        return '\\w+'	\N	f	1	3	2013-12-29 01:19:11	2013-12-29 01:19:11	597	word-count.py
1186	45	6dd006a024cbfeccd88cf0bc	pending	javascript	grade-school	var School = function(){\n    var result_dic = {};\n    this.roster = function(){\n        return result_dic;\n    }\n    this.grade = function(a_idx){\n        if(result_dic[a_idx] == undefined){\n            return [];\n        }\n        return result_dic[a_idx];\n    }\n    this.add = function(a_name,a_idx){\n        if(result_dic[a_idx] == undefined){\n            result_dic[a_idx] = [];\n        }\n        result_dic[a_idx].push(a_name);\n        result_dic[a_idx].sort();\n    }\n}\nmodule.exports = School;	\N	f	1	1	2013-12-17 06:01:33	2013-12-17 06:01:33	598	grade-school.js
1196	46	13a1cc2136b6d9a126242df0	hibernating	javascript	point-mutations	var DNA = function(dna_string) {\n\n\tthis.dna_string = dna_string;\n\n\tthis.hammingDistance = function(another_dna_string) {\n\t\tvar dist = 0;\n\t\tvar i;\n\n\t\t// TODO: remove code duplication\n\t\tif (this.dna_string.length !== 0 && another_dna_string.length !== 0) {\n\t\t\tif (this.dna_string.length === another_dna_string.length) {\n\t\t\t\tfor (i = 0; i < this.dna_string.length; i++) {\n\t\t\t\t\tif (this.dna_string[i] !== another_dna_string[i]) {\n\t\t\t\t\t\tdist++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this.dna_string.length > another_dna_string.length) {\n\t\t\t\t\tfor (i = 0; i < this.dna_string.length - (this.dna_string.length - another_dna_string.length); i++) {\n\t\t\t\t\t\tif (this.dna_string[i] !== another_dna_string[i]) {\n\t\t\t\t\t\t\tdist++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (i = 0; i < another_dna_string.length - (-this.dna_string.length + another_dna_string.length); i++) {\n\t\t\t\t\t\tif (this.dna_string[i] !== another_dna_string[i]) {\n\t\t\t\t\t\t\tdist++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dist;\n\t};\n};\n\nmodule.exports = DNA;	\N	f	3	1	2014-02-21 21:30:47	2014-02-21 21:30:47	605	point-mutations.js
1209	46	4493dd37b3fe867015d3fe43	superseded	ruby	anagram	class Word\n  def initialize word\n    @word = word\n  end\n\n  def normalize\n    @word.downcase.each_char.sort\n  end\nend\n\n\nclass Anagram\n  def initialize word\n    @word = word\n  end\n\n  def match candidates\n    matches = []\n    candidates.each{|candidate|\n      matches << candidate if anagram?(candidate)\n    }\n    matches\n  end\n\n  private\n    def normalized\n      Word.new(@word).normalize\n    end\n\n    def identical_word? candidate\n      @word.downcase == candidate.downcase\n    end\n\n    def anagram? candidate\n      normalized == Word.new(candidate).normalize and not identical_word?(candidate)\n    end\nend	\N	f	0	2	2014-03-13 16:38:00	2014-03-13 16:38:00	610	anagram.rb
1211	46	16653698457f4fc9e696a9d5	pending	python	largest-series-product	class Series(object):\n\n    def __init__(self, numbers) :\n        self.numbers=[int(n) for n in numbers]\n\n    def slices(self, n) :\n        """Produces all series of length n from the sequence\n        Raises ValueError if n<=0 or longer than the sequence\n        """\n        if n <= 0 or n > len(self.numbers) :\n            raise ValueError(\n            "Invalid slice length for this series: {0}".format(n) )\n        \n        return [list(self.numbers[x: x + n] ) \n                for x in range(0, len(self.numbers)-n + 1) ] \n    \n    def largest_product(self, n):\n        if n > 0:\n            return max([ Series.product(slc) for slc in self.slices(n) ] )\n        else:\n            return 1\n\n    @staticmethod\n    def product(inlist):\n        return reduce(lambda x,y: x*y,inlist,1)	\N	f	3	1	2014-03-29 06:22:15	2014-03-29 06:22:15	611	series.py
1223	46	f51f18f7100e258cacebb3ac	done	javascript	bob	var Bob = function() {\n    this.hey = function(what) {\n        message = new Message(what);\n\n        if (message.isSilent()) {\n            return "Fine. Be that way!";\n        }\n        if (message.isShouted()) {\n            return "Woah, chill out!";\n        }\n        if (message.isAsked()) {\n            return "Sure.";\n        }\n        return "Whatever.";\n    };\n};\n\nvar Message = function(message) {\n    this.isSilent = function() {\n        return !message.trim();\n    };\n\n    this.isShouted = function() {\n        return message.toLocaleUpperCase() === message;\n    };\n\n    this.isAsked = function() {\n        return '?' === message.slice(-1);\n    };\n};\n\nmodule.exports = Bob;	\N	f	0	2	2014-01-16 00:33:56	2014-01-16 00:33:56	616	bob.js
1233	47	3a4ecb99a70a42faf9a4459d	superseded	clojure	word-count	;;;; Write a program that given a phrase can count the occurrences\n;;;; of each word in that phrase.\n;;;;\n;;;; For example for the input `"olly olly in come free"`\n;;;;\n;;;; olly: 2\n;;;; in: 1\n;;;; come: 1\n;;;; free: 1\n\n(ns word-count\n  (:use [clojure.string :only [split lower-case]))\n\n(defn- allow-letter? [chr]\n  "Whether chr is [a-zA-Z0-9] or space"\n  (or\n    (and (>= (int chr) (int \\a)) (<= (int chr) (int \\z)))\n    (and (>= (int chr) (int \\A)) (<= (int chr) (int \\Z)))\n    (and (>= (int chr) (int \\0)) (<= (int chr) (int \\9)))\n    (= (int chr) (int \\ ))))\n  \n(defn- depunctuate [sentence]\n  "Return only ascii letters, numerals and spaces in the sentence"\n  (apply str (filter allow-letter? sentence)))\n\n(defn- tokenize [sentence]\n  "Return a list of words in the sentence in lower-case"\n  (split (lower-case (depunctuate sentence)) #"\\s+"))\n\n(defn- process-word [word bucket]\n  "Update the word count in the bucket"\n  (merge bucket {word (inc (get bucket word 0))}))\n\n(defn word-count [str]\n  (loop [words (tokenize str) result {}]\n    (if (empty? words)\n      result\n      (recur (rest words) (process-word (first words) result)))))	\N	f	0	1	2014-04-19 00:28:55	2014-04-19 00:28:55	619	word_count.clj
1313	31	4a8e376bab0078bccffe8c4e	done	ruby	hamming	class Hamming\n  def self.compute(sequence1, sequence2)\n    StrandPair.new(sequence1, sequence2).hamming_distance\n  end\n\n  StrandPair = Struct.new(:sequence, :other_sequence) do\n\n    def hamming_distance\n      nucleic_pair.count(&:mutation?)\n    end\n\n    def nucleic_pair\n      (0...common_length).map do |i|\n        NucleicPair.new(sequence[i], other_sequence[i])\n      end\n    end\n\n    def common_length\n      [sequence.length, other_sequence.length].min\n    end\n\n  end\n\n  NucleicPair = Struct.new(:original_nucleotide, :other_nucleotide) do\n    def mutation?\n      !original_nucleotide.eql?(other_nucleotide)\n    end\n  end\nend	\N	f	10	6	2014-05-09 05:13:35	2014-05-09 05:13:35	659	hamming.rb
1234	47	4f8049d043de93a01bd0ff10	superseded	clojure	word-count	;;;; Write a program that given a phrase can count the occurrences\n;;;; of each word in that phrase.\n;;;;\n;;;; For example for the input `"olly olly in come free"`\n;;;;\n;;;; olly: 2\n;;;; in: 1\n;;;; come: 1\n;;;; free: 1\n\n(ns word-count\n  (:use [clojure.string :only [split lower-case]]))\n\n(defn- allow-letter? [chr]\n  "Whether chr is [a-zA-Z0-9] or space"\n  (or\n    (and (>= (int chr) (int \\a)) (<= (int chr) (int \\z)))\n    (and (>= (int chr) (int \\A)) (<= (int chr) (int \\Z)))\n    (and (>= (int chr) (int \\0)) (<= (int chr) (int \\9)))\n    (= (int chr) (int \\ ))))\n  \n(defn- depunctuate [sentence]\n  "Return only ascii letters, numerals and spaces in the sentence"\n  (apply str (filter allow-letter? sentence)))\n\n(defn- tokenize [sentence]\n  "Return a list of words in the sentence in lower-case"\n  (split (lower-case (depunctuate sentence)) #"\\s+"))\n\n(defn- process-word [word bucket]\n  "Update the word count in the bucket"\n  (merge bucket {word (inc (get bucket word 0))}))\n\n(defn word-count [str]\n  (loop [words (tokenize str) result {}]\n    (if (empty? words)\n      result\n      (recur (rest words) (process-word (first words) result)))))	\N	f	0	2	2014-05-01 08:10:22	2014-05-01 08:10:22	619	word_count.clj
1250	47	b079f37c4766805e8fd67aab	pending	python	nucleotide-count	class DNA(object):\n    """\n\n    """\n    def __init__(self, dna):\n        self.nucleotides = {'A': 0, 'T': 0, 'C': 0, 'G': 0}\n        self.dna         = dna\n        for c in self.dna:\n            try:\n                self.nucleotides[c.upper()] += 1\n            except KeyError:\n                raise ValueError, "Invalid Nucleotide", c\n\n    def count(self, n):\n        if n not in self.nucleotides.keys() + ['U']:\n            raise ValueError, n + " is not a nucleotide."\n        return self.nucleotides.get(n, 0)\n\n    def nucleotide_counts(self):\n        return self.nucleotides	\N	f	1	1	2014-05-11 08:12:03	2014-05-11 08:12:03	629	dna.py
1262	47	beebdb46443108a84972da8d	done	go	allergies	package allergies\n\nconst (\n\tmax_allergen = 128\n)\n\nvar (\n\tallergens = map[int]string{\n\t\t1:            "eggs",\n\t\t2:            "peanuts",\n\t\t4:            "shellfish",\n\t\t8:            "strawberries",\n\t\t16:           "tomatoes",\n\t\t32:           "chocolate",\n\t\t64:           "pollen",\n\t\tmax_allergen: "cats",\n\t}\n)\n\nfunc AllergicTo(i int, allergen string) bool {\n\tfor _, s := range Allergies(i) {\n\t\tif s == allergen {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Given an allergen number, progressively take off the\n// rightmost ones bit by computing i - (i & (i - 1)). Remove\n// the already processed ones bit from the allergen number,\n// and continue until there are either no ones bit left\n// or the ones bit left cannot successfuly index into the\n// allergen table.\nfunc Allergies(i int) (ret []string) {\n\tret = make([]string, 0)\n\tfor {\n\t\tones_bit := i - (i & (i - 1))\n\t\tif ones_bit == 0 || ones_bit > max_allergen {\n\t\t\treturn ret\n\t\t}\n\t\tret = append(ret, allergens[ones_bit])\n\t\ti = i - ones_bit\n\t}\n\treturn ret\n}	\N	f	1	1	2014-05-14 01:01:01	2014-05-14 01:01:01	634	allergies.go
1266	47	b63bc78d13d363df6404137b	done	ruby	bob	class Bob\n  def hey(input)\n    @input = input\n    if silence\n      'Fine. Be that way!'\n    elsif shouting\n      'Woah, chill out!'\n    elsif question\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  def silence\n    @input.strip!\n    @input.length == 0\n  end\n\n  def shouting\n    @input == @input.upcase\n  end\n\n  def question\n    @input.end_with?("?")\n  end\n\nend	\N	f	0	5	2014-04-22 21:43:28	2014-04-22 21:43:28	635	bob.rb
1268	47	386e0bf736e6f20f39a9afd8	superseded	haskell	simple-linked-list	module LinkedList ( List(Cons, Nil)\n                  , datum, next\n                  , new, isNil, nil, toList, fromList, reverseLinkedList\n                  ) where\n\ndata List a = Cons {datum :: a, next :: List a} | Nil\n\nnew :: a -> List a -> List a\nnew = Cons\n\nisNil :: List a -> Bool\nisNil Nil = True\nisNil _   = False\n\nnil :: List a\nnil = Nil\n\ntoList :: List a -> [a]\ntoList (Cons x xs) = x : toList xs\ntoList Nil = []\n\nfromList :: [a] -> List a\nfromList = foldr Cons Nil\n\nreverseLinkedList :: List a -> List a\nreverseLinkedList = rev Nil\n  where\n    rev r (Cons x xs) = rev (Cons x r) xs\n    rev r Nil         = r	\N	f	0	1	2014-04-10 16:19:30	2014-04-10 16:19:30	636	LinkedList.hs
1279	48	5d04255ac7fad18d2a1f47f1	superseded	haskell	bob	module Bob (responseFor) where\nimport Data.Char (toUpper, isSpace, isAlpha)\n\nneeq :: String -> String -> Bool\nf `neeq` g\n\t| null [x | x <- [f,g], x /= []]  = False\n\t| f == g                          = True\n\t| otherwise                       = False\n\n\nresponseFor :: String -> String\nresponseFor input\n\t| [x | x <- input, isSpace x] == input                              = "Fine. Be that way!"\n\t| [toUpper x | x <- input, isAlpha x] `neeq` [x | x <-input, isAlpha x] = "Woah, chill out!"\n\t| last input == '?'                                                 = "Sure."\n\t| otherwise                                                         = "Whatever."	\N	f	1	1	2014-01-24 22:23:38	2014-01-24 22:23:38	643	bob.hs
1293	48	3276df1d68b2e3050258d1fd	done	ocaml	minesweeper	open Core.Std\n\ntype cell = \n  | Mine \n  | Empty\n  | Annot of int\n\ntype field = { cells:cell array array; \n               height: int; \n               width: int\n             }\n\nlet get_value a i j = \n  try match a.cells.(i).(j) with\n      | Mine -> 1\n      | _ -> 0\n  with _ -> 0\n\nlet environment i j = [ (i+1,j);(i+1,j+1);(i,j+1);(i-1,j);(i-1,j-1);(i,j-1);(i+1,j-1);(i-1,j+1);]\n\nlet field_of_stringlist sl = \n    let cells = List.map sl ~f:(fun s -> String.to_list s \n                        |> List.map ~f:(function\n                                         | '*' -> Mine\n                                         |  _ -> Empty\n                                       )\n                        |> Array.of_list ) \n                |> Array.of_list in\n    let height = Array.length cells  \n    and width = try Array.length cells.(0)\n            with _ -> 0 \n                        in\n  { cells ; height ; width}\n  \nlet annotate_field f =  \n  let cells = Array.init f.height ~f:(fun i -> Array.init f.width\n                                                          ~f:(fun j -> if f.cells.(i).(j) <> Mine then\n                                                                         List.map (environment i j) ~f:(fun (k,l) -> get_value f k l)\n                                                                         |> List.fold ~f:(+) ~init:0\n                                                                         |> (function\n                                                                              | 0 -> Empty\n                                                                              | s -> Annot(s)\n                                                                            )\n                                                                       else Mine)) in\n  { cells ; height = f.height ; width = f.width }\n\n\nlet stringlist_of_field f = Array.map f.cells \n                                      ~f:(Array.map  ~f:(fun i -> match i with\n                                                                  | Mine -> "*"\n                                                                  | Annot(s) -> string_of_int s\n                                                                  | _ -> " "\n                                                        ))\n                            |> Array.map ~f:String.concat_array \n                            |> Array.to_list\n\nlet annotate sl = field_of_stringlist sl |> annotate_field |> stringlist_of_field	\N	f	1	1	2013-12-12 15:31:33	2013-12-12 15:31:33	652	minesweeper.ml
1303	48	3fbde55418be9b5d06e36830	superseded	haskell	phone-number	module Phone (number, areaCode, prettyPrint) where\n\t\nimport Data.Char (isDigit)\nimport Text.Printf (printf)\nimport Data.List.Split (splitPlaces)\n\ndata PhoneNumber = PhoneNumber { areacode  :: String\n              \t\t\t\t   , prefix    :: String\n                 \t\t\t   , extension :: String\n\t\t\t\t               } deriving (Show)\n\nbuildNumber :: String -> PhoneNumber\nbuildNumber s = PhoneNumber ac pr ex\n              where [ac, pr, ex] = splitPlaces [3,3,4] s\n\nfmtNumber :: String -> PhoneNumber -> String\nfmtNumber f p = printf f (areacode p) (prefix p) (extension p)\n\nvalidate :: String -> String\nvalidate s | (l == 10) = f\n           | ((l == 11) && (head f == '1')) = tail f\n           | otherwise = replicate 10 '0'\n           where l = length f\n                 f = filter isDigit s\n\nparseNumber :: String -> PhoneNumber\nparseNumber = buildNumber . validate\n\nnumber :: String -> String\nnumber = fmtNumber "%s%s%s" . parseNumber\n\nareaCode :: String -> String\nareaCode = areacode . parseNumber\n\nprettyPrint :: String -> String\nprettyPrint = fmtNumber "(%s) %s-%s" . parseNumber	\N	f	1	2	2013-11-11 03:19:56	2013-11-11 03:19:56	657	phone-number.hs
1308	31	d72392115f1c59347dd65d7d	superseded	ruby	hamming	class Hamming\n  def self.compute(sequence1, sequence2)\n    @counter = 0\n    offset(sequence1, sequence2)\n  end\n\n  private\n\n  def self.offset(sequence1, sequence2)\n    length = matched_length(sequence1, sequence2)\n    (0...length).each do |i|\n      (@counter += 1) unless sequence1[i].eql?(sequence2[i])\n    end\n    return @counter\n  end\n\n  def self.matched_length(sequence1, sequence2)\n    if sequence1.length >= sequence2.length\n      sequence2.length\n    else\n      sequence1.length\n    end\n  end\nend	\N	f	3	1	2014-03-22 05:24:28	2014-03-22 05:24:28	659	hamming.rb
1324	31	7d14e8a5cccba4ffdc5c3466	superseded	ruby	nucleotide-count	class DNA\n  DNA_NUCLEOTIDES = ['A', 'T', 'C', 'G']\n  NUCLEOTIDES     = DNA_NUCLEOTIDES.dup.push('U')\n\n  def initialize(dna)\n    if dna.chars.all? {|char| character_included?(char, DNA_NUCLEOTIDES)}\n      @dna = dna\n    else\n      raise ArgumentError\n    end\n  end\n\n  def count(nucleotide)\n    if character_included?(nucleotide, NUCLEOTIDES)\n      @dna.size - @dna.delete(nucleotide).size\n    else\n      raise ArgumentError\n    end\n  end\n\n  def nucleotide_counts\n    DNA_NUCLEOTIDES.each_with_object(Hash.new) do |nucleotide, counts|\n      counts[nucleotide] = count(nucleotide)\n    end\n  end\n\n  private\n\n  def character_included?(character, collection)\n    collection.include?(character)\n  end\nend	\N	f	3	2	2014-02-21 14:40:32	2014-02-21 14:40:32	663	nucleotide-count.rb
1335	31	fc8cb8cfdde43ef2e5bd7c0c	superseded	ruby	word-count	class Phrase\n\n  def initialize(phrase)\n    @phrase = phrase\n  end\n\n  def word_count\n    words = split_phrase\n\n    results = count_words(words)\n\n    print_results(results)\n  end\n\n  private\n    def split_phrase\n      @phrase.gsub(/[^-a-zA-Z0-9]/, ' ').downcase.split\n    end\n\n    def count_words(words)\n      results = Hash.new(0)\n      words.each do |word|\n        results[word] += 1\n      end\n      results\n    end\n\n    def print_results(results)\n      results.each do |word, count|\n        puts "#{word}: #{count}"\n      end\n    end\nend	\N	f	7	1	2014-02-24 13:35:20	2014-02-24 13:35:20	665	word-count.rb
1343	31	2a671c9c0618ba91b658253c	done	ruby	meetup	class Meetup\n\n  def initialize(month, year)\n    @month = month\n    @year = year\n  end\n\n  def weekday_number(weekday)\n    [:sunday, :monday, :tuesday, :wednesday, :thursday, :friday, :saturday].index(weekday)\n  end\n\n\n  def days_until(weekday, day)\n    (weekday_number(weekday) - day.wday) % 7\n  end\n\n  def day(weekday, which)\n    case which\n    when :teenth then\n      date = Date.new(@year, @month, 13)\n    when :first then\n      date = Date.new(@year, @month, 1)\n    when :second then\n      date = Date.new(@year, @month, 8)\n    when :third then\n      date = Date.new(@year, @month, 15)\n    when :fourth then\n      date = Date.new(@year, @month, 22)\n    when :last then\n      date = Date.new(@year, @month, -1)\n      return date - (7 - (weekday_number(weekday) - date.wday)) % 7\n    end\n    date + days_until(weekday, date)\n  end\n\nend	\N	f	2	1	2014-03-04 17:16:46	2014-03-04 17:16:46	668	meetup.rb
1347	31	5e3299b34138a31cf1dd77ac	done	ruby	atbash-cipher	# Encodes a message by swapping z for a, y for b, etc.\n# Numbers are left unchanged\n# Punctionation and spaces are ignored when encoding\n# A space is added to the output string every 5 characters.\nclass Atbash\n\n  LETTERS = 26\n  PIVOT = 2 * 'a'.ord + LETTERS - 1\n\n  def initialize(message)\n    @message = message\n  end\n\n  def self.encode(message)\n    new(message).encode\n  end\n\n  def encode\n    char_lists.map{ |list| list.join('') }.join(' ')\n  end\n\n  private\n\n    def char_lists\n      new_chars.each_slice(5).to_a\n    end\n\n    def new_chars\n      clean.chars.map { |char| new_char(char) }\n    end\n\n    def clean\n      @message.downcase.gsub(/[^a-zA-Z0-9]/,'')\n    end\n\n    def new_char(char)\n      char =~ /\\d/ ? char : swap_letter(char)\n    end\n\n    def swap_letter(letter)\n      (PIVOT - letter.ord).chr\n    end\nend	\N	f	3	3	2014-05-06 02:32:49	2014-05-06 02:32:49	670	atbash-cipher.rb
1351	39	cec44b5dfd9f88c51a392280	done	ruby	nucleotide-count	class DNA\n  def initialize(dna_string)\n    validate_dna(dna_string)\n    @counts = NucleotideCount.new(dna_string)\n  end\n\n  def count(nucleotide)\n    @counts.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    dna_counts = Hash.new(0)\n    dna_counts['A']=@counts.count('A')\n    dna_counts['T']=@counts.count('T')\n    dna_counts['C']=@counts.count('C')\n    dna_counts['G']=@counts.count('G')\n    dna_counts\n  end\n\n  private\n  def validate_dna(nucleotide_chain)\n    if nucleotide_chain =~ /[^GACT]/\n      throw :ArgumentError\n    end\n  end\nend\n\nclass NucleotideCount\n  def initialize(nucleotide_chain)\n    @nucleotide_string = nucleotide_chain\n  end\n\n  def count(nucleotide)\n    validate_nucleotide(nucleotide)\n    @nucleotide_string.count(nucleotide)\n  end\n\n  private\n  def validate_nucleotide(nucleotide)\n    throw :ArgumentError unless nucleotide =~ /[GACTU]/\n  end\nend	\N	f	3	3	2014-04-16 06:54:46	2014-04-16 06:54:46	673	nucleotide-count.rb
1358	39	61290cf98e9adfc645505fc9	hibernating	ruby	bob	class Bob\n  def hey(text)\n    if silence?(text)\n      'Fine. Be that way!'\n    elsif screaming?(text)\n      'Woah, chill out!'\n    elsif question?(text)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\n  private\n\n  def silence?(text)\n    text.to_s.strip.empty?\n  end\n\n  def screaming?(text)\n    text == text.upcase\n  end\n\n  def question?(text)\n    text.end_with?('?')\n  end\nend	\N	f	0	1	2014-03-26 17:11:37	2014-03-26 17:11:37	677	bob.rb
1365	39	1ef85edfbb46bfb6f5bfb9aa	superseded	ruby	anagram	class Anagram\n  def initialize(word)\n    @word = sanitize_word(word)\n    @permutations = calculate_permutations\n  end\n\n  def match(words)\n    candidates = sanitize_candidates(words)\n\n    candidates.map.with_index do |candidate, index| \n      words[index] if anagram_test(candidate)\n    end.compact!\n  end\n  \n  private\n\n  def anagram_test(candidate)\n    new_perms = @permutations - [candidate]\n    if @permutations.count > new_perms.count\n      true\n    else\n      false\n    end\n  end\n\n  def calculate_permutations\n    @word.split('').permutation.to_a.map{ |perm| perm.join('') } - [@word]\n  end\n\n  def sanitize_word(word)\n    word.downcase.strip\n  end\n\n  def sanitize_candidates(words)\n    words.map { |word| word.downcase.strip }\n  end\nend	\N	f	0	1	2014-05-01 12:01:31	2014-05-01 12:01:31	681	anagram.rb
1372	34	023e4e38aacab7fba024aca8	done	ruby	bob	class Teen\n  @responses = {}\n  def hey (greeting)\n    @responses[Greeting.new(greeting).type_of]\n  end\nend\n\n\n\nclass Bob < Teen\n\n  def initialize \n    @responses  = {\n      none: "Fine. Be that way!", \n      yell: "Woah, chill out!", \n      question: "Sure.", \n      random: "Whatever."\n    }\n  end\n\nend\n\n\n\nclass Greeting \n  def initialize (greeting)\n    @greeting = greeting.strip\n  end\n\n  def type_of\n    if @greeting.length == 0\n      :none\n    elsif @greeting == @greeting.upcase && @greeting.match(/[a-zA-Z]/)\n      :yell\n    elsif @greeting[-1,1] == '?'\n      :question\n    else\n      :random\n    end\n        \n  end\nend	\N	f	0	2	2014-03-14 13:29:45	2014-03-14 13:29:45	685	bob.rb
1378	34	7ad8be2cddfcdb3b99880cb5	pending	ruby	pythagorean-triplet	require 'pry'\n\nclass Triplet\n  attr_reader :first, :second, :third\n\n  def initialize(*args)\n    @first, @second, @third = args[0], args[1], args[2]\n  end\n\n  def sum\n    angles.inject(&:+)\n  end\n\n  def product\n    angles.inject(&:*)\n  end\n\n  def pythagorean?\n    angles[0]**2 + angles[1]**2 == angles[2]**2\n  end\n\n  def angles\n    [first, second, third].sort\n  end\n\n  def self.where(options)\n    min = options[:min_factor] || 1\n    max = options[:max_factor]\n    sum = options[:sum]\n    result = loop_from_hell(min, max)\n    sum ? match_sum(sum, result) : result\n  end\n\n  private\n\n  def self.loop_from_hell(min, max)\n    triplets = []\n    (min..max).to_a.each do |x|\n      (min..max).to_a.each do |y|\n        (min..max).to_a.each do |z|\n          t = Triplet.new(x, y, z)\n          if t.pythagorean? && !in_collection?(triplets, t)\n            triplets << t\n          end\n        end\n      end\n    end\n    triplets\n  end\n\n  def self.in_collection?(collection, triplet)\n    collection.any? {|x| x.angles == triplet.angles}\n  end\n\n  def self.match_sum(sum, collection)\n    collection.select {|t| t.sum == sum}\n  end\n\nend	\N	f	1	1	2014-05-11 03:55:44	2014-05-11 03:55:44	688	pythagorean-triplet.rb
1395	34	73ae78af2bb904afa5954c86	superseded	ruby	robot-name	class Robot\n\n  attr_reader :name\n  attr_accessor :name_generator\n  @robots = []\n\n  def name\n    @name ||= set_name\n  end\n\n  def reset\n    self.class.robots.delete(@name)\n    @name = nil\n  end\n\n  def self.robots\n    @robots\n  end\n\n  def name_generator\n    @name_generator ||= NameProvider.new\n  end\n\n  private\n\n  def set_name\n    begin\n      @name = name_generator.generate_name\n    end while self.class.robots.include?(@name)\n    self.class.robots << @name\n    @name\n  end\n\nend\n\nclass NameProvider\n  def generate_name\n    [letter, letter, number, number, number].join\n  end\n\n  def letter\n    ("A".."Z").to_a.shuffle\n  end\n\n  def number\n    ("0".."9").to_a.shuffle\n  end\n\nend\n\n# Additional Test to prove duplicates are thrown out\n#class RobotTest < MiniTest::Unit::TestCase\n#  def test_duplicate_names\n#    generator = MiniTest::Mock.new\n#    generator.expect(:generate_name, "DW102")\n#    generator.expect(:generate_name, "DW102")\n#    generator.expect(:generate_name, "DW103")\n#    \n#    robot = Robot.new\n#    robot2 = Robot.new\n#    robot.name_generator = generator\n#    robot2.name_generator = generator\n#\n#    assert_equal "DW102", robot.name\n#    assert_equal "DW103", robot2.name\n#  end\n#end	\N	f	1	2	2014-01-28 06:50:09	2014-01-28 06:50:09	699	robot-name.rb
1399	36	dcc66aa7ccd8f782b91e1fbd	superseded	ruby	anagram	class Anagram\n  attr_reader :input\n\n  def initialize(input)\n    @input = input\n  end\n\n  def match(potential_matches)\n    filter(potential_matches).find_all do |potential_match|\n      clean(potential_match) == clean(input)\n    end\n  end\n\nprivate\n\n  def clean(input)\n    input.downcase.split("").sort.join\n  end\n\n  def filter(list_of_words)\n    list_of_words.reject do |word|\n      word.downcase == input.downcase\n    end\n  end\nend	\N	f	0	1	2013-12-04 07:00:44	2013-12-04 07:00:44	701	anagram.rb
1412	36	23721a6626d1a457ebe9a15c	pending	ruby	simple-cipher	module ArrayExtensions\n  refine Array do\n    def infizip other\n      self.map.with_index do |element, index|\n        [element, other[index % other.size]]\n      end\n    end\n  end\nend\n\nclass Cipher\n  using ArrayExtensions\n  attr_reader :key\n\n    C2D = Hash[('a'..'z').zip(0..25)]\n    D2C = ('a'..'z').to_a\n\n  def initialize(key = keygen(256))\n    @key = key\n  end\n\n  def keygen(size)\n    size.times.map { D2C.sample }.join\n  end\n\n  def enc(chr, key)\n    D2C[(C2D[chr] + C2D[key]) % 26]\n  end\n\n  def dec(chr, key)\n    D2C[(C2D[chr] - C2D[key]) % 26]\n  end\n\n  def encode(plaintext)\n    plaintext.each_char.to_a.infizip(@key.each_char.to_a).map { |(s, c)| enc(s, c) }.join\n  end\n\n  def decode(ciphertext)\n    ciphertext.each_char.to_a.infizip(@key.each_char.to_a).map { |(s, c)| dec(s, c) }.join\n  end\n\nend	\N	f	1	1	2013-10-27 02:12:26	2013-10-27 02:12:26	708	cipher.rb
1413	36	c1c91a81b052ca514da52722	done	ruby	nucleotide-count	class NucleicAcid\n\n  attr_accessor :nucleotide_counts\n\n  NUCLEOTIDES = %W|A T C G U|\n\n  def count(nucleotide)\n    nucleotide?(nucleotide)\n    @nucleotide_counts.has_key?(nucleotide) ? @nucleotide_counts[nucleotide] : 0\n  end\n\n  def nucleotide?(nucleotide)\n    raise ArgumentError, 'Not a valid nucleotide' unless NUCLEOTIDES.include?(nucleotide)\n  end\n\nend\n\nclass DNA < NucleicAcid\n\n  DNA_NUCLEOTIDES = %W|A T C G|  \n\n  def initialize(sequence)\n    @sequence = sequence\n    @nucleotide_counts = { 'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0 }\n\n    sequence.chars.each do |nucleotide| \n      dna_nucleotide?(nucleotide)\n      @nucleotide_counts[nucleotide] += 1\n    end\n  end\n\n  def dna_nucleotide?(nucleotide)\n    raise ArgumentError, 'Not a valid DNA nucleotide' unless DNA_NUCLEOTIDES.include?(nucleotide)\n  end\n\nend\n\nclass RNA < NucleicAcid\n\n  RNA_NUCLEOTIDES = %W|A U C G|\n\n  def initialize(sequence)\n    @sequence = sequence\n    @nucleotide_counts = { 'A' => 0, 'U' => 0, 'C' => 0, 'G' => 0 }\n\n    sequence.chars.each do |nucleotide| \n      rna_nucleotide?(nucleotide)\n      @nucleotide_counts[nucleotide] += 1\n    end\n  end\n\n  def rna_nucleotide?(nucleotide)\n    raise ArgumentError, 'Not a valid RNA nucleotide' unless RNA_NUCLEOTIDES.include?(nucleotide)\n  end\n\nend	\N	f	5	1	2014-04-28 09:32:55	2014-04-28 09:32:55	709	nucleotide-count.rb
1417	32	a0e89f31e2e8592d96e7260e	done	ruby	pig-latin	# This is ultra complex\n# but I don't get this one\n\nclass PigLatin\n  \n  def self.translate(word)\n    word.split(" ").map do |separated_word|\n      new(separated_word).translate  \n    end.join(" ")\n  end\n\n  attr_reader :word\n  private :word\n\n  def initialize(word)\n    @word = WordForPigLatin.new(word)\n  end\n\n  def translate\n    if word.first_consonant_move_prohibited? || word.starts_with_vowel? \n      word.to_s + "ay"\n    else\n      word.move_first_consonant_cluster_to_the_end + "ay"\n    end\n  end\n\n  private\n\nend\n\nclass WordForPigLatin\n  \n  attr_reader :word\n  private :word\n\n  def initialize(word)\n    @word = word\n  end\n\n  def to_s\n    word\n  end\n\n  def starts_with_vowel?\n    Char.new(word.chars.first).vowel?\n  end\n\n  def first_consonant_move_prohibited?\n    %w[xr yt].any? { |cluster| word.start_with? cluster }  \n  end\n\n  def move_first_consonant_cluster_to_the_end    \n    first_consonant_cluster = extract_first_consonant_cluster   \n    erase_consonant_cluster_at_the_begginging(first_consonant_cluster) + first_consonant_cluster\n  end\n\n  private\n\n    def extract_first_consonant_cluster\n      if starts_with_special_case?\n        special_cases.find { |cluster| word.start_with? cluster }\n      else\n        word.chars.take_while do |char|\n          !Char.new(char).vowel?\n        end.join\n      end\n    end\n\n    def erase_consonant_cluster_at_the_begginging(cluster)\n      current_word = word.chars\n      cluster.size.times do\n        current_word.shift\n      end\n      current_word.join\n    end\n\n    def starts_with_special_case?\n      special_cases.any? { |cluster| word.start_with? cluster }\n    end\n\n    def special_cases\n      %w[ch qu squ thr th sch yt]\n    end\n\nend\n\nclass Char\n  \n  attr_reader :char\n  private :char\n\n  def initialize(char)\n    @char = char\n  end\n\n  def vowel?\n    vowels.any? { |vowel| vowel == char }\n  end\n\n  private\n\n    def vowels\n      %w[a o e u i]\n    end\n\nend	\N	f	0	1	2014-04-13 17:31:07	2014-04-13 17:31:07	712	pig_latin.rb
1426	32	f3f23792b78a6a456ccf55d5	pending	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def self.leap?(year)\n    new(year).leap?\n  end\n\n  def leap?\n    normal_leap_year || century_leap_year\n  end\n\n  private\n\n  def normal_leap_year\n    divisible_by(4) && !divisible_by(100)\n  end\n\n  def century_leap_year\n    divisible_by(400)\n  end\n\n  def divisible_by(number)\n    year % number == 0\n  end\nend	\N	f	6	8	2014-05-08 16:06:17	2014-05-08 16:06:17	715	year.rb
1428	32	a1d9a9111123f7d2a6c54490	done	ruby	phone-number	class PhoneNumber\n  attr_reader :number\n\n  def initialize phone_number\n    @number = phone_number\n    normalize\n  end\n\n  def area_code\n    number.slice(0,3)\n  end\n\n  def first_three\n    number.slice(3,3)\n  end\n\n  def last_four\n    number.slice(6,4)\n  end\n\n  def set_number_without_country_digit\n    if number.length == 11\n      @number = number.slice(1,10)\n    end\n  end\n\n  def to_s\n    "(#{area_code}) #{first_three}-#{last_four}"\n  end\n\n  private\n  def normalize\n    strip_unwanted_characters\n    strip_country_digit\n  end\n\n  def strip_unwanted_characters\n    @number = number.delete('^0-9')\n  end\n\n  def strip_country_digit\n    if number_valid?\n      set_number_without_country_digit\n    else\n      set_default_number\n    end\n  end\n\n  def number_valid?\n    number.length == 10 || (number.length == 11 && number.slice(0,1) == "1")\n  end\n\n  def set_default_number\n    @number = "0000000000"\n  end\nend	\N	f	1	4	2014-02-20 04:20:00	2014-02-20 04:20:00	716	phone-number.rb
1437	32	17e2ca4ee78dc4a4ed099c00	superseded	ruby	anagram	class WordSorter\n  def self.call(word)\n    word.split(//).sort.join ''\n  end\nend\n\nclass Anagram\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(words)\n    words.group_by do |word| \n      WordSorter.call(@word.downcase) == \n        WordSorter.call(word.downcase) unless same_word?(word)\n    end[true] || []\n  end\n\n  def same_word?(word)\n    @word == word || \n      @word.downcase == word || \n      @word.upcase == word ||\n      @word.capitalize == word\n  end\n\nend	\N	f	0	3	2014-04-19 19:44:36	2014-04-19 19:44:36	717	anagram.rb
1450	32	40c9a628372cb26f3a30ce85	superseded	ruby	simple-cipher	class Cipher\r\n  LETTERS = "abcdefghijklmnopqrstuvwxyz"\r\n\r\n  attr_reader :key\r\n\r\n  def self.generate_key(len=100)\r\n    len.times.reduce("") do |key|\r\n      key << LETTERS[(rand*26).floor]\r\n    end\r\n  end\r\n\r\n  def initialize(new_key)\r\n    new_key ||= Cipher.generate_key\r\n    raise ArgumentError.new("Invalid Key") unless valid_key? new_key\r\n    @key = new_key\r\n  end\r\n\r\n  def encode(plain_text)\r\n    transcode(plain_text, &:+)\r\n  end\r\n\r\n  def decode(code)\r\n    transcode(code, &:-)\r\n  end\r\n\r\n  private\r\n\r\n  def valid_key?(new_key)\r\n    !!new_key.match(/\\A[a-z]+\\Z/)\r\n  end\r\n\r\n  def get_letters(plain_text)\r\n    plain_text.downcase.chars.select do |c|\r\n      c.match /[a-z]/\r\n    end\r\n  end\r\n\r\n  def transcode(text, &direction)\r\n    output = ""\r\n    get_letters(text).each_with_index do |letter, i|\r\n      output << translate(letter, @key[i], &direction)\r\n    end\r\n    output\r\n  end\r\n\r\n  def translate(letter, key_char, &direction)\r\n    LETTERS[yield(letter.ord - "a".ord, key_char.ord - "a".ord) % 26]\r\n  end\r\n\r\nend\r	\N	f	1	1	2014-02-18 04:17:48	2014-02-18 04:17:48	723	simple-cipher.rb
1451	32	1197e88dbbadf2bab3da6b09	done	ruby	simple-cipher	class Cipher\r\n  LETTERS = %w(a b c d e f g h i j k l m n o p q r s t u v w x y z)\r\n\r\n  attr_reader :key\r\n\r\n  def self.generate_key(len = 100)\r\n    len.times.map{ |key| LETTERS[(rand*26).floor] }.join\r\n  end\r\n\r\n  def initialize(new_key)\r\n    fail ArgumentError.new("Invalid Key") unless valid_key? new_key\r\n\r\n    @key = new_key || Cipher.generate_key\r\n  end\r\n\r\n  def encode(plain_text)\r\n    transcode(plain_text, &:+)\r\n  end\r\n\r\n  def decode(code)\r\n    transcode(code, &:-)\r\n  end\r\n\r\n  private\r\n\r\n  def valid_key?(new_key)\r\n    !new_key || !!new_key.match(/\\A[a-z]+\\Z/)\r\n  end\r\n\r\n  def get_letters(plain_text)\r\n    plain_text.downcase.scan /[a-z]/\r\n  end\r\n\r\n  def transcode(text, &direction)\r\n    output = ""\r\n    get_letters(text).each_with_index do |letter, i|\r\n      output << translate(letter, key[i % key.length], &direction)\r\n    end\r\n    output\r\n  end\r\n\r\n  def translate(letter, key_char)\r\n    LETTERS[yield(letter.ord - "a".ord, key_char.ord - "a".ord) % 26]\r\n  end\r\nend\r	\N	f	0	2	2014-02-21 17:43:58	2014-02-21 17:43:58	723	cipher.rb
1463	35	47a52cdf7b46232bc183547d	pending	ruby	raindrops	require 'prime'\n\nclass Raindrops\n\n  def self.convert(number)\n    conversion = factors(number).map(&method(:translate_prime)).compact!\n    conversion && conversion.any? ? conversion.join : number.to_s\n  end\n\n  def self.factors(number)\n    Prime.prime_division(number).flatten.sort.uniq\n  end\n\n  def self.translate_prime(number)\n    if number == 3\n      'Pling'\n\n    elsif number == 5\n      'Plang'\n\n    elsif number == 7\n      'Plong'\n    end\n  end\nend	\N	f	3	2	2014-03-06 00:10:54	2014-03-06 00:10:54	728	raindrops.rb
1478	35	ad47405980a7f2819b3a8522	done	ruby	space-age	class SpaceAge\n  attr_reader :seconds\n  EARTH_YEAR_IN_SECONDS = 31_557_600\n  PLANET_CONVERSIONS = {\n    "earth"       => 1,\n    "mercury"     => 0.2408467,\n    "venus"       => 0.61519726,\n    "mars"        => 1.8808158,\n    "jupiter"     => 11.862615,\n    "saturn"      => 29.447498,\n    "uranus"      => 84.016846,\n    "neptune"     => 164.79132\n  }\n\n  def initialize(age_in_seconds)\n    @seconds = age_in_seconds\n  end\n\n  PLANET_CONVERSIONS.keys.each do |planet|\n    define_method("on_#{planet}") do\n      years_for(planet).round(2)\n    end\n  end\n\n  private\n\n  def years_for(planet)\n    earth_years / PLANET_CONVERSIONS[planet]\n  end\n\n  def earth_years\n    seconds / EARTH_YEAR_IN_SECONDS.to_f\n  end\n\nend	\N	f	3	1	2013-10-27 04:20:37	2013-10-27 04:20:37	734	space-age.rb
1481	33	031e6fbc51304604eeb95bc2	superseded	ruby	hamming	# -----------------------------------------------------------------------------\nclass Hamming\n\n  def self.compute(strand_1_s, strand_2_s)\n    strands_pair        = Acids::StrandsPair.build(strand_1_s, strand_2_s)\n    shortest_strand_len = strands_pair.shortest_strand_len\n\n    return 0 if shortest_strand_len == 0\n\n    nbr_of_mutations = 0\n    shortest_strand_len.times {\n      next_acids_pair   = strands_pair.next_acids_pair\n      mutation_detected = next_acids_pair.mutation_detected?\n      nbr_of_mutations += 1 if mutation_detected\n    }\n    nbr_of_mutations\n  end\nend\n\n# -----------------------------------------------------------------------------\nmodule Acids\n\n  class Pair < Struct.new(:acid_1, :acid_2)\n    def mutation_detected?\n      acid_1 != acid_2\n    end\n  end\n\n\n  class Strand\n    attr_reader :length\n\n    def initialize(strand_s)\n      strand_s  ||= ''\n      @length     = strand_s.length\n      @acids_enum = Enumerator.new(strand_s.chars)\n    end\n\n    def next_acid\n      @acids_enum.next\n    end\n  end\n\n\n  class StrandsPair < Struct.new(:strand_1, :strand_2)\n    def self.build(strand_1_s, strand_2_s)\n      new(Strand.new(strand_1_s), Strand.new(strand_2_s))\n    end\n\n    def next_acids_pair\n      Pair.new(strand_1.next_acid, strand_2.next_acid)\n    end\n\n    def shortest_strand_len\n      [strand_1.length, strand_2.length].min\n    end\n  end\nend	\N	f	0	1	2014-04-18 04:25:00	2014-04-18 04:25:00	736	hamming.rb
1487	33	bb331d7250e24ef7439daa38	superseded	ruby	nucleotide-count	class DNA\n  \n  attr_reader :sequence\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def count(nucleotide)\n    verify_nucleotide(nucleotide)\n    counter.count_nucleotide_occurences(nucleotide)\n  end\n\n  def nucleotide_counts\n    counter.count_all_nucleotides(dna_nucleotides)\n  end\n\n  private\n\n    def counter\n      @counter ||= Counter.new(sequence)\n    end\n\n    def all_nucleotides\n      ["A", "T", "C", "G", "U"]\n    end\n\n    def dna_nucleotides\n      ["A", "T", "C", "G"]\n    end\n\n    def verify_nucleotide(nucleotide)\n      raise ArgumentError unless all_nucleotides.include? nucleotide\n    end\n    \nend\n\n\nclass Counter\n\n  attr_reader :sequence\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def count_nucleotide_occurences(nucleotide)\n    sequence.scan(/#{nucleotide}/).count\n  end\n\n  def count_all_nucleotides(valid_nucleotides)\n    nucleotides_counter = default_counter(valid_nucleotides)\n    sequence.chars.each_with_object(nucleotides_counter) do |nucleotide, counter|\n      counter[nucleotide] += 1\n    end\n  end\n\n  private\n\n    def default_counter(nucleotides)\n      nucleotides.each_with_object({}) do |nucleotide, counter|\n        counter[nucleotide] = 0\n      end\n    end\n\nend	\N	f	0	2	2014-04-18 03:05:46	2014-04-18 03:05:46	738	nucleotide-count.rb
1490	33	a1b96d54487928caddf559a9	pending	ruby	roman-numerals	class Fixnum\r\n\r\n\tdef to_roman\r\n\t\t"#{thousands(self)}#{fivehundred(self)}#{hundreds(self)}#{fifty(self)}#{tens(self)}#{five(self)}#{ones(self)}"\r\n\tend\r\n\r\n\tprivate\r\n\r\n\tdef thousands(num)\r\n\t\troman = ""\r\n\t\t(num / 1000).times {|x|\troman += "M"}\r\n\t\troman\t\t\r\n\tend\r\n\r\n\tdef fivehundred(num)\r\n\t\tnum %= 1000\r\n\t\treturn "CM" if num >= 900\r\n\t\treturn "D" if num >= 500\r\n\tend\r\n\r\n\tdef hundreds(num)\r\n\t\troman = ""\r\n\t\tnum %= 1000\r\n\t\treturn "" if num >= 900\r\n\t\tnum %= 500\r\n\t\treturn "CD" if num >= 400\r\n\t\t(num / 100).times {|x| roman += "C"}\r\n\t\troman\r\n\tend\r\n\r\n\tdef fifty(num)\r\n\t\tnum %= 100\r\n\t\treturn "XC" if num >= 90\r\n\t\treturn "L" if num >= 50\r\n\tend\t\t\r\n\r\n\tdef tens(num)\r\n\t\troman = ""\r\n\t\tnum %= 100\r\n\t\treturn "" if num >= 90\r\n\t\tnum %= 50\r\n\t\treturn "XL" if num >= 40\r\n\t\t(num / 10).times {|x| roman += "X"}\r\n\t\troman\r\n\tend\r\n\r\n\tdef five(num)\r\n\t\tnum %= 10\r\n\t\treturn "IX" if num == 9\r\n\t\treturn "V" if num >= 5\r\n\tend\t\r\n\r\n\tdef ones(num)\r\n\t\troman = ""\r\n\t\tnum %= 10\r\n\t\treturn "" if num == 9\r\n\t\tnum %= 5\r\n\t\treturn "IV" if num == 4\r\n\t\t(num).times {|x| roman += "I"}\r\n\t\troman\r\n\tend\t\r\n\r\nend	\N	f	3	1	2014-04-20 12:32:55	2014-04-20 12:32:55	739	roman.rb
1492	33	7c4a5eb99c4588a7b08212fc	superseded	ruby	anagram	class Anagram\n  def initialize original\n    self.original = original\n  end\n\n  def match candidates\n    self.candidates = candidates\n    anagrams.map &:to_s\n  end\n\n  private\n\n  attr_reader :original, :candidates\n\n  def anagrams\n    candidates.find_all { |candidate| candidate == original }\n  end\n\n  def original= original\n    @original = AnagramWord.new original\n  end\n\n  def candidates= candidates\n    @candidates = candidates.map { |candidate| AnagramWord.new candidate }\n  end\n\n  class AnagramWord\n    include Comparable\n\n    attr_reader :word\n\n    def initialize word\n      @word = word.downcase\n    end\n\n    def letters\n      word.chars.sort\n    end\n\n    def == other\n      other.class == self.class && other.word != self.word && other.letters == self.letters\n    end\n\n    def to_str\n      word\n    end\n    alias :to_s :to_str\n  end\nend	\N	f	4	2	2014-04-13 10:15:23	2014-04-13 10:15:23	741	anagram.rb
1504	33	5cade192415e81e696990efb	superseded	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    exceptional_century? or regular_leap_year?\n  end\n\n  private\n  attr_accessor :year\n\n  def fourth_year?\n    year.modulo(4).zero?\n  end\n\n  def not_a_regular_century?\n    !year.modulo(100).zero?\n  end\n\n  def exceptional_century?\n    year.modulo(400).zero?\n  end\n  \n  def regular_leap_year?\n    fourth_year? && not_a_regular_century?\n  end\nend	\N	f	5	2	2014-05-10 21:48:42	2014-05-10 21:48:42	745	leap.rb
1512	40	6fca16b4de621e3ca8add755	superseded	ruby	anagram	class Anagram\n  attr_reader :anagram\n\n  def initialize(anagram)\n    @anagram = anagram\n  end\n\n  def match(words)\n\n    processed_anagram = word_to_array(anagram)\n    processed_words   = words_to_array(words)\n\n    match = []\n\n    processed_words.each do |word|\n      if array_matcher(processed_anagram, word)\n        match << array_to_word(word)\n      end\n    end\n\n    match\n  end\n\n  private\n\n  def words_to_array(words)\n    processed_words = []\n\n    words.each do |word|\n      processed_word = word_to_array(word)\n      processed_words << processed_word\n    end\n\n    processed_words\n  end\n\n  def word_to_array(word)\n    word.split("")\n  end\n\n  def array_to_word(array)\n    array.join\n  end\n\n  def array_matcher(array1, array2)\n    if array1 - array2 == [] && array1.length == array2.length\n      true\n    else\n      false\n    end\n  end\nend	\N	f	1	1	2013-11-06 14:28:50	2013-11-06 14:28:50	748	anagram.rb
1517	40	4ce11f937cdf4a681b32682a	superseded	ruby	anagram	class Anagram\n  attr_reader :letters\n\n  def initialize(word)\n    @letters = letters_from(word)\n  end\n\n  def match(words)\n    words_collection = collection_from(words)\n\n    match = []\n\n    words_collection.each do |word|\n      if letters.sort == word.sort\n        match << word.join\n      end\n    end\n\n    match\n  end\n\n  private\n\n  def collection_from(words)\n    words.collect{ |word| letters_from(word) }\n  end\n\n  def letters_from(word)\n    word.split("")\n  end\nend	\N	f	1	5	2014-01-02 00:05:26	2014-01-02 00:05:26	748	anagram.rb
1520	40	67f79ef7bbdb2c41185926b5	pending	ruby	house	class House\n\n  def initialize    \n    @verse_parts=[]                                                            # => []\n    @verse_parts[0]="This is "                                                 # => "This is "\n    @verse_parts[1]=""                                                         # => ""\n    @verse_parts[2]="the malt that lay in "                                    # => "the malt that lay in "\n    @verse_parts[3]="the rat that ate "                                        # => "the rat that ate "\n    @verse_parts[4]="the cat that killed "                                     # => "the cat that killed "\n    @verse_parts[5]="the dog that worried "                                    # => "the dog that worried "\n    @verse_parts[6]="the cow with the crumpled horn that tossed "              # => "the cow with the crumpled horn that tossed "\n    @verse_parts[7]="the maiden all forlorn that milked "                      # => "the maiden all forlorn that milked "\n    @verse_parts[8]="the man all tattered and torn that kissed "               # => "the man all tattered and torn that kissed "\n    @verse_parts[9]="the priest all shaven and shorn that married "            # => "the priest all shaven and shorn that married "\n    @verse_parts[10]="the rooster that crowed in the morn that woke "          # => "the rooster that crowed in the morn that woke "\n    @verse_parts[11]="the farmer sowing his corn that kept "                   # => "the farmer sowing his corn that kept "\n    @verse_parts[12]="the horse and the hound and the horn that belonged to "  # => "the horse and the hound and the horn that belonged to "\n    @ending="the house that Jack built.\\n"                                     # => "the house that Jack built.\\n"\n  end\n\n  def verse(number)\n    parts = ""                           # => "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""\n    (number).times do |i|                # => 1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n      parts = @verse_parts[i+1] + parts  # => "", "", "the malt that lay in ", "", "the malt that lay in ", "the rat that ate the malt that lay in ", "", "", "the malt that lay in ", "", "the malt that lay in ", "the rat that ate the malt that lay in ", "", "the malt that lay in ", "the rat that ate the malt that lay in ", "the cat that killed the rat that ate the malt that lay in ", "", "the malt that lay in ", "the rat that ate the malt that lay in ", "the cat that killed the rat that ate t...\n    end                                  # => 1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n    @verse_parts[0] + parts + @ending    # => "This is the house that Jack built.\\n", "This is the malt that lay in the house that Jack built.\\n", "This is the rat that ate the malt that lay in the house that Jack built.\\n", "This is the house that Jack built.\\n", "This is the malt that lay in the house that Jack built.\\n", "This is the rat that ate the malt that lay in the house that Jack built.\\n", "This is the cat that killed the rat that ate the malt that lay in the house that Jack built....\n  end\n\n  def verses(start,finish)\n    verses = (start..finish).map do |n|  # => 1..3\n      verse(n) + "\\n"                    # => "This is the house that Jack built.\\n\\n", "This is the malt that lay in the house that Jack built.\\n\\n", "This is the rat that ate the malt that lay in the house that Jack built.\\n\\n"\n    end                                  # => ["This is the house that Jack built.\\n\\n", "This is the malt that lay in the house that Jack built.\\n\\n", "This is the rat that ate the malt that lay in the house that Jack built.\\n\\n"]\n    verses.join('')                      # => "This is the house that Jack built.\\n\\nThis is the malt that lay in the house that Jack built.\\n\\nThis is the rat that ate the malt that lay in the house that Jack built.\\n\\n"\n  end\n\nend	\N	f	1	1	2014-01-12 16:04:53	2014-01-12 16:04:53	749	house.rb
1521	40	baa0408d36688506dffcd400	pending	ruby	beer-song	class BeerSong\n  MAX_COUNT = 99\n\n  def verse(count)\n    Verse.new(count, MAX_COUNT).verse\n  end\n\n  def verses(start, stop)\n    (stop..start).map { |count| verse(count) + "\\n" }.reverse.join\n  end\n\n  def sing\n    verses(MAX_COUNT, 0)\n  end\nend\n\nclass Verse\n  attr_reader :count, :max_count\n\n  def initialize(count, max_count)\n    @count = count\n    @max_count = max_count\n  end\n\n  def verse\n    [current_wall, reaction].map { |sentence| sentence + "\\n" }.join\n  end\n\n  private\n\n  def current_wall\n    sentence(bottles_on_wall, bottle_count)\n  end\n\n  def reaction\n    empty? ? buy_new_beer : take_down\n  end\n\n  def buy_new_beer\n    reset!\n    sentence("go to the store and buy some more", bottles_on_wall)\n  end\n\n  def take_down\n    sentence("take #{last? ? 'it' : 'one'} down and pass it around", BottleCount.new(next_count).on_wall)\n  end\n\n  def bottles_on_wall\n    bottle_count.on_wall\n  end\n\n  def bottle_count\n    BottleCount.new(count)\n  end\n\n  def sentence(*args)\n    args[0].capitalize!\n    args.join(', ') + '.'\n  end\n\n  def next_count\n    count - 1\n  end\n\n  def empty?\n    count == 0\n  end\n\n  def last?\n    count == 1\n  end\n\n  def reset!\n    @count = @max_count\n  end\nend\n\nclass BottleCount\n  attr_reader :count\n\n  def initialize(count)\n    @count = count\n  end\n\n  def to_s\n    pluralize(count, 'bottle', 'bottles') + ' of beer'\n  end\n\n  def on_wall\n    "#{to_s} on the wall"\n  end\n\n  private\n\n  def pluralize(count, singluar, plural = nil)\n    if count == 0\n      "no more #{plural}"\n    else\n      "#{count} #{count.abs == 1 ? singluar : plural}"\n    end\n  end\nend	\N	f	1	1	2014-02-17 20:46:55	2014-02-17 20:46:55	750	beer_song.rb
1525	40	4bbbf8271e84747e961da0d7	done	ruby	linked-list	class Deque\n  Item = Struct.new(:value, :prev, :next)\n  def initialize\n    @start = Item.new\n    @start.prev = @start\n    @start.next = @start\n  end\n\n  def push(value)\n    list_item = Item.new(value)\n    list_item.next = @start\n    if @start.next.value.nil?\n      list_item.prev = @start\n      @start.next = list_item\n      @start.prev = list_item\n    else\n      list_item.prev = @start.prev\n      @start.prev.next = list_item\n      @start.prev = list_item\n    end\n  end\n\n  def pop(num_of_items = 1)\n    popped_value = @start.prev[:value]\n    num_of_items.times do\n      @start.prev.prev.next = @start\n      @start.prev = @start.prev.prev\n\n    end\n    return popped_value\n  end\n\n  def shift(num_of_items = 1)\n    shifted_value = @start.next[:value]\n    num_of_items.times do\n      @start.next.next.prev = @start\n      @start.next = @start.next.next\n\n    end\n    return shifted_value\n  end\n\n  def unshift(value)\n    list_item = Item.new(value)\n    list_item.prev = @start\n    if @start.prev.value.nil?\n      list_item.next = @start\n      @start.next = list_item\n      @start.prev = list_item\n    else\n      list_item.next = @start.next\n      @start.next.prev = list_item\n      @start.next = list_item\n    end\n  end\nend	\N	f	1	1	2013-10-24 15:24:44	2013-10-24 15:24:44	752	linked_list.rb
1529	40	4998c75b1dc9836fe2ecede6	done	ruby	food-chain	class FoodChainSong\n\n  def verse(song)\n    if song == 1\n      first_verse\n    elsif song == 2\n      second_verse\n    elsif song == 3\n      third_verse\n    elsif song == 4\n      fourth_verse\n    elsif song == 5 \n      fifth_verse\n    elsif song == 6\n      sixth_verse\n    elsif song == 7\n      seventh_verse\n    else\n      eigth_verse\n    end\n  end\n\n  def verses(first, last)\n    first.upto(last).map do |number|\n      verse(number)\n    end.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses(1, 8)\n  end\n\n\n  def first_verse\n    "I know an old lady who swallowed a fly.\\nI don't know why she swallowed the fly. Perhaps she'll die.\\n"\n  end\n\n  def second_verse\n    "I know an old lady who swallowed a spider.\\nIt wriggled and jiggled and tickled inside her.\\n" +\n      "She swallowed the spider to catch the fly.\\n" +\n      "I don't know why she swallowed the fly. Perhaps she'll die.\\n"\n  end\n\n  def third_verse\n    "I know an old lady who swallowed a bird.\\n" +\n      "How absurd to swallow a bird!\\n" +\n      "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n" +\n      "She swallowed the spider to catch the fly.\\n" +\n      "I don't know why she swallowed the fly. Perhaps she'll die.\\n" \n  end\n\n  def fourth_verse\n    "I know an old lady who swallowed a cat.\\n" +\n      "Imagine that, to swallow a cat!\\n" +\n      "She swallowed the cat to catch the bird.\\n" +\n      "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n" +\n      "She swallowed the spider to catch the fly.\\n" +\n      "I don't know why she swallowed the fly. " +\n      "Perhaps she'll die.\\n"\n  end\n\n  def fifth_verse\n   "I know an old lady who swallowed a dog.\\n" +\n      "What a hog, to swallow a dog!\\n" +\n      "She swallowed the dog to catch the cat.\\n" +\n      "She swallowed the cat to catch the bird.\\n" +\n      "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n" +\n      "She swallowed the spider to catch the fly.\\n" +\n      "I don't know why she swallowed the fly. " +\n      "Perhaps she'll die.\\n"\n  end\n\n  def sixth_verse\n    "I know an old lady who swallowed a goat.\\n" +\n      "Just opened her throat and swallowed a goat!\\n" +\n      "She swallowed the goat to catch the dog.\\n" +\n      "She swallowed the dog to catch the cat.\\n" +\n      "She swallowed the cat to catch the bird.\\n" +\n      "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n" +\n      "She swallowed the spider to catch the fly.\\n" +\n      "I don't know why she swallowed the fly. " +\n      "Perhaps she'll die.\\n"\n  end\n\n  def seventh_verse\n    "I know an old lady who swallowed a cow.\\n" +\n      "I don't know how she swallowed a cow!\\n" +\n      "She swallowed the cow to catch the goat.\\n" +\n      "She swallowed the goat to catch the dog.\\n" +\n      "She swallowed the dog to catch the cat.\\n" +\n      "She swallowed the cat to catch the bird.\\n" +\n      "She swallowed the bird to catch the spider that wriggled and jiggled and tickled inside her.\\n" +\n      "She swallowed the spider to catch the fly.\\n" +\n      "I don't know why she swallowed the fly. " +\n      "Perhaps she'll die.\\n"\n  end\n\n  def eigth_verse\n     "I know an old lady who swallowed a horse.\\n" +\n      "She's dead, of course!\\n"\n  end\nend	\N	f	0	1	2013-11-11 20:43:54	2013-11-11 20:43:54	755	food_chain.rb
\.


--
-- Name: submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submissions_id_seq', 1534, true);


--
-- Data for Name: team_managers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_managers (id, user_id, team_id) FROM stdin;
1	1	1
2	7	1
3	2	1
4	1	2
5	1	3
6	1	4
7	7	4
8	2	5
9	7	6
10	7	7
\.


--
-- Name: team_managers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_managers_id_seq', 10, true);


--
-- Data for Name: team_memberships; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_memberships (id, team_id, user_id, created_at, updated_at, confirmed) FROM stdin;
1	1	21	1975-05-01 09:14:14	1975-05-01 09:14:14	t
2	1	14	2010-07-10 23:30:05	2010-07-10 23:30:05	t
3	1	17	1974-07-18 19:25:22	1974-07-18 19:25:22	t
4	1	22	1980-11-14 15:43:25	1980-11-14 15:43:25	t
5	1	10	2009-08-04 14:45:54	2009-08-04 14:45:54	t
6	1	8	1980-05-14 05:55:43	1980-05-14 05:55:43	t
7	1	6	2001-11-16 11:58:24	2001-11-16 11:58:24	t
8	1	29	2013-04-12 04:43:05	2013-04-12 04:43:05	t
9	1	30	2009-10-17 20:48:46	2009-10-17 20:48:46	t
10	1	35	2012-09-25 20:47:01	2012-09-25 20:47:01	t
11	1	15	1972-04-11 19:03:06	1972-04-11 19:03:06	f
12	1	16	1993-02-10 11:22:47	1993-02-10 11:22:47	f
13	1	28	1972-11-12 12:50:14	1972-11-12 12:50:14	f
14	1	31	1990-11-03 12:38:20	1990-11-03 12:38:20	f
15	1	37	1988-04-29 00:25:31	1988-04-29 00:25:31	f
16	1	41	1977-10-07 13:32:22	1977-10-07 13:32:22	f
17	1	42	2006-10-30 01:37:54	2006-10-30 01:37:54	f
18	1	46	2002-04-07 11:10:30	2002-04-07 11:10:30	f
19	2	7	1988-10-14 23:42:32	1988-10-14 23:42:32	t
20	2	35	1970-06-23 07:06:04	1970-06-23 07:06:04	t
21	2	30	1977-11-01 17:23:12	1977-11-01 17:23:12	t
22	2	46	1971-11-02 22:03:07	1971-11-02 22:03:07	t
23	2	18	2000-05-08 06:54:08	2000-05-08 06:54:08	f
24	2	37	1996-03-01 13:42:16	1996-03-01 13:42:16	f
25	3	37	2012-07-21 16:06:57	2012-07-21 16:06:57	f
26	3	7	2005-07-20 19:07:51	2005-07-20 19:07:51	f
27	4	7	1986-10-21 08:11:17	1986-10-21 08:11:17	t
28	4	31	1979-07-11 08:25:45	1979-07-11 08:25:45	t
29	4	21	2011-02-11 16:13:17	2011-02-11 16:13:17	t
30	4	26	1989-01-03 03:58:38	1989-01-03 03:58:38	t
31	4	19	1989-01-04 06:43:15	1989-01-04 06:43:15	t
32	4	24	1975-04-25 14:45:35	1975-04-25 14:45:35	t
33	4	18	2001-12-13 13:05:06	2001-12-13 13:05:06	t
34	4	23	2007-12-11 11:26:14	2007-12-11 11:26:14	t
35	4	25	2014-05-26 19:09:33	2014-05-26 19:09:33	t
36	4	20	2000-05-29 20:12:04	2000-05-29 20:12:04	t
37	4	37	2011-08-10 03:57:53	2011-08-10 03:57:53	f
38	4	11	1973-09-01 07:46:01	1973-09-01 07:46:01	f
39	4	13	1984-06-14 18:25:49	1984-06-14 18:25:49	f
40	5	31	1993-12-24 03:15:31	1993-12-24 03:15:31	t
41	5	39	1976-10-03 14:21:28	1976-10-03 14:21:28	t
42	5	34	1977-07-01 20:56:20	1977-07-01 20:56:20	t
43	5	36	1972-06-05 03:29:08	1972-06-05 03:29:08	t
44	5	32	2008-09-02 21:04:25	2008-09-02 21:04:25	t
45	5	35	1984-04-09 00:28:17	1984-04-09 00:28:17	t
46	5	33	2013-09-04 02:04:05	2013-09-04 02:04:05	t
47	5	38	1983-09-09 04:29:21	1983-09-09 04:29:21	t
48	5	40	2007-05-02 22:29:10	2007-05-02 22:29:10	f
49	5	37	1996-09-22 05:40:12	1996-09-22 05:40:12	f
50	5	7	1999-07-12 09:35:01	1999-07-12 09:35:01	f
51	6	5	2010-08-09 23:06:31	2010-08-09 23:06:31	t
52	6	6	1981-03-25 22:17:38	1981-03-25 22:17:38	t
53	6	8	2008-12-01 11:49:19	2008-12-01 11:49:19	t
54	6	9	1975-11-21 08:05:14	1975-11-21 08:05:14	t
55	6	10	2001-11-24 08:24:16	2001-11-24 08:24:16	t
56	6	11	1987-02-23 11:31:55	1987-02-23 11:31:55	t
57	6	12	2007-12-21 09:54:05	2007-12-21 09:54:05	t
58	6	13	1972-01-12 20:23:19	1972-01-12 20:23:19	t
59	6	14	1970-05-18 09:02:35	1970-05-18 09:02:35	t
60	6	15	2001-03-13 08:10:07	2001-03-13 08:10:07	t
61	6	16	2012-02-18 11:00:18	2012-02-18 11:00:18	t
62	6	17	1980-07-08 12:23:05	1980-07-08 12:23:05	t
63	6	22	2012-10-16 15:16:56	2012-10-16 15:16:56	t
64	6	27	1970-04-20 07:43:20	1970-04-20 07:43:20	t
65	6	28	1984-04-10 06:26:05	1984-04-10 06:26:05	t
66	6	29	2004-05-06 17:45:03	2004-05-06 17:45:03	t
67	6	30	1989-07-21 18:48:23	1989-07-21 18:48:23	t
68	6	31	1977-10-27 13:32:42	1977-10-27 13:32:42	t
69	6	37	1988-09-03 21:58:05	1988-09-03 21:58:05	t
70	6	41	1972-08-28 15:38:58	1972-08-28 15:38:58	t
71	6	42	2007-05-13 16:36:24	2007-05-13 16:36:24	t
72	6	43	1986-09-17 18:03:53	1986-09-17 18:03:53	t
73	6	44	1979-05-01 22:41:33	1979-05-01 22:41:33	t
74	6	45	2006-01-12 23:04:40	2006-01-12 23:04:40	t
75	6	46	1994-06-15 15:05:59	1994-06-15 15:05:59	t
76	6	47	1974-10-30 02:31:47	1974-10-30 02:31:47	t
77	6	48	2013-11-10 23:46:50	2013-11-10 23:46:50	t
78	7	7	2009-12-08 21:40:00	2009-12-08 21:40:00	t
79	7	38	1992-04-06 05:30:41	1992-04-06 05:30:41	t
80	7	31	2002-04-04 20:47:27	2002-04-04 20:47:27	t
81	7	37	1984-03-07 16:34:39	1984-03-07 16:34:39	f
\.


--
-- Name: team_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_memberships_id_seq', 81, true);


--
-- Data for Name: teams; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY teams (id, slug, created_at, updated_at, name) FROM stdin;
1	baconesia	2013-12-06 08:14:02.443023	2013-12-06 08:14:02.443023	baconesia
2	chocolades	2013-12-27 01:02:48.479586	2013-12-27 01:02:48.479586	chocolades
3	ghost	2013-11-25 10:54:15.489314	2013-11-25 10:54:15.489314	ghost
4	motley	2013-10-16 04:37:22.494346	2013-10-16 04:37:22.494346	motley
5	rugrats	2013-11-28 03:50:44.515433	2013-11-28 03:50:44.515433	rugrats
6	slate	2014-01-13 21:19:50.530121	2014-01-13 21:19:50.530121	slate
7	polkadots	2013-09-10 22:08:44.565444	2013-09-10 22:08:44.565444	polkadots
\.


--
-- Name: teams_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('teams_id_seq', 7, true);


--
-- Data for Name: testimonials; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY testimonials (id, body, name, about, homepage, keyword, featured, created_at, updated_at) FROM stdin;
\.


--
-- Name: testimonials_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('testimonials_id_seq', 1, false);


--
-- Data for Name: user_exercises; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY user_exercises (id, user_id, language, slug, iteration_count, state, completed_at, created_at, updated_at, key, is_nitpicker) FROM stdin;
1	7	javascript	strain	1	pending	\N	2014-03-05 20:17:00	2014-03-05 20:17:00	0fa4502dffaa65a812ff84f1	f
2	7	clojure	rna-transcription	1	done	2014-05-14 23:07:52	2014-04-15 09:05:55	2014-05-14 23:07:52	5a84415cf77dec9b101d1f3c	t
3	7	go	binary	1	pending	\N	2013-12-11 17:09:44	2013-12-11 17:09:44	470c9ae2fea84a1ef5a55dc1	t
4	7	ruby	secret-handshake	2	done	2014-04-26 16:41:07	2013-11-23 01:34:28	2014-04-26 16:41:07	8ce222120d083158deab3e9a	t
5	7	ruby	bob	4	done	2014-01-29 01:40:58	2013-09-30 16:44:43	2014-01-29 01:40:58	4c36f17fe6c825fc47dece49	t
6	7	haskell	robot-simulator	1	done	2014-02-11 12:20:48	2013-12-05 22:48:38	2014-02-11 12:20:48	1ee8eb577dca3a27c332a062	t
7	7	ruby	space-age	1	hibernating	\N	2014-03-25 00:59:03	2014-04-03 18:18:03	2e342015629f43b666c4700e	t
8	7	python	bob	3	done	2014-02-02 00:53:36	2013-09-19 20:49:57	2014-02-02 00:53:36	dfddf13304ed315c35e0bbe0	t
9	7	elixir	list-ops	3	hibernating	\N	2013-10-28 08:17:57	2014-03-29 20:40:07	4c79bd3ceea60606fa19cdc1	t
10	7	haskell	rna-transcription	3	done	2014-05-07 12:42:46	2013-11-18 19:42:08	2014-05-07 12:42:46	221a98dcbabe632ce7f29d70	t
11	7	haskell	raindrops	9	done	2014-05-15 21:16:58	2013-09-24 04:10:36	2014-05-15 21:16:58	9f3f07887c52d7435489e729	t
12	7	python	beer-song	1	pending	\N	2013-12-05 11:13:18	2013-12-05 11:13:18	e4e82b991708d77be1766557	t
13	7	ruby	grains	1	pending	\N	2014-01-14 10:44:40	2014-01-14 10:44:40	6193b7186bd25372df638353	t
14	7	perl5	linked-list	2	pending	\N	2013-11-01 09:37:28	2013-11-01 09:37:28	b01c6f5bb1e63676a9979050	t
15	7	ruby	word-count	6	done	2014-02-24 17:59:16	2013-09-12 04:52:06	2014-02-24 17:59:16	6523aef66245f00cfafd2de9	t
16	7	clojure	bob	2	hibernating	\N	2013-10-05 21:16:59	2014-01-28 10:24:24	f50932e6f91069e01913641f	f
17	7	javascript	anagram	3	done	2013-12-25 16:06:08	2013-10-24 04:01:10	2013-12-25 16:06:08	4795015696ef3cdf2973309f	t
18	7	ruby	nucleotide-count	3	hibernating	\N	2013-11-26 05:04:44	2014-05-01 23:50:27	918fe51b5cdd017bc7b723a5	f
19	7	elixir	anagram	1	done	2014-05-15 06:17:29	2014-01-27 18:41:55	2014-05-15 06:17:29	3dff33229cf96779b3b2889d	t
20	7	ruby	scrabble-score	1	hibernating	\N	2014-04-22 12:26:57	2014-04-29 14:55:53	ea0b13b43cd0c1772e24b269	t
21	7	haskell	parallel-letter-frequency	2	done	2014-01-19 14:37:58	2013-11-09 11:52:47	2014-01-19 14:37:58	3ca50f2de24909706466626c	t
22	7	go	word-count	1	pending	\N	2013-09-26 03:01:54	2013-09-26 03:01:54	62fa1637848ea481e6833023	t
23	7	go	octal	1	done	2014-01-11 07:26:50	2013-10-03 12:25:25	2014-01-11 07:26:50	be4aa783dc3df1459059daed	t
24	7	javascript	beer-song	1	hibernating	\N	2014-02-06 08:02:00	2014-04-04 03:13:38	96ccc93ea3a71eb91f862aa7	f
25	7	elixir	roman-numerals	1	done	2014-03-24 02:43:25	2014-02-18 16:18:57	2014-03-24 02:43:25	b562febae79dcb1d3bfea1a6	t
26	7	elixir	leap	2	done	2014-03-06 15:59:39	2013-09-21 20:04:01	2014-03-06 15:59:39	e2e0a63894b32575691fb493	t
27	7	javascript	bob	1	done	2014-01-31 22:07:36	2013-09-21 15:33:11	2014-01-31 22:07:36	dc4140792a2f1ab08c3d3bd0	t
28	7	ruby	anagram	1	done	2014-01-19 22:23:20	2013-12-12 05:02:02	2014-01-19 22:23:20	3d3ad3167e7fbdac891cf01b	t
29	7	haskell	bob	1	done	2013-11-09 16:56:00	2013-10-25 13:01:50	2013-11-09 16:56:00	88dbf5e1fb3af4f86d4d9ed9	t
30	7	coffeescript	word-count	1	pending	\N	2013-11-04 13:01:06	2013-11-04 13:01:06	8d21f87a361ddbe744428d13	t
31	7	javascript	rna-transcription	1	pending	\N	2014-04-06 12:55:55	2014-04-06 12:55:55	ea2b0487ad1d2b27c10104b6	t
32	7	python	anagram	6	done	2014-04-13 06:23:39	2013-09-24 23:59:34	2014-04-13 06:23:39	221d64a093eb988a5b921d7f	t
33	7	ruby	rna-transcription	1	done	2014-03-24 03:20:54	2014-01-21 19:38:29	2014-03-24 03:20:54	6d2afdb2bdb68f5c5db9b1ae	t
34	7	ruby	leap	4	done	2014-05-01 10:28:19	2013-11-05 00:12:28	2014-05-01 10:28:19	2930046f2ac0b716223ab209	t
35	7	haskell	grade-school	1	done	2014-02-23 05:49:49	2014-02-11 14:41:34	2014-02-23 05:49:49	e3510e1664c73caf71b55c31	t
36	7	ruby	sieve	2	pending	\N	2013-10-29 12:33:22	2013-10-29 12:33:22	02a52f28c9d8c9b83b009a17	t
37	7	haskell	word-count	4	done	2014-04-02 14:01:56	2013-11-25 13:23:37	2014-04-02 14:01:56	88b6dc9bc7797f2358eb2f96	t
38	7	elixir	binary	3	done	2014-04-18 06:37:00	2013-09-25 15:36:26	2014-04-18 06:37:00	fdf4023fb976be00af38986f	t
39	7	haskell	nucleotide-count	2	done	2014-05-12 18:11:19	2013-10-06 02:11:26	2014-05-12 18:11:19	8ada569e1cd092d9978a8046	t
40	7	python	rna-transcription	2	pending	\N	2013-12-18 20:00:37	2013-12-18 20:00:37	7734953e91a91588f61bc6b1	t
41	7	ruby	etl	1	done	2014-05-16 09:39:24	2013-09-14 19:02:26	2014-05-16 09:39:24	40ebeec4733ce094b9d8740e	t
42	7	ruby	raindrops	2	pending	\N	2013-09-13 11:33:25	2013-09-13 11:33:25	f6d06cfabb88b6624de4aa46	t
43	7	elixir	bob	1	done	2014-03-23 15:28:13	2014-01-16 22:40:32	2014-03-23 15:28:13	88cf6c164a8879f5585db7f4	t
44	7	haskell	prime-factors	3	done	2014-05-20 03:29:59	2013-10-04 04:10:45	2014-05-20 03:29:59	ebcf5e341b5fd775f020c9bd	t
45	7	ruby	gigasecond	1	done	2013-12-12 05:08:22	2013-10-10 07:59:03	2013-12-12 05:08:22	893df9fc6df07f135a871eb4	t
46	7	clojure	anagram	3	pending	\N	2014-02-23 19:49:04	2014-02-23 19:49:04	a9ab67e4fcc2ce901aaae1ff	t
47	7	go	raindrops	1	pending	\N	2013-12-29 14:37:53	2013-12-29 14:37:53	6339ecb0c2bf54b05fe3313b	t
48	7	ruby	hamming	1	hibernating	\N	2013-09-11 08:09:26	2014-04-29 10:20:20	37dc7310a1798079ed6977a2	t
49	7	ruby	beer-song	1	pending	\N	2013-11-21 23:09:54	2013-11-21 23:09:54	cf3684d5cda2597fdaa1c4a9	t
50	7	go	etl	1	done	2014-04-04 09:53:17	2014-02-08 09:51:33	2014-04-04 09:53:17	5e3f57f248ea622263976468	t
51	7	ruby	roman-numerals	1	done	2014-01-16 00:56:00	2013-10-17 06:18:40	2014-01-16 00:56:00	6f89d88761bdb039bd49aed4	t
52	7	ruby	house	3	done	2014-04-04 08:05:24	2013-12-30 16:58:59	2014-04-04 08:05:24	9ca981aa67411159d94149c4	t
53	7	ruby	triangle	2	done	2014-05-26 18:20:10	2013-10-01 19:48:02	2014-05-26 18:20:10	2001d8de4ae7f5c3233be97e	t
54	7	haskell	roman-numerals	3	done	2014-01-24 23:29:19	2013-11-15 23:41:23	2014-01-24 23:29:19	8bb56b8a5d426eb0086e0f64	t
55	7	ruby	robot-name	2	pending	\N	2013-12-13 20:10:55	2013-12-13 20:10:55	c949d55f37266d097e4ed98f	t
56	7	haskell	simple-linked-list	1	done	2014-01-11 21:40:55	2013-12-23 21:32:22	2014-01-11 21:40:55	780ead260799c2376d135522	t
57	7	go	hamming	3	done	2014-04-22 10:54:32	2013-09-30 14:38:02	2014-04-22 10:54:32	a9871799377a05358eed5582	t
58	3	javascript	word-count	3	done	2014-05-18 04:37:43	2014-02-17 07:35:58	2014-05-18 04:37:43	455d33d26c45538f6bff5878	t
59	3	javascript	bob	2	hibernating	\N	2014-02-10 10:32:21	2014-04-09 23:57:22	98db0201209b91bd3692ac10	f
60	3	javascript	leap	1	pending	\N	2014-04-08 22:26:02	2014-04-08 22:26:02	2b95f801f1511a7561e856e5	t
61	3	javascript	phone-number	5	done	2014-04-24 18:35:19	2014-02-15 23:44:19	2014-04-24 18:35:19	7cae90b4bd25389d63e8a2a2	t
62	3	javascript	grains	1	done	2014-03-18 10:20:57	2014-03-13 10:00:20	2014-03-18 10:20:57	25bf5f9e849c8ed28b1d3129	t
63	3	javascript	rna-transcription	1	done	2014-05-15 01:46:58	2014-03-04 19:12:55	2014-05-15 01:46:58	a962fee976bbed7febf3e113	t
64	3	javascript	prime-factors	1	pending	\N	2014-02-08 09:14:52	2014-02-08 09:14:52	f6cbc552bc23a5f06fea55cb	t
65	3	javascript	anagram	3	done	2014-05-11 22:33:28	2014-02-14 19:17:48	2014-05-11 22:33:28	62638773913122f392980bae	t
66	4	haskell	matrix	1	done	2014-05-21 03:24:26	2014-03-18 15:23:33	2014-05-21 03:24:26	43a38e28331069926c0fd427	t
67	4	haskell	bob	3	done	2014-03-30 20:00:36	2013-11-13 22:02:45	2014-03-30 20:00:36	6029b6918979f615004222cb	t
68	4	haskell	word-count	2	done	2014-03-04 08:56:48	2014-01-13 16:56:13	2014-03-04 08:56:48	95243cea6036c24958684184	t
69	4	haskell	rna-transcription	2	done	2014-02-24 03:12:26	2013-11-11 22:36:14	2014-02-24 03:12:26	d7ae657fccd109cc58597dce	t
70	4	haskell	ocr-numbers	1	done	2014-04-14 14:56:15	2014-03-06 00:22:49	2014-04-14 14:56:15	c78f37ea82a7cb6d959fd3af	t
71	4	haskell	allergies	2	done	2014-02-22 04:36:47	2013-11-02 15:43:24	2014-02-22 04:36:47	0dd1be4d666f12d689d671fa	t
72	4	haskell	sieve	1	done	2014-03-28 06:56:26	2014-02-19 09:50:24	2014-03-28 06:56:26	c28ea0a8f977b5213fc4d77c	t
73	4	haskell	triangle	2	done	2014-02-10 21:30:33	2013-11-14 00:27:34	2014-02-10 21:30:33	b0ef3dbefc6ceed4fd19b51e	t
74	4	haskell	prime-factors	4	done	2014-05-11 00:30:41	2013-12-27 03:57:44	2014-05-11 00:30:41	7b76290161ef873974281317	t
75	21	clojure	word-count	2	done	2014-04-26 05:53:55	2014-02-17 17:57:32	2014-04-26 05:53:55	bf4bdba0f5ee85046dfbdc05	t
76	21	go	nucleotide-count	1	pending	\N	2013-10-11 07:34:30	2013-10-11 07:34:30	46b12d9e9b779927eec736db	t
77	21	objective-c	hamming	2	pending	\N	2013-09-28 07:28:38	2013-09-28 07:28:38	af2a3637a6031b95daee5c8b	t
78	21	ruby	point-mutations	1	done	2014-03-10 16:16:09	2014-02-24 19:20:07	2014-03-10 16:16:09	d3aeec7a01d78299c69f892d	t
79	21	ruby	word-count	2	done	2014-02-20 19:56:25	2013-12-11 09:00:02	2014-02-20 19:56:25	c11ef363eaf5bf62a88e4b5f	t
80	21	javascript	grains	1	done	2014-01-20 07:48:04	2014-01-02 17:21:13	2014-01-20 07:48:04	75a897a821f6c2419a847a40	t
81	21	ruby	robot-name	3	done	2014-02-27 15:08:15	2013-10-01 18:23:19	2014-02-27 15:08:15	4e95b22979506691a574e22d	t
82	21	python	rna-transcription	3	done	2014-05-02 10:05:15	2013-12-14 12:25:37	2014-05-02 10:05:15	1c63a813afa1b1726db06953	t
83	21	clojure	anagram	2	done	2014-01-22 07:18:07	2013-11-05 06:48:56	2014-01-22 07:18:07	b3348114100c4264ccffb2e4	t
84	21	ruby	hamming	1	pending	\N	2013-12-01 18:53:34	2013-12-01 18:53:34	d503b355d073e7a5b5a736f3	t
85	21	clojure	bob	3	done	2014-05-17 04:36:50	2014-01-14 10:55:37	2014-05-17 04:36:50	ebde7ca0817bdc1873219d9c	t
86	21	ruby	leap	1	hibernating	\N	2013-11-12 06:24:53	2014-01-04 08:02:40	31c3d35aa730ad2880505116	f
87	21	python	phone-number	2	done	2014-01-06 05:35:59	2013-11-24 20:43:52	2014-01-06 05:35:59	820ff826ae42f47b9b0a6e8e	t
88	21	javascript	meetup	1	pending	\N	2014-01-05 14:45:02	2014-01-05 14:45:02	7b26cffacaedf946573d7400	t
89	21	haskell	word-count	2	done	2014-02-21 12:03:01	2013-12-16 04:42:47	2014-02-21 12:03:01	f26fe540e00604c7b2ac4712	t
90	21	ruby	crypto-square	1	done	2014-04-20 14:17:26	2013-10-05 03:16:30	2014-04-20 14:17:26	cd58cc2ba75b29ce262d8f59	t
91	21	javascript	etl	2	pending	\N	2013-10-23 17:14:15	2013-10-23 17:14:15	2548295f54f31f02f5aa3590	t
92	21	go	leap	2	done	2014-02-05 00:53:31	2013-11-24 20:03:22	2014-02-05 00:53:31	450767b2a1a307f30f786f5c	t
93	21	ruby	scrabble-score	2	pending	\N	2013-10-13 21:02:39	2013-10-13 21:02:39	06e0882107b9733c8774569d	t
94	26	ruby	hamming	1	pending	\N	2014-05-25 19:54:51	2014-05-25 19:54:51	a3f72d27a98693bf8152c1f0	t
95	26	haskell	allergies	3	done	2014-05-25 18:15:07	2014-05-08 15:30:41	2014-05-25 18:15:07	ca773b5d961c036db894dd98	t
96	26	ruby	leap	2	hibernating	\N	2014-05-03 23:35:43	2014-05-20 11:24:25	48ad1fa7cf7b2fdbca5730c9	f
97	26	go	anagram	2	done	2014-05-17 09:07:06	2014-05-16 01:05:16	2014-05-17 09:07:06	62cb5bf08c1484dc2577d983	t
98	26	python	bob	5	done	2014-05-16 14:00:39	2014-04-28 02:26:16	2014-05-16 14:00:39	cd341c0504b161ec68ab1aa3	t
99	26	haskell	octal	1	done	2014-05-05 04:03:53	2014-05-02 17:42:09	2014-05-05 04:03:53	4d271cdfd47fd18e8d843e1a	t
100	26	ruby	allergies	1	pending	\N	2014-05-08 10:32:09	2014-05-08 10:32:09	802a89d665e50bed31ca1219	t
101	26	ruby	raindrops	1	done	2014-05-24 23:39:46	2014-04-27 04:39:56	2014-05-24 23:39:46	04a93278ca1884ee447cade2	t
102	26	ruby	anagram	3	hibernating	\N	2014-05-11 22:31:56	2014-05-23 04:25:41	99930ada98a476c8de23f289	t
103	26	elixir	bob	2	done	2014-05-14 23:27:23	2014-05-08 18:38:28	2014-05-14 23:27:23	7a8e857a3bb5b38d8ede97a1	t
104	26	ruby	prime-factors	8	done	2014-05-21 14:38:25	2014-04-30 05:53:09	2014-05-21 14:38:25	9797c2446b61ff5eb9a4a6ff	t
105	26	javascript	space-age	1	pending	\N	2014-05-01 12:06:28	2014-05-01 12:06:28	5f2038c643768e4c3d8847a4	f
106	26	haskell	bob	1	hibernating	\N	2014-05-02 14:58:32	2014-05-03 10:37:35	e50c44f236ffa36cc2576b33	t
107	26	scala	phone-number	1	pending	\N	2014-05-17 22:10:25	2014-05-17 22:10:25	e086e4586c49da8f86362f73	t
108	26	ruby	word-count	6	done	2014-05-21 15:17:06	2014-04-28 22:23:37	2014-05-21 15:17:06	4a7f05027f3bf7abf36cca4c	t
109	26	clojure	nucleotide-count	1	done	2014-05-24 04:19:38	2014-05-22 03:33:26	2014-05-24 04:19:38	e063dc818aae12352c5d4b12	t
110	26	go	atbash-cipher	2	done	2014-05-26 05:36:20	2014-05-24 13:12:30	2014-05-26 05:36:20	315de372b5aeb6d3674de04e	t
111	26	ruby	etl	1	pending	\N	2014-05-08 13:51:58	2014-05-08 13:51:58	61be618f8366ae19e430d1b7	t
112	19	ruby	nucleotide-count	3	done	2014-05-11 19:11:35	2014-02-12 18:35:43	2014-05-11 19:11:35	c3ef6d15d060bac0281983ee	t
113	19	haskell	scrabble-score	1	done	2014-05-07 08:39:41	2014-01-13 08:43:11	2014-05-07 08:39:41	6ece8b4b4e997090c7dde798	t
114	19	ruby	phone-number	2	done	2014-05-10 22:16:48	2014-04-06 04:06:04	2014-05-10 22:16:48	185efe28371489ef6bcfb5eb	t
115	19	ruby	raindrops	1	hibernating	\N	2014-02-25 21:25:29	2014-05-09 00:47:38	272f2ce464bf0dcd6d44b477	f
116	19	haskell	leap	1	done	2014-05-06 19:02:48	2014-03-13 23:53:22	2014-05-06 19:02:48	f3cbdbea36ca9269058120f6	t
117	19	ruby	scrabble-score	1	done	2014-05-07 00:34:07	2014-04-13 01:13:19	2014-05-07 00:34:07	50a9ca6b434664a9b1550e43	t
118	19	elixir	allergies	1	done	2014-05-13 18:41:22	2014-03-13 17:04:11	2014-05-13 18:41:22	63b99774931426f91bb2797f	t
119	19	clojure	grains	1	done	2014-03-23 22:39:20	2014-02-28 10:14:21	2014-03-23 22:39:20	ca9337f1aaff8dffa918709e	t
120	19	ruby	bob	4	done	2014-04-30 07:18:14	2014-02-14 14:06:44	2014-04-30 07:18:14	58f443d90b0c04dd37cd3f68	t
121	19	ruby	strain	2	hibernating	\N	2014-01-26 07:21:13	2014-05-20 05:17:34	94ba1ff78699f571a7ad7707	f
122	19	haskell	say	3	done	2014-05-26 13:58:38	2014-02-05 20:46:34	2014-05-26 13:58:38	23673be89b0f9f97f4722563	t
123	19	haskell	robot-simulator	1	done	2014-02-12 06:03:18	2014-01-26 15:51:52	2014-02-12 06:03:18	b3050590b8f35c285046fc3f	t
124	19	clojure	leap	1	done	2014-05-14 10:57:55	2014-02-24 19:31:18	2014-05-14 10:57:55	855d5d02df9a27a3e5baff0d	t
125	19	go	anagram	5	done	2014-04-22 01:43:37	2014-01-15 23:12:00	2014-04-22 01:43:37	ef9e70074a76b5b6aaea433a	t
126	19	haskell	robot-name	3	done	2014-05-24 08:31:17	2014-01-20 14:51:26	2014-05-24 08:31:17	4aa56a767890a45094e141b3	t
127	19	go	etl	3	done	2014-05-27 01:27:06	2014-01-19 04:14:05	2014-05-27 01:27:06	847220c7e87cc603a36e983a	t
128	19	javascript	leap	3	done	2014-05-21 11:20:00	2014-01-13 02:28:20	2014-05-21 11:20:00	dd53e927e8516549f14296d0	t
129	19	coffeescript	bob	1	hibernating	\N	2014-04-17 15:00:36	2014-05-12 02:14:21	d7c40c6491cc900c6ba25b3d	f
130	19	haskell	rna-transcription	2	done	2014-05-13 13:13:15	2014-03-18 21:47:07	2014-05-13 13:13:15	fcc90ff91d1dc93805158409	t
131	24	ruby	bob	1	hibernating	\N	2014-03-12 11:23:12	2014-05-25 15:20:53	0f7651ab04cbae88b99f4bbf	t
132	24	go	word-count	3	pending	\N	2014-03-23 14:08:59	2014-03-23 14:08:59	c4a4095fe1ef8c3d666ba633	t
133	24	ruby	simple-linked-list	1	pending	\N	2014-03-29 08:30:52	2014-03-29 08:30:52	ae45a2e03d60c610b08773a8	t
134	24	python	bob	3	done	2014-05-23 19:31:28	2014-03-27 18:23:33	2014-05-23 19:31:28	e86f763a20f29831dbffc91d	t
135	24	javascript	bob	3	done	2014-05-21 22:45:38	2014-03-20 09:02:25	2014-05-21 22:45:38	b9060e03fe56eb58bc0e60bc	t
136	24	javascript	point-mutations	3	done	2014-05-05 14:33:31	2014-03-26 08:44:42	2014-05-05 14:33:31	c7e37b77166593b97eb9460f	t
137	24	ruby	nucleotide-count	5	done	2014-05-27 05:11:41	2014-03-11 15:15:05	2014-05-27 05:11:41	af5a19969823d7e1f2b0487e	t
138	24	ruby	word-count	1	hibernating	\N	2014-03-22 14:17:41	2014-05-18 22:17:14	dbc311b2d386100b2cefdcde	f
139	24	clojure	bob	1	hibernating	\N	2014-04-07 12:17:00	2014-05-04 18:41:05	3ec49e6707ee842a39e0f4c3	t
140	24	haskell	word-count	3	done	2014-05-09 11:52:01	2014-03-16 19:23:22	2014-05-09 11:52:01	7240ec0d9503e2843b34a48b	t
141	24	clojure	leap	1	done	2014-03-18 17:33:34	2014-03-09 22:41:43	2014-03-18 17:33:34	8bcace705a969956197564ad	t
142	24	python	word-count	1	done	2014-03-17 08:56:53	2014-03-10 22:08:51	2014-03-17 08:56:53	7d3f20d38bb599aac08f6113	t
143	24	ruby	raindrops	1	pending	\N	2014-03-21 05:45:38	2014-03-21 05:45:38	3d43739dc32d6905d2e03a20	f
144	24	ruby	anagram	4	done	2014-04-17 23:40:15	2014-03-21 14:13:42	2014-04-17 23:40:15	82cd1c4eae51a465637e2ca0	t
145	24	go	leap	1	done	2014-05-02 04:40:22	2014-04-13 23:08:44	2014-05-02 04:40:22	ed1a1b2d2c3262cf3ba21574	t
146	24	clojure	word-count	4	hibernating	\N	2014-03-29 14:19:20	2014-05-22 16:16:45	a22ae9f318974043466ebd26	f
147	24	haskell	point-mutations	2	done	2014-05-13 17:28:38	2014-03-25 04:16:20	2014-05-13 17:28:38	01bba733f624f3723c85aaa0	t
148	18	javascript	anagram	1	pending	\N	2014-01-16 12:11:57	2014-01-16 12:11:57	d8f2d1b5fb5e3b6f2bb97caa	t
149	18	javascript	largest-series-product	1	done	2014-04-17 10:41:35	2014-02-14 21:12:42	2014-04-17 10:41:35	47603290e49173d9a6661f55	t
150	18	ruby	grains	1	pending	\N	2014-04-09 09:51:09	2014-04-09 09:51:09	5ed021da82d59f7b3d6a60b0	t
151	18	ruby	word-count	5	done	2014-03-15 04:04:12	2013-09-21 21:24:25	2014-03-15 04:04:12	8245e7f7eaa1752c7fda4a9f	t
152	18	ruby	bob	1	done	2014-04-08 06:59:06	2014-03-16 11:52:26	2014-04-08 06:59:06	7b551459bccf947025b3681d	t
153	18	go	leap	1	pending	\N	2013-09-27 08:17:57	2013-09-27 08:17:57	40585c6ceffbe669bb73a3c1	t
154	18	go	word-count	1	pending	\N	2013-09-07 00:29:12	2013-09-07 00:29:12	74c847718e3a3ea4d88ae4f4	t
155	18	ruby	raindrops	4	pending	\N	2013-10-05 08:54:42	2013-10-05 08:54:42	38fdef2b2c61fbfd914d983c	t
156	18	haskell	prime-factors	1	done	2014-01-15 13:33:44	2013-10-22 21:34:46	2014-01-15 13:33:44	9ba81d74c326839e5273789f	t
157	18	haskell	bob	1	done	2014-02-01 21:12:10	2014-01-02 09:16:55	2014-02-01 21:12:10	b5882ccf4688001474629ae1	t
158	18	python	space-age	2	pending	\N	2013-11-13 22:01:28	2013-11-13 22:01:28	14d9760c2e2e0adb37f36360	f
159	18	javascript	point-mutations	2	done	2014-05-04 13:37:44	2013-11-25 03:19:01	2014-05-04 13:37:44	954afb0fdbe286fc57f2f77a	t
160	18	clojure	beer-song	1	pending	\N	2013-11-16 02:00:18	2013-11-16 02:00:18	106b8b63160b9d05eaa69fe2	t
161	18	clojure	anagram	4	done	2014-05-26 05:09:04	2013-10-26 01:48:06	2014-05-26 05:09:04	f90b1d71bbb1a1d63bb48dbc	t
162	18	ruby	gigasecond	1	done	2014-04-20 12:29:48	2014-01-01 13:28:57	2014-04-20 12:29:48	4f6be956a9466718cc23fc8b	t
163	23	haskell	rna-transcription	1	hibernating	\N	2014-02-07 12:18:33	2014-03-19 18:43:11	92b2a3f3c48ca7d11ea8219d	t
164	23	javascript	beer-song	4	done	2014-05-15 20:09:03	2014-01-28 00:15:10	2014-05-15 20:09:03	04c9c24b3ed5e050bfcd277b	t
165	23	go	leap	3	pending	\N	2014-02-03 05:51:45	2014-02-03 05:51:45	391de24cef510673811fd5a6	t
166	23	python	largest-series-product	2	pending	\N	2014-01-28 00:29:19	2014-01-28 00:29:19	9fca9deb355eae553f529b5e	t
167	23	ruby	leap	2	done	2014-04-30 01:42:35	2014-01-21 16:45:33	2014-04-30 01:42:35	15fdc996c5e19f6d6debeb42	t
168	23	python	allergies	1	pending	\N	2014-01-27 03:18:55	2014-01-27 03:18:55	8fc9905f725ba292bcce61e1	t
169	23	ruby	anagram	12	hibernating	\N	2014-01-17 12:03:34	2014-05-15 10:08:33	2c77bdd965321aeaf929c884	f
170	23	haskell	word-count	2	hibernating	\N	2014-02-08 09:52:01	2014-04-12 09:03:56	632709891b034e953df0471a	f
171	23	ruby	raindrops	2	pending	\N	2014-02-14 04:42:35	2014-02-14 04:42:35	8e0e0b37dfd047885fb94684	t
172	23	javascript	wordy	1	pending	\N	2014-05-18 15:19:11	2014-05-18 15:19:11	9869188091cf0dae7e56d2c0	t
173	23	ruby	scrabble-score	1	hibernating	\N	2014-01-21 12:43:54	2014-04-22 12:50:23	a3bc290d17e5094b0642f8d7	t
174	23	coffeescript	queen-attack	1	pending	\N	2014-03-05 05:16:36	2014-03-05 05:16:36	9e19f17ec4e213fa9ade1a4f	f
175	23	python	bob	5	done	2014-04-29 12:50:51	2014-01-17 19:26:40	2014-04-29 12:50:51	e2c347fc3853cd399339ab66	t
176	23	go	accumulate	1	done	2014-04-06 16:28:45	2014-02-22 04:07:12	2014-04-06 16:28:45	94f03be32f86c0e4a5246f6a	t
177	23	ruby	trinary	3	done	2014-03-16 02:27:54	2014-01-13 00:55:23	2014-03-16 02:27:54	f313ef162e5fe05f768d911d	t
178	23	ruby	bob	1	done	2014-05-09 10:21:39	2014-02-15 15:51:06	2014-05-09 10:21:39	7d898bd46b2cefb73046d500	t
179	23	clojure	phone-number	1	done	2014-05-13 07:11:10	2014-02-10 21:52:53	2014-05-13 07:11:10	13bf1adee8f33da45a5cf098	t
180	23	haskell	prime-factors	1	done	2014-05-22 17:42:44	2014-04-10 08:22:31	2014-05-22 17:42:44	5acbc15b30c59d948a54f5df	t
181	25	ruby	scrabble-score	1	pending	\N	2014-03-06 01:38:36	2014-03-06 01:38:36	38d936c6da2be39284e62a8f	t
182	25	python	bob	1	done	2014-02-04 03:29:13	2013-12-26 04:24:40	2014-02-04 03:29:13	446ffc09791dd895da3965e9	t
183	25	clojure	word-count	1	done	2014-05-17 09:37:28	2014-01-07 07:35:31	2014-05-17 09:37:28	fbbb78ef3e85ebaf6b1d2e1f	t
184	25	haskell	hexadecimal	3	done	2014-05-07 05:59:39	2014-01-01 05:50:12	2014-05-07 05:59:39	04053ab51c4fafa2c8f91fce	t
185	25	python	robot-name	1	hibernating	\N	2014-01-16 04:54:50	2014-02-28 21:02:25	81e955db1c27bfcf521d2428	t
186	25	ruby	roman-numerals	1	done	2014-03-25 21:53:13	2014-01-01 13:41:30	2014-03-25 21:53:13	9aa196503ee923b9da2a0e26	t
187	25	ruby	bob	3	done	2014-03-15 02:44:01	2013-12-15 14:08:31	2014-03-15 02:44:01	d40e46506b226661920533d4	t
188	25	javascript	allergies	1	pending	\N	2014-03-09 08:08:16	2014-03-09 08:08:16	114b470aa6213258f0f21fe1	f
189	25	ruby	point-mutations	1	done	2014-04-20 22:17:49	2013-12-20 23:03:35	2014-04-20 22:17:49	375af87f502cb834b2ec8b03	t
190	25	ruby	triangle	1	done	2014-05-06 13:05:55	2014-03-25 03:16:13	2014-05-06 13:05:55	a62d94a6a894b2091754138a	t
191	25	ruby	rna-transcription	2	done	2014-05-23 02:56:10	2014-01-17 20:23:49	2014-05-23 02:56:10	1990f419a9066f426bf52250	t
192	25	ruby	grade-school	5	done	2014-05-11 19:40:10	2013-12-10 14:57:46	2014-05-11 19:40:10	6f9dfb071fd27f709c67d0be	t
193	25	javascript	beer-song	2	done	2014-04-30 05:24:55	2014-04-02 16:46:04	2014-04-30 05:24:55	ab84c1c6c9d2d2d037640db1	t
194	25	ruby	hamming	1	done	2014-04-14 12:28:25	2013-12-08 20:19:13	2014-04-14 12:28:25	6e7a1c0aa6058ca855856d34	t
195	25	ruby	nucleotide-count	5	hibernating	\N	2014-01-02 14:23:27	2014-04-06 21:24:38	6ab91051fd99d3ab272a43b8	f
196	25	ruby	word-count	1	hibernating	\N	2014-03-17 04:44:53	2014-05-08 12:40:27	8faeffd5ba992e21075cb153	f
197	20	javascript	bob	1	done	2014-05-24 06:55:49	2014-04-04 19:34:52	2014-05-24 06:55:49	cfe3a4ca796c0713d9a44428	t
198	20	ruby	phone-number	2	done	2014-05-13 15:57:48	2014-04-26 14:49:09	2014-05-13 15:57:48	d304bfdbefcdc22d0dbb94ba	t
199	20	python	grains	2	pending	\N	2014-03-29 18:36:31	2014-03-29 18:36:31	dc7ce56e6b759ca8a483d0f2	t
200	20	coffeescript	anagram	1	pending	\N	2014-04-03 06:58:19	2014-04-03 06:58:19	a88ebd8debcd8c148ab4f84c	t
201	20	ruby	bob	1	hibernating	\N	2014-05-21 18:30:39	2014-05-25 12:30:32	c3a10e213aaa382b9ff06a22	f
202	20	ruby	raindrops	1	hibernating	\N	2014-04-10 05:03:00	2014-05-18 23:57:38	0b29a3b78c389fef3c4e093e	t
203	20	javascript	rna-transcription	4	done	2014-05-27 01:14:38	2014-04-15 10:43:25	2014-05-27 01:14:38	7a5209251cea5cea78203c71	t
204	20	ruby	grains	3	pending	\N	2014-03-26 03:13:44	2014-03-26 03:13:44	12212cf3fdfe50786f5b0d9a	t
205	20	ruby	anagram	2	done	2014-05-21 02:26:58	2014-04-24 05:50:27	2014-05-21 02:26:58	d365468e15e8ed1c739b9e5c	t
206	20	ruby	secret-handshake	1	done	2014-04-17 22:16:41	2014-04-01 23:39:42	2014-04-17 22:16:41	afacad9a2b35185c3c94f78a	t
207	20	ruby	nucleotide-count	2	hibernating	\N	2014-03-29 17:04:02	2014-05-22 14:02:02	0a83555b978ba5ed843d643a	t
208	20	clojure	nucleotide-count	3	pending	\N	2014-03-27 03:50:19	2014-03-27 03:50:19	e42e3e06040947da3789abda	t
209	20	scala	bob	1	pending	\N	2014-04-29 22:32:02	2014-04-29 22:32:02	53894e36add42a633db99f15	t
210	20	ruby	etl	1	pending	\N	2014-04-05 11:19:48	2014-04-05 11:19:48	a5c13272a4bc661c712f6d5c	f
211	20	ruby	leap	2	pending	\N	2014-04-08 13:15:18	2014-04-08 13:15:18	13bca90f9d1aa445965bc4a5	t
212	20	ruby	hamming	3	done	2014-04-18 20:15:08	2014-03-29 14:31:23	2014-04-18 20:15:08	5159d58bcdecae96f9f8b908	t
213	20	haskell	rna-transcription	1	done	2014-04-09 03:44:00	2014-03-27 08:57:33	2014-04-09 03:44:00	06daa8d0123599cc950565a8	t
214	20	elixir	bob	1	done	2014-05-16 14:51:33	2014-04-05 20:46:16	2014-05-16 14:51:33	fffef8f17b048a19c678a4df	t
215	5	clojure	rna-transcription	1	pending	\N	2014-03-02 09:35:23	2014-03-02 09:35:23	d042f471556493f2894a3672	t
216	5	clojure	bob	3	done	2014-05-13 15:01:12	2014-02-09 15:58:52	2014-05-13 15:01:12	f3212defa12c5d1e3eeebd4e	t
217	5	ruby	bob	3	hibernating	\N	2014-02-28 17:57:31	2014-05-21 03:49:45	6c18bf6b400ab28a411e4752	t
218	5	ruby	robot-name	3	done	2014-04-27 19:31:08	2014-02-23 04:12:35	2014-04-27 19:31:08	fa47e88593eb7450066eaa44	t
219	5	haskell	queen-attack	2	done	2014-03-15 16:01:16	2014-01-17 02:17:34	2014-03-15 16:01:16	050b77954c6ff38025d81ffd	t
220	5	ruby	triangle	1	pending	\N	2014-04-08 19:12:20	2014-04-08 19:12:20	b18cebb83f9f5283027bb0e4	t
221	5	clojure	robot-name	5	done	2014-04-17 04:52:59	2014-02-12 23:52:13	2014-04-17 04:52:59	088254342c3375d98932ae8b	t
222	5	clojure	phone-number	1	done	2014-05-06 05:35:26	2014-02-06 12:00:19	2014-05-06 05:35:26	e953eeb7787004698fb270f8	t
223	5	elixir	gigasecond	1	done	2014-05-23 05:26:19	2014-02-11 12:56:08	2014-05-23 05:26:19	78a1552ca4708f64a390950c	t
224	5	ruby	word-count	1	hibernating	\N	2014-03-03 01:11:46	2014-04-02 19:24:49	2795b7b3732af63897a5d591	t
225	5	python	space-age	1	done	2014-05-02 16:30:48	2014-03-20 20:38:31	2014-05-02 16:30:48	38e8715c4cca4ba86ca95aed	t
226	5	haskell	point-mutations	2	done	2014-02-16 17:41:42	2014-01-19 11:32:01	2014-02-16 17:41:42	100fecdbaac2ffe5f0ddbb67	t
227	5	ruby	rna-transcription	4	done	2014-05-05 08:14:52	2014-01-25 11:01:50	2014-05-05 08:14:52	599db7e14ac92826ce66a5ef	t
228	5	ruby	grains	1	pending	\N	2014-02-16 19:37:08	2014-02-16 19:37:08	3842d9d0318d79b0169091e4	t
229	5	elixir	word-count	1	hibernating	\N	2014-02-04 20:55:06	2014-03-20 01:20:53	6587a57a14e875892c315d74	f
230	5	python	bob	1	done	2014-05-15 08:38:51	2014-05-02 21:06:41	2014-05-15 08:38:51	b001b58d99da635c9eb7ecc7	t
231	5	haskell	largest-series-product	2	done	2014-05-26 01:41:58	2014-03-07 11:32:30	2014-05-26 01:41:58	959d8e6bcaab4e376bea6ca0	t
232	5	ruby	space-age	4	done	2014-05-21 23:54:54	2014-04-04 15:36:17	2014-05-21 23:54:54	69d52e3de5868da16f4b38c6	t
233	5	elixir	point-mutations	6	done	2014-05-13 14:22:28	2014-01-28 18:46:42	2014-05-13 14:22:28	49be400e08779261611b75a9	t
234	6	python	nucleotide-count	3	done	2014-05-14 13:52:13	2013-12-13 16:57:00	2014-05-14 13:52:13	4976237c223bea12d4c9ee44	t
235	6	ruby	rna-transcription	2	done	2014-05-09 05:18:26	2013-12-04 05:08:04	2014-05-09 05:18:26	92e4d15e6c64d79b6b3c9c2d	t
236	6	python	bob	1	pending	\N	2013-11-29 02:08:54	2013-11-29 02:08:54	af2bf0168e7ab53fcc1b26d0	t
237	6	haskell	food-chain	1	done	2014-05-27 06:20:58	2013-11-10 03:52:37	2014-05-27 06:20:58	0eff8c2a9523d705033d31f0	t
238	6	ruby	anagram	2	done	2014-04-06 17:41:26	2013-11-16 07:35:10	2014-04-06 17:41:26	0a8182ba1f9bbf30c7573011	t
239	6	ruby	bob	2	done	2014-05-12 22:51:44	2013-11-28 02:05:26	2014-05-12 22:51:44	a13e0df017401b0692164d97	t
240	6	ruby	leap	1	hibernating	\N	2014-02-19 08:54:26	2014-04-06 17:27:17	75fede8108140e63f604ea91	f
241	6	ruby	grains	1	hibernating	\N	2014-04-05 01:33:53	2014-04-09 08:40:29	8316cde7fa0acfb195f484a9	t
242	6	elixir	sum-of-multiples	1	done	2013-12-11 19:17:11	2013-11-06 18:20:02	2013-12-11 19:17:11	537991bc4542c135d13ab80b	t
243	6	ruby	strain	1	hibernating	\N	2014-01-10 10:38:46	2014-01-19 08:01:40	611d6a8ea07b672932af8d96	t
244	6	clojure	rna-transcription	2	done	2014-05-06 06:19:50	2013-11-07 17:35:45	2014-05-06 06:19:50	b651269181bed77c1225c50a	t
245	6	coffeescript	trinary	1	hibernating	\N	2013-11-16 11:36:16	2014-04-07 12:31:02	7f7a03530ddef328a52e31a8	t
246	6	javascript	bob	3	pending	\N	2013-12-08 09:41:52	2013-12-08 09:41:52	ad57719f6c85e111820cf588	t
247	6	haskell	point-mutations	1	done	2014-05-08 14:19:15	2014-01-25 10:16:49	2014-05-08 14:19:15	0f1488cc8158776f5537b5b4	t
248	6	clojure	beer-song	1	done	2014-04-30 07:26:37	2014-02-13 09:20:30	2014-04-30 07:26:37	591459ed458add61f1433ea3	t
249	6	ruby	word-count	3	done	2014-02-26 02:32:46	2013-11-05 00:44:40	2014-02-26 02:32:46	55da18ed5808e9645d58f1be	t
250	6	javascript	point-mutations	1	pending	\N	2013-11-02 14:24:58	2013-11-02 14:24:58	b68e9e770f33cd1cbfb68e6d	t
251	8	python	word-count	1	pending	\N	2014-05-23 20:58:56	2014-05-23 20:58:56	08ce95f45a2b33d912b6e0b7	t
252	8	haskell	word-count	1	hibernating	\N	2014-05-17 22:23:10	2014-05-20 17:39:11	ecf0258180238f554828ce7a	f
253	8	haskell	leap	1	hibernating	\N	2014-05-21 16:08:05	2014-05-23 06:48:48	ba548cefbef751df384d3f25	t
254	8	ruby	leap	1	done	2014-05-25 12:05:25	2014-05-17 20:23:06	2014-05-25 12:05:25	4fdd1162757cf3f64f14f041	t
255	8	ruby	word-count	4	done	2014-05-27 03:11:50	2014-05-15 20:25:18	2014-05-27 03:11:50	9d5219503c29a11faf76032a	t
256	8	elixir	roman-numerals	1	done	2014-05-25 01:41:03	2014-05-18 06:49:28	2014-05-25 01:41:03	c63633569ba129020db72103	t
257	8	python	beer-song	1	pending	\N	2014-05-17 03:42:49	2014-05-17 03:42:49	f27ccfd84c43dedfc7271d7f	t
258	8	clojure	rna-transcription	1	done	2014-05-27 05:02:06	2014-05-19 08:30:13	2014-05-27 05:02:06	73702f4d73eceded4bbaff0c	t
259	8	python	rna-transcription	2	pending	\N	2014-05-14 20:14:54	2014-05-14 20:14:54	fff9c7ad55e9d7eebb0807d0	t
260	8	perl5	rna-transcription	2	done	2014-05-21 12:45:59	2014-05-13 19:57:09	2014-05-21 12:45:59	b52497e6fe5b749fec81626d	t
261	8	perl5	triangle	1	done	2014-05-18 08:45:47	2014-05-17 12:22:49	2014-05-18 08:45:47	feeacbb3045e51b1ef6baf16	t
262	8	ruby	bob	1	done	2014-05-25 05:56:20	2014-05-15 03:25:24	2014-05-25 05:56:20	f8f08fec62423003177bba02	t
263	8	go	anagram	2	needs_input	\N	2014-05-20 16:16:13	2014-05-20 16:16:13	06e19f30d7c46799cdb162cc	t
264	8	ruby	hamming	1	done	2014-05-23 00:34:06	2014-05-18 09:19:51	2014-05-23 00:34:06	f416c409ccba7ecd4e0cbcc8	t
265	8	haskell	bob	2	done	2014-05-25 15:36:30	2014-05-19 11:06:45	2014-05-25 15:36:30	c8b48eca1fc3d26f1d478478	t
266	8	ruby	raindrops	3	hibernating	\N	2014-05-14 07:43:19	2014-05-24 03:49:12	9824b6623ba9cb69cf28d329	f
267	8	javascript	beer-song	1	pending	\N	2014-05-16 23:58:06	2014-05-16 23:58:06	e2abfbbc1d9d291b54b4a342	t
268	9	ruby	hamming	5	done	2014-05-26 19:27:40	2013-11-26 03:44:41	2014-05-26 19:27:40	193a5c5221b5ac8e8447cac4	t
269	9	clojure	bob	1	done	2014-05-22 13:40:45	2014-05-09 11:13:08	2014-05-22 13:40:45	d0e9eda26f3d4e98d7836229	t
270	9	haskell	beer-song	1	done	2014-03-23 22:34:02	2013-12-09 15:35:52	2014-03-23 22:34:02	07201869522c75c51d05a68a	t
271	9	haskell	bob	3	done	2014-03-12 14:09:31	2013-12-11 22:28:47	2014-03-12 14:09:31	e8879bf28a32e60546e8b437	t
272	9	ruby	bob	7	done	2014-05-03 21:45:18	2013-11-30 00:54:10	2014-05-03 21:45:18	87c615d7af764d3085ee9677	t
273	9	python	octal	1	done	2014-03-28 09:00:20	2014-03-26 13:58:14	2014-03-28 09:00:20	1b31efbee9bc912d1cb0eda1	t
274	9	javascript	binary-search-tree	1	done	2014-05-04 14:21:29	2014-04-24 22:41:34	2014-05-04 14:21:29	695392b782c344d5c46f73bc	t
275	9	ruby	accumulate	2	done	2014-05-19 03:43:00	2013-11-22 17:35:30	2014-05-19 03:43:00	7012051c02fde4601a00fce1	t
276	9	ruby	etl	1	pending	\N	2013-11-16 22:33:18	2013-11-16 22:33:18	d5e212580a9369ee5e7de794	t
277	9	python	rna-transcription	1	done	2014-01-07 20:23:19	2013-12-29 14:28:17	2014-01-07 20:23:19	3f23d85ec5a919ddf27ef5ac	t
278	9	haskell	grade-school	1	done	2014-04-25 01:13:46	2014-04-20 19:38:21	2014-04-25 01:13:46	9ce9488b5008f9fc46057e24	t
279	9	ruby	word-count	8	done	2014-05-25 11:29:26	2013-12-19 03:27:47	2014-05-25 11:29:26	d3dfc27ac085136fa23cf71b	t
280	9	go	accumulate	1	pending	\N	2014-01-20 04:49:53	2014-01-20 04:49:53	d1e2e901046a8bf6523c8796	t
281	9	elixir	bob	2	hibernating	\N	2013-12-06 16:16:50	2014-03-03 14:57:22	da71ec9d1532aa2995095156	t
282	9	javascript	series	1	done	2014-03-31 10:38:07	2014-02-08 04:31:12	2014-03-31 10:38:07	da4240e94f02bdbef33ef848	t
283	9	python	bob	5	done	2014-05-14 09:25:23	2013-11-22 10:44:22	2014-05-14 09:25:23	3c5fc931bd95ccd513e584e1	t
284	9	clojure	anagram	2	done	2014-04-23 14:37:06	2014-01-24 21:36:20	2014-04-23 14:37:06	6dcafc65a76cf3522faf158c	t
285	10	javascript	bob	1	done	2014-03-15 11:36:27	2014-02-16 21:18:04	2014-03-15 11:36:27	df6c02c6f5411082e85b7fae	t
286	10	ruby	bob	1	done	2014-05-15 14:47:08	2014-04-05 07:12:05	2014-05-15 14:47:08	d15845d8ab9a352a96ffd2a1	t
287	10	go	hamming	4	done	2014-05-14 16:33:07	2014-02-04 06:24:55	2014-05-14 16:33:07	924edc7bb2556707090f3ac8	t
288	10	go	anagram	1	pending	\N	2014-03-14 04:23:17	2014-03-14 04:23:17	a10f9d64df4cec75d9e577e9	t
289	10	haskell	bob	1	hibernating	\N	2014-02-12 05:46:49	2014-02-20 06:45:51	a2d4d281148631131f847124	t
290	10	ruby	anagram	1	done	2014-04-15 16:58:40	2014-03-29 08:25:53	2014-04-15 16:58:40	1334dd67dd0485481039ea01	t
291	10	ruby	hamming	3	done	2014-05-18 21:55:51	2014-02-06 20:49:19	2014-05-18 21:55:51	ca1a5fa30cbba3d118659c09	t
292	10	ruby	grains	2	done	2014-04-04 11:24:44	2014-02-08 11:46:22	2014-04-04 11:24:44	9ea049f2e1b74c40f29e200e	t
293	10	python	bob	2	done	2014-04-23 01:13:51	2014-02-14 00:22:44	2014-04-23 01:13:51	cfe6f78bd534965b58e7f5e9	t
294	10	clojure	bob	5	done	2014-05-23 15:42:57	2014-03-29 04:14:24	2014-05-23 15:42:57	30b3d50f7a42876430edfc28	t
295	10	ruby	robot-name	2	done	2014-05-21 08:52:25	2014-02-05 05:53:41	2014-05-21 08:52:25	7b8381fc5ca524aee58d1ee6	t
296	10	ruby	space-age	3	done	2014-05-27 03:25:18	2014-04-02 23:15:36	2014-05-27 03:25:18	2064c723ef026d2f4180c94c	t
297	10	ruby	etl	1	done	2014-03-04 04:05:18	2014-02-21 15:24:46	2014-03-04 04:05:18	935b8059f05fd70331aedd2d	t
298	10	haskell	rna-transcription	1	done	2014-04-09 13:00:38	2014-04-01 16:52:17	2014-04-09 13:00:38	3ee9a73d632a81c6ecf334f5	t
299	11	javascript	pascals-triangle	1	pending	\N	2014-02-24 15:04:24	2014-02-24 15:04:24	1c46ea77d8af3b67f428de4c	t
300	11	haskell	phone-number	2	done	2014-04-11 21:40:18	2014-02-11 20:09:27	2014-04-11 21:40:18	2c4e478145cb732cea7e40ea	t
301	11	ruby	grains	2	done	2014-05-18 12:47:26	2014-03-07 04:26:59	2014-05-18 12:47:26	f954da775505855ee0901fe8	t
302	11	ruby	house	1	done	2014-05-07 17:19:59	2014-05-03 01:07:13	2014-05-07 17:19:59	ff176e14e7940903e6ef3438	t
303	11	haskell	bob	1	done	2014-05-11 06:23:35	2014-04-21 15:10:14	2014-05-11 06:23:35	28aee6e5484347bec4c7a210	t
304	11	ruby	bob	2	done	2014-04-18 07:17:58	2014-02-08 18:14:14	2014-04-18 07:17:58	f6a87cdf27422fb84b51b93d	t
305	11	haskell	rna-transcription	1	done	2014-05-15 12:10:33	2014-02-13 04:02:30	2014-05-15 12:10:33	2c303f5ab9934eef92ba7ba4	t
306	11	haskell	secret-handshake	1	hibernating	\N	2014-02-15 00:43:02	2014-03-29 01:39:18	4f4869db17946f9328e90b69	t
307	11	haskell	robot-simulator	1	done	2014-05-25 19:35:58	2014-03-31 16:35:14	2014-05-25 19:35:58	83e84b7a9aa31609363bc1d7	t
308	11	ruby	hamming	1	hibernating	\N	2014-05-15 01:25:32	2014-05-22 20:27:35	2e0bdda2e8b46b42f728653a	t
309	11	python	bob	4	done	2014-05-24 12:18:39	2014-02-08 21:12:27	2014-05-24 12:18:39	a41123ff39d36da77e3f2d71	t
310	11	ruby	meetup	2	done	2014-05-24 13:43:30	2014-01-27 14:39:42	2014-05-24 13:43:30	ed9e0e973a6b714e9a6f90c0	t
311	11	elixir	bob	2	done	2014-04-03 11:58:28	2014-02-16 19:24:27	2014-04-03 11:58:28	9a9c5166a8ad5a7484a00128	t
312	11	clojure	leap	1	done	2014-04-27 04:09:58	2014-03-18 03:57:08	2014-04-27 04:09:58	aabc8d97537086f27e8c0c5f	t
313	11	ruby	beer-song	6	hibernating	\N	2014-01-27 21:35:22	2014-04-27 06:49:23	f485e5dc6597500ff9f50fbb	f
314	11	python	largest-series-product	1	pending	\N	2014-02-05 13:18:13	2014-02-05 13:18:13	2bd837c200f13c03e60f6087	t
315	12	haskell	rna-transcription	1	done	2014-04-15 06:14:10	2014-01-17 00:34:21	2014-04-15 06:14:10	e33266f6a413fa0207be7cc4	t
316	12	ruby	bob	1	pending	\N	2013-10-31 01:58:25	2013-10-31 01:58:25	5c2e7ada546f909c352c1ffd	t
317	12	haskell	word-count	5	done	2014-04-14 21:33:19	2013-12-08 14:37:44	2014-04-14 21:33:19	0fb1b2c6d1811fcb2e118bd6	t
318	12	ruby	word-count	6	done	2014-05-10 11:54:56	2013-10-18 03:45:59	2014-05-10 11:54:56	d7bbe418899accebe0b44164	t
319	12	javascript	etl	1	pending	\N	2013-11-16 13:48:16	2013-11-16 13:48:16	c14bf788b36f84ed8ec57ef4	t
320	12	ruby	leap	2	hibernating	\N	2013-10-23 14:11:07	2014-01-15 15:07:13	415960d2aa2a0837ccfab3f8	f
321	12	ruby	anagram	1	done	2014-04-03 20:07:57	2014-03-26 10:38:50	2014-04-03 20:07:57	e6a4fd259c0e471be89270ad	t
322	12	ruby	hamming	1	done	2013-11-27 20:35:30	2013-11-13 05:58:28	2013-11-27 20:35:30	76ee780f74ad5fbd6c493e60	t
323	12	ruby	etl	1	done	2014-04-01 11:23:51	2013-11-20 14:54:43	2014-04-01 11:23:51	c25027accd0e5ec38d498964	t
324	12	ruby	phone-number	1	done	2014-03-28 08:08:32	2013-10-25 09:16:02	2014-03-28 08:08:32	5ecfb783927fc08357850151	t
325	12	elixir	etl	1	done	2014-04-28 06:32:23	2014-04-16 22:52:53	2014-04-28 06:32:23	152246e5be9fdc72d5caae52	t
326	12	python	gigasecond	2	pending	\N	2014-01-29 01:11:33	2014-01-29 01:11:33	623377488e2e046243152301	t
327	12	javascript	word-count	3	done	2014-05-25 13:26:52	2013-11-17 07:02:06	2014-05-25 13:26:52	989e345a853e2024d618c1f6	t
328	12	elixir	word-count	1	done	2013-12-08 08:49:26	2013-12-07 06:37:22	2013-12-08 08:49:26	a158c4740458b0727798c6d9	t
329	12	ruby	gigasecond	1	done	2014-05-15 05:13:02	2013-10-28 08:00:40	2014-05-15 05:13:02	e810bbf10885b742b47d399f	t
330	13	haskell	word-count	2	needs_input	\N	2013-12-06 22:36:54	2013-12-06 22:36:54	e3145aa324cf0cec13df19b3	t
331	13	javascript	robot-name	2	done	2014-04-08 11:25:03	2013-10-30 13:28:38	2014-04-08 11:25:03	a6bcd0c875c1f7424d21b7c3	t
332	13	go	anagram	1	pending	\N	2014-02-16 22:09:52	2014-02-16 22:09:52	dfe3362c9efb1a1e60b26ad4	t
333	13	haskell	rna-transcription	1	done	2014-03-24 18:17:16	2014-03-17 08:12:55	2014-03-24 18:17:16	529af04bbe2a10c7824b1345	t
334	13	python	sum-of-multiples	1	pending	\N	2014-02-18 21:32:04	2014-02-18 21:32:04	0da911f8c9aac8a4a3083840	t
335	13	ruby	bob	5	done	2014-05-26 12:51:50	2013-11-27 07:26:26	2014-05-26 12:51:50	b1db31b3a5a956178c8db2bf	t
336	13	javascript	linked-list	1	pending	\N	2014-02-20 04:28:19	2014-02-20 04:28:19	806eea03150fc938890e4aa1	t
337	13	python	robot-name	1	pending	\N	2013-12-23 04:34:13	2013-12-23 04:34:13	610826f1cd1988ea7ab66f05	t
338	13	ruby	clock	2	pending	\N	2013-12-31 17:25:13	2013-12-31 17:25:13	9a94bdc8933b3348d27ad796	t
339	13	ruby	phone-number	1	pending	\N	2013-12-01 03:55:49	2013-12-01 03:55:49	6b4263b90c8e4dbe34f0ffdd	t
340	13	ruby	hamming	1	pending	\N	2014-04-14 23:03:01	2014-04-14 23:03:01	c3254053e3fec433b82c75e1	f
341	13	ruby	word-count	4	done	2014-03-24 16:09:31	2013-11-09 15:57:18	2014-03-24 16:09:31	bd246804ab090f5287ebdd4f	t
342	13	elixir	grains	3	done	2014-04-01 19:40:00	2013-11-10 11:29:29	2014-04-01 19:40:00	6549934058ed086267015281	t
343	13	haskell	atbash-cipher	4	done	2014-05-15 09:18:26	2014-01-04 23:35:16	2014-05-15 09:18:26	a58bd324bedaa7b090b99ccc	t
344	13	javascript	atbash-cipher	1	pending	\N	2014-01-29 09:20:06	2014-01-29 09:20:06	43f24efebc70fea38baa371d	t
345	13	ruby	raindrops	1	hibernating	\N	2013-12-27 18:45:34	2014-04-23 11:08:53	6738f7d7c866ee78cf3b866f	t
346	13	ruby	atbash-cipher	1	pending	\N	2013-11-09 14:13:27	2013-11-09 14:13:27	e2256aec1d3d858a4997a15d	t
347	14	ruby	nth-prime	1	pending	\N	2013-12-13 17:41:41	2013-12-13 17:41:41	8b1297c1e444c9c11e9a51af	t
348	14	ruby	anagram	1	done	2014-04-01 13:43:04	2013-11-12 10:09:15	2014-04-01 13:43:04	4a50c80baa4831e81cf6bf04	t
349	14	python	phone-number	1	done	2014-04-24 15:13:12	2014-02-28 19:50:04	2014-04-24 15:13:12	875be537b8dea0bd6bdee4b1	t
350	14	ruby	nucleotide-count	1	done	2014-03-03 02:05:34	2013-11-15 01:56:28	2014-03-03 02:05:34	57a588dd2f39df053f6a227d	t
351	14	elixir	word-count	3	done	2014-03-22 22:10:53	2013-10-24 00:07:57	2014-03-22 22:10:53	a66581339ad970cd1abc2d62	t
352	14	elixir	leap	1	done	2014-02-14 09:45:03	2014-01-31 19:11:57	2014-02-14 09:45:03	336e775a84c7d99afb6ad560	t
353	14	scala	grains	1	pending	\N	2013-10-27 20:23:12	2013-10-27 20:23:12	e58351efc8499ddb1788b5cd	f
354	14	coffeescript	bob	2	done	2014-03-08 22:52:25	2013-12-02 21:24:32	2014-03-08 22:52:25	62cae2fe7030f7fe85236283	t
355	14	elixir	bob	4	done	2014-05-24 05:37:30	2013-11-04 06:22:17	2014-05-24 05:37:30	bea1f15ed236357589855a58	t
356	14	ruby	hamming	1	done	2013-12-05 04:17:19	2013-11-21 07:49:52	2013-12-05 04:17:19	a1c58b350b4c0f2eb259a3e9	t
357	14	clojure	nucleotide-count	1	pending	\N	2013-11-03 17:37:53	2013-11-03 17:37:53	51e9022832f58fde7123de8e	t
358	14	ruby	bob	1	hibernating	\N	2013-12-10 15:29:55	2014-02-03 03:52:37	6383bdada520b0ee0878d380	f
359	14	coffeescript	palindrome-products	2	pending	\N	2013-12-13 22:37:52	2013-12-13 22:37:52	03ca7b62c4e6872864ea30f3	t
360	14	scala	scala	1	hibernating	\N	2013-12-01 02:28:58	2014-03-12 05:23:45	b08d6e0149cf21c1cb796cb7	t
361	14	javascript	bob	2	done	2014-04-02 02:44:10	2013-11-06 19:57:02	2014-04-02 02:44:10	34036c7095a44ae35aa1c47f	t
362	14	haskell	rna-transcription	2	done	2014-05-26 10:14:39	2014-03-25 04:11:20	2014-05-26 10:14:39	c9b9e40b0933f81bd761785d	t
363	14	ruby	etl	1	done	2014-02-01 02:28:09	2013-11-13 07:40:26	2014-02-01 02:28:09	b8baf028938b6195711d0e88	t
364	14	haskell	bob	2	hibernating	\N	2013-11-24 01:18:38	2014-05-26 21:35:44	efc52aa4576456a71b4ff02b	t
365	14	python	etl	1	pending	\N	2014-02-19 16:56:40	2014-02-19 16:56:40	471784009aca57ad9074cfc7	t
366	15	coffeescript	bob	3	done	2014-05-25 02:08:26	2014-05-12 10:27:00	2014-05-25 02:08:26	c8766acb42a842789b5eb4bb	t
367	15	haskell	beer-song	1	done	2014-05-07 12:31:22	2014-04-25 09:54:58	2014-05-07 12:31:22	c2db3ca381799056558eb4ed	t
368	15	ruby	simple-cipher	5	pending	\N	2014-04-25 23:32:14	2014-04-25 23:32:14	ad5c717cc9155a3c8a2e73c8	t
369	15	ruby	matrix	1	pending	\N	2014-05-04 09:11:17	2014-05-04 09:11:17	81bb5d7e7760fba1491154c0	t
370	15	ruby	bob	1	done	2014-05-20 09:00:53	2014-05-18 00:51:26	2014-05-20 09:00:53	4821d69d7add7a95bbca2beb	t
371	15	scala	meetup	1	pending	\N	2014-05-10 15:27:39	2014-05-10 15:27:39	b179952ed9e9c926de660315	t
372	15	haskell	robot-simulator	1	done	2014-05-22 03:04:45	2014-05-06 08:56:15	2014-05-22 03:04:45	42029151ad867112e2f1febf	t
373	15	ruby	crypto-square	2	pending	\N	2014-05-14 12:43:15	2014-05-14 12:43:15	765024afcc89bf761ba677ba	t
374	15	ruby	gigasecond	2	done	2014-05-21 06:35:15	2014-04-26 00:08:38	2014-05-21 06:35:15	e4b023d3b4d41acc7179aaac	t
375	15	clojure	raindrops	1	done	2014-05-17 17:40:20	2014-04-30 23:32:59	2014-05-17 17:40:20	f4130ec7a910599c2d3f822a	t
376	15	python	bob	2	done	2014-05-19 08:39:09	2014-05-02 23:24:35	2014-05-19 08:39:09	717539be7c69f27f78a79658	t
377	15	python	anagram	1	hibernating	\N	2014-05-03 22:08:12	2014-05-08 19:07:21	c69f0dcc260be003d389ceb5	t
378	15	haskell	raindrops	1	done	2014-05-21 12:08:41	2014-05-20 08:20:38	2014-05-21 12:08:41	b610a60855cba4513ac71cc1	t
379	15	ruby	grains	2	done	2014-05-16 18:31:10	2014-05-03 13:37:55	2014-05-16 18:31:10	c1587f44880e1c677d92eb45	t
380	15	ruby	leap	2	pending	\N	2014-04-26 04:17:11	2014-04-26 04:17:11	0ae0ab17a02098703f43c48c	t
381	15	javascript	leap	1	done	2014-05-15 07:23:57	2014-05-13 19:40:56	2014-05-15 07:23:57	f2c553361f755d001fc778c0	t
382	15	haskell	accumulate	3	done	2014-05-17 02:56:33	2014-05-07 22:19:39	2014-05-17 02:56:33	80b0f7c23698f47c14198933	t
383	15	ruby	scrabble-score	2	pending	\N	2014-05-06 21:42:19	2014-05-06 21:42:19	d5da5f9addcaa912a671568e	f
384	16	ruby	scrabble-score	2	pending	\N	2014-02-07 13:36:02	2014-02-07 13:36:02	6582b8cc180c6345c9da8cea	t
385	16	go	rna-transcription	2	pending	\N	2013-11-01 08:11:35	2013-11-01 08:11:35	3084d88c0d654e629399eeab	t
386	16	ruby	point-mutations	2	done	2014-02-11 07:22:31	2013-10-10 10:13:50	2014-02-11 07:22:31	eddb821132c29451ef30462b	t
387	16	javascript	queen-attack	1	done	2014-03-11 09:57:55	2014-02-19 05:27:47	2014-03-11 09:57:55	1950b3330d802b3d1e5e1f6f	t
388	16	ruby	bob	10	done	2014-05-25 02:56:50	2013-10-13 18:09:27	2014-05-25 02:56:50	e795c64845a0ef90c66cdf08	t
389	16	javascript	word-count	5	done	2014-05-22 21:44:01	2013-10-21 05:48:07	2014-05-22 21:44:01	9e6814bf74926538b6122d04	t
390	16	ruby	phone-number	2	done	2014-03-21 12:35:05	2013-11-02 09:22:41	2014-03-21 12:35:05	9a13089f9996408b167246f9	t
391	16	ruby	word-count	1	done	2013-11-27 00:37:20	2013-11-22 17:45:37	2013-11-27 00:37:20	af9ffcd068dbe9fd62415976	t
392	16	ruby	gigasecond	1	done	2014-03-27 14:21:13	2014-01-12 23:25:22	2014-03-27 14:21:13	5a4fc31edf5556dc642bc3f3	t
393	16	haskell	largest-series-product	1	done	2014-04-22 08:55:18	2013-11-03 07:34:19	2014-04-22 08:55:18	b42f1605c8d2254632cc1f41	t
394	16	javascript	matrix	1	pending	\N	2014-01-29 13:05:01	2014-01-29 13:05:01	e9357e816b9f1753b3118ddf	t
395	16	javascript	bob	2	done	2014-01-30 20:53:40	2013-11-05 14:48:46	2014-01-30 20:53:40	97b6f29807f29131fd7e4619	t
396	16	haskell	etl	1	done	2014-03-03 12:01:42	2014-01-07 01:12:48	2014-03-03 12:01:42	bb796a164da6a26fda333483	t
397	16	scala	hamming	2	done	2014-04-19 00:10:22	2014-02-18 23:29:41	2014-04-19 00:10:22	59bd119622c56c64b847293c	t
398	16	haskell	bank-account	3	done	2014-03-02 01:21:08	2013-10-22 13:25:32	2014-03-02 01:21:08	f9bf69cd76bd9101f7306e2b	t
399	16	python	bob	4	done	2014-04-11 19:24:20	2013-10-18 13:15:13	2014-04-11 19:24:20	c27887b8f51a63c51a0402af	t
400	16	ruby	hamming	1	done	2014-05-06 13:56:29	2013-11-24 20:24:39	2014-05-06 13:56:29	233e644abf5ed205240554c4	t
401	16	ruby	leap	3	hibernating	\N	2013-11-10 05:04:34	2014-05-24 16:52:41	7dbd566dd5dd68419da3315a	t
402	16	haskell	prime-factors	1	done	2014-03-31 13:15:28	2013-12-31 09:30:31	2014-03-31 13:15:28	9da26f38ae624e8c3d08468b	t
403	17	go	word-count	2	done	2014-05-16 00:49:13	2014-03-09 19:19:38	2014-05-16 00:49:13	22154bdbbca115ed49ec183d	t
404	17	javascript	phone-number	1	pending	\N	2014-03-18 22:06:03	2014-03-18 22:06:03	f0d327880c654d05a955766f	f
405	17	haskell	bob	11	done	2014-05-22 15:46:38	2014-02-21 21:01:04	2014-05-22 15:46:38	4cd773a1e1db07f118378419	t
406	17	haskell	space-age	1	done	2014-04-17 20:56:49	2014-04-05 14:49:48	2014-04-17 20:56:49	feee9337284767091f52bba3	t
407	17	ruby	hamming	2	hibernating	\N	2014-03-05 22:25:07	2014-04-21 21:13:52	79fbf7dba8b89a1b41aa2b54	f
408	17	scala	word-count	2	done	2014-04-04 06:15:16	2014-02-21 04:45:32	2014-04-04 06:15:16	d23bd95e0612ecf27b6facc6	t
409	17	clojure	binary	2	done	2014-05-19 00:15:55	2014-03-09 13:46:58	2014-05-19 00:15:55	13f6d5c154163494ea1079c8	t
410	17	ruby	phone-number	3	done	2014-05-14 10:12:35	2014-02-20 14:46:47	2014-05-14 10:12:35	84cc5e877a272002d49763ec	t
411	17	scala	hamming	2	done	2014-05-13 19:43:18	2014-03-14 21:05:58	2014-05-13 19:43:18	3d6955a20a3e14fb0f54b2f8	t
412	17	javascript	bob	1	pending	\N	2014-04-13 18:41:40	2014-04-13 18:41:40	bfb93db70a3cfd17b0c8c1e9	t
413	17	ruby	bob	8	done	2014-05-24 06:23:54	2014-03-12 17:21:42	2014-05-24 06:23:54	9f2c2e6becf68ae87bdf5fd5	t
414	17	javascript	beer-song	5	done	2014-05-03 23:14:02	2014-02-22 09:04:20	2014-05-03 23:14:02	150dd2e86d1d11e3053e8174	t
415	17	haskell	largest-series-product	1	done	2014-04-23 20:33:28	2014-03-21 21:33:18	2014-04-23 20:33:28	b1725e6ab589f40c49a17d0c	t
416	17	python	octal	1	pending	\N	2014-02-16 05:00:18	2014-02-16 05:00:18	49263c062d40c7edd085bf4a	t
417	17	haskell	anagram	2	hibernating	\N	2014-04-10 05:42:39	2014-05-08 13:18:53	80a5fdf2018908b9badb7c70	t
418	17	javascript	grade-school	1	pending	\N	2014-03-17 11:10:23	2014-03-17 11:10:23	f438a826f1c75537df59917b	f
419	17	haskell	grade-school	1	done	2014-04-11 00:14:10	2014-03-13 09:23:50	2014-04-11 00:14:10	0241cb4c580512038bb2b55b	t
420	17	clojure	rna-transcription	2	done	2014-03-30 07:44:43	2014-02-24 20:37:08	2014-03-30 07:44:43	ed2e90ce1406522cac770dbd	t
421	17	go	leap	1	done	2014-03-31 23:05:47	2014-02-21 08:22:53	2014-03-31 23:05:47	49f1ce1c0a0f1be84994e4f2	t
422	22	ruby	bob	1	pending	\N	2014-05-14 08:27:37	2014-05-14 08:27:37	01ee99d4a47d312e77870c2e	t
423	22	python	bob	2	hibernating	\N	2014-05-19 22:33:33	2014-05-22 09:44:33	cfb94f641412ce85062426fb	t
424	22	ruby	grains	1	done	2014-05-20 00:57:49	2014-05-17 02:02:00	2014-05-20 00:57:49	cec63649473fcd1e17422127	t
425	22	elixir	word-count	1	done	2014-05-18 00:14:08	2014-05-17 15:37:03	2014-05-18 00:14:08	2c41aba5061492ea50454754	t
426	22	elixir	etl	2	pending	\N	2014-05-13 17:43:15	2014-05-13 17:43:15	a7072259672061130bdd3c1e	t
427	22	ruby	palindrome-products	2	pending	\N	2014-05-14 04:37:06	2014-05-14 04:37:06	47e3045505b1ecc5098f4bb2	t
428	22	go	anagram	1	pending	\N	2014-05-13 23:42:50	2014-05-13 23:42:50	1e07955341d3d54f79e93bf8	t
429	22	clojure	grade-school	1	done	2014-05-15 15:28:56	2014-05-13 07:43:50	2014-05-15 15:28:56	5cb20c6d8180273733d711f7	t
430	22	ruby	word-count	1	pending	\N	2014-05-16 18:44:53	2014-05-16 18:44:53	17fb0b96f95cad3136b1391c	t
431	22	javascript	beer-song	1	done	2014-05-24 07:34:31	2014-05-16 06:13:33	2014-05-24 07:34:31	0761170d5f54f2b39315bd9f	t
432	22	elixir	bob	1	hibernating	\N	2014-05-17 21:33:19	2014-05-19 20:52:35	3f575f40fd6c12cdbec4bc9b	f
433	22	haskell	rna-transcription	2	done	2014-05-22 21:04:14	2014-05-19 03:29:08	2014-05-22 21:04:14	e7bb29ca872657228b37fe64	t
434	22	haskell	simple-linked-list	2	done	2014-05-25 04:23:44	2014-05-15 07:46:27	2014-05-25 04:23:44	5ab1d34c4d19a97794d4a819	t
435	22	javascript	word-count	4	done	2014-05-25 00:30:27	2014-05-15 20:00:11	2014-05-25 00:30:27	c1c44ce76a616a1bfc4e0560	t
436	22	javascript	nucleotide-count	2	done	2014-05-26 15:04:58	2014-05-17 03:52:51	2014-05-26 15:04:58	846bc95acc4ae4736a00a72d	t
437	22	elixir	list-ops	1	done	2014-05-22 10:04:28	2014-05-13 06:14:48	2014-05-22 10:04:28	1a334b5d26712eeb5a01a976	t
438	27	haskell	word-count	3	done	2014-05-06 06:51:08	2014-03-05 11:38:33	2014-05-06 06:51:08	3854c9e98860a2c59376bc24	t
439	27	ruby	point-mutations	2	done	2014-04-20 14:24:39	2014-02-26 20:24:12	2014-04-20 14:24:39	12119abf2d64a6e3d359ae1f	t
440	27	go	rna-transcription	1	pending	\N	2014-04-12 21:38:59	2014-04-12 21:38:59	d6f11b0366b471c23a564d10	t
441	27	clojure	bob	1	hibernating	\N	2014-03-07 10:24:37	2014-05-10 16:24:06	8eaddce19ce7fe51656ec0c9	f
442	27	javascript	beer-song	1	done	2014-04-22 02:31:36	2014-03-24 07:26:56	2014-04-22 02:31:36	9e136a00656b58fce07c5122	t
443	27	clojure	anagram	1	done	2014-04-01 21:20:26	2014-03-04 15:55:27	2014-04-01 21:20:26	9a3896a4e8d7e1eb9cc0e079	t
444	27	ruby	scrabble-score	1	done	2014-05-20 11:07:07	2014-05-09 22:54:59	2014-05-20 11:07:07	6550a98cf260f95eafa4d12a	t
445	27	coffeescript	bob	1	pending	\N	2014-04-08 06:48:55	2014-04-08 06:48:55	246d78b97fab92de099b3b17	t
446	27	ruby	sieve	1	done	2014-05-16 15:49:51	2014-03-14 21:50:22	2014-05-16 15:49:51	c3b85a6946b6dd3af6e803de	t
447	27	ruby	word-count	2	done	2014-05-15 21:43:45	2014-03-04 09:10:01	2014-05-15 21:43:45	712b7f05a84907bf2cb62c39	t
448	27	python	bob	3	done	2014-05-25 08:31:09	2014-03-16 03:35:31	2014-05-25 08:31:09	fd0ed42daeecd9bb51f7cbb2	t
449	27	elixir	grains	1	done	2014-03-28 11:46:42	2014-03-15 04:32:00	2014-03-28 11:46:42	b18fb1565724dd85ecb78d4a	t
450	27	haskell	scrabble-score	3	done	2014-05-21 09:03:13	2014-03-20 19:33:13	2014-05-21 09:03:13	0cb5126e72d3a20b9a5ff517	t
451	27	ruby	roman-numerals	1	pending	\N	2014-04-14 16:19:36	2014-04-14 16:19:36	55d067ccb53a6360f1cad8a9	t
452	27	ruby	bob	5	done	2014-05-02 01:32:07	2014-03-28 15:40:05	2014-05-02 01:32:07	214fbb06c64d01ac612a9bbc	t
453	27	javascript	pythagorean-triplet	1	done	2014-05-02 05:29:57	2014-04-24 17:19:19	2014-05-02 05:29:57	c37138cf15dbcfabbf37e2ad	t
454	27	elixir	scrabble-score	3	done	2014-05-21 11:36:13	2014-03-16 19:53:15	2014-05-21 11:36:13	67418664bbd72bd28a90c0a0	t
455	27	javascript	anagram	1	pending	\N	2014-04-02 19:35:00	2014-04-02 19:35:00	607435b9403161ce8903265b	t
456	27	ruby	raindrops	1	done	2014-05-18 23:52:11	2014-03-26 01:52:36	2014-05-18 23:52:11	354e8bdeffcad79ffd87312b	t
457	28	haskell	meetup	1	hibernating	\N	2014-04-10 20:59:46	2014-04-24 18:45:29	ab188f67c6fe854079faeed0	t
458	28	ruby	etl	1	pending	\N	2014-04-21 02:39:02	2014-04-21 02:39:02	bd1ebced43ecbf8b768fb13e	t
459	28	haskell	anagram	1	hibernating	\N	2014-04-13 14:21:43	2014-04-22 05:25:22	846bf888bfc929a5a6878152	t
460	28	python	bob	5	done	2014-05-26 13:20:09	2014-04-15 10:44:39	2014-05-26 13:20:09	93df77a6963acb2f8e7bb096	t
461	28	clojure	phone-number	1	done	2014-05-13 01:29:18	2014-04-28 05:56:06	2014-05-13 01:29:18	aa3e0145522679e530b71f3a	t
462	28	javascript	robot-name	1	pending	\N	2014-05-03 18:28:26	2014-05-03 18:28:26	3736b823c2f5f0f455a5cb5a	f
463	28	clojure	bob	3	done	2014-05-21 07:03:08	2014-05-01 16:20:12	2014-05-21 07:03:08	00b67f18d6513f4b54af9b0d	t
464	28	ruby	bob	2	done	2014-05-20 21:34:06	2014-04-18 18:00:01	2014-05-20 21:34:06	a809ad61f82fde51874ced2c	t
465	28	javascript	grade-school	1	pending	\N	2014-04-18 23:38:35	2014-04-18 23:38:35	4fddb68b5e739e19902fdd4a	t
466	28	scala	space-age	1	pending	\N	2014-04-25 05:25:09	2014-04-25 05:25:09	a877c5c0305ca6d3d3ff5c3c	t
467	28	ruby	beer-song	6	hibernating	\N	2014-04-08 22:42:50	2014-05-25 15:51:55	4e894b2cb8e579808a68716b	f
468	28	javascript	word-count	2	hibernating	\N	2014-04-09 06:22:11	2014-04-15 14:49:52	8d31fcbac60691429a85afe6	f
469	28	perl5	prime-factors	1	pending	\N	2014-04-26 17:10:37	2014-04-26 17:10:37	304d81989fcfd5bd10266c01	t
470	28	python	rna-transcription	1	done	2014-05-15 15:27:18	2014-05-12 04:14:08	2014-05-15 15:27:18	022b4395ae3af8d072e4abb4	t
471	28	ruby	raindrops	7	needs_input	\N	2014-04-11 15:44:34	2014-04-11 15:44:34	eada4f40167515c73487b1c1	t
472	29	haskell	phone-number	2	done	2014-05-07 00:00:19	2014-02-13 13:26:52	2014-05-07 00:00:19	6b34359b64f508a0e2a6d0b4	t
473	29	haskell	word-count	4	done	2014-02-26 09:31:37	2013-10-19 08:21:01	2014-02-26 09:31:37	81e3612c7d08af47f2d2ee22	t
474	29	ruby	bob	4	done	2014-05-18 15:49:15	2013-10-19 16:19:12	2014-05-18 15:49:15	87773df9db79ea4ff1129d7f	t
475	29	ruby	nth-prime	1	pending	\N	2013-11-22 00:13:59	2013-11-22 00:13:59	e1f6013e2d80045cb8b53662	t
476	29	ruby	leap	4	done	2014-05-15 03:11:03	2013-11-02 05:37:29	2014-05-15 03:11:03	0da7b36c21969247a046c04c	t
477	29	python	bob	2	done	2014-04-27 20:54:19	2013-10-21 20:33:47	2014-04-27 20:54:19	57483fc3ba94836d1e3d2d2c	t
478	29	ruby	word-count	1	done	2014-01-29 22:43:07	2013-12-31 06:36:00	2014-01-29 22:43:07	e40c8c6c4878563793706d81	t
479	29	elixir	bob	1	done	2014-04-14 19:39:00	2014-03-07 03:42:16	2014-04-14 19:39:00	4923241a815b34bf5ad81b44	t
480	29	ruby	pythagorean-triplet	4	pending	\N	2013-10-17 14:35:00	2013-10-17 14:35:00	74440334e81b0fc736bdda35	t
481	29	ruby	etl	3	done	2014-05-07 04:56:32	2013-10-22 09:30:05	2014-05-07 04:56:32	b2dc8b5d185581169a81f422	t
482	29	ruby	triangle	3	pending	\N	2013-11-02 10:13:38	2013-11-02 10:13:38	72c142546632dc916c28d1e7	t
483	29	clojure	bob	2	done	2014-05-13 10:13:39	2014-01-08 03:09:38	2014-05-13 10:13:39	96ad4be9e947d6698dbf46db	t
484	29	ruby	beer-song	1	done	2013-12-25 11:21:58	2013-12-13 20:58:25	2013-12-25 11:21:58	386a539b664db4ac34787421	t
485	29	go	rna-transcription	1	done	2014-05-25 01:56:07	2013-12-29 23:32:17	2014-05-25 01:56:07	4c12aca07b2f55d84d8a5eaf	t
486	29	ruby	hamming	1	done	2014-04-03 04:49:43	2013-12-09 21:50:45	2014-04-03 04:49:43	119cd9bd2b4969624c4919b9	t
487	29	haskell	nucleotide-count	3	done	2014-04-14 12:24:17	2014-01-11 05:10:36	2014-04-14 12:24:17	40231dc4415ca333672ecc04	t
488	30	ruby	bob	1	done	2014-05-20 03:26:57	2014-05-11 18:39:47	2014-05-20 03:26:57	892282b99ad9bd40bce715ab	t
489	30	python	bob	1	pending	\N	2014-05-13 08:52:35	2014-05-13 08:52:35	ac7638e507456b991bc7d1f2	t
490	30	ruby	anagram	4	needs_input	\N	2014-05-15 15:15:04	2014-05-15 15:15:04	e35ac0fa8253a33c94598b04	t
491	30	clojure	bob	1	done	2014-05-26 01:59:49	2014-05-22 23:03:12	2014-05-26 01:59:49	a90bde868c42e089e8962553	t
492	30	javascript	beer-song	1	done	2014-05-22 12:58:57	2014-05-16 18:32:45	2014-05-22 12:58:57	a1a0561a5e55dfb2f04c7253	t
493	30	haskell	rna-transcription	1	done	2014-05-19 10:02:09	2014-05-14 13:51:24	2014-05-19 10:02:09	eb75904a80df85f03e61f8af	t
494	30	ruby	robot-name	2	done	2014-05-26 17:39:55	2014-05-11 14:38:33	2014-05-26 17:39:55	b28d980b69f4d9d8a534d61d	t
495	30	ruby	atbash-cipher	1	done	2014-05-17 13:20:23	2014-05-13 01:58:57	2014-05-17 13:20:23	39dbaac28101861500c3f7d1	t
496	30	ruby	gigasecond	1	done	2014-05-13 20:34:13	2014-05-12 12:05:33	2014-05-13 20:34:13	3d621c90c0556f68f8c0fda3	t
497	30	elixir	bob	1	done	2014-05-21 16:39:08	2014-05-16 03:44:42	2014-05-21 16:39:08	3a7012138bdade59dca34038	t
498	30	ruby	grade-school	1	done	2014-05-18 12:46:50	2014-05-18 02:02:42	2014-05-18 12:46:50	92a9b4e204442d798455823f	t
499	30	clojure	rna-transcription	2	done	2014-05-18 12:13:35	2014-05-13 22:52:53	2014-05-18 12:13:35	e7226f6fe85a4ae90d086d2e	t
500	30	javascript	word-count	1	hibernating	\N	2014-05-15 10:30:15	2014-05-25 22:39:53	385eeb47f1bc729869f41e1b	t
501	30	haskell	phone-number	1	hibernating	\N	2014-05-15 16:38:14	2014-05-21 14:50:10	754135dd6b51d40fb9502d27	f
502	30	haskell	binary-search-tree	5	done	2014-05-24 04:41:14	2014-05-10 20:31:06	2014-05-24 04:41:14	79a5054952638fe1128b9125	t
503	30	haskell	nucleotide-count	6	pending	\N	2014-05-12 15:00:41	2014-05-12 15:00:41	20fc6401c2066382c4a70aae	t
504	30	ruby	word-count	1	hibernating	\N	2014-05-20 23:26:58	2014-05-24 09:15:22	33960dd56474221d91c30e72	t
505	37	ruby	gigasecond	1	pending	\N	2014-02-28 17:13:48	2014-02-28 17:13:48	f8166917a5e6dd2e2ad5c365	t
506	37	go	rna-transcription	2	done	2014-03-03 13:36:21	2014-01-11 17:29:54	2014-03-03 13:36:21	5980b263e827250e9bf3ca82	t
507	37	ruby	bob	3	hibernating	\N	2013-11-19 09:34:47	2014-05-18 23:14:02	727ff63c076e821bf79b8ec7	f
508	37	clojure	bob	1	done	2014-05-02 11:28:46	2014-04-13 12:15:27	2014-05-02 11:28:46	c5b8bba33133564073af8b87	t
509	37	ruby	leap	6	done	2014-05-24 19:22:48	2013-12-29 16:50:55	2014-05-24 19:22:48	fbce283e54ef2fbc0aa18faa	t
510	37	ruby	space-age	2	done	2014-04-23 23:48:53	2014-01-10 00:10:01	2014-04-23 23:48:53	489257f1858766fef5f889e7	t
511	37	javascript	beer-song	2	pending	\N	2013-11-23 18:36:08	2013-11-23 18:36:08	2bba18bf38dd66e68921be78	t
512	37	ruby	phone-number	3	done	2014-04-30 14:16:40	2014-01-20 11:46:47	2014-04-30 14:16:40	61b57e1c67602cd6436d4a00	t
513	37	python	word-count	1	pending	\N	2014-03-04 15:37:28	2014-03-04 15:37:28	632cf74b825d3b35bf41e4ca	t
514	37	clojure	etl	1	pending	\N	2013-11-30 06:21:54	2013-11-30 06:21:54	7c149e16b1dd1e13d4381d19	t
515	37	haskell	rna-transcription	2	done	2014-05-15 19:49:09	2014-04-15 07:02:13	2014-05-15 19:49:09	af4308fd60624fa43b08d8bf	t
516	37	javascript	robot-name	1	pending	\N	2014-01-18 10:34:24	2014-01-18 10:34:24	63ee68a3b135acba9c39d9d8	t
517	37	python	bob	3	pending	\N	2013-11-18 00:41:52	2013-11-18 00:41:52	a88d8aee7a44637080bf7586	t
518	37	elixir	rna-transcription	1	done	2014-05-22 04:36:59	2014-01-27 01:29:22	2014-05-22 04:36:59	95c593794b13d08719e5cf04	t
519	37	ruby	anagram	3	done	2014-04-04 08:04:58	2013-11-17 13:33:34	2014-04-04 08:04:58	022b5760d7b7855f75fd0a8d	t
520	41	ruby	accumulate	1	done	2014-05-08 03:36:15	2014-03-25 06:15:20	2014-05-08 03:36:15	0378c9a448b66382435b5c56	t
521	41	clojure	robot-simulator	2	done	2014-04-28 09:15:23	2014-04-10 15:24:31	2014-04-28 09:15:23	77d726007a3784625f051f27	t
522	41	haskell	scrabble-score	1	done	2014-04-26 21:28:33	2014-04-06 07:32:12	2014-04-26 21:28:33	fa066ab87043bfb6dcfe212d	t
523	41	ruby	beer-song	1	done	2014-04-29 01:24:52	2014-04-23 10:47:12	2014-04-29 01:24:52	2c59980414c139855efbffde	t
524	41	ruby	bob	10	done	2014-05-26 14:14:56	2014-03-08 11:03:51	2014-05-26 14:14:56	bf55838997a2bd0fb7240e26	t
525	41	haskell	anagram	2	done	2014-05-02 09:23:44	2014-03-31 20:00:04	2014-05-02 09:23:44	008b3b40d2074fd9d9538a14	t
526	41	ruby	leap	1	done	2014-03-31 18:59:44	2014-03-16 15:02:35	2014-03-31 18:59:44	cb48cd41221b0e62673b4e5e	t
527	41	ruby	proverb	5	done	2014-05-13 14:20:36	2014-03-07 21:00:25	2014-05-13 14:20:36	2f9d72e3d73e83338c7a8d91	t
528	41	ruby	space-age	1	done	2014-04-15 16:50:34	2014-03-24 15:39:04	2014-04-15 16:50:34	4d5733de996d04d0921b3fed	t
529	41	clojure	bob	6	done	2014-05-25 04:52:59	2014-03-08 04:57:51	2014-05-25 04:52:59	c5132f3bfaa5005d81133d27	t
530	41	elixir	allergies	3	pending	\N	2014-03-30 21:06:48	2014-03-30 21:06:48	ccf29982220b592aa03444c4	t
531	41	haskell	beer-song	1	done	2014-05-07 14:26:49	2014-04-14 01:03:29	2014-05-07 14:26:49	6c2b4e9204dd2c09c6975841	t
532	41	ruby	anagram	3	done	2014-04-30 12:56:38	2014-03-17 06:41:09	2014-04-30 12:56:38	1606f84380bb10e902c9e9a2	t
533	41	ruby	etl	1	hibernating	\N	2014-04-16 02:45:04	2014-05-17 14:54:42	3ef7bc1a2f125eb19cbaeb13	t
534	42	ruby	bob	1	done	2014-04-08 08:16:40	2014-03-26 15:02:31	2014-04-08 08:16:40	8d5d49296db8f9f12c7f6f4c	t
535	42	ruby	beer-song	2	done	2014-03-05 01:53:26	2014-01-25 06:58:15	2014-03-05 01:53:26	cffbc90fcaadf7685fbd070b	t
536	42	python	leap	1	pending	\N	2014-01-27 14:26:26	2014-01-27 14:26:26	e448dcd43d1776476f972ec1	t
537	42	elixir	meetup	2	done	2014-04-10 07:06:02	2014-02-05 22:47:23	2014-04-10 07:06:02	ba4390b394e889fa167fa2cc	t
538	42	haskell	hexadecimal	2	done	2014-04-11 09:30:03	2014-01-21 12:08:51	2014-04-11 09:30:03	4cfa22e8f5432e95877a8556	t
539	42	python	nucleotide-count	1	pending	\N	2014-04-10 10:22:32	2014-04-10 10:22:32	60c2bad037f496d0808e6245	t
540	42	clojure	bob	1	done	2014-05-16 02:00:54	2014-01-27 09:12:25	2014-05-16 02:00:54	f5bd0fda7cb5c03a29082202	t
541	42	ruby	grade-school	1	done	2014-03-11 21:51:50	2014-02-07 05:19:00	2014-03-11 21:51:50	0e77e1db4b8445eca7ea9f44	t
542	42	ruby	pig-latin	2	pending	\N	2014-02-14 18:38:35	2014-02-14 18:38:35	438dc1e4537b4e6f98e64a4e	f
543	42	clojure	anagram	4	done	2014-05-19 05:17:07	2014-01-28 01:12:52	2014-05-19 05:17:07	f1dfaa4f55d20dbd25daccc1	t
544	42	javascript	anagram	1	hibernating	\N	2014-03-02 01:36:27	2014-05-23 14:28:26	8d4c454f66fcecfd83a18c29	t
545	42	go	leap	1	done	2014-04-09 02:13:15	2014-04-05 17:54:17	2014-04-09 02:13:15	e7e9a1804444522832b562ab	t
546	42	javascript	bob	1	hibernating	\N	2014-02-14 02:04:28	2014-02-16 19:29:36	e08739c050f3c694491905bf	f
547	42	haskell	linked-list	1	done	2014-05-09 00:31:53	2014-04-12 08:41:11	2014-05-09 00:31:53	2c069287f776a0d1a42a592c	t
548	42	python	rna-transcription	1	hibernating	\N	2014-04-06 10:34:24	2014-05-13 10:14:58	a463345c1ada81cca93bb7fc	t
549	42	elixir	bob	3	done	2014-05-23 04:45:13	2014-02-02 00:54:43	2014-05-23 04:45:13	26ae49c82f65d008149970d8	t
550	42	elixir	leap	2	done	2014-04-30 00:11:21	2014-02-11 02:18:36	2014-04-30 00:11:21	9d8ebd23dbd9ca17992d7c6b	t
551	43	clojure	phone-number	2	done	2014-02-16 06:10:57	2013-12-29 01:41:22	2014-02-16 06:10:57	3d84f833280a5402ff425347	t
552	43	ruby	bob	1	hibernating	\N	2014-02-04 03:16:03	2014-03-01 16:25:08	8541e08b56dae4f2a57a037d	t
553	43	ruby	anagram	1	done	2013-12-26 04:23:06	2013-11-15 23:52:18	2013-12-26 04:23:06	2501156bae3bfb20ab912cf7	t
554	43	ruby	leap	1	pending	\N	2013-11-21 22:41:21	2013-11-21 22:41:21	79ded3815d599641a8dad6bc	t
555	43	javascript	scrabble-score	1	done	2014-04-02 05:47:13	2013-11-29 13:57:54	2014-04-02 05:47:13	aeb96158e003f3617db0a7f7	t
556	43	clojure	bob	3	done	2014-05-26 03:54:08	2013-11-19 17:48:03	2014-05-26 03:54:08	0739756fedeca36b17aed799	t
557	43	haskell	nucleotide-count	2	done	2014-05-17 06:38:00	2013-11-22 14:49:05	2014-05-17 06:38:00	d5fb0099966b6e4f80ec0839	t
558	43	python	word-count	1	done	2014-05-21 17:32:35	2013-11-13 04:53:26	2014-05-21 17:32:35	9b976657b6e1f001d507a53b	t
559	43	python	anagram	1	done	2014-02-18 10:28:59	2013-12-12 11:15:02	2014-02-18 10:28:59	d9ec3d03ddfb1a9974ca8b3d	t
560	43	haskell	binary-search-tree	1	done	2014-05-26 09:09:49	2014-02-01 07:17:45	2014-05-26 09:09:49	8ca407a0d4e8a48b47ece66c	t
561	43	ruby	hamming	1	done	2014-05-08 04:40:12	2014-01-13 15:08:18	2014-05-08 04:40:12	046edb5fb0a0a7c28067e6c4	t
562	43	javascript	bob	1	pending	\N	2013-12-14 09:36:48	2013-12-14 09:36:48	3ad382e7fda6f448fe45793c	t
563	43	elixir	nucleotide-count	2	done	2014-05-13 20:28:05	2013-12-28 14:06:27	2014-05-13 20:28:05	d7b22f9130550cac54f142da	t
564	43	go	leap	1	done	2014-04-18 19:09:15	2014-01-12 02:53:30	2014-04-18 19:09:15	51d05a16251c66afee6d1242	t
565	43	clojure	roman-numerals	1	pending	\N	2014-03-26 10:58:07	2014-03-26 10:58:07	4e746ed9627e20b89e575a3e	t
566	43	go	hamming	2	done	2014-03-29 15:24:16	2014-01-24 23:31:05	2014-03-29 15:24:16	5d01d72b87c759af06e84dd6	t
567	44	haskell	bob	1	pending	\N	2013-12-21 15:03:22	2013-12-21 15:03:22	639a5ed430a0478de27269ac	t
568	44	ruby	grade-school	1	done	2014-03-29 19:32:59	2014-03-26 14:03:27	2014-03-29 19:32:59	46a62101bec9b308ee0ebdc0	t
569	44	haskell	anagram	2	done	2014-05-22 10:04:04	2013-11-26 18:32:50	2014-05-22 10:04:04	0d57bf8a766b391b5a91bc4b	t
570	44	ruby	word-count	3	done	2014-05-12 15:29:22	2013-11-25 02:22:06	2014-05-12 15:29:22	e842e3b22e3b256119516a5d	t
571	44	ruby	atbash-cipher	1	done	2014-05-14 19:25:22	2013-12-09 05:43:37	2014-05-14 19:25:22	c856ac2b109e7c4984c0104c	t
572	44	ruby	etl	2	pending	\N	2014-02-08 04:29:57	2014-02-08 04:29:57	3134a90001087c58ac182f01	f
573	44	ruby	binary-search-tree	1	pending	\N	2014-01-13 22:46:36	2014-01-13 22:46:36	979490210f855983c22a65e9	t
574	44	javascript	word-count	4	done	2014-05-04 04:57:50	2014-03-17 21:39:36	2014-05-04 04:57:50	08dc041f50bb08e940805869	t
575	44	ruby	anagram	2	done	2014-05-03 21:43:01	2013-12-02 02:31:42	2014-05-03 21:43:01	14551221a1f6d11f0b6742fe	t
576	44	clojure	meetup	1	hibernating	\N	2013-11-22 20:16:57	2014-02-24 06:14:06	cdaaea09600926b633300068	t
577	44	coffeescript	palindrome-products	5	done	2014-05-19 13:22:35	2013-11-29 14:24:22	2014-05-19 13:22:35	b85bb88de6e33f07e7ae3923	t
578	44	haskell	meetup	1	done	2014-05-15 12:08:26	2013-12-14 20:27:36	2014-05-15 12:08:26	84fa5d1aa37d9deb4c34f13d	t
579	44	python	bob	3	done	2014-03-22 13:21:09	2013-12-06 10:31:26	2014-03-22 13:21:09	cba194db7f04811cfcfb76b6	t
580	44	ruby	bob	3	done	2014-05-14 19:47:20	2014-01-27 03:23:09	2014-05-14 19:47:20	69f55139fed8e9a0ae95c9ce	t
581	44	javascript	nucleotide-count	1	pending	\N	2014-03-13 00:41:49	2014-03-13 00:41:49	af0ca3ee3b037af4f7e4c1b5	t
582	44	haskell	point-mutations	1	done	2014-03-22 11:40:26	2014-02-10 04:28:30	2014-03-22 11:40:26	af3c20172b30f6d4db55e3b5	t
583	44	python	rna-transcription	1	hibernating	\N	2014-02-11 20:55:10	2014-04-23 06:03:12	ccb9d2101182e776ec46d992	t
584	44	clojure	phone-number	2	pending	\N	2013-12-07 16:59:16	2013-12-07 16:59:16	34274b5b150a8ef0f4b916fa	t
585	45	javascript	bob	2	done	2014-05-24 19:06:31	2013-11-05 04:27:48	2014-05-24 19:06:31	dfd3c8726059c6f5db04987f	t
586	45	haskell	binary	2	done	2014-01-11 23:31:59	2013-12-18 05:02:40	2014-01-11 23:31:59	ea32cb41c67ec85876d7af8b	t
587	45	haskell	allergies	3	done	2014-04-05 11:30:43	2013-12-08 17:22:58	2014-04-05 11:30:43	642d2f5b317e64a2a516ba2e	t
588	45	javascript	word-count	1	pending	\N	2013-11-30 21:43:27	2013-11-30 21:43:27	e5e386bb61fe50849c662bf0	f
589	45	ruby	anagram	1	hibernating	\N	2013-10-30 02:13:43	2014-03-19 04:52:41	743e82a7d784b43ff168bfdf	f
590	45	ruby	bob	1	done	2014-04-01 11:36:11	2013-11-10 06:37:29	2014-04-01 11:36:11	6d4d2fb441146c48ff8e9ca8	t
591	45	haskell	rna-transcription	3	done	2014-04-21 12:06:09	2013-12-11 00:25:06	2014-04-21 12:06:09	6c712a3f453a86d4e8c44efc	t
592	45	ruby	grade-school	1	done	2014-04-15 01:01:20	2013-12-19 13:14:19	2014-04-15 01:01:20	5724963e875e386f48615a63	t
593	45	ruby	atbash-cipher	1	pending	\N	2013-10-22 21:17:35	2013-10-22 21:17:35	b97ff1f92d9372c9a9a323b8	t
594	45	javascript	anagram	1	done	2014-03-24 08:21:39	2014-02-02 14:52:05	2014-03-24 08:21:39	af644881a4076ba65410addc	t
595	45	ruby	grains	1	done	2014-01-06 00:09:29	2013-10-19 06:45:16	2014-01-06 00:09:29	4114ede58e99fe8ad5310841	t
596	45	python	bob	1	hibernating	\N	2013-11-25 16:34:26	2014-04-02 23:04:04	5597913492e94c7775dacecd	t
597	45	python	word-count	4	done	2014-03-14 20:16:37	2013-10-28 22:33:31	2014-03-14 20:16:37	c56007390d6d2f2328d9fc7e	t
598	45	javascript	grade-school	1	pending	\N	2013-12-17 06:01:33	2013-12-17 06:01:33	9bda1dd960785ae334b68a07	t
599	46	javascript	word-count	2	done	2014-05-23 16:03:49	2014-04-10 05:45:26	2014-05-23 16:03:49	311703fa5f2af4e614ddbb2f	t
600	46	python	space-age	1	done	2014-04-19 04:35:11	2014-02-20 06:01:45	2014-04-19 04:35:11	e0a07e1de746db42a9314c8f	t
601	46	javascript	sieve	2	pending	\N	2014-01-14 16:46:35	2014-01-14 16:46:35	233150bb6019c90807d0cbbe	t
602	46	haskell	scrabble-score	2	done	2014-03-16 17:36:19	2014-02-17 01:11:10	2014-03-16 17:36:19	c53c569330d5afa809b6c2ec	t
603	46	haskell	hexadecimal	1	done	2014-04-26 22:22:10	2014-04-26 12:49:35	2014-04-26 22:22:10	d05172a02648e5e25f547b74	t
604	46	ruby	hamming	1	hibernating	\N	2014-01-08 02:52:09	2014-02-28 19:39:30	a5cc5bcc5875c563291898de	f
605	46	javascript	point-mutations	1	hibernating	\N	2014-02-21 21:30:47	2014-03-18 20:53:41	71a529e3d10f08c0de9e2b6f	t
606	46	ruby	etl	1	pending	\N	2014-04-13 16:19:49	2014-04-13 16:19:49	1c04287de5078e7323ce391c	t
607	46	ruby	word-count	7	done	2014-05-14 12:03:28	2014-01-02 10:05:45	2014-05-14 12:03:28	4adcf19e3e46b594c866427f	t
608	46	ruby	phone-number	1	done	2014-04-25 10:50:39	2014-04-08 07:14:56	2014-04-25 10:50:39	0a594d7ead668f97595b4766	t
609	46	javascript	secret-handshake	1	done	2014-02-28 06:53:44	2014-02-03 12:20:16	2014-02-28 06:53:44	3ab45e6548e4c77ca97d82cd	t
610	46	ruby	anagram	4	done	2014-05-19 03:22:46	2014-01-21 04:18:49	2014-05-19 03:22:46	a0652d3178f33a08c3ef6c79	t
611	46	python	largest-series-product	1	pending	\N	2014-03-29 06:22:15	2014-03-29 06:22:15	88becfb2f691d6ffc961b35d	t
612	46	haskell	rna-transcription	2	done	2014-02-16 11:55:58	2014-01-05 11:49:21	2014-02-16 11:55:58	ddec8962e62fa8ceb6e1ed02	t
613	46	ruby	bob	3	done	2014-04-06 17:06:01	2014-01-03 17:55:06	2014-04-06 17:06:01	1294d89487b793256623ff7f	t
614	46	ruby	robot-name	1	done	2014-05-26 21:37:45	2014-04-11 23:43:36	2014-05-26 21:37:45	ef1e39096522cf6f5f128178	t
615	46	clojure	bob	5	done	2014-05-21 16:16:27	2014-01-10 16:12:15	2014-05-21 16:16:27	f084dfaf689c83bdf02ff50b	t
616	46	javascript	bob	2	done	2014-05-02 23:54:56	2014-01-16 00:33:56	2014-05-02 23:54:56	7b674190e1f56af5db5737bc	t
617	46	python	anagram	5	done	2014-05-26 04:44:09	2014-01-05 14:45:05	2014-05-26 04:44:09	5f5b7ba5272c2adc9138255d	t
618	47	python	bob	3	hibernating	\N	2014-04-13 04:09:18	2014-05-08 22:22:05	5e155d09eec0f6e36c5de5da	t
619	47	clojure	word-count	4	pending	\N	2014-04-19 00:28:55	2014-04-19 00:28:55	dbe097fbaed2f50b5ffb3aca	t
620	47	coffeescript	word-count	1	pending	\N	2014-04-18 05:28:06	2014-04-18 05:28:06	902125d1459a6f2012ee0e17	f
621	47	ruby	hamming	1	done	2014-05-12 17:03:34	2014-04-26 01:04:59	2014-05-12 17:03:34	049db06614b00fa3911db8f1	t
622	47	clojure	etl	1	done	2014-05-06 16:11:33	2014-05-03 12:46:59	2014-05-06 16:11:33	c10eec2940c4c720edeeff57	t
623	47	javascript	leap	1	done	2014-04-28 10:20:17	2014-04-15 19:10:52	2014-04-28 10:20:17	af7befc2ea65e7c9245b2200	t
624	47	haskell	point-mutations	2	done	2014-04-20 14:51:46	2014-04-18 03:30:52	2014-04-20 14:51:46	d11b758481c98d57f6bbaa7f	t
625	47	clojure	rna-transcription	1	done	2014-05-26 00:03:22	2014-04-28 19:02:19	2014-05-26 00:03:22	1d3be0fc2a1cc51949c95695	t
626	47	javascript	bob	2	done	2014-05-11 13:02:19	2014-04-13 08:40:22	2014-05-11 13:02:19	df00f24a5e02ae83e61dd6a0	t
627	47	go	atbash-cipher	1	pending	\N	2014-04-30 04:35:45	2014-04-30 04:35:45	f1a0e348db34b10c2b489fff	t
628	47	ruby	anagram	3	done	2014-04-24 07:58:42	2014-04-17 09:18:18	2014-04-24 07:58:42	43f1df4c68a07d2f8fb37604	t
629	47	python	nucleotide-count	1	pending	\N	2014-05-11 08:12:03	2014-05-11 08:12:03	86293ce38de83dc837ced270	f
630	47	javascript	custom-set	1	pending	\N	2014-04-13 23:35:40	2014-04-13 23:35:40	876309eec69ba0bdd272f672	t
631	47	ruby	triangle	3	pending	\N	2014-04-25 15:32:14	2014-04-25 15:32:14	f4362f66bb50628f96e88cd6	t
632	47	clojure	point-mutations	3	hibernating	\N	2014-04-26 06:28:30	2014-05-26 16:40:35	c6623ddb148a6a56f146397f	f
633	47	go	leap	4	done	2014-05-26 00:01:31	2014-04-10 21:14:40	2014-05-26 00:01:31	0ab4ef522bea61d5d9543044	t
634	47	go	allergies	1	done	2014-05-26 15:54:44	2014-05-14 01:01:01	2014-05-26 15:54:44	fe020e5b5abc776ce24a1290	t
635	47	ruby	bob	5	done	2014-05-04 22:37:49	2014-04-14 13:19:07	2014-05-04 22:37:49	da5aa2fde081f0a2f22ffdf3	t
636	47	haskell	simple-linked-list	2	done	2014-05-15 04:44:34	2014-04-10 16:19:30	2014-05-15 04:44:34	42bce6a282ce1d695deef3d2	t
637	47	haskell	allergies	1	done	2014-05-09 14:08:46	2014-05-06 18:40:30	2014-05-09 14:08:46	0525604ddb34f450d1ceeb35	t
638	48	clojure	word-count	1	pending	\N	2013-10-07 10:55:48	2013-10-07 10:55:48	661611f99314c8b6d0f82d41	t
639	48	ruby	atbash-cipher	1	done	2014-05-08 11:47:20	2014-03-19 08:44:14	2014-05-08 11:47:20	309a3f770629ad146967daef	t
640	48	clojure	rna-transcription	1	done	2014-04-11 23:54:15	2014-03-10 00:10:44	2014-04-11 23:54:15	dc8a0a066dd6c9351876cf37	t
641	48	ruby	space-age	3	pending	\N	2013-11-09 18:33:04	2013-11-09 18:33:04	7444e43142d0ebc7db105fa2	t
642	48	ruby	leap	1	done	2014-04-14 20:31:22	2013-10-17 14:46:34	2014-04-14 20:31:22	cf5f9b826ee29e9def61a644	t
643	48	haskell	bob	4	done	2014-04-17 08:24:04	2013-10-28 16:36:32	2014-04-17 08:24:04	4326afaa16607bd457270de4	t
644	48	elixir	accumulate	1	done	2014-05-19 15:47:03	2014-01-13 03:52:04	2014-05-19 15:47:03	d75747701989497ab7d1ec54	t
645	48	ruby	nucleotide-count	1	done	2014-04-09 21:17:34	2014-02-05 18:40:57	2014-04-09 21:17:34	f52d7ad469efac3d8fa66b61	t
646	48	ruby	gigasecond	1	pending	\N	2013-10-23 04:50:07	2013-10-23 04:50:07	755d7c1511e5219236c83367	f
647	48	clojure	bob	1	done	2014-04-27 09:36:50	2014-04-06 16:25:34	2014-04-27 09:36:50	9018b699f65433c9ec53c0fe	t
648	48	haskell	robot-name	3	done	2014-02-06 13:44:50	2013-11-25 08:51:08	2014-02-06 13:44:50	37b94262ec524e7373fad92e	t
649	48	ruby	hamming	1	done	2014-04-23 02:06:11	2014-03-28 22:13:55	2014-04-23 02:06:11	fb5ce3668a459025185476ce	t
650	48	elixir	anagram	1	done	2014-02-23 01:57:25	2013-10-11 17:56:17	2014-02-23 01:57:25	49da6a66a3365724999a8ecf	t
651	48	haskell	point-mutations	2	done	2014-05-19 09:08:40	2014-02-16 22:28:17	2014-05-19 09:08:40	6c0b2146e26fe84a01795686	t
652	48	ocaml	minesweeper	1	done	2014-03-04 19:59:47	2013-12-12 15:31:33	2014-03-04 19:59:47	14916272738f91342559873c	t
653	48	ruby	bob	4	done	2014-05-18 13:54:23	2013-11-01 01:06:04	2014-05-18 13:54:23	b7a8ad83896e62c97399b2f8	t
654	48	ruby	grains	2	pending	\N	2013-10-29 19:02:18	2013-10-29 19:02:18	84205468be76993265c7faa9	t
655	48	ruby	scrabble-score	1	pending	\N	2013-12-18 20:52:51	2013-12-18 20:52:51	64ba3f9e841f98c32533121f	t
656	48	python	rna-transcription	1	done	2013-10-17 02:42:59	2013-10-15 16:15:30	2013-10-17 02:42:59	bc01c393ef5505686c0ae329	t
657	48	haskell	phone-number	3	done	2014-03-30 15:09:56	2013-10-11 13:03:06	2014-03-30 15:09:56	34c0c4fbe6d1f52624e67728	t
658	31	ruby	etl	3	done	2014-04-11 16:31:17	2014-03-17 02:59:46	2014-04-11 16:31:17	e78c0abc3168f0d6ad67787a	t
659	31	ruby	hamming	6	done	2014-05-20 16:59:17	2014-03-22 05:24:28	2014-05-20 16:59:17	81d985fc7107430e3b7f10e7	t
660	31	ruby	rna-transcription	4	done	2014-05-26 16:53:46	2014-02-26 14:48:59	2014-05-26 16:53:46	92f46e66259d0b4e4c289858	t
661	31	ruby	grade-school	1	done	2014-05-12 13:51:27	2014-03-16 00:23:27	2014-05-12 13:51:27	0531576585d8bf0dbaba894d	t
662	31	ruby	anagram	5	done	2014-05-25 23:29:33	2014-03-01 00:32:36	2014-05-25 23:29:33	5e5a4020434e960e7e9ffa5d	t
663	31	ruby	nucleotide-count	3	done	2014-04-16 09:56:01	2014-02-21 14:40:32	2014-04-16 09:56:01	063b39d4ecfe1eb5b2632230	t
664	31	ruby	bob	7	done	2014-05-27 03:42:50	2014-03-05 03:08:09	2014-05-27 03:42:50	a0434c90ddf9c827928a61f8	t
665	31	ruby	word-count	7	done	2014-05-24 13:25:30	2014-02-23 17:07:18	2014-05-24 13:25:30	7e5cf9bd4187b3650f1bcd30	t
666	31	ruby	gigasecond	1	done	2014-05-01 12:06:05	2014-03-09 06:50:37	2014-05-01 12:06:05	de5a1f2daf12d9449bea3103	t
667	31	ruby	point-mutations	1	done	2014-05-14 15:55:17	2014-03-16 21:17:23	2014-05-14 15:55:17	c9e988a9cc48688d797d1648	t
668	31	ruby	meetup	1	done	2014-05-25 00:33:32	2014-03-04 17:16:46	2014-05-25 00:33:32	2b5473549230a0a7118f69dc	t
669	31	ruby	strain	1	done	2014-03-19 12:06:21	2014-03-11 08:52:11	2014-03-19 12:06:21	cca2916b4c6b6ffdf89e3405	t
670	31	ruby	atbash-cipher	3	done	2014-05-17 02:01:20	2014-02-28 07:41:00	2014-05-17 02:01:20	166012209929cdcdf2ed3cf0	t
671	31	ruby	leap	1	pending	\N	2014-04-07 21:39:28	2014-04-07 21:39:28	e74fe00670a97a54f6bdcddd	t
672	39	ruby	word-count	2	hibernating	\N	2014-03-19 09:22:16	2014-04-26 04:09:32	a5aaf4fafa573ae98cf9bd18	f
673	39	ruby	nucleotide-count	3	done	2014-05-14 11:05:58	2014-04-16 06:54:46	2014-05-14 11:05:58	d2580fb672d890099517a104	t
674	39	ruby	leap	2	hibernating	\N	2014-04-13 13:23:49	2014-05-23 15:09:15	d0a8e3427d8b33b61604694e	t
675	39	ruby	phone-number	1	done	2014-05-14 10:32:16	2014-03-23 13:06:32	2014-05-14 10:32:16	763d60516db2a845ff46e1ec	t
676	39	ruby	saddle-points	1	pending	\N	2014-03-24 02:27:31	2014-03-24 02:27:31	4143e791d1cf243264747021	t
677	39	ruby	bob	1	hibernating	\N	2014-03-26 17:11:37	2014-05-13 13:24:06	d1d51935c8db384645a96386	f
678	39	ruby	triangle	1	pending	\N	2014-04-11 03:20:01	2014-04-11 03:20:01	ef164843abf0e450d04a1091	t
679	39	ruby	accumulate	1	done	2014-04-26 22:08:59	2014-03-17 10:46:20	2014-04-26 22:08:59	9d8b22b7af05ec76db9cfb01	t
680	39	ruby	grains	2	pending	\N	2014-03-15 22:01:47	2014-03-15 22:01:47	1b6b0e8805fc8a3586a1c397	t
681	39	ruby	anagram	5	done	2014-05-20 21:52:14	2014-04-03 13:55:12	2014-05-20 21:52:14	5d83f1195f0b6086981753c4	t
682	39	ruby	robot-name	1	done	2014-04-30 16:40:15	2014-04-15 09:45:15	2014-04-30 16:40:15	8ee25b2dba3edc7120e7d9c0	t
683	39	ruby	raindrops	1	pending	\N	2014-04-05 01:21:04	2014-04-05 01:21:04	7f8d596ef0d5c7dc33328cf9	f
684	39	ruby	beer-song	1	done	2014-05-25 11:54:04	2014-04-09 14:36:00	2014-05-25 11:54:04	0f7b179f1da759497367818d	t
685	34	ruby	bob	2	done	2014-04-04 16:54:32	2014-01-26 19:47:23	2014-04-04 16:54:32	9fde748c41eb0acdb12006b3	t
686	34	ruby	nucleotide-count	3	done	2014-04-25 00:23:12	2014-02-11 15:21:57	2014-04-25 00:23:12	e6a9c2ca5a59305ea52391b5	t
687	34	ruby	grade-school	2	done	2014-05-25 03:30:03	2014-03-19 05:43:43	2014-05-25 03:30:03	c93331dd5cbfe8e70994f4c9	t
688	34	ruby	pythagorean-triplet	1	pending	\N	2014-05-11 03:55:44	2014-05-11 03:55:44	d432eacf9b50325bbff0137d	f
689	34	ruby	word-count	1	hibernating	\N	2014-01-22 18:25:49	2014-03-28 22:39:37	bc88902e01ed2c765052f99e	t
690	34	ruby	food-chain	2	pending	\N	2014-03-17 04:50:37	2014-03-17 04:50:37	e19842dd1f51f7227d472feb	f
691	34	ruby	strain	1	done	2014-03-24 00:46:55	2014-01-24 02:04:40	2014-03-24 00:46:55	8d57e665e0fb0e503bc3f12f	t
692	34	ruby	grains	1	hibernating	\N	2014-02-07 00:17:04	2014-02-16 14:03:07	6c6ba48fe1efcab5aa0f3133	t
693	34	ruby	sieve	4	done	2014-05-22 07:15:28	2014-02-03 04:25:35	2014-05-22 07:15:28	316d708dcd3878cbb8bfd02d	t
694	34	ruby	triangle	1	done	2014-03-28 01:48:09	2014-02-12 12:24:08	2014-03-28 01:48:09	f18ce7ee5633668c3e60f11c	t
695	34	ruby	clock	1	done	2014-05-13 00:37:28	2014-01-29 04:24:50	2014-05-13 00:37:28	e44ec04316cd2d006388a567	t
696	34	ruby	raindrops	3	pending	\N	2014-01-30 23:58:46	2014-01-30 23:58:46	dc73b0f646dd074aa6f13628	t
697	34	ruby	rna-transcription	2	done	2014-04-29 21:04:04	2014-03-04 10:19:35	2014-04-29 21:04:04	49280f7aed1648101c5cdafa	t
698	34	ruby	\N	1	pending	\N	2014-01-25 21:26:23	2014-01-25 21:26:23	053550ec881fb35f6b627afe	t
699	34	ruby	robot-name	3	done	2014-05-07 13:35:00	2014-01-28 06:50:09	2014-05-07 13:35:00	9d59b4424a256017f5bd8b6c	t
700	36	ruby	hamming	1	pending	\N	2013-10-12 16:06:08	2013-10-12 16:06:08	53ff8a2b08a4f32920c71108	t
701	36	ruby	anagram	3	done	2014-04-26 02:47:53	2013-12-04 07:00:44	2014-04-26 02:47:53	0bd4730ed4ec8b94e31c0909	t
702	36	ruby	bob	2	done	2014-02-12 01:52:06	2013-10-29 00:56:37	2014-02-12 01:52:06	d296d73a1d9f73b81574e4a3	t
703	36	ruby	leap	2	pending	\N	2014-02-03 20:38:13	2014-02-03 20:38:13	54525c6ff2c3ccc3fe771e8a	t
704	36	ruby	meetup	2	done	2014-02-14 17:38:09	2013-12-01 13:20:26	2014-02-14 17:38:09	ae6b2696e9cc1a0108b1239a	t
705	36	ruby	point-mutations	2	done	2014-01-31 16:29:11	2013-10-27 04:55:13	2014-01-31 16:29:11	00c75e73580f0f70cdceafe8	t
706	36	ruby	roman-numerals	1	hibernating	\N	2013-12-23 22:36:56	2014-01-28 23:36:26	dad23a2955caa9925c73e149	t
707	36	ruby	grains	1	hibernating	\N	2013-11-01 00:47:55	2014-05-16 09:52:56	edf45848b76f6a1be3dd7dbc	t
708	36	ruby	simple-cipher	1	pending	\N	2013-10-27 02:12:26	2013-10-27 02:12:26	a20fa155cc9da8b4d3c1d409	t
709	36	ruby	nucleotide-count	1	done	2014-05-17 05:28:04	2014-04-28 09:32:55	2014-05-17 05:28:04	5f48e5eb44a9b550f235e155	t
710	36	ruby	difference-of-squares	1	pending	\N	2014-03-18 21:18:44	2014-03-18 21:18:44	031f61c77e516093bc4c7d37	t
711	36	ruby	rna-transcription	2	done	2014-05-17 15:55:12	2014-03-10 13:22:29	2014-05-17 15:55:12	5ba450e388efe969b6e124f2	t
712	32	ruby	pig-latin	1	done	2014-05-24 14:26:14	2014-04-13 17:31:07	2014-05-24 14:26:14	3814588c84c49c863261b330	t
713	32	ruby	bob	1	hibernating	\N	2014-02-22 00:31:39	2014-03-31 05:20:16	954cecb4ac7521b21a014fc1	f
714	32	ruby	raindrops	1	pending	\N	2014-03-23 04:32:55	2014-03-23 04:32:55	5eda0f081e974ecd63e2d300	t
715	32	ruby	leap	8	pending	\N	2014-02-18 00:46:09	2014-02-18 00:46:09	b6faf956699e7f69347708ad	t
716	32	ruby	phone-number	4	done	2014-05-04 18:47:18	2014-02-20 04:20:00	2014-05-04 18:47:18	238ccd11f498a6432ca83162	t
717	32	ruby	anagram	10	done	2014-05-17 01:32:42	2014-02-26 13:26:57	2014-05-17 01:32:42	2c87ed22594c590bf15e525b	t
718	32	ruby	hamming	2	hibernating	\N	2014-03-23 19:32:38	2014-05-02 23:51:46	0ecc7472c8c9ff46a7c03d64	f
719	32	ruby	word-count	3	done	2014-05-17 14:04:15	2014-03-26 23:51:41	2014-05-17 14:04:15	4ebe8a8387f82a07a4cd26d3	t
720	32	ruby	grains	1	needs_input	\N	2014-04-26 02:30:13	2014-04-26 02:30:13	ff608da47f42493522a1eecc	t
721	32	ruby	etl	1	done	2014-05-05 08:37:16	2014-02-21 17:51:25	2014-05-05 08:37:16	ef68085a2f57d31d5e8ac3a9	t
722	32	ruby	gigasecond	1	pending	\N	2014-02-22 07:42:29	2014-02-22 07:42:29	d23694e8bd0b7b4967037d0d	t
723	32	ruby	simple-cipher	2	done	2014-04-28 21:38:15	2014-02-18 04:17:48	2014-04-28 21:38:15	883c51069f2405069043fa42	t
724	32	ruby	space-age	5	done	2014-05-22 03:54:58	2014-03-04 11:29:51	2014-05-22 03:54:58	25128a49e31e21dd71cf547b	t
725	35	ruby	bob	2	done	2013-12-30 08:05:58	2013-11-14 08:30:34	2013-12-30 08:05:58	6e7c0b7c683eee4ed50e5622	t
726	35	ruby	anagram	1	done	2014-05-04 00:03:03	2013-11-27 15:16:37	2014-05-04 00:03:03	d5ab88b99865829194030269	t
727	35	ruby	hamming	2	done	2014-04-06 07:06:49	2014-01-05 20:54:18	2014-04-06 07:06:49	989f5bc7365961b18ac1866e	t
728	35	ruby	raindrops	2	pending	\N	2014-03-02 04:56:06	2014-03-02 04:56:06	8110901381765bba2c09bd23	t
729	35	ruby	sieve	4	done	2014-04-22 15:20:13	2013-12-10 14:26:25	2014-04-22 15:20:13	12fa7c0667e84f4b1f9ed901	t
730	35	ruby	binary	2	pending	\N	2013-10-17 11:04:12	2013-10-17 11:04:12	fab7a16cd7b29b7cfd8e6f33	t
731	35	ruby	nucleotide-count	1	done	2014-05-09 01:17:04	2014-04-03 14:06:34	2014-05-09 01:17:04	13f2eb784155aad39b5fd96b	t
732	35	ruby	leap	6	done	2014-05-24 06:54:09	2013-10-19 15:57:55	2014-05-24 06:54:09	a2d16d5e15a7b2cbeb0649de	t
733	35	ruby	word-count	1	done	2014-01-18 17:04:17	2013-12-19 16:43:27	2014-01-18 17:04:17	d9f0c2290c699a8a61c7733d	t
734	35	ruby	space-age	1	done	2013-10-27 06:43:33	2013-10-27 04:20:37	2013-10-27 06:43:33	1b0825695793342f7c186a0e	t
735	33	ruby	word-count	2	done	2014-05-11 02:00:19	2014-04-10 14:23:24	2014-05-11 02:00:19	70c97dc7c1fc6b45785609cb	t
736	33	ruby	hamming	4	done	2014-05-20 02:26:28	2014-04-18 04:25:00	2014-05-20 02:26:28	349d56f0721731324daedcc1	t
737	33	ruby	bob	2	done	2014-05-23 06:43:04	2014-04-11 10:16:01	2014-05-23 06:43:04	92ed8b15043ece38eda98807	t
738	33	ruby	nucleotide-count	3	done	2014-05-14 04:27:10	2014-04-18 03:05:46	2014-05-14 04:27:10	b250632fdc84d8c86950fa8d	t
739	33	ruby	roman-numerals	1	pending	\N	2014-04-20 12:32:55	2014-04-20 12:32:55	f82845ac8d4d7ff63a1fb2fd	t
740	33	ruby	clock	1	pending	\N	2014-04-13 15:34:41	2014-04-13 15:34:41	87493715d606f8f966531432	t
741	33	ruby	anagram	4	done	2014-05-27 08:00:23	2014-04-13 10:15:23	2014-05-27 08:00:23	4587a23aada65b3014158aae	t
742	33	ruby	proverb	2	hibernating	\N	2014-05-16 01:47:56	2014-05-23 01:05:25	9f37b10d155e9c1d4daf51df	t
743	33	ruby	scrabble-score	1	pending	\N	2014-04-24 07:10:02	2014-04-24 07:10:02	ec178ff8ccb150f8a597b3ef	t
744	33	ruby	strain	3	done	2014-05-26 00:16:29	2014-05-07 07:39:53	2014-05-26 00:16:29	f5eed36e8feb2b2e8a5afae2	t
745	33	ruby	leap	3	done	2014-05-15 23:31:38	2014-04-17 09:35:15	2014-05-15 23:31:38	e4f15850c839335d883671a5	t
746	33	ruby	atbash-cipher	3	done	2014-05-26 13:19:40	2014-04-19 23:17:35	2014-05-26 13:19:40	46f2db74e0cbaaa5330f1113	t
747	40	ruby	bob	2	done	2014-04-16 18:16:55	2013-10-05 11:18:04	2014-04-16 18:16:55	fdaf6a5fb49d98d1601eee9d	t
748	40	ruby	anagram	10	done	2014-05-12 12:15:05	2013-10-24 01:49:10	2014-05-12 12:15:05	6eb4fcfe1c0df8796fa7ca54	t
749	40	ruby	house	1	pending	\N	2014-01-12 16:04:53	2014-01-12 16:04:53	cd8bdeeca0e1d24abda7e52d	f
750	40	ruby	beer-song	1	pending	\N	2014-02-17 20:46:55	2014-02-17 20:46:55	f1e6a4d450a72d50552a2ec0	t
751	40	ruby	triangle	3	done	2014-05-25 19:50:06	2014-01-25 10:04:55	2014-05-25 19:50:06	88178cb8e541dfded6357071	t
752	40	ruby	linked-list	1	done	2014-01-20 19:23:08	2013-10-24 15:24:44	2014-01-20 19:23:08	d28550d9cfce0517bbd3997b	t
753	40	ruby	leap	1	done	2014-04-20 08:02:56	2014-02-17 17:14:32	2014-04-20 08:02:56	566821d5f5b1bc143f487367	t
754	40	ruby	word-count	2	done	2014-05-14 03:11:16	2014-01-25 15:22:35	2014-05-14 03:11:16	cf7b6b1a7c19edc5d52c24a6	t
755	40	ruby	food-chain	1	done	2014-03-04 09:29:06	2013-11-11 20:43:54	2014-03-04 09:29:06	fb19b7c88ace2d83b8df1e22	t
756	40	ruby	grade-school	2	done	2014-04-21 04:51:58	2013-11-16 13:56:16	2014-04-21 04:51:58	bf211b16ff5e457c3868a7dc	t
757	40	ruby	robot-name	3	done	2014-03-30 01:18:49	2013-11-01 16:33:33	2014-03-30 01:18:49	9787a5c6236c34585e697dfc	t
\.


--
-- Name: user_exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('user_exercises_id_seq', 757, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY users (id, username, email, avatar_url, github_id, key, mastery, created_at, updated_at) FROM stdin;
1	alice	\N	https://s3.amazonaws.com/uifaces/faces/twitter/gt/128.jpg	-20413	dtz231	---\n- clojure\n- coffeescript\n- elixir\n- go\n- haskell\n- javascript\n- objective-c\n- ocaml\n- perl5\n- python\n- ruby\n- scala\n	2014-04-08 15:39:09.402782	2014-04-08 15:39:09.402782
2	charlie	\N	https://s3.amazonaws.com/uifaces/faces/twitter/marcobarbosa/128.jpg	-32549	gmf380	---\n- ruby\n	2014-04-25 03:36:07.413595	2014-04-25 03:36:07.413595
3	diana	\N	https://s3.amazonaws.com/uifaces/faces/twitter/nachtmeister/128.jpg	-6049	tuv339	---\n- javascript\n	2014-02-03 01:01:18.41463	2014-02-03 01:01:18.41463
4	eve	\N	https://s3.amazonaws.com/uifaces/faces/twitter/ZacharyZorbas/128.jpg	-49416	vmj901	---\n- python\n	2013-10-20 17:58:33.415617	2013-10-20 17:58:33.415617
5	amelie	\N	https://s3.amazonaws.com/uifaces/faces/twitter/v_klimenko/128.jpg	-27930	jxb939	--- []\n	2014-01-13 05:56:09.416608	2014-01-13 05:56:09.416608
6	beth	\N	https://s3.amazonaws.com/uifaces/faces/twitter/pcridesagain/128.jpg	-97868	mxj724	--- []\n	2013-10-25 15:48:29.417537	2013-10-25 15:48:29.417537
7	bob	\N	https://s3.amazonaws.com/uifaces/faces/twitter/jefffis/128.jpg	-24114	ips987	--- []\n	2013-09-10 20:56:59.418364	2013-09-10 20:56:59.418364
8	claire	\N	https://s3.amazonaws.com/uifaces/faces/twitter/opnsrce/128.jpg	-48751	rgw232	--- []\n	2014-05-13 19:46:42.419246	2014-05-13 19:46:42.419246
9	dawson	\N	https://s3.amazonaws.com/uifaces/faces/twitter/devankoshal/128.jpg	-31221	hgm695	--- []\n	2013-11-09 19:34:55.419986	2013-11-09 19:34:55.419986
10	elisa	\N	https://s3.amazonaws.com/uifaces/faces/twitter/noxdzine/128.jpg	-3939	jeh205	--- []\n	2014-02-02 02:57:02.420763	2014-02-02 02:57:02.420763
11	frederique	\N	https://s3.amazonaws.com/uifaces/faces/twitter/giancarlon/128.jpg	-79217	qkm895	--- []\n	2014-01-25 20:59:50.42151	2014-01-25 20:59:50.42151
12	grace	\N	https://s3.amazonaws.com/uifaces/faces/twitter/starburst1977/128.jpg	-45797	qtr512	--- []\n	2013-10-17 14:37:02.422266	2013-10-17 14:37:02.422266
13	haley	\N	https://s3.amazonaws.com/uifaces/faces/twitter/thedamianhdez/128.jpg	-59717	htw599	--- []\n	2013-10-28 11:20:32.423005	2013-10-28 11:20:32.423005
14	isaac	\N	https://s3.amazonaws.com/uifaces/faces/twitter/maximseshuk/128.jpg	-11291	jdg317	--- []\n	2013-10-13 14:45:53.423772	2013-10-13 14:45:53.423772
15	jarrod	\N	https://s3.amazonaws.com/uifaces/faces/twitter/anoff/128.jpg	-40002	vqu628	--- []\n	2014-04-24 21:33:09.424532	2014-04-24 21:33:09.424532
16	kieran	\N	https://s3.amazonaws.com/uifaces/faces/twitter/teclaro/128.jpg	-89984	hma237	--- []\n	2013-09-27 13:22:54.425465	2013-09-27 13:22:54.425465
17	lisa	\N	https://s3.amazonaws.com/uifaces/faces/twitter/tutsii159/128.jpg	-37477	uum390	--- []\n	2014-02-14 21:15:18.426217	2014-02-14 21:15:18.426217
18	mack	\N	https://s3.amazonaws.com/uifaces/faces/twitter/sedovsek/128.jpg	-98202	qgq456	--- []\n	2013-09-04 10:25:11.426946	2013-09-04 10:25:11.426946
19	madison	\N	https://s3.amazonaws.com/uifaces/faces/twitter/jedbridges/128.jpg	-42234	cgq392	--- []\n	2014-01-12 00:09:27.42767	2014-01-12 00:09:27.42767
20	marshall	\N	https://s3.amazonaws.com/uifaces/faces/twitter/kaelifa/128.jpg	-76682	xjq963	--- []\n	2014-03-24 03:17:29.428388	2014-03-24 03:17:29.428388
21	mary	\N	https://s3.amazonaws.com/uifaces/faces/twitter/brandclay/128.jpg	-54958	yfk843	--- []\n	2013-09-14 13:16:10.429145	2013-09-14 13:16:10.429145
22	mia	\N	https://s3.amazonaws.com/uifaces/faces/twitter/kennyadr/128.jpg	-36519	dyr604	--- []\n	2014-05-13 03:53:52.429917	2014-05-13 03:53:52.429917
23	mike	\N	https://s3.amazonaws.com/uifaces/faces/twitter/iqonicd/128.jpg	-79889	tqx575	--- []\n	2014-01-12 16:21:40.430783	2014-01-12 16:21:40.430783
24	mildred	\N	https://s3.amazonaws.com/uifaces/faces/twitter/aaronalfred/128.jpg	-60586	umz150	--- []\n	2014-03-08 10:56:00.431532	2014-03-08 10:56:00.431532
25	mitchell	\N	https://s3.amazonaws.com/uifaces/faces/twitter/salleedesign/128.jpg	-19899	vpd105	--- []\n	2013-11-27 07:47:09.432236	2013-11-27 07:47:09.432236
26	morris	\N	https://s3.amazonaws.com/uifaces/faces/twitter/jennyshen/128.jpg	-18737	ytc787	--- []\n	2014-04-26 15:06:03.432929	2014-04-26 15:06:03.432929
27	norma	\N	https://s3.amazonaws.com/uifaces/faces/twitter/gearpixels/128.jpg	-33561	qsq800	--- []\n	2014-02-25 16:03:04.43362	2014-02-25 16:03:04.43362
28	opal	\N	https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg	-52788	gbg528	--- []\n	2014-04-06 14:22:16.434417	2014-04-06 14:22:16.434417
29	paula	\N	https://s3.amazonaws.com/uifaces/faces/twitter/andrea211087/128.jpg	-58093	eew738	--- []\n	2013-10-16 09:55:11.435165	2013-10-16 09:55:11.435165
30	quentin	\N	https://s3.amazonaws.com/uifaces/faces/twitter/SULiik/128.jpg	-68437	vyj461	--- []\n	2014-05-10 18:14:45.435931	2014-05-10 18:14:45.435931
31	rachel	\N	https://s3.amazonaws.com/uifaces/faces/twitter/stan/128.jpg	-29751	fci845	--- []\n	2014-02-21 01:42:23.436711	2014-02-21 01:42:23.436711
32	randall	\N	https://s3.amazonaws.com/uifaces/faces/twitter/lokesh_coder/128.jpg	-82163	akm384	--- []\n	2014-02-16 23:00:39.437508	2014-02-16 23:00:39.437508
33	rick	\N	https://s3.amazonaws.com/uifaces/faces/twitter/ooomz/128.jpg	-97144	ixc284	--- []\n	2014-04-08 21:54:19.438264	2014-04-08 21:54:19.438264
34	rita	\N	https://s3.amazonaws.com/uifaces/faces/twitter/guillemboti/128.jpg	-36660	fiw937	--- []\n	2014-01-20 21:35:26.439	2014-01-20 21:35:26.439
35	river	\N	https://s3.amazonaws.com/uifaces/faces/twitter/jm_denis/128.jpg	-22356	gfs222	--- []\n	2013-10-13 15:57:00.439759	2013-10-13 15:57:00.439759
36	rolf	\N	https://s3.amazonaws.com/uifaces/faces/twitter/rmlewisuk/128.jpg	-12229	rxk544	--- []\n	2013-09-24 06:26:05.440486	2013-09-24 06:26:05.440486
37	ruben	\N	https://s3.amazonaws.com/uifaces/faces/twitter/enda/128.jpg	-2357	rve168	--- []\n	2013-11-04 20:13:33.441231	2013-11-04 20:13:33.441231
38	rudi	\N	https://s3.amazonaws.com/uifaces/faces/twitter/arthurholcombe1/128.jpg	-60486	jok188	--- []\n	2014-03-24 14:47:45.441941	2014-03-24 14:47:45.441941
39	russ	\N	https://s3.amazonaws.com/uifaces/faces/twitter/baires/128.jpg	-70718	xak604	--- []\n	2014-03-15 06:31:51.44269	2014-03-15 06:31:51.44269
40	ryan	\N	https://s3.amazonaws.com/uifaces/faces/twitter/kerem/128.jpg	-18871	hdx930	--- []\n	2013-10-03 14:24:26.443502	2013-10-03 14:24:26.443502
41	shaina	\N	https://s3.amazonaws.com/uifaces/faces/twitter/AM_Kn2/128.jpg	-80946	tbx718	--- []\n	2014-03-06 07:52:26.444496	2014-03-06 07:52:26.444496
42	talia	\N	https://s3.amazonaws.com/uifaces/faces/twitter/joreira/128.jpg	-49574	bzz827	--- []\n	2014-01-16 12:46:09.445336	2014-01-16 12:46:09.445336
43	ursula	\N	https://s3.amazonaws.com/uifaces/faces/twitter/ivanfilipovbg/128.jpg	-80353	bum646	--- []\n	2013-11-11 02:27:52.446148	2013-11-11 02:27:52.446148
44	vince	\N	https://s3.amazonaws.com/uifaces/faces/twitter/dahparra/128.jpg	-60850	axk419	--- []\n	2013-11-22 15:58:24.447259	2013-11-22 15:58:24.447259
45	wilson	\N	https://s3.amazonaws.com/uifaces/faces/twitter/traneblow/128.jpg	-13931	gnq568	--- []\n	2013-10-05 00:01:24.448172	2013-10-05 00:01:24.448172
46	xavier	\N	https://s3.amazonaws.com/uifaces/faces/twitter/ankitind/128.jpg	-8464	heb866	--- []\n	2013-12-30 05:21:30.448958	2013-12-30 05:21:30.448958
47	yvette	\N	https://s3.amazonaws.com/uifaces/faces/twitter/swaplord/128.jpg	-88899	gsa793	--- []\n	2014-04-10 11:42:52.449697	2014-04-10 11:42:52.449697
48	zachary	\N	https://s3.amazonaws.com/uifaces/faces/twitter/thedamianhdez/128.jpg	-41755	uge711	--- []\n	2013-10-06 23:58:07.450427	2013-10-06 23:58:07.450427
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('users_id_seq', 48, true);


--
-- Name: alerts_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY alerts
    ADD CONSTRAINT alerts_pkey PRIMARY KEY (id);


--
-- Name: comments_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_pkey PRIMARY KEY (id);


--
-- Name: likes_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY likes
    ADD CONSTRAINT likes_pkey PRIMARY KEY (id);


--
-- Name: log_entries_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY log_entries
    ADD CONSTRAINT log_entries_pkey PRIMARY KEY (id);


--
-- Name: looks_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY looks
    ADD CONSTRAINT looks_pkey PRIMARY KEY (id);


--
-- Name: muted_submissions_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY muted_submissions
    ADD CONSTRAINT muted_submissions_pkey PRIMARY KEY (id);


--
-- Name: notifications_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY notifications
    ADD CONSTRAINT notifications_pkey PRIMARY KEY (id);


--
-- Name: posts_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY posts
    ADD CONSTRAINT posts_pkey PRIMARY KEY (id);


--
-- Name: products_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY products
    ADD CONSTRAINT products_pkey PRIMARY KEY (id);


--
-- Name: quotes_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY quotes
    ADD CONSTRAINT quotes_pkey PRIMARY KEY (id);


--
-- Name: submission_viewers_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY submission_viewers
    ADD CONSTRAINT submission_viewers_pkey PRIMARY KEY (id);


--
-- Name: submissions_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY submissions
    ADD CONSTRAINT submissions_pkey PRIMARY KEY (id);


--
-- Name: team_managers_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY team_managers
    ADD CONSTRAINT team_managers_pkey PRIMARY KEY (id);


--
-- Name: team_memberships_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY team_memberships
    ADD CONSTRAINT team_memberships_pkey PRIMARY KEY (id);


--
-- Name: teams_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY teams
    ADD CONSTRAINT teams_pkey PRIMARY KEY (id);


--
-- Name: testimonials_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY testimonials
    ADD CONSTRAINT testimonials_pkey PRIMARY KEY (id);


--
-- Name: user_exercises_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY user_exercises
    ADD CONSTRAINT user_exercises_pkey PRIMARY KEY (id);


--
-- Name: users_pkey; Type: CONSTRAINT; Schema: public; Owner: exercism; Tablespace: 
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: by_submission; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE UNIQUE INDEX by_submission ON submission_viewers USING btree (submission_id, viewer_id);


--
-- Name: index_alerts_on_user_id; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_alerts_on_user_id ON alerts USING btree (user_id);


--
-- Name: index_submissions_on_key; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_submissions_on_key ON submissions USING btree (key);


--
-- Name: index_submissions_on_user_exercise_id; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_submissions_on_user_exercise_id ON submissions USING btree (user_exercise_id);


--
-- Name: index_teams_on_slug; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE UNIQUE INDEX index_teams_on_slug ON teams USING btree (slug);


--
-- Name: index_user_exercises_on_key; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE UNIQUE INDEX index_user_exercises_on_key ON user_exercises USING btree (key);


--
-- Name: index_user_exercises_on_language_and_slug_and_state; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_user_exercises_on_language_and_slug_and_state ON user_exercises USING btree (language, slug, state);


--
-- Name: index_user_exercises_on_user_id; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_user_exercises_on_user_id ON user_exercises USING btree (user_id);


--
-- Name: index_user_exercises_on_user_id_and_language_and_slug; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE UNIQUE INDEX index_user_exercises_on_user_id_and_language_and_slug ON user_exercises USING btree (user_id, language, slug);


--
-- Name: index_users_on_username; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE INDEX index_users_on_username ON users USING btree (username);


--
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: exercism; Tablespace: 
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- Name: public; Type: ACL; Schema: -; Owner: kytrinyx
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM kytrinyx;
GRANT ALL ON SCHEMA public TO kytrinyx;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

