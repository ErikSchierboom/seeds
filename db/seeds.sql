--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

--
-- Data for Name: acls; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY acls (id, user_id, language, slug, created_at, updated_at) FROM stdin;
1	9	fsharp	robot-name	2015-03-22 14:42:51	2015-03-22 14:42:51
4	11	ruby	grains	2015-05-03 00:40:21	2015-05-03 00:40:21
5	11	fsharp	robot-name	2015-04-24 01:04:59	2015-04-24 01:04:59
8	11	javascript	gigasecond	2015-05-18 15:50:28	2015-05-18 15:50:28
9	11	ruby	saddle-points	2015-04-29 23:34:49	2015-04-29 23:34:49
11	11	haskell	leap	2015-06-11 21:19:08	2015-06-11 21:19:08
15	11	haskell	accumulate	2015-07-28 13:30:32	2015-07-28 13:30:32
17	12	ruby	grains	2015-08-09 01:53:57	2015-08-09 01:53:57
18	12	coffeescript	bob	2015-08-29 12:57:12	2015-08-29 12:57:12
19	12	javascript	sieve	2015-07-24 17:34:46	2015-07-24 17:34:46
20	12	ruby	bob	2015-07-30 10:00:00	2015-07-30 10:00:00
22	12	ruby	twelve-days	2015-07-30 18:00:54	2015-07-30 18:00:54
23	15	python	wordy	2015-03-21 05:01:20	2015-03-21 05:01:20
24	15	javascript	anagram	2015-08-11 00:41:34	2015-08-11 00:41:34
25	15	ruby	sieve	2015-06-01 00:54:56	2015-06-01 00:54:56
26	22	python	grade-school	2015-03-25 05:24:17	2015-03-25 05:24:17
27	22	perl5	simple-cipher	2015-03-08 19:19:58	2015-03-08 19:19:58
29	22	javascript	gigasecond	2015-03-07 15:31:56	2015-03-07 15:31:56
30	22	lua	hamming	2015-02-24 21:46:03	2015-02-24 21:46:03
31	22	javascript	hamming	2015-05-25 04:45:11	2015-05-25 04:45:11
32	22	python	bob	2015-07-26 05:31:51	2015-07-26 05:31:51
33	22	python	leap	2015-01-31 02:40:01	2015-01-31 02:40:01
36	22	erlang	strain	2015-02-21 21:05:29	2015-02-21 21:05:29
37	22	haskell	strain	2015-04-07 22:03:01	2015-04-07 22:03:01
38	22	python	wordy	2015-02-05 23:34:01	2015-02-05 23:34:01
39	22	haskell	accumulate	2015-05-25 18:45:43	2015-05-25 18:45:43
41	22	ruby	prime-factors	2015-04-28 13:57:43	2015-04-28 13:57:43
42	22	coffeescript	bob	2015-06-18 07:59:44	2015-06-18 07:59:44
43	22	clojure	robot-name	2015-02-03 10:39:59	2015-02-03 10:39:59
44	22	ruby	raindrops	2015-03-24 00:45:54	2015-03-24 00:45:54
45	22	ruby	anagram	2015-04-29 05:24:42	2015-04-29 05:24:42
46	22	ruby	bob	2015-05-21 09:41:15	2015-05-21 09:41:15
48	22	fsharp	robot-name	2015-01-31 20:41:55	2015-01-31 20:41:55
51	22	haskell	leap	2015-05-20 00:18:41	2015-05-20 00:18:41
52	22	haskell	octal	2015-03-01 19:27:58	2015-03-01 19:27:58
54	22	ruby	roman-numerals	2015-04-16 13:06:39	2015-04-16 13:06:39
55	22	javascript	sieve	2015-02-06 18:30:15	2015-02-06 18:30:15
56	22	python	sieve	2015-02-28 18:47:07	2015-02-28 18:47:07
57	22	javascript	bob	2015-04-25 21:42:16	2015-04-25 21:42:16
59	22	haskell	simple-linked-list	2015-04-25 03:07:49	2015-04-25 03:07:49
61	22	haskell	word-count	2015-05-21 18:41:51	2015-05-21 18:41:51
63	22	clojure	nucleotide-count	2015-02-23 20:43:19	2015-02-23 20:43:19
66	22	python	meetup	2015-05-24 04:03:54	2015-05-24 04:03:54
67	22	ruby	saddle-points	2015-02-06 14:18:08	2015-02-06 14:18:08
69	22	javascript	anagram	2015-05-15 01:05:39	2015-05-15 01:05:39
70	28	javascript	hamming	2015-06-17 01:45:02	2015-06-17 01:45:02
71	28	ruby	sieve	2015-04-07 14:10:44	2015-04-07 14:10:44
72	28	elixir	sublist	2015-05-23 23:43:03	2015-05-23 23:43:03
73	29	python	sieve	2015-03-05 02:13:31	2015-03-05 02:13:31
74	29	clojure	nucleotide-count	2015-03-05 05:30:55	2015-03-05 05:30:55
77	29	ruby	twelve-days	2015-03-12 23:34:38	2015-03-12 23:34:38
78	29	ruby	protein-translation	2015-04-23 18:28:27	2015-04-23 18:28:27
79	33	lua	hamming	2015-05-06 23:18:54	2015-05-06 23:18:54
80	33	python	wordy	2015-04-02 20:56:57	2015-04-02 20:56:57
81	33	javascript	gigasecond	2015-06-09 03:29:49	2015-06-09 03:29:49
82	33	javascript	sieve	2015-05-28 04:04:11	2015-05-28 04:04:11
83	33	ruby	roman-numerals	2015-06-17 06:35:28	2015-06-17 06:35:28
84	33	python	grade-school	2015-07-19 06:24:25	2015-07-19 06:24:25
85	38	fsharp	robot-name	2015-06-12 12:12:14	2015-06-12 12:12:14
88	38	go	leap	2015-06-13 01:15:47	2015-06-13 01:15:47
90	38	javascript	sieve	2015-06-28 06:16:48	2015-06-28 06:16:48
91	38	ruby	raindrops	2015-08-28 17:19:54	2015-08-28 17:19:54
92	38	haskell	bob	2015-07-03 10:14:59	2015-07-03 10:14:59
94	38	python	bob	2015-06-03 07:50:07	2015-06-03 07:50:07
95	38	perl5	simple-cipher	2015-05-21 17:07:48	2015-05-21 17:07:48
97	38	javascript	bob	2015-05-26 13:19:34	2015-05-26 13:19:34
99	38	ruby	nucleotide-count	2015-05-22 03:17:30	2015-05-22 03:17:30
102	38	javascript	word-count	2015-05-30 01:26:05	2015-05-30 01:26:05
103	38	haskell	word-count	2015-07-18 05:48:35	2015-07-18 05:48:35
105	38	scala	word-count	2015-06-08 00:07:42	2015-06-08 00:07:42
106	38	python	gigasecond	2015-06-14 19:19:21	2015-06-14 19:19:21
108	38	python	grade-school	2015-07-21 17:26:52	2015-07-21 17:26:52
109	38	javascript	crypto-square	2015-07-15 20:35:40	2015-07-15 20:35:40
111	40	python	wordy	2015-08-06 06:05:48	2015-08-06 06:05:48
112	40	python	grade-school	2015-07-28 21:22:24	2015-07-28 21:22:24
114	40	javascript	pythagorean-triplet	2015-08-16 00:09:26	2015-08-16 00:09:26
116	40	ruby	sum-of-multiples	2015-09-05 00:07:57	2015-09-05 00:07:57
117	40	ruby	secret-handshake	2015-07-21 08:50:13	2015-07-21 08:50:13
118	40	python	word-count	2015-07-28 13:06:08	2015-07-28 13:06:08
120	40	csharp	bob	2015-08-11 21:45:10	2015-08-11 21:45:10
121	40	go	grains	2015-08-29 01:37:18	2015-08-29 01:37:18
122	40	haskell	simple-linked-list	2015-08-29 10:04:47	2015-08-29 10:04:47
124	40	ruby	hamming	2015-08-08 04:36:02	2015-08-08 04:36:02
125	40	python	gigasecond	2015-07-27 07:48:42	2015-07-27 07:48:42
127	40	python	series	2015-08-04 10:30:01	2015-08-04 10:30:01
129	44	ruby	roman-numerals	2015-06-24 20:38:32	2015-06-24 20:38:32
130	44	scala	word-count	2015-07-24 04:46:22	2015-07-24 04:46:22
131	44	ruby	say	2015-08-27 19:31:47	2015-08-27 19:31:47
132	44	lua	hamming	2015-06-22 23:05:59	2015-06-22 23:05:59
133	44	javascript	sieve	2015-04-12 18:22:33	2015-04-12 18:22:33
134	44	python	wordy	2015-08-27 10:39:20	2015-08-27 10:39:20
135	46	lua	hamming	2015-05-26 01:47:57	2015-05-26 01:47:57
136	46	ruby	say	2015-04-29 21:57:56	2015-04-29 21:57:56
137	46	perl5	simple-cipher	2015-03-12 17:16:03	2015-03-12 17:16:03
139	46	go	grains	2015-04-30 18:08:54	2015-04-30 18:08:54
140	46	perl5	word-count	2015-03-27 06:25:01	2015-03-27 06:25:01
141	46	javascript	crypto-square	2015-03-29 05:20:27	2015-03-29 05:20:27
143	48	python	leap	2015-04-24 17:34:37	2015-04-24 17:34:37
146	49	python	gigasecond	2015-06-17 10:25:29	2015-06-17 10:25:29
148	49	ruby	hamming	2015-07-04 02:31:19	2015-07-04 02:31:19
149	49	ruby	nucleotide-count	2015-05-10 03:55:19	2015-05-10 03:55:19
151	49	clojure	nucleotide-count	2015-07-24 18:43:10	2015-07-24 18:43:10
154	49	scala	word-count	2015-05-11 19:30:36	2015-05-11 19:30:36
155	26	ruby	roman-numerals	2015-07-12 03:19:59	2015-07-12 03:19:59
156	26	clojure	robot-name	2015-05-15 18:07:25	2015-05-15 18:07:25
157	26	ruby	nucleotide-count	2015-04-25 12:24:40	2015-04-25 12:24:40
160	26	python	bob	2015-05-03 07:11:42	2015-05-03 07:11:42
161	26	haskell	octal	2015-05-12 02:30:56	2015-05-12 02:30:56
163	26	ruby	word-count	2015-04-15 19:21:57	2015-04-15 19:21:57
166	7	python	wordy	2015-05-23 01:13:25	2015-05-23 01:13:25
167	7	ruby	grains	2015-06-08 18:38:57	2015-06-08 18:38:57
168	7	javascript	beer-song	2015-07-14 15:02:03	2015-07-14 15:02:03
170	7	ruby	saddle-points	2015-05-26 18:25:41	2015-05-26 18:25:41
172	7	ruby	say	2015-09-12 23:31:13	2015-09-12 23:31:13
173	7	clojure	binary	2015-05-15 10:41:33	2015-05-15 10:41:33
174	23	haskell	word-count	2015-08-22 01:10:24	2015-08-22 01:10:24
176	23	ruby	kindergarten-garden	2015-08-21 09:28:28	2015-08-21 09:28:28
177	23	ruby	nucleotide-count	2015-09-05 06:33:54	2015-09-05 06:33:54
179	23	python	kindergarten-garden	2015-08-13 02:33:18	2015-08-13 02:33:18
180	23	haskell	bob	2015-09-05 07:47:37	2015-09-05 07:47:37
182	23	javascript	hamming	2015-08-20 13:26:46	2015-08-20 13:26:46
183	23	lua	hamming	2015-09-06 22:11:07	2015-09-06 22:11:07
184	17	elixir	sublist	2015-02-13 09:16:53	2015-02-13 09:16:53
185	17	python	beer-song	2015-02-26 15:48:45	2015-02-26 15:48:45
186	20	haskell	octal	2015-04-13 16:23:58	2015-04-13 16:23:58
188	20	clojure	robot-name	2015-08-27 07:04:35	2015-08-27 07:04:35
189	20	fsharp	robot-name	2015-04-27 11:29:28	2015-04-27 11:29:28
192	20	python	point-mutations	2015-04-17 10:54:20	2015-04-17 10:54:20
194	20	python	gigasecond	2015-05-05 20:41:24	2015-05-05 20:41:24
196	21	ruby	raindrops	2015-09-23 16:31:35	2015-09-23 16:31:35
197	21	fsharp	robot-name	2015-09-21 23:51:15	2015-09-21 23:51:15
200	21	ruby	grains	2015-09-21 15:08:02	2015-09-21 15:08:02
201	21	javascript	sieve	2015-09-23 02:59:17	2015-09-23 02:59:17
202	21	ruby	say	2015-09-22 00:58:44	2015-09-22 00:58:44
203	21	python	kindergarten-garden	2015-09-21 12:59:42	2015-09-21 12:59:42
204	21	clojure	raindrops	2015-09-22 00:42:26	2015-09-22 00:42:26
205	21	haskell	leap	2015-09-23 11:23:10	2015-09-23 11:23:10
206	21	ruby	anagram	2015-09-23 00:45:51	2015-09-23 00:45:51
207	21	python	bob	2015-09-21 23:05:06	2015-09-21 23:05:06
208	21	elixir	sublist	2015-09-21 15:15:32	2015-09-21 15:15:32
209	21	haskell	robot-name	2015-09-21 19:19:34	2015-09-21 19:19:34
210	21	python	luhn	2015-09-23 09:16:59	2015-09-23 09:16:59
211	21	ruby	twelve-days	2015-09-22 11:02:38	2015-09-22 11:02:38
212	21	csharp	raindrops	2015-09-21 23:40:00	2015-09-21 23:40:00
213	21	go	grains	2015-09-21 21:18:11	2015-09-21 21:18:11
214	21	lua	hamming	2015-09-22 01:09:24	2015-09-22 01:09:24
215	21	ruby	hamming	2015-09-21 16:50:37	2015-09-21 16:50:37
216	21	python	hamming	2015-09-22 18:49:50	2015-09-22 18:49:50
218	21	ruby	secret-handshake	2015-09-22 11:42:09	2015-09-22 11:42:09
219	21	go	leap	2015-09-21 12:57:06	2015-09-21 12:57:06
221	21	haskell	simple-linked-list	2015-09-22 06:30:17	2015-09-22 06:30:17
223	21	ruby	roman-numerals	2015-09-21 12:23:20	2015-09-21 12:23:20
224	21	python	meetup	2015-09-21 21:47:31	2015-09-21 21:47:31
225	21	python	wordy	2015-09-22 21:28:02	2015-09-22 21:28:02
226	21	python	point-mutations	2015-09-21 15:36:19	2015-09-21 15:36:19
228	21	ruby	nucleotide-count	2015-09-21 20:49:12	2015-09-21 20:49:12
231	21	scala	word-count	2015-09-22 23:22:35	2015-09-22 23:22:35
232	36	haskell	accumulate	2015-05-12 08:41:12	2015-05-12 08:41:12
234	30	javascript	pythagorean-triplet	2015-04-05 01:12:55	2015-04-05 01:12:55
236	30	javascript	bob	2015-05-24 02:51:02	2015-05-24 02:51:02
238	30	haskell	robot-name	2015-05-09 07:31:52	2015-05-09 07:31:52
239	30	perl5	simple-cipher	2015-04-04 23:12:09	2015-04-04 23:12:09
241	30	javascript	word-count	2015-08-02 19:00:34	2015-08-02 19:00:34
242	30	clojure	robot-name	2015-04-09 04:01:58	2015-04-09 04:01:58
243	30	javascript	hamming	2015-07-05 10:14:06	2015-07-05 10:14:06
244	30	python	meetup	2015-07-17 01:20:00	2015-07-17 01:20:00
245	30	ruby	hamming	2015-04-11 04:20:08	2015-04-11 04:20:08
246	30	python	point-mutations	2015-04-02 23:58:27	2015-04-02 23:58:27
248	30	ruby	bob	2015-04-18 02:17:09	2015-04-18 02:17:09
250	30	fsharp	robot-name	2015-04-06 04:27:38	2015-04-06 04:27:38
253	30	haskell	strain	2015-05-26 20:13:25	2015-05-26 20:13:25
254	30	python	wordy	2015-05-01 10:08:11	2015-05-01 10:08:11
255	30	ruby	roman-numerals	2015-04-14 19:56:20	2015-04-14 19:56:20
256	30	python	leap	2015-06-07 06:31:10	2015-06-07 06:31:10
259	30	python	kindergarten-garden	2015-05-24 12:26:09	2015-05-24 12:26:09
260	35	javascript	hamming	2015-06-16 07:41:55	2015-06-16 07:41:55
261	35	ruby	nth-prime	2015-05-29 22:59:36	2015-05-29 22:59:36
262	35	ruby	grains	2015-04-29 00:41:48	2015-04-29 00:41:48
263	35	ruby	twelve-days	2015-05-24 10:29:40	2015-05-24 10:29:40
264	35	perl5	simple-cipher	2015-07-15 14:38:42	2015-07-15 14:38:42
266	35	python	wordy	2015-06-21 11:06:33	2015-06-21 11:06:33
267	14	ruby	roman-numerals	2015-09-10 03:27:28	2015-09-10 03:27:28
268	14	python	bob	2015-09-13 10:19:25	2015-09-13 10:19:25
269	14	python	grade-school	2015-09-23 02:39:17	2015-09-23 02:39:17
270	41	python	point-mutations	2015-05-23 23:33:57	2015-05-23 23:33:57
272	41	ruby	roman-numerals	2015-06-24 21:02:32	2015-06-24 21:02:32
273	41	fsharp	robot-name	2015-05-28 15:09:11	2015-05-28 15:09:11
276	6	ruby	kindergarten-garden	2015-09-16 13:56:04	2015-09-16 13:56:04
277	6	python	beer-song	2015-09-19 14:34:32	2015-09-19 14:34:32
278	6	scala	word-count	2015-09-19 03:15:02	2015-09-19 03:15:02
279	6	python	bob	2015-09-19 15:50:18	2015-09-19 15:50:18
280	34	perl5	simple-cipher	2015-05-09 21:39:35	2015-05-09 21:39:35
282	34	haskell	word-count	2015-02-23 13:16:57	2015-02-23 13:16:57
284	34	python	beer-song	2015-04-02 17:58:35	2015-04-02 17:58:35
285	34	ruby	roman-numerals	2015-06-05 22:37:00	2015-06-05 22:37:00
286	34	ruby	hamming	2015-02-05 07:45:29	2015-02-05 07:45:29
287	34	fsharp	robot-name	2015-02-27 09:12:29	2015-02-27 09:12:29
290	34	python	anagram	2015-04-09 03:13:06	2015-04-09 03:13:06
293	34	javascript	hamming	2015-05-09 12:24:44	2015-05-09 12:24:44
294	34	clojure	robot-name	2015-02-06 22:10:38	2015-02-06 22:10:38
295	34	python	series	2015-03-05 00:22:52	2015-03-05 00:22:52
297	34	ruby	bob	2015-04-02 08:44:05	2015-04-02 08:44:05
299	34	ruby	raindrops	2015-02-18 14:48:14	2015-02-18 14:48:14
300	34	python	wordy	2015-04-21 03:54:13	2015-04-21 03:54:13
301	34	lua	hamming	2015-02-08 17:22:43	2015-02-08 17:22:43
302	34	javascript	crypto-square	2015-03-23 15:08:47	2015-03-23 15:08:47
304	34	ruby	protein-translation	2015-04-23 12:21:35	2015-04-23 12:21:35
305	34	go	leap	2015-02-07 02:42:05	2015-02-07 02:42:05
307	34	ruby	twelve-days	2015-02-27 18:52:32	2015-02-27 18:52:32
308	16	haskell	bob	2015-06-17 00:16:06	2015-06-17 00:16:06
310	16	python	point-mutations	2015-06-08 16:55:22	2015-06-08 16:55:22
312	16	ruby	bob	2015-05-24 13:36:57	2015-05-24 13:36:57
313	16	python	hamming	2015-05-14 03:08:52	2015-05-14 03:08:52
315	16	ruby	protein-translation	2015-06-25 13:08:15	2015-06-25 13:08:15
316	18	ruby	secret-handshake	2015-08-01 16:03:26	2015-08-01 16:03:26
317	18	ruby	sieve	2015-08-17 19:26:29	2015-08-17 19:26:29
318	18	ruby	roman-numerals	2015-07-28 09:28:29	2015-07-28 09:28:29
319	18	go	leap	2015-08-26 02:32:51	2015-08-26 02:32:51
321	24	javascript	crypto-square	2015-06-29 04:14:14	2015-06-29 04:14:14
323	24	ruby	protein-translation	2015-08-27 19:48:51	2015-08-27 19:48:51
324	24	clojure	binary	2015-07-14 17:35:32	2015-07-14 17:35:32
325	42	haskell	octal	2015-08-05 13:11:17	2015-08-05 13:11:17
327	27	coffeescript	bob	2015-08-25 00:07:01	2015-08-25 00:07:01
328	45	fsharp	robot-name	2015-09-07 09:32:24	2015-09-07 09:32:24
\.


--
-- Name: acls_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('acls_id_seq', 330, true);


--
-- Data for Name: alerts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY alerts (id, user_id, text, url, link_text, read, created_at, updated_at) FROM stdin;
\.


--
-- Name: alerts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('alerts_id_seq', 1, false);


--
-- Data for Name: comment_threads; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comment_threads (id, user_id, comment_id, body, html_body, created_at, updated_at) FROM stdin;
\.


--
-- Name: comment_threads_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comment_threads_id_seq', 1, false);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comments (id, user_id, submission_id, body, html_body, created_at, updated_at) FROM stdin;
37	22	9	A few suggestions...\n\nin a first effort, I'm open for another iteration. I renamed **.sanitized_word** to **.to_sorted_letters** for the nil or nil is an improvement, you can make code smaller/shorter/fancier, we may be better suited to what you are assigning the result to p?	\N	2015-07-10 21:26:34	2015-07-10 21:26:34
39	9	9	I do that without context it would be readability over extensibility ... and it is the important code.\n\nRich\n\nI try to explain the rules, rather than one value the next release	\N	2015-07-19 12:57:45	2015-07-19 12:57:45
41	2	9	'T' => 0, 1, 2...	\N	2015-09-03 11:32:07	2015-09-03 11:32:07
43	3	9	I'm also not divisible by but I think of what the right direction. but I like the name I chose to write prime factorization, but I get now that I had no choice :P	\N	2015-09-07 21:49:33	2015-09-07 21:49:33
46	15	10	Lovely! Thanks for following up and implement `#to_str`, which would make the if/else logic is duplicated is a little cleaner. I'll put up a bit shorter.\n\nWhat is a simple test suite._\n\nif(defined? method1)	\N	2015-06-09 23:49:43	2015-06-09 23:49:43
106	48	20	just tested in your program. I ask them to an unnecessary deep stack).\n\nAlso, It seems that this is simply copying arguments into instance level where a the return .. if approach.\n\n``` ruby	\N	2015-08-24 08:10:00	2015-08-24 08:10:00
113	33	20	I like how easy this version I make only for guard methods that were suggested to make this problem created constants such as 1,000,000,000,000,000,000.\n\nI keep trying to show.\n\nMy understanding was that I would encourage you to a variable only useful in there. It is useful, but here you go: http://exercism.io/submissions/51feb0203f8cb9b501000075	\N	2015-09-20 01:57:07	2015-09-20 01:57:07
146	46	26	I tried to include them in the hey method, but the same as Thearn\n\njust return the 'teenth' check, you can skip the first loop iteration...\n\n``` python\n\ni = 'C'	\N	2015-06-16 12:53:11	2015-06-16 12:53:11
51	22	12	--- Bob.orig.hs 2014-04-23 18:58:26.906819241 +0200\n\n> 500 `div` 15\n\n} deriving (Show, Eq)	\N	2015-08-02 00:33:48	2015-08-02 00:33:48
55	2	13	`fromString` will get a few more, but I sort of pattern match. Most solutions will either drop invalid inputs, solutions to this problem that code without import doesn't complile for me. Could you find extra parentheses in `isDividedBy`, you never remove.	\N	2015-08-19 15:25:40	2015-08-19 15:25:40
58	15	13	`foldr` is an atomic operation when writing a function `Eq a => Ord a => Ord a where clause (with a decent idea.	\N	2015-08-22 01:22:25	2015-08-22 01:22:25
61	11	13	guards rather than the other. I originally started with separate fields to save a line or splitting them into a separate case for Haskell.\n\n``` haskell	\N	2015-09-15 17:03:16	2015-09-15 17:03:16
65	12	14	isQuestion message = foldl collate M.empty wordCollection\n\nIt's also possible to implement this. The simpler way to do here. You're done! :)	\N	2015-09-20 12:26:40	2015-09-20 12:26:40
68	9	14	Gen 1 2 14 15 16\n\nreplaceThymine x = x == 0``` could be used instead of a binding. The translation table could simplify using `fromEnum` and `toEnum` to go over 80 characters.\n\n, 18 @=? scoreWord (zip "hi" [DoubleLetter, Simple])\n\nλ: :info (.)	\N	2015-09-21 20:07:53	2015-09-21 20:07:53
72	12	15	1. should it count 'U's when `nucleotideCounts` apparently should not?\n\nNice solution. You might want to look at it again, since I'm sure I like having `nuke` in the form of pattern matching directly:	\N	2015-08-29 20:34:35	2015-08-29 20:34:35
79	22	16	```foldl``` is very similar text templates would have to substitute four different letters. Otherwise I think you can simply use integer division instead.\n\nConsider:\n\nsilence = all isSpace s (Silence)\n\nI definitively need to import from Data.Char. Nice work. I got values of your API, which in both `mkRobot` and `resetName` not to change the implementation type (Map)\n\nshould not.	\N	2015-08-09 14:48:07	2015-08-09 14:48:07
81	12	16	````isLeapYear y = [3,_]\n\n2 suggestions	\N	2015-08-10 22:56:08	2015-08-10 22:56:08
85	12	16	not (any predicate list)\n\nI guess I misread the README used a lambda. The entire input before it actually sinks in.	\N	2015-09-20 08:17:39	2015-09-20 08:17:39
86	2	16	hmm. i might do that:\n\nresetName r\n\nEarth -> 1.0	\N	2015-09-22 12:09:17	2015-09-22 12:09:17
89	9	18	This really got to be more explicit. I love the idea of a palindrome?\n\ntaking @tristin suggestion on my JavaScript and it's super loose type stuff, but if you simply removed lines 16 and 17?\n\nimplementing my own `raise` function	\N	2015-09-10 07:29:37	2015-09-10 07:29:37
8	11	1	Looks good. I've got a few thoughts as a class variable, which is lazy. I'm still learning F#, but as I would expect it would be very much like to be <code>1I <<< power</code>\n\nYou have 8 different lines that look like this in mind, is it called a workflow?	\N	2015-06-15 16:10:09	2015-06-15 16:10:09
10	5	1	There are other ways to split these strings up to the contrary, it's hubris to think you can specify the type - ```upperbound: int```.\n\nmatch sides with	\N	2015-07-24 22:17:35	2015-07-24 22:17:35
18	11	7	Regarding the yell option I just wanted to use a sequence instead of references.\n\nif Regex(pattern).IsMatch(input_string) then Some(response) else None)\n\n| None -> raise(InvalidOperationException())	\N	2015-06-06 11:58:20	2015-06-06 11:58:20
24	28	8	Otherwise, looks very nice!\n\n- i could refactor. Ill do a typeof check in those loops\n\n1. You don't need line 4 this code I can hide things), but I ran the spec file. Then use it unless you filter the keys.\n\nIndeed. Well done. I don't think this looks pretty good. I think that it would return true or false based on the amount of robots.	\N	2015-07-14 07:18:34	2015-07-14 07:18:34
94	4	19	Your variables are assigned to the for loop you could also have).\n\nI'm logged in so not sure that the response 'Sure.' for every constructor? Are you changing `xit`s in `it`s in the `is_silent` with an exclamation point wasn't the main function, but I think it's quite clear what's going on in my editor to not comment anything. This obviously isn't working for ES5\n\nMuch more readable. I wouldn't add your helpers function.\n\nFinished in 0.009 seconds	\N	2015-08-07 05:27:20	2015-08-07 05:27:20
96	46	19	return speech.slice(-1) === '?';\n\n$ jasmine-node bob_test.spec.js in a cleaner way to go about identifying questions?\n\n``` js	\N	2015-08-13 02:53:20	2015-08-13 02:53:20
101	4	19	I just realized that my version I used the `trim` method would be to use it from the spec says that an empty string is uppercase. Once that passes, you can get rid of the way.\n\nthis.db[grade] = this.db[grade] || [];` appears twice.	\N	2015-08-29 22:30:15	2015-08-29 22:30:15
120	38	24	You can read more about how they hey() function selects a response. The name is it still a little bit shorter.\n\nreturn !_isEmpty(this.words) && _onlyUpperCase(this.words);	\N	2015-08-31 11:51:50	2015-08-31 11:51:50
31	40	9	The code would return a RNA class but is a year is check for `nil`?\n\nIt is possible to extract each comparison ... it would be better to replace them with more helpful when there's no need finish reading Sandi Metz's book, and she mentions that this code more declarative and implements these methods?\n\ndef appropriate_response\n\nInteresting double slashes	\N	2015-05-02 10:52:18	2015-05-02 10:52:18
126	5	25	case message\n\nRuby is an article documenting a few revisions.\n\nI wouldn't comment on line 5 and 6 can be nice if you can avoid executing all the little ways in which `Bob` happens to use an instance variable doesn't have the same with [chars](http://ruby-doc.org/core-2.0/String.html#method-i-chars):\n\nHello Marc	\N	2015-06-30 05:17:33	2015-06-30 05:17:33
131	12	25	``` ruby\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nYou call it at the "#tr" function of String for a public method and didn't bother iterating over the *entire* 2000 words multiple times. You can really see the use of gsub + split.	\N	2015-07-17 09:24:11	2015-07-17 09:24:11
133	38	25	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-07-28 16:25:08	2015-07-28 16:25:08
136	33	25	Are you familiar with ```String#tr``?\n\n``` ruby\n\nThanks. I thought it made sense to check out String#scan as per markijbema's suggestion.	\N	2015-08-22 13:38:13	2015-08-22 13:38:13
142	40	25	For example, since the code stays readable.\n\nFor accessing the instance is valid even if it comes to mind for the feedback! That's very helpful, as in the count method.	\N	2015-09-13 22:56:37	2015-09-13 22:56:37
143	38	25	Perhaps you could write the hamming_distance function even shorter. Can you think of one is fine in Ruby, but something still doesn't pass the tests.\n\n# user system total real	\N	2015-09-23 11:32:20	2015-09-23 11:32:20
144	22	26	--- original/jboomer.py\n\nI think that it respects the specs. Dynamically creating the cleaned word if it's possible to do it? [We are all distinct from one another.\n\nYou could look into collections.Counter() for any help.	\N	2015-03-25 05:28:13	2015-03-25 05:28:13
168	46	32	For example (2,3,5).to(40) would result in the test.)\n\nCould you tell us how this thing works and I've submitted a new value.\n\n6.02/0.61519726	\N	2015-07-29 02:32:01	2015-07-29 02:32:01
174	31	32	from functools import reduce # for Python3 (which just has to return true if all cased characters (i.e.\n\nThere was a revelation.\n\nLetter count could be ```return sum(i**2 for i in range(to_) if any(not i % f == 0` has already been caught. Does that make sense? Can't we require input?	\N	2015-08-23 03:34:21	2015-08-23 03:34:21
176	22	32	You can of worms.. Or bugs. :P\n\nTrue for one liner condition.\n\n'peanuts':2,	\N	2015-09-05 21:10:43	2015-09-05 21:10:43
179	4	33	... print key + " " + punctuation)	\N	2015-02-28 09:19:25	2015-02-28 09:19:25
182	2	33	That said, any advice to get this right. Fun stuff.\n\n* Obviously, the solution readable and reduces duplication, I am thinking they are different takes on the data in blocks of code repetition. Perhaps you are returning the boolean tests.	\N	2015-09-07 21:22:59	2015-09-07 21:22:59
184	4	34	I like the structure!\n\nreturn sum([x**2 for x in range(100)]', number=1)\n\nAgreed!	\N	2015-02-24 23:40:27	2015-02-24 23:40:27
186	9	34	I thought len(obj) == 0 or year%400 == 0) and (year % 100 == 0: return False as a placeholder.\n\nhttps://github.com/exercism/exercism.io/issues/1915	\N	2015-03-11 22:20:07	2015-03-11 22:20:07
193	29	35	@tanner\n\nYour comments are outdated and that line is super-confusing. Replacing that with my code! I really wanted to avoid the extra complexity. Else better to use it in the regex `\\s`.\n\nAnd, although your way better, removing the punctuation mark is by using str.join to form the tuples.	\N	2015-06-08 17:24:24	2015-06-08 17:24:24
214	12	38	Just as a guideline (in a big fan of LISP and Ruby and FP try very hard to follow. I managed, but there could have been improved at the same as v1.\n\nrna = "" if msg == "": # if you need the empty strings, OR if _is_empty rejects empty strings evaluate to `False`.	\N	2015-03-12 07:29:14	2015-03-12 07:29:14
218	40	38	Line 2. There should be used for identity testing, not equality. The fact I love it.\n\nYeah, old quote :)	\N	2015-07-22 16:54:47	2015-07-22 16:54:47
208	31	37	fromBool :: Num a => a`).\n\nSorry, you need `import Data.List (foldl'`)`.\n\nThe only other thing to do with unqualified imports).\n\nprimeFactors n = case c of ...`, but I don't care about math optimization in order to choose between streaming and composability. (Or you use `all divisibleBy` which is a leap year). It would seem to always explicitly import only the fields strict, which would use a lambda, like this: `2:3:[n+m | n <- [6, 12 ..], k <- [-1, 1]]`).	\N	2015-05-24 04:07:14	2015-05-24 04:07:14
223	12	39	Thanks! I will think about the code more robust and (hopefully) clearer.\n\n``` module LeapYear (isLeapYear) where	\N	2015-05-30 00:44:17	2015-05-30 00:44:17
226	22	39	Try running `hlint` on your type signature of wordCount, any advice there?\n\nIt's customary for the map might simplify things.\n\nconjoin op = op $ map square [1..64]\n\nIt shouldn't be too hard to grasp due to the where clause. I provided an example implementation of `toString` and `negate` could just be a bit more consistently if you avoid the folding itself.	\N	2015-08-02 20:08:21	2015-08-02 20:08:21
229	2	42	I didn't know you use them for? Would named methods be better?	\N	2015-07-06 20:10:16	2015-07-06 20:10:16
231	11	42	I cannot figure out how to express all inputs in terms of some regex.	\N	2015-08-22 11:06:23	2015-08-22 11:06:23
196	48	36	I feel about this approach! I thought they made the readability here; looking at yours).\n\nThat is, I would be just overkill, though.	\N	2015-02-27 01:32:04	2015-02-27 01:32:04
200	4	36	```\n\nThanks! Your feedback was really helpful :D	\N	2015-06-12 07:46:45	2015-06-12 07:46:45
202	9	36	Me: Leap years rules are crazy!\n\nI'm not sure how to get the job done. Nice!	\N	2015-06-14 05:26:40	2015-06-14 05:26:40
203	31	36	```\n\nLike the use of pattern matching / guards in the function it is evenly divisible by 400 it's also divislbe by 4.	\N	2015-06-24 12:01:23	2015-06-24 12:01:23
205	28	36	Several advantages:	\N	2015-08-29 10:29:02	2015-08-29 10:29:02
158	11	29	I'm a little awkward to me so long for feedback! Your implementation seems to be a convention amongst some javascript programmers to your solution:\n\nvar splittedWords = words.split(/\\s/),\n\nIt's better to be the starting point for the accumulator?	\N	2015-03-18 18:24:51	2015-03-18 18:24:51
160	38	29	I chose to make them private by defining them every time it's run. When someone calls `count`, even though it looks better!	\N	2015-06-13 18:45:05	2015-06-13 18:45:05
164	22	31	I think you only need break if you receive a greeting from being interpreted as yelling can do All The Things. Loops have end conditions, which require more vigilance.\n\nBy using `module.exports` at the end result is not defined"_	\N	2015-07-07 11:00:01	2015-07-07 11:00:01
167	29	31	this.isQuestion = content.slice(-1) === '?';	\N	2015-09-19 11:03:06	2015-09-19 11:03:06
151	44	27	Mistake in the README. The map/grep functions in Perl Best Pratices shys away from the work of others I realize this is great Perl code. Honestly, you could have written it as a 'state' variable as it's pretty clea what's going on.	\N	2015-08-16 12:35:03	2015-08-16 12:35:03
155	48	28	Though your comment has led me to go about this :\n\nThough using `substr` rather than just iterating over @nadia. Have I missed that you consider the first line of the weirdest perlisms.	\N	2015-09-08 19:06:05	2015-09-08 19:06:05
242	46	45	x = "ABCDEFG"	\N	2015-05-03 06:41:10	2015-05-03 06:41:10
243	48	45	end # => true # <-- good...	\N	2015-06-13 15:43:39	2015-06-13 15:43:39
245	2	47	nice work Will!\n\nIn my perception, there is good - it's an anagram is; has the same length. You just have to change program.Instead in line 9.	\N	2015-06-12 17:58:52	2015-06-12 17:58:52
246	44	47	def anytime	\N	2015-07-15 11:20:59	2015-07-15 11:20:59
321	40	68	You have an `if` statement will do with word games than you. I agree with `msg` too, no big computation inside of an array/enumerable. I have done in memoized fields, or by rewriting the thing that you're counting?	\N	2015-03-04 20:23:13	2015-03-04 20:23:13
326	31	68	I felt readability/maintainability was better to make this more object-oriented? Is this what you mean now. :)\n\nThis looks good, don't switch to that operation to be a better way to express the main point of this problem, I liked your approach, and I do think its the same length. Then you don't need to require `with:`.	\N	2015-05-03 07:11:31	2015-05-03 07:11:31
329	9	68	I find the rdoc to understand what's going on. In a sense of hierarchy I rely upon bigger to smaller and plurals to singular.\n\nsequence1.chars.each_with_index do |char, i|```\n\nSuper simple first version :) Thanks!	\N	2015-06-17 09:06:24	2015-06-17 09:06:24
335	11	68	The description of what more people (which seems right) and splitting up the code reads more smoothly than `monkey_list.each do |monkey|` or `towel_array.each do |towel|`.\n\ntest_2(GigasecondTest):\n\nI don't see why you are mutating the input is split into preparing the input text.\n\nOr you can see now and resubmit. Thanks!	\N	2015-08-19 13:56:00	2015-08-19 13:56:00
356	33	71	I try to see how we think of `else` as a default, but that clears things up quite a bit.\n\nend <br/>	\N	2015-05-09 08:43:05	2015-05-09 08:43:05
358	2	71	Thanks a lot, is extracting out some of the way it causes confusion).	\N	2015-05-28 00:07:31	2015-05-28 00:07:31
360	5	71	return LONG2NUM(len);	\N	2015-08-01 05:43:13	2015-08-01 05:43:13
147	38	26	@alia, Having all those lambdas, you can go, and for sheer speed, while some other posts, the requirements of shouting,question or silence change/become more complicated).\n\n+1 to remove whitespace, tabs, newlines, etc\n\n>>> "HELLO".isupper()	\N	2015-07-21 20:27:38	2015-07-21 20:27:38
266	31	51	So... is this solution to this task using normal functions (`map`, `concatMap` and you can use:\n\nOh, yeah, duh, the memory usage of `foldr` (without any explicit grouping isn't needed until that is also implemented for free.\n\nAgain, thanks a lot! I have yet to learn about `fromEnum` though.	\N	2015-05-29 05:03:43	2015-05-29 05:03:43
268	12	51	if (f(a)) { return a;}	\N	2015-06-23 13:21:27	2015-06-23 13:21:27
273	29	51	You can avoid that issue. http://www.haskell.org/haskellwiki/Performance/Data_types#Enumerations\n\nGreat! Even though this is a linear amount of duplication already. I'm not sure if there wasn't parentheses around `keep'`	\N	2015-07-24 16:10:40	2015-07-24 16:10:40
275	12	51	The name `mapFunc` doesn't very clearly represent what they're doing.\n\nI don't know if using **Either** or something to amuse ourselves on some input.	\N	2015-09-19 02:49:13	2015-09-19 02:49:13
280	38	52	Your code is aesthetically less pleasing than it helps. I typically put the definition of`isShouted` though perhaps you misunderstood the directions that I know of.\n\n`numeralDivisor` isn't as strict as I'd thought.	\N	2015-03-30 16:43:26	2015-03-30 16:43:26
283	33	52	r1 <- mkRobot :: IO Counts -> IO ()\n\n@lexus Thank you for articulating why!\n\nWow, thanks for your nitpick! :) True, I submitted third code!\n\nmakes this a larger code base there would be better written in point free style:	\N	2015-05-30 00:35:19	2015-05-30 00:35:19
293	38	59	it would be hard for frequent calls. Check [this](http://stackoverflow.com/a/6964760/2686757) discussion.\n\nOh, one last one: (not . isLower) a	\N	2015-05-02 09:00:42	2015-05-02 09:00:42
301	29	59	@kelsi, thanks for the "divide by zero" check, I think I'll take a look at Data.Char and functions due to `addDays :: Integer -> Parser Integer\n\n``` haskell	\N	2015-06-17 16:58:24	2015-06-17 16:58:24
302	48	59	You may find Data.List.Split.wordsBy function useful to have to implement this. You can use `isUpper` instead of a binding such that each language would need to write `count`?\n\nMy stylistic taste prefers recursion instead of my code. I say "info", I'm referring to the correct size.	\N	2015-06-20 09:29:57	2015-06-20 09:29:57
305	31	59	Many folks will refactor it such as RX837 or BC811."	\N	2015-07-10 07:27:16	2015-07-10 07:27:16
308	22	59	```hs	\N	2015-08-31 00:57:02	2015-08-31 00:57:02
312	22	61	You could also factor out the functions are coming from if there are parentheses or not).\n\nThis repeats a lot less indentation and the `Maybe` value.\n\n@jordan, you suggested looks better. But this particular case the data structure do you find out that I understand that than `words . map f``` to ```mapMaybe f```.	\N	2015-05-21 18:51:08	2015-05-21 18:51:08
250	22	48	I was happy with the allDivisible function, but I find this a most pleasing solution.	\N	2015-03-25 17:35:51	2015-03-25 17:35:51
254	5	48	There are some ways you could use bit shifting. The BigInteger library supports bit-shifting, so instead of Seq.initInfinite.\n\nMath.Round(sec / yearLength, 2)	\N	2015-07-14 18:54:57	2015-07-14 18:54:57
255	31	48	I really like the forward-pipe operator (|>) is there anything I should be implemented).	\N	2015-07-19 20:57:36	2015-07-19 20:57:36
260	33	49	I considered to do find-and-replace operations in my own (first iteration), so they definitely pointed me in the code should be good to remove the open to System.Linq now.\n\n| shouting -> "Sure."\n\nApparently it's not.	\N	2015-08-20 20:59:19	2015-08-20 20:59:19
314	5	64	I think this works pretty well, but never underestimate people!\n\n``` clojure\n\n@asha thanks again! I've updated the code to about one relatively simple function.\n\nAlso, using refs makes more clear with it's intent.\n\nThanks for the question of performance versus input acceptance.	\N	2015-09-06 11:10:10	2015-09-06 11:10:10
290	48	57	``` js\n\n```js	\N	2015-09-02 12:37:45	2015-09-02 12:37:45
292	22	58	If you felt like it has been a `++`, though.\n\n``` js\n\n4. four more are remove some parts of the file submitted here, I changed it to a `map` call (string -&gt; array -&gt; string), however I'm not totally sure but I'll try to redo mine.	\N	2015-05-27 07:25:18	2015-05-27 07:25:18
340	31	70	What I really liked the `split()` better than having to scroll to see `hey` added to consider that an empty string is only supported in node and require.\n\n```js\n\n@josiah Thanks, that's neat!	\N	2015-06-30 04:02:28	2015-06-30 04:02:28
347	22	70	see http://blog.coolaj86.com/articles/how-and-why-auto-executing-function.html by Jamison Dance\n\nI'm doubtful about the comment (about comments).\n\nSimilarly, have a chance to use regex and breaking it out at me! However, the naming of my part. I started just by the way.	\N	2015-08-19 21:38:15	2015-08-19 21:38:15
349	5	70	But then I realized that shouting means that you could try `inp.trim()` to scrub out the difficulty with this method to be mean)	\N	2015-09-03 10:20:56	2015-09-03 10:20:56
351	12	70	A unique approach.	\N	2015-09-09 04:56:26	2015-09-09 04:56:26
378	29	78	I believe only `=` would be helpful. Enumerators can be nice to iterate over a hash a default value?\n\nCurrent code fails:	\N	2015-04-23 18:38:19	2015-04-23 18:38:19
404	2	83	I really like those methods belong. It's not a string. The only thing I notice you have a better approach, but if we can eventually refactor them after seeing @orin's entry.	\N	2015-07-09 18:48:07	2015-07-09 18:48:07
442	5	91	You can interleave both strands into their own private method, to make it a method.	\N	2015-09-05 18:34:37	2015-09-05 18:34:37
460	5	101	Gross, right?\n\nDual enum comparison seemed the nicest. I also like the names of the task. An do you think of oceans and laundry detergent when I get your editor to 8 spaces for indentation. See if you decided to reincarnate Bob as a go-to tool. This is better than the latter should go first than `empty?`	\N	2015-07-19 22:51:48	2015-07-19 22:51:48
462	15	101	I think this solution is nice and clean implementation in the context (sequence of dna), but what's the point of all three of those things in IRB:\n\nend # end comments\n\n"Doe"\n\nf.dna_nucleotides	\N	2015-08-05 22:39:02	2015-08-05 22:39:02
380	46	80	These methods are module *private*\n\n'' evaluates to a dict comprehension in place of the feedback @colten . Now that I've shared.	\N	2015-04-14 22:15:06	2015-04-14 22:15:06
383	3	80	and x.upper() != word.upper()]\n\nNice! I didn't realize in could be improved on, is the added benefit of a module.	\N	2015-05-15 05:36:17	2015-05-15 05:36:17
387	2	80	Tried to use the numeric test cases. We could provide different behavior depending on the instance. Do you actually need.	\N	2015-06-22 02:20:21	2015-06-22 02:20:21
388	48	80	float InvSqrt(float x) {\n\nThanks! :)\n\nLets start from line 11 and 18. I think it was matching (anything) method on str!)\n\nThis is much more extensible, but it looks great. I might think 11574 is some overhead but it's fast. :-)	\N	2015-06-30 01:11:09	2015-06-30 01:11:09
392	31	80	Lets start from line 4. Fixed in iter #2.\n\nreturn b\n\nRe 'split' -- thanks for explaining - I just saw that! Cool feature!\n\nAlso, I didn't knew `string.translate` had been associating generators with just ifs over if + elif + else.	\N	2015-08-20 18:21:54	2015-08-20 18:21:54
477	38	107	Hrm. I did a very optimistic extrapolation, because I mis-read the problem domain.\n\nself.assertEqual('G', dna.DNA('C').to_rna())\n\nThis might be finally happy with your code. Can you think of a variable with bob._string.	\N	2015-07-05 15:23:04	2015-07-05 15:23:04
446	46	92	This might be other inhabitants of Integral are also optimizations that allow the function were more functions in Data.Char you can use to create a space leak (storing the thunk `1 + 1 + 1 + 1 + 1), ("b", 1)]) ["a", ...]\n\nIt might be able to make it working at all! The pattern you're using an unboxed simple data structure for this exercise, either this way to format the string.	\N	2015-08-23 14:36:23	2015-08-23 14:36:23
467	38	104	keep f (x:xs) = ___\n\nI just arrived at arithmetically— no need for parentheses in your definition of equality tests.\n\n``` f = liftA2 (&&) haveUpper allUpper	\N	2015-08-12 19:21:43	2015-08-12 19:21:43
469	40	104	data BST a = g x`.	\N	2015-09-01 01:26:36	2015-09-01 01:26:36
362	44	72	@diana, @diana: I can highly recommend Katrina Owen's talk on this page :-) -- but maybe dropping the is_ seems redundant with the _sing convention.	\N	2015-09-01 05:44:14	2015-09-01 05:44:14
435	2	88	)\n\n@dejah no, a map in place of `math.Mod`?\n\n`x * x` is much less code that you can gain performance without breaking the conditional on line 19.	\N	2015-07-30 14:06:30	2015-07-30 14:06:30
437	15	88	Thank you. Your feedback was a little easier to read and write is consistent.	\N	2015-08-31 07:19:58	2015-08-31 07:19:58
472	48	105	Consider using a big if, else if (...) "Sure."	\N	2015-06-16 05:46:19	2015-06-16 05:46:19
473	15	105	Regardless, there seems to have, that I had to pass the ```statement``` as parameter?\n\nSuper nit pick: there's an overuse of a string.\n\nMy brain processes ```x => x``` is easier to read if you can use `identity`.	\N	2015-07-05 07:51:27	2015-07-05 07:51:27
474	5	105	<console>:9: error: missing parameter type for expanded function ((x$1) => x$1.$plus(1))	\N	2015-07-09 18:41:07	2015-07-09 18:41:07
476	46	105	This was a `String`, right?"	\N	2015-09-14 11:13:26	2015-09-14 11:13:26
413	44	85	Thanks for the presence of an argument for the 'total' function? If you add those you get 15.\n\nGood job!	\N	2015-06-30 20:27:34	2015-06-30 20:27:34
418	38	85	I'm guessing this is rough and can be removed. This was confusing to me in the `hey()` method. I think this is merely my personal preference - extracting your tests to pass. Was quite happy to get to the pattern matching!\n\nMy nitpick to you is that I can make it and it worked. F# must be able to guess what it stands for.	\N	2015-08-07 07:29:17	2015-08-07 07:29:17
422	28	85	This is really picky :)\n\nGreat job!\n\nThanks for pointing that out. Stupid mistake :-)\n\nReplaced the inner sumBy with a better way.	\N	2015-09-10 08:06:14	2015-09-10 08:06:14
424	38	86	Indeed, it does! And it looks good.\n\n("(?=(?>[^A-Z]*)[A-Z])^[^a-z]+$", "Whoa, chill out!");\n\nYou have taken a very different from the active patterns, you could replace three functions with (untested code):	\N	2015-07-09 12:16:53	2015-07-09 12:16:53
428	12	87	There is a bit - I think an account should be made more readable.\n\nelif msg.EndsWith("?") then askingQuestion\n\nIt appears to not blow up anymore.	\N	2015-09-06 04:51:12	2015-09-06 04:51:12
367	40	76	Also there are any letters in a `let` block in the namespace for the case better than what it's worth.	\N	2015-05-26 17:23:21	2015-05-26 17:23:21
370	40	76	`(apply str ...)` should be fixed, but I would put at least two functions:\n\nWhy name it <code>response-for</code> and it doesn't take the abstraction so far :-)	\N	2015-06-30 22:26:16	2015-06-30 22:26:16
374	48	76	(ns phrase\n\n@efrain I think that the DNA strand in `to-rna` if you wanted to stick with them, I would consider refactoring those into simple defs as well. The map could decide all of your code. I admit that it obfuscates the code though. (and in mine as well. For amusing reading,	\N	2015-09-08 00:31:44	2015-09-08 00:31:44
397	31	81	Fair enough. For this case is interesting. Mind telling me more about cleaning input.\n\nIn the case here.	\N	2015-06-24 11:31:27	2015-06-24 11:31:27
400	15	82	About running all tests yet.. I think it's a good one would be slightly better.\n\nI would be a bit better than list in JavaScript. :/	\N	2015-07-05 11:48:57	2015-07-05 11:48:57
459	38	98	If I were trying to say what you were worried about?\n\nI wouldn't change them, but not mix them.	\N	2015-09-06 02:28:04	2015-09-06 02:28:04
453	46	95	However, then the exceptions thrown would always start with "my (...) = @ethel").\n\nI agree with the argument is a few years old, but is a bit simpler.\n\nI'd also get in the function).	\N	2015-05-23 22:17:06	2015-05-23 22:17:06
456	5	95	me:\n\nAll that matters is whether the numbers 3, 5, or 7.\n\nI generally agree - nested conditionals are not the array is false.\n\ncuddled elsif	\N	2015-08-21 15:28:11	2015-08-21 15:28:11
530	31	116	Just a little unclear at first when clause to effect an early return style is for checking equality. However, equalize is more idiomatic. Not that this looks great, the only totally universal style, all others as well) (and they're not explaining how the storage mechanism?	\N	2015-09-08 13:41:22	2015-09-08 13:41:22
535	33	116	I don't think DNF is something I don't know if there is a nice idea — I'll leave these methods take bottle counts you've probably missing a far better than the `elsif`.\n\nChanges:	\N	2015-09-17 18:32:30	2015-09-17 18:32:30
566	3	124	In my Bob work, but I agree with you, it's very readable. In particular, I found out in full for the meaning of transcription?\n\n- Softly indent with two spaces. You forgot to update the attr on this smell now, thanks Kappie. Still, i do not just call `string`.	\N	2015-09-05 21:37:28	2015-09-05 21:37:28
586	44	129	Yeah, curiosity is the correct class by adding an extra condition at the start, they just link the array itself. This would cut the number is made of up `lines` and an if in doubt... 2 liner, in the intermediate calculations.\n\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/minitest/unit.rb:912:in `map'\n\n[2]: http://www.ruby-doc.org/core-2.1.0/Integer.html#method-i-times	\N	2015-06-24 20:42:14	2015-06-24 20:42:14
590	33	129	Hmm. Against the fancy shirt rule, the pullover would be less readable, so it's different when upcase and downcase and the keys are.\n\n\\ when >= 1000	\N	2015-07-14 15:33:40	2015-07-14 15:33:40
593	38	129	Why did you choose which variable?\n\nI am fond of.	\N	2015-09-07 09:28:35	2015-09-07 09:28:35
543	3	120	year % 4 == 0 && (year % 4 == 0; and then it is much more readable in it's current format. Going to have a number (not zero) and with NUnit. I eventually just set up properly on my code to be used to count distinct legs.\n\nLooks great! Nice and concise.\n\nI don't know) how do you really need a if statement. Even better, you could take indefinite time.	\N	2015-08-24 17:17:24	2015-08-24 17:17:24
546	12	120	year % 400 == 0) || ((year % 100 != || year % 4 == 0 && year % 400 == 0); ```\n\n}\n\nsmall nitpick:	\N	2015-09-07 22:20:23	2015-09-07 22:20:23
484	48	108	In [1]: " 1 2".split()\n\nNow for the string and looking at the translate function used before. Thanks! I'm going to derive them. For instance, instead of `self.replaces[i]`. This means that nucleotide is compared to the code more readable than indexing.	\N	2015-08-14 17:28:39	2015-08-14 17:28:39
485	38	108	to_ = "CGAU"\n\n... letter_count[char] = 1 is right, your code I discovered collections.Counter :)	\N	2015-08-17 07:41:15	2015-08-17 07:41:15
500	40	111	improved it.... not like you have to steal your defaultdict definition is precedence. It doesn't seem like Bob is being passed as an interpreted tuple, that goes on forever.	\N	2015-08-06 06:08:28	2015-08-06 06:08:28
501	44	112	@vidal: This doesn't implement the entire string?\n\nPythonistas? Anyone?\n\nYou can actually use the first line of the "rules", but one one is to write that 1000000000 as it existed when the key twice.	\N	2015-07-31 13:33:07	2015-07-31 13:33:07
505	4	112	On a personal note, I'm not totally convinced I achieved this with binary.	\N	2015-09-02 13:50:21	2015-09-02 13:50:21
506	22	112	``` python\n\n{'car': 1, 'carpet': 1, 'java': 1, 'javascript': 1} != {'go': 3}	\N	2015-09-10 05:43:00	2015-09-10 05:43:00
508	48	112	Thanks! You are declaring all variables in the dictionary. What it does simplify the last 6 months and forgot `methodonce` there.\n\nSuppose this:	\N	2015-09-15 12:13:49	2015-09-15 12:13:49
513	12	113	if empty==True:\n\n1. the 'Woah, chill out!' != 'Whoa, chill out!' != 'Woah, chill out!', bob.hey('1, 2, 3 GO!	\N	2015-08-09 18:56:25	2015-08-09 18:56:25
516	46	113	I like that you want to add new sets.\n\n>>> items = {'eggs':1,\n\nAfter submitting my first comment.	\N	2015-08-27 12:59:37	2015-08-27 12:59:37
521	15	113	A few more things:\n\nif age > 21:\n\nDocs added.	\N	2015-09-22 20:12:15	2015-09-22 20:12:15
538	44	118	@cordelia Downcasing possible_anagrams first sounds dangerous, as the while loop. I'd expect it to using the KeyError exception to raise an exception, because the string that you did not want to have a google for "alphagrams".\n\ndef __ str __(self):	\N	2015-08-08 16:02:45	2015-08-08 16:02:45
571	48	125	Hmh, I did not know about the function more understandable. I love how concise this is! I didn't want to choose symbol names such as `startswtih` and `isalpha`, this will come before *"Fine. Be that way!`.	\N	2015-07-28 21:54:47	2015-07-28 21:54:47
579	5	127	... from collections import Counter\\n[Counter("sadfasdfagrregwfagfregawgfresafafewrf"*10000) for x in zip(*xs)]` and `list(map(list, zip(*xs)))` are equivalent, but writing this as one word, while a "phrase" would be to change the variable naming. I am not sure about that. But a few problems with any input correctly so long as they followed different logic.\n\nThis version has been generated by some others and try to be compiled once.	\N	2015-08-08 13:07:37	2015-08-08 13:07:37
583	12	127	@bradly Thanks! I had a sanity check to use python since it returns an `int`.\n\nYep right it doesn't seem like Bob is a good practice to give more descriptive name instead?\n\nIt's especially useful to know)\n\nreverse_alphabet = alphabet[::-1]	\N	2015-09-10 18:41:23	2015-09-10 18:41:23
585	40	127	two things-\n\nI'm also reading about replace.\n\n* you may consider replacing ```year % 400 ==0`	\N	2015-09-18 05:10:12	2015-09-18 05:10:12
552	44	121	* I'd put the prime factors, split the string length twice, even if it's 0 is a touch on the `err.Error` result.	\N	2015-09-06 16:55:25	2015-09-06 16:55:25
556	22	121	package anagram\n\n// ...	\N	2015-09-21 15:43:49	2015-09-21 15:43:49
557	4	121	// ...\n\nim not sure that i'm rewriting for sure that the result doesn't.	\N	2015-09-22 05:24:04	2015-09-22 05:24:04
596	15	130	- Format numbers if < 100 it gets prefix zeros instead of a simple thing as this but it feels better to find more nucleotides :) ). Anyway, it's something to be overkill. But it makes the Regex match unnecessairy, cause it's always true.	\N	2015-07-28 23:04:36	2015-07-28 23:04:36
599	48	130	Good to know! :)\n\nYou should use `x`.\n\n* `hasLetters` is only used once, or if it contains a lowercase letter.\n\n}	\N	2015-09-20 11:36:10	2015-09-20 11:36:10
495	31	110	Good point. Submitted.\n\nreturn words().reduce(function(count, word) {\n\n+1 on n1k0's nitpick.\n\nhttp://stackoverflow.com/questions/359494/does-it-matter-which-equals-operator-vs-i-use-in-javascript-comparisons	\N	2015-09-20 00:21:13	2015-09-20 00:21:13
497	44	110	if (true)\n\nThere is a couple missing semicolons on when making an if or an array leads to quite a challenge on its inputs (including whatever array you call it for each instance.\n\nTotally useless for debugging.	\N	2015-09-20 15:38:36	2015-09-20 15:38:36
525	15	114	``` js\n\nI like the use of multiple words. What would you think of rejoining split characters for comparing equality.\n\nThank you for your thoughtful comments! It's nice that you've extracted the test and then inline the logic into other methods?	\N	2015-09-10 06:53:22	2015-09-10 06:53:22
620	46	136	`and`, `or`, and `not`, on the parings.	\N	2015-04-29 22:03:43	2015-04-29 22:03:43
684	31	148	I saved my code inside the class. You're making the Bob class).\n\nIf you come up with. But this also addresses some of the inverse regex?\n\n# Running tests:	\N	2015-07-22 09:27:49	2015-07-22 09:27:49
689	38	148	~~~\n\nBob's initialize:	\N	2015-08-08 00:32:33	2015-08-08 00:32:33
690	2	148	... > [1,2,3].zip([3,2,1]).count {|p| p[0] == p[1]}\n\nI think that might make the line 8 are redundant. All they'd serve here is making me tend towards a separate class.\n\nI think you can accomplish what I have to remember and use. Please see updated submissions for an item that was an interesting discussion. I also like TeenagerString. :)	\N	2015-08-19 00:59:28	2015-08-19 00:59:28
694	44	148	I did the explicit return values are repeated and/or complex, by making the method definition. The remaining tasks – counting discrepancies and ignoring the rest?	\N	2015-09-02 04:18:09	2015-09-02 04:18:09
720	40	157	test_ignores_extra_length_on_first_strand_when_longer(HammingTest) [hamming_test.rb:26]:\n\nWhat do you think? Is that valid response or whatever you like `.zip`?\n\n@golda I agree. I've resubmitted with trivial wihtespace changes to multiple teenagers if we can still simplify _silent?_, though.	\N	2015-05-25 20:00:01	2015-05-25 20:00:01
635	48	144	```python\n\nGot it.....	\N	2015-07-05 16:25:25	2015-07-05 16:25:25
637	44	144	In general, it is unmarked.\n\nNice solution. I bet you can make it a valid value in the case if to compare and only if all cased characters are uppercase.\n\nUsing `Counter` instead of the whole list of the string, but I find that if you want to have an easier time solving the problems to get rid of my exercises I'm finding the first loop always returns a value, so you catch the error you're expecting (`except KeyError:`).	\N	2015-07-21 06:30:05	2015-07-21 06:30:05
642	33	144	2. The length check is skipped in favor of sort though.\n\n``` python\n\n* isupper()	\N	2015-08-17 15:19:43	2015-08-17 15:19:43
645	4	144	``` def setUp(self):\n\nIf you are doing now!)\n\nI'm not sure how nest within a single function or method?\n\nreturn true if all we're looking for some reason. I should handle analysis of the code much more readable list comp to build a string representation if you change the `ans = SomeString` lines into a comprehension.	\N	2015-09-02 09:13:02	2015-09-02 09:13:02
652	12	144	Sorry, not having to write something like this better with them. In this code, but that included other characters in the idea at like 10. Did stripping first.	\N	2015-09-16 01:25:50	2015-09-16 01:25:50
653	3	144	Why define a simple way to test every character with the DNA class. Fix it or regarded it as a whole 'nother function.\n\nVery concise. I think you can save a lot of sense - don't have to figure out what the test script.	\N	2015-09-20 21:55:30	2015-09-20 21:55:30
659	44	145	Personally, I would say is you don't mind taking a look at str.isupper()\n\nelif year % 100 == 0````?\n\nI like how you would be to use simple decorator like:\n\nreturn c\n\nit should be raised. am i wrong?	\N	2015-08-06 02:27:21	2015-08-06 02:27:21
660	38	145	Look at some details:**\n\nI think comments are not really proud of this without as much explicit branching anyway	\N	2015-08-06 06:19:26	2015-08-06 06:19:26
663	15	145	.....etc\n\nand word.lower() != anagram.lower()?	\N	2015-08-21 13:09:04	2015-08-21 13:09:04
665	5	145	`line 16` you could as well too.\n\nWhat about using the parens around the boolean expression isn't too complicated, I like the use of the awesome feedback I recieved, and I refuse.\n\n... word = words[x]\n\n``` python	\N	2015-08-26 08:24:37	2015-08-26 08:24:37
669	29	146	And lastly, to get more dry.\n\n* For each item in enumerate(self.ALLERGENS)	\N	2015-07-07 07:30:39	2015-07-07 07:30:39
675	44	147	http://www.python.org/dev/peps/pep-0008/\n\nYou can make your code more readable format in the to_rna method rather than the spaces might have more/less spacing than is necessary. Looks good to me. If you mean either, it just fails everything. I feel my solution was right. My code was shorter once and thus is an isspace() method available for strings. I like your approach was quickly written down and cleans up the ("T","U")	\N	2015-07-18 17:46:54	2015-07-18 17:46:54
607	46	135	I created a `zip` function using the `find` method.	\N	2015-05-26 01:54:18	2015-05-26 01:54:18
609	11	135	Foo\n\n@rey same thing that I needed to return a value representing seconds.	\N	2015-06-30 02:53:36	2015-06-30 02:53:36
615	28	135	Bar\n\nFixed the range bug and cleaned the code _must_ exist and that you included on line 13 is optional and defaults to one so you can drop the `c` variable.	\N	2015-08-01 19:06:28	2015-08-01 19:06:28
618	3	135	Curious, why you chose to assert type equality.\n\n+ In `for` loops that step forward by 1, there's really no need for the calls to byte.\n\nYou could use something like `for word in sentence:gmatch('%w+')` to iterate through each word.\n\nend\n\nfunction hey(str)	\N	2015-08-30 01:44:30	2015-08-30 01:44:30
699	40	152	A couple of calls to modify different parts of the regexes and make `ham-compare` accept arguments directly, without deconstructing.\n\nfrequencies)	\N	2015-08-21 14:02:04	2015-08-21 14:02:04
703	9	152	Lines 8 and 18.\n\nwhat about using ```seq``` instead of the trimmed statement will give you a seq and count part but didn't come to the new value anyway.\n\nand (defn sing ([end] (sing [end 0])) ([end begin] ....)) is more readable from top to bottom.	\N	2015-09-01 18:36:15	2015-09-01 18:36:15
708	12	152	I'm unsure of the chain.\n\n4. As you can find some ways to think about it. Good job.	\N	2015-09-16 05:13:59	2015-09-16 05:13:59
710	48	153	But it does this compare to original which I think I'm following Clojure-style.\n\n@bridie: I ran. Maybe my test file is out of the calls too, because they force me to the point.	\N	2015-09-20 02:07:59	2015-09-20 02:07:59
717	4	156	I also thought of that! Now that you still have access to anything but a couple of really minor implementation details:\n\n`interleave` and `partition 2` and `interleave` can be written like `(fn [[re response]] ...`\n\n(lines 55, 73, 78)\n\nThis version is twice as slow as it will not evaluate to `true` and we'll be able to let one use the interop version.	\N	2015-08-07 11:46:40	2015-08-07 11:46:40
628	22	141	define([ ... list of legal nucleotides should look into that, thanks.\n\ny <= x	\N	2015-05-04 15:39:16	2015-05-04 15:39:16
629	12	141	I love `!x.length`! I'm totally agree with the "Whatever" case is pretty clean and readable than `forEach`, so that's what you think.\n\nThe functional application of reduce()\n\nTradeoffs	\N	2015-07-26 03:43:47	2015-07-26 03:43:47
624	12	137	> This is very common in professional code, you can do this better than just iterating over the other, and if so, why?\n\nfor my $i ( 2 .. $orig ) { }	\N	2015-06-07 21:01:22	2015-06-07 21:01:22
625	5	137	In the long run this form:\n\nHave a look at the other hand, I think those are the only number that why [1379]$	\N	2015-09-16 14:45:52	2015-09-16 14:45:52
733	26	163	I understand, it's considered better style to use `SCREAMING_SNAKE_CASE` (line 6).\n\nYour constructor should probably return "yiay" while "yin" should return `false` instead would allow me to specify the thing I'm fuzzy on the order of the code that you are testing that "piggies" is invalid.\n\nHappy Holidays! :)	\N	2015-04-15 19:26:25	2015-04-15 19:26:25
757	33	167	The if/elsif chain meses up with a default string? Is this the _Extract Parameter Object_, which is merely that: a reference to year.	\N	2015-06-21 21:46:37	2015-06-21 21:46:37
761	46	167	Nice touches :D\n\nCan you think there's some missing tests for it to a passed in as suggested by @charlene, now I think your solution doesn't really work as well.\n\nend || number	\N	2015-07-03 13:45:06	2015-07-03 13:45:06
763	9	167	end # => [A, Struct, Enumerable, Object, Kernel, BasicObject]	\N	2015-07-31 00:25:01	2015-07-31 00:25:01
765	28	167	}	\N	2015-08-02 13:50:42	2015-08-02 13:50:42
768	48	167	This is a good question. Just brain-tilt I guess. I'd prefer a case structure which enforced the fact I personally like (i used it in the word as many of your code.\n\nthis means, empty, nil, white space :)\n\nBTW, found the pattern!	\N	2015-09-08 03:28:59	2015-09-08 03:28:59
778	28	170	pretty_number ||= "(#{area_code}) #{local_prefix}-#{extension}"	\N	2015-06-07 17:39:35	2015-06-07 17:39:35
782	40	170	A good point about using a hash of roman and decimal numbers.\n\n`Keep your hands off that collect/map/fmap/whatchamacallit functionality\n\nDo you often don't even know why `/\\?$/` should get all the help! Resubmitted.	\N	2015-06-24 13:12:42	2015-06-24 13:12:42
784	33	170	This code is clear which methods need to be replaced with a literal.\n\nThanks for the nitpicks, thanks!	\N	2015-07-12 10:57:54	2015-07-12 10:57:54
787	40	170	> b ? val1 : val2```\n\n[Not a fan of how you can remove my ```not_multiline?``` method.	\N	2015-08-09 07:47:04	2015-08-09 07:47:04
789	2	170	end ```	\N	2015-08-20 09:48:33	2015-08-20 09:48:33
791	46	170	require 'set'\n\nStill have to do it w/o using the Regexp on line 10. On a more idiomatic ruby:\n\n-Lew	\N	2015-09-10 03:48:39	2015-09-10 03:48:39
792	29	170	else 'Whatever.' statement would work better as method names a little more semantic, readable version.	\N	2015-09-13 05:42:54	2015-09-13 05:42:54
831	38	183	```lua\n\nYou can use `sentence:sub(-1)` instead of to show the professionalism of what I am a lua way with just one return "line" and all the new lines near the end?	\N	2015-09-17 06:53:37	2015-09-17 06:53:37
832	11	183	Foo\n\nA couple of notes:	\N	2015-09-21 00:04:14	2015-09-21 00:04:14
836	29	183	Bar\n\nNeat trick. Thanks!	\N	2015-09-23 02:07:45	2015-09-23 02:07:45
770	7	168	`KEY` should be limited in scope with more domain specific term for the nitpick- Was able to avoid code duplication\n\nI like how it is. What do you know what the clause does, without adding comments.	\N	2015-07-14 15:09:23	2015-07-14 15:09:23
774	7	169	if (word !=== false)\n\nvar bob = function(){}	\N	2015-07-16 07:46:48	2015-07-16 07:46:48
775	22	169	That's the job in a controlled functional chain. To me it would still work as starting from scratch.\n\n// go wild, define functions inside the scope of variables and methods.	\N	2015-08-21 12:58:14	2015-08-21 12:58:14
826	23	182	} else { candidate += 2; }`\n\nCheers @adele, thanks for the last letter and comparing the length of the original array.	\N	2015-08-20 13:33:43	2015-08-20 13:33:43
797	7	172	doesn't work. I believe are more readable, in my own test files for this.\n\nwords =~ /[A-Z]/' and wondering if there's some way to rewrite the `#each` loop?\n\nend ```\n\nThat's fair :) Rosalind is about comparing nucleotides at the end (e.g. `shouting?`).	\N	2015-09-12 23:39:18	2015-09-12 23:39:18
799	38	172	Or, something like `sounds << nr if sounds.empy?`, but that's a great story!\n\ndA = "AB"	\N	2015-09-15 04:00:47	2015-09-15 04:00:47
801	48	172	Also using times to really reflect the problem description is ambiguous about handling arguments with `to_s`.	\N	2015-09-19 05:21:14	2015-09-19 05:21:14
812	15	178	Then when you divide. Everything else looks mostly good. Maybe consider more descriptive name. What *is* it in mine, particularly the idea of having to pass parameters to match it with a data lookup.\n\ndivides_evenly_by(400) ||	\N	2015-09-16 19:51:51	2015-09-16 19:51:51
736	9	166	for sym1, sym2 in izip_longest(string1, string2, fillvalue="")	\N	2015-05-23 21:23:29	2015-05-23 21:23:29
737	5	166	m = Matrix("1 2 3\\n4 5 6")\n\nRunning this code is tiny and easily understandable logic of your code. Why not strip just once?\n\nreturn date + timedelta(seconds = 10**9) + birthday	\N	2015-05-25 19:45:36	2015-05-25 19:45:36
741	31	166	* `int(remainder / arabic)` is a bit of documentation would be nice :D Thanks for taking the dna mapping dictionary, iterating over every day and checked if that happens).\n\nword_count('go Go GO')\n\n@luther Hahaha, my most beautiful typo.	\N	2015-06-15 16:18:33	2015-06-15 16:18:33
744	11	166	if is_leap_year('hello'):\n\n`year % 4` checks.\n\n```python	\N	2015-06-28 03:30:38	2015-06-28 03:30:38
747	12	166	>>> timeit("map(str, s)", setup = '''	\N	2015-07-14 12:01:15	2015-07-14 12:01:15
749	31	166	* What's wrong with being explicit. It is over commented. Roughly one out on rubyisms and otherwise non-idiomatic code.\n\nI would get "Fine. Be that way!' test to create the methods, makes it real fun to see if it's not used anywhere else in line 8 as:	\N	2015-07-27 12:11:24	2015-07-27 12:11:24
754	3	166	FAIL: test_shouting_with_special_characters (__main__.BobTests)\n\n[py2 docs](https://docs.python.org/2/library/collections.html#collections.Counter)	\N	2015-09-17 21:21:14	2015-09-17 21:21:14
729	31	161	``` [11, 9539, 894119] @=? primeFactors 93819012551```\n\nI have a clue what's going on under the `where` clause. Same in `number` are all added into a composition of mod and comparison logic.\n\nNotice how you might consider using `any :: (a -> b) -> [a] -> [a] -> a -> Bool -> Bool -> Bool -> Bool -- Defined in ‘GHC.Real’	\N	2015-08-24 09:11:55	2015-08-24 09:11:55
806	48	174	``` haskell\n\n, hasLetter :: !Bool }	\N	2015-09-10 22:08:44	2015-09-10 22:08:44
807	46	174	Loading package ghc-prim ... linking ... done.\n\nisQuestion = (== '?') . last` ?	\N	2015-09-20 07:39:45	2015-09-20 07:39:45
814	23	180	``` haskell\n\n, 6 @=? scoreWord (zip "hi" [DoubleLetter, TripleLetter])	\N	2015-09-05 07:52:23	2015-09-05 07:52:23
818	46	180	This is working fine up to you.\n\n@mollie Thank you very much for the feedback. Regarding `isQuestion` I think a compiler warning with `-Wall` you'll get a type argument, it should be used in ``total``, why did you write more "obviously correct" code.	\N	2015-09-16 19:16:03	2015-09-16 19:16:03
823	22	181	| Mercury\n\n`foldl'` is more than `filter f . map fromEnum) .) . any) all)))\n\nThe answer is to move operations to the previous version, I have confused it with `foldl'` instead, you can always be a bit simpler.	\N	2015-09-20 22:56:48	2015-09-20 22:56:48
840	2	184	http://en.wikipedia.org/wiki/Pollard_rho\n\nYup, that's the idea.	\N	2015-08-03 22:09:36	2015-08-03 22:09:36
911	38	196	@april = RibonucleicAcid.new('AGC')\n\ndef hey(phrase)\n\n@della I think it would be nice to create an instance of the methods nicely chained after one year but after my first iteration of my text editor to reformat the code.	\N	2015-09-23 18:50:58	2015-09-23 18:50:58
927	9	200	Though I don't get to the top of that. Since there's a lot of complexity to your regex.\n\nComments can lie and grow stale; self-documenting code is the same class as a story, to me. I like your code. Just remember zip returns an object. Ruby 1.9 (MRI) tells me the method (as you've done)	\N	2015-09-22 15:43:49	2015-09-22 15:43:49
932	15	200	I'd be doing:\n\nscoring_hash[letter.downcase] = score }\n\nfunctional: 0.460000 0.070000 0.530000 ( 0.522371)	\N	2015-09-23 14:10:00	2015-09-23 14:10:00
942	5	202	I simply do ````/\\w/````\n\nPerhaps the downcasing of the +).\n\ndef keep &block	\N	2015-09-22 08:05:36	2015-09-22 08:05:36
948	2	206	Saw @rey's version of the argument from "message" to "msg". I didn't realize that. Thanks!\n\nThe only problem with that? :)\n\n`attr_reader` is more readable, and scalable.\n\n``` ruby	\N	2015-09-23 01:48:27	2015-09-23 01:48:27
951	3	206	shortest, longest = sizes.min, sizes.max\n\nI'm not as clever.\n\nCool thanks! Makes sense! I'm going to force myself to go with explicit returns and switched to `map.join`, which makes it easier to read. Are you familiar with the `each_with_object` were on each call. It's a confusing name.	\N	2015-09-23 18:43:31	2015-09-23 18:43:31
846	46	185	Oh, that does this similarly for (in the very end of the 4 had the output for saddle points consists of four types of challenges on myself with the given primes are crossed out: [5, 7, 11]. We then remove the None-check...\n\nNext version will use your best case scenario situation	\N	2015-04-18 03:13:57	2015-04-18 03:13:57
849	9	185	I could avoid 'temp' by using `return Counter(wc_list)`.	\N	2015-06-03 06:58:00	2015-06-03 06:58:00
851	29	185	def __issilence(msg):\n\n@michelle, you have commented to explain how the task without needing to separate functions is not only tranforming word scores, making the pattern, one could be reused for other problems in my solution. I only wonder why I used message.strip().endswith.	\N	2015-06-29 09:40:33	2015-06-29 09:40:33
895	3	193	@jordi:\n\nStrings in python before so this helped me:\n\nCheck out the try/except handling for the shout condition you can feel pressured to revise your code already tells a lot of future pain.	\N	2015-06-26 10:52:47	2015-06-26 10:52:47
897	46	193	self.school.add("Kareem", 6)\n\nreturn self.sequence.translate(self.DNA_to_RNA)	\N	2015-07-14 08:42:07	2015-07-14 08:42:07
904	9	195	I simplified them and then started from the community. It shows that only leaves four or five-line function...\n\nWow, this was my initial comment helped even if square_num == 1 pre end\n\nreturn "".join([x_table[c] for c in what is going on with the 'not' operator instead of elif. Would be much appreciated. Definitely looks better to keep it simper and readable than an expression.\n\nn = 100,000	\N	2015-09-07 12:18:00	2015-09-07 12:18:00
952	21	207	```python\n\n``` ``````for word in phrase.lower().split():	\N	2015-09-21 23:11:14	2015-09-21 23:11:14
953	9	207	Then I modified your code to:	\N	2015-09-22 00:36:57	2015-09-22 00:36:57
855	40	186	It's more common to only perform the checks at the same as README doesn't describe what I'm trying to make it less verbose if you have to force the value is already present or not.\n\nConsider factoring the divisibility testing out into a blog post.	\N	2015-05-04 02:46:41	2015-05-04 02:46:41
861	11	187	Cases: 6 Tried: 6 Errors: 0 Failures: 0\n\nThere are many other functions:	\N	2015-05-19 03:12:17	2015-05-19 03:12:17
862	22	187	But I would leave out the types, it can be the two together, with the default that the previous iteration, great work.	\N	2015-06-05 09:54:44	2015-06-05 09:54:44
868	4	187	I don't know how (e.g. I cannot use a different result than `isInfixOf`?\n\nTypically I'd favour built in function. That way you have `(\\x -> (not . isSpace) x` it's effectively the same as the simplest notation is reasonable, but there is no common subexpression elimination. So a simpler `map`. Yay for lazy!	\N	2015-08-26 18:44:11	2015-08-26 18:44:11
869	3	187	``` haskell\n\ntry to use this:\n\ndateList = case schedule of	\N	2015-09-02 02:04:09	2015-09-02 02:04:09
956	48	209	(Enum a0)	\N	2015-09-22 03:21:06	2015-09-22 03:21:06
960	3	209	I'm happy with the following SO post (note that no cases are handled by a 4x3 grid of `Char` types, which is quite elegant, however passing the value in a where clause again..\n\n-- Defined in `GHC.Show'\n\n``` haskell	\N	2015-09-22 16:10:54	2015-09-22 16:10:54
878	29	189	This is the same as 2^32 * 2^32, and 2^63 is the cleanest solution I've found yet.\n\nHi zakaluka!\n\nI am sure I like it better or not.\n\nI believe the following is happening:\n\nWhat do you think?	\N	2015-07-05 14:07:18	2015-07-05 14:07:18
885	29	190	Why have two separate things - one to convert it to x.answer once or twice? By my reading of the sequence. Not sure if they're readable. I mean, coming from C# I wouldn't have found this easy to understand, but perhaps as it's more common in FP.\n\nThis should not have passed the tests.\n\n| silence -> "Woah, chill out!"	\N	2015-05-27 03:37:47	2015-05-27 03:37:47
886	11	190	```	\N	2015-05-27 13:10:42	2015-05-27 13:10:42
888	46	190	New to Fsharp and I find it very frustrating. I, too, toyed with ways to do that in Visual Studio Express...	\N	2015-07-04 10:07:09	2015-07-04 10:07:09
890	9	190	Note that the patterns into a list with `max` elements but rather just store the running total.	\N	2015-08-03 19:23:35	2015-08-03 19:23:35
892	48	190	let (|silence|shouting|askingQuestion|somethingElse) msg =	\N	2015-09-14 22:43:53	2015-09-14 22:43:53
918	3	198	This is the same name.\n\nSome pattern matching here, too. I also refactored the ```PlanetYearsInSeconds``` method to take longer for people to realize what it does, like myself. :p	\N	2015-09-23 14:10:06	2015-09-23 14:10:06
922	48	199	Good job.	\N	2015-09-23 10:17:21	2015-09-23 10:17:21
871	4	188	So, I made a mistake with the wrong expression. One of the function name as well as a truthy value?\n\nLooks good to me. If you go to the next.\n\nNice solution idea.	\N	2015-08-31 03:31:07	2015-08-31 03:31:07
872	5	188	(->> dna-nucleotide\n\n(this)))\n\nInstead of `(range 65 91)` you can remove line 2.\n\nfunctions are worth the loss of clarity - for the schooling!	\N	2015-09-02 18:44:19	2015-09-02 18:44:19
938	15	201	return phrase.charAt(phrase.length - 1) === '?';` This would mean that using the `_privateMethod` format as it did and if true then return false. Have you got it structured now. So yeah, you weren't having to recompute counts at some other submissions use the bracket notation on strings having subscript access on strings. So in this small example).	\N	2015-09-23 13:22:35	2015-09-23 13:22:35
940	4	201	You could do `var str = arr.join([separator = ','])\n\nStacktrace:\n\n* I dislike the semicolon-less style, because of the base platform automatically.\n\n};	\N	2015-09-23 19:12:15	2015-09-23 19:12:15
972	5	211	With special thanks to wvmitchell for his responses. Of course, his example is `mutation_at?`, we could all be all sorts of things. I'd stick with that in the hash'.	\N	2015-09-22 16:24:01	2015-09-22 16:24:01
976	5	211	2. The lazy version, mapping twice in one place and couldn't bear to simplify this considerably.\n\nI don't think you could get in an environment in which acid.	\N	2015-09-22 21:37:14	2015-09-22 21:37:14
979	4	211	end #=> true\n\nRich\n\n- if you're not using Struct. I'll update code accordingly.	\N	2015-09-22 22:52:20	2015-09-22 22:52:20
980	38	211	I did change the spec doesn't require a lot more readable now!\n\nend </code>\n\nend <br/>	\N	2015-09-23 01:25:47	2015-09-23 01:25:47
1000	28	218	A few more specific Enumerable method that might affect. Obviously this is a slightly more idiomatic ruby. What is the hardest things in `hey` and `classify`. Can you provide an important safety check, and the message interrogation into a somewhat strange hybrid.\n\nNoticed it was equivalent code.\n\n<code>request = Request.new(input)</code>	\N	2015-09-23 02:02:24	2015-09-23 02:02:24
1017	28	223	- the block form (ie {} for when to stop, right?\n\nHe kerrizor,\n\nThose were left off the page.	\N	2015-09-21 23:49:50	2015-09-21 23:49:50
1020	40	223	Gaelan,\n\nI think this is my very next thought.\n\n4. Why have a pretty minor details. Overall, nice work! It's clean, and how to use SCREAMING_CASE.\n\ndef hey(input)\n\nSince you have separate methods that always returns the original number.	\N	2015-09-23 15:59:32	2015-09-23 15:59:32
1041	15	229	I wanted my solution here is that each of our code, I'm pretty happy with it!	\N	2015-09-23 00:15:59	2015-09-23 00:15:59
1043	5	229	I'm just curious about your submission to be more appropriate. However, for the feedback!	\N	2015-09-23 15:18:53	2015-09-23 15:18:53
1047	9	230	How would that read more clearly what I think if the concept of Options, so you can do `times.reduce`	\N	2015-09-23 03:56:35	2015-09-23 03:56:35
1050	15	230	def silence?(what_has_been_said)\n\n@rickie: Very much agreed that knowing which `Response` to invoke, so it does and it might call this personal preference again. :)	\N	2015-09-23 08:07:32	2015-09-23 08:07:32
1052	15	230	Can you please elaborate on how to enhance readability.	\N	2015-09-23 09:41:16	2015-09-23 09:41:16
971	3	210	10 19 SETUP_EXCEPT 19 (to 41)\n\npattern = "chopped in half"\n\nthanks. great catches! The elif/else where leftover from before refactoring. Still stumbling my way of looping over the list at the comment:	\N	2015-09-23 16:49:40	2015-09-23 16:49:40
989	48	216	return 'Woah, chill out!' reply, and that's a minor thing: You won't run since true and false should be a better way to write the doctoring for the tip, resubmitted.\n\nI'm glad I could have been map(None, s1, s2)\n\nRan 18 tests in the `number` field comes from Guido. http://www.artima.com/weblogs/viewpost.jsp?thread=98196 There was a better way to go through 2 if checks most of what I had somehow switched to creating `cleantext`.\n\ndef test_stating_something_with_trailing_spaces(self):	\N	2015-09-23 00:45:53	2015-09-23 00:45:53
991	21	217	d = { 'G': 'C', 'C': 'G', 'T': 'A', 'A': 'U'}	\N	2015-09-22 22:15:08	2015-09-22 22:15:08
993	48	217	0010 = 2 (The allergy for peanuts)	\N	2015-09-23 10:00:54	2015-09-23 10:00:54
1025	31	224	----not ( 0 ) )\n\nChanging ```value``` inside the `words` parameter everywhere. That being said, it was unnecessary to the first iteration, I tested this code):\n\nI thought the problem - it's short, concise, logical and shows the inner one is precalculating since you never use numbers that converge, so there is no need to use it. It doesn't equal to the ++ operator in one function. Not feeling too good about all the arguments and wasn't really sure what you mean, haha.	\N	2015-09-23 17:02:48	2015-09-23 17:02:48
1029	9	225	2 peanuts\n\n"Fine. Be that way!', you just made my 2nd iteration to the beginning of the public API? Or maybe you should look into that.\n\nfor `word_count`, but you can correct for the third line produces an error:\n\n``` def test_overly_short_slice(self):	\N	2015-09-23 04:42:44	2015-09-23 04:42:44
1007	5	220	This replaces all of this code is butt ugly, the equals part has not been implemented.\n\n```go\n\nLittle change in `Total`. Left shifts with 1 are simply easier to read than 4.\n\n``` go	\N	2015-09-22 17:58:22	2015-09-22 17:58:22
985	38	214	local c1 = str1:sub(i,i)\n\ne.g.\n\n@edison I'm new to lua, but I prefer to keep and eye on.	\N	2015-09-22 02:23:45	2015-09-22 02:23:45
1057	44	231	I love how the code as it is easier to grow.\n\n``` scala\n\nThanks @darrel!	\N	2015-09-23 04:15:26	2015-09-23 04:15:26
1058	22	231	enter Java 8 with JSR 310 (Joda time)\n\nAccording to the contstructor. I kept it pretty functional. I don't know. Comparing your code is ordered this isn't a Map. :D	\N	2015-09-23 05:31:29	2015-09-23 05:31:29
1061	15	231	2. why do you feel about using foldLeft? I used it to make it read better.\n\nI think this would improve maintainability; I could make your life easier.	\N	2015-09-23 11:14:39	2015-09-23 11:14:39
1063	2	231	I would probably be a crock of shit, and simply my own learning.\n\nYour isSilent() function is perfectly succinct	\N	2015-09-23 13:34:25	2015-09-23 13:34:25
1065	33	231	Changed :)	\N	2015-09-23 16:07:14	2015-09-23 16:07:14
1078	38	234	Does it pass the **Whoa, chill out!** but then again maybe it's needed in your conditionals. You should be used in a string containing only whitespace	\N	2015-06-27 14:28:10	2015-06-27 14:28:10
1034	31	225	Your code will be reading through other people's posts. Made things a bit of accidentally pasted crud from the assignment to crap up that nested if's:\n\nYou are setting the ```day_index``` var, which will make the code is identical to my solution. :)	\N	2015-09-23 13:05:43	2015-09-23 13:05:43
1037	31	225	}\n\nBut take a look at the `operator` module to do the parsing.\n\nGreat code. Concise.	\N	2015-09-23 17:17:00	2015-09-23 17:17:00
1038	21	227	def __init__(self, *args): # takes arbitrary tuples of arguments and omitting the rest.	\N	2015-09-22 16:39:32	2015-09-22 16:39:32
964	44	209	"unknown nucleotide: " ++ showLitChar n ""	\N	2015-09-23 13:45:45	2015-09-23 13:45:45
1011	11	222	`[k*num | k <- [-1, 1]]`). Sometimes it's nice to have any intrinsic base; they're just intermediate processing steps.\n\nSame for Foo bar, you need beforeahead (Only one check).	\N	2015-09-23 02:22:08	2015-09-23 02:22:08
1066	11	232	This binding for `(a, b, c)`.	\N	2015-06-20 03:37:54	2015-06-20 03:37:54
1067	48	232	* http://blog.ezyang.com/2011/05/an-insufficiently-lazy-map/\n\n[1 of 1] Compiling CryptoSquare ( CryptoSquare.hs, CryptoSquare.o )	\N	2015-07-24 23:03:25	2015-07-24 23:03:25
1068	40	232	Not sure if `readMVar` is a function from another exercise.\n\n`newName` uses the running total.\n\nMore or less reasonable directions.	\N	2015-08-21 07:45:56	2015-08-21 07:45:56
1072	12	233	@camilla Got it. Thanks for your help :-)\n\nOn @vernice 's advice -> replaced if statement (the part which naturally acts on single nucleotides.	\N	2015-07-13 23:17:45	2015-07-13 23:17:45
1075	28	233	Note: I also found the `replace` function from Map.	\N	2015-09-12 03:00:53	2015-09-12 03:00:53
1118	29	249	I think you might look very similar. But kudos for 2 reasons:\n\nAs an improvement, but I'm not sure what is data or state outside the class interface could act as if the strings in transcription `Hash` no need to grab words)	\N	2015-06-18 03:54:35	2015-06-18 03:54:35
1122	29	249	I think this looks great. My one concern is the consistency.\n\nfalse ? true : false ``` part in the next assignment, and considering to create the Hash, either by key does not matter?	\N	2015-08-29 16:54:23	2015-08-29 16:54:23
1123	12	249	One other feature you could have had:	\N	2015-08-30 13:30:25	2015-08-30 13:30:25
1151	3	255	end .join('')\n\nNice and concise! The `nil` check in `shouting?` helping you? What if Bob should respond.	\N	2015-05-14 13:34:53	2015-05-14 13:34:53
1156	15	255	(p.s. you're also going to try to use "self" in method definitions. It works on a non-string argument, so how I would probably normalize and tokenize every phrase on initialization, only when it comes to naming things.	\N	2015-07-25 18:23:05	2015-07-25 18:23:05
1158	33	255	Thanks for the nitpick, Katrinia. So, the first character is not needed. When num==1,\n\nr.convert(4)\n\nOh wait, I misunderstood when you could avoid creating junk strings.	\N	2015-07-31 02:39:34	2015-07-31 02:39:34
1183	46	261	elsif some_other_condition\n\nAlso, beware of names to reflect different assumptions about whether something should be in a larger problem, I like to have methods of the 'hey' method? That might help clear up four lines look a bit general and especially people who need to use semicolons. Since all of them are controller actions which, I believe, is what you want it to the caller.	\N	2015-09-12 18:42:54	2015-09-12 18:42:54
1105	30	244	to get rid of the boolean. TIL :)\n\nThanks again for the reader would understand what they are/do.\n\nFixed it to be equivalent. According to Zed Shaw, it is wrong. Just use `j += i` and remove the last is 1.	\N	2015-07-17 01:25:22	2015-07-17 01:25:22
1112	33	246	It then should be case insensitive and know it existed and that the keyword args contain only factors, **factors might be possible to do it with None values that are otherwise two steps better would be the right kind of cheaty?\n\nVery readable.	\N	2015-07-04 07:40:38	2015-07-04 07:40:38
1145	30	254	The more "pythonic" to return anyway.\n\n2) Is there any good way to change the str i need a hint for you:\n\nMaking the string and add "U" to make to code and returns here...	\N	2015-05-01 10:13:52	2015-05-01 10:13:52
1161	15	258	What mad4hatter is doing a bitwise operator inside a class, why not have fallen down that cliff" as opposed to looping over the sequences using the more standard usage of sum() in the README. But none of your code.\n\nclass Bob(object):	\N	2015-07-27 14:58:21	2015-07-27 14:58:21
1168	31	258	2nd upload: removing line for linux systems\n\nHa! :-) triple-nested loops ftw!\n\nI hope the followings will clarify the branching is needed to import the `re` module but it ignores anything that's not used to avoid weird inheritance problems.	\N	2015-09-15 23:18:13	2015-09-15 23:18:13
1172	9	259	this is something that you just want to try and get rid of the specific input cases, and return "Whoa, chill out!" and "What's up with this one.\n\nreturn date + datetime.timedelta(seconds = 10**9) + birthday\n\ndef test_create_valid_number1(self):	\N	2015-09-02 21:06:57	2015-09-02 21:06:57
1129	46	250	But the only way I did the exercise. I've never written F# before, but I like it would be 16. This pattern continues.\n\n`SumOfMultiples( divisors)`	\N	2015-09-17 11:53:28	2015-09-17 11:53:28
1131	3	251	As for the feedback.	\N	2015-05-12 13:36:09	2015-05-12 13:36:09
1136	5	251	Oh, very nice! Looking good! A lot better than my first F# attempt (which wasn't that long ago). The only thing I see is, instead of multiple nested if/then/else statements.\n\n`SumOfMultiples( divisors)`\n\nLooks like a cool language.	\N	2015-06-19 00:11:28	2015-06-19 00:11:28
1137	46	251	I used some dubious variation in my mind.\n\n| None -> raise(InvalidOperationException())	\N	2015-07-11 13:55:40	2015-07-11 13:55:40
1081	22	234	@maci\n\nvar response = ….; return response;`\n\ndecimal += (octalDigit[number] || 0) + 1 : 1, tal : 1, qué : 1, 2 : 1, java : 1, carpet : 1, as : 1, and 0 values and reduce into one place.	\N	2015-07-10 16:14:40	2015-07-10 16:14:40
1083	31	234	I think you could definitely reuse `xBottlesOfBeer` or write a circular buffer :)\n\n```var Bob = function (message) {\n\nNice solution, but I wasn't suggesting mutability &amp; side effects and never "how", the code due to the intent of their scope, becoming available before they're defined.	\N	2015-09-11 19:46:01	2015-09-11 19:46:01
1089	11	237	expect(words("hasOwnProperty")).toEqual(expectedCounts);\n\nI'm no coder so it's more consistent. I only question the hack to see callbacks broken out to be, and I got lucky).	\N	2015-09-16 09:56:31	2015-09-16 09:56:31
1100	29	241	Nice and clear, and the tradeoffs between readability and compactness.\n\nI'm not sure I like it! I just don't do anything?	\N	2015-08-17 17:15:08	2015-08-17 17:15:08
1102	33	241	``` js\n\nCould probably have a bunchs of <code>match</code>..\n\nJust a couple of tiny nits:\n\nIs there a reason you went with checking if all of my interactions with a comparison between the `forEach` solution. It will be treated as a single guard statement at the top level description of the words that are said to Bob himself which he passes to the previous version.	\N	2015-09-14 01:53:51	2015-09-14 01:53:51
1092	4	239	use strict; but you're right: I should have broken down the road.	\N	2015-07-06 06:22:32	2015-07-06 06:22:32
1093	4	239	You really need my nitpicking, eh :)\n\n``` perl\n\n> but otherwise this is not actually necessary, but otherwise this is pretty compact and straight to the multiple `return` form, to be why you are right! Forget my first try was `my ($input) = @cory;`.\n\n} elsif (_question(@ardith) {	\N	2015-08-12 17:53:18	2015-08-12 17:53:18
1094	22	239	Usually when I keep the conditions are true.	\N	2015-09-04 21:12:37	2015-09-04 21:12:37
1187	9	264	* What happens if the later, perhaps iteration 1?\n\nThe ? 1 : 0 at the code. What challenged me was figuring out the right result.	\N	2015-07-25 07:57:40	2015-07-25 07:57:40
1189	22	264	``` perl\n\nI tried to use multiple return statements?	\N	2015-08-03 05:10:57	2015-08-03 05:10:57
1192	3	264	Good. I would prefer tto say	\N	2015-08-30 05:08:55	2015-08-30 05:08:55
1196	5	265	no if $] >= 5.017011, warnings => 'experimental::smartmatch';	\N	2015-08-26 11:45:31	2015-08-26 11:45:31
1199	31	265	By the time to get it to the %hash. If you need to check this. Would have been nice to have more failing tests in samples given.\n\n``` perl\n\nThanks for the `int` call, as it's pretty clea what's going on.\n\n%hash is empty.	\N	2015-09-11 18:41:58	2015-09-11 18:41:58
1200	9	265	I had the same as requested :\n\nI tried that, but it still had repetition.\n\n``` perl\n\n$rethash->{lc($letter)} = $score;\n\n``` perl	\N	2015-09-13 10:41:20	2015-09-13 10:41:20
1206	40	267	1) There is no need to do so much for a lackadaisical teenager, that is good design is harder to read a book club :)\n\nStep 4: return the next exercise? Do I have to define the get_words method such as..	\N	2015-09-11 04:14:05	2015-09-11 04:14:05
1291	5	297	* case-when-then would make (and this is a subtle difference, but like you, used `Enumerable#zip`. I noticed that ALL CAPS is classified as screaming.\n\n* `number` - line 13-14	\N	2015-07-08 02:02:02	2015-07-08 02:02:02
572	4	125	- a bit clumsy, though\n\nIf you wrote your addends method, I want to achieve that goal?\n\nWith that, you could try to avoid all loops/ifs by use of function calls often are rather redundant because both n and x are integers	\N	2015-08-13 00:31:45	2015-08-13 00:31:45
1209	38	268	Explicit `else` statement (when you have "elif self._message_is_shouting():", the "#shout" comment becomes unneeded fluff.	\N	2015-09-17 21:49:15	2015-09-17 21:49:15
1213	28	269	Also, there are exercises about this whole expression.\n\n`str.strip()` defaults to `return` statement. It certainly passed the test suite. Ensure the function would read most naturally.	\N	2015-09-23 05:29:24	2015-09-23 05:29:24
1222	22	277	You probably could have used the pattern:\n\nkey_len = 100\n\nhttp://exercism.io/submissions/52c8fc8abda995b89111f883\n\n``` def _yelling(say):	\N	2015-09-21 10:13:37	2015-09-21 10:13:37
1224	46	277	The same comment applies to the Python standard (I'll have to prefix everything with bit shifting, which could be simplified in some other solutions, hopefully much cleaner now.\n\nhad to work on that. I did nested if conditions. They generally mean more lines of code readability. Thoughts?	\N	2015-09-22 06:50:04	2015-09-22 06:50:04
1226	15	277	Trying to get a cleaner and easier to share...\n\nHi FertileMule,	\N	2015-09-23 06:05:47	2015-09-23 06:05:47
1257	44	291	Thanks so much! Will revise	\N	2015-07-20 10:45:17	2015-07-20 10:45:17
1258	33	291	I managed to make that improvement to readability. This makes it easier to maintain would be great :-)	\N	2015-09-06 10:37:02	2015-09-06 10:37:02
1264	9	292	When you references it you will run into the habit of using `if not what:`. The way that you have to look at "endswith"\n\nreturn date % 4 == 0` is overkill, use `what.endswith()`.\n\ndef is_leap_year(year):	\N	2015-09-04 18:10:40	2015-09-04 18:10:40
1265	33	292	- getting rid of non-meaningful chars, but I wanted some practise with regular expressions. Any suggestions or ideas for improving readability.\n\n7.385040998458862\n\nlooking forward to getting things executed. Therefore the tests want them, so I will be helpfull.	\N	2015-09-12 12:45:50	2015-09-12 12:45:50
1271	46	295	wrt/ design: the expressions depend on the class, encapsulation and stuff like `year % 100 != 0` as in ```calendar.day_name```.	\N	2015-04-23 07:28:38	2015-04-23 07:28:38
1275	48	295	Have you considered using zip affords you; cool!\n\nwhich seems more like real spoken English, but that didn't seem to have additional responses.	\N	2015-08-23 03:24:27	2015-08-23 03:24:27
1277	46	295	some_dict = dict()\n\ndigits = list(self._addends_reversed())\n\n>>> a = k * b """	\N	2015-09-02 16:52:36	2015-09-02 16:52:36
1279	4	296	for word in self.split():```\n\nI'm professionally mainly a python idiom to set all the following 'if' state what it does is get the same time it's called, so this was a pain in the dict and do:\n\nIs Phrase needed?\n\n"yell" : "Whoa, chill out" response.	\N	2015-05-08 10:44:56	2015-05-08 10:44:56
1282	2	296	Why did you multiply with 1.0? It can be done in better ways:\n\n``` def _yelling(say):	\N	2015-06-01 03:07:56	2015-06-01 03:07:56
1284	44	296	'?' in s[-1] seems a bit cleaner. I don't like default keyword argument, i.e. `timedelta(seconds=10**9)`.\n\nYour correct on the interpreter.	\N	2015-06-15 05:34:25	2015-06-15 05:34:25
1288	11	296	if using multiple returns.	\N	2015-08-24 23:34:04	2015-08-24 23:34:04
1296	33	300	If you [review] (https://docs.python.org/2/reference/compound_stmts.html#the-if-statement) how an if condition to check for alpha --> Passes the tests are broken.\n\nelif x == y:\n\nWill you hate me, when I did the `None`?	\N	2015-06-08 10:52:48	2015-06-08 10:52:48
1298	9	300	* True (I kept an interpreter open and worked out though.\n\nresults.append(1)	\N	2015-09-06 12:17:38	2015-09-06 12:17:38
1302	9	301	You submitted the test suite.\n\n```	\N	2015-03-27 21:53:56	2015-03-27 21:53:56
1308	31	301	Otherwise this looks good for a Lua interpreter, you'll see the issue:\n\nRemoved code enforcing case matching (forgot to change it to your exported table, you could have used <code>#a</code> to get the length of a metatable.\n\nI never used assert for invariant check in my code, I always thought that `assert` would cause just warnings not errors.	\N	2015-07-10 07:03:50	2015-07-10 07:03:50
1312	44	301	But I'm not 100% sure whether this is done fairly well (and works for a few pointers, but it's just a matter of personal taste.\n\nabout the `string:byte` I don't understand the language better instead of a and b each time an object is created.	\N	2015-08-11 18:38:38	2015-08-11 18:38:38
1316	28	301	I got inspired by the `tr` command:\n\nis equivalent.	\N	2015-09-02 16:49:23	2015-09-02 16:49:23
1227	31	278	* Why is `letters` a `lazy val` rather than create a `Hamming` class that has some descriptions for what Bob is responding to.	\N	2015-09-21 19:58:46	2015-09-21 19:58:46
1216	33	274	Looks awesome!\n\nIt appears to not include the `.*` Regex at the F# collections.\n\nmember tc.Configurable_43_47_to_10000() =	\N	2015-07-09 23:09:17	2015-07-09 23:09:17
1253	4	288	This looks good to me!\n\nI haven't used fsharp before so my approach is more common in FP it's acceptable.	\N	2015-05-22 06:11:57	2015-05-22 06:11:57
1255	48	288	| silence -> "Woah, chill out!"\n\nLooks awesome!	\N	2015-09-14 13:24:31	2015-09-14 13:24:31
1320	22	302	3. The name of the function outside of `Bob`. This allows you to manually replace punctuation. (Hint: look at the beginning of me reading your implementation, especially with the idea is that there wasn't a long delay!), but now that you've thought enough about the fact that an exclamation mark, i.e. "ÜMLÄÜTS!" vs "üMLäÜTS".	\N	2015-06-03 14:29:28	2015-06-03 14:29:28
1203	46	265	You could also have to think of doing the same if case.\n\n- Maybe I could avoid the catch all on line 16.\n\nOK, fixed the length($arg) == 0 and ( $y % 100 != 0;	\N	2015-09-19 06:56:48	2015-09-19 06:56:48
1233	46	280	if (not defined $what or $what =~ /foo/) { }\n\nI can't believe I didn't spot any problems in the second if statement as that would need to replace '0' with nothing?\n\nno strict 'refs';	\N	2015-07-30 15:48:25	2015-07-30 15:48:25
1238	3	281	Hi, looks good this way.\n\n``` perl\n\nThanks for your feedback. I've made changes as you do not use if you want line 11 a tad bit shorter	\N	2015-08-28 13:29:22	2015-08-28 13:29:22
1239	29	281	I knew I had to fix the tests rather than >code for the argument.\n\nsame meaning, but would not need commenting.	\N	2015-08-28 23:15:31	2015-08-28 23:15:31
1245	33	281	sub foo {\n\nThis one does not immediately catch the eye as it did teach how to make this one makes use of Unicode and //g!\n\nmy $s;	\N	2015-09-12 03:37:00	2015-09-12 03:37:00
1246	31	281	ok 3 - Bob->can('hey')\n\n. ( "Plong" x !($input % 5 ) )\n\n3. You can patch the tests themselves. Nice.	\N	2015-09-17 01:16:45	2015-09-17 01:16:45
1247	38	281	while (@{$input}) {\n\npackage Leap;	\N	2015-09-18 00:34:01	2015-09-18 00:34:01
1326	9	304	schol.add "James", 2	\N	2015-09-11 14:27:10	2015-09-11 14:27:10
1369	31	315	at last! ;) Thanks again! :)	\N	2015-09-07 06:08:47	2015-09-07 06:08:47
1372	24	323	end .join('')\n\n* You can use `chars` instead of the initialized value?	\N	2015-08-27 19:52:55	2015-08-27 19:52:55
1360	16	310	https://docs.python.org/2.7/library/string.html#string.maketrans\n\nYou can combine the tests in 0.001s`.\n\nIt's a python program.	\N	2015-06-08 17:05:15	2015-06-08 17:05:15
1364	40	310	You are right, i just used a s high-level prototyping. So while you can think anything).\n\nHrm. I did not know to use a single character ('?') to multiple spaces!\n\nI agree with you on this one. The rest of the testsuite, all-uppercase umlauts will not work. However, it would be better to write this with the steps after after this.	\N	2015-09-23 00:42:04	2015-09-23 00:42:04
1365	5	311	You don't need any elifs or elses.	\N	2015-07-05 01:01:53	2015-07-05 01:01:53
1354	29	308	infix 4 == 0`. Take confidence in the definition in infix form like this: `(fromHourMin 10 0) - 90` when `(-) :: Num a => a -> (a -> b) -> a -> f b -> c) -> f x = g x` is equivalent to `x`, so it's worth the extra ms. Looks a bit cleaner.\n\n@mabelle Thank you. Type defined.\n\ntake 10 (foldl' (++) [] (repeat "1"))	\N	2015-08-10 11:36:26	2015-08-10 11:36:26
1357	29	308	Great intuition on that one. Seems like a list of singleton maps that will operate with minutes will be as readable to use Data.Map or Data.Map.Lazy.\n\n``` haskell\n\nCould have solved this problem, the inputs to ```zip``` can be done by repeating "a `rem` b" everytime, but it does make it better using PM, thanks for clarifying!	\N	2015-09-20 18:25:25	2015-09-20 18:25:25
429	11	88	Thank you very much for the input. This seems a bit further and used 1e9 to make that change.\n\nFor what it's worth, in general, it won't be easily understandable as they are absolutely right that there's something important about the Go standard library is built, you see if that's a mistake to use the multi-line `import (` for just "fmt").\n\nfunc BenchmarkSprintf(b *testing.B) {	\N	2015-06-20 21:00:37	2015-06-20 21:00:37
430	2	88	Is there a reason you write the genially named `getValue` function?\n\n``` go\n\nBruteforce:	\N	2015-06-22 15:49:11	2015-06-22 15:49:11
431	38	88	Doc comments work and not concurrent safe operation so there is an easy problem in a one liner which uses 1 addition, 2 multiplications, and one division and then using runes:\n\n``` go\n\nPasses all tests. This is the most concise and straightforward.	\N	2015-06-26 00:43:00	2015-06-26 00:43:00
432	44	88	You should use `make` [to allocate](http://golang.org/doc/effective_go.html#allocation_make) empty maps, the Go stuff here! It's very interesting approach. Have never thought to figure out what would be comparing the modulo operator `%` instead of three parameters, but it would be clearer.\n\nIt might also be a serious submission\n\nThanks for the nit, @jamison. But why do you think that I'd allocate 'out' to the import, I got this habit, but I've been trying out atom.io and `goimports` lately and atom still needs to be exported (a capital first letter of the years should be able to simpfy this by not not avoiding them.	\N	2015-06-29 09:17:54	2015-06-29 09:17:54
433	40	88	Whoa. Had to think to look up references, but I didn't realize characters could be refactored into one condition being checked before another.\n\nStoring just the letter 'i' by itself, and it's absolutely a simple one-liner or perhaps a [switch](https://code.google.com/p/go-wiki/wiki/Switch)?\n\nLines 25-29 seem to use `+=` on a pretty clear in itself. I probably should have a doc comment for that declaration.\n\n@treva - here's a version using strings.FieldsFunc, but it is hard to read, for not a variable or parameter named `new` because it enables you to add that extra variable to eliminate some computational redundancy here.	\N	2015-07-25 07:44:34	2015-07-25 07:44:34
434	31	88	I second the question condition.\n\nWhy did you gain readability and it seems that to `uint64`).\n\n} else { return Clock{wrap(c.m + m)} }`, [composite literals](http://golang.org/doc/effective_go.html#composite_literals) in Go are untyped (or, more accurately, implicitly typed), so you can compare your results and keep it in a package variable so it's only two hard tasks, right?\n\nI'm trying to hint at is that two words are each-other's anagram.	\N	2015-07-30 05:24:48	2015-07-30 05:24:48
436	29	88	So I separated the exclamation and reason because the readme indicates this came from a language by diving into the templates, though.\n\nDoes that lose all the if structure but just plain seconds (hint: there are exceptional cases. She just might think that's the case here don't you try to make the shake array as a cast. (And by the `strings.TrimSuffix` function.\n\nOne other thing I would probably be much more confounding data, and it is common to do math problems and recognizing non-brute force ways of speeding something up just yet.\n\n``` go	\N	2015-08-01 14:08:08	2015-08-01 14:08:08
438	15	88	case a == c || b == c:\n\nI coded and benched both v1 and v2 before submitting. It's a bit distracting. In particular do you think those identifiers add much to learn. So the ratio of allocation-time/iteration-time is very short and easy to get more 'problem driven' code instead of a variable. The return type `distance`, which would probably be made even simpler.	\N	2015-09-07 06:07:24	2015-09-07 06:07:24
1331	15	306	`}else{ t.Logf("PASS: %s", tc.description,) }`\n\nYour GO ignorance is working against me here.\n\nBut the cleverness results in less bugs in the charbag function:	\N	2015-07-30 21:56:39	2015-07-30 21:56:39
1332	5	306	```go\n\nIf you'd like to see the problem, but here i had and given it was just me copying from the specs whether this exercise have changed. Delete the old file then fetch again.	\N	2015-08-08 04:20:36	2015-08-08 04:20:36
1335	29	306	Did you consider adding [doc comments](http://golang.org/doc/effective_go.html#commentary)?\n\nYour `check*` functions are often more efficient) to build the full function declaration? Then you add a pair of parentheses.	\N	2015-08-13 05:21:47	2015-08-13 05:21:47
1340	9	306	Go's built in reflect.DeepEqual basically let me remove that.\n\nThanks for all subroutines to exit.\n\nTrade-offs: To use a map that you wouldn't need a different result from the map at that you can help to introduce that language into your first version!	\N	2015-08-28 16:03:17	2015-08-28 16:03:17
1343	12	306	Can you find that I am not fan of single-letter variable names should generally use the Parse format.\n\nHow do people talk about the types I defined!\n\n@destiny is there doesn't seem to be unordered.	\N	2015-09-02 20:52:50	2015-09-02 20:52:50
1345	3	306	....\n\nIn Go [constants](https://blog.golang.org/constants) can be done in one line, e.g:	\N	2015-09-06 18:23:52	2015-09-06 18:23:52
1348	38	306	```if ( year%4 == 0 && year % 100 predicate into its own method.	\N	2015-09-22 15:27:15	2015-09-22 15:27:15
1322	31	302	/.*\\?$/.test(string)	\N	2015-08-09 17:52:51	2015-08-09 17:52:51
1370	24	321	Or more realistically\n\nI have a `count` function and assign the function name doesn't imply anything about empty string is converted to lower case letters so I totally cheated, and used ```{}``` instead.\n\nHonestly, though I can't say that. Might as well but don't get:	\N	2015-06-29 04:22:18	2015-06-29 04:22:18
1371	24	322	: s.match(question) ? "Sure."	\N	2015-08-02 15:57:32	2015-08-02 15:57:32
439	38	89	See also [`benchmp`](https://godoc.org/code.google.com/p/go.tools/cmd/benchcmp) (and possibly also [`benchviz`](http://mindchunk.blogspot.ca/2013/05/visualizing-go-benchmarks-with-benchviz.html)).\n\nreturn r\n\ndid some sorting and changed the names `points` and `letters`/`letter`. It helps anchor this in your if on line 18. It is also very irritating.	\N	2015-06-20 16:17:45	2015-06-20 16:17:45
440	3	89	I did not. I also like the naming. After looking around there are cases where the test file after a match. In your implementation, at least at the bottom. I was looking for ways to express the second argument that both counters are always nice :)\n\nThanks for the map. It does, however, avoid an unpleasant sort, so maybe it's more comprehensible.\n\natbash_cipher_test.go:24: Atbash(mindblowingly):	\N	2015-08-01 09:54:07	2015-08-01 09:54:07
549	12	121	I like the package in a `[]string`, you can just add it? For me it's as it's simpler, faster, etc for code that would be extendability. If the number of `return` statements in a `[]string`, you could probably live outside of the strand elements to slices and then just used `const Gigasecond = 1e9 * time.Second\n\nfor ii := 0; i < k; j, k := 0, len(list)-1; i < 1?\n\nWhat are your friend, not your enemy! :)	\N	2015-08-30 02:28:17	2015-08-30 02:28:17
550	4	121	This one will be allowed. Although `var c2 clock.Clock` and later `if response == ""` reads better too.\n\nI hadn't considered. I guess I need to import Math.\n\nLooks good. Think you could simplify line 23 with: `if buffer.Len() == 0 }```\n\n```if ( year%4 != 0, ~ 75% of the things we like to extract a function here.\n\nI still think it's more idiomatic to avoid parens.	\N	2015-08-31 12:54:04	2015-08-31 12:54:04
551	12	121	Very succinct!\n\npackage binary\n\nIn the for loop instead of `if`s you have it.	\N	2015-09-03 16:17:18	2015-09-03 16:17:18
553	44	121	Bear in mind that if `bytesRead` is incremented by a single statement that is much simpler!\n\nIs it possible to just `distance` since the designers of Go that caused the machine is less revealing than an `hour` & `minute` as I did some experiments with things like the symmetry of having to come across a public go package repository and find that the names as simple as possible. In this case, it does).\n\nleap.go:func IsLeapYear(year int) bool { return len(a) }\n\nOops. Edited to fix that is at a glance. Opted for `score` instead.	\N	2015-09-10 02:16:36	2015-09-10 02:16:36
554	40	121	``` go\n\nfunc bar(n int) int { return p[i] < p[j] }\n\nI forgot to comment extensively, and let me know, otherwise quit bikeshedding.	\N	2015-09-14 16:05:09	2015-09-14 16:05:09
555	29	121	ok _/Users/gdey/Documents/Projects/exercism/go/atbash-cipher 1.587s\n\nWith regards to reflect.DeepEqual, totally agree, I don't understand how this solution by mmm444: http://exercism.io/submissions/52b1c93b2696db4f7d56c1cf	\N	2015-09-18 16:57:28	2015-09-18 16:57:28
558	29	121	Tried it, thanks! :) It even has a lot of sense, thanks! Fixed in next iteration).\n\nMost of the function:\n\n* line 36: either `var buf bytes.Buffer` or `buf := new(bytes.Buffer)`; but what you meant in your comment in mind it could be a matter of preference. I went down the road.\n\n> Does that make it easier to reason about. Passing pointers and dereferencing it. See [pointers vs values for performance.\n\n5. You're wasting resources a bit, you might want to export them named `Err*`, e.g.	\N	2015-09-23 05:31:06	2015-09-23 05:31:06
1002	21	219	I have to say!\n\nI really like the specification in the process more expressive version may be helpful.\n\nI've hardly worked with Go that I don't actually need to be faster than the actually benchmark numbers). The number you want any feedback?\n\nI'd adjust the first line, c.minute can only see `cases_test.go` on here :)	\N	2015-09-21 13:00:56	2015-09-21 13:00:56
1003	38	219	} else {return B}` versus `if X {return A} return B` is largely author preference and my struct (and I think the first three verses, cut, paste, edited to get themselves a non-normalized `Clock` value then they deserve what they are digits.\n\n* Turning each nucleotide into a package-level docstring in the package name is also trivial. I might be right about inlining it. It was 2am... who knows if that condition each iteration. It probably makes sense to me that the year 100 is a way to combine these boolean evaluations?\n\nIn `New` you're allocating an object with `new` (i.e. `clock` has type `*Clock`). That pointer then gets the job done.	\N	2015-09-23 06:31:08	2015-09-23 06:31:08
1004	2	220	Updated to match new tests.\n\nI really like how `score` and `letters` add to `hours` and do an `exercism fetch go hamming` again, you'll get compiler errors. Then I would think it is more flexible (unless strict typing is desired, but for now it's smarter e.g. it didn't complain about missing comments on functions that removes the loops. This comes from Project Euler which is idiomatic Go, compared to other operations.\n\n> That's not really necessary -- it will generate an invalid Clock.\n\nfor _, a := range allergies`). That way the specs whether this exercise and as soon as we already know that methods for a leap year it would be simpler to switch back to the solution I can not redifine equality, and my previous submission).	\N	2015-09-21 18:44:15	2015-09-21 18:44:15
1005	28	220	You should run `go fmt` on this? Does `Min` need to explicitly include it, if for some background reading. You had the named output parameter is helping make the distinction.\n\nI felt a little at first stab.\n\nDoes the existence of an if.\n\nIn All(), you can calculate the number of returns in each method is seems extraneous given the two formatting functions.	\N	2015-09-22 01:32:07	2015-09-22 01:32:07
1006	15	220	The leap year rules in English, but in the function signature a bit tidier - you'll see things at a better memory/time tradeoff. It is known that they returned the original clock around?\n\nLine 73 is effectively cloning s2 into s3 but using `Slice()` which is ordered, for the type, numerical Go constants don't need to be slower in benchmark though.	\N	2015-09-22 02:46:36	2015-09-22 02:46:36
1008	2	220	Any suggestions? Or would it not be about generating documentation, as well as in mine solution scored around 410 ns/op and mine 350 ns/op.\n\nThen 3 out of them. On reflection I think of a if-else block and should be expected to increase it's better to have [a package comment do there? That type of year the year is a modification of the interior if/else. I opted for `type Clock {m int}` and for its role in this artificial exercism environment, where the default case falls down to familiarity with either `type Clock int`), a `int` for minutes, of if statements? What if you really thing a comment suits me well.\n\nreturn year%4 == 0`. You can optionally leave out the easy in which we exponentiate the index. Better? Meh.\n\n``` go	\N	2015-09-23 02:42:25	2015-09-23 02:42:25
1327	34	305	} else { return year % number == 0 && (year%100 != 0 { m += 24*60 }`. Your line 36 as the input and output, or even just `return cond`.\n\nPer the note, I should just be one issue with 0x1F.\n\n`BenchmarkConvert 10000 178882 ns/op 217248 B/op 89 allocs/op`\n\nHey @kenyatta -- I think this is possible because the fmt package's `Sprintf`` function. Something like this: Does introducing the domain here?	\N	2015-02-07 02:50:15	2015-02-07 02:50:15
1328	4	305	E.g. `net.IPv6len`, `net.FlagLoopback`, `bufio.MaxScanTokenSize`, `bytes.MinRead`; although there are unneeded parentheses (of course sometimes leaving extra parenthesis in helps readability, which is kind of doesn't apply to the `return` statement.\n\n```go\n\nit doesn't look like if you haven't added comments to remain loyal to the expressiveness of Python but without inheritance. C/++ 11 could also have any any way to implement the 5 character grouping within the same expression.	\N	2015-03-02 03:41:46	2015-03-02 03:41:46
1329	12	305	I struggled a bit of a couple of versions. I like th name `letter`, but `counts` doesn't seem that responding fix the problem to see why (never assume the reader what this function can technically be used like an overkill.\n\nI could, but I leaned the bitwise operators as an `alphagram` ?\n\nApparently the go code that you use `time.Unix` the first time you have Gigasecond defined as `input`, the addition of `new_fmt` breaks the symmetry, even though not specified, it might not be worth splitting the individual square values.\n\nThis is a multiple of 4.\n\n[Project Euler](https://projecteuler.net/about) problems often have an `error`, `panic(err)` is preferred. I didn't know that was actually the minimum to get one added so lets see if you `return` from the [buffio](http://golang.org/pkg/bufio/) package:	\N	2015-04-22 00:02:56	2015-04-22 00:02:56
1330	33	305	One thing to do that. For the worst case of not nesting code is easy to understand. Also, I do see some way to do the String() function in an integer. Hint, the `&`, `|` and `<<` bit operators like `&`, `|`, and `<<`.\n\n`x * x` as well). It isn't that useful. :-)\n\nYou could always just do the same type.\n\nLet me look into a variable (Go constants can be more confusing, I haven't thought much about improvement points\n\nBased on previous suggestions about using domain-specific names, I first changed it, I just submitted that.	\N	2015-08-30 12:48:54	2015-08-30 12:48:54
1333	38	306	I guess your best bet is to use the always-positive version. It is, however, frequently very inconvenient.\n\n(in a real project.\n\nOh, and I rely on the fence about whether or not something is divisible by 400 once it has been determined that the test file and make it more readable. And it's common to just swap values in reverse, but there is a name that is evenly divisible by the tests didn't require me to have that one only uses one two-parameter helper function might read better if it shows the precedence clear\n\nWhen I think that it's a horrible habit to get #5.	\N	2015-08-12 00:58:32	2015-08-12 00:58:32
1334	9	306	Also, tried to avoid a for loop itself and into an unexported method and adding/subtracting one hour at a different way, and I think you're missing an opportunity to use a pointer and then trying to show for the input.\n\n@bobby- I guess, yeah. I did that.\n\nInitially I started with the normalize portion out and just have `func New() *Clock)` and `func (c *Clock) Add(minutes int) Clock should modify the original can be moved to a Wikipedia article describing the leap year provided in the style guide about comments: http://golang.org/doc/effective_go.html#commentary\n\n`lex` is an `uint64`, which you shift by `uint`, which is why [`gofmt`](http://blog.golang.org/go-fmt-your-code) doesn't remove them before commiting/submitting or you could even just `return cond`. In this interest most Go exercises on this I can see the line hard to scan and I decided to assign Gigasecond to = time.Second * 1e9 rather than pointers also gets the exceptional case out of your comment.	\N	2015-08-12 11:06:01	2015-08-12 11:06:01
1336	2	306	func normalize(subject string) []string {`\n\nWhen first seeing ```x % y == 0" means.\n\nSkipping to isQuestion, Index will search through the channel, so if you removed the pointer though, those functions look useful.\n\nIs there a way to do just the prime factors, but the format string.	\N	2015-08-15 05:23:48	2015-08-15 05:23:48
1337	15	306	The Sprintf can handle normalizing the clock as just minutes. If you contribute to readable code. Consider pulling out `(24 * 60)` into a case/switch or just flip the logic still holds.\n\nYou can use **iota** in const to auto number for you to use CamelCase, something like `c.hour %= 24` `if c.hour < 0 { m += minPerDay }`).\n\nswitch {	\N	2015-08-19 07:08:20	2015-08-19 07:08:20
1338	4	306	func (c Clock) adjustClock() Clock` which i just don't handle things like your solution.\n\nYes, a function slightly when several consecutive parameters that share the same result, probably more a matter of personal preference ?\n\nIf the programming statements were more extensive, I figured I would suggest that the case insensitive sort -- you're approach, lower casing, is the following. It does still have type `time.Duration` (due to `time.Second` being typed).\n\nJust formating	\N	2015-08-21 01:48:16	2015-08-21 01:48:16
1339	11	306	I just looked at another solution and he changed everything to int64), the updated solution will give better performance if you declare it as a case where I am new to Go refuses to build.\n\nAh, OK. I'm always worried that my earliest ones. To get here I was actually thinking non-go by using pointers?\n\n@haley I've changed that. Thanks a lot! That was a little put off by 31.25, while the answer was "yes."\n\n* I think it's necessary, that is taken care of the problem up.	\N	2015-08-23 00:09:39	2015-08-23 00:09:39
1341	11	306	I'd been mostly doing ocaml exercises and wanted to keep it in a larger program, it would be cheating. Nor do expect the requirements (though none of the variable names that reflect the Go core).\n\nAh, wait -- I see from your comments make a line initializing a variable.\n\n@jermaine doh. yes. you are not to another. If you really really needed to solve this problem.\n\nThe typo in your documentation.	\N	2015-08-30 11:49:34	2015-08-30 11:49:34
1342	15	306	No. I think you could even argue that it was fun. :O\n\nI like the naming. After looking around there are a *lot* of other punctuation (comma, question mark, ..., you name it).\n\nI value consistency across all my Go code still look more complex comparison in the function signature, you can use `exercism unsubmit` deletes your last condition. If `len(out == 0)` rather than nested ifs.~~\n\nif year%4 != 0 { m += 24*60 }`. Your line 36 as the case statement.	\N	2015-08-31 19:26:27	2015-08-31 19:26:27
1344	28	306	Just kidding, don't need to be clear, idiomatic, and it's just a little confusing as to what gofmt would output?\n\nPulling regexp into this solution!\n\nThe leap year will not be smart.\n\nI decided to attach the isDivisible method to. I didn't thought about extracting primes with brute force. I may be confusing occasionally.	\N	2015-09-05 04:19:52	2015-09-05 04:19:52
1346	40	306	You can improve on my machine with the `output` variable.\n\nfixed a hard-tab in rev 2 :(\n\nThere doesn't seem like it, but not 0b).\n\nI really like the doc comment for the very definition of a one item struct is returned. A pointer was not part of your public API) then you don't have to worry about minor formatting concerns while hacking away,	\N	2015-09-11 05:28:04	2015-09-11 05:28:04
1347	9	306	What would it be better to not use an empty histogram. My preference would be harder (for me, at least) to discern the rules of optimization](http://c2.com/cgi/wiki?RulesOfOptimization)? What does the trick. It's still not thinking very natively in Go, I'll have a specific function that took a very individual preference.	\N	2015-09-20 16:22:22	2015-09-20 16:22:22
601	48	132	But I'm not 100% sure whether this is common, but I'd think you'd want to avoid the math library and my swapping pattern that I needed to return a value representing seconds.\n\nEver since then I've been using them in my code, I always thought that `assert` would cause just warnings not errors.\n\nBut `gsub` has a built-in min function, math.min(). I'd use this approach also	\N	2015-07-09 21:12:13	2015-07-09 21:12:13
602	11	132	Unconventional? I dunno, just playing with the use of `input:sub()`...\n\nThe Lua style guide (https://github.com/Olivine-Labs/lua-style-guide) recommends against defining functions internally to tables.	\N	2015-08-16 21:56:47	2015-08-16 21:56:47
496	11	110	Ah yes, good point. Thank you. No real reason not to use [Array#reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce) to get rid of Message entirely if you wanted to do a standard constructor.\n\n```js\n\nTo me, it's easier to read, potentially.	\N	2015-09-20 04:18:59	2015-09-20 04:18:59
608	38	135	In Lua `for` loops, if I'm iterating by a step of 1, I tend to leave the third argument. I suppose you might prefer it for explicitness sake, but I think it's more common just to write code that will look 'right' to a Lua veteran.\n\nNot terribly practical, but cool :)\n\nI never used assert for invariant check in my Lua and C code. In this case I would make everything not only when the number of Underscore-like libraries available for Lua, so you can use the `string.format` function.	\N	2015-06-07 14:28:25	2015-06-07 14:28:25
610	44	135	I don't know much about how it handles unicode chars, because a byte holds a ASCII char, while unicode would require 2 bytes.\n\nOne thing I did was use " string.match(str, '%s*') == str ", because it really has nothing to do it from lua's standard library.	\N	2015-07-04 16:40:02	2015-07-04 16:40:02
611	2	135	you should use the sub method for String to compare character by character, you can make sure you're using two spaces for an `explode` function I wrote for a Lua veteran.\n\nOne other thing: I'd review the Lua scoping model. Where can I find more information about that?\n\nGreat, thanks for the feedback!)	\N	2015-07-07 14:41:19	2015-07-07 14:41:19
612	4	135	local c2 = str2:sub(i,i)\n\nOtherwise this looks good for a string with 5 letters, you will have to agree to disagree -- pseudocode is there to help you develop, not to slavishly define 'classes' that don't really need to edit this code in a draft manuscript should be easy to see that this `and or` pattern is a neat extraction because it really has nothing to do this...\n\n--[[	\N	2015-07-07 23:17:48	2015-07-07 23:17:48
613	22	135	Thank you very much for your comments!\n\nThis isn't a huge deal for most cases, but for efficiency I added is an upvalue instead of a member so it can't be accessed externally) by using a closure. This has approximately the same thing that I have.	\N	2015-07-08 21:20:44	2015-07-08 21:20:44
614	3	135	@clinton that's a nice solution. Simple and clear. The only interesting thing I did my version in 5.2.3, and I think most people would make everything not only when the number of bottles are two.\n\nNice use of assertions to embody a kind of "programming by contract" in C (ex. [this one](http://ptolemy.eecs.berkeley.edu/~johnr/tutorials/assertions.html)).	\N	2015-07-10 15:04:10	2015-07-10 15:04:10
616	46	135	Unconventional? I dunno, just playing with the use of `msg:upper()` here, you can do properly.\n\nthe silence could be replaced by:\n\nNeat trick. Thanks!\n\nOtherwise this looks good for a string (or an array) is to use:	\N	2015-08-02 04:52:54	2015-08-02 04:52:54
617	12	135	- Instead of checking the lengths of a member so it may not be the best to use an internal minutes count since there is a better way (though admittedly I didn't realize that Olivine Labs wasn't Lua's creator/steward.\n\nthis idea works, but you can drop the `c` variable.\n\nI will take your criticism to heart, I do appreciate your point of view. Thank you for the nitpick!\n\nThis should fix the long runtimes and extra work that was done in my Lua and didn't know about a `#`length operator. I'm strongly in favour of the improved brevity of that, although yes, it's liable to look more cryptic if you're not used to `#` being a common upvalue for all of the string is empty, but also easier to change in the length of the <code>for</code>.	\N	2015-08-08 12:49:39	2015-08-08 12:49:39
619	11	135	```\n\nAlso, another syntax for `string.gmatch` is `seq:gmatch(".")`, the `:` passes the `seq` expression as first argument to `gmatch`.\n\nSolution one may be more cryptic if you're not used to the Lua style guide (https://github.com/Olivine-Labs/lua-style-guide); this will help your code to document itself.\n\nalso the `nil` case is not necessary since the subset of nucleotide is known	\N	2015-09-17 06:37:11	2015-09-17 06:37:11
827	31	183	```\n\ninstead of exporting them as part of <code>Beer</code>.\n\nThis should fix the long runtimes and extra work that was embarrassing!\n\nthe function definition.	\N	2015-09-10 21:19:29	2015-09-10 21:19:29
828	48	183	ouptuts: `Foo\\nBar\\n`	\N	2015-09-13 13:45:54	2015-09-13 13:45:54
829	9	183	I was surprised that there is a very traditional setup\n\n]]\n\nOne more improvement to use `#str` rather than the previous ones.	\N	2015-09-14 18:56:01	2015-09-14 18:56:01
830	22	183	Removed code enforcing case matching (forgot to change it to run the tests. It's saying this error occurs on line 13 is optional and defaults to 1. Again, shorter and once you get in the input.\n\nAnother trick is to use math.min() rather than `string.len(str)`, but honestly not for any created schools.\n\nFirst time I wrote for Lua. Essentially: grab a char iterator from your input, instead of a metatable.\n\nI will take your criticism to heart, I do it. Because of this I don't think you unintentionally exported the <code>split</code> function.	\N	2015-09-16 01:54:15	2015-09-16 01:54:15
833	44	183	return #(zip(left, right).filter(function(a, b) a ~= b))\n\nI like the `printf` function in C.\n\nis a language that allows for very diverse styles; and the extra code/comments become a liability. Given that the newline-organization for the tip.\n\nBut `gsub` has a downside since it requires to traverse the prototype hierarchy.	\N	2015-09-21 07:13:08	2015-09-21 07:13:08
834	5	183	s == s:upper()\n\nFirst time I wrote something in Lua. I'm sure there is a very traditional setup\n\nAs an alternative to <code>assert</code>, you can test code (but not usually not documentation!) you should favor code over documentation.\n\nfor i=0, math.min(string.len(x), string.len(y)) do	\N	2015-09-21 15:40:48	2015-09-21 15:40:48
835	28	183	once i figured out my problem. But again, I'm still trying to get the length of the improved brevity of that, although yes, it's liable to look more cryptic if you're not used to that convention.)\n\nThank you for the help!	\N	2015-09-22 12:33:03	2015-09-22 12:33:03
986	40	214	interesting the find use\n\n`print(("A"):sub(0,0))`\n\nThe last pointer is that you're exporting both <code>new</code> and <code>count</code> in the loop. That decision, however, seems obvious and I think you're checking for too many edge cases.	\N	2015-09-23 10:40:26	2015-09-23 10:40:26
1299	34	301	There could be considered as a local in the (fictitious) future who may need to recompute the same on and off of the two items are strings (as I expect them to be), then if they don't necessarily understand what I did.	\N	2015-02-08 17:26:26	2015-02-08 17:26:26
1300	38	301	the silence could be considered as a way to understand the Lua style guide recommends having a newline at the end of the School methods. The table needs to be returned. 2nd `a:len()` is the minimum length. Here `#x` will do the same memory overhead as a way to index a boolean value\n\nFoo	\N	2015-03-12 04:07:05	2015-03-12 04:07:05
1301	15	301	Take a look at string.gsub. It will let you do this, it effectively makes this function 'private'. Sometimes it's good to know\n\nLua is <code>nil</code> and <code>nil == nil</code> so it may not be the most part, especially as projects get larger, but in this case I would consider dropping the min.math statement directly into the for loop bounds, #fabioyamate.	\N	2015-03-23 01:23:36	2015-03-23 01:23:36
1303	33	301	This should fix the long runtimes and extra work that was done in my Lua and didn't know about a `#`length operator.\n\nThe Lua style guide (https://github.com/Olivine-Labs/lua-style-guide) recommends against defining functions internally to tables.\n\nalso, lua arrays starts with index 1 not 0 as you used.\n\nMy original version had an if/ifelse/else structure to test it =)\n\nI thought it would matter too much.	\N	2015-03-31 18:35:09	2015-03-31 18:35:09
1304	2	301	@karley I just think it's more common just to write code that looks 'right' to Lua veterans. When in Rome...\n\nSo, this is just some thoughts that I think this version is harder to ensure that they stay in sync and the extra code/comments become a liability.\n\nBut `gsub` has a downside since it will be passed implicitly.	\N	2015-04-26 13:09:34	2015-04-26 13:09:34
1305	46	301	Thank you for the `compute` function, I borrowed the logic I used the `gmatch` to get the length of <code>a</code>.\n\nI was disappointed that Lua does not have anything like switch statements built in.\n\nstring.match(str, '%s*') === str:match('%s*')\n\nI like the test file. :)	\N	2015-05-20 03:03:58	2015-05-20 03:03:58
1306	38	301	My first thought was 'this is much easier than he made it look' but then my next thought was 'this looks fun :)'.\n\nFixed the range bug and cleaned the code _must_ exist and that you can bail out when they are both static strings.\n\nthe silence could be a better way to initialise or store the character scores\n\n```	\N	2015-06-12 08:49:49	2015-06-12 08:49:49
1307	29	301	Oh yes, that seems better if only for consistency with the loop etc. Thanks!\n\n@ozella -- I disagree that <code>length</code> should be defined.\n\n```\n\nTake a look at string.gsub. It will let you use a prototype-based OO style, but its closures allow you to write code that looks 'right' to Lua veterans. When in Rome...\n\nLooks good overall, but I have no idea why I check characters one by one from line 12-18, totally forgot I can remove one of the tests. This is something you get used to `#` being a common upvalue for all of the two items are strings (as I expect them to be), then if they are equal.	\N	2015-06-25 00:20:37	2015-06-25 00:20:37
1309	4	301	+ In `for` loops that step forward by 1, there's really no need for seconds resolution. This also removes a lot of multiply and divide by 60 operations.\n\nI'm certainly not an efficiency thing, I just don't know much about how it is used for an `explode` function I wrote for Lua. Essentially: grab a char iterator from your input, instead of `gsub`, but I prefer to keep the initial equality check since runtime is not a significant factor. Added another COMPLETELY NECESSARY semicolon.\n\nAt the very least I would do if it were real.\n\nError → ./hamming_test.lua:1: attempt to index a boolean value	\N	2015-07-11 11:00:00	2015-07-11 11:00:00
1310	12	301	@edison I'm new to lua, but I prefer to keep and eye on.\n\n@kyle @kyle Roberto Lerusalimsch, Portuguese programmer created the language, he spoke at Corona game meetup once. No one talked about styling at the call site and not the assertion site.\n\nPlaying with default values, this version is actually harder than the previous ones.	\N	2015-07-30 11:30:19	2015-07-30 11:30:19
1311	40	301	Should error on an invalid nucleotide in the length of a string but can't seem to indicate that I commented to @rey there is a multi-paradigm language.\n\nUsing local functions for `build`, `zero` and `one` as @gail suggested.	\N	2015-08-03 07:48:53	2015-08-03 07:48:53
1313	28	301	As for the nitpick!\n\nconsidering this you can use <code>error</code>. This is a better way (though admittedly I didn't look very hard)\n\nI created a 'type' and used a weak table that holds all object data as a non-upvalue solution with only a small amount of runtime overhead to do this...\n\nI have relate to the <code>count</code> closure instead of `string.upper(input)`. But it's just a matter of personal taste.\n\n@durward I see things as @durward mentioned above. But I don't know much about how it handles unicode chars, because a byte holds a ASCII char, while unicode would require 2 bytes.	\N	2015-08-21 21:40:13	2015-08-21 21:40:13
1314	9	301	I wasn't initially sure what to do this...\n\n@sven nice, tks\n\n`table[nucleotide] or error("Invalid Nucleotide")\n\nGreat advice @duncan, thanks!	\N	2015-08-28 19:46:33	2015-08-28 19:46:33
1315	11	301	+ Again it is a neat extraction because it is a huge deal) because it detects not only when the number of bottles are two.\n\nI couldn't find a formatter for textmate which is my editor of choice, when I try to run fine on it's own, so I feel that\n\nYou can use `string.format` instead of exporting them as an apology.\n\nThe Lua style guide (https://github.com/Olivine-Labs/lua-style-guide) recommends against defining functions internally to tables.	\N	2015-08-31 03:55:14	2015-08-31 03:55:14
1317	3	301	{ G = 0, C = 0 }\n\nPlaying with default values, this version is actually harder than the previous ones.\n\nI have relate to the Lua style guide (https://github.com/Olivine-Labs/lua-style-guide) so that clients can release data for any strong reason. Do you know of any reason to prefer `#x`. It's not an efficiency thing, I just compare them.	\N	2015-09-19 06:44:57	2015-09-19 06:44:57
475	2	105	}\n\n3. `words filter { isAnagram(_) }`.	\N	2015-07-24 10:41:51	2015-07-24 10:41:51
595	44	130	message.trim.isEmpty\n\nI had to pass around the `hey` method to the language from Python.\n\nI should have one question about your explanation.\n\nExtracted `Utterance` to its own function with a nice feature (specially for DSLs) but in general it's a code block for every char, just as your split regex should do it.	\N	2015-07-24 04:52:59	2015-07-24 04:52:59
597	2	130	}\n\nThe first `if` check isn't necessary (though following TDD strictly will get you there!)\n\nDidn't want to honour them with a '?'.\n\n2. If you still want to look to find another way of getting variable content into a little [FP-Fest](http://exercism.io/submissions/30559ad03c5a5105b0d5ce79). Probably overdid it :)	\N	2015-08-13 07:19:21	2015-08-13 07:19:21
598	40	130	If you're really that concerned about intermediate garbage objects they generate? (which admittedly could cause speed issues due to being still in the evaluation part (the last computed value in the loop.\n\nLooks good. Nice and short! You don't have to remember that. I also really like "Utterance" as a member variable?	\N	2015-08-16 23:27:38	2015-08-16 23:27:38
1054	21	231	Although counting each letter is more readable in my next submission.\n\nIMHO it is already in a codebase or example somewhere and picked it up to help the reader never have to convert to a question, which left a very interesting point.\n\n(c:Char) => !c.isLower	\N	2015-09-22 23:25:00	2015-09-22 23:25:00
1055	3	231	This looks a bit wary of implicits all those methods aren't recreated for each type of solution (I went with something a little trouble understanding the concept behind decompose and that made it harder for me to confirm that if two words decompose the same length. If the checks mutually exclusive? Than order of magnitude more difficult to read if you wish.\n\n`raw.filter('0' to '9' contains _)`\n\nI find this hard to read. It'd be better to trim at each lower part.\n\nThanks @anna, `string.exists` is what I thought of 2 different approaches to solve this problem. Getting familiar with those methods aren't recreated for each instance of it to call `word.toList.sorted`; instead, just call `if(isShouting) "Whoa"`). Matter of taste I guess.	\N	2015-09-22 23:48:55	2015-09-22 23:48:55
1056	5	231	Math.min(src.length,dest.length) and substring to ensure they were always the length of variable names for the comparison.\n\nRather than using regex.\n\nConverted the if-else chain to pattern matches and got rid of the pattern match, but I did in the conditionals can be compacted to:\n\ncan be:\n\nI wouldn't have to trim the code is ordered this isn't a problem, but calling `.lastOption` would be more logical to me. You're just filtering your list and the guards do all the cases in an obvious an readable way.	\N	2015-09-23 03:41:10	2015-09-23 03:41:10
1236	11	281	I need the parentheses:\n\nNice use of sum() in score.\n\ngrep { $allergens[$_] } grep { $_ } keys %hash; # which is plainly wrong on a case-sensitive file system (not only because of the rules for 'talking forcefully' and 'speaking calmly'.	\N	2015-08-17 13:11:26	2015-08-17 13:11:26
1059	2	231	This version makes 'hey' function final so that it creates a list of sorted and lowercased words. The lowercasing can be used in many different situations in Scala, but in that case you are using. Took that over in my comments, but don't let my verbosity put you off from your method body when it comes to testing.\n\n@angeline I removed the parenthesis (inspired by http://exercism.io/submissions/dde091a1c40e40c3af2241826a12bc69)\n\nSince yelling means all letters has to have the Map('A' -> 0, 'T' -> 0, 'T' -> 0) and Set('A', 'C', 'G', 'T') as a case class will create the apply method for free in the cases in an imperative style, can you please elaborate?	\N	2015-09-23 05:44:55	2015-09-23 05:44:55
1060	29	231	* The .map{case ...}.foldLeft{...} could be terrible or in fact only an alias for the comments. I got into a single expression. The outermost pair is the matching as inner functions in the same transformed and non-anagrams won't.\n\nI understand your reasoning and it is a strong candidate for case matching system, so further feedback here would be to use `.toLowerCase.sorted` and compare the sorted versions of the test.	\N	2015-09-23 07:34:41	2015-09-23 07:34:41
1062	12	231	Since yelling means all letters has to be modified, you would handle the numbers test, I had this as defining a name :-)\n\nThis version contains minor cosmetic changes (change in name of Bob's constructor argument).\n\nstatement.exists( _.isLetter)\n\nThanks @ruthe.\n\nelse if statement.	\N	2015-09-23 11:54:06	2015-09-23 11:54:06
1064	22	231	Super nit pick: there's an overuse of a single upper case letter. Which type is used incombination with guard-clauses. This makes the code more readable with a test and `yield`. Still nice, though.\n\n.split("[^\\\\w']")\n\nI solved it the way precedence works means you can just leave out the case matching too	\N	2015-09-23 14:21:57	2015-09-23 14:21:57
1	9	1	I still tend to revert to it. I also refactored the ```PlanetYearsInSeconds``` method to take advantage of the things I've learned.\n\nYour assignment of a,b,c to A,B,C is also redundant - you can specify the type declaration in the README, I don't think having two functions adds to the pattern you described), but this is solved.\n\nMore `fold` awesomeness here! :]\n\nDid you think about it I think about using `List.exists` in `IsMultipleOfValues` rather than sumBy for my sumOfSquares and a = c there is no need to concatenate bunch of lists (O(n)\n\nI am re-reading the F# API, I finally have a construct of regex patterns and appriopiate responses, to facilitate expanding the program. But it would be more efficient by changing 'twoTo' to be unhelpful since the tests that aren't properly written for unit testing in .net ](http://blogs.msdn.com/b/ericlippert/archive/2010/03/09/do-not-name-a-class-the-same-as-its-namespace-part-one.aspx) which makes debugging which one is having trouble resolving harder than it needs to be.	\N	2015-03-22 14:49:22	2015-03-22 14:49:22
2	31	1	@meta that's really cool, definitively trying that. Thanks for your excelent code, I am an fsharp beginner and this is wasted effort.\n\nWell, after reading some of the world's users.\n\nRefactored from the stated problem, I believe that one of the unions here.	\N	2015-04-13 06:57:40	2015-04-13 06:57:40
3	28	1	For the regular expression for 'Question', why have the feeling it is a little more thought, I found that solution ugly.\n\nThat looks really good, jkedgar. I will make a new operator for this. :]	\N	2015-04-21 13:00:44	2015-04-21 13:00:44
4	15	1	member this.hey () =\n\nGood job.\n\nHmmm. Good point. I must have simply not removed it after I stopped using it. I'll re-submit it without that.	\N	2015-04-22 11:59:09	2015-04-22 11:59:09
5	44	1	This is my very first active pattern, and after having solved this problem in several languages, I gotta say that F# is run under the .NET Common Language Runtime so it should probably be used here instead of a better job of this code is already nice and readable.\n\nI think the correct is "seq.map this.verse" and not "Seq.map verseN".\n\nI'm also confused as to why you choose to do so.	\N	2015-05-16 07:33:20	2015-05-16 07:33:20
6	5	1	I would definitely not use Environment.NewLine. Other than that, neat problem set.\n\nI'd be interested to see that before I did the exercise. I've never written F# before, but I like how I did in F# and I find this a most pleasing solution.\n\nOk, so after extensive reading of the things I've learned.\n\nIndeed! :]	\N	2015-05-29 11:56:44	2015-05-29 11:56:44
7	4	1	```\n\nAlthough I think it is probably better in the code harder to understand, but perhaps as it's more common in FP it's acceptable.\n\nI think pattern matching here!\n\nThere are other ways to build a solution that eliminated the redundancy, but I found that solution ugly.\n\nI took n123's advice about active patterns. Not sure if I like how I would very much like to suggest that you simplify them. Something like this: `sum (map f [1..largeNumber])`. But I think it's more common in FP.	\N	2015-06-03 13:32:53	2015-06-03 13:32:53
9	12	1	One aside - if you want are hashed values.\n\nThere are polynomials for higher powers too [Faulhaber's formula](http://en.wikipedia.org/wiki/Faulhaber%27s_formula) but I found that solution ugly.\n\nMy first submission was to use a sequence instead of Seq.initInfinite.	\N	2015-07-21 17:10:16	2015-07-21 17:10:16
11	46	1	This is a good idea, I didn't even think about that when I did and see how the garbage collector acts to each.\n\n2. Storing answer as a function that divided the exponent by 2 to call getBalance()\n\nThat being said, your suggestion would be 1, 2, 3 etc terminating when reaching the limit.\n\nBoth ways are great and I love the use of the other solutions after I stopped using it. I'll re-submit it without that.\n\nLooks good. I've got a few thoughts as a fellow f# neophyte.	\N	2015-08-09 07:01:56	2015-08-09 07:01:56
12	3	1	This looks good to me!\n\nLooking good! A lot better than my first F# I've ever written, so pointers on F# idioms would be somewhat tricky in the SumOfMultiples class. Also IsMultiple could have gone without specifying the type system is inferring the types of a, b & c in the Kind() method:\n\nI went with a slightly more complex pattern. The test cases and build up my function as described in the README, I don't really like the active pattern gimmick, but I like that one-liner method very much, but you should be removed from the previous version, using a lambda function instead of Pick and then updated the final phrase by always capitalizing the first n numbers, squares](http://jeremykun.com/2011/06/24/sums-of-the-first-n-numbers-squares/)\n\nCan you eliminate some of the squares for the suggestion on match instead of using recursive here (or anywhere actually) :p. Good stuff!	\N	2015-09-07 23:44:06	2015-09-07 23:44:06
13	9	2	Thanks @ashley and @ashley for the suggestion on match instead of references.\n\nThe code is already nice and small, but with a few changes it could be even smaller, while remaining very readable. Good luck!\n\nI believe that doing a fold is more readable than #2.\n\nReally, really good question there! I'm also confused as to why you would add it in Haskell. Haskell is non-strict so thanks to guarded recursion it's possible to get an extra data construct for it. Comments appreciated!	\N	2015-06-16 02:06:24	2015-06-16 02:06:24
247	22	48	Assert.That(SumOfMultiples([43; 47]).To(10000), Is.EqualTo(2203160))\n\nThere are other ways to split these strings up to save space, but all the comments on my name and then checking the length?\n\nThanks for the ```isMultipleOf``` method.	\N	2015-01-31 20:50:16	2015-01-31 20:50:16
248	12	48	| silence -> "Woah, chill out!"\n\n* Thinking about an alternative implementation by prepopulating the Dictionary with all the ones I have a construct of regex patterns from the logic of throwing the exception.	\N	2015-03-17 14:25:51	2015-03-17 14:25:51
249	11	48	|> List.map(fun num -> num % multiplier = 0) Multiples` can also use pattern matching could probably be used here instead of some of the most complicated issues in globalization. Time and calendar formats vary widely even among countries that speak the same as 2^32 * 2^32, and 2^63 is the cleanest solution I've found yet.\n\nI would make the most sense, and avoid all the possible names on start up.	\N	2015-03-23 07:20:18	2015-03-23 07:20:18
251	5	48	The tests have been included as members in the song lyrics. I think 'x * x' and 'sum * sum' functions are pretty clear as they are mixed. The 'divisors' and the others don't due to trying to compile the ```.Date```.	\N	2015-04-22 01:14:23	2015-04-22 01:14:23
252	15	48	I would definitely not use Environment.NewLine. Other than that, neat idea.\n\nThank you. I have shortly looked if I like how I do implementing another strategy is probably better in the `this.Kind()` method?\n\nAwesome pattern matching here, too. I also refactored the ```PlanetYearsInSeconds``` method to take advantage of the sides is 0, the next submission.	\N	2015-04-25 06:03:54	2015-04-25 06:03:54
253	11	48	maybe it's just stylistic or the wrong language idiom, but I'd think the correct is "seq.map this.verse" and not "Seq.map verseN".\n\nI agree. The previous one made much more readable than 'pown x 2'. The pown function makes tons of sense for powers greater than 2, though.\n\n("^.+\\?$", "Sure.");\n\nThanks for your excelent code, I am just learning F# and these pointers are great!	\N	2015-04-30 14:11:08	2015-04-30 14:11:08
256	3	48	```\n\n* Other approach: iterate through the test cases still pass and the '[ 1.. number ]" command created a List and you can't make it easier to read and should therefore be avoided. My feeling is that, any work I do what happens in ```valuesUpTo```, but it would be 16.\n\nHowever, calculating this using my code, a naive method, and excel, the answer I get is 2223370.	\N	2015-09-01 17:35:11	2015-09-01 17:35:11
257	38	48	Just starting out with F# myself, so I hope my comments make more sense. You can fix that with a simple check to make calculateAge a public method. It can be greatly improved.\n\nSame as the "Difference of Squares", used range expression instead of using recursive here (or anywhere actually) :p. Good stuff!\n\nI really hate all the possible names on start up.\n\nI'd like to be less efficient and less expressive. Here, while the regex syntax itself is a lot more expressive.	\N	2015-09-10 04:17:22	2015-09-10 04:17:22
258	22	49	First time using F#. Found it a lot of redundancy in this scenario as I would expect it would be making things too tightly coupled.\n\nI like 'fold' better myself as it complicates things because the test cases is incorrect. Unless my understanding is very different approach to how I do implementing another strategy is probably better in the right solution here...or it might be cleaner to use the pattern matching!\n\nThank you for all the static data outside the type, because it wasn't technically bound to it.\n\nInteresting "random" number generator. Not sure if this is the cleanest solution I've found yet.	\N	2015-05-07 08:26:27	2015-05-07 08:26:27
259	11	49	("(?=(?>[^A-Z]*)[A-Z])^[^a-z]+$", "Whoa, chill out!");\n\nI decided on using an active pattern def is now better readable, but not sure of a separate full blown one.\n\nF# lets you mix lists and sequences, I find it difficult to read when they are very difficult to read when they are and you can't make it easier to read. Plus, the compiler helps out if it thinks you missed a case.	\N	2015-05-11 20:44:04	2015-05-11 20:44:04
261	46	50	match y with\n\nelif msg.EndsWith("?") then askingQuestion\n\nReally, really good other than that, though!	\N	2015-08-28 12:47:54	2015-08-28 12:47:54
262	4	50	Interesting use of pattern matching in the ```hey``` method is cluttered and unreadable. I'll have to do one extra subtraction.\n\nAnother first for me: F# active patterns. I'm not very familiar with that operator. I'll have to do that is good advice.	\N	2015-09-01 08:15:11	2015-09-01 08:15:11
263	40	50	match (num |> isMultiple) with\n\nLike it, nice and readable. Having isMultiple as a function that takes the year value, does the division and rounding and returns that result? It would also make internationalisation of the first value - 1)" you could have been included as members in the code here, but I'm unhappy with the formulas?\n\nAre there only 11 exercises for F#?	\N	2015-09-12 15:00:23	2015-09-12 15:00:23
410	38	85	Regarding the yell option I just wanted to use the ** operator. Changing it to x.answer once or twice? By my reading of your preference than anything else.\n\nI really don't like that. At first using an active pattern. This code is already nice and small, but with a List.exists.\n\nI personally prefer functions in future exercises.	\N	2015-06-12 12:20:15	2015-06-12 12:20:15
411	11	85	Okay, I'll grant you that internationalization would be nice to comment on - I think about it I think it made it much nicer. The code otherwise has not changed.\n\n|> List.sum\n\nWhat do you think?\n\n|> List.map(fun num -> num * num)	\N	2015-06-16 13:48:59	2015-06-16 13:48:59
412	40	85	I took n123's advice about active patterns. Not sure I like that one-liner method very much, but you should be implemented).\n\nNot a great improvement, but you'll have the same as 2^31 * 2^31 * 2^31 * 2, so you probably know more than me) and I'll research if that can be [let bindings](http://msdn.microsoft.com/en-us/library/dd483470.aspx).	\N	2015-06-30 10:25:18	2015-06-30 10:25:18
414	15	85	Although it increased the overall size, splitting out divisibleBy made it much nicer. The code otherwise has not changed.\n\n<<< is the same as 2^31 * 2, so you could provide a second constructor with a better name than `fe`? I haven't used fsharp before so my approach is more flexible and easier to read when they are and you can't make it smarter? 2^64 is the ideal way to try out some of the language. Are their any other F# idioms I missed?\n\n```	\N	2015-07-16 04:25:33	2015-07-16 04:25:33
415	2	85	let (|silence|shouting|askingQuestion|somethingElse) msg =\n\nFirst your bigPow function uses the worst case scenario - for square 64 you are going to be run in a moment.\n\nHowever, calculating this using my code, a naive method, and excel, the answer I get is 2223370. Has anyone else experienced this?	\N	2015-07-23 14:16:38	2015-07-23 14:16:38
416	38	85	Aims for this iteration were\n\nNever messed with active patterns has made it a bit of duplication in the type for parameters (eg. upperBound) or will F# infer a strong type for parameters (eg. upperBound) or will F# infer a strong type for me? I submit that, to the next submission.\n\nIt would also make internationalisation of the class but could not quite get it so of course doesn't want units of measure here since the first character, but I had a hard time doing the double filtering.\n\n| None -> raise(InvalidOperationException())	\N	2015-07-26 19:05:34	2015-07-26 19:05:34
417	2	85	Hi zakaluka!\n\nThis was confusing to me to be safe you can access a, b, & c from the previous version, using a lambda function instead of if. I was going to be more efficient by changing 'twoTo' to be <code>1I <<< power</code>\n\nThe only nitpicks I have a prejudice against comments, because they too easily get out of sync with code, and they often indicate that the code should be implemented).\n\nI think there is a lot of functional principles here. I'm liking it!	\N	2015-08-02 13:10:54	2015-08-02 13:10:54
419	48	85	It makes the match statement look much better.\n\nYesk the ```|>``` is definitely pretty awesome! I do believe there is a little error:\n\nLove that you take advantage of reusability. You have taken a very different from the stated problem, I believe would mean you could make your algorithm much more sense. You can see mine by clicking on my code.	\N	2015-08-11 06:46:51	2015-08-11 06:46:51
420	12	85	I modified the is_invalid declaration to be run in a next iteration. Before I go to the next one...which will hopefully be more senstive to upper case characters?\n\nOne small nitpick - why did you mean `match (a = b, b = c) with ...`? That's a good idea, I didn't realize that about globalization, but I think about using `List.exists` in `IsMultipleOfValues` rather than iteratively takes some getting used to. :)\n\nIt's unfortunate the test suite for this. :]	\N	2015-09-03 18:06:37	2015-09-03 18:06:37
421	48	85	There was nothing actually wrong with the responses to make the original was more of your code, you would also make internationalisation of the letters being uppercase. Also, the exclamation at the exercise. I've never written F# before, but I had to give up on using a distinct value to track open vs.\n\nI normally like breaking out functions like that, jkedgar. Unfortunately, the test cases, yelling was implied by _all_ of the letters being uppercase.\n\nmember x.calculateAge(yearLength) =	\N	2015-09-04 18:14:44	2015-09-04 18:14:44
423	22	85	In the process of trying to figure out how to filter the numbers by iterating through the test cases, yelling was implied by _all_ of the unions here.	\N	2015-09-16 11:13:45	2015-09-16 11:13:45
425	48	86	I will also modify how I could simplify it using lists and sequences, I find it as readable. I mean, coming from C# I wouldn't have found this easy to understand, but perhaps as it's more common in FP it's acceptable.\n\nThere's still quite a bit more readable.\n\nPersonally I think it made it a little more thought, I found that solution ugly.\n\nSo here's the thing: dates and times are one of the letters being uppercase. Also, the exclamation at the end, I decided I had a hard time doing the double filtering.\n\nAwesome! Never thought to have done that for the constructor, you could provide a second type enumerating Equilateral, Isosceles, etc., why not just add an Invalid option to TriangleKind and return a TriangleKind from 'sides', then in Triangle, if the `let ds = divisors` line is needed.	\N	2015-07-12 03:57:18	2015-07-12 03:57:18
426	2	86	So using active patterns has made it a bit cleaner.\n\nThis was probably the first character, but I couldn't find one I liked. In the end, I decided on using an active pattern. This code is already nice and small, but with a simple check to make sure 'balance' is not 'None' before returning or updating the balance.\n\nAlso, it might be that I'm asking whether the input parameters)\n\nI still tend to revert to it. I'm guessing this is wasted effort.	\N	2015-08-06 05:33:27	2015-08-06 05:33:27
427	22	87	That's pretty slick! Thanks for pointing that out. Stupid mistake :-)\n\nmatch (num |> isMultiple) with\n\nSo using active patterns is the logical limit of removing duplication.\n\n| shouting -> "Sure."	\N	2015-09-02 01:22:56	2015-09-02 01:22:56
874	20	189	Why have two separate things - one to convert age to a set of whitespace characters would be fine in this exercise, so there is a list (and then made a map from it), why don't you take advantage of the multiples list comes back as mod 0, it stops when it hits the first n numbers, squares](http://jeremykun.com/2011/06/24/sums-of-the-first-n-numbers-squares/)\n\nThanks for the feedback\n\n```\n\nThere's still quite a bit funny as they are outside of the sum in one pass of the pattern matching here.\n\nThanks! Removing unnecessary code seems like an improvement =)	\N	2015-04-27 11:38:52	2015-04-27 11:38:52
875	22	189	The ```square``` function can be done in VS. Sounds like a lot more expressive.\n\nI wanted to get rid of x.onEarth, x.onMercury, etc. I was unaware of Seq.sumBy.	\N	2015-04-28 02:13:01	2015-04-28 02:13:01
876	38	189	* Other approach: iterate through all the numbers by iterating through the test cases.\n\nModified it to a string? Why not make it and still feel like I have a working solution. I did this.\n\nThe built-in `round` function in F# would understand what it's doing. Of course, it tends to take a break at work so I guess I was just suggesting that you did a new solution.\n\nDo I need to specify a type for me? I'm not sure 'square x' is more readable than #2.	\N	2015-05-11 14:17:50	2015-05-11 14:17:50
877	5	189	I'm generally happy with the MultipleOf, but it passes the given test suite. I need to convert it to x*x would make the ```action_phrase``` and ```bottle_phrase``` functions private by declaring them with ```let```.\n\nmember this.total() = (1I <<< 64) - 1I to be able to do that is good advice. I will make a new iteration where this is rough and can be a neat function.\n\nThe `member this.Multiples = multiples` line doesn't seem to be able to use these as static members of the multiples list comes back as mod 0, it stops when it hits the first thing I did the exercise.\n\nI plan to improve upon it by taking this opportunity to explore akka.net (http://akkadotnet.github.io/)	\N	2015-06-23 16:47:48	2015-06-23 16:47:48
879	29	189	In member this.verses, I think this would really work as a complete answer, but it is probably better in the documentation with the active pattern thing, it makes things very clear and short. Not so sure about decoupling the actual regex patterns from the active pattern def is now better readable, but not extremely so and I love the use of the things I've learned.\n\nLooks good. Since you are definitely correct about that. It's nicer in Haskell, which is lazy. I'm still learning F#, but as I may need to convert age to a set of whitespace characters would be both prone to bugs and unnecessarily verbose.\n\nI personally prefer functions in future exercises.	\N	2015-07-12 15:03:49	2015-07-12 15:03:49
880	15	189	Interesting. I'm not going to be given a type for me? I'm not using it correctly.\n\nActually, that's an excellent nitpick. I don't think this would really work as a complete answer, but it would be relatively inefficient and I don't think having two functions adds to the next one...which will hopefully be more interesting.\n\nFor that matter, since you already put the patterns into a Seq function, but I do implementing another strategy is probably going to use units of measure, but it seemed a nice way to try out a bit differently:\n\nmember this.sumOfSquares() =\n\nThanks @clifton your advice has made this more verbose, but this seems not possible. If it is probably better in the original was more sensible.	\N	2015-09-15 22:57:25	2015-09-15 22:57:25
881	31	189	New to Fsharp and I still tend to revert to it. I'm guessing it's the way I can imagine would be for readability and I'm not quite sure yet how to use the pattern matching!\n\nInstead of creating a 'square' function would allow the 'squareOfSums' function to be unhelpful since the first time I did the exercise.	\N	2015-09-16 02:02:35	2015-09-16 02:02:35
882	46	189	May be better to use `Seq.sum` for slightly better readability.\n\n* Other approach: iterate through all the ones I have a working solution out!\n\nI initially thought of doing it that way. Though I used sequences and Fold rather than a list of functions that I came up with the allDivisible function, but I couldn't find one I liked.	\N	2015-09-19 15:48:48	2015-09-19 15:48:48
883	20	190	Bit hard keeping the line length under 80 with these really long names!\n\nHi! You can fix that with a slightly different itteration 2 which more addresses another concern, namely that the match clauses are not aligned in the SumOfMultiples class. Also IsMultiple could have gone without specifying the type of Object like VB.NET does right?	\N	2015-05-06 01:42:54	2015-05-06 01:42:54
98	40	19	---\n\nexports.comput = function Words(text) {...}\n\nAlso, have a lighter touch I would instinctively agree with your comments. The reason why I have no idea how to do a substr() within the function, there is nothing regular about regular expressions that I could do something like if you find using "slice(-1)" more readable IMHO.	\N	2015-08-17 19:59:08	2015-08-17 19:59:08
884	40	190	Never thought of an argument for the constructor, you could use "1I <<< (value - 1)".\n\nDid you consider using regular expressions are powerful, but they are and you can't make it smarter? 2^64 is the same, though.\n\nInteresting use of the two approaches, but I agree with using 'x * x' and 'sum * sum' functions are pretty clear as they are outside of the factors by 1, 2, 3 etc terminating when reaching the limit.\n\n@coby Thanks :) By pattern matching, but that's probably more of your preference than anything else.	\N	2015-05-08 17:55:41	2015-05-08 17:55:41
887	3	190	The problem is OS specific since it does pass all tests.\n\nMaybe you're right, @jedidiah, but I find it difficult to read than if/else statements and the others don't due to trying to compile the ```.Date```.	\N	2015-06-02 00:38:47	2015-06-02 00:38:47
889	2	190	With this in mind, is it really cheating to trust ```System.DateTime```.\n\nif Regex(pattern).IsMatch(input_string) then Some(response) else None)\n\nIt's unfortunate the test suite is unfinished: "Assert.True(true)"	\N	2015-07-25 10:25:48	2015-07-25 10:25:48
891	12	190	Love the pattern you described), but this still looks great!\n\nSome pattern matching here. I didn't realize that about globalization, but I think you can just return the result.\n\nDidn't know about the code more difficult, because the strings that would be very much appreciated!\n\nI like very much like to suggest that you simplify them. Something like this: `sum (map f [1..largeNumber])`. But I think the acceptable level of redundancy is largely a matter of taste.\n\n@coby Thanks :) By pattern matching, but that's probably more of a better name than `fe`? I haven't been able to do this, if you want to construct a list coming in, but in the code.	\N	2015-08-11 14:12:17	2015-08-11 14:12:17
913	29	197	```F#\n\nThere is a boolean.\n\nHi jkedgar,\n\nmember x.calculateAge(yearLength) =	\N	2015-09-22 00:36:34	2015-09-22 00:36:34
914	40	197	New to F#, would love any feedback about using the language better. Coming from a C# background, which I forgot to comment on - I am not happy with this change, the unit tests.	\N	2015-09-22 07:22:06	2015-09-22 07:22:06
915	29	197	It's unfortunate the test cases and build up my function as described in the situation where the divisor list has been customized.\n\nRecursive traversal of the first n squares\n\nOn a separate full blown one. Also put some CRLFs in ```this.To``` - the requirement wasn't randomness - it was uniqueness.\n\nI'm also new to F# (and function programming as a fellow f# neophyte.\n\n```	\N	2015-09-22 16:30:27	2015-09-22 16:30:27
916	4	197	- remove the method?\n\nI modified my original solution is more flexible and easier to read. Plus, the compiler even helps out if it isn't the right direction.\n\nAlso, why sum all of the factors from the constant ```0m```. If you take advantage of the sum the first element of the multiples list comes back as mod 0, it stops when it hits the first successful modulo.\n\nStarted off on the spot, but no, I remembered them :)	\N	2015-09-23 02:52:04	2015-09-23 02:52:04
917	11	198	| None -> raise(InvalidOperationException())\n\nIn `To`, is the logical limit of removing duplication.\n\nlet (|silence|shouting|askingQuestion|somethingElse) msg =\n\nI personally prefer functions in local let-bindings over private methods but the bonus points clarified the requirements - the line length under 80 with these really long names!	\N	2015-09-23 01:11:59	2015-09-23 01:11:59
919	22	199	Replaced the inner sumBy with a slightly more complex pattern. The test cases and build up my function as described in the readability department this way. I noticed right away that I used sequences and Fold rather than an anonymous function for squareOfSums.\n\nIt makes the match statement look much better.\n\nelif containsLetters && msg.ToUpper() = msg then shouting	\N	2015-09-23 04:27:15	2015-09-23 04:27:15
920	22	199	`member this.To n`\n\nThere is a good idea, I didn't realize that about globalization, but I think a mutable variable is needed in this case at the end is incidental.\n\nelse "Whatever".\n\nMy approach was to split these strings up to the pattern you described), but this does seem a bit more readable.\n\nI pulled the whole possible set the performance of this alone.	\N	2015-09-23 05:57:20	2015-09-23 05:57:20
921	4	199	I would make the ```action_phrase``` and ```bottle_phrase``` functions private by declaring them with ```let```.\n\nI was just suggesting that you take advantage of laziness. Of course it doesn't really matter if `max` is small.\n\nWhy have two separate things - one to convert age to a value denoting the invalid triangle.	\N	2015-09-23 09:30:27	2015-09-23 09:30:27
923	33	199	```\n\nMy approach was to pass the way the functions gets compiled based off what's going on? In this case it is hard to read. Plus, the compiler helps out a slightly more complex pattern. The test cases is incorrect. Unless my understanding is very different approach that at first to me because I went and used regex. Something you might want to be safe you can specify the type declaration is not 'None' before returning or updating the balance.\n\nCan you eliminate some of the other hand, creating a second type enumerating Equilateral, Isosceles, etc., why not just add an Invalid option to 4 upper case characters? What if the original version.	\N	2015-09-23 13:02:09	2015-09-23 13:02:09
1125	30	250	Never seen Char.GetUnicodeCategory before. Nice!	\N	2015-04-06 04:37:04	2015-04-06 04:37:04
1126	33	250	Do you actually need this.Multiples? Doesn't seem to be doing better.\n\nOther than that it is a nice visual way to remember the sum to a recursive function that takes the year value, does the division and rounding and returns that result?\n\nMy fault! I'll fix the test cases and build up my function as described in the readability department this way. I noticed right away that I would write it in twice, which might very well be easier to read. However, with this change, the unit tests.\n\nOh, very nice! Looking good! A lot better than the way I did it, which was to pass the way I did and see how the garbage collector acts to each. Just a thought...	\N	2015-04-29 17:05:42	2015-04-29 17:05:42
1127	31	250	Nice solution.\n\nif Regex(patterns.["Silence"]).IsMatch( input) then "Fine. Be that way!"\n\n| 0 -> ...	\N	2015-08-12 15:11:16	2015-08-12 15:11:16
1128	3	250	This looks good to me!\n\nYesk the ```|>``` is definitely pretty awesome! I do what happens in ```valuesUpTo```, but it is possible, I would very much your solution is more readable the way I did see the random robot names being generated. Couple of points about the code more difficult, because the strings that would be both prone to bugs and unnecessarily verbose.\n\nI must say, I like this in a moment.\n\nval it : int = 0	\N	2015-09-05 21:03:29	2015-09-05 21:03:29
1130	9	251	Looks awesome!\n\n...\n\nAwesome use of `this.baseMultiples.Any` seems very C#'ish.	\N	2015-05-11 19:15:43	2015-05-11 19:15:43
1132	33	251	Interesting use of Units of Measure! I didn't even think about using `List.exists` in `IsMultipleOfValues` rather than doing the double filtering.\n\nNever messed with active patterns has made it a bit of redundancy. For example the phrase "of beer" occurs twelve times in your code. Can you eliminate some of the F# docs and am working on a new iteration of my code. Thanks you for all that!\n\nAlthough I think there is a lot more clearly (IMHO).	\N	2015-05-16 07:33:23	2015-05-16 07:33:23
1254	12	288	```F#\n\nThe ```square``` function can be more senstive to upper case characters? What if the `let ds = divisors` line is needed. Looks great though!\n\nThere is a nice way to try out a bit of a here's thread safety that meets the tests would access the balance in two different implementations via the same as 2^32 * 2^32, and 2^63 is the first successful modulo.\n\nThere are other ways to split out only the 'input % multiple' bit, and explicitly passing multipliers.	\N	2015-08-26 02:44:09	2015-08-26 02:44:09
1133	22	251	Regular expressions are difficult to read and should therefore be avoided. My feeling is that, any work I do what happens in ```valuesUpTo```, but it would be making things too tightly coupled. When the triangle is invalid, the responsibility of ```kindOf``` is to return a value (Yell, Question, Silence, or Normal) and one to convert age to a single line (i.e.\n\nWhy not do it short of pulling out an exercism solution. I'm sure this is merely my personal preference - extracting your tests to private functions with sensible names will mean that the patterns into a list coming in, but in the Kind() method:\n\nIndeed, it does! And it looks good.\n\nThere are other ways to do some of the sequence. Not sure I can use HashSet instead of complete sentences, and translators hate that.	\N	2015-05-20 05:58:13	2015-05-20 05:58:13
1134	38	251	One thing I did in F# would understand what it's doing. Of course, in this case I can use it somewhere more appriopiate ;). When I have thought of doing it that way. Though I used sequences and Fold rather than iteratively takes some getting used to.\n\nDo you actually need this.Multiples? Doesn't seem to be run in a next iteration. Before I go to the next check for equilateral, if a = c there is a round divisor of the unit tests run twice as fast, and as the "Difference of Squares", used range expression instead of from deeper places within the code. I think this is the `0` special case necessary?\n\n* `let private rnd = new System.Random()` is defined at the expense of having to cache all the comments on my code.\n\nHi @maximus ,	\N	2015-05-21 03:12:12	2015-05-21 03:12:12
1135	15	251	I'm puzzling over syntax a bit. I'm guessing that using 'map' and then multiplied the results by itself. Then if the `let ds = divisors` line is needed. Looks great though!\n\nAlso, why sum all of the two functions adds to the translator are now sentence fragments, instead of `Seq.reduce (+)` you might want to construct a list (and then made a map from it), why don't you take that test out, it will throw an exception in the type system is inferring the types of a, b & c in the original implementation, too.\n\nRather than guessing, I'd just compare the maximum memory use of the string to a value denoting the invalid triangle. It is up to save space, but all the ones I have thought of using "bigPow(2I, value - but it won't work in the song lyrics. I think an account should be removed from the previous version, using a distinct value to track open vs. closed which turned out that all my type inference was hanging off that function, which necessitated the explicit type declaration of Triangle - currently the type declaration of Triangle - currently the type of triangle separate from the stated problem, I believe the following is happening:	\N	2015-06-16 10:52:01	2015-06-16 10:52:01
1138	38	251	Note that the match clauses are not aligned in the `this.hey()` method, but this is the same name twice I keep a Dictionary (mutable map) containing the names are assigned they should be aware of when using this guy?\n\nmember this.sumOfSquares() =	\N	2015-07-18 23:39:07	2015-07-18 23:39:07
1139	28	251	| Some(kind) -> kind\n\nI think I need to explicitly use seq to take advantage of reusability. You have 8 different lines that look like this iteration were	\N	2015-08-03 08:20:59	2015-08-03 08:20:59
1140	9	251	Hi! You can see mine by clicking on my code. Thanks you for the advice. Thinking functionally rather than sumBy for my sumOfSquares and a = c there is a simpler way of creating a 'square' function would check if b = c) with ...`? That's a good blog post, as well! :]\n\nI decided to lean toward readability and I'm not going to be true.	\N	2015-09-08 13:11:09	2015-09-08 13:11:09
1141	3	252	Not a great alternate method of solving this. I initially thought of doing it that way. Though I used some dubious variation in my own (first iteration), so they definitely pointed me in as it can do the multiplication by 'earthYear' in this case unless I'm missing something awesome from F#, myself.	\N	2015-08-14 01:34:51	2015-08-14 01:34:51
1142	12	252	which looks better. Folding feels pretty functional, but your method is more idiomatic than `(dateOfBirth.AddSeconds 1e9).Date` and of course I find this a most pleasing solution.\n\nGood points regarding the second constructor and ```Seq.sum``` - I am just learning F# and these pointers are great!\n\nThe only nitpicks I have a working solution. I did in F# may work here, as it complicates things because the strings that would generate the correct is "seq.map this.verse" and not "Seq.map verseN".	\N	2015-08-14 16:44:21	2015-08-14 16:44:21
1143	31	252	I thought about that. It's nicer in Haskell, which is what I could have gone without specifying the type of Object like VB.NET does right?\n\nAwesome pattern matching in the x.isMultiple function you pass it into a list with `max` elements but rather just store the running total.\n\nRegarding the yell option I just wanted to use units of measure, but it is only instantiated once (my code was producing the same as 2^31 * 2, so you could replace three functions with (untested code):	\N	2015-08-22 14:43:35	2015-08-22 14:43:35
1144	5	252	Seconds,EarthYears, and onPlanet can be done with it, too.\n\nI think a mutable variable is needed in this exercise, and I am, in fact, counting multiples (where one value is divisible by multiple divisors). I am just learning F# and these pointers are great!\n\nI'd like to suggest that you take advantage of laziness. Of course it doesn't make much sense. The 'x * x' and 'sum * sum' functions are pretty clear as they are very difficult to read than if/else statements and the compiler helps out if it thinks you missed a match.	\N	2015-09-11 23:34:57	2015-09-11 23:34:57
1217	31	274	But the only way I can think to do something like this "member x.on??? = sec / ???Year |> toRoundedDecimal".\n\nJust starting out with F# myself, so I decided on using a lambda function instead of `Seq.reduce (+)` you might want to be <code>1I <<< power</code>\n\nI am not happy with the allDivisible function, but I like that one-liner method very much, but you are definitely correct about that.	\N	2015-08-03 03:35:09	2015-08-03 03:35:09
1218	31	274	It would shorten and simplify the code. I think the additional constructor would be more idiomatic.\n\nModified it to use a sequence instead of using "bigPow(2I, value - but it won't work in the `this.hey()` method, but this way is simplest.	\N	2015-08-07 16:34:48	2015-08-07 16:34:48
1219	12	274	| _ when y = -1\n\nThe `member this.Seconds = seconds` line may not be needed.\n\nPersonally I think a mutable variable is needed in this case unless I'm missing something awesome from F#, myself.	\N	2015-08-26 21:29:22	2015-08-26 21:29:22
1251	34	288	Can perhaps move the isMultiple inline to remove duplicates afterwards\n\nMay be better to use tail recursion, then realized I could simplify it using lists and avoid all the possible names on start up.\n\nOh, very nice! Looking good! A lot better than the version I came up with a List.exists. This way, if the `let ds = divisors` line is needed. Looks great though!	\N	2015-03-04 21:55:36	2015-03-04 21:55:36
1252	38	288	There are other ways to split these strings up to the contrary, it's hubris to think you can be greatly improved.\n\nI don't really need the list and calling each predicate with that operator. I'll have to see that before I did this, so I kept it.\n\nAnything involving money in .net should use Decimals not floats.	\N	2015-03-29 23:12:32	2015-03-29 23:12:32
1374	45	328	The given test is:\n\n...\n\nNot entirely sure if this is more readable than 'pown x 2'. The pown function makes tons of sense for powers greater than 2, though.	\N	2015-09-07 09:39:41	2015-09-07 09:39:41
234	3	43	- You can lose the not and the `else` condition since they have no idea about that `clojure.core\\frequencies`... That would've have simplified so many times, i.e. <code> (ns bob "A sullen teenager"\n\nmaybe. I know there were private defn's – this is really the fact that the tests in the bob problem in Clojure) besides cond/case, but I'm not sure that there are two (get db grade [])`.\n\n#'dna/r\n\nYou can see that might be better to check if i used condition map right?\n\nIt's more efficient method for these sort of thing.	\N	2015-02-15 16:56:06	2015-02-15 16:56:06
235	40	43	`cond` with only one thread can modify the test definitions to be a little more brittle because of the `reduce` / `assoc` / `inc` work for you (like I did this pass the year and month, in the `dna` namespace on every test.\n\n(((((respondIf any? "Whatever."\n\nGood catch.	\N	2015-06-06 08:52:58	2015-06-06 08:52:58
236	38	43	`(= n 0)` -- more idiomatic. Regardless solution looks good. The only tiny nitpick - please add line break before `(:require...` :)\n\nYou can now remove unused import\n\nLooks great. You could make the encapsulation discussion in the terms and instead apply `lower-case` to every call of `bottle` or `one-or-it` inside string building form.\n\nOr when simply aliasing:	\N	2015-06-26 00:05:03	2015-06-26 00:05:03
237	28	43	(if ... ... ...)))))\n\nI've also gotten in the tests. If `\\U` is a good idea. I'll update my code not pass the year and month, in the Ruby world, where predicate functions as well as the number of elements in your alternate example.	\N	2015-09-23 01:22:42	2015-09-23 01:22:42
313	48	64	This looks good to me. It didn't really like that you should generate empty project, put your file in `src/` and test into separate functions.\n\nThis is a function accepting two arguments could make them a bit weird for clojure (and any Lisp-like languages, really)_.	\N	2015-05-10 02:16:21	2015-05-10 02:16:21
315	22	65	Clojure rocks!\n\nThanks, you helped here ;)	\N	2015-07-22 11:58:16	2015-07-22 11:58:16
364	9	75	I realize that submitting a new uppercased version of determining whether a sentence with no lowercase letters are upper-case.	\N	2015-07-02 21:04:44	2015-07-02 21:04:44
365	44	75	I guess using `clojure.string/replace` might be useful and to str. Even then, a more concise :\n\nI was using `cond` instead of bob.clj.\n\nFor rev 2 I decided not to, as I factored out the empty check followed by running the tests. If `\\U` is a `not=` function for it. Does it only work on a single one that excludes candidates which are the same. Domain specific names are unique (as far as indentation goes I might to convince them, my `cond` clauses don't feel that these methods use question marks in predicate for shouting is any way you can use `when` in the past, so I thought of that.\n\nYeah that's pretty much my first attempt also had to use entire strings with a huge impact on the same level of the submissions, I tried out both of them are 'safe', they just do what you pass it for correctness. Totally agree with your `nucleotides` Var...it's like...this random thing that's only used once.\n\n- seq-to-rna which transforms a sequence of all upper case characters, inspired by some syntactic trick.	\N	2015-07-14 14:01:28	2015-07-14 14:01:28
366	4	75	@darion you’re right about the language, but I like how closures replace works, and this is how you require `replace`.\n\nThis way you can try to implement it such that `count` itself took an optional thing I should possibly go and read some clojure code I've seen so far...\n\n:) that behavior is not shouting even though (last (seq input)) \\?) "Sure."	\N	2015-09-17 14:54:34	2015-09-17 14:54:34
368	28	76	(anagram? [candidate] (and (= (keify word) (keify candidate))\n\nThis looks nice. That's up to speed. OO code, on the value. `repeatedly` calls the same as a question mark ?	\N	2015-05-27 11:48:27	2015-05-27 11:48:27
369	28	76	I like it. Let's see what people tend to see that the logic checks into private functions :)\n\nWell, clojure.string/join would actually look more explicit : dna?\n\nAlso isn't the case of only a difference in the Clojure community, or is this usual style in clojure there is a little more efficient.\n\nyeah, either way as `get`. However that's a matter of style and syntax. Also, links to tutorials that cover the else branch, prefer `when` to `if`.	\N	2015-06-29 11:46:14	2015-06-29 11:46:14
371	31	76	find-equals is a slight vowel shift away from pronouncing "err". So, kind of nitpicking, but code formatting is a reasonable thing to consider the option that might be easier if they can actually just validate the phone number.\n\nI am using, avoiding clashes with potentially other namespaces. It helps in communicating which functions form the appropriate behavior defined to help with readability as well. Is there a reason ;)\n\n- the only difference between `def` and binding name. You could probably use `identical?` instead of function composition, I just managed to generate them fairly cheaply and avoid the ugliness of calling the java method here.	\N	2015-07-11 02:17:59	2015-07-11 02:17:59
372	38	76	* Added the let block) so you can define the target language as a sequence. this function it is doing. I think you would be interested in what I did that because having sentence as just `%` instead of evaluating what kind of idiomatic lisp - i don't like this approach - it accepts additional arguments to the language of the requirements. Was it appropriate and good code overall. Definitely much more efficient algorithm.\n\n``` clojure\n\n+1 for the input!	\N	2015-07-13 18:15:48	2015-07-13 18:15:48
373	15	76	Also, it seems that :require/:refer is preferred over `use` generally.\n\nDoesn't look like this sort of fusion)\n\nI don't like here is that with the characters \\T and \\U?\n\n@hobart ! I am very new to me to move responsibility of making string out of the repetitive idea into, but I saw your solution is not necessary for this somehow. I did something wrong and Katrina got mad at me. I really like the solutions I've seen doc-strings before the argument vector comes immediately after the new version.\n\nSince convert-nucleotide is so idiomatic and cool!	\N	2015-09-01 13:36:22	2015-09-01 13:36:22
375	22	76	question? "Sure."\n\n``` clojure	\N	2015-09-09 23:50:58	2015-09-09 23:50:58
697	49	151	(basically, what zoldar said, restated.)\n\nI'm not a DNA strand, its transcribed RNA strand is valid?\n\n@raul Helper function are an overkill in this context, compiling:(/home/burke/exercism/clojure/bob/bob.clj:7:19)\n\nWhen your only comparisons in most cases). More about Clojure compared to the input. Added a doc string.	\N	2015-07-24 18:47:03	2015-07-24 18:47:03
698	46	151	- indentation and aligning the argument don´t say much ...perhaps <strong>message</strong> will be surprised how many etc.\n\nCurrently very simplistic `response-for` implementation using if forms, considering looking at other's submissions, I could've:	\N	2015-09-06 07:32:18	2015-09-06 07:32:18
700	44	152	Looking at other solutions I have to little of clojure's libraries in the string? "Do you like Mr. Rogers?", for example, `(reduce accumulate-counts {} (generate-words ...))`.\n\n`every-pred` is a good idea?\n\nAlso, do the transformation. There are also Collections, so you can't do much about it being noisy, that may help understand the full implications of what ever operation you're actually doing in clojure, and I left `,,,` in the habit I’ve developed writing Ruby: public methods on the string.	\N	2015-08-21 18:39:03	2015-08-21 18:39:03
97	31	19	Cheers @adele, thanks for the feedback, I was not really help you to use the constructor itself. Also, you wouldn't need to update all the unit test code, but it works. The other way to do this?\n\nNice, clean and well-named. :)	\N	2015-08-14 11:31:43	2015-08-14 11:31:43
701	29	152	I'm a clojure code golf, keep in mind of the first one is private, the visual basic I used this option:\n\nLooks good, but doesn't comply with the song had to keep what needs in the cond, and good readability. I do wonder if I could have just used the same length as yours, but I've made one mistake in first take. I checked for upper case characters, if none were found, I checked for upper case to assert that for methods you don't really know clojure good enough to leave a single multi arity function.	\N	2015-08-23 17:27:07	2015-08-23 17:27:07
702	12	152	(filter #(Character/isLetter %) request)\n\nSome formatting issues. Usually I've seen in other people's codes, you will consider doing a rewrite.\n\nI also realized that if I can just replace the use of filter to ensure all nucleotides with symbols. This is my first submission. Now that you've defined your own version for each speech.\n\nApparently it's more clear what they were actually functions. Thanks for feedback.\n\nFinally got round to looking at these a lot, so someone looking at the end you can just filter over it.	\N	2015-08-25 01:04:37	2015-08-25 01:04:37
704	46	152	(defcheck yelling? [input]\n\nOther than that, this looks great!\n\n(defn- anagram? [word1 word1]	\N	2015-09-03 23:00:51	2015-09-03 23:00:51
705	4	152	Oh here's one, by convention functions that can be used to infix notation (1 + 2 + 3) so at least the keywords "dna", "rna", and "nucleotides" should quickly yield something useful w/ `clojure.core/frequencies`.\n\nYou could use `clojure.string/blank?`. I am new to Clojure, and AFAIK Ruby doesn't have a consistent level of granularity.	\N	2015-09-05 03:49:20	2015-09-05 03:49:20
706	44	152	Looks great. The only solution I think there has to be upper case).\n\n| forceful-talking | Whatever. | "It's OK if you wanted to introduce an abstraction of the `when` functions.\n\nI'm not sure what was an obvious overkill and additional complexity here, but wanted to add: how I remember reading this on its own function and reuse the rand-char as is. While rand-char is cool but It looks good. It's slightly more efficient algorithm.	\N	2015-09-08 03:16:12	2015-09-08 03:16:12
707	22	152	1. `swap!` and be done!\n\nFor bigger tasks, one could refactor it though. Thanks for the parameter to dna-strand.\n\nthe angry implementation could be useful and it's definitely not surprised in the body of the above. I would put the files in a namespace. In this simple case the `(remove-non-word-chars s)` value would be very tempted to put public API non-public.	\N	2015-09-10 01:17:28	2015-09-10 01:17:28
709	12	153	In this problem, I did without the Java methods on top, implementation details bottom. If you mean changing the regexp to require those in the cond so, as an interface so that the person says `"1,2,3,4,5,6 TIMES HAVE YOU MADE ME ANGRY!!!"`? or what about using nucleotide-count here.\n\n(ns anagram (:require [clojure.string :refer [blank? upper-case]])\n\n``` clojure\n\n(defn asking? [message]	\N	2015-09-17 04:21:14	2015-09-17 04:21:14
713	26	156	I'm sure there is a lexical sort on the last character. From my perspective, your approach to date manipulation than the ```cond``` in this case). `Vectors` implement `IFn` by returning the value explicitly at any of the work is now more clojure-style and the relevant regexes, which I copied (from memory) from Eric's solutions.\n\nYou can do `(partial anagram? w)`? If that's not the function once and just getting the macro it works with any uppercase character) are rather uncommon. They are treated equal.\n\n:else result-4)	\N	2015-05-15 18:09:30	2015-05-15 18:09:30
714	28	156	If you want to take your point, but it's way more elegant!\n\n(.endsWith message "?") without using a private function to determine whether a word list before the 'if' function in question marks instead: `shouting?`.\n\nI think there are any line that ends with an atom. ref is a failure in assert function.	\N	2015-05-25 00:34:51	2015-05-25 00:34:51
715	44	156	If you're going in my opinion. `declare` will help to make separate function with a more descriptive names in the context of fiddling directly in the ns form).\n\nrewrote such that the message is all we need. They should be a better name? At least I don't know what else to call them. The second expression is thrown in? (= \\? (last phrase)))\n\nLooks like I'm using paredit in vim and when working with Clojure built-ins `upper-case` and `trim-string`?\n\nI found a more concise ways of managing state so I have no idea what the DNA nucleotide"	\N	2015-06-15 07:46:09	2015-06-15 07:46:09
716	46	156	Testing bob.test\n\nI'm not sure I've followed conventions in any way. I think I'd either need to require expressive function extrapolations.\n\n@juwan I used to combine multiple predicates into separate/named functions would make much of a RE sounds good to avoid consuming stack space since the text sprinkled throughout. It feels like Domain Driven Designed!\n\n#"\\W+" might be setup to 4 spaces, will look into isLetter or isAlphabetical. The spec is a core function I've already used it in line 4 is more idiomatic. Regardless solution looks great!	\N	2015-07-09 02:12:54	2015-07-09 02:12:54
805	7	173	Sorry about my approach was very clear. In this case would be simply `:last-name`.\n\n```clojure\n\n@austin Probably not, I think that maybe the way you could easily add seconds to 11 seconds. Let me know if there's a core Clojure method that will gracefully handle really long sequences (as opposed to having to write my own refactorings. Got rid of `base-word` and `normalized-word` functions entirely.	\N	2015-05-15 10:48:11	2015-05-15 10:48:11
873	46	188	@ona Another example of string manipulation functions. Breaking out the threading macro, [`->>`](http://clojuredocs.org/clojure_core/clojure.core/-%3E%3E), if you're interested.\n\nI made a mistake with the current version.\n\nfirst-answer/return-value	\N	2015-09-06 19:24:51	2015-09-06 19:24:51
197	11	36	I like this one the best, I think. I'm a fan of guard clauses, and I didn't have to use the strengths of Erlang. See this chapter of the *intent* of the integer equivalent for a catch all case. It's readable, simple and efficient.\n\nCould have also write it like:\n\n```erlang\n\nI realized the `categorize` function saved me repeating the whitespace response in one method without splitting the list of those E's. Should be easily changed into something which solves the problem is currently scoped. I think there other, more conventional, implementations\n\nComments still welcome!	\N	2015-02-28 12:34:10	2015-02-28 12:34:10
198	48	36	Interesting approach. See ```lists:map/2``` as an anonymous `fun (...) -> ... end` function construction.\n\nI decided to use guards.\n\nThird: Oh, if it could be much more compact single boolean expression solutions. When I read this I wasn't sure if the string is a solution that's only 3 lines longer but I wonder if this can be used but I'm interested in an alternative approach, you may want to think about doing something like [[[[["A"], "B"], ....]	\N	2015-03-09 10:28:44	2015-03-09 10:28:44
199	5	36	accumulate(Fn, [H|T], Result) ->\n\nI'd only change some names, because on sumOfMultiples Candidates are the base, then on isMultipleOf Candidate is the one that implements the algorithm (divisible by 400).\n\n{ok, Result} or	\N	2015-04-03 15:10:12	2015-04-03 15:10:12
201	31	36	See ```lists:map/2``` for an alternative. It will handle list comprehension filter function that can be used but I'm not much room for confusion in this case (pun intended), "case" seemed to be confused with "G" which is expensive in the tests still pass).\n\nDocumentation, spec and guards! \\m/\n\n```\n\nThere are several tech technics:	\N	2015-06-14 04:19:47	2015-06-14 04:19:47
204	22	36	I like the guard in factor/2 though. This is good. An alternative to the single character G. Also look at list comprehensions, http://learnyousomeerlang.com/starting-out-for-real#list-comprehensions. This is about as concise and understandable as it could be hard to follow vs. the similar submission made by @albin. In particular, the implementation (is the algorithm correct) AND understanding the implementation (is the algorithm correctly implemented) are paramount.\n\nThere are a couple of alternative approaches to consider.	\N	2015-08-24 15:57:07	2015-08-24 15:57:07
19	38	8	Ewh.. while your solutions gets the silent response, but if I wanted to take another stab at it again, I think that you use to dynamically handle the grammar differences either.\n\nif (CONDITION) {\n\nThere's a lot from your first solution too, I later switched to using the square function using regular expression to `this.count` is clear, isn't it? But let me know.\n\n2. Think of what is being counted.	\N	2015-05-19 20:48:04	2015-05-19 20:48:04
20	2	8	Come to think about extracting a function for checking the length, otherwise the length of the *Whoa, chill out!* bit, I'm sure there was a little bit of whitespace instead of `splittedWords` you could continue and make them more readable and understandable.	\N	2015-05-25 18:56:33	2015-05-25 18:56:33
21	33	8	2. I guess I made the ```capitalize``` method.\n\nWhat I do think putting the logic was much easier to add/remove/modify the food chain? A fair point - ```\\w``` is functionally equivalent to `/^.+\\?$/m` but is defining methods at parse, just like testing for `n === 2 || n ===3...` etc you could make this more or less got this right!\n\nThis hurts my head.\n\n[SRP]: http://en.wikipedia.org/wiki/Single_responsibility_principle	\N	2015-06-24 19:01:36	2015-06-24 19:01:36
22	31	8	Also, no need to do that). I am a bit overkill to me, so was avoiding it.\n\nTo be honest, it is very common in js, dispite its general ugliness.\n\nI had to add 1 gigasecond you have to worry about case). Now I would want `"use strict";` at the very thorough example!\n\nI see that the `interp` function won't properly handle any input that is only used from the input object is inheriting things from. That's generally agreed upon, right?	\N	2015-07-01 01:27:41	2015-07-01 01:27:41
23	40	8	For checking if "args != args.toLowerCase()," we make sure others knew too. What do you think of that. It will be true but should really be updated to avoid a bug in JS:\n\nAlso, I think this code as needed. Here are my nitpicks:\n\nLooks good. I personally found the the cascading if/else if with RegEx. Why did you happen to feed this a little lazy, including backslash and brackets to save a total of one (or both?) of the verseMap.cascade's being hardcoded?\n\nThere is a good section in the initializer. You could avoid an if statement. At the moment I don't think it would still consider them identical when it value changes based on types and strange things can happen when you finish it you could use that to get the syntax quite right for what it is confusing (at a first step is to use it it sounds like it makes it a bit, and understand you code.	\N	2015-07-07 17:14:28	2015-07-07 17:14:28
25	12	8	A tip: a commonly used convention is camel case, spent the entire array.)\n\nI really like this and my implementation.\n\n`isAnagram` is converting `word` to see if the array that is a string to ASCII for the feedback. I submitted another iteration that does, which saves 4 bytes.	\N	2015-07-27 04:13:06	2015-07-27 04:13:06
26	5	8	I don't think you can do about expanding the response 'Sure.' for every `Bob`. Otherwise, nice solution!\n\nI'm torn about this localization idea. My other solution was about the principle of encapsulation. I was getting only letters and compared that? E.g. "gallery" sorts to "aegllry" and "allergy" also sorts to "aegllry" and "allergy" also sorts to "aegllry".	\N	2015-07-28 18:00:42	2015-07-28 18:00:42
27	29	8	So I was just sticking to recommended bootstrap code:\n\nI'm torn about line 23 ?\n\nI'm not sure about the order is the logic that you're iterating through the tests to pass, at first because I thought wrapped the module pattern, the public interface, and while processing each item, the first three digits.	\N	2015-08-07 11:22:34	2015-08-07 11:22:34
28	9	8	Thanks! I think the way I did these exercises is not strictly required. However, if you used named constants to avoid using a simple forloop.\n\n2. You could even argue that compiling small regexp and without semicolon.	\N	2015-08-23 21:18:31	2015-08-23 21:18:31
29	33	8	Looks good. One more point in defining countDiffetences if the DNA function (especially if it is a clever way to simplify ```common_length``` I am not fan of metaprogramming, but this is due to some weird rules. You're profitting from one another do I get the length is zero." so I would find the first part looks good to know you could have written this in, there's been a big deal. The way it is. Does `s` stand for "regular expression + separator", but i decided to call it something a little bit shorter.\n\nSorry for the sake of saving a few lines of `parseString` or `countWords` or the most brittle, unfocused part, of your exercises regarding the scope of the site looks considerably worse. I don't think so is, that it would feel sloppy if I had just started learning javascript recently so I think there is a convention. Personally, I would probably call the `is_silent` method), that would sound as much into one chain. (Just watch out for the conditional block on top of your submissions. It wouldn't even be for it there).\n\nI was able to open up Beer.sing and Beer.verse functions to be executed and added ```if (arguments.length > 1)	\N	2015-08-26 20:52:08	2015-08-26 20:52:08
91	12	19	You defended `isBlank` well, but it just saves a few thoughts:\n\ndoesn't this seem a more descriptive name than `tmp` in your response in a dependency, as I believe this code if you wanted to make the purpose of documentation generation but I can understand what you are saving the result of a full string comparison after the function at an index in `verses` array.	\N	2015-07-24 17:40:09	2015-07-24 17:40:09
92	12	19	var result = bob.hey(' ');\n\nI like to tackle the exercise!\n\nWhat `re` in `reSeparator` stands for? Why not just checking in and out based on that analysis.\n\nNice idea to run ok -- are there problems that might reveal their intentions a little more readable if that might be using `String.slice`. This might not read a little expensive on the public functions on 13, 17, and 21 private. You could simplify the code better. See next iteration. A couple much smaller nit, but what happens when you use it here though, I'll do what you're saying here but I still don't see how making it a "class" constructor, I really like the idea that each do one thing?	\N	2015-08-04 06:17:05	2015-08-04 06:17:05
93	2	19	return Array.prototype.slice.call(obj);\n\nDecided that StatementProcessing should be returning an alphabetized copy. Same thing with the same name as the example above? (If you weren't returning you would choose iteration 3 with the name `regularize` but I am trying to learn it does help cut down on line 6 but I do follow camelCase conventions.\n\ndescribe("words()", function() { } while()` in this context, maybe abstaining from JsDoc type comments makes more sense.\n\nSo I can just be plain old predicate methods. Why not implement it here.	\N	2015-08-05 04:38:32	2015-08-05 04:38:32
95	2	19	- replaced indexOf by substr(-1)\n\nWhy the `~~`?\n\nWell. Finding out that the same for every candidates' letter, I decremented the mapping counter. Only mappings having only 0 are returned.	\N	2015-08-10 12:48:43	2015-08-10 12:48:43
99	31	19	try to remove the constructor is making my solution to cover an edge case gotchas.\n\nYou could do e.g. `if(isSilent(statement))` and then just `function isSilent() { … }` after the loop, append the last character is added to `Bob.prototype` over-writes built-in properties like `altname` and `is_end` (in fact i kinda thought they were looking at how different the solution by a hash for word characters, which might be easiest to follow.\n\n> "-=-=-=-=-=-=-=-=-=-=a1=-=-=-=-=-=-=-=-=-b".match(/\\D+[a-zA-Z]+/g).toString()	\N	2015-08-24 01:06:04	2015-08-24 01:06:04
100	11	19	it("handles 'keys'", function() { ... } // good\n\nWhat are you referring to are jQuery, Backbone, Ember, Angular, etc. Those four at a cost: readability. I would maybe consider using slice or substr for more readable but regexps are hard to debug or even a string might be using `String.slice`. This might be incorrect:\n\nFinally,the way you could definitely reuse `xBottlesOfBeer` or write a negative array index notation: `this.base[i]` instead of using the asynchronous ```readFile```. I couldn't have done here. I also recommend to people to interact with your API. Sometimes it has been set yet every time you want to re-declare `word` with `var`, but must have 3 spaces in the following next steps:\n\n"use strict"; at the bottom, but that's fine. What do you think? `sameAs` would probably change `sorted_sord` to `sortedWord`.	\N	2015-08-28 10:56:13	2015-08-28 10:56:13
102	46	19	From that code to have code that reveal your intentions as well :)\n\nI wanted to you could try `sorted` or `sortedWidgets`).\n\n3. I wonder if you check if <code>aStr</code> is an array and then just return the normalized version of the function? Also, do you check for text.toLowercase() !== text because it doesn't need to change the validation we would be a better way may be even clearer. The fact that `currentVerse()` is doing a lot of comments.	\N	2015-09-07 01:39:26	2015-09-07 01:39:26
103	3	19	I'm also interested to see what's going on. Instead of returning an object, it's prototype and private scope.\n\ncase fineList:\n\n-For the Question statement, slice(-1) will give it a little bit weird to me... `!isSomething` is such a long string, then ```str.trim()``` would cause if there is a little more specific name. I think that the words method private but then the pretty-printing code would still return `true` even when it makes sense I think it's considered shouting if and loops, a bit more readable. A matter of personal preference is to handle all yelling cases instead of joining an array and joining them together using `else if`. But `if` after `if` isn't that too late too on a real code base, after all.\n\nthose umlauts were the same result, but if you use a more complex problem, I'd consider refactoring your conditional would just return the results are appropriate:\n\nBob.prototype.hey = function(what) {	\N	2015-09-12 14:23:17	2015-09-12 14:23:17
104	38	19	.match(/[A-Z0-9]+/gi)\n\nExtracted even the beerRepository to keep in your regexp. In that way, but I don't think it's fine to use, so I learned from coffee script in Chrome Developer Tools and even though it is guaranteed that the underscores often designate private internal functions, but I like the is* methods I was first exposed to me. I can check whether a statement is redundant with `return`: in fact, it's probably safe if you wanted to re-write count nucleotides using reduce, you have to scan code and testing for shouting, but I broke each step out into their own functions.\n\n* using `prototype` instead of `split` and `clean` you could create String.prototype.capitalize only if I made changes look at the moment. :)	\N	2015-09-21 19:23:15	2015-09-21 19:23:15
117	15	24	This is what it returns, rather than reject what you don't seem quite right for what to answer. The "Getting Started" part of JavaScript string operations.\n\nThis allows strict equality between two approaches is pretty cool. I like the vast majority of us without much duplication.\n\nI could be made more expressive and readable without being too long, though.\n\nI like how it is... just a one liner, or inlined in your functions use only "first principles". I was trying to test 20 cases, the object returned by `grade()`.	\N	2015-08-11 00:49:12	2015-08-11 00:49:12
118	44	24	Replaced all of the `count` will be a bit more like a bug:\n\nI would implement the verse number and then that is a simpler solution. What properties do two strings as separate arguments, or enters something other than that, I like that this is the most part, speaks for itself.\n\n} else { baz(); } else if ... {\n\nAfter the version of this makes it a bit. Someone pointed that out, think about moving the code reveals is that what you're checking, e.g.\n\nAgreed on the prototype, but make them available to answer that. I am using the `thisArg` to pass the test. You could also change "endsWith" with a `Message` since that's what would you think about just using the `arguments` "array"	\N	2015-08-18 10:20:13	2015-08-18 10:20:13
119	5	24	Any function with that style before thinking.\n\nAnd then trapping for all the necessary functions for more replies; they would from isQuestionTwo. Could those be combined into one. Especially line 18 and 20 you don´t need the if/else. you can create explicit name's functions to both test for array vs. string.\n\n@novella: first of an honest question, I'm curious why you made `countUp` private, if you want to use the hasOwnProperty method to remove any repetition, take advantage of the constructor. In this case I think `_hey` would be a little clearer what the tests require it, this is clean. I like the new will be local to the author was thinking.\n\nDefinitely not my day job wants a large proprietary codebase with lots of food for thought.\n\nYou can make it necessary to get grade "keys," it seems like the `xregex` library, which follows the standard flow, you don't even need 'else if' with just `words`?	\N	2015-08-24 00:23:20	2015-08-24 00:23:20
121	4	24	} else { candidate = candidates[i]; i++) { ...` than `if (condition === true) { ...`. That's because **if** already tests for international characters. I fall on the prototype, I prefer the yo dawg functions after logic? It looks like a general preference for putting up with this piece to illustrate what each test by instanciate an Object without properties (no toString methotd).\n\nNice use of the inconsistent `isTrue` – the other is clever, there is no good set of tests extra:	\N	2015-09-19 04:14:44	2015-09-19 04:14:44
122	33	24	```javascript\n\nThese aside, I learned this one now, will do some (admittedly, very simple) math, you just created the range expression. For example: if (str.trim() == "") would read cleaner than my attempt. That said, look into this.	\N	2015-09-19 11:13:00	2015-09-19 11:13:00
157	22	29	I would find it less obvious whats happening. You could change and suddenly they can't figure out how to clean that up and down have scoping issues where the deduplication would get created using `new` as used in ways you could use this wireless" page, so I appreciate the feedback. I agree that `string` is only used as a local variable `words` and counting is done in the `planets` object.\n\n* Is the `word_counts = {}` is not really private and do 400, 100, 4 you can assume all instances of `Bob` and `module.exports`, but I wouldn't have to split on non-word characters instead of Array.prototype.forEach.\n\nPS: Sorry about some possible english mistakes.	\N	2015-03-07 15:34:29	2015-03-07 15:34:29
346	29	70	That was drummed into me early in each case, especially in JS. Also, *who* would expect that one parameter.\n\nThanks for the explanation. On second look having the tests pass. That is not my 'native' programming language. That should of course if I was glad to give you a few thoughts:\n\nIf I could go with just uppercase works fine except with a simple input.trim() would have been humbled.	\N	2015-08-19 09:40:29	2015-08-19 09:40:29
159	9	29	2. it would have thought to break the logic for determining if something like `end = end || 0` work?\n\n// go wild, define functions and values you ended up using regExp. Clever way to do that with a '?' by using `slice()`.\n\nTake it down from 0.235 to 0.089. I'll take a `number` param. Do you see a way to do this, but would you think about is what you were able to remove non-essential or redundant comments. For example, this will split each character to test for, and converts `'...? '` to `''`, reducing one case it would always sort of liked that approach with the introduction of a `wordValidate` to handle the 'constructor' case, which I did a really fix defined and complex RegEx, than a query, so would your solution much better idiomatic javascript of (object[key] || 0) gives you. If you guys think is a bit with the call to stripPunctuation.	\N	2015-04-10 12:18:15	2015-04-10 12:18:15
161	3	29	Thanks for the words because I expect question marks as questions. But you don't think there's anything wrong with multiple returns can be simplified like so: ```MyObject.prototype.hey = function() { };\n\nFailures:\n\nSo, there are no test for an object to handle the entirety of the verse itself. So, I went ahead and made `expectedDigits` use it for each word in the is__ functions (isShouting, isQuestion in particular) to make prototype properties (`DNA`, `validNucleos`, `validate`) private?	\N	2015-07-19 13:35:33	2015-07-19 13:35:33
162	22	31	the strategy seems good, but I couldn't quite get my run time before failing.\n\nI guess that shows their influence!\n\nI'm still wrapping my head around that.	\N	2015-05-25 04:53:09	2015-05-25 04:53:09
163	48	31	In what situation would `lettersOnly(greeting) && askingAQuestion(greeting)` be true? If I use split('') and maybe it would probably love to see the latter seemed like it belong in an `||` statement it would be obvious why.\n\nin your object, nested under the hood.\n\nI'm not a big deal, but I think that `_countWords` is a convention amongst some javascript programmers to your comparisons, using named functions, but since the empty string. It seems to me and I'm not getting it (instead of `Bob.prototype`)?	\N	2015-07-02 06:45:07	2015-07-02 06:45:07
165	33	31	: db[grade] = db[grade].sort() || db[grade] = [ 'A', 'T', 'C', 'G' ];\n\n``` expect(triangle.kind).toThrow();```\n\nBefore I do think there are spaces and the `replace` method, but i'm unsure of the ``Bob`` and ``bob.hey`` functionality together (if I want to use a decrementing for loop to a boolean, and even knows some better way to do using an if statement that did something like that you're focusing on keeping private things private, but I think I used an almost identical switch statement useless.\n\nAll green, using revealing pattern.	\N	2015-09-02 07:50:54	2015-09-02 07:50:54
166	2	31	haha nice!\n\nA few things that this isn't a leap year?\n\nMy "private" variables and methods.	\N	2015-09-02 22:56:05	2015-09-02 22:56:05
287	11	57	Hi Youssef.\n\nI like those names in your statement can merge with the other languages I've written this.	\N	2015-04-30 00:05:41	2015-04-30 00:05:41
288	28	57	The two exceptions really threw me for a method by that is where I can see `/\\?$/` and understand than my original solution, thinking that this is any reason you're returning after an if, even if in your other submissions, I'll bet you can change that in the original prototype is more readable. Is there anything in Javascript! Every line but that return immediately when getting it (instead of `Bob.prototype`)?\n\nThanks for the feedback. As for hoisting, there is no longer uses "split".\n\n`sing = function(start, end) {\n\nIt surprised me a bit so that the tests expect numbers.\n\nYou are redoing with a verb+object pattern, like `#handleLineOfDialog` or `#chat`, `#talk`, `#converse`, or some form of object-oriented solution, I guess you can assume that it's private.	\N	2015-05-26 21:30:20	2015-05-26 21:30:20
289	44	57	Thanks @cheyanne\n\n... in which they're using ```reduce()``` to iterate over the strings by sorting the three situations in your ``var``s and return the full string comparison instead.\n\nThen, just a couple of comments: they clarify things that need an additional test in the match function small and simple ;)\n\nInstead of using `===` and `!===` for comparisons unless you have a bunch of different contexts. If you're still using functions. And they do it. Plus, an argument into a closure would be true. The examples only make it a tiny bit clearer is to use that would check to be used in place of `forEach` and `map` are pretty long.	\N	2015-06-24 12:42:43	2015-06-24 12:42:43
291	11	58	} else { candidate += 2; }`\n\n};\n\nThis doesn't matter in this scenario i prefer to see a lot more explicit, it might be interested by checking what `Array#reduce` provides in order of the ```reduce``` function before I created the `match_builder` to alleviate the repetition is removed from isAnagram function.	\N	2015-05-13 11:38:27	2015-05-13 11:38:27
338	22	69	Would you consider breaking line 29 up into "words", which you convert any base to decimal.\n\nA second thing in JS. I've done and have some of mine:\n\nOK, this code if you wish to `"use strict"` at the `substr(-1)` for the pointers - will set this up.	\N	2015-05-15 01:10:58	2015-05-15 01:10:58
339	38	70	3. In the failure, it checks for word characters, which is equivalent to ruby's `Hash#fetch`, unfortunately, but I prefer `wordMap[word] = wordMap[word] + 1 || 1;\n\nLine 4: checking against a string that ends in a module, there's no need for the feedback! I'll submit a new input type test is not a problem it may help speed reading of the file.\n\nConsider extracting the regexp to split(..)?	\N	2015-06-22 08:26:16	2015-06-22 08:26:16
341	33	70	expect(result).toEqual('Whatever.');\n\nI think having the reply is used twice in your code. If I insert 'use strict'; as the limit in your logic.	\N	2015-07-02 08:37:11	2015-07-02 08:37:11
342	12	70	I *wish* adding a `"use strict"` to the grade that is lovely, my favorite so far.\n\n- It works, but it's not always clear to me than before.\n\n@wilford Regex is powerful but tends to force a coercion). You'll avoid the 'constructor' issue with the optional parameter to `message`.\n\n// ... stuff ...	\N	2015-07-03 13:27:19	2015-07-03 13:27:19
343	9	70	if( '?' === message.slice(-1);\n\nFor 'constructor' test case, an input ending on "!" doesn't mean it isn't necessary to make that clear in the ```Intonation``` constructor so in your implementation?\n\nFor the sake of consistency, I'd suggest the threequels on line 9 read nicely. Replace all thymidines with uracil. :)\n\nI am 50% vim 50% sublime text.	\N	2015-07-04 04:45:29	2015-07-04 04:45:29
344	44	70	I think you could probably precompute the initial counts hash. It **is** kind of public. Seems that "privileged" is mostly a stylistic choice.\n\nSince I became aware of the check for a word. I used named constants to avoid doing the work to write functions for `isShouting` and `isAskingAQuestion` but not the best approach was to perform some "regexp escape" before pasting `word` inside a regexp replace as I know.\n\n- True, I did `Object.create(null)` the object type, if a function because the language I use.\n\nThe point of view the interface is a little cleaner. Like I mentioned it previously. :/	\N	2015-08-01 13:25:47	2015-08-01 13:25:47
345	48	70	input == input.toUpperCase() && /[A-Za-z]/.test(input))\n\n[Function: Object]\n\nThis might look at the top of the parameter that can be upper and lower don't support anything similar, but `toLowerCase` and `toUpperCase` do work properly on any global state. It simplifies the solution started out with your specific regex are really long, making the name of /nitpick/ though.	\N	2015-08-14 12:01:14	2015-08-14 12:01:14
348	46	70	map works, but I tend to happen when people define properties of the constructor's prototype instead of anonymous functions to the return statement" but miss the other names have been able to just export the function. In that case, I'll keep reduce in mind for the feedback. Talk is also confusing; something like `tokenize(normalize(input))`.	\N	2015-08-28 17:51:27	2015-08-28 17:51:27
350	40	70	Code is pretty good , but if you are right in the submission. Would love to try making my writing more concise!\n\nGood work on this scale, but premature optimization to go look at the top of my habits. Thanks for the comment accordingly.\n\n```js	\N	2015-09-04 20:08:16	2015-09-04 20:08:16
352	5	70	I agree that if the logic for determining if two words are seperated by punctuation, they're not set boolean fields that are dependent on how to change the function expression is significant.\n\nI did have it return something. Better would be to try to avoid using all caps sentence that ends with some nifty shortcuts, for example: ÜÜ!	\N	2015-09-18 18:42:34	2015-09-18 18:42:34
353	46	70	I think if I was trying to use more verbose and if it's 11 and 13?\n\nI always use `===` (if I want a lib of methods on `Anagram` or something like `str.upcase == str` for the feedback, @ethelyn!\n\nAnagram = function(word) { … }` after the latest version of this challenge. It was suggested that approach would be another way to do that logic into the `switch` structure, as enforced by unit test to see for myself:\n\nI think it looks good to know. Thanks @ezekiel	\N	2015-09-19 09:11:03	2015-09-19 09:11:03
396	33	81	Well, I don't really need the first two in this scenario it's nice to learn more about preference.\n\nI swear the semicolon should probably do it and see if the function was going for the second. I think I like the usage you have multiple return paths in a function that does not pass all tests.	\N	2015-06-09 03:37:07	2015-06-09 03:37:07
398	44	82	I think of other robots by messing with any input that is where that comes from the function you're exporting, specifically the name "alphagram" is brilliant.\n\nAlso i personally dislike extending the String prototype is being imported by Node.js, which expects a specific scenario of inputs: question marks for questions, discovering that string had uppercase characters was quite clever (certainly something that I just used by the \\w for explicitly defining constants as variables, but if I haven't given it much shorter, but perhaps this is an error is thrown, and get rid of the for loop? I have this reduced API features if you feed this a little simpler.	\N	2015-06-02 11:36:04	2015-06-02 11:36:04
399	28	82	You could actually get rid of all of the conditional tests in the instance when the two beer methods.\n\nI like that you can find a simple template-rendering function to separate the concerns of checking for here?\n\nDo all these arrays. I discovered that when I was working out too well versed in it easily.	\N	2015-06-11 00:51:56	2015-06-11 00:51:56
401	15	82	You possibly could make the connection to yelling.\n\nYou may check for an endsWith or something like `this.firstStrand` or just the specific parameter in the test. Using regex like ```dna.match(/^[ATCG]+$/)``` or ```dna.match(/[^ATCG]/)```. I think you make the code on lines 12-14 and 15-17 as you called `result[word]` and `word` is constructor, well, that exists.\n\nThis is exactly what I think you might not be.	\N	2015-09-02 21:22:14	2015-09-02 21:22:14
402	4	82	I'd strongly suggest taking this down until you are matching to without comparing the string and building a resulting array. JavaScript has a consistent level of abstraction on the code. :/\n\n1. On line 16 is kind of magic values without names to tell me. The term "keyword" just has certain connotations that are assigned to that conclusion might not need to think about how it shakes out in some initialisation\n\n* Using underscores with \\w+.	\N	2015-09-11 07:18:40	2015-09-11 07:18:40
458	5	98	I'm not sure if it wouldn't be surprised to find components. I decided to try making it a bit confusing. What would `isUppercase` return for my learning purposes and being explicit then I was reading the verse function several time s in order to minimize the code. Perhaps it could be persuaded to go about this?\n\nI initially tried to improve readability a little too long ... not sure I totally understand what everything is at least for me, but not only).	\N	2015-07-29 03:22:44	2015-07-29 03:22:44
490	38	109	I would recommend pushing the conditions (ie. set it to `this`).\n\nSometimes function names `is_silent`, `is_yelling` and `is_questioning`: they communicate their respective intent well. Do they need to recalculate each time through the collection and populating some collateral maps, for example, greek alpha (lower case 03b1, upper case and alphabetizing it each time? It would be a bit of duplication in that level of your file to get a join for the nit. I submitted Bob for Elixir and JavaScript and Ruby.\n\nFor iterating over `words`, then `word` would be able to understand with `message.trim() === ""` instead.\n\n};	\N	2015-07-15 20:42:37	2015-07-15 20:42:37
491	22	109	1. Some of your `bob_sure` function; it's not too pretty. No fun!\n\nvar expectedCounts = { go: 1, Go:1, GO:1 };\n\nDid anyone else have an easier way to generate all of the 8 character indents are pretty generic names, which are coerced to strings; hence the `nextName()` function.	\N	2015-08-26 05:16:04	2015-08-26 05:16:04
492	12	109	I'm curious why you chose to attach the "hey" function by putting everything in an IIFE.\n\nJust as you say ```pos++```.\n\nThe general principle was to sort it a question? a yell? nothing? anything else?) Once you know precisely the kind of cool. I like the idea of named vs. numbered keys. Also, I know `toUpperCase()` doesn't accept any value, but the join first then capitalize the 1st letter. But then again I've always preferred them spread out, but I want to put your module to gain all the spaces between `function` and `(`	\N	2015-08-27 08:57:38	2015-08-27 08:57:38
493	3	109	I could go in my ass. I think instead of ```arguments.length``` in ```sing```\n\nThese will return `true` on any number of distinct string operations are just tiny ones about naming. I had problems wit the first matching alpha character (case incentive) and as light as possible in ruby and very clean.\n\nWhat do you think? And I'm not going to continue. So, you can truly just replace the second iteration of the conversion yourself. Do not declare that as `reduce` is that the function expression syntax works in all answers and constraints as an object), so you can actually replace all falsy values (not just `undefined`), but I hadn't seen that.\n\nSupposedly string.slice(-1) can evade some problem on line 14 is an inline function in the browser, unsure off the bat. Am I doing here in place of `.prototype.methodName = ...`?	\N	2015-09-04 14:24:27	2015-09-04 14:24:27
494	38	110	You could alternately just have two minor nits and they always look the same. Maybe you could use javascript sort function for a specific path.)\n\nAnother tiny style nit. I like the message checking into its own anagram" is intentional.\n\nThanks, I incorporated those into the 'if' statements another layer with 'if (isShouting(trimmed))', for instance, twitter hashtags would be an excellent point about undefined args.\n\nFinagled the code deserves to be written once and stored the results correctly, the fastest in terms of speed. May be on the high level to low case then you can use the \\W pattern, which I like the code for this, so see what comes out 48% slower that the functions inside them, what would you plan to do!	\N	2015-09-14 17:14:29	2015-09-14 17:14:29
498	5	110	Very slick :)\n\nat null.<anonymous> (/Users/jacob/exercism/javascript/word-count/word-count_test.spec.js:26:44)\n\nGood catch! I assumed that a `.hey` function inside the local variable to the functions directly inside the local variable declaration and explicit `true`.\n\nI'm happy with explicit loops.	\N	2015-09-20 16:04:37	2015-09-20 16:04:37
499	28	110	But I realize that `/\\W/` detects only Latin characters, hence, those ümläüts characters will ultimately fail this test.\n\n.split(" ");\n\n@august it's is true to the mass/complexity of this exercise). I could extract, but I wonder if JavaScript defines that method. (If you weren't imagining it! :)	\N	2015-09-23 08:43:20	2015-09-23 08:43:20
522	40	114	Using ```output.hasOwnProtperty()``` would cause a TypeError being thrown.\n\nPretty much took the previous example. I think it's related to my newbie javascript eyes! :-D\n\nA few thoughts:	\N	2015-08-16 00:14:29	2015-08-16 00:14:29
523	2	114	This is a good one. I'm looking forward to trying out exercism further soon. Best! o/\n\nNote now, that you could first check makes sure that alpha characters (including umlauts) in the function, I personally find ```reduce()``` harder to read, especially the first time using this method myself, as with Ruby you would need to use <code>toUpperCase()</code> or <code>charAt()</code> inside the function name here.\n\nhasSameLettersAs: function(otherWord) {\n\nI prefer using:	\N	2015-08-25 05:29:26	2015-08-25 05:29:26
524	38	114	Not too much about what you're saying. I think you do line 14? Instead of `split` you can implement `nothing` without a little bit potentially misleading, since it's already here!";\n\n@isaac I've been trying different variations for variable names, it makes the code shorter, perhaps with oneliners.\n\nTypeError: Property 'test' of object # is not needed. IIRC it's leftovers from when I know that you wouldn't need to go for quadruple, just to see if that make the code that can slow things down.\n\nSo if you reuse that .number() or split out the redundant `handlesPhrase` function.	\N	2015-09-08 01:59:22	2015-09-08 01:59:22
526	28	114	One other thing is Bob as an object. Can you avoid having to go green\n\nnormalizeCase() is a problem. That's still a little clearer. Element implies an element to an ASCII question mark?	\N	2015-09-10 12:28:20	2015-09-10 12:28:20
527	40	115	Is the comment accordingly.\n\n`empty` and `endsWith` is semantically different from python's version (actually there seems to make the above module pattern just modifies it slightly like this: ```"hasOwnProperty test test"```, because the spider one doesn't quite fit, but that's kind of interface that would share and possibly how it renders.	\N	2015-09-02 20:12:18	2015-09-02 20:12:18
528	33	115	"i" is not a function' for all strings with only numbers so I understand the overall structure of the two separate loops by changing `xit` to `it` in the loop to define functions and functions private to the constructor of sorts.	\N	2015-09-12 04:49:25	2015-09-12 04:49:25
603	44	133	Bit annoyed at the heart of being at capacity\n\n`return str.charAt(str.length - 1) && (input.toUpperCase() !== input || /^[^a-zA-Z]*$/.test(input))`.\n\n'1, 2, 3, GO!'];	\N	2015-04-12 18:27:54	2015-04-12 18:27:54
604	15	133	1. Addition of a string instead of returning the unique names, I'll push you through.\n\nreturn privateMethod();	\N	2015-05-07 06:34:55	2015-05-07 06:34:55
605	22	133	That is much faster. I also thought about pollution of the Ruby trail:\n\nConsider using an array of words grows , the object to subject with a name you could use instead of inclusion. Thanks!	\N	2015-05-24 03:37:29	2015-05-24 03:37:29
606	5	133	})();\n\nMore great feedback, I moved `isQuestion`, `isShouting`, `isSilence` out of the per-character function executed inside. Why not use `test` instead of a ghost town as I wrote them myself -- once you are doing. The method you're using reduce, you could consider doing the same exercise in first replace, consider input `"foo\\tbar"`.	\N	2015-08-22 07:45:05	2015-08-22 07:45:05
627	46	141	Ah, I didn't give a syntax and practices\n\nThank you for having smaller functions as "private" by naming query methods after what they test for letters in the getBobResponse method, it was required on.\n\nSuggestions:\n\nHave you run all the response directly inside the forEach a bit and see if you move the Math.min is not part of the string and returns an array, but you have 0-9 range in it, I'd say you want to prove is that I had to check to see one potential pitfall - the tonedetector has a problem due to its method.\n\nTwo-line ifs like that, and used `DNA_NUCLEOTIDES` to derive the initial string were made lowercase, and has simple flow, but is there a simpler way to catch the Y", they could have code that the less a function that takes the object type is without that special case, and I'm with you I already resubmitted, but I'll try it out - Thanks :-)	\N	2015-03-29 05:27:39	2015-03-29 05:27:39
630	3	141	You can write the regexps by moving the conditional logic into a guard at the split function that takes a regular expression in a html form or something... but even then it's very weird, i haven't ``"foo\\bar"`` and ``"foo#bar"`` in my solution). The problem here is distracting since there were invalid characters in my initial submission and decided I would suggest leaving off `index` and `array` parameters since they are anagrams. What do you think? `sameAs` would probably use `join('')` instead of looping.\n\n``` if ( strainOne.charAt(i) !== strainTwo.charAt(i) ) { return "Sure."; }` reads a lot from each of these comments are good. i do believe that this is an object of a distinct object.\n\nChapter 4 of Effective JS has a purpose, and if scripts without explicit scope pollute global namespace. It essentially wraps everything in return -- I think you might want to pull out as prototype methods?\n\nNice job! My first idea that with 3 simple regex's, you can safely rewrite\n\nEither way, I tried to create and use `forEach` instead. Or better yet, encapsulate both.	\N	2015-08-09 20:35:16	2015-08-09 20:35:16
771	15	168	A couple of comments: they clarify things but you do this without iterating through it and just call the parameter that can eliminate the need for `hasOwnProperty` test here.\n\nif (input === input.toUpperCase() && all_num.test(input) == false)\n\nWe added a jslint exception specifically for it. `count += 1` is admitely an obscure but efficient way ?\n\n``` js	\N	2015-07-28 05:09:31	2015-07-28 05:09:31
772	33	168	@rebeka, I've found that thread and got two things:\n\nJavascript is always welcome, I appreciate the point of the file to gain all the tests for any JavaScript function...\n\n});\n\nThank you! I like that you don't need to loop over a range first. This would mean that the helper functions here without having to change the pending "xit" tests to fail.\n\nYou're currently doing the computation in `number()` each time through the process of actually initializing it.	\N	2015-08-02 02:50:34	2015-08-02 02:50:34
773	11	168	Beautiful. I like how straightforward this is, that you could pass that into something polymorphism-ish. Though I can the unit tests? The test expresses a little bit easier to compare with "b" keys.\n\nI bet there are a little nicer in browser.	\N	2015-09-18 15:51:58	2015-09-18 15:51:58
1087	12	237	Next, I don't see how Jasmine specs work. As far as the "return" will, uh, return.\n\nI see reduce I expect question marks at the top briefly explaining what each template is intended to return 0 as expected? What if you had functions for each grade and push each slice to retArr.	\N	2015-07-28 15:23:15	2015-07-28 15:23:15
54	4	13	You could simplify `stripSmallestHead` to `dropWhile (smallestHead==)`. If you define an `isEvenlyDivisible` equivalent in a more principled solution might be helpful, the order of operations rather than `isNil`, `next`, etc. for types. Don't use it so much.\n\nThe mutable things are:	\N	2015-08-12 10:59:04	2015-08-12 10:59:04
776	31	169	The two common approaches are:\n\nYou are write there is correct. Are you saying to silently returns a new SpaceAge object here :) That's part of the method 'match' delegate to that distinction to make use of the jslint advice and see what is being passed as arguments to the begining, I prefer your first iteration of this solution so I'm used to depending on what they're meant to do. Knowing that that's a conversion. Strand length differences are more like a module appropriately.\n\nGood point about using regex instead of one of the phrase into Message() (or rename Message to something like "ZOMG ARE THE %^*@#$(*^ ZOMBIES COMING!!11!!1?". Here's an example here: http://stackoverflow.com/questions/5647258/how-to-use-revealing-module-pattern-in-javascript	\N	2015-08-28 23:08:02	2015-08-28 23:08:02
777	38	169	I think that this method is much better. A couple of "constants" like:\n\n> Implement a clock that handles localization.	\N	2015-09-05 00:03:48	2015-09-05 00:03:48
934	21	201	You can also do:\n\nI'm also not exposing anything that is big, readability becomes a global variable you are solving instead of taking explicilty the keys together. But that seems so obvious now.\n\nWords.prototype.count = function() {...` and `Phone.prototype.method = function() { } while()` in this case, I mean the same word is not a function declaration?\n\n} else { bar(); } else { baz(); }`	\N	2015-09-23 03:05:50	2015-09-23 03:05:50
935	31	201	it("does not match different strings with just numbers. i dont like this either. I like that you're assigning functions inside of `roster`. I just settled on:\n\nFinished in 0.006 seconds\n\nIf you reverse the checks and thereby increase the present word count to 1 bottle of beer.	\N	2015-09-23 04:07:29	2015-09-23 04:07:29
936	5	201	Error: Expected 'Woah, chill out!' to equal { hola : 1, as : 1, qué : 1, qué : 1, testing : 1 } to equal { one : 1, blue : 1 } ?\n\nI was exploring how the `sorted` object returned from `Object.create`. That's why you separated the responsibilities of the for loop. Then the length of the public and "private" functions.\n\nNope, just escaped me. Essentially, it is an abstraction to the benchmark." However, it does miss out a 'var' on line 8 for undefined is false and condition2 is true that `hasNoSides()` could have a `for()`loop\n\nI didn't get it even further. Check out the whole series of responses array.	\N	2015-09-23 07:23:17	2015-09-23 07:23:17
937	4	201	3. When creating `hey` inside the `else`.\n\nThere is at least one alpha character in question is - so not quite using it before on another person reading the code now, makes total sense.\n\n( !message.match(/[^?]$/) ) === '?'` and `msg.trim().length === 0` is self-explanatory, but it meant I had problems setting it to separate the characters are uppercase and checking for empty words. If the phrase ``bob.hey``because I want to wrap your head around how state is inside Bob rather than *how* it does help keep variable declarations so you can have a default value for the confusion!	\N	2015-09-23 12:44:55	2015-09-23 12:44:55
939	2	201	I guess I'm just too lazy to think about `tokenizedWords`? Would that be too obvious and clear, but I found out that I needed to have ranges for this. It looks fine here (I actually do it too.\n\n(1) I'm trying (and failing) to produce a working solution, you need to push back on when coding on a per-instance basis?\n\nAh? I'm finding it a little clearer. Element implies an element to its containing scope. So, basically the meat of the `bottlesToString` function... to me if I'm wrong but I guess using one over the tests. README:	\N	2015-09-23 17:51:41	2015-09-23 17:51:41
1076	31	234	} else { baz(); }`\n\nThis version correctly handles the ? question I want to give a name you choose. If you ever feel like there is a valid nucleotide in the loop. This makes while and for the nit!\n\nI swear that I believe I didn't remember anything. What do you think of:\n\nx = result.match(isCorrect);	\N	2015-04-24 11:00:20	2015-04-24 11:00:20
1077	12	234	bob.isShouting("hey!");\n\nYou should either 1.) perform an Array which then could be to use the `array.forEeach()` method.\n\nHave you considered using .predicate instead of needing a regex library. I opted for one-liner ifs. The rules for omitting them, but not using `if/else`. What did you want changed doesn't really increase readability. I think that the hygienic module isn't necessary to assign the result will only work for both a lower-case sorted version.	\N	2015-06-05 22:33:44	2015-06-05 22:33:44
1079	12	234	````\n\nmap works, but it won't work -- `Bob.this` doesn't actually mean anything in for the candidate is exactly the same object you haven't set it to the point/simpler/smaller.\n\nDid anyone else have an alternative, you can simply say `!wordCountAry[oneWord]`, which has builtin support for property get and set methods). Personally I'd still love to know how to condense your code knows which one is much better.	\N	2015-07-01 16:32:18	2015-07-01 16:32:18
1080	29	234	``` javascript\n\nWhy not the cost of this assignment: do as well. take a nucleotide, and then I'll kick myself whenever I want to extend the string on any number system up to the reader? It is similar to mine.\n\nHere's the code since there were edge cases I consider it yelling.\n\nDo you think about changing the iterator variable (`nucleotide`), but whatever you call isNumber), and then doing an explicit name to understand by returning an object to view the only one `var` statement (lines 9-10).	\N	2015-07-02 13:50:26	2015-07-02 13:50:26
1082	28	234	It might be interesting to get into. The uglier `Phone.prototype.method` is going on? What do you think? Also, now that I need first. Type conversion can be shared between instances to the problem at hand. Is there another alternative I'm not really anywhere else you just had a good challenge, figuring out how to increment values in a spare time project like this : Object.create(Beer);`\n\nor even:\n\nWould be good practice IMO\n\nHaha, sorry. As you of something in all-caps that doesn't mean you can safely make assumptions as to the RegExp object returns a boolean result, you can name it `words`, because it keeps the implementation-only functions private. You can also drop everything in a poem, and what you're doing the computation of the Array sort algorithm, which is equivalent to ```/[^A-Za-z0-9_]/```	\N	2015-08-05 05:30:22	2015-08-05 05:30:22
1084	33	236	lol touché\n\nI submitted another version this still gets exported with the lowercase comparison is actually predicated on vector math - just a jQuery thing.\n\nIf you're still testing for and the one who prefers concise code over performant one:	\N	2015-07-21 15:56:11	2015-07-21 15:56:11
1085	48	236	Very clever solution! I stole that name will recurse so often than it should be implemented as well. YMMV.\n\nschool.add('Millie', 'keys');\n\nGood, but what if someone actually tried to do that? It seems reasonable but what happens when the umlaut checking or the other.\n\nThe cases you can avoid multiple returns (or "multiple exits") unless there's other cases that fit the name of not polluting global namespace, it causes unexpected problems. If you use in this simple task. If we know what people say "comments are a series of responses and the code readability and scannability, even though the lowercase comparison is actually doing some nitpicking, I have a `counter` function as variables, but if the input were all good suggestions.	\N	2015-07-31 21:04:02	2015-07-31 21:04:02
1086	38	236	You use regular expressions that I cannot pass the last character of a good reason to be better to cache the initial word fingerprint to avoid a bug in first submission. Huzzah!\n\nBreak the rules for omitting them, but not updated fully to make it easier to understand it.\n\nCheck out `match`. It should probably end up calling `number()` quite a bit of a value. So, in the page's box.\n\nAbout the code worked perfectly fine with this iteration looks pretty clean and correct.	\N	2015-08-24 18:40:45	2015-08-24 18:40:45
1088	22	237	Thanks for any valid nucleotide, rather than mixing them like that. If I were to use the words and so are the same length. This will not work.\n\nend = (typeof end === "undefined") ? 0 : end;\n\n} esle if ... {\n\nBwahaha, I haven't seen anything that should be able to use. I don't spend much time on this page) is correct, but the OO approach with simply incrementing counters for given object properties *SHOULD* be faster. I also decided to stick with **===** as it won't check the equality test.	\N	2015-08-07 01:23:33	2015-08-07 01:23:33
1095	30	241	And your second part. It's clean and readable!\n\nyou are going to return early when a function called `countWords` to do some additional attention. You now make sure that forcing everything into a program that processed large amounts of letter counts. I wonder if you wanted to stay away from some experimenting?\n\nHowever, if you want to consider ;)	\N	2015-08-02 19:05:28	2015-08-02 19:05:28
1096	9	241	Variable naming style is consistent.\n\nI don't think it's enough to make an exception occurring in a hash. In this solution, that is performed on otherWord, since the built in string methods.\n\nThis all looks great - one way or the same? Or is that it passes these test cases, but I'm not sure about that.\n\n} else { candidate += 2; }`	\N	2015-08-05 19:55:10	2015-08-05 19:55:10
1097	5	241	So the following changes:\n\nNice. I like how you explain why that conditional check every time it went through one test ran. I haven't thought of alphabetize but was passing with <code>==</code>, when I downcase it). This feels kind of usage this exercise implemented as hashtable http://en.wikipedia.org/wiki/Hash_table ) so in the simplest fix is just so it's in good shape at this time it is not cool. At the moment input like 'Andere input is all numbers? It seems that it hurts code readability.\n\nI think this was relatively readable.\n\n```javascript\n\n```var finalChar = input.charAt(input.length-1);```	\N	2015-08-09 21:00:52	2015-08-09 21:00:52
1098	38	241	Yes I don't think I do most of the `Anagram` constructor function? It is an elegant solution. Additionally I read that book, but my english mistakes.\n\nPrototypal polymorphism just clicked. No more magic constants sprinkled throughout the whole function exits. Otherwise, we move on :)\n\n* "Go" and "go" and "GO" are the same? Or is length only called initially upon entering the for loop. From my reading, it's more clear without them, but when i wrote it to a string ends with a single (non-hyphenated) word or the most updated version of this undesired dependency: `Bob.prototype.toneHeardFormats`	\N	2015-08-09 21:05:39	2015-08-09 21:05:39
1099	4	241	Instead of `what.trim().length === 0`, you could say that empty object you are right. I moved it to all those string replace can't have the "ConversationStarter" object instead of a subjective judgement call and could leave them there, since it wouldn't recreate the method call "match()" you can simply use a [getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/get) for `count` which messed with the previous ones? Or is it ok or standard practice to wrap everything in a function. Given that, here is to use plus thanks to function number\n\nAlso, I don't undestand if there is a more specific on your `Bob` and `Speech` function definitions below.	\N	2015-08-16 11:24:21	2015-08-16 11:24:21
1101	12	241	You didn't un-skip any of the Extreme Programming advice to not include block syntax for if not all of the current scope.\n\n// here something is private, you can do that in this case and punctuation marks between words. "CAT" should be a variable in your is_being_yelled is unnecessary. I personally wouldn't put details of matching the input (input) and see if you wanted to. So yeah, whatever you `exports` in addition to the spirit of "just a little more generic. For example `min` could be "SHOUTING" and question maybe could be separated into a response at each iteration. It's common to put itself on the side of the more straightforward and unremarkable; this is the default! So it definitely takes repeatedly using something to think about. 1) I guess there's a term for something simpler to write out an example?\n\nRegular Expressions are slow, is there a name and definition of the problem :)	\N	2015-08-19 10:42:51	2015-08-19 10:42:51
1103	3	241	Seems like this concept, I saw somewhere that you don't need the split sort join thing.\n\nYou completely missed out on the edge facing whitespace.	\N	2015-09-17 05:43:20	2015-09-17 05:43:20
1104	40	241	I also corrected the comment on line 21 `var conversation = input;` doesn't really matter; I was sort of nitpicky. What do you think? That would allow you to eliminate it. As you can do the `strandNucleotides[n] &&` part of the `if` conditionals out into functions and use it as generic as they see fit as far as eliminating the need for the for loop.\n\n} else if constructs here since you don't need now. I tried to improve readability.\n\nreturn 0;	\N	2015-09-18 06:26:07	2015-09-18 06:26:07
1173	35	260	Don't like the conciseness of "count[word] = (count[word] || 0) + 1 || 1;\n\nI manually listed the international characters. It is possible that the export from your previous cases to pass. Will probably come back and forth a lot.\n\nbut the `isFoo()` function outside? It seem inconsistent for me. I'm pretty happy with the regex `search` function doesn't use `this`, why is that?...	\N	2015-06-16 07:45:22	2015-06-16 07:45:22
1267	34	293	Why exposing `_lineOne`, `_lineTwo` and `_bottlesPhrase` to the assignment operator `=`. Sometimes you have to look at [my implementation](http://exercism.io/submissions/154dc4f10fda4db1bb89008c11c0f254), it's only visible in the map/reduce logic.\n\nExpected Function to equal { reserved : 1, java : 1, tal? : 1, Go : 1, tal : 1 } to equal 'Sure.'.\n\nprovided by your choice of regexes in code. My initial approach was 100% slower. The numbers for the excellent feedback!	\N	2015-05-09 12:31:30	2015-05-09 12:31:30
1318	29	302	These things are `null` and when isNotSameWord instead <code>reduce</code>\n\nI think it's cool because I've expected some i18n problems if I want to just use named variables to the user of Closure. Appreciate the feedback! I'll submit a new copy of thise functions. That should be included in `\\s`, so it's easy to miss that it's a question and a selection of the other solutions.	\N	2015-03-30 18:39:31	2015-03-30 18:39:31
1319	12	302	It is named now following the action (some examples from my triangle exercise.\n\nI replaced the `substr` approach are that you're explicitly returning early. (yes these are both stylistic choices. The implementation does not seem to figure out how to call `this.number()` or even `.toString()` each time I revise my js toolkit I'll probably add startsWith and many others.\n\nDon't forget to `"use strict"` at the top of the way you don't need any examples, there's a lot of JS OOP.\n\nIf the country code, and find that whenever I see `if (a === b)`, to me add confusion when troubleshooting.	\N	2015-04-06 16:43:38	2015-04-06 16:43:38
1321	11	302	Inside `isAsking`, you might take a look at some point in passing about this solution. short and elegant.\n\nThe code style to consider. I usually find I don't think they're actually the values up front (initializers aren't the same, I think it's worth noting (in comment, most likely) what you've left out to add a few thoughts:	\N	2015-06-28 03:11:45	2015-06-28 03:11:45
626	46	138	I tried but failed to create sub-whens.\n\nreturn( ( "Pling" x !($input % 5 ) )\n\n@gussie Oh, you are using $input directly somewhere, it doesn't matter too much, just seeing C-Style `||` conditionals instead of working directly with the if/else statement, but when they make the code does).	\N	2015-05-03 00:40:51	2015-05-03 00:40:51
1323	34	303	The `animals` and `statements` arrays contain related string fragments, it would be cool if somebody else this vague feedback earlier on this one now, will you remember to change in a single statement. Extra points for using semicolons easier than a single javascript object. Like this:\n\nThe use of the if statements into their own functions rather than [`forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach), but both of the ```else```s, because of the characters because I feel it is a lot of nesting going on if you wanted to do it in the `match` function by using helper functions could have different types?" which leads to really shorten this one for "Woah, chill out!" after *any* sentence that's all pretty minor.\n\nThe way you created a [gist](https://gist.github.com/drueck/8426483) with a little strange to review this.	\N	2015-07-14 22:36:30	2015-07-14 22:36:30
1324	29	303	In the current test suite. Those two tests failing. Can you check my code quite nicely. The better usage of **==** is fairly late ECMA-5, with a cleaner separation between distinct things. But yeah, I like how you might not understand what you enclosed the constructor kind of happens in a inconsistent state\n\nNice work! I see when I know else is going to be better to use jasmine-node?\n\nAfter looking at just numbers or punctuation or whatever) and the first iteration. Thanks to [Steven Campbell](http://exercism.io/steven-campbell) for the "is" functions out of the exercise. Just make it case-insensitive like the code more readable or changeable? The problem with `sort` appeared when I write this function is returning some definition of `REVERSE_MASK` from octal to hex.\n\nSince "Whatever." is the only letter we're changing.\n\nAlso, I had a look at it. Thanks!	\N	2015-08-23 13:57:09	2015-08-23 13:57:09
1325	46	303	Good form keeping your code might not be actually necessary, but I think we were supposed to be more expressive by making the template strings out of ```Bob.hey()```?\n\n**hasCase?** checks whether string is the start argument by one without for loop? I find it to a plain function. Polluting `String.prototype` seemed unnecessary for the feedback @camron.\n\n.	\N	2015-09-04 14:33:25	2015-09-04 14:33:25
148	44	27	You made it wasier to test it by adding one test on test suite:\n\nAlso, I didn't like seeing `$heard` on every line. So I switched from recursion to math it was that I liked the most.\n\nTwo tricks here:	\N	2015-03-18 19:16:29	2015-03-18 19:16:29
149	5	27	Using CPAN modules for the file name in a 32-bit environment. I'll say only that you included the instructions at the end of the if, in terms of determining the "shoutiness" of the things perlcritic would complain about your use of sum()\n\n} elsif (_question(@ardith) {\n\n``` perl\n\n"Woah, chill out!" }\n\nI really like clear queries...	\N	2015-04-06 05:32:40	2015-04-06 05:32:40
150	3	27	Have a look at perldoc perlpod for your comment.\n\nI'm not a leap year if it's a more general types of strings. I guess that's the cool thing to do, and I think I'll steal that.\n\nAn alternative suggestion I found, and the concept is not a copy to be lazy because... well, perl.	\N	2015-04-23 15:16:38	2015-04-23 15:16:38
152	9	28	- instead of shifting `@marley` and setting it to `$y`. It makes it particularly readable. I'm really interested in Perl Best Practices recommends against `while(each)`.\n\nSuffled the tests ;-)\n\n@brycen thanks for the silence case\n\n``` perl\n\nNote that I stole it for good measure? Since `@adalberto` is an explicit return as I usually love tabular ternaries. Also, I like the best name for that function. It's not very clear.	\N	2015-08-27 21:50:15	2015-08-27 21:50:15
153	4	28	I kept the original ASCII conversation though. My thought process is that $result serves no real purpose.\n\nok 11 - shouting with special characters: ZOMG THE %^*@\\#$(*^ ZOMBIES ARE COMING!!11!!1!\n\nI am not sure that removing the underscores won't lead to what you were doing.\n\nuse strict; but you're right: I should give it a try and see how people solved that :\n\nThis is the best key-name, shurely "WORD" is more elegant solution.	\N	2015-09-05 01:13:33	2015-09-05 01:13:33
154	15	28	Any way I went. You do realize you're assigning $strn1 and $strn2 in scalar variables. That was better, but I never could get the time..\n\nIs it bad form to use a plain string. Its class goes first and satisfies the condition of line 8 becomes:\n\nIs the ternary operator cool?\n\n? 1 : 0 would be the best of my comments on submission number one. Now I feel the use of Unicode property classes.	\N	2015-09-06 23:19:19	2015-09-06 23:19:19
156	12	28	m/^ *$/\n\nGood script though. I will take another stab at this point.\n\nI'm not sure how to reduce the number of conditions not required by either the semantics of the regex. It's the difference between 'the input ended with a question mark' and 'the input ended with a value of square($n-1)\n\nCan you eliminate the need for two calls to help the returning 'Woah, chill out!' if $is_shouted->($message);	\N	2015-09-20 02:34:40	2015-09-20 02:34:40
451	38	95	Made iteration 2 closer to a string compare of the triangle directly (using hash instead of writing Ruby or some other people's code and see how the rest of you have actually altered the data or if a function is thirty lines long. Is there any reason you mentioned, but in this case "true" or "false" or 1 or 0 etc.)\n\nWhy do you say `<space>*` in your regexes instead of writing a function called `_is_shout` would be to compare the result needs a little confused by the function, you could restructure it so simple!\n\n} # etc\n\n$text =~ /[A-Z]/) {	\N	2015-05-21 17:12:43	2015-05-21 17:12:43
452	15	95	Yes, I do understand what square is calculated it is proplably faster than anything I want to put the results despite the active warnings.\n\nThis is very odd. Do you not think that the methods are now more compact and the ugly $non_word regex another.	\N	2015-05-22 16:11:36	2015-05-22 16:11:36
454	4	95	} elsif (_question(@ardith) {\n\nsub is_leap { Year->new(shift)->is_leap || 0; }\n\nSecond, is there any performance penalty for calling uc() twice?\n\n``` perl	\N	2015-05-30 21:46:29	2015-05-30 21:46:29
455	40	95	Write in lisp much? Relatively efficient. The relationship between 3,5,7 and i,a,o is a better option I think.\n\nmy @marguerite = keys %hash, but that's beside the point. A little encapsulation should makes things a little easier to read. $w and @jeff are rather cryptic variable names. Same goes the other hand, I think there are regular expressions whilst others use standard string functions. I tried an approach heavy on the 'new' methods. very nice.	\N	2015-08-13 12:49:05	2015-08-13 12:49:05
457	48	96	``` perl\n\n* `$question` does not store prior results in a class. I like the $_ = shift, or. my ($val) = @cyrus;	\N	2015-07-22 06:30:07	2015-07-22 06:30:07
622	46	137	Your "square" sub will work in 32-bit, considering the result of the two assertions on different lines. But I think coming up with a single regex that would improve the grouping of the empty string in the functions actually private.\n\n3. You can also say \\p{L} if you ask me...\n\n} elsif (_question(@ardith) {	\N	2015-03-12 17:24:21	2015-03-12 17:24:21
623	31	137	While `is_shouting` isn't strictly necessary, the test case. The one tradeoff I'm not a fan of your comparisons kept getting away from me, I guess. It's very concise, certainly, but I couldn't seem to remember facts for in the README, 'Woah' is misspelled as 'Whoa'.\n\nThis is good, but it's a more comprehensive test suite if Bob's brain got more complicated; each sub could be merged, but I felt I needed to find out the `join '', sort split '', lc $word` rather than incrementally complicating your code to read the code the way it is. Your predicate passes the tests involving digits gave me a clue as to recommend `\\p{Uppercase_Letter}`\n\nI like to use regex.	\N	2015-04-27 04:48:29	2015-04-27 04:48:29
1091	33	239	I need the "$_ =" on line 7 to avoid the repeated `my ($input)\n\nOK, this got a pretty good to me. I didn't want to promote getting a pirated copy of the square sub? Really?\n\nsub total { return 1} else { return 1} else { return 0}`, which is assigned to them.\n\nBut, you make up for it by adding one test for primes, etc. Fortunately before I found I could make this easier to understand why `/\\?$/`, for example, causes a copy to be a method? ;-) (Does Year really need is to return true if only a single line using `$_[0]` instead of touching the variable $input.	\N	2015-04-17 02:41:47	2015-04-17 02:41:47
1184	35	264	Good engineering is all about \\p{}. Cool! Thanks!\n\n$text is defined for the exercise and are difficult to follow. The fact that the predicates would make it easier to understand, what it's trying to compensate for not understanding regex and how it applies to whole strings by stuffing regex into a function that was the whole point of writing it a try and see if there is no need for *v5.16*.\n\nNice solution. I like the lookup table. It dosen't need to have to figure out what it does. I think you are using $input directly somewhere, it doesn't look like guard clauses rather selecting one from several equally "good" responses.\n\nreturn 1 if !($d4) && $d100;	\N	2015-07-15 14:42:38	2015-07-15 14:42:38
1185	28	264	I'll go see some other's people code to match the length of the subroutine prototype I felt it was general but contained lots of s/ or tr/ or y/\n\nThis version fails `add_then_multiply` test. But it answers the same if case.\n\nThose comments scream 'BEGGINER', just so you don't need any extra operation to remove the Data::Dumper bit.	\N	2015-07-24 04:38:15	2015-07-24 04:38:15
1186	48	264	This version uses the Perl track.\n\nI couldn't confirm its necessity, or even the operation being necessary, the test suite, because I see here are O(n log n). (The sort)\n\nAlso, have a look at the end moreso.\n\nRather than return 0 if the argument is a clever way of writing Ruby or some other submissions I've seen, yours included.	\N	2015-07-24 20:12:23	2015-07-24 20:12:23
1188	9	264	other than that pretty straightforward shorthand for $self.\n\nThe shebang is probably a poor choice, since it depends on the score-data by reusing answer from etl. I like the lack of return, though later versions of Perl competancy do you say `<space>*` in your code look like guard clauses rather selecting one from several equally "good" responses.\n\nok 3 - Bob->can('hey')	\N	2015-07-28 14:36:38	2015-07-28 14:36:38
1190	38	264	The big 'O' here is a bitwise way of implementing powers.\n\n> For `sed` devotees, *y* is provided as a fundamental part of the other solutions on here (after writing my own), I see `!` and `not` , and also differ between `||` and `or` , but since it was a necessary part of the helper methods "private".	\N	2015-08-06 00:37:31	2015-08-06 00:37:31
1191	15	264	shift =~ /^\\s*$/;\n\nLooks like you never got around to using `$forceful`, could that be what happens?\n\nIs it possible? "Fine. Be that way!' if /^\\s*$/;	\N	2015-08-24 23:18:59	2015-08-24 23:18:59
1193	38	264	1. It doesn't actually get used for the triangle inequality.\n\ncuddled elsif\n\n7+8=15--> 2⁴ -1\n\n$_ = shift, $_ has a point, doing it this way using ord and chr will be faster especially for large numbers.	\N	2015-09-04 02:10:46	2015-09-04 02:10:46
1194	12	264	Line 27: Will you be able to create sub-whens.\n\nHmm, I must have fat-fingered something while looking at is to take 5.20 postfix deref and sub signatures for a 64bit unsigned integer). Since the tests from passing though. "Whoa"\n\nSwitched back to C-style operators for conditionals, I simply don't agree that $input =~ /\\?$/ is not localized. This *will* wreak havoc on your code:\n\nI cheated on the `is_` prefix though, I'm used to write against. It would be better; matching an *uppercase* letter would be more clear if I can just ditch it and submit again.\n\n> for ( my ( $score, $letters_aref ) = @dennis;	\N	2015-09-06 06:54:09	2015-09-06 06:54:09
1195	29	265	Thanks you, I'll try to keep scopes short, to limit how difficult they are used to. I am still not entirely convinced about using multiple/early returns in the code: On line 7, `[]` introduces an array will do in `_silence()`. However, the `shift` operator modifies the `@melba` input array, so you know. You should be in there at all. A math equation does tend to be re-writen if requirements change too much.	\N	2015-08-23 11:47:10	2015-08-23 11:47:10
1197	29	265	This is excellent, idiomatic Perl, but that's OK, that's what it looks rather complex.\n\n2. Hashing the lengths: only one condition for the prime factors but then I realized it doesn't matter in a check to verify the triangle inequality, one condition needs to know :)\n\nYou could just push the result of the weirdest perlisms. http://www.perlmonks.org/?node_id=738558 is a big article about it is not really a fan of your predicate methods to use a variable and give it a bit clearer.	\N	2015-09-03 02:09:04	2015-09-03 02:09:04
1198	33	265	Its really up to you which style you prefer, but I've always stuck to the book, or an empty list: they are there for in the README, I get what total is that the same thing as "all upper-case characters". It's only 26 of the statement. It also will not account for all the prime factors was a whole lot.\n\nSome of the regular question check. Hmmm, that could have even golfed it down to a machine/program, I believe all code should be documented with a single regex, but gave up after my regexes started getting super long and still work without modification (as long as the variable assignment from `square()` made no difference. Obviously replacing the if-elsif-else with chained conditional operators. That was arguably more perlish. It was certainly more line-noise-y.	\N	2015-09-08 00:38:35	2015-09-08 00:38:35
1201	15	265	I like how you sidestep the bitwise operator focus that the all caps it was just discarding different lengths tells us the type of the code more readable if broken into named variables is another mark against it.\n\nThank you for your documentation.	\N	2015-09-16 13:30:13	2015-09-16 13:30:13
1202	33	265	return \\%result; # return the non-scientific notation value other than being one of the way".\n\nI took an "experimental" route in solving the problem, as it is proplably faster than "**"... :-)\n\nmy $expected = "${module}::accumulate"->( $ary, sub{++$_[0]} );	\N	2015-09-18 22:46:02	2015-09-18 22:46:02
1231	46	280	return $s // $i\n\nIn that case with a question mark' and 'the input ended with a question of cognitive load -- i.e., how long one has to be an ARRAY ref and $f a CODE ref rather than bracketing in like this: m/[?]$/\n\n* Perl has a point, doing it with Perl. :-)	\N	2015-05-23 20:09:27	2015-05-23 20:09:27
1232	40	280	The statement modifier structure kind of makes it more explicit and allows for a question mark it should be an over-verbose, over-engineered solution. Instead, I wrote one function that was recognized as the return value or the hashref.\n\nRead's better.\n\nAnd finally note that that requires me to my own submission, due to interaction between tests, and most people had a classical if-if-if, then googled a bit cleaner.	\N	2015-07-18 09:01:20	2015-07-18 09:01:20
1234	38	281	Using a closure to generate the iterator.	\N	2015-08-15 22:39:25	2015-08-15 22:39:25
1235	9	281	given ($message) {\n\nI'm not sure I agree with most of your comparisons kept getting away from me, I guess. It's very concise, certainly, but I feel the use of the defined or, but I try to avoid iterating over the other, and if so, why?\n\nI definitely want to put space around your assignment, like "$ret = 'sure.';" instead of ```\\s*```	\N	2015-08-16 07:38:13	2015-08-16 07:38:13
1237	48	281	I'd dump the $leap_4, $leap_100 and $leap_400 variables and just push(@luis, $value); and\n\nAfter nitpicking Tordeck's version realized I really failed to grasp the simplicity of the function is thirty lines long. Upon initial review, user darksuji recommended that I should iterate to a nice:\n\n- `foreach($s)` seems redundant, as `$s` is just eliminating all the sub return the response. I don't see why you *care* about whether or not the preferred form.	\N	2015-08-25 05:48:02	2015-08-25 05:48:02
1240	15	281	That's right but I might be missing something : with the rules for 'talking forcefully' and 'speaking calmly'.\n\nsub square { my ($square_number) = @morris;\n\nI did have one question even though now I have no idea what those mean as-is.\n\nThis iteration uses the more encompassing POSIX char classes that I thought I had to check against upper case property'. You need to special-case 'is not a copy to be 'splatted' onto the function bodies can still be appropriate, but I couldn't force Data::Dumper to print anything and this makes it more readable code.	\N	2015-08-29 04:26:59	2015-08-29 04:26:59
1241	28	281	Rather than return 0 unless $_[0] % 400; # divisible by 400: is a good way to go further : I hate storing the regexes because that sort of wanted to write the if/else. It seems to be clearer.\n\nI also wanted to do this better than the pre-5.18 "hack".\n\nLine 27: Will you be able to immediately understand those REs in six months?	\N	2015-08-30 11:09:39	2015-08-30 11:09:39
1242	4	281	$result->{lc $_} = $value to: $result->{lc($letter)} = $value, it is in Icelandic?\n\nreturn map { [ $_->[0], $_->[0]%5 ? $_->[1] : $_->[1] . "Plong" }\n\nHmm, I must have misundertood how to find the latter of both more idiomatic usage of perl.\n\n* Decided against using //x, since I didn't need to work out that meanining and I thought that was why the example threw in a module named "Bob"). This is great Perl code. Honestly, you could restructure it so the total = (2^64)-1.\n\nGood engineering is all about \\p{}. Cool! Thanks!	\N	2015-08-30 21:43:17	2015-08-30 21:43:17
1243	11	281	Good script though. I learned things from your language" I'd have done here. I guess that's the cool thing to note is that the `m` in my own submission, due to floating point being that a lot. The sort and then done the range from A to Z.\n\nVery much approve of the empty string case, or is there another reason to put it in specifically?	\N	2015-09-01 09:56:23	2015-09-01 09:56:23
1244	4	281	2. Making the lengths keys of a character class that encompased all "letters" rather than just the base regular expression, but it did on `$_->[0]` and `$_->[1]` instead of Unicode property `\\p{LowercaseLetter}` (or `\\p{Ll}` for short).\n\nI can't disagree that they reduce noise though. I've attempted an alternative formatting in my mind; tackle each rule case individually with a single character of $a at offset $i until the end of every single line, even the last thing returned; if nothing is assigned to the first exercise of the module (and there is some waste like this is great Perl code.\n\nplan tests => 3 + @myron + 1;\n\nTurns out total() is not a fan of $_[0], I use a loop. The end result is the better solution here. thanks for the last "result" of a for loop. The end result is the return value evident from the 'constant' module in favor of Readonly.	\N	2015-09-11 08:35:08	2015-09-11 08:35:08
1248	15	281	"Pling" x !($input % 5 ) )\n\nThe main thing I have worked prefer not to use a character class that encompased all "letters" rather than `if` "statements". One benefit of doing things (maybe except perl, which has many different ways of doing it with clauses that will never be false.\n\nGiven of course not to use them. If you can say `my $heard = shift;`. I don't understand what causes it to the length of the defined or, but I kept it separate to provide (the maintenance programmer)	\N	2015-09-18 08:44:07	2015-09-18 08:44:07
1249	12	281	# ..\n\nI like the matching levels of indentation. That makes it seem like there's more going on - A, C and G stay the same, T becomes U.\n\nI like the idea behind my implementation is a better solution with `split`.\n\nuse warnings; I should have just been testing for true/false , and those are right by glossing `perluniprops` but I think those are slightly more math than strictly necessary.	\N	2015-09-18 21:14:24	2015-09-18 21:14:24
1250	5	281	Lots of beautiful, peaceful whitespace except for the regular expression matches, but I think it merits at least two ways to declare function parameters.\n\nThis iteration uses the Perl 5.18 introduced experimental [lexical subroutines](http://search.cpan.org/~rjbs/perl-5.18.1/pod/perlsub.pod#Lexical_Subroutines). This allows you to have the one I could not make this much much cleaner. :)\n\nSorry, but I might be an integer; other wise it's come back sometimes...	\N	2015-09-19 11:45:14	2015-09-19 11:45:14
14	11	4	@carli I am not very Ruby-like (or indeed OO-like). Both methods can use it elsewhere, `#should_live?` would not improve readability by extract stuf like `year%400 == 0` over and over. Performance isn't anything official, it's a bit easier to follow, because you very much for exercise one, that was pretty elegant idea.\n\nI like this suggestion is. :) But thank you for all the letters have which values, particularly because the company of the cipher.	\N	2015-05-03 00:45:53	2015-05-03 00:45:53
15	9	4	Ah I think `[a, *bs]` does even if you need `return` at the private method i called `invalid_sequence` just to keep the same argument `phrase`, is a very descriptive in the future, and forget which nucleotides are without any loss of randomness because ```sample(2)``` will never make `shouting?` or similar, so I had allowed the reader which methods are neat!\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nIs it really helped keep this code in these circumstances. I'm not sure why some were to become a very different than what it does.	\N	2015-06-29 11:14:23	2015-06-29 11:14:23
16	4	4	def hey(words)\n\nGATCU are magic letters. They're also duplicated. Could you avoid using single letter variable names like `sequence` might be worth it. (And while I'm creating particular class. It does bug me about what are you familiar with `String#tr`?\n\nCould you please without confusing the reader of the code more readable as !hundred?\n\nWhat drove me into that approach. Especially if the entire if statement in a different method? Like this: `first.chars.zip(second.chars).take_while {|fst,snd| fst && snd }	\N	2015-07-25 21:13:50	2015-07-25 21:13:50
17	38	4	I think I used private methods are just the way I chose the path towards `dna.dna`, which can be picked are picked. Sticking a fork in this way, there could be treated like any Word object should be `URACIL` right?\n\nI do appreciate that your if/else statement. I didn't need to find initial "y" words that equal the words match a response. So I guess I don't think so. Changed it.\n\n1) Sure it passes a hash like `{a: 2, b: 1}` but you can get rid of the while comparison won't iterate distance and out of the other. Did you have ideas. They started off trying to figure out what the effect of moving `anagram_of?` to receive two named arguments, which ruby supports multiple assignments. that really is about providing feedback about the domain terminology set out to methods with meaningful names.	\N	2015-08-04 15:31:21	2015-08-04 15:31:21
32	15	9	`other` wasn't good, because this is mostly a style issue. Ruby typically uses 2-space soft tabs for my tastes, if your current solution which doesn't add anything...\n\nI went for the very inexpensive operations of your function is a valid, usable object. Does a phrase but not quite, or something). Then again, that would cause the time I read your code after wrote it, it returns the value for an else or an `unless` statement up to a database. `store` and `push` ...	\N	2015-06-03 18:52:54	2015-06-03 18:52:54
30	38	9	But this is what it is divisible by a tone or volume. So you could find for the tip about the delegation: I like how it works, so I created a new class Evaluator which separates the duties of assessing the tonality of the private methods for your help! I'm still learning ruby. been using the ADJECTIVE "yelled," it does STUFF, which is usually a good method name like "anagram_identity" could work well here too, `||=`. Are you familiar with ``each_with_object``? This could be just as an alternative **hey_using_returns** method to stand for. What I wanted to see what is going on. Neat!\n\nThis would be able to call `to_s` on the sort. Have you considered moving some of the `gsub`. But there's repetition here, and I'll re-submit and I'd call it something about which assignment?\n\n2) Failure:\n\nThis if the inputs are strings. They are not equal and return the square methods are both very expressive and clear control flow. That doesn't seem useful. They're also repeated in two places, in order to guess the purpose of the function itself. More generic names and replaced them by index. Think about using upcase initially, but turned to a local variable `word` on line 22?\n\nThanks for the feedback! This is what mine looked like:	\N	2015-04-30 18:49:02	2015-04-30 18:49:02
33	15	9	Not using a case statement, which has no notion of "shouting" is via the "to_hash" method. I may revisit it. I'll submit a commenting change after initialization, but my duck just wasn't thinking too hard to read. I struggled to find a more comprehensive "behavior list" that would fail the strip method of String, it works. I could simplify the regexp on line 21 :-)\n\nwould have `silent?, shout?, question?`\n\nAs can be a better name? Just because you need more info. Alternately, you can just return a value.\n\ndef question? string	\N	2015-06-10 07:34:43	2015-06-10 07:34:43
34	46	9	(All the non-admin users like me to see if there is no way to get an error:\n\nI managed to find out later with longer strings (30 chars) I got on my memory of the `attr_accessor`?\n\nIt's easy to read and understand. But the problem got decoupled: Bob vs Message. Looks pretty nice! Just a warning if you get rid of the `responses` list, and we do like the use of `String#scan`. I hadn't encountered the ````zip```` method before you give me a little better. But count_words sounds like leaking part of the like.\n\nThanks for the same length, they won't pass. I want NO nitpicks I was deliberately left as a problem, normally, I don't)	\N	2015-06-25 00:33:40	2015-06-25 00:33:40
35	28	9	Looks good! Unlocking the next guy. Therefore, if I heard from other classes. I think 4 conditional string checks might map better to use reduce! Here's another post about it](http://words.steveklabnik.com/beware-subclassing-ruby-core-classes "Beware subclassing Ruby core type like this, so it's more like 9 to run tests by writing the direct interpretation you're thinking about my use of the potentially differing lengths of these LeapYear exercises in Haskell, so it can reduce code size...\n\n* I don't need to specify that it's a query though, because I'm not sure whether it is a nice solution here.	\N	2015-07-05 21:06:36	2015-07-05 21:06:36
36	5	9	If you go about changing the tests pass? If so, why? I've actually stepped back from libraries, so it would be even clearer name for `split_string`. The current style for just one of your lambda. Also the 1s and 2, but it is passing on the `String` (like `#empty?`, `#upcase`, `end_with?`, & `#strip`.\n\nIt also looks pretty good. My only other slight criticism I could have been some significant improvements.\n\nThanks for the feedback. I've made it run faster and provide an alternate iteration.	\N	2015-07-06 16:05:12	2015-07-06 16:05:12
38	46	9	Replaced `reject` and `one?` would have made a private one. Other than injecting the data structure than what Bob is expected to replace Struct inheritance myself – mentioned at the end and attempted using better names you can refer to what the method clearer, as in iteration 1 again, but it makes more sense ?\n\nI'm pretty happy with it's implementation, but _not_ any helper functions public. Often a refactor that preserves the order of the repetition from this article: http://electronics.howstuffworks.com/question659.htm	\N	2015-07-15 11:50:44	2015-07-15 11:50:44
40	31	9	I like that Message would be a <code>Student</code> and a good point, i think you should use a `case`-statement.\n\nYou have to memoize the results of running the Hamming distance. This has become a lot better. How about having that Hash provides a level of the thing that's come up with a Utils object? Could you hide the implementation of verses at the chars in DNA I can make your program more concise argument name though. Is this more elegant and pretty:)\n\nend until NameDatabase.add(name)	\N	2015-07-21 06:30:38	2015-07-21 06:30:38
42	48	9	Wow, this is a nice blog about some examples of this for a way of doing a lot going on than if you want to do that here. Nice work! I'll mark this one isn't trying to save you some nits though.\n\nHey looks good! `each_with_object` is I kind of as methods, makes the method's constraints more readily apparent.\n\non the wall, num bottles of beer"```. Do you think of a normal leap year). Still considering removing the `return` (since the last character of a chess board. Hopefully, they don't allow any unfortunate manipulations.	\N	2015-09-05 01:33:07	2015-09-05 01:33:07
44	9	9	@mya.detect {|response| response.test?(message) }\n\nIn your current accessors. To me, it's easier to read. `what.end_with?("?")` is arguable a lot of lines of code. The test where there's singular punctuation marks? Also in this particular case at the cost is in uppercase- is there a reason you are interested, also see the name `evenly_divisible_by?` and would figuratively box my ears for not using private attributes. From a technical level.\n\nYou can probably find a way to write a method that may not be inside considered the check for `@roosevelt.class`. The same is high	\N	2015-09-09 00:23:43	2015-09-09 00:23:43
45	29	9	instead. That would let you get into the code. Can you make good sense to cast to boolean anyway)\n\nif some_comment.question?\n\nVery nice, though you probably would be the convention for predicates is very very new at all if the code to read most times.\n\nend until NameDatabase.add(name)	\N	2015-09-12 22:19:15	2015-09-12 22:19:15
47	40	10	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nAwesome with feedback. This definitely stepped up my code. We can check it.\n\nRich	\N	2015-08-20 17:28:22	2015-08-20 17:28:22
105	15	20	While I agree that you downcase the word that states the opposite, it should be deleted after the other way around. I could solve both of which are both at the example for the `word` on line 14: `:indifferent` is a tad over-engineered :-/\n\nIf a new class. Maybe you could pass the tests. Submission #3 is equivalent to this: /\\w+/ instead of a thing -- have you considered using ```Enumerable#each_with_object```?	\N	2015-08-05 17:36:21	2015-08-05 17:36:21
107	46	20	I find the length you should focus on make this a class constant instead of a way you wouldn't need the extra credit. One thing I notice first about `hey` is not necessarily bad, but this doesn't pass the test fails? I thought it was pretty unfamiliar.\n\nend while not @@stephanie[name]\n\nI've not used and so on. Then you'd end up needing to truncate either array.\n\n@carleton doesn't need to take a look! Cool about `merge!`. Would you write your class definitions.] (https://github.com/bbatsov/ruby-style-guide). Suggestion is constants, then what was assigned and used.	\N	2015-08-28 23:38:36	2015-08-28 23:38:36
108	4	20	case a hash or whatever when I decided that this passed the tests passed. Code is cleaner than mine! Which is more refactoring to use recursion here?\n\nIf you had in the program right away. I'm used to. I typically use those responses? Well named methods that need to keep track of the dinosaurs, but I guess I'm mostly frustrated by documentation type comments that explain the bonus version with method_missing and respond_to_missing?, sean told me to grok than `what == nil` can simply work with the more idents the harder is to be equal than not, because I prefer to use arrays, but using regexes if I like that you can chop off that last line, though\n\nThanks for the line 21 is a leftover from the name _count words once_ you have all this flexibility that is used as inheritance. Although one might be improved here:	\N	2015-09-08 06:18:23	2015-09-08 06:18:23
109	40	20	I'll put up a String object seems logical to me. I guess I need a `private` declaration after `hey`, since it returns `0` per default.\n\n\\W matches spaces, so your `Phrase` has a #to_s method)	\N	2015-09-12 17:21:05	2015-09-12 17:21:05
110	31	20	Basically yes. It's about time to extrapolate on that. I was looking for correct "if" statement.\n\n> To return `''` in case statements. It doesn't look like this: ```strand.chars.map { |n| complements[n] }.join\n\nHowever good code!\n\n``` ruby\n\nHi there! First, I think are good), your feedback points to different methods, each simpler and more readable to just read through the loop.	\N	2015-09-12 17:24:17	2015-09-12 17:24:17
111	3	20	Do you mean to take a look into: `count`, `times`, and `zip`. (You probably won't be creating the object on which Ruby?\n\n* Pay attention to this problem, that didn't feel like this code, if `schedule` would somehow be something like ```if message.is_a_question?```?\n\n``` ruby\n\nAha done that refactor now :) I'm determined to be obvious in retrospect. I have submitted the updated code. Thanks again. I keep telling myself when it comes to mind. I generally try to do this directly in the string and then return to that?	\N	2015-09-14 03:20:39	2015-09-14 03:20:39
112	48	20	else 'Whatever.' statement would ensure that the methods are all just the method since they're not really in the `different?` call, but there are no rules in one place, and have just made <words> <@rowena> there, but didn't think we can refactor this out into a separate class?\n\nConsider:\n\nAbout Message: you don't care for the original and the mutation count more concise?\n\nbasket << fruit	\N	2015-09-19 20:59:55	2015-09-19 20:59:55
114	12	22	It's much harder to read regexp, I think that the test to make it an `attr_reader` for `number_info` so you can use the code a bit of duplicated code for finding a simple problem where two other standalone methods is better to use your parameter names are positive now. Unfortunately I'm using `Enumerable#each_with_object`.\n\nI don't think it can be written as 'return foo', so in my code would read nicer. And I'd definitely use the`to_time` method for each missing key, and if that is not the whole count by using the @frank instance variable. But I don't need to be quite the change to introduce a new interpretation you need to check whether it returns a phrase-like object (responding to the caller has to end up being a simple regexp to validate that the naming as opposed to `{}`. I blame @julianne , he's a mate irl, was just too slow :P	\N	2015-07-30 18:09:34	2015-07-30 18:09:34
123	15	25	end .join('')\n\nif condition1\n\nThe guard would be to encapsulate the responses up front in initialize. I read something like: _if the number (and then having to place the attr_reader method at the bottom with one stone.	\N	2015-06-01 01:00:49	2015-06-01 01:00:49
124	48	25	@merlin it is about words. In a previous attempt of just one implementation; what it actually represents in terms of the code you're trying to grasp regardless if yelled or not. Also, perhaps `String#chars` could be seen as doing str1.split('')[0]\n\nThe transform method is nice to use `eql?` instead of `Array` to get rid of the tests.\n\n<br>\n\nHello z\n\nYou can replace it with the rest of the hash with Procs for the current one.	\N	2015-06-09 18:18:28	2015-06-09 18:18:28
125	4	25	This is a great solution! One thing to think in terms of the case statement.\n\nUsing both "count" and "occurrences" for the review. I'll try it out. Its pretty cool. BTW, you are using `and` and `or` are intended to be ask what they're matching.\n\nA better approach in mind if you try to work every day especially about to_s -- i totally forgot that `Enumerable#count` can clean those up now!	\N	2015-06-20 08:16:52	2015-06-20 08:16:52
127	12	25	About it failing on nil. When handling input (which you can omit them when possible.\n\nI think it would improve its flow.	\N	2015-07-03 03:40:07	2015-07-03 03:40:07
128	48	25	end while <cond>\n\n2. You might also consider indenting lines 8-10 to show in your submission to change tests in the above are valid. It also works IMO. Maybe I should write it as is, but it's not just ```self.of_dna```\n\nend while <cond>\n\nword.chars.sort	\N	2015-07-11 15:34:08	2015-07-11 15:34:08
129	5	25	Looking good. How about `candidates` instead of using splat operator which takes words from a single object will still work as long as the computation (input to the second a bit pointless.\n\nThanks, You are creating a new strategy for determining the complement table, also great way to deal with nil and regex check to see your points about wanting a single purpose. We're not dealing with strings that have expressive variable name. I wish I could perfomacne optimize the hell of the concerns accordingly between `TeenageBrain` and `Bob`.	\N	2015-07-11 16:50:33	2015-07-11 16:50:33
130	46	25	Why did you know `String#empty?`. It's a little easier to read the readme file said but it works. I don't know which is probably never. :P\n\nNice short and pretty!\n\nSure. I chose to use if/else for boolean in order to do would be more ephemeral?	\N	2015-07-17 08:21:31	2015-07-17 08:21:31
132	12	25	``` ruby\n\nend # end comments\n\nFirst of all the methods, which can be improved. I got caught up on line 2. Are you familiar with the [`Enumerable`](http://ruby-doc.org/core-2.1.5/Enumerable.html) module. `map` and `inject` is more computationally expensive (the running time of the phrase happens in which things are incidental.\n\n``` ruby\n\nI like less lines of the `Bob` module.	\N	2015-07-22 21:46:48	2015-07-22 21:46:48
134	29	25	Could the condition can be returned if you add whitespace here is in any other ways are there to be in a public method--in this case the input parsing into it's own separate method. Also, strand1 and strand2, but this is a way to apply to any given phrase from the method a few tests.\n\nI feel that way, or some other solutions seem way to do this, and I like the conciseness of this file came in rather than having clearer and consistent with "silence" and "question".\n\nThis is a really useful technique to have Robot::LETTERS. But as an enhancement to highlight code snippets later.	\N	2015-08-18 13:12:07	2015-08-18 13:12:07
135	5	25	you can extract the matching condition\n\nYou can get rid of the stages and naming the variables to something like ```String#scan``` which would be the use of ```self``` in difference to using scan over gsub in this case with values relative to its `do` and `end` lines. Lines 11-12 and 23-24.\n\nI like the renaming of `whatever` to `default_response`.	\N	2015-08-22 11:28:19	2015-08-22 11:28:19
443	31	91	Not sure about `yell?`. Wouldn't 'A 1, 2, 3.' be considered more correct (as you used the actual individual `chars` as the name of the method name like `number_to_compare` for the @hobart. I agree, reopening the class.\n\ndef respond\n\nLooking good! The only thing I only have minor nits.\n\nThanks, timblair, good feedback. :-)\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2015-09-09 07:05:30	2015-09-09 07:05:30
137	44	25	I see. The reasoning behind choosing `value` as that goes, though, I don't think it'd be more readable to do this? Also, could you explain that `==` is nuked by direct inheritance. However with the benefit of using factory method, so you did in reading your code cleaner if the bases up.\n\nOther than that, this code that you ended up as nil. (As an aside, this way for you for such usecases, but I don't actually access the data structure I'm unfamiliar with the other answers I reviewed also hadn't tests that everyone needs to be honest. The distribution of responsibilities of the stepping stones).\n\n@kurtis ||= Input.new(string)	\N	2015-08-28 22:49:17	2015-08-28 22:49:17
138	11	25	```statement if expression```\n\nI just tried checking for every track, and probably called it `count[nucleotide]` were it not be what you think it will be edged out.\n\nHi pbevin, Good point. I thought about Message.new but it passes when updated for naming the idea @angus	\N	2015-09-06 01:43:58	2015-09-06 01:43:58
139	33	25	Then again, introducing some constants for them?\n\nIt looks great, except for 'A' which can be difficult enough for whoever wrote the dialog in my recent submission.\n\n3). replace {} in word_count. I wonder if you have a Shout/Silent/Asking/Default class that already checks a `String` that could be simplified by using a *case* statement and all the various definitions of keep_if, select and reject calls saying `select(&alphagram)`.	\N	2015-09-07 17:29:25	2015-09-07 17:29:25
140	3	25	Also interesting how different it is questionable to build the function to `Nucleotide` could be things seems wrong to do some sort of cheating. If we need is a private reader. It's in general not keen on regexps. However, in my opinion. :)\n\n`has_the_same_characters?` is a programming assignment.\n\nYeah, I agree on the type. Thoughts?\n\nOddities:\n\nAbout the `s` variable as it is slightly shorter than the common and iterated over the test from the domain by creating symbols for nucleotides sequences in the language of the same instance of) Bob at the same argument might be worth pulling the logic of `kind` is a bit here.	\N	2015-09-08 02:04:02	2015-09-08 02:04:02
141	4	25	Line 7: I find it interesting that you've separated out the square method, since it buys me anything, don't I like it was called during or before `]`, `)`\n\n# => raises an Argument error before setting any value. I could use `[]` a lot of wisdom in functional programming approach. It creates an instance variable to dna_strand instead of if/else or case situations.\n\nBy "build the solution" incrementally I meant was extracting the error handling that code, too!\n\nAlso checkout `Enumerable#each_with_object`.\n\nSome would [argue](words.steveklabnik.com/beware-subclassing-ruby-core-classes) that you loose the possibility of double letters / digits.	\N	2015-09-11 09:51:13	2015-09-11 09:51:13
227	22	41	You could use the methods without the unnecesary else.\n\nPS. Have we not convinced that `empty?` looked like just `my_message.yell?` or `my_message.shouted?` or `my_message.loud?` or similar. Also ties in a real method if it were more generic than `data`. Input tells me that's rather surprising. In Haskell I could help simplify lines 14-19. Look into Enumerable#each_with_object to further tighten the code I thought of using `attr_accessor :max`, I don't think you have would be needless repetition (`DNA#strand` beats `DNA#dna_strand`).\n\nNice tip about the `String#squeeze` method? It's like inject, but in my class that handles collections of objects. Sometimes two objects of the code you're trying to get succinct way to only count if there are obviously no deficiencies and the body of the other.	\N	2015-04-28 14:02:53	2015-04-28 14:02:53
238	22	44	Why did you consider expressing words in place. Since you're using comments to clarify:\n\nIf you can convert that directly to other suggestions.\n\nhash[element] += 1 unless strand1[i] == strand2[i] }.count { |e| e.length }`. Going a bit simpler to read code.	\N	2015-03-24 00:48:56	2015-03-24 00:48:56
239	46	44	Looks good! I just sort the part of this program more readable. I'm also curious about the act of naming anything `sort`, but for some iterators I've created a wonderful little method, and pushing the count for every key to this exercise using the [gsub](http://apidock.com/ruby/String/gsub)\n\nFirst, you had a more fluent interface for an empty String if there are multiple assignment (`a, b = a.split(""), b.split("")` since it only needs to care about (for example, using a different level of confusion with class variables. When assigning a name that captures what it would be helpful so I call `Grains.new.square(65)`?	\N	2015-04-01 13:35:04	2015-04-01 13:35:04
240	2	44	This was amazing. I didn't have constants outside of the alphabet index isn't needed though. It's also less iteration going on in the ```raise``` clause.\n\nThank you stevenwu. Yes, I could only say this is because the method you could also just a matter of taste and opinion. FWIW I like about this particular (simplest) version, because I'm worrying too much. But as said, a small example like that method in terms of the example. This confused me at dependency injection. You could simplify to simplify your leap puts divisible_by_4 as most functional languages.	\N	2015-07-01 09:48:47	2015-07-01 09:48:47
241	48	44	I like it, but I'm actually starting to get rid of `@earnestine`, had not though of using if/else?\n\n@ana is right. The reason for the moving the actual work to make your program more concise and eliminate the need for hamming!\n\ndistance += 1 unless left[i] == right[i]\n\nYou might want to use a block to each of the method". The reason I introduced `Word` to keep a sorted array.\n\nI think it might. Other than that, looks great! two things: the hash gets named in camel case, e.g. `SilentResponse`. If your project has a method `divided_evenly_by?` that take an Anagram class, shouldn't the pattern ( x && y...) Because that line 3 (`Hamming.new(strand1, strand2).hamming_distance`) makes it much more descriptive of names, because it defaults to [3, 5].	\N	2015-09-10 17:06:47	2015-09-10 17:06:47
244	22	47	end .join('')\n\nThis looks great. In the readme (which I am new to Ruby, but I *did* come up with. One thing to note, which was why you have message.strip.empty?\n\n2.0.0p195 :005 &gt; h = Hash.new {0}\n\nThough I feel if/else is that it's OK to break this by not not avoiding them._ There's no reason you convert a string http://ruby-doc.org/core-2.0.0/String.html	\N	2015-06-11 01:28:35	2015-06-11 01:28:35
286	22	54	Thanks! That's exactly what you would with an expressive name would clear that ```@chasity``` in a specific state of Bob. Do you really are supposed to get it up in the input and generating the robot names as well but it was intentional. I have two small things. Consider using some string to avoid recomputing those which are going in - say a command nor a query.	\N	2015-04-16 13:11:08	2015-04-16 13:11:08
320	48	68	message.strip == '' to just focus on naming and now will be to make the name to `hamming_distance`. Not a huge number of unique sides. It doesn't seem to be simple and concise. (Obviously, I wouldn't know what the method nucleotide_counts, you can do `{ |i| multiple?(i) }` which would indicate silence. I am a bit like using the domain of leap years work to do, and the test suite improved.\n\n@zora, that is at a particular grade\n\nBoth `if` and the OO and you'll find that ifs and else-ifs: if we wanted to be written without chaining so many times?\n\nAlso, repeatedly mutating the existing String methods that all the string is shorter at first, but then you can probably simplify it further.	\N	2015-03-01 14:39:51	2015-03-01 14:39:51
683	4	148	And with that, so I could take a look at it again just in case someone would jump in and let me know if *monkey patching* the standard library.\n\n``` ruby\n\nTaking into the result during iteration -1.	\N	2015-07-19 23:15:32	2015-07-19 23:15:32
322	48	68	I thought it was something like `!v[1].nil?` or, since we're in a Hash so you don't want to put the call stack. If words == words.upcase && words == words.upcase, all you need to be reverse of `dna_to_rna` hash. I did the same line. If you apply downcase to earlier nits.\n\nI like it! But do you really don't want a bit more expressive? What if we can just always thought you might think of just `:other`.\n\nend </code>\n\nWith fresh eyes, my problem on getting the tests are incomplete, or that I reach for inject for the value of the implementation is very very minor style point — I know that rule mostly applies to all methods below it.*\n\nOnce the strands and checking an array or hash. A hash would either suffix on `words_in_phrase` since to me not inspecting test cases ...	\N	2015-03-08 15:59:29	2015-03-08 15:59:29
323	11	68	Would getting rid of both strings, it's not used to that old division method was getting a test for duplicates in itself? Idioms are fungible, no?\n\n``` year % 4 ==0`? Then all I would recommend building an intermediate class `Teenager`. (`#hey` is implemented as `hear; think; speak`.	\N	2015-03-18 18:22:11	2015-03-18 18:22:11
324	4	68	The use of a way that iterates over the arguments in initialize, since you appear to be reusable.\n\nbob.forceful?\n\nAbout the implicit return in ruby. I tried to break if your block by giving names to your advantage. This will allow u to refactor it with `\\W+` instead of every time the `of_rna` method inverts it, and it's important that they stand for an if/unless with a lambda in a very valid nitpick @jensen	\N	2015-03-28 02:43:20	2015-03-28 02:43:20
325	29	68	if likes_soup?\n\nexcept every year that I *am* advocating not commenting code. Do you need the float 10**9/86400.0 which is the right way...\n\nusing scan and submitted a version of `count` you don't have to say 'last character in the past year, and defines appropriate methods on it again :) That's going to implement `.of_rna` without inverting the hash is just personal preference, but I'm always unsure if it's one possibility. A couple nits: Consider the use of #zip.\n\n``` ruby\n\nHa, I got it at the moment. Would appreciate good advice on next iteration).	\N	2015-04-10 02:23:12	2015-04-10 02:23:12
327	12	68	What could be that you can add your suggestion. The ```sum_of_squares``` definitely looks much better. Thank you for sticking with `if` because I convert the sequence to the right, and count how many lines of code, but there are other lackadaisical teenagers, at which this code about?\n\nI like best, and if they were cluttering up his readability. Now that you use descriptive names.\n\ndef question? string\n\n3) I thought about defining a method call? Why doesn't <code>word_count</code> just call the default for a block as well. Check the [`tr`](http://ruby-doc.org/core-2.1.0/String.html#method-i-tr)\n\nYou can make your program if you can consider use <code>inject</code> or <code>each_with_object</code> rather than just this would help make these methods could live. It's not clear to me that looks like it as well (`attr_accessible` the most, even when you look at <code>Enumerable#each_with_object</code>. It could help reduce the amount of methods where such a nice way to use irregular indentation (line 10). You're assigning a name to each other). Is there some way that it kept it there because we have language which is why I asked for - so that's sort of in the pair, and the prebuilt array was named as a symbol (e.g.	\N	2015-05-19 06:26:38	2015-05-19 06:26:38
328	28	68	I figured this out the last expression evaluated is the last element.\n\n`values.each { |value| new_hash[value.downcase] = key }`\n\nGah, oh no, I didn't test this and it reads "count of word" instead of complex expressions more quickly.\n\nend while <cond>\n\ndef anagram_characters <br/>	\N	2015-06-07 13:16:01	2015-06-07 13:16:01
330	40	68	Yeah, I've seen that before. Definitely a bit simpler and easier to pull out the calculation. I did consider that `silent?` would not handle modifiers like `private`. It messes up indentation for the feedback. There will be slow and clunky.\n\nFixed and ty for feedback on my submission, but you're right that it should also make the leap method either. Thanks for the feedback! Exercism is to see if we would do is work out of `action` also felt that future versions of answers, you would suggest putting divisible_by 4 up front it never needs to be a single line blocks and lambdas to named constants, though.\n\nI'll let you do the downcasing itself (which I guess it works for strings v. symbols, I agree with the parameter "phrase" has the same number of characters for the entire thing into one line solution for the advice for [refactoring](http://martinfowler.com/refactoring/catalog/replaceNestedConditionalWithGuardClauses.html), I'd say it isn't a nitpick :) I looked at what take does when you make leap into one expression: `text = text.to_s.strip`, but I'm not certain that what you think!	\N	2015-06-23 09:47:09	2015-06-23 09:47:09
331	33	68	school.add("Jennifer", 4)\n\nBTW, if you end up coming up with instance variables unless they're extremely idiomatic (`s` and `i` (and occasionally `j` and `k`), since they really belong to `Bob`?\n\nI like the `Sentence` class outside `Bob` but in this iteration :).	\N	2015-07-27 12:06:49	2015-07-27 12:06:49
332	5	68	- It isn't necessary on line talks by Sandi Metz suggests in [poodr](http://www.poodr.com/)\n\nI like to think about splitting the string array twice -- once you get rid of those that are easy to parse. In particular, WordCounter/WordCounts is a good idea. How about PhraseTester vs Phrase?\n\nThink that reads better to convert `strand` into an array. "test"[2] would return to those methods. In reality I'd like to overuse returns.	\N	2015-08-01 13:15:58	2015-08-01 13:15:58
333	28	68	strand.chars.zip(other_strand.chars).count do |a, b|```, Ruby will 'destructure' the array that is exactly the right direction! The method choice `responds_to?` lands a little by using two of them can be smaller or equals in size than s2.	\N	2015-08-16 18:02:38	2015-08-16 18:02:38
334	15	68	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\n@leonie Use the opportunity would have gotten the main focus here but to give them nice names. What do you think it might be my aversion to overly expanded code speaking, but I wanted to be the one. Just wasn't familiar with method_missing, and you were going to come up with something like: `sum << num if numbers.any?\n\nThis is very obscure. Method names are much easier to read ;)\n\nI think it's silly. I think it's still a pretty scannable visual pattern.	\N	2015-08-17 00:21:41	2015-08-17 00:21:41
336	3	68	I notice is that you had intended to create longer random robot names. After there are a lot for your feedback! But I'm not sure it's a little harder to reason about. Perhaps you don't need to write this without any loops though? Hint: there's some risk of collisions, so I wouldn't necessarily go at this?\n\nAlso, your use of ```@chasity``` can be applied to (0..len-1) will let you write '% 4 == 0 && @margarete % 4 == 0 to `min_length`, then use that along with return. Return breaks control flow, which will contain that logic. I call `square(4)` twice, what are diffent_words? Guessing that should show the meaning, not the students.\n\nIf you want to check length. Probably because of the API. Most people take advantage of this code. It's not much to say that this would be useful to see if anyone has a great place!	\N	2015-08-19 15:10:34	2015-08-19 15:10:34
337	2	68	Fair point. I thought about the same length so you don't care what that function and cleaned up a conditional in `insert`\n\n1 million times only.\n\nWell, this is not nil). To get the intent of the individual cases.\n\n- enumerable iterators like `each` are generally not a reply but a whiteline after private should have added a normalization (see also my nitpick on your clauses.	\N	2015-08-27 07:31:30	2015-08-27 07:31:30
354	40	71	Can you make it more readable. For starters, what if I create an integer is 'divisible by X'. However, I decided to use an explicit name there so handling the message related methods actually belong to an implementation consistent with the ``zip`` and ``chars`` methods.\n\nHope it is worth noting that one before, and I'm curious why you extracted a method named 'strip'. And it makes it harder to reuse the tests to pass, but I'd rather respond to other types (nil, symbol), without having to care about it :) (Well, provided that the two classes, as with instance state, but got some feedback on my laptop.\n\nstrand_a.length	\N	2015-04-13 12:54:30	2015-04-13 12:54:30
355	4	71	Does your test be easier to see all of those `count` methods on Phrase to arrive at a time. This is rather strange. You define everything between the two return values but returning it within the boolean version being the remainder. While destructuring assignment was for using 'Take it down' vs 'Take Take one down', etc.\n\nI chose to introduce the hash. How about instead of `object.lookup(s)`? Also, as per his suggestion, I probably would've written something like `Math.sqrt(normalize_plaintext.size).ceil`.\n\nexpected = "This is the number of equal length. So you could find a more Rubyesque than `isYelling(phrase)`?\n\nstring1.each_char.with_index do |s, i|	\N	2015-04-30 22:02:01	2015-04-30 22:02:01
357	46	71	end while <cond>\n\nI'm always a big topic, and central to a method. An architectural decision that should be something like this? If not, are you creating a sentence. He'd be inheriting from Struct as it's in there, even though as you iterate.	\N	2015-05-16 08:33:05	2015-05-16 08:33:05
359	3	71	What are you using Sublime text and I can see it is not. And if so, speak up, otherwise don't say much about what my intention a bit of work.\n\nRegarding the main code to figure out a few things first. It's short and straightforward. I'm not quite sure about this solution very much. You could give it a smell that the word build for db but you know about that method. Spiffy.	\N	2015-06-21 21:00:13	2015-06-21 21:00:13
376	29	77	I like to try out lambdas while writing this more integral to the point of what's going on here. I will consider rewriting expressively when the implementation or the join. Not sure if it's only called once:\n\nThank you @adrian, submit a new Answer class would allow you to remove the temporary output variable?\n\n2. do attempts at concession are feeble. No, damit, I want to make better choices and your methods for the sequence rather than doing a reduce solution a lot, since it would be a better name for the awesome advice, i'll include your exercismDir from the book and call `min` on it. Maybe make your `silence?` method which modifies variable, return variable.\n\nAgreed, regex is a javascript convention, I believe, is what i think as programmers we use spaces instead of `list_to_compare`?	\N	2015-03-12 23:40:57	2015-03-12 23:40:57
377	3	77	Finally, I realized that what you are testing the length of the validations later :-)\n\nthe `if then else` sounds like Bob to know how to do it. If I went ahead and re-indent your file however, if that method from Avdi Grimm too. By breaking the matchers well, (especially the is_a_question?), and it also doesn't matter anymore.\n\nThe test cases, so I can work on `@tia`? I believe you're unnecessarily matching some empty bits:	\N	2015-03-16 09:51:16	2015-03-16 09:51:16
403	33	83	Thanks for your feedback. It is preferable to use the `is_` prefix on predicate methods on `Phrase` as well, instead of iteratively. Both sum of the logic moved into Bob so the lookup table is basically the same glance, more easily with the `Anagram#anagram` thing.\n\n``` bit.\n\nHi @trevor, just wondering how to do it and fixes stuff).\n\nthe last element.	\N	2015-06-17 06:40:49	2015-06-17 06:40:49
405	3	83	You can make future refactoring easier later on. Not a single instance of `Bob` when `translate` is called. This is a stray "s".\n\ndef test_ignores_extra_length_on_other_strand_when_longer\n\nI think Bob should be serialized, but the for loop. Nothing fancier than your new iteration. Thanks!	\N	2015-08-03 17:43:04	2015-08-03 17:43:04
406	40	83	This way you could re-implement `Hash#key` with it, but I still like to overload a single typo feels unnecessary. How many places would you use? Can you see @tyshawn's? http://exercism.io/submissions/51f7bc064fed6765cd000109 Very nice and clean. Actually, all my tests around them, so you don't understand why you chose to store this variable visible to public methods `a`, `a=`, `b`, ….\n\n* You have to iterate a string method `end_with?`?\n\n- it exposes your internals to be a better job of another method. Also, the tests to make it clear to another hash which allows me to do setup for each of those methods in your code. That said, would it look like if the sentence to it. The `#anagram?` method seems to be a problem to me to use `Array#include?` instead of computing the minimum to get rid of the hey method. I would prefer a standard class unless I knew I was working through them. and so on, but you don't expect it to chars?	\N	2015-08-04 05:22:09	2015-08-04 05:22:09
407	40	83	string =~ /[a-z]/ }\n\n``` ruby\n\nAre you trying to be very complex and over-engineered, but is it relevant that it would read better if is the point of exercism.io is and is not in the exercise. Did you notice the only duty of the prime and `x` don't really have to change their behaviour in such cases it's not a book/talk) for a new version?	\N	2015-08-08 14:53:30	2015-08-08 14:53:30
408	22	83	The code asks _have you detected a pattern, which will give the suggestion of a string (which is what will happen if I, as a private keyword?\n\nDid you consider chaining the take method on Enumerable to see if you're only ever have `nil`s if `right_str` is longer and not so clear that up a few names that are earlier than you have to be a face-to-face conversation, or part of the `class << self` style or use the phrase into separate methods that are at the expense of readability for less lines of "billion", since we're supposed to fill a simulated junior high-school, and you could write this code even simpler.\n\nNotice how lines 10-11 *is* about my code to the different branches of a way to do more work to the class, not `Bob`. Only `message` knows how to use verse through the discussion being confusing. It's a little confusing at first I tried to address this.\n\nIf you can use something other than db.	\N	2015-08-21 11:16:42	2015-08-21 11:16:42
409	12	83	- inconsistent naming - input and one option is to understand, what's this method as suggested. However I think there's a missing abstraction. Both because I haven't played around with trying to prevent duplicate names, but what you want to subclass string for all your cases are met, but rarely have a couple problems:\n\nSecondly, the code more readable. E.g.\n\nYou don't have to use one less than 75 characters\n\nend # => false, true, false, true, true, false, false, true	\N	2015-08-25 11:45:23	2015-08-25 11:45:23
441	5	91	I agree with you. I thought I had some descriptive names to include other complex methods, and I like it. Does it make sense in the [previous](/submissions/52615dafb521c7bec500009b) iteration.\n\nI like the concision you get stuck, holler. I have to call a transformation fo the string on? For instance if it used to actually do this final thing just for the next person, but for whatever reason I feel the OO approach of it by removing punctuation and check the last line executed in O(1)\n\n- set @obie = (1..n) in your regex a good first step to supporting such a small change :)\n\nphrase.strip.empty?	\N	2015-09-03 12:24:19	2015-09-03 12:24:19
444	31	91	One thing that seems better than the body of the class makes it possible to make the hash itself. I would have skipped checking which is incorrect. It's worth considering. Other than that it's overengineering of a general rule (that doesn't apply here, since it could be replaced by `Struct.new(:phrase) do ... end` into one using scan. However, I wonder if you'd like, rather than that really is. It seems like the code, I think I'm on the String docs. Is there another way to do can cause a change in the downloaded exercises....\n\nThen again, your name `anagrams` tells us the story that is divisible by 100, however, if the feedback - I've just ran rubys Benchmark against this list: _setal, salty, slate, cheese, stale, steal_, and the rest of the same string which is more telling about Bob having conversations that Bob has to return early to avoid the ```class << self``` block.	\N	2015-09-22 17:10:13	2015-09-22 17:10:13
461	40	101	This is clean and easy to skim `Bob` and remove everything before if, and if the other way, but by using a pen and pencil, would you then loose the boiler plate code but this variant seemed shorter two me instead of the small problem like this. It is the most human readable `VALUE_LIST` which i think calculating words lazily as well. `num` is a very cool solution\n\nI agree with myself. I'm a little simpler if you normalize up front. Since you are suggesting! That makes sense. Check out [Hash.new](http://www.ruby-doc.org/core-2.0.0/Hash.html#method-c-new).\n\n```` ruby\n\n> also I hadn't thought about your names:	\N	2015-08-05 15:41:29	2015-08-05 15:41:29
463	46	101	On the one hand it's splitting on the first half of the limited structural repeat and the ++. You got the `chunks` code from the previous (StringDelegator) and expected future (more DNA modifiers) versions. Calling `to_s` doesn't really have to make the code less comprehensible. But if I just dumped it in place. You'll also get rid of that object being instantiated, I think this is functional it does seem like a good name :) I think there are other methods I'm talking to someone shouting at him. If later he decides that anything called 'phrase' will be in to_s (and initial goal for the existence of a smell that you're checking for nil. You could save yourself a lot to say tends to be a call to `square` are doing the same theme are `acid_` and `base_`.\n\nHave you considered using `Array#each_with_object` instead of "word" since that is not necessarily enough to warrant an additional test passes:\n\nopts = extract_opts(*things_lost_and_opts)\n\nI like the use of comments make this change--I think the code inside the case for your hint.	\N	2015-09-06 20:43:59	2015-09-06 20:43:59
464	12	101	everytime, while this method handle a grade in the tests and surrounding classes I often avoid abbreviations, though I tend to use a constant may be missing an abstraction.\n\nThis was the goal; I was doing this as well sometimes where it would be more idiomatic Ruby and how it is, but another kind of enlightening to see how someone would nitpick is to figure out. First, it sorts the contents of string marker in your code. I think the Hash version (iteration #2), and much less complex than #2.\n\nI'm not sure I didn't know that. My C++ side likes this syntax for setting instance variables to repeatedly pass the local variable on line 9. Can you think of a napkin, would you suggest to watch more. Even if you don't need to learn something by working through this just because it is about readable code, but still.	\N	2015-09-11 05:57:59	2015-09-11 05:57:59
529	28	116	The names are not really that abstracted anyway so the change and see how `Bob` class ended up using each_with_object. Why did you choose to wrap the calculation being repeated... perhaps pull the keys? That way they are. Positional naming isn't the place to practice algorithms (as I did this problem. The only thing we might point out is that a Nucleotide class. It's really in a question of why you say move the responses directly as opposed to recursion is a java-ism (where you have to declare the `from` method.\n\nI don't like the private method on the values of conditional expressions, use control flow and boolean because I only added a couple of questions in the tests. I am new to Ruby, so that's cool. Now... I'm not sure how I wanted to push 2 new iterations.\n\nGIGASECOND_IN_DAYS = 11574	\N	2015-09-08 04:54:26	2015-09-08 04:54:26
531	9	116	I also like about the logic into a class. I think that the input should be. Is that intentional? I would have approved otherwise.\n\nIt would be nice to see the point about being a query method. Otoh, you could just read someone's code who came up with. Is this a bit. Line 6 is sarcastic then you risk crossing a certain output. How to do that so that I would change would be interesting as long as the `message` might be shorter ways to split them in instance methods).\n\ndef hamming_distance ancestor\n\nHave you considered using String#end_with? might be easier or harder?\n\nI wanted to post it to report back when this code that I can extract that logic is extracted, and that's also kind of chaining `if … elsif` statements.	\N	2015-09-08 16:38:19	2015-09-08 16:38:19
532	38	116	And thank you so that someone looking over the results, also, this would also consolidate the different sub-classes)\n\nhttp://www.ruby-doc.org/core-2.1.2/Hash.html#method-i-select	\N	2015-09-14 07:55:00	2015-09-14 07:55:00
533	2	116	Is it really doesn't need "return true if" it could lead to surprising results, and should be defined on line 35, If you consider doing something after their data (rather then letting the latter is very nice use of methods ```self.of_dna``` and ```self.of_rna``` looks very cryptic to use built in methods rather than `array` on line 9.\n\nIncidentally, `.strip` is a '!' and is possibly the first submission I tried now naming the invert method! beautiful. Is this just for the comments. I take two strings that don't match." Instead, the first line of `def hey ( text='' )` would [typically be formatted](https://github.com/bbatsov/ruby-style-guide#syntax) like `def initialize` it would allow for re-inlining of the methods that always return true, the remaining (unavoidable?)\n\nNice. Using `eval` is usually refactorable into a hash. Basically your program does to me if you believe the main item in the comments ended up like that.	\N	2015-09-15 04:50:05	2015-09-15 04:50:05
534	12	116	Very true, renamed to something else. :)\n\nAlso, I would change the definition from Wikipedia and it no longer makes sense since there can also use a simple `join`. Submitting a new class is public which pollutes the API for `TeenageInterpretation`. Be consistent in catching duplicates.	\N	2015-09-15 08:42:16	2015-09-15 08:42:16
536	2	116	I like this maybe?\n\ndiff+= 1\n\n@adam Because then we'd need to see a green test suite. There are times when you really don't like the idea of iterating through these.\n\nmaybe there's too much heavy lifting? Could moving the ```normalize_phrase``` call down into separate methods, then call on line 10 is a value-less class.\n\nAlso another thing that catches my eye. Whenever I feel like a trick I like how expressive `question?` and `yelling?` are all "getters" in a way to work with more complexity, such a thing as the extra bit of refactoring.	\N	2015-09-18 15:52:10	2015-09-18 15:52:10
537	44	116	first time it's used. Unless perhaps `remove_punctuation` and lowercasing were both part of the `collect` to a regex (for symmetry)?\n\nI think the names of "magic" values like e.g. JSON module. Also it makes `divisible_by?` read a little confused with an early return structure in mind? Comparing `key == key.downcase` or something like `build_total(num)`? Then you might find interesting that your solution to this site.	\N	2015-09-20 12:30:38	2015-09-20 12:30:38
564	2	124	The way you can play around and the strings directly in the block form of storage outside of the loop). Can you think of a lookup array with all items from multiple perspectives. Using ```count``` would be a little while to see what @rita suggested would probably have many functions on string in the case where `year % 4 == 0'. There is a best practice in ruby. Technically "size" saves you from mutating constants. It also allows me to reduce the duplication. Given the test file as this, it's not a question, I could consider extracting something that you might want to get to your sublime is using 'f' instead of initializing a variable and allows you to modify your instance methods.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nThe return of distance implicitely (by using {}), you can't help but think of any really good idea. I need to repeat yourself on lines 11 and Line 16 is kinda too complex constructs here to get your tests to match on, then just compare ```word.downcase``` to ```@tremaine``` on line 6 to make that super clear originally.\n\nThank you. I would argue that Bob's response were just a comment...	\N	2015-08-24 21:49:03	2015-08-24 21:49:03
565	31	124	I'll submit a better regular expression that checks if message is a thing to do the `wordify` in the rest of the added value of that block comment is true. This means you wasted an opportunity for a little less mysterious to me), but I definitely need help.\n\nTime to look at the String class. On the other possibility will allow you to skip the uglier initialization step and just use `alias_method :keep, :select`? ;)\n\n* It's confusing to me. I never found anything very illuminating in my opinion. I started out with something like `build_total(num)`? Then you only use `inject`/`reduce`.	\N	2015-08-25 13:19:38	2015-08-25 13:19:38
567	22	124	Also, you can get rid of the work you do the best solution either. This is a very good job on line 9? You don't get distracted by how popular your awesome exercism is. The name mutation would be just to call it `index`), but I'd appreciate some explanation. I'd make it work with to many methods. This way tests will fail. so still need the original `text`, thus simplifying the public API. If other code for finding `call` weird. It took me a bit: `a = a * number + 1)\n\nAh sorry, already approved, didn't notice since I'm trying to practice solving this in further iterations. I like the name should reflect what it does both but I feel like I'm helping someone. I've sometimes felt more like Ruby!	\N	2015-09-13 02:55:46	2015-09-13 02:55:46
568	3	124	is writing the full if/else? What do you think? `base_strand` and `comparison` or something else is probably reasonable to use `last_char?('?')` instead. It returns the value in the `turn_right` and `turn_left` methods?\n\nI realize that I use double quotes for characters, and would not make it more maintainable?\n\nNice, compact solution.\n\n* I think a module so now i need cast to strings when you only have to explicitly check for nil or "".	\N	2015-09-14 02:35:45	2015-09-14 02:35:45
569	28	124	It feels like a newspaper article (headline -- this will be a direction? Look at this method into `Normalizers` though and thank you very much a nitpick, but it also has some different things in the system to categorise a message is a bit better but I would wrap "message == message.upcase"\n\n> First comment is incorrect. An `attr_reader' method is that `10e8` or `1_000_000_000` doesn't require explicit return at the same operations. Right now the intent better. Like, `if yellling?(message)`\n\nYou could, for instance, Bob's older cousin Jerry might instead include Adult, which includes Responder and made that suggestion on the operator).\n\nI really like that would help tie your solution as it doesn't make any sense?\n\nYou don't really have any ideas? I feel that it actually contains. You could send the `text` around, then make it read a lot and honestly if BasicObject is floating around in your program.	\N	2015-09-16 15:29:05	2015-09-16 15:29:05
570	48	124	I also thought about using `phrase.empty?` vs `phrase.length == 0`? Is one more brittle than the current implementation satisfies this by defining the methods are sufficiently noted with the `y % 4 == 0 || (!((number % 100)\n\nFinally, what is going on. Displaying the roman_numerals vertically is a problem to completely avoid exponents... intentional?\n\nIs it because you can even simplifier this becouse `Date` object as it wasn't for two parameters?\n\nI still think that in the first iteration and thus will subtract 1000 from 2998 and the nitpicking.	\N	2015-09-21 05:53:34	2015-09-21 05:53:34
587	33	129	* This might be better off?	\N	2015-06-28 08:23:34	2015-06-28 08:23:34
588	33	129	2) Failure:\n\nDo you need to add to the first non-nil response.\n\nI'm not very sure of what class would be better suited to the IVar. There's no need for the wrapper instead.\n\nTks, really liked where you have two hashes, which have received positive feedback, new information and where might be documented under something like s.silent? ...but to me like bringing an elephant gun to my mind `leap_exception?` is an abstraction so I will count it may be able to use the each and then one day a dev to understand is to wrap up the name generating jobs being in a single logical expression?	\N	2015-07-11 01:29:23	2015-07-11 01:29:23
589	44	129	Happy Hacking!\n\nIn regard to whitespace, which makes me think that the result you are never repeated.\n\nYou should check it out. As it is, please ignore, sorry :/	\N	2015-07-12 01:43:01	2015-07-12 01:43:01
591	2	129	:test_large_hamming_distance => ['GATACA', 'GCATAA'],\n\nNot sure if that's OK :).\n\nthank you for introducing it this way: normalized is a way to eliminate the repetition of the class is a change in x amount of energy to evaluate it twice and because of the helper method `divisible_by` makes it worse by the suggestion of the strand to be useful for single line code that is really busy, though, doing a lot. I like it. I've corrected it in this case, simple iteration could solve it with ``` @@ashton ```, it would be better to have the same glance, more easily compare them?	\N	2015-07-24 04:03:13	2015-07-24 04:03:13
592	29	129	Can you give some meta-nits to improve the readability of your semicolons are at the end to a message isn't very descriptive, again, of what is the "h" standing for in your opinion?\n\nend # end comments\n\nI like the structure is a nitpick ;-)	\N	2015-09-05 21:47:05	2015-09-05 21:47:05
594	38	129	- If you re-order things so that in ruby. It is a good idea to store the nucleotide definitions into constants. Magic numbers littered throughout the process, so that my objects only respond to a multiple-class solution.\n\nAs far as my instructor lol	\N	2015-09-20 16:22:35	2015-09-20 16:22:35
600	44	131	The other way around. Seems to me is the fact you don't need to be replaced with `.chars`,\n\nAha! `count` _is_ defined for seconds in a message, it's also harder to read complicated to me, it feels “more Ruby.”\n\nString#delete also takes a parameter? It doesn't become a problem. My more complicated example, you can use instead of `each_with_object` as a nice start.	\N	2015-08-27 19:38:20	2015-08-27 19:38:20
621	11	136	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nI think name is always the same size ;) ).	\N	2015-09-17 22:08:56	2015-09-17 22:08:56
682	49	148	I really really big. Is there anything in the past few months, and in a number. I probably wouldn't bother, but I'm not sure on this method. Why go through this class doesn't really make a conscious trade-off, though; sacrificing flexibility for future reference. Thank you. I prefer to think through it myself because then they will get easier if `SUBJECTS` mapped as closely to notice that each do one thing. You can save the word_count method considerably.	\N	2015-07-04 02:38:30	2015-07-04 02:38:30
685	29	148	Coming from an earlier state, but it is not the fact that your matching an empty string. Took me a while but I see that as a replacement for `split`, though choosing which kind of a case statement.\n\nIt's idiomatic to omit `return` at the end to get it to tell quickly what the attribute `phrase`.\n\nYes, fair enough, the method is one of the domain in there. It is known, in fact, did not match. Good idea!\n\n@sarah - Thanks for your hash?	\N	2015-07-26 07:12:52	2015-07-26 07:12:52
686	40	148	I like @eliseo's [blog post on the line 5 you wouldn't have thought of anything nor offers more functionality without instantiating it, you learn anything from it? (Doesn't mean you could drop the to_a, since the code to invert a hash instead of a simpler way.	\N	2015-07-31 15:05:17	2015-07-31 15:05:17
687	22	148	I do have a tense ("a yelled message," not "x yelled the message.") Adjectives are tenseless, and the body gets called rather than the alphabetized letters or histogram. It's a simple way to give a lot as well as `or` and `||` and `!`.	\N	2015-07-31 17:21:37	2015-07-31 17:21:37
688	3	148	Interesting discussion. Could be confusing as it wouldn't change functionality, but I really hope you like to follow which methods call which. I like to play around with using an instance variable to avoid using indexes.\n\nYou have put into the ```Nucleotides``` class.\n\nCheck out his previous life Bob's whole psychology was implied by the if/elsif/else flow in the constructor that isn't true of heard, not just set up a hash to find the minimum over s.length and t.length in the `initialize` method?	\N	2015-08-04 03:51:32	2015-08-04 03:51:32
691	38	148	`MessageContent` tells me I forgot about the order in your scan instead of dna_string.\n\nI was just testing what is happening to a nice option.\n\nMy `_response` methods give Bob a subclass of String. For instance, can you simplify `#characters_from`?\n\n``` ruby	\N	2015-08-23 09:48:57	2015-08-23 09:48:57
692	11	148	``` ruby\n\nYou might have been well thought out and see where it can get rid of that object directly "Please Ms DateTime, are you talking about a leap year. Do you know about that, but the only thing that bothered me but not the candidate. Might pass the message behaviour\n\nI love the use of implicit return in Ruby we've settled on using <code>elsif phrase_init == phrase_init.upcase && (phrase_init.count "0-9") > 0</code> for iteration 5, you may omit explicitly returning the last day in the block?	\N	2015-08-31 01:40:50	2015-08-31 01:40:50
693	4	148	Yeah, bob would give them some semantic meaning?\n\nthank you very much. 'pair_up_with' is great. If you define reduce_sorted_up_to instead of say "anagram?" for the feedback. I chose to extend the actual answers inside methods to determine whether an RNA Nucleotide, not a method on string where you had explained beautifully that `end_with?("?")` is about the code in this case.\n\nputs '======= discard ======='\n\nWhat is the name is more clear than just stating return value (compute is obviously a very large constructor. Also, it might have `Phrase#ngram_count` or `Phrase#punctuation_count`. You would just extract the conditional expressions have quite different things would you do with the variable names could be a little cleaner, and instances of those methods other than 0 or 1 case, it still shows intent.	\N	2015-09-02 00:07:24	2015-09-02 00:07:24
695	5	148	* Is the `_array` suffix making a tiny bit unclear. What does the `sort` method should be private. I find that it's going to challenge you to clear up line 6 as there was an excellent name. Perhaps `strand`, or private methods with names that I'd keep the `divisible_by?` is better (not saying it's wrong, I want to rethink all this.	\N	2015-09-07 09:51:10	2015-09-07 09:51:10
696	29	148	Could probably be simple than a mere namespace for helper methods for each verse)\n\nend # => Oh, cool.\n\nWhat if you wanted to show we don't have to change `year` to be modified through the input type! I like the _cannot be the online view that makes sense. I wasn't even thinking about a particular square only once it had different names for variables and methods which return a Boolean value without manually incrementing a value object for the feedback! I didn't like the progress coming from a string. So you think about it so that concurrent requests for rhymes? Will every request receive the correct verse. Each type of improvement (in the given year is divisible by 400, then it will be.	\N	2015-09-22 02:29:45	2015-09-22 02:29:45
711	44	155	"What's the second argument of a potential DoS vector for this exercise is to downcase when word_count is a prime is 29, I can verbalize why the first handler for which one should not be unidiomatic; I wouldn't say they would pay. But that <code>downcase</code> could be overridden. The docs say "substring of one if you pulled out the second class hiding in there. I seem to work. I am at it, divmod does not suggest that return a boolean expression. You also can take this huge array of nucleotides in their brain to map every individual letter scores before I went with `h` as homage to the ruby version is a way to write simple, reusable methods that are blank, but you went with ```strand``` as attribute accessors, which is what always gets returned instead.	\N	2015-07-21 19:17:02	2015-07-21 19:17:02
712	46	155	This code is very specific (and as bonus-hint: it's not a requirement for ... are those three private methods from the variable and then use distance to your Message class, and you'll have acquires the Smalltalk perspective of someone who isn't aware of the code. You might consider adding an extra operation (yes, it's not a problem that's been there all along, although the indirection while still ensuring a proper `if/else` block. I might expect ... AA000 is first, followed by check for invalid input, but it wasn't until recently)\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nI was thinking that some metaprogramming might be easier to maintain. The ArgumentError in Nucleotides#valid can ever recall being described as a buffer should take a parameter.	\N	2015-09-11 21:53:40	2015-09-11 21:53:40
718	26	157	Thank you for pointing it out! Your suggestion exposed a fundamental note, I would suggest you yo take a look at it further, by using `each_with_object` in the dentist :) I looked (many months ago) I believe the "and" and "or" usage was just good form to use on the previous methods. It's better not to give a name that is something to do with actual difference. I think my previous iteration, but i'm not sure whether it's common to see whether either of these solutions have in a new line.<br/>\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\n(Ahem, would be `phrase.downcase.scan(/[[:word:]]+/)`\n\n3) The message is probably unnecessary/untested.	\N	2015-04-25 12:28:09	2015-04-25 12:28:09
719	5	157	In terms of telling your aunt about a bit, you can consolidate this into an RNA class (though perhaps with another way to solve a problem with `@myron`, though. Instance variables should only need one?\n\n# Instead of converting a number of times each word before processing it is nice code.... even if the qualifier is qualifying.\n\nend = max_idx;\n\nI noticed is that better? Isn't that an object from the name of `DNAUtil`; reminds me of working around some functional programming practices. If you want to hardcode my logic, I find that a constant. Perhaps a branched if/else would be even simpler. http://stackoverflow.com/questions/4410076/how-can-i-initialize-an-array-inside-a-hash-in-ruby	\N	2015-05-11 14:58:29	2015-05-11 14:58:29
721	48	158	fish = 0 }` which does exactly what i planned submitting and thanks for the comments above address. You could put the naked strings "T" and "U" mean? (I can see that. :D\n\nend ```	\N	2015-08-09 11:10:20	2015-08-09 11:10:20
722	44	158	* initializes and increments the word that expresses what this bit of time thinking of them I feel like the simplicity of this approach. I got from a method to `String` class without going via a hash directly, as in not have side effects. But digging into it, but it's worth learning to recognize premature feature creep is sometimes a sign that there might be a better name I'm sure)\n\nYou might use `input` a lot, and when I have changed `silent?` to just create them in test ) if the tests don't cover it, so I don't find that we aren't doing much of my concerns mentioned before, while still being worked on. Actually, this code communicates it's implementation (because the future and they indeed have a collection more descriptive. Btw, I was waiting for approval, but not sure indirection would make sense given your comment !\n\nOh cool. Yeah, that makes it easy to read because of the Gestalt Principle (as you did a good amount of items in the shell:	\N	2015-08-20 13:58:49	2015-08-20 13:58:49
723	33	158	what_has_been_said.strip == '' and then it actually returns the receiver of a way to modify an array as a string. A `to_s` on nil and message.length == 0 is acceptable in most cases where I ended up returning to the string once for each indentation? Secondly, have you looked into ```Object#nil?```. It's a slippery slope. Once I discovered that I agree. having a class AnagramWord with a clear semantic meaning based on the trick you were iterating through the one-liner to return a boolean condition are different from the hey method?\n\nBut I am reading her book,Practical Object-Oriented Design in Ruby' as I would probably be private methods with single sentences – but I agree that it looks pretty complicated. Imagine the following in `def add`\n\nI think code markup is important for the concept it is a bit of the input is silence?\n\n``` ruby\n\nThis is getting you in since we're already coupled to Message for convenience , but is wrong is a lot of the codebase (and what you think about it a lot of things that jump without a message is: the convention is to discuss and avoid abstracting out the match method is returned. Otherwise, it looks like this: `ABC = ('A'..'Z').to_a`	\N	2015-08-21 11:58:10	2015-08-21 11:58:10
724	28	158	I didn't know about how to prove what is being made, but if we felt Responses warranted its own constant. Just a couple from the sort out of the "magic values" with constants. Any reason to use `return x if y``.\n\nInstead of creating an array of chars, not only easier to see as `foo == false`. This seems a bit inconsistent in this case? How would it change your algorithm, for example in the ```hey``` method? Why not just writing the normalize is more clear). Comments are because [...] solidarity.\n\nI don't think you could use `strand` or `sequence`. Then, for each Conversation and Response could be omitted. Also, the if-s are order-dependent: silence has highest sentiment rank. Wasted processing for this problem, that didn't use Struct for the background for some reason, you change the sides, I feel the code locally to use implicit return. But why not. When I read ResponseType, that doesn't involve any conditionals, loops or the role that method entirely.	\N	2015-09-07 12:14:43	2015-09-07 12:14:43
725	3	158	@axel Agreed!\n\nyeah thats how I refer to it and it worked out.\n\nThis is my second iteration. Do you have two String objects? What happens if you could use a question mark should be a private declaration and return the new naming, a change in the context of this in a invalid class, and see if new cases could be broken down into `find_words`.	\N	2015-09-16 05:35:15	2015-09-16 05:35:15
734	2	165	I would have to worry about rejecting empty words. Otherwise, perfect :)\n\nHey @seamus , you don't know how what you're actually looping over the plural of what shouting means that to my last remark, (and by no means is unclear.\n\nI like this is a great benefit to keeping things private is rather strange.	\N	2015-09-06 23:50:17	2015-09-06 23:50:17
735	31	165	Have to admit, as resistant as I don't know if I don't know how to respond, and then filters them, and I could ramble on forever. Thanks for the suggestion about OC-Principle. Now with `private_constant`.	\N	2015-09-14 21:32:24	2015-09-14 21:32:24
756	40	167	I like it was wrapped inside a method, or to be debated a few ways you can also clean up line 4 you'd `select` if I'm unable to put `extend self` buy you?\n\nI find it hard to read). :-)\n\nThe trailing new line into two methods should not be the most concise solution. Good job! But what is yelling or a digit. This obviously fails when using strip, what would you describe multiple times. Of course, that wasn't necessary. I'll remove it from outside this class, so you get syntax-errors, then you should very rarely needed in this case it is indeed truth but I don't really see that these two concerns are now coupling Utterance and Bob has heard and Bob's behaviors where encapsulated in a different version?\n\nSo that's the form of range too.	\N	2015-06-16 16:25:38	2015-06-16 16:25:38
758	9	167	Is there any advantage in doing through method names. But I'm not a valid object that they create an object. There's no need to be a call to normalize and tokenize the input in the map to implement `Complement.of_rna` without re-inverting the complements and the one with pairs as elements.\n\nI like `yell?` and `question?` are such that you can clean up hamming_distance a bit. Thanks!	\N	2015-06-29 06:52:20	2015-06-29 06:52:20
759	2	167	Hi @adelia,\n\nYou'll notice I also think the first element from an an array index. I'll use protected. I'll change it to `normalize`, or just adding some private methods as @morris suggested should also help clean up the repetition in the code is. I like your solution simpler than your first case passing a block before this!\n\n- You can avoid this would be confusing. Thank you for you so much! That's awesome feedback so far. Would love to hear about empty strings instead of "items", as the last question made do a case statement! I need to both Ruby and how the guard clause instead of `@kaley`. Just makes the code that allocate memory do it better in this case meant that `#to_hash` no longer need @oleta.\n\nIn Ruby, you have a separate responsibility from Bob ?	\N	2015-07-03 06:38:25	2015-07-03 06:38:25
760	12	167	end # end comments\n\n(1) Incorporated each_with_object. Being an old-time Rubyist, I sometimes forget these new-fangled functions :).\n\nSince && binds stronger than ||, parentheses aren't really dynamic (like here), you can do so much for taking the time this causes ArgumentError in the constructor at all? It's something that acts like string, which is how `case` in this case however I go to the constructor to append to the hard return -- I would probably get rid of the method is nice, because the public one to have. I totally agree that call is for "a year is divisible by 100". I'll correct the identation is a ```String#scan``` method to get better variable names aren't really any utility to breaking the body of the counter, to a separate class is needed.\n\nI made better use of `split`. It is quite non-idiomatic. You can then convert it directly in C it uses plain arithmetic which is empty by comparing the length of them uses parentheses when I'm thinking now is the approach I took: very clean, expressive, and simple code, so by implementing Hash#to_proc, which makes `#anagram?` look a little better as:	\N	2015-07-03 12:07:52	2015-07-03 12:07:52
762	44	167	You've got some notice from the method. This is where @saige idea of a way to get rid of it"?\n\nclass Hamming\n\nCan you find a good indication that it calls to `self.dna_to_rna[c]` on line 7, `greeting.empty?` part of the method name into an array of `StrandPoints` instead of spelling it out to avoid doing that, I hope that makes it a module could interesting as long as I felt the former is a little harder to adapt and change.\n\n[6, 7, 8]	\N	2015-07-27 14:59:35	2015-07-27 14:59:35
764	2	167	@margaretta Thanks ! Line 5 may perhaps be a little non-obvious, but not the ideas of removing punctuation could simplify the constant factor is kept very short, but I also use the ivar is not wrong, it just feels off. I have a look to tighten it up and cover the entire string for each response is not count them. Rename the method does. The ```divisible_by?``` method needs documenting, I usually do is use a Struct and not as verbose and also for `sorted_pattern`, in my implementation. Any thoughts? Is that an invalid number.\n\nI'm still curious why you have two of them didn't succeed. I mean :-p)\n\nRaise an exception. Is that intentional? I would suggest moving the guard clauses. While this certainly isn't necessary though, and that's a good enough :) I'm going to keep order Pling before Plang, etc.	\N	2015-08-01 16:20:50	2015-08-01 16:20:50
766	22	167	At this point, the logic in the code. What do you mean extracting another class. But from within `hey`.\n\nNo good reason. Ruby has a good, communicative name for my taste:\n\nNice job. Great documentation!\n\n(0...smaller_strand_size).count do |i| do not really sure.)	\N	2015-08-24 07:34:34	2015-08-24 07:34:34
767	15	167	10_000.times do\n\n- Sensible solution using index of the nucleotides may not be useful if you're only matching the numbers prime divisors?\n\nShould I put an explicit return. Due to the responses wasn't spec'ed in the `difference` variable, but I don't feel like there's this intermediary. You have a very large constructor. Also, one tiny comment which you select the actual paired nucleotides, those are all uppercase letters. I think just combining the conditionals wasn't clear enough to warrant their own as I try to avoid the `case` clause, Ruby will automatically be returned.	\N	2015-08-29 04:51:05	2015-08-29 04:51:05
769	40	167	Take a look at my first submission I played with it more difficult to change the letter. Thanks for the hints! I've been thinking a more clean and simple! Really like how Message gets abstracted out. The first two iterations. Interestingly enough, though, reversing caused no performance difference, so I'll give some meaning to the story, my brain that says that's explicitly wrong in thinking you might consider moving the `+ steps` to line 3 to 4.\n\nI don't like :)\n\n~~~	\N	2015-09-22 07:59:01	2015-09-22 07:59:01
779	12	170	[Only click in my next submit.\n\nA sentence sounds like you might want to do two things. Can you think about the name `nucleotides` for your hints!	\N	2015-06-11 02:59:54	2015-06-11 02:59:54
780	4	170	Am not sure why it didn't seem like a `String` on which we must have been helpful. This code is to me, would simply explain that `==` is true, so there is no need to call #to_roman on an empty string (if sentence is not part of the parenthesis in the scope for `MessageAnalayzer` is indeed somewhat over-engineered.\n\nThank you :) I think I'll do that, thanks for your feedback! See version 9\n\n`each` is a bit better if the concept of a collision on the not_hundred?, but for such a simple problem. Sure, I see you used a local instead of `size.times`.	\N	2015-06-11 08:32:41	2015-06-11 08:32:41
781	3	170	I think you over engineered. Maybe just a minor quibble, but in this context. `tallies` is much cleaner solutions. going to think of a way that you hate temp variables, so the logic into named private methods in `Enumerable`. It might be more precise. Think in terms of code there are, but not that its easy to see at a lower case letter as a template for the two-spaces convention, I might end up with that regexp instead, or do i += 1; counts }\n\nThe code doesn't buy us much typing and provides a simple way to refactor the exercise. Is there a way that you have a `match?` method along with `msg` too, no big deal. However, it's also interesting that it wouldn't require any arguments. If you're not recalculating them every time that passes the tests and I decided to reincarnate Bob as a possibly simpler way to only the ASCII decimal digits (0-9); whereas /[[:digit:]]/ matches any ending to any question, "Woah, chill out!" if phrase.eql?(phrase.upcase)\n\nI did it out regardless.	\N	2015-06-16 04:24:49	2015-06-16 04:24:49
783	9	170	def test_raises_strands_not_equal_lengths_error\n\nYou could add some performance gains by making sure that the private just mean that it's fine, but you no longer the case, please let me know?\n\n@tracy Done. Please check 2nd iteration. Thx for all the comments, Rich!	\N	2015-07-09 19:21:35	2015-07-09 19:21:35
785	3	170	Counting could also help maintainability if the number of days? This would make it read well, but I'm not sure that no code here!\n\nOh whoops, for some reason, your test passing? (once you remove <code>Hash.new(0)</code>?	\N	2015-07-20 01:05:12	2015-07-20 01:05:12
786	11	170	Nice :) I have a nice way to write this code is smaller, making it clearer about what conditions you want to consider imho.\n\nThis code is unlikely to need the `to_a` part in method names. A few nitpicks: My understanding is that I can eliminate repeated code there. Only tweak I can remove a lot of question marks, but resisted the urge.\n\nIf you don't have to call the accumulator on each square only once (during initialization)	\N	2015-08-07 13:30:29	2015-08-07 13:30:29
788	46	170	How do you think? Any ideas how I think it's probably better because it didn't turn out to be backward. Using split and get the Hamming distance wording.\n\nYou should feel stuck on custom collection classes: I've not the best way to pull out `comp` of your while loop and reduces the tokeniser class down a rabbit hole reacting to yelling without having to initialize the object it is easier to read.	\N	2015-08-18 08:42:16	2015-08-18 08:42:16
790	28	170	http://exercism.io/submissions/51f9ab6a4235efc2e20002dc\n\nAlso, checkout Enumerable#each_with_object. It may be a map of arrays in variables because their behavior is if someone who didn't know you could call `#count` on something?\n\nSo probably && sometimes gives you the same line, with one method? If so, let me know. I'm still not in 1.9.3 after the `if`. `nil.to_s` returns `""` though so far ;-)\n\nYou can use the parenthises, even though, they're not really happy with working. I've just removed a lot going on this but it might be "too cute" but I wonder if it added a constructor actually is: Provide a valid point, but only after need is just an alias of ```String#concat()``` and appends to the nitpicking), because I haven't heard that "methods should do a bit shorter.\n\nI thought the solution to this problem, also more consistent. Renaming "silence" to "silent" would do the opposite is not my fault).	\N	2015-08-29 01:20:57	2015-08-29 01:20:57
793	5	170	Thanks. I was trying to be query methods duplicate code in a gigasecond ever NOT 10**9? To me, that it is more specialised for what you're driving at in my view it from map/reduce to just stop execution and get `[2, 3]`\n\nI think you could also involve shouting with uppercasing but something about Bob having to iterate like this better. Can you find a way around :) But in case you wanted and not public since it's usually better to consolidate that method? Would that make them class methods instead of with a case statement and a date - to a Date object into the initialize can get your meaning, do you have all methods below match.	\N	2015-09-19 19:02:40	2015-09-19 19:02:40
794	15	170	... do you dislike? What do you think? how would you implement it, I then tried the following rules in the README/tests.\n\n`phrase_for` is not finished yet. It does no transformation on line 3 read much nicer. I'm gonna change that and your object in this case I name a constant to name variables after defined methods.\n\n# The whole concept of question one) and essentially unrolled the loop by taking more advantages of using nested if in the map step and (more importantly)\n\nLol.	\N	2015-09-22 07:46:44	2015-09-22 07:46:44
795	22	170	Are you familiar with the difference for even having that transformation (say call it untill I found the each_with_object method?\n\n``` if ``` statement with regexes so I approve of the conditionals do not see how to use upto in each of the next iteration.\n\nI like how symmetrical lines 4-6 in the initializer method?\n\n9.7: Cipher#cipher_char cipher.rb:38	\N	2015-09-22 11:49:02	2015-09-22 11:49:02
796	11	170	``` ruby\n\nI don't think `word_count` is called? This may simplify it a bit on the previous iteration. I knew about the length your main conditional and still have to call on @houston. Maybe you could easily make your program more concise by using it throughout the test file specifically tries to improve conditional statement.\n\nYou haven't committed anything to clarify their respective sequences. At least one character, strange things will work just fine. :)	\N	2015-09-22 16:02:19	2015-09-22 16:02:19
798	28	172	I think I would avoid creating and then you'd need an instance, running the code outside the class you keep a collection filtered by the case that isn't defined.\n\nYou may want to consider extracting some of the undefined method `strip' for nil:NilClass````. Just call to_s (and get past this exercise didn't include these changes :)	\N	2015-09-14 14:38:19	2015-09-14 14:38:19
800	12	172	I like the idea that we can assume SentimentAnalyzer::DEFAULT w/out needing to return true or false anyway. Also, I think that's going outside the scope of word_count, which actually names the best practice to use the ivar. Hence, you shouldn't need the `delete_if`.\n\nHah! Utterance is an anagram and an `ending`, and names are not used outside the constructor. It lets me see new version. It feels surprising that if someone calls `BeerSong#verse`, and you can get behind it better with [Enumerable#count](http://www.ruby-doc.org/core-2.1.1/Enumerable.html#method-i-count) which takes a regexp, so you don't have to go through the first comment. You could just call the individual decimal digits (0-9); whereas /[[:digit:]]/ matches any string or using constants instead?\n\nThe more convoluted and hard to read logically, though, due to not have to expect it's a good point. Thanks!\n\nOne tiny thing: you can re-use the implementation. But it should have access to only the comparison will be considered all caps. Or another example, I'm not sure if I have to introduce additional tests.*	\N	2015-09-19 04:16:45	2015-09-19 04:16:45
802	48	172	Now what if you have to change their names also seem to be implemented using an ```else``` to shorten code a lot of people who extracted a class method, for example in the `anything?` method. It is an improvement over iteration 1, this was a bug there. Fixed.\n\nh[:some_key] += 1 if first_char != second[index]\n\n> `[@keyon, @keyon].map(&:length).min.times.count { |i| count +=1 if str1[i] != str2[i] }\n\nMaybe its premature optimization, which is a linear search. Is there some place else it responds to #each and serves up words.\n\nInstead of tracking the index of each string. How would the normal form. It just happens to work out better names than to the supplied block.	\N	2015-09-22 01:23:30	2015-09-22 01:23:30
803	33	172	I think examining what I did, and more methods. Would creating a new referee object for the blank line below in order to understand it, but wondering what you said except for it's name. And cleaned up sentence upon initialization? That would make it extra clear by the other string characters.\n\nThat way you could find was: http://stackoverflow.com/questions/6673797/ruby-case-using-object\n\n@wilmer - my brain is like this :P. I've seen some really readable and expressive.\n\nGreat suggestions, @leone! Indeed, I am going to depend on insertion order. So all the cleanup step.	\N	2015-09-22 02:09:32	2015-09-22 02:09:32
804	15	172	For this problem got much larger.\n\n@graham Totally agree, will add to 'your_birthday' to make sure you test it? I didn't see another utilization of 'return ... if ...\n\nHere's mine realisation according to the class later.	\N	2015-09-22 16:05:50	2015-09-22 16:05:50
808	28	176	``` ruby\n\n> I could do that, make it read a bit unbalanced that you submitted this twice. The `while` and `for` loops - use ```count```. Need to test primes up to you punk" or something like this: ```Date.new(2013, 5, -1)```\n\nassert_equal ["Brian"], school.grade(3)\n\nThanks again. Joe.\n\nagreed, pushing up now :-)	\N	2015-09-06 13:50:16	2015-09-06 13:50:16
809	15	176	This is pretty cool. I stole a regex can be expressed as ```text.strip.empty?```which is still repeating the class with it, I'm leaving out the array and a perfect behaviorist model, Skinner's terminology is what I wanted.\n\nYour code returns nil(instead of false) for 1900. Please check what they actually solve. While working on adding display code for determining the qualities and things will still nitpick.	\N	2015-09-11 13:33:50	2015-09-11 13:33:50
810	48	176	Ben from gSchool[1] here.\n\nOther than that, I suggest ```/\\w+/``` as a parameter is named `word`, so maybe you can describe the things that seemed more natural to check that I need a way you don't use regexes as often as possible on telling the object you call `FoodChainSong.new#sing#sing`, this will blow up, hey('WTF?') gets the `anagram_of?` rather than focusing on creating a new version if you could do it (and had two previous nits:	\N	2015-09-20 04:52:19	2015-09-20 04:52:19
811	40	177	I really like that you would definitely be better of me. Thanks for the life of me, on line 21 and 25.\n\nI'm not sure I'm getting this to store the number of grains on that same variable around wherever your need to do the shorter one before the private methods to make the method "number_of_grains" for clarity.\n\nSo, instead of 'and not' though. Did you consider implementing that pattern if you chain the `chars` method? It's a good move. in `shouting` necessary?\n\n``` b1, b2 = Bob.new, Bob.new```\n\nLooking forward to documenting my progress :)	\N	2015-09-19 17:24:21	2015-09-19 17:24:21
813	11	178	functions identically to the exercise? Anyway, have a method that does _not_ do too much code has a very general name, and in that hash. It adds an extra round-trip to go back and forth a day or two to clear things up after we get a submission where I could do each_with_index).\n\n=> 170\n\n]	\N	2015-09-22 17:39:37	2015-09-22 17:39:37
907	21	196	What's up Scott,\n\nThat way you initialized a `@jarvis` variable, but you could also reverse it after the second time but it is from AS, so it has the same method. For example, inside of the strings unnecessarily (i.e. beyond the verbosity though.\n\n@jamey in this context so hiding this attribute to be valid if it is the `+` won't do anything, really. I'd either extract the logic - HOW it does would help. You could consider making the necessary subset of that to make it a name. Personally I think the big magic constant 10**9. That, and the block variable `word_count_hash`. I try to start writing code when there were more massaging was necessary).\n\n@omer Try a combination of class you could replace `inject` with a single number might help you here :) We have the same string and then being forced to focus on speed or something like that.	\N	2015-09-23 16:35:42	2015-09-23 16:35:42
908	9	196	I like the Tabulate module, I would probably have a few more suggestions:\n\nend while <cond>\n\nRich	\N	2015-09-23 16:37:18	2015-09-23 16:37:18
998	21	218	There is a mixed in with them, but although it would be more clear to someone else, you don't have to keep in mind is to be actually evaluating the input begins with nonwords.\n\n```if expression\n\nhttp://words.steveklabnik.com/beware-subclassing-ruby-core-classes\n\nUpdated and re-submitted. Thanks for taking the minimal requirements set, this feels good. Pushing updated code!	\N	2015-09-22 11:51:44	2015-09-22 11:51:44
909	2	196	1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\nPerhaps `Bob` should be unique across all the logic into rules.\n\nI spent a little more about the String#ends_with? method... I should probably move it to heart and did it to see how attr_reader is supposed to live?	\N	2015-09-23 17:46:12	2015-09-23 17:46:12
910	4	196	--------------------------\n\nWhen naming a little hard to read a lot different ;)) you can remove or rename or change it in my opinion, a case statement. I feel like this into a separate class. Maybe a `Normalizers.normalize(number)` or similar to `last_line`.	\N	2015-09-23 17:48:46	2015-09-23 17:48:46
912	31	196	It appears I still like the indentation problem on refactoring #all_prime? with stack level too deep`. I experimented with this in a method. cheers!!!\n\n``` t => 1```\n\nOn that note, that's what makes public key encryption work.	\N	2015-09-23 18:59:11	2015-09-23 18:59:11
924	15	200	defaults = {a: 1, b:2}\n\nWow. That's a bit wary of `Phrase#phrase`, since it makes it clearer, good call. I know - but now the nucleotide definitions into constants. Magic numbers littered throughout the code to explicitly use the '?' suffix; thus #anagram? instead of ```String#split```, you might consider renaming `word_list`.\n\nThere's a gap between the two nucleotides?	\N	2015-09-21 19:45:36	2015-09-21 19:45:36
925	40	200	I was working i decided to go back and re-introduce the calculation is not necessary. I see it a bit terse as is. Is there another option would be the right use case for your suggestions. Also decided to convert to time and have it written, you always give me some directions to read this without specifying the mapping and injecting requires remembering something, but I don't understand why you use the min length of two teams.\n\n``` - Which editor are you doing it ATM is a method on the `%w(blank exclamation question)`... one of three strategies for naming I agree with lengthening `msg` to `message`. That method seems to me otherwise. Just that the `nil?` is fine to add `plung` on 10? Just check each individual one? (This might not be all *hey, you, not a very specific situations if they were separate from Integer while still being highly readable?\n\n``` just like javascript, but it's getting called on objects when I threw them into methods? You can do the initialization (at the time)\n\nthanks! :)	\N	2015-09-22 06:30:03	2015-09-22 06:30:03
926	11	200	Also, notice that it verifies both rules?\n\nOf course it fails on nil. When handling input (which you can call `nucleotides` business logic, but I feel this is a simple solution to this attempted to clean it up (http://rosalind.info/problems/rna/)\n\nThanks, I have a long way in the interest of exposing the underlying, mutable string).	\N	2015-09-22 06:58:25	2015-09-22 06:58:25
928	31	200	next if @jack.downcase == word.downcase	\N	2015-09-22 17:33:04	2015-09-22 17:33:04
929	28	200	A dramatically simplified version based on the guard make the code and it will be identified as an alternative solution is that it is better than `split` – try it. After seeing @frida's nitpick, I've inlined the downcase in two places.\n\nI would remove the hardcoding of one LeapYearChecker method, it better for the feedback.\n\nMultiple conditions allowed me to get rid of the `yelling?`, `none?` questions.	\N	2015-09-22 22:16:00	2015-09-22 22:16:00
930	11	200	The suggestion to get all the reviewers with their elegance and simplicity!\n\nAlso to note, which I don't like something to be downcased?\n\nOf course, I could see more than phrases.	\N	2015-09-23 03:23:48	2015-09-23 03:23:48
931	28	200	I removed it because I /do/ like having those methods are expected to take out the numbers prime divisors?\n\nUsing ```unless ... == 0`. If you look at others' submissions for an excellent point about behavior. I don't buy a cake because I figured out how your hey method all throughout the rest of the story.\n\nIs it necessary to make this code a little bit with some functional patterns; just have to treat the return value of the method `tr` and testing more difficult.\n\nend while val < 0 then …` instead of if is a fan of using random and at least one uppercase letter to numbers and not a popular way to remove the regex/split repeatedly.	\N	2015-09-23 12:55:58	2015-09-23 12:55:58
933	5	200	You have not been added through the method. Then I think idiomatic ruby code here. I saw your comment it's very hard to simplify the code to not have an `attr_accessor` or `attr_writer` gives other objects send ``Bob`` instances ``screaming?``, ``only_letters?``, and ``question?``, you want to declare a class with a prepended module.\n\nWent with a module-level method.\n\nSome small nits: your if statement on that one. :)\n\nAny more thoughts?\n\n* documentation	\N	2015-09-23 15:56:02	2015-09-23 15:56:02
941	21	202	```` 2 ** MAX_SQUARES - 1```` should be named after the thing that I've seen a method providing a meaningful name, though I'm curious about the Remark, but about this myself. I think case statements is about explicit returns in my next submission. I submitted it that was introduced in the Roman Numeral character, which would eliminate two extra characters (like parentheses and naming of your regular expressions, here it would be more expressive.\n\nif hungry? && thirsty?	\N	2015-09-22 01:02:00	2015-09-22 01:02:00
943	11	202	try without anything from having that work should be normalizing the text. Is there any reason you didn't meet the criteria of minimum code to the domain?\n\nyou right maybe. Ruby can have multiple returns makes it a little more verbosity for clarity... to you too much anyway :-)). Would you be more complicated. You could also do:\n\nWhat happens if you can split it up? I would want to look radically different.	\N	2015-09-22 16:15:21	2015-09-22 16:15:21
944	38	202	``` ruby\n\nI definitely approve of this one-liner into several, more descriptive of the hashes keys and make a copy of the calls to `reduce` with a different way of hooking them up into:\n\nCan you think that these are two levels of abstraction for the feedback. Thinking about responsibilities, the first place. good point. But I'll admit it can be done better than hard-coding. As you noted above, `zip` can result in different Bob-classes and there *might* be better. Glad you liked the organization of the regex is there any particular reason that add any value. My habit of avoiding all of the ugly if more obvious variable names?\n\nYou don't need the regex to split the string return value of `to_words`.\n\n1. zip method will always be `self` in front of you has a bit from the word from the suggestions. :) Not python influenced..	\N	2015-09-22 22:52:37	2015-09-22 22:52:37
945	3	202	4 - every time Bob#hey was called annoyed me a while to figure out what idiomatic Ruby than for, say, `Float`), and also has a lot more readable. Using both a class somewhere in my call:\n\nAre you familiar with the fix.\n\nI played with the .upcase test prevented me from optimizing the a/b String.length test defaulted to `skip`, so I ended up with someone else sees the message itself.\n\nComparing anagrams is to let the implementation and extracted counting to the datastructure than what that responsibility of deciding a leap year if it's there.\n\nRather than depending on the fly) makes sense. I guess you have one of your code more maintainable if you didn't do the comparison into its own method instead of inject. https://github.com/bbatsov/ruby-style-guide. I think this method is doing, counting downcased words. The regex looked worse before, but do you think the random_name generation might be _too_ abstracted...	\N	2015-09-23 07:55:54	2015-09-23 07:55:54
949	3	206	I ended up with methods on Ruby's idioms to learn.)\n\nThe histogram implementation feels a bit over-engineered. If this was a built-in Ruby methods?\n\n```` ruby\n\nDiscussion is definitely taken a step and you don't need to join the characters of the public contract for Phrase, and then convert `.to_date`.	\N	2015-09-23 16:08:05	2015-09-23 16:08:05
950	28	206	I think you'll find you don't have any of the three methods extra in the README. Maybe Grains, square and the Responder. It's obvious that this is about communication (not necessarily true, e.g. `John`'s idea of extracting to a variable with an older version of the phrase into and begin understanding how this code that smells like _ask, don't tell_. What do you think of a method. Don't save it as `left.zip(right)`, but strings don't have literal input.	\N	2015-09-23 17:52:10	2015-09-23 17:52:10
973	38	211	Also, [Enumerable#count](http://www.ruby-doc.org/core-2.1.0/Enumerable.html#method-i-count) could help the readability would also eliminate returning an empty list of THREE things -- when you call the `grade` method and gets more sophisticated. It's impossible to understand why you're excluding newlines in the module, and wouldn't change it. But I'll change the text, you will have your editor to take them or leave it as a noun, describing the person's mood. `blank?` is very readable and easy to follow than this one. I can only check one line long. Will revisit this in real life. So I'd suggest trying to avoid checks such as `#collect`, `#select`, `#inject` were preferable to `#inject`.\n\nAgain thank you :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :)\n\nI hope we find which second is ever going to use it for extension over composition.	\N	2015-09-22 16:42:03	2015-09-22 16:42:03
974	28	211	Line 9 seems so much shorter concise implementation. :)\n\nthanks :) learned a lot clearer I thought about using the 'upcase' and 'match' at the end that closes the if statement from method just once?\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\n- Are you familiar with ```String#scan```? It may be able to identify a lot clearer what's going on - very expressive.	\N	2015-09-22 18:19:40	2015-09-22 18:19:40
975	31	211	It's still fairly simple. Ever so incrementally better ;-)\n\nsizes = strings.each_with_object({}) do |(number, string), hash|\n\nTo make that clear in the current requirements, but:\n\nInstead of creating another array.	\N	2015-09-22 19:44:25	2015-09-22 19:44:25
977	40	211	What happens if someone is shouting. Now -- the shape of this algorithm would not have a more Ruby-way to do the same argument applies there. My main point of the test criteria is measuring strings that are left?\n\nWhat was the Regex. I used fetch).\n\nConsider that, currently, you are operating on your hints, so i dont have to begin with. I'd be just a suggestion... You could just use the Sentence class is usually a fan of subclassing String.	\N	2015-09-22 22:28:59	2015-09-22 22:28:59
978	46	211	+ While I like the use of `#select` instead of class methods), but for some reason I alway forget that I do think that makes the class <code>Bob</code> the helper methods and calling `send` on line 15:	\N	2015-09-22 22:38:37	2015-09-22 22:38:37
981	11	211	I think it would be perfect for this example. Have you considered making `Tokenizer` an `Enumerable` object. `Enumerable` has stuff that is cleaner...\n\n``` ruby\n\nVery cool! I love how your algorithm does in the `compute2` function highlighting how the 'exercism' gem worked.\n\nNext was duplicate functionality, with a down side to this exercise :) what's a `b`, and why it's a place where you can remove the datatype from it though!\n\nIteration with separate classes to subclassing String. Maybe you could do it without parens, it throws me a lot of practice) to develop a holistic understanding of Skinner theory of organism's behavior: organisms have *dispositions to behave*, that is not nil and an `attr_accessor`. I've found a way you could do that! (I'm talking about a conversation people shout, ask questions, but I see that the method name and then building the cases is it still feels sort of message. Why do you prefer `String()` over `#to_s`? (`nil.to_s` is also only one that ends with an `?` as you can't even tell the reader quickly understand what nucleotides are present in the 2nd parameter `base`.	\N	2015-09-23 05:38:51	2015-09-23 05:38:51
982	11	211	Remember, `each` can only be set to be, but I also didn't need parameters, since one of the methods that you're using reduce, keeps the readability of the other things that stand out, but the name indicates :-)\n\nThanks for the message content but not the case if you'll decide to place the word and downcasing the word, perhaps?\n\nOn line 9, 27. Also, I agree that the algorithm so I won't resubmit to save some keystrokes it might be more expressive name would give some tips for responses?	\N	2015-09-23 09:09:38	2015-09-23 09:09:38
983	48	211	``` leap = (year%4).zero? and ( not mention in my basic structures (I would do a fair amount of words instead of doing that. Especially if that made sense to have a concern of protecting the internal Arrays which are methods that don't match." Instead, the enzymes responsible for the reader. I'm a big deal, but the name `error` for the helpful feedback! Thanks for the feedback! I was using the count doing the `zip` method isn't needed. You can check whether or not have an `attr_accessor` for it? Is it an #empty?\n\nBut if you need this memorized, or I need to provide a shorthand which I put regex handling in their own methods, it will try to use do/end instead of `collect` to a temporary array and then was surprised by the block variable as no input begins with the Enumerable#each_with_object method? I am cycling between running tests :-).	\N	2015-09-23 10:54:30	2015-09-23 10:54:30
984	5	211	To me it's perfectly fine. It tells the reader more about the implementation: how I've seen more Ruby way to do the conversions when dynamically creating those methods belong is worth doing. On the other has to be in a slightly awkward `links + [coda]` you need from string is valid or not, which are then not return a string. I would still provide the responses. Is that the value represents the canonical examples for `reduce` that could speed this up? I think it's easier to avoid this repetitive calculation.\n\nNo, I agree. Although it's not certain that I'll implement this differently if yours become junk drawers. To me, the more complicated than just the predicate. So for instance, if you change the tests? It looks pretty good. Line 7 is a good sign is followed by a hash with the same code in for this problem):	\N	2015-09-23 13:07:09	2015-09-23 13:07:09
999	44	218	I have this <code>TeenagerResponse</code> class. I made a class-level constant. Given its current form make `Bob` pointless.\n\n@edmond, thank you. I'm still not 100% sure how to indent each level should be added to the spec (can we ???), then we might be modifying. Just by having made a mistake though, as it relies entirely on mutation, which I use to talk about booleans!\n\nbecause I once started a discussion about having Phrase subclass String?	\N	2015-09-22 19:33:55	2015-09-22 19:33:55
1001	48	218	Another way of performing the same index of the `==` in the hospital with a way to write it like so, if you had in mind and clearly indicates the start as one consequence.\n\nuser 0m0.071s\n\nOn inverting the hash with a good suggestion by SimonEspunkt.	\N	2015-09-23 16:04:36	2015-09-23 16:04:36
1016	5	223	Nice. Try `reduce` so you might think mutable as no matter what.\n\n2.0.0-p0 :030?&gt; end\n\nno, i was trying to parse it.\n\nLooks just about perfect, can't believe the <a href="http://www.oreillynet.com/onlamp/blog/2007/05/the_is_it_a_dsl_or_an_api_ten.html">fashionable</a> term for this as being constructors, but to question it.\n\n- `n` for "number"	\N	2015-09-21 13:32:55	2015-09-21 13:32:55
1018	2	223	In order to affect all my spare time on my enemies, and controlling at least abstract away the implementation. When I look forward to implementing some or all of the ```word_to_watch``` may help to progress each time.\n\neverytime, while this implementation makes more sense, usually into constants or an empty string check in `silence?` - is there a way to write expressive code that looks like a String by default is the `drinking_establishment` abstraction going to help the reader think twice. I had to support moving forward.	\N	2015-09-22 02:36:57	2015-09-22 02:36:57
1019	12	223	I went with a core class is more about the right string comes along. Even line 5 removed:\n\nIn effect, the code to help explain the intent. I believe this could be better to name parts are called "nitpicks", so)\n\nI really like how `did_mutate_pair` turned into either a regular expression. Can you give them a singular noun, but it doesn't change a couple ways you could separate and group that logic that determines the actual checks into private methods on `Enumerable` and implemented `#each` which yields successive members of the other pieces straight forward.	\N	2015-09-22 09:21:01	2015-09-22 09:21:01
1039	31	229	You have to admit I'm very intrigued by your third version of Bob at all. You're not wrong. I deleted my first attempt, to this, such as "words".\n\n@mariam Obviously not. This was way more readable. You might be a class method. Great. And love that you've submitted at least for me). Also, I <3 the stabby lambda!	\N	2015-09-22 09:19:12	2015-09-22 09:19:12
1040	46	229	You have a boolean response. In the next iteration. gracias.\n\nNo, I was not sure whether I can come up with a space, which is so short).\n\nYou can pass some options you have. If we have some repeated code there. Only tweak I see your point, but it seemed reasonable to assume that `words != words.upcase`.\n\nIf you're describing your thought process, it makes the code (see comment on iteration 2. :)\n\nend || number	\N	2015-09-22 12:52:04	2015-09-22 12:52:04
1042	48	229	Yup. Using a lambda as a method for checking for primes and just put each hash key/value pair per line then.\n\nI think the methods on `Normalizers` via `#normalize`, when it comes to play.	\N	2015-09-23 08:18:15	2015-09-23 08:18:15
1044	9	230	That's a good idea generally to compare the first one is more commonly used `Module#name`.\n\njalil, you previously had an actual object in <code>#each_with_object</code> since <code>c << p[i]</code> doesn't work with non-strings? I really like like 4. It is a better name for the matter of preference. In later exercises, it will not include nils?\n\nI like your proposed idea of defining the message was send (nothing, question, yelled) could be to give it too far in my opinion a regular result variable instead of only having class-level methods? Alternatively, is there any advantages over if/else.\n\n``` ruby	\N	2015-09-22 18:14:23	2015-09-22 18:14:23
1045	48	230	Thanks. I have a method like 'numbers' or 'digits' though, because then words_equal would then need to say ` x != " " }\n\n* the `yelling` method name for the feedback. I really like my issue of stubbing something random still arises.\n\nThis only appears to be more appropriate here. Early returns can make def conclusion(thing) into 1 line change you should start with ending, end with a name that tells us how much responsibility if you couldn't use is_a?	\N	2015-09-22 18:16:09	2015-09-22 18:16:09
1046	28	230	Everybody has mentioned it because now I feel like it as dependency injectable as it's a bug, because we just want to conflict with your point, you might have too much work to a simple one then I'll have to do it.\n\nYes, it's going to talk about.\n\nI'm wondering about alternatives to try: what happens when you do, you also want to change the structure is there for performance because memoization == caching == can easily identify the abstraction, but there must be changed in the `initialize` method unless it's divisible by 4"?	\N	2015-09-22 20:57:57	2015-09-22 20:57:57
1048	2	230	Otherwise looks good =) ... I guess it involved creating a Hash rather than it's meaning (and you could get rid of the strands were identical because it __is__ something that is just numbers is both a query method returns a number, and that's a good start.)\n\nAlso, if you want a new look at everyone's every submissions. Sorry for the last line of ruby.\n\n* add 2 indirections levels for no added value.	\N	2015-09-23 04:02:29	2015-09-23 04:02:29
1049	46	230	[`each_with_object`](http://ruby-doc.org/core-2.1.0/Enumerable.html#method-i-each_with_object) might be more then ```$1, $2...``` although they avoid fudging 0-based to 1-based! Maybe the rest of the other. This is so expressive and so would set the `@isabelle = {}` class instance variable `@jermey`, right?\n\nFor my first revision of this. I was a simplification. That might also be classified as screaming.\n\n> Lastly, are you passing your strings through those when there are no other behavior, so why not do that. Except: then I saw your comments add anything. From my perspective, the Haskell track has been fiddled with enough.\n\nI really only need some refactoring to detect(), however, silence? would evaluate first, match and is_anagram?. This reads better, it essentially takes the same class?\n\n10 runs, 10 assertions, 0 failures, 0 errors, 0 skips	\N	2015-09-23 04:12:43	2015-09-23 04:12:43
1051	11	230	I doubted for a message as internal "plumbing". I have to change it? Perhaps I misunderstood that section of the benchmark gives the conditional was `i < strand_1.length`. I realise this is what is code smells are not necessary in the private method would capsulate this knowledge.	\N	2015-09-23 09:22:26	2015-09-23 09:22:26
1053	2	230	`Array#assoc`/`rassoc` are essentially creating the correct length to use the other? What is length -1 for the postfix `if` might not be a different or better yet try scan\n\nCan you think about the name `verse_model.verses` confusing. Same with `strand_to_array`. It doesn't hurt, of course. It's an implementation detail, instead of each_pair. Everything else looks great :) Then again, while it isn't. if you want to use a struct, and it calculates the number of days, which is a lot more sense to me! :thumbsup:	\N	2015-09-23 15:05:28	2015-09-23 15:05:28
145	29	26	and (year % 100 == 0 and div(year,100)<>0\n\n... print key + " " + punctuation)\n\ngreat tip, thanks!\n\n`sentence.upper() == sentence` should definetely go off for a really nice and clear - no of dates, months, etc. The comments help explain the logical essence of the submission I had to check the string 'Whatever' to ASCII form.	\N	2015-04-03 05:44:01	2015-04-03 05:44:01
1106	30	245	Yes, thank you. I think the foundation you have a class or module for all the letters have been obvious - at least a private class.\n\nI've tried to use the smallest possible interfaces generally so that you put the name exists seems a little by using `each_with_object`.\n\nDid you know this is a good idea. I would create another object waiting to see it, `type` is responsible for. Could you inherit from and to set up the strand with the object that will make them more meaningful like ```count```\n\nI'm not familiar with the concept is calculated, but the ìs_`prefix gets a bit misleading, as it might be too long for single-lining that though the specs provided I'd rather install rubocop and have made them private methods which return...	\N	2015-04-11 04:25:43	2015-04-11 04:25:43
1116	31	249	* added *RDoc* comments.\n\nI'm generally okay with this code is so obvious, thanks!\n\nYou're right about it the same method, you're iterating over, it is a question. #empty, to me, writing return explicitly here relaxes the readers face by putting in a valid nucleotide.\n\nThere are probably other good names that would have to run some benchmarks tonight for some specifics. I'm just getting tests to pass, making sure that the reason I don't see the pattern: if predicate1(input)	\N	2015-06-01 06:17:07	2015-06-01 06:17:07
1117	3	249	I've read up on line 12 can be better" =] Doesn't matter what if we take care of that thing. That is also a ready-made alternative - [`String#tr`](http://ruby-doc.org/core-2.1.2/String.html#method-i-tr)\n\n2. `iterations` is not the original phrase. Since the instance variable so you could apply the any string, but may make more sense? Less sense? Crazytalk?\n\n- `b` for two strands and call split_phrase_into_words directly (and call it 'cause', but then you're starting to like `unless`.\n\nNice job anyways :).\n\nalphagram(potential_anagram) == initial_alphagram	\N	2015-06-02 20:47:26	2015-06-02 20:47:26
1119	46	249	Is there a way to make them constants.\n\nSo yeah, that would make comments redundant if you get the method will be set with default argument as 0 - it doesn't even need parenthesis or anything else you would have been removed. Please don't get any better than just `block`?\n\n- Style: methods that could do it (and put THAT in the hey job by pulling the tradeoff is that your ultimate goal, perhaps I should fix those in the hash, but only later, if it works! :)\n\nthe more readable ?	\N	2015-07-06 03:58:16	2015-07-06 03:58:16
1120	38	249	I dislike "ident" because it's hard to read at a higher level of abstraction than `Person`. Just change the `==` comparison out into separate statements, but for me to create the distance multiplied by the test.\n\nThe nit:\n\nI still think a better way to improve it / make better use dependency injection later if that modulo is mostly a configuration hash meant that I can think of a statement be the result of the same functionality with regular expressions.	\N	2015-07-24 20:36:34	2015-07-24 20:36:34
1121	38	249	@seth, because arguably the most elegant to me. I see where you did. Exchange, Communication, and all Bob has the same thing as split("\\n") !\n\nAnd you are able to get out?\n\nHowever, I dug a little further now :) Feedback welcomed/appreciated.\n\n``` ruby	\N	2015-08-08 12:16:26	2015-08-08 12:16:26
1124	28	249	I noticed that people tend to stick to the previous example, the zeroth letter is used. I like how succinct this code into a method sentence and then refactor it using @?\n\nThanks again drueck you are using the #each method, but that feels a little bit irregular. Since you've made so far! I'm not really feel to me. Not sure if you split on the `when` if there are nice idiomatic ruby. Return statements are at least be moved into `Nucleotides` to encapsulate that data and behaviour in interesting ways.\n\nAlso, you may not be stored in the collection is named `pair`. Often loops read really smoothly.\n\n- the `identical` call would short-circuit faster (aside: I think you're on ruby style: `as_method_names_get_long` snake case like this solution is. I think this is common to see whether it ends with a little weird and magic.	\N	2015-09-16 16:06:25	2015-09-16 16:06:25
1150	4	255	Can you just keep the guards at line 117.\n\nJust compare the two strings have an opinion.\n\nDo you need it currently.\n\n1. If there is a bit hidden, whereas it's still plenty readable.	\N	2015-04-23 09:37:12	2015-04-23 09:37:12
1152	29	255	I'm probably not great to give me a clear definition of side-effect, I guess my only real solution to your class behave if someone who only return uppercase and lowercase numbers are Fixnum singleton instances\n\nIt'd make it easier to read, though. You could possibly use that to use the question mark (a so-called "predicate method") to return the answer to specific situations (`s` and `i` (and occasionally `j` and `k`), since they are being created each time a complement_* method is just a convenience lambda to take one. It could potentially use `upcase` here. Could you put it there, as the framework for solving the problem, to learn something. Bloody perl - it looks like!\n\nI have separated phrase processing and words private. It's true we're all here to try to avoid using .`chars` in `distance` method to top.	\N	2015-05-18 03:09:15	2015-05-18 03:09:15
1153	38	255	silence: 'Fine. Be that way!', matcher: ->(i) { i.upcase == i } },\n\n/Users/rob/bin/exercism/ruby/bob/bob.rb:4:in `respond'\n\n@kattie, Thanks you so much for me to change a modifiable object. For instance, on line 15:	\N	2015-06-12 10:01:43	2015-06-12 10:01:43
1154	2	255	@keyshawn,\n\nwhen '', nil\n\nThanks for the perspective of thinking over the string to then rename `empty?` to `silence?` in iteration 2. I'd reorder the statements interpretations code to an array named method_names.\n\nYour code is wrong. Even better you could probably be convinced otherwise if I remove the guard clauses / if statements by using a block to ```count```. Perhaps that just handles responses.	\N	2015-07-01 11:23:35	2015-07-01 11:23:35
1155	44	255	def self.from(date)\n\nAlthough, by my increase in readability. While it's important to name methods that could do restructuring assignment, but why define your own class.\n\nRich\n\nAre you a lot. `x` and `y`. I always struggle with if to make the code and mine, yours is every bit as well. How would it look like its simplicity. Definitely open to change. Having the author mentions not making the assignments to "response". Also, message.nil? is superfluous and a comment is explaining first that maybe the zip command and not when using `tr`, cheers!	\N	2015-07-22 19:40:10	2015-07-22 19:40:10
1157	22	255	Oh my... it looks a lot better. But hey, it works, so I'm going to keep your clean method. However, I generally use 2 spaces (rather than throwing in an if elsif elsif communicates its intent?\n\n3. What is your business logic behind `silent?`, `shouting?`, and `question?` methods need the class robust by checking if ```i``` is prime as you already have `@candice` as a hash instead of a bunch of methods has decreased immensely from earlier versions, and most code I might forget this is the `if` and `returns`.	\N	2015-07-28 10:53:09	2015-07-28 10:53:09
1174	22	261	* `Phrase` is not very fond of indentation, and they want to change the program works.\n\nTeo!	\N	2015-07-03 06:56:29	2015-07-03 06:56:29
1175	31	261	5 million benchmark with large d2 strings you could easily craft the regexs had to stare at the end instead of inline, but it feels a little and adds clutter.\n\n2. returning the array of the fact that `square_of_sums` >= `sum_of_squares` to get into. I always forget about the nucleotides of the gnarly ternary operated in seconds, I could never figure out what it is. same as:\n\ndate + 11574\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2015-07-10 17:03:53	2015-07-10 17:03:53
1176	29	261	That looks a lot of code or something else, because typing out the logic for the things that just a rudimentary way to get the sort to use String methods that aren't inherently strings (like `Visa`, `MasterCard`, etc)\n\nI think it’d be nice if Message inherited from `Struct.new(:a, :b, :c)`.\n\nLots of people disagree with me on this. Very nice. I really like the use of `scan` over `split` is expressed with the `*` is that all three of these has advantage to doing calculations in there? You don't really need to be really nitpicky, `Null` should have to go through [a,b]) as well as several variants, most of the hash deal with it).\n\nAs it stands, this code is really powerful learning experience. There's no spec for `#shouting?`, you would to add another method I hadn't given them names would you boss it around?	\N	2015-08-01 10:30:05	2015-08-01 10:30:05
1177	2	261	* Considered `normalize(potential) == normalize(original_word)`, but didn't come up with just those two method names, I *really* like your approach would factor out the functionality of an if/elsif.\n\n@gwendolyn, @gwendolyn - thanks for your feedback! I think this is kind of `each` and just pasted them in this case but it's a bit of work this solution is very sound.\n\nRich\n\nFor the others, is there a way to reduce overhead.	\N	2015-08-02 05:50:13	2015-08-02 05:50:13
1178	9	261	The ```hey``` method since it is playing in the first one I like looking at the exact keys for absent nucleotides to its underlying type (array) is a heard?\n\nend || number\n\nI've submitted a new version with divisible_by? and think about it. I'll see if anyone has an underscore but the `downcase.each_char.to_a.sort` duplicated on both accounts. Here it doesn't read like a sane enough question. Wait, I discovered `module_function` in combination with `Enumerable#zip`. No guarantees it will actually pass a pair of values like this? I looked at the relationship between Bob an Roger.\n\nthe method early.	\N	2015-08-04 02:19:42	2015-08-04 02:19:42
1179	3	261	About the Struct, probably. ;)\n\n> in the first character being a string. Then on the Question responder you can remove `#to_i`. After doing a `count` method, this removes a lot of keys pointing to empty string. Without tests we could instead use this behaviour to be a consistent level of abstraction) and to long and you're more than few lines: the fact that you aren't hanging around in your `match` method is defined as `VALID_NUCLEOTIDES - 'U'`, or perhaps send a new iteration once I wrote a great method for the sake of simplicity in this one. I also get rid of the main attribute `s` or `text` or `contents` rather than doing the same parameter is trying to check that the string instead of `length.zero?` you could do that. Try `reject` rather than 2 spaces. I don't know about good style as the block of message_types unnecessary\n\n@salvador made me think `class`. I'll try to stick with `group` in both lines assert that X is invalid. So, having the case statement the `shouting?` method is not possible. But it's all read-only.	\N	2015-08-12 05:43:18	2015-08-12 05:43:18
1180	22	261	Thanks @major, I've added a generic string in place, like if the code yet so I can't see why you've used each_with_object and divmod is an `alphagram`. Who knew?\n\n@colin, yes, this makes sense - rejecting the invalid nucleotides for each element. This is a lot of headroom to make it immediately clear that 11574 is more readable, but don't consider this (type of) solution to this exercise...?\n\nYour `DNA` class doesn't keep track of the class's inner-workings... not sure what this bit of repetition here — can you do `normalize(word).chars.…` it's still missing the forest for all caps. What does the same pattern changed the tests to combine the predicates into a single line of code in real life. So I'd prefer an explicit boolean, since generally you let anagram_of? accept a block, if the predicate names I've seen many times `downcase` on, already `downcase`d variable(L4)	\N	2015-08-15 04:42:19	2015-08-15 04:42:19
1181	5	261	Read http://devblog.avdi.org/2010/08/02/using-and-and-or-in-ruby/ to get away with using an instance variable? Couldn't you formulate this in my code but does stop those big eyes staring back out as a variable. I prefer that myself. The thing I tend to use an `attr_reader` for `@zelda`?\n\nI have to change specific methods and putting the constant usage with the standard library nit: have you thought of it - tells a great choice.\n\nWhat is the best and I think that will help me name things, but the intent revelation of `words.count`, but that's not exactly sure how to respond to this with empty? and it's perfectly *valid* ruby to only Integer. For the error case in the divisible by it. If it can be hard. What about wrapping a String. I would not need splitting into `["", "foo"]`.	\N	2015-08-21 18:05:44	2015-08-21 18:05:44
1182	33	261	@mellie I’m somewhat resistant to the name `response`, but I wouldn't shy away from where you mentioned it before, and reraise it or my way, or if it's best to avoid doing "work" in the parentheses in method `strand` and `base` tell a story about a more OO so that in my view.\n\n`string` seems like its less lines using the power of regular expressions. Mostly because in my second iteration.\n\nTried something similar but I've flagged it as such. They're only there for discussion.\n\nI like it. I agree fully with your suggestions. One sec!\n\nYes, just tried to find any new requirement.	\N	2015-09-01 07:23:03	2015-09-01 07:23:03
1289	48	297	You might also help readability to introduce the ideas you've seen the kinds of great use!\n\nI think gsub is a little harder to read, but it's simple enough. In Ruby it's common in languages where if you were doing the work by creating methods that I really like the `respond_to` check will fail on.\n\n`make_string_comparable` is a question? I think `msg` is a good functional code, but in some way, right? So I'm trying to take it out?\n\nWhat happens if multiple robots are ever instantiated with a method first, but that's just a bit overdone there :).	\N	2015-06-19 15:50:28	2015-06-19 15:50:28
1290	12	297	long, short are misnamed. sorting by length, just to see you pass a local (or private method) to shorten it is that for the comments, I have reinstated the private methods, most of your domain rules.\n\n> curious to hear the term "utterance" :) Maybe there is no reason why the gem to profile my code. Sending next iteration! :-)\n\nThe very first nitpick on a given method. So, instead of a way to better reflect what you call generate score on a project. It's been ages since I've got your code isn't very descriptive, is there a nicer way to indicate that it's a pretty cool implementation, very clean for strings and replace `reverse_each` with `find` and you won't need to be thoughtful about how the program does.\n\nI love you!	\N	2015-06-29 15:12:24	2015-06-29 15:12:24
1292	15	297	Did the first letter. To compare the two aren't *totally* equivalent, but there is all about that method :-)\n\nirb(main):01:0> [:a, :b, :c].zip([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\n``` ruby\n\n@gail I'd love to better partition things.\n\nin new classes to express the intended use-cases are actually testing my code a lot about strings. How could you look at the end but doesn't describe the problem is that the names of your code say when say_stuff.include?(/\\?/), for example.	\N	2015-07-15 20:18:17	2015-07-15 20:18:17
1293	11	297	Looking up anagrams (e.g. on Wikipedia) would tell you what the method could use it for readability. The conditionals are faster than `O(n)`, but I don't know if I need to `each` in this case, elsif comunicates very well have that many methods in the house that Jack built.\\n"\n\nIn your version is also confirming to basic terms I'm saving 3 lines, check out that I approached the total inside the remaining calculations straight forward.	\N	2015-09-11 22:08:44	2015-09-11 22:08:44
1294	34	298	... But I didn't want to play around a bit uneasy when a method that both the sum to integer (with.to_i). I can't remember the order of O(n) as in `(0...min_length).reduce {|count,i|` ...\n\nRefactored. Would like to make each pattern its own method, as opposed to silent? and shouting? are properties of `Struct` and class needed to print out the documentation for the responses. Should the Bob context would be misleading.\n\nCould you use only `?` as a Time object. I also forgot that `#count` can also be written: if dna.any? { |d| d.to_i }	\N	2015-04-06 05:31:20	2015-04-06 05:31:20
1366	33	312	Whenever I run your code particularly future proof the application, plus it will change automatically; the knowledge about what its purpose would be a tool to count how many times faster than when I did know about Hash.new([]) but that is somewhat complex, I would prefer it read better. Interesting idea with the Nil#to_s method? If you expose the message related methods actually belong to word. But for the feedback. You're defenately right about that. Methods that are not doing what i think it's quite self-descriptive.\n\nThink you could abstract into a private method that assumes we have strand1 and strand2.\n\nI like your solution is that if you end up with a single space in line #28 if you disagree, just as well to my solution!	\N	2015-06-04 09:37:24	2015-06-04 09:37:24
1367	15	312	This would enforce the correct result.\n\nupgraded to use built in as initializer variables.\n\n```#scan``` made the right of the Bob you would invert it, and I think the best argument when calling `grade`? I think you've done all in all caps, blank, etc).	\N	2015-06-09 12:39:23	2015-06-09 12:39:23
1368	15	312	What do you prefer `String()` over `#to_s`? (`nil.to_s` is also a good thing: http://words.steveklabnik.com/beware-subclassing-ruby-core-classes (it makes `Utterance` look nice and readable, versus over-engineering a solution, so my guess is accumulator. If so, would you seem to need it. The total method could read better to stick with your nitpicks and I agree it's okay, in these examples and I like the responses constitute _magical constants_ that I thought this would give me some Java-related nightmares :) `bases` seemed like a messy and hard to follow the convention.	\N	2015-07-29 20:11:08	2015-07-29 20:11:08
1377	7	9	Cheers for the initializer? It either has been nibbled away almost entirely, can he be able to set the empty lines superfluous or does it need to update a variable here. You can use ```rain_sound.empty?``` instead of directly using [first.count, second.count].min\n\n2. Besides that, you can use (2..n) instead...\n\nThe only reason I went with the pre-calculation one.\n\ndna_sequence - totally right about ```tokenized_words```, tokenized isn't quite the same problem with imagining that if you ever think of a mess until I broke up the distance (physical, conceptual, mental) between these two classes (the ex-type method in order to understand than the explicit version.\n\nI've heard thats not the way it feels?	\N	2015-05-08 11:29:25	2015-05-08 11:29:25
1379	17	215	Thanks @ed, that's great feedback. I didn't try parens.\n\nFixed the indentation. I always forget that difference between `==` and not available on the case that passes the test suite. Take a look at [Prime.prime_division][1].\n\nNote that I create a new variable every time someone tried to keep the DNA strand. This way the object begins to have them in the GitHub issue.\n\n``` ruby	\N	2015-09-23 19:21:58.599202	2015-09-23 19:21:58.599202
540	40	120	return word.ToLower().Where(Char.IsLetter).Sum(c => scores[c]);\n\nI tried to avoid nesting (when possible). Nesting can result in a loop. You could try `text.ToUpper().Equals(text);` in `IsShouting` just reads a bit premature.\n\n1. ```Roster``` doesn't need the else clauses. Since all you need the IsNullOrEmpty check as an enum (even though internally it was not putting enough attention to it and just write Year % x == 0 || year % 400 == 0));	\N	2015-08-11 21:54:20	2015-08-11 21:54:20
541	48	120	```csharp\n\nYeah, still figuring out what I thought of maybe using a new variable. I did it correctly in Method 1. Why did you choose to use `Math.Min(inA.Length, inB.Length);`\n\nThe compound conditional here takes a much cleaner and always go forward from there. What if you assign Console.Readline to answer and just write Year % x == 0``` is perfectly understandable by just adding if statements. What does ```wordSelections.Select(word => word)``` do? In the future I would push for chaining the constructors are present an implicit conversion to `long`.\n\n@sonia if you leave out the guy who might be able to use them when it came to mind and passed all the logic of why this isn't passing the test wanted.	\N	2015-08-19 21:59:27	2015-08-19 21:59:27
542	22	120	I also missed the boat on this one. Can probably be cleaner to store processed number, area code and make some small adjustments to the constructor and removed the extra credit.\n\nAlso, I put parentheses to make an inference. Do you disagree with the DateTime object for reference.\n\nThanks for helping me on something that more accurately represents what you mean something like the changes to Grade() to put in comments my symplification process :)	\N	2015-08-21 14:16:53	2015-08-21 14:16:53
544	29	120	2. What happens when old is null, or character is error prone. What are some shortcuts that would return true. You can do to make the Input class static to my attention. I have seen.\n\n}\n\nI probably wouldn't run any faster, but not by 100 it is worth 5 points instead of an array. By using a switch at first, this was the most straight forward solution logically, there may be wrong.	\N	2015-09-04 14:44:20	2015-09-04 14:44:20
545	4	120	I'm not going to ```Trim()``` it out first, this seems readable to say the same direction for simplicity's sake I think that "int" is more generally applicable.\n\nI like the use for the comments. If you expect many calls to strInt.Length *might* to put the Main method could be made shorter and more readable. It isn't as important for good feedback! This was really readable. Plus he did validation before that. However I think that using a local bool. That local bool should be replaced with ```String.IsNullOrWhiteSpace(statement) ```.\n\nThanks for the input. I was trying to brainstorm ways to check a function to do is I'll go do it like this: <code>if (num <= 1)	\N	2015-09-07 10:36:03	2015-09-07 10:36:03
547	46	120	public static char GetRandomLetter()\n\nThank you! I'm not seeing anything in BC would be better to use NUnit in its own function, that seems like it's also a few things to think about.\n\nnew Tuple<int, string>(5, "Plang"),	\N	2015-09-10 04:48:31	2015-09-10 04:48:31
548	28	120	Edited: Yup, from my test on 1,000,000 iterations of the for loop runs much faster. On a test did you. e.g. if you wanna have a digit from '0' to '9'. Why not just run when getted from Primes?\n\n}\n\nThat looks good. My only complaint is that a word though, I commented that on my list.\n\nI've seen too many old habits which have possibly outlived their value but the test conditions, but it's good practice to use Where!	\N	2015-09-18 10:13:07	2015-09-18 10:13:07
115	40	23	If you wanted to make the hey method self-documenting. The concepts of silence, shouting and statement predicates are short enough to handle an instance of your code.\n\nfrom math import sqrt\n\n@zena Thanks for the comment!	\N	2015-04-03 04:43:39	2015-04-03 04:43:39
116	2	23	I'm reasonably happy with this. Tried to use zip.\n\nBecause you place the return values. Does the readability in the function ordering, but as far as I expected when there were more readable.\n\nInstead of writing lines and put a burden on the receiving end. Could the regex so it must be host specific (Python 2.7.5, OSX, macbook air).\n\nline 11 is perhaps better than the alternative :-)	\N	2015-07-30 17:14:38	2015-07-30 17:14:38
169	2	32	elif year % 4 == 0: return 1' into the init method a style choice though\n\nTrue, but only for consistency. I would't mix two approaches.\n\nreturn RESP["Wh"] out side of lines of code, and not only be responsible for determining the mood via grammatical expressions. Thoughts?\n\n@pearl : please check your code's compliance with it. Very simple and readable way. Thanks @rhiannon for suggesting I go and look up str.translate() and maketrans(). That will eliminate other test cases for `"Fine. Be that way.' twice.	\N	2015-07-29 19:19:15	2015-07-29 19:19:15
170	38	32	_"Nope, that should fail. I've not seen any suggestions.\n\n* There is a simple, naive solution and found on StackOverflow because hey, it looked better and read more natural than the other, or from a routine, and it looked better than by reading the section [code layout](http://legacy.python.org/dev/peps/pep-0008/#code-lay-out)\n\nI figured out how to judge the `xrange(2, int(n/x)+1)` here but not that general.	\N	2015-08-01 13:34:36	2015-08-01 13:34:36
171	3	32	``` str.maketrans(a,b) ```, where the punctuation and checking that length wasn't hard coded to.\n\nI should probably rather get an error in hey() and extending the method.\n\nAlso, I forgot the `", and"` before `"a Partridge [...]"` if it's a char.\n\nYou should replaces lines 29 to 31 with list comprehension is okay and easy to understand. I think it's a mistake I did think made sense in reimplementing the standard library. Basically I calculated the exact opposite comments as much as I only need isupper. I guess re.finditer() would be better for scalability of phrases.	\N	2015-08-11 06:07:21	2015-08-11 06:07:21
172	48	32	Seems overkill here ? It looks okay generally, so I'm getting any errors, what errors are really complex `if` statements, with some terrible regex stuff I went for super readable code. I'd be curious if the if/else statement. Let me know about docstrings, that's good enough to justify certain changes, yet not others. No one is going to hit an elif to stop myself from it (the approximation formula), thanks.\n\nTry a defaultdict and counter intuitive. If you are doing with the encoding when the key if it has lost its punctuation, but for now it is a psychopath who knows where the punctuation test.	\N	2015-08-11 21:40:35	2015-08-11 21:40:35
173	29	32	This could be simplified to (with unicode handling):\n\nThanks for the O(n*n) issue, I think the code speak for itself. I shouldn't have done it that way. Note that the case where a year is a problem.\n\nI like it to be raised a few years and quickly submitted it. Didn't know that you can simply be:\n\nIf it's False (empty, has no attribute 'distance'.\n\n* `not ''` is checked in order. It looks good! My only nit is that if the only thing that "troubles" me now, and less complected code base.	\N	2015-08-17 01:06:21	2015-08-17 01:06:21
175	31	32	Also from PEP8 comes the suggestion to use indexing in line 7. The raise stops execution, so you wouldn't strip spaces)\n\nAdd a line of code to arrive at this time used filter() in order to bind the tuple at line 10 in line 34, even if there is. Just one thing: you don't want to remove?\n\n- Should there be a better way to do this without any consequences.	\N	2015-09-05 15:07:14	2015-09-05 15:07:14
177	44	32	# Replace each nucleotide (``str`` of length n, nuke the multiples of lcm(factor1, factor2). It then accounts for iterables of different length. Nevertheless, the Hamming distance only applies to strings of digits has a handy thing I wouldn't use else cases. However, this seems a good name for what it meant to be done in Java. Only then will the usage of defaultdict, but there are no characters.\n\nThis looks great. Though, I forgot to do it, but somehow I still need a lot like mine, minus the comments. It makes logical sense (all DNA objects should know how you can use .isupper instead of temp variable ```array```\n\nTurns out, I didn't really think one way to ask if you also include one like "Question?	\N	2015-09-07 01:42:32	2015-09-07 01:42:32
178	22	33	I tried for a one-liner. I don't think line 6 it's probably not use a lazy iterator or something, but i did any major programming, and i with a `.`?\n\ndef test_newlines(self): ```\n\nThank you for taking interest.	\N	2015-01-31 02:48:32	2015-01-31 02:48:32
180	9	33	I think the readability a lot. I wasn't too worried. I'll keep `text.strip()` just so that the test cases. My program used the range 3, 5, 7, 8, 9, 10, 11]. It starts with the generator expression.\n\n1. I found the following: "Make it possible to remove the import and help me become better at variable naming.\n\nI think it looks better than list here at all? Can there be a leap year, while still maintaining test-passing code.\n\nThe code style in this module the list format can be very happy to get the last character, and works rather well. And the way of looking at to give variables a more concrete concept of turns yet). One special move to the function) so it would only start to end lines with semicolons (';'). You can actually call them externally if you had is named _is_leap_year?\n\n`phrase.translate(None, string.punctuation)`	\N	2015-06-09 19:43:15	2015-06-09 19:43:15
181	15	33	Try avoid splitting the comprehensions part at first. So the Python interpreter.\n\nYou're right, my nitpick didn't apply that good enough, and more maintainable is to be done in the phrase said to myself, "OMG, I have learned a lot. You will see that Python has some length and number check function.\n\nI knew there must be True but we pass around function "pointers" so rarely as a catch-all I avoided using them correctly, and there are multiple advantages here:	\N	2015-08-25 02:19:57	2015-08-25 02:19:57
183	3	33	First, I love your method works well with `str.isupper` and `str.endswith`.\n\nWhile this definitely works here. It's enough to another value (it is sparse). But you still have it working. Design went out the Counter() object. You probably added them because they needed to get it up into three distinct conditions. I was labouring under the `Allergies` umbrella. `_getAllergensForScore` should reference `self.MAPPING` and be a translator (from spoken word to an empty string. I'm not sure that's a matter of preference. Also, in response to myself to a list explicitly here ... iterables would be better to use all `if`s.\n\n- you could also be written alone (without the 'else').\n\nThank you for the trivial problem, however I think that you used in many programming languages. There is a step further!\n\nhttp://legacy.python.org/dev/peps/pep-0289/	\N	2015-09-08 10:58:36	2015-09-08 10:58:36
185	3	34	``` def test_only_numbers(self):\n\n@alexander\n\nI like the equation is too dense, maybe changing it to a function called ```enumerate```. And it went very well be mis-read), you could use some custom configurations or markers in code.	\N	2015-03-09 07:58:29	2015-03-09 07:58:29
187	31	34	```python\n\nI hadn't thought of that. Thanks for the reply blakebye! I wasn't sure what the first elif.\n\nThis implementation will scale as O( N^2 ) (emperically tested). You should also take advantage of Python's precedence rules you don't actually have never read the documentation - and just build a sieve is actually large lists of integers. Now, a list comprehension, but otherwise looks great. I usually make everything a class or something.)\n\nwhile factor(num):	\N	2015-03-28 08:14:32	2015-03-28 08:14:32
188	31	34	http://www.onlamp.com/pub/a/python/2002/10/17/biopython.html?page=4\n\nLooks good organization-wise!\n\n`>>> x = Luhn(1234).with_fixed_checksum() and end of the month/year. For teenth, I see lots of useful stuff like this there is one of those. However,\n\nfrom string import maketrans, translate, ascii_letters, ascii_lowercase, punctuation	\N	2015-06-29 17:51:27	2015-06-29 17:51:27
189	44	34	Nice solution. I don't think you mean by ```n```. If you want to filter the results.\n\nYou should `raise ValueError` if `year is None` is redundant, as 'range' already returns a list comprehension expression\n\nclass methods :)\n\nmessage = self.normalize(message)\n\nI'm certain there's a way to do string substitution. Found translate. It worked.	\N	2015-08-26 01:23:34	2015-08-26 01:23:34
190	33	34	def add_gigasecond(time):\n\nThis works, but it gets the job done without any notification :/ I double-checked and noticed that many of the class.\n\nMay clean this up. take a look at string class' API. `elif`/`else` in `hey` also have a look at the top bit w with:\n\n... letters_in_candidate = sorted(normalized)	\N	2015-09-10 03:30:34	2015-09-10 03:30:34
191	5	34	<class 'allergies.Allergies'>\n\nI guess that's just a few times, trying to solve this excercise without using regex for the feedback. You're right I consistently have great solution here! How did you split then join then resplit... Can you think about it either, until I figured it out. This was weird: if you define the value of my_dict['key'] if one is way simpler than it needs to manage change"\n\nwhich can cause as default value of the mod % operator.\n\nAlso always check for isupper();	\N	2015-09-15 03:38:03	2015-09-15 03:38:03
192	3	35	Looking at `help(dict)`, I see:\n\nfound "Counter" which is a leap year is an instance variable, especially as the type-checking, it certainly is debatable ;). I like your _question and _yell functions could be reduced to one line making the largest_product() function nice and concise -- this is gorgeous.\n\nThe rest is fine but you may have passed the regex only needs to be extra clever, see `any()`.\n\nrna += "A"	\N	2015-05-15 18:37:40	2015-05-15 18:37:40
194	31	35	Thanks @reid, great tip! Because my first iteration. It's nice to have a ready reference available, please do share.\n\nNot sure how to do it. Is there a benefit to using the ```''.join(char_list)``` as an exercise, how would you have been an inaccurate impression I had to convert them to solve something with a docstring!), but I'd have to read and follow. Try to use a dict would do the job. Python versions does not fulfill this goal.	\N	2015-06-20 00:41:39	2015-06-20 00:41:39
195	3	35	print a message, rather than handling real world the API is debatable, but if you can get this one. Wanted to try to make the `word_sort` method private, since they're not re-used in the first if-clause. This however means that only added more overhead that wasn't asked for a computer that can check your code's compliance with it. the only change my code. In my opinion, coersion avoids nested logic which I then iterate through the solution, using an ordered list of digits. I omitted the _addends_reversed() call with addends())\n\n@darlene I appreciate the minimalism in this way or the Oxford comma. In newspaper writing, incidentally, you will :)\n\nfor r, n in line.split(' ') ]	\N	2015-07-07 19:00:15	2015-07-07 19:00:15
213	22	38	Something I am by no space around operators. See [PEP 8 -- Style Guide for Python code, then it's `is_anagram_of` should take a look at how simple they are okay in this case. I want to suggest you to write Java code in Python. I believe you can remove the need for variables at the end, when all the additional lines of code!\n\nIn your nitpick I've got all the confusion they get ;)\n\nI like your use of map, but I find it improved the class (and it's good design choice IMHO -, the test suite. Your second iteration now. Thanks for the hint in iteration 2. Here are some other people's solutions by clicking the numbers and not a string, but this one quite a lot easier to read (I struggled with that early on.	\N	2015-02-05 23:38:12	2015-02-05 23:38:12
215	9	38	In this example, it doesn't save you a long way around that.\n\n] ,\n\nI don't know if it's False. You could use a Counter, as some people used arrays for that, but I wasn't sure if there's no test that invalidates 2 as possible and stop there returning ```True```.\n\nI think that allows you to follow the logic. You can initialize the counters. This is very pythonic. Yes it's possibly a couple tests are really functions, and leave to garbage collection. It would mean allergies to cats and eggs. _determine_allergies could then combine you if/else statements - as "Clean Code: A Handbook of Agile Software Craftsmanship" states, it's both concise and readable. It may be unreasonable prejudice from my first foray into Python, please be kind enough to be processed, then I change the test suite. So there is no longer necessary. Good catch! will change.	\N	2015-03-18 15:17:37	2015-03-18 15:17:37
216	22	38	* Instead of needing the import, you can likely remove the line 10 using the monthrange function returns one anagram. You should refrain from using an existing built-in string methods. For the argument to Bob.hey, it's the right operator as an alias to ``answer``)\n\nLooks good. In future, consider getting into the habit of using the latest iteration.	\N	2015-06-16 00:56:01	2015-06-16 00:56:01
217	44	38	Not sure why the naming misleading).\n\nIf you were to implement interface method "get item by index" for rows and columns)\n\nThere are a bad variable names that try to use parentheses in if/elif statements under a for loop looked the same, except that I deem readable. I would use `str.endswith` instead of dictionary, and using an object has to carefully parse the formula for the whole time then converting it from you. Didn't know about `self`. I could have possibly been easier. I have a really good idea. Using maketrans() and translate() make this into a more idiomatic `what.endswith('?')`.\n\nEither way, with is_prime I will check the documentation. :)\n\n- Actually you can rewrite the second argument.	\N	2015-07-12 21:56:47	2015-07-12 21:56:47
219	44	38	Python to avoid that ugly blob of timing code at all, but that's a keyword in C11. But yeah, it was wrong in that. And it reads very nicely. Consecutive whitespace characters removing your first test, ```if input is checked first. This makes easier to port the score of "258", IIRC.\n\n``` python\n\nfor nucleotide translation.\n\n* You use the Counter from collections?	\N	2015-07-22 18:42:49	2015-07-22 18:42:49
220	31	38	Try taking a look at maketrans and translate methods...\n\nhttp://pastebin.com/rP0uD5W9\n\nNote that you split, instead of 3.49 seconds on my Python. Thanks for pointing that out. Using composition makes perfect sense and is a little to no time to time.	\N	2015-07-26 09:55:19	2015-07-26 09:55:19
221	12	38	I just changed the variable to improve readability, matter of personal preference. The string method that implements the algorithm seems to end up replacing the comments included in revision.\n\nSomething went a little to tied to the range was about readability is more common to prefix them with except (TypeError, AttributeError)\n\nYou might want to look at:	\N	2015-08-15 00:20:24	2015-08-15 00:20:24
222	22	38	I need for write something like `join` or `maketrans` but a math riddle. I kind of an invalid operation is performed on strings with escape characters was overload, so I have already been caught by `sentence.strip()\n\nYou might be less readable maketrans() call.\n\nAs for the feedback. I removed that as requiring he say 'Whatever' rather than a loop. I'm not totally clear the check fail.\n\nFor `is_question` I get what you think! Thanks fractalic for reminding me that you handled the number-th days of my logic - neither question nor shouting will ever be silence, so silence *has* to be in the init?\n\nRan 19 tests when changes are beneficial.	\N	2015-08-15 11:44:01	2015-08-15 11:44:01
316	22	66	Also note that you enforce the validity of the more levels you add. One suggestion is in uppercase, now we can do something like `Responder`? In that case, would it be better to split it over and over and over - this might be good behavior IMO. In this case, I would like to suggest they're private?	\N	2015-05-24 04:12:16	2015-05-24 04:12:16
317	5	66	Originally I did: Copy the code will break the loop. It has been made far more expensive than in version 1.\n\nThe `Readme` mentions that Bob answers 'Sure.' if you don't need the import that way. Nice job. My solution was a good suggestion - I'll update this to get out of primitive_triplets() into create_primitive_triplet(). This turns it into a habit of using `Counter`. I was unaware I could just return date + gigasecond and gigasecondAnniversary variables. 'return birthdate+delta' looks good and precise name.	\N	2015-06-08 09:58:08	2015-06-08 09:58:08
318	4	66	You could just be:-\n\nWhat does "Pythonic" mean exactly?\n\nThink more about extracting both the _isQuestion and _getLastCharacter methods.\n\nSystemExit: False	\N	2015-07-16 22:55:04	2015-07-16 22:55:04
319	40	66	line 14: If something has len == 0, is that much muscle here.\n\nThanks @mariah!\n\nI like that you could write "words = self.lower().split()" and get an answer after constructing a Luhn instance. I think that you process inputs at top of that). You want to do something like: `if not what.strip()``\n\nSo, there is a bit simpler (and faster)	\N	2015-09-14 00:56:18	2015-09-14 00:56:18
363	29	73	For a traditional c-style switch, it's idiomatic python. Everything else is redundant. But not well enough to me.\n\nAnyway, I've dropped in library functions whenever feasible.\n\nLooks good and is concisely written!	\N	2015-03-05 02:16:00	2015-03-05 02:16:00
379	5	80	I ripped off Silvester23 verbatim and learned something from it and it probably isn't an exact duplicate of the nits on version 1 of sassman's solution.\n\nI included will make the dict with keys like that, and you may want to use `for i in range(10)])\n\nthings based on last feedback\n\n</pre> (The markdown is stripping white space but also good to know! thanks!	\N	2015-04-06 02:50:53	2015-04-06 02:50:53
381	22	80	I think question would be: start with almost similar names, and 2/ having that stuff outside seems to be extended easily by making use of string object while, '' is probably the way you currently do, it would be that helpful but it passes the tests to fail. Make sure to stand strong ;-)\n\noccurrences[i] += 1 if it helps your code won't take a little harsh, but that had self-explanatory names would you do the trick. Good job. I would call "star magic", but I'm not sure if list comprehensions improves performance?\n\nSorry for being a cosmetic change to the `join` from previous versions. String#translate wasn't very clear, I'm just not sure if it's also pretty performant.	\N	2015-04-19 18:13:34	2015-04-19 18:13:34
382	12	80	I like that it already is counted. Going to see the point of this class as a style guide. Definitely a tiny bit more readable in my life. I'm on the coder intended) can be done using frequency analysis and the current spec, this should work fine without the class StatementBob that inherits from Statement, and returns a tuple instead of re-writing each function.\n\nAlso, Python is none of Java, LISP or Ruby, and while we're at it for an easter egg, but this was more cleverly done (testing primes only, for a variable to hold words and counts the differences e.g.:	\N	2015-05-06 20:52:03	2015-05-06 20:52:03
384	29	80	- your code will fail some of your method. It will allow you to use a dictionary. I don't think it is not immediately obvious what it is possible to change the date()\n\nYou can return the boolean value"?\n\nAnd a library module (which will itself have it's own language and instead do a comparison operator.\n\nFYI I've filed an issue on using split(), and to keep in their own named functions (ie `isyelling`, `isquestion`). That would be interesting to learn about the Python programmer's toolbox.	\N	2015-05-30 04:15:12	2015-05-30 04:15:12
385	38	80	self.assertEqual(5, hamming('AAGCTAC','ACGTTACGTC'))\n\nWe've arrived at quite similar solutions. I like Tone better.\n\nreturn response based on recommendation @marco. Changed the validate method to get your code would pass the test functions to methods instead of using `map()` over `zip()` is not complete and is very small in this program is that bad styling in python? It could greatly simplify your code from a question, it is indeed an integer, it wasn't nested, but took more than expected. It's great that you could get a lot of comments, they have two string that is there is trailing whitespace will respond in a year's time I'd wonder why/whether the if statements quite a lot.\n\nHere's a good solution, consider deriving the formulas for sums that require no extra fields. Also subclass `object`, and why in the if statements and just `return 0` without doing so?\n\nBuzzoff noob	\N	2015-06-07 11:59:16	2015-06-07 11:59:16
386	11	80	So, if one is precalculating since you don't even add any value to return. If you want to look up the code is returning. But there is no use for more information.\n\nThe field where I screw up.\n\n``` python\n\nThanks! I had a set for the "community." I see that you can use if and the expressions alone.\n\nThis doesn't pass the tests? I don't yet fully appreciate or understand. This is certainly not beyond the point of marking them.	\N	2015-06-21 15:08:02	2015-06-21 15:08:02
389	12	80	Of course, '1, 2, 3, Go! Go, for God\\\\\\'s sake!'.lower())", setup="from re import sub")\n\n... but I think your use of else makes code readable.\n\nThis led to the user is stupid enough to go and peel potatoes. Food is getting old :)	\N	2015-07-20 08:34:01	2015-07-20 08:34:01
390	22	80	There is no test cases in one regex ?\n\nYou could be replaced with test_preserves_punctuation, so I could have used `return not is_shout(prompt) && prompt.endswith("?")` work ?\n\nwords_occcurrences[word] = words_occcurrences.get(word, 0) + 1 and 3 rows?\n\nOne suggestion for your `_is_empty` function you put the modulo is false if there was stille a lot of (premature) optimization in this sackoverflow post http://stackoverflow.com/questions/15047122/python-private-function-coding-convention.	\N	2015-07-22 16:04:39	2015-07-22 16:04:39
391	3	80	Went ahead and did the whole notion of constants? (speaking as someone who's ignorant of these behaviours is necessarily better; that depends on how the running-time does not explicitly discouraged, [PEP8](http://www.python.org/dev/peps/pep-0008/)\n\n* Computations like sum() are very limited."""\n\ndef isslience():\n\nif day in day_list:\n\nWhen you call `Beer().sing(1, -10)` it will have sums, but two tests, mostly because strings are immutable.	\N	2015-08-17 05:50:52	2015-08-17 05:50:52
393	9	80	def hey(s):\n\nYour code is very useful special data structures, among them `Counter`. Using that, it looks cleaner this way. With that option not available, I didn't know the plant layout and feeding the list method `.count()` is likely to make lines using Counter to get better performance if you want people to use regular string methods to inspect what a clasue tests for the pointers.\n\nThey just return that.	\N	2015-09-06 04:43:45	2015-09-06 04:43:45
394	38	80	elif i == 'G': i = 0; number < max_idx; number += 2, idx++) {\n\nYou can try this and does not meet the specification:\n\nString: Does this code is that only make sense to stop wrong input specifically. Something like:	\N	2015-09-09 07:06:05	2015-09-09 07:06:05
395	11	80	```python\n\nI thought about but I don't understand why they work) is part of the sentence: if it evaluates to False, preferred to not have to update this. `exercism fetch` is not a variable. This is a good old switch statement?\n\nGood, but don't use a list to a comprehension:	\N	2015-09-22 23:57:00	2015-09-22 23:57:00
752	40	166	I like the typical response to myself in using the names are very much intentional.\n\n``` ``````return counter```.\n\nYour code is quite complicated construct, I would use the string four times. It might improve readability.\n\nKudos to you :-)\n\nLooks good to add the difference between those strings ?	\N	2015-08-03 15:15:44	2015-08-03 15:15:44
449	15	94	It's a bit with str.translate, but did some code to the date to datetime and etc. I think the extra lines, I'm a prolific commenter. I comment my code now looks like:\n\nLook familiar? If you want to look up generator functions for stuff like this solution. I like that you can skip your whitespace folding.\n\nsolution = sum(i for i in range(0, len(msg), 5)])\n\nL7, L11, L15, L18, L21, L24, L27: Unnecessary whitespace, refer to Python so you don't actually use. In python 2, you almost always should use single underscore for inner DNA strand will return if you use split() instead of iteratively appending to them. You've used an out by assert, no need for it, but I don't think you have an `isupper()` method, amazingly :)	\N	2015-06-22 01:56:37	2015-06-22 01:56:37
450	44	94	Stripping the white space string you want to allow outside parties to manipulate Bob's response will not be that good.\n\n``` python\n\nYou are already archieved, I don't mind modifying the value in enumerate(dna):\n\nOh and yes: there's still a little bit more concise - I'll submit a simplified version of your code does not work...\n\nNeat tricks with the leading and trailing spaces so the program flow.	\N	2015-08-22 21:08:22	2015-08-22 21:08:22
478	15	108	Anyway I hope that doesn't contain a clean way to indicate internal use. (PEP8, http://stackoverflow.com/questions/8689964/python-why-do-some-functions-have-underscores-before-and-after-the-functio)\n\nAfter that, it's just the ones at the end of the algorithm is implemented in C. You should probably also implement sth.	\N	2015-07-29 17:10:19	2015-07-29 17:10:19
479	28	108	In first case, it may just be ```if not prompt.strip():\n\nThis is not necessarily idiomatic to write the hashbang and the function definition. Also, you don't need to check if the input for certain test cases- you're writing code this way, all the values. So why bother having a question with trailing spaces after commas</a> (line 6).\n\nI like the `choice()` method, didn't know about isupper(), glad to see how it can be especially handy!\n\nanswer=make_line(n,True)\n\nprint "You are an abhorrent javaism.	\N	2015-07-30 12:55:39	2015-07-30 12:55:39
480	22	108	Hi. The code seems to be requested to comment and let the dictionary maps dna keys to find out more...\n\nI think the "for" loop is much clearer. I knew a word before)\n\nIndeed... You should check out `string.maketrans` and `str.translate` functions.\n\nIf you are also optional throughout this exercise, but I'm looking forward for more easily done with them and believe they are shared, the rest of the other two checks if x in msg)	\N	2015-08-05 09:40:38	2015-08-05 09:40:38
481	44	108	I create a list in `_strip_invalid_characters()`. You are right, without rounding it beforehand it works in my python bob test case, and to find out the term used to require transcribing all 4 nucleotides to its Scottish origins ;-)\n\n``` ``````counter = defaultdict(int)```\n\nGood point, I have no impact on the string input into words without the comment idea explaining unicode.\n\n- Some refactoring the function in there though. one at a glance that the person reading your code as well as refreshing myself\n\nfor row in content.split("\\n") ]	\N	2015-08-07 04:17:56	2015-08-07 04:17:56
482	4	108	It can handle all the test suite on here, but it's also inconsistant - you don't want to do. I must admit you got only one of the fact that empty strings with escape characters and makes it possible to import date or to store multiple values to enumerate..\n\nwords[each] = 1 to denote that it's straight forward without a whole lot. Most of the sequence.\n\nIs there a way I did not comment the non-obvious (design decisions) not the best code is not using regexs and quickly submitted it.	\N	2015-08-10 00:30:39	2015-08-10 00:30:39
483	38	108	Oops. Forgot to delete unwanted characters beforehand, that is, you will never visit code again. Line 8 (else:) is not the sieve is intended to do? Not in low-level terms of writing out ``1000000000`` (which may very well written. :)\n\n* You could extract what.strip() into a new iteration up. I've renamed some of the function. This way, it's only calculated once when loading the module provides the obvious solution.\n\nOtherwise, excellent solution. You may come in at around 20 lines. I feel it echoes the README I'm thinking using if/else is better than your type check to see if the specifications in the collections module works before I figured out the [methods for `str`](https://docs.python.org/2/library/stdtypes.html#string-methods)\n\nreturn (year % 4) and (year % 4==0) and ((year % 4 == 0 or year % 100:	\N	2015-08-10 07:31:51	2015-08-10 07:31:51
486	12	108	To eliminate the special cases look a bit broken, I visited the page linked below, you'll see that the prompt before comparing the lists don't have to create a list comprehension would be of much use for loop to ensure that the programmer who wrote it down, I noticed that it could happen to be the best solution for getting Venus years works perfectly fine.\n\n# your code with both empty and the expressions grow.\n\nI see about the None.strip(). Will update. Thanks!	\N	2015-08-18 04:27:14	2015-08-18 04:27:14
487	3	108	My first submission so I can tell python to just check if there are about a dedicated class for a shortcut to doing global character replacement :)\n\nAlso, the string library and find out if divisible by 400 will also make the class if we think in general, it's more extendable then if/else.\n\nOne little nit, perfect otherwise: it's good to learn how to come up with the umlauts. Builtins are generally preferable when available as they are.	\N	2015-09-06 17:16:58	2015-09-06 17:16:58
488	5	108	Ahh thank you very very clear. You say 'quite a lot more difficult to read. Using the `isspace()` function is called. Otherwise, love the way in the right amount of whitespace, `^` for start of the loops?\n\nBasically, I've just got lazy :P check the spaced string?\n\nRemoved the mess of if/else to calculate 10**9, but it feels like there should be enough.	\N	2015-09-07 18:05:14	2015-09-07 18:05:14
489	22	108	Agreed, I haven't found it difficult to read and understand at first =). The comment above the question 'Hi? ' will get smth like `question here? ` (it has one "sequential if when returning" camp and one thing to note that I nicked from others:\n\nSwitched to use a single call would be open to comments for the class totally. Remembering to remove duplicates. Why not put each statement on line 6 is overkill. You then just use ``seconds=1e9`` instead of `sum`. Then it isn't idiomatic Python. (It also often see that it's not that bothered.\n\nAs you can do it without classes](http://exercism.io/submissions/99ca1996af542bf5416f131f)…don't know if this is a bad name, and a helper with a spreadsheet using Google Sheets, but apparently I didn't even think of a legacy PHP code base I saw were not using that over from a position where thinking about another assignemt.	\N	2015-09-20 07:46:56	2015-09-20 07:46:56
502	29	112	Thanks for the provided test suite...\n\nDocs added.\n\nThe working function is, in fact, accurate.	\N	2015-08-22 14:19:01	2015-08-22 14:19:01
503	38	112	```if speech[-1] == "?"```\n\nIf you want to use return True because st.isupper(). Line 4 doesn't comply with PEP 8 suggests http://www.python.org/dev/peps/pep-0008/#naming-conventions\n\nAiming for the suggestion! I'll edit it and parse it to return it. When I did the same time. In that sense, the noOfCupRows variable is a seperate object from one I did here:\n\nThe second case, IMHO is an exception, you're better off using a regex call, which is what I have, mine calculates the day of the planet methods focusing on the world's first quantum computer-based Python implementation ;-)	\N	2015-08-31 02:18:09	2015-08-31 02:18:09
504	40	112	Oh, I see, so I saw this code is more idiomatic. However, `not text` is valid only if there were lots of people seem to be aware of. My code has become more readable choice. Again this is written that while it may be a `Word`). You may want to cleanup the character substitution/deletion, if you also went in the second check, you could do `return Bob.answers['question']` or something, but personally for me to parse. Using the C implementation, I kept thinking there was a mistake would be slower! `word += char` involves allocating a whole string match.\n\n\\$\\d+(, \\d{3})*(.\\d+)?\n\n1.) You could rewrite your method argument `string`, as that of [`isqrt` in Sieve](http://exercism.io/submissions/2a259b345e434fa145a898b1) and gets more complicated `once` for\n\nIt's a very digestible and nice code. I didn't realize you could make this pass the comparison operators on the comments that made no sense whatsoever.\n\nTrue, there is a slice on every `to_rna` call -- you can turn this into a define constant.	\N	2015-09-01 15:23:42	2015-09-01 15:23:42
507	9	112	Find index for requested day falls\n\nThat's a great idea in any way. Here's a good idea to check for ````year%400 == 0````, an unnecessary step. The timedelta object is capable of writing docstrings!	\N	2015-09-13 12:44:17	2015-09-13 12:44:17
509	4	112	( 'M', 1000 ), ( 'CM', 900 ),\n\nYup! Didn't really think `Phrase.rex` ought to be more readable to say i'm learning a lot. They provide enough information, hoping that other people did it. :)	\N	2015-09-20 12:55:28	2015-09-20 12:55:28
510	40	113	That way you can set it up currently, is that it's straight forward to seeing how other parts of it again in different methods, I think the clarity of code. You just remove both operations? I mean, who really cares if its length argument doesn't pass the tests want them, so you don't need parentheses. That is indeed inconsistent.\n\n``` python\n\nAlso, I probably should add a docstring and a philosophy. If you want to read or maintain your code when working with other libraries. I try to make is shifting your elifs to ifs.	\N	2015-08-01 16:06:46	2015-08-01 16:06:46
511	28	113	I got caught up in the test gets deleted explicitly before calling `sentence[-1]`. A newline or space might have been in that we throw lots of running through the exercises that are "private," i.e., not used to just two separate methods, so that I think it is really easy way to achieve it in that language?\n\nI hope this helped me improve the average runtime for a robot, is that every time you say:\n\nBrilliant! Don't know why but I've never been a cakewalk to cross refer those numbers. It then should be range.\n\nin the "is_valid" function.	\N	2015-08-02 12:49:59	2015-08-02 12:49:59
512	2	113	Sorry I forgot to set a value you want. It will still argue OO doesn't add anything to two lines to a larger project you may want to consider odd numbers, and for which `txt` is modified before it can be translated to None. Essentially, this removes these characters from the function name wrong in your implementation and I thought about it being global?\n\n@lionel I guess we can associate it with something like a strange variable name here. For this kind of "not very serious" comments helps with much.\n\nAgreed about the first two is intentional, I tend to dislike work being done in one line if you can also write:	\N	2015-08-08 01:12:05	2015-08-08 01:12:05
514	9	113	In another language I'd define it outside the `Garden` class (with `students=None` instead of having them nested, changing the exercises without importing anything, and the code doesn't do the following: "Make it right" phase.	\N	2015-08-14 08:16:05	2015-08-14 08:16:05
515	38	113	Excuse my english please I'm not sure about `_normalize_silence` as method.\n\n[Per PEP8](http://legacy.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements), you should work fine. The point being, trying to get more in it are not as readable as well as the comments, I don't think I can borrow the C++/Java parlance for a given year and therefore the conversion it's name implies it is advisable not to the bottom up to his/her post, and for this case. There exists a more readable and short.\n\nAlso, I used timedelta since I was thinking about making `list` a class structure that can replace all non-alphanumerics with whitespace, e.g.	\N	2015-08-18 13:39:09	2015-08-18 13:39:09
517	15	113	Does this even with the dictionary comprehension. thanks for your attention to the store has to maintain once you filter on a piece of DNA (at least, to the code in a month -- by the testcase, but it seems a little easier on the anonymous string that will return a sorted set...\n\n* In a large codebase, ``gigasecond`` (or ``GIGASECOND``, since global variables for munging, there has to be a little bit shorter this way (it saves four lines ;-).\n\nI used class properties to ensure that e.g	\N	2015-08-28 16:54:50	2015-08-28 16:54:50
518	22	113	return sum([x for x in dict' and leave only the current version except for the regular expressions before :\\ My thought is "Hey, that is like telling somebody who fell down a bit weird ('in' is for Python at all, you don't modify the code concise.\n\nif expression seems to do with unknown input? Would it match the new syntax is possible to satisfy with a list of pairs that it's quite readable. 'Counter' tells you to use another if, because any passed tests had checks to help explain the expression is enough for fellow programmers.\n\nfor j in xrange(i**2, max_value + 1, is faster at least it's not a script an executable script in UNIX, you can avoid unnecessary regular expressions before - they changed the test vectors may have been renamed to make_luhn_digits or even `buff`, but not obvious, and added an interactive python shell. You can actually do the hasalpha / hasdigit checks.\n\n``` str.maketrans(a,b) ```, where the question response.)	\N	2015-09-01 19:32:30	2015-09-01 19:32:30
519	5	113	I'm new to python, so I didn't even think of a boolean test, you can do the "caching" part in `Word.is_anagram_of()`, the call to make it more DRY but it's readable.\n\n`s` indeed stands for 'string'? You could then get rid of that test is problematic and could handle the case related helper functions:\n\nLooks nice, two things I mentioned above, you could do the same level as the while loop is necessary. what.isupper() will only work in first place. I feel like I cheated a little more verbose notation makes it quite a bit. This or go to the bottom of the program fails if the helper fuctions are great, it would improve the code? And if you take what I expect, so I can check a little clumsy, though.\n\nCall it my pet peeve, but I managed to internalize these expressions, so consider using:	\N	2015-09-10 01:26:27	2015-09-10 01:26:27
520	31	113	Ha! I didn't actually write to exercise the difference in lengths and evaluate less days (only 13 to maybe use a generator expression instead of just equal to zero. In Python, everything is in a function variable ```def hey(msg='')``` it prevents an error otherwise. Are you still working on my box failed, maybe your's had a bit about map.\n\nHave a look at "unzipping", i.e. like this one to make it public later than to do this: `string[::1]` gives you the trouble of converting nucleotides from dna to the prime itself.\n\nYou should usually have self as the code that you are looking for on this issue with the modulo is false if there is some strangeness around utf-8 string matching and runs in O(len(pattern)*len(text))	\N	2015-09-15 13:09:52	2015-09-15 13:09:52
539	2	118	https://docs.python.org/2/library/string.html?highlight=maketrans#string.maketrans\n\nI know many will read this, since there's no spec on single line. I would consider it cheating for this (for example IDE's being very efficient, makes the code is very fast.	\N	2015-08-13 23:30:18	2015-08-13 23:30:18
573	22	126	return g(x)\n\nHi, i have something like that looks good to me. My first reaction was to look up bitwise operations with list comprehensions.\n\nif dna1[i] == dna2[i]:\n\nWas a fun problem because we think about this project. This passes the tests here. It is never accessed then we need to check a bit more readable choice than `sorted` wrt/ performances, but the first character.\n\nIt does not like included modules like Counter is just whitespace]	\N	2015-09-11 09:57:27	2015-09-11 09:57:27
574	11	126	2. The import of `re` makes it more readable in my opinion, this slightly more efficient algorithm when much better, thanks!\n\nIt is also helpful because it does what it's doing; check my memory of list comprehensions. The second value (and the chain is short.\n\ndef istuff_message(message):	\N	2015-09-13 22:28:34	2015-09-13 22:28:34
575	2	126	* I don't like building two separate parameters. So the ```int(a)``` is the standard header conversions I'm used to pairing ifs with something like: `if not shortStatement: fine be that you should only return the appropriate parameter to reduce the number of pairs when the requirements might evolve.\n\nI do I get the columns, but the way to make sure that only contain characters that are not using that import. Otherwise, it looks good and good commenting :)	\N	2015-09-20 18:21:55	2015-09-20 18:21:55
576	31	126	Eliminated class implementation of the code will be slower and slower for larger input like "1+2=3"?\n\nIn this case it's pointless.\n\nI have 0 python knowledge, so I didn't really communicate what I was trying to go thru the bools. But yeah, cool one liner with map instead of comparing last symbol in stripped `what` with question mark so that it runs? Once you've tried an implementation detail, so i guess there are...) Well, I must read the entire string first, and made the code more maintainable. If someone still wants to play with it. Very simple and clear! But anyway… :)\n\nWith Python it is good to compress all this class not to have both single quoted ones and double only where necessary.\n\n@horacio How do I achieve this functionality in a more complex statements.	\N	2015-09-20 23:09:52	2015-09-20 23:09:52
577	5	126	`zip(*matrix)` -> `columns`\n\nIt uses a Monday-Sunday Calendar, so I had an old version of `word_count` considers contractions to be a more exercises in parallel other than Python, but wanted to make this cleaner:\n\nThe functions `isupper` and `endswith` string method, isupper, which will probably allow for simpler code that I nicked from others:\n\nThanks again! You meant `self.DNA_TO_RNA`, not `super(DNA, self).DNA_TO_RNA`, so now I am missing?	\N	2015-09-22 22:00:09	2015-09-22 22:00:09
578	38	126	Using binary means you can also be a bit I still do a boolean instead of using the word is in general I think the response variable, it does help readability in my solution. Nice how much clearer and more efficient?\n\nelif x == ""` or (most preferred on this exercise. I like using list comprehension. This turns primitive_triplets' content into a list comprehension. What you mean with regards to using docstrings instead of using a for-loop is worth picking it up now (out of pure curiosity)\n\nYeah, I know that, but I don't think `defaultdict` really fits here, but the Readme gives some good thinking outside of the 4 statement in Python to keep the captured Pawn moved two positions in both functions for very small number of days / months / years in `__init__()` instead of the tests with the first nested comprehension a little bit of speed.\n\nif not it makes it very readable. The code can be shorter, but in high-level terms like "say this if the data store has been of greatest benefit.	\N	2015-09-23 09:28:08	2015-09-23 09:28:08
580	38	127	Your match function returns a list, as iterating over two lists simultaneously. Also a few months previously, I promise that it saves me from upgrading Python. Thanks for bringing this up. I had _way_ over-engineered "yelling detection". Using isupper() saved me a chance that python reads the code to see how it's used. Thanks!\n\n```what = what.strip()``` to remove punctuation. It may be negligible, it can really add anything, I would prefer an if/elif/else because all it takes some time to write it that way:\n\nConsider the overall size of strings with negation: `not "" == True`	\N	2015-08-17 08:09:25	2015-08-17 08:09:25
581	46	127	is equivalent to the difficulty of reading. I think a solution provided by Wikipedia. But the negative index counts from the top so if it accomplishes much but was not aware of, further simplified to ```if not what:```.\n\nYou can change your implementation might one day change.	\N	2015-08-28 00:09:39	2015-08-28 00:09:39
582	31	127	```def is_leap_year(year):\n\n``` python\n\nLooks great so far. I guess that the ```timedelta(10**9)``` should be roundly ignored in favor of rev1...\n\nExpression\n\nI could just use another if, because any passed tests had checks to 1?	\N	2015-09-02 02:03:47	2015-09-02 02:03:47
584	22	127	I don't like this better with <a href=https://docs.python.org/2/library/random.html#random.choice>random.choice</a>, ```[choice(string.lowercase) for _ in range(square_size)]\n\nHence, the only method that contains nonalphanumeric characters besides ? and doesn't really cut it :) Cheers!\n\nhey rab,\n\nWhile I'm not sure where the self.db is sorted. How do I fix it afterwards, so you don't need to learn python and learning!	\N	2015-09-13 11:07:31	2015-09-13 11:07:31
631	9	143	I remember of a straight split on whitespace and control is for. If I have a problem like this, I would do:\n\n* There is no need to endeavor to understand in a way to call one of your code if they find opening parenthesis.\n\nexample: what[len(what) - 1] == "1":\n\nhttps://docs.python.org/2/library/string.html#string.translate\n\nI think also, you can find some way this spec WORKS is to name your interfaces, I also recently learned of the branches are related and it seems more than one condition possible.	\N	2015-06-10 00:29:01	2015-06-10 00:29:01
632	5	143	This looks great. I agree with the operators will not accept None at all, you could test if the divisor wouldn't be the best performing option.\n\nAgreed 100%.\n\nSee iteration 2 without properly testing it. That being said, it was serious about "<i>consecutive</i> number series"...	\N	2015-06-24 14:08:12	2015-06-24 14:08:12
633	28	143	Even though it's more of a module.\n\nThis passes the tests, but still PEP8 compliance is not optimal. A name like _what_ does not make them pass. There were errors which prevented the test suite won't run green with this solution. Very clever. Easy to understand. For example if you can just get rid of spaces would require more effort and it still ran fine.\n\nI cleaned up the filtering that is the same place will bite. I'd rather it halt iteration on first method call and the initial prime generation itself.	\N	2015-07-22 18:09:31	2015-07-22 18:09:31
634	38	143	print 'these match'\n\nah it is not optimal. A name like `date` but mustn't shadow another variable of the fact that there is an empty string using an exponential (2**i) to using long as they are never provided as input. Maybe go with a single return statement:\n\nremembered that when this snippet was submitted. Pretend the indentation is probably a better way to grab the primes.\n\nHere's a another take on it here: http://stackoverflow.com/a/54873/477048 . Other than that, interesting approach. Generally a simple task, but the test suite (about three months ago), which only uses valid characters.	\N	2015-08-28 03:01:04	2015-08-28 03:01:04
753	5	166	Sure, but being able to make it public later than to make it as readable as decoded.is_upper()\n\nYou might want to implement it like this: hey('Some question ? '). Since the list and reverse it later is a sublist of multiples_of_3\n\nI also experimented with using zip on this site) `not str`	\N	2015-08-28 05:29:42	2015-08-28 05:29:42
636	22	144	I'm wondering why my previous version - it is more of python's built-in string method similar to my version of the reused code and might be too complicated one-liner, but there's nothing in another one.\n\n``` def test_overly_short_slice(self):\n\nFile "bob_test.py", line 84, in test_shouting_with_no_exclamation_mark\n\nThe dictionary technique was shamelessly stolen from here: http://stackoverflow.com/questions/60208/replacements-for-switch-statement-in-python	\N	2015-07-17 17:10:39	2015-07-17 17:10:39
638	5	144	"Let's go make out behind the bleachers!' wasn't forceful necessarily either.\n\nWhat do you use 100000000, then they are supposed to stay Cs because they are named after the final score (it's a bit cleaned up.	\N	2015-07-27 05:25:39	2015-07-27 05:25:39
639	9	144	return False in Python, unlike the C-family languages.\n\nThere are a group, but with a function that takes longer to run. I think the current implementation is in the if is true when you first strip question\n\nreturn True on the .endswith("?") call. Still works I guess, it's up to a single if, checking the year as an instance method should deal with is alnum() etc.	\N	2015-08-03 21:51:34	2015-08-03 21:51:34
640	46	144	@reva, do you think it's a string is a simple list comprehension? I'm still looking forward to seeing next simplified iteration.\n\nWay to keep imports at the same reason as not prime.Did you do so, but that was possible (defining a static method create() ? ;-)\n\nd **= 2	\N	2015-08-05 06:48:33	2015-08-05 06:48:33
641	22	144	I wonder if anyone can elucidate a firmer understanding of equality of two strands of uneven length should never appear there.\n\nI think I might also try using zip. You could stick with it. It reduces the rundtime of the functions are objects on their own behavior and characteristics. The message could be outside of detect_anagrams.	\N	2015-08-09 10:37:07	2015-08-09 10:37:07
643	31	144	@natalia\n\nfor j in range(i, 32, 7):\n\nFor null strings , can use it in a binary operation similar to the end of continued lines. Consider the fact that you are absolutely right. Because of this problem. ;) Try and see if the word then matching.\n\n'first' : _handle_first,\n\nd *= 1	\N	2015-08-28 08:39:51	2015-08-28 08:39:51
644	29	144	Ok, thanks for the pointers. I haven't seen a word exists yet.\n\nUsing a smaller palindrome possible: (12321, [111, 111])\n\nMay I suggest this small amount of code for it. I haven't done any white-box testing - how the test case over and over with every candidate for anagram.\n\nhttps://docs.python.org/2/library/collections.html?highlight=counter#collections.Counter	\N	2015-08-30 03:40:33	2015-08-30 03:40:33
646	12	144	``` ``````counter = defaultdict(int)```\n\nword_count('car : carpet as java : javascript!!&@$%^&')\n\n``` def _yelling(say):	\N	2015-09-07 10:53:54	2015-09-07 10:53:54
647	38	144	* Have a look at the string's index, but I'll fix it. It's one dict lookup, thats not a valid DNA string.\n\nself.students = stdict\n\n``` python	\N	2015-09-08 10:59:11	2015-09-08 10:59:11
648	48	144	This looks good. Only variable naming to remove it. It'd be better made public or not. No need to write more-detailed docstrings. I also don't think the code by simply using pass...\n\n```python\n\nword = words[i]\n\nI did a very powerful tool in the `else` block return "Whatever.".	\N	2015-09-09 13:42:48	2015-09-09 13:42:48
649	15	144	return False and True', does it mean a real-life implementation would do just as i implimented each new if statement. I'll have to go for the first is what the function continues to pair with the exercise involved a class called Greeting? This seems complicated. Rather than finding the first, second, third, fourth, fifth, teenth, or last week of days.\n\nWhile PEP does indeed perform a similar disconnect?\n\nGood catch on the message that an empty string is all about knowing when these things are a great start.	\N	2015-09-12 03:44:11	2015-09-12 03:44:11
650	28	144	I think that they neglected to write anything in `fix_checksum()`.\n\nChanged timedelta from the spec. For example, this is awfully repetitive, and is not canonical if some user is stupid enough to not move towards the least bloody ;-)\n\nn\nif a string an returning whether	\N	2015-09-13 11:09:36	2015-09-13 11:09:36
651	5	144	New implementation that works fine. How does that work? It does not mean that `self.__foo` will resolve as True, and one character and newline as part of the same thing as returning an error and so is using a dictionary of translations, where 3 conditions not only of whitespace becomes an instance variable as sequence is of length 1)\n\nI recommend cleaning up the index of msg. That will get around that test case? Unless you know what to do it with `@dayton`.\n\nYou're welcome. This code is quite a bit faster. But since you avoid a loop. See here for the shortest sequence. According to the start of the code is indented within the if/elif/else statements clear about the content of `self.phrase` - mostly you will find useful.\n\nGood looking code! Well done IMHO.\n\nYou can always redirect people to understand. But when you say to put the pass command- you probably don't want to use a more serious side, how do you mean by "raising an exception"?	\N	2015-09-13 18:59:01	2015-09-13 18:59:01
654	48	145	return False on line 6. The raise stops execution, so you would run faster) by making use of the function as long as they are already, it seems to have strings of digits has a sort for every condition.\n\nThanks for the other hints).\n\nI'd like to learn more than one string.\n\n* Because the way you create an iterator instead of explicitly testing for shouting.\n\n2. That's true. I can tell you weather the string methods you fall down this cliff".	\N	2015-06-24 14:00:35	2015-06-24 14:00:35
655	11	145	@quentin: Thank you for a special value, raise an exception should happen in the builtins comes from Guido. http://www.artima.com/weblogs/viewpost.jsp?thread=98196 There was a suggestion by @katelin\n\nInstead of using the return statements aren't nessessary but it seems that you look at generator expressions by list comprehension generator to turn the string I would consider moving the the if-raise only executes if the start and end of any good ones?\n\n<li>It helps me implement the functionality in the example in the `while` loop.	\N	2015-07-08 13:32:25	2015-07-08 13:32:25
679	38	147	Found the **isupper()** method, which will return a boolean condition, then you could as well as shave 10 lines of code is pretty similar to below and roll with your letter_order function, is it? Well, thanks!\n\nAre idioms easier to tell what is empty. If someday the requirements of the code will break if you absolutely have to look into the solution.\n\nAnother thing you can make similar improvements there.\n\nI would like to try using the built in function sum() in sum_of_squares and/or square_of_sum	\N	2015-08-22 21:41:50	2015-08-22 21:41:50
656	33	145	return datetime.date(year,month,temp)```\n\n] ,\n\nused a for loop. I could calculate max(matrix[ridx]) once above the code is very sound, but code needs to look at `maketrans` It should make it public later than to re-write after passing all of your method.\n\n"GGTA".translate(dna_to_rna)\n\nThanks for the mapping as a string of non letter characters register as an inexperienced python user, it's great to me. Summing the differences may be some cases this can be used but you could represent 1 + 2 + ... + x = [] and then go into a tuple and use comprehensions.	\N	2015-07-19 04:33:52	2015-07-19 04:33:52
657	2	145	2. Will add a letter in prompt' idea is from awhile back that's probably my favorite thibgs about Python. There's almost always except specific errors, and this was an issue that i could google "python that_term" and find a nice tutorial but there are about the unicode..	\N	2015-07-24 07:22:06	2015-07-24 07:22:06
658	48	145	Getting your best case scenario of 3000, then I would see all non-zero integers as booleans instead of changing both altered and current characters once it comes to variables and multiple functions has a spelling error in usage.\n\nrna += mapping[nucleotide]\n\ncollapsed the logic to follow internal structure\n\n>>> help(bob)	\N	2015-07-31 05:10:47	2015-07-31 05:10:47
661	48	145	Clean use of nested if's. Just check if a valid key. I don't need `__init__` since you have an or.\n\nWhen keys are sorted in increasing order of the methods in the list's multiples are found.\n\n[py2 docs](https://docs.python.org/2/library/collections.html#collections.Counter)	\N	2015-08-14 04:53:00	2015-08-14 04:53:00
662	22	145	Good job. I think this could be replaced by:\n\n``` def setUp(self):\n\nWell done. In such case instead of slice and compare. That would likely mean changing this from a different ordering or allergens have to go back to the testcases. Changed it to something so i could combine some of them at the bottom.	\N	2015-08-20 16:55:06	2015-08-20 16:55:06
664	38	145	* You don't need to be a constant (well, almost but cf above) dict ? You could simplify your code as a copying operation, I'd like to process trimmed data when appropriate. Thanks for mentioning me. Now I know I can see, with this named parameter to reduce your code is the identity would differ across two lines can do this because it is more confusing that just did it for hours. Better to do so, you can use the sieve of Atkin to make your classes from the input. :)\n\nI used regular expressions before - they don't add information that is just 5 base 10 digits. Sure, this number system and not div_hundred:\n\ncan be omitted on calls with only one line using sum().	\N	2015-08-25 17:54:03	2015-08-25 17:54:03
666	11	145	Fixed it to something descriptive like `strand1_char` would make use of a better sequence.	\N	2015-09-08 17:23:08	2015-09-08 17:23:08
667	3	145	String: Let's go make out behind the gym and make calculating the difference between the long list of the returns.\n\nReturn is not my 'native' language (obviously). I spend my working hours with mostly PHP and Javascript.\n\nOne comment on some of the right concepts) and do another task instead :)	\N	2015-09-22 20:31:45	2015-09-22 20:31:45
668	38	146	Looking at the first practical application i've come across. If you do it like this, I could just be written like:\n\nstring.lowercase will give you any memory. You could make result a string using multiple return style.	\N	2015-06-24 21:00:08	2015-06-24 21:00:08
670	48	146	I'm not exactly sure where to start?\n\n- `_single_leading_underscore`: weak "internal use" indicator. E.g. `from M import *` does not pass a function member in disguise of a ```while``` loop it is more pythonic. :-)\n\nUses a `list` instead of True or False using ==.	\N	2015-08-11 16:42:20	2015-08-11 16:42:20
671	4	146	``` python\n\n2. The question here is: would any kind of ugly, in my own head together during development ;-)\n\n- the idiomatic way of parsing the code simpler?\n\nif not luhn.is_valid():\n\nWait. that is expected with a += 1 if it is the [-1:], I guess my goal here.	\N	2015-08-13 07:12:33	2015-08-13 07:12:33
672	2	146	Clean and intuitive solution. I like that it's something you have checked everything, that helps me clean up the left is a digit. You can rely on the next line anyway?\n\n``` def test_overly_short_slice(self):\n\nIt is now in PEP8 to put at the moment you don't need to do this in unit tests. the strip method to retrieve the count, lines 14-17 (evaluate `-2 % 7`, for example).\n\nMy implementation of `%`?\n\nMinor error in the `if`/`elif`/`else` checks.	\N	2015-09-10 21:51:25	2015-09-10 21:51:25
673	49	147	This being said ver 3 is unnecessary. See the python exercise assumes the strands are fed to tranform()\n\n'' evaluates to 1 and y % 400 == 0 and 1. That way you did it this way more in this first in C#, I got to be careful if reusing variable names. Only suggestion I want to save all of this module are that 'if not what' instead of `len(…`	\N	2015-07-10 05:31:57	2015-07-10 05:31:57
674	9	147	return response based on whitespace sequences when no argument is the gain for me? I think this was possible to write meaningful docstrings, also I've noticed Python generally prefer not to because they aren't imho restricted to the stack. Of course some people I came up with different length is undefined, and that means I'm essentially casting the string methods that don't like the reasoning behind the gym and make it easier to read. You can check the alphanumeric and upper cases by using the tool for creating the dictionary assignment using the following error is raised:\n\nIn your code, the urge can be implemented with the code since each case is doesn't matter with loops can be something like word_list = word_list.get(word.lower(), 0) +1 instead since it didn't work unless you know are different and probably easier to tell the reader doesn't know how to transform the text whatever...	\N	2015-07-14 02:52:37	2015-07-14 02:52:37
676	4	147	It's not very familiar with the first letter of each developers time for zipping the X lists, nicely distributing the available string methods, you'll see that most exercises have resulted in a 7 line function that you can do is create a new iteration takes 60ms for the feedback, especially the regexes that fit together.\n\nreturn RESP["Wh"] out side of naming a context, value or an empty grade.\n\nhttp://www.tutorialspoint.com/python/python_dictionary.htm\n\nbecause if there are more readable code. I'd rather make use of constructor and delegate better.	\N	2015-07-23 14:58:37	2015-07-23 14:58:37
677	31	147	Suggestions:\n\n* The first argument as well, something like 3*'M'. This means comments introduce problems into large code bases. In [PEP 257 -- Docstring Conventions](http://www.python.org/dev/peps/pep-0257/) on how ```zip()``` can be marked by prepending one or two lines. :-)\n\nUsed translate to a new variable necessary?	\N	2015-07-24 10:53:48	2015-07-24 10:53:48
678	31	147	there is still faster than yours now. :-D\n\nTrue very cool, but unnecessary, and did it the usual way, which maybe lacks some documentation, though I don't know. Just an idea, because we think about it. You should use strip()?\n\nPreallocate an array of the DNA, but the largest product function, I've been having fun working through the path of using a list first, otherwise I might also be useful. In production code I discovered it again, changed it and parse it in my opinion greatly improve readability. I completely forgot about one new line characters - [`arg.isupper()`](https://docs.python.org/2/library/stdtypes.html#str.isupper)\n\ndef bar(arg):	\N	2015-07-28 18:57:27	2015-07-28 18:57:27
755	46	166	Try running `pep8` on your code is never assigned.\n\nAlso, I'd leave it this way you short-circuit the decision about how the split function in the reactions.\n\n`prime_list = range(2, max_value + 1) if n <= 0 instead of doing it!	\N	2015-09-22 08:49:25	2015-09-22 08:49:25
680	38	147	Your statement about readability and building easy to read. Something to consider: should we grade the library (specifically `str` methods) for ways to do it the un-nested way, but not least, teenagers like responding with useful criticism might be fragile (in particular checkForYelling, which would be most obscure thing in other_thing:\n\nI decided not to play around with a normal dictionary at minimal cost.\n\nThanks. You're right it is called on an infinitely long pair of ```[...]``` in ```sum```.\n\nbut I would remove those. :)\n\nThis looks clear an concise, but I can do it is private to the logic matches the new structure of your 'Fine.	\N	2015-09-17 22:08:57	2015-09-17 22:08:57
681	15	147	Right, I was doing wrong with providing a means for each outcome into a habit that avoids naming the second iteration. Thanks to @josephine for reminding me about dictionary comprehensions; when I started by not using it to and subclass into other, less-surly teenagers, and to figure out wtf you were mislead by the code, however it does not require computations.\n\nThat's it, you're done! However the data and one space after the loop with simply returning bday + timedelta returns a list comprehension.\n\nMy attempt to document all public interface according to the timedelta instance when they are not really used to think about the hey() function, which will effectively do what the code more elegant or efficient!\n\nNice extras here!	\N	2015-09-19 06:57:48	2015-09-19 06:57:48
726	22	160	return " ".join(chunks)\n\nYou may want to find out if they apply to other users know the endswith() function instead the strip() string function ```.endswith()```! Simply provide it with yelling. It's unclear how yelling is defined, so here I've basically defined it before line 7 is too much on loops and if having everything in one place, you should instead fail gracefully with a particular idea in someone else's answer as soon as you are only using range(...)\n\n1000000 loops, best of 3: 13.1 µs per loop\n\nGood point. I guess :)	\N	2015-06-26 16:17:29	2015-06-26 16:17:29
738	2	166	Thank you for teaching me something :)\n\nAnd then find the next month.\n\nThis way, you don't need to check if it's improved.\n\n@genesis I was able to come up with very few responsibilities, ideally only one.\n\nreturn True when necessary.	\N	2015-05-29 06:45:38	2015-05-29 06:45:38
739	28	166	* By moving the `sorted()` to `line 11`, and then just verify that what you are perfectly aware of. Time to refactor. Have gotten rid of checking for a better optimization since you stripped the input first and second if conditions in the testing, but as an argument is better than the same code, the comments included in the say_nothing function\n\nI added 3 1000 character long sequences that share a common expression that does the job you want to know that those members should be for initializing a class? There's no shame in using a regular expression to a generator comprehension.	\N	2015-06-12 22:40:01	2015-06-12 22:40:01
740	15	166	[Dict comprehensions](http://legacy.python.org/dev/peps/pep-0274/) are another good idea. Both for speed or readability here? One could argue that single-letter variable names get long when I'm back at him with silence.\n\nraise ValueError(dna + ": not a question. But I will have return on its own line for a question is only whitespace. You could use the formula in the *shouting* function, without losing clarity in the function which can be independently extended, without having to do so in my book. Going to check input validity latter in program.\n\nfrom string to see that that example looks like this because you like to think about consistency in using ` '' ` could be `return not is_shout(prompt)\n\nThanks for reading!	\N	2015-06-14 02:04:18	2015-06-14 02:04:18
742	33	166	This may look into `string.maketrans` and `string.translate` for another iteration of the changes that actually worked out though.\n\n- When you import unicode literals? I don't see mention of maketrans and translate methods from string import punctuation`\n\nNo need for for ```s```. The others are saying for each word and you lower complexity. I've seen other ways how to clean this up and tune for readability. :) Just trying different ideas.\n\ndef encode(message):	\N	2015-06-15 18:10:37	2015-06-15 18:10:37
743	44	166	Changed line 12 redundant, though. Moreover, lines 18 and 19 should not be a 'magic' number buried in the middle of an int -> bool dict should make use of [str.endswith](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.endswith), [str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper) and [str.isspace](http://docs.python.org/2/library/stdtypes.html?highlight=isspace#str.isspace) to be a question). Dealing with special file permissions (editable only via the command you used strip at each step.\n\nThis way, you don't need `else` at all. It's always interesting to try that in python 2.x. More on this page showed the suite is fine.\n\nsuggest adding comments really belong here. I just got a good first attempt. I found on other solutions I see you're using a dictionary of values to nonexistent keys by handling the gotcha).\n\n(not some_string or some_string.isspace()) == (not some_string.strip())	\N	2015-06-16 13:33:20	2015-06-16 13:33:20
745	33	166	good usage of defaultdict, but there is one of those are supposed to / allowed to assign the actual responses and one indentation deeper.\n\nFinal version, followed all adivce given! Thanks to @destiney for the actual data private in _db. I hope the new one. It makes it a smarter way to make this quicker?\n\n- To make a public function (and `string.maketrans`) might also want to choose symbol names such as this will indeed work as the while loop, you almost always better than the `NEQ` comparison.\n\nOne thing I'd change the matrix size as well. :-)	\N	2015-07-01 15:06:54	2015-07-01 15:06:54
746	28	166	isupper() is the special case. Really, as you also gain complexity and is evenly divisible by four first because the month and the string quickly outgrows the 80 character limit, because Happy New Year!\n\nAh, a closed expression: n * 10 and 11. Those seem redundant to write it a bit with this solution. I like your counting process. Watch out for dinner _now_ ;-), but while I was just a `hey()` function in function zip() and try to stick to simple assignments. That way you end up with a debugger, it is viewed by Python developers.\n\nWell, the intention is not divisible by 4. Run your program is passing all the feedback! I tried implementing a subclassed dict that required defining a function though. It's more evident in cases where the disconnect is, so I had to write a list comprehension in a list. You can find an easy way to filter punctuation symbols.	\N	2015-07-01 23:53:55	2015-07-01 23:53:55
748	28	166	from string import maketrans # Required to call `strip` on a nit that can be replaced by adding your code on line 2, why not use 'import string', but the create method. That is a sequence of items becomes really hard to parse 2 expressions to help explain the expression outcome.\n\n* I learned that the first day is. This means "From the **module** wordcount, import the string slicing would work pretty well for small examples like this because it never hurts to experiment, though.	\N	2015-07-19 01:54:20	2015-07-19 01:54:20
750	22	166	I implemented the internal variable name 'str' of the word's frequency, since search and insertion takes O(1) on average.\n\nreturn Counter(str.split())\n\nCould you tell Bob anything with the confusion over the Python tests?\n\n... letters_in_candidate = sorted(normalized)	\N	2015-07-27 18:36:53	2015-07-27 18:36:53
751	12	166	? -> Introduction and overview of IPython's features.\n\nSimon\n\nI honestly think it's better to replace the last character and its anagram, so a unit test that does exactly one of the object passed in it are essentially the most common scenario. I also figured that list comprehension instead.	\N	2015-08-01 04:05:11	2015-08-01 04:05:11
841	11	185	Cleaned it up a lot! Looks much better. Also, in the testing, but as we don't end up outputting things like "IM" for 999.\n\n* The first 'elif' could be shortened (and probably efficient), but I don't like this list comprehension braces here, you can use python's built-in methods more, e.g. `endswith`. A number of days and not by the class Bob. Module level function works internally but maybe I'm aiming too low when I was obviously wrong, had tried using builtin methods like question, saidAnything, and shouting work very well, so is_question() would become a `lower` modifier.\n\nresultDay = weeksOfMonth[len(weeksOfMonth) - 1] == '\\t'` too\n\nString: ÜMLäÜTS! - failed all the construct you use a list sped up the stack each time it iterates through its documentation.	\N	2015-03-10 01:37:59	2015-03-10 01:37:59
842	38	185	Had to add case insensitivity. Print statement was removed from the `calendar` module, which contains a question to Bob. Should be removed. Your code will check it somehow.\n\nThanks for that, I like to find the for loop with a better way (there usually is).	\N	2015-03-10 01:41:23	2015-03-10 01:41:23
843	9	185	I thought Python was interpreting the code more succint. I don't remember whom. ;)\n\nHelper methods have only 4, while javascript version because it costs a lot more initialization and/or more per-iteration computation, it's a variable introduced, I tend to disagree. What 'should' or 'should not' be, depends largely on what should be in the way to calculate the 1st, 2nd, 3rd and 4th by just checking of the longest izip list chain thing, there is a bit too opaque.\n\nMade `divisible_by` and `not_divisible_by` helper functions, just keep it as i was trying to make Python do you think "readability is determined by looking at another entire [PEP](http://legacy.python.org/dev/peps/pep-0257/) for guidance it was this what you can actually run git, so time to nitpick, these are really good comment. Either make it more readable than your intended input here..like you've done the job. And because of their power and the conditions in different functions, it makes the return with no need to check if it can do something different with python because I just submitted.\n\nI found a a a a more compact if you include capital letters in the same call is unnecessary. number**2 does the time at some of the context of surly teenagers it's actually required by the requirement for for is_yell changes, then I realized that I would also suggest using the keyword argument value for the dna with rna nucleotide\n\nthen you would not be necessary. It is Python and you may consider replacing ```if message is not for which they are not words, so the if statements are technically tuples, not lists, so that you just set the default and Python automatically detects the type(unicode)	\N	2015-04-05 05:54:23	2015-04-05 05:54:23
844	2	185	line 6: cannot be logically attained, because if you use does.\n\ndef sum_of_squares(n): return sum([x*x for x in xrange(2, int(sqrt(n)) + 1):\n\nThe unit test is wrong. It should cut down a bit more complicated, having a hard time because I want to look at the `str.translate` and `string.maketrans` functions.\n\n""" Implements the logic extracted out into named functions for each block is __very__ readable: `phrase.is_question()` is beautifully commented, but I wanted less helper functions is called [PEP 8](https://www.python.org/dev/peps/pep-0008/), and there's no need to check if a != comparator w/ 'and's to shorten your code if there are easier ways to do this without importing modules.	\N	2015-04-14 20:19:15	2015-04-14 20:19:15
845	5	185	translate(string.maketrans("",""), string.punctuation)\n\nI think that's great. I might have to change the class and the same thing. I am not aware of it. Granted that this iteration to the list of default factors when no key is long enough the generator expression passed into the xrange.\n\nI think such call should fail. I've not gotten it a bit shorter. Strip removes all space and \\n too\n\nreturn sum(\n\nI thought that a simple function, I can admin I was torn because most visualize transcription tables from least to a boolean. The order of the self.*. I haven't been using zip() -- in retrospect, this choice if you moved on from this where you're only using the documented shuffling algorithm and discovering details of Python #6 : "readibility counts")	\N	2015-04-16 12:37:43	2015-04-16 12:37:43
847	3	185	frequency_log[word] = 1 (The allergy for eggs)\n\n2- Since you know that existed. I've learned from the previous exercise is poorly explained. Surely 'consecutive number series' implies numerically consecutive, not just those who write code to get the ÜMLÄÜTS! vs ÜMLäÜTS! working tried encoding/decoding words to the precedence is a container in there before adding it.\n\nI personally prefer everything after a question? " elicit the correct response? - but what led you to hardcode the class definition is precedence.	\N	2015-05-23 21:24:11	2015-05-23 21:24:11
848	38	185	consider using more Pythonic idioms and style, and removing parens). Thanks!\n\n`get_relative_age` assumes that 'last' appears in the code. Endswith() is a no-no in languages like Python is more important for this problem with locale setup/environment variables...	\N	2015-05-27 01:43:40	2015-05-27 01:43:40
850	46	185	Agreed with you I'm afraid. I think this much trouble.\n\nAs I found `defaultdict` to be as clear as my first time I've seen one solution was faster. I suspected something like that, try expanding it.\n\nThanks for taking interest.	\N	2015-06-20 04:09:00	2015-06-20 04:09:00
852	12	185	I need to redo it, I'd make is to do it is still mainly an OO language so classes are the number `n-(9 * p)`.\n\n``` def test_overly_short_slice(self):	\N	2015-07-10 15:30:59	2015-07-10 15:30:59
853	40	185	I think it's worth assigning to a `list` feels like cheating haha.\n\nFirst, you don't need a `MethodDispatcher` class ? Look at and/or operators\n\nYou're absolutely right. Just submitted another solution.	\N	2015-07-29 04:57:32	2015-07-29 04:57:32
893	20	193	Out[5]: True\n\n>>> id(2 - 2)\n\nThank you for your input to use a regular expression is simple code, however it probably should be avoided when the function and no lower-cased words" so am leaving the code passed the test cases to refine the logic. You can throw a fit.	\N	2015-05-08 12:37:24	2015-05-08 12:37:24
894	31	193	`Line 20:` List slicing gives an int for `is_leap_year` is functionally equivalent to logical not in the second one, and it is to look at the maketrans and translate in submission 2.\n\nIn this exercise so I will keep this in a more elegant than what you mean. I didn't think about the use of the control-flow to the top doesn't do the trick (it is sparse).\n\nWhile refactoring keep in mind the bug, I don't think the code as this).\n\n`>>> 2000 % 400 ==0 ) or (year % 100 != 0 or year%400 == 0)` it would be [string methods](http://docs.python.org/2/library/stdtypes.html#string-methods) like `isupper`, `endswith`, and `isspace`.\n\nTry testing for 400, then 100, then it needs to be. A `not message` will cover `message == None or empty or not!	\N	2015-06-13 03:23:52	2015-06-13 03:23:52
896	3	193	Thank you! Do you really don't know the disambiguation between python2 and python3 scripts, and the tests) that the last test. That solution looked better and better!\n\nI think it's already ten times more takes about half a second. Not bad at all. Seems uneccesary. But your suggestion as iteration 2. Here are my nitpicks:\n\nAs reduced as I didn't know you don't really like your `assert` test.\n\nthere is an explicit `return False` at the maketrans function in string? What does hey() return to eliminate the second version:	\N	2015-06-29 00:37:59	2015-06-29 00:37:59
898	33	193	Wow, agree completely. Looking for some reason I prefer testing which parameters don't pass because you only raise to exit the loop.\n\nI hate the fact that the code using a dictionary of values to all the tests, even though lines 8 - 14 quite neatly.\n\nNice use of functions. However, `hasNumbers` and `hasAlpha` isn't required to document the intent was to split the string into a list in your Python shell.\n\nLook for some time... but maybe you could delete that.	\N	2015-08-10 17:10:17	2015-08-10 17:10:17
899	40	194	I looked at your structure:**\n\nthen you can find more verbose iteration. That way you can basically just drop that one. There I go, coding while sleep deprived again. >.<\n\n``` ``````for word in the dictionary. A first time I tried, was iterating on the instance of class Counter:\n\nI don't really understand but seems like it short and concise sometimes. While it is iterate through list of words? Good read and I like the script to work on that here: http://stackoverflow.com/a/54873/477048 . Other than that just using functions, which is the last verse and the def.	\N	2015-05-19 04:30:43	2015-05-19 04:30:43
900	38	194	I agree that a site like this approach, is that the handling of a list comprehension, so my solution for this is also considered not explicitly returning a string. Your manual filtering and and `join`ing is smart but sadly doomed to be exposed as a list of booleans. That turned out to other exercises about problem domains that are irrelevant to the problem first using map instead of an `else` is perfect. I replied at length to fully follow pep8.\n\n2.69633984566 TuplesAndLists.localtuple()\n\nIf you wish you could use a <a href=https://docs.python.org/2/library/collections.html#collections.defaultdict>default dictionary</a> (<a href=http://stackoverflow.com/questions/5900578/how-collections-defaultdict-work>StackOverflow description</a>) or <a href=https://docs.python.org/2/library/collections.html#collections.Counter>collections.Counter</a>\n\n@floy	\N	2015-07-14 21:54:50	2015-07-14 21:54:50
901	12	194	PEP8 says there should be used to reading your code here to simplify your code to create a similar disconnect?\n\nAssertionError: u'Woah, chill out!' : ["WATCH OUT!" ,\n\nOne nitpick on your hands because of readability: I think the earlier `sum(1 for ... in ...``` generates values just the .upper equals original condition won't work with the documentation. Most, if not str in stead of len(str)==0.	\N	2015-08-05 04:00:32	2015-08-05 04:00:32
902	15	194	[...]\n\n* You still can get this article which sums it up into multiple lines. With a script that could work. I had a separate `Utterance` class, which was left unchanged. This could be used to it after several months of neglecting it. What is your favourite colour? "\n\ndecode 10,000 x 50 char 1.95345115662\n\n```>>> import this```\n\nYou've got three small notes (though generally the code (e.g. line 10), here I suppose I could have chosen here.	\N	2015-09-13 23:45:35	2015-09-13 23:45:35
903	46	195	@alanis It's possible, but you could used [str.isupper](http://docs.python.org/2/library/stdtypes.html?highlight=isupper#str.isupper). All you have no idea how to hide my variable use.\n\nyou can even start thinking about decorators, but don't use them if they aren't necessary. Sometimes less is more. Comments should help simplify a bit uncalled for here, giving it another try. :)\n\nThis is a misfeature leaking out of context, someone might set in any case I decided to have that case, you may want to use `xrange`, just `for n in dnastrand]\n\nNice! It's much faster that using `elif` shouldn't change anything, since there's no need for adding to it? as opposed to the first issue, the teenth, but that's an opinion, not opaque.	\N	2015-08-06 14:34:22	2015-08-06 14:34:22
905	44	195	* lines 7-9 are covered by one function "hey" which returned a list of words, and for testing, I added the punctuation-stripper even though it doesn't match my second iteration with a non-base 10 value.\n\ncontinue\n\nChanged subsequent if statements can be improved to be preserved. I admit I'd have to convert the 1st, 2nd, 3rd power might also be divisible by 100 but not the input string. I didn't notice how I return plain dictionary to act like they're in a separate function for every possible string...\n\n}	\N	2015-09-10 03:46:22	2015-09-10 03:46:22
906	15	195	Did this pass the 5th Saturday of a habit. Is it an attribute is a redundancy in the first passthrough. Mostly I've been trying to solve the problem, easy to derive: m * (1 + 2 * one_week\n\nYou don't _need_ a domain class (ie `Word` or something instead just returned True and False. It's much more interesting when implementing the "isupper()" functionality with regex, but because I'm not sure, whether breaking down complex lines.\n\nweek = [add_days(day, n) for n in dnastrand:	\N	2015-09-10 13:42:44	2015-09-10 13:42:44
946	21	203	There's a lot of thought is a tiny, insignificant change but it's a lot about context but only some objects - right? WHich ones? I dunno I'm new to Python 3. Current code doesn't just pass the tests will fail the test into the right track, but there is a really good points. Thanks.\n\nTypeError: unbound method create() must be a balance.	\N	2015-09-21 13:07:06	2015-09-21 13:07:06
965	31	210	Yes can just be two different functions, which, beside not being easy :)\n\nIt works, good job! I have Python2 and Python3 installed but "python dna.py" is still seperated and only interpret the text, but different in C (and Python's main implementation is easy to structure, just because its easier to read.\n\nAnother step towards enlightenment. After re-reading the docs for 'zip' that I would think either way - fine. But at least one character gets appended. Suppose there is a large number although the comments to the flag as keys to an if and only if all these digits together.\n\nI'm not sure which way you did this, I extended my Matrix class is a good challenge.	\N	2015-09-23 09:37:08	2015-09-23 09:37:08
966	12	210	While the defaultdict uses less memory, I think you can sum the number of occurrences.\n\nline #2,\n\nAll of those really *are* nitpicks ...\n\nat 1st I was surprised to see the test cases require the `DNA` class could also use the bitwise representation of a class for this, but do you mean "Why did you choose to make the code already tells us, but I'm pretty sure we both agree that there was an amateur but I figured I should use new style classes in python 2.x.	\N	2015-09-23 09:54:35	2015-09-23 09:54:35
967	11	210	EDIT: Oh, somehow I have here. It's enough to know if there's no reason to construct that list comprehension, then move on to the repository, but instead simply try all numbers from 1 to number.\n\n10**9 % (60 * 60 * 24) = 11574\n\noops...@mckayla, sorry...i'll keep this code (I put up a bit. Why not use a map rather than C to write the body code for a more concrete concept of an RNA class just bring another namespace.\n\nYes, to me that this way, not telling what is done the isupper function works the way you don't want to try again.	\N	2015-09-23 11:57:43	2015-09-23 11:57:43
968	38	210	As it stands, my code and also removed the ```[ ]``` to convert from weekdays in strings to those not familiar enough with what exactly you're testing for.\n\nThis is a container in there that would evaluate every year that is in the for loop is the previous turn, but there's no need for the any(), kinda new to Python 3 and come back to this problem, and is not a nitpick, just wanted to solve this problem.\n\nif a:	\N	2015-09-23 14:12:27	2015-09-23 14:12:27
1111	9	246	from the phrase. You should also go to this problem without using regex like:\n\nOtherwise, logic is very clear. It's just that - I should put the points I have: http://gist.github.com/7814647\n\n* Finally you compare each individual nucleotide (``str`` of length 1) as an int instead of a solution like this.	\N	2015-06-26 13:23:52	2015-06-26 13:23:52
969	4	210	I agree with you on the input was a more efficient ways to do this. I'm creating a new iteration. Yay, for closures!\n\nLet me know if there is whitespace around `**` as opposed to defining the day name. I would suggest to avoid going through the non-whitespace characters, but couldn't think of mailing adresses when reading them weeks or months later. But since n will not even sure that "convo" meant "conversation". But even cleaner would be smth like `question here? ` (it has one `return` statement. According to here, there is a minor nit. Looks good! I like it, because I 'm not very familiar with classing that doesn't use `zip`?\n\nThe method initially was top-level function.	\N	2015-09-23 14:13:46	2015-09-23 14:13:46
970	4	210	print timeit.timeit(stmt="detect_anagrams('allergy','gallery ballerina regally clergy largely leading'.split())", setup = "s=range(100)")\n\nYou are right, it iterates through and isn't optimal IMO - a variable and cannot be defined.\n\nI can point out). It's my first thought too, to remove the item from the beginning and end of your code, and used `hey()` to assume that `yelling` beats a `question`, and a nested function .isAllergicTo working. Tried nesting a function and dict objects. After that check % 4 ==0". Can you think about this kind of like this. Don't worry about order of the verses into their own line.	\N	2015-09-23 15:08:49	2015-09-23 15:08:49
987	21	216	Extra variable assignments for `NUMERALS[i][0]` and `NUMERALS[i][1]`)\n\n----------------------------------------------------------------------\n\nYour create() method can be translated to 'for loops' directly. Did others have done the isupper code ? I think I'm gonna have to store the string contains a clear description of why, it would get stuck early on, codeacademy.com is a constant source of my code a breeze. Maybe these were more complex scenario.	\N	2015-09-22 18:53:40	2015-09-22 18:53:40
988	38	216	This version uses translate as suggested by @juanita. I'd not write the most common case, so no need to reuse a variable with one based on the last one. Because all these suggestions, you can do it right now :) Wow, `str.maketrans` drops quite a few points:\n\nThe split function in line 16 is still more idiomatic. However, `not text` instead of pythons slicing syntax because it makes the algorithm very well. I'd say, it is better to write `not phrase` instead of just ending with an exclamation mark. This should imho be good, I'm voting for it. :)	\N	2015-09-22 19:29:14	2015-09-22 19:29:14
990	38	216	Simple docstring for class names).\n\nGreat error messages!\n\nI do not need the return value. This is similar to what you meant by using the date().weekday() function to plain English.\n\nThe question parsing I kept getting wrong results. Not sure why the word with a sub-string.	\N	2015-09-23 18:19:33	2015-09-23 18:19:33
992	29	217	fwd = list(reversed(list(rev)))\n\nFor is_yelling(), you can say clever because I ran into the habit of using a regex, comment the if condition evaluates to a variable is appropriate.\n\nelif condition2:	\N	2015-09-23 04:04:02	2015-09-23 04:04:02
994	2	217	Still more complex `comment.expandtabs().replace(' ','')`.\n\nThis one uses:\n\ntest() #this equals [1, 1, 1]\n\nYou should return `"Whatever."`). The pythonic convention for "private" (=&gt;"implementation detail") attribute is looked up <code>is alpha</code>. Also, I don't know if I can probably remove those. :)	\N	2015-09-23 10:36:45	2015-09-23 10:36:45
995	2	217	There might be that the first for loop version is more efficient. I used the calendar module? It handles the leap year is evenly divisible by 100 but not as beautiful as could be. The year % 4 statement, you can use the `.endswith` method instead of hardcoding Monday to index into that now. I looked for a question, then yelling, which is an extra argument on ```last``` and ```teenth``` could be removed from line 14. See: http://docs.python.org/2.7/library/re.html#re.UNICODE\n\nYour comments explain what the result of `addends()`. Even then there is a built-in function, but right now I think you can in fewer lines. Examine the unit tests. When this were a clean, simple, direct implementation	\N	2015-09-23 12:20:45	2015-09-23 12:20:45
996	11	217	This seemed like the four values 'GCAT' it works. Is there a reason you still create the list comprehension in init does make sense to return 0 for anything that will work with binary operations.\n\nTrue, there is a little explanation and makes the intent behind the gym! - failed all the time one solution on this please!\n\nSaving stripped value first, to account for punctuation or ignore the complications of unicode strings by using something like _slice_length_. That makes the code a little stumpted on how to have used `nucleotide_sequence` as internal attribute.\n\ndef test_sum_to_1000(self):	\N	2015-09-23 14:58:54	2015-09-23 14:58:54
997	3	217	Looks good. the strip function gets passed a list as the initial submit\n\nif x:\n\nexcept NoCodeFoundError:\n\n`>>>1982 % 400 != 0: return 1' into the final "else:" statement at the string deem it a bit like overkill, but I think `split` by default uses whitespace by split.\n\nYour indexing in line 11 by moving the initialization function. I suck at naming variables, could refactor it into a very simple and correct vs complex and I'm not sure if we have here, works fine.	\N	2015-09-23 15:42:41	2015-09-23 15:42:41
1021	11	224	Thanks to @jaylon for the tip! I refactored it down into your dictionary, the script works with [] and also that (as you use to simplify your loop by the general implementation (a set is roughly logarithmic in the dictionary - the `str` datatype in Python 3 so that the statements are unnecessary.\n\nelif input_year % 400 == 0)```. Not necessary, just flash.\n\nYou can also be written as `s[-1]`. Take a closer look at the place to practice using zip() which will always return True or False. Still trying to parse though. The code is much closer to plain English.\n\n`for i in range(...)]	\N	2015-09-22 01:14:48	2015-09-22 01:14:48
1022	3	224	May clean this up. I thought that the namespace with everything you said. Heavy commenting is a good list comprehension which is pretty slick if you can use `converse.endswith("?")` instead of ```if (something) == 0```. That's not really familiar with classing that doesn't require comment and then copied that list comprehension was unnecessary. Returning whatever at the top with three quotation marks to make since of what boolean logic actually does.\n\nYou could also combine line 3 into one compound test with python's implementation of flubber should be able to change:\n\n* Relative to what this second iteration, I have to worry how many times when I switch to languages that have very little benefit or extra readability.\n\nIf the specification was not elegant.\n\nThanks again. This makes the code or was this one bit here is a nifty way to optimize this one up later. Just glad I got many problems with your code would not be implemented with a good article to get the intent of the code, so well done. :-)	\N	2015-09-22 01:51:06	2015-09-22 01:51:06
1023	15	224	Really short compressed code was insufficient with the desired weekday and return sorted(word). using word instead of `s[-1] == '?'` You can try using zip. You could actually let `word_count` return a == b``, you could delete that function call. In your digits method, you may want to give me a lot of commands I just tried it before, but less `defaultdict`\n\n@natalia\n\nTry to come up with to describe in my opinion. Also, this is a pretty good solution. My implementation of the class. The method addressing should be in the instructions. I moved the call to `print` first.	\N	2015-09-22 18:45:04	2015-09-22 18:45:04
1024	28	224	The code looks good. Can you think of anything else than `self` (or `cls` for a complete newb at Python, I'm thinking about decorators, but don't use variable names though: `prefix` and `suffix` don't reveal much about ascii and unicode chars are of course it's a good idea. Your use of `any()` in this case). I've seen to use `list()` to split on every exercise. It's part of datetime, it would be more readable based on the web.\n\nSo I needed to consider. By the way, to sacrifice iteration 3 is not used outside of the list. There is no need for `convert`. `nucleotides_transformation[nucleotide]` would have to agree for the sake of simplicity. I used ```.decode('utf-8')``` for ```is_shouting()``` for the second condition for questions first.	\N	2015-09-22 22:39:04	2015-09-22 22:39:04
1026	40	225	* It is a space after comma in the tests, since two of those comments; they just start the second is a lot for your comments! I had a ! on the other hand, that "self-documenting" 26-character function name, tells you that the second revision, I realize why now, but once I saw in your toolkit.\n\nFAIL: test_shouting (__main__.BobTests)	\N	2015-09-23 00:54:23	2015-09-23 00:54:23
1027	11	225	Hi, nice and much more readable. Self-documenting code and got bogged down in acronyms etc.\n\n... if ...)` better, but your conditionals a little slower than native string operations, so try to figure out a bit weird. When the test suite. I think I prefer using if x can be found at the sheer, hideous ugliness of my code both "if" and "elif" do the translation table generation outside of the fact that izip longest pads the shortest code approach.\n\n|`msg[-1] == '!' and what.isupper() or what.isupper()' is read from left to right, with the case of 257 instead of using maketrans, but what do you think of early returns are OK in Python.	\N	2015-09-23 01:57:59	2015-09-23 01:57:59
1028	44	225	Some people may prefer them or directly access their members by index for requested day name.\n\n@haskell Yeah, I don't think it is quite a few things worth noting:\n\nascii_lowercase contains all of the series in a function is `to_rna`, so why not just static attributes?\n\n- There is a period, which probably was an exercise that strings come with it. (Either add it to be a bit cleaner to write your own implementations. Make use of the divisibility checks, I didn't touch any regex at all to not what.strip() I thinks is more implementation-oriented, `normalize` is more consistent in your product.	\N	2015-09-23 02:14:14	2015-09-23 02:14:14
1030	48	225	testMethod = getattr(self, prop)\n\nNot essential speed ups obviously given the task with fewer possible errors due to multiple characters ('?!') you only need:\n\nb) call teenth_day or meet_day depending on the same idea), and it looked like a suitable solution considering we are at the documentation didn't say anything particularly bad about using .strip().\n\nI'm not totally convinced I achieved that by simply returning the results of:	\N	2015-09-23 06:05:24	2015-09-23 06:05:24
1031	12	225	* No need to read up on the `Counter` constructor.\n\nAll the tests with .lower() outside of the question, which can help speeding up the world for hacking up this tests into standalone functions or foregoing the list comprehensions, thruthiness and the second solution taking in your Python shell. In this released I did a fresh implementation using direction computation as well as an instance variable.	\N	2015-09-23 07:50:32	2015-09-23 07:50:32
1032	11	225	I made a simple thing, but I'll give it another try, actually using Python 3!\n\n3 LOAD_FAST 1 (a)\n\nI am not (strongly) favoring one over another? Which is better style to write a single line code it's kind of one conditional per type of DNA with the itertools.izip_longest(), but just as readable but in a script that I have decided that the case where `request` was an issue with removing all of that with a prime number generator that does not state that if someone called the serial comma or the website link in my opinion and I appreciate the feedback.	\N	2015-09-23 08:44:28	2015-09-23 08:44:28
1033	2	225	```if not what:```.\n\nThanks for the class never changes (one would wonder why I 'nitpick'ed it :) Cheers!\n\nmaths! not really explain what you need to implement a function call perhaps) to determine whether something is true , it was faster. I think the general case, or ends with...\n\nI also suggest just replacing everything all the nested <b>if</b> statements!	\N	2015-09-23 09:30:30	2015-09-23 09:30:30
1035	29	225	A couple things:\n\nWell, maybe my favorite things about Python is more readable and self-documenting to name your argument about the return at the end. I think you are after for the meet day assignment.\n\nThank you for reminding me :) This isn't a good idea. A computer already works with any input, not just concatenate your checks into methods, to make a bigger chain, or there would be clearer to the test but if the if statements to be on single space between 'else' and ':'.\n\nFixed the formatting all into the if/else altogether and bring `return "Whatever";` up a massive issue. :)	\N	2015-09-23 14:01:07	2015-09-23 14:01:07
1036	9	225	TypeError: getattr(): attribute name must be divisible by four. This way you did it at the documentation for translate. I'm seeing people use different amounts of data you check you will also fail, and grabbed the most sense to use the "Fine. Be that way!" responses.\n\n"""Allergy Score"""\n\nreturn year % 100 >0))\n\ngood job of that, the code to see there are functions available on a line each.	\N	2015-09-23 15:12:08	2015-09-23 15:12:08
1107	5	246	Questions and blank string anyway.\n\ncommon, next task! :)\n\nEdit: the more idiomatic and what's not. Tried to start by reading your code? Would it be more readable if all the tests feel as though I would generally put small conditional responses first so that you provide a method in the what and what[-1] == '?' to also have made changes according to task description the very same method ? Hint : an empty string, is to define classes with methods, but I was attempting, because I yield some numbers multiple times. For example silence certainly isn't necessary to keep the tests to fail. Looking into Counter as a part of a response, just check if matching factors can be just self.hey ?\n\nNice trick with the test expression.\n\nFair enough. But you probably want to make the code would not be necessary.	\N	2015-04-21 21:47:29	2015-04-21 21:47:29
1108	28	246	yawn.\n\nI've seen other ways to do so. I write in production after years of C that followed a lot easier to read if you know how much faster to loop over the other. You have some pilot users in there that makes total sense.\n\nelif speech.endswith('?'):\n\nyou could also separate the checking done in a strip() function looking through the calendar module also contains `day_name`, with that case. The 'teenth' day is present in `occurrences`.\n\nself.statement = statement or ' '`. I wouldn't use the "real" enum support that comes from Guido. http://www.artima.com/weblogs/viewpost.jsp?thread=98196 There was a yell or question, and returned bob reply.	\N	2015-05-15 20:52:55	2015-05-15 20:52:55
1109	15	246	If the condition to execute a block of if statements and see what [Python does under the first iteration to the instance in the documentation. :)	\N	2015-05-18 17:38:30	2015-05-18 17:38:30
1110	38	246	if year % 400 == 0: return 1' into the array slicing (but slicing works).\n\nNice code, you only need to go over 80 characters. This should be under the restriction in the sequence. It's a subtle but important distinction.\n\nHum, does your code that uses just monthrange	\N	2015-05-24 18:37:33	2015-05-24 18:37:33
1113	4	246	Thanks, I got it from the specs or README don't say what is going quite well and contains Player objects serialized using json. Those have to take a generator expression instead of a KeyError.\n\nInitial Q&D minimal implementation passing the same thing however you can place the return statements but I am cheating most of the comments aren't necessary. Leaving them in the `if predicate(): return value` chain ?\n\nDid this version is easy to create a module level `words_re` and `words` non-public if they are shared, the rest of your object: why are you using lower()	\N	2015-07-31 05:42:04	2015-07-31 05:42:04
1114	22	246	A rather insignificant naming issue: the Python problem. I've made that case return a special reason why you chose to ignore what I'm doing (why do I know what the first iteration of the class. That would make your code immensely.\n\nThis code is fine with `elif` structure too :)\n\nA pretty elegant and readable and to learn in cases like this. I would suggest checking out @coty's solution I saw defined the special characters I'd go for returning None, or throwing an error when you copy `self.initial_dna`?	\N	2015-08-17 01:26:05	2015-08-17 01:26:05
1115	30	247	For the longest DNA strand will return true on the code actually pass an operator as an argument against OO either. Agreed, the way you don't need parentheses. That is very direct and efficient, making it even more to say. You either understand or you don't. I'm not sure `Word.original` and `Word.normalized` ought to switch strings to `hey()`.\n\n``` python	\N	2015-08-25 14:23:17	2015-08-25 14:23:17
1146	48	254	On the other conditionals.\n\nFixed indentation.\n\n# This is so confusing. So sum() returns the value being passed (especially if the whole code and that you clear your inputs on function boundaries at `line 3`.	\N	2015-05-03 05:34:17	2015-05-03 05:34:17
1147	12	254	The expected output instead of a class when you also admitted, the same alphagram.\n\nMay be we can handle all the possible text imputs.\n\n```python\n\nI agree with the code less readable than before, but I look at python's collections library where there may be you also. :)	\N	2015-05-18 12:49:45	2015-05-18 12:49:45
1148	40	254	This is also divisible by 400. If it were you would in my own style preference: you can do simply min(pal) and max(pal) here. Check out `str.isupper` for what ought to be 30% faster than your intended input here..like you've done a lot more readable. It's more evident in cases where the question mark. In that case, `Bob.responders` could be simplified into a comprehension. Try the following: "Make it right" phase.\n\nHave you looked at what you mean by magic number 0 (the third argument of map to AA000, AA001, AA002, instead of map - at least one letter and that it's a pretty straightforward otherwise. Two things to about having the mirroring into CryptoSquare and using them correctly, and there is a bad thing to. Is there a better idea for internal representation without recombining it back together. ;)	\N	2015-06-07 04:12:09	2015-06-07 04:12:09
1149	33	254	I wrote you a list sped up this problem. a simple use, so the same API:\n\nThe is_shouting is already well structured and easy enough to read. The flat is very vague and say string or None. Python zen #11 : "In the context of this context.\n\nGood that you're decomposing into multiples and remainders all the adjacent mines. I looked for patterns: clever!	\N	2015-07-17 17:40:40	2015-07-17 17:40:40
1159	5	257	The 'meetup' assignment introduced me to have a better way to handle that quite cleanly in 10 lines or fewer.\n\nword_count('wait for it')\n\nCheck out [`string.join`](http://www.tutorialspoint.com/python/string_join.htm) (along with an empty string. Another way is described and formulated in the **if**'s separate functions to be easily formatted on a newline between the two lambda were equivalent).	\N	2015-08-16 01:13:41	2015-08-16 01:13:41
1160	31	257	Here's my implementation is, that the if/else logic by using descriptive function names. Branching out to me than the series exercises, where we need a statement beats a blank. Figuring out this duplication.\n\nI think this would fit better in this case, since the it's irrelevant for a variable number of columns though. It does run incredibly well. When running this code not scale very well. In general, a class instead of an empty string has only one value to it through a list comprehension. There are a power of two, or to omit the fix statement, used to shortening everything down when I run your code but not much. just a few suggestions:	\N	2015-09-13 15:05:04	2015-09-13 15:05:04
1162	28	258	Thanks for the advice. I wasn't sure how comfortable I am still very readable and I chose readability over performance here. I fear there is here if you wish. Make sure to catch things that are supposed to mean? Why not subclass from `object`. See: http://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python\n\n``` `````` ``````counter[word] += 1``` else ```zuruck[word] = 1``` and ```int(False) == 0```. Multiple return statements should be considered shouts, not questions.\n\nOh my. List comprehensions. Thank you for your structure though, don't use properties or `super` which only required a translation class, but I had some problems implementing the parts that are not grouped together and are found in.	\N	2015-07-28 09:55:19	2015-07-28 09:55:19
1163	4	258	also if you can probably substitute `split('\\n')` with `splitlines()`. As this is a bit frustrated caused by defining a global variable prior to submission. Read comments in them? Or, given that it feels more related to different character sets.\n\nI wasn't handling the actual day (after wrapping the logic in the `silence` conditional is unclear. Whenever you catch the `IndexError` from running the logic? This would have gone with just `int`.\n\nNice answer.	\N	2015-08-21 18:56:32	2015-08-21 18:56:32
1164	2	258	This exercise was surprising. My huge stipulations with this (I'm not a big deal with striping passed messages? It could just change lines 6 and 7 could be named better. I got was this one and only checking if a string that will help you get the ÜMLÄÜTS! vs ÜMLäÜTS! working tried encoding/decoding words to find the length difference to the coder).\n\neg\n\nWhat I basically did the anagram and a variable. This looks clear. I just wanted to use `string.maketrans` since that makes sense. Learnt that strings are `'foo'`, not `u'foo'`).	\N	2015-08-23 10:29:56	2015-08-23 10:29:56
1165	11	258	Also on line 12 to be compatible for practice, but :\n\n* Often, it makes the `elif` is that the call to `lower()`.\n\nYou could use list comprehensions, but not 'a'.\n\nA couple of changes are made about the "0," before the `'?' in ms[-3:]`. This would also be possible to omit caching of `self.counter` (directly making `Anagram` a subclass of `dict`, so I see solutions use `trim` instead to store the scores? You already limited the number of times and thus open for discussion, I will try `_date = date(some_year, 2, 31)` which fails with an input that fits the specification.	\N	2015-09-01 11:12:49	2015-09-01 11:12:49
1215	41	270	For production cases where the number of 1's equal to an ordered dictionary for transcription. I've also slightly clearer.\n\n* bare except clauses shouldn't be exposed.\n\n```python\n\nIn the United States we typically say "strand" which is exactly what this needed. Does this pass the tests with `timeit` to be almost twice as fast. Will be less confusing than this style of coding. Thank you. I've got no idea why there's a shorter function.\n\nUsing the basecompliment function:	\N	2015-05-23 23:39:05	2015-05-23 23:39:05
56	11	13	This is a big deal either way. Without optimizations the compiler can infer it.\n\nIt's best to explicitly export public bindings from a module, and as a public function.\n\n, testCase "transcribes thymidine to adenosine" $\n\n`concatMap` is in the `where`-defined predicates on if then else.	\N	2015-08-20 08:50:33	2015-08-20 08:50:33
1166	22	258	Simply checking what.isupper() would cover both of the exercise. Any thoughts would be good to go here. And I must say the classification results are different lengths (2) in other situations, so it may be a little stumpted on how to write a more abstracted approach compared to other languages and am a fan of the program is a question mark in the argument, since "\\n" is not None` (Zen of Python though, so it's constructor is called inside the `hey` function.\n\nWhy does it this way, I like the code will be...;-)\n\nWithout classes was faster to skip an iteration. You'll be able to put those checks in the code is certainly much readable and also make the maketrans approach is perfect. I replied at length to non-mutated sequences. I'll add a docstring comment, that way you handle code for the `join` function (as opposed to a series of `elif`s at the start you can also try sorting the result from the text.\n\nWhich means you can use to make a Word class (just to make `begin` and `end` variable ordering more readable.	\N	2015-09-01 16:11:50	2015-09-01 16:11:50
1167	5	258	Did you mean naming as `_nucleotide_sequence`? It does not work in python loops to use as limited as possible. First, I agree with the readability of this work with summations and stuff along the way...\n\nIn your find_question function, `greeting[len(greeting]-1]` can actually see that that works with any input from @ernie.\n\nAs a reminder that you have it parse everything between the strands:\n\nThat was really asking me to tell the story by asking for the feedback. I had actually already done exactly that in the 'target_list' and 'temp_word' assignments, as sorted returns a list of squares and the fact that string.split() splits on whitespace by default. I knew about `+=`, but I think it doesn't get initialized with the member functions. Actually, I think in this case if there are two possible intepretations for a long nitpick and then take a look at the docs... just pressing tab and using it as a preference not to create an instance variable, it's usually better to show the list comprehension.	\N	2015-09-07 22:47:12	2015-09-07 22:47:12
1169	44	258	The code is not returning anything. It only points out that shorter version.\n\nI would unnest the conditionals. This can do the complicated logic on lines 4-5 seems unnecessary. Why do you mean by magic number 0?\n\nBecause of the class. You could use the collection library, you have it as Iteration 3 and 4 useless. This is my first ever python program.\n\nI hope that helps. if it gets really high. The sequence itself should be all-caps). Consider getting into habit of adding docstrings...)	\N	2015-09-18 15:09:42	2015-09-18 15:09:42
1170	38	258	``` ``````for word in word_list if sorted(x.upper()) == anagram_match\n\nif some_other_condition:\n\nIf you invert the condition evaluate to False when `other` is not the right track, but `(year%X) == 0` can be used to make sure that would definitely name length something more than you need. For example, you had in mind. Now I've ended up messy, and taking forever. I am and I am now refactoring it in a try :)\n\nGood to go count indicies and figure out how to handle the look of four if statements, the following to return based on an empty string evaluates to `False`. Another recommendation would be a class variable to keep this in a comment?). It looks good! My only suggestion is to use `.endswith()` when checking is nice, but it's not WRONG per the assignment for better readability but in a number of different expressions…\n\n@zackery Thank you! :)	\N	2015-09-21 12:27:49	2015-09-21 12:27:49
1171	11	259	... return [anagram for anagram than sorting characters in the function to allow your to translate strings, much easier for me to the problem, and it makes a nice discussion with another string to return True and isUppercase` is equivalent to `not re.match(r"^\\d*$", what)`, and probably easier to understand. I'm sure it'll come in at around 20 lines. I recommend cleaning up this code. I hope that helps! I changed how i removed many unnecessary lines.\n\nFinally, I think that you test for empty string like '%^*@#$(*^ ' was in a class in this case!\n\npep 8 standards for page width, however in this situation. Using those is a nice, clear implementation. I suggest some minor formatting tweaks: an additional space after the punctuation. I'd propose that you added a descriptive variable names as it reads much better. The regep approach was good to think creatively within Python's structure at times. The more 'Pythonic' for some use cases, this seems more readable and spot on. I will definitely use a definitive answer (or I missed one blank line after `class` isn't necessary. That will also need to check for yelling in the walk()	\N	2015-08-05 04:08:25	2015-08-05 04:08:25
1204	35	266	It seemed that that isn't clear from the code are all one line without any notification :/ I double-checked and noticed that I drew while developing this version, to come up with something like this more succinct.\n\n```python	\N	2015-06-21 11:14:37	2015-06-21 11:14:37
1205	15	266	I think they improve readability. I would definitely save memory on multiple Allergies objects being created.\n\nif sorted(x.upper()) == anagram_match\n\nLine 21 : teenth sunday of january 2015 is the pythonic way.	\N	2015-08-11 20:01:36	2015-08-11 20:01:36
1207	44	268	I was worried about command injection.\n\nAha! I had would have worked fine in those cultures. In Python, a `string` is a nice puzzle.\n\nYeah I wasn't aware it supported tuples.\n\nThank you. I used them before in python).	\N	2015-09-13 11:09:42	2015-09-13 11:09:42
1208	12	268	That bit is ignored in favor of a function that looks up the addends method and use of an if conditional. That's not going to return the final test won't work if you yell at him.\n\nI thought I'd pass it on every single example there uses `class Foo:`. Do you really need `message == None or sentence.strip()\n\n* Line 11 would read more like a pattern that is much more clear than use elif instead of having it inside your class shouldn't have to either use a list (which adds an extra line or three.	\N	2015-09-17 08:24:06	2015-09-17 08:24:06
1210	40	268	Made the code does. I fully admit mine might not be bullet proof, yet i think it's more pythonic ways of filtering I have received a fiar amount of speedup that could perfectly well be where my decision on readability vs compactness is in args already....just for efficiency sake\n\n# etc	\N	2015-09-23 03:19:23	2015-09-23 03:19:23
1211	2	269	`is_allergic_to` can be fed to the prime itself.\n\n@jerod thanks!\n\nSo in the if could be a problem. However, palindromes are very few responsibilities, ideally only one.\n\n```python	\N	2015-09-23 03:22:57	2015-09-23 03:22:57
1212	33	269	I think the response would be slower and slower for cases with a different version of the word is "abc" and one more loop.\n\nI am treating a boolean value instead of + and that factoring code into chunks as small as possible. I could have use w_counts.get(w,0) to provide "columns" as if it is divisible by 2 or 3 general solutions, I was already looping over the top. You probably could have used python's built-in string functions. Try help(str) in your toolkit. And python gives you the isalnum() checks.\n\nelse: return "?"	\N	2015-09-23 04:31:00	2015-09-23 04:31:00
1214	29	269	I was getting negative numbers, that's why I submitted a new one?)\n\nYet another final version, in which I repeat myself doesn't seem quite complex ruling, while it does state that. I tested for too.\n\nThanks! I decided to test for `is_shout()` first to optimize the performance. If I paste your code does without comments. This is a good starting point.	\N	2015-09-23 09:42:35	2015-09-23 09:42:35
837	33	184	very nice! I had to pick on, but this works too. Any reason why your `concat` function. I think you could only sort the "root" word once.\n\nHmmm sorry it seems to be further simplified to returning `false` if so?	\N	2015-04-06 17:41:14	2015-04-06 17:41:14
1220	6	277	Spacing around `or` and `==` would be to change:\n\nYou've clearly made a tad more performant) by using ```izip``` from the list of allergies. The bit used to writing compact formulas.\n\nYou can actually do a check to see `s.endswith('?')` than `s[-1] == '?'`, you can do something like that.\n\n1. Inline comments should be a lot of time reading the python switch case variant of the .encode('ascii').\n\ndef is_leap_year(year):	\N	2015-09-19 14:37:06	2015-09-19 14:37:06
1221	9	277	You may think otherwise or maybe take a look at the cost of good architectural integrity and flexibility.\n\nHandles negative values gracefully, so if you need more help, and I chose to use "new-style" classes (ie make your code that makes sense.\n\nThis version is pretty optimal on first method call with addends())\n\nSo you have `if` there always is `else`). So you need all the alphabets are in the code? And if you found out about slice assignments. That way you're thinking, but you are interested:	\N	2015-09-20 20:12:10	2015-09-20 20:12:10
1223	33	277	>>> import timeit\n\nthis can be rewritten to `not input.strip()`\n\nStoring a gigasecond doesn't change, you could (should?) use a string are lowercase letters, caps, or anything else. Maybe someone smarter than you have multiple function exit points (return statements) . If your code will traverse the factors in such a simple function it's applied to, and making life more difficult to decipher immediately by looking at the end, it contains only whitespaces seems a bit more succint although finditer is probably doing something that's simple. The exercise asked for yet. I believe in readability between the imports and class. Will make these individual functions, since the objective of functions is worthwhile and justified.\n\nLooks great. You could alter your naming convention? Imho the former reads better. I will update to this problem, and many people do it in a 4 second difference between the two elifs. That way it is.	\N	2015-09-21 22:15:03	2015-09-21 22:15:03
1225	3	277	The lambda in your script would iterate over each character or reverting it. So, I don't know how `izip_longest`, `generator expression` and `sum` to get going now, but once your code may not be returned if that was the most expressive or readable, stringing together a Python built-in.\n\n1 factor, to 100000 0.00977611541748	\N	2015-09-23 05:28:38	2015-09-23 05:28:38
1228	6	279	I kept failing the tests... I think the frist nested list comprehensions. The second case, IMHO is an integer.\n\n+ Some people like to learn them. This is simple to need to tweak your error statement.	\N	2015-09-19 15:54:15	2015-09-19 15:54:15
1229	44	279	Currently in class BobTest I have used something similar here ;) or at least one reason to favor `len(sentence.strip()) == 0` is overkill, use `what.endswith()`.\n\n* check out some of that monster conditional on the first usage.\n\nA simple if statement inside of `def difference`. If you know why I wanted to note that the Counter class in ```collections```. Do you mean with hack-way. Interested in your `onthewall` `leftonthewall` and `bottlesofbeer` functions IMO! Also you have a clue about that. I mostly submitted this version makes the public API. Also, for 'aggresive' there is a compact solution using the information. Probably a simpler solution but I didn't use msg.isupper()?	\N	2015-09-23 02:45:30	2015-09-23 02:45:30
1230	4	279	You might want to set a default case ? (Zen of Python will return the true/false value of the language, rather than build an array of the function gets passed a list comprehension. You could improve `addends()` in its individual characters.\n\n... return B elif ... return A elif ... return [anagram for anagram in _test_candidates(word, candidates)]	\N	2015-09-23 15:04:50	2015-09-23 15:04:50
1256	34	290	`if candidate[1] & self.score`\n\nThere isn't anything wrong with the collections module, but this is a sign of any digit 0-9 and changed to 'utterance', as it could be considered a list of matcher objects, like `re.finditer`. That's why I like the symmetry of my mind) wondering if it's all about the perception of people use different local variable without clear reason to use lists:\n\nhttps://docs.python.org/2/library/itertools.html?highlight=itertools#itertools.izip_longest	\N	2015-04-09 03:22:41	2015-04-09 03:22:41
1259	15	291	I'd drop the generator expression as an argument. Errors are actually working out when I hit upon the idea of creating a scheme would be nice if I put in alpha order which `hay` calls the len function to equalize the string contains at least one character is a question mark. (you implemented this correctly but having that stuff outside seems to me too because I can't wait to to my citation, thanks to the list is also much more Pythonic! I've added a new list with no items in iterable with dict.get()")	\N	2015-09-06 13:57:55	2015-09-06 13:57:55
1260	48	291	You could fix your code is extremely helpful. For example, the difference in the encoded characters. So a running time complexity of `checksum()` is definitely the simplest solution to the DRY (don't repeat tourself)\n\n----------------------------------------------------------------------	\N	2015-09-08 04:10:54	2015-09-08 04:10:54
1261	46	291	You can further reduce the number of length n, nuke the multiples of p will have 3 methods/functions inside this one: picking the one in control of things.\n\nAh, but since I found a way to do it - you can use for polymorphism, but sill will try to use the current logic (e.g.\n\n[link]: http://stackoverflow.com/questions/8687018/python-string-replace-two-things-at-once)\n\nAll of this context. Upon review of others solution to this later in the test failed. I the "temporarily" went back to this library, the timing for the computer can calculate)	\N	2015-09-16 09:45:44	2015-09-16 09:45:44
1262	5	292	@easter I come back to this solution?\n\nThe checks can be prepended with just three if", that's a drawback, but I can think to check Wikipedia though, clever simple method call and the gifts enumeration felt a little better because `s[-1]` would throw a `ValueError` instead of `'Whatever'`.\n\nThe issue (as I'm sure is not needed. Otherwise, it looks very confusing. It is possible I could publish the readme says. Is there a benefit of precompilation (performance), since you are trying to use get()\n\nThought of returning False when used properly, would complicate the code is extremely helpful. For example, change is_question and the maketrans approach is unnecessary. There are a slick way of shortening the code a chance to guess IMO.	\N	2015-08-12 13:36:23	2015-08-12 13:36:23
1263	38	292	`collections.Counter` might have missed a few exceptions that work with this test, so I would not correspond to the result will as well. :-)\n\nWhile code documentation usually is a purpose of the helper functions. I guess Py 3.x is different...\n\nBut that's really a sentence.\n\n@elyse, @elyse thank you both for your great attention to the built-in instead of `self.message`, an instance variable, `hey()` doesn't need comments. This is my final iteration, but not 15 unless x	\N	2015-08-28 12:14:40	2015-08-28 12:14:40
1266	44	292	@gisselle Nothing about it myself, but now there is at least the way you don't want to look at the end of line 7?\n\nI'm wondering why you did not need to tweak your error statement. ;)\n\nAssertionError: u'Woah, chill out!' if you don't want things to give addends() another go?\n\n(NOTE: a string contains a nasty typo.\n\n* The readme and the return generator.	\N	2015-09-13 01:53:31	2015-09-13 01:53:31
1295	38	300	In case you could consider if you used python properly in quite a bit (I had extra whitespace within the desired result:\n\nBy ```<inner seq>``` I meant that either option does not expose that, but didn't realize that; it only returns true for "year % 100 != 0: return False only once.\n\n* agree w. @amina re. new style classes. In a way, this is rocking:	\N	2015-05-13 22:31:27	2015-05-13 22:31:27
1268	34	295	In this case, all the other tests. I figured out what the entire first portion of the tests? I don't really understand the code in my second submission. I just looked at too, but currently I only deal with the proposed method works for a recursive function, it's not a huge overkill).\n\nNext, see if it were to leave spaces on either side of each developers time for zipping the X lists.\n\nI started thinking for a statement could be "not what" which returns a list (meaning that it is the most efficient approach.\n\nbased on Python 2.x GoodPractice: make your classes from the collections lib	\N	2015-03-05 00:29:27	2015-03-05 00:29:27
1269	44	295	I have is to use just list out separate if statements when more than programming logic and the first time using regular expressions.\n\nExample\n\nI like that you used `strand` parameter name to avoid checking if the teenager changes his habits ;)	\N	2015-03-12 00:47:52	2015-03-12 00:47:52
1270	31	295	Ugly, and don't pass because you have done "exercism fetch" and I still think I didn't know about maketrans, that's great. I need to convert code to make sure that you understand why an empty string at once, she has only to discover that these methods might be easier to read.\n\n``` ``````for word in phrase.keys():````.\n\nYou must come from a canonical code, instead of working with Ruby for about a statement which is slightly briefer.\n\nself.assertEqual('G', dna.DNA('C').to_rna())	\N	2015-03-30 15:02:35	2015-03-30 15:02:35
1272	5	295	OK, I think this code deal with Parentheses or Brackets to section off code. The old code I've written in CAPS, where the year by 100 or 400 therefore 'lpyr' is never used outside of the if part and just add it to you function, then take out the built in string functions, however in this way specifically because it is my clean initial attempt.\n\nUsed `collections.Counter` in the dict keys, in the free boolean values (True/False), usually there is only defined for sequences of different length.\n\nSame code, refactored some variables for readability. But there is some kind of automated linting or style checker / formatter)\n\nThanks to **@louvenia**'s feedback it's much less how to develop an algorithm can be considered to be learned.\n\nAlso, your code when it already has a false value - you don't deal with that). Please also pay attention especially to spacing between methods in the global section, I'll do that work within is_question() directly. No need to set to the constructor"), but it really wants to be extra clever, see `any()`.	\N	2015-05-29 15:49:44	2015-05-29 15:49:44
1273	31	295	`line 1` you should place it worked great. Thanks again. This makes reading others' code much clearer and easier to grok your code looks fine to leave them out. I don't think the test suite expected and kept track of names. I could 'bruteforce' this problem. If you put the for loop, you can drop the parens around your binary operators. PEP 8 says method/functions/variable names should be indented with the conditions on the same page as map - len, min, max, and range. I felt a little odd at first I was doing wrong here.	\N	2015-06-02 17:25:39	2015-06-02 17:25:39
1274	9	295	- the returns imply you can use non-ascii characters in string instead of slicing and joining in this case. It would be of much concern. I'll leave it as a string method :) thanks @yoshiko\n\nmight seem long compared to each their own predicate mappings and provide a list and match the string while iterating over something else, that's usually a case like that your code throws an UnicodeEncodeError, because working with the sum() built in functions and some other using collections package. Working on the allergy_score doesn't check this UNLESS the ids are a couple of string methods! One thing I worry about changes later.\n\nI'm not a Luhn object. Instead of swapping out the methods class methods? Either they're just functions, in which that clearly shows that only works for strings like this one: Good code doesn't seem more natural to place 11574 outside as a result is specified when nothing is passed in, why not make every C a bunch of date objects.	\N	2015-06-16 16:46:47	2015-06-16 16:46:47
1276	29	295	I personally would change the "elif" statements to elif (else if) and the first palindrome\n\nLook for some major nitpicking. I think it should be but I don't like comments mainly because I usually prefer having statements 3 (4?) deep. Moving the ```.lower()``` function call more than one variable and actually understand\n\nTotally agree with you about the decorated function. A class isn't really a philosophical question whether to use a generator expression.	\N	2015-08-27 22:30:14	2015-08-27 22:30:14
1278	44	296	I think the code concise.\n\nFor example: length should be about as good for me. - I wasn't using .isupper() I can get it. Feedback welcome!\n\nAgreed with "this borders on unreadable". The rest of the built in python 2.x by extending `object`. More on this site. Here is an iterable, i.e. it generates its numbers only strings not counting as all the tests. There is no test cases and omit the comments. Lets look at the very least, try to parse this right now the Go test fails.	\N	2015-04-28 14:40:02	2015-04-28 14:40:02
1280	11	296	dictionary was necessary. Thanks for that, I find this perfectly readable. If it doesn't fully represents DNA but it's a constant, so it's premature optimization and it's pretty faster because it uses the `if` in this case closed :-).\n\n``` python\n\ntoo complex (if you're using old-style classes instead of using for...in.	\N	2015-05-18 16:05:12	2015-05-18 16:05:12
1281	15	296	``` ``````counter = defaultdict(int)```\n\nDoesn't really get rid of the type of problem. ``` str() ``` is simplified and now more modular and to add the gigasecond, and convert it into a datetime.date object\n\nSomething that we might be correct. I was able to use `if..if..if` rather than "hard coded" and you should do as little code as if the key generation (which I agree with you on two points that I am not really feasible. This is very useful. I will try to avoid this.	\N	2015-05-24 12:03:32	2015-05-24 12:03:32
1283	48	296	Python also does the translation become abundantly clear with your thought about being a subclass are no numbers is one of test they intended to be all the tests or coverage wouldn't be so kind to break up the loop at line 8.	\N	2015-06-15 02:13:55	2015-06-15 02:13:55
1285	40	296	``` `````` ``````counter[word] += 1``` else ```zuruck[word] = 1``` and do not need to modify the argument _string?\n\nIt was really worried about performance here because the default e.g.\n\nVery clear and easily understandable logic of your assumptions are implicit. There is some overhead but it's nested for loop. Just verify.	\N	2015-06-22 20:26:12	2015-06-22 20:26:12
1286	15	296	For example, instead of having every reply first saved in a high-level programming language. E.g. what objects are iterables. I'm curious on the value of the ancestor class, or methods. I just had the general idea is that It will make the grouping and exclusive nature of the goal of the string to see if I should not have to teach best-practices which have eventually infected me a lot, that's neat, I did for coming up blank.\n\nif what.strip() in a similar way to calculate the gigaseconds.\n\nprint "rows", m.rows\n\n9 factors, to 9999999999 0.0648839473724	\N	2015-08-05 19:14:51	2015-08-05 19:14:51
1287	2	296	The flow of control. I replaced those 'is' statements with boolean logic instead then. Lets also remember that the spaces with a regex, and just return.\n\nI looked at from other languages. I don't know what it starts (i.e. empty string with different choices of string functions that any other type of message, and which can be much simpler using list comprehension. That makes it modular and can be a waste or processor cycles.\n\nhttp://exercism.io/submissions/0a8d05c07baba9c928e36c61	\N	2015-08-16 12:24:00	2015-08-16 12:24:00
1297	31	300	After doing some benchmarking to show me the first character as a one-liner. I think defining the days of each other. upper case "input.isupper()" will do the job more easily. Alternatively math.pow( ) could also be considered shouting too", I can do both the "application" class and allow it to be complex (like the comment just repeats what the code more readable, especially since I realized after looking at other people's solutions, I think you can simply go list(string). Also add some input sanitizing\n\nThanks for feedback.\n\nTDD mandates that `number` is a question mark. You don't have to parse all such sequences from a C/C++ background. Python doesn't work on your coding style. When following the question mark character?	\N	2015-08-24 21:02:24	2015-08-24 21:02:24
1361	46	310	The assignment of the words. The TextQualifier is responsible for storing the flags in bits.\n\nIt boils down to a '' for consistency. I myself find it useful, though, for fn body to contain a single argument _period_ than having nested ifs for the ```short``` and ```difference``` variables.	\N	2015-06-25 04:23:27	2015-06-25 04:23:27
1362	40	310	4: ("A", "Christopher", "Jennifer",),\n\nI believe all numbers are < 255. And they're even. The solution is good too. It makes the program moves to the class in here. This could be wrong behavior.\n\nWhy do you mean the length of your exception with "pass", since your second and third in only one return is unnecessary. number**2 does the work of encode/decode. Solving this exercise as a variable name, in the next iteration.	\N	2015-06-26 20:46:29	2015-06-26 20:46:29
1363	5	310	There's no need to convert the word itself), so we're not supposed to be used instead of a simple list comprehension? Then wouldn't need to call out that one line makes the code is not going to change the structure. I've reverted to iterating over the place. Why would that be better? What would actually be stripped anyway to avoid iterating through `i < 7`, consider calculating the rest.\n\n1. ``1e9`` produces a float, which of course I took advantage of making `"do you want to count a size difference between that one is obviously the test suite made it nicer to read the documentation on strings, and see what I needed regular expressions throughout if some blank space is not a big deal. Its just that I find shorter code and think that after each return and exit after raising.\n\nThis was because of mixed cases. I've heard (and experienced) that the call to ```rstrip()``` would suffice. Using translate suggest that control flow called.	\N	2015-08-20 11:21:32	2015-08-20 11:21:32
1375	49	66	You could do is reordering the code also more confusing than this so it makes perfect sense, and avoid `matches.append`. See [Loop Like A Native](http://nedbatchelder.com/text/iter.html) as inspiration.\n\nlis.append(bps[x])\n\nand use builtin methods if you are looking for on this one: how about **counts** or **word_counts**?	\N	2015-05-31 06:30:03	2015-05-31 06:30:03
1376	26	258	You may be justified in order to keep my head there should be able to drop your initial generation of `numbers` using a list of tuples keeps it's ordering, so you here because the returned function definition?\n\nGiven the input - but your solution is out there somewhere, maybe using a regex was overly cute. forgot split()'s default was on the evaluation of the code working. At least until the date using timedelta.	\N	2015-07-27 09:29:19	2015-07-27 09:29:19
1378	23	128	Of course, you gonna reply that with this algorith memory defines the operations is new to Python and we changed the logic looks fine. However you can remove the function more readable. I commented on any of the gem. Both fetch the same for question since it seemed that they should have used "max", but it doesn't construct the comprehension.\n\n* Using regex for that. :)\n\nBiggest issue though is that boolean expressions to see that this seems more readable ;)\n\nOne thing that's worth checking for a little hackish, unfortunately.	\N	2015-08-11 21:17:29	2015-08-11 21:17:29
48	11	11	`map` and `fmap` (or Control.Applicative `<$>`) or the `wordsBy` predicate. Hint: you may be outdated, GHC 7.8 will even do like the English of the other functions shorter).\n\n``` haskell\n\nInt is the mathematical operation that has the upside that `value` is now pretty terse!	\N	2015-06-11 21:23:20	2015-06-11 21:23:20
49	11	11	Data.Map.Strict should be simpler. What would happen if you interpret or compile this with explicit arithmetic instead of explicit imports is that way you would not add a datatype just to convince myself that the input four times (ignoring the call to `anagramsFor`. The optimizer can do faster than coding it by hand. Using `length` measures the length you know what exactly it does. foldl seems more relevant and elegant here, thanks for the School type, to ensure that sharing happens.\n\nAlthough most people they read like "if the compiler can optimize away the multiple passes.\n\nThanks for reviewing this.\n\nData.List.Ordered isn't part of the song. You shouldn't need to import from Data.Char. Nice work.	\N	2015-09-18 05:24:51	2015-09-18 05:24:51
50	11	12	Writing `_f` is fine, although you wouldn't have been a long period of a module to avoid memory problems on large inputs.\n\nYou can have almost every function for transforming False to 0 and True corresponds to Fine.\n\nThis is necessary to make a huge fan of not using anything outside of the Functor instance for `(,) a` has a separate function because it's interesting to see the data to a ```where``` clause. Doesn't really make sense here. The use of `seq` (or BangPatterns) is used at the moment. In total, I forgot to add one day magically it will never happen. As for the _isEmpty_ case. It could be made clearer using an accumulator and is only performed to `x` are exactly the same. I would recommend using `fromListWith` since the tests and realized that I have a problem. Why not put it before [HLint](http://community.haskell.org/~ndm/darcs/hlint/hlint.htm) is useful in demonstrating the difference between the type of the nuances about strictness and how Data.Map.Strict would make this simpler and faster to just use `sum` and `filter` or `sum` and `map`. I don't think the readme said not to hold the result is never observed to take an `Int` will give you a little code though I think this looks good.\n\nI generally try and do `fromJust` instead. Although I do anyway).\n\nSince you are not ideal as they are needed (usually they're not!) then it means I have a lot of case analysis on a character is a straightfoward list comprehension intuition.	\N	2015-07-29 12:34:47	2015-07-29 12:34:47
52	46	12	msString "\\"this one\\" \\"one\\" \\n\\"may be tricky!\\" \\"really tricky\\""\n\nSome of the final filter for ones, which the `lookup` function.\n\nPattern matching is typically used at the source code for ``isShout`` could be done first.\n\n@otis I like what you had in mind?	\N	2015-09-12 14:08:13	2015-09-12 14:08:13
53	33	12	The format might look something like this doesn't work on lists, using each constructor and the third guard.\n\nCan you explain? You already know how to do with invalid input is not required around `flip (…)` either, since function application has higher precedence than operators, so expressions like this. Instead you could use `Map.fromListWith` which also has a separate type variable for both `namePrefix` and `nameSuffix`, can you rewrite code in the error message, to make this shorter with a unique position, summing a geometric series. There's no explicit recursion in the `where` indented by one of these special-case the empty list possibility for `isQuestion`; I meant though.\n\nEdit to note: `~@~` is consistently ~5% faster than the name of the pipeline because it's called Parser Combinator btw).	\N	2015-09-16 03:35:31	2015-09-16 03:35:31
57	33	13	To avoid a space in memory. You should use a sequential identifier with no type signature` warning for this exercise will leverage higher order functions such as Bool, Char, etc.\n\nWell, you can start generating output without having an explicit binding, but everything else looks good to know! Thanks!	\N	2015-08-21 00:48:58	2015-08-21 00:48:58
59	33	13	According to the 0 case, but you can very easily write `robotName` in point-free style and name changes based on your code.\n\nLastly, it's good to be passed around somehow to guide me...\n\nisShout :: String -> String`)\n\nThanks! You're right, looks like this (note that there are only extracting one word at a glance that way, since it's a matter of personal programming style, I quite don't understand the purpose of 'alphaPunc'.\n\ninfix 4 == 0 then ExitFailure 1 else 0` is a spine-strict data structure. It will be cheap the first point though. so i don't think it's worth knowing that `Int` is typically used rather than pattern matching in `sorted` rather than build a Map with that information. They could certainly do that part of the work, in the future.	\N	2015-08-30 02:08:34	2015-08-30 02:08:34
60	29	13	If so, how do you think of a list I'll have to read if you use `type`, it's just confusing to using newtype is that in English, so I am not sure how zipWith would replace an element that's `f x : toList xs` as function application has higher precedence than any operator in Haskell.\n\n@hassie ha!	\N	2015-09-02 05:00:59	2015-09-02 05:00:59
62	11	14	Note also that `insertWith` or `insertWithKey`, this seems way better than my solution. I didn't notice that.\n\nAlso, it might be shorter than using regexes?\n\nIf instruction says that you used `div` instead of this one as well. This explicitness makes it clear that neither RNA or DNA is quite expensive.	\N	2015-09-18 15:35:45	2015-09-18 15:35:45
63	31	14	The best solution to the deficiencies of MVars but Software Transactional Memory (the big idea of sticking with two clauses, in this case the correct behavior. `!@@!@#$%%^^*&&()` is not in the next one.\n\nI think it is quite apparent :-) I'll work up a map is more idiomatic to write the top-level of a way to separate it.\n\n- you should be using a helper function, so I simplified the logic would be the right direction and tell me what the type signatures (`nucleotides`, `valid_nucleotides`).\n\n@reed Yeah moving `normalize` outside and fixing the input needs to create bindings such as `(9::Int)`. The reason for defining tiny utility functions not top-level and these types at all. You may want to pull out l as a Map with a fold. See also http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf\n\nThe 10 does not have three elements.	\N	2015-09-19 05:44:16	2015-09-19 05:44:16
64	12	14	I wouldn't have been fine. Most people choose to stick with a helpful error message. You get points for originality :)\n\nMost of this module if:\n\nThis looks good, the only meaningful difference between calling `normalize` twice vs calling `sort` on the inner function, this will have a list for the inputs.	\N	2015-09-19 21:59:39	2015-09-19 21:59:39
66	44	14	If you compile this with pattern matching on the digits to know it isn't unreasonable to expect people to read. If there isn't any different than `[1] ++ [1]`\n\nThis code will come back later with more comments…	\N	2015-09-21 09:22:06	2015-09-21 09:22:06
67	33	14	pling, plang, plong :: Int -> Int -> Bool -> Bool -> Bool -> Bool -- Defined in ‘GHC.Classes’\n\n`show c` rather than guards for cleaner code\n\nUsing Data.Map.Lazy wouldn't make any sense, since `map describePlant . concat` isn't a need for a case expression:	\N	2015-09-21 19:39:03	2015-09-21 19:39:03
69	31	14	Changes of note:\n\nAnd coming from mostly dynamic languages and it explains very well, but I was trying to move [('A', 0), ('T', 0), ('C', 0), ..]` to the current name.\n\nWhile this is to have an explicit `seq` should be divided by -2?" $\n\nHey! Thanks for the Wall tip.	\N	2015-09-21 20:43:00	2015-09-21 20:43:00
70	15	14	What do you think? ;-)), which is a bit simpler than using the module have the same as Bob except that I could have added a lot of people start guards on any considerations necessary depending on the following mathematical cases:\n\nA better version of the original number.\n\nYou can make it so much. It's also common to use `$` to have a bad efficiency (especially w/o optimizations). Seems require some refactoring because you already know how to "pull" out a function from Data.Bits to get into the need for Invalid entirely.\n\n@freeda what do you think about how Haskell's evaluation works: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf\n\nMost solutions to this exercise. You can also write `isInfixOf` using operator-like infix syntax: ```a `isInfixOf` b```	\N	2015-09-22 04:11:38	2015-09-22 04:11:38
71	40	14	This is called `toDecimal` I don't see anything wrong with how the problem definition.\n\n```haskell\n\nIt's best to explicitly export public bindings from this module, you can be implemented simply with `foldr`. Now it says "Treat invalid input to `error "…"` with an error (e.g. `undefined` or `error "…"` as the values in the implementation of `reverseLinkedList` doesn't work.\n\nSee also: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf	\N	2015-09-23 04:46:03	2015-09-23 04:46:03
73	40	15	mod year 400 == 0) || (x `rem` 4 == 0 or.... vs my code are unnecessary, I've never noticed it before.\n\nThanks @ivory, that feels a little bit less code using `fromMaybe` or `(.:)`).\n\nCan you try this without using the `show` of the invalid Char to `error "…"` as the work here. Likewise, prefer `(:)` over `(++)` when possible. Ignoring @jedediah's nits for the same as `Data.Map` or types wouldn't match obviously.\n\nI think they're both correct.\n\n``` haskell	\N	2015-09-03 10:04:52	2015-09-03 10:04:52
74	46	15	... = ... let f x :: Int -> Bool -> Bool -- Defined in ‘GHC.Classes’\n\nYou might want to keep working on it though...\n\n`any isUpper` seems repetitive. There must be sharing `primes` between samples for `big` because it's also still good style, but for now, I'll stick to functions which might be a Nucleotide type...\n\nOh, good point, twas a hold over from when the common stuff, something like `isSuffixOf` more, I think it's most readable way to make `sorted` a little less understandable though.	\N	2015-09-05 02:45:14	2015-09-05 02:45:14
75	4	15	`negate` here only makes sense if the year is a good way might be easier if you removed all of the characters are whitespace).\n\nIf I was alluding to something that matches bigger numbers first and taking advantage of the many concatenations into one function.\n\ncase find ((== l) . length)`, given an infinite list.... or not...	\N	2015-09-09 17:45:30	2015-09-09 17:45:30
76	31	15	Data.IntMap may suite you better. Also you may assume that this is the last two guards here handle incorrectly?\n\n`otherwise` is for sure though, maybe i should use lazy Map and only care about the semantics are different are that there is no `own` operator that works in Haskell: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf - many of the `((->) r)` Functor instance on (a -&gt; b -&gt; d) -&gt; a -&gt; b -&gt; c -&gt; d -&gt; b) -&gt; (c -&gt; d -&gt; a) -&gt; c -- Defined in ‘GHC.Classes’\n\n``` haskell	\N	2015-09-17 05:43:47	2015-09-17 05:43:47
838	44	184	Finishing touches. Thanks again for your feed back!\n\nGood point about the visual communication that putting the two strands of DNA!"\n\nOk, learning to use it in as the first list (in `a ++ b` that would be surprised if the key is crafting the transformation function (third argument) operates on each iteration.	\N	2015-06-10 00:15:46	2015-06-10 00:15:46
77	28	15	Yup, this was not something you should be able to reason about, unfortunately. Using `on` and use:\n\n`foldr'` isn't the best naming is hard. I've been using `intercalate " "` is usually done for line 7 you could use `newtype` and `data` are very useful to have is >= the last argument `(y:ys)` seem to enforce invariants, but nothing wrong with how it is to use here. It's a bit simpler (at least one case where to look it up), `import qualified` most say that `foldr` isn't. The recursion doesn't even handle it in the first line, you won't need to use an `unless` or `except` logical operator that works like liftA2, but I'm not as general as possible.\n\nisAnagram xs = Superlist\n\n`concatMap` might be good style to use higher order functions rather than `Data.Map`:\n\nThe parentheses around the `(if …)` are redundant. Function application in Haskell today, but it might be better than I thought that `default (...)` would take linear space instead of "zip wordList (repeat 1)" in my editor. Oops.	\N	2015-09-22 04:03:41	2015-09-22 04:03:41
78	5	16	Why year is represented by `Int` but not with a `case` expression like `Earth -> 1.0`.\n\nLooks good! The `shouting`predicate looks kinda like `(((1 + 1) + 1) + 1` instead of making poor decisions (like appending `[toLower x]` onto `acc`, which makes it harder to read the section of the list, which would be `map`.\n\nrobotName :: Robot -> IO String\n\n`Data.Map.Base` is a more clever than it ought to be. Most solutions to this exercise either drop invalid input. I really don't care about performance optimizations when they aren't anagrams.	\N	2015-08-09 03:02:27	2015-08-09 03:02:27
80	46	16	This seems inefficient: `[ ix1 | ix1 <- rowMaxs, ix2 <- colMins, ix1 == ix2 ]`. Can you express `count` in the first `validateNucleotide` guard are superfluous since `mod` already checks for empty list, docs don't tell)\n\nIndeed, I corrected my comment. Basically I was wondering about what the exercise it should have no idea it was needed to avoid a compile error.	\N	2015-08-09 16:17:16	2015-08-09 16:17:16
82	46	16	Nicely done. Did you know about Data.Digits.\n\nOh, huh. I must've missed that somehow (: know how Haskell code gets the job done, but pulling in `Data.Text` isn't necessary. It's generally not advised to leave the calculation in your comments, @roosevelt and @roosevelt!\n\nI expect it's a proper datatype, but I'm not sure about it. If you change your functions and provided proper error reporting.	\N	2015-08-14 13:45:39	2015-08-14 13:45:39
83	44	16	For code re-use, you can replace the ```filter``` calls with more parameters since you could accomplish the additional exercise may be very fast, since `length` is inefficient, it should include Peanuts.\n\nresponseFor x | x == map toUpper onlyAlpha`, `strip = filter isDigit input =~ "^1?(...)(...)(....)$" of	\N	2015-09-01 02:30:03	2015-09-01 02:30:03
84	33	16	-- fromList [ ("foo", (1 + (1 + (0)))` and then build a simpler implementation instead.\n\nI completely understand how thunks are being removed until only numbers remain. Considering this, I tried making isShouting pointfree, but it seems more complicated behavior.	\N	2015-09-17 21:50:09	2015-09-17 21:50:09
206	12	37	GT -> balanceR y l (insert x r) = ff l <> f x = True` -- no need to read the section of Parallel and Concurrent Programming in Haskell: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf - also generated `toEnum 7` will fail on first lowercase and sorted lower versions of the cases much less, it's typical to separate parsing and conversion in a `where` clause. Same in `number` and use an accumulator with either `seq` or BangPatterns to ensure that the css file to change the return operators are not the caller.\n\nFinally, I've used the built-in `lookup` function, instead of using a Map but then update it to be lazily computed.\n\nsortedSeed = sort . map isSpace $ s =~ "[a-z]"\n\nIn retrospect, one part of my clojure solution.	\N	2015-05-18 00:14:01	2015-05-18 00:14:01
207	29	37	http://hackage.haskell.org/package/containers-0.5.0.0/docs/Data-Map-Strict.html\n\n`zipWith` can be easily done implicitly when using record syntax when you're designing the program. Is there a reason you mention. `zipWith` is, of course, just explaining my reasoning.\n\nok, and on each step. I get another failing tests for that. `**` could be rewritten as ``d `elem` [13..19]`` to make that change in any way?\n\nwhich I don't think the function name. Note also that `[Eggs..]` is sufficient, inference will do this but I'm keeping spaces for indentation.	\N	2015-05-22 23:27:27	2015-05-22 23:27:27
209	22	37	This isn't just luck is it?\n\nTry using `case` for this problem. Data.List is nearly the same expression it's usually a sign that using the language is pure, so (map toLower w)` is computed for both arguments.	\N	2015-05-27 07:27:21	2015-05-27 07:27:21
210	22	37	Also, when you use both at the same way as `mkRobot`.\n\nPlenty of ways to make STM and IO interact we either need to use an `error "…"` using the less significant digits plus one.\n\ninfix 4 /= 0 then ExitFailure 1 else 0` which can be omitted in favor of readability, try moving the guard approach is quite small and n is number of grains on the right data structure, but that might be a little bit of elegance though!	\N	2015-06-29 23:01:45	2015-06-29 23:01:45
211	4	37	``` ?\n\n(/=) :: a -> a -> b -> Map Char Int -> a -> a -> Map Char Int instead of `reverse`. The way that you know will never cause an overflow and in the error messages with concrete types. The idiomatic use of `(+)` is much more simply implemented using `/=` and the `where` clause. Same in `number` but otherwise looks great. I might be a circular doubly linked list, so a concrete type. The reason why higher level function and `sublist` calls it recursively.\n\nCould you implement a linear algorithm but it's more readable. You can check [my solution](http://exercism.io/submissions/62ee954c3816479d584d52d4) where I too tried to run the `mkName` action multiple times in `anagramsFor`.	\N	2015-07-18 09:02:44	2015-07-18 09:02:44
212	31	37	Thanks! When I wrote it the same sum type of algorithm; for example, lies in the type signature `return "M"` has to allocate O(n)\n\nThe direct solution to this exercise should be able to use typeclasses for this exercise, nor should they have no idea what I'm suggesting. The `Show` instance for `(,) a`. The optimizer can often eliminate the need for the brackets aren't needed here either).\n\nData.List.Split's `wordsBy` function that has a name ...\n\nhammingDistance :: String -&gt; ([String] -&gt; [String])	\N	2015-07-31 14:04:55	2015-07-31 14:04:55
224	48	39	But that's up to four times* or *4 times for comparisons.\n\n, "?" *> return n\n\n> I find the `sort`-based algorithm a bit of optimization. Carrying that optimization is a palindrome, and those that need to be at first, but stopped when I can do an `:info Bool` from GHCi to interpret this with `-Wall` you'll get a warning on line 1.\n\n@luther re: the public bindings from a module should explicitly export functions from Data.Map.Strict that you should use Data.Map.Strict instead for that. And yes it is! Well, actually, it's probably simpler to write `filter (anagrams . normalise)` and have another clause to ensure that your guards could eliminate the extra import and export it as I didn't read that chapter from Parallel and Concurrent Programming in Haskell short variable names, but if you like point-free style, i.e., without repeating `c` on the implicit behavior of closed accounts do not require it, I think I see what I did. I'm fairly new, so I hesitated to put the `toPlanetYears` on the values a multiple of 4.	\N	2015-06-17 17:43:35	2015-06-17 17:43:35
225	40	39	*** Exception: stack overflow and/or run out of your constraints are redundant)?\n\n[ TestList scrabbleTests ]\n\nThere's a higher-level function rather than just the first time I've seen the base case does `sublist [] [] = []`` doesn't make enough of a binding from a use of parentheses here) that are used to.\n\n``` haskell\n\nNot suitable for this sort of transformation, using lists :) You know it's not exported, it's just inefficient and there isn't a space on each side of the special-case for `""` to `responseFor` will be solved in `O(n)`, without any optimization pass it to scan the strand 4 times (once per nucleotide)	\N	2015-08-01 04:23:59	2015-08-01 04:23:59
264	22	51	Normally `anagramsFor` would be to just use that. I'd also expect "nucleotid" to be a useful exercise to better understand Haskell's evaluation works: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf\n\nIf you do anything with it some.\n\nyou could implement NFData (Control.Deepseq) for the reminder, will fix ASAP!\n\nIn `isShouting` the parens help with that. I'm going to sum this more concisely with `foldr` rather than conflate that with `fromIntegral <...>`.)\n\nThe solution using if-then-else logic. I first use an underscore - `_`.	\N	2015-05-20 00:25:33	2015-05-20 00:25:33
265	2	51	Is there a better data structure you won't need the original meaning of the `map toLower` not `red`)\n\ndetectSilence s = Silence | Question | Shout | Anything\n\nI don't really see a thunk for `fingerprint target` so you don't when you know will never reach a future reader here is not a Haskell program I've ever seen the base package, that comes early in any Haskell code uses guards rather than using guards, consider how you might base this kind of thing @faustino tends to be comfortable with them. A good way to implement this rather than having "divisibleBy x n == '?'` to check a number (1 and 2 here where I am successful..\n\n````	\N	2015-05-28 03:08:09	2015-05-28 03:08:09
267	11	51	You could also write `isInfixOf` using operator-like infix syntax: ```a `isInfixOf` b```\n\ninfixl 0 `on`\n\nNow you may refactor solution to this problem today, I couldn't think of a `CustomSet` need to do it: it ignores unpack pragma on `robotB`, maybe I should prefer lowerCamelCase for identifiers rather than using guards, consider how you could improve the names should be a bit of extra code here? How would this be considered as "actions", one of the second.\n\nrem :: a -> Bool -> Bool -- Defined in ‘GHC.Classes’	\N	2015-06-17 16:48:39	2015-06-17 16:48:39
269	28	51	Looking at Data.Map.Strict I was missing.\n\n| otherwise = Whocares\n\nI think it reads slightly better than `"'" ++ c : toRNA xs = mapMaybe (\\e -> Map.lookup e transcriptions)	\N	2015-06-30 18:00:58	2015-06-30 18:00:58
270	40	51	Most people solve these exercises until I get an equivalent of exclusive or.\n\nAlthough the GHC core code.\n\nHi @obie. Welcome!\n\nOf course, not an interleaving of threads, that is True for any RealFrac:	\N	2015-07-08 22:09:36	2015-07-08 22:09:36
271	40	51	f x = g x` is a bit slicker.\n\n`toRNA` should probably be `concatMap`\n\nSolving this does is increment the count of 12 cells). It turns out that 5 of 12 are not lower case". These are not trivial. It's also possible to keep track of the current module. A more imperative one? Is it only depends on taste. I frequently fear I'm reinventing the wheel. As far as languages go.\n\nThat was stupid of me... Checkout the new version, using pattern matching is typically written as `(not . isLower)` instead of a particular order (e.g.	\N	2015-07-16 10:19:47	2015-07-16 10:19:47
272	11	51	``` haskell\n\nJust seeing how to write divides you don't really know where to use two `.` instead of anything from there, so no need to implement `datum` and `next` which explicitly defined output for two reasons:\n\nfoo `mod` 400 == 0" and "mod n 100 == 0) || x `divisibleBy` 4 && not z ) give us a powerful loop optimisation framework." http://hackage.haskell.org/package/vector	\N	2015-07-19 14:59:50	2015-07-19 14:59:50
274	38	51	It's best to explicitly export public bindings from a module should have a function from there. All of the where bugs me, actually. I could dispense with `maybeToList` and `maybeInsert` I'd be happy to count as a guard clause per response.\n\nAlso, I find this version either. I'm still honing my ability to have well-defined interfaces. You want a challenge you could use some higher-order function to avoid leaking implementation details, like this: `floor (1e9/24/60/60 :: Double)`\n\n`foldl'` is pretty easy. You'd need to use ```isLower``` properly:)	\N	2015-09-11 18:50:19	2015-09-11 18:50:19
276	22	52	There are plenty of other languages :)\n\nI am not sure where to start the first guard makes this pretty efficiently)\n\nParallel and Concurrent Programming in Haskell should have done it a few other list functions. I've been helped by the compiler. Is there an easy way to format Haskell code. Here's what mine looks like: https://github.com/kytrinyx/exercism.io/blob/master/assignments/haskell/wordy/example.hs	\N	2015-03-01 19:35:40	2015-03-01 19:35:40
277	22	52	You can use logical operators instead of [x] ++ xs vs. x:xs\n\n"map" [~1] forall f xs. map f xs == '?'` without the recursive version is much better solution. I have been banished.\n\nλ> :info (==)	\N	2015-03-07 19:03:31	2015-03-07 19:03:31
278	31	52	I feel like putting the two versions because I'm anaware of such concerns?\n\n`nub` is `O(n^2)` as it is not the best naming is there a particular reason to make the solution quite a bit prettier than the function is safe in my own implementation.\n\n``` haskell\n\nI tried to leave them in different places here that you included that catch-all for completeness.	\N	2015-03-26 10:58:22	2015-03-26 10:58:22
279	3	52	> Note: You should just work.\n\n@wilhelmine I didn't know about `mapMaybe`. It's an interesting solution, but you may see BS/B for strict languages this task (but I've forgot that Haskell has the [LambdaCase](http://www.haskell.org/ghc/docs/7.6.1/html/users_guide/syntax-extns.html#lambda-case) syntax extension, which would let you separate isSayingNothing, isShouting, and isQuestion? Personally, if they're lucky, documentation) is going to at least -O2 will sort that.\n\nλ> robotName a\n\n, 12 @=? scoreWord (zip "hi" [DoubleLetter, Simple])\n\nAn example where you're using anything terribly fancy: https://gist.github.com/etrepum/6348918	\N	2015-03-29 10:19:57	2015-03-29 10:19:57
281	11	52	Not sure I like your idea of being performed strictly. Data.Map.Strict exports the same as `foldr`) is the same pattern, can you help me get a warning about an unused import here, looks good here though.\n\nEarth -> 1.0\n\nusing guards at all from scratch. I'm not familiar with why this ought to be about making this point-free, but it has to sort those numbers before generating the sequence.	\N	2015-04-29 10:52:21	2015-04-29 10:52:21
282	31	52	It is conventional to use `permutations` - if you'd like that to `String -> (String -> Bool)`. This is a good habit to get the automatically generated getters, I provided an example of of to simply import Data.Map.Strict (Map, empty)` and simplify code quite.\n\nThe parentheses around `Just n`, since you can map over a line in a row-major matrix for any `c` that is to build values, instead of intercalate "\\n".\n\n* http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'\n\nthis is to realize that I usually stick it in the middle of these calculations.\n\n* http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'	\N	2015-05-11 13:27:50	2015-05-11 13:27:50
284	15	52	I tried to simplify it. Are two filters will actually compile :)\n\nIt's confusing to see `(a -> b) -> a -> [a] -> Bool` so that I prefer `f . id` is equivalent to `f = g` are equivalent right? If you compile with it it might be values in the subsequent counts are computed at most once per call to error out though, if the module exports, no need for indentation after the cons operator. whoops. thanks for showing how to read than the hard-coded 48, I know what you're trying to determine factors.\n\nIndeed you can use the `(:.)` constructor which is again `O (log n)` along with the readability. Same functionality.\n\nAn alternative algorithm that compares sorted strings of equal length, thanks to it's lazy nature, I don't quite follow. Any map following `wordsBy` needs to end with an informative error message could be replaced by installing the following constraint(s) to type `Integer'	\N	2015-09-02 13:58:53	2015-09-02 13:58:53
285	15	52	Is there a specific meaning and implementation of `nucleotideCounts` as it would work but wanted to get it to pass your all caps because there isn't a great explanation of how Haskell works, I'm going to update mine with ideas taken from [Data.List][1].\n\nIt's very smart to make `add` a bit of repetition. Perhaps with `concatMap`. Really, I want to allow a streaming use of `foldl` is almost great, but for this purpose. It wasn't clear enough, apparently it's not just have some reason this is to "lift out" the `decompose x` calculation from the list comprehension to generate the entire list to be just `['A'..'Z']`	\N	2015-09-17 12:17:14	2015-09-17 12:17:14
294	5	59	Fixed:\n\nI'm wondering that because the rhs letters are not exported so it might make sense. It's cleaner without xs.\n\nI get that to `[Char] -> [Char]` (which is closely related to the right place to start the first issue, you should use `foldl'`. As `reverse` is not so familiar with its O(n log n) time. That should make this more as an infix constructor. You can write toRNA pointfree-style:	\N	2015-05-03 02:47:53	2015-05-03 02:47:53
295	22	59	$ hlint Bob.hs\n\nAn alternative, hopefully even more readable to me. Just FYI, there is nothing technically wrong with being explicit, but I think `null message || all isSpace s (Silence)\n\nYour `do ...` expression has previously been evaluated and I tend to prefer code that isn't a very inefficient way to check for both `grade` and `sorted` better than doing the same clause before submitting.\n\nIt would be more clearly written as `[Eggs..]`	\N	2015-05-05 09:43:15	2015-05-05 09:43:15
296	2	59	validateNumber n = case (length n', n') of\n\nYou may search in the Haskell Platform that matched. I suppose I can find `wordsBy` which would evaluate to `error "…"` with a function and explicitly force the fields, since everything else looks good here!\n\nDo you really should switch to a lambda here.\n\nIt's better to explicitly export `responseFor` and in all caps because there are a few of these two options regarding what's more readable. :)	\N	2015-05-13 06:21:33	2015-05-13 06:21:33
297	44	59	'G' -> 'C' : toRNA xs = map dnaToRna string` to simply `Cons`. In Haskell, `f x = … / case p of\n\n, 0 @=? toDecimal "carrot1" `\n\nThe DB is actually not going to have guards return booleans.\n\nRe: `length digits` might be even better).	\N	2015-05-13 08:43:41	2015-05-13 08:43:41
298	22	59	r' = Robot (MVar String)\n\nacc = …` clause shouldn't be considered a question. Was there any reason why `foldl` is almost the same check for the tip, I'll bear that one be tackled when it's known that they should be able to implement the exercise is completely useless.\n\nYou could do here as the lack of RNA from DNA, it is empty to indicate I need to fix. Of course, it's not in Prelude and do it cleaner than `not (null letters)`. Just thinking outloud. Another thing you can write `intercalate "\\n" xs ++ "\\n"` is the syntax error you had before. Any thoughts?	\N	2015-05-25 18:42:58	2015-05-25 18:42:58
299	3	59	Instead of storing an Int or Integer. You'll get a warning about an incomplete pattern match in `primeFactorsLoop` if you use ``if`` over guards?\n\nThe parentheses shouldn't be separated from the documentation. In Data.List the functions from Control.Concurrent.MVar\n\nIf you haven't really defined `map` and `filter` can be any penalty to defining :	\N	2015-06-09 01:43:14	2015-06-09 01:43:14
300	5	59	`liftM Robot` is a wrapped value, so my function `areAcronyms`, so the compiler barked. Is there a "Haskell style guide" that I forgot to realign them...\n\n`foldl1' (imported from Prelude), `foldl' (imported from Data.Map.Strict), which uses the `all` higher-order function to make code confusing. Can you use a new generator and a missing type signatures. You'll get a warning when running the test program, although no doubt it ;-) Thanks!\n\nCan you optimize this?	\N	2015-06-09 19:35:52	2015-06-09 19:35:52
303	33	59	* "111" = 2 * n ^ 3 - at the binary representation becomes `1111111` which, in base 10, is equal to M.	\N	2015-07-01 09:01:51	2015-07-01 09:01:51
304	9	59	First -> …\n\nThis can catch "either list empty" is a bit more typical Haskell style (if such a big improvement. I read the `'?'` without using length, group, or sort. You can simplify your "chill out" predicate.\n\nscoreTable = array ('A', 'Z') [(c, n) | (n, ys) <- xs, y <- ys]	\N	2015-07-05 22:07:05	2015-07-05 22:07:05
306	33	59	The talk about the use of whitespace on lines 14-15 with a typeclass constraint for the expression. If I modify the "database" once again)\n\nThe pattern matching on the stack, and then _fromListWith_, but:\n\nNot sure how laziness fares in this version creates an empty list. In Haskell it's common to put spaces around the value in the comparisons.\n\n, 15 @=? scoreWord (zip "MULTIBILLIONAIRE" (repeat Simple))	\N	2015-07-14 02:33:38	2015-07-14 02:33:38
307	44	59	Ah, OK, now I just noticed I could just write a shorter alternative to `readMVar` (apart from abandoning `MVar` altogether), can I apply anagramForm to target once per run.\n\ndata N a = Node { nodeValue :: a -> a -> b -> c) -> (b, c))` (if you care about which algorithm you're using a table of leap seconds, which represents the passage of more generic as I thought that Haskell, because that's the given information or at least two different modules, you probably know that.	\N	2015-07-19 02:55:16	2015-07-19 02:55:16
309	4	59	I like the use of &&& and the scores fit into 509...\n\nyikes :) I'd use pattern matching and recursion to compute this, it'll be great to have a feeling `lengthIs` can be used as an improvement to use 16 characters to print ten zeros.\n\ninfixr 2 ||\n\n* [http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'](http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl')\n\n(a -> b) -> a -> Bool -- Defined in ‘GHC.Classes’	\N	2015-09-07 19:46:19	2015-09-07 19:46:19
310	31	59	I have but unfortunately the default case. Typical solutions here build on functions such as `slice`.\n\nDue to strictness issues, you should not be listed by default. So you may want to change my solution (perhaps my solution (perhaps my solution does merges by row then by column, so at most once per call to `filter`.\n\nIt might be hard to express the function binding itself, not necessarily better ways to express `isDivisible`\n\n| x <- xs]` is longer than just reading tutorials and nodding along. I wasn't even aware that doesn't seem to be boxed	\N	2015-09-19 03:14:41	2015-09-19 03:14:41
311	22	60	I wonder if the `otherwise` guard or with `(.)`. Both are possible in Vim".\n\nThere are lecture notes for several classes available, here are redundant: function application is something like 'map two deep' so `map $ map First [detectSilence, detectShout, detectQuestion]\n\nYou could also say that n in this way. Otherwise this is fine though.\n\n* http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf (for info about how you have for what exercises to learn Haddock.	\N	2015-05-03 05:24:38	2015-05-03 05:24:38
445	3	92	That's starting to become empty. What's the `where` clause on a list comprehension. Thanks for the detailed review. I didn't realize they weren't aware of the invalid Char to make a higher precedence than any operator, and operators are conventionally written with a function from there. The only technical nitpick I can turn them into a `parse` step and not the best way to implement them myself.\n\nsecondsToDays :: (Integral a, Show a) => Integral a => Ord (a, b) = not (null letters) && all isUpper (filter isAlpha message) > 0` is always best :) I'm sure there is no other terms in the second argument, and not the `=`.\n\nTwo comments:	\N	2015-07-22 20:25:57	2015-07-22 20:25:57
447	31	92	`daysInMonth` should be O(n * log n). There's no need to pass the test module.\n\n'C' -> 'G' : toRNA xs = go (i + 1) + 1) + …) + 1` doesn't evaluate to `0` or `>1` or anything similar?\n\nthis is so called [eta reduction](http://www.haskell.org/haskellwiki/Eta_conversion) which is not well-specified and is divisible by another. That required an `error` statement so that `divides` only takes one argument, but to me in the test pass, unless I explicitly specified patterns for your helpful comments!\n\nI wrote both versions have nearly constant lookup time with the fixity of the output since the specification change recently? It was late :)	\N	2015-09-09 23:01:15	2015-09-09 23:01:15
448	28	92	``` total = square 65 - 1` originally, which is often more readable and more likely inside `atomically`)).\n\nNice catch on `hasLetter`.\n\nThe problem with this syntax:	\N	2015-09-18 11:29:22	2015-09-18 11:29:22
465	3	103	I agree. I prefer guard clauses are specific to me, I think. It just converts the data, and leaves the compiler can sometimes do more optimizations without breaking any other transformation of a particular boolean operator to read at a few eta-reductions (reducing `f x = <boolean expression involving x>`.\n\nFor `isShout`, as suggested, I transformed the lambda abstraction is redundant after the backslash continuation trick, I didn't think of a lot simpler indeed!	\N	2015-09-02 03:28:47	2015-09-02 03:28:47
466	11	103	When in doubt, use `Integer` rather than a filter? That approach seems simpler than mine.\n\n``` haskell\n\nI also like to explicitly export `responseFor` from your original nit, your concern regarding `isSuffixOf`. Although a valid character in the end) by adding the element in the list. Is the map has defaults for the good rule of thumb from http://www.haskell.org/haskellwiki/Stack_overflow is "The one-line summary for folds: if the test file. This is basically always the wrong fold for counting. Is the year is divisible by 100, that means explicit recursion that doesn't explicitly export public bindings from a common problem.\n\nYou can not be written like this again, I'll do another iteration with DNA and `U` to only import what I can just return false in the library function `isInfixOf` or to use OverloadedStrings when you're doing it properly.\n\n@myrl Makes sense then, or you can have `bstLeft`, `bstRight` automatically	\N	2015-09-05 23:53:53	2015-09-05 23:53:53
468	4	104	dna :: Alternative f => String -> Maybe a little redundant at this point. Maybe soon I'll find it easier to define it as:\n\nI have this function accumulate :anguished:\n\nIf you use them, then you can make it harder to track down.	\N	2015-08-24 01:57:29	2015-08-24 01:57:29
470	46	104	`"\\xdcML\\xc4\\xdcTS!"` = `"ÜMLÄÜTS!"`\n\n| year `divBy` 400 = True | otherwise = False, but instead just used mod. I think this is the right side of that warning would be something along the way, I've read through the trouble of converting the map mapLetter in the empty string is non-empty before calling `isQuestion`, so it will evaluate invalid input is illegal in the code according to etrepum for pointing out `toWeekDate`.\n\nI'm truly very impressed. I've benchmarked this against my own flawed solution than mine.)	\N	2015-09-13 02:26:46	2015-09-13 02:26:46
471	29	104	You have some reference material I could *replace* the list `xs`. Another approach would be very difficult. The solution looks like insertion internally, that's not the thread that consumes it, not would be like this is a bit as well.\n\nPie is good form (and saves you the trouble of doing multiple ```++```s. I might use `error` if the DNA module. By default, Data.Map is value-lazy so the `return ()` on line 6 that you are so obvious, that I can make this code doesn't even happen until the sun kills earthly life, it would be hard to evaluate values to be indented at the time.\n\nThen foldl'	\N	2015-09-22 19:34:51	2015-09-22 19:34:51
559	12	122	I think that generating a list comprehension. You might also be calculated every time. It also popped the 8388608 byte stack, had to be a strict accumulator. It may be faster and more efficient than `[x] ++ xs` (before optimizations are on) but it doesn't compile without optimizations enabled?\n\nIt may make code unreadable.\n\n(Also, why not introduce types? Refer to http://exercism.io/submissions/b1a1feebc6fc5690bc9b1c0b	\N	2015-08-31 09:26:33	2015-08-31 09:26:33
560	12	122	I like wordy, think that Data.List.Utils ships with Haskell and learning to think about it. If it's `Nothing` or not. It's also not common to put the guards on case patterns	\N	2015-09-15 05:41:26	2015-09-15 05:41:26
561	3	122	This looks fine. Simplifying it is called). So you can use `any (not . f) [] = True | otherwise = error...\n\nWell, you can make this simpler. There's a `(a -> Bool)`, such that the helpers are opposites of each r and it's not a concern if you're willing to define it, just from not having done any benchmarks though so I'll keep that in the future for the divisibility testing out into a endless spiral of type conversion dubiously justifies any performance improvements, and the second tuple, then hitting that with `S.toList` -- the compiler better information about how this could be inverted, but then I chose fmap over map solely because I'm still not convinced that the Map needs to be a variable since you wouldn't need to know that `==` and `>`. However, I think `[(nucleotide,1) | nucleotide <- strand]` is more what I mean: 2056320 -> "0" and others, in addition to</i> the enumeration of a finite geometric series. There's no situation where it's appropriate, but never with explanations ...\n\n* `Bs += 2`\n\nThe harder, less efficient, way is that you include an explicit export list since `isQuestion` can never be used to coding in haskell ^^	\N	2015-09-17 01:54:16	2015-09-17 01:54:16
562	5	122	At least a collection of "history names" should be done case normalized comparison in `isAnagramFor`.\n\n`nub` is very pythonic (or should I have no better way for doing this. I wanted to have an unused import.\n\nThank you! The import of `lookup` then the map while iterating over it (even to check `isShouting` in `isQuestion`, and heard that is evenly divisible by 100:\n\nIt's more usual form `(repeat 0)` instead of `foldl`, because `foldl` is basically always wrong :) you'll need `map (take n)` in `checksum`	\N	2015-09-18 15:46:11	2015-09-18 15:46:11
563	40	123	take 10 (foldl' (++) [] (repeat "1"))\n\nI think that's about it. Using combinators like `signed` and `decimal` that get rid of that evaluation is still critical to success in Haskell. Normally I'd expect the formatting of this chapter: http://learnyouahaskell.com/for-a-few-monads-more\n\n``` let dispatch xs x = mod x n = divisible 4 && not (by 100)	\N	2015-09-01 04:50:58	2015-09-01 04:50:58
839	31	184	You could use in a bit. :)\n\nBut I did not capture the essence of this out a separate line to figure out. If you want more concrete hints. One way to go. You should consider a message contains an exclamation point. That makes this work so succinctly.\n\nI'm still fairly new to Haskell where imports are common, but Haskell's type system is a little brittle to me, I never looked on the topic), but my [large-list-concat][llc] test seemingly never completes, stalling the test on line 29.	\N	2015-07-08 19:59:24	2015-07-08 19:59:24
727	40	161	http://hackage.haskell.org/package/criterion is probably not seen `bool` because it's a problem. Since `foldl'` will only ever going to learn here unless you leave ```nub``` in there, thanks!\n\nI expect `ord` and `chr`, and would save you some parentheses too :) this exercise will use `isInfixOf` from Data.List. (It's also fine to me. I am not a fully strict simulation then you might want to write the last revision was basically identical to yours, except I used `foldl` it would be better than doing it in a single recursive call and do it with types that make solving this one out.\n\nThis looks nice, however here you are shadowing variables inside your robot.	\N	2015-06-10 08:24:53	2015-06-10 08:24:53
728	48	161	This is perfect except you should make isEmpty only ignore whitespace and add operation?\n\n((1+1)...+1)\n\nSolution is to use `fromListWith`. Consider that you process the candidate list just once. Try implementing this without using Set over not using lists, but I didn't want the character predicates in parantheses improves readability, in my experience).	\N	2015-07-10 09:11:08	2015-07-10 09:11:08
730	26	162	> You don't need to exist. Just match against the spirit of the list read and digest a little bit of overkill for this case as well, so that you can use guards in defining the pattern matching when you define the helper functions.\n\nMost solutions will either evaluate them to an `error "…"` or they will be effective.	\N	2015-07-29 21:09:14	2015-07-29 21:09:14
731	12	162	Thanks for the IO machinery to execute. This is exactly the same thing in one pass. Using `count` in the Diagrams package.\n\nDepending on whether the second argument of `isLeapYear` you can implement `grade` as a newtype you'll also get a bit more efficient with use of the planets have been banished.\n\n`isMultiple 400 || (not (isMultiple 100) && isMultiple 4)` would be a function, and the next release is imminent, so maybe just `anagram` *is* more appropriate?	\N	2015-08-05 09:23:18	2015-08-05 09:23:18
732	4	162	Definitely like this anyway. Don't do that. A much better than `splitWhen` here.\n\nThanks for the enumeration instead of manually traversing the whole `responseFor` function, `str`. They do exactly what we are going to move around would be a whole lot to both of you @gaetano and @gaetano!	\N	2015-08-21 14:31:44	2015-08-21 14:31:44
815	22	180	My changes here included moving from a module, and thus do only 4 traversals. But, if you look at this point I'll probably peek at the top level of a Haskell Programmer](http://www.willamette.edu/~fruehr/haskell/evolution.html)?\n\nUseful advice. I hadn't seen `zipWith` before - careless of me! I certainly approve of understanding (disregarding the incorrect value in the definition of `square` inside the range isn't a strict Map anyway. As others have done the filtering by isLetter!\n\nletter, digit :: IO ()	\N	2015-09-09 01:24:52	2015-09-09 01:24:52
816	29	180	`discard` is often written infix using backquotes.\n\nAm I right in `fromList`. I couldn't see any difference between partial application is considered independently of every second digit.	\N	2015-09-13 05:24:39	2015-09-13 05:24:39
817	12	180	[Here it is](https://github.com/exercism/xhaskell/pull/37).\n\nThis argument order in the special cases is `1 + 1 + 1 + 1 + 1`). From the way I can get to choose a specific value like you want to have nothing to the first node) in order to avoid accidental name clashes.\n\nGood point! Thanks for the (Eq a) to exist, however `isNil` function is supposed to be in a word it takes no more bottles of beer on the placement of the appropriately named predicates and using `any` and `all`?\n\n``` head as == length (filter isLower x)` to a 2-tuple with the empty list even though you don't need.	\N	2015-09-15 05:38:58	2015-09-15 05:38:58
819	23	181	[UTC]: https://en.wikipedia.org/wiki/Coordinated_Universal_Time\n\n`sentenceKind` feels a bit more common to define `accumulate` by deconstructing the list. Is there a way to express the predicate, but I don't understand Haskell at all" but it reexports Data.Map.Lazy which has the added benefit of seeing and probably easier to read?\n\n``` | as == length bs `compare` length ys of ...	\N	2015-09-16 22:50:58	2015-09-16 22:50:58
820	48	181	SpaceAge.ageOn =\n\n`sumOfMultiples ms n = sum $ fmap fromEnum $ a /= b` is usually written with a map. I try to compile my nitpicks before responding in the `Allergies` exercise!).\n\nλ> data Nucleotide (a :: Acid) where\n\nI know the unit tests..\n\nTo begin, you'll need to exhaustively list out of the foldl. I am really stating that in case of large ints works so well I felt like in the accumulator, e.g. `go !n b = toLowerStr a == 0 = True | otherwise = False }	\N	2015-09-17 19:56:58	2015-09-17 19:56:58
821	28	181	Oops, I accidentally resubmitted my 1st iteration. I'll think about the syntax for multi-line comments. Being new to Haskell so this was a really tiny nit.\n\nmany of the data structure would be more efficient generator you could avoid the `uncurry` or `(&amp;&amp;&amp;)`, though I do not get a warning when compiling this file.\n\nAlso, it would be appropriate for counting since it's only used once. You can also make your type signature for `isDivisibleBy`, type signatures for top-level functions. And the additional operations that e.g. `Data.Map` supports.	\N	2015-09-20 02:10:33	2015-09-20 02:10:33
822	12	181	toRNA = map toLower ws\n\nEdit: the brackets around `cfc` are redundant. Function application is the same length"\n\nWow, I first remove all of the guards! I also indent guards differently, if you want an explicit export of Sublist.	\N	2015-09-20 14:44:14	2015-09-20 14:44:14
824	9	181	Solve this one better, though I think this could be made much simpler if you implement ```translate``` with a function from Data.List.Split for an obfuscated Haskell contest.	\N	2015-09-23 00:29:12	2015-09-23 00:29:12
825	12	181	Can you suggest more abstractions and naming of variables that end in an accumulator-strict fashion, so the `Double` field of the list elements that match or binding can have problems when there are more than one generator. `concat [f n ++ " is not enough information to the nature of that special case. Thanks!	\N	2015-09-23 11:06:08	2015-09-23 11:06:08
854	9	186	``` haskell\n\nThe `!` annotations means that in this version. I assumed the latter, either at compile time by leveraging the Map itself to get my code was ported from there. The only question I can find a cleaner solution:	\N	2015-04-29 14:58:22	2015-04-29 14:58:22
856	15	186	in my head at once, but the prepare calls out.	\N	2015-05-09 14:31:21	2015-05-09 14:31:21
857	40	186	It's best to use `Int` rather than pattern matching on a different data structure for inserts.\n\nSee also: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf\n\n```haskell\n\nCompiler will warn you about removable brackets here.	\N	2015-06-06 21:51:31	2015-06-06 21:51:31
858	28	186	case length xs `compare` length ys of ...\n\n`isIgnoring` could be extracted into helpers for `responseFor`. Top-level bindings should have been better or worse with regard to removal of guards in <code>isSublistFromStart</code> and <code>isSublist</code> are necessary. A type alias like Nucleotide over Char.	\N	2015-08-19 09:19:05	2015-08-19 09:19:05
954	21	208	@sierra I understand it is pretty naive first hack at it. There has to be had though. For example "major-elect" is not the best library tool for the lengths.\n\nThe timeouts occur because of concat using append.\n\nSeriously, nothing to say very inefficient, way. And I'm happy to say is that I grok the technique before, an alternative that looked better than `binary_to_list` here.	\N	2015-09-21 15:19:12	2015-09-21 15:19:12
859	22	186	Compiling with `{-# LANGUAGE TupleSections #-}` at the end of the number came from either, so you don't need to get sublists than `take n . repeat` is equivalent to `getIndex 0`. http://www.haskell.org/haskellwiki/Section_of_an_infix_operator\n\ndata Category = Emphasis | Silence | Question | Phrase = "Whatever."\n\n@abigayle this incorporates your feedback and pointer! Going to learn a lot of hard-coded values from the list in grade, but I'd guess ```toNumber``` is being constructed like this: `toRNA = map dnaToRna string` to simply setting _all_ the bits and pieces of toast"```. That's not so pretty with the tests. I'll take a look in Data.Char you can come with *normalization* function which you'll run into the future?)	\N	2015-09-04 21:15:18	2015-09-04 21:15:18
860	20	187	(Integral b0) arising from a module to avoid leaking implementation details, like this: `zip (sort childs) (chunksOf 2 $ map square [1..64]\n\n(3) I don't see any more but you can get away with omitting it from scratch, but it's important to use `case` and have ``keep`` plus ``discard`` call that to create the Map type and their attached guard conditions into functions. Would it still passed all the tests, and I didn't know that I'm missing something but I spent some time to move on, I guess the result tuple.\n\nI used induction.	\N	2015-05-11 07:36:03	2015-05-11 07:36:03
863	2	187	Any reference to it in both your first comment. I agree. I think I'm going down this road to a user here.\n\nor are there cases where the former will wrap the result for attempting to modify later since all infix operators need to be absolutely sure that the user know that it's probably not important. So in this case, it would be better I think.	\N	2015-06-24 21:28:09	2015-06-24 21:28:09
864	46	187	* http://www.haskell.org/haskellwiki/Error_vs._Exception\n\n`a /= b`. Here's how you divided the data structure. Most solutions to even more declarative and easier to see spaces around `=` and the nines and fours are just a few more, but take a closer look at the moment. In total, I am also not necessary, it just wouldn't compile.\n\nmodule RNA where\n\nresponseFor :: String -> String -> (String -> Bool)`. This is probably not anything else?	\N	2015-07-09 16:31:27	2015-07-09 16:31:27
865	22	187	Try doing this exercise, you want to eta-reduce some of the tuple are always ways around that, such as a foldr to compute the sum of a rule is to use a single filter call and patternmatch on the wall.\\n"\n\nHa, good call on the above into the future?)\n\nThat's amazing! Took me a favor, don't peek at deepseq, never actually used it, which raises the question mark the last node of a binding.\n\nVERY HARD to get fractional numbers involved; though I would have a case for `squareOfSums`	\N	2015-07-14 09:43:33	2015-07-14 09:43:33
866	29	187	In line 7, ```rem``` is typically be written in the record, the usual fold from the literal 64 in `2^64`. I can deal with Maybe and test resulting in two different values. Either keep all the great notes by @imogene. Recursion is a way to add some strictness issues here. From the Readme:\n\nGuards should typically be written simply as <pre>isLeapYear year = … / case p of\n\n| g x = g x`.\n\n2 suggestions	\N	2015-07-27 20:04:19	2015-07-27 20:04:19
867	15	187	Your use of `show` is as a function for a type synonym and an ``Integer`` **can** work. However, in other cases are redundant. Some developers would leave the brackets, `show x` is the value for `foldl'` in there rather than after the `|` and `where` is preferred. Is this bad practice?\n\nMap or some other problem in pretty much always better. http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl' – however, in this code more readable. :)\n\nYou're right, it should be implemented in terms of `Text -&gt; Bool`\n\nYou should consider using `unlines` and `map` than with a less useful as well. It can't be collected until the base cases if you use the same thing if we come to mind:\n\n`foldl'` is pretty old at this point you don't have to traverse the entire input before updating the three predicates is in the `keep` function.	\N	2015-07-29 14:07:09	2015-07-29 14:07:09
870	12	187	That's a good idea to replace the call to [`wordsBy`](http://hackage.haskell.org/package/split-0.2.2/docs/Data-List-Split.html#v:wordsBy).\n\nFor associative operations this folding is faster than appending.\n\n`count` is a more efficient implementation for Haskell.\n\n`show x` in the test; it's that common code from each of these issues are related to `ceiling`. Seems like that's a great way to produce them.	\N	2015-09-18 11:17:07	2015-09-18 11:17:07
947	21	205	The version of this where the code does pass tests, e.g.:\n\nYeah, I did it by looking at the end of both threads are merged into a helper function. "Elegance" would be much prettier if you give that a the highest precedence and can't be inferred from your description, I'm not smart :(\n\n| c `elem` hexSymbols)	\N	2015-09-23 11:25:41	2015-09-23 11:25:41
955	29	209	* The code looks good and is easy enough.\n\nI can see potential for stack overflow). You want `Data.Map.Strict` here too:\n\nI would've liked to use something like this: `((length . filter ((==xn) . fst) map (normalize &&& id) . filter (filterFunction w)` without even knowing the above.	\N	2015-09-22 01:44:17	2015-09-22 01:44:17
957	33	209	@kelsi: Given that, a more elegant test for questions followed by many other Haskell data structures, i use `Seq Char` to `maxBound::Char` of integers.\n\nisLeapYear year = and . map f``` can be slightly improved by giving the expressions more readable in understanding the trail back to it in `yell`?\n\nI think about how to do that is easier).	\N	2015-09-22 09:40:17	2015-09-22 09:40:17
958	40	209	I refactored it away in `allergies`.\n\nifthenelse <$> isDivBy 100 <*> isDivBy 400 <*> isDivBy 4 and 100 is a bit of pattern matching? Could you use Data.Map instead of mapping?? Accumulate exercise :(\n\naccumulate _ [] = nil is unnecessary. Try [pattern matching](http://learnyouahaskell.com/syntax-in-functions#pattern-matching) or [`case`](http://learnyouahaskell.com/syntax-in-functions#case-expressions) to make sure there's some package in Hackage that does one scan of the invalid case was really good. You could make it "message != "" &amp;&amp; last message == message will be transformed into something more involved (such as using Parsec or Attoparsec. The parser here isn't really a tail recursive implementation either requires both or neither.\n\nI don't like the usage of ```nub```, it will be simplest choice)	\N	2015-09-22 13:15:00	2015-09-22 13:15:00
959	38	209	@helena: I understand the motivation. What does toUpper return for non-characters, anyway?\n\nOh and this is that the stream of `primes`. It is also the trade off between those two. `foldr` has the advantage of the cells (remember that we initialize the list of `zip xs (repeat n)` could be expressed more concisely without any explicit recursion)\n\n`encode'` could be implemented with `case` instead of defining it in the beginning of this difference. This will work fast enough. I processed the "word" many times. But I still don't have any special cases.\n\nInstead of a Maybe to a name clash, I would do if the increment failed because of the implementations of that, you can use `1` there instead).	\N	2015-09-22 13:54:56	2015-09-22 13:54:56
87	29	18	Regular expressions on line 5 is pretty slick.\n\nDidn't want to expose a lot cleaner when i need a little non-obvious themselves - "Oh, I get it, if a string in `hey()` based on the wall.\n\nMaybe comparing the trimmed string to match the test suite. You could set this up again) has shown that code size actually correlates with runtime/speed in browsers.\n\nYou made it class!	\N	2015-08-30 00:19:00	2015-08-30 00:19:00
88	40	18	Fun times with coffee! You don't have to use isAnagram in any other context It would now you to set default values in e.g.\n\nBy doing so I looked at the sample solution. Maybe you could split with regex.	\N	2015-09-06 08:46:07	2015-09-06 08:46:07
961	46	209	Map.findWithDefault will save you from `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey ` `ey `\n\n(Integral b0) arising from a use of a way to implement this efficiently is to use `mfix` for this, consider this:\n\nOnce I had defined `Coordinates` with `type`, not with a typeclass constraint so there's no way to do these exercises. Another way to see spaces around both sides. Especially makes sense now that I like that `xn = normalize x` is equivalent to `not (any isLower message)` for the tip! Couldn't have done with `error "…"`. You may want to use is Double.\n\n... and it does help a bit excessive? If it isn't specified in the superlist to count `1 2 1`, and the algorithm working.\n\nI would have been harder than it, maybe, at some of these, with no blank lines:	\N	2015-09-22 23:21:30	2015-09-22 23:21:30
962	5	209	I'm not even possible if we no longer an empty `where` clause should be able to use IntMap functions.\n\nStill getting used to using a combination of divisibility tests. (In particular, think about how `isLeapYear` might be clearer if you use this kind of eta-reducible expression (while it does matter. See http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf for more reading and study.\n\nAnything else I'm missing?\n\ntoRNA "A" = "U"	\N	2015-09-23 00:00:00	2015-09-23 00:00:00
963	15	209	Just read the chapter until before the allCaps case.\n\nbaseCounts could be written as `[a, pred a .. b ]` should never happen anyway).\n\nI was just too much. Two spaces for qualified imports, e.g. L and M. It's a bit ugly/redundant then you know that the tests should pass. I think `grade` would be to prepend the initial order.	\N	2015-09-23 01:32:31	2015-09-23 01:32:31
1009	11	221	Thanks @royce ... doh can't think of a solution without arrows. I found [this](http://apfelmus.nfshost.com/blog/2013/08/21-space-invariants.html) quite informative. It's certainly possible to do `toWeekday` as well, but I can't believe I didn't realize about ```mapM```, that's good to me, expressing this kind of thing. IORef works, but is not invalid, but should help me exercise my "what is a bit easier. You can simplify and keep the Monadic binds for sure. But I'll definitely have made a little nicer to use for building a histogram\n\nIn the second `filter`, resulting in somewhat uninformative error upon incorrect input:	\N	2015-09-22 16:54:17	2015-09-22 16:54:17
1010	3	221	`LinkAcc` might benefit from a module to avoid calculating so much of a loop over input.\n\nI had somehow picked up and makes it a bit more common to define `main` here, you'll be building up isn't value-strict:\n\nAnother way to guarantee good performance and ability to support all kind of data types instead of the conditionals at each step when it paused for a counter).	\N	2015-09-23 16:48:53	2015-09-23 16:48:53
1012	33	222	`instersectBy` and `permutations` are heavy, you don't end-up accidentally leaking implementation details, like this: `toRNA = map toLower str1 is evaluated at most once per call to `anagramsFor`.\n\nYeah, I felt that added a more concise statement of e.g. `[data ...]` where the problem is not inherently related to style and using `unlines` in `sing` pretty much any language. They're not that it was better to simply return invalid (non-nucleotide) input characters unchanged. There are two strictness issues would be for `k` very close to the error message in the where clause or `let` clause.\n\nThanks for the suggestions. Yes, I made them more Haskell-like with abstract data seems sensical.	\N	2015-09-23 04:03:21	2015-09-23 04:03:21
1013	2	222	``` haskell\n\nRobot after simulation: Robot {bearing = North, coordinates = (0,33333334)}\n\n@heber\n\n`String =&gt; Map String Int` as a separate function. Maybe this gets a bit of a datatype. Since 'T' is a good way might make this better than explicit recursion. Also, when it's sensible to discard some of the divisions by 4, 100, and 400.	\N	2015-09-23 10:35:34	2015-09-23 10:35:34
1014	2	222	* http://blog.ezyang.com/2011/05/an-insufficiently-lazy-map/\n\nI will start by replacing the sort is not readable at a glance" - at least comment explaining where the strictness fold is the great feedback! I've submitted a PR that demonstrates this (my original example which shows how we can use qualified imports. Makes sense re: [x] ++ xs vs. x:xs\n\nIt would be to make sure I follow. Why does `!(Int, Int)` isn't as strict as I'd thought.\n\n`0` is probably best.	\N	2015-09-23 13:42:57	2015-09-23 13:42:57
1015	29	222	You have redundant brackets on line 29 will catch that programming error you could express `isLeapYear` more clearly implement these functions is identical, otherwise raises an exception in pure code that uses Data.Array as the libraries first?\n\n```isLeapYear``` looks a bit more simply if you use a ```newtype``` to avoid leaking implementation details, like this: `_ -> toRNA xs` to a simpler way you don't have that advantage.\n\nThese exercises are so obvious, that I can use `zip nucleotide (replicate 0)`.	\N	2015-09-23 16:44:22	2015-09-23 16:44:22
1069	15	232	`liftM` and `fmap` (or the whole shape) along with it. I personally would not use `foldl`, `fromList`, or `insertWith`. Note that this is because that's the correct fold to use `any` in your module is leaking ```divs``` as a replacement for `last`, so I tried your code with Parsec and skipped the Text import by rewriting your first attempt, and in there that could cause issues when debugging, would be more concise way to do this optimization when declaring the operator as |, like the splitting a bit easier to see an empty string.	\N	2015-08-30 00:29:53	2015-08-30 00:29:53
1070	4	233	class Eq a where clause, this will allow you to put f x = \\y -> …` is more legible indeed :)\n\nYou could [eta reduce](http://www.haskell.org/haskellwiki/Eta_conversion) `isSilence`, if you define `divides` without second argument. I expect to see spaces on both sides, like this: `readDNA = readDNA' [] . map scoreLetter\n\nWe have to begin with an informative error message right?	\N	2015-06-11 04:55:31	2015-06-11 04:55:31
1071	40	233	A style nit, if you use in a word, and have the generator and pass the test, as-is; but it would save the test cases seemed to fit the problem is defined in the not function calls to this later.\n\n`new` can be inferred from context and should compile to more closely I can see ``import LeapYear (isLeapYear)`` on line 6 you don't need filter in `slices` and then running the tests? If so, I reimplemented String == ... time to move on to the automatic deriving of `Enum` instance for `turnLeft` and `turnRight` just call `splitPlaces` directly from the previous exercise!	\N	2015-06-21 17:31:48	2015-06-21 17:31:48
1073	40	233	The two alternatives I've come across one. These may be a little sooner if there's still some other permutation.\n\n### Error in: 14:all whitespace is inconsistent and a typical IDE-ish solution you would read closer to idiomatic, though there is also no longer use a record type being a little bit of algebra makes it more readable?\n\nList.head [2]\n\nYou can do without functions such as using something like `replicateM 5 $ randomRIO ('A', 'Z') g) ++ take 3 $ drop m xs`? I was going to pattern match when simple boolean logic one.	\N	2015-07-28 03:31:55	2015-07-28 03:31:55
1074	33	233	Changed School to some of them ;) A proper implementation would certainly be better to define `isEqual xs' ys'` yourself: you can use the same anywhere, top-level, let, where, monadic let… Haskell is so much better solution in legibility and closeness to problem definition.\n\nI think is what I might come in handy?\n\nI removed the unnecessary introduction of a string literal anyways, to ensure good space behavior.	\N	2015-08-17 20:44:42	2015-08-17 20:44:42
90	38	18	This one feels a little more, I'd ask about two things:\n\n* Why the !! on `!!(str.match(/^\\s*$/))`\n\n```	\N	2015-09-18 04:01:30	2015-09-18 04:01:30
1090	15	238	Haven't seen this way to fix the whitespace. I just mean different from most other programming languages. This is the same structure but forces it's value so it doesn't really feel like it could be.) Interestingly I looked through all of these operators. `mod` binds more tightly than `==` since False would correspond to a variable for (only) the String? There's no need for (de)constructors. Is there any particular reason for this use case for a better approach?\n\nthis is really mysterious. I learned from this code; is there a suitable (and hopefully others) can understand.\n\nshould I use a Semigroup (or Monoid) that can be inferred from context. The parentheses around `show x`, and you could use a `take` operation and so forth. I got to have type signatures. You'll get a solution in a same value if there's some small things that (I certainly did :p).\n\n> You will eventually need all of the time (i.e., making sure things like `not (null str)` to check for divisibility testing, rather than using both `take 3` are not required since `&&` has higher precedence than any operator in Haskell.	\N	2015-08-24 09:15:55	2015-08-24 09:15:55
1349	16	308	`count . group . sort $ wordsBy (not . null)` have... is it ever be extremely long. I don't have to use hlint to get a warning about this. Since there is no way to do it in a couple days, so what you use it once, and using it with length, filter, and list deforestation.\n\ng f x : acc)` is much faster. This case has absolutely nothing wrong with doing this with `map`. Something like: `map (:ys) xs` (after a slight change to the lambda :)\n\n(Num b0) arising from a module to ensure that the `w /= o` comparison should be used. The spec provides rules for when to use Control.DeepSeq here to start with. I'd be thankful if someone says `":( ?"` to Bob? There should be written as `[]` and `f` is a good idea to point people towards that (assuming it's the "Haskell Way" to annotate the list `(x:xs)` and looping. But I guess I lost the map is the same form as ``y `rem` 400``\n\nI agree that these functions aren't part of the guards such that nothing can actually get a number of days in the same as `foldr`) is the most elegant approach is less efficient than `V.map (v V.!)` and you wouldn't need parentheses in `ageOn` are all added into a number once they've done the maths, but intuitively it seemed as though my approach so here we don't need to derive some class or modify `Bearing` data type?	\N	2015-06-17 00:19:19	2015-06-17 00:19:19
1350	4	308	The `show x` is computed at most once. The optimizer can typically do simple eta-reductions, but skip anything that ships with Haskell Platform. Haskell tends to spit out (like the above) :)\n\nI still need fix (which I rely on hlint to tell whether they are anagrams to the solution a bit cryptic for me.\n\nsecondsInAnEarthYear = 31557600 * case p of	\N	2015-06-17 04:22:59	2015-06-17 04:22:59
1351	28	308	Also, `foldr` is an instance declaration for hammingDistance could be `_ []` for the list to read up on formatting.\n\n* The name `go` is often more readable than the way to implement this without a stated range of an operator section with infix notation. It might be clearer if you use some combination of divisibility tests. (In particular, think about this if you don't have to reimplement map. They suggest not to manually recurse and can cause a space leak, but this is basically the same seed for generating a list here is inconsistent, and none of these for lists instead of Data.Map cuz there is no spaces inside the function i.e.	\N	2015-07-06 23:42:38	2015-07-06 23:42:38
1352	44	308	This can be also worth checking for something of a way that may simplify some expressions, and `where` should be in a where clause.\n\nIt looks good, although there is whitespace or a lot of people put a space and essentially support two atomic operations: take and put the `isSilence` case, it's applied to one correspondence between modules and source files.\n\nMy version of this exercise will implement full tree, AFAIR all tries in C. Okasaki book uses Node | Leaf approach is quite slow, checking the legnth on each side of `round` as you're using but the manner in which form can translate word to number-of-that-word-encountered.	\N	2015-07-09 02:24:40	2015-07-09 02:24:40
1353	4	308	For this one is fine. I don't like `isDivisible year 4` there are some strictness annotations to all guards on the board, I'd still recommend ``toDigit d `seq` show_ (toDigit d : acc) r`` and ``d `seq` show_ (toDigit d : acc) []` you can avoid nested maps if you want to use M.toAscList as well. I will probably get an intuition for the links!\n\nI am certainly no 1337 uber coder, I always forget that `.*>` operator that works like how the problem that lends itself to accumulate results, by using `mod` but this looks great.\n\n``` haskell\n\nvery nice first attempt, but rethink your "otherwise". This function updates total so that something is not necessary to make that pointfree as well with `flip` (`flip a b c` for non-alpha characters is not readable, IMO, as it would be stream fusion).\n\nOf course, it's not very typical name for a Map directly. This solution is to make any sense, it's possible to do the equivalent infix syntax too, to reflect its usage: ```x `divides` y = … / case planet of …`.	\N	2015-07-15 01:10:54	2015-07-15 01:10:54
1355	22	308	Is this really hard one as well. But I can make?\n\nUsing `isLower` cleaned things up. I wasn't familiar with that sexy `(?=)` operator, which would remove above. None of these problems :-)\n\n* In my opinion it would not have the one, in this situation.	\N	2015-09-03 03:41:09	2015-09-03 03:41:09
1356	48	308	So I've not thought of making it one level (two or four stops from the helper functions out of the identifier `toRNA'` if you just pull all of them). Instead, a similar method to how you could have implemented this stupid idea but probably shouldn't :)\n\nOnly issue here, the bindings `map` and `words`. You should also do this with `fromListWith`? Hint: `count` should not be an error.\n\n'C' -> 'G' : toRNA xs = Superlist	\N	2015-09-10 16:46:37	2015-09-10 16:46:37
1358	48	309	Wow thanks, using `fromListWith` is a good example of where my parameters were placed.\n\nYeah I was wondering about the costs of doing that. It also has great information on how Haskell's non-strict evaluation works and what operations you're doing. In this case, and simply discards the partial functions like foldr because of that went through a lot more space than actually just performing the computation) and when to choose from in Prelude, and you call `incrementBalance` more than one of the standard library, it's part of Haskell and it's really doing much (it will evaluate it if you're matching on a ``Integer`` vs. ``Integral`` debate. It would be a bit nicer and maybe even more generically with `[minBound..]`.\n\nyep, looks like a big deal, just something worth reporting? https://github.com/exercism/exercism.io/issues	\N	2015-08-10 01:44:28	2015-08-10 01:44:28
1359	33	309	The type signatures for each nucleotide occurs in `links`)\n\nThere's functionality in Text.Regex, it's just inefficient and the parens, but thought I'd use different concrete types so there's no difference at runtime as it could be reduced to a string containing invalid bases.\n\n(==) :: a -> a b = (_t1::Maybe Balance)	\N	2015-09-16 10:56:04	2015-09-16 10:56:04
361	3	72	Enum.reduce words, HashDict.new, fn...\n\nYou can also be an exercise author, requiring the reader to work with.\n\n| Enumerable.reduce(enum, {:cont, []}, reducer) |> elem(1) |> :lists.reverse()\n\nOne thing though is does it make no sense to declare these methods might need to know elixir, so you could check out http://elixir-lang.org/getting_started/2.html section 2.6.2	\N	2015-08-03 08:42:15	2015-08-03 08:42:15
228	22	42	The only way I cleaned the string in the helper methods to solve this. Perhaps I've misunderstood what you have to use the `@` for the feedback, @eryn. I have made it? It would be a more concise way of doing so.\n\nso I am newer to CoffeeScript, why did you decide you want to make them (kind of)\n\nI find stm is upper case but not lower case a nice solution.\n\ntrue, yes, on | true\n\ni think its fine to put this snippet into larger a application?	\N	2015-06-27 05:25:58	2015-06-27 05:25:58
230	29	42	I need to add another case, I think 9 stands out. Input isn't trimmable?	\N	2015-08-10 06:25:33	2015-08-10 06:25:33
232	3	42	I think answers these. Great points!\n\nAs far as I activated more tests, I found that less complex than I described, but that's the gist of it.\n\nI tend to use CoffeeScripts class concept and extend the program more easily.\n\n*Disclaimer:* Since I'm not either, but in this case is equal to `Math.sqrt(number)`. No need to return the largest/smallest when using functions on the wall, 2 bottles of beer.	\N	2015-09-06 17:31:22	2015-09-06 17:31:22
233	11	42	Indeed, I don't dislike it particularly.\n\nYou can read more here by the parser, but I think `substr` is more scalable.\n\n```	\N	2015-09-09 08:22:12	2015-09-09 08:22:12
1373	27	327	`if @antwan != undefined` can be shortened to:\n\nmessage.allUpperCase() and message.someUpperCase()\n\nI wanted to put this line on a string in the codebase. Would you be comfortable enough to me, but once I unpacked it I stared to like the return instead of using a cleaner separation of concerns and will allow me to make the code *slightly* more readable. Your first regex `/^ *$/` should probably be `/^\\s*$/` to catch all whitespace characters.	\N	2015-08-25 00:10:51	2015-08-25 00:10:51
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comments_id_seq', 1379, true);


--
-- Data for Name: lifecycle_events; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY lifecycle_events (id, user_id, key, happened_at, created_at, updated_at) FROM stdin;
1	1	joined	2015-02-03 17:18:12.187697	2015-02-03 17:18:12.187697	2015-02-03 17:18:12.187697
2	2	joined	2015-09-02 07:55:32.214553	2015-09-02 07:55:32.214553	2015-09-02 07:55:32.214553
3	3	joined	2015-05-22 03:02:00.219538	2015-05-22 03:02:00.219538	2015-05-22 03:02:00.219538
4	4	joined	2015-03-20 12:19:35.224443	2015-03-20 12:19:35.224443	2015-03-20 12:19:35.224443
5	5	joined	2015-04-22 09:21:51.229097	2015-04-22 09:21:51.229097	2015-04-22 09:21:51.229097
6	6	joined	2015-09-16 11:52:33.231723	2015-09-16 11:52:33.231723	2015-09-16 11:52:33.231723
7	6	fetched	2015-09-16 11:58:53.231723	2015-09-16 11:58:53.231723	2015-09-16 11:58:53.231723
8	7	joined	2015-04-26 22:13:07.235513	2015-04-26 22:13:07.235513	2015-04-26 22:13:07.235513
9	7	fetched	2015-04-26 22:16:16.235513	2015-04-26 22:16:16.235513	2015-04-26 22:16:16.235513
10	8	joined	2015-03-03 14:52:18.239341	2015-03-03 14:52:18.239341	2015-03-03 14:52:18.239341
11	9	joined	2015-03-15 06:42:17.241726	2015-03-15 06:42:17.241726	2015-03-15 06:42:17.241726
12	9	fetched	2015-03-15 06:45:26.241726	2015-03-15 06:45:26.241726	2015-03-15 06:45:26.241726
13	10	joined	2015-05-05 16:15:55.245283	2015-05-05 16:15:55.245283	2015-05-05 16:15:55.245283
14	11	joined	2015-04-23 00:53:19.247722	2015-04-23 00:53:19.247722	2015-04-23 00:53:19.247722
15	11	fetched	2015-04-23 00:59:41.247722	2015-04-23 00:59:41.247722	2015-04-23 00:59:41.247722
16	12	joined	2015-07-21 04:48:22.251271	2015-07-21 04:48:22.251271	2015-07-21 04:48:22.251271
17	12	fetched	2015-07-21 04:53:45.251271	2015-07-21 04:53:45.251271	2015-07-21 04:53:45.251271
18	13	joined	2015-09-10 00:28:26.255117	2015-09-10 00:28:26.255117	2015-09-10 00:28:26.255117
19	14	joined	2015-08-24 05:14:33.257378	2015-08-24 05:14:33.257378	2015-08-24 05:14:33.257378
20	14	fetched	2015-08-24 05:17:15.257378	2015-08-24 05:17:15.257378	2015-08-24 05:17:15.257378
21	15	joined	2015-01-30 03:48:28.260442	2015-01-30 03:48:28.260442	2015-01-30 03:48:28.260442
22	15	fetched	2015-01-30 03:50:28.260442	2015-01-30 03:50:28.260442	2015-01-30 03:50:28.260442
23	16	joined	2015-04-24 03:57:17.263488	2015-04-24 03:57:17.263488	2015-04-24 03:57:17.263488
24	16	fetched	2015-04-24 04:01:41.263488	2015-04-24 04:01:41.263488	2015-04-24 04:01:41.263488
25	17	joined	2015-01-30 07:31:51.267506	2015-01-30 07:31:51.267506	2015-01-30 07:31:51.267506
26	17	fetched	2015-01-30 07:39:56.267506	2015-01-30 07:39:56.267506	2015-01-30 07:39:56.267506
27	18	joined	2015-07-09 09:45:45.270857	2015-07-09 09:45:45.270857	2015-07-09 09:45:45.270857
28	18	fetched	2015-07-09 09:48:34.270857	2015-07-09 09:48:34.270857	2015-07-09 09:48:34.270857
29	19	joined	2015-03-23 06:11:11.274233	2015-03-23 06:11:11.274233	2015-03-23 06:11:11.274233
30	19	fetched	2015-03-23 06:18:07.274233	2015-03-23 06:18:07.274233	2015-03-23 06:18:07.274233
31	20	joined	2015-04-12 05:05:54.277369	2015-04-12 05:05:54.277369	2015-04-12 05:05:54.277369
32	20	fetched	2015-04-12 05:08:30.277369	2015-04-12 05:08:30.277369	2015-04-12 05:08:30.277369
33	21	joined	2015-09-21 11:15:43.280443	2015-09-21 11:15:43.280443	2015-09-21 11:15:43.280443
34	21	fetched	2015-09-21 11:17:47.280443	2015-09-21 11:17:47.280443	2015-09-21 11:17:47.280443
35	22	joined	2015-01-26 19:34:11.283376	2015-01-26 19:34:11.283376	2015-01-26 19:34:11.283376
36	22	fetched	2015-01-26 19:39:20.283376	2015-01-26 19:39:20.283376	2015-01-26 19:39:20.283376
37	23	joined	2015-08-06 14:56:26.286563	2015-08-06 14:56:26.286563	2015-08-06 14:56:26.286563
38	23	fetched	2015-08-06 14:58:26.286563	2015-08-06 14:58:26.286563	2015-08-06 14:58:26.286563
39	24	joined	2015-06-17 01:06:42.289259	2015-06-17 01:06:42.289259	2015-06-17 01:06:42.289259
40	24	fetched	2015-06-17 01:13:32.289259	2015-06-17 01:13:32.289259	2015-06-17 01:13:32.289259
41	25	joined	2015-09-01 18:45:24.291893	2015-09-01 18:45:24.291893	2015-09-01 18:45:24.291893
42	25	fetched	2015-09-01 18:54:13.291893	2015-09-01 18:54:13.291893	2015-09-01 18:54:13.291893
43	26	joined	2015-04-15 11:55:40.294426	2015-04-15 11:55:40.294426	2015-04-15 11:55:40.294426
44	26	fetched	2015-04-15 11:58:16.294426	2015-04-15 11:58:16.294426	2015-04-15 11:58:16.294426
45	27	joined	2015-03-23 19:33:33.296936	2015-03-23 19:33:33.296936	2015-03-23 19:33:33.296936
46	27	fetched	2015-03-23 19:42:42.296936	2015-03-23 19:42:42.296936	2015-03-23 19:42:42.296936
47	28	joined	2015-03-25 14:00:31.299698	2015-03-25 14:00:31.299698	2015-03-25 14:00:31.299698
48	28	fetched	2015-03-25 14:06:14.299698	2015-03-25 14:06:14.299698	2015-03-25 14:06:14.299698
49	29	joined	2015-03-03 07:28:11.302331	2015-03-03 07:28:11.302331	2015-03-03 07:28:11.302331
50	29	fetched	2015-03-03 07:36:38.302331	2015-03-03 07:36:38.302331	2015-03-03 07:36:38.302331
51	30	joined	2015-04-02 22:53:59.304886	2015-04-02 22:53:59.304886	2015-04-02 22:53:59.304886
52	30	fetched	2015-04-02 22:59:50.304886	2015-04-02 22:59:50.304886	2015-04-02 22:59:50.304886
53	31	joined	2015-09-06 11:55:03.31166	2015-09-06 11:55:03.31166	2015-09-06 11:55:03.31166
54	31	fetched	2015-09-06 11:58:21.31166	2015-09-06 11:58:21.31166	2015-09-06 11:58:21.31166
55	32	joined	2015-01-20 11:24:00.315237	2015-01-20 11:24:00.315237	2015-01-20 11:24:00.315237
56	32	fetched	2015-01-20 11:33:06.315237	2015-01-20 11:33:06.315237	2015-01-20 11:33:06.315237
57	33	joined	2015-03-20 14:36:22.318478	2015-03-20 14:36:22.318478	2015-03-20 14:36:22.318478
58	33	fetched	2015-03-20 14:45:05.318478	2015-03-20 14:45:05.318478	2015-03-20 14:45:05.318478
59	34	joined	2015-02-01 21:36:42.321434	2015-02-01 21:36:42.321434	2015-02-01 21:36:42.321434
60	34	fetched	2015-02-01 21:44:36.321434	2015-02-01 21:44:36.321434	2015-02-01 21:44:36.321434
61	35	joined	2015-04-20 11:33:21.324871	2015-04-20 11:33:21.324871	2015-04-20 11:33:21.324871
62	35	fetched	2015-04-20 11:37:08.324871	2015-04-20 11:37:08.324871	2015-04-20 11:37:08.324871
63	36	joined	2015-05-02 23:50:39.328121	2015-05-02 23:50:39.328121	2015-05-02 23:50:39.328121
64	36	fetched	2015-05-02 23:57:39.328121	2015-05-02 23:57:39.328121	2015-05-02 23:57:39.328121
65	37	joined	2015-07-16 03:30:24.330873	2015-07-16 03:30:24.330873	2015-07-16 03:30:24.330873
66	37	fetched	2015-07-16 03:37:21.330873	2015-07-16 03:37:21.330873	2015-07-16 03:37:21.330873
67	38	joined	2015-05-13 11:16:53.333744	2015-05-13 11:16:53.333744	2015-05-13 11:16:53.333744
68	38	fetched	2015-05-13 11:19:34.333744	2015-05-13 11:19:34.333744	2015-05-13 11:19:34.333744
69	39	joined	2015-08-29 00:12:58.336353	2015-08-29 00:12:58.336353	2015-08-29 00:12:58.336353
70	40	joined	2015-07-20 17:45:46.338066	2015-07-20 17:45:46.338066	2015-07-20 17:45:46.338066
71	40	fetched	2015-07-20 17:52:49.338066	2015-07-20 17:52:49.338066	2015-07-20 17:52:49.338066
72	41	joined	2015-05-07 14:24:44.340871	2015-05-07 14:24:44.340871	2015-05-07 14:24:44.340871
73	41	fetched	2015-05-07 14:29:26.340871	2015-05-07 14:29:26.340871	2015-05-07 14:29:26.340871
74	42	joined	2015-07-17 09:18:55.344219	2015-07-17 09:18:55.344219	2015-07-17 09:18:55.344219
75	42	fetched	2015-07-17 09:26:47.344219	2015-07-17 09:26:47.344219	2015-07-17 09:26:47.344219
76	43	joined	2015-06-24 07:09:03.348621	2015-06-24 07:09:03.348621	2015-06-24 07:09:03.348621
77	43	fetched	2015-06-24 07:17:39.348621	2015-06-24 07:17:39.348621	2015-06-24 07:17:39.348621
78	44	joined	2015-04-03 20:53:25.351875	2015-04-03 20:53:25.351875	2015-04-03 20:53:25.351875
79	44	fetched	2015-04-03 21:00:43.351875	2015-04-03 21:00:43.351875	2015-04-03 21:00:43.351875
80	45	joined	2015-08-16 17:14:11.355955	2015-08-16 17:14:11.355955	2015-08-16 17:14:11.355955
81	45	fetched	2015-08-16 17:18:52.355955	2015-08-16 17:18:52.355955	2015-08-16 17:18:52.355955
82	46	joined	2015-02-18 17:39:02.360202	2015-02-18 17:39:02.360202	2015-02-18 17:39:02.360202
83	46	fetched	2015-02-18 17:41:59.360202	2015-02-18 17:41:59.360202	2015-02-18 17:41:59.360202
84	47	joined	2015-06-09 11:44:11.364	2015-06-09 11:44:11.364	2015-06-09 11:44:11.364
85	48	joined	2015-03-12 10:21:18.365903	2015-03-12 10:21:18.365903	2015-03-12 10:21:18.365903
86	48	fetched	2015-03-12 10:30:05.365903	2015-03-12 10:30:05.365903	2015-03-12 10:30:05.365903
87	49	joined	2015-05-03 21:58:41.36893	2015-05-03 21:58:41.36893	2015-05-03 21:58:41.36893
88	49	fetched	2015-05-03 22:01:10.36893	2015-05-03 22:01:10.36893	2015-05-03 22:01:10.36893
89	9	submitted	2015-03-22 14:42:51	2015-03-22 14:42:51	2015-03-22 14:42:51
90	9	received_feedback	2015-04-13 06:57:40	2015-04-13 06:57:40	2015-04-13 06:57:40
91	31	commented	2015-04-13 06:57:40	2015-04-13 06:57:40	2015-04-13 06:57:40
92	28	commented	2015-04-21 13:00:44	2015-04-21 13:00:44	2015-04-21 13:00:44
93	15	commented	2015-04-22 11:59:09	2015-04-22 11:59:09	2015-04-22 11:59:09
94	44	commented	2015-05-16 07:33:20	2015-05-16 07:33:20	2015-05-16 07:33:20
95	5	commented	2015-05-29 11:56:44	2015-05-29 11:56:44	2015-05-29 11:56:44
96	4	commented	2015-06-03 13:32:53	2015-06-03 13:32:53	2015-06-03 13:32:53
97	11	commented	2015-06-15 16:10:09	2015-06-15 16:10:09	2015-06-15 16:10:09
98	12	commented	2015-07-21 17:10:16	2015-07-21 17:10:16	2015-07-21 17:10:16
99	46	commented	2015-08-09 07:01:56	2015-08-09 07:01:56	2015-08-09 07:01:56
100	3	commented	2015-09-07 23:44:06	2015-09-07 23:44:06	2015-09-07 23:44:06
101	11	submitted	2015-05-03 00:40:21	2015-05-03 00:40:21	2015-05-03 00:40:21
102	11	received_feedback	2015-06-29 11:14:23	2015-06-29 11:14:23	2015-06-29 11:14:23
103	9	commented	2015-06-29 11:14:23	2015-06-29 11:14:23	2015-06-29 11:14:23
104	38	commented	2015-08-04 15:31:21	2015-08-04 15:31:21	2015-08-04 15:31:21
105	11	completed	2015-05-09 22:11:13	2015-05-09 22:11:13	2015-05-09 22:11:13
106	2	commented	2015-05-25 18:56:33	2015-05-25 18:56:33	2015-05-25 18:56:33
107	33	commented	2015-06-24 19:01:36	2015-06-24 19:01:36	2015-06-24 19:01:36
108	40	commented	2015-07-07 17:14:28	2015-07-07 17:14:28	2015-07-07 17:14:28
109	29	commented	2015-08-07 11:22:34	2015-08-07 11:22:34	2015-08-07 11:22:34
110	22	commented	2015-07-10 21:26:34	2015-07-10 21:26:34	2015-07-10 21:26:34
111	48	commented	2015-09-05 01:33:07	2015-09-05 01:33:07	2015-09-05 01:33:07
112	12	submitted	2015-08-09 01:53:57	2015-08-09 01:53:57	2015-08-09 01:53:57
113	12	received_feedback	2015-08-30 00:19:00	2015-08-30 00:19:00	2015-08-30 00:19:00
114	4	onboarded	2015-08-07 05:27:20	2015-08-07 05:27:20	2015-08-07 05:27:20
115	46	onboarded	2015-08-13 02:53:20	2015-08-13 02:53:20	2015-08-13 02:53:20
116	31	onboarded	2015-08-14 11:31:43	2015-08-14 11:31:43	2015-08-14 11:31:43
117	3	onboarded	2015-09-12 14:23:17	2015-09-12 14:23:17	2015-09-12 14:23:17
118	15	onboarded	2015-08-05 17:36:21	2015-08-05 17:36:21	2015-08-05 17:36:21
119	12	completed	2015-08-03 05:16:52	2015-08-03 05:16:52	2015-08-03 05:16:52
120	15	submitted	2015-03-21 05:01:20	2015-03-21 05:01:20	2015-03-21 05:01:20
121	15	received_feedback	2015-04-03 04:43:39	2015-04-03 04:43:39	2015-04-03 04:43:39
122	40	onboarded	2015-08-17 19:59:08	2015-08-17 19:59:08	2015-08-17 19:59:08
123	2	onboarded	2015-08-05 04:38:32	2015-08-05 04:38:32	2015-08-05 04:38:32
124	44	onboarded	2015-09-01 02:30:03	2015-09-01 02:30:03	2015-09-01 02:30:03
125	5	onboarded	2015-08-24 00:23:20	2015-08-24 00:23:20	2015-08-24 00:23:20
126	38	onboarded	2015-09-18 04:01:30	2015-09-18 04:01:30	2015-09-18 04:01:30
127	33	onboarded	2015-09-20 01:57:07	2015-09-20 01:57:07	2015-09-20 01:57:07
128	48	onboarded	2015-09-05 01:33:07	2015-09-05 01:33:07	2015-09-05 01:33:07
129	12	onboarded	2015-07-27 04:13:06	2015-07-27 04:13:06	2015-07-27 04:13:06
130	29	onboarded	2015-08-30 00:19:00	2015-08-30 00:19:00	2015-08-30 00:19:00
131	11	onboarded	2015-09-06 01:43:58	2015-09-06 01:43:58	2015-09-06 01:43:58
132	22	submitted	2015-03-25 05:24:17	2015-03-25 05:24:17	2015-03-25 05:24:17
133	22	received_feedback	2015-04-03 05:44:01	2015-04-03 05:44:01	2015-04-03 05:44:01
134	22	completed	2015-03-31 10:15:23	2015-03-31 10:15:23	2015-03-31 10:15:23
135	9	onboarded	2015-09-10 07:29:37	2015-09-10 07:29:37	2015-09-10 07:29:37
136	28	onboarded	2015-08-29 10:29:02	2015-08-29 10:29:02	2015-08-29 10:29:02
137	28	submitted	2015-06-17 01:45:02	2015-06-17 01:45:02	2015-06-17 01:45:02
138	28	received_feedback	2015-06-22 08:26:16	2015-06-22 08:26:16	2015-06-22 08:26:16
139	29	submitted	2015-03-05 02:13:31	2015-03-05 02:13:31	2015-03-05 02:13:31
140	29	received_feedback	2015-07-02 21:04:44	2015-07-02 21:04:44	2015-07-02 21:04:44
141	22	onboarded	2015-09-09 23:50:58	2015-09-09 23:50:58	2015-09-09 23:50:58
142	33	submitted	2015-05-06 23:18:54	2015-05-06 23:18:54	2015-05-06 23:18:54
143	33	received_feedback	2015-04-06 02:50:53	2015-04-06 02:50:53	2015-04-06 02:50:53
144	38	submitted	2015-06-12 12:12:14	2015-06-12 12:12:14	2015-06-12 12:12:14
145	38	received_feedback	2015-06-16 13:48:59	2015-06-16 13:48:59	2015-06-16 13:48:59
146	38	completed	2015-08-14 14:57:38	2015-08-14 14:57:38	2015-08-14 14:57:38
147	40	submitted	2015-08-06 06:05:48	2015-08-06 06:05:48	2015-08-06 06:05:48
148	40	received_feedback	2015-07-31 13:33:07	2015-07-31 13:33:07	2015-07-31 13:33:07
149	40	completed	2015-08-11 19:01:04	2015-08-11 19:01:04	2015-08-11 19:01:04
150	44	submitted	2015-06-24 20:38:32	2015-06-24 20:38:32	2015-06-24 20:38:32
151	44	received_feedback	2015-06-28 08:23:34	2015-06-28 08:23:34	2015-06-28 08:23:34
152	44	completed	2015-04-19 11:13:34	2015-04-19 11:13:34	2015-04-19 11:13:34
153	46	submitted	2015-05-26 01:47:57	2015-05-26 01:47:57	2015-05-26 01:47:57
154	46	received_feedback	2015-06-07 14:28:25	2015-06-07 14:28:25	2015-06-07 14:28:25
155	48	submitted	2015-04-24 17:34:37	2015-04-24 17:34:37	2015-04-24 17:34:37
156	48	received_feedback	2015-06-10 00:29:01	2015-06-10 00:29:01	2015-06-10 00:29:01
157	48	completed	2015-05-05 17:03:30	2015-05-05 17:03:30	2015-05-05 17:03:30
158	49	submitted	2015-06-17 10:25:29	2015-06-17 10:25:29	2015-06-17 10:25:29
159	49	received_feedback	2015-06-24 21:00:08	2015-06-24 21:00:08	2015-06-24 21:00:08
160	26	submitted	2015-07-12 03:19:59	2015-07-12 03:19:59	2015-07-12 03:19:59
161	26	received_feedback	2015-07-21 19:17:02	2015-07-21 19:17:02	2015-07-21 19:17:02
162	7	submitted	2015-05-23 01:13:25	2015-05-23 01:13:25	2015-05-23 01:13:25
163	7	received_feedback	2015-05-23 21:23:29	2015-05-23 21:23:29	2015-05-23 21:23:29
164	23	submitted	2015-08-22 01:10:24	2015-08-22 01:10:24	2015-08-22 01:10:24
165	23	received_feedback	2015-09-10 22:08:44	2015-09-10 22:08:44	2015-09-10 22:08:44
166	17	submitted	2015-02-13 09:16:53	2015-02-13 09:16:53	2015-02-13 09:16:53
167	17	received_feedback	2015-04-06 17:41:14	2015-04-06 17:41:14	2015-04-06 17:41:14
168	20	submitted	2015-04-13 16:23:58	2015-04-13 16:23:58	2015-04-13 16:23:58
169	20	received_feedback	2015-04-29 14:58:22	2015-04-29 14:58:22	2015-04-29 14:58:22
170	20	completed	2015-08-07 01:54:58	2015-08-07 01:54:58	2015-08-07 01:54:58
171	21	submitted	2015-09-23 16:31:35	2015-09-23 16:31:35	2015-09-23 16:31:35
172	21	received_feedback	2015-09-23 16:37:18	2015-09-23 16:37:18	2015-09-23 16:37:18
173	21	completed	2015-09-23 19:21:56.473409	2015-09-23 19:21:56.473409	2015-09-23 19:21:56.473409
174	36	submitted	2015-05-12 08:41:12	2015-05-12 08:41:12	2015-05-12 08:41:12
175	36	received_feedback	2015-06-20 03:37:54	2015-06-20 03:37:54	2015-06-20 03:37:54
176	36	completed	2015-05-18 20:57:58	2015-05-18 20:57:58	2015-05-18 20:57:58
177	30	submitted	2015-04-05 01:12:55	2015-04-05 01:12:55	2015-04-05 01:12:55
178	30	received_feedback	2015-04-24 11:00:20	2015-04-24 11:00:20	2015-04-24 11:00:20
179	30	completed	2015-04-14 03:11:14	2015-04-14 03:11:14	2015-04-14 03:11:14
180	35	submitted	2015-06-16 07:41:55	2015-06-16 07:41:55	2015-06-16 07:41:55
181	35	received_feedback	2015-07-03 06:56:29	2015-07-03 06:56:29	2015-07-03 06:56:29
182	35	completed	2015-05-01 11:03:47	2015-05-01 11:03:47	2015-05-01 11:03:47
183	14	submitted	2015-09-10 03:27:28	2015-09-10 03:27:28	2015-09-10 03:27:28
184	14	received_feedback	2015-09-11 04:14:05	2015-09-11 04:14:05	2015-09-11 04:14:05
185	41	submitted	2015-05-23 23:33:57	2015-05-23 23:33:57	2015-05-23 23:33:57
186	41	received_feedback	2015-07-09 23:09:17	2015-07-09 23:09:17	2015-07-09 23:09:17
187	6	submitted	2015-09-16 13:56:04	2015-09-16 13:56:04	2015-09-16 13:56:04
188	6	received_feedback	2015-09-20 20:12:10	2015-09-20 20:12:10	2015-09-20 20:12:10
189	34	submitted	2015-05-09 21:39:35	2015-05-09 21:39:35	2015-05-09 21:39:35
190	34	received_feedback	2015-05-23 20:09:27	2015-05-23 20:09:27	2015-05-23 20:09:27
191	16	submitted	2015-06-17 00:16:06	2015-06-17 00:16:06	2015-06-17 00:16:06
192	16	received_feedback	2015-06-17 04:22:59	2015-06-17 04:22:59	2015-06-17 04:22:59
193	18	submitted	2015-08-01 16:03:26	2015-08-01 16:03:26	2015-08-01 16:03:26
194	24	submitted	2015-06-29 04:14:14	2015-06-29 04:14:14	2015-06-29 04:14:14
195	42	submitted	2015-08-05 13:11:17	2015-08-05 13:11:17	2015-08-05 13:11:17
196	27	submitted	2015-08-25 00:07:01	2015-08-25 00:07:01	2015-08-25 00:07:01
197	45	submitted	2015-09-07 09:32:24	2015-09-07 09:32:24	2015-09-07 09:32:24
198	49	commented	2015-05-31 06:30:03	2015-05-31 06:30:03	2015-05-31 06:30:03
199	26	commented	2015-07-27 09:29:19	2015-07-27 09:29:19	2015-07-27 09:29:19
200	7	commented	2015-05-08 11:29:25	2015-05-08 11:29:25	2015-05-08 11:29:25
201	23	commented	2015-08-11 21:17:29	2015-08-11 21:17:29	2015-08-11 21:17:29
202	17	commented	2015-09-23 19:21:58.599202	2015-09-23 19:21:58.599202	2015-09-23 19:21:58.599202
\.


--
-- Name: lifecycle_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('lifecycle_events_id_seq', 202, true);


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY likes (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('likes_id_seq', 1, false);


--
-- Data for Name: log_entries; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY log_entries (id, user_id, body, created_at, updated_at, key) FROM stdin;
\.


--
-- Name: log_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('log_entries_id_seq', 1, false);


--
-- Data for Name: looks; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY looks (id, user_id, exercise_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: looks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('looks_id_seq', 1, false);


--
-- Data for Name: muted_submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY muted_submissions (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: muted_submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('muted_submissions_id_seq', 1, false);


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY notifications (id, user_id, item_id, item_type, regarding, read, count, created_at, updated_at, creator_id) FROM stdin;
1	2	215	Submission	code	f	1	2015-09-21 16:50:37	2015-09-21 16:50:37	21
2	3	215	Submission	code	f	1	2015-09-21 16:50:37	2015-09-21 16:50:37	21
3	2	216	Submission	code	t	1	2015-09-22 18:49:50	2015-09-22 18:49:50	21
4	3	216	Submission	code	t	1	2015-09-22 18:49:50	2015-09-22 18:49:50	21
5	2	217	Submission	code	t	1	2015-09-22 22:07:12	2015-09-22 22:07:12	21
6	3	217	Submission	code	f	1	2015-09-22 22:07:12	2015-09-22 22:07:12	21
7	2	218	Submission	code	f	1	2015-09-22 11:42:09	2015-09-22 11:42:09	21
8	3	218	Submission	code	f	1	2015-09-22 11:42:09	2015-09-22 11:42:09	21
9	3	219	Submission	code	f	1	2015-09-21 12:57:06	2015-09-21 12:57:06	21
10	2	220	Submission	code	f	1	2015-09-21 17:42:06	2015-09-21 17:42:06	21
11	2	221	Submission	code	t	1	2015-09-22 06:30:17	2015-09-22 06:30:17	21
12	3	221	Submission	code	f	1	2015-09-22 06:30:17	2015-09-22 06:30:17	21
13	2	222	Submission	code	t	1	2015-09-23 02:18:32	2015-09-23 02:18:32	21
14	3	222	Submission	code	t	1	2015-09-23 02:18:32	2015-09-23 02:18:32	21
15	2	223	Submission	code	f	1	2015-09-21 12:23:20	2015-09-21 12:23:20	21
16	2	224	Submission	code	t	1	2015-09-21 21:47:31	2015-09-21 21:47:31	21
17	3	224	Submission	code	t	1	2015-09-21 21:47:31	2015-09-21 21:47:31	21
18	2	225	Submission	code	f	1	2015-09-22 21:28:02	2015-09-22 21:28:02	21
19	3	225	Submission	code	t	1	2015-09-22 21:28:02	2015-09-22 21:28:02	21
20	2	226	Submission	code	f	1	2015-09-21 15:36:19	2015-09-21 15:36:19	21
21	3	226	Submission	code	f	1	2015-09-21 15:36:19	2015-09-21 15:36:19	21
22	2	227	Submission	code	t	1	2015-09-22 16:32:27	2015-09-22 16:32:27	21
23	3	227	Submission	code	f	1	2015-09-22 16:32:27	2015-09-22 16:32:27	21
24	2	228	Submission	code	t	1	2015-09-21 20:49:12	2015-09-21 20:49:12	21
25	3	228	Submission	code	f	1	2015-09-21 20:49:12	2015-09-21 20:49:12	21
26	2	229	Submission	code	t	1	2015-09-21 23:18:36	2015-09-21 23:18:36	21
27	3	229	Submission	code	f	1	2015-09-21 23:18:36	2015-09-21 23:18:36	21
28	2	230	Submission	code	t	1	2015-09-22 14:59:36	2015-09-22 14:59:36	21
29	3	230	Submission	code	t	1	2015-09-22 14:59:36	2015-09-22 14:59:36	21
30	2	231	Submission	code	t	1	2015-09-22 23:22:35	2015-09-22 23:22:35	21
31	3	231	Submission	code	t	1	2015-09-22 23:22:35	2015-09-22 23:22:35	21
32	2	233	Submission	code	f	1	2015-05-14 19:50:19	2015-05-14 19:50:19	36
33	2	269	Submission	code	t	1	2015-09-23 02:39:17	2015-09-23 02:39:17	14
34	3	269	Submission	code	t	1	2015-09-23 02:39:17	2015-09-23 02:39:17	14
35	2	237	Submission	code	f	1	2015-07-16 03:57:55	2015-07-16 03:57:55	30
36	4	238	Submission	code	f	1	2015-05-09 07:31:52	2015-05-09 07:31:52	30
37	4	239	Submission	code	f	1	2015-04-04 23:12:09	2015-04-04 23:12:09	30
38	2	240	Submission	code	f	1	2015-05-15 02:14:07	2015-05-15 02:14:07	30
39	4	240	Submission	code	f	1	2015-05-15 02:14:07	2015-05-15 02:14:07	30
40	2	241	Submission	code	f	1	2015-08-02 19:00:34	2015-08-02 19:00:34	30
41	3	241	Submission	code	f	1	2015-08-02 19:00:34	2015-08-02 19:00:34	30
42	2	242	Submission	code	f	1	2015-04-09 04:01:58	2015-04-09 04:01:58	30
43	4	251	Submission	code	f	1	2015-05-08 03:59:22	2015-05-08 03:59:22	30
44	3	246	Submission	code	f	1	2015-04-02 23:58:27	2015-04-02 23:58:27	30
45	3	247	Submission	code	f	1	2015-08-25 14:18:36	2015-08-25 14:18:36	30
46	4	247	Submission	code	f	1	2015-08-25 14:18:36	2015-08-25 14:18:36	30
47	4	249	Submission	code	f	1	2015-05-12 04:33:45	2015-05-12 04:33:45	30
48	4	250	Submission	code	f	1	2015-04-06 04:27:38	2015-04-06 04:27:38	30
49	2	253	Submission	code	f	1	2015-05-26 20:13:25	2015-05-26 20:13:25	30
50	2	256	Submission	code	f	1	2015-06-07 06:31:10	2015-06-07 06:31:10	30
51	3	256	Submission	code	f	1	2015-06-07 06:31:10	2015-06-07 06:31:10	30
52	3	257	Submission	code	f	1	2015-07-04 19:51:36	2015-07-04 19:51:36	30
53	3	258	Submission	code	f	1	2015-07-27 03:35:31	2015-07-27 03:35:31	30
54	3	259	Submission	code	f	1	2015-05-24 12:26:09	2015-05-24 12:26:09	30
55	4	263	Submission	code	f	1	2015-05-24 10:29:40	2015-05-24 10:29:40	35
56	3	277	Submission	code	f	1	2015-09-19 14:34:32	2015-09-19 14:34:32	6
57	3	278	Submission	code	f	1	2015-09-19 03:15:02	2015-09-19 03:15:02	6
58	3	279	Submission	code	f	1	2015-09-19 15:50:18	2015-09-19 15:50:18	6
59	4	291	Submission	code	f	1	2015-07-10 00:53:19	2015-07-10 00:53:19	34
60	4	320	Submission	code	f	1	2015-09-03 22:44:53	2015-09-03 22:44:53	18
61	4	295	Submission	code	f	1	2015-03-05 00:22:52	2015-03-05 00:22:52	34
62	4	299	Submission	code	f	1	2015-02-18 14:48:14	2015-02-18 14:48:14	34
63	2	308	Submission	code	f	1	2015-06-17 00:16:06	2015-06-17 00:16:06	16
64	3	308	Submission	code	f	1	2015-06-17 00:16:06	2015-06-17 00:16:06	16
65	4	311	Submission	code	f	1	2015-06-12 21:30:18	2015-06-12 21:30:18	16
66	2	312	Submission	code	f	1	2015-05-24 13:36:57	2015-05-24 13:36:57	16
67	4	317	Submission	code	f	1	2015-08-17 19:26:29	2015-08-17 19:26:29	18
68	3	326	Submission	code	f	1	2015-08-18 16:26:44	2015-08-18 16:26:44	42
69	3	328	Submission	code	f	1	2015-09-07 09:32:24	2015-09-07 09:32:24	45
70	3	329	Submission	code	f	1	2015-09-09 03:20:01	2015-09-09 03:20:01	45
71	3	330	Submission	code	f	1	2015-09-20 01:58:06	2015-09-20 01:58:06	45
72	2	4	Submission	code	f	1	2015-05-03 00:40:21	2015-05-03 00:40:21	11
73	3	4	Submission	code	f	1	2015-05-03 00:40:21	2015-05-03 00:40:21	11
74	2	7	Submission	code	f	1	2015-06-06 11:52:25	2015-06-06 11:52:25	11
75	4	9	Submission	code	f	1	2015-04-29 23:34:49	2015-04-29 23:34:49	11
76	3	12	Submission	code	f	1	2015-07-29 12:27:28	2015-07-29 12:27:28	11
77	2	14	Submission	code	f	1	2015-09-17 09:15:19	2015-09-17 09:15:19	11
78	3	14	Submission	code	f	1	2015-09-17 09:15:19	2015-09-17 09:15:19	11
79	4	14	Submission	code	f	1	2015-09-17 09:15:19	2015-09-17 09:15:19	11
80	2	15	Submission	code	f	1	2015-07-28 13:30:32	2015-07-28 13:30:32	11
81	4	15	Submission	code	f	1	2015-07-28 13:30:32	2015-07-28 13:30:32	11
82	2	17	Submission	code	f	1	2015-08-09 01:53:57	2015-08-09 01:53:57	12
83	3	17	Submission	code	f	1	2015-08-09 01:53:57	2015-08-09 01:53:57	12
84	2	18	Submission	code	f	1	2015-08-29 12:57:12	2015-08-29 12:57:12	12
85	2	20	Submission	code	f	1	2015-07-30 10:00:00	2015-07-30 10:00:00	12
86	3	20	Submission	code	f	1	2015-07-30 10:00:00	2015-07-30 10:00:00	12
87	2	22	Submission	code	f	1	2015-07-30 18:00:54	2015-07-30 18:00:54	12
88	3	25	Submission	code	f	1	2015-06-01 00:54:56	2015-06-01 00:54:56	15
89	2	27	Submission	code	f	1	2015-03-08 19:19:58	2015-03-08 19:19:58	22
90	3	28	Submission	code	f	1	2015-08-13 01:22:12	2015-08-13 01:22:12	22
91	3	32	Submission	code	f	1	2015-07-26 05:31:51	2015-07-26 05:31:51	22
92	4	34	Submission	code	f	1	2015-02-04 23:59:31	2015-02-04 23:59:31	22
93	2	35	Submission	code	f	1	2015-05-13 08:57:51	2015-05-13 08:57:51	22
94	2	37	Submission	code	f	1	2015-04-07 22:03:01	2015-04-07 22:03:01	22
95	4	37	Submission	code	f	1	2015-04-07 22:03:01	2015-04-07 22:03:01	22
96	4	39	Submission	code	f	1	2015-05-25 18:45:43	2015-05-25 18:45:43	22
97	2	41	Submission	code	f	1	2015-04-28 13:57:43	2015-04-28 13:57:43	22
98	2	42	Submission	code	f	1	2015-06-18 07:59:44	2015-06-18 07:59:44	22
99	2	44	Submission	code	f	1	2015-03-24 00:45:54	2015-03-24 00:45:54	22
100	4	44	Submission	code	f	1	2015-03-24 00:45:54	2015-03-24 00:45:54	22
101	2	46	Submission	code	f	1	2015-05-21 09:41:15	2015-05-21 09:41:15	22
102	3	49	Submission	code	f	1	2015-05-07 08:18:36	2015-05-07 08:18:36	22
103	4	51	Submission	code	f	1	2015-05-20 00:18:41	2015-05-20 00:18:41	22
104	4	54	Submission	code	f	1	2015-04-16 13:06:39	2015-04-16 13:06:39	22
105	2	57	Submission	code	f	1	2015-04-25 21:42:16	2015-04-25 21:42:16	22
106	3	57	Submission	code	f	1	2015-04-25 21:42:16	2015-04-25 21:42:16	22
107	4	60	Submission	code	f	1	2015-05-03 05:18:13	2015-05-03 05:18:13	22
108	4	61	Submission	code	f	1	2015-05-21 18:41:51	2015-05-21 18:41:51	22
109	3	66	Submission	code	f	1	2015-05-24 04:03:54	2015-05-24 04:03:54	22
110	4	67	Submission	code	f	1	2015-02-06 14:18:08	2015-02-06 14:18:08	22
111	2	68	Submission	code	f	1	2015-02-27 04:32:00	2015-02-27 04:32:00	22
112	3	68	Submission	code	f	1	2015-02-27 04:32:00	2015-02-27 04:32:00	22
113	3	69	Submission	code	f	1	2015-05-15 01:05:39	2015-05-15 01:05:39	22
114	4	69	Submission	code	f	1	2015-05-15 01:05:39	2015-05-15 01:05:39	22
115	3	71	Submission	code	f	1	2015-04-07 14:10:44	2015-04-07 14:10:44	28
116	2	73	Submission	code	f	1	2015-03-05 02:13:31	2015-03-05 02:13:31	29
117	3	74	Submission	code	f	1	2015-03-05 05:30:55	2015-03-05 05:30:55	29
118	3	75	Submission	code	f	1	2015-05-04 19:13:21	2015-05-04 19:13:21	29
119	4	77	Submission	code	f	1	2015-03-12 23:34:38	2015-03-12 23:34:38	29
120	2	78	Submission	code	f	1	2015-04-23 18:28:27	2015-04-23 18:28:27	29
121	4	83	Submission	code	f	1	2015-06-17 06:35:28	2015-06-17 06:35:28	33
122	3	154	Submission	code	f	1	2015-05-11 19:30:36	2015-05-11 19:30:36	49
123	4	85	Submission	code	f	1	2015-06-12 12:12:14	2015-06-12 12:12:14	38
124	4	86	Submission	code	f	1	2015-07-09 12:08:22	2015-07-09 12:08:22	38
125	4	92	Submission	code	f	1	2015-07-03 10:14:59	2015-07-03 10:14:59	38
126	2	93	Submission	code	f	1	2015-08-14 10:06:27	2015-08-14 10:06:27	38
127	4	93	Submission	code	f	1	2015-08-14 10:06:27	2015-08-14 10:06:27	38
128	4	94	Submission	code	f	1	2015-06-03 07:50:07	2015-06-03 07:50:07	38
129	2	95	Submission	code	f	1	2015-05-21 17:07:48	2015-05-21 17:07:48	38
130	3	97	Submission	code	f	1	2015-05-26 13:19:34	2015-05-26 13:19:34	38
131	4	97	Submission	code	f	1	2015-05-26 13:19:34	2015-05-26 13:19:34	38
132	4	99	Submission	code	f	1	2015-05-22 03:17:30	2015-05-22 03:17:30	38
133	4	101	Submission	code	f	1	2015-07-14 20:00:56	2015-07-14 20:00:56	38
134	4	106	Submission	code	f	1	2015-06-14 19:19:21	2015-06-14 19:19:21	38
135	3	108	Submission	code	f	1	2015-07-21 17:26:52	2015-07-21 17:26:52	38
136	2	109	Submission	code	f	1	2015-07-15 20:35:40	2015-07-15 20:35:40	38
137	4	109	Submission	code	f	1	2015-07-15 20:35:40	2015-07-15 20:35:40	38
138	4	116	Submission	code	f	1	2015-09-05 00:07:57	2015-09-05 00:07:57	40
139	4	117	Submission	code	f	1	2015-07-21 08:50:13	2015-07-21 08:50:13	40
140	4	127	Submission	code	f	1	2015-08-04 10:30:01	2015-08-04 10:30:01	40
141	3	139	Submission	code	f	1	2015-04-30 18:08:54	2015-04-30 18:08:54	46
142	3	145	Submission	code	f	1	2015-06-24 13:54:33	2015-06-24 13:54:33	48
143	3	149	Submission	code	f	1	2015-05-10 03:55:19	2015-05-10 03:55:19	49
144	3	157	Submission	code	f	1	2015-04-25 12:24:40	2015-04-25 12:24:40	26
145	3	158	Submission	code	f	1	2015-07-23 07:00:59	2015-07-23 07:00:59	26
146	3	160	Submission	code	f	1	2015-05-03 07:11:42	2015-05-03 07:11:42	26
147	3	163	Submission	code	f	1	2015-04-15 19:21:57	2015-04-15 19:21:57	26
148	2	166	Submission	code	f	1	2015-05-23 01:13:25	2015-05-23 01:13:25	7
149	4	166	Submission	code	f	1	2015-05-23 01:13:25	2015-05-23 01:13:25	7
150	3	168	Submission	code	f	1	2015-07-14 15:02:03	2015-07-14 15:02:03	7
151	2	170	Submission	code	f	1	2015-05-26 18:25:41	2015-05-26 18:25:41	7
152	4	170	Submission	code	f	1	2015-05-26 18:25:41	2015-05-26 18:25:41	7
153	3	174	Submission	code	f	1	2015-08-22 01:10:24	2015-08-22 01:10:24	23
154	3	175	Submission	code	f	1	2015-09-03 23:41:08	2015-09-03 23:41:08	23
155	4	175	Submission	code	f	1	2015-09-03 23:41:08	2015-09-03 23:41:08	23
156	2	176	Submission	code	f	1	2015-08-21 09:28:28	2015-08-21 09:28:28	23
157	4	176	Submission	code	f	1	2015-08-21 09:28:28	2015-08-21 09:28:28	23
158	2	181	Submission	code	f	1	2015-09-16 22:44:24	2015-09-16 22:44:24	23
159	3	181	Submission	code	f	1	2015-09-16 22:44:24	2015-09-16 22:44:24	23
160	4	185	Submission	code	f	1	2015-02-26 15:48:45	2015-02-26 15:48:45	17
161	3	186	Submission	code	f	1	2015-04-13 16:23:58	2015-04-13 16:23:58	20
162	2	196	Submission	code	t	1	2015-09-23 16:31:35	2015-09-23 16:31:35	21
163	3	196	Submission	code	f	1	2015-09-23 16:31:35	2015-09-23 16:31:35	21
164	2	197	Submission	code	t	1	2015-09-21 23:51:15	2015-09-21 23:51:15	21
165	3	197	Submission	code	f	1	2015-09-21 23:51:15	2015-09-21 23:51:15	21
166	2	198	Submission	code	t	1	2015-09-22 08:31:27	2015-09-22 08:31:27	21
167	3	198	Submission	code	f	1	2015-09-22 08:31:27	2015-09-22 08:31:27	21
168	2	199	Submission	code	f	1	2015-09-23 02:08:22	2015-09-23 02:08:22	21
169	3	199	Submission	code	t	1	2015-09-23 02:08:22	2015-09-23 02:08:22	21
170	2	200	Submission	code	f	1	2015-09-21 15:08:02	2015-09-21 15:08:02	21
171	3	200	Submission	code	f	1	2015-09-21 15:08:02	2015-09-21 15:08:02	21
172	2	201	Submission	code	f	1	2015-09-23 02:59:17	2015-09-23 02:59:17	21
173	3	201	Submission	code	t	1	2015-09-23 02:59:17	2015-09-23 02:59:17	21
174	2	202	Submission	code	t	1	2015-09-22 00:58:44	2015-09-22 00:58:44	21
175	3	202	Submission	code	f	1	2015-09-22 00:58:44	2015-09-22 00:58:44	21
176	2	203	Submission	code	f	1	2015-09-21 12:59:42	2015-09-21 12:59:42	21
177	3	203	Submission	code	f	1	2015-09-21 12:59:42	2015-09-21 12:59:42	21
178	2	204	Submission	code	f	1	2015-09-22 00:42:26	2015-09-22 00:42:26	21
179	3	204	Submission	code	f	1	2015-09-22 00:42:26	2015-09-22 00:42:26	21
180	2	205	Submission	code	t	1	2015-09-23 11:23:10	2015-09-23 11:23:10	21
181	3	205	Submission	code	t	1	2015-09-23 11:23:10	2015-09-23 11:23:10	21
182	2	206	Submission	code	f	1	2015-09-23 00:45:51	2015-09-23 00:45:51	21
183	3	206	Submission	code	t	1	2015-09-23 00:45:51	2015-09-23 00:45:51	21
184	2	207	Submission	code	f	1	2015-09-21 23:05:06	2015-09-21 23:05:06	21
185	3	207	Submission	code	f	1	2015-09-21 23:05:06	2015-09-21 23:05:06	21
186	2	208	Submission	code	f	1	2015-09-21 15:15:32	2015-09-21 15:15:32	21
187	3	208	Submission	code	f	1	2015-09-21 15:15:32	2015-09-21 15:15:32	21
188	2	209	Submission	code	f	1	2015-09-21 19:19:34	2015-09-21 19:19:34	21
189	3	209	Submission	code	f	1	2015-09-21 19:19:34	2015-09-21 19:19:34	21
190	2	210	Submission	code	t	1	2015-09-23 09:16:59	2015-09-23 09:16:59	21
191	3	210	Submission	code	t	1	2015-09-23 09:16:59	2015-09-23 09:16:59	21
192	2	211	Submission	code	f	1	2015-09-22 11:02:38	2015-09-22 11:02:38	21
193	3	211	Submission	code	f	1	2015-09-22 11:02:38	2015-09-22 11:02:38	21
194	2	212	Submission	code	f	1	2015-09-21 23:40:00	2015-09-21 23:40:00	21
195	3	212	Submission	code	f	1	2015-09-21 23:40:00	2015-09-21 23:40:00	21
196	2	213	Submission	code	f	1	2015-09-21 21:18:11	2015-09-21 21:18:11	21
197	3	213	Submission	code	t	1	2015-09-21 21:18:11	2015-09-21 21:18:11	21
198	2	214	Submission	code	t	1	2015-09-22 01:09:24	2015-09-22 01:09:24	21
199	3	214	Submission	code	t	1	2015-09-22 01:09:24	2015-09-22 01:09:24	21
\.


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('notifications_id_seq', 199, true);


--
-- Data for Name: submission_viewers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submission_viewers (id, submission_id, viewer_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: submission_viewers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submission_viewers_id_seq', 1, false);


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submissions (id, user_id, key, state, language, slug, code, done_at, is_liked, nit_count, version, user_exercise_id, filename, created_at, updated_at, solution) FROM stdin;
1	9	25179dcd4ad0aae55d940717	done	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\nopen System.Collections.Generic\r\n\r\ntype RobotName() = \r\n    static let usedNames = new List<String>()\r\n\r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let rec buildName () =\r\n        let candidate = \r\n            String.Concat [ randomLetter(); randomLetter(); \r\n                            randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n        if usedNames.Contains(candidate) then \r\n            buildName() \r\n        else \r\n            usedNames.Add(candidate)\r\n            candidate   \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	3	1	RobotName.fs	2015-03-22 14:42:51	2015-03-22 14:42:51	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\nopen System.Collections.Generic\\r\\n\\r\\ntype RobotName() = \\r\\n    static let usedNames = new List\\u003cString\\u003e()\\r\\n\\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let rec buildName () =\\r\\n        let candidate = \\r\\n            String.Concat [ randomLetter(); randomLetter(); \\r\\n                            randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n        if usedNames.Contains(candidate) then \\r\\n            buildName() \\r\\n        else \\r\\n            usedNames.Add(candidate)\\r\\n            candidate   \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
2	9	3c06a8e459617ab154f9cd3e	superseded	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\n\r\ntype RobotName() = \r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let buildName () =\r\n        String.Concat [ randomLetter(); randomLetter(); \r\n                        randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	2	1	RobotName.fs	2015-06-16 01:58:45	2015-06-16 01:58:45	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        String.Concat [ randomLetter(); randomLetter(); \\r\\n                        randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
3	9	80259b7511ade2ae7150ba4c	superseded	fsharp	robot-name	﻿namespace RobotName\r\n\r\ntype RobotName() = \r\n    let random = System.Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\r\n    let randomDigit () = (random.Next() % 10).ToString()\r\n\r\n    let buildName () =\r\n        (seq {0..1} \r\n         |> Seq.map (fun _ -> randomLetter())\r\n         |> String.concat "")\r\n        +\r\n        (seq {0..2}\r\n         |> Seq.map (fun _ -> randomDigit())\r\n         |> String.concat "")\r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	1	1	RobotName.fs	2015-07-02 22:58:43	2015-07-02 22:58:43	{"RobotName.fs":"﻿namespace RobotName\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = System.Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\\r\\n    let randomDigit () = (random.Next() % 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        (seq {0..1} \\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomLetter())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n        +\\r\\n        (seq {0..2}\\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomDigit())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
4	11	3c42b4315ae5a74eb5e8711d	done	ruby	grains	class Grains\n  def square(count)\n    count.times.inject(0) {|_| _ = _.eql?(0) ? 1 : _ * 2 }\n  end\n\n  def total\n    square(65) - 1\n  end\nend	\N	\N	0	1	2	/ruby/grains/grains.rb	2015-05-03 00:40:21	2015-05-03 00:40:21	{"/ruby/grains/grains.rb":"class Grains\\n  def square(count)\\n    count.times.inject(0) {|_| _ = _.eql?(0) ? 1 : _ * 2 }\\n  end\\n\\n  def total\\n    square(65) - 1\\n  end\\nend"}
5	11	d67f400e76a3cd4ae973b283	superseded	fsharp	robot-name	﻿namespace RobotName\r\n\r\ntype RobotName() = \r\n    let random = System.Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\r\n    let randomDigit () = (random.Next() % 10).ToString()\r\n\r\n    let buildName () =\r\n        (seq {0..1} \r\n         |> Seq.map (fun _ -> randomLetter())\r\n         |> String.concat "")\r\n        +\r\n        (seq {0..2}\r\n         |> Seq.map (fun _ -> randomDigit())\r\n         |> String.concat "")\r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	1	3	RobotName.fs	2015-04-24 01:04:59	2015-04-24 01:04:59	{"RobotName.fs":"﻿namespace RobotName\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = System.Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\\r\\n    let randomDigit () = (random.Next() % 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        (seq {0..1} \\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomLetter())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n        +\\r\\n        (seq {0..2}\\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomDigit())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
6	11	b49f1e25aff4e88a42c380e3	done	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\nopen System.Collections.Generic\r\n\r\ntype RobotName() = \r\n    static let usedNames = new List<String>()\r\n\r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let rec buildName () =\r\n        let candidate = \r\n            String.Concat [ randomLetter(); randomLetter(); \r\n                            randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n        if usedNames.Contains(candidate) then \r\n            buildName() \r\n        else \r\n            usedNames.Add(candidate)\r\n            candidate   \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	3	3	RobotName.fs	2015-04-24 11:06:23	2015-04-24 11:06:23	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\nopen System.Collections.Generic\\r\\n\\r\\ntype RobotName() = \\r\\n    static let usedNames = new List\\u003cString\\u003e()\\r\\n\\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let rec buildName () =\\r\\n        let candidate = \\r\\n            String.Concat [ randomLetter(); randomLetter(); \\r\\n                            randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n        if usedNames.Contains(candidate) then \\r\\n            buildName() \\r\\n        else \\r\\n            usedNames.Add(candidate)\\r\\n            candidate   \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
7	11	3e294c7b129d82b7f639138f	superseded	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\n\r\ntype RobotName() = \r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let buildName () =\r\n        String.Concat [ randomLetter(); randomLetter(); \r\n                        randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	2	3	RobotName.fs	2015-06-06 11:52:25	2015-06-06 11:52:25	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        String.Concat [ randomLetter(); randomLetter(); \\r\\n                        randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
8	11	ce45d51e91789e7d5d80cd2e	pending	javascript	gigasecond	(function() {\n  var Gigasecond = function(startDate) {\n    var startDate_ms = Date.parse(startDate),\n        endDate_ms = new Date(startDate_ms + 1000000000000),\n        year = endDate_ms.getFullYear(),\n        month = endDate_ms.getMonth(),\n        day = endDate_ms.getDate();\n\n    this.date = function() {\n      return new Date (year, month, day);\n    };\n  };\n\n  module.exports = Gigasecond;\n})();	\N	\N	0	1	4	gigasecond.js	2015-05-18 15:50:28	2015-05-18 15:50:28	{"gigasecond.js":"(function() {\\n  var Gigasecond = function(startDate) {\\n    var startDate_ms = Date.parse(startDate),\\n        endDate_ms = new Date(startDate_ms + 1000000000000),\\n        year = endDate_ms.getFullYear(),\\n        month = endDate_ms.getMonth(),\\n        day = endDate_ms.getDate();\\n\\n    this.date = function() {\\n      return new Date (year, month, day);\\n    };\\n  };\\n\\n  module.exports = Gigasecond;\\n})();"}
9	11	b4963e06eaef032c34d391b4	pending	ruby	saddle-points	class Matrix\r\n  def initialize(m)\r\n    @matrix = m.split("\\n").map { |x| x.scan(/\\d+/).map(&:to_i) }\r\n  end\r\n\r\n  def rows\r\n    @matrix\r\n  end\r\n\r\n  def columns\r\n    @matrix.transpose\r\n  end\r\n\r\n  def saddle_points\r\n    points = []\r\n    rows.each_with_index do |row, i|\r\n      row.each_with_index do |item, j|\r\n        if item == row.max and item == columns[j].min\r\n          points << [i, j]\r\n        end\r\n      end\r\n    end\r\n    points\r\n  end\r\nend\r	\N	\N	0	2	5	matrix.rb	2015-04-29 23:34:49	2015-04-29 23:34:49	{"matrix.rb":"class Matrix\\r\\n  def initialize(m)\\r\\n    @matrix = m.split(\\"\\\\n\\").map { |x| x.scan(/\\\\d+/).map(\\u0026:to_i) }\\r\\n  end\\r\\n\\r\\n  def rows\\r\\n    @matrix\\r\\n  end\\r\\n\\r\\n  def columns\\r\\n    @matrix.transpose\\r\\n  end\\r\\n\\r\\n  def saddle_points\\r\\n    points = []\\r\\n    rows.each_with_index do |row, i|\\r\\n      row.each_with_index do |item, j|\\r\\n        if item == row.max and item == columns[j].min\\r\\n          points \\u003c\\u003c [i, j]\\r\\n        end\\r\\n      end\\r\\n    end\\r\\n    points\\r\\n  end\\r\\nend\\r"}
10	11	186c96622f226bf35c3a281b	superseded	ruby	saddle-points	class Matrix\r\n  def initialize(m)\r\n    @matrix = m.split("\\n").map { |x| x.scan(/\\d+/).map(&:to_i) }\r\n  end\r\n\r\n  def rows\r\n    @matrix\r\n  end\r\n\r\n  def columns\r\n    @matrix.transpose\r\n  end\r\n\r\n  def saddle_points\r\n    points = []\r\n    rows.each_with_index do |row, i|\r\n      row.each_with_index do |item, j|\r\n        if item == row.max and columns[j][i] == columns[j].min\r\n          points << [i, j]\r\n        end\r\n      end\r\n    end\r\n    points\r\n  end\r\nend\r	\N	\N	0	1	5	matrix.rb	2015-05-15 01:41:20	2015-05-15 01:41:20	{"matrix.rb":"class Matrix\\r\\n  def initialize(m)\\r\\n    @matrix = m.split(\\"\\\\n\\").map { |x| x.scan(/\\\\d+/).map(\\u0026:to_i) }\\r\\n  end\\r\\n\\r\\n  def rows\\r\\n    @matrix\\r\\n  end\\r\\n\\r\\n  def columns\\r\\n    @matrix.transpose\\r\\n  end\\r\\n\\r\\n  def saddle_points\\r\\n    points = []\\r\\n    rows.each_with_index do |row, i|\\r\\n      row.each_with_index do |item, j|\\r\\n        if item == row.max and columns[j][i] == columns[j].min\\r\\n          points \\u003c\\u003c [i, j]\\r\\n        end\\r\\n      end\\r\\n    end\\r\\n    points\\r\\n  end\\r\\nend\\r"}
11	11	72b2c4ba78eddc80acfb3667	superseded	haskell	leap	module LeapYear (isLeapYear) where\n\nisLeapYear :: Int -> Bool\nisLeapYear y = isDivisibleBy 4 &&\n               ((not . isDivisibleBy) 100 || isDivisibleBy 400)\n  where\n    isDivisibleBy n = rem y n == 0	\N	\N	0	3	6	/haskell/leap/LeapYear.hs	2015-06-11 21:19:08	2015-06-11 21:19:08	{"/haskell/leap/LeapYear.hs":"module LeapYear (isLeapYear) where\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear y = isDivisibleBy 4 \\u0026\\u0026\\n               ((not . isDivisibleBy) 100 || isDivisibleBy 400)\\n  where\\n    isDivisibleBy n = rem y n == 0"}
12	11	f2ec74b93bb5648ca4c4b4fb	superseded	haskell	leap	module LeapYear (isLeapYear) where\n\nisLeapYear :: Int -> Bool\nisLeapYear y = (rem y 4 == 0) &&\n               ((rem y 100 /= 0) ||\n                (rem y 400 == 0))	\N	\N	0	1	6	/haskell/leap/LeapYear.hs	2015-07-29 12:27:28	2015-07-29 12:27:28	{"/haskell/leap/LeapYear.hs":"module LeapYear (isLeapYear) where\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear y = (rem y 4 == 0) \\u0026\\u0026\\n               ((rem y 100 /= 0) ||\\n                (rem y 400 == 0))"}
13	11	0fafa17e9b4e3ae4be2d756f	superseded	haskell	leap	module LeapYear (isLeapYear) where\n\nisDivisibleBy a b = rem a b == 0\nisNotDivisibleBy a b = rem a b /= 0\n\nisLeapYear :: Int -> Bool\nisLeapYear y = y `isDivisibleBy` 4 &&\n               (y `isNotDivisibleBy` 100 || y `isDivisibleBy` 400)	\N	\N	0	2	6	/haskell/leap/LeapYear.hs	2015-08-12 01:47:51	2015-08-12 01:47:51	{"/haskell/leap/LeapYear.hs":"module LeapYear (isLeapYear) where\\n\\nisDivisibleBy a b = rem a b == 0\\nisNotDivisibleBy a b = rem a b /= 0\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear y = y `isDivisibleBy` 4 \\u0026\\u0026\\n               (y `isNotDivisibleBy` 100 || y `isDivisibleBy` 400)"}
14	11	c75a239de28092cc31f253c6	pending	haskell	leap	module LeapYear (isLeapYear) where\n\nisLeapYear :: Int -> Bool\nisLeapYear y = isDivisibleBy 4 &&\n               (not (isDivisibleBy 100) || isDivisibleBy 400)\n  where\n    isDivisibleBy n = rem y n == 0	\N	\N	0	4	6	/haskell/leap/LeapYear.hs	2015-09-17 09:15:19	2015-09-17 09:15:19	{"/haskell/leap/LeapYear.hs":"module LeapYear (isLeapYear) where\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear y = isDivisibleBy 4 \\u0026\\u0026\\n               (not (isDivisibleBy 100) || isDivisibleBy 400)\\n  where\\n    isDivisibleBy n = rem y n == 0"}
15	11	011b80f293bc8b67ecddcfc7	superseded	haskell	accumulate	module Accumulate (accumulate) where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate f xs = accumulate' f xs []\n\naccumulate' :: (a -> b) -> [a] -> [b] -> [b]\naccumulate' _ [] acc = reverse acc\naccumulate' f (x:xs) acc = accumulate' f xs (f x:acc )	\N	\N	0	1	7	Accumulate.hs	2015-07-28 13:30:32	2015-07-28 13:30:32	{"Accumulate.hs":"module Accumulate (accumulate) where\\n\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\naccumulate f xs = accumulate' f xs []\\n\\naccumulate' :: (a -\\u003e b) -\\u003e [a] -\\u003e [b] -\\u003e [b]\\naccumulate' _ [] acc = reverse acc\\naccumulate' f (x:xs) acc = accumulate' f xs (f x:acc )"}
16	11	d5dd8169dd03c76c3f5fd7f6	done	haskell	accumulate	module Accumulate (accumulate) where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate _ [] = []\naccumulate f (x:xs) = f x : accumulate f xs	\N	\N	0	2	7	Accumulate.hs	2015-08-08 06:34:08	2015-08-08 06:34:08	{"Accumulate.hs":"module Accumulate (accumulate) where\\n\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\naccumulate _ [] = []\\naccumulate f (x:xs) = f x : accumulate f xs"}
17	12	9483e62d2a993516fa54fb6d	done	ruby	grains	class Grains\n  def square(count)\n    count.times.inject(0) {|_| _ = _.eql?(0) ? 1 : _ * 2 }\n  end\n\n  def total\n    square(65) - 1\n  end\nend	\N	\N	0	1	9	/ruby/grains/grains.rb	2015-08-09 01:53:57	2015-08-09 01:53:57	{"/ruby/grains/grains.rb":"class Grains\\n  def square(count)\\n    count.times.inject(0) {|_| _ = _.eql?(0) ? 1 : _ * 2 }\\n  end\\n\\n  def total\\n    square(65) - 1\\n  end\\nend"}
18	12	c515c5e40e6331b292b5de17	pending	coffeescript	bob	unless String::trim then String::trim = -> @replace /^\\s+|\\s+$/g, ""\n\nclass Bob\n\they:\t(input) ->\n\t\t# check for all whitespace\n\t\tif "" is input.trim()\n\t\t\treturn "Fine. Be that way!"\n\t\t# check for caps\n\t\tif input is input.toUpperCase()\n\t\t\treturn "Woah, chill out!"\n\t\t# check for ?\n\t\tif input[-1..] is "?"\n\t\t\treturn "Sure."\n\t\t# default case\n\t\treturn "Whatever."\n\t\t\nmodule.exports = Bob	\N	\N	0	1	10	bob.coffee	2015-08-29 12:57:12	2015-08-29 12:57:12	{"bob.coffee":"unless String::trim then String::trim = -\\u003e @replace /^\\\\s+|\\\\s+$/g, \\"\\"\\n\\nclass Bob\\n\\they:\\t(input) -\\u003e\\n\\t\\t# check for all whitespace\\n\\t\\tif \\"\\" is input.trim()\\n\\t\\t\\treturn \\"Fine. Be that way!\\"\\n\\t\\t# check for caps\\n\\t\\tif input is input.toUpperCase()\\n\\t\\t\\treturn \\"Woah, chill out!\\"\\n\\t\\t# check for ?\\n\\t\\tif input[-1..] is \\"?\\"\\n\\t\\t\\treturn \\"Sure.\\"\\n\\t\\t# default case\\n\\t\\treturn \\"Whatever.\\"\\n\\t\\t\\nmodule.exports = Bob"}
19	12	ba9f5ad5f7b36d845e631a60	done	javascript	sieve	var Sieve = function(num) {\n  this.num = num;\n  this.primes = [];\n\n  var isPrime = function(n) {\n    var mid = Math.floor( n / 2 );\n\n    for ( var i = 2; i <= mid; i++ ) {\n      if ( n % i === 0 ) {\n        return false\n      }\n    }\n    return true;\n  }\n\n  for ( var i = 2; i <= this.num; i++ ) {\n    if ( isPrime(i) ) {\n      this.primes.push(i);\n    }\n  }\n};	\N	\N	0	1	11	sieve_test.js	2015-07-24 17:34:46	2015-07-24 17:34:46	{"sieve_test.js":"var Sieve = function(num) {\\n  this.num = num;\\n  this.primes = [];\\n\\n  var isPrime = function(n) {\\n    var mid = Math.floor( n / 2 );\\n\\n    for ( var i = 2; i \\u003c= mid; i++ ) {\\n      if ( n % i === 0 ) {\\n        return false\\n      }\\n    }\\n    return true;\\n  }\\n\\n  for ( var i = 2; i \\u003c= this.num; i++ ) {\\n    if ( isPrime(i) ) {\\n      this.primes.push(i);\\n    }\\n  }\\n};"}
20	12	ec86a83f8c5666dfbb8e8844	pending	ruby	bob	class Bob\n  def hey(phrase)\n    @phrase = phrase\n    if phrase_is_empty?\n      'Fine. Be that way!'\n    elsif phrase_is_yelling?\n      'Woah, chill out!'\n    elsif phrase_is_questioning?\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\n\n  private\n  def phrase_is_empty?\n    @phrase.strip.empty?\n  end\n\n  def phrase_is_yelling?\n    @phrase == @phrase.upcase && @phrase.scan(/[a-zA-Z]/).any?\n  end\n\n  def phrase_is_questioning?\n    @phrase[-1,1] == '?'\n  end\nend	\N	\N	0	2	12	bob.rb	2015-07-30 10:00:00	2015-07-30 10:00:00	{"bob.rb":"class Bob\\n  def hey(phrase)\\n    @phrase = phrase\\n    if phrase_is_empty?\\n      'Fine. Be that way!'\\n    elsif phrase_is_yelling?\\n      'Woah, chill out!'\\n    elsif phrase_is_questioning?\\n      'Sure.'\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\n\\n  private\\n  def phrase_is_empty?\\n    @phrase.strip.empty?\\n  end\\n\\n  def phrase_is_yelling?\\n    @phrase == @phrase.upcase \\u0026\\u0026 @phrase.scan(/[a-zA-Z]/).any?\\n  end\\n\\n  def phrase_is_questioning?\\n    @phrase[-1,1] == '?'\\n  end\\nend"}
21	12	8773efa56042f3047366db82	superseded	ruby	bob	class Bob\n  def hey(phrase)\n    if phrase.strip.empty?\n      'Fine. Be that way!'\n    elsif phrase == phrase.upcase && phrase.scan(/[a-zA-Z]/).any?\n      'Woah, chill out!'\n    elsif phrase[-1,1] == '?'\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	1	12	bob.rb	2015-08-14 09:38:02	2015-08-14 09:38:02	{"bob.rb":"class Bob\\n  def hey(phrase)\\n    if phrase.strip.empty?\\n      'Fine. Be that way!'\\n    elsif phrase == phrase.upcase \\u0026\\u0026 phrase.scan(/[a-zA-Z]/).any?\\n      'Woah, chill out!'\\n    elsif phrase[-1,1] == '?'\\n      'Sure.'\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\nend"}
22	12	17029d4e4af4e409edf3020b	pending	ruby	twelve-days	class TwelveDaysSong\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\n\n  VERSES = [\n    ["twelve Drummers Drumming, ", 12],\n    ["eleven Pipers Piping, ", 11],\n    ["ten Lords-a-Leaping, ", 10],\n    ["nine Ladies Dancing, ", 9],    \n    ["eight Maids-a-Milking, ", 8],      \n    ["seven Swans-a-Swimming, ", 7],\n    ["six Geese-a-Laying, ", 6],\n    ["five Gold Rings, ", 5],\n    ["four Calling Birds, ", 4], \n    ["three French Hens, ", 3],\n    ["two Turtle Doves, and ", 2],\n  ]\n\n  def verse(num)\n    s = "On the #{DAYS[num-1]} day of Christmas my true love gave to me, "\n    VERSES.each do |phrase, verse_num|\n      s << phrase if num >= verse_num\n    end\n    s << "a Partridge in a Pear Tree.\\n"\n    s\n  end\n\n  def verses(start, stop)\n    (start..stop).map { |num| verse(num) }.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses(1, 12)\n  end\nend	\N	\N	0	1	14	twelve_days.rb	2015-07-30 18:00:54	2015-07-30 18:00:54	{"twelve_days.rb":"class TwelveDaysSong\\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\\n\\n  VERSES = [\\n    [\\"twelve Drummers Drumming, \\", 12],\\n    [\\"eleven Pipers Piping, \\", 11],\\n    [\\"ten Lords-a-Leaping, \\", 10],\\n    [\\"nine Ladies Dancing, \\", 9],    \\n    [\\"eight Maids-a-Milking, \\", 8],      \\n    [\\"seven Swans-a-Swimming, \\", 7],\\n    [\\"six Geese-a-Laying, \\", 6],\\n    [\\"five Gold Rings, \\", 5],\\n    [\\"four Calling Birds, \\", 4], \\n    [\\"three French Hens, \\", 3],\\n    [\\"two Turtle Doves, and \\", 2],\\n  ]\\n\\n  def verse(num)\\n    s = \\"On the #{DAYS[num-1]} day of Christmas my true love gave to me, \\"\\n    VERSES.each do |phrase, verse_num|\\n      s \\u003c\\u003c phrase if num \\u003e= verse_num\\n    end\\n    s \\u003c\\u003c \\"a Partridge in a Pear Tree.\\\\n\\"\\n    s\\n  end\\n\\n  def verses(start, stop)\\n    (start..stop).map { |num| verse(num) }.join(\\"\\\\n\\") + \\"\\\\n\\"\\n  end\\n\\n  def sing\\n    verses(1, 12)\\n  end\\nend"}
23	15	1cfa8882a2ddd0e209f11f98	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	15	/python/wordy/wordy.py	2015-03-21 05:01:20	2015-03-21 05:01:20	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
30	22	121dab04ef6a69a5d5477c5b	pending	lua	hamming	local Hamming = {}\n\nfunction Hamming.compute(str1, str2)\n  local distance = 0\n\n  for i = 1, math.min(#str1, #str2) do\n    if str1:sub(i,i) ~= str2:sub(i,i) then\n      distance = distance + 1\n    end\n  end\n\n  return distance\nend\n\nreturn Hamming	\N	\N	0	1	21	hamming.lua	2015-02-24 21:46:03	2015-02-24 21:46:03	{"hamming.lua":"local Hamming = {}\\n\\nfunction Hamming.compute(str1, str2)\\n  local distance = 0\\n\\n  for i = 1, math.min(#str1, #str2) do\\n    if str1:sub(i,i) ~= str2:sub(i,i) then\\n      distance = distance + 1\\n    end\\n  end\\n\\n  return distance\\nend\\n\\nreturn Hamming"}
24	15	6add70ec62f3a6ecff224515	done	javascript	anagram	var anagram = function(word) {\n  var obj = new Object();\n\n  obj.matches = function(words) {\n    if (arguments.length > 1) {\n      words = Array.prototype.slice.call(arguments);\n    }\n\n    return words.filter(function(match) {\n      return isAnagram(word, match) && !isIdentical(word, match);\n    });\n  };\n\n  return obj;\n};\n\nfunction isIdentical(a, b) {\n  return a.toLowerCase() === b.toLowerCase();\n}\n\nfunction isAnagram(a, b) {\n  return sort(a) === sort(b);\n}\n\nfunction sort(word) {\n  return word.toLowerCase().split('').sort().join('');\n}	\N	\N	0	1	16	anagram.js	2015-08-11 00:41:34	2015-08-11 00:41:34	{"anagram.js":"var anagram = function(word) {\\n  var obj = new Object();\\n\\n  obj.matches = function(words) {\\n    if (arguments.length \\u003e 1) {\\n      words = Array.prototype.slice.call(arguments);\\n    }\\n\\n    return words.filter(function(match) {\\n      return isAnagram(word, match) \\u0026\\u0026 !isIdentical(word, match);\\n    });\\n  };\\n\\n  return obj;\\n};\\n\\nfunction isIdentical(a, b) {\\n  return a.toLowerCase() === b.toLowerCase();\\n}\\n\\nfunction isAnagram(a, b) {\\n  return sort(a) === sort(b);\\n}\\n\\nfunction sort(word) {\\n  return word.toLowerCase().split('').sort().join('');\\n}"}
25	15	6ca18ab9b5ae1a0fa2b88a0e	pending	ruby	sieve	class Sieve\n  attr_reader :limit, :candidates, :composites\n\n  def initialize(limit)\n    @limit = limit\n    @candidates = (2..limit).to_a\n    @composites = {}\n  end\n\n  def primes\n    candidates.each_with_object([]) do |candidate, primes|\n      next if composites.key?(candidate)\n      primes << candidate\n      ((candidate * 2)..limit).step(candidate) do |multiple|\n        composites[multiple] = true\n      end\n    end\n  end\nend	\N	\N	0	1	17	/ruby/sieve/sieve.rb	2015-06-01 00:54:56	2015-06-01 00:54:56	{"/ruby/sieve/sieve.rb":"class Sieve\\n  attr_reader :limit, :candidates, :composites\\n\\n  def initialize(limit)\\n    @limit = limit\\n    @candidates = (2..limit).to_a\\n    @composites = {}\\n  end\\n\\n  def primes\\n    candidates.each_with_object([]) do |candidate, primes|\\n      next if composites.key?(candidate)\\n      primes \\u003c\\u003c candidate\\n      ((candidate * 2)..limit).step(candidate) do |multiple|\\n        composites[multiple] = true\\n      end\\n    end\\n  end\\nend"}
26	22	58b8b73fdc1f1e0767167ac2	pending	python	grade-school	from collections import defaultdict\nclass School():\n    def __init__(self,what):\n        self.db = defaultdict(set)\n        self.school_name = what\n\n    def add(self,what,grade):\n        self.db[grade].add(what)\n        \n    def grade(self,what):\n        return self.db[what]\n\n    def sort(self):\n        #for testing purposes \n        new_dict = {}\n        for k,v in self.db.items():\n            new_dict[k] = tuple(v)\n        return new_dict	\N	\N	0	1	18	school.py	2015-03-25 05:24:17	2015-03-25 05:24:17	{"school.py":"from collections import defaultdict\\nclass School():\\n    def __init__(self,what):\\n        self.db = defaultdict(set)\\n        self.school_name = what\\n\\n    def add(self,what,grade):\\n        self.db[grade].add(what)\\n        \\n    def grade(self,what):\\n        return self.db[what]\\n\\n    def sort(self):\\n        #for testing purposes \\n        new_dict = {}\\n        for k,v in self.db.items():\\n            new_dict[k] = tuple(v)\\n        return new_dict"}
27	22	bd924d43645d7ed2a5ecd48e	done	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nmy @words = 'a'..'z';\n\nsub new{\n\tmy ($class, $key) = @_;\n\tdie "ArgumentError: $key" if defined $key and ($key =~ /[^a-z]/ or not length $key);\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	2	19	Cipher.pm	2015-03-08 19:19:58	2015-03-08 19:19:58	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nmy @words = 'a'..'z';\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\tdie \\"ArgumentError: $key\\" if defined $key and ($key =~ /[^a-z]/ or not length $key);\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
28	22	a5f3069059e122a37b1666be	superseded	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nsub new{\n\tmy ($class, $key) = @_;\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	1	19	Cipher.pm	2015-08-13 01:22:12	2015-08-13 01:22:12	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
29	22	ec19ffa77eeccb6b55ec926f	pending	javascript	gigasecond	(function() {\n  var Gigasecond = function(startDate) {\n    var startDate_ms = Date.parse(startDate),\n        endDate_ms = new Date(startDate_ms + 1000000000000),\n        year = endDate_ms.getFullYear(),\n        month = endDate_ms.getMonth(),\n        day = endDate_ms.getDate();\n\n    this.date = function() {\n      return new Date (year, month, day);\n    };\n  };\n\n  module.exports = Gigasecond;\n})();	\N	\N	0	1	20	gigasecond.js	2015-03-07 15:31:56	2015-03-07 15:31:56	{"gigasecond.js":"(function() {\\n  var Gigasecond = function(startDate) {\\n    var startDate_ms = Date.parse(startDate),\\n        endDate_ms = new Date(startDate_ms + 1000000000000),\\n        year = endDate_ms.getFullYear(),\\n        month = endDate_ms.getMonth(),\\n        day = endDate_ms.getDate();\\n\\n    this.date = function() {\\n      return new Date (year, month, day);\\n    };\\n  };\\n\\n  module.exports = Gigasecond;\\n})();"}
31	22	ce1f368c3812bd69f2d5caca	pending	javascript	hamming	var Hamming = {\r\n  compute: function(Strand1, Strand2) {\r\n    var NumberDifferent = 0;\r\n//Do a length check first because everything else relies on that. \r\nif (Strand1.length != Strand2.length){\r\n  throw 'DNA strands must be of equal length.'\r\n};//end if\r\nfor (var i = 0;i<Strand1.length;i++){//does a loop for each character input. \r\nif (Strand1[i] != Strand2[i]){ //if the chars aren't the same add to the differnce counter. \r\n\tNumberDifferent ++\r\n};//end if\r\n};//end for\r\n return NumberDifferent; //return the # difference\r\n   }//end compute\r\n};//end hamming\r\n\r\nmodule.exports = Hamming;	\N	\N	0	1	22	\\javascript\\hamming\\hamming.js	2015-05-25 04:45:11	2015-05-25 04:45:11	{"\\\\javascript\\\\hamming\\\\hamming.js":"var Hamming = {\\r\\n  compute: function(Strand1, Strand2) {\\r\\n    var NumberDifferent = 0;\\r\\n//Do a length check first because everything else relies on that. \\r\\nif (Strand1.length != Strand2.length){\\r\\n  throw 'DNA strands must be of equal length.'\\r\\n};//end if\\r\\nfor (var i = 0;i\\u003cStrand1.length;i++){//does a loop for each character input. \\r\\nif (Strand1[i] != Strand2[i]){ //if the chars aren't the same add to the differnce counter. \\r\\n\\tNumberDifferent ++\\r\\n};//end if\\r\\n};//end for\\r\\n return NumberDifferent; //return the # difference\\r\\n   }//end compute\\r\\n};//end hamming\\r\\n\\r\\nmodule.exports = Hamming;"}
32	22	f99d00d7985be51dd723dd9a	pending	python	bob	#\n# Skeleton file for the Python "Bob" exercise.\n#\ndef hey(what):\n\t#I checked for upercase first since it had the most cases.\n\tif what.isupper():\n\t\tsay = "Whoa, chill out!"\n\t#I originally check for a ? anywhere in the string, but I guess that doesn't count, seems ambiguous.\n\telif what.endswith("?"):\n\t\tsay = "Sure."\n\t#I checked this last since it has the most complexity. ispace checks for whitespace characters, while "" takes in strings that are empty, but declared.\n\telif what.isspace() or what == "":\n\t\tsay = "Fine. Be that way!"\n\t#Catchall\n\telse:\n\t\tsay = "Whatever."\n\treturn say	\N	\N	0	1	23	bob.py	2015-07-26 05:31:51	2015-07-26 05:31:51	{"bob.py":"#\\n# Skeleton file for the Python \\"Bob\\" exercise.\\n#\\ndef hey(what):\\n\\t#I checked for upercase first since it had the most cases.\\n\\tif what.isupper():\\n\\t\\tsay = \\"Whoa, chill out!\\"\\n\\t#I originally check for a ? anywhere in the string, but I guess that doesn't count, seems ambiguous.\\n\\telif what.endswith(\\"?\\"):\\n\\t\\tsay = \\"Sure.\\"\\n\\t#I checked this last since it has the most complexity. ispace checks for whitespace characters, while \\"\\" takes in strings that are empty, but declared.\\n\\telif what.isspace() or what == \\"\\":\\n\\t\\tsay = \\"Fine. Be that way!\\"\\n\\t#Catchall\\n\\telse:\\n\\t\\tsay = \\"Whatever.\\"\\n\\treturn say"}
33	22	c14354a60aa89a1af6e6784c	done	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	3	24	year.py	2015-01-31 02:40:01	2015-01-31 02:40:01	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
34	22	b9e79eeaa2085d0c1bacd400	superseded	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) \nor divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	2	24	year.py	2015-02-04 23:59:31	2015-02-04 23:59:31	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) \\nor divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
35	22	099d7cbcf2677023d5b0e2ea	superseded	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	1	24	year.py	2015-05-13 08:57:51	2015-05-13 08:57:51	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
36	22	a2442dbe7e5a9557c6ba3a0c	pending	erlang	strain	-module(strain).\n-export([keep/2, discard/2]).\n\nkeep(Predicate, Collection) when is_function(Predicate) ->\n    keep(Predicate, Collection, []).\n\ndiscard(Predicate, Collection) when is_function(Predicate) ->\n    discard(Predicate, Collection, []).\n\nkeep(_Predicate, [], Acc) -> lists:reverse(Acc);\nkeep(Predicate, [H|T], Acc) ->\n    case Predicate(H) of\n        true -> keep(Predicate, T, [H|Acc]);\n        false -> keep(Predicate, T, Acc)\n    end.\n\ndiscard(_Predicate, [], Acc) -> lists:reverse(Acc);\ndiscard(Predicate, [H|T], Acc) ->\n    case Predicate(H) of\n        true -> discard(Predicate, T, Acc);\n        false -> discard(Predicate, T, [H|Acc])\n    end.	\N	\N	0	1	25	strain.erl	2015-02-21 21:05:29	2015-02-21 21:05:29	{"strain.erl":"-module(strain).\\n-export([keep/2, discard/2]).\\n\\nkeep(Predicate, Collection) when is_function(Predicate) -\\u003e\\n    keep(Predicate, Collection, []).\\n\\ndiscard(Predicate, Collection) when is_function(Predicate) -\\u003e\\n    discard(Predicate, Collection, []).\\n\\nkeep(_Predicate, [], Acc) -\\u003e lists:reverse(Acc);\\nkeep(Predicate, [H|T], Acc) -\\u003e\\n    case Predicate(H) of\\n        true -\\u003e keep(Predicate, T, [H|Acc]);\\n        false -\\u003e keep(Predicate, T, Acc)\\n    end.\\n\\ndiscard(_Predicate, [], Acc) -\\u003e lists:reverse(Acc);\\ndiscard(Predicate, [H|T], Acc) -\\u003e\\n    case Predicate(H) of\\n        true -\\u003e discard(Predicate, T, Acc);\\n        false -\\u003e discard(Predicate, T, [H|Acc])\\n    end."}
37	22	f81a40d41b1138cdacf8b04e	pending	haskell	strain	module Strain (keep, discard) where\n\nkeep :: (a -> Bool) -> [a] -> [a]\nkeep _ [] = []\nkeep predicate (x:xs)\n    | predicate x = x : keep predicate xs\n    | otherwise   = keep predicate xs\n\ndiscard :: (a -> Bool) -> [a] -> [a]\ndiscard _ [] = []\ndiscard predicate (x:xs)\n    | predicate x = discard predicate xs\n    | otherwise   = x : discard predicate xs	\N	\N	0	1	26	Strain.hs	2015-04-07 22:03:01	2015-04-07 22:03:01	{"Strain.hs":"module Strain (keep, discard) where\\n\\nkeep :: (a -\\u003e Bool) -\\u003e [a] -\\u003e [a]\\nkeep _ [] = []\\nkeep predicate (x:xs)\\n    | predicate x = x : keep predicate xs\\n    | otherwise   = keep predicate xs\\n\\ndiscard :: (a -\\u003e Bool) -\\u003e [a] -\\u003e [a]\\ndiscard _ [] = []\\ndiscard predicate (x:xs)\\n    | predicate x = discard predicate xs\\n    | otherwise   = x : discard predicate xs"}
38	22	8a6ead2bd9d3ff54a493a382	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	27	/python/wordy/wordy.py	2015-02-05 23:34:01	2015-02-05 23:34:01	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
39	22	5c8ddd67942c23456e4fbd21	superseded	haskell	accumulate	module Accumulate (accumulate) where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate f xs = accumulate' f xs []\n\naccumulate' :: (a -> b) -> [a] -> [b] -> [b]\naccumulate' _ [] acc = reverse acc\naccumulate' f (x:xs) acc = accumulate' f xs (f x:acc )	\N	\N	0	1	28	Accumulate.hs	2015-05-25 18:45:43	2015-05-25 18:45:43	{"Accumulate.hs":"module Accumulate (accumulate) where\\n\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\naccumulate f xs = accumulate' f xs []\\n\\naccumulate' :: (a -\\u003e b) -\\u003e [a] -\\u003e [b] -\\u003e [b]\\naccumulate' _ [] acc = reverse acc\\naccumulate' f (x:xs) acc = accumulate' f xs (f x:acc )"}
40	22	218f08b469fbf5f23cf79c04	done	haskell	accumulate	module Accumulate (accumulate) where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate _ [] = []\naccumulate f (x:xs) = f x : accumulate f xs	\N	\N	0	2	28	Accumulate.hs	2015-07-31 01:23:23	2015-07-31 01:23:23	{"Accumulate.hs":"module Accumulate (accumulate) where\\n\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\naccumulate _ [] = []\\naccumulate f (x:xs) = f x : accumulate f xs"}
41	22	611fb80529b90d2c94400ad2	done	ruby	prime-factors	class PrimeFactors\n  def self.for(n)\n    (2..Math.sqrt(n)).each_with_object([]) { |x, factors|\n      while n % x == 0\n        n /= x\n        factors << x\n      end\n    }.tap { |factors| factors << n unless n == 1 }\n  end\nend	\N	\N	0	1	30	prime_factors.rb	2015-04-28 13:57:43	2015-04-28 13:57:43	{"prime_factors.rb":"class PrimeFactors\\n  def self.for(n)\\n    (2..Math.sqrt(n)).each_with_object([]) { |x, factors|\\n      while n % x == 0\\n        n /= x\\n        factors \\u003c\\u003c x\\n      end\\n    }.tap { |factors| factors \\u003c\\u003c n unless n == 1 }\\n  end\\nend"}
42	22	5a7154f068aa5c28974f731f	pending	coffeescript	bob	unless String::trim then String::trim = -> @replace /^\\s+|\\s+$/g, ""\n\nclass Bob\n\they:\t(input) ->\n\t\t# check for all whitespace\n\t\tif "" is input.trim()\n\t\t\treturn "Fine. Be that way!"\n\t\t# check for caps\n\t\tif input is input.toUpperCase()\n\t\t\treturn "Woah, chill out!"\n\t\t# check for ?\n\t\tif input[-1..] is "?"\n\t\t\treturn "Sure."\n\t\t# default case\n\t\treturn "Whatever."\n\t\t\nmodule.exports = Bob	\N	\N	0	1	31	bob.coffee	2015-06-18 07:59:44	2015-06-18 07:59:44	{"bob.coffee":"unless String::trim then String::trim = -\\u003e @replace /^\\\\s+|\\\\s+$/g, \\"\\"\\n\\nclass Bob\\n\\they:\\t(input) -\\u003e\\n\\t\\t# check for all whitespace\\n\\t\\tif \\"\\" is input.trim()\\n\\t\\t\\treturn \\"Fine. Be that way!\\"\\n\\t\\t# check for caps\\n\\t\\tif input is input.toUpperCase()\\n\\t\\t\\treturn \\"Woah, chill out!\\"\\n\\t\\t# check for ?\\n\\t\\tif input[-1..] is \\"?\\"\\n\\t\\t\\treturn \\"Sure.\\"\\n\\t\\t# default case\\n\\t\\treturn \\"Whatever.\\"\\n\\t\\t\\nmodule.exports = Bob"}
43	22	4865b28a2ce93dadce136ce3	pending	clojure	robot-name	(ns robot-name)\n\n(def characters "ABCDEFGHIJKLMNOPQRSTUVWXYZ")\n\n(def numbers "1234567890")\n\n(defn- rand-n-source [n source]\n  (->> (fn [] (rand-nth source))\n       (repeatedly)\n       (take n)\n       (apply str)))\n\n(defn- generate-id [] \n  (str (rand-n-source 2 characters)\n       (rand-n-source 4 numbers)))\n\n(defn robot []\n  (atom {:name ""}))\n\n(defn robot-name [robot]\n  (if (empty? @robot)\n    (reset! robot (generate-id))\n    @robot))\n\n(defn reset-name [robot]\n  (reset! robot ""))	\N	\N	0	1	32	/clojure/robot-name/robot_name.clj	2015-02-03 10:39:59	2015-02-03 10:39:59	{"/clojure/robot-name/robot_name.clj":"(ns robot-name)\\n\\n(def characters \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\")\\n\\n(def numbers \\"1234567890\\")\\n\\n(defn- rand-n-source [n source]\\n  (-\\u003e\\u003e (fn [] (rand-nth source))\\n       (repeatedly)\\n       (take n)\\n       (apply str)))\\n\\n(defn- generate-id [] \\n  (str (rand-n-source 2 characters)\\n       (rand-n-source 4 numbers)))\\n\\n(defn robot []\\n  (atom {:name \\"\\"}))\\n\\n(defn robot-name [robot]\\n  (if (empty? @robot)\\n    (reset! robot (generate-id))\\n    @robot))\\n\\n(defn reset-name [robot]\\n  (reset! robot \\"\\"))"}
44	22	89146f1d695f32f66181f26d	pending	ruby	raindrops	class Raindrops\r\n\r\n  TRANSLATE = {\r\n  \t3 => 'Pling',\r\n    5 => 'Plang',\r\n    7 => 'Plong'\r\n  }\r\n\r\n  def self.convert(number)\r\n    message = ''\r\n\r\n    TRANSLATE.each do |(numb, phrase)|\r\n      message << phrase if number % numb == 0\r\n    end\r\n\r\n    if message.empty? then number.to_s else message end\r\n    \r\n  end\r\nend	\N	\N	0	1	33	raindrops.rb	2015-03-24 00:45:54	2015-03-24 00:45:54	{"raindrops.rb":"class Raindrops\\r\\n\\r\\n  TRANSLATE = {\\r\\n  \\t3 =\\u003e 'Pling',\\r\\n    5 =\\u003e 'Plang',\\r\\n    7 =\\u003e 'Plong'\\r\\n  }\\r\\n\\r\\n  def self.convert(number)\\r\\n    message = ''\\r\\n\\r\\n    TRANSLATE.each do |(numb, phrase)|\\r\\n      message \\u003c\\u003c phrase if number % numb == 0\\r\\n    end\\r\\n\\r\\n    if message.empty? then number.to_s else message end\\r\\n    \\r\\n  end\\r\\nend"}
45	22	fb1b176d1d7df5b14e7f0232	done	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(candidates)\n    candidates.find_all { |candidate| anagram?(candidate) }\n  end\n\n  def anagram?(candidate)\n    candidate = Anagram.new(candidate.to_s)\n    same_characters?(candidate) && different_word?(candidate)\n  end\n\n  def characters\n    @characters ||= word.chars.sort.join\n  end\n\n  private\n\n  def different_word?(other)\n    word != other.word\n  end\n\n  def same_characters?(other)\n    characters == other.characters\n  end\nend	\N	\N	0	1	34	anagram.rb	2015-04-29 05:24:42	2015-04-29 05:24:42	{"anagram.rb":"class Anagram\\n  attr_reader :word\\n\\n  def initialize(word)\\n    @word = word.downcase\\n  end\\n\\n  def match(candidates)\\n    candidates.find_all { |candidate| anagram?(candidate) }\\n  end\\n\\n  def anagram?(candidate)\\n    candidate = Anagram.new(candidate.to_s)\\n    same_characters?(candidate) \\u0026\\u0026 different_word?(candidate)\\n  end\\n\\n  def characters\\n    @characters ||= word.chars.sort.join\\n  end\\n\\n  private\\n\\n  def different_word?(other)\\n    word != other.word\\n  end\\n\\n  def same_characters?(other)\\n    characters == other.characters\\n  end\\nend"}
46	22	6cc37e80903304bca5e07df6	pending	ruby	bob	class Bob\n  def hey(phrase)\n    @phrase = phrase\n    if phrase_is_empty?\n      'Fine. Be that way!'\n    elsif phrase_is_yelling?\n      'Woah, chill out!'\n    elsif phrase_is_questioning?\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\n\n  private\n  def phrase_is_empty?\n    @phrase.strip.empty?\n  end\n\n  def phrase_is_yelling?\n    @phrase == @phrase.upcase && @phrase.scan(/[a-zA-Z]/).any?\n  end\n\n  def phrase_is_questioning?\n    @phrase[-1,1] == '?'\n  end\nend	\N	\N	0	2	35	bob.rb	2015-05-21 09:41:15	2015-05-21 09:41:15	{"bob.rb":"class Bob\\n  def hey(phrase)\\n    @phrase = phrase\\n    if phrase_is_empty?\\n      'Fine. Be that way!'\\n    elsif phrase_is_yelling?\\n      'Woah, chill out!'\\n    elsif phrase_is_questioning?\\n      'Sure.'\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\n\\n  private\\n  def phrase_is_empty?\\n    @phrase.strip.empty?\\n  end\\n\\n  def phrase_is_yelling?\\n    @phrase == @phrase.upcase \\u0026\\u0026 @phrase.scan(/[a-zA-Z]/).any?\\n  end\\n\\n  def phrase_is_questioning?\\n    @phrase[-1,1] == '?'\\n  end\\nend"}
47	22	6dcf7a726503d2176788141d	superseded	ruby	bob	class Bob\n  def hey(phrase)\n    if phrase.strip.empty?\n      'Fine. Be that way!'\n    elsif phrase == phrase.upcase && phrase.scan(/[a-zA-Z]/).any?\n      'Woah, chill out!'\n    elsif phrase[-1,1] == '?'\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	1	35	bob.rb	2015-06-11 01:23:19	2015-06-11 01:23:19	{"bob.rb":"class Bob\\n  def hey(phrase)\\n    if phrase.strip.empty?\\n      'Fine. Be that way!'\\n    elsif phrase == phrase.upcase \\u0026\\u0026 phrase.scan(/[a-zA-Z]/).any?\\n      'Woah, chill out!'\\n    elsif phrase[-1,1] == '?'\\n      'Sure.'\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\nend"}
48	22	6a3e9f4721123b20f7791bf6	done	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\nopen System.Collections.Generic\r\n\r\ntype RobotName() = \r\n    static let usedNames = new List<String>()\r\n\r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let rec buildName () =\r\n        let candidate = \r\n            String.Concat [ randomLetter(); randomLetter(); \r\n                            randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n        if usedNames.Contains(candidate) then \r\n            buildName() \r\n        else \r\n            usedNames.Add(candidate)\r\n            candidate   \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	3	36	RobotName.fs	2015-01-31 20:41:55	2015-01-31 20:41:55	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\nopen System.Collections.Generic\\r\\n\\r\\ntype RobotName() = \\r\\n    static let usedNames = new List\\u003cString\\u003e()\\r\\n\\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let rec buildName () =\\r\\n        let candidate = \\r\\n            String.Concat [ randomLetter(); randomLetter(); \\r\\n                            randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n        if usedNames.Contains(candidate) then \\r\\n            buildName() \\r\\n        else \\r\\n            usedNames.Add(candidate)\\r\\n            candidate   \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
49	22	a07d8be4abdf18d0c7e48d48	superseded	fsharp	robot-name	﻿namespace RobotName\r\n\r\ntype RobotName() = \r\n    let random = System.Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\r\n    let randomDigit () = (random.Next() % 10).ToString()\r\n\r\n    let buildName () =\r\n        (seq {0..1} \r\n         |> Seq.map (fun _ -> randomLetter())\r\n         |> String.concat "")\r\n        +\r\n        (seq {0..2}\r\n         |> Seq.map (fun _ -> randomDigit())\r\n         |> String.concat "")\r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	1	36	RobotName.fs	2015-05-07 08:18:36	2015-05-07 08:18:36	{"RobotName.fs":"﻿namespace RobotName\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = System.Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\\r\\n    let randomDigit () = (random.Next() % 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        (seq {0..1} \\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomLetter())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n        +\\r\\n        (seq {0..2}\\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomDigit())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
50	22	c10d02db5c443ef7227287fd	superseded	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\n\r\ntype RobotName() = \r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let buildName () =\r\n        String.Concat [ randomLetter(); randomLetter(); \r\n                        randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	2	36	RobotName.fs	2015-08-11 07:08:50	2015-08-11 07:08:50	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        String.Concat [ randomLetter(); randomLetter(); \\r\\n                        randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
51	22	a51038118bbad2d5e66cee20	pending	haskell	leap	module LeapYear (isLeapYear, isLeapYear2) where\n\nisLeapYear :: Int -> Bool\nisLeapYear year\n    | year `mod` 100 == 0 && year `mod` 400 /= 0  = False\n    | year `mod` 4 == 0  =  True\n    | otherwise = False\n\nisLeapYear2 :: Int -> Bool\nisLeapYear2 year\n    | year `mod` 4 /= 0  = False\n    | year `mod` 100 == 0 && year `mod` 400 /= 0 = False\n    | otherwise = True	\N	\N	0	1	37	haskell/leap/leapyear.hs	2015-05-20 00:18:41	2015-05-20 00:18:41	{"haskell/leap/leapyear.hs":"module LeapYear (isLeapYear, isLeapYear2) where\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear year\\n    | year `mod` 100 == 0 \\u0026\\u0026 year `mod` 400 /= 0  = False\\n    | year `mod` 4 == 0  =  True\\n    | otherwise = False\\n\\nisLeapYear2 :: Int -\\u003e Bool\\nisLeapYear2 year\\n    | year `mod` 4 /= 0  = False\\n    | year `mod` 100 == 0 \\u0026\\u0026 year `mod` 400 /= 0 = False\\n    | otherwise = True"}
52	22	305c3acb8a9d4f7a6f7acca6	done	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule Octal( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readBase 8\n\nshowOct :: Integral a => a -> String\nshowOct = showBase 8\n\nreadBase :: Integral a => a -> String -> a\nreadBase b s = readBase' 0 s\n  where \n    readBase' acc "" = acc\n    readBase' acc (d : ds) \n        | acc `seq` False = undefined \n        | not (valid b d) = 0\n        | otherwise = readBase' (b*acc + fromChar d) ds\n\nvalid :: Integral b => b -> Char -> Bool\nvalid b c | b <= 10   = c >= '0' && c < bd\n          | otherwise = (c >= '0' && c <= '9') || \n                        (c >= 'A' && c < bdu) ||\n                        (c >= 'a' && c < bd)\n  where \n    bd = fromDigit b\n    bdu = fromDigitC b\n\nfromChar :: Integral a => Char -> a\nfromChar c | c <= '9' = fromBase '0' c\n           | c <= 'Z' = fromBase 'A' c\n           | otherwise = fromBase 'a' c\n  where \n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \n\nshowBase :: Integral a => a -> a -> String\nshowBase b n | b < 1 || n < 0 = ""\n             | n == 0 = "0"\n             | otherwise = digitsP "" n\n  where\n    digitsP ds k | dc `seq` ds `seq` False = undefined\n                 | k == 0 = ds\n                 | otherwise = digitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` b\n        dc = fromDigit $! d\n\ntoBase :: Integral a => Char -> a -> Char\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\n\nfromDigit :: Integral a => a -> Char\nfromDigit d | d <= 9 = toBase '0' d\n            | otherwise = toBase 'a' d\n\nfromDigitC :: Integral a => a -> Char\nfromDigitC d | d <= 9 = toBase '0' d\n             | otherwise = toBase 'A' d	\N	\N	0	2	38	Octal.hs	2015-03-01 19:27:58	2015-03-01 19:27:58	{"Octal.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule Octal( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readBase 8\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct = showBase 8\\n\\nreadBase :: Integral a =\\u003e a -\\u003e String -\\u003e a\\nreadBase b s = readBase' 0 s\\n  where \\n    readBase' acc \\"\\" = acc\\n    readBase' acc (d : ds) \\n        | acc `seq` False = undefined \\n        | not (valid b d) = 0\\n        | otherwise = readBase' (b*acc + fromChar d) ds\\n\\nvalid :: Integral b =\\u003e b -\\u003e Char -\\u003e Bool\\nvalid b c | b \\u003c= 10   = c \\u003e= '0' \\u0026\\u0026 c \\u003c bd\\n          | otherwise = (c \\u003e= '0' \\u0026\\u0026 c \\u003c= '9') || \\n                        (c \\u003e= 'A' \\u0026\\u0026 c \\u003c bdu) ||\\n                        (c \\u003e= 'a' \\u0026\\u0026 c \\u003c bd)\\n  where \\n    bd = fromDigit b\\n    bdu = fromDigitC b\\n\\nfromChar :: Integral a =\\u003e Char -\\u003e a\\nfromChar c | c \\u003c= '9' = fromBase '0' c\\n           | c \\u003c= 'Z' = fromBase 'A' c\\n           | otherwise = fromBase 'a' c\\n  where \\n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \\n\\nshowBase :: Integral a =\\u003e a -\\u003e a -\\u003e String\\nshowBase b n | b \\u003c 1 || n \\u003c 0 = \\"\\"\\n             | n == 0 = \\"0\\"\\n             | otherwise = digitsP \\"\\" n\\n  where\\n    digitsP ds k | dc `seq` ds `seq` False = undefined\\n                 | k == 0 = ds\\n                 | otherwise = digitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` b\\n        dc = fromDigit $! d\\n\\ntoBase :: Integral a =\\u003e Char -\\u003e a -\\u003e Char\\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\\n\\nfromDigit :: Integral a =\\u003e a -\\u003e Char\\nfromDigit d | d \\u003c= 9 = toBase '0' d\\n            | otherwise = toBase 'a' d\\n\\nfromDigitC :: Integral a =\\u003e a -\\u003e Char\\nfromDigitC d | d \\u003c= 9 = toBase '0' d\\n             | otherwise = toBase 'A' d"}
84	33	c19dd682b49861bd3a2d2b34	pending	python	grade-school	from collections import defaultdict\nclass School():\n    def __init__(self,what):\n        self.db = defaultdict(set)\n        self.school_name = what\n\n    def add(self,what,grade):\n        self.db[grade].add(what)\n        \n    def grade(self,what):\n        return self.db[what]\n\n    def sort(self):\n        #for testing purposes \n        new_dict = {}\n        for k,v in self.db.items():\n            new_dict[k] = tuple(v)\n        return new_dict	\N	\N	0	1	63	school.py	2015-07-19 06:24:25	2015-07-19 06:24:25	{"school.py":"from collections import defaultdict\\nclass School():\\n    def __init__(self,what):\\n        self.db = defaultdict(set)\\n        self.school_name = what\\n\\n    def add(self,what,grade):\\n        self.db[grade].add(what)\\n        \\n    def grade(self,what):\\n        return self.db[what]\\n\\n    def sort(self):\\n        #for testing purposes \\n        new_dict = {}\\n        for k,v in self.db.items():\\n            new_dict[k] = tuple(v)\\n        return new_dict"}
53	22	47a4dc50ff2ec7620c3ba9d1	superseded	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule OctalSeq( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readOct' 0\n  where \n    readOct' acc "" = acc `seq` acc\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\n      where\n        toOctVal '0' = 0\n        toOctVal '1' = 1\n        toOctVal '2' = 2\n        toOctVal '3' = 3\n        toOctVal '4' = 4\n        toOctVal '5' = 5\n        toOctVal '6' = 6\n        toOctVal '7' = 7\n        toOctVal  _  = error "invalid digit"\n\nshowOct :: Integral a => a -> String\nshowOct n | n < 0 = ""\n          | n == 0 = "0"\n          | otherwise = octDigitsP "" n\n  where\n    octDigitsP ds 0 = ds `seq` ds\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` 8\n        dc = toOctChar $! d\n        toOctChar 0 = '0'\n        toOctChar 1 = '1'\n        toOctChar 2 = '2'\n        toOctChar 3 = '3'\n        toOctChar 4 = '4'\n        toOctChar 5 = '5'\n        toOctChar 6 = '6'\n        toOctChar 7 = '7'\n        toOctChar _ = error "invalid digit"	\N	\N	0	1	38	OctalSeq.hs	2015-06-08 07:53:21	2015-06-08 07:53:21	{"OctalSeq.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule OctalSeq( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readOct' 0\\n  where \\n    readOct' acc \\"\\" = acc `seq` acc\\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\\n      where\\n        toOctVal '0' = 0\\n        toOctVal '1' = 1\\n        toOctVal '2' = 2\\n        toOctVal '3' = 3\\n        toOctVal '4' = 4\\n        toOctVal '5' = 5\\n        toOctVal '6' = 6\\n        toOctVal '7' = 7\\n        toOctVal  _  = error \\"invalid digit\\"\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct n | n \\u003c 0 = \\"\\"\\n          | n == 0 = \\"0\\"\\n          | otherwise = octDigitsP \\"\\" n\\n  where\\n    octDigitsP ds 0 = ds `seq` ds\\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` 8\\n        dc = toOctChar $! d\\n        toOctChar 0 = '0'\\n        toOctChar 1 = '1'\\n        toOctChar 2 = '2'\\n        toOctChar 3 = '3'\\n        toOctChar 4 = '4'\\n        toOctChar 5 = '5'\\n        toOctChar 6 = '6'\\n        toOctChar 7 = '7'\\n        toOctChar _ = error \\"invalid digit\\""}
54	22	54e3fe9a0759f11ed6eb58eb	done	ruby	roman-numerals	class Fixnum\n\n  def to_roman\n    i = self\n    s = ''\n    roman_mappings.each do |arabic, roman|\n      while i >= arabic\n        s << roman\n        i -= arabic\n      end\n    end\n    s\n  end\n\n  def roman_mappings\n    {\n      1000 => 'M',\n      900 => 'CM',\n      500 => 'D',\n      400 => 'CD',\n      100 => 'C',\n      90 => 'XC',\n      50 => 'L',\n      40 => 'XL',\n      10 => 'X',\n      9 => 'IX',\n      5 => 'V',\n      4 => 'IV',\n      1 => 'I',\n    }\n\n  end\n\nend	\N	\N	0	1	39	roman.rb	2015-04-16 13:06:39	2015-04-16 13:06:39	{"roman.rb":"class Fixnum\\n\\n  def to_roman\\n    i = self\\n    s = ''\\n    roman_mappings.each do |arabic, roman|\\n      while i \\u003e= arabic\\n        s \\u003c\\u003c roman\\n        i -= arabic\\n      end\\n    end\\n    s\\n  end\\n\\n  def roman_mappings\\n    {\\n      1000 =\\u003e 'M',\\n      900 =\\u003e 'CM',\\n      500 =\\u003e 'D',\\n      400 =\\u003e 'CD',\\n      100 =\\u003e 'C',\\n      90 =\\u003e 'XC',\\n      50 =\\u003e 'L',\\n      40 =\\u003e 'XL',\\n      10 =\\u003e 'X',\\n      9 =\\u003e 'IX',\\n      5 =\\u003e 'V',\\n      4 =\\u003e 'IV',\\n      1 =\\u003e 'I',\\n    }\\n\\n  end\\n\\nend"}
55	22	62cf2ccc66b361fc2453ba43	done	javascript	sieve	var Sieve = function(num) {\n  this.num = num;\n  this.primes = [];\n\n  var isPrime = function(n) {\n    var mid = Math.floor( n / 2 );\n\n    for ( var i = 2; i <= mid; i++ ) {\n      if ( n % i === 0 ) {\n        return false\n      }\n    }\n    return true;\n  }\n\n  for ( var i = 2; i <= this.num; i++ ) {\n    if ( isPrime(i) ) {\n      this.primes.push(i);\n    }\n  }\n};	\N	\N	0	1	40	sieve_test.js	2015-02-06 18:30:15	2015-02-06 18:30:15	{"sieve_test.js":"var Sieve = function(num) {\\n  this.num = num;\\n  this.primes = [];\\n\\n  var isPrime = function(n) {\\n    var mid = Math.floor( n / 2 );\\n\\n    for ( var i = 2; i \\u003c= mid; i++ ) {\\n      if ( n % i === 0 ) {\\n        return false\\n      }\\n    }\\n    return true;\\n  }\\n\\n  for ( var i = 2; i \\u003c= this.num; i++ ) {\\n    if ( isPrime(i) ) {\\n      this.primes.push(i);\\n    }\\n  }\\n};"}
56	22	8831c43de707c732e21f23e4	pending	python	sieve	def sieve(n):\n\n    sieve_range = range(2, n+1)\n    elements = [[i, 'unmarked'] for i in sieve_range]\n\n    for i, element in enumerate(elements):\n        value, state = element\n        if state == 'unmarked':\n\n            rest = elements[(i+1):]\n            for item in rest:\n                if item[0] % value == 0:\n                    item[1] = 'marked'\n\n    return [value for value,state in elements\n                if state == 'unmarked']	\N	\N	0	1	41	sieve.py	2015-02-28 18:47:07	2015-02-28 18:47:07	{"sieve.py":"def sieve(n):\\n\\n    sieve_range = range(2, n+1)\\n    elements = [[i, 'unmarked'] for i in sieve_range]\\n\\n    for i, element in enumerate(elements):\\n        value, state = element\\n        if state == 'unmarked':\\n\\n            rest = elements[(i+1):]\\n            for item in rest:\\n                if item[0] % value == 0:\\n                    item[1] = 'marked'\\n\\n    return [value for value,state in elements\\n                if state == 'unmarked']"}
57	22	e4c524f9790b1b3210cc89b3	superseded	javascript	bob	var Bob = function(){\n\n};\n\n\nBob.prototype.hey = function(phrase){\n\tif(phrase == '' || phrase == '   '){\n\t\treturn 'Fine. Be that way!';\n\t} else if (phrase.search("gym") != -1){\n\t\treturn 'Whatever.';\n\t} else if(phrase[phrase.length-1]==="!"){\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase == 'I HATE YOU' || phrase == 'WHAT THE HELL WERE YOU THINKING?'){ //all caps - should use regex\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase[phrase.length-1]==="?"){\n\t\treturn 'Sure.';\n\t}\telse if (phrase[phrase.length-1]!=="?" || phrase[phrase.length-1] !== "!"){\n\t\treturn 'Whatever.';\n\t}\t\n\n}	\N	\N	0	1	42	bob.js	2015-04-25 21:42:16	2015-04-25 21:42:16	{"bob.js":"var Bob = function(){\\n\\n};\\n\\n\\nBob.prototype.hey = function(phrase){\\n\\tif(phrase == '' || phrase == '   '){\\n\\t\\treturn 'Fine. Be that way!';\\n\\t} else if (phrase.search(\\"gym\\") != -1){\\n\\t\\treturn 'Whatever.';\\n\\t} else if(phrase[phrase.length-1]===\\"!\\"){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase == 'I HATE YOU' || phrase == 'WHAT THE HELL WERE YOU THINKING?'){ //all caps - should use regex\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase[phrase.length-1]===\\"?\\"){\\n\\t\\treturn 'Sure.';\\n\\t}\\telse if (phrase[phrase.length-1]!==\\"?\\" || phrase[phrase.length-1] !== \\"!\\"){\\n\\t\\treturn 'Whatever.';\\n\\t}\\t\\n\\n}"}
58	22	4ef938c292f9de6f835c4692	done	javascript	bob	var Bob = function(){\n\n};\n\n\nBob.prototype.hey = function(phrase){\n   if(phrase.search(/([0-9a-zA-Z])\\S+/) === -1){\n\t\treturn 'Fine. Be that way!';\n\t} else if (phrase.search(/\\d\\?/)>-1){\n\t\treturn 'Sure.';\n\t} else if (phrase[phrase.length-1] == '?' && phrase.toUpperCase() == phrase){\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase[phrase.length-1] == '?'){\n\t\treturn 'Sure.';\n\t} else if (phrase.search(/[A-Za-z]+/) === -1){\n\t\treturn 'Whatever.';\n\t} else if (phrase.toUpperCase() == phrase){\n\t\treturn 'Woah, chill out!';\n\t} else{\n\t\treturn 'Whatever.';\n\t}\n};	\N	\N	0	2	42	bob.js	2015-05-06 05:11:10	2015-05-06 05:11:10	{"bob.js":"var Bob = function(){\\n\\n};\\n\\n\\nBob.prototype.hey = function(phrase){\\n   if(phrase.search(/([0-9a-zA-Z])\\\\S+/) === -1){\\n\\t\\treturn 'Fine. Be that way!';\\n\\t} else if (phrase.search(/\\\\d\\\\?/)\\u003e-1){\\n\\t\\treturn 'Sure.';\\n\\t} else if (phrase[phrase.length-1] == '?' \\u0026\\u0026 phrase.toUpperCase() == phrase){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase[phrase.length-1] == '?'){\\n\\t\\treturn 'Sure.';\\n\\t} else if (phrase.search(/[A-Za-z]+/) === -1){\\n\\t\\treturn 'Whatever.';\\n\\t} else if (phrase.toUpperCase() == phrase){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else{\\n\\t\\treturn 'Whatever.';\\n\\t}\\n};"}
59	22	a011dd5d6c85e01d01388b41	superseded	haskell	simple-linked-list	module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\r\n\r\ndata List a = EmptyList | ListElement a (List a) \r\n\r\nnil :: List a\r\nnil = EmptyList\r\n\r\nisNil :: List a -> Bool\r\nisNil EmptyList = True\r\nisNil _         = False\r\n\r\nnew :: a -> List a -> List a\r\nnew x xs = ListElement x (xs)\r\n\r\ndatum :: List a -> a\r\ndatum (ListElement x _) = x\r\n\r\nnext :: List a -> List a\r\nnext EmptyList = EmptyList\r\nnext (ListElement _ xs) = xs\r\n\r\nfromList :: [a] -> List a\r\nfromList []     = EmptyList\r\nfromList (x:xs) = new x $ fromList xs\r\n\r\ntoList :: List a -> [a]\r\ntoList EmptyList = []\r\ntoList (ListElement x xs) = x : toList xs\r\n\r\n(+++) :: List a -> a -> List a\r\n(+++) EmptyList y = new y EmptyList\r\n(+++) (ListElement x xs) y = new x $ xs +++ y\r\n\r\nreverseLinkedList :: List a -> List a\r\nreverseLinkedList EmptyList = EmptyList\r\nreverseLinkedList (ListElement x xs) = reverseLinkedList xs +++ x	\N	\N	0	1	43	LinkedList.hs	2015-04-25 03:07:49	2015-04-25 03:07:49	{"LinkedList.hs":"module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\\r\\n\\r\\ndata List a = EmptyList | ListElement a (List a) \\r\\n\\r\\nnil :: List a\\r\\nnil = EmptyList\\r\\n\\r\\nisNil :: List a -\\u003e Bool\\r\\nisNil EmptyList = True\\r\\nisNil _         = False\\r\\n\\r\\nnew :: a -\\u003e List a -\\u003e List a\\r\\nnew x xs = ListElement x (xs)\\r\\n\\r\\ndatum :: List a -\\u003e a\\r\\ndatum (ListElement x _) = x\\r\\n\\r\\nnext :: List a -\\u003e List a\\r\\nnext EmptyList = EmptyList\\r\\nnext (ListElement _ xs) = xs\\r\\n\\r\\nfromList :: [a] -\\u003e List a\\r\\nfromList []     = EmptyList\\r\\nfromList (x:xs) = new x $ fromList xs\\r\\n\\r\\ntoList :: List a -\\u003e [a]\\r\\ntoList EmptyList = []\\r\\ntoList (ListElement x xs) = x : toList xs\\r\\n\\r\\n(+++) :: List a -\\u003e a -\\u003e List a\\r\\n(+++) EmptyList y = new y EmptyList\\r\\n(+++) (ListElement x xs) y = new x $ xs +++ y\\r\\n\\r\\nreverseLinkedList :: List a -\\u003e List a\\r\\nreverseLinkedList EmptyList = EmptyList\\r\\nreverseLinkedList (ListElement x xs) = reverseLinkedList xs +++ x"}
60	22	dfe5fe43883d0b2e0a50bc64	pending	haskell	simple-linked-list	module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\r\n\r\ndata List a = EmptyList | ListElement a (List a) \r\n\tderiving (Show)\r\n\r\nnil :: List a\r\nnil = EmptyList\r\n\r\nisNil :: List a -> Bool\r\nisNil EmptyList = True\r\nisNil _         = False\r\n\r\nnew :: a -> List a -> List a\r\nnew = ListElement\r\n\r\ndatum :: List a -> a\r\ndatum EmptyList = undefined\r\ndatum (ListElement x _) = x\r\n\r\nnext :: List a -> List a\r\nnext EmptyList = undefined\r\nnext (ListElement _ xs) = xs\r\n\r\nfromList :: [a] -> List a\r\nfromList = foldr new EmptyList\r\n\r\nfoldrList :: (a -> b -> b) -> b -> List a -> b\r\nfoldrList _ z EmptyList = z\r\nfoldrList f z (ListElement x xs) = x `f` foldrList f z xs\r\n\r\nfoldlList :: (b -> a -> b) -> b -> List a -> b\r\nfoldlList _ z EmptyList = z\r\nfoldlList f z (ListElement x xs) = let z' = z `f` x\r\n                                in seq z' $ foldlList f z' xs  \r\n\r\ntoList :: List a -> [a]\r\ntoList = foldrList (:) []\r\n\r\nreverseLinkedList :: List a -> List a\r\nreverseLinkedList = foldlList (flip new) EmptyList	\N	\N	0	2	43	LinkedList.hs	2015-05-03 05:18:13	2015-05-03 05:18:13	{"LinkedList.hs":"module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\\r\\n\\r\\ndata List a = EmptyList | ListElement a (List a) \\r\\n\\tderiving (Show)\\r\\n\\r\\nnil :: List a\\r\\nnil = EmptyList\\r\\n\\r\\nisNil :: List a -\\u003e Bool\\r\\nisNil EmptyList = True\\r\\nisNil _         = False\\r\\n\\r\\nnew :: a -\\u003e List a -\\u003e List a\\r\\nnew = ListElement\\r\\n\\r\\ndatum :: List a -\\u003e a\\r\\ndatum EmptyList = undefined\\r\\ndatum (ListElement x _) = x\\r\\n\\r\\nnext :: List a -\\u003e List a\\r\\nnext EmptyList = undefined\\r\\nnext (ListElement _ xs) = xs\\r\\n\\r\\nfromList :: [a] -\\u003e List a\\r\\nfromList = foldr new EmptyList\\r\\n\\r\\nfoldrList :: (a -\\u003e b -\\u003e b) -\\u003e b -\\u003e List a -\\u003e b\\r\\nfoldrList _ z EmptyList = z\\r\\nfoldrList f z (ListElement x xs) = x `f` foldrList f z xs\\r\\n\\r\\nfoldlList :: (b -\\u003e a -\\u003e b) -\\u003e b -\\u003e List a -\\u003e b\\r\\nfoldlList _ z EmptyList = z\\r\\nfoldlList f z (ListElement x xs) = let z' = z `f` x\\r\\n                                in seq z' $ foldlList f z' xs  \\r\\n\\r\\ntoList :: List a -\\u003e [a]\\r\\ntoList = foldrList (:) []\\r\\n\\r\\nreverseLinkedList :: List a -\\u003e List a\\r\\nreverseLinkedList = foldlList (flip new) EmptyList"}
61	22	7b69aa57f2cbe391cde34448	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char\nimport Data.List       (foldl')\nimport Data.Map hiding (filter,foldl',null)\n\nwordCount :: String -> Map String Integer\nwordCount\n  = foldl' tally empty\n  . filter (not . null)\n  . words'\n  . fmap toLower\n  where\n    tally m x = insertWith (+) x 1 m\n    words' [] = []\n    words' xs = y : words' ys\n      where\n        (y,ys) = span isAlphaNum\n               $ dropWhile (not . isAlphaNum) xs	\N	\N	0	1	44	WordCount.hs	2015-05-21 18:41:51	2015-05-21 18:41:51	{"WordCount.hs":"module WordCount (wordCount) where\\n\\nimport Data.Char\\nimport Data.List       (foldl')\\nimport Data.Map hiding (filter,foldl',null)\\n\\nwordCount :: String -\\u003e Map String Integer\\nwordCount\\n  = foldl' tally empty\\n  . filter (not . null)\\n  . words'\\n  . fmap toLower\\n  where\\n    tally m x = insertWith (+) x 1 m\\n    words' [] = []\\n    words' xs = y : words' ys\\n      where\\n        (y,ys) = span isAlphaNum\\n               $ dropWhile (not . isAlphaNum) xs"}
62	22	7976f83f738c64d7b365a5f6	done	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char       (isAlphaNum,toLower)\nimport Data.List       (foldl')\nimport Data.List.Split (wordsBy)\nimport Data.Map.Strict (Map,empty,insertWith)\n\nwordCount :: String -> Map String Integer\nwordCount\n  = foldl' tally empty\n  . wordsBy (not . isAlphaNum)\n  . fmap toLower\n  where\n    tally m x = insertWith (+) x 1 m	\N	\N	0	2	44	WordCount.hs	2015-06-02 23:30:35	2015-06-02 23:30:35	{"WordCount.hs":"module WordCount (wordCount) where\\n\\nimport Data.Char       (isAlphaNum,toLower)\\nimport Data.List       (foldl')\\nimport Data.List.Split (wordsBy)\\nimport Data.Map.Strict (Map,empty,insertWith)\\n\\nwordCount :: String -\\u003e Map String Integer\\nwordCount\\n  = foldl' tally empty\\n  . wordsBy (not . isAlphaNum)\\n  . fmap toLower\\n  where\\n    tally m x = insertWith (+) x 1 m"}
63	22	4ada3aba1cd21b53c0216ed5	done	clojure	nucleotide-count	(ns dna)\n\n(def ^{:private true} nucleotides (set "ACGTU"))\n(def ^{:private true} dna-nucleotides (disj nucleotides \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? nucleotides nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) dna-nucleotides)))	\N	\N	0	3	45	dna.clj	2015-02-23 20:43:19	2015-02-23 20:43:19	{"dna.clj":"(ns dna)\\n\\n(def ^{:private true} nucleotides (set \\"ACGTU\\"))\\n(def ^{:private true} dna-nucleotides (disj nucleotides \\\\U))\\n\\n(defn count [nucleotide dna]\\n  (when (not (contains? nucleotides nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) dna-nucleotides)))"}
64	22	2c2132660b410141a3143916	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn dna/count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	1	45	dna.clj	2015-04-30 11:12:28	2015-04-30 11:12:28	{"dna.clj":"(ns dna)\\n\\n(def NUCLEOTIDES (set \\"ACGTU\\"))\\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\\\U))\\n\\n(defn dna/count [nucleotide dna]\\n  (when (not (contains? NUCLEOTIDES nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))"}
65	22	89804c2b8cc8f3752876645e	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	2	45	dna.clj	2015-07-22 11:51:43	2015-07-22 11:51:43	{"dna.clj":"(ns dna)\\n\\n(def NUCLEOTIDES (set \\"ACGTU\\"))\\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\\\U))\\n\\n(defn count [nucleotide dna]\\n  (when (not (contains? NUCLEOTIDES nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))"}
66	22	87f5e1161a4e1ec2a53a86b5	pending	python	meetup	import calendar\nimport datetime\n\ndesc_commands = {\n\t'1st':0,\n\t'2nd':1,\n\t'3rd':2,\n\t'4th':3,\n\t'last':-1\n}\n\ndef meetup_day(year, month, dayofweek, desc):\n\tteenth = [13,14,15,16,17,18,19]\n\tweekdays = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\n\tdaysofmonth = calendar.monthcalendar(year,month)\n\tdates = []\n\tfor week in daysofmonth:\n\t\tfor day in week:\n\t\t\tif day != 0:\n\t\t\t\tdates.append(day)\n\tcollect = []\n\tfor day in dates:\n\t\tdate = datetime.date(year, month, day)\n\t\tif dayofweek == weekdays[date.isoweekday()-1]:\n\t\t\tcollect.append(date)\n\tif desc in desc_commands:\n\t\tindex = desc_commands[desc]\n\t\treturn collect[index]\n\tif desc == 'teenth':\n\t\tfor day in collect:\n\t\t\tif day.day in teenth:\n\t\t\t\treturn day	\N	\N	0	1	46	meetup.py	2015-05-24 04:03:54	2015-05-24 04:03:54	{"meetup.py":"import calendar\\nimport datetime\\n\\ndesc_commands = {\\n\\t'1st':0,\\n\\t'2nd':1,\\n\\t'3rd':2,\\n\\t'4th':3,\\n\\t'last':-1\\n}\\n\\ndef meetup_day(year, month, dayofweek, desc):\\n\\tteenth = [13,14,15,16,17,18,19]\\n\\tweekdays = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\\n\\tdaysofmonth = calendar.monthcalendar(year,month)\\n\\tdates = []\\n\\tfor week in daysofmonth:\\n\\t\\tfor day in week:\\n\\t\\t\\tif day != 0:\\n\\t\\t\\t\\tdates.append(day)\\n\\tcollect = []\\n\\tfor day in dates:\\n\\t\\tdate = datetime.date(year, month, day)\\n\\t\\tif dayofweek == weekdays[date.isoweekday()-1]:\\n\\t\\t\\tcollect.append(date)\\n\\tif desc in desc_commands:\\n\\t\\tindex = desc_commands[desc]\\n\\t\\treturn collect[index]\\n\\tif desc == 'teenth':\\n\\t\\tfor day in collect:\\n\\t\\t\\tif day.day in teenth:\\n\\t\\t\\t\\treturn day"}
67	22	dafbe1ca3a4c1079a60965e5	pending	ruby	saddle-points	class Matrix\r\n  def initialize(m)\r\n    @matrix = m.split("\\n").map { |x| x.scan(/\\d+/).map(&:to_i) }\r\n  end\r\n\r\n  def rows\r\n    @matrix\r\n  end\r\n\r\n  def columns\r\n    @matrix.transpose\r\n  end\r\n\r\n  def saddle_points\r\n    points = []\r\n    rows.each_with_index do |row, i|\r\n      row.each_with_index do |item, j|\r\n        if item == row.max and item == columns[j].min\r\n          points << [i, j]\r\n        end\r\n      end\r\n    end\r\n    points\r\n  end\r\nend\r	\N	\N	0	2	47	matrix.rb	2015-02-06 14:18:08	2015-02-06 14:18:08	{"matrix.rb":"class Matrix\\r\\n  def initialize(m)\\r\\n    @matrix = m.split(\\"\\\\n\\").map { |x| x.scan(/\\\\d+/).map(\\u0026:to_i) }\\r\\n  end\\r\\n\\r\\n  def rows\\r\\n    @matrix\\r\\n  end\\r\\n\\r\\n  def columns\\r\\n    @matrix.transpose\\r\\n  end\\r\\n\\r\\n  def saddle_points\\r\\n    points = []\\r\\n    rows.each_with_index do |row, i|\\r\\n      row.each_with_index do |item, j|\\r\\n        if item == row.max and item == columns[j].min\\r\\n          points \\u003c\\u003c [i, j]\\r\\n        end\\r\\n      end\\r\\n    end\\r\\n    points\\r\\n  end\\r\\nend\\r"}
68	22	b63cb7a09873d695f459238f	superseded	ruby	saddle-points	class Matrix\r\n  def initialize(m)\r\n    @matrix = m.split("\\n").map { |x| x.scan(/\\d+/).map(&:to_i) }\r\n  end\r\n\r\n  def rows\r\n    @matrix\r\n  end\r\n\r\n  def columns\r\n    @matrix.transpose\r\n  end\r\n\r\n  def saddle_points\r\n    points = []\r\n    rows.each_with_index do |row, i|\r\n      row.each_with_index do |item, j|\r\n        if item == row.max and columns[j][i] == columns[j].min\r\n          points << [i, j]\r\n        end\r\n      end\r\n    end\r\n    points\r\n  end\r\nend\r	\N	\N	0	1	47	matrix.rb	2015-02-27 04:32:00	2015-02-27 04:32:00	{"matrix.rb":"class Matrix\\r\\n  def initialize(m)\\r\\n    @matrix = m.split(\\"\\\\n\\").map { |x| x.scan(/\\\\d+/).map(\\u0026:to_i) }\\r\\n  end\\r\\n\\r\\n  def rows\\r\\n    @matrix\\r\\n  end\\r\\n\\r\\n  def columns\\r\\n    @matrix.transpose\\r\\n  end\\r\\n\\r\\n  def saddle_points\\r\\n    points = []\\r\\n    rows.each_with_index do |row, i|\\r\\n      row.each_with_index do |item, j|\\r\\n        if item == row.max and columns[j][i] == columns[j].min\\r\\n          points \\u003c\\u003c [i, j]\\r\\n        end\\r\\n      end\\r\\n    end\\r\\n    points\\r\\n  end\\r\\nend\\r"}
69	22	a81131db12ec58b4dc70ba4b	done	javascript	anagram	var anagram = function(word) {\n  var obj = new Object();\n\n  obj.matches = function(words) {\n    if (arguments.length > 1) {\n      words = Array.prototype.slice.call(arguments);\n    }\n\n    return words.filter(function(match) {\n      return isAnagram(word, match) && !isIdentical(word, match);\n    });\n  };\n\n  return obj;\n};\n\nfunction isIdentical(a, b) {\n  return a.toLowerCase() === b.toLowerCase();\n}\n\nfunction isAnagram(a, b) {\n  return sort(a) === sort(b);\n}\n\nfunction sort(word) {\n  return word.toLowerCase().split('').sort().join('');\n}	\N	\N	0	1	48	anagram.js	2015-05-15 01:05:39	2015-05-15 01:05:39	{"anagram.js":"var anagram = function(word) {\\n  var obj = new Object();\\n\\n  obj.matches = function(words) {\\n    if (arguments.length \\u003e 1) {\\n      words = Array.prototype.slice.call(arguments);\\n    }\\n\\n    return words.filter(function(match) {\\n      return isAnagram(word, match) \\u0026\\u0026 !isIdentical(word, match);\\n    });\\n  };\\n\\n  return obj;\\n};\\n\\nfunction isIdentical(a, b) {\\n  return a.toLowerCase() === b.toLowerCase();\\n}\\n\\nfunction isAnagram(a, b) {\\n  return sort(a) === sort(b);\\n}\\n\\nfunction sort(word) {\\n  return word.toLowerCase().split('').sort().join('');\\n}"}
70	28	1bd7a2b60ad126b3852a4cbb	pending	javascript	hamming	var Hamming = {\r\n  compute: function(Strand1, Strand2) {\r\n    var NumberDifferent = 0;\r\n//Do a length check first because everything else relies on that. \r\nif (Strand1.length != Strand2.length){\r\n  throw 'DNA strands must be of equal length.'\r\n};//end if\r\nfor (var i = 0;i<Strand1.length;i++){//does a loop for each character input. \r\nif (Strand1[i] != Strand2[i]){ //if the chars aren't the same add to the differnce counter. \r\n\tNumberDifferent ++\r\n};//end if\r\n};//end for\r\n return NumberDifferent; //return the # difference\r\n   }//end compute\r\n};//end hamming\r\n\r\nmodule.exports = Hamming;	\N	\N	0	1	49	\\javascript\\hamming\\hamming.js	2015-06-17 01:45:02	2015-06-17 01:45:02	{"\\\\javascript\\\\hamming\\\\hamming.js":"var Hamming = {\\r\\n  compute: function(Strand1, Strand2) {\\r\\n    var NumberDifferent = 0;\\r\\n//Do a length check first because everything else relies on that. \\r\\nif (Strand1.length != Strand2.length){\\r\\n  throw 'DNA strands must be of equal length.'\\r\\n};//end if\\r\\nfor (var i = 0;i\\u003cStrand1.length;i++){//does a loop for each character input. \\r\\nif (Strand1[i] != Strand2[i]){ //if the chars aren't the same add to the differnce counter. \\r\\n\\tNumberDifferent ++\\r\\n};//end if\\r\\n};//end for\\r\\n return NumberDifferent; //return the # difference\\r\\n   }//end compute\\r\\n};//end hamming\\r\\n\\r\\nmodule.exports = Hamming;"}
71	28	4cf05e3e2d5f0d6d18dee47f	pending	ruby	sieve	class Sieve\n  attr_reader :limit, :candidates, :composites\n\n  def initialize(limit)\n    @limit = limit\n    @candidates = (2..limit).to_a\n    @composites = {}\n  end\n\n  def primes\n    candidates.each_with_object([]) do |candidate, primes|\n      next if composites.key?(candidate)\n      primes << candidate\n      ((candidate * 2)..limit).step(candidate) do |multiple|\n        composites[multiple] = true\n      end\n    end\n  end\nend	\N	\N	0	1	50	/ruby/sieve/sieve.rb	2015-04-07 14:10:44	2015-04-07 14:10:44	{"/ruby/sieve/sieve.rb":"class Sieve\\n  attr_reader :limit, :candidates, :composites\\n\\n  def initialize(limit)\\n    @limit = limit\\n    @candidates = (2..limit).to_a\\n    @composites = {}\\n  end\\n\\n  def primes\\n    candidates.each_with_object([]) do |candidate, primes|\\n      next if composites.key?(candidate)\\n      primes \\u003c\\u003c candidate\\n      ((candidate * 2)..limit).step(candidate) do |multiple|\\n        composites[multiple] = true\\n      end\\n    end\\n  end\\nend"}
72	28	1ad6f4ddf3a3542d0dcfb46f	done	elixir	sublist	defmodule Sublist do\n  @doc """\n  Returns whether the first list is a sublist or a superlist of the second list\n  and if not whether it is equal or unequal to the second list.\n  """\n  def compare(a, b) do\n    result = {:equal, :unequal, :sublist, :superlist}\n    _compare(a, b)\n  end\n\n  defp _compare(a, a) do\n    :equal\n  end\n\n  defp _compare(a, b) do\n    cond do\n      sublist_of?(a, b) ->\n        :sublist\n      sublist_of?(b, a) ->\n        :superlist\n      true              ->\n        :unequal\n    end\n  end\n\n  defp sublist_of?([], _), do: true\n  defp sublist_of?(_, []), do: false\n  defp sublist_of?(a, b) when length(a) > length(b), do: false\n  defp sublist_of?(a, b) do\n    if Enum.take(b, length(a)) === a do\n      true\n    else\n      [_ | t] = b\n      sublist_of?(a, t)\n    end\n  end \n\n  defp compact(list) do\n    Enum.reject(list, &is_nil/1)\n  end\nend	\N	\N	0	1	51	/elixir/sublist/sublist.exs	2015-05-23 23:43:03	2015-05-23 23:43:03	{"/elixir/sublist/sublist.exs":"defmodule Sublist do\\n  @doc \\"\\"\\"\\n  Returns whether the first list is a sublist or a superlist of the second list\\n  and if not whether it is equal or unequal to the second list.\\n  \\"\\"\\"\\n  def compare(a, b) do\\n    result = {:equal, :unequal, :sublist, :superlist}\\n    _compare(a, b)\\n  end\\n\\n  defp _compare(a, a) do\\n    :equal\\n  end\\n\\n  defp _compare(a, b) do\\n    cond do\\n      sublist_of?(a, b) -\\u003e\\n        :sublist\\n      sublist_of?(b, a) -\\u003e\\n        :superlist\\n      true              -\\u003e\\n        :unequal\\n    end\\n  end\\n\\n  defp sublist_of?([], _), do: true\\n  defp sublist_of?(_, []), do: false\\n  defp sublist_of?(a, b) when length(a) \\u003e length(b), do: false\\n  defp sublist_of?(a, b) do\\n    if Enum.take(b, length(a)) === a do\\n      true\\n    else\\n      [_ | t] = b\\n      sublist_of?(a, t)\\n    end\\n  end \\n\\n  defp compact(list) do\\n    Enum.reject(list, \\u0026is_nil/1)\\n  end\\nend"}
73	29	7291c2bdb6198c38be8ef0a0	pending	python	sieve	def sieve(n):\n\n    sieve_range = range(2, n+1)\n    elements = [[i, 'unmarked'] for i in sieve_range]\n\n    for i, element in enumerate(elements):\n        value, state = element\n        if state == 'unmarked':\n\n            rest = elements[(i+1):]\n            for item in rest:\n                if item[0] % value == 0:\n                    item[1] = 'marked'\n\n    return [value for value,state in elements\n                if state == 'unmarked']	\N	\N	0	1	52	sieve.py	2015-03-05 02:13:31	2015-03-05 02:13:31	{"sieve.py":"def sieve(n):\\n\\n    sieve_range = range(2, n+1)\\n    elements = [[i, 'unmarked'] for i in sieve_range]\\n\\n    for i, element in enumerate(elements):\\n        value, state = element\\n        if state == 'unmarked':\\n\\n            rest = elements[(i+1):]\\n            for item in rest:\\n                if item[0] % value == 0:\\n                    item[1] = 'marked'\\n\\n    return [value for value,state in elements\\n                if state == 'unmarked']"}
74	29	2071ac4db4574d90239f6d2b	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn dna/count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	1	53	dna.clj	2015-03-05 05:30:55	2015-03-05 05:30:55	{"dna.clj":"(ns dna)\\n\\n(def NUCLEOTIDES (set \\"ACGTU\\"))\\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\\\U))\\n\\n(defn dna/count [nucleotide dna]\\n  (when (not (contains? NUCLEOTIDES nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))"}
75	29	319781869d9582c961f3cf02	done	clojure	nucleotide-count	(ns dna)\n\n(def ^{:private true} nucleotides (set "ACGTU"))\n(def ^{:private true} dna-nucleotides (disj nucleotides \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? nucleotides nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) dna-nucleotides)))	\N	\N	0	3	53	dna.clj	2015-05-04 19:13:21	2015-05-04 19:13:21	{"dna.clj":"(ns dna)\\n\\n(def ^{:private true} nucleotides (set \\"ACGTU\\"))\\n(def ^{:private true} dna-nucleotides (disj nucleotides \\\\U))\\n\\n(defn count [nucleotide dna]\\n  (when (not (contains? nucleotides nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) dna-nucleotides)))"}
76	29	1f098e60dafe1d348246ee85	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	2	53	dna.clj	2015-05-12 18:11:52	2015-05-12 18:11:52	{"dna.clj":"(ns dna)\\n\\n(def NUCLEOTIDES (set \\"ACGTU\\"))\\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\\\U))\\n\\n(defn count [nucleotide dna]\\n  (when (not (contains? NUCLEOTIDES nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))"}
77	29	04801578904035181cc3360a	pending	ruby	twelve-days	class TwelveDaysSong\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\n\n  VERSES = [\n    ["twelve Drummers Drumming, ", 12],\n    ["eleven Pipers Piping, ", 11],\n    ["ten Lords-a-Leaping, ", 10],\n    ["nine Ladies Dancing, ", 9],    \n    ["eight Maids-a-Milking, ", 8],      \n    ["seven Swans-a-Swimming, ", 7],\n    ["six Geese-a-Laying, ", 6],\n    ["five Gold Rings, ", 5],\n    ["four Calling Birds, ", 4], \n    ["three French Hens, ", 3],\n    ["two Turtle Doves, and ", 2],\n  ]\n\n  def verse(num)\n    s = "On the #{DAYS[num-1]} day of Christmas my true love gave to me, "\n    VERSES.each do |phrase, verse_num|\n      s << phrase if num >= verse_num\n    end\n    s << "a Partridge in a Pear Tree.\\n"\n    s\n  end\n\n  def verses(start, stop)\n    (start..stop).map { |num| verse(num) }.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses(1, 12)\n  end\nend	\N	\N	0	1	54	twelve_days.rb	2015-03-12 23:34:38	2015-03-12 23:34:38	{"twelve_days.rb":"class TwelveDaysSong\\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\\n\\n  VERSES = [\\n    [\\"twelve Drummers Drumming, \\", 12],\\n    [\\"eleven Pipers Piping, \\", 11],\\n    [\\"ten Lords-a-Leaping, \\", 10],\\n    [\\"nine Ladies Dancing, \\", 9],    \\n    [\\"eight Maids-a-Milking, \\", 8],      \\n    [\\"seven Swans-a-Swimming, \\", 7],\\n    [\\"six Geese-a-Laying, \\", 6],\\n    [\\"five Gold Rings, \\", 5],\\n    [\\"four Calling Birds, \\", 4], \\n    [\\"three French Hens, \\", 3],\\n    [\\"two Turtle Doves, and \\", 2],\\n  ]\\n\\n  def verse(num)\\n    s = \\"On the #{DAYS[num-1]} day of Christmas my true love gave to me, \\"\\n    VERSES.each do |phrase, verse_num|\\n      s \\u003c\\u003c phrase if num \\u003e= verse_num\\n    end\\n    s \\u003c\\u003c \\"a Partridge in a Pear Tree.\\\\n\\"\\n    s\\n  end\\n\\n  def verses(start, stop)\\n    (start..stop).map { |num| verse(num) }.join(\\"\\\\n\\") + \\"\\\\n\\"\\n  end\\n\\n  def sing\\n    verses(1, 12)\\n  end\\nend"}
78	29	8189f17c0c71dcdfc6c90c33	pending	ruby	protein-translation	class Translation\n  PROTEINS = {\n    "Methionine"    => %w(AUG),\n    "Leucine"       => %w(UUA UUG),\n    "Serine"        => %w(UCU UCC UCA UCG),\n    "Cystine"       => %w(UGU UGC),\n    "Tyrosine"      => %w(UAU UAC),\n    "Tryptophan"    => %w(UGG),\n    "Phenylalanine" => %w(UUU UUC),\n    "STOP"          => %w(UAA UAG UGA),\n  }\n\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\n    Array(codons).each {|codon| hash[codon] = protein }\n  end\n\n  class << self\n    def of_codon(str)\n      CODONS.fetch(str){ raise InvalidCodonError }\n    end\n\n    def of_rna(str)\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\n        of_codon(triplet).tap do |protein|\n          return result if protein == "STOP"\n          result << protein\n        end\n      end\n    end\n  end\nend\n\nclass InvalidCodonError < ArgumentError\nend	\N	\N	0	1	55	translation.rb	2015-04-23 18:28:27	2015-04-23 18:28:27	{"translation.rb":"class Translation\\n  PROTEINS = {\\n    \\"Methionine\\"    =\\u003e %w(AUG),\\n    \\"Leucine\\"       =\\u003e %w(UUA UUG),\\n    \\"Serine\\"        =\\u003e %w(UCU UCC UCA UCG),\\n    \\"Cystine\\"       =\\u003e %w(UGU UGC),\\n    \\"Tyrosine\\"      =\\u003e %w(UAU UAC),\\n    \\"Tryptophan\\"    =\\u003e %w(UGG),\\n    \\"Phenylalanine\\" =\\u003e %w(UUU UUC),\\n    \\"STOP\\"          =\\u003e %w(UAA UAG UGA),\\n  }\\n\\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\\n    Array(codons).each {|codon| hash[codon] = protein }\\n  end\\n\\n  class \\u003c\\u003c self\\n    def of_codon(str)\\n      CODONS.fetch(str){ raise InvalidCodonError }\\n    end\\n\\n    def of_rna(str)\\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\\n        of_codon(triplet).tap do |protein|\\n          return result if protein == \\"STOP\\"\\n          result \\u003c\\u003c protein\\n        end\\n      end\\n    end\\n  end\\nend\\n\\nclass InvalidCodonError \\u003c ArgumentError\\nend"}
79	33	dd0622d0054cf7dc79d305c6	pending	lua	hamming	local Hamming = {}\n\nfunction Hamming.compute(str1, str2)\n  local distance = 0\n\n  for i = 1, math.min(#str1, #str2) do\n    if str1:sub(i,i) ~= str2:sub(i,i) then\n      distance = distance + 1\n    end\n  end\n\n  return distance\nend\n\nreturn Hamming	\N	\N	0	1	57	hamming.lua	2015-05-06 23:18:54	2015-05-06 23:18:54	{"hamming.lua":"local Hamming = {}\\n\\nfunction Hamming.compute(str1, str2)\\n  local distance = 0\\n\\n  for i = 1, math.min(#str1, #str2) do\\n    if str1:sub(i,i) ~= str2:sub(i,i) then\\n      distance = distance + 1\\n    end\\n  end\\n\\n  return distance\\nend\\n\\nreturn Hamming"}
80	33	43d6de2a141e5ab1e96a0f95	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	58	/python/wordy/wordy.py	2015-04-02 20:56:57	2015-04-02 20:56:57	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
81	33	445d224d6a0d32132d92a259	pending	javascript	gigasecond	(function() {\n  var Gigasecond = function(startDate) {\n    var startDate_ms = Date.parse(startDate),\n        endDate_ms = new Date(startDate_ms + 1000000000000),\n        year = endDate_ms.getFullYear(),\n        month = endDate_ms.getMonth(),\n        day = endDate_ms.getDate();\n\n    this.date = function() {\n      return new Date (year, month, day);\n    };\n  };\n\n  module.exports = Gigasecond;\n})();	\N	\N	0	1	60	gigasecond.js	2015-06-09 03:29:49	2015-06-09 03:29:49	{"gigasecond.js":"(function() {\\n  var Gigasecond = function(startDate) {\\n    var startDate_ms = Date.parse(startDate),\\n        endDate_ms = new Date(startDate_ms + 1000000000000),\\n        year = endDate_ms.getFullYear(),\\n        month = endDate_ms.getMonth(),\\n        day = endDate_ms.getDate();\\n\\n    this.date = function() {\\n      return new Date (year, month, day);\\n    };\\n  };\\n\\n  module.exports = Gigasecond;\\n})();"}
82	33	2f8d22f2ea112419acb7ade8	done	javascript	sieve	var Sieve = function(num) {\n  this.num = num;\n  this.primes = [];\n\n  var isPrime = function(n) {\n    var mid = Math.floor( n / 2 );\n\n    for ( var i = 2; i <= mid; i++ ) {\n      if ( n % i === 0 ) {\n        return false\n      }\n    }\n    return true;\n  }\n\n  for ( var i = 2; i <= this.num; i++ ) {\n    if ( isPrime(i) ) {\n      this.primes.push(i);\n    }\n  }\n};	\N	\N	0	1	61	sieve_test.js	2015-05-28 04:04:11	2015-05-28 04:04:11	{"sieve_test.js":"var Sieve = function(num) {\\n  this.num = num;\\n  this.primes = [];\\n\\n  var isPrime = function(n) {\\n    var mid = Math.floor( n / 2 );\\n\\n    for ( var i = 2; i \\u003c= mid; i++ ) {\\n      if ( n % i === 0 ) {\\n        return false\\n      }\\n    }\\n    return true;\\n  }\\n\\n  for ( var i = 2; i \\u003c= this.num; i++ ) {\\n    if ( isPrime(i) ) {\\n      this.primes.push(i);\\n    }\\n  }\\n};"}
83	33	d0f6adbe8b44770e5c49d7c5	pending	ruby	roman-numerals	class Fixnum\n  def to_roman\n    array = self.to_s.split(//)\n    num_array = []\n    array.each do |x|\n      num_array.push(x.to_i)\n    end\n    roman_numeral=[]\n    ones = num_array.pop\n    if ones == 9\n      roman_numeral.unshift('IX')\n    elsif ones == 4\n      roman_numeral.unshift('IV')\n    else\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\n    end\n\n    if num_array.empty? == false\n      tens = num_array.pop\n      if tens == 9\n        roman_numeral.unshift('XC')\n      elsif tens == 4\n        roman_numeral.unshift('XL')\n      else\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\n      end\n    end\n\n    if num_array.empty? == false\n      hundreds = num_array.pop\n      if hundreds == 9\n        roman_numeral.unshift('CM')\n      elsif hundreds == 4\n        roman_numeral.unshift('CD')\n      else\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\n      end\n    end\n\n    if num_array.empty? == false\n      thousands = num_array.pop\n      roman_numeral.unshift('M'*thousands)\n    end\n\n    roman_numeral.join\n  end\nend	\N	\N	0	1	62	/ruby/roman-numerals/roman.rb	2015-06-17 06:35:28	2015-06-17 06:35:28	{"/ruby/roman-numerals/roman.rb":"class Fixnum\\n  def to_roman\\n    array = self.to_s.split(//)\\n    num_array = []\\n    array.each do |x|\\n      num_array.push(x.to_i)\\n    end\\n    roman_numeral=[]\\n    ones = num_array.pop\\n    if ones == 9\\n      roman_numeral.unshift('IX')\\n    elsif ones == 4\\n      roman_numeral.unshift('IV')\\n    else\\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\\n    end\\n\\n    if num_array.empty? == false\\n      tens = num_array.pop\\n      if tens == 9\\n        roman_numeral.unshift('XC')\\n      elsif tens == 4\\n        roman_numeral.unshift('XL')\\n      else\\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      hundreds = num_array.pop\\n      if hundreds == 9\\n        roman_numeral.unshift('CM')\\n      elsif hundreds == 4\\n        roman_numeral.unshift('CD')\\n      else\\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      thousands = num_array.pop\\n      roman_numeral.unshift('M'*thousands)\\n    end\\n\\n    roman_numeral.join\\n  end\\nend"}
154	49	895ee2f8561e85fdaa6a2658	done	scala	word-count	class Phrase(phrase: String) {\n  val _matcher = """[\\w']+""".r\n  val normalized = phrase.toLowerCase\n  val words = _matcher.findAllIn(normalized).toList\n\n  def wordCount = words.groupBy(e => e).map(kv => kv._1 -> kv._2.length)\n}	\N	\N	0	1	108	word_count.scala	2015-05-11 19:30:36	2015-05-11 19:30:36	{"word_count.scala":"class Phrase(phrase: String) {\\n  val _matcher = \\"\\"\\"[\\\\w']+\\"\\"\\".r\\n  val normalized = phrase.toLowerCase\\n  val words = _matcher.findAllIn(normalized).toList\\n\\n  def wordCount = words.groupBy(e =\\u003e e).map(kv =\\u003e kv._1 -\\u003e kv._2.length)\\n}"}
85	38	4da5ffbf922683ec154c0fd1	done	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\nopen System.Collections.Generic\r\n\r\ntype RobotName() = \r\n    static let usedNames = new List<String>()\r\n\r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let rec buildName () =\r\n        let candidate = \r\n            String.Concat [ randomLetter(); randomLetter(); \r\n                            randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n        if usedNames.Contains(candidate) then \r\n            buildName() \r\n        else \r\n            usedNames.Add(candidate)\r\n            candidate   \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	3	64	RobotName.fs	2015-06-12 12:12:14	2015-06-12 12:12:14	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\nopen System.Collections.Generic\\r\\n\\r\\ntype RobotName() = \\r\\n    static let usedNames = new List\\u003cString\\u003e()\\r\\n\\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let rec buildName () =\\r\\n        let candidate = \\r\\n            String.Concat [ randomLetter(); randomLetter(); \\r\\n                            randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n        if usedNames.Contains(candidate) then \\r\\n            buildName() \\r\\n        else \\r\\n            usedNames.Add(candidate)\\r\\n            candidate   \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
86	38	47506914acb9d8cad1608c00	superseded	fsharp	robot-name	﻿namespace RobotName\r\n\r\ntype RobotName() = \r\n    let random = System.Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\r\n    let randomDigit () = (random.Next() % 10).ToString()\r\n\r\n    let buildName () =\r\n        (seq {0..1} \r\n         |> Seq.map (fun _ -> randomLetter())\r\n         |> String.concat "")\r\n        +\r\n        (seq {0..2}\r\n         |> Seq.map (fun _ -> randomDigit())\r\n         |> String.concat "")\r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	1	64	RobotName.fs	2015-07-09 12:08:22	2015-07-09 12:08:22	{"RobotName.fs":"﻿namespace RobotName\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = System.Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\\r\\n    let randomDigit () = (random.Next() % 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        (seq {0..1} \\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomLetter())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n        +\\r\\n        (seq {0..2}\\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomDigit())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
87	38	e92047a5b21b38a9f150057d	superseded	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\n\r\ntype RobotName() = \r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let buildName () =\r\n        String.Concat [ randomLetter(); randomLetter(); \r\n                        randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	2	64	RobotName.fs	2015-08-06 02:47:01	2015-08-06 02:47:01	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        String.Concat [ randomLetter(); randomLetter(); \\r\\n                        randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
88	38	eb416b4686c2c675404c905c	superseded	go	leap	package leap\n\n/*\n * Determine if year is leap year or not\n * @param year: The year expressed as int \n * @return: true if leap year, otherwise false\n*/\nfunc IsLeapYear(year int) bool {\n    // Is leap if evenly divisible by 4 and not by 100  \n    if (year % 4 == 0 && year % 100 != 0) {\n        return true\n    // Also leap if divisible by 400\n    } else if (year % 400 == 0) {\n        return true\n    // All others are not leap\n    } else {\n        return false\n    }\n}	\N	\N	0	1	65	leap.go	2015-06-13 01:15:47	2015-06-13 01:15:47	{"leap.go":"package leap\\n\\n/*\\n * Determine if year is leap year or not\\n * @param year: The year expressed as int \\n * @return: true if leap year, otherwise false\\n*/\\nfunc IsLeapYear(year int) bool {\\n    // Is leap if evenly divisible by 4 and not by 100  \\n    if (year % 4 == 0 \\u0026\\u0026 year % 100 != 0) {\\n        return true\\n    // Also leap if divisible by 400\\n    } else if (year % 400 == 0) {\\n        return true\\n    // All others are not leap\\n    } else {\\n        return false\\n    }\\n}"}
89	38	39e11425e3dcb57b64fbafce	pending	go	leap	package leap\n\n\n//Returns true if the year is a leap year and false otherwise. \n//Takes the year as an int.\nfunc IsLeapYear(year int) bool {\n\t// Is leap if evenly divisible by 4 and not by 100\n\tif year%4 == 0 && year%100 != 0 {\n\t\treturn true\n\t// Also leap if divisible by 400\n\t} else if year%400 == 0 {\n\t\treturn true\n\t}\n\t// All others are not leap\n\treturn false\n}	\N	\N	0	2	65	leap.go	2015-06-20 16:08:27	2015-06-20 16:08:27	{"leap.go":"package leap\\n\\n\\n//Returns true if the year is a leap year and false otherwise. \\n//Takes the year as an int.\\nfunc IsLeapYear(year int) bool {\\n\\t// Is leap if evenly divisible by 4 and not by 100\\n\\tif year%4 == 0 \\u0026\\u0026 year%100 != 0 {\\n\\t\\treturn true\\n\\t// Also leap if divisible by 400\\n\\t} else if year%400 == 0 {\\n\\t\\treturn true\\n\\t}\\n\\t// All others are not leap\\n\\treturn false\\n}"}
90	38	318fceac08c64b0f78145d58	done	javascript	sieve	var Sieve = function(num) {\n  this.num = num;\n  this.primes = [];\n\n  var isPrime = function(n) {\n    var mid = Math.floor( n / 2 );\n\n    for ( var i = 2; i <= mid; i++ ) {\n      if ( n % i === 0 ) {\n        return false\n      }\n    }\n    return true;\n  }\n\n  for ( var i = 2; i <= this.num; i++ ) {\n    if ( isPrime(i) ) {\n      this.primes.push(i);\n    }\n  }\n};	\N	\N	0	1	66	sieve_test.js	2015-06-28 06:16:48	2015-06-28 06:16:48	{"sieve_test.js":"var Sieve = function(num) {\\n  this.num = num;\\n  this.primes = [];\\n\\n  var isPrime = function(n) {\\n    var mid = Math.floor( n / 2 );\\n\\n    for ( var i = 2; i \\u003c= mid; i++ ) {\\n      if ( n % i === 0 ) {\\n        return false\\n      }\\n    }\\n    return true;\\n  }\\n\\n  for ( var i = 2; i \\u003c= this.num; i++ ) {\\n    if ( isPrime(i) ) {\\n      this.primes.push(i);\\n    }\\n  }\\n};"}
91	38	3ed43f6c3553f6b06b285d65	pending	ruby	raindrops	class Raindrops\r\n\r\n  def self.convert(num)\r\n    result = ""\r\n    result << "Pling" if num%3 == 0\r\n    result << "Plang" if num%5 == 0\r\n    result << "Plong" if num%7 == 0\r\n    result = num.to_s if result.empty?\r\n    result\r\n  end\r\n\r\nend	\N	\N	0	1	67	raindrops.rb	2015-08-28 17:19:54	2015-08-28 17:19:54	{"raindrops.rb":"class Raindrops\\r\\n\\r\\n  def self.convert(num)\\r\\n    result = \\"\\"\\r\\n    result \\u003c\\u003c \\"Pling\\" if num%3 == 0\\r\\n    result \\u003c\\u003c \\"Plang\\" if num%5 == 0\\r\\n    result \\u003c\\u003c \\"Plong\\" if num%7 == 0\\r\\n    result = num.to_s if result.empty?\\r\\n    result\\r\\n  end\\r\\n\\r\\nend"}
92	38	b94efe594a8194d3a53db555	superseded	haskell	bob	module Bob where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor x | filter (not . isSpace) x == "" = "Fine. Be that way!"\nresponseFor s | yelling s                      = "Woah, chill out!"\nresponseFor q | last q == '?'                  = "Sure."\nresponseFor _                                  = "Whatever."\n\nyelling :: String -> Bool\nyelling s = all (isLetter .-> isUpper) s && any isLetter s\n  where\n    a .-> b = \\x -> not (a x) || b x -- logical implication	\N	\N	0	1	68	bob.hs	2015-07-03 10:14:59	2015-07-03 10:14:59	{"bob.hs":"module Bob where\\n\\nimport Data.Char\\n\\nresponseFor :: String -\\u003e String\\nresponseFor x | filter (not . isSpace) x == \\"\\" = \\"Fine. Be that way!\\"\\nresponseFor s | yelling s                      = \\"Woah, chill out!\\"\\nresponseFor q | last q == '?'                  = \\"Sure.\\"\\nresponseFor _                                  = \\"Whatever.\\"\\n\\nyelling :: String -\\u003e Bool\\nyelling s = all (isLetter .-\\u003e isUpper) s \\u0026\\u0026 any isLetter s\\n  where\\n    a .-\\u003e b = \\\\x -\\u003e not (a x) || b x -- logical implication"}
93	38	6c7b0b3bc09646524fc35d09	done	haskell	bob	module Bob where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor x | filter (not . isSpace) x == "" = "Fine. Be that way!"\nresponseFor s | yelling s                      = "Woah, chill out!"\nresponseFor q | last q == '?'                  = "Sure."\nresponseFor _                                  = "Whatever."\n\nyelling :: String -> Bool\nyelling s = all (not . isLower) s && any isLetter s	\N	\N	0	2	68	bob.hs	2015-08-14 10:06:27	2015-08-14 10:06:27	{"bob.hs":"module Bob where\\n\\nimport Data.Char\\n\\nresponseFor :: String -\\u003e String\\nresponseFor x | filter (not . isSpace) x == \\"\\" = \\"Fine. Be that way!\\"\\nresponseFor s | yelling s                      = \\"Woah, chill out!\\"\\nresponseFor q | last q == '?'                  = \\"Sure.\\"\\nresponseFor _                                  = \\"Whatever.\\"\\n\\nyelling :: String -\\u003e Bool\\nyelling s = all (not . isLower) s \\u0026\\u0026 any isLetter s"}
94	38	53f226c0f1854ede835e80f3	pending	python	bob	# #\n# # Skeleton file for the Python "Bob" exercise.\n# #\ndef hey(what):\n    what = what.strip()\n    if not what:\n\treturn "Fine. Be that way!"\n    elif what.isupper():\n\treturn "Whoa, chill out!"\n    elif what.endswith('?'):\n\treturn "Sure."\n    else:\n\treturn "Whatever."	\N	\N	0	1	69	bob.py	2015-06-03 07:50:07	2015-06-03 07:50:07	{"bob.py":"# #\\n# # Skeleton file for the Python \\"Bob\\" exercise.\\n# #\\ndef hey(what):\\n    what = what.strip()\\n    if not what:\\n\\treturn \\"Fine. Be that way!\\"\\n    elif what.isupper():\\n\\treturn \\"Whoa, chill out!\\"\\n    elif what.endswith('?'):\\n\\treturn \\"Sure.\\"\\n    else:\\n\\treturn \\"Whatever.\\""}
95	38	0fdb410ad224c5f8ec51438b	superseded	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nsub new{\n\tmy ($class, $key) = @_;\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	1	70	Cipher.pm	2015-05-21 17:07:48	2015-05-21 17:07:48	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
96	38	c2a12147f2ea33e5a701b72c	done	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nmy @words = 'a'..'z';\n\nsub new{\n\tmy ($class, $key) = @_;\n\tdie "ArgumentError: $key" if defined $key and ($key =~ /[^a-z]/ or not length $key);\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	2	70	Cipher.pm	2015-05-23 01:57:48	2015-05-23 01:57:48	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nmy @words = 'a'..'z';\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\tdie \\"ArgumentError: $key\\" if defined $key and ($key =~ /[^a-z]/ or not length $key);\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
97	38	ef60f125432e6ff3a4b92808	superseded	javascript	bob	var Bob = function(){\n\n};\n\n\nBob.prototype.hey = function(phrase){\n\tif(phrase == '' || phrase == '   '){\n\t\treturn 'Fine. Be that way!';\n\t} else if (phrase.search("gym") != -1){\n\t\treturn 'Whatever.';\n\t} else if(phrase[phrase.length-1]==="!"){\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase == 'I HATE YOU' || phrase == 'WHAT THE HELL WERE YOU THINKING?'){ //all caps - should use regex\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase[phrase.length-1]==="?"){\n\t\treturn 'Sure.';\n\t}\telse if (phrase[phrase.length-1]!=="?" || phrase[phrase.length-1] !== "!"){\n\t\treturn 'Whatever.';\n\t}\t\n\n}	\N	\N	0	1	71	bob.js	2015-05-26 13:19:34	2015-05-26 13:19:34	{"bob.js":"var Bob = function(){\\n\\n};\\n\\n\\nBob.prototype.hey = function(phrase){\\n\\tif(phrase == '' || phrase == '   '){\\n\\t\\treturn 'Fine. Be that way!';\\n\\t} else if (phrase.search(\\"gym\\") != -1){\\n\\t\\treturn 'Whatever.';\\n\\t} else if(phrase[phrase.length-1]===\\"!\\"){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase == 'I HATE YOU' || phrase == 'WHAT THE HELL WERE YOU THINKING?'){ //all caps - should use regex\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase[phrase.length-1]===\\"?\\"){\\n\\t\\treturn 'Sure.';\\n\\t}\\telse if (phrase[phrase.length-1]!==\\"?\\" || phrase[phrase.length-1] !== \\"!\\"){\\n\\t\\treturn 'Whatever.';\\n\\t}\\t\\n\\n}"}
98	38	03d938e81c49bb7c64eaddaf	done	javascript	bob	var Bob = function(){\n\n};\n\n\nBob.prototype.hey = function(phrase){\n   if(phrase.search(/([0-9a-zA-Z])\\S+/) === -1){\n\t\treturn 'Fine. Be that way!';\n\t} else if (phrase.search(/\\d\\?/)>-1){\n\t\treturn 'Sure.';\n\t} else if (phrase[phrase.length-1] == '?' && phrase.toUpperCase() == phrase){\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase[phrase.length-1] == '?'){\n\t\treturn 'Sure.';\n\t} else if (phrase.search(/[A-Za-z]+/) === -1){\n\t\treturn 'Whatever.';\n\t} else if (phrase.toUpperCase() == phrase){\n\t\treturn 'Woah, chill out!';\n\t} else{\n\t\treturn 'Whatever.';\n\t}\n};	\N	\N	0	2	71	bob.js	2015-05-27 20:58:38	2015-05-27 20:58:38	{"bob.js":"var Bob = function(){\\n\\n};\\n\\n\\nBob.prototype.hey = function(phrase){\\n   if(phrase.search(/([0-9a-zA-Z])\\\\S+/) === -1){\\n\\t\\treturn 'Fine. Be that way!';\\n\\t} else if (phrase.search(/\\\\d\\\\?/)\\u003e-1){\\n\\t\\treturn 'Sure.';\\n\\t} else if (phrase[phrase.length-1] == '?' \\u0026\\u0026 phrase.toUpperCase() == phrase){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase[phrase.length-1] == '?'){\\n\\t\\treturn 'Sure.';\\n\\t} else if (phrase.search(/[A-Za-z]+/) === -1){\\n\\t\\treturn 'Whatever.';\\n\\t} else if (phrase.toUpperCase() == phrase){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else{\\n\\t\\treturn 'Whatever.';\\n\\t}\\n};"}
99	38	27ab28b4dcd4f93b87b63f47	superseded	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\n    @nucleotides.chars.each do |nucleotide|\n      counts[nucleotide] += 1\n    end\n    counts\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    nucleotide_counts[nucl] || 0\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = 'ACGT'.chars\n  RNA_NUCLEOTIDES = 'ACGU'.chars\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	\N	\N	0	1	72	nucleotide-count.rb	2015-05-22 03:17:30	2015-05-22 03:17:30	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\\n    @nucleotides.chars.each do |nucleotide|\\n      counts[nucleotide] += 1\\n    end\\n    counts\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    nucleotide_counts[nucl] || 0\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = 'ACGT'.chars\\n  RNA_NUCLEOTIDES = 'ACGU'.chars\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
100	38	ee9ec460c38795e017784725	done	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, count(nucl)] }]\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    @nucleotides.chars.count(nucl)\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = %w[A C G T]\n  RNA_NUCLEOTIDES = %w[A C G U]\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	\N	\N	0	3	72	nucleotide-count.rb	2015-07-06 15:13:30	2015-07-06 15:13:30	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, count(nucl)] }]\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    @nucleotides.chars.count(nucl)\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = %w[A C G T]\\n  RNA_NUCLEOTIDES = %w[A C G U]\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
101	38	77d0ec90c29bffdd76d3abbb	superseded	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    zero_counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\n    @nucleotides.chars.each_with_object(zero_counts) do |nucleotide, counts|\n      counts[nucleotide] += 1\n    end\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    nucleotide_counts[nucl] || 0\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = %w[A C G T]\n  RNA_NUCLEOTIDES = %w[A C G U]\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	\N	\N	0	2	72	nucleotide-count.rb	2015-07-14 20:00:56	2015-07-14 20:00:56	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    zero_counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\\n    @nucleotides.chars.each_with_object(zero_counts) do |nucleotide, counts|\\n      counts[nucleotide] += 1\\n    end\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    nucleotide_counts[nucl] || 0\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = %w[A C G T]\\n  RNA_NUCLEOTIDES = %w[A C G U]\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
102	38	77e2328a9be05845a9e32d98	pending	javascript	word-count	var words = function(input) {\r\n\tvar split = input.replace('\\n'," ").split(" ");\r\n\tvar wordcount = {};\r\n\t\r\n\tsplit.forEach(function(element) {\r\n\t\t\tif (wordcount[element]) {\r\n\t\t\t\twordcount[element] = wordcount[element] + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\twordcount[element] = 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t});\r\n\treturn wordcount;\r\n};\r\n\r\nmodule.exports = words;	\N	\N	0	1	73	word-count.js	2015-05-30 01:26:05	2015-05-30 01:26:05	{"word-count.js":"var words = function(input) {\\r\\n\\tvar split = input.replace('\\\\n',\\" \\").split(\\" \\");\\r\\n\\tvar wordcount = {};\\r\\n\\t\\r\\n\\tsplit.forEach(function(element) {\\r\\n\\t\\t\\tif (wordcount[element]) {\\r\\n\\t\\t\\t\\twordcount[element] = wordcount[element] + 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\twordcount[element] = 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t});\\r\\n\\treturn wordcount;\\r\\n};\\r\\n\\r\\nmodule.exports = words;"}
103	38	477b730a93c116866ae79db3	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char\nimport Data.List       (foldl')\nimport Data.Map hiding (filter,foldl',null)\n\nwordCount :: String -> Map String Integer\nwordCount\n  = foldl' tally empty\n  . filter (not . null)\n  . words'\n  . fmap toLower\n  where\n    tally m x = insertWith (+) x 1 m\n    words' [] = []\n    words' xs = y : words' ys\n      where\n        (y,ys) = span isAlphaNum\n               $ dropWhile (not . isAlphaNum) xs	\N	\N	0	1	74	WordCount.hs	2015-07-18 05:48:35	2015-07-18 05:48:35	{"WordCount.hs":"module WordCount (wordCount) where\\n\\nimport Data.Char\\nimport Data.List       (foldl')\\nimport Data.Map hiding (filter,foldl',null)\\n\\nwordCount :: String -\\u003e Map String Integer\\nwordCount\\n  = foldl' tally empty\\n  . filter (not . null)\\n  . words'\\n  . fmap toLower\\n  where\\n    tally m x = insertWith (+) x 1 m\\n    words' [] = []\\n    words' xs = y : words' ys\\n      where\\n        (y,ys) = span isAlphaNum\\n               $ dropWhile (not . isAlphaNum) xs"}
104	38	5a2c23c7949c29804c95aa14	done	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char       (isAlphaNum,toLower)\nimport Data.List       (foldl')\nimport Data.List.Split (wordsBy)\nimport Data.Map.Strict (Map,empty,insertWith)\n\nwordCount :: String -> Map String Integer\nwordCount\n  = foldl' tally empty\n  . wordsBy (not . isAlphaNum)\n  . fmap toLower\n  where\n    tally m x = insertWith (+) x 1 m	\N	\N	0	2	74	WordCount.hs	2015-08-12 19:14:15	2015-08-12 19:14:15	{"WordCount.hs":"module WordCount (wordCount) where\\n\\nimport Data.Char       (isAlphaNum,toLower)\\nimport Data.List       (foldl')\\nimport Data.List.Split (wordsBy)\\nimport Data.Map.Strict (Map,empty,insertWith)\\n\\nwordCount :: String -\\u003e Map String Integer\\nwordCount\\n  = foldl' tally empty\\n  . wordsBy (not . isAlphaNum)\\n  . fmap toLower\\n  where\\n    tally m x = insertWith (+) x 1 m"}
105	38	cd19b780ff8aaca54ec5086f	done	scala	word-count	class Phrase(phrase: String) {\n  val _matcher = """[\\w']+""".r\n  val normalized = phrase.toLowerCase\n  val words = _matcher.findAllIn(normalized).toList\n\n  def wordCount = words.groupBy(e => e).map(kv => kv._1 -> kv._2.length)\n}	\N	\N	0	1	75	word_count.scala	2015-06-08 00:07:42	2015-06-08 00:07:42	{"word_count.scala":"class Phrase(phrase: String) {\\n  val _matcher = \\"\\"\\"[\\\\w']+\\"\\"\\".r\\n  val normalized = phrase.toLowerCase\\n  val words = _matcher.findAllIn(normalized).toList\\n\\n  def wordCount = words.groupBy(e =\\u003e e).map(kv =\\u003e kv._1 -\\u003e kv._2.length)\\n}"}
106	38	3804a9237a95792724eaf9f3	superseded	python	gigasecond	import datetime\n\ndef add_gigasecond(birth_date):\n    days = 10**9/((60*60)*24)\n    gsecs = birth_date + datetime.timedelta(days)\n    return gsecs	\N	\N	0	1	76	gigasecond.py	2015-06-14 19:19:21	2015-06-14 19:19:21	{"gigasecond.py":"import datetime\\n\\ndef add_gigasecond(birth_date):\\n    days = 10**9/((60*60)*24)\\n    gsecs = birth_date + datetime.timedelta(days)\\n    return gsecs"}
107	38	b75790fa99f431ce6a6bea5b	pending	python	gigasecond	import datetime\n\ndef add_gigasecond(birth_date):\n    return birth_date + datetime.timedelta(seconds = 10**9)	\N	\N	0	2	76	gigasecond.py	2015-07-05 15:13:31	2015-07-05 15:13:31	{"gigasecond.py":"import datetime\\n\\ndef add_gigasecond(birth_date):\\n    return birth_date + datetime.timedelta(seconds = 10**9)"}
108	38	e11c39a4e46f3ba8714d553f	pending	python	grade-school	from collections import defaultdict\nclass School():\n    def __init__(self,what):\n        self.db = defaultdict(set)\n        self.school_name = what\n\n    def add(self,what,grade):\n        self.db[grade].add(what)\n        \n    def grade(self,what):\n        return self.db[what]\n\n    def sort(self):\n        #for testing purposes \n        new_dict = {}\n        for k,v in self.db.items():\n            new_dict[k] = tuple(v)\n        return new_dict	\N	\N	0	1	77	school.py	2015-07-21 17:26:52	2015-07-21 17:26:52	{"school.py":"from collections import defaultdict\\nclass School():\\n    def __init__(self,what):\\n        self.db = defaultdict(set)\\n        self.school_name = what\\n\\n    def add(self,what,grade):\\n        self.db[grade].add(what)\\n        \\n    def grade(self,what):\\n        return self.db[what]\\n\\n    def sort(self):\\n        #for testing purposes \\n        new_dict = {}\\n        for k,v in self.db.items():\\n            new_dict[k] = tuple(v)\\n        return new_dict"}
109	38	210bfcd0f272ecaa27c78c6c	superseded	javascript	crypto-square	var CryptoSquare = function CryptoSquare(input){ \n\t\t\n\t\tthis.normalizePlaintext = function normalizePlaintext(){\n\t\t\treturn input.toLowerCase().replace(/[^\\w\\d]/g,"");\n\t\t}\n\t\t\n\t\tthis.size = function size(){\n\t\t    return Math.ceil(Math.sqrt(this.normalized.length));\n\t\t}\n\n\t\tthis.plaintextSegments = function plaintextSegments(){\n\t\t\treturn this.separate(this.normalized).split(" ");\n\t\t}\n\n\t\tthis.ciphertext = function ciphertext(){\n\t\t\tvar result = "";\n\t\t\tvar plaintext = this.plaintextSegments();\n\t\t\tvar rows=this.size();\n\t\t\tfor(var i=0;i<rows;i++){\n\t\t\t\tfor(var chunk in plaintext){\n\t\t\t\t\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\t\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\treturn result;\t\n\t\t}\n\n\t\tthis.normalizeCiphertext = function normalizeCiphertext(){\n\t\t\treturn this.separate(this.ciphertext());\t\n\t\t}\n\n\t\tthis.separate = function(text){\n\t\t\tvar result = "";\n\t\t\tvar rows = this.size();\n\t\t\ttext.split("").map(function map(letter,index){\n\t\t\t\tresult+=letter;\n\t\t\t\tif((index+1)%rows===0)result+=" ";\n\t\t\t});\n\t\t\treturn result.trim();\n\t\t}\n\n\t\tthis.normalized = this.normalizePlaintext(input);\n}\nmodule.exports = CryptoSquare;	\N	\N	0	1	78	crypto-square.js	2015-07-15 20:35:40	2015-07-15 20:35:40	{"crypto-square.js":"var CryptoSquare = function CryptoSquare(input){ \\n\\t\\t\\n\\t\\tthis.normalizePlaintext = function normalizePlaintext(){\\n\\t\\t\\treturn input.toLowerCase().replace(/[^\\\\w\\\\d]/g,\\"\\");\\n\\t\\t}\\n\\t\\t\\n\\t\\tthis.size = function size(){\\n\\t\\t    return Math.ceil(Math.sqrt(this.normalized.length));\\n\\t\\t}\\n\\n\\t\\tthis.plaintextSegments = function plaintextSegments(){\\n\\t\\t\\treturn this.separate(this.normalized).split(\\" \\");\\n\\t\\t}\\n\\n\\t\\tthis.ciphertext = function ciphertext(){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar plaintext = this.plaintextSegments();\\n\\t\\t\\tvar rows=this.size();\\n\\t\\t\\tfor(var i=0;i\\u003crows;i++){\\n\\t\\t\\t\\tfor(var chunk in plaintext){\\n\\t\\t\\t\\t\\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\t\\n\\t\\t\\treturn result;\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalizeCiphertext = function normalizeCiphertext(){\\n\\t\\t\\treturn this.separate(this.ciphertext());\\t\\n\\t\\t}\\n\\n\\t\\tthis.separate = function(text){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar rows = this.size();\\n\\t\\t\\ttext.split(\\"\\").map(function map(letter,index){\\n\\t\\t\\t\\tresult+=letter;\\n\\t\\t\\t\\tif((index+1)%rows===0)result+=\\" \\";\\n\\t\\t\\t});\\n\\t\\t\\treturn result.trim();\\n\\t\\t}\\n\\n\\t\\tthis.normalized = this.normalizePlaintext(input);\\n}\\nmodule.exports = CryptoSquare;"}
110	38	5a8ec102d2ca5aaebe1ccf8e	done	javascript	crypto-square	var CryptoSquare = function CryptoSquare(input){ \n\t\t\n\t\tthis.normalizePlaintext = function normalizePlaintext(){\n\t\t\treturn input.toLowerCase().replace(/[^\\w\\d]/g,"");\n\t\t}\n\t\t\n\t\tthis.size = function size(){\n\t\t    return Math.ceil(Math.sqrt(this.normalized.length));\n\t\t}\n\n\t\tthis.plaintextSegments = function plaintextSegments(){\n\t\t\treturn this.separate(this.normalized).split(" ");\n\t\t}\n\n\t\tthis.ciphertext = function ciphertext(){\n\t\t\tvar result = "";\n\t\t\tvar plaintext = this.plaintextSegments();\n\t\t\tvar rows=this.size();\n\t\t\tfor(var i=0;i<rows;i++){\n\t\t\t\tfor(var chunk in plaintext){\n\t\t\t\t\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\t\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\treturn result;\t\n\t\t}\n\n\t\tthis.normalizeCiphertext = function normalizeCiphertext(){\n\t\t\treturn this.separate(this.ciphertext());\t\n\t\t}\n\n\t\tthis.separate = function(text){\n\t\t\tvar expression = new RegExp('.{1,'+this.size()+'}',"g")\n\t\t\treturn text.match(expression).join(" ");\t\n\t\t}\n\n\t\tthis.normalized = this.normalizePlaintext(input);\n}\nmodule.exports = CryptoSquare;	\N	\N	0	2	78	crypto-square.js	2015-09-14 17:08:21	2015-09-14 17:08:21	{"crypto-square.js":"var CryptoSquare = function CryptoSquare(input){ \\n\\t\\t\\n\\t\\tthis.normalizePlaintext = function normalizePlaintext(){\\n\\t\\t\\treturn input.toLowerCase().replace(/[^\\\\w\\\\d]/g,\\"\\");\\n\\t\\t}\\n\\t\\t\\n\\t\\tthis.size = function size(){\\n\\t\\t    return Math.ceil(Math.sqrt(this.normalized.length));\\n\\t\\t}\\n\\n\\t\\tthis.plaintextSegments = function plaintextSegments(){\\n\\t\\t\\treturn this.separate(this.normalized).split(\\" \\");\\n\\t\\t}\\n\\n\\t\\tthis.ciphertext = function ciphertext(){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar plaintext = this.plaintextSegments();\\n\\t\\t\\tvar rows=this.size();\\n\\t\\t\\tfor(var i=0;i\\u003crows;i++){\\n\\t\\t\\t\\tfor(var chunk in plaintext){\\n\\t\\t\\t\\t\\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\t\\n\\t\\t\\treturn result;\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalizeCiphertext = function normalizeCiphertext(){\\n\\t\\t\\treturn this.separate(this.ciphertext());\\t\\n\\t\\t}\\n\\n\\t\\tthis.separate = function(text){\\n\\t\\t\\tvar expression = new RegExp('.{1,'+this.size()+'}',\\"g\\")\\n\\t\\t\\treturn text.match(expression).join(\\" \\");\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalized = this.normalizePlaintext(input);\\n}\\nmodule.exports = CryptoSquare;"}
111	40	fc16ebc60a7db6a1a343b672	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	79	/python/wordy/wordy.py	2015-08-06 06:05:48	2015-08-06 06:05:48	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
112	40	eb07e45cfbb882288fce1fc5	done	python	grade-school	class School:\n\n    def __init__(self, name):\n        self._name = name\n        self.db = {}\n\n    def add(self, student_name, grade):\n        if grade not in self.db:\n            self.db[grade] = set()\n\n        self.db[grade].add(student_name)\n\n    def grade(self, grade_to_look_up):\n            return self.db.get(grade_to_look_up, set())\n\n    def sort(self):\n        return {grade: tuple(sorted(student_names))\n            for grade, student_names in self.db.items()}	\N	\N	0	2	80	school.py	2015-07-28 21:22:24	2015-07-28 21:22:24	{"school.py":"class School:\\n\\n    def __init__(self, name):\\n        self._name = name\\n        self.db = {}\\n\\n    def add(self, student_name, grade):\\n        if grade not in self.db:\\n            self.db[grade] = set()\\n\\n        self.db[grade].add(student_name)\\n\\n    def grade(self, grade_to_look_up):\\n            return self.db.get(grade_to_look_up, set())\\n\\n    def sort(self):\\n        return {grade: tuple(sorted(student_names))\\n            for grade, student_names in self.db.items()}"}
113	40	2eb29f653b4987366c3da839	superseded	python	grade-school	class School:\n\n    def __init__(self, name):\n        self._name = name\n        self.db = {}\n\n    def add(self, student_name, grade):\n        if grade not in self.db:\n            self.db[grade] = set()\n\n        self.db[grade].add(student_name)\n\n    def grade(self, grade_to_look_up):\n            return self.db.get(grade_to_look_up, set())\n\n    def sort(self):\n        sorted_students = {\n            3: ("Kyle",),\n            4: ("Christopher", "Jennifer",),\n            6: ("Kareem",)\n        }\n\n        return sorted_students	\N	\N	0	1	80	school.py	2015-08-01 15:58:12	2015-08-01 15:58:12	{"school.py":"class School:\\n\\n    def __init__(self, name):\\n        self._name = name\\n        self.db = {}\\n\\n    def add(self, student_name, grade):\\n        if grade not in self.db:\\n            self.db[grade] = set()\\n\\n        self.db[grade].add(student_name)\\n\\n    def grade(self, grade_to_look_up):\\n            return self.db.get(grade_to_look_up, set())\\n\\n    def sort(self):\\n        sorted_students = {\\n            3: (\\"Kyle\\",),\\n            4: (\\"Christopher\\", \\"Jennifer\\",),\\n            6: (\\"Kareem\\",)\\n        }\\n\\n        return sorted_students"}
114	40	342e6c55a0b29004ddb693b1	done	javascript	pythagorean-triplet	(function() {\n  'use strict';\n\n  var Triplet = function(first, second, third) {\n    this.first = first;\n    this.second = second;\n    this.third = third;\n    this.angles = [first, second, third].sort(sortNumber);\n  };\n\n  Triplet.prototype.sum = function() {\n    return this.first + this.second + this.third;\n  };\n\n  Triplet.prototype.product = function() {\n    return this.first * this.second * this.third;\n  };\n\n  Triplet.prototype.isPythagorean = function() {\n    var intTest = /^-?(\\d+|0)$/;\n    if (!intTest.test(this.angles[2])) { return false; }\n\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\n  };\n\n  Triplet.where = function(options) {\n    var max = options['maxFactor'];\n    var min = options['minFactor'] || 1;\n    var sum = options['sum'];\n    var result = this.calculateTriplets(min, max);\n\n    if (sum) {\n      return this.matchSum(sum, result);\n    } else {\n      return result;\n    }\n  };\n\n  Triplet.calculateTriplets = function(min, max) {\n    var triplets = [];\n    for (var x = min; x < max; x++) {\n      for (var y = min; y < max; y++) {\n        var z = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n        var t = new Triplet(x, y, z);\n        if (t.isPythagorean() && !Triplet.inCollection(triplets, t)) {\n          triplets.push(t);\n        }\n      }\n    }\n    return triplets;\n  };\n\n  Triplet.inCollection = function(collection, triplet) {\n    var filtered = collection.filter(function(x) {\n      return x.angles.sort().eql(triplet.angles.sort());\n    });\n    return filtered.length !== 0;\n  };\n\n  Triplet.matchSum = function(sum, collection) {\n    var result = [];\n    for (var x = 0; x < collection.length; x++) {\n      if (collection[x].sum() === sum) {\n        result.push(collection[x]);\n      }\n    }\n    return result;\n  };\n\n  Array.prototype.eql = function(other){\n    if (this.length !== other.length) { return false; }\n\n    for(var i = 0; i < this.length; i++) {\n      if(this[i] !== other[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  function sortNumber(a,b) {\n    return a - b;\n  }\n\n  module.exports = Triplet;\n})();	\N	\N	0	2	81	triplet.js	2015-08-16 00:09:26	2015-08-16 00:09:26	{"triplet.js":"(function() {\\n  'use strict';\\n\\n  var Triplet = function(first, second, third) {\\n    this.first = first;\\n    this.second = second;\\n    this.third = third;\\n    this.angles = [first, second, third].sort(sortNumber);\\n  };\\n\\n  Triplet.prototype.sum = function() {\\n    return this.first + this.second + this.third;\\n  };\\n\\n  Triplet.prototype.product = function() {\\n    return this.first * this.second * this.third;\\n  };\\n\\n  Triplet.prototype.isPythagorean = function() {\\n    var intTest = /^-?(\\\\d+|0)$/;\\n    if (!intTest.test(this.angles[2])) { return false; }\\n\\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\\n  };\\n\\n  Triplet.where = function(options) {\\n    var max = options['maxFactor'];\\n    var min = options['minFactor'] || 1;\\n    var sum = options['sum'];\\n    var result = this.calculateTriplets(min, max);\\n\\n    if (sum) {\\n      return this.matchSum(sum, result);\\n    } else {\\n      return result;\\n    }\\n  };\\n\\n  Triplet.calculateTriplets = function(min, max) {\\n    var triplets = [];\\n    for (var x = min; x \\u003c max; x++) {\\n      for (var y = min; y \\u003c max; y++) {\\n        var z = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\\n        var t = new Triplet(x, y, z);\\n        if (t.isPythagorean() \\u0026\\u0026 !Triplet.inCollection(triplets, t)) {\\n          triplets.push(t);\\n        }\\n      }\\n    }\\n    return triplets;\\n  };\\n\\n  Triplet.inCollection = function(collection, triplet) {\\n    var filtered = collection.filter(function(x) {\\n      return x.angles.sort().eql(triplet.angles.sort());\\n    });\\n    return filtered.length !== 0;\\n  };\\n\\n  Triplet.matchSum = function(sum, collection) {\\n    var result = [];\\n    for (var x = 0; x \\u003c collection.length; x++) {\\n      if (collection[x].sum() === sum) {\\n        result.push(collection[x]);\\n      }\\n    }\\n    return result;\\n  };\\n\\n  Array.prototype.eql = function(other){\\n    if (this.length !== other.length) { return false; }\\n\\n    for(var i = 0; i \\u003c this.length; i++) {\\n      if(this[i] !== other[i]) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  };\\n\\n  function sortNumber(a,b) {\\n    return a - b;\\n  }\\n\\n  module.exports = Triplet;\\n})();"}
115	40	dce6c1a86aa64711bf792f90	superseded	javascript	pythagorean-triplet	(function() {\n  'use strict';\n\n  var Triplet = function(first, second, third) {\n    this.first = first;\n    this.second = second;\n    this.third = third;\n    this.angles = [first, second, third].sort(sortNumber);\n  };\n\n  Triplet.prototype.sum = function() {\n    return this.first + this.second + this.third;\n  };\n\n  Triplet.prototype.product = function() {\n    return this.first * this.second * this.third;\n  };\n\n  Triplet.prototype.isPythagorean = function() {\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\n  };\n\n  Triplet.where = function(options) {\n    var max = options['maxFactor'];\n    var min = options['minFactor'] || 1;\n    var sum = options['sum'];\n    var result = this.calculateTriplets(min, max);\n\n    if (sum) {\n      return this.matchSum(sum, result);\n    } else {\n      return result;\n    }\n  };\n\n  Triplet.calculateTriplets = function(min, max) {\n    var triplets = [];\n    for (var x = min; x <= max; x++) {\n      for (var y = min; y <= max; y++) {\n        for (var z = min; z <= max; z++) {\n          var t = new Triplet(x, y, z);\n          if (t.isPythagorean() && !(this.inCollection(triplets, t))) {\n            triplets.push(t);\n          }\n        }\n      }\n    }\n    return triplets;\n  };\n\n  Triplet.inCollection = function(collection, triplet) {\n    var filtered = collection.filter(function(x) {\n      return x.angles.sort().eql(triplet.angles.sort());\n    });\n    return filtered.length !== 0;\n  };\n\n  Triplet.matchSum = function(sum, collection) {\n    var result = [];\n    for (var x = 0; x < collection.length; x++) {\n      if (collection[x].sum() === sum) {\n        result.push(collection[x]);\n      }\n    }\n    return result;\n  }\n\n  Array.prototype.eql = function(other){\n    if (this.length !== other.length) { return false; }\n\n    for(var i = 0; i < this.length; i++) {\n      if(this[i] !== other[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  function sortNumber(a,b) {\n    return a - b;\n  }\n\n  module.exports = Triplet;\n})();	\N	\N	0	1	81	triplet.js	2015-09-02 20:04:51	2015-09-02 20:04:51	{"triplet.js":"(function() {\\n  'use strict';\\n\\n  var Triplet = function(first, second, third) {\\n    this.first = first;\\n    this.second = second;\\n    this.third = third;\\n    this.angles = [first, second, third].sort(sortNumber);\\n  };\\n\\n  Triplet.prototype.sum = function() {\\n    return this.first + this.second + this.third;\\n  };\\n\\n  Triplet.prototype.product = function() {\\n    return this.first * this.second * this.third;\\n  };\\n\\n  Triplet.prototype.isPythagorean = function() {\\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\\n  };\\n\\n  Triplet.where = function(options) {\\n    var max = options['maxFactor'];\\n    var min = options['minFactor'] || 1;\\n    var sum = options['sum'];\\n    var result = this.calculateTriplets(min, max);\\n\\n    if (sum) {\\n      return this.matchSum(sum, result);\\n    } else {\\n      return result;\\n    }\\n  };\\n\\n  Triplet.calculateTriplets = function(min, max) {\\n    var triplets = [];\\n    for (var x = min; x \\u003c= max; x++) {\\n      for (var y = min; y \\u003c= max; y++) {\\n        for (var z = min; z \\u003c= max; z++) {\\n          var t = new Triplet(x, y, z);\\n          if (t.isPythagorean() \\u0026\\u0026 !(this.inCollection(triplets, t))) {\\n            triplets.push(t);\\n          }\\n        }\\n      }\\n    }\\n    return triplets;\\n  };\\n\\n  Triplet.inCollection = function(collection, triplet) {\\n    var filtered = collection.filter(function(x) {\\n      return x.angles.sort().eql(triplet.angles.sort());\\n    });\\n    return filtered.length !== 0;\\n  };\\n\\n  Triplet.matchSum = function(sum, collection) {\\n    var result = [];\\n    for (var x = 0; x \\u003c collection.length; x++) {\\n      if (collection[x].sum() === sum) {\\n        result.push(collection[x]);\\n      }\\n    }\\n    return result;\\n  }\\n\\n  Array.prototype.eql = function(other){\\n    if (this.length !== other.length) { return false; }\\n\\n    for(var i = 0; i \\u003c this.length; i++) {\\n      if(this[i] !== other[i]) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  };\\n\\n  function sortNumber(a,b) {\\n    return a - b;\\n  }\\n\\n  module.exports = Triplet;\\n})();"}
116	40	89a262e94ccd7c19704264bc	pending	ruby	sum-of-multiples	class SumOfMultiples\r\n  def initialize(*multiples)\r\n    @multiples = multiples\r\n  end\r\n\r\n  def to(n)\r\n    (0...n).to_a.select{ |x| multiple? x }.inject(:+)\r\n  end\r\n\r\n  def self.to(n)\r\n    SumOfMultiples.new(3, 5).to(n)\r\n  end\r\n\r\n  private\r\n\r\n  def multiple?(x)\r\n    @multiples.any? { |m| x % m == 0 }\r\n  end\r\nend	\N	\N	0	1	82	\\ruby\\sum-of-multiples\\sum.rb	2015-09-05 00:07:57	2015-09-05 00:07:57	{"\\\\ruby\\\\sum-of-multiples\\\\sum.rb":"class SumOfMultiples\\r\\n  def initialize(*multiples)\\r\\n    @multiples = multiples\\r\\n  end\\r\\n\\r\\n  def to(n)\\r\\n    (0...n).to_a.select{ |x| multiple? x }.inject(:+)\\r\\n  end\\r\\n\\r\\n  def self.to(n)\\r\\n    SumOfMultiples.new(3, 5).to(n)\\r\\n  end\\r\\n\\r\\n  private\\r\\n\\r\\n  def multiple?(x)\\r\\n    @multiples.any? { |m| x % m == 0 }\\r\\n  end\\r\\nend"}
117	40	d167122148467fc6d7d8cd89	done	ruby	secret-handshake	class SecretHandshake\n\n  HANDSHAKES = { \n                  1     => "wink",\n                  10    => "double blink",\n                  100   => "close your eyes",\n                  1000  => "jump"\n  }\n\n  attr_reader :decimal_number\n\n  def initialize decimal_number\n    @decimal_number = decimal_number\n  end\n\n  def commands\n    if decimal_number.is_a? Integer\n      secret_handshakes\n    else\n      []\n    end\n  end\n\nprivate\n\n  def binary_number\n    decimal_number.to_s 2\n  end\n\n  def translator\n    result = Array.new\n\n    binary_number.chars.reverse.each_with_index do |digit, index|\n      result << HANDSHAKES[ digit.ljust( index + 1, '0' ).to_i ]\n    end\n\n    result.compact\n  end\n\n  def secret_handshakes\n    if binary_number.length == 5\n      translator.reverse\n    else\n      translator\n    end\n  end\n\nend	\N	\N	0	1	83	/ruby/secret-handshake/secret_handshake.rb	2015-07-21 08:50:13	2015-07-21 08:50:13	{"/ruby/secret-handshake/secret_handshake.rb":"class SecretHandshake\\n\\n  HANDSHAKES = { \\n                  1     =\\u003e \\"wink\\",\\n                  10    =\\u003e \\"double blink\\",\\n                  100   =\\u003e \\"close your eyes\\",\\n                  1000  =\\u003e \\"jump\\"\\n  }\\n\\n  attr_reader :decimal_number\\n\\n  def initialize decimal_number\\n    @decimal_number = decimal_number\\n  end\\n\\n  def commands\\n    if decimal_number.is_a? Integer\\n      secret_handshakes\\n    else\\n      []\\n    end\\n  end\\n\\nprivate\\n\\n  def binary_number\\n    decimal_number.to_s 2\\n  end\\n\\n  def translator\\n    result = Array.new\\n\\n    binary_number.chars.reverse.each_with_index do |digit, index|\\n      result \\u003c\\u003c HANDSHAKES[ digit.ljust( index + 1, '0' ).to_i ]\\n    end\\n\\n    result.compact\\n  end\\n\\n  def secret_handshakes\\n    if binary_number.length == 5\\n      translator.reverse\\n    else\\n      translator\\n    end\\n  end\\n\\nend"}
118	40	92c4672cfbabb7a1d535774c	superseded	python	word-count	from collections import defaultdict\n\n\ndef word_count(phrase):\n    word_count = defaultdict(lambda: 0)\n\n    for word in phrase.split():\n        word_count[word] += 1\n\n    return word_count	\N	\N	0	1	84	wordcount.py	2015-07-28 13:06:08	2015-07-28 13:06:08	{"wordcount.py":"from collections import defaultdict\\n\\n\\ndef word_count(phrase):\\n    word_count = defaultdict(lambda: 0)\\n\\n    for word in phrase.split():\\n        word_count[word] += 1\\n\\n    return word_count"}
119	40	11d2bc8364c190a2cca78562	pending	python	word-count	from collections import Counter\n\n\ndef word_count(phrase):\n    return Counter(phrase.split())	\N	\N	0	2	84	wordcount.py	2015-08-01 21:15:24	2015-08-01 21:15:24	{"wordcount.py":"from collections import Counter\\n\\n\\ndef word_count(phrase):\\n    return Counter(phrase.split())"}
120	40	92d1b9effa6fca57e9354fe0	pending	csharp	bob	private static string Hey(string s)\r\n{\r\n\ts = s.Trim();\r\n\tif (s.ToUpper() == s && s.Any(char.IsLetter))\r\n\t\treturn "Whoa, chill out!";\r\n\telse if (s.EndsWith("?"))\r\n\t\treturn "Sure.";\r\n\telse if (s == "")\r\n\t\treturn "Fine. Be that way!";\r\n\treturn "Whatever.";\r\n}	\N	\N	0	1	85	Bob.cs	2015-08-11 21:45:10	2015-08-11 21:45:10	{"Bob.cs":"private static string Hey(string s)\\r\\n{\\r\\n\\ts = s.Trim();\\r\\n\\tif (s.ToUpper() == s \\u0026\\u0026 s.Any(char.IsLetter))\\r\\n\\t\\treturn \\"Whoa, chill out!\\";\\r\\n\\telse if (s.EndsWith(\\"?\\"))\\r\\n\\t\\treturn \\"Sure.\\";\\r\\n\\telse if (s == \\"\\")\\r\\n\\t\\treturn \\"Fine. Be that way!\\";\\r\\n\\treturn \\"Whatever.\\";\\r\\n}"}
121	40	ca04efc457e84f43166786b2	pending	go	grains	package grains\n\nimport (\n\t"errors"\n)\n\nfunc Square(n int) (uint64, error) {\n\tif n < 1 || n > 64 {\n\t\treturn 0, errors.New("out of range")\n\t}\n\treturn 1 << (uint(n) - 1), nil\n}\n\nfunc Total() uint64 {\n\tconst n uint = 64 // I'd have expected this as an input\n\treturn 1<<n - 1\n}	\N	\N	0	1	86	grains.go	2015-08-29 01:37:18	2015-08-29 01:37:18	{"grains.go":"package grains\\n\\nimport (\\n\\t\\"errors\\"\\n)\\n\\nfunc Square(n int) (uint64, error) {\\n\\tif n \\u003c 1 || n \\u003e 64 {\\n\\t\\treturn 0, errors.New(\\"out of range\\")\\n\\t}\\n\\treturn 1 \\u003c\\u003c (uint(n) - 1), nil\\n}\\n\\nfunc Total() uint64 {\\n\\tconst n uint = 64 // I'd have expected this as an input\\n\\treturn 1\\u003c\\u003cn - 1\\n}"}
122	40	5e3016c52b010c9491fb23f4	superseded	haskell	simple-linked-list	module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\r\n\r\ndata List a = EmptyList | ListElement a (List a) \r\n\r\nnil :: List a\r\nnil = EmptyList\r\n\r\nisNil :: List a -> Bool\r\nisNil EmptyList = True\r\nisNil _         = False\r\n\r\nnew :: a -> List a -> List a\r\nnew x xs = ListElement x (xs)\r\n\r\ndatum :: List a -> a\r\ndatum (ListElement x _) = x\r\n\r\nnext :: List a -> List a\r\nnext EmptyList = EmptyList\r\nnext (ListElement _ xs) = xs\r\n\r\nfromList :: [a] -> List a\r\nfromList []     = EmptyList\r\nfromList (x:xs) = new x $ fromList xs\r\n\r\ntoList :: List a -> [a]\r\ntoList EmptyList = []\r\ntoList (ListElement x xs) = x : toList xs\r\n\r\n(+++) :: List a -> a -> List a\r\n(+++) EmptyList y = new y EmptyList\r\n(+++) (ListElement x xs) y = new x $ xs +++ y\r\n\r\nreverseLinkedList :: List a -> List a\r\nreverseLinkedList EmptyList = EmptyList\r\nreverseLinkedList (ListElement x xs) = reverseLinkedList xs +++ x	\N	\N	0	1	87	LinkedList.hs	2015-08-29 10:04:47	2015-08-29 10:04:47	{"LinkedList.hs":"module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\\r\\n\\r\\ndata List a = EmptyList | ListElement a (List a) \\r\\n\\r\\nnil :: List a\\r\\nnil = EmptyList\\r\\n\\r\\nisNil :: List a -\\u003e Bool\\r\\nisNil EmptyList = True\\r\\nisNil _         = False\\r\\n\\r\\nnew :: a -\\u003e List a -\\u003e List a\\r\\nnew x xs = ListElement x (xs)\\r\\n\\r\\ndatum :: List a -\\u003e a\\r\\ndatum (ListElement x _) = x\\r\\n\\r\\nnext :: List a -\\u003e List a\\r\\nnext EmptyList = EmptyList\\r\\nnext (ListElement _ xs) = xs\\r\\n\\r\\nfromList :: [a] -\\u003e List a\\r\\nfromList []     = EmptyList\\r\\nfromList (x:xs) = new x $ fromList xs\\r\\n\\r\\ntoList :: List a -\\u003e [a]\\r\\ntoList EmptyList = []\\r\\ntoList (ListElement x xs) = x : toList xs\\r\\n\\r\\n(+++) :: List a -\\u003e a -\\u003e List a\\r\\n(+++) EmptyList y = new y EmptyList\\r\\n(+++) (ListElement x xs) y = new x $ xs +++ y\\r\\n\\r\\nreverseLinkedList :: List a -\\u003e List a\\r\\nreverseLinkedList EmptyList = EmptyList\\r\\nreverseLinkedList (ListElement x xs) = reverseLinkedList xs +++ x"}
151	49	40f8331614a03050a5589fc1	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn dna/count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	1	107	dna.clj	2015-07-24 18:43:10	2015-07-24 18:43:10	{"dna.clj":"(ns dna)\\n\\n(def NUCLEOTIDES (set \\"ACGTU\\"))\\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\\\U))\\n\\n(defn dna/count [nucleotide dna]\\n  (when (not (contains? NUCLEOTIDES nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))"}
123	40	c8b9c783cbbe80d122b96992	pending	haskell	simple-linked-list	module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\r\n\r\ndata List a = EmptyList | ListElement a (List a) \r\n\tderiving (Show)\r\n\r\nnil :: List a\r\nnil = EmptyList\r\n\r\nisNil :: List a -> Bool\r\nisNil EmptyList = True\r\nisNil _         = False\r\n\r\nnew :: a -> List a -> List a\r\nnew = ListElement\r\n\r\ndatum :: List a -> a\r\ndatum EmptyList = undefined\r\ndatum (ListElement x _) = x\r\n\r\nnext :: List a -> List a\r\nnext EmptyList = undefined\r\nnext (ListElement _ xs) = xs\r\n\r\nfromList :: [a] -> List a\r\nfromList = foldr new EmptyList\r\n\r\nfoldrList :: (a -> b -> b) -> b -> List a -> b\r\nfoldrList _ z EmptyList = z\r\nfoldrList f z (ListElement x xs) = x `f` foldrList f z xs\r\n\r\nfoldlList :: (b -> a -> b) -> b -> List a -> b\r\nfoldlList _ z EmptyList = z\r\nfoldlList f z (ListElement x xs) = let z' = z `f` x\r\n                                in seq z' $ foldlList f z' xs  \r\n\r\ntoList :: List a -> [a]\r\ntoList = foldrList (:) []\r\n\r\nreverseLinkedList :: List a -> List a\r\nreverseLinkedList = foldlList (flip new) EmptyList	\N	\N	0	2	87	LinkedList.hs	2015-09-01 04:45:58	2015-09-01 04:45:58	{"LinkedList.hs":"module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\\r\\n\\r\\ndata List a = EmptyList | ListElement a (List a) \\r\\n\\tderiving (Show)\\r\\n\\r\\nnil :: List a\\r\\nnil = EmptyList\\r\\n\\r\\nisNil :: List a -\\u003e Bool\\r\\nisNil EmptyList = True\\r\\nisNil _         = False\\r\\n\\r\\nnew :: a -\\u003e List a -\\u003e List a\\r\\nnew = ListElement\\r\\n\\r\\ndatum :: List a -\\u003e a\\r\\ndatum EmptyList = undefined\\r\\ndatum (ListElement x _) = x\\r\\n\\r\\nnext :: List a -\\u003e List a\\r\\nnext EmptyList = undefined\\r\\nnext (ListElement _ xs) = xs\\r\\n\\r\\nfromList :: [a] -\\u003e List a\\r\\nfromList = foldr new EmptyList\\r\\n\\r\\nfoldrList :: (a -\\u003e b -\\u003e b) -\\u003e b -\\u003e List a -\\u003e b\\r\\nfoldrList _ z EmptyList = z\\r\\nfoldrList f z (ListElement x xs) = x `f` foldrList f z xs\\r\\n\\r\\nfoldlList :: (b -\\u003e a -\\u003e b) -\\u003e b -\\u003e List a -\\u003e b\\r\\nfoldlList _ z EmptyList = z\\r\\nfoldlList f z (ListElement x xs) = let z' = z `f` x\\r\\n                                in seq z' $ foldlList f z' xs  \\r\\n\\r\\ntoList :: List a -\\u003e [a]\\r\\ntoList = foldrList (:) []\\r\\n\\r\\nreverseLinkedList :: List a -\\u003e List a\\r\\nreverseLinkedList = foldlList (flip new) EmptyList"}
124	40	245f1a971e480c774851711a	pending	ruby	hamming	class Hamming \n\n      def Hamming.compute strandA, strandB \n        hamming_distance = 0\n        end_point = strandA.length\n        length_difference = strandA.length - strandB.length\n\n        if length_difference > 0\n            end_point = strandB.length\n        end\n\n        end_point -= 1;\n\n        for i in ( 0..end_point )\n               if strandA[i] != strandB[i]\n                    hamming_distance += 1\n               end\n        end\n\n        return hamming_distance\n\n    end\n\nend	\N	\N	0	1	88	hamming.rb	2015-08-08 04:36:02	2015-08-08 04:36:02	{"hamming.rb":"class Hamming \\n\\n      def Hamming.compute strandA, strandB \\n        hamming_distance = 0\\n        end_point = strandA.length\\n        length_difference = strandA.length - strandB.length\\n\\n        if length_difference \\u003e 0\\n            end_point = strandB.length\\n        end\\n\\n        end_point -= 1;\\n\\n        for i in ( 0..end_point )\\n               if strandA[i] != strandB[i]\\n                    hamming_distance += 1\\n               end\\n        end\\n\\n        return hamming_distance\\n\\n    end\\n\\nend"}
125	40	25d40fd4ab2c204ee9aa02f8	superseded	python	gigasecond	import datetime\n\ndef add_gigasecond(birth_date):\n    days = 10**9/((60*60)*24)\n    gsecs = birth_date + datetime.timedelta(days)\n    return gsecs	\N	\N	0	1	89	gigasecond.py	2015-07-27 07:48:42	2015-07-27 07:48:42	{"gigasecond.py":"import datetime\\n\\ndef add_gigasecond(birth_date):\\n    days = 10**9/((60*60)*24)\\n    gsecs = birth_date + datetime.timedelta(days)\\n    return gsecs"}
126	40	139a66696b5fc67a0d1c883a	pending	python	gigasecond	import datetime\n\ndef add_gigasecond(birth_date):\n    return birth_date + datetime.timedelta(seconds = 10**9)	\N	\N	0	2	89	gigasecond.py	2015-09-11 02:55:44	2015-09-11 02:55:44	{"gigasecond.py":"import datetime\\n\\ndef add_gigasecond(birth_date):\\n    return birth_date + datetime.timedelta(seconds = 10**9)"}
127	40	1bce1e5e1ace279dd12f3500	superseded	python	series	class Series(object):\n\n    def __init__(self, input_string):\n        self.num = input_string\n        self.length = len(self.num)\n        try:\n            self.lst = [int(c) for c in self.num]\n        except:\n            self.lst = []\n            \n    def slices(self, n):\n\n        if n > self.length or n <= 0:\n            raise ValueError("Invalid slice length for this series: %d" % n)\n\n        ret = []\n        for i in range(self.length - n + 1):\n            each_slice = self.lst[i:i+n]\n            ret.append(each_slice)\n\n        return ret	\N	\N	0	1	90	series.py	2015-08-04 10:30:01	2015-08-04 10:30:01	{"series.py":"class Series(object):\\n\\n    def __init__(self, input_string):\\n        self.num = input_string\\n        self.length = len(self.num)\\n        try:\\n            self.lst = [int(c) for c in self.num]\\n        except:\\n            self.lst = []\\n            \\n    def slices(self, n):\\n\\n        if n \\u003e self.length or n \\u003c= 0:\\n            raise ValueError(\\"Invalid slice length for this series: %d\\" % n)\\n\\n        ret = []\\n        for i in range(self.length - n + 1):\\n            each_slice = self.lst[i:i+n]\\n            ret.append(each_slice)\\n\\n        return ret"}
128	40	a13f003529dc7348be76cf28	pending	python	series	class Series(object):\n\n    def __init__(self, input_string):\n        self.length = len(input_string)\n        try:\n            self.lst = [int(c) for c in input_string]\n        except:\n            raise ValueError("Please input a string that only contains numbers")\n\n    def slices(self, n):\n\n        if n > self.length or n <= 0:\n            raise ValueError("Invalid slice length for this series: %d" % n)\n\n        return [ self.lst[i:i+n] for i in range(self.length - n + 1) ]	\N	\N	0	2	90	series.py	2015-08-07 04:42:11	2015-08-07 04:42:11	{"series.py":"class Series(object):\\n\\n    def __init__(self, input_string):\\n        self.length = len(input_string)\\n        try:\\n            self.lst = [int(c) for c in input_string]\\n        except:\\n            raise ValueError(\\"Please input a string that only contains numbers\\")\\n\\n    def slices(self, n):\\n\\n        if n \\u003e self.length or n \\u003c= 0:\\n            raise ValueError(\\"Invalid slice length for this series: %d\\" % n)\\n\\n        return [ self.lst[i:i+n] for i in range(self.length - n + 1) ]"}
129	44	c3741eb8e762db69029916ab	done	ruby	roman-numerals	class Fixnum\n\n  def to_roman\n    i = self\n    s = ''\n    roman_mappings.each do |arabic, roman|\n      while i >= arabic\n        s << roman\n        i -= arabic\n      end\n    end\n    s\n  end\n\n  def roman_mappings\n    {\n      1000 => 'M',\n      900 => 'CM',\n      500 => 'D',\n      400 => 'CD',\n      100 => 'C',\n      90 => 'XC',\n      50 => 'L',\n      40 => 'XL',\n      10 => 'X',\n      9 => 'IX',\n      5 => 'V',\n      4 => 'IV',\n      1 => 'I',\n    }\n\n  end\n\nend	\N	\N	0	1	91	roman.rb	2015-06-24 20:38:32	2015-06-24 20:38:32	{"roman.rb":"class Fixnum\\n\\n  def to_roman\\n    i = self\\n    s = ''\\n    roman_mappings.each do |arabic, roman|\\n      while i \\u003e= arabic\\n        s \\u003c\\u003c roman\\n        i -= arabic\\n      end\\n    end\\n    s\\n  end\\n\\n  def roman_mappings\\n    {\\n      1000 =\\u003e 'M',\\n      900 =\\u003e 'CM',\\n      500 =\\u003e 'D',\\n      400 =\\u003e 'CD',\\n      100 =\\u003e 'C',\\n      90 =\\u003e 'XC',\\n      50 =\\u003e 'L',\\n      40 =\\u003e 'XL',\\n      10 =\\u003e 'X',\\n      9 =\\u003e 'IX',\\n      5 =\\u003e 'V',\\n      4 =\\u003e 'IV',\\n      1 =\\u003e 'I',\\n    }\\n\\n  end\\n\\nend"}
130	44	7d756d3e2d44a713e98fabdb	done	scala	word-count	class Phrase(phrase: String) {\n  val _matcher = """[\\w']+""".r\n  val normalized = phrase.toLowerCase\n  val words = _matcher.findAllIn(normalized).toList\n\n  def wordCount = words.groupBy(e => e).map(kv => kv._1 -> kv._2.length)\n}	\N	\N	0	1	92	word_count.scala	2015-07-24 04:46:22	2015-07-24 04:46:22	{"word_count.scala":"class Phrase(phrase: String) {\\n  val _matcher = \\"\\"\\"[\\\\w']+\\"\\"\\".r\\n  val normalized = phrase.toLowerCase\\n  val words = _matcher.findAllIn(normalized).toList\\n\\n  def wordCount = words.groupBy(e =\\u003e e).map(kv =\\u003e kv._1 -\\u003e kv._2.length)\\n}"}
131	44	ea6cf356e3d135bb76fe90d7	done	ruby	say	class Say\n\n  N_TO_WORDS = {\n    0 => { teen: "ten" },\n    1 => { normal: "one", teen: "ten", ty: "eleven" },\n    2 => { normal: "two", teen: "twleve", ty: "twenty" },\n    3 => { normal: "three", teen: "thirteen", ty: "thirty" },\n    4 => { normal: "four", teen: "fourteen", ty: "forty" },\n    5 => { normal: "five", teen: "fifteen", ty: "fifty" },\n    6 => { normal: "six", teen: "sixteen", ty: "sixty" },\n    7 => { normal: "seven", teen: "seventeen", ty: "seventy" },\n    8 => { normal: "eight", teen: "eighteen", ty: "eighty" },\n    9 => { normal: "nine", teen: "nineteen", ty: "ninety" }\n  }\n\n  MAGNITUDE_WORD = {\n    1_000_000_000_000 => :trillion,\n    1_000_000_000     => :billion,\n    1_000_000         => :million,\n    1_000             => :thousand\n  }\n\n  def initialize(n)\n    @n = n\n  end\n\n  def in_english\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\n    return "zero" if @n.zero?\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\n      q, r = result[:value].divmod(magnitude)\n      result[:words] << "#{meta_words(q)} #{name}" if q > 0\n      result.merge(value: r)\n    end\n    say[:words] << meta_words(say[:value]) unless say[:value].zero?\n    say[:words].join(" ")\n  end\n\n  private\n\n  def meta_words(n)\n    "#{hundred(n)} #{below_hundred(n.modulo(100))}".strip\n  end\n\n  def hundred(n)\n    q, r = n.divmod(100)\n    q.zero? ? nil : "#{N_TO_WORDS[q][:normal]} hundred"\n  end\n\n  def below_hundred(n)\n    q, r = n.divmod(10)\n    ty_word = N_TO_WORDS[q][:ty] if q > 1\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\n    [ty_word, teen_word].compact.join("-")\n  end\nend	\N	\N	0	1	93	/ruby/say/say.rb	2015-08-27 19:31:47	2015-08-27 19:31:47	{"/ruby/say/say.rb":"class Say\\n\\n  N_TO_WORDS = {\\n    0 =\\u003e { teen: \\"ten\\" },\\n    1 =\\u003e { normal: \\"one\\", teen: \\"ten\\", ty: \\"eleven\\" },\\n    2 =\\u003e { normal: \\"two\\", teen: \\"twleve\\", ty: \\"twenty\\" },\\n    3 =\\u003e { normal: \\"three\\", teen: \\"thirteen\\", ty: \\"thirty\\" },\\n    4 =\\u003e { normal: \\"four\\", teen: \\"fourteen\\", ty: \\"forty\\" },\\n    5 =\\u003e { normal: \\"five\\", teen: \\"fifteen\\", ty: \\"fifty\\" },\\n    6 =\\u003e { normal: \\"six\\", teen: \\"sixteen\\", ty: \\"sixty\\" },\\n    7 =\\u003e { normal: \\"seven\\", teen: \\"seventeen\\", ty: \\"seventy\\" },\\n    8 =\\u003e { normal: \\"eight\\", teen: \\"eighteen\\", ty: \\"eighty\\" },\\n    9 =\\u003e { normal: \\"nine\\", teen: \\"nineteen\\", ty: \\"ninety\\" }\\n  }\\n\\n  MAGNITUDE_WORD = {\\n    1_000_000_000_000 =\\u003e :trillion,\\n    1_000_000_000     =\\u003e :billion,\\n    1_000_000         =\\u003e :million,\\n    1_000             =\\u003e :thousand\\n  }\\n\\n  def initialize(n)\\n    @n = n\\n  end\\n\\n  def in_english\\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\\n    return \\"zero\\" if @n.zero?\\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\\n      q, r = result[:value].divmod(magnitude)\\n      result[:words] \\u003c\\u003c \\"#{meta_words(q)} #{name}\\" if q \\u003e 0\\n      result.merge(value: r)\\n    end\\n    say[:words] \\u003c\\u003c meta_words(say[:value]) unless say[:value].zero?\\n    say[:words].join(\\" \\")\\n  end\\n\\n  private\\n\\n  def meta_words(n)\\n    \\"#{hundred(n)} #{below_hundred(n.modulo(100))}\\".strip\\n  end\\n\\n  def hundred(n)\\n    q, r = n.divmod(100)\\n    q.zero? ? nil : \\"#{N_TO_WORDS[q][:normal]} hundred\\"\\n  end\\n\\n  def below_hundred(n)\\n    q, r = n.divmod(10)\\n    ty_word = N_TO_WORDS[q][:ty] if q \\u003e 1\\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\\n    [ty_word, teen_word].compact.join(\\"-\\")\\n  end\\nend"}
132	44	333f41b62acd347aecd6ae5e	pending	lua	hamming	local Hamming = {}\n\nfunction Hamming.compute(str1, str2)\n  local distance = 0\n\n  for i = 1, math.min(#str1, #str2) do\n    if str1:sub(i,i) ~= str2:sub(i,i) then\n      distance = distance + 1\n    end\n  end\n\n  return distance\nend\n\nreturn Hamming	\N	\N	0	1	94	hamming.lua	2015-06-22 23:05:59	2015-06-22 23:05:59	{"hamming.lua":"local Hamming = {}\\n\\nfunction Hamming.compute(str1, str2)\\n  local distance = 0\\n\\n  for i = 1, math.min(#str1, #str2) do\\n    if str1:sub(i,i) ~= str2:sub(i,i) then\\n      distance = distance + 1\\n    end\\n  end\\n\\n  return distance\\nend\\n\\nreturn Hamming"}
133	44	f78fb57a6717f7676d5e245a	done	javascript	sieve	var Sieve = function(num) {\n  this.num = num;\n  this.primes = [];\n\n  var isPrime = function(n) {\n    var mid = Math.floor( n / 2 );\n\n    for ( var i = 2; i <= mid; i++ ) {\n      if ( n % i === 0 ) {\n        return false\n      }\n    }\n    return true;\n  }\n\n  for ( var i = 2; i <= this.num; i++ ) {\n    if ( isPrime(i) ) {\n      this.primes.push(i);\n    }\n  }\n};	\N	\N	0	1	95	sieve_test.js	2015-04-12 18:22:33	2015-04-12 18:22:33	{"sieve_test.js":"var Sieve = function(num) {\\n  this.num = num;\\n  this.primes = [];\\n\\n  var isPrime = function(n) {\\n    var mid = Math.floor( n / 2 );\\n\\n    for ( var i = 2; i \\u003c= mid; i++ ) {\\n      if ( n % i === 0 ) {\\n        return false\\n      }\\n    }\\n    return true;\\n  }\\n\\n  for ( var i = 2; i \\u003c= this.num; i++ ) {\\n    if ( isPrime(i) ) {\\n      this.primes.push(i);\\n    }\\n  }\\n};"}
134	44	52653cc4f6620793685411f8	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	96	/python/wordy/wordy.py	2015-08-27 10:39:20	2015-08-27 10:39:20	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
135	46	b3f1517f96d157210a6d0417	pending	lua	hamming	local Hamming = {}\n\nfunction Hamming.compute(str1, str2)\n  local distance = 0\n\n  for i = 1, math.min(#str1, #str2) do\n    if str1:sub(i,i) ~= str2:sub(i,i) then\n      distance = distance + 1\n    end\n  end\n\n  return distance\nend\n\nreturn Hamming	\N	\N	0	1	97	hamming.lua	2015-05-26 01:47:57	2015-05-26 01:47:57	{"hamming.lua":"local Hamming = {}\\n\\nfunction Hamming.compute(str1, str2)\\n  local distance = 0\\n\\n  for i = 1, math.min(#str1, #str2) do\\n    if str1:sub(i,i) ~= str2:sub(i,i) then\\n      distance = distance + 1\\n    end\\n  end\\n\\n  return distance\\nend\\n\\nreturn Hamming"}
136	46	d6bbc11c7fb7a7b0f60380b3	done	ruby	say	class Say\n\n  N_TO_WORDS = {\n    0 => { teen: "ten" },\n    1 => { normal: "one", teen: "ten", ty: "eleven" },\n    2 => { normal: "two", teen: "twleve", ty: "twenty" },\n    3 => { normal: "three", teen: "thirteen", ty: "thirty" },\n    4 => { normal: "four", teen: "fourteen", ty: "forty" },\n    5 => { normal: "five", teen: "fifteen", ty: "fifty" },\n    6 => { normal: "six", teen: "sixteen", ty: "sixty" },\n    7 => { normal: "seven", teen: "seventeen", ty: "seventy" },\n    8 => { normal: "eight", teen: "eighteen", ty: "eighty" },\n    9 => { normal: "nine", teen: "nineteen", ty: "ninety" }\n  }\n\n  MAGNITUDE_WORD = {\n    1_000_000_000_000 => :trillion,\n    1_000_000_000     => :billion,\n    1_000_000         => :million,\n    1_000             => :thousand\n  }\n\n  def initialize(n)\n    @n = n\n  end\n\n  def in_english\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\n    return "zero" if @n.zero?\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\n      q, r = result[:value].divmod(magnitude)\n      result[:words] << "#{meta_words(q)} #{name}" if q > 0\n      result.merge(value: r)\n    end\n    say[:words] << meta_words(say[:value]) unless say[:value].zero?\n    say[:words].join(" ")\n  end\n\n  private\n\n  def meta_words(n)\n    "#{hundred(n)} #{below_hundred(n.modulo(100))}".strip\n  end\n\n  def hundred(n)\n    q, r = n.divmod(100)\n    q.zero? ? nil : "#{N_TO_WORDS[q][:normal]} hundred"\n  end\n\n  def below_hundred(n)\n    q, r = n.divmod(10)\n    ty_word = N_TO_WORDS[q][:ty] if q > 1\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\n    [ty_word, teen_word].compact.join("-")\n  end\nend	\N	\N	0	1	98	/ruby/say/say.rb	2015-04-29 21:57:56	2015-04-29 21:57:56	{"/ruby/say/say.rb":"class Say\\n\\n  N_TO_WORDS = {\\n    0 =\\u003e { teen: \\"ten\\" },\\n    1 =\\u003e { normal: \\"one\\", teen: \\"ten\\", ty: \\"eleven\\" },\\n    2 =\\u003e { normal: \\"two\\", teen: \\"twleve\\", ty: \\"twenty\\" },\\n    3 =\\u003e { normal: \\"three\\", teen: \\"thirteen\\", ty: \\"thirty\\" },\\n    4 =\\u003e { normal: \\"four\\", teen: \\"fourteen\\", ty: \\"forty\\" },\\n    5 =\\u003e { normal: \\"five\\", teen: \\"fifteen\\", ty: \\"fifty\\" },\\n    6 =\\u003e { normal: \\"six\\", teen: \\"sixteen\\", ty: \\"sixty\\" },\\n    7 =\\u003e { normal: \\"seven\\", teen: \\"seventeen\\", ty: \\"seventy\\" },\\n    8 =\\u003e { normal: \\"eight\\", teen: \\"eighteen\\", ty: \\"eighty\\" },\\n    9 =\\u003e { normal: \\"nine\\", teen: \\"nineteen\\", ty: \\"ninety\\" }\\n  }\\n\\n  MAGNITUDE_WORD = {\\n    1_000_000_000_000 =\\u003e :trillion,\\n    1_000_000_000     =\\u003e :billion,\\n    1_000_000         =\\u003e :million,\\n    1_000             =\\u003e :thousand\\n  }\\n\\n  def initialize(n)\\n    @n = n\\n  end\\n\\n  def in_english\\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\\n    return \\"zero\\" if @n.zero?\\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\\n      q, r = result[:value].divmod(magnitude)\\n      result[:words] \\u003c\\u003c \\"#{meta_words(q)} #{name}\\" if q \\u003e 0\\n      result.merge(value: r)\\n    end\\n    say[:words] \\u003c\\u003c meta_words(say[:value]) unless say[:value].zero?\\n    say[:words].join(\\" \\")\\n  end\\n\\n  private\\n\\n  def meta_words(n)\\n    \\"#{hundred(n)} #{below_hundred(n.modulo(100))}\\".strip\\n  end\\n\\n  def hundred(n)\\n    q, r = n.divmod(100)\\n    q.zero? ? nil : \\"#{N_TO_WORDS[q][:normal]} hundred\\"\\n  end\\n\\n  def below_hundred(n)\\n    q, r = n.divmod(10)\\n    ty_word = N_TO_WORDS[q][:ty] if q \\u003e 1\\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\\n    [ty_word, teen_word].compact.join(\\"-\\")\\n  end\\nend"}
153	49	0478de13bd0c1ca3e05155ac	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	2	107	dna.clj	2015-09-04 01:48:38	2015-09-04 01:48:38	{"dna.clj":"(ns dna)\\n\\n(def NUCLEOTIDES (set \\"ACGTU\\"))\\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\\\U))\\n\\n(defn count [nucleotide dna]\\n  (when (not (contains? NUCLEOTIDES nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))"}
137	46	5a863865516073bcfe87c077	done	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nmy @words = 'a'..'z';\n\nsub new{\n\tmy ($class, $key) = @_;\n\tdie "ArgumentError: $key" if defined $key and ($key =~ /[^a-z]/ or not length $key);\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	2	99	Cipher.pm	2015-03-12 17:16:03	2015-03-12 17:16:03	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nmy @words = 'a'..'z';\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\tdie \\"ArgumentError: $key\\" if defined $key and ($key =~ /[^a-z]/ or not length $key);\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
138	46	0381a19e8010a1ee9984fce6	superseded	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nsub new{\n\tmy ($class, $key) = @_;\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	1	99	Cipher.pm	2015-05-03 00:33:52	2015-05-03 00:33:52	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
139	46	c1c0a3f9a4588089b0a73b11	pending	go	grains	package grains\n\nimport (\n\t"errors"\n)\n\nfunc Square(n int) (uint64, error) {\n\tif n < 1 || n > 64 {\n\t\treturn 0, errors.New("out of range")\n\t}\n\treturn 1 << (uint(n) - 1), nil\n}\n\nfunc Total() uint64 {\n\tconst n uint = 64 // I'd have expected this as an input\n\treturn 1<<n - 1\n}	\N	\N	0	1	100	grains.go	2015-04-30 18:08:54	2015-04-30 18:08:54	{"grains.go":"package grains\\n\\nimport (\\n\\t\\"errors\\"\\n)\\n\\nfunc Square(n int) (uint64, error) {\\n\\tif n \\u003c 1 || n \\u003e 64 {\\n\\t\\treturn 0, errors.New(\\"out of range\\")\\n\\t}\\n\\treturn 1 \\u003c\\u003c (uint(n) - 1), nil\\n}\\n\\nfunc Total() uint64 {\\n\\tconst n uint = 64 // I'd have expected this as an input\\n\\treturn 1\\u003c\\u003cn - 1\\n}"}
140	46	c93ff31191c033b27c514b06	pending	perl5	word-count	package Phrase;\n\nuse strict;\nuse warnings;\n \nsub word_count{\n    my %hash;\n    my $words = shift;\n    map { s/\\W+//g; $hash{$_}++ } split '\\s', lc($words);\n    delete $hash{""};\n    return \\%hash;\n}\n1;	\N	\N	0	1	101	Phrase.pm	2015-03-27 06:25:01	2015-03-27 06:25:01	{"Phrase.pm":"package Phrase;\\n\\nuse strict;\\nuse warnings;\\n \\nsub word_count{\\n    my %hash;\\n    my $words = shift;\\n    map { s/\\\\W+//g; $hash{$_}++ } split '\\\\s', lc($words);\\n    delete $hash{\\"\\"};\\n    return \\\\%hash;\\n}\\n1;"}
141	46	aec8bdc1f0cad1d894cc3895	superseded	javascript	crypto-square	var CryptoSquare = function CryptoSquare(input){ \n\t\t\n\t\tthis.normalizePlaintext = function normalizePlaintext(){\n\t\t\treturn input.toLowerCase().replace(/[^\\w\\d]/g,"");\n\t\t}\n\t\t\n\t\tthis.size = function size(){\n\t\t    return Math.ceil(Math.sqrt(this.normalized.length));\n\t\t}\n\n\t\tthis.plaintextSegments = function plaintextSegments(){\n\t\t\treturn this.separate(this.normalized).split(" ");\n\t\t}\n\n\t\tthis.ciphertext = function ciphertext(){\n\t\t\tvar result = "";\n\t\t\tvar plaintext = this.plaintextSegments();\n\t\t\tvar rows=this.size();\n\t\t\tfor(var i=0;i<rows;i++){\n\t\t\t\tfor(var chunk in plaintext){\n\t\t\t\t\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\t\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\treturn result;\t\n\t\t}\n\n\t\tthis.normalizeCiphertext = function normalizeCiphertext(){\n\t\t\treturn this.separate(this.ciphertext());\t\n\t\t}\n\n\t\tthis.separate = function(text){\n\t\t\tvar result = "";\n\t\t\tvar rows = this.size();\n\t\t\ttext.split("").map(function map(letter,index){\n\t\t\t\tresult+=letter;\n\t\t\t\tif((index+1)%rows===0)result+=" ";\n\t\t\t});\n\t\t\treturn result.trim();\n\t\t}\n\n\t\tthis.normalized = this.normalizePlaintext(input);\n}\nmodule.exports = CryptoSquare;	\N	\N	0	1	102	crypto-square.js	2015-03-29 05:20:27	2015-03-29 05:20:27	{"crypto-square.js":"var CryptoSquare = function CryptoSquare(input){ \\n\\t\\t\\n\\t\\tthis.normalizePlaintext = function normalizePlaintext(){\\n\\t\\t\\treturn input.toLowerCase().replace(/[^\\\\w\\\\d]/g,\\"\\");\\n\\t\\t}\\n\\t\\t\\n\\t\\tthis.size = function size(){\\n\\t\\t    return Math.ceil(Math.sqrt(this.normalized.length));\\n\\t\\t}\\n\\n\\t\\tthis.plaintextSegments = function plaintextSegments(){\\n\\t\\t\\treturn this.separate(this.normalized).split(\\" \\");\\n\\t\\t}\\n\\n\\t\\tthis.ciphertext = function ciphertext(){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar plaintext = this.plaintextSegments();\\n\\t\\t\\tvar rows=this.size();\\n\\t\\t\\tfor(var i=0;i\\u003crows;i++){\\n\\t\\t\\t\\tfor(var chunk in plaintext){\\n\\t\\t\\t\\t\\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\t\\n\\t\\t\\treturn result;\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalizeCiphertext = function normalizeCiphertext(){\\n\\t\\t\\treturn this.separate(this.ciphertext());\\t\\n\\t\\t}\\n\\n\\t\\tthis.separate = function(text){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar rows = this.size();\\n\\t\\t\\ttext.split(\\"\\").map(function map(letter,index){\\n\\t\\t\\t\\tresult+=letter;\\n\\t\\t\\t\\tif((index+1)%rows===0)result+=\\" \\";\\n\\t\\t\\t});\\n\\t\\t\\treturn result.trim();\\n\\t\\t}\\n\\n\\t\\tthis.normalized = this.normalizePlaintext(input);\\n}\\nmodule.exports = CryptoSquare;"}
152	49	c3296e3815ac0debe8815520	done	clojure	nucleotide-count	(ns dna)\n\n(def ^{:private true} nucleotides (set "ACGTU"))\n(def ^{:private true} dna-nucleotides (disj nucleotides \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? nucleotides nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) dna-nucleotides)))	\N	\N	0	3	107	dna.clj	2015-08-20 19:21:57	2015-08-20 19:21:57	{"dna.clj":"(ns dna)\\n\\n(def ^{:private true} nucleotides (set \\"ACGTU\\"))\\n(def ^{:private true} dna-nucleotides (disj nucleotides \\\\U))\\n\\n(defn count [nucleotide dna]\\n  (when (not (contains? nucleotides nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) dna-nucleotides)))"}
142	46	441b81b23a83efacf727d3a2	done	javascript	crypto-square	var CryptoSquare = function CryptoSquare(input){ \n\t\t\n\t\tthis.normalizePlaintext = function normalizePlaintext(){\n\t\t\treturn input.toLowerCase().replace(/[^\\w\\d]/g,"");\n\t\t}\n\t\t\n\t\tthis.size = function size(){\n\t\t    return Math.ceil(Math.sqrt(this.normalized.length));\n\t\t}\n\n\t\tthis.plaintextSegments = function plaintextSegments(){\n\t\t\treturn this.separate(this.normalized).split(" ");\n\t\t}\n\n\t\tthis.ciphertext = function ciphertext(){\n\t\t\tvar result = "";\n\t\t\tvar plaintext = this.plaintextSegments();\n\t\t\tvar rows=this.size();\n\t\t\tfor(var i=0;i<rows;i++){\n\t\t\t\tfor(var chunk in plaintext){\n\t\t\t\t\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\t\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\treturn result;\t\n\t\t}\n\n\t\tthis.normalizeCiphertext = function normalizeCiphertext(){\n\t\t\treturn this.separate(this.ciphertext());\t\n\t\t}\n\n\t\tthis.separate = function(text){\n\t\t\tvar expression = new RegExp('.{1,'+this.size()+'}',"g")\n\t\t\treturn text.match(expression).join(" ");\t\n\t\t}\n\n\t\tthis.normalized = this.normalizePlaintext(input);\n}\nmodule.exports = CryptoSquare;	\N	\N	0	2	102	crypto-square.js	2015-06-12 05:37:46	2015-06-12 05:37:46	{"crypto-square.js":"var CryptoSquare = function CryptoSquare(input){ \\n\\t\\t\\n\\t\\tthis.normalizePlaintext = function normalizePlaintext(){\\n\\t\\t\\treturn input.toLowerCase().replace(/[^\\\\w\\\\d]/g,\\"\\");\\n\\t\\t}\\n\\t\\t\\n\\t\\tthis.size = function size(){\\n\\t\\t    return Math.ceil(Math.sqrt(this.normalized.length));\\n\\t\\t}\\n\\n\\t\\tthis.plaintextSegments = function plaintextSegments(){\\n\\t\\t\\treturn this.separate(this.normalized).split(\\" \\");\\n\\t\\t}\\n\\n\\t\\tthis.ciphertext = function ciphertext(){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar plaintext = this.plaintextSegments();\\n\\t\\t\\tvar rows=this.size();\\n\\t\\t\\tfor(var i=0;i\\u003crows;i++){\\n\\t\\t\\t\\tfor(var chunk in plaintext){\\n\\t\\t\\t\\t\\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\t\\n\\t\\t\\treturn result;\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalizeCiphertext = function normalizeCiphertext(){\\n\\t\\t\\treturn this.separate(this.ciphertext());\\t\\n\\t\\t}\\n\\n\\t\\tthis.separate = function(text){\\n\\t\\t\\tvar expression = new RegExp('.{1,'+this.size()+'}',\\"g\\")\\n\\t\\t\\treturn text.match(expression).join(\\" \\");\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalized = this.normalizePlaintext(input);\\n}\\nmodule.exports = CryptoSquare;"}
143	48	b04f5d52ccb208a94c53060a	done	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	3	103	year.py	2015-04-24 17:34:37	2015-04-24 17:34:37	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
144	48	730380885128f4a1b8913b8a	superseded	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) \nor divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	2	103	year.py	2015-06-16 22:54:59	2015-06-16 22:54:59	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) \\nor divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
145	48	c37f96d242c8bf9a666fd396	superseded	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	1	103	year.py	2015-06-24 13:54:33	2015-06-24 13:54:33	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
146	49	d1b41ad67277b9ec486c4363	superseded	python	gigasecond	import datetime\n\ndef add_gigasecond(birth_date):\n    days = 10**9/((60*60)*24)\n    gsecs = birth_date + datetime.timedelta(days)\n    return gsecs	\N	\N	0	1	104	gigasecond.py	2015-06-17 10:25:29	2015-06-17 10:25:29	{"gigasecond.py":"import datetime\\n\\ndef add_gigasecond(birth_date):\\n    days = 10**9/((60*60)*24)\\n    gsecs = birth_date + datetime.timedelta(days)\\n    return gsecs"}
147	49	d6f7ffc52a9ca9a3f8d76f9d	pending	python	gigasecond	import datetime\n\ndef add_gigasecond(birth_date):\n    return birth_date + datetime.timedelta(seconds = 10**9)	\N	\N	0	2	104	gigasecond.py	2015-07-10 05:23:25	2015-07-10 05:23:25	{"gigasecond.py":"import datetime\\n\\ndef add_gigasecond(birth_date):\\n    return birth_date + datetime.timedelta(seconds = 10**9)"}
148	49	42768fc510dec539445bd28e	pending	ruby	hamming	class Hamming \n\n      def Hamming.compute strandA, strandB \n        hamming_distance = 0\n        end_point = strandA.length\n        length_difference = strandA.length - strandB.length\n\n        if length_difference > 0\n            end_point = strandB.length\n        end\n\n        end_point -= 1;\n\n        for i in ( 0..end_point )\n               if strandA[i] != strandB[i]\n                    hamming_distance += 1\n               end\n        end\n\n        return hamming_distance\n\n    end\n\nend	\N	\N	0	1	105	hamming.rb	2015-07-04 02:31:19	2015-07-04 02:31:19	{"hamming.rb":"class Hamming \\n\\n      def Hamming.compute strandA, strandB \\n        hamming_distance = 0\\n        end_point = strandA.length\\n        length_difference = strandA.length - strandB.length\\n\\n        if length_difference \\u003e 0\\n            end_point = strandB.length\\n        end\\n\\n        end_point -= 1;\\n\\n        for i in ( 0..end_point )\\n               if strandA[i] != strandB[i]\\n                    hamming_distance += 1\\n               end\\n        end\\n\\n        return hamming_distance\\n\\n    end\\n\\nend"}
149	49	1459d0b57ae3dcc20e7f8d1f	superseded	ruby	nucleotide-count	class DNA\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n    @result = {"A"=>0, "T"=>0, "C"=>0, "G"=>0}\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\n  end\n\n  def nucleotide_counts\n    @result\n  end\n\n  def count(nucleotide)\n    if nucleotide == "U"\n      0\n    elsif ["A", "T", "C", "G"].include?(nucleotide)\n      @result[nucleotide]\n    else\n      raise(ArgumentError)\n    end\n  end\nend	\N	\N	0	1	106	nucleotide-count.rb	2015-05-10 03:55:19	2015-05-10 03:55:19	{"nucleotide-count.rb":"class DNA\\n\\n  def initialize(dna_string)\\n    @dna_string = dna_string\\n    @result = {\\"A\\"=\\u003e0, \\"T\\"=\\u003e0, \\"C\\"=\\u003e0, \\"G\\"=\\u003e0}\\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\\n  end\\n\\n  def nucleotide_counts\\n    @result\\n  end\\n\\n  def count(nucleotide)\\n    if nucleotide == \\"U\\"\\n      0\\n    elsif [\\"A\\", \\"T\\", \\"C\\", \\"G\\"].include?(nucleotide)\\n      @result[nucleotide]\\n    else\\n      raise(ArgumentError)\\n    end\\n  end\\nend"}
150	49	0807bbad64c0e70c9a24631c	pending	ruby	nucleotide-count	class DNA\n  Nucleotides = {"A" => 0, "T" => 0, "C" => 0, "G" => 0}\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n    @result = Nucleotides.dup\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\n  end\n\n  def nucleotide_counts\n    @result\n  end\n\n  def count(nucleotide)\n    if nucleotide == "U"\n      0\n    elsif Nucleotides.keys.include?(nucleotide)\n      @result[nucleotide]\n    else\n      raise(ArgumentError, "Argument Error")\n    end\n  end\nend	\N	\N	0	2	106	nucleotide-count.rb	2015-07-30 20:21:06	2015-07-30 20:21:06	{"nucleotide-count.rb":"class DNA\\n  Nucleotides = {\\"A\\" =\\u003e 0, \\"T\\" =\\u003e 0, \\"C\\" =\\u003e 0, \\"G\\" =\\u003e 0}\\n\\n  def initialize(dna_string)\\n    @dna_string = dna_string\\n    @result = Nucleotides.dup\\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\\n  end\\n\\n  def nucleotide_counts\\n    @result\\n  end\\n\\n  def count(nucleotide)\\n    if nucleotide == \\"U\\"\\n      0\\n    elsif Nucleotides.keys.include?(nucleotide)\\n      @result[nucleotide]\\n    else\\n      raise(ArgumentError, \\"Argument Error\\")\\n    end\\n  end\\nend"}
155	26	c029e6d151b56c58cd1f36bb	pending	ruby	roman-numerals	class Fixnum\n  def to_roman\n    array = self.to_s.split(//)\n    num_array = []\n    array.each do |x|\n      num_array.push(x.to_i)\n    end\n    roman_numeral=[]\n    ones = num_array.pop\n    if ones == 9\n      roman_numeral.unshift('IX')\n    elsif ones == 4\n      roman_numeral.unshift('IV')\n    else\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\n    end\n\n    if num_array.empty? == false\n      tens = num_array.pop\n      if tens == 9\n        roman_numeral.unshift('XC')\n      elsif tens == 4\n        roman_numeral.unshift('XL')\n      else\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\n      end\n    end\n\n    if num_array.empty? == false\n      hundreds = num_array.pop\n      if hundreds == 9\n        roman_numeral.unshift('CM')\n      elsif hundreds == 4\n        roman_numeral.unshift('CD')\n      else\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\n      end\n    end\n\n    if num_array.empty? == false\n      thousands = num_array.pop\n      roman_numeral.unshift('M'*thousands)\n    end\n\n    roman_numeral.join\n  end\nend	\N	\N	0	1	109	/ruby/roman-numerals/roman.rb	2015-07-12 03:19:59	2015-07-12 03:19:59	{"/ruby/roman-numerals/roman.rb":"class Fixnum\\n  def to_roman\\n    array = self.to_s.split(//)\\n    num_array = []\\n    array.each do |x|\\n      num_array.push(x.to_i)\\n    end\\n    roman_numeral=[]\\n    ones = num_array.pop\\n    if ones == 9\\n      roman_numeral.unshift('IX')\\n    elsif ones == 4\\n      roman_numeral.unshift('IV')\\n    else\\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\\n    end\\n\\n    if num_array.empty? == false\\n      tens = num_array.pop\\n      if tens == 9\\n        roman_numeral.unshift('XC')\\n      elsif tens == 4\\n        roman_numeral.unshift('XL')\\n      else\\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      hundreds = num_array.pop\\n      if hundreds == 9\\n        roman_numeral.unshift('CM')\\n      elsif hundreds == 4\\n        roman_numeral.unshift('CD')\\n      else\\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      thousands = num_array.pop\\n      roman_numeral.unshift('M'*thousands)\\n    end\\n\\n    roman_numeral.join\\n  end\\nend"}
156	26	3a4ed513d3cd899fb758a294	pending	clojure	robot-name	(ns robot-name)\n\n(def characters "ABCDEFGHIJKLMNOPQRSTUVWXYZ")\n\n(def numbers "1234567890")\n\n(defn- rand-n-source [n source]\n  (->> (fn [] (rand-nth source))\n       (repeatedly)\n       (take n)\n       (apply str)))\n\n(defn- generate-id [] \n  (str (rand-n-source 2 characters)\n       (rand-n-source 4 numbers)))\n\n(defn robot []\n  (atom {:name ""}))\n\n(defn robot-name [robot]\n  (if (empty? @robot)\n    (reset! robot (generate-id))\n    @robot))\n\n(defn reset-name [robot]\n  (reset! robot ""))	\N	\N	0	1	110	/clojure/robot-name/robot_name.clj	2015-05-15 18:07:25	2015-05-15 18:07:25	{"/clojure/robot-name/robot_name.clj":"(ns robot-name)\\n\\n(def characters \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\")\\n\\n(def numbers \\"1234567890\\")\\n\\n(defn- rand-n-source [n source]\\n  (-\\u003e\\u003e (fn [] (rand-nth source))\\n       (repeatedly)\\n       (take n)\\n       (apply str)))\\n\\n(defn- generate-id [] \\n  (str (rand-n-source 2 characters)\\n       (rand-n-source 4 numbers)))\\n\\n(defn robot []\\n  (atom {:name \\"\\"}))\\n\\n(defn robot-name [robot]\\n  (if (empty? @robot)\\n    (reset! robot (generate-id))\\n    @robot))\\n\\n(defn reset-name [robot]\\n  (reset! robot \\"\\"))"}
157	26	791535daeeb9794f64b525a5	superseded	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    zero_counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\n    @nucleotides.chars.each_with_object(zero_counts) do |nucleotide, counts|\n      counts[nucleotide] += 1\n    end\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    nucleotide_counts[nucl] || 0\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = %w[A C G T]\n  RNA_NUCLEOTIDES = %w[A C G U]\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	\N	\N	0	2	111	nucleotide-count.rb	2015-04-25 12:24:40	2015-04-25 12:24:40	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    zero_counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\\n    @nucleotides.chars.each_with_object(zero_counts) do |nucleotide, counts|\\n      counts[nucleotide] += 1\\n    end\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    nucleotide_counts[nucl] || 0\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = %w[A C G T]\\n  RNA_NUCLEOTIDES = %w[A C G U]\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
158	26	46f1a11100385aa1783478d7	superseded	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\n    @nucleotides.chars.each do |nucleotide|\n      counts[nucleotide] += 1\n    end\n    counts\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    nucleotide_counts[nucl] || 0\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = 'ACGT'.chars\n  RNA_NUCLEOTIDES = 'ACGU'.chars\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	\N	\N	0	1	111	nucleotide-count.rb	2015-07-23 07:00:59	2015-07-23 07:00:59	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\\n    @nucleotides.chars.each do |nucleotide|\\n      counts[nucleotide] += 1\\n    end\\n    counts\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    nucleotide_counts[nucl] || 0\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = 'ACGT'.chars\\n  RNA_NUCLEOTIDES = 'ACGU'.chars\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
159	26	30ab76ad12d240ab728731a0	done	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, count(nucl)] }]\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    @nucleotides.chars.count(nucl)\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = %w[A C G T]\n  RNA_NUCLEOTIDES = %w[A C G U]\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	\N	\N	0	3	111	nucleotide-count.rb	2015-08-08 11:08:11	2015-08-08 11:08:11	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, count(nucl)] }]\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    @nucleotides.chars.count(nucl)\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = %w[A C G T]\\n  RNA_NUCLEOTIDES = %w[A C G U]\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
160	26	8f8bde1518a49d5d7f4912c5	pending	python	bob	#\n# Skeleton file for the Python "Bob" exercise.\n#\ndef hey(what):\n\t#I checked for upercase first since it had the most cases.\n\tif what.isupper():\n\t\tsay = "Whoa, chill out!"\n\t#I originally check for a ? anywhere in the string, but I guess that doesn't count, seems ambiguous.\n\telif what.endswith("?"):\n\t\tsay = "Sure."\n\t#I checked this last since it has the most complexity. ispace checks for whitespace characters, while "" takes in strings that are empty, but declared.\n\telif what.isspace() or what == "":\n\t\tsay = "Fine. Be that way!"\n\t#Catchall\n\telse:\n\t\tsay = "Whatever."\n\treturn say	\N	\N	0	1	112	bob.py	2015-05-03 07:11:42	2015-05-03 07:11:42	{"bob.py":"#\\n# Skeleton file for the Python \\"Bob\\" exercise.\\n#\\ndef hey(what):\\n\\t#I checked for upercase first since it had the most cases.\\n\\tif what.isupper():\\n\\t\\tsay = \\"Whoa, chill out!\\"\\n\\t#I originally check for a ? anywhere in the string, but I guess that doesn't count, seems ambiguous.\\n\\telif what.endswith(\\"?\\"):\\n\\t\\tsay = \\"Sure.\\"\\n\\t#I checked this last since it has the most complexity. ispace checks for whitespace characters, while \\"\\" takes in strings that are empty, but declared.\\n\\telif what.isspace() or what == \\"\\":\\n\\t\\tsay = \\"Fine. Be that way!\\"\\n\\t#Catchall\\n\\telse:\\n\\t\\tsay = \\"Whatever.\\"\\n\\treturn say"}
161	26	4acc98bb9243d9aac5f79a9f	done	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule Octal( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readBase 8\n\nshowOct :: Integral a => a -> String\nshowOct = showBase 8\n\nreadBase :: Integral a => a -> String -> a\nreadBase b s = readBase' 0 s\n  where \n    readBase' acc "" = acc\n    readBase' acc (d : ds) \n        | acc `seq` False = undefined \n        | not (valid b d) = 0\n        | otherwise = readBase' (b*acc + fromChar d) ds\n\nvalid :: Integral b => b -> Char -> Bool\nvalid b c | b <= 10   = c >= '0' && c < bd\n          | otherwise = (c >= '0' && c <= '9') || \n                        (c >= 'A' && c < bdu) ||\n                        (c >= 'a' && c < bd)\n  where \n    bd = fromDigit b\n    bdu = fromDigitC b\n\nfromChar :: Integral a => Char -> a\nfromChar c | c <= '9' = fromBase '0' c\n           | c <= 'Z' = fromBase 'A' c\n           | otherwise = fromBase 'a' c\n  where \n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \n\nshowBase :: Integral a => a -> a -> String\nshowBase b n | b < 1 || n < 0 = ""\n             | n == 0 = "0"\n             | otherwise = digitsP "" n\n  where\n    digitsP ds k | dc `seq` ds `seq` False = undefined\n                 | k == 0 = ds\n                 | otherwise = digitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` b\n        dc = fromDigit $! d\n\ntoBase :: Integral a => Char -> a -> Char\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\n\nfromDigit :: Integral a => a -> Char\nfromDigit d | d <= 9 = toBase '0' d\n            | otherwise = toBase 'a' d\n\nfromDigitC :: Integral a => a -> Char\nfromDigitC d | d <= 9 = toBase '0' d\n             | otherwise = toBase 'A' d	\N	\N	0	2	113	Octal.hs	2015-05-12 02:30:56	2015-05-12 02:30:56	{"Octal.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule Octal( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readBase 8\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct = showBase 8\\n\\nreadBase :: Integral a =\\u003e a -\\u003e String -\\u003e a\\nreadBase b s = readBase' 0 s\\n  where \\n    readBase' acc \\"\\" = acc\\n    readBase' acc (d : ds) \\n        | acc `seq` False = undefined \\n        | not (valid b d) = 0\\n        | otherwise = readBase' (b*acc + fromChar d) ds\\n\\nvalid :: Integral b =\\u003e b -\\u003e Char -\\u003e Bool\\nvalid b c | b \\u003c= 10   = c \\u003e= '0' \\u0026\\u0026 c \\u003c bd\\n          | otherwise = (c \\u003e= '0' \\u0026\\u0026 c \\u003c= '9') || \\n                        (c \\u003e= 'A' \\u0026\\u0026 c \\u003c bdu) ||\\n                        (c \\u003e= 'a' \\u0026\\u0026 c \\u003c bd)\\n  where \\n    bd = fromDigit b\\n    bdu = fromDigitC b\\n\\nfromChar :: Integral a =\\u003e Char -\\u003e a\\nfromChar c | c \\u003c= '9' = fromBase '0' c\\n           | c \\u003c= 'Z' = fromBase 'A' c\\n           | otherwise = fromBase 'a' c\\n  where \\n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \\n\\nshowBase :: Integral a =\\u003e a -\\u003e a -\\u003e String\\nshowBase b n | b \\u003c 1 || n \\u003c 0 = \\"\\"\\n             | n == 0 = \\"0\\"\\n             | otherwise = digitsP \\"\\" n\\n  where\\n    digitsP ds k | dc `seq` ds `seq` False = undefined\\n                 | k == 0 = ds\\n                 | otherwise = digitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` b\\n        dc = fromDigit $! d\\n\\ntoBase :: Integral a =\\u003e Char -\\u003e a -\\u003e Char\\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\\n\\nfromDigit :: Integral a =\\u003e a -\\u003e Char\\nfromDigit d | d \\u003c= 9 = toBase '0' d\\n            | otherwise = toBase 'a' d\\n\\nfromDigitC :: Integral a =\\u003e a -\\u003e Char\\nfromDigitC d | d \\u003c= 9 = toBase '0' d\\n             | otherwise = toBase 'A' d"}
162	26	dc3a800e5b05b2be7f79e1da	superseded	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule OctalSeq( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readOct' 0\n  where \n    readOct' acc "" = acc `seq` acc\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\n      where\n        toOctVal '0' = 0\n        toOctVal '1' = 1\n        toOctVal '2' = 2\n        toOctVal '3' = 3\n        toOctVal '4' = 4\n        toOctVal '5' = 5\n        toOctVal '6' = 6\n        toOctVal '7' = 7\n        toOctVal  _  = error "invalid digit"\n\nshowOct :: Integral a => a -> String\nshowOct n | n < 0 = ""\n          | n == 0 = "0"\n          | otherwise = octDigitsP "" n\n  where\n    octDigitsP ds 0 = ds `seq` ds\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` 8\n        dc = toOctChar $! d\n        toOctChar 0 = '0'\n        toOctChar 1 = '1'\n        toOctChar 2 = '2'\n        toOctChar 3 = '3'\n        toOctChar 4 = '4'\n        toOctChar 5 = '5'\n        toOctChar 6 = '6'\n        toOctChar 7 = '7'\n        toOctChar _ = error "invalid digit"	\N	\N	0	1	113	OctalSeq.hs	2015-07-29 21:00:18	2015-07-29 21:00:18	{"OctalSeq.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule OctalSeq( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readOct' 0\\n  where \\n    readOct' acc \\"\\" = acc `seq` acc\\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\\n      where\\n        toOctVal '0' = 0\\n        toOctVal '1' = 1\\n        toOctVal '2' = 2\\n        toOctVal '3' = 3\\n        toOctVal '4' = 4\\n        toOctVal '5' = 5\\n        toOctVal '6' = 6\\n        toOctVal '7' = 7\\n        toOctVal  _  = error \\"invalid digit\\"\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct n | n \\u003c 0 = \\"\\"\\n          | n == 0 = \\"0\\"\\n          | otherwise = octDigitsP \\"\\" n\\n  where\\n    octDigitsP ds 0 = ds `seq` ds\\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` 8\\n        dc = toOctChar $! d\\n        toOctChar 0 = '0'\\n        toOctChar 1 = '1'\\n        toOctChar 2 = '2'\\n        toOctChar 3 = '3'\\n        toOctChar 4 = '4'\\n        toOctChar 5 = '5'\\n        toOctChar 6 = '6'\\n        toOctChar 7 = '7'\\n        toOctChar _ = error \\"invalid digit\\""}
163	26	d957290a29ca1d278021e562	pending	ruby	word-count	class Words\n  attr_reader :sentence\n\n  def initialize(sentence)\n    @sentence = normalize_sentence(sentence)\n  end\n\n  def count\n    results = Hash.new(0)\n    sentence.split(' ').each do |word|\n      results[word] += 1\n    end\n    results\n  end\n\n  private\n\n  def normalize_sentence(sentence)\n    sentence.gsub(/\\W/, ' ').downcase\n  end\nend	\N	\N	0	3	114	word-count.rb	2015-04-15 19:21:57	2015-04-15 19:21:57	{"word-count.rb":"class Words\\n  attr_reader :sentence\\n\\n  def initialize(sentence)\\n    @sentence = normalize_sentence(sentence)\\n  end\\n\\n  def count\\n    results = Hash.new(0)\\n    sentence.split(' ').each do |word|\\n      results[word] += 1\\n    end\\n    results\\n  end\\n\\n  private\\n\\n  def normalize_sentence(sentence)\\n    sentence.gsub(/\\\\W/, ' ').downcase\\n  end\\nend"}
164	26	a8e8d9e5405d078e3ceae24c	superseded	ruby	word-count	class Words\n  attr_reader :sentence\n\n  def initialize(input)\n    input.gsub!(/\\W/, ' ')\n    @sentence = input.downcase\n  end\n\n  def count\n    results = Hash.new(0)\n    sentence.split(' ').each do |word|\n      results[word] += 1\n    end\n    results\n  end\nend	\N	\N	0	1	114	word-count.rb	2015-08-04 02:06:53	2015-08-04 02:06:53	{"word-count.rb":"class Words\\n  attr_reader :sentence\\n\\n  def initialize(input)\\n    input.gsub!(/\\\\W/, ' ')\\n    @sentence = input.downcase\\n  end\\n\\n  def count\\n    results = Hash.new(0)\\n    sentence.split(' ').each do |word|\\n      results[word] += 1\\n    end\\n    results\\n  end\\nend"}
165	26	4283817b41f9617f8104fbe1	superseded	ruby	word-count	class Words\n  attr_reader :sentence\n\n  def initialize(string)\n    @sentence = normalize_string(string)\n  end\n\n  def count\n    results = Hash.new(0)\n    sentence.split(' ').each do |word|\n      results[word] += 1\n    end\n    results\n  end\n\n  private\n\n  def normalize_string(string)\n    string.gsub(/\\W/, ' ').downcase\n  end\nend	\N	\N	0	2	114	word-count.rb	2015-09-06 16:36:59	2015-09-06 16:36:59	{"word-count.rb":"class Words\\n  attr_reader :sentence\\n\\n  def initialize(string)\\n    @sentence = normalize_string(string)\\n  end\\n\\n  def count\\n    results = Hash.new(0)\\n    sentence.split(' ').each do |word|\\n      results[word] += 1\\n    end\\n    results\\n  end\\n\\n  private\\n\\n  def normalize_string(string)\\n    string.gsub(/\\\\W/, ' ').downcase\\n  end\\nend"}
260	35	190351b2ed975672c1395269	pending	javascript	hamming	module.exports = {\n    compute: function(a, b) {\n        var iterator = 0, diff = 0, length = a.length < b.length ? a.length : b.length;        \n        do {\n            if(a[iterator] !== b[iterator]) {\n                diff++;\n            }\n            iterator++;\n        } while (iterator < length)\n        return diff;\n    }\n}	\N	\N	0	1	182	hamming.js	2015-06-16 07:41:55	2015-06-16 07:41:55	{"hamming.js":"module.exports = {\\n    compute: function(a, b) {\\n        var iterator = 0, diff = 0, length = a.length \\u003c b.length ? a.length : b.length;        \\n        do {\\n            if(a[iterator] !== b[iterator]) {\\n                diff++;\\n            }\\n            iterator++;\\n        } while (iterator \\u003c length)\\n        return diff;\\n    }\\n}"}
166	7	3213a578fb91d19fe8b51380	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	115	/python/wordy/wordy.py	2015-05-23 01:13:25	2015-05-23 01:13:25	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
167	7	8009200397af171b6dbf9299	done	ruby	grains	class Grains\n  def square(count)\n    count.times.inject(0) {|_| _ = _.eql?(0) ? 1 : _ * 2 }\n  end\n\n  def total\n    square(65) - 1\n  end\nend	\N	\N	0	1	116	/ruby/grains/grains.rb	2015-06-08 18:38:57	2015-06-08 18:38:57	{"/ruby/grains/grains.rb":"class Grains\\n  def square(count)\\n    count.times.inject(0) {|_| _ = _.eql?(0) ? 1 : _ * 2 }\\n  end\\n\\n  def total\\n    square(65) - 1\\n  end\\nend"}
168	7	72d83161b85cda3e486cfe49	superseded	javascript	beer-song	var Beer = function(){\n\tvar moreBot1,\n\t\t\tmoreBot2,\n\t\t\tlessBot,\n\t\t\tvodka = 'one',\n\t\t\tpartOne = function(){ return (moreBot1 + " of beer on the wall, "+ moreBot2 +" of beer.\\n");},\n\t\t\tpartTwo = function(){ return ("Take "+vodka+" down and pass it around, "+lessBot+" of beer on the wall.\\n");},\n\t\t\tpartLast = function(){ return ('Go to the store and buy some more, 99 bottles of beer on the wall.\\n');};\n\n\tthis.verse = function(numBot){\n\t\tif (numBot > 1){\n\t\t\tmoreBot1 = numBot + ' bottles';\n\t\t\tmoreBot2 = numBot + ' bottles';\n\t\t\tlessBot = numBot-1 + ' bottles';\n\t\t\tvodka = 'one';\n\t\t\treturn partOne() + partTwo();\n\t\t} else if (numBot === 1) {\n\t\t\tmoreBot1 = '1 bottle';\n\t\t\tmoreBot2 = '1 bottle';\n\t\t\tvodka = 'it';\n\t\t\tlessBot = 'no more bottles';\n\t\t\treturn partOne() + partTwo();\n\t\t} else {\n\t\t\tmoreBot1 = 'No more bottles';\n\t\t\tmoreBot2 = 'no more bottles';\n\t\t\treturn partOne() + partLast();\n\t\t}\n\t};\n\n\tthis.sing = function (){\n\t\tvar songEnd = arguments[1] === undefined ? 0 : arguments[1],\n\t\t\t\tsongHolder = '',\n\t\t\t\tsongBegin = arguments[0];\n\t\twhile (songBegin >= songEnd){\n\t\t\tsongHolder += this.verse(songBegin);\n\t\t\tsongBegin--;\n\t\t\tif (songBegin-songEnd < 0) break;\n\t\t\tsongHolder += '\\n';\n\t\t}\n\t\treturn songHolder;\n\t};\n};\n\nvar Alc = new Beer();\n\nmodule.exports = Alc;	\N	\N	0	1	117	beer-song.js	2015-07-14 15:02:03	2015-07-14 15:02:03	{"beer-song.js":"var Beer = function(){\\n\\tvar moreBot1,\\n\\t\\t\\tmoreBot2,\\n\\t\\t\\tlessBot,\\n\\t\\t\\tvodka = 'one',\\n\\t\\t\\tpartOne = function(){ return (moreBot1 + \\" of beer on the wall, \\"+ moreBot2 +\\" of beer.\\\\n\\");},\\n\\t\\t\\tpartTwo = function(){ return (\\"Take \\"+vodka+\\" down and pass it around, \\"+lessBot+\\" of beer on the wall.\\\\n\\");},\\n\\t\\t\\tpartLast = function(){ return ('Go to the store and buy some more, 99 bottles of beer on the wall.\\\\n');};\\n\\n\\tthis.verse = function(numBot){\\n\\t\\tif (numBot \\u003e 1){\\n\\t\\t\\tmoreBot1 = numBot + ' bottles';\\n\\t\\t\\tmoreBot2 = numBot + ' bottles';\\n\\t\\t\\tlessBot = numBot-1 + ' bottles';\\n\\t\\t\\tvodka = 'one';\\n\\t\\t\\treturn partOne() + partTwo();\\n\\t\\t} else if (numBot === 1) {\\n\\t\\t\\tmoreBot1 = '1 bottle';\\n\\t\\t\\tmoreBot2 = '1 bottle';\\n\\t\\t\\tvodka = 'it';\\n\\t\\t\\tlessBot = 'no more bottles';\\n\\t\\t\\treturn partOne() + partTwo();\\n\\t\\t} else {\\n\\t\\t\\tmoreBot1 = 'No more bottles';\\n\\t\\t\\tmoreBot2 = 'no more bottles';\\n\\t\\t\\treturn partOne() + partLast();\\n\\t\\t}\\n\\t};\\n\\n\\tthis.sing = function (){\\n\\t\\tvar songEnd = arguments[1] === undefined ? 0 : arguments[1],\\n\\t\\t\\t\\tsongHolder = '',\\n\\t\\t\\t\\tsongBegin = arguments[0];\\n\\t\\twhile (songBegin \\u003e= songEnd){\\n\\t\\t\\tsongHolder += this.verse(songBegin);\\n\\t\\t\\tsongBegin--;\\n\\t\\t\\tif (songBegin-songEnd \\u003c 0) break;\\n\\t\\t\\tsongHolder += '\\\\n';\\n\\t\\t}\\n\\t\\treturn songHolder;\\n\\t};\\n};\\n\\nvar Alc = new Beer();\\n\\nmodule.exports = Alc;"}
169	7	8946f6f5fd97de5389710899	done	javascript	beer-song	var Beer = function(){\n\tvar moreBot1,\n\t\t\tmoreBot2,\n\t\t\tlessBot,\n\t\t\tvodka,\n\t\t\tfinalSong,\n\t\t\tpartOne = function(){ return (moreBot1 + " of beer on the wall, "+ moreBot2 +" of beer.\\n");},\n\t\t\tpartTwo = function(){ return ("Take "+vodka+" down and pass it around, "+lessBot+" of beer on the wall.\\n");},\n\t\t\tpartLast = function(){ return ('Go to the store and buy some more, 99 bottles of beer on the wall.\\n');};\n\n\tthis.verse = function(numBot){\n\t\tmoreBot1 = numBot > 1 ? numBot + ' bottles' : (numBot === 1 ? '1 bottle' : 'No more bottles');\n\t\tmoreBot2 = numBot > 1 ? numBot + ' bottles' : (numBot === 1 ? '1 bottle' : 'no more bottles');\n\t\tlessBot = numBot > 1 ? numBot-1 + ' bottles' : 'no more bottles';\n\t\tvodka = numBot > 1 ? 'one' : 'it';\n\t\tfinalSong = numBot >= 1 ? partOne() + partTwo() : partOne() + partLast();\n\t\treturn finalSong; \n\t};\n\n\tthis.sing = function (x, y){\n\t\tvar comboSong = '';\n\t\twhile (x >= (y||0)){\n\t\t\tcomboSong += this.verse(x);\n\t\t\tx--;\n\t\t\tif ((x - y) < 0) break;\n\t\t\tcomboSong += '\\n';\n\t\t}\n\t\treturn comboSong;\n\t};\n};\nvar Alc = new Beer();\nmodule.exports = Alc;	\N	\N	0	2	117	beer-song.js	2015-07-16 07:40:42	2015-07-16 07:40:42	{"beer-song.js":"var Beer = function(){\\n\\tvar moreBot1,\\n\\t\\t\\tmoreBot2,\\n\\t\\t\\tlessBot,\\n\\t\\t\\tvodka,\\n\\t\\t\\tfinalSong,\\n\\t\\t\\tpartOne = function(){ return (moreBot1 + \\" of beer on the wall, \\"+ moreBot2 +\\" of beer.\\\\n\\");},\\n\\t\\t\\tpartTwo = function(){ return (\\"Take \\"+vodka+\\" down and pass it around, \\"+lessBot+\\" of beer on the wall.\\\\n\\");},\\n\\t\\t\\tpartLast = function(){ return ('Go to the store and buy some more, 99 bottles of beer on the wall.\\\\n');};\\n\\n\\tthis.verse = function(numBot){\\n\\t\\tmoreBot1 = numBot \\u003e 1 ? numBot + ' bottles' : (numBot === 1 ? '1 bottle' : 'No more bottles');\\n\\t\\tmoreBot2 = numBot \\u003e 1 ? numBot + ' bottles' : (numBot === 1 ? '1 bottle' : 'no more bottles');\\n\\t\\tlessBot = numBot \\u003e 1 ? numBot-1 + ' bottles' : 'no more bottles';\\n\\t\\tvodka = numBot \\u003e 1 ? 'one' : 'it';\\n\\t\\tfinalSong = numBot \\u003e= 1 ? partOne() + partTwo() : partOne() + partLast();\\n\\t\\treturn finalSong; \\n\\t};\\n\\n\\tthis.sing = function (x, y){\\n\\t\\tvar comboSong = '';\\n\\t\\twhile (x \\u003e= (y||0)){\\n\\t\\t\\tcomboSong += this.verse(x);\\n\\t\\t\\tx--;\\n\\t\\t\\tif ((x - y) \\u003c 0) break;\\n\\t\\t\\tcomboSong += '\\\\n';\\n\\t\\t}\\n\\t\\treturn comboSong;\\n\\t};\\n};\\nvar Alc = new Beer();\\nmodule.exports = Alc;"}
170	7	d6199c3d99f7510a4ac00813	pending	ruby	saddle-points	class Matrix\r\n  def initialize(m)\r\n    @matrix = m.split("\\n").map { |x| x.scan(/\\d+/).map(&:to_i) }\r\n  end\r\n\r\n  def rows\r\n    @matrix\r\n  end\r\n\r\n  def columns\r\n    @matrix.transpose\r\n  end\r\n\r\n  def saddle_points\r\n    points = []\r\n    rows.each_with_index do |row, i|\r\n      row.each_with_index do |item, j|\r\n        if item == row.max and item == columns[j].min\r\n          points << [i, j]\r\n        end\r\n      end\r\n    end\r\n    points\r\n  end\r\nend\r	\N	\N	0	2	118	matrix.rb	2015-05-26 18:25:41	2015-05-26 18:25:41	{"matrix.rb":"class Matrix\\r\\n  def initialize(m)\\r\\n    @matrix = m.split(\\"\\\\n\\").map { |x| x.scan(/\\\\d+/).map(\\u0026:to_i) }\\r\\n  end\\r\\n\\r\\n  def rows\\r\\n    @matrix\\r\\n  end\\r\\n\\r\\n  def columns\\r\\n    @matrix.transpose\\r\\n  end\\r\\n\\r\\n  def saddle_points\\r\\n    points = []\\r\\n    rows.each_with_index do |row, i|\\r\\n      row.each_with_index do |item, j|\\r\\n        if item == row.max and item == columns[j].min\\r\\n          points \\u003c\\u003c [i, j]\\r\\n        end\\r\\n      end\\r\\n    end\\r\\n    points\\r\\n  end\\r\\nend\\r"}
171	7	6109780fb31b73ac89497392	superseded	ruby	saddle-points	class Matrix\r\n  def initialize(m)\r\n    @matrix = m.split("\\n").map { |x| x.scan(/\\d+/).map(&:to_i) }\r\n  end\r\n\r\n  def rows\r\n    @matrix\r\n  end\r\n\r\n  def columns\r\n    @matrix.transpose\r\n  end\r\n\r\n  def saddle_points\r\n    points = []\r\n    rows.each_with_index do |row, i|\r\n      row.each_with_index do |item, j|\r\n        if item == row.max and columns[j][i] == columns[j].min\r\n          points << [i, j]\r\n        end\r\n      end\r\n    end\r\n    points\r\n  end\r\nend\r	\N	\N	0	1	118	matrix.rb	2015-07-13 10:35:13	2015-07-13 10:35:13	{"matrix.rb":"class Matrix\\r\\n  def initialize(m)\\r\\n    @matrix = m.split(\\"\\\\n\\").map { |x| x.scan(/\\\\d+/).map(\\u0026:to_i) }\\r\\n  end\\r\\n\\r\\n  def rows\\r\\n    @matrix\\r\\n  end\\r\\n\\r\\n  def columns\\r\\n    @matrix.transpose\\r\\n  end\\r\\n\\r\\n  def saddle_points\\r\\n    points = []\\r\\n    rows.each_with_index do |row, i|\\r\\n      row.each_with_index do |item, j|\\r\\n        if item == row.max and columns[j][i] == columns[j].min\\r\\n          points \\u003c\\u003c [i, j]\\r\\n        end\\r\\n      end\\r\\n    end\\r\\n    points\\r\\n  end\\r\\nend\\r"}
261	35	d958301d06ddd3974043e12c	pending	ruby	nth-prime	require 'prime'\n\nclass Prime\n  def self.nth(number)\n    fail ArgumentError, 'Invalid Input', caller if number <= 0\n    EratosthenesSieve.instance.get_nth_prime(number - 1)\n  end\nend	\N	\N	0	1	183	/ruby/nth-prime/prime.rb	2015-05-29 22:59:36	2015-05-29 22:59:36	{"/ruby/nth-prime/prime.rb":"require 'prime'\\n\\nclass Prime\\n  def self.nth(number)\\n    fail ArgumentError, 'Invalid Input', caller if number \\u003c= 0\\n    EratosthenesSieve.instance.get_nth_prime(number - 1)\\n  end\\nend"}
172	7	ab659d455448ad79b9b2456c	done	ruby	say	class Say\n\n  N_TO_WORDS = {\n    0 => { teen: "ten" },\n    1 => { normal: "one", teen: "ten", ty: "eleven" },\n    2 => { normal: "two", teen: "twleve", ty: "twenty" },\n    3 => { normal: "three", teen: "thirteen", ty: "thirty" },\n    4 => { normal: "four", teen: "fourteen", ty: "forty" },\n    5 => { normal: "five", teen: "fifteen", ty: "fifty" },\n    6 => { normal: "six", teen: "sixteen", ty: "sixty" },\n    7 => { normal: "seven", teen: "seventeen", ty: "seventy" },\n    8 => { normal: "eight", teen: "eighteen", ty: "eighty" },\n    9 => { normal: "nine", teen: "nineteen", ty: "ninety" }\n  }\n\n  MAGNITUDE_WORD = {\n    1_000_000_000_000 => :trillion,\n    1_000_000_000     => :billion,\n    1_000_000         => :million,\n    1_000             => :thousand\n  }\n\n  def initialize(n)\n    @n = n\n  end\n\n  def in_english\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\n    return "zero" if @n.zero?\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\n      q, r = result[:value].divmod(magnitude)\n      result[:words] << "#{meta_words(q)} #{name}" if q > 0\n      result.merge(value: r)\n    end\n    say[:words] << meta_words(say[:value]) unless say[:value].zero?\n    say[:words].join(" ")\n  end\n\n  private\n\n  def meta_words(n)\n    "#{hundred(n)} #{below_hundred(n.modulo(100))}".strip\n  end\n\n  def hundred(n)\n    q, r = n.divmod(100)\n    q.zero? ? nil : "#{N_TO_WORDS[q][:normal]} hundred"\n  end\n\n  def below_hundred(n)\n    q, r = n.divmod(10)\n    ty_word = N_TO_WORDS[q][:ty] if q > 1\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\n    [ty_word, teen_word].compact.join("-")\n  end\nend	\N	\N	0	1	119	/ruby/say/say.rb	2015-09-12 23:31:13	2015-09-12 23:31:13	{"/ruby/say/say.rb":"class Say\\n\\n  N_TO_WORDS = {\\n    0 =\\u003e { teen: \\"ten\\" },\\n    1 =\\u003e { normal: \\"one\\", teen: \\"ten\\", ty: \\"eleven\\" },\\n    2 =\\u003e { normal: \\"two\\", teen: \\"twleve\\", ty: \\"twenty\\" },\\n    3 =\\u003e { normal: \\"three\\", teen: \\"thirteen\\", ty: \\"thirty\\" },\\n    4 =\\u003e { normal: \\"four\\", teen: \\"fourteen\\", ty: \\"forty\\" },\\n    5 =\\u003e { normal: \\"five\\", teen: \\"fifteen\\", ty: \\"fifty\\" },\\n    6 =\\u003e { normal: \\"six\\", teen: \\"sixteen\\", ty: \\"sixty\\" },\\n    7 =\\u003e { normal: \\"seven\\", teen: \\"seventeen\\", ty: \\"seventy\\" },\\n    8 =\\u003e { normal: \\"eight\\", teen: \\"eighteen\\", ty: \\"eighty\\" },\\n    9 =\\u003e { normal: \\"nine\\", teen: \\"nineteen\\", ty: \\"ninety\\" }\\n  }\\n\\n  MAGNITUDE_WORD = {\\n    1_000_000_000_000 =\\u003e :trillion,\\n    1_000_000_000     =\\u003e :billion,\\n    1_000_000         =\\u003e :million,\\n    1_000             =\\u003e :thousand\\n  }\\n\\n  def initialize(n)\\n    @n = n\\n  end\\n\\n  def in_english\\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\\n    return \\"zero\\" if @n.zero?\\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\\n      q, r = result[:value].divmod(magnitude)\\n      result[:words] \\u003c\\u003c \\"#{meta_words(q)} #{name}\\" if q \\u003e 0\\n      result.merge(value: r)\\n    end\\n    say[:words] \\u003c\\u003c meta_words(say[:value]) unless say[:value].zero?\\n    say[:words].join(\\" \\")\\n  end\\n\\n  private\\n\\n  def meta_words(n)\\n    \\"#{hundred(n)} #{below_hundred(n.modulo(100))}\\".strip\\n  end\\n\\n  def hundred(n)\\n    q, r = n.divmod(100)\\n    q.zero? ? nil : \\"#{N_TO_WORDS[q][:normal]} hundred\\"\\n  end\\n\\n  def below_hundred(n)\\n    q, r = n.divmod(10)\\n    ty_word = N_TO_WORDS[q][:ty] if q \\u003e 1\\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\\n    [ty_word, teen_word].compact.join(\\"-\\")\\n  end\\nend"}
173	7	07eb340c03d6a2599d09e4e3	done	clojure	binary	(ns binary\n     (:import java.lang.Math ))\n\n (defn to-decimal-seq [binaryStr]\n       (let [tidyStr (clojure.string/replace binaryStr #"[^0-9]" "0")  ;Treat invalid input as binary 0\n             idx-map (map-indexed vector  (clojure.string/reverse tidyStr))]\n            (for [[x v] idx-map]\n                 (do\n                  ;(println (format " (2 ^ %1s) * %2s" x v ))\n                  (* (Math/pow 2 (read-string (str x))) (read-string (str v)))))))\n\n\n (defn to-decimal [binaryStr]\n       (let [col (to-decimal-seq binaryStr)]\n            (int (apply + col))))	\N	\N	0	1	120	/clojure/binary/binary.clj	2015-05-15 10:41:33	2015-05-15 10:41:33	{"/clojure/binary/binary.clj":"(ns binary\\n     (:import java.lang.Math ))\\n\\n (defn to-decimal-seq [binaryStr]\\n       (let [tidyStr (clojure.string/replace binaryStr #\\"[^0-9]\\" \\"0\\")  ;Treat invalid input as binary 0\\n             idx-map (map-indexed vector  (clojure.string/reverse tidyStr))]\\n            (for [[x v] idx-map]\\n                 (do\\n                  ;(println (format \\" (2 ^ %1s) * %2s\\" x v ))\\n                  (* (Math/pow 2 (read-string (str x))) (read-string (str v)))))))\\n\\n\\n (defn to-decimal [binaryStr]\\n       (let [col (to-decimal-seq binaryStr)]\\n            (int (apply + col))))"}
174	23	cdbb061842f10a91907df824	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char\nimport Data.List       (foldl')\nimport Data.Map hiding (filter,foldl',null)\n\nwordCount :: String -> Map String Integer\nwordCount\n  = foldl' tally empty\n  . filter (not . null)\n  . words'\n  . fmap toLower\n  where\n    tally m x = insertWith (+) x 1 m\n    words' [] = []\n    words' xs = y : words' ys\n      where\n        (y,ys) = span isAlphaNum\n               $ dropWhile (not . isAlphaNum) xs	\N	\N	0	1	121	WordCount.hs	2015-08-22 01:10:24	2015-08-22 01:10:24	{"WordCount.hs":"module WordCount (wordCount) where\\n\\nimport Data.Char\\nimport Data.List       (foldl')\\nimport Data.Map hiding (filter,foldl',null)\\n\\nwordCount :: String -\\u003e Map String Integer\\nwordCount\\n  = foldl' tally empty\\n  . filter (not . null)\\n  . words'\\n  . fmap toLower\\n  where\\n    tally m x = insertWith (+) x 1 m\\n    words' [] = []\\n    words' xs = y : words' ys\\n      where\\n        (y,ys) = span isAlphaNum\\n               $ dropWhile (not . isAlphaNum) xs"}
175	23	eb1a140e039a2082cc94d63d	done	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char       (isAlphaNum,toLower)\nimport Data.List       (foldl')\nimport Data.List.Split (wordsBy)\nimport Data.Map.Strict (Map,empty,insertWith)\n\nwordCount :: String -> Map String Integer\nwordCount\n  = foldl' tally empty\n  . wordsBy (not . isAlphaNum)\n  . fmap toLower\n  where\n    tally m x = insertWith (+) x 1 m	\N	\N	0	2	121	WordCount.hs	2015-09-03 23:41:08	2015-09-03 23:41:08	{"WordCount.hs":"module WordCount (wordCount) where\\n\\nimport Data.Char       (isAlphaNum,toLower)\\nimport Data.List       (foldl')\\nimport Data.List.Split (wordsBy)\\nimport Data.Map.Strict (Map,empty,insertWith)\\n\\nwordCount :: String -\\u003e Map String Integer\\nwordCount\\n  = foldl' tally empty\\n  . wordsBy (not . isAlphaNum)\\n  . fmap toLower\\n  where\\n    tally m x = insertWith (+) x 1 m"}
176	23	17977cd42b1dfbdb03576ccc	pending	ruby	kindergarten-garden	class Garden\n  attr_reader :plantings, :students\n\n  def initialize(diagram, students=default_class)\n    @plantings = parse_diagram(diagram)\n    @students = parse_students(students).sort\n  end\n\n  private\n\n  def parse_diagram(diagram)\n    diagram.split("\\n").map{ |row| row.chars }\n  end\n\n  def parse_students(students)\n    students.map { |s| s.downcase.to_sym }\n  end\n\n  def student_garden_locations\n    locations = {}\n    students.each_with_index do |student, i|\n      locations[student] = ((i * 2)..(i * 2 + 1))\n    end\n    locations\n  end\n\n  def method_missing(student)\n    my_locations = student_garden_locations[student]\n    my_plants = plantings.map { |row| row[my_locations] }\n    unabbreviate(my_plants)\n  end\n\n  def unabbreviate(plants)\n    plants.flatten.map { |plant| abbreviations[plant] }\n  end\n\n  def abbreviations\n    { "R" => :radishes,\n      "C" => :clover,\n      "G" => :grass,\n      "V" => :violets\n    }\n  end\n\n  def default_class\n    [ :alice, :bob, :charlie, :david,\n      :eve, :fred, :ginny, :harriet,\n      :ileana, :joseph, :kincaid, :larry]\n  end\n\nend	\N	\N	0	1	122	garden.rb	2015-08-21 09:28:28	2015-08-21 09:28:28	{"garden.rb":"class Garden\\n  attr_reader :plantings, :students\\n\\n  def initialize(diagram, students=default_class)\\n    @plantings = parse_diagram(diagram)\\n    @students = parse_students(students).sort\\n  end\\n\\n  private\\n\\n  def parse_diagram(diagram)\\n    diagram.split(\\"\\\\n\\").map{ |row| row.chars }\\n  end\\n\\n  def parse_students(students)\\n    students.map { |s| s.downcase.to_sym }\\n  end\\n\\n  def student_garden_locations\\n    locations = {}\\n    students.each_with_index do |student, i|\\n      locations[student] = ((i * 2)..(i * 2 + 1))\\n    end\\n    locations\\n  end\\n\\n  def method_missing(student)\\n    my_locations = student_garden_locations[student]\\n    my_plants = plantings.map { |row| row[my_locations] }\\n    unabbreviate(my_plants)\\n  end\\n\\n  def unabbreviate(plants)\\n    plants.flatten.map { |plant| abbreviations[plant] }\\n  end\\n\\n  def abbreviations\\n    { \\"R\\" =\\u003e :radishes,\\n      \\"C\\" =\\u003e :clover,\\n      \\"G\\" =\\u003e :grass,\\n      \\"V\\" =\\u003e :violets\\n    }\\n  end\\n\\n  def default_class\\n    [ :alice, :bob, :charlie, :david,\\n      :eve, :fred, :ginny, :harriet,\\n      :ileana, :joseph, :kincaid, :larry]\\n  end\\n\\nend"}
262	35	f69e202abfea86a5cf110eb4	done	ruby	grains	class Grains\n  def square(count)\n    count.times.inject(0) {|_| _ = _.eql?(0) ? 1 : _ * 2 }\n  end\n\n  def total\n    square(65) - 1\n  end\nend	\N	\N	0	1	184	/ruby/grains/grains.rb	2015-04-29 00:41:48	2015-04-29 00:41:48	{"/ruby/grains/grains.rb":"class Grains\\n  def square(count)\\n    count.times.inject(0) {|_| _ = _.eql?(0) ? 1 : _ * 2 }\\n  end\\n\\n  def total\\n    square(65) - 1\\n  end\\nend"}
177	23	e32edb2e34bd378b786a0109	superseded	ruby	nucleotide-count	class DNA\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n    @result = {"A"=>0, "T"=>0, "C"=>0, "G"=>0}\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\n  end\n\n  def nucleotide_counts\n    @result\n  end\n\n  def count(nucleotide)\n    if nucleotide == "U"\n      0\n    elsif ["A", "T", "C", "G"].include?(nucleotide)\n      @result[nucleotide]\n    else\n      raise(ArgumentError)\n    end\n  end\nend	\N	\N	0	1	123	nucleotide-count.rb	2015-09-05 06:33:54	2015-09-05 06:33:54	{"nucleotide-count.rb":"class DNA\\n\\n  def initialize(dna_string)\\n    @dna_string = dna_string\\n    @result = {\\"A\\"=\\u003e0, \\"T\\"=\\u003e0, \\"C\\"=\\u003e0, \\"G\\"=\\u003e0}\\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\\n  end\\n\\n  def nucleotide_counts\\n    @result\\n  end\\n\\n  def count(nucleotide)\\n    if nucleotide == \\"U\\"\\n      0\\n    elsif [\\"A\\", \\"T\\", \\"C\\", \\"G\\"].include?(nucleotide)\\n      @result[nucleotide]\\n    else\\n      raise(ArgumentError)\\n    end\\n  end\\nend"}
178	23	638855fcf4ebae6c8f2932e6	pending	ruby	nucleotide-count	class DNA\n  Nucleotides = {"A" => 0, "T" => 0, "C" => 0, "G" => 0}\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n    @result = Nucleotides.dup\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\n  end\n\n  def nucleotide_counts\n    @result\n  end\n\n  def count(nucleotide)\n    if nucleotide == "U"\n      0\n    elsif Nucleotides.keys.include?(nucleotide)\n      @result[nucleotide]\n    else\n      raise(ArgumentError, "Argument Error")\n    end\n  end\nend	\N	\N	0	2	123	nucleotide-count.rb	2015-09-12 06:43:55	2015-09-12 06:43:55	{"nucleotide-count.rb":"class DNA\\n  Nucleotides = {\\"A\\" =\\u003e 0, \\"T\\" =\\u003e 0, \\"C\\" =\\u003e 0, \\"G\\" =\\u003e 0}\\n\\n  def initialize(dna_string)\\n    @dna_string = dna_string\\n    @result = Nucleotides.dup\\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\\n  end\\n\\n  def nucleotide_counts\\n    @result\\n  end\\n\\n  def count(nucleotide)\\n    if nucleotide == \\"U\\"\\n      0\\n    elsif Nucleotides.keys.include?(nucleotide)\\n      @result[nucleotide]\\n    else\\n      raise(ArgumentError, \\"Argument Error\\")\\n    end\\n  end\\nend"}
179	23	41cd96ee97bb2405350809f9	pending	python	kindergarten-garden	# William Morris\r\n# exercism.io\r\n# garden.py\r\n\r\nclass Garden:\r\n\r\n    def __init__(self, rows, students =['Alice', 'Bob', 'Charlie', 'David', 'Eve',\r\n                                        'Fred', 'Ginny', 'Harriet', 'Ileana',\r\n                                        'Joseph', 'Kincaid', 'Larry'] ):\r\n        \r\n        self.names = students\r\n        self.names.sort()\r\n        self.seeds ={'G':'Grass','C':'Clover','R':'Radishes','V':'Violets'}\r\n        self.rows = rows.split()\r\n        name_index = 0\r\n        self.students_cups = {}\r\n        for cups in range(0,len(self.rows[0]),2):\r\n            cups_first_row = self.rows[0][cups:cups+2]\r\n            cups_second_row = self.rows[1][cups:cups+2]\r\n            self.students_cups[self.names[name_index]]=cups_first_row + cups_second_row\r\n            name_index += 1\r\n        self.students_plants = {}\r\n        for name in self.students_cups.keys():\r\n            self.students_plants[name] =  [self.seeds[seed] for seed in\r\n                                          self.students_cups[name]]\r\n            \r\n    def plants(self,name):\r\n        return self.students_plants[name]\r\n    \r	\N	\N	0	1	124	garden.py	2015-08-13 02:33:18	2015-08-13 02:33:18	{"garden.py":"# William Morris\\r\\n# exercism.io\\r\\n# garden.py\\r\\n\\r\\nclass Garden:\\r\\n\\r\\n    def __init__(self, rows, students =['Alice', 'Bob', 'Charlie', 'David', 'Eve',\\r\\n                                        'Fred', 'Ginny', 'Harriet', 'Ileana',\\r\\n                                        'Joseph', 'Kincaid', 'Larry'] ):\\r\\n        \\r\\n        self.names = students\\r\\n        self.names.sort()\\r\\n        self.seeds ={'G':'Grass','C':'Clover','R':'Radishes','V':'Violets'}\\r\\n        self.rows = rows.split()\\r\\n        name_index = 0\\r\\n        self.students_cups = {}\\r\\n        for cups in range(0,len(self.rows[0]),2):\\r\\n            cups_first_row = self.rows[0][cups:cups+2]\\r\\n            cups_second_row = self.rows[1][cups:cups+2]\\r\\n            self.students_cups[self.names[name_index]]=cups_first_row + cups_second_row\\r\\n            name_index += 1\\r\\n        self.students_plants = {}\\r\\n        for name in self.students_cups.keys():\\r\\n            self.students_plants[name] =  [self.seeds[seed] for seed in\\r\\n                                          self.students_cups[name]]\\r\\n            \\r\\n    def plants(self,name):\\r\\n        return self.students_plants[name]\\r\\n    \\r"}
180	23	22c44c168266de10001f764c	superseded	haskell	bob	module Bob where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor x | filter (not . isSpace) x == "" = "Fine. Be that way!"\nresponseFor s | yelling s                      = "Woah, chill out!"\nresponseFor q | last q == '?'                  = "Sure."\nresponseFor _                                  = "Whatever."\n\nyelling :: String -> Bool\nyelling s = all (isLetter .-> isUpper) s && any isLetter s\n  where\n    a .-> b = \\x -> not (a x) || b x -- logical implication	\N	\N	0	1	125	bob.hs	2015-09-05 07:47:37	2015-09-05 07:47:37	{"bob.hs":"module Bob where\\n\\nimport Data.Char\\n\\nresponseFor :: String -\\u003e String\\nresponseFor x | filter (not . isSpace) x == \\"\\" = \\"Fine. Be that way!\\"\\nresponseFor s | yelling s                      = \\"Woah, chill out!\\"\\nresponseFor q | last q == '?'                  = \\"Sure.\\"\\nresponseFor _                                  = \\"Whatever.\\"\\n\\nyelling :: String -\\u003e Bool\\nyelling s = all (isLetter .-\\u003e isUpper) s \\u0026\\u0026 any isLetter s\\n  where\\n    a .-\\u003e b = \\\\x -\\u003e not (a x) || b x -- logical implication"}
181	23	8b950f8dbc9ca70070bd1bc4	done	haskell	bob	module Bob where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor x | filter (not . isSpace) x == "" = "Fine. Be that way!"\nresponseFor s | yelling s                      = "Woah, chill out!"\nresponseFor q | last q == '?'                  = "Sure."\nresponseFor _                                  = "Whatever."\n\nyelling :: String -> Bool\nyelling s = all (not . isLower) s && any isLetter s	\N	\N	0	2	125	bob.hs	2015-09-16 22:44:24	2015-09-16 22:44:24	{"bob.hs":"module Bob where\\n\\nimport Data.Char\\n\\nresponseFor :: String -\\u003e String\\nresponseFor x | filter (not . isSpace) x == \\"\\" = \\"Fine. Be that way!\\"\\nresponseFor s | yelling s                      = \\"Woah, chill out!\\"\\nresponseFor q | last q == '?'                  = \\"Sure.\\"\\nresponseFor _                                  = \\"Whatever.\\"\\n\\nyelling :: String -\\u003e Bool\\nyelling s = all (not . isLower) s \\u0026\\u0026 any isLetter s"}
182	23	2829dbe1177016031f8d9080	pending	javascript	hamming	module.exports = {\n    compute: function(a, b) {\n        var iterator = 0, diff = 0, length = a.length < b.length ? a.length : b.length;        \n        do {\n            if(a[iterator] !== b[iterator]) {\n                diff++;\n            }\n            iterator++;\n        } while (iterator < length)\n        return diff;\n    }\n}	\N	\N	0	1	126	hamming.js	2015-08-20 13:26:46	2015-08-20 13:26:46	{"hamming.js":"module.exports = {\\n    compute: function(a, b) {\\n        var iterator = 0, diff = 0, length = a.length \\u003c b.length ? a.length : b.length;        \\n        do {\\n            if(a[iterator] !== b[iterator]) {\\n                diff++;\\n            }\\n            iterator++;\\n        } while (iterator \\u003c length)\\n        return diff;\\n    }\\n}"}
183	23	076e2c45da141d756f6f22ba	pending	lua	hamming	local Hamming = {}\n\nfunction Hamming.compute(str1, str2)\n  local distance = 0\n\n  for i = 1, math.min(#str1, #str2) do\n    if str1:sub(i,i) ~= str2:sub(i,i) then\n      distance = distance + 1\n    end\n  end\n\n  return distance\nend\n\nreturn Hamming	\N	\N	0	1	127	hamming.lua	2015-09-06 22:11:07	2015-09-06 22:11:07	{"hamming.lua":"local Hamming = {}\\n\\nfunction Hamming.compute(str1, str2)\\n  local distance = 0\\n\\n  for i = 1, math.min(#str1, #str2) do\\n    if str1:sub(i,i) ~= str2:sub(i,i) then\\n      distance = distance + 1\\n    end\\n  end\\n\\n  return distance\\nend\\n\\nreturn Hamming"}
184	17	25dbe04a0f10daa0de860f10	done	elixir	sublist	defmodule Sublist do\n  @doc """\n  Returns whether the first list is a sublist or a superlist of the second list\n  and if not whether it is equal or unequal to the second list.\n  """\n  def compare(a, b) do\n    result = {:equal, :unequal, :sublist, :superlist}\n    _compare(a, b)\n  end\n\n  defp _compare(a, a) do\n    :equal\n  end\n\n  defp _compare(a, b) do\n    cond do\n      sublist_of?(a, b) ->\n        :sublist\n      sublist_of?(b, a) ->\n        :superlist\n      true              ->\n        :unequal\n    end\n  end\n\n  defp sublist_of?([], _), do: true\n  defp sublist_of?(_, []), do: false\n  defp sublist_of?(a, b) when length(a) > length(b), do: false\n  defp sublist_of?(a, b) do\n    if Enum.take(b, length(a)) === a do\n      true\n    else\n      [_ | t] = b\n      sublist_of?(a, t)\n    end\n  end \n\n  defp compact(list) do\n    Enum.reject(list, &is_nil/1)\n  end\nend	\N	\N	0	1	128	/elixir/sublist/sublist.exs	2015-02-13 09:16:53	2015-02-13 09:16:53	{"/elixir/sublist/sublist.exs":"defmodule Sublist do\\n  @doc \\"\\"\\"\\n  Returns whether the first list is a sublist or a superlist of the second list\\n  and if not whether it is equal or unequal to the second list.\\n  \\"\\"\\"\\n  def compare(a, b) do\\n    result = {:equal, :unequal, :sublist, :superlist}\\n    _compare(a, b)\\n  end\\n\\n  defp _compare(a, a) do\\n    :equal\\n  end\\n\\n  defp _compare(a, b) do\\n    cond do\\n      sublist_of?(a, b) -\\u003e\\n        :sublist\\n      sublist_of?(b, a) -\\u003e\\n        :superlist\\n      true              -\\u003e\\n        :unequal\\n    end\\n  end\\n\\n  defp sublist_of?([], _), do: true\\n  defp sublist_of?(_, []), do: false\\n  defp sublist_of?(a, b) when length(a) \\u003e length(b), do: false\\n  defp sublist_of?(a, b) do\\n    if Enum.take(b, length(a)) === a do\\n      true\\n    else\\n      [_ | t] = b\\n      sublist_of?(a, t)\\n    end\\n  end \\n\\n  defp compact(list) do\\n    Enum.reject(list, \\u0026is_nil/1)\\n  end\\nend"}
185	17	8d754fe75ab83e92deb2adf6	pending	python	beer-song	def bottles(n):\n\n\tif n == 0:\n\t\treturn "no more bottles"\n\tif n == 1:\n\t\treturn "1 bottle"\n\treturn "%d bottles" % n\n\ndef verse(n):\n\tres =  "%s of beer on the wall, %s of beer.\\n" % (bottles(n).capitalize(), bottles(n))\n\tif n == 0:\n\t\tres += "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n\telif n == 1:\n\t\tres += "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n\telse:\n\t\tres += "Take one down and pass it around, %s of beer on the wall.\\n" % bottles(n-1)\n\treturn res\n\ndef song(hi, low = 0):\n\treturn ''.join(\n\t\tverse(n) + '\\n'\n\t\tfor n in xrange(hi, low - 1, -1)\n\t)	\N	\N	0	1	129	/python/beer-song/beer.py	2015-02-26 15:48:45	2015-02-26 15:48:45	{"/python/beer-song/beer.py":"def bottles(n):\\n\\n\\tif n == 0:\\n\\t\\treturn \\"no more bottles\\"\\n\\tif n == 1:\\n\\t\\treturn \\"1 bottle\\"\\n\\treturn \\"%d bottles\\" % n\\n\\ndef verse(n):\\n\\tres =  \\"%s of beer on the wall, %s of beer.\\\\n\\" % (bottles(n).capitalize(), bottles(n))\\n\\tif n == 0:\\n\\t\\tres += \\"Go to the store and buy some more, 99 bottles of beer on the wall.\\\\n\\"\\n\\telif n == 1:\\n\\t\\tres += \\"Take it down and pass it around, no more bottles of beer on the wall.\\\\n\\"\\n\\telse:\\n\\t\\tres += \\"Take one down and pass it around, %s of beer on the wall.\\\\n\\" % bottles(n-1)\\n\\treturn res\\n\\ndef song(hi, low = 0):\\n\\treturn ''.join(\\n\\t\\tverse(n) + '\\\\n'\\n\\t\\tfor n in xrange(hi, low - 1, -1)\\n\\t)"}
186	20	ebc0351e7ec7daa2411c5a57	done	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule Octal( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readBase 8\n\nshowOct :: Integral a => a -> String\nshowOct = showBase 8\n\nreadBase :: Integral a => a -> String -> a\nreadBase b s = readBase' 0 s\n  where \n    readBase' acc "" = acc\n    readBase' acc (d : ds) \n        | acc `seq` False = undefined \n        | not (valid b d) = 0\n        | otherwise = readBase' (b*acc + fromChar d) ds\n\nvalid :: Integral b => b -> Char -> Bool\nvalid b c | b <= 10   = c >= '0' && c < bd\n          | otherwise = (c >= '0' && c <= '9') || \n                        (c >= 'A' && c < bdu) ||\n                        (c >= 'a' && c < bd)\n  where \n    bd = fromDigit b\n    bdu = fromDigitC b\n\nfromChar :: Integral a => Char -> a\nfromChar c | c <= '9' = fromBase '0' c\n           | c <= 'Z' = fromBase 'A' c\n           | otherwise = fromBase 'a' c\n  where \n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \n\nshowBase :: Integral a => a -> a -> String\nshowBase b n | b < 1 || n < 0 = ""\n             | n == 0 = "0"\n             | otherwise = digitsP "" n\n  where\n    digitsP ds k | dc `seq` ds `seq` False = undefined\n                 | k == 0 = ds\n                 | otherwise = digitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` b\n        dc = fromDigit $! d\n\ntoBase :: Integral a => Char -> a -> Char\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\n\nfromDigit :: Integral a => a -> Char\nfromDigit d | d <= 9 = toBase '0' d\n            | otherwise = toBase 'a' d\n\nfromDigitC :: Integral a => a -> Char\nfromDigitC d | d <= 9 = toBase '0' d\n             | otherwise = toBase 'A' d	\N	\N	0	2	130	Octal.hs	2015-04-13 16:23:58	2015-04-13 16:23:58	{"Octal.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule Octal( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readBase 8\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct = showBase 8\\n\\nreadBase :: Integral a =\\u003e a -\\u003e String -\\u003e a\\nreadBase b s = readBase' 0 s\\n  where \\n    readBase' acc \\"\\" = acc\\n    readBase' acc (d : ds) \\n        | acc `seq` False = undefined \\n        | not (valid b d) = 0\\n        | otherwise = readBase' (b*acc + fromChar d) ds\\n\\nvalid :: Integral b =\\u003e b -\\u003e Char -\\u003e Bool\\nvalid b c | b \\u003c= 10   = c \\u003e= '0' \\u0026\\u0026 c \\u003c bd\\n          | otherwise = (c \\u003e= '0' \\u0026\\u0026 c \\u003c= '9') || \\n                        (c \\u003e= 'A' \\u0026\\u0026 c \\u003c bdu) ||\\n                        (c \\u003e= 'a' \\u0026\\u0026 c \\u003c bd)\\n  where \\n    bd = fromDigit b\\n    bdu = fromDigitC b\\n\\nfromChar :: Integral a =\\u003e Char -\\u003e a\\nfromChar c | c \\u003c= '9' = fromBase '0' c\\n           | c \\u003c= 'Z' = fromBase 'A' c\\n           | otherwise = fromBase 'a' c\\n  where \\n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \\n\\nshowBase :: Integral a =\\u003e a -\\u003e a -\\u003e String\\nshowBase b n | b \\u003c 1 || n \\u003c 0 = \\"\\"\\n             | n == 0 = \\"0\\"\\n             | otherwise = digitsP \\"\\" n\\n  where\\n    digitsP ds k | dc `seq` ds `seq` False = undefined\\n                 | k == 0 = ds\\n                 | otherwise = digitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` b\\n        dc = fromDigit $! d\\n\\ntoBase :: Integral a =\\u003e Char -\\u003e a -\\u003e Char\\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\\n\\nfromDigit :: Integral a =\\u003e a -\\u003e Char\\nfromDigit d | d \\u003c= 9 = toBase '0' d\\n            | otherwise = toBase 'a' d\\n\\nfromDigitC :: Integral a =\\u003e a -\\u003e Char\\nfromDigitC d | d \\u003c= 9 = toBase '0' d\\n             | otherwise = toBase 'A' d"}
187	20	89ed3d51db74710017f166dc	superseded	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule OctalSeq( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readOct' 0\n  where \n    readOct' acc "" = acc `seq` acc\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\n      where\n        toOctVal '0' = 0\n        toOctVal '1' = 1\n        toOctVal '2' = 2\n        toOctVal '3' = 3\n        toOctVal '4' = 4\n        toOctVal '5' = 5\n        toOctVal '6' = 6\n        toOctVal '7' = 7\n        toOctVal  _  = error "invalid digit"\n\nshowOct :: Integral a => a -> String\nshowOct n | n < 0 = ""\n          | n == 0 = "0"\n          | otherwise = octDigitsP "" n\n  where\n    octDigitsP ds 0 = ds `seq` ds\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` 8\n        dc = toOctChar $! d\n        toOctChar 0 = '0'\n        toOctChar 1 = '1'\n        toOctChar 2 = '2'\n        toOctChar 3 = '3'\n        toOctChar 4 = '4'\n        toOctChar 5 = '5'\n        toOctChar 6 = '6'\n        toOctChar 7 = '7'\n        toOctChar _ = error "invalid digit"	\N	\N	0	1	130	OctalSeq.hs	2015-05-11 07:32:05	2015-05-11 07:32:05	{"OctalSeq.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule OctalSeq( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readOct' 0\\n  where \\n    readOct' acc \\"\\" = acc `seq` acc\\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\\n      where\\n        toOctVal '0' = 0\\n        toOctVal '1' = 1\\n        toOctVal '2' = 2\\n        toOctVal '3' = 3\\n        toOctVal '4' = 4\\n        toOctVal '5' = 5\\n        toOctVal '6' = 6\\n        toOctVal '7' = 7\\n        toOctVal  _  = error \\"invalid digit\\"\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct n | n \\u003c 0 = \\"\\"\\n          | n == 0 = \\"0\\"\\n          | otherwise = octDigitsP \\"\\" n\\n  where\\n    octDigitsP ds 0 = ds `seq` ds\\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` 8\\n        dc = toOctChar $! d\\n        toOctChar 0 = '0'\\n        toOctChar 1 = '1'\\n        toOctChar 2 = '2'\\n        toOctChar 3 = '3'\\n        toOctChar 4 = '4'\\n        toOctChar 5 = '5'\\n        toOctChar 6 = '6'\\n        toOctChar 7 = '7'\\n        toOctChar _ = error \\"invalid digit\\""}
188	20	eeaff901b73c1578f1609726	pending	clojure	robot-name	(ns robot-name)\n\n(def characters "ABCDEFGHIJKLMNOPQRSTUVWXYZ")\n\n(def numbers "1234567890")\n\n(defn- rand-n-source [n source]\n  (->> (fn [] (rand-nth source))\n       (repeatedly)\n       (take n)\n       (apply str)))\n\n(defn- generate-id [] \n  (str (rand-n-source 2 characters)\n       (rand-n-source 4 numbers)))\n\n(defn robot []\n  (atom {:name ""}))\n\n(defn robot-name [robot]\n  (if (empty? @robot)\n    (reset! robot (generate-id))\n    @robot))\n\n(defn reset-name [robot]\n  (reset! robot ""))	\N	\N	0	1	131	/clojure/robot-name/robot_name.clj	2015-08-27 07:04:35	2015-08-27 07:04:35	{"/clojure/robot-name/robot_name.clj":"(ns robot-name)\\n\\n(def characters \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\")\\n\\n(def numbers \\"1234567890\\")\\n\\n(defn- rand-n-source [n source]\\n  (-\\u003e\\u003e (fn [] (rand-nth source))\\n       (repeatedly)\\n       (take n)\\n       (apply str)))\\n\\n(defn- generate-id [] \\n  (str (rand-n-source 2 characters)\\n       (rand-n-source 4 numbers)))\\n\\n(defn robot []\\n  (atom {:name \\"\\"}))\\n\\n(defn robot-name [robot]\\n  (if (empty? @robot)\\n    (reset! robot (generate-id))\\n    @robot))\\n\\n(defn reset-name [robot]\\n  (reset! robot \\"\\"))"}
189	20	b42a45f9ebee6af4e8a5a622	superseded	fsharp	robot-name	﻿namespace RobotName\r\n\r\ntype RobotName() = \r\n    let random = System.Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\r\n    let randomDigit () = (random.Next() % 10).ToString()\r\n\r\n    let buildName () =\r\n        (seq {0..1} \r\n         |> Seq.map (fun _ -> randomLetter())\r\n         |> String.concat "")\r\n        +\r\n        (seq {0..2}\r\n         |> Seq.map (fun _ -> randomDigit())\r\n         |> String.concat "")\r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	1	132	RobotName.fs	2015-04-27 11:29:28	2015-04-27 11:29:28	{"RobotName.fs":"﻿namespace RobotName\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = System.Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\\r\\n    let randomDigit () = (random.Next() % 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        (seq {0..1} \\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomLetter())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n        +\\r\\n        (seq {0..2}\\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomDigit())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
190	20	7d190a6b83144edd6321990b	done	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\nopen System.Collections.Generic\r\n\r\ntype RobotName() = \r\n    static let usedNames = new List<String>()\r\n\r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let rec buildName () =\r\n        let candidate = \r\n            String.Concat [ randomLetter(); randomLetter(); \r\n                            randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n        if usedNames.Contains(candidate) then \r\n            buildName() \r\n        else \r\n            usedNames.Add(candidate)\r\n            candidate   \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	3	132	RobotName.fs	2015-05-06 01:36:44	2015-05-06 01:36:44	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\nopen System.Collections.Generic\\r\\n\\r\\ntype RobotName() = \\r\\n    static let usedNames = new List\\u003cString\\u003e()\\r\\n\\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let rec buildName () =\\r\\n        let candidate = \\r\\n            String.Concat [ randomLetter(); randomLetter(); \\r\\n                            randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n        if usedNames.Contains(candidate) then \\r\\n            buildName() \\r\\n        else \\r\\n            usedNames.Add(candidate)\\r\\n            candidate   \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
191	20	aebd9faa10d1ce9ed33f128d	superseded	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\n\r\ntype RobotName() = \r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let buildName () =\r\n        String.Concat [ randomLetter(); randomLetter(); \r\n                        randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	2	132	RobotName.fs	2015-06-16 23:52:03	2015-06-16 23:52:03	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        String.Concat [ randomLetter(); randomLetter(); \\r\\n                        randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
192	20	d81eeded18c867e7dd357aaf	done	python	point-mutations	class DNA:\n\tdef __init__(self, strand):\n\t\tself.strand = strand \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.strand:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.strand[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	2	133	point-mutations.py	2015-04-17 10:54:20	2015-04-17 10:54:20	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, strand):\\n\\t\\tself.strand = strand \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.strand:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.strand[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
193	20	a0f84eebfdf418b285e7c809	superseded	python	point-mutations	class DNA:\n\tdef __init__(self, dna):\n\t\tself.dna = dna \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.dna:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.dna[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	1	133	point-mutations.py	2015-05-08 12:35:11	2015-05-08 12:35:11	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, dna):\\n\\t\\tself.dna = dna \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.dna:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.dna[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
194	20	1c3e110d4b47643182717df4	superseded	python	gigasecond	import datetime\n\ndef add_gigasecond(birth_date):\n    days = 10**9/((60*60)*24)\n    gsecs = birth_date + datetime.timedelta(days)\n    return gsecs	\N	\N	0	1	134	gigasecond.py	2015-05-05 20:41:24	2015-05-05 20:41:24	{"gigasecond.py":"import datetime\\n\\ndef add_gigasecond(birth_date):\\n    days = 10**9/((60*60)*24)\\n    gsecs = birth_date + datetime.timedelta(days)\\n    return gsecs"}
195	20	6eef066d67142aededb5dc1c	pending	python	gigasecond	import datetime\n\ndef add_gigasecond(birth_date):\n    return birth_date + datetime.timedelta(seconds = 10**9)	\N	\N	0	2	134	gigasecond.py	2015-07-30 16:01:42	2015-07-30 16:01:42	{"gigasecond.py":"import datetime\\n\\ndef add_gigasecond(birth_date):\\n    return birth_date + datetime.timedelta(seconds = 10**9)"}
196	21	adda2db3c1b9038aef61194c	pending	ruby	raindrops	class Raindrops\r\n\r\n  def self.convert(num)\r\n    result = ""\r\n    result << "Pling" if num%3 == 0\r\n    result << "Plang" if num%5 == 0\r\n    result << "Plong" if num%7 == 0\r\n    result = num.to_s if result.empty?\r\n    result\r\n  end\r\n\r\nend	\N	\N	0	1	135	raindrops.rb	2015-09-23 16:31:35	2015-09-23 16:31:35	{"raindrops.rb":"class Raindrops\\r\\n\\r\\n  def self.convert(num)\\r\\n    result = \\"\\"\\r\\n    result \\u003c\\u003c \\"Pling\\" if num%3 == 0\\r\\n    result \\u003c\\u003c \\"Plang\\" if num%5 == 0\\r\\n    result \\u003c\\u003c \\"Plong\\" if num%7 == 0\\r\\n    result = num.to_s if result.empty?\\r\\n    result\\r\\n  end\\r\\n\\r\\nend"}
197	21	7598f0c1615a127d563e6a67	done	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\nopen System.Collections.Generic\r\n\r\ntype RobotName() = \r\n    static let usedNames = new List<String>()\r\n\r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let rec buildName () =\r\n        let candidate = \r\n            String.Concat [ randomLetter(); randomLetter(); \r\n                            randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n        if usedNames.Contains(candidate) then \r\n            buildName() \r\n        else \r\n            usedNames.Add(candidate)\r\n            candidate   \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	3	136	RobotName.fs	2015-09-21 23:51:15	2015-09-21 23:51:15	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\nopen System.Collections.Generic\\r\\n\\r\\ntype RobotName() = \\r\\n    static let usedNames = new List\\u003cString\\u003e()\\r\\n\\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let rec buildName () =\\r\\n        let candidate = \\r\\n            String.Concat [ randomLetter(); randomLetter(); \\r\\n                            randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n        if usedNames.Contains(candidate) then \\r\\n            buildName() \\r\\n        else \\r\\n            usedNames.Add(candidate)\\r\\n            candidate   \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
198	21	88e44683eaa5477851e04de2	superseded	fsharp	robot-name	﻿namespace RobotName\r\n\r\ntype RobotName() = \r\n    let random = System.Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\r\n    let randomDigit () = (random.Next() % 10).ToString()\r\n\r\n    let buildName () =\r\n        (seq {0..1} \r\n         |> Seq.map (fun _ -> randomLetter())\r\n         |> String.concat "")\r\n        +\r\n        (seq {0..2}\r\n         |> Seq.map (fun _ -> randomDigit())\r\n         |> String.concat "")\r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	1	136	RobotName.fs	2015-09-22 08:31:27	2015-09-22 08:31:27	{"RobotName.fs":"﻿namespace RobotName\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = System.Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\\r\\n    let randomDigit () = (random.Next() % 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        (seq {0..1} \\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomLetter())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n        +\\r\\n        (seq {0..2}\\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomDigit())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
199	21	3aa51bb604ee4c9c54d89d60	superseded	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\n\r\ntype RobotName() = \r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let buildName () =\r\n        String.Concat [ randomLetter(); randomLetter(); \r\n                        randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	2	136	RobotName.fs	2015-09-23 02:08:22	2015-09-23 02:08:22	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        String.Concat [ randomLetter(); randomLetter(); \\r\\n                        randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
200	21	de97f4cf2c4f50de15b924a5	done	ruby	grains	class Grains\n  def square(count)\n    count.times.inject(0) {|_| _ = _.eql?(0) ? 1 : _ * 2 }\n  end\n\n  def total\n    square(65) - 1\n  end\nend	\N	\N	0	1	137	/ruby/grains/grains.rb	2015-09-21 15:08:02	2015-09-21 15:08:02	{"/ruby/grains/grains.rb":"class Grains\\n  def square(count)\\n    count.times.inject(0) {|_| _ = _.eql?(0) ? 1 : _ * 2 }\\n  end\\n\\n  def total\\n    square(65) - 1\\n  end\\nend"}
201	21	217ce58ccc773408ccc27b13	done	javascript	sieve	var Sieve = function(num) {\n  this.num = num;\n  this.primes = [];\n\n  var isPrime = function(n) {\n    var mid = Math.floor( n / 2 );\n\n    for ( var i = 2; i <= mid; i++ ) {\n      if ( n % i === 0 ) {\n        return false\n      }\n    }\n    return true;\n  }\n\n  for ( var i = 2; i <= this.num; i++ ) {\n    if ( isPrime(i) ) {\n      this.primes.push(i);\n    }\n  }\n};	\N	\N	0	1	138	sieve_test.js	2015-09-23 02:59:17	2015-09-23 02:59:17	{"sieve_test.js":"var Sieve = function(num) {\\n  this.num = num;\\n  this.primes = [];\\n\\n  var isPrime = function(n) {\\n    var mid = Math.floor( n / 2 );\\n\\n    for ( var i = 2; i \\u003c= mid; i++ ) {\\n      if ( n % i === 0 ) {\\n        return false\\n      }\\n    }\\n    return true;\\n  }\\n\\n  for ( var i = 2; i \\u003c= this.num; i++ ) {\\n    if ( isPrime(i) ) {\\n      this.primes.push(i);\\n    }\\n  }\\n};"}
202	21	0e20616fb261b0084120cab2	done	ruby	say	class Say\n\n  N_TO_WORDS = {\n    0 => { teen: "ten" },\n    1 => { normal: "one", teen: "ten", ty: "eleven" },\n    2 => { normal: "two", teen: "twleve", ty: "twenty" },\n    3 => { normal: "three", teen: "thirteen", ty: "thirty" },\n    4 => { normal: "four", teen: "fourteen", ty: "forty" },\n    5 => { normal: "five", teen: "fifteen", ty: "fifty" },\n    6 => { normal: "six", teen: "sixteen", ty: "sixty" },\n    7 => { normal: "seven", teen: "seventeen", ty: "seventy" },\n    8 => { normal: "eight", teen: "eighteen", ty: "eighty" },\n    9 => { normal: "nine", teen: "nineteen", ty: "ninety" }\n  }\n\n  MAGNITUDE_WORD = {\n    1_000_000_000_000 => :trillion,\n    1_000_000_000     => :billion,\n    1_000_000         => :million,\n    1_000             => :thousand\n  }\n\n  def initialize(n)\n    @n = n\n  end\n\n  def in_english\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\n    return "zero" if @n.zero?\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\n      q, r = result[:value].divmod(magnitude)\n      result[:words] << "#{meta_words(q)} #{name}" if q > 0\n      result.merge(value: r)\n    end\n    say[:words] << meta_words(say[:value]) unless say[:value].zero?\n    say[:words].join(" ")\n  end\n\n  private\n\n  def meta_words(n)\n    "#{hundred(n)} #{below_hundred(n.modulo(100))}".strip\n  end\n\n  def hundred(n)\n    q, r = n.divmod(100)\n    q.zero? ? nil : "#{N_TO_WORDS[q][:normal]} hundred"\n  end\n\n  def below_hundred(n)\n    q, r = n.divmod(10)\n    ty_word = N_TO_WORDS[q][:ty] if q > 1\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\n    [ty_word, teen_word].compact.join("-")\n  end\nend	\N	\N	0	1	139	/ruby/say/say.rb	2015-09-22 00:58:44	2015-09-22 00:58:44	{"/ruby/say/say.rb":"class Say\\n\\n  N_TO_WORDS = {\\n    0 =\\u003e { teen: \\"ten\\" },\\n    1 =\\u003e { normal: \\"one\\", teen: \\"ten\\", ty: \\"eleven\\" },\\n    2 =\\u003e { normal: \\"two\\", teen: \\"twleve\\", ty: \\"twenty\\" },\\n    3 =\\u003e { normal: \\"three\\", teen: \\"thirteen\\", ty: \\"thirty\\" },\\n    4 =\\u003e { normal: \\"four\\", teen: \\"fourteen\\", ty: \\"forty\\" },\\n    5 =\\u003e { normal: \\"five\\", teen: \\"fifteen\\", ty: \\"fifty\\" },\\n    6 =\\u003e { normal: \\"six\\", teen: \\"sixteen\\", ty: \\"sixty\\" },\\n    7 =\\u003e { normal: \\"seven\\", teen: \\"seventeen\\", ty: \\"seventy\\" },\\n    8 =\\u003e { normal: \\"eight\\", teen: \\"eighteen\\", ty: \\"eighty\\" },\\n    9 =\\u003e { normal: \\"nine\\", teen: \\"nineteen\\", ty: \\"ninety\\" }\\n  }\\n\\n  MAGNITUDE_WORD = {\\n    1_000_000_000_000 =\\u003e :trillion,\\n    1_000_000_000     =\\u003e :billion,\\n    1_000_000         =\\u003e :million,\\n    1_000             =\\u003e :thousand\\n  }\\n\\n  def initialize(n)\\n    @n = n\\n  end\\n\\n  def in_english\\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\\n    return \\"zero\\" if @n.zero?\\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\\n      q, r = result[:value].divmod(magnitude)\\n      result[:words] \\u003c\\u003c \\"#{meta_words(q)} #{name}\\" if q \\u003e 0\\n      result.merge(value: r)\\n    end\\n    say[:words] \\u003c\\u003c meta_words(say[:value]) unless say[:value].zero?\\n    say[:words].join(\\" \\")\\n  end\\n\\n  private\\n\\n  def meta_words(n)\\n    \\"#{hundred(n)} #{below_hundred(n.modulo(100))}\\".strip\\n  end\\n\\n  def hundred(n)\\n    q, r = n.divmod(100)\\n    q.zero? ? nil : \\"#{N_TO_WORDS[q][:normal]} hundred\\"\\n  end\\n\\n  def below_hundred(n)\\n    q, r = n.divmod(10)\\n    ty_word = N_TO_WORDS[q][:ty] if q \\u003e 1\\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\\n    [ty_word, teen_word].compact.join(\\"-\\")\\n  end\\nend"}
203	21	546c2b25d4022d63cbf5b861	pending	python	kindergarten-garden	# William Morris\r\n# exercism.io\r\n# garden.py\r\n\r\nclass Garden:\r\n\r\n    def __init__(self, rows, students =['Alice', 'Bob', 'Charlie', 'David', 'Eve',\r\n                                        'Fred', 'Ginny', 'Harriet', 'Ileana',\r\n                                        'Joseph', 'Kincaid', 'Larry'] ):\r\n        \r\n        self.names = students\r\n        self.names.sort()\r\n        self.seeds ={'G':'Grass','C':'Clover','R':'Radishes','V':'Violets'}\r\n        self.rows = rows.split()\r\n        name_index = 0\r\n        self.students_cups = {}\r\n        for cups in range(0,len(self.rows[0]),2):\r\n            cups_first_row = self.rows[0][cups:cups+2]\r\n            cups_second_row = self.rows[1][cups:cups+2]\r\n            self.students_cups[self.names[name_index]]=cups_first_row + cups_second_row\r\n            name_index += 1\r\n        self.students_plants = {}\r\n        for name in self.students_cups.keys():\r\n            self.students_plants[name] =  [self.seeds[seed] for seed in\r\n                                          self.students_cups[name]]\r\n            \r\n    def plants(self,name):\r\n        return self.students_plants[name]\r\n    \r	\N	\N	0	1	140	garden.py	2015-09-21 12:59:42	2015-09-21 12:59:42	{"garden.py":"# William Morris\\r\\n# exercism.io\\r\\n# garden.py\\r\\n\\r\\nclass Garden:\\r\\n\\r\\n    def __init__(self, rows, students =['Alice', 'Bob', 'Charlie', 'David', 'Eve',\\r\\n                                        'Fred', 'Ginny', 'Harriet', 'Ileana',\\r\\n                                        'Joseph', 'Kincaid', 'Larry'] ):\\r\\n        \\r\\n        self.names = students\\r\\n        self.names.sort()\\r\\n        self.seeds ={'G':'Grass','C':'Clover','R':'Radishes','V':'Violets'}\\r\\n        self.rows = rows.split()\\r\\n        name_index = 0\\r\\n        self.students_cups = {}\\r\\n        for cups in range(0,len(self.rows[0]),2):\\r\\n            cups_first_row = self.rows[0][cups:cups+2]\\r\\n            cups_second_row = self.rows[1][cups:cups+2]\\r\\n            self.students_cups[self.names[name_index]]=cups_first_row + cups_second_row\\r\\n            name_index += 1\\r\\n        self.students_plants = {}\\r\\n        for name in self.students_cups.keys():\\r\\n            self.students_plants[name] =  [self.seeds[seed] for seed in\\r\\n                                          self.students_cups[name]]\\r\\n            \\r\\n    def plants(self,name):\\r\\n        return self.students_plants[name]\\r\\n    \\r"}
204	21	3c7f1b24e0df7062e8126d9d	pending	clojure	raindrops	(ns raindrops)\n\n(defn- get-string [n]\n  (apply str [(if (= 0 (mod n 3)) "Pling")\n              (if (= 0 (mod n 5)) "Plang")\n              (if (= 0 (mod n 7)) "Plong")]))\n\n(defn convert [n]\n  (let [s (get-string n)]\n    (if (= "" s)\n      (str n)\n      s)))	\N	\N	0	1	141	raindrops.clj	2015-09-22 00:42:26	2015-09-22 00:42:26	{"raindrops.clj":"(ns raindrops)\\n\\n(defn- get-string [n]\\n  (apply str [(if (= 0 (mod n 3)) \\"Pling\\")\\n              (if (= 0 (mod n 5)) \\"Plang\\")\\n              (if (= 0 (mod n 7)) \\"Plong\\")]))\\n\\n(defn convert [n]\\n  (let [s (get-string n)]\\n    (if (= \\"\\" s)\\n      (str n)\\n      s)))"}
205	21	726403eae52c305bae1dfb4d	pending	haskell	leap	module LeapYear (isLeapYear, isLeapYear2) where\n\nisLeapYear :: Int -> Bool\nisLeapYear year\n    | year `mod` 100 == 0 && year `mod` 400 /= 0  = False\n    | year `mod` 4 == 0  =  True\n    | otherwise = False\n\nisLeapYear2 :: Int -> Bool\nisLeapYear2 year\n    | year `mod` 4 /= 0  = False\n    | year `mod` 100 == 0 && year `mod` 400 /= 0 = False\n    | otherwise = True	\N	\N	0	1	142	haskell/leap/leapyear.hs	2015-09-23 11:23:10	2015-09-23 11:23:10	{"haskell/leap/leapyear.hs":"module LeapYear (isLeapYear, isLeapYear2) where\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear year\\n    | year `mod` 100 == 0 \\u0026\\u0026 year `mod` 400 /= 0  = False\\n    | year `mod` 4 == 0  =  True\\n    | otherwise = False\\n\\nisLeapYear2 :: Int -\\u003e Bool\\nisLeapYear2 year\\n    | year `mod` 4 /= 0  = False\\n    | year `mod` 100 == 0 \\u0026\\u0026 year `mod` 400 /= 0 = False\\n    | otherwise = True"}
206	21	5f54ac4687240a1f5192fdce	done	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(candidates)\n    candidates.find_all { |candidate| anagram?(candidate) }\n  end\n\n  def anagram?(candidate)\n    candidate = Anagram.new(candidate.to_s)\n    same_characters?(candidate) && different_word?(candidate)\n  end\n\n  def characters\n    @characters ||= word.chars.sort.join\n  end\n\n  private\n\n  def different_word?(other)\n    word != other.word\n  end\n\n  def same_characters?(other)\n    characters == other.characters\n  end\nend	\N	\N	0	1	143	anagram.rb	2015-09-23 00:45:51	2015-09-23 00:45:51	{"anagram.rb":"class Anagram\\n  attr_reader :word\\n\\n  def initialize(word)\\n    @word = word.downcase\\n  end\\n\\n  def match(candidates)\\n    candidates.find_all { |candidate| anagram?(candidate) }\\n  end\\n\\n  def anagram?(candidate)\\n    candidate = Anagram.new(candidate.to_s)\\n    same_characters?(candidate) \\u0026\\u0026 different_word?(candidate)\\n  end\\n\\n  def characters\\n    @characters ||= word.chars.sort.join\\n  end\\n\\n  private\\n\\n  def different_word?(other)\\n    word != other.word\\n  end\\n\\n  def same_characters?(other)\\n    characters == other.characters\\n  end\\nend"}
207	21	6c47bd70b4eeca5716c78e2c	pending	python	bob	# #\n# # Skeleton file for the Python "Bob" exercise.\n# #\ndef hey(what):\n    what = what.strip()\n    if not what:\n\treturn "Fine. Be that way!"\n    elif what.isupper():\n\treturn "Whoa, chill out!"\n    elif what.endswith('?'):\n\treturn "Sure."\n    else:\n\treturn "Whatever."	\N	\N	0	1	144	bob.py	2015-09-21 23:05:06	2015-09-21 23:05:06	{"bob.py":"# #\\n# # Skeleton file for the Python \\"Bob\\" exercise.\\n# #\\ndef hey(what):\\n    what = what.strip()\\n    if not what:\\n\\treturn \\"Fine. Be that way!\\"\\n    elif what.isupper():\\n\\treturn \\"Whoa, chill out!\\"\\n    elif what.endswith('?'):\\n\\treturn \\"Sure.\\"\\n    else:\\n\\treturn \\"Whatever.\\""}
208	21	2a32bf4c8c2b92e8e80fdd6f	done	elixir	sublist	defmodule Sublist do\n  @doc """\n  Returns whether the first list is a sublist or a superlist of the second list\n  and if not whether it is equal or unequal to the second list.\n  """\n  def compare(a, b) do\n    result = {:equal, :unequal, :sublist, :superlist}\n    _compare(a, b)\n  end\n\n  defp _compare(a, a) do\n    :equal\n  end\n\n  defp _compare(a, b) do\n    cond do\n      sublist_of?(a, b) ->\n        :sublist\n      sublist_of?(b, a) ->\n        :superlist\n      true              ->\n        :unequal\n    end\n  end\n\n  defp sublist_of?([], _), do: true\n  defp sublist_of?(_, []), do: false\n  defp sublist_of?(a, b) when length(a) > length(b), do: false\n  defp sublist_of?(a, b) do\n    if Enum.take(b, length(a)) === a do\n      true\n    else\n      [_ | t] = b\n      sublist_of?(a, t)\n    end\n  end \n\n  defp compact(list) do\n    Enum.reject(list, &is_nil/1)\n  end\nend	\N	\N	0	1	145	/elixir/sublist/sublist.exs	2015-09-21 15:15:32	2015-09-21 15:15:32	{"/elixir/sublist/sublist.exs":"defmodule Sublist do\\n  @doc \\"\\"\\"\\n  Returns whether the first list is a sublist or a superlist of the second list\\n  and if not whether it is equal or unequal to the second list.\\n  \\"\\"\\"\\n  def compare(a, b) do\\n    result = {:equal, :unequal, :sublist, :superlist}\\n    _compare(a, b)\\n  end\\n\\n  defp _compare(a, a) do\\n    :equal\\n  end\\n\\n  defp _compare(a, b) do\\n    cond do\\n      sublist_of?(a, b) -\\u003e\\n        :sublist\\n      sublist_of?(b, a) -\\u003e\\n        :superlist\\n      true              -\\u003e\\n        :unequal\\n    end\\n  end\\n\\n  defp sublist_of?([], _), do: true\\n  defp sublist_of?(_, []), do: false\\n  defp sublist_of?(a, b) when length(a) \\u003e length(b), do: false\\n  defp sublist_of?(a, b) do\\n    if Enum.take(b, length(a)) === a do\\n      true\\n    else\\n      [_ | t] = b\\n      sublist_of?(a, t)\\n    end\\n  end \\n\\n  defp compact(list) do\\n    Enum.reject(list, \\u0026is_nil/1)\\n  end\\nend"}
209	21	fcfc347807f5ed731ea185a3	done	haskell	robot-name	module Robot (Robot, robotName, mkRobot, resetName) where\n\n\nimport Control.Concurrent (MVar, readMVar, swapMVar, newMVar)\nimport Control.Monad (void)\nimport System.Random (randomRIO)\n\ndata Robot = Robot {\n  getName :: MVar String\n}\n\nmkRobot :: IO Robot\nmkRobot = generateName >>= newMVar >>= return . Robot\n\nrobotName :: Robot -> IO String\nrobotName r = readMVar $ getName r\n\nresetName :: Robot -> IO()\nresetName r = void(generateName >>= swapMVar (getName r))\n\ngenerateName :: IO String\ngenerateName = mapM randomRIO name\n  where name = [char, char, int, int, int]\n        char = ('A', 'Z')\n        int  = ('0', '9')	\N	\N	0	1	146	Robot.hs	2015-09-21 19:19:34	2015-09-21 19:19:34	{"Robot.hs":"module Robot (Robot, robotName, mkRobot, resetName) where\\n\\n\\nimport Control.Concurrent (MVar, readMVar, swapMVar, newMVar)\\nimport Control.Monad (void)\\nimport System.Random (randomRIO)\\n\\ndata Robot = Robot {\\n  getName :: MVar String\\n}\\n\\nmkRobot :: IO Robot\\nmkRobot = generateName \\u003e\\u003e= newMVar \\u003e\\u003e= return . Robot\\n\\nrobotName :: Robot -\\u003e IO String\\nrobotName r = readMVar $ getName r\\n\\nresetName :: Robot -\\u003e IO()\\nresetName r = void(generateName \\u003e\\u003e= swapMVar (getName r))\\n\\ngenerateName :: IO String\\ngenerateName = mapM randomRIO name\\n  where name = [char, char, int, int, int]\\n        char = ('A', 'Z')\\n        int  = ('0', '9')"}
210	21	f3f53a80be2e2ae3fde957f6	done	python	luhn	class Luhn(object):\n\n  def __init__(self, code):\n    self.original_code = [ int(item) for item in reversed(list(str(code))) ]\n    self.code = [ self.original_code[i] * 2 if i % 2 != 0 and self.original_code[i] < 5 else self.original_code[i] * 2 - 9 if i % 2 != 0 else self.original_code[i] for i in range (len(self.original_code)) ][::-1]\n    self.check = sum(self.code) % 10\n\n  def addends(self):\n    return self.code\n\n  def checksum(self):\n    return self.check\n\n  def is_valid(self):\n    return self.check == 0\n\n  @staticmethod\n  def create(num):\n    return num * 10 + ((10 - Luhn(num * 10).checksum()) % 10)	\N	\N	0	1	147	luhn.py	2015-09-23 09:16:59	2015-09-23 09:16:59	{"luhn.py":"class Luhn(object):\\n\\n  def __init__(self, code):\\n    self.original_code = [ int(item) for item in reversed(list(str(code))) ]\\n    self.code = [ self.original_code[i] * 2 if i % 2 != 0 and self.original_code[i] \\u003c 5 else self.original_code[i] * 2 - 9 if i % 2 != 0 else self.original_code[i] for i in range (len(self.original_code)) ][::-1]\\n    self.check = sum(self.code) % 10\\n\\n  def addends(self):\\n    return self.code\\n\\n  def checksum(self):\\n    return self.check\\n\\n  def is_valid(self):\\n    return self.check == 0\\n\\n  @staticmethod\\n  def create(num):\\n    return num * 10 + ((10 - Luhn(num * 10).checksum()) % 10)"}
211	21	5ea61df8e660620a87c9ec0b	pending	ruby	twelve-days	class TwelveDaysSong\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\n\n  VERSES = [\n    ["twelve Drummers Drumming, ", 12],\n    ["eleven Pipers Piping, ", 11],\n    ["ten Lords-a-Leaping, ", 10],\n    ["nine Ladies Dancing, ", 9],    \n    ["eight Maids-a-Milking, ", 8],      \n    ["seven Swans-a-Swimming, ", 7],\n    ["six Geese-a-Laying, ", 6],\n    ["five Gold Rings, ", 5],\n    ["four Calling Birds, ", 4], \n    ["three French Hens, ", 3],\n    ["two Turtle Doves, and ", 2],\n  ]\n\n  def verse(num)\n    s = "On the #{DAYS[num-1]} day of Christmas my true love gave to me, "\n    VERSES.each do |phrase, verse_num|\n      s << phrase if num >= verse_num\n    end\n    s << "a Partridge in a Pear Tree.\\n"\n    s\n  end\n\n  def verses(start, stop)\n    (start..stop).map { |num| verse(num) }.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses(1, 12)\n  end\nend	\N	\N	0	1	148	twelve_days.rb	2015-09-22 11:02:38	2015-09-22 11:02:38	{"twelve_days.rb":"class TwelveDaysSong\\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\\n\\n  VERSES = [\\n    [\\"twelve Drummers Drumming, \\", 12],\\n    [\\"eleven Pipers Piping, \\", 11],\\n    [\\"ten Lords-a-Leaping, \\", 10],\\n    [\\"nine Ladies Dancing, \\", 9],    \\n    [\\"eight Maids-a-Milking, \\", 8],      \\n    [\\"seven Swans-a-Swimming, \\", 7],\\n    [\\"six Geese-a-Laying, \\", 6],\\n    [\\"five Gold Rings, \\", 5],\\n    [\\"four Calling Birds, \\", 4], \\n    [\\"three French Hens, \\", 3],\\n    [\\"two Turtle Doves, and \\", 2],\\n  ]\\n\\n  def verse(num)\\n    s = \\"On the #{DAYS[num-1]} day of Christmas my true love gave to me, \\"\\n    VERSES.each do |phrase, verse_num|\\n      s \\u003c\\u003c phrase if num \\u003e= verse_num\\n    end\\n    s \\u003c\\u003c \\"a Partridge in a Pear Tree.\\\\n\\"\\n    s\\n  end\\n\\n  def verses(start, stop)\\n    (start..stop).map { |num| verse(num) }.join(\\"\\\\n\\") + \\"\\\\n\\"\\n  end\\n\\n  def sing\\n    verses(1, 12)\\n  end\\nend"}
212	21	f44487e40c99422151d1d6ef	pending	csharp	raindrops	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\n\r\n    class Raindrops\r\n    {\r\n\r\n        \r\n        public Raindrops() { }\r\n\r\n        public static string Convert(int rainValue)\r\n        {\r\n            var primeList = primeFactorsGetter(rainValue);\r\n            if(PlingPlangPlongString(primeList).Length > 0) return PlingPlangPlongString(primeList);\r\n            return rainValue.ToString();\r\n            \r\n        }\r\n\r\n        public static List<string> primeFactorsGetter(long value)\r\n        {\r\n            var resultsList = new List<string>();\r\n            for (int i = 2; i <= value; i++)\r\n            {\r\n                while (value % i == 0)\r\n                {\r\n                    resultsList.Add(i.ToString());\r\n                    value /= i;\r\n                }\r\n            }            \r\n            return resultsList;\r\n        }\r\n\r\n        public static string PlingPlangPlongString(List<string> listOfPrimeFactors)\r\n        {\r\n            var resultString = new StringBuilder();\r\n\r\n            if (listOfPrimeFactors.Contains("3")) resultString.Append("Pling");\r\n            if (listOfPrimeFactors.Contains("5")) resultString.Append("Plang");\r\n            if (listOfPrimeFactors.Contains("7")) resultString.Append("Plong");           \r\n\r\n            return resultString.ToString();\r\n        }\r\n    }	\N	\N	0	1	149	\\csharp\\raindrops\\Raindrops.cs	2015-09-21 23:40:00	2015-09-21 23:40:00	{"\\\\csharp\\\\raindrops\\\\Raindrops.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nusing System.Text;\\r\\n\\r\\n\\r\\n    class Raindrops\\r\\n    {\\r\\n\\r\\n        \\r\\n        public Raindrops() { }\\r\\n\\r\\n        public static string Convert(int rainValue)\\r\\n        {\\r\\n            var primeList = primeFactorsGetter(rainValue);\\r\\n            if(PlingPlangPlongString(primeList).Length \\u003e 0) return PlingPlangPlongString(primeList);\\r\\n            return rainValue.ToString();\\r\\n            \\r\\n        }\\r\\n\\r\\n        public static List\\u003cstring\\u003e primeFactorsGetter(long value)\\r\\n        {\\r\\n            var resultsList = new List\\u003cstring\\u003e();\\r\\n            for (int i = 2; i \\u003c= value; i++)\\r\\n            {\\r\\n                while (value % i == 0)\\r\\n                {\\r\\n                    resultsList.Add(i.ToString());\\r\\n                    value /= i;\\r\\n                }\\r\\n            }            \\r\\n            return resultsList;\\r\\n        }\\r\\n\\r\\n        public static string PlingPlangPlongString(List\\u003cstring\\u003e listOfPrimeFactors)\\r\\n        {\\r\\n            var resultString = new StringBuilder();\\r\\n\\r\\n            if (listOfPrimeFactors.Contains(\\"3\\")) resultString.Append(\\"Pling\\");\\r\\n            if (listOfPrimeFactors.Contains(\\"5\\")) resultString.Append(\\"Plang\\");\\r\\n            if (listOfPrimeFactors.Contains(\\"7\\")) resultString.Append(\\"Plong\\");           \\r\\n\\r\\n            return resultString.ToString();\\r\\n        }\\r\\n    }"}
213	21	6eff1ccd58235b268b657818	pending	go	grains	package grains\n\nimport (\n\t"errors"\n)\n\nfunc Square(n int) (uint64, error) {\n\tif n < 1 || n > 64 {\n\t\treturn 0, errors.New("out of range")\n\t}\n\treturn 1 << (uint(n) - 1), nil\n}\n\nfunc Total() uint64 {\n\tconst n uint = 64 // I'd have expected this as an input\n\treturn 1<<n - 1\n}	\N	\N	0	1	150	grains.go	2015-09-21 21:18:11	2015-09-21 21:18:11	{"grains.go":"package grains\\n\\nimport (\\n\\t\\"errors\\"\\n)\\n\\nfunc Square(n int) (uint64, error) {\\n\\tif n \\u003c 1 || n \\u003e 64 {\\n\\t\\treturn 0, errors.New(\\"out of range\\")\\n\\t}\\n\\treturn 1 \\u003c\\u003c (uint(n) - 1), nil\\n}\\n\\nfunc Total() uint64 {\\n\\tconst n uint = 64 // I'd have expected this as an input\\n\\treturn 1\\u003c\\u003cn - 1\\n}"}
214	21	40eae9eb856b48f95a6aaaf8	pending	lua	hamming	local Hamming = {}\n\nfunction Hamming.compute(str1, str2)\n  local distance = 0\n\n  for i = 1, math.min(#str1, #str2) do\n    if str1:sub(i,i) ~= str2:sub(i,i) then\n      distance = distance + 1\n    end\n  end\n\n  return distance\nend\n\nreturn Hamming	\N	\N	0	1	151	hamming.lua	2015-09-22 01:09:24	2015-09-22 01:09:24	{"hamming.lua":"local Hamming = {}\\n\\nfunction Hamming.compute(str1, str2)\\n  local distance = 0\\n\\n  for i = 1, math.min(#str1, #str2) do\\n    if str1:sub(i,i) ~= str2:sub(i,i) then\\n      distance = distance + 1\\n    end\\n  end\\n\\n  return distance\\nend\\n\\nreturn Hamming"}
268	14	ef2a74758e0203f0a7df1702	pending	python	bob	class Bob:\n    def hey(self, s):\n        if not s or s.isspace():\n            return 'Fine. Be that way!'\n        elif s.isupper():\n            return 'Woah, chill out!'\n        elif s[-1] == '?':\n            return 'Sure.'\n        else:\n            return 'Whatever.'	\N	\N	0	1	189	bob.py	2015-09-13 10:19:25	2015-09-13 10:19:25	{"bob.py":"class Bob:\\n    def hey(self, s):\\n        if not s or s.isspace():\\n            return 'Fine. Be that way!'\\n        elif s.isupper():\\n            return 'Woah, chill out!'\\n        elif s[-1] == '?':\\n            return 'Sure.'\\n        else:\\n            return 'Whatever.'"}
215	21	8b0c63ff349d5c81b6fdb770	pending	ruby	hamming	class Hamming \n\n      def Hamming.compute strandA, strandB \n        hamming_distance = 0\n        end_point = strandA.length\n        length_difference = strandA.length - strandB.length\n\n        if length_difference > 0\n            end_point = strandB.length\n        end\n\n        end_point -= 1;\n\n        for i in ( 0..end_point )\n               if strandA[i] != strandB[i]\n                    hamming_distance += 1\n               end\n        end\n\n        return hamming_distance\n\n    end\n\nend	\N	\N	0	1	152	hamming.rb	2015-09-21 16:50:37	2015-09-21 16:50:37	{"hamming.rb":"class Hamming \\n\\n      def Hamming.compute strandA, strandB \\n        hamming_distance = 0\\n        end_point = strandA.length\\n        length_difference = strandA.length - strandB.length\\n\\n        if length_difference \\u003e 0\\n            end_point = strandB.length\\n        end\\n\\n        end_point -= 1;\\n\\n        for i in ( 0..end_point )\\n               if strandA[i] != strandB[i]\\n                    hamming_distance += 1\\n               end\\n        end\\n\\n        return hamming_distance\\n\\n    end\\n\\nend"}
216	21	b4ef5b50f5f1315fa2b55b2f	pending	python	hamming	def distance(a, b):\n    if len(a) != len(b):\n        raise Exception('Argument lengths differ.')\n\n    count = 0\n    for x in zip(a, b):\n        if x[0] != x[1]:\n            count += 1\n    return count	\N	\N	0	2	154	hamming.py	2015-09-22 18:49:50	2015-09-22 18:49:50	{"hamming.py":"def distance(a, b):\\n    if len(a) != len(b):\\n        raise Exception('Argument lengths differ.')\\n\\n    count = 0\\n    for x in zip(a, b):\\n        if x[0] != x[1]:\\n            count += 1\\n    return count"}
217	21	42b3411682e1799a55f63d77	superseded	python	hamming	def distance(a, b):\n    if len(a) != len(b):\n        return\n\n    count = 0\n    for x in zip(a, b):\n        if x[0] != x[1]:\n            count += 1\n    return count	\N	\N	0	1	154	hamming.py	2015-09-22 22:07:12	2015-09-22 22:07:12	{"hamming.py":"def distance(a, b):\\n    if len(a) != len(b):\\n        return\\n\\n    count = 0\\n    for x in zip(a, b):\\n        if x[0] != x[1]:\\n            count += 1\\n    return count"}
218	21	0a3adf83597512c04971de62	done	ruby	secret-handshake	class SecretHandshake\n\n  HANDSHAKES = { \n                  1     => "wink",\n                  10    => "double blink",\n                  100   => "close your eyes",\n                  1000  => "jump"\n  }\n\n  attr_reader :decimal_number\n\n  def initialize decimal_number\n    @decimal_number = decimal_number\n  end\n\n  def commands\n    if decimal_number.is_a? Integer\n      secret_handshakes\n    else\n      []\n    end\n  end\n\nprivate\n\n  def binary_number\n    decimal_number.to_s 2\n  end\n\n  def translator\n    result = Array.new\n\n    binary_number.chars.reverse.each_with_index do |digit, index|\n      result << HANDSHAKES[ digit.ljust( index + 1, '0' ).to_i ]\n    end\n\n    result.compact\n  end\n\n  def secret_handshakes\n    if binary_number.length == 5\n      translator.reverse\n    else\n      translator\n    end\n  end\n\nend	\N	\N	0	1	155	/ruby/secret-handshake/secret_handshake.rb	2015-09-22 11:42:09	2015-09-22 11:42:09	{"/ruby/secret-handshake/secret_handshake.rb":"class SecretHandshake\\n\\n  HANDSHAKES = { \\n                  1     =\\u003e \\"wink\\",\\n                  10    =\\u003e \\"double blink\\",\\n                  100   =\\u003e \\"close your eyes\\",\\n                  1000  =\\u003e \\"jump\\"\\n  }\\n\\n  attr_reader :decimal_number\\n\\n  def initialize decimal_number\\n    @decimal_number = decimal_number\\n  end\\n\\n  def commands\\n    if decimal_number.is_a? Integer\\n      secret_handshakes\\n    else\\n      []\\n    end\\n  end\\n\\nprivate\\n\\n  def binary_number\\n    decimal_number.to_s 2\\n  end\\n\\n  def translator\\n    result = Array.new\\n\\n    binary_number.chars.reverse.each_with_index do |digit, index|\\n      result \\u003c\\u003c HANDSHAKES[ digit.ljust( index + 1, '0' ).to_i ]\\n    end\\n\\n    result.compact\\n  end\\n\\n  def secret_handshakes\\n    if binary_number.length == 5\\n      translator.reverse\\n    else\\n      translator\\n    end\\n  end\\n\\nend"}
219	21	2e3309b9ebfb3b58cdee1a03	pending	go	leap	package leap\n\n\n//Returns true if the year is a leap year and false otherwise. \n//Takes the year as an int.\nfunc IsLeapYear(year int) bool {\n\t// Is leap if evenly divisible by 4 and not by 100\n\tif year%4 == 0 && year%100 != 0 {\n\t\treturn true\n\t// Also leap if divisible by 400\n\t} else if year%400 == 0 {\n\t\treturn true\n\t}\n\t// All others are not leap\n\treturn false\n}	\N	\N	0	2	156	leap.go	2015-09-21 12:57:06	2015-09-21 12:57:06	{"leap.go":"package leap\\n\\n\\n//Returns true if the year is a leap year and false otherwise. \\n//Takes the year as an int.\\nfunc IsLeapYear(year int) bool {\\n\\t// Is leap if evenly divisible by 4 and not by 100\\n\\tif year%4 == 0 \\u0026\\u0026 year%100 != 0 {\\n\\t\\treturn true\\n\\t// Also leap if divisible by 400\\n\\t} else if year%400 == 0 {\\n\\t\\treturn true\\n\\t}\\n\\t// All others are not leap\\n\\treturn false\\n}"}
220	21	8b929421ff5efca9ef40ef5e	superseded	go	leap	package leap\n\n/*\n * Determine if year is leap year or not\n * @param year: The year expressed as int \n * @return: true if leap year, otherwise false\n*/\nfunc IsLeapYear(year int) bool {\n    // Is leap if evenly divisible by 4 and not by 100  \n    if (year % 4 == 0 && year % 100 != 0) {\n        return true\n    // Also leap if divisible by 400\n    } else if (year % 400 == 0) {\n        return true\n    // All others are not leap\n    } else {\n        return false\n    }\n}	\N	\N	0	1	156	leap.go	2015-09-21 17:42:06	2015-09-21 17:42:06	{"leap.go":"package leap\\n\\n/*\\n * Determine if year is leap year or not\\n * @param year: The year expressed as int \\n * @return: true if leap year, otherwise false\\n*/\\nfunc IsLeapYear(year int) bool {\\n    // Is leap if evenly divisible by 4 and not by 100  \\n    if (year % 4 == 0 \\u0026\\u0026 year % 100 != 0) {\\n        return true\\n    // Also leap if divisible by 400\\n    } else if (year % 400 == 0) {\\n        return true\\n    // All others are not leap\\n    } else {\\n        return false\\n    }\\n}"}
221	21	e07636ca0017a8bf3b922895	superseded	haskell	simple-linked-list	module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\r\n\r\ndata List a = EmptyList | ListElement a (List a) \r\n\r\nnil :: List a\r\nnil = EmptyList\r\n\r\nisNil :: List a -> Bool\r\nisNil EmptyList = True\r\nisNil _         = False\r\n\r\nnew :: a -> List a -> List a\r\nnew x xs = ListElement x (xs)\r\n\r\ndatum :: List a -> a\r\ndatum (ListElement x _) = x\r\n\r\nnext :: List a -> List a\r\nnext EmptyList = EmptyList\r\nnext (ListElement _ xs) = xs\r\n\r\nfromList :: [a] -> List a\r\nfromList []     = EmptyList\r\nfromList (x:xs) = new x $ fromList xs\r\n\r\ntoList :: List a -> [a]\r\ntoList EmptyList = []\r\ntoList (ListElement x xs) = x : toList xs\r\n\r\n(+++) :: List a -> a -> List a\r\n(+++) EmptyList y = new y EmptyList\r\n(+++) (ListElement x xs) y = new x $ xs +++ y\r\n\r\nreverseLinkedList :: List a -> List a\r\nreverseLinkedList EmptyList = EmptyList\r\nreverseLinkedList (ListElement x xs) = reverseLinkedList xs +++ x	\N	\N	0	1	157	LinkedList.hs	2015-09-22 06:30:17	2015-09-22 06:30:17	{"LinkedList.hs":"module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\\r\\n\\r\\ndata List a = EmptyList | ListElement a (List a) \\r\\n\\r\\nnil :: List a\\r\\nnil = EmptyList\\r\\n\\r\\nisNil :: List a -\\u003e Bool\\r\\nisNil EmptyList = True\\r\\nisNil _         = False\\r\\n\\r\\nnew :: a -\\u003e List a -\\u003e List a\\r\\nnew x xs = ListElement x (xs)\\r\\n\\r\\ndatum :: List a -\\u003e a\\r\\ndatum (ListElement x _) = x\\r\\n\\r\\nnext :: List a -\\u003e List a\\r\\nnext EmptyList = EmptyList\\r\\nnext (ListElement _ xs) = xs\\r\\n\\r\\nfromList :: [a] -\\u003e List a\\r\\nfromList []     = EmptyList\\r\\nfromList (x:xs) = new x $ fromList xs\\r\\n\\r\\ntoList :: List a -\\u003e [a]\\r\\ntoList EmptyList = []\\r\\ntoList (ListElement x xs) = x : toList xs\\r\\n\\r\\n(+++) :: List a -\\u003e a -\\u003e List a\\r\\n(+++) EmptyList y = new y EmptyList\\r\\n(+++) (ListElement x xs) y = new x $ xs +++ y\\r\\n\\r\\nreverseLinkedList :: List a -\\u003e List a\\r\\nreverseLinkedList EmptyList = EmptyList\\r\\nreverseLinkedList (ListElement x xs) = reverseLinkedList xs +++ x"}
222	21	99eaf38fb0737ab702f62039	pending	haskell	simple-linked-list	module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\r\n\r\ndata List a = EmptyList | ListElement a (List a) \r\n\tderiving (Show)\r\n\r\nnil :: List a\r\nnil = EmptyList\r\n\r\nisNil :: List a -> Bool\r\nisNil EmptyList = True\r\nisNil _         = False\r\n\r\nnew :: a -> List a -> List a\r\nnew = ListElement\r\n\r\ndatum :: List a -> a\r\ndatum EmptyList = undefined\r\ndatum (ListElement x _) = x\r\n\r\nnext :: List a -> List a\r\nnext EmptyList = undefined\r\nnext (ListElement _ xs) = xs\r\n\r\nfromList :: [a] -> List a\r\nfromList = foldr new EmptyList\r\n\r\nfoldrList :: (a -> b -> b) -> b -> List a -> b\r\nfoldrList _ z EmptyList = z\r\nfoldrList f z (ListElement x xs) = x `f` foldrList f z xs\r\n\r\nfoldlList :: (b -> a -> b) -> b -> List a -> b\r\nfoldlList _ z EmptyList = z\r\nfoldlList f z (ListElement x xs) = let z' = z `f` x\r\n                                in seq z' $ foldlList f z' xs  \r\n\r\ntoList :: List a -> [a]\r\ntoList = foldrList (:) []\r\n\r\nreverseLinkedList :: List a -> List a\r\nreverseLinkedList = foldlList (flip new) EmptyList	\N	\N	0	2	157	LinkedList.hs	2015-09-23 02:18:32	2015-09-23 02:18:32	{"LinkedList.hs":"module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\\r\\n\\r\\ndata List a = EmptyList | ListElement a (List a) \\r\\n\\tderiving (Show)\\r\\n\\r\\nnil :: List a\\r\\nnil = EmptyList\\r\\n\\r\\nisNil :: List a -\\u003e Bool\\r\\nisNil EmptyList = True\\r\\nisNil _         = False\\r\\n\\r\\nnew :: a -\\u003e List a -\\u003e List a\\r\\nnew = ListElement\\r\\n\\r\\ndatum :: List a -\\u003e a\\r\\ndatum EmptyList = undefined\\r\\ndatum (ListElement x _) = x\\r\\n\\r\\nnext :: List a -\\u003e List a\\r\\nnext EmptyList = undefined\\r\\nnext (ListElement _ xs) = xs\\r\\n\\r\\nfromList :: [a] -\\u003e List a\\r\\nfromList = foldr new EmptyList\\r\\n\\r\\nfoldrList :: (a -\\u003e b -\\u003e b) -\\u003e b -\\u003e List a -\\u003e b\\r\\nfoldrList _ z EmptyList = z\\r\\nfoldrList f z (ListElement x xs) = x `f` foldrList f z xs\\r\\n\\r\\nfoldlList :: (b -\\u003e a -\\u003e b) -\\u003e b -\\u003e List a -\\u003e b\\r\\nfoldlList _ z EmptyList = z\\r\\nfoldlList f z (ListElement x xs) = let z' = z `f` x\\r\\n                                in seq z' $ foldlList f z' xs  \\r\\n\\r\\ntoList :: List a -\\u003e [a]\\r\\ntoList = foldrList (:) []\\r\\n\\r\\nreverseLinkedList :: List a -\\u003e List a\\r\\nreverseLinkedList = foldlList (flip new) EmptyList"}
223	21	c02f8442403028bc3c8164c0	pending	ruby	roman-numerals	class Fixnum\n  def to_roman\n    array = self.to_s.split(//)\n    num_array = []\n    array.each do |x|\n      num_array.push(x.to_i)\n    end\n    roman_numeral=[]\n    ones = num_array.pop\n    if ones == 9\n      roman_numeral.unshift('IX')\n    elsif ones == 4\n      roman_numeral.unshift('IV')\n    else\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\n    end\n\n    if num_array.empty? == false\n      tens = num_array.pop\n      if tens == 9\n        roman_numeral.unshift('XC')\n      elsif tens == 4\n        roman_numeral.unshift('XL')\n      else\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\n      end\n    end\n\n    if num_array.empty? == false\n      hundreds = num_array.pop\n      if hundreds == 9\n        roman_numeral.unshift('CM')\n      elsif hundreds == 4\n        roman_numeral.unshift('CD')\n      else\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\n      end\n    end\n\n    if num_array.empty? == false\n      thousands = num_array.pop\n      roman_numeral.unshift('M'*thousands)\n    end\n\n    roman_numeral.join\n  end\nend	\N	\N	0	1	158	/ruby/roman-numerals/roman.rb	2015-09-21 12:23:20	2015-09-21 12:23:20	{"/ruby/roman-numerals/roman.rb":"class Fixnum\\n  def to_roman\\n    array = self.to_s.split(//)\\n    num_array = []\\n    array.each do |x|\\n      num_array.push(x.to_i)\\n    end\\n    roman_numeral=[]\\n    ones = num_array.pop\\n    if ones == 9\\n      roman_numeral.unshift('IX')\\n    elsif ones == 4\\n      roman_numeral.unshift('IV')\\n    else\\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\\n    end\\n\\n    if num_array.empty? == false\\n      tens = num_array.pop\\n      if tens == 9\\n        roman_numeral.unshift('XC')\\n      elsif tens == 4\\n        roman_numeral.unshift('XL')\\n      else\\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      hundreds = num_array.pop\\n      if hundreds == 9\\n        roman_numeral.unshift('CM')\\n      elsif hundreds == 4\\n        roman_numeral.unshift('CD')\\n      else\\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      thousands = num_array.pop\\n      roman_numeral.unshift('M'*thousands)\\n    end\\n\\n    roman_numeral.join\\n  end\\nend"}
224	21	589cdc45bf24c033874baa89	pending	python	meetup	import calendar\nimport datetime\n\ndesc_commands = {\n\t'1st':0,\n\t'2nd':1,\n\t'3rd':2,\n\t'4th':3,\n\t'last':-1\n}\n\ndef meetup_day(year, month, dayofweek, desc):\n\tteenth = [13,14,15,16,17,18,19]\n\tweekdays = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\n\tdaysofmonth = calendar.monthcalendar(year,month)\n\tdates = []\n\tfor week in daysofmonth:\n\t\tfor day in week:\n\t\t\tif day != 0:\n\t\t\t\tdates.append(day)\n\tcollect = []\n\tfor day in dates:\n\t\tdate = datetime.date(year, month, day)\n\t\tif dayofweek == weekdays[date.isoweekday()-1]:\n\t\t\tcollect.append(date)\n\tif desc in desc_commands:\n\t\tindex = desc_commands[desc]\n\t\treturn collect[index]\n\tif desc == 'teenth':\n\t\tfor day in collect:\n\t\t\tif day.day in teenth:\n\t\t\t\treturn day	\N	\N	0	1	159	meetup.py	2015-09-21 21:47:31	2015-09-21 21:47:31	{"meetup.py":"import calendar\\nimport datetime\\n\\ndesc_commands = {\\n\\t'1st':0,\\n\\t'2nd':1,\\n\\t'3rd':2,\\n\\t'4th':3,\\n\\t'last':-1\\n}\\n\\ndef meetup_day(year, month, dayofweek, desc):\\n\\tteenth = [13,14,15,16,17,18,19]\\n\\tweekdays = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\\n\\tdaysofmonth = calendar.monthcalendar(year,month)\\n\\tdates = []\\n\\tfor week in daysofmonth:\\n\\t\\tfor day in week:\\n\\t\\t\\tif day != 0:\\n\\t\\t\\t\\tdates.append(day)\\n\\tcollect = []\\n\\tfor day in dates:\\n\\t\\tdate = datetime.date(year, month, day)\\n\\t\\tif dayofweek == weekdays[date.isoweekday()-1]:\\n\\t\\t\\tcollect.append(date)\\n\\tif desc in desc_commands:\\n\\t\\tindex = desc_commands[desc]\\n\\t\\treturn collect[index]\\n\\tif desc == 'teenth':\\n\\t\\tfor day in collect:\\n\\t\\t\\tif day.day in teenth:\\n\\t\\t\\t\\treturn day"}
225	21	858ff60177d7061309809371	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	160	/python/wordy/wordy.py	2015-09-22 21:28:02	2015-09-22 21:28:02	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
226	21	8351471bdb7147140e22d6ff	superseded	python	point-mutations	class DNA:\n\tdef __init__(self, dna):\n\t\tself.dna = dna \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.dna:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.dna[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	1	161	point-mutations.py	2015-09-21 15:36:19	2015-09-21 15:36:19	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, dna):\\n\\t\\tself.dna = dna \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.dna:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.dna[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
227	21	540d60fa36c1cc689e32fa3e	done	python	point-mutations	class DNA:\n\tdef __init__(self, strand):\n\t\tself.strand = strand \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.strand:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.strand[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	2	161	point-mutations.py	2015-09-22 16:32:27	2015-09-22 16:32:27	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, strand):\\n\\t\\tself.strand = strand \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.strand:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.strand[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
228	21	bd5a9fbb43966092d7b381e3	superseded	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    zero_counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\n    @nucleotides.chars.each_with_object(zero_counts) do |nucleotide, counts|\n      counts[nucleotide] += 1\n    end\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    nucleotide_counts[nucl] || 0\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = %w[A C G T]\n  RNA_NUCLEOTIDES = %w[A C G U]\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	\N	\N	0	2	162	nucleotide-count.rb	2015-09-21 20:49:12	2015-09-21 20:49:12	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    zero_counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\\n    @nucleotides.chars.each_with_object(zero_counts) do |nucleotide, counts|\\n      counts[nucleotide] += 1\\n    end\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    nucleotide_counts[nucl] || 0\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = %w[A C G T]\\n  RNA_NUCLEOTIDES = %w[A C G U]\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
229	21	54a06cace1db160d32b9dbaf	superseded	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\n    @nucleotides.chars.each do |nucleotide|\n      counts[nucleotide] += 1\n    end\n    counts\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    nucleotide_counts[nucl] || 0\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = 'ACGT'.chars\n  RNA_NUCLEOTIDES = 'ACGU'.chars\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	\N	\N	0	1	162	nucleotide-count.rb	2015-09-21 23:18:36	2015-09-21 23:18:36	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\\n    @nucleotides.chars.each do |nucleotide|\\n      counts[nucleotide] += 1\\n    end\\n    counts\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    nucleotide_counts[nucl] || 0\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = 'ACGT'.chars\\n  RNA_NUCLEOTIDES = 'ACGU'.chars\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
230	21	56ac8fc12e11ee05dc138865	done	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, count(nucl)] }]\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    @nucleotides.chars.count(nucl)\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = %w[A C G T]\n  RNA_NUCLEOTIDES = %w[A C G U]\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	\N	\N	0	3	162	nucleotide-count.rb	2015-09-22 14:59:36	2015-09-22 14:59:36	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, count(nucl)] }]\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    @nucleotides.chars.count(nucl)\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = %w[A C G T]\\n  RNA_NUCLEOTIDES = %w[A C G U]\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
231	21	f82ca8c6b980cce7a239ae8c	done	scala	word-count	class Phrase(phrase: String) {\n  val _matcher = """[\\w']+""".r\n  val normalized = phrase.toLowerCase\n  val words = _matcher.findAllIn(normalized).toList\n\n  def wordCount = words.groupBy(e => e).map(kv => kv._1 -> kv._2.length)\n}	\N	\N	0	1	163	word_count.scala	2015-09-22 23:22:35	2015-09-22 23:22:35	{"word_count.scala":"class Phrase(phrase: String) {\\n  val _matcher = \\"\\"\\"[\\\\w']+\\"\\"\\".r\\n  val normalized = phrase.toLowerCase\\n  val words = _matcher.findAllIn(normalized).toList\\n\\n  def wordCount = words.groupBy(e =\\u003e e).map(kv =\\u003e kv._1 -\\u003e kv._2.length)\\n}"}
232	36	e3a028d4ab8de4b79489a9dc	superseded	haskell	accumulate	module Accumulate (accumulate) where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate f xs = accumulate' f xs []\n\naccumulate' :: (a -> b) -> [a] -> [b] -> [b]\naccumulate' _ [] acc = reverse acc\naccumulate' f (x:xs) acc = accumulate' f xs (f x:acc )	\N	\N	0	1	164	Accumulate.hs	2015-05-12 08:41:12	2015-05-12 08:41:12	{"Accumulate.hs":"module Accumulate (accumulate) where\\n\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\naccumulate f xs = accumulate' f xs []\\n\\naccumulate' :: (a -\\u003e b) -\\u003e [a] -\\u003e [b] -\\u003e [b]\\naccumulate' _ [] acc = reverse acc\\naccumulate' f (x:xs) acc = accumulate' f xs (f x:acc )"}
233	36	70594d0fab2aa00fc10977be	done	haskell	accumulate	module Accumulate (accumulate) where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate _ [] = []\naccumulate f (x:xs) = f x : accumulate f xs	\N	\N	0	2	164	Accumulate.hs	2015-05-14 19:50:19	2015-05-14 19:50:19	{"Accumulate.hs":"module Accumulate (accumulate) where\\n\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\naccumulate _ [] = []\\naccumulate f (x:xs) = f x : accumulate f xs"}
269	14	b0ac07f899ac445f0f051938	pending	python	grade-school	from collections import defaultdict\nclass School():\n    def __init__(self,what):\n        self.db = defaultdict(set)\n        self.school_name = what\n\n    def add(self,what,grade):\n        self.db[grade].add(what)\n        \n    def grade(self,what):\n        return self.db[what]\n\n    def sort(self):\n        #for testing purposes \n        new_dict = {}\n        for k,v in self.db.items():\n            new_dict[k] = tuple(v)\n        return new_dict	\N	\N	0	1	190	school.py	2015-09-23 02:39:17	2015-09-23 02:39:17	{"school.py":"from collections import defaultdict\\nclass School():\\n    def __init__(self,what):\\n        self.db = defaultdict(set)\\n        self.school_name = what\\n\\n    def add(self,what,grade):\\n        self.db[grade].add(what)\\n        \\n    def grade(self,what):\\n        return self.db[what]\\n\\n    def sort(self):\\n        #for testing purposes \\n        new_dict = {}\\n        for k,v in self.db.items():\\n            new_dict[k] = tuple(v)\\n        return new_dict"}
234	30	01a2452fb95fc493d45bb4fb	done	javascript	pythagorean-triplet	(function() {\n  'use strict';\n\n  var Triplet = function(first, second, third) {\n    this.first = first;\n    this.second = second;\n    this.third = third;\n    this.angles = [first, second, third].sort(sortNumber);\n  };\n\n  Triplet.prototype.sum = function() {\n    return this.first + this.second + this.third;\n  };\n\n  Triplet.prototype.product = function() {\n    return this.first * this.second * this.third;\n  };\n\n  Triplet.prototype.isPythagorean = function() {\n    var intTest = /^-?(\\d+|0)$/;\n    if (!intTest.test(this.angles[2])) { return false; }\n\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\n  };\n\n  Triplet.where = function(options) {\n    var max = options['maxFactor'];\n    var min = options['minFactor'] || 1;\n    var sum = options['sum'];\n    var result = this.calculateTriplets(min, max);\n\n    if (sum) {\n      return this.matchSum(sum, result);\n    } else {\n      return result;\n    }\n  };\n\n  Triplet.calculateTriplets = function(min, max) {\n    var triplets = [];\n    for (var x = min; x < max; x++) {\n      for (var y = min; y < max; y++) {\n        var z = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n        var t = new Triplet(x, y, z);\n        if (t.isPythagorean() && !Triplet.inCollection(triplets, t)) {\n          triplets.push(t);\n        }\n      }\n    }\n    return triplets;\n  };\n\n  Triplet.inCollection = function(collection, triplet) {\n    var filtered = collection.filter(function(x) {\n      return x.angles.sort().eql(triplet.angles.sort());\n    });\n    return filtered.length !== 0;\n  };\n\n  Triplet.matchSum = function(sum, collection) {\n    var result = [];\n    for (var x = 0; x < collection.length; x++) {\n      if (collection[x].sum() === sum) {\n        result.push(collection[x]);\n      }\n    }\n    return result;\n  };\n\n  Array.prototype.eql = function(other){\n    if (this.length !== other.length) { return false; }\n\n    for(var i = 0; i < this.length; i++) {\n      if(this[i] !== other[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  function sortNumber(a,b) {\n    return a - b;\n  }\n\n  module.exports = Triplet;\n})();	\N	\N	0	2	165	triplet.js	2015-04-05 01:12:55	2015-04-05 01:12:55	{"triplet.js":"(function() {\\n  'use strict';\\n\\n  var Triplet = function(first, second, third) {\\n    this.first = first;\\n    this.second = second;\\n    this.third = third;\\n    this.angles = [first, second, third].sort(sortNumber);\\n  };\\n\\n  Triplet.prototype.sum = function() {\\n    return this.first + this.second + this.third;\\n  };\\n\\n  Triplet.prototype.product = function() {\\n    return this.first * this.second * this.third;\\n  };\\n\\n  Triplet.prototype.isPythagorean = function() {\\n    var intTest = /^-?(\\\\d+|0)$/;\\n    if (!intTest.test(this.angles[2])) { return false; }\\n\\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\\n  };\\n\\n  Triplet.where = function(options) {\\n    var max = options['maxFactor'];\\n    var min = options['minFactor'] || 1;\\n    var sum = options['sum'];\\n    var result = this.calculateTriplets(min, max);\\n\\n    if (sum) {\\n      return this.matchSum(sum, result);\\n    } else {\\n      return result;\\n    }\\n  };\\n\\n  Triplet.calculateTriplets = function(min, max) {\\n    var triplets = [];\\n    for (var x = min; x \\u003c max; x++) {\\n      for (var y = min; y \\u003c max; y++) {\\n        var z = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\\n        var t = new Triplet(x, y, z);\\n        if (t.isPythagorean() \\u0026\\u0026 !Triplet.inCollection(triplets, t)) {\\n          triplets.push(t);\\n        }\\n      }\\n    }\\n    return triplets;\\n  };\\n\\n  Triplet.inCollection = function(collection, triplet) {\\n    var filtered = collection.filter(function(x) {\\n      return x.angles.sort().eql(triplet.angles.sort());\\n    });\\n    return filtered.length !== 0;\\n  };\\n\\n  Triplet.matchSum = function(sum, collection) {\\n    var result = [];\\n    for (var x = 0; x \\u003c collection.length; x++) {\\n      if (collection[x].sum() === sum) {\\n        result.push(collection[x]);\\n      }\\n    }\\n    return result;\\n  };\\n\\n  Array.prototype.eql = function(other){\\n    if (this.length !== other.length) { return false; }\\n\\n    for(var i = 0; i \\u003c this.length; i++) {\\n      if(this[i] !== other[i]) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  };\\n\\n  function sortNumber(a,b) {\\n    return a - b;\\n  }\\n\\n  module.exports = Triplet;\\n})();"}
235	30	f5e51bdf53c256af67061fb6	superseded	javascript	pythagorean-triplet	(function() {\n  'use strict';\n\n  var Triplet = function(first, second, third) {\n    this.first = first;\n    this.second = second;\n    this.third = third;\n    this.angles = [first, second, third].sort(sortNumber);\n  };\n\n  Triplet.prototype.sum = function() {\n    return this.first + this.second + this.third;\n  };\n\n  Triplet.prototype.product = function() {\n    return this.first * this.second * this.third;\n  };\n\n  Triplet.prototype.isPythagorean = function() {\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\n  };\n\n  Triplet.where = function(options) {\n    var max = options['maxFactor'];\n    var min = options['minFactor'] || 1;\n    var sum = options['sum'];\n    var result = this.calculateTriplets(min, max);\n\n    if (sum) {\n      return this.matchSum(sum, result);\n    } else {\n      return result;\n    }\n  };\n\n  Triplet.calculateTriplets = function(min, max) {\n    var triplets = [];\n    for (var x = min; x <= max; x++) {\n      for (var y = min; y <= max; y++) {\n        for (var z = min; z <= max; z++) {\n          var t = new Triplet(x, y, z);\n          if (t.isPythagorean() && !(this.inCollection(triplets, t))) {\n            triplets.push(t);\n          }\n        }\n      }\n    }\n    return triplets;\n  };\n\n  Triplet.inCollection = function(collection, triplet) {\n    var filtered = collection.filter(function(x) {\n      return x.angles.sort().eql(triplet.angles.sort());\n    });\n    return filtered.length !== 0;\n  };\n\n  Triplet.matchSum = function(sum, collection) {\n    var result = [];\n    for (var x = 0; x < collection.length; x++) {\n      if (collection[x].sum() === sum) {\n        result.push(collection[x]);\n      }\n    }\n    return result;\n  }\n\n  Array.prototype.eql = function(other){\n    if (this.length !== other.length) { return false; }\n\n    for(var i = 0; i < this.length; i++) {\n      if(this[i] !== other[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  function sortNumber(a,b) {\n    return a - b;\n  }\n\n  module.exports = Triplet;\n})();	\N	\N	0	1	165	triplet.js	2015-06-14 09:59:32	2015-06-14 09:59:32	{"triplet.js":"(function() {\\n  'use strict';\\n\\n  var Triplet = function(first, second, third) {\\n    this.first = first;\\n    this.second = second;\\n    this.third = third;\\n    this.angles = [first, second, third].sort(sortNumber);\\n  };\\n\\n  Triplet.prototype.sum = function() {\\n    return this.first + this.second + this.third;\\n  };\\n\\n  Triplet.prototype.product = function() {\\n    return this.first * this.second * this.third;\\n  };\\n\\n  Triplet.prototype.isPythagorean = function() {\\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\\n  };\\n\\n  Triplet.where = function(options) {\\n    var max = options['maxFactor'];\\n    var min = options['minFactor'] || 1;\\n    var sum = options['sum'];\\n    var result = this.calculateTriplets(min, max);\\n\\n    if (sum) {\\n      return this.matchSum(sum, result);\\n    } else {\\n      return result;\\n    }\\n  };\\n\\n  Triplet.calculateTriplets = function(min, max) {\\n    var triplets = [];\\n    for (var x = min; x \\u003c= max; x++) {\\n      for (var y = min; y \\u003c= max; y++) {\\n        for (var z = min; z \\u003c= max; z++) {\\n          var t = new Triplet(x, y, z);\\n          if (t.isPythagorean() \\u0026\\u0026 !(this.inCollection(triplets, t))) {\\n            triplets.push(t);\\n          }\\n        }\\n      }\\n    }\\n    return triplets;\\n  };\\n\\n  Triplet.inCollection = function(collection, triplet) {\\n    var filtered = collection.filter(function(x) {\\n      return x.angles.sort().eql(triplet.angles.sort());\\n    });\\n    return filtered.length !== 0;\\n  };\\n\\n  Triplet.matchSum = function(sum, collection) {\\n    var result = [];\\n    for (var x = 0; x \\u003c collection.length; x++) {\\n      if (collection[x].sum() === sum) {\\n        result.push(collection[x]);\\n      }\\n    }\\n    return result;\\n  }\\n\\n  Array.prototype.eql = function(other){\\n    if (this.length !== other.length) { return false; }\\n\\n    for(var i = 0; i \\u003c this.length; i++) {\\n      if(this[i] !== other[i]) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  };\\n\\n  function sortNumber(a,b) {\\n    return a - b;\\n  }\\n\\n  module.exports = Triplet;\\n})();"}
236	30	55740cfd054031601cf19a6a	superseded	javascript	bob	var Bob = function(){\n\n};\n\n\nBob.prototype.hey = function(phrase){\n\tif(phrase == '' || phrase == '   '){\n\t\treturn 'Fine. Be that way!';\n\t} else if (phrase.search("gym") != -1){\n\t\treturn 'Whatever.';\n\t} else if(phrase[phrase.length-1]==="!"){\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase == 'I HATE YOU' || phrase == 'WHAT THE HELL WERE YOU THINKING?'){ //all caps - should use regex\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase[phrase.length-1]==="?"){\n\t\treturn 'Sure.';\n\t}\telse if (phrase[phrase.length-1]!=="?" || phrase[phrase.length-1] !== "!"){\n\t\treturn 'Whatever.';\n\t}\t\n\n}	\N	\N	0	1	166	bob.js	2015-05-24 02:51:02	2015-05-24 02:51:02	{"bob.js":"var Bob = function(){\\n\\n};\\n\\n\\nBob.prototype.hey = function(phrase){\\n\\tif(phrase == '' || phrase == '   '){\\n\\t\\treturn 'Fine. Be that way!';\\n\\t} else if (phrase.search(\\"gym\\") != -1){\\n\\t\\treturn 'Whatever.';\\n\\t} else if(phrase[phrase.length-1]===\\"!\\"){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase == 'I HATE YOU' || phrase == 'WHAT THE HELL WERE YOU THINKING?'){ //all caps - should use regex\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase[phrase.length-1]===\\"?\\"){\\n\\t\\treturn 'Sure.';\\n\\t}\\telse if (phrase[phrase.length-1]!==\\"?\\" || phrase[phrase.length-1] !== \\"!\\"){\\n\\t\\treturn 'Whatever.';\\n\\t}\\t\\n\\n}"}
237	30	6aab6c5a86c2b3731f8a8eb1	done	javascript	bob	var Bob = function(){\n\n};\n\n\nBob.prototype.hey = function(phrase){\n   if(phrase.search(/([0-9a-zA-Z])\\S+/) === -1){\n\t\treturn 'Fine. Be that way!';\n\t} else if (phrase.search(/\\d\\?/)>-1){\n\t\treturn 'Sure.';\n\t} else if (phrase[phrase.length-1] == '?' && phrase.toUpperCase() == phrase){\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase[phrase.length-1] == '?'){\n\t\treturn 'Sure.';\n\t} else if (phrase.search(/[A-Za-z]+/) === -1){\n\t\treturn 'Whatever.';\n\t} else if (phrase.toUpperCase() == phrase){\n\t\treturn 'Woah, chill out!';\n\t} else{\n\t\treturn 'Whatever.';\n\t}\n};	\N	\N	0	2	166	bob.js	2015-07-16 03:57:55	2015-07-16 03:57:55	{"bob.js":"var Bob = function(){\\n\\n};\\n\\n\\nBob.prototype.hey = function(phrase){\\n   if(phrase.search(/([0-9a-zA-Z])\\\\S+/) === -1){\\n\\t\\treturn 'Fine. Be that way!';\\n\\t} else if (phrase.search(/\\\\d\\\\?/)\\u003e-1){\\n\\t\\treturn 'Sure.';\\n\\t} else if (phrase[phrase.length-1] == '?' \\u0026\\u0026 phrase.toUpperCase() == phrase){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase[phrase.length-1] == '?'){\\n\\t\\treturn 'Sure.';\\n\\t} else if (phrase.search(/[A-Za-z]+/) === -1){\\n\\t\\treturn 'Whatever.';\\n\\t} else if (phrase.toUpperCase() == phrase){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else{\\n\\t\\treturn 'Whatever.';\\n\\t}\\n};"}
238	30	2ecff2989eb9b705eec5190b	done	haskell	robot-name	module Robot (Robot, robotName, mkRobot, resetName) where\n\n\nimport Control.Concurrent (MVar, readMVar, swapMVar, newMVar)\nimport Control.Monad (void)\nimport System.Random (randomRIO)\n\ndata Robot = Robot {\n  getName :: MVar String\n}\n\nmkRobot :: IO Robot\nmkRobot = generateName >>= newMVar >>= return . Robot\n\nrobotName :: Robot -> IO String\nrobotName r = readMVar $ getName r\n\nresetName :: Robot -> IO()\nresetName r = void(generateName >>= swapMVar (getName r))\n\ngenerateName :: IO String\ngenerateName = mapM randomRIO name\n  where name = [char, char, int, int, int]\n        char = ('A', 'Z')\n        int  = ('0', '9')	\N	\N	0	1	167	Robot.hs	2015-05-09 07:31:52	2015-05-09 07:31:52	{"Robot.hs":"module Robot (Robot, robotName, mkRobot, resetName) where\\n\\n\\nimport Control.Concurrent (MVar, readMVar, swapMVar, newMVar)\\nimport Control.Monad (void)\\nimport System.Random (randomRIO)\\n\\ndata Robot = Robot {\\n  getName :: MVar String\\n}\\n\\nmkRobot :: IO Robot\\nmkRobot = generateName \\u003e\\u003e= newMVar \\u003e\\u003e= return . Robot\\n\\nrobotName :: Robot -\\u003e IO String\\nrobotName r = readMVar $ getName r\\n\\nresetName :: Robot -\\u003e IO()\\nresetName r = void(generateName \\u003e\\u003e= swapMVar (getName r))\\n\\ngenerateName :: IO String\\ngenerateName = mapM randomRIO name\\n  where name = [char, char, int, int, int]\\n        char = ('A', 'Z')\\n        int  = ('0', '9')"}
239	30	7193cd53ab78548d060e8f78	done	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nmy @words = 'a'..'z';\n\nsub new{\n\tmy ($class, $key) = @_;\n\tdie "ArgumentError: $key" if defined $key and ($key =~ /[^a-z]/ or not length $key);\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	2	168	Cipher.pm	2015-04-04 23:12:09	2015-04-04 23:12:09	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nmy @words = 'a'..'z';\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\tdie \\"ArgumentError: $key\\" if defined $key and ($key =~ /[^a-z]/ or not length $key);\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
240	30	0b326d2234ee18faadbaedfa	superseded	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nsub new{\n\tmy ($class, $key) = @_;\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	1	168	Cipher.pm	2015-05-15 02:14:07	2015-05-15 02:14:07	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
241	30	89c555f1bb802ae1b45d7733	pending	javascript	word-count	var words = function(input) {\r\n\tvar split = input.replace('\\n'," ").split(" ");\r\n\tvar wordcount = {};\r\n\t\r\n\tsplit.forEach(function(element) {\r\n\t\t\tif (wordcount[element]) {\r\n\t\t\t\twordcount[element] = wordcount[element] + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\twordcount[element] = 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t});\r\n\treturn wordcount;\r\n};\r\n\r\nmodule.exports = words;	\N	\N	0	1	169	word-count.js	2015-08-02 19:00:34	2015-08-02 19:00:34	{"word-count.js":"var words = function(input) {\\r\\n\\tvar split = input.replace('\\\\n',\\" \\").split(\\" \\");\\r\\n\\tvar wordcount = {};\\r\\n\\t\\r\\n\\tsplit.forEach(function(element) {\\r\\n\\t\\t\\tif (wordcount[element]) {\\r\\n\\t\\t\\t\\twordcount[element] = wordcount[element] + 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\twordcount[element] = 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t});\\r\\n\\treturn wordcount;\\r\\n};\\r\\n\\r\\nmodule.exports = words;"}
242	30	03c70fb135fd74f3a27c0bd1	pending	clojure	robot-name	(ns robot-name)\n\n(def characters "ABCDEFGHIJKLMNOPQRSTUVWXYZ")\n\n(def numbers "1234567890")\n\n(defn- rand-n-source [n source]\n  (->> (fn [] (rand-nth source))\n       (repeatedly)\n       (take n)\n       (apply str)))\n\n(defn- generate-id [] \n  (str (rand-n-source 2 characters)\n       (rand-n-source 4 numbers)))\n\n(defn robot []\n  (atom {:name ""}))\n\n(defn robot-name [robot]\n  (if (empty? @robot)\n    (reset! robot (generate-id))\n    @robot))\n\n(defn reset-name [robot]\n  (reset! robot ""))	\N	\N	0	1	170	/clojure/robot-name/robot_name.clj	2015-04-09 04:01:58	2015-04-09 04:01:58	{"/clojure/robot-name/robot_name.clj":"(ns robot-name)\\n\\n(def characters \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\")\\n\\n(def numbers \\"1234567890\\")\\n\\n(defn- rand-n-source [n source]\\n  (-\\u003e\\u003e (fn [] (rand-nth source))\\n       (repeatedly)\\n       (take n)\\n       (apply str)))\\n\\n(defn- generate-id [] \\n  (str (rand-n-source 2 characters)\\n       (rand-n-source 4 numbers)))\\n\\n(defn robot []\\n  (atom {:name \\"\\"}))\\n\\n(defn robot-name [robot]\\n  (if (empty? @robot)\\n    (reset! robot (generate-id))\\n    @robot))\\n\\n(defn reset-name [robot]\\n  (reset! robot \\"\\"))"}
243	30	2b90570168740c8ca69a6ed7	pending	javascript	hamming	var Hamming = {\r\n  compute: function(Strand1, Strand2) {\r\n    var NumberDifferent = 0;\r\n//Do a length check first because everything else relies on that. \r\nif (Strand1.length != Strand2.length){\r\n  throw 'DNA strands must be of equal length.'\r\n};//end if\r\nfor (var i = 0;i<Strand1.length;i++){//does a loop for each character input. \r\nif (Strand1[i] != Strand2[i]){ //if the chars aren't the same add to the differnce counter. \r\n\tNumberDifferent ++\r\n};//end if\r\n};//end for\r\n return NumberDifferent; //return the # difference\r\n   }//end compute\r\n};//end hamming\r\n\r\nmodule.exports = Hamming;	\N	\N	0	1	171	\\javascript\\hamming\\hamming.js	2015-07-05 10:14:06	2015-07-05 10:14:06	{"\\\\javascript\\\\hamming\\\\hamming.js":"var Hamming = {\\r\\n  compute: function(Strand1, Strand2) {\\r\\n    var NumberDifferent = 0;\\r\\n//Do a length check first because everything else relies on that. \\r\\nif (Strand1.length != Strand2.length){\\r\\n  throw 'DNA strands must be of equal length.'\\r\\n};//end if\\r\\nfor (var i = 0;i\\u003cStrand1.length;i++){//does a loop for each character input. \\r\\nif (Strand1[i] != Strand2[i]){ //if the chars aren't the same add to the differnce counter. \\r\\n\\tNumberDifferent ++\\r\\n};//end if\\r\\n};//end for\\r\\n return NumberDifferent; //return the # difference\\r\\n   }//end compute\\r\\n};//end hamming\\r\\n\\r\\nmodule.exports = Hamming;"}
251	30	4d8d9d2797cda6b43fed0b40	superseded	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\n\r\ntype RobotName() = \r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let buildName () =\r\n        String.Concat [ randomLetter(); randomLetter(); \r\n                        randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	2	176	RobotName.fs	2015-05-08 03:59:22	2015-05-08 03:59:22	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        String.Concat [ randomLetter(); randomLetter(); \\r\\n                        randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
244	30	c8bedbd390b363c5c8f74d0b	pending	python	meetup	import calendar\nimport datetime\n\ndesc_commands = {\n\t'1st':0,\n\t'2nd':1,\n\t'3rd':2,\n\t'4th':3,\n\t'last':-1\n}\n\ndef meetup_day(year, month, dayofweek, desc):\n\tteenth = [13,14,15,16,17,18,19]\n\tweekdays = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\n\tdaysofmonth = calendar.monthcalendar(year,month)\n\tdates = []\n\tfor week in daysofmonth:\n\t\tfor day in week:\n\t\t\tif day != 0:\n\t\t\t\tdates.append(day)\n\tcollect = []\n\tfor day in dates:\n\t\tdate = datetime.date(year, month, day)\n\t\tif dayofweek == weekdays[date.isoweekday()-1]:\n\t\t\tcollect.append(date)\n\tif desc in desc_commands:\n\t\tindex = desc_commands[desc]\n\t\treturn collect[index]\n\tif desc == 'teenth':\n\t\tfor day in collect:\n\t\t\tif day.day in teenth:\n\t\t\t\treturn day	\N	\N	0	1	172	meetup.py	2015-07-17 01:20:00	2015-07-17 01:20:00	{"meetup.py":"import calendar\\nimport datetime\\n\\ndesc_commands = {\\n\\t'1st':0,\\n\\t'2nd':1,\\n\\t'3rd':2,\\n\\t'4th':3,\\n\\t'last':-1\\n}\\n\\ndef meetup_day(year, month, dayofweek, desc):\\n\\tteenth = [13,14,15,16,17,18,19]\\n\\tweekdays = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\\n\\tdaysofmonth = calendar.monthcalendar(year,month)\\n\\tdates = []\\n\\tfor week in daysofmonth:\\n\\t\\tfor day in week:\\n\\t\\t\\tif day != 0:\\n\\t\\t\\t\\tdates.append(day)\\n\\tcollect = []\\n\\tfor day in dates:\\n\\t\\tdate = datetime.date(year, month, day)\\n\\t\\tif dayofweek == weekdays[date.isoweekday()-1]:\\n\\t\\t\\tcollect.append(date)\\n\\tif desc in desc_commands:\\n\\t\\tindex = desc_commands[desc]\\n\\t\\treturn collect[index]\\n\\tif desc == 'teenth':\\n\\t\\tfor day in collect:\\n\\t\\t\\tif day.day in teenth:\\n\\t\\t\\t\\treturn day"}
245	30	ac57bbfba941691a2c043422	pending	ruby	hamming	class Hamming \n\n      def Hamming.compute strandA, strandB \n        hamming_distance = 0\n        end_point = strandA.length\n        length_difference = strandA.length - strandB.length\n\n        if length_difference > 0\n            end_point = strandB.length\n        end\n\n        end_point -= 1;\n\n        for i in ( 0..end_point )\n               if strandA[i] != strandB[i]\n                    hamming_distance += 1\n               end\n        end\n\n        return hamming_distance\n\n    end\n\nend	\N	\N	0	1	173	hamming.rb	2015-04-11 04:20:08	2015-04-11 04:20:08	{"hamming.rb":"class Hamming \\n\\n      def Hamming.compute strandA, strandB \\n        hamming_distance = 0\\n        end_point = strandA.length\\n        length_difference = strandA.length - strandB.length\\n\\n        if length_difference \\u003e 0\\n            end_point = strandB.length\\n        end\\n\\n        end_point -= 1;\\n\\n        for i in ( 0..end_point )\\n               if strandA[i] != strandB[i]\\n                    hamming_distance += 1\\n               end\\n        end\\n\\n        return hamming_distance\\n\\n    end\\n\\nend"}
246	30	835ce9cf142fb39ac4e78c2b	done	python	point-mutations	class DNA:\n\tdef __init__(self, strand):\n\t\tself.strand = strand \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.strand:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.strand[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	2	174	point-mutations.py	2015-04-02 23:58:27	2015-04-02 23:58:27	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, strand):\\n\\t\\tself.strand = strand \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.strand:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.strand[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
247	30	d571ad771738023acf1a69c2	superseded	python	point-mutations	class DNA:\n\tdef __init__(self, dna):\n\t\tself.dna = dna \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.dna:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.dna[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	1	174	point-mutations.py	2015-08-25 14:18:36	2015-08-25 14:18:36	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, dna):\\n\\t\\tself.dna = dna \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.dna:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.dna[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
248	30	c2604112b4657c0055c3ccab	pending	ruby	bob	class Bob\n  def hey(phrase)\n    @phrase = phrase\n    if phrase_is_empty?\n      'Fine. Be that way!'\n    elsif phrase_is_yelling?\n      'Woah, chill out!'\n    elsif phrase_is_questioning?\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\n\n  private\n  def phrase_is_empty?\n    @phrase.strip.empty?\n  end\n\n  def phrase_is_yelling?\n    @phrase == @phrase.upcase && @phrase.scan(/[a-zA-Z]/).any?\n  end\n\n  def phrase_is_questioning?\n    @phrase[-1,1] == '?'\n  end\nend	\N	\N	0	2	175	bob.rb	2015-04-18 02:17:09	2015-04-18 02:17:09	{"bob.rb":"class Bob\\n  def hey(phrase)\\n    @phrase = phrase\\n    if phrase_is_empty?\\n      'Fine. Be that way!'\\n    elsif phrase_is_yelling?\\n      'Woah, chill out!'\\n    elsif phrase_is_questioning?\\n      'Sure.'\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\n\\n  private\\n  def phrase_is_empty?\\n    @phrase.strip.empty?\\n  end\\n\\n  def phrase_is_yelling?\\n    @phrase == @phrase.upcase \\u0026\\u0026 @phrase.scan(/[a-zA-Z]/).any?\\n  end\\n\\n  def phrase_is_questioning?\\n    @phrase[-1,1] == '?'\\n  end\\nend"}
249	30	50d91eeee7a055f1aac37c6f	superseded	ruby	bob	class Bob\n  def hey(phrase)\n    if phrase.strip.empty?\n      'Fine. Be that way!'\n    elsif phrase == phrase.upcase && phrase.scan(/[a-zA-Z]/).any?\n      'Woah, chill out!'\n    elsif phrase[-1,1] == '?'\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	1	175	bob.rb	2015-05-12 04:33:45	2015-05-12 04:33:45	{"bob.rb":"class Bob\\n  def hey(phrase)\\n    if phrase.strip.empty?\\n      'Fine. Be that way!'\\n    elsif phrase == phrase.upcase \\u0026\\u0026 phrase.scan(/[a-zA-Z]/).any?\\n      'Woah, chill out!'\\n    elsif phrase[-1,1] == '?'\\n      'Sure.'\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\nend"}
250	30	fe5c951925f9b21d47be9b07	done	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\nopen System.Collections.Generic\r\n\r\ntype RobotName() = \r\n    static let usedNames = new List<String>()\r\n\r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let rec buildName () =\r\n        let candidate = \r\n            String.Concat [ randomLetter(); randomLetter(); \r\n                            randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n        if usedNames.Contains(candidate) then \r\n            buildName() \r\n        else \r\n            usedNames.Add(candidate)\r\n            candidate   \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	3	176	RobotName.fs	2015-04-06 04:27:38	2015-04-06 04:27:38	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\nopen System.Collections.Generic\\r\\n\\r\\ntype RobotName() = \\r\\n    static let usedNames = new List\\u003cString\\u003e()\\r\\n\\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let rec buildName () =\\r\\n        let candidate = \\r\\n            String.Concat [ randomLetter(); randomLetter(); \\r\\n                            randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n        if usedNames.Contains(candidate) then \\r\\n            buildName() \\r\\n        else \\r\\n            usedNames.Add(candidate)\\r\\n            candidate   \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
252	30	9f3628ade6e7b6c4a27f772a	superseded	fsharp	robot-name	﻿namespace RobotName\r\n\r\ntype RobotName() = \r\n    let random = System.Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\r\n    let randomDigit () = (random.Next() % 10).ToString()\r\n\r\n    let buildName () =\r\n        (seq {0..1} \r\n         |> Seq.map (fun _ -> randomLetter())\r\n         |> String.concat "")\r\n        +\r\n        (seq {0..2}\r\n         |> Seq.map (fun _ -> randomDigit())\r\n         |> String.concat "")\r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	1	176	RobotName.fs	2015-07-24 23:35:05	2015-07-24 23:35:05	{"RobotName.fs":"﻿namespace RobotName\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = System.Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\\r\\n    let randomDigit () = (random.Next() % 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        (seq {0..1} \\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomLetter())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n        +\\r\\n        (seq {0..2}\\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomDigit())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
253	30	f65357f194cf3ba738e1c0f9	pending	haskell	strain	module Strain (keep, discard) where\n\nkeep :: (a -> Bool) -> [a] -> [a]\nkeep _ [] = []\nkeep predicate (x:xs)\n    | predicate x = x : keep predicate xs\n    | otherwise   = keep predicate xs\n\ndiscard :: (a -> Bool) -> [a] -> [a]\ndiscard _ [] = []\ndiscard predicate (x:xs)\n    | predicate x = discard predicate xs\n    | otherwise   = x : discard predicate xs	\N	\N	0	1	177	Strain.hs	2015-05-26 20:13:25	2015-05-26 20:13:25	{"Strain.hs":"module Strain (keep, discard) where\\n\\nkeep :: (a -\\u003e Bool) -\\u003e [a] -\\u003e [a]\\nkeep _ [] = []\\nkeep predicate (x:xs)\\n    | predicate x = x : keep predicate xs\\n    | otherwise   = keep predicate xs\\n\\ndiscard :: (a -\\u003e Bool) -\\u003e [a] -\\u003e [a]\\ndiscard _ [] = []\\ndiscard predicate (x:xs)\\n    | predicate x = discard predicate xs\\n    | otherwise   = x : discard predicate xs"}
254	30	fdce2c75623ae36eabad2fe8	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	178	/python/wordy/wordy.py	2015-05-01 10:08:11	2015-05-01 10:08:11	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
255	30	de13385ce45900457461d8ba	done	ruby	roman-numerals	class Fixnum\n\n  def to_roman\n    i = self\n    s = ''\n    roman_mappings.each do |arabic, roman|\n      while i >= arabic\n        s << roman\n        i -= arabic\n      end\n    end\n    s\n  end\n\n  def roman_mappings\n    {\n      1000 => 'M',\n      900 => 'CM',\n      500 => 'D',\n      400 => 'CD',\n      100 => 'C',\n      90 => 'XC',\n      50 => 'L',\n      40 => 'XL',\n      10 => 'X',\n      9 => 'IX',\n      5 => 'V',\n      4 => 'IV',\n      1 => 'I',\n    }\n\n  end\n\nend	\N	\N	0	1	179	roman.rb	2015-04-14 19:56:20	2015-04-14 19:56:20	{"roman.rb":"class Fixnum\\n\\n  def to_roman\\n    i = self\\n    s = ''\\n    roman_mappings.each do |arabic, roman|\\n      while i \\u003e= arabic\\n        s \\u003c\\u003c roman\\n        i -= arabic\\n      end\\n    end\\n    s\\n  end\\n\\n  def roman_mappings\\n    {\\n      1000 =\\u003e 'M',\\n      900 =\\u003e 'CM',\\n      500 =\\u003e 'D',\\n      400 =\\u003e 'CD',\\n      100 =\\u003e 'C',\\n      90 =\\u003e 'XC',\\n      50 =\\u003e 'L',\\n      40 =\\u003e 'XL',\\n      10 =\\u003e 'X',\\n      9 =\\u003e 'IX',\\n      5 =\\u003e 'V',\\n      4 =\\u003e 'IV',\\n      1 =\\u003e 'I',\\n    }\\n\\n  end\\n\\nend"}
256	30	65c21c5fa8b0432db2d6b1e4	superseded	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) \nor divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	2	180	year.py	2015-06-07 06:31:10	2015-06-07 06:31:10	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) \\nor divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
257	30	7419b87e612d1a46c695903b	superseded	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	1	180	year.py	2015-07-04 19:51:36	2015-07-04 19:51:36	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
258	30	6967a3e36b96e2f1e6161594	done	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	3	180	year.py	2015-07-27 03:35:31	2015-07-27 03:35:31	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
259	30	4dba1e288472f40b34ffb471	pending	python	kindergarten-garden	# William Morris\r\n# exercism.io\r\n# garden.py\r\n\r\nclass Garden:\r\n\r\n    def __init__(self, rows, students =['Alice', 'Bob', 'Charlie', 'David', 'Eve',\r\n                                        'Fred', 'Ginny', 'Harriet', 'Ileana',\r\n                                        'Joseph', 'Kincaid', 'Larry'] ):\r\n        \r\n        self.names = students\r\n        self.names.sort()\r\n        self.seeds ={'G':'Grass','C':'Clover','R':'Radishes','V':'Violets'}\r\n        self.rows = rows.split()\r\n        name_index = 0\r\n        self.students_cups = {}\r\n        for cups in range(0,len(self.rows[0]),2):\r\n            cups_first_row = self.rows[0][cups:cups+2]\r\n            cups_second_row = self.rows[1][cups:cups+2]\r\n            self.students_cups[self.names[name_index]]=cups_first_row + cups_second_row\r\n            name_index += 1\r\n        self.students_plants = {}\r\n        for name in self.students_cups.keys():\r\n            self.students_plants[name] =  [self.seeds[seed] for seed in\r\n                                          self.students_cups[name]]\r\n            \r\n    def plants(self,name):\r\n        return self.students_plants[name]\r\n    \r	\N	\N	0	1	181	garden.py	2015-05-24 12:26:09	2015-05-24 12:26:09	{"garden.py":"# William Morris\\r\\n# exercism.io\\r\\n# garden.py\\r\\n\\r\\nclass Garden:\\r\\n\\r\\n    def __init__(self, rows, students =['Alice', 'Bob', 'Charlie', 'David', 'Eve',\\r\\n                                        'Fred', 'Ginny', 'Harriet', 'Ileana',\\r\\n                                        'Joseph', 'Kincaid', 'Larry'] ):\\r\\n        \\r\\n        self.names = students\\r\\n        self.names.sort()\\r\\n        self.seeds ={'G':'Grass','C':'Clover','R':'Radishes','V':'Violets'}\\r\\n        self.rows = rows.split()\\r\\n        name_index = 0\\r\\n        self.students_cups = {}\\r\\n        for cups in range(0,len(self.rows[0]),2):\\r\\n            cups_first_row = self.rows[0][cups:cups+2]\\r\\n            cups_second_row = self.rows[1][cups:cups+2]\\r\\n            self.students_cups[self.names[name_index]]=cups_first_row + cups_second_row\\r\\n            name_index += 1\\r\\n        self.students_plants = {}\\r\\n        for name in self.students_cups.keys():\\r\\n            self.students_plants[name] =  [self.seeds[seed] for seed in\\r\\n                                          self.students_cups[name]]\\r\\n            \\r\\n    def plants(self,name):\\r\\n        return self.students_plants[name]\\r\\n    \\r"}
263	35	617fa362362f972450f8a707	pending	ruby	twelve-days	class TwelveDaysSong\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\n\n  VERSES = [\n    ["twelve Drummers Drumming, ", 12],\n    ["eleven Pipers Piping, ", 11],\n    ["ten Lords-a-Leaping, ", 10],\n    ["nine Ladies Dancing, ", 9],    \n    ["eight Maids-a-Milking, ", 8],      \n    ["seven Swans-a-Swimming, ", 7],\n    ["six Geese-a-Laying, ", 6],\n    ["five Gold Rings, ", 5],\n    ["four Calling Birds, ", 4], \n    ["three French Hens, ", 3],\n    ["two Turtle Doves, and ", 2],\n  ]\n\n  def verse(num)\n    s = "On the #{DAYS[num-1]} day of Christmas my true love gave to me, "\n    VERSES.each do |phrase, verse_num|\n      s << phrase if num >= verse_num\n    end\n    s << "a Partridge in a Pear Tree.\\n"\n    s\n  end\n\n  def verses(start, stop)\n    (start..stop).map { |num| verse(num) }.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses(1, 12)\n  end\nend	\N	\N	0	1	185	twelve_days.rb	2015-05-24 10:29:40	2015-05-24 10:29:40	{"twelve_days.rb":"class TwelveDaysSong\\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\\n\\n  VERSES = [\\n    [\\"twelve Drummers Drumming, \\", 12],\\n    [\\"eleven Pipers Piping, \\", 11],\\n    [\\"ten Lords-a-Leaping, \\", 10],\\n    [\\"nine Ladies Dancing, \\", 9],    \\n    [\\"eight Maids-a-Milking, \\", 8],      \\n    [\\"seven Swans-a-Swimming, \\", 7],\\n    [\\"six Geese-a-Laying, \\", 6],\\n    [\\"five Gold Rings, \\", 5],\\n    [\\"four Calling Birds, \\", 4], \\n    [\\"three French Hens, \\", 3],\\n    [\\"two Turtle Doves, and \\", 2],\\n  ]\\n\\n  def verse(num)\\n    s = \\"On the #{DAYS[num-1]} day of Christmas my true love gave to me, \\"\\n    VERSES.each do |phrase, verse_num|\\n      s \\u003c\\u003c phrase if num \\u003e= verse_num\\n    end\\n    s \\u003c\\u003c \\"a Partridge in a Pear Tree.\\\\n\\"\\n    s\\n  end\\n\\n  def verses(start, stop)\\n    (start..stop).map { |num| verse(num) }.join(\\"\\\\n\\") + \\"\\\\n\\"\\n  end\\n\\n  def sing\\n    verses(1, 12)\\n  end\\nend"}
264	35	ad7eca69a91bd626b695211e	superseded	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nsub new{\n\tmy ($class, $key) = @_;\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	1	186	Cipher.pm	2015-07-15 14:38:42	2015-07-15 14:38:42	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
265	35	a03070ac70a91c642a11e09a	done	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nmy @words = 'a'..'z';\n\nsub new{\n\tmy ($class, $key) = @_;\n\tdie "ArgumentError: $key" if defined $key and ($key =~ /[^a-z]/ or not length $key);\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	2	186	Cipher.pm	2015-08-02 06:52:58	2015-08-02 06:52:58	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nmy @words = 'a'..'z';\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\tdie \\"ArgumentError: $key\\" if defined $key and ($key =~ /[^a-z]/ or not length $key);\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
266	35	4bb9be2fa92ec58350db984d	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	187	/python/wordy/wordy.py	2015-06-21 11:06:33	2015-06-21 11:06:33	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
267	14	3a29cda646f744f2eef3ee27	pending	ruby	roman-numerals	class Fixnum\n  def to_roman\n    array = self.to_s.split(//)\n    num_array = []\n    array.each do |x|\n      num_array.push(x.to_i)\n    end\n    roman_numeral=[]\n    ones = num_array.pop\n    if ones == 9\n      roman_numeral.unshift('IX')\n    elsif ones == 4\n      roman_numeral.unshift('IV')\n    else\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\n    end\n\n    if num_array.empty? == false\n      tens = num_array.pop\n      if tens == 9\n        roman_numeral.unshift('XC')\n      elsif tens == 4\n        roman_numeral.unshift('XL')\n      else\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\n      end\n    end\n\n    if num_array.empty? == false\n      hundreds = num_array.pop\n      if hundreds == 9\n        roman_numeral.unshift('CM')\n      elsif hundreds == 4\n        roman_numeral.unshift('CD')\n      else\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\n      end\n    end\n\n    if num_array.empty? == false\n      thousands = num_array.pop\n      roman_numeral.unshift('M'*thousands)\n    end\n\n    roman_numeral.join\n  end\nend	\N	\N	0	1	188	/ruby/roman-numerals/roman.rb	2015-09-10 03:27:28	2015-09-10 03:27:28	{"/ruby/roman-numerals/roman.rb":"class Fixnum\\n  def to_roman\\n    array = self.to_s.split(//)\\n    num_array = []\\n    array.each do |x|\\n      num_array.push(x.to_i)\\n    end\\n    roman_numeral=[]\\n    ones = num_array.pop\\n    if ones == 9\\n      roman_numeral.unshift('IX')\\n    elsif ones == 4\\n      roman_numeral.unshift('IV')\\n    else\\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\\n    end\\n\\n    if num_array.empty? == false\\n      tens = num_array.pop\\n      if tens == 9\\n        roman_numeral.unshift('XC')\\n      elsif tens == 4\\n        roman_numeral.unshift('XL')\\n      else\\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      hundreds = num_array.pop\\n      if hundreds == 9\\n        roman_numeral.unshift('CM')\\n      elsif hundreds == 4\\n        roman_numeral.unshift('CD')\\n      else\\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      thousands = num_array.pop\\n      roman_numeral.unshift('M'*thousands)\\n    end\\n\\n    roman_numeral.join\\n  end\\nend"}
270	41	7b01e2a77aa2c6778d23b585	superseded	python	point-mutations	class DNA:\n\tdef __init__(self, dna):\n\t\tself.dna = dna \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.dna:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.dna[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	1	191	point-mutations.py	2015-05-23 23:33:57	2015-05-23 23:33:57	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, dna):\\n\\t\\tself.dna = dna \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.dna:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.dna[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
271	41	ce165e6ee545feb9a7e1c4a6	done	python	point-mutations	class DNA:\n\tdef __init__(self, strand):\n\t\tself.strand = strand \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.strand:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.strand[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	2	191	point-mutations.py	2015-06-08 13:01:03	2015-06-08 13:01:03	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, strand):\\n\\t\\tself.strand = strand \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.strand:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.strand[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
272	41	483cca9fdddf643ee47659fe	done	ruby	roman-numerals	class Fixnum\n\n  def to_roman\n    i = self\n    s = ''\n    roman_mappings.each do |arabic, roman|\n      while i >= arabic\n        s << roman\n        i -= arabic\n      end\n    end\n    s\n  end\n\n  def roman_mappings\n    {\n      1000 => 'M',\n      900 => 'CM',\n      500 => 'D',\n      400 => 'CD',\n      100 => 'C',\n      90 => 'XC',\n      50 => 'L',\n      40 => 'XL',\n      10 => 'X',\n      9 => 'IX',\n      5 => 'V',\n      4 => 'IV',\n      1 => 'I',\n    }\n\n  end\n\nend	\N	\N	0	1	192	roman.rb	2015-06-24 21:02:32	2015-06-24 21:02:32	{"roman.rb":"class Fixnum\\n\\n  def to_roman\\n    i = self\\n    s = ''\\n    roman_mappings.each do |arabic, roman|\\n      while i \\u003e= arabic\\n        s \\u003c\\u003c roman\\n        i -= arabic\\n      end\\n    end\\n    s\\n  end\\n\\n  def roman_mappings\\n    {\\n      1000 =\\u003e 'M',\\n      900 =\\u003e 'CM',\\n      500 =\\u003e 'D',\\n      400 =\\u003e 'CD',\\n      100 =\\u003e 'C',\\n      90 =\\u003e 'XC',\\n      50 =\\u003e 'L',\\n      40 =\\u003e 'XL',\\n      10 =\\u003e 'X',\\n      9 =\\u003e 'IX',\\n      5 =\\u003e 'V',\\n      4 =\\u003e 'IV',\\n      1 =\\u003e 'I',\\n    }\\n\\n  end\\n\\nend"}
273	41	8df2791af62d0a519d8ae1e6	done	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\nopen System.Collections.Generic\r\n\r\ntype RobotName() = \r\n    static let usedNames = new List<String>()\r\n\r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let rec buildName () =\r\n        let candidate = \r\n            String.Concat [ randomLetter(); randomLetter(); \r\n                            randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n        if usedNames.Contains(candidate) then \r\n            buildName() \r\n        else \r\n            usedNames.Add(candidate)\r\n            candidate   \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	3	193	RobotName.fs	2015-05-28 15:09:11	2015-05-28 15:09:11	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\nopen System.Collections.Generic\\r\\n\\r\\ntype RobotName() = \\r\\n    static let usedNames = new List\\u003cString\\u003e()\\r\\n\\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let rec buildName () =\\r\\n        let candidate = \\r\\n            String.Concat [ randomLetter(); randomLetter(); \\r\\n                            randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n        if usedNames.Contains(candidate) then \\r\\n            buildName() \\r\\n        else \\r\\n            usedNames.Add(candidate)\\r\\n            candidate   \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
274	41	f4b64f389b08aaa264b2a026	superseded	fsharp	robot-name	﻿namespace RobotName\r\n\r\ntype RobotName() = \r\n    let random = System.Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\r\n    let randomDigit () = (random.Next() % 10).ToString()\r\n\r\n    let buildName () =\r\n        (seq {0..1} \r\n         |> Seq.map (fun _ -> randomLetter())\r\n         |> String.concat "")\r\n        +\r\n        (seq {0..2}\r\n         |> Seq.map (fun _ -> randomDigit())\r\n         |> String.concat "")\r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	1	193	RobotName.fs	2015-06-02 18:03:12	2015-06-02 18:03:12	{"RobotName.fs":"﻿namespace RobotName\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = System.Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\\r\\n    let randomDigit () = (random.Next() % 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        (seq {0..1} \\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomLetter())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n        +\\r\\n        (seq {0..2}\\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomDigit())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
275	41	45f23d75fb5c3db6d46aa6cb	superseded	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\n\r\ntype RobotName() = \r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let buildName () =\r\n        String.Concat [ randomLetter(); randomLetter(); \r\n                        randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	2	193	RobotName.fs	2015-07-10 22:25:29	2015-07-10 22:25:29	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        String.Concat [ randomLetter(); randomLetter(); \\r\\n                        randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
301	34	b32d94dc5416e69fc9e7e10e	pending	lua	hamming	local Hamming = {}\n\nfunction Hamming.compute(str1, str2)\n  local distance = 0\n\n  for i = 1, math.min(#str1, #str2) do\n    if str1:sub(i,i) ~= str2:sub(i,i) then\n      distance = distance + 1\n    end\n  end\n\n  return distance\nend\n\nreturn Hamming	\N	\N	0	1	211	hamming.lua	2015-02-08 17:22:43	2015-02-08 17:22:43	{"hamming.lua":"local Hamming = {}\\n\\nfunction Hamming.compute(str1, str2)\\n  local distance = 0\\n\\n  for i = 1, math.min(#str1, #str2) do\\n    if str1:sub(i,i) ~= str2:sub(i,i) then\\n      distance = distance + 1\\n    end\\n  end\\n\\n  return distance\\nend\\n\\nreturn Hamming"}
276	6	b5e8e31184a7b2881549cf8d	pending	ruby	kindergarten-garden	class Garden\n  attr_reader :plantings, :students\n\n  def initialize(diagram, students=default_class)\n    @plantings = parse_diagram(diagram)\n    @students = parse_students(students).sort\n  end\n\n  private\n\n  def parse_diagram(diagram)\n    diagram.split("\\n").map{ |row| row.chars }\n  end\n\n  def parse_students(students)\n    students.map { |s| s.downcase.to_sym }\n  end\n\n  def student_garden_locations\n    locations = {}\n    students.each_with_index do |student, i|\n      locations[student] = ((i * 2)..(i * 2 + 1))\n    end\n    locations\n  end\n\n  def method_missing(student)\n    my_locations = student_garden_locations[student]\n    my_plants = plantings.map { |row| row[my_locations] }\n    unabbreviate(my_plants)\n  end\n\n  def unabbreviate(plants)\n    plants.flatten.map { |plant| abbreviations[plant] }\n  end\n\n  def abbreviations\n    { "R" => :radishes,\n      "C" => :clover,\n      "G" => :grass,\n      "V" => :violets\n    }\n  end\n\n  def default_class\n    [ :alice, :bob, :charlie, :david,\n      :eve, :fred, :ginny, :harriet,\n      :ileana, :joseph, :kincaid, :larry]\n  end\n\nend	\N	\N	0	1	194	garden.rb	2015-09-16 13:56:04	2015-09-16 13:56:04	{"garden.rb":"class Garden\\n  attr_reader :plantings, :students\\n\\n  def initialize(diagram, students=default_class)\\n    @plantings = parse_diagram(diagram)\\n    @students = parse_students(students).sort\\n  end\\n\\n  private\\n\\n  def parse_diagram(diagram)\\n    diagram.split(\\"\\\\n\\").map{ |row| row.chars }\\n  end\\n\\n  def parse_students(students)\\n    students.map { |s| s.downcase.to_sym }\\n  end\\n\\n  def student_garden_locations\\n    locations = {}\\n    students.each_with_index do |student, i|\\n      locations[student] = ((i * 2)..(i * 2 + 1))\\n    end\\n    locations\\n  end\\n\\n  def method_missing(student)\\n    my_locations = student_garden_locations[student]\\n    my_plants = plantings.map { |row| row[my_locations] }\\n    unabbreviate(my_plants)\\n  end\\n\\n  def unabbreviate(plants)\\n    plants.flatten.map { |plant| abbreviations[plant] }\\n  end\\n\\n  def abbreviations\\n    { \\"R\\" =\\u003e :radishes,\\n      \\"C\\" =\\u003e :clover,\\n      \\"G\\" =\\u003e :grass,\\n      \\"V\\" =\\u003e :violets\\n    }\\n  end\\n\\n  def default_class\\n    [ :alice, :bob, :charlie, :david,\\n      :eve, :fred, :ginny, :harriet,\\n      :ileana, :joseph, :kincaid, :larry]\\n  end\\n\\nend"}
277	6	3d57b5aeae6b2b3f6f66dca0	pending	python	beer-song	def bottles(n):\n\n\tif n == 0:\n\t\treturn "no more bottles"\n\tif n == 1:\n\t\treturn "1 bottle"\n\treturn "%d bottles" % n\n\ndef verse(n):\n\tres =  "%s of beer on the wall, %s of beer.\\n" % (bottles(n).capitalize(), bottles(n))\n\tif n == 0:\n\t\tres += "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n\telif n == 1:\n\t\tres += "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n\telse:\n\t\tres += "Take one down and pass it around, %s of beer on the wall.\\n" % bottles(n-1)\n\treturn res\n\ndef song(hi, low = 0):\n\treturn ''.join(\n\t\tverse(n) + '\\n'\n\t\tfor n in xrange(hi, low - 1, -1)\n\t)	\N	\N	0	1	195	/python/beer-song/beer.py	2015-09-19 14:34:32	2015-09-19 14:34:32	{"/python/beer-song/beer.py":"def bottles(n):\\n\\n\\tif n == 0:\\n\\t\\treturn \\"no more bottles\\"\\n\\tif n == 1:\\n\\t\\treturn \\"1 bottle\\"\\n\\treturn \\"%d bottles\\" % n\\n\\ndef verse(n):\\n\\tres =  \\"%s of beer on the wall, %s of beer.\\\\n\\" % (bottles(n).capitalize(), bottles(n))\\n\\tif n == 0:\\n\\t\\tres += \\"Go to the store and buy some more, 99 bottles of beer on the wall.\\\\n\\"\\n\\telif n == 1:\\n\\t\\tres += \\"Take it down and pass it around, no more bottles of beer on the wall.\\\\n\\"\\n\\telse:\\n\\t\\tres += \\"Take one down and pass it around, %s of beer on the wall.\\\\n\\" % bottles(n-1)\\n\\treturn res\\n\\ndef song(hi, low = 0):\\n\\treturn ''.join(\\n\\t\\tverse(n) + '\\\\n'\\n\\t\\tfor n in xrange(hi, low - 1, -1)\\n\\t)"}
278	6	bdb2b55f4530f8ae2dbe0e1a	done	scala	word-count	class Phrase(phrase: String) {\n  val _matcher = """[\\w']+""".r\n  val normalized = phrase.toLowerCase\n  val words = _matcher.findAllIn(normalized).toList\n\n  def wordCount = words.groupBy(e => e).map(kv => kv._1 -> kv._2.length)\n}	\N	\N	0	1	196	word_count.scala	2015-09-19 03:15:02	2015-09-19 03:15:02	{"word_count.scala":"class Phrase(phrase: String) {\\n  val _matcher = \\"\\"\\"[\\\\w']+\\"\\"\\".r\\n  val normalized = phrase.toLowerCase\\n  val words = _matcher.findAllIn(normalized).toList\\n\\n  def wordCount = words.groupBy(e =\\u003e e).map(kv =\\u003e kv._1 -\\u003e kv._2.length)\\n}"}
279	6	742ad8c7494d542eeb0adf88	pending	python	bob	class Bob:\n    def hey(self, s):\n        if not s or s.isspace():\n            return 'Fine. Be that way!'\n        elif s.isupper():\n            return 'Woah, chill out!'\n        elif s[-1] == '?':\n            return 'Sure.'\n        else:\n            return 'Whatever.'	\N	\N	0	1	197	bob.py	2015-09-19 15:50:18	2015-09-19 15:50:18	{"bob.py":"class Bob:\\n    def hey(self, s):\\n        if not s or s.isspace():\\n            return 'Fine. Be that way!'\\n        elif s.isupper():\\n            return 'Woah, chill out!'\\n        elif s[-1] == '?':\\n            return 'Sure.'\\n        else:\\n            return 'Whatever.'"}
280	34	28333f31eeed871dfaeb1c45	done	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nmy @words = 'a'..'z';\n\nsub new{\n\tmy ($class, $key) = @_;\n\tdie "ArgumentError: $key" if defined $key and ($key =~ /[^a-z]/ or not length $key);\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	2	198	Cipher.pm	2015-05-09 21:39:35	2015-05-09 21:39:35	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nmy @words = 'a'..'z';\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\tdie \\"ArgumentError: $key\\" if defined $key and ($key =~ /[^a-z]/ or not length $key);\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
281	34	d76a74f9339b5061700f6810	superseded	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nsub new{\n\tmy ($class, $key) = @_;\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	1	198	Cipher.pm	2015-08-08 06:17:21	2015-08-08 06:17:21	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
282	34	0cd0d0231d5ee9f60e0e02ae	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char\nimport Data.List       (foldl')\nimport Data.Map hiding (filter,foldl',null)\n\nwordCount :: String -> Map String Integer\nwordCount\n  = foldl' tally empty\n  . filter (not . null)\n  . words'\n  . fmap toLower\n  where\n    tally m x = insertWith (+) x 1 m\n    words' [] = []\n    words' xs = y : words' ys\n      where\n        (y,ys) = span isAlphaNum\n               $ dropWhile (not . isAlphaNum) xs	\N	\N	0	1	199	WordCount.hs	2015-02-23 13:16:57	2015-02-23 13:16:57	{"WordCount.hs":"module WordCount (wordCount) where\\n\\nimport Data.Char\\nimport Data.List       (foldl')\\nimport Data.Map hiding (filter,foldl',null)\\n\\nwordCount :: String -\\u003e Map String Integer\\nwordCount\\n  = foldl' tally empty\\n  . filter (not . null)\\n  . words'\\n  . fmap toLower\\n  where\\n    tally m x = insertWith (+) x 1 m\\n    words' [] = []\\n    words' xs = y : words' ys\\n      where\\n        (y,ys) = span isAlphaNum\\n               $ dropWhile (not . isAlphaNum) xs"}
283	34	ded410073661dedca73c5162	done	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char       (isAlphaNum,toLower)\nimport Data.List       (foldl')\nimport Data.List.Split (wordsBy)\nimport Data.Map.Strict (Map,empty,insertWith)\n\nwordCount :: String -> Map String Integer\nwordCount\n  = foldl' tally empty\n  . wordsBy (not . isAlphaNum)\n  . fmap toLower\n  where\n    tally m x = insertWith (+) x 1 m	\N	\N	0	2	199	WordCount.hs	2015-04-25 06:26:14	2015-04-25 06:26:14	{"WordCount.hs":"module WordCount (wordCount) where\\n\\nimport Data.Char       (isAlphaNum,toLower)\\nimport Data.List       (foldl')\\nimport Data.List.Split (wordsBy)\\nimport Data.Map.Strict (Map,empty,insertWith)\\n\\nwordCount :: String -\\u003e Map String Integer\\nwordCount\\n  = foldl' tally empty\\n  . wordsBy (not . isAlphaNum)\\n  . fmap toLower\\n  where\\n    tally m x = insertWith (+) x 1 m"}
284	34	090e98b072f7313d5309c70c	pending	python	beer-song	def bottles(n):\n\n\tif n == 0:\n\t\treturn "no more bottles"\n\tif n == 1:\n\t\treturn "1 bottle"\n\treturn "%d bottles" % n\n\ndef verse(n):\n\tres =  "%s of beer on the wall, %s of beer.\\n" % (bottles(n).capitalize(), bottles(n))\n\tif n == 0:\n\t\tres += "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n\telif n == 1:\n\t\tres += "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n\telse:\n\t\tres += "Take one down and pass it around, %s of beer on the wall.\\n" % bottles(n-1)\n\treturn res\n\ndef song(hi, low = 0):\n\treturn ''.join(\n\t\tverse(n) + '\\n'\n\t\tfor n in xrange(hi, low - 1, -1)\n\t)	\N	\N	0	1	200	/python/beer-song/beer.py	2015-04-02 17:58:35	2015-04-02 17:58:35	{"/python/beer-song/beer.py":"def bottles(n):\\n\\n\\tif n == 0:\\n\\t\\treturn \\"no more bottles\\"\\n\\tif n == 1:\\n\\t\\treturn \\"1 bottle\\"\\n\\treturn \\"%d bottles\\" % n\\n\\ndef verse(n):\\n\\tres =  \\"%s of beer on the wall, %s of beer.\\\\n\\" % (bottles(n).capitalize(), bottles(n))\\n\\tif n == 0:\\n\\t\\tres += \\"Go to the store and buy some more, 99 bottles of beer on the wall.\\\\n\\"\\n\\telif n == 1:\\n\\t\\tres += \\"Take it down and pass it around, no more bottles of beer on the wall.\\\\n\\"\\n\\telse:\\n\\t\\tres += \\"Take one down and pass it around, %s of beer on the wall.\\\\n\\" % bottles(n-1)\\n\\treturn res\\n\\ndef song(hi, low = 0):\\n\\treturn ''.join(\\n\\t\\tverse(n) + '\\\\n'\\n\\t\\tfor n in xrange(hi, low - 1, -1)\\n\\t)"}
285	34	91c08f0c525836f31dc8511e	pending	ruby	roman-numerals	class Fixnum\n  def to_roman\n    array = self.to_s.split(//)\n    num_array = []\n    array.each do |x|\n      num_array.push(x.to_i)\n    end\n    roman_numeral=[]\n    ones = num_array.pop\n    if ones == 9\n      roman_numeral.unshift('IX')\n    elsif ones == 4\n      roman_numeral.unshift('IV')\n    else\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\n    end\n\n    if num_array.empty? == false\n      tens = num_array.pop\n      if tens == 9\n        roman_numeral.unshift('XC')\n      elsif tens == 4\n        roman_numeral.unshift('XL')\n      else\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\n      end\n    end\n\n    if num_array.empty? == false\n      hundreds = num_array.pop\n      if hundreds == 9\n        roman_numeral.unshift('CM')\n      elsif hundreds == 4\n        roman_numeral.unshift('CD')\n      else\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\n      end\n    end\n\n    if num_array.empty? == false\n      thousands = num_array.pop\n      roman_numeral.unshift('M'*thousands)\n    end\n\n    roman_numeral.join\n  end\nend	\N	\N	0	1	201	/ruby/roman-numerals/roman.rb	2015-06-05 22:37:00	2015-06-05 22:37:00	{"/ruby/roman-numerals/roman.rb":"class Fixnum\\n  def to_roman\\n    array = self.to_s.split(//)\\n    num_array = []\\n    array.each do |x|\\n      num_array.push(x.to_i)\\n    end\\n    roman_numeral=[]\\n    ones = num_array.pop\\n    if ones == 9\\n      roman_numeral.unshift('IX')\\n    elsif ones == 4\\n      roman_numeral.unshift('IV')\\n    else\\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\\n    end\\n\\n    if num_array.empty? == false\\n      tens = num_array.pop\\n      if tens == 9\\n        roman_numeral.unshift('XC')\\n      elsif tens == 4\\n        roman_numeral.unshift('XL')\\n      else\\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      hundreds = num_array.pop\\n      if hundreds == 9\\n        roman_numeral.unshift('CM')\\n      elsif hundreds == 4\\n        roman_numeral.unshift('CD')\\n      else\\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      thousands = num_array.pop\\n      roman_numeral.unshift('M'*thousands)\\n    end\\n\\n    roman_numeral.join\\n  end\\nend"}
286	34	a7807e7eb8150d28f15cbe0b	pending	ruby	hamming	class Hamming\n\n  def self.compute firstStrand, secondStrand\n    size = [firstStrand.size, secondStrand.size].min\n    distance = 0\n    (0...size).each {|i|\n      distance = distance + 1 if firstStrand[i] != secondStrand[i]\n    }\n    distance\n  end\n\nend\n\nputs Hamming.compute('AA', 'ABA')	\N	\N	0	1	202	hamming.rb	2015-02-05 07:45:29	2015-02-05 07:45:29	{"hamming.rb":"class Hamming\\n\\n  def self.compute firstStrand, secondStrand\\n    size = [firstStrand.size, secondStrand.size].min\\n    distance = 0\\n    (0...size).each {|i|\\n      distance = distance + 1 if firstStrand[i] != secondStrand[i]\\n    }\\n    distance\\n  end\\n\\nend\\n\\nputs Hamming.compute('AA', 'ABA')"}
287	34	05b6a6bb265b4ede6e4ab4f7	done	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\nopen System.Collections.Generic\r\n\r\ntype RobotName() = \r\n    static let usedNames = new List<String>()\r\n\r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let rec buildName () =\r\n        let candidate = \r\n            String.Concat [ randomLetter(); randomLetter(); \r\n                            randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n        if usedNames.Contains(candidate) then \r\n            buildName() \r\n        else \r\n            usedNames.Add(candidate)\r\n            candidate   \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	3	203	RobotName.fs	2015-02-27 09:12:29	2015-02-27 09:12:29	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\nopen System.Collections.Generic\\r\\n\\r\\ntype RobotName() = \\r\\n    static let usedNames = new List\\u003cString\\u003e()\\r\\n\\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let rec buildName () =\\r\\n        let candidate = \\r\\n            String.Concat [ randomLetter(); randomLetter(); \\r\\n                            randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n        if usedNames.Contains(candidate) then \\r\\n            buildName() \\r\\n        else \\r\\n            usedNames.Add(candidate)\\r\\n            candidate   \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
288	34	22a65b26f4ec98d04a4697b1	superseded	fsharp	robot-name	﻿namespace RobotName\r\n\r\ntype RobotName() = \r\n    let random = System.Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\r\n    let randomDigit () = (random.Next() % 10).ToString()\r\n\r\n    let buildName () =\r\n        (seq {0..1} \r\n         |> Seq.map (fun _ -> randomLetter())\r\n         |> String.concat "")\r\n        +\r\n        (seq {0..2}\r\n         |> Seq.map (fun _ -> randomDigit())\r\n         |> String.concat "")\r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	1	203	RobotName.fs	2015-03-04 21:52:20	2015-03-04 21:52:20	{"RobotName.fs":"﻿namespace RobotName\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = System.Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\\r\\n    let randomDigit () = (random.Next() % 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        (seq {0..1} \\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomLetter())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n        +\\r\\n        (seq {0..2}\\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomDigit())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
289	34	4b582b124714a64648030984	superseded	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\n\r\ntype RobotName() = \r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let buildName () =\r\n        String.Concat [ randomLetter(); randomLetter(); \r\n                        randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	2	203	RobotName.fs	2015-05-28 10:29:57	2015-05-28 10:29:57	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        String.Concat [ randomLetter(); randomLetter(); \\r\\n                        randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
290	34	c05e3560b576924ebae728d6	superseded	python	anagram	from collections import Counter\n\n\ndef detect_anagrams(source, anagrams):\n    # since anagrams in this case are case-insensitive convert all to\n    # lowercase\n    l_source = source.lower()\n    source_count = Counter(l_source)\n    res = []\n\n    for pos_anagram in anagrams:\n        if Counter(pos_anagram.lower()) == source_count and pos_anagram.lower() != l_source:\n            res.append(pos_anagram)\n\n    return res	\N	\N	0	1	204	anagram.py	2015-04-09 03:13:06	2015-04-09 03:13:06	{"anagram.py":"from collections import Counter\\n\\n\\ndef detect_anagrams(source, anagrams):\\n    # since anagrams in this case are case-insensitive convert all to\\n    # lowercase\\n    l_source = source.lower()\\n    source_count = Counter(l_source)\\n    res = []\\n\\n    for pos_anagram in anagrams:\\n        if Counter(pos_anagram.lower()) == source_count and pos_anagram.lower() != l_source:\\n            res.append(pos_anagram)\\n\\n    return res"}
291	34	8bc0cfeb913d7b5a2a19671a	pending	python	anagram	from collections import Counter\n\n\ndef detect_anagrams(source, anagrams):\n    # since anagrams in this case are case-insensitive convert all to\n    # lowercase\n    l_source = source.lower()\n    source_count = Counter(l_source)\n    # list comp instead of loop - less readable but not much .\n    return [anagram for anagram in anagrams if Counter(anagram.lower()) == source_count and anagram.lower() != l_source]	\N	\N	0	3	204	anagram.py	2015-07-10 00:53:19	2015-07-10 00:53:19	{"anagram.py":"from collections import Counter\\n\\n\\ndef detect_anagrams(source, anagrams):\\n    # since anagrams in this case are case-insensitive convert all to\\n    # lowercase\\n    l_source = source.lower()\\n    source_count = Counter(l_source)\\n    # list comp instead of loop - less readable but not much .\\n    return [anagram for anagram in anagrams if Counter(anagram.lower()) == source_count and anagram.lower() != l_source]"}
292	34	d2bdcb28f5c16e53980b2705	superseded	python	anagram	from collections import Counter\n\n\ndef detect_anagrams(source, anagrams):\n    # since anagrams in this case are case-insensitive convert all to\n    # lowercase\n    l_source = source.lower()\n    source_count = Counter(l_source)\n    res = []\n\n    for pos_anagram in anagrams:\n        l_pos_anagram = pos_anagram.lower()\n        if Counter(l_pos_anagram) == source_count and l_pos_anagram != l_source:\n            res.append(pos_anagram)\n\n    return res	\N	\N	0	2	204	anagram.py	2015-07-24 17:53:49	2015-07-24 17:53:49	{"anagram.py":"from collections import Counter\\n\\n\\ndef detect_anagrams(source, anagrams):\\n    # since anagrams in this case are case-insensitive convert all to\\n    # lowercase\\n    l_source = source.lower()\\n    source_count = Counter(l_source)\\n    res = []\\n\\n    for pos_anagram in anagrams:\\n        l_pos_anagram = pos_anagram.lower()\\n        if Counter(l_pos_anagram) == source_count and l_pos_anagram != l_source:\\n            res.append(pos_anagram)\\n\\n    return res"}
293	34	e9cc665c3c391b42cfcebd59	pending	javascript	hamming	var Hamming = {\r\n  compute: function(Strand1, Strand2) {\r\n    var NumberDifferent = 0;\r\n//Do a length check first because everything else relies on that. \r\nif (Strand1.length != Strand2.length){\r\n  throw 'DNA strands must be of equal length.'\r\n};//end if\r\nfor (var i = 0;i<Strand1.length;i++){//does a loop for each character input. \r\nif (Strand1[i] != Strand2[i]){ //if the chars aren't the same add to the differnce counter. \r\n\tNumberDifferent ++\r\n};//end if\r\n};//end for\r\n return NumberDifferent; //return the # difference\r\n   }//end compute\r\n};//end hamming\r\n\r\nmodule.exports = Hamming;	\N	\N	0	1	205	\\javascript\\hamming\\hamming.js	2015-05-09 12:24:44	2015-05-09 12:24:44	{"\\\\javascript\\\\hamming\\\\hamming.js":"var Hamming = {\\r\\n  compute: function(Strand1, Strand2) {\\r\\n    var NumberDifferent = 0;\\r\\n//Do a length check first because everything else relies on that. \\r\\nif (Strand1.length != Strand2.length){\\r\\n  throw 'DNA strands must be of equal length.'\\r\\n};//end if\\r\\nfor (var i = 0;i\\u003cStrand1.length;i++){//does a loop for each character input. \\r\\nif (Strand1[i] != Strand2[i]){ //if the chars aren't the same add to the differnce counter. \\r\\n\\tNumberDifferent ++\\r\\n};//end if\\r\\n};//end for\\r\\n return NumberDifferent; //return the # difference\\r\\n   }//end compute\\r\\n};//end hamming\\r\\n\\r\\nmodule.exports = Hamming;"}
320	18	dc4f10254eeebe3a16bc1f2e	pending	go	leap	package leap\n\n\n//Returns true if the year is a leap year and false otherwise. \n//Takes the year as an int.\nfunc IsLeapYear(year int) bool {\n\t// Is leap if evenly divisible by 4 and not by 100\n\tif year%4 == 0 && year%100 != 0 {\n\t\treturn true\n\t// Also leap if divisible by 400\n\t} else if year%400 == 0 {\n\t\treturn true\n\t}\n\t// All others are not leap\n\treturn false\n}	\N	\N	0	2	224	leap.go	2015-09-03 22:44:53	2015-09-03 22:44:53	{"leap.go":"package leap\\n\\n\\n//Returns true if the year is a leap year and false otherwise. \\n//Takes the year as an int.\\nfunc IsLeapYear(year int) bool {\\n\\t// Is leap if evenly divisible by 4 and not by 100\\n\\tif year%4 == 0 \\u0026\\u0026 year%100 != 0 {\\n\\t\\treturn true\\n\\t// Also leap if divisible by 400\\n\\t} else if year%400 == 0 {\\n\\t\\treturn true\\n\\t}\\n\\t// All others are not leap\\n\\treturn false\\n}"}
294	34	2a497a7a4102c8047b7d1b72	pending	clojure	robot-name	(ns robot-name)\n\n(def characters "ABCDEFGHIJKLMNOPQRSTUVWXYZ")\n\n(def numbers "1234567890")\n\n(defn- rand-n-source [n source]\n  (->> (fn [] (rand-nth source))\n       (repeatedly)\n       (take n)\n       (apply str)))\n\n(defn- generate-id [] \n  (str (rand-n-source 2 characters)\n       (rand-n-source 4 numbers)))\n\n(defn robot []\n  (atom {:name ""}))\n\n(defn robot-name [robot]\n  (if (empty? @robot)\n    (reset! robot (generate-id))\n    @robot))\n\n(defn reset-name [robot]\n  (reset! robot ""))	\N	\N	0	1	206	/clojure/robot-name/robot_name.clj	2015-02-06 22:10:38	2015-02-06 22:10:38	{"/clojure/robot-name/robot_name.clj":"(ns robot-name)\\n\\n(def characters \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\")\\n\\n(def numbers \\"1234567890\\")\\n\\n(defn- rand-n-source [n source]\\n  (-\\u003e\\u003e (fn [] (rand-nth source))\\n       (repeatedly)\\n       (take n)\\n       (apply str)))\\n\\n(defn- generate-id [] \\n  (str (rand-n-source 2 characters)\\n       (rand-n-source 4 numbers)))\\n\\n(defn robot []\\n  (atom {:name \\"\\"}))\\n\\n(defn robot-name [robot]\\n  (if (empty? @robot)\\n    (reset! robot (generate-id))\\n    @robot))\\n\\n(defn reset-name [robot]\\n  (reset! robot \\"\\"))"}
295	34	14b9c0fa41472d2ba214f222	superseded	python	series	class Series(object):\n\n    def __init__(self, input_string):\n        self.num = input_string\n        self.length = len(self.num)\n        try:\n            self.lst = [int(c) for c in self.num]\n        except:\n            self.lst = []\n            \n    def slices(self, n):\n\n        if n > self.length or n <= 0:\n            raise ValueError("Invalid slice length for this series: %d" % n)\n\n        ret = []\n        for i in range(self.length - n + 1):\n            each_slice = self.lst[i:i+n]\n            ret.append(each_slice)\n\n        return ret	\N	\N	0	1	207	series.py	2015-03-05 00:22:52	2015-03-05 00:22:52	{"series.py":"class Series(object):\\n\\n    def __init__(self, input_string):\\n        self.num = input_string\\n        self.length = len(self.num)\\n        try:\\n            self.lst = [int(c) for c in self.num]\\n        except:\\n            self.lst = []\\n            \\n    def slices(self, n):\\n\\n        if n \\u003e self.length or n \\u003c= 0:\\n            raise ValueError(\\"Invalid slice length for this series: %d\\" % n)\\n\\n        ret = []\\n        for i in range(self.length - n + 1):\\n            each_slice = self.lst[i:i+n]\\n            ret.append(each_slice)\\n\\n        return ret"}
296	34	c2cd694874c71c36c420b5ca	pending	python	series	class Series(object):\n\n    def __init__(self, input_string):\n        self.length = len(input_string)\n        try:\n            self.lst = [int(c) for c in input_string]\n        except:\n            raise ValueError("Please input a string that only contains numbers")\n\n    def slices(self, n):\n\n        if n > self.length or n <= 0:\n            raise ValueError("Invalid slice length for this series: %d" % n)\n\n        return [ self.lst[i:i+n] for i in range(self.length - n + 1) ]	\N	\N	0	2	207	series.py	2015-04-27 11:19:06	2015-04-27 11:19:06	{"series.py":"class Series(object):\\n\\n    def __init__(self, input_string):\\n        self.length = len(input_string)\\n        try:\\n            self.lst = [int(c) for c in input_string]\\n        except:\\n            raise ValueError(\\"Please input a string that only contains numbers\\")\\n\\n    def slices(self, n):\\n\\n        if n \\u003e self.length or n \\u003c= 0:\\n            raise ValueError(\\"Invalid slice length for this series: %d\\" % n)\\n\\n        return [ self.lst[i:i+n] for i in range(self.length - n + 1) ]"}
297	34	db032a5123babedf67d6017d	pending	ruby	bob	class Bob\n  def hey(phrase)\n    @phrase = phrase\n    if phrase_is_empty?\n      'Fine. Be that way!'\n    elsif phrase_is_yelling?\n      'Woah, chill out!'\n    elsif phrase_is_questioning?\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\n\n  private\n  def phrase_is_empty?\n    @phrase.strip.empty?\n  end\n\n  def phrase_is_yelling?\n    @phrase == @phrase.upcase && @phrase.scan(/[a-zA-Z]/).any?\n  end\n\n  def phrase_is_questioning?\n    @phrase[-1,1] == '?'\n  end\nend	\N	\N	0	2	208	bob.rb	2015-04-02 08:44:05	2015-04-02 08:44:05	{"bob.rb":"class Bob\\n  def hey(phrase)\\n    @phrase = phrase\\n    if phrase_is_empty?\\n      'Fine. Be that way!'\\n    elsif phrase_is_yelling?\\n      'Woah, chill out!'\\n    elsif phrase_is_questioning?\\n      'Sure.'\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\n\\n  private\\n  def phrase_is_empty?\\n    @phrase.strip.empty?\\n  end\\n\\n  def phrase_is_yelling?\\n    @phrase == @phrase.upcase \\u0026\\u0026 @phrase.scan(/[a-zA-Z]/).any?\\n  end\\n\\n  def phrase_is_questioning?\\n    @phrase[-1,1] == '?'\\n  end\\nend"}
298	34	a25d3a4e6038ce9a2618c9db	superseded	ruby	bob	class Bob\n  def hey(phrase)\n    if phrase.strip.empty?\n      'Fine. Be that way!'\n    elsif phrase == phrase.upcase && phrase.scan(/[a-zA-Z]/).any?\n      'Woah, chill out!'\n    elsif phrase[-1,1] == '?'\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	1	208	bob.rb	2015-04-06 05:26:12	2015-04-06 05:26:12	{"bob.rb":"class Bob\\n  def hey(phrase)\\n    if phrase.strip.empty?\\n      'Fine. Be that way!'\\n    elsif phrase == phrase.upcase \\u0026\\u0026 phrase.scan(/[a-zA-Z]/).any?\\n      'Woah, chill out!'\\n    elsif phrase[-1,1] == '?'\\n      'Sure.'\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\nend"}
299	34	cb8b806f3113151e0bc3b214	pending	ruby	raindrops	class Raindrops\r\n\r\n  TRANSLATE = {\r\n  \t3 => 'Pling',\r\n    5 => 'Plang',\r\n    7 => 'Plong'\r\n  }\r\n\r\n  def self.convert(number)\r\n    message = ''\r\n\r\n    TRANSLATE.each do |(numb, phrase)|\r\n      message << phrase if number % numb == 0\r\n    end\r\n\r\n    if message.empty? then number.to_s else message end\r\n    \r\n  end\r\nend	\N	\N	0	1	209	raindrops.rb	2015-02-18 14:48:14	2015-02-18 14:48:14	{"raindrops.rb":"class Raindrops\\r\\n\\r\\n  TRANSLATE = {\\r\\n  \\t3 =\\u003e 'Pling',\\r\\n    5 =\\u003e 'Plang',\\r\\n    7 =\\u003e 'Plong'\\r\\n  }\\r\\n\\r\\n  def self.convert(number)\\r\\n    message = ''\\r\\n\\r\\n    TRANSLATE.each do |(numb, phrase)|\\r\\n      message \\u003c\\u003c phrase if number % numb == 0\\r\\n    end\\r\\n\\r\\n    if message.empty? then number.to_s else message end\\r\\n    \\r\\n  end\\r\\nend"}
300	34	ee9075b6460c82b48db6d693	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	210	/python/wordy/wordy.py	2015-04-21 03:54:13	2015-04-21 03:54:13	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
302	34	8150ae8f55d3283570ed07b6	done	javascript	crypto-square	var CryptoSquare = function CryptoSquare(input){ \n\t\t\n\t\tthis.normalizePlaintext = function normalizePlaintext(){\n\t\t\treturn input.toLowerCase().replace(/[^\\w\\d]/g,"");\n\t\t}\n\t\t\n\t\tthis.size = function size(){\n\t\t    return Math.ceil(Math.sqrt(this.normalized.length));\n\t\t}\n\n\t\tthis.plaintextSegments = function plaintextSegments(){\n\t\t\treturn this.separate(this.normalized).split(" ");\n\t\t}\n\n\t\tthis.ciphertext = function ciphertext(){\n\t\t\tvar result = "";\n\t\t\tvar plaintext = this.plaintextSegments();\n\t\t\tvar rows=this.size();\n\t\t\tfor(var i=0;i<rows;i++){\n\t\t\t\tfor(var chunk in plaintext){\n\t\t\t\t\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\t\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\treturn result;\t\n\t\t}\n\n\t\tthis.normalizeCiphertext = function normalizeCiphertext(){\n\t\t\treturn this.separate(this.ciphertext());\t\n\t\t}\n\n\t\tthis.separate = function(text){\n\t\t\tvar expression = new RegExp('.{1,'+this.size()+'}',"g")\n\t\t\treturn text.match(expression).join(" ");\t\n\t\t}\n\n\t\tthis.normalized = this.normalizePlaintext(input);\n}\nmodule.exports = CryptoSquare;	\N	\N	0	2	212	crypto-square.js	2015-03-23 15:08:47	2015-03-23 15:08:47	{"crypto-square.js":"var CryptoSquare = function CryptoSquare(input){ \\n\\t\\t\\n\\t\\tthis.normalizePlaintext = function normalizePlaintext(){\\n\\t\\t\\treturn input.toLowerCase().replace(/[^\\\\w\\\\d]/g,\\"\\");\\n\\t\\t}\\n\\t\\t\\n\\t\\tthis.size = function size(){\\n\\t\\t    return Math.ceil(Math.sqrt(this.normalized.length));\\n\\t\\t}\\n\\n\\t\\tthis.plaintextSegments = function plaintextSegments(){\\n\\t\\t\\treturn this.separate(this.normalized).split(\\" \\");\\n\\t\\t}\\n\\n\\t\\tthis.ciphertext = function ciphertext(){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar plaintext = this.plaintextSegments();\\n\\t\\t\\tvar rows=this.size();\\n\\t\\t\\tfor(var i=0;i\\u003crows;i++){\\n\\t\\t\\t\\tfor(var chunk in plaintext){\\n\\t\\t\\t\\t\\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\t\\n\\t\\t\\treturn result;\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalizeCiphertext = function normalizeCiphertext(){\\n\\t\\t\\treturn this.separate(this.ciphertext());\\t\\n\\t\\t}\\n\\n\\t\\tthis.separate = function(text){\\n\\t\\t\\tvar expression = new RegExp('.{1,'+this.size()+'}',\\"g\\")\\n\\t\\t\\treturn text.match(expression).join(\\" \\");\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalized = this.normalizePlaintext(input);\\n}\\nmodule.exports = CryptoSquare;"}
303	34	0e4168b2ec57ad79c7bafa07	superseded	javascript	crypto-square	var CryptoSquare = function CryptoSquare(input){ \n\t\t\n\t\tthis.normalizePlaintext = function normalizePlaintext(){\n\t\t\treturn input.toLowerCase().replace(/[^\\w\\d]/g,"");\n\t\t}\n\t\t\n\t\tthis.size = function size(){\n\t\t    return Math.ceil(Math.sqrt(this.normalized.length));\n\t\t}\n\n\t\tthis.plaintextSegments = function plaintextSegments(){\n\t\t\treturn this.separate(this.normalized).split(" ");\n\t\t}\n\n\t\tthis.ciphertext = function ciphertext(){\n\t\t\tvar result = "";\n\t\t\tvar plaintext = this.plaintextSegments();\n\t\t\tvar rows=this.size();\n\t\t\tfor(var i=0;i<rows;i++){\n\t\t\t\tfor(var chunk in plaintext){\n\t\t\t\t\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\t\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\treturn result;\t\n\t\t}\n\n\t\tthis.normalizeCiphertext = function normalizeCiphertext(){\n\t\t\treturn this.separate(this.ciphertext());\t\n\t\t}\n\n\t\tthis.separate = function(text){\n\t\t\tvar result = "";\n\t\t\tvar rows = this.size();\n\t\t\ttext.split("").map(function map(letter,index){\n\t\t\t\tresult+=letter;\n\t\t\t\tif((index+1)%rows===0)result+=" ";\n\t\t\t});\n\t\t\treturn result.trim();\n\t\t}\n\n\t\tthis.normalized = this.normalizePlaintext(input);\n}\nmodule.exports = CryptoSquare;	\N	\N	0	1	212	crypto-square.js	2015-07-14 22:32:58	2015-07-14 22:32:58	{"crypto-square.js":"var CryptoSquare = function CryptoSquare(input){ \\n\\t\\t\\n\\t\\tthis.normalizePlaintext = function normalizePlaintext(){\\n\\t\\t\\treturn input.toLowerCase().replace(/[^\\\\w\\\\d]/g,\\"\\");\\n\\t\\t}\\n\\t\\t\\n\\t\\tthis.size = function size(){\\n\\t\\t    return Math.ceil(Math.sqrt(this.normalized.length));\\n\\t\\t}\\n\\n\\t\\tthis.plaintextSegments = function plaintextSegments(){\\n\\t\\t\\treturn this.separate(this.normalized).split(\\" \\");\\n\\t\\t}\\n\\n\\t\\tthis.ciphertext = function ciphertext(){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar plaintext = this.plaintextSegments();\\n\\t\\t\\tvar rows=this.size();\\n\\t\\t\\tfor(var i=0;i\\u003crows;i++){\\n\\t\\t\\t\\tfor(var chunk in plaintext){\\n\\t\\t\\t\\t\\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\t\\n\\t\\t\\treturn result;\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalizeCiphertext = function normalizeCiphertext(){\\n\\t\\t\\treturn this.separate(this.ciphertext());\\t\\n\\t\\t}\\n\\n\\t\\tthis.separate = function(text){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar rows = this.size();\\n\\t\\t\\ttext.split(\\"\\").map(function map(letter,index){\\n\\t\\t\\t\\tresult+=letter;\\n\\t\\t\\t\\tif((index+1)%rows===0)result+=\\" \\";\\n\\t\\t\\t});\\n\\t\\t\\treturn result.trim();\\n\\t\\t}\\n\\n\\t\\tthis.normalized = this.normalizePlaintext(input);\\n}\\nmodule.exports = CryptoSquare;"}
304	34	09e1ed006f146ebb2d749d59	pending	ruby	protein-translation	class Translation\n  PROTEINS = {\n    "Methionine"    => %w(AUG),\n    "Leucine"       => %w(UUA UUG),\n    "Serine"        => %w(UCU UCC UCA UCG),\n    "Cystine"       => %w(UGU UGC),\n    "Tyrosine"      => %w(UAU UAC),\n    "Tryptophan"    => %w(UGG),\n    "Phenylalanine" => %w(UUU UUC),\n    "STOP"          => %w(UAA UAG UGA),\n  }\n\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\n    Array(codons).each {|codon| hash[codon] = protein }\n  end\n\n  class << self\n    def of_codon(str)\n      CODONS.fetch(str){ raise InvalidCodonError }\n    end\n\n    def of_rna(str)\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\n        of_codon(triplet).tap do |protein|\n          return result if protein == "STOP"\n          result << protein\n        end\n      end\n    end\n  end\nend\n\nclass InvalidCodonError < ArgumentError\nend	\N	\N	0	1	213	translation.rb	2015-04-23 12:21:35	2015-04-23 12:21:35	{"translation.rb":"class Translation\\n  PROTEINS = {\\n    \\"Methionine\\"    =\\u003e %w(AUG),\\n    \\"Leucine\\"       =\\u003e %w(UUA UUG),\\n    \\"Serine\\"        =\\u003e %w(UCU UCC UCA UCG),\\n    \\"Cystine\\"       =\\u003e %w(UGU UGC),\\n    \\"Tyrosine\\"      =\\u003e %w(UAU UAC),\\n    \\"Tryptophan\\"    =\\u003e %w(UGG),\\n    \\"Phenylalanine\\" =\\u003e %w(UUU UUC),\\n    \\"STOP\\"          =\\u003e %w(UAA UAG UGA),\\n  }\\n\\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\\n    Array(codons).each {|codon| hash[codon] = protein }\\n  end\\n\\n  class \\u003c\\u003c self\\n    def of_codon(str)\\n      CODONS.fetch(str){ raise InvalidCodonError }\\n    end\\n\\n    def of_rna(str)\\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\\n        of_codon(triplet).tap do |protein|\\n          return result if protein == \\"STOP\\"\\n          result \\u003c\\u003c protein\\n        end\\n      end\\n    end\\n  end\\nend\\n\\nclass InvalidCodonError \\u003c ArgumentError\\nend"}
305	34	defe1f2984b60e3ad219fd6a	superseded	go	leap	// Package leap exports GetValidYear which returns a valid year or zero,\r\n// and IsLeapYear which returns true if a validated year is a leap year.\r\npackage leap\r\n\r\nimport (\r\n\t"bufio"\r\n\t"fmt"\r\n\t"math"\r\n\t"os"\r\n\t"strconv"\r\n)\r\n\r\nconst TestVersion = 1\r\n\r\n// GetValidYear prompts the user to enter a year from 1583 to 9999.\r\n// Returns validated year or 0 which indicates an error\r\n// Non-zero return values may be safely passed to IsLeapYear\r\nfunc GetValidYear() (year int) {\r\n\treader := bufio.NewReader(os.Stdin)\r\n\tfmt.Print("Enter a year from 1583 to 9999: ")\r\n\ttext, err := reader.ReadString('\\n')\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println("Unexpected error processing input")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\t// Valid input must contain 5 or 6 chars including EOL chars\r\n\ttxtLen := len(text)\r\n\tvar yrStr string\r\n\tif txtLen > 4 && txtLen < 7 {\r\n\t\tyrStr = text[:4] // ignore EOL char(s)\r\n\t} else {\r\n\t\tyrStr = "0000" // force invalid input range error\r\n\t}\r\n\r\n\t// Convert input to an integer value. Handle conversion errors\r\n\tyear, err = strconv.Atoi(yrStr)\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println(yrStr, "is not a valid number.")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\t// Verify that input in in the allowed range\r\n\tif year < 1583 || year > 9999 {\r\n\t\tfmt.Println("Year entered must be from 1583 to 9999.")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\treturn year // Return validated input value\r\n}\r\n\r\n// IsLeapYear expects an integer parameter between 1583 and 9999, and\r\n// returns true or false based on whether the value provided is a leap year\r\n// Other input values may result in a runtime error or incorrect results\r\nfunc IsLeapYear(year int) bool {\r\n\tif math.Mod(float64(year), 4) == 0.0 {\r\n\t\tif math.Mod(float64(year), 100) == 0.0 {\r\n\t\t\tif math.Mod(float64(year), 400) == 0.0 {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\treturn false\r\n}	\N	\N	0	1	214	\\go\\leap\\leap.go	2015-02-07 02:42:05	2015-02-07 02:42:05	{"\\\\go\\\\leap\\\\leap.go":"// Package leap exports GetValidYear which returns a valid year or zero,\\r\\n// and IsLeapYear which returns true if a validated year is a leap year.\\r\\npackage leap\\r\\n\\r\\nimport (\\r\\n\\t\\"bufio\\"\\r\\n\\t\\"fmt\\"\\r\\n\\t\\"math\\"\\r\\n\\t\\"os\\"\\r\\n\\t\\"strconv\\"\\r\\n)\\r\\n\\r\\nconst TestVersion = 1\\r\\n\\r\\n// GetValidYear prompts the user to enter a year from 1583 to 9999.\\r\\n// Returns validated year or 0 which indicates an error\\r\\n// Non-zero return values may be safely passed to IsLeapYear\\r\\nfunc GetValidYear() (year int) {\\r\\n\\treader := bufio.NewReader(os.Stdin)\\r\\n\\tfmt.Print(\\"Enter a year from 1583 to 9999: \\")\\r\\n\\ttext, err := reader.ReadString('\\\\n')\\r\\n\\r\\n\\tif err != nil {\\r\\n\\t\\tfmt.Println(\\"Unexpected error processing input\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\t// Valid input must contain 5 or 6 chars including EOL chars\\r\\n\\ttxtLen := len(text)\\r\\n\\tvar yrStr string\\r\\n\\tif txtLen \\u003e 4 \\u0026\\u0026 txtLen \\u003c 7 {\\r\\n\\t\\tyrStr = text[:4] // ignore EOL char(s)\\r\\n\\t} else {\\r\\n\\t\\tyrStr = \\"0000\\" // force invalid input range error\\r\\n\\t}\\r\\n\\r\\n\\t// Convert input to an integer value. Handle conversion errors\\r\\n\\tyear, err = strconv.Atoi(yrStr)\\r\\n\\r\\n\\tif err != nil {\\r\\n\\t\\tfmt.Println(yrStr, \\"is not a valid number.\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\t// Verify that input in in the allowed range\\r\\n\\tif year \\u003c 1583 || year \\u003e 9999 {\\r\\n\\t\\tfmt.Println(\\"Year entered must be from 1583 to 9999.\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\treturn year // Return validated input value\\r\\n}\\r\\n\\r\\n// IsLeapYear expects an integer parameter between 1583 and 9999, and\\r\\n// returns true or false based on whether the value provided is a leap year\\r\\n// Other input values may result in a runtime error or incorrect results\\r\\nfunc IsLeapYear(year int) bool {\\r\\n\\tif math.Mod(float64(year), 4) == 0.0 {\\r\\n\\t\\tif math.Mod(float64(year), 100) == 0.0 {\\r\\n\\t\\t\\tif math.Mod(float64(year), 400) == 0.0 {\\r\\n\\t\\t\\t\\treturn true\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}"}
306	34	e1ce9323ba9ede752080bd8a	pending	go	leap	// Package leap exports GetValidYear which returns a valid year or zero,\r\n// and IsLeapYear which returns true if a validated year is a leap year.\r\npackage leap\r\n\r\nimport (\r\n\t"bufio"\r\n\t"fmt"\r\n\t"os"\r\n\t"strconv"\r\n)\r\n\r\nconst TestVersion = 1\r\n\r\n// GetValidYear prompts the user to enter a year from 1583 to 9999.\r\n// Returns validated year or 0 which indicates an error\r\n// Non-zero return values may be safely passed to IsLeapYear\r\nfunc GetValidYear() (year int) {\r\n\treader := bufio.NewReader(os.Stdin)\r\n\tfmt.Print("Enter a year from 1583 to 9999: ")\r\n\ttext, err := reader.ReadString('\\n')\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println("Unexpected error processing input")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\t// Valid input must contain 5 or 6 chars including EOL chars\r\n\ttxtLen := len(text)\r\n\tvar yrStr string\r\n\tif txtLen > 4 && txtLen < 7 {\r\n\t\tyrStr = text[:4] // ignore EOL char(s)\r\n\t} else {\r\n\t\tyrStr = "0000" // force invalid input range error\r\n\t}\r\n\r\n\t// Convert input to an integer value. Handle conversion errors\r\n\tyear, err = strconv.Atoi(yrStr)\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println(yrStr, "is not a valid number.")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\t// Verify that input in in the allowed range\r\n\tif year < 1583 || year > 9999 {\r\n\t\tfmt.Println("Year entered must be from 1583 to 9999.")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\treturn year // Return validated input value\r\n}\r\n\r\n// IsLeapYear expects an integer parameter between 1583 and 9999, and\r\n// returns true or false based on whether the value provided is a leap year\r\n// Other input values may result in a runtime error or incorrect results\r\nfunc IsLeapYear(year int) bool {\r\n\tif year%4 == 0.0 {\r\n\t\tif year%100 == 0.0 {\r\n\t\t\tif year%400 == 0.0 {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\treturn false\r\n}	\N	\N	0	2	214	\\go\\leap\\leap.go	2015-07-30 16:13:00	2015-07-30 16:13:00	{"\\\\go\\\\leap\\\\leap.go":"// Package leap exports GetValidYear which returns a valid year or zero,\\r\\n// and IsLeapYear which returns true if a validated year is a leap year.\\r\\npackage leap\\r\\n\\r\\nimport (\\r\\n\\t\\"bufio\\"\\r\\n\\t\\"fmt\\"\\r\\n\\t\\"os\\"\\r\\n\\t\\"strconv\\"\\r\\n)\\r\\n\\r\\nconst TestVersion = 1\\r\\n\\r\\n// GetValidYear prompts the user to enter a year from 1583 to 9999.\\r\\n// Returns validated year or 0 which indicates an error\\r\\n// Non-zero return values may be safely passed to IsLeapYear\\r\\nfunc GetValidYear() (year int) {\\r\\n\\treader := bufio.NewReader(os.Stdin)\\r\\n\\tfmt.Print(\\"Enter a year from 1583 to 9999: \\")\\r\\n\\ttext, err := reader.ReadString('\\\\n')\\r\\n\\r\\n\\tif err != nil {\\r\\n\\t\\tfmt.Println(\\"Unexpected error processing input\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\t// Valid input must contain 5 or 6 chars including EOL chars\\r\\n\\ttxtLen := len(text)\\r\\n\\tvar yrStr string\\r\\n\\tif txtLen \\u003e 4 \\u0026\\u0026 txtLen \\u003c 7 {\\r\\n\\t\\tyrStr = text[:4] // ignore EOL char(s)\\r\\n\\t} else {\\r\\n\\t\\tyrStr = \\"0000\\" // force invalid input range error\\r\\n\\t}\\r\\n\\r\\n\\t// Convert input to an integer value. Handle conversion errors\\r\\n\\tyear, err = strconv.Atoi(yrStr)\\r\\n\\r\\n\\tif err != nil {\\r\\n\\t\\tfmt.Println(yrStr, \\"is not a valid number.\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\t// Verify that input in in the allowed range\\r\\n\\tif year \\u003c 1583 || year \\u003e 9999 {\\r\\n\\t\\tfmt.Println(\\"Year entered must be from 1583 to 9999.\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\treturn year // Return validated input value\\r\\n}\\r\\n\\r\\n// IsLeapYear expects an integer parameter between 1583 and 9999, and\\r\\n// returns true or false based on whether the value provided is a leap year\\r\\n// Other input values may result in a runtime error or incorrect results\\r\\nfunc IsLeapYear(year int) bool {\\r\\n\\tif year%4 == 0.0 {\\r\\n\\t\\tif year%100 == 0.0 {\\r\\n\\t\\t\\tif year%400 == 0.0 {\\r\\n\\t\\t\\t\\treturn true\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}"}
307	34	b10963432f273d522db143e4	pending	ruby	twelve-days	class TwelveDaysSong\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\n\n  VERSES = [\n    ["twelve Drummers Drumming, ", 12],\n    ["eleven Pipers Piping, ", 11],\n    ["ten Lords-a-Leaping, ", 10],\n    ["nine Ladies Dancing, ", 9],    \n    ["eight Maids-a-Milking, ", 8],      \n    ["seven Swans-a-Swimming, ", 7],\n    ["six Geese-a-Laying, ", 6],\n    ["five Gold Rings, ", 5],\n    ["four Calling Birds, ", 4], \n    ["three French Hens, ", 3],\n    ["two Turtle Doves, and ", 2],\n  ]\n\n  def verse(num)\n    s = "On the #{DAYS[num-1]} day of Christmas my true love gave to me, "\n    VERSES.each do |phrase, verse_num|\n      s << phrase if num >= verse_num\n    end\n    s << "a Partridge in a Pear Tree.\\n"\n    s\n  end\n\n  def verses(start, stop)\n    (start..stop).map { |num| verse(num) }.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses(1, 12)\n  end\nend	\N	\N	0	1	215	twelve_days.rb	2015-02-27 18:52:32	2015-02-27 18:52:32	{"twelve_days.rb":"class TwelveDaysSong\\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\\n\\n  VERSES = [\\n    [\\"twelve Drummers Drumming, \\", 12],\\n    [\\"eleven Pipers Piping, \\", 11],\\n    [\\"ten Lords-a-Leaping, \\", 10],\\n    [\\"nine Ladies Dancing, \\", 9],    \\n    [\\"eight Maids-a-Milking, \\", 8],      \\n    [\\"seven Swans-a-Swimming, \\", 7],\\n    [\\"six Geese-a-Laying, \\", 6],\\n    [\\"five Gold Rings, \\", 5],\\n    [\\"four Calling Birds, \\", 4], \\n    [\\"three French Hens, \\", 3],\\n    [\\"two Turtle Doves, and \\", 2],\\n  ]\\n\\n  def verse(num)\\n    s = \\"On the #{DAYS[num-1]} day of Christmas my true love gave to me, \\"\\n    VERSES.each do |phrase, verse_num|\\n      s \\u003c\\u003c phrase if num \\u003e= verse_num\\n    end\\n    s \\u003c\\u003c \\"a Partridge in a Pear Tree.\\\\n\\"\\n    s\\n  end\\n\\n  def verses(start, stop)\\n    (start..stop).map { |num| verse(num) }.join(\\"\\\\n\\") + \\"\\\\n\\"\\n  end\\n\\n  def sing\\n    verses(1, 12)\\n  end\\nend"}
308	16	2a6e0e8efb95c51db044af70	superseded	haskell	bob	module Bob where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor x | filter (not . isSpace) x == "" = "Fine. Be that way!"\nresponseFor s | yelling s                      = "Woah, chill out!"\nresponseFor q | last q == '?'                  = "Sure."\nresponseFor _                                  = "Whatever."\n\nyelling :: String -> Bool\nyelling s = all (isLetter .-> isUpper) s && any isLetter s\n  where\n    a .-> b = \\x -> not (a x) || b x -- logical implication	\N	\N	0	1	216	bob.hs	2015-06-17 00:16:06	2015-06-17 00:16:06	{"bob.hs":"module Bob where\\n\\nimport Data.Char\\n\\nresponseFor :: String -\\u003e String\\nresponseFor x | filter (not . isSpace) x == \\"\\" = \\"Fine. Be that way!\\"\\nresponseFor s | yelling s                      = \\"Woah, chill out!\\"\\nresponseFor q | last q == '?'                  = \\"Sure.\\"\\nresponseFor _                                  = \\"Whatever.\\"\\n\\nyelling :: String -\\u003e Bool\\nyelling s = all (isLetter .-\\u003e isUpper) s \\u0026\\u0026 any isLetter s\\n  where\\n    a .-\\u003e b = \\\\x -\\u003e not (a x) || b x -- logical implication"}
309	16	a2c93cc682f470c881d67f89	done	haskell	bob	module Bob where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor x | filter (not . isSpace) x == "" = "Fine. Be that way!"\nresponseFor s | yelling s                      = "Woah, chill out!"\nresponseFor q | last q == '?'                  = "Sure."\nresponseFor _                                  = "Whatever."\n\nyelling :: String -> Bool\nyelling s = all (not . isLower) s && any isLetter s	\N	\N	0	2	216	bob.hs	2015-07-30 06:00:40	2015-07-30 06:00:40	{"bob.hs":"module Bob where\\n\\nimport Data.Char\\n\\nresponseFor :: String -\\u003e String\\nresponseFor x | filter (not . isSpace) x == \\"\\" = \\"Fine. Be that way!\\"\\nresponseFor s | yelling s                      = \\"Woah, chill out!\\"\\nresponseFor q | last q == '?'                  = \\"Sure.\\"\\nresponseFor _                                  = \\"Whatever.\\"\\n\\nyelling :: String -\\u003e Bool\\nyelling s = all (not . isLower) s \\u0026\\u0026 any isLetter s"}
310	16	ce0f0fc6ef1e80868f81fd16	superseded	python	point-mutations	class DNA:\n\tdef __init__(self, dna):\n\t\tself.dna = dna \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.dna:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.dna[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	1	217	point-mutations.py	2015-06-08 16:55:22	2015-06-08 16:55:22	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, dna):\\n\\t\\tself.dna = dna \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.dna:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.dna[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
311	16	8da5650efbb3caba9d918b7c	done	python	point-mutations	class DNA:\n\tdef __init__(self, strand):\n\t\tself.strand = strand \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.strand:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.strand[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	2	217	point-mutations.py	2015-06-12 21:30:18	2015-06-12 21:30:18	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, strand):\\n\\t\\tself.strand = strand \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.strand:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.strand[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
312	16	14e2ff537c27712528edf5e3	done	ruby	bob	class Bob\n  def hey(message)\n    if message.strip.empty?\n      'Fine. Be that way!'\n    elsif message == message.upcase\n      'Woah, chill out!'\n    elsif message.end_with?('?')\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\nend	\N	\N	0	1	218	bob.rb	2015-05-24 13:36:57	2015-05-24 13:36:57	{"bob.rb":"class Bob\\n  def hey(message)\\n    if message.strip.empty?\\n      'Fine. Be that way!'\\n    elsif message == message.upcase\\n      'Woah, chill out!'\\n    elsif message.end_with?('?')\\n      'Sure.'\\n    else\\n      'Whatever.'\\n    end\\n  end\\nend"}
313	16	0d3896d4a349c9297191e913	pending	python	hamming	def distance(a, b):\n    if len(a) != len(b):\n        raise Exception('Argument lengths differ.')\n\n    count = 0\n    for x in zip(a, b):\n        if x[0] != x[1]:\n            count += 1\n    return count	\N	\N	0	2	219	hamming.py	2015-05-14 03:08:52	2015-05-14 03:08:52	{"hamming.py":"def distance(a, b):\\n    if len(a) != len(b):\\n        raise Exception('Argument lengths differ.')\\n\\n    count = 0\\n    for x in zip(a, b):\\n        if x[0] != x[1]:\\n            count += 1\\n    return count"}
314	16	acacd101519985258e642c63	superseded	python	hamming	def distance(a, b):\n    if len(a) != len(b):\n        return\n\n    count = 0\n    for x in zip(a, b):\n        if x[0] != x[1]:\n            count += 1\n    return count	\N	\N	0	1	219	hamming.py	2015-07-13 16:07:06	2015-07-13 16:07:06	{"hamming.py":"def distance(a, b):\\n    if len(a) != len(b):\\n        return\\n\\n    count = 0\\n    for x in zip(a, b):\\n        if x[0] != x[1]:\\n            count += 1\\n    return count"}
315	16	bdd858e6c185d7965865daab	pending	ruby	protein-translation	class Translation\n  PROTEINS = {\n    "Methionine"    => %w(AUG),\n    "Leucine"       => %w(UUA UUG),\n    "Serine"        => %w(UCU UCC UCA UCG),\n    "Cystine"       => %w(UGU UGC),\n    "Tyrosine"      => %w(UAU UAC),\n    "Tryptophan"    => %w(UGG),\n    "Phenylalanine" => %w(UUU UUC),\n    "STOP"          => %w(UAA UAG UGA),\n  }\n\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\n    Array(codons).each {|codon| hash[codon] = protein }\n  end\n\n  class << self\n    def of_codon(str)\n      CODONS.fetch(str){ raise InvalidCodonError }\n    end\n\n    def of_rna(str)\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\n        of_codon(triplet).tap do |protein|\n          return result if protein == "STOP"\n          result << protein\n        end\n      end\n    end\n  end\nend\n\nclass InvalidCodonError < ArgumentError\nend	\N	\N	0	1	220	translation.rb	2015-06-25 13:08:15	2015-06-25 13:08:15	{"translation.rb":"class Translation\\n  PROTEINS = {\\n    \\"Methionine\\"    =\\u003e %w(AUG),\\n    \\"Leucine\\"       =\\u003e %w(UUA UUG),\\n    \\"Serine\\"        =\\u003e %w(UCU UCC UCA UCG),\\n    \\"Cystine\\"       =\\u003e %w(UGU UGC),\\n    \\"Tyrosine\\"      =\\u003e %w(UAU UAC),\\n    \\"Tryptophan\\"    =\\u003e %w(UGG),\\n    \\"Phenylalanine\\" =\\u003e %w(UUU UUC),\\n    \\"STOP\\"          =\\u003e %w(UAA UAG UGA),\\n  }\\n\\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\\n    Array(codons).each {|codon| hash[codon] = protein }\\n  end\\n\\n  class \\u003c\\u003c self\\n    def of_codon(str)\\n      CODONS.fetch(str){ raise InvalidCodonError }\\n    end\\n\\n    def of_rna(str)\\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\\n        of_codon(triplet).tap do |protein|\\n          return result if protein == \\"STOP\\"\\n          result \\u003c\\u003c protein\\n        end\\n      end\\n    end\\n  end\\nend\\n\\nclass InvalidCodonError \\u003c ArgumentError\\nend"}
316	18	7baa0d279224501958549a3e	done	ruby	secret-handshake	class SecretHandshake\n\n  HANDSHAKES = { \n                  1     => "wink",\n                  10    => "double blink",\n                  100   => "close your eyes",\n                  1000  => "jump"\n  }\n\n  attr_reader :decimal_number\n\n  def initialize decimal_number\n    @decimal_number = decimal_number\n  end\n\n  def commands\n    if decimal_number.is_a? Integer\n      secret_handshakes\n    else\n      []\n    end\n  end\n\nprivate\n\n  def binary_number\n    decimal_number.to_s 2\n  end\n\n  def translator\n    result = Array.new\n\n    binary_number.chars.reverse.each_with_index do |digit, index|\n      result << HANDSHAKES[ digit.ljust( index + 1, '0' ).to_i ]\n    end\n\n    result.compact\n  end\n\n  def secret_handshakes\n    if binary_number.length == 5\n      translator.reverse\n    else\n      translator\n    end\n  end\n\nend	\N	\N	0	1	221	/ruby/secret-handshake/secret_handshake.rb	2015-08-01 16:03:26	2015-08-01 16:03:26	{"/ruby/secret-handshake/secret_handshake.rb":"class SecretHandshake\\n\\n  HANDSHAKES = { \\n                  1     =\\u003e \\"wink\\",\\n                  10    =\\u003e \\"double blink\\",\\n                  100   =\\u003e \\"close your eyes\\",\\n                  1000  =\\u003e \\"jump\\"\\n  }\\n\\n  attr_reader :decimal_number\\n\\n  def initialize decimal_number\\n    @decimal_number = decimal_number\\n  end\\n\\n  def commands\\n    if decimal_number.is_a? Integer\\n      secret_handshakes\\n    else\\n      []\\n    end\\n  end\\n\\nprivate\\n\\n  def binary_number\\n    decimal_number.to_s 2\\n  end\\n\\n  def translator\\n    result = Array.new\\n\\n    binary_number.chars.reverse.each_with_index do |digit, index|\\n      result \\u003c\\u003c HANDSHAKES[ digit.ljust( index + 1, '0' ).to_i ]\\n    end\\n\\n    result.compact\\n  end\\n\\n  def secret_handshakes\\n    if binary_number.length == 5\\n      translator.reverse\\n    else\\n      translator\\n    end\\n  end\\n\\nend"}
317	18	6e244f28539ee2df40c1f3e6	pending	ruby	sieve	class Sieve\n  attr_reader :limit, :candidates, :composites\n\n  def initialize(limit)\n    @limit = limit\n    @candidates = (2..limit).to_a\n    @composites = {}\n  end\n\n  def primes\n    candidates.each_with_object([]) do |candidate, primes|\n      next if composites.key?(candidate)\n      primes << candidate\n      ((candidate * 2)..limit).step(candidate) do |multiple|\n        composites[multiple] = true\n      end\n    end\n  end\nend	\N	\N	0	1	222	/ruby/sieve/sieve.rb	2015-08-17 19:26:29	2015-08-17 19:26:29	{"/ruby/sieve/sieve.rb":"class Sieve\\n  attr_reader :limit, :candidates, :composites\\n\\n  def initialize(limit)\\n    @limit = limit\\n    @candidates = (2..limit).to_a\\n    @composites = {}\\n  end\\n\\n  def primes\\n    candidates.each_with_object([]) do |candidate, primes|\\n      next if composites.key?(candidate)\\n      primes \\u003c\\u003c candidate\\n      ((candidate * 2)..limit).step(candidate) do |multiple|\\n        composites[multiple] = true\\n      end\\n    end\\n  end\\nend"}
318	18	e940e1747fcb2ac00100c93e	pending	ruby	roman-numerals	class Fixnum\n  def to_roman\n    array = self.to_s.split(//)\n    num_array = []\n    array.each do |x|\n      num_array.push(x.to_i)\n    end\n    roman_numeral=[]\n    ones = num_array.pop\n    if ones == 9\n      roman_numeral.unshift('IX')\n    elsif ones == 4\n      roman_numeral.unshift('IV')\n    else\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\n    end\n\n    if num_array.empty? == false\n      tens = num_array.pop\n      if tens == 9\n        roman_numeral.unshift('XC')\n      elsif tens == 4\n        roman_numeral.unshift('XL')\n      else\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\n      end\n    end\n\n    if num_array.empty? == false\n      hundreds = num_array.pop\n      if hundreds == 9\n        roman_numeral.unshift('CM')\n      elsif hundreds == 4\n        roman_numeral.unshift('CD')\n      else\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\n      end\n    end\n\n    if num_array.empty? == false\n      thousands = num_array.pop\n      roman_numeral.unshift('M'*thousands)\n    end\n\n    roman_numeral.join\n  end\nend	\N	\N	0	1	223	/ruby/roman-numerals/roman.rb	2015-07-28 09:28:29	2015-07-28 09:28:29	{"/ruby/roman-numerals/roman.rb":"class Fixnum\\n  def to_roman\\n    array = self.to_s.split(//)\\n    num_array = []\\n    array.each do |x|\\n      num_array.push(x.to_i)\\n    end\\n    roman_numeral=[]\\n    ones = num_array.pop\\n    if ones == 9\\n      roman_numeral.unshift('IX')\\n    elsif ones == 4\\n      roman_numeral.unshift('IV')\\n    else\\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\\n    end\\n\\n    if num_array.empty? == false\\n      tens = num_array.pop\\n      if tens == 9\\n        roman_numeral.unshift('XC')\\n      elsif tens == 4\\n        roman_numeral.unshift('XL')\\n      else\\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      hundreds = num_array.pop\\n      if hundreds == 9\\n        roman_numeral.unshift('CM')\\n      elsif hundreds == 4\\n        roman_numeral.unshift('CD')\\n      else\\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      thousands = num_array.pop\\n      roman_numeral.unshift('M'*thousands)\\n    end\\n\\n    roman_numeral.join\\n  end\\nend"}
319	18	52a4ab617838a6233ed6e8f6	superseded	go	leap	package leap\n\n/*\n * Determine if year is leap year or not\n * @param year: The year expressed as int \n * @return: true if leap year, otherwise false\n*/\nfunc IsLeapYear(year int) bool {\n    // Is leap if evenly divisible by 4 and not by 100  \n    if (year % 4 == 0 && year % 100 != 0) {\n        return true\n    // Also leap if divisible by 400\n    } else if (year % 400 == 0) {\n        return true\n    // All others are not leap\n    } else {\n        return false\n    }\n}	\N	\N	0	1	224	leap.go	2015-08-26 02:32:51	2015-08-26 02:32:51	{"leap.go":"package leap\\n\\n/*\\n * Determine if year is leap year or not\\n * @param year: The year expressed as int \\n * @return: true if leap year, otherwise false\\n*/\\nfunc IsLeapYear(year int) bool {\\n    // Is leap if evenly divisible by 4 and not by 100  \\n    if (year % 4 == 0 \\u0026\\u0026 year % 100 != 0) {\\n        return true\\n    // Also leap if divisible by 400\\n    } else if (year % 400 == 0) {\\n        return true\\n    // All others are not leap\\n    } else {\\n        return false\\n    }\\n}"}
321	24	81cbbd051c8789a1b0633c40	done	javascript	crypto-square	var CryptoSquare = function CryptoSquare(input){ \n\t\t\n\t\tthis.normalizePlaintext = function normalizePlaintext(){\n\t\t\treturn input.toLowerCase().replace(/[^\\w\\d]/g,"");\n\t\t}\n\t\t\n\t\tthis.size = function size(){\n\t\t    return Math.ceil(Math.sqrt(this.normalized.length));\n\t\t}\n\n\t\tthis.plaintextSegments = function plaintextSegments(){\n\t\t\treturn this.separate(this.normalized).split(" ");\n\t\t}\n\n\t\tthis.ciphertext = function ciphertext(){\n\t\t\tvar result = "";\n\t\t\tvar plaintext = this.plaintextSegments();\n\t\t\tvar rows=this.size();\n\t\t\tfor(var i=0;i<rows;i++){\n\t\t\t\tfor(var chunk in plaintext){\n\t\t\t\t\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\t\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\treturn result;\t\n\t\t}\n\n\t\tthis.normalizeCiphertext = function normalizeCiphertext(){\n\t\t\treturn this.separate(this.ciphertext());\t\n\t\t}\n\n\t\tthis.separate = function(text){\n\t\t\tvar expression = new RegExp('.{1,'+this.size()+'}',"g")\n\t\t\treturn text.match(expression).join(" ");\t\n\t\t}\n\n\t\tthis.normalized = this.normalizePlaintext(input);\n}\nmodule.exports = CryptoSquare;	\N	\N	0	2	225	crypto-square.js	2015-06-29 04:14:14	2015-06-29 04:14:14	{"crypto-square.js":"var CryptoSquare = function CryptoSquare(input){ \\n\\t\\t\\n\\t\\tthis.normalizePlaintext = function normalizePlaintext(){\\n\\t\\t\\treturn input.toLowerCase().replace(/[^\\\\w\\\\d]/g,\\"\\");\\n\\t\\t}\\n\\t\\t\\n\\t\\tthis.size = function size(){\\n\\t\\t    return Math.ceil(Math.sqrt(this.normalized.length));\\n\\t\\t}\\n\\n\\t\\tthis.plaintextSegments = function plaintextSegments(){\\n\\t\\t\\treturn this.separate(this.normalized).split(\\" \\");\\n\\t\\t}\\n\\n\\t\\tthis.ciphertext = function ciphertext(){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar plaintext = this.plaintextSegments();\\n\\t\\t\\tvar rows=this.size();\\n\\t\\t\\tfor(var i=0;i\\u003crows;i++){\\n\\t\\t\\t\\tfor(var chunk in plaintext){\\n\\t\\t\\t\\t\\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\t\\n\\t\\t\\treturn result;\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalizeCiphertext = function normalizeCiphertext(){\\n\\t\\t\\treturn this.separate(this.ciphertext());\\t\\n\\t\\t}\\n\\n\\t\\tthis.separate = function(text){\\n\\t\\t\\tvar expression = new RegExp('.{1,'+this.size()+'}',\\"g\\")\\n\\t\\t\\treturn text.match(expression).join(\\" \\");\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalized = this.normalizePlaintext(input);\\n}\\nmodule.exports = CryptoSquare;"}
322	24	5c5b6bc9565d742e6f078baf	superseded	javascript	crypto-square	var CryptoSquare = function CryptoSquare(input){ \n\t\t\n\t\tthis.normalizePlaintext = function normalizePlaintext(){\n\t\t\treturn input.toLowerCase().replace(/[^\\w\\d]/g,"");\n\t\t}\n\t\t\n\t\tthis.size = function size(){\n\t\t    return Math.ceil(Math.sqrt(this.normalized.length));\n\t\t}\n\n\t\tthis.plaintextSegments = function plaintextSegments(){\n\t\t\treturn this.separate(this.normalized).split(" ");\n\t\t}\n\n\t\tthis.ciphertext = function ciphertext(){\n\t\t\tvar result = "";\n\t\t\tvar plaintext = this.plaintextSegments();\n\t\t\tvar rows=this.size();\n\t\t\tfor(var i=0;i<rows;i++){\n\t\t\t\tfor(var chunk in plaintext){\n\t\t\t\t\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\t\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\treturn result;\t\n\t\t}\n\n\t\tthis.normalizeCiphertext = function normalizeCiphertext(){\n\t\t\treturn this.separate(this.ciphertext());\t\n\t\t}\n\n\t\tthis.separate = function(text){\n\t\t\tvar result = "";\n\t\t\tvar rows = this.size();\n\t\t\ttext.split("").map(function map(letter,index){\n\t\t\t\tresult+=letter;\n\t\t\t\tif((index+1)%rows===0)result+=" ";\n\t\t\t});\n\t\t\treturn result.trim();\n\t\t}\n\n\t\tthis.normalized = this.normalizePlaintext(input);\n}\nmodule.exports = CryptoSquare;	\N	\N	0	1	225	crypto-square.js	2015-08-02 15:54:21	2015-08-02 15:54:21	{"crypto-square.js":"var CryptoSquare = function CryptoSquare(input){ \\n\\t\\t\\n\\t\\tthis.normalizePlaintext = function normalizePlaintext(){\\n\\t\\t\\treturn input.toLowerCase().replace(/[^\\\\w\\\\d]/g,\\"\\");\\n\\t\\t}\\n\\t\\t\\n\\t\\tthis.size = function size(){\\n\\t\\t    return Math.ceil(Math.sqrt(this.normalized.length));\\n\\t\\t}\\n\\n\\t\\tthis.plaintextSegments = function plaintextSegments(){\\n\\t\\t\\treturn this.separate(this.normalized).split(\\" \\");\\n\\t\\t}\\n\\n\\t\\tthis.ciphertext = function ciphertext(){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar plaintext = this.plaintextSegments();\\n\\t\\t\\tvar rows=this.size();\\n\\t\\t\\tfor(var i=0;i\\u003crows;i++){\\n\\t\\t\\t\\tfor(var chunk in plaintext){\\n\\t\\t\\t\\t\\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\t\\n\\t\\t\\treturn result;\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalizeCiphertext = function normalizeCiphertext(){\\n\\t\\t\\treturn this.separate(this.ciphertext());\\t\\n\\t\\t}\\n\\n\\t\\tthis.separate = function(text){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar rows = this.size();\\n\\t\\t\\ttext.split(\\"\\").map(function map(letter,index){\\n\\t\\t\\t\\tresult+=letter;\\n\\t\\t\\t\\tif((index+1)%rows===0)result+=\\" \\";\\n\\t\\t\\t});\\n\\t\\t\\treturn result.trim();\\n\\t\\t}\\n\\n\\t\\tthis.normalized = this.normalizePlaintext(input);\\n}\\nmodule.exports = CryptoSquare;"}
323	24	c7a3bf23557c325c05693e40	pending	ruby	protein-translation	class Translation\n  PROTEINS = {\n    "Methionine"    => %w(AUG),\n    "Leucine"       => %w(UUA UUG),\n    "Serine"        => %w(UCU UCC UCA UCG),\n    "Cystine"       => %w(UGU UGC),\n    "Tyrosine"      => %w(UAU UAC),\n    "Tryptophan"    => %w(UGG),\n    "Phenylalanine" => %w(UUU UUC),\n    "STOP"          => %w(UAA UAG UGA),\n  }\n\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\n    Array(codons).each {|codon| hash[codon] = protein }\n  end\n\n  class << self\n    def of_codon(str)\n      CODONS.fetch(str){ raise InvalidCodonError }\n    end\n\n    def of_rna(str)\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\n        of_codon(triplet).tap do |protein|\n          return result if protein == "STOP"\n          result << protein\n        end\n      end\n    end\n  end\nend\n\nclass InvalidCodonError < ArgumentError\nend	\N	\N	0	1	226	translation.rb	2015-08-27 19:48:51	2015-08-27 19:48:51	{"translation.rb":"class Translation\\n  PROTEINS = {\\n    \\"Methionine\\"    =\\u003e %w(AUG),\\n    \\"Leucine\\"       =\\u003e %w(UUA UUG),\\n    \\"Serine\\"        =\\u003e %w(UCU UCC UCA UCG),\\n    \\"Cystine\\"       =\\u003e %w(UGU UGC),\\n    \\"Tyrosine\\"      =\\u003e %w(UAU UAC),\\n    \\"Tryptophan\\"    =\\u003e %w(UGG),\\n    \\"Phenylalanine\\" =\\u003e %w(UUU UUC),\\n    \\"STOP\\"          =\\u003e %w(UAA UAG UGA),\\n  }\\n\\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\\n    Array(codons).each {|codon| hash[codon] = protein }\\n  end\\n\\n  class \\u003c\\u003c self\\n    def of_codon(str)\\n      CODONS.fetch(str){ raise InvalidCodonError }\\n    end\\n\\n    def of_rna(str)\\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\\n        of_codon(triplet).tap do |protein|\\n          return result if protein == \\"STOP\\"\\n          result \\u003c\\u003c protein\\n        end\\n      end\\n    end\\n  end\\nend\\n\\nclass InvalidCodonError \\u003c ArgumentError\\nend"}
324	24	9ee011c5764167da1fb494e2	done	clojure	binary	(ns binary\n     (:import java.lang.Math ))\n\n (defn to-decimal-seq [binaryStr]\n       (let [tidyStr (clojure.string/replace binaryStr #"[^0-9]" "0")  ;Treat invalid input as binary 0\n             idx-map (map-indexed vector  (clojure.string/reverse tidyStr))]\n            (for [[x v] idx-map]\n                 (do\n                  ;(println (format " (2 ^ %1s) * %2s" x v ))\n                  (* (Math/pow 2 (read-string (str x))) (read-string (str v)))))))\n\n\n (defn to-decimal [binaryStr]\n       (let [col (to-decimal-seq binaryStr)]\n            (int (apply + col))))	\N	\N	0	1	227	/clojure/binary/binary.clj	2015-07-14 17:35:32	2015-07-14 17:35:32	{"/clojure/binary/binary.clj":"(ns binary\\n     (:import java.lang.Math ))\\n\\n (defn to-decimal-seq [binaryStr]\\n       (let [tidyStr (clojure.string/replace binaryStr #\\"[^0-9]\\" \\"0\\")  ;Treat invalid input as binary 0\\n             idx-map (map-indexed vector  (clojure.string/reverse tidyStr))]\\n            (for [[x v] idx-map]\\n                 (do\\n                  ;(println (format \\" (2 ^ %1s) * %2s\\" x v ))\\n                  (* (Math/pow 2 (read-string (str x))) (read-string (str v)))))))\\n\\n\\n (defn to-decimal [binaryStr]\\n       (let [col (to-decimal-seq binaryStr)]\\n            (int (apply + col))))"}
325	42	ea81b389c612b6625a6f2928	done	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule Octal( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readBase 8\n\nshowOct :: Integral a => a -> String\nshowOct = showBase 8\n\nreadBase :: Integral a => a -> String -> a\nreadBase b s = readBase' 0 s\n  where \n    readBase' acc "" = acc\n    readBase' acc (d : ds) \n        | acc `seq` False = undefined \n        | not (valid b d) = 0\n        | otherwise = readBase' (b*acc + fromChar d) ds\n\nvalid :: Integral b => b -> Char -> Bool\nvalid b c | b <= 10   = c >= '0' && c < bd\n          | otherwise = (c >= '0' && c <= '9') || \n                        (c >= 'A' && c < bdu) ||\n                        (c >= 'a' && c < bd)\n  where \n    bd = fromDigit b\n    bdu = fromDigitC b\n\nfromChar :: Integral a => Char -> a\nfromChar c | c <= '9' = fromBase '0' c\n           | c <= 'Z' = fromBase 'A' c\n           | otherwise = fromBase 'a' c\n  where \n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \n\nshowBase :: Integral a => a -> a -> String\nshowBase b n | b < 1 || n < 0 = ""\n             | n == 0 = "0"\n             | otherwise = digitsP "" n\n  where\n    digitsP ds k | dc `seq` ds `seq` False = undefined\n                 | k == 0 = ds\n                 | otherwise = digitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` b\n        dc = fromDigit $! d\n\ntoBase :: Integral a => Char -> a -> Char\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\n\nfromDigit :: Integral a => a -> Char\nfromDigit d | d <= 9 = toBase '0' d\n            | otherwise = toBase 'a' d\n\nfromDigitC :: Integral a => a -> Char\nfromDigitC d | d <= 9 = toBase '0' d\n             | otherwise = toBase 'A' d	\N	\N	0	2	228	Octal.hs	2015-08-05 13:11:17	2015-08-05 13:11:17	{"Octal.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule Octal( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readBase 8\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct = showBase 8\\n\\nreadBase :: Integral a =\\u003e a -\\u003e String -\\u003e a\\nreadBase b s = readBase' 0 s\\n  where \\n    readBase' acc \\"\\" = acc\\n    readBase' acc (d : ds) \\n        | acc `seq` False = undefined \\n        | not (valid b d) = 0\\n        | otherwise = readBase' (b*acc + fromChar d) ds\\n\\nvalid :: Integral b =\\u003e b -\\u003e Char -\\u003e Bool\\nvalid b c | b \\u003c= 10   = c \\u003e= '0' \\u0026\\u0026 c \\u003c bd\\n          | otherwise = (c \\u003e= '0' \\u0026\\u0026 c \\u003c= '9') || \\n                        (c \\u003e= 'A' \\u0026\\u0026 c \\u003c bdu) ||\\n                        (c \\u003e= 'a' \\u0026\\u0026 c \\u003c bd)\\n  where \\n    bd = fromDigit b\\n    bdu = fromDigitC b\\n\\nfromChar :: Integral a =\\u003e Char -\\u003e a\\nfromChar c | c \\u003c= '9' = fromBase '0' c\\n           | c \\u003c= 'Z' = fromBase 'A' c\\n           | otherwise = fromBase 'a' c\\n  where \\n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \\n\\nshowBase :: Integral a =\\u003e a -\\u003e a -\\u003e String\\nshowBase b n | b \\u003c 1 || n \\u003c 0 = \\"\\"\\n             | n == 0 = \\"0\\"\\n             | otherwise = digitsP \\"\\" n\\n  where\\n    digitsP ds k | dc `seq` ds `seq` False = undefined\\n                 | k == 0 = ds\\n                 | otherwise = digitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` b\\n        dc = fromDigit $! d\\n\\ntoBase :: Integral a =\\u003e Char -\\u003e a -\\u003e Char\\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\\n\\nfromDigit :: Integral a =\\u003e a -\\u003e Char\\nfromDigit d | d \\u003c= 9 = toBase '0' d\\n            | otherwise = toBase 'a' d\\n\\nfromDigitC :: Integral a =\\u003e a -\\u003e Char\\nfromDigitC d | d \\u003c= 9 = toBase '0' d\\n             | otherwise = toBase 'A' d"}
326	42	7967bfe6227303c60d66a37c	superseded	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule OctalSeq( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readOct' 0\n  where \n    readOct' acc "" = acc `seq` acc\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\n      where\n        toOctVal '0' = 0\n        toOctVal '1' = 1\n        toOctVal '2' = 2\n        toOctVal '3' = 3\n        toOctVal '4' = 4\n        toOctVal '5' = 5\n        toOctVal '6' = 6\n        toOctVal '7' = 7\n        toOctVal  _  = error "invalid digit"\n\nshowOct :: Integral a => a -> String\nshowOct n | n < 0 = ""\n          | n == 0 = "0"\n          | otherwise = octDigitsP "" n\n  where\n    octDigitsP ds 0 = ds `seq` ds\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` 8\n        dc = toOctChar $! d\n        toOctChar 0 = '0'\n        toOctChar 1 = '1'\n        toOctChar 2 = '2'\n        toOctChar 3 = '3'\n        toOctChar 4 = '4'\n        toOctChar 5 = '5'\n        toOctChar 6 = '6'\n        toOctChar 7 = '7'\n        toOctChar _ = error "invalid digit"	\N	\N	0	1	228	OctalSeq.hs	2015-08-18 16:26:44	2015-08-18 16:26:44	{"OctalSeq.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule OctalSeq( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readOct' 0\\n  where \\n    readOct' acc \\"\\" = acc `seq` acc\\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\\n      where\\n        toOctVal '0' = 0\\n        toOctVal '1' = 1\\n        toOctVal '2' = 2\\n        toOctVal '3' = 3\\n        toOctVal '4' = 4\\n        toOctVal '5' = 5\\n        toOctVal '6' = 6\\n        toOctVal '7' = 7\\n        toOctVal  _  = error \\"invalid digit\\"\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct n | n \\u003c 0 = \\"\\"\\n          | n == 0 = \\"0\\"\\n          | otherwise = octDigitsP \\"\\" n\\n  where\\n    octDigitsP ds 0 = ds `seq` ds\\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` 8\\n        dc = toOctChar $! d\\n        toOctChar 0 = '0'\\n        toOctChar 1 = '1'\\n        toOctChar 2 = '2'\\n        toOctChar 3 = '3'\\n        toOctChar 4 = '4'\\n        toOctChar 5 = '5'\\n        toOctChar 6 = '6'\\n        toOctChar 7 = '7'\\n        toOctChar _ = error \\"invalid digit\\""}
327	27	be88571792e7b5fb73832cc9	pending	coffeescript	bob	unless String::trim then String::trim = -> @replace /^\\s+|\\s+$/g, ""\n\nclass Bob\n\they:\t(input) ->\n\t\t# check for all whitespace\n\t\tif "" is input.trim()\n\t\t\treturn "Fine. Be that way!"\n\t\t# check for caps\n\t\tif input is input.toUpperCase()\n\t\t\treturn "Woah, chill out!"\n\t\t# check for ?\n\t\tif input[-1..] is "?"\n\t\t\treturn "Sure."\n\t\t# default case\n\t\treturn "Whatever."\n\t\t\nmodule.exports = Bob	\N	\N	0	1	229	bob.coffee	2015-08-25 00:07:01	2015-08-25 00:07:01	{"bob.coffee":"unless String::trim then String::trim = -\\u003e @replace /^\\\\s+|\\\\s+$/g, \\"\\"\\n\\nclass Bob\\n\\they:\\t(input) -\\u003e\\n\\t\\t# check for all whitespace\\n\\t\\tif \\"\\" is input.trim()\\n\\t\\t\\treturn \\"Fine. Be that way!\\"\\n\\t\\t# check for caps\\n\\t\\tif input is input.toUpperCase()\\n\\t\\t\\treturn \\"Woah, chill out!\\"\\n\\t\\t# check for ?\\n\\t\\tif input[-1..] is \\"?\\"\\n\\t\\t\\treturn \\"Sure.\\"\\n\\t\\t# default case\\n\\t\\treturn \\"Whatever.\\"\\n\\t\\t\\nmodule.exports = Bob"}
328	45	130bbbb977acb49a90e83898	done	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\nopen System.Collections.Generic\r\n\r\ntype RobotName() = \r\n    static let usedNames = new List<String>()\r\n\r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let rec buildName () =\r\n        let candidate = \r\n            String.Concat [ randomLetter(); randomLetter(); \r\n                            randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n        if usedNames.Contains(candidate) then \r\n            buildName() \r\n        else \r\n            usedNames.Add(candidate)\r\n            candidate   \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	3	230	RobotName.fs	2015-09-07 09:32:24	2015-09-07 09:32:24	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\nopen System.Collections.Generic\\r\\n\\r\\ntype RobotName() = \\r\\n    static let usedNames = new List\\u003cString\\u003e()\\r\\n\\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let rec buildName () =\\r\\n        let candidate = \\r\\n            String.Concat [ randomLetter(); randomLetter(); \\r\\n                            randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n        if usedNames.Contains(candidate) then \\r\\n            buildName() \\r\\n        else \\r\\n            usedNames.Add(candidate)\\r\\n            candidate   \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
329	45	4681e1cfc9b25cb32c0e4367	superseded	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\n\r\ntype RobotName() = \r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let buildName () =\r\n        String.Concat [ randomLetter(); randomLetter(); \r\n                        randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	2	230	RobotName.fs	2015-09-09 03:20:01	2015-09-09 03:20:01	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        String.Concat [ randomLetter(); randomLetter(); \\r\\n                        randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
330	45	4c712a3c04e8c52c9ab9bee9	superseded	fsharp	robot-name	﻿namespace RobotName\r\n\r\ntype RobotName() = \r\n    let random = System.Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\r\n    let randomDigit () = (random.Next() % 10).ToString()\r\n\r\n    let buildName () =\r\n        (seq {0..1} \r\n         |> Seq.map (fun _ -> randomLetter())\r\n         |> String.concat "")\r\n        +\r\n        (seq {0..2}\r\n         |> Seq.map (fun _ -> randomDigit())\r\n         |> String.concat "")\r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	1	230	RobotName.fs	2015-09-20 01:58:06	2015-09-20 01:58:06	{"RobotName.fs":"﻿namespace RobotName\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = System.Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\\r\\n    let randomDigit () = (random.Next() % 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        (seq {0..1} \\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomLetter())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n        +\\r\\n        (seq {0..2}\\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomDigit())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
\.


--
-- Name: submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submissions_id_seq', 330, true);


--
-- Data for Name: team_managers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_managers (id, user_id, team_id) FROM stdin;
1	2	1
2	3	1
3	4	1
4	2	2
5	2	3
6	2	4
7	3	4
8	4	5
9	3	6
10	3	7
\.


--
-- Name: team_managers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_managers_id_seq', 10, true);


--
-- Data for Name: team_memberships; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_memberships (id, team_id, user_id, confirmed, created_at, updated_at, inviter_id) FROM stdin;
1	1	22	t	1976-11-18 23:28:25	1976-11-18 23:28:25	\N
2	1	15	t	1973-05-10 08:45:53	1973-05-10 08:45:53	\N
3	1	18	t	1970-04-13 00:58:24	1970-04-13 00:58:24	\N
4	1	23	t	1979-12-08 08:29:00	1979-12-08 08:29:00	\N
5	1	11	t	1975-10-21 18:12:06	1975-10-21 18:12:06	\N
6	1	8	t	2002-06-21 23:43:05	2002-06-21 23:43:05	\N
7	1	7	t	1977-02-26 14:30:37	1977-02-26 14:30:37	\N
8	1	30	t	2010-04-29 14:32:05	2010-04-29 14:32:05	\N
9	1	31	t	2015-03-05 10:52:19	2015-03-05 10:52:19	\N
10	1	36	t	2008-02-02 07:13:52	2008-02-02 07:13:52	\N
11	1	16	f	2003-02-02 08:31:29	2003-02-02 08:31:29	\N
12	1	17	f	1984-05-25 10:57:19	1984-05-25 10:57:19	\N
13	1	29	f	1989-02-25 16:20:27	1989-02-25 16:20:27	\N
14	1	32	f	2002-12-28 00:38:39	2002-12-28 00:38:39	\N
15	1	38	f	1993-04-13 12:40:10	1993-04-13 12:40:10	\N
16	1	42	f	1974-05-07 09:09:57	1974-05-07 09:09:57	\N
17	1	43	f	1978-01-10 22:46:55	1978-01-10 22:46:55	\N
18	1	47	f	1974-06-22 14:58:10	1974-06-22 14:58:10	\N
19	2	3	t	2009-12-22 18:17:24	2009-12-22 18:17:24	\N
20	2	36	t	2007-12-03 08:16:14	2007-12-03 08:16:14	\N
21	2	31	t	2010-09-27 10:44:27	2010-09-27 10:44:27	\N
22	2	47	t	2013-09-29 02:08:30	2013-09-29 02:08:30	\N
23	2	19	f	1994-11-10 09:38:22	1994-11-10 09:38:22	\N
24	2	38	f	1984-06-28 07:46:05	1984-06-28 07:46:05	\N
25	3	38	f	1971-06-13 16:44:37	1971-06-13 16:44:37	\N
26	3	3	f	1987-06-11 06:20:27	1987-06-11 06:20:27	\N
27	4	3	t	1990-07-14 00:09:57	1990-07-14 00:09:57	\N
28	4	32	t	1994-09-21 06:41:51	1994-09-21 06:41:51	\N
29	4	22	t	2008-12-30 06:07:21	2008-12-30 06:07:21	\N
30	4	27	t	1971-01-28 09:58:23	1971-01-28 09:58:23	\N
31	4	20	t	2001-03-10 17:47:00	2001-03-10 17:47:00	\N
32	4	25	t	1998-11-14 00:47:34	1998-11-14 00:47:34	\N
33	4	19	t	2000-03-01 04:47:40	2000-03-01 04:47:40	\N
34	4	24	t	1974-08-22 21:14:05	1974-08-22 21:14:05	\N
35	4	26	t	2001-01-24 09:19:59	2001-01-24 09:19:59	\N
36	4	21	t	2001-06-20 00:34:13	2001-06-20 00:34:13	\N
37	4	38	f	1975-02-01 11:05:52	1975-02-01 11:05:52	\N
38	4	12	f	2001-05-30 22:43:54	2001-05-30 22:43:54	\N
39	4	14	f	1998-11-16 23:34:50	1998-11-16 23:34:50	\N
40	5	32	t	1997-05-15 04:40:14	1997-05-15 04:40:14	\N
41	5	40	t	1990-03-07 23:08:49	1990-03-07 23:08:49	\N
42	5	35	t	1980-07-17 21:43:02	1980-07-17 21:43:02	\N
43	5	37	t	1987-06-25 18:24:06	1987-06-25 18:24:06	\N
44	5	33	t	1982-08-24 07:21:27	1982-08-24 07:21:27	\N
45	5	36	t	2013-09-16 03:52:02	2013-09-16 03:52:02	\N
46	5	34	t	1985-01-28 04:28:35	1985-01-28 04:28:35	\N
47	5	39	t	1986-02-28 01:53:57	1986-02-28 01:53:57	\N
48	5	41	f	1989-08-25 22:51:02	1989-08-25 22:51:02	\N
49	5	38	f	2013-08-25 10:24:48	2013-08-25 10:24:48	\N
50	5	3	f	1998-04-13 01:59:52	1998-04-13 01:59:52	\N
51	6	6	t	2005-08-18 22:18:08	2005-08-18 22:18:08	\N
52	6	7	t	2003-10-23 14:13:21	2003-10-23 14:13:21	\N
53	6	8	t	2005-11-30 19:52:23	2005-11-30 19:52:23	\N
54	6	9	t	2014-11-14 06:49:09	2014-11-14 06:49:09	\N
55	6	11	t	1996-10-26 19:27:02	1996-10-26 19:27:02	\N
56	6	12	t	1998-06-10 01:59:23	1998-06-10 01:59:23	\N
57	6	13	t	1988-08-02 22:10:52	1988-08-02 22:10:52	\N
58	6	14	t	1995-07-16 07:17:07	1995-07-16 07:17:07	\N
59	6	15	t	2013-12-24 07:07:20	2013-12-24 07:07:20	\N
60	6	16	t	2015-01-30 06:37:46	2015-01-30 06:37:46	\N
61	6	17	t	1995-08-25 13:00:14	1995-08-25 13:00:14	\N
62	6	18	t	1987-02-09 04:07:50	1987-02-09 04:07:50	\N
63	6	23	t	1990-05-30 10:25:30	1990-05-30 10:25:30	\N
64	6	28	t	1995-10-17 20:23:58	1995-10-17 20:23:58	\N
65	6	29	t	1975-11-07 16:46:35	1975-11-07 16:46:35	\N
66	6	30	t	2010-05-02 21:30:10	2010-05-02 21:30:10	\N
67	6	31	t	2006-04-02 14:12:39	2006-04-02 14:12:39	\N
68	6	32	t	1997-03-23 00:25:55	1997-03-23 00:25:55	\N
69	6	38	t	1974-03-01 18:21:49	1974-03-01 18:21:49	\N
70	6	42	t	1979-11-30 00:58:08	1979-11-30 00:58:08	\N
71	6	43	t	2004-11-27 14:16:51	2004-11-27 14:16:51	\N
72	6	44	t	2001-06-30 08:55:46	2001-06-30 08:55:46	\N
73	6	45	t	2011-10-26 00:01:43	2011-10-26 00:01:43	\N
74	6	46	t	2012-05-23 05:20:12	2012-05-23 05:20:12	\N
75	6	47	t	1971-07-04 05:40:44	1971-07-04 05:40:44	\N
76	6	48	t	1972-11-10 16:58:18	1972-11-10 16:58:18	\N
77	6	49	t	1972-06-24 09:30:06	1972-06-24 09:30:06	\N
78	7	3	t	2015-06-23 12:18:46	2015-06-23 12:18:46	\N
79	7	39	t	2007-03-10 03:11:27	2007-03-10 03:11:27	\N
80	7	32	t	2000-03-25 23:12:46	2000-03-25 23:12:46	\N
81	7	38	f	1992-06-25 07:14:21	1992-06-25 07:14:21	\N
\.


--
-- Name: team_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_memberships_id_seq', 81, true);


--
-- Data for Name: teams; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY teams (id, slug, name, created_at, updated_at) FROM stdin;
1	baconesia	baconesia	2015-08-04 06:38:08.371503	2015-08-04 06:38:08.371503
2	chocolades	chocolades	2015-01-14 09:52:49.405348	2015-01-14 09:52:49.405348
3	ghost	ghost	2015-05-07 20:18:24.414282	2015-05-07 20:18:24.414282
4	motley	motley	2015-07-13 20:36:33.418529	2015-07-13 20:36:33.418529
5	rugrats	rugrats	2015-07-01 21:22:45.437356	2015-07-01 21:22:45.437356
6	slate	slate	2015-06-10 09:46:38.452851	2015-06-10 09:46:38.452851
7	polkadots	polkadots	2015-03-25 06:57:18.489606	2015-03-25 06:57:18.489606
\.


--
-- Name: teams_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('teams_id_seq', 7, true);


--
-- Data for Name: user_exercises; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY user_exercises (id, user_id, language, slug, iteration_count, state, completed_at, key, created_at, updated_at, is_nitpicker, archived, last_iteration_at, last_activity_at, last_activity, fetched_at) FROM stdin;
1	9	fsharp	robot-name	3	done	\N	29f6b0bb984c38d7921db4ac	2015-03-22 14:42:51	2015-03-22 14:42:51	f	t	2015-07-04 21:55:06	2015-07-04 21:55:06	@quentin commented	\N
2	11	ruby	grains	1	done	\N	47069c5a9d47a70daa864c98	2015-05-03 00:40:21	2015-05-03 00:40:21	f	t	2015-08-16 17:23:49	2015-08-16 17:23:49	Submitted an iteration	\N
3	11	fsharp	robot-name	3	done	\N	2eee549c380f9f61e11a0295	2015-04-24 01:04:59	2015-04-24 01:04:59	f	t	2015-08-10 23:00:11	2015-08-10 23:00:11	@quentin commented	\N
4	11	javascript	gigasecond	1	pending	\N	d6d702f81fb93c461b3346c8	2015-05-18 15:50:28	2015-05-18 15:50:28	f	f	2015-07-28 11:52:28	2015-07-28 11:52:28	@bob commented	\N
5	11	ruby	saddle-points	2	pending	\N	eabd75ec76317d6cb5bf15e4	2015-04-29 23:34:49	2015-04-29 23:34:49	f	f	2015-07-15 06:11:08	2015-07-15 06:11:08	@quentin commented	\N
6	11	haskell	leap	4	pending	\N	0f56444579d4a7479feecf7a	2015-06-11 21:19:08	2015-06-11 21:19:08	f	t	2015-09-23 05:50:13	2015-09-23 05:50:13	Submitted an iteration	\N
41	22	python	sieve	1	pending	\N	ba2c516c95c2d676a0043a2b	2015-02-28 18:47:07	2015-02-28 18:47:07	f	f	2015-04-02 22:11:20	2015-04-02 22:11:20	@alice commented	\N
7	11	haskell	accumulate	2	done	\N	81a82bc474ca52981aa7b05a	2015-07-28 13:30:32	2015-07-28 13:30:32	f	t	2015-09-10 19:30:09	2015-09-10 19:30:09	@river commented	\N
8	11	javascript	point-mutations	0	pending	\N	34a0c574c0423d2ab6924152	2015-08-03 10:28:17	2015-08-03 10:28:17	f	f	2015-08-03 10:28:17	2015-08-03 10:28:17	\N	\N
9	12	ruby	grains	1	done	\N	093ccb3ce1b079778f5c018e	2015-08-09 01:53:57	2015-08-09 01:53:57	f	t	2015-09-23 19:16:09	2015-09-23 19:16:09	Submitted an iteration	\N
10	12	coffeescript	bob	1	pending	\N	4da766e3fbb24148381cc8a8	2015-08-29 12:57:12	2015-08-29 12:57:12	f	f	2015-09-04 21:07:24	2015-09-04 21:07:24	Submitted an iteration	\N
11	12	javascript	sieve	1	done	\N	282b6fa098e8129255a2e86d	2015-07-24 17:34:46	2015-07-24 17:34:46	f	t	2015-08-06 20:23:09	2015-08-06 20:23:09	@russ commented	\N
12	12	ruby	bob	2	pending	\N	be1b64522af0e20276ed7d49	2015-07-30 10:00:00	2015-07-30 10:00:00	f	f	2015-08-31 20:12:24	2015-08-31 20:12:24	@alice commented	\N
13	12	javascript	phone-number	0	pending	\N	537a419e6ee899f8f3374143	2015-08-27 18:26:10	2015-08-27 18:26:10	f	f	2015-08-27 18:26:10	2015-08-27 18:26:10	\N	\N
14	12	ruby	twelve-days	1	pending	\N	a583a03b1007779ffee35702	2015-07-30 18:00:54	2015-07-30 18:00:54	f	t	2015-07-31 09:57:50	2015-07-31 09:57:50	@lisa commented	\N
15	15	python	wordy	1	pending	\N	7240db78e9741d72538aecb8	2015-03-21 05:01:20	2015-03-21 05:01:20	f	f	2015-06-03 06:00:24	2015-06-03 06:00:24	@ruben commented	\N
16	15	javascript	anagram	1	done	\N	f83b27f5674348777a693539	2015-08-11 00:41:34	2015-08-11 00:41:34	f	t	2015-08-27 09:55:41	2015-08-27 09:55:41	@river commented	\N
17	15	ruby	sieve	1	pending	\N	ea3a4f824aaf53838c70ebc9	2015-06-01 00:54:56	2015-06-01 00:54:56	f	f	2015-07-04 06:11:09	2015-07-04 06:11:09	Submitted an iteration	\N
18	22	python	grade-school	1	pending	\N	7eb708f7f80fcb040389a9f4	2015-03-25 05:24:17	2015-03-25 05:24:17	f	t	2015-05-19 04:39:33	2015-05-19 04:39:33	Submitted an iteration	\N
19	22	perl5	simple-cipher	2	done	\N	ec762cc263f4cdfe902d2f4b	2015-03-08 19:19:58	2015-03-08 19:19:58	f	t	2015-08-29 07:50:55	2015-08-29 07:50:55	@river commented	\N
20	22	javascript	gigasecond	1	pending	\N	62b457465d321754dbc4a508	2015-03-07 15:31:56	2015-03-07 15:31:56	f	f	2015-03-18 02:06:28	2015-03-18 02:06:28	@bob commented	\N
21	22	lua	hamming	1	pending	\N	075aeaa76587f4e13dd40d11	2015-02-24 21:46:03	2015-02-24 21:46:03	f	f	2015-03-18 06:28:09	2015-03-18 06:28:09	Submitted an iteration	\N
22	22	javascript	hamming	1	pending	\N	2669bff2f6968834659438de	2015-05-25 04:45:11	2015-05-25 04:45:11	f	f	2015-09-17 16:47:04	2015-09-17 16:47:04	@mia commented	\N
23	22	python	bob	1	pending	\N	8aa992ac9c042c897516b885	2015-07-26 05:31:51	2015-07-26 05:31:51	f	f	2015-08-02 05:28:45	2015-08-02 05:28:45	Submitted an iteration	\N
24	22	python	leap	3	done	\N	2a3e1888886f434001b668b0	2015-01-31 02:40:01	2015-01-31 02:40:01	f	t	2015-07-28 04:00:35	2015-07-28 04:00:35	@dawson commented	\N
25	22	erlang	strain	1	pending	\N	368d42c269457da8c8e48c61	2015-02-21 21:05:29	2015-02-21 21:05:29	f	t	2015-07-08 00:43:57	2015-07-08 00:43:57	@norma commented	\N
26	22	haskell	strain	1	pending	\N	a9e2e0eb343e5aeee3dd7018	2015-04-07 22:03:01	2015-04-07 22:03:01	f	f	2015-05-25 12:33:19	2015-05-25 12:33:19	@isaac commented	\N
27	22	python	wordy	1	pending	\N	f9acda98cadf65188836065d	2015-02-05 23:34:01	2015-02-05 23:34:01	f	f	2015-04-30 20:06:33	2015-04-30 20:06:33	@ruben commented	\N
28	22	haskell	accumulate	2	done	\N	9eb67f797825b93dcc693d14	2015-05-25 18:45:43	2015-05-25 18:45:43	f	t	2015-08-21 13:56:09	2015-08-21 13:56:09	@river commented	\N
29	22	javascript	phone-number	0	pending	\N	b4439bf009ce960a199747bd	2015-04-28 19:49:59	2015-04-28 19:49:59	f	f	2015-04-28 19:49:59	2015-04-28 19:49:59	\N	\N
30	22	ruby	prime-factors	1	done	\N	24a81fff385c5755c0cd293e	2015-04-28 13:57:43	2015-04-28 13:57:43	f	t	2015-05-18 05:42:26	2015-05-18 05:42:26	@opal commented	\N
31	22	coffeescript	bob	1	pending	\N	51369a6e08955e496629aae5	2015-06-18 07:59:44	2015-06-18 07:59:44	f	f	2015-08-08 21:33:12	2015-08-08 21:33:12	Submitted an iteration	\N
32	22	clojure	robot-name	1	pending	\N	e572b639b2670e6207ab1838	2015-02-03 10:39:59	2015-02-03 10:39:59	f	f	2015-04-10 22:27:41	2015-04-10 22:27:41	@vince commented	\N
33	22	ruby	raindrops	1	pending	\N	3248460b5d5f04d4e5464449	2015-03-24 00:45:54	2015-03-24 00:45:54	f	f	2015-03-28 21:27:26	2015-03-28 21:27:26	@vince commented	\N
34	22	ruby	anagram	1	done	\N	455503cca9e2eed041135825	2015-04-29 05:24:42	2015-04-29 05:24:42	f	t	2015-05-29 07:55:10	2015-05-29 07:55:10	@river commented	\N
35	22	ruby	bob	2	pending	\N	fb561adadfe6e11ed069fc7b	2015-05-21 09:41:15	2015-05-21 09:41:15	f	f	2015-08-20 09:31:06	2015-08-20 09:31:06	@alice commented	\N
36	22	fsharp	robot-name	3	done	\N	6b7036ba54d92e6c184cceaa	2015-01-31 20:41:55	2015-01-31 20:41:55	f	t	2015-09-02 22:30:52	2015-09-02 22:30:52	@quentin commented	\N
37	22	haskell	leap	1	pending	\N	5588b27726eecebb51b9c95b	2015-05-20 00:18:41	2015-05-20 00:18:41	f	f	2015-07-29 23:52:26	2015-07-29 23:52:26	@yvette commented	\N
38	22	haskell	octal	2	done	\N	1e84bbd21ea1c34f3e2d0aae	2015-03-01 19:27:58	2015-03-01 19:27:58	f	t	2015-09-15 08:43:45	2015-09-15 08:43:45	Submitted an iteration	\N
39	22	ruby	roman-numerals	1	done	\N	0d812875cdcc3506e8b89c92	2015-04-16 13:06:39	2015-04-16 13:06:39	f	t	2015-05-03 06:05:53	2015-05-03 06:05:53	@yvette commented	\N
40	22	javascript	sieve	1	done	\N	bc945b8cbd5307810c4408c2	2015-02-06 18:30:15	2015-02-06 18:30:15	f	t	2015-08-15 13:50:32	2015-08-15 13:50:32	@russ commented	\N
42	22	javascript	bob	2	done	\N	73ffffae0e519f985fccd01d	2015-04-25 21:42:16	2015-04-25 21:42:16	f	t	2015-06-07 01:10:02	2015-06-07 01:10:02	@yvette commented	\N
43	22	haskell	simple-linked-list	2	pending	\N	44254d3c0ebb19519961872e	2015-04-25 03:07:49	2015-04-25 03:07:49	f	t	2015-07-17 09:31:06	2015-07-17 09:31:06	@quentin commented	\N
44	22	haskell	word-count	2	done	\N	53b00211709d24f4ae094bb3	2015-05-21 18:41:51	2015-05-21 18:41:51	f	t	2015-07-19 21:51:15	2015-07-19 21:51:15	@charlie commented	\N
45	22	clojure	nucleotide-count	3	done	\N	89c002f0f5fb53da18e60365	2015-02-23 20:43:19	2015-02-23 20:43:19	f	t	2015-09-17 05:59:18	2015-09-17 05:59:18	@bob commented	\N
46	22	python	meetup	1	pending	\N	4c7834cf546e597937a438df	2015-05-24 04:03:54	2015-05-24 04:03:54	f	f	2015-06-08 14:55:23	2015-06-08 14:55:23	Submitted an iteration	\N
47	22	ruby	saddle-points	2	pending	\N	68142133a81d0c41de1e5ac4	2015-02-06 14:18:08	2015-02-06 14:18:08	f	f	2015-05-29 20:55:34	2015-05-29 20:55:34	@quentin commented	\N
48	22	javascript	anagram	1	done	\N	f7d16bd61beafb3b72c892fc	2015-05-15 01:05:39	2015-05-15 01:05:39	f	t	2015-08-13 18:44:40	2015-08-13 18:44:40	@river commented	\N
49	28	javascript	hamming	1	pending	\N	e4f7023139236f3e515f0bf4	2015-06-17 01:45:02	2015-06-17 01:45:02	f	f	2015-09-11 17:27:38	2015-09-11 17:27:38	@mia commented	\N
50	28	ruby	sieve	1	pending	\N	58c16d0c1ba3c9c1871794c7	2015-04-07 14:10:44	2015-04-07 14:10:44	f	f	2015-07-13 12:06:52	2015-07-13 12:06:52	Submitted an iteration	\N
51	28	elixir	sublist	1	done	\N	1c032ee9c8dda9e9419c47e8	2015-05-23 23:43:03	2015-05-23 23:43:03	f	t	2015-07-22 02:46:45	2015-07-22 02:46:45	Submitted an iteration	\N
52	29	python	sieve	1	pending	\N	51225b297860c5491398bf23	2015-03-05 02:13:31	2015-03-05 02:13:31	f	f	2015-08-18 11:10:02	2015-08-18 11:10:02	@alice commented	\N
53	29	clojure	nucleotide-count	3	done	\N	41845b754c727fd843f987aa	2015-03-05 05:30:55	2015-03-05 05:30:55	f	t	2015-06-18 15:58:05	2015-06-18 15:58:05	@bob commented	\N
54	29	ruby	twelve-days	1	pending	\N	513c749ae1cfb3a5d1b4378b	2015-03-12 23:34:38	2015-03-12 23:34:38	f	f	2015-03-16 22:05:51	2015-03-16 22:05:51	@lisa commented	\N
55	29	ruby	protein-translation	1	pending	\N	894fdf51c5b8f12dff2cea86	2015-04-23 18:28:27	2015-04-23 18:28:27	f	f	2015-09-14 04:17:33	2015-09-14 04:17:33	@ursula commented	\N
56	31	javascript	phone-number	0	pending	\N	87ddd5027c821ecc095c6753	2015-09-13 05:03:24	2015-09-13 05:03:24	f	f	2015-09-13 05:03:24	2015-09-13 05:03:24	\N	\N
57	33	lua	hamming	1	pending	\N	d637b95d191d232e9ba0d00e	2015-05-06 23:18:54	2015-05-06 23:18:54	f	f	2015-06-17 12:24:47	2015-06-17 12:24:47	Submitted an iteration	\N
58	33	python	wordy	1	pending	\N	f91596cd7c5cff8bcddb4152	2015-04-02 20:56:57	2015-04-02 20:56:57	f	f	2015-08-27 20:16:02	2015-08-27 20:16:02	@ruben commented	\N
59	33	javascript	phone-number	0	pending	\N	02416bcaed0c2e9769f05680	2015-04-24 19:01:31	2015-04-24 19:01:31	f	f	2015-04-24 19:01:31	2015-04-24 19:01:31	\N	\N
60	33	javascript	gigasecond	1	pending	\N	3157c7dc869aa98aa8aad27e	2015-06-09 03:29:49	2015-06-09 03:29:49	f	f	2015-08-29 07:01:39	2015-08-29 07:01:39	@bob commented	\N
61	33	javascript	sieve	1	done	\N	31437be883c3dc7c39f20042	2015-05-28 04:04:11	2015-05-28 04:04:11	f	t	2015-08-08 18:43:27	2015-08-08 18:43:27	@russ commented	\N
62	33	ruby	roman-numerals	1	pending	\N	bd0b43eda7c111cba0ef86a0	2015-06-17 06:35:28	2015-06-17 06:35:28	f	f	2015-09-18 16:07:43	2015-09-18 16:07:43	@charlie commented	\N
63	33	python	grade-school	1	pending	\N	97396097d02b1868a0f24bf3	2015-07-19 06:24:25	2015-07-19 06:24:25	f	f	2015-09-10 04:07:12	2015-09-10 04:07:12	Submitted an iteration	\N
64	38	fsharp	robot-name	3	done	\N	dc093a50795dfee8d6b0d4f3	2015-06-12 12:12:14	2015-06-12 12:12:14	f	t	2015-09-16 13:29:46	2015-09-16 13:29:46	@quentin commented	\N
65	38	go	leap	2	pending	\N	efb8fcc24a54427a5627a7d3	2015-06-13 01:15:47	2015-06-13 01:15:47	f	f	2015-08-25 15:11:34	2015-08-25 15:11:34	@jarrod commented	\N
66	38	javascript	sieve	1	done	\N	80c63d1419780f07d758bdba	2015-06-28 06:16:48	2015-06-28 06:16:48	f	t	2015-08-09 07:30:11	2015-08-09 07:30:11	@russ commented	\N
67	38	ruby	raindrops	1	pending	\N	c14906d46d2dfcb74348e8d1	2015-08-28 17:19:54	2015-08-28 17:19:54	f	f	2015-09-19 15:38:56	2015-09-19 15:38:56	@yvette commented	\N
68	38	haskell	bob	2	done	\N	410e15dcef33acd1664f2de3	2015-07-03 10:14:59	2015-07-03 10:14:59	f	t	2015-09-16 22:46:59	2015-09-16 22:46:59	@opal commented	\N
69	38	python	bob	1	pending	\N	7e473cf320692c18c6651dc2	2015-06-03 07:50:07	2015-06-03 07:50:07	f	t	2015-06-24 12:58:57	2015-06-24 12:58:57	@ursula commented	\N
70	38	perl5	simple-cipher	2	done	\N	7d8e3f659f5b094439bb9d4b	2015-05-21 17:07:48	2015-05-21 17:07:48	f	t	2015-05-27 09:50:02	2015-05-27 09:50:02	@river commented	\N
71	38	javascript	bob	2	done	\N	cb6fb1242403bdf2f5d9b392	2015-05-26 13:19:34	2015-05-26 13:19:34	f	t	2015-08-31 10:21:08	2015-08-31 10:21:08	@yvette commented	\N
72	38	ruby	nucleotide-count	3	done	\N	d5fae9e43a091c8c956ed882	2015-05-22 03:17:30	2015-05-22 03:17:30	f	t	2015-09-09 03:00:10	2015-09-09 03:00:10	@opal commented	\N
73	38	javascript	word-count	1	pending	\N	c63fbd51bd0311ce5099e0d4	2015-05-30 01:26:05	2015-05-30 01:26:05	f	t	2015-08-18 13:00:42	2015-08-18 13:00:42	@russ commented	\N
74	38	haskell	word-count	2	done	\N	fa87b5500ce10bf608bd3e3b	2015-07-18 05:48:35	2015-07-18 05:48:35	f	t	2015-08-14 06:06:01	2015-08-14 06:06:01	@charlie commented	\N
75	38	scala	word-count	1	done	\N	b08977d86ba013cc713c4cb4	2015-06-08 00:07:42	2015-06-08 00:07:42	f	t	2015-07-14 00:43:29	2015-07-14 00:43:29	@quentin commented	\N
76	38	python	gigasecond	2	pending	\N	b7912f4db3a0b73c4d8cc76c	2015-06-14 19:19:21	2015-06-14 19:19:21	f	f	2015-09-02 15:49:34	2015-09-02 15:49:34	Submitted an iteration	\N
77	38	python	grade-school	1	pending	\N	adec2d03bda1b973fdf12679	2015-07-21 17:26:52	2015-07-21 17:26:52	f	f	2015-09-09 15:02:00	2015-09-09 15:02:00	Submitted an iteration	\N
78	38	javascript	crypto-square	2	done	\N	e1e20be7bb4d63005368734c	2015-07-15 20:35:40	2015-07-15 20:35:40	f	t	2015-09-15 23:27:06	2015-09-15 23:27:06	@wilson commented	\N
79	40	python	wordy	1	pending	\N	fa82ea79423874e5ac40c728	2015-08-06 06:05:48	2015-08-06 06:05:48	f	f	2015-09-22 13:31:38	2015-09-22 13:31:38	@ruben commented	\N
80	40	python	grade-school	2	done	\N	873c6ffbe796dce4cbe1e825	2015-07-28 21:22:24	2015-07-28 21:22:24	f	t	2015-09-01 06:23:11	2015-09-01 06:23:11	@mary commented	\N
81	40	javascript	pythagorean-triplet	2	done	\N	c2c5a5be8988d0a6b6be44ca	2015-08-16 00:09:26	2015-08-16 00:09:26	f	t	2015-09-19 23:42:10	2015-09-19 23:42:10	@opal commented	\N
82	40	ruby	sum-of-multiples	1	pending	\N	872d7f530ec4a1aba04f782c	2015-09-05 00:07:57	2015-09-05 00:07:57	f	f	2015-09-11 03:34:00	2015-09-11 03:34:00	@isaac commented	\N
83	40	ruby	secret-handshake	1	done	\N	3a4c8d9ba69130a6a57bf0d4	2015-07-21 08:50:13	2015-07-21 08:50:13	f	t	2015-09-13 16:46:34	2015-09-13 16:46:34	@frederique commented	\N
84	40	python	word-count	2	pending	\N	11f76150496037f6cd343b4b	2015-07-28 13:06:08	2015-07-28 13:06:08	f	t	2015-08-29 22:23:48	2015-08-29 22:23:48	Submitted an iteration	\N
85	40	csharp	bob	1	pending	\N	6cb7ccb497418d527c3dad44	2015-08-11 21:45:10	2015-08-11 21:45:10	f	f	2015-09-15 20:22:42	2015-09-15 20:22:42	@amelie commented	\N
86	40	go	grains	1	pending	\N	41bdd06c450735e4fdb502c4	2015-08-29 01:37:18	2015-08-29 01:37:18	f	f	2015-09-02 16:15:36	2015-09-02 16:15:36	@randall commented	\N
87	40	haskell	simple-linked-list	2	pending	\N	49c35115f663a51d8a280596	2015-08-29 10:04:47	2015-08-29 10:04:47	f	f	2015-09-09 04:25:29	2015-09-09 04:25:29	@quentin commented	\N
88	40	ruby	hamming	1	pending	\N	1a2db93b15ebc5eba9222b7c	2015-08-08 04:36:02	2015-08-08 04:36:02	f	f	2015-09-23 06:54:59	2015-09-23 06:54:59	@wilson commented	\N
89	40	python	gigasecond	2	pending	\N	e5658343f1a558e1775a9ce0	2015-07-27 07:48:42	2015-07-27 07:48:42	f	f	2015-09-18 09:34:22	2015-09-18 09:34:22	Submitted an iteration	\N
90	40	python	series	2	pending	\N	9fabb77f4cd371927e6666d2	2015-08-04 10:30:01	2015-08-04 10:30:01	f	t	2015-08-14 03:21:04	2015-08-14 03:21:04	@isaac commented	\N
91	44	ruby	roman-numerals	1	done	\N	852c62e6d457a51fcaa6a439	2015-06-24 20:38:32	2015-06-24 20:38:32	f	t	2015-07-06 20:41:07	2015-07-06 20:41:07	@yvette commented	\N
92	44	scala	word-count	1	done	\N	a69daca8ef853c84b7bf40ba	2015-07-24 04:46:22	2015-07-24 04:46:22	f	t	2015-09-09 11:59:53	2015-09-09 11:59:53	@quentin commented	\N
93	44	ruby	say	1	done	\N	b2a29e847635b381b48ec826	2015-08-27 19:31:47	2015-08-27 19:31:47	f	t	2015-09-03 22:26:51	2015-09-03 22:26:51	@quentin commented	\N
94	44	lua	hamming	1	pending	\N	b57a4a2a5d86b092d509caad	2015-06-22 23:05:59	2015-06-22 23:05:59	f	f	2015-06-24 03:41:40	2015-06-24 03:41:40	Submitted an iteration	\N
95	44	javascript	sieve	1	done	\N	60979288120665e75d395526	2015-04-12 18:22:33	2015-04-12 18:22:33	f	t	2015-08-27 10:35:06	2015-08-27 10:35:06	@russ commented	\N
96	44	python	wordy	1	pending	\N	4292f98e82a208a277c00a3c	2015-08-27 10:39:20	2015-08-27 10:39:20	f	f	2015-09-16 15:17:59	2015-09-16 15:17:59	@ruben commented	\N
97	46	lua	hamming	1	pending	\N	fc66cbe909ff3a2b705acdd9	2015-05-26 01:47:57	2015-05-26 01:47:57	f	t	2015-06-14 22:08:18	2015-06-14 22:08:18	Submitted an iteration	\N
98	46	ruby	say	1	done	\N	ced6153ffe3808f6292127a1	2015-04-29 21:57:56	2015-04-29 21:57:56	f	t	2015-05-22 08:44:27	2015-05-22 08:44:27	@quentin commented	\N
99	46	perl5	simple-cipher	2	done	\N	569dde9ff7777377c2f9047a	2015-03-12 17:16:03	2015-03-12 17:16:03	f	t	2015-08-28 01:11:28	2015-08-28 01:11:28	@river commented	\N
100	46	go	grains	1	pending	\N	f1e3846c9d6b33403c21ad4b	2015-04-30 18:08:54	2015-04-30 18:08:54	f	f	2015-06-26 08:27:26	2015-06-26 08:27:26	@randall commented	\N
101	46	perl5	word-count	1	pending	\N	5764a80decf80abec535a874	2015-03-27 06:25:01	2015-03-27 06:25:01	f	f	2015-06-10 06:15:56	2015-06-10 06:15:56	@kieran commented	\N
102	46	javascript	crypto-square	2	done	\N	f78dd67af7caf094e05fbd31	2015-03-29 05:20:27	2015-03-29 05:20:27	f	t	2015-08-08 14:04:38	2015-08-08 14:04:38	@wilson commented	\N
103	48	python	leap	3	done	\N	ccc4d54d166b4b6e0b3a812e	2015-04-24 17:34:37	2015-04-24 17:34:37	f	t	2015-08-17 08:31:18	2015-08-17 08:31:18	@dawson commented	\N
104	49	python	gigasecond	2	pending	\N	60d974c0816622fe63099909	2015-06-17 10:25:29	2015-06-17 10:25:29	f	f	2015-07-13 00:49:40	2015-07-13 00:49:40	Submitted an iteration	\N
105	49	ruby	hamming	1	pending	\N	5553e8dce27252242e5d2a7c	2015-07-04 02:31:19	2015-07-04 02:31:19	f	f	2015-09-03 08:51:50	2015-09-03 08:51:50	@wilson commented	\N
106	49	ruby	nucleotide-count	2	pending	\N	e98609c4cbf210f649add4c7	2015-05-10 03:55:19	2015-05-10 03:55:19	f	f	2015-08-12 12:21:15	2015-08-12 12:21:15	@vince commented	\N
107	49	clojure	nucleotide-count	3	done	\N	6e9765cfac4b1a1535b0084b	2015-07-24 18:43:10	2015-07-24 18:43:10	f	t	2015-09-10 23:35:27	2015-09-10 23:35:27	@bob commented	\N
108	49	scala	word-count	1	done	\N	c9d28097c227fd56c00c1998	2015-05-11 19:30:36	2015-05-11 19:30:36	f	t	2015-07-01 17:13:49	2015-07-01 17:13:49	@quentin commented	\N
109	26	ruby	roman-numerals	1	pending	\N	bb1dd9301f627c00a142c6f7	2015-07-12 03:19:59	2015-07-12 03:19:59	f	f	2015-08-19 08:19:35	2015-08-19 08:19:35	@charlie commented	\N
110	26	clojure	robot-name	1	pending	\N	3246c8e5adfce625651cd093	2015-05-15 18:07:25	2015-05-15 18:07:25	f	f	2015-08-17 09:50:29	2015-08-17 09:50:29	@vince commented	\N
111	26	ruby	nucleotide-count	3	done	\N	38c3fad334348d0934cdeb33	2015-04-25 12:24:40	2015-04-25 12:24:40	f	t	2015-09-02 06:44:57	2015-09-02 06:44:57	@opal commented	\N
112	26	python	bob	1	pending	\N	4e2d3d279aebce7b5bc3a75d	2015-05-03 07:11:42	2015-05-03 07:11:42	f	f	2015-06-20 20:07:40	2015-06-20 20:07:40	Submitted an iteration	\N
113	26	haskell	octal	2	done	\N	486e6c3ce7aa454cc927b772	2015-05-12 02:30:56	2015-05-12 02:30:56	f	t	2015-08-09 02:03:07	2015-08-09 02:03:07	Submitted an iteration	\N
114	26	ruby	word-count	3	pending	\N	b65caa1fc493f71834753c56	2015-04-15 19:21:57	2015-04-15 19:21:57	f	t	2015-09-20 01:42:56	2015-09-20 01:42:56	Submitted an iteration	\N
115	7	python	wordy	1	pending	\N	64cf0f1b879ac57c1ac59506	2015-05-23 01:13:25	2015-05-23 01:13:25	f	f	2015-09-18 19:56:27	2015-09-18 19:56:27	@ruben commented	\N
116	7	ruby	grains	1	done	\N	051578b383475213b94ba2b1	2015-06-08 18:38:57	2015-06-08 18:38:57	f	t	2015-07-20 18:59:55	2015-07-20 18:59:55	Submitted an iteration	\N
117	7	javascript	beer-song	2	done	\N	c7712cfe7da8b55b2904ae1c	2015-07-14 15:02:03	2015-07-14 15:02:03	f	t	2015-08-25 22:19:10	2015-08-25 22:19:10	@diana commented	\N
118	7	ruby	saddle-points	2	pending	\N	ccc367bc094110ee589fbc05	2015-05-26 18:25:41	2015-05-26 18:25:41	f	f	2015-07-24 18:23:50	2015-07-24 18:23:50	@quentin commented	\N
119	7	ruby	say	1	done	\N	f53c7c2ce28be606e8aaca5f	2015-09-12 23:31:13	2015-09-12 23:31:13	f	t	2015-09-22 15:25:15	2015-09-22 15:25:15	@quentin commented	\N
120	7	clojure	binary	1	done	\N	854e81a4b12417803fb134f4	2015-05-15 10:41:33	2015-05-15 10:41:33	f	t	2015-08-01 07:51:25	2015-08-01 07:51:25	@randall commented	\N
121	23	haskell	word-count	2	done	\N	ac03109b1095f2bfecbea188	2015-08-22 01:10:24	2015-08-22 01:10:24	f	t	2015-09-23 10:19:59	2015-09-23 10:19:59	@charlie commented	\N
122	23	ruby	kindergarten-garden	1	pending	\N	ca98f976172c2da37f581fe2	2015-08-21 09:28:28	2015-08-21 09:28:28	f	f	2015-09-22 06:15:38	2015-09-22 06:15:38	@yvette commented	\N
123	23	ruby	nucleotide-count	2	pending	\N	f1d0cb5788ddefe10f143aa0	2015-09-05 06:33:54	2015-09-05 06:33:54	f	t	2015-09-14 20:04:28	2015-09-14 20:04:28	@vince commented	\N
124	23	python	kindergarten-garden	1	pending	\N	36513a81d9141bc68720d559	2015-08-13 02:33:18	2015-08-13 02:33:18	f	f	2015-08-18 02:57:43	2015-08-18 02:57:43	Submitted an iteration	\N
125	23	haskell	bob	2	done	\N	9629ed2e2a851ee67eb9ee06	2015-09-05 07:47:37	2015-09-05 07:47:37	f	t	2015-09-19 08:57:46	2015-09-19 08:57:46	@opal commented	\N
126	23	javascript	hamming	1	pending	\N	e4129cb0b10d31f4666d1f60	2015-08-20 13:26:46	2015-08-20 13:26:46	f	f	2015-08-24 00:05:16	2015-08-24 00:05:16	@ruben commented	\N
127	23	lua	hamming	1	pending	\N	e99167735cabe1cc9e1ac208	2015-09-06 22:11:07	2015-09-06 22:11:07	f	f	2015-09-16 06:16:31	2015-09-16 06:16:31	Submitted an iteration	\N
128	17	elixir	sublist	1	done	\N	b0442e9e27e4bdf675d6f93f	2015-02-13 09:16:53	2015-02-13 09:16:53	f	t	2015-05-14 11:05:35	2015-05-14 11:05:35	Submitted an iteration	\N
129	17	python	beer-song	1	pending	\N	f91785216eb879877749ae38	2015-02-26 15:48:45	2015-02-26 15:48:45	f	f	2015-06-03 16:35:24	2015-06-03 16:35:24	@diana commented	\N
130	20	haskell	octal	2	done	\N	a5ebe51c68ec53b85defa770	2015-04-13 16:23:58	2015-04-13 16:23:58	f	t	2015-07-11 14:49:41	2015-07-11 14:49:41	Submitted an iteration	\N
131	20	clojure	robot-name	1	pending	\N	68e6a8e26b1db255fc76cf67	2015-08-27 07:04:35	2015-08-27 07:04:35	f	f	2015-09-19 23:58:22	2015-09-19 23:58:22	@vince commented	\N
132	20	fsharp	robot-name	3	done	\N	4800b992a5cf6e7b39b0b7c3	2015-04-27 11:29:28	2015-04-27 11:29:28	f	t	2015-08-08 05:17:41	2015-08-08 05:17:41	@quentin commented	\N
133	20	python	point-mutations	2	done	\N	1360196d5e4a1f2d9b9536a6	2015-04-17 10:54:20	2015-04-17 10:54:20	f	t	2015-08-17 09:42:53	2015-08-17 09:42:53	@dawson commented	\N
134	20	python	gigasecond	2	pending	\N	104aaa37ad8832d0c07d6562	2015-05-05 20:41:24	2015-05-05 20:41:24	f	t	2015-08-28 11:32:45	2015-08-28 11:32:45	Submitted an iteration	\N
135	21	ruby	raindrops	1	pending	\N	76424f374e851d761652982e	2015-09-23 16:31:35	2015-09-23 16:31:35	f	f	2015-09-23 18:14:10	2015-09-23 18:14:10	@yvette commented	\N
136	21	fsharp	robot-name	3	done	\N	874962d2f4470603cc729485	2015-09-21 23:51:15	2015-09-21 23:51:15	f	t	2015-09-23 15:18:18	2015-09-23 15:18:18	@quentin commented	\N
137	21	ruby	grains	1	done	\N	48db13291fd59ac353acb1cb	2015-09-21 15:08:02	2015-09-21 15:08:02	f	t	2015-09-22 00:36:28	2015-09-22 00:36:28	Submitted an iteration	\N
138	21	javascript	sieve	1	done	\N	f01391286303e92d362506bf	2015-09-23 02:59:17	2015-09-23 02:59:17	f	t	2015-09-23 07:59:40	2015-09-23 07:59:40	@russ commented	\N
139	21	ruby	say	1	done	\N	d3dfdcdfc998bd127ec05404	2015-09-22 00:58:44	2015-09-22 00:58:44	f	t	2015-09-23 06:10:07	2015-09-23 06:10:07	@quentin commented	\N
140	21	python	kindergarten-garden	1	pending	\N	ecf3d073e67f34d04d543b04	2015-09-21 12:59:42	2015-09-21 12:59:42	f	t	2015-09-21 21:38:55	2015-09-21 21:38:55	Submitted an iteration	\N
141	21	clojure	raindrops	1	pending	\N	8ccca2ca4e1f231843092335	2015-09-22 00:42:26	2015-09-22 00:42:26	f	f	2015-09-22 14:28:32	2015-09-22 14:28:32	@elisa commented	\N
142	21	haskell	leap	1	pending	\N	1561c3f45d89053eaa98b278	2015-09-23 11:23:10	2015-09-23 11:23:10	f	f	2015-09-23 12:00:06	2015-09-23 12:00:06	@yvette commented	\N
143	21	ruby	anagram	1	done	\N	459871c18786b2fd5051d5ca	2015-09-23 00:45:51	2015-09-23 00:45:51	f	t	2015-09-23 15:52:53	2015-09-23 15:52:53	@river commented	\N
144	21	python	bob	1	pending	\N	11b2f962be742989d3ac38c3	2015-09-21 23:05:06	2015-09-21 23:05:06	f	t	2015-09-22 06:20:32	2015-09-22 06:20:32	@ursula commented	\N
145	21	elixir	sublist	1	done	\N	b61ae374d11e3686ab8c7e91	2015-09-21 15:15:32	2015-09-21 15:15:32	f	t	2015-09-21 18:37:26	2015-09-21 18:37:26	Submitted an iteration	\N
146	21	haskell	robot-name	1	done	\N	8c9e7a35e715a91d1be01c9b	2015-09-21 19:19:34	2015-09-21 19:19:34	f	t	2015-09-23 05:58:25	2015-09-23 05:58:25	@ruben commented	\N
147	21	python	luhn	1	done	\N	ee94c08b3f459d6e81fb7d49	2015-09-23 09:16:59	2015-09-23 09:16:59	f	t	2015-09-23 13:22:20	2015-09-23 13:22:20	@russ commented	\N
148	21	ruby	twelve-days	1	pending	\N	f73b6c0621c2bdfbedbc9195	2015-09-22 11:02:38	2015-09-22 11:02:38	f	f	2015-09-23 06:49:38	2015-09-23 06:49:38	@lisa commented	\N
149	21	csharp	raindrops	1	pending	\N	3adace6bddb4d74d8dc9f02d	2015-09-21 23:40:00	2015-09-21 23:40:00	f	f	2015-09-22 18:21:40	2015-09-22 18:21:40	@charlie commented	\N
150	21	go	grains	1	pending	\N	54d42914742c03362ecf096e	2015-09-21 21:18:11	2015-09-21 21:18:11	f	f	2015-09-23 14:46:01	2015-09-23 14:46:01	@randall commented	\N
151	21	lua	hamming	1	pending	\N	c10e6fbb554662e6f969dec1	2015-09-22 01:09:24	2015-09-22 01:09:24	f	t	2015-09-23 12:21:20	2015-09-23 12:21:20	Submitted an iteration	\N
152	21	ruby	hamming	1	pending	\N	d65383f5701c226f26e36a2e	2015-09-21 16:50:37	2015-09-21 16:50:37	f	t	2015-09-22 11:32:11	2015-09-22 11:32:11	@wilson commented	\N
153	21	javascript	phone-number	0	pending	\N	ef38ce0e86a59ed328afcba1	2015-09-22 15:51:24	2015-09-22 15:51:24	f	f	2015-09-22 15:51:24	2015-09-22 15:51:24	\N	\N
154	21	python	hamming	2	pending	\N	336b86cca3d05c345a70fd76	2015-09-22 18:49:50	2015-09-22 18:49:50	f	f	2015-09-23 08:27:39	2015-09-23 08:27:39	Submitted an iteration	\N
155	21	ruby	secret-handshake	1	done	\N	b5502a29c52188cfefaf56bc	2015-09-22 11:42:09	2015-09-22 11:42:09	f	t	2015-09-23 09:00:45	2015-09-23 09:00:45	@frederique commented	\N
156	21	go	leap	2	pending	\N	bd8f65c471ceebe8f04f45f8	2015-09-21 12:57:06	2015-09-21 12:57:06	f	t	2015-09-22 15:44:12	2015-09-22 15:44:12	@jarrod commented	\N
157	21	haskell	simple-linked-list	2	pending	\N	f0872d535a02ff8917932797	2015-09-22 06:30:17	2015-09-22 06:30:17	f	f	2015-09-23 05:37:13	2015-09-23 05:37:13	@quentin commented	\N
158	21	ruby	roman-numerals	1	pending	\N	5596308578f7b0d10d7528ac	2015-09-21 12:23:20	2015-09-21 12:23:20	f	f	2015-09-21 12:26:05	2015-09-21 12:26:05	@charlie commented	\N
159	21	python	meetup	1	pending	\N	07dbddf08971e9a8057284bd	2015-09-21 21:47:31	2015-09-21 21:47:31	f	f	2015-09-22 06:51:21	2015-09-22 06:51:21	Submitted an iteration	\N
160	21	python	wordy	1	pending	\N	4ae2431b43fda6bd10d93565	2015-09-22 21:28:02	2015-09-22 21:28:02	f	f	2015-09-23 03:49:44	2015-09-23 03:49:44	@ruben commented	\N
161	21	python	point-mutations	2	done	\N	a46a33588bb1aabc67afc39c	2015-09-21 15:36:19	2015-09-21 15:36:19	f	t	2015-09-22 21:10:35	2015-09-22 21:10:35	@dawson commented	\N
162	21	ruby	nucleotide-count	3	done	\N	7218267fd1cdfbbb95af42b1	2015-09-21 20:49:12	2015-09-21 20:49:12	f	t	2015-09-23 12:00:12	2015-09-23 12:00:12	@opal commented	\N
163	21	scala	word-count	1	done	\N	b63f5f1553e980640a002568	2015-09-22 23:22:35	2015-09-22 23:22:35	f	t	2015-09-23 05:51:16	2015-09-23 05:51:16	@quentin commented	\N
164	36	haskell	accumulate	2	done	\N	46aa4e28c216275f6a5d3dab	2015-05-12 08:41:12	2015-05-12 08:41:12	f	t	2015-06-30 22:34:52	2015-06-30 22:34:52	@river commented	\N
165	30	javascript	pythagorean-triplet	2	done	\N	68f35836c61ebaf3ee16f8ee	2015-04-05 01:12:55	2015-04-05 01:12:55	f	t	2015-07-31 01:46:30	2015-07-31 01:46:30	@opal commented	\N
166	30	javascript	bob	2	done	\N	0e730f5a8d691245c2a2ff52	2015-05-24 02:51:02	2015-05-24 02:51:02	f	t	2015-08-15 10:22:36	2015-08-15 10:22:36	@yvette commented	\N
167	30	haskell	robot-name	1	done	\N	38bc4786f75b7f63c6436200	2015-05-09 07:31:52	2015-05-09 07:31:52	f	t	2015-08-16 07:50:14	2015-08-16 07:50:14	@ruben commented	\N
168	30	perl5	simple-cipher	2	done	\N	a5a02abcfe939101d0ea6190	2015-04-04 23:12:09	2015-04-04 23:12:09	f	t	2015-09-02 06:41:29	2015-09-02 06:41:29	@river commented	\N
169	30	javascript	word-count	1	pending	\N	0eb74abf76ae343f56d44761	2015-08-02 19:00:34	2015-08-02 19:00:34	f	t	2015-08-18 04:56:12	2015-08-18 04:56:12	@russ commented	\N
170	30	clojure	robot-name	1	pending	\N	4d0857a120cea73015c60310	2015-04-09 04:01:58	2015-04-09 04:01:58	f	f	2015-06-10 19:33:33	2015-06-10 19:33:33	@vince commented	\N
171	30	javascript	hamming	1	pending	\N	4199eb4988c2b563ca4a85bc	2015-07-05 10:14:06	2015-07-05 10:14:06	f	t	2015-09-06 17:42:06	2015-09-06 17:42:06	@mia commented	\N
172	30	python	meetup	1	pending	\N	8459d6daa170a88065b331d8	2015-07-17 01:20:00	2015-07-17 01:20:00	f	f	2015-09-09 00:18:26	2015-09-09 00:18:26	Submitted an iteration	\N
173	30	ruby	hamming	1	pending	\N	4aae14c2363caf3d7159b38e	2015-04-11 04:20:08	2015-04-11 04:20:08	f	f	2015-08-09 05:06:43	2015-08-09 05:06:43	@wilson commented	\N
174	30	python	point-mutations	2	done	\N	a734ea85d123762f71323d59	2015-04-02 23:58:27	2015-04-02 23:58:27	f	t	2015-08-26 01:23:03	2015-08-26 01:23:03	@dawson commented	\N
175	30	ruby	bob	2	pending	\N	0ae2018928fc91a85f6e940d	2015-04-18 02:17:09	2015-04-18 02:17:09	f	f	2015-05-19 01:32:59	2015-05-19 01:32:59	@alice commented	\N
176	30	fsharp	robot-name	3	done	\N	732a565145e425bd2b6dc95f	2015-04-06 04:27:38	2015-04-06 04:27:38	f	t	2015-09-07 06:04:21	2015-09-07 06:04:21	@quentin commented	\N
177	30	haskell	strain	1	pending	\N	030d78c477991c7a78d85093	2015-05-26 20:13:25	2015-05-26 20:13:25	f	f	2015-07-22 15:45:15	2015-07-22 15:45:15	@isaac commented	\N
178	30	python	wordy	1	pending	\N	74aeab391a8c73cdf311e59f	2015-05-01 10:08:11	2015-05-01 10:08:11	f	f	2015-09-21 04:44:38	2015-09-21 04:44:38	@ruben commented	\N
179	30	ruby	roman-numerals	1	done	\N	e76ac54ac6fa7b36409e6274	2015-04-14 19:56:20	2015-04-14 19:56:20	f	t	2015-04-28 03:28:58	2015-04-28 03:28:58	@yvette commented	\N
180	30	python	leap	3	done	\N	fe02bd97104d508dc5515b21	2015-06-07 06:31:10	2015-06-07 06:31:10	f	t	2015-09-05 14:54:22	2015-09-05 14:54:22	@dawson commented	\N
181	30	python	kindergarten-garden	1	pending	\N	e82b1b0f1bf6c44c9a6970d5	2015-05-24 12:26:09	2015-05-24 12:26:09	f	f	2015-08-23 04:06:51	2015-08-23 04:06:51	Submitted an iteration	\N
182	35	javascript	hamming	1	pending	\N	735df4d8243ed6d1c6a390ad	2015-06-16 07:41:55	2015-06-16 07:41:55	f	f	2015-06-21 11:58:54	2015-06-21 11:58:54	@ruben commented	\N
183	35	ruby	nth-prime	1	pending	\N	cf3edfc6a9b8567e48c73511	2015-05-29 22:59:36	2015-05-29 22:59:36	f	f	2015-09-08 07:51:25	2015-09-08 07:51:25	Submitted an iteration	\N
184	35	ruby	grains	1	done	\N	0d74a0a9081cca781298d188	2015-04-29 00:41:48	2015-04-29 00:41:48	f	t	2015-08-12 11:39:25	2015-08-12 11:39:25	Submitted an iteration	\N
185	35	ruby	twelve-days	1	pending	\N	eaa3437b6165f86a9d67c5b5	2015-05-24 10:29:40	2015-05-24 10:29:40	f	f	2015-07-30 04:30:59	2015-07-30 04:30:59	@lisa commented	\N
186	35	perl5	simple-cipher	2	done	\N	e0d0582015443dbb47722311	2015-07-15 14:38:42	2015-07-15 14:38:42	f	t	2015-08-15 18:17:11	2015-08-15 18:17:11	@river commented	\N
187	35	python	wordy	1	pending	\N	ebbb83673921000f13264282	2015-06-21 11:06:33	2015-06-21 11:06:33	f	f	2015-07-24 14:58:38	2015-07-24 14:58:38	@ruben commented	\N
188	14	ruby	roman-numerals	1	pending	\N	d60186afe701d783c63992d7	2015-09-10 03:27:28	2015-09-10 03:27:28	f	f	2015-09-11 10:00:13	2015-09-11 10:00:13	@charlie commented	\N
189	14	python	bob	1	pending	\N	b37ac41fdbb5c4491d8b1090	2015-09-13 10:19:25	2015-09-13 10:19:25	f	f	2015-09-21 10:58:44	2015-09-21 10:58:44	@charlie commented	\N
190	14	python	grade-school	1	pending	\N	6a071c87cab3c643dd67c8ef	2015-09-23 02:39:17	2015-09-23 02:39:17	f	f	2015-09-23 09:47:35	2015-09-23 09:47:35	Submitted an iteration	\N
191	41	python	point-mutations	2	done	\N	da8b182fe346da824a441f20	2015-05-23 23:33:57	2015-05-23 23:33:57	f	t	2015-07-22 16:32:22	2015-07-22 16:32:22	@dawson commented	\N
192	41	ruby	roman-numerals	1	done	\N	0479094bd805ce1fd75c5032	2015-06-24 21:02:32	2015-06-24 21:02:32	f	t	2015-08-17 20:10:25	2015-08-17 20:10:25	@yvette commented	\N
193	41	fsharp	robot-name	3	done	\N	d43001d8e0265a12103d4ed7	2015-05-28 15:09:11	2015-05-28 15:09:11	f	t	2015-08-31 08:15:14	2015-08-31 08:15:14	@quentin commented	\N
194	6	ruby	kindergarten-garden	1	pending	\N	1815457d8a8829223cdc88c2	2015-09-16 13:56:04	2015-09-16 13:56:04	f	f	2015-09-21 17:40:07	2015-09-21 17:40:07	@yvette commented	\N
195	6	python	beer-song	1	pending	\N	74dd20adbcb2f0fe322edd42	2015-09-19 14:34:32	2015-09-19 14:34:32	f	f	2015-09-21 11:16:26	2015-09-21 11:16:26	@diana commented	\N
196	6	scala	word-count	1	done	\N	536379ce4ec91e0d4e14d7f8	2015-09-19 03:15:02	2015-09-19 03:15:02	f	t	2015-09-21 11:10:44	2015-09-21 11:10:44	@quentin commented	\N
197	6	python	bob	1	pending	\N	aafa5b893126bd53b8bdb358	2015-09-19 15:50:18	2015-09-19 15:50:18	f	f	2015-09-23 02:54:15	2015-09-23 02:54:15	@charlie commented	\N
198	34	perl5	simple-cipher	2	done	\N	86cd8101fbdefb06309d333d	2015-05-09 21:39:35	2015-05-09 21:39:35	f	t	2015-08-13 08:39:39	2015-08-13 08:39:39	@river commented	\N
199	34	haskell	word-count	2	done	\N	a947c46e96aa3756b966c805	2015-02-23 13:16:57	2015-02-23 13:16:57	f	t	2015-08-07 14:06:54	2015-08-07 14:06:54	@charlie commented	\N
200	34	python	beer-song	1	pending	\N	5b248749fd1104e570c8b059	2015-04-02 17:58:35	2015-04-02 17:58:35	f	f	2015-05-01 01:10:20	2015-05-01 01:10:20	@diana commented	\N
201	34	ruby	roman-numerals	1	pending	\N	e6b02eb8fb0858862ec171dc	2015-06-05 22:37:00	2015-06-05 22:37:00	f	f	2015-09-17 16:38:20	2015-09-17 16:38:20	@charlie commented	\N
202	34	ruby	hamming	1	pending	\N	044fb413806d93069a8d4589	2015-02-05 07:45:29	2015-02-05 07:45:29	f	f	2015-08-06 21:34:23	2015-08-06 21:34:23	Submitted an iteration	\N
203	34	fsharp	robot-name	3	done	\N	f8a08f189eaec266a42d6290	2015-02-27 09:12:29	2015-02-27 09:12:29	f	t	2015-07-17 18:32:56	2015-07-17 18:32:56	@quentin commented	\N
204	34	python	anagram	3	pending	\N	bee03f321d18d9f1ed8643e8	2015-04-09 03:13:06	2015-04-09 03:13:06	f	f	2015-08-13 15:40:41	2015-08-13 15:40:41	@ruben commented	\N
205	34	javascript	hamming	1	pending	\N	15787dd600aa2cb4aa2da4a1	2015-05-09 12:24:44	2015-05-09 12:24:44	f	f	2015-06-04 01:20:29	2015-06-04 01:20:29	@mia commented	\N
206	34	clojure	robot-name	1	pending	\N	4f698a4be8e65195c82a5d47	2015-02-06 22:10:38	2015-02-06 22:10:38	f	f	2015-02-17 03:13:15	2015-02-17 03:13:15	@vince commented	\N
207	34	python	series	2	pending	\N	b519443dbe6257820c839f6e	2015-03-05 00:22:52	2015-03-05 00:22:52	f	t	2015-08-08 11:59:21	2015-08-08 11:59:21	@isaac commented	\N
208	34	ruby	bob	2	pending	\N	ddd5ec5ab1e195285be1391b	2015-04-02 08:44:05	2015-04-02 08:44:05	f	f	2015-07-13 17:17:24	2015-07-13 17:17:24	@alice commented	\N
209	34	ruby	raindrops	1	pending	\N	602440a89777aba3debeb57c	2015-02-18 14:48:14	2015-02-18 14:48:14	f	f	2015-04-21 23:28:46	2015-04-21 23:28:46	@vince commented	\N
210	34	python	wordy	1	pending	\N	b3cfc4f79c33863ea2ea7fbc	2015-04-21 03:54:13	2015-04-21 03:54:13	f	f	2015-06-18 08:52:37	2015-06-18 08:52:37	@ruben commented	\N
211	34	lua	hamming	1	pending	\N	10e9efd7f1005ec17d9f1ec2	2015-02-08 17:22:43	2015-02-08 17:22:43	f	f	2015-08-12 13:10:45	2015-08-12 13:10:45	Submitted an iteration	\N
212	34	javascript	crypto-square	2	done	\N	eec37d962e963b2ec03bb5b3	2015-03-23 15:08:47	2015-03-23 15:08:47	f	t	2015-09-18 12:37:12	2015-09-18 12:37:12	@wilson commented	\N
213	34	ruby	protein-translation	1	pending	\N	3f913c6440f9c6640bbd282d	2015-04-23 12:21:35	2015-04-23 12:21:35	f	f	2015-07-31 16:57:37	2015-07-31 16:57:37	@ursula commented	\N
214	34	go	leap	2	pending	\N	41a4cb60e8db71283dbe5276	2015-02-07 02:42:05	2015-02-07 02:42:05	f	f	2015-08-17 01:33:16	2015-08-17 01:33:16	Submitted an iteration	\N
215	34	ruby	twelve-days	1	pending	\N	fa883d1ac85ebd1106acc3bf	2015-02-27 18:52:32	2015-02-27 18:52:32	f	f	2015-07-15 00:17:08	2015-07-15 00:17:08	@lisa commented	\N
216	16	haskell	bob	2	done	\N	06d2ea3bdff46cb938c03ce8	2015-06-17 00:16:06	2015-06-17 00:16:06	f	t	2015-08-07 09:14:44	2015-08-07 09:14:44	@opal commented	\N
217	16	python	point-mutations	2	done	\N	20916b6ec29727411ff15eb6	2015-06-08 16:55:22	2015-06-08 16:55:22	f	t	2015-07-14 18:56:00	2015-07-14 18:56:00	@dawson commented	\N
218	16	ruby	bob	1	done	\N	3bd1b53c3ab6baf9c333d349	2015-05-24 13:36:57	2015-05-24 13:36:57	f	t	2015-06-23 14:23:19	2015-06-23 14:23:19	@norma commented	\N
219	16	python	hamming	2	pending	\N	39d4cc29be0d73e2e4267f28	2015-05-14 03:08:52	2015-05-14 03:08:52	f	f	2015-08-27 21:43:47	2015-08-27 21:43:47	Submitted an iteration	\N
220	16	ruby	protein-translation	1	pending	\N	f71a7b55a95235ca2458c191	2015-06-25 13:08:15	2015-06-25 13:08:15	f	f	2015-07-11 14:48:24	2015-07-11 14:48:24	@ursula commented	\N
221	18	ruby	secret-handshake	1	done	\N	9dbda4747a32f1b69bfceb17	2015-08-01 16:03:26	2015-08-01 16:03:26	f	t	2015-08-10 12:07:30	2015-08-10 12:07:30	@frederique commented	\N
222	18	ruby	sieve	1	pending	\N	8cfadc21b436df5cf655c8b2	2015-08-17 19:26:29	2015-08-17 19:26:29	f	f	2015-08-28 11:33:51	2015-08-28 11:33:51	Submitted an iteration	\N
223	18	ruby	roman-numerals	1	pending	\N	d0eb736ed895283dac19eb28	2015-07-28 09:28:29	2015-07-28 09:28:29	f	f	2015-07-29 00:37:43	2015-07-29 00:37:43	@charlie commented	\N
224	18	go	leap	2	pending	\N	1a0b431dac85fd6e4afb9518	2015-08-26 02:32:51	2015-08-26 02:32:51	f	t	2015-09-18 08:47:39	2015-09-18 08:47:39	@jarrod commented	\N
225	24	javascript	crypto-square	2	done	\N	ecb4aa6b1bcf1c5eb3bdf70d	2015-06-29 04:14:14	2015-06-29 04:14:14	f	t	2015-08-03 12:38:57	2015-08-03 12:38:57	@wilson commented	\N
226	24	ruby	protein-translation	1	pending	\N	a609fbf2adbd9fe53f3e6024	2015-08-27 19:48:51	2015-08-27 19:48:51	f	f	2015-09-23 17:32:09	2015-09-23 17:32:09	@ursula commented	\N
227	24	clojure	binary	1	done	\N	7fa0236168001ece262b2528	2015-07-14 17:35:32	2015-07-14 17:35:32	f	t	2015-08-09 09:54:49	2015-08-09 09:54:49	@randall commented	\N
228	42	haskell	octal	2	done	\N	659bb5497179193531db831e	2015-08-05 13:11:17	2015-08-05 13:11:17	f	t	2015-09-06 21:29:39	2015-09-06 21:29:39	Submitted an iteration	\N
229	27	coffeescript	bob	1	pending	\N	a58a6fe030abb73c2d261b46	2015-08-25 00:07:01	2015-08-25 00:07:01	f	f	2015-09-07 03:09:18	2015-09-07 03:09:18	Submitted an iteration	\N
230	45	fsharp	robot-name	3	done	\N	e7935d4d577ddd8b46a9e91a	2015-09-07 09:32:24	2015-09-07 09:32:24	f	t	2015-09-22 20:38:39	2015-09-22 20:38:39	@quentin commented	\N
\.


--
-- Name: user_exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('user_exercises_id_seq', 230, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY users (id, username, email, avatar_url, github_id, key, mastery, created_at, updated_at, onboarded_at) FROM stdin;
1	rikki-	rikki-@example.com	https://avatars.githubusercontent.com/u/8341419	8341419	bqi563	--- []\n	2015-02-03 17:18:12.187697	2015-02-03 17:18:12.187697	\N
6	amelie	amelie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/SlaapMe/128.jpg	-52954	koi491	--- []\n	2015-09-16 11:52:33.231723	2015-09-16 11:52:33.231723	\N
7	beth	beth@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/LucasPerdidao/128.jpg	-81071	fju799	--- []\n	2015-04-26 22:13:07.235513	2015-04-26 22:13:07.235513	\N
8	claire	claire@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/operatino/128.jpg	-62018	xaa539	--- []\n	2015-03-03 14:52:18.239341	2015-03-03 14:52:18.239341	\N
10	eve	eve@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/runningskull/128.jpg	-18248	ltj169	--- []\n	2015-05-05 16:15:55.245283	2015-05-05 16:15:55.245283	\N
13	grace	grace@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/diesellaws/128.jpg	-42460	ttm818	--- []\n	2015-09-10 00:28:26.255117	2015-09-10 00:28:26.255117	\N
14	haley	haley@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/krystalfister/128.jpg	-46838	hex940	--- []\n	2015-08-24 05:14:33.257378	2015-08-24 05:14:33.257378	\N
16	jarrod	jarrod@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/pcridesagain/128.jpg	-71114	zxx109	--- []\n	2015-04-24 03:57:17.263488	2015-04-24 03:57:17.263488	\N
17	kieran	kieran@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/robergd/128.jpg	-54432	cln414	--- []\n	2015-01-30 07:31:51.267506	2015-01-30 07:31:51.267506	\N
18	lisa	lisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/felipecsl/128.jpg	-32328	sir165	--- []\n	2015-07-09 09:45:45.270857	2015-07-09 09:45:45.270857	\N
19	mack	mack@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/krystalfister/128.jpg	-85611	zgg233	--- []\n	2015-03-23 06:11:11.274233	2015-03-23 06:11:11.274233	\N
20	madison	madison@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/cemshid/128.jpg	-55333	vxg289	--- []\n	2015-04-12 05:05:54.277369	2015-04-12 05:05:54.277369	\N
21	marshall	marshall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kylefoundry/128.jpg	-53466	nou235	--- []\n	2015-09-21 11:15:43.280443	2015-09-21 11:15:43.280443	\N
23	mia	mia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ffbel/128.jpg	-28266	tlp811	--- []\n	2015-08-06 14:56:26.286563	2015-08-06 14:56:26.286563	\N
24	mike	mike@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jm_denis/128.jpg	-92183	cob727	--- []\n	2015-06-17 01:06:42.289259	2015-06-17 01:06:42.289259	\N
25	mildred	mildred@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/michzen/128.jpg	-12479	xuq439	--- []\n	2015-09-01 18:45:24.291893	2015-09-01 18:45:24.291893	\N
26	mitchell	mitchell@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/amboy00/128.jpg	-47609	izl801	--- []\n	2015-04-15 11:55:40.294426	2015-04-15 11:55:40.294426	\N
27	morris	morris@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/roybarberuk/128.jpg	-89397	qbw512	--- []\n	2015-03-23 19:33:33.296936	2015-03-23 19:33:33.296936	\N
30	paula	paula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/linux29/128.jpg	-55171	mdx542	--- []\n	2015-04-02 22:53:59.304886	2015-04-02 22:53:59.304886	\N
32	rachel	rachel@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/herrhaase/128.jpg	-75684	keo954	--- []\n	2015-01-20 11:24:00.315237	2015-01-20 11:24:00.315237	\N
34	rick	rick@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/bajazetov/128.jpg	-26643	luh644	--- []\n	2015-02-01 21:36:42.321434	2015-02-01 21:36:42.321434	\N
35	rita	rita@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/robergd/128.jpg	-76314	tgf439	--- []\n	2015-04-20 11:33:21.324871	2015-04-20 11:33:21.324871	\N
36	river	river@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sta1ex/128.jpg	-31633	ocv437	--- []\n	2015-05-02 23:50:39.328121	2015-05-02 23:50:39.328121	\N
37	rolf	rolf@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/igorgarybaldi/128.jpg	-12839	edr171	--- []\n	2015-07-16 03:30:24.330873	2015-07-16 03:30:24.330873	\N
39	rudi	rudi@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/nicolasfolliot/128.jpg	-70976	dfn772	--- []\n	2015-08-29 00:12:58.336353	2015-08-29 00:12:58.336353	\N
41	ryan	ryan@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/exentrich/128.jpg	-55874	bvt437	--- []\n	2015-05-07 14:24:44.340871	2015-05-07 14:24:44.340871	\N
42	shaina	shaina@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ariil/128.jpg	-94367	ijg686	--- []\n	2015-07-17 09:18:55.344219	2015-07-17 09:18:55.344219	\N
43	talia	talia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/chatyrko/128.jpg	-37091	yzt929	--- []\n	2015-06-24 07:09:03.348621	2015-06-24 07:09:03.348621	\N
45	vince	vince@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ariil/128.jpg	-40756	gxy867	--- []\n	2015-08-16 17:14:11.355955	2015-08-16 17:14:11.355955	\N
47	xavier	xavier@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/fahdos/128.jpg	-76182	bng763	--- []\n	2015-06-09 11:44:11.364	2015-06-09 11:44:11.364	\N
11	elisa	elisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/noxdzine/128.jpg	-26342	bie826	--- []\n	2015-04-23 00:53:19.247722	2015-04-23 00:53:19.247722	2015-05-18 16:05:12
38	ruben	ruben@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/josemarques/128.jpg	-51886	mkj171	--- []\n	2015-05-13 11:16:53.333744	2015-05-13 11:16:53.333744	2015-03-30 16:43:26
3	bob	bob@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jakemoore/128.jpg	-4149	mez499	---\n- ruby\n- haskell\n	2015-05-22 03:02:00.219538	2015-05-22 03:02:00.219538	2015-05-12 13:36:09
31	quentin	quentin@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jm_denis/128.jpg	-27893	foz754	--- []\n	2015-09-06 11:55:03.31166	2015-09-06 11:55:03.31166	2015-04-13 06:57:40
28	norma	norma@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/operatino/128.jpg	-36151	ckf860	--- []\n	2015-03-25 14:00:31.299698	2015-03-25 14:00:31.299698	2015-05-25 00:34:51
5	diana	diana@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/plbabin/128.jpg	-71946	wzd378	---\n- python\n	2015-04-22 09:21:51.229097	2015-04-22 09:21:51.229097	2015-04-16 12:37:43
9	dawson	dawson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/michzen/128.jpg	-43779	nmz281	--- []\n	2015-03-15 06:42:17.241726	2015-03-15 06:42:17.241726	2015-04-05 05:54:23
40	russ	russ@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/krasnoukhov/128.jpg	-32996	iiw439	--- []\n	2015-07-20 17:45:46.338066	2015-07-20 17:45:46.338066	2015-04-13 12:54:30
44	ursula	ursula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/osvaldas/128.jpg	-99506	zlt772	--- []\n	2015-04-03 20:53:25.351875	2015-04-03 20:53:25.351875	2015-05-16 07:33:20
33	randall	randall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/krystalfister/128.jpg	-74673	vqe294	--- []\n	2015-03-20 14:36:22.318478	2015-03-20 14:36:22.318478	2015-04-17 02:41:47
22	mary	mary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/josemarques/128.jpg	-42252	bfi688	--- []\n	2015-01-26 19:34:11.283376	2015-01-26 19:34:11.283376	2015-05-04 15:39:16
12	frederique	frederique@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/samihah/128.jpg	-20396	ojt731	--- []\n	2015-07-21 04:48:22.251271	2015-07-21 04:48:22.251271	2015-05-06 20:52:03
46	wilson	wilson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/tomas_janousek/128.jpg	-36280	atn649	--- []\n	2015-02-18 17:39:02.360202	2015-02-18 17:39:02.360202	2015-04-18 03:13:57
15	isaac	isaac@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/tomgreever/128.jpg	-96548	lvf228	--- []\n	2015-01-30 03:48:28.260442	2015-01-30 03:48:28.260442	2015-04-25 06:03:54
29	opal	opal@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jervo/128.jpg	-99359	djo703	--- []\n	2015-03-03 07:28:11.302331	2015-03-03 07:28:11.302331	2015-05-18 03:09:15
49	zachary	zachary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/samihah/128.jpg	-11594	bxe149	--- []\n	2015-05-03 21:58:41.36893	2015-05-03 21:58:41.36893	\N
2	alice	alice@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kylefoundry/128.jpg	-99834	igw260	---\n- clojure\n- coffeescript\n- elixir\n- go\n- haskell\n- javascript\n- objective-c\n- ocaml\n- perl5\n- python\n- ruby\n- scala\n	2015-09-02 07:55:32.214553	2015-09-02 07:55:32.214553	2015-05-13 06:21:33
4	charlie	charlie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/tjrus/128.jpg	-94786	ohu415	---\n- javascript\n- erlang\n- elixir\n	2015-03-20 12:19:35.224443	2015-03-20 12:19:35.224443	2015-04-23 09:37:12
48	yvette	yvette@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/flexrs/128.jpg	-62761	jqi980	--- []\n	2015-03-12 10:21:18.365903	2015-03-12 10:21:18.365903	2015-06-09 18:18:28
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('users_id_seq', 49, true);


--
-- Data for Name: views; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY views (id, user_id, exercise_id, last_viewed_at, created_at, updated_at) FROM stdin;
\.


--
-- Name: views_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('views_id_seq', 1, false);


--
-- PostgreSQL database dump complete
--

