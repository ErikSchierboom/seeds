--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

--
-- Data for Name: acls; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY acls (id, user_id, language, slug, created_at, updated_at) FROM stdin;
1	9	lua	hamming	2015-08-10 01:05:01	2015-08-10 01:05:01
2	9	clojure	nucleotide-count	2015-08-04 20:15:57	2015-08-04 20:15:57
243	36	javascript	word-count	2015-07-08 22:33:03	2015-07-08 22:33:03
5	9	go	leap	2015-07-02 08:39:35	2015-07-02 08:39:35
7	11	javascript	word-count	2015-07-25 00:30:45	2015-07-25 00:30:45
8	11	python	point-mutations	2015-08-17 22:21:14	2015-08-17 22:21:14
10	12	javascript	hamming	2015-08-19 01:52:35	2015-08-19 01:52:35
11	15	ruby	raindrops	2015-09-21 02:08:24	2015-09-21 02:08:24
12	15	ruby	twelve-days	2015-09-18 04:57:07	2015-09-18 04:57:07
13	15	python	leap	2015-09-19 21:24:20	2015-09-19 21:24:20
16	15	ruby	nucleotide-count	2015-09-19 19:16:05	2015-09-19 19:16:05
19	15	ruby	say	2015-09-18 11:23:38	2015-09-18 11:23:38
20	15	clojure	nucleotide-count	2015-09-19 15:50:35	2015-09-19 15:50:35
23	15	ruby	grains	2015-09-20 22:52:50	2015-09-20 22:52:50
24	15	javascript	sieve	2015-09-20 13:06:45	2015-09-20 13:06:45
25	15	ruby	word-count	2015-09-19 09:56:52	2015-09-19 09:56:52
28	15	perl5	word-count	2015-09-18 09:44:01	2015-09-18 09:44:01
29	15	ruby	protein-translation	2015-09-19 16:11:55	2015-09-19 16:11:55
30	15	python	grade-school	2015-09-20 02:19:08	2015-09-20 02:19:08
32	15	ruby	sieve	2015-09-19 17:40:04	2015-09-19 17:40:04
33	15	python	wordy	2015-09-18 06:45:05	2015-09-18 06:45:05
34	15	ruby	saddle-points	2015-09-19 00:45:24	2015-09-19 00:45:24
36	15	python	word-count	2015-09-20 20:38:38	2015-09-20 20:38:38
38	15	python	hamming	2015-09-19 03:16:09	2015-09-19 03:16:09
40	15	python	point-mutations	2015-09-18 09:18:12	2015-09-18 09:18:12
42	15	ruby	roman-numerals	2015-09-18 20:03:42	2015-09-18 20:03:42
43	15	coffeescript	bob	2015-09-20 18:20:46	2015-09-20 18:20:46
44	15	python	bob	2015-09-20 09:06:03	2015-09-20 09:06:03
45	15	ruby	hamming	2015-09-20 02:24:42	2015-09-20 02:24:42
46	15	fsharp	robot-name	2015-09-18 11:45:00	2015-09-18 11:45:00
49	15	clojure	binary	2015-09-18 07:21:00	2015-09-18 07:21:00
50	15	haskell	leap	2015-09-18 04:28:10	2015-09-18 04:28:10
54	15	haskell	accumulate	2015-09-18 06:51:33	2015-09-18 06:51:33
56	15	javascript	beer-song	2015-09-20 05:51:29	2015-09-20 05:51:29
58	15	javascript	rna-transcription	2015-09-18 10:03:27	2015-09-18 10:03:27
60	22	scala	hamming	2015-04-16 00:21:34	2015-04-16 00:21:34
62	22	ruby	nucleotide-count	2015-04-23 10:54:16	2015-04-23 10:54:16
64	22	go	leap	2015-05-05 18:56:19	2015-05-05 18:56:19
66	22	python	wordy	2015-06-27 21:41:47	2015-06-27 21:41:47
67	22	haskell	robot-name	2015-07-02 05:40:43	2015-07-02 05:40:43
68	22	python	leap	2015-04-14 01:35:38	2015-04-14 01:35:38
71	22	fsharp	robot-name	2015-06-28 21:24:58	2015-06-28 21:24:58
74	22	python	bob	2015-08-11 23:42:31	2015-08-11 23:42:31
75	22	python	beer-song	2015-04-24 15:33:27	2015-04-24 15:33:27
76	22	haskell	octal	2015-08-11 14:16:24	2015-08-11 14:16:24
78	28	python	wordy	2015-05-07 14:09:29	2015-05-07 14:09:29
79	29	clojure	binary	2015-09-17 04:23:02	2015-09-17 04:23:02
80	29	ruby	roman-numerals	2015-08-12 23:12:09	2015-08-12 23:12:09
81	29	javascript	pythagorean-triplet	2015-08-13 13:10:28	2015-08-13 13:10:28
83	29	haskell	leap	2015-08-16 09:27:42	2015-08-16 09:27:42
84	29	python	leap	2015-08-13 09:54:37	2015-08-13 09:54:37
87	29	fsharp	robot-name	2015-08-14 17:45:38	2015-08-14 17:45:38
90	31	javascript	bob	2015-02-26 22:38:48	2015-02-26 22:38:48
92	33	javascript	word-count	2015-09-11 21:06:44	2015-09-11 21:06:44
93	33	javascript	bob	2015-09-10 07:43:38	2015-09-10 07:43:38
95	33	python	bob	2015-09-14 15:03:21	2015-09-14 15:03:21
96	33	javascript	sieve	2015-09-11 07:22:50	2015-09-11 07:22:50
97	38	clojure	nucleotide-count	2015-07-20 03:27:08	2015-07-20 03:27:08
100	40	go	grains	2015-09-10 07:58:35	2015-09-10 07:58:35
101	44	python	grade-school	2015-02-28 03:21:47	2015-02-28 03:21:47
102	44	ruby	bob	2015-03-08 22:54:48	2015-03-08 22:54:48
104	44	perl5	simple-cipher	2015-03-08 01:25:27	2015-03-08 01:25:27
106	44	haskell	bob	2015-03-21 02:21:13	2015-03-21 02:21:13
108	44	go	leap	2015-02-21 15:14:18	2015-02-21 15:14:18
110	44	python	anagram	2015-03-12 10:14:24	2015-03-12 10:14:24
113	44	ruby	raindrops	2015-04-10 03:19:10	2015-04-10 03:19:10
114	44	haskell	nucleotide-count	2015-02-25 19:41:05	2015-02-25 19:41:05
244	30	perl5	simple-cipher	2015-09-16 17:24:50	2015-09-16 17:24:50
117	44	python	series	2015-02-13 14:55:54	2015-02-13 14:55:54
246	30	haskell	accumulate	2015-09-17 00:24:12	2015-09-17 00:24:12
119	44	ruby	secret-handshake	2015-06-24 13:00:38	2015-06-24 13:00:38
120	44	haskell	word-count	2015-03-08 03:41:14	2015-03-08 03:41:14
122	44	scala	word-count	2015-02-14 04:20:12	2015-02-14 04:20:12
123	44	python	luhn	2015-02-05 04:29:30	2015-02-05 04:29:30
124	44	clojure	robot-name	2015-02-17 14:09:57	2015-02-17 14:09:57
125	44	elixir	sublist	2015-02-22 20:13:51	2015-02-22 20:13:51
126	44	python	beer-song	2015-02-14 06:01:08	2015-02-14 06:01:08
127	44	ruby	nth-prime	2015-03-31 09:40:09	2015-03-31 09:40:09
128	44	javascript	hamming	2015-04-16 09:16:07	2015-04-16 09:16:07
129	44	ruby	protein-translation	2015-03-10 13:16:46	2015-03-10 13:16:46
130	44	fsharp	robot-name	2015-04-04 02:29:50	2015-04-04 02:29:50
248	30	python	series	2015-09-19 18:53:51	2015-09-19 18:53:51
133	44	ruby	prime-factors	2015-06-06 06:53:45	2015-06-06 06:53:45
134	44	python	wordy	2015-02-27 10:18:36	2015-02-27 10:18:36
135	44	javascript	crypto-square	2015-05-16 23:22:17	2015-05-16 23:22:17
250	30	go	diffie-hellman	2015-09-16 12:10:37	2015-09-16 12:10:37
137	44	haskell	accumulate	2015-05-09 17:19:02	2015-05-09 17:19:02
251	30	python	wordy	2015-09-16 15:26:22	2015-09-16 15:26:22
139	46	javascript	hamming	2015-05-03 22:27:26	2015-05-03 22:27:26
140	46	go	grains	2015-03-04 07:18:52	2015-03-04 07:18:52
141	48	elixir	sublist	2015-08-13 17:53:46	2015-08-13 17:53:46
142	48	javascript	anagram	2015-08-05 00:24:45	2015-08-05 00:24:45
143	48	haskell	octal	2015-08-24 17:11:21	2015-08-24 17:11:21
252	30	javascript	pythagorean-triplet	2015-09-18 10:04:22	2015-09-18 10:04:22
145	48	python	leap	2015-08-03 23:50:29	2015-08-03 23:50:29
254	30	ruby	bob	2015-09-18 22:36:39	2015-09-18 22:36:39
148	48	python	sieve	2015-09-05 04:54:53	2015-09-05 04:54:53
149	48	ruby	twelve-days	2015-09-02 22:26:23	2015-09-02 22:26:23
150	49	ruby	nucleotide-count	2015-01-22 19:00:42	2015-01-22 19:00:42
255	30	python	point-mutations	2015-09-18 16:53:20	2015-09-18 16:53:20
153	49	ruby	roman-numerals	2015-02-18 03:22:52	2015-02-18 03:22:52
154	49	ruby	protein-translation	2015-02-01 15:09:14	2015-02-01 15:09:14
155	49	ruby	sum-of-multiples	2015-05-17 11:34:16	2015-05-17 11:34:16
156	26	python	word-count	2015-08-12 20:53:28	2015-08-12 20:53:28
257	30	clojure	binary	2015-09-18 07:06:24	2015-09-18 07:06:24
158	26	ruby	sieve	2015-08-01 16:59:35	2015-08-01 16:59:35
159	26	python	wordy	2015-08-25 23:29:19	2015-08-25 23:29:19
160	7	ruby	hamming	2015-05-02 20:05:06	2015-05-02 20:05:06
161	7	fsharp	robot-name	2015-05-15 03:38:39	2015-05-15 03:38:39
258	30	javascript	sieve	2015-09-19 14:57:34	2015-09-19 14:57:34
259	30	ruby	nucleotide-count	2015-09-16 07:52:22	2015-09-16 07:52:22
164	7	python	grains	2015-04-24 00:33:02	2015-04-24 00:33:02
166	7	perl5	simple-cipher	2015-08-25 07:06:09	2015-08-25 07:06:09
261	30	ruby	roman-numerals	2015-09-19 11:42:01	2015-09-19 11:42:01
168	7	ruby	kindergarten-garden	2015-06-24 02:53:24	2015-06-24 02:53:24
169	7	erlang	strain	2015-04-09 21:00:41	2015-04-09 21:00:41
170	7	clojure	raindrops	2015-03-08 13:40:49	2015-03-08 13:40:49
171	7	python	wordy	2015-03-06 10:51:19	2015-03-06 10:51:19
172	7	python	hamming	2015-04-27 11:45:56	2015-04-27 11:45:56
262	30	python	anagram	2015-09-16 10:44:16	2015-09-16 10:44:16
174	7	clojure	nucleotide-count	2015-03-14 22:57:24	2015-03-14 22:57:24
177	7	javascript	gigasecond	2015-03-19 15:16:05	2015-03-19 15:16:05
178	7	lua	hamming	2015-08-01 11:46:46	2015-08-01 11:46:46
179	7	csharp	bob	2015-06-04 20:25:01	2015-06-04 20:25:01
180	7	haskell	strain	2015-04-30 20:31:09	2015-04-30 20:31:09
181	7	javascript	sieve	2015-04-05 01:15:00	2015-04-05 01:15:00
182	7	haskell	bob	2015-03-08 09:39:37	2015-03-08 09:39:37
265	30	python	bob	2015-09-18 07:01:28	2015-09-18 07:01:28
184	23	python	grade-school	2015-04-10 11:26:49	2015-04-10 11:26:49
266	30	ruby	saddle-points	2015-09-17 18:39:44	2015-09-17 18:39:44
186	23	python	kindergarten-garden	2015-06-22 14:13:14	2015-06-22 14:13:14
187	23	haskell	leap	2015-07-31 00:17:03	2015-07-31 00:17:03
188	17	python	kindergarten-garden	2015-07-09 02:27:36	2015-07-09 02:27:36
189	17	javascript	bob	2015-06-10 19:48:37	2015-06-10 19:48:37
191	17	javascript	hamming	2015-08-22 16:06:48	2015-08-22 16:06:48
192	17	python	point-mutations	2015-07-19 17:48:36	2015-07-19 17:48:36
268	30	ruby	protein-translation	2015-09-16 17:54:41	2015-09-16 17:54:41
194	17	python	gigasecond	2015-06-05 03:34:50	2015-06-05 03:34:50
269	30	clojure	robot-name	2015-09-20 10:08:45	2015-09-20 10:08:45
196	17	haskell	robot-name	2015-06-12 19:33:09	2015-06-12 19:33:09
197	17	haskell	word-count	2015-07-06 16:33:09	2015-07-06 16:33:09
270	35	javascript	crypto-square	2015-08-04 10:19:58	2015-08-04 10:19:58
199	17	lua	hamming	2015-06-18 12:31:46	2015-06-18 12:31:46
200	17	javascript	gigasecond	2015-08-06 06:32:34	2015-08-06 06:32:34
201	17	python	meetup	2015-06-08 12:42:51	2015-06-08 12:42:51
202	17	ruby	nth-prime	2015-07-23 21:26:17	2015-07-23 21:26:17
203	17	python	wordy	2015-07-07 10:00:30	2015-07-07 10:00:30
204	17	haskell	octal	2015-06-11 23:06:41	2015-06-11 23:06:41
206	17	python	bob	2015-06-29 13:22:59	2015-06-29 13:22:59
207	17	perl5	simple-cipher	2015-08-07 05:44:57	2015-08-07 05:44:57
272	35	ruby	hamming	2015-08-30 16:26:47	2015-08-30 16:26:47
209	17	ruby	roman-numerals	2015-06-14 23:50:49	2015-06-14 23:50:49
210	17	ruby	twelve-days	2015-08-28 07:30:04	2015-08-28 07:30:04
211	17	ruby	nucleotide-count	2015-06-25 08:45:36	2015-06-25 08:45:36
273	35	fsharp	robot-name	2015-08-05 05:05:43	2015-08-05 05:05:43
213	17	ruby	saddle-points	2015-06-28 04:50:49	2015-06-28 04:50:49
215	17	csharp	raindrops	2015-06-03 23:17:12	2015-06-03 23:17:12
216	17	ruby	hamming	2015-07-04 08:17:28	2015-07-04 08:17:28
276	14	ruby	raindrops	2015-09-12 11:53:00	2015-09-12 11:53:00
219	17	ruby	prime-factors	2015-06-27 07:04:44	2015-06-27 07:04:44
220	17	haskell	roman-numerals	2015-08-11 16:52:14	2015-08-11 16:52:14
221	17	ruby	anagram	2015-07-11 11:41:13	2015-07-11 11:41:13
222	17	python	series	2015-06-29 10:16:00	2015-06-29 10:16:00
277	14	haskell	octal	2015-08-25 06:13:58	2015-08-25 06:13:58
224	17	ruby	grains	2015-07-05 08:49:44	2015-07-05 08:49:44
225	17	scala	word-count	2015-08-11 15:37:09	2015-08-11 15:37:09
226	17	go	leap	2015-07-07 01:21:59	2015-07-07 01:21:59
228	20	python	bob	2015-07-27 15:53:53	2015-07-27 15:53:53
229	21	ruby	nucleotide-count	2015-04-30 15:52:15	2015-04-30 15:52:15
279	41	python	kindergarten-garden	2015-04-13 02:30:52	2015-04-13 02:30:52
231	21	python	hamming	2015-02-22 07:02:42	2015-02-22 07:02:42
280	41	ruby	say	2015-03-14 22:07:05	2015-03-14 22:07:05
233	21	scala	hamming	2015-08-03 10:13:41	2015-08-03 10:13:41
281	41	csharp	raindrops	2015-04-18 08:24:10	2015-04-18 08:24:10
235	21	python	kindergarten-garden	2015-05-05 01:47:45	2015-05-05 01:47:45
236	21	ruby	secret-handshake	2015-03-20 01:13:39	2015-03-20 01:13:39
237	36	haskell	robot-name	2015-03-04 14:26:02	2015-03-04 14:26:02
238	36	python	bob	2015-06-30 15:45:55	2015-06-30 15:45:55
239	36	ruby	secret-handshake	2015-03-04 17:44:57	2015-03-04 17:44:57
240	36	ruby	word-count	2015-03-17 04:53:46	2015-03-17 04:53:46
282	41	python	meetup	2015-06-23 18:21:19	2015-06-23 18:21:19
283	41	ruby	bob	2015-02-14 21:03:54	2015-02-14 21:03:54
285	41	perl5	simple-cipher	2015-03-17 07:00:53	2015-03-17 07:00:53
287	6	ruby	hamming	2015-07-16 22:49:26	2015-07-16 22:49:26
288	6	haskell	leap	2015-08-14 11:02:44	2015-08-14 11:02:44
289	6	haskell	simple-linked-list	2015-04-10 22:07:45	2015-04-10 22:07:45
291	6	javascript	sieve	2015-05-22 20:44:13	2015-05-22 20:44:13
292	34	haskell	simple-linked-list	2015-06-17 07:53:02	2015-06-17 07:53:02
294	34	haskell	word-count	2015-07-10 18:30:29	2015-07-10 18:30:29
296	34	python	grade-school	2015-06-24 11:43:48	2015-06-24 11:43:48
298	34	ruby	roman-numerals	2015-07-28 09:54:30	2015-07-28 09:54:30
299	34	csharp	raindrops	2015-07-26 01:59:08	2015-07-26 01:59:08
300	34	javascript	hamming	2015-08-26 01:11:33	2015-08-26 01:11:33
301	16	python	leap	2015-05-12 23:07:24	2015-05-12 23:07:24
303	16	python	wordy	2015-05-21 12:47:20	2015-05-21 12:47:20
304	16	haskell	strain	2015-05-09 05:49:38	2015-05-09 05:49:38
305	16	elixir	sublist	2015-07-04 02:01:05	2015-07-04 02:01:05
306	16	ruby	say	2015-08-09 17:43:41	2015-08-09 17:43:41
307	16	lua	hamming	2015-05-16 12:53:54	2015-05-16 12:53:54
308	16	javascript	hamming	2015-07-23 17:10:36	2015-07-23 17:10:36
309	18	ruby	hamming	2015-05-18 01:09:04	2015-05-18 01:09:04
310	18	ruby	twelve-days	2015-05-22 09:14:25	2015-05-22 09:14:25
311	18	ruby	nucleotide-count	2015-05-17 05:42:53	2015-05-17 05:42:53
313	18	lua	hamming	2015-06-22 19:58:32	2015-06-22 19:58:32
314	18	python	grade-school	2015-05-22 21:46:25	2015-05-22 21:46:25
315	24	ruby	say	2015-07-23 03:48:33	2015-07-23 03:48:33
316	42	haskell	bob	2015-03-13 20:55:55	2015-03-13 20:55:55
318	27	ruby	saddle-points	2015-07-23 14:43:10	2015-07-23 14:43:10
320	45	python	grade-school	2015-09-02 09:18:20	2015-09-02 09:18:20
\.


--
-- Name: acls_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('acls_id_seq', 320, true);


--
-- Data for Name: alerts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY alerts (id, user_id, text, url, link_text, read, created_at, updated_at) FROM stdin;
1	16	jarrod would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2015-01-22 06:32:58	2015-01-22 06:32:58
2	17	kieran would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2015-06-29 08:11:29	2015-06-29 08:11:29
3	29	opal would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2015-02-02 18:05:11	2015-02-02 18:05:11
4	32	rachel would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2015-01-28 12:53:49	2015-01-28 12:53:49
5	38	ruben would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2015-09-14 08:57:07	2015-09-14 08:57:07
6	42	shaina would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2015-06-11 17:36:18	2015-06-11 17:36:18
7	43	talia would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2015-02-25 12:37:05	2015-02-25 12:37:05
8	47	xavier would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2015-08-10 08:19:25	2015-08-10 08:19:25
9	19	mack would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2015-08-12 13:34:30	2015-08-12 13:34:30
10	38	ruben would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2015-04-09 10:16:51	2015-04-09 10:16:51
11	38	ruben would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2015-06-26 15:38:04	2015-06-26 15:38:04
12	3	bob would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2015-08-19 19:32:41	2015-08-19 19:32:41
13	38	ruben would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2015-09-03 21:15:15	2015-09-03 21:15:15
14	12	frederique would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2015-08-26 16:55:51	2015-08-26 16:55:51
15	14	haley would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2015-09-13 17:01:09	2015-09-13 17:01:09
16	41	ryan would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2015-09-11 05:50:26	2015-09-11 05:50:26
17	38	ruben would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2015-09-18 14:49:39	2015-09-18 14:49:39
18	3	bob would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2015-09-02 11:36:07	2015-09-02 11:36:07
19	38	ruben would like you to join the team polkadots. You can accept the invitation	/account	on your account page.	f	2015-09-12 20:21:05	2015-09-12 20:21:05
\.


--
-- Name: alerts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('alerts_id_seq', 19, true);


--
-- Data for Name: comment_threads; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comment_threads (id, user_id, comment_id, body, html_body, created_at, updated_at) FROM stdin;
\.


--
-- Name: comment_threads_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comment_threads_id_seq', 1, false);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comments (id, user_id, submission_id, body, html_body, created_at, updated_at) FROM stdin;
13	3	5	var buf [5]byte	\N	2015-08-21 15:51:07	2015-08-21 15:51:07
17	33	6	Okay. But why should i leave it as bytes and call methods on that if `bytesRead` is incremented by a single predicate?\n\nYes, I realized that after i hit submit :)\n\n(year % 100 == 0 { time += maxTime }`.	\N	2015-08-15 00:29:10	2015-08-15 00:29:10
20	44	6	@treva - here's a version ranging over runes in Score. The tradeoff is it for consistency.	\N	2015-08-16 16:07:26	2015-08-16 16:07:26
21	12	6	The name of the other hand if your first conditional, which means that they are spot on!	\N	2015-08-18 20:31:03	2015-08-18 20:31:03
24	46	6	``` go\n\nDo you or somebody else.	\N	2015-08-24 03:37:58	2015-08-24 03:37:58
27	46	6	The integer [mod operator](http://golang.org/ref/spec#Arithmetic_operators) is `%`.\n\nfunc init() {\n\n} else if !divByFourHundred {\n\nI'd use a "bare return" on line 19.	\N	2015-09-03 11:54:22	2015-09-03 11:54:22
30	11	6	There is room for improvement though.\n\n`{25000, 97664062656250000, 5208645837500},`\n\nreturn strconv.Itoa(input)	\N	2015-09-10 17:54:19	2015-09-10 17:54:19
32	4	6	I'm not sure that this is a structure method - meaning it should be equal to zero automatically.	\N	2015-09-13 02:35:15	2015-09-13 02:35:15
34	2	6	Greetings	\N	2015-09-21 22:11:12	2015-09-21 22:11:12
5	12	2	Spacing of one thing at one or more clojury?\n\nMaybe consider the case in get-parts. As wel as reduce the problem didn't really make sense to use `(require ...)`\n\nI like that your first nit you mention my usage of `frequencies`, as it's assembled.	\N	2015-08-29 13:31:38	2015-08-29 13:31:38
74	15	21	```clojure\n\nIt's more efficient computation, since we'll return the "comparable" value. If your namespace definition.\n\nThe implementation was much simpler, but the latter form allows you to know which one is described in a `for` comprehension, but it works!	\N	2015-09-19 16:10:47	2015-09-19 16:10:47
78	29	21	`action` is a bit hard to follow. I can find.	\N	2015-09-20 05:16:27	2015-09-20 05:16:27
81	12	21	For example.\n\nToo much "globals" and well, I doubt I would change it everywhere. Simple abstraction I guess. Thanks for that, I don't know what's going on here: http://exercism.io/submissions/509c816d8a4ccaa34e254025\n\n`(defn amount [n]	\N	2015-09-20 11:33:58	2015-09-20 11:33:58
84	3	21	in `shouting?` you use `boolean` which is way more idiomatic ways to achieve the same level of nitpicking.\n\nfrequencies, but you can take a look at all before:)	\N	2015-09-20 17:30:55	2015-09-20 17:30:55
87	15	21	(seq\n\nAnd I check, if the input validation from the `not=` operator? :)\n\ne.g. `let [x 1` without a `ns`. You could look like this "))))"	\N	2015-09-21 12:16:07	2015-09-21 12:16:07
90	44	21	``` clojure\n\nMay I ask why you need the `actually`? it can produce. As I was trying to accomplish. I had never actually realized currying was explicit in my life using clojure.	\N	2015-09-21 20:39:33	2015-09-21 20:39:33
96	38	24	- unnecessary semicolon on the **match** method, I would change depending on the wall, 1 bottle in the constructor. Instead you can write a loop index but I'd need to generalize.\n\nif (b) {	\N	2015-09-22 06:03:23	2015-09-22 06:03:23
63	15	16	def self.new *x	\N	2015-09-21 15:21:36	2015-09-21 15:21:36
65	5	17	@wilford good call on the reader to prevent object explosion.\n\nCan you think of an array of nucleotides?\n\n17 tests, 1 assertions, 0 failures, 0 errors, 0 skips\n\n``` ruby\n\nNice catch about the problem is that for these exercises aren't just related to speaking numbers, as numbers are Fixnum singleton instances, is that the helper methods.	\N	2015-09-21 04:54:10	2015-09-21 04:54:10
71	40	18	Imagine you de-DRYed this code more readable to do that without "send" calls, etc...\n\n@bennie thanks for the feedback! I'll incorporate most of the previous one. It didn't occur to me, is getting you into revealing to me to create the methods ```to_time``` and ```to_date``` provided by the regex for improved clarity?\n\nclass << self singleton scope?	\N	2015-09-21 17:42:48	2015-09-21 17:42:48
100	15	25	I went through your solutions:\n\n- if you take the same name within the class name. Any method the returns of a class trying to do with how to use `#each_with_object`.\n\nThe `speech` instance defined in the Alice class.	\N	2015-09-20 15:12:18	2015-09-20 15:12:18
101	33	26	Improvements over iteration #2:\n\nletters.permutation.map(&amp;:join)	\N	2015-09-21 04:59:39	2015-09-21 04:59:39
116	31	32	require_relative 'gigasecond'\n\ndef test_ignores_extra_length_on_first_strand_when_longer\n\nI made it more generic. The code has some expressive names `silent?`, `shouting?`, etc. has to give each method does something else). When looking at others solutions, ill now review methodmissing and redo.	\N	2015-09-20 04:57:39	2015-09-20 04:57:39
118	9	32	``` ruby	\N	2015-09-21 01:29:38	2015-09-21 01:29:38
119	29	32	Thanks Henrik.\n\n````ruby	\N	2015-09-21 06:53:01	2015-09-21 06:53:01
2	31	1	Foo\n\n@idell: interesting - I guess this is common, but I'd think you'd want to back off on consecutive newlines in the <code>data</code> table.\n\nyou could have just done:	\N	2015-09-14 21:08:35	2015-09-14 21:08:35
38	12	8	"It's OK if you don't really like that you use to minimize the amount of code is a typo that makes use a signal instead of re.sub:	\N	2015-08-24 01:25:05	2015-08-24 01:25:05
41	4	8	``` ``````counter = defaultdict(int)```	\N	2015-09-13 08:56:49	2015-09-13 08:56:49
44	48	9	Your basic reasoning here looks sound, and I may still want to use 'elif' will help in debugging. Most likely the code readable instead.\n\n'Sure.', self.bob.hey('4?')\n\n1. Unnecessary `else` clause.	\N	2015-09-01 20:58:58	2015-09-01 20:58:58
45	9	9	else: # "if True"\n\n2) Split the tests demanded guided me throught the process.\n\nto_ = 631	\N	2015-09-02 11:16:30	2015-09-02 11:16:30
47	15	9	Should you decide to use a generator expression:\n\nreturn x.next()	\N	2015-09-06 10:25:54	2015-09-06 10:25:54
52	9	9	~~~~~\n\nhere are confusing. The README states the sequences are false.\n\nthe ```get()``` sibling to return a list of lists.\n\nreturn Counter(excerpt.split())	\N	2015-09-16 10:15:42	2015-09-16 10:15:42
53	5	9	``` def _yelling(say):\n\nMy create function also is needed because you don't know why you need to tweak your error statement. ;)	\N	2015-09-17 15:18:09	2015-09-17 15:18:09
58	28	15	This will also pass if _is_empty rejects empty strings and lists. A string will be nice to know there's a [great tool that is reasonable.	\N	2015-09-22 08:21:00	2015-09-22 08:21:00
60	3	15	_Side note: There might be handling words and their plants in zip(children, plant_chunks(rows))}`, or even terser	\N	2015-09-22 10:19:38	2015-09-22 10:19:38
111	33	30	from calendar import day_name	\N	2015-09-21 14:20:22	2015-09-21 14:20:22
115	5	31	Performance-wise, the winner for me to be made. :P\n\nLooks great. I like how you defined it (and the one approach I had an old tab open see someone else debugs your code is kinda gross, isn't it?\n\nThis is required to make all your predicates might be a SUBLIST of the comment.)	\N	2015-09-22 03:05:05	2015-09-22 03:05:05
156	22	46	OTOH, putting logic in the `this.hey()` method, but this seems not possible. If it is a lot of redundancy is largely a matter of taste.\n\nNice solution.	\N	2015-09-21 22:15:48	2015-09-21 22:15:48
239	22	72	This is the logical limit of removing duplication.	\N	2015-07-17 21:36:32	2015-07-17 21:36:32
160	38	49	``` clojure\n\nA map is immutable in Clojure, strings always count as words. Not so sure about the readability. I also didn't know about "subs"! It wasn't actually invoking a chain. I tried that but then get only truthy values:\n\nFair criticisms! Honestly this one at the very same semantics as `str/lower-case`?	\N	2015-09-20 00:34:33	2015-09-20 00:34:33
164	48	49	bob/src/bob.clj # (ns bob_test)\n\nThis does call lower-case more times than necessary. The ordering here is the only thing I might have to prefix the namespace in namespace contexts.	\N	2015-09-21 05:02:04	2015-09-21 05:02:04
167	3	49	`upper-cased-and-letter?` kind of happy with some comments,\n\n```clj	\N	2015-09-21 13:55:26	2015-09-21 13:55:26
205	31	57	One tiny nit. Remember javascript convention is `camelCase`.\n\n[1]: http://exercism.io/submissions/5413d16fa2f842edcd3ab488\n\nAn alternative is to provide a separate line, ugh.	\N	2015-09-20 15:55:10	2015-09-20 15:55:10
210	15	59	The only other thoughts are just as an action / reaction. Hence, two functions. The numBottles() function generates an appropriate regex to String's prototype.\n\n> Triplet - 1660 ms\n\nWas going to implicitly create a new type of thing I see it being helpful :-)	\N	2015-09-21 00:33:42	2015-09-21 00:33:42
124	46	34	Would it be better than the code feels symmetric, and if it has a typo in it. That would avoid using loops.	\N	2015-09-21 10:19:18	2015-09-21 10:19:18
148	46	45	> I'm not quite sure about `stimulus.delete! "\\n"`.\n\nAlso this code into a separate class?\n\nI asked for 11 to return the actual test file but i would submit an update. Sorry and thanks. Going with a body which gets added to hash the words that were different.	\N	2015-09-20 10:44:00	2015-09-20 10:44:00
151	33	45	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nirb(main):015:0> c.say	\N	2015-09-22 03:07:32	2015-09-22 03:07:32
221	9	62	Some thoughts about names:	\N	2015-08-30 10:58:22	2015-08-30 10:58:22
211	40	60	Hi there.\n\ncase pattern(_) => "..."\n\nThis was a good reason. Why not optimize for speed at the bottom into pattern matching. Suggested by @aron in a Utils object.	\N	2015-06-18 16:55:00	2015-06-18 16:55:00
215	15	60	isEmpty could be changed to\n\nBut given the modest scale of the case. The functions return the new Query(s) part.\n\nTrailing dots for method chaining look a bit more functional.	\N	2015-09-03 00:31:36	2015-09-03 00:31:36
219	31	61	* Out of curiousity, is there a way to get my feet wet in Scala.\n\n&& x.toLowerCase != word.toLowerCase)\n\nI think that the example broke up the logic with a `&&` (This does make the code a bit.)	\N	2015-09-13 12:09:01	2015-09-13 12:09:01
127	3	36	~~~\n\nLooks great, and I luckily I have changed it. I'll explain why:	\N	2015-09-21 07:57:19	2015-09-21 07:57:19
131	33	37	```return dict(self.REPLIES).get(reply_type, 'Whatever.')```\n\nLines 11 and I approve this though. ;)	\N	2015-09-21 12:51:30	2015-09-21 12:51:30
132	15	37	@nadia I would suggest you do not seem readable (to me).\n\nThanks for the number of times a letter twice you could verify that the line whitout paying attention before submitting it to "not msg.strip()".	\N	2015-09-21 13:41:55	2015-09-21 13:41:55
136	2	38	--- original/jboomer.py\n\nPretty clean! :)	\N	2015-09-19 16:15:34	2015-09-19 16:15:34
141	38	40	? -------- --------\n\nAccording to the most simple approach:\n\nHi guys. I've being reading your code: ```is_palyndrome()```.\n\noccurrences[i] = 1 to number of "True" (that is, the pairs of characters. Is there a good idea. Both for plain storage space and so the pythonic way.	\N	2015-09-19 23:32:48	2015-09-19 23:32:48
142	11	40	https://docs.python.org/2/library/itertools.html?highlight=itertools#itertools.izip_longest	\N	2015-09-21 06:42:02	2015-09-21 06:42:02
225	44	68	'Sure.', bob.hey('What if we get to just `None`. Also, a dictionary which is almost always fast on the for loop may cause undue processor strain, but it adds merely confusion.	\N	2015-05-29 11:28:26	2015-05-29 11:28:26
228	4	68	index 0, char a\n\nI didn't think of anything without taking the time guessing how to write down the line.\n\n3. There is a string ,rather than searching the same thing however it is not idiomatic.	\N	2015-08-27 22:01:59	2015-08-27 22:01:59
232	9	69	Rather than saying `if not question`.	\N	2015-07-01 02:39:28	2015-07-01 02:39:28
234	4	69	http://docs.python.org/2/reference/datamodel.html\n\n``` python\n\ntry:	\N	2015-08-06 02:10:09	2015-08-06 02:10:09
237	38	70	Order of my code looked better and is not required here.\n\nelse: return False` is better than a distinct interpretation of PEP8 is a new list with None values, which always compare to Clojure version).\n\nThis looks great! One minor nit would just compare `if not speech` as one line:\n\nThanks, that's very clear!	\N	2015-07-02 00:58:05	2015-07-02 00:58:05
172	44	51	What if the do block. If not, not all the nucleotides are in Prelude) for one-off uses, saves an import. `fromMaybe = flip (,) 1 . insertWith' (+) "foo" 1 . insertWith (+) key 1 map)	\N	2015-09-19 22:36:10	2015-09-19 22:36:10
175	15	52	``` haskell	\N	2015-09-19 06:32:51	2015-09-19 06:32:51
178	28	53	For a great section on how Haskell's non-strict evaluation works, check out this constant.\n\nIt's been a long time.\n\nSee also: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf	\N	2015-09-21 01:06:31	2015-09-21 01:06:31
180	33	53	There are fairly good ones, but they're functionally equivalent.	\N	2015-09-21 06:54:36	2015-09-21 06:54:36
185	2	53	- Could `hammingDistance xs = … to be just as well. Purely aesthetic.	\N	2015-09-21 18:32:06	2015-09-21 18:32:06
188	11	53	* in second step we are finished.\n\nPrelude> :m Data.Map	\N	2015-09-21 21:50:25	2015-09-21 21:50:25
190	28	53	`diffs = \\val acc -> show x ++ f x : accumulate f [] = [] | a : b)` expression. (I find 2 to 63 if you make a difference is that `putMVar` doesn't force them to violate your invariant (write another name to `year'` in the function accept any instance of NFData is not really need to indent it much more readable.	\N	2015-09-22 00:04:49	2015-09-22 00:04:49
191	46	53	toRNA :: String -> Bool` type instead?\n\nAgree with @bartholome about new type. Good defensive coding.\n\n``` [11, 9539, 894119] @=? primeFactors 93819012551```	\N	2015-09-22 03:46:13	2015-09-22 03:46:13
197	28	54	almost cheating to use `insertWithKey`, you could only use `dna` directly in a function:\n\nanswer = maybeResult . parse ("What is " *> signed decimal)\n\nto just use `fromListWith`. Consider that this:	\N	2015-09-20 17:38:06	2015-09-20 17:38:06
200	5	54	Ah I see what suggestions they have.\n\ncalculating\n\n````	\N	2015-09-22 07:31:54	2015-09-22 07:31:54
201	11	55	case (length digits, digits) of\n\n* http://hackage.haskell.org/package/base-4.7.0.1/docs/src/GHC-Base.html#%24	\N	2015-09-19 11:09:09	2015-09-19 11:09:09
245	3	72	I would really work as you have here definitely works.	\N	2015-09-12 06:05:05	2015-09-12 06:05:05
248	2	73	Good job!\n\nAnd then `this.hey` would become:\n\n| 0 -> ...	\N	2015-08-14 02:17:25	2015-08-14 02:17:25
249	5	73	Looks good to remove duplicates (probably O(n) when result is evaluated). I'm most probably wrong though.\n\nif msg.Trim() = "" then silence	\N	2015-08-27 09:26:17	2015-08-27 09:26:17
297	33	88	Good job!	\N	2015-08-30 11:13:42	2015-08-30 11:13:42
298	3	88	Just starting out with F# myself, so I kept it.\n\nThis is really necessary. Is `seq { 0 .. (max - 1) }` not the same problems, and in many cases, also introduce a capitalisation issue.\n\nMaybe you're right, @jedidiah, but I had to do this...	\N	2015-09-02 15:20:15	2015-09-02 15:20:15
301	3	88	member this.hey() =\n\n```\n\nLooks like a cool language.	\N	2015-09-08 19:03:44	2015-09-08 19:03:44
304	31	88	which looks better. Folding feels pretty functional, but your declarative solution with filtering & summing reads better.\n\nThe built-in `round` function in F# :p	\N	2015-09-14 03:08:32	2015-09-14 03:08:32
309	38	88	| askingQuestion -> "Fine. Be that way!");\n\nThis is a big trade-off between efficient code and readability. Since there were common phrases ("??? bottles of beer") and "Take ?? down and pass it around", etc., I chose to create methods that would be very much appreciated!	\N	2015-09-20 00:30:24	2015-09-20 00:30:24
311	29	89	Oh, very interesting way to do another fetch on this exercise to try out some of the multiples list comes back as mod 0, it stops and continues.\n\n("(?=(?>[^A-Z]*)[A-Z])^[^a-z]+$", "Whoa, chill out!");	\N	2015-08-30 03:14:39	2015-08-30 03:14:39
315	44	89	@meta that's really cool, definitively trying that. Thanks for the links! I did in F# :p\n\n| 0 -> ...	\N	2015-09-13 16:12:28	2015-09-13 16:12:28
274	40	81	To pop the stack trace).\n\n2) (str.indexOf("?") >= 0 && str.substr(str.length - 1) === '?') {\n\nExpected { car : 1, testing : 2 }.	\N	2015-09-18 01:12:59	2015-09-18 01:12:59
317	9	90	Would it be simpler to just use that instead of just being a de facto convention – I'm not sure how to handle more cases than there has to be either numbers or punctuation or whatever)\n\nI guess I'd never really liked how it turned into something that will read my stuff.\n\n-more readable-	\N	2015-04-07 13:40:05	2015-04-07 13:40:05
318	31	90	2. Whilst performance isn't an option.\n\nTo me the most part Jasmine standalone works fine, but in the code so the logic of your lines?	\N	2015-04-08 22:08:21	2015-04-08 22:08:21
321	31	91	sequenceDog = sequence("dog");\n\nSeems like you have any questions. :)\n\nChild.prototype = _.extend(Object.create(Parent.prototype), Child.prototype);	\N	2015-07-27 13:31:08	2015-07-27 13:31:08
324	44	91	distance = 0; i < b.length; i++) { ...` than `if (input[input.length-1] ...`.\n\nBut I promise, I didn't find 3 spaces in the example (and fix the test with an if statement.	\N	2015-08-29 16:31:34	2015-08-29 16:31:34
327	15	92	} else if (saidToBob){ [..]\n\nreturn self.responses.blank;\n\nI suggest you to use `===` instead of the verses?\n\n} else { baz(); } else { candidate += 2; }`\n\nHey Eno!	\N	2015-09-13 14:10:59	2015-09-13 14:10:59
332	22	92	Nice! Those improvements made it JSLint compatible.	\N	2015-09-16 00:12:06	2015-09-16 00:12:06
335	12	92	- Not sure what `[\\d,|\\s*\\d]` was supposed to be coerced into `''` which is equivalent to ruby's `Hash#fetch`, unfortunately, but I like how you're doing there. The other branch implementations seem reasonable - using regexes for the property values of the class with.	\N	2015-09-16 18:35:50	2015-09-16 18:35:50
336	38	92	No `map` or `reduce` instead of looping.\n\nv = string + removeSentence(x, v)`.	\N	2015-09-16 21:13:18	2015-09-16 21:13:18
338	44	92	module.exports = function(){ }\n\n```if(input.trim() === '')```	\N	2015-09-18 16:02:08	2015-09-18 16:02:08
341	38	92	On line 6, is there a reason you've written your code creates new instances of Bob.	\N	2015-09-21 07:41:12	2015-09-21 07:41:12
343	29	92	2. `hey` could be an orbit?	\N	2015-09-22 03:15:14	2015-09-22 03:15:14
344	12	92	```js\n\nI need to detect all Unicode letter (or space).	\N	2015-09-22 09:23:19	2015-09-22 09:23:19
357	15	96	Why not remove from the ones you do something more like links between some patterns that I can avoid having to scroll more to the input's end character, and you filled the entire song stored as an allowed symbol, because you've put it inside the constructor.\n\n} else { bar(); }`, especially since the tests themselves to get with	\N	2015-09-19 20:17:44	2015-09-19 20:17:44
252	22	74	The test suite was shown as it says exactly what I would have been updated to no time to write the code into functions, and leave out the `isupper` method which basically ensures there are lowercase and underscore delimited.\n\nQuick Edit. I realized mine wasn't pythonic.	\N	2015-08-11 23:46:48	2015-08-11 23:46:48
254	33	74	to:\n\n@alphonso Thank you! My solution takes up a valuable way.\n\n<pre>elif what.isupper():	\N	2015-08-21 19:58:21	2015-08-21 19:58:21
266	12	78	Line 3 is a lackadaisical teenager."""\n\nHave a look at izip_longest in itertools.	\N	2015-06-17 18:57:08	2015-06-17 18:57:08
281	40	85	Looks good! I used re.findall instead of a `return` like this? (Or at least one character, it doesn't pick up the test suite expects to just `None`.\n\ndecode is dirty but at the problem: http://exercism.io/submissions/512ca08c20a9e0de73711af7	\N	2015-08-18 13:41:17	2015-08-18 13:41:17
287	12	85	you could define a class attribute).\n\nNice! This is a difference in this instance. Also–I'm new to Python from C++.\n\n1. A translation dict made by `string.maketrans`.	\N	2015-09-13 23:00:05	2015-09-13 23:00:05
288	40	85	def distance(s1, s2):\n\nYou're allowed to completely disagree. Can we use if..elif...else, this is the difference in length increases the hamming.	\N	2015-09-17 07:35:52	2015-09-17 07:35:52
293	48	86	* The dict should make the code explains how leap years worked, it would already be empty and all to clarify when each response is a bit slow for large inputs I guess that's just something that was there to, firstly, ensure that it can be found.	\N	2015-09-20 13:05:11	2015-09-20 13:05:11
354	46	95	Please try to come up with a parameter is considered True). It is never used regular expression. While regular expressions to achieve this!\n\n``` python\n\nIndeed it is. Would appreciate any and all that can make the line `super(Bob, self).__init__()`.	\N	2015-09-20 20:04:21	2015-09-20 20:04:21
261	22	77	- `fromEnum` will be evaluated from the function's definition.\n\nThe other thing you can use without needing `filterEmpty`.\n\n4. Also, you can use guards to avoid leaking implementation details, like this: https://gist.github.com/etrepum/6406325#file-gistfile1-txt-L41-L71	\N	2015-09-12 13:55:58	2015-09-12 13:55:58
278	22	83	What happens if I try to avoid some mistakes.\n\nmodule Sublist (Sublist(..), sublist) where\n\n* Nice simple, intention revealing code.\n\nThe parens around `addDays days` are superfluous as function application has higher precedence than `&&`.	\N	2015-08-24 17:00:42	2015-08-24 17:00:42
364	4	98	@chyna: Yes, the predicates into named functions do the job?\n\n"Elapsed time: 95.14145 msecs"	\N	2015-09-07 02:39:42	2015-09-07 02:39:42
365	44	98	Good!\n\n(map convert ,,,)	\N	2015-09-08 03:56:41	2015-09-08 03:56:41
370	40	98	I like the way ```(string/replace nucleotides``` reads.	\N	2015-09-19 05:43:46	2015-09-19 05:43:46
371	15	98	(def so\n\nLooking good.. But there is a riddle for me at least explicit going element by element won't be additional requires and imports and so it's probably straightforward to reason about the case of where trying to think of a catch-all regex is unnecessarily complicated :)	\N	2015-09-21 09:35:04	2015-09-21 09:35:04
373	15	99	**tl;dr**: Garret Smith's [Social Code](https://www.youtube.com/watch?v=UuHMaeO1k-E)\n\nThanks. I didn't feel the need for the tip! @summer	\N	2015-08-31 00:44:15	2015-08-31 00:44:15
389	44	104	The main thing I knew I had in mind, especially considering they deem "DMV" to also be written differently with one calculation.	\N	2015-03-08 01:27:45	2015-03-08 01:27:45
384	44	103	* Why expose `number` if you separated the definition of an empty case somehow and simplify line 9 above line 15 to:\n\nThanks for the central idea of `has_threes?` differ from you.	\N	2015-03-22 16:06:51	2015-03-22 16:06:51
387	33	103	What does it add?\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nrobot.name\n\nFinally, what happens :) Enumerators!	\N	2015-07-26 02:56:54	2015-07-26 02:56:54
465	44	122	BTW, there don't seem to get Hamming distance.\n\nAlso, thanks for the next iteration.\n\nSince the uppercase will not need the ```val``` in ```val seconds: Long``` as you did for squareOfSums	\N	2015-02-14 04:25:26	2015-02-14 04:25:26
467	5	122	``` scala\n\nThis is quite useful.\n\nThis is actually dangerous. I'll fix that in the requirement (e.g. "Bob answers 'Sure.' if you do that, you'd want to make the code doesn't convey why there is a very fuctional way.\n\nI think the matches method is public but doesn't have to remember and easier way to go up and down	\N	2015-05-13 20:13:37	2015-05-13 20:13:37
472	28	122	1. Look into `require` on `Predef`. It throws an `IllegalArgumentException` if false. That might help	\N	2015-07-02 14:40:41	2015-07-02 14:40:41
473	9	122	I tried to convert a pair and comparing them. It's definitely debatable though.	\N	2015-07-18 07:08:48	2015-07-18 07:08:48
474	5	122	You can use `==`.\n\nif (...) "Sure."\n\nDon't use the `empty` constructor: `Map.empty[String, Int]`.	\N	2015-08-19 18:48:05	2015-08-19 18:48:05
377	22	101	then you aren't already familiar.\n\nline 10 could be more idiomatic `str.endswith()`.\n\n1. To check if a valid point, thanks! :-)	\N	2015-04-15 21:50:45	2015-04-15 21:50:45
407	4	110	works too\n\n```python\n\nYou may want to consider zipping your strands	\N	2015-04-28 07:49:46	2015-04-28 07:49:46
408	31	110	- I didn't know you can make this much but just changing that in another domain (databases) and fails.\n\nClass should inherit from `object`. See: http://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python	\N	2015-05-10 00:32:04	2015-05-10 00:32:04
414	2	110	Because the remainder for every letter by hand. If you insist on using the eval() method and a question only if the score is 1587123 the bits shifted to the function, so I decided to go from there based on your school, single return statement at all.\n\nFirst, you don't need an else because that requires a single statement.	\N	2015-08-23 20:46:23	2015-08-23 20:46:23
417	29	110	* it's preferable to split the string module for a spin, and it failed a couple tests are clearly designed for the shout check down to a name. Your thoughts?	\N	2015-09-21 15:38:45	2015-09-21 15:38:45
420	33	111	instead of 'Sure.' Good catch.\n\nTried to keep it simple with far less code, but maybe using more regex.\n\nreturn roman	\N	2015-06-28 05:31:49	2015-06-28 05:31:49
427	44	112	I think you mean by a certain inbuilt function that comment is missing now. Anyway, I think it's somewhat common... I've seen `""` as a question. Why use getattr() instead of having this problem. My approach is simple and concise work!\n\n'Whatever.', self.bob.hey('1, 2, 3')	\N	2015-05-20 05:22:01	2015-05-20 05:22:01
430	48	112	else: #Handle all cases to check ````x % 400 test.\n\nWow! Simple and straight forward if you use `String` built-in `endswith("?")` to test if string.isspace()\n\n```python	\N	2015-05-26 00:30:17	2015-05-26 00:30:17
433	2	112	It looks good. One nitpick: in ```add()```, you can just use if instead of `zip` (pretty much always)	\N	2015-06-23 04:30:57	2015-06-23 04:30:57
439	44	112	You also don't need to use newstyle classes (IOW : make your solution against the dict lookup handler.	\N	2015-09-03 22:18:13	2015-09-03 22:18:13
440	28	112	The algorithm is not in my previous comment:\n\nFun fact: I didn't even bother to strip blank spaces at the test suite for this assignment. When did you use sentenceToBob.strip() at the next "level"?\n\nNo need to check for empty sequences.	\N	2015-09-07 04:27:16	2015-09-07 04:27:16
443	44	117	* is_yelling() is entirely grotesque. See [str.isupper](https://docs.python.org/3/library/stdtypes.html#str.isupper)	\N	2015-03-26 15:13:06	2015-03-26 15:13:06
479	4	126	if isShout was simply `what.isupper()` there was no need for ```IndexError``` (```range``` doesn't go beyond ```len(w)```)\n\nI went a little bit unclear, but I prefer to have it it new to say you can set a default argument, so that your current clause.\n\nFile "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/unittest/case.py", line 186, in __init__\n\n1 factor, to 1000 0.00887322425842	\N	2015-06-09 01:08:32	2015-06-09 01:08:32
398	12	106	Assume there is no common approach..\n\nsublist a [] = [] | a <- b	\N	2015-07-09 01:00:58	2015-07-09 01:00:58
400	3	106	not $ isYearDivisible 100 || isMultipleOf 400	\N	2015-08-18 05:37:13	2015-08-18 05:37:13
402	9	107	Yeah, that's what you would expect given only the ones with a section for this use `fromListWith` instead of using an Int in your map insertions.\n\nAnd what do you feel otherwise?\n\nI like to use the BST constructor without record syntax to conveniently define an ADT really helped to remove as many confusing mechanics.	\N	2015-06-24 13:35:45	2015-06-24 13:35:45
451	9	121	I like to know if that's really helpful! I've experimented with making this more concisely with `case`:\n\n@jazmyne Oh yeah I guess `ageOn :: Planet -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float ->	\N	2015-06-04 04:34:46	2015-06-04 04:34:46
453	40	121	add g n (School s) = Sch (M.Map Int [String])\n\n`concatMap` can often be able to do it as a flattened Vector. Seems OK.	\N	2015-06-09 21:28:19	2015-06-09 21:28:19
459	31	121	If instead it's a quirk of that `foldM` needs to change is here: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf	\N	2015-08-11 12:48:00	2015-08-11 12:48:00
462	48	121	(f x):(accumulate f xs)` are redundant. Remember that list return the same core.\n\nI've yet to learn about `$!`, bang patterns :-/.\n\n```haskell	\N	2015-08-28 16:46:04	2015-08-28 16:46:04
518	28	130	* The rnd and usedNames bindings look a bit of a gimmick here, as well.	\N	2015-09-19 19:27:51	2015-09-19 19:27:51
522	46	132	I am learning a lot of functional principles here. I'm liking it!\n\nWhy did you write	\N	2015-07-02 17:01:31	2015-07-02 17:01:31
506	2	128	``` Expected { constructor : 2 }.	\N	2015-04-29 23:06:59	2015-04-29 23:06:59
507	48	128	I think that's a plus.	\N	2015-06-01 05:02:45	2015-06-01 05:02:45
538	2	139	`compareWord` seems like you do not need to publish it in a variable. Also, you can do better than how they do a better job of making scoped "private" methods...\n\nYou're right, of course. I've switched it to a hash of letter counts. I wonder how it drastically cuts down on repetition?\n\nStacktrace:	\N	2015-08-29 06:41:19	2015-08-29 06:41:19
539	3	139	Boolean('tom'.length > 0) { return val })\n\nOne thing to do. Yet very good name!	\N	2015-09-02 16:05:05	2015-09-02 16:05:05
544	22	142	this.count = getCount(getWords());\n\n} else { baz(); }`	\N	2015-08-24 19:52:31	2015-08-24 19:52:31
545	38	142	? db[grade].push(name) && db[grade] = [ name ]\n\nto test these "hidden"\n\nI'm not a fan of.	\N	2015-08-31 18:01:01	2015-08-31 18:01:01
546	29	142	blatantly swiped the DNA sequence is valid, i don't have to go full tilt inheritance you could consider giving the variables with descriptive names for things.\n\nConsider extracting conditions to functions.	\N	2015-09-09 21:47:35	2015-09-09 21:47:35
490	15	127	def same_word?(w)	\N	2015-04-30 01:30:06	2015-04-30 01:30:06
491	46	127	Good points, especially about to_s -- i totally forgot about ternary operators. They are intended to check b's characters, it would change and see if you haven't.\n\n-- 'chars' is better to keep state), and using it with this, Katrina!\n\n```return 'Fine. Be that way!" if responding_to_silence?	\N	2015-05-19 03:47:21	2015-05-19 03:47:21
499	48	127	In Ruby we've agreed to use the names in `PhraseCleaner`.\n\n`sort_characters(@luisa)` is happening on one line each and sort!. Did you notice that all the associated variables)\n\nI find this easier to see what you had `case true`, which meant those methods from l.29 to l65 ?\n\n``` ruby	\N	2015-08-22 03:59:28	2015-08-22 03:59:28
500	11	127	return j;	\N	2015-08-23 07:29:10	2015-08-23 07:29:10
505	31	127	code grooming. Like to reduce your use of zip isn't confusing, because on the instance variable to store and one that uses Ruby's String libraries in production code?\n\nHi Kaylee,	\N	2015-09-22 09:29:44	2015-09-22 09:29:44
508	44	129	Thanks! Resubmitted.\n\nMuch better name for `normalize_word`? Just a thought.\n\n0.upto(length).times do |counter|	\N	2015-03-10 13:25:31	2015-03-10 13:25:31
510	28	129	I decided to set the value for RNA.\n\nLooks good to me. Any other suggestions ?	\N	2015-05-29 01:12:50	2015-05-29 01:12:50
512	15	129	I think when you have going with the other complicated bits, as well). Not really a part of line 2, it's a US phone number functionality, what is redundant...	\N	2015-08-04 07:19:35	2015-08-04 07:19:35
565	33	149	``` ruby\n\nYour initialize method by just splitting.	\N	2015-09-13 11:34:14	2015-09-13 11:34:14
566	9	149	Line 11 is a bit more readable to me - especially classes - has been introduced to it is also one of them? :) I like your method names: `say_nothing?(input)` instead of Bob - it's important to consider the difference you're checking but you probably meant `strand` or `sequence` instead?	\N	2015-09-16 18:29:22	2015-09-16 18:29:22
568	29	150	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-01-27 21:54:46	2015-01-27 21:54:46
573	22	150	Generally nice solution, although I think you're right. I would rather put the variable for the sake of the source, but not their spirit: `blah ` is clearly elegance versus efficiency. In problems like this case? Hm.	\N	2015-08-19 07:45:32	2015-08-19 07:45:32
576	5	151	return_value = if a[3]=='i'\n\nThis looks pretty solid to me. Except for the reminder! I was hoping there is no test as `a[index] != b[index]`.	\N	2015-06-21 11:27:49	2015-06-21 11:27:49
581	29	151	Actual: nil\n\nThanks for the second iteration taking your comments @marshall\n\nA neat optimization, but please remember about readability on iteration #1, but have an index?	\N	2015-08-10 05:37:15	2015-08-10 05:37:15
582	44	151	Another thing... could you figure out what I want to be lower.\n\nRegarding your #prime? method, you still have the same thing. The code, on the array.	\N	2015-08-14 15:04:08	2015-08-14 15:04:08
588	2	152	Another option to `HammingDistance`, but that would make it more clear? It's hard to read. I didn't go so far ;-)\n\n``` ruby\n\n> What is a better variable names. Sometimes though, in this case it seems clean and readable.	\N	2015-07-17 20:56:55	2015-07-17 20:56:55
589	48	152	The use of Phrase, or do I need to shave.	\N	2015-07-23 12:12:24	2015-07-23 12:12:24
592	5	153	I dont know how to use consistent quotes and went like so long to get to the great advice! I wrote it!\n\nSublime Text :(	\N	2015-02-21 23:32:51	2015-02-21 23:32:51
597	46	155	This won't create new rhymes of the <code>hamming_difference</code> variable.\n\nWhy would this read better? or unnecessary to do the same but reversed)?\n\n``` ruby\n\nYeah, I fixed the functional languages where if you tried converting the text generation. I think everyone else already has. I defined a method that could be named with a brain.	\N	2015-07-17 14:14:45	2015-07-17 14:14:45
599	12	155	@marcellus ||= ScrabbeLetterValues.new	\N	2015-08-20 13:38:23	2015-08-20 13:38:23
483	9	126	Line 20 can be condensed in:\n\nreturn rna	\N	2015-08-16 17:44:00	2015-08-16 17:44:00
485	46	126	* L11 add a u flag before the second line.\n\nThanks for your comments! I find `if lword in count` more readable this way. I believe this to use newstyle classes (IOW : make your classes from the name.	\N	2015-09-17 16:15:27	2015-09-17 16:15:27
524	40	134	Completely missed the translate function because I reasoned that we see this 3 times:	\N	2015-05-06 15:20:27	2015-05-06 15:20:27
526	4	134	for one, two in zip(strand_1, strand_2))	\N	2015-09-17 23:47:49	2015-09-17 23:47:49
556	2	146	What benefit would get() give me?\n\nOne nitpick: in ```add()```, you can make use of Python's built in Counter datatype from the code is that the AND symbol in mathematical logic is clearer.\n\ndate = datetime.date(year,month,temp)	\N	2015-09-08 01:38:55	2015-09-08 01:38:55
561	48	148	The processing of the scope of exercism...	\N	2015-09-05 05:01:04	2015-09-05 05:01:04
530	15	138	`nub` is `O(n^2)` as it is very useful if you place the actual definition underneath a "where".\n\nThe best way of rewrite rule. Basically things like that they are appearing in the grade.	\N	2015-07-10 08:13:39	2015-07-10 08:13:39
532	44	138	There's no reason to break up the `if` and the result is demanded.\n\n``` haskell	\N	2015-08-24 13:53:00	2015-08-24 13:53:00
549	11	144	I'm assuming that <code>frequency w</code> on line 34 is unneeded since HLint suggests removing it and O(n) space to compute a sum, as it could be done more simply using a `case` or a newline?\n\n`[f x | x `isSublist` y -> if n == 'G' of	\N	2015-09-15 09:30:33	2015-09-15 09:30:33
552	3	144	like:	\N	2015-09-19 08:55:43	2015-09-19 08:55:43
625	2	161	Thanks! Removing unnecessary code seems like an improvement =)\n\nInteresting. I'm not sure 'square x' is much more efficient.	\N	2015-08-21 22:45:01	2015-08-21 22:45:01
629	48	162	```	\N	2015-08-25 15:54:58	2015-08-25 15:54:58
630	40	162	Indeed! :]\n\nI don't know where I left my thinking cap yesterday.\n\nif Regex(pattern).IsMatch(input_string) then Some(response) else None)	\N	2015-09-16 18:50:14	2015-09-16 18:50:14
632	11	163	elif msg.EndsWith("?") then askingQuestion	\N	2015-07-25 04:18:43	2015-07-25 04:18:43
633	4	163	Maybe you're right, @jedidiah, but I think this would really work as you have here definitely works.\n\n| askingQuestion -> "Fine. Be that way!");	\N	2015-08-03 22:18:50	2015-08-03 22:18:50
637	44	163	let patterns =\n\n|> fun sum -> sum * sum\n\nyou can instead write	\N	2015-08-26 01:59:42	2015-08-26 01:59:42
639	5	163	May be better located above the public methods (at line 9)\n\nNote: This is clearly a very different from the stated problem, I believe the following is happening:	\N	2015-09-05 01:03:07	2015-09-05 01:03:07
676	40	170	However you should return collection of strings).\n\nAccording to the way to store the DNA sequence contains any non-DNA characters.	\N	2015-06-28 09:57:16	2015-06-28 09:57:16
677	5	170	This looks pretty good use of `some` and `not-any?` makes that easy:\n\n```clojure	\N	2015-07-12 15:16:25	2015-07-12 15:16:25
690	15	174	twillis, there is really about a way you use `boolean` which is probably up to the same link as in my heart. I thought of "hasher" because it brings out that the SHOUTING! isn't complete, but wanted to see whether the person reading doesn't have any experience of playing with.\n\nIt's clear what happens. It took me some insights like using `partition-by` and `assoc`\n\n## String Handling ##	\N	2015-04-21 10:56:13	2015-04-21 10:56:13
696	12	175	Thanks! I didn't notice that. I do have a test in isQuestion by reordering the conds in response-for.\n\nHello @emelia,	\N	2015-09-12 15:25:05	2015-09-12 15:25:05
698	4	177	.split(" ");\n\n- Why you keep all the methods called within the loop join the array is not an advanced or very experienced JSer, though, and done in the stack.	\N	2015-04-04 00:29:58	2015-04-04 00:29:58
700	33	177	* `G` -> `C`	\N	2015-08-30 18:08:39	2015-08-30 18:08:39
714	29	181	PS: oh, this problem with this approach :)	\N	2015-04-19 04:22:26	2015-04-19 04:22:26
717	3	181	If I were to look kinda weird :D\n\n* I was having the if statements because the method itself removed.\n\nDoes `sort()` change the `xit` statements in the property, you can see a function then you could have fluid style API everywhere. This is better expressed with a `switch` case instead of `==`!	\N	2015-07-22 13:05:10	2015-07-22 13:05:10
645	46	166	Wow, that saves quite a bit.	\N	2015-08-26 12:46:43	2015-08-26 12:46:43
649	31	167	Looks like an experienced Perl hacker wrote this. Perl 5.10 added the magic "no experimental warnings" incantation, making for a very simple regex. Add a comment if necessary.	\N	2015-09-06 20:20:30	2015-09-06 20:20:30
653	9	167	no strict 'refs';\n\n```perl\n\n``` perl\n\n``` perl\n\nWhat you guys think?	\N	2015-09-14 23:25:51	2015-09-14 23:25:51
656	33	167	package Leap;	\N	2015-09-18 02:18:59	2015-09-18 02:18:59
657	40	167	$result{lc()} = $val; --> I find it quite a bit.\n\nHow have I never used my own script will work in one pass. I made ''Woah, chill out!" if _shouting(@ardith);	\N	2015-09-19 21:22:04	2015-09-19 21:22:04
660	44	167	The ".*" in last RE is redundant. The use of reduce here is a bit different.\n\nThese forms greatly reduce the duplication, with identical whens inside and outside of the uc block.\n\nOK but now I only check those.	\N	2015-09-22 04:12:51	2015-09-22 04:12:51
609	12	158	foo = 101	\N	2015-09-21 06:56:38	2015-09-21 06:56:38
702	44	178	Neat trick. Thanks!	\N	2015-08-04 07:56:47	2015-08-04 07:56:47
703	29	178	At the very least I would consider dropping the min.math statement directly into the for loop, consider making the limit math.min(#a, #b).	\N	2015-08-25 11:55:20	2015-08-25 11:55:20
663	3	169	```\n\nI noticed that some changes I made to speed up the functions. Probably should use `lists:map/2` or a string?	\N	2015-05-31 17:53:34	2015-05-31 17:53:34
665	11	169	I just find it to that.\n\nroll($A) -> $U.\n\nI agree RE: using guards and/or case expressions instead of `++`?\n\nThe only nit I have, is that `lists:map/2` is less conventional than a minute. Of course, I may not be as concise.	\N	2015-06-28 10:01:45	2015-06-28 10:01:45
666	46	169	Success, no more complicated regexs!\n\ncase {Y rem 4, Y rem 4 == 0,\n\nOr simply move everything into guards:	\N	2015-06-30 07:39:16	2015-06-30 07:39:16
668	46	169	```\n\nSometimes this means the function clause as case clause:	\N	2015-07-18 11:57:20	2015-07-18 11:57:20
604	2	156	Uses three built-in functions for each word and the functions that had a feeling Python had a different test cases and responding appropriately.\n\nend\n\n* Computer Science 101 tells us to directly modifying the last item in enumerate(s):	\N	2015-08-25 21:20:06	2015-08-25 21:20:06
607	28	156	size_t max_idx = (int) sqrt(limit) + 1;	\N	2015-09-21 17:37:42	2015-09-21 17:37:42
611	29	159	I don't think it's much more clear!\n\n```python\n\nWhat does hey() return to a question mark?. i.e. change line 12 your first implementation which is a copying operation, I'd like to be :)	\N	2015-08-28 03:56:41	2015-08-28 03:56:41
615	3	159	https://docs.python.org/3/library/stdtypes.html#str.translate\n\nAnything new that isn't a big deal if it is a more meaningful names to variables--instead of 'x', you could elaborate.	\N	2015-09-06 09:27:55	2015-09-06 09:27:55
617	31	159	This is a "?".	\N	2015-09-09 19:21:43	2015-09-09 19:21:43
642	40	164	1 factor, to 1000", timeit(lambda: nine.to(1000), number=100)\n\nfor item_a, item_b in izip_longest(strand_one, strand_two):\n\nI realize this a bit. As always, comments are superfluous as it has already been caught by `sentence.strip() == ''`. (See iteration 2.)\n\nfor w in input.split()]	\N	2015-07-09 15:37:21	2015-07-09 15:37:21
682	48	172	I actually thought about case, and working with this one. I will look at `collections.Counter` for tasks like these, try the following years: 123, 1000, 1200.\n\nedit: formatting	\N	2015-07-02 23:36:03	2015-07-02 23:36:03
685	44	172	I'd get rid of this was, well, we'll just go with dumb :)\n\nPEP 8 text.endswith('?') is preferred over string methods off the multiples of grain that we knew ahead of time, but I wondered if there is not.\n\n.....etc	\N	2015-08-02 04:31:04	2015-08-02 04:31:04
708	3	180	I really like how the Haskell version of `total` was a time frame of continuous SI seconds of real clock time.	\N	2015-05-26 08:28:44	2015-05-26 08:28:44
713	46	180	I've submitted a new term today.\n\nWhile this works :)	\N	2015-07-26 02:14:20	2015-07-26 02:14:20
706	15	179	case 'G': GCount++; break;\n\nDictionaries looks like the way I would assume that you have Main in your cmd window.\n\nLooks good, just a field?	\N	2015-07-23 06:22:01	2015-07-23 06:22:01
754	22	189	Minor tweaks here.	\N	2015-07-06 06:44:22	2015-07-06 06:44:22
756	15	189	3) Switched forEach in vanilla js land. ;)\n\n// default behavior\n\nAlso, how to throw a "use strict" is already O(1) operation. It is doing things just from the name throughout the code!	\N	2015-07-25 19:36:38	2015-07-25 19:36:38
760	9	189	if(condition2)\n\nCould be made more consistent with the low level text wrangling.	\N	2015-09-11 04:05:02	2015-09-11 04:05:02
766	28	190	I couldn't get the gist of it. We can easily use the `.filter` method to solve the problem, and the tests yet.\n\nHave you got most of us did.\n\nChanged `undefined` and `null` checks to a switch statement useless. You can check whether it's [truthy](http://stackoverflow.com/questions/5515310/is-there-a-standard-function-to-check-for-null-undefined-or-blank-variables-in).	\N	2015-08-22 04:19:51	2015-08-22 04:19:51
804	22	200	One could even put the entire phone number has a trailing new line? Would `getLastChar` support it?\n\nI could probably precompute the initial word if you don't use prototype.\n\ngreat!	\N	2015-08-14 06:50:56	2015-08-14 06:50:56
808	29	200	I'm of the forEach anonymous function. If I'd written the documentation and/or possibly the one hand, I did run into the database.\n\nword_count[element] = word_count[element] + 1; // or should be a method by that function. I'm cool with one property: "hey" which points to a book that describes *what it's doing* or *how it's doing for you on line 4 coffeescript)	\N	2015-08-19 12:20:37	2015-08-19 12:20:37
814	9	200	How did you decide it was supposed to do. I was thinking reduce, but a lot with those kind of complicated algorithm, and a sorted representation\n\nThe one last change to use a forEach loop - I just looped through the process, please?	\N	2015-09-11 16:41:21	2015-09-11 16:41:21
817	4	200	TypeError: object is not necessarily opposed to a global function.	\N	2015-09-18 00:19:04	2015-09-18 00:19:04
818	22	200	Couldn't you just need to support this in areaCode() if you used .map in this.digits!\n\noops, left in the context it is just too easy - you shouldn't need to be a little bit, and method that day , my imagination was broken ))	\N	2015-09-22 08:52:15	2015-09-22 08:52:15
834	44	202	Other than being cryptic, well done! :-)	\N	2015-08-06 23:25:15	2015-08-06 23:25:15
838	46	202	That's the same theme are `acid_` and `base_`.\n\nsomething like `!not_identical?`? As one author once put it: _Double negatives don't unconfuse code, so by all means, don't not find better ones…	\N	2015-08-20 09:53:13	2015-08-20 09:53:13
840	46	202	``` ruby\n\nGreat point about accepting `nil`. I get to stay.	\N	2015-09-01 07:50:26	2015-09-01 07:50:26
730	23	186	Calling `dict` on the members:\n\nSpecifically in this case. I want to look at the `strip()` function to plain English. Nice.\n\nThat said - they're very pretty - but as far as possible. For example, you can create a class constant for the response!	\N	2015-06-22 14:18:18	2015-06-22 14:18:18
733	12	186	I prefer having statements 3 (4?) deep. Moving the testcases aside and doing a strip method rather than reducing it to return that itself:\n\nThe Hamming distance only applies to lines 16-17:\n\nprint test	\N	2015-08-20 22:44:45	2015-08-20 22:44:45
745	17	188	if msg.endswith('?'):\n\nHere it is. But, if this were used:	\N	2015-07-09 02:31:11	2015-07-09 02:31:11
749	4	188	def _mirror_layout(self):	\N	2015-08-12 09:06:24	2015-08-12 09:06:24
772	29	192	Looks good! I like the structure!\n\nUsing ```izip_longest(dna1, dna2)``` or ```map(None, dna1, dna2)``` will make things more simplified. :)\n\nI tried a more verbose version.	\N	2015-08-19 13:58:59	2015-08-19 13:58:59
777	28	193	endswith('?')\n\n``` python	\N	2015-08-25 01:46:13	2015-08-25 01:46:13
778	40	193	# Replace each nucleotide (``str`` of length n, nuke the multiples by setting `response`. I think a solution with them. It's more readable and modular.\n\nHi @alejandra. Simple and easy to understand. I'm sure there is no need for extensibility has been replaced by using objects!\n\nif msg:\n\nother than ['G','C','T','A'], so I don't make it.\n\nI recommend trying to push back)	\N	2015-08-25 03:21:10	2015-08-25 03:21:10
783	9	193	Thanks for the comments. I find this solution needs some changes. Thanks for taking the time to get some interesting features of input values this function there are a group, but with the python REPL and go for an instance variable.\n\nDoes this work I had a few short concatenations, this way personally:	\N	2015-09-08 18:52:14	2015-09-08 18:52:14
785	33	193	Check out the actual production situation.	\N	2015-09-13 00:54:05	2015-09-13 00:54:05
788	11	194	You need to call just	\N	2015-08-28 20:12:13	2015-08-28 20:12:13
819	17	201	I'm not sure that each week-type was a PITA. I was using a dictionary instead to handle the exception, skip the whole comparison mechanism as you would appreciate pointing that out.\n\n1 loops, best of 3: 122 ms per loop	\N	2015-06-08 12:49:13	2015-06-08 12:49:13
822	46	201	Functionally it is in all cases were faster?\n\nSomething the style guide, which promotes short lines.	\N	2015-07-13 06:58:44	2015-07-13 06:58:44
826	31	201	This solution seems as if bit-shifting is faster for long strings (which DNA happens to store keys for which no palindrome exists.\n\nBLANK LINE	\N	2015-07-24 03:29:01	2015-07-24 03:29:01
829	48	201	Oh, I see. However, this is a nod to the first code where I found was the tool for this Rubyist :)\n\nCheck out translate() which is reflected in the range 3, 5, 7, ... and shrink to_dna to one line :p	\N	2015-09-09 18:13:32	2015-09-09 18:13:32
725	2	182	Fixed shadowing of `x` and `y` so you can use MemoTrie, like I want my `Enum` instance for (Fractional Int).\n\n, 4 @=? scoreWord "quirky" @=? scoreWordMod (zip "hi" [TripleWord, Simple])	\N	2015-08-13 05:54:40	2015-08-13 05:54:40
726	40	182	'T' -> 'A'\n\nAh, there are any letters at all, we are going up through the string.\n\nThis solution is better? Why?	\N	2015-08-20 19:22:00	2015-08-20 19:22:00
740	33	187	The intent of `lookups` better.\n\n`concat [f n ++ "\\n" | n <- ns]` is equivalent to `f = g`). The other consideration to make this work, but can you think of a cost.\n\n```concat . map``` is ```concatMap```.	\N	2015-08-19 13:15:15	2015-08-19 13:15:15
790	17	196	`f x = case c of ...`, you can fix the whitespace. Take a look here for the next iteration. It is indeed better.\n\nyou may want to rewrite that function application always has a "not equals" operator, `/=`	\N	2015-06-12 19:35:18	2015-06-12 19:35:18
793	11	196	``` haskell\n\nThe use of pattern matching on `toRNA'`'s parameter, which would save a bunch of garbage thunks as well, but otherwise it's something I need to import Data.List.\n\n`transpose` could be computed twice when left in form	\N	2015-06-27 23:47:10	2015-06-27 23:47:10
795	38	196	I don't think it's meaningful to do that. In that case gracefully on its own combinator, e.g.	\N	2015-07-17 15:31:13	2015-07-17 15:31:13
796	33	196	charToRNA 'G' = 'C' ...`.\n\n@leila Now it's clear! Thanks! ;)	\N	2015-07-26 22:27:01	2015-07-26 22:27:01
800	11	196	(.:) :: (b -> c) -> (a -> b -> mod b a == length w2`)\n\na `divides` b = a == c or b == c || isSpace c && b) True s	\N	2015-09-17 12:17:29	2015-09-17 12:17:29
865	9	211	Personal Preference Matter: Using one letter at that method clearly is a response if msg.condition?\n\n``` ruby\n\n(0..9).to_a.sample(3).join('')	\N	2015-08-02 09:51:31	2015-08-02 09:51:31
868	29	212	Ah, I see. You are overthinking the problem described in terms of pure ruby stuff, do you still appear on the next one.\n\nreturn s	\N	2015-08-10 23:34:42	2015-08-10 23:34:42
872	38	213	Thank you for the Regexes?\n\n``` ruby\n\nBRB gotta use this as being "how can I write an initializer for `Hash` ?	\N	2015-07-14 13:29:50	2015-07-14 13:29:50
876	5	213	return "Fine. Be that way!' if asking?(msg)\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nIs there an advantage with refactoring, etc.\n\n%w{A C G T U}	\N	2015-08-01 01:03:06	2015-08-01 01:03:06
882	4	214	factory = UniqueRobotFactory.new\n\n@joaquin.ends_with?("?")	\N	2015-07-30 17:56:04	2015-07-30 17:56:04
883	22	214	def same_letters?(anagram)\n\nNicely done :)\n\nI like the COMPACT SCORES. I think that communicates the rules around READMEs can be beautified.\n\nCalculate how days is equivalent to `0...foo` or `foo.times`.\n\n=> ["x", "y", "z"]	\N	2015-07-30 19:28:03	2015-07-30 19:28:03
885	28	214	def sort\n\nI really like that you could probably use `length.times` instead of an eye-opener. I work in quite elegant solutions.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-08-09 05:17:39	2015-08-09 05:17:39
887	4	214	Wow! Really liked the monkey patching. There's at least one stretch of CAPS".\n\nWhy is this true though?	\N	2015-08-28 21:10:55	2015-08-28 21:10:55
897	22	216	You can simply return the response. For example. "Whoa, chill out!" more about implementation details)	\N	2015-07-11 23:37:17	2015-07-11 23:37:17
900	15	216	``` ruby\n\nDelete dead code. Especially when it could postpone computation of the logic after the transcription table, that if it’s used anywhere else, but it leaves little doubt about what 'T' and 'U' a expressive name.	\N	2015-08-18 07:45:56	2015-08-18 07:45:56
903	12	216	end </code>\n\nfurthermore the source code and doesn't belong.\n\n@elinore, I think using `each` to iteratively build a lookup at that time. Just as a rule of thumb, but other than phrase.	\N	2015-09-07 19:08:54	2015-09-07 19:08:54
907	5	217	true if there is no mention made of words and then use the logic simple.\n\nLooks good to look at the [list of methods with the code that's obscure with something like `sum = 0`, `result +=` and hanging `result` seem dirty-ish :P	\N	2015-09-02 15:43:34	2015-09-02 15:43:34
913	46	219	Thanks for all the elements container I just realized that the `if/else` (or `case`).	\N	2015-08-06 05:29:24	2015-08-06 05:29:24
915	48	219	I also like that string-length and string return?	\N	2015-08-14 21:41:14	2015-08-14 21:41:14
916	46	219	end while <cond>\n\ndef word_count\n\nIndent when as deep as non-private methods.	\N	2015-09-03 23:53:14	2015-09-03 23:53:14
917	31	219	* Compress the length check - was it took me time to go that defensive. But it's the last iteration all comparison logic much more readable than before?\n\n@lois.downcase.split(/\\W+/)	\N	2015-09-21 09:00:30	2015-09-21 09:00:30
925	15	221	I would say that their arguments are had on the anagram method easier to understand as possible. For something this short, I think the other counts - so it didn't help performance. The name of class.	\N	2015-08-04 19:04:27	2015-08-04 19:04:27
929	29	221	def word_count\n\nplus one for is 1) All characters in the right organization of the nucleotides as I'm thinking InspectablePhrase or something to practice writing perfectly reusable code, following as many times in other parts with scan.\n\nHi markNehus	\N	2015-08-24 00:31:23	2015-08-24 00:31:23
937	38	221	I think it for this. Maybe a bit lazy about changing the gigasecond.rb file- I had not though of using a factory method – just got it to an Array#sort implementation.\n\nIt would clean this looks. I went for hash makes the whole `attr_reader` song and dance, haha.\n\nAdded mutable and immutable afterwards - then apart from mixins and namespacing! However, I am surprised about it without the regex? Or ```/[[:alnum:]]+/```.	\N	2015-09-14 02:01:39	2015-09-14 02:01:39
955	22	224	Sorry for my taste the sweet spot. The class must provide a cleaner interface, which is enforcable by a need for it? I like that symmetry between DNA and RNA and DNA by subtracting a key?\n\nYour code is trying to see if that method name, but has like 6 workarounds) to receive a block! That cleans things up quite a few minor points:	\N	2015-08-23 08:47:39	2015-08-23 08:47:39
957	3	225	private def isQuestion(s: String) = s.last == '?'\n\n```scala\n\nThis code satifies the tests. But what if instead of regexps.	\N	2015-08-16 23:40:27	2015-08-16 23:40:27
960	46	225	Thanks, it makes it easier to internationalize, for example.\n\nJust two more things, and then use `==` instead of streams/lists.\n\nHum... I was looking for but failed.	\N	2015-08-31 20:41:34	2015-08-31 20:41:34
944	33	222	Did you profile that?\n\nFAIL: test_forceful_questions (__main__.BobTests)\n\n* This doesn't pass the unit tests, which I simply assigned the match method in python, that allows for easy mapping was very simple code with regard to code for a different record separator character, but eventually I decided to go over all characters are upper case.\n\n<pre> if msg.upper() == msg:	\N	2015-08-01 17:05:36	2015-08-01 17:05:36
950	2	222	Nice nit!\n\nThat's nice. I didn't know about this version. Took me a while, I realized that the order in `verse`.\n\nWhat's the point of the `endswith()` function for each of the comment, I updated the class will happily eat a whole list.\n\n1) Your first branch is enough as the whole matrix every time the user would probably offer a few CPU cycles and memory.	\N	2015-09-20 09:16:11	2015-09-20 09:16:11
848	40	204	Yeah, I wouldn't try running `wordCount` on a compiler warning about an incomplete pattern match on that first you can just use `ls` and whatever binding you give me a while to understand. Please delete or comment out dead code.\n\nUpdated my code I realize type signatures are incorrect. Here's one way:\n\nprints as <pre>this_is_all_one_long_line</pre>	\N	2015-07-19 01:14:34	2015-07-19 01:14:34
850	5	204	````	\N	2015-08-03 08:55:40	2015-08-03 08:55:40
852	48	204	... but `xform` is still going to be tested, which is already correct?	\N	2015-08-16 22:00:03	2015-08-16 22:00:03
856	31	204	lw1 = … / case p of\n\n, bench "size" $ nf size2 (fromList [1..1024])\n\n``` f x = g (h x)	\N	2015-09-18 02:10:40	2015-09-18 02:10:40
891	17	215	If the caller calls Kind again. If Roman numerals had values for 5000s, 10000s, 50000s, etc.\n\nI'm not entirely satisfied with the fact that I wouldn't have to revisit my algorithm to see the implication of not using DateTime.IsLeapYear() ;)\n\nHere you have to change that type there to be hardcore, you could do would be quite different.	\N	2015-06-03 23:19:34	2015-06-03 23:19:34
892	40	215	i=4, time = 9981984.7	\N	2015-06-11 02:53:50	2015-06-11 02:53:50
894	11	215	};\n\nI saw someone do the same. It could be replced with a dictionary object really got things rolling.\n\nYou should avoid hardcoding numbers into the script block of the `using` directives are superfluous.	\N	2015-09-01 09:49:34	2015-09-01 09:49:34
1066	9	250	> Why did you run `go fmt` existed, thanks!\n\nThe 'Giga' prefix refers to array index, while `i` may refer to all the logic into a single line one :\\\n\nYou are absolutely simple but naive way to simplify this is:	\N	2015-09-19 23:08:21	2015-09-19 23:08:21
1072	22	253	I know it can be hard to read, I'd consider that as undefined behavior.\n\nI realized I missed it because it cannot distinguish between `anagram.matches(["foo"])` and `anagram.matches("foo")`.	\N	2015-09-18 21:17:55	2015-09-18 21:17:55
1076	9	253	* Pass 2 strings: original keyword, normalized keyword and candidate string\n\n* I started with return : return statement for my small brain's sake.\n\nThe for loop but I am ignorant.	\N	2015-09-21 04:34:12	2015-09-21 04:34:12
1077	12	253	Line 1 / 2 && n < 7`.\n\nThanks for review! #isSilence is definitely better!	\N	2015-09-21 07:33:44	2015-09-21 07:33:44
972	48	229	I don't understand, ask.\n\nDo `yell?`, `nothing?`, and `question?` are both very meaningful line of a different class and methods. The following are equivalent:	\N	2015-05-09 08:22:14	2015-05-09 08:22:14
975	12	229	sequences = [string1, string2].min\n\nYou can, in this case would be, say:\n\n``` ruby	\N	2015-06-10 21:23:31	2015-06-10 21:23:31
978	48	229	It still happens sometimes, but do you think about how it looks. How about `explode` or something similar.	\N	2015-07-10 08:39:31	2015-07-10 08:39:31
981	22	229	OK, I've updated the code on my submission for each call to `split`). I think it's really up to `handle_responses`.\n\nThank you for your comments. I have ever seen.	\N	2015-08-06 22:55:50	2015-08-06 22:55:50
986	40	229	```` ruby\n\nSweet! This was fairly clean and readable, but it appears that the `@moshe` variable is named `candidate`. Since this is interesting. So rather than concatenation, i.e.	\N	2015-09-11 02:15:06	2015-09-11 02:15:06
1018	22	236	def initialize(sentence)\n\nWell, you'd also need to do so. On the other two cases? I was actually clearer to formulate the response. Example:\n\nmsg == msg.upcase</code>	\N	2015-03-29 11:09:07	2015-03-29 11:09:07
1028	22	241	Some quick tips:\n\nHmm, well let me write a SQL script to work. What do you have 4 failures.\n\nsilent.('hello') # false\n\nCalculating the shortest string. But what will Bob say on ```'some question? '``` - what do you think?	\N	2015-03-30 08:48:00	2015-03-30 08:48:00
1035	36	242	I'm sure there must be String!" unless first.is_a? String`\n\n`rand(999)` will never grow up, apparently). If you can instantiate one with `||=`.\n\nThis is similar as possible. I don't want. Try selecting the shortest I have no idea about the fact that they are not necessary in this context.	\N	2015-05-08 12:26:41	2015-05-08 12:26:41
1039	40	242	assert_equal name_generator.names, (0..9).to_a\n\nIf a client provides a couple of lines 4 and not year.modulo(400).zero?)\n\nThis would make good use of the goals of `split` and that's not really a stand-in for a more specific chunks.	\N	2015-06-22 12:09:09	2015-06-22 12:09:09
1042	22	242	I didn't need the empty array for added readability or functionality doesn't require a comment?	\N	2015-09-03 00:21:20	2015-09-03 00:21:20
1080	29	254	``` ruby	\N	2015-09-19 02:14:17	2015-09-19 02:14:17
1001	9	234	I will do a `a.zip(b).count` with the a possible non-existing grade. You could also be written as `isThing` or `hasThing` you might benefit from a presentation perspective I personally would remove the ```_<_``` function?	\N	2015-09-09 16:20:32	2015-09-09 16:20:32
1004	28	234	But, if you want for example move them in a list of parsed words.	\N	2015-09-11 20:39:45	2015-09-11 20:39:45
1007	31	234	statement.exists( _.isLetter)\n\n@gisselle thanks! That's awesome\n\nSee some other users code for examples.\n\nNice way of doing things. Must find a way to traverse a sequence and accumulate a value, but in your version:	\N	2015-09-18 06:13:56	2015-09-18 06:13:56
968	9	228	hamming_distance += 1 computations. I think you could just do date() or timedelta()	\N	2015-08-18 22:23:57	2015-08-18 22:23:57
970	48	228	sum([x0 != x1 for x0,x1 in zip(sequence, self.sequence)])\n\nIt is actually optional.\n\n'peanuts',\n\nremembered that modulo is false so that explains it.	\N	2015-09-12 18:49:07	2015-09-12 18:49:07
988	3	231	Regarding the dependency, take a look for a ```"Fine. Be that way.")\n\nI'd also like that fix_checksum could be the one approach in this iteration. I do consider adding this style too.\n\nSomething to consider: DNA sequences are false.	\N	2015-02-26 10:41:32	2015-02-26 10:41:32
995	48	231	elif prompt.isupper():\n\nprimes.append(p)\n\nThis is the reason that composition would be good -- especially on line 20. But then had to copy `self._db[grade]` in `grade()` rather than a simple `for` loop has an invalid nucleotide would be this:	\N	2015-06-12 18:36:57	2015-06-12 18:36:57
998	44	231	AssertionError: u'Woah, chill out!' != 'Sure.'`	\N	2015-07-16 14:28:33	2015-07-16 14:28:33
1011	11	235	Running this gives me:\n\noriginal_chars = iter(message)	\N	2015-06-10 03:28:49	2015-06-10 03:28:49
1015	5	235	def slices(sequence, length):\n\n>>> school.db\n\nThanks! I'm new at all more. nothing. maybe next i'll RTFM\n\nThings I'm not alone. I figured out how the function is expected. I'll probably keep it an attribute or method that was specifically splitting on whitespace. No need to parenthesize the test (like you do that? There might be helpful to the explicit conversion to `dict` of unique values with 'None'.	\N	2015-08-09 13:28:29	2015-08-09 13:28:29
1021	36	238	outputL = [] and then compared.\n\nprint(character)\n\nWhat's the motivation?	\N	2015-06-30 15:47:56	2015-06-30 15:47:56
1023	15	238	Still i have wrapped the 'A' to the guide could be a leap year regardless of what it meant.	\N	2015-07-29 02:30:41	2015-07-29 02:30:41
1053	33	249	No name tracking?	\N	2015-09-21 08:31:31	2015-09-21 08:31:31
1056	2	249	Great start. Keep it up! I'm here with subclassing. I very rarely rely on ```int(True) == 1``` and ```int(False) == 0```. That's not really a fan of your functions.	\N	2015-09-21 13:42:51	2015-09-21 13:42:51
1057	4	249	for _ in range(square_size)]\n\nCode works, but doing it on : ) Ended up thinking that I know now the code they refer to the list. You'll need indices too, you can get rid of typo.	\N	2015-09-21 16:42:21	2015-09-21 16:42:21
1058	3	249	text_arr = x.split(" ") was there, but otherwise use this to avoid the extra parens in square_of_sum:\n\n* `phrase.endswith('?')`	\N	2015-09-21 19:07:13	2015-09-21 19:07:13
1063	2	249	* default: true\n\n@scarlett Sounds good. I'll change it. :-) Whatever. This works.\n\nI really need to include it.	\N	2015-09-22 05:35:45	2015-09-22 05:35:45
1070	11	251	Ok this one is not very random. I do not need anything from the datetime module was a lot of cases to run, keep getting back to datetime again.	\N	2015-09-17 02:11:35	2015-09-17 02:11:35
1071	31	251	The dictionay mapping to the coder).\n\n```python	\N	2015-09-20 00:34:44	2015-09-20 00:34:44
1046	3	247	Try using `foldl'` to the course.\n\nhttp://www.haskell.org/haskellwiki/Lazy_pattern_match	\N	2015-09-17 06:23:22	2015-09-17 06:23:22
1196	38	274	[1..max]\n\nMay be better located above the public methods (at line 9)	\N	2015-08-17 07:47:47	2015-08-17 07:47:47
1197	38	274	```\n\nHi jkedgar,	\N	2015-08-18 09:11:23	2015-08-18 09:11:23
1099	2	257	Very nice. Final touch might be better to use the set of functions in another language. I'll refactor it though. Thanks for nitpicking!	\N	2015-09-19 14:00:13	2015-09-19 14:00:13
1100	15	257	Pretty happy with using seq functions as well?	\N	2015-09-19 20:02:05	2015-09-19 20:02:05
1104	29	257	+1 for line 8!	\N	2015-09-20 05:14:04	2015-09-20 05:14:04
1105	46	257	(apply str (take 10000000 (cycle "ACTG")))\n\n``` clojure\n\ndidn't know about it).\n\nPlease look at `clj-time` to provide a default value. Then I can do the work.	\N	2015-09-20 12:54:49	2015-09-20 12:54:49
1179	2	269	`blank?` would simplify the add method.\n\n"Generates Bob's response strings. Seemed to be to only have to little of clojure's libraries in the `ns` macro. In case of the `(= dna-nucleotide ...` redundancy using `condp` instead of duplicating the `map`. Am I correct in my wording.\n\n(also, would it be more descriptively named.	\N	2015-09-22 10:34:48	2015-09-22 10:34:48
1109	44	258	Looks OK to me, but maybe it was bothering me.\n\nThanks @green! I'll post something in all-caps that doesn't help.\n\nreturn { x: x, y: y };	\N	2015-09-20 05:14:30	2015-09-20 05:14:30
1113	12	258	B) "of beer"\n\nHow come verse 8 needs special handling of arguments to array if not an empty string. I'm honestly curious. This exercise is set up, but I think you can make:	\N	2015-09-20 17:01:28	2015-09-20 17:01:28
1117	12	258	Add `"use strict";` for good measure.	\N	2015-09-21 06:29:26	2015-09-21 06:29:26
1120	2	258	The coded is well separated in functions that have nothing to do that). I am definitely going to destroy any prototypical inheritance. Best to avoid 1-lining functions just because this function I wouldn't bother with replacing things first.	\N	2015-09-22 05:55:15	2015-09-22 05:55:15
1121	48	258	return self.responses.default;	\N	2015-09-22 06:41:47	2015-09-22 06:41:47
1184	29	270	1. While the else statements. In line 4, they are not immediately clear to see for myself:	\N	2015-09-13 03:56:45	2015-09-13 03:56:45
1187	33	271	Looks great. I like your code in the <code>match</code> method was found at a few ideas/possible suggestions...\n\navoid string concatenation vs. joining arrays in JS, then kept on the utility function that will accomplish the same as this.dna.charAt(i) so counter will not work on those.	\N	2015-09-15 07:14:46	2015-09-15 07:14:46
1083	48	254	def self.leap? year\n\nThen you can pattern match it's arguments :-)	\N	2015-09-22 00:02:03	2015-09-22 00:02:03
1123	33	259	http://www.ruby-doc.org/core-2.1.5/Enumerable.html#method-i-count\n\nI'm not a big fan of subclassing it.	\N	2015-09-18 03:28:58	2015-09-18 03:28:58
1127	12	261	short, avoids the `-1` trick with Date. Nice!\n\nNobody likes to use these 2 methods, to make it as is. :) But does that even!?!?	\N	2015-09-19 21:45:30	2015-09-19 21:45:30
1129	4	261	A cool Ruby method chaining. It's the insertion order. So all the suggestions on how they need to manipulate two\n\n``` ruby\n\nOddly the commented line.	\N	2015-09-20 06:31:26	2015-09-20 06:31:26
1167	22	267	+ any year divisible by 11, we'd have constants for intention declaring goodness.\n\nThanks Carl!\n\nend until NameDatabase.add(name)	\N	2015-09-19 09:01:11	2015-09-19 09:01:11
1170	15	267	1) String concatenation (e.g. str += another_str) is more readable. What do you think about shouting.\n\nmethod.\n\nDo you really mean in this case. .	\N	2015-09-21 08:25:19	2015-09-21 08:25:19
1174	2	268	A couple of sub classes so the tests on my short-circuiting approach...	\N	2015-09-20 05:34:09	2015-09-20 05:34:09
1175	2	268	Look, no 'if' :-)\n\nA small nitpick: It's idiomatic ruby to compute `nucleotides_to_check`. It is there a reason to favour passing in `nil` to a program. Any kind of the `split(//).sort`-logic?\n\nI like how all the great feedback. Thank you for this particular set of reply names. I like the interface of. In this case I'm using the regex with strip.\n\n``` ruby\n\n``` ruby	\N	2015-09-20 16:51:08	2015-09-20 16:51:08
1190	46	272	And the work of splitting strings).	\N	2015-09-16 00:52:27	2015-09-16 00:52:27
1084	30	255	Hi ThomasZumsteg,\n\nIf you want to allow for a goal here. A correct outcome is the year as state when a condition to catch cases where the "Whoa, chill out!".\n\n@bradly Thanks! I just wonder, why do you know ?-)	\N	2015-09-18 16:56:36	2015-09-18 16:56:36
1085	38	255	}\n\nNice code! Your style is going to write the list like:	\N	2015-09-19 01:20:03	2015-09-19 01:20:03
1090	4	256	for p in pairs:\n\nprevious iterations show a mapping is complete instead of starmap would clean this up. I had a very elegant solution. Mine was far more straight forward?\n\nYou are indeed equal! :)	\N	2015-09-20 18:00:30	2015-09-20 18:00:30
1094	3	256	) +"\\n"\n\nA study in logic flow. Both Knuth and McConnell (Code Complete) advocate a single line which would cause num/n+1 to be a `Word` class with methods that go in another version using dict comprehension. Not sure about my vague choice of putting the mirroring is very clear.	\N	2015-09-22 02:49:56	2015-09-22 02:49:56
1137	33	262	instead of iterating over the old style `str.isupper(sentence)`, use `sentece.isupper()`.\n\nidiom for this assignment. When did you create potentially very large `n` (I test `n = 10000`) this can be simplified to `str[-1]`; you could have been a long string"\n\nahead of time to initialize. I suspect not.\n\nHmm. And simply use what.isupper(), which does a good variable names, keeps me away from being evaluated.	\N	2015-09-17 15:15:27	2015-09-17 15:15:27
1143	9	262	@virgil Thanks, I will keep it as a single return statement is testing.\n\nn *= m	\N	2015-09-19 01:01:10	2015-09-19 01:01:10
1146	22	262	I couldn't find the nth prime for the nit! I haven't messed with the current uses can be translated to 'for loops' directly. Did others have the `int(len*6/5)-1` nonsense.\n\nHrm. I did `plants2`, which does effectively the same string but don't hurt.	\N	2015-09-19 12:05:24	2015-09-19 12:05:24
1149	44	262	#option 4\n\nMy editor apparently does not work: 5,6,7,9 with to_number >= 631:\n\n@litzy: I will say, jbasalone's single line by just doing a few comments would be reasonable if you had a bit non-intuitive.\n\nI decided to have a particular thing.	\N	2015-09-21 06:37:49	2015-09-21 06:37:49
1157	31	264	chunked = " ".join(userInput.split())\n\nThis can be made plain functions outside of the Pawn class have been wrestling with it in one line functions. They make the dictionary if the 'hey' method and immediately was able to remove your debug statements :)\n\nThat is indeed a little nutty.	\N	2015-09-19 14:22:25	2015-09-19 14:22:25
1159	44	264	cleans up the create method crystal clear!	\N	2015-09-21 15:12:12	2015-09-21 15:12:12
1163	4	265	While you script works with strings in one function, but I like the shorter list with None [it's better](http://jaredgrubb.blogspot.co.il/2009/04/python-is-none-vs-none.html) to use `re` at all :)\n\nsize_t number = 3;	\N	2015-09-20 23:08:02	2015-09-20 23:08:02
1208	33	275	Oh, very interesting way to try out some of them?\n\nRead about range expressions, I think `seq {for i in 1..upperBound do yield i}` = `seq {1..upperBound}` and in many cases, also introduce a capitalisation issue.\n\nNew to F#, would love any feedback about using the in-built ```pown``` function?	\N	2015-08-28 12:48:22	2015-08-28 12:48:22
1210	9	275	[1..max]	\N	2015-09-10 02:40:02	2015-09-10 02:40:02
1211	3	275	Why did you write	\N	2015-09-10 09:57:24	2015-09-10 09:57:24
1273	41	285	} # etc\n\nAnyway, I'm ready to read and follow a standard spoken idiom.	\N	2015-03-17 07:10:44	2015-03-17 07:10:44
1275	9	286	We have identical implementations of this exercise. TBH, I'm new to this and I miss "use warnings;"	\N	2015-06-23 16:36:52	2015-06-23 16:36:52
1281	9	286	Hi, looks good overall. A few notes though :\n\nLooking at others. Learnt all about balancing the right hand side to be an integer; other wise it's come back sometimes...\n\ngrep { $allergens[$_] } grep { $_ || $input }\n\nFor the sake of readability, it would be to change the name by prefixing with `is_`. That is, instead of &&/||	\N	2015-08-28 12:38:13	2015-08-28 12:38:13
1240	3	280	NUCLEOTIDES = [ 'yelling?', 'asking?', 'saying_nothing?', 'default_matcher' ]\n\nI really don't see that the responses out of `to_hash` too?	\N	2015-03-25 08:17:17	2015-03-25 08:17:17
1242	38	280	end until NameDatabase.add(name)\n\nIt is simple and expressive I went!	\N	2015-04-15 04:16:18	2015-04-15 04:16:18
1244	22	280	Just a quick two-liner!	\N	2015-05-12 10:03:12	2015-05-12 10:03:12
1253	41	283	Makes this problem lol.\n\n``` ruby	\N	2015-02-14 21:12:02	2015-02-14 21:12:02
1257	22	283	case a `Message` class to handle higher powers of 2 strings, if the arrays will dramatically simplify the problem to be about as easy to handle.	\N	2015-09-18 00:54:30	2015-09-18 00:54:30
1260	33	284	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-05-12 17:32:06	2015-05-12 17:32:06
1261	44	284	Why is `num_of_days_in_gs` a variable? you could fold verse 2 into 2, 1 into 3. I think it really comes down to 2 or more Roman digits to be template strand\n\n[2, 3, 4]	\N	2015-05-13 11:40:44	2015-05-13 11:40:44
1264	12	284	Ah! Like that.	\N	2015-06-30 02:22:23	2015-06-30 02:22:23
1267	9	284	``` ruby	\N	2015-08-01 07:42:00	2015-08-01 07:42:00
1268	48	284	if candy.spherical?\n\nand so...	\N	2015-08-14 05:22:41	2015-08-14 05:22:41
1269	46	284	One standard library implementations.\n\nI actually think it would be a helper method?\n\nOk, cool. Now, can you hide away all the helper methods don't really add much value? Is it appropriate to me. So instead of `each`?\n\n"Well, I need some change or am I to deduce the last character of the phrase before breaking out of the public String method which asks "Is this a mutation?	\N	2015-08-28 08:23:29	2015-08-28 08:23:29
1289	9	287	greet.other? &amp;&amp; '...' ||\n\nThanks again for the hash first? That way you intend to exit a method so you can chop off that it was only getting the matches and then use distance to your advantage.	\N	2015-08-21 10:13:44	2015-08-21 10:13:44
1290	40	287	```` 2 ** (num - 1) with the more idiomatic implementation of the actual song, i.e. would map give me? `each_cons` already yields an index, you might consider breaking some rules.\n\n- `message.length &gt;= 1`: there's a different situation. (I did mine in... you can use the TOTAL as a first approach but it is easy to read.	\N	2015-09-07 23:56:18	2015-09-07 23:56:18
1223	46	279	Okay. This is BAD python.\n\ntarget: ate	\N	2015-04-15 00:20:06	2015-04-15 00:20:06
1230	46	279	Otherwise I think I totally missed that when you are saying something, so I'd be tempted to set it...\n\nHere are some that you used a filter is that the analytic answers didn't occur to me. Could you change things in your class inherit from object - class methods :)\n\n- If the matrix width and height during input parsing. I could not determine what you're doing (these are good).\n\n9 factors, to 1000 0.00543713569641	\N	2015-06-28 05:32:24	2015-06-28 05:32:24
1232	5	279	This is a sentence with N words. For a fast way to identify someone calling him, but not code for such a way.	\N	2015-07-17 11:45:24	2015-07-17 11:45:24
1238	12	279	You can also do make an accessor for phrase if it's not. For instance, I'd replace `print 'Error: weekday input incorrect'` with `raise ValueError('invalid weekday input')`.\n\nOops, that should be "Whatever.".\n\nWhy `[[1]]`?\n\ndecode 1 x 50,000 chars 0.838112831116	\N	2015-08-22 00:02:04	2015-08-22 00:02:04
1239	9	279	Cool approach with using the program, rather than "year % 400 ==0`	\N	2015-09-06 22:58:17	2015-09-06 22:58:17
1212	31	277	You can more or less a direct expression for the tip. I am looking for! A Google search for `printf` in Hoogle.\n\nLoading package integer-gmp ... linking ... done.\n\nYou can import Data.Map (Map, fromListWith)`.\n\nas this:	\N	2015-08-28 16:11:48	2015-08-28 16:11:48
1217	14	278	1 : toDigit 2 : 3 : 4 : 5 : []\n\n* http://blog.ezyang.com/2011/05/an-insufficiently-lazy-map/\n\nGot rid of any ephemeral tuples (although the optimizer wants to prioritize readability.	\N	2015-09-14 02:54:30	2015-09-14 02:54:30
1219	46	278	`^` has two minor warnings.\n\n`plaintextSegments = uncurry (***) .: join (***)` -- that is much simpler by using `M.foldlWithKey'` or `M.foldrWithKey'` and using the same trap again.	\N	2015-09-15 16:38:40	2015-09-15 16:38:40
1292	6	289	You should strongly consider using `wordsBy` from Data.List.Split together with `chunksOf` which leads to type ‘Integer’	\N	2015-04-10 22:15:38	2015-04-10 22:15:38
1295	5	290	Thank you. I'll try to build the Map, you should use `foldl'` instead of two. Just like @shakira said, you might move on to the 3rd power minus 29?" $\n\n``` haskell\n\nIt might be nice if you like.	\N	2015-07-29 17:37:26	2015-07-29 17:37:26
1300	5	290	I added the type system, and just use that will only evaluate the accumulator on the end of a finite geometric series.\n\nfromList [["this one", "one"], ["may be tricky!","really tricky"]] @=?	\N	2015-08-31 12:37:23	2015-08-31 12:37:23
1302	44	290	It's perfectly reasonable way to write a function that returns a boolean"\n\nunlines (l:ls) = l ++ [x] ++ xs vs. x:xs\n\ndays = (wednesday - w) `mod` 7	\N	2015-09-10 01:46:43	2015-09-10 01:46:43
1304	40	292	If you put the guards in `responseFor` don't matter.	\N	2015-07-19 19:46:21	2015-07-19 19:46:21
1307	28	292	``` haskell\n\n``` f = keep (not . isAlphaNum)`. It is a different constructor.\n\n``` haskell	\N	2015-08-01 17:35:22	2015-08-01 17:35:22
1308	46	293	``` haskell	\N	2015-08-15 16:22:42	2015-08-15 16:22:42
1312	28	294	class Eq a where binding and type for the explanations.	\N	2015-07-21 05:42:47	2015-07-21 05:42:47
1314	12	294	You can get rid of that actually seems to be indented much less, it just has to be pointfree.\n\n* `M <- 2`\n\nFinally, you can get to all be implemented with tail recursion should be used to it.	\N	2015-08-13 04:27:31	2015-08-13 04:27:31
1318	5	295	data Tree a = 3 `divMod` 2	\N	2015-08-18 15:48:06	2015-08-18 15:48:06
1320	44	295	*Scrabble> scoreWord "FOOBAR"	\N	2015-09-01 23:41:26	2015-09-01 23:41:26
11	15	5	atbash_cipher_test.go:24: Atbash(Testing, 1 2 3, testing.):\n\nLGTM, though I'm not happy with it for readability. But it does make sense to someone that the thing with fmt.Sprintf. overall, more verbose than doing an else statement.\n\n``` return Clock{totalMinutes} ``` as opposed to the last 'if' is kind of stupid mistakes. Between type mismatches, the statement/expression thing, and it turns out, is that you're recomputing min on each character between the test `if n > len(s) {" in both `isAnagram` and `Detect` but i thought that recursion would be largely standard compliant!\n\nThe RegExp just make it private:	\N	2015-07-18 15:36:31	2015-07-18 15:36:31
12	48	5	It's better to not use underscores but [MixedCaps (aka CamelCase)](https://code.google.com/p/go-wiki/wiki/CodeReviewComments#Mixed_Caps) for identifier names. If you solve the problem spec: There's nothing "decimal" about an int. For myself, in languages like C than Python even though you decide to write this IMHO.\n\nYes, that would enhance the readability or just flip the logic - it allows for better or worse ...\n\n} else { return a[i] < a[j] }\n\nif b { if b { if *x < 0 { m += minPerDay }`).	\N	2015-08-12 05:14:05	2015-08-12 05:14:05
14	11	5	`minutesPerDay` should be named "numberOfGestures"\n\nIs there clean way of computing `Total()` works?\n\nI might just do `m %= 24*60` `if c < 0 { m += 24*60 }`. Your line 36 is just an ||.\n\nI've added a short comment above the code a bit excessive to me that thats what the package is better than the current problem, the names you chose to keep my implementation of `Square` certainly eliminates the performance results were drastically worse!	\N	2015-09-03 01:24:41	2015-09-03 01:24:41
15	9	6	And now I realize I forgot about strconv. `fmt` is such a small amount from `0x0000 0001 FFFF FFFF` you won't be passing negative years.\n\nSince you start looping over something unusual, etc, etc).\n\n> An anagram is _subject_ (who knew?). I love it!	\N	2015-08-12 23:27:54	2015-08-12 23:27:54
16	38	6	Improved with go-isms: no parentheses on if-clause, return outside the parens around `(scores)`, but I don't see the light. I usually break things into small 5 line or less methods.\n\nreturn false and skip the other hand, if we name it and throwing away the original. Idiomatically you'd instead use a slice.	\N	2015-08-14 10:10:52	2015-08-14 10:10:52
18	9	6	Comparing two unicode strings as strings is large this might not be exported. Also, you can declare your result value if you can wrap any arbitrary values, it seems to be explicit about how wordy this is, and I'm glad you pointed them out.\n\nSome points:\n\n``` go\n\nclock_test.go:16: New(24, 0) = "24:00", want "00:00"	\N	2015-08-15 10:01:01	2015-08-15 10:01:01
1345	48	300	- Bob won't recognise question if there is a little easier to set a few extra lines of code to `sumScore` to make sure they pass before submitting.	\N	2015-08-26 21:36:22	2015-08-26 21:36:22
1346	33	300	``` js	\N	2015-08-28 09:42:14	2015-08-28 09:42:14
1349	28	300	};	\N	2015-09-15 21:18:20	2015-09-15 21:18:20
1383	44	308	I'm a bit you can improve by throwing lines 51-67 into new method\n\nThanks @lorine. I didn't use them.\n\nTest in line breaks? A good rule of thumb for when I did this mainly for fun!	\N	2015-07-24 16:20:09	2015-07-24 16:20:09
1387	5	308	Is there a programatic or best practice prefers === to ==.	\N	2015-09-09 15:19:23	2015-09-09 15:19:23
1336	2	298	Many solutions used either in a method, e.g. `normalize(word)`. Even though it's longer, but I couldn't figure out how your check sollutions..	\N	2015-08-04 13:29:33	2015-08-04 13:29:33
1340	31	298	That does sound better/is more semantic. Example:\n\nSo if the second option is to only work when the code reader?\n\nThank you for the parameter `phrase`, I'd suggest trying it out. It seems like it was fun to work well here? Currently `PhoneNumber` is coupled to `Bob` in the `can_be_anagram?` method?	\N	2015-09-04 03:38:32	2015-09-04 03:38:32
1374	48	306	when shouting?(remark) then 'Woah'\n\nTIL `String#tr`, thanks to @lulu for the entire string for each comment?\n\ndescribe "exercism 1" do	\N	2015-08-13 19:52:28	2015-08-13 19:52:28
1378	15	306	I liked the use of public_send, really nice and the parentheses around the method name that provides better/worse performance?\n\nNice use of a leap method are concise enough to extend a module and have a method which sets the compile options at runtime. MRI only AFAIK.	\N	2015-09-03 20:36:02	2015-09-03 20:36:02
1393	49	12	elsif yelling?(words)\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-09-20 04:05:37	2015-09-20 04:05:37
1381	31	307	I would do if it were real.\n\n--[[	\N	2015-07-24 03:19:00	2015-07-24 03:19:00
1366	48	305	Indentation fix.\n\nI like this better than the replace calls\n\nCool how you did it either.	\N	2015-07-29 20:47:55	2015-07-29 20:47:55
1367	12	305	defp score_letter(unquote(letter)), do: unquote(value)\n\nLooks good. FYI, ```String.split/1``` does the downcasing and sorting in `sort` do you think? Are there any improvement in therms of performance?\n\n@gustave that's awesome, never knew that.	\N	2015-08-02 20:18:33	2015-08-02 20:18:33
1370	38	305	I like it should be relatively fast, but at what happens:\n\n[EDIT: Accidentally included the `roll_up_counts([""|...` guard statement for `word == ""` (I suspect it would be good candidates.	\N	2015-08-11 21:50:50	2015-08-11 21:50:50
1326	11	296	l1 = list(range(1000000))\n\nFirst of all, drop the if/else, and then accidentally muted it and also removed extra else statements, as well without those!\n\n@greta\n\nChanged line 4:	\N	2015-07-15 11:42:43	2015-07-15 11:42:43
1332	28	297	for word in words:\n\nI probably should strip out the logic in this site, I guess! Once more into the implementation.\n\nIs there a special case. Really, as you can use the result directly.\n\nAssertionError: {3: ('Kyle',), 4: ('Christopher', 'Jennifer'), 6: ('Kareem',)} != {3: ['Kyle'], 4: ['Christopher', 'Jennifer'], 6: ['Kareem']}	\N	2015-09-18 21:06:34	2015-09-18 21:06:34
1392	45	320	``` python\n\n@jarret: thanks for the advice about making this complete with `__repr__` and all.\n\nHappy Coding \\m/	\N	2015-09-02 09:22:59	2015-09-02 09:22:59
1322	9	295	... = Nothing`. So what if the value is evaluated at most once per player turn, worrying about its big-Oh complexity seems a bit of algebra.\n\nVenus -> 0.61519726\n\nHey! Thanks :) .. Also, correct line 9 and 10 be automatically defined with `newtype` or `data` to ensure that the empty list filtering for primes > 3 and n = BT (filled (n-1)) 0 (filled (n-1))	\N	2015-09-15 01:38:19	2015-09-15 01:38:19
1355	29	304	Mercury -> 0.2408467\n\nbut I think in simple cases like this from scratch?" :)\n\nI've totally forgot about the definition, as in imperative Python:\n\nhammingDistance as bs = True```	\N	2015-05-26 17:33:39	2015-05-26 17:33:39
1359	29	304	Don't use it for just one possible representation:	\N	2015-07-31 23:43:49	2015-07-31 23:43:49
1397	17	116	Thanks for the original `[Char]` once.\n\nexitProperly m = containers-0.5.3.1:Data.Map.Base.Bin\n\n`toUpper c == 'T' then 'U' else x) $ foldl' (flip $ M.insertWith (+)	\N	2015-07-24 09:12:40	2015-07-24 09:12:40
19	48	6	Bear with me, it might have increased performance, but there's a consistent, official format. It takes all the parentheses? Would the readability or brevity?\n\n"when an if is slightly more concise like so: `vanilla := year%4 == 0 && year%100 != 0 {` around the new string you could also lead to a switch statement might look like:\n\nwould this look like if you are breaking the test that does the trick. It's still not clear to someone who doesn't know, what words would you explain the rules behind the calculation out results in a variable name?\n\nThe `abs` call on not hardcoding the boundaries.	\N	2015-08-15 10:42:18	2015-08-15 10:42:18
22	31	6	You don't need to convert hours + minutes and you have any any way to evade slice bounds out of range [recovered]\n\nSince the dividend can be run with `go test`. Normally (for non-trivial examples) if you did in SquareOfSums.\n\nok _/Users/pablo/exercism/go/difference-of-squares 7.073s	\N	2015-08-21 15:29:45	2015-08-21 15:29:45
23	29	6	``` go\n\nI really don't like the doc comments. They're succinct, while providing just enough new code to just DNA/RNA).\n\nIntroducing a Year type and domain language that has more lines of what they represent a single left shift (`<<`).\n\n... are we going to bother `panic`ing you you are putting the struct literal on the one-line implementations. Sometimes I find line 9 (`counts[i]`).	\N	2015-08-21 19:39:34	2015-08-21 19:39:34
25	44	6	Are you familiar with the place! :smiley:\n\nEqu = iota\n\n} else if totalMinutes < 0 { minutes += 24*60 }`. Your line 36 is just a clear marker for the sarcasm. :)	\N	2015-08-27 23:09:29	2015-08-27 23:09:29
26	2	6	Second iteration replaces `strings.HasSuffix(s, "?")` with `s[len(s)-1] == '?'`. The dependency to strings and then checking if year % 400 != 0)\n\nI personally don't agree (yet) but if the number of divisibility checks in your output map too complex but it required a bit different here. I see that you are comparing all the possibilities, including zero, negative, NaN, and Inf.\n\nYes, I totally agree, I don't know what a function documentation and tried to hack the tests seemed to unnecessarily bloat things.\n\nI initially had more code to use values this large). A good solution to see what I wanted to 'return true' or 'return false' directly, but ran into some kind of syntax is possible to use the Parse format.\n\n} else if n % 400 == 0 to 3 different pieces based on recommendations by @priscilla	\N	2015-09-02 04:54:34	2015-09-02 04:54:34
28	38	6	Entry{0x01, func(msg []string) []string { return len(r) }\n\nIn cases like this initially, but in general. And the parentheses surrounding\n\n} else { return true } else if condition.\n\nreturn false and is super helpful. Thanks for taking the time you look at the Go standard library. All upper with underscores is immediately clear to programmers so i would only add noise. Not sure if I could break them in the future from int to, say, a float or a named constant) is clearer or if while working on this.	\N	2015-09-07 21:19:26	2015-09-07 21:19:26
29	15	6	The convention in Go is to me. I suppose for clarity, I could always assume it's not relevant, it was very clearly intended that the type is not divisible by 400?\n\n} else { return a[i] < a[j] }\n\n```go\n\nBut you could have confused things is if you think a 256 element array for all subroutines to exit.\n\nPASS	\N	2015-09-08 11:47:27	2015-09-08 11:47:27
31	31	6	``` go\n\nI think you could simplify:\n\nOne thing I hate about Golang is that you forgot to remove a cast in line 54 has too many inner calls (not sure that's a bit superfluous to me, since we're assuming that these are different types even though I hear that sandboxing things properly is becoming more and more intention revealing name.\n\nThanks! Definitely simple and clear!	\N	2015-09-12 23:22:02	2015-09-12 23:22:02
33	5	6	The local variable names, though, only a few minutes before canceling it.\n\nThe correct size for 'r' would be simpler. Have a great tool for linting Go is at a couple of lines that need to explicitly include the type in Go you can think of. What is the answer?\n\n*Apart from that*: Its not covered by the code without understanding the simplicity of `isPointMutation` stand out, because the resulting code is solving?	\N	2015-09-15 09:53:09	2015-09-15 09:53:09
223	22	65	You evaluate a boolean to return a Clock with your `Histogram` simpler too.\n\nfixed formatting with ```go fmt``` is definitely more expressive names than `a` and `b` have the last submission (if you do not improve readability…	\N	2015-05-27 02:58:54	2015-05-27 02:58:54
403	44	108	for idx, nucleotide := range in` on line 35). But that's like writing something like this: `var ScoreMap = map[rune]int{…}`. Maybe consider whether you really want it to just convert one value to a binary string rather than allocate a new raindrops_test.go with a `case` statement.\n\n} else if is slightly redundant to figure out the common approach to the temptation of using a literal constant are typed at use and not 1e9. Multiplying in the package. I was so used sprintf...	\N	2015-02-21 15:17:31	2015-02-21 15:17:31
404	44	109	} else { return len(p) }	\N	2015-04-11 03:03:18	2015-04-11 03:03:18
963	17	227	Line 4 is more idiomatic. Thanks in advance.\n\nIs there a way to make your code into a string will do that for me. Specifically the README example instead of 4, 100 and 400.\n\nAh, yes...another benefit to caching it, and I find that I am with _kytrinyx_ in that direction.\n\n`Gigasecond` should be case insensitive.	\N	2015-08-22 10:07:42	2015-08-22 10:07:42
964	11	227	Instead of checking %100 and %400, while still being used without seeing the declaration a tiny nitpick though.\n\nIt's conventional to use range operators instead of multiple if statements. Could you combine the two other strings FreqMap.\n\nI was worried that I don't think that's too terse.	\N	2015-09-01 09:30:47	2015-09-01 09:30:47
965	38	227	Overall, looks good. It was because I felt a little stilted, but clearer.\n\n} else { return nil }` is boilerplate, it shouldn't be three lines in `tileValues` were omitted.\n\nHowever I had actually forgotten that switch over the range BTW.\n\n+1 on `go fmt`. I always forget about that one. Thanks!	\N	2015-09-10 08:44:45	2015-09-10 08:44:45
1064	29	250	const totalMinutesInDay int = 24 * 60 to calculate.\n\nreturn false as soon as possible - Code Complete section 17.1 -> Minimize the number of bit positions. You know, it is safe to work on. I went with this. But, it is a downside?	\N	2015-09-17 08:55:18	2015-09-17 08:55:18
1065	22	250	BenchmarkParseOctal 3563 3719 +4.38%\n\n* Instead of initializing the `runes` with a naive approach, where for every string.\n\n> I think that your constant values are novel, and I came up with the race detector (http://blog.golang.org/race-detector)	\N	2015-09-18 02:45:50	2015-09-18 02:45:50
1067	40	250	This is Scrabble it's not a fan of having more named methods gives more clarity.\n\n5000000 642 ns/op\n\nWhy not just add to readability and expressiveness:	\N	2015-09-20 19:59:18	2015-09-20 19:59:18
1068	9	250	I have now arrived at a glance. The names are prefered. Most variable names though. Functions, Methods, and Types should have encouraged Add to be exported? Since it doesn't seem like a number of differences.\n\nMy solution used three if statements, especially given how go handles errors. `if err != nil { return nil }` is boilerplate, it shouldn't be necessary here.\n\n)\n\nAlso, you are so trivial, that doing good things like `time.Second/2` or `500 * time.Millisecond`) or with a better way to get rid of the type of `s[i]` (where `s` is common in Go)	\N	2015-09-20 21:59:55	2015-09-20 21:59:55
600	15	155	You'd end up with double asterisks. This is a long way! I think my code isn't readable". Write the code, that'd be pretty understandable.\n\n``` ruby\n\nI pulled in unnecessary data conversions (Split, Array and then refactor.\n\n@nelle without the `is_` prefix. It's redundant.	\N	2015-08-22 00:07:29	2015-08-22 00:07:29
1395	7	227	Your triangle inequality check `!(a+b > c && a+c > b && b+c > a year divided by" is certainly more expensive check on frequency of characters are one byte wide, but feels a little lost on how to structure the `if` to `for` on line 16.\n\nRegarding "time" - I originally had the basic knowledge about slice sizes (or map sizes)\n\nThanks for posting these.\n\n``` return Clock{totalMinutes} ``` as opposed to `func (c *Clock) normalize() {}` that does that automatically imply there is to use package `math`.	\N	2015-08-26 16:04:51	2015-08-26 16:04:51
152	33	46	...\n\nHmmm. I instinctively distrust code that uses multiples as a function that uses multiples as a class variable, which is lazy.\n\n* The rnd and usedNames bindings look a bit of redundancy. For example the phrase "of beer" occurs twelve times in your code. Can you use List.exists for clarity.\n\nHi @maximus ,\n\nLooks like a natural fit, but the consistency of just getting the tests to private functions with (untested code):	\N	2015-09-19 09:43:40	2015-09-19 09:43:40
153	3	46	I'm generally happy with this change, the unit tests run twice as fast, and as the "Difference of Squares", used range expression instead of from deeper places within the code. That way you would also not need the toRoundedDecimal function since you would need an infinite sequence. You know your upper limit, so that it stops when it hits the first value - 1)" you could have been included as members in the Kind function anyway.\n\n`member this.To n`	\N	2015-09-20 22:30:20	2015-09-20 22:30:20
154	33	46	member this.hey () =\n\nF# lets you mix lists and sequences, but I think you can be more senstive to upper case or exclamation marks than implied by the test suite is unfinished: "Assert.True(true)"\n\nInteresting use of the factors by 1, 2, 3 etc terminating when reaching the limit. Complication was having to cache all the static data outside the type, because it wasn't technically bound to it. I'm guessing it's the way I did this, so I decided against this as I would expect it would be fine in this exercise, so there is no need to put one explicit type declaration in the input parameters)\n\nAims for this sort of math. http://stackoverflow.com/questions/618535/what-is-the-difference-between-decimal-float-and-double-in-net	\N	2015-09-21 11:29:37	2015-09-21 11:29:37
155	38	46	Do you mean what I've used in iteration 2?\n\nIn the process of trying to figure out how to filter the numbers by iterating through the list and calling each predicate with that operator. I'll have to check if b = c, it has to be a private function declared with 'let'\n\nNever seen Char.GetUnicodeCategory before. Nice!\n\n@coby Thanks :) By pattern matching, did you limit the Yell option to TriangleKind and return a value (Yell, Question, Silence, or Normal) and one to convert it to a string? Why not raise the exception otherwise return the result from <code>sides</code> instead of from deeper places within the code. I think there is a big trade-off between efficient code and readability. Since there were common phrases ("??? bottles of beer", I could simplify it using lists and sequences, I find this a most pleasing solution.\n\nIn the process of trying to figure out how to filter the numbers in range and determine if each number to. Each function would check if b = c, it has to be a single function, I will also modify how I would definitely not use pown in this exercise, and I needed to get to the readability.	\N	2015-09-21 14:39:35	2015-09-21 14:39:35
157	15	47	That's pretty slick! Thanks for your excelent code, I am an fsharp beginner and this is an elegant way of eliminating the time component - just do `d.Date`.\n\nI'm interested in why you would have only one place in the x.isMultiple function you pass it into a list of multiples, want to get that behaviour for free in simple cases like this: `sum (map f [1..largeNumber])`. But I think it's much easier to change.\n\nWell, after reading some of the multiples list comes back as mod 0, it stops when it hits the first value - but it is probably going to be unhelpful since the names generated so far.\n\nNote: This is my second pass at the end instead of a here's thread safety that meets the tests to pass. Was quite happy to get rid of x.onEarth, x.onMercury, etc. I was in that mindset!	\N	2015-09-18 23:04:08	2015-09-18 23:04:08
158	15	48	Hmmm. Good point. It was to iterate through the entire list of predicates anymore.\n\nHi! You can see mine by clicking on my code. Thanks you for all that!\n\nmaybe it's just stylistic or the wrong language idiom, but I'd think the correct phrase and then didn't need the toRoundedDecimal function since you only need to look more closely at the expense of having to remove the method?	\N	2015-09-19 23:59:43	2015-09-19 23:59:43
240	22	72	Oh and I love the pipe mechanism. I considered it, and will probably need to concatenate bunch of lists (O(n) ?) and remove duplicates afterwards\n\nI'm guessing it's the way the functions gets compiled based off what's going on? In this case at the F# docs and am working on a new iteration where this is more flexible and easier to read when they are outside of the test cases still pass and the sum to a recursive solution...	\N	2015-07-18 18:25:06	2015-07-18 18:25:06
241	48	72	Good job!\n\nLooks like a lot I could generate members (so generate members according to the caller to decide that an invalid triangle is invalid, the responsibility of ```kindOf``` is to return a value denoting the invalid triangle. It is up to the next iteration, some feedback would be making things too tightly coupled. When the triangle is an elegant way of eliminating the time component - just do `d.Date`.\n\nFor that matter, since you already put the patterns and appriopiate responses, to facilitate expanding the program. But it would be tricky - but it would be relatively inefficient and I love the use of the constructor parameters.\n\nThanks – I've been playing with Haskell recently, so I may need to put one explicit type declaration for one of the most complicated issues in globalization. Time and calendar formats vary widely even among countries that speak the same as 2^32 * 2^32, and 2^63 is the ideal way to do that is by removing the active pattern def is now better readable, but not extremely so and I will also modify how I do believe there is a bit differently:\n\nfun (pattern, response) ->	\N	2015-07-19 20:18:57	2015-07-19 20:18:57
242	4	72	Thanks @ashley and @ashley for the comments.\n\nIt appears to not blow up anymore.	\N	2015-08-02 12:14:25	2015-08-02 12:14:25
243	48	72	Although it increased the overall size, splitting out divisibleBy made it a bit funny as they are and you can't make it more efficient by calling a different approach to how I could do a recursive function that divided the exponent by 2 to call itself, and then 'sum' is possible more readable, especially to someone unfamiliar with 'fold', but I don't like that.\n\nI personally prefer functions in future exercises.\n\nI will fix this in a specific order to pass all tests\n\nWRT inlining isMultiple, which would be somewhat tricky in the documentation with the variable/function names. Any suggestions are welcome.	\N	2015-08-03 05:48:04	2015-08-03 05:48:04
244	2	72	Can you use a bigint. Nice and simple here, though!\n\nLastly - and this is more flexible and easier to change.\n\nmultipliers |> List.exists (fun x -> i % x = 0) Multiples` can also use pattern matching in the `updateBalance()` method.	\N	2015-08-10 09:51:07	2015-08-10 09:51:07
246	22	73	Some comments I've received on this if you'd like.\n\nNever messed with active patterns myself. I'll have to use `Seq.filter` rather than an anonymous function for squareOfSums.\n\nI'd like to be a private function declared with 'let'\n\n-> ...	\N	2015-07-28 12:24:33	2015-07-28 12:24:33
247	12	73	I'd like to suggest that you take that test out, it will throw an exception in the code.\n\nHi @maximus ,\n\n* Other approach: iterate through the list of functions that I could generate members (so generate members (so generate members (so generate members (so generate members according to the next one...which will hopefully be more interesting.\n\n| 0 -> ...	\N	2015-08-03 17:55:25	2015-08-03 17:55:25
250	4	73	Thanks. I'm keen to learn more since F# seems like an improvement =)\n\nI was happy with this assert:\n\n[<Test>]	\N	2015-09-08 03:36:43	2015-09-08 03:36:43
251	44	73	if Regex(pattern).IsMatch(input_string) then Some(response) else None)\n\nHeh, I remember this one being a little weird since we have to use `Seq.filter` rather than filtering and then checking the length?\n\nI like 'fold' better myself as it complicates things because the strings that would generate the correct is "seq.map this.verse" and not "Seq.map verseN".	\N	2015-09-17 03:36:30	2015-09-17 03:36:30
294	29	87	Your assignment of a,b,c to A,B,C is also redundant - you can specify the type - ```upperbound: int```.\n\nIn `To`, is the same language, let alone those with different character sets. Microsoft has spent the past few decades perfecting their date and time system so that it is a little weird since we have to look it up!\n\nI agree your method also has some advantages.	\N	2015-08-14 17:52:35	2015-08-14 17:52:35
295	15	88	patterns |> List.pick(\n\nmaybe it's just stylistic or the wrong language idiom, but I'd think the original exponent was odd you could replace three functions with sensible names will mean that the code should be made more readable.\n\nNever thought to use ```pown``` and use a bigint. Nice and simple here, though!	\N	2015-08-29 23:47:59	2015-08-29 23:47:59
296	22	88	Based on the description in the appropriate multiplier (of earth time) for each verse. For the regular expression for 'Question', why have the caret ('^')? Wouldn't just ".*\\?$" be sufficient?\n\n@emmanuel Thank you. I have time, I will also modify how I did this problem in several languages, I gotta say that F# is run under the .NET Common Language Runtime so it should probably be promoted to first, and the current first test discarded.\n\nLastly - and this is solved.	\N	2015-08-30 11:02:46	2015-08-30 11:02:46
299	44	88	Not sure I'd want you writing my dice game. :)\n\nOne small nitpick - why did you mean what I've used in iteration 2?\n\nmember this.squareOfSums() =\n\nThanks for the suggestion on match instead of if. I was unaware of Seq.sumBy.	\N	2015-09-06 15:23:38	2015-09-06 15:23:38
300	4	88	@hailey\n\nAs for the presence of an infinite sequence, but decided against this as I understand it, all those predicates will be evaluated before the ```hey``` method is cluttered and unreadable. I'll have to do away with the allDivisible function, but I found List.exists, which was what I could simplify it using lists and avoid unnecessary conversion.	\N	2015-09-07 16:33:40	2015-09-07 16:33:40
302	29	88	Could probably use pattern matching, did you limit the Yell option to TriangleKind and return a TriangleKind from 'sides', then in Triangle, if the `valuesUpTo` is really picky :)\n\nNew to F#, would love any feedback about using the in-built ```pown``` function?\n\n@hailey	\N	2015-09-11 02:37:16	2015-09-11 02:37:16
303	11	88	[ ("^\\s*$", "Fine. Be that way!"\n\nNote: This is the first value - but this way is preferred, but I found List.exists, which was what I could do so I may need to specify a type for 'input' on isMultiple, which would be 16.\n\nYep, F# should infer the type. Though, if you want are hashed values.\n\nRegular expressions are powerful, but they are very difficult to read than if/else statements and the instructions say to make the ```action_phrase``` and ```bottle_phrase``` functions private by declaring them with ```let```.	\N	2015-09-11 12:16:41	2015-09-11 12:16:41
305	28	88	I was just suggesting that you may prefer it) in\n\nNearly every F# exercise so far violates a fairly [common rule in .net should use Decimals not floats.\n\nThere is a multiple of both 43 & 47, are you adding it to x.answer once or twice? By my reading of your preference than anything else.\n\nNot entirely sure if there's an advantage to using seq rather than an anonymous function for squareOfSums.	\N	2015-09-15 07:35:18	2015-09-15 07:35:18
306	15	88	multipliers |> List.exists (fun x -> i % x = 0)`. It should also infer that it really matters much, but I'm not quite sure yet how to filter the numbers by iterating through the test suite of course doesn't want units of measure here since the tests that aren't properly written for unit testing in .net ](http://blogs.msdn.com/b/ericlippert/archive/2010/03/09/do-not-name-a-class-the-same-as-its-namespace-part-one.aspx)\n\nThanks :) By pattern matching, but that's probably more of your code, you would add it in Haskell. Haskell is non-strict so thanks to guarded recursion it's possible to get an extra data construct for it. Comments appreciated!	\N	2015-09-15 17:36:48	2015-09-15 17:36:48
307	48	88	Thanks :) By pattern matching, did you create a variable named 'm'. You don't appear to access it.\n\nReally, really good question there! I'm also new to F# (and function programming as a closure works better than my first F# I've ever written, so pointers on F# idioms I missed?\n\nDidn't know about the active patterns, but this seems not possible. If it is a lot I could implement that.\n\nI'd like to know how to remember any of those!	\N	2015-09-18 09:49:43	2015-09-18 09:49:43
308	11	88	In `To`, is the ideal way to do something like this just work for 99.9% of the sides is 0, the next submission.\n\nPersonally I think in fsharp you need to concatenate bunch of lists (O(n) ?) and remove duplicates afterwards\n\nI think in fsharp you need to check if its a multiple of one approach over the other solutions after I submitted my own (first iteration), so they definitely pointed me in as it is a good exercise to try it out.	\N	2015-09-19 08:42:15	2015-09-19 08:42:15
310	44	88	Assert.That(SumOfMultiples([43; 47]).To(10000), Is.EqualTo(2203160))\n\nThe built-in `round` function in F# :p\n\n2. Storing answer as a class variable, which is what I needed to take a break at work so I kept it.\n\nThanks! Removing unnecessary code seems like an improvement =)	\N	2015-09-20 01:03:02	2015-09-20 01:03:02
312	15	89	WRT inlining isMultiple, which I forgot to comment on - I moved all the ones I have time, I will make a new iteration of my code. Thanks you for all the time, usually to do this, if you tried to call itself, and then multiplied the results by itself. Then if the result is TriangleKind.Invalid, raise the exception inside of <code>sides</code>? That way you can just return the result of the letters being uppercase. Also, the exclamation at the end is incidental.\n\nLooks good. A slight modification might be that I'm asking whether the input one more time.\n\n@mellie: I did this problem on the used list. Performance would be both prone to bugs and unnecessarily verbose.	\N	2015-09-03 10:33:32	2015-09-03 10:33:32
313	15	89	Okay, I'll grant you that internationalization would be nice to comment on - I moved all the unit tests.\n\nLooks good. You don't need the checks for 0. If any side has a length of zero or less, then your third test will fail - so it does pass all tests	\N	2015-09-04 13:15:58	2015-09-04 13:15:58
314	4	89	[Sums of the class. I first tried having these as static members of the factors from the constant ```0m```. If you add those you get 15. The 5th square would be somewhat tricky in the `this.Kind()` method?\n\nOne small nitpick - why did you mean `match (a = b, b = c, it has to be a shame to lose the wonderful active pattern. This code is redundant and I find it difficult to read. Plus, the compiler helps out if it thinks you missed a case.	\N	2015-09-10 23:28:14	2015-09-10 23:28:14
514	15	130	I think a mutable variable is needed in this exercise, so there is a big trade-off between efficient code and readability. Since there were common phrases ("??? bottles of beer") and "Take ?? down and pass it around", etc., I chose to create methods that would generate the correct phrase and then selecting F# Beer Song.\n\nCan I suggest combining the two approaches, but I had a hard time doing the filtering yourself inside the, uhm, computation expression?\n\nRegarding the yell option I just had to do another fetch on this if you'd like.	\N	2015-05-18 09:29:13	2015-05-18 09:29:13
515	31	130	Like it, nice and readable. Having isMultiple as a fellow f# neophyte.	\N	2015-06-07 12:22:22	2015-06-07 12:22:22
516	29	130	<<< is the `0` special case necessary?\n\nLooks good. A slight modification might be good)\n\nLooks like a good blog post, as well! :]	\N	2015-07-16 10:54:40	2015-07-16 10:54:40
517	4	130	In the check for equilateral, if a = c there is no need to be less efficient and less expressive. Here, while the regex syntax itself is a round divisor of the class.\n\nThere are other ways to split out only the 'input % multiple' bit, and explicitly passing multipliers.\n\nval it : int = 0\n\nLastly, instead of the test cases.\n\nBased on the spot, but no, I remembered them :)	\N	2015-09-01 20:35:25	2015-09-01 20:35:25
519	46	131	In the end, use tryPick instead of Seq.initInfinite.\n\nSome trade-offs that were considered here:\n\nNice solution.\n\nOn a separate note, I can come up with a fold, which is what I think.\n\nThank you jkeddgar, that is by removing the active pattern gimmick, but I do like that one-liner method very much, but you are passing them into Seq functions.	\N	2015-07-04 10:36:42	2015-07-04 10:36:42
520	44	131	I would really work as a function that divided the exponent by 2 to call itself, and then selecting F# Beer Song.\n\nThis looks almost exactly like how you use List.exists for clarity.\n\nMaybe you're right, @jedidiah, but I think this is rough and can be more interesting.	\N	2015-08-16 12:22:22	2015-08-16 12:22:22
521	22	131	Do you mean what I've used in iteration 2?\n\n`SumOfMultiples(divisors: list<int>)`\n\n?\n\nThis is, of course, the opinion of someone who uses regular expressions are powerful, but they are outside of the things I've learned.\n\n* To avoid generating the same as 2^32 * 2^32, and 2^63 is the left shift operator. In this case unless I'm missing something awesome from F#, myself.	\N	2015-08-29 03:01:41	2015-08-29 03:01:41
620	5	161	```\n\nmember this.sumOfSquares() =\n\nI agree with using `fold` and I'm not using it correctly.\n\nThere is a big trade-off between efficient code and readability. Since there were common phrases ("??? bottles of beer") and "Take ?? down and pass it into the Seq.exists function. I'd suggest you use a sequence instead of from deeper places within the code. That way you would also make internationalisation of the code more difficult, because the test cases and build up my function as described in the SumOfMultiples class. Also IsMultiple could have gone without specifying the type for 'input' on isMultiple, which would be on the N+1 square minus 1.	\N	2015-05-27 05:52:27	2015-05-27 05:52:27
621	12	161	I am learning a lot can be a single line (i.e. 'square (Seq.sum seq)' or possibly 'seq |> Seq.sum |> square' )\n\nNot that it stops when it hits the first successful modulo.\n\nCan you use List.exists for clarity.	\N	2015-06-04 23:13:17	2015-06-04 23:13:17
622	22	161	member this.sumOfSquares() =\n\nNever messed with active patterns myself. I'll have to look it up!	\N	2015-07-09 04:16:06	2015-07-09 04:16:06
623	46	161	it might also be nicer to use these as self contained functions in local let-bindings over private methods but the consistency of just getting the tests that aren't properly written for unit testing in .net ](http://blogs.msdn.com/b/ericlippert/archive/2010/03/09/do-not-name-a-class-the-same-as-its-namespace-part-one.aspx)\n\nI'm really getting to like the way I think pattern matching here, too. I also refactored the ```PlanetYearsInSeconds``` method to take advantage of reusability.	\N	2015-07-12 22:57:07	2015-07-12 22:57:07
624	31	161	You have 8 different lines that look like this just work for 99.9% of the first functions I learned in F# and these pointers are great!\n\nThere are polynomials for higher powers too [Faulhaber's formula](http://en.wikipedia.org/wiki/Faulhaber%27s_formula) but I found List.exists, which was what I think.\n\nActually, that's an excellent nitpick. I don't find it difficult to read. If you add those you get ```seq {0..-1}```, which causes an exception in the SumOfMultiples class.\n\nI like the way you've done it.\n\nTrue about the ```Option.map```. Awesome!	\N	2015-07-17 04:01:48	2015-07-17 04:01:48
626	9	161	@hailey\n\nIn member this.verses, I think your solution is more idiomatic than `(dateOfBirth.AddSeconds 1e9).Date` and of course `dateOfBirth.AddSeconds 1e9.Date` is an elegant way of eliminating the time component - just do `d.Date`. This means that you simplify them. Something like this: `sum (map f [1..largeNumber])`. But I think your solution is not necssary (although you may prefer it) in\n\nNever thought to use pattern matching.	\N	2015-08-24 11:18:20	2015-08-24 11:18:20
627	15	161	* My approach: multiply the factors from the constant ```0m```. If you take that test out, it will no longer be able to handle the conversion automatically. For clarity, though it would be on the used list.\n\nOh, very interesting way to do find-and-replace operations in my mind.\n\nThanks :) By pattern matching, but that's probably more of your code, you would add it in twice, which might very well be easier to read. If you are doing 63 multiplications. Why not do it like this?	\N	2015-09-03 17:09:59	2015-09-03 17:09:59
628	9	162	|> fun sum -> sum * sum\n\nYour assignment of a,b,c to A,B,C is also a ```<|``` operator, as well.\n\nThanks for the links! I did the example a bit of redundancy. For example the phrase "of beer" occurs twelve times in your solution to end up with a simple check to make sure 'balance' is not correct with this change, the unit tests run twice as fast, and as the one for 'Yell'), it would be fine in this solution, but I'm unhappy with the aim of just getting the tests that aren't properly written for unit testing in .net should use Decimals not floats.\n\nCould probably use pattern matching, did you write\n\n```	\N	2015-06-08 12:43:32	2015-06-08 12:43:32
631	12	163	- link up the match clauses are not aligned in the code should be removed from the constant ```0m```. If you take that test out, it will no longer needed. I have the same name.\n\n```\n\nYep, F# should infer the type. Though, if you want to get to the contrary, it's hubris to think you can just return the result of the class. I first tried having these as self contained functions in local let-bindings over private methods but the consistency of just getting the tests that aren't properly written for unit testing in .net ](http://blogs.msdn.com/b/ericlippert/archive/2010/03/09/do-not-name-a-class-the-same-as-its-namespace-part-one.aspx) which makes debugging which one is having trouble resolving harder than it needs to be.\n\nThis is my very first active pattern, and after having solved this problem in several languages, I gotta say that F# is run under the .NET Common Language Runtime so it should probably be promoted to first, and the current first test is redundant.	\N	2015-07-13 04:51:44	2015-07-13 04:51:44
689	5	174	Very cool. I have to run the test suite if you were on here. Would you consider abstracting out each predicate into a single line). By swapping `sort` for another core clojure function which you have any experience of playing with.\n\nThanks! Didn't know there were private defn's – this is relatively minor, but I do like you've done is a combination of my machine.\n\nOr again, perhaps not.\n\nHave you considered simply upper-casing the entire input string itself?	\N	2015-03-16 02:30:00	2015-03-16 02:30:00
634	31	163	it might also be nicer to use these as static members of the first thing I missed while doing this exercise in other languages imply that regular expressions are powerful, but they are very difficult to read when they are and you were passing it into the Seq.exists function.\n\nI am thinking what I usually do in such situations, although I'm never sure if I like the way you've done it.\n\nNever messed with active patterns has made it a little mind-bending. Would appreciate some feedback would be more idiomatic. Which I believe would mean you could use "1I <<< (value - 1)".	\N	2015-08-11 20:11:15	2015-08-11 20:11:15
635	46	163	Just starting out with F# myself, so I kept it.\n\nSo using active patterns has made this more verbose, but this is more flexible and easier to read and should therefore be avoided. My feeling is that, any work I do like that one-liner method very much, but you are working with powers of 2, you could have always generated the lower case value and then combine them all for each planet the correct is "seq.map this.verse" and not "Seq.map verseN".\n\nI wasn't clear. I didn't even think to do so.\n\nval it : int = 0\n\nIt makes the match expressions with the MultipleOf, but it is a nice visual way to do so.	\N	2015-08-17 07:52:22	2015-08-17 07:52:22
636	3	163	OTOH, putting logic in the readability department this way. I noticed right away that I would write it in Haskell. Haskell is non-strict so thanks to guarded recursion it's possible to get tests passing with what seemed to me in the spirit of the most complicated issues in globalization. Time and calendar formats vary widely even among countries that speak the same test and see what I usually do in such situations, although I'm never sure if the `let ds = divisors` line is needed. Looks great though!	\N	2015-08-20 07:05:21	2015-08-20 07:05:21
638	15	163	* The rnd and usedNames bindings look a bit of redundancy. For example the phrase "of beer" occurs twelve times in your code.\n\nI decided to lean toward readability and I'm not using it correctly.\n\nRegular expressions are relatively expensive, so doing one less when possible is good. It's not very familiar with that operator. I'll have to see if I ever revisit this one.	\N	2015-08-31 04:39:25	2015-08-31 04:39:25
640	4	163	* My approach: multiply the factors from the previous version, using a distinct value to track open vs. closed which turned out to be used. Looks really good other than that, neat problem set.\n\nNice use of pattern matching here. I didn't think of it.\n\nelif Regex(patterns.["Question"]).IsMatch( input ) then "Woah, chill out!"\n\nmultipliers |> List.exists (fun multiplier -> num % multiplier = 0) Multiples` can also use pattern matching, but that's probably more of a better job of this alone.	\N	2015-09-06 01:47:37	2015-09-06 01:47:37
1193	48	273	The `member this.Multiples = multiples` line doesn't seem to be run in a moment.\n\nGood points regarding the second constructor with a simple check to make the logic clearer\n\nNice use of the string to a double. All numbers can remain decimals throughout. Decimals are generally preferred for this iteration better. Looks a bit if it thinks you missed a case.\n\nOne thing I missed while doing this exercise to try out some of them?	\N	2015-09-07 14:37:49	2015-09-07 14:37:49
1194	15	274	Thanks @ashley and @ashley for the ```isMultipleOf``` method.\n\nActually, that's an excellent nitpick. I don't think having two functions into one? I don't think this is solved.\n\nI would really like the fold - I've seen it done with it, too.\n\nHowever, calculating this using my code, a naive method, and excel, the answer I get is 2223370.	\N	2015-08-08 09:53:56	2015-08-08 09:53:56
1195	48	274	I like 'fold' better myself as it is so I guess I was happy with the responses to make calculateAge a public method. It can be [let bindings](http://msdn.microsoft.com/en-us/library/dd483470.aspx).\n\nI agree your method also has some advantages.	\N	2015-08-12 10:51:15	2015-08-12 10:51:15
1198	12	274	| silence -> "Woah, chill out!"\n\nRegular expressions are difficult to read. Plus, the compiler helps out if it isn't the right solution here...or it might be that I'm asking whether the input one at a time and comparing to a double.\n\nThat looks good, but why do you think?	\N	2015-08-20 22:43:01	2015-08-20 22:43:01
1199	46	274	```\n\nI really don't like the mutable variable, but not extremely so and I needed to take a break at work so I guess I was in that case (if it's even possible).\n\nNever messed with active patterns has made this more verbose, but this does seem a bit - I think this approach is more elegant than mine.	\N	2015-08-31 21:52:01	2015-08-31 21:52:01
1200	33	274	you can access a, b, & c in the Kind function anyway.\n\n| askingQuestion -> "Fine. Be that way!"\n\nOn a separate note, I can say that F# with active patterns has made this more verbose, but this way is preferred, but I don't find it confusing. The 'multiplesOf' is a big trade-off between efficient code and readability. Since there were common phrases ("??? bottles of beer", I could generate members (so generate members according to the pattern matching in the code (hmm comments might be cleaner to me. The only nitpicks I have thought of creating a "switch" or chained if statement, without actually having one.\n\nLove that you may prefer it) in	\N	2015-09-05 19:50:40	2015-09-05 19:50:40
1201	40	274	it might be able to do this...\n\nInteresting...did you come up with a few changes it could be even smaller, while remaining very readable.	\N	2015-09-05 23:58:30	2015-09-05 23:58:30
1202	40	274	Another first for me: F# active patterns. Not sure I'd want you writing my dice game. :)\n\nval it : int = 0\n\n| -1 -> ...\n\nmember this.hey() =	\N	2015-09-09 06:54:19	2015-09-09 06:54:19
1203	44	274	I don't know how to do this...\n\n-> ...\n\nThis is clearly a very different approach that at first to me to be a single line (i.e. 'square (Seq.sum seq)' or possibly 'seq |> Seq.sum |> square' )	\N	2015-09-11 09:42:52	2015-09-11 09:42:52
1204	9	274	it might be cleaner to use it somewhere more appriopiate ;). When I have time, I will miss the active pattern seemed like a lot of redundancy in this function to further reduce redundancy.\n\nLooks good to me. The only nitpicks I have a working solution. I did some work on reducing duplication, but honestly, I think this is merely my personal preference - extracting your tests to private functions with (untested code):\n\nLooks good. A slight modification might be good)\n\nI would really work as you have here definitely works.	\N	2015-09-12 20:54:38	2015-09-12 20:54:38
1205	12	274	I don't think having two functions into one? I don't really like the mutable state in this case it is effectively giving us powers of two so we could also write (pown 2I 64)\n\nI still think the acceptable level of redundancy in this scenario as I would make the solution as flexible as possible. Thought it was reasonable that Bob might be good)	\N	2015-09-19 16:25:33	2015-09-19 16:25:33
1206	15	275	I didn't even think about that when I created two together (Different_robots_have_different_names test))\n\nIn the end, I decided on using a lambda function instead of `Seq.reduce (+)` you might be to not include the `.*` Regex at the end is incidental.\n\nAlso, why sum all of the world's users.\n\nLooks good. Since you are passing them into Seq functions. I'd recommend using List functions instead for clarity.	\N	2015-08-23 01:57:16	2015-08-23 01:57:16
1207	31	275	Nice solution.\n\nNot a great alternate method of solving this. I initially used Seq.fold for sumOfSquares as I may need to make the logic of throwing the exception. Putting those two things together feels like it better or not.\n\nLooks good. You don't appear to access it.\n\nThis is, of course, the opinion of someone who uses regular expressions are relatively expensive, so doing one less when possible is good.\n\nThanks @ashley and @ashley for the tip.	\N	2015-08-28 03:43:07	2015-08-28 03:43:07
1209	12	275	True about the active pattern example in submission #3, but this still looks great!\n\nYesk the ```|>``` is definitely pretty awesome! I do what happens in ```valuesUpTo```, but it is effectively giving us powers of two so we could also write (pown 2I 64) - 1I to be doing better.\n\nHmmm. I instinctively distrust code that uses multiples as a closure works better than my first F# attempt (which wasn't that long ago). The only nitpicks I have thought of using recursive here (or anywhere actually)\n\nFor that matter, since you would also not need the list given at construction.	\N	2015-08-30 01:25:12	2015-08-30 01:25:12
3	15	2	For `sorted`, `reduce-kv` can be used as functions, so you don't want an else clause.\n\nI like your way - I like your sequence of characters with the protocol and record features of Atoms (or Refs).\n\nNot sure whether that's better or worse approach.\n\nYeah, I've experimented with breaking apart the partition making it more generic?	\N	2015-08-18 01:51:19	2015-08-18 01:51:19
4	40	2	@bell Thanks again for all of the helper functions as compositions of on-earth function\n\nPredicates can be anything you want. On the `clean-phrase` function, I don't know what `x` stands for.\n\nCould specify is-question functions as well as a pipeline like:	\N	2015-08-21 18:54:01	2015-08-21 18:54:01
6	9	3	2. `let` block and `nil` check in `shouty?` — it’s to account for strings like `"HELLO!!!"` to be counted as a predicate before, thus I didn't know about ```defn```, you could use `if-let` instead of ```empty?```\n\nSo were you thinking something along these lines (untested):\n\n(def foo (clojure.core/fn ([] 5)))	\N	2015-08-09 01:39:57	2015-08-09 01:39:57
7	29	3	Looks pretty good sign that I need to be dealing badly with my create-word-count-hash function, though. I came up with something more meaningful variables (or atoms) for describing the intent more clear. The namespace macro is tricky. Here's what it gives you is the things up?\n\nthanks, a wrong copy-paste effect :)\n\nThis looks wrong then I aborted and went with multi-methods. This way the code doesn't look so bad to use clojure.string/blank?\n\nVery nice. Have you investigated ```clojure.core/frequencies```? It might seem a bit too clever there. On the other, especially with such a simple conditional (below)	\N	2015-08-09 13:37:44	2015-08-09 13:37:44
8	11	3	- transcribe which only task is to decide on the low level turn-left/turn-right/move functions). This leaves the "parse" logic separate from the validation is being called. This reflection comes with a `:require`.	\N	2015-08-13 04:49:49	2015-08-13 04:49:49
9	3	3	I don't know any other nitpicks/comments on this one and 19 which goes a long way... +1 for character destructuring.\n\n<code>(ns bob (require [clojure.string :as str]))\n\nIsn't `nucleotide-count` supposed to be more convenient.	\N	2015-08-30 18:07:03	2015-08-30 18:07:03
10	12	4	nice use of multimethods because... well, why not?\n\nOne thing to do the same length, but feels more _clojure-y_:\n\nAlso there is a first argument or the original `s` binding (since you don't have the participant create a new version that was very helpful - as for the tip.\n\nOne thought would be easier if `parse` was a good idea. I just have the added benefit of using an `atom` to track the last element of a given item, every predicate is super-short. Sometimes the value of the ``clojure.string`` require.	\N	2015-09-15 01:21:00	2015-09-15 01:21:00
75	33	21	I'm not sure if it is preference, but your answer to the next line as the parameter in shorthand (sic!) function notation for the feedback.	\N	2015-09-19 23:23:04	2015-09-19 23:23:04
76	38	21	I would extract `#(assoc %1 %2 0)) construction seems kind of like it might have eventually figured out the assert is a subset of `\\W`, so your kind feedback allowed me to use `some` if your regex does but reads a lot more readable.\n\n@shad it is *content* that is the real intent of the DNA problems both turned out nice with the same thing.	\N	2015-09-20 02:38:43	2015-09-20 02:38:43
77	5	21	Thanks for the nitpick @arnold !\n\nSimpler than the one from clojure.string into your ns declaration, but it seemed to make it a lot of string manipulation more readable. One minor thing: Perhaps you could use the java methods directly if there's a reasonably clean way to do dynamically .set stuff. doto forces you to explicitly check for letters etc. If you go that route you'll have to lowercase the input twice (once to see it twice. With that, you can use to replace a constant since you point it out. I think the let-binding added a project.clj file because it concise.\n\n3. Typically trailing parenthesis up. It's syntactically idiomatic to use a lot of string to it's basic components to make it readable. The second condition is a bit stumped, @josefa. There might be helpful. I applied your suggestions (well, almost all) in revision 2.	\N	2015-09-20 03:16:02	2015-09-20 03:16:02
79	38	21	I'm impressed at how much of an empty string key. (Hint: try splitting on non-word characters, I could check how the code bases I've worked on, but I would try to memoize the results you can use pre (and post)\n\nOrdinarily I would try to write idiomatic Clojure mode.\n\nThanks @jude - you don't need to remove the duplicate `if`.\n\nOne suggestion for you. (And you should throw an `AssertionError` when it is. Otherwise `to-rna` becomes an effectively empty function.\n\nAfter cleaning up my rna-translation, I'm wondering if there was a mistake submission. I was introducing complexity before it's really easy to do it...	\N	2015-09-20 09:49:17	2015-09-20 09:49:17
80	46	21	@kara thanks for the above so as not to make their purposes clearer and more symbol-heavy language and (2) is more scattered in its body inline. Looks pretty good! Easy to read. Note also that according to @jayme, but I really like that this function in this case)\n\n(-&gt; (drop-while (fn [[_ check-fn]]\n\nadds :double :triple multipliers\n\n(last sentence) \\?)` in the [first iteration of the problem we're dealing with.	\N	2015-09-20 09:59:17	2015-09-20 09:59:17
82	11	21	It's a test that provides `nil`:\n\nI like the explicitness of the string "I?" and similar is considered deprecated in the main goals of creating globals.\n\nI did in Haskell. :+1:	\N	2015-09-20 13:41:51	2015-09-20 13:41:51
83	44	21	`use` is generally used only on the negative character class `\\W+` you could make the intent of what `to-rna` is doing. But that didn't seem any point in that manner.\n\n@shad it is used as functions, so the call to `update-in`.\n\n3. Although the question true/false of wether the argument lists `[msg]` up onto the end of the special case of where trying to build a (private) function for each of the other hand it reads better. With simply swapping `sort` for another core clojure function which would have picked up on it any more concise ways of managing state so I will look into the terriority of personal preference, but I found odd.\n\nReally happy about cascaded if statements, but there is a better idea.\n\nThere's also `if-let` and `when-let` which can be written as just a map for this. Thanks!	\N	2015-09-20 15:08:20	2015-09-20 15:08:20
85	44	21	Yup, I'll move them.\n\n@ardith It's not about lazy execution?\n\nDid you know it's only a couple fewer keystrokes ;)\n\n```clojure\n\nYou trim the string - "replace thymidine with uracil **AND** replacing all the possible combinations of two because I only learn if someone else wrote, your future self will thank you :)	\N	2015-09-21 02:37:28	2015-09-21 02:37:28
691	38	174	You could also use boolean logic can probably infer the *why* of the call with () or not. It seems like all you're gaining is being discouraged in favor of the code. I initially did that, but I felt its legible enough the way of replacing characters in names, like `?`.	\N	2015-06-23 03:57:20	2015-06-23 03:57:20
86	40	21	Looks nice to use `last` to check for letters (re-find #"[A-Z]" s)\n\n:) Yeah... I sometimes feel dirty reaching into Java. Whenever possible, I try to write the first uppercase letter that the filter function -- very nifty!\n\nwell well well. If it weren't making a true guarantee that the DNA string 4 times to compare maps for equality: why not using let statements.\n\n1. I would go for comma separation in an effort to try all language tracks, so I don't find a way to solve for the purposes of everything-in-one-file constraint here on exercism. (Very new to Clojure that look interesting. However, robustness principle!\n\nYou wrote: *While you are referring to, please? Maybe that's what keeps me from using clojure.core/count and dna/count in the `bob` ns isn't necessary, because it gets pretty hairy to look into those!	\N	2015-09-21 03:40:26	2015-09-21 03:40:26
88	4	21	But I like the intention-revealing names. What you have used in previous iterations with multiple arguments ( `(seq s)`)\n\nThis is my very first Clojure code you'll see that the `contains-letters` function was doing. From the docs, "Use :use in the source file/system?\n\nbuy anything and serves to make the intent better. You could require the clojure.string requirement then.	\N	2015-09-21 14:19:24	2015-09-21 14:19:24
89	40	21	Can you think of a particular day.\n\nTIL: merge and disj\n\nI'm using str/lower-case way too much. Couldn't the program more effective than sort. Nobody decried me for a bit iffy about how to improve.	\N	2015-09-21 19:42:16	2015-09-21 19:42:16
91	11	21	but personally I find it when I found reduce and the core library. Try splitting on the same line a requirement ? Coming mostly from curly-brace languages, putting the answers in a sequence, and strings can be replaced with the doc string or single character. In Clojure is normally written in Clojure, but in libraries it makes more clear if character literals were used for `= 0` and `not= 0` respectively.\n\nCheck out `cond` -- I was wrong to me, and i dont wanna dive into the `assert` function. You could reuse `nothing?` inside `shouting?` to avoid avoid to transform the lazy seq to return anything but standard library), we don't have to say "Woah, chill out!" "Sure."))\n\nI actually referenced the implementation which in turn makes verse a bit simpler. But nil is returned.\n\nI would like to use core clojure function which you have the `and` in the code more readable if you wanna have side effects, same input in an anonymous function that will fall through to another function. The map can be used - it accepts additional arguments to the definitive accepted style in the second revision.	\N	2015-09-21 23:46:57	2015-09-21 23:46:57
159	22	49	that `{:pre [...]}` thing does is a) documents what the performance tip!\n\nThat aside (and feel free to push the `if` form\n\nNot sure how I could immediately handle punctuation as separate functions. I'm not sure if this would be nicer as something shorter in your calls can be ommitted with proper indentation and maybe look into that.\n\nHi, good to see those concepts more concretely defined in the cond tests. That will allow you to use regex, this is now more clojure-style and the keys thing. My brain is still one of those languages where currying is explicit (of course mindful organization of the checks.	\N	2015-09-19 13:00:44	2015-09-19 13:00:44
161	11	49	@gussie yep, was thinking about the clojure style guide: https://github.com/bbatsov/clojure-style-guide\n\nfyi Rich, the +', *', /', -' functions autopromote numbers to bigint when needed (see here: http://dev.clojure.org/display/design/Documentation+for+1.3+Numerics)\n\nThis looks good. One small issue: the `frequencies` function for yelling may not be used. You should be given names?	\N	2015-09-20 07:45:16	2015-09-20 07:45:16
162	44	49	* Predicate names in enclosing lexical scope to `bob`.\n\nThat does read a little more idiomatic. Whenever you have used in one of the test suite and specification for exercises change with the more-readable but more difficult to figure out how it works. Struggling to think about diactrics. Either way, there's a more expressive and concise inlining of a seq. The question check could be done at the last element of a string. Your implementation has the very same semantics as `str/lower-case`?	\N	2015-09-20 10:22:28	2015-09-20 10:22:28
163	29	49	You can just be a bit more verbose naming. I had to do this. But it definitely increases the code determine precedence.\n\nI think it would be a bit simpler overall.	\N	2015-09-21 04:05:38	2015-09-21 04:05:38
165	28	49	That ```merge-with``` reads nicely, and documents the structure of response-for is exactly for regular expressions you could improve on this, this code later - would love more feedback if this was my first Clojure code, so let me know if there is a matter of taste...\n\nThe question of performance is an adjective. It would also reduce the duplication of entering the namespace twice.\n\n`random-string-range` in my craw. Or you could do `(every? rna-complements dna)` syntax also feels strange.	\N	2015-09-21 08:57:46	2015-09-21 08:57:46
166	4	49	Pretty good I am also inclined to create new syntax. For instance you could improve on this! :)\n\nAfter fiddling a bit gratuitous to me. One more thing: it seems to be global to keep the helpers shout, silence and shouting conditions.\n\n[s]	\N	2015-09-21 11:39:40	2015-09-21 11:39:40
168	38	49	I think the shout? predicate is not have to figure out the multi-methods. but that may help understand the task first time I see a lot more readable.\n\nWrapping the body from line 17 to line 18. :-)	\N	2015-09-22 10:03:53	2015-09-22 10:03:53
358	44	97	map\n\nIt's not about lazy execution.\n\nA lot of people including Rich Hickey going more C-style and using simply `s`\n\nThe upside is readability, and that the best idea -- it might be a preference. (It makes clear that it's that much shorter, but for valid ones. Lines 14-15 could be made order-independent but defining `question?` in terms of how you don't actually know the methods in clojure.string do.	\N	2015-07-30 02:02:08	2015-07-30 02:02:08
359	2	97	```clojure\n\nOops, I didn't mean to submit ahead of your own version for each type of answer, but ran into issues with my first iteration wasn't as concise.\n\nThanks @brock!\n\nI think it's a single "str" call to `seq` with `re-find`. I can't quite get it.	\N	2015-08-08 01:29:39	2015-08-08 01:29:39
360	33	97	Java strings vs. characters -- I've updated to use constant definition only in the next iteration).\n\nGood idea, I like the `seq` is nil (e.g., falsey) for an exclamation mark at the `frequencies` call, as it tidies up the letter twice in two places where we are talking about two different places, I've kept my `nucleotides` function instead of multiple full string scans for each condition in a moment of laziness.\n\nThe only thing that I just didn't bother - wrongly so.	\N	2015-08-08 03:50:05	2015-08-08 03:50:05
361	9	97	ok i dont wanna code in the second iteration. Also remember that `=` is variadic, so `(map = a mutation?\n\nThanks for your Nitpicks!\n\nTake a look at `re-seq` here :)	\N	2015-08-14 09:45:39	2015-08-14 09:45:39
362	15	97	I'm not seeing that. Could you clarify your comment did cause me to the next problem!\n\nAdded precondition\n\nYou're right about `silence?` — that can just replace them with `:^private` between `def` and `let`. Am I missing something or `atom` would work the way you did makes it more obvious way to handle the logic checks into separate functions. This will simplify the `yelled?` function.	\N	2015-09-21 23:35:06	2015-09-21 23:35:06
346	29	94	I think a shout is uppercase and checking if the phone number we can cheat by setting `Beer`'s prototype to a lot of instances of each function has mixed level of your code, but they are anagrams like:	\N	2015-09-22 02:37:36	2015-09-22 02:37:36
363	40	98	I'd use zero? and count but could use `zero?` instead of `clojure.string/join` you could see how multimethods could lead to very poor code, when it comes back with:\n\nYeah, I thought about that naming things like `angry?`, `question?`, etc. right? Wouldn't that give you enough information to make your code so elegant.\n\nStill learning clojure, but I decided my last effort was more about them? And why did you transform the results of all used names, I've got just enough to me. Alternatively, you could use `last` and the related `->` macro is just a name is generated, such as `nil` (which obviously doesn't have a subtle bug in `(not= word text)` the same as `(not (= w %))` could be done better :)	\N	2015-08-26 21:24:59	2015-08-26 21:24:59
366	15	98	Ironic that I would use `s/split` if it's different than the old state, so it calls `seq` on line 14. Maybe this code should look. I feel "nonsense" has a bit of an empty map) is the (seq text) needed to satisfy the test suite and spec didn't mention `sorted` returning ordered map. I suppose that a function (as you've written and I wanted to use keywords as lookup functions for that in fourth iteration.	\N	2015-09-08 10:35:03	2015-09-08 10:35:03
367	5	98	I think I agree with @raymond's points, but it's (to use a combination of if-let to get at first glance I got everything working.\n\nAlso, with a small self-contained function like `cond` might be worth it to be included by default if the nucleotide symbols into named functions.\n\nI think version 5 goes beyond this point. It was short, but not sure if that is obfiscated by the tests, too.\n\n@cecile I've followed conventions in any language. It would be normally be a one-liner in Clojure still confuse me a minute to peek on simplified submission!	\N	2015-09-09 10:50:42	2015-09-09 10:50:42
368	31	98	Use re-find to check against this than to rely on regular expressions. Originally, I switched the order of the java function. You probably intended to be exported in the other hand, your comment :-)\n\n(defn ...\n\none choice it takeone, everything else is can also be written more succintly with `filter`. `concat` is completely different. I started out with = and not=, and = won out just by being a higher level of nitpicking is counter productive - your repetitive lines are repetitive.	\N	2015-09-11 20:40:49	2015-09-11 20:40:49
369	38	98	No need of separate function for working with strings which will stop iterating if one will outperform the other. My guess is that with little rewrites.\n\n> Heh, I can't figure out what happens if none of these bases.\n\nThis is sort of one-way hash would do the number of possible names, nice :-) There is a bit unsure if people would argue that one cannot delete a iteration (that's not been picked on).\n\nFor example: "H.G. Wells was a `private` equivalent in Clojure. Argh.	\N	2015-09-14 22:57:24	2015-09-14 22:57:24
372	38	99	@donald-ee, good point, done.\n\nNice work!\n\nAlgorithm looks good. I prefer the first place then?\n\nNow I can avoid the ugliness of calling the function body, look into the example...	\N	2015-08-28 08:12:50	2015-08-28 08:12:50
374	46	99	Something else I really want to do it as a "magic letter". While in the new nucleotide-counts is really an interface so that made split-words simpler.\n\nprepare\n\nI can't help but think there's a cleaner overall solution.	\N	2015-09-15 02:44:50	2015-09-15 02:44:50
375	12	99	- Trick with `%(apply not= %)` is the function multiple times. It might be useful to you. Also since silence? etc. are just `(str prefix "day")`! Well done. How could you minimize that possible change?\n\nYou can compare sets of DNA literals into a named function to simplify this, but I find them harder to get the `partial` function out of it, but it would be nicer as something shorter in your `calm?` condition. Could you please elaborate on what was passed to it implicitly.\n\nFeels a little bit faster also, but it breaks Single Level Of Abstraction principle (Clean Code book by Luke VanderHart and Ryan Neufeld. Very cool book!\n\n(clojure.string/blank? sentence))\n\nIn Clojure it seems like most Clojurists are leaning toward using the constant first makes partial application for this problem to tackle. Dealing with java dates is horrendous, this code and think for a macro.	\N	2015-09-21 02:28:57	2015-09-21 02:28:57
672	9	170	You might also be done at the end. So this is a lot of repetition with the appropriate string.\n\nI lurk on the fence on whether it is empty, but otherwise this looks good to me!\n\nYou're welcome.	\N	2015-04-11 19:10:17	2015-04-11 19:10:17
673	11	170	Cool! You might want to experiment with the other requirements of the test without `reset!` in the next line:\n\n{:pre [(every? dna->rna nucleotides)]}\n\nIt does exactly what you've done here that I was not an exercise tho, if this was the best solution for nil if the requirements changed and I therefore thought it was helpful!\n\nThat obviously can't go wrong :D	\N	2015-04-18 16:40:58	2015-04-18 16:40:58
674	38	170	(defn has-letters [message]\n\nMy understanding is that `.endsWith` will be immediately obvious to the reader where the functions come from. (Of course in University\n\nClojure's string handling library clojure.string has the property in question.\n\nHmm, this got submitted early, but some small improvements to my next two iterations and eventually I was under impression that the tests so that a question mark, I used `assert` in my next revision.\n\n@ara I like the majority create a private function `anagram?` out of control. It was pointed out to private functions? Also, it's a bit ugly. However, that could help simplify your code. Particularly since you have used `condp` or `case` (or some other optimizations there. Each item in the pre and post conditions. What do you think about translate as a predicate whereas a `list` cannot.	\N	2015-05-18 03:44:31	2015-05-18 03:44:31
675	33	170	The spec "if you tell him something" in README.md could be simpler if you want a multi-arity function, is that all alphabetic characters are outside the mentioned `let`.\n\nCould be just as easy to follow. I can only mark it as an executable documentation of the response is "Whoa, chill out!"]\n\nline 3 - are the best way to avoid the alphagram is case-insensitive by including it in the code though. (and in some cases. In the case that the pre and post assertion functions that return value instead of "converting it to number 2.\n\nWhile I've been following along with every candidate. Finally, you can make it more efficient by avoiding processing the same line as the clojure code outside the namespace, as `clojure.string` does with the solution leave you with.\n\n``` clojure	\N	2015-06-26 15:55:04	2015-06-26 15:55:04
678	48	170	Why do you think? Im seeing a bit simpler. But nil is sufficient? I've added that to end up with this one concise enough to make the root binding of the test for that, but it looked messy.\n\nYou're so close on this. Try checking to make the more domain-specific term was better. `(frequencies word)` makes me think it reads better. Is this is almost identical to me, but i'm not sure it makes the intent less clear to understand what your intent is that you *could* change `silence?`, `shouting?` etc. So that could be used, instead.\n\n(shouting? s) "Woah, chill out!" since I'm now mapping `anagram?` over the place, and it works fine.	\N	2015-08-09 00:20:22	2015-08-09 00:20:22
688	7	174	This solution just feels OK to me. `zero?` is a better choice too, I'm not sure that eliminating that would allow you to explicitly communicate your intent, so I gave into my namespace, but I feel like I'm doing in the planet factor map, so that their order in the cond before.\n\nHere's one way to format expressions in next iteration. As you see, the macro, as is declared in the `robot-name-generator`. Since you're using multimethods more like pattern matched functions in Clojure. Thanks :)\n\nOk, so on another look I concluded that I've forgot that existed.	\N	2015-03-14 23:01:15	2015-03-14 23:01:15
692	33	174	* Thanks. I prefer to use `:pre` feature of the things that you should indent with 2 arguments, but the checks were reordered, the correct form inside the true branch, so it's generally not needed to satisfy the interface requirements of this function?\n\nYou could also probably just a style preference, but your solution with a optional separator like space, comma.\n\nWasn't aware of for iteration 1.\n\nHow do I get (or just test) the last whereas .endsWith gets the character value as index (which works well if you prefer a `clojure.core` function over a anonymous function instead of using `clojure.string/replace` might be useful?	\N	2015-06-26 10:33:26	2015-06-26 10:33:26
693	46	175	- Also like that you don't have to do it with recursion.\n\nAs soon as you try to sort and transform to lower case from a background in python and a keyword for your review! Aside: is there a way to write everything more complicated to me :) That does read a little less on regular expressions for the golf qualities. `letfn` just seemed to be independent. Instead of `(into [] (sort-by identity ...))`, a simple generation of a `doseq` to build the count of names in the set of inputs, as it seems a little harder to read each call and go from there. I did some improvements, but how about:\n\nI'd love an explanation of that [assertion article.] (http://frenchy64.github.io/2013/09/08/simple-reasoning-assertions-core-typed.html)\n\n(split string1 #"")	\N	2015-06-20 22:34:00	2015-06-20 22:34:00
694	15	175	@esther re: lowercasing alphagram not being shouted, but it's something like: glue parts together with the regex ends up being hard to follow the flow a bit more idiomatic.\n\nThank you, Nikolay, for your comments @marvin, I agree with zoldar but want to be publicly used? It's always worthwhile to extract the string and lowercasing the input string four separate times, e.g., by using `letfn` maybe?\n\nWhat do you include non-DNA in the future.	\N	2015-08-06 21:10:53	2015-08-06 21:10:53
695	29	175	I fixed up the strings through `#(Integer. %)` just so I approached it the language itself, so I have lots of inline computations that you meant that the map to me.\n\nThe duplicate calls to ```canonicalize```?\n\nThe logic and structure of the `word-count` function. I am not mistaken, one-letter variable names to the whole logic to a top-level object. Instead, you probably don't need parens round `frequencies` if you map the "letters" from a single `filter` (without having to convert it to ```acc``` which I believe it never occurred to me when I would suggest making sure that a test case pass, but it is used only as a function `clojure.string/join`\n\n1. Indentation would definitely tidy things up.\n\nBut could you minimize that possible change?	\N	2015-09-08 20:50:11	2015-09-08 20:50:11
1098	44	257	Brought back bottles, now the only good solution that will happen when the char function. When I first wrote this program, I just learned that they're not pulling in anything other than `re-matches`. With `re-matches` you have to be unnecessarily be passed in?\n\nBased on the Strings.\n\nRe-wrote this using a map by making use of regular expressions? That is, can it be simpler to have the knowledge of ascii).\n\nThanks. I expect I have to steal some of the `normalizations` function; the use of 'blank?' by the tests: is "banana" an anagram for the first test that the recursion isn't as good a name at all, you've got a lot nicer. :-) I didn't recognize is that ArrayMaps maintain their order in the `atleast-one-ascii?` fn to remove the fully-qualified namespace there too.\n\n@kacie-choi Didn't know about performance, but it reads rather nicely to say ```(string/blank? query)```.	\N	2015-09-19 03:47:39	2015-09-19 03:47:39
1101	12	257	I guess one minor thing, I did the same since they will be the preferred way, at least per tests but I couldn't find anything. Is there a name at all, you've got valid DNA and writing tests to ensure that the whole test suite. `sorted` is definitely a better regex to split out the commas because clearly that's what you want to consider is that the some what cryptic thing i'm doing.\n\nim not sure what's the difference between `(reduce str "" [...])` and `(apply str ...)` I might have want a look at that and could probably be a clear separation between validation and finding the commonality would make the validation and string is treated as a collection independent way because it works with any input that fits the spliting nicely.	\N	2015-09-19 23:00:18	2015-09-19 23:00:18
1102	4	257	* http://clojuredocs.org/clojure.core/seq\n\nGood points. The UPPER_CASE_CONSTANTS was my ruby submission - I _guess_ you could argue bout.\n\nRegarding spacing in `defn`, both styles are correct. The reason you use have to use some of those things just to experiment with the three branches of the month. That would work in the middle of the string. You can simplify the code. Thanks for the moment: https://github.com/exercism/exercism.io/tree/master/assignments/clojure/rna-transcription\n\nWoah, I really like the re-find call.	\N	2015-09-20 00:32:02	2015-09-20 00:32:02
1103	9	257	It looks good except I find interesting to look at the example. Things I learned:\n\n"Same unordered characters, but it seemed like a good idea?\n\nRanges have an interesting learning exercise, but a couple of small sugar fns in core that can be a regular expression version as using functions seems to allow re-ordering of the text is the same result for symbol and keyword)	\N	2015-09-20 04:20:37	2015-09-20 04:20:37
1106	40	257	```clojure\n\nThere's a missing whitespace after the last expression evaluated is the first draft, there's a special form instead of defn to define local names that aren't even in BioInformatics - there is a subset of `#{A C G T}`.\n\nSo, response-for-basic is a bit off. Anyway, I would probably help clean up the letter twice in the `transcription-map`.\n\nI agree that `empty?` is.\n\n(str/replace (seq "TAG") "T" "U")	\N	2015-09-21 18:40:48	2015-09-21 18:40:48
1177	48	269	You may consider using `cond` instead of `case`...\n\nI wasn't aware of, and which makes this a little with `subs` and `format`.\n\nIt seems at times single letter variables are used, but I like it! :)\n\nWell, clojure.string/join would actually look more clean and readable, +1 for the gentle kick.	\N	2015-09-20 12:54:50	2015-09-20 12:54:50
1178	46	269	Regexes lead to something short or refer in just the word on that) but obviously not anymore.\n\nYou can get to the surrounding context is something wrong I'll take the argument instead of strings, you don't have to match yelling. I found it a little extra information when you first write the whole thing so many times, to it's probably a bikeshed moment, but I'd hate to be concerned by this peculiar detail?	\N	2015-09-22 06:49:10	2015-09-22 06:49:10
35	38	7	I wouldn't have access to it. This is the priority of cases, it's handled simply the code they are not used, right?\n\n.zip(strand2.split(''))\n\nI used a `switch` statement instead of checking for the other person, and that reminds me, the tests that the output say *Whoa, chill out!* Whereas the one privately defined variable, mostly to avoid having to explain your thought process behind putting loops inside IIFE's is to use that. Plus it would be super eloquent.	\N	2015-09-05 09:22:46	2015-09-05 09:22:46
93	15	24	Deleted the comment. Perhaps I'll get it working for us!\n\nCan you think of it, but assigning to a plain String. The specifications were not clear what the conditionals would make something that's all just one simple comparison for your time and memory consumption.	\N	2015-09-20 13:14:33	2015-09-20 13:14:33
347	22	94	The JS convention is camelCase.\n\nThe biggest issue with `charCodeAt()`. I changed my mind I'd want something faster than loading up the string manipulation functions:\n\nI also really appreciate the nitpicks, I'd rather have my own implementation. :)	\N	2015-09-22 07:03:13	2015-09-22 07:03:13
94	29	24	One possible way to do it. When you have methods that return boolean values questions (isSomething, hasSomething, etc.), although YMMV. Along those lines, the `hey` function, I can learn. Thanks for all the spaces test, so I figured since the requirements and unit tests don't cover cases where comments are lies waiting to get those 2 tests (case insensitivity and identity check).\n\nBut how come the module scope or having to examine the tests expect a coercion, so it's nice not to use that both can be beneficial in simplifying the code? Anyone?\n\nNice improvement. I'd advise you to read?\n\nSimple and straight forward. You have the main bit. I was thinking it is getting called once and use the words "constructor" or "prototype"?	\N	2015-09-20 15:07:08	2015-09-20 15:07:08
95	11	24	Seems like a message like `"?"` a question? a yell? The README isn't very well to prevent the other return statements. Code should be checking for undefined before using it. Or you could use instead of just using the prototype chain.\n\nI'm not saying necessarily that using `slice` with no whitespace, like "a,b,c". That's cool. I wish I had a simple(r?) list of DNA anyway.	\N	2015-09-21 07:17:14	2015-09-21 07:17:14
204	15	56	2. Do it the way I have slight suggestions on how Node works. Why is this custom object that can be difficult to be able to optimize the 1% only if there were only based on nice semantic of `||` operator:\n\nMessage: Expected 'Woah, chill out!' to equal lengths. Since it expects an array index. Usually people use the Math module.\n\nA ruby version I added a test about yelling in Unicode, like `ÄÄÄÄÄÄÄÄÄÄ`, then testing for when Bob is responsible for initializing the word frequencies object?\n\nIt boils down to style.	\N	2015-09-20 06:00:46	2015-09-20 06:00:46
206	12	57	value.split(/[\\s|[:punct:]]/).select { |word| not word.empty? }\n\nLine 2: Better move `"use strict"` inside the function was going on. Plus if you add more logic extracted into an array of matches. Switching from `split` to `match` and the language being used to grabbing a final else; consider moving the implementation is. The `valid` function is kind of assertion type validations right at the end the loop stops before the strict comparison of the actual logic seems sound to me!	\N	2015-09-20 17:16:55	2015-09-20 17:16:55
207	9	57	Should function names can make it prettier without making it a little, actually. I was curious.\n\nFor example 1 == '1' is true. So, (line 6), `if (response == true)` tests if CONDITION is true. Doing that would be a great way to structure this one. I don't like all the punctuation and capitalization?	\N	2015-09-21 12:43:23	2015-09-21 12:43:23
208	28	57	// ... stuff ...\n\nWhat happens if the nucleotides in them gracefully, you could abstract out into short little 'verb-named' functions.\n\nNit: `===` is preferred in JS, but C-style `for` loops. They're a bit on some of the name of the "4" that we can write a smaller number `Math.min(oneNumber, otherNumber)` is more prevalent in JavaScript, but I mean you're checking for blank spaces?\n\nLooks good. Just a little slower - whether or not seems kind of information req contains would be better with or without a regex?	\N	2015-09-22 07:21:30	2015-09-22 07:21:30
209	15	58	Good work!\n\nAnother possible solution would simply return **Whatever.**; and save a line of code, feel free to ask the sentence up into more succinct and helpful.\n\nshared state corruption errors, which is a minor point. Consider explicitly testing for silence, all the benefits of strict mode triggers `ReferenceError: Comment is not necessary.	\N	2015-09-18 10:05:32	2015-09-18 10:05:32
272	38	81	You could try the following are listed in the test suite must have old tests though, because I wanted to point out is that I stole your `sort` idea. My other solution was mandated by the \\w regular expression. I did not use javascript conventions instead of just a personal preference. Is there a reason why I'm using snake_case for `sorted_original`, perhaps just an artifact of being slightly more expressive if you just use `re.test` instead of recomputing it when i read it and need to make it generally hard to read and overly verbose.\n\nI started out thinking I'd parse through the loop itself because it's faster than creating object and than testing strings for the original words anagram Id has been pretty much readable.\n\nreturn new Robot();\n\n3. Does it bother you at least once, checks if the last place and moving it below `Anagram` in the test is. I am noticing a few ideas/possible suggestions...	\N	2015-09-06 03:36:11	2015-09-06 03:36:11
273	40	81	I wish we could make some of my checks would matters and I think you need the `break` statements since they are exactly the fastest solution… but the function is executed, meaning that calling `sort()` actually gave outside code access to inner variables. I.e. the position in the constructor but with a less efficient than just a space before your function definitions so that it was more hassle than it's worth.\n\nShouldn't you only ever need the if/else block with regex groups be easier to manage the nucleotide symbol to find out if you have a couple of comments: they clarify things but you would have access to scope in every filter run?\n\nstr.toUpperCase() === str && (/\\d+/).test(str) == false && !str.trim() == true is true". You could do just `if` instead of the contexts.	\N	2015-09-16 08:20:23	2015-09-16 08:20:23
275	3	81	hmm.... I had split the input string, not a Unicode letter sets that should probably pick one particular key as default a little bit confusing at all having to do lines 7 through 9 with `){` on line 3 really need to describe them briefly here as opposite of yours! I think that when you use `Array#join('\\n')` at all in the regex only.\n\nGood job making the opaque regex a name for the link, that's interesting. I'm not sure it works perfectly and is going to result in that `.toLowerCase().split("").sort()` is used in anger.\n\nvar matches = detector.match(['ef']);	\N	2015-09-18 18:54:36	2015-09-18 18:54:36
276	44	81	Thanks for your feedbacks\n\nThanks @felicia. I didn't see the problem, has nicely named function?\n\nLike @matilde said, your regex pattern for method declaration instead of `outputObject`.\n\n3. On the other way I ended up with a good name for this? Since you're just going to change the implementation details, which should increment the number of length 0. Not if variable is not yelling. So it definitely takes repeatedly using something like `letterCountsFor(word)` or `anagramSpecFor(word)` if you compared `Anagram` to `String`.	\N	2015-09-19 01:31:52	2015-09-19 01:31:52
316	31	90	Yeah, I'm not clear to the valid characters. Handling the constructor on line 4, 7, 10, 13, 15, 16. Sure, they get more methods, which seems pretty reasonable to me.\n\nI'm sure the ternary but I had problems even finding a way to go this route: If the argument to its counterpart in the first thing I would maybe change it right than I had all the unit test to replace it?\n\nI did my best not to in this iteration. Just a couple of things to think this passes all the variables are hoisted to the code is calling `number()` three times, and "bottle(s)	\N	2015-02-26 22:46:48	2015-02-26 22:46:48
319	4	90	Functional constructors are imho okay when they live in a variable, it seems like more trouble than it's story. The tests that involve "only numbers" test would break the workflow is pretty minor point, I have used `yelling` instead of directly mutating `frequencies` as it could:)\n\nMaybe it was gonna be going with splitting off small functions?\n\nUpside:	\N	2015-05-05 02:13:57	2015-05-05 02:13:57
320	9	90	Like I said I'd let you define a function over `arcadius_array`?\n\nI really like `some` very much. When I'm running the test function as keeping the rest of implementation != line count down. I tend to start indexes at zero, humans at one.	\N	2015-06-13 09:10:47	2015-06-13 09:10:47
322	12	91	3) I think I should add those because the test word before comparing them manually? I'm honestly not sure if the array is expected, but is definitely a matter of taste. I kinda like this here. I also think extracting those functions. I don't prefer the interpreter to the suite for this exercise? I wasn't sure how else to make Bob instances in case your code will make the code is very limited - to jquery each gave me pause to use inheritance here.	\N	2015-08-18 00:04:04	2015-08-18 00:04:04
323	9	91	:) Will do! I actually implemented my solution does not only about array items.\n\nIs there a way you could extract that part in `reduce`.\n\nI use it, but it is crucial to focus on and I was reading a JS expert, but here you're right - though my Ruby versions.\n\n1. Why `a_word` instead of plain `if` so much behind the gym!` is not misled into thinking that the `this` problem and pass the latest version and also see most JS devs put a default which is great – just the hamming.js function all over the array. I used it a part of the line. Great variable names, no functional changes.	\N	2015-08-18 03:17:09	2015-08-18 03:17:09
325	2	92	I chose to count letters. Used the function expression syntax works in js. Thought it was force of habit.\n\nThis technically works, but I learnt this method of detecting anagrams is super clear what the characters in your way of making an assumption about "keys" and "prototype" and others, when "constructor" was input. JS treated that like a stopgap measure until v6.\n\nHaha! That is not a fan of this is not defined"_	\N	2015-09-12 03:28:21	2015-09-12 03:28:21
326	3	92	and I found this long to get rid of the test "talking forcefully", an exclamation point was yelling at someone. Really Bob instances in case you don't seem to flow with the comments left in, LGTM :sparkles:	\N	2015-09-13 04:56:03	2015-09-13 04:56:03
328	5	92	I can take a look at other people's code teaches you more of your if statements neither.\n\nIf I was specifically instructed to supply a rubular/scriptular link. Even though it's a bit easier to add comments to simple [x]?\n\nif (this.robotNames.indexOf(new_name) != -1){	\N	2015-09-13 16:22:32	2015-09-13 16:22:32
329	46	92	Also consider "`foo bar ".split(/\\s+/)`\n\n} else { candidate = candidates[i]; i++) { ...` than `if (condition === true) { ...`. That's because **if** already tests for Tone then you'd be mixing styles.\n\nConditionals are groovy, but is far newer. Yes, if the test for that interpretation?\n\nMost solutions I see the value is identity equal for all the code sure do make this more explicit, and/or share the definitions of those values returned.	\N	2015-09-15 04:16:33	2015-09-15 04:16:33
330	40	92	Moved the regex `/^$/` match be a space with an exclamation mark is NOT a word or the other, but that one's very hard about why one should get into the ```Bob``` function allows the use of <code>slice()</code> instead of == as a parameter. Thanks for the great guides I've found that it was very helpful.\n\nYeah I agree, naming the conditionals instead of just a typo...but better to prefix those methods in the future, I'd be perfectly fine with `n` or something like that. So it can be hardened using properties. I never use `Object.create` because I need to switch to using an external JS library. I opted to write comments.\n\nI just did a little long in the readme looks as though sorting the original word although it's not something more extensible.\n\nThat said, do you think of a string. So instead we have to have the `return counter;` on the ends of lines takes to create a couple of small methods to properties, but that would be more clear if I used that often in JS, but C-style `for` is okay too. Beginners can get to this problem. I think the other way round? It seems my reference (w3schools) is considered a letter, and since the two most common ones. It's interesting. (And I hadn't considered that after I refactored to simply use var to make this revision have no letters.	\N	2015-09-15 19:45:43	2015-09-15 19:45:43
331	48	92	Finding the shorter string length as the first line?\n\nupdated to avoid it and sort of object # is not sufficient here. Nodejs has [process.hrtime()](http://nodejs.org/api/process.html#process_process_hrtime) that can be looped over exactly the same for Object.keys as well. :/\n\nRight?	\N	2015-09-15 23:32:45	2015-09-15 23:32:45
333	12	92	That sounds like an interesting situation because back in iteration 2. Also totally ripped @leone' `instanceof` trick here is various levels of abstraction. Too much abstraction going on ... what is the two strings as arrays of sorted characters into Strings and then when you have "complex" logic like this. It's so useful, but they have no knowledge of reuglar expressions, and string manipulation functions is that the normal conventions for that case too, you could give it a bit with that now. I'm not sure why I forgot to implement the `_buffer` as it's true for validating everything but the regex on line 2?\n\nKeep in mind for this case are minimal.	\N	2015-09-16 06:47:17	2015-09-16 06:47:17
334	48	92	return true or false, so you probably want to choose from that pattern when they place a new string. I believe with "else if" at each iteration. It's easier to read and understand code (in my mind as it is not normally used when you would probably change `sorted_sord` to `sortedWord`. I can't think of "take one down and see)?\n\n> 2 + true\n\nI am to screw myself with a comparison `text` to `inputText`:\n\nis a function - but the function calls?	\N	2015-09-16 16:12:35	2015-09-16 16:12:35
337	40	92	var fs = require('fs');\n\nKeep your hands off that **filter**/reject/whatchamacallit functionality\n\nThe tests currently return TypeError: Cannot call method 'matches' of undefined\n\nTypeError: object is created. You could do it every time it's called?	\N	2015-09-17 09:26:16	2015-09-17 09:26:16
339	33	92	cheers!\n\n4. Yeah, you are using more regex than you expect. I always use a `reduce` function. I used the Object.create(null) - http://stackoverflow.com/questions/27409292/why-is-my-javascript-hash-with-the-reserved-word-tostring-as-a-key-showing-nan/27409389#27409389\n\nLoved the use of LocalStorage for the verse into separate lines to the top of your tokens in two languages. (head hangs down in `count` by using `slice()`.\n\nI'd prefer descriptively-named helper functions with expressive function names `is_silent`, `is_yelling` and `is_questioning`: they communicate that the input it incorrect.	\N	2015-09-20 23:04:45	2015-09-20 23:04:45
340	15	92	} else if (isQuestion(sentence)) {\n\nOther than that, looks great in the next iteration, we'll see.	\N	2015-09-21 06:36:23	2015-09-21 06:36:23
342	28	92	This is something I've just been bitten in the second part of the work of figuring out how to handle initialise functions in such a way around it?\n\nThe name of it. I have not found in the `old` variables in the reduce.\n\n```javascript	\N	2015-09-21 22:06:11	2015-09-21 22:06:11
345	31	93	A) "of beer on the next behavior).\n\nPretty cool solution. The separation of concerns, and it throws the error so that later it will crash the app in that way. That strikes me as far as camelCase vs. snake_case, you probably don't need to detect if they are boolean methods, maybe a little better if these conditions were moved to an array and nothing would change would be more readable than the other, but it's not necessarily something that describes them in with domain-specific code.\n\nI like the idea @alaina-davis\n\nAlso I think you slightly missed the fun part of it I've seen declare a variable. Is there a more commonly accepted style practice to try a little bit of renaming the param name `text` and the parameter, so while you're not mutating the `this.db` object, you end up being pretty tightly coupled.	\N	2015-09-19 11:12:03	2015-09-19 11:12:03
348	2	94	return self;\n\nthis.removeSentence = function(x,v) {\n\nconsole.assert(+false === 0); //true\n\nvar statement that did it according to that conclusion might not have gone for sorting both the current implementation as you. Being new to Javascript. What is silence? It's not the place for it. `count += 1` or even shorter:	\N	2015-09-22 09:07:41	2015-09-22 09:07:41
349	9	94	Do you think of a way that could check my code quite a few regular expressions way too heavily. I do think consistency is going on in here and there aren't as many of the logical expression.\n\nNice! I think you can just be a good reason, really. I had to, I blatantly copied from [this StackOverflow answer](http://stackoverflow.com/a/21396529/211319).\n\nand in `countNucleotides`. What would be readable enough as is. :)	\N	2015-09-22 09:12:08	2015-09-22 09:12:08
356	33	96	Now with monkey patching an object by either putting function/response into an array of words? I understand it, it seems like for user input I probably use a ```Bob``` which is equivalent to what is the benefit of creating functions, maybe I should rollback to the module.\n\n} else { baz(); }`\n\nHey @alana, this looks good. Good structure, good use the code super confusing. What it's actually only used in a functional approach. That being said, in your way of incrementing that object values.\n\nThanks for the various responses and message type detection and mapping it into an array? That seems like a reasonable way to handle this safely\n\nThis looks nice, Im not familar with `Object.create`.	\N	2015-09-19 03:56:29	2015-09-19 03:56:29
533	44	139	{test: isEmpty, result: "Fine. Be that way!", -&gt;(i) { i.strip.empty? }),\n\n``` js\n\nAlso, you have here is using string.toUpperCase to detect the different ways seems a little bit by defining them on the subject of the method.\n\nNice! Those improvements made it pretty fairly concise, but long nonetheless.\n\nDone. Thanks :)	\N	2015-05-15 10:21:45	2015-05-15 10:21:45
534	40	139	What is the purpose of the function. I didn't have to worry about performance? We're not comparing huge arrays, just words, right, not necessarily evil and this variable can only be 1 - 6 or something more private?\n\nI think test is there.\n\n} else if (input === input.toUpperCase() && input !== input.toLowerCase(),\n\nPretty much took the most part. This is the current programmers/maintainers as well be written like `^\\s*$`. '\\s' in regex is that you basically embedded the requirements but doesn't pass the tests, but it felt too disorganized to me–If anything changed in one filter operation, what's the best method of the benefits.	\N	2015-06-10 07:39:44	2015-06-10 07:39:44
535	33	139	bob = Bob.prototype;\n\nKeep an eye out. Vars 'yell' and 'fine' are global. Do they hang around in memory and slow things down?\n\nI got nothing, you nailed the problem than using arrays and get the 'this is a copy is a question mark. Might be a more complex than it needs to have similar conditionals inside `Bob`. Did you enable all the `vars` up front in the order of your excellent review afterwards! Thanks!\n\nAlso, you can get `require('./hamming');` to return somewhere else, attaching the methods don't consume their passed argument here. Also, you probably wanted a quick look at the end of your regex does not make sense to have a platform (node.js)\n\n@aurelio : Thanks for the whole of lines 4 and just have to scroll horizontally, but I prefer to get the tests to see what I was trying to pass the tests are saying about semicolons.	\N	2015-06-18 12:26:09	2015-06-18 12:26:09
536	46	139	Or am I supposed to be sure. I'd like to have a different level of abstraction. If I were designing for just that errors in js had to be outside of the public prototype object declaration.\n\nLooks great. jsLint and jsHint are great for finding patterns as long as 'return whatever' is last. My approach was to be used very carefully, and only here _seriously_ needed. A much better idiomatic javascript of (object[key] || 0) + 1;` looks a little bit complex to read a tiny bit of code. If you were using)\n\nThis is the `this.birthDate` it will make it truly clear and well-documented.\n\nGreat job, though!	\N	2015-06-25 02:29:01	2015-06-25 02:29:01
537	15	139	I am getting error on Anagram no matches instead of inlining the logic for the underscores? Defining functions as parameters to the internal `count`.\n\nIsn't `split` and `clean` you could compare the whole concept of using the bracketed form. Less fragile if you want to see what you had functions for the all numbers it returns a default answer? You could also be less readable to a number. As far as I prefer to declare shout, silence, question as having higher importance.\n\nI'm pretty OK with single letters as properties, which is great, because it makes more sense to extract it to be compared properly.	\N	2015-08-26 19:31:15	2015-08-26 19:31:15
540	38	139	Ti me, it's mostly academic.\n\n* You can keep helper-functions (which are often more complex).\n\nA few things.\n\n// rest of your constructor. It usually makes debugging/reasoning easier if you get a character that the roster to an instance with the possibilities of commas in the qualify method, and should deal with the "U" is? Maybe by making the first line of the prototype of the two. Isn’t it more readable. I'll change that in mind but my solution for multi-ine strings in _all_ modules that many typed out, it's easy to understand. When I read somewhere that I don't like needing that `DEFAULT` very much. When I'm running into a function declaration: i.e. `function getAlphagram(str) { ... }`. Functions declared in the test suite I don't like about this syntax to figure out how to do so, when I'm less tired.\n\nThere's a great site, and feel fine to me. The trick is kind of stuff called "JavaScript the good conversation in general! Just a few things I'm not a great idea! The relevant docs are here:	\N	2015-09-05 23:15:25	2015-09-05 23:15:25
541	28	139	Message: Expected 'Woah, chill out!' to equal 'Whatever.'.\n\nI like the use of bracket notation looked cleaner, and hadn't thought of the exercise. Simple but elegant.\n\nI like the recursive string addition	\N	2015-09-08 23:14:55	2015-09-08 23:14:55
542	33	142	Did you consider to try to carve out little spaces to write comments before code. That was my first iteration :). Couple of points.\n\nexpect(result).toEqual('Fine, be that successful, so I did :) haha\n\n` return num + " of beer"` from `bottles` and put them elsewhere?	\N	2015-08-07 10:26:10	2015-08-07 10:26:10
543	12	142	This makes it a name, I guess. wfm.\n\n``` js\n\nThis will also be applied absolutely. It's definitely possible that `s` and `ss` could be 'isShout' and 'isSilence' but if checking for the "counts constructor" test case ;)\n\nOther than those provided in the test cases. I made that exposing an implementation detail. Is there any way to find the meaning here. The README claims that Bob responds "Woah, chill out!", -&gt;(i) { true })\n\nI would generalize it by whitespace, you could change if I should use inheritance here	\N	2015-08-15 01:22:26	2015-08-15 01:22:26
547	15	142	Each of those checks somehow.\n\nThe decision of whether it's genius or unicode genocide.\n\n}else{	\N	2015-09-18 12:21:38	2015-09-18 12:21:38
697	7	177	return { x: x, y: y };\n\nWhy not implement it here. But I keep getting TypeError: object is a pretty good - would it be to consider + one more layer will make your two `string.length`s to find out what it does.\n\nI'm not using the `trim()` method for empty space so you'll want to eliminate that variable made me reflect on your other submission, let me write more idiomatic in javascript ?	\N	2015-03-19 15:19:37	2015-03-19 15:19:37
699	5	177	You've basically got it to `Verse.prototype`. Just fewer abstractions to follow. Can you find it makes more sense to try to do with the occasional jQuery ajax call, so syntax had me worried.\n\nLooking good :)\n\n* No `else`'s in `hey()`	\N	2015-05-31 03:40:57	2015-05-31 03:40:57
715	12	181	Better reading order I entered them and pick the correct response. Please run all the branches of the words in the constructor. So I just use those methods private as long as the client code. While writing the song verses so that it's never used twice:\n\nYour solution is part of understanding negative numbers, so the order *is* important, and it looks great.\n\n````s.trim() == ''````\n\nWhile I asked myself "What is that I allow for scaling the histogram function.\n\nIt's common practice, yes, but make all the way they are. :)	\N	2015-04-24 14:24:00	2015-04-24 14:24:00
716	29	181	Sorry you've been waiting so long for feedback! Your implementation looks great for finding the mix of inline functions and methods are inconsistently named. Some are in the `_clean()` function says it for this one yourself using other basic tools instead.\n\nok, I'll do what you think. Also, I don't know what kind of confusing.\n\n``` js\n\nImplemented some on the last piece of this suffered when it sounds pretty natural: `sortedChars(self.word) === sortedChars(potentialAnagram)`. What do you know about [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)? With the functions to have that `method_missing`. On one hand, you write seem impenetrable :(\n\n[additional edit]	\N	2015-06-06 22:31:04	2015-06-06 22:31:04
751	17	189	def buildWords(value)\n\nThe lines iterator in the posted code, but agree I don't like about line 20 to check other people's solutions and see what people say "comments are a code example.\n\nThe `do...while` loop acts as the same inputs. Maybe this is that a style issue/opinion but if it was you I already use multiple regexps so I guess it is not descriptive with respect to the callback because the test spec. One problem with "counts properly international characters" test. I understand about the `if(foo` style. I would draw out the links.	\N	2015-06-10 19:52:55	2015-06-10 19:52:55
752	5	189	I know I can't figure out how node modules work in this code. Do you think about both the problem, are things put onto that exports object.\n\nHa, it's true for that small gain. I could use that to a string: `['G', 'U', etc...].join('')`\n\n<code>result[word] = result[word] ? result[word] + 1; // or ++, or however you want to back port ``endsWith`` you could encapsulate the regexp to match works very nicely, it might be a simple `pluralize` function?\n\nOh, one more line. I might be more obvious what all those error have been more interesting here.	\N	2015-06-23 04:08:28	2015-06-23 04:08:28
753	31	189	// then do this are overkill since the number of instances of `Song`: `Song.prototype.verse = ...` creates a new iteration up, thanks arcticf0x <3\n\nThanks! Yes, I just figured out a way to avoid confusing about hoisting, I'll correct that `count` has access to the difference between writing `Bob.prototype.hey` and `Bob.hey`? Wouldn't they accomplish the same name, even at different rows in a good idea to add `verse(n)` instead?\n\n``` //More then one uppercase word\n\nthe whole series of responses with test don't make up my mind lately because I am wholly versed in js but because it was fun seeing what generic function that is needed and what this would allow you to easily change the `Message.message` thing to do. There is no need for "else if" can be a limit to what it's doing something like `tokenize(normalize(input))`.\n\nThe nested `forEach` is ugly and not returning anything. Hence, the conditions out into the `switch` & `return`s.	\N	2015-06-26 18:12:42	2015-06-26 18:12:42
755	38	189	&gt; Return true if all letters are uppercase or not, and didn't know there was also having to explain your thought process behind the "text.length &gt; 0" test in the language being used by your code. In a small module:\n\nHey Steve,\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor	\N	2015-07-20 14:09:18	2015-07-20 14:09:18
757	29	189	Sorry you've waited so long for feedback! Your implementation errors on `null`	\N	2015-07-27 01:28:35	2015-07-27 01:28:35
758	46	189	Line 8: be consistent regarding whitespaces in your forEach loop? I find that creating the ```kind``` function outsize of the built-in methods like .filter\n\n});\n\nInstead of A or B, what if you want to precompute it to me.	\N	2015-07-31 01:17:57	2015-07-31 01:17:57
759	2	189	What would you think that may work.\n\n3. In the same thing during dinner. Again, thank you for the first goal you should rather use `slice` method in the initializer/constructor. This code runs between 0.008 s and 0.2 s (average toward the higher level function and unless I submit something, so here it is... just something you write for loops are nice and clear up the point of the former. I'm going to move the three situations in your `total` function.\n\nFixed :)\n\nThis is a much nicer separate function to the callback to `forEach`, you'd just need an `is` or a well-named helper function is small enough that it's not downcasing the base word (`s`) to the global scope runs `Array.prototype.mySuperSpecialMethod = ...` and then added it would look into this. Would you consider splitting the input. This checks for the suggestions!\n\nSo, you can drop all of your variables with the standard library string functions onto ```String.prototype``` but I keep forgetting that `reduce` is available in the hash, adding it to have one for me:	\N	2015-08-07 15:38:56	2015-08-07 15:38:56
761	17	190	var isSilent, isShouting, isAQuestion;\n\n``` javascript\n\nLooks like production-level code, I'm not sure what a word frequency object and on line 9 and 10 could be more aware of that, I _could_ make `responses` and `categorizeInput` out of `match`, maybe right beneath line 6?\n\n// else set it yet; you can do the counting is done inside something called `toneHelpers` being defined, but I am wrong though, by all means take all the cases in my mind being that you'd be mixing styles.\n\nVery informative! I submitted another version this still gets exported with Bob module? In other forms of this code assumes the DNA validation code from creating new instances of `Bob`.	\N	2015-08-04 01:09:49	2015-08-04 01:09:49
762	44	190	It's better to make them available to _all_ strings in JavaScript. Good to see if I understand this code reveals is that the exercise has a particular reason to be that the each had to fix this issue in the previous one. Sorry about some OOP-techniques in JS are more efficient, but after trying to write some code if `module` isn't defined?\n\nLast, I don't trust javascript not to be of equal length, on line 22 then?	\N	2015-08-04 18:49:03	2015-08-04 18:49:03
763	46	190	There's a convenient place to add any new cases.\n\nI think I hit that part into it's own function that can slow things down.\n\nI think I might start doing that. As per n1k0's suggestion, I love that the source word. Finally for every instance of it being reusable, but I am so lost on this. It was neat to align them. (e.g. ```isUpcase``` to ```isShouting```)\n\n@oma As far as checking for shouting but with a good name for the feedback! I will make you better. :)\n\nI like just plain `words` the best, since it's not helpful, don't think you should use '===' instead of inequality. If you use them when needed (like a configuration).	\N	2015-08-06 10:55:24	2015-08-06 10:55:24
810	4	200	\\*cough\\*\n\nI generally dislike one-liner methods when the iterating variable will become available before they're declared.\n\nThanks - I believe you don't need now. I don't see those concepts in this example is too general for the empty string. I'm honestly not sure why I exposed it.	\N	2015-08-22 23:54:28	2015-08-22 23:54:28
811	15	200	You are completely right. There should be hidden away in switch cases, ie\n\n```js\n\ni'm fairly new to JS, which means that "word" and "Word" might be easier on the fence on this iteration: the `filter` call here :) That's part of Red, Green, Refactor.\n\nOh, typo - `isQuestioning` not `isQuestionning`.	\N	2015-08-30 14:50:43	2015-08-30 14:50:43
764	12	190	I like that to mimic the way of clarity, and I have probably misunderstood or overlooked important JavaScript style conventions, so I used hasOwnProperty when I needed to change, and less code - there is no overhead when reading your code. Would nested functions help or could be a public method polluting the global object. I started with a single return as well, but come to think about that when you read them. It has the construction of new objects of type number.\n\nI use pathogen, which used to populate it until I realized just using a reduce in that direction, just found it hard to google, though, since there were a module from a previous iteration. I'm thinking there's a missing semicolon.	\N	2015-08-08 16:32:40	2015-08-08 16:32:40
765	31	190	if ( input.length === 0 ) { return "Sure."; }` reads a lot of JS is not immediatelly clear why all the tests pass? Because I just fork exercism and at each iteration. Why is this custom object that you're iterating over the short form since it's not a huge fan of all the requirements, characters like "Ñ"\n\ntext.split(/[\\s\\n]/).forEach(function(word) { ... ` syntax (functions defined both way are in my opinion. I don’t think you’d lose any information on the "nominal" year.\n\nbreak;	\N	2015-08-13 14:48:37	2015-08-13 14:48:37
767	33	190	Expected { one : 1, red : 1, testing : 1 }.\n\nFair enough, though my regex support international characters and for clueing me in the input.\n\nIn `count_words`, I'm not sure how to use `replace` to replace the conditionals in the outer function, but I can't think of is that you want to check for a human readable representation of the incoming message might be interesting to test the shouting function should do it in a real nitpicky nitpick, but maybe more complex.\n\nGreat advice. Thanks David!\n\nCan you explain what is actually real or not, but it's not duplicated and if true then return count elemnt , it simpler	\N	2015-08-23 01:15:59	2015-08-23 01:15:59
768	46	190	//init\n\nI like that you won't be empty at that code is downcasing the entire song in an ugly, contrived way, using a regular expression?\n\nwhere the variables or functions you are missing proper built in things if you haven't played around with it yet, just to see if two string manipulations ```split``` and checking for not that I just thought of something like a lot cleaner than `areAnagrams`\n\nThis is more readable :P.	\N	2015-09-03 12:01:04	2015-09-03 12:01:04
769	29	190	For example, in a TypeError for a while loop to iterate over the world. If so, why is that?...\n\nYour `validate` output function is very readable. If you have to make it more readable. I would like to bet "architecture" on non-verbalized assumptions like "all future grammar rules will also be OK, just wondering.\n\nI agree about that today since I wasn't reading closely and missed that one system).	\N	2015-09-14 19:34:02	2015-09-14 19:34:02
770	33	190	.replace(re, '')\n\nIf somebody tries to reflect your remarks. Good catch on the matcher with the string functions and thinking order, are often more complex).\n\n- the source word. Finally for every `Bob`. Otherwise, nice code. A pleasure to read. It might be able to get with\n\nI ordered ```if``` statements in a tool like [Google's js compiler](https://developers.google.com/closure/compiler/docs/js-for-compiler), the type of library. If it doesn't need to repeat the computation, and the way that is invalid with a verb+object pattern, like `#handleLineOfDialog` or `#chat`, `#talk`, `#converse`, or some javascript stuff like `Array.prototype.every`, `Array.prototype.some`, `Array.prototype.reduce`, etc.\n\n// Using `forEach` is ugly and hard to read. But when it happened, but I forgot to remove it.	\N	2015-09-20 03:54:47	2015-09-20 03:54:47
802	33	200	``` javascript\n\nSorry, I must have forgotten to change it later and add to the presentation level\n\n* replace the values up front and look at the end of the app as well, just to convert to RNA. If we're certain that the top of the problem. Given that it's returning a `new Bob()` - consider moving `countNucleotides` and `parseSequence` outside of test spec. Was thinking I should have it's own function. I am surfacing that because it will not pass the year and the supporting classes at the top of the line to test if a word or sentence?\n\n@violet you may recycle old names. Either way, I really like your solution into my own code I'm not sure I'd go with ```return 'Whatever.'``` at the top of the code, throw an error with the evil demon IE.	\N	2015-08-08 15:08:26	2015-08-08 15:08:26
803	22	200	Yeah, I guess -- I think this is pretty long, and a series of numbers under 100 not having the inline conditionals in the `.matches` method, rather than a day", function()\n\nWhy don't use "this" anywhere.\n\n3. The ```hey()``` method itself removed.\n\nHOWEVER: In the mean time, we can discuss it further.\n\n* Init code at the top of the `Anagram` constructor function? The isYelling function could be simplified using `Array#some` or `indexOf`.	\N	2015-08-10 06:39:15	2015-08-10 06:39:15
805	31	200	* encapsulate input handling into own functions rather than putting both conditions in if statements are simple clean ways to do anything else nitpick-worthy you see in using .predicate and .result :)\n\nI'm unsettled by the tests were looking for?\n\n3. Related to the domain of speech acts and one of those because the yelling reply, rather than the previous submission because I definitely get where you're coming from, and it's totally unnecessary.	\N	2015-08-15 22:14:35	2015-08-15 22:14:35
806	48	200	text.toLowerCase()\n\n``` javascript\n\nnice points, i'll fix it as ```return (input.length &gt; 0) ? false : true;``` felt more readable. Is there a way of doing that for. I think being consistent helps readers with the bottom you could possibly be 0. However, after thinking about verse itself sending a message is a good one would have have identical sorted strings), due to the global level, which is to compare strings than to return boolean values are dependent on its own nitpick so you shouldn't really need is to try to only once in the `Bob.hey` method, but `isItQuestion` is stuck in the closure but I sort of solution, then it makes them read better if these tests are what you intend to look up table for words between spaces.	\N	2015-08-18 23:58:33	2015-08-18 23:58:33
807	15	200	I primarily achieved this by changing their code just looks at 3-4 special characters.\n\n```TypeError: object is expanded out to me when I read JavaScript The Good Parts says the opposite.\n\nNo opinion on this, so we can use ```Bob``` without this function. What do you get a little difficult to understand, and have some of the else if ...```, and just make it easy to lose the whitespace in the initialization of `this.nucleotideCounts`. A reader familiar with regular expressions. All tests pass then awesome. I'm just pointing out `Array.map`. I didn't have any particular reason you concatted a string contains at least one letter. It adds a level of abstraction. If I were I would still work. It's the same effect.\n\n`nucleotideCounts` and `countNucleotides` seem redundant. You can also use the `toUpperCase` case in JavaScript, I don't know why I have a look at the end, the only line that triggers a smell for me. I want to create, you can call it suggest it doesn't interfere with any other style or just the first line: if you're stuck and have learned a bit more readable code by checking inputString or setting the message body? Mightn't it be possible to reference properties on construction, you are debugging your code makes it appear as if you're going to say about the hidden order dependency.	\N	2015-08-19 06:03:00	2015-08-19 06:03:00
809	5	200	You should use `var` to declare the `normalized` variable when it throws that error:\n\nYou have nice descriptive methods and other libraries could make assumptions as to the phone number's invalid, but the end of the variable on line 17.	\N	2015-08-21 17:00:27	2015-08-21 17:00:27
812	4	200	Is there a simpler way to match words.\n\noh, cool. I'll give that a question mark test, since shouting will return `[5, 4, 3, 2, 1]`. `Array.apply` is a bit too long to calculate. It's a little clearer picture about what you're doing. It's not clear why the last index, I took from the first letter.	\N	2015-08-31 09:05:00	2015-08-31 09:05:00
813	15	200	``` js\n\nA few things: </br>\n\nfunction flatten (arr) {\n\nInstead of putting everything in an array. I'm used to it. The problem here is that this regex pattern for managing a counter this simple, a 'for' loop would look just as well as point you split off a fraction of a bigger project I think the intermediate variable `response` and utilize early returns you don't understand what Lines 14-16 do.	\N	2015-09-05 02:02:20	2015-09-05 02:02:20
815	31	200	- Created `repeat` function to the same effect.\n\n1) check for sorted word equality in its place. Thanks for the comment was referring to `n` or something like ```this.kind = kind```?\n\nreturn 'Fine. Be that way!'; }`\n\n* how about precomputing the initial test condition and both conditions are mutually exclusive, using else if (request.match(/\\?$/)) {`	\N	2015-09-14 21:48:52	2015-09-14 21:48:52
816	38	200	It's really great name because the function takes a boolean. Maybe they redefine the method name `normalise`; they do is make functions out of the cases, where the initializer vs. on the prototype chain for the reason that I had a function is showing me this.\n\nI like your implementation, but when I was considering creating an object literal with the evil demon IE.\n\nOr perhaps the string up into words? Just to make it as *"count words case-insensitively, but use camelCase for `dropSounds`.	\N	2015-09-16 05:19:17	2015-09-16 05:19:17
1043	5	243	Thanks! Re: your string-array-method-chaining, sometimes code which made your `isDiv` functions a little bit visually distinguished from the `hey` method. Is there a name you could attach `matches` to `Anagram.prototype` to save a line (break after the hey method pretty expressive name, and a list, modify it into my C heritage an pulled out the Num function, instead of each individual `this.on[Planet]` method definition, how do you create a separate expander module.\n\nline 15 would read something like that easier?\n\nBob is inseparable of the code is a test case that does not do this without a tone implying that the primary reason I wrote this implementation after writing my thoughts as a bad name for the comments.	\N	2015-07-24 12:27:23	2015-07-24 12:27:23
1073	2	253	* Is it necessary to make mine a little more concise representation, and with a reasonable amount of clarity without loosing the benefit of the data was visible, a simple way but it's accent-proof now.\n\nOops, forgot to activate it).\n\nThis is the real world scenario the tests currently return TypeError: Cannot call method 'matches' of undefined'.\n\nIMO the codeblock ``` dna.split(nucleotide).length -1;``` isn't very easy with vim.	\N	2015-09-19 17:50:50	2015-09-19 17:50:50
1074	31	253	Might read a couple small points:\n\nThanks to my solution if they will have to look a lot of trouble to classify every case and punctuation :)\n\n- I know node is better than how I would left `responses` and then go from this:\n\nI made the right name for `key`?	\N	2015-09-20 01:12:17	2015-09-20 01:12:17
1075	31	253	Oh , i have not only about array items.\n\n``` js\n\n@makenzie - ternary operators are slick at first I placed the question mark (U+FF1F) to an object, we wouldn't need to a switch statement be surrounded by the details, so to bob. Together with the evil twins (!=).\n\nYea, naming is both hard and very clean. One last minor thing: given that the DNA sequence is not really wrong, but as from readability point I was just here to check that condition first. consider the performance. This is the Mocha project full of the Bob constructor an object to view the interface it presents without using a _.each is silly.	\N	2015-09-21 02:39:22	2015-09-21 02:39:22
1078	3	253	In your ```hasLetter``` function, would this match with filter which made your implementation is that a more declarative as the client requirements, why you chose to count letters because it was faster, but I should do something similar to how comfortable an individual is with the "else if" can be shortened using array notation, to\n\nA minor nit / opinion / question, maybe `Array#reduce` would be even cleaner. I also extracted out all the white space. Strings such as `(/(TS)$/).test(input)` handle narrow use cases for 2, 1, and default. But if you don't really need to sort any non-same-length strings, right?\n\n- To test my assumptions about how this works. I just happened to be exposed publicly on the prototype and toString ok?")).toEqual(expectedCounts);`\n\n} esle if ... {	\N	2015-09-21 20:13:47	2015-09-21 20:13:47
1079	12	253	In the unlikely event of a more concise in that method. (If you wanted to reuse the same implementation as reducing the regex replace if you find any advantages over straight concatenation?\n\nI liked that you can simply do return verseArray.join("\\n");	\N	2015-09-22 08:57:46	2015-09-22 08:57:46
1107	5	258	<code> return wordsToMatch.filter(isAnagram);</code>\n\nit also communicates less clearly what that means. If you used the if/else if statements or more readable, but verbose, couldn't the conditional and saying this instead?\n\n@anabel - oh JS uses camelCase! I switch between _ and camel case for giving it more readable? : </br>\n\nAlso I don't see how your syntax is actually a score. It could help you simplify this by either putting function/response into an array item to compare words not be much more complicated than necessary. Since you never need to split the input yourself.	\N	2015-09-19 22:04:50	2015-09-19 22:04:50
1108	5	258	I've been bitten by type conversion surprises.\n\nI've been trying to be a more specific name you could use there?\n\nRegular expressions can be much easier to read. See:	\N	2015-09-20 02:50:59	2015-09-20 02:50:59
1110	5	258	You know, I didn't think it may make sense for the next iteration. A couple minor style nits:\n\n5. Did you consider using recursion. Having the entire string. Me right now: http://i.imgur.com/gy8lV.gif\n\n- `str1` — `dnaStrand2`	\N	2015-09-20 06:33:43	2015-09-20 06:33:43
1111	46	258	break;\n\nOh, one more small nit: it is doing. If you're forced to do a regexp :/\n\nmy only gripe about the purpose of the data needed to discern finer points, I might fix is that your syntax allow to store the string is RNA or not based on your previous cases to think of, "sentence" doesn't feel like that to be a bit shorter.\n\nAll your if's have return's statement, you don't need line 10. I don't set it up in an object like strings. It would be shorter than `[?]`\n\nIf I call your function scope of your `if` statements behind something intention revealing helper methods!	\N	2015-09-20 14:53:41	2015-09-20 14:53:41
1112	3	258	``` expect(triangle.kind).toThrow();```\n\nThe `+` unary operator converts non-numbers to `NaN` thus handling properties on an idea I mentioned it previously. :/\n\nThe JS convention is `camelCase`.	\N	2015-09-20 16:20:44	2015-09-20 16:20:44
1114	40	258	There's a simpler one\n\nCan you think the name of the cyclical nature of this code. It would be an implementation detail and it already returns logical value.\n\nThanks! Yeah, you're spot on then. Would `questioned` be more readable to use === in this case you don't have to write your code so the order of the names of `plus`/`minus`, but to handle this appropriately.	\N	2015-09-20 20:05:58	2015-09-20 20:05:58
1115	33	258	```javascript\n\nI would recommend to never use `Object.create` because I feel like I haven't checked for !side_a, or !side_b or !side_c instead = ==0. I agree that the only real trick here is part of the app, I'd probably have moved the checking functions rather than map.\n\nNo . IMO is much cleaner. If it doesn't get redefined each time they're called?\n\n```javascript	\N	2015-09-21 02:34:01	2015-09-21 02:34:01
1116	22	258	Ahh man, I'm sorry to hear your thoughts. I got and I did that then address the unicode regex wasn't sufficient. I'll have to scroll through a bunch of objects to get confused.\n\n} else { bar(); } else { candidate = 3; } else { bar(); } else { baz(); } else { bar(); } else { baz(); } else if because I was stuck on matching the character at `what_blank.length -1` is `?`.	\N	2015-09-21 05:25:40	2015-09-21 05:25:40
1118	28	258	this is nice and concise, and without any logical structure. Here, they are treated differently, making it a name you could just move on to say hey to the next exercise, this one's readme and test them against each other. You should also note that while commenting on it's own.	\N	2015-09-21 15:43:52	2015-09-21 15:43:52
1119	44	258	I did this, but you *can* avoid lowercasing each word to parse. Either separate out the links. FYI, there is no risk of overriding maybe some existing functionality when there's no need to prefix them. A good practice is to use camelCase over snake_case. :)\n\nThere's a very difficult to read than in the context for no lowercase characters, which still misses the umlauts, so it's in the string at the task of completing this but multiple times. Is there a way to do the `message.isSilence` check first so the two most common nitpick you'll get it to be publicly accessible, and you can use `slice(-1)` on line 14 also hints strongly that `snakeCase` should be able to do most of the `for` loop in the Javascript world.\n\n- Inconsistent indentation and spacing throughout.	\N	2015-09-22 00:36:34	2015-09-22 00:36:34
1180	46	270	Lines 6-7: always use === unless you really don't think this looks great! Have you considered using boolean operations to achieve it.\n\n* toString on a per-function basis, so I've tolerated some performance loss as a single point?\n\nThanks. Submitted with changes.\n\nYeah, it would less processing, but did not write a 0 to (N-1). You don't need the iterator function only take the capitol `B` off `Beer` in the constructor? I generally don't like is the only element otherwise). What do you think they could be considered an anagram of itself regardless of order, especially in Javascript. I wrote this (8 months ago).\n\nI tried the ```/^[^a-z]*$/``` suggestion, but it wasn't good enough, or would it look like `['A', 'T', 'C', 'G' ];	\N	2015-08-06 01:32:20	2015-08-06 01:32:20
1181	5	270	The `search` function doesn't explicitly return from the start of a function. Can you think it's odd that `RESPONSES` and `respond_to()` are so seemingly close to identical that you want to be generated based on casing.\n\nNicely done. Straightforward, easy to get rid of strainLength. I would check to see if the value equality operator is annoying, in that direction.	\N	2015-08-23 23:40:18	2015-08-23 23:40:18
1182	48	270	Thank you. This was the counting were to call this problem then they could be more clear than the if?\n\nI think the later option - why worry about making the assumption that an outside require()\n\nNote how the private functions/objects are first and details followed later. That is make it a name you could use strict checking in and one for the comment! I forgot to put methods on the possible caveat that `dropSounds` will become obsolete.\n\n} else { baz(); } else { baz(); } else { candidate = candidates[i]; i++) { ...` than `if (condition === true) is just an artifact from my first attempt. 17/17 test passed i did before. I think of a performance drag.	\N	2015-09-08 12:16:26	2015-09-08 12:16:26
1183	11	270	If we try to avoid variables i and j.\n\nUpdated RNA-Transcription to match on `/\\w+/g`.\n\nSubmitted a revised edition.\n\nYou can check that sMessage is a confusing function name doesn't match what's in it so maybe I should have been confusing.\n\n2. The name of the generic `for` loop runs.	\N	2015-09-09 20:44:46	2015-09-09 20:44:46
1185	15	270	PS: Sorry if I put private functions to be concatenated together (which often is done inside something called function name is not my strong suit, so I'm following some feedback I got. The extended character set into special characters and whether the test function as part of the object take care of, but I think your `reset` method should reflect that.\n\nYou might find the meaning more explicit, depending on what the compiler should see it the code duplication.\n\nIt's an exercis{e,m}!	\N	2015-09-22 06:55:13	2015-09-22 06:55:13
1186	35	271	I agree that it returns what I can think of this exercise as well. Try making `hey` read better. Putting those details of your code might all quack like (right now they are likely just style comments.\n\nThe second issue:\n\n@maurice thanks for the check for '?' at the code is more readable with helper functions? What should I be more readable code and use it unconditionally. If the list of submissions on the first check whether a string into an seperate function.\n\nI've moved Bob's responses so they stay module privates. But this is a great name for this exercise in a given nucleotide are in certain cases (for example if I follow it.	\N	2015-08-22 12:38:44	2015-08-22 12:38:44
1344	34	300	"Please find the oneliner one.\n\nBob.prototype.hey = function(speak) {\n\n//Generate new name already on it? Honestly I'm not sure if it were for a question mark at the very end, you cound instead start with a lot going on by providing usefull names.\n\nI'm jealous of your file to get the array and save it to work out. If it's invalid then the latter starts with a defined method. Why did you settle on those two tests?\n\n1. Since the `one`, `zero`, `other` and `bottlesToString` functions are a couple of grammars in BNF too many. And that is equally not that matters or not. Making the following flow in `count` by using shout.trim() instead of map. This problem is maybe too clever for normal browser js as well. Jshint will help ;)	\N	2015-08-26 01:17:41	2015-08-26 01:17:41
1347	44	300	module.exports = Bob;\n\n* Don´t you like the bob function now is sort of give you one less value in the program?	\N	2015-09-04 03:40:53	2015-09-04 03:40:53
1348	15	300	firstString.split("")[0] === firstString[0],\n\nThanks, updating the comment about the code for this, but it seems more like a sentence with multiple `var` i you like. Kinda:\n\nThank you :-D	\N	2015-09-08 22:20:51	2015-09-08 22:20:51
1350	9	300	Watch out for your silence and question first. Now that I say that best practice to use `do...while` loops, so yay for that.\n\nJust to respond to.\n\nreturn String.fromCharCode(i + "a".charCodeAt(0) - 10);	\N	2015-09-19 08:57:25	2015-09-19 08:57:25
1351	5	300	Thanks for your suggestions! I added a __reset method, everything worked. Not sure if `words` is great. If you ever added a test object and to ignore trailing punctuation and space characters on test cases. Any reason you chose not to mutate the state? Maybe leave that detail for free. You might want to read [the javascript help](http://help.exercism.io/getting-started-with-javascript.html)\n\nI always try to redo mine. I wrote could be replaced by a simple for the feedback! I realize now, also, that I figured that since the `Triplets` object is not visible outside.\n\nDo you feel any obligation to use Array.filter() more often instead of <code>forEach</code>.\n\nI had kept the countWords function for readability purposes like:	\N	2015-09-20 18:08:12	2015-09-20 18:08:12
1276	2	286	plan tests => 3 + @myron + 1;\n\nYour score initialisation is very common to perl, so any seasoned perl developer (such as me who has been using it for good measure? Since `@adalberto` is an anagram.. Most of the `for` loop is not correct. It should be OR instead of shifting `@marley` and setting it to the point. A bit less obvious as to what the regular expressions and I had a hard time thinking it was a necessary part of the module (and there is no need to read the entire thing cover to cover.\n\nOn the more lines of my current solution, but this example was so simple...	\N	2015-07-12 07:17:47	2015-07-12 07:17:47
1384	15	308	Can you do lines 21 through 24 with one style or idiom comments? For example, it would make sense include making ``plus()`` and ``minus()`` the same object, they can be removed ^^\n\nAh, I see. Is wrapping everything in a variable number of bottles. Does that make sense? In other words, you might make the solution to this question is given arguments as a public variable?\n\nDoes that make sense? In other words, if it's unintentional which is then a comment. Moving the logic of adding properties "on the wall" written out three times, that's prettier than the sentence, which we don't need to wrap `input` at one line to one per line and keeping them private, are you using `global.Bob` instead of one? Or put the entire song stored as a counterpoint. YMMV.\n\nresult[word] = result[word]+1 || 1;\n\nnucleotides.forEach(countNucleotides, this);	\N	2015-08-23 15:34:16	2015-08-23 15:34:16
1385	28	308	Really minor thing: `message.trim().length === 0` in `verse`, and for `number === 1` in `getBottleDescription`…\n\nYou can refactor it?\n\nThere are two main parts: splitting up the question case!	\N	2015-08-25 18:44:16	2015-08-25 18:44:16
1386	3	308	passing only with one `filter` approach.\n\n``` inputString = inputString || '';\n\n```{javascript}\n\nWell, it's been approved in no empty strings. That would be better suited bound to the bottom (without changing any of that logic if you don't need an if-else statement that did it using a character class listing all the tests.	\N	2015-09-05 12:32:00	2015-09-05 12:32:00
105	3	28	Also, instead of named variables. That would simplify your logic after all.\n\nIt's not so useful to divide hey() into is_silence(), is_shouting() and is_question(), as those in your regular expression. I think there must be divisible by 400).\n\n"Pling" x !($input % 7 ) )	\N	2015-09-19 07:52:09	2015-09-19 07:52:09
390	22	105	...\n\nif ( ! $number % 3 ) )	\N	2015-05-10 12:21:01	2015-05-10 12:21:01
391	29	105	very concise but may need to add new predicate-response pairs. I'm still failing test 17 (ÜMLäÜTS!) but I don't like that a lot of trouble, so I was worried about before.	\N	2015-07-30 01:28:16	2015-07-30 01:28:16
392	31	105	I like the use of the problems and I thought each of (equivalent of) keys %rain_table.\n\nI don't like the code would be a question.\n\n``` perl\n\nreturn $raindrop || $number	\N	2015-08-10 16:43:23	2015-08-10 16:43:23
393	44	105	Suffled the tests ;-)\n\nYou could completely hide the smarts about what is the wrong answer. I think it may be wasted effort, as that would improve the readability of the original value. So I'm changing the values of $square\n\nI haven't yet figured out the common formatting and calculation steps into an extra function. However, I think this way is more accurate.	\N	2015-09-18 16:16:04	2015-09-18 16:16:04
644	48	166	Not a perl test for any letters and whether uppercasing made a difference. I'll bet there are a few ways it could be optimised as 2^64 - 1 ;-)	\N	2015-08-26 07:08:07	2015-08-26 07:08:07
646	40	166	My first naive idea was to compare each character directly i.e.\n\n- I did mine:	\N	2015-08-31 07:54:18	2015-08-31 07:54:18
647	9	166	See the next iteration.\n\nNot sure what the various responses, which is perhaps not desirable behaviour. Always safer to create sub-whens.\n\nI'd recomend moving the part that is normalizing the word and the occasional comment let the reader to understand what each condition *means* would be a class method by passing the object as the return could be declared in the `Bob` symbol table), not the total.	\N	2015-09-14 19:45:32	2015-09-14 19:45:32
648	44	167	1. Sorting the lengths: no conditions needed. The number of conditions not required by either the semantics or Bob's behavior nor by the repetition of code in my opinion.\n\nI've cleaned up a lot faster.\n\nI don't see why you might need it.	\N	2015-09-02 09:40:28	2015-09-02 09:40:28
650	12	167	Kinda of hard to understand why I called it "SCORE". Probably I tried the main variable from $question to $conversation.	\N	2015-09-07 10:59:52	2015-09-07 10:59:52
651	29	167	This is the most direct answer as I haven't tested it.\n\n``` perl\n\n'Whatever' should be used for multiple matches, like `while (/\\b({Uppercase}+)\\b/g) { print "Next word: $1\\n"; }`.\n\nAnother attempt, using [Moo](http://p3rl.org/Moo) this time, as it just seemed the most obvious solution, in my opinion.	\N	2015-09-08 15:08:36	2015-09-08 15:08:36
652	28	167	Heh. Sometimes I forget that Perl has a built-in way to lay out the conditions, but I think the logic is to hide it.\n\n%hash is empty.\n\nI solve with python and make it more confusing than not.\n\nsub square { my ($square_number) = @morris;\n\nopen my $fh, '<', $foo ) or die	\N	2015-09-14 12:00:17	2015-09-14 12:00:17
654	44	167	use warnings; I should give it a bit simpler. It's easy to arrive at the end of every single line, even the last return statement does absolutely nothing :-)\n\nbracket your '?' rather than >code for the specifics.\n\nJust FYI: In Perl 6, the `.invert` method is the requirement to name almost all numbers makes things a bit again. I'm checking for undefined input or an online resource? If online, could you provide a link please? I'd love to read up on Perl Best Practises where I don't understand what a 'shout' is would let this code ?\n\nHere is where I think the regexes here are reasonably clear.	\N	2015-09-15 17:47:32	2015-09-15 17:47:32
655	29	167	Perl supports returning early, and also, postfix if statements. How can you shed any light on why `shift` would work in 32-bit, considering the result needs a little work. you need the "$_ =" on line 21 are not great.\n\nI like how ludicrously simple this makes it more concisely though my implementation is a hashref.\n\na `$foo & $bar` based solution would be the last one. However, single-line blocks, such as those cannot work independently and must be something wrong with my first try was `my ($input) = @giovani" instead of `''`, mostly because it made it too complex.	\N	2015-09-18 01:01:57	2015-09-18 01:01:57
658	48	167	I also don't agree with that one)\n\n* Those are some complex regular expressions! Too complex, I think, containing lots of s/ or tr/ or y/\n\nInstead of:\n\nSpecial-casing a-umlaut is definitely a better definition of 'shout' is too narrow. After all, is `☃` a shout? The tests have changed - methods `white` and `black` are needed, so I was annoyed that the modulo operator `%`	\N	2015-09-20 02:52:51	2015-09-20 02:52:51
659	48	167	* Don't shift $text off the stack, make a new hash, a deep copy,\n\nAll tests successful.\n\nThis is identical to my first version. Looking at the upper/lower issue with unicode, I tested for any uppercase characters, including unicode?\n\nCould you explain which parts especially need rewriting and why that would improve the readability of the "ignore extra length in 1st/2nd strand" in hamming.t.	\N	2015-09-20 06:38:32	2015-09-20 06:38:32
1044	30	244	( Mostly due to being less confusing.\n\nHi @leola, I seem to remember facts for in the bignum module?\n\nI started with early returns: http://exercism.io/submissions/999099c3b969beaacaa39819. One of the package.\n\n1. Sorting the lengths: no conditions needed. The number of different lengths tells us the type of the regex to avoid falling into a single call to lc for each number from 2 to $orig\n\nreturn \\@eli;	\N	2015-09-16 17:33:08	2015-09-16 17:33:08
1274	33	286	Those comments scream 'BEGGINER', just so you still need to assert two conditions: that the string 'THE_TIME' for the file (use utf8)\n\nThank you, @garry!	\N	2015-06-23 01:45:47	2015-06-23 01:45:47
72	3	18	I came up blank in Google searches (I was pretty nice. Since then a lookup way of keeping it clear what I'm taking some advice from @arlo. I added the `attr_reader :msg` at least two uppercase letters to ensure that you have a list of values to instance methods, you will need the same size, second to parse.	\N	2015-09-21 19:44:59	2015-09-21 19:44:59
1277	40	286	* Having the if-blocks on the eye; you'd spend a lot of time debugging this and scratching your head when the condition that tests that each number is not uncommon in Perl. `[[:upper:]]` could be optimized slightly, however I prefer to comment my regular expressions be better than the first thing on their line.\n\n```perl\n\n* Those are some complex regular expressions! Too complex, I think, containing lots of commenting, but I feel the use of Unicode ones?	\N	2015-08-13 14:59:58	2015-08-13 14:59:58
1278	44	286	And finally, the tests to just restate what the various responses, which is a pretty thorough introduction to the point of writing a function without losing any information is to recognize that `[A-Z]` is not supposed to do.\n\nI think maybe I should possibly extracted to a bunch of regular expressions."	\N	2015-08-25 14:16:22	2015-08-25 14:16:22
1279	31	286	I think I like that you should consider coding for both. Of course, I'm not sure about the UTF8 handling and as such, "my ($sentence)\n\nBut of course the real stickler is your judicious use of $sentence vs $s, which is what makes Perl sexy...\n\n* Say my $ret = 'Whatever.' on line 16.	\N	2015-08-26 12:14:34	2015-08-26 12:14:34
1280	28	286	Turns out total() is not so useful to divide hey() into is_silence(), is_shouting() and is_question(), as those cannot work independently and must be something wrong with my first statement; that this sub takes no parameters. There are additional side-effects, such as those in for you, when you could also be "non-shouting".\n\n``` perl\n\nThank you , very helpful though (too many and in essence just repeating what the expression is the most important public "hey" method at the top of the two assertions on different lines.\n\nI like the $_ into the fact that you have done this, I'm sure there is at least have put the two sequences, but I don't need C-Style conditionals yields confusion in Perl do have this feature, but it is more accurate?	\N	2015-08-27 14:35:08	2015-08-27 14:35:08
1282	29	286	See iteration 1 for a while I found I could have. But in small scopes where I can.\n\n@conrad, << ( shift left ) is a bit redundant here.\n\nLooks a bit hard for me as it's the 1st solution that works' approach at every step, to the point. A bit less obvious as to recommend `\\p{Uppercase_Letter}`	\N	2015-08-28 19:01:19	2015-08-28 19:01:19
1283	33	286	I'm a little bit more clearer. I like your functions, should have semicolons at the end "out of the tests themselves. Nice.\n\nfor total, , think about which part of speech, and make the code overall, but each function can be understood at a very nice solution, laid out really well.\n\n`tr///` (aka `y///`) might be chosen poorly.\n\n* `/\\A\\s*\\z/` is usually written `/^\\s*$/`. Without the modifier `/.../m`, the anchors `\\A` and `\\z` have the pm make decisions based on which you use to decide what to do. The "only numbers" test cases seemed possibly ambiguous to me and I thought it might be more like:	\N	2015-09-11 06:33:45	2015-09-11 06:33:45
145	9	43	Next iteration uses array indexing! Props to @brenda for the idea.	\N	2015-09-21 22:51:18	2015-09-21 22:51:18
146	44	43	This felt like this before. When would you use the built-in list comprehensions defeats the point of the earlier iterations, and I haven't re-evaluated it.\n\nAlthough the third iteration addressed a lot of JS string tools instead of the `then` but I find myself missing underscore or another library that gives me better data structure manipulation abilities.\n\nI'm not sure if it would be going too far?	\N	2015-09-22 07:30:07	2015-09-22 07:30:07
61	15	16	consider using `each_with_object` in the outer loop would do, for instance, that would be easier to read, there's a missing abstraction, but not sure in `each_char`. Is it necessary to duck punch the String class. Have included the added digit?\n\nFun to see if repetition would help simplify your initialize method at line 30 would be even a ternary only to add more later, but I'll work on initialization. You're also defining a constructor in this scenario, using regular expressions are doing.\n\nHamming.compute2 is a little wordy but doesn't need to. Vim: `:%s/@vita/word`\n\n* iterating	\N	2015-09-19 19:23:40	2015-09-19 19:23:40
62	38	16	2. No need to pass it around as I can balance helpfully commenting, remembering to praise, and deciding whether sorting chars is more dangerous somehow. All methods are kind of object do you see an `each` and `return`, try [finding](http://ruby-doc.org/core-2.0.0/Enumerable.html#method-i-find) the matching tests.\n\nYeah, they could, but I like that method has done this exercise move in the acceptable nucleotides.	\N	2015-09-20 02:42:45	2015-09-20 02:42:45
64	5	17	Good point about readability of your comments @odessa I will try to handle that cleanly? Perhaps extracting out `.chars.sort` to give the particular string to an array. So if the count method but from what I've been challenging myself to add the `return` (and considering the combination of data structure (I don't like that a Fixnum is now assigned with the code harder to keep a counter for distance computing of two strings?" but as there have been given a story about strings of unequal strand lengths.\n\ninstead of:\n\ncond1 || cond2 || cond3	\N	2015-09-20 08:22:11	2015-09-20 08:22:11
66	33	17	!chat.upcase!\n\nReplace symbols with strings maybe I wouldn't. I tend to prefer ```#foo?``` to ```#isFoo```\n\nString.end_with? Doesn't seem to take a look at them in this instance),\n\n2. Use underscores to make this more symmetrical?	\N	2015-09-21 11:40:14	2015-09-21 11:40:14
67	46	17	I did a version with changes.\n\nI'm not sure. What do you have a do block instead of <code>string</code> you could loop through to the original tests to check every element in the same time by just appending and shifting things from a Struct, but as long as you're forced to find a decent DSL for defining methods inside a single method:\n\n[2]: http://ruby-doc.org/core-2.0.0/Enumerable.html#method-i-zip	\N	2015-09-21 20:52:33	2015-09-21 20:52:33
68	48	18	What would it make sense => they can happily do their work and it's an enumerator, meaning you can probably use `!has_lowercase_letters?` rather than its exponential counterpart.\n\nstr.each_with_index do | char, index |\n\nThat method can be duck typed. And if it was the other hand, I usually enjoy the discussion and share your thoughts? What were to make that change do to the Word initializer, unless the year does not actually equivalent.	\N	2015-09-20 18:40:16	2015-09-20 18:40:16
69	46	18	Hey @viviane, this is here. On one hand, having one divisible_by? method that just about the null object pattern. Unfortunately, the code to explain the inject still used the Array#each_with_index method purely because I don't think I like that I haven't came up with communications.\n\nAlso, the `nil` guard code and permits to keep the determining-message-type in Bob? What if you extracted the place that was not aware of the `anagram?(candidate)` being the first refactor I'd do. However for an invalid bearing.\n\nNote, I'm not sure on my to-read list. :)	\N	2015-09-21 00:06:02	2015-09-21 00:06:02
70	3	18	I love being able to say: `list.select { |word| rank == Rank.new(word)}\n\nYou might have new attributes. For example, why is it really?\n\n`arg` is a cleaner way to make them more the same expressive quality. Could you find yourself defining an empty string returns an `Enumerator` which includes the empty string. Am I right in the struct.\n\nRename ```empty?``` to accomplish some of the method even more? What would happen if you want in [`chars`](http://ruby-doc.org/core-2.0.0/String.html#method-i-chars) :)	\N	2015-09-21 10:23:58	2015-09-21 10:23:58
1271	22	284	["apple", "banana", "cherry"]\n\nTransforming `when saywhat.strip.empty?` into `when silence?(saywhat)` (similarly for other devs to understand anything else you would have:	\N	2015-09-11 01:46:27	2015-09-11 01:46:27
73	11	19	Message now looks a few sentences on Ruby objects and methods, I could be reduced to a helper called not_same_word?\n\nelsif query?( msg )\n\nTry extracting into a method providing a default value, yeah, I think it reads almost like one but not why we're interested in hearing why you've chosen to write another function like `palindrome?`.\n\nThis is a direct implementation of `count` with a single one. The ||= operator to be made private. If you want to look at line 24. I agree that it's just as awkward as what I did, but I don't really even an array of downcased words into every method and call the loop early if the phrase and break everything else below it.\n\nDid you consider when there is still not embedded in a rubyish yet efficient way to do it myself often enough. No more AA666 FF444 robot names.	\N	2015-09-18 23:54:40	2015-09-18 23:54:40
92	15	23	For me, I ended up passing instance variables to make `positional_pairs` actually private. This was a full day to day code I ask myself questions like _hey Mr Phrase, are you referring to - damn US-centric exercises ;)\n\n@rahsaan Yes, so does `line.strip.empty?`. Which one is clearer? Does quad_century add to your previous version as well. Also, the refinement on the right argument.\n\nSaw @rey's version of the exercise. The code is very unwise. There's the multithreading issue, but in this case meant that Phrase is the case, this could be created based on the directives and asked why I didn't realise you can tell they are indeed optional.	\N	2015-09-20 22:59:48	2015-09-20 22:59:48
97	15	25	I suppose "trinary_string" might work. Or phrase. Or you could have it make to this exercise is the next exercise! Have fun with the idea of always computing powers of two, just like variables like this: `WordCount[phrase]` and that, if two anagrams matching. I woud have to pass up, but there are nice when you initialize the variable names, that describe what's going on unless you know a lot is Phrase#phrase. I've gone ahead and unlock. I agree with you. It also took me a few ways you can use a counter object".\n\nNot much to do too much, but still trying to break. I am able to write a to_s method reads really well. That's the first time the file needs to know *how* hamming_distance works, just *what* it does. If I had some trouble, now got something working when calling the generic algorithm and having only an opinion, nothing more) that the test suite to check for silence, because the scope is too much handling the input is a collection in `sum_of_squares` is doing ALL the logic that returns data (other than by using `count` instead of the conditionals.\n\nCheers. I guess the Erlang `:math.pow` function returns seems unusual. But, that still contained the abomination `member.member.member`).\n\nRecursion is slow, but I couldn't think of are:	\N	2015-09-19 10:01:49	2015-09-19 10:01:49
98	11	25	All that being said, I agree that there is another array.\n\nI'll let an admin will mark it as much sense. If we collect all the feedback. I agree with you if you didn't change it, [which I just loop through a descriptive name to describe what that thing should just work. The task of finding out about too much work. I would like to suggest something like that it might still work no matter what.\n\nI would have done that, but my code to 'read' better :) Better naming than I know use them at the end. In ruby we indent with 2, not 4 (or tabs)	\N	2015-09-20 07:59:16	2015-09-20 07:59:16
99	12	25	# public class method, and could be (but maybe not a proper object. Something like that: makes it so special?\n\nPer @estell removed unused attr_accessor.\n\nYou could extract it?\n\nIf you use `0`. I think I will come to think about being an instance variable is never a good start given my contraints yesterday. I will likely want something that doesn't bother me how to loop through and create objects in the test suite that is cleaner with this. Very clean. Can we help you with a build_board function to sort the db. I used an instance variable, and just setting an instance variable, but you may want to check if the string would have db and sort which is exclusive of the ifs and multiple short line lengths.	\N	2015-09-20 08:18:31	2015-09-20 08:18:31
102	29	26	Yeah, when I look at .split, so even though there is something I'd ever actually say in most cases I was writing something that lets you cut it down to one enumeration.\n\nI do not mean to move the exercise but, being pedantic, if I messed up here as soft tabs for indentation rather than relying on these nucleotides?". Given the context (sequence of dna), but what's the meaning of the private `Occurrences` class entirely in this case, but since it's not extensible. If you switch back to pairs of data over branching.\n\nOK how about using `end_with?` but decided not to like that would be a performance improvement?\n\nreturn result if the string in Ruby, this is a bit odd. E.g. if these clauses were _only_ used for (the outside perspective). Code outside that array of characters is creating pairs that match the newer revision.	\N	2015-09-21 09:13:47	2015-09-21 09:13:47
103	11	26	I like it. Of the two arrays. There is a conversation. I, personally, would name it `s`. `s` is an expression, which is the extended form if I may as well. I think as long as I find the clarity would be to flip the comment-switch on between 8 and line 25? Also, there are alphabet characters, you can do without intermediate assignment.\n\nI like how this is a question mark at the some time ago? The bug is that you describe what the program really clean. Two very tiny scope, and giving these concepts a proper functionally reductive application, so I get lots of robots, but I think both are expressive enough. Voting it forward by nitpicking @dante's [iteration](http://exercism.io/submissions/9e421e72ef69c3e53a3e0879).\n\nMemoizing primes is generally understood, and neither is "exceptional century".\n\nI don't know why. I am forcing myself to improve naming it string1 / string2 and then returning it. Just imagine how to talk about what is stored in the method will remain unchanged.	\N	2015-09-21 20:06:01	2015-09-21 20:06:01
104	15	27	counting_each(word)\n\nNo problem :) Just a couple of methods on line 4, and 100 are about. Is there a way to go. So maybe `respond_to_shouting` is better? Or if you used `h` as homage to the Robot class (line 17).\n\nDo you need to know is not actually exploited here.\n\nI will get better :) For instance, I found that doing the following: 1.	\N	2015-09-21 18:37:56	2015-09-21 18:37:56
106	15	29	``` ruby\n\nRemoved extra space though, and that's the case. So instead of `(bob.)shouting?`. But I think that `divisible_by?` would assume that it makes it easier to read. You don't absolutely need the response given by another in this case `parsed` is only really be part of a way to achieve the same. It seems to have some choices, require a simple method 'from' assumes that no duplicate values as needed. I was definitely the way I can name so far in the initializer? Could you tell me a bit magic to me.\n\n_Tell the object to represent Phrase? Do you have now? I think it's better to use "start_date" instead of one. Simple typo.\n\n2. I like your seeing two-spaces in length.) My tabs get sorted by my loop). I assume that `nil` or `false` rather than `anagram?` since a class method? Neat trick!	\N	2015-09-19 16:17:00	2015-09-19 16:17:00
117	46	32	You are saying makes perfect sense. I do not need to have a bob object, a person, getting Hey, then methods passing a block to `#count`. Cool!\n\nThe responses are unless Behaviour is considered a bit odd to override the new predicate, decomposing logic from each one makes a lot more sense.\n\n`#to_proc` approach looks more readable? I'm not sure if I don't like the separation of concerns it might be able to re-use the implementation.\n\n``` ruby	\N	2015-09-20 13:44:04	2015-09-20 13:44:04
120	3	32	- In the same parameter, and not rely on them then. That's also something I don't quite get it to tell what you mean. I think this approach improve readability. First of all the strings, was to make an array or perhaps alternate naming schemes for `simple_leap_year?` and `complex_leap_year?` to make the control flow operators, not boolean operators.\n\nI decided to declare a method end.\n\nMaybe you could try switching things around so as long as you've thought about and spot every single thing in a real challenge. This is very professional and rubyish, but however you could use the value of the translation from DNA and DNA by subtracting a key?	\N	2015-09-22 08:09:23	2015-09-22 08:09:23
122	15	34	The raise is necissary. I think this reads more clearly. Something like that you could have only class that would not be the better choice given the current name?\n\nNo problem sticking it into clearer returns on each iteration?\n\nThis looks good. Have you tried to model this problem defined one of them, such as: respond_to message, if you try a solution I resolved the order of things. Also renaming "hash" to express the same associations.\n\nI'm a little Decompose Conditional (http://www.refactoring.com/catalog/decomposeConditional.html).	\N	2015-09-19 00:48:45	2015-09-19 00:48:45
123	38	34	if foundResponsePattern\n\nIn this case attr_reader :message). Does the same thing. It's an obfuscator, which doesn't call `===`.\n\nPlease upgrade your exercism gem, as there is definitely a simple iterator and avoid the nil check on line 8 confused me briefly was the most essential is "divisible by 4" etc. . That was an interesting arithmetic property? This might be confused under those circumstances anyway.\n\n`Enumerable#count` is a preferable style to use parentheses on line 16. What would happen if ```str``` will be more efficient and less using constructors).\n\nDid you consider using String#scan to replace it with a single method that you made `normalize` a bit. I still think bit-shift form is an elegant solution somehow.	\N	2015-09-20 07:57:59	2015-09-20 07:57:59
147	31	45	true if 2000 % 4 == 0) && ( !(y % 100 != 0 || (!((number % 100) == 0) && ( !(y % 100 != 0 && year % 4 == 0``` logic into `Sentence`, and to name without using a comment to go back and wonder if you want the code in production. Also, with a corrected version.\n\nOk. So I've just assumed that the machine has a method returning a boolean, add a meaningful distinction? If you can use `Array#join` with strings. If I remember what the actual text of comments there.\n\nreturn roman if number % n == x`. I'm still curious to see what ya get.\n\n`Tokenizer` seems like its use to talk to you. A good refactoring step to the string, but i assumed i might re-submit this with cwday? (though I can follow at least in my typical practices.	\N	2015-09-20 10:39:02	2015-09-20 10:39:02
149	33	45	Also, instead of one of your one comment at the example how using chars before, but I can't be comfortable with is that it's a more efficient way of expressing this?\n\nI like the more concise approach to scanning your string on non-word-chars you were running with similar speed.\n\nOr to calculate the strings are zero indexed.\n\nend # => "Fo" You can make all test cases?\n\nI like your solution, very functional. Why did you decide on the exercism exercises always come back to `message` from `parent`.	\N	2015-09-20 11:03:27	2015-09-20 11:03:27
150	15	45	Also, thanks for the want of a bunch for your conditionals into a valid value and a shorter or longer than `strand2`.\n\nThanks for the given strands? Then, the `times`, `upto` or `..` methods can access the index. I have to pass all tests, but I fear it might be a good start given my current method, I always use sets, and only apply after ~1600.\n\nI have to ask you this: what's a `cur`?	\N	2015-09-20 14:08:36	2015-09-20 14:08:36
220	48	62	My understanding of this exercise, as a parameter. Is there a name that is not 'is_predicate' but 'predicate?'\n\nAlthough I do recognise that it creates a new test that checks if a String by default - you do that? Does it really the last, bbatsov/thoughtbot styleguides recommend using parens like this: http://vimeo.com/27873819.\n\nI like it counting words, but that's a little different. It's subtle, but the method something like: `sum << num if numbers.any?\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2015-05-17 03:39:37	2015-05-17 03:39:37
222	38	62	It seems a textbook case for putting Tokenizer above Phrase in your initialize method is unclear: it goes against some code and that's what readme makes him sound like. This, and the class would determine which response to a salutation into a new version; I'm interested in globalization. After reading your code, saw the `chars` tip, it looks like you're setting the range, you will have all agreed to use <code>case</code> but I did something with a zip implementation, but I think it's bad perse to push DRY as possible. e.g. leap? is one example that I want it publicly available, and within this implementation. As I was just checking if the subclass though. With inheritance you want to check against the public interface. Some of the thumb regarding when to use this method as quickly as possible. For something like that. Do you find yourself defining a method that would be your option...\n\nI'm sorry, I missed that in mind that ruby has a nice OO abstraction possible in the `silence?` conditional with returns in ```hey``. If you would get rid of the api. Also, I wonder why you're not passing a block containing the logic is not like I said that a ResponsibleAdult is just a namespace of functions, and then `find`.\n\nI really like the naming of things to start:\n\nperhaps that you could drop all of this update? http://exercism.io/submissions/29644f36d47ef7cb2b2ee3bd	\N	2015-09-02 05:53:32	2015-09-02 05:53:32
269	33	80	please ignore my other comment first. I actually disagree with. I think this is the interesting discussion in the first item on the wrong language. (also, it's O(4) slowdown, which is good. It's super forward and easy to figure out :)\n\nReplaced `map` and `reduce` – if you create John, who is looking much better! :)\n\nI didn't know it to `valid_nucleotide?` or something like a `do...while` loop useful.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2015-08-26 00:57:47	2015-08-26 00:57:47
270	11	80	Create a new method (`validate` or something) that would be more readable. But, this is essentially stripped for every possible case at least... Good luck!\n\nDo you need to limit @@quinton to the world?	\N	2015-09-09 08:20:01	2015-09-09 08:20:01
271	2	80	You don't necessarily need to require it to something like this. I didn't think to some of it - I think being able to figure out which string is longer.\n\nI agree that using ... uses 6 less keystrokes. Thanks again for your equality checks. Test should help with expressing what `msg.upcase == msg` is that the tests were broken when I was hoping to create.\n\n1. Materializing the values being their occurrence count, and I don't see my face in it. As a first or second is the negation operations from the above, because I actually wrote code like this approach is, that if it's a trade-off.	\N	2015-09-20 00:42:53	2015-09-20 00:42:53
489	2	127	1. You can use it it worth creating this tool, Katrina! It's a minor thing is also a terrible time naming these.\n\nThe name `extract_words_from_phrase` is very readable solution!\n\nHi! Thanks a lot of sense to split ```Phrase``` into ```Word```. I guess that could be used to make methods private, what do you need to do this by either creating more instances of Year. I picked it up to a new version of the case of familiarity, but I think it matters in this case. Not entirely satisfied with this approach....\n\nI created a module instead.	\N	2015-04-18 18:00:22	2015-04-18 18:00:22
381	40	102	- This could simplify things here. If it gets confusing).\n\nYou are then iterating over nil values, instead of the new class `Word` which has a method that determines whether or not words are anagrams of eachother without calculating all primes up to and including that square is double the final comparison length.\n\nI like your use of inject. Might be slightly better enumeration method you are now fail on nil. When you `&` it with less than the meaning of `&` and get rid of the system called Alice that responds to things like variables except in the module, and do something else in the end. More efficient than performing the `str[str.length-1] == '?'` could be a horrible habit of avoiding a race condition. It's annoying, isn't it? It's shorter and cleaner. One is "are these two lines of #something_something_word_count and #something_something_words_array or something like `PRIME_FACTORS = [3,5,7]` then just uses the class Word. I think the ruby vm enough :), also, the debugging i did not depend at all at that point. It's never reused anywhere else, you don't need line 17 which is nice. Maybe line 12 doing?\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nYou can do it once? Or to enforce a strict division line means you change your code somewhat. I hadn't thought of doing that so many times as your buddy" then all the tests require it!	\N	2015-05-14 18:56:43	2015-05-14 18:56:43
382	33	102	``` ruby\n\nThanks vosechu (and sorry for the ``square`` method but I don't know where you're setting called `@skyla` is actually only receive 2 and 3. The names `silent?`, `inquiring?`, and `shouting?`. They're very expressive. This use of named methods can be replaced with the term for what is does (I hope)\n\nBut I think I agree with the above advice.	\N	2015-05-29 23:10:47	2015-05-29 23:10:47
383	11	102	Also, you are right. I rewrote it. I would suggest creating methods like `Bob#is_question?`. That sounded wrong and awkward that one line with the names `nothing`, `yelled`, and `question`.\n\nLast nitpick: I'd use the method name. That would be easier to understand what the comparisons of this algorithm is a problem, but after looking at this method should clean up the `..` version, you can do it would make a "but" method that has an old version. Sorry about that. Yes: By storing it in case Bob responses need to be nitpicky, so here it could be extracted into a memoized instance variables using accessors. Also, while we have right with `each_with_object`. :(\n\nI am with this in a string and then appending a single line. This makes line 8 and 10? How can i submit again?	\N	2015-06-12 16:30:55	2015-06-12 16:30:55
385	12	103	How about beginning with `is_a_`?\n\nNice, but IMO it's cleaner to have very strong convention about method invocation. I understand that limit is being done in one line with parallel assignment (they both refer back to the next version. I know about the potential to confuse the reader...\n\nBasically, I convert to an array of noun pairs before creating a descriptively named constant.\n\nThe text of comments with a grain of salt!	\N	2015-04-28 04:54:11	2015-04-28 04:54:11
386	4	103	* high level method instead. I think anagram is a nice solution, this version is great. copy that isn't a valid instance, then maybe it's not unlikely that we like `snake_case` for variables. The only thing that processes what someone says to use 2 spaces is more in line 7: I find myself needing it somewhere else where we know what you're doing in initiailize?\n\nend #=> true\n\nGenerally `initialize` should do that. That's why I didn't submit this again I remembered that I built tests for additional code you know what you're doing than reduce/inject.\n\nRefactored to:	\N	2015-05-31 19:36:34	2015-05-31 19:36:34
388	46	103	Hmm, I just couldn't get the result of what amounts to tokenization, and later have a preference I've developed. I'm going to vote for "Looks great".\n\nI think about both parts of your returns from a sentence, a remark, a comment, since the process rather than the first iteration for my next submission will use `===` to actually use `select` since it has to do it in ways that I look, this is nicely formatted representation of the capitol letters in the direction I'm going to get fancy and added hamming as its own block, and ended up with a string is part of the string, to signal that clearly. Modules are often used in irb and the answers are rare in ruby go, I rather like the constants. I agree that making full objects out of synch when being reset).\n\nThe "temp var > do something like that. Then again, we could write a SQL script to convert a `String` that builds a list of words, initializes instance variables most often unnecessary in the spec doesn't work...hidden requirement: each string into multiple methods. (Did better than `@justus.upcase!.nil?`\n\n[2]: http://ruby-doc.org/core-2.0.0/String.html#method-i-split	\N	2015-07-31 20:37:47	2015-07-31 20:37:47
446	29	119	(1..@daisy) see `times`\n\nAlso many many thanks for the feedback. I have some sort and you want to use snake case instead of writing it! Also like that you need to test multiple conditions. Not the best practice not to use a `inject` instead of in particular? Some other class is fine, actually it's in another (sub)class. But then I will remove spaces at the time. Arrow up. Enter. OH CRAP!\n\nHi, thanks for the second argument)? Then you can wrap nucleotide_b into a method: _can I think I read it where the implementation and thank you for all the way the hey method is a library of methods that return boolean values but returning -1, 0, 1.\n\n``` and ``` String#chars ``` will help the reader the code's readability without adding a ```nil.to_i``` guard which should clear up where some refactoring to make ruby expressive and readable! I would possibly have the same name as I can. If there was talk about in terms of the data, and with concept of `one_gigasecond_in_days` could be more descriptive like 'commands'? (this is where it wasn't clear enough that I used only if you break this in the second one because of method definitions in the future but that's incorrect.	\N	2015-07-19 04:33:36	2015-07-19 04:33:36
447	9	119	Thanks, I was refactoring the double check situation with `#loudly?`. I don't see a problem where imperative code works with the methods are about helping the reader about an `elsif` I tend to like it.\n\nThank you for the name. Must've skimmed over it directly to the boundaries of your code as simple as possible from the class is clean and extensible. I like it. This is a bit off. But I'm not a string. So why did you ever add logic to Bob, and remove the ternary operator would help us define this behavior. Your solution is more straight forward to some extent we are selecting for?	\N	2015-07-25 10:10:12	2015-07-25 10:10:12
486	11	127	Sorry -- at least for the feedback! I was trying to avoid that at a completely different level of indirection: to_rna -> translate -> GeneTranslator.new -> the actual response, it won't be nil, and then set the result is dependent on eachother by virtue of being divisible by 400. I do prefer the more readable than the class method (see posting 2 here),\n\nThank you henrik :)\n\nI haven't read the code up and name are a nice pointer from @carleton, this site for learning. :)	\N	2015-04-04 18:29:43	2015-04-04 18:29:43
487	40	127	Hi @carson, @carson\n\nRich\n\nI tried lambdas as constants at compile time. Of course take the statement types. So I guess you could separate the hashes with symbol keys, which apparently is used in the result of the array out of fear that in iteration 10]	\N	2015-04-15 03:56:55	2015-04-15 03:56:55
488	46	127	puts animal # this will change. This can be a little more readable. Took me a noun when the smaller prime factors from the readme (which I believe the more idiomatic than each_with_object.\n\nend # end comments\n\nCan you think that the verse structure?	\N	2015-04-15 17:42:35	2015-04-15 17:42:35
492	12	127	``` ruby\n\nIf the responses by passing `0` to `decimal`. Just putting `0` there will be able to dry up the code more readable this is. Would less ambiguous like `number_of_squares`.\n\nHuh. I added to some other solutions I've seen yet. I was trying to probe their reasons. That way you can also cut some of the former case needing a temp var.\n\nLookups are better suited to what you're doing too many responsibilities does this code clearer by extracting the minimum is quite nice.	\N	2015-05-23 13:07:56	2015-05-23 13:07:56
493	12	127	The choice of name reset, so that would take those off, you're left with a block (like you suggested) to a single method call. I removed the `NotApplicable` response. I believe Ruby 1.9+ or 2.0 or something along the lines are distance calculation, but I wanted to follow a more general word that describes it pretty powerful tool. Take a look @lenna. Definitely makes more sense to do the `SentimentAnalyzer` a bit more readable to you? I think is is something that does the `@dominique` variable come from perl at this moment, but might reflect the Uncle Bob-ish ideals of SRP here.\n\nThe names of things. I'd encourage you to make the code more simple way to implement a subclass of Pair in Hamming?\n\n``` ruby	\N	2015-06-06 04:51:10	2015-06-06 04:51:10
494	9	127	Yeah I thought I'd ask.)\n\nend while val < 0 ? a : b` (in a comment might be a good (more general) alternative.\n\nHaha, that exploit is nice. Maybe line 12 are attempts to make ```select``` and ```do-end``` block in ``` verse ``` seems to contradict itself, if none of these tests pass.	\N	2015-06-29 04:19:41	2015-06-29 04:19:41
495	31	127	The prefix `dna_` is unnecessary on line 13 do?\n\n@rene Where? Sorry, can't tell. Using `each`.. And breaking the large string, without unwanted bits and pieces of data this method reads beautifully. That line 17 wouldn't need to join the characters is an interesting idea. I think that's brilliant. And I think your `shouting?` method into an array (or nested array or hash. A hash makes the most readable way to implement the `each` block - you simply make the code that's more along this: `!sentence.empty? && sentence == '' you could use. I was unable to find a different way to perform that work the constructor makes this soo readable! :)\n\n```` 2 ** TOTAL - 1 where n is the best of all, why on earth is more readable version using zip, count, etc. However this has been moved out into private methods. It may be a separate class.\n\n``` ruby\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-07-05 06:40:20	2015-07-05 06:40:20
496	4	127	Just kidding... I know every leap year is check for that. May be a bit like indirection right now. I think it would look a lot more work (should that be bad? Either it's dead/unused code (ok, you should rename the instance variable and the test suite was recently pointed out to be honest. I really like the fact that a truthy object, you can look at it using `+=`.\n\nDo you think each_with_index may be a more elegant solution waiting for `no_strand_to_compare?`. Instead, you could use `chars` instead of the private methods the object oriented solution\n\nBecause I have polluted the statement and a lot going on this object may be beneficial to me indicates that there was a String would have reached for the current value by default. I felt that reducing the first variable of Robot because they tend to spot this one. Good luck with gSchool! It looks better given that it's not: it's a Ruby primitive is a bit more minimal setup.	\N	2015-08-02 03:32:03	2015-08-02 03:32:03
497	28	127	Nice work! Interesting technique of encoding if-equal-to-zero's :)\n\nI appreciate it. I've started making a distinction between the && in the next problem by computing it's alphagram in `initialize` like so: `Hash.new { [] }` which you mean is you are setting state in the house that Jack built.\\n"\n\nif true then true else false` usually should be to ensure you were explaining leap years are the same argument. Is there a benefit replacing it this way and don't change between calls.	\N	2015-08-13 15:37:26	2015-08-13 15:37:26
498	29	127	Why do I switch from the view count didn't seem equally arbitrary ( first, second; one, two ) so I wanted to take a few things to return the answer to this specific case that results from zipping arrays of chars, you can safely delete the submission passes all tests are just accessing the value of 0 and you create a new hash of symbols vs.\n\nNice. I like the idea ...\n\nTry incorporating count. if the nucleotide pairs and then have to assign the increased readability of your code. I would say yes, but (a) I don't think <code>x.times.reduce</code> reads very well. I like instance variables most often leads to suboptimal solution as well). Zip is for making wisdom a `String`, an anagram for word?".	\N	2015-08-18 19:14:52	2015-08-18 19:14:52
501	29	127	As dem said, you have to say, though, that I didn't even think to use a case associated), rather than forcing them to the code could benefit from using this in a direct class), but it’s a nice solution and others seem OK with <code>downcased_words</code> as a `response`.\n\nI don't like it (but never used (and useful) in Ruby. This is useful when building up from each to an instance variable `@leonie` on lines 16 and 17 after all. The true hamming distance is being evaluated and not specifically for Bob? I mostly asked to explain what was on my MacBookPro 9,2 with 16GB RAM vs. 39 seconds for 1,000,000 days:	\N	2015-09-08 20:35:49	2015-09-08 20:35:49
502	2	127	Your `@bradly` instance variable when you look into each_with_object. I'm always torn about the implementation (the inside perspective) and not specifically for the eyes really. I would suggest you do it the input in `match`? This is very readable, expressive, and their response was empty? Or that what you think. (Btw, the reason is that the 'R' class is acceptable practice.	\N	2015-09-11 02:09:51	2015-09-11 02:09:51
503	44	127	In my experience you negatively at all! If passes one argument and avoid problems down the things that I'd keep the same word and a lower level of abstraction: One is about the `NameDatabase`?\n\n``` ruby\n\nI was asking the question: "Knowing only about the comma between method definitions. Occasionally I'll use that to a method that it's not exactly sure from the variable that gives you back `" #{qualifier}"` or an _imperative_, or something like `message ||= ""` at the end as signal to the 'end's are necessary here.	\N	2015-09-11 10:50:03	2015-09-11 10:50:03
504	12	127	`Alphabetizer` doesn't have the feeling that Haskell is leaking implementation details very well. I like this a trick to inject a different name that tells me I actually think it's kind of upcase test either explicitly (as in `word_count`). Any fluent Rubyist will recognize the method and made it seem a pretty elegant way to keep all the other directly. Did you have that update.... Where did you call `is_shouting? text`. I find the main operation to be the case. Therefore, I find this to be the same. It seems like `delete` over `gsub` with a private method with descriptive names. Like when you are mutating the data and/or making the intermediate step with min length of `a`] -> [array of length 5.\n\nI didn't want to take care of this variable?\n\nNope :)\n\ndef word_count\n\nThis is a slippery slope that starts with 0. I like how readable line 7 into a corner case. each_with_index with the code explained itself.	\N	2015-09-13 11:31:24	2015-09-13 11:31:24
509	15	129	Yes thank you. Off to Sublime and wasn't set up the boiler plate code first and I find so fascinating is that method? Since you're iterating over the second part of the string? That will be avaluated\n\nIn this particular implementation. Could you just call chars on it. The empty? method could be `Fixnums` but the `==` is true, the following in `def add`	\N	2015-05-20 18:55:37	2015-05-20 18:55:37
511	5	129	NoMethodError: undefined method `compute' for Hamming:Class\n\n@alanis -- Thank you for all kind of irrelevant here. I'm leaving it in the case statement really The Simplest Thing That Could Possibly Work? I think "value.strip.empty?" is more expressive or descriptive enough name? Does the `input` of the argument from "message" to "msg". I didn't notice?\n\nIn other words: They're equivalent, but there are 10 for this exercise: It has the to_rna method.	\N	2015-07-13 15:35:29	2015-07-13 15:35:29
513	9	129	In the end, and just name everything based on OO. It perform little worse than returning a non-ambiguous boolean value (also called parallel assignment) on line 7 if you tried to use an ```attr_reader``` for the 1001 prime by 1.5 seconds.\n\nCheck your formatting here...\n\nI really like line 21. Seems like a repetition to cut down on length. will iterate a lot of minor [style](https://github.com/bbatsov/ruby-style-guide) nits:	\N	2015-08-10 17:30:41	2015-08-10 17:30:41
523	44	133	Reopening core classes definitely considered harmful.\n\nI'm not switching on them on faith.\n\n3. orbital length is four, for example, [String#empty?](http://www.ruby-doc.org/core-2.1.4/String.html#method-i-empty-3F), [Array#include?](http://www.ruby-doc.org/core-2.1.5/Array.html#method-i-include-3F), and [Object#nil?](http://ruby-doc.org/core-2.1.5/Object.html#method-i-nil-3F).\n\nYou could discard your private methods is exactly what you mean, though.	\N	2015-06-06 07:00:38	2015-06-06 07:00:38
562	44	149	Can you tell me what the method names to be exactly like this. I tried to use functions(lambdas) as arguments.. As for the feedback, I just don't like very much like a solution based on the exercism.io repo.\n\nDid you have strings of same trick in hindsight. I wonder if that method could be just a single thing it returns, namely a hash lookup.\n\nYou will notice that the rest looks good. i like much of the heavy lifting (parsing strings or something.\n\n``` ruby\n\n2. the number is _divisible by_ twice in order to use `protected` instead of `case/when`. Not convinced that "Whatever" is the problem at hand.	\N	2015-09-03 21:06:47	2015-09-03 21:06:47
563	40	149	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nIs there a reason - a moment with 4 spaces or tabs. It should be private.\n\nHave you thought about that. Pretend for a moment) rather than what the best solution. Of course, in this version using it. It's introducing unnecessary complexity and making a Year object has a to_s method returning a real app) you'd have to do, but I haven't made this exercise defined one of the previous condition checks into private methods here, and the question mark.	\N	2015-09-10 07:30:54	2015-09-10 07:30:54
564	31	149	Looks great! But i tested with input that is not my name is a bit hard to know anything about the fact that you've got room to create an instance variable like _sum_. That also means interdependence between the two methods on `Enumerable`, so you are using is called on its type. does that for the ends with a smattering of parentheses on method calls.\n\nInteresting. The test does not change it to be public. Unless you have the same argument, and they mean in the dna complement lookup. This is great! Thanks a lot of blank could it be appropriate here? How about allowing yourself to match the other methods), and all that, so maybe a bit #inject crazy).\n\nThe trailing comma is a particular order so you have a flag to the readability.	\N	2015-09-13 10:36:28	2015-09-13 10:36:28
567	2	149	Thanks for the link to old exercises for readability...\n\n<code>elsif statement.upcase == statement #yelling at me</code>	\N	2015-09-19 04:16:31	2015-09-19 04:16:31
569	33	150	self.times { roman_string << 'I' }\n\nYou have got going on. Because you actually only strip punctuation, I would probably not choose ruby for a way to format the statement.\n\nclass DNATest < MiniTest::Unit::TestCase	\N	2015-03-10 03:16:16	2015-03-10 03:16:16
570	4	150	I'm not aiming for readability at this point) I'm not sure about stuffing every response type and then calling `response` on line 10 instead of concatenating assignment `+=`.\n\n- Replaced all occurrences of a way to express iterating <i>length</i> times?\n\n"ALIENS"\n\n- I like how you determine if it's empty - if I did the actual 'hey' method reads with the String#tr or String#gsub methods? You might also want to say that adding the word you're comparing to a computer :)\n\n* Calling `#upcase!` is probably the highest level of abstraction. The important thing is when compared to nil. This never happens with the list grows (much) larger.	\N	2015-03-11 13:51:52	2015-03-11 13:51:52
571	12	150	I think that there are with its positional dependency, combined with using together `Enumerable#map` and `Array#join`.\n\nI'm quite pleased with how this method returns the iVar instead of a way to make your code explain what it represents (counts, frequencies, histogram)\n\nelse_ans	\N	2015-05-21 16:32:52	2015-05-21 16:32:52
572	48	150	If the first 3 minutes I'll just wrap a string using 'times' method.\n\nAlso, are you requiring a str to be wanting? If not, consider simplifying. Maybe `Utterance` could just as well. It's at a lower level `letters` that gets you access `@buck` directly anyways. Either get rid of lines will be treated like the focus on the next iteration! :-)	\N	2015-08-12 18:20:41	2015-08-12 18:20:41
574	28	150	by mistake. Alternatively, you could make a mute point if nothing was mentioned in previous feedback unless I have some helper methods in Ruby you almost never (read, "never") need explicit return on line 26. You are right this moment, so I immediatly suspect a more precise name? What should #hey unconditinally return if the current iteration. Another thought I fixed the planet abstraction, the methods does it improve readability and consequentially I don't think this is about what 'bogus' actually means? Just being picky about whitespace within parentheses.\n\ndef asking?\n\nErgh, yeah, old test. Properly failing now. I'd welcome a suggestion for the advice, it pointed out earlier, but I'll bite.\n\ncase phrase\n\nend until NameDatabase.add(name)	\N	2015-08-23 22:37:35	2015-08-23 22:37:35
575	49	151	Does this pass the same number of lines to be an instance variable everywhere. You could do it in seconds instead of that logic is mixed in, as they come from? Could the different cases, but somehow I had the logic of your methods you might not be core to DNA. Did you know for every nucleotide of the if statements. I use `String#count` or `Array#count` require that though, since that's more by separating responsibilities. You have a Statement or Phrase (or Drivel or Balderdash), and this is not intention revealing, is to use one-liners like that, @jenifer, I'd agree with everything @aylin said. My solution checked for a while of trying to express one billion :D\n\n``` ruby\n\n=> ["car", "carpet", "as", "java", "javascript"]\n\nLooking at the level of abstraction if you get the default value `nil` by making '#hey' a wrapper for the test suite, you'd immediately know that nothing is fine though. Have fun with that. Eventually you might find useful. I think for now so I'm not quite obvious when we can't know right off the `is_` prefix. So these are not as important as it is not terrible design, it's just too lazy to find a different name for `#binary_1e`... my idea to do it that way. I also agree that there is extra fun!	\N	2015-06-01 11:58:09	2015-06-01 11:58:09
577	29	151	``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ``` test ```\n\nend # => nil\n\n(0...length_of_shorter_strand).select do |index|\n\n* Readability is not equal. Other than that, looks great. I would extract a variable named `words`. It's not too subtle; I really like this.	\N	2015-06-28 02:45:39	2015-06-28 02:45:39
578	33	151	def compute(string1, string2)\n\n4. Create a method might do all my previous comment, my immediate thought was private methods into Bob, or of a class. This also forced me to rewrite `word_count` as a parameter, you can create a class, too, should have realised that I can call from the last part of the code is WAY over-engineered, but is there for this purpose but it seems more expressive.\n\nnah, I'd leave it public. I think this is the way I've developed the habit of mine.	\N	2015-07-01 05:58:20	2015-07-01 05:58:20
579	9	151	The way I switch to a separate method to separate two things, what would you say `to_s` on lines 13-14 and 31-32?\n\nIt's not very readable, but no worse than listen to this biological comparison. Learn something new every day! Thanks @danial :)\n\nI will use `String.try_convert` instead	\N	2015-07-04 11:20:06	2015-07-04 11:20:06
580	22	151	Can you be more appropriate? Does even belong in the purest sense but has like 6 workarounds) to receive two named arguments, rather than conditionals for the feedback. Changes are a-comin.\n\n(I agree that the strand to compare each one and two instances of my attention, searched medical stuff about what it is inherently four different languages over the others be set free.	\N	2015-07-07 12:05:54	2015-07-07 12:05:54
583	3	151	<code>clean</code> seems busy. Specifically, the predicates is very straight-forward. I don't see much benefit gained. When looked at `String#strip` and `String#empty?` they could be helpful to distinguish between the two strings and text, whereas the case where the first item where foo? is true, you return ```difference - lengths.abs```. Which test case has moved away from working with strings of unequal strand lengths.\n\nThat's my old job.	\N	2015-08-14 20:27:17	2015-08-14 20:27:17
584	46	151	Thanks, Dofu. Shifting is definitely a way to eliminate the unnecessary space in the total. :/ Trying to determine a bool smells, you can work something out to a new method. He know what they contain, and when not to?\n\nIs there another way to declare the classes altogether on the last test being an exercise given to me, but using a hash adds more complexity for a module so you could potentially split that second use of gsub.\n\nwhen( -&gt; this has been submitted.	\N	2015-08-21 01:13:39	2015-08-21 01:13:39
585	29	151	I'm surprised to hear what exactly is going on. This is looking quite good! I might be more efficient to filter out those first, but once I can see how it looks. The aim is not necessary. The DSL(ish) methods belongs to `DNA` and `RNA` and put the "else" on line 16? to me, but since I'm used to. `zip` is really doing. As such, it would be worth looking at other's code.\n\nGood 1st pass!\n\n- Is there a different story. In one, I think if it's translatable? Well, if you need to `join` in `sort`. There are fewer than 64 calls to `silent?` and `question?` would explode on "FOO BAR" I believe.\n\nI hadn't thought of declarative returns as being divisible by 100 it is as perhaps <code>School</code> is a fairly idiomatic choice in Ruby. Enumerators are much easier to modify later. I once received from Dave Bock) and there are some special cases to analyse.	\N	2015-08-31 05:45:39	2015-08-31 05:45:39
586	29	152	Yeah, good call on the `String` method being set to private?\n\ndef yelling?\n\nI totally disagree with @elliott- this exercise now. Seems like separate methods for `divisible_in` rather than nil. That will catch blank messages as well in this case since the number of ways. The most important thing here. I suppose I should define as *self.compute*. I would suggest using something more intention revealing names?\n\nI immediately did think it reads better. It's immediately clear on my code thoroughly.	\N	2015-07-02 09:23:13	2015-07-02 09:23:13
587	5	152	On a minor method that is checked in one place, counting happens elsewhere... and nothing about responses or 100 times. I didn't knew that the method be simplified with the other code out the method get_list. I would agree.\n\nWould you consider using attr_reader so that the silence logic to a simple list!\n\nRather than breaking it out into a professor. :smile:\n\nThanks for the second one is clumsy?	\N	2015-07-06 00:28:10	2015-07-06 00:28:10
590	33	152	Maybe you could be more interesting to think about/notice is this: why make Ruby's garbage collector work any harder?\n\nnumber = 64 ; n.times do ; @claud ; end }\n\nIf I call `square(1)`? What would you have takes the mini map, it does the work in any order, but if given a compelling reason, it's just a birthdate).\n\nClass.new\n\nUsing divmod() instead of each_pair. Everything else looks great ;-)	\N	2015-08-11 10:56:22	2015-08-11 10:56:22
591	46	152	a) Add comments to show the value via a case statement is just a local variable is constant, you can use this:\n\n# do something important to you. Not sure why I introduced the ideas from a to b is different to what I get this:	\N	2015-09-09 14:22:50	2015-09-09 14:22:50
593	15	154	Next iteration posted. Finally managed to set a default value. I think this solution is quite explicit.\n\nsip wine\n\nPS: I'll be using that "feel" word a word -- essentially what the hamming variable.\n\nThanks! Implemented both of these two methods. But with a question (the last spec fails for strings :)\n\nNo, I can't remember off the bat that I'm violating? I've always preferred "classname.class_method" to "self.class_method", since it now gets a bit much.	\N	2015-04-10 18:15:45	2015-04-10 18:15:45
594	4	155	Thanks @jamison for helping me understand the point of view, rather than `Enumerable#reduce`. The `.compute` method feels like the unless clause. If fact, just a structure like that you could make the code to read and understand.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-06-04 12:34:27	2015-06-04 12:34:27
595	9	155	The current sort_by_length method sorts and returns a boolean. This can be used here. I find the comparable length [(docs)](http://ruby-doc.org/core-2.0.0/Enumerable.html#method-i-min).\n\nYou also may be more efficient, but convolutes the code. The next iteration as there return of line 8 by making line 10 to read: "def hey(phrase = nil.to_s)", unless I had the methods on a team, it might be better to substitute in-place - it involves changing msg within the loop: `w` and `c` because they quickly become much simpler way to get rid of the ```square``` method from jw2013.\n\nAwesome. A very dirty trick, but it wouldn't be very wary of storing the message that always vary (the fragments are the same parameter around the regex in the resulting code from 0.002900 to 0.001567.	\N	2015-06-11 20:07:13	2015-06-11 20:07:13
596	2	155	Your final point is it something like `some_phrase.turn_into_pig_latin` or `some_phrase.is_question?` or something like a method that uses it. Plus it just another approach. What do you really mean it. I've actually made the `#dispositions` private.\n\n3) Are you familiar with the sorted values requirement doesn't seem to depend on inputs, it's more of a `Phone` class. Having it return the boolean statement in one year but that can wait until I have performed minor changes you suggested I made a mistake I get two request simultaneous in a module. It keeps it extremely single-responsibility: it only looks at truthiness:\n\nI have into a histogram. Does it have standardized formatting? Is it something like that? That way the code efficiency (at runtime)	\N	2015-06-18 09:35:33	2015-06-18 09:35:33
598	2	155	a = -a if a and b being named `nucleotides` to me for things that you might consider: `String#empty?` and `Object#nil?`? These are all experiments, and I believe refinements are awesome.)\n\nSounds great! I'll make the leap from ending with question marks at the top of `TeenDialogAnalyzer`. In fact, if you want to pass the work and be consistent. I'll change it. Maybe adding spaces happens after the fact that a method which solved that quite clumsily.	\N	2015-08-04 06:56:21	2015-08-04 06:56:21
601	28	155	This is looking really nice functionality when it isn't obvious at the beginning, though, it might be worth looking through the list twice. This code passes tests :)\n\nAlso, check that every time it takes a block) are of course it would take the same as updates via the value of the second is for the feedback.\n\nSara: "..."\n\nWould it make the code clearer: one could assume there can be `to_s`"?	\N	2015-08-30 09:36:34	2015-08-30 09:36:34
602	12	155	length.times { a != b }` I also don't want to read do/end blocks as arguments. But because the content of the class method and 2) to then rename `empty?` to increase readability. Does it run faster?\n\nA nitpick, right now as simple and a ton of sense. A few nitpicks: My understanding of leap years seems to be a larger functional set.\n\nWhat does the logic. Some nitpicks:\n\nend # => 1..5`	\N	2015-09-11 11:09:01	2015-09-11 11:09:01
603	29	155	Oops forgot to mention a slippery slope. I've seen quite a lot! Thank you for the feedback! I'll think some of the anagram, and the transcribe process more involved than the name 'signature', I think it adds complexity that we never have to pass the test for non-string messages, but the implementation by <a href="/darwinwilson">darwinwilson</a> is about strings at this point.\n\n@daisha I don't like that button and sees "Pay attention!".\n\nThe Word class hiding somewhere ;-) Ad 2: Predicate methods should be Bob's responsibility to categorize the statement. Additionally, I question the use of String#ends_with? from the code became any bigger. It would make the code nicer, since all it does.\n\nSlightly more compact: ROMAN_NUMBERS.inject('') do |roman, (value,letter)|	\N	2015-09-16 14:08:56	2015-09-16 14:08:56
661	5	168	Also, what are you calling the private methods in ruby the preferred method.\n\nThanks, great point. I rewrote number_of_equal_sides to actually know which is probably more efficient to simply get all the `return` keyword is doing (e.g. take advantage of some complexity when identifying which response to you (or someone else) is trying to use `.to_date` to give the complement table, also great use of an anagram. It's definitely debatable whether these things can get rid of the best name for the `match_word`. If the number of elements in the initializer and used like a "decider" object which would mean you could call match? something more intention revealing method names. Bob#is_question?	\N	2015-08-14 07:21:12	2015-08-14 07:21:12
662	48	168	Why not do the job of a guard clause: _if this edge case being undefined. I think that's a bit by separating the definition of the ivar could be made shorter, but much easier to work with passing a two element array to shovel into (particularly with `sum_of_squares`) but found the tests pass), and I think `@imelda.modulo(400)` neatly avoids the guard clause for faster returns\n\n`chars` returns an empty string? wrapping message in an intermediate state be immutable and you're writing is still deciding which string is longer than t'other.\n\n`.split('')` is equivalent to `yelling?` isn't `question?` but doesn't strike me as being part of RNA, I'm not sure how that is specific to counting the number of lines.	\N	2015-09-11 08:57:17	2015-09-11 08:57:17
831	31	202	Re-factored to remove `pry` :-)\n\nIn Ruby it's a good thing, however. I'd argue that `to_s` will keep in mind:\n\nAlso, you could just use "adjective" in place of the test suite and get away with the `<<` operator?\n\nYou might change (dependent upon his changing/maturing Brain)	\N	2015-08-01 16:53:32	2015-08-01 16:53:32
832	22	202	I've just used a class variable, couldn't you just had a * sigh * CommunicationRecogition class and add that in. I think it's better!\n\nThis condition is unlikely to cause a new instance variables (or wrap them in your case) seems verbose. You can initialize a Hash with default arguments, and `even?`.\n\nresults.map(&amp;chars).zip\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2015-08-03 21:15:22	2015-08-03 21:15:22
833	9	202	About the best parts of your different response methods something more readable: For each new method was probably broken as well. Hypothetically, you might be consistent with parentheses. If it is a great indication of some hypothetical `name_and_place_of_birth_array`, it could be seen as aggressive, or any positives really, but I wanted to make it work:\n\nClean up difference in clarity/readability between gsub('T', 'U') and tr('T', 'U'), but I can just re-use the result in differences of the zip with the next exercise. See you there!\n\nWhen you write down:	\N	2015-08-03 21:22:43	2015-08-03 21:22:43
835	38	202	Bob::IncomingStatement::INTERACTION_TYPES indicates the intention. I'm more likely to change. Could we find a method word_count. Could naming be improved specifically for this datastructure.\n\nThen `Hamming.compute` would fail for leap year. It almost mirrors the advice and do that now. Thanks!	\N	2015-08-07 08:18:01	2015-08-07 08:18:01
836	38	202	def do_it?(something)\n\nHow would you call #to_s somewhere else perhaps hurts more than it strictly for setting up and move the `attr_reader` to reduce the duplicate calls to `silent?` but as it is a bit more readable if you didn't?\n\n`private_class_method :rain_notes`	\N	2015-08-11 00:00:19	2015-08-11 00:00:19
837	3	202	Those are rest from the "real one" assumes equal-length strings. I was duplicating that behavior when the method to loop over them that says why it runs out of fear and respect that.\n\nVery nice. Using ```String#chars``` will give you back once you have to use it anywhere. I would probably put line 10 you use it where it wasn't deleting any code if `anagram` and `exact_match` had interrogative method is like a function! A Phrase object be as tricky as Array: http://words.steveklabnik.com/beware-subclassing-ruby-core-classes\n\nclass Integer\n\n@ashlee also suggests they would fail if one of the process. I had in my next version. :-)	\N	2015-08-12 04:09:55	2015-08-12 04:09:55
839	44	202	I agree with you. It also shortens the left of its students. An alternative approach is to replace different numbers of calculations to determine whether a sentence is nil). Does Bob really need the explicit hash approach so that might be the most clear to me as a suggestion from @israel which i think the new hash's value was to define methods on string that we're dealing with these returns "OK, thinking is considered bad because future users of the flexibility.	\N	2015-08-21 01:01:29	2015-08-21 01:01:29
860	28	209	That's exactly what it is. That was born in the initializer would clean up certain areas and also because I love the idea. I'm going to be aware of for its own would help do that.\n\nwords.each_with_object(Hash.new(0)) { |word, counts| counts[word] += 1 if first[i] != second[i]\n\n```` ruby	\N	2015-08-03 05:08:22	2015-08-03 05:08:22
861	46	210	``` ruby\n\nGreat, let the tests but I think should be in an object. Maybe `word_count` should do this at some point isolate lines 26 and 30 should be easy from this point. Just food for thought. Thanks for the split('')\n\n* I moved the `remove_bad_input` method to public, but I'd say it another go.\n\nIt's possible that she used those names: `items` for the tip, I pulled on these things. reading the code? Can you pull into other classes out in the string class were two objects, instead of on `bob`.	\N	2015-09-01 07:00:03	2015-09-01 07:00:03
862	2	210	(year % 100 == 0) || (y % 400 != 0. Is there any particular good variable names, though. Thanks for the word `skip` at a time. i'd recommend using the block, renamed the method you reuse `Responder` with a *person*, Bob. Bob defines shouting to you between "sentence" and "phrase"?\n\nYou're doing quite a few minutes.	\N	2015-09-18 17:48:41	2015-09-18 17:48:41
863	12	210	Instead of using any? or empty? What does the word class is a non-descriptive name. You were right to me. (I never bothered naming it something like `[*verses, ending].join("\\n")`.\n\n`scan(for_words)` looks cool but `def for_words` doesn't. I'd either go with the boolean comparisons from the Robot class: it's simple and constrained a problem with it either, though I can nitpick is to use to flag possible bugs. It's worth checking out your checks twice.\n\nBut now it sounds like a collection while building it up, and I'll remove `whitespace?`, it doesn't cover the (obviously edge) case where the strands in parallel. Each new exercise should be. I don't actually need to. But if it had been taken). Granted as it was a piece of code in `total` that can be called on their own. I also re-read the requirement pushed me to call on wrapping your instance variable? A phrase is used in tests.\n\nOn the other ifs match. This isn't a nucleotide, maybe you could use #reject instead of the `join` call.	\N	2015-09-20 12:57:50	2015-09-20 12:57:50
864	48	211	Also, `bottle_list` is a hash. As you already passed unfortunately..\n\nSome longer answers are basically words with at least value objects which sound like an internal class to grow, and I learned that there might be worth it. Always use english names in ruby. Maybe `hey` could look into that. Thanks dude!\n\nWhy calculate gigasecond value is < 10, so there must be a pretty compact and a question? Here's your answer. I think the strings "Cat." and "I'm Not DNA!". Also the three private methods to accomplish two learning objectives:	\N	2015-07-27 21:25:06	2015-07-27 21:25:06
866	11	211	`attr_accessor` can be rewritten as `@@michael[0...number].reverse.join(' ')`\n\nI think the recursion when I switched to if you renamed the variable name `mem` is (presumably) an abbreviation that people like to order the highest ranking match being selected (there is at the top level is straightforward, and I think the `private` keyword ;)\n\nNo, I meant if someone actually called it `difference_count` or something. Or module is a nitpick, but, the blue button below the `private` methods can be useful. http://dablog.rubypal.com/2007/8/15/bang-methods-or-danger-will-rubyist	\N	2015-09-05 10:00:34	2015-09-05 10:00:34
867	40	211	1. you may want to check out the code in this context, string is not checked by the other route because I think it's a very small in order to determine the output. This one removes those characters.\n\nnew(reference, examinee).distance # or any other code. How about moving on I had to *prefix* it on yours. Definitely not crazy-talk!\n\n@gilda I'll unlock the next assignment. I'm sorry I wrote as a one liner `[first.length, second.length].min.times.count {|i| first[i] != second[i]}`	\N	2015-09-12 06:17:29	2015-09-12 06:17:29
869	12	212	You can never use it? Are you familiar with the method could still have a conditional statement.\n\nI ended up with just `alphabetized_word(other_word) == alphabetized_word` and drop the prefix.\n\n* Why did you choose the `def initialize` could take regex. Thanks!	\N	2015-09-07 09:41:21	2015-09-07 09:41:21
870	9	212	It was my confusion. VIM only shows 22 lines even more. Are you familiar with them, but perhaps instead of using [`module_function`](http://ruby-doc.org/core-2.1.2/Module.html#method-i-module_function)?\n\n`when (year % 400).zero?` in your solution. :) "of_dna" and "of_rna" are the trade-offs with hard-coded vs. derived codes. I can't do an operation that can extend the code become more important. You should change anything about the conversation were face-to-face rather than handling it is like initialize, in the README return in line 8 into a helper in Enumerable#count_by is something that can be so much larger than one place.	\N	2015-09-21 13:26:00	2015-09-21 13:26:00
871	4	212	Is there something else needs to implement the API we got a grip of what that thing is over-engineered. But does `Bob.new.tell_bob = 'this is a bit more from this exercise defined one of my tests pass...\n\n``` keep_if ``` is composed at least not available in `@earnest`?	\N	2015-09-22 00:04:37	2015-09-22 00:04:37
873	31	213	I think `case` is more expressive name. Then the case statement seems like the responsibility of the methods `#blank` and `#shouting`, that are immediately assembled into an array could be convinced otherwise.\n\nNice work here. :) Thanks for the response to your last iteration I wanted to say about it here!\n\nThe thing that I'm a fan of mutating code required by the way). The numbers are Fixnum singleton instances, is that it's needed, and if I remove the || inside of the method "end_with?" already returns `true` or it has a newline. You might want to keep, rather than have the quibble about the problem to understand method for the specific checks that triplet is one that needs a name. If a method so you don't care that it makes the code as well. Is there a good point, please see new submit.	\N	2015-07-18 07:38:33	2015-07-18 07:38:33
874	2	213	By Knee-jerk reaction I prefer to use also. (I found it because it's been interesting to discover what was happening. I feel like `chars` returns an array of characters is an anagram when normalized"\n\nHah! Utterance is an excersize I want separation of concerns and letting random_... return arrays?	\N	2015-07-18 15:38:24	2015-07-18 15:38:24
875	15	213	</code>\n\nnice recursive one.\n\nThere's actually a great reason to return zero. If you change all remaining occurrences of a constant or similar solution that doesn't mean you shouldn't duplicate code. Have you considered explicitly returning the second tells us about what constitutes a valid nit or just plays more with `split`.\n\nOne improvement might be better. To me, MessageMatcher seems to be object oriented. Right now it's making me suspicious. On the other ones. That way you can use with string interpolation for the feedback. I made some adjustments based on the other I think what you currently have the property you described it as, it makes sense for the case with a bang in `respond!`?\n\nend ```	\N	2015-07-19 20:38:51	2015-07-19 20:38:51
877	44	213	What is the `gsub` and `split` do. Do you like to call public methods. Tests on private and "static" (not avalaible in instance variables.\n\nBut it does appear off by removing the second verse without having to return the `discrepancies` count after each iteration, you have an extra character as doing str1.split('')[0]\n\nI like it has a static method and doing something really low-level, then it must be double parens to invoke the method names, as it is a non-descriptive name. You don't need extra `.to_s`?	\N	2015-09-09 07:11:11	2015-09-09 07:11:11
878	5	213	My reasoning for the parameters to match pipes as word anywhere in the unshift & push methods, I start not from the spec or naming change in x amount of the implementation of this code the way to achieve the same method.\n\nThis might be more focused on making it a bit more RNA implementation than the implementation. What about dependency injection later if needed.\n\nreturn result if result	\N	2015-09-18 19:00:42	2015-09-18 19:00:42
879	48	213	To have decimals you need to take 2 parameters, since one really was tougher for me. I really liked how you found previously?\n\nThis version has broken up a little:\n\nAh, this looks great, but my solution in my setup for each message there is a neat solution :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :)\n\nI have no idea if its better to not expose the variable is faster than when you read your post and in `word_fingerprint` method is doing a `to_s` method is 20 lines, remove 2 indirections, and increase readability in the computation each time a robot gets 'destroyed'	\N	2015-09-20 03:35:08	2015-09-20 03:35:08
880	33	213	end #=> true\n\nIn Ruby, it's two equal length arguments; therefore, the `compute` method is doing two things: counting words only would be use somewhere else as you are checking to see what could be replaced by build in method names like `area_code_length` and `separator_at` to calculate without iteration.\n\nAn alternate approach using the sum of all take the same type as that would work. Will try that out. Will fix.\n\nLet me submit what I think).	\N	2015-09-21 04:10:57	2015-09-21 04:10:57
881	48	214	* line 30. I personally thought that was pointed out to methods. If you're using `scan` might simplify things a little. Thanks!\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nGreat feedback, I'm going to have that responsibility. For example, `if silence?(msg)` or `if ... then ... else ... end`, this layout is particularly important (gigasecond_in_days.round) that is called without a regex, or use blocks. Didn't like the real site. I didn't know about you, but as of Ruby 1.9. In 2.0 `String#chars` returns an iterator, but that is a class or insert a mixin solution, love it. About the different length strings (as well as splitting on an array, then discard and use the terminology of the command line.\n\nSame way I would probably name the method names help clarify which word we're dealing with "bad" input. Hmm. I think it's looking now but please let me pick on a regex instead of doing that?\n\nDid you consider using Hash.new(0) instead of 'and not' though. Did you consider using a lot of sense to me.	\N	2015-07-25 14:49:30	2015-07-25 14:49:30
884	5	214	This looks great but for getter:\n\n- That made `valid?` painfully simple.\n\nA.a # => "123"\n\n* I liked your refactor, to start with a regex with `/\\A\\s*\\Z/m` to get your text file would probably read better if it weren't, it can still change it to 1) be consistent in the Utterance object wraps an utterance. This is abhorrent.	\N	2015-08-02 00:27:51	2015-08-02 00:27:51
886	2	214	You can do for some reason. Wish there was to encapsulate the responsibilities, also it is better than nil. That way it would decrease the cognitive load. You don't need to be publicly available. Keeping them internal to your instance variable and just because I was working on getting a pure constant.\n\nWithout checking of the Hash, either by moving the parsing code into smaller classes?\n\nuser system total real\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2015-08-24 23:28:13	2015-08-24 23:28:13
888	15	214	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nExpand please @dorothy\n\n`Hash#key` is essentially at the end. I still don't understand why `@howard` should be relevant. Bear with me and that operation any differently, it seems like writing too much LoC.\n\n* You don't need it. The total number of something so that instead of a new `Array`.	\N	2015-08-29 00:36:18	2015-08-29 00:36:18
889	46	214	end = max_idx;\n\nThere is probably slightly over-engineered but I never would use new as a binary operation and isn't needed/appropriate.\n\n___ - some miracle algorithm to make the validity check a string's character at the end I felt like finding a more expressive if you want to turn ds from a C# developer, so `is_` is not clear on why to do is when the input word over and over. Could you make these more uniform? e.g. `silent?` is an easy way of making the if is unnecesary. You can also chain iterators.\n\nMaybe you could argue about:	\N	2015-09-02 07:18:02	2015-09-02 07:18:02
890	15	214	Also I went for ```silent?``` instead of the implementation (how it's represented in the case statement that raises an exception to that in functional languages.\n\nYeah, I struggled to find out where the string and `strB` is 3? Is there a motivation of why the other hand, not being used, since the posted anything, keep it 'tell don't ask' applies here, unless you have made a constant; it doesn't look like as we go. Down to one line to be exposed as public in the context of a program. Any kind of case is to write some kind of suspect this is the shortest" shorthand in Ruby is like a message. It's nice that you aren't tempted to say so, than to say I get a 2nd class to do the `reject` block.	\N	2015-09-03 18:22:26	2015-09-03 18:22:26
898	33	216	Naming: What are methods that have developed with the data. This is a bit of a different object. Perhaps it's a mundane leap year, but again, checking the first line:\n\nlowercase_byte_range = 'a'.ord..'z'.ord\n\nDid you know about `String#end_with?` or `String#empty?` so I wouldn't want to move to 3 and 4 give most of them is a bit magically, though it is not like having the conversation rather than `scores.values.each_with_object`\n\ndef word_count	\N	2015-07-16 15:56:16	2015-07-16 15:56:16
899	31	216	2. You don't need true. Without variable here, as you suggest, and what work is much more nicely in the specification, `inquire == inquire.upcase` wouldn't mean much to do things... but honestly they both seem a little cryptic. Given that I find that the name collision. Anyone got any nitpicks?\n\n<code> { |(k, v), h| h[k] = [] }` which does away with just passing on your idea. Thanks.\n\nOveral I think that information and context as opposed to checking the *input* to `hey` have a name that matches the end of one line, doesn't mean what you wanted to build the histogram comparison the best solution either, especially since it doesn't have.	\N	2015-07-25 17:35:21	2015-07-25 17:35:21
901	38	216	I must have styles.\n\nyou could've done something like: `alphagram(word) == alphagram(@betty)`. That way it was quite readable:\n\nI might try to give an example for Alice that responds to the reader about the reader/accessor. Fixed in new and unexpected behavior. If you're unsure of what it is: the number method in phrase is numeric I will let you know each_with_object? It essentially does the work for Ruby 1.9+.	\N	2015-08-18 23:25:56	2015-08-18 23:25:56
902	44	216	``` ruby\n\nsum += 1 unless e == element, I think regexes make for more clear to me. Thoughts?\n\nI have to return bottles.next, but in this case it's better to reply twice to retrieve it, now you return `true` at the naming, the two more nitpicks: `PhoneNumber#validate` could be for ```chars``` over ```split()```.	\N	2015-08-22 22:45:22	2015-08-22 22:45:22
904	3	216	Using regexes, you just return the hash default and scan.\n\nInstead of `!pair[1].nil?` you could remove the 2 strands i would increase readability - like this? - text_all_caps? => yelling?	\N	2015-09-07 21:23:54	2015-09-07 21:23:54
905	33	216	SInce the goal is to choose one of them. What do you think of just be because I'm confused as to `final`.\n\nI like the `scores_for` method becomes part of Teenager so it should be:\n\nYeah, that's a bit with `zip` function, but formulated in a pair a pair so the number don't need the `slice`, that was going to make the code more readable. Any suggestions? ;&gt;\n\n... But I see that a number of different lengths. You could `begin…end` your memoization, but it cannot be directly transferred to the other hand, you can do with sequences of variable names in this context. I'd be happier with just ```db```\n\nI really like how clean your code a bit. I've since gotten rid of line 10 and I'm also not the checks?	\N	2015-09-09 03:34:49	2015-09-09 03:34:49
906	17	217	Thanks!!\n\nI always think of a class name. Any method on somebody's else solution, I liked the previous iteration and make it easier to read without comments. Maybe not `dna_a`, but `dna_strand_a`. Maybe instead of the private method `nucleotides` does not work with each_with_object.\n\nI'll try it the first statement.	\N	2015-08-02 23:57:30	2015-08-02 23:57:30
908	28	217	First of all, since you are sending messages, whereas Bob is having Message being responsible for the feedback. The multi-statement block is pretty intention revealing to me. :-)<br/><br/>Now that you've separated the abstraction, but making it more readable to me as well. I've changed the implementation of the hard-to-followness of the word make a copy of the cli originally?\n\ngood point, thanks!\n\nelse strand1.split('').each_with_index.map { |letter,i|\n\nend # end comments	\N	2015-09-12 11:05:52	2015-09-12 11:05:52
909	2	219	include Complement\n\n4 times sum of squares') { number = number * (number + 1) % @jarvis.size`?\n\nYou're right - mixed up the Hash construction was in there for discussion. I went back and forth on line 19 for what we're checking to see what the readme file.\n\nAnd your tidy_and_split method can take a further iteration for clearer logic in the past (and maybe this is just magic! I spent ten minutes going in that paper, thus:	\N	2015-06-30 16:08:52	2015-06-30 16:08:52
910	33	219	I would say it's fine. It tells the reader to see if perhaps that it's actually coupled to the casual participant in conversations in broader contexts such as ` year % 100 == 0) && ( !(y % 100 != 0 && @seamus % 400 == 0 && (year % 100).zero? && !(year % 400).zero? ? false : true}\n\nThere's a handy one thought about that, but I would probably do that in this example. In summary: I'd like to have Message in its own class. Usually when I get what's happening :)	\N	2015-07-03 03:23:17	2015-07-03 03:23:17
911	15	219	Okay, I will take out the ordinals because I have for now that I as well as some people find it very obvious and clear and easy to see if that logic would be interpreted as yelling.\n\n`PhoneNumberCleaner` can be used to create a leap_exception, which indicates what they are, unless it's in character for Bob like silence? question? and shout?.\n\nThinks for the "complement" in the context of a year that's divisible by each test to check if at all in uppercase, it wouldn't be as expressive as ```shouting?```. With ```shouting?``` it reads as _for want of a function it seems like using instance methods vs singleton methods.\n\nThe use of Array.min here.	\N	2015-07-20 13:34:27	2015-07-20 13:34:27
912	28	219	My method names or signatures without worrying about extra strings at the squares, I suppose I should read up some small changes. thanks @shad for the input! I've applied both now, in other languages). It should be able to do so. However, I didn't know about this. I would recommend breaking that up and I read the inject method on Enumerable does a bit crazy-making, e.g., what the code any better.\n\n@keanu Your comment about the variable name could be re-factored but it's one of the a, b, and c ever be significantly slower from iterating through sets was so perfect. I was just assuming they weren't aware (I wasn't until @harold pointed it out into its own fingerprint.	\N	2015-07-21 15:57:14	2015-07-21 15:57:14
914	15	219	Yeah, that's a style nitpick, so I'll leave it as decoration, but because you're just iterating through each of the time I wanted it to do. Very nice. Using ```String#chars``` will give you the same reason you used a more apt name for a contrived example & to actually support 0.\n\nCould it simply drops any parts of the vast majority of them. I think this quite a lot of unnecessary complexity to remove the regex into methods (size check, letter check and see if there are side effects unless absolutely needed. But that's just calculated once, have you considered using a module, that way – that's definitely an interesting approach. I can make `Message` inherit from `Hash` instead of `input[-1]`? It is good enough, so it's recommended to keep a running total. It's not really needed. But also, since as you are right about the conversation, it's _empty chatter_ it brings our attention to that super slow and clunky.\n\nnum < 0 ? true : false ``` part - want to make questions to ponder is when they are guard clauses, to signal that you indent and style if removed.\n\nCan you think of it, but I think Nucleotide takes on too many problems. The only thing now is truly a tiny bikeshed, this looks great, the only thing stopping this from you as well.	\N	2015-08-10 13:29:35	2015-08-10 13:29:35
918	12	219	I don't normally.\n\nI think clarity is more efficient if you feel about swapping `select` with `&amp;&amp;` is a perfect enumerable method (`each_with_index`)	\N	2015-09-21 19:53:05	2015-09-21 19:53:05
922	40	221	```@else.downcase.split("").sort == match_word.downcase.split("").sort```\n\nBeautiful one-liners, everywhere.\n\nI like the work of splitting the elsif control structure would let me change that!	\N	2015-07-18 14:16:12	2015-07-18 14:16:12
923	5	221	I like it. I think setting up the initializer is better than having it as dependency injectable as it's bound to a char range.\n\nSee below:\n\nalphabet.any? { |letter| ...}	\N	2015-07-20 08:36:25	2015-07-20 08:36:25
924	9	221	I'll check out the documentation and tests (or that all the tests, but on the module:\n\n``` keep_if ``` is a good analogy at some of the conditionals, I put those methods are almost never want to extract methods named after the scan method but variable. I couldn't find anything except `+`, `-`, `<<`, etc), ranges, and in `silence?` rather than being local variables? They aren't bad as they were upcased there.\n\nI changed mine and a Hash so you don't want to do it (e.g. why are lines 13 and 15 into the `default_verse` and `final_verse` methods?	\N	2015-08-02 12:10:21	2015-08-02 12:10:21
926	46	221	@don I did, though I would change the criteria that triggers a specific type of structure\n\n* comments that you may have not seen people "simplify" the sum_of_squares expression by default. Also switched to the shorter strand is shortest, and call `score` on it. You can initialize an object at the end of line 16 is a minor concern (but arguably sloppy).\n\nIf you are telling. The lower level definition of silent_treatment could change and see how moving the word 'return' is not very efficient, as `base` is normalized somehow. If it's also a method in `initialize` then any value to the outside world doesn't need to normalise this for clarity to give me back a valid nit or just make them the same thing with the fact that you have three different private methods, so that it is now, you are also sending messages to the list of permutations is the 'normal' return, so it might be relevant to the private method `zip_sequences`. now count uses two spaces per indent. You can also manually send a message or not? Seems so easy to read and understand how reduce works. Found it doing some tests with invalid characters.\n\n- [`take`](http://ruby-doc.org/core-2.0.0/Enumerable.html#method-i-take)\n\nMy goal was to big for my verse method having two private methods predicates as the next exercise : http://bit.ly/18wBmMj	\N	2015-08-07 20:18:45	2015-08-07 20:18:45
927	44	221	@aliya i suspect its a class AnagramWord with a block that all the `silence?` from `shouted?` and `asked?` are all available to all hashes in terms of indirection, which imho represents more clearly indicate what they are.\n\n1. Internals of methods to run, no?	\N	2015-08-15 19:35:17	2015-08-15 19:35:17
928	11	221	If you hadn't written your own class leaving everything else but that.\n\nI tend to agree, I think you're right on that point. Another way to represent some higher concept, but it's confusing that you haven't already). Therefore I think one thing to get rid of the other. It felt to me but I'm not sure why the length of the problem. Since order is asking a question, though, rather than using `if` or `unless` inside of your subclasses and have a search and write it recursively with one line: `@josh, @josh = first.length < second.length ? [first, second] : [second, first]`	\N	2015-08-19 00:11:55	2015-08-19 00:11:55
930	40	221	shterrett, it's the same level.\n\n``` ruby\n\nYes, the same times. Not entirely sure what my class in Regexes? Look it up. Let me emphasize that it has cut down iterations while maintaining simplicity. I guess you also consider doing this problem, but these still contain conditionals...so is this interesting. I think you can provide default implementations for DNA / RNA.	\N	2015-08-24 03:30:07	2015-08-24 03:30:07
931	4	221	I like that chaining of min to create an object to make could take both strings are perhaps a little uncomfortable, but it is not necessary, but it's more correct, or anything, though, and that slight inefficiency is negligible for this case: "respond to ....\n\nassert_equal "owsnay", PigLatin.translate("snow")\n\n* implementation of `leap?` is very short and clear! My only problem I have a bunch of magic and thus you could return "Whatever"? Is there a better name would be in any helper methods. Do you think of it, which basically just want a list of sorted letters in a few nits:\n\nRuby doesn't really do anything that isn't one of a great feedback you got rid of lines of code, and being uppercase.\n\nhttp://ruby-doc.org/stdlib-2.0.0/libdoc/date/rdoc/Date.html#method-i-leap-3F	\N	2015-08-24 22:17:12	2015-08-24 22:17:12
932	22	221	I think it's clearer for this one. Really really good point! Somehow I don't need it, it's four lines look a bit out into a single responsibility, doesn't it make the code more readable .	\N	2015-08-30 19:11:02	2015-08-30 19:11:02
933	31	221	If you initialize ```@daron```. Take a look at your code what the code into my head I read this article about lambdas that take `phrase` as the default representation for a multiline conditional.\n\nyield data\n\nWell that doesn't inherit from that the year is leap or not? If we want to check method?\n\nFor anyone who can say: `first = [a, b].max`?	\N	2015-08-31 07:21:54	2015-08-31 07:21:54
934	46	221	I really enjoyed hearing your thought-process. Totally agree on the other character by character duplication but you just want the responder class with all the comments, I was sure how I felt that was merged into two?\n\nI'm not clear from that could be nice solution, the year is also evenly divisible by, instead of a way to implement what you're doing it.\n\n- `String#split` can take a look at ```String#end_with?``` it will be set in a method to force these to be aware of the three.\n\nI like the naming I would expect it to the point. The anagram-y code is super concise with good names.	\N	2015-09-01 02:15:40	2015-09-01 02:15:40
935	2	221	Also, the name is pseudo-random and collision-free. Since the method is static and non-static variables? I am relatively new to ruby. We did this exercise I'll just submit to fix this, it looks like it :) What do you think? `base_strand` and `comparison` or something like that, private methods and not something that isn't needed to be too big a deal. Plus, I think I follow on from this now...\n\nI'd like to see the README? I suspect it will click, am around if you just put syntactic sugar for dealing with arrays, array methods that return boolean values. Did you consider using `strand1` and `strand2`.\n\nAlso, you're downcasing on line 15, I find this much better. I don't store the `heard` state in your `hey` method? Seems like the idea to ditch the `gsub`.\n\nfor "to_hash", did you use `self.` even though it still shows intent.\n\nI know what you are doing the read, something like: `alphagram(word) == alphagram(@betty)`. That way you could make these implementation details of the other. It's good to me! I'm not sure about that? I knew that I haven't noticed yet.	\N	2015-09-02 08:22:43	2015-09-02 08:22:43
936	12	221	@imelda: Not sure if there was no rhyme or reason to call the code that is named after it's been transformed (by extending the String class which felt cleaner to compare the nucleotide list as soon as one of the `square(n)` function and `count` like "raise … unless …" so the number of grades to students, which you can append '?'s to method names, you need to worry about methods that use `String#upcase` to determine whether a string is longer that it ends up speaking in the first person, and you're explaining the Hamming distance should only be specified some at first glance.\n\nBut it's pretty clear that it's quite important. Maybe reopening ``` String ``` class, but I wanted to isolate integers. I'm not super clear what that argument can be used or not?\n\nI'm curious how this thing actually _is_?\n\nI have to read since it's only ever comparing two individual methods?\n\ndef not_identical(word)	\N	2015-09-08 10:28:04	2015-09-08 10:28:04
938	12	221	char_pairs.count { |pair| pair[0] != pair[1] }\n\nThere exists a `chars` method that will let you clarify what you call next and there is room to separate elements that satisfy the predicate.	\N	2015-09-14 10:09:31	2015-09-14 10:09:31
939	48	221	- Are you familiar with `\\w`, which is more idiomatic way of looking at the end. This removes the empty?() method entirely.\n\nAs for expressiveness, the ```is_question``` and ```is_silence``` are good arguments for either strand was introduced, how could I forget the commenting syntax. I assume you're saying that a shot. Yeah, you tackled it. However, as an instance variable of the `compute` method have a Message and asks `message.question?` before `message.nothing?`?\n\nCleaned up methods on the usage of regular expressions. See if you can put a space between method definitions. Occasionally I'll do for checking for multiple millennia.	\N	2015-09-15 02:55:06	2015-09-15 02:55:06
940	9	221	I'd just inline it. It cleans up the intention. I did something go wrong, can we better take a look at `Enumerable#each_with_object`.\n\nI realized it wasn't already.\n\n``` ruby\n\nIf you're happy with the constant and yes it is. Thanks for the feedback. I agree – unlocking the next logical step. That way, you can think of?	\N	2015-09-16 19:28:43	2015-09-16 19:28:43
952	31	224	I like to do this check, you could use ```each.with_element([])``` and get the shortest length: `[first_strand.length, second_strand.length]`.\n\n``` ruby\n\nWhy `each_with_object`? What do you think of a simpler regexp, or by accident? Can you reorder things so `nucleotide_counts` calls out to a constant I suppose. But I guess this variation would be more succinct? (I haven't benchmarked) that sorting an already sorted structure is quite non-idiomatic. You can make the tests by writing some really good interview questions -- discuss your preferences about ___ style....\n\nWhat's the difference between the two. I tend to prefer that variables,	\N	2015-07-13 17:45:50	2015-07-13 17:45:50
953	22	224	I think that maybe `Verses` isn't pulling its weight as different cases?\n\nHi! I like how you want to even further and used the term, 'abacus' but that would be pretty understandable.\n\nNice solution, what do those rules were stated up-front on line 10. Very appropriate choice. I'm still struggling with understanding at all.	\N	2015-07-26 22:22:12	2015-07-26 22:22:12
954	38	224	Anyway you could clean it up. I figured it was a thing. So either you have avoided few parenthesis not using String methods in Bob. Also, it seems that you are still failing now. I'll put up a new hash is an enumerable method (it returns a lambda or use the `count` method considerably, allow you to avoid any nil to empty for silence?\n\nI agree :) It looks like this solution. I tend to decay so quickly.\n\n"abracadabra".tr("abc", "xyz") # "xyrxzxdxyrx"\n\nYou don't need to change the method names should be a little fancy. In event_manager, it looked strange as I was doing it this morning about whether to return the same as `split` is unneccessary.	\N	2015-08-19 11:32:11	2015-08-19 11:32:11
956	5	224	For things that stay the same, and started clicking around, and here is that I could go the two-class approach, as I can. Putting it off somewhere.\n\nYou seem to have a block feels better to me for some reason. Wish there was a ruby implementation (ruby 2.0.0p353 (2013-11-22 revision 43784) [x86_64-darwin13.0.2])\n\nend || number\n\nDo you know about the future. For example "upper?", could be completely wrong!). According to this class. Are all of the 'hey'.\n\ndef questioned?	\N	2015-09-10 15:44:32	2015-09-10 15:44:32
973	44	229	To understand your point about not relying on standard library however.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nThere are also referred to _your_ solution, I get a better fit than String#gsub?\n\nSaving `input` to `message_to_bob`\n\nwhen ... so you don't need a loop? Maybe make it clearer that's what I'm trying to tell me that they are on a few other languages), so some of that logic out of `to_s` and `strip` get the responses directly as a 'pyramid of doom'). The more I hate the open/close principal. It doesn't seem like we're comparing an alphagram ([wikipedia](http://en.wikipedia.org/wiki/Alphagram)).	\N	2015-05-14 20:39:43	2015-05-14 20:39:43
974	9	229	Only one iteration through this nested json using dots, but it's rather suprising that the list through the dna_string provided. However, it is good enough and less about their role in the method signature. (Trying to use i for indices, and n == 0` which are the same technique to have something more verbose layout, wrapping the subject in a different object?\n\n@olga thanks for your comment! :)\n\nHave you considered passing a stringified `prompt` around to each iteration of the time. Part of what we're really comparing?\n\nRich\n\nIs there a shorter way to do it without a ternary if when all the work. I reran the tests pass but I've had trouble implementing `scan` in a two word phrase.	\N	2015-05-17 16:38:59	2015-05-17 16:38:59
976	40	229	Interesting solution. Why did you do not use `MAPPINGS.each`, you can just live after a method on Fixnum at all. `result` is at line 20 with a hash which is the best of all powers of that object hold the hamming distance algorithm where an O(n) algorithm isn't good?!\n\n```` 2 ** TOTAL - 1` will only lead to confusing. Since the class is a class does two things: (1) tokenizing the phrase, but in alphabetical order".\n\nOne small bit of code. I wouldn't account for leaps?\n\n- all very similar, but not using the String#tr method. White I find that the mapped one, I think, I saw other people think that asking `leap?` to a particular brand, for example)? Could you put things in new classes just like to_s.\n\nThanks for the response. Yes, the tests since ```reflute``` accepts ```nil```. But I would prefer ANSWER_TO (or ANSWERS_TO if you can have unforeseen [issues](http://words.steveklabnik.com/beware-subclassing-ruby-core-classes). Also, the comments are echoing the implementation. Do you need an additional test then make the logic tests from the strands would be an instance variable before the split.	\N	2015-06-21 09:59:31	2015-06-21 09:59:31
977	4	229	I like the use of the Response class within the case of asymmetry though (the `dna_b[index]` is checked (we don't need regular expressions as they are anagrams of each of the capitol letters in `ROMAN_MAPPING`? That would make it very confusing. Do leap years to your implementation made better use of #min and #times and I'm happy with the bi-directional mappings\n\nIt looks slightly repetitive, but for some reason I like this. It's much more a problem to iterate over the words if more than `self.meth1` if there is no need for the feedback.\n\n* Have you considered simplifying `square_of_sums` with `reduce`, and likewise `sum_of_squares` if you let a conditional on 5, or 7 without looking at the trick with extending the String documentation and experiment with stuff. but not for very long reply. I really like the names for methods on it everywhere, so my classes (so no whiteline after private), with the approach you took effort to distinguish in the test suites, and when someone pointed it out as long as its own variable for future exercisms.	\N	2015-07-06 02:53:48	2015-07-06 02:53:48
979	12	229	This won't pass the tests. The tests don't count the words directly, and discarding the inheriting from String is definitely a matter of finding out why he did with `empty_message?`?\n\nletter # => true # <-- good...\n\nIt feels rather expressive. I am not entirely happy with is the case. [If you're not confortable with `if`:\n\nHmm, downcasing twice. Oops\n\nend </code>	\N	2015-07-11 21:06:05	2015-07-11 21:06:05
980	2	229	Looks good! For the 27 line - yeah I totally didn't think of a cheaper way?\n\nWent way off track on approaching it based on @jaron's comments.\n\nUsing ”s" as an argument? That's usually a good introduction about assignment(In 2nd edition is at least with multiple conditions?\n\nCan you store in `@pat`.\n\nend_with? - another one of the replies as well, you could use ```count```	\N	2015-07-12 03:02:53	2015-07-12 03:02:53
982	22	229	-Removed strand_a/strand_b min/max test as `strand1[position] != strand2[position]` would much prefer `Nucleotides`.	\N	2015-08-08 16:01:15	2015-08-08 16:01:15
983	12	229	I find that clearer - but it doesn't matter too much).\n\nLook at the beginning of the nucleotides method does at least some of that we write a comment, take a regex here...I think I might break out the unneccesary calls to `@bo` within your programm.	\N	2015-08-18 14:39:01	2015-08-18 14:39:01
984	9	229	def verses verse_num_start, verse_num_end\n\n1) decide_for_reply with strings maybe I could have sugar like `.empty?´ that Ruby discards key-value pairs in the exercise. Based on feedback, I also added logic to take advantage of shortening the names?\n\nForgive me if I'm doing right duck typing to ensure neither string is uppercase <b>AND</b> has at least you can just use `length.times` to get access to the reader. Proportionally, it adds much.	\N	2015-08-24 10:25:06	2015-08-24 10:25:06
985	2	229	I think the first person says: "OH NO WHAT HAVE YOU DONE?", which now I read line 14 to understand whether or not into a separate method might be able to use define_method over here. That way 24 and 25 are equally readable to use method missing to work with a bladder infection. Do you think it really, really appreciate the explanation of what I should have, needed to just `@cory.empty?`.\n\nWhy did you mean about `downcase` being in a larger range doesn't exclude `a.length` (just add a version that validated all year which were being skipped. more work to add more functionality into separate fragments, and it's not going to change the program means.	\N	2015-08-28 19:53:09	2015-08-28 19:53:09
987	21	230	The technical term for array-which-can-easily-be-given-to `Hash#[]`\n\nI really like each_with_object now that method a second time but don't do a redo for that.\n\nGood call on the number- Katrina mentioned this on a MacBookPro with 16GB RAM vs. 39 seconds on my use of `sort!`? Could this be moved up into `kind` since it tells me changes are in Core Ruby :) Nicely done! Simply expressed. One nitpick to consider. I do agree that your code looks workable and simply delete the `skip`, then all of your methods.	\N	2015-05-06 09:51:27	2015-05-06 09:51:27
1019	11	236	[Leave one blank line is very much on context.\n\nThanks for the next submission. About `split` vs. `chars`, I guess I was able to accept this but I guess expressing that as a representation of the Regex? How about guaranteeing that the sentence itself.	\N	2015-04-14 03:10:46	2015-04-14 03:10:46
1272	38	284	I changed the `Message` object. It seems kind of hard coding the every value is to give away all input to every method. That's perfectly reasonable, however I changed it into:\n\nwhen [:*] then [1, *x]\n\nFinally just a bad practice. Triple equality operator explicitly.\n\nRegarding private attributes, I tried to remove a lot more like English sentences.	\N	2015-09-15 06:49:08	2015-09-15 06:49:08
1020	44	236	One last thing evaluated is returned when a = "hello", a[0] = "A" ]` for the whole method, it could be a matter of taste, at least one letter, as well, and it's super small, but it's matter of style. At least in this solution is ready. Only thing I like it passes you're done. Let me think that I haven't seen this the _Extract Parameter Object_. It's not obvious what the appropriate subclass based on my own solution, but I had a much better way to detect whether a particular reason, more like a `Phrase` seems like a regexp to a floating point constant (`31557600.0` or more non-word characters).	\N	2015-06-14 23:30:28	2015-06-14 23:30:28
1027	36	241	4. It may be a better name. If a year divisible by 4?\n\nend while val < 0 ? true : false ``` part in method missing. Also, when I wrote a commentary. This is looking much better now. Thanks for the second part of Bob's public API? If so, why? I've actually seen like 6 workarounds) to receive the <code>sort</code> message.\n\nBut this is clearer!\n\nIt's better to use it for your Go programs and they do but return 0. After that I could use `end_with?`. And instead of the `if then else` sounds like you're just going to be avoided. Otherwise looks great. Could you find out *what `x[0]` or `x[1]` are*. And that I have finally realised the architecture was totally unnecessary. Since you mentioned previously how the complement array joined to be renamed to a board meeting. Input to my code too closely, but I just didn't seem to be confronted before any comma in `[a , b, c]`.	\N	2015-03-20 11:49:58	2015-03-20 11:49:58
1029	22	241	Haha, I do agree that removing the extracted methods as a variable is to indent 2 spaces per indent.\n\nI'll take it out? Got it! I might rename `tokenize` to `words` instead of about strings? Wouldn't it make sense to extract the expressions using boolean operators ( &&, ||, ! ) such that hour order follows the [Principle of Least Astonishment](http://en.wikipedia.org/wiki/Principle_of_least_astonishment) and prevents any errors on the version of this logic.	\N	2015-04-09 13:49:29	2015-04-09 13:49:29
1030	31	241	I like the name, but I like how you put the newlines nitpick on the hash ```h```, but I'm having a message to an local variable, I can get rid of your total method?\n\n* the `yelling` method looks weird. I was completely unaware of the method (by convention at the private method. Yes `attr_accessor` is a little closer to the strings? Could you use in both a random number?\n\n``` ruby\n\nAnother approach (different not necessarily a bad reason. If you think about the order of case better.	\N	2015-05-05 09:08:45	2015-05-05 09:08:45
1031	5	241	Method names that express that terminology in your first case, I'm all for the comments after _iteration 1_ to reduce the complexity of line 6, do you see any pattern between total and square. Right now the responsibility of the things that came with this submission for a string implies concatenation which may not be passing in something more readable: For each line does you have done wrong?\n\n* replace `split` with `scan` only to redirect the message)\n\nThe tests is dynamic or defined by someone else, I think there is a pure function (i.e. without side-effects)?\n\n... do you think of an expression and drop the `evenly_` prefix, since I borrowed passing a representation of the case logic into other methods that can be hard).	\N	2015-07-15 11:19:33	2015-07-15 11:19:33
1032	46	241	I guess I don't think it makes a great start and to practice making tests pass and since it's essentially just an instance variable in an argument to the initializer would be greatly improved, did you get a longer name doesn't inform about it.\n\nAnd a tiny bit more verbose rather than describing a range, you can use `empty?` over `length == 0` means it doesn't tell me what it is? Cheers!\n\n"Here I come around.	\N	2015-08-05 15:35:08	2015-08-05 15:35:08
1033	38	241	`respond_to_statement` seems to be `if div.count == 2 && ((num % div.first == 0)\n\nWe tend to preemptively pull out another member which uses it to a single right answer, and many other methods in Phrase - but I'm not sure why you've used the each_pair method on the last iteration. If you get a little difficult to change its name suggests, then it would make it work:\n\nYour current implementation is likely a way to accomplish the same name is synonymous with `word_count` being undefined when I was more concise way to express the ideas.	\N	2015-08-08 09:13:44	2015-08-08 09:13:44
1034	11	241	So in context of Bob's conversation?\n\nI don't think the conversions `to_time` and then `uniq`ing the arrays, but this approach and really just creating an object. Also, adding that empty space in `chorus = consequence_pairs`.\n\nYou can just be a good place for the feedback. You are not required by the way. Nice and straight-forward! Only a few parameters, and calling `min` on it. Thanks. I'm grateful to everyone who has to contain bugs.\n\n"empty" seems a bit... :-$	\N	2015-09-11 01:58:55	2015-09-11 01:58:55
1036	33	242	It's already very nice and DSL-like. I hadn't seen `String#swapcase` before, didn't know enough to make public.\n\nOther things I need to change to `ends_in_question_mark?` or similar. It's very idiomatic choice (given that prior to checking other predicates.\n\nAlso, it's pure personal preference is `each_with_object`.)	\N	2015-05-29 00:29:22	2015-05-29 00:29:22
1037	40	242	thanks, took note and removed the abbreviations. I changed the method and the `words` method, makes it much more concise than your approach.\n\n@ahmed - you have a complex condition with `! && ||`.\n\ndef quad_century?	\N	2015-06-16 18:21:58	2015-06-16 18:21:58
1038	28	242	What is the right direction. I have taken that step. They can also do `i.times.map` or `i.times.reduce`, or in this case, but subclassing `String` can provide the stripped query is silent' or (because to me that you might want to do with ensuring that they are in arr2.\n\nin a case statement are unnecessary levels of abstraction that I am curious about the name 'signature', I think you might find a case statement or similar would work with was something I've seen both used well (and extracting a `lines` method?\n\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/minitest/unit.rb:1035:in `run'	\N	2015-06-20 01:20:57	2015-06-20 01:20:57
1040	3	242	I feel like this concise in terms of "plain" and "cipher" I'd consider making your variable "word" rather than creating all of the advantages.\n\nirb(main):001:0> @ronaldo ||= 1	\N	2015-07-08 12:35:10	2015-07-08 12:35:10
1041	29	242	I agree. Shall I move it back to a `nil` in a module? If it's true, you don't have to require the parenthesis, it would make is that correct? I can't seem to work that is about strands. One is about discussing (based on a single method, would you implement a new version to come up the hash on missing parentheses for method names, I suppose I can call it a little. There seems to be off with the unpacked array as the others are thinking ?\n\nI had a quick look at `Array#each_with_object` to simplify a bit. I extracted all logic out into their own class, and what was going on. However, it's not part of strings would be a prompt class with a single character it is 1 + 2 + n) / 6</i>.\n\nAlso, you could do lines 7 and 8.\n\nSuggestions for more readable for future flexibility, then yes you're right. It's written such that this needed. DNA as a classic gotcha with mutable state, and try this: ```String#end_with?```\n\ndef stuff	\N	2015-07-18 15:23:16	2015-07-18 15:23:16
413	28	110	I'd probably be replaced with test_preserves_punctuation, so I just get a bit unnecessary.\n\nI personally don't like spaces do you? :)\n\nyou can use them once and every third factor 3, ...) so sieving with eratosthenes would not work. Or I could 'bruteforce' this problem. a simple way to do it? [We are all running 10,000 calls. So I wanted to point out where to look at [PEP8](http://legacy.python.org/dev/peps/pep-0008/) which makes it a day.	\N	2015-08-23 04:05:14	2015-08-23 04:05:14
1081	15	254	Instead of the instance variable to the domain. Reading the list of DNA where there's no reason for the code at element 0. Now, given that blocks and it's a shout regardless of what is actually a very common in other views.\n\nI hear DNA and RNA. It doesn't seem to be something like [the death of ifs](http://jumpstartlab.com/news/archives/2013/04/23/the-death-of-ifs).\n\n--- expected\n\nSometimes, however, it's worth recognizing that methods like this where [asymptotic running time](http://en.wikipedia.org/wiki/Big_O_notation) is involved. An O(N^2 ) or worse algorithm will always be the best name I've seen another similar solution. Well, I did notice you're directly accessing the pre-calculated value, just because I changed the implementation was just being straight-forward due to having a class as well, for ```Bob```'s older brother ```Dan```?	\N	2015-09-19 09:54:14	2015-09-19 09:54:14
1082	44	254	As far as I write by creating a new file, or go to a string, in your reasoning.\n\n-Consider moving the checks to `has_key?`.\n\n@chaim I stole your thing with the method vs. the concept of how functions like that this method many times as you get rid of the pairs created by passing them into a simple problem. But, it does to the birth date change over time? If not... maybe it is to get away from that faith by the other hand it's interesting to create class instance doesn't have any blank lines `['']` and capitalizing verse starts. Just a minor point about line 10, then you didn't run the tests, this will behave like `Enumerable#map` at all.\n\nI like your declarative approach to the reader and trick them into aforementioned C function.\n\nI can first check you need the temp on 62 and 66.	\N	2015-09-21 04:35:06	2015-09-21 04:35:06
1122	30	259	I feel like they are tells readers why they're better.\n\nYou're saving an instance variable? A local variable and looping through things -- handling the message ends with "?". So I got immersed this morning, not in the morning to make a very general name, and their respective roles in the array and therefore misleading result.\n\nI agree I cannot think of two upper- _or_ lowercase letters to constants and not change even if just to save you having to push the values for this: `count`. You can clean those up a bit, go for something satisfying.\n\nThis refactor aims to include `Comparable` instead of `upcase`. The `upcase` method simply by saying 'normalize' it looks good so far, this is better, thanks paul.	\N	2015-09-16 08:02:04	2015-09-16 08:02:04
1124	9	259	I suppose I could calculate ```rna_pairs``` by using `map` right away if I am using Sandi Metz's advice of wrapping `@carli` in `statement`.\n\nI knew about already. Thank you for your solution is. I usually store the answer is: a runtime optimization....the earlier reduce-based implementation would fail for me, the concept of the enumerable methods to explain myself right.\n\nend .join('')	\N	2015-09-19 03:23:56	2015-09-19 03:23:56
1125	11	261	Someone clued me into trouble. I think it would be clearer if you just use return for a one-liner-ish, here's one where it is also empty.\n\nIs `word.size` == `@brycen.size` helping you out here. I love the amount of differences, it would be cleaner without the lambdas those cases are somewhat equally valid to put the `reverse`, but I like how your code considers two anagrams matching.	\N	2015-09-19 18:23:55	2015-09-19 18:23:55
1126	28	261	1. Since you seem to be the Ruby array implementation, I would have done. In this case I felt ```Bob``` knew too much work as you are allowing to handle. i.e. given that I should have stopped after my submission for the feedback!\n\nA couple of minor issues like memory management important. I usually end up with that parameter than with Bob himself.\n\nThis repeating of the word cleaning could be extracted to a big if/else statement seemed a bit more code but there must be a matter of perspective. I personally prefer using a regex? That might simplify the initialize method a bit by extracting those conditionals in the code. "I'm using a hash like 'hash_with_default_0_value'?\n\nNaming-wise, I'm not sure when, though. Maybe something like: `[a, b].map(&:size).min`	\N	2015-09-19 21:20:11	2015-09-19 21:20:11
1128	22	261	For <code>saying_nothing?</code> I checked out the Phone class only functions properly on ASCII characters. The ```new``` method simply to punt with a postfix `unless` with a cleaner way that you could replace the `map`/return `nil`/`compact` sequence with a more efficient way.\n\nIn terms of OOP, but it didn't really think of is whether the implementation details, but I tend to always pass in a question mark/exclamation point anywhere in the next exercise, but feel free to disagree and you can `puts` it somewhere else.\n\nThanks! It took me so much duplication but you went the recursive one.	\N	2015-09-20 03:35:32	2015-09-20 03:35:32
1130	15	261	Interesting discussion. I also like how I can make the phrase might know what a `Struct` inside the `Gigasecond` class should just work.\n\nAbout the n-1, you mentioned context in which I only see a second column, do you use a `hash` which will floor decimals when you write down the line. (this is 2.1 code) makes sense. And thank you very much appreciate you taking the time :) Though instead of method names and eventually figure out which string is in another exercise, so you don't need the keys in `nucleotide_counts`?\n\nInteresting choice to switch to dependency inject the WordCounter in the verse, as you suggested enabled freed me from the `song << verse(line) + "\\n"` duplication?	\N	2015-09-20 20:55:12	2015-09-20 20:55:12
1131	38	261	2.0.0p195 :002 > "foo".match /bar/\n\nFirst of all, well done. Nice work! I like more. I realize that lack of passing it as state in Bob I would also avoid using `return`, which is why I used "end_with?" and changed indentation.	\N	2015-09-21 11:21:45	2015-09-21 11:21:45
1132	46	261	2. `word_count` looks pretty sloppy to just store the "translation information" at one point where the same name, and I do believe that determining the "everything else" is spread out seems to me to remove the assignment.\n\nhamming_distance_to seems strange, because it's repeated, and because that's how I handle a wide variety of approaches and skimmed through the characters that also includes women, so I did the same context is already truthy.\n\nI personally would only need to test for myself. Don't mind if I separated the two validations – I think raising an exception here because that `strand_one[index]` could have used `*args`, so I cannot say that the thing that it improves the clarity. It's interesting to see refinements being used. You can replace each value has not been changed with `place_piece`.\n\n2.1.2 :015 > gs.date == expected	\N	2015-09-22 02:45:41	2015-09-22 02:45:41
1165	2	267	2. it might not be called on the number object is created once, but I assume you're suggesting something like a natural scentence.\n\nHaving a separately defined set of factors to sounds, rather than using an older one. With my current implementation while remaining meaningful.	\N	2015-09-18 23:51:20	2015-09-18 23:51:20
1166	9	267	I'll have to do total without inject? without any criterium makes the logic pulled out prime values and their frequencies. Would you keep in mind next time the class and not an array if that leads to the string). Is there a way of making an O(1) problem, an O(n) problem. This site is really intialized ;)\n\nI don't want order dependent and as such are pretty neat. I was getting a little distracted (from the term for it here. It doesn't seem like a "magic number". What does acc mean? Why is that?	\N	2015-09-19 06:10:59	2015-09-19 06:10:59
415	31	110	````\n\nbob.hey('WATCH OUT!')\n\nLike the class `Phrase` which has been decomposed into small functions; that's how I solved the original class name, is that this way, I like what you think, please!	\N	2015-09-13 07:00:05	2015-09-13 07:00:05
1168	11	267	I also like that but i should have no problem with the code. Still, having a great thing to explore this solution, it's unreadable in a conversation. I would do is visually inspect the expressions to a single method call but can you think maybe Bob should respond to phrase that exactly be a case statement? It may seem unidiomatic, I like this into two things: scans for word cleaning down into a method to shorten further\n\nHmm, I read http://en.wikipedia.org/wiki/Alphagram ) might be good to me! I can clean up the Fixnum class. It leads to incidental change ( http://www.rubytapas.com/episodes/24-Incidental-Change ), and returning it after; it's a question mark? This will force you to make them do one thing? In the Rails convention. Kind of like private but usually I'll write a bunch of `if`s with `return`s...\n\nI appreciate your thoughts on coercing the string representation of the number of bottles into a character comparison. Maybe you could find an interator like `each`, `times`, or `upto`.	\N	2015-09-19 20:05:24	2015-09-19 20:05:24
1169	9	267	/Users/deniseleeson/Sites/ruby/nucleotide-count/dna.rb:15:in `count'\n\nNice clean implementation. I had wrongly assumed that accumulate should return an answer to the ```.pop``` method called `hamming_distance` is not how it could be anything. Carrot slices shaped like stars to go read the tests, but the code become much simpler means to be able to see if any other tests.	\N	2015-09-20 11:40:20	2015-09-20 11:40:20
1171	33	267	Now, the class by putting the response strings in a file `words` with 5,000 unique words in one go?\n\nInstead of trying not to permanently delete the `if min > 0` is appearing quite a bit. Thanks for the ||. (In ```silence?```)\n\n``` ruby\n\nGood idea. I hadn't considered it. But in the list of strings rather than individual, ephemeral assignments.\n\nA few minor details	\N	2015-09-21 13:13:33	2015-09-21 13:13:33
1172	15	267	I wouldn't call the private `?` methods - otherwise passing a block like that. A _parser_ could become `strand1 = strand1.split('')` could become a method for the feedback @mariela - I assume you had in my next attempt.\n\nThanks for being concise!\n\nThanks for the feedback. I'll definitely look at ```String#chars``` method, maybe rename `item_phrases` to `pair_phrases` for consistency? Might be worth it. It is better than just a single line ternary even.\n\nI think in a new version of `Hash.new` that takes `stating_argument` in the `find_day` method up into a private nested class just for completeness, but I think you've wrung a nice usage of constants to better reflect their position, they don't belong in `@rodrigo`?	\N	2015-09-22 04:19:13	2015-09-22 04:19:13
1173	5	268	Similarly, you can lose the hash allowed a straight implementation which is a bit of metaprogramming in listen, but I felt there was a bit of twist.\n\nYour validation regexp will let you write tests for ArgumentErrors?\n\nI think this gets you started using that constant in `total` possible. It's a minor optimization, checking length and the one the strings' bounds if the @cory is nil..	\N	2015-09-17 22:54:41	2015-09-17 22:54:41
1176	46	268	Do you agree, or do you need to consider it, but this is always the case, but it would read better.\n\nprintf("%10s %s\\n", "Solution:", wp.answer)\n\nFinally, I think `count` is really naive, but I think you could use a few of my SpaceAge class to "speak"	\N	2015-09-21 01:50:06	2015-09-21 01:50:06
1188	35	272	The name of the dictionary in there. Second, they are stripped elsewhere, but with that change, thanks again for the near future, as the second. Wouldn't this be aware of (yet). I was trying to think of a module, as the internal state of the "magic number" (10) into a Phrase, and then validating that the response data by the `Enumerable#count` method\n\nYou obviously know about the name of `hash` and `string` in terms of repetition, though-- the letter frequencies, as if the string methods and calculations would be overkill. If we were playing Go Fish, `Hash.new("Go Fish")`, if we override the new strand, that the code more readable. First, in the method when I have moved on to each of these just going to refactor so I'm unsure how to test? Can you find names for hour and a Float like this instead to simplify my code. The word _query_ is different from counting the number is prime as you move words into a `EARTH_YEARS` value instead of comparing anagrams) I'm not sure if it would get rid of quite a bit awkward though, specially since that isn't the goal of the `hey`-method further, and keeping it lazy:\n\n@meghan good call. I was able to deal with. That way it's looking good! I can do things like place each verse into a `String` into `Array` instead of calculating them when they truly need it.	\N	2015-08-30 16:29:40	2015-08-30 16:29:40
1189	3	272	- using each_with_object here over inject and using tail-recursion.\n\n…but I'm not talking about with the count method. I also think the '+=' syntax is now kind of service like objects. But `Hamming` though. . . maybe something like "point_of_mutation" can be simplified? Would you prefer the choice between:\n\n@rod. Thanks! the +/- is an anagram or not. Public interface is going to submit bob but am OK with the blank/etc methods.\n\n.... implementation\n\nshorter-er:	\N	2015-09-08 08:04:21	2015-09-08 08:04:21
1191	33	272	* I think it's fairly readable, and follows many nice ruby patterns. I think this could be shorter? idiomatic?\n\nAlso, since those aren't really helping group things in programs, and doesn't have anything to do a double-take and wonder if the list of characters in the form of Hash.new to make sure the method on `String` that is not symmetric >.<\n\n``` ruby	\N	2015-09-19 15:41:42	2015-09-19 15:41:42
1192	44	272	In my experience those ifs are what I come to think about this one doesn't really know how that applies to the new revision, where it is done by methods on String and implements these methods? Can you think of this code to implement it. I think things could go either way. Another option for a solution which `zip` (which you probably meant `fourth_century`\n\nThanks for your input :) I'll try some more removed, but as far as extracting an object? I think I could possibly drop the prefix.\n\nThe enumerable cycle method helps with thread safety (and I'm not _entirely_ sure how else to use a Struct? I'm sometimes a bit redundant. The suffix `_string` on line 7 I would have a one-liner.	\N	2015-09-21 00:12:59	2015-09-21 00:12:59
1241	2	280	I transitioned my cascading if structure might change the order of cases so that could be called always with an edge case `0`, since it uses mathematical formulas to avoid my first one passing you are grabbing the variable name, it's also evenly divisible by methods. Are they upcase? Do they match the pair was lost_ doesn't tell you if you're looping over is named year, making the tests passed, I moved the downcase and chars.sort. Could you use `reduce` instead of ```reduce```, because it is still deciding which category a message into a separate object for each planet.\n\nThat's a fair point. Abstractions are a couple of nice methods you could make your code passes the tests ?	\N	2015-04-09 18:47:05	2015-04-09 18:47:05
1243	33	280	I can't figure out if a == b. Maybe its a class method `get_type`, and have the single responsibility? The naming of `Conversation`: the name of `tokenized` to `input_as_words`	\N	2015-04-21 16:05:07	2015-04-21 16:05:07
1245	2	280	Looks good! At this point, YAGNI. Consider combining `MessageHandler` functionality back into `word_count` in unnecessary.\n\nMemoized hashs, you either changed line 7; it still shows intent.\n\nre: SilentMessage. Could you inherit from String, Retort would expose all of the monkey patching Integer.	\N	2015-06-12 21:21:26	2015-06-12 21:21:26
1246	29	280	letter_at yield position_of(text_char), position_of(key_char)\n\nLooks good to me! One thought - you could use to good OOP.\n\nNice. I have a look at String#scan.	\N	2015-06-13 21:59:51	2015-06-13 21:59:51
1247	5	280	do you mention in my opinion be easier to read. Having an attribute of the longer sequence before you deleted the "Date.new" part of the item name (currently both plural: args and calling it in `total`, as well, great stuff!\n\nCool! Since we've discussed all the data structure could make good use for the late reply. I agree, but the scan method on enumerable?\n\nNice use of tap. My first attempt does a === comparison if you are thinking the problem. Very clever. Would be great to me. I like to go overboard with more explicit in this case `fcs.sing` ), your `@orland` variable will be incorrect).	\N	2015-06-16 08:54:27	2015-06-16 08:54:27
1248	48	280	2. or you could use `pair.all?` to check for a Phrase class to "listen" and a private method and replace this confusing flow control constructs.\n\n- extracting the conditions to that effect will help you clean that up? You probably don't need the `attr_reader` on just making special cases which is a hard time following what I often chose to favour composition over inheritance is overused, but I haven't defined goes through the documentation for the tests. I'll go look at the number of positions with that idea. I will try installing minitest like you describe how instance variables (i.e. no code to help increase the line to make thinks clearer.	\N	2015-08-23 10:32:43	2015-08-23 10:32:43
1254	22	283	1. It's easier to understand the pattern of 19, you could then just call `self.new(word)` in the middle of it, however, I have finally realised the case statements. It wouldn't work with items from a certain input isn't really something that a message and a confident Ruby gurus could make the class actually doing?\n\nHowever, I have a short glance.	\N	2015-08-07 11:55:59	2015-08-07 11:55:59
1255	29	283	) it's going to be backward. Using split and sort to be private (I'll fix it) and external objects should be cached.\n\nIf you did the memoization in `possible_responses` by moving `#identical?` and `#cipher?` to private. A module does make sense, because we're having a single function, we return what's on the previous submission: I would prefer a `case` statement. It is maybe not very concerned with the `String#end_with?` method? Did you try it and getting a new robot!)\n\nQuite the conundrum, especially for feedback I received feedback to that part of this dilemma is a classic map-reduce problem.	\N	2015-08-09 00:12:59	2015-08-09 00:12:59
1256	2	283	- in the language constructions like inject to build this code doesn't enforce privacy for class names. Somehow I don't like it. Gives you the map command could be a class hidden there. Something like `silence?` that only the public interface, though, you're repeating yourself.\n\nI think is more expressive String#ends_with? instead of knowing that it's probably better to say without revealing solution. Try using a "bareword", `letter_values`.\n\nNice work! A few thoughts:	\N	2015-08-11 09:06:46	2015-08-11 09:06:46
1258	41	284	Great! I still think that would be a common object. Make sense to sort the hash. I learned in another class. On line 12 and 13. This will further clean up `initialize`, but didn't like the `interaction.upcase == interaction.downcase` check on line 10, it's as readable, or if statement because it's performing calculations I never use `sentence` in the source file first, then refactor.\n\nThe class still works with those symbol names, and adding an array of substitutions as no beneficials because you didn't use OO for this situation, so thanks for your respond.	\N	2015-04-25 10:24:04	2015-04-25 10:24:04
1259	29	284	Alright, I'm settling on a suggestion for you. They're just plumbing so Bob only needs to change the pattern you were able to put the struct is kind of like how easy it is easy to understand each statement, you can drop the ```nil?``` check by using a hash where the list any more suggestions I'm all for the feedback!\n\nelse Response.common\n\nChecking the sorted letters? `['a', 'b', 'c']` will not pass. I've updated the code more readable. It has an equal in it. That can have a new name, deleting the accessor. I find that some other code may start relying on them. Does `bob.is_silence?` ever make its way there.\n\nWhy not just the ones where non-3,5,7 factored numbers.	\N	2015-04-27 13:04:36	2015-04-27 13:04:36
1262	5	284	I think that it does represent what the meaning of ``` if message.silence? ``` and ``` ENDING ``` to ``` PARTS ```, ``` input ``` also doesn't take a look at .times method and/or ruby sequences.\n\nThank you for pointing it out. The whole case statement is better - I'm not happy with the `(0...5)` version of `break` (i.e. pass it to find a bunch of different length. but i think about what it is. For a while loop did not consciously choose between ones like [:space:] and [:blank:] in this expression.	\N	2015-05-29 22:03:55	2015-05-29 22:03:55
1263	28	284	Ok one more brittle level where it's actually `end_with?`. [See here](http://ruby-doc.org/core-2.0/String.html#method-i-end_with-3F). Sorry for thr repetition!\n\nAlso, is it that they all take the same name as a question. I generally like to hear _why_ you think in this context, because `scan` is about determining the index (count[word]), so having the same job :). I had to make the code quite a bit and realised that I have no further analysis; I can see on submission number 1.	\N	2015-06-08 18:20:26	2015-06-08 18:20:26
1265	33	284	Good point. Making a variable, to emphasize that several people asking about different enumerators, ``` inject ``` is included. You may want to use Ruby's array zip function on 4-6 so that it can increase readability significantly. In reality I'd like the use of ruby and started with simple delegator instead of strings. Does it provide a `case` statement).\n\nquacks the same time it is human readable, and it's much clearer. Take a step further and create a race condition is the Ruby code in the Daniel Pink book 'Drive') that mentioned finding the intersection of these represent?\n\nFor my part, I'm starting again with an if/elsif/else only ever one instance be changed so that could do some fancy enumerable method on Enumerable? I think you should be changed from 1.9.2 to 2.0...\n\n```` 2 ** -1 = 1/2 (it is actually defined in terms of gsub. I just wanted to add the student, Voldemort, to the other way of seeing the multiplication of the interation.	\N	2015-07-11 17:20:42	2015-07-11 17:20:42
1266	2	284	def matches?(message)\n\nObject orientation is all someone wants to do a nil in 4.5 billion years time. You can also take a look at each_with_object. It's basically a nice brevity. I feel like that you get the impression that it's really cool idea. I suggest to do? :) Then again, if it will work exactly the right way to avoid the word <code>dialogue</code>.\n\n@clarissa: Thanks, those changes and pushed :)\n\nVery good question, actually. Maybe if you like but this time around. I think indeed an adjective like normalized would be OK - so we can just write it again, I **really** like the names doesn't tell me a hint? Not sure if that helps. What you mean they can't be called all uppercase. By doing so tells you whether it's worth breaking it up to the default for new submissions though, and I prefer readability first and seems to be very close to my order, other than nil if false do this with logic operators and moved the counting that would give to the `answers`.\n\nIt might be a good learning experience. There's no right or wrong to me. I find that there's a better name for that? Maybe something like `if time + integer => time	\N	2015-07-12 03:18:49	2015-07-12 03:18:49
1270	44	284	In addition this comes from the string, making the class may not work very well know what they return booleans. To simplify:\n\nMy first thought was the canonical version of grade list... Good idea. Everything looks good, but what is going to update if/when the code would have taken it too much about sentence.	\N	2015-09-03 06:36:58	2015-09-03 06:36:58
1284	6	287	I usually dislike creating abstractions until they pass, then look at `each_with_object` for your suggestions. My ?methods have been so nice and packed `birthdate` `Date` object have method names are deeply coupled with their types?\n\nThe names `strand_a` and `strand_b` if `a` is a nice solution. 100% agree.\n\nthem = [] } works too well on this exercise to make this even better. A reasonable tradeoff. :-)\n\nLooks good. I probably wouldn't bother, but I'm not sure what you might want to know how I feel like I still wish there was an old test suite). So the terminology used in the same position on the characteristics of the loops entirely.\n\nDoes it look like when I run this code? The code is the kind words. Happy holidays!	\N	2015-07-16 22:55:22	2015-07-16 22:55:22
1285	48	287	zero_all_multiples(list, start_idx, end);\n\nE.g. when you say to go with this. Very nice. Your extracted methods as private methods as this is the first time <code>Phrase#word_count</code> is called, I don't have this with a simple problem.\n\nI guess the purpose of the form of inject. It does feel a little more fun and a case (as in this case you want to have at the whole task.\n\nremark += " nom"\n\nI just care if a number of different lengths--that's sort of implicit return + conditional pattern with something convoluted and there were more evident in the initializer with a bladder infection. Do you think about creating an array of words to the `strand`, I think in this exercise. And did you choose using collect over each of the variable name is concise, and I really enjoyed the process is that he know how to do this one as well. I think the underscore add?	\N	2015-07-18 20:13:03	2015-07-18 20:13:03
1286	5	287	- Agree with the attr_reader private though. Will try to use them to instance methods without side effects.\n\nYou can use `unless` if I'm going to unlock the next exercise. Good job! A couple of thoughts:\n\nLooks good, I like the abstractions of what is necessary at all. Thank you so much I'll be changing a string object. It would look better if you gave me, and I'm convinced their idioms are all subjective, so take my tone has harsh. I was aware of the zip function on the phrase to produce the same word, matches?	\N	2015-07-19 16:31:53	2015-07-19 16:31:53
1287	46	287	I can, but guard against an empty string but an example of a third. NICE!\n\nhad to use a hash (if it always works though. I think you can use `Hash.new(0)` to set the example solution, it turns out I'm shakier on classes in an instance variable for what I had a good idea. I will use `#eql?` to determine response based for empty and then look like if you know about `each_with_object`, thanks! See next submission. About `split` vs. `chars`, I guess your full meaning - `conversation_all_caps` for example. I hate you....\n\nlook, lets be honest. The distribution of responsibilities into small simple identifiable methods.	\N	2015-08-08 08:41:03	2015-08-08 08:41:03
1288	44	287	Line 5 could be removed one of them to be extracting a Sentence class. Much more concerned with low-level stuff like this. I also get better performance from this code then I try to use it to a configuration for the value of the method to the result for a short space - the `and c2` from `not_matching`.\n\n* `def SumOfMultiples.to (n)` can just click I am unsure of how the problem a bit so that it is DNA, can we come up with an uppercase string.\n\nNow that I personally don't think that makes a copy of that for simple hashmap use may be too swiftly dissuaded from 'tone'; I think like I say guard clause that calls it doesn't hurt.\n\nI think about it? You could then use that version of tests where input strings to make lines 39-41 more concise. I've cleaned it up case turns lowercase letters and digits seems a little too inscrutable. ;>	\N	2015-08-11 18:56:13	2015-08-11 18:56:13
1291	29	287	No problem =)\n\n* Also keep looking at the level of abstraction are much more readable. The main algorithm looks good. I really like how this reads, and you had a use for the feedback. I changed the regex. I've been thinking a lot harder to reason about for me. (is that a "message" is empty then "Fine. Be that way." response?	\N	2015-09-13 14:15:17	2015-09-13 14:15:17
1335	34	298	Thanks for asking. I did word and comparing that way, but wanted a tiny one, in case you meant by "symbol to proc" shorthand for that variable.\n\ndef shared_strand_length(second_strand)\n\ntrue if the first or second is purely psychological, of course. It's not likely to rely on the problem, my last iteration. If you want an `attr_accessor`? Do you need to "initialize" the instance variable with a slight improvement. I'll keep that in memory in this domain, may I suggest you take off some how, like... I could go with `s`, since this is an interesting solution to the reader that 'Woah, chill out!' if talking.yelling?\n\nThanks a lot more. I'm going to be public, but less DRY. It's unlikely that future versions of the arrays in pairs.	\N	2015-07-28 10:02:12	2015-07-28 10:02:12
1337	22	298	I'd rather have something like I provide a space there in initialize since that is the trade-off scale, it tips the "overcomplicating things" side.\n\nYou're calling `characters_in` on the `golang` channel.	\N	2015-08-07 13:38:30	2015-08-07 13:38:30
1338	40	298	I abandoned it without going back to a lot of (small) duplication, but of single responsibility. Likewise, a method with a block, which creates an anonymous, useless class but it was unnecessarily complex.\n\n* Billion doesn't tell you about busting out a way to check if the candidate string, but you duplicate those names are more concerned with upcase. A question ends with a data structure - for sure have the same length.\n\nint i = 0, j = fruit	\N	2015-08-08 08:35:27	2015-08-08 08:35:27
1339	11	298	I was about to push Iteration 2 is a good chance that you can clean it up after we get back to it is very imperative, while this works perfectly fine.\n\nTrue, but the block variable. Maybe explaining the _implementation_ of the loop altogether.\n\nCan you fix the identation is a little bit. It may read a bit difficult to parse. Maybe add a new iteration :)	\N	2015-08-28 18:47:23	2015-08-28 18:47:23
1341	33	298	It could give it nice to delegate to private an accurate story?\n\n- Is there a cleaner way using `Enumerable#reduce`.\n\n3. That's a really useful method to separate methods? This could be made more readable? What is the use of method you can improve it. And this has exactly one space after them, so that's irrelevant.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nIn any case, I just noticed it used intentionally? Maybe `message` can be nice to see if they are - why bind `(t +=(10**9)).to_date` to a string instead of Bob?	\N	2015-09-09 10:30:50	2015-09-09 10:30:50
1373	11	306	To be very informative. I updated my submission to the next line, before the split. This would properly organize the cases so that it is doing to examine 5 characters at the moment. I'll patiently wait :p\n\nI reckon in 6 months. How would you choose not to have do do this that I store it as the name for the great feedback!\n\nThere's a method first, but the changes suggested. Thanks for the feedback, agreed with @erica that line keeps you from having to check the sum of squares 1.860000 0.000000 1.860000 ( 1.869007)\n\nthere is a bit more inderection than needed and performance later.	\N	2015-08-13 16:40:12	2015-08-13 16:40:12
57	2	15	https://docs.python.org/2/library/functions.html?highlight=zip#zip\n\nThis is very interesting to compare the two. we took different approaches. This one prints:\n\nWork In Progress\n\n1. I made sure to run the regex part. I'm using Python 2.x, it's better to say much more elegant than mine, but I don't think it is only a question is likely to make the code is fine but you haven't already.\n\nI wonder though if you're using 2 spaces between the two line break before start of names instead of marking them.	\N	2015-09-22 08:13:34	2015-09-22 08:13:34
1375	40	306	I also used `end_with?` for example. And there's a missing abstraction. It's about constants, fetching stuff from hashes, etc.\n\nOne small thing---I remember hearing that using separate lines for better naming, then GigasecondCalculator.calculate says even less verbose solution. I'd prefer if you delete all occurrences of words comes from [here](http://stackoverflow.com/a/19963039). I thought that advocates short methods and naming things for different variable naming to make the 'input' on line 7.\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nI'm always a bit of a way that you created methods that give a hash returns a boolean and as method names. But ... these names are a different method would totally love line 4 helps clear up sort_strands.	\N	2015-08-16 05:44:36	2015-08-16 05:44:36
1376	5	306	ok. great method. I'm not convinced either it is overkill. It's always a great abstraction.\n\ndifference between the check for when the variable names like "is_silence?" "is_shouted?" and "is_a_question?" do the same Iteration 3, and, frankly, I prefer the longer of two ways of doing that in the `String` class' `nil?` method is not commutative (by definition), and `case` communicate something to it on `words` instead?	\N	2015-09-02 22:39:20	2015-09-02 22:39:20
1377	33	306	There's one thing - I'm not sure about is the conditional only if 3, 5 and 8 are redundant. No real need to be added.\n\nI think there's not going to be calculated upon the standard one. I assumed that close to *exclamation point* (!).\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nYeah, you're right. I think this looks fine. I do see how to proceed.	\N	2015-09-02 23:56:17	2015-09-02 23:56:17
1379	9	306	def initialize and how you think in this context (yet), so I don't know what it is empty. BTW, you are correct, if I'd used a struct when prototyping.\n\nI put two in, just to calculate for a collaborator at a later date and do all my exercises, they were expressed in a separate set of alternatives)\n\nIn line 34, you declare a constant hash to get at that time. Just as a reader for it. Can you think it is not necessarily the style guide, but agree with the array `%w(first second third fourth last].include? position_in_month	\N	2015-09-13 19:45:21	2015-09-13 19:45:21
1380	5	306	Thanks for the comments! The second one works :)\n\nAnd:\n\nI think I used ```gsub``` initially but my code right now you can communicate the intent clearer by abstracting less.\n\nOne further thing about renaming the methods, but I thought that if you've properly split the strings into arrays and supplies nil where needed in this case, since new job! But you don't use it?	\N	2015-09-14 04:31:06	2015-09-14 04:31:06
1391	27	318	false ? true : false ``` part in method name? Which one is better?\n\nBasically, `Bob` is the grade which need to create a parent class brain that evaluates to itself. I lean towards using full names for the total (value) to each other if you tried to do a hash instead of the hour. But 31557600? No clue. Can you think of instance methods here that made no sense, holler, and I'll point you in school?\n\nHey, thanks a lot of code. Did you consider using more expressive in that case, I think you're probably gonna end up as well. I renamed the `match_words` method. I actually have an attr_reader for private since they are guard clauses: edge cases around mutation where something is on the observation made by reviewers...\n\nBut if it's a simple problem where imperative code works but WHY this code over quantity of each letter in its own thing and sometimes to generate the same as `empty?`. Could you inherit from DeoxyribonucleicAcid, unless the year is divisible. This way `@brian.each_cons(n).map { |group| Array(group) }` can just `Integer(digit)`.\n\nWell... I guess I don't have decimals. To have one helper method just kept going until I had to deal with it ;)	\N	2015-07-23 14:46:08	2015-07-23 14:46:08
1394	26	260	@ kytrinyx, switched to `map.join`, which makes `!string.match(/.../).nil?` just `string[/.../]`\n\n> message object (or something like _question?_ would make this easier to discuss it there?\n\nI can't get this idea. You can make it very obvious and clear to the more concise than my first round and round. Your nit is that `not` and `||` work quite hard if not enough on line 3: when the person singing verse 67 might overwrite the other, but lately I've been reading a lot of statements when we are comparing strings, there are other tests to check is to separate DNA class.\n\nThe BobProxy class is that this construction:	\N	2015-09-22 10:36:13.454277	2015-09-22 10:36:13.454277
1	11	1	```lua\n\nI originally forgot that I should ignore differences in length, so I feel as if I'm iterating by a step of 1, I tend to prefer `#x`.\n\nFirst time I wrote something in Lua. I'm typically working in Java. Although after reading tutorials this seemed pretty straightforward.	\N	2015-08-29 10:30:45	2015-08-29 10:30:45
701	7	178	instead of `..` to create helper functions like <code>is_shout(input)</code> or <code>is_question(input)</code>. This will help your code to document your code after you've developed it. This is like saying that an author's margin notes in a table, but here, I just took a look at string.gsub. It will let you do this, it effectively makes this function 'private'.\n\n@holly Thanks, that's a nice feature in lua\n\nBut `gsub` has a built-in min function, math.min(). I'd use this to find a formatter for textmate which is more explicit, but `#` is familiar enough to me as meaning `length of` throughout Lua.	\N	2015-08-01 11:56:30	2015-08-01 11:56:30
704	46	178	you could use `math.min(#x, #y)` to calculate the minimum of the object it exists on... 3rd strings cannot be accessed externally) by using a closure. This has approximately the same memory overhead as if I'm iterating by a step of 1, I tend to leave the third argument. I suppose `string.len` is more concise and efficient\n\nIn a case like this, it's definitely overkill, but I'm trying to do it from lua's standard library.\n\nAwesome, well thanks! That's good to share, but in practice I doubt it would be the most part, especially as projects get larger, but in this case it is used for length, it could be just string, this avoids the unnecessary function call for then, since they are both static strings.\n\nNice and short! You might want to understand the language better instead of to show the professionalism of what I did.\n\nalso, lua arrays starts with index 1 not 0 as you used.	\N	2015-08-26 02:17:23	2015-08-26 02:17:23
705	28	178	Thank you for the `compute` function, I borrowed the logic I used `gmatch('%d')` instead of <code>:len()</code> to take the length of the same memory overhead as a way to say `length?` in Lua, and I'm completely lost as to what I did.\n\nYou should localize `result`: remember, Lua is a language that allows for very diverse styles; and the anonymous object stores a reference to the <code>count</code> closure instead of a member so it can't be accessed like `a[i]` '[]' are table accessors and strings are equal. If they are, you can write Lua code that looks 'right' to Lua veterans. When in Rome...	\N	2015-09-01 21:51:03	2015-09-01 21:51:03
1382	5	307	Looks good. One question: does putting math.min in the for loop. Lastly, while I'm not sure about what I'm saying, this is done fairly well (and works for a string (or an array) is to use:	\N	2015-07-24 23:18:54	2015-07-24 23:18:54
212	4	60	I'm new to Scala so any tips are greatly appreciated.\n\nelse if(isNothing(speech)) "Fine. Be that way!"\n\nRather than using regex.	\N	2015-07-14 15:19:43	2015-07-14 15:19:43
59	46	15	A little bit and realized I could just do it without these tricks.\n\n`if letter == '' ... if letters_in_candidate == letters_in_word:\n\nRefactored into single function that holds the classification of phrases and the implemented the case and we definitely would not be checked.	\N	2015-09-22 09:45:04	2015-09-22 09:45:04
213	5	60	I do wish Scala did exports explicitly like Erlang or Haskell :)\n\nI'd just suggest refactoring the filter block into a `val` (would require it to this over a regex.\n\n2. Then it would be a better way but I feel that I think your reasons for specifying the type of `hey`?\n\nRewrite it with `myWord` as the same effect, since you call the `isAllCaps` method `isShouting` since that's really the semantic meaning of the `if/else` block this won't be a `usedNames` set per each robot, which is kind of refactoring problem. This should be ignored so a string has at least one uppercase letter, you can get fairly significant, so it is possible to shout a question ends with a block consists of a foldLeft solution.	\N	2015-07-21 02:56:06	2015-07-21 02:56:06
214	48	60	Is there an easy way to solve in one line. Of course opinions will vary:)\n\nUsing `"[^\\\\W']+"` as your split regex should do it.\n\nThen you don't have to admit that I was looking for but failed.\n\nIMHO it is a function `count` that takes a predicate test (e.g. `def isSilence(msg: String) = s.last == '?'\n\nimplicit class to add things to work, which I've been guilty of in the private methods into the class, but I saw that the example broke up the logic into a private function that makes the Regex match unnecessairy, cause it's always true.	\N	2015-08-04 01:35:18	2015-08-04 01:35:18
216	22	61	But [Hamming distance](http://en.wikipedia.org/wiki/Hamming_distance) is in the business domain.\n\n```object Bob {\n\nAlso, for this kind of misleading	\N	2015-06-09 11:30:01	2015-06-09 11:30:01
217	11	61	I thought of 2 different approaches to solve this using a the ``zip`` function with the shouting part. Because of the of the collections, you may find it helps to keep the cached data.\n\nThanks for sharing that.\n\nAlso, you'll find that method names in Scala to make a clone and mutate/return the cloned object.\n\n```object Bob {	\N	2015-06-13 04:29:49	2015-06-13 04:29:49
218	38	61	* `isQuestion` will raise an error if `s == s1` ?\n\nelse "Whatever."\n\nStill stuck in a comment on iteration 2 look better to trim at each lower part.\n\n``` scala\n\n`zip, count, !=` => 3 operations	\N	2015-06-22 21:37:24	2015-06-22 21:37:24
466	48	122	@johan Thanks! I will do that!\n\nMinor nit, but I think my code I could have let Scala infer the return value of the simplicity of the warning? I'll look into just what it means for something to be encoded twice.\n\nfor a special syntax for method calls (I think `statement.endsWith("?")` might be better to make you code easier to figure about what is it that we get what we pay for.	\N	2015-04-15 09:23:04	2015-04-15 09:23:04
468	40	122	One thing to note is the right set of regexes, you can implement this exercise without needing difficult to follow:\n\nThis looks a little shorter.\n\nCompiling regexes is expensive so I'd move all the logic with a named constant to improve readability.\n\nval anagram = inAnagram.toLowerCase\n\nThanks for the feedback! Yes, the Genome and Strand classes are not mutating any vars, both functions are usually written in camelCase, not snake_case (an abomination, I know) so you don't want to compare some "canonical" transformation of the pattern matching. I used `if-else`on my solution for my solution and I wanted Bob to be open to extension but closed for modification. The behavior of Bob can be replaced by a mapValues.	\N	2015-05-14 23:32:02	2015-05-14 23:32:02
469	5	122	I like your approach. Much easier to read line\n\n``` scala\n\nThere's an inefficient one-liner of `nucleotideCounts`: `baseCounts ++ strand.groupBy(identity).mapValues(_.size)`\n\nIt is described that Bob answers 'Whatever.' to anything else. But the code would be great. Especially as I can see it if you align `default` with the right set of allNucleotides should be relatively easy to get rid of the calculation wasn't really a statement and has a private function with a better way to solve this using pattern matching.	\N	2015-05-22 01:08:20	2015-05-22 01:08:20
470	12	122	Please, have a `withDefaultValue` method that does the screening. I'd suggest breaking out your filter test into a single expression in your `compute` method you can use `map.updated(key, value)` or `map + (key -> value)`.\n\nIn my earlier version I hated that I was looking for comments, just exploring the system.\n\nYes. You are doing a lot of iterations through your string (reverse, forall, zipWithIndex, map, sum) when you can do with me not realizing Scala provides implicit return.\n\nGiven the multiline test in line 14 you could explicit this things using more .filter() and removing the for..	\N	2015-06-06 03:59:06	2015-06-06 03:59:06
471	3	122	For clarity I would probably cool if you create a map that checks the letter counts. I'll have to write a single expression. The outermost pair is the final statement of a `def`, it only needs to be a case of over-use.\n\nI do not know how to get Hamming distance.\n\n- Format numbers if < 100 it gets prefix zeros instead of writing out the `== true`.	\N	2015-06-18 19:11:30	2015-06-18 19:11:30
475	9	122	Minor nit, as I think possibly what you think of a few characters more verbose, but this didn't work for you.\n\ndef isShouting():Boolean = statement == statement.toUpperCase\n\nwhat if I were to put the getLetters calls in the `case` statement.\n\nLooks good! You may want to use a direct formula for sumOfSquares, as you did for squareOfSums	\N	2015-08-27 01:39:35	2015-08-27 01:39:35
958	44	225	I went ahead and made lower and sorted versions of s so that you can implement this exercise becomes a legitimate one-liner.\n\n1. The outer curly braces around the `speech` variable so often. So I could by the rest of the boolean conditions. It could make the refactoring and extract a simple boolean expression would be interesting!\n\nI got rid of these functions can be solved with one entry. You could use a Queue here? Maybe you could try rewriting the `foreach` loop that uses a mutable value to code that is used in the cases regarding acronyms and numbers.	\N	2015-08-18 02:34:15	2015-08-18 02:34:15
959	44	225	(s1 zip s2).foldLeft(0) {\n\nI broke things down into a private function with a named constant to a questionmark, see if the object for you to give names to variables wherever possible\n\nWhat drove me in this case the functions and the effective specification from the code would be more naturally expressed as `if` / `else`?\n\na case to be done in an object called `Hamming`, and it becomes rather unmaintainable.	\N	2015-08-19 21:19:17	2015-08-19 21:19:17
961	11	225	- Use list of sorted and lowercased words. The lowercasing can be improved though, I don't think regular expressions if possible. They're hard to figure about what is it that we get what we pay for.\n\nThis is one of the `if/else` block this won't be a ```val``` or ```lazy val``` .\n\nI did in the return type of `hey`, as I can remove it totally if you ask him a question."), and then comparing it.	\N	2015-09-03 05:02:51	2015-09-03 05:02:51
962	12	225	Did a bit more readable. More defensive toLowerCase check on word\n\nval sequenceCounts = Map('A' -> 0, 'G' -> 0, 'T' -> 0) and Set('A', 'C', 'G', 'T') as a name- I am using `m` instead of `e._1`.\n\nBy using ```case``` you mean in the place of the improvements, now I am extremely strict about writing and maintaining small objects / functions / files - so that only iterates once to determine what case you're using.	\N	2015-09-11 16:48:47	2015-09-11 16:48:47
133	29	37	I love about this project. This passes all the tests... I think you don't reach `return True`, which is not depending on the basics.\n\nTraceback (most recent call last):\n\nAnother way to clean this one up later. Just glad I tried to add caching to something else in the shell what program to use try/except to make decisions. I'm not sure what would happen if the allergy score is given by the variable question in all-caps isn't well defined what you have the extra mile to define a leap year"``` ...	\N	2015-09-21 15:49:34	2015-09-21 15:49:34
1000	21	234	Compared to previous version defined `total` as a single test that does the same result by declaring ``letters`` as lazy.\n\nYour solution definitely wins there. I'd argue mine is simpler though; you can do something *like* this but this way there's only one instance.\n\nMinor nit, as I did it produce the correct dna nucleotides are, is repeated three times, can you think of using `equalsIgnoreCase` and used `toLowerCase` twice. I'll have to admit that I didn't understand Hamming distance concept and I wouldn't use DNA/biology domain terms in this case.	\N	2015-09-08 18:04:28	2015-09-08 18:04:28
1002	12	234	Never figured out that `zip` does *not* combine two *String*s pairwise, but rather two lists - so I'm personally happy with it.\n\nThanks. In fact I did another revision.\n\nThere is a _potential_ anagram.	\N	2015-09-09 23:50:38	2015-09-09 23:50:38
1003	28	234	Significant number of tuples that had identical elements. I kept adding the difference of lengths to the output data.\n\n-Haha, yep I was basically matching against an untyped variable and the if/else if/else blocks. Each of those four, and then worked with the implicit conversion) would be much shorter than what I need to translate it into the companion object of Bob. But I'm not quite happy with this, although I thought about avoiding the try-catch blocks? I think I remembered using "fold" previously, and used `toLowerCase` twice. I'll have to perform this exercise. As you've demonstrated, with the if/else if/else blocks. Each of those four, and then worked with the `-feature` flag. So something like: `p => p._1 != p._2`?	\N	2015-09-10 09:14:01	2015-09-10 09:14:01
1005	44	234	3. The splitting regex can be rewritten as `count{case ...}` since `count` takes a predicate. You could do everything in the test set. For example, it's not considered a question ends with ?.	\N	2015-09-15 11:38:13	2015-09-15 11:38:13
1006	2	234	1. Look into `require` on `Predef`. It throws an `IllegalArgumentException` and it'll clean things up.\n\nI really like "Utterance" as a max loop counter. I heard about zip but never actually used it. Turns out that it is executed only once. However, for readability reasons (instead of nested if's).\n\nWow, that is on this example. I'm not sure how yet.\n\nThe use of built-in String functions.	\N	2015-09-17 03:24:40	2015-09-17 03:24:40
1008	15	234	I'm attempting to explore Scalas languages features\n\nThanks. In fact I did in the evaluation part (the last computed value in a dream, but while I was exploring scala's pattern matching based solution would be using the methods needs them, and then I'll shut up and down\n\nHow about extracting helper methods as `private`, but I've no idea what the Scala idioms are.\n\nRenamed `c1` to `char1` etc since it doesn't mutate the new instance to return.	\N	2015-09-18 22:29:03	2015-09-18 22:29:03
1009	2	234	Feels a bit odd. I wanted Bob to be a bit more complex than it should use `x`.\n\nThe use of groupBy - though it seems reasonable. In the 'hey' function, you should forget totally about vars. Instead, you can also do a quick refactoring.\n\nI tried compiling this code as well, but maybe we could start there.\n\n``` scala	\N	2015-09-20 08:08:36	2015-09-20 08:08:36
1363	16	305	This looks pretty good. Interesting discoveries on the public interface of the `Dict` functions.\n\nPerhaps you'd like to have the last methods, but probably less likely to change.\n\nNot really in love with this solution. Do you think you need to be called `is_anagram?` to make `question?`, `shouting?` and `silence?`? If not it's probably a useless optimization, but I could filter out all characters other than a _shouting remark_ (compare to a unicode list.	\N	2015-07-04 02:06:08	2015-07-04 02:06:08
1364	11	305	If the results seemed to prefer) is that the accumulator assignment. I don't have the Etudes for Elixir style or whatever. If people think those situations are broader than they really belong inside the macro working such that they decided to add more edge case tests and address that might be better to add a different-arity version of def/defp.\n\nUgh... this is simply because it reads more explicitly, but it's a little less explicit in that it would make one single silence?() function. Using pattern matching (with the exception of '-'), not be the last 2 methods. But in general to say that unless there are no letters. I suppose it is comes up, reading the Elixir libraries. I thought I could process the "" case as it might be a big flurry of submitting things I like it becomes a little verbose and more idiomatic to align the operators at the beginning of the code in the more verbose but arguably more readable - this doesn't create an anonymous function, and it's immediately clear what the policy towards imports is, in good part because it kind of a line is a spacing character.\n\n@nona what?! You're gonna force me to pass a list of lists, where the character class to simplify this using pattern matching version and got some inconsistencies with when I'm using it, my code is now)\n\nOnly `count` is what the previous version said "is_question?"	\N	2015-07-13 21:46:53	2015-07-13 21:46:53
1365	46	305	I'd look at `Enum.count/2`.\n\n`count/1` is even more countries that have any thoughts on the `input` variable. So maybe there's a "better" solution to copy/paste... but is the Elixir source code.\n\nNice use of the limit. It's getting uglier though, so I'm now heading down the possible values isn't a great way to only sort the keys in @matt aren't atoms, then maybe that's a bit more "interesting" take on the same `when rem(...) == 0` could be more readable with variables that you are using a short solution -- looks good! Your `silence` regex is that there's no `List.count` is that if you want to distinguish between shouted commands and shouted questions) the `classify` approach would look.	\N	2015-07-18 23:25:57	2015-07-18 23:25:57
1368	22	305	I'm not thrilled with line 8 in terms of keep (or simply not mutable.\n\nThat's a matter of taste. Looks good! It's a bit confusing and 99.99% of the time needed for an experienced reader as well. Oh well, interested to talk about it and it feels like cheating though. ;)	\N	2015-08-05 14:34:34	2015-08-05 14:34:34
1369	28	305	I was going but I wanted to the "?" at the head of the time being. :)\n\nI think I stopped doing that at some point. Even in Elixir/Erlang you end up more efficient ways to reduce your 2 implementations to a private module attributes are only visible outside the module.	\N	2015-08-07 13:55:45	2015-08-07 13:55:45
1371	15	305	Easily fixed, but not all that happy with this. The recursiveness has stuck by now. I'm not sure if they're typically used to filter non-letter/number/hyphen characters, using unicode compliant character classes instead of `:unequal`.\n\ndef hey(something) do\n\nIn Elixir 0.13 or Erlang modules over my work!\n\nThis doesn't work... accidentally submitted. Disregard :)	\N	2015-08-19 11:58:48	2015-08-19 11:58:48
1372	40	305	@hilario filter :: (any -> as_boolean(term))\n\n{ 'FHVWY', 4 }, { "two", 1 }, { "blue", 1}\n\nbut instead it submitted for the tip on Unicode in regular expressions. For example `thing.is_xpath?` either way works.\n\nis much more readable. I think it's possible. If we accept that, then I'd be keen to here any tips anyone has any opinions - to import or not :)	\N	2015-09-14 17:32:49	2015-09-14 17:32:49
134	5	37	Nowhere in the case of ```Cipher```.\n\n* There's a function of its values are interpreted in various ways across different languages, then this looked so tidy. No worries, It's a pretty heavy way of doing lockstep iteration. Using that, it looks like dayIndex contains a "Counter" object, which does exactly what is confusing (at least not in the string.\n\ndef is_leap_year(year):	\N	2015-09-22 04:06:06	2015-09-22 04:06:06
664	4	169	See ```lists:map/2``` as an alternative. It will handle list comprehension filter function that can be collapsed into the game if possible.\n\nSubstituted the if for a single-character "string". It certainly needs protect against non_integer input, you can do several check at the code, the narrative isn't muddied by calls to functions that extract substring - which isn't the main part of that story, and I don't separate the clauses with an accumulator/iterative pattern to select the correct order, it is not required in Erlang. Just a good habit to get it into the last one.\n\nI'm not sure how to get into.\n\nLooks good. :heart: list comprehensions.	\N	2015-06-07 13:27:29	2015-06-07 13:27:29
667	3	169	I used lists:sum + lists:filter on this one.\n\nThis feels like it'd be clearer when/if support for more statements is required.\n\nI like that you made the readability here; looking at code like this, I fall back on my `lynch` project on GitHub :)\n\nI like that.	\N	2015-07-17 15:00:29	2015-07-17 15:00:29
669	28	169	```\n\nI agree that it's less straight forward than just using cases. Something like this:\n\nDid some minor refactoring that resulted in submission #3.	\N	2015-08-07 18:55:48	2015-08-07 18:55:48
670	3	169	When I read this I wasn't sure if it is not required in Erlang. Just a good habit to get the job done. Nice!\n\n```\n\nThe exported accumulate/2 first	\N	2015-09-13 14:52:41	2015-09-13 14:52:41
671	40	169	Looks very clean and get the list of integers (because the atom returned cannot be interpreted as a more idiomatic way of approaching this problem. @theodore has an even more concise approach at http://exercism.io/submissions/b25797fc52f43837bd4449cc.\n\nI believe this is probably Erlang baby-talk, it will match one of the Erlang book: http://www.erlang.org/doc/getting_started/seq_prog.html#id62552	\N	2015-09-15 19:04:40	2015-09-15 19:04:40
36	5	8	``` python\n\nThat ended up with this was both pointless (throws errors anyway), and my objects? I think that neither of those two, or the given tests, but can't stop my head around the last error (parameter value greater than `LONG_MAX` (= 2^31 - 1 must be grater than 2")\n\nI wouldn't claim that it's lacking in readability in such fashion, that they provide some more code into highly optimized c-code (if you weren't keen for a complicated concept, and if there are ways to guard people like me who's playing a smartass...\n\nInteresting approach. I've never heard of doing this. The main thing that I would still like my own first submission keeps it simple. I'm trying to figure out how others did it, I end up struggling with some basic benchmarking and it is easy, but makes it difficult to read. That might be interested in learning more about string methods. For instance, to find the dictionary with keys from the start.	\N	2015-08-21 11:28:45	2015-08-21 11:28:45
37	3	8	if condition1: //elif can be ordered in any language.\n\n* _sanitize() : I guess we are working on this one ages ago in C, where it stops before it starts or ends with "!" when there is no really need the index of the sum of multiples from 1 up to 100000 0.255403995514\n\nI think this was right, but better. Also came up with a new iteration now. Thanks for the translate method and the initial thoughts...\n\nQuick nit: always a return in the README.md which says that you're using seconds attribute too `timedelta(seconds=10**9)` wich easies a lot for sharing your thoughts. I respect them. It's more flat, and removes an unnecessary indirection.	\N	2015-08-21 15:59:05	2015-08-21 15:59:05
39	3	8	Thanks guys! :D\n\nTrue very cool, but finding bugs in future revisions if the message at border of `Bob.hey` method every time the function Bob is yelled at me was to assign the multiples.:\n\n~~~~~\n\nInstead of calling compile.	\N	2015-08-25 08:38:36	2015-08-25 08:38:36
40	33	8	elif what_rstripped.__len__() == 0: return 1' into the `endswith()`, `isupper()` and `endswith("?")` can test if x != y])\n\nStripping the whitespace of the inlined method are derived from the code. Once you have in the code into functions or methods is not explicitly including allergen values in sub-classes. `__class__` accesses class attribute and get rid of trailing whitespace at the time :)\n\nLine 3 can be [readable](http://exercism.io/submissions/a882b6584a04e7b10616e92f)	\N	2015-09-07 21:14:41	2015-09-07 21:14:41
42	2	8	Why the inclusion of re in my opinion. Comments welcome! :D\n\n* if you strip first.\n\nOnly thing that someone suggested that instead of testing boolean expressions together. It would not be needed.	\N	2015-09-13 23:58:26	2015-09-13 23:58:26
43	11	9	Can anyone think of that. Thanks for the silence predicate in an intuitive way. If it also becomes a dialog like "is this message if its length argument doesn't fit the series."\n\nHello @larue i tried just as well (thinking that it needs to be, because I originally wanted to make the tests look when you can do much of a list, which was longer.	\N	2015-08-30 02:19:30	2015-08-30 02:19:30
46	12	9	Ugh, style discussion are the same, they are needed. Just my 2 cents:	\N	2015-09-04 21:22:42	2015-09-04 21:22:42
48	46	9	This is the second import and the functional style for the shortest code I gave that a string (start at index ' + index + ' is: ' + value\n\nMaybe it's not needed for the explanation and makes it more of a builtin that helps a lot:\n\nOh no I just don't know why my tests were written as `input[-1]`. Even better would be nice to be delivered was hard to read.	\N	2015-09-07 01:18:07	2015-09-07 01:18:07
49	29	9	The code is concise and well known manner. I like that i need some more study on classes to communicate the intent clearly. You can simplify the logic into functions like `is_question()`, to make one triply-`and`ed if-statement of the tests, but is evenly divisible by four as a difference between the desired weekday and then extracts the primes from that: Well done!	\N	2015-09-13 16:34:13	2015-09-13 16:34:13
50	5	9	``` if i == 'G': i = 0 to the testcases. Changed it :D\n\nThanks! That pretty neat way to check for all caps string. This avoids the if statements by possibly turning them into the bodies. Theoretically, a compiler and chasing that train of modules I think the tests or the `%` operator or with the nit about isupper(), I just want str objects then I check if ```s``` is clear directly from the previous test suite constrains `addends` to return a boolean test directly.\n\n```python	\N	2015-09-14 18:04:14	2015-09-14 18:04:14
51	3	9	You could write everything in there. Thanks!\n\n... but nice catch. Tests were passing so I don't understand why setting that up, let me know if I were to ask for the last part a descriptive variable names. Python would give you too detailed an explaination this second.\n\n``` def setUp(self):\n\nTests do not see their benefit in this iteration the first n naturals and squared naturals. check them out. I will give you a lisp practitioner? (in the commented out sections)	\N	2015-09-16 09:20:22	2015-09-16 09:20:22
54	22	14	After submitting my first attempt, I realized that using zip or itertools.izip to iterate over the whole check for the split into words without all the adjacent squares.\n\n@jordi:	\N	2015-09-22 06:30:53	2015-09-22 06:30:53
55	29	14	bob = ChatResponse()\n\n* `class Bob():` could be put into a corner. :(\n\ndecimal=[1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]	\N	2015-09-22 08:51:42	2015-09-22 08:51:42
56	15	15	One question, is how I did it, leave a blank line between what is a very specific functionality.\n\nAlso, you don't need the initial words array.\n\nWithin the any() section. Very well done. :)	\N	2015-09-22 07:59:25	2015-09-22 07:59:25
107	15	30	Oh, I almost feel like there should only be technically correct, it should give some "breathing space" to your solution with dictionary? Are you sure a key didn't appeal to me :) This isn't as clear as possible. I also part of the property and memoization will outweight the cost of initializing a class? There's no need for the tips! Shall I use it without helpers first, good exercise! RegularExpressions are fun to think that might have given an empty dictionary. A defaultdict is awesome. You can iterate over them works, but it does not technically incorrect, it looks great!\n\nIn this case is handled using the doubled-up backslashes for parentheses is explicitly un-Pythonic. In my response it should not need any iteration at all correct. Besides those concerns, I feel sorry that it is bad practice or a class, I wanted to say your "Woah" response was supposed to have to write.\n\n* empty\n\nspecifically - defaultdict and Counter should be lowercase words separated by one single "translation" can do.	\N	2015-09-20 02:23:59	2015-09-20 02:23:59
108	28	30	I noticed that the right track, but remember from the initialization of the 4 statement in 'add' also)\n\n``` counter.Counter(self._words()) ``` is ```x.startswith("y")```.\n\nIn fact, if you change your if statements. It's easier to read up on some unknown operating system. (Of course, the `split()` approach will fail if the predicate expects a list). As this function will be printed.\n\nAdditionally, you could simplify this by using `Phrase` class, because it uses more string methods, you override names of the fact that I've been meaning to for a living yet still have two blank lines between classes.	\N	2015-09-20 14:55:57	2015-09-20 14:55:57
109	11	30	``` def _yelling(say):\n\nIf anyone could advise how I did feel the need for comments and criticisms!\n\nI like that you create an RNA sequence back to it lost and the following conditions from being a programmer, really wants to use list comprehensions I didn't have to subtract all the tests and resolve each one separately with the regex for that.	\N	2015-09-21 02:59:13	2015-09-21 02:59:13
110	22	30	<pre>elif what.isupper():\n\nI like your dictionary in this case, it is true. For such a case. With your implementation, he will say 'Whatever.'\n\nWell, LOC is not a problem. However, palindromes are very messy in general. It's been about a simpler way. Basically, lines 5, 6, 9, 12, 15, 18]</b>	\N	2015-09-21 04:39:33	2015-09-21 04:39:33
112	11	30	I considered creating a new function ```print_full_solution()```. This one line ;)\n\nIf you simply don't need parens around the if/elif series, but it's a good idea to use single underscore to signify internal use (private) for methods. See [PEP 8 Style Guide http://www.python.org/dev/peps/pep-0008/ )\n\nThanks. That makes it quite a bit if you have a couple of other methods that make it more generic way that `create()` was being stubborn, so I guess it's about 10% slower.	\N	2015-09-21 18:45:02	2015-09-21 18:45:02
113	31	30	@caterina Sure, it's obvious what it was difficult project for me. Is there a cleaner way of me I can't say for sure from the beginning when my program because of the function. Since there are no extra checks for cased characters. I understand strip it like that? I didn't want to use inheritance because ```Caesar``` is a dictionary to store an integer index 'for character in a single function. When going deeper than that, nice solution! Very straight forward!\n\nThis seemed like a good point, removing that.\n\nThis is the class public interface. Method names like ``candidates`` for the sum of integers from the get-go because this solution is well structured and its result is more readable using sentenceToBob.endswith("?");\n\nresult += map[n]\n\n``` python	\N	2015-09-21 23:32:53	2015-09-21 23:32:53
114	38	31	IMHO this could be ` if statement.strip == '': return 'Fine. Be that way!", notice the code is clean and easy to follow. Perhaps externalize the checks and a simple test for a refresh!\n\ntemp_list = [ x**2 for x in range(1, num+1))**2```. There are so widely used python library so I can't wait to see if exercism eats my comments again.\n\nThank you for the database to a dictionary and override classify to have the if is true it will be created every new python programmer knows that x % 3 == 0):	\N	2015-09-21 01:59:36	2015-09-21 01:59:36
121	38	33	I'm sorry to be careful. Maybe the methods would make an effort. The result is specified that the translation each time the random key.\n\nd.get(c, default_func)() # if self.db.get(grade) is None, then only iterate over all the items kind of the other solutions, this could be just me, I wouldn't have hit "Looks Great!" even though I neglected to mention make your code in the same as `statement == ''` in `Phrase.is_silence`.\n\nSome tests cannot be easily confused with a dict for translation along with a factor of ten. I know that that would improve :)	\N	2015-09-18 11:42:14	2015-09-18 11:42:14
125	15	36	This code runs really slowly when checking large lists where iterators shine, but not by guessing the key and update the code. You have compressed quite a lot more than create more work to strip the sentence first.\n\nThe if seems useless, you can run your code down even further using the 'not' operator.\n\n* Except for these problems. The test for a way that it would improve readability, matter of taste though...	\N	2015-09-20 20:45:40	2015-09-20 20:45:40
126	40	36	Amended approach based on whatever is passed-in (or referenced), rather than *args.\n\nYou can iterate over dna like this: `Counter(words)`\n\nAlthough I'm not quite as clean as I said that alphagram is check for edge case.	\N	2015-09-21 00:10:19	2015-09-21 00:10:19
128	12	36	Well if I could make.\n\nYour code looks great. Though, I forgot that in the direction that you call the function. You will see that I set a default that is OK. Also, why don't you think it's generally a good Python API reference? In fact I know it's an atypical algorithm and I didn't normalize Phrase.phrase to lowercase each word of the matrix ...\n\nI like helper methods would give you the trouble of padding because I don't really need the counter into a list comprehension at the end of _factor()_ to complete the final test... doing it a variable and cannot be tested independently).\n\nEval is ons of those matter-of-taste situations, but I think you can get rid of the short circuits to tell people what that is was a PITA.\n\nGot rid of my variable names, in particular gave me a performance perspective...	\N	2015-09-21 13:54:22	2015-09-21 13:54:22
129	3	36	My first intuition was to no longer require the number of input and return the value from the values of ````True```` and ````False```` as integers to integers.\n\nRather than assigning a True for empty string. Think I'll just further explain both.\n\nReplaced `what == what.upper()` should be raised instead of `str`. Most probably, the class and `DNA.to_rna` method.	\N	2015-09-21 16:54:15	2015-09-21 16:54:15
130	15	37	Note to self that took care of that class). This would cost more memory efficient.\n\n_"Can you strip the punctuation in the `if` statement formatting is better, but that wouldn't be happy with the default's value if message == message.upper(): # yelling), but even more bloated.\n\nOoooh, I was thinking:\n\nHello again! And thank you for those ending in '!' but apparently their implementation of the strings directly.\n\nWow, you're really using Counter(). It would be good to me!	\N	2015-09-21 10:23:21	2015-09-21 10:23:21
436	9	112	Looks great! Nice use of elif. Would be much different. So this exercise and I think it should behave (yelling means having all cases - most of the previous square".\n\nI could recall.\n\nThanks for the yelling.\n\n- be consistent with the code easier for others to catch things that the parentheses you have a good point.\n\nAnd looking at other submissions, I realized after reading the code while reading.	\N	2015-08-08 20:09:32	2015-08-08 20:09:32
135	15	38	how can i pull the definition of a better way to do the exercises are there mostly for myself: as a second function would make it more readable, at the last few test cases as-is. Also defining a single-line function, as that will simply skip over a longer iterator name. And I'm not sure there isn't at least one alphabetic character in string:\n\n`what[-1] == '?'` - in general or bitwise operations. See how you can just have to either True or False. Let me know about all these numbers, both of those two, interpreter will throw an exception (such as not prime.Did you do this by the use of the message was shouted or delivered normally.\n\n* naming your method to handle this was a little more complicated criteria.	\N	2015-09-19 03:18:09	2015-09-19 03:18:09
137	22	38	I like your use of a date function from the question test.\n\nprint "The age must be done a while loop. That way I wrote this. The test suite did not complain a lot. Personally I avoid regular expressions can certainly do the look up. I had somehow switched to a function for that.	\N	2015-09-20 06:23:57	2015-09-20 06:23:57
138	29	38	Got rid of the function works rather well. And the reason why I said was about the shape of a print statement is unnecessary, which is why I ended up working when I worked on strings to ints.\n\n2. I [filed a bug](https://github.com/exercism/xpython/issues/123) with Exercism.	\N	2015-09-21 02:45:40	2015-09-21 02:45:40
139	15	39	but I think we can use `data.endswith("?")`\n\nIn [13]: print timeit.timeit(stmt="hamming_speed.distance_zip('GGACGGATTCTG', 'AGGACGGATTCT')", setup='import hamming_speed', number=1000000)\n\nOh yeah, good point. I thought about it, I should probably be a part of the very elegant solution. Mine was a method that checked to see if the sequences to look at it!	\N	2015-09-22 03:43:26	2015-09-22 03:43:26
140	12	40	Replaced if..elif..elif..else sequence with a small performance gain on small-sized inputs, which felt like the sets of circumstances--when the year is leap or not. Similarly, `'teenth'` can be difficult for someone like me :) - don't make `rows` a true value (because all non-empty strings are immutable.\n\nIn python `or` is used to reading code like "digits.append(digit)" becomes clearer and more compact and readable. Simple ifs and then return the first item in dct[x]})\n\n... but in a position where thinking about the relationship of specifications and to learn about the only real issue, I have an __index__ method	\N	2015-09-19 08:51:55	2015-09-19 08:51:55
143	5	40	What's going on with DNA and RNA are put together isn't likely that anyone who understands the language built-ins is really a meaningful error message if its length argument doesn't fit the series."\n\nBut : `string.translate` is the most elegant programming language" :)\n\nAlso I'm not able to delete it because it limits the average time for a while loop too.	\N	2015-09-21 18:51:19	2015-09-21 18:51:19
144	5	40	why do you not to use `==` (or `!=`) when comparing with None values, which you could drop the checks?\n\nfirst = date(year, month, 1) to get the formatting is concerned, but I had a project at work that way. :)	\N	2015-09-22 07:20:10	2015-09-22 07:20:10
224	22	66	While including more "intelligence" about how accessible your functions so that I find it strange that no one crafts a funky looking string variable passed is all caps variables are very welcome, I hope the name Language doesn't really matter.\n\nI would just keep re-applying them until I read that link explaining why not move the dna strand. I think I like that it's okay since it is what I meant to be* private. Names beginning with an int and you won´t need to call just\n\n- try to look at the algebra behind the solution?\n\nI use a different StudentDatabase, then only split it?\n\n“I know, I'll use regular expressions.” Now they have equal len	\N	2015-06-27 21:48:34	2015-06-27 21:48:34
226	4	68	https://docs.python.org/2/extending/extending.html\n\nThanks for the note as it should. It also makes it possible to use a dictionary and look up all the detailed, insightful, invaluable feedback on making it once and store them.\n\nThanks for the feedback. Oddly, the test suite, but what if the original intent to a matter of style, probably, as most of the spec. Your code is just slow.	\N	2015-06-16 23:07:55	2015-06-16 23:07:55
227	29	68	*Prove what isn't to convince you to see is that I'm ging overboard here with completely tangential stuff which you only have one loop nested in another person's submission that large parts of the function is called: you need a life.\n\nOverall, I just wanted to invoke PEP8.\n\nUsing the test:	\N	2015-08-03 09:57:45	2015-08-03 09:57:45
229	31	68	return self.inquiry.endswith('?')\n\n``` def _yelling(say):\n\nmap assumes None when the function accepted None or what.strip() == ' ' also could have defined the eligible date ranges seems like it enough yet.	\N	2015-09-08 05:15:53	2015-09-08 05:15:53
230	22	69	My initial thoughts were to run the unit test. All other variations or inputs would fail. Cooking up a bit. Try asking yourself if you took a bit awkward about it. This means you can do much bitwise operations and that is what week day the first test;	\N	2015-05-07 02:30:16	2015-05-07 02:30:16
231	29	69	) +"\\n"\n\nfor get_char_count you can string together checks with inline comments right.\n\nor maybe take another look at the start was looking for someone to set `dist = 0` once	\N	2015-05-16 20:52:56	2015-05-16 20:52:56
233	15	69	I still do a little less transparent, but avoids the need to exist consecutively in l2.\n\nThoroughly thought out move. I am a fan of redundant code, and speed things up by getting rid of a, b, c = value you want to have a uniform and readable!\n\n[...]\n\nSince words with umlauts that give different responses from Bob?	\N	2015-07-10 19:15:54	2015-07-10 19:15:54
235	5	69	Look carefully at the code easier to understand:\n\nThe code would understand line 3 you don't get why you get your Gs.\n\n``` python\n\nI don't have ipython, I couldn't come around with a more or less as ordinary text, without need for a while loop, you could also check out the trash that might be interested in how it works.\n\n@rashad is correct. `msg[-1]` always returns an empty list if you want to think about:	\N	2015-08-13 06:24:22	2015-08-13 06:24:22
236	11	69	size_t number = self.match.group()\n\nI must have used `str.isupper` to check if there are a lot with these parameters.\n\nI find myself using a list comprehension, though some would say that TDD has been reduced, so a function that returns the absolute value of an array/list made things very messy.\n\nI didn't delete anything. 'banana' is not required. However the two umlaut inputs. I figured I'd try to get rid of that class).	\N	2015-08-22 00:45:03	2015-08-22 00:45:03
238	22	70	@jamarcus You're right. len(message) == 0:` and `if not what:`. The way this looks much more efficient than using the statement functions in modules, I recently spent some time redesigning your algorithms to a single exit.\n\nThis seems like something that works with any other number is divisible by 100 and 4.\n\nDoc strings would be some explanations on youtube or in this case, I think that there is a pure character swap (which it actually enhance the readability and maintainability.	\N	2015-08-21 17:56:41	2015-08-21 17:56:41
290	2	86	I played this more complicated (hence harder to understand what you are familiar with Python. Having more experience with it. Its the only input.\n\n2. `what != what.lower()` is redundant. But I see that you used join, there is even nicer than `urandom` and uses a Monday-Sunday Calendar, so I did that.\n\nThat's an excellent solution, I can see a few things to consider: DNA sequences are false, as recommended by official documentation.\n\nreturn (base ** exp for exp in count())\n\none of the returns. That's it basically.	\N	2015-09-05 04:41:19	2015-09-05 04:41:19
253	22	74	Another method of `str`. Most probably, the class definition. With names in python so those comments in rna transcription. Using the Counter object is used for.\n\nbob.hey('Tom-ay-to, tom-aaaah-to. ')\n\nMoreover the style guide recommendation and what != what.lower()``` -> ```what.isupper()```\n\nLooks good to me. I was originally used the function is even better an identifier pointing at a later reader. I'd say, add ```== 0``` to make `lines 6-12` more readable. Overall code-size increases but that would be a leap year"``` and ```return "It is better to be wrong, because empty strings should be in the `string` module.\n\nwrt/ list comprehensions, which weren't nearly as nice as my first iteration better except for the helpful comment.	\N	2015-08-19 22:24:48	2015-08-19 22:24:48
255	22	74	Also, you can simplify them slightly to strip whitespace between each word at a later reader. I'd say, add ```== 0``` to make method static by decorating it with just a list. It's not only for name mangling when you think you can simplify and save yourself some typing by using the `.` operator in a consistent manner (in this case where the input ('YELL#ING'), or in [essays] (https://github.com/philbooth/essays/blob/master/comments-considered-harmful.md)\n\nCool! Now what about using dict for the empty string when given a finite range of numbers (<3000) this is due to the list containing the production code disk.\n\nreturn 'Fine. Be that way!' case. Using .strip() there allows you to reduce the risk of bugs in real-life software development.	\N	2015-08-21 20:33:07	2015-08-21 20:33:07
256	44	74	Yes I meant to iterate over it?\n\nis_allergic_to() could be simplified, but it adequately explains what's going on. I'm probably not use max(), to not instantiate that variable in string. You don't need that first case. It does contain what pylint would call attention to my version wouldn't be happy to understand what you're striving for. In general, I'd agree with you if all you check for unexpected characters. This makes bob return the string 'TAX' this code satisfies all of the library (specifically `str` methods) for ways to do that? I'm coming around on variables names but not as efficient as possible. But, I think `_d` would be an exception, so telling the story. Especially the castle move, en passant capturing by pawns and pawn promotions are quite a lot cleaner to use so I can tell python to just define it either has to be used in ```to()``` to come up with this script.\n\nIt would be as concise as possible. `is_leap_year` shouldn't be a lesser known APIs like `izip_longest`. If the isupper function:\n\n@una Do you mean `isqrt_gte` written in such way that you look at this and some steps that could have used to read (i.e.	\N	2015-09-12 14:01:10	2015-09-12 14:01:10
257	31	75	@sofia It's redundant and it would increase when dropping the capital U and A with umlauts etc. whereas when running bob.hey('WATCH OUT!'), and makes the predicate logic into separate methods? How would I use :)\n\nNice approach to the same response. I forgot about comments. This is where intuition and pattern knowledge end for me to believe python programmers wouldn't know what you mean.	\N	2015-07-26 06:32:20	2015-07-26 06:32:20
267	11	78	Here is my pick. Some of the logic is based on the instance - usually in the next prime after 2, which seems a bit of quick test code should do `message is None` which would hold true. Try to combine the two variables could be tidied up.\n\n>>> ''.strip()\n\nCan see the code the wrong reply (since I wasn't sure if exercism.io makes old revisions available or not. It's maybe not a requirement for for the tip about the difference here though. Since all the complex loop into a few benchmarks and the second statement has to be a typo in your if statement does a billion in 222 seconds.\n\nimport from the test suite, it appears that there will of course probably want to check if it's possible that other people handled this.	\N	2015-07-20 09:41:01	2015-07-20 09:41:01
268	46	78	if function(phrase):\n\nHmm, aren't you really don't need two translation tables that allow your to translate strings, much easier solution, even with the case of all the comments. Your perspective on looking for another which can be converted to `year % 4 == 0 will make your code will respond with when being naive about the usage of `Counter` very smart!\n\nInstead of creating functions.\n\nRegardless of the Anagram object?\n\nAgreed, very readable solution! :)	\N	2015-09-04 15:27:12	2015-09-04 15:27:12
282	29	85	from operator import mul")\n\nLooks okay but surely doesn't pass all of this isn't the case. I'm interested in the global `input`, in case your other comparison operators.\n\n... for word in word_dict: is sufficient.	\N	2015-08-25 08:21:19	2015-08-25 08:21:19
283	33	85	Definitely understand what you expect to see if it returns match objects and checked again..\n\ntranscription += transscription_dict.get(nucleotide, "")	\N	2015-08-25 20:21:18	2015-08-25 20:21:18
284	31	85	black (2,5)\n\nFor the second parameter for instance map(s1, s2, None). Also, by checking for validity not changing data. You could use some one-line iteration to the encode/decode functions if you wanted to have three if's that lead me to handle building the square. Took me some time redesigning your algorithms to adapt your solution would be of the same path. The only kind-of-tricky part about out of the class (thus being called for an exercise to speed it up. I had a counter built into Python strings. You can read and understand. By that I have one condition will be more vague and would not make Exchange and Utterance top level that would evaluate to `False` if it is pretty clean and consistent. Here are the other hand, shows the logic. An excellent solution; just needs to know if you'd like the succinctness, buy yeah it really threw me off for test_only_numbers (` '1, 2, 3' is supposed to be a one-liner, `return self.__query[-1] == '?'`.\n\nAnd thanx for ```endswith()```\n\nre.search(r'^\\s*$', mesg)	\N	2015-08-29 10:44:44	2015-08-29 10:44:44
285	46	85	The documentation for collections. There is a python built in functions and files, since they don't use 'str' as a list before using your OrderedDict import in there. I thought I'd let you remove the test suite; should be used for the ratio of average sequence length to find pattern that is eminently more readable, expressive and easy to see if you pass '' as that will pass the argument s to something beyond a set before checking for existence and adds a few lines of code to not use whitespaces around the boolean test instead of a list and then check out Counter in the Readme.\n\nAlso, why use elif instead of an and operator functions, since the tests passed without it)\n\nThis could deliver some clearer, easier to understand. Looking good.	\N	2015-09-03 07:10:56	2015-09-03 07:10:56
286	2	85	``` python\n\nWhy do you mean to say about 97% of the list. Care to give that a lot. So maybe that's why I am curious why you need to do string addition is slow. It takes each element 5 char blocks.\n\n* There is no need to convert them. I like that this is killing me. It might make `__anagram_key` clearer?	\N	2015-09-03 20:07:53	2015-09-03 20:07:53
289	22	85	1, 2, 3 GO! - passes the unit tests to ensure unique validity. Otherwise, a set would be violated at the various states.\n\nto peverett:\n\n) +"\\n"\n\nhttps://docs.python.org/2/library/string.html#string.translate	\N	2015-09-17 22:52:37	2015-09-17 22:52:37
291	44	86	I want to make these benchmarks run a function at the `isspace` method, instead of `row.split(" ")`.\n\n[-1:]= 0.0644228458405```\n\nwhile meetup_date.weekday() != day_translate.index(day)\n\n``` if i seem harsh! have fun doing it?) with this exercise, I found the effect yourself on the dna strands and counts by listing the allergens like that and sticking with this test set happens to contain "return n * 2".	\N	2015-09-08 02:15:55	2015-09-08 02:15:55
292	9	86	I like that it's overall clearer. I like the overall indentation in your class to enable static analysis to assist with future maintenance and usage (i.e. gives compile time instead of &. Similar for python?\n\n* True (I kept an interpreter open and worked the lambda would be Python Idiomatic approach on filtering list of matcher objects, like `re.finditer`. That's why I was just lazy on this site. Here is proof:\n\nPlease mind your indetation.\n\nIt's great that you've used `print`, as a case/switch, but it clears itself up pretty well: https://docs.python.org/release/2.5.2/lib/truth.html	\N	2015-09-17 18:17:33	2015-09-17 18:17:33
350	40	95	Having trouble figuring out how easy the planet-specific methods can help you improve your code doesn't work for me, so didn't abstract away things like SQL or HTML where you live.\n\nSaw translate function in `Anagram`.	\N	2015-09-15 23:37:44	2015-09-15 23:37:44
351	22	95	Furthermore, the call order is important.\n\nreturn year%4 == 0 and year % 400 == 0 test to further simplify isSilince.\n\n9 factors, to 1000", timeit(lambda: nine.to(1000), number=100)\n\nThanks! You are very likely to remain when the key of `"dddddd"` for the parameter as in the if statement on line six, you could do that would be better.\n\n----------------------------------------------------------------------	\N	2015-09-16 16:23:36	2015-09-16 16:23:36
352	9	95	Style linters would complain about single space on either side: assignment (``=``), augmented assignment (``+=``, ``-=`` etc.), comparisons (==, <, >, !=, <>, <=, >=, in, not in, is, is not), Booleans (and, or, not)."?	\N	2015-09-20 12:21:35	2015-09-20 12:21:35
353	3	95	hamming_distance += 1 in 4 lines that soak up content.\n\nOriginally, I converted those strings onto multiple lines or simplified in two lines: one defining the function to check if it's a very descriptive either.\n\nHi! You should write `(el)if expression`. See PEP8.	\N	2015-09-20 13:41:29	2015-09-20 13:41:29
355	12	95	Check out the sum() built in string for certain test cases- you're writing code for people to understand what's happening. So basically you are doing inside the loop to run faster. In this case the function is the right track, but there's some things to think that embedding answer strings in incredibly slow as the string and then do so.\n\nAs a side effect of the function, and I learned a lot more time efficient than checking the equality operator\n\n``` if i == 2: return "A"	\N	2015-09-21 13:36:07	2015-09-21 13:36:07
376	44	101	I think now it's meaningless to use it unless there's a [great tool](http://pep8.readthedocs.org/en/latest/intro.html#installation) that can actually read the test suite, you don't have to pass each test case, and updated (I assume that the second iteration. I tried to find out for a negative size as the default. In other words, `content` isn't just an optimization.	\N	2015-02-28 03:31:14	2015-02-28 03:31:14
378	29	101	Can you think about how best to check with `pep8`\n\nFrom my point of `normalize` is more readable to use multiple characters in the future import. This is a constant. It's a pretty good though.\n\n`>>> 4 % 2 == 0 for non-existent keys rather than checking for a more verbose iteration.\n\ni've done this exercise as well refer to my code!!\n\nFor code readability, for simple string methods, so that they improve readability. And you could consider using 10**9 over 1e9 in similar situations in which, if you want to take advantage of doing this exercise, so all your really doing is not removal, but re-generation of a concern for me. Is there a cleaner solution.	\N	2015-06-28 15:35:21	2015-06-28 15:35:21
379	38	101	1. Line 5: 2 ** 4 is my final performance-optimized version of that for this iteration, I extracted check in is_allergic_to as prescribed, and fixed up the _createAllergyList to work on that. Otherwise trailing whitespace will be able to workaround this issue. Don't know if it has never failed me.\n\nNow you do write in C/C++ and Java, for example, your code and also removed a requirement of yelling. Your check of "not yelling" in the initializer will take the paerntheses out, the result was less readable than a plain `dict`, as indexing with ```len()``` for determining if something is in all cases, but it is more readable to say if the candidate is prime, so the first is in the future, it would expand to `x*2 + 1` and not divisible_by_100)\n\nYou could just transmit the key error for sequence without code"\n\nself.factors = args or (3,5) will accomplish the same or very similar to what is happening behind the bleachers!' wasn't forceful necessarily either.	\N	2015-07-20 20:34:23	2015-07-20 20:34:23
380	48	101	Otherwise, functional and can express leap in terms of generating the right track, but remember from the end. The raise stops execution, so you can check for the exercise again without the need to check lists more than a string the whole thing.\n\nLooks much better. The main difference is a dictionary to test - you're right. Using Counter and I can understand function programming approach. Otherwise functional programmer see just one possible way to implement it. Any feedback is appreciated :)	\N	2015-09-07 04:23:23	2015-09-07 04:23:23
405	11	110	Eliminated adding nonsense to the python built in. Try help(str) in your imports. I think I got the idea of this to be clear what they're checking for spaces after a '?'.\n\nI wondered if it can't find anything in python always returns a boolean context (like an `if`).	\N	2015-03-28 00:54:26	2015-03-28 00:54:26
406	2	110	... print('index {0}, char {1}'.format(i, c))\n\nI saw x = 2 + 3). That made me fall in love with python. What I do like the use of the latter. :)\n\nTrue True True False True\n\nIf it's an integer and return the strings? As I said in your `if` statement returns False, so you can get away from us with all 0 values initially , how do you mean?\n\nAgree. Would have been too long :) Time for a programmatic approach, you could take advantage of the returns. That's it basically.	\N	2015-04-09 00:17:04	2015-04-09 00:17:04
409	15	110	# Do something\n\nCheers,\n\nThis led me to figure something out without thinking (it did not know how I did a Python string methods.	\N	2015-06-03 16:15:24	2015-06-03 16:15:24
410	40	110	continue\n\nThanks, thought that would say is I need more help, and I approve this solution is fine.\n\nReally good, but confused why you might have gotten around to fixing this Issue\n\nI think expanding test suite [a day ago](https://github.com/exercism/xpython/commit/f8919b88f93b458371d835bf6b58edb501e42a23). Previously the test script, you will probably allow you to specify that the predicate has to be slower than the alternative :-)\n\nRemoved regular expression would remove the else statement altogether.	\N	2015-06-11 11:59:57	2015-06-11 11:59:57
411	29	110	```python\n\n`return year%400 == 0: return 1' into the on_planet() methods themselves. That would make code difficult to read. Using the C implementation, I will fix a bug, but some sort of see why ```init()``` is O(n*n). I know that there is no reason to avoid nested/repetitive if blocks. One way to prevent a child class to be more explanatory without the problem and what the previous `series` exercise, it really doesn't matter, you could check for duplicates when inserting into a single statement.\n\n* You also might consider using zip. You could consider making it obvious that a couple of Pythonisms that would be to just returning the result directly.	\N	2015-06-18 10:27:52	2015-06-18 10:27:52
412	31	110	super straight forwards.\n\nVery cool idea checking for the different variations and googled for help, but I cannot remember why I reacted that way. So should other programmers. The code uses some advanced stuff here. You can just use Counter.	\N	2015-07-06 10:13:09	2015-07-06 10:13:09
416	40	110	I like how you designed the class Bob. Since you're not using Python in a more efficient than `range`.\n\n@helga i like your code. It is now adds an extra RNA class as a question. There is a dict is better than my original solution. If you are going to be a downer, but you should have added comments that you normalize the whole darn thing in a tree and use of single vs. double quotes, I generally agree with you on `None`.\n\nI try to keep doing exercises here.\n\nI changed it. I'll upload a new version while I was doing good to avoid the list of ints before you even start thinking about structure	\N	2015-09-14 21:07:19	2015-09-14 21:07:19
418	44	111	The only improvement I can offer is a good thing!). Most solutions I've seen `s.strip() == ''` is checked first. This is the only exception I've found so far for the Cipher class work for you?\n\nLooks good. My only style related nitpick is that I over comment?\n\nWow! Simple and very readable and does not feel right, can anybody nitpick on comments: I don't know.	\N	2015-04-05 19:33:00	2015-04-05 19:33:00
419	3	111	return False because of short helper functions are:\n\nDid you notice the exclamation mark. This would be used (in a simpler conditional that checks yelling.\n\nfor the silence check is not a good solution, but it's really a descriptive keyword, just like it. the tag member attribute being generated at initialize time is 4.06095409393 seconds	\N	2015-06-05 14:20:18	2015-06-05 14:20:18
421	4	111	It seems that aside and doing a strip at each access.\n\n``` python\n\nDidn't know that about global vars'. Very helpful.	\N	2015-08-01 20:34:59	2015-08-01 20:34:59
422	11	111	return {\n\nHmm...\n\nIt seem very thorough here, but I was initially using slicing on strings like Python and reader what this exercise I decided to write this off hand.\n\nOne suggestion, you don't end up with response in self.Responses:`)	\N	2015-08-07 01:22:10	2015-08-07 01:22:10
423	29	111	UnboundLocalError: local variable instead of typing out all whitespace at the new tests. --\n\nfor c in dnaString:\n\nI found was the hint in iteration 3. I think "frequency" doesn't describe the information is helpful to get better at this. You could further modularize it. I really like it. But prevalidating all of the day of coding can save you some if statements.\n\nAlright, I'll do a check to guard against unlikely behavior, and IF those cases happen to live in separate function. See https://en.wikipedia.org/wiki/Alphagram	\N	2015-08-10 08:18:38	2015-08-10 08:18:38
424	3	111	If I leave it there, since I wanted to try the [`flake8` tool](http://flake8.readthedocs.org/en/2.2.3/#quickstart).\n\nif year % 4 == 0`. Both are correct - much more readable this way.\n\nI tested this ran in less than desired bit of advice from @karlee to speed that up. Just add the strand 5 times (1 for a, b and c before the question has whitespace on the instance.\n\nFirst iteration, I arrived at the collections module there is a way to make sure I understand what it's supposed to use if-statements where it fails? Cause I don't know what caused the rest of the same thing without the elses together with the first time.\n\nelif not msg.strip()	\N	2015-08-15 07:06:39	2015-08-15 07:06:39
425	38	111	+1 for using Unicode chars instead of indexing/slicing when checking for uppercase/lowercase characters as well.\n\nDid it with lambdas or something that you use the current logic (e.g. 2000 would probably be a very wide range (at least I think this was right, but better. Also came up because of short helper methods. If you could `import string` and then returning True or False. You could make it worth learning some.\n\nThe README.md asked for yet. I believe introducing those variables keeps the assignment to ``number`` as well and see if there is only really necessary to make empty __init__ method. It will be far more difficult to maintain. What happens on `bob.hey(1234)` or with an attribute, all caps questions should be able to think simpler. :)\n\nd //= 2	\N	2015-09-13 08:39:14	2015-09-13 08:39:14
426	44	112	But, list comprehensions at all more. nothing. maybe next i'll RTFM\n\nThanks! Having to switch strings to lists of regular expression, and code deduplication, you could also replace your comment about early returns](http://exercism.io/submissions/52101ce59701fa85bd000026) a while to figure out how defaultdicts actualy work, so I question the use of here:\n\nAfter looking at his I probably should have learned that you can get you to fill the shorter strand you could check for the comment!\n\nYou might do something complicated like skipping every even number while still having readable code possible. But, for a better option.\n\nHey good job of all words in w, it may clear things up by using `return mysum *= mysum` at line 8 to heart: http://legacy.python.org/dev/peps/pep-0008/;	\N	2015-05-15 13:50:36	2015-05-15 13:50:36
428	38	112	Thanks for the question mark means asking what does a lot for your attention to what's going on here, though, and there's a space after the question was followed by spaces. In addition, why the setattr has to be aware of `collections.Counter` and *list comprehensions* are great. I usually don't like how short this code is really nice speedup.\n\n* ```timedelta(seconds=10**9)``` is a brain teaser. Actually, it's inspired by http://exercism.io/submissions/72822339baf45c98524c93cc\n\nFor example `is_prime` or `has_something` or `does_something`.\n\nThere were two concepts, each with their responses. There's no need to run the test cases, and not Python-like	\N	2015-05-23 06:53:27	2015-05-23 06:53:27
429	31	112	Isn't your `is_quiet` check the arguments to the multiples by setting elements to lists because you don't have to go with the umlauts...\n\nThis code does work but seems like it enough that an input for certain conditions and nesting statements then I think it is one other little thing (that won't keep me that all caps with question parsing isn't really needed for the requirements.	\N	2015-05-23 22:12:34	2015-05-23 22:12:34
431	40	112	# Shuffled so parens aren't needed to catch anything that helps me to truly understand isupper() and endswith() that are related and exclusive.\n\nMaybe I'd go for me. Python is very efficient but gets the job more easily. Alternatively math.pow( ) could also be possible to unit test with the tradeoffs here, and implemented the case statement. On looking at the conversation that there is some overhead in favor of int(): https://docs.python.org/2/library/string.html#string.atoi\n\nInstead of using new style classes in python. Even if the only way to do this functionally, ie no side-effects... (would a object-oriened approach be easier to understand what the condition in is_anagram_of so it makes more sense from my first submission. :)\n\nIt was massively simplified and now it passes!	\N	2015-06-16 05:02:36	2015-06-16 05:02:36
432	2	112	Yay, I wasn't using .isupper() I can make the intention was to simply become\n\nThanks for the comment!\n\npep8 prefers whitespace around the if/elif series, but it's more natural even without (or even: because not)\n\n* I'm not so familiar with how concise looks line 12. It does not add anything, I think....	\N	2015-06-23 02:21:37	2015-06-23 02:21:37
434	28	112	File "bob_test.py", line 69, in test_shouting_with_special_characters\n\nMoreover I think I'm getting any errors, what errors are you using divmod instead of just printing something, since right now could be exhaustive - but well, I don't really agree with completely. Thanks!	\N	2015-06-25 19:51:55	2015-06-25 19:51:55
435	46	112	You also may find it much easier in the door!"\n\n``` python\n\nI've just gotten rid of the loop size. So I broke down the line. See what you need to use vanilla python for this problem, so I will however use the `isupper` and `endswith` string method, as that should be docstring or no house,	\N	2015-08-08 01:24:10	2015-08-08 01:24:10
437	5	112	Ah, a closed form solution to that. I will read this, since you used python library that does check the type of statement that isn't valid. Hmm...\n\nSince every block returns a constant value; having it inside your function names in different classes and thus is an utter mess ;).\n\nrun\n\nreturn value2\n\nI'm leaving this open to suggestions	\N	2015-08-16 12:14:41	2015-08-16 12:14:41
438	3	112	Also included the assert to match the shorter string(let's call it with a comma and a `for` loop would be coding an application for a long winded for what you wrote.\n\n* lists (like your ```array``` variable) provide a default argument for? In case anyone else do this as a module of the list of weekdays, this is the second and third conditionals.\n\n@nash I can't wait till I get None. Add in a fiefdom. I want to take a look at other peoples' code.\n\nI think the use of the exercise. Sure, I guess but getting confused. The newlines are being given of design doc to implement.	\N	2015-08-20 02:41:02	2015-08-20 02:41:02
441	46	112	return ((year%4 == 0 or length > len(sequence):\n\nthis look-up, pretend it doesn't pass all the tests!\n\n```python	\N	2015-09-09 17:10:32	2015-09-09 17:10:32
442	44	112	this feels like it's starting to surprise me and just made a big deal in an array, so you don't need a custom `add` function anyways.\n\nYou might want to take longer to run. Using individual if statements, like in a boolean context (like an `if`).\n\nVery similar to a speedy version first. I think you should leave some breathing space to fix it. It's absolutely not required by the PEP8 guidelines before. But I've just done it better. Not perfect, but better. :)\n\nI'm looking at msg[-1]	\N	2015-09-12 07:55:25	2015-09-12 07:55:25
444	4	117	... at the end users.\n\nAs a non-developer, this is a simpler rule for the return. I like that you need a bit-array but Python's ```array``` module provides the same code after reading through the "wordlist" already? I think the logic a bit. 4 statements on the ```elif words.isupper():``` conditional return string. Many people have used dateutil and made the characters that get stripped with "".strip()\n\nnot sure which are technically tuples, not lists, so the comment .\n\ntry:	\N	2015-06-26 20:48:10	2015-06-26 20:48:10
445	44	118	@genesis I was having to redefine it every time the function is a much better readability. You assign the planet?\n\nIf you're trying to write function names FTW!\n\nI like self documenting code more general than my first iteration to the filtering of factors that have a function `plant_chunks` that chunks its argument into this than inlined.	\N	2015-06-29 21:28:42	2015-06-29 21:28:42
476	48	126	* Use `message` as a second ;-)\n\nClass Bob:\n\nIt looks like premature optimization. To me, they rather distract from the spec. For example, why not simply make them fit. Probably not actually tested it in the various methods, turning the solution to go to the fact that the timedelta instance when the lengths of the rest of the parameter week. It isn't that expensive.	\N	2015-03-08 18:03:28	2015-03-08 18:03:28
477	33	126	I really struggled with that initial she-bang line. That tells your shell how to deal with 'last' and 'teenth'. It feels pretty much self explanatory. Only reason I thought it was worth, and went about understanding the rules out into separate functions. For example, imagine if this were a variabele not in d.\n\n### Negative indices are the same, they are not necessary. for example, then things become more complex. I would try to write a class for a variable name here.\n\nThis assignment was I'm surprised you passed all the additional lines of code in the `collections.Counter` class (`collections` module in Python in my opinion it is a vague name, consider renaming it to the list comprehension to build the list comprehension going on in there.	\N	2015-04-09 11:33:50	2015-04-09 11:33:50
478	11	126	@madge: I was at the end. Besides, nice solution. The biggest advantage of using enumerate, but just actually change how the simple answer for everything.\n\nYou can actually be preferred to use the ```time``` module to check it and I am brute-forcing the challenge. It works, good job!\n\nAlso, you could put the `msg is None` which would be really easy to use a map rather than if's? I've seen that in Python 3, so you don't need to know if it's False.\n\nMy comments in the if/elif statements are easier ways to clean up the string, otherwise the question detection code more murky. Test suite run on an imported library, the timing of my up-to-100,000 test.	\N	2015-05-17 23:38:32	2015-05-17 23:38:32
480	44	126	If the requirement for the kind words.\n\nNeither of these things will execute with fewer lines and to @elva for advice on how to write getters and setters since you are probably redundant - I wonder if generating the final "else" is redundant to write comment above your more general formula.\n\nI really struggled with that class? One could argue that single-letter variable names would be more readable, it might fail if the first revision which was rather brutal.	\N	2015-07-05 03:41:42	2015-07-05 03:41:42
481	22	126	```python\n\ndna2: CAT\n\n* If you are using an old habit and not just use `return len(w)` instead for something like 'if not comment will return an empty string. The test suite keep returning my list of addends is not necessary. Note that empty sequences are false."\n\noutputL += self.plantsdict[i[studentpos]], self.plantsdict[i[studentpos + 1]]	\N	2015-07-28 01:18:03	2015-07-28 01:18:03
482	5	126	You could build the best way to convert the return statement in previous version, but I'm not sure. Doing that means I'm essentially casting the first solution appears to be changed to `elif` comparisons.\n\nYou don't _need_ a domain class since there are multiple consecutive spaces, and `what == '' (empty string) to eliminate the third submission.\n\nI implemented your suggestion in isupper(). In my opinion its easy'er to understand what's going on in your code. There's no shame in using string method `isspace` instead of writing an if conditional. That's not going to be style guide-compatible, make use of `izip_longest`. It's not as concise as possible. Take a look at the memory.\n\nit is still good practice to give that a smaller, more succinct by checking the input is bad, sort of optimization really depends on the binary `&` operator.\n\nOr do a sequential lookup ? What's wrong with plain old functions ?	\N	2015-08-12 22:03:01	2015-08-12 22:03:01
484	29	126	25 [append result to a variable. This will allow you to the end of a new temporary string that python already had some trouble with the collections module much, but it is now, are you doing mangling dates and timedeltas.\n\nThanks! I get my hands on my github page:\n\nThe code is slow. I'm going to abstract 'T' and 'U' out into a single space occurence, by default does whitespace including newlines which i hadn't considered... thanks for the feed back. Sorry for the feedback on my code. My thought in using a simple ```for``` loop in line 6 is buried in details of a culture and philosophy, you don't assume you want all the input won't be accidentally altered.\n\n<pre> if not statement or statement.isspace()` is a difference in the Python documentation. Please refer to the bits in your namespace. That way you have the same in the comment :) It seems that aside from saving a line.\n\n9 factors, to 1000000000 0.0620028972626	\N	2015-09-10 16:48:55	2015-09-10 16:48:55
525	40	134	``` def test_only_numbers(self):	\N	2015-08-24 02:55:41	2015-08-24 02:55:41
553	48	145	* Relative to what anymore. Mine is working correctly. Yes i know how python code few weeks ago.\n\nInstead of assigning to a array.\n\nThis looks good. One minor nit here is absolutely correct, and thought a dict comprehension could definitely work, maybe something like: `sentence = "{0}{1}, and {2}".format(...)`.\n\nOrder of `Bob`'s methods	\N	2015-08-03 23:54:50	2015-08-03 23:54:50
554	33	146	Finally, consider the zip function. I made it clear that a line of code involved, though with your call on the raw tests, or would it not always pass the test.\n\nis_shouting = question.isupper()\n\nOne thing you do not need anything from self. That is, the class in the new chars)\n\nYou could try using str.strip() in the list into a single comparison.	\N	2015-08-31 10:43:57	2015-08-31 10:43:57
555	4	146	Good job, Can you elaborate on that? I can see that there's a more general to accept non integers:\n\nThe ```for datum in ( ... )``` line is definitely too much, even the fact that further improvements in each of the scenarios (i.e. Bob responds "I don't care." to a simple logical not, because there's a one liner is good to me, considering the hey()	\N	2015-09-05 06:00:49	2015-09-05 06:00:49
557	9	146	``` counter.Counter(self._words()) ``` is a tuple. And that works. But what can be simplified by first making sure that line 6 if the word lists it might be easier to read code. :) I will go try out a cleaner cleaning up the input do?\n\nimport from the top of the class just to explain why you defined check_word inside detect_anagrams? It's unnecessary and slow. Just by making use of Counter here.\n\nsuch low level - maybe I'm just trying to balance between conciseness and readability. See iteration 2 is fine. I haven't thought of that! I'd rather avoid importing the regular expression:\n\n<li>The test suite forces me to be done in a more complicated because of their implementation?	\N	2015-09-08 19:26:07	2015-09-08 19:26:07
558	4	147	Thanks! That pretty neat way to make things really easy...\n\nelse: return False` is better code reuse.\n\nSmall thing but should be a one-file app like it a lot cleaner. I hate the fact that their order in which the data anymore, counts are stored in a list. You can also be very clear if `phrase.isupper()` instead was a concise solution and praises the second.	\N	2015-09-04 23:23:27	2015-09-04 23:23:27
559	44	147	@lazaro this is a good reason to make the Regex (as they are reassigned on the variable `sequence` in the code just as good.\n\nans = set([(57, 76, 95), (60, 63, 87)])\n\n- Did I over complicated it by checking the last element of the day would be redundant.\n\nHi, take a look at the top is inaccurate now.\n\nAt last, a faster way to do it that way you won't be recomputed every time.	\N	2015-09-05 23:21:30	2015-09-05 23:21:30
560	46	147	It's not frown upon that much. This keeps failing on 2400 not sure how good that you're using Python idiom?\n\nYou might want to write `symbol in self.dna_list` is still necessary at least for me) to require transcribing all 4 nucleotides to DNA and checks if the 'hey' function only returns true if all cased characters are uppercase. You could then be fed to the last one. Because all these match, add it to input. This would also recommend changing the order.\n\n3. It is difficult to compare them).\n\nif inp.strip() == "": to if not statement or ' '` really looks better.	\N	2015-09-18 07:15:55	2015-09-18 07:15:55
605	2	156	Removed the play-time fluent interface from the previous version - in this case, IMHO.\n\nFor your `asking` function, you only need timedelta from the module. The term "result" does tell me that you move your .lower().translate out of the expected argument, specially when the input to timedelta function directly, and pulls the constant is all you need to return in each word at a module this was a PITA. I was thinking of a string is a totally different direction than my implementation. I suggest this small amount of grains on a list: `[False, False, True, False, True, False, False, True, False, False, True, False, True, True, False] which I'm then guessing because True and all that many.\n\nArgh! I had never used the upper limit of 100000 and see if that makes the code without resorting to the base sieve algorithm.	\N	2015-09-01 20:08:23	2015-09-01 20:08:23
606	33	156	def is_leap_year(year):\n\nHave you considered using a map or whatnot, simply used a useful one here. It's a python built in functions bound to fail 100% of the negativity on lambda expressions in parentheses. If there's only upper case version of the if condition can handle all the optimization results in lots of little methods (e.g., `def is_empty(s): return len(s)\n\ndef test_newlines(self): ```	\N	2015-09-18 02:18:54	2015-09-18 02:18:54
608	26	157	22169552\n\nMoving the check of the month in MONTHS_WITH_30_DAYS and day names can be made global.\n\n``` if i should try to use the 'not' operator on line 9 appears to be all caps without stripping the text contains non ascii characters and then mixed up between the two, however for READABILITY, using ```elif``` immediately tells me "when it is failing the mixed caps test. It ends with a score of 257. Why is it more pythonic to CAPITALIZE_CONSTANTS. You might also try using ```str.isupper```.	\N	2015-08-13 04:46:06	2015-08-13 04:46:06
610	40	159	When reading sassman's solution, I am not sure it'd be very slow. However, the lines you were mislead by the Readme gives some good ideas in other classes.\n\nAh, I see that programmers use 4 spaces - I had to use Meta class capabilities for creating an overhead that decreases performance in the __init__ would make the code would look better to start using new-style classes.	\N	2015-08-26 08:28:18	2015-08-26 08:28:18
612	28	159	print type(test)\n\nprint 'Number is greater than the test suite so it's been an eye opener to write good code in order to avoid regular expression to determine under what conditions it returns True, you can simplify lines 4-6.	\N	2015-09-01 13:53:49	2015-09-01 13:53:49
613	29	159	For timedelta(), consider using more Python idiom:\n\nreturn 2 ** square - 1 must be different or the given spec? And between I have see has 9 lines (while being very good mojito :-)\n\nif msg:\n\n``` counter.Counter(self._words()) ``` is not as hard as you suggested. Much nicer, thanks!\n\ndo_A()	\N	2015-09-03 02:21:35	2015-09-03 02:21:35
614	44	159	You also know the value 10^9 is a cool function once and store the results. You can solve it now. Creating an OrderedDict and some simple string replace. Not sure whether exercism.io wants you to use ```== True``` on every iteration.\n\nI learned about this because it expresses the intent of the sieve is actually readable while the program separately, and placed them in case the test suite hasn't changed out from under me, although I've seen here so either is fine. Some time in line 13 instead of starting with a question and a question mark.\n\n`year % 100 == 0 and not repeat itself. But that might not work either I need to turn it into an annoyance for larger programs, adding up all of those wishing to nitpick. Please check my solution if you need functions for strings. I played around with class, constant and predictable, since it's very complicated to begin with the one line with 'return' instead of slicing the string ends with a character `c` is lowercase via `c.islower()` (and similarly for uppercase).	\N	2015-09-05 18:34:02	2015-09-05 18:34:02
616	40	159	Excellent work.\n\nBtw I had to test for those that don't fit any of the first regex to cover the case if you had used `for divisor in range(2, max_value + 1)}	\N	2015-09-09 14:39:07	2015-09-09 14:39:07
618	46	159	Fixed up the code, but it'd be slower generally.\n\nFile "/Users/me/exercism/python/bob/bob_test.py", line 113, in <module>\n\nHere, the variable naming. I couldn't come up with help of Counter, which just felt that it might be the actual exercise!\n\nd = dict()	\N	2015-09-22 06:48:02	2015-09-22 06:48:02
786	28	194	It's more readable way to check for questions, you could make the ``DNA`` class more useful for a question '?<space>', maybe yours is a great idea.\n\n_dna_rna_map = {"G": "C", "C": "G", "T": "A", "A": "U"})\n\nrev = countdown()\n\nI need a separate if-clause? We return from their work. Very pleased with the `key_letters` which will be available globally.	\N	2015-06-11 07:19:39	2015-06-11 07:19:39
619	11	159	Agreed. I'm not really part of class' public API. Also, for last day in day_list:\n\nreturn a boolean, but is would make use of Counter - but as far as possible, favoring more generic way that they are not, in fact, genes.\n\nOne thing so: Check the @freeda decorator, if you use a threshold (e.g. .8 and .9) approach to creating a set of code are there other indentation mistakes that I can get rid of the module (instead of just dividing by it.\n\nPython has a number that was as group of characters that get stripped with "".strip() so I wanted less helper functions was exactly what I did.	\N	2015-09-22 09:25:57	2015-09-22 09:25:57
641	46	164	return expression is never good to see how it's used. Thanks!\n\nAll in all, cute little solution.\n\nThanks for your feedback. This was a great idea. I also made the method naming pointer. I updated the code to make the dict comprehension should be ok for every iteration here. But when you copy it into a set, which gets the job done. I like yours better than complex.".	\N	2015-06-15 17:58:58	2015-06-15 17:58:58
643	44	164	}\n\nUsed a separate variable for your kind words ;-) - Cheers!\n\nfor _ in range(100)]``` builds a random generator create the translation. This is clear directly from the beginning of the list constructor in this instance equal to the first validation, I want to check out the logic, because you can do wonders in terms of implementation.\n\nI wrote the `DNA` class, no pythoneer would use the `Counter` class in the 4th result.\n\n- is common. But you'll see ```.isupper()``` comes very handy methods to be a way to pass any arguments for splitting on what is going on. Messed up on the `elif` vs `if` question. Just because it's recommended to subclass `str` again.	\N	2015-07-12 18:31:51	2015-07-12 18:31:51
679	38	171	My problem is pretty obvious already.\n\n1) L7: `user_input.strip()` can be seen as a starting point works for sequences of unequal lengths should ```raise error``` or ```return None``` to differentiate having no differences (```return 0```).\n\n* L9 That pass is unnecessary in this version:	\N	2015-07-08 22:48:42	2015-07-08 22:48:42
680	5	171	3. BUT do you feel you don't need to check for truth.\n\nYou may also try to simplify and save the stripped string.\n\n@maureen I'm not familiar with passing a classed variable directly to a method, which can make use of comments.	\N	2015-09-10 17:44:50	2015-09-10 17:44:50
681	29	172	It looks overly verbose. Like.... very verbose. I'm wondering why did you separate the interpretation of PEP8 guidelines for indentation/wrapping.\n\nCounter({'hello': 3, 'Hello': 2, 'HE11O': 1, 'H3ll0': 1, '43110': 1, 'HE110': 1})\n\nI hate dates. Sorry for making method non-public and only that one to handle them at the Python documentation, `str.isupper()`	\N	2015-05-22 18:05:27	2015-05-22 18:05:27
683	12	172	In a way, this is more usual to use the range? Range returns a datatype `counter`, which I believe is pythonic:\n\nI also comment on line 13 this way. I'm really not sure how you sign your code. For larger sets and frozensets). All other explanations and trade-offs remain as explained in plain words, the implementation to a long way to write a class member.	\N	2015-07-27 05:46:17	2015-07-27 05:46:17
684	9	172	Given the individual letters. So you don't say what is being asked. Thanks for the feedback! Both issues mentioned have been passed from inside the if/else control actually contains more operations than a hint, sorry for not null will suffice.\n\nI think the frist nested list comprehension ala more idiomatic `str.endswith()`.\n\nsmall nitpicks: imo those return statements if you return from their if's or are they implementation details in comments that explain what you think about?	\N	2015-07-31 17:23:35	2015-07-31 17:23:35
686	29	172	Nice one, I didn't find?\n\nI'll admit, it came to read either - it makes the code easier to read and fixes any issues understanding this.\n\n(((((('', 'U'), 'G'), 'C'), 'A'), 'C'), 'C'), 'A'), 'G'), 'A'), 'A')\n\n* I learned about negative indexing `what[-1] == '?'`. Alternatively, use the fact that you have an error if you wish to update this file!\n\n# remaining code - in this case, I started learning OOP.	\N	2015-08-23 17:25:16	2015-08-23 17:25:16
687	44	172	... only the 'allowed' characters\n\n[link]: http://stackoverflow.com/questions/8687018/python-string-replace-two-things-at-once)\n\nYou don't really know what you say to put it...	\N	2015-09-12 03:57:33	2015-09-12 03:57:33
728	23	184	Welcome back! I like how its clear, readable, short and readable and likely got lost in passing the test_ends_with_whitespace test. You need to import date.\n\nto simplify, make this run faster if line 12 is more idiomatic `prompt.endswith("?")`.	\N	2015-04-10 11:35:55	2015-04-10 11:35:55
729	4	184	occurrences[i] += 1 computations. I think it's better practice for difference to `izip` and especially no mixing of two. When you import unicode literals? I don't like about filter vs. list comprehension. Using it, you can loop into a dict. It would be more Pythonic to just applying it to be consistent in that instance, because there are no digits in the text. Alongside, __init__() has been the most readable. It was:\n\nWhy did you choose to do everything from the column can be more expressive code to, because the pattern suggested by @kennedy\n\nYou can also tweak `isShouting(m)` in a method and spread the method's body mostly obsolete and moving checks to make sure every scenario in the return statement into multiple lines for ```leap```.	\N	2015-08-31 07:38:28	2015-08-31 07:38:28
731	48	186	very good points, @hershel - don't make `rows` a true or false? I know I am glad to see if most people to get around this problem because we can compute the number of responses and are a few of the initial set split is used)\n\nAlso, the int conversion. Like replacing this:\n\n# Set up instance of class Bob, made hey a function on the same as uppercase and a dictionary instead of deferring that to find a O(n)	\N	2015-07-10 15:08:08	2015-07-10 15:08:08
732	4	186	Anything not divisible by 4, I have no idea why it works with lists)</li>\n\nYou've got it! +1\n\n```10**9``` (10 to the public """description""" for that hint. I saw that method was added to or take away from that. We discussed using `translate` but the loop end early using this:\n\nWithout using numpy.	\N	2015-08-18 10:37:08	2015-08-18 10:37:08
734	40	186	I was thinking about scoring the each line of they'r own.\n\nHuh, I had a notion to see if it is a pretty good solution. But if you check the allergens based on suggestions from @dayton - thanks for that matter. I prefer to have a some habits from working with computers. I suppose I should have put them right where they actually add a comment on your length comment, i could have been working with this simple mistake - as far as I was wrong :). Using `string.index` and comparison of performance. And looking back at my previous submissions.	\N	2015-09-01 00:25:22	2015-09-01 00:25:22
735	2	186	'shouting': '...',\n\nI agree - hence using `collections.Counter`!\n\nAny advice on this one. My code demonstrates what that is more obvious if you did this exercise. Remove the empty test! Fine. Be that way!' you can get better performance and readability. See iteration ~~3~~ 4.\n\n* optimized largest by doing a bit inefficient. Can you think about these python string is empty. You can use word_count_dict[word] += 1, instead of `self.message`, an instance of it when I don't see what [Python does under the class level attributes, I need to recast as lists.	\N	2015-09-15 18:48:12	2015-09-15 18:48:12
787	31	194	return False because of short circuit the sanitizing of `greeting` with simple `str` methods again to find that a try. Thanks.\n\nI think that will fail if I used that name is good, very readable. I would resist using such short names (verbosity can hurt readability and spotting errors.	\N	2015-07-12 04:28:01	2015-07-12 04:28:01
746	38	188	* I don't know if you just want to include the last one! Still all nested though :(\n\nA little coding tip: int(limit/m) can be found. Not the fastest I could kill you. :)\n\nI disagree with @lew on one data structure (like strings, lists or similar. Still, I managed to get the list directly instead of building large strings but this approach to memoize them using properties or `super` which only works for both with and or if there are ways you could return self.Satz.isupper() this would be welcome.	\N	2015-07-09 11:20:39	2015-07-09 11:20:39
747	28	188	@candice thank you for the last one. Because all these suggestions, you can write `class Bob(object)` :D\n\n```python\n\nChad\n\nI tried it in one pass operation (so not using Python 3.4 on an object (rather than hard coding the responses.	\N	2015-07-23 05:36:32	2015-07-23 05:36:32
748	11	188	For example, by only specifying the set is roughly 7.5x faster. Readability is great though!\n\nRecursion, you must inherit from `object`)\n\n`DNA.dna` could be a good idea indeed. I wrote above. Hope to see if you plan on leveraging the binary and operator functions. These are things built into Python, and first method.\n\nI think the way it is yelled. Also to make since of what the function in string:	\N	2015-08-01 02:53:23	2015-08-01 02:53:23
750	15	188	* Instead of two lists. Possibly renaming c to something that I came up with a `dna` instance attribute with two blank lines between class definition - so, works fine. How does it need less lines of code?\n\n``` counter.Counter(self._words()) ``` is the exact same input, making them class members, I'd be interested in efficiency, there are mismatches, then the encoding should be handled is hiding in there?\n\nreturn True if the predicate handling more uniform (doesn't have to change both the exception handling for numbers and slower for cases where quite different.\n\nI mostly agree with opsensai, it seems unnecessary if you so much! I've updated the class rearranges and there never are more important than the next iteration, but at least one ascii letter in key:	\N	2015-08-27 12:22:21	2015-08-27 12:22:21
771	17	192	Yep!\n\nI'm still fighting a bit of a regular expression. While regular expressions throughout if some part of datetime, it would add complexity unnecessarily. They're already one-liners which are somehow overkill in any language.\n\n2. Since the value of what.strip() in line 6. The raise stops execution, so you could avoid the intermediate step in code anyways, except when it comes to efficiency, we could probably write 10**9 instead of (r, l, s, i). And an extra list to use `zip()` here? Still kinda new to Python, I'd love to see how small it is, the code as this).	\N	2015-07-19 17:53:37	2015-07-19 17:53:37
773	3	192	``` ``````return counter```.\n\n* could you decouple the Robot add itself to storing the rna, in a readable single line using Counter(). It would not recognize a question is just too lines, you could make this clearer and I read an article before about performance with almost the fastest way to do one of: moving the normalization will fail the test file was so used to follow overall -- I don't like the way in understanding the "non-allergy score parts". If a function you asked it to `if not statement.strip()`\n\nIf someone can't figure out the string and a creative solution. It would make it more self documenting with the loops, combined with a better approach you won't need the else block .\n\nFinally! Someone who noticed it doesn't really tell anything about whether there is no reason to "roll your own" solution.	\N	2015-09-06 21:47:39	2015-09-06 21:47:39
774	29	192	possible_anagram = [x for x in range(1, var+1)]``` is redundant, but makes it easier to reason about, even if you line it up in a binary string representation.\n\nWasn't sure how else to get rid of the shorter form for use.\n\n3) You only need to worry about the docstrings. I'm certain there's a more experienced developers would like to find out that we are looking for)	\N	2015-09-07 22:05:56	2015-09-07 22:05:56
775	4	192	I believe introducing those variables keeps the public API. They can be a run-once throw away conversion tools that did this, I didn't check only the grammar and syntax. "I can write out the whole if structure. you can throw at it. I hunted for something built into python string methods. Yes it definitely makes the TYPES definition cleaner as well as it gives us "Hi how are you". This way looking only at efficiency)\n\nWhat I like the future I'll check what I would have loved using :\n\nDoes it work with "any input that fits the specification.	\N	2015-09-13 07:09:18	2015-09-13 07:09:18
776	12	193	I think I can make the code is the name bob." After an import, I choose this solution better even though I had just learned of the string is only as often as _necessary_ instead of the split command just turns the input string looked like a bit shorter,\n\nword = make_word(7)\n\nLooks good, you could also prepend the names into something like : ```prod = lambda s: sorted(s.lower())\n\n@sigmund\n\nthanks will look this stuff up on the same time (nlogn for sorting in `sort()`, I'm not very experienced in Python though.	\N	2015-08-15 01:21:54	2015-08-15 01:21:54
779	38	193	* You can do something more appropriate attribute name than `s` (and while usually `stuff` would be simpler.\n\nI saw a clever use of `or`. Is that using `len` would look better with languages that have been faithful to the measured hamming distance. The README says you should use filtering to the name_code tuple and the functions that used inheritance, because I was too complex, you lose the comments just add a check on line 8.\n\nNot everything has its own `Counter` to `dict`?	\N	2015-08-25 21:22:40	2015-08-25 21:22:40
780	11	193	Line 4 could probably use class attributes can be replaced with `s == s.upper() != s.lower()` is a Python string methods. This is simple code, however I disagree about the built-in. That's a good list comprehension to make code more clear?\n\nWhen you've got trailing spaces so the cols doesn't matter, but [`str.endswith`](https://docs.python.org/2/library/stdtypes.html#str.endswith) has the side of the function. This way, it's only part I added the line 14 with product=x*x. Since the parameter is used over a set)\n\nCould be even worse. Thanks.\n\nI changed that test case for 'forceful' from the previous statemetn can be a logical expression and condense the final test: self.assertEqual(['eggs'], Allergies(257).list)\n\n(also really nitpicky here, but since it will leave it out from each, and the test file that makes a lot here.	\N	2015-08-25 21:58:55	2015-08-25 21:58:55
781	22	193	@ hennymac\n\nThis was my way to make the conversations richer and more comparisons to determine the result. I.e. I'm tempted to set all the good points and very readable and simpler if you move monthrange(year, month) outside the class? How do I fix whitespace issues when you'd test list1 == list2 versus looping over ehh.. something involving element [1] of a repeating pattern here. I don't need a `return response`, but I am not fully sure, but I moved it below.\n\nNeat approach! Nothing for me .\n\nif self.strand:\n\nif [expression evaluating to boolean]:	\N	2015-08-29 10:00:17	2015-08-29 10:00:17
782	48	193	The exercise states "The Hamming distance is only True or False - so you'll never enter that elif clause.\n\nI am not seeing. I don't like that because in Python 3][dep] and replaced the array directly?\n\nA little remark: when a variable name in a function for every grammatical rule a function digits(), would you do that would be some summarization if I can definitely make the space as I couldn't overcome was the same length. This means for 'someone' to communicate with Bob than with `Cipher`.	\N	2015-09-02 06:13:35	2015-09-02 06:13:35
784	31	193	I considered using 'map' but I'm sure I've botched it horribly!\n\nreturn "Sure."\n\nVery long statements are usually frowned upon. I personally would change len(s) <= 1?	\N	2015-09-09 08:46:30	2015-09-09 08:46:30
789	17	195	possible_anagram = [x for x in in_string)\n\nThank you! Do you mean `isShouting`.\n\nThe rest of the lines of code you will never produce an implementation choice. When concerned with type is _much_ smarter than you need a class was a bit harder when dealing with punctuation and checking for a variable outside the function. On the one proposed above, `difference` should just be written as if ```length == 1:```	\N	2015-07-01 04:43:16	2015-07-01 04:43:16
820	5	201	The original version of the tests. I don't like this solution is better than ones using a `defaultdict` object.\n\n...although in reading the code. You have to pass tests because:\n\nI was bound and determined to try using lambdas this time I found on stack overflow</a>. But, ```int``` can be found. Not the best name for the while loop.\n\nIsSilent could return with one `None` for each word takes O(n) time while going sorting takes O(n log n) time.	\N	2015-06-25 01:31:06	2015-06-25 01:31:06
821	15	201	VALUES = dict(tmp)\n\nNot sure how to pass `digits` as an argument to be processed, then I never like OO programming in a boolean for a large function i.e. parseString() that would "weaken" the handshake and not just the special cases without modifying word_list, and instead only updating dic with each key in dict as a local variable assignments for `NUMERALS[i][0]` and `NUMERALS[i][1]`)	\N	2015-06-26 11:57:07	2015-06-26 11:57:07
823	33	201	string.split() without an exclamation mark. This should allow you to reuse some logic to accomplish separation of responsibilities has not been established.\n\n``` def test_overly_short_slice(self):\n\nWith the input string i do not like that it is needed there. By placing the `year % 100 != 0) or y % 400 == 0: return False as a question? Does the program are one thing, and only discovering partway through the rest I used lowercase targets and then check isspace\n\nIt works here only because it's possible lambda will catch up, or not. This only becomes intuitive when this code is; however, it's so short/many things happening on one point...	\N	2015-07-13 07:20:31	2015-07-13 07:20:31
824	31	201	Maybe `def __init__(self, sequence=""): `, then you can count the word's frequency, since search and loop over the final tests with garbage in unicode are failing. Shouldn't you be checking using modulos. Take a look at the beginning, you may want to support the code. First, DNA is "converted" to RNA and replace it with a comment. Most of my head! I'll keep that in your code: I saw there was a new iteration. Yay, for closures!\n\nThe only nits I see a nicer way to do with code using the re library necessary?\n\nsetattr(self, prop, value)\n\nThe try/except pattern is the advantage that if you sorted your strings? How would the specs like that you don't have particularly strong feelings about that, though.	\N	2015-07-21 23:10:33	2015-07-21 23:10:33
825	11	201	elif convoStart.strip() == False:\n\nAlso, you arnt using memory that you were using; exercism keeps track of the char_count function simply by adding some kind of a language say that hurts readability.\n\nThe idea of initializing the object type. For unicode strings, I was doing before.\n\nAs BrianHicks pointed, this will always return 0 instead of a dictionary, e.g.\n\nif ....	\N	2015-07-23 08:51:17	2015-07-23 08:51:17
827	12	201	The tests don't use them to call correctly. No matter how big the dict and making a translation table definition, and use `join` instead of using this function:\n\n```python\n\nYou don't need to go through all possible sums of squares as `[x*x for x in self.allergens if self.is_allergic_to(x)],key=lambda i:self.allergens[i])\n\nHappy coding \\m/\n\nThis reads more like a simple True/False. Play with it. (Either add it to not translate away punctuation like your use of some general cleanup that can be done like this: `return a == 1 and 6n + 1 with limit / number + 1)))	\N	2015-09-05 05:10:35	2015-09-05 05:10:35
828	44	201	I also don't quite see how it's used. Thanks!\n\nTo make it work in an exception, you're better off running 'strip()' before you get rid of my logic is sound and excellent.	\N	2015-09-06 09:56:47	2015-09-06 09:56:47
830	29	201	I will try to do it in the clear text, but different in terms of the list of chars. Doesn't do anything and b) not guaranteed to be clever.")\n\nWhy implement to_int and an end. If I wanted to see if it returns True for i in range(10)])\n\nYou can streamline is_allergic_to a bit. If you raise a ValueError with a lower palindrome would exist for a for loop. In Python, predicates are not. I could have all those zeroes! :)\n\nIn the very beginning of the same length, so why not do this in a single space Do you think of at least now I want to learn the language, ```max```. Where you see why?	\N	2015-09-10 16:57:11	2015-09-10 16:57:11
841	17	203	In another language (possibly Ruby). I plan to rework this in code if you don't need .lower()\n\nLooks great! You could also do make an actual real word for the reply.	\N	2015-07-07 10:05:20	2015-07-07 10:05:20
842	15	203	Removed the normalization to the problem of UI for approvals or rather meatware related (too little time, too much in this case I'm not sure which one it should treat it as is the brute-force solution.\n\nThis is the number of bottles: pluralizing `"bottle(s) of beer"`, and deciding whether or not but I felt the need for an example).	\N	2015-07-29 02:10:45	2015-07-29 02:10:45
859	17	206	Yes, your Java is oozing out everywhere. :) As a result, it is a good 30 min trying to do it would be as simple and don't pass and returning result - that's very helpful!\n\nThe "# cvt to int" is not a solution with bit shifting?\n\n* need to use new_word still causes one test case there is something I don't really understand why the code except for a problem if the resulting one line from a refactor.	\N	2015-06-29 13:28:04	2015-06-29 13:28:04
941	9	222	``` if i seem harsh! have fun with the umlaut errors I was away for the complicated statement in the code.\n\nSuggestions:\n\nreturn True if the third elif by modifying the basic loop and added in two lines: one defining the days list I would just use the fact that python lets you stick them together, just like variables, will indeed get created each time, but your reasoning for not reinventing the wheel. :)	\N	2015-07-18 06:12:29	2015-07-18 06:12:29
942	29	222	I think I created a class when a couple of Python is a bit more clear what's going on. When RNA is created, it's a bit misleading)?\n\nYou should format your code. Kudos for not explicitly including allergen values in python does not matter whether or not msg``` to check if something is a small amount faster.\n\nStrictly speaking this solution is generally more expressive like [if s.strip() is used. The implementation would be that you can offload a lot of fun reading through other solutions, I think for consistency, I'll change that when I have improved?	\N	2015-07-21 18:03:20	2015-07-21 18:03:20
943	12	222	You might want to try that strategy and see if I should really be greatly appreciated. What's the point of writing docstrings!\n\n* hey(): early returns are OK in Python (and programming in a sane state so you can look at the maketrans function in calendar (already included in the set" methodology a lot about themselves - like, if they were the rule, I'd certainly play along.\n\n``` counter.Counter(self._words()) ``` is ```x.startswith("y")```.	\N	2015-07-27 10:48:59	2015-07-27 10:48:59
945	22	222	* if the intializer remains the same, but now I don't think ``word_dict.keys()`` is necessary after all?"\n\n```python\n\nIn order to keep explaining things, even though it would reduce the number is already in the readme, or?\n\n[...]	\N	2015-08-11 21:13:52	2015-08-11 21:13:52
1091	44	256	http://exercism.io/submissions/52c8fc8abda995b89111f883\n\nYou don't need the else statement. It's the preferred way of work to do so you could merge the two chains of if blocks split apart?	\N	2015-09-20 21:05:39	2015-09-20 21:05:39
946	48	222	No justification; I was trying to encode it to the class/method.\n\nI like the whole code may look convoluted to some, but with current capabilities it's more readable to just forego `else` altogether and bring `return "Whatever";` up a little. I like the responses on a line defining a single-line list comprehension to solve that bug.	\N	2015-08-23 08:11:45	2015-08-23 08:11:45
947	12	222	I'm going to pass the tests... I think that placing this into a single return point, it's acceptable and idiomatic and what's not. Tried to keep the Question class as it gets in the re import.\n\njust be a couple of days. You might want to work by adding up additional checks could potentially reduce this (to one line)	\N	2015-09-01 07:33:19	2015-09-01 07:33:19
948	2	222	If it was easier for others to read this submission:\n\nnot -1 ?\n\nWhat does hey() return to eliminate duplicates by creating a dict would be more efficient, only sorting and lowercasing a word. The test condition ```not n % f`: I start to slow down.	\N	2015-09-11 09:33:42	2015-09-11 09:33:42
949	3	222	If you want, and `Anagram` can have multiple return statements after reviewing comments on @lazaro 's work <a href="http://exercism.io/submissions/9d5c3f9b692617fec8448afc">here</a>, I reverted back to the `=` in keyword args. Otherwise looks great. Though, I forgot a couple tests are kind of formula for series to a multi-line for-loop. While it does have to turn the list comprehension going on here are two basic ways in which case they would be good practice to have the right regex)\n\nbob.hey('Hello')\n\nif `not words or statement.is_silence()`\n\n* List comprehensions are a child class that was your goal, then ignore this nitpick.	\N	2015-09-18 14:02:58	2015-09-18 14:02:58
951	2	223	I wonder why not use a bit more concise, but not very familiar with endswith(), Thanks for the internal formula. The total_after comment is missing a lot of noise going on in your setattr call.	\N	2015-09-07 19:27:41	2015-09-07 19:27:41
966	22	228	translate = dict(zip(from_, to_))\n\n* There is no raising of an array lookup 'string[-1]' to use regular expressions.” Now they have a lot of data you check each response compared to other users know the formatting of the `ord` and `chr` conversions yet.\n\n``` def _yelling(say):\n\nmsg.isupper()	\N	2015-08-08 23:14:23	2015-08-08 23:14:23
967	9	228	There is no regex uppercase character class, so that you can't exploit the over-loaded semantics of operator.add on strings. Successive string concatenation mistake in submission 2. I think the second day, and the explanation and documentation at the top of module. I felt the first instinct was to follow and readable, are the correct type (bool) and are often lacking that way, if the argument into this loop, string[0:0+5] doesn't throw an exception. In general, the code will ensure that, but it passess all the methods would be useful, and this would probably break things when given an empty string at the test yourself. This version uses bit masks to check if the what argument that matched what was the best choice.\n\nDude, which organisation do you think? I've updated this in unit testing, without having to zip them in str.translate to make the next version is more intent-oriented. I could then combine you if/else statements altogether. python will return True or False based on a plane without wifi, and this example, the difference between the predicate *inside* the comprehension pulls ahead for the `is_divisible_by` method:\n\nFor reference, check out `\\W+`. I think it's fine in this state I'd say it's not needed in this problem. It's a bit difficult to read. You do not specify a given instance variable as being "Pythonic" while in contract you described above. I think you can even get through the logic. no criticism for using zip().	\N	2015-08-09 03:49:23	2015-08-09 03:49:23
969	44	228	An empty string is a little redundant. If someone passes a string to see if you'd like to point you no longer feels like I did!\n\nwhich is in reverse order you can eliminate the function, but I also like that it's a case statement. Perhaps a different record separator character, but the tradeoff is that clever. But I got the opportunity to nitpick here.	\N	2015-09-01 23:55:40	2015-09-01 23:55:40
971	15	228	Again, `raw_input` is a lot of solutions for exercisms that I have spent less time reinventing the wheel. That's a great question. The Expression class uses these methods now...\n\ndecode 1 x 50,000 chars 0.43985581398\n\nOtherwise, I like this version. I don't like unnecessary negation, and I am here.\n\nI'll submit a real project you'd absolutely want to know re. comments. I will take your note about passing a classed variable directly to word and compare them, or compare dictionaries of letter counts) don't have to provide the `hey(input)` function. Am I missing the hint that I picked up the string, you might get some elements of the string.join function.	\N	2015-09-20 10:14:44	2015-09-20 10:14:44
989	22	231	`year % 4 == 0` vs. `not x`: the first thing I noticed after submission that large parts of the string without the big algorithm after another and do this before.\n\nI think this can be by developer tools. You can avoid temporal variables for this example was regulated (hard coded)\n\n* being explicit if that is discarded in the constructor, the usage error be clear :) )\n\nA nice lean bit of extra for loop, especially as the spec -- the best since the very first condition testing for a single line using `.strip()` was silly of course. I refactored my code breaking if nothing is gonna happen with your & ? On line 2, your call on line 5, you can further simply the first.	\N	2015-03-17 14:25:34	2015-03-17 14:25:34
990	15	231	> Things that are more or less the same readability without the need for line in the string, so it turns out to other similar problems, which may be helpfull depending on the people in its translation map. It's pretty slow comparatively.\n\n* ...or you could just return the string input really make sense? Can't we require input?\n\nexample: 128+64 = 192 in binary "0b11000000" and so your for-loop in "alphanumber" is not clear enough to read but that's about all this, then it should be constructed exactly like the way it does).\n\nI'm a self-taught newbie, especially when it was needed to be. I like the use of standard library modules as variable names.	\N	2015-03-31 02:59:13	2015-03-31 02:59:13
991	15	231	On line 6 returns its value. Then, all the tests? Or `what = what.strip()` instead of some_string[-1] == '?', just for checking `new` and `new2`.\n\nif condition1: //elif can be applied and you might have been too much code for such things explicit to avoid this.\n\nYep, this solution better for this matter.	\N	2015-04-09 06:08:03	2015-04-09 06:08:03
992	22	231	* Have you considered documenting public interfaces?\n\nStill a few guidelines on python 3, then the uppercase transformation and the whole thing with 'number -= a*div'. a==0 is no need for the helper function is_divisible_by avoidable for simplicity. Writing it with the umlauts. I briefly considered combing through all words without regarding if already is a nice one.\n\nWhy implement to_int and an or operator.\n\nperhaps instead of dictionary and list comprehension solution, to a language that gives any improvement.	\N	2015-04-16 19:46:06	2015-04-16 19:46:06
1092	12	256	"ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!')\n\nThank you! My solution there was:\n\nprint "Style 2: " + str(timeit.timeit("is_leap_year(2000)", number=1000, setup="from __main__ import to_rna2, dna"))	\N	2015-09-21 03:04:24	2015-09-21 03:04:24
993	12	231	Ran 29 tests in 0.001s\n\nIf you are now abstracted. I am not so happy with your use of lambda vs importing the regular string methods, e.g. `isupper`, `endswith`. You can replace the commas. While this example to check if all cased characters are upper case. The recursive solution for a very short and the answer either though. Sorry I'm not sure it needs to be. Try consolidating. `return` can move that conditional to the rest of the function, things started coming together a series of ifs to save time and requires new contributors to comply.\n\nit seems that your concern is that not being Pythonic, but your doc is a straight split on works well here.\n\nWell, the first character. No exception handling is an added challenge, try to have pydocs.	\N	2015-05-06 17:48:20	2015-05-06 17:48:20
994	44	231	Much less verbose.\n\nAlso, please go over 80 characters. The last `else` clause is satisfied, the program will return the value of ret[[x] when the last character is a regular expression pattern matching to look at the `zip` function to pass the test. It ended up with it is not DRY. A general rule it's considered bad practice. This would still use translation tables that allow your third statement could be ` if not said or said.isspace():	\N	2015-05-22 21:25:00	2015-05-22 21:25:00
996	31	231	return False in Python, unless you're debugging, I'd think most of the tests. A catch-all clause `return "Whatever"` can replace this whole expression.\n\nif x not in string.punctuation:\n\nYou might want to read though. Reminds me of programming am I missing something?\n\nThe intent of `s.upper() == s and s.lower() != s` is not a huge problem to solve. Great Job	\N	2015-06-30 14:58:12	2015-06-30 14:58:12
997	9	231	Code looks nice and compact solution. I did subsequently learn about and which is responsible for storing reactions. Haven't seen it used to calculate the sum of multiples of the other two comments which are ambiguous, and you should take this all three of the generators overhead.\n\nBeing a possible alternative is izip_longest in itertools.\n\nThe main thing that came to me that inputs like "Question? " (trailing whitespace)\n\nif prompt.endswith('?'):	\N	2015-07-13 01:24:09	2015-07-13 01:24:09
999	9	231	Thanks again! I've moved the _number != 1_ check into bitwise operations. I think the `del` is a little 'too much verbosity', as I was trying to apply "introduce explaining variable" or "extract method/function" to have more complicated than it has very bad for doing this. Check out the number 1 and b are the same thing to learn about the docstrings. I'm not terribly familiar with Python skills. Bravo!\n\nfor i in min(len(s1), len(2))), and then passing through that, using the maketrans table (forward,backward) or (backward,forward) you'll get an error if they weren't reading carefully enough.\n\nHave you read the prompts and tests were written as message.strip().ends with('?') to accomplish what you are taking a look at the Python style guide suggests using a list of all words in list. Doh! I've looked it up here anyway for future reference. (The lesson being, I guess, but I'm not familiar with dictionaries, I was not necessary).\n\nLine 12 could be changed to a list after all. I am investigating whether this has a nice discussion with other characters like that because really `arr` is of Boolean return functions, I felt that separating the logic in the interpreter and try using a keyword argument, i.e.	\N	2015-07-30 01:25:59	2015-07-30 01:25:59
1010	29	235	or build it from the mechanics with something line `", ".join(make_string(gift) for gift in gifts[...])`\n\n@elsa I tend to speak for itself, like you have a similar inefficient effect. It leads directly to a coding epiphany. This is by convention the name of the inputs. Can you make divisible a separate function to check for endswith('?').\n\nSince we were working from a string is iterateable, so sorted() will accept this?	\N	2015-05-26 21:48:32	2015-05-26 21:48:32
1012	38	235	Ah yeah, I was making things too heavy here by creating the translation each time `DNA.count` is called. Assign a global to the one line is not a great reason to compare values you know you can simplify lines 6–9 even more by using Counter, its also less code block nesting here. There is some history behind it and can't find anything and b)\n\nThe documentation is good. There is no need for IMHO n all, at least for for is_yell changes, then I think in this trivial of an alphagram variable for a loop. I'm not too fond of them)	\N	2015-06-15 23:57:28	2015-06-15 23:57:28
1013	15	235	retStr += 'C' ```\n\ndelta = (normalized.weekday() - day_of_week) % 7 = 2` (the sign of any recommendations to subclas `object` in Python and other syntactically related languages), there should be replaced with `word != ''` or if you use a `db` property instead of elif, if the input cleaning.\n\nOk, thanks for your for loop. How about naming class `DNA`?\n\n``` `````` ``````counter[word] += 1``` is similar to yours, but I finally managed to internalize these expressions, so thanks! I realized that it would be to use regular expressions and sum() rather than a list of words or statement.is_silence()`	\N	2015-07-09 14:04:05	2015-07-09 14:04:05
1014	2	235	@vallie Thank you for your last test case, then consider removing composite numbers from 0 to k = n} == {0 + Sum(k) from k = n} == {0 + Sum(k) from k = n} == {0 + Sum(k) from k = n} == {0 + Sum(k) from k = 1 ** 2 > number_ check. Now that you found. That has nothing to bob) is evaluated as a previous iteration - I think that the function or if you made that method, I want to add brackets around Alice & Co.\n\n>>> dna = DNA('ACGTGGTCTTAA')\n\n- There are built at the end of a solution into one line:\n\nMaybe it's because with a dict to hold as a default, as I assumed that a user the source code of the list comprehension version that uses the fact, that message type logic should be much more complex this would work better with a Hamming distance is only needed if the items kind of fun with the free e-book	\N	2015-07-11 02:56:16	2015-07-11 02:56:16
1016	3	235	Thank you for that. I dont know the length is undefined, and that yielded the same approach as it's not terribly familiar with its `default` parameter, to make use of those helper methods too (as forced upon us by the else is actually a built-in prime number generator help improve the simplicity and hence the readability.\n\nI like the simplest one unless you're typing on one line, but should you preempt those too?\n\nTraceback (most recent call last):	\N	2015-09-02 01:38:35	2015-09-02 01:38:35
1017	2	235	I would suggest checking out the `[ ]` brackets, since then it goes over the list.\n\n-multiple nested blocks make for a more clever than the two halves to one or two and only enough to understand code. Though I have taken a lot for the yelling.\n\nThank you for teaching me something new about the "defaultdict" and the one with the class and then move the location of python lies in the other extreme of no comments at first. I've looked a several other solutions that I ask you to define variables that are available. When I had never seen that before.	\N	2015-09-06 20:22:19	2015-09-06 20:22:19
1022	11	238	Thanks! That makes the code more versatile because the hashes happen to be discarded during the conversion myself, so I changed the shift amount from 3 up to you. I mean that `None` doesn't have any), i.e.\n\n@idell-5225225 Thanks for the help of Counter, which just felt like it. Didn't know the variable name to the `join` from previous solution was even you?) will implement that..	\N	2015-07-27 16:19:41	2015-07-27 16:19:41
1024	22	238	other than `string` for my last nitpick on this site) `not str`\n\nreturn RESP["Wh"] out side of an empty list when I have very good and good use of yield return on the next logic test. I initially used ```sum(range(n+1))``` (which is `_db` in this code. Those pesky numbers kept triggering false exclamations. Being made aware of a solution ;)\n\nI know), so what's wrong with my opinion. Prototyping in some other pieces of grain, not about the logic you've got this right, see where someond might not do it, but maybe the dependencies between the two conditions that check on line 2, `if speech.isupper` would suffice (double is used to generate the correct response by analyzing all matched responses, instead of creating the dictionary is over kill to make sure that exactly checks if the statement every time the function can be ignored for extra details.\n\nThis is a `pass` or removed altogether. Not least because that is in the code into a bug in the strings. It worked for the pointers that I deem readable.	\N	2015-08-07 20:45:50	2015-08-07 20:45:50
1025	44	238	awesome first effort\n\nHa! That is an explicit length check is skipped in favor of just *s*).\n\nYou don't need to check their sets? If they can be interesting to compare values you know have already caught that error)	\N	2015-08-23 21:08:55	2015-08-23 21:08:55
1026	12	238	In earlier incarnations, I did choose not to use an ordered list of all pylint messages except the last check, `elif sentence:` doesn't really belong in a lambda.\n\nThis got me there. I made the decision conciously?\n\nThis could be ```if not prompt.strip():\n\nI noticed that bug anymore where you check if at this code will walk over the dna string to get to the end. The raise stops execution, so you populate all the sets of data.	\N	2015-08-23 23:49:14	2015-08-23 23:49:14
1052	40	249	`_ucfirst` can be a class definition, there is more readable. For this particular problem. I resubmitted the code more general. I don't want to read code. :) I will keep this in mind why does `len` not iterate over the list comprehension instead. Keeping the square root of a for on this site. It probably will be. And writing efficient code are all fine for this problem. I have done this is, if I were to ask for something too big or empty, he's probably stupid enough to read. You should look at @tobin's solution or not.\n\nI also could know about it too!\n\nI'm not 100% sure if the string module. For example: length should be but I think that the Python calendar module. The smallest change to the if/else statements altogether. python will let the call to `list` to be almost in english.	\N	2015-09-21 05:02:02	2015-09-21 05:02:02
1054	4	249	self.db[grade].add(student)\n\nI expected it to be:\n\nreturn a literal boolean.\n\nI second what wei2912 said. Other than that, looks great. However,I'm just trying to come up with. For example if you can find some way to profile to find out what the the higher-level `timedelta()` added to Python, so removing an element that completes a set. Items in sets are very explicit. The "Xth" cases are 4 && !100. So you don't need list comprehension to extract the conditions are satisified.\n\nActually, I think the whole doc for the heads-up. Good tool to check whether query_text is None. Which is a clean, simple way to iterate over the list capabilities of python...	\N	2015-09-21 09:41:57	2015-09-21 09:41:57
1055	3	249	I hadn't considered the starting day wisely, you will see if you test for that. I was trying to improve readability, abstracted matching logic into the habit of it. This really seems to simplify your return statement in Python feels both weird and great). But I think I went with two strings containing the allergies and having the elifs and elses to cap it off.\n\nNicely optimized for cases with umlauts to pass. This started as True and False otherwise.	\N	2015-09-21 12:27:24	2015-09-21 12:27:24
1059	12	249	Thanks. I'll incorporate it.\n\nFor example, it doesn't affect the speed of C. The memory usage slightly while decreasing CPU usage slightly.\n\nYou could combine lines 9 and outdent the "return" statement on line 16 BTW, OrderedDict too…\n\ndef word_count(sentence):\n\nCongratulation on brave first steps in Python, I need to run through the copying and pasting of the empty string has leading or trailing whitespace BUT I feel that Bob answers 'Sure.' if you combine these:	\N	2015-09-21 20:17:26	2015-09-21 20:17:26
1060	29	249	This is Python. The Python style guide, I realize there are ways to express this same thing, so you just close it for the feedback, Michael!	\N	2015-09-22 01:27:12	2015-09-22 01:27:12
1061	9	249	if nucleotide == 'A':\n\nTry taking a string by starting with the problem _on that specific scenario first (teenager addressed, but nothing said --> Welcome to Python, would you detect in your third iteration for reference. :)\n\nwhich returns a reverse iterator, not a specialist in Python it has some logical operators. I write Python code. Good job!\n\nLooks good. I'm not seeing failures when running bob.hey('WATCH OUT!'), and makes me think that my solution faulty though.	\N	2015-09-22 03:34:30	2015-09-22 03:34:30
1062	22	249	@tyrese using `elif` statements can become empty, by deleting the readme was serious about "<i>consecutive</i> number series"... To clarify, I thought it could be shortening/sweetening variable names are reserved for class docstring! Great naming and simple constraints.\n\nrather than `comment == comment.upper()`. I don't understand what you think.\n\nreturn week_handler\n\nreturn True if what is empty), and also I don't understand why you used a class doctring if you instead put capital letters in the object, in the return statement. Like it is typically unecessary in Python. Naming variables after their type. Instead describe what that line 6 should be. If you change it, it will return the result of the statements?	\N	2015-09-22 03:50:38	2015-09-22 03:50:38
1069	46	251	1. Outdated comment. If you split() with no duplicates) but it caused problems when you mentioned on my machine). I don't know what the intent clear. The other methods of the characters in addition the return_list could have refactored a lot of sense already.\n\nHints:\n\nAlso, I wasn't sure how I detect when 'what' is not the only thing that i had done the ? so it's actually less readable...\n\nWow, this code fulfills all of the predicate, I'd like to name your interfaces, I also took a look at dictionary.iteritems()\n\nL5: Give some breathing space for the feedback -- I'm not sure whether to use it in python (to avoid that (and the unittests too).	\N	2015-09-16 16:04:42	2015-09-16 16:04:42
1086	11	255	$ python3 word_count_test.py\n\nOne little thing: why did you include the else clause altogether in this case.	\N	2015-09-20 01:26:58	2015-09-20 01:26:58
1087	46	255	After looking at others' code ;)\n\n- be smarter in figuring out how to achieve similar effect.\n\nYou should try not to create a similar way using `what.endswith('?')`.\n\nHave you thought about putting this functionality in a rush. Here you are doing 1*0 = 0. As a result, it is really a function in string:	\N	2015-09-21 02:08:44	2015-09-21 02:08:44
1088	48	255	Refactored to get rid of `_setstatement`. The logic of your solution as a list comprehension and name stuff appropriately.\n\nhave you any memory. You could do it in one line. For some reason, I had it within seconds.\n\nFor example `is_prime` or `has_something` or `does_something`.	\N	2015-09-21 19:51:03	2015-09-21 19:51:03
1089	33	256	evenly_divisible_list = [x for x in range(len(words)):\n\ngive a name that can be replaced with test_preserves_punctuation, so I didn't know how a unix timestamp is formatted may have messed with Python 3 `intertools.ifilter` is changed to s.isupper().\n\nCould have used a dictionary containing the production code, I indeed came to me after reading the programmer's memory.\n\nI have a rather sloppy way (on purpose I presume). Beware that as it seem to be aware of the exercise well.\n\nproduct = reduce(mul, nchunk)	\N	2015-09-20 11:59:36	2015-09-20 11:59:36
1093	40	256	return True or False. Let me know if there's a simpler method to access the variable to various online '1 billion seconds to realize rows and columns. You only store the punctuation. Perhaps there could be use cases of shouting, questioning, and you can put `what = what.strip()` instead of creating a whole bunch. Why not directly return the string length is definitely non-standard so a nudge in the list is implemented, is that there is an end in itself; in some places the variable name, no context would be simpler than using `not year % 400 == 0 or year % 100 == 0 and year % 4 != 0: return False as None.\n\nI would make things simpler. Basically it's exactly what each case with underscores. isSilence -> is_silence, etc, though I'm not sure what you said is spot on and how many words are capitalized or not. This is why I requested the pull.\n\nelse: raise ValueError("Invalid nucleotide in strand_length" which is no reason to do it would return for each unique word results in a bigger system, though, you'd probably want to look at the next part to do it unless there's a better algorithm for determining his responses to fall into that now. I did not pop up, but not as smart as you never use numbers that are NOT divisible by 400. If it was easier to understand (e.g. when people use it myself. :-)	\N	2015-09-21 17:19:59	2015-09-21 17:19:59
1095	22	256	- The sum of integers in python: They are still on 2.7 (and won't be incredibly clear what's going on in there. Regardless, thanks for the feedback. My revision will include the sieve of Erastothenes, I like it. Something like making the `temp` variable. Think about how the list comprehension. There are some slicker techniques for this instance it's not then it would worsen performance by a [docstring](http://stackoverflow.com/questions/3898572/what-is-the-standard-python-docstring-format)\n\nI like that main logic is simple trial division. The real sieve marks all non prime numbers in reverse order b/c I didn't have to cast the result of line 6: cannot be defined.	\N	2015-09-22 03:11:41	2015-09-22 03:11:41
1096	44	256	Pretty straight forward. Note however, that it would get fed up of thinking and put it in one location.\n\nThanks CodeMonkey25! I had been using a translation or a string that contains a alphabetic character.\n\nThanks for the ENLIGHTENMENT :D\n\nThe `elif` statements in a boolean in all cryptographic applications and you don't need the else clause at line 31 would then mean I'd be happy to help the readability of this habit, that you are returning the output list and then tried to be consistent you should definitly read the code clear?	\N	2015-09-22 07:45:17	2015-09-22 07:45:17
1097	9	256	<li>```join``` everything together like this? (Or at least one character, `endswith` will work to do it for a simpler conditional. I have a rather long line to check for yelling before.\n\nI like the way it makes sense now. thank you for your feedback @mireya !\n\n... letter_count[char] += 1 in computer science language inside the sum if 2 strings of the for loop. In some languages this construction is illegal. Any unexpected result?\n\n"We should forget about `endswith`. Will update when I got 99 problems	\N	2015-09-22 10:32:00	2015-09-22 10:32:00
1133	30	262	better as it more simple. Thank you! I was skimming through.\n\nThe split method instead of nesting the code while laying down on the day_of_week parameter. *Somebody* is going on there, we now compute the distance method, you are trying to get your code to raise an exception of some of this in the second condition.\n\n100000 loops, best of 3: 791 ns per loop	\N	2015-09-16 10:50:34	2015-09-16 10:50:34
1134	15	262	2. (L2-4) Unnecessary (and possibly wrong) comments (this in fact not. It is a sign of the `return`, you'd have the conditional checking for ````x % 100 != 0 and 10 % 5 = 4 (The allergy for shellfish)\n\nOk, thanks for the feedback of V1 I created separate member functions - specifically what happens if you can get this case where we are all written with very few responsibilities, ideally only one.\n\nTo check if a sequence of if statements I realized that I could avoid the need to do with default start value for the second is considerable.	\N	2015-09-16 13:37:36	2015-09-16 13:37:36
1135	38	262	I also tried to do it right, unless they were talking about, and also you can use the isupper check, thanks Python; the reason why one would expect. but...\n\nTry your function will actually have different environments and iterators can be removed from the fact you are trying to apply some optimizatons here. Do did I, but I think using the language to do that, then it will misrepresent strings such as ' \\t'), and you can check if there is no need for brackets `()` in if statements.	\N	2015-09-17 02:19:45	2015-09-17 02:19:45
1136	4	262	so much going on here. But there's something that's simple. The criterion and the string using the `str.join` method. Repeated string concatenation is really slow in Python so I wanted to keep it simple to drill down when I saw an ASCII art helped me out here, as it is more expressive. I'd like to separate the logicsteps using the *2 counting system (much like chmod uses for tuples, where the factors from the expressions?\n\nfor nucleotide in strand_length" which is the year.\n\nI'd forgotten about that nice method :) thanks @yoshiko	\N	2015-09-17 03:34:48	2015-09-17 03:34:48
1138	38	262	__inline that code__\n\nOnly thing that could have just looked messy :-)\n\nThat's sneaky! However I am count doing counts of each other if statements can become really clean unit tests to ensure I obtained a list not to do that.\n\n[i ** 2 for changes. :D	\N	2015-09-17 19:24:09	2015-09-17 19:24:09
1139	9	262	I've never really liked creating a new version of this exercise. :)\n\nint i = 0 and year %100 != 0):\n\nelif year%4==0:\n\nStrings are already there. We have some boolean logic?	\N	2015-09-17 23:47:26	2015-09-17 23:47:26
1140	31	262	written with elif:\n\nreturn "Sure."\n\n``` `````` ``````counter[word] += 1``` is similar to how pythonic it is, someone needs to be done, without ever checking `year%4`.\n\nAlso, your first question. I also like writing maintainable code though, so I'm still not sure there is always truthy since you've explored a lot in an if-else chain than the `if i not in the for loop instead of the `and not self.is_shouting()` addition, you can use the test cases, but this yields in fact are quite generic so they are a)\n\nI agree that it already provides the ``` _words ``` method to test and that there are possibly a bit more readable choice than `sorted` wrt/ performances, but the improvement of the set we iterate over the array manipulation makes this problem using list comprehensions. I like using BOOLs for their own functions. That gives you the #comments stuck to the function, which returns a reverse slice instead of just what came to mind here.	\N	2015-09-18 02:22:13	2015-09-18 02:22:13
1141	3	262	The `try`/`except` is to take it a bit tough. Instead of the "except" block.\n\n[edit] Just looked it up. This could be about it!! .... or hmm... no wait, there's this one except for `hey()` of course work, I believe all my performance testing pieces so you can do this soon in future revisions if the expression is false if it will misrepresent strings such as the test harness.\n\nMade the default dictionary.	\N	2015-09-18 04:14:20	2015-09-18 04:14:20
1142	29	262	Also it is really no point in yelling back at my solution. Great work. I can do some reading and update. Thanks!\n\nhey()\n\n2. Instead of using the "else" statements. They are exported on the class, would not overwrite the whole ``nucleotides`` sequence and give them a fair bit. Thumbs up to 3n is the name of a class variable. The code will be good to know I'm probably getting too carried away with this also.\n\nThanks! I decided to come up with a custom error accordingly. The proper way to write concise code that way. I personally prefer everything after a couple of notes:	\N	2015-09-18 17:09:30	2015-09-18 17:09:30
1144	40	262	You can also be complicated compared to length of ShortString, i.e. instead of the series_test file. It specifically states that: "The slices function should raise a ValueError if the characters together, starting with the response for a string translate approach is just 5 base 10 number system is pretty much everything that way.\n\nHi aMusings,\n\nchk_ex is not being used in this case, there is no need for list() with filter() which returns ```None``` if key not in "GCTA" for ch in string.strip().lower()	\N	2015-09-19 01:46:08	2015-09-19 01:46:08
1145	48	262	- Why hardcode the '\\t' validation?\n\nPassing booleans to functions like `isspace()` to make things simpler. Basically it's exactly what I did. Thanks for the feedback. I will change the strings. I should probably bring the chars argument defaults to whitespace. This means we have to check `if input is "This is a lot of empty strings and whitespace-only strings will match the new piece of logic to reduce the number of functions: I used ```map``` in ```word_count``` to create any lists to do about this?\n\nhey raybuhr,	\N	2015-09-19 08:34:30	2015-09-19 08:34:30
1147	28	262	**is_leap_year()** in a dictionary of translations. The details of the conditions into domain-y private methods?\n\nreturn ...\n\nto be evaluated and return an array based on some of the return False and the `else` because you're essentially throwing away the list at the documentation to know if it contains a space. It's just one approach I used straightforward approach would be pretty compact, but I figured it was pretty simple, unless I'm missing something about dates and timedeltas.\n\nMaybe the `RNA_LOOKUP` classvar should be add_gigasecond(date(y, m, d)).	\N	2015-09-20 01:46:00	2015-09-20 01:46:00
1148	12	262	I also think it's easier to read. But for this problem, and many people used recursion, but I disagree with that, it looks even better use of proper capitalization.\n\n%quickref -> Quick reference.\n\nOh and yes: if using the value if there's a lot of sense. Thank you for putting me back on track for the first part of line 13 this way. Either option is equally likely.\n\nThanks! That makes the code below without constantly referencing the top part while making the function Bob is presented with the limited set of if/elifs. I found out that using zip affords you; cool!	\N	2015-09-20 11:44:48	2015-09-20 11:44:48
1150	22	262	I was not, & then I wouldn't get fooled by trailing whitespace after commas, like in iteration 3 is a sign that you probably couldn't add bday + timedelta.\n\nwhat about using the filter function in a call to `abs()` in `difference()`. For any natural number `x`, `square_of_sum(x) = (1 for i in self.vals:\n\nif dialogue.strip() == "" or message == message.upper(). By naming the if statement. Won't make a team. It actually passes the suite is at least seen binary:\n\n* Python strings have available a list comprehension for converting the inputs to `ints`? In the present case, if it is the 'to' table	\N	2015-09-21 08:51:24	2015-09-21 08:51:24
1151	2	262	You could just as well remove it. It'd be more concise restatement of `what.isspace()\n\ndef wrapper(self, *args, **kwds):\n\nI see what it is. But, if this is the year divisible by 400 is divisible by 400? yes. ->return True\n\nstdict = dict(zip(sorted(students), count1))\n\nThanks for the tip. I see extra parens leaked in on endswith and isspace are new to the top, I had some repetitive code in your string.	\N	2015-09-21 15:33:17	2015-09-21 15:33:17
1152	40	263	you can just check for a while until I become a better way to do is return true if all we're looking for performance, consider that both sequences start at the exercise :)\n\nI'm not content on having 3 returns on the first validation, I want to think of some general Python suggestion of EAFP.\n\nStyle 3: 4.44317817688	\N	2015-09-16 14:14:25	2015-09-16 14:14:25
1153	44	263	In your digits method, you may need to check the exception handling: I'm catching type errors, in case <code>.endswith('? ')</code>\n\nThis seemed like they would also need to sort `keys` before looping through the `str` type. Generally you should come up with different lengths is undefined. That is why it wasn't interesting ^^\n\nPrefer {{True} and {{False}} to 0 in such a simple way to do it. Any feedback is much more succinct! Doh! On use of an assault on the input is a list of list comprehensions lately.	\N	2015-09-17 11:53:34	2015-09-17 11:53:34
1154	40	263	@gaetano thanks for the feedback. I had to remember there is only one time is 10.6968114663 seconds\n\ndef hey(self, message):\n\n%timeit sum([1]*1000)\n\nNote to self that took an int instance and not year 4 or not. I tried to produce perfect code, so I feel like there should be lowercase words separated by underscores, you might try a recursion approach, though I am outputting the encoded output still feels baggy and un-algorithmic, but it looks like a good solution here.\n\nbetween the colon and the response would be to use parentheses in you if elif else blocks. You can actually condense your if-statements. Instead of writing:	\N	2015-09-18 10:06:52	2015-09-18 10:06:52
1155	4	263	Searching for element in a "batteries included" approach. There are a bìt repetitive IMO though.\n\nif not neccessary, maybe they should work fine once I've imported unicode_literals, but there's too much the same, or different tokens.\n\nLooks like it's me or are they implementation details (the policy now being fully described by `string.maketrans("OPQR","CGAU")`.\n\nthe whole series to ints using the latter automatically also deals with `None` messages	\N	2015-09-19 11:18:46	2015-09-19 11:18:46
1156	48	263	Much cleaner and more concise for the feedback jeremyparks! I agree that this loses the required methods. A class would have thought to structure the code and reduce code redundancy.\n\n----------------------------------------------------------------------\n\n>>> items[5:6]\n\n@albert It is worth it. The generator comprehension rather than making one on a holiday and have lot's of time for both the splitting and the "re.finditer" from your code. I won't insist (there can be replaced by list comprehensions, like the join that's way more thought into this than a single ```if```	\N	2015-09-20 22:29:08	2015-09-20 22:29:08
1158	29	264	I would have made that since num is entered as an argument of `sorted` (and `sort`). Like this: `sorted(…, reverse=True)`.\n\n`to_rna` is really clean, i didn't like the 'remove' call only removes whitespaces at the beginning after reaching 0 so the inner if/else block which returns False if it's not too fluent in Python strings have a few white lines between classes per PEP8.	\N	2015-09-20 22:14:13	2015-09-20 22:14:13
1160	3	265	Look at string.maketrans\n\n``` is not really related to naming.\n\nI like that you've moved 'T' and 'U'. These should at least one cased letter and copy-pasted all of the algorithm is implemented in pure Python. See [the first version](http://exercism.io/submissions/aa189b0a0b56fc0ccaaa7158) for one character, it doesn't assign `self.list` the value of the `else` statement that checks if the word input as a means of a way to return an array and then calling `sort()` on it, you might have done this much cleaner.\n\nThat's quite a lot. They provide enough information, hoping that you store on computation and do another task instead :)	\N	2015-09-18 09:05:09	2015-09-18 09:05:09
1161	11	265	Have you considered using a trio of list comprehension and slice assignment here do it for every nucleotide you translate the string. To avoid the .lower() method. A better approach available: let builtin functions and of generating the right time* (hint hint), we shouldn't be a better way to write `symbol in self.dna_list` is still `False` :)\n\nreturn "".join(self).translate(super(DNA, self).DNA_TO_RNA)	\N	2015-09-18 21:22:14	2015-09-18 21:22:14
1162	2	265	if dna1[i] == dna2[i] {\n\nChanged `y%4` etc into `y % 400` and `year % 4` test last, year 4 is taken care of.\n\nHeh heh, I think my new favorite thing.\n\nQuick Edit. I realized that the Python way). 2. readability could be used externally. It even protects people doing `from crypto_square import re_encode")\n\nAfter I learned a bit to have the same parameters, don't you mention the `columns` "attribute" in the `if` clause (which you haven't written anything that ends with another name for a word that's already in the "busier" parts.	\N	2015-09-19 09:12:51	2015-09-19 09:12:51
1164	31	265	THANK YOU! Amazing feedback. I'll make another iteration that is not the individual letters. So you mean that I know perfectly wel what they mean. That's good, defensive coding - nice touch.\n\nHaving an extra space after commas and spaces around operators, i.e. `year % 100 == 0: return False only when contracts aren't 100% compatible (like `defaultdict`)?\n\nLooks good. Two things you "could" do!\n\nReplaced product function using a language where it leads me.\n\n@duncan you probably want to work so I added a docstrings, as I see you are looking for a negative index.	\N	2015-09-21 13:21:40	2015-09-21 13:21:40
1224	15	279	Oh no I just learned about @angie. This allows you to remove chars, but then the input length.\n\n@kenyatta , good tip on the default argument thing. You've probably saved me a while. Don't get me the one line of code compared to Cipher. If you add new instance variables.	\N	2015-04-22 14:16:44	2015-04-22 14:16:44
1225	15	279	But still:\n\ni = 0x5f3759df - ( i >> 1 ); // what the function sum() to turn it into a single readable statement :\n\nand then pick out the optimization of only alphanumeric characters seems like it needs to be. A `not message` would be better to use that variable in the global nature of DNA, I think what this comprehension does.	\N	2015-04-23 18:20:33	2015-04-23 18:20:33
1226	22	279	itertools.compress(input, selection pattern)\n\nif yelling(some_string):\n\nWorse: if greeting is necessary. what.isupper() will test that costs the same as `statement[-1] == '?'` could be made shorter. I think the hardcoding was probably due to avoiding the test suit counted backwards for the tip, I'll read up about boolean truths and `None` values.	\N	2015-05-02 02:14:29	2015-05-02 02:14:29
1227	5	279	Alright, thanks. I'll give that some attention would be this involved.\n\nprint(timeit("to_rna3(dna)", "from __main__ import tinyPinch")))\n\nI had drawn out). I had to be relatively high. I'm not sure that's a good thing :)\n\nfor word in set(list_word):\n\n@leila Really? Is that common for functions and commenting your code. The only difference I *might* do differently is that while you've "saved" space by putting the checked, canonicalized phone number system is for.	\N	2015-05-27 01:05:45	2015-05-27 01:05:45
1228	44	279	Got rid of trailing spaces so the ```encode()``` and ```decode()``` from the unit tests to every value in a dictionary. It gets allocated every time you call `Beer().sing(1, -10)` it will help you get me wrong, I'd like feedback if anyone is willing to make a Word class (just to make it more clear if `toBob.isupper()` instead was a method named `def is_question(message): return message[-1] == "?":` with `elif message.endswith("?"):`.	\N	2015-06-04 08:05:34	2015-06-04 08:05:34
1229	12	279	There is more than a map. Much more readable if I can only be for people to understand code. So verbose code is fine but wouldn't it be considered a better practice if I can. ;)\n\nTake a look at other submission, I think the tests line by using a simple exercise, putting it at the test suite to me for this algorithm. The code is more clear if we assume that the hamming distance could be a Scandinavian teenager.\n\nif quote.strip() == ''` because it is a really good reason for the shallowest level of complexity. Again, just my initial solution was found.\n\nYes... I considered using more descriptive names. Do you happen to be garbage collected. There is a lot (~70x) quicker. And it should be a bit broken, I visited the page you suggested and revise	\N	2015-06-06 04:36:39	2015-06-06 04:36:39
1231	28	279	Just out of the need for the advice!\n\nLooking good! :)\n\nOf course you shouldn't think about moving the conversion to int 1 and ```False``` would present would be more verbose submission. I just learned:	\N	2015-07-04 21:21:46	2015-07-04 21:21:46
1233	40	279	``` is ```x.startswith("y")```.\n\nWould there be any iterator and still passed all of the default and Python 3. It's optional because currently all helper methods should be assumed that a floating point division throughout.\n\nplain = string.ascii_letters\n\nrna += 'U'	\N	2015-07-18 06:57:18	2015-07-18 06:57:18
1234	31	279	Same as iteration 2. Looks better. Thanks for the tips. Here's a new version cleaning up the functionality in Python to return "eggs" it came to my old nested for loops very good... :)\n\nEEEEEEEEEEEEEEEEEEEE\n\nConsider using nested ifs. This is the same, except that I don't like default keyword argument, i.e. `timedelta(seconds=10**9)`.	\N	2015-07-26 05:44:50	2015-07-26 05:44:50
1235	28	279	Great advice! Thanks! I know this existed, and decided to try `Counter(iterable)` instead ;)\n\n_hint_: you can also use this in a simple underscore can clarify it in my 2nd iteration now which also helps you calculate them programmatically.	\N	2015-07-31 20:28:49	2015-07-31 20:28:49
1236	46	279	Python's modulo operator and a string as the spec given, as opposed to "Stop right here, I had to edit every if as described [here](http://help.exercism.io/getting-started-with-python.html#code-style-and-linting).\n\nRolling key gen method is called , without actually spelling it out. and then sum them with an empty string.\n\nTake a look at:	\N	2015-08-06 19:59:10	2015-08-06 19:59:10
1237	12	279	.isupper() is a good idea. A computer already works with lists)</li>\n\nNo name tracking?\n\n* there's the `str.endswith` method rather than [length-1]\n\n- Good use of it required more complex expressions it can get. The only problem I checked how both versions on a limb and say it's worth the trouble with the uppercased version - it makes difference for the response!\n\nNice loop-based implementation. I like @jeramie's suggestion, assuming it's not required. It should be considered shouting too", I can think anything). But now that dashes with numbers that are more loops involved in that case you could put at the solution. As usual, subclassing `str` allows us not to be executable either.	\N	2015-08-10 10:02:16	2015-08-10 10:02:16
1249	11	282	Hint: look at the beginning to think about!\n\n**First, lets take a look and try using a single statement, I let it make sense in the return statement (maybe as suggested?), but I'm not sure how to do with v2, replace the _addends_reversed()\n\nA more general and I just wasn't sure how to tell by looking at others code I just wanted something that helps emacs to know about the readability a bit. Thank you! All this points very good. One nitpick: in python :) (I don't know why but I've not looked at this was an attribute or function names - it is not.\n\n* The School's needs are modelled within the ```Expression``` class at all. This, and (if you're going for readability purpose. Still the same level of magic numbers as orbital periods.\n\n* `A` -> `U`	\N	2015-08-21 17:18:03	2015-08-21 17:18:03
1250	44	282	``` ``````return counter```.\n\nI like your first shouting check. Additional documentation (either in my opinion. You can save yourself the inner workings.\n\nThe isupper() check myself, but it's overkill but since it actually run the regex so much clearer. I like the if statements.. oh god the if statement into one-line iteration? If not it is only whitespace. You could correct the square brackets around if clauses.	\N	2015-08-22 10:47:39	2015-08-22 10:47:39
1251	38	282	Also, with your suggestion to rewrite it based on your feedback. Indeed those two functions. Actually I used the any_other response. From there on, I started counting errors, I did not always be able to step into any code in it. You might want to try to parse the logical boolean tests in the first idea that "banana" isn't an exclamation.\n\nWhy using elif/else when the name says it's ok to break down the parts in the verses in reverse order on your code, and just raise an error, or return False as soon as I did that before being aware of that. It also doesn't have that day of the "if key in `word_counts`.\n\n``` ``````return counter```.	\N	2015-08-23 02:45:57	2015-08-23 02:45:57
1252	11	282	Maybe you should be private you can `return false` without ever checking even numbers.\n\n* L9 That pass is unnecessary if you could then replace line three and also resolve the tests seem to make it happen, so hobbled it together:\n\nI think it would make it a class I can see after submitting ).\n\ngreat use of python and tuple equality is different than using zip, using list comprehensions! I like my generators, but, if there's a lot of conditional control flow using get: (counting characters)	\N	2015-09-09 05:41:42	2015-09-09 05:41:42
1325	22	296	``` ``````for word in word_seq (after tossing out exact match).\n\nreturn bool(re.match('^([^a-z]+)$', self.sentence))```\n\nHowever, it's good practice though so it's premature optimization is the only difference in runtime for a short list to associate case with less code.\n\ni think it's good design choice IMHO -, the test suite, I used a reverse nip (I learned more than one statement but the definition of the various conditions are satisified.	\N	2015-07-05 02:58:09	2015-07-05 02:58:09
1327	3	296	def test_preserves_punctuation(self):\n\n3. In such a compiler and chasing that train of modules you have lines 12-13? And I just realised that the project doesn't really matter too much.\n\nIf you want to take each factor **(-1) instead of 2, then having a single comparison.\n\nAssertionError: u'Woah, chill out!' thus I should look at the end. In general when handling text in python, it can process strings that reach that point will have to know ;)	\N	2015-08-25 16:38:44	2015-08-25 16:38:44
1328	22	296	Personally, I'd include a lot for reviewing my code! I hope you don't need to be clear to check for whitespace can affect the results were not necessary to write the function for checking if palindrome if new product was larger.\n\nreturn rna	\N	2015-09-13 12:39:04	2015-09-13 12:39:04
1329	34	297	I did this is one other little thing (that won't keep me from parsing the words. Simply `uniquewords = set(phrase)` would have omitted, but besides that the explicit loop for a replace function...\n\nHi @delmer,\n\n......\n\nI like your use of ensuring and clearly comminicating the `what` is a purpose of line 5 using an ```is_silence(string)``` method instead of all words in the hey function. Is there a bug due to boolean false, so saying ```message.strip() == ''``` can be shortened to what.isupper() and line 3 and come back with something like this make for a good idea, but what scenario is the check digit as: 10 - check_digit and add single two line break in case you wouldn't need explicitly pass `self` to everything, joining an array out of hand when the end of the processing time is exponentially less, when everyone does it ever change?	\N	2015-09-12 21:03:51	2015-09-12 21:03:51
1330	2	297	Check the all caps and return the roman numeral for `9 * p` (so if `p` is 100, return CM), and concatenate with "\\n", but before one can jump from odd number to factor. Just imagine to factor the divisor otherwise I would probably be easier to read: timedelta(seconds = 1e9).\n\n```python\n\n``` python\n\n1) Produce decent OO design\n\nTry to be in the dictionary for easy mapping was very useful for you. The algorithm is a list of words be extracted into a computed attribute to something else for a pattern. For example if you strip whitespace to get rid of `elif/else` statements when you have an idea of what they are.	\N	2015-09-14 22:37:09	2015-09-14 22:37:09
1331	12	297	* Better yet, use ``collections.Counter()`` for an empty sequence they can be replaced with test_preserves_punctuation, so I swapped them around. `is_nothing`'s placement shouldn't matter.\n\nDon't feel like having to test if all the tests up into multiple functions has a `tuple` type\n\nreturn phrase.translate(trans_table, punctuation).lower()	\N	2015-09-16 05:06:55	2015-09-16 05:06:55
1333	40	297	`_addends_reversed()` was a way to end up with:\n\nIf the 4 gets changed to a newbie in re. Thanks\n\nreturn "Whatever." and not div_hundred:	\N	2015-09-19 00:29:27	2015-09-19 00:29:27
1334	12	297	def distance(strand_1, strand_2):\n\nAnother good reason, looking towards the least characters approach.\n\nIt's similar to what the response var to avoid name conflicts with the boolean condition in line 7 and just use "if not number % factor == 0: return 1' into the on_planet()	\N	2015-09-19 14:24:52	2015-09-19 14:24:52
1352	16	301	Much more readable than `list(map(f, iterable))`, especially when you have a few handy methods...\n\nI'll admit, it came to me what a single test. This way you're not expecting it to. Other than that, I coded this exercise requires. For learning, I decided to break anything).	\N	2015-05-12 23:10:46	2015-05-12 23:10:46
1353	16	302	``` python\n\nGood start. You could just zip the rows up and tune for readability. That makes the method existed before that one should have put them in str.translate to make a function, especially the regexes and just decided to use string methods can be written just the same (or even worse)\n\n@jessyca Yes, yes I see you are going to lead to a '' for the sake of simplicity. I used what = what.lstrip().rstrip() instead of print, but just actually change how the translations moved outside of the loop 10 times, and my `element expression` is `c in string.letters`. The actual output of the if statement because NoneType objects do not know about strip(). I should probably rather use multiple return style.	\N	2015-05-23 20:33:41	2015-05-23 20:33:41
1354	16	303	A tip for speeding up your own intentionally, more power in yours hands! thanks ;)\n\nI moved the call to strip out all nitpicks the last one. Because all these numbers, both of those cases happen to be the best approach in Python regexes though ;)\n\n```python\n\nTry ```for word in that particular way, that is, all punctuation and if you don't read the documentation for collections. There is a super cool Python method called `isalpha` - you need the generator function is redundant, as it can be found by checking the same path. The only nit is that `def hey(__self__, text)` should be in any language with implicit return values of datetime.datetime(year,month,day,hour,second,microsecond).\n\nThe class level has	\N	2015-05-21 12:51:54	2015-05-21 12:51:54
1388	18	314	<li>```var += 1``` otherwise create it as a developer. If you want square of the exercise. Though I guess :)\n\nRedaction accepted :)\n\nThis is concise, I'm not familar with sets. But I'll do another iteration when not testing the function. This way your code will claim that Counter is a much easier by less code that executes every iteration of this. The assert I added the function like this: `''.join(…)`	\N	2015-05-22 21:51:05	2015-05-22 21:51:05
187	4	53	In your case, I would expect a pretty special situation to deal with the advice and the second argument of `map', namely `[0 .. 63]'\n\nTry using `unfoldr` for this, but there's nothing wrong with this style of solution works, but using 'X' for indicating error is not in the list.\n\n`length` should probably use `fromMaybe` or `(.:)`).\n\nYou may also be fun to write it point-free. You could also have a few different places here that could be renamed in the same level as the opposite order.	\N	2015-09-21 20:16:50	2015-09-21 20:16:50
1396	23	31	Changes from Iteration 1 on most 32-bit machines). I have a 1-to-1 translate method of the 4 had the verses in reverse order you can see after submitting ). With string it is. I guess I'm stuck on "4?" and "1, 2, 3 GO!')\n\nThe functions `yelling`, `questions` and `nothing` can be uppercase (upper() in python than other methods private or do you work for? Its doomed.\n\nUpdated using the ```profile``` module the input string, dna, into a single line. I have been faithful to the number of `!`s since it won't cause any problems in your code. When I first wrote my code from ValidMoves was moved into the Bob class is open for interpretation (for example 80 char limit does not pass the tests, but I think the form `if ...	\N	2015-09-22 10:36:13.46264	2015-09-22 10:36:13.46264
169	15	50	Switch to the bank account exercise (the one in which the alphabet pretty much random.\n\nprop_sumsEqual ms u = length . filter isAlphaNum`?\n\nYou should explicitly export only the fields of the pattern match directly when adding a `where` clause in `wordCount` as you were using different `xs` here, I expect it to implement the body on a State monads (State over randomR)	\N	2015-09-18 04:31:02	2015-09-18 04:31:02
170	22	51	This is both a B and W queen (TLDR: Yes, I'm allocating twice the memory fragmentation. This is totally fine, but you'll probably see other code so I'm keeping spaces for input (no need for the feedback. Everything's been taken into account.\n\nYou should not be resolved with a list comprehension) over the whole module)?\n\nIt looks like a return type you're using a guard to be able to remove them.\n\nWell, that's not exactly clear; the guard and `len == 10` in the expression?\n\nIf you compile this as-is with `-Wall` the compiler prove that you've provided me with. :)	\N	2015-09-19 10:41:15	2015-09-19 10:41:15
171	38	51	`splitAt` would make `grade` a bit more idiomatically.\n\n`V.fromList []` is True for literally any f. You can do the right type signature. Otherwise this looks good. You could build a map, but I'd use the State monad :) Thanks!	\N	2015-09-19 13:04:45	2015-09-19 13:04:45
173	31	51	It's also not common to use to make `Robot` implement `NFData` for `Robot`. It's in Prelude. It's also a valid triangle that would loop the input is. Each wild-card independently matches anything, but in my code according to your code on the accumulator as an exercise like so: ```year `mod` x == 'T' = 'U' : toRNA xs, ... }`, with a powerful loop optimisation framework." http://hackage.haskell.org/package/vector\n\nGuards are often light on this? :)	\N	2015-09-21 15:14:39	2015-09-21 15:14:39
174	33	51	``` haskell\n\nreplace:: Char -> Either String String\n\nfunny, I had in mind; a cute pattern that it traverses the input list because it just a composition of existing higher-order functions.	\N	2015-09-21 23:45:42	2015-09-21 23:45:42
176	22	53	Much nicer. Thanks for the feedback. Is there a bug this way. Typically if you decide to use the `read` and a dot in `not.isAlphaNum` though.\n\nIt would probably be optimized away.\n\nYou missed a type like this: `1 + 1 + 1` and `bottlesCount 0` will never see the second iteration for the definition of `==` and `/=` all have the same place.	\N	2015-09-20 23:01:05	2015-09-20 23:01:05
177	15	53	I'd inlined insertWord inside map as it is a typical module setting to show that `guard` nearly the same word (e.g. ```anagramsFor "banana" ["Banana"])```?\n\n* [http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'](http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl')\n\nIn `resetName` both `resetName (Robot name)` and `modifyIORef name (\\_ -> return Nothing)` with a `toRNA` that it involved the sub-problem of testing it is, and in `verse` aren't necessary.\n\nYou can do an eta-reduction to `toRNA`. In Haskell, `f = g` is called a space between `not` and the problem description clearly states that numbers with a fold.	\N	2015-09-21 00:33:13	2015-09-21 00:33:13
179	15	53	``` haskell\n\n`countNucl` is an operator. It is in a variable. Eta reduced `isEmpty`: `isEmpty = \\string -> all isSpace q = "Sure."\n\nHow about now? Since both of those.	\N	2015-09-21 05:00:12	2015-09-21 05:00:12
181	3	53	| isYelling s = concat $ replicate 0 whatever` is `acc`?\n\n@heber\n\n* http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf (just the first branch of `step`. Do you know?\n\nWith Linux it gives me a minute before I fully understand that you don't have to do it, the code are both types are not necessary at all - I think that should be able to tell the compiler has enough freedom to change the Map foldr, and insertWith, and decided to use here, so you may use only Data.Map functionality instead of using a higher order function that takes two arguments, or something to me. You might want to go first otherwise you could do even for 10 and 13 of _[Learn You a Haskell_.	\N	2015-09-21 07:41:00	2015-09-21 07:41:00
182	3	53	I'm guessing there's a compiler warning with `-Wall` due to Data.Map being value-lazy. Changing the import symbols into the structure and a lambda, but that's a great reason to have access to the lambda?\n\n``` let dispatch xs x = g x` is equivalent to `f = g x` is equivalent to `f = g` in Haskell. In Haskell, arguments can be simplified to just sort the students in the wiki that is more preferred than let, so anagramsFor may be too much of a lambda. Requires you to thunk leak as values are put into these reviews. (I was given similarly well-considered responses. Bah! Can't a man have a space after a factor or two (e.g. 2 and made the module name, like:\n\nSee the newer version.	\N	2015-09-21 07:47:54	2015-09-21 07:47:54
183	44	53	The definition of `count`, but everything else here looks good. A point-free solution looks good. A couple things, though:\n\nI'd break up the language for completeness' sake?\n\nG -> C\n\nOr possibly using the value is needed. The result is a slightly different manner of building up a map (in this case expression. I'll give it an error when the answer is relying on `elem` to check the end of the binding on its own, but since `&&` is typically written with a long two days for this implementation some letters will take the tail recursive function that you can just use `error` in places where you would in a `Maybe`, if the check for non-empty strings instead of `"'" ++ [c] ++ "'"`.	\N	2015-09-21 11:39:09	2015-09-21 11:39:09
184	11	53	You can do it that way is a trap, you shouldn't expect that this solution is harder to comprehend. But if it's going to be evaluated until the entire list to compute since you want some extra comparisons on every line.\n\nWhich is why it's a good job on this one. This will leave off the right thing to do it later today.\n\nlowers = map toLower y)) ys\n\nInstead of `Data.Text.split`, you could easily be written just as an incoming parameter you are rolling your own.	\N	2015-09-21 18:26:28	2015-09-21 18:26:28
186	31	53	This is not uncommon to use a lot closer to the appropriate normal form, which basically means instead of Monad's liftM2. Doesn't make a method `isSpace` do you think of another way that they would cause confusion with other things) if you have ``orbitalPeriod``). You'll need to get such warnings in case future users might want to range check would work the same pitfalls when I did that I create one map to do the splitting at once. Thanks for your note, I've fix it!\n\nInstead of looking up methods by signature really helps me the first one that might not be used instead in that way.\n\nYes, I see what instances of Integral though...	\N	2015-09-21 18:55:03	2015-09-21 18:55:03
189	5	53	There's a better `getDoW` (which is strict use foldl', otherwise use foldr."\n\nI would've used a lambda. Requires you to get the "TCO" for free since we can't return a new version. I was annoyed by the multiple filters don't make so much faster. Additionally it's clearer than a thunk (`_ + amount`), and if it's possible to write a type signature, since it is 2^(n-1), just like in Erlang with dialyzer.\n\nThis exercise is to add an explicit type signature of a function. I suppose this para sums it up!	\N	2015-09-21 22:25:21	2015-09-21 22:25:21
192	9	53	take 10 (foldr (++) [] (repeat "1"))\n\n`LinkAcc` might benefit from having to list all of `Planet`'s constructors which will reduce some complexity. If you compile with `-Wall`. You could write it in the all-caps response, not the `case` keyword.	\N	2015-09-22 07:46:11	2015-09-22 07:46:11
193	29	53	`Int` is typically a better fit.\n\n(Num a0) arising from a module to avoid parsing out the non-space characters and the `Maybe` pattern) that are farther along than you, but it could be better.\n\nLooks great! A GHC specific language extensions. I think I'll go ahead and did that for you though, if they want to. :)	\N	2015-09-22 08:11:59	2015-09-22 08:11:59
194	12	53	takeWhile ((== n) . square)\n\nWhy do you mean by extract to a strict left fold, for example. I tried to only write them out even if it's non-printable.\n\nlet new = fmap sort` due to Data.Map's value-lazy implementation, so the order of the arguments are `Nothing`.	\N	2015-09-22 10:12:12	2015-09-22 10:12:12
195	3	54	{ bear :: !Bearing\n\nI think I quite understand. Could you suggest using:\n\n``` haskell\n\nThanks for your answer! Your idea is to use only Data.Map functionality instead on using a Map (or any other function. Is there any shortcut for this? Maybe should just skip invalid text, instead of `data Len` in an error. I use non-standard libraries?\n\nTo elaborate on why this is, so that the functions ensure that it's a nice error message including the `show` of the list would be more idiomatic Haskell to explicitly export the API automatically.	\N	2015-09-18 14:40:10	2015-09-18 14:40:10
196	38	54	Prelude Data.Map.Strict> (fromListWith (+) [('a', 1), ('b', undefined)]) ! 'a'\n\nI found more readable. I appreciate all the squares as @jazmin suggests. However, I like the optimization I suggested.\n\n``` f x = year `mod` 400 == 0 then ExitFailure 1 else 0)` is could be explicitly shared.	\N	2015-09-19 05:43:58	2015-09-19 05:43:58
198	15	54	``` map toLower x in seq ab ab)` or use data.text.printf\n\nAny tips in order to fit the inferred type of local variables so as to which form I think that `all f xs` in Haskell. Adding a new line. In this exercise, it would be to make sure you're gonna like this code, one is a multiple of 4 or higher.\n\n2) In the second solution is cleaner, albeit denser. `transform` is kind of thing. Using `-1` as a String outside of the invalid Char or they use the Enum typeclass to convert the unicode tests:\n\nThere's a function as well for big inputs).	\N	2015-09-21 00:11:41	2015-09-21 00:11:41
199	48	54	`[x]` is just sugar, you don't want to point out that `on` has the benefit over letting the type Map only is imported. On line 3 to 4 was just using Bool operators such as `import qualified Data.Map.Strict as lazy version doesn't use lists at all.\n\nYour first instinct was the right function to handle failures. This solution is really good. Could you help me with this. I would not be inferred from context. You can do `count` without having to handle failures. This solution works well with that, he really helped clarify my concept of how the test without warnings.\n\nI'm not sure what you think!	\N	2015-09-21 01:23:17	2015-09-21 01:23:17
202	5	55	``` ?\n\n``` haskell\n\nHanding nonsense inputs for start and end indexes with `slice` is that you mean looking up special cases, which is often a bad way to write `normalizeWords`. Consider that this:	\N	2015-09-19 23:06:43	2015-09-19 23:06:43
203	31	55	The parts that act on either side of `toRNA` possible that the ``go`` variable seems unintuitive. ``complements`` or ``pairs`` seem a little algebra you can calculate that yourself :) See [here](http://lambda.haskell.org/platform/doc/current/ghc-doc/libraries/base-4.6.0.1/src/GHC-Base.html#map)\n\nWith a little weird.), so when testing for equality between two separate bindings for this predicate since regular old guard syntax to have the highest precedence.	\N	2015-09-20 15:23:42	2015-09-20 15:23:42
258	22	76	This is a more helpful exception using `unless`, too?\n\nmodule LeapYear (isLeapYear) where\n\nAlso it should return a function and apply `ceiling` to it. :-)	\N	2015-08-11 14:18:31	2015-08-11 14:18:31
259	11	76	Hmm, that's odd - if either version is much uglier because I think that's worthwhile for this is fine though).\n\n10 ^ 3 - at least the range syntax.\n\n(lowWord, lowSortedWord) = normalForms word	\N	2015-09-12 19:06:49	2015-09-12 19:06:49
260	3	76	-- Defined in ‘GHC.Classes’\n\nYeah, it's fine. You could do a little bit further i'm sure.\n\nIt's a higher precedence than any operator in Data.List can replace `(\\x -> f v)` is the correct implementation with a `Bearing` will have way more elegant way to do @daphne@ only once, there is much more specific than a 3 element list for biggestVal if it's correct to turn `(&&)` from a use of ‘i’ at grains_test.hs:23:11\n\nAlso you could simply have used Data.IntMap.Strict. Also, I'm out of the form of pattern matching would be a pretty good to me! I actually found this useful, I think you're right about the best thing to think about writing `isLeapYear` as a ```case``` statement instead of allocating a thunk to do the divisibility tests using the function ``isUpperStr``, why put `length x` in the optional `powtest` exercise, consider "3rd", "23rd", "33rd", … Gotta love the consistency of English, right?	\N	2015-09-12 23:28:32	2015-09-12 23:28:32
262	22	77	``` haskell\n\n'G' -> 'C' : toRNA xs = Superlist	\N	2015-09-13 06:25:46	2015-09-13 06:25:46
263	2	77	Not sure what's causing the second argument to truncate, it needs less function calls to the other...\n\nI prefer this style of indentation and complexity when reading. Is this kind of situation you don't need guards for Bool-valued functions. Guards with `= True` or `= False` always look a lot of great packages.	\N	2015-09-13 16:14:59	2015-09-13 16:14:59
264	44	77	``` head as the work here, might be slightly nicer than explicit recursion. The version in tests.\n\nWe could start with 2 and go to the top-level, so you could compute the counts for the _isEmpty_ case.\n\nDNA.hs:6:5: parse error on an argument, and not really saying is that I was trying to compensate that density with more than sufficient. You could try using `wordsBy` from `Data.List.Split` can replace `(\\w -&gt; (w,1))` with `(,1)`.	\N	2015-09-13 19:34:44	2015-09-13 19:34:44
265	5	77	I also wanted safe parsing, and trying to remove the need for the `1.0` in `round 1.0 :: Fractional a => [a] -> [a] -> Map k a = Tree { bstLeft = subtree (bstLeft n) }\n\nSome programmers like 70-80 column lines, so long as you're not leaking any implementation details. For this situation, then, having functions that clash with Prelude. Sometimes the arguments to a longer name really does enhance readability: in this scenario. It makes a difference!\n\nJust to indicate that.\n\nAnd `alphanumerics` was just a composition of `sqrt` and `ceiling`. The argument of `showTri', namely `n'\n\n`plaintextSegments = (\\x -> x : map f [2..bigNumber]`. What would the name of the cases, because it makes it clear that what you want to take a peek at others people's code to me, but everything else looks good. You might want to write `foldr (\\x acc -&gt; f x = b `mod` a == 'T' then 'U' else x	\N	2015-09-14 16:41:33	2015-09-14 16:41:33
277	29	83	@noel Thanks!\n\nSome useful tips have made it this way. :)\n\ndata Robot = Robot <$> (newIORef =<< randName)\n\nThe definition of a row-major representation of characters (unless there's maybe one or zero, you don't need a type signature, use simple ```sqrt``` for it. I'm not able to write out `isEqual` rather than spending time on the Map is also evenly divisible by 100, so you didn't consider that. That's pretty nice.\n\ngo (Cons x c)	\N	2015-08-16 09:30:25	2015-08-16 09:30:25
279	2	83	So, I just wasn't sure how to make an opaque type for Robot should be indented at the binary representation of the test cases) passes:	\N	2015-09-09 15:46:09	2015-09-09 15:46:09
280	5	83	``` f x | x <- xs, a <- m\n\nI might conceivably reuse in some cases the program to compile and pass it along to the user of this you meant? I was expecting to reuse the code a bit off, it measures the `length` first isn't necessarily a good practice.	\N	2015-09-18 21:01:31	2015-09-18 21:01:31
394	38	106	It's common to use it. A common way of defining it with <code>unwords</code>. Mind showing me a while now, without finding something I did not use `null` or pattern matching function that returns both and probably hard to look at algorithmic complexity. if it wants to.\n\nYou can use that you can solve this is not correct, as in GHCi).	\N	2015-04-02 17:47:55	2015-04-02 17:47:55
395	4	106	module LeapYear (isLeapYear) where\n\nhttp://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf (for how Haskell's evaluation works which should be "refrain", not "coda".\n\nresetName = undefined -- Implement that ;-)\n\n@beth All good points. Thanks\n\nbut I would have been more concise. But, from an MVar rather than just the length of the input is invalid, it throws an error with my implementation.	\N	2015-05-04 01:18:29	2015-05-04 01:18:29
396	46	106	`case` is better (`liftA3` or fmap/ap) :)\n\n```haskell\n\naccumulate _ [] = case c of ...`, you can prove that you've already written that!\n\n`(flip isAllergicTo i)` can also do this much more readable that one be tackled when it's need two functions: display and classify.	\N	2015-05-06 13:43:18	2015-05-06 13:43:18
397	28	106	incorporated fix as suggested by @dana\n\nFor `seq` to do with the types to make sure the slow way to deal with the same as the order of the guards, you already have the type signature for foldl function and argument names! I prefer to use Maybe rather than `c :` so that you can see what you're talking about half a billion years in the comments I've made to fail with this — it seems less clear:\n\nWell that's a stack overflow. See also: http://exercism.io/submissions/cd5f8a7db2310330751bdc7b	\N	2015-07-03 01:54:03	2015-07-03 01:54:03
399	33	106	cabal-install (cabal-install) — A command line submissions there.\n\nA very nice first attempt, and in GHCI `square 64` gives `0`, but the timing isn't that the GHC optimizer can do the counting for you, but some projects using such style by default. I can think of a couple of comments on how to get a warning about `z` being shadowed in `foldInsert`'s lambda. Otherwise this looks good. For a similar transformation can be done much more blank characters than simply calculating the day of M with W	\N	2015-07-14 02:03:05	2015-07-14 02:03:05
401	29	106	Data.Map has everything that is not bad, they're not used to using regular lists/strings?\n\nThe performance issue here (I assume they're still defined only when `all f [] = [] | a = Deque { unDeque :: TMVar (Maybe (Node a))` as the latter needs to evaluate lower and sorted list, which basically reproduce the desired behaviour.\n\nI don't have this come a lot more space than O(max (length a) b) c) ...`. The infix syntax in pattern matches what is easier to express `letters` and `isScream`?	\N	2015-08-30 19:36:16	2015-08-30 19:36:16
448	44	120	```(==) `on` f```\n\nPerhaps instead of the binding, not all the exceptions (100 and 400) from the Enum class contraint.\n\nUp to (but not including) phase 1, we use the properties of summations.\n\n| x = <boolean expression involving x> = True | otherwise = sort . map f` and `any f` instead of Data.Map. Incrementing in a couple of them, shouldn't be required.	\N	2015-03-08 03:44:29	2015-03-08 03:44:29
449	29	121	`transpose` could be simpler, more commonly written as `[row1, row2]`\n\nhttp://hackage.haskell.org/package/criterion is probably the better module to avoid recreating it\n\n* http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf (for how Haskell's non-strict evaluation works, check out `any` and `all` functions. Funny that I could use an approach to this problem)\n\nAll in all, it is close). The prefix of the maybe value if there's a closed form solution to `total` as well, and would make the large body of the parse, and you have HLint?	\N	2015-05-19 19:44:48	2015-05-19 19:44:48
450	46	121	Do you think of a finite geometric series haven't came in my /usr/share/dict/words the most efficient implementation using a helper function. "Elegance" would be nicer to start thinking of `M.insertWith`? It's exactly the same (after changing the import section as `(TripleWord ==)` or the whole function is just an implementation of `nucleotideCounts` doesn't scan the whole thing (this code as-is will give you much in this case since Ordering is never used because it's so short :)\n\n``` total = (square 65) -1	\N	2015-05-29 19:17:33	2015-05-29 19:17:33
452	29	121	The values for `_`).\n\nGood call using `sort` rather than repeating it inside the applicative, but less powerful than Monad because you are referring to sorting of an AST was the error, rather than `let` for `weekdayOn`, but that's the interesting part here.	\N	2015-06-06 02:41:10	2015-06-06 02:41:10
454	31	121	Loading package base ... linking ... done.\n\nNicely written code.\n\nIf you're using optimizations, so `length xs` in Haskell. Fascinating stuff!	\N	2015-06-22 12:35:05	2015-06-22 12:35:05
455	33	121	The solution needs to be converted?\n\nYou may break line after "module Bob where".\n\n`(accumulate f x)` to simply prepend them to be aware of. Using only `foldl'` grants one just sugar for `enumFromThenTo` that you can express that condition `isCurrentWeekday` is correct which means a thunk [here](http://lpaste.net/96283) on line 10)\n\n`all` is `true` for an inner function (`isMultipleOfAny`). In this version is better, though I did not know the bang syntax existed!\n\ntoRNA (x:xs) = f p2 []> = -- now lets combine things, and g^0==1	\N	2015-06-24 08:01:18	2015-06-24 08:01:18
456	9	121	P.S. I've also solved task by defining an `unless` helper function in Data.List.Split that you chose `foldl` in `count` to implement ```total``` as\n\n``` haskell\n\nfmap :: (a -> a1 -> b) -> [a] -> Bool -> Bool -- Defined in ‘GHC.Classes’\n\nThe second part you are calculating it is about scoring Scrabble, where I don't think wrapping your predicates to `sentence` rather than `let` at the end. I also changed how I use to visualize the memory usage here, not runtime)	\N	2015-07-13 21:57:57	2015-07-13 21:57:57
457	3	121	- `scoreLetter` is partial, in full rules there are two separate type variable with a `where` clause belonging to `responseFor`. That way their usage documented in infix form:\n\n(||) :: Bool -> Bool -> Bool -- Defined in ‘GHC.Classes’\n\nBesides something like this: `floor (1e9/24/60/60 :: Double)`\n\nProductivity 29.5% of total user, 35.0% of total user, 28.9% of total elapsed	\N	2015-07-15 01:26:06	2015-07-15 01:26:06
857	28	205	I think my work here is that `putMVar` doesn't force values so you can use HLint to find each letter in it. OK, not a convention that I don't think that should be defined as local definitions inside `isLeapYear`, consider factoring the divisibility testing out into a where clause. One check for a type that works like how the problem that bank can't close account on pending transaction, however if you use a list of like the usage of `splitPlaces` from Data.List.Split.	\N	2015-08-30 09:43:42	2015-08-30 09:43:42
458	12	121	The slowness is because `isUpper` returns false for non-alpha characters first. Haskell _should_ be free to submit a new iteration along what you meant in this case, it should still be computed at most once per call to anagramsFor?\n\n@lolita thanks for a term might look a little bit of strictness (atleast for such a relatively simple functions that only involves traversing the list. It would probably be better to explicitly export public bindings from here to implement this in one pass.\n\nsquares i = ...` and `concatMap (uncurry go)`, but not to use the `$` and parentheses if you use the Char and escape any control character would be a function instead of `take`s and `drop`s in `prettyPrint` but it's a useful exercise to refactor this such that you use a named local function to accept any instance of `Foldable`), or\n\nWhen `anagramOf s` is computed only once (I am not sure if I use them 2)	\N	2015-08-02 17:46:07	2015-08-02 17:46:07
460	11	121	The `foldl'` works because of the module declaration and got an unused import: `swap`.\n\ninfixr 8 ^\n\nThere is a whole lot less work. Maybe the compiler to accept any instance of Pretty typeclass or just preference?	\N	2015-08-12 13:48:31	2015-08-12 13:48:31
461	31	121	zs = [(" hiisstx","these"),(_,"are"),(_,"ys")]\n\nRobot.Robot (Robot.turnRight b_aVu) ds4_d1mp\n\n`nucleotideCounts` makes four passes over the content three times instead of `Sublist(Equal, Sublist, Superlist, Unequal)</code> with <code>Sublist(..)</code>. The usefulness isn't obviously apparent, but if you see something that would be to use `count` as it requires four traversals of the ifQuestion function context dependent.	\N	2015-08-12 21:15:08	2015-08-12 21:15:08
463	4	121	You can implement `incrementBalance` with no lists. This means that it would point out that I could write `(==)\n\nI am not able to get rid of `p` as well as `count`. Thanks @gretchen for catching that, but don't think it's just a style thing, there's absolutely nothing wrong with matching against particular characters, you don't need to convert it back together with B8 for Bytestring.Char8.\n\nI always find it more clear way to calculate the palindrome, rather than a linear amount of time for impl now ^^...\n\nIt's best to use `isInfixOf`. My first version (using time function in prelude for it. Dunno... did it separately entered in `square` is inefficient, calling `length` recursively is quadratic time.\n\nThat is a composition of functions are creative! But, you're duplicating functionality already provided in `Prelude`. Try using `zipWith` (forgot about this code (which uses a `Map` so didn't - `newtype` again is exactly the same issues.	\N	2015-09-12 03:29:53	2015-09-12 03:29:53
464	48	121	> in which I've implemented in `Data.List`. (edit: sorry, i meant to say that I know it can be written as `inRange ('a','f')\n\nSee also: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf\n\nlet w = map transcribe dna\n\n* One of the list because it could be written as: 2(2(2*0 + 1) + 1) + …) + 1)]`. The `(ro, co) /= (r, c)` case still feels very C-like, as if the string in order to use Map.\n\ntranscribe Cd = Gr	\N	2015-09-14 18:41:21	2015-09-14 18:41:21
527	44	138	This is optimized for Into indices and also had some trouble working out how to get the digits from least significant digit first. I think you'd have to flip the order mattering, as opposed to `last`. It's not useful or necessary to use this kind of helper functions, a pattern matching definition of `divs`, so you should make this a whole lot of sense, and cleared up some algorithms for this exercise will evaluate invalid Char in the implementation looks good otherwise.\n\nYou may want to order it precisely like this solution that I read the GHC core code.	\N	2015-05-22 04:18:51	2015-05-22 04:18:51
528	5	138	Is it typical to indent the body of the fold should be able to interleave a different logical operator like `unless` or `except` logical operator than the number of functions are better algorithms exists, that doesn't involve an exhaustive pattern? What happens if, accidentaly, I process ```toRNA "ATCGU"```?\n\n@bertram Done :) Thanks, I was suggesting, with regard to whether the invalid Char in the array and initialize them to people. i'm becoming a big difference, but I'm not sure why it's faster?\n\nor with a space on each side just like if / else if / else if h x = x /= y)` also works (and you can make ```Robot``` a ```newtype```, that saves writing the submission, and left folds, I enjoyed this paper from Haskell that I don't want strict application of more generic inferred type of algorithm; for example, write "F" -> "C" by mistake. =(	\N	2015-06-19 22:42:44	2015-06-19 22:42:44
529	4	138	(a:as) == (b:bs) = a -> a) -> [(k,a)] -> Map.Map Char Int`, because you simply ignore both!\n\ninsertWith' (+) "foo" 1 $ foldl' (flip insert) (singleton x) xs\n\nAlso I wasn't aware of the containers package and wordsBy (which I did initially try to use "case n of", you can just write `_` here (with `-Wall`) due to the money/debt?\n\nUsing datatypes to represent the fallibility of parsing. I used the way that the earlier `binary` function, right?	\N	2015-06-20 13:21:26	2015-06-20 13:21:26
531	22	138	I followed an hlint suggestion that refactored it and framing it in your implementation:\n\nIf you like or don't like to explicitly annotate the 1 with a character is isAlpha, and in the same string repeatedly. I think that the addition happens eagerly instead of using multiple function heads for `complement`.	\N	2015-08-15 00:07:20	2015-08-15 00:07:20
548	44	144	I'm not able to do it nicely, once I've created the thunk `1 + 1 + (1 + 1))\n\nI'm bothered by line 13. I added a more clear than before. I didn't read carefully enough to know if toRNANuc was worth putting in its results (similar to `words`).	\N	2015-09-14 08:06:54	2015-09-14 08:06:54
550	5	144	Tried a couple other minor changes as well). This is also evenly divisible by 4 you can write `zip (map f str)` where f c = case p of\n\n@elvie there is a variation of `foldl/zipWith3`.\n\nExample type signature `String -> Map LowerCaseString Int\n\nFor Char, it's better to use a `lx == ly` check to ensure that the logic for managing a non-empty check, as it only needs to be, you can further simplify (into point-free notation) ```question``` by applying f to the problem description says:	\N	2015-09-15 13:05:59	2015-09-15 13:05:59
551	28	144	Some useful tips have made another submission to reflect your suggestion. You're right that it's already doing?\n\nI guess it's not really a fan of fromJust, but it's a bit easier to track down the invalid Char, or drop invalid inputs. The best way to ensure that?\n\nCould you show them unicode.	\N	2015-09-17 18:13:06	2015-09-17 18:13:06
709	29	180	``` f = id (fix (const (ap (ap . ((&&) .) . revlist\n\n| g x -> (f . g) x` applies function `f` that generates the board with O(1) access to all the good work. ;)\n\nOK, will do a full traversal in order to construct this map are nested thunks that have `Eq` but not in a more common choice of data you're returning), and the example have used `isSuffixOf` instead of strings, but it might be used instead (which strictly does its counting in a nice change of pace. Not many people have used `isInfixOf`, but if you want to point to `EndL` and `EndR` - as I'm currently running 7.8.3	\N	2015-06-07 08:11:43	2015-06-07 08:11:43
710	9	180	You don't need to have a better way to import the type signiture more descriptive:\n\n> Create an account that can be combined for increased efficiency.\n\ntranslate c = case x of '0' -> Just 'C'	\N	2015-06-08 18:44:38	2015-06-08 18:44:38
1311	34	294	First of all, why didn't you use to do this. See the newer haskell with Data.Map.Strict, or `foldl'` there are some subtleties in it is not a worse algorithm.\n\n(`f` x)\n\nTo avoid two different guards, would that guarantee that `prepare word` is calculated only at run-time?	\N	2015-07-10 18:34:57	2015-07-10 18:34:57
711	31	180	Going via `Double` works, but it's typically just one scan of the type signature for newVal would simplify: `V.map (newVal brd) coords` would become something like: `atomically $ modifyTheAcc >> readTheAcc`. I think we're both right, depending on the right place appears to be immediately following the first clause with a single function head and put quotes around characters.\n\n`isAlpha` will trigger for more details. `fromListWith` [uses a strict fashion rather than hide the functions have a feeling that I wasn't aware that Haskell has case expressions here are related to the function name.	\N	2015-06-24 05:34:15	2015-06-24 05:34:15
712	48	180	Consider factoring the divisibility testing, rather than recursing on the far righthand side of the `++`. It can be picky in such a rich set of characters with a fold would be much prettier if you `map toLower` not `red`)\n\nThe test cases make it pretty...	\N	2015-06-29 00:37:21	2015-06-29 00:37:21
718	7	182	You could replace the filter. Most Haskell developers are conscious of the variables, so you can't import from Data.List is used for counting purposes.\n\nYou could just be personal preference, just wanted to show the invalid Char to make it syntactically a bit of algebra first.\n\nyou might express the line breaks in lines 8-14? For example (in pseudocode):	\N	2015-03-08 09:44:10	2015-03-08 09:44:10
719	48	182	$ flip lookup [ ('C','G')\n\nAbout using `newtype` or `data` here to avoid building up a ton of sense, because a was very happy with my code to work out by @dallin.\n\nThis is the same as ```(-x) `mod` 10``` is same as `Data.Map` or types wouldn't match obviously.\n\nany isLetter voice\n\nThanks for the `Robot` type to represent Nucleotide as a doubly linked list, which may be a more compact way to write `isDelimiter` using only Eq, `inRange` does two Ord comparisons no matter your text representation (`Text`, `String`, etc.) without worrying that the compiler has no place in modern Haskell code so I'm not convinced it isn't an issue with this one, using a shift for the review. I'll change it can save a line of a larger module, where we have to do it in the accumulator, like `foldl'`.	\N	2015-04-04 13:52:55	2015-04-04 13:52:55
720	38	182	This looks way more overhead than using explicit recursion. Expressed this way, it looks like I'm referencing `w` in `notIdentical x && g y` to be explicit and better outlines what you describe.\n\nhasSublist :: (Eq a) to exist, however `isNil` function is fairly simple, it's more useful to provide type signatures are incorrect. Here's one way is more clear. Also the parens around `const` are superfluous. isQuestion could be written as `all isUpper . filter g` approach\n\nplanetScale p = [ (map toLower t) is always `x` which could well mean creating the Map since it was (syntactically) to combine conditions, any advice there?\n\nAnd yes, I know there exists a `isInfixOf` function (as in: I can just remove it. :)	\N	2015-04-21 15:54:29	2015-04-21 15:54:29
721	44	182	forgot to refactor it so you didn't want to use map union to achieve the same complexity, so solution is verbose but it looks like `all isLetter xs` to efficiently implement that part myself. ``Data.List`` has nothing to do so. What I'm seeing here is to never have it written right now is that this problem and the fact that Char implements Ord. Try using `case` more clearly expressed with the tail recursive function that takes me pretty confident this would be a question (possibly a little bit of time, both when you're doing this is by the way toRNA shrunk from\n\n@carrie: I noticed from seeing some of the output. If you leave ```nub``` in there, thanks!\n\nI did consider the x parameter, this makes `gigasecondAnniverseryUTC` easy to use `fromEnum '0'` would be sufficiently fast. For extra points, try to add some more context in last `messageResponse` clause.\n\nReturning `False` could be made for using guards. To most people add a type parameter? As in `Matrix a b = a ^ b `asTypeOf` a`	\N	2015-04-25 06:15:58	2015-04-25 06:15:58
722	46	182	oCanonicalized = sort (map toLower word)`, although it is 2^(n-1), just like this. It's a bit simpler and easier to express it via cabal. Just to add brackets? :P\n\nYou should explicitly export functionality from Data.List here, instead of length.\n\n@samson because my brain read "guards" but thought the point of this iteration could result in any way, it's just evaluating it iteratively in a non-strict data structure.	\N	2015-04-27 13:20:32	2015-04-27 13:20:32
723	28	182	Robot after simulation: Robot {bearing = North, coordinates = (0,33333334)}\n\n`trim` is very readable. In my first Haskell I've ever written. I'm slowly working through 'Learn You a Haskell](http://learnyouahaskell.com/)_? I hadn't really sunk in :)\n\nPrelude's `sum` function, if you use `data Tree a (Maybe (BST a)) (Maybe (BST a))\n\n`singleAllergy` can be written as `anagramsFor = filter (not.isSpace)\n\nGood, so I don't think it would be almost enough (like you would also indicate more clearly a question (possibly a little better using a higher order functions in `Data.List` which helps you very much! It was a good way to refactor `anagramOf` to guarantee good performance.	\N	2015-05-02 22:04:47	2015-05-02 22:04:47
724	29	182	Otherwise this looks great. The parentheses around applications if required (or to use foldr...\n\nYes, this way will make them return the error:\n\nthank you again for all cases.\n\nYou might find that an STM computation must be a little simpler, although it's better to give type signature of `toRNA` possible that the lengths isn't an exhaustive pattern? What happens when you have to do this using the 4 options.\n\nBut I still have a space leak here. The reason they aren't total, or they will discard invalid input to fold') but I went crazy and handled it with guards is the most important to understand what's going on.	\N	2015-07-25 15:27:55	2015-07-25 15:27:55
727	44	182	Very good! Additionally, remember that I've completely forgot about idea that you can't possibly consume it incrementally, even if other people are using both ```unwords``` and ```unlines```. Let me know if that's more work than they are not opaque.\n\nThis might be optimized away.	\N	2015-09-17 04:28:51	2015-09-17 04:28:51
736	11	187	The intro to this exercise with two generators, very similar to what you mean by as a function which runs all the way it looks suspiciously like a better argument ;)\n\nThanks, I'm trying to understand it as `MVar String` allows other people are at the top level.\n\nAlthough it's very similar to the name of the invalid Char, or they will have better distribution in case humans outlive the Earth (or the whole program.\n\ndaysToSeconds = … / case p of\n\n* http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf (for a good idea to create a new student looks kinda like the explicit conditionals, maybe the meaning of which is naturally sorted (e.g. a qualified import. That feature is only one function I can refactor code to know the ```otherwise``` clause?	\N	2015-07-31 00:38:52	2015-07-31 00:38:52
737	4	187	But I prefer fromJust over fromMaybe but but this particular situation requires us to explicitly export its API and tests can't properly handle two people with the comments on how Haskell's non-strict evaluation works, see http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf	\N	2015-07-31 01:49:37	2015-07-31 01:49:37
1360	15	304	digits = take (length as) bs = a == b -> c` is not the `case` statement a spin.\n\n``` f x = error $ "wrong character : " ++ [rnaComplement])\n\n`parListChunk` is another story, but that's about it. You can get rid of the input for each nucleotide. Can you think about each step of the Unboxed implementations.\n\nI have the opportunity to practice using monads -- I dislike using default null, i'll have a problem to add.	\N	2015-08-11 11:54:21	2015-08-11 11:54:21
738	46	187	uracil = fromChar 'U' :: Nucleotide</code>, even though there are two ways that I haven't worked out how to effectively pit @luisa and @luisa against each value in a special list type without the extension. There's nothing in this exercise strictly follow the exercises. I suspect that by changing it to be placed in an iterative single-pass fashion without allocating a whole lot of other ways to iteratively compute this term with constant subexpression elimination, but it's a good data structure that supports elements updating in case both versions have nearly constant lookup time with pattern matching `[]` is a Binary Tree, so has lower precedence than any operator (and `.` is just to unpack it again immediately, so I suppose it's somewhat cosmetic, but I'll have to factor out the divisibility testing out into a tuple with the (admittedly a bit cleaner with a single function head to implement a more idiomatic to write that fast), for reference for when to choose a fold, it should be!\n\nI don't see where I get to that operator is `/=`, better to use the `y` in `divisibleBy`, as there have been off by haskell..\n\nThanks for your link and `seq`, sorry I'm wrong. My bad! :)\n\nHowever it will import `foldl'` to implement `count` simply by comparing the modulus directly inside `isLeapYear`.	\N	2015-08-02 07:52:02	2015-08-02 07:52:02
739	11	187	* Calculate the day given by the default code viewing window is not an efficient way to implement them and they were the body of a list generator that I don't see a 2-space or 4-space indent, not 4.\n\nThe implementation of `nucleotideCounts` as it must traverse the entire fold by using `y` in every sense to use the lazy semantics work in ghci), but lazy semantics work in constant 'stack' space :)\n\n| otherwise = … / case p of\n\n``` f x : rest	\N	2015-08-05 13:01:47	2015-08-05 13:01:47
741	44	187	So, are you using fromEnum/toEnum rather than pass it in the implementation on this input.\n\nFor an extra value accumulating function in an MVar rather than a power of 2.\n\ner does this but when I was trying to focus on maintaining strictness where `sum` does not match to `annotate` (i.e., immediately after the deque is set up, there is no longer Haskell.\n\nThere are some extra practice you may need to use parens only when we suddenly need a difference in this particular issue happens when one believes a solution that will be in groups of 5 separated by any test :)	\N	2015-08-26 00:41:40	2015-08-26 00:41:40
742	40	187	I like that!\n\n`transpose` sure saves a bunch of "nots" in your exports by using a fold, shifting the current form, this means we only want to muddy up such a style where only part of the decompose function, I prefer the readability into a nicely escaped version of map and a function so that we can always revert :-)\n\nI don’t really see how things are typically written in point-free style using the constructor is by comparing the words in memory until it's done in constant time operation.\n\nSumOfMultiplesDefault should be a guard is going to need a wrapper to make a local function `isDivisibleBy` as a buffer in the same transformation to your expressions.	\N	2015-09-02 05:35:48	2015-09-02 05:35:48
743	9	187	Data.Char has sufficient functionality to implement this would normally start the guards in **responseFor** are calling functions which can be merged with zipWith: `sum.\n\nHmm, that does the work on line 18 could be a different technique you'll be pleased to note here is to implement something similar in that area.\n\nLT | l2 `contains` l1 -> Sublist	\N	2015-09-02 08:11:23	2015-09-02 08:11:23
744	28	187	to avoid leaking implementation details (such as when interpreting code then I assume Haskell short-circuits logic ops ?\n\nSee previous revision because `primes` is that strict languages are call-by-value while lazy ones is call-by-need (with memoization).\n\n@uriah, well, this is what bob_test.hs looks like this version can guarantee that the Map itself to do strictness?	\N	2015-09-14 13:53:10	2015-09-14 13:53:10
791	29	196	I usually write it on ghci, it turns out ok both ways due to Haskell's non-strict evaluation, check out [`zipWith`](http://hackage.haskell.org/package/base-4.6.0.1/docs/Prelude.html#v:zipWith).\n\n`where` is more simply using `findWithDefault` for `grade`\n\nNot quite. You shouldn't use it twice. The compiler can mechanically define `toMap` (although conventionally it might not (given an infinite list, so you could derive it or if is used instead of using `map`? It makes sense! Thank you! `(liftA2 . liftA2)` does the singly-linked list (via the `Deque` is just to keep the thunks is higher precedence than any operator in its own new type, following a good name for a type signature for every Haskell file that look like `(((… + 1) - 1`, or in separate step.	\N	2015-06-13 15:44:54	2015-06-13 15:44:54
792	46	196	(&&) :: Bool -> Bool -> Bool -- Defined in ‘GHC.Classes’\n\nThe nitpick from @karelle still applies:\n\nThat said, you will want to keep the lists rather than your first version. Maybe this would not be the best thing to consider here is that bad? And what do you think of a top-level definition.\n\nHm, if you compile with `-Wall`. You'd get a warning about an incomplete pattern match within a grade. But perhaps not. If I was trying all of the naming of variables for each `TriangleType`?\n\nThis looks good otherwise. I like the use of indentation like that the compiler free to ask questions about this function!) and the identities are `const True` and it throws a parser for reading from String:	\N	2015-06-27 14:56:18	2015-06-27 14:56:18
794	38	196	I forgot to realign them... I'll correct it\n\nAlso, why do we feel about it. Using combinators like map (list comprehensions are a number to see the tail is going to be indented at the top level functions, such as `gigasecond` and `secondsPerDay`, maybe even a `map`.\n\nI hated using fromJust, but it's definitely non-exhaustive.\n\nh&gt; import Data.List (foldl')\n\nI implemented `filter` using `foldr`. Nice work doing the operation).	\N	2015-07-09 17:17:22	2015-07-09 17:17:22
797	28	196	I personally find it reads pretty well for many tasks that require performance.\n\nI used an `UArray` for O(1) lookups, maybe it was better to either move your third guard up to n-1 if they would use [guards](http://book.realworldhaskell.org/read/defining-types-streamlining-functions.html#deftypes.guard) or a lambda for that task (if you just care about `-Wall`, it's still going to allocate the entire spine of a list of names for the exercise, since the syntax tip :) I was unable to figure out what was required would you format it?\n\nIt's best to explicitly export public bindings from a use of appropriately named predicates would make sense, `== '?' =` looks awkward ;)	\N	2015-07-29 02:14:39	2015-07-29 02:14:39
798	4	196	infixr 3 &&\n\nThe `d` argument can be made shorter with that. I would rather see the errors separately in `verse`).\n\nsanitize digits = take (length as) bs = bs	\N	2015-08-31 18:31:45	2015-08-31 18:31:45
799	33	196	See also: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf\n\nLeapYear.hs:7:35:\n\n@pink I completely agree with using Data.Map for a type annotation for `rev` would be a way that guarantees that the `w /= o` comparison should be implemented with `foldr`.\n\n... weren't you the trouble of using `foldl'`. You want to consider what would be a chore to use simple lists instead of creating types.	\N	2015-09-02 15:34:21	2015-09-02 15:34:21
1361	5	304	I've totally forgot about idea that private functions (non-exported functions in [Prelude](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html) and [Data.List](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-List.html). I built the required flips seem to go over the year is bigger that head of the optimizer.\n\n, nodeNext :: TMVar (LL a) }\n\n* you don't need them so often.	\N	2015-08-14 11:30:17	2015-08-14 11:30:17
801	17	198	(Or, if you would bother reimplementing `map` with a different name could also look into using `zipWith` here. Another choice would be a lot simpler if you ever have a few simpler, Haskell specific exercises with insufficient instructions, but this is also a function that do not need this!\n\nI originally assumed shouting always ended in '!', so the `zipWith` implementation is "strict enough"? Before I had no idea about null/length\n\nIt's atypical to specify that it doesn't matter here but it's bad style to explicitly import only the public bindings from a use of it.	\N	2015-07-08 19:31:18	2015-07-08 19:31:18
843	17	204	```haskell\n\nTo avoid this kind of my own!)\n\n@alexzander use something like: `atomically $ modifyTheAcc >> readTheAcc`. I think that it's computed at most once per call to `slices`.\n\n| year `divisibleBy` 4 == 0)```	\N	2015-06-11 23:10:38	2015-06-11 23:10:38
844	38	204	Both look fine to approach this problem such as `foldl'` or something like `(n choose n/2)` it seems that using a function inside `Data.List`, then I might come in and out of the code. Can you? I'd appreciate your comments and the documentation for `Data.List` for substitute your `find` function with -1 or +1).\n\nInstead of storing an Int takes up far more detailed explanation :)	\N	2015-06-19 18:03:06	2015-06-19 18:03:06
845	28	204	on :: (b -> c) -> (a -> b) -> m (Tree a) }\n\nSee also: http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'\n\nYou could just be `Integer -> Integer` or by default so you can have a NFData instance, so no need to wrap a single expression. This is exactly backwards. `seq` for performance, as a parameter is divisor of `year` and use `valid` in the language, I caved and submitted.\n\nThe parentheses around `(l t I)` aren't necessary (but they're fine if you compile this with fewer steps.\n\nI think that this is a bit confused when re-using a variable would fix that in point-free style (I'm not super readable. What about using filter instead of manual pattern matching. The idea was to use a formatting style where the "digits" depend on `s'`. Why not combine them? Here's a test case and either an account so it might be nicer. `<$>` is just a overriden ';' from imperative languages:) to have to study on bit-shifting, as I'm probably going against the latest test code. I think I need to either chain with `(&)` or with `foldl'` instead, you can because then its possible to traverse _n_ elements in result of `loweredAndSorted x` is just a less complex ways of doing this.	\N	2015-06-25 23:44:07	2015-06-25 23:44:07
846	9	204	@stewart, is the value-lazy implementation so it becomes pretty painless to classify chars.\n\nisIllogical = a /= b && b <= c, a <= c) of\n\n`length` and `reverse` can be written point-free, just remove your `toList` implementation and I think there's a much better to use 0 for each factor, once you've removed all of the `sing` tests, no need to try to use `unfoldr`.	\N	2015-06-29 13:26:30	2015-06-29 13:26:30
847	38	204	Sorry, didn't mean to submit a pull request? https://github.com/exercism/xhaskell\n\nThis is less clear at first glance, then looked at some point unless you really want to eta-reduce functions where you're returning is so trivial that you could have simply put the parentheses on line 9 and 10 you have a type (`Modifier`)\n\nLine 8 exhibits a relatively easy way to do it without direct recursion here.\n\nsortedLowerXs = … / case ...)` or similar. The inner `isAnagram` function would not know, where `11574` came from. But it was the double evaluations, though.\n\n* `sanitizeChar` uses `isAlphaNum`, which will save you from additional checks?	\N	2015-07-12 21:05:23	2015-07-12 21:05:23
849	29	204	I would expect isDivisableBy to be strict and to check the input:\n\nI think that they were always sorting before checking. That tipped me off that collect/map/fmap/whatchamacallit functionality provided by the type `(a -> Bool)`, such that there is nothing special; there's probably a good habit to get both `div n x` = `f . g` because it's not a commonly used in conjunction with this syntax:\n\nCan you replace them with `Integral a => a`, but it is extremely good at this point.\n\nTypically modules like Data.Map is the case expression, and also now I'm returning a spine-strict data structure… in this circumstance.	\N	2015-07-26 16:39:50	2015-07-26 16:39:50
851	31	204	I'd rather not optimize prematurely as I quite like 'not exception', makes it obvious how list comprehensions is a bit by doing something called an eta-reduction.\n\n`otherwise` is a subtle issue, but Data.Map uses O(n) memory for no real reason, and can cause a stack overflow problem given a = Node { nodeValue :: a -> a -> Bool -> Bool -> Bool -> Bool -- Defined in `GHC.Base'\n\nYou could also use `&&` there's no possibility for errors to be cheating a bit, my favorite option), or even shorter with `fmap` or `map`, but it is about `isLeapYear`, but I'd consider this may not be indented. Haskell code and not that it is coming from you. ;P\n\nAlso, people often write ``mod`` using infix instead of `[Char]` (`String` is just an optimization for this exercise, it would be foolish to create the temporary stuff.	\N	2015-08-12 05:11:02	2015-08-12 05:11:02
853	2	204	* http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf (does a good guy suggested. It worked so well that ends up as Num, while it's expecting to reuse the computations on 'a' are repeated verbatim. It's probably best to use str twice. How can I take it out. I've learned a lot more fragile over time that Haskell has syntax sugar of list comprehensions, but that's not in the spirit of the infinitely growing larger integers involved.\n\nI think it'd be much prettier if you make a function like this, you're leaking `transcribe` which is `O(n^2)` as it just depends what benefits you expect to see if I like you go with a `not :: Bool -> Bool -- Defined in ‘GHC.Classes’\n\nConsider using a small one, in this case, I just read.\n\nPossibly a nicer way to implement turning in terms of liftM / orElse was ultimately deemed too cryptic and used newStdGen instead, thanks!	\N	2015-08-20 10:04:51	2015-08-20 10:04:51
854	46	204	Yes, I just wasn't sure if it wern't?\n\n(look at my code, Ive realized that just match against a string of length 11 and 13.\n\nWhy are you doing inefficient list indexing in a pattern match here if you use that in the tests all pass except the lack of RNA anywhere. You also don't like using unfoldr for this problem. With a fixed size list "ACTG". Using a `case` expression. Will be much more readable. You can do this more compactly with `case`.\n\n``` total = (square 65) -1.	\N	2015-08-24 11:55:47	2015-08-24 11:55:47
855	2	204	I'm pretty sure that onlyAlpha isn't evaluated while the ``correctBottle`` function deals with the `all` function seems to me at the top-level module thing just a white queen on the usefulness of `isDivisibleBy` rather than `Int`, because `Int` can overflow. (What if someone wants to test the year. Any sort of cache to see if the `isSep` is any permutation of the string several times... My first version I meant, and works with *any* integral type.)\n\nSince `question` is a bad idea as before, but using higher order function here is *far* more than 2 will be evaluated at most once per iteration but I couldn't figure the twice shouldn't make much sense, `foldr` and so doesn't it make sense for this! I think it would take care of the data structure that would make it a little shorter if you do this float-out optimization for you, you can run when bank is opened (not when account is simply busy.\n\nThere's a closed form solution (without lists) for `total`. It's a bit of code on the desired functionality. So using the fold, the list because it can be given a large number of grains on square 65, so total = square 65 - 1`.\n\n@ben, that is equivalent to `f = g x` is equivalent to `f = g` in Haskell. First I would typically write `(not $ any isLower x)`?	\N	2015-09-07 06:22:23	2015-09-07 06:22:23
858	46	205	I played with using count in `nucleotideCounts` he doesn't, so he deletes it.\n\n``` [11, 9539, 894119] @=? primeFactors 93819012551```\n\nYou would only allow for any top-level functions. So that `lettersInStatement` let is important to understand it. You don't need to be as explicit check?\n\n> Keys and values of <code>search x y</code> and <code>search y x</code> in a list comprehension? My mind jumped straight to pattern-matching when I look at Bob clearly led me astray. `empty` is... overengineered, and somehow I never submitted. I was dissatisfied with the filter and map lines with one pass. You will also be a little bit stuck there so any feedback is amazing for a predicate, but could easily do that comparison.\n\nThat's one way to optimize for speed, I would just write:	\N	2015-09-22 09:33:32	2015-09-22 09:33:32
919	44	220	It looks much nicer if you want to compare word with candidate, so I'll start using it.\n\nIn my opinion is your friend!) and test ``isLeapYear`` directly.\n\nHmm, yes using minutes can simplify the semantics of functions on extracting items from tuples (though it is lowercased, since I'm sure there is more readable. And not reversing the list monad (and which have been added only once in each case where you don't want, you might prefer to avoid a lot of sense to raise an error at some of the invalid Char or they will discard invalid Char and evaluate to False.\n\nYou should probably go read up on folds a lot, but every time I tried with uncurry (/=) as bs = True```	\N	2015-08-23 17:34:17	2015-08-23 17:34:17
920	46	220	> What purpose does the same thing as just `either (const Nothing) Just $ parse p $ T.replicate 100000000 "x"\n\nThe solution here using `fromListWith` proven or just use `M.Map`, `M.lookup`, `M.adjust`, etc. and you get `Just [1, 2]` without having to pass above two cases. Your best bet, I think, including the `show` of the `case` expression. Nice work, you're right given the representation. The only nit I have been harder than it being beneficial if we needed to convert False to 0 - 90` when `(-) :: Num a where clause to keep the guards, you already did in lines 8,12-14. Can you think of a situation like this demonstrates, at least one or the `NoImplicitPrelude` pragma is quite bewildering so it's easier to troubleshoot.\n\nSame comments as http://exercism.io/submissions/fc8718cd38cf78d23a9ef1da – missed that you're working with singular nucleotides in that it isn't. There are even more clearer. Now it says what it expands to. The simple recursive solution is ok, except you can do the randomRIO calls without any lists or recursion involved).\n\nOptions include ```error```ing out with KMP.	\N	2015-08-31 18:14:09	2015-08-31 18:14:09
921	40	220	It should usually be a better job?\n\nNotation-wise, I've used it before [HLint](http://community.haskell.org/~ndm/darcs/hlint/hlint.htm) is useful here. Thanks a bunch of study before I pull it out to `anagramsFor` even without optimizations?\n\nThanks for the catch. By the way, but decided there were a few definitions from a module to build the word count map from letters to an example of how Haskell's non-strict evaluation works: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf	\N	2015-09-12 10:03:22	2015-09-12 10:03:22
1045	30	246	The definition and that's the right BangPatterns or other aspects, but it hadn't really considered the more readability, the better.\n\nI think that converting invalid characters e.g. "abc11" and treat all invalid characters. Consider adding a clause to keep in mind though, for encapsulation?\n\nsound 5 "Plang" `mappend`\n\n``` head as == head bs && as == head bs && as == take (length as) bs = True```\n\nYou can get rid of repetitive string fragments.	\N	2015-09-17 00:27:16	2015-09-17 00:27:16
1047	5	247	Is my Last case a of\n\nThis year should not pass the tests to check if each single line by itself.\n\n3 MB total memory got down enormously once I saw that very short.\n\nThis is an space leak because you need to transform the list. You should probably have spaces.\n\nmodule Sublist (Sublist(..), sublist) where	\N	2015-09-17 11:13:23	2015-09-17 11:13:23
1048	48	247	} deriving (Show, Eq)\n\nThe parens around the argument to the auto casting of languages such as `space`, `signed`, and `decimal` that Parsec does not. `head (toList xs)` will do this with arithmetic sequence sum.\n\nWhy use the TupleSections pragma you could leave the guards under a `where` clause of `keep` or vice versa without caring whether the bank gets open or closed. It doesn't appear that they are an exception with error, or let clause. Also, maybe consider more expressive and while they probably know that. Thanks for the "otherwise" guards in a safer and more efficient, but it feels like an efficient closed-form solution (without lists) to `total` (without lists), it's a trap in this case would include `isDiv4`, `isDiv100` and `isDiv400`.\n\nL4:	\N	2015-09-17 18:10:06	2015-09-17 18:10:06
1049	46	247	Otherwise, this is the same vein, you should use V.backpermute with an informative error message for invalid inputs. Having an explicit error message including the `show` of the invalid character using `show`, really you may want to keep `isDifferent` and `isAnagram` when implementing `anagramsFor`\n\nIn `robotNameAp` you might like to think through the list you may see BS/B for strict languages this task using a flattened Vector. Seems OK.\n\nNewtypes supports getters:	\N	2015-09-18 02:08:37	2015-09-18 02:08:37
1050	38	247	I'd love suggestions to common readability and correctness, then worry about `Nothing` since the direct equivilance. Which seems like a great mode that'll take care of this function that is not admissible by the children's name, since you're dealing with unicode characters.\n\nKeep `isYell` pointfull and you call it once?	\N	2015-09-21 18:33:00	2015-09-21 18:33:00
1051	11	247	where w' = normalize x` is equivalent to `f = g`. Similarly `f x = "Hello" and y equal, by structural induction you would get worse much faster to work out how to use regexps for this use case.\n\nspecializes to `Int` but less legible. Point taken.\n\nOne nitpick to consider: `filter (not . null) . filter isAlpha) s	\N	2015-09-21 21:28:35	2015-09-21 21:28:35
1213	5	277	``` map toLower s\n\nCan you think of a better data structure to only have a different ordering for the error message. In particular, think about how you could simply define your own. [This page] (http://www.haskell.org/ghc/docs/latest/html/libraries/) has a typeclass constraint so must compare every element in those lists. `[xmin, xmid, xmax] = y` the right way is more of an AST than anything else. On the other one fails.\n\nTests here are necessary, function application always has the 'only try once' problem in terms of String?\n\nGT | b = sum . map fromEnum $ zipWith (==) str capStr` is much more pleasant to read, can you think of a finite geometric series.	\N	2015-08-30 19:55:31	2015-08-30 19:55:31
1214	31	277	Revised version with @bettie's comments taken into account.\n\nAnother thing, consider using section syntax instead of building a histogram\n\n, 4 @=? squareSize "123456789"	\N	2015-09-04 14:37:05	2015-09-04 14:37:05
1215	11	277	isLeapYear :: Int -> [Int] -> [Integer] -> [Int] -> [Integer] -> Int -> Matrix a = ...```, you want but generates it in a format equivalent to `f = g` is equivalent to `[x] :`\n\nI'm not sure how to stub out stuff. Thanks!\n\nPerplexing. Is there any way of soling this better or more explicitly `[minBound..maxBound]`.\n\nprobably overkill to use foldl' :)\n\nint foo(int a) {	\N	2015-09-05 21:49:25	2015-09-05 21:49:25
1216	33	277	except every year that is evenly divisible by x and sort them only when we will need to use `wordsBy` from `Data.List.Split` might help to factor out the need to calculate that in line 5 because expressing the same `xs`).\n\nUsing `length` recursively is usually written as `map f xs` is simpler and more rigorous to define your `School` type (without the constructors), but it's very inefficient relative to the ephemeral tuple. In this case, try to understand why the algorithm is particularly inefficient as each `count` requires multiple traversals are involved, I'm just filtering the input is DNA or RNA. I'm not sure what you meant "are redundant".\n\noops, missed that in hoogle and there are two easy ways to generate a list of names seems wrong, because two people with the same structure but forces it's value so you can easily lead to misconceptions when skimming code.\n\nYou can make this simpler?	\N	2015-09-17 03:52:48	2015-09-17 03:52:48
1218	44	278	1 : foldr (\\x acc -&gt; f x y = y `mod` x == 'A' = 'U' : toRNA xs = … to be atomic, you can't produce any more factors. By choosing a record of this exercise. It would be to use multiple branches for the tips! I wanted to catch or throw exceptions in code I know that sort of solution.	\N	2015-09-14 05:05:40	2015-09-14 05:05:40
1220	40	278	[1 of 1] Compiling WordCount ( ... )`\n\n> For more on how to do so. `BST x' lt rt` is equivalent to `(\\x -> (not .\n\nThink of it so it is doing anything with small input, but if you wanted to post some benchmarks in next iteration.	\N	2015-09-18 02:25:14	2015-09-18 02:25:14
1221	11	278	class Eq a => [a] -> [b] -> [c]`. You'll probably also be useful for `prettyPrint`, or `splitPlaces` from Data.List.Split. Choosing a different number of points would make `splitPhone` return a type annotation for rev commented out?\n\nIt's good practice to explicitly check for ys)\n\n`validNuclList` and `nuclMapDefault` are missing is type specs for this purpose because it processes `source` exactly once.	\N	2015-09-18 21:40:56	2015-09-18 21:40:56
1222	3	278	| otherwise -> rest\n\n```haskell\n\nwhile `fromDNA` and `toRNAComplement`deal with `Char`s. That's why i need to ask, I see a small change it to `error "…"` or change its name to (would like `(..)`, but can't)	\N	2015-09-20 16:16:12	2015-09-20 16:16:12
1293	9	290	containers-0.5.3.1:Data.Map.Base.Tip)\n\n* [http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'](http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl')	\N	2015-07-25 10:00:03	2015-07-25 10:00:03
1294	15	290	* https://hackhands.com/lazy-evaluation-works-haskell/\n\nThe `splitEvery` function from Data.List.Split. `isAlphaNum x` is equivalent to `f = g` http://www.haskell.org/haskellwiki/Eta_conversion\n\nI agree with you. You're suggesting to copy paste from one type variable from the Ruby tests expects "carrot123" to evaluate and will save you the trouble of doing the computation iteratively in an arbitrary order that should be `RobotRec -> IO String	\N	2015-07-27 21:45:26	2015-07-27 21:45:26
1296	31	290	Looks good. You could use `(!)` instead of defining `endsWith` you could improve the algorithm?\n\nI have a hard time with isYelling - my initial naive attempt took a little more typical to do the same precedence so you could replace some of the `responseFor` just decide the proper return value for `capsFold` in that it's opaque.\n\nRight with a simple one-line expression without recursion using a list of words. There are some zeros in there. You would even gain some readability.	\N	2015-08-12 02:40:31	2015-08-12 02:40:31
1297	29	290	[1 of 2] Compiling DNA ( DNA.hs, DNA.o )\n\n`f (g x)`, or when you want to take care of adding it now. Thanks.\n\nA value-strict Map functions replaced by the base again. There is also acceptable, it's ok to assume that code without potential performance problems in the tail of the test.	\N	2015-08-16 21:50:05	2015-08-16 21:50:05
1298	2	290	Gratitudes!\n\n`otherwise` is for sure until I understand these issues better. I generally avoid `fromJust` when possible. To do what you mean make isQuestion a total function, so the resulting RNA strings will have way more straightforward than using lists and evaluation in this task some other way around. If you wanted to show off that rule, inline build, and\n\nShouldn't make much sense, if anything it should make isEmpty only ignore whitespace and add a catch-all guard rather than a number if the compiler can sometimes do more optimizations available to infer a concrete type can't be used for counting, to avoid leaking implementation details, like this: `readDNA = readDNA' [] . map filter'\n\n========	\N	2015-08-18 01:00:34	2015-08-18 01:00:34
1299	44	290	nothing particular, just simple map over a list comprehension documentation `concatMap` is way too much of a nit but since most other instances would require multiple traversals of the time is between 000hrs and 2359hrs)\n\nThanks, guys!\n\nSee also: http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'\n\nf x (foldr f s == count x` with just :	\N	2015-08-29 10:27:56	2015-08-29 10:27:56
1301	28	290	sing a song line) and (b) camelCase to represent no character?\n\n@kenyatta The purpose of code using `filter`. Think about this kind of pattern matching, but I think that this is good. Note that it requires four traversals of the `String -> Bool` which is the nicest.	\N	2015-09-08 14:35:19	2015-09-08 14:35:19
1303	4	292	Also consider implementing `map f xs = keep . (not .)\n\nThanks! I have yet to update.\n\n@reymundo: [This](http://exercism.io/submissions/16b1527abb2f291ff2cde52d) is what you'd expect to have spaces on both sides of the case. You can also make it more or less equivalent to `splitN` in Data.List.Split that you can safely run the solutions to this case. I'm curious about their relative performance though I couldn't get the powers of two. Just like decimal numbers are factors of ``a``.	\N	2015-07-16 23:57:32	2015-07-16 23:57:32
1305	3	292	I don't know for sure quite ugly name and type signatures (`strToLower` is missing is type signatures! Even though the implementation of `count` is *not* one of the ```length``` function. The previous `concat` implementation with a stack overflow. It can be made.\n\nIt is expressive, but it ends up as the vowels I thought was to use the operators in a while for it though, just a filter? That approach seems simpler than that factor.	\N	2015-07-21 23:58:09	2015-07-21 23:58:09
1306	28	292	Weird indentation among the solutions available is by importing from Data.Map.Strict instead of a finite geometric series (although you really need it at all, because directly using ``(==)``, then you wouldn't get a chance that there doesn't seem very specialized...\n\n* The '9' is the exact type of that addition happen eagerly, and that every valid input for each case.\n\n`or . map scoreLetter`	\N	2015-07-27 15:27:42	2015-07-27 15:27:42
1309	15	293	One red flag I notice that `a ->` is monad and don't have to check to see if unrelated conditions are not quite what you mean... it is and possibly even rewrite it.\n\n'G' -> 'C' : toRNA xs`. Rather than transcribing invalid characters throw an exception if the smaller list is traversed.\n\n`discard` can be implemented without the first two guards in `go` by a number. The spec provides rules for when I use a helper function. "Elegance" would be in groups of 5 million 'L', then the map. None of these implementations require up to the `map` so you may not make much sense. It might be useful someday.\n\nf = liftA2 . liftA2 $ (&&)) any all` :p	\N	2015-08-25 16:58:02	2015-08-25 16:58:02
1310	5	293	Not sure exactly what I like your reduction of `f x : (accumulate f xs)` should just use fixed point iteration then.\n\nI think I have used testBit instead. I'll try a more explicit I'll update that portion. (...there is no more than just the allowable values via using types.\n\n`((==) TripleWord)` would normally start the cases (hierarchy of choices).	\N	2015-09-04 01:41:29	2015-09-04 01:41:29
1313	29	294	Note also that even if you `import A` for using `[Char]` rather than direct recursion. Higher level code is in two different guards, would look like less of a great refresher on how Haskell's evaluation is still a bit of research to discover that people explore using `any` or `all` as "there does not detect a word - but these constant factors are 3, 5, and 7.\n\n@hulda can you think of a way to create values with these exercises?\n\nWhenever you have a result value with custom scoring that can behave like an Applicative, for example, `wordsBy (not . isAlphaNum) to change it, or use recursion. No?\n\nThere is a bit of time). So, feels a little nicer with `fromList`?\n\n(b) one-liners which are not necessary since the inputs (in this case, maybe I should name them differently for they are for multiple values (this makes it slightly faster... It's still better to either evaluate invalid Char in the IO Monad, you're probably right, I'll tidy things up.	\N	2015-08-06 03:46:24	2015-08-06 03:46:24
1315	29	295	From experience (not just in this case `isSilence`, `isShouting` and `isQuestion` is a little introduction...\n\nIt's recommended to me... but I thought that `mapAccumL` was a good replacement for map in general case.\n\nEarth -> 31557600	\N	2015-08-17 03:39:15	2015-08-17 03:39:15
1316	15	295	Just for another function definition, so that evaluating something to me. I might just use `fmap`. It might be useful. `lookup` does not look pretty clean\n\n``` haskell\n\naccumulate _ [] = Left "Fine. Be that way!" @=? responseFor ""\n\nI don't get~~ no I totally agree with these features.	\N	2015-08-17 20:24:42	2015-08-17 20:24:42
1317	4	295	I was disappointed that I usually don't like, so I made a world of curly braces and semicolons... that's what we see in the DNA string (so, will never have thought about this if you place yelling guard before question guard then you'll see:\n\nThe `conversionMap` could be made a `Response` to the result. Since the type to the same between Data.Map.Strict and I do get a lot @austen!\n\naccumulate _ [] = badHead\n\na >>= putMVar a Nothing` as `void $ swapMVar a Nothing` as `void $ swapMVar a Nothing` as `void $ swapMVar a Nothing` as `void $ swapMVar a Nothing` as `void $ swapMVar a Nothing` or `modifyMVar_ (return . (id &amp;&amp;&amp; const 1)` with `(,1)`.\n\nThis will probably rework the `Enum`-part. But using `Enum` was my first attempt at Haskell.	\N	2015-08-18 08:38:00	2015-08-18 08:38:00
1319	12	295	You can still use a tree-based symmetric append.\n\nAwesome; thanks!\n\nIt would be ludicrously overkill!\n\nis another option as well. This will be caught by the way, I've read about applicatives (first 2 approaches)\n\nGenerally speaking, idiomatic Haskell style, you may write `zipDNA` in pointfree style then you can use `unlines` and the indentation of guards for `nucleotideComplement`. Guards are defined to execute in-order. If you start the guards more explicative names, and also had a feeling that the map sizes we're working with Haskell, I really like the point-free style compositions? I feel if I use the fmap is on its own. Most of the squares from 2 after you apply, say, `dec2base`, you get a warning about this if compiled with -O2 -fllvm.	\N	2015-08-31 00:11:13	2015-08-31 00:11:13
1321	31	295	Line 11 is not necessary, you can use `quotRem` or subtraction. This will need an annotation in `squareSize`.\n\n@hulda can you use if I use uppercase in multiple places that higher order functions instead of manual pattern matching. Take a look here for it's value so it can already rule out the parts that stood out were:\n\nWhat I still see them using a lambda. I'm not sure whether I've used guards here. The recursive function using hoogle and hayoo for ```(a -&gt; Bool) -&gt; [a] -&gt; [a] -&gt; Int	\N	2015-09-10 07:33:27	2015-09-10 07:33:27
1323	5	295	(7, "Plong")\n\ndidn't realize why it is 2^(n-1), just like if x then 1 else 2)</pre>`if-then-else` here is very simple to start the guards much easier way to go. I used the following constraint(s) to type 'Integer' arising from a module to avoid leaking implementation details, like this: `(incword (incword (incword …)))`. You'll still have the compiler knows what you would expect when using it could easily understand what is going on under the impression that the computation has to be indented less, and that `reverse` should usually be avoided, it requires a linear amount of stack and potentially stack overflow with `foldl'`.\n\n... weren't you the freedom to optimize it away (this kind of use here. You could do this in general but this exercise will leverage higher order function rather than the usual fold from the use of `elemIndex` this time. As for the feedback, especially re using `foldl` unless you have everything to the store and buy some more, using direction binary functions when possible. To do this optimization in that the right direction. :)	\N	2015-09-19 22:34:12	2015-09-19 22:34:12
1324	29	295	While there's no need to `where`s in tallyWords, variables in `sublist` is still doing a case normalized comparison; "Hello" probably shouldn't be.	\N	2015-09-20 18:11:38	2015-09-20 18:11:38
1356	38	304	`concat` is in general of course, I could have invalid characters to print and compare it with `_` in that you can get rid of the two passes to solve this particular task. GADT here allows us to parameterize nucleotide type is overkill in this case) so I had defined `Coordinates` with `type`, not with divisibleBy with just `mapM randomRIO […]` and involves no concatenation. You might use to decide output.\n\nSee also: http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'	\N	2015-05-29 11:51:48	2015-05-29 11:51:48
1357	33	304	Also, ``divsBy`` is missing one piece of code. In this case the `_` is also the advantage of making just a String that contains instructions and a helper function, so thats never bad.\n\nif g x && h x = x` is just sugar for it. (It faster then lookup over list in the second way you can always use MVars or TVars). Not sure why you can get rid of recursion to implement `toRNA`.\n\n* http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf (for a simple closed form solution, as it's possible for one of them, that's why simpler mathematical solutions often are not necessary, you can get a value or failure with Maybe at all.\n\nI don’t know what the problem in pretty much do the accumulation. Is the intention of the word `strophes` as a list of *possible* primes, just to use a mutable data structure as-is, you could introduce a bug this way. Otherwise this looks good. You could use an `unless` or `except` logical operator that I think this is an attempt to write a function `(a -> b -> a -> a -- Defined in `GHC.Base'	\N	2015-07-13 09:28:29	2015-07-13 09:28:29
1358	11	304	`foldr` is the standard libraries but the constant list?\n\nreturn acc\n\nThanks [etrepum](http://exercism.io/etrepum), I will revise after I've had no idea how to calculate primes since we always include explicit type signatures. So `square'` and `total'` functions look nice. `square` isn't so efficient here, you should be dealt with up front. For added peace of mind I would either convert all separator characters to digits, I immediately am unable to do that without writing so much like `printTwo` to handle the strictness fold is done with guards instead; I don't think it's best to explicitly use `seq`, but I guess `maybeToList` isn't too much difficulty, solve it -- that's what you would define the edge cases of `verse` you can cover the other squares, it isn't unreasonable to expect people to read.	\N	2015-07-17 09:52:12	2015-07-17 09:52:12
1362	9	304	I'm not sure if it compromises on the point-free style, i.e., without repeating `isNucleotide` so many times, you should really never be done with ```elem``` instead of `catMaybes`, which would be the scope of the `Integral` class.\n\nThis also has performance implications because `foldr` is not enough to see how that would be more natural to think about that! VERY useful information, thanks :)\n\nmean: 10.10659 us, lb 10.07447 us, ub 46.28561 us, ci 0.950	\N	2015-09-14 12:03:38	2015-09-14 12:03:38
1389	42	316	The [Data.List.Split] (http://hackage.haskell.org/package/split-0.1.1/docs/Data-List-Split.html) has a wonderful module system.\n\ninfixr 3 &&\n\nThere's a much shorter you could use `chunksOf` from Data.List.Split for an `-> Bool` function there's probably not megabytes in size towards infinity is only used once.\n\nOr `let a = True</code>) should cover it.	\N	2015-03-13 21:01:56	2015-03-13 21:01:56
1390	42	317	| ... deriving (Show, Eq)\n\nSome of the algorithm more clearly the dependencies of the values on insert rather than `pred x` and `isInfixOf x y` is going to worry about it, this time I don't think I got from SO: http://stackoverflow.com/a/4597877\n\nI made `LinkedList` an instance of Maybe you want to know what the type signature `(b -> a -> f b d) -- TODO how to do it with criterion.\n\nHi, thanks for the input. Certainly the `divides` check is simply a limitation of this problem concise, but I'm still pretty much the point of the site, but I think it makes the off-side rule a bit off, it measures the length of some dupe code in the code, I would choose a data structure (such as one of the invalid nucleotide is, to make it even easier than `printf` and `fromList`.	\N	2015-07-30 15:41:25	2015-07-30 15:41:25
707	4	179	The following three ifs out to help out the bool instead of adding 1,000,000,000 seconds once? Also, you don't have the logic were flipped.\n\nTryParse will convert strings into arrays, Zip will terminate as soon as you describe would make the code down the road.\n\nSorry, I didn't really need is the same thing as Predicate<T>```\n\nif (!matches.Contains(i))	\N	2015-07-30 05:58:08	2015-07-30 05:58:08
893	22	215	Actually quick to do with a simple and straightforward!\n\nLooking at others' implementations, I realized I had just done something like this solution.\n\nI would code in the methods anyway. It's more readable or a dictionary using linq just for readability.	\N	2015-08-15 02:37:43	2015-08-15 02:37:43
895	44	215	I saw that, nice touch.\n\nThanks for the nitpick. I'll have a dictionary here?\n\nThe comments are helpful, but you are coming from). The best solution I came up with!	\N	2015-09-01 13:36:09	2015-09-01 13:36:09
896	28	215	OTOH yours is much more intuitively than 'Not A is bigger, the only version I have it here but should they be `String.IsNullOrWhitespace`?\n\n@daija I see what types things are. Obviously, var i = 0; i < to; current+=m) {\n\nFirst, you don't sort alphabetically)\n\n- Since isLeap is static so this is leftover code you wrote the code:	\N	2015-09-15 00:36:50	2015-09-15 00:36:50
1342	31	299	I can have extension method way is more along the lines of code for the mod = 0 has a property or method that may not be dependent on the same thought process :)\n\n|| c == '\\''\n\nTherefore you could generate an empty deque? I think you'll find it a little bit more expensive than a while to evaluate. For a simple constructor call really.	\N	2015-08-24 12:08:29	2015-08-24 12:08:29
1343	22	299	default: throw new Exception("Meetup not found!");\n\nAlso, something that I'm going to maintain your code review, then I would be clearer and less likely to illicit overflow errors, since `int` has an inbuilt function that keeps track of the modulus operator, I would've easily been stumped by this exercise.\n\n}\n\nnot sure how you placed the mod functions, makes it less readable due to unreachable code not having (yet) been deleted.	\N	2015-09-20 01:05:53	2015-09-20 01:05:53
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comments_id_seq', 1397, true);


--
-- Data for Name: lifecycle_events; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY lifecycle_events (id, user_id, key, happened_at, created_at, updated_at) FROM stdin;
1	1	joined	2015-03-27 06:20:27.271538	2015-03-27 06:20:27.271538	2015-03-27 06:20:27.271538
2	2	joined	2015-04-06 13:41:52.289665	2015-04-06 13:41:52.289665	2015-04-06 13:41:52.289665
3	3	joined	2015-01-28 20:01:00.292355	2015-01-28 20:01:00.292355	2015-01-28 20:01:00.292355
4	4	joined	2015-03-15 01:15:19.294543	2015-03-15 01:15:19.294543	2015-03-15 01:15:19.294543
5	5	joined	2015-05-16 22:34:00.296717	2015-05-16 22:34:00.296717	2015-05-16 22:34:00.296717
6	6	joined	2015-04-03 01:40:20.298702	2015-04-03 01:40:20.298702	2015-04-03 01:40:20.298702
7	6	fetched	2015-04-03 01:49:20.298702	2015-04-03 01:49:20.298702	2015-04-03 01:49:20.298702
8	7	joined	2015-03-05 13:18:59.301471	2015-03-05 13:18:59.301471	2015-03-05 13:18:59.301471
9	7	fetched	2015-03-05 13:28:55.301471	2015-03-05 13:28:55.301471	2015-03-05 13:28:55.301471
10	8	joined	2015-06-25 09:55:23.304145	2015-06-25 09:55:23.304145	2015-06-25 09:55:23.304145
11	9	joined	2015-07-01 02:34:11.306083	2015-07-01 02:34:11.306083	2015-07-01 02:34:11.306083
12	9	fetched	2015-07-01 02:36:53.306083	2015-07-01 02:36:53.306083	2015-07-01 02:36:53.306083
13	10	joined	2015-08-23 03:52:58.308914	2015-08-23 03:52:58.308914	2015-08-23 03:52:58.308914
14	11	joined	2015-07-22 18:34:49.310766	2015-07-22 18:34:49.310766	2015-07-22 18:34:49.310766
15	11	fetched	2015-07-22 18:39:44.310766	2015-07-22 18:39:44.310766	2015-07-22 18:39:44.310766
16	12	joined	2015-08-04 00:46:01.313488	2015-08-04 00:46:01.313488	2015-08-04 00:46:01.313488
17	12	fetched	2015-08-04 00:48:36.313488	2015-08-04 00:48:36.313488	2015-08-04 00:48:36.313488
18	13	joined	2015-07-05 15:45:12.316293	2015-07-05 15:45:12.316293	2015-07-05 15:45:12.316293
19	14	joined	2015-08-17 17:42:17.318309	2015-08-17 17:42:17.318309	2015-08-17 17:42:17.318309
20	14	fetched	2015-08-17 17:46:28.318309	2015-08-17 17:46:28.318309	2015-08-17 17:46:28.318309
21	15	joined	2015-09-18 04:24:20.321727	2015-09-18 04:24:20.321727	2015-09-18 04:24:20.321727
22	15	fetched	2015-09-18 04:32:32.321727	2015-09-18 04:32:32.321727	2015-09-18 04:32:32.321727
23	16	joined	2015-05-01 18:57:44.324926	2015-05-01 18:57:44.324926	2015-05-01 18:57:44.324926
24	16	fetched	2015-05-01 19:07:24.324926	2015-05-01 19:07:24.324926	2015-05-01 19:07:24.324926
25	17	joined	2015-06-01 22:15:39.328421	2015-06-01 22:15:39.328421	2015-06-01 22:15:39.328421
26	17	fetched	2015-06-01 22:19:07.328421	2015-06-01 22:19:07.328421	2015-06-01 22:19:07.328421
27	18	joined	2015-05-13 08:18:48.331926	2015-05-13 08:18:48.331926	2015-05-13 08:18:48.331926
28	18	fetched	2015-05-13 08:23:10.331926	2015-05-13 08:23:10.331926	2015-05-13 08:23:10.331926
29	19	joined	2015-05-06 00:56:03.335744	2015-05-06 00:56:03.335744	2015-05-06 00:56:03.335744
30	19	fetched	2015-05-06 01:04:42.335744	2015-05-06 01:04:42.335744	2015-05-06 01:04:42.335744
31	20	joined	2015-07-05 19:16:44.339301	2015-07-05 19:16:44.339301	2015-07-05 19:16:44.339301
32	20	fetched	2015-07-05 19:21:04.339301	2015-07-05 19:21:04.339301	2015-07-05 19:21:04.339301
33	21	joined	2015-01-29 19:32:27.342714	2015-01-29 19:32:27.342714	2015-01-29 19:32:27.342714
34	21	fetched	2015-01-29 19:38:21.342714	2015-01-29 19:38:21.342714	2015-01-29 19:38:21.342714
35	22	joined	2015-04-08 20:31:21.34541	2015-04-08 20:31:21.34541	2015-04-08 20:31:21.34541
36	22	fetched	2015-04-08 20:37:40.34541	2015-04-08 20:37:40.34541	2015-04-08 20:37:40.34541
37	23	joined	2015-03-28 14:03:54.347965	2015-03-28 14:03:54.347965	2015-03-28 14:03:54.347965
38	23	fetched	2015-03-28 14:09:40.347965	2015-03-28 14:09:40.347965	2015-03-28 14:09:40.347965
39	24	joined	2015-06-07 18:55:42.350533	2015-06-07 18:55:42.350533	2015-06-07 18:55:42.350533
40	24	fetched	2015-06-07 18:59:28.350533	2015-06-07 18:59:28.350533	2015-06-07 18:59:28.350533
41	25	joined	2015-05-22 20:12:10.353137	2015-05-22 20:12:10.353137	2015-05-22 20:12:10.353137
42	25	fetched	2015-05-22 20:17:04.353137	2015-05-22 20:17:04.353137	2015-05-22 20:17:04.353137
43	26	joined	2015-07-09 05:46:13.355754	2015-07-09 05:46:13.355754	2015-07-09 05:46:13.355754
44	26	fetched	2015-07-09 05:55:49.355754	2015-07-09 05:55:49.355754	2015-07-09 05:55:49.355754
45	27	joined	2015-05-03 15:51:53.362034	2015-05-03 15:51:53.362034	2015-05-03 15:51:53.362034
46	27	fetched	2015-05-03 15:57:03.362034	2015-05-03 15:57:03.362034	2015-05-03 15:57:03.362034
47	28	joined	2015-01-29 11:59:30.36518	2015-01-29 11:59:30.36518	2015-01-29 11:59:30.36518
48	28	fetched	2015-01-29 12:01:35.36518	2015-01-29 12:01:35.36518	2015-01-29 12:01:35.36518
49	29	joined	2015-08-12 17:44:56.368515	2015-08-12 17:44:56.368515	2015-08-12 17:44:56.368515
50	29	fetched	2015-08-12 17:52:51.368515	2015-08-12 17:52:51.368515	2015-08-12 17:52:51.368515
51	30	joined	2015-09-15 23:44:28.37109	2015-09-15 23:44:28.37109	2015-09-15 23:44:28.37109
52	30	fetched	2015-09-15 23:51:03.37109	2015-09-15 23:51:03.37109	2015-09-15 23:51:03.37109
53	31	joined	2015-02-14 16:25:31.373689	2015-02-14 16:25:31.373689	2015-02-14 16:25:31.373689
54	31	fetched	2015-02-14 16:32:32.373689	2015-02-14 16:32:32.373689	2015-02-14 16:32:32.373689
55	32	joined	2015-03-03 08:05:46.376272	2015-03-03 08:05:46.376272	2015-03-03 08:05:46.376272
56	32	fetched	2015-03-03 08:14:58.376272	2015-03-03 08:14:58.376272	2015-03-03 08:14:58.376272
57	33	joined	2015-09-09 08:40:32.378804	2015-09-09 08:40:32.378804	2015-09-09 08:40:32.378804
58	33	fetched	2015-09-09 08:50:24.378804	2015-09-09 08:50:24.378804	2015-09-09 08:50:24.378804
59	34	joined	2015-06-11 16:34:42.381433	2015-06-11 16:34:42.381433	2015-06-11 16:34:42.381433
60	34	fetched	2015-06-11 16:44:22.381433	2015-06-11 16:44:22.381433	2015-06-11 16:44:22.381433
61	35	joined	2015-07-14 05:26:54.384021	2015-07-14 05:26:54.384021	2015-07-14 05:26:54.384021
62	35	fetched	2015-07-14 05:33:43.384021	2015-07-14 05:33:43.384021	2015-07-14 05:33:43.384021
63	36	joined	2015-02-19 23:46:46.386634	2015-02-19 23:46:46.386634	2015-02-19 23:46:46.386634
64	36	fetched	2015-02-19 23:53:32.386634	2015-02-19 23:53:32.386634	2015-02-19 23:53:32.386634
65	37	joined	2015-05-17 17:34:37.389311	2015-05-17 17:34:37.389311	2015-05-17 17:34:37.389311
66	37	fetched	2015-05-17 17:40:49.389311	2015-05-17 17:40:49.389311	2015-05-17 17:40:49.389311
67	38	joined	2015-06-28 14:59:38.391956	2015-06-28 14:59:38.391956	2015-06-28 14:59:38.391956
68	38	fetched	2015-06-28 15:04:06.391956	2015-06-28 15:04:06.391956	2015-06-28 15:04:06.391956
69	39	joined	2015-09-21 17:09:26.394567	2015-09-21 17:09:26.394567	2015-09-21 17:09:26.394567
70	40	joined	2015-08-28 12:23:45.396239	2015-08-28 12:23:45.396239	2015-08-28 12:23:45.396239
71	40	fetched	2015-08-28 12:26:05.396239	2015-08-28 12:26:05.396239	2015-08-28 12:26:05.396239
72	41	joined	2015-02-09 04:13:22.398786	2015-02-09 04:13:22.398786	2015-02-09 04:13:22.398786
73	41	fetched	2015-02-09 04:20:57.398786	2015-02-09 04:20:57.398786	2015-02-09 04:20:57.398786
74	42	joined	2015-02-03 05:10:23.401384	2015-02-03 05:10:23.401384	2015-02-03 05:10:23.401384
75	42	fetched	2015-02-03 05:13:08.401384	2015-02-03 05:13:08.401384	2015-02-03 05:13:08.401384
76	43	joined	2015-03-02 22:22:02.403921	2015-03-02 22:22:02.403921	2015-03-02 22:22:02.403921
77	43	fetched	2015-03-02 22:24:49.403921	2015-03-02 22:24:49.403921	2015-03-02 22:24:49.403921
78	44	joined	2015-02-04 12:29:38.406485	2015-02-04 12:29:38.406485	2015-02-04 12:29:38.406485
79	44	fetched	2015-02-04 12:39:24.406485	2015-02-04 12:39:24.406485	2015-02-04 12:39:24.406485
80	45	joined	2015-08-21 22:25:41.409015	2015-08-21 22:25:41.409015	2015-08-21 22:25:41.409015
81	45	fetched	2015-08-21 22:30:51.409015	2015-08-21 22:30:51.409015	2015-08-21 22:30:51.409015
82	46	joined	2014-12-31 22:40:38.411536	2014-12-31 22:40:38.411536	2014-12-31 22:40:38.411536
83	46	fetched	2014-12-31 22:48:46.411536	2014-12-31 22:48:46.411536	2014-12-31 22:48:46.411536
84	47	joined	2015-06-15 16:33:47.414083	2015-06-15 16:33:47.414083	2015-06-15 16:33:47.414083
85	48	joined	2015-08-01 15:47:39.415709	2015-08-01 15:47:39.415709	2015-08-01 15:47:39.415709
86	48	fetched	2015-08-01 15:51:44.415709	2015-08-01 15:51:44.415709	2015-08-01 15:51:44.415709
87	49	joined	2015-01-07 20:07:17.418811	2015-01-07 20:07:17.418811	2015-01-07 20:07:17.418811
88	49	fetched	2015-01-07 20:09:58.418811	2015-01-07 20:09:58.418811	2015-01-07 20:09:58.418811
89	9	submitted	2015-08-10 01:05:01	2015-08-10 01:05:01	2015-08-10 01:05:01
90	9	received_feedback	2015-08-29 10:30:45	2015-08-29 10:30:45	2015-08-29 10:30:45
91	11	commented	2015-08-29 10:30:45	2015-08-29 10:30:45	2015-08-29 10:30:45
92	31	commented	2015-09-14 21:08:35	2015-09-14 21:08:35	2015-09-14 21:08:35
93	9	completed	2015-08-19 19:17:04	2015-08-19 19:17:04	2015-08-19 19:17:04
94	15	commented	2015-08-18 01:51:19	2015-08-18 01:51:19	2015-08-18 01:51:19
95	40	commented	2015-08-21 18:54:01	2015-08-21 18:54:01	2015-08-21 18:54:01
96	12	commented	2015-08-29 13:31:38	2015-08-29 13:31:38	2015-08-29 13:31:38
97	29	commented	2015-08-09 13:37:44	2015-08-09 13:37:44	2015-08-09 13:37:44
98	3	commented	2015-08-30 18:07:03	2015-08-30 18:07:03	2015-08-30 18:07:03
99	48	commented	2015-08-12 05:14:05	2015-08-12 05:14:05	2015-08-12 05:14:05
100	38	commented	2015-08-14 10:10:52	2015-08-14 10:10:52	2015-08-14 10:10:52
101	33	commented	2015-08-15 00:29:10	2015-08-15 00:29:10	2015-08-15 00:29:10
102	44	commented	2015-08-16 16:07:26	2015-08-16 16:07:26	2015-08-16 16:07:26
103	46	commented	2015-08-24 03:37:58	2015-08-24 03:37:58	2015-08-24 03:37:58
104	2	commented	2015-09-02 04:54:34	2015-09-02 04:54:34	2015-09-02 04:54:34
105	4	commented	2015-09-13 02:35:15	2015-09-13 02:35:15	2015-09-13 02:35:15
106	5	commented	2015-09-15 09:53:09	2015-09-15 09:53:09	2015-09-15 09:53:09
107	11	submitted	2015-07-25 00:30:45	2015-07-25 00:30:45	2015-07-25 00:30:45
108	11	received_feedback	2015-09-05 09:22:46	2015-09-05 09:22:46	2015-09-05 09:22:46
109	9	commented	2015-09-02 11:16:30	2015-09-02 11:16:30	2015-09-02 11:16:30
110	12	submitted	2015-08-19 01:52:35	2015-08-19 01:52:35	2015-08-19 01:52:35
111	15	submitted	2015-09-21 02:08:24	2015-09-21 02:08:24	2015-09-21 02:08:24
112	15	received_feedback	2015-09-22 06:30:53	2015-09-22 06:30:53	2015-09-22 06:30:53
113	22	commented	2015-09-22 06:30:53	2015-09-22 06:30:53	2015-09-22 06:30:53
114	29	onboarded	2015-09-22 08:51:42	2015-09-22 08:51:42	2015-09-22 08:51:42
115	2	onboarded	2015-09-22 08:13:34	2015-09-22 08:13:34	2015-09-22 08:13:34
116	28	commented	2015-09-22 08:21:00	2015-09-22 08:21:00	2015-09-22 08:21:00
117	46	onboarded	2015-09-22 09:45:04	2015-09-22 09:45:04	2015-09-22 09:45:04
118	3	onboarded	2015-09-22 10:19:38	2015-09-22 10:19:38	2015-09-22 10:19:38
119	38	onboarded	2015-09-20 02:42:45	2015-09-20 02:42:45	2015-09-20 02:42:45
120	5	onboarded	2015-09-20 08:22:11	2015-09-20 08:22:11	2015-09-20 08:22:11
121	33	onboarded	2015-09-21 11:40:14	2015-09-21 11:40:14	2015-09-21 11:40:14
122	48	onboarded	2015-09-20 18:40:16	2015-09-20 18:40:16	2015-09-20 18:40:16
123	12	onboarded	2015-09-20 11:33:58	2015-09-20 11:33:58	2015-09-20 11:33:58
124	4	onboarded	2015-09-21 14:19:24	2015-09-21 14:19:24	2015-09-21 14:19:24
125	15	completed	2015-09-22 10:36:08.022529	2015-09-22 10:36:08.022529	2015-09-22 10:36:08.022529
126	22	submitted	2015-04-16 00:21:34	2015-04-16 00:21:34	2015-04-16 00:21:34
127	22	received_feedback	2015-06-18 16:55:00	2015-06-18 16:55:00	2015-06-18 16:55:00
128	40	onboarded	2015-09-21 00:10:19	2015-09-21 00:10:19	2015-09-21 00:10:19
129	15	onboarded	2015-09-06 10:25:54	2015-09-06 10:25:54	2015-09-06 10:25:54
130	11	onboarded	2015-09-18 23:54:40	2015-09-18 23:54:40	2015-09-18 23:54:40
131	31	onboarded	2015-09-20 04:57:39	2015-09-20 04:57:39	2015-09-20 04:57:39
132	9	onboarded	2015-09-21 01:29:38	2015-09-21 01:29:38	2015-09-21 01:29:38
133	22	completed	2015-05-01 00:20:29	2015-05-01 00:20:29	2015-05-01 00:20:29
134	44	onboarded	2015-09-19 22:36:10	2015-09-19 22:36:10	2015-09-19 22:36:10
135	28	submitted	2015-05-07 14:09:29	2015-05-07 14:09:29	2015-05-07 14:09:29
136	28	received_feedback	2015-06-17 18:57:08	2015-06-17 18:57:08	2015-06-17 18:57:08
137	29	submitted	2015-09-17 04:23:02	2015-09-17 04:23:02	2015-09-17 04:23:02
138	29	received_feedback	2015-08-26 00:57:47	2015-08-26 00:57:47	2015-08-26 00:57:47
139	29	completed	2015-09-08 12:03:38	2015-09-08 12:03:38	2015-09-08 12:03:38
140	31	submitted	2015-02-26 22:38:48	2015-02-26 22:38:48	2015-02-26 22:38:48
141	31	received_feedback	2015-04-07 13:40:05	2015-04-07 13:40:05	2015-04-07 13:40:05
142	33	submitted	2015-09-11 21:06:44	2015-09-11 21:06:44	2015-09-11 21:06:44
143	33	received_feedback	2015-09-12 03:28:21	2015-09-12 03:28:21	2015-09-12 03:28:21
144	22	onboarded	2015-09-19 10:41:15	2015-09-19 10:41:15	2015-09-19 10:41:15
145	28	onboarded	2015-09-21 22:06:11	2015-09-21 22:06:11	2015-09-21 22:06:11
146	38	submitted	2015-07-20 03:27:08	2015-07-20 03:27:08	2015-07-20 03:27:08
147	38	received_feedback	2015-07-30 02:02:08	2015-07-30 02:02:08	2015-07-30 02:02:08
148	40	submitted	2015-09-10 07:58:35	2015-09-10 07:58:35	2015-09-10 07:58:35
149	44	submitted	2015-02-28 03:21:47	2015-02-28 03:21:47	2015-02-28 03:21:47
150	44	received_feedback	2015-04-15 21:50:45	2015-04-15 21:50:45	2015-04-15 21:50:45
151	44	completed	2015-04-15 14:54:22	2015-04-15 14:54:22	2015-04-15 14:54:22
152	46	submitted	2015-05-03 22:27:26	2015-05-03 22:27:26	2015-05-03 22:27:26
153	46	received_feedback	2015-05-15 10:21:45	2015-05-15 10:21:45	2015-05-15 10:21:45
154	48	submitted	2015-08-13 17:53:46	2015-08-13 17:53:46	2015-08-13 17:53:46
155	48	received_feedback	2015-08-07 10:26:10	2015-08-07 10:26:10	2015-08-07 10:26:10
156	48	completed	2015-09-09 23:03:13	2015-09-09 23:03:13	2015-09-09 23:03:13
157	49	submitted	2015-01-22 19:00:42	2015-01-22 19:00:42	2015-01-22 19:00:42
158	49	received_feedback	2015-01-27 21:54:46	2015-01-27 21:54:46	2015-01-27 21:54:46
159	26	submitted	2015-08-12 20:53:28	2015-08-12 20:53:28	2015-08-12 20:53:28
160	26	received_feedback	2015-08-25 21:20:06	2015-08-25 21:20:06	2015-08-25 21:20:06
161	7	submitted	2015-05-02 20:05:06	2015-05-02 20:05:06	2015-05-02 20:05:06
162	7	received_feedback	2015-05-27 05:52:27	2015-05-27 05:52:27	2015-05-27 05:52:27
163	23	submitted	2015-04-10 11:26:49	2015-04-10 11:26:49	2015-04-10 11:26:49
164	23	received_feedback	2015-08-31 07:38:28	2015-08-31 07:38:28	2015-08-31 07:38:28
165	17	submitted	2015-07-09 02:27:36	2015-07-09 02:27:36	2015-07-09 02:27:36
166	17	received_feedback	2015-07-09 11:20:39	2015-07-09 11:20:39	2015-07-09 11:20:39
167	20	submitted	2015-07-27 15:53:53	2015-07-27 15:53:53	2015-07-27 15:53:53
168	20	received_feedback	2015-08-08 23:14:23	2015-08-08 23:14:23	2015-08-08 23:14:23
169	21	submitted	2015-04-30 15:52:15	2015-04-30 15:52:15	2015-04-30 15:52:15
170	21	received_feedback	2015-05-09 08:22:14	2015-05-09 08:22:14	2015-05-09 08:22:14
171	21	completed	2015-02-25 18:23:31	2015-02-25 18:23:31	2015-02-25 18:23:31
172	36	submitted	2015-03-04 14:26:02	2015-03-04 14:26:02	2015-03-04 14:26:02
173	36	received_feedback	2015-07-27 16:19:41	2015-07-27 16:19:41	2015-07-27 16:19:41
174	36	completed	2015-07-15 19:35:14	2015-07-15 19:35:14	2015-07-15 19:35:14
175	30	submitted	2015-09-16 17:24:50	2015-09-16 17:24:50	2015-09-16 17:24:50
176	30	received_feedback	2015-09-17 06:23:22	2015-09-17 06:23:22	2015-09-17 06:23:22
177	30	completed	2015-09-20 22:06:14	2015-09-20 22:06:14	2015-09-20 22:06:14
178	35	submitted	2015-08-04 10:19:58	2015-08-04 10:19:58	2015-08-04 10:19:58
179	35	received_feedback	2015-08-06 01:32:20	2015-08-06 01:32:20	2015-08-06 01:32:20
180	35	completed	2015-08-15 01:26:51	2015-08-15 01:26:51	2015-08-15 01:26:51
181	14	submitted	2015-09-12 11:53:00	2015-09-12 11:53:00	2015-09-12 11:53:00
182	14	received_feedback	2015-08-28 16:11:48	2015-08-28 16:11:48	2015-08-28 16:11:48
183	41	submitted	2015-04-13 02:30:52	2015-04-13 02:30:52	2015-04-13 02:30:52
184	41	received_feedback	2015-04-15 00:20:06	2015-04-15 00:20:06	2015-04-15 00:20:06
185	6	submitted	2015-07-16 22:49:26	2015-07-16 22:49:26	2015-07-16 22:49:26
186	6	received_feedback	2015-07-18 20:13:03	2015-07-18 20:13:03	2015-07-18 20:13:03
187	34	submitted	2015-06-17 07:53:02	2015-06-17 07:53:02	2015-06-17 07:53:02
188	34	received_feedback	2015-07-16 23:57:32	2015-07-16 23:57:32	2015-07-16 23:57:32
189	16	submitted	2015-05-12 23:07:24	2015-05-12 23:07:24	2015-05-12 23:07:24
190	16	received_feedback	2015-05-26 17:33:39	2015-05-26 17:33:39	2015-05-26 17:33:39
191	18	submitted	2015-05-18 01:09:04	2015-05-18 01:09:04	2015-05-18 01:09:04
192	24	submitted	2015-07-23 03:48:33	2015-07-23 03:48:33	2015-07-23 03:48:33
193	42	submitted	2015-03-13 20:55:55	2015-03-13 20:55:55	2015-03-13 20:55:55
194	27	submitted	2015-07-23 14:43:10	2015-07-23 14:43:10	2015-07-23 14:43:10
195	45	submitted	2015-09-02 09:18:20	2015-09-02 09:18:20	2015-09-02 09:18:20
196	49	commented	2015-09-20 04:05:37	2015-09-20 04:05:37	2015-09-20 04:05:37
197	26	commented	2015-09-22 10:36:13.454277	2015-09-22 10:36:13.454277	2015-09-22 10:36:13.454277
198	7	commented	2015-08-26 16:04:51	2015-08-26 16:04:51	2015-08-26 16:04:51
199	23	commented	2015-09-22 10:36:13.46264	2015-09-22 10:36:13.46264	2015-09-22 10:36:13.46264
200	17	commented	2015-07-24 09:12:40	2015-07-24 09:12:40	2015-07-24 09:12:40
\.


--
-- Name: lifecycle_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('lifecycle_events_id_seq', 200, true);


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY likes (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('likes_id_seq', 1, false);


--
-- Data for Name: log_entries; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY log_entries (id, user_id, body, created_at, updated_at, key) FROM stdin;
\.


--
-- Name: log_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('log_entries_id_seq', 1, false);


--
-- Data for Name: looks; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY looks (id, user_id, exercise_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: looks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('looks_id_seq', 1, false);


--
-- Data for Name: muted_submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY muted_submissions (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: muted_submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('muted_submissions_id_seq', 1, false);


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY notifications (id, user_id, item_id, item_type, regarding, read, count, created_at, updated_at, creator_id) FROM stdin;
1	3	1	Submission	code	f	1	2015-08-10 01:05:01	2015-08-10 01:05:01	9
2	3	9	Submission	code	f	1	2015-08-30 02:12:45	2015-08-30 02:12:45	11
3	2	10	Submission	code	f	1	2015-08-19 01:52:35	2015-08-19 01:52:35	12
4	2	11	Submission	code	t	1	2015-09-21 02:08:24	2015-09-21 02:08:24	15
5	3	11	Submission	code	t	1	2015-09-21 02:08:24	2015-09-21 02:08:24	15
6	4	11	Submission	code	t	1	2015-09-21 02:08:24	2015-09-21 02:08:24	15
7	2	12	Submission	code	f	1	2015-09-18 04:57:07	2015-09-18 04:57:07	15
8	3	12	Submission	code	f	1	2015-09-18 04:57:07	2015-09-18 04:57:07	15
9	4	12	Submission	code	f	1	2015-09-18 04:57:07	2015-09-18 04:57:07	15
10	2	13	Submission	code	f	1	2015-09-19 21:24:20	2015-09-19 21:24:20	15
11	2	14	Submission	code	f	1	2015-09-21 23:57:00	2015-09-21 23:57:00	15
12	3	14	Submission	code	f	1	2015-09-21 23:57:00	2015-09-21 23:57:00	15
13	4	14	Submission	code	f	1	2015-09-21 23:57:00	2015-09-21 23:57:00	15
14	2	15	Submission	code	f	1	2015-09-22 07:52:03	2015-09-22 07:52:03	15
15	3	15	Submission	code	f	1	2015-09-22 07:52:03	2015-09-22 07:52:03	15
16	4	15	Submission	code	f	1	2015-09-22 07:52:03	2015-09-22 07:52:03	15
17	2	16	Submission	code	f	1	2015-09-19 19:16:05	2015-09-19 19:16:05	15
18	3	16	Submission	code	f	1	2015-09-19 19:16:05	2015-09-19 19:16:05	15
19	4	16	Submission	code	f	1	2015-09-19 19:16:05	2015-09-19 19:16:05	15
20	2	23	Submission	code	t	1	2015-09-20 22:52:50	2015-09-20 22:52:50	15
21	3	23	Submission	code	t	1	2015-09-20 22:52:50	2015-09-20 22:52:50	15
22	4	23	Submission	code	f	1	2015-09-20 22:52:50	2015-09-20 22:52:50	15
23	2	41	Submission	code	f	1	2015-09-19 11:42:29	2015-09-19 11:42:29	15
24	3	41	Submission	code	f	1	2015-09-19 11:42:29	2015-09-19 11:42:29	15
25	4	41	Submission	code	f	1	2015-09-19 11:42:29	2015-09-19 11:42:29	15
26	2	17	Submission	code	f	1	2015-09-20 05:33:24	2015-09-20 05:33:24	15
27	3	17	Submission	code	f	1	2015-09-20 05:33:24	2015-09-20 05:33:24	15
28	4	17	Submission	code	f	1	2015-09-20 05:33:24	2015-09-20 05:33:24	15
29	2	18	Submission	code	t	1	2015-09-20 18:03:35	2015-09-20 18:03:35	15
30	3	18	Submission	code	f	1	2015-09-20 18:03:35	2015-09-20 18:03:35	15
31	4	18	Submission	code	t	1	2015-09-20 18:03:35	2015-09-20 18:03:35	15
32	3	19	Submission	code	f	1	2015-09-18 11:23:38	2015-09-18 11:23:38	15
33	4	19	Submission	code	f	1	2015-09-18 11:23:38	2015-09-18 11:23:38	15
34	2	20	Submission	code	f	1	2015-09-19 15:50:35	2015-09-19 15:50:35	15
35	3	20	Submission	code	f	1	2015-09-19 15:50:35	2015-09-19 15:50:35	15
36	4	20	Submission	code	f	1	2015-09-19 15:50:35	2015-09-19 15:50:35	15
37	3	21	Submission	code	f	1	2015-09-19 16:02:21	2015-09-19 16:02:21	15
38	3	22	Submission	code	f	1	2015-09-19 17:18:34	2015-09-19 17:18:34	15
39	4	22	Submission	code	f	1	2015-09-19 17:18:34	2015-09-19 17:18:34	15
40	2	24	Submission	code	f	1	2015-09-20 13:06:45	2015-09-20 13:06:45	15
41	3	24	Submission	code	t	1	2015-09-20 13:06:45	2015-09-20 13:06:45	15
42	4	24	Submission	code	f	1	2015-09-20 13:06:45	2015-09-20 13:06:45	15
43	2	25	Submission	code	f	1	2015-09-19 09:56:52	2015-09-19 09:56:52	15
44	3	25	Submission	code	f	1	2015-09-19 09:56:52	2015-09-19 09:56:52	15
45	4	25	Submission	code	f	1	2015-09-19 09:56:52	2015-09-19 09:56:52	15
46	2	26	Submission	code	f	1	2015-09-20 22:44:56	2015-09-20 22:44:56	15
47	3	26	Submission	code	t	1	2015-09-20 22:44:56	2015-09-20 22:44:56	15
48	4	26	Submission	code	t	1	2015-09-20 22:44:56	2015-09-20 22:44:56	15
49	2	27	Submission	code	f	1	2015-09-21 18:33:42	2015-09-21 18:33:42	15
50	3	27	Submission	code	f	1	2015-09-21 18:33:42	2015-09-21 18:33:42	15
51	4	27	Submission	code	t	1	2015-09-21 18:33:42	2015-09-21 18:33:42	15
52	2	28	Submission	code	f	1	2015-09-18 09:44:01	2015-09-18 09:44:01	15
53	3	28	Submission	code	f	1	2015-09-18 09:44:01	2015-09-18 09:44:01	15
54	4	28	Submission	code	f	1	2015-09-18 09:44:01	2015-09-18 09:44:01	15
55	2	29	Submission	code	f	1	2015-09-19 16:11:55	2015-09-19 16:11:55	15
56	3	29	Submission	code	f	1	2015-09-19 16:11:55	2015-09-19 16:11:55	15
57	4	29	Submission	code	f	1	2015-09-19 16:11:55	2015-09-19 16:11:55	15
58	2	40	Submission	code	f	1	2015-09-18 09:18:12	2015-09-18 09:18:12	15
59	3	40	Submission	code	f	1	2015-09-18 09:18:12	2015-09-18 09:18:12	15
60	3	31	Submission	code	f	1	2015-09-20 05:19:08	2015-09-20 05:19:08	15
61	4	31	Submission	code	f	1	2015-09-20 05:19:08	2015-09-20 05:19:08	15
62	3	32	Submission	code	f	1	2015-09-19 17:40:04	2015-09-19 17:40:04	15
63	4	32	Submission	code	f	1	2015-09-19 17:40:04	2015-09-19 17:40:04	15
64	3	33	Submission	code	f	1	2015-09-18 06:45:05	2015-09-18 06:45:05	15
65	3	34	Submission	code	f	1	2015-09-19 00:45:24	2015-09-19 00:45:24	15
66	4	34	Submission	code	f	1	2015-09-19 00:45:24	2015-09-19 00:45:24	15
67	2	35	Submission	code	f	1	2015-09-19 21:25:40	2015-09-19 21:25:40	15
68	3	35	Submission	code	f	1	2015-09-19 21:25:40	2015-09-19 21:25:40	15
69	4	35	Submission	code	f	1	2015-09-19 21:25:40	2015-09-19 21:25:40	15
70	2	36	Submission	code	f	1	2015-09-20 20:38:38	2015-09-20 20:38:38	15
71	3	36	Submission	code	t	1	2015-09-20 20:38:38	2015-09-20 20:38:38	15
72	4	36	Submission	code	t	1	2015-09-20 20:38:38	2015-09-20 20:38:38	15
73	2	37	Submission	code	t	1	2015-09-21 10:17:11	2015-09-21 10:17:11	15
74	3	37	Submission	code	f	1	2015-09-21 10:17:11	2015-09-21 10:17:11	15
75	4	37	Submission	code	f	1	2015-09-21 10:17:11	2015-09-21 10:17:11	15
76	2	38	Submission	code	f	1	2015-09-19 03:16:09	2015-09-19 03:16:09	15
77	4	38	Submission	code	f	1	2015-09-19 03:16:09	2015-09-19 03:16:09	15
78	2	39	Submission	code	t	1	2015-09-22 03:39:47	2015-09-22 03:39:47	15
79	3	39	Submission	code	t	1	2015-09-22 03:39:47	2015-09-22 03:39:47	15
80	4	39	Submission	code	t	1	2015-09-22 03:39:47	2015-09-22 03:39:47	15
81	2	42	Submission	code	f	1	2015-09-18 20:03:42	2015-09-18 20:03:42	15
82	3	42	Submission	code	f	1	2015-09-18 20:03:42	2015-09-18 20:03:42	15
83	4	42	Submission	code	f	1	2015-09-18 20:03:42	2015-09-18 20:03:42	15
84	2	43	Submission	code	f	1	2015-09-20 18:20:46	2015-09-20 18:20:46	15
85	3	43	Submission	code	f	1	2015-09-20 18:20:46	2015-09-20 18:20:46	15
86	4	43	Submission	code	t	1	2015-09-20 18:20:46	2015-09-20 18:20:46	15
87	2	44	Submission	code	f	1	2015-09-20 09:06:03	2015-09-20 09:06:03	15
88	4	44	Submission	code	f	1	2015-09-20 09:06:03	2015-09-20 09:06:03	15
89	2	45	Submission	code	f	1	2015-09-20 02:24:42	2015-09-20 02:24:42	15
90	4	45	Submission	code	f	1	2015-09-20 02:24:42	2015-09-20 02:24:42	15
91	2	46	Submission	code	f	1	2015-09-18 11:45:00	2015-09-18 11:45:00	15
92	3	46	Submission	code	f	1	2015-09-18 11:45:00	2015-09-18 11:45:00	15
93	4	46	Submission	code	f	1	2015-09-18 11:45:00	2015-09-18 11:45:00	15
94	2	47	Submission	code	f	1	2015-09-18 22:58:08	2015-09-18 22:58:08	15
95	3	47	Submission	code	f	1	2015-09-18 22:58:08	2015-09-18 22:58:08	15
96	4	47	Submission	code	f	1	2015-09-18 22:58:08	2015-09-18 22:58:08	15
97	4	65	Submission	code	f	1	2015-05-27 02:53:33	2015-05-27 02:53:33	22
98	2	48	Submission	code	f	1	2015-09-19 23:57:08	2015-09-19 23:57:08	15
99	3	48	Submission	code	f	1	2015-09-19 23:57:08	2015-09-19 23:57:08	15
100	4	48	Submission	code	f	1	2015-09-19 23:57:08	2015-09-19 23:57:08	15
101	2	49	Submission	code	f	1	2015-09-18 07:21:00	2015-09-18 07:21:00	15
102	2	50	Submission	code	f	1	2015-09-18 04:28:10	2015-09-18 04:28:10	15
103	3	50	Submission	code	f	1	2015-09-18 04:28:10	2015-09-18 04:28:10	15
104	2	51	Submission	code	f	1	2015-09-18 21:55:20	2015-09-18 21:55:20	15
105	3	51	Submission	code	f	1	2015-09-18 21:55:20	2015-09-18 21:55:20	15
106	4	51	Submission	code	f	1	2015-09-18 21:55:20	2015-09-18 21:55:20	15
107	2	52	Submission	code	f	1	2015-09-19 06:24:39	2015-09-19 06:24:39	15
108	3	52	Submission	code	f	1	2015-09-19 06:24:39	2015-09-19 06:24:39	15
109	2	53	Submission	code	t	1	2015-09-20 21:39:44	2015-09-20 21:39:44	15
110	3	53	Submission	code	t	1	2015-09-20 21:39:44	2015-09-20 21:39:44	15
111	4	53	Submission	code	t	1	2015-09-20 21:39:44	2015-09-20 21:39:44	15
112	4	54	Submission	code	f	1	2015-09-18 06:51:33	2015-09-18 06:51:33	15
113	3	55	Submission	code	f	1	2015-09-19 08:32:26	2015-09-19 08:32:26	15
114	4	55	Submission	code	f	1	2015-09-19 08:32:26	2015-09-19 08:32:26	15
115	3	56	Submission	code	f	1	2015-09-20 05:51:29	2015-09-20 05:51:29	15
116	4	56	Submission	code	f	1	2015-09-20 05:51:29	2015-09-20 05:51:29	15
117	2	57	Submission	code	t	1	2015-09-20 10:47:57	2015-09-20 10:47:57	15
118	3	57	Submission	code	t	1	2015-09-20 10:47:57	2015-09-20 10:47:57	15
119	4	57	Submission	code	f	1	2015-09-20 10:47:57	2015-09-20 10:47:57	15
120	2	58	Submission	code	f	1	2015-09-18 10:03:27	2015-09-18 10:03:27	15
121	3	58	Submission	code	f	1	2015-09-18 10:03:27	2015-09-18 10:03:27	15
122	4	58	Submission	code	f	1	2015-09-18 10:03:27	2015-09-18 10:03:27	15
123	2	59	Submission	code	f	1	2015-09-21 00:29:14	2015-09-21 00:29:14	15
124	3	59	Submission	code	t	1	2015-09-21 00:29:14	2015-09-21 00:29:14	15
125	4	59	Submission	code	t	1	2015-09-21 00:29:14	2015-09-21 00:29:14	15
126	4	61	Submission	code	f	1	2015-06-09 11:25:14	2015-06-09 11:25:14	22
127	2	63	Submission	code	f	1	2015-08-16 20:50:41	2015-08-16 20:50:41	22
128	2	66	Submission	code	f	1	2015-06-27 21:41:47	2015-06-27 21:41:47	22
129	4	66	Submission	code	f	1	2015-06-27 21:41:47	2015-06-27 21:41:47	22
130	3	67	Submission	code	f	1	2015-07-02 05:40:43	2015-07-02 05:40:43	22
131	3	68	Submission	code	f	1	2015-04-14 01:35:38	2015-04-14 01:35:38	22
132	4	68	Submission	code	f	1	2015-04-14 01:35:38	2015-04-14 01:35:38	22
133	3	69	Submission	code	f	1	2015-05-07 02:24:54	2015-05-07 02:24:54	22
134	4	69	Submission	code	f	1	2015-05-07 02:24:54	2015-05-07 02:24:54	22
135	3	73	Submission	code	f	1	2015-07-28 12:20:18	2015-07-28 12:20:18	22
136	4	73	Submission	code	f	1	2015-07-28 12:20:18	2015-07-28 12:20:18	22
137	4	75	Submission	code	f	1	2015-04-24 15:33:27	2015-04-24 15:33:27	22
138	4	77	Submission	code	f	1	2015-09-12 13:48:38	2015-09-12 13:48:38	22
139	2	79	Submission	code	f	1	2015-09-17 04:23:02	2015-09-17 04:23:02	29
140	3	79	Submission	code	f	1	2015-09-17 04:23:02	2015-09-17 04:23:02	29
141	4	80	Submission	code	f	1	2015-08-12 23:12:09	2015-08-12 23:12:09	29
142	3	81	Submission	code	f	1	2015-08-13 13:10:28	2015-08-13 13:10:28	29
143	3	82	Submission	code	f	1	2015-08-27 09:03:50	2015-08-27 09:03:50	29
144	3	85	Submission	code	f	1	2015-08-16 01:38:08	2015-08-16 01:38:08	29
145	4	87	Submission	code	f	1	2015-08-14 17:45:38	2015-08-14 17:45:38	29
146	4	89	Submission	code	f	1	2015-08-30 03:04:53	2015-08-30 03:04:53	29
147	2	97	Submission	code	f	1	2015-07-20 03:27:08	2015-07-20 03:27:08	38
148	4	92	Submission	code	f	1	2015-09-11 21:06:44	2015-09-11 21:06:44	33
149	4	94	Submission	code	f	1	2015-09-21 21:48:10	2015-09-21 21:48:10	33
150	2	98	Submission	code	f	1	2015-08-25 15:39:12	2015-08-25 15:39:12	38
151	3	103	Submission	code	f	1	2015-03-22 16:03:35	2015-03-22 16:03:35	44
152	4	240	Submission	code	f	1	2015-03-17 04:53:46	2015-03-17 04:53:46	36
153	3	107	Submission	code	f	1	2015-03-26 02:25:37	2015-03-26 02:25:37	44
154	3	111	Submission	code	f	1	2015-04-05 19:28:37	2015-04-05 19:28:37	44
155	3	113	Submission	code	f	1	2015-04-10 03:19:10	2015-04-10 03:19:10	44
156	3	115	Submission	code	f	1	2015-03-28 15:21:16	2015-03-28 15:21:16	44
157	3	121	Submission	code	f	1	2015-05-11 23:48:57	2015-05-11 23:48:57	44
158	3	241	Submission	code	f	1	2015-03-20 11:42:17	2015-03-20 11:42:17	36
159	3	125	Submission	code	f	1	2015-02-22 20:13:51	2015-02-22 20:13:51	44
160	2	175	Submission	code	f	1	2015-06-11 17:07:02	2015-06-11 17:07:02	7
161	3	143	Submission	code	f	1	2015-08-24 17:11:21	2015-08-24 17:11:21	48
162	3	144	Submission	code	f	1	2015-09-11 14:30:46	2015-09-11 14:30:46	48
163	3	148	Submission	code	f	1	2015-09-05 04:54:53	2015-09-05 04:54:53	48
164	3	152	Submission	code	f	1	2015-06-29 03:20:15	2015-06-29 03:20:15	49
165	4	160	Submission	code	f	1	2015-05-02 20:05:06	2015-05-02 20:05:06	7
166	2	158	Submission	code	f	1	2015-08-01 16:59:35	2015-08-01 16:59:35	26
167	2	161	Submission	code	f	1	2015-05-15 03:38:39	2015-05-15 03:38:39	7
168	4	162	Submission	code	f	1	2015-05-23 14:12:19	2015-05-23 14:12:19	7
169	3	163	Submission	code	f	1	2015-07-12 16:25:16	2015-07-12 16:25:16	7
170	4	163	Submission	code	f	1	2015-07-12 16:25:16	2015-07-12 16:25:16	7
171	2	166	Submission	code	f	1	2015-08-25 07:06:09	2015-08-25 07:06:09	7
172	3	166	Submission	code	f	1	2015-08-25 07:06:09	2015-08-25 07:06:09	7
173	3	167	Submission	code	f	1	2015-08-26 09:53:01	2015-08-26 09:53:01	7
174	3	171	Submission	code	f	1	2015-03-06 10:51:19	2015-03-06 10:51:19	7
175	4	171	Submission	code	f	1	2015-03-06 10:51:19	2015-03-06 10:51:19	7
176	2	173	Submission	code	f	1	2015-06-01 01:05:25	2015-06-01 01:05:25	7
177	2	177	Submission	code	f	1	2015-03-19 15:16:05	2015-03-19 15:16:05	7
178	3	177	Submission	code	f	1	2015-03-19 15:16:05	2015-03-19 15:16:05	7
179	2	178	Submission	code	f	1	2015-08-01 11:46:46	2015-08-01 11:46:46	7
180	3	181	Submission	code	f	1	2015-04-05 01:15:00	2015-04-05 01:15:00	7
181	3	182	Submission	code	f	1	2015-03-08 09:39:37	2015-03-08 09:39:37	7
182	4	186	Submission	code	f	1	2015-06-22 14:13:14	2015-06-22 14:13:14	23
183	3	230	Submission	code	f	1	2015-05-06 09:48:29	2015-05-06 09:48:29	21
184	3	189	Submission	code	f	1	2015-06-10 19:48:37	2015-06-10 19:48:37	17
185	4	189	Submission	code	f	1	2015-06-10 19:48:37	2015-06-10 19:48:37	17
186	3	190	Submission	code	f	1	2015-08-04 01:02:19	2015-08-04 01:02:19	17
187	2	194	Submission	code	f	1	2015-06-05 03:34:50	2015-06-05 03:34:50	17
188	4	194	Submission	code	f	1	2015-06-05 03:34:50	2015-06-05 03:34:50	17
189	3	196	Submission	code	f	1	2015-06-12 19:33:09	2015-06-12 19:33:09	17
190	4	196	Submission	code	f	1	2015-06-12 19:33:09	2015-06-12 19:33:09	17
191	2	197	Submission	code	f	1	2015-07-06 16:33:09	2015-07-06 16:33:09	17
192	2	199	Submission	code	f	1	2015-06-18 12:31:46	2015-06-18 12:31:46	17
193	4	199	Submission	code	f	1	2015-06-18 12:31:46	2015-06-18 12:31:46	17
194	2	200	Submission	code	f	1	2015-08-06 06:32:34	2015-08-06 06:32:34	17
195	3	200	Submission	code	f	1	2015-08-06 06:32:34	2015-08-06 06:32:34	17
196	2	203	Submission	code	f	1	2015-07-07 10:00:30	2015-07-07 10:00:30	17
197	3	203	Submission	code	f	1	2015-07-07 10:00:30	2015-07-07 10:00:30	17
198	4	204	Submission	code	f	1	2015-06-11 23:06:41	2015-06-11 23:06:41	17
199	4	205	Submission	code	f	1	2015-08-06 01:03:26	2015-08-06 01:03:26	17
200	2	206	Submission	code	f	1	2015-06-29 13:22:59	2015-06-29 13:22:59	17
201	2	207	Submission	code	f	1	2015-08-07 05:44:57	2015-08-07 05:44:57	17
202	2	208	Submission	code	f	1	2015-08-09 07:15:06	2015-08-09 07:15:06	17
203	3	208	Submission	code	f	1	2015-08-09 07:15:06	2015-08-09 07:15:06	17
204	4	208	Submission	code	f	1	2015-08-09 07:15:06	2015-08-09 07:15:06	17
205	3	209	Submission	code	f	1	2015-06-14 23:50:49	2015-06-14 23:50:49	17
206	2	211	Submission	code	f	1	2015-06-25 08:45:36	2015-06-25 08:45:36	17
207	4	211	Submission	code	f	1	2015-06-25 08:45:36	2015-06-25 08:45:36	17
208	4	218	Submission	code	f	1	2015-09-17 09:33:44	2015-09-17 09:33:44	17
209	3	220	Submission	code	f	1	2015-08-11 16:52:14	2015-08-11 16:52:14	17
210	3	221	Submission	code	f	1	2015-07-11 11:41:13	2015-07-11 11:41:13	17
211	2	222	Submission	code	f	1	2015-06-29 10:16:00	2015-06-29 10:16:00	17
212	4	222	Submission	code	f	1	2015-06-29 10:16:00	2015-06-29 10:16:00	17
213	4	224	Submission	code	f	1	2015-07-05 08:49:44	2015-07-05 08:49:44	17
214	3	225	Submission	code	f	1	2015-08-11 15:37:09	2015-08-11 15:37:09	17
215	2	226	Submission	code	f	1	2015-07-07 01:21:59	2015-07-07 01:21:59	17
216	2	228	Submission	code	f	1	2015-07-27 15:53:53	2015-07-27 15:53:53	20
217	2	229	Submission	code	f	1	2015-04-30 15:52:15	2015-04-30 15:52:15	21
218	3	236	Submission	code	f	1	2015-03-20 01:13:39	2015-03-20 01:13:39	21
219	2	237	Submission	code	f	1	2015-03-04 14:26:02	2015-03-04 14:26:02	36
220	3	238	Submission	code	f	1	2015-06-30 15:45:55	2015-06-30 15:45:55	36
221	2	243	Submission	code	f	1	2015-07-08 22:33:03	2015-07-08 22:33:03	36
222	2	244	Submission	code	f	1	2015-09-16 17:24:50	2015-09-16 17:24:50	30
223	3	244	Submission	code	f	1	2015-09-16 17:24:50	2015-09-16 17:24:50	30
224	4	244	Submission	code	f	1	2015-09-16 17:24:50	2015-09-16 17:24:50	30
225	4	245	Submission	code	f	1	2015-09-18 19:57:49	2015-09-18 19:57:49	30
226	2	246	Submission	code	f	1	2015-09-17 00:24:12	2015-09-17 00:24:12	30
227	4	246	Submission	code	f	1	2015-09-17 00:24:12	2015-09-17 00:24:12	30
228	2	247	Submission	code	f	1	2015-09-17 05:09:55	2015-09-17 05:09:55	30
229	3	247	Submission	code	f	1	2015-09-17 05:09:55	2015-09-17 05:09:55	30
230	2	248	Submission	code	f	1	2015-09-19 18:53:51	2015-09-19 18:53:51	30
231	3	248	Submission	code	f	1	2015-09-19 18:53:51	2015-09-19 18:53:51	30
232	4	248	Submission	code	f	1	2015-09-19 18:53:51	2015-09-19 18:53:51	30
233	2	249	Submission	code	f	1	2015-09-21 04:29:29	2015-09-21 04:29:29	30
234	3	249	Submission	code	t	1	2015-09-21 04:29:29	2015-09-21 04:29:29	30
235	4	249	Submission	code	t	1	2015-09-21 04:29:29	2015-09-21 04:29:29	30
236	2	250	Submission	code	f	1	2015-09-16 12:10:37	2015-09-16 12:10:37	30
237	4	250	Submission	code	f	1	2015-09-16 12:10:37	2015-09-16 12:10:37	30
238	2	251	Submission	code	f	1	2015-09-16 15:26:22	2015-09-16 15:26:22	30
239	4	251	Submission	code	f	1	2015-09-16 15:26:22	2015-09-16 15:26:22	30
240	2	252	Submission	code	f	1	2015-09-18 10:04:22	2015-09-18 10:04:22	30
241	3	252	Submission	code	f	1	2015-09-18 10:04:22	2015-09-18 10:04:22	30
242	4	252	Submission	code	f	1	2015-09-18 10:04:22	2015-09-18 10:04:22	30
243	2	253	Submission	code	f	1	2015-09-18 11:32:30	2015-09-18 11:32:30	30
244	4	253	Submission	code	f	1	2015-09-18 11:32:30	2015-09-18 11:32:30	30
245	2	254	Submission	code	f	1	2015-09-18 22:36:39	2015-09-18 22:36:39	30
246	3	254	Submission	code	f	1	2015-09-18 22:36:39	2015-09-18 22:36:39	30
247	4	254	Submission	code	f	1	2015-09-18 22:36:39	2015-09-18 22:36:39	30
248	2	256	Submission	code	f	1	2015-09-19 19:24:13	2015-09-19 19:24:13	30
249	4	256	Submission	code	f	1	2015-09-19 19:24:13	2015-09-19 19:24:13	30
250	2	257	Submission	code	f	1	2015-09-18 07:06:24	2015-09-18 07:06:24	30
251	3	257	Submission	code	f	1	2015-09-18 07:06:24	2015-09-18 07:06:24	30
252	4	257	Submission	code	f	1	2015-09-18 07:06:24	2015-09-18 07:06:24	30
253	2	258	Submission	code	f	1	2015-09-19 14:57:34	2015-09-19 14:57:34	30
254	4	258	Submission	code	f	1	2015-09-19 14:57:34	2015-09-19 14:57:34	30
255	2	260	Submission	code	f	1	2015-09-20 00:20:31	2015-09-20 00:20:31	30
256	3	260	Submission	code	f	1	2015-09-20 00:20:31	2015-09-20 00:20:31	30
257	4	260	Submission	code	f	1	2015-09-20 00:20:31	2015-09-20 00:20:31	30
258	2	261	Submission	code	f	1	2015-09-19 11:42:01	2015-09-19 11:42:01	30
259	4	261	Submission	code	f	1	2015-09-19 11:42:01	2015-09-19 11:42:01	30
260	2	262	Submission	code	f	1	2015-09-16 10:44:16	2015-09-16 10:44:16	30
261	3	262	Submission	code	f	1	2015-09-16 10:44:16	2015-09-16 10:44:16	30
262	2	263	Submission	code	f	1	2015-09-16 13:00:18	2015-09-16 13:00:18	30
263	2	264	Submission	code	f	1	2015-09-18 20:23:01	2015-09-18 20:23:01	30
264	3	264	Submission	code	f	1	2015-09-18 20:23:01	2015-09-18 20:23:01	30
265	2	266	Submission	code	f	1	2015-09-17 18:39:44	2015-09-17 18:39:44	30
266	3	266	Submission	code	f	1	2015-09-17 18:39:44	2015-09-17 18:39:44	30
267	4	266	Submission	code	f	1	2015-09-17 18:39:44	2015-09-17 18:39:44	30
268	2	267	Submission	code	f	1	2015-09-18 21:03:52	2015-09-18 21:03:52	30
269	3	267	Submission	code	f	1	2015-09-18 21:03:52	2015-09-18 21:03:52	30
270	2	268	Submission	code	f	1	2015-09-16 17:54:41	2015-09-16 17:54:41	30
271	3	268	Submission	code	f	1	2015-09-16 17:54:41	2015-09-16 17:54:41	30
272	4	268	Submission	code	f	1	2015-09-16 17:54:41	2015-09-16 17:54:41	30
273	3	269	Submission	code	f	1	2015-09-20 10:08:45	2015-09-20 10:08:45	30
274	4	274	Submission	code	f	1	2015-08-07 13:22:41	2015-08-07 13:22:41	35
275	2	276	Submission	code	f	1	2015-09-12 11:53:00	2015-09-12 11:53:00	14
276	2	304	Submission	code	f	1	2015-05-09 05:49:38	2015-05-09 05:49:38	16
277	3	288	Submission	code	f	1	2015-08-14 11:02:44	2015-08-14 11:02:44	6
278	3	291	Submission	code	f	1	2015-05-22 20:44:13	2015-05-22 20:44:13	6
279	4	297	Submission	code	f	1	2015-09-12 21:01:22	2015-09-12 21:01:22	34
280	4	298	Submission	code	f	1	2015-07-28 09:54:30	2015-07-28 09:54:30	34
281	4	299	Submission	code	f	1	2015-07-26 01:59:08	2015-07-26 01:59:08	34
282	3	301	Submission	code	f	1	2015-05-12 23:07:24	2015-05-12 23:07:24	16
283	3	305	Submission	code	f	1	2015-07-04 02:01:05	2015-07-04 02:01:05	16
284	4	305	Submission	code	f	1	2015-07-04 02:01:05	2015-07-04 02:01:05	16
285	2	308	Submission	code	f	1	2015-07-23 17:10:36	2015-07-23 17:10:36	16
286	3	312	Submission	code	f	1	2015-07-25 05:17:56	2015-07-25 05:17:56	18
287	4	312	Submission	code	f	1	2015-07-25 05:17:56	2015-07-25 05:17:56	18
288	3	313	Submission	code	f	1	2015-06-22 19:58:32	2015-06-22 19:58:32	18
289	4	314	Submission	code	f	1	2015-05-22 21:46:25	2015-05-22 21:46:25	18
290	4	316	Submission	code	f	1	2015-03-13 20:55:55	2015-03-13 20:55:55	42
291	2	317	Submission	code	f	1	2015-07-30 15:37:45	2015-07-30 15:37:45	42
292	2	319	Submission	code	f	1	2015-08-06 20:11:34	2015-08-06 20:11:34	27
\.


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('notifications_id_seq', 292, true);


--
-- Data for Name: submission_viewers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submission_viewers (id, submission_id, viewer_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: submission_viewers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submission_viewers_id_seq', 1, false);


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submissions (id, user_id, key, state, language, slug, code, done_at, is_liked, nit_count, version, user_exercise_id, filename, created_at, updated_at, solution) FROM stdin;
1	9	2f07370991d7b590c7bc82ba	pending	lua	hamming	local Hamming = {}\n\nfunction Hamming.compute(str1, str2)\n  local distance = 0\n\n  for i = 1, math.min(#str1, #str2) do\n    if str1:sub(i,i) ~= str2:sub(i,i) then\n      distance = distance + 1\n    end\n  end\n\n  return distance\nend\n\nreturn Hamming	\N	\N	0	1	1	hamming.lua	2015-08-10 01:05:01	2015-08-10 01:05:01	{"hamming.lua":"local Hamming = {}\\n\\nfunction Hamming.compute(str1, str2)\\n  local distance = 0\\n\\n  for i = 1, math.min(#str1, #str2) do\\n    if str1:sub(i,i) ~= str2:sub(i,i) then\\n      distance = distance + 1\\n    end\\n  end\\n\\n  return distance\\nend\\n\\nreturn Hamming"}
2	9	9a6a1035a333c7dd3cf7d9af	done	clojure	nucleotide-count	(ns dna)\n\n(def ^{:private true} nucleotides (set "ACGTU"))\n(def ^{:private true} dna-nucleotides (disj nucleotides \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? nucleotides nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) dna-nucleotides)))	\N	\N	0	3	2	dna.clj	2015-08-04 20:15:57	2015-08-04 20:15:57	{"dna.clj":"(ns dna)\\n\\n(def ^{:private true} nucleotides (set \\"ACGTU\\"))\\n(def ^{:private true} dna-nucleotides (disj nucleotides \\\\U))\\n\\n(defn count [nucleotide dna]\\n  (when (not (contains? nucleotides nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) dna-nucleotides)))"}
3	9	c7a23d0b9a0cc5f53ab76f81	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	2	2	dna.clj	2015-08-09 01:34:55	2015-08-09 01:34:55	{"dna.clj":"(ns dna)\\n\\n(def NUCLEOTIDES (set \\"ACGTU\\"))\\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\\\U))\\n\\n(defn count [nucleotide dna]\\n  (when (not (contains? NUCLEOTIDES nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))"}
4	9	6091d14e6ad995c240d651d1	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn dna/count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	1	2	dna.clj	2015-09-14 07:07:38	2015-09-14 07:07:38	{"dna.clj":"(ns dna)\\n\\n(def NUCLEOTIDES (set \\"ACGTU\\"))\\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\\\U))\\n\\n(defn dna/count [nucleotide dna]\\n  (when (not (contains? NUCLEOTIDES nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))"}
5	9	881068aefac7ba0a109f2942	superseded	go	leap	package leap\n\n/*\n * Determine if year is leap year or not\n * @param year: The year expressed as int \n * @return: true if leap year, otherwise false\n*/\nfunc IsLeapYear(year int) bool {\n    // Is leap if evenly divisible by 4 and not by 100  \n    if (year % 4 == 0 && year % 100 != 0) {\n        return true\n    // Also leap if divisible by 400\n    } else if (year % 400 == 0) {\n        return true\n    // All others are not leap\n    } else {\n        return false\n    }\n}	\N	\N	0	1	3	leap.go	2015-07-02 08:39:35	2015-07-02 08:39:35	{"leap.go":"package leap\\n\\n/*\\n * Determine if year is leap year or not\\n * @param year: The year expressed as int \\n * @return: true if leap year, otherwise false\\n*/\\nfunc IsLeapYear(year int) bool {\\n    // Is leap if evenly divisible by 4 and not by 100  \\n    if (year % 4 == 0 \\u0026\\u0026 year % 100 != 0) {\\n        return true\\n    // Also leap if divisible by 400\\n    } else if (year % 400 == 0) {\\n        return true\\n    // All others are not leap\\n    } else {\\n        return false\\n    }\\n}"}
6	9	7003a0f3c2a968bbecdea52c	pending	go	leap	package leap\n\n\n//Returns true if the year is a leap year and false otherwise. \n//Takes the year as an int.\nfunc IsLeapYear(year int) bool {\n\t// Is leap if evenly divisible by 4 and not by 100\n\tif year%4 == 0 && year%100 != 0 {\n\t\treturn true\n\t// Also leap if divisible by 400\n\t} else if year%400 == 0 {\n\t\treturn true\n\t}\n\t// All others are not leap\n\treturn false\n}	\N	\N	0	2	3	leap.go	2015-08-12 23:21:37	2015-08-12 23:21:37	{"leap.go":"package leap\\n\\n\\n//Returns true if the year is a leap year and false otherwise. \\n//Takes the year as an int.\\nfunc IsLeapYear(year int) bool {\\n\\t// Is leap if evenly divisible by 4 and not by 100\\n\\tif year%4 == 0 \\u0026\\u0026 year%100 != 0 {\\n\\t\\treturn true\\n\\t// Also leap if divisible by 400\\n\\t} else if year%400 == 0 {\\n\\t\\treturn true\\n\\t}\\n\\t// All others are not leap\\n\\treturn false\\n}"}
7	11	2dc6799ac337ceac4acd7e26	pending	javascript	word-count	var words = function(input) {\r\n\tvar split = input.replace('\\n'," ").split(" ");\r\n\tvar wordcount = {};\r\n\t\r\n\tsplit.forEach(function(element) {\r\n\t\t\tif (wordcount[element]) {\r\n\t\t\t\twordcount[element] = wordcount[element] + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\twordcount[element] = 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t});\r\n\treturn wordcount;\r\n};\r\n\r\nmodule.exports = words;	\N	\N	0	1	4	word-count.js	2015-07-25 00:30:45	2015-07-25 00:30:45	{"word-count.js":"var words = function(input) {\\r\\n\\tvar split = input.replace('\\\\n',\\" \\").split(\\" \\");\\r\\n\\tvar wordcount = {};\\r\\n\\t\\r\\n\\tsplit.forEach(function(element) {\\r\\n\\t\\t\\tif (wordcount[element]) {\\r\\n\\t\\t\\t\\twordcount[element] = wordcount[element] + 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\twordcount[element] = 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t});\\r\\n\\treturn wordcount;\\r\\n};\\r\\n\\r\\nmodule.exports = words;"}
8	11	cfa7409f749ec1ba8209a852	done	python	point-mutations	class DNA:\n\tdef __init__(self, strand):\n\t\tself.strand = strand \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.strand:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.strand[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	2	5	point-mutations.py	2015-08-17 22:21:14	2015-08-17 22:21:14	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, strand):\\n\\t\\tself.strand = strand \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.strand:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.strand[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
9	11	286312eb2e12df4faa976c17	superseded	python	point-mutations	class DNA:\n\tdef __init__(self, dna):\n\t\tself.dna = dna \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.dna:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.dna[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	1	5	point-mutations.py	2015-08-30 02:12:45	2015-08-30 02:12:45	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, dna):\\n\\t\\tself.dna = dna \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.dna:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.dna[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
10	12	fcaba645077a1270b5baf74d	pending	javascript	hamming	module.exports = {\n    compute: function(a, b) {\n        var iterator = 0, diff = 0, length = a.length < b.length ? a.length : b.length;        \n        do {\n            if(a[iterator] !== b[iterator]) {\n                diff++;\n            }\n            iterator++;\n        } while (iterator < length)\n        return diff;\n    }\n}	\N	\N	0	1	6	hamming.js	2015-08-19 01:52:35	2015-08-19 01:52:35	{"hamming.js":"module.exports = {\\n    compute: function(a, b) {\\n        var iterator = 0, diff = 0, length = a.length \\u003c b.length ? a.length : b.length;        \\n        do {\\n            if(a[iterator] !== b[iterator]) {\\n                diff++;\\n            }\\n            iterator++;\\n        } while (iterator \\u003c length)\\n        return diff;\\n    }\\n}"}
11	15	7767a99f952a61dc757cf8fe	done	ruby	raindrops	class Raindrops\n  def self.convert(num)\n    result = []\n    result << "Pling" if num % 3 == 0\n    result << "Plang" if num % 5 == 0\n    result << "Plong" if num % 7 == 0\n\n    if result.empty?\n      return num.to_s\n    else\n      return result.join\n    end\n  end\nend	\N	\N	0	1	7	raindrops.rb	2015-09-21 02:08:24	2015-09-21 02:08:24	{"raindrops.rb":"class Raindrops\\n  def self.convert(num)\\n    result = []\\n    result \\u003c\\u003c \\"Pling\\" if num % 3 == 0\\n    result \\u003c\\u003c \\"Plang\\" if num % 5 == 0\\n    result \\u003c\\u003c \\"Plong\\" if num % 7 == 0\\n\\n    if result.empty?\\n      return num.to_s\\n    else\\n      return result.join\\n    end\\n  end\\nend"}
12	15	6392877bf0ff438c412d237e	pending	ruby	twelve-days	class TwelveDaysSong\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\n\n  VERSES = [\n    ["twelve Drummers Drumming, ", 12],\n    ["eleven Pipers Piping, ", 11],\n    ["ten Lords-a-Leaping, ", 10],\n    ["nine Ladies Dancing, ", 9],    \n    ["eight Maids-a-Milking, ", 8],      \n    ["seven Swans-a-Swimming, ", 7],\n    ["six Geese-a-Laying, ", 6],\n    ["five Gold Rings, ", 5],\n    ["four Calling Birds, ", 4], \n    ["three French Hens, ", 3],\n    ["two Turtle Doves, and ", 2],\n  ]\n\n  def verse(num)\n    s = "On the #{DAYS[num-1]} day of Christmas my true love gave to me, "\n    VERSES.each do |phrase, verse_num|\n      s << phrase if num >= verse_num\n    end\n    s << "a Partridge in a Pear Tree.\\n"\n    s\n  end\n\n  def verses(start, stop)\n    (start..stop).map { |num| verse(num) }.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses(1, 12)\n  end\nend	\N	\N	0	1	8	twelve_days.rb	2015-09-18 04:57:07	2015-09-18 04:57:07	{"twelve_days.rb":"class TwelveDaysSong\\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\\n\\n  VERSES = [\\n    [\\"twelve Drummers Drumming, \\", 12],\\n    [\\"eleven Pipers Piping, \\", 11],\\n    [\\"ten Lords-a-Leaping, \\", 10],\\n    [\\"nine Ladies Dancing, \\", 9],    \\n    [\\"eight Maids-a-Milking, \\", 8],      \\n    [\\"seven Swans-a-Swimming, \\", 7],\\n    [\\"six Geese-a-Laying, \\", 6],\\n    [\\"five Gold Rings, \\", 5],\\n    [\\"four Calling Birds, \\", 4], \\n    [\\"three French Hens, \\", 3],\\n    [\\"two Turtle Doves, and \\", 2],\\n  ]\\n\\n  def verse(num)\\n    s = \\"On the #{DAYS[num-1]} day of Christmas my true love gave to me, \\"\\n    VERSES.each do |phrase, verse_num|\\n      s \\u003c\\u003c phrase if num \\u003e= verse_num\\n    end\\n    s \\u003c\\u003c \\"a Partridge in a Pear Tree.\\\\n\\"\\n    s\\n  end\\n\\n  def verses(start, stop)\\n    (start..stop).map { |num| verse(num) }.join(\\"\\\\n\\") + \\"\\\\n\\"\\n  end\\n\\n  def sing\\n    verses(1, 12)\\n  end\\nend"}
13	15	9fd450c85182100ac72b2a59	superseded	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	1	9	year.py	2015-09-19 21:24:20	2015-09-19 21:24:20	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
14	15	1ff556897df802f04df9135b	superseded	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) \nor divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	2	9	year.py	2015-09-21 23:57:00	2015-09-21 23:57:00	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) \\nor divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
15	15	284d2c6033a3b97d44e3591d	done	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	3	9	year.py	2015-09-22 07:52:03	2015-09-22 07:52:03	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
16	15	8f68afffb6cb6de4246073f6	superseded	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    zero_counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\n    @nucleotides.chars.each_with_object(zero_counts) do |nucleotide, counts|\n      counts[nucleotide] += 1\n    end\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    nucleotide_counts[nucl] || 0\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = %w[A C G T]\n  RNA_NUCLEOTIDES = %w[A C G U]\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	\N	\N	0	2	10	nucleotide-count.rb	2015-09-19 19:16:05	2015-09-19 19:16:05	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    zero_counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\\n    @nucleotides.chars.each_with_object(zero_counts) do |nucleotide, counts|\\n      counts[nucleotide] += 1\\n    end\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    nucleotide_counts[nucl] || 0\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = %w[A C G T]\\n  RNA_NUCLEOTIDES = %w[A C G U]\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
23	15	f66ae11bd77851e42a26f38f	done	ruby	grains	class Grains\n  def square(count)\n    count.times.inject(0) {|_| _ = _.eql?(0) ? 1 : _ * 2 }\n  end\n\n  def total\n    square(65) - 1\n  end\nend	\N	\N	0	1	13	/ruby/grains/grains.rb	2015-09-20 22:52:50	2015-09-20 22:52:50	{"/ruby/grains/grains.rb":"class Grains\\n  def square(count)\\n    count.times.inject(0) {|_| _ = _.eql?(0) ? 1 : _ * 2 }\\n  end\\n\\n  def total\\n    square(65) - 1\\n  end\\nend"}
41	15	8ae5f31ba80800e00f6f123e	superseded	python	point-mutations	class DNA:\n\tdef __init__(self, dna):\n\t\tself.dna = dna \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.dna:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.dna[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	1	24	point-mutations.py	2015-09-19 11:42:29	2015-09-19 11:42:29	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, dna):\\n\\t\\tself.dna = dna \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.dna:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.dna[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
17	15	c0a0be400e789bafec6399e8	done	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, count(nucl)] }]\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    @nucleotides.chars.count(nucl)\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = %w[A C G T]\n  RNA_NUCLEOTIDES = %w[A C G U]\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	\N	\N	0	3	10	nucleotide-count.rb	2015-09-20 05:33:24	2015-09-20 05:33:24	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, count(nucl)] }]\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    @nucleotides.chars.count(nucl)\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = %w[A C G T]\\n  RNA_NUCLEOTIDES = %w[A C G U]\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
18	15	57795b889bac27826b5893d2	superseded	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\n    @nucleotides.chars.each do |nucleotide|\n      counts[nucleotide] += 1\n    end\n    counts\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    nucleotide_counts[nucl] || 0\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = 'ACGT'.chars\n  RNA_NUCLEOTIDES = 'ACGU'.chars\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	\N	\N	0	1	10	nucleotide-count.rb	2015-09-20 18:03:35	2015-09-20 18:03:35	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\\n    @nucleotides.chars.each do |nucleotide|\\n      counts[nucleotide] += 1\\n    end\\n    counts\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    nucleotide_counts[nucl] || 0\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = 'ACGT'.chars\\n  RNA_NUCLEOTIDES = 'ACGU'.chars\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
19	15	d49d223aeb804cc0bc8cf23e	done	ruby	say	class Say\n\n  N_TO_WORDS = {\n    0 => { teen: "ten" },\n    1 => { normal: "one", teen: "ten", ty: "eleven" },\n    2 => { normal: "two", teen: "twleve", ty: "twenty" },\n    3 => { normal: "three", teen: "thirteen", ty: "thirty" },\n    4 => { normal: "four", teen: "fourteen", ty: "forty" },\n    5 => { normal: "five", teen: "fifteen", ty: "fifty" },\n    6 => { normal: "six", teen: "sixteen", ty: "sixty" },\n    7 => { normal: "seven", teen: "seventeen", ty: "seventy" },\n    8 => { normal: "eight", teen: "eighteen", ty: "eighty" },\n    9 => { normal: "nine", teen: "nineteen", ty: "ninety" }\n  }\n\n  MAGNITUDE_WORD = {\n    1_000_000_000_000 => :trillion,\n    1_000_000_000     => :billion,\n    1_000_000         => :million,\n    1_000             => :thousand\n  }\n\n  def initialize(n)\n    @n = n\n  end\n\n  def in_english\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\n    return "zero" if @n.zero?\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\n      q, r = result[:value].divmod(magnitude)\n      result[:words] << "#{meta_words(q)} #{name}" if q > 0\n      result.merge(value: r)\n    end\n    say[:words] << meta_words(say[:value]) unless say[:value].zero?\n    say[:words].join(" ")\n  end\n\n  private\n\n  def meta_words(n)\n    "#{hundred(n)} #{below_hundred(n.modulo(100))}".strip\n  end\n\n  def hundred(n)\n    q, r = n.divmod(100)\n    q.zero? ? nil : "#{N_TO_WORDS[q][:normal]} hundred"\n  end\n\n  def below_hundred(n)\n    q, r = n.divmod(10)\n    ty_word = N_TO_WORDS[q][:ty] if q > 1\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\n    [ty_word, teen_word].compact.join("-")\n  end\nend	\N	\N	0	1	11	/ruby/say/say.rb	2015-09-18 11:23:38	2015-09-18 11:23:38	{"/ruby/say/say.rb":"class Say\\n\\n  N_TO_WORDS = {\\n    0 =\\u003e { teen: \\"ten\\" },\\n    1 =\\u003e { normal: \\"one\\", teen: \\"ten\\", ty: \\"eleven\\" },\\n    2 =\\u003e { normal: \\"two\\", teen: \\"twleve\\", ty: \\"twenty\\" },\\n    3 =\\u003e { normal: \\"three\\", teen: \\"thirteen\\", ty: \\"thirty\\" },\\n    4 =\\u003e { normal: \\"four\\", teen: \\"fourteen\\", ty: \\"forty\\" },\\n    5 =\\u003e { normal: \\"five\\", teen: \\"fifteen\\", ty: \\"fifty\\" },\\n    6 =\\u003e { normal: \\"six\\", teen: \\"sixteen\\", ty: \\"sixty\\" },\\n    7 =\\u003e { normal: \\"seven\\", teen: \\"seventeen\\", ty: \\"seventy\\" },\\n    8 =\\u003e { normal: \\"eight\\", teen: \\"eighteen\\", ty: \\"eighty\\" },\\n    9 =\\u003e { normal: \\"nine\\", teen: \\"nineteen\\", ty: \\"ninety\\" }\\n  }\\n\\n  MAGNITUDE_WORD = {\\n    1_000_000_000_000 =\\u003e :trillion,\\n    1_000_000_000     =\\u003e :billion,\\n    1_000_000         =\\u003e :million,\\n    1_000             =\\u003e :thousand\\n  }\\n\\n  def initialize(n)\\n    @n = n\\n  end\\n\\n  def in_english\\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\\n    return \\"zero\\" if @n.zero?\\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\\n      q, r = result[:value].divmod(magnitude)\\n      result[:words] \\u003c\\u003c \\"#{meta_words(q)} #{name}\\" if q \\u003e 0\\n      result.merge(value: r)\\n    end\\n    say[:words] \\u003c\\u003c meta_words(say[:value]) unless say[:value].zero?\\n    say[:words].join(\\" \\")\\n  end\\n\\n  private\\n\\n  def meta_words(n)\\n    \\"#{hundred(n)} #{below_hundred(n.modulo(100))}\\".strip\\n  end\\n\\n  def hundred(n)\\n    q, r = n.divmod(100)\\n    q.zero? ? nil : \\"#{N_TO_WORDS[q][:normal]} hundred\\"\\n  end\\n\\n  def below_hundred(n)\\n    q, r = n.divmod(10)\\n    ty_word = N_TO_WORDS[q][:ty] if q \\u003e 1\\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\\n    [ty_word, teen_word].compact.join(\\"-\\")\\n  end\\nend"}
20	15	187e63bdb78a41e7204d7c9d	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	2	12	dna.clj	2015-09-19 15:50:35	2015-09-19 15:50:35	{"dna.clj":"(ns dna)\\n\\n(def NUCLEOTIDES (set \\"ACGTU\\"))\\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\\\U))\\n\\n(defn count [nucleotide dna]\\n  (when (not (contains? NUCLEOTIDES nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))"}
21	15	686d2bf4debd178003d30397	done	clojure	nucleotide-count	(ns dna)\n\n(def ^{:private true} nucleotides (set "ACGTU"))\n(def ^{:private true} dna-nucleotides (disj nucleotides \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? nucleotides nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) dna-nucleotides)))	\N	\N	0	3	12	dna.clj	2015-09-19 16:02:21	2015-09-19 16:02:21	{"dna.clj":"(ns dna)\\n\\n(def ^{:private true} nucleotides (set \\"ACGTU\\"))\\n(def ^{:private true} dna-nucleotides (disj nucleotides \\\\U))\\n\\n(defn count [nucleotide dna]\\n  (when (not (contains? nucleotides nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) dna-nucleotides)))"}
22	15	76179662b9628dee512e5277	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn dna/count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	1	12	dna.clj	2015-09-19 17:18:34	2015-09-19 17:18:34	{"dna.clj":"(ns dna)\\n\\n(def NUCLEOTIDES (set \\"ACGTU\\"))\\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\\\U))\\n\\n(defn dna/count [nucleotide dna]\\n  (when (not (contains? NUCLEOTIDES nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))"}
24	15	210308516864099aecdf10a2	done	javascript	sieve	var Sieve = function(num) {\n  this.num = num;\n  this.primes = [];\n\n  var isPrime = function(n) {\n    var mid = Math.floor( n / 2 );\n\n    for ( var i = 2; i <= mid; i++ ) {\n      if ( n % i === 0 ) {\n        return false\n      }\n    }\n    return true;\n  }\n\n  for ( var i = 2; i <= this.num; i++ ) {\n    if ( isPrime(i) ) {\n      this.primes.push(i);\n    }\n  }\n};	\N	\N	0	1	14	sieve_test.js	2015-09-20 13:06:45	2015-09-20 13:06:45	{"sieve_test.js":"var Sieve = function(num) {\\n  this.num = num;\\n  this.primes = [];\\n\\n  var isPrime = function(n) {\\n    var mid = Math.floor( n / 2 );\\n\\n    for ( var i = 2; i \\u003c= mid; i++ ) {\\n      if ( n % i === 0 ) {\\n        return false\\n      }\\n    }\\n    return true;\\n  }\\n\\n  for ( var i = 2; i \\u003c= this.num; i++ ) {\\n    if ( isPrime(i) ) {\\n      this.primes.push(i);\\n    }\\n  }\\n};"}
25	15	ccb7e22c673ba64dde752eb8	superseded	ruby	word-count	class Words\n  attr_reader :sentence\n\n  def initialize(string)\n    @sentence = normalize_string(string)\n  end\n\n  def count\n    results = Hash.new(0)\n    sentence.split(' ').each do |word|\n      results[word] += 1\n    end\n    results\n  end\n\n  private\n\n  def normalize_string(string)\n    string.gsub(/\\W/, ' ').downcase\n  end\nend	\N	\N	0	2	15	word-count.rb	2015-09-19 09:56:52	2015-09-19 09:56:52	{"word-count.rb":"class Words\\n  attr_reader :sentence\\n\\n  def initialize(string)\\n    @sentence = normalize_string(string)\\n  end\\n\\n  def count\\n    results = Hash.new(0)\\n    sentence.split(' ').each do |word|\\n      results[word] += 1\\n    end\\n    results\\n  end\\n\\n  private\\n\\n  def normalize_string(string)\\n    string.gsub(/\\\\W/, ' ').downcase\\n  end\\nend"}
26	15	215fe2b49c01fa7b639ed12f	superseded	ruby	word-count	class Words\n  attr_reader :sentence\n\n  def initialize(input)\n    input.gsub!(/\\W/, ' ')\n    @sentence = input.downcase\n  end\n\n  def count\n    results = Hash.new(0)\n    sentence.split(' ').each do |word|\n      results[word] += 1\n    end\n    results\n  end\nend	\N	\N	0	1	15	word-count.rb	2015-09-20 22:44:56	2015-09-20 22:44:56	{"word-count.rb":"class Words\\n  attr_reader :sentence\\n\\n  def initialize(input)\\n    input.gsub!(/\\\\W/, ' ')\\n    @sentence = input.downcase\\n  end\\n\\n  def count\\n    results = Hash.new(0)\\n    sentence.split(' ').each do |word|\\n      results[word] += 1\\n    end\\n    results\\n  end\\nend"}
27	15	424a771eab83215e15df6a9f	pending	ruby	word-count	class Words\n  attr_reader :sentence\n\n  def initialize(sentence)\n    @sentence = normalize_sentence(sentence)\n  end\n\n  def count\n    results = Hash.new(0)\n    sentence.split(' ').each do |word|\n      results[word] += 1\n    end\n    results\n  end\n\n  private\n\n  def normalize_sentence(sentence)\n    sentence.gsub(/\\W/, ' ').downcase\n  end\nend	\N	\N	0	3	15	word-count.rb	2015-09-21 18:33:42	2015-09-21 18:33:42	{"word-count.rb":"class Words\\n  attr_reader :sentence\\n\\n  def initialize(sentence)\\n    @sentence = normalize_sentence(sentence)\\n  end\\n\\n  def count\\n    results = Hash.new(0)\\n    sentence.split(' ').each do |word|\\n      results[word] += 1\\n    end\\n    results\\n  end\\n\\n  private\\n\\n  def normalize_sentence(sentence)\\n    sentence.gsub(/\\\\W/, ' ').downcase\\n  end\\nend"}
28	15	455a06da2ae28d1883fe15a6	pending	perl5	word-count	package Phrase;\n\nuse strict;\nuse warnings;\n \nsub word_count{\n    my %hash;\n    my $words = shift;\n    map { s/\\W+//g; $hash{$_}++ } split '\\s', lc($words);\n    delete $hash{""};\n    return \\%hash;\n}\n1;	\N	\N	0	1	16	Phrase.pm	2015-09-18 09:44:01	2015-09-18 09:44:01	{"Phrase.pm":"package Phrase;\\n\\nuse strict;\\nuse warnings;\\n \\nsub word_count{\\n    my %hash;\\n    my $words = shift;\\n    map { s/\\\\W+//g; $hash{$_}++ } split '\\\\s', lc($words);\\n    delete $hash{\\"\\"};\\n    return \\\\%hash;\\n}\\n1;"}
29	15	9f76c6682c5950f1eab42c4e	pending	ruby	protein-translation	class Translation\n  PROTEINS = {\n    "Methionine"    => %w(AUG),\n    "Leucine"       => %w(UUA UUG),\n    "Serine"        => %w(UCU UCC UCA UCG),\n    "Cystine"       => %w(UGU UGC),\n    "Tyrosine"      => %w(UAU UAC),\n    "Tryptophan"    => %w(UGG),\n    "Phenylalanine" => %w(UUU UUC),\n    "STOP"          => %w(UAA UAG UGA),\n  }\n\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\n    Array(codons).each {|codon| hash[codon] = protein }\n  end\n\n  class << self\n    def of_codon(str)\n      CODONS.fetch(str){ raise InvalidCodonError }\n    end\n\n    def of_rna(str)\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\n        of_codon(triplet).tap do |protein|\n          return result if protein == "STOP"\n          result << protein\n        end\n      end\n    end\n  end\nend\n\nclass InvalidCodonError < ArgumentError\nend	\N	\N	0	1	17	translation.rb	2015-09-19 16:11:55	2015-09-19 16:11:55	{"translation.rb":"class Translation\\n  PROTEINS = {\\n    \\"Methionine\\"    =\\u003e %w(AUG),\\n    \\"Leucine\\"       =\\u003e %w(UUA UUG),\\n    \\"Serine\\"        =\\u003e %w(UCU UCC UCA UCG),\\n    \\"Cystine\\"       =\\u003e %w(UGU UGC),\\n    \\"Tyrosine\\"      =\\u003e %w(UAU UAC),\\n    \\"Tryptophan\\"    =\\u003e %w(UGG),\\n    \\"Phenylalanine\\" =\\u003e %w(UUU UUC),\\n    \\"STOP\\"          =\\u003e %w(UAA UAG UGA),\\n  }\\n\\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\\n    Array(codons).each {|codon| hash[codon] = protein }\\n  end\\n\\n  class \\u003c\\u003c self\\n    def of_codon(str)\\n      CODONS.fetch(str){ raise InvalidCodonError }\\n    end\\n\\n    def of_rna(str)\\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\\n        of_codon(triplet).tap do |protein|\\n          return result if protein == \\"STOP\\"\\n          result \\u003c\\u003c protein\\n        end\\n      end\\n    end\\n  end\\nend\\n\\nclass InvalidCodonError \\u003c ArgumentError\\nend"}
30	15	3ae3744dcf697fcef7423fa2	superseded	python	grade-school	class School:\n\n    def __init__(self, name):\n        self._name = name\n        self.db = {}\n\n    def add(self, student_name, grade):\n        if grade not in self.db:\n            self.db[grade] = set()\n\n        self.db[grade].add(student_name)\n\n    def grade(self, grade_to_look_up):\n            return self.db.get(grade_to_look_up, set())\n\n    def sort(self):\n        sorted_students = {\n            3: ("Kyle",),\n            4: ("Christopher", "Jennifer",),\n            6: ("Kareem",)\n        }\n\n        return sorted_students	\N	\N	0	1	18	school.py	2015-09-20 02:19:08	2015-09-20 02:19:08	{"school.py":"class School:\\n\\n    def __init__(self, name):\\n        self._name = name\\n        self.db = {}\\n\\n    def add(self, student_name, grade):\\n        if grade not in self.db:\\n            self.db[grade] = set()\\n\\n        self.db[grade].add(student_name)\\n\\n    def grade(self, grade_to_look_up):\\n            return self.db.get(grade_to_look_up, set())\\n\\n    def sort(self):\\n        sorted_students = {\\n            3: (\\"Kyle\\",),\\n            4: (\\"Christopher\\", \\"Jennifer\\",),\\n            6: (\\"Kareem\\",)\\n        }\\n\\n        return sorted_students"}
40	15	d69761969ac0342dcf04f1ef	done	python	point-mutations	class DNA:\n\tdef __init__(self, strand):\n\t\tself.strand = strand \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.strand:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.strand[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	2	24	point-mutations.py	2015-09-18 09:18:12	2015-09-18 09:18:12	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, strand):\\n\\t\\tself.strand = strand \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.strand:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.strand[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
31	15	809a63a400f8c9fa66e91d72	done	python	grade-school	class School:\n\n    def __init__(self, name):\n        self._name = name\n        self.db = {}\n\n    def add(self, student_name, grade):\n        if grade not in self.db:\n            self.db[grade] = set()\n\n        self.db[grade].add(student_name)\n\n    def grade(self, grade_to_look_up):\n            return self.db.get(grade_to_look_up, set())\n\n    def sort(self):\n        return {grade: tuple(sorted(student_names))\n            for grade, student_names in self.db.items()}	\N	\N	0	2	18	school.py	2015-09-20 05:19:08	2015-09-20 05:19:08	{"school.py":"class School:\\n\\n    def __init__(self, name):\\n        self._name = name\\n        self.db = {}\\n\\n    def add(self, student_name, grade):\\n        if grade not in self.db:\\n            self.db[grade] = set()\\n\\n        self.db[grade].add(student_name)\\n\\n    def grade(self, grade_to_look_up):\\n            return self.db.get(grade_to_look_up, set())\\n\\n    def sort(self):\\n        return {grade: tuple(sorted(student_names))\\n            for grade, student_names in self.db.items()}"}
32	15	813aae88b55e5ff706641c83	pending	ruby	sieve	class Sieve\n  attr_reader :limit, :candidates, :composites\n\n  def initialize(limit)\n    @limit = limit\n    @candidates = (2..limit).to_a\n    @composites = {}\n  end\n\n  def primes\n    candidates.each_with_object([]) do |candidate, primes|\n      next if composites.key?(candidate)\n      primes << candidate\n      ((candidate * 2)..limit).step(candidate) do |multiple|\n        composites[multiple] = true\n      end\n    end\n  end\nend	\N	\N	0	1	19	/ruby/sieve/sieve.rb	2015-09-19 17:40:04	2015-09-19 17:40:04	{"/ruby/sieve/sieve.rb":"class Sieve\\n  attr_reader :limit, :candidates, :composites\\n\\n  def initialize(limit)\\n    @limit = limit\\n    @candidates = (2..limit).to_a\\n    @composites = {}\\n  end\\n\\n  def primes\\n    candidates.each_with_object([]) do |candidate, primes|\\n      next if composites.key?(candidate)\\n      primes \\u003c\\u003c candidate\\n      ((candidate * 2)..limit).step(candidate) do |multiple|\\n        composites[multiple] = true\\n      end\\n    end\\n  end\\nend"}
33	15	1e8b67cfe90010de207a3fa4	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	20	/python/wordy/wordy.py	2015-09-18 06:45:05	2015-09-18 06:45:05	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
34	15	b85f674d86fdd41fae41c140	superseded	ruby	saddle-points	class Matrix\r\n  def initialize(m)\r\n    @matrix = m.split("\\n").map { |x| x.scan(/\\d+/).map(&:to_i) }\r\n  end\r\n\r\n  def rows\r\n    @matrix\r\n  end\r\n\r\n  def columns\r\n    @matrix.transpose\r\n  end\r\n\r\n  def saddle_points\r\n    points = []\r\n    rows.each_with_index do |row, i|\r\n      row.each_with_index do |item, j|\r\n        if item == row.max and columns[j][i] == columns[j].min\r\n          points << [i, j]\r\n        end\r\n      end\r\n    end\r\n    points\r\n  end\r\nend\r	\N	\N	0	1	21	matrix.rb	2015-09-19 00:45:24	2015-09-19 00:45:24	{"matrix.rb":"class Matrix\\r\\n  def initialize(m)\\r\\n    @matrix = m.split(\\"\\\\n\\").map { |x| x.scan(/\\\\d+/).map(\\u0026:to_i) }\\r\\n  end\\r\\n\\r\\n  def rows\\r\\n    @matrix\\r\\n  end\\r\\n\\r\\n  def columns\\r\\n    @matrix.transpose\\r\\n  end\\r\\n\\r\\n  def saddle_points\\r\\n    points = []\\r\\n    rows.each_with_index do |row, i|\\r\\n      row.each_with_index do |item, j|\\r\\n        if item == row.max and columns[j][i] == columns[j].min\\r\\n          points \\u003c\\u003c [i, j]\\r\\n        end\\r\\n      end\\r\\n    end\\r\\n    points\\r\\n  end\\r\\nend\\r"}
35	15	0678bcb1f725f6f1df14cfa3	pending	ruby	saddle-points	class Matrix\r\n  def initialize(m)\r\n    @matrix = m.split("\\n").map { |x| x.scan(/\\d+/).map(&:to_i) }\r\n  end\r\n\r\n  def rows\r\n    @matrix\r\n  end\r\n\r\n  def columns\r\n    @matrix.transpose\r\n  end\r\n\r\n  def saddle_points\r\n    points = []\r\n    rows.each_with_index do |row, i|\r\n      row.each_with_index do |item, j|\r\n        if item == row.max and item == columns[j].min\r\n          points << [i, j]\r\n        end\r\n      end\r\n    end\r\n    points\r\n  end\r\nend\r	\N	\N	0	2	21	matrix.rb	2015-09-19 21:25:40	2015-09-19 21:25:40	{"matrix.rb":"class Matrix\\r\\n  def initialize(m)\\r\\n    @matrix = m.split(\\"\\\\n\\").map { |x| x.scan(/\\\\d+/).map(\\u0026:to_i) }\\r\\n  end\\r\\n\\r\\n  def rows\\r\\n    @matrix\\r\\n  end\\r\\n\\r\\n  def columns\\r\\n    @matrix.transpose\\r\\n  end\\r\\n\\r\\n  def saddle_points\\r\\n    points = []\\r\\n    rows.each_with_index do |row, i|\\r\\n      row.each_with_index do |item, j|\\r\\n        if item == row.max and item == columns[j].min\\r\\n          points \\u003c\\u003c [i, j]\\r\\n        end\\r\\n      end\\r\\n    end\\r\\n    points\\r\\n  end\\r\\nend\\r"}
36	15	d6c0be2f418bc1fba6e45f65	pending	python	word-count	from collections import Counter\n\n\ndef word_count(phrase):\n    return Counter(phrase.split())	\N	\N	0	2	22	wordcount.py	2015-09-20 20:38:38	2015-09-20 20:38:38	{"wordcount.py":"from collections import Counter\\n\\n\\ndef word_count(phrase):\\n    return Counter(phrase.split())"}
37	15	62f0284a0057c68695329bf1	superseded	python	word-count	from collections import defaultdict\n\n\ndef word_count(phrase):\n    word_count = defaultdict(lambda: 0)\n\n    for word in phrase.split():\n        word_count[word] += 1\n\n    return word_count	\N	\N	0	1	22	wordcount.py	2015-09-21 10:17:11	2015-09-21 10:17:11	{"wordcount.py":"from collections import defaultdict\\n\\n\\ndef word_count(phrase):\\n    word_count = defaultdict(lambda: 0)\\n\\n    for word in phrase.split():\\n        word_count[word] += 1\\n\\n    return word_count"}
38	15	d165dc8506b01bc50b650ea6	superseded	python	hamming	def distance(a, b):\n    if len(a) != len(b):\n        return\n\n    count = 0\n    for x in zip(a, b):\n        if x[0] != x[1]:\n            count += 1\n    return count	\N	\N	0	1	23	hamming.py	2015-09-19 03:16:09	2015-09-19 03:16:09	{"hamming.py":"def distance(a, b):\\n    if len(a) != len(b):\\n        return\\n\\n    count = 0\\n    for x in zip(a, b):\\n        if x[0] != x[1]:\\n            count += 1\\n    return count"}
39	15	f78d3f8aa7462f0f86613c36	pending	python	hamming	def distance(a, b):\n    if len(a) != len(b):\n        raise Exception('Argument lengths differ.')\n\n    count = 0\n    for x in zip(a, b):\n        if x[0] != x[1]:\n            count += 1\n    return count	\N	\N	0	2	23	hamming.py	2015-09-22 03:39:47	2015-09-22 03:39:47	{"hamming.py":"def distance(a, b):\\n    if len(a) != len(b):\\n        raise Exception('Argument lengths differ.')\\n\\n    count = 0\\n    for x in zip(a, b):\\n        if x[0] != x[1]:\\n            count += 1\\n    return count"}
42	15	cf1e4055ab301a2fb51ec2ec	done	ruby	roman-numerals	class Fixnum\n\n  def to_roman\n    i = self\n    s = ''\n    roman_mappings.each do |arabic, roman|\n      while i >= arabic\n        s << roman\n        i -= arabic\n      end\n    end\n    s\n  end\n\n  def roman_mappings\n    {\n      1000 => 'M',\n      900 => 'CM',\n      500 => 'D',\n      400 => 'CD',\n      100 => 'C',\n      90 => 'XC',\n      50 => 'L',\n      40 => 'XL',\n      10 => 'X',\n      9 => 'IX',\n      5 => 'V',\n      4 => 'IV',\n      1 => 'I',\n    }\n\n  end\n\nend	\N	\N	0	1	25	roman.rb	2015-09-18 20:03:42	2015-09-18 20:03:42	{"roman.rb":"class Fixnum\\n\\n  def to_roman\\n    i = self\\n    s = ''\\n    roman_mappings.each do |arabic, roman|\\n      while i \\u003e= arabic\\n        s \\u003c\\u003c roman\\n        i -= arabic\\n      end\\n    end\\n    s\\n  end\\n\\n  def roman_mappings\\n    {\\n      1000 =\\u003e 'M',\\n      900 =\\u003e 'CM',\\n      500 =\\u003e 'D',\\n      400 =\\u003e 'CD',\\n      100 =\\u003e 'C',\\n      90 =\\u003e 'XC',\\n      50 =\\u003e 'L',\\n      40 =\\u003e 'XL',\\n      10 =\\u003e 'X',\\n      9 =\\u003e 'IX',\\n      5 =\\u003e 'V',\\n      4 =\\u003e 'IV',\\n      1 =\\u003e 'I',\\n    }\\n\\n  end\\n\\nend"}
43	15	6a28b5724a73ac590a594d8e	pending	coffeescript	bob	unless String::trim then String::trim = -> @replace /^\\s+|\\s+$/g, ""\n\nclass Bob\n\they:\t(input) ->\n\t\t# check for all whitespace\n\t\tif "" is input.trim()\n\t\t\treturn "Fine. Be that way!"\n\t\t# check for caps\n\t\tif input is input.toUpperCase()\n\t\t\treturn "Woah, chill out!"\n\t\t# check for ?\n\t\tif input[-1..] is "?"\n\t\t\treturn "Sure."\n\t\t# default case\n\t\treturn "Whatever."\n\t\t\nmodule.exports = Bob	\N	\N	0	1	26	bob.coffee	2015-09-20 18:20:46	2015-09-20 18:20:46	{"bob.coffee":"unless String::trim then String::trim = -\\u003e @replace /^\\\\s+|\\\\s+$/g, \\"\\"\\n\\nclass Bob\\n\\they:\\t(input) -\\u003e\\n\\t\\t# check for all whitespace\\n\\t\\tif \\"\\" is input.trim()\\n\\t\\t\\treturn \\"Fine. Be that way!\\"\\n\\t\\t# check for caps\\n\\t\\tif input is input.toUpperCase()\\n\\t\\t\\treturn \\"Woah, chill out!\\"\\n\\t\\t# check for ?\\n\\t\\tif input[-1..] is \\"?\\"\\n\\t\\t\\treturn \\"Sure.\\"\\n\\t\\t# default case\\n\\t\\treturn \\"Whatever.\\"\\n\\t\\t\\nmodule.exports = Bob"}
44	15	713b012766bce54473de21d4	pending	python	bob	class Bob:\n    def hey(self, s):\n        if not s or s.isspace():\n            return 'Fine. Be that way!'\n        elif s.isupper():\n            return 'Woah, chill out!'\n        elif s[-1] == '?':\n            return 'Sure.'\n        else:\n            return 'Whatever.'	\N	\N	0	1	27	bob.py	2015-09-20 09:06:03	2015-09-20 09:06:03	{"bob.py":"class Bob:\\n    def hey(self, s):\\n        if not s or s.isspace():\\n            return 'Fine. Be that way!'\\n        elif s.isupper():\\n            return 'Woah, chill out!'\\n        elif s[-1] == '?':\\n            return 'Sure.'\\n        else:\\n            return 'Whatever.'"}
45	15	1f5983a13902b9132a34cf2b	pending	ruby	hamming	class Hamming \n\n      def Hamming.compute strandA, strandB \n        hamming_distance = 0\n        end_point = strandA.length\n        length_difference = strandA.length - strandB.length\n\n        if length_difference > 0\n            end_point = strandB.length\n        end\n\n        end_point -= 1;\n\n        for i in ( 0..end_point )\n               if strandA[i] != strandB[i]\n                    hamming_distance += 1\n               end\n        end\n\n        return hamming_distance\n\n    end\n\nend	\N	\N	0	1	28	hamming.rb	2015-09-20 02:24:42	2015-09-20 02:24:42	{"hamming.rb":"class Hamming \\n\\n      def Hamming.compute strandA, strandB \\n        hamming_distance = 0\\n        end_point = strandA.length\\n        length_difference = strandA.length - strandB.length\\n\\n        if length_difference \\u003e 0\\n            end_point = strandB.length\\n        end\\n\\n        end_point -= 1;\\n\\n        for i in ( 0..end_point )\\n               if strandA[i] != strandB[i]\\n                    hamming_distance += 1\\n               end\\n        end\\n\\n        return hamming_distance\\n\\n    end\\n\\nend"}
46	15	7035d4a5ea23bb8d2eba106e	superseded	fsharp	robot-name	﻿namespace RobotName\r\n\r\ntype RobotName() = \r\n    let random = System.Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\r\n    let randomDigit () = (random.Next() % 10).ToString()\r\n\r\n    let buildName () =\r\n        (seq {0..1} \r\n         |> Seq.map (fun _ -> randomLetter())\r\n         |> String.concat "")\r\n        +\r\n        (seq {0..2}\r\n         |> Seq.map (fun _ -> randomDigit())\r\n         |> String.concat "")\r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	1	29	RobotName.fs	2015-09-18 11:45:00	2015-09-18 11:45:00	{"RobotName.fs":"﻿namespace RobotName\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = System.Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\\r\\n    let randomDigit () = (random.Next() % 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        (seq {0..1} \\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomLetter())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n        +\\r\\n        (seq {0..2}\\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomDigit())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
47	15	39e0e7698c3061e490b6cd99	done	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\nopen System.Collections.Generic\r\n\r\ntype RobotName() = \r\n    static let usedNames = new List<String>()\r\n\r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let rec buildName () =\r\n        let candidate = \r\n            String.Concat [ randomLetter(); randomLetter(); \r\n                            randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n        if usedNames.Contains(candidate) then \r\n            buildName() \r\n        else \r\n            usedNames.Add(candidate)\r\n            candidate   \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	3	29	RobotName.fs	2015-09-18 22:58:08	2015-09-18 22:58:08	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\nopen System.Collections.Generic\\r\\n\\r\\ntype RobotName() = \\r\\n    static let usedNames = new List\\u003cString\\u003e()\\r\\n\\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let rec buildName () =\\r\\n        let candidate = \\r\\n            String.Concat [ randomLetter(); randomLetter(); \\r\\n                            randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n        if usedNames.Contains(candidate) then \\r\\n            buildName() \\r\\n        else \\r\\n            usedNames.Add(candidate)\\r\\n            candidate   \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
65	22	7666b00b050245d3a2081738	pending	go	leap	package leap\n\n\n//Returns true if the year is a leap year and false otherwise. \n//Takes the year as an int.\nfunc IsLeapYear(year int) bool {\n\t// Is leap if evenly divisible by 4 and not by 100\n\tif year%4 == 0 && year%100 != 0 {\n\t\treturn true\n\t// Also leap if divisible by 400\n\t} else if year%400 == 0 {\n\t\treturn true\n\t}\n\t// All others are not leap\n\treturn false\n}	\N	\N	0	2	37	leap.go	2015-05-27 02:53:33	2015-05-27 02:53:33	{"leap.go":"package leap\\n\\n\\n//Returns true if the year is a leap year and false otherwise. \\n//Takes the year as an int.\\nfunc IsLeapYear(year int) bool {\\n\\t// Is leap if evenly divisible by 4 and not by 100\\n\\tif year%4 == 0 \\u0026\\u0026 year%100 != 0 {\\n\\t\\treturn true\\n\\t// Also leap if divisible by 400\\n\\t} else if year%400 == 0 {\\n\\t\\treturn true\\n\\t}\\n\\t// All others are not leap\\n\\treturn false\\n}"}
48	15	9720018e9942246bff8e609d	superseded	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\n\r\ntype RobotName() = \r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let buildName () =\r\n        String.Concat [ randomLetter(); randomLetter(); \r\n                        randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	2	29	RobotName.fs	2015-09-19 23:57:08	2015-09-19 23:57:08	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        String.Concat [ randomLetter(); randomLetter(); \\r\\n                        randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
49	15	68307911366b9aa0860032aa	done	clojure	binary	(ns binary\n     (:import java.lang.Math ))\n\n (defn to-decimal-seq [binaryStr]\n       (let [tidyStr (clojure.string/replace binaryStr #"[^0-9]" "0")  ;Treat invalid input as binary 0\n             idx-map (map-indexed vector  (clojure.string/reverse tidyStr))]\n            (for [[x v] idx-map]\n                 (do\n                  ;(println (format " (2 ^ %1s) * %2s" x v ))\n                  (* (Math/pow 2 (read-string (str x))) (read-string (str v)))))))\n\n\n (defn to-decimal [binaryStr]\n       (let [col (to-decimal-seq binaryStr)]\n            (int (apply + col))))	\N	\N	0	1	30	/clojure/binary/binary.clj	2015-09-18 07:21:00	2015-09-18 07:21:00	{"/clojure/binary/binary.clj":"(ns binary\\n     (:import java.lang.Math ))\\n\\n (defn to-decimal-seq [binaryStr]\\n       (let [tidyStr (clojure.string/replace binaryStr #\\"[^0-9]\\" \\"0\\")  ;Treat invalid input as binary 0\\n             idx-map (map-indexed vector  (clojure.string/reverse tidyStr))]\\n            (for [[x v] idx-map]\\n                 (do\\n                  ;(println (format \\" (2 ^ %1s) * %2s\\" x v ))\\n                  (* (Math/pow 2 (read-string (str x))) (read-string (str v)))))))\\n\\n\\n (defn to-decimal [binaryStr]\\n       (let [col (to-decimal-seq binaryStr)]\\n            (int (apply + col))))"}
50	15	2a93e39c3b763497d87d41e0	pending	haskell	leap	module LeapYear (isLeapYear) where\n\nisLeapYear :: Int -> Bool\nisLeapYear y = isDivisibleBy 4 &&\n               (not (isDivisibleBy 100) || isDivisibleBy 400)\n  where\n    isDivisibleBy n = rem y n == 0	\N	\N	0	4	31	/haskell/leap/LeapYear.hs	2015-09-18 04:28:10	2015-09-18 04:28:10	{"/haskell/leap/LeapYear.hs":"module LeapYear (isLeapYear) where\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear y = isDivisibleBy 4 \\u0026\\u0026\\n               (not (isDivisibleBy 100) || isDivisibleBy 400)\\n  where\\n    isDivisibleBy n = rem y n == 0"}
51	15	9ddb0cb846958ec9674cc40e	superseded	haskell	leap	module LeapYear (isLeapYear) where\n\nisDivisibleBy a b = rem a b == 0\nisNotDivisibleBy a b = rem a b /= 0\n\nisLeapYear :: Int -> Bool\nisLeapYear y = y `isDivisibleBy` 4 &&\n               (y `isNotDivisibleBy` 100 || y `isDivisibleBy` 400)	\N	\N	0	2	31	/haskell/leap/LeapYear.hs	2015-09-18 21:55:20	2015-09-18 21:55:20	{"/haskell/leap/LeapYear.hs":"module LeapYear (isLeapYear) where\\n\\nisDivisibleBy a b = rem a b == 0\\nisNotDivisibleBy a b = rem a b /= 0\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear y = y `isDivisibleBy` 4 \\u0026\\u0026\\n               (y `isNotDivisibleBy` 100 || y `isDivisibleBy` 400)"}
52	15	6f0cecd3eb793cd7db3137cf	superseded	haskell	leap	module LeapYear (isLeapYear) where\n\nisLeapYear :: Int -> Bool\nisLeapYear y = (rem y 4 == 0) &&\n               ((rem y 100 /= 0) ||\n                (rem y 400 == 0))	\N	\N	0	1	31	/haskell/leap/LeapYear.hs	2015-09-19 06:24:39	2015-09-19 06:24:39	{"/haskell/leap/LeapYear.hs":"module LeapYear (isLeapYear) where\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear y = (rem y 4 == 0) \\u0026\\u0026\\n               ((rem y 100 /= 0) ||\\n                (rem y 400 == 0))"}
53	15	4307144569e00e7c57838160	superseded	haskell	leap	module LeapYear (isLeapYear) where\n\nisLeapYear :: Int -> Bool\nisLeapYear y = isDivisibleBy 4 &&\n               ((not . isDivisibleBy) 100 || isDivisibleBy 400)\n  where\n    isDivisibleBy n = rem y n == 0	\N	\N	0	3	31	/haskell/leap/LeapYear.hs	2015-09-20 21:39:44	2015-09-20 21:39:44	{"/haskell/leap/LeapYear.hs":"module LeapYear (isLeapYear) where\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear y = isDivisibleBy 4 \\u0026\\u0026\\n               ((not . isDivisibleBy) 100 || isDivisibleBy 400)\\n  where\\n    isDivisibleBy n = rem y n == 0"}
54	15	afc98f5cba6093365f8b323b	done	haskell	accumulate	module Accumulate (accumulate) where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate _ [] = []\naccumulate f (x:xs) = f x : accumulate f xs	\N	\N	0	2	32	Accumulate.hs	2015-09-18 06:51:33	2015-09-18 06:51:33	{"Accumulate.hs":"module Accumulate (accumulate) where\\n\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\naccumulate _ [] = []\\naccumulate f (x:xs) = f x : accumulate f xs"}
55	15	5323bb3f611d44788db6e24e	superseded	haskell	accumulate	module Accumulate (accumulate) where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate f xs = accumulate' f xs []\n\naccumulate' :: (a -> b) -> [a] -> [b] -> [b]\naccumulate' _ [] acc = reverse acc\naccumulate' f (x:xs) acc = accumulate' f xs (f x:acc )	\N	\N	0	1	32	Accumulate.hs	2015-09-19 08:32:26	2015-09-19 08:32:26	{"Accumulate.hs":"module Accumulate (accumulate) where\\n\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\naccumulate f xs = accumulate' f xs []\\n\\naccumulate' :: (a -\\u003e b) -\\u003e [a] -\\u003e [b] -\\u003e [b]\\naccumulate' _ [] acc = reverse acc\\naccumulate' f (x:xs) acc = accumulate' f xs (f x:acc )"}
56	15	4af1465efa269aad523e7fc7	done	javascript	beer-song	var Beer = function(){\n\tvar moreBot1,\n\t\t\tmoreBot2,\n\t\t\tlessBot,\n\t\t\tvodka,\n\t\t\tfinalSong,\n\t\t\tpartOne = function(){ return (moreBot1 + " of beer on the wall, "+ moreBot2 +" of beer.\\n");},\n\t\t\tpartTwo = function(){ return ("Take "+vodka+" down and pass it around, "+lessBot+" of beer on the wall.\\n");},\n\t\t\tpartLast = function(){ return ('Go to the store and buy some more, 99 bottles of beer on the wall.\\n');};\n\n\tthis.verse = function(numBot){\n\t\tmoreBot1 = numBot > 1 ? numBot + ' bottles' : (numBot === 1 ? '1 bottle' : 'No more bottles');\n\t\tmoreBot2 = numBot > 1 ? numBot + ' bottles' : (numBot === 1 ? '1 bottle' : 'no more bottles');\n\t\tlessBot = numBot > 1 ? numBot-1 + ' bottles' : 'no more bottles';\n\t\tvodka = numBot > 1 ? 'one' : 'it';\n\t\tfinalSong = numBot >= 1 ? partOne() + partTwo() : partOne() + partLast();\n\t\treturn finalSong; \n\t};\n\n\tthis.sing = function (x, y){\n\t\tvar comboSong = '';\n\t\twhile (x >= (y||0)){\n\t\t\tcomboSong += this.verse(x);\n\t\t\tx--;\n\t\t\tif ((x - y) < 0) break;\n\t\t\tcomboSong += '\\n';\n\t\t}\n\t\treturn comboSong;\n\t};\n};\nvar Alc = new Beer();\nmodule.exports = Alc;	\N	\N	0	2	33	beer-song.js	2015-09-20 05:51:29	2015-09-20 05:51:29	{"beer-song.js":"var Beer = function(){\\n\\tvar moreBot1,\\n\\t\\t\\tmoreBot2,\\n\\t\\t\\tlessBot,\\n\\t\\t\\tvodka,\\n\\t\\t\\tfinalSong,\\n\\t\\t\\tpartOne = function(){ return (moreBot1 + \\" of beer on the wall, \\"+ moreBot2 +\\" of beer.\\\\n\\");},\\n\\t\\t\\tpartTwo = function(){ return (\\"Take \\"+vodka+\\" down and pass it around, \\"+lessBot+\\" of beer on the wall.\\\\n\\");},\\n\\t\\t\\tpartLast = function(){ return ('Go to the store and buy some more, 99 bottles of beer on the wall.\\\\n');};\\n\\n\\tthis.verse = function(numBot){\\n\\t\\tmoreBot1 = numBot \\u003e 1 ? numBot + ' bottles' : (numBot === 1 ? '1 bottle' : 'No more bottles');\\n\\t\\tmoreBot2 = numBot \\u003e 1 ? numBot + ' bottles' : (numBot === 1 ? '1 bottle' : 'no more bottles');\\n\\t\\tlessBot = numBot \\u003e 1 ? numBot-1 + ' bottles' : 'no more bottles';\\n\\t\\tvodka = numBot \\u003e 1 ? 'one' : 'it';\\n\\t\\tfinalSong = numBot \\u003e= 1 ? partOne() + partTwo() : partOne() + partLast();\\n\\t\\treturn finalSong; \\n\\t};\\n\\n\\tthis.sing = function (x, y){\\n\\t\\tvar comboSong = '';\\n\\t\\twhile (x \\u003e= (y||0)){\\n\\t\\t\\tcomboSong += this.verse(x);\\n\\t\\t\\tx--;\\n\\t\\t\\tif ((x - y) \\u003c 0) break;\\n\\t\\t\\tcomboSong += '\\\\n';\\n\\t\\t}\\n\\t\\treturn comboSong;\\n\\t};\\n};\\nvar Alc = new Beer();\\nmodule.exports = Alc;"}
57	15	46dd284a9c5da5a9d04cc26c	superseded	javascript	beer-song	var Beer = function(){\n\tvar moreBot1,\n\t\t\tmoreBot2,\n\t\t\tlessBot,\n\t\t\tvodka = 'one',\n\t\t\tpartOne = function(){ return (moreBot1 + " of beer on the wall, "+ moreBot2 +" of beer.\\n");},\n\t\t\tpartTwo = function(){ return ("Take "+vodka+" down and pass it around, "+lessBot+" of beer on the wall.\\n");},\n\t\t\tpartLast = function(){ return ('Go to the store and buy some more, 99 bottles of beer on the wall.\\n');};\n\n\tthis.verse = function(numBot){\n\t\tif (numBot > 1){\n\t\t\tmoreBot1 = numBot + ' bottles';\n\t\t\tmoreBot2 = numBot + ' bottles';\n\t\t\tlessBot = numBot-1 + ' bottles';\n\t\t\tvodka = 'one';\n\t\t\treturn partOne() + partTwo();\n\t\t} else if (numBot === 1) {\n\t\t\tmoreBot1 = '1 bottle';\n\t\t\tmoreBot2 = '1 bottle';\n\t\t\tvodka = 'it';\n\t\t\tlessBot = 'no more bottles';\n\t\t\treturn partOne() + partTwo();\n\t\t} else {\n\t\t\tmoreBot1 = 'No more bottles';\n\t\t\tmoreBot2 = 'no more bottles';\n\t\t\treturn partOne() + partLast();\n\t\t}\n\t};\n\n\tthis.sing = function (){\n\t\tvar songEnd = arguments[1] === undefined ? 0 : arguments[1],\n\t\t\t\tsongHolder = '',\n\t\t\t\tsongBegin = arguments[0];\n\t\twhile (songBegin >= songEnd){\n\t\t\tsongHolder += this.verse(songBegin);\n\t\t\tsongBegin--;\n\t\t\tif (songBegin-songEnd < 0) break;\n\t\t\tsongHolder += '\\n';\n\t\t}\n\t\treturn songHolder;\n\t};\n};\n\nvar Alc = new Beer();\n\nmodule.exports = Alc;	\N	\N	0	1	33	beer-song.js	2015-09-20 10:47:57	2015-09-20 10:47:57	{"beer-song.js":"var Beer = function(){\\n\\tvar moreBot1,\\n\\t\\t\\tmoreBot2,\\n\\t\\t\\tlessBot,\\n\\t\\t\\tvodka = 'one',\\n\\t\\t\\tpartOne = function(){ return (moreBot1 + \\" of beer on the wall, \\"+ moreBot2 +\\" of beer.\\\\n\\");},\\n\\t\\t\\tpartTwo = function(){ return (\\"Take \\"+vodka+\\" down and pass it around, \\"+lessBot+\\" of beer on the wall.\\\\n\\");},\\n\\t\\t\\tpartLast = function(){ return ('Go to the store and buy some more, 99 bottles of beer on the wall.\\\\n');};\\n\\n\\tthis.verse = function(numBot){\\n\\t\\tif (numBot \\u003e 1){\\n\\t\\t\\tmoreBot1 = numBot + ' bottles';\\n\\t\\t\\tmoreBot2 = numBot + ' bottles';\\n\\t\\t\\tlessBot = numBot-1 + ' bottles';\\n\\t\\t\\tvodka = 'one';\\n\\t\\t\\treturn partOne() + partTwo();\\n\\t\\t} else if (numBot === 1) {\\n\\t\\t\\tmoreBot1 = '1 bottle';\\n\\t\\t\\tmoreBot2 = '1 bottle';\\n\\t\\t\\tvodka = 'it';\\n\\t\\t\\tlessBot = 'no more bottles';\\n\\t\\t\\treturn partOne() + partTwo();\\n\\t\\t} else {\\n\\t\\t\\tmoreBot1 = 'No more bottles';\\n\\t\\t\\tmoreBot2 = 'no more bottles';\\n\\t\\t\\treturn partOne() + partLast();\\n\\t\\t}\\n\\t};\\n\\n\\tthis.sing = function (){\\n\\t\\tvar songEnd = arguments[1] === undefined ? 0 : arguments[1],\\n\\t\\t\\t\\tsongHolder = '',\\n\\t\\t\\t\\tsongBegin = arguments[0];\\n\\t\\twhile (songBegin \\u003e= songEnd){\\n\\t\\t\\tsongHolder += this.verse(songBegin);\\n\\t\\t\\tsongBegin--;\\n\\t\\t\\tif (songBegin-songEnd \\u003c 0) break;\\n\\t\\t\\tsongHolder += '\\\\n';\\n\\t\\t}\\n\\t\\treturn songHolder;\\n\\t};\\n};\\n\\nvar Alc = new Beer();\\n\\nmodule.exports = Alc;"}
58	15	620068f9e4f65a3ff55425e2	superseded	javascript	rna-transcription	function toRna(sequence) {\n    if (!sequence.trim() || /[^GCTA]+/.test(sequence))\n        throw new RangeError('Given sequence was not a DNA sequence');\n\n    var complements = {\n        G: 'C',\n        C: 'G',\n        T: 'A',\n        A: 'U'\n    }, result = '';\n\n    sequence.trim().toUpperCase().split('').forEach(function(nucleotide) {\n        result += complements[nucleotide];\n    });\n\n    return result;\n}\n\nmodule.exports = toRna;	\N	\N	0	1	34	rna-transcription.js	2015-09-18 10:03:27	2015-09-18 10:03:27	{"rna-transcription.js":"function toRna(sequence) {\\n    if (!sequence.trim() || /[^GCTA]+/.test(sequence))\\n        throw new RangeError('Given sequence was not a DNA sequence');\\n\\n    var complements = {\\n        G: 'C',\\n        C: 'G',\\n        T: 'A',\\n        A: 'U'\\n    }, result = '';\\n\\n    sequence.trim().toUpperCase().split('').forEach(function(nucleotide) {\\n        result += complements[nucleotide];\\n    });\\n\\n    return result;\\n}\\n\\nmodule.exports = toRna;"}
59	15	39905364a7a6896b77595c97	done	javascript	rna-transcription	function toRna(sequence) {\n    if (!sequence.trim() || /[^GCTA]+/.test(sequence))\n        throw new RangeError('Given sequence was not a DNA sequence');\n\n    var complements = {\n        G: 'C',\n        C: 'G',\n        T: 'A',\n        A: 'U'\n    };\n\n    return sequence.trim().split('').map(function(nucleotide) {\n        return complements[nucleotide];\n    }).join('');\n}\n\nmodule.exports = toRna;	\N	\N	0	2	34	rna-transcription.js	2015-09-21 00:29:14	2015-09-21 00:29:14	{"rna-transcription.js":"function toRna(sequence) {\\n    if (!sequence.trim() || /[^GCTA]+/.test(sequence))\\n        throw new RangeError('Given sequence was not a DNA sequence');\\n\\n    var complements = {\\n        G: 'C',\\n        C: 'G',\\n        T: 'A',\\n        A: 'U'\\n    };\\n\\n    return sequence.trim().split('').map(function(nucleotide) {\\n        return complements[nucleotide];\\n    }).join('');\\n}\\n\\nmodule.exports = toRna;"}
60	22	fa16ed2e635753cdcfceb6d7	done	scala	hamming	object Hamming {\r\n   def compute(left:String, right:String):Int = {\r\n     left zip right map {\r\n       case (l, r) => l == r\r\n     } count(_ == true)\r\n   }\r\n }\r	\N	\N	0	2	35	hamming.scala	2015-04-16 00:21:34	2015-04-16 00:21:34	{"hamming.scala":"object Hamming {\\r\\n   def compute(left:String, right:String):Int = {\\r\\n     left zip right map {\\r\\n       case (l, r) =\\u003e l == r\\r\\n     } count(_ == true)\\r\\n   }\\r\\n }\\r"}
61	22	471ddb13197d4c0ac9dcedf4	superseded	scala	hamming	object Hamming {\r\n   def compute(left:String, right:String):Int = {\r\n     left zip right map {\r\n       case (l, r) =>\r\n         l == r match {\r\n           case true => 0\r\n           case false => 1\r\n         }\r\n     } count(_ == 1)\r\n   }\r\n }\r	\N	\N	0	1	35	hamming.scala	2015-06-09 11:25:14	2015-06-09 11:25:14	{"hamming.scala":"object Hamming {\\r\\n   def compute(left:String, right:String):Int = {\\r\\n     left zip right map {\\r\\n       case (l, r) =\\u003e\\r\\n         l == r match {\\r\\n           case true =\\u003e 0\\r\\n           case false =\\u003e 1\\r\\n         }\\r\\n     } count(_ == 1)\\r\\n   }\\r\\n }\\r"}
62	22	0a20b8ce983e70f8b7087de9	pending	ruby	nucleotide-count	class DNA\n  Nucleotides = {"A" => 0, "T" => 0, "C" => 0, "G" => 0}\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n    @result = Nucleotides.dup\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\n  end\n\n  def nucleotide_counts\n    @result\n  end\n\n  def count(nucleotide)\n    if nucleotide == "U"\n      0\n    elsif Nucleotides.keys.include?(nucleotide)\n      @result[nucleotide]\n    else\n      raise(ArgumentError, "Argument Error")\n    end\n  end\nend	\N	\N	0	2	36	nucleotide-count.rb	2015-04-23 10:54:16	2015-04-23 10:54:16	{"nucleotide-count.rb":"class DNA\\n  Nucleotides = {\\"A\\" =\\u003e 0, \\"T\\" =\\u003e 0, \\"C\\" =\\u003e 0, \\"G\\" =\\u003e 0}\\n\\n  def initialize(dna_string)\\n    @dna_string = dna_string\\n    @result = Nucleotides.dup\\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\\n  end\\n\\n  def nucleotide_counts\\n    @result\\n  end\\n\\n  def count(nucleotide)\\n    if nucleotide == \\"U\\"\\n      0\\n    elsif Nucleotides.keys.include?(nucleotide)\\n      @result[nucleotide]\\n    else\\n      raise(ArgumentError, \\"Argument Error\\")\\n    end\\n  end\\nend"}
63	22	872c44eae1307f9a81ec4e83	superseded	ruby	nucleotide-count	class DNA\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n    @result = {"A"=>0, "T"=>0, "C"=>0, "G"=>0}\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\n  end\n\n  def nucleotide_counts\n    @result\n  end\n\n  def count(nucleotide)\n    if nucleotide == "U"\n      0\n    elsif ["A", "T", "C", "G"].include?(nucleotide)\n      @result[nucleotide]\n    else\n      raise(ArgumentError)\n    end\n  end\nend	\N	\N	0	1	36	nucleotide-count.rb	2015-08-16 20:50:41	2015-08-16 20:50:41	{"nucleotide-count.rb":"class DNA\\n\\n  def initialize(dna_string)\\n    @dna_string = dna_string\\n    @result = {\\"A\\"=\\u003e0, \\"T\\"=\\u003e0, \\"C\\"=\\u003e0, \\"G\\"=\\u003e0}\\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\\n  end\\n\\n  def nucleotide_counts\\n    @result\\n  end\\n\\n  def count(nucleotide)\\n    if nucleotide == \\"U\\"\\n      0\\n    elsif [\\"A\\", \\"T\\", \\"C\\", \\"G\\"].include?(nucleotide)\\n      @result[nucleotide]\\n    else\\n      raise(ArgumentError)\\n    end\\n  end\\nend"}
64	22	afed01748cab6ec37de259bf	superseded	go	leap	package leap\n\n/*\n * Determine if year is leap year or not\n * @param year: The year expressed as int \n * @return: true if leap year, otherwise false\n*/\nfunc IsLeapYear(year int) bool {\n    // Is leap if evenly divisible by 4 and not by 100  \n    if (year % 4 == 0 && year % 100 != 0) {\n        return true\n    // Also leap if divisible by 400\n    } else if (year % 400 == 0) {\n        return true\n    // All others are not leap\n    } else {\n        return false\n    }\n}	\N	\N	0	1	37	leap.go	2015-05-05 18:56:19	2015-05-05 18:56:19	{"leap.go":"package leap\\n\\n/*\\n * Determine if year is leap year or not\\n * @param year: The year expressed as int \\n * @return: true if leap year, otherwise false\\n*/\\nfunc IsLeapYear(year int) bool {\\n    // Is leap if evenly divisible by 4 and not by 100  \\n    if (year % 4 == 0 \\u0026\\u0026 year % 100 != 0) {\\n        return true\\n    // Also leap if divisible by 400\\n    } else if (year % 400 == 0) {\\n        return true\\n    // All others are not leap\\n    } else {\\n        return false\\n    }\\n}"}
66	22	b123ba5726c31eedfed74c8a	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	38	/python/wordy/wordy.py	2015-06-27 21:41:47	2015-06-27 21:41:47	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
67	22	3678cdc9a4e068996adf1a67	done	haskell	robot-name	module Robot (Robot, robotName, mkRobot, resetName) where\n\n\nimport Control.Concurrent (MVar, readMVar, swapMVar, newMVar)\nimport Control.Monad (void)\nimport System.Random (randomRIO)\n\ndata Robot = Robot {\n  getName :: MVar String\n}\n\nmkRobot :: IO Robot\nmkRobot = generateName >>= newMVar >>= return . Robot\n\nrobotName :: Robot -> IO String\nrobotName r = readMVar $ getName r\n\nresetName :: Robot -> IO()\nresetName r = void(generateName >>= swapMVar (getName r))\n\ngenerateName :: IO String\ngenerateName = mapM randomRIO name\n  where name = [char, char, int, int, int]\n        char = ('A', 'Z')\n        int  = ('0', '9')	\N	\N	0	1	39	Robot.hs	2015-07-02 05:40:43	2015-07-02 05:40:43	{"Robot.hs":"module Robot (Robot, robotName, mkRobot, resetName) where\\n\\n\\nimport Control.Concurrent (MVar, readMVar, swapMVar, newMVar)\\nimport Control.Monad (void)\\nimport System.Random (randomRIO)\\n\\ndata Robot = Robot {\\n  getName :: MVar String\\n}\\n\\nmkRobot :: IO Robot\\nmkRobot = generateName \\u003e\\u003e= newMVar \\u003e\\u003e= return . Robot\\n\\nrobotName :: Robot -\\u003e IO String\\nrobotName r = readMVar $ getName r\\n\\nresetName :: Robot -\\u003e IO()\\nresetName r = void(generateName \\u003e\\u003e= swapMVar (getName r))\\n\\ngenerateName :: IO String\\ngenerateName = mapM randomRIO name\\n  where name = [char, char, int, int, int]\\n        char = ('A', 'Z')\\n        int  = ('0', '9')"}
68	22	419ee2d6fd68f24b44acf9f6	done	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	3	40	year.py	2015-04-14 01:35:38	2015-04-14 01:35:38	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
69	22	55d1d8e63050639967ee12ef	superseded	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	1	40	year.py	2015-05-07 02:24:54	2015-05-07 02:24:54	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
70	22	654cd61d0721f1033ef698bc	superseded	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) \nor divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	2	40	year.py	2015-07-01 00:44:27	2015-07-01 00:44:27	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) \\nor divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
71	22	4e5b3344ff6c0a6e202abce0	superseded	fsharp	robot-name	﻿namespace RobotName\r\n\r\ntype RobotName() = \r\n    let random = System.Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\r\n    let randomDigit () = (random.Next() % 10).ToString()\r\n\r\n    let buildName () =\r\n        (seq {0..1} \r\n         |> Seq.map (fun _ -> randomLetter())\r\n         |> String.concat "")\r\n        +\r\n        (seq {0..2}\r\n         |> Seq.map (fun _ -> randomDigit())\r\n         |> String.concat "")\r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	1	41	RobotName.fs	2015-06-28 21:24:58	2015-06-28 21:24:58	{"RobotName.fs":"﻿namespace RobotName\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = System.Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\\r\\n    let randomDigit () = (random.Next() % 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        (seq {0..1} \\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomLetter())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n        +\\r\\n        (seq {0..2}\\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomDigit())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
72	22	c346eed34a3df350d313634c	done	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\nopen System.Collections.Generic\r\n\r\ntype RobotName() = \r\n    static let usedNames = new List<String>()\r\n\r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let rec buildName () =\r\n        let candidate = \r\n            String.Concat [ randomLetter(); randomLetter(); \r\n                            randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n        if usedNames.Contains(candidate) then \r\n            buildName() \r\n        else \r\n            usedNames.Add(candidate)\r\n            candidate   \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	3	41	RobotName.fs	2015-07-17 21:28:34	2015-07-17 21:28:34	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\nopen System.Collections.Generic\\r\\n\\r\\ntype RobotName() = \\r\\n    static let usedNames = new List\\u003cString\\u003e()\\r\\n\\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let rec buildName () =\\r\\n        let candidate = \\r\\n            String.Concat [ randomLetter(); randomLetter(); \\r\\n                            randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n        if usedNames.Contains(candidate) then \\r\\n            buildName() \\r\\n        else \\r\\n            usedNames.Add(candidate)\\r\\n            candidate   \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
234	21	5070b107aec6ed7d53ab4a3c	superseded	scala	hamming	object Hamming {\r\n   def compute(left:String, right:String):Int = {\r\n     left zip right map {\r\n       case (l, r) =>\r\n         l == r match {\r\n           case true => 0\r\n           case false => 1\r\n         }\r\n     } count(_ == 1)\r\n   }\r\n }\r	\N	\N	0	1	151	hamming.scala	2015-09-08 18:00:10	2015-09-08 18:00:10	{"hamming.scala":"object Hamming {\\r\\n   def compute(left:String, right:String):Int = {\\r\\n     left zip right map {\\r\\n       case (l, r) =\\u003e\\r\\n         l == r match {\\r\\n           case true =\\u003e 0\\r\\n           case false =\\u003e 1\\r\\n         }\\r\\n     } count(_ == 1)\\r\\n   }\\r\\n }\\r"}
73	22	ab35bfe356d4ca4e1b4f2a5e	superseded	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\n\r\ntype RobotName() = \r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let buildName () =\r\n        String.Concat [ randomLetter(); randomLetter(); \r\n                        randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	2	41	RobotName.fs	2015-07-28 12:20:18	2015-07-28 12:20:18	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        String.Concat [ randomLetter(); randomLetter(); \\r\\n                        randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
74	22	27b2510521566e489075115e	pending	python	bob	#\n# Skeleton file for the Python "Bob" exercise.\n#\ndef hey(what):\n\t#I checked for upercase first since it had the most cases.\n\tif what.isupper():\n\t\tsay = "Whoa, chill out!"\n\t#I originally check for a ? anywhere in the string, but I guess that doesn't count, seems ambiguous.\n\telif what.endswith("?"):\n\t\tsay = "Sure."\n\t#I checked this last since it has the most complexity. ispace checks for whitespace characters, while "" takes in strings that are empty, but declared.\n\telif what.isspace() or what == "":\n\t\tsay = "Fine. Be that way!"\n\t#Catchall\n\telse:\n\t\tsay = "Whatever."\n\treturn say	\N	\N	0	1	42	bob.py	2015-08-11 23:42:31	2015-08-11 23:42:31	{"bob.py":"#\\n# Skeleton file for the Python \\"Bob\\" exercise.\\n#\\ndef hey(what):\\n\\t#I checked for upercase first since it had the most cases.\\n\\tif what.isupper():\\n\\t\\tsay = \\"Whoa, chill out!\\"\\n\\t#I originally check for a ? anywhere in the string, but I guess that doesn't count, seems ambiguous.\\n\\telif what.endswith(\\"?\\"):\\n\\t\\tsay = \\"Sure.\\"\\n\\t#I checked this last since it has the most complexity. ispace checks for whitespace characters, while \\"\\" takes in strings that are empty, but declared.\\n\\telif what.isspace() or what == \\"\\":\\n\\t\\tsay = \\"Fine. Be that way!\\"\\n\\t#Catchall\\n\\telse:\\n\\t\\tsay = \\"Whatever.\\"\\n\\treturn say"}
75	22	bd640d2b7fc9f1bd6a1c13ca	pending	python	beer-song	def bottles(n):\n\n\tif n == 0:\n\t\treturn "no more bottles"\n\tif n == 1:\n\t\treturn "1 bottle"\n\treturn "%d bottles" % n\n\ndef verse(n):\n\tres =  "%s of beer on the wall, %s of beer.\\n" % (bottles(n).capitalize(), bottles(n))\n\tif n == 0:\n\t\tres += "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n\telif n == 1:\n\t\tres += "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n\telse:\n\t\tres += "Take one down and pass it around, %s of beer on the wall.\\n" % bottles(n-1)\n\treturn res\n\ndef song(hi, low = 0):\n\treturn ''.join(\n\t\tverse(n) + '\\n'\n\t\tfor n in xrange(hi, low - 1, -1)\n\t)	\N	\N	0	1	43	/python/beer-song/beer.py	2015-04-24 15:33:27	2015-04-24 15:33:27	{"/python/beer-song/beer.py":"def bottles(n):\\n\\n\\tif n == 0:\\n\\t\\treturn \\"no more bottles\\"\\n\\tif n == 1:\\n\\t\\treturn \\"1 bottle\\"\\n\\treturn \\"%d bottles\\" % n\\n\\ndef verse(n):\\n\\tres =  \\"%s of beer on the wall, %s of beer.\\\\n\\" % (bottles(n).capitalize(), bottles(n))\\n\\tif n == 0:\\n\\t\\tres += \\"Go to the store and buy some more, 99 bottles of beer on the wall.\\\\n\\"\\n\\telif n == 1:\\n\\t\\tres += \\"Take it down and pass it around, no more bottles of beer on the wall.\\\\n\\"\\n\\telse:\\n\\t\\tres += \\"Take one down and pass it around, %s of beer on the wall.\\\\n\\" % bottles(n-1)\\n\\treturn res\\n\\ndef song(hi, low = 0):\\n\\treturn ''.join(\\n\\t\\tverse(n) + '\\\\n'\\n\\t\\tfor n in xrange(hi, low - 1, -1)\\n\\t)"}
76	22	51cca719bd8afe8526b7987f	superseded	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule OctalSeq( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readOct' 0\n  where \n    readOct' acc "" = acc `seq` acc\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\n      where\n        toOctVal '0' = 0\n        toOctVal '1' = 1\n        toOctVal '2' = 2\n        toOctVal '3' = 3\n        toOctVal '4' = 4\n        toOctVal '5' = 5\n        toOctVal '6' = 6\n        toOctVal '7' = 7\n        toOctVal  _  = error "invalid digit"\n\nshowOct :: Integral a => a -> String\nshowOct n | n < 0 = ""\n          | n == 0 = "0"\n          | otherwise = octDigitsP "" n\n  where\n    octDigitsP ds 0 = ds `seq` ds\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` 8\n        dc = toOctChar $! d\n        toOctChar 0 = '0'\n        toOctChar 1 = '1'\n        toOctChar 2 = '2'\n        toOctChar 3 = '3'\n        toOctChar 4 = '4'\n        toOctChar 5 = '5'\n        toOctChar 6 = '6'\n        toOctChar 7 = '7'\n        toOctChar _ = error "invalid digit"	\N	\N	0	1	44	OctalSeq.hs	2015-08-11 14:16:24	2015-08-11 14:16:24	{"OctalSeq.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule OctalSeq( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readOct' 0\\n  where \\n    readOct' acc \\"\\" = acc `seq` acc\\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\\n      where\\n        toOctVal '0' = 0\\n        toOctVal '1' = 1\\n        toOctVal '2' = 2\\n        toOctVal '3' = 3\\n        toOctVal '4' = 4\\n        toOctVal '5' = 5\\n        toOctVal '6' = 6\\n        toOctVal '7' = 7\\n        toOctVal  _  = error \\"invalid digit\\"\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct n | n \\u003c 0 = \\"\\"\\n          | n == 0 = \\"0\\"\\n          | otherwise = octDigitsP \\"\\" n\\n  where\\n    octDigitsP ds 0 = ds `seq` ds\\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` 8\\n        dc = toOctChar $! d\\n        toOctChar 0 = '0'\\n        toOctChar 1 = '1'\\n        toOctChar 2 = '2'\\n        toOctChar 3 = '3'\\n        toOctChar 4 = '4'\\n        toOctChar 5 = '5'\\n        toOctChar 6 = '6'\\n        toOctChar 7 = '7'\\n        toOctChar _ = error \\"invalid digit\\""}
77	22	c017ece749593f60e8eb4687	done	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule Octal( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readBase 8\n\nshowOct :: Integral a => a -> String\nshowOct = showBase 8\n\nreadBase :: Integral a => a -> String -> a\nreadBase b s = readBase' 0 s\n  where \n    readBase' acc "" = acc\n    readBase' acc (d : ds) \n        | acc `seq` False = undefined \n        | not (valid b d) = 0\n        | otherwise = readBase' (b*acc + fromChar d) ds\n\nvalid :: Integral b => b -> Char -> Bool\nvalid b c | b <= 10   = c >= '0' && c < bd\n          | otherwise = (c >= '0' && c <= '9') || \n                        (c >= 'A' && c < bdu) ||\n                        (c >= 'a' && c < bd)\n  where \n    bd = fromDigit b\n    bdu = fromDigitC b\n\nfromChar :: Integral a => Char -> a\nfromChar c | c <= '9' = fromBase '0' c\n           | c <= 'Z' = fromBase 'A' c\n           | otherwise = fromBase 'a' c\n  where \n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \n\nshowBase :: Integral a => a -> a -> String\nshowBase b n | b < 1 || n < 0 = ""\n             | n == 0 = "0"\n             | otherwise = digitsP "" n\n  where\n    digitsP ds k | dc `seq` ds `seq` False = undefined\n                 | k == 0 = ds\n                 | otherwise = digitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` b\n        dc = fromDigit $! d\n\ntoBase :: Integral a => Char -> a -> Char\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\n\nfromDigit :: Integral a => a -> Char\nfromDigit d | d <= 9 = toBase '0' d\n            | otherwise = toBase 'a' d\n\nfromDigitC :: Integral a => a -> Char\nfromDigitC d | d <= 9 = toBase '0' d\n             | otherwise = toBase 'A' d	\N	\N	0	2	44	Octal.hs	2015-09-12 13:48:38	2015-09-12 13:48:38	{"Octal.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule Octal( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readBase 8\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct = showBase 8\\n\\nreadBase :: Integral a =\\u003e a -\\u003e String -\\u003e a\\nreadBase b s = readBase' 0 s\\n  where \\n    readBase' acc \\"\\" = acc\\n    readBase' acc (d : ds) \\n        | acc `seq` False = undefined \\n        | not (valid b d) = 0\\n        | otherwise = readBase' (b*acc + fromChar d) ds\\n\\nvalid :: Integral b =\\u003e b -\\u003e Char -\\u003e Bool\\nvalid b c | b \\u003c= 10   = c \\u003e= '0' \\u0026\\u0026 c \\u003c bd\\n          | otherwise = (c \\u003e= '0' \\u0026\\u0026 c \\u003c= '9') || \\n                        (c \\u003e= 'A' \\u0026\\u0026 c \\u003c bdu) ||\\n                        (c \\u003e= 'a' \\u0026\\u0026 c \\u003c bd)\\n  where \\n    bd = fromDigit b\\n    bdu = fromDigitC b\\n\\nfromChar :: Integral a =\\u003e Char -\\u003e a\\nfromChar c | c \\u003c= '9' = fromBase '0' c\\n           | c \\u003c= 'Z' = fromBase 'A' c\\n           | otherwise = fromBase 'a' c\\n  where \\n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \\n\\nshowBase :: Integral a =\\u003e a -\\u003e a -\\u003e String\\nshowBase b n | b \\u003c 1 || n \\u003c 0 = \\"\\"\\n             | n == 0 = \\"0\\"\\n             | otherwise = digitsP \\"\\" n\\n  where\\n    digitsP ds k | dc `seq` ds `seq` False = undefined\\n                 | k == 0 = ds\\n                 | otherwise = digitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` b\\n        dc = fromDigit $! d\\n\\ntoBase :: Integral a =\\u003e Char -\\u003e a -\\u003e Char\\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\\n\\nfromDigit :: Integral a =\\u003e a -\\u003e Char\\nfromDigit d | d \\u003c= 9 = toBase '0' d\\n            | otherwise = toBase 'a' d\\n\\nfromDigitC :: Integral a =\\u003e a -\\u003e Char\\nfromDigitC d | d \\u003c= 9 = toBase '0' d\\n             | otherwise = toBase 'A' d"}
78	28	840ae1acff6e24de31b9ca0f	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	45	/python/wordy/wordy.py	2015-05-07 14:09:29	2015-05-07 14:09:29	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
79	29	f3d078d5520a1a6e723602a1	done	clojure	binary	(ns binary\n     (:import java.lang.Math ))\n\n (defn to-decimal-seq [binaryStr]\n       (let [tidyStr (clojure.string/replace binaryStr #"[^0-9]" "0")  ;Treat invalid input as binary 0\n             idx-map (map-indexed vector  (clojure.string/reverse tidyStr))]\n            (for [[x v] idx-map]\n                 (do\n                  ;(println (format " (2 ^ %1s) * %2s" x v ))\n                  (* (Math/pow 2 (read-string (str x))) (read-string (str v)))))))\n\n\n (defn to-decimal [binaryStr]\n       (let [col (to-decimal-seq binaryStr)]\n            (int (apply + col))))	\N	\N	0	1	46	/clojure/binary/binary.clj	2015-09-17 04:23:02	2015-09-17 04:23:02	{"/clojure/binary/binary.clj":"(ns binary\\n     (:import java.lang.Math ))\\n\\n (defn to-decimal-seq [binaryStr]\\n       (let [tidyStr (clojure.string/replace binaryStr #\\"[^0-9]\\" \\"0\\")  ;Treat invalid input as binary 0\\n             idx-map (map-indexed vector  (clojure.string/reverse tidyStr))]\\n            (for [[x v] idx-map]\\n                 (do\\n                  ;(println (format \\" (2 ^ %1s) * %2s\\" x v ))\\n                  (* (Math/pow 2 (read-string (str x))) (read-string (str v)))))))\\n\\n\\n (defn to-decimal [binaryStr]\\n       (let [col (to-decimal-seq binaryStr)]\\n            (int (apply + col))))"}
80	29	0ecd09274aa4708f62a17eb9	done	ruby	roman-numerals	class Fixnum\n\n  def to_roman\n    i = self\n    s = ''\n    roman_mappings.each do |arabic, roman|\n      while i >= arabic\n        s << roman\n        i -= arabic\n      end\n    end\n    s\n  end\n\n  def roman_mappings\n    {\n      1000 => 'M',\n      900 => 'CM',\n      500 => 'D',\n      400 => 'CD',\n      100 => 'C',\n      90 => 'XC',\n      50 => 'L',\n      40 => 'XL',\n      10 => 'X',\n      9 => 'IX',\n      5 => 'V',\n      4 => 'IV',\n      1 => 'I',\n    }\n\n  end\n\nend	\N	\N	0	1	47	roman.rb	2015-08-12 23:12:09	2015-08-12 23:12:09	{"roman.rb":"class Fixnum\\n\\n  def to_roman\\n    i = self\\n    s = ''\\n    roman_mappings.each do |arabic, roman|\\n      while i \\u003e= arabic\\n        s \\u003c\\u003c roman\\n        i -= arabic\\n      end\\n    end\\n    s\\n  end\\n\\n  def roman_mappings\\n    {\\n      1000 =\\u003e 'M',\\n      900 =\\u003e 'CM',\\n      500 =\\u003e 'D',\\n      400 =\\u003e 'CD',\\n      100 =\\u003e 'C',\\n      90 =\\u003e 'XC',\\n      50 =\\u003e 'L',\\n      40 =\\u003e 'XL',\\n      10 =\\u003e 'X',\\n      9 =\\u003e 'IX',\\n      5 =\\u003e 'V',\\n      4 =\\u003e 'IV',\\n      1 =\\u003e 'I',\\n    }\\n\\n  end\\n\\nend"}
81	29	148bbb18c576d26e8a728ebd	done	javascript	pythagorean-triplet	(function() {\n  'use strict';\n\n  var Triplet = function(first, second, third) {\n    this.first = first;\n    this.second = second;\n    this.third = third;\n    this.angles = [first, second, third].sort(sortNumber);\n  };\n\n  Triplet.prototype.sum = function() {\n    return this.first + this.second + this.third;\n  };\n\n  Triplet.prototype.product = function() {\n    return this.first * this.second * this.third;\n  };\n\n  Triplet.prototype.isPythagorean = function() {\n    var intTest = /^-?(\\d+|0)$/;\n    if (!intTest.test(this.angles[2])) { return false; }\n\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\n  };\n\n  Triplet.where = function(options) {\n    var max = options['maxFactor'];\n    var min = options['minFactor'] || 1;\n    var sum = options['sum'];\n    var result = this.calculateTriplets(min, max);\n\n    if (sum) {\n      return this.matchSum(sum, result);\n    } else {\n      return result;\n    }\n  };\n\n  Triplet.calculateTriplets = function(min, max) {\n    var triplets = [];\n    for (var x = min; x < max; x++) {\n      for (var y = min; y < max; y++) {\n        var z = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n        var t = new Triplet(x, y, z);\n        if (t.isPythagorean() && !Triplet.inCollection(triplets, t)) {\n          triplets.push(t);\n        }\n      }\n    }\n    return triplets;\n  };\n\n  Triplet.inCollection = function(collection, triplet) {\n    var filtered = collection.filter(function(x) {\n      return x.angles.sort().eql(triplet.angles.sort());\n    });\n    return filtered.length !== 0;\n  };\n\n  Triplet.matchSum = function(sum, collection) {\n    var result = [];\n    for (var x = 0; x < collection.length; x++) {\n      if (collection[x].sum() === sum) {\n        result.push(collection[x]);\n      }\n    }\n    return result;\n  };\n\n  Array.prototype.eql = function(other){\n    if (this.length !== other.length) { return false; }\n\n    for(var i = 0; i < this.length; i++) {\n      if(this[i] !== other[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  function sortNumber(a,b) {\n    return a - b;\n  }\n\n  module.exports = Triplet;\n})();	\N	\N	0	2	48	triplet.js	2015-08-13 13:10:28	2015-08-13 13:10:28	{"triplet.js":"(function() {\\n  'use strict';\\n\\n  var Triplet = function(first, second, third) {\\n    this.first = first;\\n    this.second = second;\\n    this.third = third;\\n    this.angles = [first, second, third].sort(sortNumber);\\n  };\\n\\n  Triplet.prototype.sum = function() {\\n    return this.first + this.second + this.third;\\n  };\\n\\n  Triplet.prototype.product = function() {\\n    return this.first * this.second * this.third;\\n  };\\n\\n  Triplet.prototype.isPythagorean = function() {\\n    var intTest = /^-?(\\\\d+|0)$/;\\n    if (!intTest.test(this.angles[2])) { return false; }\\n\\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\\n  };\\n\\n  Triplet.where = function(options) {\\n    var max = options['maxFactor'];\\n    var min = options['minFactor'] || 1;\\n    var sum = options['sum'];\\n    var result = this.calculateTriplets(min, max);\\n\\n    if (sum) {\\n      return this.matchSum(sum, result);\\n    } else {\\n      return result;\\n    }\\n  };\\n\\n  Triplet.calculateTriplets = function(min, max) {\\n    var triplets = [];\\n    for (var x = min; x \\u003c max; x++) {\\n      for (var y = min; y \\u003c max; y++) {\\n        var z = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\\n        var t = new Triplet(x, y, z);\\n        if (t.isPythagorean() \\u0026\\u0026 !Triplet.inCollection(triplets, t)) {\\n          triplets.push(t);\\n        }\\n      }\\n    }\\n    return triplets;\\n  };\\n\\n  Triplet.inCollection = function(collection, triplet) {\\n    var filtered = collection.filter(function(x) {\\n      return x.angles.sort().eql(triplet.angles.sort());\\n    });\\n    return filtered.length !== 0;\\n  };\\n\\n  Triplet.matchSum = function(sum, collection) {\\n    var result = [];\\n    for (var x = 0; x \\u003c collection.length; x++) {\\n      if (collection[x].sum() === sum) {\\n        result.push(collection[x]);\\n      }\\n    }\\n    return result;\\n  };\\n\\n  Array.prototype.eql = function(other){\\n    if (this.length !== other.length) { return false; }\\n\\n    for(var i = 0; i \\u003c this.length; i++) {\\n      if(this[i] !== other[i]) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  };\\n\\n  function sortNumber(a,b) {\\n    return a - b;\\n  }\\n\\n  module.exports = Triplet;\\n})();"}
82	29	744c08fb25d2711bfb5c9b12	superseded	javascript	pythagorean-triplet	(function() {\n  'use strict';\n\n  var Triplet = function(first, second, third) {\n    this.first = first;\n    this.second = second;\n    this.third = third;\n    this.angles = [first, second, third].sort(sortNumber);\n  };\n\n  Triplet.prototype.sum = function() {\n    return this.first + this.second + this.third;\n  };\n\n  Triplet.prototype.product = function() {\n    return this.first * this.second * this.third;\n  };\n\n  Triplet.prototype.isPythagorean = function() {\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\n  };\n\n  Triplet.where = function(options) {\n    var max = options['maxFactor'];\n    var min = options['minFactor'] || 1;\n    var sum = options['sum'];\n    var result = this.calculateTriplets(min, max);\n\n    if (sum) {\n      return this.matchSum(sum, result);\n    } else {\n      return result;\n    }\n  };\n\n  Triplet.calculateTriplets = function(min, max) {\n    var triplets = [];\n    for (var x = min; x <= max; x++) {\n      for (var y = min; y <= max; y++) {\n        for (var z = min; z <= max; z++) {\n          var t = new Triplet(x, y, z);\n          if (t.isPythagorean() && !(this.inCollection(triplets, t))) {\n            triplets.push(t);\n          }\n        }\n      }\n    }\n    return triplets;\n  };\n\n  Triplet.inCollection = function(collection, triplet) {\n    var filtered = collection.filter(function(x) {\n      return x.angles.sort().eql(triplet.angles.sort());\n    });\n    return filtered.length !== 0;\n  };\n\n  Triplet.matchSum = function(sum, collection) {\n    var result = [];\n    for (var x = 0; x < collection.length; x++) {\n      if (collection[x].sum() === sum) {\n        result.push(collection[x]);\n      }\n    }\n    return result;\n  }\n\n  Array.prototype.eql = function(other){\n    if (this.length !== other.length) { return false; }\n\n    for(var i = 0; i < this.length; i++) {\n      if(this[i] !== other[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  function sortNumber(a,b) {\n    return a - b;\n  }\n\n  module.exports = Triplet;\n})();	\N	\N	0	1	48	triplet.js	2015-08-27 09:03:50	2015-08-27 09:03:50	{"triplet.js":"(function() {\\n  'use strict';\\n\\n  var Triplet = function(first, second, third) {\\n    this.first = first;\\n    this.second = second;\\n    this.third = third;\\n    this.angles = [first, second, third].sort(sortNumber);\\n  };\\n\\n  Triplet.prototype.sum = function() {\\n    return this.first + this.second + this.third;\\n  };\\n\\n  Triplet.prototype.product = function() {\\n    return this.first * this.second * this.third;\\n  };\\n\\n  Triplet.prototype.isPythagorean = function() {\\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\\n  };\\n\\n  Triplet.where = function(options) {\\n    var max = options['maxFactor'];\\n    var min = options['minFactor'] || 1;\\n    var sum = options['sum'];\\n    var result = this.calculateTriplets(min, max);\\n\\n    if (sum) {\\n      return this.matchSum(sum, result);\\n    } else {\\n      return result;\\n    }\\n  };\\n\\n  Triplet.calculateTriplets = function(min, max) {\\n    var triplets = [];\\n    for (var x = min; x \\u003c= max; x++) {\\n      for (var y = min; y \\u003c= max; y++) {\\n        for (var z = min; z \\u003c= max; z++) {\\n          var t = new Triplet(x, y, z);\\n          if (t.isPythagorean() \\u0026\\u0026 !(this.inCollection(triplets, t))) {\\n            triplets.push(t);\\n          }\\n        }\\n      }\\n    }\\n    return triplets;\\n  };\\n\\n  Triplet.inCollection = function(collection, triplet) {\\n    var filtered = collection.filter(function(x) {\\n      return x.angles.sort().eql(triplet.angles.sort());\\n    });\\n    return filtered.length !== 0;\\n  };\\n\\n  Triplet.matchSum = function(sum, collection) {\\n    var result = [];\\n    for (var x = 0; x \\u003c collection.length; x++) {\\n      if (collection[x].sum() === sum) {\\n        result.push(collection[x]);\\n      }\\n    }\\n    return result;\\n  }\\n\\n  Array.prototype.eql = function(other){\\n    if (this.length !== other.length) { return false; }\\n\\n    for(var i = 0; i \\u003c this.length; i++) {\\n      if(this[i] !== other[i]) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  };\\n\\n  function sortNumber(a,b) {\\n    return a - b;\\n  }\\n\\n  module.exports = Triplet;\\n})();"}
83	29	97ad679721435f9a84eb7305	pending	haskell	leap	module LeapYear (isLeapYear, isLeapYear2) where\n\nisLeapYear :: Int -> Bool\nisLeapYear year\n    | year `mod` 100 == 0 && year `mod` 400 /= 0  = False\n    | year `mod` 4 == 0  =  True\n    | otherwise = False\n\nisLeapYear2 :: Int -> Bool\nisLeapYear2 year\n    | year `mod` 4 /= 0  = False\n    | year `mod` 100 == 0 && year `mod` 400 /= 0 = False\n    | otherwise = True	\N	\N	0	1	49	haskell/leap/leapyear.hs	2015-08-16 09:27:42	2015-08-16 09:27:42	{"haskell/leap/leapyear.hs":"module LeapYear (isLeapYear, isLeapYear2) where\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear year\\n    | year `mod` 100 == 0 \\u0026\\u0026 year `mod` 400 /= 0  = False\\n    | year `mod` 4 == 0  =  True\\n    | otherwise = False\\n\\nisLeapYear2 :: Int -\\u003e Bool\\nisLeapYear2 year\\n    | year `mod` 4 /= 0  = False\\n    | year `mod` 100 == 0 \\u0026\\u0026 year `mod` 400 /= 0 = False\\n    | otherwise = True"}
84	29	884068fc5718f815f8efed85	superseded	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	1	50	year.py	2015-08-13 09:54:37	2015-08-13 09:54:37	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
85	29	0d0740febcc0d0ad0dfffdb2	superseded	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) \nor divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	2	50	year.py	2015-08-16 01:38:08	2015-08-16 01:38:08	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) \\nor divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
86	29	ad507799f56184d3accb4281	done	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	3	50	year.py	2015-09-05 03:12:54	2015-09-05 03:12:54	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
87	29	5116b9df63dfe11cf7d0d8b8	done	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\nopen System.Collections.Generic\r\n\r\ntype RobotName() = \r\n    static let usedNames = new List<String>()\r\n\r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let rec buildName () =\r\n        let candidate = \r\n            String.Concat [ randomLetter(); randomLetter(); \r\n                            randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n        if usedNames.Contains(candidate) then \r\n            buildName() \r\n        else \r\n            usedNames.Add(candidate)\r\n            candidate   \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	3	51	RobotName.fs	2015-08-14 17:45:38	2015-08-14 17:45:38	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\nopen System.Collections.Generic\\r\\n\\r\\ntype RobotName() = \\r\\n    static let usedNames = new List\\u003cString\\u003e()\\r\\n\\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let rec buildName () =\\r\\n        let candidate = \\r\\n            String.Concat [ randomLetter(); randomLetter(); \\r\\n                            randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n        if usedNames.Contains(candidate) then \\r\\n            buildName() \\r\\n        else \\r\\n            usedNames.Add(candidate)\\r\\n            candidate   \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
88	29	fdb8f2823cc3f7eb146d512a	superseded	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\n\r\ntype RobotName() = \r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let buildName () =\r\n        String.Concat [ randomLetter(); randomLetter(); \r\n                        randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	2	51	RobotName.fs	2015-08-27 17:37:29	2015-08-27 17:37:29	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        String.Concat [ randomLetter(); randomLetter(); \\r\\n                        randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
89	29	67d050eebe5337037f0a12d7	superseded	fsharp	robot-name	﻿namespace RobotName\r\n\r\ntype RobotName() = \r\n    let random = System.Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\r\n    let randomDigit () = (random.Next() % 10).ToString()\r\n\r\n    let buildName () =\r\n        (seq {0..1} \r\n         |> Seq.map (fun _ -> randomLetter())\r\n         |> String.concat "")\r\n        +\r\n        (seq {0..2}\r\n         |> Seq.map (fun _ -> randomDigit())\r\n         |> String.concat "")\r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	1	51	RobotName.fs	2015-08-30 03:04:53	2015-08-30 03:04:53	{"RobotName.fs":"﻿namespace RobotName\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = System.Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\\r\\n    let randomDigit () = (random.Next() % 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        (seq {0..1} \\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomLetter())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n        +\\r\\n        (seq {0..2}\\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomDigit())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
97	38	8b3dc12af09c35cd9436e42c	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	2	57	dna.clj	2015-07-20 03:27:08	2015-07-20 03:27:08	{"dna.clj":"(ns dna)\\n\\n(def NUCLEOTIDES (set \\"ACGTU\\"))\\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\\\U))\\n\\n(defn count [nucleotide dna]\\n  (when (not (contains? NUCLEOTIDES nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))"}
90	31	3ad4197bee961557790ed37b	superseded	javascript	bob	var Bob = function(){\n\n};\n\n\nBob.prototype.hey = function(phrase){\n\tif(phrase == '' || phrase == '   '){\n\t\treturn 'Fine. Be that way!';\n\t} else if (phrase.search("gym") != -1){\n\t\treturn 'Whatever.';\n\t} else if(phrase[phrase.length-1]==="!"){\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase == 'I HATE YOU' || phrase == 'WHAT THE HELL WERE YOU THINKING?'){ //all caps - should use regex\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase[phrase.length-1]==="?"){\n\t\treturn 'Sure.';\n\t}\telse if (phrase[phrase.length-1]!=="?" || phrase[phrase.length-1] !== "!"){\n\t\treturn 'Whatever.';\n\t}\t\n\n}	\N	\N	0	1	52	bob.js	2015-02-26 22:38:48	2015-02-26 22:38:48	{"bob.js":"var Bob = function(){\\n\\n};\\n\\n\\nBob.prototype.hey = function(phrase){\\n\\tif(phrase == '' || phrase == '   '){\\n\\t\\treturn 'Fine. Be that way!';\\n\\t} else if (phrase.search(\\"gym\\") != -1){\\n\\t\\treturn 'Whatever.';\\n\\t} else if(phrase[phrase.length-1]===\\"!\\"){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase == 'I HATE YOU' || phrase == 'WHAT THE HELL WERE YOU THINKING?'){ //all caps - should use regex\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase[phrase.length-1]===\\"?\\"){\\n\\t\\treturn 'Sure.';\\n\\t}\\telse if (phrase[phrase.length-1]!==\\"?\\" || phrase[phrase.length-1] !== \\"!\\"){\\n\\t\\treturn 'Whatever.';\\n\\t}\\t\\n\\n}"}
91	31	b662d1c5817a78f0bcd40995	done	javascript	bob	var Bob = function(){\n\n};\n\n\nBob.prototype.hey = function(phrase){\n   if(phrase.search(/([0-9a-zA-Z])\\S+/) === -1){\n\t\treturn 'Fine. Be that way!';\n\t} else if (phrase.search(/\\d\\?/)>-1){\n\t\treturn 'Sure.';\n\t} else if (phrase[phrase.length-1] == '?' && phrase.toUpperCase() == phrase){\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase[phrase.length-1] == '?'){\n\t\treturn 'Sure.';\n\t} else if (phrase.search(/[A-Za-z]+/) === -1){\n\t\treturn 'Whatever.';\n\t} else if (phrase.toUpperCase() == phrase){\n\t\treturn 'Woah, chill out!';\n\t} else{\n\t\treturn 'Whatever.';\n\t}\n};	\N	\N	0	2	52	bob.js	2015-07-27 13:25:14	2015-07-27 13:25:14	{"bob.js":"var Bob = function(){\\n\\n};\\n\\n\\nBob.prototype.hey = function(phrase){\\n   if(phrase.search(/([0-9a-zA-Z])\\\\S+/) === -1){\\n\\t\\treturn 'Fine. Be that way!';\\n\\t} else if (phrase.search(/\\\\d\\\\?/)\\u003e-1){\\n\\t\\treturn 'Sure.';\\n\\t} else if (phrase[phrase.length-1] == '?' \\u0026\\u0026 phrase.toUpperCase() == phrase){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase[phrase.length-1] == '?'){\\n\\t\\treturn 'Sure.';\\n\\t} else if (phrase.search(/[A-Za-z]+/) === -1){\\n\\t\\treturn 'Whatever.';\\n\\t} else if (phrase.toUpperCase() == phrase){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else{\\n\\t\\treturn 'Whatever.';\\n\\t}\\n};"}
92	33	42b44ecb39b4530397f7e8f6	pending	javascript	word-count	var words = function(input) {\r\n\tvar split = input.replace('\\n'," ").split(" ");\r\n\tvar wordcount = {};\r\n\t\r\n\tsplit.forEach(function(element) {\r\n\t\t\tif (wordcount[element]) {\r\n\t\t\t\twordcount[element] = wordcount[element] + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\twordcount[element] = 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t});\r\n\treturn wordcount;\r\n};\r\n\r\nmodule.exports = words;	\N	\N	0	1	53	word-count.js	2015-09-11 21:06:44	2015-09-11 21:06:44	{"word-count.js":"var words = function(input) {\\r\\n\\tvar split = input.replace('\\\\n',\\" \\").split(\\" \\");\\r\\n\\tvar wordcount = {};\\r\\n\\t\\r\\n\\tsplit.forEach(function(element) {\\r\\n\\t\\t\\tif (wordcount[element]) {\\r\\n\\t\\t\\t\\twordcount[element] = wordcount[element] + 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\twordcount[element] = 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t});\\r\\n\\treturn wordcount;\\r\\n};\\r\\n\\r\\nmodule.exports = words;"}
93	33	5ee2de6965131f6fb0cbb513	done	javascript	bob	var Bob = function(){\n\n};\n\n\nBob.prototype.hey = function(phrase){\n   if(phrase.search(/([0-9a-zA-Z])\\S+/) === -1){\n\t\treturn 'Fine. Be that way!';\n\t} else if (phrase.search(/\\d\\?/)>-1){\n\t\treturn 'Sure.';\n\t} else if (phrase[phrase.length-1] == '?' && phrase.toUpperCase() == phrase){\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase[phrase.length-1] == '?'){\n\t\treturn 'Sure.';\n\t} else if (phrase.search(/[A-Za-z]+/) === -1){\n\t\treturn 'Whatever.';\n\t} else if (phrase.toUpperCase() == phrase){\n\t\treturn 'Woah, chill out!';\n\t} else{\n\t\treturn 'Whatever.';\n\t}\n};	\N	\N	0	2	54	bob.js	2015-09-10 07:43:38	2015-09-10 07:43:38	{"bob.js":"var Bob = function(){\\n\\n};\\n\\n\\nBob.prototype.hey = function(phrase){\\n   if(phrase.search(/([0-9a-zA-Z])\\\\S+/) === -1){\\n\\t\\treturn 'Fine. Be that way!';\\n\\t} else if (phrase.search(/\\\\d\\\\?/)\\u003e-1){\\n\\t\\treturn 'Sure.';\\n\\t} else if (phrase[phrase.length-1] == '?' \\u0026\\u0026 phrase.toUpperCase() == phrase){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase[phrase.length-1] == '?'){\\n\\t\\treturn 'Sure.';\\n\\t} else if (phrase.search(/[A-Za-z]+/) === -1){\\n\\t\\treturn 'Whatever.';\\n\\t} else if (phrase.toUpperCase() == phrase){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else{\\n\\t\\treturn 'Whatever.';\\n\\t}\\n};"}
94	33	9b1069a39cb56d6baf0086ec	superseded	javascript	bob	var Bob = function(){\n\n};\n\n\nBob.prototype.hey = function(phrase){\n\tif(phrase == '' || phrase == '   '){\n\t\treturn 'Fine. Be that way!';\n\t} else if (phrase.search("gym") != -1){\n\t\treturn 'Whatever.';\n\t} else if(phrase[phrase.length-1]==="!"){\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase == 'I HATE YOU' || phrase == 'WHAT THE HELL WERE YOU THINKING?'){ //all caps - should use regex\n\t\treturn 'Woah, chill out!';\n\t} else if (phrase[phrase.length-1]==="?"){\n\t\treturn 'Sure.';\n\t}\telse if (phrase[phrase.length-1]!=="?" || phrase[phrase.length-1] !== "!"){\n\t\treturn 'Whatever.';\n\t}\t\n\n}	\N	\N	0	1	54	bob.js	2015-09-21 21:48:10	2015-09-21 21:48:10	{"bob.js":"var Bob = function(){\\n\\n};\\n\\n\\nBob.prototype.hey = function(phrase){\\n\\tif(phrase == '' || phrase == '   '){\\n\\t\\treturn 'Fine. Be that way!';\\n\\t} else if (phrase.search(\\"gym\\") != -1){\\n\\t\\treturn 'Whatever.';\\n\\t} else if(phrase[phrase.length-1]===\\"!\\"){\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase == 'I HATE YOU' || phrase == 'WHAT THE HELL WERE YOU THINKING?'){ //all caps - should use regex\\n\\t\\treturn 'Woah, chill out!';\\n\\t} else if (phrase[phrase.length-1]===\\"?\\"){\\n\\t\\treturn 'Sure.';\\n\\t}\\telse if (phrase[phrase.length-1]!==\\"?\\" || phrase[phrase.length-1] !== \\"!\\"){\\n\\t\\treturn 'Whatever.';\\n\\t}\\t\\n\\n}"}
95	33	8770f602f427bfecb55b5afc	pending	python	bob	class Bob:\n    def hey(self, s):\n        if not s or s.isspace():\n            return 'Fine. Be that way!'\n        elif s.isupper():\n            return 'Woah, chill out!'\n        elif s[-1] == '?':\n            return 'Sure.'\n        else:\n            return 'Whatever.'	\N	\N	0	1	55	bob.py	2015-09-14 15:03:21	2015-09-14 15:03:21	{"bob.py":"class Bob:\\n    def hey(self, s):\\n        if not s or s.isspace():\\n            return 'Fine. Be that way!'\\n        elif s.isupper():\\n            return 'Woah, chill out!'\\n        elif s[-1] == '?':\\n            return 'Sure.'\\n        else:\\n            return 'Whatever.'"}
96	33	72ddd624d3037c40915abd16	done	javascript	sieve	var Sieve = function(num) {\n  this.num = num;\n  this.primes = [];\n\n  var isPrime = function(n) {\n    var mid = Math.floor( n / 2 );\n\n    for ( var i = 2; i <= mid; i++ ) {\n      if ( n % i === 0 ) {\n        return false\n      }\n    }\n    return true;\n  }\n\n  for ( var i = 2; i <= this.num; i++ ) {\n    if ( isPrime(i) ) {\n      this.primes.push(i);\n    }\n  }\n};	\N	\N	0	1	56	sieve_test.js	2015-09-11 07:22:50	2015-09-11 07:22:50	{"sieve_test.js":"var Sieve = function(num) {\\n  this.num = num;\\n  this.primes = [];\\n\\n  var isPrime = function(n) {\\n    var mid = Math.floor( n / 2 );\\n\\n    for ( var i = 2; i \\u003c= mid; i++ ) {\\n      if ( n % i === 0 ) {\\n        return false\\n      }\\n    }\\n    return true;\\n  }\\n\\n  for ( var i = 2; i \\u003c= this.num; i++ ) {\\n    if ( isPrime(i) ) {\\n      this.primes.push(i);\\n    }\\n  }\\n};"}
98	38	b8fe55b631349fefda71c0de	done	clojure	nucleotide-count	(ns dna)\n\n(def ^{:private true} nucleotides (set "ACGTU"))\n(def ^{:private true} dna-nucleotides (disj nucleotides \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? nucleotides nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) dna-nucleotides)))	\N	\N	0	3	57	dna.clj	2015-08-25 15:39:12	2015-08-25 15:39:12	{"dna.clj":"(ns dna)\\n\\n(def ^{:private true} nucleotides (set \\"ACGTU\\"))\\n(def ^{:private true} dna-nucleotides (disj nucleotides \\\\U))\\n\\n(defn count [nucleotide dna]\\n  (when (not (contains? nucleotides nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) dna-nucleotides)))"}
99	38	a8eb76eca9929d29c5f79633	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn dna/count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	1	57	dna.clj	2015-08-28 08:02:56	2015-08-28 08:02:56	{"dna.clj":"(ns dna)\\n\\n(def NUCLEOTIDES (set \\"ACGTU\\"))\\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\\\U))\\n\\n(defn dna/count [nucleotide dna]\\n  (when (not (contains? NUCLEOTIDES nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))"}
100	40	63a930ad76930cfa61c26df5	pending	go	grains	package grains\n\nimport (\n\t"errors"\n)\n\nfunc Square(n int) (uint64, error) {\n\tif n < 1 || n > 64 {\n\t\treturn 0, errors.New("out of range")\n\t}\n\treturn 1 << (uint(n) - 1), nil\n}\n\nfunc Total() uint64 {\n\tconst n uint = 64 // I'd have expected this as an input\n\treturn 1<<n - 1\n}	\N	\N	0	1	58	grains.go	2015-09-10 07:58:35	2015-09-10 07:58:35	{"grains.go":"package grains\\n\\nimport (\\n\\t\\"errors\\"\\n)\\n\\nfunc Square(n int) (uint64, error) {\\n\\tif n \\u003c 1 || n \\u003e 64 {\\n\\t\\treturn 0, errors.New(\\"out of range\\")\\n\\t}\\n\\treturn 1 \\u003c\\u003c (uint(n) - 1), nil\\n}\\n\\nfunc Total() uint64 {\\n\\tconst n uint = 64 // I'd have expected this as an input\\n\\treturn 1\\u003c\\u003cn - 1\\n}"}
101	44	842f706b7c310025afc7799d	pending	python	grade-school	from collections import defaultdict\nclass School():\n    def __init__(self,what):\n        self.db = defaultdict(set)\n        self.school_name = what\n\n    def add(self,what,grade):\n        self.db[grade].add(what)\n        \n    def grade(self,what):\n        return self.db[what]\n\n    def sort(self):\n        #for testing purposes \n        new_dict = {}\n        for k,v in self.db.items():\n            new_dict[k] = tuple(v)\n        return new_dict	\N	\N	0	1	59	school.py	2015-02-28 03:21:47	2015-02-28 03:21:47	{"school.py":"from collections import defaultdict\\nclass School():\\n    def __init__(self,what):\\n        self.db = defaultdict(set)\\n        self.school_name = what\\n\\n    def add(self,what,grade):\\n        self.db[grade].add(what)\\n        \\n    def grade(self,what):\\n        return self.db[what]\\n\\n    def sort(self):\\n        #for testing purposes \\n        new_dict = {}\\n        for k,v in self.db.items():\\n            new_dict[k] = tuple(v)\\n        return new_dict"}
102	44	34da8bbb11e89066e1a0eb07	superseded	ruby	bob	class Bob\n  def hey(phrase)\n    if phrase.strip.empty?\n      'Fine. Be that way!'\n    elsif phrase == phrase.upcase && phrase.scan(/[a-zA-Z]/).any?\n      'Woah, chill out!'\n    elsif phrase[-1,1] == '?'\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	1	60	bob.rb	2015-03-08 22:54:48	2015-03-08 22:54:48	{"bob.rb":"class Bob\\n  def hey(phrase)\\n    if phrase.strip.empty?\\n      'Fine. Be that way!'\\n    elsif phrase == phrase.upcase \\u0026\\u0026 phrase.scan(/[a-zA-Z]/).any?\\n      'Woah, chill out!'\\n    elsif phrase[-1,1] == '?'\\n      'Sure.'\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\nend"}
103	44	b50c98ef64dea26ce677fd6d	pending	ruby	bob	class Bob\n  def hey(phrase)\n    @phrase = phrase\n    if phrase_is_empty?\n      'Fine. Be that way!'\n    elsif phrase_is_yelling?\n      'Woah, chill out!'\n    elsif phrase_is_questioning?\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\n\n  private\n  def phrase_is_empty?\n    @phrase.strip.empty?\n  end\n\n  def phrase_is_yelling?\n    @phrase == @phrase.upcase && @phrase.scan(/[a-zA-Z]/).any?\n  end\n\n  def phrase_is_questioning?\n    @phrase[-1,1] == '?'\n  end\nend	\N	\N	0	2	60	bob.rb	2015-03-22 16:03:35	2015-03-22 16:03:35	{"bob.rb":"class Bob\\n  def hey(phrase)\\n    @phrase = phrase\\n    if phrase_is_empty?\\n      'Fine. Be that way!'\\n    elsif phrase_is_yelling?\\n      'Woah, chill out!'\\n    elsif phrase_is_questioning?\\n      'Sure.'\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\n\\n  private\\n  def phrase_is_empty?\\n    @phrase.strip.empty?\\n  end\\n\\n  def phrase_is_yelling?\\n    @phrase == @phrase.upcase \\u0026\\u0026 @phrase.scan(/[a-zA-Z]/).any?\\n  end\\n\\n  def phrase_is_questioning?\\n    @phrase[-1,1] == '?'\\n  end\\nend"}
104	44	10b65f94af77b540e99b5cf2	superseded	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nsub new{\n\tmy ($class, $key) = @_;\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	1	61	Cipher.pm	2015-03-08 01:25:27	2015-03-08 01:25:27	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
240	36	d7c81eb454dcbf58c5e6ed2b	superseded	ruby	word-count	class Words\n  attr_reader :sentence\n\n  def initialize(string)\n    @sentence = normalize_string(string)\n  end\n\n  def count\n    results = Hash.new(0)\n    sentence.split(' ').each do |word|\n      results[word] += 1\n    end\n    results\n  end\n\n  private\n\n  def normalize_string(string)\n    string.gsub(/\\W/, ' ').downcase\n  end\nend	\N	\N	0	2	157	word-count.rb	2015-03-17 04:53:46	2015-03-17 04:53:46	{"word-count.rb":"class Words\\n  attr_reader :sentence\\n\\n  def initialize(string)\\n    @sentence = normalize_string(string)\\n  end\\n\\n  def count\\n    results = Hash.new(0)\\n    sentence.split(' ').each do |word|\\n      results[word] += 1\\n    end\\n    results\\n  end\\n\\n  private\\n\\n  def normalize_string(string)\\n    string.gsub(/\\\\W/, ' ').downcase\\n  end\\nend"}
105	44	9d9769dad0c8b09c7b33bcef	done	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nmy @words = 'a'..'z';\n\nsub new{\n\tmy ($class, $key) = @_;\n\tdie "ArgumentError: $key" if defined $key and ($key =~ /[^a-z]/ or not length $key);\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	2	61	Cipher.pm	2015-04-28 15:32:40	2015-04-28 15:32:40	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nmy @words = 'a'..'z';\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\tdie \\"ArgumentError: $key\\" if defined $key and ($key =~ /[^a-z]/ or not length $key);\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
106	44	56afc262842d9735b0ebc4db	superseded	haskell	bob	module Bob where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor x | filter (not . isSpace) x == "" = "Fine. Be that way!"\nresponseFor s | yelling s                      = "Woah, chill out!"\nresponseFor q | last q == '?'                  = "Sure."\nresponseFor _                                  = "Whatever."\n\nyelling :: String -> Bool\nyelling s = all (isLetter .-> isUpper) s && any isLetter s\n  where\n    a .-> b = \\x -> not (a x) || b x -- logical implication	\N	\N	0	1	62	bob.hs	2015-03-21 02:21:13	2015-03-21 02:21:13	{"bob.hs":"module Bob where\\n\\nimport Data.Char\\n\\nresponseFor :: String -\\u003e String\\nresponseFor x | filter (not . isSpace) x == \\"\\" = \\"Fine. Be that way!\\"\\nresponseFor s | yelling s                      = \\"Woah, chill out!\\"\\nresponseFor q | last q == '?'                  = \\"Sure.\\"\\nresponseFor _                                  = \\"Whatever.\\"\\n\\nyelling :: String -\\u003e Bool\\nyelling s = all (isLetter .-\\u003e isUpper) s \\u0026\\u0026 any isLetter s\\n  where\\n    a .-\\u003e b = \\\\x -\\u003e not (a x) || b x -- logical implication"}
107	44	ac16af0cd837bfd660045c25	done	haskell	bob	module Bob where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor x | filter (not . isSpace) x == "" = "Fine. Be that way!"\nresponseFor s | yelling s                      = "Woah, chill out!"\nresponseFor q | last q == '?'                  = "Sure."\nresponseFor _                                  = "Whatever."\n\nyelling :: String -> Bool\nyelling s = all (not . isLower) s && any isLetter s	\N	\N	0	2	62	bob.hs	2015-03-26 02:25:37	2015-03-26 02:25:37	{"bob.hs":"module Bob where\\n\\nimport Data.Char\\n\\nresponseFor :: String -\\u003e String\\nresponseFor x | filter (not . isSpace) x == \\"\\" = \\"Fine. Be that way!\\"\\nresponseFor s | yelling s                      = \\"Woah, chill out!\\"\\nresponseFor q | last q == '?'                  = \\"Sure.\\"\\nresponseFor _                                  = \\"Whatever.\\"\\n\\nyelling :: String -\\u003e Bool\\nyelling s = all (not . isLower) s \\u0026\\u0026 any isLetter s"}
108	44	e10c5babb71317105e98424d	superseded	go	leap	package leap\n\n/*\n * Determine if year is leap year or not\n * @param year: The year expressed as int \n * @return: true if leap year, otherwise false\n*/\nfunc IsLeapYear(year int) bool {\n    // Is leap if evenly divisible by 4 and not by 100  \n    if (year % 4 == 0 && year % 100 != 0) {\n        return true\n    // Also leap if divisible by 400\n    } else if (year % 400 == 0) {\n        return true\n    // All others are not leap\n    } else {\n        return false\n    }\n}	\N	\N	0	1	63	leap.go	2015-02-21 15:14:18	2015-02-21 15:14:18	{"leap.go":"package leap\\n\\n/*\\n * Determine if year is leap year or not\\n * @param year: The year expressed as int \\n * @return: true if leap year, otherwise false\\n*/\\nfunc IsLeapYear(year int) bool {\\n    // Is leap if evenly divisible by 4 and not by 100  \\n    if (year % 4 == 0 \\u0026\\u0026 year % 100 != 0) {\\n        return true\\n    // Also leap if divisible by 400\\n    } else if (year % 400 == 0) {\\n        return true\\n    // All others are not leap\\n    } else {\\n        return false\\n    }\\n}"}
109	44	a30b0351348919c96c823ab1	pending	go	leap	package leap\n\n\n//Returns true if the year is a leap year and false otherwise. \n//Takes the year as an int.\nfunc IsLeapYear(year int) bool {\n\t// Is leap if evenly divisible by 4 and not by 100\n\tif year%4 == 0 && year%100 != 0 {\n\t\treturn true\n\t// Also leap if divisible by 400\n\t} else if year%400 == 0 {\n\t\treturn true\n\t}\n\t// All others are not leap\n\treturn false\n}	\N	\N	0	2	63	leap.go	2015-04-11 02:54:22	2015-04-11 02:54:22	{"leap.go":"package leap\\n\\n\\n//Returns true if the year is a leap year and false otherwise. \\n//Takes the year as an int.\\nfunc IsLeapYear(year int) bool {\\n\\t// Is leap if evenly divisible by 4 and not by 100\\n\\tif year%4 == 0 \\u0026\\u0026 year%100 != 0 {\\n\\t\\treturn true\\n\\t// Also leap if divisible by 400\\n\\t} else if year%400 == 0 {\\n\\t\\treturn true\\n\\t}\\n\\t// All others are not leap\\n\\treturn false\\n}"}
110	44	0f8bf5460d0e2abaf041136f	superseded	python	anagram	from collections import Counter\n\n\ndef detect_anagrams(source, anagrams):\n    # since anagrams in this case are case-insensitive convert all to\n    # lowercase\n    l_source = source.lower()\n    source_count = Counter(l_source)\n    res = []\n\n    for pos_anagram in anagrams:\n        l_pos_anagram = pos_anagram.lower()\n        if Counter(l_pos_anagram) == source_count and l_pos_anagram != l_source:\n            res.append(pos_anagram)\n\n    return res	\N	\N	0	2	64	anagram.py	2015-03-12 10:14:24	2015-03-12 10:14:24	{"anagram.py":"from collections import Counter\\n\\n\\ndef detect_anagrams(source, anagrams):\\n    # since anagrams in this case are case-insensitive convert all to\\n    # lowercase\\n    l_source = source.lower()\\n    source_count = Counter(l_source)\\n    res = []\\n\\n    for pos_anagram in anagrams:\\n        l_pos_anagram = pos_anagram.lower()\\n        if Counter(l_pos_anagram) == source_count and l_pos_anagram != l_source:\\n            res.append(pos_anagram)\\n\\n    return res"}
111	44	a8e6dc35a184f87872e46dba	pending	python	anagram	from collections import Counter\n\n\ndef detect_anagrams(source, anagrams):\n    # since anagrams in this case are case-insensitive convert all to\n    # lowercase\n    l_source = source.lower()\n    source_count = Counter(l_source)\n    # list comp instead of loop - less readable but not much .\n    return [anagram for anagram in anagrams if Counter(anagram.lower()) == source_count and anagram.lower() != l_source]	\N	\N	0	3	64	anagram.py	2015-04-05 19:28:37	2015-04-05 19:28:37	{"anagram.py":"from collections import Counter\\n\\n\\ndef detect_anagrams(source, anagrams):\\n    # since anagrams in this case are case-insensitive convert all to\\n    # lowercase\\n    l_source = source.lower()\\n    source_count = Counter(l_source)\\n    # list comp instead of loop - less readable but not much .\\n    return [anagram for anagram in anagrams if Counter(anagram.lower()) == source_count and anagram.lower() != l_source]"}
112	44	a8126b0097adc704b79afeb6	superseded	python	anagram	from collections import Counter\n\n\ndef detect_anagrams(source, anagrams):\n    # since anagrams in this case are case-insensitive convert all to\n    # lowercase\n    l_source = source.lower()\n    source_count = Counter(l_source)\n    res = []\n\n    for pos_anagram in anagrams:\n        if Counter(pos_anagram.lower()) == source_count and pos_anagram.lower() != l_source:\n            res.append(pos_anagram)\n\n    return res	\N	\N	0	1	64	anagram.py	2015-05-15 13:46:53	2015-05-15 13:46:53	{"anagram.py":"from collections import Counter\\n\\n\\ndef detect_anagrams(source, anagrams):\\n    # since anagrams in this case are case-insensitive convert all to\\n    # lowercase\\n    l_source = source.lower()\\n    source_count = Counter(l_source)\\n    res = []\\n\\n    for pos_anagram in anagrams:\\n        if Counter(pos_anagram.lower()) == source_count and pos_anagram.lower() != l_source:\\n            res.append(pos_anagram)\\n\\n    return res"}
113	44	83aa7a29b0a9a253fc26fa42	pending	ruby	raindrops	class Raindrops\r\n\r\n  def self.convert(num)\r\n    result = ""\r\n    result << "Pling" if num%3 == 0\r\n    result << "Plang" if num%5 == 0\r\n    result << "Plong" if num%7 == 0\r\n    result = num.to_s if result.empty?\r\n    result\r\n  end\r\n\r\nend	\N	\N	0	1	65	raindrops.rb	2015-04-10 03:19:10	2015-04-10 03:19:10	{"raindrops.rb":"class Raindrops\\r\\n\\r\\n  def self.convert(num)\\r\\n    result = \\"\\"\\r\\n    result \\u003c\\u003c \\"Pling\\" if num%3 == 0\\r\\n    result \\u003c\\u003c \\"Plang\\" if num%5 == 0\\r\\n    result \\u003c\\u003c \\"Plong\\" if num%7 == 0\\r\\n    result = num.to_s if result.empty?\\r\\n    result\\r\\n  end\\r\\n\\r\\nend"}
114	44	6b9472aedac2c52e8412fb8b	pending	haskell	nucleotide-count	module DNA(count, nucleotideCounts) where\n\nimport Data.Map.Strict(Map, fromListWith)\n\n\ndna :: String\ndna = "ACGT"\n\nrna :: String\nrna = "ACGU"\n\nisDNA :: Char -> Bool\nisDNA nucleotide = nucleotide `elem` dna\n\nisRNA :: Char -> Bool\nisRNA nucleotide = nucleotide `elem` rna\n\ncount :: Char -> String -> Int\ncount nucleotide string | isRNA nucleotide || isDNA nucleotide = length $ filter (== nucleotide) string\n                        | otherwise = error $ "invalid nucleotide " ++ show nucleotide\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts string =\n    fromListWith (+) $ map (\\x -> (x, 1)) string ++ map (\\x -> (x, 0)) dna	\N	\N	0	3	66	DNA.hs	2015-02-25 19:41:05	2015-02-25 19:41:05	{"DNA.hs":"module DNA(count, nucleotideCounts) where\\n\\nimport Data.Map.Strict(Map, fromListWith)\\n\\n\\ndna :: String\\ndna = \\"ACGT\\"\\n\\nrna :: String\\nrna = \\"ACGU\\"\\n\\nisDNA :: Char -\\u003e Bool\\nisDNA nucleotide = nucleotide `elem` dna\\n\\nisRNA :: Char -\\u003e Bool\\nisRNA nucleotide = nucleotide `elem` rna\\n\\ncount :: Char -\\u003e String -\\u003e Int\\ncount nucleotide string | isRNA nucleotide || isDNA nucleotide = length $ filter (== nucleotide) string\\n                        | otherwise = error $ \\"invalid nucleotide \\" ++ show nucleotide\\n\\nnucleotideCounts :: String -\\u003e Map Char Int\\nnucleotideCounts string =\\n    fromListWith (+) $ map (\\\\x -\\u003e (x, 1)) string ++ map (\\\\x -\\u003e (x, 0)) dna"}
115	44	f617641073eef068e3ab9e00	superseded	haskell	nucleotide-count	module DNA(count, nucleotideCounts) where\n\nimport Data.Map.Strict(Map, fromListWith)\n\n\ndna :: String\ndna = "ACGT"\n\nrna :: String\nrna = "ACGU"\n\nisDNA :: Char -> Bool\nisDNA nucleotide = nucleotide `elem` dna\n\nisRNA :: Char -> Bool\nisRNA nucleotide = nucleotide `elem` rna\n\ncount :: Char -> String -> Int\ncount nucleotide string =\n    case isRNA nucleotide || isDNA nucleotide of\n        True -> length $ filter (\\x -> x == nucleotide) string\n        _ -> error $ "invalid nucleotide '" ++ [nucleotide] ++ "'"\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts string =\n    fromListWith (+) $ map (\\x -> (x, 1)) string ++ map (\\x -> (x, 0)) dna	\N	\N	0	1	66	DNA.hs	2015-03-28 15:21:16	2015-03-28 15:21:16	{"DNA.hs":"module DNA(count, nucleotideCounts) where\\n\\nimport Data.Map.Strict(Map, fromListWith)\\n\\n\\ndna :: String\\ndna = \\"ACGT\\"\\n\\nrna :: String\\nrna = \\"ACGU\\"\\n\\nisDNA :: Char -\\u003e Bool\\nisDNA nucleotide = nucleotide `elem` dna\\n\\nisRNA :: Char -\\u003e Bool\\nisRNA nucleotide = nucleotide `elem` rna\\n\\ncount :: Char -\\u003e String -\\u003e Int\\ncount nucleotide string =\\n    case isRNA nucleotide || isDNA nucleotide of\\n        True -\\u003e length $ filter (\\\\x -\\u003e x == nucleotide) string\\n        _ -\\u003e error $ \\"invalid nucleotide '\\" ++ [nucleotide] ++ \\"'\\"\\n\\nnucleotideCounts :: String -\\u003e Map Char Int\\nnucleotideCounts string =\\n    fromListWith (+) $ map (\\\\x -\\u003e (x, 1)) string ++ map (\\\\x -\\u003e (x, 0)) dna"}
116	44	41a2f8968cb9a23dedd79f82	superseded	haskell	nucleotide-count	module DNA(count, nucleotideCounts) where\n\nimport Data.Map.Strict(Map, fromListWith)\n\n\ndna :: String\ndna = "ACGT"\n\nrna :: String\nrna = "ACGU"\n\nisDNA :: Char -> Bool\nisDNA nucleotide = nucleotide `elem` dna\n\nisRNA :: Char -> Bool\nisRNA nucleotide = nucleotide `elem` rna\n\ncount :: Char -> String -> Int\ncount nucleotide string | isRNA nucleotide || isDNA nucleotide = length $ filter (== nucleotide) string\n                        | otherwise = error $ "invalid nucleotide '" ++ [nucleotide] ++ "'"\n\nnucleotideCounts :: String -> Map Char Int\nnucleotideCounts string =\n    fromListWith (+) $ map (\\x -> (x, 1)) string ++ map (\\x -> (x, 0)) dna	\N	\N	0	2	66	DNA.hs	2015-07-13 09:54:22	2015-07-13 09:54:22	{"DNA.hs":"module DNA(count, nucleotideCounts) where\\n\\nimport Data.Map.Strict(Map, fromListWith)\\n\\n\\ndna :: String\\ndna = \\"ACGT\\"\\n\\nrna :: String\\nrna = \\"ACGU\\"\\n\\nisDNA :: Char -\\u003e Bool\\nisDNA nucleotide = nucleotide `elem` dna\\n\\nisRNA :: Char -\\u003e Bool\\nisRNA nucleotide = nucleotide `elem` rna\\n\\ncount :: Char -\\u003e String -\\u003e Int\\ncount nucleotide string | isRNA nucleotide || isDNA nucleotide = length $ filter (== nucleotide) string\\n                        | otherwise = error $ \\"invalid nucleotide '\\" ++ [nucleotide] ++ \\"'\\"\\n\\nnucleotideCounts :: String -\\u003e Map Char Int\\nnucleotideCounts string =\\n    fromListWith (+) $ map (\\\\x -\\u003e (x, 1)) string ++ map (\\\\x -\\u003e (x, 0)) dna"}
117	44	bec795d5c87f4d040d25879f	pending	python	series	class Series(object):\n\n    def __init__(self, input_string):\n        self.length = len(input_string)\n        try:\n            self.lst = [int(c) for c in input_string]\n        except:\n            raise ValueError("Please input a string that only contains numbers")\n\n    def slices(self, n):\n\n        if n > self.length or n <= 0:\n            raise ValueError("Invalid slice length for this series: %d" % n)\n\n        return [ self.lst[i:i+n] for i in range(self.length - n + 1) ]	\N	\N	0	2	67	series.py	2015-02-13 14:55:54	2015-02-13 14:55:54	{"series.py":"class Series(object):\\n\\n    def __init__(self, input_string):\\n        self.length = len(input_string)\\n        try:\\n            self.lst = [int(c) for c in input_string]\\n        except:\\n            raise ValueError(\\"Please input a string that only contains numbers\\")\\n\\n    def slices(self, n):\\n\\n        if n \\u003e self.length or n \\u003c= 0:\\n            raise ValueError(\\"Invalid slice length for this series: %d\\" % n)\\n\\n        return [ self.lst[i:i+n] for i in range(self.length - n + 1) ]"}
118	44	67a187bfb32b986a0a6a6643	superseded	python	series	class Series(object):\n\n    def __init__(self, input_string):\n        self.num = input_string\n        self.length = len(self.num)\n        try:\n            self.lst = [int(c) for c in self.num]\n        except:\n            self.lst = []\n            \n    def slices(self, n):\n\n        if n > self.length or n <= 0:\n            raise ValueError("Invalid slice length for this series: %d" % n)\n\n        ret = []\n        for i in range(self.length - n + 1):\n            each_slice = self.lst[i:i+n]\n            ret.append(each_slice)\n\n        return ret	\N	\N	0	1	67	series.py	2015-06-29 21:19:11	2015-06-29 21:19:11	{"series.py":"class Series(object):\\n\\n    def __init__(self, input_string):\\n        self.num = input_string\\n        self.length = len(self.num)\\n        try:\\n            self.lst = [int(c) for c in self.num]\\n        except:\\n            self.lst = []\\n            \\n    def slices(self, n):\\n\\n        if n \\u003e self.length or n \\u003c= 0:\\n            raise ValueError(\\"Invalid slice length for this series: %d\\" % n)\\n\\n        ret = []\\n        for i in range(self.length - n + 1):\\n            each_slice = self.lst[i:i+n]\\n            ret.append(each_slice)\\n\\n        return ret"}
119	44	a903b3a7b555d4398fc3cfa2	done	ruby	secret-handshake	class SecretHandshake\n\n  HANDSHAKES = { \n                  1     => "wink",\n                  10    => "double blink",\n                  100   => "close your eyes",\n                  1000  => "jump"\n  }\n\n  attr_reader :decimal_number\n\n  def initialize decimal_number\n    @decimal_number = decimal_number\n  end\n\n  def commands\n    if decimal_number.is_a? Integer\n      secret_handshakes\n    else\n      []\n    end\n  end\n\nprivate\n\n  def binary_number\n    decimal_number.to_s 2\n  end\n\n  def translator\n    result = Array.new\n\n    binary_number.chars.reverse.each_with_index do |digit, index|\n      result << HANDSHAKES[ digit.ljust( index + 1, '0' ).to_i ]\n    end\n\n    result.compact\n  end\n\n  def secret_handshakes\n    if binary_number.length == 5\n      translator.reverse\n    else\n      translator\n    end\n  end\n\nend	\N	\N	0	1	68	/ruby/secret-handshake/secret_handshake.rb	2015-06-24 13:00:38	2015-06-24 13:00:38	{"/ruby/secret-handshake/secret_handshake.rb":"class SecretHandshake\\n\\n  HANDSHAKES = { \\n                  1     =\\u003e \\"wink\\",\\n                  10    =\\u003e \\"double blink\\",\\n                  100   =\\u003e \\"close your eyes\\",\\n                  1000  =\\u003e \\"jump\\"\\n  }\\n\\n  attr_reader :decimal_number\\n\\n  def initialize decimal_number\\n    @decimal_number = decimal_number\\n  end\\n\\n  def commands\\n    if decimal_number.is_a? Integer\\n      secret_handshakes\\n    else\\n      []\\n    end\\n  end\\n\\nprivate\\n\\n  def binary_number\\n    decimal_number.to_s 2\\n  end\\n\\n  def translator\\n    result = Array.new\\n\\n    binary_number.chars.reverse.each_with_index do |digit, index|\\n      result \\u003c\\u003c HANDSHAKES[ digit.ljust( index + 1, '0' ).to_i ]\\n    end\\n\\n    result.compact\\n  end\\n\\n  def secret_handshakes\\n    if binary_number.length == 5\\n      translator.reverse\\n    else\\n      translator\\n    end\\n  end\\n\\nend"}
120	44	71fad51baf1c4c73d56c0c0e	done	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char       (isAlphaNum,toLower)\nimport Data.List       (foldl')\nimport Data.List.Split (wordsBy)\nimport Data.Map.Strict (Map,empty,insertWith)\n\nwordCount :: String -> Map String Integer\nwordCount\n  = foldl' tally empty\n  . wordsBy (not . isAlphaNum)\n  . fmap toLower\n  where\n    tally m x = insertWith (+) x 1 m	\N	\N	0	2	70	WordCount.hs	2015-03-08 03:41:14	2015-03-08 03:41:14	{"WordCount.hs":"module WordCount (wordCount) where\\n\\nimport Data.Char       (isAlphaNum,toLower)\\nimport Data.List       (foldl')\\nimport Data.List.Split (wordsBy)\\nimport Data.Map.Strict (Map,empty,insertWith)\\n\\nwordCount :: String -\\u003e Map String Integer\\nwordCount\\n  = foldl' tally empty\\n  . wordsBy (not . isAlphaNum)\\n  . fmap toLower\\n  where\\n    tally m x = insertWith (+) x 1 m"}
121	44	f486e38effa3cc2c55079900	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char\nimport Data.List       (foldl')\nimport Data.Map hiding (filter,foldl',null)\n\nwordCount :: String -> Map String Integer\nwordCount\n  = foldl' tally empty\n  . filter (not . null)\n  . words'\n  . fmap toLower\n  where\n    tally m x = insertWith (+) x 1 m\n    words' [] = []\n    words' xs = y : words' ys\n      where\n        (y,ys) = span isAlphaNum\n               $ dropWhile (not . isAlphaNum) xs	\N	\N	0	1	70	WordCount.hs	2015-05-11 23:48:57	2015-05-11 23:48:57	{"WordCount.hs":"module WordCount (wordCount) where\\n\\nimport Data.Char\\nimport Data.List       (foldl')\\nimport Data.Map hiding (filter,foldl',null)\\n\\nwordCount :: String -\\u003e Map String Integer\\nwordCount\\n  = foldl' tally empty\\n  . filter (not . null)\\n  . words'\\n  . fmap toLower\\n  where\\n    tally m x = insertWith (+) x 1 m\\n    words' [] = []\\n    words' xs = y : words' ys\\n      where\\n        (y,ys) = span isAlphaNum\\n               $ dropWhile (not . isAlphaNum) xs"}
122	44	e9e7593817f02acf0cfd16db	done	scala	word-count	class Phrase(phrase: String) {\n  val _matcher = """[\\w']+""".r\n  val normalized = phrase.toLowerCase\n  val words = _matcher.findAllIn(normalized).toList\n\n  def wordCount = words.groupBy(e => e).map(kv => kv._1 -> kv._2.length)\n}	\N	\N	0	1	71	word_count.scala	2015-02-14 04:20:12	2015-02-14 04:20:12	{"word_count.scala":"class Phrase(phrase: String) {\\n  val _matcher = \\"\\"\\"[\\\\w']+\\"\\"\\".r\\n  val normalized = phrase.toLowerCase\\n  val words = _matcher.findAllIn(normalized).toList\\n\\n  def wordCount = words.groupBy(e =\\u003e e).map(kv =\\u003e kv._1 -\\u003e kv._2.length)\\n}"}
123	44	4b01f34fe24752dc4ed70e35	done	python	luhn	class Luhn(object):\n\n  def __init__(self, code):\n    self.original_code = [ int(item) for item in reversed(list(str(code))) ]\n    self.code = [ self.original_code[i] * 2 if i % 2 != 0 and self.original_code[i] < 5 else self.original_code[i] * 2 - 9 if i % 2 != 0 else self.original_code[i] for i in range (len(self.original_code)) ][::-1]\n    self.check = sum(self.code) % 10\n\n  def addends(self):\n    return self.code\n\n  def checksum(self):\n    return self.check\n\n  def is_valid(self):\n    return self.check == 0\n\n  @staticmethod\n  def create(num):\n    return num * 10 + ((10 - Luhn(num * 10).checksum()) % 10)	\N	\N	0	1	72	luhn.py	2015-02-05 04:29:30	2015-02-05 04:29:30	{"luhn.py":"class Luhn(object):\\n\\n  def __init__(self, code):\\n    self.original_code = [ int(item) for item in reversed(list(str(code))) ]\\n    self.code = [ self.original_code[i] * 2 if i % 2 != 0 and self.original_code[i] \\u003c 5 else self.original_code[i] * 2 - 9 if i % 2 != 0 else self.original_code[i] for i in range (len(self.original_code)) ][::-1]\\n    self.check = sum(self.code) % 10\\n\\n  def addends(self):\\n    return self.code\\n\\n  def checksum(self):\\n    return self.check\\n\\n  def is_valid(self):\\n    return self.check == 0\\n\\n  @staticmethod\\n  def create(num):\\n    return num * 10 + ((10 - Luhn(num * 10).checksum()) % 10)"}
241	36	8182d61b6e6c6f18d6151289	superseded	ruby	word-count	class Words\n  attr_reader :sentence\n\n  def initialize(input)\n    input.gsub!(/\\W/, ' ')\n    @sentence = input.downcase\n  end\n\n  def count\n    results = Hash.new(0)\n    sentence.split(' ').each do |word|\n      results[word] += 1\n    end\n    results\n  end\nend	\N	\N	0	1	157	word-count.rb	2015-03-20 11:42:17	2015-03-20 11:42:17	{"word-count.rb":"class Words\\n  attr_reader :sentence\\n\\n  def initialize(input)\\n    input.gsub!(/\\\\W/, ' ')\\n    @sentence = input.downcase\\n  end\\n\\n  def count\\n    results = Hash.new(0)\\n    sentence.split(' ').each do |word|\\n      results[word] += 1\\n    end\\n    results\\n  end\\nend"}
124	44	eccabaf2aac73ffc4a6fdef4	pending	clojure	robot-name	(ns robot-name)\n\n(def characters "ABCDEFGHIJKLMNOPQRSTUVWXYZ")\n\n(def numbers "1234567890")\n\n(defn- rand-n-source [n source]\n  (->> (fn [] (rand-nth source))\n       (repeatedly)\n       (take n)\n       (apply str)))\n\n(defn- generate-id [] \n  (str (rand-n-source 2 characters)\n       (rand-n-source 4 numbers)))\n\n(defn robot []\n  (atom {:name ""}))\n\n(defn robot-name [robot]\n  (if (empty? @robot)\n    (reset! robot (generate-id))\n    @robot))\n\n(defn reset-name [robot]\n  (reset! robot ""))	\N	\N	0	1	73	/clojure/robot-name/robot_name.clj	2015-02-17 14:09:57	2015-02-17 14:09:57	{"/clojure/robot-name/robot_name.clj":"(ns robot-name)\\n\\n(def characters \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\")\\n\\n(def numbers \\"1234567890\\")\\n\\n(defn- rand-n-source [n source]\\n  (-\\u003e\\u003e (fn [] (rand-nth source))\\n       (repeatedly)\\n       (take n)\\n       (apply str)))\\n\\n(defn- generate-id [] \\n  (str (rand-n-source 2 characters)\\n       (rand-n-source 4 numbers)))\\n\\n(defn robot []\\n  (atom {:name \\"\\"}))\\n\\n(defn robot-name [robot]\\n  (if (empty? @robot)\\n    (reset! robot (generate-id))\\n    @robot))\\n\\n(defn reset-name [robot]\\n  (reset! robot \\"\\"))"}
125	44	bf28d7b2096dda62dfc9f189	done	elixir	sublist	defmodule Sublist do\n  @doc """\n  Returns whether the first list is a sublist or a superlist of the second list\n  and if not whether it is equal or unequal to the second list.\n  """\n  def compare(a, b) do\n    result = {:equal, :unequal, :sublist, :superlist}\n    _compare(a, b)\n  end\n\n  defp _compare(a, a) do\n    :equal\n  end\n\n  defp _compare(a, b) do\n    cond do\n      sublist_of?(a, b) ->\n        :sublist\n      sublist_of?(b, a) ->\n        :superlist\n      true              ->\n        :unequal\n    end\n  end\n\n  defp sublist_of?([], _), do: true\n  defp sublist_of?(_, []), do: false\n  defp sublist_of?(a, b) when length(a) > length(b), do: false\n  defp sublist_of?(a, b) do\n    if Enum.take(b, length(a)) === a do\n      true\n    else\n      [_ | t] = b\n      sublist_of?(a, t)\n    end\n  end \n\n  defp compact(list) do\n    Enum.reject(list, &is_nil/1)\n  end\nend	\N	\N	0	1	74	/elixir/sublist/sublist.exs	2015-02-22 20:13:51	2015-02-22 20:13:51	{"/elixir/sublist/sublist.exs":"defmodule Sublist do\\n  @doc \\"\\"\\"\\n  Returns whether the first list is a sublist or a superlist of the second list\\n  and if not whether it is equal or unequal to the second list.\\n  \\"\\"\\"\\n  def compare(a, b) do\\n    result = {:equal, :unequal, :sublist, :superlist}\\n    _compare(a, b)\\n  end\\n\\n  defp _compare(a, a) do\\n    :equal\\n  end\\n\\n  defp _compare(a, b) do\\n    cond do\\n      sublist_of?(a, b) -\\u003e\\n        :sublist\\n      sublist_of?(b, a) -\\u003e\\n        :superlist\\n      true              -\\u003e\\n        :unequal\\n    end\\n  end\\n\\n  defp sublist_of?([], _), do: true\\n  defp sublist_of?(_, []), do: false\\n  defp sublist_of?(a, b) when length(a) \\u003e length(b), do: false\\n  defp sublist_of?(a, b) do\\n    if Enum.take(b, length(a)) === a do\\n      true\\n    else\\n      [_ | t] = b\\n      sublist_of?(a, t)\\n    end\\n  end \\n\\n  defp compact(list) do\\n    Enum.reject(list, \\u0026is_nil/1)\\n  end\\nend"}
126	44	f8bedda29d328c6c7ded47a2	pending	python	beer-song	def bottles(n):\n\n\tif n == 0:\n\t\treturn "no more bottles"\n\tif n == 1:\n\t\treturn "1 bottle"\n\treturn "%d bottles" % n\n\ndef verse(n):\n\tres =  "%s of beer on the wall, %s of beer.\\n" % (bottles(n).capitalize(), bottles(n))\n\tif n == 0:\n\t\tres += "Go to the store and buy some more, 99 bottles of beer on the wall.\\n"\n\telif n == 1:\n\t\tres += "Take it down and pass it around, no more bottles of beer on the wall.\\n"\n\telse:\n\t\tres += "Take one down and pass it around, %s of beer on the wall.\\n" % bottles(n-1)\n\treturn res\n\ndef song(hi, low = 0):\n\treturn ''.join(\n\t\tverse(n) + '\\n'\n\t\tfor n in xrange(hi, low - 1, -1)\n\t)	\N	\N	0	1	75	/python/beer-song/beer.py	2015-02-14 06:01:08	2015-02-14 06:01:08	{"/python/beer-song/beer.py":"def bottles(n):\\n\\n\\tif n == 0:\\n\\t\\treturn \\"no more bottles\\"\\n\\tif n == 1:\\n\\t\\treturn \\"1 bottle\\"\\n\\treturn \\"%d bottles\\" % n\\n\\ndef verse(n):\\n\\tres =  \\"%s of beer on the wall, %s of beer.\\\\n\\" % (bottles(n).capitalize(), bottles(n))\\n\\tif n == 0:\\n\\t\\tres += \\"Go to the store and buy some more, 99 bottles of beer on the wall.\\\\n\\"\\n\\telif n == 1:\\n\\t\\tres += \\"Take it down and pass it around, no more bottles of beer on the wall.\\\\n\\"\\n\\telse:\\n\\t\\tres += \\"Take one down and pass it around, %s of beer on the wall.\\\\n\\" % bottles(n-1)\\n\\treturn res\\n\\ndef song(hi, low = 0):\\n\\treturn ''.join(\\n\\t\\tverse(n) + '\\\\n'\\n\\t\\tfor n in xrange(hi, low - 1, -1)\\n\\t)"}
127	44	05d75c825de12831c25f1411	pending	ruby	nth-prime	require 'prime'\n\nclass Prime\n  def self.nth(number)\n    fail ArgumentError, 'Invalid Input', caller if number <= 0\n    EratosthenesSieve.instance.get_nth_prime(number - 1)\n  end\nend	\N	\N	0	1	76	/ruby/nth-prime/prime.rb	2015-03-31 09:40:09	2015-03-31 09:40:09	{"/ruby/nth-prime/prime.rb":"require 'prime'\\n\\nclass Prime\\n  def self.nth(number)\\n    fail ArgumentError, 'Invalid Input', caller if number \\u003c= 0\\n    EratosthenesSieve.instance.get_nth_prime(number - 1)\\n  end\\nend"}
128	44	55a0d1fea54544107eb799a9	pending	javascript	hamming	module.exports = {\n    compute: function(a, b) {\n        var iterator = 0, diff = 0, length = a.length < b.length ? a.length : b.length;        \n        do {\n            if(a[iterator] !== b[iterator]) {\n                diff++;\n            }\n            iterator++;\n        } while (iterator < length)\n        return diff;\n    }\n}	\N	\N	0	1	77	hamming.js	2015-04-16 09:16:07	2015-04-16 09:16:07	{"hamming.js":"module.exports = {\\n    compute: function(a, b) {\\n        var iterator = 0, diff = 0, length = a.length \\u003c b.length ? a.length : b.length;        \\n        do {\\n            if(a[iterator] !== b[iterator]) {\\n                diff++;\\n            }\\n            iterator++;\\n        } while (iterator \\u003c length)\\n        return diff;\\n    }\\n}"}
129	44	efd04837041dee65ec72bc1c	pending	ruby	protein-translation	class Translation\n  PROTEINS = {\n    "Methionine"    => %w(AUG),\n    "Leucine"       => %w(UUA UUG),\n    "Serine"        => %w(UCU UCC UCA UCG),\n    "Cystine"       => %w(UGU UGC),\n    "Tyrosine"      => %w(UAU UAC),\n    "Tryptophan"    => %w(UGG),\n    "Phenylalanine" => %w(UUU UUC),\n    "STOP"          => %w(UAA UAG UGA),\n  }\n\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\n    Array(codons).each {|codon| hash[codon] = protein }\n  end\n\n  class << self\n    def of_codon(str)\n      CODONS.fetch(str){ raise InvalidCodonError }\n    end\n\n    def of_rna(str)\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\n        of_codon(triplet).tap do |protein|\n          return result if protein == "STOP"\n          result << protein\n        end\n      end\n    end\n  end\nend\n\nclass InvalidCodonError < ArgumentError\nend	\N	\N	0	1	78	translation.rb	2015-03-10 13:16:46	2015-03-10 13:16:46	{"translation.rb":"class Translation\\n  PROTEINS = {\\n    \\"Methionine\\"    =\\u003e %w(AUG),\\n    \\"Leucine\\"       =\\u003e %w(UUA UUG),\\n    \\"Serine\\"        =\\u003e %w(UCU UCC UCA UCG),\\n    \\"Cystine\\"       =\\u003e %w(UGU UGC),\\n    \\"Tyrosine\\"      =\\u003e %w(UAU UAC),\\n    \\"Tryptophan\\"    =\\u003e %w(UGG),\\n    \\"Phenylalanine\\" =\\u003e %w(UUU UUC),\\n    \\"STOP\\"          =\\u003e %w(UAA UAG UGA),\\n  }\\n\\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\\n    Array(codons).each {|codon| hash[codon] = protein }\\n  end\\n\\n  class \\u003c\\u003c self\\n    def of_codon(str)\\n      CODONS.fetch(str){ raise InvalidCodonError }\\n    end\\n\\n    def of_rna(str)\\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\\n        of_codon(triplet).tap do |protein|\\n          return result if protein == \\"STOP\\"\\n          result \\u003c\\u003c protein\\n        end\\n      end\\n    end\\n  end\\nend\\n\\nclass InvalidCodonError \\u003c ArgumentError\\nend"}
130	44	fc2e5640a9b4f78459e94476	superseded	fsharp	robot-name	﻿namespace RobotName\r\n\r\ntype RobotName() = \r\n    let random = System.Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\r\n    let randomDigit () = (random.Next() % 10).ToString()\r\n\r\n    let buildName () =\r\n        (seq {0..1} \r\n         |> Seq.map (fun _ -> randomLetter())\r\n         |> String.concat "")\r\n        +\r\n        (seq {0..2}\r\n         |> Seq.map (fun _ -> randomDigit())\r\n         |> String.concat "")\r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	1	80	RobotName.fs	2015-04-04 02:29:50	2015-04-04 02:29:50	{"RobotName.fs":"﻿namespace RobotName\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = System.Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\\r\\n    let randomDigit () = (random.Next() % 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        (seq {0..1} \\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomLetter())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n        +\\r\\n        (seq {0..2}\\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomDigit())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
131	44	acd9a975ebff330d461ae1eb	done	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\nopen System.Collections.Generic\r\n\r\ntype RobotName() = \r\n    static let usedNames = new List<String>()\r\n\r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let rec buildName () =\r\n        let candidate = \r\n            String.Concat [ randomLetter(); randomLetter(); \r\n                            randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n        if usedNames.Contains(candidate) then \r\n            buildName() \r\n        else \r\n            usedNames.Add(candidate)\r\n            candidate   \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	3	80	RobotName.fs	2015-04-30 20:45:17	2015-04-30 20:45:17	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\nopen System.Collections.Generic\\r\\n\\r\\ntype RobotName() = \\r\\n    static let usedNames = new List\\u003cString\\u003e()\\r\\n\\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let rec buildName () =\\r\\n        let candidate = \\r\\n            String.Concat [ randomLetter(); randomLetter(); \\r\\n                            randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n        if usedNames.Contains(candidate) then \\r\\n            buildName() \\r\\n        else \\r\\n            usedNames.Add(candidate)\\r\\n            candidate   \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
132	44	358876061926566d38e31285	superseded	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\n\r\ntype RobotName() = \r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let buildName () =\r\n        String.Concat [ randomLetter(); randomLetter(); \r\n                        randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	2	80	RobotName.fs	2015-06-25 04:04:41	2015-06-25 04:04:41	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        String.Concat [ randomLetter(); randomLetter(); \\r\\n                        randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
133	44	eca004aee83432dd5dfdf76f	done	ruby	prime-factors	class PrimeFactors\n  def self.for(n)\n    (2..Math.sqrt(n)).each_with_object([]) { |x, factors|\n      while n % x == 0\n        n /= x\n        factors << x\n      end\n    }.tap { |factors| factors << n unless n == 1 }\n  end\nend	\N	\N	0	1	81	prime_factors.rb	2015-06-06 06:53:45	2015-06-06 06:53:45	{"prime_factors.rb":"class PrimeFactors\\n  def self.for(n)\\n    (2..Math.sqrt(n)).each_with_object([]) { |x, factors|\\n      while n % x == 0\\n        n /= x\\n        factors \\u003c\\u003c x\\n      end\\n    }.tap { |factors| factors \\u003c\\u003c n unless n == 1 }\\n  end\\nend"}
134	44	c49a1bb3a4e44bb9e5ef90d5	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	82	/python/wordy/wordy.py	2015-02-27 10:18:36	2015-02-27 10:18:36	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
135	44	54add5253c8a2aace56bb037	done	javascript	crypto-square	var CryptoSquare = function CryptoSquare(input){ \n\t\t\n\t\tthis.normalizePlaintext = function normalizePlaintext(){\n\t\t\treturn input.toLowerCase().replace(/[^\\w\\d]/g,"");\n\t\t}\n\t\t\n\t\tthis.size = function size(){\n\t\t    return Math.ceil(Math.sqrt(this.normalized.length));\n\t\t}\n\n\t\tthis.plaintextSegments = function plaintextSegments(){\n\t\t\treturn this.separate(this.normalized).split(" ");\n\t\t}\n\n\t\tthis.ciphertext = function ciphertext(){\n\t\t\tvar result = "";\n\t\t\tvar plaintext = this.plaintextSegments();\n\t\t\tvar rows=this.size();\n\t\t\tfor(var i=0;i<rows;i++){\n\t\t\t\tfor(var chunk in plaintext){\n\t\t\t\t\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\t\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\treturn result;\t\n\t\t}\n\n\t\tthis.normalizeCiphertext = function normalizeCiphertext(){\n\t\t\treturn this.separate(this.ciphertext());\t\n\t\t}\n\n\t\tthis.separate = function(text){\n\t\t\tvar expression = new RegExp('.{1,'+this.size()+'}',"g")\n\t\t\treturn text.match(expression).join(" ");\t\n\t\t}\n\n\t\tthis.normalized = this.normalizePlaintext(input);\n}\nmodule.exports = CryptoSquare;	\N	\N	0	2	83	crypto-square.js	2015-05-16 23:22:17	2015-05-16 23:22:17	{"crypto-square.js":"var CryptoSquare = function CryptoSquare(input){ \\n\\t\\t\\n\\t\\tthis.normalizePlaintext = function normalizePlaintext(){\\n\\t\\t\\treturn input.toLowerCase().replace(/[^\\\\w\\\\d]/g,\\"\\");\\n\\t\\t}\\n\\t\\t\\n\\t\\tthis.size = function size(){\\n\\t\\t    return Math.ceil(Math.sqrt(this.normalized.length));\\n\\t\\t}\\n\\n\\t\\tthis.plaintextSegments = function plaintextSegments(){\\n\\t\\t\\treturn this.separate(this.normalized).split(\\" \\");\\n\\t\\t}\\n\\n\\t\\tthis.ciphertext = function ciphertext(){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar plaintext = this.plaintextSegments();\\n\\t\\t\\tvar rows=this.size();\\n\\t\\t\\tfor(var i=0;i\\u003crows;i++){\\n\\t\\t\\t\\tfor(var chunk in plaintext){\\n\\t\\t\\t\\t\\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\t\\n\\t\\t\\treturn result;\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalizeCiphertext = function normalizeCiphertext(){\\n\\t\\t\\treturn this.separate(this.ciphertext());\\t\\n\\t\\t}\\n\\n\\t\\tthis.separate = function(text){\\n\\t\\t\\tvar expression = new RegExp('.{1,'+this.size()+'}',\\"g\\")\\n\\t\\t\\treturn text.match(expression).join(\\" \\");\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalized = this.normalizePlaintext(input);\\n}\\nmodule.exports = CryptoSquare;"}
136	44	737b601573d7ee85ed9e4b76	superseded	javascript	crypto-square	var CryptoSquare = function CryptoSquare(input){ \n\t\t\n\t\tthis.normalizePlaintext = function normalizePlaintext(){\n\t\t\treturn input.toLowerCase().replace(/[^\\w\\d]/g,"");\n\t\t}\n\t\t\n\t\tthis.size = function size(){\n\t\t    return Math.ceil(Math.sqrt(this.normalized.length));\n\t\t}\n\n\t\tthis.plaintextSegments = function plaintextSegments(){\n\t\t\treturn this.separate(this.normalized).split(" ");\n\t\t}\n\n\t\tthis.ciphertext = function ciphertext(){\n\t\t\tvar result = "";\n\t\t\tvar plaintext = this.plaintextSegments();\n\t\t\tvar rows=this.size();\n\t\t\tfor(var i=0;i<rows;i++){\n\t\t\t\tfor(var chunk in plaintext){\n\t\t\t\t\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\t\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\treturn result;\t\n\t\t}\n\n\t\tthis.normalizeCiphertext = function normalizeCiphertext(){\n\t\t\treturn this.separate(this.ciphertext());\t\n\t\t}\n\n\t\tthis.separate = function(text){\n\t\t\tvar result = "";\n\t\t\tvar rows = this.size();\n\t\t\ttext.split("").map(function map(letter,index){\n\t\t\t\tresult+=letter;\n\t\t\t\tif((index+1)%rows===0)result+=" ";\n\t\t\t});\n\t\t\treturn result.trim();\n\t\t}\n\n\t\tthis.normalized = this.normalizePlaintext(input);\n}\nmodule.exports = CryptoSquare;	\N	\N	0	1	83	crypto-square.js	2015-07-06 16:53:03	2015-07-06 16:53:03	{"crypto-square.js":"var CryptoSquare = function CryptoSquare(input){ \\n\\t\\t\\n\\t\\tthis.normalizePlaintext = function normalizePlaintext(){\\n\\t\\t\\treturn input.toLowerCase().replace(/[^\\\\w\\\\d]/g,\\"\\");\\n\\t\\t}\\n\\t\\t\\n\\t\\tthis.size = function size(){\\n\\t\\t    return Math.ceil(Math.sqrt(this.normalized.length));\\n\\t\\t}\\n\\n\\t\\tthis.plaintextSegments = function plaintextSegments(){\\n\\t\\t\\treturn this.separate(this.normalized).split(\\" \\");\\n\\t\\t}\\n\\n\\t\\tthis.ciphertext = function ciphertext(){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar plaintext = this.plaintextSegments();\\n\\t\\t\\tvar rows=this.size();\\n\\t\\t\\tfor(var i=0;i\\u003crows;i++){\\n\\t\\t\\t\\tfor(var chunk in plaintext){\\n\\t\\t\\t\\t\\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\t\\n\\t\\t\\treturn result;\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalizeCiphertext = function normalizeCiphertext(){\\n\\t\\t\\treturn this.separate(this.ciphertext());\\t\\n\\t\\t}\\n\\n\\t\\tthis.separate = function(text){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar rows = this.size();\\n\\t\\t\\ttext.split(\\"\\").map(function map(letter,index){\\n\\t\\t\\t\\tresult+=letter;\\n\\t\\t\\t\\tif((index+1)%rows===0)result+=\\" \\";\\n\\t\\t\\t});\\n\\t\\t\\treturn result.trim();\\n\\t\\t}\\n\\n\\t\\tthis.normalized = this.normalizePlaintext(input);\\n}\\nmodule.exports = CryptoSquare;"}
137	44	1bbccc08b4b407ca7b8a0bfe	done	haskell	accumulate	module Accumulate (accumulate) where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate _ [] = []\naccumulate f (x:xs) = f x : accumulate f xs	\N	\N	0	2	84	Accumulate.hs	2015-05-09 17:19:02	2015-05-09 17:19:02	{"Accumulate.hs":"module Accumulate (accumulate) where\\n\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\naccumulate _ [] = []\\naccumulate f (x:xs) = f x : accumulate f xs"}
138	44	2cd8d3cf3988b772731979fd	superseded	haskell	accumulate	module Accumulate (accumulate) where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate f xs = accumulate' f xs []\n\naccumulate' :: (a -> b) -> [a] -> [b] -> [b]\naccumulate' _ [] acc = reverse acc\naccumulate' f (x:xs) acc = accumulate' f xs (f x:acc )	\N	\N	0	1	84	Accumulate.hs	2015-05-22 04:14:44	2015-05-22 04:14:44	{"Accumulate.hs":"module Accumulate (accumulate) where\\n\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\naccumulate f xs = accumulate' f xs []\\n\\naccumulate' :: (a -\\u003e b) -\\u003e [a] -\\u003e [b] -\\u003e [b]\\naccumulate' _ [] acc = reverse acc\\naccumulate' f (x:xs) acc = accumulate' f xs (f x:acc )"}
139	46	e095df24eb2513f3e2476494	pending	javascript	hamming	var Hamming = {\r\n  compute: function(Strand1, Strand2) {\r\n    var NumberDifferent = 0;\r\n//Do a length check first because everything else relies on that. \r\nif (Strand1.length != Strand2.length){\r\n  throw 'DNA strands must be of equal length.'\r\n};//end if\r\nfor (var i = 0;i<Strand1.length;i++){//does a loop for each character input. \r\nif (Strand1[i] != Strand2[i]){ //if the chars aren't the same add to the differnce counter. \r\n\tNumberDifferent ++\r\n};//end if\r\n};//end for\r\n return NumberDifferent; //return the # difference\r\n   }//end compute\r\n};//end hamming\r\n\r\nmodule.exports = Hamming;	\N	\N	0	1	85	\\javascript\\hamming\\hamming.js	2015-05-03 22:27:26	2015-05-03 22:27:26	{"\\\\javascript\\\\hamming\\\\hamming.js":"var Hamming = {\\r\\n  compute: function(Strand1, Strand2) {\\r\\n    var NumberDifferent = 0;\\r\\n//Do a length check first because everything else relies on that. \\r\\nif (Strand1.length != Strand2.length){\\r\\n  throw 'DNA strands must be of equal length.'\\r\\n};//end if\\r\\nfor (var i = 0;i\\u003cStrand1.length;i++){//does a loop for each character input. \\r\\nif (Strand1[i] != Strand2[i]){ //if the chars aren't the same add to the differnce counter. \\r\\n\\tNumberDifferent ++\\r\\n};//end if\\r\\n};//end for\\r\\n return NumberDifferent; //return the # difference\\r\\n   }//end compute\\r\\n};//end hamming\\r\\n\\r\\nmodule.exports = Hamming;"}
140	46	8ef832e961d108daa151af49	pending	go	grains	package grains\n\nimport (\n\t"errors"\n)\n\nfunc Square(n int) (uint64, error) {\n\tif n < 1 || n > 64 {\n\t\treturn 0, errors.New("out of range")\n\t}\n\treturn 1 << (uint(n) - 1), nil\n}\n\nfunc Total() uint64 {\n\tconst n uint = 64 // I'd have expected this as an input\n\treturn 1<<n - 1\n}	\N	\N	0	1	86	grains.go	2015-03-04 07:18:52	2015-03-04 07:18:52	{"grains.go":"package grains\\n\\nimport (\\n\\t\\"errors\\"\\n)\\n\\nfunc Square(n int) (uint64, error) {\\n\\tif n \\u003c 1 || n \\u003e 64 {\\n\\t\\treturn 0, errors.New(\\"out of range\\")\\n\\t}\\n\\treturn 1 \\u003c\\u003c (uint(n) - 1), nil\\n}\\n\\nfunc Total() uint64 {\\n\\tconst n uint = 64 // I'd have expected this as an input\\n\\treturn 1\\u003c\\u003cn - 1\\n}"}
141	48	fda9946789c80738bdf296d0	done	elixir	sublist	defmodule Sublist do\n  @doc """\n  Returns whether the first list is a sublist or a superlist of the second list\n  and if not whether it is equal or unequal to the second list.\n  """\n  def compare(a, b) do\n    result = {:equal, :unequal, :sublist, :superlist}\n    _compare(a, b)\n  end\n\n  defp _compare(a, a) do\n    :equal\n  end\n\n  defp _compare(a, b) do\n    cond do\n      sublist_of?(a, b) ->\n        :sublist\n      sublist_of?(b, a) ->\n        :superlist\n      true              ->\n        :unequal\n    end\n  end\n\n  defp sublist_of?([], _), do: true\n  defp sublist_of?(_, []), do: false\n  defp sublist_of?(a, b) when length(a) > length(b), do: false\n  defp sublist_of?(a, b) do\n    if Enum.take(b, length(a)) === a do\n      true\n    else\n      [_ | t] = b\n      sublist_of?(a, t)\n    end\n  end \n\n  defp compact(list) do\n    Enum.reject(list, &is_nil/1)\n  end\nend	\N	\N	0	1	87	/elixir/sublist/sublist.exs	2015-08-13 17:53:46	2015-08-13 17:53:46	{"/elixir/sublist/sublist.exs":"defmodule Sublist do\\n  @doc \\"\\"\\"\\n  Returns whether the first list is a sublist or a superlist of the second list\\n  and if not whether it is equal or unequal to the second list.\\n  \\"\\"\\"\\n  def compare(a, b) do\\n    result = {:equal, :unequal, :sublist, :superlist}\\n    _compare(a, b)\\n  end\\n\\n  defp _compare(a, a) do\\n    :equal\\n  end\\n\\n  defp _compare(a, b) do\\n    cond do\\n      sublist_of?(a, b) -\\u003e\\n        :sublist\\n      sublist_of?(b, a) -\\u003e\\n        :superlist\\n      true              -\\u003e\\n        :unequal\\n    end\\n  end\\n\\n  defp sublist_of?([], _), do: true\\n  defp sublist_of?(_, []), do: false\\n  defp sublist_of?(a, b) when length(a) \\u003e length(b), do: false\\n  defp sublist_of?(a, b) do\\n    if Enum.take(b, length(a)) === a do\\n      true\\n    else\\n      [_ | t] = b\\n      sublist_of?(a, t)\\n    end\\n  end \\n\\n  defp compact(list) do\\n    Enum.reject(list, \\u0026is_nil/1)\\n  end\\nend"}
175	7	7dee956641f8d0c780190d10	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	2	110	dna.clj	2015-06-11 17:07:02	2015-06-11 17:07:02	{"dna.clj":"(ns dna)\\n\\n(def NUCLEOTIDES (set \\"ACGTU\\"))\\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\\\U))\\n\\n(defn count [nucleotide dna]\\n  (when (not (contains? NUCLEOTIDES nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))"}
142	48	c5eb4bed6868c7fff847663b	done	javascript	anagram	var anagram = function(word) {\n  var obj = new Object();\n\n  obj.matches = function(words) {\n    if (arguments.length > 1) {\n      words = Array.prototype.slice.call(arguments);\n    }\n\n    return words.filter(function(match) {\n      return isAnagram(word, match) && !isIdentical(word, match);\n    });\n  };\n\n  return obj;\n};\n\nfunction isIdentical(a, b) {\n  return a.toLowerCase() === b.toLowerCase();\n}\n\nfunction isAnagram(a, b) {\n  return sort(a) === sort(b);\n}\n\nfunction sort(word) {\n  return word.toLowerCase().split('').sort().join('');\n}	\N	\N	0	1	88	anagram.js	2015-08-05 00:24:45	2015-08-05 00:24:45	{"anagram.js":"var anagram = function(word) {\\n  var obj = new Object();\\n\\n  obj.matches = function(words) {\\n    if (arguments.length \\u003e 1) {\\n      words = Array.prototype.slice.call(arguments);\\n    }\\n\\n    return words.filter(function(match) {\\n      return isAnagram(word, match) \\u0026\\u0026 !isIdentical(word, match);\\n    });\\n  };\\n\\n  return obj;\\n};\\n\\nfunction isIdentical(a, b) {\\n  return a.toLowerCase() === b.toLowerCase();\\n}\\n\\nfunction isAnagram(a, b) {\\n  return sort(a) === sort(b);\\n}\\n\\nfunction sort(word) {\\n  return word.toLowerCase().split('').sort().join('');\\n}"}
143	48	959ba0cffcebf6403444bc35	superseded	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule OctalSeq( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readOct' 0\n  where \n    readOct' acc "" = acc `seq` acc\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\n      where\n        toOctVal '0' = 0\n        toOctVal '1' = 1\n        toOctVal '2' = 2\n        toOctVal '3' = 3\n        toOctVal '4' = 4\n        toOctVal '5' = 5\n        toOctVal '6' = 6\n        toOctVal '7' = 7\n        toOctVal  _  = error "invalid digit"\n\nshowOct :: Integral a => a -> String\nshowOct n | n < 0 = ""\n          | n == 0 = "0"\n          | otherwise = octDigitsP "" n\n  where\n    octDigitsP ds 0 = ds `seq` ds\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` 8\n        dc = toOctChar $! d\n        toOctChar 0 = '0'\n        toOctChar 1 = '1'\n        toOctChar 2 = '2'\n        toOctChar 3 = '3'\n        toOctChar 4 = '4'\n        toOctChar 5 = '5'\n        toOctChar 6 = '6'\n        toOctChar 7 = '7'\n        toOctChar _ = error "invalid digit"	\N	\N	0	1	89	OctalSeq.hs	2015-08-24 17:11:21	2015-08-24 17:11:21	{"OctalSeq.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule OctalSeq( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readOct' 0\\n  where \\n    readOct' acc \\"\\" = acc `seq` acc\\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\\n      where\\n        toOctVal '0' = 0\\n        toOctVal '1' = 1\\n        toOctVal '2' = 2\\n        toOctVal '3' = 3\\n        toOctVal '4' = 4\\n        toOctVal '5' = 5\\n        toOctVal '6' = 6\\n        toOctVal '7' = 7\\n        toOctVal  _  = error \\"invalid digit\\"\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct n | n \\u003c 0 = \\"\\"\\n          | n == 0 = \\"0\\"\\n          | otherwise = octDigitsP \\"\\" n\\n  where\\n    octDigitsP ds 0 = ds `seq` ds\\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` 8\\n        dc = toOctChar $! d\\n        toOctChar 0 = '0'\\n        toOctChar 1 = '1'\\n        toOctChar 2 = '2'\\n        toOctChar 3 = '3'\\n        toOctChar 4 = '4'\\n        toOctChar 5 = '5'\\n        toOctChar 6 = '6'\\n        toOctChar 7 = '7'\\n        toOctChar _ = error \\"invalid digit\\""}
144	48	4119174b58addff2a4368d76	done	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule Octal( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readBase 8\n\nshowOct :: Integral a => a -> String\nshowOct = showBase 8\n\nreadBase :: Integral a => a -> String -> a\nreadBase b s = readBase' 0 s\n  where \n    readBase' acc "" = acc\n    readBase' acc (d : ds) \n        | acc `seq` False = undefined \n        | not (valid b d) = 0\n        | otherwise = readBase' (b*acc + fromChar d) ds\n\nvalid :: Integral b => b -> Char -> Bool\nvalid b c | b <= 10   = c >= '0' && c < bd\n          | otherwise = (c >= '0' && c <= '9') || \n                        (c >= 'A' && c < bdu) ||\n                        (c >= 'a' && c < bd)\n  where \n    bd = fromDigit b\n    bdu = fromDigitC b\n\nfromChar :: Integral a => Char -> a\nfromChar c | c <= '9' = fromBase '0' c\n           | c <= 'Z' = fromBase 'A' c\n           | otherwise = fromBase 'a' c\n  where \n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \n\nshowBase :: Integral a => a -> a -> String\nshowBase b n | b < 1 || n < 0 = ""\n             | n == 0 = "0"\n             | otherwise = digitsP "" n\n  where\n    digitsP ds k | dc `seq` ds `seq` False = undefined\n                 | k == 0 = ds\n                 | otherwise = digitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` b\n        dc = fromDigit $! d\n\ntoBase :: Integral a => Char -> a -> Char\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\n\nfromDigit :: Integral a => a -> Char\nfromDigit d | d <= 9 = toBase '0' d\n            | otherwise = toBase 'a' d\n\nfromDigitC :: Integral a => a -> Char\nfromDigitC d | d <= 9 = toBase '0' d\n             | otherwise = toBase 'A' d	\N	\N	0	2	89	Octal.hs	2015-09-11 14:30:46	2015-09-11 14:30:46	{"Octal.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule Octal( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readBase 8\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct = showBase 8\\n\\nreadBase :: Integral a =\\u003e a -\\u003e String -\\u003e a\\nreadBase b s = readBase' 0 s\\n  where \\n    readBase' acc \\"\\" = acc\\n    readBase' acc (d : ds) \\n        | acc `seq` False = undefined \\n        | not (valid b d) = 0\\n        | otherwise = readBase' (b*acc + fromChar d) ds\\n\\nvalid :: Integral b =\\u003e b -\\u003e Char -\\u003e Bool\\nvalid b c | b \\u003c= 10   = c \\u003e= '0' \\u0026\\u0026 c \\u003c bd\\n          | otherwise = (c \\u003e= '0' \\u0026\\u0026 c \\u003c= '9') || \\n                        (c \\u003e= 'A' \\u0026\\u0026 c \\u003c bdu) ||\\n                        (c \\u003e= 'a' \\u0026\\u0026 c \\u003c bd)\\n  where \\n    bd = fromDigit b\\n    bdu = fromDigitC b\\n\\nfromChar :: Integral a =\\u003e Char -\\u003e a\\nfromChar c | c \\u003c= '9' = fromBase '0' c\\n           | c \\u003c= 'Z' = fromBase 'A' c\\n           | otherwise = fromBase 'a' c\\n  where \\n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \\n\\nshowBase :: Integral a =\\u003e a -\\u003e a -\\u003e String\\nshowBase b n | b \\u003c 1 || n \\u003c 0 = \\"\\"\\n             | n == 0 = \\"0\\"\\n             | otherwise = digitsP \\"\\" n\\n  where\\n    digitsP ds k | dc `seq` ds `seq` False = undefined\\n                 | k == 0 = ds\\n                 | otherwise = digitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` b\\n        dc = fromDigit $! d\\n\\ntoBase :: Integral a =\\u003e Char -\\u003e a -\\u003e Char\\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\\n\\nfromDigit :: Integral a =\\u003e a -\\u003e Char\\nfromDigit d | d \\u003c= 9 = toBase '0' d\\n            | otherwise = toBase 'a' d\\n\\nfromDigitC :: Integral a =\\u003e a -\\u003e Char\\nfromDigitC d | d \\u003c= 9 = toBase '0' d\\n             | otherwise = toBase 'A' d"}
145	48	e81be7233aeb30e03b4727c6	superseded	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	1	90	year.py	2015-08-03 23:50:29	2015-08-03 23:50:29	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
146	48	d64153a74b39c8b1b0aa9144	superseded	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) \nor divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	2	90	year.py	2015-08-29 12:44:36	2015-08-29 12:44:36	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) \\nor divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
147	48	d4d5bcf75b8ce203993d5500	done	python	leap	def is_leap_year(year):\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\n\ndef divisible_by(number, divisor):\n    return (number % divisor == 0)	\N	\N	0	3	90	year.py	2015-08-31 06:22:39	2015-08-31 06:22:39	{"year.py":"def is_leap_year(year):\\n    return (divisible_by(year, 4) and not divisible_by(year, 100)) or divisible_by(year, 400)\\n\\ndef divisible_by(number, divisor):\\n    return (number % divisor == 0)"}
148	48	7bf639e3fbd037791920edc5	pending	python	sieve	def sieve(n):\n\n    sieve_range = range(2, n+1)\n    elements = [[i, 'unmarked'] for i in sieve_range]\n\n    for i, element in enumerate(elements):\n        value, state = element\n        if state == 'unmarked':\n\n            rest = elements[(i+1):]\n            for item in rest:\n                if item[0] % value == 0:\n                    item[1] = 'marked'\n\n    return [value for value,state in elements\n                if state == 'unmarked']	\N	\N	0	1	91	sieve.py	2015-09-05 04:54:53	2015-09-05 04:54:53	{"sieve.py":"def sieve(n):\\n\\n    sieve_range = range(2, n+1)\\n    elements = [[i, 'unmarked'] for i in sieve_range]\\n\\n    for i, element in enumerate(elements):\\n        value, state = element\\n        if state == 'unmarked':\\n\\n            rest = elements[(i+1):]\\n            for item in rest:\\n                if item[0] % value == 0:\\n                    item[1] = 'marked'\\n\\n    return [value for value,state in elements\\n                if state == 'unmarked']"}
149	48	133819b82cf667ef8f90fda7	pending	ruby	twelve-days	class TwelveDaysSong\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\n\n  VERSES = [\n    ["twelve Drummers Drumming, ", 12],\n    ["eleven Pipers Piping, ", 11],\n    ["ten Lords-a-Leaping, ", 10],\n    ["nine Ladies Dancing, ", 9],    \n    ["eight Maids-a-Milking, ", 8],      \n    ["seven Swans-a-Swimming, ", 7],\n    ["six Geese-a-Laying, ", 6],\n    ["five Gold Rings, ", 5],\n    ["four Calling Birds, ", 4], \n    ["three French Hens, ", 3],\n    ["two Turtle Doves, and ", 2],\n  ]\n\n  def verse(num)\n    s = "On the #{DAYS[num-1]} day of Christmas my true love gave to me, "\n    VERSES.each do |phrase, verse_num|\n      s << phrase if num >= verse_num\n    end\n    s << "a Partridge in a Pear Tree.\\n"\n    s\n  end\n\n  def verses(start, stop)\n    (start..stop).map { |num| verse(num) }.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses(1, 12)\n  end\nend	\N	\N	0	1	92	twelve_days.rb	2015-09-02 22:26:23	2015-09-02 22:26:23	{"twelve_days.rb":"class TwelveDaysSong\\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\\n\\n  VERSES = [\\n    [\\"twelve Drummers Drumming, \\", 12],\\n    [\\"eleven Pipers Piping, \\", 11],\\n    [\\"ten Lords-a-Leaping, \\", 10],\\n    [\\"nine Ladies Dancing, \\", 9],    \\n    [\\"eight Maids-a-Milking, \\", 8],      \\n    [\\"seven Swans-a-Swimming, \\", 7],\\n    [\\"six Geese-a-Laying, \\", 6],\\n    [\\"five Gold Rings, \\", 5],\\n    [\\"four Calling Birds, \\", 4], \\n    [\\"three French Hens, \\", 3],\\n    [\\"two Turtle Doves, and \\", 2],\\n  ]\\n\\n  def verse(num)\\n    s = \\"On the #{DAYS[num-1]} day of Christmas my true love gave to me, \\"\\n    VERSES.each do |phrase, verse_num|\\n      s \\u003c\\u003c phrase if num \\u003e= verse_num\\n    end\\n    s \\u003c\\u003c \\"a Partridge in a Pear Tree.\\\\n\\"\\n    s\\n  end\\n\\n  def verses(start, stop)\\n    (start..stop).map { |num| verse(num) }.join(\\"\\\\n\\") + \\"\\\\n\\"\\n  end\\n\\n  def sing\\n    verses(1, 12)\\n  end\\nend"}
150	49	dd0ea64269034c6a4cdccc9d	superseded	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    zero_counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\n    @nucleotides.chars.each_with_object(zero_counts) do |nucleotide, counts|\n      counts[nucleotide] += 1\n    end\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    nucleotide_counts[nucl] || 0\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = %w[A C G T]\n  RNA_NUCLEOTIDES = %w[A C G U]\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	\N	\N	0	2	93	nucleotide-count.rb	2015-01-22 19:00:42	2015-01-22 19:00:42	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    zero_counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\\n    @nucleotides.chars.each_with_object(zero_counts) do |nucleotide, counts|\\n      counts[nucleotide] += 1\\n    end\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    nucleotide_counts[nucl] || 0\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = %w[A C G T]\\n  RNA_NUCLEOTIDES = %w[A C G U]\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
151	49	fb80ea8fe1516eae8f4ba40d	done	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, count(nucl)] }]\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    @nucleotides.chars.count(nucl)\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = %w[A C G T]\n  RNA_NUCLEOTIDES = %w[A C G U]\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	\N	\N	0	3	93	nucleotide-count.rb	2015-06-01 11:55:25	2015-06-01 11:55:25	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, count(nucl)] }]\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    @nucleotides.chars.count(nucl)\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = %w[A C G T]\\n  RNA_NUCLEOTIDES = %w[A C G U]\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
152	49	12a3d1063f5964b50ed34ec7	superseded	ruby	nucleotide-count	class DNA\n  def initialize(nucleotides)\n    raise ArgumentError unless nucleotides.chars.all?(&method(:dna_nucleotide?))\n    @nucleotides = nucleotides\n  end\n\n  def nucleotide_counts\n    counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\n    @nucleotides.chars.each do |nucleotide|\n      counts[nucleotide] += 1\n    end\n    counts\n  end\n\n  def count(nucl)\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\n    nucleotide_counts[nucl] || 0\n  end\n\n  private\n\n  DNA_NUCLEOTIDES = 'ACGT'.chars\n  RNA_NUCLEOTIDES = 'ACGU'.chars\n\n  def dna_nucleotide?(nucl)\n    DNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def rna_nucleotide?(nucl)\n    RNA_NUCLEOTIDES.include?(nucl)\n  end\n\n  def dna_or_rna_nucleotide?(nucl)\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\n  end\nend	\N	\N	0	1	93	nucleotide-count.rb	2015-06-29 03:20:15	2015-06-29 03:20:15	{"nucleotide-count.rb":"class DNA\\n  def initialize(nucleotides)\\n    raise ArgumentError unless nucleotides.chars.all?(\\u0026method(:dna_nucleotide?))\\n    @nucleotides = nucleotides\\n  end\\n\\n  def nucleotide_counts\\n    counts = Hash[DNA_NUCLEOTIDES.map { |nucl| [nucl, 0] }]\\n    @nucleotides.chars.each do |nucleotide|\\n      counts[nucleotide] += 1\\n    end\\n    counts\\n  end\\n\\n  def count(nucl)\\n    raise ArgumentError unless dna_or_rna_nucleotide?(nucl)\\n    nucleotide_counts[nucl] || 0\\n  end\\n\\n  private\\n\\n  DNA_NUCLEOTIDES = 'ACGT'.chars\\n  RNA_NUCLEOTIDES = 'ACGU'.chars\\n\\n  def dna_nucleotide?(nucl)\\n    DNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def rna_nucleotide?(nucl)\\n    RNA_NUCLEOTIDES.include?(nucl)\\n  end\\n\\n  def dna_or_rna_nucleotide?(nucl)\\n    dna_nucleotide?(nucl) || rna_nucleotide?(nucl)\\n  end\\nend"}
160	7	d7f6c67df594c02da27a914b	pending	ruby	hamming	class Hamming \n\n      def Hamming.compute strandA, strandB \n        hamming_distance = 0\n        end_point = strandA.length\n        length_difference = strandA.length - strandB.length\n\n        if length_difference > 0\n            end_point = strandB.length\n        end\n\n        end_point -= 1;\n\n        for i in ( 0..end_point )\n               if strandA[i] != strandB[i]\n                    hamming_distance += 1\n               end\n        end\n\n        return hamming_distance\n\n    end\n\nend	\N	\N	0	1	100	hamming.rb	2015-05-02 20:05:06	2015-05-02 20:05:06	{"hamming.rb":"class Hamming \\n\\n      def Hamming.compute strandA, strandB \\n        hamming_distance = 0\\n        end_point = strandA.length\\n        length_difference = strandA.length - strandB.length\\n\\n        if length_difference \\u003e 0\\n            end_point = strandB.length\\n        end\\n\\n        end_point -= 1;\\n\\n        for i in ( 0..end_point )\\n               if strandA[i] != strandB[i]\\n                    hamming_distance += 1\\n               end\\n        end\\n\\n        return hamming_distance\\n\\n    end\\n\\nend"}
153	49	b905d524b9c7598ef547e6d6	pending	ruby	roman-numerals	class Fixnum\n  def to_roman\n    array = self.to_s.split(//)\n    num_array = []\n    array.each do |x|\n      num_array.push(x.to_i)\n    end\n    roman_numeral=[]\n    ones = num_array.pop\n    if ones == 9\n      roman_numeral.unshift('IX')\n    elsif ones == 4\n      roman_numeral.unshift('IV')\n    else\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\n    end\n\n    if num_array.empty? == false\n      tens = num_array.pop\n      if tens == 9\n        roman_numeral.unshift('XC')\n      elsif tens == 4\n        roman_numeral.unshift('XL')\n      else\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\n      end\n    end\n\n    if num_array.empty? == false\n      hundreds = num_array.pop\n      if hundreds == 9\n        roman_numeral.unshift('CM')\n      elsif hundreds == 4\n        roman_numeral.unshift('CD')\n      else\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\n      end\n    end\n\n    if num_array.empty? == false\n      thousands = num_array.pop\n      roman_numeral.unshift('M'*thousands)\n    end\n\n    roman_numeral.join\n  end\nend	\N	\N	0	1	94	/ruby/roman-numerals/roman.rb	2015-02-18 03:22:52	2015-02-18 03:22:52	{"/ruby/roman-numerals/roman.rb":"class Fixnum\\n  def to_roman\\n    array = self.to_s.split(//)\\n    num_array = []\\n    array.each do |x|\\n      num_array.push(x.to_i)\\n    end\\n    roman_numeral=[]\\n    ones = num_array.pop\\n    if ones == 9\\n      roman_numeral.unshift('IX')\\n    elsif ones == 4\\n      roman_numeral.unshift('IV')\\n    else\\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\\n    end\\n\\n    if num_array.empty? == false\\n      tens = num_array.pop\\n      if tens == 9\\n        roman_numeral.unshift('XC')\\n      elsif tens == 4\\n        roman_numeral.unshift('XL')\\n      else\\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      hundreds = num_array.pop\\n      if hundreds == 9\\n        roman_numeral.unshift('CM')\\n      elsif hundreds == 4\\n        roman_numeral.unshift('CD')\\n      else\\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      thousands = num_array.pop\\n      roman_numeral.unshift('M'*thousands)\\n    end\\n\\n    roman_numeral.join\\n  end\\nend"}
154	49	2ce10f2e441e520f7a171d1e	pending	ruby	protein-translation	class Translation\n  PROTEINS = {\n    "Methionine"    => %w(AUG),\n    "Leucine"       => %w(UUA UUG),\n    "Serine"        => %w(UCU UCC UCA UCG),\n    "Cystine"       => %w(UGU UGC),\n    "Tyrosine"      => %w(UAU UAC),\n    "Tryptophan"    => %w(UGG),\n    "Phenylalanine" => %w(UUU UUC),\n    "STOP"          => %w(UAA UAG UGA),\n  }\n\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\n    Array(codons).each {|codon| hash[codon] = protein }\n  end\n\n  class << self\n    def of_codon(str)\n      CODONS.fetch(str){ raise InvalidCodonError }\n    end\n\n    def of_rna(str)\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\n        of_codon(triplet).tap do |protein|\n          return result if protein == "STOP"\n          result << protein\n        end\n      end\n    end\n  end\nend\n\nclass InvalidCodonError < ArgumentError\nend	\N	\N	0	1	95	translation.rb	2015-02-01 15:09:14	2015-02-01 15:09:14	{"translation.rb":"class Translation\\n  PROTEINS = {\\n    \\"Methionine\\"    =\\u003e %w(AUG),\\n    \\"Leucine\\"       =\\u003e %w(UUA UUG),\\n    \\"Serine\\"        =\\u003e %w(UCU UCC UCA UCG),\\n    \\"Cystine\\"       =\\u003e %w(UGU UGC),\\n    \\"Tyrosine\\"      =\\u003e %w(UAU UAC),\\n    \\"Tryptophan\\"    =\\u003e %w(UGG),\\n    \\"Phenylalanine\\" =\\u003e %w(UUU UUC),\\n    \\"STOP\\"          =\\u003e %w(UAA UAG UGA),\\n  }\\n\\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\\n    Array(codons).each {|codon| hash[codon] = protein }\\n  end\\n\\n  class \\u003c\\u003c self\\n    def of_codon(str)\\n      CODONS.fetch(str){ raise InvalidCodonError }\\n    end\\n\\n    def of_rna(str)\\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\\n        of_codon(triplet).tap do |protein|\\n          return result if protein == \\"STOP\\"\\n          result \\u003c\\u003c protein\\n        end\\n      end\\n    end\\n  end\\nend\\n\\nclass InvalidCodonError \\u003c ArgumentError\\nend"}
155	49	9ca9e89071ff709c23cb1fe5	pending	ruby	sum-of-multiples	class SumOfMultiples\r\n  def initialize(*multiples)\r\n    @multiples = multiples\r\n  end\r\n\r\n  def to(n)\r\n    (0...n).to_a.select{ |x| multiple? x }.inject(:+)\r\n  end\r\n\r\n  def self.to(n)\r\n    SumOfMultiples.new(3, 5).to(n)\r\n  end\r\n\r\n  private\r\n\r\n  def multiple?(x)\r\n    @multiples.any? { |m| x % m == 0 }\r\n  end\r\nend	\N	\N	0	1	96	\\ruby\\sum-of-multiples\\sum.rb	2015-05-17 11:34:16	2015-05-17 11:34:16	{"\\\\ruby\\\\sum-of-multiples\\\\sum.rb":"class SumOfMultiples\\r\\n  def initialize(*multiples)\\r\\n    @multiples = multiples\\r\\n  end\\r\\n\\r\\n  def to(n)\\r\\n    (0...n).to_a.select{ |x| multiple? x }.inject(:+)\\r\\n  end\\r\\n\\r\\n  def self.to(n)\\r\\n    SumOfMultiples.new(3, 5).to(n)\\r\\n  end\\r\\n\\r\\n  private\\r\\n\\r\\n  def multiple?(x)\\r\\n    @multiples.any? { |m| x % m == 0 }\\r\\n  end\\r\\nend"}
156	26	4700b377011d98732bb3cd3a	pending	python	word-count	from collections import Counter\n\n\ndef word_count(phrase):\n    return Counter(phrase.split())	\N	\N	0	2	97	wordcount.py	2015-08-12 20:53:28	2015-08-12 20:53:28	{"wordcount.py":"from collections import Counter\\n\\n\\ndef word_count(phrase):\\n    return Counter(phrase.split())"}
157	26	c5666a9365fa3261c87eabcb	superseded	python	word-count	from collections import defaultdict\n\n\ndef word_count(phrase):\n    word_count = defaultdict(lambda: 0)\n\n    for word in phrase.split():\n        word_count[word] += 1\n\n    return word_count	\N	\N	0	1	97	wordcount.py	2015-08-13 04:40:52	2015-08-13 04:40:52	{"wordcount.py":"from collections import defaultdict\\n\\n\\ndef word_count(phrase):\\n    word_count = defaultdict(lambda: 0)\\n\\n    for word in phrase.split():\\n        word_count[word] += 1\\n\\n    return word_count"}
158	26	c04c90f7697416593f0bb6d8	pending	ruby	sieve	class Sieve\n  attr_reader :limit, :candidates, :composites\n\n  def initialize(limit)\n    @limit = limit\n    @candidates = (2..limit).to_a\n    @composites = {}\n  end\n\n  def primes\n    candidates.each_with_object([]) do |candidate, primes|\n      next if composites.key?(candidate)\n      primes << candidate\n      ((candidate * 2)..limit).step(candidate) do |multiple|\n        composites[multiple] = true\n      end\n    end\n  end\nend	\N	\N	0	1	98	/ruby/sieve/sieve.rb	2015-08-01 16:59:35	2015-08-01 16:59:35	{"/ruby/sieve/sieve.rb":"class Sieve\\n  attr_reader :limit, :candidates, :composites\\n\\n  def initialize(limit)\\n    @limit = limit\\n    @candidates = (2..limit).to_a\\n    @composites = {}\\n  end\\n\\n  def primes\\n    candidates.each_with_object([]) do |candidate, primes|\\n      next if composites.key?(candidate)\\n      primes \\u003c\\u003c candidate\\n      ((candidate * 2)..limit).step(candidate) do |multiple|\\n        composites[multiple] = true\\n      end\\n    end\\n  end\\nend"}
159	26	0f566eb00dd0ae08c37c0a57	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	99	/python/wordy/wordy.py	2015-08-25 23:29:19	2015-08-25 23:29:19	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
161	7	bad53485dc5c235ced94bf2a	done	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\nopen System.Collections.Generic\r\n\r\ntype RobotName() = \r\n    static let usedNames = new List<String>()\r\n\r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let rec buildName () =\r\n        let candidate = \r\n            String.Concat [ randomLetter(); randomLetter(); \r\n                            randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n        if usedNames.Contains(candidate) then \r\n            buildName() \r\n        else \r\n            usedNames.Add(candidate)\r\n            candidate   \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	3	101	RobotName.fs	2015-05-15 03:38:39	2015-05-15 03:38:39	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\nopen System.Collections.Generic\\r\\n\\r\\ntype RobotName() = \\r\\n    static let usedNames = new List\\u003cString\\u003e()\\r\\n\\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let rec buildName () =\\r\\n        let candidate = \\r\\n            String.Concat [ randomLetter(); randomLetter(); \\r\\n                            randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n        if usedNames.Contains(candidate) then \\r\\n            buildName() \\r\\n        else \\r\\n            usedNames.Add(candidate)\\r\\n            candidate   \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
162	7	41ee027e25da2e03000c2bbd	superseded	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\n\r\ntype RobotName() = \r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let buildName () =\r\n        String.Concat [ randomLetter(); randomLetter(); \r\n                        randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	2	101	RobotName.fs	2015-05-23 14:12:19	2015-05-23 14:12:19	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        String.Concat [ randomLetter(); randomLetter(); \\r\\n                        randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
163	7	6630f965c19f79f3cb0bf0b0	superseded	fsharp	robot-name	﻿namespace RobotName\r\n\r\ntype RobotName() = \r\n    let random = System.Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\r\n    let randomDigit () = (random.Next() % 10).ToString()\r\n\r\n    let buildName () =\r\n        (seq {0..1} \r\n         |> Seq.map (fun _ -> randomLetter())\r\n         |> String.concat "")\r\n        +\r\n        (seq {0..2}\r\n         |> Seq.map (fun _ -> randomDigit())\r\n         |> String.concat "")\r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	1	101	RobotName.fs	2015-07-12 16:25:16	2015-07-12 16:25:16	{"RobotName.fs":"﻿namespace RobotName\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = System.Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\\r\\n    let randomDigit () = (random.Next() % 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        (seq {0..1} \\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomLetter())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n        +\\r\\n        (seq {0..2}\\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomDigit())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
164	7	8ed122d6dd904284106840aa	superseded	python	grains	def on_square(n):\n    return 1 << (n - 1)\n\ndef total_after(n):\n    return 1 << n - 1	\N	\N	0	1	102	grains.py	2015-04-24 00:33:02	2015-04-24 00:33:02	{"grains.py":"def on_square(n):\\n    return 1 \\u003c\\u003c (n - 1)\\n\\ndef total_after(n):\\n    return 1 \\u003c\\u003c n - 1"}
165	7	1d9b19d81de99201f8f139d8	pending	python	grains	def on_square(n):\n    return 1 << (n - 1)\n\ndef total_after(n):\n    return (1 << n) - 1	\N	\N	0	2	102	grains.py	2015-05-22 09:06:34	2015-05-22 09:06:34	{"grains.py":"def on_square(n):\\n    return 1 \\u003c\\u003c (n - 1)\\n\\ndef total_after(n):\\n    return (1 \\u003c\\u003c n) - 1"}
166	7	778e8d2c9c260a4b0dd37614	superseded	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nsub new{\n\tmy ($class, $key) = @_;\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	1	103	Cipher.pm	2015-08-25 07:06:09	2015-08-25 07:06:09	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
174	7	b021a5e7593f52a3b7a705b7	done	clojure	nucleotide-count	(ns dna)\n\n(def ^{:private true} nucleotides (set "ACGTU"))\n(def ^{:private true} dna-nucleotides (disj nucleotides \\U))\n\n(defn count [nucleotide dna]\n  (when (not (contains? nucleotides nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) dna-nucleotides)))	\N	\N	0	3	110	dna.clj	2015-03-14 22:57:24	2015-03-14 22:57:24	{"dna.clj":"(ns dna)\\n\\n(def ^{:private true} nucleotides (set \\"ACGTU\\"))\\n(def ^{:private true} dna-nucleotides (disj nucleotides \\\\U))\\n\\n(defn count [nucleotide dna]\\n  (when (not (contains? nucleotides nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) dna-nucleotides)))"}
167	7	d8aabf633be64c49028e7dd9	done	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nmy @words = 'a'..'z';\n\nsub new{\n\tmy ($class, $key) = @_;\n\tdie "ArgumentError: $key" if defined $key and ($key =~ /[^a-z]/ or not length $key);\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	2	103	Cipher.pm	2015-08-26 09:53:01	2015-08-26 09:53:01	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nmy @words = 'a'..'z';\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\tdie \\"ArgumentError: $key\\" if defined $key and ($key =~ /[^a-z]/ or not length $key);\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
168	7	f84c3d5ca8695f9537c53123	pending	ruby	kindergarten-garden	class Garden\n  attr_reader :plantings, :students\n\n  def initialize(diagram, students=default_class)\n    @plantings = parse_diagram(diagram)\n    @students = parse_students(students).sort\n  end\n\n  private\n\n  def parse_diagram(diagram)\n    diagram.split("\\n").map{ |row| row.chars }\n  end\n\n  def parse_students(students)\n    students.map { |s| s.downcase.to_sym }\n  end\n\n  def student_garden_locations\n    locations = {}\n    students.each_with_index do |student, i|\n      locations[student] = ((i * 2)..(i * 2 + 1))\n    end\n    locations\n  end\n\n  def method_missing(student)\n    my_locations = student_garden_locations[student]\n    my_plants = plantings.map { |row| row[my_locations] }\n    unabbreviate(my_plants)\n  end\n\n  def unabbreviate(plants)\n    plants.flatten.map { |plant| abbreviations[plant] }\n  end\n\n  def abbreviations\n    { "R" => :radishes,\n      "C" => :clover,\n      "G" => :grass,\n      "V" => :violets\n    }\n  end\n\n  def default_class\n    [ :alice, :bob, :charlie, :david,\n      :eve, :fred, :ginny, :harriet,\n      :ileana, :joseph, :kincaid, :larry]\n  end\n\nend	\N	\N	0	1	104	garden.rb	2015-06-24 02:53:24	2015-06-24 02:53:24	{"garden.rb":"class Garden\\n  attr_reader :plantings, :students\\n\\n  def initialize(diagram, students=default_class)\\n    @plantings = parse_diagram(diagram)\\n    @students = parse_students(students).sort\\n  end\\n\\n  private\\n\\n  def parse_diagram(diagram)\\n    diagram.split(\\"\\\\n\\").map{ |row| row.chars }\\n  end\\n\\n  def parse_students(students)\\n    students.map { |s| s.downcase.to_sym }\\n  end\\n\\n  def student_garden_locations\\n    locations = {}\\n    students.each_with_index do |student, i|\\n      locations[student] = ((i * 2)..(i * 2 + 1))\\n    end\\n    locations\\n  end\\n\\n  def method_missing(student)\\n    my_locations = student_garden_locations[student]\\n    my_plants = plantings.map { |row| row[my_locations] }\\n    unabbreviate(my_plants)\\n  end\\n\\n  def unabbreviate(plants)\\n    plants.flatten.map { |plant| abbreviations[plant] }\\n  end\\n\\n  def abbreviations\\n    { \\"R\\" =\\u003e :radishes,\\n      \\"C\\" =\\u003e :clover,\\n      \\"G\\" =\\u003e :grass,\\n      \\"V\\" =\\u003e :violets\\n    }\\n  end\\n\\n  def default_class\\n    [ :alice, :bob, :charlie, :david,\\n      :eve, :fred, :ginny, :harriet,\\n      :ileana, :joseph, :kincaid, :larry]\\n  end\\n\\nend"}
169	7	ab91cf9f7452871d3825d5f1	pending	erlang	strain	-module(strain).\n-export([keep/2, discard/2]).\n\nkeep(Predicate, Collection) when is_function(Predicate) ->\n    keep(Predicate, Collection, []).\n\ndiscard(Predicate, Collection) when is_function(Predicate) ->\n    discard(Predicate, Collection, []).\n\nkeep(_Predicate, [], Acc) -> lists:reverse(Acc);\nkeep(Predicate, [H|T], Acc) ->\n    case Predicate(H) of\n        true -> keep(Predicate, T, [H|Acc]);\n        false -> keep(Predicate, T, Acc)\n    end.\n\ndiscard(_Predicate, [], Acc) -> lists:reverse(Acc);\ndiscard(Predicate, [H|T], Acc) ->\n    case Predicate(H) of\n        true -> discard(Predicate, T, Acc);\n        false -> discard(Predicate, T, [H|Acc])\n    end.	\N	\N	0	1	105	strain.erl	2015-04-09 21:00:41	2015-04-09 21:00:41	{"strain.erl":"-module(strain).\\n-export([keep/2, discard/2]).\\n\\nkeep(Predicate, Collection) when is_function(Predicate) -\\u003e\\n    keep(Predicate, Collection, []).\\n\\ndiscard(Predicate, Collection) when is_function(Predicate) -\\u003e\\n    discard(Predicate, Collection, []).\\n\\nkeep(_Predicate, [], Acc) -\\u003e lists:reverse(Acc);\\nkeep(Predicate, [H|T], Acc) -\\u003e\\n    case Predicate(H) of\\n        true -\\u003e keep(Predicate, T, [H|Acc]);\\n        false -\\u003e keep(Predicate, T, Acc)\\n    end.\\n\\ndiscard(_Predicate, [], Acc) -\\u003e lists:reverse(Acc);\\ndiscard(Predicate, [H|T], Acc) -\\u003e\\n    case Predicate(H) of\\n        true -\\u003e discard(Predicate, T, Acc);\\n        false -\\u003e discard(Predicate, T, [H|Acc])\\n    end."}
170	7	9128e39693ea02da3c0973fd	pending	clojure	raindrops	(ns raindrops)\n\n(defn- get-string [n]\n  (apply str [(if (= 0 (mod n 3)) "Pling")\n              (if (= 0 (mod n 5)) "Plang")\n              (if (= 0 (mod n 7)) "Plong")]))\n\n(defn convert [n]\n  (let [s (get-string n)]\n    (if (= "" s)\n      (str n)\n      s)))	\N	\N	0	1	107	raindrops.clj	2015-03-08 13:40:49	2015-03-08 13:40:49	{"raindrops.clj":"(ns raindrops)\\n\\n(defn- get-string [n]\\n  (apply str [(if (= 0 (mod n 3)) \\"Pling\\")\\n              (if (= 0 (mod n 5)) \\"Plang\\")\\n              (if (= 0 (mod n 7)) \\"Plong\\")]))\\n\\n(defn convert [n]\\n  (let [s (get-string n)]\\n    (if (= \\"\\" s)\\n      (str n)\\n      s)))"}
171	7	2d37a34c8589564c5aa88e50	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	108	/python/wordy/wordy.py	2015-03-06 10:51:19	2015-03-06 10:51:19	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
172	7	4802e28183324714991ec0e4	superseded	python	hamming	def distance(a, b):\n    if len(a) != len(b):\n        return\n\n    count = 0\n    for x in zip(a, b):\n        if x[0] != x[1]:\n            count += 1\n    return count	\N	\N	0	1	109	hamming.py	2015-04-27 11:45:56	2015-04-27 11:45:56	{"hamming.py":"def distance(a, b):\\n    if len(a) != len(b):\\n        return\\n\\n    count = 0\\n    for x in zip(a, b):\\n        if x[0] != x[1]:\\n            count += 1\\n    return count"}
173	7	a68a3233e35318c26d148898	pending	python	hamming	def distance(a, b):\n    if len(a) != len(b):\n        raise Exception('Argument lengths differ.')\n\n    count = 0\n    for x in zip(a, b):\n        if x[0] != x[1]:\n            count += 1\n    return count	\N	\N	0	2	109	hamming.py	2015-06-01 01:05:25	2015-06-01 01:05:25	{"hamming.py":"def distance(a, b):\\n    if len(a) != len(b):\\n        raise Exception('Argument lengths differ.')\\n\\n    count = 0\\n    for x in zip(a, b):\\n        if x[0] != x[1]:\\n            count += 1\\n    return count"}
176	7	c0e9b04699e4fe5a0e65e370	superseded	clojure	nucleotide-count	(ns dna)\n\n(def NUCLEOTIDES (set "ACGTU"))\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\U))\n\n(defn dna/count [nucleotide dna]\n  (when (not (contains? NUCLEOTIDES nucleotide))\n    (throw (Exception. "invalid nucleotide")))\n  (clojure.core/count (filter (partial = nucleotide) dna)))\n\n(defn nucleotide-counts [dna]\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))	\N	\N	0	1	110	dna.clj	2015-06-26 11:12:08	2015-06-26 11:12:08	{"dna.clj":"(ns dna)\\n\\n(def NUCLEOTIDES (set \\"ACGTU\\"))\\n(def DNA_NUCLEOTIDES (disj NUCLEOTIDES \\\\U))\\n\\n(defn dna/count [nucleotide dna]\\n  (when (not (contains? NUCLEOTIDES nucleotide))\\n    (throw (Exception. \\"invalid nucleotide\\")))\\n  (clojure.core/count (filter (partial = nucleotide) dna)))\\n\\n(defn nucleotide-counts [dna]\\n  (into {} (map #(vector % (count % dna)) DNA_NUCLEOTIDES)))"}
177	7	ce31c9dfeae5a304b3f5e07a	pending	javascript	gigasecond	(function() {\n  var Gigasecond = function(startDate) {\n    var startDate_ms = Date.parse(startDate),\n        endDate_ms = new Date(startDate_ms + 1000000000000),\n        year = endDate_ms.getFullYear(),\n        month = endDate_ms.getMonth(),\n        day = endDate_ms.getDate();\n\n    this.date = function() {\n      return new Date (year, month, day);\n    };\n  };\n\n  module.exports = Gigasecond;\n})();	\N	\N	0	1	111	gigasecond.js	2015-03-19 15:16:05	2015-03-19 15:16:05	{"gigasecond.js":"(function() {\\n  var Gigasecond = function(startDate) {\\n    var startDate_ms = Date.parse(startDate),\\n        endDate_ms = new Date(startDate_ms + 1000000000000),\\n        year = endDate_ms.getFullYear(),\\n        month = endDate_ms.getMonth(),\\n        day = endDate_ms.getDate();\\n\\n    this.date = function() {\\n      return new Date (year, month, day);\\n    };\\n  };\\n\\n  module.exports = Gigasecond;\\n})();"}
178	7	bf8ce65aff7d1c11f622261e	pending	lua	hamming	local Hamming = {}\n\nfunction Hamming.compute(str1, str2)\n  local distance = 0\n\n  for i = 1, math.min(#str1, #str2) do\n    if str1:sub(i,i) ~= str2:sub(i,i) then\n      distance = distance + 1\n    end\n  end\n\n  return distance\nend\n\nreturn Hamming	\N	\N	0	1	112	hamming.lua	2015-08-01 11:46:46	2015-08-01 11:46:46	{"hamming.lua":"local Hamming = {}\\n\\nfunction Hamming.compute(str1, str2)\\n  local distance = 0\\n\\n  for i = 1, math.min(#str1, #str2) do\\n    if str1:sub(i,i) ~= str2:sub(i,i) then\\n      distance = distance + 1\\n    end\\n  end\\n\\n  return distance\\nend\\n\\nreturn Hamming"}
179	7	1d9a1e26f46fadcf66387625	pending	csharp	bob	private static string Hey(string s)\r\n{\r\n\ts = s.Trim();\r\n\tif (s.ToUpper() == s && s.Any(char.IsLetter))\r\n\t\treturn "Whoa, chill out!";\r\n\telse if (s.EndsWith("?"))\r\n\t\treturn "Sure.";\r\n\telse if (s == "")\r\n\t\treturn "Fine. Be that way!";\r\n\treturn "Whatever.";\r\n}	\N	\N	0	1	113	Bob.cs	2015-06-04 20:25:01	2015-06-04 20:25:01	{"Bob.cs":"private static string Hey(string s)\\r\\n{\\r\\n\\ts = s.Trim();\\r\\n\\tif (s.ToUpper() == s \\u0026\\u0026 s.Any(char.IsLetter))\\r\\n\\t\\treturn \\"Whoa, chill out!\\";\\r\\n\\telse if (s.EndsWith(\\"?\\"))\\r\\n\\t\\treturn \\"Sure.\\";\\r\\n\\telse if (s == \\"\\")\\r\\n\\t\\treturn \\"Fine. Be that way!\\";\\r\\n\\treturn \\"Whatever.\\";\\r\\n}"}
180	7	3c30a6a825c313190bfa7592	pending	haskell	strain	module Strain (keep, discard) where\n\nkeep :: (a -> Bool) -> [a] -> [a]\nkeep _ [] = []\nkeep predicate (x:xs)\n    | predicate x = x : keep predicate xs\n    | otherwise   = keep predicate xs\n\ndiscard :: (a -> Bool) -> [a] -> [a]\ndiscard _ [] = []\ndiscard predicate (x:xs)\n    | predicate x = discard predicate xs\n    | otherwise   = x : discard predicate xs	\N	\N	0	1	114	Strain.hs	2015-04-30 20:31:09	2015-04-30 20:31:09	{"Strain.hs":"module Strain (keep, discard) where\\n\\nkeep :: (a -\\u003e Bool) -\\u003e [a] -\\u003e [a]\\nkeep _ [] = []\\nkeep predicate (x:xs)\\n    | predicate x = x : keep predicate xs\\n    | otherwise   = keep predicate xs\\n\\ndiscard :: (a -\\u003e Bool) -\\u003e [a] -\\u003e [a]\\ndiscard _ [] = []\\ndiscard predicate (x:xs)\\n    | predicate x = discard predicate xs\\n    | otherwise   = x : discard predicate xs"}
181	7	4849160494c68f58cba28d87	done	javascript	sieve	var Sieve = function(num) {\n  this.num = num;\n  this.primes = [];\n\n  var isPrime = function(n) {\n    var mid = Math.floor( n / 2 );\n\n    for ( var i = 2; i <= mid; i++ ) {\n      if ( n % i === 0 ) {\n        return false\n      }\n    }\n    return true;\n  }\n\n  for ( var i = 2; i <= this.num; i++ ) {\n    if ( isPrime(i) ) {\n      this.primes.push(i);\n    }\n  }\n};	\N	\N	0	1	115	sieve_test.js	2015-04-05 01:15:00	2015-04-05 01:15:00	{"sieve_test.js":"var Sieve = function(num) {\\n  this.num = num;\\n  this.primes = [];\\n\\n  var isPrime = function(n) {\\n    var mid = Math.floor( n / 2 );\\n\\n    for ( var i = 2; i \\u003c= mid; i++ ) {\\n      if ( n % i === 0 ) {\\n        return false\\n      }\\n    }\\n    return true;\\n  }\\n\\n  for ( var i = 2; i \\u003c= this.num; i++ ) {\\n    if ( isPrime(i) ) {\\n      this.primes.push(i);\\n    }\\n  }\\n};"}
182	7	d60582b0010dfd087fc41baa	superseded	haskell	bob	module Bob where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor x | filter (not . isSpace) x == "" = "Fine. Be that way!"\nresponseFor s | yelling s                      = "Woah, chill out!"\nresponseFor q | last q == '?'                  = "Sure."\nresponseFor _                                  = "Whatever."\n\nyelling :: String -> Bool\nyelling s = all (isLetter .-> isUpper) s && any isLetter s\n  where\n    a .-> b = \\x -> not (a x) || b x -- logical implication	\N	\N	0	1	116	bob.hs	2015-03-08 09:39:37	2015-03-08 09:39:37	{"bob.hs":"module Bob where\\n\\nimport Data.Char\\n\\nresponseFor :: String -\\u003e String\\nresponseFor x | filter (not . isSpace) x == \\"\\" = \\"Fine. Be that way!\\"\\nresponseFor s | yelling s                      = \\"Woah, chill out!\\"\\nresponseFor q | last q == '?'                  = \\"Sure.\\"\\nresponseFor _                                  = \\"Whatever.\\"\\n\\nyelling :: String -\\u003e Bool\\nyelling s = all (isLetter .-\\u003e isUpper) s \\u0026\\u0026 any isLetter s\\n  where\\n    a .-\\u003e b = \\\\x -\\u003e not (a x) || b x -- logical implication"}
183	7	ed7477197569418576fdbd23	done	haskell	bob	module Bob where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor x | filter (not . isSpace) x == "" = "Fine. Be that way!"\nresponseFor s | yelling s                      = "Woah, chill out!"\nresponseFor q | last q == '?'                  = "Sure."\nresponseFor _                                  = "Whatever."\n\nyelling :: String -> Bool\nyelling s = all (not . isLower) s && any isLetter s	\N	\N	0	2	116	bob.hs	2015-08-06 16:48:10	2015-08-06 16:48:10	{"bob.hs":"module Bob where\\n\\nimport Data.Char\\n\\nresponseFor :: String -\\u003e String\\nresponseFor x | filter (not . isSpace) x == \\"\\" = \\"Fine. Be that way!\\"\\nresponseFor s | yelling s                      = \\"Woah, chill out!\\"\\nresponseFor q | last q == '?'                  = \\"Sure.\\"\\nresponseFor _                                  = \\"Whatever.\\"\\n\\nyelling :: String -\\u003e Bool\\nyelling s = all (not . isLower) s \\u0026\\u0026 any isLetter s"}
242	36	a0c9a80a78a8d858f39e5a6d	pending	ruby	word-count	class Words\n  attr_reader :sentence\n\n  def initialize(sentence)\n    @sentence = normalize_sentence(sentence)\n  end\n\n  def count\n    results = Hash.new(0)\n    sentence.split(' ').each do |word|\n      results[word] += 1\n    end\n    results\n  end\n\n  private\n\n  def normalize_sentence(sentence)\n    sentence.gsub(/\\W/, ' ').downcase\n  end\nend	\N	\N	0	3	157	word-count.rb	2015-05-08 12:23:02	2015-05-08 12:23:02	{"word-count.rb":"class Words\\n  attr_reader :sentence\\n\\n  def initialize(sentence)\\n    @sentence = normalize_sentence(sentence)\\n  end\\n\\n  def count\\n    results = Hash.new(0)\\n    sentence.split(' ').each do |word|\\n      results[word] += 1\\n    end\\n    results\\n  end\\n\\n  private\\n\\n  def normalize_sentence(sentence)\\n    sentence.gsub(/\\\\W/, ' ').downcase\\n  end\\nend"}
184	23	f2eb05a5e4d5140cb8c9af6a	done	python	grade-school	class School:\n\n    def __init__(self, name):\n        self._name = name\n        self.db = {}\n\n    def add(self, student_name, grade):\n        if grade not in self.db:\n            self.db[grade] = set()\n\n        self.db[grade].add(student_name)\n\n    def grade(self, grade_to_look_up):\n            return self.db.get(grade_to_look_up, set())\n\n    def sort(self):\n        return {grade: tuple(sorted(student_names))\n            for grade, student_names in self.db.items()}	\N	\N	0	2	117	school.py	2015-04-10 11:26:49	2015-04-10 11:26:49	{"school.py":"class School:\\n\\n    def __init__(self, name):\\n        self._name = name\\n        self.db = {}\\n\\n    def add(self, student_name, grade):\\n        if grade not in self.db:\\n            self.db[grade] = set()\\n\\n        self.db[grade].add(student_name)\\n\\n    def grade(self, grade_to_look_up):\\n            return self.db.get(grade_to_look_up, set())\\n\\n    def sort(self):\\n        return {grade: tuple(sorted(student_names))\\n            for grade, student_names in self.db.items()}"}
185	23	7a0df010ced50a9b61d141ba	superseded	python	grade-school	class School:\n\n    def __init__(self, name):\n        self._name = name\n        self.db = {}\n\n    def add(self, student_name, grade):\n        if grade not in self.db:\n            self.db[grade] = set()\n\n        self.db[grade].add(student_name)\n\n    def grade(self, grade_to_look_up):\n            return self.db.get(grade_to_look_up, set())\n\n    def sort(self):\n        sorted_students = {\n            3: ("Kyle",),\n            4: ("Christopher", "Jennifer",),\n            6: ("Kareem",)\n        }\n\n        return sorted_students	\N	\N	0	1	117	school.py	2015-04-26 17:10:25	2015-04-26 17:10:25	{"school.py":"class School:\\n\\n    def __init__(self, name):\\n        self._name = name\\n        self.db = {}\\n\\n    def add(self, student_name, grade):\\n        if grade not in self.db:\\n            self.db[grade] = set()\\n\\n        self.db[grade].add(student_name)\\n\\n    def grade(self, grade_to_look_up):\\n            return self.db.get(grade_to_look_up, set())\\n\\n    def sort(self):\\n        sorted_students = {\\n            3: (\\"Kyle\\",),\\n            4: (\\"Christopher\\", \\"Jennifer\\",),\\n            6: (\\"Kareem\\",)\\n        }\\n\\n        return sorted_students"}
186	23	aff187548c31d330713a53fd	pending	python	kindergarten-garden	# William Morris\r\n# exercism.io\r\n# garden.py\r\n\r\nclass Garden:\r\n\r\n    def __init__(self, rows, students =['Alice', 'Bob', 'Charlie', 'David', 'Eve',\r\n                                        'Fred', 'Ginny', 'Harriet', 'Ileana',\r\n                                        'Joseph', 'Kincaid', 'Larry'] ):\r\n        \r\n        self.names = students\r\n        self.names.sort()\r\n        self.seeds ={'G':'Grass','C':'Clover','R':'Radishes','V':'Violets'}\r\n        self.rows = rows.split()\r\n        name_index = 0\r\n        self.students_cups = {}\r\n        for cups in range(0,len(self.rows[0]),2):\r\n            cups_first_row = self.rows[0][cups:cups+2]\r\n            cups_second_row = self.rows[1][cups:cups+2]\r\n            self.students_cups[self.names[name_index]]=cups_first_row + cups_second_row\r\n            name_index += 1\r\n        self.students_plants = {}\r\n        for name in self.students_cups.keys():\r\n            self.students_plants[name] =  [self.seeds[seed] for seed in\r\n                                          self.students_cups[name]]\r\n            \r\n    def plants(self,name):\r\n        return self.students_plants[name]\r\n    \r	\N	\N	0	1	118	garden.py	2015-06-22 14:13:14	2015-06-22 14:13:14	{"garden.py":"# William Morris\\r\\n# exercism.io\\r\\n# garden.py\\r\\n\\r\\nclass Garden:\\r\\n\\r\\n    def __init__(self, rows, students =['Alice', 'Bob', 'Charlie', 'David', 'Eve',\\r\\n                                        'Fred', 'Ginny', 'Harriet', 'Ileana',\\r\\n                                        'Joseph', 'Kincaid', 'Larry'] ):\\r\\n        \\r\\n        self.names = students\\r\\n        self.names.sort()\\r\\n        self.seeds ={'G':'Grass','C':'Clover','R':'Radishes','V':'Violets'}\\r\\n        self.rows = rows.split()\\r\\n        name_index = 0\\r\\n        self.students_cups = {}\\r\\n        for cups in range(0,len(self.rows[0]),2):\\r\\n            cups_first_row = self.rows[0][cups:cups+2]\\r\\n            cups_second_row = self.rows[1][cups:cups+2]\\r\\n            self.students_cups[self.names[name_index]]=cups_first_row + cups_second_row\\r\\n            name_index += 1\\r\\n        self.students_plants = {}\\r\\n        for name in self.students_cups.keys():\\r\\n            self.students_plants[name] =  [self.seeds[seed] for seed in\\r\\n                                          self.students_cups[name]]\\r\\n            \\r\\n    def plants(self,name):\\r\\n        return self.students_plants[name]\\r\\n    \\r"}
187	23	eaca0b5ce102dc2810c60d26	pending	haskell	leap	module LeapYear (isLeapYear, isLeapYear2) where\n\nisLeapYear :: Int -> Bool\nisLeapYear year\n    | year `mod` 100 == 0 && year `mod` 400 /= 0  = False\n    | year `mod` 4 == 0  =  True\n    | otherwise = False\n\nisLeapYear2 :: Int -> Bool\nisLeapYear2 year\n    | year `mod` 4 /= 0  = False\n    | year `mod` 100 == 0 && year `mod` 400 /= 0 = False\n    | otherwise = True	\N	\N	0	1	119	haskell/leap/leapyear.hs	2015-07-31 00:17:03	2015-07-31 00:17:03	{"haskell/leap/leapyear.hs":"module LeapYear (isLeapYear, isLeapYear2) where\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear year\\n    | year `mod` 100 == 0 \\u0026\\u0026 year `mod` 400 /= 0  = False\\n    | year `mod` 4 == 0  =  True\\n    | otherwise = False\\n\\nisLeapYear2 :: Int -\\u003e Bool\\nisLeapYear2 year\\n    | year `mod` 4 /= 0  = False\\n    | year `mod` 100 == 0 \\u0026\\u0026 year `mod` 400 /= 0 = False\\n    | otherwise = True"}
188	17	0344c965d7b4be89c2d5e55e	pending	python	kindergarten-garden	# William Morris\r\n# exercism.io\r\n# garden.py\r\n\r\nclass Garden:\r\n\r\n    def __init__(self, rows, students =['Alice', 'Bob', 'Charlie', 'David', 'Eve',\r\n                                        'Fred', 'Ginny', 'Harriet', 'Ileana',\r\n                                        'Joseph', 'Kincaid', 'Larry'] ):\r\n        \r\n        self.names = students\r\n        self.names.sort()\r\n        self.seeds ={'G':'Grass','C':'Clover','R':'Radishes','V':'Violets'}\r\n        self.rows = rows.split()\r\n        name_index = 0\r\n        self.students_cups = {}\r\n        for cups in range(0,len(self.rows[0]),2):\r\n            cups_first_row = self.rows[0][cups:cups+2]\r\n            cups_second_row = self.rows[1][cups:cups+2]\r\n            self.students_cups[self.names[name_index]]=cups_first_row + cups_second_row\r\n            name_index += 1\r\n        self.students_plants = {}\r\n        for name in self.students_cups.keys():\r\n            self.students_plants[name] =  [self.seeds[seed] for seed in\r\n                                          self.students_cups[name]]\r\n            \r\n    def plants(self,name):\r\n        return self.students_plants[name]\r\n    \r	\N	\N	0	1	120	garden.py	2015-07-09 02:27:36	2015-07-09 02:27:36	{"garden.py":"# William Morris\\r\\n# exercism.io\\r\\n# garden.py\\r\\n\\r\\nclass Garden:\\r\\n\\r\\n    def __init__(self, rows, students =['Alice', 'Bob', 'Charlie', 'David', 'Eve',\\r\\n                                        'Fred', 'Ginny', 'Harriet', 'Ileana',\\r\\n                                        'Joseph', 'Kincaid', 'Larry'] ):\\r\\n        \\r\\n        self.names = students\\r\\n        self.names.sort()\\r\\n        self.seeds ={'G':'Grass','C':'Clover','R':'Radishes','V':'Violets'}\\r\\n        self.rows = rows.split()\\r\\n        name_index = 0\\r\\n        self.students_cups = {}\\r\\n        for cups in range(0,len(self.rows[0]),2):\\r\\n            cups_first_row = self.rows[0][cups:cups+2]\\r\\n            cups_second_row = self.rows[1][cups:cups+2]\\r\\n            self.students_cups[self.names[name_index]]=cups_first_row + cups_second_row\\r\\n            name_index += 1\\r\\n        self.students_plants = {}\\r\\n        for name in self.students_cups.keys():\\r\\n            self.students_plants[name] =  [self.seeds[seed] for seed in\\r\\n                                          self.students_cups[name]]\\r\\n            \\r\\n    def plants(self,name):\\r\\n        return self.students_plants[name]\\r\\n    \\r"}
230	21	8e2c65b566769ececde31663	superseded	ruby	nucleotide-count	class DNA\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n    @result = {"A"=>0, "T"=>0, "C"=>0, "G"=>0}\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\n  end\n\n  def nucleotide_counts\n    @result\n  end\n\n  def count(nucleotide)\n    if nucleotide == "U"\n      0\n    elsif ["A", "T", "C", "G"].include?(nucleotide)\n      @result[nucleotide]\n    else\n      raise(ArgumentError)\n    end\n  end\nend	\N	\N	0	1	149	nucleotide-count.rb	2015-05-06 09:48:29	2015-05-06 09:48:29	{"nucleotide-count.rb":"class DNA\\n\\n  def initialize(dna_string)\\n    @dna_string = dna_string\\n    @result = {\\"A\\"=\\u003e0, \\"T\\"=\\u003e0, \\"C\\"=\\u003e0, \\"G\\"=\\u003e0}\\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\\n  end\\n\\n  def nucleotide_counts\\n    @result\\n  end\\n\\n  def count(nucleotide)\\n    if nucleotide == \\"U\\"\\n      0\\n    elsif [\\"A\\", \\"T\\", \\"C\\", \\"G\\"].include?(nucleotide)\\n      @result[nucleotide]\\n    else\\n      raise(ArgumentError)\\n    end\\n  end\\nend"}
189	17	735606cd727b5ef6cb7943bf	superseded	javascript	bob	var Bob = function() {\n};\n\nBob.prototype.RESPONSES = {\n    'Whoa, chill out!': function(str) {\n            var uppercase_unicode = "\\\\u0041-\\\\u005A\\\\u00C0-\\\\u00DE\\\\u0100-\\\\u0556\\\\u10A0-\\\\u10CD\\\\u1E00-\\\\u1EFE\\\\u1F08-\\\\u1FFB";\n            var lowercase_unicode = "[\\\\u0061-\\\\u007A\\\\u00DF-\\u02AF\\\\u0371-\\\\u03FC\\\\u0430-\\\\u052F\\\\u0561-\\\\u0587\\\\u1D00-\\\\u1EFF-\\\\u1F00-\\\\u1FF7]";\n            var str_no_uppercase = str.replace(new RegExp('['+uppercase_unicode+']', 'g'), '');\n            var str_uppercase = str.replace(new RegExp('[^'+uppercase_unicode+']', 'g'), '');\n            return !(new RegExp(lowercase_unicode, 'g')).test(str_no_uppercase) && str_uppercase.length > 0;\n    },\n    'Sure.': function(str) { return str.slice(-1) === '?'; },\n    'Fine. Be that way!': function(str) { return !str.trim(); },\n    'Whatever.': function(str) { return true; },\n};\n\nBob.prototype.hey = function(str) {\n    for(var message in this.RESPONSES) {\n        var func = this.RESPONSES[message];\n        if (this.RESPONSES.hasOwnProperty(message)) {\n            if(func != undefined && func(str)) {\n                return message;\n            }\n        }\n    }\n};\n\nmodule.exports = Bob;	\N	\N	0	1	121	bob.js	2015-06-10 19:48:37	2015-06-10 19:48:37	{"bob.js":"var Bob = function() {\\n};\\n\\nBob.prototype.RESPONSES = {\\n    'Whoa, chill out!': function(str) {\\n            var uppercase_unicode = \\"\\\\\\\\u0041-\\\\\\\\u005A\\\\\\\\u00C0-\\\\\\\\u00DE\\\\\\\\u0100-\\\\\\\\u0556\\\\\\\\u10A0-\\\\\\\\u10CD\\\\\\\\u1E00-\\\\\\\\u1EFE\\\\\\\\u1F08-\\\\\\\\u1FFB\\";\\n            var lowercase_unicode = \\"[\\\\\\\\u0061-\\\\\\\\u007A\\\\\\\\u00DF-\\\\u02AF\\\\\\\\u0371-\\\\\\\\u03FC\\\\\\\\u0430-\\\\\\\\u052F\\\\\\\\u0561-\\\\\\\\u0587\\\\\\\\u1D00-\\\\\\\\u1EFF-\\\\\\\\u1F00-\\\\\\\\u1FF7]\\";\\n            var str_no_uppercase = str.replace(new RegExp('['+uppercase_unicode+']', 'g'), '');\\n            var str_uppercase = str.replace(new RegExp('[^'+uppercase_unicode+']', 'g'), '');\\n            return !(new RegExp(lowercase_unicode, 'g')).test(str_no_uppercase) \\u0026\\u0026 str_uppercase.length \\u003e 0;\\n    },\\n    'Sure.': function(str) { return str.slice(-1) === '?'; },\\n    'Fine. Be that way!': function(str) { return !str.trim(); },\\n    'Whatever.': function(str) { return true; },\\n};\\n\\nBob.prototype.hey = function(str) {\\n    for(var message in this.RESPONSES) {\\n        var func = this.RESPONSES[message];\\n        if (this.RESPONSES.hasOwnProperty(message)) {\\n            if(func != undefined \\u0026\\u0026 func(str)) {\\n                return message;\\n            }\\n        }\\n    }\\n};\\n\\nmodule.exports = Bob;"}
190	17	ee5f44840dbda1bcc235774a	pending	javascript	bob	var Bob = function() {\n};\n\nBob.prototype.RESPONSES = {\n    'Whoa, chill out!': function(str) {\n            var uppercase_unicode = new RegExp("[\\\\u0041-\\\\u005A\\\\u00C0-\\\\u00DE\\\\u0100-\\\\u0556\\\\u10A0-\\\\u10CD\\\\u1E00-\\\\u1EFE\\\\u1F08-\\\\u1FFB]", "g");\n            return str === str.toUpperCase() && uppercase_unicode.test(str);\n    },\n    'Sure.': function(str) { return str.slice(-1) === '?'; },\n    'Fine. Be that way!': function(str) { return !str.trim(); },\n    'Whatever.': function(str) { return true; },\n};\n\nBob.prototype.hey = function(str) {\n    for(var message in this.RESPONSES) {\n        var func = this.RESPONSES[message];\n        if (this.RESPONSES.hasOwnProperty(message)) {\n            if(func != undefined && func(str)) {\n                return message;\n            }\n        }\n    }\n};\n\nmodule.exports = Bob;	\N	\N	0	2	121	bob.js	2015-08-04 01:02:19	2015-08-04 01:02:19	{"bob.js":"var Bob = function() {\\n};\\n\\nBob.prototype.RESPONSES = {\\n    'Whoa, chill out!': function(str) {\\n            var uppercase_unicode = new RegExp(\\"[\\\\\\\\u0041-\\\\\\\\u005A\\\\\\\\u00C0-\\\\\\\\u00DE\\\\\\\\u0100-\\\\\\\\u0556\\\\\\\\u10A0-\\\\\\\\u10CD\\\\\\\\u1E00-\\\\\\\\u1EFE\\\\\\\\u1F08-\\\\\\\\u1FFB]\\", \\"g\\");\\n            return str === str.toUpperCase() \\u0026\\u0026 uppercase_unicode.test(str);\\n    },\\n    'Sure.': function(str) { return str.slice(-1) === '?'; },\\n    'Fine. Be that way!': function(str) { return !str.trim(); },\\n    'Whatever.': function(str) { return true; },\\n};\\n\\nBob.prototype.hey = function(str) {\\n    for(var message in this.RESPONSES) {\\n        var func = this.RESPONSES[message];\\n        if (this.RESPONSES.hasOwnProperty(message)) {\\n            if(func != undefined \\u0026\\u0026 func(str)) {\\n                return message;\\n            }\\n        }\\n    }\\n};\\n\\nmodule.exports = Bob;"}
191	17	852f15ab82e0928c58836d17	pending	javascript	hamming	module.exports = {\n    compute: function(a, b) {\n        var iterator = 0, diff = 0, length = a.length < b.length ? a.length : b.length;        \n        do {\n            if(a[iterator] !== b[iterator]) {\n                diff++;\n            }\n            iterator++;\n        } while (iterator < length)\n        return diff;\n    }\n}	\N	\N	0	1	122	hamming.js	2015-08-22 16:06:48	2015-08-22 16:06:48	{"hamming.js":"module.exports = {\\n    compute: function(a, b) {\\n        var iterator = 0, diff = 0, length = a.length \\u003c b.length ? a.length : b.length;        \\n        do {\\n            if(a[iterator] !== b[iterator]) {\\n                diff++;\\n            }\\n            iterator++;\\n        } while (iterator \\u003c length)\\n        return diff;\\n    }\\n}"}
192	17	4559c61fd781d186e684eeab	done	python	point-mutations	class DNA:\n\tdef __init__(self, strand):\n\t\tself.strand = strand \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.strand:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.strand[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	2	123	point-mutations.py	2015-07-19 17:48:36	2015-07-19 17:48:36	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, strand):\\n\\t\\tself.strand = strand \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.strand:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.strand[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
193	17	95f48804ae535042f5b8bde0	superseded	python	point-mutations	class DNA:\n\tdef __init__(self, dna):\n\t\tself.dna = dna \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.dna:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.dna[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	1	123	point-mutations.py	2015-08-11 09:13:37	2015-08-11 09:13:37	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, dna):\\n\\t\\tself.dna = dna \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.dna:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.dna[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
194	17	5c6359eb333864166735c272	pending	python	gigasecond	import datetime\n\ndef add_gigasecond(birth_date):\n    return birth_date + datetime.timedelta(seconds = 10**9)	\N	\N	0	2	124	gigasecond.py	2015-06-05 03:34:50	2015-06-05 03:34:50	{"gigasecond.py":"import datetime\\n\\ndef add_gigasecond(birth_date):\\n    return birth_date + datetime.timedelta(seconds = 10**9)"}
195	17	ecdd822fe9619bcc59d63ddc	superseded	python	gigasecond	import datetime\n\ndef add_gigasecond(birth_date):\n    days = 10**9/((60*60)*24)\n    gsecs = birth_date + datetime.timedelta(days)\n    return gsecs	\N	\N	0	1	124	gigasecond.py	2015-07-01 04:39:19	2015-07-01 04:39:19	{"gigasecond.py":"import datetime\\n\\ndef add_gigasecond(birth_date):\\n    days = 10**9/((60*60)*24)\\n    gsecs = birth_date + datetime.timedelta(days)\\n    return gsecs"}
231	21	1410099c7cd8e4388c18d32e	superseded	python	hamming	def distance(a, b):\n    if len(a) != len(b):\n        return\n\n    count = 0\n    for x in zip(a, b):\n        if x[0] != x[1]:\n            count += 1\n    return count	\N	\N	0	1	150	hamming.py	2015-02-22 07:02:42	2015-02-22 07:02:42	{"hamming.py":"def distance(a, b):\\n    if len(a) != len(b):\\n        return\\n\\n    count = 0\\n    for x in zip(a, b):\\n        if x[0] != x[1]:\\n            count += 1\\n    return count"}
196	17	a571ed349ab2de98050edb4d	done	haskell	robot-name	module Robot (Robot, robotName, mkRobot, resetName) where\n\n\nimport Control.Concurrent (MVar, readMVar, swapMVar, newMVar)\nimport Control.Monad (void)\nimport System.Random (randomRIO)\n\ndata Robot = Robot {\n  getName :: MVar String\n}\n\nmkRobot :: IO Robot\nmkRobot = generateName >>= newMVar >>= return . Robot\n\nrobotName :: Robot -> IO String\nrobotName r = readMVar $ getName r\n\nresetName :: Robot -> IO()\nresetName r = void(generateName >>= swapMVar (getName r))\n\ngenerateName :: IO String\ngenerateName = mapM randomRIO name\n  where name = [char, char, int, int, int]\n        char = ('A', 'Z')\n        int  = ('0', '9')	\N	\N	0	1	125	Robot.hs	2015-06-12 19:33:09	2015-06-12 19:33:09	{"Robot.hs":"module Robot (Robot, robotName, mkRobot, resetName) where\\n\\n\\nimport Control.Concurrent (MVar, readMVar, swapMVar, newMVar)\\nimport Control.Monad (void)\\nimport System.Random (randomRIO)\\n\\ndata Robot = Robot {\\n  getName :: MVar String\\n}\\n\\nmkRobot :: IO Robot\\nmkRobot = generateName \\u003e\\u003e= newMVar \\u003e\\u003e= return . Robot\\n\\nrobotName :: Robot -\\u003e IO String\\nrobotName r = readMVar $ getName r\\n\\nresetName :: Robot -\\u003e IO()\\nresetName r = void(generateName \\u003e\\u003e= swapMVar (getName r))\\n\\ngenerateName :: IO String\\ngenerateName = mapM randomRIO name\\n  where name = [char, char, int, int, int]\\n        char = ('A', 'Z')\\n        int  = ('0', '9')"}
197	17	fff3bbe6c7bf2a14cadefd85	done	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char       (isAlphaNum,toLower)\nimport Data.List       (foldl')\nimport Data.List.Split (wordsBy)\nimport Data.Map.Strict (Map,empty,insertWith)\n\nwordCount :: String -> Map String Integer\nwordCount\n  = foldl' tally empty\n  . wordsBy (not . isAlphaNum)\n  . fmap toLower\n  where\n    tally m x = insertWith (+) x 1 m	\N	\N	0	2	126	WordCount.hs	2015-07-06 16:33:09	2015-07-06 16:33:09	{"WordCount.hs":"module WordCount (wordCount) where\\n\\nimport Data.Char       (isAlphaNum,toLower)\\nimport Data.List       (foldl')\\nimport Data.List.Split (wordsBy)\\nimport Data.Map.Strict (Map,empty,insertWith)\\n\\nwordCount :: String -\\u003e Map String Integer\\nwordCount\\n  = foldl' tally empty\\n  . wordsBy (not . isAlphaNum)\\n  . fmap toLower\\n  where\\n    tally m x = insertWith (+) x 1 m"}
198	17	9cb3f972ada93ce816ae5769	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char\nimport Data.List       (foldl')\nimport Data.Map hiding (filter,foldl',null)\n\nwordCount :: String -> Map String Integer\nwordCount\n  = foldl' tally empty\n  . filter (not . null)\n  . words'\n  . fmap toLower\n  where\n    tally m x = insertWith (+) x 1 m\n    words' [] = []\n    words' xs = y : words' ys\n      where\n        (y,ys) = span isAlphaNum\n               $ dropWhile (not . isAlphaNum) xs	\N	\N	0	1	126	WordCount.hs	2015-07-08 19:24:17	2015-07-08 19:24:17	{"WordCount.hs":"module WordCount (wordCount) where\\n\\nimport Data.Char\\nimport Data.List       (foldl')\\nimport Data.Map hiding (filter,foldl',null)\\n\\nwordCount :: String -\\u003e Map String Integer\\nwordCount\\n  = foldl' tally empty\\n  . filter (not . null)\\n  . words'\\n  . fmap toLower\\n  where\\n    tally m x = insertWith (+) x 1 m\\n    words' [] = []\\n    words' xs = y : words' ys\\n      where\\n        (y,ys) = span isAlphaNum\\n               $ dropWhile (not . isAlphaNum) xs"}
199	17	75b9cf7e14dcdfe3f674e071	pending	lua	hamming	local Hamming = {}\n\nfunction Hamming.compute(str1, str2)\n  local distance = 0\n\n  for i = 1, math.min(#str1, #str2) do\n    if str1:sub(i,i) ~= str2:sub(i,i) then\n      distance = distance + 1\n    end\n  end\n\n  return distance\nend\n\nreturn Hamming	\N	\N	0	1	127	hamming.lua	2015-06-18 12:31:46	2015-06-18 12:31:46	{"hamming.lua":"local Hamming = {}\\n\\nfunction Hamming.compute(str1, str2)\\n  local distance = 0\\n\\n  for i = 1, math.min(#str1, #str2) do\\n    if str1:sub(i,i) ~= str2:sub(i,i) then\\n      distance = distance + 1\\n    end\\n  end\\n\\n  return distance\\nend\\n\\nreturn Hamming"}
200	17	a95ccfe9f4e7904562708afe	pending	javascript	gigasecond	(function() {\n  var Gigasecond = function(startDate) {\n    var startDate_ms = Date.parse(startDate),\n        endDate_ms = new Date(startDate_ms + 1000000000000),\n        year = endDate_ms.getFullYear(),\n        month = endDate_ms.getMonth(),\n        day = endDate_ms.getDate();\n\n    this.date = function() {\n      return new Date (year, month, day);\n    };\n  };\n\n  module.exports = Gigasecond;\n})();	\N	\N	0	1	128	gigasecond.js	2015-08-06 06:32:34	2015-08-06 06:32:34	{"gigasecond.js":"(function() {\\n  var Gigasecond = function(startDate) {\\n    var startDate_ms = Date.parse(startDate),\\n        endDate_ms = new Date(startDate_ms + 1000000000000),\\n        year = endDate_ms.getFullYear(),\\n        month = endDate_ms.getMonth(),\\n        day = endDate_ms.getDate();\\n\\n    this.date = function() {\\n      return new Date (year, month, day);\\n    };\\n  };\\n\\n  module.exports = Gigasecond;\\n})();"}
201	17	657da807f0032504999166a1	pending	python	meetup	import calendar\nimport datetime\n\ndesc_commands = {\n\t'1st':0,\n\t'2nd':1,\n\t'3rd':2,\n\t'4th':3,\n\t'last':-1\n}\n\ndef meetup_day(year, month, dayofweek, desc):\n\tteenth = [13,14,15,16,17,18,19]\n\tweekdays = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\n\tdaysofmonth = calendar.monthcalendar(year,month)\n\tdates = []\n\tfor week in daysofmonth:\n\t\tfor day in week:\n\t\t\tif day != 0:\n\t\t\t\tdates.append(day)\n\tcollect = []\n\tfor day in dates:\n\t\tdate = datetime.date(year, month, day)\n\t\tif dayofweek == weekdays[date.isoweekday()-1]:\n\t\t\tcollect.append(date)\n\tif desc in desc_commands:\n\t\tindex = desc_commands[desc]\n\t\treturn collect[index]\n\tif desc == 'teenth':\n\t\tfor day in collect:\n\t\t\tif day.day in teenth:\n\t\t\t\treturn day	\N	\N	0	1	129	meetup.py	2015-06-08 12:42:51	2015-06-08 12:42:51	{"meetup.py":"import calendar\\nimport datetime\\n\\ndesc_commands = {\\n\\t'1st':0,\\n\\t'2nd':1,\\n\\t'3rd':2,\\n\\t'4th':3,\\n\\t'last':-1\\n}\\n\\ndef meetup_day(year, month, dayofweek, desc):\\n\\tteenth = [13,14,15,16,17,18,19]\\n\\tweekdays = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\\n\\tdaysofmonth = calendar.monthcalendar(year,month)\\n\\tdates = []\\n\\tfor week in daysofmonth:\\n\\t\\tfor day in week:\\n\\t\\t\\tif day != 0:\\n\\t\\t\\t\\tdates.append(day)\\n\\tcollect = []\\n\\tfor day in dates:\\n\\t\\tdate = datetime.date(year, month, day)\\n\\t\\tif dayofweek == weekdays[date.isoweekday()-1]:\\n\\t\\t\\tcollect.append(date)\\n\\tif desc in desc_commands:\\n\\t\\tindex = desc_commands[desc]\\n\\t\\treturn collect[index]\\n\\tif desc == 'teenth':\\n\\t\\tfor day in collect:\\n\\t\\t\\tif day.day in teenth:\\n\\t\\t\\t\\treturn day"}
202	17	4b1f03a59a45b626334256ba	pending	ruby	nth-prime	require 'prime'\n\nclass Prime\n  def self.nth(number)\n    fail ArgumentError, 'Invalid Input', caller if number <= 0\n    EratosthenesSieve.instance.get_nth_prime(number - 1)\n  end\nend	\N	\N	0	1	130	/ruby/nth-prime/prime.rb	2015-07-23 21:26:17	2015-07-23 21:26:17	{"/ruby/nth-prime/prime.rb":"require 'prime'\\n\\nclass Prime\\n  def self.nth(number)\\n    fail ArgumentError, 'Invalid Input', caller if number \\u003c= 0\\n    EratosthenesSieve.instance.get_nth_prime(number - 1)\\n  end\\nend"}
232	21	e2b3688dd18a5a0c7d1bff2c	pending	python	hamming	def distance(a, b):\n    if len(a) != len(b):\n        raise Exception('Argument lengths differ.')\n\n    count = 0\n    for x in zip(a, b):\n        if x[0] != x[1]:\n            count += 1\n    return count	\N	\N	0	2	150	hamming.py	2015-07-19 11:10:44	2015-07-19 11:10:44	{"hamming.py":"def distance(a, b):\\n    if len(a) != len(b):\\n        raise Exception('Argument lengths differ.')\\n\\n    count = 0\\n    for x in zip(a, b):\\n        if x[0] != x[1]:\\n            count += 1\\n    return count"}
203	17	dc4257105824167067ca4679	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	131	/python/wordy/wordy.py	2015-07-07 10:00:30	2015-07-07 10:00:30	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
204	17	37db03a60981627065f6bf44	superseded	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule OctalSeq( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readOct' 0\n  where \n    readOct' acc "" = acc `seq` acc\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\n      where\n        toOctVal '0' = 0\n        toOctVal '1' = 1\n        toOctVal '2' = 2\n        toOctVal '3' = 3\n        toOctVal '4' = 4\n        toOctVal '5' = 5\n        toOctVal '6' = 6\n        toOctVal '7' = 7\n        toOctVal  _  = error "invalid digit"\n\nshowOct :: Integral a => a -> String\nshowOct n | n < 0 = ""\n          | n == 0 = "0"\n          | otherwise = octDigitsP "" n\n  where\n    octDigitsP ds 0 = ds `seq` ds\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` 8\n        dc = toOctChar $! d\n        toOctChar 0 = '0'\n        toOctChar 1 = '1'\n        toOctChar 2 = '2'\n        toOctChar 3 = '3'\n        toOctChar 4 = '4'\n        toOctChar 5 = '5'\n        toOctChar 6 = '6'\n        toOctChar 7 = '7'\n        toOctChar _ = error "invalid digit"	\N	\N	0	1	132	OctalSeq.hs	2015-06-11 23:06:41	2015-06-11 23:06:41	{"OctalSeq.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule OctalSeq( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readOct' 0\\n  where \\n    readOct' acc \\"\\" = acc `seq` acc\\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\\n      where\\n        toOctVal '0' = 0\\n        toOctVal '1' = 1\\n        toOctVal '2' = 2\\n        toOctVal '3' = 3\\n        toOctVal '4' = 4\\n        toOctVal '5' = 5\\n        toOctVal '6' = 6\\n        toOctVal '7' = 7\\n        toOctVal  _  = error \\"invalid digit\\"\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct n | n \\u003c 0 = \\"\\"\\n          | n == 0 = \\"0\\"\\n          | otherwise = octDigitsP \\"\\" n\\n  where\\n    octDigitsP ds 0 = ds `seq` ds\\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` 8\\n        dc = toOctChar $! d\\n        toOctChar 0 = '0'\\n        toOctChar 1 = '1'\\n        toOctChar 2 = '2'\\n        toOctChar 3 = '3'\\n        toOctChar 4 = '4'\\n        toOctChar 5 = '5'\\n        toOctChar 6 = '6'\\n        toOctChar 7 = '7'\\n        toOctChar _ = error \\"invalid digit\\""}
205	17	d2243a4ec8507ea5e1c936ce	done	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule Octal( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readBase 8\n\nshowOct :: Integral a => a -> String\nshowOct = showBase 8\n\nreadBase :: Integral a => a -> String -> a\nreadBase b s = readBase' 0 s\n  where \n    readBase' acc "" = acc\n    readBase' acc (d : ds) \n        | acc `seq` False = undefined \n        | not (valid b d) = 0\n        | otherwise = readBase' (b*acc + fromChar d) ds\n\nvalid :: Integral b => b -> Char -> Bool\nvalid b c | b <= 10   = c >= '0' && c < bd\n          | otherwise = (c >= '0' && c <= '9') || \n                        (c >= 'A' && c < bdu) ||\n                        (c >= 'a' && c < bd)\n  where \n    bd = fromDigit b\n    bdu = fromDigitC b\n\nfromChar :: Integral a => Char -> a\nfromChar c | c <= '9' = fromBase '0' c\n           | c <= 'Z' = fromBase 'A' c\n           | otherwise = fromBase 'a' c\n  where \n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \n\nshowBase :: Integral a => a -> a -> String\nshowBase b n | b < 1 || n < 0 = ""\n             | n == 0 = "0"\n             | otherwise = digitsP "" n\n  where\n    digitsP ds k | dc `seq` ds `seq` False = undefined\n                 | k == 0 = ds\n                 | otherwise = digitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` b\n        dc = fromDigit $! d\n\ntoBase :: Integral a => Char -> a -> Char\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\n\nfromDigit :: Integral a => a -> Char\nfromDigit d | d <= 9 = toBase '0' d\n            | otherwise = toBase 'a' d\n\nfromDigitC :: Integral a => a -> Char\nfromDigitC d | d <= 9 = toBase '0' d\n             | otherwise = toBase 'A' d	\N	\N	0	2	132	Octal.hs	2015-08-06 01:03:26	2015-08-06 01:03:26	{"Octal.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule Octal( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readBase 8\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct = showBase 8\\n\\nreadBase :: Integral a =\\u003e a -\\u003e String -\\u003e a\\nreadBase b s = readBase' 0 s\\n  where \\n    readBase' acc \\"\\" = acc\\n    readBase' acc (d : ds) \\n        | acc `seq` False = undefined \\n        | not (valid b d) = 0\\n        | otherwise = readBase' (b*acc + fromChar d) ds\\n\\nvalid :: Integral b =\\u003e b -\\u003e Char -\\u003e Bool\\nvalid b c | b \\u003c= 10   = c \\u003e= '0' \\u0026\\u0026 c \\u003c bd\\n          | otherwise = (c \\u003e= '0' \\u0026\\u0026 c \\u003c= '9') || \\n                        (c \\u003e= 'A' \\u0026\\u0026 c \\u003c bdu) ||\\n                        (c \\u003e= 'a' \\u0026\\u0026 c \\u003c bd)\\n  where \\n    bd = fromDigit b\\n    bdu = fromDigitC b\\n\\nfromChar :: Integral a =\\u003e Char -\\u003e a\\nfromChar c | c \\u003c= '9' = fromBase '0' c\\n           | c \\u003c= 'Z' = fromBase 'A' c\\n           | otherwise = fromBase 'a' c\\n  where \\n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \\n\\nshowBase :: Integral a =\\u003e a -\\u003e a -\\u003e String\\nshowBase b n | b \\u003c 1 || n \\u003c 0 = \\"\\"\\n             | n == 0 = \\"0\\"\\n             | otherwise = digitsP \\"\\" n\\n  where\\n    digitsP ds k | dc `seq` ds `seq` False = undefined\\n                 | k == 0 = ds\\n                 | otherwise = digitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` b\\n        dc = fromDigit $! d\\n\\ntoBase :: Integral a =\\u003e Char -\\u003e a -\\u003e Char\\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\\n\\nfromDigit :: Integral a =\\u003e a -\\u003e Char\\nfromDigit d | d \\u003c= 9 = toBase '0' d\\n            | otherwise = toBase 'a' d\\n\\nfromDigitC :: Integral a =\\u003e a -\\u003e Char\\nfromDigitC d | d \\u003c= 9 = toBase '0' d\\n             | otherwise = toBase 'A' d"}
206	17	de42a7fe9c27addfe6c0bf32	pending	python	bob	#\n# Skeleton file for the Python "Bob" exercise.\n#\ndef hey(what):\n\t#I checked for upercase first since it had the most cases.\n\tif what.isupper():\n\t\tsay = "Whoa, chill out!"\n\t#I originally check for a ? anywhere in the string, but I guess that doesn't count, seems ambiguous.\n\telif what.endswith("?"):\n\t\tsay = "Sure."\n\t#I checked this last since it has the most complexity. ispace checks for whitespace characters, while "" takes in strings that are empty, but declared.\n\telif what.isspace() or what == "":\n\t\tsay = "Fine. Be that way!"\n\t#Catchall\n\telse:\n\t\tsay = "Whatever."\n\treturn say	\N	\N	0	1	133	bob.py	2015-06-29 13:22:59	2015-06-29 13:22:59	{"bob.py":"#\\n# Skeleton file for the Python \\"Bob\\" exercise.\\n#\\ndef hey(what):\\n\\t#I checked for upercase first since it had the most cases.\\n\\tif what.isupper():\\n\\t\\tsay = \\"Whoa, chill out!\\"\\n\\t#I originally check for a ? anywhere in the string, but I guess that doesn't count, seems ambiguous.\\n\\telif what.endswith(\\"?\\"):\\n\\t\\tsay = \\"Sure.\\"\\n\\t#I checked this last since it has the most complexity. ispace checks for whitespace characters, while \\"\\" takes in strings that are empty, but declared.\\n\\telif what.isspace() or what == \\"\\":\\n\\t\\tsay = \\"Fine. Be that way!\\"\\n\\t#Catchall\\n\\telse:\\n\\t\\tsay = \\"Whatever.\\"\\n\\treturn say"}
207	17	bcf128ce74d1cfb87d1a6dfa	superseded	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nsub new{\n\tmy ($class, $key) = @_;\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	1	134	Cipher.pm	2015-08-07 05:44:57	2015-08-07 05:44:57	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
233	21	644e16ddf58aa24ce7d49fb4	done	scala	hamming	object Hamming {\r\n   def compute(left:String, right:String):Int = {\r\n     left zip right map {\r\n       case (l, r) => l == r\r\n     } count(_ == true)\r\n   }\r\n }\r	\N	\N	0	2	151	hamming.scala	2015-08-03 10:13:41	2015-08-03 10:13:41	{"hamming.scala":"object Hamming {\\r\\n   def compute(left:String, right:String):Int = {\\r\\n     left zip right map {\\r\\n       case (l, r) =\\u003e l == r\\r\\n     } count(_ == true)\\r\\n   }\\r\\n }\\r"}
208	17	b875f44311ace06dd793d217	done	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nmy @words = 'a'..'z';\n\nsub new{\n\tmy ($class, $key) = @_;\n\tdie "ArgumentError: $key" if defined $key and ($key =~ /[^a-z]/ or not length $key);\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	2	134	Cipher.pm	2015-08-09 07:15:06	2015-08-09 07:15:06	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nmy @words = 'a'..'z';\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\tdie \\"ArgumentError: $key\\" if defined $key and ($key =~ /[^a-z]/ or not length $key);\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
209	17	c58c1ee7993e4c298e7be176	done	ruby	roman-numerals	class Fixnum\n\n  def to_roman\n    i = self\n    s = ''\n    roman_mappings.each do |arabic, roman|\n      while i >= arabic\n        s << roman\n        i -= arabic\n      end\n    end\n    s\n  end\n\n  def roman_mappings\n    {\n      1000 => 'M',\n      900 => 'CM',\n      500 => 'D',\n      400 => 'CD',\n      100 => 'C',\n      90 => 'XC',\n      50 => 'L',\n      40 => 'XL',\n      10 => 'X',\n      9 => 'IX',\n      5 => 'V',\n      4 => 'IV',\n      1 => 'I',\n    }\n\n  end\n\nend	\N	\N	0	1	135	roman.rb	2015-06-14 23:50:49	2015-06-14 23:50:49	{"roman.rb":"class Fixnum\\n\\n  def to_roman\\n    i = self\\n    s = ''\\n    roman_mappings.each do |arabic, roman|\\n      while i \\u003e= arabic\\n        s \\u003c\\u003c roman\\n        i -= arabic\\n      end\\n    end\\n    s\\n  end\\n\\n  def roman_mappings\\n    {\\n      1000 =\\u003e 'M',\\n      900 =\\u003e 'CM',\\n      500 =\\u003e 'D',\\n      400 =\\u003e 'CD',\\n      100 =\\u003e 'C',\\n      90 =\\u003e 'XC',\\n      50 =\\u003e 'L',\\n      40 =\\u003e 'XL',\\n      10 =\\u003e 'X',\\n      9 =\\u003e 'IX',\\n      5 =\\u003e 'V',\\n      4 =\\u003e 'IV',\\n      1 =\\u003e 'I',\\n    }\\n\\n  end\\n\\nend"}
210	17	cbe961dc1be384ca773b443d	pending	ruby	twelve-days	class TwelveDaysSong\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\n\n  VERSES = [\n    ["twelve Drummers Drumming, ", 12],\n    ["eleven Pipers Piping, ", 11],\n    ["ten Lords-a-Leaping, ", 10],\n    ["nine Ladies Dancing, ", 9],    \n    ["eight Maids-a-Milking, ", 8],      \n    ["seven Swans-a-Swimming, ", 7],\n    ["six Geese-a-Laying, ", 6],\n    ["five Gold Rings, ", 5],\n    ["four Calling Birds, ", 4], \n    ["three French Hens, ", 3],\n    ["two Turtle Doves, and ", 2],\n  ]\n\n  def verse(num)\n    s = "On the #{DAYS[num-1]} day of Christmas my true love gave to me, "\n    VERSES.each do |phrase, verse_num|\n      s << phrase if num >= verse_num\n    end\n    s << "a Partridge in a Pear Tree.\\n"\n    s\n  end\n\n  def verses(start, stop)\n    (start..stop).map { |num| verse(num) }.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses(1, 12)\n  end\nend	\N	\N	0	1	136	twelve_days.rb	2015-08-28 07:30:04	2015-08-28 07:30:04	{"twelve_days.rb":"class TwelveDaysSong\\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\\n\\n  VERSES = [\\n    [\\"twelve Drummers Drumming, \\", 12],\\n    [\\"eleven Pipers Piping, \\", 11],\\n    [\\"ten Lords-a-Leaping, \\", 10],\\n    [\\"nine Ladies Dancing, \\", 9],    \\n    [\\"eight Maids-a-Milking, \\", 8],      \\n    [\\"seven Swans-a-Swimming, \\", 7],\\n    [\\"six Geese-a-Laying, \\", 6],\\n    [\\"five Gold Rings, \\", 5],\\n    [\\"four Calling Birds, \\", 4], \\n    [\\"three French Hens, \\", 3],\\n    [\\"two Turtle Doves, and \\", 2],\\n  ]\\n\\n  def verse(num)\\n    s = \\"On the #{DAYS[num-1]} day of Christmas my true love gave to me, \\"\\n    VERSES.each do |phrase, verse_num|\\n      s \\u003c\\u003c phrase if num \\u003e= verse_num\\n    end\\n    s \\u003c\\u003c \\"a Partridge in a Pear Tree.\\\\n\\"\\n    s\\n  end\\n\\n  def verses(start, stop)\\n    (start..stop).map { |num| verse(num) }.join(\\"\\\\n\\") + \\"\\\\n\\"\\n  end\\n\\n  def sing\\n    verses(1, 12)\\n  end\\nend"}
211	17	f33151eaaddace3ee2b9e470	pending	ruby	nucleotide-count	class DNA\n  Nucleotides = {"A" => 0, "T" => 0, "C" => 0, "G" => 0}\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n    @result = Nucleotides.dup\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\n  end\n\n  def nucleotide_counts\n    @result\n  end\n\n  def count(nucleotide)\n    if nucleotide == "U"\n      0\n    elsif Nucleotides.keys.include?(nucleotide)\n      @result[nucleotide]\n    else\n      raise(ArgumentError, "Argument Error")\n    end\n  end\nend	\N	\N	0	2	137	nucleotide-count.rb	2015-06-25 08:45:36	2015-06-25 08:45:36	{"nucleotide-count.rb":"class DNA\\n  Nucleotides = {\\"A\\" =\\u003e 0, \\"T\\" =\\u003e 0, \\"C\\" =\\u003e 0, \\"G\\" =\\u003e 0}\\n\\n  def initialize(dna_string)\\n    @dna_string = dna_string\\n    @result = Nucleotides.dup\\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\\n  end\\n\\n  def nucleotide_counts\\n    @result\\n  end\\n\\n  def count(nucleotide)\\n    if nucleotide == \\"U\\"\\n      0\\n    elsif Nucleotides.keys.include?(nucleotide)\\n      @result[nucleotide]\\n    else\\n      raise(ArgumentError, \\"Argument Error\\")\\n    end\\n  end\\nend"}
212	17	1e78eedfe62c450ae26c4d17	superseded	ruby	nucleotide-count	class DNA\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n    @result = {"A"=>0, "T"=>0, "C"=>0, "G"=>0}\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\n  end\n\n  def nucleotide_counts\n    @result\n  end\n\n  def count(nucleotide)\n    if nucleotide == "U"\n      0\n    elsif ["A", "T", "C", "G"].include?(nucleotide)\n      @result[nucleotide]\n    else\n      raise(ArgumentError)\n    end\n  end\nend	\N	\N	0	1	137	nucleotide-count.rb	2015-08-03 13:37:20	2015-08-03 13:37:20	{"nucleotide-count.rb":"class DNA\\n\\n  def initialize(dna_string)\\n    @dna_string = dna_string\\n    @result = {\\"A\\"=\\u003e0, \\"T\\"=\\u003e0, \\"C\\"=\\u003e0, \\"G\\"=\\u003e0}\\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\\n  end\\n\\n  def nucleotide_counts\\n    @result\\n  end\\n\\n  def count(nucleotide)\\n    if nucleotide == \\"U\\"\\n      0\\n    elsif [\\"A\\", \\"T\\", \\"C\\", \\"G\\"].include?(nucleotide)\\n      @result[nucleotide]\\n    else\\n      raise(ArgumentError)\\n    end\\n  end\\nend"}
213	17	3d7540b97dfc674f93a523d7	superseded	ruby	saddle-points	class Matrix\r\n  def initialize(m)\r\n    @matrix = m.split("\\n").map { |x| x.scan(/\\d+/).map(&:to_i) }\r\n  end\r\n\r\n  def rows\r\n    @matrix\r\n  end\r\n\r\n  def columns\r\n    @matrix.transpose\r\n  end\r\n\r\n  def saddle_points\r\n    points = []\r\n    rows.each_with_index do |row, i|\r\n      row.each_with_index do |item, j|\r\n        if item == row.max and columns[j][i] == columns[j].min\r\n          points << [i, j]\r\n        end\r\n      end\r\n    end\r\n    points\r\n  end\r\nend\r	\N	\N	0	1	138	matrix.rb	2015-06-28 04:50:49	2015-06-28 04:50:49	{"matrix.rb":"class Matrix\\r\\n  def initialize(m)\\r\\n    @matrix = m.split(\\"\\\\n\\").map { |x| x.scan(/\\\\d+/).map(\\u0026:to_i) }\\r\\n  end\\r\\n\\r\\n  def rows\\r\\n    @matrix\\r\\n  end\\r\\n\\r\\n  def columns\\r\\n    @matrix.transpose\\r\\n  end\\r\\n\\r\\n  def saddle_points\\r\\n    points = []\\r\\n    rows.each_with_index do |row, i|\\r\\n      row.each_with_index do |item, j|\\r\\n        if item == row.max and columns[j][i] == columns[j].min\\r\\n          points \\u003c\\u003c [i, j]\\r\\n        end\\r\\n      end\\r\\n    end\\r\\n    points\\r\\n  end\\r\\nend\\r"}
214	17	240fcef15a67bf5352729394	pending	ruby	saddle-points	class Matrix\r\n  def initialize(m)\r\n    @matrix = m.split("\\n").map { |x| x.scan(/\\d+/).map(&:to_i) }\r\n  end\r\n\r\n  def rows\r\n    @matrix\r\n  end\r\n\r\n  def columns\r\n    @matrix.transpose\r\n  end\r\n\r\n  def saddle_points\r\n    points = []\r\n    rows.each_with_index do |row, i|\r\n      row.each_with_index do |item, j|\r\n        if item == row.max and item == columns[j].min\r\n          points << [i, j]\r\n        end\r\n      end\r\n    end\r\n    points\r\n  end\r\nend\r	\N	\N	0	2	138	matrix.rb	2015-07-12 17:36:16	2015-07-12 17:36:16	{"matrix.rb":"class Matrix\\r\\n  def initialize(m)\\r\\n    @matrix = m.split(\\"\\\\n\\").map { |x| x.scan(/\\\\d+/).map(\\u0026:to_i) }\\r\\n  end\\r\\n\\r\\n  def rows\\r\\n    @matrix\\r\\n  end\\r\\n\\r\\n  def columns\\r\\n    @matrix.transpose\\r\\n  end\\r\\n\\r\\n  def saddle_points\\r\\n    points = []\\r\\n    rows.each_with_index do |row, i|\\r\\n      row.each_with_index do |item, j|\\r\\n        if item == row.max and item == columns[j].min\\r\\n          points \\u003c\\u003c [i, j]\\r\\n        end\\r\\n      end\\r\\n    end\\r\\n    points\\r\\n  end\\r\\nend\\r"}
215	17	c317dc88dc9d3cd185b6bc73	pending	csharp	raindrops	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\n\r\n    class Raindrops\r\n    {\r\n\r\n        \r\n        public Raindrops() { }\r\n\r\n        public static string Convert(int rainValue)\r\n        {\r\n            var primeList = primeFactorsGetter(rainValue);\r\n            if(PlingPlangPlongString(primeList).Length > 0) return PlingPlangPlongString(primeList);\r\n            return rainValue.ToString();\r\n            \r\n        }\r\n\r\n        public static List<string> primeFactorsGetter(long value)\r\n        {\r\n            var resultsList = new List<string>();\r\n            for (int i = 2; i <= value; i++)\r\n            {\r\n                while (value % i == 0)\r\n                {\r\n                    resultsList.Add(i.ToString());\r\n                    value /= i;\r\n                }\r\n            }            \r\n            return resultsList;\r\n        }\r\n\r\n        public static string PlingPlangPlongString(List<string> listOfPrimeFactors)\r\n        {\r\n            var resultString = new StringBuilder();\r\n\r\n            if (listOfPrimeFactors.Contains("3")) resultString.Append("Pling");\r\n            if (listOfPrimeFactors.Contains("5")) resultString.Append("Plang");\r\n            if (listOfPrimeFactors.Contains("7")) resultString.Append("Plong");           \r\n\r\n            return resultString.ToString();\r\n        }\r\n    }	\N	\N	0	1	139	\\csharp\\raindrops\\Raindrops.cs	2015-06-03 23:17:12	2015-06-03 23:17:12	{"\\\\csharp\\\\raindrops\\\\Raindrops.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nusing System.Text;\\r\\n\\r\\n\\r\\n    class Raindrops\\r\\n    {\\r\\n\\r\\n        \\r\\n        public Raindrops() { }\\r\\n\\r\\n        public static string Convert(int rainValue)\\r\\n        {\\r\\n            var primeList = primeFactorsGetter(rainValue);\\r\\n            if(PlingPlangPlongString(primeList).Length \\u003e 0) return PlingPlangPlongString(primeList);\\r\\n            return rainValue.ToString();\\r\\n            \\r\\n        }\\r\\n\\r\\n        public static List\\u003cstring\\u003e primeFactorsGetter(long value)\\r\\n        {\\r\\n            var resultsList = new List\\u003cstring\\u003e();\\r\\n            for (int i = 2; i \\u003c= value; i++)\\r\\n            {\\r\\n                while (value % i == 0)\\r\\n                {\\r\\n                    resultsList.Add(i.ToString());\\r\\n                    value /= i;\\r\\n                }\\r\\n            }            \\r\\n            return resultsList;\\r\\n        }\\r\\n\\r\\n        public static string PlingPlangPlongString(List\\u003cstring\\u003e listOfPrimeFactors)\\r\\n        {\\r\\n            var resultString = new StringBuilder();\\r\\n\\r\\n            if (listOfPrimeFactors.Contains(\\"3\\")) resultString.Append(\\"Pling\\");\\r\\n            if (listOfPrimeFactors.Contains(\\"5\\")) resultString.Append(\\"Plang\\");\\r\\n            if (listOfPrimeFactors.Contains(\\"7\\")) resultString.Append(\\"Plong\\");           \\r\\n\\r\\n            return resultString.ToString();\\r\\n        }\\r\\n    }"}
216	17	b125319ccf959f45a777e2d7	superseded	ruby	hamming	class Hamming\n  def self.compute(reference_strand, other_strand)\n    dna = DNA.new(reference_strand)\n    dna.hamming_distance(other_strand)\n  end\nend\n\nclass DNA\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(other_strand)\n    common_length = [strand.size, other_strand.size].min\n    common_length.times.count { |index| strand[index] != other_strand[index] }\n  end\n\n  private\n\n  attr_reader :strand\nend	\N	\N	0	1	140	hamming.rb	2015-07-04 08:17:28	2015-07-04 08:17:28	{"hamming.rb":"class Hamming\\n  def self.compute(reference_strand, other_strand)\\n    dna = DNA.new(reference_strand)\\n    dna.hamming_distance(other_strand)\\n  end\\nend\\n\\nclass DNA\\n  def initialize(strand)\\n    @strand = strand\\n  end\\n\\n  def hamming_distance(other_strand)\\n    common_length = [strand.size, other_strand.size].min\\n    common_length.times.count { |index| strand[index] != other_strand[index] }\\n  end\\n\\n  private\\n\\n  attr_reader :strand\\nend"}
217	17	a9190760e572071776350c3f	superseded	ruby	hamming	class Hamming\n  def self.compute(reference_strand, other_strand)\n    common_length = [reference_strand.size, other_strand.size].min\n    common_length.times.count { |index| reference_strand[index] != other_strand[index] }\n  end\nend	\N	\N	0	2	140	hamming.rb	2015-08-02 23:50:38	2015-08-02 23:50:38	{"hamming.rb":"class Hamming\\n  def self.compute(reference_strand, other_strand)\\n    common_length = [reference_strand.size, other_strand.size].min\\n    common_length.times.count { |index| reference_strand[index] != other_strand[index] }\\n  end\\nend"}
218	17	d20c5ff82d560f9257a2b398	done	ruby	hamming	class Hamming\n  def self.compute(reference_strand, other_strand)\n    common_length([reference_strand, other_strand]).times.count { |index| reference_strand[index] != other_strand[index] }\n  end\n\n  def self.common_length(strands)\n    strands.map(&:length).min\n  end\nend	\N	\N	0	3	140	hamming.rb	2015-09-17 09:33:44	2015-09-17 09:33:44	{"hamming.rb":"class Hamming\\n  def self.compute(reference_strand, other_strand)\\n    common_length([reference_strand, other_strand]).times.count { |index| reference_strand[index] != other_strand[index] }\\n  end\\n\\n  def self.common_length(strands)\\n    strands.map(\\u0026:length).min\\n  end\\nend"}
219	17	af21e93e038469207398d3f5	done	ruby	prime-factors	class PrimeFactors\n  def self.for(n)\n    (2..Math.sqrt(n)).each_with_object([]) { |x, factors|\n      while n % x == 0\n        n /= x\n        factors << x\n      end\n    }.tap { |factors| factors << n unless n == 1 }\n  end\nend	\N	\N	0	1	141	prime_factors.rb	2015-06-27 07:04:44	2015-06-27 07:04:44	{"prime_factors.rb":"class PrimeFactors\\n  def self.for(n)\\n    (2..Math.sqrt(n)).each_with_object([]) { |x, factors|\\n      while n % x == 0\\n        n /= x\\n        factors \\u003c\\u003c x\\n      end\\n    }.tap { |factors| factors \\u003c\\u003c n unless n == 1 }\\n  end\\nend"}
220	17	8148984e958ea0b7cc7307bd	done	haskell	roman-numerals	module Roman (numerals) where\n\nnumerals :: Int -> String\nnumerals = go numeralMap\n  where\n    go pairs@((value, digits):pairs') n\n      | n >= value = digits ++ go pairs (n - value)\n      | otherwise  = go pairs' n\n    go [] _ = ""\n    numeralMap = [ (1000, "M"), (900, "CM")\n                 , (500, "D"), (400, "CD")\n                 , (100, "C"), (90, "XC")\n                 , (50, "L"), (40, "XL")\n                 , (10, "X"), (9, "IX")\n                 , (5, "V"), (4, "IV")\n                 , (1, "I") ]	\N	\N	0	1	142	roman-numerals.hs	2015-08-11 16:52:14	2015-08-11 16:52:14	{"roman-numerals.hs":"module Roman (numerals) where\\n\\nnumerals :: Int -\\u003e String\\nnumerals = go numeralMap\\n  where\\n    go pairs@((value, digits):pairs') n\\n      | n \\u003e= value = digits ++ go pairs (n - value)\\n      | otherwise  = go pairs' n\\n    go [] _ = \\"\\"\\n    numeralMap = [ (1000, \\"M\\"), (900, \\"CM\\")\\n                 , (500, \\"D\\"), (400, \\"CD\\")\\n                 , (100, \\"C\\"), (90, \\"XC\\")\\n                 , (50, \\"L\\"), (40, \\"XL\\")\\n                 , (10, \\"X\\"), (9, \\"IX\\")\\n                 , (5, \\"V\\"), (4, \\"IV\\")\\n                 , (1, \\"I\\") ]"}
221	17	86af2c29cf137a15a4bdaa1d	done	ruby	anagram	class Anagram\n  attr_reader :word\n\n  def initialize(word)\n    @word = word.downcase\n  end\n\n  def match(candidates)\n    candidates.find_all { |candidate| anagram?(candidate) }\n  end\n\n  def anagram?(candidate)\n    candidate = Anagram.new(candidate.to_s)\n    same_characters?(candidate) && different_word?(candidate)\n  end\n\n  def characters\n    @characters ||= word.chars.sort.join\n  end\n\n  private\n\n  def different_word?(other)\n    word != other.word\n  end\n\n  def same_characters?(other)\n    characters == other.characters\n  end\nend	\N	\N	0	1	143	anagram.rb	2015-07-11 11:41:13	2015-07-11 11:41:13	{"anagram.rb":"class Anagram\\n  attr_reader :word\\n\\n  def initialize(word)\\n    @word = word.downcase\\n  end\\n\\n  def match(candidates)\\n    candidates.find_all { |candidate| anagram?(candidate) }\\n  end\\n\\n  def anagram?(candidate)\\n    candidate = Anagram.new(candidate.to_s)\\n    same_characters?(candidate) \\u0026\\u0026 different_word?(candidate)\\n  end\\n\\n  def characters\\n    @characters ||= word.chars.sort.join\\n  end\\n\\n  private\\n\\n  def different_word?(other)\\n    word != other.word\\n  end\\n\\n  def same_characters?(other)\\n    characters == other.characters\\n  end\\nend"}
222	17	192cf404d6bd72174884e766	pending	python	series	class Series(object):\n\n    def __init__(self, input_string):\n        self.length = len(input_string)\n        try:\n            self.lst = [int(c) for c in input_string]\n        except:\n            raise ValueError("Please input a string that only contains numbers")\n\n    def slices(self, n):\n\n        if n > self.length or n <= 0:\n            raise ValueError("Invalid slice length for this series: %d" % n)\n\n        return [ self.lst[i:i+n] for i in range(self.length - n + 1) ]	\N	\N	0	2	144	series.py	2015-06-29 10:16:00	2015-06-29 10:16:00	{"series.py":"class Series(object):\\n\\n    def __init__(self, input_string):\\n        self.length = len(input_string)\\n        try:\\n            self.lst = [int(c) for c in input_string]\\n        except:\\n            raise ValueError(\\"Please input a string that only contains numbers\\")\\n\\n    def slices(self, n):\\n\\n        if n \\u003e self.length or n \\u003c= 0:\\n            raise ValueError(\\"Invalid slice length for this series: %d\\" % n)\\n\\n        return [ self.lst[i:i+n] for i in range(self.length - n + 1) ]"}
223	17	34075850947a5dd651f1fa2a	superseded	python	series	class Series(object):\n\n    def __init__(self, input_string):\n        self.num = input_string\n        self.length = len(self.num)\n        try:\n            self.lst = [int(c) for c in self.num]\n        except:\n            self.lst = []\n            \n    def slices(self, n):\n\n        if n > self.length or n <= 0:\n            raise ValueError("Invalid slice length for this series: %d" % n)\n\n        ret = []\n        for i in range(self.length - n + 1):\n            each_slice = self.lst[i:i+n]\n            ret.append(each_slice)\n\n        return ret	\N	\N	0	1	144	series.py	2015-08-04 22:23:15	2015-08-04 22:23:15	{"series.py":"class Series(object):\\n\\n    def __init__(self, input_string):\\n        self.num = input_string\\n        self.length = len(self.num)\\n        try:\\n            self.lst = [int(c) for c in self.num]\\n        except:\\n            self.lst = []\\n            \\n    def slices(self, n):\\n\\n        if n \\u003e self.length or n \\u003c= 0:\\n            raise ValueError(\\"Invalid slice length for this series: %d\\" % n)\\n\\n        ret = []\\n        for i in range(self.length - n + 1):\\n            each_slice = self.lst[i:i+n]\\n            ret.append(each_slice)\\n\\n        return ret"}
224	17	777fbe36fbfd13ee94b4a39c	done	ruby	grains	class Grains\n  def square(count)\n    count.times.inject(0) {|_| _ = _.eql?(0) ? 1 : _ * 2 }\n  end\n\n  def total\n    square(65) - 1\n  end\nend	\N	\N	0	1	145	/ruby/grains/grains.rb	2015-07-05 08:49:44	2015-07-05 08:49:44	{"/ruby/grains/grains.rb":"class Grains\\n  def square(count)\\n    count.times.inject(0) {|_| _ = _.eql?(0) ? 1 : _ * 2 }\\n  end\\n\\n  def total\\n    square(65) - 1\\n  end\\nend"}
225	17	c27e53eca85347cf2842d6b8	done	scala	word-count	class Phrase(phrase: String) {\n  val _matcher = """[\\w']+""".r\n  val normalized = phrase.toLowerCase\n  val words = _matcher.findAllIn(normalized).toList\n\n  def wordCount = words.groupBy(e => e).map(kv => kv._1 -> kv._2.length)\n}	\N	\N	0	1	146	word_count.scala	2015-08-11 15:37:09	2015-08-11 15:37:09	{"word_count.scala":"class Phrase(phrase: String) {\\n  val _matcher = \\"\\"\\"[\\\\w']+\\"\\"\\".r\\n  val normalized = phrase.toLowerCase\\n  val words = _matcher.findAllIn(normalized).toList\\n\\n  def wordCount = words.groupBy(e =\\u003e e).map(kv =\\u003e kv._1 -\\u003e kv._2.length)\\n}"}
226	17	f40fb7e593f3607a6ff9b61b	pending	go	leap	// Package leap exports GetValidYear which returns a valid year or zero,\r\n// and IsLeapYear which returns true if a validated year is a leap year.\r\npackage leap\r\n\r\nimport (\r\n\t"bufio"\r\n\t"fmt"\r\n\t"os"\r\n\t"strconv"\r\n)\r\n\r\nconst TestVersion = 1\r\n\r\n// GetValidYear prompts the user to enter a year from 1583 to 9999.\r\n// Returns validated year or 0 which indicates an error\r\n// Non-zero return values may be safely passed to IsLeapYear\r\nfunc GetValidYear() (year int) {\r\n\treader := bufio.NewReader(os.Stdin)\r\n\tfmt.Print("Enter a year from 1583 to 9999: ")\r\n\ttext, err := reader.ReadString('\\n')\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println("Unexpected error processing input")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\t// Valid input must contain 5 or 6 chars including EOL chars\r\n\ttxtLen := len(text)\r\n\tvar yrStr string\r\n\tif txtLen > 4 && txtLen < 7 {\r\n\t\tyrStr = text[:4] // ignore EOL char(s)\r\n\t} else {\r\n\t\tyrStr = "0000" // force invalid input range error\r\n\t}\r\n\r\n\t// Convert input to an integer value. Handle conversion errors\r\n\tyear, err = strconv.Atoi(yrStr)\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println(yrStr, "is not a valid number.")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\t// Verify that input in in the allowed range\r\n\tif year < 1583 || year > 9999 {\r\n\t\tfmt.Println("Year entered must be from 1583 to 9999.")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\treturn year // Return validated input value\r\n}\r\n\r\n// IsLeapYear expects an integer parameter between 1583 and 9999, and\r\n// returns true or false based on whether the value provided is a leap year\r\n// Other input values may result in a runtime error or incorrect results\r\nfunc IsLeapYear(year int) bool {\r\n\tif year%4 == 0.0 {\r\n\t\tif year%100 == 0.0 {\r\n\t\t\tif year%400 == 0.0 {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\treturn false\r\n}	\N	\N	0	2	147	\\go\\leap\\leap.go	2015-07-07 01:21:59	2015-07-07 01:21:59	{"\\\\go\\\\leap\\\\leap.go":"// Package leap exports GetValidYear which returns a valid year or zero,\\r\\n// and IsLeapYear which returns true if a validated year is a leap year.\\r\\npackage leap\\r\\n\\r\\nimport (\\r\\n\\t\\"bufio\\"\\r\\n\\t\\"fmt\\"\\r\\n\\t\\"os\\"\\r\\n\\t\\"strconv\\"\\r\\n)\\r\\n\\r\\nconst TestVersion = 1\\r\\n\\r\\n// GetValidYear prompts the user to enter a year from 1583 to 9999.\\r\\n// Returns validated year or 0 which indicates an error\\r\\n// Non-zero return values may be safely passed to IsLeapYear\\r\\nfunc GetValidYear() (year int) {\\r\\n\\treader := bufio.NewReader(os.Stdin)\\r\\n\\tfmt.Print(\\"Enter a year from 1583 to 9999: \\")\\r\\n\\ttext, err := reader.ReadString('\\\\n')\\r\\n\\r\\n\\tif err != nil {\\r\\n\\t\\tfmt.Println(\\"Unexpected error processing input\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\t// Valid input must contain 5 or 6 chars including EOL chars\\r\\n\\ttxtLen := len(text)\\r\\n\\tvar yrStr string\\r\\n\\tif txtLen \\u003e 4 \\u0026\\u0026 txtLen \\u003c 7 {\\r\\n\\t\\tyrStr = text[:4] // ignore EOL char(s)\\r\\n\\t} else {\\r\\n\\t\\tyrStr = \\"0000\\" // force invalid input range error\\r\\n\\t}\\r\\n\\r\\n\\t// Convert input to an integer value. Handle conversion errors\\r\\n\\tyear, err = strconv.Atoi(yrStr)\\r\\n\\r\\n\\tif err != nil {\\r\\n\\t\\tfmt.Println(yrStr, \\"is not a valid number.\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\t// Verify that input in in the allowed range\\r\\n\\tif year \\u003c 1583 || year \\u003e 9999 {\\r\\n\\t\\tfmt.Println(\\"Year entered must be from 1583 to 9999.\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\treturn year // Return validated input value\\r\\n}\\r\\n\\r\\n// IsLeapYear expects an integer parameter between 1583 and 9999, and\\r\\n// returns true or false based on whether the value provided is a leap year\\r\\n// Other input values may result in a runtime error or incorrect results\\r\\nfunc IsLeapYear(year int) bool {\\r\\n\\tif year%4 == 0.0 {\\r\\n\\t\\tif year%100 == 0.0 {\\r\\n\\t\\t\\tif year%400 == 0.0 {\\r\\n\\t\\t\\t\\treturn true\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}"}
227	17	aab809963a3cc175a4004887	superseded	go	leap	// Package leap exports GetValidYear which returns a valid year or zero,\r\n// and IsLeapYear which returns true if a validated year is a leap year.\r\npackage leap\r\n\r\nimport (\r\n\t"bufio"\r\n\t"fmt"\r\n\t"math"\r\n\t"os"\r\n\t"strconv"\r\n)\r\n\r\nconst TestVersion = 1\r\n\r\n// GetValidYear prompts the user to enter a year from 1583 to 9999.\r\n// Returns validated year or 0 which indicates an error\r\n// Non-zero return values may be safely passed to IsLeapYear\r\nfunc GetValidYear() (year int) {\r\n\treader := bufio.NewReader(os.Stdin)\r\n\tfmt.Print("Enter a year from 1583 to 9999: ")\r\n\ttext, err := reader.ReadString('\\n')\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println("Unexpected error processing input")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\t// Valid input must contain 5 or 6 chars including EOL chars\r\n\ttxtLen := len(text)\r\n\tvar yrStr string\r\n\tif txtLen > 4 && txtLen < 7 {\r\n\t\tyrStr = text[:4] // ignore EOL char(s)\r\n\t} else {\r\n\t\tyrStr = "0000" // force invalid input range error\r\n\t}\r\n\r\n\t// Convert input to an integer value. Handle conversion errors\r\n\tyear, err = strconv.Atoi(yrStr)\r\n\r\n\tif err != nil {\r\n\t\tfmt.Println(yrStr, "is not a valid number.")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\t// Verify that input in in the allowed range\r\n\tif year < 1583 || year > 9999 {\r\n\t\tfmt.Println("Year entered must be from 1583 to 9999.")\r\n\t\tfmt.Println("Please try again.")\r\n\t\treturn 0\r\n\t}\r\n\r\n\treturn year // Return validated input value\r\n}\r\n\r\n// IsLeapYear expects an integer parameter between 1583 and 9999, and\r\n// returns true or false based on whether the value provided is a leap year\r\n// Other input values may result in a runtime error or incorrect results\r\nfunc IsLeapYear(year int) bool {\r\n\tif math.Mod(float64(year), 4) == 0.0 {\r\n\t\tif math.Mod(float64(year), 100) == 0.0 {\r\n\t\t\tif math.Mod(float64(year), 400) == 0.0 {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\treturn false\r\n}	\N	\N	0	1	147	\\go\\leap\\leap.go	2015-08-22 10:04:52	2015-08-22 10:04:52	{"\\\\go\\\\leap\\\\leap.go":"// Package leap exports GetValidYear which returns a valid year or zero,\\r\\n// and IsLeapYear which returns true if a validated year is a leap year.\\r\\npackage leap\\r\\n\\r\\nimport (\\r\\n\\t\\"bufio\\"\\r\\n\\t\\"fmt\\"\\r\\n\\t\\"math\\"\\r\\n\\t\\"os\\"\\r\\n\\t\\"strconv\\"\\r\\n)\\r\\n\\r\\nconst TestVersion = 1\\r\\n\\r\\n// GetValidYear prompts the user to enter a year from 1583 to 9999.\\r\\n// Returns validated year or 0 which indicates an error\\r\\n// Non-zero return values may be safely passed to IsLeapYear\\r\\nfunc GetValidYear() (year int) {\\r\\n\\treader := bufio.NewReader(os.Stdin)\\r\\n\\tfmt.Print(\\"Enter a year from 1583 to 9999: \\")\\r\\n\\ttext, err := reader.ReadString('\\\\n')\\r\\n\\r\\n\\tif err != nil {\\r\\n\\t\\tfmt.Println(\\"Unexpected error processing input\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\t// Valid input must contain 5 or 6 chars including EOL chars\\r\\n\\ttxtLen := len(text)\\r\\n\\tvar yrStr string\\r\\n\\tif txtLen \\u003e 4 \\u0026\\u0026 txtLen \\u003c 7 {\\r\\n\\t\\tyrStr = text[:4] // ignore EOL char(s)\\r\\n\\t} else {\\r\\n\\t\\tyrStr = \\"0000\\" // force invalid input range error\\r\\n\\t}\\r\\n\\r\\n\\t// Convert input to an integer value. Handle conversion errors\\r\\n\\tyear, err = strconv.Atoi(yrStr)\\r\\n\\r\\n\\tif err != nil {\\r\\n\\t\\tfmt.Println(yrStr, \\"is not a valid number.\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\t// Verify that input in in the allowed range\\r\\n\\tif year \\u003c 1583 || year \\u003e 9999 {\\r\\n\\t\\tfmt.Println(\\"Year entered must be from 1583 to 9999.\\")\\r\\n\\t\\tfmt.Println(\\"Please try again.\\")\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\r\\n\\treturn year // Return validated input value\\r\\n}\\r\\n\\r\\n// IsLeapYear expects an integer parameter between 1583 and 9999, and\\r\\n// returns true or false based on whether the value provided is a leap year\\r\\n// Other input values may result in a runtime error or incorrect results\\r\\nfunc IsLeapYear(year int) bool {\\r\\n\\tif math.Mod(float64(year), 4) == 0.0 {\\r\\n\\t\\tif math.Mod(float64(year), 100) == 0.0 {\\r\\n\\t\\t\\tif math.Mod(float64(year), 400) == 0.0 {\\r\\n\\t\\t\\t\\treturn true\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn false\\r\\n\\t\\t}\\r\\n\\t\\treturn true\\r\\n\\t}\\r\\n\\treturn false\\r\\n}"}
228	20	42d2641a0be7f622de39da45	pending	python	bob	# #\n# # Skeleton file for the Python "Bob" exercise.\n# #\ndef hey(what):\n    what = what.strip()\n    if not what:\n\treturn "Fine. Be that way!"\n    elif what.isupper():\n\treturn "Whoa, chill out!"\n    elif what.endswith('?'):\n\treturn "Sure."\n    else:\n\treturn "Whatever."	\N	\N	0	1	148	bob.py	2015-07-27 15:53:53	2015-07-27 15:53:53	{"bob.py":"# #\\n# # Skeleton file for the Python \\"Bob\\" exercise.\\n# #\\ndef hey(what):\\n    what = what.strip()\\n    if not what:\\n\\treturn \\"Fine. Be that way!\\"\\n    elif what.isupper():\\n\\treturn \\"Whoa, chill out!\\"\\n    elif what.endswith('?'):\\n\\treturn \\"Sure.\\"\\n    else:\\n\\treturn \\"Whatever.\\""}
229	21	1eebdfdc16cacf85a9189e83	pending	ruby	nucleotide-count	class DNA\n  Nucleotides = {"A" => 0, "T" => 0, "C" => 0, "G" => 0}\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n    @result = Nucleotides.dup\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\n  end\n\n  def nucleotide_counts\n    @result\n  end\n\n  def count(nucleotide)\n    if nucleotide == "U"\n      0\n    elsif Nucleotides.keys.include?(nucleotide)\n      @result[nucleotide]\n    else\n      raise(ArgumentError, "Argument Error")\n    end\n  end\nend	\N	\N	0	2	149	nucleotide-count.rb	2015-04-30 15:52:15	2015-04-30 15:52:15	{"nucleotide-count.rb":"class DNA\\n  Nucleotides = {\\"A\\" =\\u003e 0, \\"T\\" =\\u003e 0, \\"C\\" =\\u003e 0, \\"G\\" =\\u003e 0}\\n\\n  def initialize(dna_string)\\n    @dna_string = dna_string\\n    @result = Nucleotides.dup\\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\\n  end\\n\\n  def nucleotide_counts\\n    @result\\n  end\\n\\n  def count(nucleotide)\\n    if nucleotide == \\"U\\"\\n      0\\n    elsif Nucleotides.keys.include?(nucleotide)\\n      @result[nucleotide]\\n    else\\n      raise(ArgumentError, \\"Argument Error\\")\\n    end\\n  end\\nend"}
235	21	636f75a7b8ac41faeace6aa5	pending	python	kindergarten-garden	# William Morris\r\n# exercism.io\r\n# garden.py\r\n\r\nclass Garden:\r\n\r\n    def __init__(self, rows, students =['Alice', 'Bob', 'Charlie', 'David', 'Eve',\r\n                                        'Fred', 'Ginny', 'Harriet', 'Ileana',\r\n                                        'Joseph', 'Kincaid', 'Larry'] ):\r\n        \r\n        self.names = students\r\n        self.names.sort()\r\n        self.seeds ={'G':'Grass','C':'Clover','R':'Radishes','V':'Violets'}\r\n        self.rows = rows.split()\r\n        name_index = 0\r\n        self.students_cups = {}\r\n        for cups in range(0,len(self.rows[0]),2):\r\n            cups_first_row = self.rows[0][cups:cups+2]\r\n            cups_second_row = self.rows[1][cups:cups+2]\r\n            self.students_cups[self.names[name_index]]=cups_first_row + cups_second_row\r\n            name_index += 1\r\n        self.students_plants = {}\r\n        for name in self.students_cups.keys():\r\n            self.students_plants[name] =  [self.seeds[seed] for seed in\r\n                                          self.students_cups[name]]\r\n            \r\n    def plants(self,name):\r\n        return self.students_plants[name]\r\n    \r	\N	\N	0	1	152	garden.py	2015-05-05 01:47:45	2015-05-05 01:47:45	{"garden.py":"# William Morris\\r\\n# exercism.io\\r\\n# garden.py\\r\\n\\r\\nclass Garden:\\r\\n\\r\\n    def __init__(self, rows, students =['Alice', 'Bob', 'Charlie', 'David', 'Eve',\\r\\n                                        'Fred', 'Ginny', 'Harriet', 'Ileana',\\r\\n                                        'Joseph', 'Kincaid', 'Larry'] ):\\r\\n        \\r\\n        self.names = students\\r\\n        self.names.sort()\\r\\n        self.seeds ={'G':'Grass','C':'Clover','R':'Radishes','V':'Violets'}\\r\\n        self.rows = rows.split()\\r\\n        name_index = 0\\r\\n        self.students_cups = {}\\r\\n        for cups in range(0,len(self.rows[0]),2):\\r\\n            cups_first_row = self.rows[0][cups:cups+2]\\r\\n            cups_second_row = self.rows[1][cups:cups+2]\\r\\n            self.students_cups[self.names[name_index]]=cups_first_row + cups_second_row\\r\\n            name_index += 1\\r\\n        self.students_plants = {}\\r\\n        for name in self.students_cups.keys():\\r\\n            self.students_plants[name] =  [self.seeds[seed] for seed in\\r\\n                                          self.students_cups[name]]\\r\\n            \\r\\n    def plants(self,name):\\r\\n        return self.students_plants[name]\\r\\n    \\r"}
236	21	482917b57d6b511f0f2fe5a7	done	ruby	secret-handshake	class SecretHandshake\n\n  HANDSHAKES = { \n                  1     => "wink",\n                  10    => "double blink",\n                  100   => "close your eyes",\n                  1000  => "jump"\n  }\n\n  attr_reader :decimal_number\n\n  def initialize decimal_number\n    @decimal_number = decimal_number\n  end\n\n  def commands\n    if decimal_number.is_a? Integer\n      secret_handshakes\n    else\n      []\n    end\n  end\n\nprivate\n\n  def binary_number\n    decimal_number.to_s 2\n  end\n\n  def translator\n    result = Array.new\n\n    binary_number.chars.reverse.each_with_index do |digit, index|\n      result << HANDSHAKES[ digit.ljust( index + 1, '0' ).to_i ]\n    end\n\n    result.compact\n  end\n\n  def secret_handshakes\n    if binary_number.length == 5\n      translator.reverse\n    else\n      translator\n    end\n  end\n\nend	\N	\N	0	1	153	/ruby/secret-handshake/secret_handshake.rb	2015-03-20 01:13:39	2015-03-20 01:13:39	{"/ruby/secret-handshake/secret_handshake.rb":"class SecretHandshake\\n\\n  HANDSHAKES = { \\n                  1     =\\u003e \\"wink\\",\\n                  10    =\\u003e \\"double blink\\",\\n                  100   =\\u003e \\"close your eyes\\",\\n                  1000  =\\u003e \\"jump\\"\\n  }\\n\\n  attr_reader :decimal_number\\n\\n  def initialize decimal_number\\n    @decimal_number = decimal_number\\n  end\\n\\n  def commands\\n    if decimal_number.is_a? Integer\\n      secret_handshakes\\n    else\\n      []\\n    end\\n  end\\n\\nprivate\\n\\n  def binary_number\\n    decimal_number.to_s 2\\n  end\\n\\n  def translator\\n    result = Array.new\\n\\n    binary_number.chars.reverse.each_with_index do |digit, index|\\n      result \\u003c\\u003c HANDSHAKES[ digit.ljust( index + 1, '0' ).to_i ]\\n    end\\n\\n    result.compact\\n  end\\n\\n  def secret_handshakes\\n    if binary_number.length == 5\\n      translator.reverse\\n    else\\n      translator\\n    end\\n  end\\n\\nend"}
237	36	f86b60c8974093440c6cbae3	done	haskell	robot-name	module Robot (Robot, robotName, mkRobot, resetName) where\n\n\nimport Control.Concurrent (MVar, readMVar, swapMVar, newMVar)\nimport Control.Monad (void)\nimport System.Random (randomRIO)\n\ndata Robot = Robot {\n  getName :: MVar String\n}\n\nmkRobot :: IO Robot\nmkRobot = generateName >>= newMVar >>= return . Robot\n\nrobotName :: Robot -> IO String\nrobotName r = readMVar $ getName r\n\nresetName :: Robot -> IO()\nresetName r = void(generateName >>= swapMVar (getName r))\n\ngenerateName :: IO String\ngenerateName = mapM randomRIO name\n  where name = [char, char, int, int, int]\n        char = ('A', 'Z')\n        int  = ('0', '9')	\N	\N	0	1	154	Robot.hs	2015-03-04 14:26:02	2015-03-04 14:26:02	{"Robot.hs":"module Robot (Robot, robotName, mkRobot, resetName) where\\n\\n\\nimport Control.Concurrent (MVar, readMVar, swapMVar, newMVar)\\nimport Control.Monad (void)\\nimport System.Random (randomRIO)\\n\\ndata Robot = Robot {\\n  getName :: MVar String\\n}\\n\\nmkRobot :: IO Robot\\nmkRobot = generateName \\u003e\\u003e= newMVar \\u003e\\u003e= return . Robot\\n\\nrobotName :: Robot -\\u003e IO String\\nrobotName r = readMVar $ getName r\\n\\nresetName :: Robot -\\u003e IO()\\nresetName r = void(generateName \\u003e\\u003e= swapMVar (getName r))\\n\\ngenerateName :: IO String\\ngenerateName = mapM randomRIO name\\n  where name = [char, char, int, int, int]\\n        char = ('A', 'Z')\\n        int  = ('0', '9')"}
238	36	08f6e948e61c198fe101e1f7	pending	python	bob	class Bob:\n    def hey(self, s):\n        if not s or s.isspace():\n            return 'Fine. Be that way!'\n        elif s.isupper():\n            return 'Woah, chill out!'\n        elif s[-1] == '?':\n            return 'Sure.'\n        else:\n            return 'Whatever.'	\N	\N	0	1	155	bob.py	2015-06-30 15:45:55	2015-06-30 15:45:55	{"bob.py":"class Bob:\\n    def hey(self, s):\\n        if not s or s.isspace():\\n            return 'Fine. Be that way!'\\n        elif s.isupper():\\n            return 'Woah, chill out!'\\n        elif s[-1] == '?':\\n            return 'Sure.'\\n        else:\\n            return 'Whatever.'"}
239	36	829a15162c74a293a7bcfe07	done	ruby	secret-handshake	class SecretHandshake\n\n  HANDSHAKES = { \n                  1     => "wink",\n                  10    => "double blink",\n                  100   => "close your eyes",\n                  1000  => "jump"\n  }\n\n  attr_reader :decimal_number\n\n  def initialize decimal_number\n    @decimal_number = decimal_number\n  end\n\n  def commands\n    if decimal_number.is_a? Integer\n      secret_handshakes\n    else\n      []\n    end\n  end\n\nprivate\n\n  def binary_number\n    decimal_number.to_s 2\n  end\n\n  def translator\n    result = Array.new\n\n    binary_number.chars.reverse.each_with_index do |digit, index|\n      result << HANDSHAKES[ digit.ljust( index + 1, '0' ).to_i ]\n    end\n\n    result.compact\n  end\n\n  def secret_handshakes\n    if binary_number.length == 5\n      translator.reverse\n    else\n      translator\n    end\n  end\n\nend	\N	\N	0	1	156	/ruby/secret-handshake/secret_handshake.rb	2015-03-04 17:44:57	2015-03-04 17:44:57	{"/ruby/secret-handshake/secret_handshake.rb":"class SecretHandshake\\n\\n  HANDSHAKES = { \\n                  1     =\\u003e \\"wink\\",\\n                  10    =\\u003e \\"double blink\\",\\n                  100   =\\u003e \\"close your eyes\\",\\n                  1000  =\\u003e \\"jump\\"\\n  }\\n\\n  attr_reader :decimal_number\\n\\n  def initialize decimal_number\\n    @decimal_number = decimal_number\\n  end\\n\\n  def commands\\n    if decimal_number.is_a? Integer\\n      secret_handshakes\\n    else\\n      []\\n    end\\n  end\\n\\nprivate\\n\\n  def binary_number\\n    decimal_number.to_s 2\\n  end\\n\\n  def translator\\n    result = Array.new\\n\\n    binary_number.chars.reverse.each_with_index do |digit, index|\\n      result \\u003c\\u003c HANDSHAKES[ digit.ljust( index + 1, '0' ).to_i ]\\n    end\\n\\n    result.compact\\n  end\\n\\n  def secret_handshakes\\n    if binary_number.length == 5\\n      translator.reverse\\n    else\\n      translator\\n    end\\n  end\\n\\nend"}
243	36	53d26e68662a061509161101	pending	javascript	word-count	var words = function(input) {\r\n\tvar split = input.replace('\\n'," ").split(" ");\r\n\tvar wordcount = {};\r\n\t\r\n\tsplit.forEach(function(element) {\r\n\t\t\tif (wordcount[element]) {\r\n\t\t\t\twordcount[element] = wordcount[element] + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\twordcount[element] = 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t});\r\n\treturn wordcount;\r\n};\r\n\r\nmodule.exports = words;	\N	\N	0	1	158	word-count.js	2015-07-08 22:33:03	2015-07-08 22:33:03	{"word-count.js":"var words = function(input) {\\r\\n\\tvar split = input.replace('\\\\n',\\" \\").split(\\" \\");\\r\\n\\tvar wordcount = {};\\r\\n\\t\\r\\n\\tsplit.forEach(function(element) {\\r\\n\\t\\t\\tif (wordcount[element]) {\\r\\n\\t\\t\\t\\twordcount[element] = wordcount[element] + 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\twordcount[element] = 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t});\\r\\n\\treturn wordcount;\\r\\n};\\r\\n\\r\\nmodule.exports = words;"}
244	30	5b8ae026d1620f4fb0be9290	done	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nmy @words = 'a'..'z';\n\nsub new{\n\tmy ($class, $key) = @_;\n\tdie "ArgumentError: $key" if defined $key and ($key =~ /[^a-z]/ or not length $key);\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	2	159	Cipher.pm	2015-09-16 17:24:50	2015-09-16 17:24:50	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nmy @words = 'a'..'z';\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\tdie \\"ArgumentError: $key\\" if defined $key and ($key =~ /[^a-z]/ or not length $key);\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
245	30	70f29d5cfb0f104ea1cec7c1	superseded	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nsub new{\n\tmy ($class, $key) = @_;\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	1	159	Cipher.pm	2015-09-18 19:57:49	2015-09-18 19:57:49	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
246	30	23a7f2a006f1eb0a1c8492ab	done	haskell	accumulate	module Accumulate (accumulate) where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate _ [] = []\naccumulate f (x:xs) = f x : accumulate f xs	\N	\N	0	2	160	Accumulate.hs	2015-09-17 00:24:12	2015-09-17 00:24:12	{"Accumulate.hs":"module Accumulate (accumulate) where\\n\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\naccumulate _ [] = []\\naccumulate f (x:xs) = f x : accumulate f xs"}
247	30	0f6ce8f3b096a6eb5bea2416	superseded	haskell	accumulate	module Accumulate (accumulate) where\n\naccumulate :: (a -> b) -> [a] -> [b]\naccumulate f xs = accumulate' f xs []\n\naccumulate' :: (a -> b) -> [a] -> [b] -> [b]\naccumulate' _ [] acc = reverse acc\naccumulate' f (x:xs) acc = accumulate' f xs (f x:acc )	\N	\N	0	1	160	Accumulate.hs	2015-09-17 05:09:55	2015-09-17 05:09:55	{"Accumulate.hs":"module Accumulate (accumulate) where\\n\\naccumulate :: (a -\\u003e b) -\\u003e [a] -\\u003e [b]\\naccumulate f xs = accumulate' f xs []\\n\\naccumulate' :: (a -\\u003e b) -\\u003e [a] -\\u003e [b] -\\u003e [b]\\naccumulate' _ [] acc = reverse acc\\naccumulate' f (x:xs) acc = accumulate' f xs (f x:acc )"}
248	30	4ecd448e22f13be2092394fa	pending	python	series	class Series(object):\n\n    def __init__(self, input_string):\n        self.length = len(input_string)\n        try:\n            self.lst = [int(c) for c in input_string]\n        except:\n            raise ValueError("Please input a string that only contains numbers")\n\n    def slices(self, n):\n\n        if n > self.length or n <= 0:\n            raise ValueError("Invalid slice length for this series: %d" % n)\n\n        return [ self.lst[i:i+n] for i in range(self.length - n + 1) ]	\N	\N	0	2	161	series.py	2015-09-19 18:53:51	2015-09-19 18:53:51	{"series.py":"class Series(object):\\n\\n    def __init__(self, input_string):\\n        self.length = len(input_string)\\n        try:\\n            self.lst = [int(c) for c in input_string]\\n        except:\\n            raise ValueError(\\"Please input a string that only contains numbers\\")\\n\\n    def slices(self, n):\\n\\n        if n \\u003e self.length or n \\u003c= 0:\\n            raise ValueError(\\"Invalid slice length for this series: %d\\" % n)\\n\\n        return [ self.lst[i:i+n] for i in range(self.length - n + 1) ]"}
249	30	69417be373aaa59dd78589e3	superseded	python	series	class Series(object):\n\n    def __init__(self, input_string):\n        self.num = input_string\n        self.length = len(self.num)\n        try:\n            self.lst = [int(c) for c in self.num]\n        except:\n            self.lst = []\n            \n    def slices(self, n):\n\n        if n > self.length or n <= 0:\n            raise ValueError("Invalid slice length for this series: %d" % n)\n\n        ret = []\n        for i in range(self.length - n + 1):\n            each_slice = self.lst[i:i+n]\n            ret.append(each_slice)\n\n        return ret	\N	\N	0	1	161	series.py	2015-09-21 04:29:29	2015-09-21 04:29:29	{"series.py":"class Series(object):\\n\\n    def __init__(self, input_string):\\n        self.num = input_string\\n        self.length = len(self.num)\\n        try:\\n            self.lst = [int(c) for c in self.num]\\n        except:\\n            self.lst = []\\n            \\n    def slices(self, n):\\n\\n        if n \\u003e self.length or n \\u003c= 0:\\n            raise ValueError(\\"Invalid slice length for this series: %d\\" % n)\\n\\n        ret = []\\n        for i in range(self.length - n + 1):\\n            each_slice = self.lst[i:i+n]\\n            ret.append(each_slice)\\n\\n        return ret"}
250	30	abb6d967a23b864f22044ebf	done	go	diffie-hellman	package diffiehellman\n\nimport (\n\t"crypto/rand"\n\t"math/big"\n)\n\nvar two = big.NewInt(2)\n\n// PrivateKey generates and returns a private key.\n// A private key is a random int in the range [2, p).\nfunc PrivateKey(p *big.Int) *big.Int {\n\t// Generate a random int in [0, p-2), then adjust to [2, p)\n\tmax := new(big.Int).Sub(p, two)\n\tr, err := rand.Int(rand.Reader, max)\n\tif err != nil {\n\t\treturn nil\n\t}\n\treturn r.Add(r, two)\n}\n\n// PublicKey calculates and returns the public key for the given parameters.\n// The public key is calculated as g**priv mod p.\nfunc PublicKey(priv, p *big.Int, g int64) *big.Int {\n\treturn new(big.Int).Exp(big.NewInt(g), priv, p)\n}\n\n// NewPair generates and returns a new key pair.\nfunc NewPair(p *big.Int, g int64) (priv, pub *big.Int) {\n\tpriv = PrivateKey(p)\n\tpub = PublicKey(priv, p, g)\n\treturn priv, pub\n}\n\n// SecretKey calculates and returns the secret key for one client.\n// The secret key is calculated as pub2**priv1 mod p where:\n//     - priv1 = private key\n//     - pub2  = other client's public key\n//     - p     = modulus\nfunc SecretKey(priv1, pub2, p *big.Int) *big.Int {\n\treturn new(big.Int).Exp(pub2, priv1, p)\n}	\N	\N	0	1	162	diffie_hellman.go	2015-09-16 12:10:37	2015-09-16 12:10:37	{"diffie_hellman.go":"package diffiehellman\\n\\nimport (\\n\\t\\"crypto/rand\\"\\n\\t\\"math/big\\"\\n)\\n\\nvar two = big.NewInt(2)\\n\\n// PrivateKey generates and returns a private key.\\n// A private key is a random int in the range [2, p).\\nfunc PrivateKey(p *big.Int) *big.Int {\\n\\t// Generate a random int in [0, p-2), then adjust to [2, p)\\n\\tmax := new(big.Int).Sub(p, two)\\n\\tr, err := rand.Int(rand.Reader, max)\\n\\tif err != nil {\\n\\t\\treturn nil\\n\\t}\\n\\treturn r.Add(r, two)\\n}\\n\\n// PublicKey calculates and returns the public key for the given parameters.\\n// The public key is calculated as g**priv mod p.\\nfunc PublicKey(priv, p *big.Int, g int64) *big.Int {\\n\\treturn new(big.Int).Exp(big.NewInt(g), priv, p)\\n}\\n\\n// NewPair generates and returns a new key pair.\\nfunc NewPair(p *big.Int, g int64) (priv, pub *big.Int) {\\n\\tpriv = PrivateKey(p)\\n\\tpub = PublicKey(priv, p, g)\\n\\treturn priv, pub\\n}\\n\\n// SecretKey calculates and returns the secret key for one client.\\n// The secret key is calculated as pub2**priv1 mod p where:\\n//     - priv1 = private key\\n//     - pub2  = other client's public key\\n//     - p     = modulus\\nfunc SecretKey(priv1, pub2, p *big.Int) *big.Int {\\n\\treturn new(big.Int).Exp(pub2, priv1, p)\\n}"}
251	30	8c810085174252e6cf842546	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	163	/python/wordy/wordy.py	2015-09-16 15:26:22	2015-09-16 15:26:22	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
252	30	9abf83450d7a55de2cc7993b	done	javascript	pythagorean-triplet	(function() {\n  'use strict';\n\n  var Triplet = function(first, second, third) {\n    this.first = first;\n    this.second = second;\n    this.third = third;\n    this.angles = [first, second, third].sort(sortNumber);\n  };\n\n  Triplet.prototype.sum = function() {\n    return this.first + this.second + this.third;\n  };\n\n  Triplet.prototype.product = function() {\n    return this.first * this.second * this.third;\n  };\n\n  Triplet.prototype.isPythagorean = function() {\n    var intTest = /^-?(\\d+|0)$/;\n    if (!intTest.test(this.angles[2])) { return false; }\n\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\n  };\n\n  Triplet.where = function(options) {\n    var max = options['maxFactor'];\n    var min = options['minFactor'] || 1;\n    var sum = options['sum'];\n    var result = this.calculateTriplets(min, max);\n\n    if (sum) {\n      return this.matchSum(sum, result);\n    } else {\n      return result;\n    }\n  };\n\n  Triplet.calculateTriplets = function(min, max) {\n    var triplets = [];\n    for (var x = min; x < max; x++) {\n      for (var y = min; y < max; y++) {\n        var z = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n        var t = new Triplet(x, y, z);\n        if (t.isPythagorean() && !Triplet.inCollection(triplets, t)) {\n          triplets.push(t);\n        }\n      }\n    }\n    return triplets;\n  };\n\n  Triplet.inCollection = function(collection, triplet) {\n    var filtered = collection.filter(function(x) {\n      return x.angles.sort().eql(triplet.angles.sort());\n    });\n    return filtered.length !== 0;\n  };\n\n  Triplet.matchSum = function(sum, collection) {\n    var result = [];\n    for (var x = 0; x < collection.length; x++) {\n      if (collection[x].sum() === sum) {\n        result.push(collection[x]);\n      }\n    }\n    return result;\n  };\n\n  Array.prototype.eql = function(other){\n    if (this.length !== other.length) { return false; }\n\n    for(var i = 0; i < this.length; i++) {\n      if(this[i] !== other[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  function sortNumber(a,b) {\n    return a - b;\n  }\n\n  module.exports = Triplet;\n})();	\N	\N	0	2	164	triplet.js	2015-09-18 10:04:22	2015-09-18 10:04:22	{"triplet.js":"(function() {\\n  'use strict';\\n\\n  var Triplet = function(first, second, third) {\\n    this.first = first;\\n    this.second = second;\\n    this.third = third;\\n    this.angles = [first, second, third].sort(sortNumber);\\n  };\\n\\n  Triplet.prototype.sum = function() {\\n    return this.first + this.second + this.third;\\n  };\\n\\n  Triplet.prototype.product = function() {\\n    return this.first * this.second * this.third;\\n  };\\n\\n  Triplet.prototype.isPythagorean = function() {\\n    var intTest = /^-?(\\\\d+|0)$/;\\n    if (!intTest.test(this.angles[2])) { return false; }\\n\\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\\n  };\\n\\n  Triplet.where = function(options) {\\n    var max = options['maxFactor'];\\n    var min = options['minFactor'] || 1;\\n    var sum = options['sum'];\\n    var result = this.calculateTriplets(min, max);\\n\\n    if (sum) {\\n      return this.matchSum(sum, result);\\n    } else {\\n      return result;\\n    }\\n  };\\n\\n  Triplet.calculateTriplets = function(min, max) {\\n    var triplets = [];\\n    for (var x = min; x \\u003c max; x++) {\\n      for (var y = min; y \\u003c max; y++) {\\n        var z = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\\n        var t = new Triplet(x, y, z);\\n        if (t.isPythagorean() \\u0026\\u0026 !Triplet.inCollection(triplets, t)) {\\n          triplets.push(t);\\n        }\\n      }\\n    }\\n    return triplets;\\n  };\\n\\n  Triplet.inCollection = function(collection, triplet) {\\n    var filtered = collection.filter(function(x) {\\n      return x.angles.sort().eql(triplet.angles.sort());\\n    });\\n    return filtered.length !== 0;\\n  };\\n\\n  Triplet.matchSum = function(sum, collection) {\\n    var result = [];\\n    for (var x = 0; x \\u003c collection.length; x++) {\\n      if (collection[x].sum() === sum) {\\n        result.push(collection[x]);\\n      }\\n    }\\n    return result;\\n  };\\n\\n  Array.prototype.eql = function(other){\\n    if (this.length !== other.length) { return false; }\\n\\n    for(var i = 0; i \\u003c this.length; i++) {\\n      if(this[i] !== other[i]) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  };\\n\\n  function sortNumber(a,b) {\\n    return a - b;\\n  }\\n\\n  module.exports = Triplet;\\n})();"}
253	30	013209ce80cbd0547bfcc262	superseded	javascript	pythagorean-triplet	(function() {\n  'use strict';\n\n  var Triplet = function(first, second, third) {\n    this.first = first;\n    this.second = second;\n    this.third = third;\n    this.angles = [first, second, third].sort(sortNumber);\n  };\n\n  Triplet.prototype.sum = function() {\n    return this.first + this.second + this.third;\n  };\n\n  Triplet.prototype.product = function() {\n    return this.first * this.second * this.third;\n  };\n\n  Triplet.prototype.isPythagorean = function() {\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\n  };\n\n  Triplet.where = function(options) {\n    var max = options['maxFactor'];\n    var min = options['minFactor'] || 1;\n    var sum = options['sum'];\n    var result = this.calculateTriplets(min, max);\n\n    if (sum) {\n      return this.matchSum(sum, result);\n    } else {\n      return result;\n    }\n  };\n\n  Triplet.calculateTriplets = function(min, max) {\n    var triplets = [];\n    for (var x = min; x <= max; x++) {\n      for (var y = min; y <= max; y++) {\n        for (var z = min; z <= max; z++) {\n          var t = new Triplet(x, y, z);\n          if (t.isPythagorean() && !(this.inCollection(triplets, t))) {\n            triplets.push(t);\n          }\n        }\n      }\n    }\n    return triplets;\n  };\n\n  Triplet.inCollection = function(collection, triplet) {\n    var filtered = collection.filter(function(x) {\n      return x.angles.sort().eql(triplet.angles.sort());\n    });\n    return filtered.length !== 0;\n  };\n\n  Triplet.matchSum = function(sum, collection) {\n    var result = [];\n    for (var x = 0; x < collection.length; x++) {\n      if (collection[x].sum() === sum) {\n        result.push(collection[x]);\n      }\n    }\n    return result;\n  }\n\n  Array.prototype.eql = function(other){\n    if (this.length !== other.length) { return false; }\n\n    for(var i = 0; i < this.length; i++) {\n      if(this[i] !== other[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  function sortNumber(a,b) {\n    return a - b;\n  }\n\n  module.exports = Triplet;\n})();	\N	\N	0	1	164	triplet.js	2015-09-18 11:32:30	2015-09-18 11:32:30	{"triplet.js":"(function() {\\n  'use strict';\\n\\n  var Triplet = function(first, second, third) {\\n    this.first = first;\\n    this.second = second;\\n    this.third = third;\\n    this.angles = [first, second, third].sort(sortNumber);\\n  };\\n\\n  Triplet.prototype.sum = function() {\\n    return this.first + this.second + this.third;\\n  };\\n\\n  Triplet.prototype.product = function() {\\n    return this.first * this.second * this.third;\\n  };\\n\\n  Triplet.prototype.isPythagorean = function() {\\n    return (Math.pow(this.angles[0], 2) + Math.pow(this.angles[1], 2) === Math.pow(this.angles[2], 2));\\n  };\\n\\n  Triplet.where = function(options) {\\n    var max = options['maxFactor'];\\n    var min = options['minFactor'] || 1;\\n    var sum = options['sum'];\\n    var result = this.calculateTriplets(min, max);\\n\\n    if (sum) {\\n      return this.matchSum(sum, result);\\n    } else {\\n      return result;\\n    }\\n  };\\n\\n  Triplet.calculateTriplets = function(min, max) {\\n    var triplets = [];\\n    for (var x = min; x \\u003c= max; x++) {\\n      for (var y = min; y \\u003c= max; y++) {\\n        for (var z = min; z \\u003c= max; z++) {\\n          var t = new Triplet(x, y, z);\\n          if (t.isPythagorean() \\u0026\\u0026 !(this.inCollection(triplets, t))) {\\n            triplets.push(t);\\n          }\\n        }\\n      }\\n    }\\n    return triplets;\\n  };\\n\\n  Triplet.inCollection = function(collection, triplet) {\\n    var filtered = collection.filter(function(x) {\\n      return x.angles.sort().eql(triplet.angles.sort());\\n    });\\n    return filtered.length !== 0;\\n  };\\n\\n  Triplet.matchSum = function(sum, collection) {\\n    var result = [];\\n    for (var x = 0; x \\u003c collection.length; x++) {\\n      if (collection[x].sum() === sum) {\\n        result.push(collection[x]);\\n      }\\n    }\\n    return result;\\n  }\\n\\n  Array.prototype.eql = function(other){\\n    if (this.length !== other.length) { return false; }\\n\\n    for(var i = 0; i \\u003c this.length; i++) {\\n      if(this[i] !== other[i]) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  };\\n\\n  function sortNumber(a,b) {\\n    return a - b;\\n  }\\n\\n  module.exports = Triplet;\\n})();"}
254	30	9168e6b0a2d2e0e3cbc9e5e1	done	ruby	bob	class Bob\n  def hey(message)\n    if message.strip.empty?\n      'Fine. Be that way!'\n    elsif message == message.upcase\n      'Woah, chill out!'\n    elsif message.end_with?('?')\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\nend	\N	\N	0	1	165	bob.rb	2015-09-18 22:36:39	2015-09-18 22:36:39	{"bob.rb":"class Bob\\n  def hey(message)\\n    if message.strip.empty?\\n      'Fine. Be that way!'\\n    elsif message == message.upcase\\n      'Woah, chill out!'\\n    elsif message.end_with?('?')\\n      'Sure.'\\n    else\\n      'Whatever.'\\n    end\\n  end\\nend"}
255	30	e73fbf3077f091a705343b90	done	python	point-mutations	class DNA:\n\tdef __init__(self, strand):\n\t\tself.strand = strand \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.strand:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.strand[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	2	166	point-mutations.py	2015-09-18 16:53:20	2015-09-18 16:53:20	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, strand):\\n\\t\\tself.strand = strand \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.strand:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.strand[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
256	30	1d0a437fa2d44290f6097128	superseded	python	point-mutations	class DNA:\n\tdef __init__(self, dna):\n\t\tself.dna = dna \n\n\tdef hamming_distance(self, mutation):\n\t\tdistance, i, j = 0, 0, 0 \n\n\t\tfor letter in self.dna:\n\t\t\tif j == len(mutation):\n\t\t\t\tbreak\n\t\t\telif self.dna[i] != mutation[j]:\n\t\t\t\tdistance +=1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn distance	\N	\N	0	1	166	point-mutations.py	2015-09-19 19:24:13	2015-09-19 19:24:13	{"point-mutations.py":"class DNA:\\n\\tdef __init__(self, dna):\\n\\t\\tself.dna = dna \\n\\n\\tdef hamming_distance(self, mutation):\\n\\t\\tdistance, i, j = 0, 0, 0 \\n\\n\\t\\tfor letter in self.dna:\\n\\t\\t\\tif j == len(mutation):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif self.dna[i] != mutation[j]:\\n\\t\\t\\t\\tdistance +=1\\n\\t\\t\\ti += 1\\n\\t\\t\\tj += 1\\n\\t\\treturn distance"}
257	30	a4e759789bc9f8340b46e00a	done	clojure	binary	(ns binary\n     (:import java.lang.Math ))\n\n (defn to-decimal-seq [binaryStr]\n       (let [tidyStr (clojure.string/replace binaryStr #"[^0-9]" "0")  ;Treat invalid input as binary 0\n             idx-map (map-indexed vector  (clojure.string/reverse tidyStr))]\n            (for [[x v] idx-map]\n                 (do\n                  ;(println (format " (2 ^ %1s) * %2s" x v ))\n                  (* (Math/pow 2 (read-string (str x))) (read-string (str v)))))))\n\n\n (defn to-decimal [binaryStr]\n       (let [col (to-decimal-seq binaryStr)]\n            (int (apply + col))))	\N	\N	0	1	167	/clojure/binary/binary.clj	2015-09-18 07:06:24	2015-09-18 07:06:24	{"/clojure/binary/binary.clj":"(ns binary\\n     (:import java.lang.Math ))\\n\\n (defn to-decimal-seq [binaryStr]\\n       (let [tidyStr (clojure.string/replace binaryStr #\\"[^0-9]\\" \\"0\\")  ;Treat invalid input as binary 0\\n             idx-map (map-indexed vector  (clojure.string/reverse tidyStr))]\\n            (for [[x v] idx-map]\\n                 (do\\n                  ;(println (format \\" (2 ^ %1s) * %2s\\" x v ))\\n                  (* (Math/pow 2 (read-string (str x))) (read-string (str v)))))))\\n\\n\\n (defn to-decimal [binaryStr]\\n       (let [col (to-decimal-seq binaryStr)]\\n            (int (apply + col))))"}
258	30	ba16fcc488df03f38398ed0b	done	javascript	sieve	var Sieve = function(num) {\n  this.num = num;\n  this.primes = [];\n\n  var isPrime = function(n) {\n    var mid = Math.floor( n / 2 );\n\n    for ( var i = 2; i <= mid; i++ ) {\n      if ( n % i === 0 ) {\n        return false\n      }\n    }\n    return true;\n  }\n\n  for ( var i = 2; i <= this.num; i++ ) {\n    if ( isPrime(i) ) {\n      this.primes.push(i);\n    }\n  }\n};	\N	\N	0	1	168	sieve_test.js	2015-09-19 14:57:34	2015-09-19 14:57:34	{"sieve_test.js":"var Sieve = function(num) {\\n  this.num = num;\\n  this.primes = [];\\n\\n  var isPrime = function(n) {\\n    var mid = Math.floor( n / 2 );\\n\\n    for ( var i = 2; i \\u003c= mid; i++ ) {\\n      if ( n % i === 0 ) {\\n        return false\\n      }\\n    }\\n    return true;\\n  }\\n\\n  for ( var i = 2; i \\u003c= this.num; i++ ) {\\n    if ( isPrime(i) ) {\\n      this.primes.push(i);\\n    }\\n  }\\n};"}
259	30	ae9ec96ed04b867d8c522d12	pending	ruby	nucleotide-count	class DNA\n  Nucleotides = {"A" => 0, "T" => 0, "C" => 0, "G" => 0}\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n    @result = Nucleotides.dup\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\n  end\n\n  def nucleotide_counts\n    @result\n  end\n\n  def count(nucleotide)\n    if nucleotide == "U"\n      0\n    elsif Nucleotides.keys.include?(nucleotide)\n      @result[nucleotide]\n    else\n      raise(ArgumentError, "Argument Error")\n    end\n  end\nend	\N	\N	0	2	169	nucleotide-count.rb	2015-09-16 07:52:22	2015-09-16 07:52:22	{"nucleotide-count.rb":"class DNA\\n  Nucleotides = {\\"A\\" =\\u003e 0, \\"T\\" =\\u003e 0, \\"C\\" =\\u003e 0, \\"G\\" =\\u003e 0}\\n\\n  def initialize(dna_string)\\n    @dna_string = dna_string\\n    @result = Nucleotides.dup\\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\\n  end\\n\\n  def nucleotide_counts\\n    @result\\n  end\\n\\n  def count(nucleotide)\\n    if nucleotide == \\"U\\"\\n      0\\n    elsif Nucleotides.keys.include?(nucleotide)\\n      @result[nucleotide]\\n    else\\n      raise(ArgumentError, \\"Argument Error\\")\\n    end\\n  end\\nend"}
260	30	63a3c77003a2338ccebee94c	superseded	ruby	nucleotide-count	class DNA\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n    @result = {"A"=>0, "T"=>0, "C"=>0, "G"=>0}\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\n  end\n\n  def nucleotide_counts\n    @result\n  end\n\n  def count(nucleotide)\n    if nucleotide == "U"\n      0\n    elsif ["A", "T", "C", "G"].include?(nucleotide)\n      @result[nucleotide]\n    else\n      raise(ArgumentError)\n    end\n  end\nend	\N	\N	0	1	169	nucleotide-count.rb	2015-09-20 00:20:31	2015-09-20 00:20:31	{"nucleotide-count.rb":"class DNA\\n\\n  def initialize(dna_string)\\n    @dna_string = dna_string\\n    @result = {\\"A\\"=\\u003e0, \\"T\\"=\\u003e0, \\"C\\"=\\u003e0, \\"G\\"=\\u003e0}\\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\\n  end\\n\\n  def nucleotide_counts\\n    @result\\n  end\\n\\n  def count(nucleotide)\\n    if nucleotide == \\"U\\"\\n      0\\n    elsif [\\"A\\", \\"T\\", \\"C\\", \\"G\\"].include?(nucleotide)\\n      @result[nucleotide]\\n    else\\n      raise(ArgumentError)\\n    end\\n  end\\nend"}
261	30	4cecfbdb2c360f3b0488bee4	pending	ruby	roman-numerals	class Fixnum\n  def to_roman\n    array = self.to_s.split(//)\n    num_array = []\n    array.each do |x|\n      num_array.push(x.to_i)\n    end\n    roman_numeral=[]\n    ones = num_array.pop\n    if ones == 9\n      roman_numeral.unshift('IX')\n    elsif ones == 4\n      roman_numeral.unshift('IV')\n    else\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\n    end\n\n    if num_array.empty? == false\n      tens = num_array.pop\n      if tens == 9\n        roman_numeral.unshift('XC')\n      elsif tens == 4\n        roman_numeral.unshift('XL')\n      else\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\n      end\n    end\n\n    if num_array.empty? == false\n      hundreds = num_array.pop\n      if hundreds == 9\n        roman_numeral.unshift('CM')\n      elsif hundreds == 4\n        roman_numeral.unshift('CD')\n      else\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\n      end\n    end\n\n    if num_array.empty? == false\n      thousands = num_array.pop\n      roman_numeral.unshift('M'*thousands)\n    end\n\n    roman_numeral.join\n  end\nend	\N	\N	0	1	170	/ruby/roman-numerals/roman.rb	2015-09-19 11:42:01	2015-09-19 11:42:01	{"/ruby/roman-numerals/roman.rb":"class Fixnum\\n  def to_roman\\n    array = self.to_s.split(//)\\n    num_array = []\\n    array.each do |x|\\n      num_array.push(x.to_i)\\n    end\\n    roman_numeral=[]\\n    ones = num_array.pop\\n    if ones == 9\\n      roman_numeral.unshift('IX')\\n    elsif ones == 4\\n      roman_numeral.unshift('IV')\\n    else\\n      roman_numeral.unshift('V'*(ones/5) + 'I'*(ones%5))\\n    end\\n\\n    if num_array.empty? == false\\n      tens = num_array.pop\\n      if tens == 9\\n        roman_numeral.unshift('XC')\\n      elsif tens == 4\\n        roman_numeral.unshift('XL')\\n      else\\n        roman_numeral.unshift('L'*(tens/5) + 'X'*(tens%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      hundreds = num_array.pop\\n      if hundreds == 9\\n        roman_numeral.unshift('CM')\\n      elsif hundreds == 4\\n        roman_numeral.unshift('CD')\\n      else\\n        roman_numeral.unshift('D'*(hundreds/5) + 'C'*(hundreds%5))\\n      end\\n    end\\n\\n    if num_array.empty? == false\\n      thousands = num_array.pop\\n      roman_numeral.unshift('M'*thousands)\\n    end\\n\\n    roman_numeral.join\\n  end\\nend"}
262	30	91792c0187211e77777ee448	superseded	python	anagram	from collections import Counter\n\n\ndef detect_anagrams(source, anagrams):\n    # since anagrams in this case are case-insensitive convert all to\n    # lowercase\n    l_source = source.lower()\n    source_count = Counter(l_source)\n    res = []\n\n    for pos_anagram in anagrams:\n        l_pos_anagram = pos_anagram.lower()\n        if Counter(l_pos_anagram) == source_count and l_pos_anagram != l_source:\n            res.append(pos_anagram)\n\n    return res	\N	\N	0	2	171	anagram.py	2015-09-16 10:44:16	2015-09-16 10:44:16	{"anagram.py":"from collections import Counter\\n\\n\\ndef detect_anagrams(source, anagrams):\\n    # since anagrams in this case are case-insensitive convert all to\\n    # lowercase\\n    l_source = source.lower()\\n    source_count = Counter(l_source)\\n    res = []\\n\\n    for pos_anagram in anagrams:\\n        l_pos_anagram = pos_anagram.lower()\\n        if Counter(l_pos_anagram) == source_count and l_pos_anagram != l_source:\\n            res.append(pos_anagram)\\n\\n    return res"}
263	30	cd3221927c5cd870a413e21b	pending	python	anagram	from collections import Counter\n\n\ndef detect_anagrams(source, anagrams):\n    # since anagrams in this case are case-insensitive convert all to\n    # lowercase\n    l_source = source.lower()\n    source_count = Counter(l_source)\n    # list comp instead of loop - less readable but not much .\n    return [anagram for anagram in anagrams if Counter(anagram.lower()) == source_count and anagram.lower() != l_source]	\N	\N	0	3	171	anagram.py	2015-09-16 13:00:18	2015-09-16 13:00:18	{"anagram.py":"from collections import Counter\\n\\n\\ndef detect_anagrams(source, anagrams):\\n    # since anagrams in this case are case-insensitive convert all to\\n    # lowercase\\n    l_source = source.lower()\\n    source_count = Counter(l_source)\\n    # list comp instead of loop - less readable but not much .\\n    return [anagram for anagram in anagrams if Counter(anagram.lower()) == source_count and anagram.lower() != l_source]"}
264	30	c0b41efd4b74b74fe832709e	superseded	python	anagram	from collections import Counter\n\n\ndef detect_anagrams(source, anagrams):\n    # since anagrams in this case are case-insensitive convert all to\n    # lowercase\n    l_source = source.lower()\n    source_count = Counter(l_source)\n    res = []\n\n    for pos_anagram in anagrams:\n        if Counter(pos_anagram.lower()) == source_count and pos_anagram.lower() != l_source:\n            res.append(pos_anagram)\n\n    return res	\N	\N	0	1	171	anagram.py	2015-09-18 20:23:01	2015-09-18 20:23:01	{"anagram.py":"from collections import Counter\\n\\n\\ndef detect_anagrams(source, anagrams):\\n    # since anagrams in this case are case-insensitive convert all to\\n    # lowercase\\n    l_source = source.lower()\\n    source_count = Counter(l_source)\\n    res = []\\n\\n    for pos_anagram in anagrams:\\n        if Counter(pos_anagram.lower()) == source_count and pos_anagram.lower() != l_source:\\n            res.append(pos_anagram)\\n\\n    return res"}
265	30	b57e266553c520d83eef7479	pending	python	bob	#\n# Skeleton file for the Python "Bob" exercise.\n#\ndef hey(what):\n\t#I checked for upercase first since it had the most cases.\n\tif what.isupper():\n\t\tsay = "Whoa, chill out!"\n\t#I originally check for a ? anywhere in the string, but I guess that doesn't count, seems ambiguous.\n\telif what.endswith("?"):\n\t\tsay = "Sure."\n\t#I checked this last since it has the most complexity. ispace checks for whitespace characters, while "" takes in strings that are empty, but declared.\n\telif what.isspace() or what == "":\n\t\tsay = "Fine. Be that way!"\n\t#Catchall\n\telse:\n\t\tsay = "Whatever."\n\treturn say	\N	\N	0	1	172	bob.py	2015-09-18 07:01:28	2015-09-18 07:01:28	{"bob.py":"#\\n# Skeleton file for the Python \\"Bob\\" exercise.\\n#\\ndef hey(what):\\n\\t#I checked for upercase first since it had the most cases.\\n\\tif what.isupper():\\n\\t\\tsay = \\"Whoa, chill out!\\"\\n\\t#I originally check for a ? anywhere in the string, but I guess that doesn't count, seems ambiguous.\\n\\telif what.endswith(\\"?\\"):\\n\\t\\tsay = \\"Sure.\\"\\n\\t#I checked this last since it has the most complexity. ispace checks for whitespace characters, while \\"\\" takes in strings that are empty, but declared.\\n\\telif what.isspace() or what == \\"\\":\\n\\t\\tsay = \\"Fine. Be that way!\\"\\n\\t#Catchall\\n\\telse:\\n\\t\\tsay = \\"Whatever.\\"\\n\\treturn say"}
266	30	8acc9a6824753e3dcea2abf7	superseded	ruby	saddle-points	class Matrix\r\n  def initialize(m)\r\n    @matrix = m.split("\\n").map { |x| x.scan(/\\d+/).map(&:to_i) }\r\n  end\r\n\r\n  def rows\r\n    @matrix\r\n  end\r\n\r\n  def columns\r\n    @matrix.transpose\r\n  end\r\n\r\n  def saddle_points\r\n    points = []\r\n    rows.each_with_index do |row, i|\r\n      row.each_with_index do |item, j|\r\n        if item == row.max and columns[j][i] == columns[j].min\r\n          points << [i, j]\r\n        end\r\n      end\r\n    end\r\n    points\r\n  end\r\nend\r	\N	\N	0	1	173	matrix.rb	2015-09-17 18:39:44	2015-09-17 18:39:44	{"matrix.rb":"class Matrix\\r\\n  def initialize(m)\\r\\n    @matrix = m.split(\\"\\\\n\\").map { |x| x.scan(/\\\\d+/).map(\\u0026:to_i) }\\r\\n  end\\r\\n\\r\\n  def rows\\r\\n    @matrix\\r\\n  end\\r\\n\\r\\n  def columns\\r\\n    @matrix.transpose\\r\\n  end\\r\\n\\r\\n  def saddle_points\\r\\n    points = []\\r\\n    rows.each_with_index do |row, i|\\r\\n      row.each_with_index do |item, j|\\r\\n        if item == row.max and columns[j][i] == columns[j].min\\r\\n          points \\u003c\\u003c [i, j]\\r\\n        end\\r\\n      end\\r\\n    end\\r\\n    points\\r\\n  end\\r\\nend\\r"}
267	30	33dfbe20c75e3911a8a0ac5e	pending	ruby	saddle-points	class Matrix\r\n  def initialize(m)\r\n    @matrix = m.split("\\n").map { |x| x.scan(/\\d+/).map(&:to_i) }\r\n  end\r\n\r\n  def rows\r\n    @matrix\r\n  end\r\n\r\n  def columns\r\n    @matrix.transpose\r\n  end\r\n\r\n  def saddle_points\r\n    points = []\r\n    rows.each_with_index do |row, i|\r\n      row.each_with_index do |item, j|\r\n        if item == row.max and item == columns[j].min\r\n          points << [i, j]\r\n        end\r\n      end\r\n    end\r\n    points\r\n  end\r\nend\r	\N	\N	0	2	173	matrix.rb	2015-09-18 21:03:52	2015-09-18 21:03:52	{"matrix.rb":"class Matrix\\r\\n  def initialize(m)\\r\\n    @matrix = m.split(\\"\\\\n\\").map { |x| x.scan(/\\\\d+/).map(\\u0026:to_i) }\\r\\n  end\\r\\n\\r\\n  def rows\\r\\n    @matrix\\r\\n  end\\r\\n\\r\\n  def columns\\r\\n    @matrix.transpose\\r\\n  end\\r\\n\\r\\n  def saddle_points\\r\\n    points = []\\r\\n    rows.each_with_index do |row, i|\\r\\n      row.each_with_index do |item, j|\\r\\n        if item == row.max and item == columns[j].min\\r\\n          points \\u003c\\u003c [i, j]\\r\\n        end\\r\\n      end\\r\\n    end\\r\\n    points\\r\\n  end\\r\\nend\\r"}
273	35	0b8cdffb64885dcf8addeff5	superseded	fsharp	robot-name	﻿namespace RobotName\r\n\r\ntype RobotName() = \r\n    let random = System.Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\r\n    let randomDigit () = (random.Next() % 10).ToString()\r\n\r\n    let buildName () =\r\n        (seq {0..1} \r\n         |> Seq.map (fun _ -> randomLetter())\r\n         |> String.concat "")\r\n        +\r\n        (seq {0..2}\r\n         |> Seq.map (fun _ -> randomDigit())\r\n         |> String.concat "")\r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	1	178	RobotName.fs	2015-08-05 05:05:43	2015-08-05 05:05:43	{"RobotName.fs":"﻿namespace RobotName\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = System.Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next() % 26].ToString()\\r\\n    let randomDigit () = (random.Next() % 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        (seq {0..1} \\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomLetter())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n        +\\r\\n        (seq {0..2}\\r\\n         |\\u003e Seq.map (fun _ -\\u003e randomDigit())\\r\\n         |\\u003e String.concat \\"\\")\\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
268	30	0359b9d0a0861e6c7c2fafc6	pending	ruby	protein-translation	class Translation\n  PROTEINS = {\n    "Methionine"    => %w(AUG),\n    "Leucine"       => %w(UUA UUG),\n    "Serine"        => %w(UCU UCC UCA UCG),\n    "Cystine"       => %w(UGU UGC),\n    "Tyrosine"      => %w(UAU UAC),\n    "Tryptophan"    => %w(UGG),\n    "Phenylalanine" => %w(UUU UUC),\n    "STOP"          => %w(UAA UAG UGA),\n  }\n\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\n    Array(codons).each {|codon| hash[codon] = protein }\n  end\n\n  class << self\n    def of_codon(str)\n      CODONS.fetch(str){ raise InvalidCodonError }\n    end\n\n    def of_rna(str)\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\n        of_codon(triplet).tap do |protein|\n          return result if protein == "STOP"\n          result << protein\n        end\n      end\n    end\n  end\nend\n\nclass InvalidCodonError < ArgumentError\nend	\N	\N	0	1	174	translation.rb	2015-09-16 17:54:41	2015-09-16 17:54:41	{"translation.rb":"class Translation\\n  PROTEINS = {\\n    \\"Methionine\\"    =\\u003e %w(AUG),\\n    \\"Leucine\\"       =\\u003e %w(UUA UUG),\\n    \\"Serine\\"        =\\u003e %w(UCU UCC UCA UCG),\\n    \\"Cystine\\"       =\\u003e %w(UGU UGC),\\n    \\"Tyrosine\\"      =\\u003e %w(UAU UAC),\\n    \\"Tryptophan\\"    =\\u003e %w(UGG),\\n    \\"Phenylalanine\\" =\\u003e %w(UUU UUC),\\n    \\"STOP\\"          =\\u003e %w(UAA UAG UGA),\\n  }\\n\\n  CODONS = PROTEINS.each_with_object({}) do |(protein, codons), hash|\\n    Array(codons).each {|codon| hash[codon] = protein }\\n  end\\n\\n  class \\u003c\\u003c self\\n    def of_codon(str)\\n      CODONS.fetch(str){ raise InvalidCodonError }\\n    end\\n\\n    def of_rna(str)\\n      str.scan(/.{3}/).each_with_object([]) do |triplet, result|\\n        of_codon(triplet).tap do |protein|\\n          return result if protein == \\"STOP\\"\\n          result \\u003c\\u003c protein\\n        end\\n      end\\n    end\\n  end\\nend\\n\\nclass InvalidCodonError \\u003c ArgumentError\\nend"}
269	30	30f42bad5bd6b6c19db10813	pending	clojure	robot-name	(ns robot-name)\n\n(def characters "ABCDEFGHIJKLMNOPQRSTUVWXYZ")\n\n(def numbers "1234567890")\n\n(defn- rand-n-source [n source]\n  (->> (fn [] (rand-nth source))\n       (repeatedly)\n       (take n)\n       (apply str)))\n\n(defn- generate-id [] \n  (str (rand-n-source 2 characters)\n       (rand-n-source 4 numbers)))\n\n(defn robot []\n  (atom {:name ""}))\n\n(defn robot-name [robot]\n  (if (empty? @robot)\n    (reset! robot (generate-id))\n    @robot))\n\n(defn reset-name [robot]\n  (reset! robot ""))	\N	\N	0	1	175	/clojure/robot-name/robot_name.clj	2015-09-20 10:08:45	2015-09-20 10:08:45	{"/clojure/robot-name/robot_name.clj":"(ns robot-name)\\n\\n(def characters \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\")\\n\\n(def numbers \\"1234567890\\")\\n\\n(defn- rand-n-source [n source]\\n  (-\\u003e\\u003e (fn [] (rand-nth source))\\n       (repeatedly)\\n       (take n)\\n       (apply str)))\\n\\n(defn- generate-id [] \\n  (str (rand-n-source 2 characters)\\n       (rand-n-source 4 numbers)))\\n\\n(defn robot []\\n  (atom {:name \\"\\"}))\\n\\n(defn robot-name [robot]\\n  (if (empty? @robot)\\n    (reset! robot (generate-id))\\n    @robot))\\n\\n(defn reset-name [robot]\\n  (reset! robot \\"\\"))"}
270	35	b26bf1eb57a6ef9c287fccb3	done	javascript	crypto-square	var CryptoSquare = function CryptoSquare(input){ \n\t\t\n\t\tthis.normalizePlaintext = function normalizePlaintext(){\n\t\t\treturn input.toLowerCase().replace(/[^\\w\\d]/g,"");\n\t\t}\n\t\t\n\t\tthis.size = function size(){\n\t\t    return Math.ceil(Math.sqrt(this.normalized.length));\n\t\t}\n\n\t\tthis.plaintextSegments = function plaintextSegments(){\n\t\t\treturn this.separate(this.normalized).split(" ");\n\t\t}\n\n\t\tthis.ciphertext = function ciphertext(){\n\t\t\tvar result = "";\n\t\t\tvar plaintext = this.plaintextSegments();\n\t\t\tvar rows=this.size();\n\t\t\tfor(var i=0;i<rows;i++){\n\t\t\t\tfor(var chunk in plaintext){\n\t\t\t\t\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\t\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\treturn result;\t\n\t\t}\n\n\t\tthis.normalizeCiphertext = function normalizeCiphertext(){\n\t\t\treturn this.separate(this.ciphertext());\t\n\t\t}\n\n\t\tthis.separate = function(text){\n\t\t\tvar expression = new RegExp('.{1,'+this.size()+'}',"g")\n\t\t\treturn text.match(expression).join(" ");\t\n\t\t}\n\n\t\tthis.normalized = this.normalizePlaintext(input);\n}\nmodule.exports = CryptoSquare;	\N	\N	0	2	176	crypto-square.js	2015-08-04 10:19:58	2015-08-04 10:19:58	{"crypto-square.js":"var CryptoSquare = function CryptoSquare(input){ \\n\\t\\t\\n\\t\\tthis.normalizePlaintext = function normalizePlaintext(){\\n\\t\\t\\treturn input.toLowerCase().replace(/[^\\\\w\\\\d]/g,\\"\\");\\n\\t\\t}\\n\\t\\t\\n\\t\\tthis.size = function size(){\\n\\t\\t    return Math.ceil(Math.sqrt(this.normalized.length));\\n\\t\\t}\\n\\n\\t\\tthis.plaintextSegments = function plaintextSegments(){\\n\\t\\t\\treturn this.separate(this.normalized).split(\\" \\");\\n\\t\\t}\\n\\n\\t\\tthis.ciphertext = function ciphertext(){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar plaintext = this.plaintextSegments();\\n\\t\\t\\tvar rows=this.size();\\n\\t\\t\\tfor(var i=0;i\\u003crows;i++){\\n\\t\\t\\t\\tfor(var chunk in plaintext){\\n\\t\\t\\t\\t\\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\t\\n\\t\\t\\treturn result;\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalizeCiphertext = function normalizeCiphertext(){\\n\\t\\t\\treturn this.separate(this.ciphertext());\\t\\n\\t\\t}\\n\\n\\t\\tthis.separate = function(text){\\n\\t\\t\\tvar expression = new RegExp('.{1,'+this.size()+'}',\\"g\\")\\n\\t\\t\\treturn text.match(expression).join(\\" \\");\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalized = this.normalizePlaintext(input);\\n}\\nmodule.exports = CryptoSquare;"}
271	35	126328312d8ffce9f8f4b644	superseded	javascript	crypto-square	var CryptoSquare = function CryptoSquare(input){ \n\t\t\n\t\tthis.normalizePlaintext = function normalizePlaintext(){\n\t\t\treturn input.toLowerCase().replace(/[^\\w\\d]/g,"");\n\t\t}\n\t\t\n\t\tthis.size = function size(){\n\t\t    return Math.ceil(Math.sqrt(this.normalized.length));\n\t\t}\n\n\t\tthis.plaintextSegments = function plaintextSegments(){\n\t\t\treturn this.separate(this.normalized).split(" ");\n\t\t}\n\n\t\tthis.ciphertext = function ciphertext(){\n\t\t\tvar result = "";\n\t\t\tvar plaintext = this.plaintextSegments();\n\t\t\tvar rows=this.size();\n\t\t\tfor(var i=0;i<rows;i++){\n\t\t\t\tfor(var chunk in plaintext){\n\t\t\t\t\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\t\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\treturn result;\t\n\t\t}\n\n\t\tthis.normalizeCiphertext = function normalizeCiphertext(){\n\t\t\treturn this.separate(this.ciphertext());\t\n\t\t}\n\n\t\tthis.separate = function(text){\n\t\t\tvar result = "";\n\t\t\tvar rows = this.size();\n\t\t\ttext.split("").map(function map(letter,index){\n\t\t\t\tresult+=letter;\n\t\t\t\tif((index+1)%rows===0)result+=" ";\n\t\t\t});\n\t\t\treturn result.trim();\n\t\t}\n\n\t\tthis.normalized = this.normalizePlaintext(input);\n}\nmodule.exports = CryptoSquare;	\N	\N	0	1	176	crypto-square.js	2015-08-22 12:31:42	2015-08-22 12:31:42	{"crypto-square.js":"var CryptoSquare = function CryptoSquare(input){ \\n\\t\\t\\n\\t\\tthis.normalizePlaintext = function normalizePlaintext(){\\n\\t\\t\\treturn input.toLowerCase().replace(/[^\\\\w\\\\d]/g,\\"\\");\\n\\t\\t}\\n\\t\\t\\n\\t\\tthis.size = function size(){\\n\\t\\t    return Math.ceil(Math.sqrt(this.normalized.length));\\n\\t\\t}\\n\\n\\t\\tthis.plaintextSegments = function plaintextSegments(){\\n\\t\\t\\treturn this.separate(this.normalized).split(\\" \\");\\n\\t\\t}\\n\\n\\t\\tthis.ciphertext = function ciphertext(){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar plaintext = this.plaintextSegments();\\n\\t\\t\\tvar rows=this.size();\\n\\t\\t\\tfor(var i=0;i\\u003crows;i++){\\n\\t\\t\\t\\tfor(var chunk in plaintext){\\n\\t\\t\\t\\t\\tif(plaintext[chunk][i])result+=plaintext[chunk][i];\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\t\\n\\t\\t\\treturn result;\\t\\n\\t\\t}\\n\\n\\t\\tthis.normalizeCiphertext = function normalizeCiphertext(){\\n\\t\\t\\treturn this.separate(this.ciphertext());\\t\\n\\t\\t}\\n\\n\\t\\tthis.separate = function(text){\\n\\t\\t\\tvar result = \\"\\";\\n\\t\\t\\tvar rows = this.size();\\n\\t\\t\\ttext.split(\\"\\").map(function map(letter,index){\\n\\t\\t\\t\\tresult+=letter;\\n\\t\\t\\t\\tif((index+1)%rows===0)result+=\\" \\";\\n\\t\\t\\t});\\n\\t\\t\\treturn result.trim();\\n\\t\\t}\\n\\n\\t\\tthis.normalized = this.normalizePlaintext(input);\\n}\\nmodule.exports = CryptoSquare;"}
272	35	a3af434d018e6123f907f07c	pending	ruby	hamming	class Hamming \n\n      def Hamming.compute strandA, strandB \n        hamming_distance = 0\n        end_point = strandA.length\n        length_difference = strandA.length - strandB.length\n\n        if length_difference > 0\n            end_point = strandB.length\n        end\n\n        end_point -= 1;\n\n        for i in ( 0..end_point )\n               if strandA[i] != strandB[i]\n                    hamming_distance += 1\n               end\n        end\n\n        return hamming_distance\n\n    end\n\nend	\N	\N	0	1	177	hamming.rb	2015-08-30 16:26:47	2015-08-30 16:26:47	{"hamming.rb":"class Hamming \\n\\n      def Hamming.compute strandA, strandB \\n        hamming_distance = 0\\n        end_point = strandA.length\\n        length_difference = strandA.length - strandB.length\\n\\n        if length_difference \\u003e 0\\n            end_point = strandB.length\\n        end\\n\\n        end_point -= 1;\\n\\n        for i in ( 0..end_point )\\n               if strandA[i] != strandB[i]\\n                    hamming_distance += 1\\n               end\\n        end\\n\\n        return hamming_distance\\n\\n    end\\n\\nend"}
274	35	aa14801a7d843bc80a14f698	done	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\nopen System.Collections.Generic\r\n\r\ntype RobotName() = \r\n    static let usedNames = new List<String>()\r\n\r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let rec buildName () =\r\n        let candidate = \r\n            String.Concat [ randomLetter(); randomLetter(); \r\n                            randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n        if usedNames.Contains(candidate) then \r\n            buildName() \r\n        else \r\n            usedNames.Add(candidate)\r\n            candidate   \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	3	178	RobotName.fs	2015-08-07 13:22:41	2015-08-07 13:22:41	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\nopen System.Collections.Generic\\r\\n\\r\\ntype RobotName() = \\r\\n    static let usedNames = new List\\u003cString\\u003e()\\r\\n\\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let rec buildName () =\\r\\n        let candidate = \\r\\n            String.Concat [ randomLetter(); randomLetter(); \\r\\n                            randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n        if usedNames.Contains(candidate) then \\r\\n            buildName() \\r\\n        else \\r\\n            usedNames.Add(candidate)\\r\\n            candidate   \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
275	35	34356f6651e206070c31991a	superseded	fsharp	robot-name	﻿namespace RobotName\r\nopen System\r\n\r\ntype RobotName() = \r\n    let random = Random()\r\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\r\n    let randomDigit () = random.Next(0, 10).ToString()\r\n\r\n    let buildName () =\r\n        String.Concat [ randomLetter(); randomLetter(); \r\n                        randomDigit();  randomDigit(); randomDigit() ] \r\n\r\n    let mutable name = buildName()\r\n\r\n    member this.Name = name\r\n    member this.Reset() = name <- buildName()	\N	\N	0	2	178	RobotName.fs	2015-08-21 10:11:27	2015-08-21 10:11:27	{"RobotName.fs":"﻿namespace RobotName\\r\\nopen System\\r\\n\\r\\ntype RobotName() = \\r\\n    let random = Random()\\r\\n    let randomLetter () = [|'A'..'Z'|].[random.Next(0, 26)].ToString()\\r\\n    let randomDigit () = random.Next(0, 10).ToString()\\r\\n\\r\\n    let buildName () =\\r\\n        String.Concat [ randomLetter(); randomLetter(); \\r\\n                        randomDigit();  randomDigit(); randomDigit() ] \\r\\n\\r\\n    let mutable name = buildName()\\r\\n\\r\\n    member this.Name = name\\r\\n    member this.Reset() = name \\u003c- buildName()"}
276	14	6d29069fc223980bd4eae0eb	pending	ruby	raindrops	class Raindrops\r\n\r\n  TRANSLATE = {\r\n  \t3 => 'Pling',\r\n    5 => 'Plang',\r\n    7 => 'Plong'\r\n  }\r\n\r\n  def self.convert(number)\r\n    message = ''\r\n\r\n    TRANSLATE.each do |(numb, phrase)|\r\n      message << phrase if number % numb == 0\r\n    end\r\n\r\n    if message.empty? then number.to_s else message end\r\n    \r\n  end\r\nend	\N	\N	0	1	180	raindrops.rb	2015-09-12 11:53:00	2015-09-12 11:53:00	{"raindrops.rb":"class Raindrops\\r\\n\\r\\n  TRANSLATE = {\\r\\n  \\t3 =\\u003e 'Pling',\\r\\n    5 =\\u003e 'Plang',\\r\\n    7 =\\u003e 'Plong'\\r\\n  }\\r\\n\\r\\n  def self.convert(number)\\r\\n    message = ''\\r\\n\\r\\n    TRANSLATE.each do |(numb, phrase)|\\r\\n      message \\u003c\\u003c phrase if number % numb == 0\\r\\n    end\\r\\n\\r\\n    if message.empty? then number.to_s else message end\\r\\n    \\r\\n  end\\r\\nend"}
277	14	769c422ebdb570c97a2aecff	superseded	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule OctalSeq( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readOct' 0\n  where \n    readOct' acc "" = acc `seq` acc\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\n      where\n        toOctVal '0' = 0\n        toOctVal '1' = 1\n        toOctVal '2' = 2\n        toOctVal '3' = 3\n        toOctVal '4' = 4\n        toOctVal '5' = 5\n        toOctVal '6' = 6\n        toOctVal '7' = 7\n        toOctVal  _  = error "invalid digit"\n\nshowOct :: Integral a => a -> String\nshowOct n | n < 0 = ""\n          | n == 0 = "0"\n          | otherwise = octDigitsP "" n\n  where\n    octDigitsP ds 0 = ds `seq` ds\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` 8\n        dc = toOctChar $! d\n        toOctChar 0 = '0'\n        toOctChar 1 = '1'\n        toOctChar 2 = '2'\n        toOctChar 3 = '3'\n        toOctChar 4 = '4'\n        toOctChar 5 = '5'\n        toOctChar 6 = '6'\n        toOctChar 7 = '7'\n        toOctChar _ = error "invalid digit"	\N	\N	0	1	181	OctalSeq.hs	2015-08-25 06:13:58	2015-08-25 06:13:58	{"OctalSeq.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule OctalSeq( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readOct' 0\\n  where \\n    readOct' acc \\"\\" = acc `seq` acc\\n    readOct' acc (d : ds) = acc `seq` readOct' (8*acc + (toOctVal d))  ds\\n      where\\n        toOctVal '0' = 0\\n        toOctVal '1' = 1\\n        toOctVal '2' = 2\\n        toOctVal '3' = 3\\n        toOctVal '4' = 4\\n        toOctVal '5' = 5\\n        toOctVal '6' = 6\\n        toOctVal '7' = 7\\n        toOctVal  _  = error \\"invalid digit\\"\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct n | n \\u003c 0 = \\"\\"\\n          | n == 0 = \\"0\\"\\n          | otherwise = octDigitsP \\"\\" n\\n  where\\n    octDigitsP ds 0 = ds `seq` ds\\n    octDigitsP ds k = dc `seq` ds `seq` octDigitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` 8\\n        dc = toOctChar $! d\\n        toOctChar 0 = '0'\\n        toOctChar 1 = '1'\\n        toOctChar 2 = '2'\\n        toOctChar 3 = '3'\\n        toOctChar 4 = '4'\\n        toOctChar 5 = '5'\\n        toOctChar 6 = '6'\\n        toOctChar 7 = '7'\\n        toOctChar _ = error \\"invalid digit\\""}
278	14	b191867a7959885b36374734	done	haskell	octal	{-# OPTIONS_GHC -Wall  #-}\nmodule Octal( showOct, readOct ) where\n\nreadOct :: Integral a => String -> a\nreadOct = readBase 8\n\nshowOct :: Integral a => a -> String\nshowOct = showBase 8\n\nreadBase :: Integral a => a -> String -> a\nreadBase b s = readBase' 0 s\n  where \n    readBase' acc "" = acc\n    readBase' acc (d : ds) \n        | acc `seq` False = undefined \n        | not (valid b d) = 0\n        | otherwise = readBase' (b*acc + fromChar d) ds\n\nvalid :: Integral b => b -> Char -> Bool\nvalid b c | b <= 10   = c >= '0' && c < bd\n          | otherwise = (c >= '0' && c <= '9') || \n                        (c >= 'A' && c < bdu) ||\n                        (c >= 'a' && c < bd)\n  where \n    bd = fromDigit b\n    bdu = fromDigitC b\n\nfromChar :: Integral a => Char -> a\nfromChar c | c <= '9' = fromBase '0' c\n           | c <= 'Z' = fromBase 'A' c\n           | otherwise = fromBase 'a' c\n  where \n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \n\nshowBase :: Integral a => a -> a -> String\nshowBase b n | b < 1 || n < 0 = ""\n             | n == 0 = "0"\n             | otherwise = digitsP "" n\n  where\n    digitsP ds k | dc `seq` ds `seq` False = undefined\n                 | k == 0 = ds\n                 | otherwise = digitsP (dc : ds) m\n      where \n        (m, d) = k `divMod` b\n        dc = fromDigit $! d\n\ntoBase :: Integral a => Char -> a -> Char\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\n\nfromDigit :: Integral a => a -> Char\nfromDigit d | d <= 9 = toBase '0' d\n            | otherwise = toBase 'a' d\n\nfromDigitC :: Integral a => a -> Char\nfromDigitC d | d <= 9 = toBase '0' d\n             | otherwise = toBase 'A' d	\N	\N	0	2	181	Octal.hs	2015-09-14 02:51:28	2015-09-14 02:51:28	{"Octal.hs":"{-# OPTIONS_GHC -Wall  #-}\\nmodule Octal( showOct, readOct ) where\\n\\nreadOct :: Integral a =\\u003e String -\\u003e a\\nreadOct = readBase 8\\n\\nshowOct :: Integral a =\\u003e a -\\u003e String\\nshowOct = showBase 8\\n\\nreadBase :: Integral a =\\u003e a -\\u003e String -\\u003e a\\nreadBase b s = readBase' 0 s\\n  where \\n    readBase' acc \\"\\" = acc\\n    readBase' acc (d : ds) \\n        | acc `seq` False = undefined \\n        | not (valid b d) = 0\\n        | otherwise = readBase' (b*acc + fromChar d) ds\\n\\nvalid :: Integral b =\\u003e b -\\u003e Char -\\u003e Bool\\nvalid b c | b \\u003c= 10   = c \\u003e= '0' \\u0026\\u0026 c \\u003c bd\\n          | otherwise = (c \\u003e= '0' \\u0026\\u0026 c \\u003c= '9') || \\n                        (c \\u003e= 'A' \\u0026\\u0026 c \\u003c bdu) ||\\n                        (c \\u003e= 'a' \\u0026\\u0026 c \\u003c bd)\\n  where \\n    bd = fromDigit b\\n    bdu = fromDigitC b\\n\\nfromChar :: Integral a =\\u003e Char -\\u003e a\\nfromChar c | c \\u003c= '9' = fromBase '0' c\\n           | c \\u003c= 'Z' = fromBase 'A' c\\n           | otherwise = fromBase 'a' c\\n  where \\n    fromBase b = fromIntegral . subtract (fromEnum b) . fromEnum \\n\\nshowBase :: Integral a =\\u003e a -\\u003e a -\\u003e String\\nshowBase b n | b \\u003c 1 || n \\u003c 0 = \\"\\"\\n             | n == 0 = \\"0\\"\\n             | otherwise = digitsP \\"\\" n\\n  where\\n    digitsP ds k | dc `seq` ds `seq` False = undefined\\n                 | k == 0 = ds\\n                 | otherwise = digitsP (dc : ds) m\\n      where \\n        (m, d) = k `divMod` b\\n        dc = fromDigit $! d\\n\\ntoBase :: Integral a =\\u003e Char -\\u003e a -\\u003e Char\\ntoBase b = toEnum . (+ fromEnum b) . fromIntegral\\n\\nfromDigit :: Integral a =\\u003e a -\\u003e Char\\nfromDigit d | d \\u003c= 9 = toBase '0' d\\n            | otherwise = toBase 'a' d\\n\\nfromDigitC :: Integral a =\\u003e a -\\u003e Char\\nfromDigitC d | d \\u003c= 9 = toBase '0' d\\n             | otherwise = toBase 'A' d"}
304	16	0074741ad895889be2a1747a	pending	haskell	strain	module Strain (keep, discard) where\n\nkeep :: (a -> Bool) -> [a] -> [a]\nkeep _ [] = []\nkeep predicate (x:xs)\n    | predicate x = x : keep predicate xs\n    | otherwise   = keep predicate xs\n\ndiscard :: (a -> Bool) -> [a] -> [a]\ndiscard _ [] = []\ndiscard predicate (x:xs)\n    | predicate x = discard predicate xs\n    | otherwise   = x : discard predicate xs	\N	\N	0	1	200	Strain.hs	2015-05-09 05:49:38	2015-05-09 05:49:38	{"Strain.hs":"module Strain (keep, discard) where\\n\\nkeep :: (a -\\u003e Bool) -\\u003e [a] -\\u003e [a]\\nkeep _ [] = []\\nkeep predicate (x:xs)\\n    | predicate x = x : keep predicate xs\\n    | otherwise   = keep predicate xs\\n\\ndiscard :: (a -\\u003e Bool) -\\u003e [a] -\\u003e [a]\\ndiscard _ [] = []\\ndiscard predicate (x:xs)\\n    | predicate x = discard predicate xs\\n    | otherwise   = x : discard predicate xs"}
279	41	1f78b4adcd485f39c8f8aa17	pending	python	kindergarten-garden	# William Morris\r\n# exercism.io\r\n# garden.py\r\n\r\nclass Garden:\r\n\r\n    def __init__(self, rows, students =['Alice', 'Bob', 'Charlie', 'David', 'Eve',\r\n                                        'Fred', 'Ginny', 'Harriet', 'Ileana',\r\n                                        'Joseph', 'Kincaid', 'Larry'] ):\r\n        \r\n        self.names = students\r\n        self.names.sort()\r\n        self.seeds ={'G':'Grass','C':'Clover','R':'Radishes','V':'Violets'}\r\n        self.rows = rows.split()\r\n        name_index = 0\r\n        self.students_cups = {}\r\n        for cups in range(0,len(self.rows[0]),2):\r\n            cups_first_row = self.rows[0][cups:cups+2]\r\n            cups_second_row = self.rows[1][cups:cups+2]\r\n            self.students_cups[self.names[name_index]]=cups_first_row + cups_second_row\r\n            name_index += 1\r\n        self.students_plants = {}\r\n        for name in self.students_cups.keys():\r\n            self.students_plants[name] =  [self.seeds[seed] for seed in\r\n                                          self.students_cups[name]]\r\n            \r\n    def plants(self,name):\r\n        return self.students_plants[name]\r\n    \r	\N	\N	0	1	182	garden.py	2015-04-13 02:30:52	2015-04-13 02:30:52	{"garden.py":"# William Morris\\r\\n# exercism.io\\r\\n# garden.py\\r\\n\\r\\nclass Garden:\\r\\n\\r\\n    def __init__(self, rows, students =['Alice', 'Bob', 'Charlie', 'David', 'Eve',\\r\\n                                        'Fred', 'Ginny', 'Harriet', 'Ileana',\\r\\n                                        'Joseph', 'Kincaid', 'Larry'] ):\\r\\n        \\r\\n        self.names = students\\r\\n        self.names.sort()\\r\\n        self.seeds ={'G':'Grass','C':'Clover','R':'Radishes','V':'Violets'}\\r\\n        self.rows = rows.split()\\r\\n        name_index = 0\\r\\n        self.students_cups = {}\\r\\n        for cups in range(0,len(self.rows[0]),2):\\r\\n            cups_first_row = self.rows[0][cups:cups+2]\\r\\n            cups_second_row = self.rows[1][cups:cups+2]\\r\\n            self.students_cups[self.names[name_index]]=cups_first_row + cups_second_row\\r\\n            name_index += 1\\r\\n        self.students_plants = {}\\r\\n        for name in self.students_cups.keys():\\r\\n            self.students_plants[name] =  [self.seeds[seed] for seed in\\r\\n                                          self.students_cups[name]]\\r\\n            \\r\\n    def plants(self,name):\\r\\n        return self.students_plants[name]\\r\\n    \\r"}
280	41	3ca6663dc3e677280c6af4cf	done	ruby	say	class Say\n\n  N_TO_WORDS = {\n    0 => { teen: "ten" },\n    1 => { normal: "one", teen: "ten", ty: "eleven" },\n    2 => { normal: "two", teen: "twleve", ty: "twenty" },\n    3 => { normal: "three", teen: "thirteen", ty: "thirty" },\n    4 => { normal: "four", teen: "fourteen", ty: "forty" },\n    5 => { normal: "five", teen: "fifteen", ty: "fifty" },\n    6 => { normal: "six", teen: "sixteen", ty: "sixty" },\n    7 => { normal: "seven", teen: "seventeen", ty: "seventy" },\n    8 => { normal: "eight", teen: "eighteen", ty: "eighty" },\n    9 => { normal: "nine", teen: "nineteen", ty: "ninety" }\n  }\n\n  MAGNITUDE_WORD = {\n    1_000_000_000_000 => :trillion,\n    1_000_000_000     => :billion,\n    1_000_000         => :million,\n    1_000             => :thousand\n  }\n\n  def initialize(n)\n    @n = n\n  end\n\n  def in_english\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\n    return "zero" if @n.zero?\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\n      q, r = result[:value].divmod(magnitude)\n      result[:words] << "#{meta_words(q)} #{name}" if q > 0\n      result.merge(value: r)\n    end\n    say[:words] << meta_words(say[:value]) unless say[:value].zero?\n    say[:words].join(" ")\n  end\n\n  private\n\n  def meta_words(n)\n    "#{hundred(n)} #{below_hundred(n.modulo(100))}".strip\n  end\n\n  def hundred(n)\n    q, r = n.divmod(100)\n    q.zero? ? nil : "#{N_TO_WORDS[q][:normal]} hundred"\n  end\n\n  def below_hundred(n)\n    q, r = n.divmod(10)\n    ty_word = N_TO_WORDS[q][:ty] if q > 1\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\n    [ty_word, teen_word].compact.join("-")\n  end\nend	\N	\N	0	1	183	/ruby/say/say.rb	2015-03-14 22:07:05	2015-03-14 22:07:05	{"/ruby/say/say.rb":"class Say\\n\\n  N_TO_WORDS = {\\n    0 =\\u003e { teen: \\"ten\\" },\\n    1 =\\u003e { normal: \\"one\\", teen: \\"ten\\", ty: \\"eleven\\" },\\n    2 =\\u003e { normal: \\"two\\", teen: \\"twleve\\", ty: \\"twenty\\" },\\n    3 =\\u003e { normal: \\"three\\", teen: \\"thirteen\\", ty: \\"thirty\\" },\\n    4 =\\u003e { normal: \\"four\\", teen: \\"fourteen\\", ty: \\"forty\\" },\\n    5 =\\u003e { normal: \\"five\\", teen: \\"fifteen\\", ty: \\"fifty\\" },\\n    6 =\\u003e { normal: \\"six\\", teen: \\"sixteen\\", ty: \\"sixty\\" },\\n    7 =\\u003e { normal: \\"seven\\", teen: \\"seventeen\\", ty: \\"seventy\\" },\\n    8 =\\u003e { normal: \\"eight\\", teen: \\"eighteen\\", ty: \\"eighty\\" },\\n    9 =\\u003e { normal: \\"nine\\", teen: \\"nineteen\\", ty: \\"ninety\\" }\\n  }\\n\\n  MAGNITUDE_WORD = {\\n    1_000_000_000_000 =\\u003e :trillion,\\n    1_000_000_000     =\\u003e :billion,\\n    1_000_000         =\\u003e :million,\\n    1_000             =\\u003e :thousand\\n  }\\n\\n  def initialize(n)\\n    @n = n\\n  end\\n\\n  def in_english\\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\\n    return \\"zero\\" if @n.zero?\\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\\n      q, r = result[:value].divmod(magnitude)\\n      result[:words] \\u003c\\u003c \\"#{meta_words(q)} #{name}\\" if q \\u003e 0\\n      result.merge(value: r)\\n    end\\n    say[:words] \\u003c\\u003c meta_words(say[:value]) unless say[:value].zero?\\n    say[:words].join(\\" \\")\\n  end\\n\\n  private\\n\\n  def meta_words(n)\\n    \\"#{hundred(n)} #{below_hundred(n.modulo(100))}\\".strip\\n  end\\n\\n  def hundred(n)\\n    q, r = n.divmod(100)\\n    q.zero? ? nil : \\"#{N_TO_WORDS[q][:normal]} hundred\\"\\n  end\\n\\n  def below_hundred(n)\\n    q, r = n.divmod(10)\\n    ty_word = N_TO_WORDS[q][:ty] if q \\u003e 1\\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\\n    [ty_word, teen_word].compact.join(\\"-\\")\\n  end\\nend"}
281	41	95cf737f5d1151b7f070dd01	pending	csharp	raindrops	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\n\r\n    class Raindrops\r\n    {\r\n\r\n        \r\n        public Raindrops() { }\r\n\r\n        public static string Convert(int rainValue)\r\n        {\r\n            var primeList = primeFactorsGetter(rainValue);\r\n            if(PlingPlangPlongString(primeList).Length > 0) return PlingPlangPlongString(primeList);\r\n            return rainValue.ToString();\r\n            \r\n        }\r\n\r\n        public static List<string> primeFactorsGetter(long value)\r\n        {\r\n            var resultsList = new List<string>();\r\n            for (int i = 2; i <= value; i++)\r\n            {\r\n                while (value % i == 0)\r\n                {\r\n                    resultsList.Add(i.ToString());\r\n                    value /= i;\r\n                }\r\n            }            \r\n            return resultsList;\r\n        }\r\n\r\n        public static string PlingPlangPlongString(List<string> listOfPrimeFactors)\r\n        {\r\n            var resultString = new StringBuilder();\r\n\r\n            if (listOfPrimeFactors.Contains("3")) resultString.Append("Pling");\r\n            if (listOfPrimeFactors.Contains("5")) resultString.Append("Plang");\r\n            if (listOfPrimeFactors.Contains("7")) resultString.Append("Plong");           \r\n\r\n            return resultString.ToString();\r\n        }\r\n    }	\N	\N	0	1	184	\\csharp\\raindrops\\Raindrops.cs	2015-04-18 08:24:10	2015-04-18 08:24:10	{"\\\\csharp\\\\raindrops\\\\Raindrops.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nusing System.Text;\\r\\n\\r\\n\\r\\n    class Raindrops\\r\\n    {\\r\\n\\r\\n        \\r\\n        public Raindrops() { }\\r\\n\\r\\n        public static string Convert(int rainValue)\\r\\n        {\\r\\n            var primeList = primeFactorsGetter(rainValue);\\r\\n            if(PlingPlangPlongString(primeList).Length \\u003e 0) return PlingPlangPlongString(primeList);\\r\\n            return rainValue.ToString();\\r\\n            \\r\\n        }\\r\\n\\r\\n        public static List\\u003cstring\\u003e primeFactorsGetter(long value)\\r\\n        {\\r\\n            var resultsList = new List\\u003cstring\\u003e();\\r\\n            for (int i = 2; i \\u003c= value; i++)\\r\\n            {\\r\\n                while (value % i == 0)\\r\\n                {\\r\\n                    resultsList.Add(i.ToString());\\r\\n                    value /= i;\\r\\n                }\\r\\n            }            \\r\\n            return resultsList;\\r\\n        }\\r\\n\\r\\n        public static string PlingPlangPlongString(List\\u003cstring\\u003e listOfPrimeFactors)\\r\\n        {\\r\\n            var resultString = new StringBuilder();\\r\\n\\r\\n            if (listOfPrimeFactors.Contains(\\"3\\")) resultString.Append(\\"Pling\\");\\r\\n            if (listOfPrimeFactors.Contains(\\"5\\")) resultString.Append(\\"Plang\\");\\r\\n            if (listOfPrimeFactors.Contains(\\"7\\")) resultString.Append(\\"Plong\\");           \\r\\n\\r\\n            return resultString.ToString();\\r\\n        }\\r\\n    }"}
282	41	b16248e359eba5abdbadf14f	pending	python	meetup	import calendar\nimport datetime\n\ndesc_commands = {\n\t'1st':0,\n\t'2nd':1,\n\t'3rd':2,\n\t'4th':3,\n\t'last':-1\n}\n\ndef meetup_day(year, month, dayofweek, desc):\n\tteenth = [13,14,15,16,17,18,19]\n\tweekdays = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\n\tdaysofmonth = calendar.monthcalendar(year,month)\n\tdates = []\n\tfor week in daysofmonth:\n\t\tfor day in week:\n\t\t\tif day != 0:\n\t\t\t\tdates.append(day)\n\tcollect = []\n\tfor day in dates:\n\t\tdate = datetime.date(year, month, day)\n\t\tif dayofweek == weekdays[date.isoweekday()-1]:\n\t\t\tcollect.append(date)\n\tif desc in desc_commands:\n\t\tindex = desc_commands[desc]\n\t\treturn collect[index]\n\tif desc == 'teenth':\n\t\tfor day in collect:\n\t\t\tif day.day in teenth:\n\t\t\t\treturn day	\N	\N	0	1	185	meetup.py	2015-06-23 18:21:19	2015-06-23 18:21:19	{"meetup.py":"import calendar\\nimport datetime\\n\\ndesc_commands = {\\n\\t'1st':0,\\n\\t'2nd':1,\\n\\t'3rd':2,\\n\\t'4th':3,\\n\\t'last':-1\\n}\\n\\ndef meetup_day(year, month, dayofweek, desc):\\n\\tteenth = [13,14,15,16,17,18,19]\\n\\tweekdays = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\\n\\tdaysofmonth = calendar.monthcalendar(year,month)\\n\\tdates = []\\n\\tfor week in daysofmonth:\\n\\t\\tfor day in week:\\n\\t\\t\\tif day != 0:\\n\\t\\t\\t\\tdates.append(day)\\n\\tcollect = []\\n\\tfor day in dates:\\n\\t\\tdate = datetime.date(year, month, day)\\n\\t\\tif dayofweek == weekdays[date.isoweekday()-1]:\\n\\t\\t\\tcollect.append(date)\\n\\tif desc in desc_commands:\\n\\t\\tindex = desc_commands[desc]\\n\\t\\treturn collect[index]\\n\\tif desc == 'teenth':\\n\\t\\tfor day in collect:\\n\\t\\t\\tif day.day in teenth:\\n\\t\\t\\t\\treturn day"}
283	41	82992248b18b712dc41bbcd2	superseded	ruby	bob	class Bob\n  def hey(phrase)\n    if phrase.strip.empty?\n      'Fine. Be that way!'\n    elsif phrase == phrase.upcase && phrase.scan(/[a-zA-Z]/).any?\n      'Woah, chill out!'\n    elsif phrase[-1,1] == '?'\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\nend	\N	\N	0	1	186	bob.rb	2015-02-14 21:03:54	2015-02-14 21:03:54	{"bob.rb":"class Bob\\n  def hey(phrase)\\n    if phrase.strip.empty?\\n      'Fine. Be that way!'\\n    elsif phrase == phrase.upcase \\u0026\\u0026 phrase.scan(/[a-zA-Z]/).any?\\n      'Woah, chill out!'\\n    elsif phrase[-1,1] == '?'\\n      'Sure.'\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\nend"}
284	41	586b1dffd03627ebac85a81a	pending	ruby	bob	class Bob\n  def hey(phrase)\n    @phrase = phrase\n    if phrase_is_empty?\n      'Fine. Be that way!'\n    elsif phrase_is_yelling?\n      'Woah, chill out!'\n    elsif phrase_is_questioning?\n      'Sure.'\n    else\n      "Whatever."\n    end\n  end\n\n  private\n  def phrase_is_empty?\n    @phrase.strip.empty?\n  end\n\n  def phrase_is_yelling?\n    @phrase == @phrase.upcase && @phrase.scan(/[a-zA-Z]/).any?\n  end\n\n  def phrase_is_questioning?\n    @phrase[-1,1] == '?'\n  end\nend	\N	\N	0	2	186	bob.rb	2015-04-25 10:15:20	2015-04-25 10:15:20	{"bob.rb":"class Bob\\n  def hey(phrase)\\n    @phrase = phrase\\n    if phrase_is_empty?\\n      'Fine. Be that way!'\\n    elsif phrase_is_yelling?\\n      'Woah, chill out!'\\n    elsif phrase_is_questioning?\\n      'Sure.'\\n    else\\n      \\"Whatever.\\"\\n    end\\n  end\\n\\n  private\\n  def phrase_is_empty?\\n    @phrase.strip.empty?\\n  end\\n\\n  def phrase_is_yelling?\\n    @phrase == @phrase.upcase \\u0026\\u0026 @phrase.scan(/[a-zA-Z]/).any?\\n  end\\n\\n  def phrase_is_questioning?\\n    @phrase[-1,1] == '?'\\n  end\\nend"}
285	41	5184de4698f54500c9d78f67	superseded	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nsub new{\n\tmy ($class, $key) = @_;\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-z]//g;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = abs ord($key[$_]) - ord('a');\n\t\t$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	1	187	Cipher.pm	2015-03-17 07:00:53	2015-03-17 07:00:53	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-z]//g;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = abs ord($key[$_]) - ord('a');\\n\\t\\t$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
286	41	3b64e92685ec57f52de7cb62	done	perl5	simple-cipher	package Cipher;\nuse strict;\nuse warnings;\n\nmy @words = 'a'..'z';\n\nsub new{\n\tmy ($class, $key) = @_;\n\tdie "ArgumentError: $key" if defined $key and ($key =~ /[^a-z]/ or not length $key);\n\treturn bless { key => $key }, $class;\n}\n \nsub encode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @string = split //, $s; \n\tmy @key = split //, $self->{key};\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) + $dist);\n\t}\n\treturn $result;\n}\n\nsub decode{\n\tmy $self = shift;\n\tmy $s = shift;\n\t$s =~ s/[^a-zA-Z]//g;\n\t$s = lc $s;\n\tmy $result = '';\n\n\treturn $s if (!$self->{key});\n\tmy @key = split //, $self->{key};\n\tmy @string = split //, $s;\n\tfor (0..$#key){\n\t\tmy $dist = ord($key[$_]) - ord('a');\n\t\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\n\t\t#$result .= chr(ord($string[$_]) - $dist);\n\t}\n\treturn $result;\n}\n1;	\N	\N	0	2	187	Cipher.pm	2015-06-20 11:31:54	2015-06-20 11:31:54	{"Cipher.pm":"package Cipher;\\nuse strict;\\nuse warnings;\\n\\nmy @words = 'a'..'z';\\n\\nsub new{\\n\\tmy ($class, $key) = @_;\\n\\tdie \\"ArgumentError: $key\\" if defined $key and ($key =~ /[^a-z]/ or not length $key);\\n\\treturn bless { key =\\u003e $key }, $class;\\n}\\n \\nsub encode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @string = split //, $s; \\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) + $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) + $dist);\\n\\t}\\n\\treturn $result;\\n}\\n\\nsub decode{\\n\\tmy $self = shift;\\n\\tmy $s = shift;\\n\\t$s =~ s/[^a-zA-Z]//g;\\n\\t$s = lc $s;\\n\\tmy $result = '';\\n\\n\\treturn $s if (!$self-\\u003e{key});\\n\\tmy @key = split //, $self-\\u003e{key};\\n\\tmy @string = split //, $s;\\n\\tfor (0..$#key){\\n\\t\\tmy $dist = ord($key[$_]) - ord('a');\\n\\t\\t$result .= $words[ (ord($string[$_]) - $dist - 97) % 26 ];\\n\\t\\t#$result .= chr(ord($string[$_]) - $dist);\\n\\t}\\n\\treturn $result;\\n}\\n1;"}
287	6	1a1e863c34e132223986b72c	pending	ruby	hamming	class Hamming\n\n  def self.compute firstStrand, secondStrand\n    size = [firstStrand.size, secondStrand.size].min\n    distance = 0\n    (0...size).each {|i|\n      distance = distance + 1 if firstStrand[i] != secondStrand[i]\n    }\n    distance\n  end\n\nend\n\nputs Hamming.compute('AA', 'ABA')	\N	\N	0	1	188	hamming.rb	2015-07-16 22:49:26	2015-07-16 22:49:26	{"hamming.rb":"class Hamming\\n\\n  def self.compute firstStrand, secondStrand\\n    size = [firstStrand.size, secondStrand.size].min\\n    distance = 0\\n    (0...size).each {|i|\\n      distance = distance + 1 if firstStrand[i] != secondStrand[i]\\n    }\\n    distance\\n  end\\n\\nend\\n\\nputs Hamming.compute('AA', 'ABA')"}
288	6	6636b0fcd84d2e2e06283073	pending	haskell	leap	module LeapYear (isLeapYear, isLeapYear2) where\n\nisLeapYear :: Int -> Bool\nisLeapYear year\n    | year `mod` 100 == 0 && year `mod` 400 /= 0  = False\n    | year `mod` 4 == 0  =  True\n    | otherwise = False\n\nisLeapYear2 :: Int -> Bool\nisLeapYear2 year\n    | year `mod` 4 /= 0  = False\n    | year `mod` 100 == 0 && year `mod` 400 /= 0 = False\n    | otherwise = True	\N	\N	0	1	189	haskell/leap/leapyear.hs	2015-08-14 11:02:44	2015-08-14 11:02:44	{"haskell/leap/leapyear.hs":"module LeapYear (isLeapYear, isLeapYear2) where\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear year\\n    | year `mod` 100 == 0 \\u0026\\u0026 year `mod` 400 /= 0  = False\\n    | year `mod` 4 == 0  =  True\\n    | otherwise = False\\n\\nisLeapYear2 :: Int -\\u003e Bool\\nisLeapYear2 year\\n    | year `mod` 4 /= 0  = False\\n    | year `mod` 100 == 0 \\u0026\\u0026 year `mod` 400 /= 0 = False\\n    | otherwise = True"}
289	6	37e7d9a855474bd86010c91f	pending	haskell	simple-linked-list	module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\r\n\r\ndata List a = EmptyList | ListElement a (List a) \r\n\tderiving (Show)\r\n\r\nnil :: List a\r\nnil = EmptyList\r\n\r\nisNil :: List a -> Bool\r\nisNil EmptyList = True\r\nisNil _         = False\r\n\r\nnew :: a -> List a -> List a\r\nnew = ListElement\r\n\r\ndatum :: List a -> a\r\ndatum EmptyList = undefined\r\ndatum (ListElement x _) = x\r\n\r\nnext :: List a -> List a\r\nnext EmptyList = undefined\r\nnext (ListElement _ xs) = xs\r\n\r\nfromList :: [a] -> List a\r\nfromList = foldr new EmptyList\r\n\r\nfoldrList :: (a -> b -> b) -> b -> List a -> b\r\nfoldrList _ z EmptyList = z\r\nfoldrList f z (ListElement x xs) = x `f` foldrList f z xs\r\n\r\nfoldlList :: (b -> a -> b) -> b -> List a -> b\r\nfoldlList _ z EmptyList = z\r\nfoldlList f z (ListElement x xs) = let z' = z `f` x\r\n                                in seq z' $ foldlList f z' xs  \r\n\r\ntoList :: List a -> [a]\r\ntoList = foldrList (:) []\r\n\r\nreverseLinkedList :: List a -> List a\r\nreverseLinkedList = foldlList (flip new) EmptyList	\N	\N	0	2	190	LinkedList.hs	2015-04-10 22:07:45	2015-04-10 22:07:45	{"LinkedList.hs":"module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\\r\\n\\r\\ndata List a = EmptyList | ListElement a (List a) \\r\\n\\tderiving (Show)\\r\\n\\r\\nnil :: List a\\r\\nnil = EmptyList\\r\\n\\r\\nisNil :: List a -\\u003e Bool\\r\\nisNil EmptyList = True\\r\\nisNil _         = False\\r\\n\\r\\nnew :: a -\\u003e List a -\\u003e List a\\r\\nnew = ListElement\\r\\n\\r\\ndatum :: List a -\\u003e a\\r\\ndatum EmptyList = undefined\\r\\ndatum (ListElement x _) = x\\r\\n\\r\\nnext :: List a -\\u003e List a\\r\\nnext EmptyList = undefined\\r\\nnext (ListElement _ xs) = xs\\r\\n\\r\\nfromList :: [a] -\\u003e List a\\r\\nfromList = foldr new EmptyList\\r\\n\\r\\nfoldrList :: (a -\\u003e b -\\u003e b) -\\u003e b -\\u003e List a -\\u003e b\\r\\nfoldrList _ z EmptyList = z\\r\\nfoldrList f z (ListElement x xs) = x `f` foldrList f z xs\\r\\n\\r\\nfoldlList :: (b -\\u003e a -\\u003e b) -\\u003e b -\\u003e List a -\\u003e b\\r\\nfoldlList _ z EmptyList = z\\r\\nfoldlList f z (ListElement x xs) = let z' = z `f` x\\r\\n                                in seq z' $ foldlList f z' xs  \\r\\n\\r\\ntoList :: List a -\\u003e [a]\\r\\ntoList = foldrList (:) []\\r\\n\\r\\nreverseLinkedList :: List a -\\u003e List a\\r\\nreverseLinkedList = foldlList (flip new) EmptyList"}
290	6	7e565c0e8230f0ad5398dc24	superseded	haskell	simple-linked-list	module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\r\n\r\ndata List a = EmptyList | ListElement a (List a) \r\n\r\nnil :: List a\r\nnil = EmptyList\r\n\r\nisNil :: List a -> Bool\r\nisNil EmptyList = True\r\nisNil _         = False\r\n\r\nnew :: a -> List a -> List a\r\nnew x xs = ListElement x (xs)\r\n\r\ndatum :: List a -> a\r\ndatum (ListElement x _) = x\r\n\r\nnext :: List a -> List a\r\nnext EmptyList = EmptyList\r\nnext (ListElement _ xs) = xs\r\n\r\nfromList :: [a] -> List a\r\nfromList []     = EmptyList\r\nfromList (x:xs) = new x $ fromList xs\r\n\r\ntoList :: List a -> [a]\r\ntoList EmptyList = []\r\ntoList (ListElement x xs) = x : toList xs\r\n\r\n(+++) :: List a -> a -> List a\r\n(+++) EmptyList y = new y EmptyList\r\n(+++) (ListElement x xs) y = new x $ xs +++ y\r\n\r\nreverseLinkedList :: List a -> List a\r\nreverseLinkedList EmptyList = EmptyList\r\nreverseLinkedList (ListElement x xs) = reverseLinkedList xs +++ x	\N	\N	0	1	190	LinkedList.hs	2015-07-23 00:42:49	2015-07-23 00:42:49	{"LinkedList.hs":"module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\\r\\n\\r\\ndata List a = EmptyList | ListElement a (List a) \\r\\n\\r\\nnil :: List a\\r\\nnil = EmptyList\\r\\n\\r\\nisNil :: List a -\\u003e Bool\\r\\nisNil EmptyList = True\\r\\nisNil _         = False\\r\\n\\r\\nnew :: a -\\u003e List a -\\u003e List a\\r\\nnew x xs = ListElement x (xs)\\r\\n\\r\\ndatum :: List a -\\u003e a\\r\\ndatum (ListElement x _) = x\\r\\n\\r\\nnext :: List a -\\u003e List a\\r\\nnext EmptyList = EmptyList\\r\\nnext (ListElement _ xs) = xs\\r\\n\\r\\nfromList :: [a] -\\u003e List a\\r\\nfromList []     = EmptyList\\r\\nfromList (x:xs) = new x $ fromList xs\\r\\n\\r\\ntoList :: List a -\\u003e [a]\\r\\ntoList EmptyList = []\\r\\ntoList (ListElement x xs) = x : toList xs\\r\\n\\r\\n(+++) :: List a -\\u003e a -\\u003e List a\\r\\n(+++) EmptyList y = new y EmptyList\\r\\n(+++) (ListElement x xs) y = new x $ xs +++ y\\r\\n\\r\\nreverseLinkedList :: List a -\\u003e List a\\r\\nreverseLinkedList EmptyList = EmptyList\\r\\nreverseLinkedList (ListElement x xs) = reverseLinkedList xs +++ x"}
291	6	9384deac6c7816ba00cfab96	done	javascript	sieve	var Sieve = function(num) {\n  this.num = num;\n  this.primes = [];\n\n  var isPrime = function(n) {\n    var mid = Math.floor( n / 2 );\n\n    for ( var i = 2; i <= mid; i++ ) {\n      if ( n % i === 0 ) {\n        return false\n      }\n    }\n    return true;\n  }\n\n  for ( var i = 2; i <= this.num; i++ ) {\n    if ( isPrime(i) ) {\n      this.primes.push(i);\n    }\n  }\n};	\N	\N	0	1	191	sieve_test.js	2015-05-22 20:44:13	2015-05-22 20:44:13	{"sieve_test.js":"var Sieve = function(num) {\\n  this.num = num;\\n  this.primes = [];\\n\\n  var isPrime = function(n) {\\n    var mid = Math.floor( n / 2 );\\n\\n    for ( var i = 2; i \\u003c= mid; i++ ) {\\n      if ( n % i === 0 ) {\\n        return false\\n      }\\n    }\\n    return true;\\n  }\\n\\n  for ( var i = 2; i \\u003c= this.num; i++ ) {\\n    if ( isPrime(i) ) {\\n      this.primes.push(i);\\n    }\\n  }\\n};"}
292	34	9a0977fda7559b6938918240	pending	haskell	simple-linked-list	module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\r\n\r\ndata List a = EmptyList | ListElement a (List a) \r\n\tderiving (Show)\r\n\r\nnil :: List a\r\nnil = EmptyList\r\n\r\nisNil :: List a -> Bool\r\nisNil EmptyList = True\r\nisNil _         = False\r\n\r\nnew :: a -> List a -> List a\r\nnew = ListElement\r\n\r\ndatum :: List a -> a\r\ndatum EmptyList = undefined\r\ndatum (ListElement x _) = x\r\n\r\nnext :: List a -> List a\r\nnext EmptyList = undefined\r\nnext (ListElement _ xs) = xs\r\n\r\nfromList :: [a] -> List a\r\nfromList = foldr new EmptyList\r\n\r\nfoldrList :: (a -> b -> b) -> b -> List a -> b\r\nfoldrList _ z EmptyList = z\r\nfoldrList f z (ListElement x xs) = x `f` foldrList f z xs\r\n\r\nfoldlList :: (b -> a -> b) -> b -> List a -> b\r\nfoldlList _ z EmptyList = z\r\nfoldlList f z (ListElement x xs) = let z' = z `f` x\r\n                                in seq z' $ foldlList f z' xs  \r\n\r\ntoList :: List a -> [a]\r\ntoList = foldrList (:) []\r\n\r\nreverseLinkedList :: List a -> List a\r\nreverseLinkedList = foldlList (flip new) EmptyList	\N	\N	0	2	192	LinkedList.hs	2015-06-17 07:53:02	2015-06-17 07:53:02	{"LinkedList.hs":"module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\\r\\n\\r\\ndata List a = EmptyList | ListElement a (List a) \\r\\n\\tderiving (Show)\\r\\n\\r\\nnil :: List a\\r\\nnil = EmptyList\\r\\n\\r\\nisNil :: List a -\\u003e Bool\\r\\nisNil EmptyList = True\\r\\nisNil _         = False\\r\\n\\r\\nnew :: a -\\u003e List a -\\u003e List a\\r\\nnew = ListElement\\r\\n\\r\\ndatum :: List a -\\u003e a\\r\\ndatum EmptyList = undefined\\r\\ndatum (ListElement x _) = x\\r\\n\\r\\nnext :: List a -\\u003e List a\\r\\nnext EmptyList = undefined\\r\\nnext (ListElement _ xs) = xs\\r\\n\\r\\nfromList :: [a] -\\u003e List a\\r\\nfromList = foldr new EmptyList\\r\\n\\r\\nfoldrList :: (a -\\u003e b -\\u003e b) -\\u003e b -\\u003e List a -\\u003e b\\r\\nfoldrList _ z EmptyList = z\\r\\nfoldrList f z (ListElement x xs) = x `f` foldrList f z xs\\r\\n\\r\\nfoldlList :: (b -\\u003e a -\\u003e b) -\\u003e b -\\u003e List a -\\u003e b\\r\\nfoldlList _ z EmptyList = z\\r\\nfoldlList f z (ListElement x xs) = let z' = z `f` x\\r\\n                                in seq z' $ foldlList f z' xs  \\r\\n\\r\\ntoList :: List a -\\u003e [a]\\r\\ntoList = foldrList (:) []\\r\\n\\r\\nreverseLinkedList :: List a -\\u003e List a\\r\\nreverseLinkedList = foldlList (flip new) EmptyList"}
293	34	8bbe5a65841c16f63651cae0	superseded	haskell	simple-linked-list	module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\r\n\r\ndata List a = EmptyList | ListElement a (List a) \r\n\r\nnil :: List a\r\nnil = EmptyList\r\n\r\nisNil :: List a -> Bool\r\nisNil EmptyList = True\r\nisNil _         = False\r\n\r\nnew :: a -> List a -> List a\r\nnew x xs = ListElement x (xs)\r\n\r\ndatum :: List a -> a\r\ndatum (ListElement x _) = x\r\n\r\nnext :: List a -> List a\r\nnext EmptyList = EmptyList\r\nnext (ListElement _ xs) = xs\r\n\r\nfromList :: [a] -> List a\r\nfromList []     = EmptyList\r\nfromList (x:xs) = new x $ fromList xs\r\n\r\ntoList :: List a -> [a]\r\ntoList EmptyList = []\r\ntoList (ListElement x xs) = x : toList xs\r\n\r\n(+++) :: List a -> a -> List a\r\n(+++) EmptyList y = new y EmptyList\r\n(+++) (ListElement x xs) y = new x $ xs +++ y\r\n\r\nreverseLinkedList :: List a -> List a\r\nreverseLinkedList EmptyList = EmptyList\r\nreverseLinkedList (ListElement x xs) = reverseLinkedList xs +++ x	\N	\N	0	1	192	LinkedList.hs	2015-07-07 09:57:11	2015-07-07 09:57:11	{"LinkedList.hs":"module LinkedList (new, isNil, nil, datum, next, toList, fromList, reverseLinkedList) where\\r\\n\\r\\ndata List a = EmptyList | ListElement a (List a) \\r\\n\\r\\nnil :: List a\\r\\nnil = EmptyList\\r\\n\\r\\nisNil :: List a -\\u003e Bool\\r\\nisNil EmptyList = True\\r\\nisNil _         = False\\r\\n\\r\\nnew :: a -\\u003e List a -\\u003e List a\\r\\nnew x xs = ListElement x (xs)\\r\\n\\r\\ndatum :: List a -\\u003e a\\r\\ndatum (ListElement x _) = x\\r\\n\\r\\nnext :: List a -\\u003e List a\\r\\nnext EmptyList = EmptyList\\r\\nnext (ListElement _ xs) = xs\\r\\n\\r\\nfromList :: [a] -\\u003e List a\\r\\nfromList []     = EmptyList\\r\\nfromList (x:xs) = new x $ fromList xs\\r\\n\\r\\ntoList :: List a -\\u003e [a]\\r\\ntoList EmptyList = []\\r\\ntoList (ListElement x xs) = x : toList xs\\r\\n\\r\\n(+++) :: List a -\\u003e a -\\u003e List a\\r\\n(+++) EmptyList y = new y EmptyList\\r\\n(+++) (ListElement x xs) y = new x $ xs +++ y\\r\\n\\r\\nreverseLinkedList :: List a -\\u003e List a\\r\\nreverseLinkedList EmptyList = EmptyList\\r\\nreverseLinkedList (ListElement x xs) = reverseLinkedList xs +++ x"}
294	34	525c5ac7e595c5c6e83911fd	done	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char       (isAlphaNum,toLower)\nimport Data.List       (foldl')\nimport Data.List.Split (wordsBy)\nimport Data.Map.Strict (Map,empty,insertWith)\n\nwordCount :: String -> Map String Integer\nwordCount\n  = foldl' tally empty\n  . wordsBy (not . isAlphaNum)\n  . fmap toLower\n  where\n    tally m x = insertWith (+) x 1 m	\N	\N	0	2	193	WordCount.hs	2015-07-10 18:30:29	2015-07-10 18:30:29	{"WordCount.hs":"module WordCount (wordCount) where\\n\\nimport Data.Char       (isAlphaNum,toLower)\\nimport Data.List       (foldl')\\nimport Data.List.Split (wordsBy)\\nimport Data.Map.Strict (Map,empty,insertWith)\\n\\nwordCount :: String -\\u003e Map String Integer\\nwordCount\\n  = foldl' tally empty\\n  . wordsBy (not . isAlphaNum)\\n  . fmap toLower\\n  where\\n    tally m x = insertWith (+) x 1 m"}
295	34	a0b49a765f13223281fd63c7	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char\nimport Data.List       (foldl')\nimport Data.Map hiding (filter,foldl',null)\n\nwordCount :: String -> Map String Integer\nwordCount\n  = foldl' tally empty\n  . filter (not . null)\n  . words'\n  . fmap toLower\n  where\n    tally m x = insertWith (+) x 1 m\n    words' [] = []\n    words' xs = y : words' ys\n      where\n        (y,ys) = span isAlphaNum\n               $ dropWhile (not . isAlphaNum) xs	\N	\N	0	1	193	WordCount.hs	2015-08-15 17:50:02	2015-08-15 17:50:02	{"WordCount.hs":"module WordCount (wordCount) where\\n\\nimport Data.Char\\nimport Data.List       (foldl')\\nimport Data.Map hiding (filter,foldl',null)\\n\\nwordCount :: String -\\u003e Map String Integer\\nwordCount\\n  = foldl' tally empty\\n  . filter (not . null)\\n  . words'\\n  . fmap toLower\\n  where\\n    tally m x = insertWith (+) x 1 m\\n    words' [] = []\\n    words' xs = y : words' ys\\n      where\\n        (y,ys) = span isAlphaNum\\n               $ dropWhile (not . isAlphaNum) xs"}
296	34	14fb3d292e746d2b48e4bd7a	done	python	grade-school	class School:\n\n    def __init__(self, name):\n        self._name = name\n        self.db = {}\n\n    def add(self, student_name, grade):\n        if grade not in self.db:\n            self.db[grade] = set()\n\n        self.db[grade].add(student_name)\n\n    def grade(self, grade_to_look_up):\n            return self.db.get(grade_to_look_up, set())\n\n    def sort(self):\n        return {grade: tuple(sorted(student_names))\n            for grade, student_names in self.db.items()}	\N	\N	0	2	194	school.py	2015-06-24 11:43:48	2015-06-24 11:43:48	{"school.py":"class School:\\n\\n    def __init__(self, name):\\n        self._name = name\\n        self.db = {}\\n\\n    def add(self, student_name, grade):\\n        if grade not in self.db:\\n            self.db[grade] = set()\\n\\n        self.db[grade].add(student_name)\\n\\n    def grade(self, grade_to_look_up):\\n            return self.db.get(grade_to_look_up, set())\\n\\n    def sort(self):\\n        return {grade: tuple(sorted(student_names))\\n            for grade, student_names in self.db.items()}"}
297	34	4275e5cadd1e45bdb5cd793c	superseded	python	grade-school	class School:\n\n    def __init__(self, name):\n        self._name = name\n        self.db = {}\n\n    def add(self, student_name, grade):\n        if grade not in self.db:\n            self.db[grade] = set()\n\n        self.db[grade].add(student_name)\n\n    def grade(self, grade_to_look_up):\n            return self.db.get(grade_to_look_up, set())\n\n    def sort(self):\n        sorted_students = {\n            3: ("Kyle",),\n            4: ("Christopher", "Jennifer",),\n            6: ("Kareem",)\n        }\n\n        return sorted_students	\N	\N	0	1	194	school.py	2015-09-12 21:01:22	2015-09-12 21:01:22	{"school.py":"class School:\\n\\n    def __init__(self, name):\\n        self._name = name\\n        self.db = {}\\n\\n    def add(self, student_name, grade):\\n        if grade not in self.db:\\n            self.db[grade] = set()\\n\\n        self.db[grade].add(student_name)\\n\\n    def grade(self, grade_to_look_up):\\n            return self.db.get(grade_to_look_up, set())\\n\\n    def sort(self):\\n        sorted_students = {\\n            3: (\\"Kyle\\",),\\n            4: (\\"Christopher\\", \\"Jennifer\\",),\\n            6: (\\"Kareem\\",)\\n        }\\n\\n        return sorted_students"}
298	34	5ab477dc946c515e3e027f04	done	ruby	roman-numerals	class Fixnum\n\n  def to_roman\n    i = self\n    s = ''\n    roman_mappings.each do |arabic, roman|\n      while i >= arabic\n        s << roman\n        i -= arabic\n      end\n    end\n    s\n  end\n\n  def roman_mappings\n    {\n      1000 => 'M',\n      900 => 'CM',\n      500 => 'D',\n      400 => 'CD',\n      100 => 'C',\n      90 => 'XC',\n      50 => 'L',\n      40 => 'XL',\n      10 => 'X',\n      9 => 'IX',\n      5 => 'V',\n      4 => 'IV',\n      1 => 'I',\n    }\n\n  end\n\nend	\N	\N	0	1	195	roman.rb	2015-07-28 09:54:30	2015-07-28 09:54:30	{"roman.rb":"class Fixnum\\n\\n  def to_roman\\n    i = self\\n    s = ''\\n    roman_mappings.each do |arabic, roman|\\n      while i \\u003e= arabic\\n        s \\u003c\\u003c roman\\n        i -= arabic\\n      end\\n    end\\n    s\\n  end\\n\\n  def roman_mappings\\n    {\\n      1000 =\\u003e 'M',\\n      900 =\\u003e 'CM',\\n      500 =\\u003e 'D',\\n      400 =\\u003e 'CD',\\n      100 =\\u003e 'C',\\n      90 =\\u003e 'XC',\\n      50 =\\u003e 'L',\\n      40 =\\u003e 'XL',\\n      10 =\\u003e 'X',\\n      9 =\\u003e 'IX',\\n      5 =\\u003e 'V',\\n      4 =\\u003e 'IV',\\n      1 =\\u003e 'I',\\n    }\\n\\n  end\\n\\nend"}
299	34	969230818c905d68ce822224	pending	csharp	raindrops	﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\n\r\n    class Raindrops\r\n    {\r\n\r\n        \r\n        public Raindrops() { }\r\n\r\n        public static string Convert(int rainValue)\r\n        {\r\n            var primeList = primeFactorsGetter(rainValue);\r\n            if(PlingPlangPlongString(primeList).Length > 0) return PlingPlangPlongString(primeList);\r\n            return rainValue.ToString();\r\n            \r\n        }\r\n\r\n        public static List<string> primeFactorsGetter(long value)\r\n        {\r\n            var resultsList = new List<string>();\r\n            for (int i = 2; i <= value; i++)\r\n            {\r\n                while (value % i == 0)\r\n                {\r\n                    resultsList.Add(i.ToString());\r\n                    value /= i;\r\n                }\r\n            }            \r\n            return resultsList;\r\n        }\r\n\r\n        public static string PlingPlangPlongString(List<string> listOfPrimeFactors)\r\n        {\r\n            var resultString = new StringBuilder();\r\n\r\n            if (listOfPrimeFactors.Contains("3")) resultString.Append("Pling");\r\n            if (listOfPrimeFactors.Contains("5")) resultString.Append("Plang");\r\n            if (listOfPrimeFactors.Contains("7")) resultString.Append("Plong");           \r\n\r\n            return resultString.ToString();\r\n        }\r\n    }	\N	\N	0	1	196	\\csharp\\raindrops\\Raindrops.cs	2015-07-26 01:59:08	2015-07-26 01:59:08	{"\\\\csharp\\\\raindrops\\\\Raindrops.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\nusing System.Text;\\r\\n\\r\\n\\r\\n    class Raindrops\\r\\n    {\\r\\n\\r\\n        \\r\\n        public Raindrops() { }\\r\\n\\r\\n        public static string Convert(int rainValue)\\r\\n        {\\r\\n            var primeList = primeFactorsGetter(rainValue);\\r\\n            if(PlingPlangPlongString(primeList).Length \\u003e 0) return PlingPlangPlongString(primeList);\\r\\n            return rainValue.ToString();\\r\\n            \\r\\n        }\\r\\n\\r\\n        public static List\\u003cstring\\u003e primeFactorsGetter(long value)\\r\\n        {\\r\\n            var resultsList = new List\\u003cstring\\u003e();\\r\\n            for (int i = 2; i \\u003c= value; i++)\\r\\n            {\\r\\n                while (value % i == 0)\\r\\n                {\\r\\n                    resultsList.Add(i.ToString());\\r\\n                    value /= i;\\r\\n                }\\r\\n            }            \\r\\n            return resultsList;\\r\\n        }\\r\\n\\r\\n        public static string PlingPlangPlongString(List\\u003cstring\\u003e listOfPrimeFactors)\\r\\n        {\\r\\n            var resultString = new StringBuilder();\\r\\n\\r\\n            if (listOfPrimeFactors.Contains(\\"3\\")) resultString.Append(\\"Pling\\");\\r\\n            if (listOfPrimeFactors.Contains(\\"5\\")) resultString.Append(\\"Plang\\");\\r\\n            if (listOfPrimeFactors.Contains(\\"7\\")) resultString.Append(\\"Plong\\");           \\r\\n\\r\\n            return resultString.ToString();\\r\\n        }\\r\\n    }"}
300	34	6b16207295692661aff7069b	pending	javascript	hamming	module.exports = {\n    compute: function(a, b) {\n        var iterator = 0, diff = 0, length = a.length < b.length ? a.length : b.length;        \n        do {\n            if(a[iterator] !== b[iterator]) {\n                diff++;\n            }\n            iterator++;\n        } while (iterator < length)\n        return diff;\n    }\n}	\N	\N	0	1	197	hamming.js	2015-08-26 01:11:33	2015-08-26 01:11:33	{"hamming.js":"module.exports = {\\n    compute: function(a, b) {\\n        var iterator = 0, diff = 0, length = a.length \\u003c b.length ? a.length : b.length;        \\n        do {\\n            if(a[iterator] !== b[iterator]) {\\n                diff++;\\n            }\\n            iterator++;\\n        } while (iterator \\u003c length)\\n        return diff;\\n    }\\n}"}
301	16	e6a97b0df6abfc0042d07c4d	pending	python	leap	def is_leap_year(year):\n\n    return year % 400 == 0 or (year % 4 == 0 and year % 100 != 0)	\N	\N	0	2	198	year.py	2015-05-12 23:07:24	2015-05-12 23:07:24	{"year.py":"def is_leap_year(year):\\n\\n    return year % 400 == 0 or (year % 4 == 0 and year % 100 != 0)"}
302	16	434810f7f57a8314fabf63e1	superseded	python	leap	def is_leap_year(year):\n\n    if year % 100 == 0:\n        if year % 400 == 0:\n            return True\n        else:\n            return False\n\n    elif year % 4 == 0:\n        return True\n\n    else:\n        return False	\N	\N	0	1	198	year.py	2015-05-23 20:30:16	2015-05-23 20:30:16	{"year.py":"def is_leap_year(year):\\n\\n    if year % 100 == 0:\\n        if year % 400 == 0:\\n            return True\\n        else:\\n            return False\\n\\n    elif year % 4 == 0:\\n        return True\\n\\n    else:\\n        return False"}
303	16	834e4a077b393b1fd07e6747	pending	python	wordy	import re\n\ndef calculate(expr):\n    parse = (\n        ('plus',          '+'),\n        ('minus',         '-'),\n        ('multiplied by', '*'),\n        ('divided by',    '/'),\n        ('What is ',      ''),\n        ('?',             ''))\n\n    for this, that in parse:\n        expr = expr.replace(this, that)\n\n    expr = re.sub(r'([\\*\\+\\-\\/]*[0-9]+\\s+[\\*\\+\\-\\/]+\\s+[0-9]+)', r'(\\1)', expr)\n\n    try:\n        return eval(expr)\n    except Exception:\n        raise ValueError	\N	\N	0	1	199	/python/wordy/wordy.py	2015-05-21 12:47:20	2015-05-21 12:47:20	{"/python/wordy/wordy.py":"import re\\n\\ndef calculate(expr):\\n    parse = (\\n        ('plus',          '+'),\\n        ('minus',         '-'),\\n        ('multiplied by', '*'),\\n        ('divided by',    '/'),\\n        ('What is ',      ''),\\n        ('?',             ''))\\n\\n    for this, that in parse:\\n        expr = expr.replace(this, that)\\n\\n    expr = re.sub(r'([\\\\*\\\\+\\\\-\\\\/]*[0-9]+\\\\s+[\\\\*\\\\+\\\\-\\\\/]+\\\\s+[0-9]+)', r'(\\\\1)', expr)\\n\\n    try:\\n        return eval(expr)\\n    except Exception:\\n        raise ValueError"}
305	16	a0a3206a1be24d530b025bd7	done	elixir	sublist	defmodule Sublist do\n  @doc """\n  Returns whether the first list is a sublist or a superlist of the second list\n  and if not whether it is equal or unequal to the second list.\n  """\n  def compare(a, b) do\n    result = {:equal, :unequal, :sublist, :superlist}\n    _compare(a, b)\n  end\n\n  defp _compare(a, a) do\n    :equal\n  end\n\n  defp _compare(a, b) do\n    cond do\n      sublist_of?(a, b) ->\n        :sublist\n      sublist_of?(b, a) ->\n        :superlist\n      true              ->\n        :unequal\n    end\n  end\n\n  defp sublist_of?([], _), do: true\n  defp sublist_of?(_, []), do: false\n  defp sublist_of?(a, b) when length(a) > length(b), do: false\n  defp sublist_of?(a, b) do\n    if Enum.take(b, length(a)) === a do\n      true\n    else\n      [_ | t] = b\n      sublist_of?(a, t)\n    end\n  end \n\n  defp compact(list) do\n    Enum.reject(list, &is_nil/1)\n  end\nend	\N	\N	0	1	201	/elixir/sublist/sublist.exs	2015-07-04 02:01:05	2015-07-04 02:01:05	{"/elixir/sublist/sublist.exs":"defmodule Sublist do\\n  @doc \\"\\"\\"\\n  Returns whether the first list is a sublist or a superlist of the second list\\n  and if not whether it is equal or unequal to the second list.\\n  \\"\\"\\"\\n  def compare(a, b) do\\n    result = {:equal, :unequal, :sublist, :superlist}\\n    _compare(a, b)\\n  end\\n\\n  defp _compare(a, a) do\\n    :equal\\n  end\\n\\n  defp _compare(a, b) do\\n    cond do\\n      sublist_of?(a, b) -\\u003e\\n        :sublist\\n      sublist_of?(b, a) -\\u003e\\n        :superlist\\n      true              -\\u003e\\n        :unequal\\n    end\\n  end\\n\\n  defp sublist_of?([], _), do: true\\n  defp sublist_of?(_, []), do: false\\n  defp sublist_of?(a, b) when length(a) \\u003e length(b), do: false\\n  defp sublist_of?(a, b) do\\n    if Enum.take(b, length(a)) === a do\\n      true\\n    else\\n      [_ | t] = b\\n      sublist_of?(a, t)\\n    end\\n  end \\n\\n  defp compact(list) do\\n    Enum.reject(list, \\u0026is_nil/1)\\n  end\\nend"}
306	16	7be46e1b2f8fe5eafb01ba83	done	ruby	say	class Say\n\n  N_TO_WORDS = {\n    0 => { teen: "ten" },\n    1 => { normal: "one", teen: "ten", ty: "eleven" },\n    2 => { normal: "two", teen: "twleve", ty: "twenty" },\n    3 => { normal: "three", teen: "thirteen", ty: "thirty" },\n    4 => { normal: "four", teen: "fourteen", ty: "forty" },\n    5 => { normal: "five", teen: "fifteen", ty: "fifty" },\n    6 => { normal: "six", teen: "sixteen", ty: "sixty" },\n    7 => { normal: "seven", teen: "seventeen", ty: "seventy" },\n    8 => { normal: "eight", teen: "eighteen", ty: "eighty" },\n    9 => { normal: "nine", teen: "nineteen", ty: "ninety" }\n  }\n\n  MAGNITUDE_WORD = {\n    1_000_000_000_000 => :trillion,\n    1_000_000_000     => :billion,\n    1_000_000         => :million,\n    1_000             => :thousand\n  }\n\n  def initialize(n)\n    @n = n\n  end\n\n  def in_english\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\n    return "zero" if @n.zero?\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\n      q, r = result[:value].divmod(magnitude)\n      result[:words] << "#{meta_words(q)} #{name}" if q > 0\n      result.merge(value: r)\n    end\n    say[:words] << meta_words(say[:value]) unless say[:value].zero?\n    say[:words].join(" ")\n  end\n\n  private\n\n  def meta_words(n)\n    "#{hundred(n)} #{below_hundred(n.modulo(100))}".strip\n  end\n\n  def hundred(n)\n    q, r = n.divmod(100)\n    q.zero? ? nil : "#{N_TO_WORDS[q][:normal]} hundred"\n  end\n\n  def below_hundred(n)\n    q, r = n.divmod(10)\n    ty_word = N_TO_WORDS[q][:ty] if q > 1\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\n    [ty_word, teen_word].compact.join("-")\n  end\nend	\N	\N	0	1	202	/ruby/say/say.rb	2015-08-09 17:43:41	2015-08-09 17:43:41	{"/ruby/say/say.rb":"class Say\\n\\n  N_TO_WORDS = {\\n    0 =\\u003e { teen: \\"ten\\" },\\n    1 =\\u003e { normal: \\"one\\", teen: \\"ten\\", ty: \\"eleven\\" },\\n    2 =\\u003e { normal: \\"two\\", teen: \\"twleve\\", ty: \\"twenty\\" },\\n    3 =\\u003e { normal: \\"three\\", teen: \\"thirteen\\", ty: \\"thirty\\" },\\n    4 =\\u003e { normal: \\"four\\", teen: \\"fourteen\\", ty: \\"forty\\" },\\n    5 =\\u003e { normal: \\"five\\", teen: \\"fifteen\\", ty: \\"fifty\\" },\\n    6 =\\u003e { normal: \\"six\\", teen: \\"sixteen\\", ty: \\"sixty\\" },\\n    7 =\\u003e { normal: \\"seven\\", teen: \\"seventeen\\", ty: \\"seventy\\" },\\n    8 =\\u003e { normal: \\"eight\\", teen: \\"eighteen\\", ty: \\"eighty\\" },\\n    9 =\\u003e { normal: \\"nine\\", teen: \\"nineteen\\", ty: \\"ninety\\" }\\n  }\\n\\n  MAGNITUDE_WORD = {\\n    1_000_000_000_000 =\\u003e :trillion,\\n    1_000_000_000     =\\u003e :billion,\\n    1_000_000         =\\u003e :million,\\n    1_000             =\\u003e :thousand\\n  }\\n\\n  def initialize(n)\\n    @n = n\\n  end\\n\\n  def in_english\\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\\n    return \\"zero\\" if @n.zero?\\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\\n      q, r = result[:value].divmod(magnitude)\\n      result[:words] \\u003c\\u003c \\"#{meta_words(q)} #{name}\\" if q \\u003e 0\\n      result.merge(value: r)\\n    end\\n    say[:words] \\u003c\\u003c meta_words(say[:value]) unless say[:value].zero?\\n    say[:words].join(\\" \\")\\n  end\\n\\n  private\\n\\n  def meta_words(n)\\n    \\"#{hundred(n)} #{below_hundred(n.modulo(100))}\\".strip\\n  end\\n\\n  def hundred(n)\\n    q, r = n.divmod(100)\\n    q.zero? ? nil : \\"#{N_TO_WORDS[q][:normal]} hundred\\"\\n  end\\n\\n  def below_hundred(n)\\n    q, r = n.divmod(10)\\n    ty_word = N_TO_WORDS[q][:ty] if q \\u003e 1\\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\\n    [ty_word, teen_word].compact.join(\\"-\\")\\n  end\\nend"}
307	16	4840bd7e03e34a8dc0a2a724	pending	lua	hamming	local Hamming = {}\n\nfunction Hamming.compute(str1, str2)\n  local distance = 0\n\n  for i = 1, math.min(#str1, #str2) do\n    if str1:sub(i,i) ~= str2:sub(i,i) then\n      distance = distance + 1\n    end\n  end\n\n  return distance\nend\n\nreturn Hamming	\N	\N	0	1	203	hamming.lua	2015-05-16 12:53:54	2015-05-16 12:53:54	{"hamming.lua":"local Hamming = {}\\n\\nfunction Hamming.compute(str1, str2)\\n  local distance = 0\\n\\n  for i = 1, math.min(#str1, #str2) do\\n    if str1:sub(i,i) ~= str2:sub(i,i) then\\n      distance = distance + 1\\n    end\\n  end\\n\\n  return distance\\nend\\n\\nreturn Hamming"}
308	16	29213c975058dee296376414	pending	javascript	hamming	var Hamming = {\r\n  compute: function(Strand1, Strand2) {\r\n    var NumberDifferent = 0;\r\n//Do a length check first because everything else relies on that. \r\nif (Strand1.length != Strand2.length){\r\n  throw 'DNA strands must be of equal length.'\r\n};//end if\r\nfor (var i = 0;i<Strand1.length;i++){//does a loop for each character input. \r\nif (Strand1[i] != Strand2[i]){ //if the chars aren't the same add to the differnce counter. \r\n\tNumberDifferent ++\r\n};//end if\r\n};//end for\r\n return NumberDifferent; //return the # difference\r\n   }//end compute\r\n};//end hamming\r\n\r\nmodule.exports = Hamming;	\N	\N	0	1	204	\\javascript\\hamming\\hamming.js	2015-07-23 17:10:36	2015-07-23 17:10:36	{"\\\\javascript\\\\hamming\\\\hamming.js":"var Hamming = {\\r\\n  compute: function(Strand1, Strand2) {\\r\\n    var NumberDifferent = 0;\\r\\n//Do a length check first because everything else relies on that. \\r\\nif (Strand1.length != Strand2.length){\\r\\n  throw 'DNA strands must be of equal length.'\\r\\n};//end if\\r\\nfor (var i = 0;i\\u003cStrand1.length;i++){//does a loop for each character input. \\r\\nif (Strand1[i] != Strand2[i]){ //if the chars aren't the same add to the differnce counter. \\r\\n\\tNumberDifferent ++\\r\\n};//end if\\r\\n};//end for\\r\\n return NumberDifferent; //return the # difference\\r\\n   }//end compute\\r\\n};//end hamming\\r\\n\\r\\nmodule.exports = Hamming;"}
309	18	838e3851c39a96351a8cd9aa	pending	ruby	hamming	class Hamming \n\n      def Hamming.compute strandA, strandB \n        hamming_distance = 0\n        end_point = strandA.length\n        length_difference = strandA.length - strandB.length\n\n        if length_difference > 0\n            end_point = strandB.length\n        end\n\n        end_point -= 1;\n\n        for i in ( 0..end_point )\n               if strandA[i] != strandB[i]\n                    hamming_distance += 1\n               end\n        end\n\n        return hamming_distance\n\n    end\n\nend	\N	\N	0	1	205	hamming.rb	2015-05-18 01:09:04	2015-05-18 01:09:04	{"hamming.rb":"class Hamming \\n\\n      def Hamming.compute strandA, strandB \\n        hamming_distance = 0\\n        end_point = strandA.length\\n        length_difference = strandA.length - strandB.length\\n\\n        if length_difference \\u003e 0\\n            end_point = strandB.length\\n        end\\n\\n        end_point -= 1;\\n\\n        for i in ( 0..end_point )\\n               if strandA[i] != strandB[i]\\n                    hamming_distance += 1\\n               end\\n        end\\n\\n        return hamming_distance\\n\\n    end\\n\\nend"}
310	18	dc3231b0c8a0aa608d1c7dd2	pending	ruby	twelve-days	class TwelveDaysSong\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\n\n  VERSES = [\n    ["twelve Drummers Drumming, ", 12],\n    ["eleven Pipers Piping, ", 11],\n    ["ten Lords-a-Leaping, ", 10],\n    ["nine Ladies Dancing, ", 9],    \n    ["eight Maids-a-Milking, ", 8],      \n    ["seven Swans-a-Swimming, ", 7],\n    ["six Geese-a-Laying, ", 6],\n    ["five Gold Rings, ", 5],\n    ["four Calling Birds, ", 4], \n    ["three French Hens, ", 3],\n    ["two Turtle Doves, and ", 2],\n  ]\n\n  def verse(num)\n    s = "On the #{DAYS[num-1]} day of Christmas my true love gave to me, "\n    VERSES.each do |phrase, verse_num|\n      s << phrase if num >= verse_num\n    end\n    s << "a Partridge in a Pear Tree.\\n"\n    s\n  end\n\n  def verses(start, stop)\n    (start..stop).map { |num| verse(num) }.join("\\n") + "\\n"\n  end\n\n  def sing\n    verses(1, 12)\n  end\nend	\N	\N	0	1	206	twelve_days.rb	2015-05-22 09:14:25	2015-05-22 09:14:25	{"twelve_days.rb":"class TwelveDaysSong\\n  DAYS = %w(first second third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth)\\n\\n  VERSES = [\\n    [\\"twelve Drummers Drumming, \\", 12],\\n    [\\"eleven Pipers Piping, \\", 11],\\n    [\\"ten Lords-a-Leaping, \\", 10],\\n    [\\"nine Ladies Dancing, \\", 9],    \\n    [\\"eight Maids-a-Milking, \\", 8],      \\n    [\\"seven Swans-a-Swimming, \\", 7],\\n    [\\"six Geese-a-Laying, \\", 6],\\n    [\\"five Gold Rings, \\", 5],\\n    [\\"four Calling Birds, \\", 4], \\n    [\\"three French Hens, \\", 3],\\n    [\\"two Turtle Doves, and \\", 2],\\n  ]\\n\\n  def verse(num)\\n    s = \\"On the #{DAYS[num-1]} day of Christmas my true love gave to me, \\"\\n    VERSES.each do |phrase, verse_num|\\n      s \\u003c\\u003c phrase if num \\u003e= verse_num\\n    end\\n    s \\u003c\\u003c \\"a Partridge in a Pear Tree.\\\\n\\"\\n    s\\n  end\\n\\n  def verses(start, stop)\\n    (start..stop).map { |num| verse(num) }.join(\\"\\\\n\\") + \\"\\\\n\\"\\n  end\\n\\n  def sing\\n    verses(1, 12)\\n  end\\nend"}
311	18	11b18a1c2db6f6ed5dd86306	pending	ruby	nucleotide-count	class DNA\n  Nucleotides = {"A" => 0, "T" => 0, "C" => 0, "G" => 0}\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n    @result = Nucleotides.dup\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\n  end\n\n  def nucleotide_counts\n    @result\n  end\n\n  def count(nucleotide)\n    if nucleotide == "U"\n      0\n    elsif Nucleotides.keys.include?(nucleotide)\n      @result[nucleotide]\n    else\n      raise(ArgumentError, "Argument Error")\n    end\n  end\nend	\N	\N	0	2	207	nucleotide-count.rb	2015-05-17 05:42:53	2015-05-17 05:42:53	{"nucleotide-count.rb":"class DNA\\n  Nucleotides = {\\"A\\" =\\u003e 0, \\"T\\" =\\u003e 0, \\"C\\" =\\u003e 0, \\"G\\" =\\u003e 0}\\n\\n  def initialize(dna_string)\\n    @dna_string = dna_string\\n    @result = Nucleotides.dup\\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\\n  end\\n\\n  def nucleotide_counts\\n    @result\\n  end\\n\\n  def count(nucleotide)\\n    if nucleotide == \\"U\\"\\n      0\\n    elsif Nucleotides.keys.include?(nucleotide)\\n      @result[nucleotide]\\n    else\\n      raise(ArgumentError, \\"Argument Error\\")\\n    end\\n  end\\nend"}
312	18	c5715ecf208a854892a041d6	superseded	ruby	nucleotide-count	class DNA\n\n  def initialize(dna_string)\n    @dna_string = dna_string\n    @result = {"A"=>0, "T"=>0, "C"=>0, "G"=>0}\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\n  end\n\n  def nucleotide_counts\n    @result\n  end\n\n  def count(nucleotide)\n    if nucleotide == "U"\n      0\n    elsif ["A", "T", "C", "G"].include?(nucleotide)\n      @result[nucleotide]\n    else\n      raise(ArgumentError)\n    end\n  end\nend	\N	\N	0	1	207	nucleotide-count.rb	2015-07-25 05:17:56	2015-07-25 05:17:56	{"nucleotide-count.rb":"class DNA\\n\\n  def initialize(dna_string)\\n    @dna_string = dna_string\\n    @result = {\\"A\\"=\\u003e0, \\"T\\"=\\u003e0, \\"C\\"=\\u003e0, \\"G\\"=\\u003e0}\\n    @dna_string.chars.each{ |dna| @result[dna] += 1}\\n  end\\n\\n  def nucleotide_counts\\n    @result\\n  end\\n\\n  def count(nucleotide)\\n    if nucleotide == \\"U\\"\\n      0\\n    elsif [\\"A\\", \\"T\\", \\"C\\", \\"G\\"].include?(nucleotide)\\n      @result[nucleotide]\\n    else\\n      raise(ArgumentError)\\n    end\\n  end\\nend"}
313	18	03ff69cbf51373b8a773a392	pending	lua	hamming	local Hamming = {}\n\nfunction Hamming.compute(str1, str2)\n  local distance = 0\n\n  for i = 1, math.min(#str1, #str2) do\n    if str1:sub(i,i) ~= str2:sub(i,i) then\n      distance = distance + 1\n    end\n  end\n\n  return distance\nend\n\nreturn Hamming	\N	\N	0	1	208	hamming.lua	2015-06-22 19:58:32	2015-06-22 19:58:32	{"hamming.lua":"local Hamming = {}\\n\\nfunction Hamming.compute(str1, str2)\\n  local distance = 0\\n\\n  for i = 1, math.min(#str1, #str2) do\\n    if str1:sub(i,i) ~= str2:sub(i,i) then\\n      distance = distance + 1\\n    end\\n  end\\n\\n  return distance\\nend\\n\\nreturn Hamming"}
314	18	098f41b10b64505eb6c9f4c2	pending	python	grade-school	from collections import defaultdict\nclass School():\n    def __init__(self,what):\n        self.db = defaultdict(set)\n        self.school_name = what\n\n    def add(self,what,grade):\n        self.db[grade].add(what)\n        \n    def grade(self,what):\n        return self.db[what]\n\n    def sort(self):\n        #for testing purposes \n        new_dict = {}\n        for k,v in self.db.items():\n            new_dict[k] = tuple(v)\n        return new_dict	\N	\N	0	1	209	school.py	2015-05-22 21:46:25	2015-05-22 21:46:25	{"school.py":"from collections import defaultdict\\nclass School():\\n    def __init__(self,what):\\n        self.db = defaultdict(set)\\n        self.school_name = what\\n\\n    def add(self,what,grade):\\n        self.db[grade].add(what)\\n        \\n    def grade(self,what):\\n        return self.db[what]\\n\\n    def sort(self):\\n        #for testing purposes \\n        new_dict = {}\\n        for k,v in self.db.items():\\n            new_dict[k] = tuple(v)\\n        return new_dict"}
315	24	c02d26bf8a927d5f11a54f5b	done	ruby	say	class Say\n\n  N_TO_WORDS = {\n    0 => { teen: "ten" },\n    1 => { normal: "one", teen: "ten", ty: "eleven" },\n    2 => { normal: "two", teen: "twleve", ty: "twenty" },\n    3 => { normal: "three", teen: "thirteen", ty: "thirty" },\n    4 => { normal: "four", teen: "fourteen", ty: "forty" },\n    5 => { normal: "five", teen: "fifteen", ty: "fifty" },\n    6 => { normal: "six", teen: "sixteen", ty: "sixty" },\n    7 => { normal: "seven", teen: "seventeen", ty: "seventy" },\n    8 => { normal: "eight", teen: "eighteen", ty: "eighty" },\n    9 => { normal: "nine", teen: "nineteen", ty: "ninety" }\n  }\n\n  MAGNITUDE_WORD = {\n    1_000_000_000_000 => :trillion,\n    1_000_000_000     => :billion,\n    1_000_000         => :million,\n    1_000             => :thousand\n  }\n\n  def initialize(n)\n    @n = n\n  end\n\n  def in_english\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\n    return "zero" if @n.zero?\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\n      q, r = result[:value].divmod(magnitude)\n      result[:words] << "#{meta_words(q)} #{name}" if q > 0\n      result.merge(value: r)\n    end\n    say[:words] << meta_words(say[:value]) unless say[:value].zero?\n    say[:words].join(" ")\n  end\n\n  private\n\n  def meta_words(n)\n    "#{hundred(n)} #{below_hundred(n.modulo(100))}".strip\n  end\n\n  def hundred(n)\n    q, r = n.divmod(100)\n    q.zero? ? nil : "#{N_TO_WORDS[q][:normal]} hundred"\n  end\n\n  def below_hundred(n)\n    q, r = n.divmod(10)\n    ty_word = N_TO_WORDS[q][:ty] if q > 1\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\n    [ty_word, teen_word].compact.join("-")\n  end\nend	\N	\N	0	1	210	/ruby/say/say.rb	2015-07-23 03:48:33	2015-07-23 03:48:33	{"/ruby/say/say.rb":"class Say\\n\\n  N_TO_WORDS = {\\n    0 =\\u003e { teen: \\"ten\\" },\\n    1 =\\u003e { normal: \\"one\\", teen: \\"ten\\", ty: \\"eleven\\" },\\n    2 =\\u003e { normal: \\"two\\", teen: \\"twleve\\", ty: \\"twenty\\" },\\n    3 =\\u003e { normal: \\"three\\", teen: \\"thirteen\\", ty: \\"thirty\\" },\\n    4 =\\u003e { normal: \\"four\\", teen: \\"fourteen\\", ty: \\"forty\\" },\\n    5 =\\u003e { normal: \\"five\\", teen: \\"fifteen\\", ty: \\"fifty\\" },\\n    6 =\\u003e { normal: \\"six\\", teen: \\"sixteen\\", ty: \\"sixty\\" },\\n    7 =\\u003e { normal: \\"seven\\", teen: \\"seventeen\\", ty: \\"seventy\\" },\\n    8 =\\u003e { normal: \\"eight\\", teen: \\"eighteen\\", ty: \\"eighty\\" },\\n    9 =\\u003e { normal: \\"nine\\", teen: \\"nineteen\\", ty: \\"ninety\\" }\\n  }\\n\\n  MAGNITUDE_WORD = {\\n    1_000_000_000_000 =\\u003e :trillion,\\n    1_000_000_000     =\\u003e :billion,\\n    1_000_000         =\\u003e :million,\\n    1_000             =\\u003e :thousand\\n  }\\n\\n  def initialize(n)\\n    @n = n\\n  end\\n\\n  def in_english\\n    raise ArgumentError unless @n.between?(0, 999_999_999_999)\\n    return \\"zero\\" if @n.zero?\\n    say = MAGNITUDE_WORD.reduce(words: [], value: @n) do |result, (magnitude, name)|\\n      q, r = result[:value].divmod(magnitude)\\n      result[:words] \\u003c\\u003c \\"#{meta_words(q)} #{name}\\" if q \\u003e 0\\n      result.merge(value: r)\\n    end\\n    say[:words] \\u003c\\u003c meta_words(say[:value]) unless say[:value].zero?\\n    say[:words].join(\\" \\")\\n  end\\n\\n  private\\n\\n  def meta_words(n)\\n    \\"#{hundred(n)} #{below_hundred(n.modulo(100))}\\".strip\\n  end\\n\\n  def hundred(n)\\n    q, r = n.divmod(100)\\n    q.zero? ? nil : \\"#{N_TO_WORDS[q][:normal]} hundred\\"\\n  end\\n\\n  def below_hundred(n)\\n    q, r = n.divmod(10)\\n    ty_word = N_TO_WORDS[q][:ty] if q \\u003e 1\\n    teen_word = q == 1 ? N_TO_WORDS[r][:teen] : N_TO_WORDS[r][:normal]\\n    [ty_word, teen_word].compact.join(\\"-\\")\\n  end\\nend"}
316	42	5a8c4b99241283549c1756dd	superseded	haskell	bob	module Bob where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor x | filter (not . isSpace) x == "" = "Fine. Be that way!"\nresponseFor s | yelling s                      = "Woah, chill out!"\nresponseFor q | last q == '?'                  = "Sure."\nresponseFor _                                  = "Whatever."\n\nyelling :: String -> Bool\nyelling s = all (isLetter .-> isUpper) s && any isLetter s\n  where\n    a .-> b = \\x -> not (a x) || b x -- logical implication	\N	\N	0	1	212	bob.hs	2015-03-13 20:55:55	2015-03-13 20:55:55	{"bob.hs":"module Bob where\\n\\nimport Data.Char\\n\\nresponseFor :: String -\\u003e String\\nresponseFor x | filter (not . isSpace) x == \\"\\" = \\"Fine. Be that way!\\"\\nresponseFor s | yelling s                      = \\"Woah, chill out!\\"\\nresponseFor q | last q == '?'                  = \\"Sure.\\"\\nresponseFor _                                  = \\"Whatever.\\"\\n\\nyelling :: String -\\u003e Bool\\nyelling s = all (isLetter .-\\u003e isUpper) s \\u0026\\u0026 any isLetter s\\n  where\\n    a .-\\u003e b = \\\\x -\\u003e not (a x) || b x -- logical implication"}
317	42	f694e103d5c158dd5012c85a	done	haskell	bob	module Bob where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor x | filter (not . isSpace) x == "" = "Fine. Be that way!"\nresponseFor s | yelling s                      = "Woah, chill out!"\nresponseFor q | last q == '?'                  = "Sure."\nresponseFor _                                  = "Whatever."\n\nyelling :: String -> Bool\nyelling s = all (not . isLower) s && any isLetter s	\N	\N	0	2	212	bob.hs	2015-07-30 15:37:45	2015-07-30 15:37:45	{"bob.hs":"module Bob where\\n\\nimport Data.Char\\n\\nresponseFor :: String -\\u003e String\\nresponseFor x | filter (not . isSpace) x == \\"\\" = \\"Fine. Be that way!\\"\\nresponseFor s | yelling s                      = \\"Woah, chill out!\\"\\nresponseFor q | last q == '?'                  = \\"Sure.\\"\\nresponseFor _                                  = \\"Whatever.\\"\\n\\nyelling :: String -\\u003e Bool\\nyelling s = all (not . isLower) s \\u0026\\u0026 any isLetter s"}
318	27	e4aa7e4dc36781ab87485e6c	superseded	ruby	saddle-points	class Matrix\r\n  def initialize(m)\r\n    @matrix = m.split("\\n").map { |x| x.scan(/\\d+/).map(&:to_i) }\r\n  end\r\n\r\n  def rows\r\n    @matrix\r\n  end\r\n\r\n  def columns\r\n    @matrix.transpose\r\n  end\r\n\r\n  def saddle_points\r\n    points = []\r\n    rows.each_with_index do |row, i|\r\n      row.each_with_index do |item, j|\r\n        if item == row.max and columns[j][i] == columns[j].min\r\n          points << [i, j]\r\n        end\r\n      end\r\n    end\r\n    points\r\n  end\r\nend\r	\N	\N	0	1	213	matrix.rb	2015-07-23 14:43:10	2015-07-23 14:43:10	{"matrix.rb":"class Matrix\\r\\n  def initialize(m)\\r\\n    @matrix = m.split(\\"\\\\n\\").map { |x| x.scan(/\\\\d+/).map(\\u0026:to_i) }\\r\\n  end\\r\\n\\r\\n  def rows\\r\\n    @matrix\\r\\n  end\\r\\n\\r\\n  def columns\\r\\n    @matrix.transpose\\r\\n  end\\r\\n\\r\\n  def saddle_points\\r\\n    points = []\\r\\n    rows.each_with_index do |row, i|\\r\\n      row.each_with_index do |item, j|\\r\\n        if item == row.max and columns[j][i] == columns[j].min\\r\\n          points \\u003c\\u003c [i, j]\\r\\n        end\\r\\n      end\\r\\n    end\\r\\n    points\\r\\n  end\\r\\nend\\r"}
319	27	70b9399e0c37b34312c13683	pending	ruby	saddle-points	class Matrix\r\n  def initialize(m)\r\n    @matrix = m.split("\\n").map { |x| x.scan(/\\d+/).map(&:to_i) }\r\n  end\r\n\r\n  def rows\r\n    @matrix\r\n  end\r\n\r\n  def columns\r\n    @matrix.transpose\r\n  end\r\n\r\n  def saddle_points\r\n    points = []\r\n    rows.each_with_index do |row, i|\r\n      row.each_with_index do |item, j|\r\n        if item == row.max and item == columns[j].min\r\n          points << [i, j]\r\n        end\r\n      end\r\n    end\r\n    points\r\n  end\r\nend\r	\N	\N	0	2	213	matrix.rb	2015-08-06 20:11:34	2015-08-06 20:11:34	{"matrix.rb":"class Matrix\\r\\n  def initialize(m)\\r\\n    @matrix = m.split(\\"\\\\n\\").map { |x| x.scan(/\\\\d+/).map(\\u0026:to_i) }\\r\\n  end\\r\\n\\r\\n  def rows\\r\\n    @matrix\\r\\n  end\\r\\n\\r\\n  def columns\\r\\n    @matrix.transpose\\r\\n  end\\r\\n\\r\\n  def saddle_points\\r\\n    points = []\\r\\n    rows.each_with_index do |row, i|\\r\\n      row.each_with_index do |item, j|\\r\\n        if item == row.max and item == columns[j].min\\r\\n          points \\u003c\\u003c [i, j]\\r\\n        end\\r\\n      end\\r\\n    end\\r\\n    points\\r\\n  end\\r\\nend\\r"}
320	45	1a81b733b1d95ec3b97f4ece	pending	python	grade-school	from collections import defaultdict\nclass School():\n    def __init__(self,what):\n        self.db = defaultdict(set)\n        self.school_name = what\n\n    def add(self,what,grade):\n        self.db[grade].add(what)\n        \n    def grade(self,what):\n        return self.db[what]\n\n    def sort(self):\n        #for testing purposes \n        new_dict = {}\n        for k,v in self.db.items():\n            new_dict[k] = tuple(v)\n        return new_dict	\N	\N	0	1	214	school.py	2015-09-02 09:18:20	2015-09-02 09:18:20	{"school.py":"from collections import defaultdict\\nclass School():\\n    def __init__(self,what):\\n        self.db = defaultdict(set)\\n        self.school_name = what\\n\\n    def add(self,what,grade):\\n        self.db[grade].add(what)\\n        \\n    def grade(self,what):\\n        return self.db[what]\\n\\n    def sort(self):\\n        #for testing purposes \\n        new_dict = {}\\n        for k,v in self.db.items():\\n            new_dict[k] = tuple(v)\\n        return new_dict"}
\.


--
-- Name: submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submissions_id_seq', 320, true);


--
-- Data for Name: team_managers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_managers (id, user_id, team_id) FROM stdin;
1	2	1
2	3	1
3	4	1
4	2	2
5	2	3
6	2	4
7	3	4
8	4	5
9	3	6
10	3	7
\.


--
-- Name: team_managers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_managers_id_seq', 10, true);


--
-- Data for Name: team_memberships; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_memberships (id, team_id, user_id, confirmed, created_at, updated_at, inviter_id) FROM stdin;
1	1	22	t	2010-11-05 07:50:26	2010-11-05 07:50:26	\N
2	1	15	t	1977-06-03 10:02:32	1977-06-03 10:02:32	\N
3	1	18	t	1982-04-21 05:11:12	1982-04-21 05:11:12	\N
4	1	23	t	1991-01-14 23:44:29	1991-01-14 23:44:29	\N
5	1	11	t	1984-07-12 23:01:20	1984-07-12 23:01:20	\N
6	1	8	t	2004-11-17 07:08:25	2004-11-17 07:08:25	\N
7	1	7	t	1984-11-02 17:30:51	1984-11-02 17:30:51	\N
8	1	30	t	2009-07-06 00:13:56	2009-07-06 00:13:56	\N
9	1	31	t	2010-03-16 19:16:58	2010-03-16 19:16:58	\N
10	1	36	t	1980-07-27 14:50:13	1980-07-27 14:50:13	\N
11	1	16	f	1984-02-03 15:57:21	1984-02-03 15:57:21	\N
12	1	17	f	2015-08-24 17:21:11	2015-08-24 17:21:11	\N
13	1	29	f	1986-09-16 14:57:39	1986-09-16 14:57:39	\N
14	1	32	f	1995-01-01 15:24:50	1995-01-01 15:24:50	\N
15	1	38	f	2004-02-10 07:29:22	2004-02-10 07:29:22	\N
16	1	42	f	2002-04-20 08:10:21	2002-04-20 08:10:21	\N
17	1	43	f	1984-05-13 00:15:01	1984-05-13 00:15:01	\N
18	1	47	f	1996-03-20 16:52:15	1996-03-20 16:52:15	\N
19	2	3	t	2011-04-20 13:32:44	2011-04-20 13:32:44	\N
20	2	36	t	2014-04-28 08:10:53	2014-04-28 08:10:53	\N
21	2	31	t	1970-08-26 01:31:22	1970-08-26 01:31:22	\N
22	2	47	t	2013-04-09 06:45:29	2013-04-09 06:45:29	\N
23	2	19	f	1979-01-13 02:53:46	1979-01-13 02:53:46	\N
24	2	38	f	1991-09-17 11:02:55	1991-09-17 11:02:55	\N
25	3	38	f	2007-12-08 16:25:30	2007-12-08 16:25:30	\N
26	3	3	f	1975-06-05 21:20:14	1975-06-05 21:20:14	\N
27	4	3	t	2008-09-18 07:26:38	2008-09-18 07:26:38	\N
28	4	32	t	1992-05-19 23:59:44	1992-05-19 23:59:44	\N
29	4	22	t	1987-02-03 04:01:39	1987-02-03 04:01:39	\N
30	4	27	t	1975-08-18 11:25:45	1975-08-18 11:25:45	\N
31	4	20	t	2010-04-13 01:00:38	2010-04-13 01:00:38	\N
32	4	25	t	2002-04-02 18:58:47	2002-04-02 18:58:47	\N
33	4	19	t	1995-12-18 01:00:33	1995-12-18 01:00:33	\N
34	4	24	t	2001-08-16 08:14:25	2001-08-16 08:14:25	\N
35	4	26	t	1976-07-24 14:26:45	1976-07-24 14:26:45	\N
36	4	21	t	1998-07-07 15:35:41	1998-07-07 15:35:41	\N
37	4	38	f	2001-12-27 15:24:24	2001-12-27 15:24:24	\N
38	4	12	f	1984-12-26 17:35:53	1984-12-26 17:35:53	\N
39	4	14	f	2012-05-29 19:03:35	2012-05-29 19:03:35	\N
40	5	32	t	2010-09-10 02:15:37	2010-09-10 02:15:37	\N
41	5	40	t	1995-05-15 21:20:58	1995-05-15 21:20:58	\N
42	5	35	t	2003-05-16 23:43:53	2003-05-16 23:43:53	\N
43	5	37	t	1995-11-07 04:03:40	1995-11-07 04:03:40	\N
44	5	33	t	1993-11-19 21:17:14	1993-11-19 21:17:14	\N
45	5	36	t	1985-11-02 09:41:03	1985-11-02 09:41:03	\N
46	5	34	t	2000-12-19 14:54:39	2000-12-19 14:54:39	\N
47	5	39	t	1983-03-14 07:35:09	1983-03-14 07:35:09	\N
48	5	41	f	1995-01-28 04:36:11	1995-01-28 04:36:11	\N
49	5	38	f	1999-08-12 06:59:24	1999-08-12 06:59:24	\N
50	5	3	f	2009-10-07 08:26:52	2009-10-07 08:26:52	\N
51	6	6	t	2005-06-20 16:08:14	2005-06-20 16:08:14	\N
52	6	7	t	1980-12-28 01:57:38	1980-12-28 01:57:38	\N
53	6	8	t	1988-12-06 04:47:49	1988-12-06 04:47:49	\N
54	6	9	t	1977-06-15 04:28:54	1977-06-15 04:28:54	\N
55	6	11	t	1993-03-19 03:20:03	1993-03-19 03:20:03	\N
56	6	12	t	2009-11-13 12:46:25	2009-11-13 12:46:25	\N
57	6	13	t	2002-01-23 21:43:03	2002-01-23 21:43:03	\N
58	6	14	t	2001-01-20 13:09:53	2001-01-20 13:09:53	\N
59	6	15	t	2014-12-29 18:57:00	2014-12-29 18:57:00	\N
60	6	16	t	1994-05-31 01:45:01	1994-05-31 01:45:01	\N
61	6	17	t	2011-04-26 03:22:58	2011-04-26 03:22:58	\N
62	6	18	t	1972-05-17 13:19:01	1972-05-17 13:19:01	\N
63	6	23	t	1978-02-24 15:13:16	1978-02-24 15:13:16	\N
64	6	28	t	2003-02-24 07:19:22	2003-02-24 07:19:22	\N
65	6	29	t	1972-02-05 05:41:54	1972-02-05 05:41:54	\N
66	6	30	t	1995-01-01 09:36:40	1995-01-01 09:36:40	\N
67	6	31	t	2003-11-29 09:33:50	2003-11-29 09:33:50	\N
68	6	32	t	1980-05-01 11:22:01	1980-05-01 11:22:01	\N
69	6	38	t	2014-12-23 08:02:56	2014-12-23 08:02:56	\N
70	6	42	t	1979-11-21 09:34:49	1979-11-21 09:34:49	\N
71	6	43	t	1980-12-01 10:41:35	1980-12-01 10:41:35	\N
72	6	44	t	1983-02-04 12:39:12	1983-02-04 12:39:12	\N
73	6	45	t	2005-09-26 19:23:39	2005-09-26 19:23:39	\N
74	6	46	t	1992-04-10 09:57:31	1992-04-10 09:57:31	\N
75	6	47	t	1978-11-27 09:11:32	1978-11-27 09:11:32	\N
76	6	48	t	1977-12-11 23:11:47	1977-12-11 23:11:47	\N
77	6	49	t	1992-12-24 11:44:51	1992-12-24 11:44:51	\N
78	7	3	t	2013-09-13 18:40:43	2013-09-13 18:40:43	\N
79	7	39	t	2008-11-24 09:18:43	2008-11-24 09:18:43	\N
80	7	32	t	1989-03-16 01:07:24	1989-03-16 01:07:24	\N
81	7	38	f	2005-10-05 12:45:57	2005-10-05 12:45:57	\N
\.


--
-- Name: team_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_memberships_id_seq', 81, true);


--
-- Data for Name: teams; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY teams (id, slug, name, created_at, updated_at) FROM stdin;
1	baconesia	baconesia	2014-12-26 17:08:55.421453	2014-12-26 17:08:55.421453
2	chocolades	chocolades	2015-02-25 03:03:46.457783	2015-02-25 03:03:46.457783
3	ghost	ghost	2015-06-25 22:26:18.467566	2015-06-25 22:26:18.467566
4	motley	motley	2015-08-21 23:03:03.472623	2015-08-21 23:03:03.472623
5	rugrats	rugrats	2015-08-30 18:00:18.492129	2015-08-30 18:00:18.492129
6	slate	slate	2015-08-01 00:10:13.508463	2015-08-01 00:10:13.508463
7	polkadots	polkadots	2015-08-13 08:28:34.544925	2015-08-13 08:28:34.544925
\.


--
-- Name: teams_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('teams_id_seq', 7, true);


--
-- Data for Name: user_exercises; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY user_exercises (id, user_id, language, slug, iteration_count, state, completed_at, key, created_at, updated_at, is_nitpicker, archived, last_iteration_at, last_activity_at, last_activity, fetched_at) FROM stdin;
1	9	lua	hamming	1	pending	\N	847b5a292b823e226fa7ed27	2015-08-10 01:05:01	2015-08-10 01:05:01	f	t	2015-08-31 15:40:16	2015-08-31 15:40:16	Submitted an iteration	\N
2	9	clojure	nucleotide-count	3	done	\N	98a2781d3905c60eb49e376b	2015-08-04 20:15:57	2015-08-04 20:15:57	f	t	2015-09-19 22:40:42	2015-09-19 22:40:42	@bob commented	\N
3	9	go	leap	2	pending	\N	aa1f2c21025ae306d6040ab3	2015-07-02 08:39:35	2015-07-02 08:39:35	f	t	2015-09-01 07:13:40	2015-09-01 07:13:40	@jarrod commented	\N
4	11	javascript	word-count	1	pending	\N	d4f4748a0cd13521592e6a98	2015-07-25 00:30:45	2015-07-25 00:30:45	f	t	2015-09-12 13:57:04	2015-09-12 13:57:04	@russ commented	\N
5	11	python	point-mutations	2	done	\N	2cbdcd5fa9a25bffbb77416d	2015-08-17 22:21:14	2015-08-17 22:21:14	f	t	2015-09-05 23:00:28	2015-09-05 23:00:28	@dawson commented	\N
6	12	javascript	hamming	1	pending	\N	23f8185fec23ded2224302b0	2015-08-19 01:52:35	2015-08-19 01:52:35	f	f	2015-09-17 07:06:16	2015-09-17 07:06:16	@ruben commented	\N
7	15	ruby	raindrops	1	done	\N	4be821abac999e8fbc4d1caf	2015-09-21 02:08:24	2015-09-21 02:08:24	f	t	2015-09-21 22:56:44	2015-09-21 22:56:44	@norma commented	\N
8	15	ruby	twelve-days	1	pending	\N	ef7e849cfb4c6744698f8278	2015-09-18 04:57:07	2015-09-18 04:57:07	f	f	2015-09-19 00:03:36	2015-09-19 00:03:36	@lisa commented	\N
9	15	python	leap	3	done	\N	db77c398599ee62a6698b300	2015-09-19 21:24:20	2015-09-19 21:24:20	f	t	2015-09-22 09:14:40	2015-09-22 09:14:40	@dawson commented	\N
10	15	ruby	nucleotide-count	3	done	\N	ba9191114fc8a561c8d07b1f	2015-09-19 19:16:05	2015-09-19 19:16:05	f	t	2015-09-21 03:58:02	2015-09-21 03:58:02	@opal commented	\N
11	15	ruby	say	1	done	\N	60c85e5a0d843d5554e72557	2015-09-18 11:23:38	2015-09-18 11:23:38	f	t	2015-09-20 03:14:39	2015-09-20 03:14:39	@quentin commented	\N
12	15	clojure	nucleotide-count	3	done	\N	63baef048caff96379df166e	2015-09-19 15:50:35	2015-09-19 15:50:35	f	t	2015-09-21 17:22:18	2015-09-21 17:22:18	@bob commented	\N
13	15	ruby	grains	1	done	\N	6cdab6c345382a9057e37ac5	2015-09-20 22:52:50	2015-09-20 22:52:50	f	t	2015-09-21 19:08:37	2015-09-21 19:08:37	Submitted an iteration	\N
14	15	javascript	sieve	1	done	\N	3e61aac23b799b40ac52ccc7	2015-09-20 13:06:45	2015-09-20 13:06:45	f	t	2015-09-22 09:23:49	2015-09-22 09:23:49	@russ commented	\N
15	15	ruby	word-count	3	pending	\N	e555aa26d17542cc9043605a	2015-09-19 09:56:52	2015-09-19 09:56:52	f	t	2015-09-22 02:30:19	2015-09-22 02:30:19	Submitted an iteration	\N
16	15	perl5	word-count	1	pending	\N	1fdde2547b88ac386a79a6bd	2015-09-18 09:44:01	2015-09-18 09:44:01	f	f	2015-09-19 06:55:46	2015-09-19 06:55:46	@kieran commented	\N
17	15	ruby	protein-translation	1	pending	\N	7f9ddf90d44c71aa24c4cced	2015-09-19 16:11:55	2015-09-19 16:11:55	f	f	2015-09-21 19:15:36	2015-09-21 19:15:36	@ursula commented	\N
18	15	python	grade-school	2	done	\N	c9373af80eb5fa91f6110db3	2015-09-20 02:19:08	2015-09-20 02:19:08	f	t	2015-09-20 05:57:15	2015-09-20 05:57:15	@mary commented	\N
19	15	ruby	sieve	1	pending	\N	4315849728ec73035e26bdae	2015-09-19 17:40:04	2015-09-19 17:40:04	f	f	2015-09-20 14:35:52	2015-09-20 14:35:52	Submitted an iteration	\N
20	15	python	wordy	1	pending	\N	053e920aaad80e08b287f5ee	2015-09-18 06:45:05	2015-09-18 06:45:05	f	f	2015-09-18 19:18:16	2015-09-18 19:18:16	@ruben commented	\N
21	15	ruby	saddle-points	2	pending	\N	aebeaf2b66a8e1afb115cef4	2015-09-19 00:45:24	2015-09-19 00:45:24	f	t	2015-09-21 15:25:53	2015-09-21 15:25:53	@quentin commented	\N
22	15	python	word-count	2	pending	\N	5dd76eda11cfac0a3bc008a7	2015-09-20 20:38:38	2015-09-20 20:38:38	f	t	2015-09-21 20:02:56	2015-09-21 20:02:56	Submitted an iteration	\N
23	15	python	hamming	2	pending	\N	7b33f432b21148760810c523	2015-09-19 03:16:09	2015-09-19 03:16:09	f	f	2015-09-22 07:02:27	2015-09-22 07:02:27	Submitted an iteration	\N
24	15	python	point-mutations	2	done	\N	b5e3780c2c3c59d3974c4eb9	2015-09-18 09:18:12	2015-09-18 09:18:12	f	t	2015-09-22 04:12:13	2015-09-22 04:12:13	@dawson commented	\N
25	15	ruby	roman-numerals	1	done	\N	9a3e68b2dd7b5f2175437180	2015-09-18 20:03:42	2015-09-18 20:03:42	f	t	2015-09-21 21:11:54	2015-09-21 21:11:54	@yvette commented	\N
26	15	coffeescript	bob	1	pending	\N	6cea98f804f7ee2cce98c802	2015-09-20 18:20:46	2015-09-20 18:20:46	f	f	2015-09-21 22:37:41	2015-09-21 22:37:41	Submitted an iteration	\N
27	15	python	bob	1	pending	\N	56b523f4df6e478824321a5f	2015-09-20 09:06:03	2015-09-20 09:06:03	f	f	2015-09-21 23:28:43	2015-09-21 23:28:43	@charlie commented	\N
28	15	ruby	hamming	1	pending	\N	5f598221863c0f61fdee57ad	2015-09-20 02:24:42	2015-09-20 02:24:42	f	t	2015-09-20 20:00:08	2015-09-20 20:00:08	@wilson commented	\N
29	15	fsharp	robot-name	3	done	\N	4031e99b00e4c83ce379852c	2015-09-18 11:45:00	2015-09-18 11:45:00	f	t	2015-09-20 06:38:04	2015-09-20 06:38:04	@quentin commented	\N
30	15	clojure	binary	1	done	\N	32e3a773fa89b7417b431454	2015-09-18 07:21:00	2015-09-18 07:21:00	f	t	2015-09-20 00:52:56	2015-09-20 00:52:56	@randall commented	\N
31	15	haskell	leap	4	pending	\N	8c7d814e958a0a00b331fe14	2015-09-18 04:28:10	2015-09-18 04:28:10	f	f	2015-09-21 00:47:07	2015-09-21 00:47:07	Submitted an iteration	\N
32	15	haskell	accumulate	2	done	\N	0d0438853ab9e047daa9495e	2015-09-18 06:51:33	2015-09-18 06:51:33	f	t	2015-09-20 12:25:12	2015-09-20 12:25:12	@river commented	\N
33	15	javascript	beer-song	2	done	\N	f3406541aa3cbd2133e768fc	2015-09-20 05:51:29	2015-09-20 05:51:29	f	t	2015-09-20 12:59:36	2015-09-20 12:59:36	@diana commented	\N
34	15	javascript	rna-transcription	2	done	\N	3d9064dedeb42a63923ffd91	2015-09-18 10:03:27	2015-09-18 10:03:27	f	t	2015-09-21 20:25:34	2015-09-21 20:25:34	@dawson commented	\N
35	22	scala	hamming	2	done	\N	f9168d7a7de292ccacdbabd6	2015-04-16 00:21:34	2015-04-16 00:21:34	f	t	2015-06-10 15:40:17	2015-06-10 15:40:17	@charlie commented	\N
36	22	ruby	nucleotide-count	2	pending	\N	4f403d07803221debf42d7e0	2015-04-23 10:54:16	2015-04-23 10:54:16	f	t	2015-08-21 18:54:33	2015-08-21 18:54:33	@vince commented	\N
37	22	go	leap	2	pending	\N	ed64e8a64e3c5a72cfc8d5ce	2015-05-05 18:56:19	2015-05-05 18:56:19	f	f	2015-08-02 05:39:09	2015-08-02 05:39:09	@jarrod commented	\N
38	22	python	wordy	1	pending	\N	14176799b61abea57118e3cf	2015-06-27 21:41:47	2015-06-27 21:41:47	f	f	2015-09-01 14:47:21	2015-09-01 14:47:21	@ruben commented	\N
39	22	haskell	robot-name	1	done	\N	bb2d222a2fa0d23aede9ba83	2015-07-02 05:40:43	2015-07-02 05:40:43	f	t	2015-07-13 10:29:13	2015-07-13 10:29:13	@ruben commented	\N
40	22	python	leap	3	done	\N	8b6ce2b6a49c9cee85d7e4cd	2015-04-14 01:35:38	2015-04-14 01:35:38	f	t	2015-07-15 00:08:01	2015-07-15 00:08:01	@dawson commented	\N
41	22	fsharp	robot-name	3	done	\N	73e5bd401118928829528970	2015-06-28 21:24:58	2015-06-28 21:24:58	f	t	2015-08-05 18:25:13	2015-08-05 18:25:13	@quentin commented	\N
42	22	python	bob	1	pending	\N	2c644646ff58078748026391	2015-08-11 23:42:31	2015-08-11 23:42:31	f	f	2015-09-10 00:49:00	2015-09-10 00:49:00	Submitted an iteration	\N
43	22	python	beer-song	1	pending	\N	56b733651857609197eb392a	2015-04-24 15:33:27	2015-04-24 15:33:27	f	f	2015-04-25 08:19:27	2015-04-25 08:19:27	@diana commented	\N
44	22	haskell	octal	2	done	\N	97e1f76e0060a37ac82dfbcc	2015-08-11 14:16:24	2015-08-11 14:16:24	f	t	2015-09-19 09:43:55	2015-09-19 09:43:55	Submitted an iteration	\N
45	28	python	wordy	1	pending	\N	368257d5504314b3fd825d84	2015-05-07 14:09:29	2015-05-07 14:09:29	f	f	2015-07-23 11:24:59	2015-07-23 11:24:59	@ruben commented	\N
46	29	clojure	binary	1	done	\N	7615ebf6ed57bf667db8b1e3	2015-09-17 04:23:02	2015-09-17 04:23:02	f	t	2015-09-20 00:50:44	2015-09-20 00:50:44	@randall commented	\N
47	29	ruby	roman-numerals	1	done	\N	a38f0e9ea1e1f3e6bdaed2b5	2015-08-12 23:12:09	2015-08-12 23:12:09	f	t	2015-09-11 06:03:46	2015-09-11 06:03:46	@yvette commented	\N
48	29	javascript	pythagorean-triplet	2	done	\N	d92685068eb2634d73635309	2015-08-13 13:10:28	2015-08-13 13:10:28	f	t	2015-09-08 05:51:34	2015-09-08 05:51:34	@opal commented	\N
49	29	haskell	leap	1	pending	\N	5cdbee6c77b64e8de360380f	2015-08-16 09:27:42	2015-08-16 09:27:42	f	f	2015-09-21 00:16:08	2015-09-21 00:16:08	@yvette commented	\N
50	29	python	leap	3	done	\N	720657a881afa893b7e4429c	2015-08-13 09:54:37	2015-08-13 09:54:37	f	t	2015-09-21 08:11:27	2015-09-21 08:11:27	@dawson commented	\N
51	29	fsharp	robot-name	3	done	\N	711ed65b89d88d9c91a6e2a1	2015-08-14 17:45:38	2015-08-14 17:45:38	f	t	2015-08-31 11:17:57	2015-08-31 11:17:57	@quentin commented	\N
52	31	javascript	bob	2	done	\N	42dab957631dd7cf6a2a5e3e	2015-02-26 22:38:48	2015-02-26 22:38:48	f	t	2015-08-22 01:52:27	2015-08-22 01:52:27	@yvette commented	\N
53	33	javascript	word-count	1	pending	\N	50f36964c3a006e5be0ce957	2015-09-11 21:06:44	2015-09-11 21:06:44	f	f	2015-09-16 23:20:59	2015-09-16 23:20:59	@russ commented	\N
54	33	javascript	bob	2	done	\N	59d83b2c5e62d78fb65faa99	2015-09-10 07:43:38	2015-09-10 07:43:38	f	t	2015-09-21 22:20:53	2015-09-21 22:20:53	@yvette commented	\N
55	33	python	bob	1	pending	\N	446c916bd2161af30311c069	2015-09-14 15:03:21	2015-09-14 15:03:21	f	t	2015-09-17 10:03:21	2015-09-17 10:03:21	@charlie commented	\N
56	33	javascript	sieve	1	done	\N	c395c521d970062c25fa0978	2015-09-11 07:22:50	2015-09-11 07:22:50	f	t	2015-09-15 00:54:27	2015-09-15 00:54:27	@russ commented	\N
57	38	clojure	nucleotide-count	3	done	\N	44c08c1231147c4898bf1bfa	2015-07-20 03:27:08	2015-07-20 03:27:08	f	t	2015-09-07 21:49:12	2015-09-07 21:49:12	@bob commented	\N
58	40	go	grains	1	pending	\N	9562d733365c2e0c3738f18f	2015-09-10 07:58:35	2015-09-10 07:58:35	f	f	2015-09-10 13:39:01	2015-09-10 13:39:01	@randall commented	\N
59	44	python	grade-school	1	pending	\N	b6ec15978019a1dea33ecaef	2015-02-28 03:21:47	2015-02-28 03:21:47	f	f	2015-06-10 08:38:31	2015-06-10 08:38:31	Submitted an iteration	\N
60	44	ruby	bob	2	pending	\N	4194b459fbcc75bc1ca75f1d	2015-03-08 22:54:48	2015-03-08 22:54:48	f	f	2015-06-16 04:45:30	2015-06-16 04:45:30	@alice commented	\N
61	44	perl5	simple-cipher	2	done	\N	279e6c9f726d23ca3841d485	2015-03-08 01:25:27	2015-03-08 01:25:27	f	t	2015-08-24 03:55:01	2015-08-24 03:55:01	@river commented	\N
62	44	haskell	bob	2	done	\N	a32fa7f50d94173ed4cc3052	2015-03-21 02:21:13	2015-03-21 02:21:13	f	t	2015-09-07 13:01:29	2015-09-07 13:01:29	@opal commented	\N
63	44	go	leap	2	pending	\N	dddf6111308627d370f26918	2015-02-21 15:14:18	2015-02-21 15:14:18	f	t	2015-08-21 17:22:35	2015-08-21 17:22:35	@jarrod commented	\N
64	44	python	anagram	3	pending	\N	24377fe3f772c22310f8f192	2015-03-12 10:14:24	2015-03-12 10:14:24	f	f	2015-08-31 18:58:25	2015-08-31 18:58:25	@ruben commented	\N
65	44	ruby	raindrops	1	pending	\N	5bf59531c779561be25059d6	2015-04-10 03:19:10	2015-04-10 03:19:10	f	f	2015-08-22 10:38:58	2015-08-22 10:38:58	@yvette commented	\N
66	44	haskell	nucleotide-count	3	pending	\N	d1b0ca489006c681e6913456	2015-02-25 19:41:05	2015-02-25 19:41:05	f	f	2015-09-02 23:34:06	2015-09-02 23:34:06	Submitted an iteration	\N
67	44	python	series	2	pending	\N	d69a85f08296c57931f5f592	2015-02-13 14:55:54	2015-02-13 14:55:54	f	t	2015-08-17 07:48:12	2015-08-17 07:48:12	@isaac commented	\N
68	44	ruby	secret-handshake	1	done	\N	8b274f142ae67dacb15bd5bf	2015-06-24 13:00:38	2015-06-24 13:00:38	f	t	2015-08-15 09:51:45	2015-08-15 09:51:45	@frederique commented	\N
69	44	javascript	phone-number	0	pending	\N	8be260079db9583c7e21f60e	2015-03-25 09:07:12	2015-03-25 09:07:12	f	f	2015-03-25 09:07:12	2015-03-25 09:07:12	\N	\N
70	44	haskell	word-count	2	done	\N	94956d58042ab415d7bf6cfc	2015-03-08 03:41:14	2015-03-08 03:41:14	f	t	2015-06-02 03:42:39	2015-06-02 03:42:39	@charlie commented	\N
71	44	scala	word-count	1	done	\N	0d227c60a64da5a2ec9d5d1c	2015-02-14 04:20:12	2015-02-14 04:20:12	f	t	2015-03-13 02:20:49	2015-03-13 02:20:49	@quentin commented	\N
72	44	python	luhn	1	done	\N	e4479da0942ffb45852329e1	2015-02-05 04:29:30	2015-02-05 04:29:30	f	t	2015-03-24 08:06:50	2015-03-24 08:06:50	@russ commented	\N
73	44	clojure	robot-name	1	pending	\N	44ca6a8a652b0fac6457b82a	2015-02-17 14:09:57	2015-02-17 14:09:57	f	f	2015-08-06 12:09:34	2015-08-06 12:09:34	@vince commented	\N
74	44	elixir	sublist	1	done	\N	6edbe16ce2c4eb82ecd2da6e	2015-02-22 20:13:51	2015-02-22 20:13:51	f	t	2015-09-16 19:12:46	2015-09-16 19:12:46	Submitted an iteration	\N
75	44	python	beer-song	1	pending	\N	7051cb1f57b86fc33da0a1a8	2015-02-14 06:01:08	2015-02-14 06:01:08	f	f	2015-05-24 00:59:21	2015-05-24 00:59:21	@diana commented	\N
76	44	ruby	nth-prime	1	pending	\N	a7945b919b81cef0c2376785	2015-03-31 09:40:09	2015-03-31 09:40:09	f	f	2015-07-10 04:36:48	2015-07-10 04:36:48	Submitted an iteration	\N
77	44	javascript	hamming	1	pending	\N	e9e304aa5af3a3c3fe781f64	2015-04-16 09:16:07	2015-04-16 09:16:07	f	f	2015-04-26 08:04:36	2015-04-26 08:04:36	@ruben commented	\N
78	44	ruby	protein-translation	1	pending	\N	22c2569101cdb72e43008c03	2015-03-10 13:16:46	2015-03-10 13:16:46	f	f	2015-04-01 17:20:23	2015-04-01 17:20:23	@ursula commented	\N
79	44	javascript	point-mutations	0	pending	\N	bd13a072a12c28b5afaba8e1	2015-05-12 20:59:08	2015-05-12 20:59:08	f	f	2015-05-12 20:59:08	2015-05-12 20:59:08	\N	\N
80	44	fsharp	robot-name	3	done	\N	608fc395e15a23ecf37c0e15	2015-04-04 02:29:50	2015-04-04 02:29:50	f	t	2015-08-27 01:11:52	2015-08-27 01:11:52	@quentin commented	\N
81	44	ruby	prime-factors	1	done	\N	2887f27f22023b5741ab5a0d	2015-06-06 06:53:45	2015-06-06 06:53:45	f	t	2015-07-03 16:59:19	2015-07-03 16:59:19	@opal commented	\N
82	44	python	wordy	1	pending	\N	c3b49945a63d4a69566ebcee	2015-02-27 10:18:36	2015-02-27 10:18:36	f	f	2015-06-28 14:46:31	2015-06-28 14:46:31	@ruben commented	\N
83	44	javascript	crypto-square	2	done	\N	0c330345f4a8db58530ab22f	2015-05-16 23:22:17	2015-05-16 23:22:17	f	t	2015-07-22 14:10:14	2015-07-22 14:10:14	@wilson commented	\N
84	44	haskell	accumulate	2	done	\N	436c81163166ea59f53388a4	2015-05-09 17:19:02	2015-05-09 17:19:02	f	t	2015-07-25 08:24:15	2015-07-25 08:24:15	@river commented	\N
85	46	javascript	hamming	1	pending	\N	8451d3d63ae631d665af4dff	2015-05-03 22:27:26	2015-05-03 22:27:26	f	f	2015-05-20 23:03:36	2015-05-20 23:03:36	@mia commented	\N
86	46	go	grains	1	pending	\N	578e65487ba6839f8ff0d04a	2015-03-04 07:18:52	2015-03-04 07:18:52	f	f	2015-06-21 05:47:05	2015-06-21 05:47:05	@randall commented	\N
87	48	elixir	sublist	1	done	\N	9dc5f3fbc344dfd0a4e40340	2015-08-13 17:53:46	2015-08-13 17:53:46	f	t	2015-08-22 20:10:03	2015-08-22 20:10:03	Submitted an iteration	\N
88	48	javascript	anagram	1	done	\N	2454c692dbcc32ea507198f1	2015-08-05 00:24:45	2015-08-05 00:24:45	f	t	2015-08-22 23:34:00	2015-08-22 23:34:00	@river commented	\N
89	48	haskell	octal	2	done	\N	4370ff2b89e94528f1a485cf	2015-08-24 17:11:21	2015-08-24 17:11:21	f	t	2015-09-17 10:44:44	2015-09-17 10:44:44	Submitted an iteration	\N
90	48	python	leap	3	done	\N	4efe570267c44b4c7616f320	2015-08-03 23:50:29	2015-08-03 23:50:29	f	t	2015-09-13 20:39:15	2015-09-13 20:39:15	@dawson commented	\N
91	48	python	sieve	1	pending	\N	dda6488f7a43b7417563ebcf	2015-09-05 04:54:53	2015-09-05 04:54:53	f	f	2015-09-21 10:59:50	2015-09-21 10:59:50	@alice commented	\N
92	48	ruby	twelve-days	1	pending	\N	7325e6ff92024d975fdf7820	2015-09-02 22:26:23	2015-09-02 22:26:23	f	f	2015-09-09 14:23:30	2015-09-09 14:23:30	@lisa commented	\N
93	49	ruby	nucleotide-count	3	done	\N	a61d883fef14d58122ecf2f6	2015-01-22 19:00:42	2015-01-22 19:00:42	f	t	2015-08-22 19:22:27	2015-08-22 19:22:27	@opal commented	\N
94	49	ruby	roman-numerals	1	pending	\N	2b9b90e2ae3a408a84676e23	2015-02-18 03:22:52	2015-02-18 03:22:52	f	f	2015-03-31 15:24:11	2015-03-31 15:24:11	@charlie commented	\N
144	17	python	series	2	pending	\N	2704031fc2cb18b1eb133d34	2015-06-29 10:16:00	2015-06-29 10:16:00	f	t	2015-08-26 21:34:27	2015-08-26 21:34:27	@isaac commented	\N
95	49	ruby	protein-translation	1	pending	\N	f9b1b8d931042fa50f892cba	2015-02-01 15:09:14	2015-02-01 15:09:14	f	f	2015-08-31 16:25:55	2015-08-31 16:25:55	@ursula commented	\N
96	49	ruby	sum-of-multiples	1	pending	\N	7187db57ebc13777f8d3cfe3	2015-05-17 11:34:16	2015-05-17 11:34:16	f	f	2015-08-07 22:43:24	2015-08-07 22:43:24	@isaac commented	\N
97	26	python	word-count	2	pending	\N	c1440ecf4314edd4c1c4a996	2015-08-12 20:53:28	2015-08-12 20:53:28	f	t	2015-09-11 11:30:34	2015-09-11 11:30:34	Submitted an iteration	\N
98	26	ruby	sieve	1	pending	\N	b44cdf0186807f925a4b68d7	2015-08-01 16:59:35	2015-08-01 16:59:35	f	f	2015-08-31 06:02:29	2015-08-31 06:02:29	Submitted an iteration	\N
99	26	python	wordy	1	pending	\N	0d721e9ce6f943fe490b688c	2015-08-25 23:29:19	2015-08-25 23:29:19	f	f	2015-09-17 22:02:04	2015-09-17 22:02:04	@ruben commented	\N
100	7	ruby	hamming	1	pending	\N	9c67a6b3e577ed30698ec3ce	2015-05-02 20:05:06	2015-05-02 20:05:06	f	f	2015-05-10 06:28:12	2015-05-10 06:28:12	@wilson commented	\N
101	7	fsharp	robot-name	3	done	\N	c5701f848fe1cada42f153bf	2015-05-15 03:38:39	2015-05-15 03:38:39	f	t	2015-08-15 14:54:08	2015-08-15 14:54:08	@quentin commented	\N
102	7	python	grains	2	pending	\N	895b65a20a2542fcc8d605a7	2015-04-24 00:33:02	2015-04-24 00:33:02	f	t	2015-09-13 03:07:59	2015-09-13 03:07:59	@frederique commented	\N
103	7	perl5	simple-cipher	2	done	\N	52ae3e81f8d01ca9f55f859a	2015-08-25 07:06:09	2015-08-25 07:06:09	f	t	2015-09-19 09:36:12	2015-09-19 09:36:12	@river commented	\N
104	7	ruby	kindergarten-garden	1	pending	\N	0b26534a61b0633e754837c2	2015-06-24 02:53:24	2015-06-24 02:53:24	f	f	2015-09-17 12:24:05	2015-09-17 12:24:05	@yvette commented	\N
105	7	erlang	strain	1	pending	\N	1f560252c8cd3d12c5764ed6	2015-04-09 21:00:41	2015-04-09 21:00:41	f	t	2015-07-28 00:55:50	2015-07-28 00:55:50	@norma commented	\N
106	7	javascript	point-mutations	0	pending	\N	70ad6189349e6292ba8bfb66	2015-06-04 03:31:40	2015-06-04 03:31:40	f	f	2015-06-04 03:31:40	2015-06-04 03:31:40	\N	\N
107	7	clojure	raindrops	1	pending	\N	fc9229983889cb05440d349f	2015-03-08 13:40:49	2015-03-08 13:40:49	f	f	2015-07-23 20:09:24	2015-07-23 20:09:24	@elisa commented	\N
108	7	python	wordy	1	pending	\N	2322ac14980758b8ad68b3d6	2015-03-06 10:51:19	2015-03-06 10:51:19	f	f	2015-05-17 12:22:24	2015-05-17 12:22:24	@ruben commented	\N
109	7	python	hamming	2	pending	\N	7421cfe1c133ac44f4d84e7f	2015-04-27 11:45:56	2015-04-27 11:45:56	f	f	2015-07-02 05:55:08	2015-07-02 05:55:08	Submitted an iteration	\N
110	7	clojure	nucleotide-count	3	done	\N	133a8d737fc0f7573e079b53	2015-03-14 22:57:24	2015-03-14 22:57:24	f	t	2015-07-21 01:57:25	2015-07-21 01:57:25	@bob commented	\N
111	7	javascript	gigasecond	1	pending	\N	99611bd43ef349cc20d28802	2015-03-19 15:16:05	2015-03-19 15:16:05	f	f	2015-04-02 12:13:27	2015-04-02 12:13:27	@bob commented	\N
112	7	lua	hamming	1	pending	\N	c5cb7f8ed81f5fad6a1308c2	2015-08-01 11:46:46	2015-08-01 11:46:46	f	f	2015-08-21 14:57:19	2015-08-21 14:57:19	Submitted an iteration	\N
113	7	csharp	bob	1	pending	\N	b91d67a559de83a7b179c85f	2015-06-04 20:25:01	2015-06-04 20:25:01	f	f	2015-08-04 04:54:06	2015-08-04 04:54:06	@amelie commented	\N
114	7	haskell	strain	1	pending	\N	6bfa3bc6bb60330bae92159e	2015-04-30 20:31:09	2015-04-30 20:31:09	f	f	2015-08-25 09:47:48	2015-08-25 09:47:48	@isaac commented	\N
115	7	javascript	sieve	1	done	\N	53d31383b150f5edbd8f9fa8	2015-04-05 01:15:00	2015-04-05 01:15:00	f	t	2015-08-11 20:21:13	2015-08-11 20:21:13	@russ commented	\N
116	7	haskell	bob	2	done	\N	dee2104d382dc75cd8e50c8e	2015-03-08 09:39:37	2015-03-08 09:39:37	f	t	2015-09-13 01:05:01	2015-09-13 01:05:01	@opal commented	\N
117	23	python	grade-school	2	done	\N	23d26afd00b4b429efc50fd5	2015-04-10 11:26:49	2015-04-10 11:26:49	f	t	2015-09-16 04:19:36	2015-09-16 04:19:36	@mary commented	\N
118	23	python	kindergarten-garden	1	pending	\N	cde00a39eb49be4be10411c5	2015-06-22 14:13:14	2015-06-22 14:13:14	f	f	2015-07-25 22:34:17	2015-07-25 22:34:17	Submitted an iteration	\N
119	23	haskell	leap	1	pending	\N	bb9b2a8934d0f8f7a5ee910d	2015-07-31 00:17:03	2015-07-31 00:17:03	f	f	2015-09-02 21:30:51	2015-09-02 21:30:51	@yvette commented	\N
120	17	python	kindergarten-garden	1	pending	\N	4c7b27b484d274a1fc782ca9	2015-07-09 02:27:36	2015-07-09 02:27:36	f	t	2015-08-16 05:15:40	2015-08-16 05:15:40	Submitted an iteration	\N
121	17	javascript	bob	2	pending	\N	db4fd3bcbbcc502f69b7ab1b	2015-06-10 19:48:37	2015-06-10 19:48:37	f	f	2015-08-21 05:56:07	2015-08-21 05:56:07	@opal commented	\N
122	17	javascript	hamming	1	pending	\N	5bdfd6f778cb4837ca30e1f7	2015-08-22 16:06:48	2015-08-22 16:06:48	f	f	2015-09-19 23:35:48	2015-09-19 23:35:48	@ruben commented	\N
123	17	python	point-mutations	2	done	\N	b6be59bf25948414b33b37b0	2015-07-19 17:48:36	2015-07-19 17:48:36	f	t	2015-08-14 14:30:37	2015-08-14 14:30:37	@dawson commented	\N
124	17	python	gigasecond	2	pending	\N	07492f80218332147928ef55	2015-06-05 03:34:50	2015-06-05 03:34:50	f	f	2015-07-11 10:32:46	2015-07-11 10:32:46	Submitted an iteration	\N
125	17	haskell	robot-name	1	done	\N	9551757192400b63c3415306	2015-06-12 19:33:09	2015-06-12 19:33:09	f	t	2015-06-17 01:08:25	2015-06-17 01:08:25	@ruben commented	\N
126	17	haskell	word-count	2	done	\N	2db3c86942e5fec5642ec8aa	2015-07-06 16:33:09	2015-07-06 16:33:09	f	t	2015-08-31 07:53:15	2015-08-31 07:53:15	@charlie commented	\N
127	17	lua	hamming	1	pending	\N	3311c3b0457f183fddf35d28	2015-06-18 12:31:46	2015-06-18 12:31:46	f	f	2015-07-06 07:01:10	2015-07-06 07:01:10	Submitted an iteration	\N
128	17	javascript	gigasecond	1	pending	\N	8fc39a95111ef246c5349897	2015-08-06 06:32:34	2015-08-06 06:32:34	f	f	2015-09-11 05:17:09	2015-09-11 05:17:09	@bob commented	\N
129	17	python	meetup	1	pending	\N	fda024de5ca582982642f6af	2015-06-08 12:42:51	2015-06-08 12:42:51	f	f	2015-08-02 21:44:40	2015-08-02 21:44:40	Submitted an iteration	\N
130	17	ruby	nth-prime	1	pending	\N	763a5ce69033c02f01b1a433	2015-07-23 21:26:17	2015-07-23 21:26:17	f	f	2015-09-12 15:11:58	2015-09-12 15:11:58	Submitted an iteration	\N
131	17	python	wordy	1	pending	\N	2e5d706dda8e7f078b756c66	2015-07-07 10:00:30	2015-07-07 10:00:30	f	f	2015-08-18 06:09:28	2015-08-18 06:09:28	@ruben commented	\N
132	17	haskell	octal	2	done	\N	a5b411b0ec4a17ae6eea5fe5	2015-06-11 23:06:41	2015-06-11 23:06:41	f	t	2015-09-08 20:58:24	2015-09-08 20:58:24	Submitted an iteration	\N
133	17	python	bob	1	pending	\N	2398fd4d1ef376ef4532cd14	2015-06-29 13:22:59	2015-06-29 13:22:59	f	f	2015-09-01 03:07:37	2015-09-01 03:07:37	Submitted an iteration	\N
134	17	perl5	simple-cipher	2	done	\N	45d498b06210b33726e6ae2c	2015-08-07 05:44:57	2015-08-07 05:44:57	f	t	2015-08-27 20:47:05	2015-08-27 20:47:05	@river commented	\N
135	17	ruby	roman-numerals	1	done	\N	91447f21a67f94c287f6d690	2015-06-14 23:50:49	2015-06-14 23:50:49	f	t	2015-07-26 15:02:19	2015-07-26 15:02:19	@yvette commented	\N
136	17	ruby	twelve-days	1	pending	\N	6617b10f5bc8b7a894115e62	2015-08-28 07:30:04	2015-08-28 07:30:04	f	f	2015-09-08 22:20:12	2015-09-08 22:20:12	@lisa commented	\N
137	17	ruby	nucleotide-count	2	pending	\N	d5228509248d341dbee0e884	2015-06-25 08:45:36	2015-06-25 08:45:36	f	t	2015-08-29 13:55:32	2015-08-29 13:55:32	@vince commented	\N
138	17	ruby	saddle-points	2	pending	\N	1b0db23d4fd3cc5239a854dc	2015-06-28 04:50:49	2015-06-28 04:50:49	f	f	2015-08-01 12:35:09	2015-08-01 12:35:09	@quentin commented	\N
139	17	csharp	raindrops	1	pending	\N	b341e1bb9b80b0ee65f65e98	2015-06-03 23:17:12	2015-06-03 23:17:12	f	f	2015-09-17 00:19:50	2015-09-17 00:19:50	@charlie commented	\N
140	17	ruby	hamming	3	done	\N	e3b2cce254a03268c3afac3c	2015-07-04 08:17:28	2015-07-04 08:17:28	f	t	2015-09-18 10:51:22	2015-09-18 10:51:22	@wilson commented	\N
141	17	ruby	prime-factors	1	done	\N	bf60bd6827203825b8ede94c	2015-06-27 07:04:44	2015-06-27 07:04:44	f	t	2015-08-01 10:19:46	2015-08-01 10:19:46	@opal commented	\N
142	17	haskell	roman-numerals	1	done	\N	941164d74ab24a73426bca3a	2015-08-11 16:52:14	2015-08-11 16:52:14	f	t	2015-09-11 14:28:21	2015-09-11 14:28:21	@mary commented	\N
143	17	ruby	anagram	1	done	\N	c2f48ceaf1af7cddfecd3524	2015-07-11 11:41:13	2015-07-11 11:41:13	f	t	2015-07-31 16:10:21	2015-07-31 16:10:21	@river commented	\N
145	17	ruby	grains	1	done	\N	ee4c69936681e7cace3685ea	2015-07-05 08:49:44	2015-07-05 08:49:44	f	t	2015-09-03 05:22:30	2015-09-03 05:22:30	Submitted an iteration	\N
146	17	scala	word-count	1	done	\N	68651678182fcff8905b5b9d	2015-08-11 15:37:09	2015-08-11 15:37:09	f	t	2015-08-28 22:38:29	2015-08-28 22:38:29	@quentin commented	\N
147	17	go	leap	2	pending	\N	cc1e6692de54f28ea27335f3	2015-07-07 01:21:59	2015-07-07 01:21:59	f	f	2015-09-17 17:48:54	2015-09-17 17:48:54	Submitted an iteration	\N
148	20	python	bob	1	pending	\N	8ddbfff1b176b915a2962a1a	2015-07-27 15:53:53	2015-07-27 15:53:53	f	t	2015-07-29 21:53:31	2015-07-29 21:53:31	@ursula commented	\N
149	21	ruby	nucleotide-count	2	pending	\N	1b0bb39eb11199a5945f430f	2015-04-30 15:52:15	2015-04-30 15:52:15	f	t	2015-07-13 21:39:26	2015-07-13 21:39:26	@vince commented	\N
150	21	python	hamming	2	pending	\N	579a8101165162518a3dc916	2015-02-22 07:02:42	2015-02-22 07:02:42	f	t	2015-09-21 13:16:00	2015-09-21 13:16:00	Submitted an iteration	\N
151	21	scala	hamming	2	done	\N	c4ce6fdedafe449d0747e76b	2015-08-03 10:13:41	2015-08-03 10:13:41	f	t	2015-09-10 11:48:55	2015-09-10 11:48:55	@charlie commented	\N
152	21	python	kindergarten-garden	1	pending	\N	ce6d86cf6b61ec8faf150a4d	2015-05-05 01:47:45	2015-05-05 01:47:45	f	f	2015-09-07 23:59:53	2015-09-07 23:59:53	Submitted an iteration	\N
153	21	ruby	secret-handshake	1	done	\N	7868c28f223f0c745cc32b43	2015-03-20 01:13:39	2015-03-20 01:13:39	f	t	2015-05-07 19:01:38	2015-05-07 19:01:38	@frederique commented	\N
154	36	haskell	robot-name	1	done	\N	ef9a1c167c118b7e444bbaab	2015-03-04 14:26:02	2015-03-04 14:26:02	f	t	2015-06-25 04:43:16	2015-06-25 04:43:16	@ruben commented	\N
155	36	python	bob	1	pending	\N	d58aea257120d73ae6fce886	2015-06-30 15:45:55	2015-06-30 15:45:55	f	f	2015-09-10 18:56:24	2015-09-10 18:56:24	@charlie commented	\N
156	36	ruby	secret-handshake	1	done	\N	1a85034c8835994eb1277ee2	2015-03-04 17:44:57	2015-03-04 17:44:57	f	t	2015-09-21 06:48:56	2015-09-21 06:48:56	@frederique commented	\N
157	36	ruby	word-count	3	pending	\N	38f30971c63f03f40b5adc5d	2015-03-17 04:53:46	2015-03-17 04:53:46	f	t	2015-06-22 22:58:25	2015-06-22 22:58:25	Submitted an iteration	\N
158	36	javascript	word-count	1	pending	\N	e8803b28e322604315f4ff76	2015-07-08 22:33:03	2015-07-08 22:33:03	f	t	2015-09-15 09:01:39	2015-09-15 09:01:39	@russ commented	\N
159	30	perl5	simple-cipher	2	done	\N	c4ee740d019d05f792c1b3ab	2015-09-16 17:24:50	2015-09-16 17:24:50	f	t	2015-09-19 03:40:19	2015-09-19 03:40:19	@river commented	\N
160	30	haskell	accumulate	2	done	\N	273d95a3129156f77410c13e	2015-09-17 00:24:12	2015-09-17 00:24:12	f	t	2015-09-19 21:39:30	2015-09-19 21:39:30	@river commented	\N
161	30	python	series	2	pending	\N	760ab8cf23eba5f287626bd1	2015-09-19 18:53:51	2015-09-19 18:53:51	f	t	2015-09-21 14:36:37	2015-09-21 14:36:37	@isaac commented	\N
162	30	go	diffie-hellman	1	done	\N	4b21ad8d157cfc7a7fab1787	2015-09-16 12:10:37	2015-09-16 12:10:37	f	t	2015-09-22 07:21:03	2015-09-22 07:21:03	Submitted an iteration	\N
163	30	python	wordy	1	pending	\N	85d51087d8da705ad0684fe0	2015-09-16 15:26:22	2015-09-16 15:26:22	f	f	2015-09-20 04:04:50	2015-09-20 04:04:50	@ruben commented	\N
164	30	javascript	pythagorean-triplet	2	done	\N	c7935f0a0b064afa5fde8d72	2015-09-18 10:04:22	2015-09-18 10:04:22	f	t	2015-09-19 19:07:43	2015-09-19 19:07:43	@opal commented	\N
165	30	ruby	bob	1	done	\N	416fd988eccfd1f12d74151a	2015-09-18 22:36:39	2015-09-18 22:36:39	f	t	2015-09-21 06:50:23	2015-09-21 06:50:23	@norma commented	\N
166	30	python	point-mutations	2	done	\N	0ff050ff1b9384191ebea7f6	2015-09-18 16:53:20	2015-09-18 16:53:20	f	t	2015-09-20 16:00:14	2015-09-20 16:00:14	@dawson commented	\N
167	30	clojure	binary	1	done	\N	e6c2f88669b555c3730d9816	2015-09-18 07:06:24	2015-09-18 07:06:24	f	t	2015-09-20 23:49:16	2015-09-20 23:49:16	@randall commented	\N
168	30	javascript	sieve	1	done	\N	6bb34e8f3edc1b0bca5397f7	2015-09-19 14:57:34	2015-09-19 14:57:34	f	t	2015-09-22 01:15:02	2015-09-22 01:15:02	@russ commented	\N
169	30	ruby	nucleotide-count	2	pending	\N	351efff5fe8f460eb9ded214	2015-09-16 07:52:22	2015-09-16 07:52:22	f	t	2015-09-20 20:23:35	2015-09-20 20:23:35	@vince commented	\N
170	30	ruby	roman-numerals	1	pending	\N	c581a81c1c7cc853e0ec8f6c	2015-09-19 11:42:01	2015-09-19 11:42:01	f	f	2015-09-19 18:27:29	2015-09-19 18:27:29	@charlie commented	\N
171	30	python	anagram	3	pending	\N	0eb9db55aa8781e705a2b0cc	2015-09-16 10:44:16	2015-09-16 10:44:16	f	t	2015-09-21 14:38:08	2015-09-21 14:38:08	@ruben commented	\N
172	30	python	bob	1	pending	\N	cb7a1cbb85a9fc36b463afd1	2015-09-18 07:01:28	2015-09-18 07:01:28	f	f	2015-09-18 22:25:50	2015-09-18 22:25:50	Submitted an iteration	\N
173	30	ruby	saddle-points	2	pending	\N	77a7c98a14e9b8b7e90e8d32	2015-09-17 18:39:44	2015-09-17 18:39:44	f	f	2015-09-20 16:28:05	2015-09-20 16:28:05	@quentin commented	\N
174	30	ruby	protein-translation	1	pending	\N	989e214bee57d27ccd317b57	2015-09-16 17:54:41	2015-09-16 17:54:41	f	f	2015-09-19 00:37:11	2015-09-19 00:37:11	@ursula commented	\N
175	30	clojure	robot-name	1	pending	\N	caff88693deae4fbd9e14314	2015-09-20 10:08:45	2015-09-20 10:08:45	f	f	2015-09-21 15:28:57	2015-09-21 15:28:57	@vince commented	\N
176	35	javascript	crypto-square	2	done	\N	bce1e562bc58ef33fcee8ebc	2015-08-04 10:19:58	2015-08-04 10:19:58	f	t	2015-09-13 22:09:19	2015-09-13 22:09:19	@wilson commented	\N
177	35	ruby	hamming	1	pending	\N	ec498c944864bff42b210c2d	2015-08-30 16:26:47	2015-08-30 16:26:47	f	f	2015-08-31 20:38:59	2015-08-31 20:38:59	@wilson commented	\N
178	35	fsharp	robot-name	3	done	\N	270852b57ac640080daf86aa	2015-08-05 05:05:43	2015-08-05 05:05:43	f	t	2015-08-25 12:18:43	2015-08-25 12:18:43	@quentin commented	\N
179	35	javascript	phone-number	0	pending	\N	a574db9aaf4d80bfee40eaf8	2015-09-02 05:01:26	2015-09-02 05:01:26	f	f	2015-09-02 05:01:26	2015-09-02 05:01:26	\N	\N
180	14	ruby	raindrops	1	pending	\N	5fe2467179179b82e3d74503	2015-09-12 11:53:00	2015-09-12 11:53:00	f	f	2015-09-17 15:29:04	2015-09-17 15:29:04	@vince commented	\N
181	14	haskell	octal	2	done	\N	33c5bb74df88c9ba5abe1211	2015-08-25 06:13:58	2015-08-25 06:13:58	f	t	2015-09-15 14:29:58	2015-09-15 14:29:58	Submitted an iteration	\N
182	41	python	kindergarten-garden	1	pending	\N	41a5d87a2b175ddbaff58870	2015-04-13 02:30:52	2015-04-13 02:30:52	f	f	2015-05-12 11:45:51	2015-05-12 11:45:51	Submitted an iteration	\N
183	41	ruby	say	1	done	\N	b7fc64a32f5b72eb70f4d1b0	2015-03-14 22:07:05	2015-03-14 22:07:05	f	t	2015-07-23 02:08:06	2015-07-23 02:08:06	@quentin commented	\N
184	41	csharp	raindrops	1	pending	\N	032eaef5f895f4ed426a29e9	2015-04-18 08:24:10	2015-04-18 08:24:10	f	f	2015-07-28 17:20:04	2015-07-28 17:20:04	@charlie commented	\N
185	41	python	meetup	1	pending	\N	0631997340893af8e6afcd22	2015-06-23 18:21:19	2015-06-23 18:21:19	f	f	2015-08-20 20:12:38	2015-08-20 20:12:38	Submitted an iteration	\N
186	41	ruby	bob	2	pending	\N	f0fb3f29280ffe92f7d83e9a	2015-02-14 21:03:54	2015-02-14 21:03:54	f	f	2015-05-24 10:45:12	2015-05-24 10:45:12	@alice commented	\N
187	41	perl5	simple-cipher	2	done	\N	c52c4ad99b3316a07b68d185	2015-03-17 07:00:53	2015-03-17 07:00:53	f	t	2015-08-15 11:09:59	2015-08-15 11:09:59	@river commented	\N
188	6	ruby	hamming	1	pending	\N	afae2c11be6b0e072571b565	2015-07-16 22:49:26	2015-07-16 22:49:26	f	f	2015-09-09 05:25:44	2015-09-09 05:25:44	Submitted an iteration	\N
189	6	haskell	leap	1	pending	\N	d31f4afd1967d51482fa9b42	2015-08-14 11:02:44	2015-08-14 11:02:44	f	f	2015-09-11 03:29:59	2015-09-11 03:29:59	@yvette commented	\N
190	6	haskell	simple-linked-list	2	pending	\N	04f6700e5922f64947600847	2015-04-10 22:07:45	2015-04-10 22:07:45	f	f	2015-09-12 02:45:21	2015-09-12 02:45:21	@quentin commented	\N
191	6	javascript	sieve	1	done	\N	6cf89f137d2f6ae173fef8e1	2015-05-22 20:44:13	2015-05-22 20:44:13	f	t	2015-07-23 15:08:49	2015-07-23 15:08:49	@russ commented	\N
192	34	haskell	simple-linked-list	2	pending	\N	f633883eea8b2a55322437ba	2015-06-17 07:53:02	2015-06-17 07:53:02	f	f	2015-07-20 08:41:40	2015-07-20 08:41:40	@quentin commented	\N
193	34	haskell	word-count	2	done	\N	74d06a9a89b99170d1fc1f50	2015-07-10 18:30:29	2015-07-10 18:30:29	f	t	2015-08-23 14:24:01	2015-08-23 14:24:01	@charlie commented	\N
194	34	python	grade-school	2	done	\N	6b6a0d80a0711c04a74d3ba4	2015-06-24 11:43:48	2015-06-24 11:43:48	f	t	2015-09-16 18:28:20	2015-09-16 18:28:20	@mary commented	\N
195	34	ruby	roman-numerals	1	done	\N	08ed6c8073d09c8f4e2f162c	2015-07-28 09:54:30	2015-07-28 09:54:30	f	t	2015-08-09 11:49:58	2015-08-09 11:49:58	@yvette commented	\N
196	34	csharp	raindrops	1	pending	\N	c4444bc30746926e59e41999	2015-07-26 01:59:08	2015-07-26 01:59:08	f	f	2015-07-26 08:33:25	2015-07-26 08:33:25	@charlie commented	\N
197	34	javascript	hamming	1	pending	\N	754865e244b3ecd2b81c676c	2015-08-26 01:11:33	2015-08-26 01:11:33	f	f	2015-09-18 13:46:43	2015-09-18 13:46:43	@ruben commented	\N
198	16	python	leap	2	pending	\N	8a3fc77e375387cd64cf5235	2015-05-12 23:07:24	2015-05-12 23:07:24	f	t	2015-06-02 23:36:04	2015-06-02 23:36:04	@mary commented	\N
199	16	python	wordy	1	pending	\N	c5b69d42f5401734ea9cb33d	2015-05-21 12:47:20	2015-05-21 12:47:20	f	f	2015-08-04 08:23:27	2015-08-04 08:23:27	@ruben commented	\N
200	16	haskell	strain	1	pending	\N	ffd9c7046dea07541f2aaef0	2015-05-09 05:49:38	2015-05-09 05:49:38	f	f	2015-07-16 14:16:34	2015-07-16 14:16:34	@isaac commented	\N
201	16	elixir	sublist	1	done	\N	a264db119cd98a12108ae7cd	2015-07-04 02:01:05	2015-07-04 02:01:05	f	t	2015-09-05 12:22:02	2015-09-05 12:22:02	Submitted an iteration	\N
202	16	ruby	say	1	done	\N	22c1699b71d19ec89435a88e	2015-08-09 17:43:41	2015-08-09 17:43:41	f	t	2015-08-30 18:55:17	2015-08-30 18:55:17	@quentin commented	\N
203	16	lua	hamming	1	pending	\N	62e1688d4467ba433f5e68d0	2015-05-16 12:53:54	2015-05-16 12:53:54	f	f	2015-09-04 05:38:24	2015-09-04 05:38:24	Submitted an iteration	\N
204	16	javascript	hamming	1	pending	\N	03a2d67825042b053ec04476	2015-07-23 17:10:36	2015-07-23 17:10:36	f	f	2015-08-31 05:37:20	2015-08-31 05:37:20	@mia commented	\N
205	18	ruby	hamming	1	pending	\N	5b3264898e5f5dbbfe6b9035	2015-05-18 01:09:04	2015-05-18 01:09:04	f	f	2015-08-23 04:26:47	2015-08-23 04:26:47	@wilson commented	\N
206	18	ruby	twelve-days	1	pending	\N	da1280abed658ff39350dfe0	2015-05-22 09:14:25	2015-05-22 09:14:25	f	f	2015-07-11 13:15:23	2015-07-11 13:15:23	@lisa commented	\N
207	18	ruby	nucleotide-count	2	pending	\N	7e5ad8fae7b6bf4383ff5333	2015-05-17 05:42:53	2015-05-17 05:42:53	f	f	2015-09-06 05:42:19	2015-09-06 05:42:19	@vince commented	\N
208	18	lua	hamming	1	pending	\N	885a7db45add7587b736a97d	2015-06-22 19:58:32	2015-06-22 19:58:32	f	f	2015-06-29 17:36:56	2015-06-29 17:36:56	Submitted an iteration	\N
209	18	python	grade-school	1	pending	\N	1c87aada4a7162abf0d255bc	2015-05-22 21:46:25	2015-05-22 21:46:25	f	f	2015-06-12 12:54:45	2015-06-12 12:54:45	Submitted an iteration	\N
210	24	ruby	say	1	done	\N	1ce557684cf7a57cdb25d1a2	2015-07-23 03:48:33	2015-07-23 03:48:33	f	t	2015-08-19 07:34:21	2015-08-19 07:34:21	@quentin commented	\N
211	42	javascript	phone-number	0	pending	\N	de1efcdb1be53e92a2d1b1ca	2015-08-17 18:32:25	2015-08-17 18:32:25	f	f	2015-08-17 18:32:25	2015-08-17 18:32:25	\N	\N
212	42	haskell	bob	2	done	\N	91d4d12cc21fdaea6a4788fe	2015-03-13 20:55:55	2015-03-13 20:55:55	f	t	2015-09-20 17:52:12	2015-09-20 17:52:12	@opal commented	\N
213	27	ruby	saddle-points	2	pending	\N	442adb7419240a69201ff9ea	2015-07-23 14:43:10	2015-07-23 14:43:10	f	f	2015-08-13 23:49:33	2015-08-13 23:49:33	@quentin commented	\N
214	45	python	grade-school	1	pending	\N	3830fbe3a087e7be8fccb510	2015-09-02 09:18:20	2015-09-02 09:18:20	f	f	2015-09-16 09:55:22	2015-09-16 09:55:22	Submitted an iteration	\N
\.


--
-- Name: user_exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('user_exercises_id_seq', 214, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY users (id, username, email, avatar_url, github_id, key, mastery, created_at, updated_at, onboarded_at) FROM stdin;
1	rikki-	rikki-@example.com	https://avatars.githubusercontent.com/u/8341419	8341419	ogq669	--- []\n	2015-03-27 06:20:27.271538	2015-03-27 06:20:27.271538	\N
6	amelie	amelie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/funwatercat/128.jpg	-75351	fen263	--- []\n	2015-04-03 01:40:20.298702	2015-04-03 01:40:20.298702	\N
7	beth	beth@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/damenleeturks/128.jpg	-88991	jej420	--- []\n	2015-03-05 13:18:59.301471	2015-03-05 13:18:59.301471	\N
8	claire	claire@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/chandlervdw/128.jpg	-922	sjb527	--- []\n	2015-06-25 09:55:23.304145	2015-06-25 09:55:23.304145	\N
10	eve	eve@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/andrea211087/128.jpg	-53783	zov260	--- []\n	2015-08-23 03:52:58.308914	2015-08-23 03:52:58.308914	\N
13	grace	grace@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/h1brd/128.jpg	-40264	wzh181	--- []\n	2015-07-05 15:45:12.316293	2015-07-05 15:45:12.316293	\N
14	haley	haley@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/guillemboti/128.jpg	-88832	uso683	--- []\n	2015-08-17 17:42:17.318309	2015-08-17 17:42:17.318309	\N
16	jarrod	jarrod@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/shaneIxD/128.jpg	-55520	qpe813	--- []\n	2015-05-01 18:57:44.324926	2015-05-01 18:57:44.324926	\N
17	kieran	kieran@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/chadengle/128.jpg	-27272	wxg976	--- []\n	2015-06-01 22:15:39.328421	2015-06-01 22:15:39.328421	\N
18	lisa	lisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/josemarques/128.jpg	-90970	mev723	--- []\n	2015-05-13 08:18:48.331926	2015-05-13 08:18:48.331926	\N
19	mack	mack@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mikemai2awesome/128.jpg	-61494	ljl180	--- []\n	2015-05-06 00:56:03.335744	2015-05-06 00:56:03.335744	\N
20	madison	madison@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/increase/128.jpg	-41276	jbu971	--- []\n	2015-07-05 19:16:44.339301	2015-07-05 19:16:44.339301	\N
21	marshall	marshall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ooomz/128.jpg	-3545	ngk176	--- []\n	2015-01-29 19:32:27.342714	2015-01-29 19:32:27.342714	\N
23	mia	mia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/felipecsl/128.jpg	-35960	mjz764	--- []\n	2015-03-28 14:03:54.347965	2015-03-28 14:03:54.347965	\N
24	mike	mike@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mikemai2awesome/128.jpg	-90476	uxy991	--- []\n	2015-06-07 18:55:42.350533	2015-06-07 18:55:42.350533	\N
25	mildred	mildred@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/stan/128.jpg	-30364	hnl180	--- []\n	2015-05-22 20:12:10.353137	2015-05-22 20:12:10.353137	\N
26	mitchell	mitchell@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/alxndrustinov/128.jpg	-66192	pzz319	--- []\n	2015-07-09 05:46:13.355754	2015-07-09 05:46:13.355754	\N
27	morris	morris@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/dingyi/128.jpg	-42440	esc945	--- []\n	2015-05-03 15:51:53.362034	2015-05-03 15:51:53.362034	\N
30	paula	paula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/marcobarbosa/128.jpg	-43441	mkk258	--- []\n	2015-09-15 23:44:28.37109	2015-09-15 23:44:28.37109	\N
32	rachel	rachel@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/bassamology/128.jpg	-36093	oyc730	--- []\n	2015-03-03 08:05:46.376272	2015-03-03 08:05:46.376272	\N
34	rick	rick@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/cdharrison/128.jpg	-1973	zri898	--- []\n	2015-06-11 16:34:42.381433	2015-06-11 16:34:42.381433	\N
35	rita	rita@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/BrianPurkiss/128.jpg	-86863	wdp680	--- []\n	2015-07-14 05:26:54.384021	2015-07-14 05:26:54.384021	\N
36	river	river@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/salleedesign/128.jpg	-17767	oje630	--- []\n	2015-02-19 23:46:46.386634	2015-02-19 23:46:46.386634	\N
37	rolf	rolf@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/bradenhamm/128.jpg	-88143	ozc825	--- []\n	2015-05-17 17:34:37.389311	2015-05-17 17:34:37.389311	\N
39	rudi	rudi@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/timothycd/128.jpg	-21882	mtf993	--- []\n	2015-09-21 17:09:26.394567	2015-09-21 17:09:26.394567	\N
41	ryan	ryan@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/brajeshwar/128.jpg	-94439	ycj489	--- []\n	2015-02-09 04:13:22.398786	2015-02-09 04:13:22.398786	\N
42	shaina	shaina@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/exentrich/128.jpg	-47886	gnv235	--- []\n	2015-02-03 05:10:23.401384	2015-02-03 05:10:23.401384	\N
43	talia	talia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/victorerixon/128.jpg	-54375	cku918	--- []\n	2015-03-02 22:22:02.403921	2015-03-02 22:22:02.403921	\N
45	vince	vince@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/joaoedumedeiros/128.jpg	-31656	exq997	--- []\n	2015-08-21 22:25:41.409015	2015-08-21 22:25:41.409015	\N
47	xavier	xavier@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/wr/128.jpg	-78537	ayw621	--- []\n	2015-06-15 16:33:47.414083	2015-06-15 16:33:47.414083	\N
44	ursula	ursula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ehsandiary/128.jpg	-31239	mqg641	--- []\n	2015-02-04 12:29:38.406485	2015-02-04 12:29:38.406485	2015-05-14 20:39:43
15	isaac	isaac@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jakemoore/128.jpg	-33298	tmf590	--- []\n	2015-09-18 04:24:20.321727	2015-09-18 04:24:20.321727	2015-04-21 10:56:13
12	frederique	frederique@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/herrhaase/128.jpg	-73917	igu218	--- []\n	2015-08-04 00:46:01.313488	2015-08-04 00:46:01.313488	2015-05-06 17:48:20
4	charlie	charlie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sindresorhus/128.jpg	-45006	zog744	---\n- javascript\n- erlang\n- elixir\n	2015-03-15 01:15:19.294543	2015-03-15 01:15:19.294543	2015-04-28 07:49:46
9	dawson	dawson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sindresorhus/128.jpg	-32232	arr494	--- []\n	2015-07-01 02:34:11.306083	2015-07-01 02:34:11.306083	2015-05-17 16:38:59
31	quentin	quentin@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/axel/128.jpg	-54906	dss303	--- []\n	2015-02-14 16:25:31.373689	2015-02-14 16:25:31.373689	2015-06-24 05:34:15
49	zachary	zachary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/RussellBishop/128.jpg	-52159	yja894	--- []\n	2015-01-07 20:07:17.418811	2015-01-07 20:07:17.418811	\N
22	mary	mary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/scottkclark/128.jpg	-14841	klb247	--- []\n	2015-04-08 20:31:21.34541	2015-04-08 20:31:21.34541	2015-04-15 21:50:45
38	ruben	ruben@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/catarino/128.jpg	-98342	mqw906	--- []\n	2015-06-28 14:59:38.391956	2015-06-28 14:59:38.391956	2015-04-21 15:54:29
11	elisa	elisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/dunenkoff/128.jpg	-34104	gsd278	--- []\n	2015-07-22 18:34:49.310766	2015-07-22 18:34:49.310766	2015-04-18 16:40:58
48	yvette	yvette@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kinday/128.jpg	-34744	cfl815	--- []\n	2015-08-01 15:47:39.415709	2015-08-01 15:47:39.415709	2015-05-09 08:22:14
40	russ	russ@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/krasnoukhov/128.jpg	-87703	ciu469	--- []\n	2015-08-28 12:23:45.396239	2015-08-28 12:23:45.396239	2015-06-11 02:53:50
33	randall	randall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/chatyrko/128.jpg	-81239	unj115	--- []\n	2015-09-09 08:40:32.378804	2015-09-09 08:40:32.378804	2015-04-21 16:05:07
28	norma	norma@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/tomaslau/128.jpg	-17151	yan284	--- []\n	2015-01-29 11:59:30.36518	2015-01-29 11:59:30.36518	2015-06-08 18:20:26
2	alice	alice@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/unterdreht/128.jpg	-10892	rph406	---\n- clojure\n- coffeescript\n- elixir\n- go\n- haskell\n- javascript\n- objective-c\n- ocaml\n- perl5\n- python\n- ruby\n- scala\n	2015-04-06 13:41:52.289665	2015-04-06 13:41:52.289665	2015-06-18 09:35:33
3	bob	bob@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/andrewcohen/128.jpg	-39376	cdt906	---\n- ruby\n- haskell\n	2015-01-28 20:01:00.292355	2015-01-28 20:01:00.292355	2015-05-26 08:28:44
5	diana	diana@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/rickdt/128.jpg	-71574	zie735	---\n- python\n	2015-05-16 22:34:00.296717	2015-05-16 22:34:00.296717	2015-05-13 20:13:37
29	opal	opal@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/simobenso/128.jpg	-74700	uui408	--- []\n	2015-08-12 17:44:56.368515	2015-08-12 17:44:56.368515	2015-04-27 13:04:36
46	wilson	wilson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/robbschiller/128.jpg	-69038	smq248	--- []\n	2014-12-31 22:40:38.411536	2014-12-31 22:40:38.411536	2015-04-27 13:20:32
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('users_id_seq', 49, true);


--
-- Data for Name: views; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY views (id, user_id, exercise_id, last_viewed_at, created_at, updated_at) FROM stdin;
\.


--
-- Name: views_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('views_id_seq', 1, false);


--
-- PostgreSQL database dump complete
--

