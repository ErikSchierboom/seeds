--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

--
-- Data for Name: alerts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY alerts (id, user_id, text, url, link_text, read, created_at, updated_at) FROM stdin;
1	15	jarrod would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-04-24 15:15:31	2014-04-24 15:15:31
2	16	kieran would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-06-18 06:08:54	2014-06-18 06:08:54
3	28	opal would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-07-01 01:44:35	2014-07-01 01:44:35
4	31	rachel would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-23 22:14:33	2014-03-23 22:14:33
5	37	ruben would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-13 08:27:52	2014-03-13 08:27:52
6	41	shaina would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-03-02 12:03:18	2014-03-02 12:03:18
7	42	talia would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-04-28 12:37:59	2014-04-28 12:37:59
8	46	xavier would like you to join the team baconesia. You can accept the invitation	/account	on your account page.	f	2014-05-29 02:10:06	2014-05-29 02:10:06
9	18	mack would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-07-22 12:30:50	2014-07-22 12:30:50
10	37	ruben would like you to join the team chocolades. You can accept the invitation	/account	on your account page.	f	2014-07-25 08:03:37	2014-07-25 08:03:37
11	37	ruben would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-03-22 10:31:17	2014-03-22 10:31:17
12	2	bob would like you to join the team ghost. You can accept the invitation	/account	on your account page.	f	2014-07-23 11:36:16	2014-07-23 11:36:16
13	37	ruben would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-07-16 07:28:20	2014-07-16 07:28:20
14	11	frederique would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-07-16 18:52:21	2014-07-16 18:52:21
15	13	haley would like you to join the team motley. You can accept the invitation	/account	on your account page.	f	2014-07-09 15:41:47	2014-07-09 15:41:47
16	40	ryan would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-07-26 16:47:07	2014-07-26 16:47:07
17	37	ruben would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-07-20 09:22:48	2014-07-20 09:22:48
18	2	bob would like you to join the team rugrats. You can accept the invitation	/account	on your account page.	f	2014-07-22 08:12:56	2014-07-22 08:12:56
19	37	ruben would like you to join the team polkadots. You can accept the invitation	/account	on your account page.	f	2014-06-17 20:14:00	2014-06-17 20:14:00
\.


--
-- Name: alerts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('alerts_id_seq', 19, true);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comments (id, user_id, submission_id, body, html_body, created_at, updated_at) FROM stdin;
1	8	3	A COMMENT	\N	2014-06-11 00:03:51	2014-06-11 00:03:51
2	10	4	A COMMENT	\N	2014-06-25 16:53:26	2014-06-25 16:53:26
3	10	5	A COMMENT	\N	2014-07-15 20:49:29	2014-07-15 20:49:29
4	10	11	A COMMENT	\N	2014-06-07 04:12:23	2014-06-07 04:12:23
5	11	13	A COMMENT	\N	2014-07-10 23:49:10	2014-07-10 23:49:10
6	14	23	A COMMENT	\N	2013-11-05 20:53:44	2013-11-05 20:53:44
7	14	24	A COMMENT	\N	2014-01-11 12:54:44	2014-01-11 12:54:44
8	21	31	A COMMENT	\N	2014-06-27 04:34:40	2014-06-27 04:34:40
9	27	37	A COMMENT	\N	2013-12-01 15:05:44	2013-12-01 15:05:44
10	28	41	A COMMENT	\N	2014-05-02 19:11:20	2014-05-02 19:11:20
11	30	44	A COMMENT	\N	2014-03-23 17:04:01	2014-03-23 17:04:01
12	30	47	A COMMENT	\N	2014-02-28 16:52:49	2014-02-28 16:52:49
13	30	52	A COMMENT	\N	2014-03-15 07:56:27	2014-03-15 07:56:27
14	30	56	A COMMENT	\N	2014-03-02 03:08:22	2014-03-02 03:08:22
15	30	60	A COMMENT	\N	2014-03-08 21:22:52	2014-03-08 21:22:52
16	30	69	A COMMENT	\N	2014-03-15 17:50:54	2014-03-15 17:50:54
17	30	73	A COMMENT	\N	2014-03-04 12:40:59	2014-03-04 12:40:59
18	30	74	A COMMENT	\N	2014-03-05 18:20:31	2014-03-05 18:20:31
19	30	77	A COMMENT	\N	2014-05-05 06:56:38	2014-05-05 06:56:38
20	30	79	A COMMENT	\N	2014-05-16 12:18:09	2014-05-16 12:18:09
21	30	81	A COMMENT	\N	2014-05-16 02:55:57	2014-05-16 02:55:57
22	30	86	A COMMENT	\N	2014-06-11 00:16:54	2014-06-11 00:16:54
23	30	87	A COMMENT	\N	2014-03-23 22:43:50	2014-03-23 22:43:50
24	30	91	A COMMENT	\N	2014-04-17 19:18:04	2014-04-17 19:18:04
25	39	99	A COMMENT	\N	2014-07-04 00:27:11	2014-07-04 00:27:11
26	45	102	A COMMENT	\N	2014-06-20 14:32:48	2014-06-20 14:32:48
27	45	108	A COMMENT	\N	2014-06-25 11:35:27	2014-06-25 11:35:27
28	47	109	A COMMENT	\N	2014-05-25 03:10:52	2014-05-25 03:10:52
29	47	110	A COMMENT	\N	2014-07-02 22:14:44	2014-07-02 22:14:44
30	47	111	A COMMENT	\N	2014-07-10 13:59:30	2014-07-10 13:59:30
31	47	114	A COMMENT	\N	2014-06-03 09:04:01	2014-06-03 09:04:01
32	48	121	A COMMENT	\N	2014-04-02 20:12:09	2014-04-02 20:12:09
33	48	123	A COMMENT	\N	2014-04-05 18:53:39	2014-04-05 18:53:39
34	6	132	A COMMENT	\N	2013-12-24 06:58:17	2013-12-24 06:58:17
35	6	134	A COMMENT	\N	2014-05-11 23:04:35	2014-05-11 23:04:35
36	6	141	A COMMENT	\N	2013-12-12 14:03:41	2013-12-12 14:03:41
37	6	149	A COMMENT	\N	2014-01-06 07:31:54	2014-01-06 07:31:54
38	6	153	A COMMENT	\N	2014-04-20 20:24:37	2014-04-20 20:24:37
39	6	154	A COMMENT	\N	2014-04-23 18:41:36	2014-04-23 18:41:36
40	6	155	A COMMENT	\N	2014-04-29 23:09:44	2014-04-29 23:09:44
41	22	166	A COMMENT	\N	2014-07-16 12:38:17	2014-07-16 12:38:17
42	22	171	A COMMENT	\N	2014-07-07 21:37:37	2014-07-07 21:37:37
43	22	172	A COMMENT	\N	2014-07-15 19:16:06	2014-07-15 19:16:06
44	22	174	A COMMENT	\N	2014-07-15 10:46:40	2014-07-15 10:46:40
45	22	176	A COMMENT	\N	2014-07-12 09:24:38	2014-07-12 09:24:38
46	22	177	A COMMENT	\N	2014-07-20 17:23:12	2014-07-20 17:23:12
47	16	179	A COMMENT	\N	2014-07-03 14:57:08	2014-07-03 14:57:08
48	16	181	A COMMENT	\N	2014-06-12 08:12:02	2014-06-12 08:12:02
49	16	183	A COMMENT	\N	2014-06-30 20:51:33	2014-06-30 20:51:33
50	16	186	A COMMENT	\N	2014-07-02 08:30:54	2014-07-02 08:30:54
51	16	187	A COMMENT	\N	2014-06-15 06:47:55	2014-06-15 06:47:55
52	19	192	A COMMENT	\N	2014-06-21 13:41:56	2014-06-21 13:41:56
53	19	194	A COMMENT	\N	2014-07-18 06:09:17	2014-07-18 06:09:17
54	19	195	A COMMENT	\N	2014-05-25 08:50:27	2014-05-25 08:50:27
55	19	196	A COMMENT	\N	2014-06-10 10:50:02	2014-06-10 10:50:02
56	19	197	A COMMENT	\N	2014-04-26 17:30:45	2014-04-26 17:30:45
57	20	200	A COMMENT	\N	2014-05-29 03:34:42	2014-05-29 03:34:42
58	35	209	A COMMENT	\N	2013-12-25 19:00:58	2013-12-25 19:00:58
59	34	227	A COMMENT	\N	2014-03-29 13:02:14	2014-03-29 13:02:14
60	13	236	A COMMENT	\N	2014-07-06 02:27:27	2014-07-06 02:27:27
61	13	237	A COMMENT	\N	2014-07-16 16:00:35	2014-07-16 16:00:35
62	40	240	A COMMENT	\N	2014-04-13 23:22:22	2014-04-13 23:22:22
63	40	242	A COMMENT	\N	2014-05-27 06:51:51	2014-05-27 06:51:51
64	40	245	A COMMENT	\N	2014-05-08 14:45:09	2014-05-08 14:45:09
65	40	246	A COMMENT	\N	2014-05-28 06:12:45	2014-05-28 06:12:45
66	40	250	A COMMENT	\N	2014-07-12 09:38:17	2014-07-12 09:38:17
67	40	253	A COMMENT	\N	2014-05-23 23:12:52	2014-05-23 23:12:52
68	17	259	A COMMENT	\N	2014-06-21 07:12:50	2014-06-21 07:12:50
69	17	260	A COMMENT	\N	2014-05-15 18:39:44	2014-05-15 18:39:44
70	17	265	A COMMENT	\N	2014-07-04 14:35:27	2014-07-04 14:35:27
71	17	267	A COMMENT	\N	2014-05-12 09:46:57	2014-05-12 09:46:57
72	17	268	A COMMENT	\N	2014-05-17 23:26:18	2014-05-17 23:26:18
73	17	270	A COMMENT	\N	2014-05-31 19:29:13	2014-05-31 19:29:13
74	23	277	A COMMENT	\N	2014-05-27 06:04:38	2014-05-27 06:04:38
75	23	279	A COMMENT	\N	2014-02-09 18:43:27	2014-02-09 18:43:27
76	23	282	A COMMENT	\N	2014-06-13 05:47:16	2014-06-13 05:47:16
77	23	284	A COMMENT	\N	2014-03-25 05:29:25	2014-03-25 05:29:25
78	41	291	A COMMENT	\N	2014-05-07 19:04:21	2014-05-07 19:04:21
79	41	293	A COMMENT	\N	2014-02-02 17:34:13	2014-02-02 17:34:13
80	41	294	A COMMENT	\N	2014-03-17 13:36:21	2014-03-17 13:36:21
81	41	300	A COMMENT	\N	2014-06-11 14:14:01	2014-06-11 14:14:01
82	41	301	A COMMENT	\N	2014-06-21 05:18:22	2014-06-21 05:18:22
83	41	302	A COMMENT	\N	2014-07-14 10:45:28	2014-07-14 10:45:28
84	41	305	A COMMENT	\N	2014-02-24 08:32:31	2014-02-24 08:32:31
85	41	307	A COMMENT	\N	2014-03-22 20:02:11	2014-03-22 20:02:11
86	41	308	A COMMENT	\N	2014-03-27 04:33:44	2014-03-27 04:33:44
87	41	310	A COMMENT	\N	2014-04-28 23:12:11	2014-04-28 23:12:11
88	41	315	A COMMENT	\N	2014-04-08 15:57:06	2014-04-08 15:57:06
89	41	317	A COMMENT	\N	2014-03-12 12:58:22	2014-03-12 12:58:22
90	41	319	A COMMENT	\N	2014-04-22 20:46:59	2014-04-22 20:46:59
91	41	322	A COMMENT	\N	2014-02-25 14:30:45	2014-02-25 14:30:45
92	41	328	A COMMENT	\N	2014-02-09 07:02:09	2014-02-09 07:02:09
93	41	329	A COMMENT	\N	2014-04-24 02:25:28	2014-04-24 02:25:28
94	41	330	A COMMENT	\N	2014-05-05 14:16:56	2014-05-05 14:16:56
95	26	338	A COMMENT	\N	2014-03-19 22:52:06	2014-03-19 22:52:06
96	44	346	A COMMENT	\N	2014-06-26 01:38:40	2014-06-26 01:38:40
97	44	348	A COMMENT	\N	2014-07-13 02:05:29	2014-07-13 02:05:29
98	16	1	A COMMENT	\N	2014-06-10 13:33:21	2014-06-10 13:33:21
99	4	1	A COMMENT	\N	2014-06-15 08:32:07	2014-06-15 08:32:07
100	47	1	A COMMENT	\N	2014-06-24 15:03:17	2014-06-24 15:03:17
101	14	1	A COMMENT	\N	2014-06-25 02:21:28	2014-06-25 02:21:28
102	25	1	A COMMENT	\N	2014-06-29 04:45:18	2014-06-29 04:45:18
103	27	1	A COMMENT	\N	2014-06-29 07:48:20	2014-06-29 07:48:20
104	16	1	A COMMENT	\N	2014-06-29 16:51:25	2014-06-29 16:51:25
105	2	1	A COMMENT	\N	2014-07-01 11:06:07	2014-07-01 11:06:07
106	25	1	A COMMENT	\N	2014-07-12 15:42:44	2014-07-12 15:42:44
107	45	1	A COMMENT	\N	2014-07-18 14:16:25	2014-07-18 14:16:25
108	37	1	A COMMENT	\N	2014-07-22 20:07:30	2014-07-22 20:07:30
109	14	1	A COMMENT	\N	2014-07-23 03:44:55	2014-07-23 03:44:55
110	25	1	A COMMENT	\N	2014-07-23 20:15:32	2014-07-23 20:15:32
111	27	2	A COMMENT	\N	2014-07-10 20:45:54	2014-07-10 20:45:54
112	43	2	A COMMENT	\N	2014-07-24 05:26:48	2014-07-24 05:26:48
113	6	3	A COMMENT	\N	2014-06-14 11:41:03	2014-06-14 11:41:03
114	48	3	A COMMENT	\N	2014-06-16 06:19:40	2014-06-16 06:19:40
115	8	3	A COMMENT	\N	2014-06-16 15:09:45	2014-06-16 15:09:45
116	2	3	A COMMENT	\N	2014-06-17 05:55:11	2014-06-17 05:55:11
117	21	3	A COMMENT	\N	2014-06-25 13:24:30	2014-06-25 13:24:30
118	25	3	A COMMENT	\N	2014-06-25 16:47:57	2014-06-25 16:47:57
119	22	3	A COMMENT	\N	2014-06-26 01:46:27	2014-06-26 01:46:27
120	39	3	A COMMENT	\N	2014-07-02 06:33:48	2014-07-02 06:33:48
121	11	3	A COMMENT	\N	2014-07-02 21:34:20	2014-07-02 21:34:20
122	48	3	A COMMENT	\N	2014-07-03 11:37:01	2014-07-03 11:37:01
123	37	3	A COMMENT	\N	2014-07-04 18:20:13	2014-07-04 18:20:13
124	6	3	A COMMENT	\N	2014-07-07 01:13:20	2014-07-07 01:13:20
125	45	3	A COMMENT	\N	2014-07-07 02:18:47	2014-07-07 02:18:47
126	47	3	A COMMENT	\N	2014-07-07 10:35:01	2014-07-07 10:35:01
127	14	3	A COMMENT	\N	2014-07-16 09:57:43	2014-07-16 09:57:43
128	27	3	A COMMENT	\N	2014-07-16 20:22:29	2014-07-16 20:22:29
129	48	3	A COMMENT	\N	2014-07-18 07:15:08	2014-07-18 07:15:08
130	30	3	A COMMENT	\N	2014-07-25 01:11:02	2014-07-25 01:11:02
131	10	3	A COMMENT	\N	2014-07-25 23:27:00	2014-07-25 23:27:00
132	11	4	A COMMENT	\N	2014-07-02 13:57:21	2014-07-02 13:57:21
133	6	4	A COMMENT	\N	2014-07-06 15:57:43	2014-07-06 15:57:43
134	32	4	A COMMENT	\N	2014-07-11 16:15:14	2014-07-11 16:15:14
135	45	4	A COMMENT	\N	2014-07-24 20:32:57	2014-07-24 20:32:57
136	43	4	A COMMENT	\N	2014-07-26 04:05:11	2014-07-26 04:05:11
137	43	6	A COMMENT	\N	2014-07-20 01:42:52	2014-07-20 01:42:52
138	32	6	A COMMENT	\N	2014-07-24 04:29:36	2014-07-24 04:29:36
139	6	6	A COMMENT	\N	2014-07-25 17:41:26	2014-07-25 17:41:26
140	32	7	A COMMENT	\N	2014-06-14 09:38:43	2014-06-14 09:38:43
141	47	7	A COMMENT	\N	2014-06-16 14:37:02	2014-06-16 14:37:02
142	2	7	A COMMENT	\N	2014-06-19 14:55:11	2014-06-19 14:55:11
143	4	7	A COMMENT	\N	2014-06-19 21:40:16	2014-06-19 21:40:16
144	8	7	A COMMENT	\N	2014-06-23 20:20:39	2014-06-23 20:20:39
145	16	7	A COMMENT	\N	2014-07-15 10:43:19	2014-07-15 10:43:19
146	11	7	A COMMENT	\N	2014-07-17 11:55:33	2014-07-17 11:55:33
147	14	7	A COMMENT	\N	2014-07-24 20:04:52	2014-07-24 20:04:52
148	22	10	A COMMENT	\N	2014-06-16 04:20:57	2014-06-16 04:20:57
149	25	10	A COMMENT	\N	2014-06-23 17:10:34	2014-06-23 17:10:34
150	27	10	A COMMENT	\N	2014-07-01 01:14:43	2014-07-01 01:14:43
151	6	11	A COMMENT	\N	2014-06-16 17:14:07	2014-06-16 17:14:07
152	11	11	A COMMENT	\N	2014-06-26 15:58:07	2014-06-26 15:58:07
153	45	12	A COMMENT	\N	2014-07-01 20:10:30	2014-07-01 20:10:30
154	28	12	A COMMENT	\N	2014-07-05 16:09:11	2014-07-05 16:09:11
155	22	12	A COMMENT	\N	2014-07-07 01:56:25	2014-07-07 01:56:25
156	47	12	A COMMENT	\N	2014-07-19 11:56:01	2014-07-19 11:56:01
157	32	12	A COMMENT	\N	2014-07-20 23:03:59	2014-07-20 23:03:59
158	45	12	A COMMENT	\N	2014-07-22 03:38:37	2014-07-22 03:38:37
159	47	60	A COMMENT	\N	2014-06-27 14:43:44	2014-06-27 14:43:44
160	14	13	A COMMENT	\N	2014-07-19 10:18:24	2014-07-19 10:18:24
161	4	13	A COMMENT	\N	2014-07-19 21:29:12	2014-07-19 21:29:12
162	11	13	A COMMENT	\N	2014-07-24 01:14:41	2014-07-24 01:14:41
163	1	13	A COMMENT	\N	2014-07-24 06:58:05	2014-07-24 06:58:05
164	1	15	A COMMENT	\N	2014-06-27 21:11:17	2014-06-27 21:11:17
165	37	15	A COMMENT	\N	2014-06-28 00:56:05	2014-06-28 00:56:05
166	14	15	A COMMENT	\N	2014-06-29 13:13:45	2014-06-29 13:13:45
167	8	15	A COMMENT	\N	2014-07-03 06:13:16	2014-07-03 06:13:16
168	2	15	A COMMENT	\N	2014-07-04 23:24:10	2014-07-04 23:24:10
169	16	15	A COMMENT	\N	2014-07-05 00:17:15	2014-07-05 00:17:15
170	37	15	A COMMENT	\N	2014-07-06 17:08:19	2014-07-06 17:08:19
171	32	15	A COMMENT	\N	2014-07-07 09:31:02	2014-07-07 09:31:02
172	16	15	A COMMENT	\N	2014-07-08 15:55:56	2014-07-08 15:55:56
173	45	15	A COMMENT	\N	2014-07-09 14:04:04	2014-07-09 14:04:04
174	3	15	A COMMENT	\N	2014-07-10 11:43:42	2014-07-10 11:43:42
175	47	15	A COMMENT	\N	2014-07-11 22:36:07	2014-07-11 22:36:07
176	43	15	A COMMENT	\N	2014-07-12 20:36:17	2014-07-12 20:36:17
177	28	15	A COMMENT	\N	2014-07-17 12:43:37	2014-07-17 12:43:37
178	28	15	A COMMENT	\N	2014-07-18 11:18:58	2014-07-18 11:18:58
179	22	15	A COMMENT	\N	2014-07-20 01:29:57	2014-07-20 01:29:57
180	30	15	A COMMENT	\N	2014-07-24 00:13:23	2014-07-24 00:13:23
181	14	15	A COMMENT	\N	2014-07-24 04:30:49	2014-07-24 04:30:49
182	39	15	A COMMENT	\N	2014-07-24 05:09:26	2014-07-24 05:09:26
183	6	15	A COMMENT	\N	2014-07-25 21:01:35	2014-07-25 21:01:35
184	21	16	A COMMENT	\N	2014-06-30 15:59:48	2014-06-30 15:59:48
185	11	16	A COMMENT	\N	2014-07-03 20:08:49	2014-07-03 20:08:49
186	2	16	A COMMENT	\N	2014-07-03 20:33:59	2014-07-03 20:33:59
187	32	16	A COMMENT	\N	2014-07-04 20:14:29	2014-07-04 20:14:29
188	21	16	A COMMENT	\N	2014-07-05 01:54:22	2014-07-05 01:54:22
189	6	16	A COMMENT	\N	2014-07-06 15:17:32	2014-07-06 15:17:32
190	8	16	A COMMENT	\N	2014-07-06 20:52:19	2014-07-06 20:52:19
191	45	16	A COMMENT	\N	2014-07-08 14:06:07	2014-07-08 14:06:07
192	45	16	A COMMENT	\N	2014-07-10 17:01:20	2014-07-10 17:01:20
193	45	16	A COMMENT	\N	2014-07-11 05:17:41	2014-07-11 05:17:41
194	4	16	A COMMENT	\N	2014-07-13 18:26:05	2014-07-13 18:26:05
195	28	16	A COMMENT	\N	2014-07-18 04:18:08	2014-07-18 04:18:08
196	27	16	A COMMENT	\N	2014-07-18 16:06:49	2014-07-18 16:06:49
197	11	17	A COMMENT	\N	2014-06-22 22:39:06	2014-06-22 22:39:06
198	8	17	A COMMENT	\N	2014-06-30 09:41:00	2014-06-30 09:41:00
199	11	17	A COMMENT	\N	2014-07-01 16:10:45	2014-07-01 16:10:45
200	47	17	A COMMENT	\N	2014-07-04 05:50:23	2014-07-04 05:50:23
201	14	18	A COMMENT	\N	2013-12-25 21:55:30	2013-12-25 21:55:30
202	4	18	A COMMENT	\N	2014-02-15 06:43:18	2014-02-15 06:43:18
203	28	18	A COMMENT	\N	2014-03-03 15:45:51	2014-03-03 15:45:51
204	16	19	A COMMENT	\N	2014-04-14 17:36:31	2014-04-14 17:36:31
205	21	19	A COMMENT	\N	2014-05-27 04:36:53	2014-05-27 04:36:53
206	6	19	A COMMENT	\N	2014-06-17 03:24:48	2014-06-17 03:24:48
207	4	19	A COMMENT	\N	2014-06-17 16:58:07	2014-06-17 16:58:07
208	43	19	A COMMENT	\N	2014-06-26 05:38:29	2014-06-26 05:38:29
209	22	20	A COMMENT	\N	2014-06-12 07:00:22	2014-06-12 07:00:22
210	28	20	A COMMENT	\N	2014-07-15 15:01:41	2014-07-15 15:01:41
211	43	21	A COMMENT	\N	2014-03-11 01:01:33	2014-03-11 01:01:33
212	30	21	A COMMENT	\N	2014-05-19 10:19:19	2014-05-19 10:19:19
213	4	21	A COMMENT	\N	2014-07-13 16:46:26	2014-07-13 16:46:26
214	28	22	A COMMENT	\N	2014-05-18 21:19:12	2014-05-18 21:19:12
215	21	23	A COMMENT	\N	2013-12-22 07:56:00	2013-12-22 07:56:00
216	8	23	A COMMENT	\N	2014-02-25 14:40:46	2014-02-25 14:40:46
217	37	23	A COMMENT	\N	2014-05-06 17:14:52	2014-05-06 17:14:52
218	11	23	A COMMENT	\N	2014-05-30 13:55:04	2014-05-30 13:55:04
219	11	24	A COMMENT	\N	2014-06-24 09:01:43	2014-06-24 09:01:43
220	4	26	A COMMENT	\N	2013-12-29 22:54:03	2013-12-29 22:54:03
221	2	26	A COMMENT	\N	2014-02-24 03:56:09	2014-02-24 03:56:09
222	4	26	A COMMENT	\N	2014-03-29 21:55:33	2014-03-29 21:55:33
223	8	26	A COMMENT	\N	2014-05-24 06:17:57	2014-05-24 06:17:57
224	28	26	A COMMENT	\N	2014-06-19 08:57:38	2014-06-19 08:57:38
225	47	27	A COMMENT	\N	2014-05-25 22:34:24	2014-05-25 22:34:24
226	14	27	A COMMENT	\N	2014-05-26 00:48:26	2014-05-26 00:48:26
227	48	27	A COMMENT	\N	2014-05-27 15:11:57	2014-05-27 15:11:57
228	32	27	A COMMENT	\N	2014-05-28 07:29:53	2014-05-28 07:29:53
229	43	27	A COMMENT	\N	2014-06-02 12:11:20	2014-06-02 12:11:20
230	8	27	A COMMENT	\N	2014-06-03 14:30:11	2014-06-03 14:30:11
231	10	27	A COMMENT	\N	2014-06-03 21:25:24	2014-06-03 21:25:24
232	21	27	A COMMENT	\N	2014-06-04 02:17:13	2014-06-04 02:17:13
233	16	27	A COMMENT	\N	2014-06-15 18:48:26	2014-06-15 18:48:26
234	6	27	A COMMENT	\N	2014-06-16 04:44:08	2014-06-16 04:44:08
235	1	27	A COMMENT	\N	2014-06-23 02:04:21	2014-06-23 02:04:21
236	22	27	A COMMENT	\N	2014-06-23 17:48:20	2014-06-23 17:48:20
237	43	27	A COMMENT	\N	2014-06-24 18:06:02	2014-06-24 18:06:02
238	28	27	A COMMENT	\N	2014-07-01 05:47:54	2014-07-01 05:47:54
239	27	27	A COMMENT	\N	2014-07-06 01:50:38	2014-07-06 01:50:38
240	10	27	A COMMENT	\N	2014-07-07 21:53:57	2014-07-07 21:53:57
241	1	27	A COMMENT	\N	2014-07-09 05:27:35	2014-07-09 05:27:35
242	4	27	A COMMENT	\N	2014-07-12 15:36:33	2014-07-12 15:36:33
243	21	27	A COMMENT	\N	2014-07-14 23:12:49	2014-07-14 23:12:49
244	3	27	A COMMENT	\N	2014-07-18 03:20:09	2014-07-18 03:20:09
245	4	28	A COMMENT	\N	2014-03-02 10:06:50	2014-03-02 10:06:50
246	10	28	A COMMENT	\N	2014-06-29 04:52:05	2014-06-29 04:52:05
247	2	30	A COMMENT	\N	2014-04-15 03:11:55	2014-04-15 03:11:55
248	8	30	A COMMENT	\N	2014-04-28 11:16:31	2014-04-28 11:16:31
249	1	30	A COMMENT	\N	2014-05-11 03:30:45	2014-05-11 03:30:45
250	45	30	A COMMENT	\N	2014-06-08 21:25:43	2014-06-08 21:25:43
251	14	30	A COMMENT	\N	2014-07-14 20:03:05	2014-07-14 20:03:05
252	8	31	A COMMENT	\N	2014-07-01 10:25:17	2014-07-01 10:25:17
253	28	31	A COMMENT	\N	2014-07-05 06:30:52	2014-07-05 06:30:52
254	25	31	A COMMENT	\N	2014-07-06 03:26:10	2014-07-06 03:26:10
255	6	31	A COMMENT	\N	2014-07-07 10:24:18	2014-07-07 10:24:18
256	1	31	A COMMENT	\N	2014-07-07 18:22:47	2014-07-07 18:22:47
257	10	31	A COMMENT	\N	2014-07-19 03:18:46	2014-07-19 03:18:46
258	28	31	A COMMENT	\N	2014-07-25 18:24:54	2014-07-25 18:24:54
259	11	32	A COMMENT	\N	2014-02-04 05:17:11	2014-02-04 05:17:11
260	48	32	A COMMENT	\N	2014-02-27 05:13:04	2014-02-27 05:13:04
261	8	32	A COMMENT	\N	2014-03-09 18:03:54	2014-03-09 18:03:54
262	3	32	A COMMENT	\N	2014-03-22 13:19:16	2014-03-22 13:19:16
263	16	32	A COMMENT	\N	2014-04-18 02:21:13	2014-04-18 02:21:13
264	6	32	A COMMENT	\N	2014-04-27 03:07:59	2014-04-27 03:07:59
265	45	32	A COMMENT	\N	2014-04-27 22:57:23	2014-04-27 22:57:23
266	16	32	A COMMENT	\N	2014-05-01 18:12:30	2014-05-01 18:12:30
267	16	32	A COMMENT	\N	2014-05-02 13:53:56	2014-05-02 13:53:56
268	32	32	A COMMENT	\N	2014-05-07 15:53:00	2014-05-07 15:53:00
269	28	32	A COMMENT	\N	2014-05-25 02:32:55	2014-05-25 02:32:55
270	1	32	A COMMENT	\N	2014-05-26 00:55:56	2014-05-26 00:55:56
271	25	32	A COMMENT	\N	2014-06-05 02:25:31	2014-06-05 02:25:31
272	28	32	A COMMENT	\N	2014-06-20 13:12:46	2014-06-20 13:12:46
273	43	32	A COMMENT	\N	2014-06-30 16:16:24	2014-06-30 16:16:24
274	27	32	A COMMENT	\N	2014-07-05 22:43:31	2014-07-05 22:43:31
275	4	32	A COMMENT	\N	2014-07-07 06:47:34	2014-07-07 06:47:34
276	2	32	A COMMENT	\N	2014-07-10 16:43:54	2014-07-10 16:43:54
277	30	33	A COMMENT	\N	2014-05-11 19:40:32	2014-05-11 19:40:32
278	3	33	A COMMENT	\N	2014-05-16 02:17:09	2014-05-16 02:17:09
279	27	33	A COMMENT	\N	2014-06-21 22:51:24	2014-06-21 22:51:24
280	25	34	A COMMENT	\N	2014-02-15 18:36:51	2014-02-15 18:36:51
281	11	34	A COMMENT	\N	2014-02-18 19:57:40	2014-02-18 19:57:40
282	43	34	A COMMENT	\N	2014-02-21 11:33:26	2014-02-21 11:33:26
283	16	34	A COMMENT	\N	2014-03-17 02:57:59	2014-03-17 02:57:59
284	48	34	A COMMENT	\N	2014-03-20 02:46:56	2014-03-20 02:46:56
285	6	34	A COMMENT	\N	2014-03-24 06:29:20	2014-03-24 06:29:20
286	21	34	A COMMENT	\N	2014-04-15 20:31:31	2014-04-15 20:31:31
287	21	34	A COMMENT	\N	2014-04-15 22:32:39	2014-04-15 22:32:39
288	25	34	A COMMENT	\N	2014-05-26 04:44:58	2014-05-26 04:44:58
289	11	34	A COMMENT	\N	2014-05-26 05:03:20	2014-05-26 05:03:20
290	8	34	A COMMENT	\N	2014-06-09 00:57:10	2014-06-09 00:57:10
291	1	34	A COMMENT	\N	2014-06-09 02:28:20	2014-06-09 02:28:20
292	32	34	A COMMENT	\N	2014-06-09 18:06:20	2014-06-09 18:06:20
293	47	34	A COMMENT	\N	2014-06-12 04:39:22	2014-06-12 04:39:22
294	14	34	A COMMENT	\N	2014-06-17 05:48:56	2014-06-17 05:48:56
295	1	34	A COMMENT	\N	2014-06-23 18:16:36	2014-06-23 18:16:36
296	6	34	A COMMENT	\N	2014-07-08 10:38:36	2014-07-08 10:38:36
297	3	34	A COMMENT	\N	2014-07-08 22:25:17	2014-07-08 22:25:17
298	10	34	A COMMENT	\N	2014-07-15 16:29:58	2014-07-15 16:29:58
299	22	34	A COMMENT	\N	2014-07-24 11:32:33	2014-07-24 11:32:33
300	28	36	A COMMENT	\N	2014-05-09 12:52:43	2014-05-09 12:52:43
301	3	36	A COMMENT	\N	2014-05-19 03:08:43	2014-05-19 03:08:43
302	30	36	A COMMENT	\N	2014-07-09 14:58:42	2014-07-09 14:58:42
303	37	36	A COMMENT	\N	2014-07-22 00:23:58	2014-07-22 00:23:58
304	8	38	A COMMENT	\N	2014-03-02 06:58:18	2014-03-02 06:58:18
305	3	38	A COMMENT	\N	2014-03-05 14:59:27	2014-03-05 14:59:27
306	45	38	A COMMENT	\N	2014-03-09 23:20:25	2014-03-09 23:20:25
307	48	38	A COMMENT	\N	2014-03-12 20:31:04	2014-03-12 20:31:04
308	48	38	A COMMENT	\N	2014-05-11 19:08:12	2014-05-11 19:08:12
309	10	38	A COMMENT	\N	2014-05-21 01:17:42	2014-05-21 01:17:42
310	43	38	A COMMENT	\N	2014-06-26 14:26:38	2014-06-26 14:26:38
311	43	38	A COMMENT	\N	2014-07-11 19:20:28	2014-07-11 19:20:28
312	22	39	A COMMENT	\N	2014-03-02 17:52:46	2014-03-02 17:52:46
313	3	39	A COMMENT	\N	2014-03-11 16:26:35	2014-03-11 16:26:35
314	6	39	A COMMENT	\N	2014-03-12 12:23:48	2014-03-12 12:23:48
315	43	39	A COMMENT	\N	2014-03-17 17:36:49	2014-03-17 17:36:49
316	6	39	A COMMENT	\N	2014-04-04 17:08:59	2014-04-04 17:08:59
317	8	39	A COMMENT	\N	2014-04-09 15:03:25	2014-04-09 15:03:25
318	1	39	A COMMENT	\N	2014-05-16 22:01:45	2014-05-16 22:01:45
319	11	39	A COMMENT	\N	2014-06-24 08:51:12	2014-06-24 08:51:12
320	39	39	A COMMENT	\N	2014-07-10 13:58:39	2014-07-10 13:58:39
321	43	39	A COMMENT	\N	2014-07-18 12:19:52	2014-07-18 12:19:52
322	3	40	A COMMENT	\N	2014-04-29 16:48:11	2014-04-29 16:48:11
323	2	40	A COMMENT	\N	2014-05-05 02:01:39	2014-05-05 02:01:39
324	8	40	A COMMENT	\N	2014-05-05 23:31:01	2014-05-05 23:31:01
325	32	40	A COMMENT	\N	2014-05-09 00:04:26	2014-05-09 00:04:26
326	14	40	A COMMENT	\N	2014-05-15 19:12:44	2014-05-15 19:12:44
327	28	40	A COMMENT	\N	2014-05-22 17:50:03	2014-05-22 17:50:03
328	6	40	A COMMENT	\N	2014-05-22 23:28:57	2014-05-22 23:28:57
329	16	40	A COMMENT	\N	2014-05-25 13:40:58	2014-05-25 13:40:58
330	22	40	A COMMENT	\N	2014-05-27 18:25:08	2014-05-27 18:25:08
331	8	40	A COMMENT	\N	2014-06-03 13:13:30	2014-06-03 13:13:30
332	45	40	A COMMENT	\N	2014-06-05 00:44:48	2014-06-05 00:44:48
333	45	40	A COMMENT	\N	2014-06-09 01:15:29	2014-06-09 01:15:29
334	6	40	A COMMENT	\N	2014-06-12 01:10:46	2014-06-12 01:10:46
335	48	40	A COMMENT	\N	2014-06-14 00:32:28	2014-06-14 00:32:28
336	43	40	A COMMENT	\N	2014-06-23 05:15:38	2014-06-23 05:15:38
337	25	40	A COMMENT	\N	2014-07-10 05:06:02	2014-07-10 05:06:02
338	21	40	A COMMENT	\N	2014-07-21 02:09:17	2014-07-21 02:09:17
339	14	41	A COMMENT	\N	2014-05-09 05:47:30	2014-05-09 05:47:30
340	11	41	A COMMENT	\N	2014-05-31 05:05:22	2014-05-31 05:05:22
341	32	41	A COMMENT	\N	2014-05-31 17:48:49	2014-05-31 17:48:49
342	47	41	A COMMENT	\N	2014-06-08 17:23:10	2014-06-08 17:23:10
343	25	41	A COMMENT	\N	2014-06-16 07:20:15	2014-06-16 07:20:15
344	32	41	A COMMENT	\N	2014-07-06 07:31:07	2014-07-06 07:31:07
345	6	41	A COMMENT	\N	2014-07-19 10:16:36	2014-07-19 10:16:36
346	11	41	A COMMENT	\N	2014-07-21 16:30:14	2014-07-21 16:30:14
347	47	42	A COMMENT	\N	2014-05-12 07:10:42	2014-05-12 07:10:42
348	11	42	A COMMENT	\N	2014-05-19 04:29:18	2014-05-19 04:29:18
349	21	42	A COMMENT	\N	2014-06-08 06:07:40	2014-06-08 06:07:40
350	39	42	A COMMENT	\N	2014-06-26 20:58:07	2014-06-26 20:58:07
351	47	42	A COMMENT	\N	2014-07-13 03:16:49	2014-07-13 03:16:49
352	14	43	A COMMENT	\N	2014-03-11 09:54:23	2014-03-11 09:54:23
353	32	43	A COMMENT	\N	2014-03-11 13:45:20	2014-03-11 13:45:20
354	22	43	A COMMENT	\N	2014-06-02 00:07:43	2014-06-02 00:07:43
355	21	43	A COMMENT	\N	2014-06-06 17:50:35	2014-06-06 17:50:35
356	30	43	A COMMENT	\N	2014-06-08 22:50:06	2014-06-08 22:50:06
357	21	43	A COMMENT	\N	2014-06-17 20:47:43	2014-06-17 20:47:43
358	27	43	A COMMENT	\N	2014-06-18 12:57:53	2014-06-18 12:57:53
359	3	44	A COMMENT	\N	2014-04-07 01:46:09	2014-04-07 01:46:09
360	3	44	A COMMENT	\N	2014-04-24 20:59:35	2014-04-24 20:59:35
361	39	44	A COMMENT	\N	2014-05-03 00:36:00	2014-05-03 00:36:00
362	8	44	A COMMENT	\N	2014-06-07 02:54:44	2014-06-07 02:54:44
363	16	44	A COMMENT	\N	2014-06-23 13:22:55	2014-06-23 13:22:55
364	37	44	A COMMENT	\N	2014-07-16 19:50:59	2014-07-16 19:50:59
365	4	45	A COMMENT	\N	2014-05-18 20:33:19	2014-05-18 20:33:19
366	28	45	A COMMENT	\N	2014-05-19 22:58:08	2014-05-19 22:58:08
367	25	45	A COMMENT	\N	2014-05-20 12:21:05	2014-05-20 12:21:05
368	39	45	A COMMENT	\N	2014-06-04 23:01:53	2014-06-04 23:01:53
369	28	45	A COMMENT	\N	2014-06-24 03:30:10	2014-06-24 03:30:10
370	4	45	A COMMENT	\N	2014-07-06 07:14:47	2014-07-06 07:14:47
371	43	45	A COMMENT	\N	2014-07-09 03:45:13	2014-07-09 03:45:13
372	30	45	A COMMENT	\N	2014-07-19 19:26:21	2014-07-19 19:26:21
373	10	46	A COMMENT	\N	2014-07-15 19:04:53	2014-07-15 19:04:53
374	22	46	A COMMENT	\N	2014-07-25 02:58:14	2014-07-25 02:58:14
375	45	47	A COMMENT	\N	2014-03-10 16:18:54	2014-03-10 16:18:54
376	45	47	A COMMENT	\N	2014-03-18 04:37:33	2014-03-18 04:37:33
377	4	47	A COMMENT	\N	2014-04-07 18:08:31	2014-04-07 18:08:31
378	6	47	A COMMENT	\N	2014-04-09 12:26:45	2014-04-09 12:26:45
379	16	47	A COMMENT	\N	2014-04-20 02:01:03	2014-04-20 02:01:03
380	10	47	A COMMENT	\N	2014-04-26 19:49:27	2014-04-26 19:49:27
381	45	47	A COMMENT	\N	2014-05-07 04:12:29	2014-05-07 04:12:29
382	37	47	A COMMENT	\N	2014-05-14 05:35:42	2014-05-14 05:35:42
383	10	47	A COMMENT	\N	2014-05-27 21:47:50	2014-05-27 21:47:50
384	25	47	A COMMENT	\N	2014-07-02 06:01:27	2014-07-02 06:01:27
385	14	47	A COMMENT	\N	2014-07-04 08:28:47	2014-07-04 08:28:47
386	21	47	A COMMENT	\N	2014-07-17 17:13:04	2014-07-17 17:13:04
387	10	49	A COMMENT	\N	2014-07-23 18:42:53	2014-07-23 18:42:53
388	45	49	A COMMENT	\N	2014-07-26 08:38:57	2014-07-26 08:38:57
389	48	51	A COMMENT	\N	2014-07-01 01:28:14	2014-07-01 01:28:14
390	1	51	A COMMENT	\N	2014-07-09 03:31:55	2014-07-09 03:31:55
391	37	51	A COMMENT	\N	2014-07-15 07:46:21	2014-07-15 07:46:21
392	32	51	A COMMENT	\N	2014-07-16 06:23:02	2014-07-16 06:23:02
393	30	51	A COMMENT	\N	2014-07-18 17:20:36	2014-07-18 17:20:36
394	45	52	A COMMENT	\N	2014-03-16 03:04:49	2014-03-16 03:04:49
395	16	52	A COMMENT	\N	2014-05-04 14:40:44	2014-05-04 14:40:44
396	48	53	A COMMENT	\N	2014-07-06 22:27:15	2014-07-06 22:27:15
397	21	54	A COMMENT	\N	2014-06-08 21:10:38	2014-06-08 21:10:38
398	43	54	A COMMENT	\N	2014-06-09 19:55:59	2014-06-09 19:55:59
399	8	54	A COMMENT	\N	2014-06-18 02:47:01	2014-06-18 02:47:01
400	4	54	A COMMENT	\N	2014-06-19 19:08:47	2014-06-19 19:08:47
401	3	54	A COMMENT	\N	2014-06-30 15:11:17	2014-06-30 15:11:17
402	10	54	A COMMENT	\N	2014-07-04 04:51:51	2014-07-04 04:51:51
403	45	56	A COMMENT	\N	2014-05-14 04:57:59	2014-05-14 04:57:59
404	27	56	A COMMENT	\N	2014-07-22 09:08:44	2014-07-22 09:08:44
405	45	57	A COMMENT	\N	2014-03-21 04:04:31	2014-03-21 04:04:31
406	37	57	A COMMENT	\N	2014-03-26 22:39:12	2014-03-26 22:39:12
407	6	57	A COMMENT	\N	2014-03-27 01:18:09	2014-03-27 01:18:09
408	14	57	A COMMENT	\N	2014-04-14 09:17:38	2014-04-14 09:17:38
409	28	57	A COMMENT	\N	2014-06-12 23:59:54	2014-06-12 23:59:54
410	8	57	A COMMENT	\N	2014-06-27 02:01:10	2014-06-27 02:01:10
411	27	57	A COMMENT	\N	2014-07-24 15:48:55	2014-07-24 15:48:55
412	1	58	A COMMENT	\N	2014-06-16 23:38:25	2014-06-16 23:38:25
413	22	58	A COMMENT	\N	2014-06-25 00:19:24	2014-06-25 00:19:24
414	37	58	A COMMENT	\N	2014-06-25 14:30:48	2014-06-25 14:30:48
415	39	58	A COMMENT	\N	2014-06-30 11:07:14	2014-06-30 11:07:14
416	32	58	A COMMENT	\N	2014-07-04 11:44:52	2014-07-04 11:44:52
417	47	58	A COMMENT	\N	2014-07-05 19:23:38	2014-07-05 19:23:38
418	43	58	A COMMENT	\N	2014-07-16 13:05:29	2014-07-16 13:05:29
419	14	58	A COMMENT	\N	2014-07-22 07:34:54	2014-07-22 07:34:54
420	22	58	A COMMENT	\N	2014-07-25 20:47:08	2014-07-25 20:47:08
421	16	61	A COMMENT	\N	2014-06-04 21:06:03	2014-06-04 21:06:03
422	6	61	A COMMENT	\N	2014-06-05 18:38:25	2014-06-05 18:38:25
423	39	61	A COMMENT	\N	2014-06-17 23:40:39	2014-06-17 23:40:39
424	10	62	A COMMENT	\N	2014-05-15 00:09:00	2014-05-15 00:09:00
425	48	62	A COMMENT	\N	2014-05-17 20:10:48	2014-05-17 20:10:48
426	30	63	A COMMENT	\N	2014-07-16 12:01:46	2014-07-16 12:01:46
427	39	63	A COMMENT	\N	2014-07-21 03:28:54	2014-07-21 03:28:54
428	28	64	A COMMENT	\N	2014-04-28 12:15:58	2014-04-28 12:15:58
429	30	64	A COMMENT	\N	2014-04-30 03:29:02	2014-04-30 03:29:02
430	28	64	A COMMENT	\N	2014-05-14 22:47:07	2014-05-14 22:47:07
431	21	64	A COMMENT	\N	2014-05-18 13:52:48	2014-05-18 13:52:48
432	48	64	A COMMENT	\N	2014-05-21 05:29:30	2014-05-21 05:29:30
433	27	64	A COMMENT	\N	2014-06-02 13:02:49	2014-06-02 13:02:49
434	43	64	A COMMENT	\N	2014-06-09 17:55:06	2014-06-09 17:55:06
435	6	64	A COMMENT	\N	2014-06-25 01:17:47	2014-06-25 01:17:47
436	39	64	A COMMENT	\N	2014-07-26 12:39:15	2014-07-26 12:39:15
437	39	65	A COMMENT	\N	2014-05-07 07:15:17	2014-05-07 07:15:17
438	43	65	A COMMENT	\N	2014-05-09 01:52:33	2014-05-09 01:52:33
439	37	65	A COMMENT	\N	2014-06-05 01:56:35	2014-06-05 01:56:35
440	11	65	A COMMENT	\N	2014-06-09 14:12:52	2014-06-09 14:12:52
441	47	65	A COMMENT	\N	2014-06-22 03:26:50	2014-06-22 03:26:50
442	10	65	A COMMENT	\N	2014-06-27 08:47:50	2014-06-27 08:47:50
443	1	65	A COMMENT	\N	2014-06-30 18:18:47	2014-06-30 18:18:47
444	8	65	A COMMENT	\N	2014-07-03 12:29:19	2014-07-03 12:29:19
445	47	65	A COMMENT	\N	2014-07-05 18:10:55	2014-07-05 18:10:55
446	48	65	A COMMENT	\N	2014-07-14 16:34:37	2014-07-14 16:34:37
447	30	65	A COMMENT	\N	2014-07-15 03:28:29	2014-07-15 03:28:29
448	27	65	A COMMENT	\N	2014-07-25 16:39:40	2014-07-25 16:39:40
449	45	66	A COMMENT	\N	2014-04-02 07:03:20	2014-04-02 07:03:20
450	32	66	A COMMENT	\N	2014-06-21 16:40:50	2014-06-21 16:40:50
451	47	66	A COMMENT	\N	2014-07-15 22:04:40	2014-07-15 22:04:40
452	21	68	A COMMENT	\N	2014-06-23 22:00:57	2014-06-23 22:00:57
453	6	69	A COMMENT	\N	2014-03-25 03:44:26	2014-03-25 03:44:26
454	48	69	A COMMENT	\N	2014-04-25 21:53:54	2014-04-25 21:53:54
455	14	69	A COMMENT	\N	2014-05-26 10:17:12	2014-05-26 10:17:12
456	39	69	A COMMENT	\N	2014-05-27 04:47:03	2014-05-27 04:47:03
457	11	69	A COMMENT	\N	2014-05-31 08:41:52	2014-05-31 08:41:52
458	16	69	A COMMENT	\N	2014-07-05 02:42:54	2014-07-05 02:42:54
459	28	69	A COMMENT	\N	2014-07-12 11:35:49	2014-07-12 11:35:49
460	25	69	A COMMENT	\N	2014-07-20 05:47:27	2014-07-20 05:47:27
461	39	70	A COMMENT	\N	2014-06-13 00:00:09	2014-06-13 00:00:09
462	1	70	A COMMENT	\N	2014-06-28 22:43:48	2014-06-28 22:43:48
463	37	70	A COMMENT	\N	2014-06-30 14:45:34	2014-06-30 14:45:34
464	28	71	A COMMENT	\N	2014-05-25 23:35:26	2014-05-25 23:35:26
465	25	71	A COMMENT	\N	2014-07-21 13:33:46	2014-07-21 13:33:46
466	47	73	A COMMENT	\N	2014-03-18 19:47:10	2014-03-18 19:47:10
467	27	73	A COMMENT	\N	2014-04-29 21:35:49	2014-04-29 21:35:49
468	4	73	A COMMENT	\N	2014-05-24 07:58:08	2014-05-24 07:58:08
469	1	75	A COMMENT	\N	2014-04-22 03:12:51	2014-04-22 03:12:51
470	27	75	A COMMENT	\N	2014-04-29 15:04:56	2014-04-29 15:04:56
471	47	75	A COMMENT	\N	2014-05-01 00:45:56	2014-05-01 00:45:56
472	21	75	A COMMENT	\N	2014-05-04 01:44:42	2014-05-04 01:44:42
473	21	75	A COMMENT	\N	2014-05-15 01:42:48	2014-05-15 01:42:48
474	2	75	A COMMENT	\N	2014-05-18 03:31:44	2014-05-18 03:31:44
475	2	75	A COMMENT	\N	2014-05-21 22:10:42	2014-05-21 22:10:42
476	22	75	A COMMENT	\N	2014-05-27 10:56:20	2014-05-27 10:56:20
477	27	75	A COMMENT	\N	2014-06-01 17:35:37	2014-06-01 17:35:37
478	28	75	A COMMENT	\N	2014-06-03 02:58:05	2014-06-03 02:58:05
479	48	75	A COMMENT	\N	2014-06-10 03:56:23	2014-06-10 03:56:23
480	4	75	A COMMENT	\N	2014-06-26 01:48:01	2014-06-26 01:48:01
481	14	75	A COMMENT	\N	2014-06-26 08:07:58	2014-06-26 08:07:58
482	22	75	A COMMENT	\N	2014-06-28 06:02:19	2014-06-28 06:02:19
483	39	75	A COMMENT	\N	2014-07-07 19:22:24	2014-07-07 19:22:24
484	27	75	A COMMENT	\N	2014-07-22 04:55:54	2014-07-22 04:55:54
485	16	76	A COMMENT	\N	2014-05-16 18:27:22	2014-05-16 18:27:22
486	32	76	A COMMENT	\N	2014-05-22 05:32:22	2014-05-22 05:32:22
487	1	76	A COMMENT	\N	2014-06-01 01:36:33	2014-06-01 01:36:33
488	37	76	A COMMENT	\N	2014-07-03 13:16:43	2014-07-03 13:16:43
489	37	76	A COMMENT	\N	2014-07-03 13:39:35	2014-07-03 13:39:35
490	21	76	A COMMENT	\N	2014-07-22 08:26:00	2014-07-22 08:26:00
491	28	78	A COMMENT	\N	2014-05-13 02:09:41	2014-05-13 02:09:41
492	25	78	A COMMENT	\N	2014-05-17 19:23:37	2014-05-17 19:23:37
493	48	78	A COMMENT	\N	2014-06-09 10:56:11	2014-06-09 10:56:11
494	14	78	A COMMENT	\N	2014-06-14 07:31:04	2014-06-14 07:31:04
495	22	78	A COMMENT	\N	2014-06-16 09:10:51	2014-06-16 09:10:51
496	39	78	A COMMENT	\N	2014-06-16 20:22:11	2014-06-16 20:22:11
497	47	78	A COMMENT	\N	2014-06-22 03:05:43	2014-06-22 03:05:43
498	3	78	A COMMENT	\N	2014-06-27 23:10:29	2014-06-27 23:10:29
499	30	78	A COMMENT	\N	2014-07-03 01:42:42	2014-07-03 01:42:42
500	8	78	A COMMENT	\N	2014-07-08 06:06:00	2014-07-08 06:06:00
501	43	78	A COMMENT	\N	2014-07-08 07:08:09	2014-07-08 07:08:09
502	47	80	A COMMENT	\N	2014-06-21 19:04:41	2014-06-21 19:04:41
503	32	80	A COMMENT	\N	2014-07-17 19:06:46	2014-07-17 19:06:46
504	4	80	A COMMENT	\N	2014-07-21 05:24:08	2014-07-21 05:24:08
505	11	80	A COMMENT	\N	2014-07-24 23:46:23	2014-07-24 23:46:23
506	1	81	A COMMENT	\N	2014-05-19 12:46:22	2014-05-19 12:46:22
507	2	81	A COMMENT	\N	2014-07-24 06:03:53	2014-07-24 06:03:53
508	43	82	A COMMENT	\N	2014-04-13 19:07:01	2014-04-13 19:07:01
509	10	82	A COMMENT	\N	2014-04-15 20:25:01	2014-04-15 20:25:01
510	28	82	A COMMENT	\N	2014-05-12 22:34:14	2014-05-12 22:34:14
511	27	82	A COMMENT	\N	2014-05-18 12:30:29	2014-05-18 12:30:29
512	43	82	A COMMENT	\N	2014-05-20 12:25:34	2014-05-20 12:25:34
513	37	82	A COMMENT	\N	2014-05-20 18:51:01	2014-05-20 18:51:01
514	27	82	A COMMENT	\N	2014-07-03 07:51:32	2014-07-03 07:51:32
515	25	82	A COMMENT	\N	2014-07-14 14:45:26	2014-07-14 14:45:26
516	30	82	A COMMENT	\N	2014-07-20 00:29:14	2014-07-20 00:29:14
517	27	83	A COMMENT	\N	2014-04-21 00:42:39	2014-04-21 00:42:39
518	48	83	A COMMENT	\N	2014-05-02 13:12:26	2014-05-02 13:12:26
519	6	83	A COMMENT	\N	2014-06-04 04:25:17	2014-06-04 04:25:17
520	21	87	A COMMENT	\N	2014-04-06 06:58:07	2014-04-06 06:58:07
521	4	87	A COMMENT	\N	2014-04-19 20:41:07	2014-04-19 20:41:07
522	1	87	A COMMENT	\N	2014-04-24 13:09:06	2014-04-24 13:09:06
523	37	87	A COMMENT	\N	2014-05-07 11:14:37	2014-05-07 11:14:37
524	6	87	A COMMENT	\N	2014-05-27 08:51:50	2014-05-27 08:51:50
525	27	87	A COMMENT	\N	2014-06-09 16:22:27	2014-06-09 16:22:27
526	32	87	A COMMENT	\N	2014-07-19 15:26:43	2014-07-19 15:26:43
527	28	87	A COMMENT	\N	2014-07-20 17:36:21	2014-07-20 17:36:21
528	30	88	A COMMENT	\N	2014-05-18 01:55:44	2014-05-18 01:55:44
529	48	88	A COMMENT	\N	2014-06-01 19:10:24	2014-06-01 19:10:24
530	45	88	A COMMENT	\N	2014-06-15 11:09:44	2014-06-15 11:09:44
531	30	88	A COMMENT	\N	2014-06-17 03:25:36	2014-06-17 03:25:36
532	8	88	A COMMENT	\N	2014-06-21 19:50:22	2014-06-21 19:50:22
533	1	89	A COMMENT	\N	2014-04-24 09:26:30	2014-04-24 09:26:30
534	37	89	A COMMENT	\N	2014-05-02 23:50:05	2014-05-02 23:50:05
535	37	89	A COMMENT	\N	2014-05-13 09:43:24	2014-05-13 09:43:24
536	6	89	A COMMENT	\N	2014-06-07 02:03:44	2014-06-07 02:03:44
537	37	89	A COMMENT	\N	2014-06-15 03:07:27	2014-06-15 03:07:27
538	25	89	A COMMENT	\N	2014-06-21 08:55:15	2014-06-21 08:55:15
539	1	89	A COMMENT	\N	2014-06-30 20:58:26	2014-06-30 20:58:26
540	2	89	A COMMENT	\N	2014-07-03 14:27:08	2014-07-03 14:27:08
541	25	89	A COMMENT	\N	2014-07-07 09:09:52	2014-07-07 09:09:52
542	10	89	A COMMENT	\N	2014-07-14 00:14:14	2014-07-14 00:14:14
543	2	89	A COMMENT	\N	2014-07-19 18:59:05	2014-07-19 18:59:05
544	22	90	A COMMENT	\N	2014-07-08 11:28:26	2014-07-08 11:28:26
545	37	90	A COMMENT	\N	2014-07-10 23:46:57	2014-07-10 23:46:57
546	8	90	A COMMENT	\N	2014-07-14 06:28:17	2014-07-14 06:28:17
547	21	90	A COMMENT	\N	2014-07-18 07:36:20	2014-07-18 07:36:20
548	3	90	A COMMENT	\N	2014-07-21 08:04:49	2014-07-21 08:04:49
549	37	90	A COMMENT	\N	2014-07-21 23:10:08	2014-07-21 23:10:08
550	16	90	A COMMENT	\N	2014-07-22 01:27:05	2014-07-22 01:27:05
551	45	90	A COMMENT	\N	2014-07-23 11:52:38	2014-07-23 11:52:38
552	30	90	A COMMENT	\N	2014-07-25 09:45:18	2014-07-25 09:45:18
553	21	91	A COMMENT	\N	2014-04-29 19:04:55	2014-04-29 19:04:55
554	1	91	A COMMENT	\N	2014-05-24 06:22:03	2014-05-24 06:22:03
555	3	91	A COMMENT	\N	2014-05-28 20:01:27	2014-05-28 20:01:27
556	11	91	A COMMENT	\N	2014-05-31 23:29:14	2014-05-31 23:29:14
557	47	91	A COMMENT	\N	2014-06-04 18:30:12	2014-06-04 18:30:12
558	6	91	A COMMENT	\N	2014-06-16 20:12:07	2014-06-16 20:12:07
559	45	91	A COMMENT	\N	2014-07-11 17:06:20	2014-07-11 17:06:20
560	16	91	A COMMENT	\N	2014-07-15 08:14:45	2014-07-15 08:14:45
561	39	91	A COMMENT	\N	2014-07-15 22:33:55	2014-07-15 22:33:55
562	28	91	A COMMENT	\N	2014-07-21 21:01:10	2014-07-21 21:01:10
563	25	92	A COMMENT	\N	2014-03-04 10:26:50	2014-03-04 10:26:50
564	45	92	A COMMENT	\N	2014-03-05 02:28:19	2014-03-05 02:28:19
565	28	92	A COMMENT	\N	2014-03-07 18:45:39	2014-03-07 18:45:39
566	22	92	A COMMENT	\N	2014-03-29 20:16:02	2014-03-29 20:16:02
567	27	92	A COMMENT	\N	2014-04-03 02:46:20	2014-04-03 02:46:20
568	6	92	A COMMENT	\N	2014-04-09 21:40:08	2014-04-09 21:40:08
569	45	92	A COMMENT	\N	2014-04-23 03:03:00	2014-04-23 03:03:00
570	28	92	A COMMENT	\N	2014-04-23 21:49:03	2014-04-23 21:49:03
571	43	92	A COMMENT	\N	2014-04-24 21:36:34	2014-04-24 21:36:34
572	32	92	A COMMENT	\N	2014-04-28 03:15:54	2014-04-28 03:15:54
573	21	92	A COMMENT	\N	2014-05-03 22:31:18	2014-05-03 22:31:18
574	30	92	A COMMENT	\N	2014-05-16 16:06:32	2014-05-16 16:06:32
575	47	92	A COMMENT	\N	2014-06-13 02:24:51	2014-06-13 02:24:51
576	47	92	A COMMENT	\N	2014-06-19 19:22:58	2014-06-19 19:22:58
577	2	92	A COMMENT	\N	2014-06-24 14:56:48	2014-06-24 14:56:48
578	10	92	A COMMENT	\N	2014-06-25 07:40:17	2014-06-25 07:40:17
579	16	92	A COMMENT	\N	2014-07-04 21:15:02	2014-07-04 21:15:02
580	11	92	A COMMENT	\N	2014-07-10 06:51:41	2014-07-10 06:51:41
581	8	95	A COMMENT	\N	2014-04-19 21:06:04	2014-04-19 21:06:04
582	11	95	A COMMENT	\N	2014-04-22 12:37:22	2014-04-22 12:37:22
583	3	95	A COMMENT	\N	2014-05-03 09:44:14	2014-05-03 09:44:14
584	28	96	A COMMENT	\N	2014-07-04 11:41:28	2014-07-04 11:41:28
585	4	96	A COMMENT	\N	2014-07-10 15:26:10	2014-07-10 15:26:10
586	25	96	A COMMENT	\N	2014-07-23 00:23:09	2014-07-23 00:23:09
587	1	96	A COMMENT	\N	2014-07-24 11:58:53	2014-07-24 11:58:53
588	39	96	A COMMENT	\N	2014-07-24 18:47:24	2014-07-24 18:47:24
589	21	97	A COMMENT	\N	2014-07-01 09:42:11	2014-07-01 09:42:11
590	21	97	A COMMENT	\N	2014-07-01 18:05:43	2014-07-01 18:05:43
591	1	97	A COMMENT	\N	2014-07-02 05:01:38	2014-07-02 05:01:38
592	27	97	A COMMENT	\N	2014-07-04 08:58:29	2014-07-04 08:58:29
593	4	97	A COMMENT	\N	2014-07-20 15:14:43	2014-07-20 15:14:43
594	32	100	A COMMENT	\N	2014-07-24 10:09:44	2014-07-24 10:09:44
595	22	101	A COMMENT	\N	2014-06-28 10:30:59	2014-06-28 10:30:59
596	1	102	A COMMENT	\N	2014-06-25 02:49:01	2014-06-25 02:49:01
597	30	102	A COMMENT	\N	2014-06-25 17:14:59	2014-06-25 17:14:59
598	14	102	A COMMENT	\N	2014-07-20 19:18:11	2014-07-20 19:18:11
599	47	103	A COMMENT	\N	2014-07-19 15:26:05	2014-07-19 15:26:05
600	4	103	A COMMENT	\N	2014-07-19 23:25:41	2014-07-19 23:25:41
601	6	103	A COMMENT	\N	2014-07-21 23:00:00	2014-07-21 23:00:00
602	21	103	A COMMENT	\N	2014-07-22 00:14:46	2014-07-22 00:14:46
603	25	103	A COMMENT	\N	2014-07-23 04:10:20	2014-07-23 04:10:20
604	21	103	A COMMENT	\N	2014-07-23 22:12:17	2014-07-23 22:12:17
605	16	103	A COMMENT	\N	2014-07-24 14:07:15	2014-07-24 14:07:15
606	27	103	A COMMENT	\N	2014-07-24 16:45:08	2014-07-24 16:45:08
607	45	103	A COMMENT	\N	2014-07-25 14:16:13	2014-07-25 14:16:13
608	11	103	A COMMENT	\N	2014-07-26 04:30:41	2014-07-26 04:30:41
609	30	116	A COMMENT	\N	2014-07-18 16:43:39	2014-07-18 16:43:39
610	3	116	A COMMENT	\N	2014-07-23 21:57:16	2014-07-23 21:57:16
611	39	105	A COMMENT	\N	2014-07-12 14:44:01	2014-07-12 14:44:01
612	10	106	A COMMENT	\N	2014-06-06 10:22:19	2014-06-06 10:22:19
613	22	106	A COMMENT	\N	2014-06-07 00:37:14	2014-06-07 00:37:14
614	6	106	A COMMENT	\N	2014-06-20 19:23:58	2014-06-20 19:23:58
615	4	106	A COMMENT	\N	2014-06-22 07:25:04	2014-06-22 07:25:04
616	2	106	A COMMENT	\N	2014-06-27 13:41:35	2014-06-27 13:41:35
617	11	106	A COMMENT	\N	2014-07-10 02:09:05	2014-07-10 02:09:05
618	28	106	A COMMENT	\N	2014-07-10 04:32:53	2014-07-10 04:32:53
619	27	106	A COMMENT	\N	2014-07-24 20:00:28	2014-07-24 20:00:28
620	6	106	A COMMENT	\N	2014-07-25 05:41:08	2014-07-25 05:41:08
621	48	106	A COMMENT	\N	2014-07-25 20:05:37	2014-07-25 20:05:37
622	1	107	A COMMENT	\N	2014-06-22 01:45:21	2014-06-22 01:45:21
623	22	107	A COMMENT	\N	2014-07-14 14:20:11	2014-07-14 14:20:11
624	30	107	A COMMENT	\N	2014-07-20 12:55:43	2014-07-20 12:55:43
625	4	109	A COMMENT	\N	2014-06-09 15:21:04	2014-06-09 15:21:04
626	45	109	A COMMENT	\N	2014-07-22 23:26:28	2014-07-22 23:26:28
627	28	109	A COMMENT	\N	2014-07-23 23:03:16	2014-07-23 23:03:16
628	32	110	A COMMENT	\N	2014-07-09 09:10:19	2014-07-09 09:10:19
629	48	110	A COMMENT	\N	2014-07-09 12:28:44	2014-07-09 12:28:44
630	10	110	A COMMENT	\N	2014-07-10 01:01:33	2014-07-10 01:01:33
631	27	110	A COMMENT	\N	2014-07-10 01:10:28	2014-07-10 01:10:28
632	6	110	A COMMENT	\N	2014-07-11 00:50:09	2014-07-11 00:50:09
633	8	110	A COMMENT	\N	2014-07-16 23:20:17	2014-07-16 23:20:17
634	1	110	A COMMENT	\N	2014-07-20 02:28:39	2014-07-20 02:28:39
635	11	110	A COMMENT	\N	2014-07-20 06:20:44	2014-07-20 06:20:44
636	6	110	A COMMENT	\N	2014-07-23 14:09:33	2014-07-23 14:09:33
637	28	110	A COMMENT	\N	2014-07-25 02:32:39	2014-07-25 02:32:39
638	32	111	A COMMENT	\N	2014-07-20 19:26:14	2014-07-20 19:26:14
639	37	111	A COMMENT	\N	2014-07-22 17:04:46	2014-07-22 17:04:46
640	2	112	A COMMENT	\N	2014-06-01 04:28:04	2014-06-01 04:28:04
641	8	112	A COMMENT	\N	2014-06-03 03:09:30	2014-06-03 03:09:30
642	47	112	A COMMENT	\N	2014-06-03 03:37:31	2014-06-03 03:37:31
643	16	112	A COMMENT	\N	2014-06-17 01:09:31	2014-06-17 01:09:31
644	2	112	A COMMENT	\N	2014-06-27 17:25:16	2014-06-27 17:25:16
645	47	113	A COMMENT	\N	2014-06-13 20:01:37	2014-06-13 20:01:37
646	14	113	A COMMENT	\N	2014-06-14 19:12:55	2014-06-14 19:12:55
647	27	113	A COMMENT	\N	2014-06-21 05:53:02	2014-06-21 05:53:02
648	10	113	A COMMENT	\N	2014-06-28 14:38:56	2014-06-28 14:38:56
649	6	113	A COMMENT	\N	2014-07-03 22:01:28	2014-07-03 22:01:28
650	39	113	A COMMENT	\N	2014-07-10 00:08:51	2014-07-10 00:08:51
651	48	113	A COMMENT	\N	2014-07-13 02:55:21	2014-07-13 02:55:21
652	37	113	A COMMENT	\N	2014-07-17 06:54:13	2014-07-17 06:54:13
653	10	114	A COMMENT	\N	2014-06-19 17:16:40	2014-06-19 17:16:40
654	47	114	A COMMENT	\N	2014-06-25 20:26:15	2014-06-25 20:26:15
655	43	114	A COMMENT	\N	2014-06-26 23:03:18	2014-06-26 23:03:18
656	1	114	A COMMENT	\N	2014-07-06 07:39:23	2014-07-06 07:39:23
657	25	114	A COMMENT	\N	2014-07-09 18:40:29	2014-07-09 18:40:29
658	3	114	A COMMENT	\N	2014-07-11 14:44:26	2014-07-11 14:44:26
659	16	114	A COMMENT	\N	2014-07-13 05:34:44	2014-07-13 05:34:44
660	25	114	A COMMENT	\N	2014-07-14 23:42:46	2014-07-14 23:42:46
661	6	114	A COMMENT	\N	2014-07-16 07:02:19	2014-07-16 07:02:19
662	21	194	A COMMENT	\N	2014-07-18 09:34:33	2014-07-18 09:34:33
663	10	194	A COMMENT	\N	2014-07-19 21:58:52	2014-07-19 21:58:52
664	47	194	A COMMENT	\N	2014-07-19 22:51:38	2014-07-19 22:51:38
665	1	194	A COMMENT	\N	2014-07-20 01:12:19	2014-07-20 01:12:19
666	3	194	A COMMENT	\N	2014-07-20 06:41:12	2014-07-20 06:41:12
667	6	194	A COMMENT	\N	2014-07-21 01:39:50	2014-07-21 01:39:50
668	14	194	A COMMENT	\N	2014-07-21 09:12:55	2014-07-21 09:12:55
669	48	194	A COMMENT	\N	2014-07-21 22:29:44	2014-07-21 22:29:44
670	28	194	A COMMENT	\N	2014-07-21 23:43:13	2014-07-21 23:43:13
671	22	194	A COMMENT	\N	2014-07-22 02:14:58	2014-07-22 02:14:58
672	27	194	A COMMENT	\N	2014-07-22 07:30:28	2014-07-22 07:30:28
673	48	194	A COMMENT	\N	2014-07-22 13:21:06	2014-07-22 13:21:06
674	37	194	A COMMENT	\N	2014-07-22 16:32:14	2014-07-22 16:32:14
675	43	194	A COMMENT	\N	2014-07-23 05:23:20	2014-07-23 05:23:20
676	3	194	A COMMENT	\N	2014-07-23 11:01:20	2014-07-23 11:01:20
677	25	194	A COMMENT	\N	2014-07-24 18:14:21	2014-07-24 18:14:21
678	10	194	A COMMENT	\N	2014-07-24 19:28:36	2014-07-24 19:28:36
679	30	194	A COMMENT	\N	2014-07-25 22:17:16	2014-07-25 22:17:16
680	14	194	A COMMENT	\N	2014-07-26 07:42:13	2014-07-26 07:42:13
681	48	194	A COMMENT	\N	2014-07-26 10:53:26	2014-07-26 10:53:26
682	30	117	A COMMENT	\N	2014-07-17 01:31:54	2014-07-17 01:31:54
683	2	118	A COMMENT	\N	2014-07-26 04:23:34	2014-07-26 04:23:34
684	6	119	A COMMENT	\N	2014-06-29 14:20:40	2014-06-29 14:20:40
685	1	119	A COMMENT	\N	2014-07-03 04:03:24	2014-07-03 04:03:24
686	30	119	A COMMENT	\N	2014-07-09 15:00:13	2014-07-09 15:00:13
687	45	119	A COMMENT	\N	2014-07-13 09:28:46	2014-07-13 09:28:46
688	16	119	A COMMENT	\N	2014-07-17 20:22:33	2014-07-17 20:22:33
689	10	119	A COMMENT	\N	2014-07-18 19:44:06	2014-07-18 19:44:06
690	37	119	A COMMENT	\N	2014-07-19 12:43:29	2014-07-19 12:43:29
691	25	119	A COMMENT	\N	2014-07-19 22:12:35	2014-07-19 22:12:35
692	47	119	A COMMENT	\N	2014-07-23 13:49:45	2014-07-23 13:49:45
693	30	119	A COMMENT	\N	2014-07-26 17:03:23	2014-07-26 17:03:23
694	6	121	A COMMENT	\N	2014-04-03 18:37:10	2014-04-03 18:37:10
695	28	121	A COMMENT	\N	2014-05-03 19:18:51	2014-05-03 19:18:51
696	37	121	A COMMENT	\N	2014-05-18 04:32:45	2014-05-18 04:32:45
697	28	121	A COMMENT	\N	2014-05-29 21:03:03	2014-05-29 21:03:03
698	37	123	A COMMENT	\N	2014-04-09 02:02:24	2014-04-09 02:02:24
699	22	123	A COMMENT	\N	2014-04-15 12:57:22	2014-04-15 12:57:22
700	21	123	A COMMENT	\N	2014-04-17 03:09:51	2014-04-17 03:09:51
701	2	123	A COMMENT	\N	2014-04-27 11:59:21	2014-04-27 11:59:21
702	14	123	A COMMENT	\N	2014-04-27 14:29:06	2014-04-27 14:29:06
703	39	123	A COMMENT	\N	2014-05-07 08:39:17	2014-05-07 08:39:17
704	11	123	A COMMENT	\N	2014-05-08 14:06:45	2014-05-08 14:06:45
705	32	123	A COMMENT	\N	2014-05-16 02:50:10	2014-05-16 02:50:10
706	16	123	A COMMENT	\N	2014-06-01 19:35:57	2014-06-01 19:35:57
707	32	123	A COMMENT	\N	2014-06-04 19:41:47	2014-06-04 19:41:47
708	43	123	A COMMENT	\N	2014-06-11 14:31:02	2014-06-11 14:31:02
709	30	123	A COMMENT	\N	2014-06-22 06:20:01	2014-06-22 06:20:01
710	2	123	A COMMENT	\N	2014-07-05 18:43:59	2014-07-05 18:43:59
711	43	125	A COMMENT	\N	2014-05-28 03:02:38	2014-05-28 03:02:38
712	37	125	A COMMENT	\N	2014-06-02 21:42:26	2014-06-02 21:42:26
713	11	125	A COMMENT	\N	2014-06-21 12:55:18	2014-06-21 12:55:18
714	25	125	A COMMENT	\N	2014-06-22 01:01:34	2014-06-22 01:01:34
715	48	125	A COMMENT	\N	2014-07-15 04:12:12	2014-07-15 04:12:12
716	45	127	A COMMENT	\N	2014-05-01 00:50:50	2014-05-01 00:50:50
717	8	127	A COMMENT	\N	2014-05-16 23:16:57	2014-05-16 23:16:57
718	47	127	A COMMENT	\N	2014-06-14 03:52:53	2014-06-14 03:52:53
719	39	127	A COMMENT	\N	2014-06-18 02:38:11	2014-06-18 02:38:11
720	2	127	A COMMENT	\N	2014-07-19 07:20:39	2014-07-19 07:20:39
721	3	128	A COMMENT	\N	2014-05-11 09:41:56	2014-05-11 09:41:56
722	14	128	A COMMENT	\N	2014-05-16 05:59:21	2014-05-16 05:59:21
723	43	128	A COMMENT	\N	2014-05-16 13:24:27	2014-05-16 13:24:27
724	8	128	A COMMENT	\N	2014-06-04 12:28:13	2014-06-04 12:28:13
725	27	128	A COMMENT	\N	2014-06-19 03:34:44	2014-06-19 03:34:44
726	43	129	A COMMENT	\N	2014-05-04 17:25:04	2014-05-04 17:25:04
727	22	129	A COMMENT	\N	2014-05-10 11:46:26	2014-05-10 11:46:26
728	37	129	A COMMENT	\N	2014-07-20 01:59:03	2014-07-20 01:59:03
729	1	129	A COMMENT	\N	2014-07-22 02:43:36	2014-07-22 02:43:36
730	32	130	A COMMENT	\N	2014-02-17 02:32:43	2014-02-17 02:32:43
731	14	130	A COMMENT	\N	2014-03-04 01:13:50	2014-03-04 01:13:50
732	27	130	A COMMENT	\N	2014-04-02 07:32:19	2014-04-02 07:32:19
733	21	130	A COMMENT	\N	2014-04-25 23:12:47	2014-04-25 23:12:47
734	37	130	A COMMENT	\N	2014-04-27 14:21:03	2014-04-27 14:21:03
735	30	130	A COMMENT	\N	2014-05-02 07:19:57	2014-05-02 07:19:57
736	16	130	A COMMENT	\N	2014-05-08 13:16:15	2014-05-08 13:16:15
737	25	130	A COMMENT	\N	2014-06-27 09:45:52	2014-06-27 09:45:52
738	25	130	A COMMENT	\N	2014-07-19 06:15:35	2014-07-19 06:15:35
739	25	142	A COMMENT	\N	2014-03-02 08:42:53	2014-03-02 08:42:53
740	27	143	A COMMENT	\N	2014-06-10 00:17:19	2014-06-10 00:17:19
741	47	143	A COMMENT	\N	2014-07-12 23:18:04	2014-07-12 23:18:04
742	39	143	A COMMENT	\N	2014-07-21 21:15:38	2014-07-21 21:15:38
743	3	131	A COMMENT	\N	2014-01-02 00:00:38	2014-01-02 00:00:38
744	48	131	A COMMENT	\N	2014-03-20 11:51:42	2014-03-20 11:51:42
745	11	131	A COMMENT	\N	2014-05-03 12:18:24	2014-05-03 12:18:24
746	3	131	A COMMENT	\N	2014-06-01 14:24:38	2014-06-01 14:24:38
747	14	132	A COMMENT	\N	2014-01-20 07:34:14	2014-01-20 07:34:14
748	3	132	A COMMENT	\N	2014-01-27 09:04:38	2014-01-27 09:04:38
749	30	132	A COMMENT	\N	2014-05-19 03:00:04	2014-05-19 03:00:04
750	10	132	A COMMENT	\N	2014-05-19 07:43:53	2014-05-19 07:43:53
751	3	133	A COMMENT	\N	2014-02-05 10:01:03	2014-02-05 10:01:03
752	28	133	A COMMENT	\N	2014-03-14 14:57:32	2014-03-14 14:57:32
753	4	133	A COMMENT	\N	2014-06-10 22:44:55	2014-06-10 22:44:55
754	37	135	A COMMENT	\N	2014-06-23 18:39:30	2014-06-23 18:39:30
755	22	135	A COMMENT	\N	2014-07-05 12:56:28	2014-07-05 12:56:28
756	37	135	A COMMENT	\N	2014-07-11 05:38:37	2014-07-11 05:38:37
757	8	135	A COMMENT	\N	2014-07-12 11:25:28	2014-07-12 11:25:28
758	1	136	A COMMENT	\N	2014-04-03 22:22:20	2014-04-03 22:22:20
759	10	136	A COMMENT	\N	2014-04-05 13:21:56	2014-04-05 13:21:56
760	27	136	A COMMENT	\N	2014-04-26 11:28:17	2014-04-26 11:28:17
761	1	136	A COMMENT	\N	2014-05-25 07:55:43	2014-05-25 07:55:43
762	22	136	A COMMENT	\N	2014-06-14 14:46:59	2014-06-14 14:46:59
763	45	136	A COMMENT	\N	2014-06-17 22:33:24	2014-06-17 22:33:24
764	28	136	A COMMENT	\N	2014-07-17 19:24:33	2014-07-17 19:24:33
765	32	136	A COMMENT	\N	2014-07-26 14:41:39	2014-07-26 14:41:39
766	2	137	A COMMENT	\N	2014-02-08 01:46:29	2014-02-08 01:46:29
767	1	137	A COMMENT	\N	2014-02-15 01:33:33	2014-02-15 01:33:33
768	43	137	A COMMENT	\N	2014-03-27 19:06:57	2014-03-27 19:06:57
769	10	137	A COMMENT	\N	2014-04-11 20:57:54	2014-04-11 20:57:54
770	14	138	A COMMENT	\N	2014-04-03 17:11:15	2014-04-03 17:11:15
771	10	138	A COMMENT	\N	2014-04-18 15:37:18	2014-04-18 15:37:18
772	27	138	A COMMENT	\N	2014-05-27 06:25:39	2014-05-27 06:25:39
773	48	138	A COMMENT	\N	2014-05-27 14:53:22	2014-05-27 14:53:22
774	16	138	A COMMENT	\N	2014-06-05 19:52:37	2014-06-05 19:52:37
775	4	138	A COMMENT	\N	2014-06-26 15:19:52	2014-06-26 15:19:52
776	4	139	A COMMENT	\N	2014-06-14 20:07:36	2014-06-14 20:07:36
777	2	139	A COMMENT	\N	2014-06-25 14:18:01	2014-06-25 14:18:01
778	32	140	A COMMENT	\N	2013-12-03 23:53:31	2013-12-03 23:53:31
779	3	140	A COMMENT	\N	2013-12-26 23:10:49	2013-12-26 23:10:49
780	2	140	A COMMENT	\N	2014-04-03 02:21:04	2014-04-03 02:21:04
781	45	140	A COMMENT	\N	2014-06-28 12:19:02	2014-06-28 12:19:02
782	25	140	A COMMENT	\N	2014-07-19 21:58:02	2014-07-19 21:58:02
783	22	229	A COMMENT	\N	2014-07-21 23:27:02	2014-07-21 23:27:02
784	10	229	A COMMENT	\N	2014-07-22 17:45:17	2014-07-22 17:45:17
785	37	144	A COMMENT	\N	2014-05-22 21:58:50	2014-05-22 21:58:50
786	2	147	A COMMENT	\N	2013-12-08 07:24:55	2013-12-08 07:24:55
787	43	147	A COMMENT	\N	2013-12-23 05:08:21	2013-12-23 05:08:21
788	14	147	A COMMENT	\N	2014-01-26 23:37:56	2014-01-26 23:37:56
789	30	147	A COMMENT	\N	2014-01-28 07:19:00	2014-01-28 07:19:00
790	21	147	A COMMENT	\N	2014-02-11 20:23:49	2014-02-11 20:23:49
791	37	147	A COMMENT	\N	2014-03-28 02:53:27	2014-03-28 02:53:27
792	45	147	A COMMENT	\N	2014-03-30 03:40:51	2014-03-30 03:40:51
793	22	147	A COMMENT	\N	2014-04-29 12:13:45	2014-04-29 12:13:45
794	43	147	A COMMENT	\N	2014-05-22 03:24:55	2014-05-22 03:24:55
795	4	147	A COMMENT	\N	2014-07-25 17:17:09	2014-07-25 17:17:09
796	32	148	A COMMENT	\N	2014-03-15 19:17:15	2014-03-15 19:17:15
797	28	148	A COMMENT	\N	2014-03-30 18:29:53	2014-03-30 18:29:53
798	22	148	A COMMENT	\N	2014-04-23 06:54:17	2014-04-23 06:54:17
799	11	148	A COMMENT	\N	2014-05-18 14:02:20	2014-05-18 14:02:20
800	8	148	A COMMENT	\N	2014-05-23 06:24:57	2014-05-23 06:24:57
801	14	148	A COMMENT	\N	2014-06-09 02:30:51	2014-06-09 02:30:51
802	39	148	A COMMENT	\N	2014-06-12 13:08:59	2014-06-12 13:08:59
803	21	148	A COMMENT	\N	2014-06-16 11:26:54	2014-06-16 11:26:54
804	2	148	A COMMENT	\N	2014-07-25 19:58:21	2014-07-25 19:58:21
805	14	149	A COMMENT	\N	2014-01-18 05:21:52	2014-01-18 05:21:52
806	43	149	A COMMENT	\N	2014-02-04 00:25:42	2014-02-04 00:25:42
807	39	149	A COMMENT	\N	2014-02-04 23:55:57	2014-02-04 23:55:57
808	37	149	A COMMENT	\N	2014-03-10 05:16:08	2014-03-10 05:16:08
809	30	149	A COMMENT	\N	2014-03-15 09:44:43	2014-03-15 09:44:43
810	4	149	A COMMENT	\N	2014-03-21 12:34:52	2014-03-21 12:34:52
811	11	149	A COMMENT	\N	2014-03-26 03:41:37	2014-03-26 03:41:37
812	1	149	A COMMENT	\N	2014-03-31 08:08:01	2014-03-31 08:08:01
813	47	149	A COMMENT	\N	2014-04-04 21:41:42	2014-04-04 21:41:42
814	30	149	A COMMENT	\N	2014-04-12 22:15:06	2014-04-12 22:15:06
815	2	149	A COMMENT	\N	2014-04-28 02:05:38	2014-04-28 02:05:38
816	22	149	A COMMENT	\N	2014-06-05 05:28:44	2014-06-05 05:28:44
817	47	149	A COMMENT	\N	2014-07-14 02:36:42	2014-07-14 02:36:42
818	22	150	A COMMENT	\N	2014-06-17 10:22:00	2014-06-17 10:22:00
819	22	150	A COMMENT	\N	2014-07-06 03:21:24	2014-07-06 03:21:24
820	37	151	A COMMENT	\N	2013-11-20 15:04:41	2013-11-20 15:04:41
821	1	151	A COMMENT	\N	2014-02-03 23:52:36	2014-02-03 23:52:36
822	11	151	A COMMENT	\N	2014-06-28 09:24:53	2014-06-28 09:24:53
823	14	152	A COMMENT	\N	2014-03-11 07:14:46	2014-03-11 07:14:46
824	11	152	A COMMENT	\N	2014-04-20 14:03:32	2014-04-20 14:03:32
825	1	152	A COMMENT	\N	2014-05-08 22:01:19	2014-05-08 22:01:19
826	30	152	A COMMENT	\N	2014-07-06 08:47:58	2014-07-06 08:47:58
827	8	152	A COMMENT	\N	2014-07-23 13:20:49	2014-07-23 13:20:49
828	37	155	A COMMENT	\N	2014-05-24 13:55:53	2014-05-24 13:55:53
829	45	155	A COMMENT	\N	2014-05-29 19:27:54	2014-05-29 19:27:54
830	30	155	A COMMENT	\N	2014-07-03 19:41:58	2014-07-03 19:41:58
831	21	195	A COMMENT	\N	2014-05-25 20:42:35	2014-05-25 20:42:35
832	47	195	A COMMENT	\N	2014-06-12 23:48:36	2014-06-12 23:48:36
833	30	195	A COMMENT	\N	2014-06-30 13:22:44	2014-06-30 13:22:44
834	4	157	A COMMENT	\N	2014-05-27 11:10:57	2014-05-27 11:10:57
835	48	157	A COMMENT	\N	2014-05-31 22:56:23	2014-05-31 22:56:23
836	8	157	A COMMENT	\N	2014-06-02 05:13:33	2014-06-02 05:13:33
837	27	157	A COMMENT	\N	2014-06-02 19:56:20	2014-06-02 19:56:20
838	43	157	A COMMENT	\N	2014-06-20 18:05:48	2014-06-20 18:05:48
839	10	157	A COMMENT	\N	2014-06-27 20:12:52	2014-06-27 20:12:52
840	14	157	A COMMENT	\N	2014-07-05 10:40:34	2014-07-05 10:40:34
841	3	157	A COMMENT	\N	2014-07-07 11:29:47	2014-07-07 11:29:47
842	16	157	A COMMENT	\N	2014-07-09 04:33:14	2014-07-09 04:33:14
843	39	157	A COMMENT	\N	2014-07-10 14:09:32	2014-07-10 14:09:32
844	45	157	A COMMENT	\N	2014-07-14 12:22:03	2014-07-14 12:22:03
845	1	157	A COMMENT	\N	2014-07-18 10:25:42	2014-07-18 10:25:42
846	25	157	A COMMENT	\N	2014-07-23 07:20:11	2014-07-23 07:20:11
847	28	158	A COMMENT	\N	2014-03-07 23:45:59	2014-03-07 23:45:59
848	11	158	A COMMENT	\N	2014-05-10 14:07:44	2014-05-10 14:07:44
849	6	158	A COMMENT	\N	2014-07-23 13:09:41	2014-07-23 13:09:41
850	48	159	A COMMENT	\N	2014-05-27 22:32:10	2014-05-27 22:32:10
851	14	159	A COMMENT	\N	2014-07-20 06:45:17	2014-07-20 06:45:17
852	2	160	A COMMENT	\N	2014-05-29 10:01:18	2014-05-29 10:01:18
853	6	160	A COMMENT	\N	2014-06-02 11:41:09	2014-06-02 11:41:09
854	11	160	A COMMENT	\N	2014-06-28 19:14:56	2014-06-28 19:14:56
855	37	161	A COMMENT	\N	2014-07-15 12:05:21	2014-07-15 12:05:21
856	6	161	A COMMENT	\N	2014-07-19 14:41:28	2014-07-19 14:41:28
857	14	161	A COMMENT	\N	2014-07-22 20:46:54	2014-07-22 20:46:54
858	25	161	A COMMENT	\N	2014-07-23 07:02:00	2014-07-23 07:02:00
859	27	161	A COMMENT	\N	2014-07-24 13:05:08	2014-07-24 13:05:08
860	2	162	A COMMENT	\N	2014-07-17 03:37:35	2014-07-17 03:37:35
861	16	162	A COMMENT	\N	2014-07-18 16:07:17	2014-07-18 16:07:17
862	22	162	A COMMENT	\N	2014-07-19 05:44:15	2014-07-19 05:44:15
863	28	162	A COMMENT	\N	2014-07-19 08:33:51	2014-07-19 08:33:51
864	45	162	A COMMENT	\N	2014-07-19 23:54:47	2014-07-19 23:54:47
865	27	162	A COMMENT	\N	2014-07-20 04:29:50	2014-07-20 04:29:50
866	8	162	A COMMENT	\N	2014-07-21 13:06:21	2014-07-21 13:06:21
867	21	162	A COMMENT	\N	2014-07-22 04:32:20	2014-07-22 04:32:20
868	25	162	A COMMENT	\N	2014-07-22 08:03:22	2014-07-22 08:03:22
869	43	162	A COMMENT	\N	2014-07-24 06:02:19	2014-07-24 06:02:19
870	32	163	A COMMENT	\N	2014-07-19 02:38:04	2014-07-19 02:38:04
871	45	163	A COMMENT	\N	2014-07-19 07:04:51	2014-07-19 07:04:51
872	32	163	A COMMENT	\N	2014-07-20 11:34:57	2014-07-20 11:34:57
873	30	163	A COMMENT	\N	2014-07-23 03:17:41	2014-07-23 03:17:41
874	43	164	A COMMENT	\N	2014-07-09 15:00:08	2014-07-09 15:00:08
875	14	164	A COMMENT	\N	2014-07-12 18:05:24	2014-07-12 18:05:24
876	30	164	A COMMENT	\N	2014-07-17 08:38:02	2014-07-17 08:38:02
877	32	164	A COMMENT	\N	2014-07-17 15:53:07	2014-07-17 15:53:07
878	37	164	A COMMENT	\N	2014-07-26 15:34:39	2014-07-26 15:34:39
879	10	196	A COMMENT	\N	2014-06-12 09:30:52	2014-06-12 09:30:52
880	8	196	A COMMENT	\N	2014-07-03 19:06:27	2014-07-03 19:06:27
881	39	196	A COMMENT	\N	2014-07-07 08:10:28	2014-07-07 08:10:28
882	4	196	A COMMENT	\N	2014-07-08 17:05:21	2014-07-08 17:05:21
883	11	196	A COMMENT	\N	2014-07-11 08:28:30	2014-07-11 08:28:30
884	27	196	A COMMENT	\N	2014-07-14 11:28:50	2014-07-14 11:28:50
885	48	196	A COMMENT	\N	2014-07-15 10:07:51	2014-07-15 10:07:51
886	30	196	A COMMENT	\N	2014-07-22 08:25:22	2014-07-22 08:25:22
887	30	165	A COMMENT	\N	2014-07-11 14:18:50	2014-07-11 14:18:50
888	3	165	A COMMENT	\N	2014-07-12 16:21:33	2014-07-12 16:21:33
889	30	165	A COMMENT	\N	2014-07-24 16:54:51	2014-07-24 16:54:51
890	43	165	A COMMENT	\N	2014-07-25 11:26:44	2014-07-25 11:26:44
891	4	166	A COMMENT	\N	2014-07-22 20:28:07	2014-07-22 20:28:07
892	16	168	A COMMENT	\N	2014-07-19 11:29:22	2014-07-19 11:29:22
893	1	168	A COMMENT	\N	2014-07-22 14:53:34	2014-07-22 14:53:34
894	8	168	A COMMENT	\N	2014-07-23 23:31:05	2014-07-23 23:31:05
895	22	168	A COMMENT	\N	2014-07-24 11:57:05	2014-07-24 11:57:05
896	28	168	A COMMENT	\N	2014-07-24 12:05:25	2014-07-24 12:05:25
897	6	170	A COMMENT	\N	2014-07-20 15:12:06	2014-07-20 15:12:06
898	30	170	A COMMENT	\N	2014-07-20 21:28:19	2014-07-20 21:28:19
899	25	170	A COMMENT	\N	2014-07-21 17:14:26	2014-07-21 17:14:26
900	47	170	A COMMENT	\N	2014-07-21 20:10:13	2014-07-21 20:10:13
901	21	170	A COMMENT	\N	2014-07-21 23:36:07	2014-07-21 23:36:07
902	22	170	A COMMENT	\N	2014-07-22 10:12:01	2014-07-22 10:12:01
903	21	170	A COMMENT	\N	2014-07-22 17:29:49	2014-07-22 17:29:49
904	8	170	A COMMENT	\N	2014-07-22 22:02:41	2014-07-22 22:02:41
905	28	170	A COMMENT	\N	2014-07-23 04:26:08	2014-07-23 04:26:08
906	2	170	A COMMENT	\N	2014-07-24 13:33:04	2014-07-24 13:33:04
907	6	170	A COMMENT	\N	2014-07-24 19:07:07	2014-07-24 19:07:07
908	4	170	A COMMENT	\N	2014-07-24 22:46:21	2014-07-24 22:46:21
909	11	170	A COMMENT	\N	2014-07-24 23:36:32	2014-07-24 23:36:32
910	25	170	A COMMENT	\N	2014-07-25 03:07:46	2014-07-25 03:07:46
911	27	170	A COMMENT	\N	2014-07-25 23:17:46	2014-07-25 23:17:46
912	11	170	A COMMENT	\N	2014-07-26 07:46:59	2014-07-26 07:46:59
913	48	170	A COMMENT	\N	2014-07-26 16:35:18	2014-07-26 16:35:18
914	27	171	A COMMENT	\N	2014-07-16 16:34:10	2014-07-16 16:34:10
915	28	171	A COMMENT	\N	2014-07-20 04:13:46	2014-07-20 04:13:46
916	30	171	A COMMENT	\N	2014-07-26 14:54:03	2014-07-26 14:54:03
917	6	172	A COMMENT	\N	2014-07-16 09:49:12	2014-07-16 09:49:12
918	39	172	A COMMENT	\N	2014-07-17 23:56:00	2014-07-17 23:56:00
919	39	172	A COMMENT	\N	2014-07-18 09:49:00	2014-07-18 09:49:00
920	28	172	A COMMENT	\N	2014-07-18 23:46:53	2014-07-18 23:46:53
921	1	172	A COMMENT	\N	2014-07-18 23:59:33	2014-07-18 23:59:33
922	25	172	A COMMENT	\N	2014-07-20 13:00:00	2014-07-20 13:00:00
923	32	172	A COMMENT	\N	2014-07-21 18:08:58	2014-07-21 18:08:58
924	4	172	A COMMENT	\N	2014-07-24 09:48:31	2014-07-24 09:48:31
925	21	172	A COMMENT	\N	2014-07-25 00:00:49	2014-07-25 00:00:49
926	45	172	A COMMENT	\N	2014-07-25 02:27:20	2014-07-25 02:27:20
927	4	172	A COMMENT	\N	2014-07-25 17:14:43	2014-07-25 17:14:43
928	1	172	A COMMENT	\N	2014-07-26 10:25:24	2014-07-26 10:25:24
929	43	172	A COMMENT	\N	2014-07-26 11:30:25	2014-07-26 11:30:25
930	28	174	A COMMENT	\N	2014-07-16 06:40:52	2014-07-16 06:40:52
931	39	181	A COMMENT	\N	2014-06-14 07:42:29	2014-06-14 07:42:29
932	30	181	A COMMENT	\N	2014-07-02 15:29:00	2014-07-02 15:29:00
933	25	181	A COMMENT	\N	2014-07-20 22:34:32	2014-07-20 22:34:32
934	47	175	A COMMENT	\N	2014-07-11 03:37:42	2014-07-11 03:37:42
935	3	175	A COMMENT	\N	2014-07-17 07:29:46	2014-07-17 07:29:46
936	32	175	A COMMENT	\N	2014-07-18 19:39:47	2014-07-18 19:39:47
937	6	175	A COMMENT	\N	2014-07-19 00:57:14	2014-07-19 00:57:14
938	47	178	A COMMENT	\N	2014-07-25 14:28:31	2014-07-25 14:28:31
939	48	179	A COMMENT	\N	2014-07-05 15:11:40	2014-07-05 15:11:40
940	3	179	A COMMENT	\N	2014-07-17 05:31:48	2014-07-17 05:31:48
941	30	179	A COMMENT	\N	2014-07-18 11:59:25	2014-07-18 11:59:25
942	14	179	A COMMENT	\N	2014-07-21 17:19:14	2014-07-21 17:19:14
943	11	179	A COMMENT	\N	2014-07-23 08:55:20	2014-07-23 08:55:20
944	3	180	A COMMENT	\N	2014-06-12 10:32:33	2014-06-12 10:32:33
945	30	180	A COMMENT	\N	2014-06-16 23:35:51	2014-06-16 23:35:51
946	4	180	A COMMENT	\N	2014-06-24 09:13:43	2014-06-24 09:13:43
947	45	180	A COMMENT	\N	2014-07-06 03:26:27	2014-07-06 03:26:27
948	39	180	A COMMENT	\N	2014-07-11 10:17:43	2014-07-11 10:17:43
949	1	183	A COMMENT	\N	2014-07-02 16:16:52	2014-07-02 16:16:52
950	6	183	A COMMENT	\N	2014-07-04 12:21:35	2014-07-04 12:21:35
951	8	183	A COMMENT	\N	2014-07-05 02:18:49	2014-07-05 02:18:49
952	8	183	A COMMENT	\N	2014-07-05 13:48:08	2014-07-05 13:48:08
953	47	183	A COMMENT	\N	2014-07-06 01:55:26	2014-07-06 01:55:26
954	22	183	A COMMENT	\N	2014-07-09 08:30:36	2014-07-09 08:30:36
955	28	183	A COMMENT	\N	2014-07-10 01:47:10	2014-07-10 01:47:10
956	2	183	A COMMENT	\N	2014-07-10 10:16:08	2014-07-10 10:16:08
957	30	183	A COMMENT	\N	2014-07-14 16:32:15	2014-07-14 16:32:15
958	43	183	A COMMENT	\N	2014-07-15 13:13:51	2014-07-15 13:13:51
959	37	183	A COMMENT	\N	2014-07-16 16:28:17	2014-07-16 16:28:17
960	37	183	A COMMENT	\N	2014-07-16 20:11:12	2014-07-16 20:11:12
961	10	183	A COMMENT	\N	2014-07-17 10:38:31	2014-07-17 10:38:31
962	1	183	A COMMENT	\N	2014-07-19 12:02:23	2014-07-19 12:02:23
963	25	183	A COMMENT	\N	2014-07-20 19:25:11	2014-07-20 19:25:11
964	25	183	A COMMENT	\N	2014-07-21 18:40:56	2014-07-21 18:40:56
965	2	183	A COMMENT	\N	2014-07-23 03:28:07	2014-07-23 03:28:07
966	39	183	A COMMENT	\N	2014-07-24 14:21:28	2014-07-24 14:21:28
967	25	184	A COMMENT	\N	2014-07-03 01:26:44	2014-07-03 01:26:44
968	27	184	A COMMENT	\N	2014-07-06 10:42:21	2014-07-06 10:42:21
969	14	184	A COMMENT	\N	2014-07-20 09:46:11	2014-07-20 09:46:11
970	47	184	A COMMENT	\N	2014-07-23 06:26:09	2014-07-23 06:26:09
971	10	184	A COMMENT	\N	2014-07-23 11:51:17	2014-07-23 11:51:17
972	30	186	A COMMENT	\N	2014-07-03 04:04:39	2014-07-03 04:04:39
973	10	186	A COMMENT	\N	2014-07-13 12:46:55	2014-07-13 12:46:55
974	8	186	A COMMENT	\N	2014-07-13 23:10:32	2014-07-13 23:10:32
975	43	186	A COMMENT	\N	2014-07-15 01:48:19	2014-07-15 01:48:19
976	30	186	A COMMENT	\N	2014-07-16 11:32:27	2014-07-16 11:32:27
977	25	186	A COMMENT	\N	2014-07-20 23:33:11	2014-07-20 23:33:11
978	25	186	A COMMENT	\N	2014-07-23 08:15:39	2014-07-23 08:15:39
979	27	186	A COMMENT	\N	2014-07-24 14:18:37	2014-07-24 14:18:37
980	16	186	A COMMENT	\N	2014-07-25 03:29:55	2014-07-25 03:29:55
981	47	186	A COMMENT	\N	2014-07-26 17:11:08	2014-07-26 17:11:08
982	25	187	A COMMENT	\N	2014-07-03 15:06:26	2014-07-03 15:06:26
983	8	187	A COMMENT	\N	2014-07-07 01:05:35	2014-07-07 01:05:35
984	22	190	A COMMENT	\N	2014-04-21 16:09:02	2014-04-21 16:09:02
985	39	190	A COMMENT	\N	2014-04-28 11:20:54	2014-04-28 11:20:54
986	37	190	A COMMENT	\N	2014-05-02 09:42:00	2014-05-02 09:42:00
987	32	190	A COMMENT	\N	2014-05-04 02:10:49	2014-05-04 02:10:49
988	27	190	A COMMENT	\N	2014-06-07 20:43:29	2014-06-07 20:43:29
989	2	190	A COMMENT	\N	2014-06-22 17:48:46	2014-06-22 17:48:46
990	47	190	A COMMENT	\N	2014-06-27 15:48:45	2014-06-27 15:48:45
991	45	190	A COMMENT	\N	2014-07-03 03:16:54	2014-07-03 03:16:54
992	27	190	A COMMENT	\N	2014-07-13 22:31:22	2014-07-13 22:31:22
993	6	190	A COMMENT	\N	2014-07-16 04:05:05	2014-07-16 04:05:05
994	37	191	A COMMENT	\N	2014-06-18 22:05:22	2014-06-18 22:05:22
995	47	191	A COMMENT	\N	2014-07-06 19:11:17	2014-07-06 19:11:17
996	10	191	A COMMENT	\N	2014-07-22 15:16:13	2014-07-22 15:16:13
997	2	191	A COMMENT	\N	2014-07-24 07:19:49	2014-07-24 07:19:49
998	10	191	A COMMENT	\N	2014-07-25 05:08:38	2014-07-25 05:08:38
999	1	193	A COMMENT	\N	2014-07-03 03:04:48	2014-07-03 03:04:48
1000	39	193	A COMMENT	\N	2014-07-08 04:49:48	2014-07-08 04:49:48
1001	22	193	A COMMENT	\N	2014-07-13 19:13:38	2014-07-13 19:13:38
1002	14	193	A COMMENT	\N	2014-07-14 08:02:29	2014-07-14 08:02:29
1003	37	193	A COMMENT	\N	2014-07-16 12:10:14	2014-07-16 12:10:14
1004	16	193	A COMMENT	\N	2014-07-16 15:08:07	2014-07-16 15:08:07
1005	21	193	A COMMENT	\N	2014-07-24 15:17:12	2014-07-24 15:17:12
1006	27	200	A COMMENT	\N	2014-05-30 15:40:29	2014-05-30 15:40:29
1007	30	200	A COMMENT	\N	2014-06-26 00:28:47	2014-06-26 00:28:47
1008	32	200	A COMMENT	\N	2014-06-27 11:40:52	2014-06-27 11:40:52
1009	30	200	A COMMENT	\N	2014-07-03 10:40:36	2014-07-03 10:40:36
1010	32	201	A COMMENT	\N	2014-01-16 05:56:48	2014-01-16 05:56:48
1011	37	201	A COMMENT	\N	2014-02-11 12:07:16	2014-02-11 12:07:16
1012	6	201	A COMMENT	\N	2014-04-01 13:26:09	2014-04-01 13:26:09
1013	48	201	A COMMENT	\N	2014-04-20 03:54:19	2014-04-20 03:54:19
1014	1	201	A COMMENT	\N	2014-04-22 00:57:12	2014-04-22 00:57:12
1015	10	201	A COMMENT	\N	2014-06-09 22:41:29	2014-06-09 22:41:29
1016	21	201	A COMMENT	\N	2014-06-17 23:12:51	2014-06-17 23:12:51
1017	48	201	A COMMENT	\N	2014-07-04 17:36:07	2014-07-04 17:36:07
1018	8	201	A COMMENT	\N	2014-07-10 07:34:23	2014-07-10 07:34:23
1019	48	202	A COMMENT	\N	2014-02-26 10:27:40	2014-02-26 10:27:40
1020	10	202	A COMMENT	\N	2014-03-04 06:38:13	2014-03-04 06:38:13
1021	16	202	A COMMENT	\N	2014-04-20 18:10:43	2014-04-20 18:10:43
1022	48	202	A COMMENT	\N	2014-07-07 20:32:53	2014-07-07 20:32:53
1023	6	202	A COMMENT	\N	2014-07-18 04:55:56	2014-07-18 04:55:56
1024	30	202	A COMMENT	\N	2014-07-26 15:33:37	2014-07-26 15:33:37
1025	37	204	A COMMENT	\N	2014-05-29 10:19:21	2014-05-29 10:19:21
1026	43	204	A COMMENT	\N	2014-06-10 00:08:59	2014-06-10 00:08:59
1027	11	204	A COMMENT	\N	2014-06-23 16:51:05	2014-06-23 16:51:05
1028	47	204	A COMMENT	\N	2014-07-08 10:52:04	2014-07-08 10:52:04
1029	27	208	A COMMENT	\N	2014-04-01 18:23:34	2014-04-01 18:23:34
1030	2	208	A COMMENT	\N	2014-04-09 09:32:54	2014-04-09 09:32:54
1031	10	208	A COMMENT	\N	2014-04-30 10:20:37	2014-04-30 10:20:37
1032	37	208	A COMMENT	\N	2014-05-07 08:01:17	2014-05-07 08:01:17
1033	2	208	A COMMENT	\N	2014-05-16 04:14:10	2014-05-16 04:14:10
1034	11	208	A COMMENT	\N	2014-05-20 13:24:13	2014-05-20 13:24:13
1035	37	208	A COMMENT	\N	2014-05-26 12:28:23	2014-05-26 12:28:23
1036	39	208	A COMMENT	\N	2014-06-16 16:28:58	2014-06-16 16:28:58
1037	32	208	A COMMENT	\N	2014-06-27 05:40:36	2014-06-27 05:40:36
1038	14	208	A COMMENT	\N	2014-07-03 19:32:00	2014-07-03 19:32:00
1039	28	208	A COMMENT	\N	2014-07-08 01:55:42	2014-07-08 01:55:42
1040	6	208	A COMMENT	\N	2014-07-14 05:47:41	2014-07-14 05:47:41
1041	14	208	A COMMENT	\N	2014-07-15 19:47:33	2014-07-15 19:47:33
1042	10	208	A COMMENT	\N	2014-07-22 13:14:32	2014-07-22 13:14:32
1043	2	209	A COMMENT	\N	2014-01-08 23:37:33	2014-01-08 23:37:33
1044	14	209	A COMMENT	\N	2014-02-11 06:10:26	2014-02-11 06:10:26
1045	10	209	A COMMENT	\N	2014-05-05 18:39:52	2014-05-05 18:39:52
1046	11	209	A COMMENT	\N	2014-05-13 10:08:27	2014-05-13 10:08:27
1047	22	211	A COMMENT	\N	2014-06-03 00:21:22	2014-06-03 00:21:22
1048	11	211	A COMMENT	\N	2014-06-11 23:39:01	2014-06-11 23:39:01
1049	28	211	A COMMENT	\N	2014-06-20 11:35:43	2014-06-20 11:35:43
1050	45	211	A COMMENT	\N	2014-07-03 23:58:42	2014-07-03 23:58:42
1051	22	212	A COMMENT	\N	2014-05-12 23:00:35	2014-05-12 23:00:35
1052	16	212	A COMMENT	\N	2014-05-14 15:21:51	2014-05-14 15:21:51
1053	16	212	A COMMENT	\N	2014-07-08 22:43:43	2014-07-08 22:43:43
1054	37	212	A COMMENT	\N	2014-07-18 04:56:15	2014-07-18 04:56:15
1055	10	212	A COMMENT	\N	2014-07-22 14:22:43	2014-07-22 14:22:43
1056	4	213	A COMMENT	\N	2014-02-05 16:38:51	2014-02-05 16:38:51
1057	6	213	A COMMENT	\N	2014-04-20 09:14:48	2014-04-20 09:14:48
1058	47	213	A COMMENT	\N	2014-04-21 18:29:19	2014-04-21 18:29:19
1059	43	213	A COMMENT	\N	2014-07-08 08:55:51	2014-07-08 08:55:51
1060	3	213	A COMMENT	\N	2014-07-10 10:47:40	2014-07-10 10:47:40
1061	37	215	A COMMENT	\N	2014-04-26 17:58:07	2014-04-26 17:58:07
1062	30	215	A COMMENT	\N	2014-04-28 11:36:33	2014-04-28 11:36:33
1063	2	215	A COMMENT	\N	2014-05-13 02:11:02	2014-05-13 02:11:02
1064	3	215	A COMMENT	\N	2014-05-28 04:28:06	2014-05-28 04:28:06
1065	25	215	A COMMENT	\N	2014-06-08 04:16:25	2014-06-08 04:16:25
1066	2	216	A COMMENT	\N	2014-05-09 10:17:36	2014-05-09 10:17:36
1067	2	216	A COMMENT	\N	2014-06-09 06:20:42	2014-06-09 06:20:42
1068	8	216	A COMMENT	\N	2014-06-15 21:49:16	2014-06-15 21:49:16
1069	25	216	A COMMENT	\N	2014-06-20 01:59:28	2014-06-20 01:59:28
1070	32	217	A COMMENT	\N	2014-06-29 11:43:09	2014-06-29 11:43:09
1071	27	217	A COMMENT	\N	2014-06-30 00:34:04	2014-06-30 00:34:04
1072	37	217	A COMMENT	\N	2014-06-30 16:58:04	2014-06-30 16:58:04
1073	1	217	A COMMENT	\N	2014-07-04 06:43:01	2014-07-04 06:43:01
1074	47	217	A COMMENT	\N	2014-07-06 17:23:18	2014-07-06 17:23:18
1075	4	217	A COMMENT	\N	2014-07-07 09:38:32	2014-07-07 09:38:32
1076	45	217	A COMMENT	\N	2014-07-07 10:59:09	2014-07-07 10:59:09
1077	32	217	A COMMENT	\N	2014-07-07 22:13:03	2014-07-07 22:13:03
1078	48	217	A COMMENT	\N	2014-07-09 07:24:44	2014-07-09 07:24:44
1079	6	217	A COMMENT	\N	2014-07-11 08:28:47	2014-07-11 08:28:47
1080	25	217	A COMMENT	\N	2014-07-16 07:19:18	2014-07-16 07:19:18
1081	39	217	A COMMENT	\N	2014-07-16 09:40:27	2014-07-16 09:40:27
1082	11	217	A COMMENT	\N	2014-07-18 05:22:04	2014-07-18 05:22:04
1083	2	217	A COMMENT	\N	2014-07-23 16:01:42	2014-07-23 16:01:42
1084	48	222	A COMMENT	\N	2014-03-20 01:41:49	2014-03-20 01:41:49
1085	22	222	A COMMENT	\N	2014-03-30 19:08:08	2014-03-30 19:08:08
1086	43	222	A COMMENT	\N	2014-04-11 11:40:48	2014-04-11 11:40:48
1087	39	222	A COMMENT	\N	2014-05-02 16:31:39	2014-05-02 16:31:39
1088	1	222	A COMMENT	\N	2014-05-29 12:13:50	2014-05-29 12:13:50
1089	10	225	A COMMENT	\N	2014-03-06 10:30:48	2014-03-06 10:30:48
1090	37	225	A COMMENT	\N	2014-04-12 13:09:17	2014-04-12 13:09:17
1091	48	225	A COMMENT	\N	2014-04-24 06:43:45	2014-04-24 06:43:45
1092	22	225	A COMMENT	\N	2014-06-16 20:20:15	2014-06-16 20:20:15
1093	30	225	A COMMENT	\N	2014-07-23 09:47:46	2014-07-23 09:47:46
1094	14	226	A COMMENT	\N	2014-03-23 09:35:17	2014-03-23 09:35:17
1095	45	226	A COMMENT	\N	2014-04-03 14:15:16	2014-04-03 14:15:16
1096	39	226	A COMMENT	\N	2014-04-05 02:56:45	2014-04-05 02:56:45
1097	48	226	A COMMENT	\N	2014-05-04 11:19:49	2014-05-04 11:19:49
1098	45	226	A COMMENT	\N	2014-05-16 11:14:55	2014-05-16 11:14:55
1099	27	226	A COMMENT	\N	2014-05-23 11:04:51	2014-05-23 11:04:51
1100	25	226	A COMMENT	\N	2014-05-27 23:14:01	2014-05-27 23:14:01
1101	1	226	A COMMENT	\N	2014-06-08 08:31:44	2014-06-08 08:31:44
1102	28	226	A COMMENT	\N	2014-06-09 08:11:45	2014-06-09 08:11:45
1103	10	226	A COMMENT	\N	2014-06-12 19:34:14	2014-06-12 19:34:14
1104	43	226	A COMMENT	\N	2014-06-23 19:41:42	2014-06-23 19:41:42
1105	30	226	A COMMENT	\N	2014-07-04 23:17:29	2014-07-04 23:17:29
1106	22	226	A COMMENT	\N	2014-07-07 06:41:28	2014-07-07 06:41:28
1107	1	227	A COMMENT	\N	2014-03-30 15:24:32	2014-03-30 15:24:32
1108	47	227	A COMMENT	\N	2014-04-03 07:18:47	2014-04-03 07:18:47
1109	32	227	A COMMENT	\N	2014-04-12 00:04:33	2014-04-12 00:04:33
1110	2	227	A COMMENT	\N	2014-04-25 16:15:17	2014-04-25 16:15:17
1111	25	227	A COMMENT	\N	2014-05-29 10:04:59	2014-05-29 10:04:59
1112	10	227	A COMMENT	\N	2014-06-01 11:57:31	2014-06-01 11:57:31
1113	28	227	A COMMENT	\N	2014-06-25 04:20:46	2014-06-25 04:20:46
1114	32	227	A COMMENT	\N	2014-06-27 08:34:53	2014-06-27 08:34:53
1115	14	227	A COMMENT	\N	2014-07-17 08:24:36	2014-07-17 08:24:36
1116	6	228	A COMMENT	\N	2014-06-28 20:43:49	2014-06-28 20:43:49
1117	4	228	A COMMENT	\N	2014-07-03 16:21:51	2014-07-03 16:21:51
1118	21	228	A COMMENT	\N	2014-07-07 19:07:26	2014-07-07 19:07:26
1119	21	228	A COMMENT	\N	2014-07-08 19:32:53	2014-07-08 19:32:53
1120	39	228	A COMMENT	\N	2014-07-10 10:00:21	2014-07-10 10:00:21
1121	14	228	A COMMENT	\N	2014-07-11 12:15:44	2014-07-11 12:15:44
1122	27	228	A COMMENT	\N	2014-07-14 20:43:05	2014-07-14 20:43:05
1123	32	228	A COMMENT	\N	2014-07-17 14:23:14	2014-07-17 14:23:14
1124	8	228	A COMMENT	\N	2014-07-24 08:56:20	2014-07-24 08:56:20
1125	11	233	A COMMENT	\N	2014-06-30 05:42:11	2014-06-30 05:42:11
1126	21	233	A COMMENT	\N	2014-07-04 15:09:01	2014-07-04 15:09:01
1127	11	233	A COMMENT	\N	2014-07-11 23:10:07	2014-07-11 23:10:07
1128	8	234	A COMMENT	\N	2014-07-13 01:16:46	2014-07-13 01:16:46
1129	32	234	A COMMENT	\N	2014-07-17 17:37:58	2014-07-17 17:37:58
1130	1	234	A COMMENT	\N	2014-07-20 20:53:25	2014-07-20 20:53:25
1131	4	234	A COMMENT	\N	2014-07-23 09:55:03	2014-07-23 09:55:03
1132	2	234	A COMMENT	\N	2014-07-24 16:58:39	2014-07-24 16:58:39
1133	28	234	A COMMENT	\N	2014-07-25 08:20:23	2014-07-25 08:20:23
1134	1	236	A COMMENT	\N	2014-07-06 12:47:52	2014-07-06 12:47:52
1135	21	236	A COMMENT	\N	2014-07-07 17:37:39	2014-07-07 17:37:39
1136	10	236	A COMMENT	\N	2014-07-11 02:41:27	2014-07-11 02:41:27
1137	6	236	A COMMENT	\N	2014-07-12 07:37:36	2014-07-12 07:37:36
1138	8	236	A COMMENT	\N	2014-07-15 05:59:02	2014-07-15 05:59:02
1139	3	237	A COMMENT	\N	2014-07-21 05:58:12	2014-07-21 05:58:12
1140	1	237	A COMMENT	\N	2014-07-21 21:35:09	2014-07-21 21:35:09
1141	43	237	A COMMENT	\N	2014-07-21 21:40:22	2014-07-21 21:40:22
1142	27	241	A COMMENT	\N	2014-05-01 21:44:35	2014-05-01 21:44:35
1143	14	241	A COMMENT	\N	2014-06-10 22:26:50	2014-06-10 22:26:50
1144	3	241	A COMMENT	\N	2014-06-29 21:18:42	2014-06-29 21:18:42
1145	25	241	A COMMENT	\N	2014-07-01 04:16:24	2014-07-01 04:16:24
1146	28	242	A COMMENT	\N	2014-05-27 10:55:38	2014-05-27 10:55:38
1147	25	242	A COMMENT	\N	2014-06-07 14:30:06	2014-06-07 14:30:06
1148	25	242	A COMMENT	\N	2014-06-10 21:38:42	2014-06-10 21:38:42
1149	25	242	A COMMENT	\N	2014-06-15 15:20:48	2014-06-15 15:20:48
1150	37	242	A COMMENT	\N	2014-06-18 03:07:52	2014-06-18 03:07:52
1151	11	242	A COMMENT	\N	2014-06-21 04:42:02	2014-06-21 04:42:02
1152	39	242	A COMMENT	\N	2014-07-04 04:12:25	2014-07-04 04:12:25
1153	43	242	A COMMENT	\N	2014-07-08 19:07:21	2014-07-08 19:07:21
1154	39	242	A COMMENT	\N	2014-07-17 15:50:03	2014-07-17 15:50:03
1155	8	242	A COMMENT	\N	2014-07-22 14:32:03	2014-07-22 14:32:03
1156	32	243	A COMMENT	\N	2014-06-25 22:03:45	2014-06-25 22:03:45
1157	11	245	A COMMENT	\N	2014-06-01 16:53:37	2014-06-01 16:53:37
1158	39	245	A COMMENT	\N	2014-06-02 23:58:02	2014-06-02 23:58:02
1159	28	246	A COMMENT	\N	2014-06-06 09:28:59	2014-06-06 09:28:59
1160	14	246	A COMMENT	\N	2014-06-09 03:58:48	2014-06-09 03:58:48
1161	2	246	A COMMENT	\N	2014-07-06 14:35:07	2014-07-06 14:35:07
1162	47	246	A COMMENT	\N	2014-07-16 03:46:47	2014-07-16 03:46:47
1163	48	247	A COMMENT	\N	2014-06-08 01:26:31	2014-06-08 01:26:31
1164	32	247	A COMMENT	\N	2014-06-17 11:36:38	2014-06-17 11:36:38
1165	47	247	A COMMENT	\N	2014-06-27 11:36:10	2014-06-27 11:36:10
1166	27	247	A COMMENT	\N	2014-07-23 01:16:05	2014-07-23 01:16:05
1167	6	247	A COMMENT	\N	2014-07-24 21:46:15	2014-07-24 21:46:15
1168	8	248	A COMMENT	\N	2014-06-18 10:27:08	2014-06-18 10:27:08
1169	32	248	A COMMENT	\N	2014-06-20 04:07:22	2014-06-20 04:07:22
1170	1	248	A COMMENT	\N	2014-06-28 11:51:09	2014-06-28 11:51:09
1171	32	248	A COMMENT	\N	2014-07-02 02:32:37	2014-07-02 02:32:37
1172	32	248	A COMMENT	\N	2014-07-06 20:12:51	2014-07-06 20:12:51
1173	25	248	A COMMENT	\N	2014-07-18 07:33:55	2014-07-18 07:33:55
1174	27	248	A COMMENT	\N	2014-07-18 20:57:08	2014-07-18 20:57:08
1175	22	248	A COMMENT	\N	2014-07-25 17:21:18	2014-07-25 17:21:18
1176	39	250	A COMMENT	\N	2014-07-13 01:40:22	2014-07-13 01:40:22
1177	45	250	A COMMENT	\N	2014-07-13 07:58:38	2014-07-13 07:58:38
1178	8	250	A COMMENT	\N	2014-07-14 07:27:45	2014-07-14 07:27:45
1179	4	250	A COMMENT	\N	2014-07-16 08:53:29	2014-07-16 08:53:29
1180	16	250	A COMMENT	\N	2014-07-20 22:35:29	2014-07-20 22:35:29
1181	21	251	A COMMENT	\N	2014-04-06 19:06:45	2014-04-06 19:06:45
1182	37	251	A COMMENT	\N	2014-04-11 18:35:24	2014-04-11 18:35:24
1183	1	251	A COMMENT	\N	2014-04-19 20:47:31	2014-04-19 20:47:31
1184	25	251	A COMMENT	\N	2014-04-20 17:03:26	2014-04-20 17:03:26
1185	47	251	A COMMENT	\N	2014-04-21 05:56:37	2014-04-21 05:56:37
1186	16	251	A COMMENT	\N	2014-04-24 12:21:16	2014-04-24 12:21:16
1187	4	251	A COMMENT	\N	2014-04-29 17:41:51	2014-04-29 17:41:51
1188	21	251	A COMMENT	\N	2014-04-30 01:39:30	2014-04-30 01:39:30
1189	22	251	A COMMENT	\N	2014-04-30 05:06:17	2014-04-30 05:06:17
1190	48	251	A COMMENT	\N	2014-05-07 21:55:24	2014-05-07 21:55:24
1191	14	251	A COMMENT	\N	2014-05-18 07:57:22	2014-05-18 07:57:22
1192	8	251	A COMMENT	\N	2014-06-08 09:12:50	2014-06-08 09:12:50
1193	2	251	A COMMENT	\N	2014-06-13 01:17:53	2014-06-13 01:17:53
1194	25	251	A COMMENT	\N	2014-06-20 12:30:51	2014-06-20 12:30:51
1195	3	251	A COMMENT	\N	2014-06-26 00:39:15	2014-06-26 00:39:15
1196	10	251	A COMMENT	\N	2014-07-25 09:18:31	2014-07-25 09:18:31
1197	21	252	A COMMENT	\N	2014-05-07 05:44:46	2014-05-07 05:44:46
1198	30	252	A COMMENT	\N	2014-05-22 23:31:05	2014-05-22 23:31:05
1199	4	252	A COMMENT	\N	2014-05-24 09:00:49	2014-05-24 09:00:49
1200	27	252	A COMMENT	\N	2014-06-14 08:48:10	2014-06-14 08:48:10
1201	3	252	A COMMENT	\N	2014-06-14 18:26:56	2014-06-14 18:26:56
1202	32	252	A COMMENT	\N	2014-06-15 07:45:11	2014-06-15 07:45:11
1203	27	252	A COMMENT	\N	2014-06-15 19:11:14	2014-06-15 19:11:14
1204	25	252	A COMMENT	\N	2014-07-04 05:20:00	2014-07-04 05:20:00
1205	25	252	A COMMENT	\N	2014-07-11 04:39:17	2014-07-11 04:39:17
1206	3	254	A COMMENT	\N	2014-07-05 15:41:15	2014-07-05 15:41:15
1207	27	254	A COMMENT	\N	2014-07-20 19:05:20	2014-07-20 19:05:20
1208	27	254	A COMMENT	\N	2014-07-23 22:25:39	2014-07-23 22:25:39
1209	6	255	A COMMENT	\N	2014-07-16 22:02:25	2014-07-16 22:02:25
1210	48	255	A COMMENT	\N	2014-07-19 00:01:35	2014-07-19 00:01:35
1211	16	255	A COMMENT	\N	2014-07-21 12:55:05	2014-07-21 12:55:05
1212	21	255	A COMMENT	\N	2014-07-21 18:10:25	2014-07-21 18:10:25
1213	45	255	A COMMENT	\N	2014-07-23 08:22:58	2014-07-23 08:22:58
1214	47	255	A COMMENT	\N	2014-07-23 17:16:49	2014-07-23 17:16:49
1215	1	255	A COMMENT	\N	2014-07-24 03:32:31	2014-07-24 03:32:31
1216	2	255	A COMMENT	\N	2014-07-24 08:50:34	2014-07-24 08:50:34
1217	4	255	A COMMENT	\N	2014-07-25 08:25:40	2014-07-25 08:25:40
1218	48	255	A COMMENT	\N	2014-07-25 23:05:58	2014-07-25 23:05:58
1219	8	256	A COMMENT	\N	2013-12-07 11:35:54	2013-12-07 11:35:54
1220	39	256	A COMMENT	\N	2014-01-24 16:54:14	2014-01-24 16:54:14
1221	4	256	A COMMENT	\N	2014-07-23 15:01:45	2014-07-23 15:01:45
1222	2	257	A COMMENT	\N	2014-06-22 15:17:30	2014-06-22 15:17:30
1223	11	257	A COMMENT	\N	2014-07-16 22:04:17	2014-07-16 22:04:17
1224	37	257	A COMMENT	\N	2014-07-18 00:43:32	2014-07-18 00:43:32
1225	2	257	A COMMENT	\N	2014-07-18 21:00:05	2014-07-18 21:00:05
1226	10	257	A COMMENT	\N	2014-07-25 06:21:57	2014-07-25 06:21:57
1227	4	258	A COMMENT	\N	2014-06-19 17:05:02	2014-06-19 17:05:02
1228	16	259	A COMMENT	\N	2014-06-30 07:31:59	2014-06-30 07:31:59
1229	21	259	A COMMENT	\N	2014-07-05 10:09:53	2014-07-05 10:09:53
1230	37	259	A COMMENT	\N	2014-07-06 03:54:21	2014-07-06 03:54:21
1231	28	259	A COMMENT	\N	2014-07-06 08:17:56	2014-07-06 08:17:56
1232	47	259	A COMMENT	\N	2014-07-06 22:02:51	2014-07-06 22:02:51
1233	25	259	A COMMENT	\N	2014-07-13 08:02:32	2014-07-13 08:02:32
1234	43	259	A COMMENT	\N	2014-07-14 20:21:14	2014-07-14 20:21:14
1235	39	259	A COMMENT	\N	2014-07-15 08:41:29	2014-07-15 08:41:29
1236	32	259	A COMMENT	\N	2014-07-22 19:56:07	2014-07-22 19:56:07
1237	4	259	A COMMENT	\N	2014-07-25 07:53:49	2014-07-25 07:53:49
1238	48	261	A COMMENT	\N	2014-05-20 04:47:36	2014-05-20 04:47:36
1239	48	261	A COMMENT	\N	2014-06-15 15:18:00	2014-06-15 15:18:00
1240	10	261	A COMMENT	\N	2014-06-27 02:08:38	2014-06-27 02:08:38
1241	16	262	A COMMENT	\N	2014-05-28 12:15:04	2014-05-28 12:15:04
1242	10	262	A COMMENT	\N	2014-06-01 16:28:34	2014-06-01 16:28:34
1243	45	262	A COMMENT	\N	2014-06-03 22:15:13	2014-06-03 22:15:13
1244	30	262	A COMMENT	\N	2014-06-08 15:10:13	2014-06-08 15:10:13
1245	37	262	A COMMENT	\N	2014-06-14 03:22:54	2014-06-14 03:22:54
1246	6	262	A COMMENT	\N	2014-06-20 01:45:22	2014-06-20 01:45:22
1247	32	262	A COMMENT	\N	2014-06-20 11:56:13	2014-06-20 11:56:13
1248	2	262	A COMMENT	\N	2014-06-24 20:56:17	2014-06-24 20:56:17
1249	47	262	A COMMENT	\N	2014-06-26 20:25:20	2014-06-26 20:25:20
1250	14	262	A COMMENT	\N	2014-06-27 04:14:48	2014-06-27 04:14:48
1251	4	262	A COMMENT	\N	2014-07-01 03:48:23	2014-07-01 03:48:23
1252	3	262	A COMMENT	\N	2014-07-04 03:40:00	2014-07-04 03:40:00
1253	37	262	A COMMENT	\N	2014-07-04 15:10:33	2014-07-04 15:10:33
1254	11	262	A COMMENT	\N	2014-07-08 06:04:11	2014-07-08 06:04:11
1255	21	263	A COMMENT	\N	2014-06-15 13:32:18	2014-06-15 13:32:18
1256	1	263	A COMMENT	\N	2014-06-18 01:33:20	2014-06-18 01:33:20
1257	25	263	A COMMENT	\N	2014-06-19 11:24:12	2014-06-19 11:24:12
1258	16	263	A COMMENT	\N	2014-06-23 01:13:34	2014-06-23 01:13:34
1259	39	263	A COMMENT	\N	2014-06-24 00:54:52	2014-06-24 00:54:52
1260	10	263	A COMMENT	\N	2014-06-24 09:44:44	2014-06-24 09:44:44
1261	10	263	A COMMENT	\N	2014-06-25 14:24:17	2014-06-25 14:24:17
1262	32	263	A COMMENT	\N	2014-06-27 15:23:03	2014-06-27 15:23:03
1263	22	263	A COMMENT	\N	2014-06-27 20:36:38	2014-06-27 20:36:38
1264	2	263	A COMMENT	\N	2014-06-29 19:57:16	2014-06-29 19:57:16
1265	3	263	A COMMENT	\N	2014-07-01 04:53:46	2014-07-01 04:53:46
1266	30	263	A COMMENT	\N	2014-07-13 11:11:40	2014-07-13 11:11:40
1267	3	263	A COMMENT	\N	2014-07-16 08:00:55	2014-07-16 08:00:55
1268	37	263	A COMMENT	\N	2014-07-22 11:41:19	2014-07-22 11:41:19
1269	11	263	A COMMENT	\N	2014-07-26 11:01:04	2014-07-26 11:01:04
1270	11	267	A COMMENT	\N	2014-05-16 13:27:52	2014-05-16 13:27:52
1271	27	267	A COMMENT	\N	2014-06-04 02:29:21	2014-06-04 02:29:21
1272	43	267	A COMMENT	\N	2014-06-13 08:44:57	2014-06-13 08:44:57
1273	22	268	A COMMENT	\N	2014-05-22 12:33:46	2014-05-22 12:33:46
1274	3	268	A COMMENT	\N	2014-05-29 10:04:22	2014-05-29 10:04:22
1275	1	268	A COMMENT	\N	2014-05-31 14:13:19	2014-05-31 14:13:19
1276	45	268	A COMMENT	\N	2014-06-19 00:57:05	2014-06-19 00:57:05
1277	27	268	A COMMENT	\N	2014-07-13 13:11:29	2014-07-13 13:11:29
1278	32	268	A COMMENT	\N	2014-07-18 09:50:58	2014-07-18 09:50:58
1279	47	270	A COMMENT	\N	2014-06-09 18:13:14	2014-06-09 18:13:14
1280	22	271	A COMMENT	\N	2014-06-16 06:50:50	2014-06-16 06:50:50
1281	25	271	A COMMENT	\N	2014-06-27 17:18:51	2014-06-27 17:18:51
1282	14	271	A COMMENT	\N	2014-07-11 04:52:59	2014-07-11 04:52:59
1283	3	272	A COMMENT	\N	2014-06-15 02:10:19	2014-06-15 02:10:19
1284	45	272	A COMMENT	\N	2014-06-18 05:52:43	2014-06-18 05:52:43
1285	39	272	A COMMENT	\N	2014-06-21 17:35:14	2014-06-21 17:35:14
1286	21	272	A COMMENT	\N	2014-07-07 00:47:39	2014-07-07 00:47:39
1287	16	272	A COMMENT	\N	2014-07-11 07:59:31	2014-07-11 07:59:31
1288	28	272	A COMMENT	\N	2014-07-12 19:52:05	2014-07-12 19:52:05
1289	37	272	A COMMENT	\N	2014-07-15 18:34:59	2014-07-15 18:34:59
1290	27	272	A COMMENT	\N	2014-07-22 09:53:31	2014-07-22 09:53:31
1291	48	273	A COMMENT	\N	2014-06-15 19:31:03	2014-06-15 19:31:03
1292	30	273	A COMMENT	\N	2014-06-19 11:36:51	2014-06-19 11:36:51
1293	21	273	A COMMENT	\N	2014-06-20 02:17:34	2014-06-20 02:17:34
1294	39	273	A COMMENT	\N	2014-06-23 03:58:28	2014-06-23 03:58:28
1295	14	273	A COMMENT	\N	2014-06-24 20:30:54	2014-06-24 20:30:54
1296	16	273	A COMMENT	\N	2014-06-27 23:41:44	2014-06-27 23:41:44
1297	43	273	A COMMENT	\N	2014-06-29 23:17:24	2014-06-29 23:17:24
1298	48	273	A COMMENT	\N	2014-07-02 11:38:30	2014-07-02 11:38:30
1299	37	273	A COMMENT	\N	2014-07-02 20:58:58	2014-07-02 20:58:58
1300	32	273	A COMMENT	\N	2014-07-07 12:56:53	2014-07-07 12:56:53
1301	43	273	A COMMENT	\N	2014-07-10 11:53:35	2014-07-10 11:53:35
1302	6	273	A COMMENT	\N	2014-07-11 02:51:07	2014-07-11 02:51:07
1303	22	273	A COMMENT	\N	2014-07-19 04:07:33	2014-07-19 04:07:33
1304	27	273	A COMMENT	\N	2014-07-19 10:04:25	2014-07-19 10:04:25
1305	4	273	A COMMENT	\N	2014-07-23 06:08:53	2014-07-23 06:08:53
1306	16	273	A COMMENT	\N	2014-07-24 02:36:25	2014-07-24 02:36:25
1307	39	273	A COMMENT	\N	2014-07-24 17:04:16	2014-07-24 17:04:16
1308	28	274	A COMMENT	\N	2014-04-23 05:25:52	2014-04-23 05:25:52
1309	6	274	A COMMENT	\N	2014-04-28 08:48:23	2014-04-28 08:48:23
1310	2	274	A COMMENT	\N	2014-05-04 04:18:04	2014-05-04 04:18:04
1311	14	274	A COMMENT	\N	2014-07-08 10:17:39	2014-07-08 10:17:39
1312	27	288	A COMMENT	\N	2014-06-08 20:22:53	2014-06-08 20:22:53
1313	8	288	A COMMENT	\N	2014-06-08 23:47:15	2014-06-08 23:47:15
1314	32	288	A COMMENT	\N	2014-06-21 03:24:42	2014-06-21 03:24:42
1315	30	288	A COMMENT	\N	2014-06-30 09:52:09	2014-06-30 09:52:09
1316	14	288	A COMMENT	\N	2014-07-04 10:33:33	2014-07-04 10:33:33
1317	3	288	A COMMENT	\N	2014-07-05 13:36:59	2014-07-05 13:36:59
1318	10	288	A COMMENT	\N	2014-07-12 14:44:50	2014-07-12 14:44:50
1319	47	288	A COMMENT	\N	2014-07-18 08:32:00	2014-07-18 08:32:00
1320	39	288	A COMMENT	\N	2014-07-23 10:25:00	2014-07-23 10:25:00
1321	47	276	A COMMENT	\N	2014-04-30 15:38:35	2014-04-30 15:38:35
1322	6	276	A COMMENT	\N	2014-06-21 06:04:31	2014-06-21 06:04:31
1323	4	276	A COMMENT	\N	2014-07-06 05:19:30	2014-07-06 05:19:30
1324	45	276	A COMMENT	\N	2014-07-11 22:43:15	2014-07-11 22:43:15
1325	32	276	A COMMENT	\N	2014-07-24 00:39:15	2014-07-24 00:39:15
1326	30	279	A COMMENT	\N	2014-03-23 19:03:28	2014-03-23 19:03:28
1327	25	279	A COMMENT	\N	2014-04-02 02:18:21	2014-04-02 02:18:21
1328	3	279	A COMMENT	\N	2014-04-26 01:07:06	2014-04-26 01:07:06
1329	43	279	A COMMENT	\N	2014-06-08 11:25:56	2014-06-08 11:25:56
1330	28	279	A COMMENT	\N	2014-06-27 05:30:51	2014-06-27 05:30:51
1331	32	279	A COMMENT	\N	2014-07-08 08:41:36	2014-07-08 08:41:36
1332	2	280	A COMMENT	\N	2014-05-01 11:47:09	2014-05-01 11:47:09
1333	25	280	A COMMENT	\N	2014-05-27 19:55:08	2014-05-27 19:55:08
1334	48	280	A COMMENT	\N	2014-06-20 16:49:20	2014-06-20 16:49:20
1335	30	280	A COMMENT	\N	2014-07-23 00:30:24	2014-07-23 00:30:24
1336	37	280	A COMMENT	\N	2014-07-24 21:31:40	2014-07-24 21:31:40
1337	28	282	A COMMENT	\N	2014-06-17 05:52:21	2014-06-17 05:52:21
1338	39	282	A COMMENT	\N	2014-07-07 00:16:12	2014-07-07 00:16:12
1339	1	282	A COMMENT	\N	2014-07-22 21:19:22	2014-07-22 21:19:22
1340	39	282	A COMMENT	\N	2014-07-25 02:34:31	2014-07-25 02:34:31
1341	37	283	A COMMENT	\N	2014-06-23 04:45:45	2014-06-23 04:45:45
1342	14	283	A COMMENT	\N	2014-07-05 12:54:31	2014-07-05 12:54:31
1343	45	283	A COMMENT	\N	2014-07-13 02:28:40	2014-07-13 02:28:40
1344	4	283	A COMMENT	\N	2014-07-18 20:51:55	2014-07-18 20:51:55
1345	32	283	A COMMENT	\N	2014-07-19 06:23:04	2014-07-19 06:23:04
1346	3	283	A COMMENT	\N	2014-07-20 17:08:49	2014-07-20 17:08:49
1347	45	284	A COMMENT	\N	2014-05-01 11:05:26	2014-05-01 11:05:26
1348	25	284	A COMMENT	\N	2014-05-10 18:44:26	2014-05-10 18:44:26
1349	22	284	A COMMENT	\N	2014-07-07 08:37:00	2014-07-07 08:37:00
1350	48	285	A COMMENT	\N	2014-04-07 12:34:50	2014-04-07 12:34:50
1351	47	285	A COMMENT	\N	2014-04-08 17:08:35	2014-04-08 17:08:35
1352	11	285	A COMMENT	\N	2014-04-15 13:55:53	2014-04-15 13:55:53
1353	48	285	A COMMENT	\N	2014-04-20 18:30:09	2014-04-20 18:30:09
1354	45	285	A COMMENT	\N	2014-04-22 17:41:02	2014-04-22 17:41:02
1355	14	285	A COMMENT	\N	2014-05-02 12:38:31	2014-05-02 12:38:31
1356	37	285	A COMMENT	\N	2014-05-08 17:26:20	2014-05-08 17:26:20
1357	8	285	A COMMENT	\N	2014-06-15 03:13:26	2014-06-15 03:13:26
1358	14	285	A COMMENT	\N	2014-06-15 17:42:34	2014-06-15 17:42:34
1359	25	285	A COMMENT	\N	2014-06-22 11:29:51	2014-06-22 11:29:51
1360	8	285	A COMMENT	\N	2014-07-05 14:38:18	2014-07-05 14:38:18
1361	6	285	A COMMENT	\N	2014-07-06 14:22:58	2014-07-06 14:22:58
1362	2	285	A COMMENT	\N	2014-07-09 18:43:57	2014-07-09 18:43:57
1363	39	285	A COMMENT	\N	2014-07-10 03:10:41	2014-07-10 03:10:41
1364	48	285	A COMMENT	\N	2014-07-19 16:12:32	2014-07-19 16:12:32
1365	10	286	A COMMENT	\N	2014-04-28 03:34:13	2014-04-28 03:34:13
1366	30	286	A COMMENT	\N	2014-05-02 10:32:57	2014-05-02 10:32:57
1367	22	286	A COMMENT	\N	2014-07-09 01:17:18	2014-07-09 01:17:18
1368	30	287	A COMMENT	\N	2014-02-24 06:01:04	2014-02-24 06:01:04
1369	48	287	A COMMENT	\N	2014-04-01 06:40:29	2014-04-01 06:40:29
1370	30	287	A COMMENT	\N	2014-04-27 14:34:33	2014-04-27 14:34:33
1371	45	287	A COMMENT	\N	2014-07-03 16:18:52	2014-07-03 16:18:52
1372	28	287	A COMMENT	\N	2014-07-05 18:54:09	2014-07-05 18:54:09
1373	22	289	A COMMENT	\N	2014-04-11 14:26:44	2014-04-11 14:26:44
1374	16	289	A COMMENT	\N	2014-05-03 02:24:19	2014-05-03 02:24:19
1375	6	289	A COMMENT	\N	2014-05-26 06:01:12	2014-05-26 06:01:12
1376	25	289	A COMMENT	\N	2014-06-06 22:17:34	2014-06-06 22:17:34
1377	3	289	A COMMENT	\N	2014-06-11 09:54:56	2014-06-11 09:54:56
1378	28	289	A COMMENT	\N	2014-06-29 04:18:25	2014-06-29 04:18:25
1379	21	290	A COMMENT	\N	2014-04-30 16:27:32	2014-04-30 16:27:32
1380	22	290	A COMMENT	\N	2014-05-16 12:18:27	2014-05-16 12:18:27
1381	4	290	A COMMENT	\N	2014-07-23 08:25:19	2014-07-23 08:25:19
1382	25	291	A COMMENT	\N	2014-05-20 19:26:02	2014-05-20 19:26:02
1383	1	291	A COMMENT	\N	2014-05-22 18:17:00	2014-05-22 18:17:00
1384	3	291	A COMMENT	\N	2014-06-26 23:03:53	2014-06-26 23:03:53
1385	39	291	A COMMENT	\N	2014-07-06 15:35:53	2014-07-06 15:35:53
1386	47	291	A COMMENT	\N	2014-07-26 13:28:14	2014-07-26 13:28:14
1387	16	292	A COMMENT	\N	2014-03-30 03:33:52	2014-03-30 03:33:52
1388	8	294	A COMMENT	\N	2014-03-19 08:08:20	2014-03-19 08:08:20
1389	47	294	A COMMENT	\N	2014-03-30 19:06:29	2014-03-30 19:06:29
1390	14	294	A COMMENT	\N	2014-05-02 11:44:21	2014-05-02 11:44:21
1391	45	294	A COMMENT	\N	2014-05-23 14:58:44	2014-05-23 14:58:44
1392	30	294	A COMMENT	\N	2014-06-05 06:34:25	2014-06-05 06:34:25
1393	25	296	A COMMENT	\N	2014-03-30 09:31:29	2014-03-30 09:31:29
1394	47	296	A COMMENT	\N	2014-04-06 11:18:26	2014-04-06 11:18:26
1395	47	296	A COMMENT	\N	2014-04-18 23:00:43	2014-04-18 23:00:43
1396	6	296	A COMMENT	\N	2014-04-30 04:39:19	2014-04-30 04:39:19
1397	27	296	A COMMENT	\N	2014-05-03 17:05:41	2014-05-03 17:05:41
1398	39	296	A COMMENT	\N	2014-05-07 09:32:54	2014-05-07 09:32:54
1399	32	296	A COMMENT	\N	2014-05-11 23:04:44	2014-05-11 23:04:44
1400	21	296	A COMMENT	\N	2014-05-13 22:25:11	2014-05-13 22:25:11
1401	47	296	A COMMENT	\N	2014-05-23 18:05:31	2014-05-23 18:05:31
1402	10	296	A COMMENT	\N	2014-07-22 13:25:25	2014-07-22 13:25:25
1403	6	297	A COMMENT	\N	2014-04-09 09:45:23	2014-04-09 09:45:23
1404	14	297	A COMMENT	\N	2014-07-08 10:46:12	2014-07-08 10:46:12
1405	22	298	A COMMENT	\N	2014-05-18 02:44:33	2014-05-18 02:44:33
1406	43	298	A COMMENT	\N	2014-05-30 04:06:14	2014-05-30 04:06:14
1407	47	298	A COMMENT	\N	2014-06-03 22:12:30	2014-06-03 22:12:30
1408	47	298	A COMMENT	\N	2014-06-05 13:48:58	2014-06-05 13:48:58
1409	2	299	A COMMENT	\N	2014-06-15 05:24:53	2014-06-15 05:24:53
1410	14	299	A COMMENT	\N	2014-06-16 18:49:09	2014-06-16 18:49:09
1411	37	299	A COMMENT	\N	2014-07-05 12:55:50	2014-07-05 12:55:50
1412	39	299	A COMMENT	\N	2014-07-11 11:45:45	2014-07-11 11:45:45
1413	37	299	A COMMENT	\N	2014-07-19 19:22:56	2014-07-19 19:22:56
1414	47	299	A COMMENT	\N	2014-07-22 09:49:04	2014-07-22 09:49:04
1415	45	299	A COMMENT	\N	2014-07-23 23:19:52	2014-07-23 23:19:52
1416	6	299	A COMMENT	\N	2014-07-24 08:23:13	2014-07-24 08:23:13
1417	2	299	A COMMENT	\N	2014-07-25 16:03:32	2014-07-25 16:03:32
1418	14	300	A COMMENT	\N	2014-06-24 08:17:20	2014-06-24 08:17:20
1419	8	300	A COMMENT	\N	2014-07-04 08:20:44	2014-07-04 08:20:44
1420	43	300	A COMMENT	\N	2014-07-11 21:49:41	2014-07-11 21:49:41
1421	21	300	A COMMENT	\N	2014-07-16 09:07:12	2014-07-16 09:07:12
1422	27	301	A COMMENT	\N	2014-06-21 23:12:09	2014-06-21 23:12:09
1423	37	301	A COMMENT	\N	2014-06-26 12:36:10	2014-06-26 12:36:10
1424	2	301	A COMMENT	\N	2014-06-29 22:31:05	2014-06-29 22:31:05
1425	3	301	A COMMENT	\N	2014-07-14 05:20:06	2014-07-14 05:20:06
1426	11	301	A COMMENT	\N	2014-07-17 01:07:34	2014-07-17 01:07:34
1427	1	301	A COMMENT	\N	2014-07-21 20:17:39	2014-07-21 20:17:39
1428	25	301	A COMMENT	\N	2014-07-22 14:34:55	2014-07-22 14:34:55
1429	6	304	A COMMENT	\N	2014-06-02 15:09:20	2014-06-02 15:09:20
1430	2	304	A COMMENT	\N	2014-06-03 01:12:14	2014-06-03 01:12:14
1431	3	304	A COMMENT	\N	2014-07-04 10:16:46	2014-07-04 10:16:46
1432	21	304	A COMMENT	\N	2014-07-11 01:07:45	2014-07-11 01:07:45
1433	21	304	A COMMENT	\N	2014-07-20 22:17:47	2014-07-20 22:17:47
1434	8	305	A COMMENT	\N	2014-03-04 07:08:43	2014-03-04 07:08:43
1435	27	305	A COMMENT	\N	2014-03-27 09:39:59	2014-03-27 09:39:59
1436	1	305	A COMMENT	\N	2014-04-17 18:30:38	2014-04-17 18:30:38
1437	3	305	A COMMENT	\N	2014-04-24 21:45:33	2014-04-24 21:45:33
1438	1	305	A COMMENT	\N	2014-05-13 19:43:41	2014-05-13 19:43:41
1439	39	305	A COMMENT	\N	2014-05-22 08:48:53	2014-05-22 08:48:53
1440	47	305	A COMMENT	\N	2014-06-02 22:15:19	2014-06-02 22:15:19
1441	6	305	A COMMENT	\N	2014-06-19 09:12:20	2014-06-19 09:12:20
1442	4	305	A COMMENT	\N	2014-07-03 22:55:14	2014-07-03 22:55:14
1443	8	307	A COMMENT	\N	2014-04-23 04:19:56	2014-04-23 04:19:56
1444	10	307	A COMMENT	\N	2014-06-09 07:48:38	2014-06-09 07:48:38
1445	48	307	A COMMENT	\N	2014-06-12 16:23:49	2014-06-12 16:23:49
1446	3	307	A COMMENT	\N	2014-06-13 11:16:07	2014-06-13 11:16:07
1447	25	308	A COMMENT	\N	2014-04-02 02:08:18	2014-04-02 02:08:18
1448	8	308	A COMMENT	\N	2014-04-09 10:48:05	2014-04-09 10:48:05
1449	21	308	A COMMENT	\N	2014-05-05 21:33:41	2014-05-05 21:33:41
1450	32	308	A COMMENT	\N	2014-05-16 18:40:52	2014-05-16 18:40:52
1451	48	308	A COMMENT	\N	2014-05-18 11:35:18	2014-05-18 11:35:18
1452	22	308	A COMMENT	\N	2014-05-26 16:55:27	2014-05-26 16:55:27
1453	1	312	A COMMENT	\N	2014-05-25 07:38:10	2014-05-25 07:38:10
1454	1	312	A COMMENT	\N	2014-05-27 14:59:36	2014-05-27 14:59:36
1455	39	312	A COMMENT	\N	2014-05-31 23:00:33	2014-05-31 23:00:33
1456	48	312	A COMMENT	\N	2014-06-03 21:28:18	2014-06-03 21:28:18
1457	10	312	A COMMENT	\N	2014-06-09 14:38:55	2014-06-09 14:38:55
1458	27	312	A COMMENT	\N	2014-06-13 15:36:06	2014-06-13 15:36:06
1459	8	312	A COMMENT	\N	2014-06-19 10:31:01	2014-06-19 10:31:01
1460	3	312	A COMMENT	\N	2014-07-18 02:21:42	2014-07-18 02:21:42
1461	43	312	A COMMENT	\N	2014-07-20 19:53:28	2014-07-20 19:53:28
1462	4	314	A COMMENT	\N	2014-04-03 12:23:44	2014-04-03 12:23:44
1463	39	314	A COMMENT	\N	2014-04-19 14:43:10	2014-04-19 14:43:10
1464	47	314	A COMMENT	\N	2014-07-03 19:40:29	2014-07-03 19:40:29
1465	39	314	A COMMENT	\N	2014-07-07 08:58:08	2014-07-07 08:58:08
1466	1	314	A COMMENT	\N	2014-07-15 00:57:36	2014-07-15 00:57:36
1467	27	314	A COMMENT	\N	2014-07-18 00:34:39	2014-07-18 00:34:39
1468	30	314	A COMMENT	\N	2014-07-23 18:29:46	2014-07-23 18:29:46
1469	22	314	A COMMENT	\N	2014-07-26 11:48:27	2014-07-26 11:48:27
1470	32	315	A COMMENT	\N	2014-05-07 14:17:57	2014-05-07 14:17:57
1471	28	315	A COMMENT	\N	2014-05-19 19:48:36	2014-05-19 19:48:36
1472	22	315	A COMMENT	\N	2014-05-27 18:23:31	2014-05-27 18:23:31
1473	27	315	A COMMENT	\N	2014-06-03 01:43:24	2014-06-03 01:43:24
1474	3	315	A COMMENT	\N	2014-06-24 09:56:49	2014-06-24 09:56:49
1475	8	315	A COMMENT	\N	2014-07-04 03:36:07	2014-07-04 03:36:07
1476	6	315	A COMMENT	\N	2014-07-04 18:10:49	2014-07-04 18:10:49
1477	1	315	A COMMENT	\N	2014-07-10 23:51:34	2014-07-10 23:51:34
1478	8	316	A COMMENT	\N	2014-04-20 09:47:16	2014-04-20 09:47:16
1479	28	316	A COMMENT	\N	2014-04-23 14:30:06	2014-04-23 14:30:06
1480	14	316	A COMMENT	\N	2014-05-26 05:48:44	2014-05-26 05:48:44
1481	45	316	A COMMENT	\N	2014-06-28 16:43:27	2014-06-28 16:43:27
1482	27	316	A COMMENT	\N	2014-07-24 15:10:15	2014-07-24 15:10:15
1483	8	317	A COMMENT	\N	2014-04-19 22:35:29	2014-04-19 22:35:29
1484	3	317	A COMMENT	\N	2014-04-29 11:23:10	2014-04-29 11:23:10
1485	14	317	A COMMENT	\N	2014-05-03 23:00:57	2014-05-03 23:00:57
1486	37	317	A COMMENT	\N	2014-05-06 16:21:16	2014-05-06 16:21:16
1487	6	317	A COMMENT	\N	2014-06-16 04:57:22	2014-06-16 04:57:22
1488	39	317	A COMMENT	\N	2014-07-01 09:22:15	2014-07-01 09:22:15
1489	27	317	A COMMENT	\N	2014-07-15 18:11:14	2014-07-15 18:11:14
1490	11	317	A COMMENT	\N	2014-07-25 20:26:19	2014-07-25 20:26:19
1491	37	318	A COMMENT	\N	2014-03-01 08:26:28	2014-03-01 08:26:28
1492	8	318	A COMMENT	\N	2014-03-10 15:22:01	2014-03-10 15:22:01
1493	16	318	A COMMENT	\N	2014-03-27 22:08:09	2014-03-27 22:08:09
1494	48	318	A COMMENT	\N	2014-03-30 18:27:15	2014-03-30 18:27:15
1495	11	318	A COMMENT	\N	2014-04-28 04:36:55	2014-04-28 04:36:55
1496	48	318	A COMMENT	\N	2014-07-02 15:14:32	2014-07-02 15:14:32
1497	28	320	A COMMENT	\N	2014-04-01 13:03:10	2014-04-01 13:03:10
1498	6	320	A COMMENT	\N	2014-04-13 22:11:25	2014-04-13 22:11:25
1499	11	320	A COMMENT	\N	2014-05-17 02:08:12	2014-05-17 02:08:12
1500	11	320	A COMMENT	\N	2014-05-26 15:08:26	2014-05-26 15:08:26
1501	2	320	A COMMENT	\N	2014-06-26 13:28:03	2014-06-26 13:28:03
1502	8	327	A COMMENT	\N	2014-04-24 01:13:04	2014-04-24 01:13:04
1503	25	327	A COMMENT	\N	2014-05-08 02:07:30	2014-05-08 02:07:30
1504	16	327	A COMMENT	\N	2014-05-18 05:58:50	2014-05-18 05:58:50
1505	27	327	A COMMENT	\N	2014-05-30 15:44:30	2014-05-30 15:44:30
1506	22	327	A COMMENT	\N	2014-06-04 21:26:08	2014-06-04 21:26:08
1507	14	327	A COMMENT	\N	2014-06-15 06:34:52	2014-06-15 06:34:52
1508	37	328	A COMMENT	\N	2014-05-02 10:06:21	2014-05-02 10:06:21
1509	3	328	A COMMENT	\N	2014-05-06 11:00:04	2014-05-06 11:00:04
1510	14	328	A COMMENT	\N	2014-05-06 21:24:15	2014-05-06 21:24:15
1511	16	329	A COMMENT	\N	2014-06-17 08:22:44	2014-06-17 08:22:44
1512	37	331	A COMMENT	\N	2014-04-09 06:32:27	2014-04-09 06:32:27
1513	22	331	A COMMENT	\N	2014-05-17 07:27:35	2014-05-17 07:27:35
1514	37	332	A COMMENT	\N	2014-03-29 01:19:07	2014-03-29 01:19:07
1515	25	332	A COMMENT	\N	2014-05-02 09:32:34	2014-05-02 09:32:34
1516	4	332	A COMMENT	\N	2014-06-22 22:50:42	2014-06-22 22:50:42
1517	10	332	A COMMENT	\N	2014-07-07 01:22:03	2014-07-07 01:22:03
1518	22	332	A COMMENT	\N	2014-07-21 07:51:38	2014-07-21 07:51:38
1519	21	332	A COMMENT	\N	2014-07-21 18:46:35	2014-07-21 18:46:35
1520	6	332	A COMMENT	\N	2014-07-24 20:38:51	2014-07-24 20:38:51
1521	16	333	A COMMENT	\N	2014-07-11 00:19:33	2014-07-11 00:19:33
1522	2	334	A COMMENT	\N	2014-04-15 08:43:04	2014-04-15 08:43:04
1523	47	334	A COMMENT	\N	2014-05-06 05:40:56	2014-05-06 05:40:56
1524	1	334	A COMMENT	\N	2014-05-10 09:17:41	2014-05-10 09:17:41
1525	8	334	A COMMENT	\N	2014-06-08 01:26:05	2014-06-08 01:26:05
1526	21	334	A COMMENT	\N	2014-07-15 12:01:27	2014-07-15 12:01:27
1527	43	334	A COMMENT	\N	2014-07-20 14:07:00	2014-07-20 14:07:00
1528	47	334	A COMMENT	\N	2014-07-23 08:42:14	2014-07-23 08:42:14
1529	22	334	A COMMENT	\N	2014-07-23 13:01:38	2014-07-23 13:01:38
1530	32	335	A COMMENT	\N	2014-05-04 03:56:01	2014-05-04 03:56:01
1531	39	335	A COMMENT	\N	2014-06-03 12:03:08	2014-06-03 12:03:08
1532	37	335	A COMMENT	\N	2014-06-09 21:21:26	2014-06-09 21:21:26
1533	27	338	A COMMENT	\N	2014-05-07 10:42:10	2014-05-07 10:42:10
1534	6	338	A COMMENT	\N	2014-06-24 12:25:49	2014-06-24 12:25:49
1535	39	340	A COMMENT	\N	2014-04-11 04:33:46	2014-04-11 04:33:46
1536	47	340	A COMMENT	\N	2014-05-17 07:17:46	2014-05-17 07:17:46
1537	16	341	A COMMENT	\N	2014-07-21 00:35:01	2014-07-21 00:35:01
1538	2	341	A COMMENT	\N	2014-07-22 01:01:39	2014-07-22 01:01:39
1539	47	341	A COMMENT	\N	2014-07-23 11:02:35	2014-07-23 11:02:35
1540	39	341	A COMMENT	\N	2014-07-23 12:48:06	2014-07-23 12:48:06
1541	43	341	A COMMENT	\N	2014-07-23 18:29:53	2014-07-23 18:29:53
1542	4	341	A COMMENT	\N	2014-07-24 04:43:48	2014-07-24 04:43:48
1543	47	341	A COMMENT	\N	2014-07-24 18:40:43	2014-07-24 18:40:43
1544	10	341	A COMMENT	\N	2014-07-25 06:39:45	2014-07-25 06:39:45
1545	48	342	A COMMENT	\N	2014-05-28 09:09:24	2014-05-28 09:09:24
1546	32	342	A COMMENT	\N	2014-07-19 01:10:55	2014-07-19 01:10:55
1547	21	342	A COMMENT	\N	2014-07-20 05:45:56	2014-07-20 05:45:56
1548	1	343	A COMMENT	\N	2014-05-28 21:30:11	2014-05-28 21:30:11
1549	10	344	A COMMENT	\N	2014-05-16 06:11:00	2014-05-16 06:11:00
1550	22	344	A COMMENT	\N	2014-05-21 11:09:42	2014-05-21 11:09:42
1551	45	344	A COMMENT	\N	2014-06-16 00:12:56	2014-06-16 00:12:56
1552	47	344	A COMMENT	\N	2014-06-30 22:50:55	2014-06-30 22:50:55
1553	27	345	A COMMENT	\N	2014-06-12 11:57:18	2014-06-12 11:57:18
1554	37	345	A COMMENT	\N	2014-06-14 21:29:50	2014-06-14 21:29:50
1555	28	345	A COMMENT	\N	2014-06-24 10:35:31	2014-06-24 10:35:31
1556	43	345	A COMMENT	\N	2014-07-02 08:36:30	2014-07-02 08:36:30
1557	27	345	A COMMENT	\N	2014-07-03 08:43:30	2014-07-03 08:43:30
1558	10	345	A COMMENT	\N	2014-07-08 23:27:30	2014-07-08 23:27:30
1559	22	345	A COMMENT	\N	2014-07-19 16:06:34	2014-07-19 16:06:34
1560	47	345	A COMMENT	\N	2014-07-19 18:00:13	2014-07-19 18:00:13
1561	47	346	A COMMENT	\N	2014-07-13 17:18:09	2014-07-13 17:18:09
1562	43	346	A COMMENT	\N	2014-07-16 14:03:02	2014-07-16 14:03:02
1563	4	347	A COMMENT	\N	2014-07-08 19:50:18	2014-07-08 19:50:18
1564	14	347	A COMMENT	\N	2014-07-14 15:09:55	2014-07-14 15:09:55
1565	39	347	A COMMENT	\N	2014-07-17 13:03:14	2014-07-17 13:03:14
1566	6	347	A COMMENT	\N	2014-07-18 03:58:51	2014-07-18 03:58:51
1567	39	347	A COMMENT	\N	2014-07-20 01:37:13	2014-07-20 01:37:13
1568	2	348	A COMMENT	\N	2014-07-15 17:00:37	2014-07-15 17:00:37
1569	4	348	A COMMENT	\N	2014-07-17 01:27:16	2014-07-17 01:27:16
1570	28	348	A COMMENT	\N	2014-07-18 19:36:03	2014-07-18 19:36:03
1571	21	348	A COMMENT	\N	2014-07-25 03:34:08	2014-07-25 03:34:08
1572	25	348	A COMMENT	\N	2014-07-26 00:45:37	2014-07-26 00:45:37
1573	45	348	A COMMENT	\N	2014-07-26 07:45:29	2014-07-26 07:45:29
1574	14	349	A COMMENT	\N	2014-07-14 17:50:47	2014-07-14 17:50:47
1575	45	349	A COMMENT	\N	2014-07-17 20:15:00	2014-07-17 20:15:00
1576	25	349	A COMMENT	\N	2014-07-20 14:11:01	2014-07-20 14:11:01
1577	48	159	A COMMENT	\N	2014-03-25 11:44:17	2014-03-25 11:44:17
1578	25	82	A COMMENT	\N	2014-04-16 08:47:33	2014-04-16 08:47:33
1579	6	248	A COMMENT	\N	2014-06-23 05:33:56	2014-06-23 05:33:56
1580	22	111	A COMMENT	\N	2014-07-22 01:56:05	2014-07-22 01:56:05
1581	16	301	A COMMENT	\N	2014-06-30 05:05:06	2014-06-30 05:05:06
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comments_id_seq', 1581, true);


--
-- Data for Name: lifecycle_events; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY lifecycle_events (id, user_id, key, happened_at, created_at, updated_at) FROM stdin;
1	1	joined	\N	\N	\N
2	2	joined	\N	\N	\N
3	3	joined	\N	\N	\N
4	4	joined	\N	\N	\N
5	5	joined	\N	\N	\N
6	5	fetched	2014-06-02 01:44:09.181308	\N	\N
7	6	joined	\N	\N	\N
8	6	fetched	2013-11-04 10:44:37.184094	\N	\N
9	7	joined	\N	\N	\N
10	8	joined	\N	\N	\N
11	8	fetched	2014-05-26 20:03:41.188058	\N	\N
12	9	joined	\N	\N	\N
13	10	joined	\N	\N	\N
14	10	fetched	2014-05-10 23:31:12.192029	\N	\N
15	11	joined	\N	\N	\N
16	11	fetched	2014-06-03 05:14:26.195192	\N	\N
17	12	joined	\N	\N	\N
18	13	joined	\N	\N	\N
19	13	fetched	2014-06-16 02:57:03.199469	\N	\N
20	14	joined	\N	\N	\N
21	14	fetched	2013-11-02 09:39:14.201845	\N	\N
22	15	joined	\N	\N	\N
23	15	fetched	2013-11-07 16:35:58.204234	\N	\N
24	16	joined	\N	\N	\N
25	16	fetched	2014-06-07 21:48:29.206575	\N	\N
26	17	joined	\N	\N	\N
27	17	fetched	2014-05-10 06:34:53.208847	\N	\N
28	18	joined	\N	\N	\N
29	18	fetched	2013-11-07 20:03:43.211565	\N	\N
30	19	joined	\N	\N	\N
31	19	fetched	2014-04-10 21:28:53.214699	\N	\N
32	20	joined	\N	\N	\N
33	20	fetched	2013-12-14 02:29:58.217474	\N	\N
34	21	joined	\N	\N	\N
35	21	fetched	2013-12-19 14:42:19.219892	\N	\N
36	22	joined	\N	\N	\N
37	22	fetched	2014-07-04 12:25:24.222217	\N	\N
38	23	joined	\N	\N	\N
39	23	fetched	2014-01-20 02:22:05.224529	\N	\N
40	24	joined	\N	\N	\N
41	24	fetched	2014-05-08 08:33:46.226901	\N	\N
42	25	joined	\N	\N	\N
43	25	fetched	2014-03-16 15:43:33.229243	\N	\N
44	26	joined	\N	\N	\N
45	26	fetched	2014-03-14 22:25:03.231613	\N	\N
46	27	joined	\N	\N	\N
47	27	fetched	2013-11-25 08:01:24.233976	\N	\N
48	28	joined	\N	\N	\N
49	28	fetched	2014-02-20 12:01:05.236261	\N	\N
50	29	joined	\N	\N	\N
51	29	fetched	2014-01-10 06:29:31.238554	\N	\N
52	30	joined	\N	\N	\N
53	30	fetched	2014-02-27 12:12:08.240888	\N	\N
54	31	joined	\N	\N	\N
55	31	fetched	2013-12-25 13:47:54.243136	\N	\N
56	32	joined	\N	\N	\N
57	32	fetched	2014-06-21 08:06:54.245465	\N	\N
58	33	joined	\N	\N	\N
59	33	fetched	2014-07-14 17:43:26.247772	\N	\N
60	34	joined	\N	\N	\N
61	34	fetched	2014-01-19 16:35:37.250095	\N	\N
62	35	joined	\N	\N	\N
63	35	fetched	2013-12-13 19:36:18.252439	\N	\N
64	36	joined	\N	\N	\N
65	36	fetched	2014-03-26 06:50:47.254802	\N	\N
66	37	joined	\N	\N	\N
67	37	fetched	2014-06-08 11:37:28.257141	\N	\N
68	38	joined	\N	\N	\N
69	39	joined	\N	\N	\N
70	39	fetched	2014-04-23 22:10:06.260996	\N	\N
71	40	joined	\N	\N	\N
72	40	fetched	2014-04-01 20:26:05.263343	\N	\N
73	41	joined	\N	\N	\N
74	41	fetched	2014-01-29 14:29:54.265654	\N	\N
75	42	joined	\N	\N	\N
76	42	fetched	2014-04-08 17:03:25.267961	\N	\N
77	43	joined	\N	\N	\N
78	43	fetched	2014-06-01 01:37:11.270314	\N	\N
79	44	joined	\N	\N	\N
80	44	fetched	2014-06-10 21:13:06.272634	\N	\N
81	45	joined	\N	\N	\N
82	45	fetched	2014-06-01 14:59:27.275145	\N	\N
83	46	joined	\N	\N	\N
84	47	joined	\N	\N	\N
85	47	fetched	2014-05-19 16:47:27.279011	\N	\N
86	48	joined	\N	\N	\N
87	48	fetched	2014-03-10 11:00:41.281371	\N	\N
88	8	submitted	2014-06-04 11:14:37	\N	\N
89	10	submitted	2014-06-25 16:44:36	\N	\N
90	11	submitted	2014-06-25 18:15:28	\N	\N
91	14	submitted	2013-12-06 14:58:09	\N	\N
92	21	submitted	2014-03-27 01:28:45	\N	\N
93	27	submitted	2014-03-19 20:15:02	\N	\N
94	28	submitted	2014-05-02 19:06:26	\N	\N
95	30	submitted	2014-03-23 16:54:23	\N	\N
96	32	submitted	2014-06-26 15:36:53	\N	\N
97	37	submitted	2014-06-09 22:32:19	\N	\N
98	39	submitted	2014-07-04 00:19:56	\N	\N
99	43	submitted	2014-06-27 08:33:31	\N	\N
100	45	submitted	2014-06-18 01:56:58	\N	\N
101	47	submitted	2014-05-25 03:07:35	\N	\N
102	48	submitted	2014-05-27 07:02:22	\N	\N
103	25	submitted	2014-04-22 18:20:23	\N	\N
104	6	submitted	2014-04-21 20:57:05	\N	\N
105	22	submitted	2014-07-13 11:42:48	\N	\N
106	16	submitted	2014-07-03 14:54:55	\N	\N
107	19	submitted	2014-04-12 09:06:12	\N	\N
108	20	submitted	2014-05-09 19:29:33	\N	\N
109	35	submitted	2014-01-15 08:14:30	\N	\N
110	29	submitted	2014-04-30 13:33:35	\N	\N
111	34	submitted	2014-03-29 12:56:41	\N	\N
112	13	submitted	2014-06-27 23:45:17	\N	\N
113	40	submitted	2014-05-07 12:58:31	\N	\N
114	5	submitted	2014-06-27 14:53:18	\N	\N
115	33	submitted	2014-07-16 21:55:00	\N	\N
116	15	submitted	2013-11-13 15:19:58	\N	\N
117	17	submitted	2014-06-18 22:37:19	\N	\N
118	23	submitted	2014-03-28 20:12:52	\N	\N
119	41	submitted	2014-03-19 20:09:08	\N	\N
120	26	submitted	2014-03-24 03:03:52	\N	\N
121	44	submitted	2014-06-11 22:03:34	\N	\N
122	8	received_feedback	2014-06-10 13:33:21	\N	\N
123	16	commented	2014-06-10 13:33:21	\N	\N
124	4	commented	2014-06-15 08:32:07	\N	\N
125	47	commented	2014-06-24 15:03:17	\N	\N
126	14	commented	2014-06-25 02:21:28	\N	\N
127	25	commented	2014-06-29 04:45:18	\N	\N
128	27	commented	2014-06-29 07:48:20	\N	\N
129	2	commented	2014-07-01 11:06:07	\N	\N
130	45	commented	2014-07-18 14:16:25	\N	\N
131	37	commented	2014-07-22 20:07:30	\N	\N
132	43	commented	2014-07-24 05:26:48	\N	\N
133	6	commented	2014-06-14 11:41:03	\N	\N
134	48	commented	2014-06-16 06:19:40	\N	\N
135	21	commented	2014-06-25 13:24:30	\N	\N
136	22	commented	2014-06-26 01:46:27	\N	\N
137	39	commented	2014-07-02 06:33:48	\N	\N
138	11	commented	2014-07-02 21:34:20	\N	\N
139	30	commented	2014-07-25 01:11:02	\N	\N
140	10	commented	2014-07-25 23:27:00	\N	\N
141	10	received_feedback	2014-07-02 13:57:21	\N	\N
142	32	commented	2014-07-11 16:15:14	\N	\N
143	8	commented	2014-06-23 20:20:39	\N	\N
144	11	received_feedback	2014-07-01 20:10:30	\N	\N
145	28	commented	2014-07-05 16:09:11	\N	\N
146	30	received_feedback	2014-06-27 14:43:44	\N	\N
147	1	commented	2014-07-24 06:58:05	\N	\N
148	3	commented	2014-07-10 11:43:42	\N	\N
149	14	received_feedback	2014-02-15 06:43:18	\N	\N
150	21	received_feedback	2014-04-15 03:11:55	\N	\N
151	27	received_feedback	2014-05-09 12:52:43	\N	\N
152	28	received_feedback	2014-05-09 05:47:30	\N	\N
153	32	received_feedback	2014-07-04 11:41:28	\N	\N
154	43	received_feedback	2014-07-24 10:09:44	\N	\N
155	45	received_feedback	2014-06-28 10:30:59	\N	\N
156	47	received_feedback	2014-07-18 16:43:39	\N	\N
157	19	received_feedback	2014-07-18 09:34:33	\N	\N
158	48	received_feedback	2014-04-03 18:37:10	\N	\N
159	25	received_feedback	2014-05-28 03:02:38	\N	\N
160	6	received_feedback	2014-05-01 00:50:50	\N	\N
161	13	received_feedback	2014-07-21 23:27:02	\N	\N
162	22	received_feedback	2014-07-15 12:05:21	\N	\N
163	16	received_feedback	2014-06-14 07:42:29	\N	\N
164	20	received_feedback	2014-05-30 15:40:29	\N	\N
165	35	received_feedback	2014-01-16 05:56:48	\N	\N
166	29	received_feedback	2014-03-20 01:41:49	\N	\N
167	34	received_feedback	2014-03-30 15:24:32	\N	\N
168	40	received_feedback	2014-05-01 21:44:35	\N	\N
169	5	received_feedback	2014-07-05 15:41:15	\N	\N
170	33	received_feedback	2014-07-16 22:02:25	\N	\N
171	15	received_feedback	2013-12-07 11:35:54	\N	\N
172	17	received_feedback	2014-06-22 15:17:30	\N	\N
173	23	received_feedback	2014-04-23 05:25:52	\N	\N
174	41	received_feedback	2014-04-30 16:27:32	\N	\N
175	26	received_feedback	2014-04-09 06:32:27	\N	\N
176	44	received_feedback	2014-06-12 11:57:18	\N	\N
\.


--
-- Name: lifecycle_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('lifecycle_events_id_seq', 176, true);


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY likes (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('likes_id_seq', 1, false);


--
-- Data for Name: log_entries; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY log_entries (id, user_id, body, created_at, updated_at) FROM stdin;
\.


--
-- Name: log_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('log_entries_id_seq', 1, false);


--
-- Data for Name: looks; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY looks (id, user_id, exercise_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: looks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('looks_id_seq', 1, false);


--
-- Data for Name: muted_submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY muted_submissions (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: muted_submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('muted_submissions_id_seq', 1, false);


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY notifications (id, user_id, item_id, regarding, read, count, created_at, updated_at, item_type, creator_id) FROM stdin;
\.


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('notifications_id_seq', 1, false);


--
-- Data for Name: posts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY posts (id, slug, title, blurb, body, testimonial_keyword, event_on, archive_on, is_indestructible, is_featured, is_service, priority, created_at, updated_at) FROM stdin;
\.


--
-- Name: posts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('posts_id_seq', 1, false);


--
-- Data for Name: products; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY products (id, title, price, created_at, updated_at, sort_order) FROM stdin;
\.


--
-- Name: products_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('products_id_seq', 1, false);


--
-- Data for Name: quotes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY quotes (id, body, cite, created_at, updated_at) FROM stdin;
\.


--
-- Name: quotes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('quotes_id_seq', 1, false);


--
-- Data for Name: submission_viewers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submission_viewers (id, submission_id, viewer_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: submission_viewers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submission_viewers_id_seq', 1, false);


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submissions (id, user_id, key, state, language, slug, code, done_at, is_liked, nit_count, version, created_at, updated_at, user_exercise_id, filename) FROM stdin;
1	8	4d7c84bde341a42b0c3efd45	pending	ruby	word-count	class Phrase\r\n  attr_reader :word_count\r\n  \r\n  def initialize(phrase)\r\n    @word_count = count_words(phrase)\r\n  end\r\n  \r\n  def count_words(phrase)\r\n    words = phrase.downcase.split(/[^\\w']+/)\r\n    result = Hash.new\r\n    words.each do |word|\r\n      if result.has_key?(word)\r\n        result[word] = result[word] + 1\r\n      else\r\n        result[word] = 1\r\n      end\r\n    end\r\n    result\r\n  end\r\nend\r	\N	\N	0	1	2014-06-04 11:14:37	2014-06-04 11:14:37	57440	phrase.rb
2	8	33ee066b01a8e8780c947dd4	pending	javascript	strain	var OPERATION_KEEP = true;\nvar OPERATION_DISCARD = false;\n\nfunction run(list, fn, operation) {\n  return list.filter(function(i){\n    return fn(i) == operation;\n  });\n}\n\nexports.keep = function(list, fn) {\n  return run(list, fn, OPERATION_KEEP);\n}\n\nexports.discard = function(list, fn) {\n  return run(list, fn, OPERATION_DISCARD);\n}	\N	\N	0	2	2014-06-08 13:42:32	2014-06-08 13:42:32	48302	strain.js
3	8	829d51c61a077cd75b42e9f3	superseded	javascript	strain	var OPERATION_KEEP = 1;\nvar OPERATION_DISCARD = 2;\n\nfunction run(list, fn, operation) {\n  operation = operation || OPERATION_KEEP;\n  var result = [];\n\n  list.forEach(function(i){\n    var fnResult = fn(i);\n    if ((fnResult && operation == OPERATION_KEEP) || (!fnResult && operation == OPERATION_DISCARD)) {\n      result.push(i);\n    }\n  });\n\n  return result;\n}\n\nexports.keep = function(list, fn) {\n  return run(list, fn, OPERATION_KEEP);\n}\n\nexports.discard = function(list, fn) {\n  return run(list, fn, OPERATION_DISCARD);\n}	\N	\N	0	1	2014-06-10 23:54:24	2014-06-10 23:54:24	48302	strain.js
4	10	0f358499c725cb1bd727bd01	superseded	ruby	anagram	class Anagram\n\n  attr_reader :word\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(candidates)\n    sorted_candidates = sort_candidates(candidates)\n    matches = sorted_candidates.collect do |candidate|\n      if identical_word?(candidate[0])\n        nil\n      elsif candidate[1] == downcase_and_sort_word\n        candidate[0]\n      end\n    end\n    matches.reject {|m| m.nil?}\n  end\n\n  def identical_word?(input)\n    input.downcase == word.downcase\n  end\n\n  def downcase_and_sort_word\n    word.downcase.chars.sort.join\n  end\n\n  def sort_candidates(candidates)\n     candidates.each_with_object(Hash.new(0)) do |c,sorted|\n      sorted[c] = c.downcase.chars.sort.join\n    end\n  end\n\nend	\N	\N	0	1	2014-06-25 16:44:36	2014-06-25 16:44:36	41864	anagram.rb
5	10	6e246696679bdfb4dc27ff31	superseded	ruby	anagram	class Anagram\n\n  attr_reader :word\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(candidates)\n    sorted_candidates = sort_candidates(candidates)\n    matches = sorted_candidates.select do |candidate|\n      candidate[0] if identical_word?(candidate[0]) && candidate[1] == downcase_and_sort_word\n    end\n  end\n\n  def identical_word?(input)\n    input.downcase == word.downcase\n  end\n\n  def downcase_and_sort_word\n    word.downcase.chars.sort.join\n  end\n\n  def sort_candidates(candidates)\n     candidates.each_with_object(Hash.new(0)) do |c,sorted|\n      sorted[c] = c.downcase.chars.sort.join\n    end\n  end\n\nend	\N	\N	0	2	2014-07-15 20:45:40	2014-07-15 20:45:40	41864	anagram.rb
6	10	5b1b4a423353b79853d27012	pending	ruby	anagram	class Anagram\n\n  attr_reader :word\n\n  def initialize(word)\n    @word = word\n  end\n\n  def match(candidates)\n    matches = sort_candidates(candidates).collect do |candidate|\n      candidate[0] if candidate[1] == alphagram && !identical_word?(candidate[0])\n    end.reject(&:nil?)\n  end\n\n  def identical_word?(input)\n    input.downcase == word.downcase\n  end\n\n  def alphagram\n    @alphagram ||= word.downcase.chars.sort.join\n  end\n\n  def sort_candidates(candidates)\n     sorted_candidates = candidates.each_with_object(Hash.new(0)) do |c,sorted|\n      sorted[c] = c.downcase.chars.sort.join\n    end\n    #binding.pry\n    return sorted_candidates.to_a\n  end\n\nend	\N	\N	0	3	2014-07-19 16:20:48	2014-07-19 16:20:48	41864	anagram.rb
7	10	6b439322396825a4942dc89f	pending	javascript	bob	var Bob = function() {\n  this.hey = function(message) {\n    if (this.isSilent(message)) {\n      return 'Fine. Be that way!';\n    }\n\n    if (this.isShouting(message)) {\n      return 'Woah, chill out!';\n    }\n\n    if (this.isQuestion(message)) {\n      return 'Sure.';\n    }\n\n    return 'Whatever.';\n  };\n\n  this.isSilent = function(message) {\n    return message.trim().length === 0;\n  };\n\n  this.isShouting = function(message) {\n    return message === message.toUpperCase();\n  };\n\n  this.isQuestion = function(message) {\n    return message.charAt(message.length - 1) === '?';\n  };\n\n  return this;\n};\nmodule.exports = Bob;	\N	\N	0	1	2014-06-09 06:50:13	2014-06-09 06:50:13	41380	bob.js
8	10	e9b76c9ac57c188495c8bde3	pending	haskell	space-age	module SpaceAge (Planet(..), ageOn) where\r\n\r\ndata Planet = Mercury | Venus | Earth | Mars | Jupiter | Saturn | Uranus | Neptune\r\n\r\nageOn :: Planet -> Float -> Float\r\nageOn planet ageInSeconds =\r\n    secondsToEarthYears ageInSeconds / periodInEarthYears planet\r\n\r\nperiodInEarthYears :: Planet -> Float\r\nperiodInEarthYears planet = case planet of\r\n    Earth -> 1\r\n    Mercury -> 0.2408467\r\n    Venus -> 0.61519726\r\n    Mars -> 1.8808158\r\n    Jupiter -> 11.862615\r\n    Saturn -> 29.447498\r\n    Uranus -> 84.016846\r\n    Neptune -> 164.79132\r\n\r\nsecondsToEarthYears :: Float -> Float\r\nsecondsToEarthYears seconds =\r\n    seconds / secondsPerMinute / minutesPerHour / hoursPerDay / daysPerYear\r\n    where secondsPerMinute = 60\r\n          minutesPerHour = 60\r\n          hoursPerDay = 24\r\n          daysPerYear = 365.25\r	\N	\N	0	1	2014-06-30 17:34:41	2014-06-30 17:34:41	55252	SpaceAge.hs
9	10	e814f3cd8646d5aacc1da69e	pending	ruby	gigasecond	class Gigasecond\n  BILLION = 1_000_000_000\n\n  attr_reader :date\n\n  def initialize(date) \n    @date = (date.to_time + 1 * BILLION).to_date\n  end\nend	\N	\N	0	1	2014-05-23 18:43:27	2014-05-23 18:43:27	60054	gigasecond.rb
10	10	22183803c8c70b712c33f131	pending	ruby	phone-number	class PhoneNumber\n  attr_reader :number\n  def initialize(number)\n    @number = format_number(number)\n    @number = invalid_number unless is_valid?\n  end\n  \n  def format_number(number)\n    number = number.gsub(/\\D/, '')\n    if number.length == 11 && (number.chars)[0].to_i == 1\n      number = number.slice(1,number.length)\n    end\n    number\n  end\n  \n  def invalid_number\n    "0000000000"\n  end\n  \n  def is_valid?\n    @number.length == 10\n  end\n  \n  def area_code\n    @number.slice(0, 3)\n  end\n  \n  def to_s\n    "(#{area_code}) #{@number.slice(3,3)}-#{@number.slice(6,4)}"\n  end\nend	\N	\N	0	1	2014-05-18 11:21:32	2014-05-18 11:21:32	45909	phone-number.rb
11	10	57b9cae20a2d85093e832114	pending	ruby	leap	class Year\n  def self.leap?(year)\n    if year % 4 == 0\n      if year % 100 == 0\n        if year % 400 == 0\n          return true\n        end\n        return false\n      end\n      return true\n    end\n  end\nend	\N	\N	0	1	2014-06-07 04:08:21	2014-06-07 04:08:21	52011	year.rb
12	11	b4bc4e3afdf6c16605ff4a33	superseded	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char (isAlpha, isDigit, isSpace, toLower)\nimport qualified Data.Map.Strict as Map\n\nwordCount :: String -> Map.Map String Integer\nwordCount = foldl acc Map.empty . words . cleanUpStr\n    where cleanUpStr = map (toLower . replaceSym)\n          acc m w = Map.insertWith (+) w 1 m\n\nreplaceSym :: Char -> Char\nreplaceSym x\n  | isDigit x || isAlpha x  = x\n  | otherwise               = ' '\n  	\N	\N	0	1	2014-06-25 18:15:28	2014-06-25 18:15:28	48300	word-count.hs
60	30	57126b6e9bc00bd09640078b	pending	javascript	circular-buffer	// I didn't know how to do this. Moving on....	\N	\N	0	1	2014-03-08 21:14:37	2014-03-08 21:14:37	60370	circular-buffer.js
13	11	bc9921d8071047d004493d71	pending	haskell	word-count	module WordCount (wordCount) where\n\nimport Data.Char (isAlphaNum, toLower)\nimport Data.List (foldl')\nimport qualified Data.Map.Strict as Map\n\nwordCount :: String -> Map.Map String Integer\nwordCount = foldl' acc Map.empty . words . cleanUpStr\n    where cleanUpStr = map $ toLower . replaceSym\n          acc m w = Map.insertWith (+) w 1 m\n\nreplaceSym :: Char -> Char\nreplaceSym x\n  | isAlphaNum x     = x\n  | otherwise        = ' '\n  	\N	\N	0	2	2014-07-10 23:46:06	2014-07-10 23:46:06	48300	word-count.hs
14	11	8b7723f82e0f720ccad3ef00	superseded	ruby	proverb	class Proverb\n  attr_reader :words, :qualifier\n\n  def initialize(*words, qualifier: nil)\n    @words = words\n    @qualifier = qualifier\n  end\n\n  def to_s\n    phrase = []\n    words.each_with_index { |item, index|\n      if item == words.last && qualifier == nil\n        phrase << "And all for the want of a #{words[0]}."\n      else\n        phrase << "For want of a #{item} the #{words[index+1]} was lost.\\n"\n      end\n    }\n    if qualifier != nil\n      phrase[phrase.count-1] = "And all for the want of a #{qualifier} #{words.first}."\n    end\n    phrase.join\n  end\nend	\N	\N	0	1	2014-06-11 09:05:41	2014-06-11 09:05:41	53703	proverb.rb
15	11	164eaf3e9d2befe85888b69a	pending	ruby	proverb	class Proverb\n  attr_reader :words, :qualifier\n\n  def initialize(*words, qualifier: nil)\n    @words = words\n    @qualifier = qualifier\n  end\n\n  def to_s\n    if has_qualifier?\n      add_qualifier_to_proverb(generate_proverb_array).join\n    else\n      generate_proverb_array.join\n    end\n  end\n\n  private\n\n  def add_qualifier_to_proverb(proverb_array)\n    proverb_array[proverb_array.count-1] = "And all for the want of a #{qualifier} #{words.first}."\n    proverb_array\n  end\n\n  def has_qualifier?\n    qualifier != nil\n  end\n\n  def generate_proverb_array\n    phrase = []\n    words.each_with_index { |item, index|\n      if item == words.last && qualifier == nil\n        phrase << "And all for the want of a #{words[0]}."\n      else\n        phrase << "For want of a #{item} the #{words[index+1]} was lost.\\n"\n      end\n    }\n    phrase\n  end\nend	\N	\N	0	3	2014-06-25 17:07:07	2014-06-25 17:07:07	53703	proverb.rb
16	11	ec5ec9ed13fc2292a635c5c6	superseded	ruby	proverb	class Proverb\n  attr_reader :words, :qualifier\n\n  def initialize(*words, qualifier: nil)\n    @words = words\n    @qualifier = qualifier\n  end\n\n  def to_s\n    if has_qualifier?\n      add_qualifier_to_proverb(generate_proverb).join\n    else\n      generate_proverb.join\n    end\n  end\n\n  def has_qualifier?\n    qualifier != nil\n  end\n\n  def add_qualifier_to_proverb(proverb_array)\n    proverb_array[proverb_array.count-1] = "And all for the want of a #{qualifier} #{words.first}."\n    proverb_array\n  end\n\n  def generate_proverb()\n    phrase = []\n    words.each_with_index { |item, index|\n      if item == words.last && qualifier == nil\n        phrase << "And all for the want of a #{words[0]}."\n      else\n        phrase << "For want of a #{item} the #{words[index+1]} was lost.\\n"\n      end\n    }\n    phrase\n  end\nend	\N	\N	0	2	2014-06-29 09:49:14	2014-06-29 09:49:14	53703	proverb.rb
17	11	20bab7fc3897f0c981a074f7	pending	clojure	robot-name	;; This implementation includes avoidance of name collisions as\n;; suggested in the README file, and attempts to do so in a\n;; concurrency-safe manner. Feedback requested on whether I'm\n;; using Clojure's STM correctly here.\n\n(def ^:private robot-names (ref #{}))\n\n(def ^:private start-of-alphabet (int \\A))\n(def ^:private size-of-alphabet 26)\n\n(def ^:private maximum-names (* size-of-alphabet size-of-alphabet 1000))\n\n(defn- random-letter []\n  (char (+ start-of-alphabet (rand size-of-alphabet))))\n\n(defn- register-robot-name [name]\n  (dosync\n    ; This deref establishes the value for robot-names\n    ; that will be checked by "alter" below; if another\n    ; thread adds the same name we're adding after our\n    ; contains? check, alter will notice the change and\n    ; the transaction will retry, at which point this\n    ; contains? check will catch the already-inserted\n    ; name. (Is there a simpler way to do this?)\n    (if (contains? @robot-names name)\n      false\n      (alter robot-names conj name))))\n\n(defn- random-name []\n  (format "%c%c%03d" (random-letter) (random-letter) (int (rand 1000))))\n\n(defn- make-unique-name []\n  (let [name (random-name)]\n    (if (register-robot-name name)\n      name\n      (if (= (count @robot-names) maximum-names)\n        (throw (IllegalStateException. "All robot names are in use"))\n        (recur)))))\n\n(defn robot []\n  (let [name (make-unique-name)]\n    ; Return an atom because mutable state is required\n    ; by the reset-name function. We will assume that\n    ; only one thread at a time is accessing a particular\n    ; robot, and thus we can avoid using a ref.\n    (atom {:name name})))\n\n(defn robot-name [robot]\n (:name @robot))\n\n(defn reset-name [robot]\n  (let [new-name (make-unique-name)]\n    (dosync\n      (alter robot-names disj (robot-name robot)))\n    (swap! robot assoc :name new-name)))	\N	\N	0	1	2014-06-21 18:54:35	2014-06-21 18:54:35	49253	robot.clj
18	14	accdfc48b7079f386649f95b	superseded	haskell	etl	module ETL (transform) where\nimport qualified Data.Map as M\nimport Data.Char\n\ntype Point = Int\ntype Letter = String\n\ntransform :: M.Map Point [Letter] -> M.Map Letter Point\ntransform orig = M.fromList $ transform' (M.toList orig) []\n\ntransform' :: [(Point, [Letter])] -> [(Letter, Point)] -> [(Letter, Point)]\ntransform' [] accum = accum\ntransform' (x:xs) accum = \n  let point = fst x\n      letters = map lower $ snd x\n  in transform' xs (accum ++ (map (\\l -> (l, point)) letters))\n\nlower :: String -> String\nlower = map toLower	\N	\N	0	1	2013-12-06 14:58:09	2013-12-06 14:58:09	46647	etl.hs
19	14	ce41e111d53c1ad449ae1d6b	pending	haskell	etl	module ETL (transform) where\nimport qualified Data.Map.Strict as M\nimport Data.Char\nimport Data.List (foldl')\n\ntype Point = Int\ntype Letter = String\n\n\ntransform :: M.Map Point [Letter] -> M.Map Letter Point\ntransform = M.foldlWithKey toLetter M.empty\n\ntoLetter :: M.Map Letter Point -> Point -> [Letter] -> M.Map Letter Point\ntoLetter accum p letters  = \n  let lower = map toLower\n      addToMap a l = M.insert (lower l) p a\n  in foldl' addToMap accum letters 	\N	\N	0	2	2014-04-10 09:01:51	2014-04-10 09:01:51	46647	etl.hs
20	14	b9f8215008266ef27562a616	pending	python	ocr-numbers	NUMBERS = [[" _ ",\n            "| |",\n            "|_|",\n            "   "],\n           ["   ",\n            "  |",\n            "  |",\n            "   "]]\n\n\ndef number(grid):\n    if len(grid) != 4 or any(len(row) != 3 for row in grid):\n        raise ValueError("Grid malformed")\n    else:\n        try:\n            return str(NUMBERS.index(grid))\n        except ValueError:\n            return '?'\n\n\ndef grid(number):\n    try:\n        return NUMBERS[int(number)]\n    except IndexError:\n        raise ValueError("Not a valid number {}".format(number))	\N	\N	0	1	2014-05-21 20:32:25	2014-05-21 20:32:25	55545	ocr.py
21	14	cc96998e2d978900edc9ea93	pending	haskell	space-age	module SpaceAge (Planet(..), ageOn)\nwhere\n\ndata Planet = Earth | Mercury | Venus | Mars | Jupiter | Saturn | Uranus | Neptune\n\nplanetPeriod :: Planet -> Float\nplanetPeriod planet = case planet of\n    Earth    -> earth\n    Mercury  -> 0.2408467  * earth\n    Venus    -> 0.61519726 * earth\n    Mars     -> 1.8808158  * earth\n    Jupiter  -> 11.862615  * earth\n    Saturn   -> 29.447498  * earth\n    Uranus   -> 84.016846  * earth\n    Neptune  -> 164.79132  * earth\n    where\n        earth = 31557600.0\n\nageOn :: Planet -> Float -> Float\nageOn planet age = age / planetPeriod planet	\N	\N	0	1	2013-11-13 03:46:22	2013-11-13 03:46:22	60621	SpaceAge.hs
22	14	9a61b526a35ae143d40f843e	pending	go	phone-number	package phonenumber\n\nimport (\n\t"fmt"\n\t"strings"\n)\n\nvar INVALID = "0000000000"\n\nfunc Number(input string) string {\n\tstripped := strings.Map(func(r rune) rune {\n\t\tif r >= '0' && r <= '9' {\n\t\t\treturn r\n\t\t}\n\t\treturn -1\n\t}, input)\n\n\tif len(stripped) == 11 && stripped[0] == '1' {\n\t\treturn stripped[1:]\n\t}\n\tif len(stripped) == 10 {\n\t\treturn stripped\n\t}\n\treturn INVALID\n}\n\nfunc AreaCode(input string) string {\n\treturn Number(input)[:3]\n}\n\nfunc Format(input string) string {\n\tphone := Number(input)\n\treturn fmt.Sprintf("(%v) %v-%v", phone[0:3], phone[3:6], phone[6:])\n}	\N	\N	0	1	2014-03-26 08:56:30	2014-03-26 08:56:30	53166	phonenumber.go
23	14	553dea00becb900fd683b492	pending	python	point-mutations	class DNA:\n\n    def __init__(self, string):\n        self.string = string\n\n    def hamming_distance(self, other):\n        score = 0\n        end_range = self.range(other)\n        for index in range(0, end_range):\n            score += self.compare(other, index)\n        return score\n\n    def compare(self, other, index):\n        if self.string[index] == other[index]:\n            return 0\n        else:\n            return 1\n\n    def range(self, other):\n        return min([len(self.string), len(other)])	\N	\N	0	1	2013-11-05 20:50:21	2013-11-05 20:50:21	45465	point-mutations.py
24	14	231dbdc98d8e32171dadb3ca	pending	python	rna-transcription	class DNA:\n\n  TO_RNA = {'G' :'C', 'C' :'G', 'T' :'A', 'A' :'U'}\n\n  def __init__(self, strand):\n    self.strand = strand\n\n  def to_rna(self):\n    RNA_strand = []\n    for acid in self.strand:\n      acid = DNA.TO_RNA[acid]\n      RNA_strand.append(acid)\n    return ''.join(RNA_strand)	\N	\N	0	1	2014-01-11 12:52:15	2014-01-11 12:52:15	54831	dna.py
25	14	2b6b231e71583679ee60de0e	pending	elixir	word-count	defmodule Words do\n  def count(sentence) do\n    sentence = String.downcase sentence\n    words = List.flatten Regex.scan(%r/\\w+/, sentence)\n    unique_words = Enum.uniq(words)\n    HashDict.new unique_words, fn(word) ->\n      word_count = Enum.count(words, fn(x) -> word == x end)\n      { word, word_count }\n    end\n  end\nend	\N	\N	0	1	2013-12-06 11:45:44	2013-12-06 11:45:44	44509	word-count.exs
26	14	719432932219a3587adfbcfd	pending	ruby	leap	class Year\n  def initialize(year)\n    @year = year\n  end\n\n  def self.leap?(year)\n    Year.new(year).leap?\n  end\n\n  def leap?\n    is_leap_century? || (is_simple_leap? && !is_century?)\n  end\n\nprivate\n  def is_simple_leap?\n        (@year % 4) == 0\n  end\n\n  def is_century?\n    (@year % 100) == 0\n  end\n\n  def is_leap_century?\n    (@year % 400) == 0\n  end\n\n\nend	\N	\N	0	1	2013-12-21 16:43:36	2013-12-21 16:43:36	54771	year.rb
27	14	ea94fbf15e4a6d9eb14f3dc4	pending	clojure	nucleotide-count	(ns dna)\n\n(defn count [char strand]\n  (if (contains? #{\\A \\T \\C \\G \\U} char)\n    (clojure.core/count (re-seq\n                         (re-pattern (str char)) strand))\n    (throw (Exception. "invalid nucleotide"))))\n\n(defn nucleotide-counts [strand]\n  {\\A (count \\A strand)\n   \\T (count \\T strand)\n   \\C (count \\C strand)\n   \\G (count \\G strand)})	\N	\N	0	1	2014-05-18 15:35:07	2014-05-18 15:35:07	58611	dna.clj
28	14	13f096ec1ec986d5eb5f5847	superseded	ruby	proverb	class Proverb\n\n  def initialize(*words)\n    parse_options(words)\n  end\n\n  def parse_options(options)\n    @words ||= []\n    @option = Hash.new\n    options.each do |opt|\n      if opt.class == Hash\n        @option[opt.first[0]] = opt.first[1]\n      else\n        @words << opt\n      end\n    end\n  end\n\n  def proverb_start_line(word)\n    "For want of a #{word} "\n  end\n\n  def proverb_end_line(word)\n    "the #{word} was lost.\\n"\n  end\n\n  def proverb_ending(word)\n    if @option[:qualifier]\n      "And all for the want of a #{@option[:qualifier]} #{word}."\n    else\n      "And all for the want of a #{word}."\n    end\n  end\n\n  def build_proverb_line(count)\n    proverb_start_line(@words[count]) + proverb_end_line(@words[count+1])\n  end\n\n  def to_s\n    @output = ""\n    @words.count.times do |count|\n      if @words.count >= count\n        @output += build_proverb_line(count) if @words[count+1]\n      end\n    end\n    @output += proverb_ending(@words[0])\n  end\n\nend	\N	\N	0	1	2013-12-05 16:02:22	2013-12-05 16:02:22	50935	proverb.rb
29	14	2bb5fe539a6d83426b2bbd90	pending	ruby	proverb	class Proverb\n\n  def initialize(*words)\n    @words ||= []\n    @option = Hash.new\n    parse_options(words)\n  end\n\n  def parse_options(options)\n    options.each do |opt|\n      if opt.class == Hash\n        @option[opt.first[0]] = opt.first[1]\n      else\n        @words << opt\n      end\n    end\n  end\n\n  def proverb_start_line(word)\n    "For want of a #{word} "\n  end\n\n  def proverb_end_line(word)\n    "the #{word} was lost.\\n"\n  end\n\n  def proverb_ending(word)\n    if @option[:qualifier]\n      "And all for the want of a #{@option[:qualifier]} #{word}."\n    else\n      "And all for the want of a #{word}."\n    end\n  end\n\n  def build_proverb_line(count)\n    proverb_start_line(@words[count]) + proverb_end_line(@words[count+1])\n  end\n\n  def to_s\n    @output = ""\n    @words.count.times do |count|\n      if @words.count >= count\n        @output += build_proverb_line(count) if @words[count+1]\n      end\n    end\n    @output += proverb_ending(@words[0])\n  end\n\nend	\N	\N	0	2	2014-02-08 18:16:12	2014-02-08 18:16:12	50935	proverb.rb
30	21	329db8125bcdac89be884208	superseded	go	clock	package clock\r\n\r\nimport (\r\n\t"fmt"\r\n\tstr "strings"\r\n)\r\n\r\nconst (\r\n\tminHr  = 0\r\n\tmaxHr  = 24\r\n\tminMin = 0\r\n\tmaxMin = 60\r\n)\r\n\r\ntype Clock struct {\r\n\thr, min int\r\n}\r\n\r\nfunc New(hrs int, mins int) Clock {\r\n\ttmpc := Clock{0, 0}\r\n\tvar adder = hrs*maxMin + mins\r\n\ttmpc = tmpc.Add(adder)\r\n\treturn tmpc\r\n}\r\n\r\n//takes a number of minutes (min :int) and adds it to the current time\r\nfunc (c Clock) Add(min int) Clock {\r\n\tvar tmpMin = min\r\n\tif min < 0 {\r\n\t\tfor {\r\n\t\t\tif -tmpMin > c.min {\r\n\t\t\t\tc.hr--\r\n\t\t\t\tif c.hr < 0 {\r\n\t\t\t\t\tc.hr = 23\r\n\t\t\t\t}\r\n\t\t\t\ttmpMin += 60\r\n\t\t\t} else {\r\n\t\t\t\tc.min += tmpMin\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t} else if min > 0 {\r\n\t\tfor {\r\n\t\t\tif (tmpMin + c.min) >= 60 {\r\n\t\t\t\tc.hr++\r\n\t\t\t\tif c.hr > 23 {\r\n\t\t\t\t\tc.hr = 0\r\n\t\t\t\t}\r\n\t\t\t\ttmpMin -= 60\r\n\t\t\t} else {\r\n\t\t\t\tc.min += tmpMin\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn c\r\n}\r\n\r\nfunc (c Clock) String() string {\r\n\tvar tmp = make([]string, 0)\r\n\r\n\tif c.hr > 9 {\r\n\t\ttmp = append(tmp, fmt.Sprintf("%v", c.hr))\r\n\t} else {\r\n\t\ttmp = append(tmp, fmt.Sprintf("0%v", c.hr))\r\n\t}\r\n\ttmp = append(tmp, ":")\r\n\r\n\tif c.min > 9 {\r\n\t\ttmp = append(tmp, fmt.Sprintf("%v", c.min))\r\n\t} else {\r\n\t\ttmp = append(tmp, fmt.Sprintf("0%v", c.min))\r\n\t}\r\n\r\n\treturn str.Join(tmp, "")\r\n}\r	\N	\N	0	1	2014-03-27 01:28:45	2014-03-27 01:28:45	59195	clock.go
31	21	3335bc88712c566133b35b9e	pending	go	clock	package clock\r\n\r\nimport (\r\n\t"fmt"\r\n)\r\n\r\nconst (\r\n\tminHr  = 0\r\n\tmaxHr  = 24\r\n\tminMin = 0\r\n\tmaxMin = 60\r\n)\r\n\r\ntype Clock struct {\r\n\thr, min int\r\n}\r\n\r\nfunc New(hrs int, mins int) Clock {\r\n\ttmpc := Clock{0, 0}\r\n\tvar adder = hrs*maxMin + mins\r\n\ttmpc = tmpc.Add(adder)\r\n\treturn tmpc\r\n}\r\n\r\n//takes a number of minutes (min :int) and adds it to the current time\r\nfunc (c Clock) Add(min int) Clock {\r\n\tvar tmpMin = min\r\n\tif min < 0 {\r\n\t\tfor {\r\n\t\t\tif -tmpMin > c.min {\r\n\t\t\t\tc.hr--\r\n\t\t\t\tif c.hr < minHr {\r\n\t\t\t\t\tc.hr = maxHr - 1\r\n\t\t\t\t}\r\n\t\t\t\ttmpMin += maxMin\r\n\t\t\t} else {\r\n\t\t\t\tc.min += tmpMin\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t} else if min > 0 {\r\n\t\tfor {\r\n\t\t\tif (tmpMin + c.min) >= maxMin {\r\n\t\t\t\tc.hr++\r\n\t\t\t\tif c.hr >= maxHr {\r\n\t\t\t\t\tc.hr = minMin\r\n\t\t\t\t}\r\n\t\t\t\ttmpMin -= maxMin\r\n\t\t\t} else {\r\n\t\t\t\tc.min += tmpMin\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn c\r\n}\r\n\r\nfunc (c Clock) String() string {\r\n\treturn (fmt.Sprintf("%02d:%02d", c.hr, c.min))\r\n}\r	\N	\N	0	2	2014-06-27 04:30:22	2014-06-27 04:30:22	59195	clock.go
32	21	2f28ee5c4bc4023357f664a0	superseded	clojure	phone-number	(ns phone\n (:require [clojure.string :as string :refer [join]]))\n\n\n(def classic "\\\\((\\\\d{3})\\\\) (\\\\d{3})-(\\\\d{4})")\n(def dots "(\\\\d{3}).(\\\\d{3}).(\\\\d{4})")\n(def eleven-digits "1?(\\\\d{10})")\n\n(def phone-pattern (re-pattern (join "|" [classic dots eleven-digits])))\n\n(defn- parts [s]\n  (when-let [tokens (re-matches phone-pattern s)]\n    (rest tokens)))\n\n(defn number [s]\n  (let [parts (parts s)]\n    (if parts\n      (apply str parts)\n      "0000000000")))\n\n(defn- sub-number [s start end]\n   (subs (number s) start end))\n\n(defn area-code [s]\n  (sub-number s 0 3))\n\n(defn pretty-print [s]\n  (str\n   "("\n   (area-code s)\n   ") "\n   (sub-number s 3 6)\n   "-"\n   (sub-number s 6 10)))	\N	\N	0	1	2014-02-01 06:42:25	2014-02-01 06:42:25	52547	phone.clj
33	21	3bc805cf2de885827407d3ff	pending	clojure	phone-number	(ns phone\n (:require [clojure.string :as string :refer [join]]))\n\n(def classic "\\\\((\\\\d{3})\\\\) (\\\\d{3})-(\\\\d{4})")\n(def dots "(\\\\d{3}).(\\\\d{3}).(\\\\d{4})")\n(def eleven-digits "1?(\\\\d{10})")\n\n(def phone-pattern (re-pattern (join "|" [classic dots eleven-digits])))\n\n(defn- parts [s]\n  (when-let [tokens (re-matches phone-pattern s)]\n    (rest tokens)))\n\n(defn number [s]\n  (let [parts (parts s)]\n    (if parts\n      (apply str parts)\n      "0000000000")))\n\n(defn- sub-number [s start end]\n   (subs (number s) start end))\n\n(defn area-code [s]\n  (sub-number s 0 3))\n\n(defn pretty-print [s]\n  (format "(%s) %s-%s"\n          (area-code s)\n          (sub-number s 3 6)\n          (sub-number s 6 10)))	\N	\N	0	2	2014-04-25 09:34:16	2014-04-25 09:34:16	52547	phone.clj
34	21	6b4ed147e881aab8c7ff70af	pending	ruby	grains	class Grains\n\tdef square(num)\n\t\treturn 2**(num-1)\n\tend\n\tdef total()\n\t\treturn (2**64)-1\n\tend\nend	\N	\N	0	1	2014-02-14 17:58:13	2014-02-14 17:58:13	52964	grains.rb
35	27	9e3c3580c35fa9ab692a73d1	pending	scala	hamming	object Hamming {\n  def compute(s1: String, s2: String) =\n    s1.zip(s2).count( { case (x, y) => x != y } )\n}	\N	\N	0	2	2014-03-19 20:15:02	2014-03-19 20:15:02	50736	hamming.scala
36	27	a024b6ad9a26deff065141b1	superseded	scala	hamming	object Hamming {\n  def compute(s1: String, s2: String) = {\n    s1.zip(s2).count( { case (x, y) => x != y } )\n  }\n}	\N	\N	0	1	2014-04-07 19:17:55	2014-04-07 19:17:55	50736	hamming.scala
37	27	a4ccac4192fd14855b0195e5	superseded	ruby	etl	require 'pry'\n\nclass ETL\n  def self.transform(old)\n    old.each_with_object({}) do |(key, value), transform|\n      value.each do |v| transform[v.downcase] = key\n      end\n    end\n  end\nend	\N	\N	0	1	2013-12-01 15:02:49	2013-12-01 15:02:49	54169	etl.rb
38	27	00e540e96eaebcb2c8a4b829	pending	ruby	etl	class ETL\n  def self.transform(old)\n    old.each_with_object({}) do |(number, letter), transform|\n      letter.each do |l|\n        transform[l.downcase] = number\n      end\n    end\n  end\nend	\N	\N	0	2	2014-01-05 14:27:55	2014-01-05 14:27:55	54169	etl.rb
39	27	ec0af5d2da20d349980898ce	pending	csharp	leap	public static class Year\r\n{\r\n    static private bool IsDivisibleBy(int n, int x)\r\n    {\r\n        return x % n == 0;\r\n    }\r\n\r\n    static public bool IsLeap(int year)\r\n    {\r\n        return IsDivisibleBy(400, year)\r\n            || (IsDivisibleBy(4, year) && !IsDivisibleBy(100, year));\r\n    }\r\n}\r	\N	\N	0	1	2014-02-12 15:29:23	2014-02-12 15:29:23	59887	Year.cs
40	27	808ab76d78c4cd5f3d04aa32	pending	javascript	word-count	function words(s) {\n    var ws = s.split(/\\s+/);\n    var ret = Object.create(null);\n    for (var i = 0; i < ws.length; ++i) {\n        var w = ws[i];\n        ret[w] = typeof ret[w] === 'number' ? ret[w] + 1 : 1;\n    }\n    return ret;\n}\n\nmodule.exports = words;	\N	\N	0	1	2014-04-23 12:11:12	2014-04-23 12:11:12	50512	word-count.js
41	28	58f9bd3390099379753d7871	pending	ruby	phone-number	class PhoneNumber\n  attr_reader :area_code\n\n  def initialize(text)\n    @text = text\n    parse_number\n  end\n\n  def number\n    @number ||= [@area_code, @prefix, @suffix].join('')\n  end\n\n  def to_s\n    @pretty ||= "(#{@area_code}) #{@prefix}-#{@suffix}"\n  end\n\n  private\n\n    def parse_number\n      re = /\\A\\D*1?\\D*(?<area>\\d{3})\\D*(?<pre>\\d{3})\\D*(?<suf>\\d{4})\\D*\\z/\n      results = re.match(@text)\n      if results\n        @area_code  = results[:area]\n        @prefix     = results[:pre]\n        @suffix     = results[:suf]\n      else\n        @area_code  = '000'\n        @prefix     = '000'\n        @suffix     = '0000'\n      end\n    end\nend	\N	\N	0	2	2014-05-02 19:06:26	2014-05-02 19:06:26	42482	phone-number.rb
42	28	94e39c05ea79f18ed44197e6	superseded	ruby	phone-number	class PhoneNumber\n  attr_reader :area_code\n\n  def initialize(text)\n    @text = text\n    parse_number\n  end\n\n  def parse_number\n    re = /\\A\\D*1?\\D*(?<area>\\d{3})\\D*(?<pre>\\d{3})\\D*(?<suf>\\d{4})\\D*\\z/\n    results = re.match(@text)\n    if results\n      @area_code  = results[:area]\n      @prefix     = results[:pre]\n      @suffix     = results[:suf]\n    else\n      @area_code  = '000'\n      @prefix     = '000'\n      @suffix     = '0000'\n    end\n  end\n\n  def number\n    @number ||= [@area_code, @prefix, @suffix].join('')\n  end\n\n  def to_s\n    @pretty ||= "(#{@area_code}) #{@prefix}-#{@suffix}"\n  end\n\nend	\N	\N	0	1	2014-05-07 19:16:02	2014-05-07 19:16:02	42482	phone-number.rb
43	28	df7eaeac451a78c235b4ca23	pending	go	clock	package clock\n\nimport "fmt"\n\ntype Clock struct {\n\tminutes int\n}\n\nfunc New(h int, m int) Clock {\n\treturn Clock{h*60 + m}\n}\n\nfunc (c Clock) String() string {\n\treturn fmt.Sprintf("%02d:%02d", c.minutes/60, c.minutes%60)\n}\n\nfunc (c Clock) Add(minutes int) Clock {\n\tvar newMinutes int = (c.minutes + minutes + 24*60) % (24 * 60)\n\treturn Clock{newMinutes}\n}	\N	\N	0	1	2014-03-10 00:04:59	2014-03-10 00:04:59	59112	clock.go
44	30	108d65c8efccef942b442a21	superseded	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input.to_s\n  end\n  \n  def word_count\n    words.reduce(Hash.new(0)) do |acc,word|\n      acc[word] += 1\n      acc\n    end\n  end\n\n  private\n  def words\n    @input.downcase.scan(%r{\\w+})\n  end\n  \nend	\N	\N	0	1	2014-03-23 16:54:23	2014-03-23 16:54:23	40671	word-count.rb
45	30	b16ad8edac5b497c518d5d71	pending	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input.to_s\n  end\n  \n  def word_count\n    word_summary = Hash.new(0)\n    words.each_with_object(word_summary) { |word, summary| summary[word] += 1 }\n  end\n\n  private\n  def words\n    @input.downcase.scan(%r{\\w+})\n  end\n  \nend	\N	\N	0	2	2014-04-23 07:23:07	2014-04-23 07:23:07	40671	word-count.rb
46	30	0e1e3709db6a809333c48f2f	pending	ruby	scrabble-score	class Scrabble\n\n  def initialize(word)\n    @word = word\n  end\n\n  def score\n    self.class.score(@word)\n  end\n\n  def self.score(word)\n    unless word.nil?\n      score = word.strip.each_char.map {|c| find_letter_score(c) }.reduce(:+)\n    end\n    score ||= 0\n  end\n\n  def self.find_letter_score(character)\n    score_guide = [\n      [%w(a e i o u l n r s t), 1],\n      [%w(d g), 2],\n      [%w(b c m p), 3],\n      [%w(f h v w y), 4],\n      [%w(k), 5],\n      [%w(j x), 8],\n      [%w(q z), 10]\n    ]\n    score_guide.each do |range|\n      if range.first.include? character.downcase\n        @value = range.last\n      end\n    end\n    @value ||= 0\n  end\nend	\N	\N	0	1	2014-05-15 09:03:07	2014-05-15 09:03:07	51936	scrabble.rb
47	30	2b35bbab2b624601576de337	superseded	ruby	grade-school	class School\n\n  attr_reader :db\n\n  def initialize\n    @db = Hash.new([])\n  end\n\n  def add(name, grade)\n    db[grade] += [name]\n  end\n\n  def grade(number)\n    @db[number]\n  end\n\n  def sort\n    sorted_grades.each_with_object({}) do |grade, sorted_db|\n      sorted_db[grade] = sorted_names_for(grade)\n    end\n  end\n\n  private\n\n  def sorted_grades\n    db.keys.sort\n  end\n\n  def sorted_names_for(grade)\n    @db[grade].sort\n  end\nend	\N	\N	0	3	2014-02-28 16:45:29	2014-02-28 16:45:29	41038	grade-school.rb
48	30	3b19855e590bc20596381ea8	pending	ruby	grade-school	class School\n\n  attr_reader :db\n\n  def initialize\n    @db = Hash.new { |h, k| h[k] = [] }\n  end\n\n  def add(name, grade)\n    db[grade] << name\n  end\n\n  def grade(number)\n    db[number]\n  end\n\n  def sort\n    sorted_grades.each_with_object({}) do |grade, sorted_db|\n      sorted_db[grade] = sorted_names_for(grade)\n    end\n  end\n\n  private\n\n  def sorted_grades\n    db.keys.sort\n  end\n\n  def sorted_names_for(grade)\n    db[grade].sort\n  end\nend	\N	\N	0	4	2014-06-05 19:24:34	2014-06-05 19:24:34	41038	grade-school.rb
49	30	fa951873c223db360282080c	superseded	ruby	grade-school	class School\n\n  def initialize\n    @db = {}\n  end\n\n  def add(name, grade)\n    @db[grade] = [] unless @db[grade]\n    @db[grade] << name\n  end\n\n  def db\n    @db\n  end\n\n  def grade(number)\n    @db[number] || []\n  end\n\n  def sort\n    sorted_grades.each_with_object({}) do |grade, sorted_db|\n      sorted_db[grade] = sorted_names_for(grade)\n    end\n  end\n\n  private\n\n  def sorted_grades\n    @db.keys.sort\n  end\n\n  def sorted_names_for(grade)\n    @db[grade].sort\n  end\nend	\N	\N	0	1	2014-06-23 02:12:38	2014-06-23 02:12:38	41038	grade-school.rb
50	30	7ea2d6c80953d1695e56e941	superseded	ruby	grade-school	class School\n\n  attr_reader :db\n\n  def initialize\n    @db = Hash.new([])\n  end\n\n  def add(name, grade)\n    if db[grade].empty?\n      db[grade] = [name]\n    else\n      db[grade] << name\n    end\n  end\n\n  def grade(number)\n    @db[number]\n  end\n\n  def sort\n    sorted_grades.each_with_object({}) do |grade, sorted_db|\n      sorted_db[grade] = sorted_names_for(grade)\n    end\n  end\n\n  private\n\n  def sorted_grades\n    db.keys.sort\n  end\n\n  def sorted_names_for(grade)\n    @db[grade].sort\n  end\nend	\N	\N	0	2	2014-06-26 21:44:07	2014-06-26 21:44:07	41038	grade-school.rb
51	30	2c1c82cefc40c3374016d2dc	pending	haskell	bob	module Bob (responseFor) where\nimport Data.String.Utils(endswith)\nimport Data.Char(toUpper,toLower,isSpace)\n\nisQuestion :: String -> Bool\nisQuestion = endswith "?"\n\nisYelling :: String -> Bool\nisYelling statement = map toUpper statement == statement && map toLower statement /= statement\n\ntrim :: String -> String\ntrim = f . f where f = reverse . dropWhile isSpace\n\nisSilence :: String -> Bool\nisSilence = (null . trim)\n\nresponseFor :: String -> String\nresponseFor statement\n  | isSilence statement  = "Fine. Be that way!"\n  | isYelling statement  = "Woah, chill out!"\n  | isQuestion statement = "Sure."\n  | otherwise            = "Whatever."	\N	\N	0	1	2014-06-30 19:15:17	2014-06-30 19:15:17	56639	bob.hs
52	30	49872dbe46acc46f5d589e5d	superseded	elixir	nucleotide-count	defmodule DNA do\n  @nucleotides [?A, ?C, ?G, ?T]\n\n  @doc """\n  Counts individual nucleotides in a DNA strand.\n\n  ## Examples\n\n  iex> DNA.count('AATAA', ?A)\n  4\n\n  iex> DNA.count('AATAA', ?T)\n  1\n  """\n  @spec count([char], char) :: non_neg_integer\n  def count(strand, nucleotide) do\n    Enum.count strand, fn(x) -> x == nucleotide end\n  end\n\n\n  @doc """\n  Returns a summary of counts by nucleotide.\n\n  ## Examples\n\n  iex> DNA.nucleotide_counts('AATAA')\n  HashDict.new [{?A, 4}, {?T, 1}, {?C, 0}, {?G, 0}]\n  """\n  @spec nucleotide_counts([char]) :: HashDict.t\n  def nucleotide_counts(strand) do\n    HashDict.new [{?A, 0}, {?T, 0}, {?C, 0}, {?G, 0}] |> Enum.map fn {nucl, _} ->\n      {nucl, count(strand, nucl)}\n    end\n  end\nend	\N	\N	0	1	2014-03-15 07:48:47	2014-03-15 07:48:47	55425	dna.exs
53	30	eb3b5e8306328675ab028466	pending	elixir	nucleotide-count	defmodule DNA do\n  @nucleotides [?A, ?C, ?G, ?T]\n\n  @doc """\n  Counts individual nucleotides in a DNA strand.\n\n  ## Examples\n\n  iex> DNA.count('AATAA', ?A)\n  4\n\n  iex> DNA.count('AATAA', ?T)\n  1\n  """\n  @spec count([char], char) :: non_neg_integer\n  def count(strand, nucleotide) do\n    Enum.count strand, &(&1 == nucleotide)\n  end\n\n\n  @doc """\n  Returns a summary of counts by nucleotide.\n\n  ## Examples\n\n  iex> DNA.nucleotide_counts('AATAA')\n  HashDict.new [{?A, 4}, {?T, 1}, {?C, 0}, {?G, 0}]\n  """\n  @spec nucleotide_counts([char]) :: HashDict.t\n  def nucleotide_counts(strand) do\n    HashDict.new @nucleotides, &{&1, count(strand, &1)}\n  end\nend	\N	\N	0	2	2014-04-20 15:58:11	2014-04-20 15:58:11	55425	dna.exs
54	30	dadbb654386b21d56a7ce113	pending	perl5	raindrops	package Raindrops;\n\nuse strict;\nuse warnings;\n\nsub convert {\n    my $input = shift;\n\n    return  map {            $_->[0]%7 ? ($_->[1] || $input) : $_->[1] . "Plong"    }\n            map { [ $_->[0], $_->[0]%5 ? $_->[1]             : $_->[1] . "Plang" ]  }\n            map { [ $_->[0], $_->[0]%3 ? ''                  :           "Pling" ]  } [$input]\n}\n\n1;	\N	\N	0	2	2014-06-06 13:11:32	2014-06-06 13:11:32	57096	Raindrops.pm
55	30	514dee778b96de2033690bb4	superseded	perl5	raindrops	package Raindrops;\n\nuse strict;\nuse warnings;\n\nsub convert {\n    my $input = shift;\n\n    return  map {            $_->[0]%7 ? ($_->[1] || $input) : $_->[1] . "Plong"    }\n            map { [ $_->[0], $_->[0]%5 ? $_->[1]             : $_->[1] . "Plang" ]  }\n\t    map { [ $_->[0], $_->[0]%3 ? ''                  :           "Pling" ]  } [$input]\n}\n\n1;	\N	\N	0	1	2014-06-08 19:19:59	2014-06-08 19:19:59	57096	Raindrops.pm
56	30	6532321709cc046073af69f5	pending	ruby	raindrops	class Raindrops\n  \n  FACTOR_SOUND_HASH = {3 => 'Pling', 5 => 'Plang', 7 => 'Plong'}\n\n  def self.convert(number)\n    factors = find_relevant_factors(number)\n    response = factors.map do |factor|\n      FACTOR_SOUND_HASH[factor]\n    end.compact\n    "#{response.size > 0 ? response.join : number}" \n  end\n\n  private \n\n  def self.find_relevant_factors(number)\n    max = FACTOR_SOUND_HASH.keys.max\n    (1..max).select { |n| (number % n).zero? } \n  end\nend	\N	\N	0	1	2014-03-02 02:59:25	2014-03-02 02:59:25	60472	raindrops.rb
57	30	7b536d2edad34169853f8987	pending	ruby	binary-search-tree	class Bst\n  attr_reader :data, :left, :right\n\n  def initialize(root)\n    @data = root\n  end\n\n  def all\n    lefties = []\n    if left\n      lefties = left.all\n    end\n    righties = []\n    if right\n      righties = right.all\n    end\n    lefties + [@data] + righties\n  end\n\n  def each(&block)\n    all.each{|element| yield(element)}\n  end\n\n  def insert(number)\n    if number > data\n      insert_right(number)\n    else\n      insert_left(number)\n    end\n  end\n\n  def insert_right(number)\n    if right\n      right.insert(number)\n    else\n      @right = Bst.new(number)\n    end\n  end\n\n  def insert_left(number)\n    if left\n      left.insert(number)\n    else\n      @left = Bst.new(number)\n    end\n  end\nend	\N	\N	0	1	2014-03-08 02:57:07	2014-03-08 02:57:07	50709	bst.rb
58	30	752dc219ee8a294e60828bca	pending	python	gigasecond	__author__ = 'angelo'\nfrom datetime import date, timedelta\n\nclass Gigasecond:\n\n    def __init__(self, birth_date):\n        self.date = birth_date + timedelta(seconds=1000000000)	\N	\N	0	1	2014-06-16 22:27:51	2014-06-16 22:27:51	51189	gigasecond.py
59	30	b074a68d7b69c893caa0eab8	pending	javascript	beer-song	###\n  BEER\n###\n\nrequire 'coffee-script'\n\nBeer =\n  noOfBeers: (number, start) ->\n    val = switch number\n      when -1 then '99'\n      when 0  then (if start then 'N' else 'n') + 'o more'\n      else number\n    val + ' bottle' + (if number isnt 1 then 's' else '') + ' of beer'\n\n\n  verse: (number) ->\n    @noOfBeers(number, true) + ' on the wall, ' +\n    @noOfBeers(number) + '.\\n' + @endVerse(number) +\n    @noOfBeers(number-1) + ' on the wall.\\n'\n\n  endVerse: (number) ->\n    return 'Go to the store and buy some more, ' if number is 0\n    return  'Take ' + (if number is 1 then 'it' else 'one') +\n            ' down and pass it around, '\n\n  sing: (end, init) ->\n    song = []\n    init = init or 0\n    end = if (end and end >= init) then end else init\n    for number in [end..init]\n      song.push @verse(number)\n    song.join('\\n')\n\n\n\n\nmodule.exports = Beer	\N	\N	0	1	2014-05-27 14:43:00	2014-05-27 14:43:00	43521	beer-song.js
61	30	c7fb187e81ea189bd7ee9c7b	pending	ruby	anagram	class Anagram\n\tdef initialize(anagram)\n\t\t@anagram = anagram\n\tend\n\n\tdef match(words)\n\t\twords.select do |anagram|\n\t\t\tanagram.split("").sort == @anagram.split("").sort\n\t\tend\n\tend\nend	\N	\N	0	1	2014-04-19 17:27:52	2014-04-19 17:27:52	43047	anagram.rb
62	30	296e4118e337ab318bfe367f	superseded	haskell	rna-transcription	module DNA(toRNA) where\n\ntoRNA dna = map oneToRNA dna\n\noneToRNA 'T' = 'U'\noneToRNA nucleotid = nucleotid	\N	\N	0	1	2014-03-04 14:14:45	2014-03-04 14:14:45	44381	rna-transcription.hs
63	30	7d283de8572504765f5ef332	pending	haskell	rna-transcription	module DNA(toRNA) where\n\ntoRNA dna = map oneToRNA dna\n\noneToRNA 'T' = 'U'\noneToRNA nucleotide = nucleotide	\N	\N	0	2	2014-06-24 02:08:17	2014-06-24 02:08:17	44381	rna-transcription.hs
64	30	5bb68acdf48ebfa53170124c	pending	python	word-count	import re, collections\r\n\r\nclass Phrase(object):\r\n\t"""Class representing phrase to make word count on."""\r\n\tdef __init__(self, phrase):\r\n\t\tself.phrase = phrase\r\n\r\n\tdef word_count(self):\r\n\t\t"""Return dictionary with words statistic of current phrase."""\r\n\t\treturn collections.Counter(re.findall('\\w+', self.phrase.lower()))\r\n\r	\N	\N	0	2	2014-04-27 06:38:06	2014-04-27 06:38:06	38532	word-count.py
65	30	c65e07a7f0e7331276a82ef5	superseded	python	word-count	import re\r\n\r\nclass Phrase(object):\r\n\t"""Class representing phrase to make word count on."""\r\n\tdef __init__(self, phrase):\r\n\t\tself.phrase = phrase\r\n\r\n\tdef word_count(self):\r\n\t\t"""Return dictionary with words statistic of current phrase."""\r\n\t\twordcount = {}\r\n\t\tself.phrase = [word.lower() for word in re.split('\\W+', self.phrase)]\r\n\t\tfor word in self.phrase:\r\n\t\t\tif word:\r\n\t\t\t\ttry:\r\n\t\t\t\t\twordcount[word] += 1\r\n\t\t\t\texcept:\r\n\t\t\t\t\twordcount[word] = 1\r\n\t\treturn wordcount\r\n\r	\N	\N	0	1	2014-05-05 20:03:34	2014-05-05 20:03:34	38532	word-count.py
66	30	e55fb4f0be0c257c5355b860	pending	haskell	atbash-cipher	module Atbash (encode) where\n\nimport Control.Monad (ap, join)\nimport Data.Char (toLower)\nimport Data.List.Split (chunksOf)\nimport Data.Map (Map)\nimport qualified Data.Map.Strict as M\nimport Data.Maybe (mapMaybe)\n\nencode :: String -> String\nencode = unwords . chunksOf 5 . mapMaybe encodeChar\n\nencodeChar :: Char -> Maybe Char\nencodeChar = (`M.lookup` substitutions) . toLower\n\nsubstitutions :: Map Char Char\nsubstitutions = M.fromList $ letters ++ numbers where\n  letters = ap zip reverse ['a'..'z']\n  numbers = join zip ['0'..'9']	\N	\N	0	1	2014-02-27 16:30:19	2014-02-27 16:30:19	48520	Atbash.hs
67	30	59808658c102dc8bf3d47365	superseded	clojure	beer-song	(ns beer (:use [clojure.string :only [join]]))\n\n(defn verse\n  [x]\n  (cond\n    (> x 2) (str x " bottles of beer on the wall, " x " bottles of beer.\\nTake one down and pass it around, " (- x 1) " bottles of beer on the wall.\\n")\n    (= x 2) "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\n    (= x 1) "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n    :else "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"))\n\n(defn sing\n  ([from to] (join "\\n" (map #(verse %) (range from (- to 1) -1))))\n  ([from] (sing from 0)))	\N	\N	0	1	2014-03-10 00:23:46	2014-03-10 00:23:46	50714	beer.clj
68	30	5964bff0dd370a4264474007	pending	clojure	beer-song	(ns beer (:use [clojure.string :only [join]]))\n\n(defn verse\n  [x]\n  (case x\n    0 "No more bottles of beer on the wall, no more bottles of beer.\\nGo to the store and buy some more, 99 bottles of beer on the wall.\\n"\n    1 "1 bottle of beer on the wall, 1 bottle of beer.\\nTake it down and pass it around, no more bottles of beer on the wall.\\n"\n    2 "2 bottles of beer on the wall, 2 bottles of beer.\\nTake one down and pass it around, 1 bottle of beer on the wall.\\n"\n    (str x " bottles of beer on the wall, " x " bottles of beer.\\nTake one down and pass it around, " (- x 1) " bottles of beer on the wall.\\n")))\n\n(defn sing\n  ([from to] (->>\n               (range from (- to 1) -1)\n               (map #(verse %))\n               (join "\\n")))\n  ([from] (sing from 0)))	\N	\N	0	2	2014-05-18 05:23:24	2014-05-18 05:23:24	50714	beer.clj
69	30	76d64d90d168ef12fbcd7770	pending	ruby	secret-handshake	class SecretHandshake\n  def initialize(number)\n    @number = number.to_i\n  end\n\n  def commands\n    list = []\n    list << "wink"            if match?(0b1)\n    list << "double blink"    if match?(0b10)\n    list << "close your eyes" if match?(0b100)\n    list << "jump"            if match?(0b1000)\n    list.reverse!             if match?(0b10000)\n    list\n  end\n\n  private\n\n  def match?(binary)\n    (@number & binary).nonzero?\n  end\nend	\N	\N	0	2	2014-03-15 17:46:10	2014-03-15 17:46:10	45198	secret_handshake.rb
70	30	45bf374aecde709125816c5e	superseded	ruby	secret-handshake	class SecretHandshake\n  def initialize(number)\n    @number = number.to_i\n  end\n\n  def commands\n    out = []\n    out << "wink"            if match?(0b1)\n    out << "double blink"    if match?(0b10)\n    out << "close your eyes" if match?(0b100)\n    out << "jump"            if match?(0b1000)\n    out.reverse!             if match?(0b10000)\n    out\n  end\n\n  private\n\n  def match?(binary)\n    !(@number & binary).zero?\n  end\nend	\N	\N	0	1	2014-05-15 07:54:45	2014-05-15 07:54:45	45198	secret-handshake.rb
71	30	72eaf2f547ef22402e8b19df	pending	javascript	nucleotide-count	DNA = function (dnaAdd){\n\n  this.nucleotideCounts = (function(){\n    var tides = { A : 0, T : 0, C : 0, G : 0 };\n    dnaSplit = dnaAdd.split("")\n    for (var i = 0; i < dnaSplit.length; i++){\n      for(type in tides){\n        if (dnaSplit[i] === type){\n          tides[type] +=1;\n        }\n      }\n    }\n    return tides;\n  })();\n\n\n\n  this.count = function(DNAtype){\n    if (this.nucleotideCounts[DNAtype] === undefined && "ATCGU".indexOf(DNAtype) !== -1){\n      return 0;\n    } else if(this.nucleotideCounts[DNAtype] === undefined && "ATCGU".indexOf(DNAtype) === -1){\n      throw new Error("Invalid Nucleotide");\n    }\n    else {\n      for (type in this.nucleotideCounts){\n        if (type === DNAtype){\n          return this.nucleotideCounts[type];\n        }\n      }\n    };\n  }\n\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// DNA = function(strand){\n//   this.startTides = function(){\n//     var tides = { A: 0, T: 0, C: 0, G: 0}\n//     return tides;\n//   }\n\n//   this.beginDNA = strand\n//   strandBreak = this.beginDNA.split("")\n  // for (var i = 0; i < strandBreak.length; i++){\n  //   for(type in this.nucleotideCounts){\n  //     if (strandBreak[i] === type){\n  //       this.nucleotideCounts[type] +=1;\n  //     }\n  //   }\n  // }\n// };\n\n\n// DNA.prototype.nucleotideCounts = function(string){\n//   if(string===undefined){\n//     console.log(this.startTides)\n//     return this.startTides()\n//   }\n// }();\n\n// DNA.prototype.count = function(DNAtype){\n//   if (this.nucleotideCounts[DNAtype] === undefined){\n//     return 0;\n//   }\n//   for (type in this.nucleotideCounts){\n//     if (type === DNAtype){\n//       return this.nucleotideCounts[type]\n//     }\n//   }\n//   console.log(this.nucleotideCounts)\n// }	\N	\N	0	1	2014-03-18 16:50:14	2014-03-18 16:50:14	55369	nucleoTest.js
72	30	e3a2ecc7581b3a7d4f08334b	pending	javascript	trinary	var Trinary = function(input) {\r\n\tthis.input = input;\r\n};\r\n\r\nTrinary.prototype.toDecimal = function() {\r\n\tif(!this.input.match(/[0-9]+/)) return 0;\r\n\tvar parts = this.input.split(''),\r\n\t\t\tdecimal = 0;\r\n\r\n\tparts.reverse().forEach(function(number, index) {\r\n\t\tdecimal += number * Math.pow(3, index);\r\n\t});\r\n\r\n\treturn decimal;\r\n};\r\n\r\nmodule.exports = Trinary;	\N	\N	0	1	2014-05-05 20:42:40	2014-05-05 20:42:40	50420	trinary.js
73	30	e80e18e5fafff6204e11fbdb	superseded	ruby	proverb	require 'pry'\nclass Proverb\n\n  def initialize(*consequences, qualifier: nil)\n    @consequences = consequences\n    @modifier = qualifier\n  end\n\n  def to_s\n    chorus + last_line \n  end\n\n  private\n\n  attr_reader :consequences\n\n  def chorus\n    lines = []\n    hash_pairs.each do |old_thing, new_thing|\n      lines << "For want of a #{old_thing} the #{new_thing} was lost.\\n" \n    end\n    lines.join\n  end\n\n  def last_line\n    original_thing = [consequences[0]]\n    original_thing.unshift(@modifier) if @modifier\n    "And all for the want of a #{original_thing.join(' ')}."\n  end\n\n  def hash_pairs\n    pairs_consequences = []\n    @consequences.each_cons(2) {|pair| pairs_consequences << pair}\n    pairs_consequences\n  end\nend	\N	\N	0	4	2014-03-04 12:34:23	2014-03-04 12:34:23	45972	proverb.rb
74	30	b1cc5706fcde8dfc5781cbdc	superseded	ruby	proverb	class Proverb\n\n  def initialize(*consequences, qualifier: nil)\n    @consequences = consequences\n    @modifier = qualifier\n  end\n\n  def to_s\n    chorus + last_line \n  end\n\n  private\n  attr_reader :consequences, :modifier\n\n  def chorus\n    consequences.each_cons(2).collect do |old_thing, new_thing|\n      "For want of a #{old_thing} the #{new_thing} was lost.\\n"\n    end.join\n  end\n\n  def last_line\n    "And all for the want of a #{adjective.join(' ')}."\n  end\n\n  def adjective\n    [modifier, consequences.first].compact\n  end\nend	\N	\N	0	7	2014-03-05 18:14:58	2014-03-05 18:14:58	45972	proverb.rb
75	30	31fa5231691cf9f5d9324be8	superseded	ruby	proverb	class Proverb\n  attr_reader :consequences\n\n  def initialize(*consequences)\n    @consequences = consequences\n  end\n\n  def to_s\n    chorus + last_line \n  end\n\n  def chorus\n    lines = []\n    hash_pairs(*consequences).each_pair do |k, v|\n      lines << "For want of a #{k} the #{v} was lost.\\n" \n    end\n    lines.join\n  end\n\n  def last_line\n    if @consequences.last.is_a?(Hash)\n      h = @consequences.pop\n    end\n    if h.nil?\n      "And all for the want of a #{consequences[0]}."\n    else\n      "And all for the want of a #{h[:qualifier]} #{consequences[0]}."\n    end\n  end\n\n  private\n\n  def hash_pairs(*consequences)\n    clean_array = consequences.select{|e| e.is_a?(String)}\n    array = []\n    clean_array.each_cons(2) {|pair| array << pair}\n    Hash[array]\n  end\nend	\N	\N	0	1	2014-04-17 20:58:50	2014-04-17 20:58:50	45972	proverb.rb
76	30	b9e7825f393e4102baf5b17f	superseded	ruby	proverb	class Proverb\n  attr_reader :consequences\n\n  def initialize(*consequences, qualifier: nil)\n    @consequences = consequences\n    @modifier = qualifier\n  end\n\n  def to_s\n    chorus + last_line \n  end\n\n  def chorus\n    lines = []\n    hash_pairs(*consequences).each_pair do |old_thing, new_thing|\n      lines << "For want of a #{old_thing} the #{new_thing} was lost.\\n" \n    end\n    lines.join\n  end\n\n  def last_line\n    if @modifier == nil\n      "And all for the want of a #{consequences[0]}."\n    else\n      "And all for the want of a #{@modifier} #{consequences[0]}."\n    end\n  end\n\n  private\n\n  def hash_pairs(*consequences)\n    clean_array = consequences.select{|e| e.is_a?(String)}\n    array = []\n    clean_array.each_cons(2) {|pair| array << pair}\n    Hash[array]\n  end\nend	\N	\N	0	2	2014-04-28 07:42:29	2014-04-28 07:42:29	45972	proverb.rb
77	30	d1a164b651cebf071c20bbf2	superseded	ruby	proverb	class Proverb\n\n  def initialize(*consequences, qualifier: nil)\n    @consequences = consequences\n    @modifier = qualifier\n    compute_last_line\n  end\n\n  def to_s\n    chorus + last_line \n  end\n\n  private\n\n  def chorus\n    lines = []\n    hash_pairs(*consequences).each_pair do |old_thing, new_thing|\n      lines << "For want of a #{old_thing} the #{new_thing} was lost.\\n" \n    end\n    lines.join\n  end\n\n  attr_reader :last_line\n  attr_reader :consequences\n\n  def compute_last_line\n    last = [consequences[0]]\n    last.unshift(@modifier) if @modifier\n    @last_line = "And all for the want of a #{last.join(' ')}."\n  end\n\n  def hash_pairs(*consequences)\n    clean_array = consequences.select{|e| e.is_a?(String)}\n    array = []\n    clean_array.each_cons(2) {|pair| array << pair}\n    Hash[array]\n  end\nend	\N	\N	0	3	2014-05-05 06:51:37	2014-05-05 06:51:37	45972	proverb.rb
78	30	df7f40b15fe9d6dc757824d1	superseded	ruby	proverb	class Proverb\n\n  def initialize(*consequences, qualifier: nil)\n    @consequences = consequences\n    @modifier = qualifier\n  end\n\n  def to_s\n    chorus + last_line \n  end\n\n  private\n  attr_reader :consequences, :modifier\n\n  def chorus\n    chorus =  consequence_pairs.collect do |old_thing, new_thing|\n      "For want of a #{old_thing} the #{new_thing} was lost.\\n"\n    end\n    chorus.join\n  end\n\n  def last_line\n    original_thing = [modifier, consequences.first].compact\n    "And all for the want of a #{original_thing.join(' ')}."\n  end\n\n  def consequence_pairs\n    consequence_pairs = []\n    consequences.each_cons(2) {|pair| consequence_pairs << pair}\n    consequence_pairs\n  end\nend	\N	\N	0	5	2014-05-08 01:14:51	2014-05-08 01:14:51	45972	proverb.rb
79	30	acffd061d84addaa3ff2ed7c	superseded	ruby	proverb	class Proverb\n\n  def initialize(*consequences, qualifier: nil)\n    @consequences = consequences\n    @modifier = qualifier\n  end\n\n  def to_s\n    chorus + last_line \n  end\n\n  private\n  attr_reader :consequences, :modifier\n\n  def chorus\n    chorus =  consequence_pairs.collect do |old_thing, new_thing|\n      "For want of a #{old_thing} the #{new_thing} was lost.\\n"\n    end\n    chorus.join\n  end\n\n  def last_line\n    original_thing = [modifier, consequences.first].compact\n    "And all for the want of a #{original_thing.join(' ')}."\n  end\n\n  def consequence_pairs\n    consequences.each_cons(2).collect {|pair| pair}\n  end\nend	\N	\N	0	6	2014-05-16 12:10:49	2014-05-16 12:10:49	45972	proverb.rb
80	30	8ffbedcaa05bf20235d03478	pending	ruby	proverb	class Proverb\n\n  def initialize(*consequences, qualifier: nil)\n    @consequences = consequences\n    @qualifier = qualifier\n  end\n\n  def to_s\n    chorus + last_line \n  end\n\n  private\n  attr_reader :consequences, :qualifier\n\n  def chorus\n    consequences.each_cons(2).collect do |old_thing, new_thing|\n      "For want of a #{old_thing} the #{new_thing} was lost.\\n"\n    end.join\n  end\n\n  def last_line\n    "And all for the want of a #{antecedant.join(' ')}."\n  end\n\n  def antecedant\n    [qualifier, consequences.first].compact\n  end\nend	\N	\N	0	8	2014-06-20 20:34:17	2014-06-20 20:34:17	45972	proverb.rb
81	30	7e6c4ae8a723a064015a2445	pending	ruby	space-age	class SpaceAge\n\n  orbital = 31557600\n  planet = {\n    'on_earth' => 1,\n    'on_mercury' => 0.2408467,\n    'on_venus' => 0.61519726,\n    'on_mars' => 1.8808158,\n    'on_jupiter' => 11.862615,\n    'on_saturn' => 29.447498,\n    'on_uranus' => 84.016846,\n    'on_neptune' => 164.79132,\n  }\n\n  def initialize(s)\n    @s = s\n  end\n\n  def seconds\n    @s\n  end\n\n  planet.each do |p, o|\n    define_method(p) { (@s.to_f / ( orbital * o)).round(2) }\n  end\n\nend	\N	\N	0	1	2014-05-16 02:52:25	2014-05-16 02:52:25	40660	space-age.rb
82	30	7fd79ddb1ada2a6d074136e7	pending	ruby	bob	class Bob\n  def hey(message)\n    if nothing?(message)\n      'Fine. Be that way!'\n    elsif shouting?(message)\n      'Woah, chill out!'\n    elsif question?(message)\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\n\nprivate\n\n  def nothing?(message)\n    message.strip.empty?\n  end\n\n  def shouting?(message)\n    all_caps?(message) && contains_letters?(message)\n  end\n\n  def question?(message)\n    message =~ /\\?\\z/\n  end\n\n  def all_caps?(message)\n    message.upcase == message\n  end\n\n  def contains_letters?(message)\n    message =~ /[a-z]/i\n  end\nend	\N	\N	0	1	2014-04-13 16:10:09	2014-04-13 16:10:09	46103	bob.rb
83	30	8098d825006328f63b039bd0	superseded	ruby	point-mutations	class DNA\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(other)\n    difference = 0\n\n    (0).upto(shortest(strand, other).length - 1) do |i|\n      difference += 1 if strand[i] != other[i]\n    end\n\n    difference\n  end\n\n  private\n\n  attr_reader :strand\n\n  def shortest(*strands)\n    strands.min_by(&:length)\n  end\nend	\N	\N	0	1	2014-03-16 18:31:16	2014-03-16 18:31:16	42386	point-mutations.rb
84	30	878c7c61ed0de7c90b968330	pending	ruby	point-mutations	class DNA\n  def initialize(strand)\n    @strand = strand\n  end\n\n  def hamming_distance(other)\n    (0...(shortest(strand, other).length)).count do |i|\n      strand[i] != other[i]\n    end\n  end\n\n  private\n\n  attr_reader :strand\n\n  def shortest(*strands)\n    strands.min_by(&:length)\n  end\nend	\N	\N	0	2	2014-04-05 20:17:46	2014-04-05 20:17:46	42386	point-mutations.rb
85	30	84ab0251789cdf02c146af8e	superseded	python	anagram	#!/usr/bin/env python\n\nclass Anagram:\n    def __init__(self, anagram):\n        self.anagram = anagram.lower()\n\n    def match(self, word_list):\n        anagram_list = []\n        for word in word_list:\n            if sorted(word.lower()) == sorted(self.anagram) and not word.lower() == self.anagram:\n                anagram_list.append(word)\n        return anagram_list	\N	\N	0	1	2014-04-07 03:49:50	2014-04-07 03:49:50	49690	anagram.py
86	30	d5f158e11896fa87c533c4f2	pending	python	anagram	class Anagram(object):\n\n    """An anagram"""\n\n    def __init__(self, anagram):\n        """Create a new anagram from given string."""\n        self.anagram = anagram.lower()\n\n    def match_word(self, word):\n        """Return True if anagram matches the given word."""\n        return (sorted(word.lower()) == sorted(self.anagram) and\n                not word.lower() == self.anagram)\n\n    def match(self, word_list):\n        """Match anagram to given word_list and return list of matches."""\n        matches = []\n        for word in word_list:\n            if self.match_word(word):\n                matches.append(word)\n        return matches	\N	\N	0	2	2014-06-11 00:14:32	2014-06-11 00:14:32	49690	anagram.py
87	30	953f38b55800e4fbba1368bb	superseded	elixir	bob	defmodule Teenager do\n  def is_shouting(say) do\n    String.upcase(say) == say\n  end\n  \n  def has_a_question(say) do\n    String.ends_with? say, "?"\n  end  \n  \n  def says_nothing(say) do\n    String.length(say) == 0\n  end  \n  \n  \n  def hey(say) do\n      cond do\n        says_nothing(say) ->\n          "Fine. Be that way."\n        has_a_question(say) ->\n          "Sure."\n        is_shouting(say) ->\n          "Woah, chill out!"\n        true -> \n          "Whatever."\n      end\n      \n    end\n\n \n\n\nend	\N	\N	0	1	2014-03-23 22:38:27	2014-03-23 22:38:27	39953	bob.exs
88	30	b72e5afcf73a942107add7de	pending	elixir	bob	defmodule ResponseChecker do\n  \n  def shouting?(remark) do\n    String.upcase(remark) == remark\n  end\n  \n  def question?(remark) do\n    String.ends_with? remark, "?"\n  end  \n  \n  def nothing?(remark) do\n    String.strip(remark) == ""\n  end  \n\nend\n\ndefmodule Teenager do\n  \n  def hey(remark) do\n      cond do\n        ResponseChecker.nothing?(remark) ->\n          "Fine. Be that way."\n        ResponseChecker.question?(remark) ->\n          "Sure."\n        ResponseChecker.shouting?(remark) ->\n          "Woah, chill out!"\n        true -> \n          "Whatever."\n      end\n      \n    end\n\nend	\N	\N	0	4	2014-03-27 14:41:23	2014-03-27 14:41:23	39953	bob.exs
89	30	e58b3fde203bde40cdcf1411	superseded	elixir	bob	defmodule ResponseChecker do\n  \n  def shouting?(response_for) do\n    String.upcase(response_for) == response_for\n  end\n  \n  def question?(response_for) do\n    String.ends_with? response_for, "?"\n  end  \n  \n  def nothing?(response_for) do\n    String.length(String.strip(response_for)) == 0\n  end  \n\nend\n\ndefmodule Teenager do\n  \n  def hey(response_for) do\n      cond do\n        ResponseChecker.nothing?(response_for) ->\n          "Fine. Be that way."\n        ResponseChecker.question?(response_for) ->\n          "Sure."\n        ResponseChecker.shouting?(response_for) ->\n          "Woah, chill out!"\n        true -> \n          "Whatever."\n      end\n      \n    end\n\nend	\N	\N	0	3	2014-04-01 07:14:01	2014-04-01 07:14:01	39953	bob.exs
90	30	50b247745cbeb55b42358503	superseded	elixir	bob	defmodule ResponseChecker do\n  \n  def shouting?(say) do\n    String.upcase(say) == say\n  end\n  \n  def question?(say) do\n    String.ends_with? say, "?"\n  end  \n  \n  def nothing?(say) do\n    String.length(String.strip(say)) == 0\n  end  \n\nend\n\ndefmodule Teenager do\n  \n  def hey(say) do\n      cond do\n        ResponseChecker.nothing?(say) ->\n          "Fine. Be that way."\n        ResponseChecker.question?(say) ->\n          "Sure."\n        ResponseChecker.shouting?(say) ->\n          "Woah, chill out!"\n        true -> \n          "Whatever."\n      end\n      \n    end\n\nend	\N	\N	0	2	2014-07-05 07:26:09	2014-07-05 07:26:09	39953	bob.exs
91	30	e4d2451fa48a094757dc1f51	pending	javascript	bob	module.exports = function Bob() {\n  this.hey = function(stimulus) {\n    return dispositionBy(stimulus).response;\n  };\n\n  function isShouting(stimulus) {\n    return stimulus === stimulus.toUpperCase() &&\n      stimulus !== stimulus.toLowerCase();\n  }\n\n  function isQuestion(stimulus) {\n    return stimulus.match(/\\?$/);\n  }\n\n  function isSilence(stimulus) {\n    return stimulus.trim().length === 0;\n  }\n\n  function byDefault() {\n    return true;\n  }\n\n  function VerbalDisposition(isActivatedBy, response) {\n    this.isActivatedBy = isActivatedBy;\n    this.response = response;\n  };\n\n  var dispositions = [\n    new VerbalDisposition(isShouting, "Woah, chill out!"),\n    new VerbalDisposition(isQuestion, "Sure."),\n    new VerbalDisposition(isSilence, "Fine. Be that way!"),\n    new VerbalDisposition(byDefault, "Whatever.")\n  ];\n\n  function dispositionBy(stimulus) {\n    for (var i in dispositions) {\n      if (dispositions[i].isActivatedBy(stimulus)) {\n        return dispositions[i];\n      }\n    }\n  }\n};	\N	\N	0	1	2014-04-17 19:11:06	2014-04-17 19:11:06	48866	bob.js
92	30	14750c6c1b37e2ed3c7910e4	superseded	ruby	leap	class Year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    evenly_divisible_by?(400) ||\n      evenly_divisible_by?(4) && !evenly_divisible_by?(100)\n  end\n\n  private\n\n  def evenly_divisible_by?(num)\n    @year % num == 0\n  end\n\nend	\N	\N	0	1	2014-03-03 06:49:25	2014-03-03 06:49:25	48844	year.rb
93	30	73b8637d8f34e01d2f8fcf29	pending	ruby	leap	class Year\n\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    divisible_by?(400) ||\n      divisible_by?(4) && !divisible_by?(100)\n  end\n\n  private\n\n  def divisible_by?(num)\n    @year % num == 0\n  end\n\nend	\N	\N	0	2	2014-06-23 03:03:06	2014-06-23 03:03:06	48844	year.rb
94	30	25c68a6f48565017dd44cda7	pending	ruby	grains	class Grains\n  def initialize\n    @square_cache = {}\n  end\n\n  def square(squares)\n    get_grains_for_square(squares)\n  end\n\n  def total\n    (1..64).collect do |n|\n      get_grains_for_square(n)\n    end.reduce(:+)\n  end\n\n  private\n  def get_grains_for_square(square)\n    return cache(square) if cached?(square)\n\n    if @square_cache.empty?\n      calculate_grains(square)\n    else\n      cache_index = (square - (square - @square_cache.keys.max))\n\n      calculate_grains(square, cache(cache_index), cache_index)\n    end\n  end\n\n  def calculate_grains(no_of_squares, grains = 1, square = 1)\n    return @square_cache[square] = grains if square == no_of_squares\n\n    calculate_grains(no_of_squares, grains * 2, square + 1)\n  end\n\n  def cache(square)\n    @square_cache[square]\n  end\n\n  def cached?(square)\n    @square_cache.has_key?(square)\n  end\nend	\N	\N	0	1	2014-05-12 05:19:16	2014-05-12 05:19:16	47165	grains.rb
95	30	f866e3895031c334c732cb61	pending	javascript	gigasecond	//Moving on to the next one.\n\nvar Gigasecond = function (year, month, day) {\n  setSeconds(1000000000);\n\n};\n\nGigasecond.prototype.date = function () {\n    // days = +11574\n    // 11574%365 = 259\n    // 259%30.5 =\n  }	\N	\N	0	1	2014-04-10 12:39:55	2014-04-10 12:39:55	55921	gigasecond_test.js
96	32	407087b898cc0c642babe0eb	superseded	haskell	bob	module Bob where\n\n\timport Data.Char\n\n\tsilence  x = null $ dropWhile isSpace x\n\tshouting x = all isUpper $ filter isAlpha x\n\tquestion x = last x == '?'\n\n\tresponseFor conversation\n\t\t| silence  conversation = "Fine. Be that way."\n\t\t| shouting conversation = "Woah, chill out!"\n\t\t| question conversation = "Sure."\n\t\t| otherwise             = "Whatever."	\N	\N	0	1	2014-06-26 15:36:53	2014-06-26 15:36:53	46544	bob.hs
97	32	c0b7c27bc49de18633f70602	pending	haskell	bob	module Bob where\n\n\timport Data.Char\n\n\tisSilence  s = all isSpace s\n\tisShouting s = not $ any isLower s\n\tisQuestion s = last s == '?'\n\n\tresponseFor conversation\n\t\t| isSilence  conversation = "Fine. Be that way."\n\t\t| isShouting conversation = "Woah, chill out!"\n\t\t| isQuestion conversation = "Sure."\n\t\t| otherwise               = "Whatever."	\N	\N	0	2	2014-06-29 15:58:52	2014-06-29 15:58:52	46544	bob.hs
98	37	ae56b749a3a4e243ab5f60f4	pending	ruby	grade-school	require "set"\n\nclass School\n  attr_reader :db, :name\n\n  def initialize(name)\n    @db   = Hash.new{ Array.new }\n    @name = name\n  end\n\n  def grade(number)\n    db[number]\n  end\n\n  def add(name, grade)\n    @db[grade] = (@db[grade] << name)\n  end\n\n  def sort\n    @db.each do |grade, collection|\n      @db[grade] = collection.sort\n    end\n    db\n  end\nend	\N	\N	0	1	2014-06-09 22:32:19	2014-06-09 22:32:19	45789	grade-school.rb
99	39	7a9041cb17d650967c869ef9	pending	ruby	grains	class Grains\n  def square n\n    2**(n-1)\n  end\n\n  def total\n    (1..64).reduce { |total, n| total + square(n) }\n  end\nend	\N	\N	0	1	2014-07-04 00:19:56	2014-07-04 00:19:56	53038	grains.rb
100	43	ad0d03951ed0da7f0e70abcd	pending	javascript	bob	module.exports = function Bob() {\n  this.hey = function(message) {\n    if (message.trim() === "") {\n      return "Fine. Be that way!";\n    } else if (message === message.toUpperCase() && message.replace(/[^a-zA-Z]/g, "") !== "") {\n      return "Woah, chill out!";\n    } else if (message.indexOf("?") === message.length - 1) {\n      return "Sure.";\n    } else {\n      return "Whatever.";\n    }\n  };\n};	\N	\N	0	1	2014-06-27 08:33:31	2014-06-27 08:33:31	57333	bob.js
101	45	7e331f1866d1ad460e736c8d	superseded	ruby	house	class House\r\n\r\n  THIS_IS = "This is "\r\n\r\n\tPHRASES = [\r\n\t\t"the house that Jack built.\\n",\r\n\t\t"the malt that lay in ",\r\n\t\t"the rat that ate ",\r\n    "the cat that killed ",\r\n    "the dog that worried ", \r\n    "the cow with the crumpled horn that tossed ",\r\n    "the maiden all forlorn that milked ",\r\n    "the man all tattered and torn that kissed ",\r\n    "the priest all shaven and shorn that married ",\r\n    "the rooster that crowed in the morn that woke ",\r\n    "the farmer sowing his corn that kept ",\r\n    "the horse and the hound and the horn that belonged to "\r\n\t] \r\n\r\n\tdef verse(verse_num)\r\n    THIS_IS + add_phrases(verse_num)\r\n  end\r\n\r\n\tdef verses(min,max)\r\n    build_verses(verse_range(min,max))\r\n\tend\r\n\r\n  private\r\n  \r\n  def add_phrases(verse_num)\r\n    PHRASES[0..verse_num-1].reverse.join\r\n  end\r\n\r\n  def verse_range(min,max)\r\n    (min..max)\r\n  end\r\n\r\n  def build_verses(verse_range)\r\n    verse_range.each_with_object("") { |verse_num, rhyme|\r\n      rhyme << verse(verse_num)\r\n      add_newline(rhyme)\r\n      }   \r\n  end\r\n\r\n  def add_newline(rhyme)\r\n    rhyme << "\\n"\r\n  end\r\n\r\n\r\nend\r	\N	\N	0	1	2014-06-18 01:56:58	2014-06-18 01:56:58	54163	house.rb
102	45	a4b62dbba0427ca0a55fe302	pending	ruby	house	class House\r\n\r\n  THIS_IS = "This is "\r\n\r\n\tPHRASES = [\r\n\t\t"the house that Jack built.\\n",\r\n\t\t"the malt that lay in ",\r\n\t\t"the rat that ate ",\r\n    "the cat that killed ",\r\n    "the dog that worried ", \r\n    "the cow with the crumpled horn that tossed ",\r\n    "the maiden all forlorn that milked ",\r\n    "the man all tattered and torn that kissed ",\r\n    "the priest all shaven and shorn that married ",\r\n    "the rooster that crowed in the morn that woke ",\r\n    "the farmer sowing his corn that kept ",\r\n    "the horse and the hound and the horn that belonged to "\r\n\t] \r\n\r\n\tdef verse(verse_num)\r\n    THIS_IS + add_phrases(verse_num)\r\n  end\r\n\r\n\tdef verses(min,max)\r\n    build_verses(verse_range(min,max))\r\n\tend\r\n\r\n  private\r\n  \r\n  def add_phrases(verse_num)\r\n    PHRASES.take(verse_num).reverse.join\r\n  end\r\n\r\n  def verse_range(min,max)\r\n    (min..max)\r\n  end\r\n\r\n  def build_verses(verse_range)\r\n    verse_range.each_with_object("") { |verse_num, rhyme|\r\n      rhyme << verse(verse_num) << "\\n"\r\n      }   \r\n  end\r\n\r\nend\r	\N	\N	0	2	2014-06-20 14:26:05	2014-06-20 14:26:05	54163	house.rb
103	45	5e8fb36fbacf349c790e387c	pending	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map toRNAChar where\n    toRNAChar 'T' = 'U'\n    toRNAChar c = c	\N	\N	0	1	2014-07-19 05:33:21	2014-07-19 05:33:21	40178	rna-transcription.hs
104	45	57a4180603b0482c27d468ba	pending	elixir	bank-account	defmodule BankAccount do\n  @moduledoc """\n  A bank account that supports access from multiple processes.\n  """\n\n  defrecordp :order, BankAccount, type: :read, value: nil, caller: nil\n\n  @typedoc """\n  An account handle.\n  """\n  @opaque account :: pid\n\n  @doc """\n  Open the bank. Makes the account available.\n  """\n  @spec open_bank() :: account\n  def open_bank() do\n    Process.spawn(BankAccount, :bank, [0])\n  end\n\n  @doc """\n  Close the bank. Makes the account unavailable.\n  """\n  @spec close_bank(account) :: none\n  def close_bank(account) do\n    send account, order(type: :close)\n  end\n\n  @doc """\n  Get the account's balance.\n  """\n  @spec balance(account) :: integer\n  def balance(account) do\n    send account, order(type: :read, caller: Process.self())\n    receive do\n      n -> n\n    after\n      10 -> :timeout\n    end\n  end\n\n  @doc """\n  Update the account's balance by adding the given amount which may be negative.\n  """\n  @spec update(account, integer) :: any\n  def update(account, amount) do\n    send account, order(type: :update, value: amount)\n    receive do\n      n -> n\n    after\n      10 -> :timeout\n    end\n  end\n\n\n  # Manage the bank account\n  def bank(current_amount) do\n    receive do\n      order(type: :update, value: n) -> bank(max(0, current_amount+n))\n      order(type: :close) -> ()\n      order(type: :read, caller: ppid) ->\n          send ppid, current_amount\n          bank(current_amount)\n    end\n  end\nend	\N	\N	0	2	2014-06-08 02:45:12	2014-06-08 02:45:12	54029	account.exs
116	47	1922a69cf24d6667c7f8f3d6	superseded	ruby	anagram	class Anagram\n  def initialize subject\n    @subject = subject\n  end\n\n  def match candidates\n    candidates.reject { |candidate| duplicate? candidate }\n              .select { |candidate| anagram? candidate }\n  end\n\n  private\n\n  def duplicate? candidate\n    @subject.casecmp(candidate) == 0\n  end\n\n  def anagram? candidate\n    alphabetically_sorted_string(@subject) == alphabetically_sorted_string(candidate)\n  end\n\n  def alphabetically_sorted_string unsorted_string\n    unsorted_string.downcase.chars.sort.join\n  end\nend	\N	\N	0	3	2014-06-17 06:07:09	2014-06-17 06:07:09	42911	anagram.rb
156	6	669fdf00ed6539bb88ad7b8c	pending	clojure	bob	(ns bob)\n\n(defn response-for [input]\n  (let [\n        matches (fn [[_ pattern]] (re-matches pattern input))\n        patterns [\n                  ["Sure." #"[\\w][^A-Z]*\\?"]\n                  ["Fine. Be that way!" #"^\\s*$"]\n                  ["Woah, chill out!" #"[^a-z]+[A-Z\\W]$"]]\n        [[response _] _] (filter matches patterns)]\n    (or response "Whatever.")))	\N	\N	0	5	2014-06-03 16:08:03	2014-06-03 16:08:03	49404	bob.clj
105	45	03c74af51d61f82156de1f5e	superseded	elixir	bank-account	defmodule BankAccount do\n  @moduledoc """\n  A bank account that supports access from multiple processes.\n  """\n\n  defrecord Order, type: :read, value: nil, caller: nil\n\n  @typedoc """\n  An account handle.\n  """\n  @opaque account :: pid\n\n  @doc """\n  Open the bank. Makes the account available.\n  """\n  @spec open_bank() :: account\n  def open_bank() do\n    Process.spawn(BankAccount, :bank, [0])\n  end\n\n  @doc """\n  Close the bank. Makes the account unavailable.\n  """\n  @spec close_bank(account) :: none\n  def close_bank(account) do\n    send account, Order.new(type: :close)\n  end\n\n  @doc """\n  Get the account's balance.\n  """\n  @spec balance(account) :: integer\n  def balance(account) do\n    send account, Order.new(type: :read, caller: Process.self())\n    receive do\n      n -> n\n    after\n      10 -> :timeout\n    end\n  end\n\n  @doc """\n  Update the account's balance by adding the given amount which may be negative.\n  """\n  @spec update(account, integer) :: any\n  def update(account, amount) do\n    send account, Order.new(type: :update, value: amount)\n    receive do\n      n -> n\n    after\n      10 -> :timeout\n    end\n  end\n\n\n  # Manage the bank account\n  def bank(current_amount) do\n    receive do\n      Order[type: :update, value: n] -> bank(max(0, current_amount+n))\n      Order[type: :close] -> ()\n      Order[type: :read, caller: ppid] ->\n          send ppid, current_amount\n          bank(current_amount)\n    end\n  end\nend	\N	\N	0	1	2014-06-15 15:08:37	2014-06-15 15:08:37	54029	account.exs
106	45	347a7163b773e562ae2d85a4	pending	ruby	raindrops	class Raindrops\n  def self.convert(number)\n    prime_factor = SmallPrimeFactor.new(number)\n    response = ''\n    response << 'Pling' if prime_factor.include?(3)\n    response << 'Plang' if prime_factor.include?(5)\n    response << 'Plong' if prime_factor.include?(7)\n    response.empty? ? number.to_s : response\n  end\nend\n\nclass SmallPrimeFactor\n  def initialize(number)\n    @primes = []\n    [3, 5, 7].each do |prime|\n      @primes << prime if number % prime == 0\n    end\n  end\n\n  def include?(number)\n    @primes.include?(number)\n  end\nend	\N	\N	0	1	2014-06-02 11:26:37	2014-06-02 11:26:37	52642	raindrops.rb
107	45	a58e946153dc766a763419c4	pending	javascript	hamming	var hamming = {};\n\nhamming.compute = function( strandOne, strandTwo){\n  var distance = 0;\n  for (var i = 0; i<strandOne.length; i++){\n    if (notEqual(strandOne[i], strandTwo[i])){\n      distance++;\n    }\n  }\n  return distance;\n};\n\nvar notEqual = function(sOne, sTwo){\n  return sTwo && ( sOne != sTwo);\n};\n\nmodule.exports = hamming;	\N	\N	0	1	2014-06-19 02:04:52	2014-06-19 02:04:52	57911	hamming.js
108	45	53f7ac432edc4e6bb2be401b	pending	coffeescript	bob	class Bob\n  hey: (greeting) ->\n    return "Fine. Be that way!" if greeting.match /^\\s*$/\n    return "Woah, chill out!"   unless greeting.match /[a-z]/\n    return "Sure."              if greeting.match /\\?$/\n    return "Whatever."\n\nmodule.exports = Bob	\N	\N	0	1	2014-06-25 11:30:18	2014-06-25 11:30:18	51436	bob.coffee
109	47	6c9649a2d2c0757692b117f9	superseded	elixir	point-mutations	defmodule DNA do\n  @doc """\n  Returns number of differences between two strands of DNA, known as the Hamming Distance.\n\n  ## Examples\n\n\tiex> DNA.hamming_distance('AAGTCATA', 'TAGCGATC')\n\t4\n\t"""\n\t@spec hamming_distance([char], [char]) :: non_neg_integer\n\tdef hamming_distance(strand1, strand2) do\n    calc_dist(strand1, strand2, 0)\n\tend\n\n  defp calc_dist([], _, distance), do: distance\n  defp calc_dist(_, [], distance), do: distance\n\n  defp calc_dist([h1|t1], [h2|t2], distance) do\n    if h1 == h2 do\n      calc_dist(t1, t2, distance)\n    else\n      calc_dist(t1, t2, distance + 1)\n    end\n  end\nend	\N	\N	0	1	2014-05-25 03:07:35	2014-05-25 03:07:35	52037	point_mutations.exs
110	47	a091e324876abbc562c7edbe	superseded	elixir	point-mutations	defmodule DNA do\n  @doc """\n  Returns number of differences between two strands of DNA, known as the Hamming Distance.\n\n  ## Examples\n\n\tiex> DNA.hamming_distance('AAGTCATA', 'TAGCGATC')\n\t4\n\t"""\n\t@spec hamming_distance([char], [char]) :: non_neg_integer\n\tdef hamming_distance(strand1, strand2) do\n    [strand1, strand2]\n    |> List.zip \n    |> Enum.reduce 0, \n        fn({n1, n2}, acc) -> \n          if n1 == n2 do \n            acc \n          else \n            acc + 1 \n          end\n        end\n\tend\nend	\N	\N	0	2	2014-07-02 22:10:27	2014-07-02 22:10:27	52037	point_mutations.exs
111	47	71914daff7541a73cbf93e7c	pending	elixir	point-mutations	defmodule DNA do\n  @doc """\n  Returns number of differences between two strands of DNA, known as the Hamming Distance.\n\n  ## Examples\n\n\tiex> DNA.hamming_distance('AAGTCATA', 'TAGCGATC')\n\t4\n\t"""\n\t@spec hamming_distance([char], [char]) :: non_neg_integer\n\tdef hamming_distance(strand1, strand2) do\n    [strand1, strand2]\n    |> List.zip \n    |> Enum.count fn {n1, n2} -> n1 != n2 end \n\tend\nend	\N	\N	0	3	2014-07-10 13:53:47	2014-07-10 13:53:47	52037	point_mutations.exs
112	47	2fb3f87a8883ab8481feb6d8	pending	ruby	word-count	class Phrase\n\n  WORD_BREAK_CHARACTERS = /[^\\w']/\n\n  def initialize word\n    @words = word.split WORD_BREAK_CHARACTERS\n    @words.delete_if &:empty?\n  end\n\n  def word_count\n    count = Hash.new 0\n    @words.each do |word|\n      count[word.downcase] += 1\n    end\n    count\n  end\n\nend	\N	\N	0	1	2014-05-21 03:13:42	2014-05-21 03:13:42	43662	word-count.rb
113	47	f54fc9a9b4200ea9bb855b1f	pending	ruby	anagram	class Anagram\n  def initialize subject\n    @subject = subject\n  end\n\n  def match candidates\n    candidates.select { |candidate| anagram? candidate }\n  end\n\n  private\n\n  def anagram? candidate\n    !eq?(candidate) && alphagram?(candidate)\n  end\n\n  def eq? candidate\n    @subject.downcase == candidate.downcase\n  end\n\n  def alphagram? candidate\n    sort_ordered(@subject.downcase) == sort_ordered(candidate.downcase)\n  end\n\n  def sort_ordered unsorted\n    unsorted.chars.sort\n  end\nend	\N	\N	0	7	2014-05-25 07:30:25	2014-05-25 07:30:25	42911	anagram.rb
114	47	b134ca2e84a63198ed8ec534	superseded	ruby	anagram	class Anagram\n  def initialize subject\n    @subject = subject\n  end\n\n  def match candidates\n    candidates.select { |candidate| anagram? candidate }\n  end\n\n  private\n\n  def anagram? candidate\n    !duplicate?(candidate) && alphagram?(candidate)\n  end\n\n  def duplicate? candidate\n    @subject.casecmp(candidate) == 0\n  end\n\n  def alphagram? candidate\n    chars_sort_ordered(@subject) == chars_sort_ordered(candidate)\n  end\n\n  def chars_sort_ordered unsorted_string\n    unsorted_string.downcase.chars.sort.join\n  end\nend	\N	\N	0	5	2014-06-03 08:57:28	2014-06-03 08:57:28	42911	anagram.rb
115	47	a288912f3230729bd92d218b	superseded	ruby	anagram	class Anagram\n  def initialize subject\n    @subject = subject\n  end\n\n  def match candidates\n    reject_duplicates(candidates).select { |candidate| anagram? candidate }\n  end\n\n  private\n\n  def reject_duplicates candidates\n    candidates.reject { |candidate| exact_subject_match? candidate }\n  end\n\n  def anagram? candidate\n    alphabetically_sorted_string(@subject) == alphabetically_sorted_string(candidate)\n  end\n\n  def exact_subject_match? candidate\n    @subject.casecmp(candidate) == 0\n  end\n\n  def alphabetically_sorted_string unsorted_string\n    unsorted_string.downcase.chars.sort.join\n  end\nend	\N	\N	0	2	2014-06-05 22:01:53	2014-06-05 22:01:53	42911	anagram.rb
194	19	befc49a6ffc224041ea09de1	superseded	elixir	bob	defmodule Teenager do\n  def question?(s) do\n    String.ends_with? s, "?"\n  end\n\n  def shouting?(s) do\n    String.upcase(s) == s\n  end\n\n  def silence?(s) do\n    String.strip(s) == ""\n  end\n\n  def hey(s) do\n    cond do\n      silence?(s)  -> "Fine. Be that way!"\n      shouting?(s) -> "Woah, chill out!"\n      question?(s) -> "Sure."\n      true -> "Whatever."\n    end\n  end\nend	\N	\N	0	1	2014-07-18 06:02:40	2014-07-18 06:02:40	37951	bob.exs
117	47	82bb30e8116f34a6d2de4735	superseded	ruby	anagram	class Anagram\n  def initialize subject\n    @subject = subject\n  end\n\n  def match candidates\n    candidates.reject { |candidate| duplicate? candidate }\n              .select { |candidate| anagram? candidate }\n  end\n\n  private\n\n  def duplicate? candidate\n    @subject.casecmp(candidate) == 0\n  end\n\n  def anagram? candidate\n    chars_sort_ordered(@subject) == chars_sort_ordered(candidate)\n  end\n\n  def chars_sort_ordered unsorted_string\n    unsorted_string.downcase.chars.sort.join\n  end\nend	\N	\N	0	4	2014-06-24 20:08:16	2014-06-24 20:08:16	42911	anagram.rb
118	47	00247118416895cdbc1f4581	superseded	ruby	anagram	class Anagram\n  def initialize anagramate\n    @anagramate = anagramate\n  end\n\n  def match candidates\n    candidates_without_exact_matches(candidates)\n    .select { |candidate| candidate.downcase.chars.sort == @anagramate.downcase.chars.sort }\n  end\n\n  def candidates_without_exact_matches (candidates)\n    candidates.reject{|candidate| candidate.downcase == @anagramate.downcase }\n  end\nend	\N	\N	0	1	2014-06-27 08:36:42	2014-06-27 08:36:42	42911	anagram.rb
119	47	31dc6a7668fa3e5767618fb5	superseded	ruby	anagram	class Anagram\n  def initialize subject\n    @subject = subject\n  end\n\n  def match candidates\n    candidates.select { |candidate| anagram? candidate }\n  end\n\n  private\n\n  def anagram? candidate\n    !duplicate?(candidate) && alphagram?(candidate)\n  end\n\n  def duplicate? candidate\n    @subject.casecmp(candidate).zero?\n  end\n\n  def alphagram? candidate\n    chars_sort_ordered(@subject) == chars_sort_ordered(candidate)\n  end\n\n  def chars_sort_ordered unsorted_string\n    unsorted_string.downcase.chars.sort.join\n  end\nend	\N	\N	0	6	2014-06-28 11:08:39	2014-06-28 11:08:39	42911	anagram.rb
120	48	e88d468e4ede14f3038dec65	pending	python	anagram	class Anagram:\n\tdef __init__(self, anagram):\n\t\tself.anagram = anagram\n\n\tdef match(self, words):\n\t\tanagrams = []\n\t\tfor word in words:\n\t\t\tif len(self.anagram) != len(word) or word == self.anagram:\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\tanagram_chars = list(self.anagram.lower())\n\t\t\t\tword_chars = list(word.lower())\n\t\t\t\tanagram_chars.sort()\n\t\t\t\tword_chars.sort()\n\t\t\t\tif anagram_chars == word_chars:\n\t\t\t\t\tanagrams.append(word)\n\n\t\treturn anagrams	\N	\N	0	1	2014-05-27 07:02:22	2014-05-27 07:02:22	50074	anagram.py
121	48	978849af6d778abbc7cabca8	superseded	ruby	anagram	class Anagram\n  def initialize(target)\n    @target = target.to_anagram_key\n  end\n\n  def match(words)\n    words.select { |word| word.to_anagram_key == @target }\n  end\nend\n\nclass String\n  def to_anagram_key\n    self.downcase.chars.sort\n  end\nend	\N	\N	0	1	2014-04-02 20:09:43	2014-04-02 20:09:43	40319	anagram.rb
122	48	b195e76d803b76487fd5c0a0	pending	ruby	anagram	class Anagram\n  def initialize(target)\n    @target = to_anagram_key(target)\n  end\n\n  def match(words)\n    words.select { |word| to_anagram_key(word) == @target }\n  end\n\n  private \n\n  def to_anagram_key(word)\n    word.downcase.chars.sort\n  end\nend	\N	\N	0	2	2014-04-30 03:32:58	2014-04-30 03:32:58	40319	anagram.rb
123	48	8615eaedcb160f75338077bc	superseded	clojure	rna-transcription	(ns dna\n  (:require [clojure.string :as str]))\n\n(defn- transcribe-thymidine-to-uracil [dna] (str/replace dna "T" "U"))\n\n(defn to-rna [dna]\n  (transcribe-thymidine-to-uracil dna))	\N	\N	0	1	2014-04-05 18:44:19	2014-04-05 18:44:19	39860	rna-transcription.clj
124	48	5a8b4156a46d23774154943d	pending	clojure	rna-transcription	(ns dna)\n\n(defn- transcribe-thymidine-to-uracil [nucleotide] (if (= nucleotide \\T) \\U nucleotide))\n\n(defn to-rna [dna]\n  (apply str (map transcribe-thymidine-to-uracil dna)))	\N	\N	0	2	2014-04-13 09:27:48	2014-04-13 09:27:48	39860	rna-transcription.clj
125	25	e70881fb3a93dc24c2861811	superseded	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input.to_s\n  end\n  \n  def word_count\n    words.reduce(Hash.new(0)) do |acc,word|\n      acc[word] += 1\n      acc\n    end\n  end\n\n  private\n  def words\n    @input.downcase.scan(%r{\\w+})\n  end\n  \nend	\N	\N	0	1	2014-04-22 18:20:23	2014-04-22 18:20:23	40671	word-count.rb
126	25	1a749119c3830fcc827f2234	pending	ruby	word-count	class Phrase\n  def initialize(input)\n    @input = input.to_s\n  end\n  \n  def word_count\n    word_summary = Hash.new(0)\n    words.each_with_object(word_summary) { |word, summary| summary[word] += 1 }\n  end\n\n  private\n  def words\n    @input.downcase.scan(%r{\\w+})\n  end\n  \nend	\N	\N	0	2	2014-06-24 00:15:02	2014-06-24 00:15:02	40671	word-count.rb
127	6	cdfb31db24c78fb79e04a5fb	pending	ruby	sieve	class Sieve\n  attr_reader :primes, :up_to\n\n  def initialize(to)\n    @up_to = to\n    @primes = [2]\n    execute\n  end\n\n  def execute\n    potential_primes = []\n\n    # even numbers above 2 are not prime, so we avoid them entirely\n    # and skip a loop\n    (3..up_to).step(2) { |n| potential_primes.push(n) }\n\n    until potential_primes.empty?\n      current_prime = potential_primes.shift\n      primes.push(current_prime)\n\n      potential_primes.reject! do |potential_prime|\n        potential_prime % current_prime == 0\n      end\n    end\n  end\nend	\N	\N	0	1	2014-04-21 20:57:05	2014-04-21 20:57:05	59807	sieve.rb
128	6	cae3e8390015086c69b56099	superseded	elixir	grade-school	defmodule School do\n  def add(db, name, grade) do\n    Dict.update(db, grade, [name], fn(names) ->\n      names ++ [name]\n    end)\n  end\n\n  def grade(db, grade) do\n    Dict.get(db, grade, [])\n  end\n\n  def sort(db) do\n    Enum.reduce(db, HashDict.new, fn({grade, names}, acc) ->\n      Dict.put(acc, grade, Enum.sort(names))\n    end)\n  end\nend	\N	\N	0	1	2014-04-19 06:23:57	2014-04-19 06:23:57	44872	grade-school.exs
129	6	f2267df2becb6c1db25e4fe2	pending	elixir	grade-school	defmodule School do\n  def add(db, name, grade) do\n    Dict.update(db, grade, [name], fn(names) ->\n      names ++ [name]\n    end)\n  end\n\n  def grade(db, grade) do\n    Dict.get(db, grade, [])\n  end\n\n  def sort(db) do\n    HashDict.new(db, fn({grade, names}) ->\n      {grade, Enum.sort(names)}\n    end)\n  end\nend	\N	\N	0	2	2014-04-25 00:21:52	2014-04-25 00:21:52	44872	grade-school.exs
130	6	7706c7b3ca57d4de0470a07e	pending	python	nucleotide-count	import collections\n\nclass DNA:\n    def __init__(self, dna):\n        self.counts = { 'A': 0, 'C': 0, 'T': 0, 'G': 0 }\n        self.counts.update(collections.Counter(dna))\n        return\n\n    def count(self, nucleotide):\n        if nucleotide == 'U':\n            return 0\n\n        if nucleotide in self.counts:\n            return self.nucleotide_counts()[nucleotide]\n\n        raise ValueError("{} is not a nucleotide.".format(nucleotide))\n\n    def nucleotide_counts(self):\n        return self.counts\n\n    pass	\N	\N	0	1	2014-02-15 03:58:54	2014-02-15 03:58:54	51458	dna.py
142	6	c6e26725e4de67030b02efed	superseded	javascript	bob	var Bob = function(){\n  'use strict';\n\n  function ignoring(string) {\n    return !string;\n  }\n\n  function questioning(string) {\n    return string.charAt(string.length-1) === "?";\n  }\n\n  function shouting(string) {\n    return string === string.toUpperCase();\n  }\n\n  Bob.prototype.hey = function(string){\n    if(ignoring(string)){\n      return 'Fine, be that way!';\n    }else if(questioning(string)) {\n      return 'Sure.';\n    }else if(shouting(string)) {\n      return 'Woah, chill out!';\n    }else {\n      return 'Whatever.';\n    }\n  };\n\n};\n\nmodule.exports = Bob;	\N	\N	0	5	2014-01-21 11:54:51	2014-01-21 11:54:51	45749	bob.js
143	6	a4fdd5ee164ca2eaddf3ae3b	superseded	javascript	bob	var Bob = function(){\n  this.hey = function(string){\n    if(!string){\n      return 'Fine, be that way!';\n    }else if(string.charAt(string.length-1) == "?") {\n      return 'Sure.';\n    }else if(string == string.toUpperCase()) {\n      return 'Woah, chill out!';\n    }else {\n      return 'Whatever.';\n    }\n  };\n\n};\nmodule.exports = Bob;	\N	\N	0	1	2014-02-23 18:41:48	2014-02-23 18:41:48	45749	bob.js
131	6	a04fccb2fd09e16d5fbb5a6f	pending	ruby	meetup	class Meetup\n  require 'date'\n  define_method("test_method") {|test| "Hello World! #{test}"}\n\n  def initialize(month, year)\n  \t@month = month\n  \t@year = year\n\n\t  @days = %W(monday tuesday wednesday thursday friday saturday sunday)\n\n\t  @teenth_methods = %W(mon tues wednes thurs fri satur sun).map {|day| day+"teenth"}\n\t  @teenth_hash = Hash[ *@teenth_methods.map.each_with_index { |element, index| [element, @days[index]] }.flatten ]\n\n\t  @weeks_to_days = {\n\t  \t'first' \t=> [1, 7], \n\t  \t'second' \t=> [8, 14], \n\t  \t'third' \t=> [15, 21], \n\t  \t'fourth' \t=> [22, 28], \n\t  \t'last' \t\t=> [Date.civil(year, month, -7).day, Date.civil(year, month, -1).day]\n  \t}\n  \t\n  \tgenerate_teenth_methods\n  \tgenerate_week_methods\n  end\n\n  private\n\n  \tdef generate_teenth_methods\n\t  \t@weeks_to_days.keys.each do |week|\n\t  \t\t@days.each do |day|\n\t  \t\t\tgenerate_method("#{week}_#{day}", @weeks_to_days[week][0], @weeks_to_days[week][1], day)\n\t  \t\tend\n\t  \tend\n  \tend\n\n  \tdef generate_week_methods\n\t  \t@teenth_methods.each do |method|\n\t  \t\tgenerate_method(method, 13, 19, @teenth_hash[method])\n\t  \tend\n  \tend\n\n\n\t\tdef generate_method(method_name, start_day, end_day, weekday)\n\t\t\tself.class.send(:define_method, method_name) do\n\t\t\t\tstart_date = \tDate.new(@year, @month, start_day)\n\t\t\t\tend_date = \t\tDate.new(@year, @month, end_day)\n\t\t\t\t(start_date..end_date).select { |date| date.send("#{weekday}?".to_sym) }[0]\n\t\t\tend\n\tend\nend	\N	\N	0	1	2013-12-11 10:39:23	2013-12-11 10:39:23	40621	meetup.rb
132	6	f0a234385173b83cbede22f8	pending	ruby	word-count	class Phrase\n\n  attr_reader :text\n\n  def initialize(text)\n    @text = text\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, counter|\n      counter[word] += 1\n    end\n  end\n\n  private\n\n  def words\n    text.downcase.scan(/\\w+/)\n  end\nend	\N	\N	0	4	2013-12-24 06:54:33	2013-12-24 06:54:33	44573	word-count.rb
133	6	02eb1678fc178a7ab9ddd59d	superseded	ruby	word-count	class Phrase\n\n  attr_reader :words\n\n  def initialize(message)\n    @words = message_to_words(message)\n  end\n\n  def word_count\n    counts = Hash.new(0)\n    words.each { |word| counts[word] += 1 }\n    return counts\n  end\n\n  private\n\n  def message_to_words(message)\n    message.downcase.scan(/\\w+/)\n  end\nend	\N	\N	0	2	2014-01-21 03:28:15	2014-01-21 03:28:15	44573	word-count.rb
134	6	8cc164b2de0ca7c6cbb28e85	superseded	ruby	word-count	class Phrase\n\n  attr_reader :message\n\n  def initialize(message)\n    @message = message\n  end\n\n  def word_count\n    words.each_with_object(Hash.new(0)) do |word, counter|\n      counter[word] += 1\n    end\n  end\n\n  private\n\n  def words\n    message.downcase.scan(/\\w+/)\n  end\nend	\N	\N	0	3	2014-05-11 22:54:53	2014-05-11 22:54:53	44573	word-count.rb
135	6	78bf2fd338794d9efde40d78	superseded	ruby	word-count	class Phrase\n\n  attr_reader :words\n\n  def initialize(message)\n    @words = message.downcase.scan(/\\w+/)\n  end\n\n  def word_count\n    counts = Hash.new(0)\n    words.each do |word|\n      counts[word] += 1\n    end\n    return counts\n  end\nend	\N	\N	0	1	2014-06-14 03:40:29	2014-06-14 03:40:29	44573	word-count.rb
136	6	3270355996515c4f6aaf4eaf	superseded	python	anagram	class Word(str):\n    def same(self, word):\n        return self.lower() == word.lower()\n    \n    def same_chars(self, word):\n        return self.sorted_chars() == word.sorted_chars()\n    \n    def sorted_chars(self):\n        return sorted(list(self.lower()))\n\n\nclass Anagram(Word):\n    def match(self, words):\n        words = map(Word, words)\n        return [ w for w in words if not self.same(w) and self.same_chars(w) ]	\N	\N	0	1	2014-01-23 08:35:33	2014-01-23 08:35:33	43520	anagram.py
137	6	c0c0569a6850666d31138464	pending	python	anagram	from collections import Counter\n\nclass Word(str):\n    def __init__(self, word):\n        super(Word, self).__init__(word)\n        self.chars = Counter(self.lower())\n    \n    def same(self, word):\n        return self.lower() == word.lower()\n    \n    def same_chars(self, word):\n        return self.chars == word.chars\n\n\nclass Anagram(Word):\n    def match(self, words):\n        words = map(Word, words)\n        return [ w for w in words if not self.same(w) and self.same_chars(w) ]	\N	\N	0	2	2014-02-05 14:09:36	2014-02-05 14:09:36	43520	anagram.py
138	6	a7bd873571038c755a48609f	pending	ruby	grade-school	class School\n\n  def initialize\n    @STUDENTS = Hash.new\n  end\n\n  def to_hash\n    create_and_sort_hash\n  end\n\n  def add(name, grade)\n    if grade_exists_in_hash(grade)\n      student_repository[grade] << name\n    else\n      new_student = {grade => [name]}\n      student_repository.merge!(new_student)\n    end\n  end\n\n  def grade(grade)\n    if grade_exists_in_hash(grade)\n      student_repository[grade].sort\n    else\n      []\n    end\n  end\n\n  private\n\n  def create_and_sort_hash\n    student_repository.each { |grade, names| names.sort!}\n    student_repository.each.sort.to_h\n  end\n\n  def grade_exists_in_hash(grade)\n    @STUDENTS.has_key?(grade)\n  end\n\n  def student_repository(*option)\n    @STUDENTS\n  end\n\nend	\N	\N	0	1	2014-02-24 11:19:10	2014-02-24 11:19:10	54841	school.rb
139	6	764582e6065a6a0db03fca1b	pending	javascript	bob	var Bob = function(){\n\n  this.hey = function(phrase){\n    var response;\n\n    if(isScreaming(phrase)) {\n      response = 'Woah, chill out!';\n    } else if(isQuestion(phrase) || isPrattlingOn(phrase))  {\n      response = 'Sure.';\n    } else if(isSilence(phrase))  {\n      response = 'Fine. Be that way!';\n    } else {\n      response = 'Whatever.';\n    }\n    return response;\n\n    //private\n    function isScreaming(phrase) {\n      return isUppercase(phrase) && containsLetters(phrase);\n    }\n\n    function isUppercase(phrase) {\n      return phrase.toUpperCase() === phrase;\n    }\n\n    function containsLetters(phrase) {\n      return phrase.match(/[a-zA-Z]/);\n    }\n\n    function isQuestion(phrase) {\n      return phrase.split('').pop() === '?';\n    }\n\n    function isSilence(phrase) {\n      return phrase.split('').every(function(ch) { return ch === ' ' || '';});\n    }\n\n    function isPrattlingOn(phrase) {\n      var sentenceGaps = phrase.match(/([!|\\.|\\?]\\s+\\w)/g);\n      return sentenceGaps && sentenceGaps.length >=2;\n    }\n\n  };\n\n};\n\nmodule.exports = Bob;	\N	\N	0	6	2013-11-21 01:03:33	2013-11-21 01:03:33	45749	bob.js
140	6	536b30eb12e25741787cf6e9	superseded	javascript	bob	var Bob = function(){\n  'use strict';\n\n  function ignoring(string) {\n    return !string;\n  }\n\n  function questioning(string) {\n    return string.charAt(string.length-1) === "?";\n  }\n\n  function shouting(string) {\n    return string === string.toUpperCase();\n  }\n\n  function hey(string){\n    if(ignoring(string)){\n      return 'Fine, be that way!';\n    }else if(questioning(string)) {\n      return 'Sure.';\n    }else if(shouting(string)) {\n      return 'Woah, chill out!';\n    }else {\n      return 'Whatever.';\n    }\n  }\n\n};\nmodule.exports = Bob;	\N	\N	0	3	2013-11-21 17:00:04	2013-11-21 17:00:04	45749	bob.js
141	6	7576db4d4cc80f0da406fc2b	superseded	javascript	bob	var Bob = function(){\n  function ignoring(string) {\n    return !string;\n  }\n\n  function questioning(string) {\n    return string.charAt(string.length-1) === "?";\n  }\n\n  function shouting(string) {\n    return string === string.toUpperCase();\n  }\n\n  function hey(string){\n    if(ignoring(string)){\n      return 'Fine, be that way!';\n    }else if(questioning(string)) {\n      return 'Sure.';\n    }else if(shouting(string)) {\n      return 'Woah, chill out!';\n    }else {\n      return 'Whatever.';\n    }\n  }\n\n  return {\n    hey: hey\n  };\n\n};\nmodule.exports = Bob;	\N	\N	0	2	2013-12-12 14:00:56	2013-12-12 14:00:56	45749	bob.js
229	13	f976baa8f8858310789bdfde	superseded	ruby	gigasecond	class Gigasecond \n\tattr_accessor :cur_date\n\tdef initialize(date)\n    \t@cur_date = date\n  \tend\n\tdef date\n\t\tDate.parse(Time.at(cur_date.to_time.to_i + (10**9)).to_s)\n\tend\t\nend	\N	\N	0	1	2014-07-01 01:46:14	2014-07-01 01:46:14	58346	gigasecond.rb
144	6	06c4bdc279a4d44d7c0477d6	superseded	javascript	bob	var Bob = function(){\n  'use strict';\n\n  function ignoring(string) {\n    return !string;\n  }\n\n  function questioning(string) {\n    return string.charAt(string.length-1) === "?";\n  }\n\n  function shouting(string) {\n    return string === string.toUpperCase();\n  }\n\n  function hey(string){\n    if(ignoring(string)){\n      return 'Fine, be that way!';\n    }else if(questioning(string)) {\n      return 'Sure.';\n    }else if(shouting(string)) {\n      return 'Woah, chill out!';\n    }else {\n      return 'Whatever.';\n    }\n  }\n\n  return {\n    hey: hey\n  };\n\n};\nmodule.exports = Bob;	\N	\N	0	4	2014-05-16 12:53:25	2014-05-16 12:53:25	45749	bob.js
145	6	0afd9ecd1f46d1e9de91362f	pending	elixir	strain	defmodule Strain do\n\n  @doc """\n  Keep all entries in a collection that return true for a given function.\n\n  Using filter would work, but don't use it.\n  """\n  @spec keep(Enum.t, (any -> as_boolean(term))) :: list\n  def keep(coll, f) do\n    lc x inlist Enum.to_list(coll), f.(x), do: x\n  end\n  \n  @doc """\n  DIscard all entries in a collection that return true for a given function.\n\n  Using reject would work, but don't use it.\n  """\n  @spec discard(Enum.t, (any -> as_boolean(term))) :: list\n  def discard(coll, f) do\n    lc x inlist Enum.to_list(coll), not f.(x), do: x\n  end\n\nend	\N	\N	0	1	2013-12-20 13:39:11	2013-12-20 13:39:11	42677	strain.exs
146	6	a6ca36637d033b43184ccb5c	superseded	ruby	hamming	class Hamming\n  def self.compute(strand1, strand2)\n    strand1, strand2 = truncate_to_same_length(strand1, strand2)\n    distance = 0\n    strand1.chars.each_with_index do |base, nucleotide|\n      distance += 1 if strand2[nucleotide] != base\n    end\n    distance\n  end\n\n  def self.truncate_to_same_length(strand1, strand2)\n    strand1 = strand1.to_str\n    strand2 = strand2.to_str\n    length = [strand1.length, strand2.length].min\n    strand1 = strand1[0...length]\n    strand2 = strand2[0...length]\n    [strand1, strand2]\n  end\nend	\N	\N	0	1	2013-11-09 03:28:38	2013-11-09 03:28:38	52170	hamming.rb
147	6	8bf77d6d13b2940b20b3e9bd	superseded	ruby	hamming	class Hamming\n  def self.compute(strand1, strand2)\n    strand1, strand2 = truncate_to_same_length(strand1, strand2)\n    distance = 0\n    strand1.chars.each_with_index do |base, nucleotide|\n      distance += 1 if base != strand2[nucleotide]\n    end\n    distance\n  end\n\n  def self.truncate_to_same_length(strand1, strand2)\n    strand1 = strand1.to_str\n    strand2 = strand2.to_str\n    length = [strand1.length, strand2.length].min\n    strand1 = strand1[0...length]\n    strand2 = strand2[0...length]\n    [strand1, strand2]\n  end\nend	\N	\N	0	2	2013-11-28 17:45:14	2013-11-28 17:45:14	52170	hamming.rb
148	6	0b045e8f2d19a475017449ed	pending	ruby	hamming	class Hamming\n  def self.compute(first_strand, second_strand)\n    (0...shortest_length(first_strand, second_strand)).count do |base|\n      first_strand[base] != second_strand[base]\n    end\n  end\n\n  private\n\n  def self.shortest_length(first, second)\n    [first.length, second.length].min\n  end\nend	\N	\N	0	3	2014-02-25 05:34:51	2014-02-25 05:34:51	52170	hamming.rb
149	6	b5490f07f468d877514cdbaa	pending	ruby	nucleotide-count	class DNA\n  DNA = %W(A T C G)\n\n  def initialize(input)\n    @input = input.strip.upcase.split('')\n    @dna = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}\n    validate_dna\n  end\n\n  def count(nucleotide)\n    if @input.empty?\n      0\n    elsif !DNA.include?(nucleotide)\n      raise ArgumentError\n    else\n      nucleotide_counter(nucleotide)[nucleotide]\n    end\n  end\n\n  def nucleotide_counts\n    if @input.empty? then @dna else nucleotide_counter end\n  end\n\n  def nucleotide_counter(nucleotide=nil)\n    r = @dna.dup\n    @input.each do |i|\n      if nucleotide.nil?\n        r[i] += 1 if DNA.include?(i)\n      else\n        r[i] += 1 if DNA.include?(i) && i==nucleotide\n      end\n    end\n    r\n  end\n\n  def validate_dna\n    @input.each { |n| raise ArgumentError if !DNA.include?(n) }\n  end\nend	\N	\N	0	2	2014-01-06 07:25:27	2014-01-06 07:25:27	42638	nucleotide-count.rb
150	6	f39b1cf38e8bebacc43cc718	superseded	ruby	nucleotide-count	class DNA\n  def initialize(input)\n    @default_dna = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}\n    @input = input.strip.upcase.split('')\n    raise_error\n  end\n\n  def raise_error\n    @input.each do |n|\n      raise ArgumentError if !@default_dna.has_key?(n) || n=='U'\n    end\n  end\n\n  def count(nucleotide)\n    if @input.empty? || (nucleotide=='U')\n      0\n    elsif !@default_dna.has_key?(nucleotide)\n      raise ArgumentError\n    else\n      nucleotide_times(nucleotide)[nucleotide]\n    end\n  end\n\n  def nucleotide_counts\n    if @input.empty?\n      @default_dna\n    else\n      nucleotide_times\n    end\n  end\n\n  def nucleotide_times(nucleotide = nil)\n    dna_collection = {'A' => 0, 'T' => 0, 'C' => 0, 'G' => 0}\n    @input.each do |n|\n      if n.nil?\n        dna_collection[n] += 1 if dna_collection.has_key?(n)\n      else      \n        dna_collection[n] += 1 if dna_collection.has_key?(n) && n == n\n      end\n    end\n    dna_collection\n  end\n  \nend	\N	\N	0	1	2014-02-17 18:09:50	2014-02-17 18:09:50	42638	nucleotide-count.rb
151	6	1712024c3ba19ee716829936	pending	ruby	hexadecimal	class Hexadecimal\n  attr_reader :string\n\n  def initialize(str)\n    @string = str\n  end\n\n  def to_decimal\n    string.chars.reverse.zip(places).inject(0) do |result, (char, multiplier)|\n      result + CHARACTERS.fetch(char){ return 0 } * multiplier\n    end\n  end\n\n  private\n\n  CHARACTERS = Hash[(('0'..'9').to_a + ('a'..'f').to_a).zip(0..15)]\n\n  def places\n    (0..Float::INFINITY).lazy.map {|x| 16 ** x }\n  end\n\nend	\N	\N	0	1	2013-11-08 14:14:24	2013-11-08 14:14:24	56831	hexadecimal.rb
152	6	ad9527805bb7592ebd9886c1	superseded	clojure	bob	(ns bob)\n\n(defn response-for [input]\n  (cond\n    (re-matches #"[\\w][^A-Z]*\\?" input) "Sure."\n    (re-matches #"^$|\\s+" input) "Fine. Be that way!"\n    (re-matches #"[^a-z]+[A-Z\\W]$" input) "Woah, chill out!"\n    :else "Whatever."))	\N	\N	0	1	2014-01-27 20:08:00	2014-01-27 20:08:00	49404	bob.clj
153	6	6c4c9acca1724027b2f34cc7	superseded	clojure	bob	(ns bob)\n\n(defn response-for [input]\n  (def patterns [\n                 ["Sure." #"[\\w][^A-Z]*\\?"]\n                 ["Fine. Be that way!" #"^\\s*$"]\n                 ["Woah, chill out!" #"[^a-z]+[A-Z\\W]$"]])\n\n  (defn- matches [exp] (re-matches (second exp) input))\n\n  (def response (first (filter matches patterns)))\n\n  (or (first response) "Whatever."))	\N	\N	0	2	2014-04-20 20:17:38	2014-04-20 20:17:38	49404	bob.clj
154	6	e2a393c2a9d2d03b9dfcc3b8	superseded	clojure	bob	(ns bob)\n\n(defn response-for [input]\n  (defn- matches [exp] (re-matches (second exp) input))\n\n  (let [\n        patterns [\n                  ["Sure." #"[\\w][^A-Z]*\\?"]\n                  ["Fine. Be that way!" #"^\\s*$"]\n                  ["Woah, chill out!" #"[^a-z]+[A-Z\\W]$"]]\n\n        response (first (filter matches patterns))]\n\n    (or (first response) "Whatever.")))	\N	\N	0	3	2014-04-23 18:38:19	2014-04-23 18:38:19	49404	bob.clj
155	6	dce8a4b7cd3f99568da12d4d	superseded	clojure	bob	(ns bob)\n\n(defn response-for [input]\n  (let [\n        matches (fn [exp] (re-matches (second exp) input))\n\n        patterns [\n                  ["Sure." #"[\\w][^A-Z]*\\?"]\n                  ["Fine. Be that way!" #"^\\s*$"]\n                  ["Woah, chill out!" #"[^a-z]+[A-Z\\W]$"]]\n\n        response (first (filter matches patterns))]\n\n    (or (first response) "Whatever.")))	\N	\N	0	4	2014-04-29 23:01:45	2014-04-29 23:01:45	49404	bob.clj
195	19	8fa89f792dade75d8b70a8e0	pending	ruby	hamming	module Hamming\n  def self.compute(a_strand, b_strand)\n    a_strand.chars.zip(b_strand.chars).inject(0) do |ham_distance, pair|\n      ham_distance += pair.compact.uniq.length - 1\n    end\n  end\nend	\N	\N	0	1	2014-05-25 08:45:55	2014-05-25 08:45:55	46584	hamming.rb
157	6	4cc538f0cc1c0575d0672a20	pending	ruby	phone-number	class PhoneNumber\n\n  def initialize(number)\n    @number = number\n  end\n\n  def number\n    remove_one\n    if trim.length <= 9\n      '0000000000'\n    elsif trim.length >=11 && @number[0] != 1\n      '0000000000'\n    else\n      trim\n    end\n  end\n\n  def trim\n    @number.tr('^0-9', '')\n  end\n\n  def remove_one\n    if (/\\A[1]/).match(@number) != nil\n      @number = @number[1..-1]\n    end\n  end\n\n  def area_code\n    trim[0..2]\n  end\n\n  def to_s\n    remove_one\n    "(#{@number[0..2]}) #{@number[3..5]}-#{@number[6..9]}"\n  end\nend	\N	\N	0	1	2014-05-18 13:38:15	2014-05-18 13:38:15	56159	phone_number.rb
158	6	d7f12ff304e1da99826d6492	superseded	ruby	binary	class Binary\n  def initialize(number)\n    @number = number.to_s\n  end\n #take the string number /\nend	\N	\N	0	1	2014-01-18 00:59:02	2014-01-18 00:59:02	54254	binary.rb
159	6	7c803c24b3d543f4389bfcd4	pending	ruby	binary	class Binary\n  def initialize(number)\n    @number = number.to_s\n  end\n\n  def to_decimal\n    return 0 if @number.match(/a-z/)\n    reversed_numbers = @number.reverse.chars.map(&:to_i)\n    sum  = 0\n    reversed_numbers.each_with_index do |number, index|\n      sum += number * (2 ** index)\n    end\n    sum\n  end\nend	\N	\N	0	2	2014-03-15 18:51:23	2014-03-15 18:51:23	54254	binary.rb
160	6	db9c59341cd85e6b14923042	pending	clojure	gigasecond	(ns gigasecond\n  (:require [clj-time.core :as c-t]\n            [clj-time.format :as c-f]))\n\n(defn- format [t]\n  (let [{:keys [years months days]} (c-f/instant->map t)]\n    [years months days]))\n\n(defn- to-time [y m d]\n  (c-t/date-time y m d))\n\n(defn- add-gigaseconds [t]\n  (c-t/plus t (c-t/seconds 1e9)))\n\n(defn from\n  "returns the gigasecond date (10**9 sec in the future) from the given date."\n  [y m d]\n  (format (add-gigaseconds (to-time y m d))))	\N	\N	0	1	2013-12-27 09:40:47	2013-12-27 09:40:47	56144	gigasecond.clj
161	22	35a59ec2bc826d4fc4bdd2e9	pending	haskell	meetup	module Meetup\n    ( Weekday(..)\n    , Schedule(..)\n    , meetupDay\n    ) where\n\nimport qualified Data.Time.Calendar as Calendar\nimport Data.Time.Calendar (fromGregorian, gregorianMonthLength, addDays)\nimport Data.Time.Calendar.OrdinalDate (sundayStartWeek)\n\ndata Weekday\n    = Sunday\n    | Monday\n    | Tuesday\n    | Wednesday\n    | Thursday\n    | Friday\n    | Saturday\n    deriving (Enum, Eq, Show)\n\ndata Schedule\n    = First\n    | Second\n    | Third\n    | Fourth\n    | Last\n    | Teenth\n    deriving (Enum, Eq, Show)\n\ntype Year  = Integer\ntype Month = Int\n\nmeetupDay :: Schedule -> Weekday -> Year -> Month -> Calendar.Day\nmeetupDay schedule weekday year month =\n    seekWeekday weekday . fromGregorian year month $\n        case schedule of\n            Last   -> gregorianMonthLength year month - 6\n            Teenth -> 13\n            _      -> 1 + 7 * fromEnum schedule\n\nseekWeekday :: Weekday -> Calendar.Day -> Calendar.Day\nseekWeekday weekday day = addDays (fromIntegral delta) day\n    where\n        delta  = (needed - first) `mod` 7\n        needed = fromEnum weekday\n        first  = snd $ sundayStartWeek day	\N	\N	0	3	2014-07-13 11:42:48	2014-07-13 11:42:48	43029	meetup.hs
162	22	45e17b1a333af33186b9719a	superseded	haskell	meetup	module Meetup\n    ( Weekday(..)\n    , Schedule(..)\n    , meetupDay\n    ) where\n\nimport qualified Data.Time.Calendar as Calendar\nimport Data.Time.Calendar (fromGregorian, fromGregorianValid)\nimport Data.Time.Calendar.OrdinalDate (sundayStartWeek)\nimport Data.Maybe (isJust, fromJust)\n\ndata Weekday\n    = Sunday\n    | Monday\n    | Tuesday\n    | Wednesday\n    | Thursday\n    | Friday\n    | Saturday\n    deriving (Enum, Eq, Show)\n\ndata Schedule\n    = First\n    | Second\n    | Third\n    | Fourth\n    | Last\n    | Teenth\n    deriving (Eq, Show)\n\ntype Year  = Integer\ntype Month = Int\ntype Day   = Int\n\nmeetupDay :: Schedule -> Weekday -> Year -> Month -> Calendar.Day\nmeetupDay schedule weekday year month =\n    fromGregorian year month $ meetupDay' schedule weekday year month\n\nmeetupDay' :: Schedule -> Weekday -> Year -> Month -> Day\nmeetupDay' schedule weekday year month =\n    case schedule of\n        First  -> days !! 0\n        Second -> days !! 1\n        Third  -> days !! 2\n        Fourth -> days !! 3\n        Last   -> last days\n        Teenth -> head $ filter (\\x -> 13 <= x && x <= 19) days\n    where\n        days     = map fst . filter ((== weekday) . snd) $ zip [1..] weekdays\n        weekdays = monthWeekdays year month\n\nmonthWeekdays :: Year -> Month -> [Weekday]\nmonthWeekdays year month =\n    map toWeekday . takeWhileIsJust $ map (fromGregorianValid year month) [1..]\n\ntoWeekday :: Calendar.Day -> Weekday\ntoWeekday = toEnum . snd . sundayStartWeek\n\ntakeWhileIsJust :: [Maybe a] -> [a]\ntakeWhileIsJust = map fromJust . takeWhile isJust	\N	\N	0	1	2014-07-17 03:12:42	2014-07-17 03:12:42	43029	meetup.hs
163	22	0227d8024721d7bb8ad9da86	superseded	haskell	meetup	module Meetup\n    ( Weekday(..)\n    , Schedule(..)\n    , meetupDay\n    ) where\n\nimport qualified Data.Time.Calendar as Calendar\nimport Data.Time.Calendar (fromGregorian, gregorianMonthLength, addDays)\nimport Data.Time.Calendar.OrdinalDate (sundayStartWeek)\n\ndata Weekday\n    = Sunday\n    | Monday\n    | Tuesday\n    | Wednesday\n    | Thursday\n    | Friday\n    | Saturday\n    deriving (Enum, Eq, Show)\n\ndata Schedule\n    = First\n    | Second\n    | Third\n    | Fourth\n    | Last\n    | Teenth\n    deriving (Enum, Eq, Show)\n\ntype Year  = Integer\ntype Month = Int\n\nmeetupDay :: Schedule -> Weekday -> Year -> Month -> Calendar.Day\nmeetupDay schedule weekday year month = seekWeekdayFrom $\n    case schedule of\n        Last   -> gregorianMonthLength year month - 6\n        Teenth -> 13\n        _      -> 1 + 7 * fromEnum schedule\n    where\n        seekWeekdayFrom = seekWeekday weekday . fromGregorian year month\n\nseekWeekday :: Weekday -> Calendar.Day -> Calendar.Day\nseekWeekday weekday day = addDays (fromIntegral delta) day\n    where\n        delta  = (needed - first) `mod` 7\n        needed = fromEnum weekday\n        first  = snd $ sundayStartWeek day	\N	\N	0	2	2014-07-17 09:31:53	2014-07-17 09:31:53	43029	meetup.hs
164	22	4061df84629f2e02cb37885f	superseded	clojure	nucleotide-count	(ns dna)\n\n;; this seems to have been done mostly backwards\n\n(def known-nucleotides\n  "Seems like there should be an H."\n  #{\\C \\A \\U \\G \\T})\n\n(def known-dna-nucleotides\n  "There's no U in DNA"\n  (disj known-nucleotides \\U))\n\n(defn- enforce-natural-law!\n  "There can be no exceptions to nature."\n  [encounter]\n  (if-not (known-nucleotides encounter)\n    (throw (Exception. "invalid nucleotide"))))\n\n(defn- map-to-hashmap\n  "Open to suggestions for better way to do this.\n   Maybe even something in core library?"\n  [fn seq]\n  (apply hash-map\n         (interleave seq (map fn seq))))\n\n(defn count\n  "Count occurences of certain *NUCLEOTIDE* in sequence.\n   -- SAFETY WARNING: RUN WITH VALID NUCLEOTIDES ONLY --"\n  [needle haystack]\n  (enforce-natural-law! needle)\n  ;; nice try with name conflict, API-rchitect\n  (->> haystack (filter #{needle}) clojure.core/count))\n\n(defn nucleotide-counts [dna]\n  "Count the frequencies of the known nucleotides"\n  (map-to-hashmap  #(count % dna)\n                   known-dna-nucleotides))	\N	\N	0	2	2014-07-07 21:28:40	2014-07-07 21:28:40	52677	dna.clj
196	19	8b920d4ed7959e2157838871	pending	ruby	sum-of-multiples	class SumOfMultiples\n  attr_accessor :multiples\n\n  def initialize *multiples\n    self.multiples = multiples\n  end\n\n  def to limit\n    return 0 if limit < multiples.min\n    (1...limit).select do |num|\n      multiples.any? { |mult| num % mult == 0 }\n    end.inject(:+)\n  end\n\n  def self.to limit\n    new(3,5).to limit\n  end\nend	\N	\N	0	1	2014-06-10 10:40:57	2014-06-10 10:40:57	59737	sum.rb
197	19	fa3ea78d588e863314679874	superseded	ruby	leap	class Leap\r\nend	\N	\N	0	1	2014-04-26 17:25:38	2014-04-26 17:25:38	47095	leap.rb
165	22	8f848ce6ddf7e2a5f86df63a	pending	clojure	nucleotide-count	(ns dna)\n\n(def known-nucleotides\n  "So this is what we're made of."\n  #{\\C \\A \\T \\G \\U \\T})\n\n(def known-dna-nucleotides\n  "There's no U in DNA"\n  (disj known-nucleotides \\U))\n\n(defn- enforce-natural-law!\n  "There can be no exceptions to nature."\n  [encounter]\n  (if-not (known-nucleotides encounter)\n    (throw (Exception. "invalid nucleotide"))))\n\n(defn- map-to-hashmap\n  "attention ->>>\n   Open to suggestions for better way to do this.\n   Maybe even something in core library?\n   <<<- attention"\n  [fn seq]\n  (apply hash-map\n         (interleave seq (map fn seq))))\n\n(defn count\n  "Count occurences of certain *NUCLEOTIDE* in sequence.\n   -- SAFETY WARNING: RUN WITH VALID NUCLEOTIDES ONLY --"\n  [needle haystack]\n  (enforce-natural-law! needle)\n  ;; nice try with name conflict, API-rchitect\n  (->> haystack (filter #{needle}) clojure.core/count))\n\n(defn nucleotide-counts [dna]\n  "Count the frequencies of the known nucleotides"\n  (map-to-hashmap  #(count % dna)\n                   known-dna-nucleotides))	\N	\N	0	4	2014-07-10 15:54:59	2014-07-10 15:54:59	52677	dna.clj
166	22	f077fa1bea0990ec53170576	superseded	clojure	nucleotide-count	(ns dna)\n\n;; this seems to have been done mostly backwards\n\n(def known-nucleotides\n  "Science == Fact."\n  #{\\A \\T \\C \\G \\U})\n\n(def empty-response\n  "The glass is completely empty"\n  (dissoc (apply hash-map\n                 (interleave known-nucleotides\n                             (repeat 0)))\n          \\U))\n\n(defn- assert-nucleotide\n  "Stem the tide of non-nukes"\n  [something-o-tide]\n  (or (known-nucleotides something-o-tide)\n      ))\n\n(defn- splice-safely\n  "Pull apart a strand of DNA, reporting if any laws of\n   chemistry are broken in the process"\n  [sequence]\n  (map assert-nucleotide sequence))\n\n(defn nucleotide-counts [dna]\n  "Count the frequencies of the known nucleotides"\n  (->> dna\n       splice-safely\n       frequencies\n       (merge empty-response)))\n\n(defn count\n  [needle haystack]\n  (if-not (known-nucleotides needle)\n    (throw (Exception. "invalid nucleotide")))\n  (->> haystack\n       splice-safely\n       (filter #{needle})\n       ;; nice try\n       clojure.core/count))	\N	\N	0	1	2014-07-16 12:35:39	2014-07-16 12:35:39	52677	dna.clj
167	22	5fb7b5676fdb5066994406da	superseded	clojure	nucleotide-count	(ns dna)\n\n(def known-nucleotides\n  "Seems like there should be an H."\n  #{\\C \\A \\U \\G \\T})\n\n(def known-dna-nucleotides\n  "There's no U in DNA"\n  (disj known-nucleotides \\U))\n\n(defn- enforce-natural-law!\n  "There can be no exceptions to nature."\n  [encounter]\n  (if-not (known-nucleotides encounter)\n    (throw (Exception. "invalid nucleotide"))))\n\n(defn- map-to-hashmap\n  "attention ->>>\n   Open to suggestions for better way to do this.\n   Maybe even something in core library?\n   <<<- attention"\n  [fn seq]\n  (apply hash-map\n         (interleave seq (map fn seq))))\n\n(defn count\n  "Count occurences of certain *NUCLEOTIDE* in sequence.\n   -- SAFETY WARNING: RUN WITH VALID NUCLEOTIDES ONLY --"\n  [needle haystack]\n  (enforce-natural-law! needle)\n  ;; nice try with name conflict, API-rchitect\n  (->> haystack (filter #{needle}) clojure.core/count))\n\n(defn nucleotide-counts [dna]\n  "Count the frequencies of the known nucleotides"\n  (map-to-hashmap  #(count % dna)\n                   known-dna-nucleotides))	\N	\N	0	3	2014-07-16 17:28:37	2014-07-16 17:28:37	52677	dna.clj
168	22	45cfc22688abff4ca1dd4f9b	pending	python	twelve-days	LINES = """\nOn the first day of Christmas my true love gave to me, a Partridge in a Pear Tree.\nOn the second day of Christmas my true love gave to me, two Turtle Doves, and a Partridge in a Pear Tree.\nOn the third day of Christmas my true love gave to me, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\nOn the fourth day of Christmas my true love gave to me, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\nOn the fifth day of Christmas my true love gave to me, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\nOn the sixth day of Christmas my true love gave to me, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\nOn the seventh day of Christmas my true love gave to me, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\nOn the eighth day of Christmas my true love gave to me, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\nOn the ninth day of Christmas my true love gave to me, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\nOn the tenth day of Christmas my true love gave to me, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\nOn the eleventh day of Christmas my true love gave to me, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\nOn the twelfth day of Christmas my true love gave to me, twelve Drummers Drumming, eleven Pipers Piping, ten Lords-a-Leaping, nine Ladies Dancing, eight Maids-a-Milking, seven Swans-a-Swimming, six Geese-a-Laying, five Gold Rings, four Calling Birds, three French Hens, two Turtle Doves, and a Partridge in a Pear Tree.\n""".splitlines()\n\ndef sing():\n    return verses(1,12)\n\ndef verse(n):\n    return '{}\\n'.format(LINES[n])\n\ndef verses(start, end):\n    return '{}\\n'.format('\\n'.join([verse(i) for i in xrange(start, end+1)]))	\N	\N	0	1	2014-07-10 07:05:54	2014-07-10 07:05:54	54445	twelve_days.py
169	22	c48b9cb4d677a8029c41524d	pending	clojure	rna-transcription	(ns dna)\n\n(def translation\n      {\\A \\U\n       \\T \\A\n       \\C \\G\n       \\G \\C})\n\n(defn- validate [seq]\n  (assert (not (re-find #"[^ATCG]" seq)))\n  seq)\n\n(defn to-rna [seq]\n  (->> seq\n       validate\n       (map translation)\n       (apply str)))	\N	\N	0	2	2014-07-10 14:49:04	2014-07-10 14:49:04	53833	dna.clj
170	22	cfcb5d9e83ba4a90d013aa94	superseded	clojure	rna-transcription	(ns dna\n  (:require [clojure.string :as s]))\n\n(def translation\n      {\\A "U"\n       \\T "A"\n       \\C "G"\n       \\G "C"})\n\n(defn- dna->rna [base]\n  (assert (contains? translation base))\n  (get translation base))\n\n(defn to-rna [seq]\n  (apply str (map dna->rna seq)))	\N	\N	0	1	2014-07-19 22:46:18	2014-07-19 22:46:18	53833	dna.clj
171	22	5ffc02dbfa2aa7ded7af2966	superseded	haskell	word-count	module WordCount (\r\n  wordCount\r\n)  where\r\n\r\nimport qualified Data.Map as M\r\nimport           Data.Char\r\n\r\n\r\nwordCount :: String -> M.Map String Int\r\nwordCount s = foldr ((\\x -> M.insertWith (+) x 1) . map toLower . filter isAlphaNum) \r\n                    M.empty $ \r\n                    words $ replace s\r\n\r\nreplaceSymbolWithSpace :: Char -> Char\r\nreplaceSymbolWithSpace c\r\n  | isAlphaNum c = c\r\n  | otherwise    = ' '\r\n\r\nreplace :: String -> String\r\nreplace = map replaceSymbolWithSpace\r	\N	\N	0	1	2014-07-07 21:29:27	2014-07-07 21:29:27	49637	WordCount.hs
172	22	865ad8ab543a853af2a1218b	superseded	haskell	word-count	module WordCount (\r\n  wordCount\r\n)  where\r\n\r\nimport qualified Data.Map as M\r\nimport           Data.Char\r\nimport           Data.List.Split (wordsBy)\r\n\r\n\r\nwordCount :: String -> M.Map String Int\r\nwordCount s = foldr ((\\x -> M.insertWith (+) x 1) . map toLower . filter isAlphaNum) \r\n                    M.empty $ \r\n                    wordsBy (not . isAlphaNum ) s\r\n\r	\N	\N	0	2	2014-07-15 19:10:51	2014-07-15 19:10:51	49637	WordCount.hs
173	22	d0a0ebf4b565089512f1f18e	pending	haskell	word-count	module WordCount (\r\n  wordCount\r\n)  where\r\n\r\nimport qualified Data.Map.Strict as M\r\nimport           Data.Char\r\nimport           Data.List.Split (wordsBy)\r\n\r\n\r\nwordCount :: String -> M.Map String Int\r\nwordCount s = foldr ((\\x -> M.insertWith (+) x 1) . map toLower . filter isAlphaNum) \r\n                    M.empty $ \r\n                    wordsBy (not . isAlphaNum ) s\r\n\r	\N	\N	0	3	2014-07-20 13:34:02	2014-07-20 13:34:02	49637	WordCount.hs
174	22	19c9c35c4488ae9dbbc2f4ee	pending	go	hamming	package hamming\r\n\r\nfunc Distance(s1 string, s2 string) int {\r\n\tif len(s1) > len(s2) {\r\n\t\treturn Distance(s2, s1)\r\n\t}\r\n\r\n\tvar d int\r\n\tfor i := range s1 {\r\n\t\tif s1[i] != s2[i] {\r\n\t\t\td++\r\n\t\t}\r\n\t}\r\n\r\n\treturn d\r\n}\r	\N	\N	0	1	2014-07-15 10:36:48	2014-07-15 10:36:48	47415	hamming.go
181	16	24ebc54bd9e6ac570cb980de	superseded	ruby	bob	class Bob\n\n  def hey(message)\n    answer(MessageType.new(message))\n  end\n\n  private\n\n    def answer(message_type)\n      case \n      when message_type.silent?\n        answer_silence \n      when message_type.yell?\n        answer_yell\n      when message_type.question? \n        answer_question\n      else\n        default_answer\n      end\n    end\n\n    def answer_question\n      "Sure."\n    end\n\n    def answer_silence\n      "Fine. Be that way."\n    end\n\n    def answer_yell\n      "Woah, chill out!"\n    end\n\n    def default_answer\n      "Whatever." \n    end\n\nend\n\nclass MessageType\n  \n  attr_reader :message\n  def initialize(message)\n    @message = message.to_s\n  end  \n\n  def silent?\n    message.strip.empty?\n  end\n\n  def question?\n    message.end_with?("?")\n  end\n\n  def yell?\n    message.upcase == message\n  end\n\nend	\N	\N	0	6	2014-06-12 08:09:40	2014-06-12 08:09:40	44481	bob.rb
175	22	4ed882e644b0d035be907ccc	superseded	python	nucleotide-count	"""A DNA strand."""\n\nfrom collections import Counter\n\n\nNUCLEOTIDES = ('A', 'C', 'G', 'T', 'U')\n\n\nclass DNA(str):\n    """A DNA strand.\n\n    A DNA strand is a sequence of nucleotides: adenine (A), cytosine (C),\n    guanine (G) and thymidine (T).\n    """\n\n    NUCLEOTIDES = ('A', 'C', 'G', 'T')\n\n    def __init__(self, nucleotides):\n        nucleotides = nucleotides.upper()\n        for nucleotide in nucleotides:\n            if nucleotide not in DNA.NUCLEOTIDES:\n                raise ValueError(\n                    "{} is not a nucleotide for DNA.".format(nucleotide))\n        super(DNA, self).__init__(nucleotides)\n        self.__counter = None\n\n    def __contains__(self, nucleotides):\n        nucleotides = nucleotides.upper()\n        return super(DNA, self).__contains__(nucleotides)\n\n    def __repr__(self):\n        return "dna.DNA('{}')>".format(self)\n\n    def nucleotide_counts(self):\n        """Return a nucleotide frequency dictionary."""\n        if self.__counter is None:\n            self.__counter = Counter({'A': 0, 'C': 0, 'G': 0, 'T': 0})\n            self.__counter.update(self)\n        return self.__counter\n\n    def count(self, nucleotide):\n        """Return the frequency."""\n        nucleotide = nucleotide.upper()\n        if nucleotide not in NUCLEOTIDES:\n            raise ValueError("{} is not a nucleotide.".format(nucleotide))\n        return self.nucleotide_counts()[nucleotide]	\N	\N	0	1	2014-07-11 01:29:46	2014-07-11 01:29:46	50917	dna.py
176	22	008c3a5fad86acdf86f09290	superseded	python	nucleotide-count	"""A DNA strand."""\n\nfrom collections import Counter\n\n\nNUCLEOTIDES = ('A', 'C', 'G', 'T', 'U')\n\n\nclass DNA(str):\n    """A DNA strand.\n\n    A DNA strand is a sequence of nucleotides: adenine (A), cytosine (C),\n    guanine (G) and thymidine (T).\n    """\n\n    NUCLEOTIDES = ('A', 'C', 'G', 'T')\n\n    def __init__(self, nucleotides):\n        nucleotides = nucleotides.upper()\n        for nucleotide in nucleotides:\n            if nucleotide not in DNA.NUCLEOTIDES:\n                raise ValueError(\n                    "{} is not a nucleotide for DNA.".format(nucleotide))\n        super(DNA, self).__init__(nucleotides)\n        self.__counter = None\n\n    def __contains__(self, nucleotides):\n        nucleotides = nucleotides.upper()\n        return super(DNA, self).__contains__(nucleotides)\n\n    def __repr__(self):\n        return "{!s}({!r})".format(self.__class__.__name__, self)\n\n    def nucleotide_counts(self):\n        """Return a nucleotide frequency dictionary."""\n        if self.__counter is None:\n            self.__counter = Counter({'A': 0, 'C': 0, 'G': 0, 'T': 0})\n            self.__counter.update(self)\n        return self.__counter\n\n    def count(self, nucleotide):\n        """Return the frequency."""\n        nucleotide = nucleotide.upper()\n        if nucleotide not in NUCLEOTIDES:\n            raise ValueError("{} is not a nucleotide.".format(nucleotide))\n        return self.nucleotide_counts()[nucleotide]	\N	\N	0	2	2014-07-12 09:21:16	2014-07-12 09:21:16	50917	dna.py
177	22	731c6d6e280164fdfac9b5f2	superseded	python	nucleotide-count	"""A DNA strand."""\n\nfrom collections import Counter\n\n\nNUCLEOTIDES = ('A', 'C', 'G', 'T', 'U')\n\n\nclass DNA(str):\n    """A DNA strand.\n\n    A DNA strand is a sequence of nucleotides: adenine (A), cytosine (C),\n    guanine (G) and thymidine (T).\n    """\n\n    NUCLEOTIDES = ('A', 'C', 'G', 'T')\n\n    def __init__(self, nucleotides):\n        nucleotides = nucleotides.upper()\n        for nucleotide in nucleotides:\n            if nucleotide not in DNA.NUCLEOTIDES:\n                raise ValueError(\n                    "{} is not a nucleotide for DNA.".format(nucleotide))\n        super(DNA, self).__init__(nucleotides)\n        self._counter = None\n\n    def __contains__(self, nucleotides):\n        nucleotides = nucleotides.upper()\n        return super(DNA, self).__contains__(nucleotides)\n\n    def __repr__(self):\n        return "{!s}({!r})".format(self.__class__.__name__, self)\n\n    def nucleotide_counts(self):\n        """Return a nucleotide frequency dictionary."""\n        if self._counter is None:\n            self._counter = Counter({'A': 0, 'C': 0, 'G': 0, 'T': 0})\n            self._counter.update(self)\n        return self._counter\n\n    def count(self, nucleotide):\n        """Return the frequency."""\n        nucleotide = nucleotide.upper()\n        if nucleotide not in NUCLEOTIDES:\n            raise ValueError("{} is not a nucleotide.".format(nucleotide))\n        return self.nucleotide_counts()[nucleotide]	\N	\N	0	3	2014-07-20 17:20:04	2014-07-20 17:20:04	50917	dna.py
178	22	a223a53b01e5d54aefde9dd5	pending	python	nucleotide-count	"""A DNA strand."""\n\nfrom collections import Counter\n\n\nNUCLEOTIDES = ('A', 'C', 'G', 'T', 'U')\n\n\nclass DNA(str):\n    """A DNA strand.\n\n    A DNA strand is a sequence of nucleotides: adenine (A), cytosine (C),\n    guanine (G) and thymidine (T).\n    """\n\n    NUCLEOTIDES = ('A', 'C', 'G', 'T')\n\n    def __init__(self, nucleotides):\n        nucleotides = nucleotides.upper()\n        for nucleotide in nucleotides:\n            if nucleotide not in DNA.NUCLEOTIDES:\n                raise ValueError(\n                    "{} is not a nucleotide for DNA.".format(nucleotide))\n        super(DNA, self).__init__(nucleotides)\n        self._counter = None\n\n    def __contains__(self, nucleotides):\n        nucleotides = nucleotides.upper()\n        return super(DNA, self).__contains__(nucleotides)\n\n    def __repr__(self):\n        return "{!s}({!r})".format(self.__class__.__name__, str(self))\n\n    def nucleotide_counts(self):\n        """Return a nucleotide frequency dictionary."""\n        if self._counter is None:\n            self._counter = Counter({'A': 0, 'C': 0, 'G': 0, 'T': 0})\n            self._counter.update(self)\n        return self._counter\n\n    def count(self, nucleotide):\n        """Return the frequency."""\n        nucleotide = nucleotide.upper()\n        if nucleotide not in NUCLEOTIDES:\n            raise ValueError("{} is not a nucleotide.".format(nucleotide))\n        return self.nucleotide_counts()[nucleotide]	\N	\N	0	4	2014-07-24 01:03:26	2014-07-24 01:03:26	50917	dna.py
179	16	e78de3cf139fe6b9098ac110	pending	python	bob	class Bob:\r\n    def hey(self, statement):\r\n        if statement.strip() == '':\r\n            return 'Fine. Be that way!'\r\n        if statement.isupper():\r\n            return 'Woah, chill out!'\r\n        if statement.strip()[-1] == '?':\r\n            return 'Sure.'\r\n        return 'Whatever.'\r\n\r	\N	\N	0	1	2014-07-03 14:54:55	2014-07-03 14:54:55	50514	bob.py
180	16	9fe3e822dce72aa08c609ec8	superseded	ruby	bob	class Bob\n\n  def hey(message)\n    interpret_message(message)\n  end\n\n  private\n\n    def interpret_message(message)\n      MessagesInterpreter.new(message).give_answer\n    end\n\nend\n\nclass MessagesInterpreter\n\n  attr_reader :message\n  def initialize(message)\n    @message = message\n  end\n\n  def give_answer\n    message_types.find { |type| type.new(message).can_answer? }.answer\n  end\n\n  private\n\n    def message_types\n      [Nothing, Yell, Question, Other]\n    end\n\n\nend\n\n\nclass MessageType\n\n\n  def self.answer\n   raise "self.answer not implemented"\n  end\n\n  attr_reader :message\n  def initialize(message)\n    @message = message\n  end\n\n  def can_answer?\n    raise "can_answer? not implemented"\n  end\n\nend\n\n\nclass Nothing < MessageType\n\n  def self.answer\n    "Fine. Be that way."\n  end\n\n  def can_answer?\n    message.to_s.empty?\n  end\n\nend\n\nclass Question < MessageType\n\n  def self.answer\n    "Sure."\n  end\n\n  def can_answer?\n    message.end_with?("?")\n  end\n\nend\n\nclass Yell < MessageType\n\n  def self.answer\n    "Woah, chill out!"\n  end\n\n  def can_answer?\n    message.to_s.upcase == message\n  end\n  \nend\n\nclass Other < MessageType\n  \n  def self.answer\n    "Whatever." \n  end\n\n  def can_answer?\n    true\n  end\n\nend	\N	\N	0	4	2014-06-11 23:11:06	2014-06-11 23:11:06	44481	bob.rb
182	16	c4bbdb114a1ad83aa79062f9	superseded	ruby	bob	class Bob\n\n  def hey(message)\n    answer_type = Answer.new(message).type\n    answers.fetch(answer_type) { default_answer }\n  end\n\n  private\n\n    def answers\n      { nothing: "Fine. Be that way.",\n        yell: "Woah, chill out!",\n        question: "Sure."\n      }\n    end\n\n    def default_answer\n      "Whatever." \n    end\n\nend\n\nclass Answer\n  \n  attr_reader :message\n  def initialize(message)\n    @message = message\n  end\n\n  def type\n    case\n    when nothing?\n      :nothing\n    when yell?\n      :yell\n    when question?\n      :question\n    else\n      :unknown\n    end\n  end\n\n  private\n\n    def nothing?\n      message.to_s.empty?\n    end\n\n    def question?\n      message.end_with?("?")\n    end\n\n    def yell?\n      message.to_s.upcase == message\n    end\n\nend	\N	\N	0	5	2014-06-29 15:22:22	2014-06-29 15:22:22	44481	bob.rb
183	16	6ac95de9aae7de6a529e9771	superseded	ruby	bob	class Bob\n\n  def hey(message)\n    interpret_message(message)\n  end\n\n  private\n\n    def interpret_message(message)\n      MessagesInterpreter.new(message).give_answer\n    end\n\nend\n\nclass MessagesInterpreter\n\n  attr_reader :message\n  def initialize(message)\n    @message = message\n  end\n\n  def give_answer\n    message_types.each do |type|\n      return type.new.answer if type.can_answer?(message)\n    end    \n  end\n\n  private\n\n    def message_types\n      [Nothing, Yell, Question, Other]\n    end\n\n\nend\n\nclass Nothing\n\n  def self.can_answer?(message)\n    message.to_s.empty?\n  end\n  \n  def answer\n    "Fine. Be that way."\n  end\n\nend\n\nclass Question\n\n  def self.can_answer?(message)\n    message.end_with?("?")\n  end\n  \n  def answer\n    "Sure."\n  end\n\nend\n\nclass Yell\n\n  def self.can_answer?(message)\n    message.to_s.upcase == message\n  end\n\n  def answer\n    "Woah, chill out!"\n  end\n  \nend\n\nclass Other\n  \n  def self.can_answer?(message)\n    true\n  end\n\n  def answer\n    "Whatever." \n  end\n\nend	\N	\N	0	3	2014-06-30 20:45:03	2014-06-30 20:45:03	44481	bob.rb
184	16	538e9e0def711de03cb2c40f	superseded	ruby	bob	class Bob\n\n  def hey(message)\n    if nothing?(message)\n      "Fine. Be that way."\n    elsif yell?(message)\n      "Woah, chill out!"\n    elsif question?(message)\n      "Sure."\n    else \n      "Whatever."\n    end\n  end\n\n\n  private\n\n    def nothing?(message)\n      message.to_s.length == 0\n    end\n\n    def question?(message)\n      message[-1] == "?" \n    end\n\n    def yell?(message)\n      message.to_s.upcase == message\n    end\n\nend	\N	\N	0	1	2014-07-01 16:18:06	2014-07-01 16:18:06	44481	bob.rb
185	16	8c82f60b5ef33b022e4b8199	superseded	ruby	bob	class Bob\n\n  def hey(message)\n    if nothing?(message)\n      "Fine. Be that way."\n    elsif yell?(message)\n      "Woah, chill out!"\n    elsif question?(message)\n      "Sure."\n    else \n      "Whatever."\n    end\n  end\n\n\n  private\n\n    def nothing?(message)\n      message.to_s.empty?\n    end\n\n    def question?(message)\n      message.end_with?("?")\n    end\n\n    def yell?(message)\n      message.to_s.upcase == message\n    end\n\nend	\N	\N	0	2	2014-07-01 19:17:34	2014-07-01 19:17:34	44481	bob.rb
186	16	02d7bfdd13794f8f4e85a611	pending	ruby	bob	class Bob\n\n  def hey(message)\n    answer(MessageType.new(message))\n  end\n\n  private\n\n    def answer(message_type)\n      case \n      when message_type.silent?\n        annoyed\n      when message_type.yell?\n        anxious\n      when message_type.question? \n        approve\n      else\n        neutral\n      end\n    end\n\n    def approve\n      "Sure."\n    end\n\n    def annoyed\n      "Fine. Be that way."\n    end\n\n    def anxious\n      "Woah, chill out!"\n    end\n\n    def neutral\n      "Whatever." \n    end\n\nend\n\nclass MessageType\n  \n  attr_reader :message\n  def initialize(message)\n    @message = message.to_s\n  end  \n\n  def silent?\n    message.strip.empty?\n  end\n\n  def question?\n    message.end_with?("?")\n  end\n\n  def yell?\n    message.upcase == message\n  end\n\nend	\N	\N	0	7	2014-07-02 08:24:56	2014-07-02 08:24:56	44481	bob.rb
187	16	f3a7a2023326e28b5993dc08	pending	clojure	bob	(ns bob\n  (:require [clojure.string :refer [ upper-case blank? ]]))\n\n(defn is-question [phrase]\n  (let [ last_letter_idx (- (count phrase) 1)\n         last_letter (get phrase last_letter_idx) ]\n    (= "?" (str last_letter))))\n\n(defn response-for [phrase]\n  (cond\n    (blank? phrase) "Fine. Be that way!"\n    (= (upper-case phrase) phrase) "Woah, chill out!"\n    (is-question phrase) "Sure."\n    :else "Whatever."))	\N	\N	0	1	2014-06-15 06:39:09	2014-06-15 06:39:09	39848	bob.clj
188	16	4947108748685523a6fe0865	superseded	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance a b = sum . map fromEnum $ zipWith (/=) a b	\N	\N	0	1	2014-06-21 17:50:27	2014-06-21 17:50:27	42128	point-mutations.hs
189	16	76c723e01aef2fa7e625a689	pending	haskell	point-mutations	module DNA (hammingDistance) where\n\nhammingDistance :: String -> String -> Int\nhammingDistance a b = length . filter id $ zipWith (/=) a b	\N	\N	0	2	2014-07-06 19:16:23	2014-07-06 19:16:23	42128	point-mutations.hs
190	19	1cc10c6df4b998a93b1046c7	superseded	javascript	word-count	var words = function(str) {\n  var words = str.toLowerCase().replace(/[^A-Z0-9\\s]/gi, '').split(' ')\n    ,  ans = {};\n\n  words.forEach(function(el) {\n    if ( el.length > 0 ) {\n      if ( el === 'constructor' ) {\n        ans[el] !== 1 ? ans[el] = 1 : ans[el]++;\n      } else if ( ans[el] === undefined ) {\n        ans[el] = 1;\n      } else {\n        ans[el]++;\n      }\n    }\n  });\n\n  return ans;\n};	\N	\N	0	1	2014-04-12 09:06:12	2014-04-12 09:06:12	54550	word-count_test.js
191	19	4a26c4f9ed2159d8b8a2b51b	pending	javascript	word-count	var words = function(str) {\n  var words = str.toLowerCase()\n      .replace(/[^A-Z0-9\\s\\u00C0-\\u1FFF\\u2C00-\\uD7FF]/gi, '')\n      .replace(/\\n/g, ' ')\n      .split(' ')\n    ,  ans = {};\n\n  words.forEach(function(el) {\n    if ( el.length > 0 ) {\n      if ( el === 'constructor' ) {\n        ans[el] !== 1 ? ans[el] = 1 : ans[el]++;\n      } else if ( typeof ans[el] === 'undefined' ) {\n        ans[el] = 1;\n      } else {\n        ans[el]++;\n      }\n    }\n  });\n\n  return ans;\n};	\N	\N	0	2	2014-05-26 23:04:23	2014-05-26 23:04:23	54550	word-count_test.js
192	19	1370351184f13806fb18d1d7	pending	go	anagram	package anagram\n\nimport (\n    "reflect"\n    "strings"\n)\n\nfunc wordToLetterCounts(word string) map[rune]int {\n    letters := make(map[rune]int)\n    for _, value := range word {\n        letters[value] = letters[value] + 1\n    }\n    return letters\n}\n\nfunc Detect(word string, candidates []string) []string {\n    word = strings.ToLower(word)\n    anagrams := make([]string, 0, 10)\n    letters := wordToLetterCounts(word)\n    for _, candidate := range candidates {\n        candidate = strings.ToLower(candidate)\n        if reflect.DeepEqual(word, candidate) {\n            continue\n        }\n        cl := wordToLetterCounts(candidate)\n        if reflect.DeepEqual(letters, cl) {\n            anagrams = append(anagrams, candidate)\n        }\n    }\n    return anagrams\n}	\N	\N	0	1	2014-06-21 13:33:06	2014-06-21 13:33:06	57472	anagram.go
193	19	72b9055c0f0dc72c54a45b0a	pending	elixir	bob	defmodule Teenager do\n  defp question?(s), do: String.ends_with?(s, "?")\n\n  defp shouting?(s), do: String.upcase(s) == s\n\n  defp silence?(s), do: String.strip(s) == ""\n\n  def hey(s) do\n    cond do\n      silence?(s)  -> "Fine. Be that way!"\n      shouting?(s) -> "Woah, chill out!"\n      question?(s) -> "Sure."\n      true         -> "Whatever."\n    end\n  end\nend	\N	\N	0	2	2014-07-01 17:48:13	2014-07-01 17:48:13	37951	bob.exs
198	19	27cc4203cc9afb77ff408cbb	pending	ruby	leap	class Year\r\n\tattr_reader :year\r\n\tdef initialize(year)\r\n\t\t@year = year\r\n\tend\r\n\r\n\tdef leap?\r\n\t\t@year % 4 == 0 && (@year % 100 != 0 || @year % 400 == 0)\r\n\tend\r\nend	\N	\N	0	2	2014-06-28 00:23:27	2014-06-28 00:23:27	47095	leap.rb
199	20	2757beea803ac65c7497f8f4	superseded	clojure	prime-factors	(ns prime-factors)\n\n(defn of\n  ([n]\n     (of n 2 []))\n  ([n d acc]\n     (if (= 1 n)\n       acc\n       (let [[m r] ((juxt quot rem) n d)]\n         (if (zero? r)\n           (recur m d (conj acc d))\n           (recur n (inc d) acc))))))	\N	\N	0	1	2014-05-09 19:29:33	2014-05-09 19:29:33	60515	prime_factors.clj
200	20	69e161af5221495de6484dbd	pending	clojure	prime-factors	(ns prime-factors)\n\n(defn of [n]\n  (loop [n n d 2 acc []]\n    (if (= 1 n)\n      acc\n      (if (zero? (rem n d))\n        (recur (quot n d) d (conj acc d))\n        (recur n (inc d) acc)))))	\N	\N	0	2	2014-05-29 03:27:19	2014-05-29 03:27:19	60515	prime_factors.clj
201	35	14776fa00f51bbb073e321c2	pending	clojure	nucleotide-count	(ns dna (:require [clojure.core :as core]))\n\n(def ^:private nucleotides #{\\A \\T \\U \\C})\n\n(defn count\n  [nuc strand]\n  (if (nucleotides nuc)\n    (core/count (filter #(= nuc %) strand))\n    (throw (Exception. "invalid nucleotide"))))\n\n(defn nucleotide-counts\n  [strand]\n  (merge {\\A 0, \\T 0, \\G 0, \\C 0}\n         (frequencies strand)))	\N	\N	0	1	2014-01-15 08:14:30	2014-01-15 08:14:30	50474	dna.clj
202	35	64a628d474328dfb7d1388ce	pending	ruby	roman-numerals	class Fixnum\n def to_roman\n    result = ""\n    roman_structure = self\n    roman_remap_to_arabic_numeral.map do |i, conversion|\n      conversion, arabic = roman_structure.divmod(i)\n      result << roman_remap_to_arabic_numeral[i] * conversion\n      roman_structure = arabic\n    end\n    result\n  end\n\n  def roman_remap_to_arabic_numeral\n    {\n      1000 => 'M',\n      900  => 'CM',\n      500  => 'D',\n      400  => 'CD',\n      100  => 'C',\n      90   => 'XC',\n      50   => 'L',\n      40   => 'XL',\n      10   => 'X',\n      9    => 'IX',\n      5    => 'V',\n      4    => 'IV',\n      1    => 'I'\n    }\n  end\nend	\N	\N	0	4	2014-02-12 10:51:22	2014-02-12 10:51:22	48195	roman.rb
203	35	3b93270c6ff4068a87332852	superseded	ruby	roman-numerals	class Fixnum\n\n  def to_roman\n    result = ""\n    number = self\n    roman_mapping.map do |i, target|\n      target, arabic = number.divmod(i)\n      result << roman_mapping[i] * target\n      number = arabic\n    end.join\n    result\n  end\n\n  def roman_mapping\n    {\n      1000 => 'M',\n      900  => 'CM',\n      500  => 'D',\n      400  => 'CD',\n      100  => 'C',\n      90   => 'XC',\n      50   => 'L',\n      40   => 'XL',\n      10   => 'X',\n      9    => 'IX',\n      5    => 'V',\n      4    => 'IV',\n      1    => 'I'\n    }\n  end\nend	\N	\N	0	2	2014-03-12 15:39:22	2014-03-12 15:39:22	48195	roman-numerals.rb
204	35	6442d0f06bc03ea0eecc734b	superseded	ruby	roman-numerals	class Fixnum\n\n  def to_roman\n    result = ""\n    number = self\n    roman_mapping.keys.each do |i|\n      target, arabic = number.divmod(i)\n      result << roman_mapping[i] * target\n      number = arabic\n    end\n    result\n  end\n\n  def roman_mapping\n    {\n      1000 => 'M',\n      900  => 'CM',\n      500  => 'D',\n      400  => 'CD',\n      100  => 'C',\n      90   => 'XC',\n      50   => 'L',\n      40   => 'XL',\n      10   => 'X',\n      9    => 'IX',\n      5    => 'V',\n      4    => 'IV',\n      1    => 'I'\n    }\n  end\nend	\N	\N	0	1	2014-05-17 07:23:34	2014-05-17 07:23:34	48195	roman-numerals.rb
205	35	372e164f1620e0fce1bac658	superseded	ruby	roman-numerals	class Fixnum\n\n  def to_roman\n    result = ""\n    number = self\n    roman_mapping.map do |i, target|\n      target, arabic = number.divmod(i)\n      result << roman_mapping[i] * target\n      number = arabic\n    end\n    result\n  end\n\n  def roman_mapping\n    {\n      1000 => 'M',\n      900  => 'CM',\n      500  => 'D',\n      400  => 'CD',\n      100  => 'C',\n      90   => 'XC',\n      50   => 'L',\n      40   => 'XL',\n      10   => 'X',\n      9    => 'IX',\n      5    => 'V',\n      4    => 'IV',\n      1    => 'I'\n    }\n  end\nend	\N	\N	0	3	2014-05-18 23:11:04	2014-05-18 23:11:04	48195	roman-numerals.rb
206	35	6afd22a4ae263168270f9b09	superseded	ruby	hamming	class Hamming\n  def self.compute(a, b)\n    return 0 unless a && b && a != b\n\n    length = [a.length, b.length].min\n\n    return 0 if length == 0\n\n    distance = 0\n\n    (0..length-1).each do |i|\n      distance += 1 if a[i] != b[i]\n    end\n\n    distance\n  end\nend	\N	\N	0	1	2014-01-04 10:50:52	2014-01-04 10:50:52	59671	hamming.rb
207	35	b3a03385eb0ae8510db6ba55	superseded	ruby	hamming	class Hamming\n  def self.compute(a, b)\n\n    shortest_length = [a.to_s.length, b.to_s.length].min\n\n    (0...shortest_length).count { |i| a[i] != b[i] }\n\n  end\nend	\N	\N	0	2	2014-01-27 06:30:19	2014-01-27 06:30:19	59671	hamming.rb
208	35	b257b51b24cdd105d685a4ca	pending	ruby	hamming	class Hamming\n  def self.compute(a, b)\n\n    min = [a.to_s.length, b.to_s.length].min\n\n    (0...min).count do |i|\n      a[i] != b[i]\n    end\n\n  end\nend	\N	\N	0	3	2014-03-06 12:53:11	2014-03-06 12:53:11	59671	hamming.rb
209	35	a77e00a1b5811642980f57d4	pending	javascript	bob	function Bob() {};\n\nBob.prototype.hey = function(msg) {\n    if(isEmpty(msg))\n        return 'Fine. Be that way!';\n    if(isShouting(msg))\n        return 'Woah, chill out!';\n    if(isQuestion(msg))\n        return 'Sure.';\n    return 'Whatever.';\n}\n\nvar isEmpty    = function(msg) { return msg.trim() === '' }\nvar isShouting = function(msg) { return msg.toUpperCase() == msg      }\nvar isQuestion = function(msg) { return msg.slice(-1) == '?'          }\n\nmodule.exports = Bob;	\N	\N	0	3	2013-12-25 18:57:57	2013-12-25 18:57:57	37994	bob.js
210	35	d8e2ab806678aa400eb84c81	superseded	javascript	bob	function Bob() {\n    this.hey = function(msg) {\n\n        if(msg.replace(/\\s+/,'') === '')\n            return 'Fine. Be that way!';\n\n        if(msg.toUpperCase() == msg)\n            return 'Woah, chill out!';\n\n        if(msg.slice(-1) == '?')\n            return 'Sure.';\n\n        return 'Whatever.';\n    }\n}\nmodule.exports = Bob;	\N	\N	0	1	2014-04-12 09:35:49	2014-04-12 09:35:49	37994	bob.js
211	35	54893869d0f56fcd5c70f86a	superseded	javascript	bob	function Bob() {\n    Bob.prototype.hey = function(msg) {\n        if(isEmpty(msg))\n            return 'Fine. Be that way!';\n        if(isShouting(msg))\n            return 'Woah, chill out!';\n        if(isQuestion(msg))\n            return 'Sure.';\n        return 'Whatever.';\n    }\n\n    isEmpty    = function(msg) { return msg.replace(/\\s+/, '') === '' }\n    isShouting = function(msg) { return msg.toUpperCase() == msg      }\n    isQuestion = function(msg) { return msg.slice(-1) == '?'          }\n}\nmodule.exports = Bob;	\N	\N	0	2	2014-05-13 20:42:26	2014-05-13 20:42:26	37994	bob.js
212	35	61adf599ef8561c1e529c3d9	superseded	ruby	bob	# encoding: utf-8\n\nclass Bob\n  def hey(text)\n    blank(text) ||\n      shouting(text) ||\n      question(text) ||\n      catch_all\n  end\n\n  private\n\n  def blank(text)\n    if text.nil? || text.strip.empty?\n      'Fine. Be that way!'\n    end\n  end\n\n  def shouting(text)\n    if text == text.upcase\n      'Woah, chill out!'\n    end\n  end\n\n  def question(text)\n    if text.end_with?('?')\n      'Sure.'\n    end\n  end\n\n  def catch_all\n    'Whatever.'\n  end\nend	\N	\N	0	4	2014-01-07 20:23:18	2014-01-07 20:23:18	42765	bob.rb
213	35	c745231e664ae3e6ede3de1b	pending	ruby	bob	# encoding: utf-8\n\nclass Bob\n  def hey(text)\n    respond_to_blank(text) ||\n      respond_to_shouting(text) ||\n      respond_to_question(text) ||\n      catch_all_response\n  end\n\n  private\n\n  def respond_to_blank(text)\n    'Fine. Be that way!' if text.nil? || text.strip.empty?\n  end\n\n  def respond_to_shouting(text)\n    'Woah, chill out!' if text == text.upcase\n  end\n\n  def respond_to_question(text)\n    'Sure.' if text.end_with?('?')\n  end\n\n  def catch_all_response\n    'Whatever.'\n  end\nend	\N	\N	0	6	2014-01-20 07:16:32	2014-01-20 07:16:32	42765	bob.rb
214	35	ce407ed4c29db228bfc2c4d7	superseded	ruby	bob	# encoding: utf-8\n\nclass Bob\n  def hey(text)\n    case text\n    when nil, /^[[:blank:]]*$/\n      'Fine. Be that way!'\n    when /^[[[:space:]][[:digit:]][[:upper:]][[:punct:]]]+$/\n      'Woah, chill out!'\n    when /\\?$/\n      'Sure.'\n    else\n      'Whatever.'\n    end\n  end\nend	\N	\N	0	1	2014-02-06 05:44:40	2014-02-06 05:44:40	42765	bob.rb
215	35	e992ccee4615645e97d67834	superseded	ruby	bob	# encoding: utf-8\n\nclass Bob\n  def hey(text)\n    blank(text) ||\n      shouting(text) ||\n      question(text) ||\n      catch_all\n  end\n\n  private\n\n  def blank(text)\n    if text.nil? || text =~ /^[[:blank:]]*$/\n      'Fine. Be that way!'\n    end\n  end\n\n  def shouting(text)\n    if text =~ /^[[[:space:]][[:digit:]][[:upper:]][[:punct:]]]+$/\n      'Woah, chill out!'\n    end\n  end\n\n  def question(text)\n    if text.end_with?('?')\n      'Sure.'\n    end\n  end\n\n  def catch_all\n    'Whatever.'\n  end\nend	\N	\N	0	2	2014-02-25 22:15:49	2014-02-25 22:15:49	42765	bob.rb
216	35	dfe9a0ea15853dd613f00f70	superseded	ruby	bob	# encoding: utf-8\n\nclass Bob\n  def hey(text)\n    blank(text) ||\n      shouting(text) ||\n      question(text) ||\n      catch_all\n  end\n\n  private\n\n  def blank(text)\n    if text.nil? || text.strip.empty?\n      'Fine. Be that way!'\n    end\n  end\n\n  def shouting(text)\n    if text =~ /^[[[:space:]][[:digit:]][[:upper:]][[:punct:]]]+$/\n      'Woah, chill out!'\n    end\n  end\n\n  def question(text)\n    if text.end_with?('?')\n      'Sure.'\n    end\n  end\n\n  def catch_all\n    'Whatever.'\n  end\nend	\N	\N	0	3	2014-04-17 15:10:34	2014-04-17 15:10:34	42765	bob.rb
217	35	5320f28aa23216bdfeca34bc	superseded	ruby	bob	# encoding: utf-8\n\nclass Bob\n  def hey(text)\n    respond_to_blank(text) ||\n      respond_to_shouting(text) ||\n      respond_to_question(text) ||\n      catch_all_response\n  end\n\n  private\n\n  def respond_to_blank(text)\n    text.nil? || text.strip.empty? ? 'Fine. Be that way!' : nil\n  end\n\n  def respond_to_shouting(text)\n    text == text.upcase ? 'Woah, chill out!' : nil\n  end\n\n  def respond_to_question(text)\n    text.end_with?('?') ? 'Sure.' : nil\n  end\n\n  def catch_all_response\n    'Whatever.'\n  end\nend	\N	\N	0	5	2014-06-28 23:26:59	2014-06-28 23:26:59	42765	bob.rb
218	29	5610f656f5e63d168daa10d0	pending	ruby	sieve	class Sieve\n  def initialize n\n    @n = n\n  end\n\n  def primes\n    sieve = Array.new n + 1, true\n    sieve[0] = false\n    sieve[1] = false\n\n    for i in 2..Math.sqrt(n)\n      if sieve[i]\n        (i * i).step n, i do |j|\n          sieve[j] = false\n        end\n      end\n    end\n\n    sieve.map.each_with_index { |prime, index| index if prime }.compact\n  end\n\n  attr_reader :n\nend	\N	\N	0	1	2014-04-30 13:33:35	2014-04-30 13:33:35	60121	sieve.rb
219	29	fcfda31b1dbd459e151cea18	superseded	clojure	bob	(ns bob)\n\n(defn response-for [question]\n  (cond\n    (re-matches #"[^a-z]*[A-Z]+[^a-z]*" question) "Woah, chill out!"\n    (re-matches #".+\\?" question) "Sure."\n    (re-matches #"\\s*" question) "Fine. Be that way!"\n    :else "Whatever."))\n\n(response-for "4?")\r	\N	\N	0	1	2014-01-24 15:41:14	2014-01-24 15:41:14	56658	bob.clj
220	29	c86f3752f767a6867c4ab354	superseded	clojure	bob	(ns bob)\n\n(defn response-for [question]\n  (cond\n    (re-matches #"[^a-z]*[A-Z]+[^a-z]*" question) "Woah, chill out!"\n    (re-matches #".+\\?" question) "Sure."\n    (re-matches #"\\s*" question) "Fine. Be that way!"\n    :else "Whatever."))	\N	\N	0	2	2014-03-30 15:26:15	2014-03-30 15:26:15	56658	bob.clj
221	29	57cdce7898b62d6e177095d5	pending	clojure	bob	(ns bob\n  (:require [clojure.string :refer [blank? upper-case]]))\n\n(defn shouting? [stimulus]\n  (and\n    (re-find #"[A-Z]" stimulus)\n    (= (upper-case stimulus) stimulus)))\n\n(defn asking? [stimulus]\n  (= (last stimulus) '\\?))\n\n(defn response-for [stimulus]\n  (cond\n    (blank? stimulus) "Fine. Be that way!"\n    (shouting? stimulus) "Woah, chill out!"\n    (asking? stimulus) "Sure."\n    :else "Whatever."))	\N	\N	0	3	2014-04-17 16:44:37	2014-04-17 16:44:37	56658	bob.clj
222	29	f9fcb982aed3ac9b02a498cd	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA strand = map thymidineToUracil strand\n\nthymidineToUracil :: Char -> Char\nthymidineToUracil nucleotide\n  | nucleotide == 'T' = 'U'\n  | otherwise         = nucleotide	\N	\N	0	1	2014-03-13 09:28:50	2014-03-13 09:28:50	48038	rna-transcription.hs
223	29	2ede3b217b858ed41396cc1e	superseded	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA strand = map thymidineToUracil strand\n  where thymidineToUracil nucleotide\n          | nucleotide == 'T' = 'U'\n          | otherwise         = nucleotide	\N	\N	0	2	2014-03-29 23:52:04	2014-03-29 23:52:04	48038	rna-transcription.hs
224	29	4c60d72e892bdd703b06e183	pending	haskell	rna-transcription	module DNA (toRNA) where\n\ntoRNA :: String -> String\ntoRNA = map thymidineToUracil\n  where thymidineToUracil nucleotide\n          | nucleotide == 'T' = 'U'\n          | otherwise         = nucleotide	\N	\N	0	3	2014-05-21 20:28:29	2014-05-21 20:28:29	48038	rna-transcription.hs
225	29	9bef040eac3d513b787f7ece	superseded	haskell	bob	module Bob (responseFor) where\n\n  import Data.Char\n\n  responseFor :: String -> String\n  responseFor statement\n    | isNothing statement = "Fine. Be that way!"\n    | isYelling statement = "Woah, chill out!"\n    | isQuestion statement = "Sure."\n    | otherwise = "Whatever."\n\n  isQuestion :: String -> Bool\n  isQuestion statement =\n    not (null statement) &&\n    last statement == '?'\n\n  isYelling :: String -> Bool\n  isYelling statement =\n    all isUpper filtered && not (null filtered)\n    where filtered = filter isAlpha statement\n    \n  isNothing :: String -> Bool\n  isNothing = all isSpace	\N	\N	0	1	2014-02-24 11:10:12	2014-02-24 11:10:12	56025	bob.hs
226	29	2c224854a425e6573dcc1dca	pending	haskell	bob	module Bob (responseFor) where\n\nimport Data.Char\n\nresponseFor :: String -> String\nresponseFor statement\n  | isNothing statement = "Fine. Be that way!"\n  | isYelling statement = "Woah, chill out!"\n  | isQuestion statement = "Sure."\n  | otherwise = "Whatever."\n\nisQuestion :: String -> Bool\nisQuestion statement =\n  not (null statement) &&\n  last statement == '?'\n\nisYelling :: String -> Bool\nisYelling statement =\n  all isUpper filtered && not (null filtered)\n  where filtered = filter isAlpha statement\n  \nisNothing :: String -> Bool\nisNothing = all isSpace	\N	\N	0	2	2014-03-13 10:27:40	2014-03-13 10:27:40	56025	bob.hs
227	34	75dbc9d7bad2dd450abdef13	pending	ruby	triangle	class TriangleError < StandardError; end\n\nclass Triangle\n  attr_reader :a, :b, :c\n\n  def initialize(a,b,c)\n    @a = a \n    @b = b\n    @c = c\n  end\n\n  def kind\n    raise TriangleError if impossible?\n    if equilateral?\n      :equilateral\n    elsif isosceles?\n      :isosceles\n    else\n      :scalene\n    end\n  end\n\n  private\n\n  def sides\n    @sides ||= [a, b, c]\n  end\n\n  def equilateral?\n    sides.uniq.size == 1\n  end\n\n  def isosceles?\n    sides.uniq.size == 2\n  end\n\n  def impossible_side_length\n    sides.any? {|side| side <= 0}\n  end\n\n  def violates_inequality\n    a + b <= c || a + c  <= b || c + b <= a\n  end\n\n  def impossible?\n    impossible_side_length || violates_inequality\n  end\n  \nend	\N	\N	0	1	2014-03-29 12:56:41	2014-03-29 12:56:41	48000	triangle.rb
228	13	d470d3be18f821f4d59af852	pending	ruby	hamming	class DNA\n\n  def initialize(sequence)\n    @sequence = sequence\n  end\n\n  def hamming_distance(other_sequence)\n    sequence_pairs(other_sequence).count { |pair| pair.first != pair.last }\n  end\n\n  private\n\n  def sequence_pairs(other_sequence)\n    length = target_length(other_sequence)\n    @sequence[0...length].chars.zip(other_sequence[0...length].chars)\n  end\n\n  def target_length(other_sequence)\n    [other_sequence.length, @sequence.length].min\n  end\n\nend	\N	\N	0	1	2014-06-27 23:45:17	2014-06-27 23:45:17	46846	point-mutations.rb
230	13	8d03fd9651fcbff34f870ef0	superseded	ruby	gigasecond	class Gigasecond \n\tattr_accessor :cur_date\n\tdef initialize(date)\n    \t@cur_date = date\n  \tend\n\tdef date\n\t\t(cur_date.to_time + (10**9)).to_date\n\tend\t\nend	\N	\N	0	2	2014-07-09 10:01:38	2014-07-09 10:01:38	58346	gigasecond.rb
231	13	aa59de6d8302b352a4a65ec7	pending	ruby	gigasecond	class Gigasecond \n  def initialize(date)\n    @cur_date = date\n  end\n  def date\n    (@cur_date.to_time + (10**9)).to_date\n  end\t\nend	\N	\N	0	3	2014-07-15 00:59:55	2014-07-15 00:59:55	58346	gigasecond.rb
232	13	a74af6e84642e882a1024310	pending	ruby	bob	class Bob\n  def initialize\n  end\n\n  def hey text\n    if text.strip.empty?\n      "Fine. Be that way!"\n    elsif text.each_char.map { |c| letter?(c) }.any? && text.each_char.map { |c| letter?(c) && c.capitalize == c || !letter?(c) }.all?\n      "Woah, chill out!"\n    elsif text.end_with?("?")\n      "Sure."\n    else\n      "Whatever."\n    end\n  end\n\n  LETTER_RANGE = ("A".."Z").to_a\n  def letter? c\n    LETTER_RANGE.include?(c.capitalize)\n  end\nend	\N	\N	0	1	2014-06-22 02:11:25	2014-06-22 02:11:25	47843	bob.rb
233	13	91e392cd1e14307a4925262d	pending	objective-c	bob	//\n//  Bob.m\n//  Bob\n//\n//  Created by Andrew Halls on 11/17/13.\n//  Copyright (c) 2013 GaltSoft. All rights reserved.\n//\n\n#import "Bob.h"\n\n@interface NSString (BobTalk)\n-(BOOL) isEmpty;\n-(BOOL) isQuestion;\n-(BOOL) isShouting;\n@end\n\n@implementation NSString (BobTalk)\n-(BOOL) isEmpty {\n    return  [self length] < 1;\n}\n\n-(BOOL) isQuestion {\n    return [self hasSuffix:@"?"];\n}\n-(BOOL) isShouting {\n    NSError  *error  = NULL;\n    \n    NSRegularExpression *regex = [NSRegularExpression\n                                  regularExpressionWithPattern:@"[a-z]"\n                                  options:0\n                                  error:&error];\n    \n    if (error) {\n        NSLog(@"RegEx error: %@", error);\n    }\n    \n    NSRange range   = [regex rangeOfFirstMatchInString:self\n                                               options:0\n                                                 range:NSMakeRange(0, [self length])];\n    \n    return range.location == NSNotFound;\n    \n}\n@end\n\n\n@implementation Bob\n\n-(NSString *) hey: (NSString *) input {\n    if ([input isEmpty]) {\n        return @"Fine, be that way.";\n    }\n    else if ([input isQuestion]) {\n        return  @"Sure.";\n    }\n    else if ([input isShouting]) {\n        return @"Woah, chill out!";\n    }\n    else {\n        return @"Whatever.";\n    }\n}\n\n\n\n\n@end	\N	\N	0	2	2014-06-20 02:11:32	2014-06-20 02:11:32	45783	bob.m
234	13	94c63817347d14e64f167e60	superseded	objective-c	bob	//\n//  Bob.m\n//  Bob\n//\n//  Created by Andrew Halls on 11/17/13.\n//  Copyright (c) 2013 GaltSoft. All rights reserved.\n//\n\n#import "Bob.h"\n\n@implementation Bob\n\n-(NSString *) hey: (NSString *) input {\n    if ([input length] < 1) {\n        return @"Fine, be that way.";\n    }\n    else if ([input isEqualToString:@"Does this cryogenic chamber make me look fat?"]) {\n        return  @"Sure.";\n    }\n    else if ([self isAllUpperCase: input]) {\n        return @"Woah, chill out!";\n    }\n    else {\n        return @"Whatever.";\n    }\n}\n\n-(BOOL) isAllUpperCase: (NSString *) input  {\n    NSError  *error  = NULL;\n    \n    NSRegularExpression *regex = [NSRegularExpression\n                                  regularExpressionWithPattern:@"[a-z]"\n                                  options:0\n                                  error:&error];\n    \n    if (error) {\n        NSLog(@"RegEx error: %@", error);\n    }\n    \n    NSRange range   = [regex rangeOfFirstMatchInString:input\n                                               options:0\n                                                 range:NSMakeRange(0, [input length])];\n    \n    return range.location == NSNotFound;\n    \n}\n\n@end	\N	\N	0	1	2014-07-07 15:21:44	2014-07-07 15:21:44	45783	bob.m
235	13	cce0ea3816d9425cf98b3b9b	pending	ruby	raindrops	class Raindrops\n\n  def self.convert(input_number)\n    sound_of_drops = {3 => "Pling", 5 => "Plang", 7 => "Plong"}\n    output = sound_of_drops.reduce([]) do |output, (number, sound)|\n      (input_number % number == 0) ? output << sound : output\n    end.join\n    output.empty? ? input_number.to_s : output\n  end\n\nend	\N	\N	0	4	2014-07-01 23:28:50	2014-07-01 23:28:50	59171	raindrops.rb
236	13	f74e415c8d0fff79a6535974	superseded	ruby	raindrops	class Raindrops\n  @sound_of_drops = {3 => "Pling", 5 => "Plang", 7 => "Plong"}\n\n  def self.convert(input_number)\n    output = []\n    @sound_of_drops.each do |number, sound|\n      output.push(sound) if (input_number % number).zero?\n    end\n    output.push(input_number) if (output.empty?)\n    return output.join("")\n  end\n\nend	\N	\N	0	1	2014-07-06 02:19:32	2014-07-06 02:19:32	59171	raindrops.rb
237	13	20db8a92414d5e7a5b9848fc	superseded	ruby	raindrops	class Raindrops\n  @sound_of_drops = {3 => "Pling", 5 => "Plang", 7 => "Plong"}\n\n  def self.convert(input_number)\n    output = []\n    @sound_of_drops.each do |number, sound|\n      output << sound if (input_number % number == 0)\n    end\n    output << input_number if output.empty?\n    return output.join\n  end\n\nend\n0	\N	\N	0	2	2014-07-16 15:51:45	2014-07-16 15:51:45	59171	raindrops.rb
238	13	58ca0e9ae3d8587cd3d17d5b	superseded	ruby	raindrops	class Raindrops\n  @sound_of_drops = {3 => "Pling", 5 => "Plang", 7 => "Plong"}\n\n  def self.convert(input_number)\n    output = []\n    @sound_of_drops.each do |number, sound|\n      output << sound if (input_number % number == 0)\n    end\n    output << input_number if output.empty?\n    output.join\n  end\n\nend\n0	\N	\N	0	3	2014-07-21 06:12:01	2014-07-21 06:12:01	59171	raindrops.rb
239	40	51ee1a2ef014afe56b4b749b	pending	javascript	nucleotide-count	module.exports = function(strand) {\n  "use strict";\n  var nucleotideIndex,\n      nucleotide,\n      dnaNucleotides = ['A','T','C','G'],\n      rnaNucleotides = ['U'];\n\n  this.strand = strand;\n\n  function invalidNucleotide(nucleotide) {\n    return dnaNucleotides.indexOf(nucleotide) === -1 &&\n           rnaNucleotides.indexOf(nucleotide) === -1;\n  }\n\n  this.count = function(nucleotide) {\n    if (invalidNucleotide(nucleotide)) {\n      throw new Error("Invalid Nucleotide");\n    }\n\n    var currentNucleotide,\n        matches = 0,\n        strandIndex = this.strand.length;\n\n    while(strandIndex--) {\n      currentNucleotide = this.strand[strandIndex];\n      if (currentNucleotide === nucleotide) {\n        matches++;\n      }\n    }\n\n    return matches;\n  };\n\n  this.nucleotideCounts = {};\n\n  for (nucleotideIndex in dnaNucleotides) {\n    nucleotide = dnaNucleotides[nucleotideIndex];\n    this.nucleotideCounts[nucleotide] = this.count(nucleotide);\n  }\n};	\N	\N	0	1	2014-05-07 12:58:31	2014-05-07 12:58:31	40148	nucleotide-count.js
240	40	f85b3d2663ff46784175e551	superseded	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    remove_punctuation(sentence)\n    |> String.downcase\n    |> String.split\n    |> add_to_counter(HashDict.new)\n  end\n\n  defp remove_punctuation(sentence) do\n    Regex.replace(%r/[[:punct:]]/, sentence, "")\n  end\n\n  defp add_to_counter([], word_counts) do\n    word_counts\n  end\n\n  defp add_to_counter([head|tail], word_counts) do\n    word_counts = HashDict.put(word_counts, head, new_count(head, word_counts))\n    add_to_counter(tail, word_counts)\n  end\n\n  defp new_count(key, word_counts) do\n    1 + HashDict.get(word_counts, key, 0)\n  end\nend	\N	\N	0	1	2014-04-13 23:12:49	2014-04-13 23:12:49	50351	word_count.exs
241	40	02700823c5a1a8296af0ba57	superseded	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    String.downcase(sentence)\n    |> extract_words_as_list\n    |> List.flatten\n    |> add_to_counter(HashDict.new)\n  end\n\n  defp extract_words_as_list(sentence) do\n    Regex.scan(%r/\\w+/, sentence)\n  end\n\n  defp add_to_counter([], word_counts) do\n    word_counts\n  end\n\n  defp add_to_counter([head|tail], word_counts) do\n    word_counts = Dict.update(word_counts, head, 1, fn (value) -> value + 1 end)\n    add_to_counter(tail, word_counts)\n  end\nend	\N	\N	0	2	2014-04-22 15:48:50	2014-04-22 15:48:50	50351	word_count.exs
242	40	2b75479ad38c9e640899030f	superseded	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    String.downcase(sentence)\n    |> extract_words_as_list\n    |> add_words_to_counter(Enum.into([], %{}))\n  end\n\n  defp extract_words_as_list(sentence) do\n    Regex.scan(~r/\\w+/, sentence)\n    |> List.flatten\n  end\n\n  defp add_words_to_counter([], word_counts) do\n    word_counts\n  end\n\n  defp add_words_to_counter([head|tail], word_counts) do\n    word_counts = Dict.update(word_counts, head, 1, fn value -> value + 1 end)\n    add_words_to_counter(tail, word_counts)\n  end\nend	\N	\N	0	3	2014-05-27 06:42:11	2014-05-27 06:42:11	50351	word_count.exs
243	40	c4249533ba289f674b44533a	pending	elixir	word-count	defmodule Words do\n  @doc """\n  Count the number of words in the sentence.\n\n  Words are compared case-insensitively.\n  """\n  @spec count(String.t) :: HashDict.t\n  def count(sentence) do\n    String.downcase(sentence)\n    |> extract_words_as_list\n    |> add_words_to_counter Enum.into([], %{}) \n  end\n\n  defp extract_words_as_list(sentence) do\n    Regex.scan(~r/\\w+/, sentence)\n    |> List.flatten\n  end\n\n  defp add_words_to_counter(word_list, word_counts) do\n    Enum.reduce word_list, word_counts, fn(word, accumulator) ->\n      Dict.update(accumulator, word, 1, fn value -> value + 1 end)\n    end\n  end\nend	\N	\N	0	4	2014-06-16 08:51:14	2014-06-16 08:51:14	50351	word_count.exs
244	40	5251ed80d8ad2b1888f2cfd6	superseded	ruby	rna-transcription	class DNA\n  ADENINE  = 'A'\n  CYTOSINE = 'C'\n  GUANINE  = 'G'\n  THYMINE  = 'T'\n  URACIL   = 'U'\n\n  def initialize(sequence)\n    @sequence = sequence.upcase\n  end\n\n  def to_rna\n    @sequence.gsub(THYMINE, URACIL)\n  end\nend	\N	\N	0	3	2014-04-14 02:52:59	2014-04-14 02:52:59	46561	rna-transcription.rb
245	40	6000863f32c78bc9da7f8319	superseded	ruby	rna-transcription	class DNA\n  ADENINE  = 'A'\n  CYTOSINE = 'C'\n  GUANINE  = 'G'\n  THYMINE  = 'T'\n  URACIL   = 'U'\n\n  def initialize(sequence)\n    @sequence = sequence.upcase\n  end\n\n  def to_rna\n    @sequence.tr(THYMINE, URACIL)\n  end\nend\n\nrequire 'benchmark'\n\nclass DNA\n  def to_rna_gsub_string\n    @sequence.gsub(THYMINE, URACIL)\n  end\n\n  def to_rna_gsub_regex\n    @sequence.gsub(/T/i, 'U')\nend\n\nsequences = (0...1_000_000).map do\n  DNA.new((0...20).map { [DNA::ADENINE, DNA::CYTOSINE, DNA::GUANINE, DNA::THYMINE].sample }.join)\nend\n\nBenchmark.bm do |x|\n  x.report { sequences.each { |sequence| sequence.to_rna_gsub_string } }\n  x.report { sequences.each { |sequence| sequence.to_rna_gsub_regex } }\n  x.report { sequences.each { |sequence| sequence.to_rna } }\nend\n\n      user     system      total        real\n  5.500000   0.150000   5.650000 (  5.637118)\n  0.550000   0.000000   0.550000 (  0.551840)	\N	\N	0	5	2014-05-08 14:36:46	2014-05-08 14:36:46	46561	rna-transcription.rb
246	40	e82efd44054bf77b05b38b59	superseded	ruby	rna-transcription	class Bob\n  def hey(message)\n    message = Message.new(message.to_s)\n\n    case\n      when message.silent?   then 'Fine. Be that way.'\n      when message.question? then 'Sure.'\n      when message.shouting? then 'Woah, chill out!'\n      else                         'Whatever.'\n    end\n  end\nend\n\nclass Message < String\n  def silent?\n    [nil, ''].include?(self)\n  end\n\n  def question?\n    self.end_with?('?')\n  end\n\n  def shouting?\n    self == self.upcase\n  end\nend	\N	\N	0	1	2014-05-28 06:06:58	2014-05-28 06:06:58	46561	rna-transcription.rb
247	40	8c7b594d8d40484c9d8af44a	superseded	ruby	rna-transcription	class DNA\n  def initialize(sequence)\n    @sequence = sequence.upcase\n  end\n\n  def to_rna\n    @sequence.gsub('T', 'U')\n  end\nend	\N	\N	0	2	2014-06-02 09:12:00	2014-06-02 09:12:00	46561	rna-transcription.rb
248	40	1ccb4b3daf278d6352220259	superseded	ruby	rna-transcription	class DNA\n  ADENINE  = 'A'\n  CYTOSINE = 'C'\n  GUANINE  = 'G'\n  THYMINE  = 'T'\n  URACIL   = 'U'\n\n  def initialize(sequence)\n    @sequence = sequence.upcase\n  end\n\n  def to_rna\n    @sequence.tr(THYMINE, URACIL)\n  end\nend\n\n# require 'benchmark'\n#\n# class DNA\n#   def slow_to_rna\n#     @sequence.gsub(THYMINE, URACIL)\n#   end\n# end\n#\n# sequences = (0...1_000_000).map do\n#   DNA.new((0...20).map { [DNA::ADENINE, DNA::CYTOSINE, DNA::GUANINE, DNA::THYMINE].sample }.join)\n# end\n#\n# Benchmark.bm do |x|\n#   x.report { sequences.each { |sequence| sequence.slow_to_rna } }\n#   x.report { sequences.each { |sequence| sequence.to_rna } }\n# end\n#\n#       user     system      total        real\n#   5.500000   0.150000   5.650000 (  5.637118)\n#   0.550000   0.000000   0.550000 (  0.551840)	\N	\N	0	4	2014-06-15 15:39:27	2014-06-15 15:39:27	46561	rna-transcription.rb
249	40	d092dc10fb37ee3b87e606c1	superseded	ruby	rna-transcription	class DNA\n  ADENINE  = 'A'\n  CYTOSINE = 'C'\n  GUANINE  = 'G'\n  THYMINE  = 'T'\n  URACIL   = 'U'\n\n  def initialize(sequence)\n    @sequence = sequence.upcase\n  end\n\n  def to_rna\n    @sequence.tr(THYMINE, URACIL)\n  end\nend\n\n# require 'benchmark'\n\n# class DNA\n#   def to_rna_gsub_string\n#     @sequence.gsub(THYMINE, URACIL)\n#   end\n\n#   def to_rna_gsub_regex\n#     @sequence.gsub(/T/i, 'U')\n# end\n\n# sequences = (0...1_000_000).map do\n#   DNA.new((0...20).map { [DNA::ADENINE, DNA::CYTOSINE, DNA::GUANINE, DNA::THYMINE].sample }.join)\n# end\n\n# Benchmark.bm do |x|\n#   x.report { sequences.each { |sequence| sequence.to_rna_gsub_string } }\n#   x.report { sequences.each { |sequence| sequence.to_rna_gsub_regex } }\n#   x.report { sequences.each { |sequence| sequence.to_rna } }\n# end\n\n#       user     system      total        real\n#   5.500000   0.150000   5.650000 (  5.637118)\n#   0.550000   0.000000   0.550000 (  0.551840)	\N	\N	0	6	2014-07-10 09:11:36	2014-07-10 09:11:36	46561	rna-transcription.rb
250	40	87fafe9c9ea7d7f47ab61288	pending	ruby	rna-transcription	class DNA\n  ADENINE  = 'A'\n  CYTOSINE = 'C'\n  GUANINE  = 'G'\n  THYMINE  = 'T'\n  URACIL   = 'U'\n\n  def initialize(sequence)\n    @sequence = sequence.upcase\n  end\n\n  def to_rna\n    @sequence.tr(THYMINE, URACIL)\n  end\nend\n\n# require 'benchmark'\n#\n# class DNA\n#   def to_rna_gsub_string\n#     @sequence.gsub(THYMINE, URACIL)\n#   end\n#\n#   def to_rna_gsub_regex\n#     @sequence.gsub(/T/i, 'U')\n#   end\n# end\n#\n# sequences = (0...1_000_000).map do\n#   DNA.new((0...20).map { [DNA::ADENINE, DNA::CYTOSINE, DNA::GUANINE, DNA::THYMINE].sample }.join)\n# end\n#\n# Benchmark.bm do |x|\n#   x.report { sequences.each { |sequence| sequence.to_rna_gsub_string } }\n#   x.report { sequences.each { |sequence| sequence.to_rna_gsub_regex } }\n#   x.report { sequences.each { |sequence| sequence.to_rna } }\n# end\n#\n#       user     system      total        real\n#   5.550000   0.170000   5.720000 (  5.727600)\n#   5.070000   0.120000   5.190000 (  5.174385)\n#   0.530000   0.000000   0.530000 (  0.537263)	\N	\N	0	7	2014-07-12 09:34:50	2014-07-12 09:34:50	46561	rna-transcription.rb
251	40	70512788d6d9f9132bf5efca	superseded	clojure	grade-school	(ns school)\n\n(defn add [db name grade]\n  (assoc db grade (conj (get db grade []) name)))\n\n(defn grade [db grade]\n  (get db grade []))\n\n(defn sorted [db]\n  (into (sorted-map) \n  \t(zipmap (keys db) (map #(sort %) (vals db)))))	\N	\N	0	1	2014-04-06 13:19:34	2014-04-06 13:19:34	47455	grade-school.clj
252	40	e3f6aae4163d489e79f86162	pending	clojure	grade-school	(ns school)\n\n(defn grade [db grade-number]\n  (get db grade-number []))\n\n(defn add [db name grade-number]\n  (assoc db grade-number \n    (conj (grade db grade-number) name)))\n\n(defn sorted [db]\n  (into (sorted-map) \n    (zipmap (keys db) (map #(sort %) (vals db)))))	\N	\N	0	3	2014-04-14 22:48:14	2014-04-14 22:48:14	47455	grade-school.clj
253	40	5cc55cd092f08f25487c70a3	superseded	clojure	grade-school	(ns school)\n\n(defn grade [db grade-number]\n  (get db grade-number []))\n\n(defn add [db name grade-number]\n  (assoc db grade-number (conj (grade db grade-number) name)))\n\n(defn sorted [db]\n  (into (sorted-map) \n  \t(zipmap (keys db) (map #(sort %) (vals db)))))	\N	\N	0	2	2014-05-23 23:06:06	2014-05-23 23:06:06	47455	grade-school.clj
254	5	da77587c407aa259c4a4ee1f	pending	ruby	bob	class Bob\r\n\tdef hey(x)\r\n\t\tif x == x.upcase && x.match(/[a-zA-Z]/);"Woah, chill out!"\r\n\t\telsif x[-1] == '?';"Sure."\r\n\t\telsif x.strip == '';'Fine. Be that way!'\r\n\t\telse;"Whatever."\r\n\t\tend\r\n\tend\r\nend\r	\N	\N	0	1	2014-06-27 14:53:18	2014-06-27 14:53:18	51681	bob.rb
255	33	2b7d4a91c9227dec0a3875da	pending	haskell	octal	module Octal (showOct, readOct) where\n\nimport Control.Monad\nimport Data.Char\n\nshowOct :: (Integral a, Show a) => a -> String\nshowOct 0 = "0"\nshowOct x = reverse $ toOct x\n    where\n        toOct 0 = ""\n        toOct v = intToDigit (fromIntegral v `mod` 8) : toOct (v `div` 8)\n\nreadOct :: (Integral a, Show a) => String -> a\nreadOct x = case foldM convert 0 x of\n                Just v  -> v\n                Nothing -> 0\n    where\n        convert curValue c = if isOctDigit c\n                                 then Just (curValue * 8 + fromIntegral (digitToInt c))\n                                 else Nothing	\N	\N	0	1	2014-07-16 21:55:00	2014-07-16 21:55:00	42820	octal.hs
256	15	56a97e6a6d6d96ed0370c005	pending	scala	phone-number	class PhoneNumber (number_strings: String){\n  def number = input_phone match {\n    case validationRegex(num) => num\n    case _ => "0000000000"\n  }\n\n  def areaCode = number.substring(0, 3)\n  def exchangeCode = number.substring(3, 6)\n  def subscriberNumber = number.substring(6, 10)\n\n  override def toString = s"($areaCode) $exchangeCode-$subscriberNumber"\n  private val input_phone = number_strings.filter(_.isDigit)\n  private val validationRegex = """^1?(\\d{10})$""".r\n}	\N	\N	0	1	2013-11-13 15:19:58	2013-11-13 15:19:58	50857	phone-number.scala
257	17	27c34612ef12e925715dbfbd	pending	ruby	phone-number	class PhoneNumber\n  def initialize(raw_number)\n    @raw_number = raw_number\n  end\n\n  def number\n    valid_number? ? cleaned_up_number : "0000000000"\n  end\n\n  def area_code\n    number[0..2]\n  end\n\n  def to_s\n    "(#{number[0..2]}) #{number[3..5]}-#{number[6..9]}"\n  end\n\n  private\n\n  def cleaned_up_number\n    number = select_digits(@raw_number)\n    trim_first_digit(number)\n  end\n\n  def valid_number?\n    does_not_contain_letters? && correct_length?\n  end\n\n  def does_not_contain_letters?\n    @raw_number.scan(/[A-Za-z]/).empty?\n  end\n\n  def correct_length?\n    cleaned_up_number.size == 10\n  end\n\n  def select_digits(number)\n    number.scan(/\\d+/).join\n  end\n\n  def trim_first_digit(number)\n    trimmable_first_digit?(number) ? number[1..-1] : number\n  end\n\n  def trimmable_first_digit?(number)\n    number.size == 11 && number.start_with?("1")\n  end\nend	\N	\N	0	1	2014-06-18 22:37:19	2014-06-18 22:37:19	40803	phone-number.rb
258	17	074ba86d020e34e662dfe3ac	pending	ruby	word-count	class Phrase\n  def initialize(input_phrase)\n    @input_phrase = input_phrase\n  end\n\n  def word_count\n    store = Hash.new\n    array_of_words = @input_phrase.split\n\n    parsed_array_of_words = Array.new\n\n    array_of_words.each do |word|\n      word.split(",").each do |split_word|\n        parsed_array_of_words << split_word.downcase\n      end\n    end\n\n    parsed_array_of_words.each do |word|\n      parsed_word = word.match(/\\w+'?\\w?/).to_s\n      next if parsed_word == ""\n\n      if store[parsed_word] == nil\n        store[parsed_word] = 1\n      else\n        store[parsed_word] += 1\n      end\n    end\n\n    store\n  end\nend	\N	\N	0	1	2014-05-30 17:22:15	2014-05-30 17:22:15	54553	phrase.rb
259	17	07e6c9bb303e5ae763f621f9	pending	ruby	hamming	module Hamming\n  class << self\n    def compute(str1, str2)\n      hammingd = 0\n      min = [str1, str2].min\n      max = [str1, str2].max\n      max = max[0..(min.size - 1)]\n\n      min.split('').each_with_index do |v, i|\n        hammingd = hammingd.+ 1 if v != max[i]\n      end\n\n      return hammingd\n    end\n  end\nend	\N	\N	0	1	2014-06-21 07:08:38	2014-06-21 07:08:38	54221	hamming.rb
260	17	d1c50ecd803cdb0e762d1b0e	superseded	ruby	binary	class Binary\n  attr_accessor :binary\n\n  def initialize binary\n    self.binary = binary\n  end\n\n  def to_decimal\n    return 0 unless valid?\n    digits.reverse.each_with_index.reduce(0) do |base10,(digit,i)|\n      base10 += digit.to_i * (2**i)\n    end\n  end\n\n  def digits\n    binary.chars\n  end\n\n  def valid?\n    binary =~ /^[10]+$/\n  end\nend	\N	\N	0	1	2014-05-15 18:36:52	2014-05-15 18:36:52	59727	binary.rb
261	17	8eeb11620b694c13cee8b125	pending	ruby	binary	class Binary\n  ASCII_ZERO = '0'.ord\n\n  attr_accessor :binary\n\n  def initialize binary\n    self.binary = binary\n  end\n\n  def to_decimal\n    binary.bytes.reverse_each.with_index.reduce(0) do |base10,(byte,i)|\n      digit = byte - ASCII_ZERO\n\n      return 0 unless digit.between? 0,1\n\n      base10 + ( digit * 2**i )\n    end\n  end\nend	\N	\N	0	6	2014-05-17 05:11:56	2014-05-17 05:11:56	59727	binary.rb
262	17	6289b83aa3d5951a8065da20	superseded	ruby	binary	require 'benchmark'\n\nclass Binary < String\n  ASCII_ZERO = '0'.ord\n\n  def to_decimal\n    bytes.reverse_each.with_index.reduce(0) do |base10,(byte,i)|\n      digit = byte - ASCII_ZERO\n\n      return 0 unless digit.between? 0,1\n\n      base10 + ( digit * 2**i )\n    end\n  end\nend	\N	\N	0	5	2014-05-26 04:51:05	2014-05-26 04:51:05	59727	binary.rb
263	17	0d7ffe2ca24b98c10503cf21	superseded	ruby	binary	class Binary\n  attr_accessor :binary\n\n  def initialize binary\n    self.binary = binary\n  end\n\n  def to_decimal\n    return 0 unless valid?\n    max_i = digits.length - 1\n    digits.each_with_index.reduce(0) do |base10,(digit,i)|\n      base10 + ( get_value(digit) * 2**(i - max_i).abs )\n    end\n  end\n\n  def digits\n    binary.chars\n  end\n\n  def valid?\n    binary =~ /^[10]+$/\n  end\n\n  private\n    def get_value str_digit\n      str_digit.ord - '0'.ord\n    end\nend	\N	\N	0	2	2014-06-11 06:04:43	2014-06-11 06:04:43	59727	binary.rb
264	17	4e70f800d8770c81310fd241	superseded	ruby	binary	class Binary < String\n  ASCII_ZERO = '0'.ord\n\n  def to_decimal\n    max_i = length - 1\n\n    each_byte.with_index.reduce(0) do |base10,(byte,i)|\n      digit = byte - ASCII_ZERO\n\n      return 0 unless digit.between? 0,1\n\n      base10 + ( digit * 2**(i - max_i).abs )\n    end\n  end\nend	\N	\N	0	4	2014-07-02 19:23:48	2014-07-02 19:23:48	59727	binary.rb
265	17	726d07dfb43336d7933c4eee	superseded	ruby	binary	class Binary < String\n  ASCII_ZERO = '0'.ord\n\n  def to_decimal\n    max_i = length - 1\n    each_char.with_index.reduce(0) do |base10,(char,i)|\n      return 0 unless valid? char\n      base10 + ( (char.ord - ASCII_ZERO) * 2**(i - max_i).abs )\n    end\n  end\n\n  private\n\n  def valid? char\n    char == '1' || char == '0'\n  end\nend	\N	\N	0	3	2014-07-04 14:27:19	2014-07-04 14:27:19	59727	binary.rb
266	17	53779b58d6cceefa3fc49e76	pending	javascript	phone-number	'use strict';\n\nvar PhoneNumber = function (str) {\n    this.original = str;\n    this.num = str.match(/\\d/g);\n};\n\nPhoneNumber.prototype.number = function () {\n    var num = this.num;\n    switch (num.length) {\n    case 10:\n        return num.join('');\n    case 11:\n        if (num[0] === '1') {\n            return num.slice(1).join('');\n        }\n        return new Array(11).join(0);\n    default:\n        return new Array(11).join(0);\n    }\n};\n\nPhoneNumber.prototype.areaCode = function () {\n    return this.num.slice(0, 3).join('');\n};\n\nPhoneNumber.prototype.toString = function () {\n    return '(' + this.num.slice(0, 3).join('') + ') ' +\n           this.num.slice(3, 6).join('') + '-' +\n           this.num.slice(-4).join('');\n};\n\nmodule.exports = PhoneNumber;	\N	\N	0	1	2014-06-23 20:55:38	2014-06-23 20:55:38	55076	phone-number.js
267	17	c66f469fbcd13fd97f5880e3	superseded	ruby	bob	class Bob\n  def hey(input)\n    \n    message = Message.new(input)\n\n    case \n    when message.silence?\n     'Fine. Be that way!'\n    when message.shouting?\n     'Woah, chill out!'\n    when message.asks_a_question?\n     'Sure.'\n    else 'Whatever.'\n    end\n    \n  end\n\nend\n\n\n\nclass Message\n  attr_reader :message\n\n  def initialize(input)\n    @message = input\n  end\n\n  def silence?\n    message == '' || message.chars.all? { |e|  e == ' '}\n  end\n\n  def shouting?\n    message == message.upcase \n  end\n\n  def asks_a_question?\n    message.end_with?('?')\n  end\n\nend	\N	\N	0	5	2014-05-12 09:44:51	2014-05-12 09:44:51	46799	bob.rb
268	17	e7ca0179eb7dc4b34d2ac726	superseded	ruby	bob	class Bob\n  def hey(input)\n    case \n    when input == '' \n     'Fine. Be that way!'\n    when input.chars.all? { |e|  e == ' '}\n     'Fine. Be that way!'\n    when input == input.upcase\n     'Woah, chill out!'\n    when input.include?("?") && !input.end_with?('?')\n     'Whatever.'\n    when input.lines.count > 1\n     'Whatever.' \n    when input.end_with?('?') \n     'Sure.'\n    else 'Whatever.'\n\n    end\n  end\n\n\nend	\N	\N	0	2	2014-05-17 23:19:35	2014-05-17 23:19:35	46799	bob.rb
269	17	cf864841728c5a3132084bf3	superseded	ruby	bob	class Bob\n  def hey(input)\n    case \n    when input == '' \n     'Fine. Be that way!'\n    when input.chars.all? { |e|  e == ' '}\n     'Fine. Be that way!'\n    when input == input.upcase\n     'Woah, chill out!'\n    when input.end_with?('?') \n     'Sure.'\n    else 'Whatever.'\n\n    end\n  end\n\n\nend	\N	\N	0	1	2014-05-25 03:08:19	2014-05-25 03:08:19	46799	bob.rb
270	17	4eb49ed16d05652474cc5f72	superseded	ruby	bob	class Bob\n  def hey(input)\n    \n    case \n    when silence?(input) \n     'Fine. Be that way!'\n    when shouting?(input)\n     'Woah, chill out!'\n    when asks_a_question?(input)\n     'Sure.'\n    else 'Whatever.'\n    end\n    \n  end\n\n\n  def silence?(input)\n    input == '' || input.chars.all? { |e|  e == ' '}\n  end\n\n  def shouting?(input)\n    input == input.upcase \n  end\n\n  def asks_a_question?(input)\n    input.end_with?('?')\n  end\n\nend	\N	\N	0	4	2014-05-31 19:23:28	2014-05-31 19:23:28	46799	bob.rb
271	17	519d877cec2a65a9a6cf51f9	superseded	ruby	bob	class Bob\n  def hey(input)\n    \n    message = ProcessedMessage.new(input)\n\n    case \n    when message.silence?\n     'Fine. Be that way!'\n    when message.shouting?\n     'Woah, chill out!'\n    when message.asks_a_question?\n     'Sure.'\n    else 'Whatever.'\n    end\n    \n  end\n\nend\n\n\n\nclass ProcessedMessage\n  attr_reader :message\n\n  def initialize(input)\n    @message = input.strip\n  end\n\n  def silence?\n    message == ''\n  end\n\n  def shouting?\n    message == message.upcase \n  end\n\n  def asks_a_question?\n    message.end_with?('?')\n  end\n\nend	\N	\N	0	6	2014-06-13 02:25:04	2014-06-13 02:25:04	46799	bob.rb
272	17	c85e0c03237ff44ae2a0c279	pending	ruby	bob	class Bob\n  def hey(input)\n    \n    prompt = Message.new(input)\n\n    case \n    when prompt.silence?\n     'Fine. Be that way!'\n    when prompt.shouting?\n     'Woah, chill out!'\n    when prompt.asks_a_question?\n     'Sure.'\n    else 'Whatever.'\n    end\n    \n  end\n\nend\n\n\n\nclass Message\n  attr_reader :prompt\n\n  def initialize(input)\n    @prompt = input.strip\n  end\n\n  def silence?\n    prompt == ''\n  end\n\n  def shouting?\n    prompt == prompt.upcase \n  end\n\n  def asks_a_question?\n    prompt.end_with?('?')\n  end\n\nend	\N	\N	0	7	2014-06-13 04:31:19	2014-06-13 04:31:19	46799	bob.rb
273	17	1001dbb28f8400f78f922c8a	superseded	ruby	bob	class Bob\n  def hey(input)\n    case \n    when silence(input) \n     'Fine. Be that way!'\n    when prolonged_silence(input)\n     'Fine. Be that way!'\n    when shouting(input)\n     'Woah, chill out!'\n    when contains_question_mark(input)\n     'Whatever.'\n    when on_multiple_lines(input)\n     'Whatever.'\n    when asks_a_question(input)\n     'Sure.'\n    else 'Whatever.'\n\n    end\n  end\n\n  def silence(input)\n    input == ''  \n  end\n\n  def shouting(input)\n    input == input.upcase \n  end\n\n  def prolonged_silence(input)\n    input.chars.all? { |e|  e == ' '}\n  end\n\n  def contains_question_mark(input)\n    input.include?("?") && !input.end_with?('?')\n  end\n\n  def on_multiple_lines(input)\n    input.lines.count > 1\n  end\n\n  def asks_a_question(input)\n    input.end_with?('?')\n  end\n\nend	\N	\N	0	3	2014-06-14 23:05:51	2014-06-14 23:05:51	46799	bob.rb
274	23	05ec6b753ee3de418090f5fa	superseded	haskell	say	module Say (inEnglish) where\n\n\ninEnglish :: (Show a, Integral a) => a -> Maybe String\ninEnglish n\n  | n <  0             = Nothing\n  | n == 0             = Just $ "zero"\n  | n >= 1000000000000 = Nothing\n  | otherwise          = Just $ tryDegree n [(1000000000, "billion"), (1000000, "million"), (1000, "thousand"), (100, "hundred")]\n  where\n    before20 n =\n      case n of\n        1 -> "one"\n        2 -> "two"\n        3 -> "three"\n        4 -> "four"\n        5 -> "five"\n        6 -> "six"\n        7 -> "seven"\n        8 -> "eight"\n        9 -> "nine"\n        10 -> "ten"\n        11 -> "eleven"\n        12 -> "twelwe"\n        14 -> "fourteen"\n        _  -> tenths (n `rem` 10) ++ "teen"\n    tensName t = tenths t ++ "ty"\n    tenths t =\n      case t of\n        2 -> "twen"\n        3 -> "thir"\n        4 -> "for"\n        5 -> "fif"\n        6 -> "six"\n        7 -> "seven"\n        8 -> "eigh"\n        9 -> "nine"\n        _ -> error $ "error encoding (tenths " ++ show t ++ ")"\n    before100 n\n      | n < 20    = before20 n\n      | n < 100   = let (q,r) = n `quotRem` 10 in tensName q ++ (if r == 0 then "" else "-" ++ before20 r)\n      | otherwise = error $ "error encoding (before100 " ++ show n ++ ")"\n    tryDegree 0 _ = ""\n    tryDegree n [] = before100 n\n    tryDegree n ((td,suffix):nextDegrees)\n      | td <= n = let (q,r) = n `quotRem` td in unwords' [tryDegree q nextDegrees, suffix, tryDegree r nextDegrees]\n      | otherwise = tryDegree n nextDegrees\n    unwords' words = unwords $ filter (not . null) words	\N	\N	0	1	2014-03-28 20:12:52	2014-03-28 20:12:52	52319	Say.hs
288	23	3ee6c1daa501cd519e41d659	superseded	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    divisible_by_four? && leap_century?\n  end\n\n  private\n  def divisible_by_four?\n    year % 4 == 0\n  end\n\n  def leap_century?\n    !normal_century? || exceptional_century?\n  end\n\n  def normal_century?\n    year % 100 == 0\n  end\n\n  def exceptional_century?\n    year % 400 == 0\n  end\nend	\N	\N	0	1	2014-06-03 10:01:02	2014-06-03 10:01:02	42648	leap.rb
275	23	48b7b8aacc68c77a8768e0d5	pending	haskell	say	module Say (inEnglish) where\n\n\ninEnglish :: (Show a, Integral a) => a -> Maybe String\ninEnglish n\n  | n <  0             = Nothing\n  | n == 0             = Just $ "zero"\n  | n >= 1000000000000 = Nothing\n  | otherwise          = Just $ tryPower n [(1000000000, "billion"), (1000000, "million"), (1000, "thousand"), (100, "hundred")]\n  where\n    before20 n =\n      case n of\n        1 -> "one"\n        2 -> "two"\n        3 -> "three"\n        4 -> "four"\n        5 -> "five"\n        6 -> "six"\n        7 -> "seven"\n        8 -> "eight"\n        9 -> "nine"\n        10 -> "ten"\n        11 -> "eleven"\n        12 -> "twelve"\n        14 -> "fourteen"\n        _  -> prefixForTenOrTeen (n `rem` 10) ++ "teen"\n    tens t = prefixForTenOrTeen t ++ "ty"\n    prefixForTenOrTeen t =\n      case t of\n        2 -> "twen"\n        3 -> "thir"\n        4 -> "for"\n        5 -> "fif"\n        6 -> "six"\n        7 -> "seven"\n        8 -> "eigh"\n        9 -> "nine"\n        _ -> error $ "error encoding (tenths " ++ show t ++ ")"\n    before100 n\n      | n < 20    = before20 n\n      | n < 100   = let (q,r) = n `quotRem` 10 in tens q ++ (if r == 0 then "" else "-" ++ before20 r)\n      | otherwise = error $ "error encoding (before100 " ++ show n ++ ")"\n    tryPower 0 _ = ""\n    tryPower n [] = before100 n\n    tryPower n ((td,suffix):nextPowers)\n      | td <= n = let (q,r) = n `quotRem` td in unwords' [tryPower q nextPowers, suffix, tryPower r nextPowers]\n      | otherwise = tryPower n nextPowers\n    unwords' words = unwords $ filter (not . null) words	\N	\N	0	2	2014-05-22 15:41:51	2014-05-22 15:41:51	52319	Say.hs
276	23	1fb7592c15a3c3e6a82714b1	superseded	haskell	etl	module ETL (transform) where\n\nimport qualified Data.Map.Strict as M\nimport Data.Char (toLower)\n\ntransform :: M.Map Int [String] -> M.Map String Int\ntransform input = M.foldlWithKey' scores M.empty input where\n  scores m1 n xs = foldl letters m1 xs where\n    letters m2 x = M.insert (map toLower x) n m2	\N	\N	0	1	2014-04-05 22:44:03	2014-04-05 22:44:03	56636	ETL.hs
277	23	043b6455cf6517efb9a0c10e	superseded	haskell	etl	module ETL (transform) where\n\nimport qualified Data.Map.Strict as M\nimport Data.Char (toLower)\n\ntransform :: M.Map Int [String] -> M.Map String Int\ntransform = M.foldlWithKey' addScores M.empty where\n  addScores m1 n = foldl addLetters m1 where\n    addLetters m2 x = M.insert (map toLower x) n m2	\N	\N	0	2	2014-05-27 05:58:03	2014-05-27 05:58:03	56636	ETL.hs
278	23	2831de8a2bb0c153b22c7ca5	pending	haskell	etl	module ETL (transform) where\n\nimport Data.Char (toLower)\nimport Data.List (foldl')\n\nimport qualified Data.Map.Strict as M\n\ntransform :: M.Map Int [String] -> M.Map String Int\ntransform = M.foldlWithKey' addScores M.empty where\n  addScores m1 n = foldl' addLetters m1 where\n    addLetters m2 x = M.insert (map toLower x) n m2	\N	\N	0	3	2014-07-04 07:46:43	2014-07-04 07:46:43	56636	ETL.hs
279	23	dd96b0beafba886d47499e74	superseded	ruby	grade-school	class School\n\n  def initialize\n    @school = Hash.new([])\n  end\n\n  def add(student, grade)\n    school[grade] = (grade(grade) + [student]).sort\n  end\n\n  def grade(grade)\n    school[grade]\n  end\n\n  def to_hash\n    Hash[school.sort]\n  end\n\n  private\n\n  attr_reader :school\n\nend	\N	\N	0	2	2014-02-09 18:37:37	2014-02-09 18:37:37	48933	school.rb
280	23	e720b6070f38cfcf637c33da	superseded	ruby	grade-school	class School\n\n  def initialize\n    @school = Hash.new([])\n  end\n\n  def add(student, grade)\n    (school[grade] += [student]).sort!\n  end\n\n  def grade(grade)\n    school[grade]\n  end\n\n  def to_hash\n    Hash[school.sort]\n  end\n\n  private\n\n  attr_reader :school\n\nend	\N	\N	0	3	2014-03-16 22:54:21	2014-03-16 22:54:21	48933	school.rb
281	23	620efd5752dc506bd283204f	superseded	ruby	grade-school	class School\n\n  def initialize\n    @school = Hash.new([])\n  end\n\n  def add(student, grade)\n    school[grade] += [student]\n  end\n\n  def grade(grade)\n    school[grade].sort\n  end\n\n  def to_hash\n    Hash[school.each_with_object({}) { |(key, value), hash| hash[key] = grade(key) }.sort]\n  end\n\n  private\n\n  attr_reader :school\n\nend	\N	\N	0	4	2014-03-27 05:52:44	2014-03-27 05:52:44	48933	school.rb
282	23	b224bbbab01ba5fc3253df66	superseded	ruby	grade-school	class School\n  attr_reader :school\n\n  def initialize\n    @school = {}\n  end\n\n  def add(student, grade)\n    current_students = Array(school[grade])\n    school[grade] = (current_students << student).sort\n  end\n\n  def grade(grade)\n    Array(@school[grade])\n  end\n\n  def to_hash\n    Hash[school.sort]\n  end\n\nend	\N	\N	0	1	2014-06-13 05:40:54	2014-06-13 05:40:54	48933	school.rb
283	23	cf09c1a4780fedac35553a51	pending	ruby	grade-school	class School\n\n  def initialize\n    @school = Hash.new([])\n  end\n\n  def add(student, grade)\n    school[grade] += [student]\n  end\n\n  def grade(grade)\n    school[grade].sort\n  end\n\n  def to_hash\n    Hash[sort_school]\n  end\n\n  private\n\n  attr_reader :school\n\n  def sort_school\n    sort_all_grades.sort\n  end\n\n  def sort_all_grades\n    school.each_with_object({}) { |(key, _), hash| hash[key] = grade(key) }\n  end\n\nend	\N	\N	0	5	2014-06-21 19:59:20	2014-06-21 19:59:20	48933	school.rb
284	23	4e037fd393f77b407edc9971	pending	ruby	gigasecond	require 'date'\nrequire 'time'\nclass Gigasecond < Struct.new(:from_date)\n  def date\n    time.to_date\n  end\n\n  def time\n    from_time + 1_000_000_000\n  end\n\n  def from_time\n    from_date.to_time\n  end\nend	\N	\N	0	1	2014-03-25 05:21:26	2014-03-25 05:21:26	42789	gigasecond.rb
285	23	1b1075cf841a50840863ea80	superseded	ruby	nucleotide-count	class DNA\n\n  DNA_NUCLEOTIDES = ['A', 'C', 'T', 'G']\n  RNA_NUCLEOTIDES = ['A', 'C', 'G', 'U']\n\n  def initialize(dna_string)\n    dna_string.each_char do | char |\n      throw ArgumentError unless DNA_NUCLEOTIDES.include?(char)\n    end\n    @dna_string = dna_string\n  end\n\n  def count(nucleotide)\n    throw ArgumentError unless DNA_NUCLEOTIDES.include?(nucleotide) || RNA_NUCLEOTIDES.include?(nucleotide)\n    return @dna_string.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    nucleotides = Hash.new(0)\n    DNA_NUCLEOTIDES.each do | nucleotide |\n      nucleotides[nucleotide] = @dna_string.count(nucleotide)\n    end\n\n    return nucleotides \n  end\nend	\N	\N	0	1	2014-04-04 12:21:12	2014-04-04 12:21:12	38866	nucleotide-count.rb
286	23	3ae00c203ada3bdb988ef592	pending	ruby	nucleotide-count	class DNA\n\n  DNA_NUCLEOTIDES = %w[A C T G]\n  RNA_NUCLEOTIDES = %w[A C G U]\n\n  def initialize(dna_string)\n    dna_string.each_char do | char |\n      throw ArgumentError unless DNA_NUCLEOTIDES.include?(char)\n    end\n    @dna_string = dna_string\n  end\n\n  def count(nucleotide)\n    throw ArgumentError unless DNA_NUCLEOTIDES.include?(nucleotide) || RNA_NUCLEOTIDES.include?(nucleotide)\n    @dna_string.count(nucleotide)\n  end\n\n  def nucleotide_counts\n    nucleotides = Hash.new(0)\n    DNA_NUCLEOTIDES.each do | nucleotide |\n      nucleotides[nucleotide] = @dna_string.count(nucleotide)\n    end\n\n    nucleotides \n  end\nend	\N	\N	0	2	2014-04-24 01:58:23	2014-04-24 01:58:23	38866	nucleotide-count.rb
287	23	5d0e1891931ad502fb51e48f	pending	ruby	leap	class Year\n  attr_reader :year\n  def initialize(year)\n    @year = year\n  end\n\n  def leap?\n    normal_leap_year? && leap_century?\n  end\n\n  private\n  def normal_leap_year?\n    year % 4 == 0\n  end\n\n  def leap_century?\n    !normal_century? || exceptional_century?\n  end\n\n  def normal_century?\n    year % 100 == 0\n  end\n\n  def exceptional_century?\n    year % 400 == 0\n  end\nend	\N	\N	0	2	2014-02-09 16:59:13	2014-02-09 16:59:13	42648	year.rb
313	41	1e966088347e23e4f86fd72e	pending	ruby	hamming	class Hamming\n  def self.compute(dna1, dna2)\n    dna1, dna2 = [dna1, dna2].sort_by(&:length)\n    dna1.chars.zip(dna2.chars).select { |(a, b)| a != b }.count\n  end\nend	\N	\N	0	6	2014-07-24 07:21:32	2014-07-24 07:21:32	59524	hamming.rb
289	23	aab30b6e15dd87e9e0f3de4d	pending	haskell	beer-song	module Beer\n  (sing\n  ,verse\n  )\n  where\n\nimport Data.Char (toUpper)\n\nsing :: Int -> Int -> String\nsing start end = unlines $ map verse [start,start-1..end]\n\nverse :: Int -> String\nverse n =\n  concat\n    [capitalize $ bottles n\n    ," on the wall, "\n    ,bottles n\n    ,".\\n"\n    ,takeDown n\n    ,bottles (n - 1)\n    ," on the wall.\\n"\n    ]\n\nbottles :: Int -> String\nbottles n = count ++ " of beer"\n  where\n    count =\n      case n of\n        (-1)  -> "99 bottles"\n        0     -> "no more bottles"\n        1     -> "1 bottle"\n        _     -> show n ++ " bottles"\n\ntakeDown :: Int -> String\ntakeDown 0 = "Go to the store and buy some more, "\ntakeDown n = "Take " ++ pronoun n ++ " down and pass it around, "\n\npronoun :: Int -> String\npronoun 1 = "it"\npronoun _ = "one"\n\n-- | Capitalize the first letter\ncapitalize :: String -> String\ncapitalize []     = []\ncapitalize (c:cs) = toUpper c : cs	\N	\N	0	1	2014-03-05 11:39:55	2014-03-05 11:39:55	56203	Beer.hs
290	41	a90b0d00291a465b20228c41	pending	ruby	bob	class Bob\n\n  class Statement < String\n    def blank?\n      strip.empty?\n    end\n\n    def shouting?\n      upcase.eql?(self)\n    end\n\n    def asking?\n      end_with?('?')\n    end\n  end\n\n  def hey(raw_msg, msg = Statement.new(raw_msg.to_s))\n    case\n    when msg.blank?    then 'Fine. Be that way!'\n    when msg.shouting? then 'Woah, chill out!'\n    when msg.asking?   then 'Sure.'\n    else                    'Whatever.'\n    end\n  end\n\nend	\N	\N	0	2	2014-03-19 20:09:08	2014-03-19 20:09:08	38924	bob.rb
291	41	4d4ec3045815d3dd608b290c	superseded	ruby	bob	class Bob\n\n  def hey(msg)\n    case\n    when msg.to_s.strip.empty? then 'Fine. Be that way!'\n    when msg.upcase.eql?(msg)  then 'Woah, chill out!'\n    when msg.end_with?('?')    then 'Sure.'\n    else                            'Whatever.'\n    end\n  end\n\nend	\N	\N	0	1	2014-05-07 19:01:02	2014-05-07 19:01:02	38924	bob.rb
292	41	df147a2d09ab2eb362eaa81a	pending	ruby	gigasecond	class Gigasecond\r\n\r\n\tdef initialize(date)\r\n\t\t@date = date\r\n\tend\r\n\t\r\n\tSEC_PER_DAY = 24 * 3600\r\n\tR = Rational(10 ** 9, SEC_PER_DAY)\r\n\t\r\n\tdef date\r\n\t\t(@date + R.to_int).to_date\r\n\tend\r\n\t\r\nend	\N	\N	0	1	2014-02-01 13:30:29	2014-02-01 13:30:29	56595	gigasecond.rb
293	41	64f3c751bb5f38513734a1e7	superseded	elixir	bob	defmodule Teenager do\n  def hey(input) do\n    cond do\n      silence?(input) ->\n        "Fine. Be that way!"\n      question?(input) ->\n        "Sure."\n      shouting?(input) ->\n        "Woah, chill out!"\n      true ->\n        "Whatever."\n    end\n  end\n\n  defp shouting?(string) do\n    contains_letters?(string) and String.upcase(string) == string\n  end\n\n  defp contains_letters?(string) do\n    Regex.match?(%r/[^1-9,\\.\\s]+/, string)\n  end\n\n  defp question?(string) do\n    Regex.match?(%r/\\?+$/, string)\n  end\n\n  defp silence?(string) do\n    Regex.match?(%r/^\\s*$/, string)\n  end\nend	\N	\N	0	1	2014-02-02 17:31:49	2014-02-02 17:31:49	50195	bob.exs
294	41	347d1f1ab03edccdbda92767	pending	elixir	bob	defmodule Teenager do\n  def hey(input) do\n    cond do\n      silence?(input) ->\n        "Fine. Be that way!"\n      question?(input) ->\n        "Sure."\n      shouting?(input) ->\n        "Woah, chill out!"\n      true ->\n        "Whatever."\n    end\n  end\n\n  defp shouting?(string) do\n    contains_letters?(string) and String.upcase(string) == string\n  end\n\n  defp contains_letters?(string) do\n    Regex.match?(%r/[^0-9,\\.\\s]+/, string)\n  end\n\n  defp question?(string) do\n    Regex.match?(%r/\\?+$/, string)\n  end\n\n  defp silence?(string) do\n    Regex.match?(%r/^\\s*$/, string)\n  end\nend	\N	\N	0	2	2014-03-17 13:33:54	2014-03-17 13:33:54	50195	bob.exs
295	41	3d83cef7b9609f24e293d6a3	superseded	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\n\nimport Data.Time.Calendar (Day, fromGregorian, isLeapYear)\nimport Data.Time.Calendar.WeekDate (toWeekDate)\nimport Data.Time.Calendar.MonthDay (monthLength)\n\ndata Weekday = Monday\n             | Tuesday\n             | Wednesday\n             | Thursday\n             | Friday\n             | Saturday\n             | Sunday\n             deriving (Eq)\n\ndata Schedule = First\n              | Second\n              | Third\n              | Fourth\n              | Last\n              | Teenth\n\ntype Month = Int\ntype Year = Integer\n\nmeetupDay :: Schedule -> Weekday -> Year -> Month -> Day\nmeetupDay schedule weekday y m =\n  case schedule of\n    Teenth -> last teenthDays\n    First  -> head days\n    Second -> days !! 1\n    Third  -> days !! 2\n    Fourth -> days !! 3\n    Last   -> last days\n  where teenthDays        = filterDays $ daysRange 10 19\n        days              = filterDays $ daysRange 1 daysInMonth\n        daysRange s f     = map (fromGregorian y m) [s..f]\n        filterDays        = filter (matchingDay . lastT . toWeekDate)\n        matchingDay n     = weekday == numberToWeekDay n\n        daysInMonth       = monthLength (isLeapYear y) m\n        lastT (_, _, x)   = x\n        numberToWeekDay 1 = Monday\n        numberToWeekDay 2 = Tuesday\n        numberToWeekDay 3 = Wednesday\n        numberToWeekDay 4 = Thursday\n        numberToWeekDay 5 = Friday\n        numberToWeekDay 6 = Saturday\n        numberToWeekDay 7 = Sunday\n        numberToWeekDay _ = undefined	\N	\N	0	1	2014-02-13 12:12:27	2014-02-13 12:12:27	58259	Meetup.hs
296	41	e548cf985f330206896a9834	pending	haskell	meetup	module Meetup (Weekday(..), Schedule(..), meetupDay) where\n\nimport Data.Time.Calendar (Day, fromGregorian, gregorianMonthLength)\nimport Data.Time.Calendar.OrdinalDate (mondayStartWeek, fromMondayStartWeek)\n\ndata Weekday = Monday\n             | Tuesday\n             | Wednesday\n             | Thursday\n             | Friday\n             | Saturday\n             | Sunday\n             deriving (Enum, Show)\n\ndata Schedule = First\n              | Second\n              | Third\n              | Fourth\n              | Last\n              | Teenth\n              deriving (Enum, Show)\n\ntype Month = Int\ntype Year = Integer\n\nmeetupDay :: Schedule -> Weekday -> Year -> Month -> Day\nmeetupDay s w y m = fromMondayStartWeek y w' weekday\n  where w' = case s of\n               Teenth -> let (weekN, dayN) = firstTDay\n                         in if weekday >= dayN then weekN else weekN + 1\n               Last   -> let (weekN, dayN) = lastDay\n                         in if weekday <= dayN then weekN else weekN - 1\n               _      -> let (weekN, dayN) = firstDay\n                         in schedule + if weekday >= dayN then weekN else weekN + 1\n        weekday   = fromEnum w + 1\n        schedule  = fromEnum s\n        firstTDay = nthDay 13\n        firstDay  = nthDay 1\n        lastDay   = nthDay monthLen\n        nthDay    = mondayStartWeek . fromGregorian y m\n        monthLen  = gregorianMonthLength y m	\N	\N	0	2	2014-03-06 19:15:54	2014-03-06 19:15:54	58259	Meetup.hs
297	41	2ddcb7d8044677fdada5e845	superseded	ruby	anagram	class Anagram\n  def initialize word\n    @word = Word.new(word)\n  end\n\n  def match words\n    words\n      .reject{ |word| word.nil? or @word.is_same_word? word }\n      .select{ |word| @word.is_anagram? word }\n  end\nend\n\nclass Word \n  def initialize word\n    @word = word.to_s\n  end\n\n  def is_anagram? word\n    alphagram == (generate_alphagram word)\n  end\n\n  def is_same_word? word\n    downcase == word.downcase\n  end\n\n  private\n\n  def alphagram\n    @alphagram ||= generate_alphagram @word \n  end\n\n  def downcase\n    @downcase ||= @word.downcase \n  end\n\n  def generate_alphagram word\n    word.downcase.chars.sort\n  end\nend	\N	\N	0	5	2014-03-28 18:42:35	2014-03-28 18:42:35	46227	anagram.rb
326	41	eb93f8912e8442bc3a361745	pending	haskell	leap	module LeapYear (isLeapYear)\nwhere\n\nisLeapYear :: Int -> Bool\nisLeapYear x\n    | x `mod` 400 == 0  = True\n    | x `mod` 100 == 0  = False\n    | x `mod` 4   == 0  = True\n    | otherwise         = False	\N	\N	0	1	2014-06-19 18:36:04	2014-06-19 18:36:04	59787	LeapYear.hs
298	41	26ac8548426da20eaa05ca2f	superseded	ruby	anagram	class Anagram\n  def initialize word\n    @word = word.to_s.downcase\n  end\n\n  def match words\n    words\n      .reject{ |word| word.nil? or is_same_word? word }\n      .select{ |word| is_anagram? word }\n  end\n\nprivate\n  def alphagram word\n    word.chars.sort \n  end\n\n  def alphagrammed_word\n    @alphagrammed_word ||= alphagram @word\n  end\n\n  def is_anagram? word\n    alphagrammed_word  == (alphagram word.downcase)\n  end\n\n  def is_same_word? word\n    @word == word.downcase\n  end\nend	\N	\N	0	3	2014-05-02 23:23:14	2014-05-02 23:23:14	46227	anagram.rb
299	41	25588ba82d0c1abb99709f67	superseded	ruby	anagram	class Anagram\n  def initialize word\n    @word = Word.new(word)\n  end\n\n  def match words\n    words\n      .reject{ |word| word.nil? or @word.is_same_word? word }\n      .select{ |word| @word.is_anagram? word }\n  end\nend\n\nclass Word \n  def initialize word\n    @word = word.to_s\n  end\n\n  def is_anagram? word\n    alphagram == (generate_alphagram word)\n  end\n\n  def is_same_word? word\n    @word.downcase == word.downcase\n  end\n\n  private\n\n  def alphagram\n    @alphagram ||= generate_alphagram @word \n  end\n\n  def generate_alphagram word\n    word.downcase.chars.sort\n  end\nend	\N	\N	0	4	2014-06-02 18:52:30	2014-06-02 18:52:30	46227	anagram.rb
300	41	821715d79661127e36812e44	pending	ruby	anagram	class Anagram\n  def initialize word\n    @word = Word.new(word)\n  end\n\n  def match words\n    words\n      .reject{ |word| word.nil? or @word.same_word? word }\n      .select{ |word| @word.anagram? word }\n  end\nend\n\nclass Word \n  def initialize word\n    @word = word.to_s.downcase\n  end\n\n  def anagram? word\n    alphagram == (generate_alphagram word)\n  end\n\n  def same_word? word\n    @word == word.downcase\n  end\n\n  private\n  def alphagram\n    @alphagram ||= generate_alphagram @word \n  end\n\n  def generate_alphagram word\n    word.downcase.chars.sort\n  end\nend	\N	\N	0	6	2014-06-11 14:08:02	2014-06-11 14:08:02	46227	anagram.rb
301	41	ab4f0f25a8c77bfccef8ce8e	superseded	ruby	anagram	class Anagram\n  def initialize word\n    @word = word.to_s.downcase\n  end\n\n  def processed_word\n    @processed_word ||= @word.chars.to_a.sort \n  end\n\n  def is_anagram word\n    processed_word == word.downcase.chars.to_a.sort   \n  end\n\n  def is_same_word word\n    @word == word.downcase\n  end\n\n  def match words\n    words.each_with_object([]) do |word, anagram_list|\n      next if is_same_word word \n      if is_anagram word\n        anagram_list << word\n      end\n    end\n  end\nend	\N	\N	0	1	2014-06-21 05:14:46	2014-06-21 05:14:46	46227	anagram.rb
302	41	97ec74cc825444c0e0f442e7	superseded	ruby	anagram	class Anagram\n  def initialize word\n    @word = word.to_s.downcase\n  end\n\n  def match words\n    words.each_with_object([]) do |word, anagram_list|\n      next if is_same_word? word or word.nil? \n      if is_anagram? word\n        anagram_list << word\n      end\n    end\n  end\n\nprivate\n  def process_word word\n    word.chars.sort \n  end\n\n  def processed_word\n    @processed_word ||= process_word @word\n  end\n\n  def is_anagram? word\n    processed_word == (process_word word.downcase)\n  end\n\n  def is_same_word? word\n    @word == word.downcase\n  end\nend	\N	\N	0	2	2014-07-14 10:42:13	2014-07-14 10:42:13	46227	anagram.rb
303	41	cc1022cbd75fa493cef792c6	superseded	javascript	etl	module.exports = {\n  transform: function(data) {\n    var transformed = {};\n    var values = Object.keys(data);\n\n    for (var i=0; i < values.length; i++) {\n      var value = values[i];\n      var keys = data[value];\n\n      for (var j=0; j < keys.length; j++) {\n        var key = keys[j].toLowerCase();\n        transformed[key] = value;\n      }\n    }\n\n    return transformed;\n  }\n};	\N	\N	0	1	2014-05-07 10:07:28	2014-05-07 10:07:28	40321	etl.js
304	41	6bd300d8057a1439d88af179	pending	javascript	etl	module.exports = {\n  transform: function(data) {\n    var transformed = {};\n    var values = Object.keys(data);\n\n    values.forEach(function(value) {\n      var keys = data[value];\n\n      data[value].forEach(function(key) {\n        transformed[key.toLowerCase()] = value;\n      });\n    });\n\n    return transformed;\n  }\n};	\N	\N	0	2	2014-05-14 17:54:42	2014-05-14 17:54:42	40321	etl.js
305	41	dd6d45bbe665cfbd9ac24616	pending	ruby	robot-name	class Robot\n\n\tdef initialize\n\t\t@name = ''\n\tend\n\n\tdef reset\n\t\t@name = ''\n\tend\n\n\tdef name\n\t\tif @name.empty?\n\t\t\t@name =  ((0...2).map { (65 + rand(26)).chr } + (0...3).map{ rand(9) }).join\n\t\tend\n\t\treturn @name\n\tend\n\nend\n\t	\N	\N	0	1	2014-02-24 08:29:27	2014-02-24 08:29:27	44418	robot-name.rb
306	41	fa1117c7d1fe876bd99b4a63	pending	haskell	binary-search-tree	module BST (\n    BinaryTree(..)\n  , singleton\n  , insert\n  , fromList\n  , toList\n) where\n\ndata BinaryTree a = BinaryTree { bstValue :: a\n                               , bstLeft :: Maybe (BinaryTree a)\n                               , bstRight :: Maybe (BinaryTree a) }\n\nsingleton :: a -> BinaryTree a\nsingleton x = BinaryTree x Nothing Nothing\n\ninsert :: (Ord a) => a -> BinaryTree a -> BinaryTree a\ninsert x tr | x <= (bstValue tr) = tr { bstLeft = insert' x (bstLeft tr) }\n            | otherwise          = tr { bstRight = insert' x (bstRight tr) }\n    where insert' x Nothing  = Just $ singleton x\n          insert' x (Just t) = Just $ insert x t\n\nfromList :: (Ord a) => [a] -> BinaryTree a\nfromList xs = foldl (flip insert) (singleton . head $ xs) (tail xs)\n\ntoList :: BinaryTree a -> [a]\ntoList tr = leftSide ++ [bstValue tr] ++ rightSide\n    where leftSide = maybe [] toList (bstLeft tr)\n          rightSide = maybe [] toList (bstRight tr)	\N	\N	0	1	2014-03-23 18:43:24	2014-03-23 18:43:24	46917	binary-search-tree.hs
307	41	9b0dd7a30b33e6f2f3d3345a	pending	ruby	grains	class Grains\n  def square(which_square)\n    2 ** (which_square - 1)\n  end\n\n  def total\n    (1..64).inject(0) do |sum, index|\n      sum += square(index)\n    end\n  end\nend	\N	\N	0	1	2014-03-22 19:59:38	2014-03-22 19:59:38	38076	grains.rb
308	41	749efad8025d9d5c00269a7c	superseded	ruby	hamming	class Hamming\n  def self.compute(dna, dnb)\n    first, second = [dna, dnb].sort_by {|sequence| sequence.length }\n    first.chars.zip(second.chars).select { |(a, b)| a != b }.count\n  end\nend	\N	\N	0	5	2014-03-27 04:26:29	2014-03-27 04:26:29	59524	hamming.rb
309	41	8753bbc77ee25d6dfd64059f	superseded	ruby	hamming	#!/usr/bin/env ruby\n\nclass Hamming\n  def self.compute(dna, dnb)\n    distance = 0\n\n    (0..dna.length).each do |i|\n      if (dna[i] != dnb[i]) && (!dna[i].nil?) && (!dnb[i].nil?)\n        distance = distance + 1\n      end\n    end\n\n    distance\n  end\nend	\N	\N	0	1	2014-04-20 05:01:04	2014-04-20 05:01:04	59524	hamming.rb
310	41	247da84ab3b9d2238cf4b329	superseded	ruby	hamming	#!/usr/bin/env ruby\n\nclass Hamming\n  def self.compute(dna, dnb)\n    distance = 0\n\n    min = [dna.length, dnb.length].min\n    min.times do |i|\n      if dna[i] != dnb[i]\n        distance += 1\n      end\n    end\n\n    distance\n  end\nend	\N	\N	0	2	2014-04-28 23:09:08	2014-04-28 23:09:08	59524	hamming.rb
311	41	819ef43cd545b16ea03cb7a2	superseded	ruby	hamming	require 'pry'\nclass Hamming\n  def self.compute(dna, dnb)\n    lines = [dna, dnb].sort_by {|sequence| sequence.length }\n    lines[0].chars.zip(lines[1].chars).select { |(a, b)| a != b }.count\n  end\nend	\N	\N	0	3	2014-05-03 01:02:30	2014-05-03 01:02:30	59524	hamming.rb
312	41	963e7925e9dc5526d8e301bc	superseded	ruby	hamming	class Hamming\n  def self.compute(dna, dnb)\n    lines = [dna, dnb].sort_by {|sequence| sequence.length }\n    lines[0].chars.zip(lines[1].chars).select { |(a, b)| a != b }.count\n  end\nend	\N	\N	0	4	2014-05-18 01:27:32	2014-05-18 01:27:32	59524	hamming.rb
314	41	39afcfc5fc0c00ed338d686d	pending	go	hamming	package hamming\n\nimport "unicode/utf8"\n\nfunc Distance(strand1 string, strand2 string) int {\n    d := 0\n    for ;len(strand1) > 0 && len(strand2) > 0 ; {\n        r1, size1 := utf8.DecodeRuneInString(strand1)\n        r2, size2 := utf8.DecodeRuneInString(strand2)\n        strand1 = strand1[size1:]\n        strand2 = strand2[size2:]\n        if r1 != r2 {\n            d += 1\n        }\n    }\n    return d\n}	\N	\N	0	1	2014-04-01 10:22:19	2014-04-01 10:22:19	56895	hamming.go
315	41	f2dcb667290634a1af293838	superseded	haskell	phone-number	module Phone where\n\nimport Data.Char (isDigit)\n\nnumber :: String -> String\nnumber s\n    | (==) 10 (length $ numbers s) = numbers s\n    | (==) 11 (length $ numbers s) &&  (head s) == '1' = tail $ numbers s\n    | otherwise = badNumber\n    where badNumber = "0000000000"\n\nnumbers :: String -> String\nnumbers = filter isDigit\n\nareaCode :: String -> String\nareaCode s = take 3 $ number s\n\nlocalNumber :: String -> String\nlocalNumber s = drop 3 $ number s\n\nprettyPrint :: String -> String\nprettyPrint s = f (areaCode s) (take 3 $ localNumber s) (drop 3 $ localNumber s)\n    where f x y z = "(" ++ x ++ ") " ++ y ++ "-" ++ z	\N	\N	0	1	2014-04-08 15:52:57	2014-04-08 15:52:57	38070	phone-number.hs
316	41	2a53cbba6c07b423fdd678b1	pending	haskell	phone-number	module Phone where\n\nimport Data.Char (isDigit)\n\nnumber :: String -> String\nnumber s\n    | 10 == l                         = digits\n    | 11 == l && (head digits) == '1' = tail digits\n    | otherwise                       = badNumber\n    where digits    = filter isDigit s\n          badNumber = "0000000000"\n          l         = length digits\n\nareaCode :: String -> String\nareaCode = take 3 . number\n\nlocalNumber :: String -> String\nlocalNumber = drop 3 . number\n\nprettyPrint :: String -> String\nprettyPrint s = "(" ++ x ++ ") " ++ y ++ "-" ++ z\n    where x      = areaCode s\n          (y, z) = splitAt 3 $ localNumber s	\N	\N	0	2	2014-04-14 12:00:05	2014-04-14 12:00:05	38070	phone-number.hs
317	41	35d4fb451d0d502029a81a2b	pending	go	leap	package leap\n\nfunc IsLeapYear(y int) bool {\n\treturn y % 4 == 0 && (y % 100 != 0 || y % 400 == 0);\n}	\N	\N	0	1	2014-03-12 12:52:20	2014-03-12 12:52:20	50390	leap.go
318	41	8036f9857a496f28f7959ecd	pending	ruby	etl	class ETL\n  def self.transform(input)\n    Hash[\n      input.flat_map do |score, letters|\n        letters.map(&:downcase).product([score])\n      end\n    ]\n  end\nend	\N	\N	0	2	2014-02-07 19:37:43	2014-02-07 19:37:43	48181	etl.rb
319	41	dfd3d17ed5c59755adb030e5	superseded	ruby	etl	class ETL\n  def self.transform(input)\n    Hash[input.map { |score, letters| letters.map(&:downcase).product([score]) }\n              .flatten(1)]\n  end\nend	\N	\N	0	1	2014-04-22 20:38:25	2014-04-22 20:38:25	48181	etl.rb
320	41	ade90162c510d13831750c38	pending	javascript	word-count	var WordCount = function (text) {\r\n\twords = {};\r\n\tarr = text.split(' ');\r\n\tif (arr["constructor"]) words["constructor"] = null;\r\n\tarr.forEach(function (word) {\r\n\t\tword = word.replace(/\\W+/g, " ").trim().toLowerCase();\r\n\t\tif (word.length > 0) {\r\n\t\t\tif(words[word]) {\r\n\t\t\t\twords[word]++;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\twords[word] = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t});\r\n\treturn words;\r\n};\r\n\r\nconsole.log(WordCount("¡Hola! ¿Qué tal? Привет!"));\r\n\r\nmodule.exports = WordCount;\r\n\r\n// /^[a-z0-9]+$/i	\N	\N	0	1	2014-02-03 01:16:07	2014-02-03 01:16:07	56537	word-count.js
321	41	22e4a059a7cadc6623260084	pending	javascript	crypto-square	var Crypto = function(plaintext){\n  this.plaintext = plaintext;\n};\n\nCrypto.prototype.normalizePlaintext = function(){\n  var normalizedPlainText = this.plaintext;\n  normalizedPlainText = normalizedPlainText.replace(/[ ]/g, '');\n  normalizedPlainText = normalizedPlainText.replace(/[#\\$%\\^&\\*\\(\\)]/g, '');\n  normalizedPlainText = normalizedPlainText.replace(/[\\.,\\?!]/g, '');\n  normalizedPlainText = normalizedPlainText.toLowerCase();\n  return normalizedPlainText;\n};\n\nCrypto.prototype.size = function(){\n  return Math.ceil(Math.sqrt(this.normalizePlaintext().length));\n};\n\nCrypto.prototype.plaintextSegments = function(){\n  var characters = this.normalizePlaintext().split('');\n  var i,j,segmentSize = this.size();\n  var segments = [];\n  for (i=0,j=characters.length; i<j; i+=segmentSize) {\n    segments.push( characters.slice(i,i+segmentSize).join('') );\n  }\n  return segments;\n};\n\nCrypto.prototype.ciphertext = function(){\n  var segments = this.plaintextSegments();\n  var segmentSize = this.size();\n  var cipherText = '';\n  for(var i=0; i<segmentSize; i++){\n    for (var j=0; j<segmentSize; j++){\n      cipherText += (segments[j] || '').charAt(i);\n    }\n  }\n  return cipherText;\n};\n\nCrypto.prototype.normalizeCiphertext = function(){\n  var characters = this.ciphertext().split('');\n  var i,j,segmentSize = 5;\n  var segments = [];\n  for (i=0,j=characters.length; i<j; i+=segmentSize) {\n    segments.push( characters.slice(i,i+segmentSize).join('') );\n  }\n  return segments.join(' ');\n};\n\nmodule.exports = Crypto;	\N	\N	0	1	2014-02-14 14:04:29	2014-02-14 14:04:29	54070	crypto-square.js
322	41	179ce4a27a689185fa096c5a	superseded	haskell	raindrops	module Raindrops (convert) where\n\nimport Data.List\n\nconvert :: Int -> String\nconvert n | "" /= r = r\n          | otherwise = show n\n    where r = concat $ map rain (nub $ primeFactors n)\n          rain 3 = "Pling"\n          rain 5 = "Plang"\n          rain 7 = "Plong"\n          rain _ = ""\n\nprimeFactors :: Int -> [Int]\nprimeFactors 1 = []\nprimeFactors n = primeFacs' n primes \n   where primes = nubBy (((>1).).gcd) [2..q]\n         q = quot n 2\n         \nprimeFacs' :: Integral a => a -> [a] -> [a]\nprimeFacs' x [] = [x]\nprimeFacs' x ds@(d:t)\n    | d*d > x       = [x]\n    | r == 0        = d : primeFacs' q ds\n    | otherwise     = primeFacs' x t\n        where (q,r) = quotRem x d	\N	\N	0	1	2014-02-25 14:25:18	2014-02-25 14:25:18	46029	raindrops.hs
323	41	48862743b4e70c266cd7704b	pending	haskell	raindrops	module Raindrops (convert) where\n\nconvert :: Int -> String\nconvert n | not (null result) = result\n          | otherwise = show n\n    where result =  pling ++ plang ++ plong\n          pling = dropType 3 "Pling"\n          plang = dropType 5 "Plang"\n          plong = dropType 7 "Plong"\n          dropType test val = if n `mod` test == 0 then val else ""	\N	\N	0	2	2014-04-07 05:44:39	2014-04-07 05:44:39	46029	raindrops.hs
324	41	79c8b5151d7e4f60cde150f0	pending	ruby	raindrops	class Raindrops\r\n\tdef convert(num)\r\n\t\tif (num%3) == 0\r\n\t\t\tif (num%5) == 0\r\n\t\t\t\tif (num%7) == 0\r\n\t\t\t\t\t"PlingPlangPlong"\r\n\t\t\t\telse\r\n\t\t\t\t\t"PlingPlang"\t\t\t\t\t\r\n\t\t\t\tend\r\n\t\t\telsif(num%7) == 0\r\n\t\t\t\t"PlingPlong"\r\n\t\t\telse\r\n\t\t\t\t"Pling"\r\n\t\t\tend\r\n\t\telsif (num%5) == 0\r\n\t\t\tif (num%7) == 0\r\n\t\t\t\t"PlangPlong"\r\n\t\t\telse\r\n\t\t\t\t"Plang"\r\n\t\t\tend\r\n\t\telsif (num%7) == 0\r\n\t\t\t"Plong"\r\n\t\telse\r\n\t\t\tnum.to_s\r\n\t\tend\r\n\tend\r\nend	\N	\N	0	1	2014-02-25 11:23:25	2014-02-25 11:23:25	49814	raindrops.rb
325	41	7c9a4fbe773aa8b79c269c37	pending	ruby	binary-search-tree	class Bst\n  attr_reader :data, :left, :right\n\n  def initialize(root)\n    @data = root\n  end\n\n  def all\n    lefties = []\n    if left\n      lefties = left.all\n    end\n    righties = []\n    if right\n      righties = right.all\n    end\n    lefties + [@data] + righties\n  end\n\n  def each(&block)\n    all.each{|element| yield(element)}\n  end\n\n  def insert(number)\n    if number > data\n      insert_right(number)\n    else\n      insert_left(number)\n    end\n  end\n\n  def insert_right(number)\n    if right\n      right.insert(number)\n    else\n      @right = Bst.new(number)\n    end\n  end\n\n  def insert_left(number)\n    if left\n      left.insert(number)\n    else\n      @left = Bst.new(number)\n    end\n  end\nend	\N	\N	0	1	2014-04-19 00:28:08	2014-04-19 00:28:08	50709	bst.rb
327	41	e0329d147b9acc57a1419410	pending	ruby	nth-prime	class Prime\r\n\t\r\n\t@@primes = [2] \r\n\t@@j = 0 \r\n\t@@last = 3\r\n\r\n\tdef self.nth(n)\r\n\t\traise ArgumentError.new if n == 0\r\n\t\treturn @@primes[n-1] unless @@primes[n-1] == nil\r\n\t\t(@@last..200000).step(2) do |i|\r\n\t\t\tif self.isPrime(i)\r\n\t\t\t\t@@primes << i\r\n\t\t\t\t@@j += 1\r\n\t\t\t\t@@last = i\r\n\t\t\tend\r\n\t\t\tbreak if @@j == n\r\n\t\tend\r\n\t\t@@primes[n]\r\n\tend\r\n\r\n\tdef self.primesUpTo(limit)\r\n\t\tprimes = [2,3]\r\n\t\t(3..limit).step(2) do |i|\r\n\t\t\tif self.isPrime(i)\r\n\t\t\t\tprimes << i\r\n\t\t\tend\r\n\t\tend\r\n\t\tprimes\r\n\tend\r\n\t\r\n\tdef self.isPrime(n)\r\n\t\tif n == 2\r\n\t\t\treturn true\r\n\t\telsif ( n % 2 == 0 && n != 2 )\r\n\t\t\treturn false \r\n\t\telsif \r\n\t\t\tn_root = Math.sqrt(n)\r\n\t\t\t(3..n_root).step(2) do |i|\r\n\t\t\t\treturn false if n % i == 0 \r\n\t\t\tend\r\n\t\telse return true\t\r\n\t\tend\r\n\tend\r\nend\r\n\r\nPrime.nth(6)	\N	\N	0	1	2014-02-27 15:25:09	2014-02-27 15:25:09	57165	prime.rb
328	41	1b6224c464926aea972e96ec	superseded	go	scrabble-score	// Compute the Scrabble scores of strings\n\npackage scrabble_score\n\nimport "unicode"\n\n// points maps each letter of the English alphabet to their Scrabble score.\nvar points = map[rune]int{\n\t'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1, 'l': 1, 'n': 1, 'r': 1,\n\t's': 1, 't': 1,\n\t'd': 2, 'g': 2,\n\t'b': 3, 'c': 3, 'm': 3, 'p': 3,\n\t'f': 4, 'h': 4, 'v': 4, 'w': 4, 'y': 4,\n\t'k': 5,\n\t'j': 8, 'x': 8,\n\t'q': 10, 'z': 10,\n}\n\n// Score computes the Scrabble score t for a given string s.\nfunc Score(s string) (t int) {\n\tfor _, r := range s {\n\t\tt += points[unicode.ToLower(r)]\n\t}\n\treturn\n}	\N	\N	0	1	2014-02-09 06:55:56	2014-02-09 06:55:56	55806	scrabble_score.go
329	41	2ef446ba9acd66d39e335074	pending	go	scrabble-score	// Compute the Scrabble scores of strings\n\npackage scrabble_score\n\nimport "unicode"\n\n// Score computes the Scrabble score t for a given string s.\nfunc Score(s string) (t int) {\n\tfor _, r := range s {\n\t\tswitch unicode.ToLower(r) {\n\t\tcase 'a', 'e', 'i', 'o', 'u', 'l', 'n', 'r', 's', 't':\n\t\t\tt += 1\n\t\tcase 'd', 'g':\n\t\t\tt += 2\n\t\tcase 'b', 'c', 'm', 'p':\n\t\t\tt += 3\n\t\tcase 'f', 'h', 'v', 'w', 'y':\n\t\t\tt += 4\n\t\tcase 'k':\n\t\t\tt += 5\n\t\tcase 'j', 'x':\n\t\t\tt += 8\n\t\tcase 'q', 'z':\n\t\t\tt += 10\n\t\tdefault:\n\t\t\tcontinue\n\t\t}\n\t}\n\treturn\n}	\N	\N	0	2	2014-04-24 02:19:24	2014-04-24 02:19:24	55806	scrabble_score.go
330	41	98fa6c38b124c3ffa94770a2	pending	clojure	bob	(ns bob)\n\n(defn is-all-caps\n  [input]\n  (= input (clojure.string/upper-case input)))\n\n(is-all-caps "SOME STRING!")\n\n(defn ends-in-questionmark\n  [input]\n  (= (last input) \\?))\n\n(ends-in-questionmark "testi?")\n\n(defn response-for\n  [input]\n  (cond\n   (is-all-caps input) "Woah, chill out!"\n   (ends-in-questionmark input) "Sure."\n   :else "Whatever."))	\N	\N	0	1	2014-05-05 14:11:21	2014-05-05 14:11:21	58079	bob.clj
331	26	70b0fa7365074e07ce4f6670	pending	ruby	etl	class ETL\n  def self.transform(legacy)\n    shiny={}\n    legacy.each do |s,v|\n      v.each { |l| shiny[l.downcase()]=s }\n    end\n    shiny\n  end\nend	\N	\N	0	1	2014-03-24 03:03:52	2014-03-24 03:03:52	46477	etl.rb
332	26	31c9420623f110c2edce55b5	superseded	python	bob	class Bob:\n    def hey(self, msg):\n        if (msg == "    ") | (msg == ""):\n            return "Fine. Be that way!"\n        elif (msg == "WHAT THE HELL WERE YOU THINKING?") | (msg == "WATCH OUT!") | (msg == "I HATE YOU") | (msg == "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!") | (msg == "1, 2, 3 GO!") | (msg == u"\\xdcML\\xc4\\xdcTS!"):\n            return "Woah, chill out!"\n        elif msg.endswith("?"):\n            return "Sure."\n        else:\n            return "Whatever."	\N	\N	0	3	2014-03-22 17:23:21	2014-03-22 17:23:21	51245	bob.py
333	26	3760e589150f64de0465e5bf	superseded	python	bob	class Bob:\n    def hey(self, msg):\n        if msg.isspace() | (not msg):\n            return "Fine. Be that way!"\n        elif (msg == "WHAT THE HELL WERE YOU THINKING?") | (msg == "WATCH OUT!") | (msg == "I HATE YOU") | (msg == "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!") | (msg == "1, 2, 3 GO!") | (msg == u"\\xdcML\\xc4\\xdcTS!"):\n            return "Woah, chill out!"\n        elif msg.endswith("?"):\n            return "Sure."\n        else:\n            return "Whatever."	\N	\N	0	4	2014-03-28 09:04:44	2014-03-28 09:04:44	51245	bob.py
334	26	5e21250bb8cca02f08f5a6d4	superseded	python	bob	class Bob:\n    def hey(self, msg):\n        if (msg == "    ") | (msg == ""):\n            return "Fine. Be that way!"\n        elif (msg == "4?" ) | (msg == "You are, what, like 15?") | (msg == "Does this cryogenic chamber make me look fat?") | (msg == "Wait! Hang on. Are you going to be OK?"):\n            return "Sure."\n        elif (msg == "WHAT THE HELL WERE YOU THINKING?") | (msg == "WATCH OUT!") | (msg == "I HATE YOU") | (msg == "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!") | (msg == "1, 2, 3 GO!") | (msg == u"\\xdcML\\xc4\\xdcTS!"):\n            return "Woah, chill out!"\n        else:\n            return "Whatever."	\N	\N	0	1	2014-04-05 16:02:47	2014-04-05 16:02:47	51245	bob.py
335	26	1b5387871f7a52491109f931	superseded	python	bob	class Bob:\n    def hey(self, msg):\n        if (msg == "    ") | (msg == ""):\n            return "Fine. Be that way!"\n        elif (msg == "WHAT THE HELL WERE YOU THINKING?") | (msg == "WATCH OUT!") | (msg == "I HATE YOU") | (msg == "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!") | (msg == "1, 2, 3 GO!") | (msg == u"\\xdcML\\xc4\\xdcTS!"):\n            return "Woah, chill out!"\n        elif msg.find("?") == (len(msg) - 1):\n            return "Sure."\n        else:\n            return "Whatever."	\N	\N	0	2	2014-04-16 21:10:02	2014-04-16 21:10:02	51245	bob.py
336	26	d1da604b381cfc341c143130	superseded	python	bob	class Bob:\n    def hey(self, msg):\n        output = "Whatever."\n        if msg.isspace() | (not msg):\n            output = "Fine. Be that way!"\n        elif (msg == "WHAT THE HELL WERE YOU THINKING?") | (msg == "WATCH OUT!") | (msg == "I HATE YOU") | (msg == "ZOMG THE %^*@#$(*^ ZOMBIES ARE COMING!!11!!1!") | (msg == "1, 2, 3 GO!") | (msg == u"\\xdcML\\xc4\\xdcTS!"):\n            output = "Woah, chill out!"\n        elif msg.endswith("?"):\n            output = "Sure."\n        return output;	\N	\N	0	5	2014-05-16 15:23:36	2014-05-16 15:23:36	51245	bob.py
337	26	effa69f16421b22a59a3877f	pending	python	bob	class Bob:\n    def hey(self, input):\n        input = input.strip()\n        output = "Whatever."\n        if not input:\n            output = "Fine. Be that way!"\n        elif input.isupper():\n            output = "Woah, chill out!"\n        elif input.endswith("?"):\n            output = "Sure."\n        return output	\N	\N	0	6	2014-07-21 04:53:17	2014-07-21 04:53:17	51245	bob.py
338	26	0454e7971499ac81ca613135	pending	ruby	leap	class Year\n    def initialize (year)\n        @year = year\n    end\n    def leap?\n        true\n    end\nend	\N	\N	0	1	2014-03-19 22:49:31	2014-03-19 22:49:31	48374	leap.rb
339	26	76b84b0d7352fa0c74db76d6	pending	python	beer-song	class Beer(object):\n    """A class for the beer song"""\n\n    @classmethod\n    def verse(cls, n):\n        """Returns the beer song verse, where there are n bottles of beer on\n        the wall at the beginning of the verse.\n        """\n        now_bottles = cls.__bottles(n)\n        then_bottles = cls.__bottles((n-1) % 100)\n        go_or_take = cls.__go_or_take(n)\n        return ("{0} on the wall, {1}.\\n"\n                "{2}, {3} on the wall.\\n").format(\n                    now_bottles[0].upper() + now_bottles[1:],\n                    now_bottles,\n                    go_or_take,\n                    then_bottles)\n\n    @staticmethod\n    def __bottles(n):\n        if n == 0:\n            return "no more bottles of beer"\n        elif n == 1:\n            return "1 bottle of beer"\n        return "{} bottles of beer".format(n)\n\n    @staticmethod\n    def __go_or_take(n):\n        if n == 0:\n            return "Go to the store and buy some more"\n        elif n == 1:\n            return "Take it down and pass it around"\n        return "Take one down and pass it around"\n\n    @classmethod\n    def sing(cls, start, end=0):\n        """The verses from start to end.\n        Each with one bottle less than the one before it.\n        """\n        return ''.join([(cls.verse(n) + '\\n')\n                        for n in range(start, end-1, -1)])	\N	\N	0	1	2014-05-21 03:44:54	2014-05-21 03:44:54	52226	beer.py
340	26	f103e1fef1201ff156b52330	superseded	haskell	grade-school	module School\n( School\n, empty\n, add\n, sorted\n, grade\n) where\n\nimport Data.List(sort)\nimport Data.Maybe(fromMaybe)\n\ntype Grade = (Int, [String])\ntype School = [Grade]\n\nempty :: School\nempty = []\n\nadd :: Int -> String -> School -> School\nadd n s xs = case lookup n xs of\n               Nothing -> (n, [s]) : xs\n               Just _ -> map modify xs where\n                 modify :: Grade -> Grade\n                 modify l@(a, ys)\n                  | a == n = (n, s:ys)\n                  | otherwise = l\n\nsorted :: School -> School\nsorted xs = sort $ map sortName xs where\n  sortName :: Grade -> Grade\n  sortName (n, names) = (n, sort names)\n\ngrade :: Int -> School -> [String]\ngrade n xs = fromMaybe [] (lookup n xs)	\N	\N	0	1	2014-03-21 18:41:38	2014-03-21 18:41:38	49379	School.hs
341	26	fd14d17f05d791fa007d57fc	pending	haskell	grade-school	module School\n( School\n, M.empty\n, add\n, sorted\n, grade\n) where\n\nimport Data.List(sort)\nimport Data.Maybe(fromMaybe)\nimport qualified Data.Map.Strict as M\n\ntype School = M.Map Int [String]\n\nadd :: Int -> String -> School -> School\nadd n s = M.insertWith (++) n [s]\n\nsorted :: School -> [(Int, [String])]\nsorted m = map sortNames (M.toAscList m) where\n  sortNames :: (Int, [String]) -> (Int, [String])\n  sortNames (n, names) = (n, sort names)\n\ngrade :: Int -> School -> [String]\ngrade n m = fromMaybe [] (M.lookup n m)	\N	\N	0	2	2014-07-20 23:16:04	2014-07-20 23:16:04	49379	School.hs
342	26	dc93d38193e478525840ccc2	superseded	ruby	raindrops	module Raindrops\n\n  def self.convert nb\n    res = CONVERT.inject('') do |acc, (key, value)|\n      acc + (nb % key == 0 and value or '')\n    end\n    res.empty? and nb.to_s or res\n  end\n\n  private\n\n  CONVERT = { 3 => 'Pling', 5 => 'Plang', 7 => 'Plong' }\n\nend	\N	\N	0	1	2014-04-21 11:45:39	2014-04-21 11:45:39	57606	raindrops.rb
343	26	c9bbf79c19d72923569ba0bf	superseded	ruby	raindrops	module Raindrops\n\n  CONVERT = { 3 => 'Pling', 5 => 'Plang', 7 => 'Plong' }\n\n  def self.convert nb\n    res = CONVERT.select { |key, _| nb % key == 0}.values.join\n    res.empty? and nb.to_s or res\n  end\n\nend	\N	\N	0	2	2014-04-23 17:09:56	2014-04-23 17:09:56	57606	raindrops.rb
344	26	b1316579241958141a0dac67	pending	ruby	raindrops	module Raindrops\n\n  CONVERT = { 3 => 'Pling', 5 => 'Plang', 7 => 'Plong' }\n\n  def self.convert nb\n    res = CONVERT.select { |key, _| nb % key == 0 }.values.join\n    res.empty? and nb.to_s or res\n  end\n\nend	\N	\N	0	3	2014-04-26 18:53:19	2014-04-26 18:53:19	57606	raindrops.rb
345	44	984d810a7df120612777a10e	superseded	ruby	raindrops	require "prime"\n\nclass Raindrops\n\n  @rain_sounds = {3 => "Pling", 5 => "Plang", 7 => "Plong"}\n\n  def self.convert(number_of_drops)\n    list_of_primes = Prime.prime_division(number_of_drops).map{ |x| x[0] }\n    sound = ""\n    sound << @rain_sounds[3] if list_of_primes.include? 3\n    sound << @rain_sounds[5] if list_of_primes.include? 5\n    sound << @rain_sounds[7] if list_of_primes.include? 7\n    return number_of_drops.to_s if sound.empty?\n    sound\n  end\n\nend	\N	\N	0	3	2014-06-11 22:03:34	2014-06-11 22:03:34	60426	raindrops.rb
346	44	f4a6a3b0e041b410f12ae0be	pending	ruby	raindrops	require "prime"\n\nclass Raindrops\n\n  @rain_sounds = {3 => "Pling", 5 => "Plang", 7 => "Plong"}\n\n  def self.convert(number_of_drops)\n    list_of_primes = Prime.prime_division(number_of_drops).map{ |x| x[0] }\n    sound = ""\n    sound << @rain_sounds[3] if list_of_primes.include? 3\n    sound << @rain_sounds[5] if list_of_primes.include? 5\n    sound << @rain_sounds[7] if list_of_primes.include? 7\n    sound = number_of_drops.to_s if sound.empty?\n    sound\n  end\n\nend	\N	\N	0	4	2014-06-26 01:35:32	2014-06-26 01:35:32	60426	raindrops.rb
347	44	59f602f71dcd866d9bfd9717	superseded	ruby	raindrops	class Raindrops\n\n  @rain_sounds = {3 => "Pling", 5 => "Plang", 7 => "Plong"}\n\n  def self.convert(number_of_drops)\n    sound = ""\n    sound << @rain_sounds[3] if number_of_drops % 3 == 0\n    sound << @rain_sounds[5] if number_of_drops % 5 == 0\n    sound << @rain_sounds[7] if number_of_drops % 7 == 0\n    return number_of_drops.to_s if sound.empty?\n    sound\n  end\n\nend	\N	\N	0	2	2014-07-07 11:24:39	2014-07-07 11:24:39	60426	raindrops.rb
348	44	f1b14c8382043faf52a2f5d9	superseded	ruby	raindrops	require 'prime'\n\nclass Raindrops\n\n  def self.convert(number_of_drops)\n    list_of_primes = Prime.prime_division(number_of_drops).map{ |x| x[0] }\n    return "PlingPlangPlong" if list_of_primes.include? 3 and list_of_primes.include? 5 and list_of_primes.include? 7\n    return "PlingPlong" if list_of_primes.include? 3 and list_of_primes.include? 7\n    return "PlingPlang" if list_of_primes.include? 3 and list_of_primes.include? 5\n    return "PlangPlong" if list_of_primes.include? 5 and list_of_primes.include? 7\n    return "Pling" if list_of_primes.include? 3\n    return "Plang" if list_of_primes.include? 5\n    return "Plong" if list_of_primes.include? 7\n    number_of_drops.to_s\n  end\n\nend	\N	\N	0	1	2014-07-13 01:59:44	2014-07-13 01:59:44	60426	raindrops.rb
349	44	8d7b2339980fd7b96a27a6c8	pending	ruby	roman-numerals	class Fixnum\n  def to_roman\n    numbers = to_arabic_array(self)\n    roman_collect = Array.new\n    numbers.each_with_index { |digit, index| roman_collect << romanize(digit, index) }\n    roman_collect.reverse.join\n  end\n\n  private\n  def to_arabic_array(number)\n    number.to_s.chars.reverse.map(&:to_i)\n  end\n\n  def romanize(digit, index)\n    case index\n    when 0\n      unit(digit, "I", "V", "X")\n    when 1\n      unit(digit, "X", "L", "C")\n    when 2\n      unit(digit, "C", "D", "M")\n    else\n      "M" * digit * 10**(index -3)\n    end\n  end\n\n  def unit(digit, one, five, ten)\n    case digit\n    when 1..3\n      one * digit\n    when 4\n      one + five\n    when 5..8\n      five + one * (digit %5)\n    when 9\n      one + ten\n    end\n  end\n\nend	\N	\N	0	1	2014-07-10 07:22:54	2014-07-10 07:22:54	38790	roman-numerals.rb
\.


--
-- Name: submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submissions_id_seq', 349, true);


--
-- Data for Name: team_managers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_managers (id, user_id, team_id) FROM stdin;
1	1	1
2	2	1
3	3	1
4	1	2
5	1	3
6	1	4
7	2	4
8	3	5
9	2	6
10	2	7
\.


--
-- Name: team_managers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_managers_id_seq', 10, true);


--
-- Data for Name: team_memberships; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_memberships (id, team_id, user_id, created_at, updated_at, confirmed) FROM stdin;
1	1	21	1997-12-10 14:44:16	1997-12-10 14:44:16	t
2	1	14	1997-12-02 06:38:32	1997-12-02 06:38:32	t
3	1	17	1984-01-02 22:56:36	1984-01-02 22:56:36	t
4	1	22	1996-02-27 06:47:01	1996-02-27 06:47:01	t
5	1	10	1975-04-16 01:07:55	1975-04-16 01:07:55	t
6	1	7	2003-10-01 12:29:06	2003-10-01 12:29:06	t
7	1	6	2004-04-20 21:52:29	2004-04-20 21:52:29	t
8	1	29	2009-06-14 02:33:02	2009-06-14 02:33:02	t
9	1	30	1970-02-14 04:36:11	1970-02-14 04:36:11	t
10	1	35	1998-11-28 02:49:24	1998-11-28 02:49:24	t
11	1	15	1983-02-13 02:22:25	1983-02-13 02:22:25	f
12	1	16	2004-06-27 09:45:06	2004-06-27 09:45:06	f
13	1	28	1970-06-12 18:49:25	1970-06-12 18:49:25	f
14	1	31	2009-04-22 21:42:22	2009-04-22 21:42:22	f
15	1	37	1972-05-22 05:20:59	1972-05-22 05:20:59	f
16	1	41	2009-06-28 17:37:14	2009-06-28 17:37:14	f
17	1	42	1994-02-10 06:18:33	1994-02-10 06:18:33	f
18	1	46	1999-04-09 21:39:00	1999-04-09 21:39:00	f
19	2	2	1994-01-13 03:26:41	1994-01-13 03:26:41	t
20	2	35	1984-03-26 22:25:14	1984-03-26 22:25:14	t
21	2	30	1978-04-20 14:43:29	1978-04-20 14:43:29	t
22	2	46	2011-04-04 00:19:24	2011-04-04 00:19:24	t
23	2	18	2006-09-02 01:11:14	2006-09-02 01:11:14	f
24	2	37	2008-01-03 12:59:07	2008-01-03 12:59:07	f
25	3	37	1994-05-16 03:39:30	1994-05-16 03:39:30	f
26	3	2	2002-06-10 05:39:02	2002-06-10 05:39:02	f
27	4	2	2008-03-29 01:07:30	2008-03-29 01:07:30	t
28	4	31	1985-04-28 05:42:55	1985-04-28 05:42:55	t
29	4	21	1985-06-01 12:21:54	1985-06-01 12:21:54	t
30	4	26	1981-04-06 10:44:26	1981-04-06 10:44:26	t
31	4	19	2007-10-22 02:28:59	2007-10-22 02:28:59	t
32	4	24	1991-05-31 22:18:54	1991-05-31 22:18:54	t
33	4	18	1985-12-11 03:16:17	1985-12-11 03:16:17	t
34	4	23	1996-02-04 07:21:44	1996-02-04 07:21:44	t
35	4	25	1981-05-16 06:10:30	1981-05-16 06:10:30	t
36	4	20	1988-02-12 03:29:16	1988-02-12 03:29:16	t
37	4	37	1989-10-01 14:41:02	1989-10-01 14:41:02	f
38	4	11	1975-09-17 23:22:31	1975-09-17 23:22:31	f
39	4	13	1982-05-22 15:44:57	1982-05-22 15:44:57	f
40	5	31	1989-01-07 10:33:31	1989-01-07 10:33:31	t
41	5	39	2013-10-23 14:45:43	2013-10-23 14:45:43	t
42	5	34	1971-01-11 22:50:27	1971-01-11 22:50:27	t
43	5	36	1996-01-10 17:52:54	1996-01-10 17:52:54	t
44	5	32	2012-10-31 14:42:56	2012-10-31 14:42:56	t
45	5	35	1989-09-06 15:30:03	1989-09-06 15:30:03	t
46	5	33	2010-02-07 23:58:52	2010-02-07 23:58:52	t
47	5	38	1973-09-02 09:03:03	1973-09-02 09:03:03	t
48	5	40	1989-08-24 16:45:07	1989-08-24 16:45:07	f
49	5	37	1988-12-25 17:52:16	1988-12-25 17:52:16	f
50	5	2	1990-01-03 14:42:57	1990-01-03 14:42:57	f
51	6	5	2007-07-28 16:58:15	2007-07-28 16:58:15	t
52	6	6	1977-01-05 23:41:10	1977-01-05 23:41:10	t
53	6	7	2006-12-06 12:06:02	2006-12-06 12:06:02	t
54	6	8	2008-02-23 15:39:09	2008-02-23 15:39:09	t
55	6	10	2002-01-11 17:17:17	2002-01-11 17:17:17	t
56	6	11	1988-10-29 19:22:17	1988-10-29 19:22:17	t
57	6	12	1975-06-29 12:32:46	1975-06-29 12:32:46	t
58	6	13	1983-06-24 14:22:13	1983-06-24 14:22:13	t
59	6	14	1971-02-02 04:41:12	1971-02-02 04:41:12	t
60	6	15	1993-04-18 03:14:59	1993-04-18 03:14:59	t
61	6	16	1970-04-20 04:44:04	1970-04-20 04:44:04	t
62	6	17	2001-07-19 15:48:26	2001-07-19 15:48:26	t
63	6	22	1996-01-12 11:23:30	1996-01-12 11:23:30	t
64	6	27	1982-06-21 17:34:18	1982-06-21 17:34:18	t
65	6	28	1985-11-16 18:26:02	1985-11-16 18:26:02	t
66	6	29	1992-01-11 11:10:33	1992-01-11 11:10:33	t
67	6	30	1970-10-18 14:24:44	1970-10-18 14:24:44	t
68	6	31	1993-11-14 11:38:13	1993-11-14 11:38:13	t
69	6	37	1991-02-11 12:16:16	1991-02-11 12:16:16	t
70	6	41	1994-03-27 12:18:39	1994-03-27 12:18:39	t
71	6	42	2009-11-15 23:53:16	2009-11-15 23:53:16	t
72	6	43	2006-12-03 19:21:58	2006-12-03 19:21:58	t
73	6	44	2000-09-07 14:57:47	2000-09-07 14:57:47	t
74	6	45	1994-10-03 19:20:02	1994-10-03 19:20:02	t
75	6	46	1978-01-07 07:43:23	1978-01-07 07:43:23	t
76	6	47	1983-04-29 23:44:59	1983-04-29 23:44:59	t
77	6	48	1998-12-31 11:06:22	1998-12-31 11:06:22	t
78	7	2	2013-09-05 08:24:18	2013-09-05 08:24:18	t
79	7	38	2005-02-19 04:56:46	2005-02-19 04:56:46	t
80	7	31	2001-12-28 11:54:03	2001-12-28 11:54:03	t
81	7	37	1979-07-19 20:44:29	1979-07-19 20:44:29	f
\.


--
-- Name: team_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_memberships_id_seq', 81, true);


--
-- Data for Name: teams; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY teams (id, slug, created_at, updated_at, name) FROM stdin;
1	baconesia	2014-03-01 22:21:14.28363	2014-03-01 22:21:14.28363	baconesia
2	chocolades	2014-07-22 04:13:36.320709	2014-07-22 04:13:36.320709	chocolades
3	ghost	2014-02-11 03:05:13.331758	2014-02-11 03:05:13.331758	ghost
4	motley	2014-04-16 01:37:16.33693	2014-04-16 01:37:16.33693	motley
5	rugrats	2014-07-19 15:35:01.357052	2014-07-19 15:35:01.357052	rugrats
6	slate	2014-05-13 21:24:55.372253	2014-05-13 21:24:55.372253	slate
7	polkadots	2014-06-13 21:09:02.403477	2014-06-13 21:09:02.403477	polkadots
\.


--
-- Name: teams_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('teams_id_seq', 7, true);


--
-- Data for Name: testimonials; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY testimonials (id, body, name, about, homepage, keyword, featured, created_at, updated_at) FROM stdin;
\.


--
-- Name: testimonials_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('testimonials_id_seq', 1, false);


--
-- Data for Name: user_exercises; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY user_exercises (id, user_id, language, slug, iteration_count, state, completed_at, created_at, updated_at, key, is_nitpicker) FROM stdin;
1	8	ruby	word-count	1	pending	\N	2014-06-04 11:14:37	2014-06-04 11:14:37	e35583f73016f579fbe90de0	f
2	8	javascript	strain	2	pending	\N	2014-06-08 13:42:32	2014-06-08 13:42:32	677fc51e7ca65b15c40ee500	f
3	10	ruby	anagram	3	pending	\N	2014-06-25 16:44:36	2014-06-25 16:44:36	91b24c7084760e9a86834302	f
4	10	javascript	bob	1	pending	\N	2014-06-09 06:50:13	2014-06-09 06:50:13	e98a4a67a951ae5f97d7f8e3	f
5	10	haskell	space-age	1	pending	\N	2014-06-30 17:34:41	2014-06-30 17:34:41	604ff18c6f51eb6ae6714db8	f
6	10	ruby	gigasecond	1	pending	\N	2014-05-23 18:43:27	2014-05-23 18:43:27	e63b6e95d3252be0171420a3	f
7	10	ruby	phone-number	1	pending	\N	2014-05-18 11:21:32	2014-05-18 11:21:32	7f47c46f3b6e78251ff1d064	f
8	10	ruby	leap	1	pending	\N	2014-06-07 04:08:21	2014-06-07 04:08:21	3390f107ad92fbf05c2b3a66	f
9	11	haskell	word-count	2	pending	\N	2014-06-25 18:15:28	2014-06-25 18:15:28	a80d99956db86f145e711a02	f
10	11	ruby	proverb	3	pending	\N	2014-06-11 09:05:41	2014-06-11 09:05:41	ee9771f5f87a5763f370a89d	f
11	11	clojure	robot-name	1	pending	\N	2014-06-21 18:54:35	2014-06-21 18:54:35	fd5d0fc364c434ede80e867a	f
12	14	haskell	etl	2	pending	\N	2013-12-06 14:58:09	2013-12-06 14:58:09	63fac056169069eca5f4157d	f
13	14	python	ocr-numbers	1	pending	\N	2014-05-21 20:32:25	2014-05-21 20:32:25	229226b5dbd81a440f228d9c	f
14	14	haskell	space-age	1	pending	\N	2013-11-13 03:46:22	2013-11-13 03:46:22	fe66f7605636c50552b0d9dd	f
15	14	go	phone-number	1	pending	\N	2014-03-26 08:56:30	2014-03-26 08:56:30	25e73a4c72da8516a2acdfab	f
16	14	python	point-mutations	1	pending	\N	2013-11-05 20:50:21	2013-11-05 20:50:21	bbfd263289f57901a2f11ae7	f
17	14	python	rna-transcription	1	pending	\N	2014-01-11 12:52:15	2014-01-11 12:52:15	493e9fee59cad512b70ae2f7	f
18	14	elixir	word-count	1	pending	\N	2013-12-06 11:45:44	2013-12-06 11:45:44	9a2dd6e2d1df9b6c4374a35a	f
19	14	ruby	leap	1	pending	\N	2013-12-21 16:43:36	2013-12-21 16:43:36	73dbf2e484a75fa24eac92b4	f
20	14	clojure	nucleotide-count	1	pending	\N	2014-05-18 15:35:07	2014-05-18 15:35:07	22788053094b6537a0c0a47e	f
21	14	ruby	proverb	2	pending	\N	2013-12-05 16:02:22	2013-12-05 16:02:22	4c1e1e1d61c6aeef3b7b8efa	f
22	21	go	clock	2	pending	\N	2014-03-27 01:28:45	2014-03-27 01:28:45	28ff364efb8a1de93eef6ace	f
23	21	clojure	phone-number	2	pending	\N	2014-02-01 06:42:25	2014-02-01 06:42:25	400f2a40686acd2ccd73beff	f
24	21	ruby	grains	1	pending	\N	2014-02-14 17:58:13	2014-02-14 17:58:13	cda6cecedcc6cf041e08c43b	f
25	27	scala	hamming	2	pending	\N	2014-03-19 20:15:02	2014-03-19 20:15:02	2d84c96ea8aabd131a04e2ac	f
26	27	ruby	etl	2	pending	\N	2013-12-01 15:02:49	2013-12-01 15:02:49	ae77e4f477e101b11a658dbc	f
27	27	csharp	leap	1	pending	\N	2014-02-12 15:29:23	2014-02-12 15:29:23	79699db757983751250e7681	f
28	27	javascript	word-count	1	pending	\N	2014-04-23 12:11:12	2014-04-23 12:11:12	c8f0ba5ceedae96e2093f5df	f
29	28	ruby	phone-number	2	pending	\N	2014-05-02 19:06:26	2014-05-02 19:06:26	9f4bc32641638af0c91762db	f
30	28	go	clock	1	pending	\N	2014-03-10 00:04:59	2014-03-10 00:04:59	6b5acc8e62521be00757d541	f
31	30	ruby	word-count	2	pending	\N	2014-03-23 16:54:23	2014-03-23 16:54:23	d6aff1f9dd4972696cbb96a7	f
32	30	ruby	scrabble-score	1	pending	\N	2014-05-15 09:03:07	2014-05-15 09:03:07	657ecb597f4fa842a85fafec	f
33	30	ruby	grade-school	4	pending	\N	2014-02-28 16:45:29	2014-02-28 16:45:29	e979a4ed6891fc98379641f4	f
34	30	haskell	bob	1	pending	\N	2014-06-30 19:15:17	2014-06-30 19:15:17	71c1b5ca4d80fd6ce4af8a25	f
35	30	elixir	nucleotide-count	2	pending	\N	2014-03-15 07:48:47	2014-03-15 07:48:47	3eeba0f7acb20a7482fe3500	f
36	30	perl5	raindrops	2	pending	\N	2014-06-06 13:11:32	2014-06-06 13:11:32	0c70a41f234bcf8dda9419c0	f
37	30	ruby	raindrops	1	pending	\N	2014-03-02 02:59:25	2014-03-02 02:59:25	feee205b5bcd9bfa992d5576	f
38	30	ruby	binary-search-tree	1	pending	\N	2014-03-08 02:57:07	2014-03-08 02:57:07	288d5211b18f2d79ccb22b32	f
39	30	python	gigasecond	1	pending	\N	2014-06-16 22:27:51	2014-06-16 22:27:51	1d4c91c1661548af384b4199	f
40	30	javascript	beer-song	1	pending	\N	2014-05-27 14:43:00	2014-05-27 14:43:00	15188192eb954205eb36ccff	f
41	30	javascript	circular-buffer	1	pending	\N	2014-03-08 21:14:37	2014-03-08 21:14:37	e3122ce20413477e4c517f19	f
42	30	ruby	anagram	1	pending	\N	2014-04-19 17:27:52	2014-04-19 17:27:52	901f34e87ec6fd4c412bd7c2	f
43	30	haskell	rna-transcription	2	pending	\N	2014-03-04 14:14:45	2014-03-04 14:14:45	4ce2facdb40ccc31fbfa19a4	f
44	30	python	word-count	2	pending	\N	2014-04-27 06:38:06	2014-04-27 06:38:06	c4d634ca485902950db1ae23	f
45	30	haskell	atbash-cipher	1	pending	\N	2014-02-27 16:30:19	2014-02-27 16:30:19	3a682ba58134e5f2047ceb40	f
46	30	clojure	beer-song	2	pending	\N	2014-03-10 00:23:46	2014-03-10 00:23:46	c814c12d2575e61d91090c1b	f
47	30	ruby	secret-handshake	2	pending	\N	2014-03-15 17:46:10	2014-03-15 17:46:10	6f65586cfa0747bf4f27d6b1	f
48	30	javascript	nucleotide-count	1	pending	\N	2014-03-18 16:50:14	2014-03-18 16:50:14	31bb5fd039b77aa1d06c3173	f
49	30	javascript	trinary	1	pending	\N	2014-05-05 20:42:40	2014-05-05 20:42:40	dcb0233506b01b006319dc0f	f
50	30	ruby	proverb	8	pending	\N	2014-03-04 12:34:23	2014-03-04 12:34:23	006c6fb575d145d4ab0f88ec	f
51	30	ruby	space-age	1	pending	\N	2014-05-16 02:52:25	2014-05-16 02:52:25	4d8f73b49da0d33d16b6135a	f
52	30	ruby	bob	1	pending	\N	2014-04-13 16:10:09	2014-04-13 16:10:09	c5fd90801886e9d2e3c483d9	f
53	30	ruby	point-mutations	2	pending	\N	2014-03-16 18:31:16	2014-03-16 18:31:16	3ca53fc0cd7265387686c981	f
54	30	python	anagram	2	pending	\N	2014-04-07 03:49:50	2014-04-07 03:49:50	b298f47b5894e6eef53bbf76	f
55	30	elixir	bob	4	pending	\N	2014-03-23 22:38:27	2014-03-23 22:38:27	2f40143b48ade46a3f38e52a	f
56	30	javascript	bob	1	pending	\N	2014-04-17 19:11:06	2014-04-17 19:11:06	d93cccd6987888e10388bce1	f
57	30	ruby	leap	2	pending	\N	2014-03-03 06:49:25	2014-03-03 06:49:25	aa7f5281dd62ad3b5eb0e2dc	f
58	30	ruby	grains	1	pending	\N	2014-05-12 05:19:16	2014-05-12 05:19:16	801e47d84471a41b4e59d82c	f
59	30	javascript	gigasecond	1	pending	\N	2014-04-10 12:39:55	2014-04-10 12:39:55	ac871ea8c6d072213cc40d4a	f
60	32	haskell	bob	2	pending	\N	2014-06-26 15:36:53	2014-06-26 15:36:53	7d9d7e32a8e2e939eb9bd02f	f
61	37	ruby	grade-school	1	pending	\N	2014-06-09 22:32:19	2014-06-09 22:32:19	4927a4fe58901a305a89280c	f
62	39	ruby	grains	1	pending	\N	2014-07-04 00:19:56	2014-07-04 00:19:56	fcc90a0f97f908001733e995	f
63	43	javascript	bob	1	pending	\N	2014-06-27 08:33:31	2014-06-27 08:33:31	050a8f16dae4c2bf3496b6e1	f
64	45	ruby	house	2	pending	\N	2014-06-18 01:56:58	2014-06-18 01:56:58	854163a5646434e49cd87fa9	f
65	45	haskell	rna-transcription	1	pending	\N	2014-07-19 05:33:21	2014-07-19 05:33:21	2f23055371551c3bd0909fad	f
66	45	elixir	bank-account	2	pending	\N	2014-06-08 02:45:12	2014-06-08 02:45:12	ecc405ccc2e485f430b025cc	f
67	45	ruby	raindrops	1	pending	\N	2014-06-02 11:26:37	2014-06-02 11:26:37	c1255fb9655d83c1db358d23	f
68	45	javascript	hamming	1	pending	\N	2014-06-19 02:04:52	2014-06-19 02:04:52	94b7a7f900cfe3ddb077c36d	f
69	45	coffeescript	bob	1	pending	\N	2014-06-25 11:30:18	2014-06-25 11:30:18	9ba210c4fa8780668dd16ed6	f
70	47	elixir	point-mutations	3	pending	\N	2014-05-25 03:07:35	2014-05-25 03:07:35	dfaebf338e2d8fd16f1b0a83	f
71	47	ruby	word-count	1	pending	\N	2014-05-21 03:13:42	2014-05-21 03:13:42	ef6ea8672e4c690b2b76ee54	f
72	47	ruby	anagram	7	pending	\N	2014-05-25 07:30:25	2014-05-25 07:30:25	c8525c0f0f8118a04f56d456	f
73	48	python	anagram	1	pending	\N	2014-05-27 07:02:22	2014-05-27 07:02:22	121660caeaded7ffbf276ccf	f
74	48	ruby	anagram	2	pending	\N	2014-04-02 20:09:43	2014-04-02 20:09:43	a0cd3073fc3d151279086e2c	f
75	48	clojure	rna-transcription	2	pending	\N	2014-04-05 18:44:19	2014-04-05 18:44:19	883fe476b2ff3780005fd8a7	f
76	25	ruby	word-count	2	pending	\N	2014-04-22 18:20:23	2014-04-22 18:20:23	e7b178eceec92ba5647877a7	f
77	6	ruby	sieve	1	pending	\N	2014-04-21 20:57:05	2014-04-21 20:57:05	cacdd3adb725b9acc18c5ec0	f
78	6	elixir	grade-school	2	pending	\N	2014-04-19 06:23:57	2014-04-19 06:23:57	eaa1bc0b91c03ee1dab8fad3	f
79	6	python	nucleotide-count	1	pending	\N	2014-02-15 03:58:54	2014-02-15 03:58:54	d4eedbb7ebed1e77c1da0ba0	f
80	6	ruby	meetup	1	pending	\N	2013-12-11 10:39:23	2013-12-11 10:39:23	c2972eb16645c51fb433eaec	f
81	6	ruby	word-count	4	pending	\N	2013-12-24 06:54:33	2013-12-24 06:54:33	afe481485b0028db81299b16	f
82	6	python	anagram	2	pending	\N	2014-01-23 08:35:33	2014-01-23 08:35:33	cdd80fcfac66e5c627141d1a	f
83	6	ruby	grade-school	1	pending	\N	2014-02-24 11:19:10	2014-02-24 11:19:10	75676a313d0fef821705efa7	f
84	6	javascript	bob	6	pending	\N	2013-11-21 01:03:33	2013-11-21 01:03:33	b01d27e709c93c1f81892e02	f
85	6	elixir	strain	1	pending	\N	2013-12-20 13:39:11	2013-12-20 13:39:11	57150ebcd300da25673528e0	f
86	6	ruby	hamming	3	pending	\N	2013-11-09 03:28:38	2013-11-09 03:28:38	b85d532fab4b6c1b2592604d	f
87	6	ruby	nucleotide-count	2	pending	\N	2014-01-06 07:25:27	2014-01-06 07:25:27	6d26751b3c00178df8007b21	f
88	6	ruby	hexadecimal	1	pending	\N	2013-11-08 14:14:24	2013-11-08 14:14:24	eba0c9200b0adcf1655c87c0	f
89	6	clojure	bob	5	pending	\N	2014-01-27 20:08:00	2014-01-27 20:08:00	2f946c6597b2c80997747ac6	f
90	6	ruby	phone-number	1	pending	\N	2014-05-18 13:38:15	2014-05-18 13:38:15	2943b9180b075151f48eb56b	f
91	6	ruby	binary	2	pending	\N	2014-01-18 00:59:02	2014-01-18 00:59:02	62d99200d4e308a3c75c27dc	f
92	6	clojure	gigasecond	1	pending	\N	2013-12-27 09:40:47	2013-12-27 09:40:47	47745231419d03737a5a4aff	f
93	22	haskell	meetup	3	pending	\N	2014-07-13 11:42:48	2014-07-13 11:42:48	0755eca9b8586542aa3f4a3a	f
94	22	clojure	nucleotide-count	4	pending	\N	2014-07-07 21:28:40	2014-07-07 21:28:40	d7c72c2bb06244741d4405df	f
95	22	python	twelve-days	1	pending	\N	2014-07-10 07:05:54	2014-07-10 07:05:54	4698ab5f112ab741f2bb258a	f
96	22	clojure	rna-transcription	2	pending	\N	2014-07-10 14:49:04	2014-07-10 14:49:04	1c04ee382d27d8616cb028b5	f
97	22	haskell	word-count	3	pending	\N	2014-07-07 21:29:27	2014-07-07 21:29:27	795230049eece665b71c2a23	f
98	22	go	hamming	1	pending	\N	2014-07-15 10:36:48	2014-07-15 10:36:48	25e4338335e5f7ef6c7256aa	f
99	22	python	nucleotide-count	4	pending	\N	2014-07-11 01:29:46	2014-07-11 01:29:46	ac456dcc4795c46ee0c47836	f
100	16	python	bob	1	pending	\N	2014-07-03 14:54:55	2014-07-03 14:54:55	142da31f929841e63d412242	f
101	16	ruby	bob	7	pending	\N	2014-06-11 23:11:06	2014-06-11 23:11:06	31a2aa12263b6ee4bce6c2d4	f
102	16	clojure	bob	1	pending	\N	2014-06-15 06:39:09	2014-06-15 06:39:09	936de7b9d6d0bb1aea30aad2	f
103	16	haskell	point-mutations	2	pending	\N	2014-06-21 17:50:27	2014-06-21 17:50:27	c005f84c14f6589b5a46bebe	f
104	19	javascript	word-count	2	pending	\N	2014-04-12 09:06:12	2014-04-12 09:06:12	e7cba2a51ecccf86f3be95d4	f
105	19	go	anagram	1	pending	\N	2014-06-21 13:33:06	2014-06-21 13:33:06	3757ac2d21576cb4a7f75e9b	f
106	19	elixir	bob	2	pending	\N	2014-07-01 17:48:13	2014-07-01 17:48:13	37fd75e69765da52e6b0c3ad	f
107	19	ruby	hamming	1	pending	\N	2014-05-25 08:45:55	2014-05-25 08:45:55	5ebb5f9c99b9244c00c5a4ef	f
108	19	ruby	sum-of-multiples	1	pending	\N	2014-06-10 10:40:57	2014-06-10 10:40:57	6f5524df29754da6075b3aef	f
109	19	ruby	leap	2	pending	\N	2014-04-26 17:25:38	2014-04-26 17:25:38	50b667638aa25948effc1381	f
110	20	clojure	prime-factors	2	pending	\N	2014-05-09 19:29:33	2014-05-09 19:29:33	f5bbc8d297406ab2d9b09d12	f
111	35	clojure	nucleotide-count	1	pending	\N	2014-01-15 08:14:30	2014-01-15 08:14:30	5e124167828c48feb784c0ac	f
112	35	ruby	roman-numerals	4	pending	\N	2014-02-12 10:51:22	2014-02-12 10:51:22	9beee22e0d48efa80b78b488	f
113	35	ruby	hamming	3	pending	\N	2014-01-04 10:50:52	2014-01-04 10:50:52	d9c33d6a7c87dd286b58504c	f
114	35	javascript	bob	3	pending	\N	2013-12-25 18:57:57	2013-12-25 18:57:57	6d8123e915d39400835879c4	f
115	35	ruby	bob	6	pending	\N	2014-01-07 20:23:18	2014-01-07 20:23:18	41ba3ef704060eeadc9f013a	f
116	29	ruby	sieve	1	pending	\N	2014-04-30 13:33:35	2014-04-30 13:33:35	73ec2e0fcf578fd73614ae10	f
117	29	clojure	bob	3	pending	\N	2014-01-24 15:41:14	2014-01-24 15:41:14	df335fe0d4d499d52deee406	f
118	29	haskell	rna-transcription	3	pending	\N	2014-03-13 09:28:50	2014-03-13 09:28:50	7acf3af2689422894077abf5	f
119	29	haskell	bob	2	pending	\N	2014-02-24 11:10:12	2014-02-24 11:10:12	31575a0dba72fd424e692837	f
120	34	ruby	triangle	1	pending	\N	2014-03-29 12:56:41	2014-03-29 12:56:41	f2eed90e5a0df16db58a75a9	f
121	13	ruby	hamming	1	pending	\N	2014-06-27 23:45:17	2014-06-27 23:45:17	daf3f5b4e545617e8b8539ad	f
122	13	ruby	gigasecond	3	pending	\N	2014-07-01 01:46:14	2014-07-01 01:46:14	2d1f3d2f39e9597df9149f78	f
123	13	ruby	bob	1	pending	\N	2014-06-22 02:11:25	2014-06-22 02:11:25	6e47bd2ce3e6502cf21e7779	f
124	13	objective-c	bob	2	pending	\N	2014-06-20 02:11:32	2014-06-20 02:11:32	d5d8c14673017e8f075f49a9	f
125	13	ruby	raindrops	4	pending	\N	2014-07-01 23:28:50	2014-07-01 23:28:50	8839a310d19861c3b0da23a0	f
126	40	javascript	nucleotide-count	1	pending	\N	2014-05-07 12:58:31	2014-05-07 12:58:31	72e3233e62daa021ed073121	f
127	40	elixir	word-count	4	pending	\N	2014-04-13 23:12:49	2014-04-13 23:12:49	ae956aee5471996f4ec31e94	f
128	40	ruby	rna-transcription	7	pending	\N	2014-04-14 02:52:59	2014-04-14 02:52:59	bea5e2ed79dd740b216429b9	f
129	40	clojure	grade-school	3	pending	\N	2014-04-06 13:19:34	2014-04-06 13:19:34	5a6194300857f5470a1ea391	f
130	5	ruby	bob	1	pending	\N	2014-06-27 14:53:18	2014-06-27 14:53:18	8cd8dafe0cbec76dfd479aa0	f
131	33	haskell	octal	1	pending	\N	2014-07-16 21:55:00	2014-07-16 21:55:00	e7337425a4d6c6afe7b01cf7	f
132	15	scala	phone-number	1	pending	\N	2013-11-13 15:19:58	2013-11-13 15:19:58	a71b110f4d7bba46fea3cc3e	f
133	17	ruby	phone-number	1	pending	\N	2014-06-18 22:37:19	2014-06-18 22:37:19	94b81ff17b7b68e4e7afdd42	f
134	17	ruby	word-count	1	pending	\N	2014-05-30 17:22:15	2014-05-30 17:22:15	517d513dfdb955b0abbc5e7c	f
135	17	ruby	hamming	1	pending	\N	2014-06-21 07:08:38	2014-06-21 07:08:38	762fd7b9cf1dae6b15024e16	f
136	17	ruby	binary	6	pending	\N	2014-05-15 18:36:52	2014-05-15 18:36:52	97f7b38fdea85dcbe7e0a3d6	f
137	17	javascript	phone-number	1	pending	\N	2014-06-23 20:55:38	2014-06-23 20:55:38	897015ea153c7855de10064e	f
138	17	ruby	bob	7	pending	\N	2014-05-12 09:44:51	2014-05-12 09:44:51	518d984cfcd71ba304d8ffbc	f
139	23	haskell	say	2	pending	\N	2014-03-28 20:12:52	2014-03-28 20:12:52	7c15a9f9bd83a643b4b431ad	f
140	23	haskell	etl	3	pending	\N	2014-04-05 22:44:03	2014-04-05 22:44:03	2f335f16c11162b7c53029ab	f
141	23	ruby	grade-school	5	pending	\N	2014-02-09 18:37:37	2014-02-09 18:37:37	f56b9a8c3c40e3637d264863	f
142	23	ruby	gigasecond	1	pending	\N	2014-03-25 05:21:26	2014-03-25 05:21:26	858ac3c35c61fc2c4bf5513b	f
143	23	ruby	nucleotide-count	2	pending	\N	2014-04-04 12:21:12	2014-04-04 12:21:12	ed0e424d35ae314414565929	f
144	23	ruby	leap	2	pending	\N	2014-02-09 16:59:13	2014-02-09 16:59:13	c62d13cdefabffbea710a182	f
145	23	haskell	beer-song	1	pending	\N	2014-03-05 11:39:55	2014-03-05 11:39:55	3befc5e1539debdda148eb25	f
146	41	ruby	bob	2	pending	\N	2014-03-19 20:09:08	2014-03-19 20:09:08	5656acfc81736e9f0906f817	f
147	41	ruby	gigasecond	1	pending	\N	2014-02-01 13:30:29	2014-02-01 13:30:29	3ae858ddee35c57f056115f7	f
148	41	elixir	bob	2	pending	\N	2014-02-02 17:31:49	2014-02-02 17:31:49	585211edea867c7eedc969a9	f
149	41	haskell	meetup	2	pending	\N	2014-02-13 12:12:27	2014-02-13 12:12:27	c80c0fda4cc584ab024fa36d	f
150	41	ruby	anagram	6	pending	\N	2014-03-28 18:42:35	2014-03-28 18:42:35	d7afa75ff9f12d556497fa52	f
151	41	javascript	etl	2	pending	\N	2014-05-07 10:07:28	2014-05-07 10:07:28	99ee678cc1d2b33416487e89	f
152	41	ruby	robot-name	1	pending	\N	2014-02-24 08:29:27	2014-02-24 08:29:27	a2a42b53746ee81bae62d80e	f
153	41	haskell	binary-search-tree	1	pending	\N	2014-03-23 18:43:24	2014-03-23 18:43:24	fbc63907c7ff7c1d2a47e95d	f
154	41	ruby	grains	1	pending	\N	2014-03-22 19:59:38	2014-03-22 19:59:38	20032198306271dd04fc823d	f
155	41	ruby	hamming	6	pending	\N	2014-03-27 04:26:29	2014-03-27 04:26:29	e9208b687f912e9aec9930e1	f
156	41	go	hamming	1	pending	\N	2014-04-01 10:22:19	2014-04-01 10:22:19	db63836da8777a83b7a09ab3	f
157	41	haskell	phone-number	2	pending	\N	2014-04-08 15:52:57	2014-04-08 15:52:57	37980c20daffcdaa44aa5fc0	f
158	41	go	leap	1	pending	\N	2014-03-12 12:52:20	2014-03-12 12:52:20	66e09dd3b9455522ef1403df	f
159	41	ruby	etl	2	pending	\N	2014-02-07 19:37:43	2014-02-07 19:37:43	526ef5e9efd1dde85dc245f8	f
160	41	javascript	word-count	1	pending	\N	2014-02-03 01:16:07	2014-02-03 01:16:07	3373df43165104cfc697d1e2	f
161	41	javascript	crypto-square	1	pending	\N	2014-02-14 14:04:29	2014-02-14 14:04:29	b925b534fe500d8940ce5a04	f
162	41	haskell	raindrops	2	pending	\N	2014-02-25 14:25:18	2014-02-25 14:25:18	7dde305f5315c34cc75b9558	f
163	41	ruby	raindrops	1	pending	\N	2014-02-25 11:23:25	2014-02-25 11:23:25	79afad3560de7231242b24bf	f
164	41	ruby	binary-search-tree	1	pending	\N	2014-04-19 00:28:08	2014-04-19 00:28:08	7822e10c50fedf9fe2c3862f	f
165	41	haskell	leap	1	pending	\N	2014-06-19 18:36:04	2014-06-19 18:36:04	f61fbb71526b0a648b9c6e34	f
166	41	ruby	nth-prime	1	pending	\N	2014-02-27 15:25:09	2014-02-27 15:25:09	b2ff6a1c8c9250c85fd2a67e	f
167	41	go	scrabble-score	2	pending	\N	2014-02-09 06:55:56	2014-02-09 06:55:56	26dddefd2c0ed8288433d9f0	f
168	41	clojure	bob	1	pending	\N	2014-05-05 14:11:21	2014-05-05 14:11:21	ce6ebb85084bd14b64ee5f38	f
169	26	ruby	etl	1	pending	\N	2014-03-24 03:03:52	2014-03-24 03:03:52	785a11bf89c6f8150b4c82d7	f
170	26	python	bob	6	pending	\N	2014-03-22 17:23:21	2014-03-22 17:23:21	f567bba011c2b751aa41015c	f
171	26	ruby	leap	1	pending	\N	2014-03-19 22:49:31	2014-03-19 22:49:31	3ea2d9a2aa0cf635dcd00a01	f
172	26	python	beer-song	1	pending	\N	2014-05-21 03:44:54	2014-05-21 03:44:54	689460680c2b302a89d07f3f	f
173	26	haskell	grade-school	2	pending	\N	2014-03-21 18:41:38	2014-03-21 18:41:38	3e6ea3bfd247cd3ed5eefded	f
174	26	ruby	raindrops	3	pending	\N	2014-04-21 11:45:39	2014-04-21 11:45:39	465785d18e2ce6b0ad37c040	f
175	44	ruby	raindrops	4	pending	\N	2014-06-11 22:03:34	2014-06-11 22:03:34	f19892d0be216e18356e6265	f
176	44	ruby	roman-numerals	1	pending	\N	2014-07-10 07:22:54	2014-07-10 07:22:54	02e9c241cccb243ee9b1faef	f
\.


--
-- Name: user_exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('user_exercises_id_seq', 176, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY users (id, username, email, avatar_url, github_id, key, mastery, created_at, updated_at) FROM stdin;
1	alice	alice@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/suprb/128.jpg	-8450	pkf608	---\n- clojure\n- coffeescript\n- elixir\n- go\n- haskell\n- javascript\n- objective-c\n- ocaml\n- perl5\n- python\n- ruby\n- scala\n	2014-04-07 00:56:24.16176	2014-04-07 00:56:24.16176
2	bob	bob@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/gearpixels/128.jpg	-56234	mrw698	---\n- ruby\n- haskell\n	2014-06-15 23:15:52.17444	2014-06-15 23:15:52.17444
3	charlie	charlie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ruzinav/128.jpg	-82813	flw509	---\n- javascript\n- erlang\n- elixir\n	2014-04-18 13:30:19.177103	2014-04-18 13:30:19.177103
4	diana	diana@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/flame_kaizar/128.jpg	-76031	dkx481	---\n- python\n	2014-04-09 09:39:21.179245	2014-04-09 09:39:21.179245
5	amelie	amelie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/hgharrygo/128.jpg	-36513	xhy879	--- []\n	2014-06-02 01:35:55.181308	2014-06-02 01:35:55.181308
6	beth	beth@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/9lessons/128.jpg	-15842	rfy613	--- []\n	2013-11-04 10:36:10.184094	2013-11-04 10:36:10.184094
7	claire	claire@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/joaoedumedeiros/128.jpg	-49416	xhv183	--- []\n	2013-12-08 15:28:13.186508	2013-12-08 15:28:13.186508
8	dawson	dawson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/josemarques/128.jpg	-83580	pno485	--- []\n	2014-05-26 20:00:08.188058	2014-05-26 20:00:08.188058
9	eve	eve@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/BryanHorsey/128.jpg	-2350	ryc635	--- []\n	2013-12-29 04:07:18.190428	2013-12-29 04:07:18.190428
10	elisa	elisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/pcridesagain/128.jpg	-79068	vjk179	--- []\n	2014-05-10 23:22:54.192029	2014-05-10 23:22:54.192029
11	frederique	frederique@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/_shahedk/128.jpg	-76479	jqu946	--- []\n	2014-06-03 05:10:15.195192	2014-06-03 05:10:15.195192
12	grace	grace@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/osvaldas/128.jpg	-89700	dgl118	--- []\n	2014-05-13 13:32:12.19792	2014-05-13 13:32:12.19792
13	haley	haley@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/raquelwilson/128.jpg	-59159	yid386	--- []\n	2014-06-16 02:50:10.199469	2014-06-16 02:50:10.199469
14	isaac	isaac@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/shadeed9/128.jpg	-35134	etr319	--- []\n	2013-11-02 09:33:57.201845	2013-11-02 09:33:57.201845
15	jarrod	jarrod@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/nickfratter/128.jpg	-55317	nhy288	--- []\n	2013-11-07 16:28:28.204234	2013-11-07 16:28:28.204234
16	kieran	kieran@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/RussellBishop/128.jpg	-17504	fgp380	--- []\n	2014-06-07 21:45:53.206575	2014-06-07 21:45:53.206575
17	lisa	lisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/krasnoukhov/128.jpg	-45711	svq596	--- []\n	2014-05-10 06:26:15.208847	2014-05-10 06:26:15.208847
18	mack	mack@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/markjenkins/128.jpg	-80200	qmg567	--- []\n	2013-11-07 19:54:16.211565	2013-11-07 19:54:16.211565
19	madison	madison@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/tereshenkov/128.jpg	-65671	wet553	--- []\n	2014-04-10 21:19:36.214699	2014-04-10 21:19:36.214699
20	marshall	marshall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/opnsrce/128.jpg	-73420	ito853	--- []\n	2013-12-14 02:23:10.217474	2013-12-14 02:23:10.217474
21	mary	mary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/axel/128.jpg	-54461	wjw544	--- []\n	2013-12-19 14:32:43.219892	2013-12-19 14:32:43.219892
22	mia	mia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/dahparra/128.jpg	-93461	vvg742	--- []\n	2014-07-04 12:18:23.222217	2014-07-04 12:18:23.222217
23	mike	mike@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/flashmurphy/128.jpg	-78738	zqg225	--- []\n	2014-01-20 02:15:25.224529	2014-01-20 02:15:25.224529
24	mildred	mildred@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/unterdreht/128.jpg	-83868	ozl355	--- []\n	2014-05-08 08:24:26.226901	2014-05-08 08:24:26.226901
25	mitchell	mitchell@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/9lessons/128.jpg	-13309	hxd250	--- []\n	2014-03-16 15:37:15.229243	2014-03-16 15:37:15.229243
26	morris	morris@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/weglov/128.jpg	-55033	ckb265	--- []\n	2014-03-14 22:18:33.231613	2014-03-14 22:18:33.231613
27	norma	norma@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/allthingssmitty/128.jpg	-22351	oto790	--- []\n	2013-11-25 07:53:42.233976	2013-11-25 07:53:42.233976
28	opal	opal@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/g1sh/128.jpg	-37316	uic378	--- []\n	2014-02-20 11:58:21.236261	2014-02-20 11:58:21.236261
29	paula	paula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/weglov/128.jpg	-82741	xdd653	--- []\n	2014-01-10 06:19:53.238554	2014-01-10 06:19:53.238554
30	quentin	quentin@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/erikdkennedy/128.jpg	-47223	pds942	--- []\n	2014-02-27 12:07:22.240888	2014-02-27 12:07:22.240888
31	rachel	rachel@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/badlittleduck/128.jpg	-33901	lpm799	--- []\n	2013-12-25 13:41:31.243136	2013-12-25 13:41:31.243136
32	randall	randall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mutlu82/128.jpg	-93537	vjv422	--- []\n	2014-06-21 08:01:27.245465	2014-06-21 08:01:27.245465
33	rick	rick@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jefffis/128.jpg	-9039	rvi390	--- []\n	2014-07-14 17:33:55.247772	2014-07-14 17:33:55.247772
34	rita	rita@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/gonzalorobaina/128.jpg	-7801	vcd152	--- []\n	2014-01-19 16:26:06.250095	2014-01-19 16:26:06.250095
35	river	river@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/karalek/128.jpg	-64021	tir538	--- []\n	2013-12-13 19:32:31.252439	2013-12-13 19:32:31.252439
36	rolf	rolf@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/poormini/128.jpg	-14420	ddi693	--- []\n	2014-03-26 06:44:25.254802	2014-03-26 06:44:25.254802
37	ruben	ruben@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/bublienko/128.jpg	-31858	ppg721	--- []\n	2014-06-08 11:30:41.257141	2014-06-08 11:30:41.257141
38	rudi	rudi@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/SlaapMe/128.jpg	-96850	iqd417	--- []\n	2014-02-13 13:34:45.259488	2014-02-13 13:34:45.259488
39	russ	russ@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/pcridesagain/128.jpg	-58748	ykh624	--- []\n	2014-04-23 22:04:23.260996	2014-04-23 22:04:23.260996
40	ryan	ryan@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mikemai2awesome/128.jpg	-65245	jlc695	--- []\n	2014-04-01 20:19:53.263343	2014-04-01 20:19:53.263343
41	shaina	shaina@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/dunenkoff/128.jpg	-35132	gjg192	--- []\n	2014-01-29 14:26:31.265654	2014-01-29 14:26:31.265654
42	talia	talia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/pcridesagain/128.jpg	-88923	lso784	--- []\n	2014-04-08 16:59:56.267961	2014-04-08 16:59:56.267961
43	ursula	ursula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/markjenkins/128.jpg	-88964	dsh819	--- []\n	2014-06-01 01:27:38.270314	2014-06-01 01:27:38.270314
44	vince	vince@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/baliomega/128.jpg	-75299	ogp672	--- []\n	2014-06-10 21:04:21.272634	2014-06-10 21:04:21.272634
45	wilson	wilson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/VinThomas/128.jpg	-25537	enc251	--- []\n	2014-06-01 14:49:59.275145	2014-06-01 14:49:59.275145
46	xavier	xavier@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/logorado/128.jpg	-67047	ytf413	--- []\n	2014-01-22 16:39:30.277492	2014-01-22 16:39:30.277492
47	yvette	yvette@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/cemshid/128.jpg	-74068	mur952	--- []\n	2014-05-19 16:44:02.279011	2014-05-19 16:44:02.279011
48	zachary	zachary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/yalozhkin/128.jpg	-48361	qes315	--- []\n	2014-03-10 10:53:07.281371	2014-03-10 10:53:07.281371
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('users_id_seq', 48, true);


--
-- PostgreSQL database dump complete
--

