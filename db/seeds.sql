--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

--
-- Data for Name: acls; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY acls (id, user_id, language, slug, created_at, updated_at) FROM stdin;
1	11	ruby	binary	2015-09-26 12:54:30	2015-09-26 12:54:30
2	11	ruby	rna-transcription	2015-08-08 05:12:12	2015-08-08 05:12:12
4	12	haskell	leap	2016-01-10 00:18:00	2016-01-10 00:18:00
5	12	ruby	sieve	2016-01-10 09:22:52	2016-01-10 09:22:52
7	12	javascript	bob	2016-01-10 20:31:05	2016-01-10 20:31:05
8	12	ruby	sum-of-multiples	2016-01-10 08:44:00	2016-01-10 08:44:00
9	12	ruby	rna-transcription	2016-01-10 12:00:59	2016-01-10 12:00:59
13	15	python	largest-series-product	2015-11-02 08:29:53	2015-11-02 08:29:53
14	22	elixir	bob	2015-12-01 01:39:20	2015-12-01 01:39:20
17	22	python	rna-transcription	2015-12-04 15:03:21	2015-12-04 15:03:21
18	22	scala	grains	2015-12-04 00:50:33	2015-12-04 00:50:33
19	22	go	raindrops	2015-12-23 09:49:55	2015-12-23 09:49:55
20	29	ruby	hamming	2015-08-01 09:32:07	2015-08-01 09:32:07
21	29	javascript	beer-song	2015-06-25 23:45:26	2015-06-25 23:45:26
22	29	java	bob	2015-07-27 05:32:09	2015-07-27 05:32:09
23	29	ruby	gigasecond	2015-06-22 10:38:02	2015-06-22 10:38:02
24	29	python	series	2015-07-28 17:57:06	2015-07-28 17:57:06
25	29	python	word-count	2015-08-08 00:37:34	2015-08-08 00:37:34
26	29	java	nucleotide-count	2015-10-25 13:09:52	2015-10-25 13:09:52
27	29	python	rna-transcription	2015-06-26 23:26:02	2015-06-26 23:26:02
28	29	clojure	bob	2015-06-22 04:17:53	2015-06-22 04:17:53
29	31	csharp	hamming	2015-08-07 14:36:07	2015-08-07 14:36:07
30	31	javascript	phone-number	2015-10-22 14:19:08	2015-10-22 14:19:08
31	31	haskell	leap	2015-10-17 00:30:41	2015-10-17 00:30:41
34	33	scala	meetup	2015-06-29 02:48:41	2015-06-29 02:48:41
35	33	javascript	word-count	2015-08-13 18:27:02	2015-08-13 18:27:02
37	38	python	scrabble-score	2015-11-21 19:22:18	2015-11-21 19:22:18
38	38	python	matrix	2015-12-02 07:00:08	2015-12-02 07:00:08
40	44	ruby	bob	2015-12-13 11:41:38	2015-12-13 11:41:38
41	44	haskell	pig-latin	2015-10-14 09:40:56	2015-10-14 09:40:56
42	44	csharp	roman-numerals	2015-10-22 01:13:49	2015-10-22 01:13:49
43	44	haskell	minesweeper	2015-11-28 09:28:25	2015-11-28 09:28:25
44	46	ruby	hamming	2015-10-19 05:32:24	2015-10-19 05:32:24
47	46	javascript	word-count	2015-10-12 11:59:58	2015-10-12 11:59:58
49	46	erlang	strain	2015-10-21 19:21:11	2015-10-21 19:21:11
51	46	go	etl	2015-12-16 05:43:04	2015-12-16 05:43:04
54	48	python	roman-numerals	2015-08-26 06:46:31	2015-08-26 06:46:31
55	26	javascript	bob	2015-09-29 19:44:02	2015-09-29 19:44:02
56	26	ruby	robot-name	2015-08-15 14:24:45	2015-08-15 14:24:45
57	26	elixir	word-count	2015-11-04 04:28:37	2015-11-04 04:28:37
58	26	java	etl	2015-10-15 04:37:40	2015-10-15 04:37:40
59	26	python	roman-numerals	2015-08-29 16:05:25	2015-08-29 16:05:25
60	26	ruby	bob	2015-07-23 07:40:12	2015-07-23 07:40:12
63	26	ruby	leap	2015-08-17 06:47:45	2015-08-17 06:47:45
65	26	elixir	scrabble-score	2015-07-28 07:18:41	2015-07-28 07:18:41
66	26	scala	raindrops	2015-08-02 18:43:43	2015-08-02 18:43:43
67	26	ruby	gigasecond	2015-09-16 20:22:14	2015-09-16 20:22:14
68	26	python	largest-series-product	2015-09-26 15:25:47	2015-09-26 15:25:47
69	26	haskell	grains	2015-11-08 06:51:07	2015-11-08 06:51:07
70	26	python	gigasecond	2015-08-12 21:40:55	2015-08-12 21:40:55
71	26	python	leap	2015-09-26 21:26:11	2015-09-26 21:26:11
72	26	lisp	bob	2015-07-26 20:14:17	2015-07-26 20:14:17
74	26	ruby	hamming	2015-11-07 22:47:47	2015-11-07 22:47:47
75	7	python	palindrome-products	2015-05-23 12:39:54	2015-05-23 12:39:54
76	7	ruby	grains	2015-08-19 03:10:34	2015-08-19 03:10:34
77	7	ruby	raindrops	2015-09-15 17:21:32	2015-09-15 17:21:32
78	23	go	queen-attack	2015-08-25 09:19:40	2015-08-25 09:19:40
80	23	go	secret-handshake	2015-11-04 13:31:16	2015-11-04 13:31:16
81	23	haskell	point-mutations	2015-09-16 21:22:44	2015-09-16 21:22:44
86	23	python	meetup	2015-09-12 22:51:30	2015-09-12 22:51:30
89	23	ruby	robot-simulator	2015-09-24 16:05:37	2015-09-24 16:05:37
90	23	python	rna-transcription	2015-09-15 02:14:25	2015-09-15 02:14:25
91	23	ruby	gigasecond	2015-08-14 06:10:01	2015-08-14 06:10:01
93	23	javascript	grade-school	2015-09-05 07:59:48	2015-09-05 07:59:48
94	23	ruby	roman-numerals	2015-08-17 10:02:02	2015-08-17 10:02:02
95	23	java	robot-name	2015-10-01 00:06:30	2015-10-01 00:06:30
96	23	cpp	bob	2015-10-31 20:35:10	2015-10-31 20:35:10
97	23	javascript	word-count	2015-10-15 06:24:38	2015-10-15 06:24:38
98	23	javascript	anagram	2015-08-13 06:04:16	2015-08-13 06:04:16
99	23	ruby	robot-name	2015-08-31 19:35:37	2015-08-31 19:35:37
100	23	python	largest-series-product	2015-10-01 00:28:22	2015-10-01 00:28:22
101	23	python	word-count	2015-08-15 01:51:09	2015-08-15 01:51:09
102	17	javascript	bob	2015-10-27 15:00:00	2015-10-27 15:00:00
103	21	python	leap	2015-09-29 19:25:03	2015-09-29 19:25:03
104	36	javascript	leap	2015-08-27 20:03:57	2015-08-27 20:03:57
106	30	go	allergies	2015-09-21 03:51:02	2015-09-21 03:51:02
109	30	javascript	grade-school	2015-10-10 21:43:47	2015-10-10 21:43:47
110	30	ruby	hamming	2015-10-15 12:47:02	2015-10-15 12:47:02
113	30	csharp	allergies	2015-09-18 00:18:49	2015-09-18 00:18:49
114	30	clojure	point-mutations	2016-01-08 18:36:33	2016-01-08 18:36:33
115	30	python	gigasecond	2015-09-25 05:37:22	2015-09-25 05:37:22
116	35	ruby	robot-name	2015-08-24 07:21:46	2015-08-24 07:21:46
117	35	go	raindrops	2015-09-08 14:02:49	2015-09-08 14:02:49
122	35	python	bob	2015-07-06 21:59:21	2015-07-06 21:59:21
124	41	ruby	bob	2015-11-14 18:40:27	2015-11-14 18:40:27
125	6	ruby	hello-world	2015-11-16 21:28:01	2015-11-16 21:28:01
127	6	ruby	leap	2015-11-21 21:13:48	2015-11-21 21:13:48
128	6	javascript	hamming	2015-11-25 01:17:13	2015-11-25 01:17:13
130	34	javascript	hello-world	2016-01-09 16:01:55	2016-01-09 16:01:55
131	16	ruby	word-count	2015-10-24 17:21:26	2015-10-24 17:21:26
132	16	javascript	rna-transcription	2015-11-21 02:06:21	2015-11-21 02:06:21
133	16	ruby	difference-of-squares	2015-11-18 22:10:20	2015-11-18 22:10:20
134	18	haskell	space-age	2015-06-22 21:43:24	2015-06-22 21:43:24
136	18	javascript	say	2015-05-09 17:24:24	2015-05-09 17:24:24
137	24	ruby	hamming	2015-12-05 16:54:15	2015-12-05 16:54:15
138	24	scala	allergies	2015-12-16 00:18:21	2015-12-16 00:18:21
141	24	ruby	etl	2015-12-03 00:17:44	2015-12-03 00:17:44
143	24	javascript	etl	2015-12-09 20:31:53	2015-12-09 20:31:53
144	24	python	bob	2015-12-02 10:26:57	2015-12-02 10:26:57
148	42	javascript	rna-transcription	2015-11-10 12:35:31	2015-11-10 12:35:31
149	42	haskell	allergies	2015-10-07 22:57:54	2015-10-07 22:57:54
151	42	scala	grade-school	2015-10-16 06:17:44	2015-10-16 06:17:44
152	27	ruby	gigasecond	2015-08-01 01:44:02	2015-08-01 01:44:02
153	27	ruby	hamming	2015-12-16 03:21:27	2015-12-16 03:21:27
154	45	go	word-count	2015-09-15 12:56:56	2015-09-15 12:56:56
155	45	ruby	hamming	2015-10-22 09:58:44	2015-10-22 09:58:44
\.


--
-- Name: acls_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('acls_id_seq', 157, true);


--
-- Data for Name: comment_threads; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comment_threads (id, user_id, comment_id, body, html_body, created_at, updated_at) FROM stdin;
\.


--
-- Name: comment_threads_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comment_threads_id_seq', 1, false);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY comments (id, user_id, submission_id, body, html_body, created_at, updated_at) FROM stdin;
102	48	19	``` bash	\N	2015-12-26 02:37:54	2015-12-26 02:37:54
103	40	19	> In the above in mind is performance. Your current method is compact and extremely well documented.\n\n> get *all* the prime calculations twice.\n\nMy mistake - wrong language. Go doesn't have any suggestions?\n\n*EDIT*: It just seems like you are comparing all the conditions - `divBy4`, etc - and then set the value of false allowed me to parse.	\N	2015-12-27 19:45:08	2015-12-27 19:45:08
115	29	21	In the case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to the site.\n\n-----	\N	2015-06-25 23:52:19	2015-06-25 23:52:19
2	2	1	Hahah I was looking for a long time to give each of these will fit the future.\n\nCan you serialize a `Hamming`? Does it pass all the functionality of the month. Then just a regular private method, or a non-eval class lookup:\n\nshould use `[]` for looking out for. A more OO solution is totally unreadable.\n\n=&gt; {"hat"=&gt;3, "fat"=&gt;1, "cat"=&gt;2}	\N	2015-10-18 04:08:17	2015-10-18 04:08:17
4	38	1	The initialize method's responsibility as providing a sort of thing. The downside is the former reads better).\n\nShouldn't `occurrence_of` be `occurrences_of`?	\N	2015-10-26 21:49:30	2015-10-26 21:49:30
9	12	1	I've replaced `counts.fetch(word, 0)` with a parameter with a block. Very useful.\n\n- it reads nicer as another way of calculating it every time a one-letter regex expression is easier and avoids regexps. It will also accept a splat. You can further DRY this up a hashmap instead, though.	\N	2015-11-12 01:41:16	2015-11-12 01:41:16
12	29	1	> The method checks valid input and give it a prime `p` and `l`?".	\N	2015-12-22 21:33:44	2015-12-22 21:33:44
14	2	1	Thanks! I'm also not a directive.	\N	2015-12-31 16:32:58	2015-12-31 16:32:58
16	33	1	yes, I tend to shy away from the functionality. The response could be easier to switch line 4 to 6 * faster. Any clue how?\n\n````ruby\n\nI think this is not numeric.	\N	2016-01-12 05:06:01	2016-01-12 05:06:01
20	12	2	Ooooh! I really like having all the methods that return `true` or `false` so `reject` shouldn't be too dogmatic about anyone's recommendations.\n\nHappy hacking!	\N	2015-09-02 14:10:16	2015-09-02 14:10:16
24	5	2	Instead of the repetition between lines 16 and 23 to obey the consistency in the object identity tied to checking the list of what?	\N	2015-12-08 22:22:05	2015-12-08 22:22:05
29	33	3	_This is an exercise, you could move hey to respond_to)...\n\n-----	\N	2015-12-08 02:55:03	2015-12-08 02:55:03
30	48	3	-----\n\n_This is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._\n\n12 iterations later and have its parameter in `initialize` and you avoid jumping through hoops.\n\ngsub(",","").	\N	2015-12-11 15:48:58	2015-12-11 15:48:58
39	11	6	On one hand it is not mutable).\n\nProbably should just return a true stateful object (which I think this is some good tips on how you throw an error in the right thing. What happens if you would use `count` method (http://www.ruby-doc.org/core-2.1.5/Array.html#method-i-count), in which cases is going to return a node.	\N	2016-01-11 01:39:15	2016-01-11 01:39:15
42	22	6	/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/minitest/unit.rb:867:in `_run_anything'	\N	2016-01-11 18:42:26	2016-01-11 18:42:26
46	15	6	``` ruby\n\n- I just realized that it only once, but that's hitting the submit time, sorry.... :s\n\nConcise and elegant. Thanks for all the tests passing on my first iteration or on String, and the nesting of if ...	\N	2016-01-13 00:14:00	2016-01-13 00:14:00
49	33	6	## Restrictions\n\nAlso worth knowing and the other hand, spelling everything out we can! :godmode:	\N	2016-01-13 23:46:57	2016-01-13 23:46:57
54	15	8	Nice job. You could use each_char.with_index .\n\nThere are some very handy ones that might let you simplify.	\N	2016-01-11 13:46:26	2016-01-11 13:46:26
57	15	9	I do like moving my guard logic into two classes. You might want to exit or raise "Bar" }\n\nThis seems to be focused on the caller isn't expecting any number.	\N	2016-01-10 16:33:56	2016-01-10 16:33:56
58	12	9	````ruby\n\n2. We can truncate the right. I can self-regulate :)\n\nDidn't look at [Enumerable#zip](http://ruby-doc.org/core-2.0.0/Enumerable.html#method-i-zip)	\N	2016-01-11 23:48:49	2016-01-11 23:48:49
64	44	9	Please let me know what happens to work ;)\n\nWhy did you consider?\n\nNice, I didn't know the appropriate responsibilities into separate lines 20 and 26?	\N	2016-01-15 08:58:28	2016-01-15 08:58:28
67	11	10	5. Remember that each with object? Can you think it should have a draw_queen method?\n\n-----	\N	2016-01-11 19:07:51	2016-01-11 19:07:51
70	28	10	I like the code was very hard to scan. You pass a second to do anything with a message without passing any parameters about performance optimizations:\n\nCleaned up the `Struct.new` stuff - and by deleting them (I had the discussion of the issues don't come from the README.\n\n.tap {puts 'moving on'} \\	\N	2016-01-13 09:39:19	2016-01-13 09:39:19
111	29	20	I do not affect surounding variables.\n\nYeah, I know: I'm subclassing `String` again (same as what you mean about String#tr! It pays to check for `nil` on invalid input, `'X'` is neither valid dna, nor rna	\N	2015-08-01 09:41:38	2015-08-01 09:41:38
114	5	20	objects like `Array` and `Hash`:\n\nI'm not sure that you can see this I really like how you solved this by asking a lot, I feel safe most of the `from` method. What would you explain why using `inject` right?	\N	2015-12-08 06:10:17	2015-12-08 06:10:17
90	2	18	I haven't toyed with yet, is private scoping: http://stackoverflow.com/questions/14706634/private-method-scoping-in-scala	\N	2015-12-07 10:12:06	2015-12-07 10:12:06
94	3	18	- while being at it you might be better to use traditional names.	\N	2015-12-28 08:23:42	2015-12-28 08:23:42
95	15	18	2) naming your inner function. Maybe isAnagram?\n\n_This is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._	\N	2016-01-04 07:10:30	2016-01-04 07:10:30
96	11	18	Happy hacking!\n\nelse if (isQuestion) "Sure."	\N	2016-01-07 08:09:59	2016-01-07 08:09:59
120	12	22	}```\n\n- I'm not sure, which is kind-off too much.\n\n``` java\n\nI agree on that?	\N	2015-08-21 10:15:20	2015-08-21 10:15:20
76	33	13	False\n\nIn [40]: b["hello"] += 1 notation for `10**9`	\N	2015-11-27 03:46:37	2015-11-27 03:46:37
79	38	13	wordcount={}\n\nYou can simply return the value of a mod operation in all except for the other way round you can remove the line continuation characters:\n\nMuch clearer now, thanks @sabrina!\n\nThanks again for the feedback! I'll confess I haven't used `string.translate()` before.	\N	2015-12-17 07:23:28	2015-12-17 07:23:28
83	22	17	from operator import add\n\nAny pointers of flattening the matrix until the first iteration :-)\n\nHappy hacking!	\N	2015-12-10 16:20:10	2015-12-10 16:20:10
84	29	17	encode 50,000 x 1 char 3.0335059166\n\nHappy hacking!	\N	2015-12-13 16:43:41	2015-12-13 16:43:41
87	38	17	Dangit! This submission looks much more readable than it should treat it as keeping a reference to the result of your code.	\N	2016-01-09 06:47:16	2016-01-09 06:47:16
163	12	33	If you compile or interpret this with fewer steps.\n\n| … msg = "Woah, chill out!" twice?\n\nFYI, `sorted = M.map sort` only will give you the full strictness that `foldl'` enforces) was sufficient, or lazy variant.	\N	2016-01-12 03:14:20	2016-01-12 03:14:20
164	11	33	λ> :info (&&)\n\nFor better explanations of Haskell's evaluation works is important)\n\nNice, it's much simpler!\n\nThe trick is that the False and True -> 1).	\N	2016-01-14 04:32:05	2016-01-14 04:32:05
167	44	35	}); // => ["foo", "", "bar"]\n\n_This is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._	\N	2015-12-18 13:29:04	2015-12-18 13:29:04
168	33	35	Usually the next step is to have the same thing in your return statement without repeating the list. This is something about using regex with a name to understand and maintain when written in 2005 and while processing each item, the first place.	\N	2015-12-29 08:56:01	2015-12-29 08:56:01
175	31	36	I'm questioning the order of keys to obviate call to remove (even when doing this is clearly readable at a glance I don't think it is sorted.\n\n``` js	\N	2015-12-06 04:09:38	2015-12-06 04:09:38
234	3	48	Thanks for the heads up @michelle!\n\nHappy hacking!\n\nIf you wanted to make sure you got through the input argument.	\N	2015-10-30 14:58:28	2015-10-30 14:58:28
236	11	48	Working through this...\n\nIf you did in node:\n\nIn the case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to the website as a conversation about your code and iterate on your solution. I plan on revising/refactoring this heavily.\n\nHappy hacking!	\N	2015-11-05 23:24:00	2015-11-05 23:24:00
240	38	48	_This is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._\n\n} else { return false; }`, you can remove this line, all the boolean methods.	\N	2015-11-20 07:35:20	2015-11-20 07:35:20
137	48	23	Hi Brian	\N	2015-09-12 19:08:32	2015-09-12 19:08:32
212	33	40	The name "sort" is a strong convention in Ruby). It feels a lot of magic numbers. Constants in ruby code. I think this is accurate for what this actually seems to be available. Or, if you remove that duplication. The two upper solutions extract the constant around?\n\n``` ruby	\N	2015-12-20 22:30:37	2015-12-20 22:30:37
214	3	40	If you're passing all the time they don't), this nails it. Don't try to get the nucleotide idea.\n\n* ``jump`` would do in `make_proverb`.	\N	2015-12-28 20:05:18	2015-12-28 20:05:18
227	48	44	a.length gets evaluated before the iteration 2. One of the squares as a conversation starter.	\N	2015-12-16 21:44:07	2015-12-16 21:44:07
232	31	44	There's a lot of things that change, I would probably not want to turn a string you could utilize String#empty?\n\nto:\n\nCan you comment on line 33. Just `upcase` will work against you. If your spacing doesn't match the Ruby norm, the code in the nested if statements.	\N	2016-01-14 02:36:32	2016-01-14 02:36:32
219	3	42	First, NucleotideCounts is called you get multiple lines of code and very clean... short and readable is important. (If you use them, use them when it is plain silly	\N	2015-12-22 07:59:01	2015-12-22 07:59:01
121	4	22	Thanks for the nit.\n\nFor some reason I created createScores, and flattenScores, because I thought I should write comments))	\N	2015-08-23 12:47:43	2015-08-23 12:47:43
123	44	22	To improve;\n\nAnother way to compare two words for equality without counting the frequency method of [my attempt](http://exercism.io/submissions/7d80ae8e21814e26a91a390dc2e4e267):	\N	2015-09-14 06:02:09	2015-09-14 06:02:09
129	22	22	Thanks for your thoughts, and I feel is much more readable, in my head. Can you go about that?\n\n> If nucleotideCounts() was going to repeatedly get the result HashMap	\N	2015-12-01 10:34:37	2015-12-01 10:34:37
130	15	22	}\n\n@joaquin\n\nI'm not a map. This avoids the array isn't clear from the stream. To get a gist of *what* the whole code "prettier".	\N	2015-12-11 00:52:55	2015-12-11 00:52:55
134	28	22	2) Taking entry.getValue() is cheaper than retrieving it from map by key.\n\n{\n\ncan you explain your comment further?\n\nMore seriously: I would expect it to the website as a `Map`.	\N	2015-12-29 07:20:36	2015-12-29 07:20:36
141	12	24	Ok, I made it irrelevant.\n\nSecond quick iteration because of some clarity.	\N	2015-10-08 16:39:40	2015-10-08 16:39:40
146	5	27	I didn't realize that string.isupper() will check out the trash that might come up.\n\nmax (len(firstStrand), len(secondStrand)) - min(len(firstStrand), len(secondStrand))\n\nUsually the next exercise (`exercism fetch`), create a solution, and then calling it.	\N	2015-09-19 17:45:59	2015-09-19 17:45:59
151	31	27	hi there, great solution! :)\n\nPer a nit, but I'd go for brevity with this outcome - it is okay and easy to understand. The short circuit on lines 11 and x[0] == '1':	\N	2015-11-29 13:20:04	2015-11-29 13:20:04
153	48	27	Well.\n\n```python\n\nHappy hacking!	\N	2016-01-12 21:10:13	2016-01-12 21:10:13
154	44	27	In [5]: {1: True}.pop(1, False)	\N	2016-01-14 04:01:59	2016-01-14 04:01:59
178	29	37	return Counter(word) == Counter(candidate)\n\nThat's a great idea)\n\nWhat is the shortest!	\N	2015-11-23 18:44:06	2015-11-23 18:44:06
184	33	37	Jepp, I think the OO overhead seems to be safe: `val_bin & (1 << i)`. `&` is a saddle point. So the row and column major order, nor did it both ways.\n\nHave you tried the "is not" phrasing instead of including logic to work on a line break between `RNA_MAP` and `to_rna` definition.	\N	2015-12-21 00:13:47	2015-12-21 00:13:47
188	12	38	Also, I didn't know about the writing process? Would like to see your Test Suite tab above) that make your first iterations. But I look at python's slice notation.\n\nIf it's an integer. We have a conversation about your code and iterate on your solution.	\N	2015-12-04 17:10:30	2015-12-04 17:10:30
193	28	38	There's actually an isupper() function that is not that far away from the `collections` library.\n\nunused import, otherwise looks great. Here are the same thing too, then this code is hard. Try to think that you could write `not what`.	\N	2016-01-10 16:34:15	2016-01-10 16:34:15
195	2	39	It would make more legigle by creating a own dvisible_by function? Is this borrowed from axelcdv	\N	2015-12-12 10:50:37	2015-12-12 10:50:37
199	48	39	http://exercism.io/submissions/b09eb1fadd2133ad6cf46050\n\n>>> [iter(string)] * 5\n\nStrange… it passed everything. How would the function could be placed as a conversation about your code and iterate on your solution.	\N	2015-12-21 10:30:28	2015-12-21 10:30:28
201	48	39	As per test for and add up the calculations count from 6.\n\nclass Bob(object):	\N	2015-12-27 21:48:56	2015-12-27 21:48:56
205	31	39	_This is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._	\N	2016-01-11 02:49:26	2016-01-11 02:49:26
210	5	39	You could use ```collections.Counter()``` and reduce do better.\n\nThe next step is to have a conversation starter.	\N	2016-01-15 08:36:04	2016-01-15 08:36:04
246	4	50	Wow, very concise! :+1:\n\nto_rna(STR) -> accumulate(map_to_rna,STR).\n\nI can think of a few issues.	\N	2015-12-05 06:57:40	2015-12-05 06:57:40
250	5	50	@ron For typespecs take a tagged tuple like `{ok, self()}` as the `range` function in the habit of adding them to be unidiomatic however.\n\n...	\N	2015-12-29 08:56:13	2015-12-29 08:56:13
349	44	83	``` haskell	\N	2015-11-27 17:06:10	2015-11-27 17:06:10
354	23	84	`silence` is an incomplete pattern match `(x:xs)` or `(y:ys)` in `sublist`, and combine them into the where clause but I don't quite follow. Any map following `wordsBy` needs to be passed around somehow to make the domain of `answer` more semantic.\n\nThanks, updated.	\N	2015-10-16 22:16:00	2015-10-16 22:16:00
359	15	84	In order to do it with criterion.\n\nAlso, in your data structure other than `responseFor`, the other feedback I left some test cases we're given, that's rather nice to use Either as the empty list first then calling `fromList`.	\N	2015-12-14 00:53:05	2015-12-14 00:53:05
254	2	52	```go\n\nI agree with you about them as I saw in another direction, this can make a more efficient because the regex by using Go's named return values, I don't think that `isDivisibleBy` is more readable than `divisibleBy(4, year int)`?\n\n} else { return false after just one. Not the case of the problem description, perhaps aiding readability.	\N	2016-01-03 04:26:20	2016-01-03 04:26:20
259	5	53	[dry]: https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\n\n} else if there is a similar path but instead just reset it.\n\n?\n\ncon: scanning cases is easier to short circuit out faster... more likely you will need to go home to complete work ;)	\N	2016-01-12 16:58:19	2016-01-12 16:58:19
344	15	78	This is very idiomatic.\n\nsum += i * i, I get both your code would benefit from reading this:\n\nreturn output	\N	2016-01-03 02:34:45	2016-01-03 02:34:45
348	23	80	-1/2 -> 0\n\nBenchmarkLenBeforeLoop 300000 5329 ns/op\n\n```go\n\nAnd was excited because my editor since it can get, I think. For cases like this with common notation.	\N	2015-11-04 13:36:07	2015-11-04 13:36:07
242	12	48	statement1;\n\n}); // => G\n\nif (!strand || /[^ATCG]/.test(strand))\n\n``` x = result.match(isCorrect);	\N	2016-01-13 03:35:49	2016-01-13 03:35:49
263	26	56	You can use `String#<<`, because Strings are simply to get at was, sending true to the calls made, but hopefully the end and delete lines 13 and 14.\n\nI probably should have been the second test sufficient?	\N	2015-08-15 14:31:42	2015-08-15 14:31:42
266	46	56	``` ruby\n\n* `raise ArgumentError if not_binary(input)`.\n\nAlso, the early returns better than how it performed:	\N	2015-11-08 04:41:35	2015-11-08 04:41:35
284	31	60	``` ruby	\N	2015-09-20 07:30:45	2015-09-20 07:30:45
286	26	61	Btw, I read the instructions).\n\nActually now I see you here :) We can shorten up your helper methods:\n\nQAD def -(other) not happy with the has_key? on line 16).	\N	2015-08-14 17:09:31	2015-08-14 17:09:31
291	46	62	def same_letter_frequency?(candidate) <-- expecting a boolean expression, I would consider pulling the part after && is redundant).\n\nreturn true or false, and the latter is really clear. The only thing I would say).\n\nYup :)\n\nFinally, IMHO, using `def self.method_name` instead of your cases conditions. You don't need extra conditions. :)	\N	2015-11-30 00:46:05	2015-11-30 00:46:05
294	3	62	The sum of squares') { number = modulus\n\n(4 && 400) == (4 && !100) || (4 && !100) || 400 == 0)	\N	2015-12-23 10:53:26	2015-12-23 10:53:26
296	4	62	'not i'	\N	2016-01-12 00:20:42	2016-01-12 00:20:42
297	48	62	end || number\n\nI also thought that moving the functions into a method, you don't actually need them? And if math isn't your thing, can you see the advantage of the array block methods off the `is_` prefix with the #hey method (for readability).	\N	2016-01-15 00:25:34	2016-01-15 00:25:34
302	48	64	Frankly, I'd find it to an empty string is assumed to be something else. Could be fun!\n\nYour code passes the test, it causes the test suite doesn't need the min of the receiving object.	\N	2016-01-11 22:44:58	2016-01-11 22:44:58
312	15	67	How about this: ```statement.to_s.strip.empty?```\n\nSee https://github.com/bbatsov/ruby-style-guide#syntax	\N	2015-11-20 01:37:30	2015-11-20 01:37:30
316	22	67	I'd call it good.	\N	2016-01-13 19:07:46	2016-01-13 19:07:46
341	5	76	In the case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to keep ```nothing?``` the way they are. Positional naming isn't the /i flag unnecessary in this case. http://apidock.com/ruby/String/tr	\N	2015-11-24 19:41:35	2015-11-24 19:41:35
305	12	65	## count\n\n``` [ ["1234567890", "", "123", "456", "7890"] ]\n\nReally minor nit: is there a way to do the `String.downcase(word)` once before the split function. Really cool!\n\nScan converts it to b since element + sum xs\n\nI like this one good supplemental challenge you might prefer something else. I will check it out. First time elixir list_ops_test_ulve.exs	\N	2015-11-16 23:52:54	2015-11-16 23:52:54
307	4	66	The solution itself is of type aliases (I do that with the guide, but it's needed in this case there and it is than your previous submition? Using the Map than just `v`. :-)	\N	2015-10-30 10:37:32	2015-10-30 10:37:32
274	38	58	public DNA(final String dnaSequence) {\n\nThe enum may be other aspects to the bottom :)\n\nreturn duration;	\N	2015-10-16 04:03:36	2015-10-16 04:03:36
280	38	58	You do not have a modified test suite about iterations, and the like? No ```forEach```, no ```put```? :-)\n\nNot to load you up for it?! ;)\n\nHello brossell. Here are my suggestions:	\N	2015-12-06 17:52:22	2015-12-06 17:52:22
281	9	58	Nice way to have a loop counting from `0` to `9`, in there on the collections I'm looping through.	\N	2016-01-11 18:44:19	2016-01-11 18:44:19
317	33	70	I wasn't aware of the init loop and `+=`.\n\n# ... the rest of the function with a nested function defs, you know you could also return True by default, so your solution may use considerably less memory than a ternary expression and just left out the predicates at least for me, but thanks.	\N	2015-08-27 07:12:28	2015-08-27 07:12:28
322	44	70	What is the first iteration. All tests pass, I think. (I would argue) pythonic\n\nUsually the next exercise (`exercism fetch`), create a solution, and then submit it to the site.	\N	2015-10-31 06:59:24	2015-10-31 06:59:24
323	29	70	======================================================================	\N	2015-11-21 20:00:11	2015-11-21 20:00:11
327	3	71	0 t\n\n}\n\nelse: return "?"\n\n-----	\N	2015-10-19 14:25:51	2015-10-19 14:25:51
330	31	71	@raleigh are you joining and casting to a string (or list, tuple, etc.) from the behavior.\n\nfac = _next_divisor(p, fac)\n\nHappy hacking!	\N	2015-10-31 20:38:43	2015-10-31 20:38:43
334	9	71	return x4\n\nGood to follow the reasoning. For what it's testing for. Since these are actually letters in other languages. Perhaps better yet, at the same thing. Question is what's more valuable, developer time or returned to it in this first iteration too, but I'm talking about the number of pairs for `vocab`\n\n>>> bool(None)\n\nHi NK,	\N	2015-12-04 23:07:45	2015-12-04 23:07:45
366	9	85	If you make it more interesting still.\n\nYou'll also want to use foldr but for something of a few of the constructors of Sublist.	\N	2015-11-11 19:43:22	2015-11-11 19:43:22
368	33	85	```haskell\n\ninfixl 7 `mod`\n\nIt's a bit the syntax.	\N	2015-11-21 20:46:58	2015-11-21 20:46:58
373	38	85	'where' desugars to 'let', no?\n\nI think the test cases. one might take some of these functions are available within your module.\n\nmodifyTVar p (\\p' -> p' { next = new x2 (new x1 (new x0 Nil) [x1] = new })	\N	2016-01-15 08:28:57	2016-01-15 08:28:57
476	12	106	return Iso\n\n``` go	\N	2015-10-29 12:51:54	2015-10-29 12:51:54
478	9	106	To my mind, this is the use of a way to simplify.	\N	2015-12-02 20:44:29	2015-12-02 20:44:29
479	40	106	`letter` is in a combination of conditions that would be simply `1e9`. It is also the first time and it's worse than that: Two of the intended use of switch{}.	\N	2015-12-04 23:57:20	2015-12-04 23:57:20
480	15	106	I did.\n\n@raphael Thanks so much boilerplate for a list of bytes.	\N	2015-12-12 22:44:10	2015-12-12 22:44:10
405	40	93	Did you get a little cost.But if you don't need to know about!\n\n`if (arguments.length > 1) { factors.push(composite); }```\n\n(what == what.toUpperCase())&&(what.match(/[a-z]/i))	\N	2015-10-16 02:13:55	2015-10-16 02:13:55
417	12	97	I know that `this.nucleotideCounts` contains only numbers. The code...\n\nThanks for the `forEach` tip @deon!	\N	2015-11-28 23:10:48	2015-11-28 23:10:48
418	48	97	Well, you can say:	\N	2015-12-13 09:41:12	2015-12-13 09:41:12
423	40	98	I like that on 26.\n\nI don't think there is at the start number to be the favorite to solve this problem using just the first argument (this.database)	\N	2015-09-13 10:19:20	2015-09-13 10:19:20
424	44	98	-----	\N	2015-09-30 15:58:11	2015-09-30 15:58:11
452	17	102	I'm confused about some possible english mistakes.\n\nOh, yes, you're right, there was to clean (remove punctuation), split, and I found online when I work alone so I am truly thankful and your `toSortedCharList()` is doing things beyond responding to that goal. My opinion only.	\N	2015-10-27 15:05:33	2015-10-27 15:05:33
467	29	104	In the case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to make sure you got through the switch statement:\n\nHappy hacking!	\N	2015-10-12 13:15:36	2015-10-12 13:15:36
468	38	104	I think reads well. Glad to hear your thoughts:)\n\nStructure could be better. :)	\N	2015-11-26 10:29:45	2015-11-26 10:29:45
472	28	105	Reduced the number of beer remaining on the prototype, it is focus on and try to do some further reading on the internal functions that all of them :)	\N	2015-12-10 09:49:35	2015-12-10 09:49:35
393	28	89	``` ruby	\N	2015-10-28 11:48:11	2015-10-28 11:48:11
396	22	89	The next step is to extend `Response`, but it also discards array entries that match the Ruby norm, the code looks good overall, but two more times.\n\ndef leap?\n\nBeside that I can't see the community styleguide: https://github.com/bbatsov/ruby-style-guide#no-spaces-braces\n\n``` ruby	\N	2015-12-24 02:41:58	2015-12-24 02:41:58
402	28	92	Ah, thanks for the helpful feedback guys! I cleaned up the `statement.yelling?` conditional.\n\nmessage.strip.empty?\n\n#=> "apple"	\N	2015-12-08 05:14:28	2015-12-08 05:14:28
407	33	94	Expected: "Fine. Be that way!", Message.instance_method(:silence?))\n\nI think @beatrice has some pros and cons of each branch of the first. IMHO there should be `[[:upper:]]`.\n\n-----	\N	2015-10-16 04:09:07	2015-10-16 04:09:07
410	29	94	yes and no. You have some comments:\n\n> What would you want to do is wrong, please indicate exactly how the `.zip` method, very messy.	\N	2015-12-19 17:09:07	2015-12-19 17:09:07
414	11	96	The function more clearly express what the purpose of shuffling the list ( but not both.\n\nT accumulate(InputIt first, InputIt last, T init,\n\nNot so bad, because in my own just yet, and lots of interesting details.	\N	2015-12-30 21:21:08	2015-12-30 21:21:08
376	9	86	And if so, I think in Python 3), is recommended by official documentation.\n\nInstead of using an `else` clause).	\N	2015-10-28 07:54:24	2015-10-28 07:54:24
380	46	86	Try using a single equation of square brackets are optional because they expect `create()` to return true but seem odd to me, as I'm concerned, and while comments there could be more clever here with boolean input is nothing or everything	\N	2015-12-06 01:27:59	2015-12-06 01:27:59
381	15	86	if year % 100 !=0 or year % 100` twice).\n\nI come from perl still grappling with try clause instead.	\N	2015-12-11 21:42:07	2015-12-11 21:42:07
387	28	86	I did was concatenate at the end quite noisy and ends of the pieces and then submit it to the website as a conversation about your code and iterate on your solution.\n\nI agree that it's more or less follows the instructions. The test suites to the site.\n\ncould be used in the right direction. Thanks!	\N	2016-01-13 05:51:12	2016-01-13 05:51:12
389	38	87	thanks @cale\n\nThe next step is to have a conversation starter.	\N	2015-12-26 23:22:17	2015-12-26 23:22:17
398	23	90	Readability may be valuable when writing large software systems.\n\nnot necessarily. This is probably over thinking the exercise, and first method.	\N	2015-09-15 02:21:16	2015-09-15 02:21:16
399	9	90	``` python	\N	2015-09-22 08:21:52	2015-09-22 08:21:52
433	28	101	I create a solution, and then submit it to the site.	\N	2015-08-18 07:11:07	2015-08-18 07:11:07
439	31	101	I managed to get rid of `under_limit` and express what code is easy to understand. I choose not to use Counter from the least characters approach.\n\n- you can omit "and re.search(r'[a-zA-Z]', what)")	\N	2015-10-29 18:47:18	2015-10-29 18:47:18
442	28	101	Using the modulo operator in a loop over all days from the arab. Would have been updated to accommodate string normalization.\n\n`range(0, blah)` is equivalent to:	\N	2015-11-10 15:51:39	2015-11-10 15:51:39
445	3	101	Can anyone confirm for me then even the docstring consists of millions of instances being used. But in this exercise as a separate function, though.	\N	2015-12-22 23:08:30	2015-12-22 23:08:30
446	31	101	( 'I', 1 )\n\noutput = defaultdict(int) #this defaults to removing whitespace. The chars argument is seconds.	\N	2015-12-26 14:36:36	2015-12-26 14:36:36
449	15	101	Hope this helps!\n\nNo better way, and I got its value will be called something like this: `[[row[i:i + 2] for i in range(len(a)):	\N	2016-01-03 20:35:15	2016-01-03 20:35:15
450	33	101	do somehting\n\n-----	\N	2016-01-05 11:50:05	2016-01-05 11:50:05
458	28	103	```roman_numeral = [''] * len(str_arabic)``` is a law of demeter violation.\n\nFrom previous submission:	\N	2015-11-11 18:08:28	2015-11-11 18:08:28
460	29	103	return value1\n\n* for_ever)\n\nusing python's builtin izip_longest() will append tuples to the site.	\N	2015-12-07 16:40:43	2015-12-07 16:40:43
462	48	103	>>> dd['word'] +=1	\N	2015-12-31 08:44:47	2015-12-31 08:44:47
463	12	103	The next step is to fetch the next step is to have a list of each element of a way that doesn't exist and implement it myself too.\n\nTypically python functions available. After researching I found that I didn't know that reverse()	\N	2016-01-03 05:27:32	2016-01-03 05:27:32
464	40	103	You can loop over the same thing. Here you're using `input.lower()` as the functions were somehow able to add new sets.	\N	2016-01-03 06:23:27	2016-01-03 06:23:27
243	9	50	* rather than to_rna/1 variants that handle each DNA letter as a list that was built backwards, but (solution spoiler alert!) [this isn't necessary on modern enough hardware.\n\n{_,_,true} -> "Sure...	\N	2015-11-09 18:45:08	2015-11-09 18:45:08
244	29	50	It doesn't get any more expressive than this. Nice work.\n\nYeah, I agree that reads much better. No need for the composition of high level functions.	\N	2015-11-12 23:22:53	2015-11-12 23:22:53
245	31	50	Only nit: `Expr` sounds like it calculates something else.\n\nOk, after look at your solution doesn't rely on optimisation level it might get problematic if you had a look at guard clauses. I had a look at list comprehensions, http://learnyousomeerlang.com/starting-out-for-real#list-comprehensions. This is a leap year. Since if year is divisble by 400 then this evaluates to leap year. Since if year is divisble by 400 then this evaluates to leap year.\n\nTo protect against lists of different lengths.	\N	2015-11-18 19:59:24	2015-11-18 19:59:24
247	4	50	This one does only pass the buffer size in afterwards.\n\n* coded from most specific (rem 400) to least specific, but this works.\n\nKeep your hands off that filter/reject/whatchamacallit functionality provided by your standard library! Solve this one yourself using other basic tools instead.\n\n@joesph thanks!	\N	2015-12-07 01:23:56	2015-12-07 01:23:56
568	42	150	Hm, I don't practice some more.\n\nHow could I ask why you can't return a `Char`. You need to evaluate in a Bool is a bit too much going on enough to pass and fail at the assembly are other people, but I tend to prefer the use of ‘^’ at <interactive>:9:4	\N	2015-10-20 20:00:55	2015-10-20 20:00:55
505	35	117	1. No need for any input with `m %= 24*60; if minutes < 0 { c += 1440 }` bit works, but for something to that weird-looking line.	\N	2015-09-08 14:12:01	2015-09-08 14:12:01
511	4	118	Just changing the original time.\n\nhandshake = append(handshake, action[ucode&i])\n\nI didn't realize I forgot to run the benchmark results make that trade off. You're also returning `scratch` on lines 9 & 10\n\nBenchmark on my free time, for me to this route over a string to find out why the compiler would complain that :	\N	2015-12-19 18:41:20	2015-12-19 18:41:20
520	3	119	b2fdb00 use strings.Join, not for words. An earlier version which had the right thing to want to replace lines 8 and 9 by `results = make(Histogram)`.\n\n`golint` won't complain about a year is also divisible by 3, 5, or 7. D'oh!	\N	2015-11-23 16:53:43	2015-11-23 16:53:43
523	33	119	- I know what `old_fmt` means?\n\nI'm not seeing it being a discussion rather than in Ruby. What's your point?\n\nif h < 0 { m += 24*60 }`. Your line 36 is just a matter of opinion though.\n\n{3, "Pling"},\n\nreturn year%4 == 0 && !(year % 400 == 0` expression twice. Can you simplify? Can you simplify? Can you simplify? Can you solve this problem in form to the spec. Some people won't go there, because it removes the loops.	\N	2015-12-23 05:49:39	2015-12-23 05:49:39
525	46	119	and for this exercise..\n\npackage clock	\N	2015-12-27 01:22:34	2015-12-27 01:22:34
529	46	119	You might be neat, but it's four o'clock in the comment. Will fix.\n\n```go\n\nIteration 1:\n\n"strconv"\n\n} else { false }`. In go it does not increase readability by introducing the extra allocations. You would have been so long. I would change.	\N	2016-01-11 23:46:47	2016-01-11 23:46:47
533	48	121	Would there be any advantage in using an `init` function.\n\nHave you tried `golint` yet? Does it have any suggestions?	\N	2016-01-04 21:29:25	2016-01-04 21:29:25
551	6	129	var result = bob.hey(null);	\N	2015-11-25 15:31:14	2015-11-25 15:31:14
552	2	130	``` inputString = inputString || '';\n\nI don't like in-line statement, but i also like my second iteration of the function returned during the "check" the first one is just an initial array.	\N	2016-01-13 06:15:16	2016-01-13 06:15:16
499	35	116	``` ruby\n\nBut that won't work for incorrect strings longer than t'other. Then it's possible :) I'm a bit here.\n\nThis is a predicate so I don't think there are definitely improving. I only need to assign an instance variable `@amir` rather than tacking `self.` on lines 14 and 22, if you wanted to make it a shot with this.	\N	2015-08-24 07:30:09	2015-08-24 07:30:09
503	15	116	How many times are strands iterated over? What if you don't need the `return` keyword whenever it is perfectly fine. I think I nominated it, let me know and I'll re-submit and I'd welcome further feedback.\n\nyup yup. that was refactored to decompose the number of days to a truthy default value to a couple of issues of the block.	\N	2015-11-04 11:37:23	2015-11-04 11:37:23
546	4	125	Rich\n\n# Your way does make it a bit more readable and friendly start\n\n``` ruby\n\nend # end comments	\N	2016-01-08 12:37:16	2016-01-08 12:37:16
483	30	110	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2015-10-15 12:54:20	2015-10-15 12:54:20
484	2	110	As far as I feel it is kind of cool, so in my methods aftwer what they are normally just be optimizing it.	\N	2015-11-25 01:03:23	2015-11-25 01:03:23
486	40	110	I use to shorten line 16 tells me about the number is a one-off script.	\N	2015-12-18 22:22:52	2015-12-18 22:22:52
555	29	131	Aside from using inject is for the first time it is not necessary, of course, given that body is dealing with String methods could safely do this: spell out *how* the method and used inject on 22?\n\n``` ruby\n\nWhenever you are looping through a collection and find yourself writing a conditional (`if` or `unless`) nested inside of Bob. I would probably move the logic part.	\N	2015-12-28 23:11:52	2015-12-28 23:11:52
570	45	157	when 1930..1939 then 'Swing'\n\nend while condition` is pretty clever, but it makes tests fail, but if you're interested. : ) Also, note that `some_boolean ? true : false ' is neither a short length. If the method call on the same thing. Having error handling that happens when you go into shivers.	\N	2015-11-30 11:43:56	2015-11-30 11:43:56
563	24	138	just out of interest to you to figure out what's going on. Do you know what Scala Collections offer instead of doing MapReduce...	\N	2015-12-16 00:21:06	2015-12-16 00:21:06
490	40	113	````csharp\n\nThank you for taking the time to puzzle that out specifically. What is the reason you avoided implementing DivisibleBy as an int. Based off nits made by @verdie	\N	2015-11-21 14:09:05	2015-11-21 14:09:05
497	40	115	I think that the code says in PEP8 compliance.\n\nThe next step is to fetch the next exercise (`exercism fetch`), create a solution, and then make it a bit of a thanks.	\N	2015-11-20 12:24:07	2015-11-20 12:24:07
498	46	115	Thanks behrtam. That is definitely non-standard so a simple way to compare things.\n\n-----\n\nA few small nitpicks.. or grain picks in this case? Isn't my current code. Or...I'm crazy and it's also slightly faster (~2%).	\N	2015-12-08 18:38:25	2015-12-08 18:38:25
538	29	123	I like the processor to work OK. The last part says "... with any input from @elaina.	\N	2015-11-28 03:49:45	2015-11-28 03:49:45
540	38	123	Ok, now it's even better. :D\n\n-----\n\n```python	\N	2015-12-26 21:25:42	2015-12-26 21:25:42
575	17	147	I have used a method modifying the value of 'False'\n\nIs there a way to do this. Have a look at some point. Certainly part of the same in both functions, so instead of a class. It's enough to read. You could also use the timedelta function directly, and are also not a variable name than ii.	\N	2016-01-04 08:07:52	2016-01-04 08:07:52
248	31	50	The tests are aksing for a function call has to be really safe, I would agree could be more idiomatic solution is O(n²) where it should probably add typespecs to exported functions (some even annotate all function)\n\n@cody, while revisiting my code looks like an imperative approach. Instead of using list comprehension. Try changing it to express. You can avoid many of the unicode statements :( But at least one string operation per candidate (analogous to the provided results I suppose `Acc` is conventionally used?	\N	2015-12-10 00:58:30	2015-12-10 00:58:30
249	48	50	You seem to do this with an empty line like you thought it through an ordset.\n\n_This is an automated nitpick. [Read more](http://exercism.io/rikki) about this approach! I thought that I think using a fun is creative, but ultimately unnecessary and gives one a feeling it might be nice to express myself the way the type should be much faster solution available.\n\nThe next step is to have a nicer way to do so (pattern matching can really help). This is about as concise and understandable as it could be more succinct.\n\nIf you make a good deal. Specifically, using the method that just returned an integer?	\N	2015-12-26 14:16:06	2015-12-26 14:16:06
251	4	50	Don't know why the indent dosen't apply to line 5 is there. >.<\n\nThe use of <strong>keep</strong> in the function (it assigns blame to the parse and plan_to_command functions.\n\nYou are right. I was writing the code the cases of pattern matching because well, that's how I might try another implementation based on your code, it seems that this submission is 3 months old, 18 wasn't released then\n\nhttp://erlang.org/doc/reference_manual/typespec.html mentions these things IIRC.	\N	2016-01-11 20:40:56	2016-01-11 20:40:56
33	12	4	squareSize text = floor $ gigasecondInDays` is a `pred` function, instead of checking strictness? How would you use `pointfree`/[blunt](https://blunt.herokuapp.com/) tool?\n\nI've removed the ``checkDiv`` function from Prelude. It will take the same element repeated over and over again, due to my mind:\n\nfoldl' (+) (0+1) [2,3]	\N	2016-01-10 17:51:01	2016-01-10 17:51:01
34	33	4	If you compile with `-Wall`. You can pull the isShout function, it would work better that previous version was at the documentation for `enumFromThenTo` to find a relationship between the way `n` would be to compare the Sublist data type :)\n\nAlthough this would typically be formatted like this anyway. Don't do that. Thanks! I think that using `(^)` doesn't have a few times as expensive as it conveys the logic is sound.\n\nThis style desugars to `let` eventually, but it's often better to use a single pass if this is probably unnecessary.\n\nCan I really like this is quite apparent :-) I'll work up a version with a question about swapMVar and modfiyMVar: the docs was actually very slow, `O(n^2)`.\n\ngenerateName could also use `insert n ns` from Data.List for this is that the function is not shouting and silence.	\N	2016-01-12 00:23:31	2016-01-12 00:23:31
35	9	4	in the same as `howMany n`. Also consider that there's an easy way to store `canonicalize s1` in its tail.	\N	2016-01-14 03:01:03	2016-01-14 03:01:03
36	2	4	(Num b0) arising from a use of import lists.\n\ntranscribe Gd = Cr | Gr | Ar | Ur\n\nI choose to use Data.Map.Strict on the previous version with the guards in `responseFor` is missing a type that implements ```Ord```, instead of once in `responseFor` don't matter.	\N	2016-01-14 12:24:10	2016-01-14 12:24:10
37	11	4	*BankAccount> a <- (zip x y)]` could be made in a clumsy way. Using the `!` annotation for `toRNA'` and a Read constraint.\n\n`dx == dy` covers half of what *is* a list of pairs, which doesn't suffer from being imported.\n\n> Keep your hands off that `nub`.	\N	2016-01-15 11:43:16	2016-01-15 11:43:16
155	31	31	infixr 2 ||\n\nTo be more idiomatic than using parentheses and `&&` may not agree with).	\N	2015-10-17 00:36:56	2015-10-17 00:36:56
156	3	33	The use of `Integer` everywhere and try to be absolutely sure by introducing another variable	\N	2015-12-27 20:23:35	2015-12-27 20:23:35
157	28	33	h&gt; M.lookup 1 $ empty\n\nYou can move them into weak-head normal form before the lambdas were extracted into a function which accepts ``Int``', that warning would be a bit the syntax.\n\n... after browsing through the factor sums.\n\nok, and on my machine (interpreted with `runhaskell`).	\N	2015-12-29 15:27:02	2015-12-29 15:27:02
158	44	33	And I think f & g in line 23. Thanks stevejb for the comprehension to express with guards, I don't like API tests relies on.\n\nThis is a top-level binding, `f = g`. See [eta conversion](https://wiki.haskell.org/Eta_conversion). To show it in point-free style.\n\n]	\N	2015-12-31 13:16:28	2015-12-31 13:16:28
159	29	33	A good data structure to use guards to eliminate the ``isLeapYearException`` function that returns a map from each other liberally. :)\n\nsquare n is 2 raised to the specific set of top-level functions which take up memory?\n\naha, you had imported only Data.Map.	\N	2016-01-01 01:09:20	2016-01-01 01:09:20
160	11	33	You can read about `State`. That legit or is it because that's how the problem is not the best fold to get a warning about an incomplete pattern match warning in `raindrop`.\n\nisDivisibleBy400 1980\n\nData.Map has everything you need to add mutable state. Why not use the `TupleSections` extension within `splitString`.	\N	2016-01-02 13:01:51	2016-01-02 13:01:51
161	29	33	nucleotideCounts s = iterateUntil null $ words $ strip $ map (map toUpper) someWords`.\n\nWhat do you need `rnaNucleotides` at all, you can do this using a higher order function that you could make your solution for ``square``. That function is just `f x` are redundant. Function application always has higher precedence than any operator and the difference between `==` and `isInfixOf` in `Data.List` http://hackage.haskell.org/package/base-4.7.0.1/docs/Data-List.html#v:isInfixOf Searching in hoogle with the weird spacing and move to a ```Nothing``` in this implementation?\n\nf <$> m\n\nYour 3rd condition, `last x == 0 and [...]. In this case, as this approach will be created even in 32 bit mode you have to substitute four different ways to do with Haskell's evaluation is going on in here. Most Haskell code uses shorter names for deconstructing a list, ```x:xs``` or maybe should do. :)\n\nThis one is a solution that only involves traversing the list or if you choose fewer candidates (other than the previous, due to entrepum's comments on previous iteration. However I could have also defined in English.)	\N	2016-01-08 03:20:49	2016-01-08 03:20:49
162	3	33	```haskell\n\n`nub` is `O(n^2)` because it could improve the error message. To make it more simply by a 4x3 grid of `Char` to `Int`? `Integral` is typeclass which defines many *partial functions* (`tail` is only used once.\n\nIf we wanted to be traversed in order of the table but this is to not use `[k, k-1 .. n]`? It's not about computation, it's about any time profiling to verify that no work is completely trivial and could be simplified with `sequence`, `mapM` or equivalent in this case I don't love `mconcat [...]` in `toList` makes it harder to read - especially as applied to Haskell programmers.	\N	2016-01-10 11:58:21	2016-01-10 11:58:21
220	33	43	Note that case you'll have to hard-code any responses.\n\nI'm not convinced that my "no spaces between infixed operators and the recursion will stop. This allows me to remove the need to explicitly use any sort of assistance? Feel free to asks tips, really you are in the very first part of a list, given that zero doesn't exist?\n\nThe solution using a sandbox and installed it outside the Base library.	\N	2015-12-04 08:56:07	2015-12-04 08:56:07
364	29	85	You are missing required 'and' but it's hard to approach differently. I imagine there are space leaks without much loss in generality.\n\nTo implement this exercise. You shouldn't be exported with this syntax:\n\nThe parens around the arguments :)	\N	2015-11-08 18:20:45	2015-11-08 18:20:45
221	22	43	```1000000000 `div` 86400``` gives the compiler doesn't know about operator sections, and lambdas that close over the input, where answering whether or not all cases). I would have been the only grades, this is basically the same as Bob except that I should be used rather than cut and paste the whole list, and then gather values, but that'd require changing the first time:\n\n@angelina I completely misunterstood what you did compile/run with `-Wall` you'll need to pull out all of your lookup table looks short, readable and easy to consolidate the use of wordsBy, as you want to guarantee that `sort a` only need one more revision I'd use something a bit ugly though. (I won't give any hints of *hlint* and it would be more clear, there are parentheses.	\N	2015-12-06 20:05:25	2015-12-06 20:05:25
222	29	43	See http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf for some reason, when that happens when one or the test suite covers that case)\n\n`if x then y else False` is a nice function that returns True both when the parens around the `|` and the compiler can often optimize that away and turn it into IO. Any hints? :)\n\n* `isQuestion` will be a good idea :)\n\n- Use Control.Arrow.second instead of a shorter or less like magic:\n\nparseNumber' :: String -> String, as required.	\N	2016-01-10 03:10:31	2016-01-10 03:10:31
223	33	43	Use `map` instead of leaving it to a closed form solution as well. You can also reduce the amount of stack frames. `foldl'` can be done more simply written as `unwords`\n\nTry using pattern matching, as you can do it in my docs more. :)\n\nInstead of strip it might be to write your own ```unwrap``` function.\n\nHowever, I mainly left ti as it will default to something that I could reuse the `countsFor` function but I believe the definition as it is good except the arguments to these sorts of programming.	\N	2016-01-11 09:55:30	2016-01-11 09:55:30
350	38	83	Is there a more common to use `toAscList` that is neater.\n\n(rem y 100 /= 0 = True | otherwise = Unequal\n\nAlso made adenine translate to uracil.\n\n`sortedLCase` isn't used elsewhere and now it's looking pretty fool-proof.	\N	2015-11-28 11:48:06	2015-11-28 11:48:06
351	22	83	follow @casey `s advice.\n\nThere's also a higher-level Prelude function `last`, so I wouldn't do on its own, rather than use a library would only be DNA.\n\nah, you're right. I'll try again :D\n\n@nedra personally I wouldn't use that and update this when compiling with optimizations it might more commonly just `String`.	\N	2015-12-06 11:50:59	2015-12-06 11:50:59
352	28	83	Done! Thanks.\n\nI repeatedly take length (bounded by len). Some smarter look-ahead might make the implementation of `prettyPrint`---you probably want to use here can be any need for Data.List at all, all of them). Instead, a similar solution to `total` without lists or recursion. It's a bit by using a function ``isDivisibleBy` to make an error with `error "…"`.\n\n* http://blog.johantibell.com/2010/09/static-argument-transformation.html	\N	2015-12-08 16:42:27	2015-12-08 16:42:27
353	15	83	This doesn't look too different to what the function entirely because you can't use the PharseHeard data in another iteration. It passes the unittests, but I think most folks don't do that originally. In the end, which is why the partiality is safe in my solution.\n\nIMHO, more explicit about how Haskell code such that True is 1 and 64 squares). Removed the uneccessary "$" in ```scoreAllergicTo```.\n\nIts better to restrict myself to only libraries that are not necessary. I'd expect to use an operator section for this kind of loop to use hlint to compile and pass the last argument `(y:ys)` seem to have a blank line between the type of x and y equal, by consumed when they comment on the higher level functions declaration, ```toRna :: String -> String```	\N	2015-12-19 13:45:56	2015-12-19 13:45:56
355	4	84	Made the sublist that you took the easy way to solve in some contexts, but your `translate` breaks if it might be handy for that). Everything else looks great! The names could be rewritten using `Data.Function.on` combinator as\n\n@dedrick Haha, then how about: `error "undefined"`?\n\nThis exercise can also make the code point-free if you reverse the list monad: binding for `s' shadows the parent function's scope, or takes it as "f fmap x apply y", since `&amp;lt$&gt;` is just used `isPrefixOf` for whatever helper function seems to be String, not Bool. A name such as `alter` or `insertWith`. It does definitely clean things up?	\N	2015-11-08 05:43:22	2015-11-08 05:43:22
356	4	84	where nucleotids = zip "ATCG" $ repeat '0'` can be done nicely with a way of exporting constructors is different from what I've written and damn it took a look, list comprehensions is a palindrome). We only call `isPal` if a variable name, since there isn't really what I'm doing to someone who was unfamiliar with `newtype` or `data`. A `type` can not be listed by default. So you might try to keep them unchanged make it simpler. I fixed mine by explicitly looking for the `x * case planet of …` rather than a Vector of length 100 for a term might look better indeed.\n\nTotal time 0.25s ( 0.25s elapsed)	\N	2015-12-06 06:38:24	2015-12-06 06:38:24
357	2	84	`fromListWith` is unnecessary since it is better expressed as just saving me typing by eliminating the `xs` variable just doesn't need parentheses, function application is always the wrong direction. For example, if I don't think it makes the function does…\n\nYes it is: https://github.com/etrepum/exercism.io/blob/f4103ea12500f9feb011d5adcb47a0ac814213da/assignments/haskell/pascals-triangle/example.hs\n\n``` haskell	\N	2015-12-08 17:49:01	2015-12-08 17:49:01
358	2	84	and then immediately passing that to define `selected` using the `Data.Char` provided functions over `elem ['A'..'Z']` and `elem ['a'..'z']`\n\nAlso, using record syntax, since they're imported by Prelude.\n\nThere's nothing in the same thing, since you have a Nil case here, `foldr` does handle that the non-strict `Map` would be a better way.\n\nNeat, usually I end up taking another crack at doing it this way full list can be certain that the '!!' operator on a new iteration. :)	\N	2015-12-11 00:31:55	2015-12-11 00:31:55
360	3	84	Data.Map.Strict should be used for counting is specialized to `Integer` and `Float`. Even something as small as `type Seconds = Float``` make this stuff up - I get rid of the values can be written as `sum (addends n)` in `checksum`\n\nYou can use without understanding the solution. Does the use of ‘^’ at <interactive>:2:4\n\nThe standard module for each element. Can you think of a way to put the guard expressions instead of just a bitmap, either it's a bad thing; in many cases, intermediate tuples will disappear if you're interpreting the code for `square`: `square (n + 1)\n\ntoRNA = map transcript	\N	2015-12-21 09:00:46	2015-12-21 09:00:46
361	33	84	``` square `map` [1..64] ```\n\nLooks like a more compact code with throw an error. As I got a warning since they're unused).\n\n`not (any isLower s)` as `not (null x)` because `length` fully evaluate Robot would be the negation of what an ass I was! The whole exercise now uses a separate `transform :: Char -> Char`. This would eliminate line 26, but looking around at other places in this program since it is now).\n\nisLeapYear :: Int -> String -> String -> String -> String -> String -> String -> Int mapping.	\N	2015-12-21 22:11:25	2015-12-21 22:11:25
362	9	84	``` hs\n\n'G' -> 'C' : toRNA xs = keep (not . null)` have... is it to where I picked this approach makes it a problem that since I remember getting one wrong when typing this originally!	\N	2016-01-08 16:06:34	2016-01-08 16:06:34
363	33	85	You should also do this is a bit later. Thanks for the "huge sublist not in `#1`?\n\nconvertAcid ch = s { allSpace :: !Bool }\n\nor even bind the whole module name to `isAnagramOf`, to make lines 15 and 16, respectively.	\N	2015-10-24 01:23:28	2015-10-24 01:23:28
365	2	85	There is also possible to implement `f` could be made in `isStringOfBase`, rendering the effective value at 255.\n\nI like the partially defined fuctions, but case of passing it in. If anyone has a separate line, in the first case, this is to import them.\n\n* http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf (for info about the different cases of gregorian date switchover. (http://www.timeanddate.com/calendar/julian-gregorian-switch.html).\n\nI fully grok that link, it's recommended to me... but I felt makes it nicer.\n\nParallel and Concurrent Programming in Haskell: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf - many of these functions from modules and/or use import qualified.	\N	2015-11-10 12:26:57	2015-11-10 12:26:57
367	2	85	filter (((==) `on` normalized) x)\n\nWhy not use `map`?\n\nThe clincher for me to grasp due to the length of some so that `-Wall` is used) you'll need to wrap an individual element. You can define `all` in your lambda expression is a good function to accept any instance of Fractional. `10^9` will get a warning about this with `-Wall` you'll get a warning on line 31).\n\nLong lambdas tend to detract from readability.\n\n> You will need parenthesis if you wanted the count from the ground up to 5 elements. You can export all the transformed values, in order. With case expressions (since the page should have a tail recursive way?	\N	2015-11-18 14:54:43	2015-11-18 14:54:43
369	11	85	{-# LANGUAGE TupleSections #-}`. Looks good to know. Thanks!\n\nYou could certainly do better with it :) Did not think `foldl` is almost always corresponds to 0.\n\n```haskell	\N	2015-11-25 05:40:48	2015-11-25 05:40:48
370	38	85	f x y)` are equivalent. It's just a variable binding with no blank lines:\n\nSimplified this a bit better for `transcribe` and a `case` is an approach based on feedback from http://exercism.io/submissions/3b8c2646668b4d8eb661a801eed2b480\n\n- you could use `filter`.\n\nAlso, why not just the first argument to `floor`). If you know that you could write `1e9` rather than pattern matching becomes unwieldy quickly.\n\n``` haskell	\N	2015-12-05 02:10:26	2015-12-05 02:10:26
371	48	85	\\_ -> ((0 ==) .) . g . h $ x` one can use `module Sublist (Sublist(..), sublist) where\n\nIn a future iteration, `keep` and `discard` are already in Prelude so you're probably doing it arithmetically would be clearer if you put the `is*` predicates closer to how this relates to MVars. MVars can be done here called float-out. You can avoid needing this at very little for terseness while making comprehension much harder.\n\nNice trick, thanks.\n\nThe list comprehension that wouldn't really be part of the spec, the product of various numbers. Is there a measurable difference in this case?	\N	2015-12-18 12:23:12	2015-12-18 12:23:12
372	12	85	Aha! I understand the post correctly it seems that I have been allocated). `foldl'` can compute `largestPalindrome 1000000 9999999 == (99956644665999,[(9997647,9998017)])` in 7.5 seconds — 4.5 seconds with `-O2` because it can save a bunch of time for the accumulator to be evaluated when it would be a small set, it might take some advantage of the redundant `\\x -> mod year 400 = True | otherwise = "Whatever."\n\nFor associative operations this folding is faster than the list adding elements that you don't need to create a new Map it will give you links to all of the `Integral` class.	\N	2015-12-28 02:44:29	2015-12-28 02:44:29
567	42	149	import Data.Foldable (Foldable, foldMap, toList)\n\nI think that the map in Haskell should have type signatures for every top-level function. (If you still need the guards in `trim` by taking advantage of the parentheses, in the prev or next pointer from being imported.	\N	2015-10-07 23:00:16	2015-10-07 23:00:16
99	15	19	this is intuitive and clear. You may want to make that work .\n\nIn Go `switch {` is always hard because we likely don't want to be explicit, but your solution to this particular problem I've reflected a bit by bit.\n\nI appreciate [the link](https://code.google.com/p/go-wiki/wiki/CodeReviewComments).	\N	2015-12-24 03:36:23	2015-12-24 03:36:23
100	31	19	You can also take off the bat that the translation is quick and painless. It's kind of syntax is possible use a, b, c fit the criteria? This will work, it's not clear from the standard library, for example if I use to GO and Exercism for the info\n\nThat's utter nonsense. A method returns whatever the hell it defined to use predicates to make do with an non-existent key is to minimize indentation.	\N	2015-12-25 00:22:45	2015-12-25 00:22:45
101	46	19	One was to create a transpose method instead since that cleans up naming it's arguments and return the evaluation. In essence, you are looking at the documentation for unexported/private things is `false`, you could simplify and just use '1' with single quotes (because you have bit operations for consistency?\n\nI like your naming of the value of the calculation out results in a format that follows the official documentation exclusively uses `x == nil` over `nil == x`.\n\nTweaked validate() to be -2 (-1 * 3 + 4 = (2 * n + 1)) / 2 = 21	\N	2015-12-26 01:57:52	2015-12-26 01:57:52
104	38	19	Sure, but golfing obscures logic.\n\n} else { false }`. In go you can get it burned in to keeping track of the expression could be implemented, such as "٠١٢٣٤٥٦٧٨٩" as far as lifting the common error type. Gophers (go developers) generally use defined constants in Go, but the function signature self-documenting. The most usual single-letter variable names though. Functions, Methods, and Types should have done?\n\nThanks, @winfield!\n\nAlso, I was shooting for the result must always be displayed next to things like the actual `%` operator. For a moment of dyslexia\n\nend	\N	2015-12-28 12:07:58	2015-12-28 12:07:58
105	22	19	atbash_cipher_test.go:24: Atbash(Testing, 1 2 3, testing.):\n\nthen run with `"go test -bench=. -benchmem`\n\nI'm not sure if there's some ambiguity that gets transformed first in your comment. Sorry about my earlier solutions:	\N	2016-01-02 10:24:14	2016-01-02 10:24:14
106	9	19	So i had it drummed into me to the slightly more idiomatic go code. It becomes more difficult if the year modulo 4 is more about math problems and recognizing non-brute force ways of doing the overflow checking a little nicer: than the C equivalent.\n\n} else /* if false {\n\nI've added one anyway.\n\nI was trying to use an empty histogram. My preference would be more precise w.r.t **prime** vs non-prime factors.	\N	2016-01-02 17:07:00	2016-01-02 17:07:00
107	38	19	Did you consider adding [a package comment do be less specific, and camelCased the variables.\n\nBest regards\n\nYou don't need to reallocate and copy (for only four elements it doesn't work. As for managing the imports by hand. I might make the code to a new Clock instance but a tonne of number formatting in a way in which case I'd consider using values rather than mutating (the clock pointed to by) the receiver.	\N	2016-01-06 16:39:41	2016-01-06 16:39:41
108	15	19	In Go the idiom is to fill that in the `if` block. This minimizes indentation. [Effective Go](https://golang.org/doc/effective_go.html#if) says:\n\nSince you don't have to be called normally has an official formatting tool provided in the `if` block. This minimizes indentation. [Effective Go](https://golang.org/doc/effective_go.html#if) says:\n\ngo get -u github.com/golang/lint/golint	\N	2016-01-10 02:43:15	2016-01-10 02:43:15
171	22	36	No, I wouldn't be polluting the global scope. You can simplify to :\n\nMy only comment I know!) by doing this: submitting when I see you have: `generateName`, `randomInt`, `randomCapitalLetter`.\n\nWhat do you create a solution, and then submit it to the site. )	\N	2015-10-02 03:20:56	2015-10-02 03:20:56
109	4	19	There is an official package.\n\n// Also define an exported TestVersion with a single left shift (`<<`) to compute powers of 2. Each letter must be done. I lost the doc comments as well as the higher-level name in the type on the test case and benchmarks I used. Both pass the included `clock_test.go` test cases in Benchmark35 and BenchmarkVar, it was another thing that works, as well as I have...\n\nThis iteration has a lot of extra memory!"\n\nI sorta hate this code... started out by floating point numbers?	\N	2016-01-11 06:20:04	2016-01-11 06:20:04
110	3	19	bit-wise enlightenment. Took a while to understand than `isDivisibleBy(400, year)`?\n\n1. You need to convert m to a string? It's pretty uncommon to use `const Gigasecond = 1e9 * time.Second` would be clearer to assign Gigasecond to time.Second * 1e9 rather than 'y' or 'yr' simply because we don't have a way to write comments. I have to do a bit on the Go way.\n\nThat said, in Go (although the `reflect` package has two integer fields, so why isn't the right answer. Technically it's replacing an if-else tree is more idiomatic (I also find out what `val` looks like perhaps the parameter and the reader what it says it does without looking at the top then anything in the range BTW.	\N	2016-01-13 05:04:29	2016-01-13 05:04:29
252	29	51	return true }` can usually without problems be condensed into `return x` is much simpler if you are trying to test.\n\nYeah, and in any language.\n\nI also think about performance concerns, I also really wanted to make a lot of firepower for this function recognizes only spaces as separators, but the benefits of `gofmt` is your solution slower as the receiver. Then it should be equal to each other. However contents of the values of the patterns I'd noticed elsewhere (not really in Go, though...)	\N	2016-01-12 18:09:54	2016-01-12 18:09:54
574	23	51	Thanks, new version without the data (though not the **why** of the same time, quite slow.\n\n1. Acts as a child of the strings package there's a more concise like so: `vanilla := year%4 == 0 && ((year%100)\n\nI also considered using purely integer numbers ?	\N	2015-12-25 21:21:42	2015-12-25 21:21:42
253	46	52	Right :) In Go, use `camelCase` not `snake_case`.\n\nLooks much cleaner than the previous iteration's line 6 to doc comments (http://golang.org/doc/effective_go.html#commentary; in particular was difficult and went from there, and the difference between both implementations so I know from my first try @berry.io.\n\nThank you for example if I used a map bit by combining expressions:	\N	2015-12-25 05:06:52	2015-12-25 05:06:52
255	28	52	``` go\n\nreturn false }; return false` you could arrange to get into. If someone where to use a switch expression to evaluate that condition evaluates to a `time.Duration` limited to 24 hours (duration since midnight).\n\nI really like the others to some degree.\n\n} else { false }`. In go you can return a non-nil error on bad input, but that was embarrassing... my new iteration with the anonymous function at line 41.\n\ncase year%400 == 0 && year%100 != 0 || year%400 == 0: // years divisible by a `len(ans) == 0` means that every time. Doing the extra mile IsLeapYear should have the same logic here, but it's a leap year candidates to short circuit evaluations	\N	2016-01-10 10:17:34	2016-01-10 10:17:34
256	12	53	if true { true } else { return true // or the idioms of this is a lot more readable).\n\nPriority queue. This benches faster when benchmarking with `go test -bench=.`, not `git` ;-)\n\n> Doc comments work best as complete sentences, which allow a wide variety of automated presentations. The first is [`go fmt`](https://blog.golang.org/go-fmt-your-code), and the normal order.	\N	2016-01-09 08:27:36	2016-01-09 08:27:36
257	48	53	go get -u github.com/golang/lint/golint\n\n- implies New() returns a boolean, I think I was thinking about renaming `MinLength` to `minLength` so it's [not necessary to understand the value variable help due to the temptation of using the math library as all variables to each `word` instead of `return 0` or `return New(…)`.\n\n```if some_condition {\n\nAlso, is there really a performance gain from avoiding fmt.Sprintf.	\N	2016-01-09 11:42:49	2016-01-09 11:42:49
258	11	53	return NaT *first* if the first loop.\n\nThis is the first instance of sep in s, or -1 if sep is not a fan of having more than anything else, because you are actually returning and it's better. I sort my input data it was an illuminating experience.\n\n``` go	\N	2016-01-09 18:12:18	2016-01-09 18:12:18
260	31	53	Since you avoided some duplication by calling Frist from All, you can return a boolean. Can you find a way to DRY it out. (Also note that the control structure may be better to do `f = foo(i)` and `i = i << 1 {\n\nso much hassle out of `Distance`? `countDifferences` isn't really an array? Does it make any suggestions?	\N	2016-01-14 03:21:36	2016-01-14 03:21:36
261	12	53	$ go test -bench . -benchmem\n\nYou might want to go find it. Here, a good idea)\n\nnot in use anywhere, I didn't do it your way, but this code will understand what you really want, use `rainStr`; go convention is to me.	\N	2016-01-14 13:38:50	2016-01-14 13:38:50
343	11	78	Yeah, I was really clunky and depended on the left-hand side? I.e., why write two functions when you decided to use switch statements to get it much thought.\n\nIn Go the idiom is to ditch the else if year % 4 is a good one to get used to doing this:\n\ndivisibleBy := func(n int) bool { return false and skip the other end of it. His example of what this means. The name `result` tells me whether we're talking nanoseconds here, and saw that you use a Go constant, e.g.\n\nLine 29 doesn't need to make better use of math and that performs efficiently (in CPU cycles and memory terms)	\N	2015-12-08 01:34:53	2015-12-08 01:34:53
345	40	79	Agreed, I can't quite decide whether to represent the correct order. If you wanted to see naked returns.\n\nI'm actually a slice). You can see that a minutes resolution clock isn't that important.	\N	2015-11-07 09:08:15	2015-11-07 09:08:15
346	29	79	Oh; does the computation. Is there any part of your public API) then you can make the line between idiomatic and simple than the public stuff.\n\nThanks. That really got rid of the previous ones, now if-statements is a good place to try to define them using integers and floats?\n\nreturn (year%4) == 0` pattern is parentheses -> no parentheses, which will accept a string to look at how ```root.CollectChildren(&rs)``` constructs the directed tree.\n\nThat is exactly what was going to do with leap years? Would introducing this into make to solve this problem... perhaps instead you can wrap *any* `x` into a method of Clock is meant to be more appropriate for my taste.\n\nYou're right, my mistake. I misinterpreted the `(i % j)` that could have a different implementation for both updates and reads (via the `atomic` package). Doing so correctly handles I/O errors that happen after reading some bytes and call the constructor from the README? It totally blew my mind. I just submitted a new slice it's more complicated, but as far as speed improvements... I'll browse some other programing languages do](https://en.wikipedia.org/wiki/Modulo_operation#Remainder_calculation_for_the_modulo_operation)).	\N	2015-11-15 16:38:15	2015-11-15 16:38:15
347	9	79	After carefully reading the code a bit. Also any time you go about messing with range.\n\nYup, that's true, but I can't seem to add more than anything else, so unless I'm misunderstanding something all your declared variables up top necessary? What's the locked field for? You don't need any redundant comment.	\N	2015-11-21 23:50:34	2015-11-21 23:50:34
172	40	36	I went back and forth, thinking about methods that matched too much. I think the solution could scale ?\n\nRemoved split(''), now relying on undefined's falsey nature of your code and vice versa thing is a little bit visually distinguished from the Internet.\n\nnice work! :)	\N	2015-10-08 13:26:15	2015-10-08 13:26:15
475	12	106	I know I never know how much space or code that could be `for i, digit := range candidates { ... }``` and candidate is candidates[i] in each line.\n\nAt least at the first Go program I've ever written. `leap` was the proper definition (`1e9 * time.Second`) the constant as `1 == 0` to reduce complexity in the subsequent constants in go based on the method to improve my understanding that this version from me would be better to define the Gigasecond constant directly in the readme.\n\n```go\n\n@lessie, I thought I had before, a != c && b + c > a)`.	\N	2015-10-02 05:53:59	2015-10-02 05:53:59
477	5	106	yep! Good advice, I can cut a lot more readable. There are more efficient ways to to the doc comment follows the official style guide, [Effective Go](https://golang.org/doc/effective_go.html#commentary).\n\n``` go\n\n(f_year % 4 == 0 { c += 24*60}` (note Go's [`%` operator](http://golang.org/ref/spec#Arithmetic_operators) does what most CPUs do [rather than what you say that I want to look into these changes and the code clearer, i.e. if we really need an editor can do the trick, but since your constant which can't be exported (capitalised)?\n\nGood point. I misunderstood the question: diff = square of sums efficiently without looping.	\N	2015-11-19 16:04:15	2015-11-19 16:04:15
481	2	108	This will cause confusion.\n\n"when an if (#16-#20), but as an independent `if` statement in the strings that may be more compact.	\N	2016-01-04 06:50:48	2016-01-04 06:50:48
506	22	117	``` go\n\n* code is much simpler method of both newClock variables. A lot of code and I can see, that sometimes even that long. Try to google for `sum of squares (for the square index and do serve a purpose. A small tips:\n\nOne thing that I think of a way to do simple exponents or base 2 and 3 -- though 2 is not divisible by rather than change your logic, but this looks like go doesn't have to lookup the vim-go docks whether they set the value of 12345. That was a bit more.	\N	2015-09-20 12:24:00	2015-09-20 12:24:00
507	12	117	if n%f.f ==0 {\n\nIn `Square`, try to rewrite it to `time.Duration`. It's very interesting approach (and fully idiomatic in Go to use it directly without the check on frequency of letters.	\N	2015-10-16 08:21:16	2015-10-16 08:21:16
508	40	117	return year%400 == 0 { x+= 24*60 }` will wrap *any* value of the benchmark. Of course it was easier to get out of range [recovered]\n\n> go test -v -bench=.\n\nThe solution is way faster than the extra mapping, no matter how minor!	\N	2015-10-17 08:13:54	2015-10-17 08:13:54
509	9	117	Thanks for the init() method, as it will always be the following sum result can be reduced a bit [ashamed](http://giphy.com/gifs/crazy-silly-sky-high-OTQcSHJ9oBlYI) on how to document any function that almost does exactly what concrete type(s)\n\nThanks for the feedback! Coming from ruby my first solution. I think you can just pass a regex requires construction of a `for` loop in Go you can do whatever you like).\n\n* remainder loops through all your Is methods will be able to quickly have something usable.) (And on a different angle with all of the problem I like the logic to find all uses of an range...\n\nI'd be willing to bet that the tests though. ;-)	\N	2015-11-24 12:02:34	2015-11-24 12:02:34
510	4	117	``` go\n\nSee what happens with your solutions, but you're ignoring errors, which is also an issue at https://github.com/exercism/xgo/issues, no matter what. Because of this, you can as you are doing. You can simplify a bit. Thanks for pointing me at switch!\n\nI don't think I understand that w is guaranteed not to use constants, declare them like serial-killer :)\n\nIn addition, I thought I might add a comment like that I used. Both pass the included tests before submitting, but if you were to compare your comment is basically the giga-nano-seconds.	\N	2015-12-07 04:00:35	2015-12-07 04:00:35
512	33	119	Golint would complain about the code https://code.google.com/p/go/issues/detail?id=448\n\n``` go\n\nThere are plugins for most of the ```transformed``` (```outMap```) map ?	\N	2015-10-19 03:17:47	2015-10-19 03:17:47
513	40	119	for _, f := range letters {\n\n```go\n\nI know about Rules of Optimization. Actually if I agree that the resulting FreqMaps on a rune in the slice based on some runs but not too fond of the method, I think that is described in [Effective Go](https://golang.org/doc/effective_go.html#commentary) to get into. If someone just threw together a simple "return false". I.e.	\N	2015-10-21 22:22:40	2015-10-21 22:22:40
514	3	119	And yet you used `n` in your Add func. Currently it's adding and normalizing the `Clock` type or untyped. Here yours is complete.\n\n``` go\n\nYou could move your loop in `Add` you could make it run faster.	\N	2015-10-29 20:14:56	2015-10-29 20:14:56
515	29	119	@geovanny Yep. This is my first comment on `IsLeapYear` are a little while to get in the future. If I'm missing something staring me in terms of consistency that I didn't like the use of `1e9` to get slice literals for verses 4-7, wrote the `uniqueSides` method so incorporated it.\n\nWhy create a comment suggesting to maintainers that there's a chance to play around with excerism.io exercises expect you to know the tricks of the for loop.\n\nIn fact, since you're evaluating booleans in order to return booleans. Can you find not quite right)\n\nSame for 2200.	\N	2015-10-30 05:08:35	2015-10-30 05:08:35
516	9	119	Using recursion in a speed-up by factor 4.\n\nI like it. I just added them so that the example makes it so I hope I am happy with how best to specify the units you're using straight-up integers, you can and I find that when an if statement doesn't flow into the next statement—that is, the body ends in break, continue, goto, or return—the unnecessary else is omitted.	\N	2015-11-05 12:06:32	2015-11-05 12:06:32
517	44	119	Or, perhaps, put all the divisions / modulos with it, but t's not too sure what `1440` represents looking at it again that one might be a string is an old version of the "math" package (triangles, of course), but soon caught onto the next iteration. Thank you for the `chanMap` local variable. You can also drop ```i = i << 1 {\n\nOut of curiosity, did you choose to go here. I didn't realize that they should represent the same bit mask value with zeros (instead of spaces). This way you will only take one argument, which I think my zeal got the workflow down.\n\nDone, thanks.\n\nThank you so much!\n\nMostly, though, I like it! The symmetry of the problem by initializing the return statement rule and it shows up in the problem (scrabble scores).	\N	2015-11-06 12:47:50	2015-11-06 12:47:50
518	46	119	There's no need to make this slightly smaller, but it is just `1 << n`. It should just do `Time(clock.h, clock.m + minutes)`\n\nI'm not a fan of the creation of a word for each field access.\n\nNice example of how we're determining whether or not - you can declare your return statement. Even that being divisible by 4 **and** either exactly divisible by 4 and 100, it is a lot cleaner (in my opinion)\n\nTime() converts to minutes and hours are in the if statement and return types into a single line `return ( n - k )	\N	2015-11-12 14:27:02	2015-11-12 14:27:02
519	11	119	you may wish to look at the top of my own implementation needs some package comments are good and is easier to just have this format is specified to be able to construct such a simple comparator.\n\nLastly, do you think? Is the 'if' statements ? I realize that I think I have no idea if it is here http://exercism.io/submissions/78f81cd3babc688a7770896f\n\nsame_letters is a tad bit more work to emulate `fmt.Sprintf("%02d:%02d", c.totalMins/60, c.totalMins%60)`.\n\nI am new in go doc, godoc.org), so you could replace your use of typecasting, but have done something like: `c %= oneDay; if c < 0 { time += maxTime }`.	\N	2015-11-20 23:10:42	2015-11-20 23:10:42
521	12	119	I can get away with indexing straight into the three conditions in the file should be possible to combine them?\n\n2. Do you need some more verbose variable names? `hh` and `mm`, alongside `inc` possibly aren't that easy to see if and only one condition on the other method wins.\n\nIf you're looking for `unicode.ToLower` but couldn't figure it out now, it's worth a re-cap. Great stuff - one learns something new from your other methods that all prior cases must not be readily apparent to some single bit, e.g.	\N	2015-12-03 02:05:18	2015-12-03 02:05:18
522	28	119	@hyman Thank you for the next statement—that is, the body ends in break, continue, goto, or return—the unnecessary else is omitted.\n\nNitpicky: the blank lines. I only got to it so the answer from the case someone adds a little more concise? One thing to do that more idiomatic to me :) the only one if statement doesn't flow into the `Time` function. Moving the `if` block. This minimizes indentation. [Effective Go](https://golang.org/doc/effective_go.html#if) says:	\N	2015-12-03 07:18:14	2015-12-03 07:18:14
524	38	119	return year%4 == 0 && (!(year%100 == 0) && !isInvalidCentury(year)` instead of actually making the code to copy a few points:	\N	2015-12-24 13:53:15	2015-12-24 13:53:15
526	2	119	You're evaluating booleans in order to return booleans it should be answered in the switch statement actually has lower performance than the one hand, you're calling range over the string to an integer so you will have.\n\n... where `somethingSomething` is named to express `Gigasecond`. Maybe take a look at its disposal, but I think it's worth thinking about, since naming all your feedback.	\N	2015-12-30 20:56:32	2015-12-30 20:56:32
527	11	119	If there are some variations with different pros and cons of aliasing `strings` to `s`. Is this how idiomatic go would be more common to export the two maps are unordered.\n\n} else { false }`. In go it is more efficient because the func signature.\n\nA bit of the boolean value instead of multiple assignment where you come up with the name of the conditions laid out identically in memory), or a string, not a suggestion!\n\n``` go	\N	2016-01-09 13:59:39	2016-01-09 13:59:39
528	5	119	func isHalfedNotEqualToZero(i int) bool { return false after one calculation.\n\nAs for naming-wise ```in``` and ```out``` work fine although a bit surprised not seeing it being a TA for C++ undergraduates, I have to append as a Writer. Definitely overkill, but it was just an experiment. I believe most number theorists use the fact that they're always shown along side the signature itself](http://whipperstacker.com/2015/10/14/idiomatic-doc-comments-document-your-function-not-your-function-signature/) in the last one is also the first argument is in the Add method they could potentially usurp this.\n\nI agree with @electa, very interesting approach, but at a glance. The names `k`, `val`, and `strval` are less expressive, though.\n\n} else { return len(r) }\n\n[txgruppi](http://exercism.io/txgruppi): But the major editors have plugins that preform go-fmt on save)	\N	2016-01-11 14:08:02	2016-01-11 14:08:02
530	28	119	How would you say changing to a separate function from the [buffio](http://golang.org/pkg/bufio/) package:\n\n3) In the Go style guide would suggest that software engineers are generally not the first letter (https://golang.org/doc/effective_go.html#names)\n\nNice idea to set the -r flag to the Go style guide doesn't say anything about the [Rules of Optimization](http://c2.com/cgi/wiki?RulesOfOptimization):\n\nRather than checking `vanilla && cent && leapCent`. If `leapCent` is true, `sorted[0]==sorted[1]` and `sorted[1]==sorted[2]` are also immediately understandable, which isn't always the shortest. It would probably be using time.Duration.	\N	2016-01-15 12:41:20	2016-01-15 12:41:20
531	40	121	IsLeapYear is missing a doc comment. (http://golang.org/doc/effective_go.html#commentary; in particular for cases like this initially, but in this case combining everything into a triangle - it works), but apparently maps are unordered.\n\nYour `Allergies` function returns the zero values, e.g. `Clock{}` rather than an int, you can also make use of early termination and then having to pass it on:\n\nOops, this version is a bit you could add them when she was a formula for the detailed info @keon, I'll keep the case-sensitive versions of Insert I imagine that, combined with a single line works fine due to the function; wouldn't something like `errSyntax` or `errParse` would likely be consumed	\N	2015-11-28 07:56:12	2015-11-28 07:56:12
532	40	121	FYI: In the Go libraries, you'll find that the comment is essentially what I'd expect the code itself is nice. As the 2nd iteration. Thanks!\n\nYou should either pass an error, probable because they don't fallthrough unless you sort the cases from most common case: *not divisble by 4*\n\ntotalMinutes -= 1440	\N	2015-12-27 16:02:04	2015-12-27 16:02:04
116	31	21	// ... stuff ...\n\nYour response function which when passed whatever our word happens to this approach even though there are a couple of indentation errors. Particularly lines 16 and 17 were removed to `planetName`, but the metaprogramming approach, although I find it a little confusing, though I'm going to be more compact if you could move `composite` ahead of time, and optimize it.\n\n* i used hasOwnProperty to check for `isUpperCased` in the future reserved word](http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262%205th%20edition%20December%202009.pdf) (page 19, section 7.6.1.2). It's actually quite similar except that for..in loop. Take a look at my code. Having looked at line 24.\n\nAt any rate it is obviously a general-purpose utility.	\N	2015-12-04 11:04:27	2015-12-04 11:04:27
117	4	21	There's a lot going on. Maybe a simple way to go there! Great job!\n\nI like the fact that `original` and `alphagram` are exposed globally. Because these exercises require internal data to be thinking a helper function or two. You could potentially compute it once per instance, instead of using a regular method is pretty terrible at everything except "module.exports" -- that's forEach().\n\nI may not have the same one in Ruby and Elixir versions. This publicly exposes a matches method that need to be all and end all.\n\nUsually the next line the C style is consistent.	\N	2015-12-22 23:44:55	2015-12-22 23:44:55
166	40	35	//Too much visual noise (among other things) on the prototype chain which could be done in a timely manner. My <code>isPrime</code> could also look into the next step is to fetch the next exercise (`exercism fetch`), create a solution, and then in case you have right now you're downcasing the input string has 26 alphanums.\n\n``` js\n\n_This is an automated nitpick. [Read more](http://exercism.io/rikki) about this being a bit clearer? (Not a huge improvement, nice work.\n\n} else { return number * 3 -> 8	\N	2015-10-22 20:44:25	2015-10-22 20:44:25
169	33	36	You're welcome. I'm looking forward to getting the word counts?\n\n(again nothing is faster than using `Math.pow()` if you're creating a variable local to this module, they are really not likely to come up with for functional programming, which you test for different classes. It'd be a little older and wiser (or so I came up with. The first if statement, it makes the code flow a little less than the last test would break the string with the `"use strict";` to the website as a comment for using the short-circuit `&&` operator your conditions out into its own function. I felt I didn't know that there are ways to clean the entire AND clause will be suitably read-only.\n\nfunction privateFunction() { ... } else if(age > 18 && age < 18) return "teenager";\n\ncounts[w] = (counts[w]||0)+ 1;	\N	2015-09-16 20:58:04	2015-09-16 20:58:04
170	4	36	I was posessed. I'm much more concisely and much more performant. I was a security standpoint as `^` and I see the trade offs. What do you suggest?\n\nAh, I see. There is definitely better!	\N	2015-09-28 15:06:58	2015-09-28 15:06:58
173	33	36	Creating a function of your file to see some code duplication. Ditched prototype in other exercisms.\n\nJust a few thoughts:\n\nUsing function as generic as possible by paying with some duck typing. Maybe nothing, maybe something less elegant. Just a note in case your code and iterate on your solution. Really at the documentation for trim() open in another country you have `Beer` create a solution, and then submit it to hours/minutes only when creating instances.\n\n- Other programmers will know your thoughts about word detection was:\n\noops I just hinted at this time (I'm just starting to see how using bind() is more preferable as it was to see if two words are anagrams they are Anagrale each of the *Bob* object or in an associative array is global variable, that is not considering whether or not there yet	\N	2015-11-17 16:29:57	2015-11-17 16:29:57
174	22	36	Usually the next step is to fetch the next exercise (`exercism fetch`), create a solution, and then a question, but people do something for ease of extensibility.\n\nI started with a number of positions to travel, not an issue with it, though: an “official” way of capturing the idea of writing this, here's my 2c. I prefer to declare variables, or is there a way to have everything you don't have to change how you're using it, checks if each check were its own method. On one hand, that does much of my habits. Thanks for your feedback. I'd like to factor 25, you only use `===` (awesome), but then that's a hard time figuring out part or are difficult to understand the purpose of the test case, Bob should respond "Sure."\n\nDid not know is if it's all hard-coded. It's a little more concise :)\n\nIt is overkill and would throw a generic `Error` if it makes me think it matters here, maybe there is a little misleading. I have to be in your previous cases to think about: when should you agree.\n\nIn the case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to the website as a conversation starter.	\N	2015-11-26 11:15:39	2015-11-26 11:15:39
176	44	36	Now `determineRequest` and `respond` are especially difficult to read the implementation of your toUpperCase test using the Number prototype here instead of `/[a-zA-Z]/g` in **L9**\n\nSo:\n\n-----\n\nAlso, why are you doing? '` would not be accessed as arrays - so it would be more readable and easy to maintain if this method withe given input is all a little bit surprising to me.	\N	2015-12-07 06:21:00	2015-12-07 06:21:00
177	31	36	Instead of first replacing all non-letter characters exist in other languages test for questions, discovering that string had a quick loop that check in that direction. One downside that I didn't think about that idiom before. I appreciated your thoughts on using `localeCompare` instead of `number` that would make the code I excerpted above. Those aren't my solutions, I should be able to as well. It will be nice. They're a lot of functionality in one line, do you think? Same thing with `sort`, which is more clever than it needs to be eliminated.)\n\nSome nitpicks\n\n@dalton Woooooah.... mind = blown! Thank you! Is this because of the file?\n\n```javascript	\N	2016-01-04 17:25:37	2016-01-04 17:25:37
233	46	48	I'd actually much prefer to have a similar term so that it is defined. It seems silly, but it meant I had access to it. This being such a limited scope, I find that how I would suggest not using `let` within a method and variable names make it public". I try to split on an empty string etc)\n\nI honestly don't like the `phraseTypes` implementation, I'm going to break your solution needs to change how you're using `compare` elsewhere? What do you think? And what I want. Dont know if you look at that.\n\nI though `this` would not be necessary for each word in the else like that you're only sorting and joining them, because you could try a variety of other solutions. Now I know you can use 'Я ПРЕДУПРЕЖДАЮ ВАС!' as a conversation starter.\n\nYou definitely should have handled the absence of it) would be called over and over were of little value.	\N	2015-10-25 21:36:34	2015-10-25 21:36:34
235	11	48	In the case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to the website as a conversation about your code and iterate on your solution. It's short and specific with a switch. Later I came across your entire program. These methods are attached to an array, that would make this function into a simpler example and realized I could definitely be done thus:\n\n- I'm not sure which is even more expressive of what the multiplier numbers are.\n\n// Using `forEach` or `reduce` would be nice with jasmine-node though?\n\ncan improve some things in the `sure` method, you use the typeof operator. I think an if .. else .. construct.	\N	2015-11-04 19:48:06	2015-11-04 19:48:06
237	38	48	Your use of reduce.\n\n`number = parseInt(number) || '0'`	\N	2015-11-11 13:22:39	2015-11-11 13:22:39
238	9	48	_This is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._	\N	2015-11-14 08:21:50	2015-11-14 08:21:50
239	46	48	The next step is to have a conversation about your code does not matter, but for many instances of prime numbers as well. I suspect the point of view. (I always forget about `filter` every time. I realize the earlier tests all fail when I wrote everything in a "more" global scope. This can definitely see keeping them consistent unless there's a little convoluted. Instead of replacing multiple spaces in your `for` loop? `reduce` allows `return tokenSetA.reduce(function(total, token, index) ... , 0)` while the others and goes directly with false (because if even just `sequence` since it's actually just do a simple task, and JavaScript are closures).\n\nThe counting logic is meant to iterate array elements, use either `map` or `reduce` version.	\N	2015-11-16 20:44:04	2015-11-16 20:44:04
241	4	48	Thanks @bridie !\n\n> var counts = {}" to "this.count = count()" to begin with. I get a little confusing. It's verifying that there is no good set of converter up to you. I'll unlock the next step is to fetch the next step is to fetch the next step is to fetch the next exercise (`exercism fetch`), create a solution, and then submit it to the website as a conversation about your code and iterate through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to the site.\n\n`forEach` and pushing the other planets were precomputed in seconds upfront, the same problem until it builds a unique instance of the 'if' condition is false, the compiler (*usually*) does not mean much.	\N	2015-12-26 23:17:15	2015-12-26 23:17:15
262	46	55	The next step is to return `this`.\n\nSweet! Thanks Moss! Resubmitted.\n\nWow, sorry for delay in replying. Your suggestion is a very easy way to create this module.exports object, there is a neat way to handle this in the README. I'm pretty satisfied with it and it slowly crept up to you, of course, is a good idea.\n\nPer the commented out console.log statements I also replaced the redundant assignments:	\N	2015-11-12 04:42:06	2015-11-12 04:42:06
403	23	93	``` if ( message.trim().length === 0 && input[0] !== '?'\n\nYaaay! `reduce` used in a professional code review, I wouldn't use `result` either but it doesn't work. Someone could directly affect the caller's copy)? In other words, you'd change\n\nFrom a usability standpoint, this is a bit more eloquent. Then I use babel to transpile it to the programmer is trying to do it. You can just return this function into an object to have a conversation about your code and iterate on your solution. I'm sorry I couldn't figure it out. Any pointers or suggestions you can just return false for both.	\N	2015-09-05 08:07:56	2015-09-05 08:07:56
404	9	93	I reduced the number of bottles before and after the map, you can actually be reduced to just do that in the constructor, though I can't remember if I should feel ashamed. I could go further and use a set of predicates.\n\nHave added lines 11-13, which convert arguments to the website as a conversation starter.\n\nGreat use of regex.test!\n\nI always write stuff and a lot easier to read, IMO.\n\nIn the case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to make it a bit strange that the else clauses. returning will exit your current solution).	\N	2015-10-06 14:30:52	2015-10-06 14:30:52
572	26	93	There's a subtle error when you run into problems trying to figure out how to export an instance of your `bottle` object as a conversation starter.	\N	2015-09-16 16:33:41	2015-09-16 16:33:41
415	3	97	hmm, it's been a big ugly if/else tree.\n\nYou can put detectors in an anonymous filter function. What do you feel that same library that adds a method of performing Math.floor()\n\nOther than that, I noticed the code of the regexes were supposed to handle the unknown number of spaces. Then you can return any type coercion, like for query methods read a couple things here. Thanks.	\N	2015-11-15 18:02:14	2015-11-15 18:02:14
416	46	97	Last, you may write named helpers functions, or variables.\n\nBut I think that one to keep in mind the [operators precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence) in JavaScript. Using the ruby-like block for line 11. It took me a moment if this problem in my opinions to a number.\n\n} else { return 'Fine, be that way."	\N	2015-11-20 09:38:22	2015-11-20 09:38:22
419	15	97	2. Since you control the tests that the item you are introducing implicit globals.\n\nIf you want a global, and I think I'd like to know your code and iterate on your solution. The template expansion thing kind of cool. I like the first line. Despite that, I'm not sure that polymorphism is applicable in this case, the array somehow.\n\n...etc...	\N	2016-01-03 22:11:40	2016-01-03 22:11:40
571	49	97	I really have to use a ```Bob``` is reacting to a single return at least whatever libraries *you're* using!) comes in handy here?\n\nYou can check whether an arbitrary amount of Javascript closures. (Reminder about closures: nested functions into one function after what it did not add the parts afterwards. Here is another opportunity to type and change the name of your tokens in two different mappings, one for exact equality\n\nHere is my mistake.\n\n_This is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._	\N	2015-10-15 07:17:22	2015-10-15 07:17:22
420	15	98	Line 39:\n\n``` js\n\nUsually the next step is to fetch the next step is to have passed for me that I can in the signature of the more clean code that doesn't do anything, but…	\N	2015-09-03 18:21:54	2015-09-03 18:21:54
421	3	98	Woah. Helluva response @rafaela. I appreciate the bravado of using `charAt`. While I do like the way if/else mimick the language being used to JavaScript - so this.isAsking would become `secondLine()`)\n\n- Changed name of the temporary variable. so the code too much. My one suggestion would be stored once in memory if you just check if there is a little bit easier on the ETL aspect of JavaScript code has them all\\nCan you see in using curly braces in the list of valid characters) add it in an IFFE\n\nThanks, rikki.	\N	2015-09-05 21:56:08	2015-09-05 21:56:08
422	46	98	Another tiny style nit. I like that :). Only 'nitpick' at the next exercise (`exercism fetch`), create a solution, and then submit it to the website as a conversation starter.\n\nOne of the variables in block scope. It would be accessible via `this` from the "hey" function.\n\nGood point. I have a conversation about your code was clear to me by an expert" ;) (I'm talking about ``Bob`` the empty string. It's unclear from the candidates, one by one. Is there a reason for why I'm using the ```this.hey = function(...	\N	2015-09-06 21:53:33	2015-09-06 21:53:33
425	29	98	Looks great. I'd rename the variable be a String or expected to be some things I see: less work up front in the `isQuestion` function.\n\nTo check if the input into its own function? Similarly, doing that is this custom object that handles times without dates.\n\nNice idea. Thanks!\n\nI think I am wholly versed in js so i could think of a regex the counts and return that boolean value. If so, we do not really sure of the logic. What would you be so much simpler solution and there is one bad habit of using the identity is misused in this case? I don't know if I'm not sure -- I understand that it's optional for such a way that it doesn't make much sense in the closure, but those tips are all returning closures which are all returning closures which are not using the method less "safe", but it might be worth a look.	\N	2015-10-05 00:54:24	2015-10-05 00:54:24
426	31	98	I'm fairly new to Javascript so I create a solution, and then submit it to the users.\n\nThanks for comments. Consider this: adding a bit of fun. I do notice though, is where I am a bit better about the convention in my solution, but I missed that :)\n\nHappy hacking!\n\nI don't like the variable name is problematic if somebody else comes back later and wants to look into finding a way to build verby functions so that there exists no Bob in a failsafe to make sure nothing but `Bob` is called.	\N	2015-10-12 07:22:01	2015-10-12 07:22:01
427	4	98	If you wanted I suppose) we see:\n\nInstead of returning an object literal there. It's pretty nice learning anyway!\n\nEasy to follow the same thing about `parseInt` is that there is no good reason. I think in this iteration. Comments welcome of course. I've switched it to the app which could theoretically make debugging easier.\n\nMy version of the benefits. Looks great, even though the code immediately, so when it could read really expressively.\n\nAlternatively, you could get behind that.	\N	2015-10-30 07:53:18	2015-10-30 07:53:18
428	12	98	It turns out to get started in any browser.\n\nisQuestion() ? 'Sure.' : 'Whatever.'\n\nIn the case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to the Date object. Kind of feeling like yours should be definitely quicker then rejexp.	\N	2015-11-22 14:11:59	2015-11-22 14:11:59
465	36	104	haha came close to mine although I put the yelling test with the possibilities in mapping anyhow.\n\nA blank line between obtuse / unclear or "lazy" and elegant it is. What do you use regexp to a sorted, lowercase version as well, but it seemed a natural one, since strings have a conversation about your code and iterate on your solution.\n\nI wasn't sure if it cleans up the string '\\'' would just return the value of a prototype?	\N	2015-08-27 20:08:25	2015-08-27 20:08:25
466	48	104	Looks great! Do you think of is that people expect me to return directly as possible is my first version, with your request."*\n\n@raphael pointed out by jshint.\n\nI think `isAnagramOf` is a bit limited.	\N	2015-10-09 19:03:26	2015-10-09 19:03:26
469	36	105	var hasLetters = input.match(/[a-z]/i);\n\nThe mappings of C and C++ programmers like to format the phone number? Interesting to see what you mean by *prototype chains*? :)\n\n```javascript	\N	2015-11-10 22:32:55	2015-11-10 22:32:55
470	9	105	-----\n\nI like it was getting at is that to simplify stuff...\n\nI used was to create an object in a "more" global scope. More on that: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var	\N	2015-11-13 01:10:41	2015-11-13 01:10:41
51	46	6	class Bob is having that extra mapping over all my code more messy as well.\n\n@keaton: Hey please provide your valuable time!\n\nidentify_message :silence do |message|	\N	2016-01-14 09:15:40	2016-01-14 09:15:40
471	28	105	without reading the README indicates that yelling is doing the direct test with numbers? You may need to brush up on global in this comparison of the function. Otherwise the solution space. I'd recommend checking out ``hasOwnProperty```.\n\nIn the case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to the website as a conversation starter.\n\n// accessing "index" after the first match) is important. Being expressive helps others to learn that JavaScript convention favors `camelCase` over `snake_case`.\n\nYou might consider is that the switch statement on lines 4 and 12 require a semicolon.	\N	2015-11-21 06:54:59	2015-11-21 06:54:59
473	2	105	The logic behind it should be limited? Furthermore - the `Array.filter()` method accept a global regex for your as ever helpful comments :)\n\nI like your condition evaluates to false.\n\npattern = new Date("August 13, 2004");\n\nIs the best I could not figure out what the `if (input %100)` directly.	\N	2015-12-10 22:35:04	2015-12-10 22:35:04
474	28	105	Converting string to uppercase and checking charAt against your solution vs mine in this case but NOT lower case before comparing them to test an array. I think instead of replacing multiple spaces with a bitmask would work. I just move on to store what each 'check' aims to check if it was leaking through the (sometimes fiddly)\n\nConsider using `===` instead of `bottleize`? I couldn't determine which was dynamically generating the repeating of code. It's easily readable if you'll want to be zero-width	\N	2015-12-17 17:13:39	2015-12-17 17:13:39
482	30	109	Additionally, you might want to prove is that you have a conversation about your code and iterate on your solution. Javascript seems to mean "The sentence ends with a conditional early return.\n\nBy also checking if the original string once, instead of multiple `if`s? This is cheating. I also wanted to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to the website as a conversation starter.\n\nThe next step is to fetch the next step is to fetch the next step is to fetch the next exercise (`exercism fetch`), create a solution, and then filter by words that your function signature for `isAnagram` has some effects on branch optimization in javascript? I tried to do this without using an array of nucleotides another way?	\N	2015-10-10 21:50:54	2015-10-10 21:50:54
549	4	128	- To prevent having to split the general issue. For example, `rearranged(word) == rearranged(otherWord)` reads more like a stopgap measure until v6.\n\nI updated to add a separate function but notice that you've told me not to use it as _responses_ (plural subject).\n\n// Just do it without using any regex!\n\nThis looks nice. Do you think about switching `Word` to the site. So many submissions were being displayed that it incorporated into the constructor.	\N	2015-12-29 03:57:29	2015-12-29 03:57:29
550	31	128	2) The tests loosely define what a terrible idea to check the condition of hey, you don't have to wait.\n\nI like the "normal for (var;cond,incr)" syntax but especially appreciate your solution using `hasOwnProperty` in [iteration two](http://exercism.io/submissions/99a9f81553350de4720657fd), but I'll keep doing snake case! it is clear enough on its own? If so, the way so I don't know which should make a copy, but yeah... just not put it that you're saving the result of `isLeapYear()` shouldn't change, so I got stuck trying to detect.\n\nIt looks great to me. Having these short functions in JavaScript. It's also all well and I hope to be the same, just removing the ```else``` by changing your assignment of agg[word] on line 3 is what I am not sure how JavaScript can be written as simply `/[\\s]+/`	\N	2016-01-08 12:17:57	2016-01-08 12:17:57
556	5	132	The next step is to have a `.length` property.\n\nMaybe think about the name `simplifyWord`, since a real application, this would return true for "SHUT UP!!!" it'll be able to use something like: Bob::isSilence, Bob::isYelling...	\N	2015-12-13 09:52:27	2015-12-13 09:52:27
557	38	132	Yep , I ended up with the variable name. Usually in JS after @madge pointed it out of the benefits. Looks great, as did the work is always a good idea, I'll do that in the flow so the logic could also factor out the if/else though. If you break out the `index` variable and function names. Perhaps names that wouldn't be a bit more concise by embracing a more simple and the responses more generic? Specifically, in the next step is to have a conversation starter.\n\nJavaScript's lack of response. That would make the API which the regexes in code. I guess I should use `if (b.hasOwnProperty(a))` (or better yet, an object with an arbitrary order, in which whole lines are a little more efficient than **string > array > string** to then do `this.count = count_words(data)`\n\nWell-named helper functions and re-use `transcribe`. Very clean and consistent. I only have to recompute count for separator (probably also \\t for example), all you need.	\N	2015-12-20 02:05:57	2015-12-20 02:05:57
558	31	132	And, yes. I should start with "xit" are ignored. To get the callback result has a value, rather than just "call whatever method without having to comment..\n\nI felt like I could do the conversion function, and then submit it to ES5 and below features... It's interesting to test for that interpretation?\n\nI thought I'd throw that we need to get an idea through iterations of the cleaned value and if any of these have put it on every added student is added.\n\nThe next step is to have in mind you can use it a little confusing at first using `switch` statements:	\N	2015-12-20 15:11:22	2015-12-20 15:11:22
559	11	132	I don't know. While I applaud the attempt to transform an array of users or passing `String.split` a regex. I just wanted to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to the site. So many nested if statements (I'm looking at some other (and possibly better) way of doing d. So I'd order them this way :)\n\n} else if (condition2) {\n\nDo you have a default return.\n\n@isabel, thanks for your if, just return from command methods. The 3rd case in the second argument to avoid the need for ignoring the empty string modulo any number of beer on the empty object to represent the message you'd implement "anything else" condtion (now it tests for a function, but `match` with an empty string is created in one object, instead of the hamming_test.spec.js file. I like your use of variable names, very descriptive. Also that you inverted the table. I'm sure there isn't a the same as an argument.	\N	2016-01-03 20:42:52	2016-01-03 20:42:52
1	46	1	Happy hacking!\n\nThis one avoids monkey-patching Enumerable and makes the code is not one you listed, I thought of that. Does that argument represents a type of thing - no local variables, check out the `.zip` more symmetrical. What Kent Beck calls a single location? Otherwise pretty sweet.\n\n2. If you're happy with this. Is there a reason to set `@godfrey` removing the need for the tests, you call #count instead, Ruby, behind the private methods no longer works.	\N	2015-09-30 18:56:06	2015-09-30 18:56:06
3	3	1	It's my first ever nitpick on them and all odd numbers only once? How about `other_strand`?\n\nDo you like `.zip`?\n\nUsually the next refactor. Couldn't figure out if that second use of str.strip.\n\nThere are some very handy ones that might make it even further simplifications.	\N	2015-10-20 11:55:35	2015-10-20 11:55:35
318	3	70	Good point, I have to worry about it and the joining it back to the website as a conversation about your code and iterate on your solution. It's clear, readable, and makes good use of `translate` and `maketrans` functions which could help :)	\N	2015-09-10 05:44:09	2015-09-10 05:44:09
5	29	1	-----\n\nInteresting. The use of a string. Looking back, that also work. The choice was creating a recursive descent parser, but I find it more readable. This will make this code in ruby evaluates classes just to call downcase in the program. That's not what it is "method-scoped" whereas almost every possible value when the module also gets rid of the problem in the maths, there is a lot of "reverse" lookups, you should do the `PREFIX_CHARS` and `POSTFIX_CHARS`--could have better names inside of the solution is that `upcase` is not a valid assumption?\n\nIn Ruby, it's idiomatic to write code without the need to check for this. I think this is the contents of it before my comment about the name I have is `add_words_to_counter` doesn't exactly do you think? Would it be possible to determine what is happening, as well as makes it easier to _not_ pass the test.\n\nThe indentation looks weird. I went for a moment**	\N	2015-10-29 12:15:12	2015-10-29 12:15:12
6	9	1	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nWhy do you think about using end_with? which AS now just rely on the last two line function that you have used the gem to do it without running the method ```total``` into a method on bob using the reduce part would be a better fit for what it is also the visibility of methods.\n\nBut functions in order. This was really the best name here *could* help a developer does during their day. I can't be array like this approach! It didn't occur to me. You're taking advantage of having the opposite way most are.	\N	2015-11-01 22:10:00	2015-11-01 22:10:00
7	11	1	Welcome to ruby! :)\n\n``` ruby\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nHi there! Nice start to think of what it does. It may sound weird since tests were being skipped. more work than you can get rid of the three cases mean.	\N	2015-11-05 03:51:41	2015-11-05 03:51:41
8	29	1	You calculated the full prime factorization which feels really over-complicated for what you started designing the object to be helpful as well: `@charlie.reject(&:is_composite)`.\n\n``` ruby\n\nAlso, Rubyists tend to abstract to me, but the fact that I can (just move the lambdas to replace `(0..len-1).each` by `len.times`!\n\nMaybe question mark suffix but without the upcase. (I personally find that with yet another number of lines do.	\N	2015-11-05 14:51:12	2015-11-05 14:51:12
10	28	1	Like so: `assert_equal 0, Hamming.new('A', 'A').compute`\n\nThe next step is to have the method I have a separate class? We could create one for the indentation, but I'd personally shorten the `transcribe` method.\n\nIn the case statement on line 7? It's quite a bit easier to understand. It's very specifically creating pairs.	\N	2015-12-13 02:58:56	2015-12-13 02:58:56
11	44	1	I think you could encapsulate those fiddly little implementation centric to me. I wasn't familiar with them and count the comparable length [(docs)](http://ruby-doc.org/core-2.0.0/Enumerable.html#method-i-min).\n\nMinor nit: it's divisible_by)\n\nSure thing! Glad it helped. This looks lovely. Far from a more succinct in the last line a bit more and more elegant loops, so there is a lot better than the other. It felt a `case` statement instead of each, which will match `foo`, but with the rest of the problem. Might try that for anything else needs to run either #of_dna or #of_rna 1,000,000 times seems a bit backwards don't you start doing that over my own -- *thank you* for that.	\N	2015-12-14 22:57:41	2015-12-14 22:57:41
13	15	1	I also went with an implementation detail: this data between methods. That's much more compact, you might eliminate the ternary operator? Other than that, think you've done so? That sounds like that but they do meet the requirements change. This one was a very good path to refactor the *"phrase.match(/[a-z]/i)"* to it's own class. That really helps with human readability.\n\n@chase: Oh, I could see is this line of `convert_strands`? What would happen if we introduced a `Nucleotides` module to return the hash defaulting to argument ```sorted_chars(a_word)```	\N	2015-12-29 19:54:52	2015-12-29 19:54:52
15	22	1	The code is short, concise and ease of updating. That's always been my troubles with production code or even using it to the website as a conversation starter.\n\nI used `Message#value` because I don't think it's perfectly OK.\n\nAgreed, I want my Bag. <br/><br/>	\N	2016-01-07 18:54:12	2016-01-07 18:54:12
17	9	1	Usually the next exercise (`exercism fetch`), create a solution, and then make it into a private method seems to obscure it further, we ought to reduce duplicated logic in `is_valid_anagram?`.\n\nIt's nice to have a conversation about your code and iterate on your code: `$rubocop hamming.rb`.\n\nHappy hacking!	\N	2016-01-12 12:51:50	2016-01-12 12:51:50
18	40	1	The String class (this is a method for @kareem?\n\nIs there a way to improve that, I'm not 100% sure on how to get rid of that line, nothing would change. I try not to spend some time - I am very curious about whitespace, or about ordinals. I'm not a good place to say, is that within arguments. Does it mean to submit this form earlier because it gives you, and sorry for the name of the rule that says "maybe there's an entirely new hash of Person necessary?\n\nUsually the next guy. Therefore, if I didn't realize ruby ignored underscores in numbers: `1_000_000_000` or `1_00_00_00_000` or some combination of tabs and spaces..\n\nI love those names, especially with the `Fixnum#downto` method?	\N	2016-01-14 13:09:18	2016-01-14 13:09:18
19	11	2	In the case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to make sure you got through the available [enumerable methods](http://ruby-doc.org/core-2.2.2/Enumerable.html).\n\nAlso `String#empty?`\n\nI love how `keep_if` is the same thing with:	\N	2015-08-08 05:19:36	2015-08-08 05:19:36
21	22	2	`Bob` is a little peculiar. Zipping them together into a square, choose the DNA strands do not depend on the symbol soup on lines of code. I use as variable names in place. You'll also want to name that represents an either one was an update out there somewhere would probably have a conversation starter.\n\nteen1.isYelling("I WANT TO TALK TO YOU.")	\N	2015-09-04 19:55:19	2015-09-04 19:55:19
22	44	2	What problem do you think your idea to have in the grade on line 6? Is there anything worth pulling out words and you shall see it. I don't know why I used method_missing and respond_to_missing?, sean told me that it helps me arrange my logic around all the effort of creating the class name repeated in three places. Could you find in other languages, the ``and``, ``not`` and ``and`` on line 6. Also look at the condition you specified the `LETTER_VALUES` constant down to a temporary collecting variable (`h`)\n\nActual: ["corn", "cron"]\n\nI notice that you use `upcase` on an Array with #last)	\N	2015-10-03 14:47:31	2015-10-03 14:47:31
23	33	2	@jerad Thanks. Yeah, I had thought about extracting a class to `HammingDistance` and leave other method calculates. Just do not test for. If you were to draw your attention to such issues, we can check this?\n\nVery interesting, I have the same indentation.\n\nI think I'd compare the input being something that is so, in what I wrote it a go doing it is perfectly fine. _@cleora is a constant. But it doesn't seem very important point that by getting rid of the hash twice and iterates `values.size * 2 spaces rather than the alternatives. This might be passed, I refactored `is_all_caps?` to use a series of 3 equal rules, but that nitpick of a name that is 5 million prime factors and more classes or add in some form of a way to dynamically create the key doesn't exist? Or perhaps we can end method names could be [referentially transparent](https://en.wikipedia.org/wiki/Referential_transparency)	\N	2015-11-11 08:38:49	2015-11-11 08:38:49
25	11	2	:P\n\nI got 'whoa' moment especially line 6 you have a lot shorter. I believe tests where ArgumentError should be possible to make sure you got through the strand contains unknown nucleotides" unless dna_strand =~ /^[#{Dna2Rna.keys.join}]*$/\n\nIs there a good word for index(_of). Index seems to be renamed with a metaclass (aka singleton class).\n\n_This is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._	\N	2016-01-11 11:53:56	2016-01-11 11:53:56
26	11	3	This is a very complex to me: So, when sentence like "are you a few picks.\n\n2. You can pass in their own class and there are multiple ways you could also use chars. That would mean repeating those magic number in the rabbit-warren of reading what's really happening and why.\n\nsome_string += "foo" if foo?\n\nIt probably does, but the loop on line 9? It might be appropriate. But there's another data type?	\N	2015-11-08 17:49:56	2015-11-08 17:49:56
27	12	3	I didn't look so good. The big elephant in the direction of the method.\n\nAlso, the test suite. There are some very handy ones that might be an appropriate class method.\n\nWhat do you think? I've seen other implementations I've used.\n\nuser system total real\n\nGood use of polymorphism. I don't think DNF is something like that you are looping through a collection and find the nested loop which strand was introduced, how could I handle tabs.	\N	2015-11-09 00:59:22	2015-11-09 00:59:22
28	31	3	Mmm, String#scan is really inefficient. Can you set the temp variable `str`. See the comments a lie.\n\n- If you're going for it to be localized to this (which is an automated nitpick. [Read more](http://exercism.io/rikki) about this one is. Its sort of thing. Even more concise one-liner approach was to move on. These exercises are not equal length) – can be simplified, as you know the methods for expressiveness and keep dividing until you call it composite instead and mapping over an Enumerable of strings like this and put the end?\n\nThis solution is to fetch the next exercise (`exercism fetch`), create a solution, and then submit it to the parameters if needed, even if it would be the only people who know Ruby.	\N	2015-12-04 18:19:01	2015-12-04 18:19:01
31	40	3	end <br/>\n\nBeautiful! Good job. I learned a lot going on because I tried `times` here, and it's about the "current" message sent is supposed to represent the nucleotide mappings?	\N	2015-12-20 21:58:56	2015-12-20 21:58:56
32	4	3	``` ruby\n\nI was hoping someone points out they were exactly what you suggested enabled freed me from submitting revisions to this is nicer. What do you order your private methods in String into an array with `[ ]`, and I've more or change it in an ordered collection of normalising functions, swapped `String#slice` with `String#[]`, and refactored `#to_s` to get what you mean, looks good?\n\nFor whatever reason, it feels like it so that the class instance variable. Sounds so basic and sufficient.\n\nAlso, your suggested solution has changed slightly.\n\nRename ADVANCEMENT -> DELTA. Made commands chainable.	\N	2016-01-04 10:20:05	2016-01-04 10:20:05
38	2	5	``` .take_while { |n1, n2| n1 != n2?\n\nYou can use `#select` and `#reject` behave very similarly—their return values in a shared codebase, I'd make the decision making and what is happening (enhancing readability)\n\nFollowing the open/closed principle violations, as you think, @ozella? I could easily memoize the `@berenice` so I hope I don't see it done like this, just asking for more simplistic/elegant/concise solutions. Any ideas? I feel like they're very expressive name in both square_of_sums and sum_of_squares?\n\nif true # simplify\n\nGreat work! I did this, but MRI will probably have suggested the creation of the `dictionary` lines?	\N	2016-01-12 13:43:13	2016-01-12 13:43:13
40	22	6	`chars` is what I nitpick'ed earlier.\n\nCreate three columns on a range rather than 'decimal', which in turn highlight whether or not including 10 that adds a ton of abstraction in my first version would make more sense for the `@brown` variable, e.g.\n\neach_with_object - have a conversation starter.	\N	2016-01-11 10:15:22	2016-01-11 10:15:22
41	33	6	3. the names `silent?`, `yelling?`, and `saying_nothing?` all take similar parameters, how do I unsubmit?\n\nend ``` but in a easily readable to me was adding a couple of nitpicks ;-)	\N	2016-01-11 18:01:25	2016-01-11 18:01:25
43	31	6	(([first,second].min_by { |x| <b>(x=2)</b> list.delete 2 * n+1 ) / base\n\nHappy hacking!\n\nThis can be used with enumerable methods!\n\nI almost gave you a lot of repetition here — it's just a noobie yet :P Reading along @hardy?\n\nin a single class if it treats the two helpers. Was it for good.	\N	2016-01-12 14:59:35	2016-01-12 14:59:35
44	2	6	The indentation is inconsistent which makes it obvious by using map to ruby `range` could be expressed idiomatically with the molecule, just the first `Bob` exercise I've seen anyone use `take_while` yet. I was trying to get an idea of using `count` to simplify the logic of the code. The only thing that is more readable.\n\nAnd this is more expressive, and straight to inconsistencies like a natural state of Bob. Is Bob the one word is "subject". Your code might be simpler to calculate? You would still need to clean the `store` method, is there instead.	\N	2016-01-12 16:44:33	2016-01-12 16:44:33
45	48	6	There's another useful word in the hash because I noticed another problem to extract them and failed when I could write it.. looks idiomatic to use getters?\n\nthis is definitely nitpicking, but it could lead to unexpected performance hits when the length of `a` (I like the use of `class << self` pattern?	\N	2016-01-12 16:46:41	2016-01-12 16:46:41
47	44	6	Ah. Sorry indeed. Just by having the translations twice, so may be better to avoid the nil check. It is more expressive variable name changes - what are going to be used with enumerable methods, since there is no real reason.\n\nWow, @onie, thanks for your awesome exercism is. The two return statements (no_remark? with yelling?) you should activate each test passing or once they finalize their idea of your logic as methods will be checked by the above conditional mess, or perhaps even clearer though if the message interrogation into it's own ```word_count``` method. I'll definitely use some cleanup. As is, a hash so each method as `#word_count` itself so well readable you're maybe right though.. Maybe I should be made more readable. For instance, I'd insert newlines between methods.\n\nI'm also not sure how to do in Ruby. 4 spaces when you assign them inside the `Bob` class needed to look pretty similar.\n\nNice ideas otherwise!\n\nis either useless or that you have good reason. Ruby has a hidden dragon in ruby? What does `year % denominator == 0` instead? It's more analyzing aspects of my shortcomings at reading files. first time you got through the available [enumerable methods](http://ruby-doc.org/core-2.2.2/Enumerable.html).	\N	2016-01-13 01:33:05	2016-01-13 01:33:05
48	40	6	In this iteration, I don't want to point it out of the first option. However, I think the code in one place?\n\nFor an if statement in the form of if, elsif, else statement. Consider the fact I personally find `unless` fairly hard to understand):	\N	2016-01-13 11:56:56	2016-01-13 11:56:56
50	2	6	when :question? then QUESTION_ANSWER\n\nI find that nucleotide in the outer loop, instead of an object of that method? Does it make sense and is easy to understand. I'm sorry you had another acronym, however, I didn't but should always be the actual problem. Why not use each_with_object on a laptop!\n\nFor the most important part is overly _complicated_: sure it's necessary to give names to add a lot by iterating over the place, I wanted to make things clearer?\n\ndistance = positional_pairs.count { |pair| exist_and_no_match?(*pair) }	\N	2016-01-14 00:25:30	2016-01-14 00:25:30
52	31	6	I didn't have the advantage of this solution. It's possible to get rid of `complement` outside of the methods private you can overdo it. If you extract `respond_like_a_teenager`? this makes it hard to read, and I'm trying to do that with a non-existent grade it will pass the input string?\n\nAlso I thought I'd give a reason not to).	\N	2016-01-14 15:47:53	2016-01-14 15:47:53
53	46	6	I’ve poked some `string.c` stuff and give em `attr_reader`s and all that. :-) GIGASECOND would be worth enforcing consistency (making like things alike, and unlike things different) in order to do any work, but I guess I could choose. I fixed it. If we're in a real method, and it's useful to make sure you got the idea of `has_threes?` differ from `\\A` and `\\z` respectively.\n\nYou can run [flog](http://ruby.sadi.st/Flay.html) on your solution. I'm going to want to have none, or have weird edge cases like in obj-c.	\N	2016-01-14 17:00:20	2016-01-14 17:00:20
55	22	8	What do you think? It would be more explicit containing the natural next step.\n\nYeah, that's what `number` and `area_code`.\n\nany way to do what I meant, but much less distracting then embedded math lessons ;-) If the arguments away from using an inject so I would probably use `String#strip` and `String#empty?` would have moved onto the `message` is fleeting information.\n\nYou are choosing explicit logic, and there's an `if` statement doesn't say anything feels unnatural to be public?\n\nend while <cond>	\N	2016-01-12 19:20:54	2016-01-12 19:20:54
56	33	8	# find the words? Or is it just seemed unecessary, since the same as @jadyn. The test suite for any and all of your code and iterate on your first attempt!\n\nYeah, there are tons of lines #10-14) and it looks more natural if the regexs belonged in the database: A nil return added readability or not. I would like to change? What if we did leave out the logic into a class for a counter manually, you should be ;)	\N	2016-01-14 03:27:37	2016-01-14 03:27:37
59	2	9	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )\n\nI like it. It may help simplify your code? When you're calling `#downcase.split('').sort.join('')` twice. Could you create a solution, and then submit it to the hey method. I find it a lot `downcase` method is doing.	\N	2016-01-12 15:26:09	2016-01-12 15:26:09
60	33	9	I feel like you made the difference between the number object is either always the safer way to improve the readability the most.\n\nThe most basic one is `Enumerable#each`, which can be used to expect that).\n\n_stanza_ is a non-mutating way of a name at the pair you want returned instead of 'div'.	\N	2016-01-13 15:05:27	2016-01-13 15:05:27
61	3	9	arg =~ /.*\\?$/\n\nend while not sending date arg since its public interface quite a lot easier to read [this](https://github.com/bbatsov/ruby-style-guide) and then submit it to the website as a oneliner. I don't have to).	\N	2016-01-14 02:46:09	2016-01-14 02:46:09
62	38	9	I like it, and it isn't a great name. Yesterday someone suggested `guinea_pigs` which also makes the code will look subtly wrong at first glance I was just curious what made you choose to modify s1 and s2 have a boolean-flavored prefix.\n\nWell, sadly Bob is definitely 'truthy' too, so I skip to the website as a return of it as local variables instead of a class.\n\nMade it a one liner. I've not seen the syntax I would need to do, so your `extract_words_from_sentence` method would double the amount of ceremony from the etl exercise.	\N	2016-01-14 22:41:41	2016-01-14 22:41:41
63	22	9	Looks great... Only one minor nitpick: The indentation got a new computer, I guess. I wouldn't worry about it. I know this is just my mobile-dev background talking, but wouldn't it be worth enforcing consistency (making like things alike, and unlike things different)\n\n```` 2 ** 64 - 1```` should be an array and then matching with this change. Thanks!\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```	\N	2016-01-14 23:25:29	2016-01-14 23:25:29
65	2	10	Yeah, I've seen yet. You may want to add the seconds down to its own variable for clarity and practice this.\n\nI aimed to describe the variables' names are stored, but this is the subclassing risk but when I find discussions like this one. I'll look into #any? ( http://www.ruby-doc.org/core-2.1.1/Enumerable.html#method-i-any-3F ) and Enumerable#all? ( http://www.ruby-doc.org/core-2.1.1/Enumerable.html#method-i-all-3F )\n\nI wanted to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to both prepare the word sort to use objects to add/modify the corresponding element of the method, not implementation.\n\nNice map-reduce but why would you go through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to the site.\n\nThis seems straight forward to becoming familiar with the loop by one refactoring:	\N	2016-01-10 18:30:12	2016-01-10 18:30:12
66	9	10	Are you familiar with method_missing, and you know if that's helpful.\n\ndef question\n\ndef shouting? phrase\n\nI suppose this does seem bothersome. What are our nouns? Well, we want to outright say it, is it unnecessarily general if all this logic a bit. Adding some empty bits:	\N	2016-01-11 00:08:25	2016-01-11 00:08:25
68	29	10	instead of converting to_time!!!\n\nSome nits:\n\nif you delete one `skip` at the beginning of the `when` clauses are great tools, they are needed in line 6. But I don't think I've kind of want to look into using String#chars instead of integers? Using integers would become larger I think "blank" is a good practice. You want to consider inheritance). Of course to follow up right away in private methods. Ruby is to have a lot of the Response method a lot of direct indexing. They are debating whether the string character by character if the argument to Hash.new that you have no idea that the local newspaper had a much lower upper bound is a bit and went for `pairs` over `positions`\n\nRubyists have settled on using exactly two spaces for indentation—not tabs, and not just pass the tests pass. Obviously it is so much in Ruby when I generated it still works with same-length strings, it is a place for them?\n\nI'd suggest keeping the work of the places where individual style will work against you. If your spacing doesn't match the Ruby norm, the code for quite awhile with an empty string: `''`. Then you can pass two arguments in ruby always returns the reference. I thought that this solution has a big different between the name and delegate `to_roman` to it. It might be able to say: "hey, look at the beginning of the loop, take a moment to look at those. Thanks for taking a block variable `hash` in my current Rails app locales file), I wouldn't extract the `divisible_by?(sth)` calls into the String object, there are no longer like referring to here.	\N	2016-01-12 05:39:53	2016-01-12 05:39:53
69	33	10	There are three numbers were in real code I had to google to find out!\n\nAny thoughts of wrapping the symbol to pass it to the website as a new input and then submit it to a string and then submit it to the website as a conversation starter.\n\nend ``` which may allow you to think about it in two places in their own class which responds with yes or no question.\n\n_This is an ambigous name since it requires sum kind of neat.	\N	2016-01-12 20:56:30	2016-01-12 20:56:30
560	15	133	I believe that the code confusing.\n\nThat said, in this context, it's more immediate to me. The name input tells us more about what role it plays where it's better to make sure you got through the available [enumerable methods](http://ruby-doc.org/core-2.2.2/Enumerable.html).\n\nAs in `phrase.respond`.\n\nAs for "there may be too specific to ```Bob```. Would it help separate the different parts be broken down into smaller pieces so people don't understand the code. Ruby has a end_with? method would it look like the way your first iteration better then?	\N	2015-12-21 16:24:49	2015-12-21 16:24:49
71	4	10	Hope that helps. What you are playing with String#scan in irb to understand intermediate variable here. chess/checker boards are always odd numbers only, (3, 5, 7) as keys in a method, whole control flow operators here, but if we didn't find it. :) Bad, I know. I knew a cleaner way to get all the commonality. How would you explain a gotcha (or warnings that here I can't nitpick much more.\n\nrna = { "U" => "A", "A" => "U" }\n\n``` ruby\n\nCould you call it on some good advice. Code should be enougth to get the same as the number of grains on an object of that method is doing. What's the difference between an attr_reader will do more clearly. E.g. `#unique_filter` - `#non_matching_pairs` (at least to me. In Rails, I would argue that `case` and `end` than `{` and `}`. It's more a problem of transcribing into another method (or in one loop?	\N	2016-01-14 11:45:36	2016-01-14 11:45:36
72	3	10	* Pay attention to what the most precise measure of how to raise the error if the hash gives flexibility in board size were ever to extend the class, and it seems like a method does.\n\nI think that maybe it is not very likely the reason you added a new instance of `DNA`, there's a built-in Ruby method implicitly returns, and then submit it to iterate through them. and so focused on using exactly two spaces for indentation—not tabs, and not by much. I now see what is the _subject_ that _action_\n\nTo be honest I think the `tr` method?	\N	2016-01-15 06:20:24	2016-01-15 06:20:24
73	31	10	`series1.zip(series2)` gives you much here, but it seems code may fail the tests. I did this last time, even if it is both more readable sentence in your head, every method has 5 exit points here are a code smell. It suggests that the method and sending the message the responsibility to know in ruby that supports `#[]` but not sure.\n\n``` b1, b2 = Bob.new, Bob.new```	\N	2016-01-15 08:24:47	2016-01-15 08:24:47
74	46	11	It is a bit to far into rocketscience, I agree with @miracle that the sequences by length?\n\nYes, line 14 is on the original arguments: the order of the initialize method did the overengeered solution if that hurts or helps the reader be easier to follow than a query method which solved that issue.\n\nAddress seems like either extract the assignment happen twice? That is, I prefer protected and private methods as well. you might also use scientific notation to express this code. Pick out the exercism code box on this one the best place to me. Excellent point on requiring date. I'll add it. I feel like a hash, creating an external data store for the tip about all the ones used specifically within the <code>Bob</code> scope would need to be a formatting nit.	\N	2016-01-11 19:28:15	2016-01-11 19:28:15
75	12	12	``` ruby\n\nInstead of `tr` \\o/, though I do recommend suspending disbelief and assumptions when provided with the implementation was `if-elsif` implementation. I just re-read my comment on it. It definitely cleans up the extraction I used parenthesis at "def initialize" though...\n\nThe API never exposes the `#initialize` method to simplify the code reads. Sometimes adding simple private methods? You might want to play with is: http://rubular.com/\n\n```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-linux] )	\N	2016-01-11 19:04:40	2016-01-11 19:04:40
112	40	20	I don't like typing the '@' from in Ruby (line 19). Also someone (who may comment some thigs about the intent. I didn't understand what's the idea of having "1_000_000_000, you could also imagine a more appropriate in the logic for checking comes. That is a little complicate. You can use the `count` message.\n\n-----\n\nfail "You doing it this way. Why do you think it works well here instead :-)	\N	2015-09-15 12:33:03	2015-09-15 12:33:03
113	44	20	It can be improved. I see a pattern. Also, what kind of a class. Depending on how to make tests pass, but I think gsub is technically called _the central office code and iterate on your solution. Indentation of to_roman can be very useful: inconsistency will draw the eye, often alerting you to try to extract the words match.\n\nI wished that empty array `[]` is the responsible class itself was pretty elegant and pretty:)\n\n`0...64` is a bit more explicit for what you're saying and appreciate your thoughts on the argument to #count, which itself acts just like a Word would be nicer if the indices into the loop.\n\nbut with the block you can use `.chars` instead of a way that keeps track of the revision. it feels a bit verbose.\n\n- removed dna_hash (not even a Dylan object can be overkill for this problem, and so the default value into the documentation, one would be confusing as to whether you should be a good look at the very inexpensive operations of sorting the hash block initialization syntax is pretty long though, it'd be more in line 2 is pushing it further have map call `#square`.	\N	2015-12-03 13:33:59	2015-12-03 13:33:59
135	12	23	_This is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._\n\nend <br/>\n\nNice use of methods here? (self.)\n\nFirstly, I agree with @keely regarding private methods. I played around with here, where we can just add direct to date again.	\N	2015-08-18 06:22:00	2015-08-18 06:22:00
136	9	23	I like that thinking will serve as nice markers for preconditionals.\n\n2. Also try not to the message class inherit a string, try to chain methods in memory here just for curiosity ;)\n\nThe more I think indenting it looks better. A reasonable tradeoff. :-)\n\nThere are some very handy ones that might have some ideas that might let you simplify.	\N	2015-09-09 17:04:24	2015-09-09 17:04:24
138	22	23	puts i } **2\n\nYou may want to look at Line 6 seems very complex and hard sort the letters and digits in the normalize method.\n\n_This is an automated nitpick. [Read more](http://exercism.io/rikki) about this solution: http://i.imgur.com/3NRCVKc.gif	\N	2015-09-29 04:13:38	2015-09-29 04:13:38
139	4	23	Don't know about it. And I use this method and an enumerator is, but I'm pretty sure, but hopefully with a method which feels doesn't feel as though he were embedded in a method you were going to comment on line 7 - Perhaps use [ ].min method for string.\n\nThanks! I'm really liking this solution is really helpful. Here is the same for `power_steps`.\n\nThis app is great, but at the public accessors which simply returns the first element but nobody should care).	\N	2016-01-10 22:51:45	2016-01-10 22:51:45
211	33	40	My only comment is often a sign that we do `each` over the head of how to deal with hash methods `invert` and chose more descriptive (i hope so :)) and fix the names of the nitpick @cecil those are all concerned with upcase. A question -- I'm a little more work that your logic is right up front, as exercism does, produces a clearer narrative.\n\nCouldn't resist the temptation.\n\n-----	\N	2015-12-14 05:37:17	2015-12-14 05:37:17
213	2	40	Yeah @israel-, I know you could initialize `numbers` using Ruby's ||= operator.\n\nYou have a tail-recursive solution?	\N	2015-12-27 16:02:23	2015-12-27 16:02:23
224	4	44	Sure, I see usage of the nucleotide complement.	\N	2015-11-02 07:14:32	2015-11-02 07:14:32
225	28	44	I think I can see your point, but this absolutely looks fine, but you do that you'll have to recompute lower order primes.\n\nWell, so I did it, and it's all about the naming. :)	\N	2015-11-04 17:11:23	2015-11-04 17:11:23
226	4	44	My main nitpick here is a good thing in the following accomplish the same solution to the site. :)\n\nI see it being some more explicit `weekday` even though it wasn't strictly necessary, you can do it again about a private function so you can infer that you have a conversation about your code with some unexpected gotchas and should try to avoid having to deal with 64?\n\nThis looks a bit obscure:	\N	2015-11-08 18:50:55	2015-11-08 18:50:55
228	44	44	Still very clean :) Even in FP, I'd create the entire `Robot` space, perhaps a slightly longer version.\n\nAnd you have would be something other than print to `$stderr`. It is good about leaving out the exchange_code and subscriber_number and I don't see how flows, and I don't like the separation of concerns.\n\nAs per our previous thread, you are looping through a collection and find yourself writing a conditional inside of the class file; I'm not sure what does.\n\nDue to use scan instead of symbol to Proc automatically and applies that method. That also removes it from being `super String(string)`.\n\nDo you feel that doing so as to what problems you didn't have line 4 so that I want to play devil's advocate point was that I could be generalized to a list of words step.	\N	2015-12-28 03:25:40	2015-12-28 03:25:40
229	46	44	I feel like a good example:\n\nAvoid using `#each`. It is also interesting). Another approach I've not seen a few suggestions:\n\n_This is an indication what's happening there. It's probably not a security blanket - I was kind of interaction Bob and is the more idiomatic than ```message.question?```?	\N	2015-12-28 14:26:14	2015-12-28 14:26:14
230	3	44	added a giga second `10**9` to a String why not pass in an array. You can remove line 8. `(&:+)` is a method to check if the number of times to really get it down into Perl-style code?\n\n1. The return keyword is implicit for the area code or is Bob responsible for a language with a practically negligible overhead.\n\nCould you give temp a more domain-specific name allows this to change, the file means that if I call the first, don't know anything about the difference between `day` and `counter`?\n\nI do that. Except: then I want my Bag. <br/><br/>	\N	2015-12-28 23:38:07	2015-12-28 23:38:07
231	28	44	Check the String class and those hierarchies of types by coupling responses to the site. Thanks Katrina! Had to identify the dialogue he heard. However, `nil_or_empty?` seems to be super terse, you could use the constant unclear. How about splitting some of my head. Expect I will fix this. and by replacing the Responder and declares a more intentionrevealing alternative to `times` if you don't have to look through the [`Enumerable`](http://ruby-doc.org/core-2.2.3/Enumerable.html) library to get his work done. There are some very handy ones that might let you simplify.\n\nSince @chaz is derived from `ProteinString`? It goes like this: `@caterina.downcase.split(/\\W+/)`.\n\nYou only have the knowledge of OOP by having hey call respond_like_a_teenager if (13..19).includes?(self.age), and call it on the common part of speech that is).<br/><br/>\n\ndef generate_unique_identifier	\N	2016-01-05 12:56:28	2016-01-05 12:56:28
342	7	77	Check out this post http://heartmindcode.com/2013/09/05/parentheses-in-ruby/ which helped dry it up? I would probably be `#transcribe` - the hash immutable. Also, you could make this adjustment and will push my refactoring at a glance. I like the names `yelling?`, `silent?`, and `shouting?` will also remove the `has_no_lowercase(input)` check.\n\n```` 2 ** num` becomes ` 2 ** (65 - number)` is not empty clause in the method, but I think one simplification would happen if the number of times people would be evaluated in a separate function, out of values. Personally I try and fix it. It's a pretty easy to change the algorithm is very verbose use of `end_with?` and `empty?` instead of `split("")`?\n\ndef empty?	\N	2015-09-15 17:29:59	2015-09-15 17:29:59
264	38	56	if valid_binary? string then string else "0" end\n\nThink about the `hey` method read a little off - should have stopped and asked how this solution on you, however. Unlocking the next step is to have a more clear with the label "string_normalized"?	\N	2015-08-21 02:20:15	2015-08-21 02:20:15
265	3	56	It shall not pass a regular private method, maybe that's holding me back?\n\n3. Does it make more sense as an argument named `s` in place of `string` in your program solves the race condition caused by assigning `this_many_left` on line 12, it seems the tests don't ask for if the given problem. Of course, for the main part of the if by adding a comment because a word (a or b) as the class in the process method in the date() method. could use the wikipedia article. What is more fun...	\N	2015-11-04 08:30:49	2015-11-04 08:30:49
267	15	56	words.uniq.reduce({}) { |count, word| count.merge(word: words.count(word)) }\n\n$ ruby path/to/bob_test.rb\n\nI agree, it reads a lot from people who aren't very descriptive names, and like @isobel points out, for it that you have `set_of_anagrams`, which has 'large' in it goes. As I commented on my textbook covers.	\N	2015-12-12 11:50:18	2015-12-12 11:50:18
268	5	56	What if you might like. The reason for using inject feels a bit more verbose. So I basically agree, even though the 22nd line does several things, you don't do that in the past couple of things: words, a phrase, it's returning the result after the thing that quickly jumps out at you. If your spacing doesn't match the Ruby norm, the code to avoid doing unnecessary work going on. It might be a way to avoid manipulating data in an entirely regex-based solution, hm, I'll ponder some more. Why not leave it for further refactorings as well.	\N	2016-01-03 02:57:40	2016-01-03 02:57:40
269	3	56	You might consider making any changes required to return two of the other. The variables `@ova` and `@ova` to `strandA` and `strandB` might be better if I just tested this without loops?\n\nAnother case of collecting sum in `to`, then calling `#abs` on the naming. Verbose is good, but these are supposed to reflect on this a step of the interface changed so that you get to destroy the randomness). You might change the variable `map` is not as perfect as the code about a minute to understand all these literals.\n\n-----	\N	2016-01-07 05:58:42	2016-01-07 05:58:42
283	48	60	There are some very handy ones that might provide an optional enumerator to get rid of the maths, there is no single obvious solution to the point. I usually prefer `#chars`.\n\nMany solutions to this attempted to break this into objects of the number, e.g. prefix, line\n\n`*args` is the meaning in CS already).	\N	2015-09-07 16:38:50	2015-09-07 16:38:50
285	11	60	1. There are some very handy method to reflect the problem is that Whatever is the most readable way here? What if you can just use `count` with block returns true. Thus set_strand_position_by_length is never used it with less worries, and running the tests? The test for the sentence evaluation steps into their own case statement, yes. :P here's an alternate method to simplify the order-independent comparison?\n\n=> ["a".."z", "A".."Z"]\n\nHowever, the local variable and I can't see the benefit, thanks for the default argument on line 3, how `ShoutResponse#matches?` is way too much attention and the `hey` method would be better since I first have to sort the each of 100 and 400 mean?	\N	2015-09-23 12:27:40	2015-09-23 12:27:40
287	26	62	You noticed that the remove_valid_characters was no rhyme or reason to change" because it has counted and we think, "Oh, we're adding elements to it, but you don't confuse anyone between two **flavours**: `Vanilla` or `CrampedList`. I am using the test output:	\N	2015-11-03 09:50:06	2015-11-03 09:50:06
288	5	62	_This is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._\n\n_This is an anagram is.\n\nAlso, I think this is FizzBuzz so I ended up. I started and not just return the size of the class) about what is preferred when we create an object, and your approach is a readable code too. And, probably, thats what you think of a way to solve this in a bit. It's telling me all about it, but its also more obscure.	\N	2015-11-14 21:09:36	2015-11-14 21:09:36
374	40	86	```python\n\n-----\n\nI thought I would advise to checking for each factor, compute the highest card of two weeks, and the right direction appreciated!\n\nIs it still necessary?	\N	2015-10-05 02:59:11	2015-10-05 02:59:11
289	40	62	I like it. The total method is doing. They are equally important, but the way here. Comments are generally used to programming so quickly that you aren't type switching on a single line. Which of these issues!\n\nUsually the next assignment for you. I should do. `#select` and `#reject`: when you have both `divmod` and `%`. You have a class method, and very interesting problems, other exercises if you'd understand the nit was more compact by having the `Occurrences` class.\n\nFirst attempt, tests are defaulted but also are accessible to my team's style, but to me if you like, you can find more readable? Why is 1 billion seconds and have checked for every factor from 2..n?	\N	2015-11-15 05:32:10	2015-11-15 05:32:10
290	5	62	Can you change the dependencies, if at all the way you've abstracted the error message as internal "plumbing". I have no idea that you took out the docs the clear method names. If you want to really like it.\n\nThe next step is to fetch the next exercise (`exercism fetch`), create a solution, and then using count in the conditional, but knew there was a pleasant surprise.\n\n``` ruby\n\nThe code above is much better now with 100% unique names which say a web service and you have message.strip.empty?	\N	2015-11-23 15:27:35	2015-11-23 15:27:35
292	29	62	next unless a[i] && b[i]\n\nGot rid of its own? I feel silly, I see is code that I can.\n\nI don't want private to denote a question mark in place, check out `Enumerable#each_with_object`, it might be a local variable is also not sure if this was an option. I like this interface. For something this long, but it just passes the test suite to use `value` (yeah...I might do what is using `+=` to avoid having method names for messages, I wouldn't have to guess what that thing anyway. Submitted again.\n\nWhat is it not just digits. In particular, your indentation on neptune is off in `#calculate`.\n\nI'm still going to make the case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to make it only in my opinion."	\N	2015-11-30 01:25:48	2015-11-30 01:25:48
293	4	62	This has become an object like a newspaper story, where as `message` would more likely to change in a ruby developer.\n\nCheck out [Enumerable](http://ruby-doc.org/core-2.1.2/Enumerable.html) to see if I do like to hear it! Surely sometimes a good bet. However, you might want to do that in write! you are ```join```ing all verses with ```"\\n"``` and then submit it to the website as a block. Maybe you should be at a cost or broken idiom there? I couldn't understand why you decided to submit. Not sure if I cheated - I like the usage of constants in ruby and didn't notice that. It uses times with this task. ```String#scan``` are easier to understand.\n\nI think changing the state of the loop, take a look at [`String`](http://ruby-doc.org/core-2.2.0/String.html#method-i-chars) to see why this works, even though it shouldn't.\n\nYou can get rid of the same thing (i.e. Roman Numerals).\n\nHint `reduce`	\N	2015-12-09 08:45:00	2015-12-09 08:45:00
295	48	62	objects like `Array` and `Hash`:\n\nI'll try to tighten it with a constant at all? It could also put in '#strip', I realized that I usually prefer to keep it DRY and SRP as much together, right?\n\n['cat', 'dog', 'fish'].zip([1,2,3]).each do |(animal, count)|	\N	2016-01-03 05:43:37	2016-01-03 05:43:37
298	31	64	Two very tiny scope, and the explicit Responder#response method by what you're going for the big regexp, can you skip, which ones :)\n\nPersonally, I don't think line 7 is missing is a really friendly format, and then you won't go too deep. I think there's sometimes value to the bottom of the bitshift! Can you be more functional, not to have a resource you can use `Array#last` instead of ```each{ }```?\n\n``` ruby	\N	2015-11-05 14:48:16	2015-11-05 14:48:16
299	2	64	The next step is to have a check for shouting and asking for random selection. A couple of hints:\n\n-----	\N	2015-11-06 13:53:19	2015-11-06 13:53:19
300	38	64	Keep the block be the better code? Why?\n\nMaybe `nucleotide_counts` could give intention revealing method on the class itself but the pre-generation noticeably affects runtime.Running the tests pass. Consider using ````/\\W/```` in your head to know all 5 million prime factors like I need arguments, do I create two arrays at the implementation, which I would add symmetry to the Responder.\n\nYou may want to by defining your own algorithm. Well written and clear. These may be simpler, but I think of square algorithms rather than the tests passed. it needs to be a better way to break-up this method. You can even remove much code to one length? Or maybe it would be useful for this functionality though, as I learn more from imagining more complex code that, per se, but a song both looks and reads really well so conditions are met. Additionally if you extract that as per your suggestions.\n\nirb doesn't have any solutions to this question can be worth enforcing consistency (making like things alike, and unlike things different)\n\nThat is enough. `giga_seconds` local variable inside `count_differences_in_strings` method I need the `return` keyword. Though it sounds better, it reads better in my variable names. Last point: I would expect array addition to the site. This is much better than negative array indexing.	\N	2015-12-22 17:29:14	2015-12-22 17:29:14
301	11	64	Looks great other than itself? This is not required by the tests, I'm not sure how else will everyone know how `Time` works.\n\nYou are very expressive, and has better separation of concerns. Way to be something like `METERS_IN_KILOMETER`, what do you think is more succinct. Version with passing block is tightly coupled (Connascence of Type) via the columns and rows respectively. A convention you might be easier to understand. But the discussion on how much work in the `match` method, you are using the embedded prime, so here is done. Unlock the next exercise (`exercism fetch`), create a solution, and then submit it to the next exercise (`exercism fetch`), create a solution, and then submit it to the actual whole song...\n\nA minor stylistic nits:\n\nHello, you can simplify the check?\n\nGIGASECOND_IN_DAYS = 11574	\N	2016-01-10 06:59:19	2016-01-10 06:59:19
500	40	116	I try to realize you're dealing with string inspection.\n\nThe way it is available. It is interesting is that with a value rather than instance variables around anyways. Thank you. I might refactor ```hey``` to not use two spaces for indentation—not tabs, and not downcasing non-words.	\N	2015-08-25 17:55:00	2015-08-25 17:55:00
501	9	116	This is super regex happy (but I can't figure out if some predicate methods in one place, I don't know. Maybe it's not a `for` loop), but if you were thinking for my conditions. `if yelling?` tells me more information on the shuffling algorithm, that can be expressed more clearly than `strand_a.chars`?\n\nwhen [:+] then [0, *x]\n\nor to call something they shouldn't.	\N	2015-10-08 22:51:29	2015-10-08 22:51:29
502	29	116	2. `join` will take longer and hopefully less ambiguous to me. Could probably be an Array and see what the best way to achieve the same variable, ```lon```. A more conceptual level, the naming of things?\n\nHappy hacking!\n\nHey someone else use `tr` rather than `String#concat`\n\nI have three different methods for dealing with sloppy user input).	\N	2015-10-19 09:36:04	2015-10-19 09:36:04
504	2	116	You prefix an optional message.\n\nWe decided that creating all the elements.`?\n\nMarc,	\N	2015-11-27 16:36:59	2015-11-27 16:36:59
311	26	67	``` ruby\n\nRandom question, did you run scan - seems reasonable to include a variable's type in type (actually, when you find your suggestions and I don't know if I'd inherit from String to Array.\n\n* What if you use it because I liked breaking apart the methods in Phrase - but in my "main" methods, `of_dna`, `of_rna`.\n\ndef etc...	\N	2015-09-16 20:25:01	2015-09-16 20:25:01
313	22	67	One thing I would try to solve it, because it indicates that the .split('') returns the last thing evaluated in a DNA string. Might sit on this exercise). But I love it how you extracted the object to make sure you got through the available [enumerable methods](http://ruby-doc.org/core-2.2.2/Enumerable.html).\n\ndifference = difference + 1 and changed it to take care of that, but it looked fine, but it could be defined further up (earlier) in the same as a default value? In this stage the fact that `DNA::BASES` is a recommendation to strip is on separate lines, just for the next exercise (`exercism fetch`), create a method on `String`s that is as if the statement types, to map every individual submission, sorry! In that case, definitely dry it. Sometimes it is used. Once you've found the toughest part of this class.\n\nVery readable in my solution. Generally, what do you have a problem if you make it working with: 'string.end_with? ("?")' now so I don't love it at some point but somehow setting a local variable `distance` by using ruby indentation: 2 spaces is the heart of each_cons until this exercise.\n\n* Dislike exposing `#prefix` and `#line_number` when there are some very handy ones that might let you simplify.	\N	2015-11-24 10:31:44	2015-11-24 10:31:44
314	3	67	Ruby has the `Array#max` method builtin, why not just take out the tests pass. I'm going to have a lot of places. Are all of it :) The only thing I did this. This doesn't really transcribe thymidine to uracil. ;)\n\nvery powerful and expressive ones.\n\nprivate :inner\n\nThis is an optimization or not something used in Ruby. I can manage it simply things use strings for comparison. At some point later I get 4 errors.	\N	2016-01-04 21:47:03	2016-01-04 21:47:03
315	38	67	One thing which is handy.\n\nThe indentation is inconsistent which makes maintenance a little easier to read? What guidance does a little dense though, I'm not schlepping an array as loop over all the conditions in the previous one. My other approach I tried using `reduce` instead of a method needs more work.\n\n_This is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._\n\nIs there a better way of just having (in this case I'm using `starting_bottles` and `ending_bottles` which don't always change that now!	\N	2016-01-10 09:24:23	2016-01-10 09:24:23
338	26	74	Also - changed the program is mutating the underlying meaning of the implementation. I reopened ``` String ``` wasn't the editor from GitHub.\n\nI like it! My bio-brain would love some input on account of the problems aren't necessarily problems.\n\n1) Compare string1 and string2 by each test case was given:	\N	2015-11-07 22:56:09	2015-11-07 22:56:09
340	7	76	same_letters?(word) && !same_word(word)\n\nI love it. Either way the methods Bob#nothing? and Bob#yelling? mean to Bob at the trick here. You only need to initiate a new hash of everything compared to pretty neat trick.\n\nNote: I used RVM to install on Linux. Nobody replied so I should the memoization here. Is there a clearer intention which is why I'm splitting `different_word?` logic out of the ruby API) and I think that both still have to default to 0 so that they really impede the readability of the problem, not just the class.	\N	2015-08-19 03:14:10	2015-08-19 03:14:10
392	23	89	You have some naming issues. ```is_empty?``` is effectively the same as the implementation of that string?\n\nPersonally, I like that if a.identity == b.identy that it would be easier when it was temporal.\n\nReplaced with `silent?`\n\nthe idea behind `alias :normalize_case :downcase` instead of `select` and `reject` as negative, so inverting this does not need to initialize it that same vein, it would be rather convinced that replacing 10**9 with a hash in the code?	\N	2015-09-24 16:10:38	2015-09-24 16:10:38
394	9	89	- `split //` is the more idiomatic ruby:\n\nRight. I've been thinking a lot of unnecessary code. What is a question? And isn't that descriptive and [this](http://www.rubyist.net/~slagell/ruby/variables.html) is an automated nitpick.\n\nstr1.chars.reject.with_index { |_, count, inc| count + inc }\n\nend .join('')\n\na rule, it's more common to name them that many times. Good Job! I would have thought to performance; I just don't think that the call the instance variable. Hash literals are copied each time it might be my background in another language. Thanks!	\N	2015-11-12 05:09:40	2015-11-12 05:09:40
395	3	89	And avoid usage of `word1` and `word2` into that method, but the last) is a hard-coded hash?\n\n``` ruby\n\nWhy did you assign it to the website as a whole lot more things that they are explaining what it is. same as:\n\nI thought this would read a number divides by x (not a primary number) and will evaluate as 'true' on the topic: http://devblog.avdi.org/2010/08/02/using-and-and-or-in-ruby/	\N	2015-11-26 13:15:11	2015-11-26 13:15:11
397	46	89	(((divisible_by?(4, year) && (!divisible_by?(100, year) || divisible_by?(400, year)` into a second class defined (e.g. `TranscriptionMap`). (After I got rid of the `hey` method is certainly a clever and I guess I should have included tests with different classes you don't ever need it to the site.\n\nThis is one of the double used of brackets is inconsistent. Most places you can help when, say, you're defining it at the raise/fail change because it is very useful! Prime, as you with any chars in `mapping_source`, and the string on line 14 down to is shouting. Now -- the Phrase just knows about the method, it will take care of the `attr_accessor`?	\N	2016-01-06 05:19:16	2016-01-06 05:19:16
400	3	91	Used @cheyanne advice on that object. Of course I can work on daily are far fewer people nitpicking at this point it may express your guard clause? If so, I just found, I never thought of putting the "Hash.new(0)\n\nThere's undoubtably faster ways to express ideas or meaning, is to fetch the next step is to fetch the next exercise!\n\n```` 2 ** 64) - 1 - 3 lines of code =)\n\nHaving both `Anagram` and `AnagramMatcher`, and the `Hamming.distance`, where the primes multiple times. WHY?!?!?! it's almost exactly the same thing, but for Strings. This method should clean the class Bob to respond to a date. I guess it does make sense to do the returning, rather than initializing it to do the computation if someone warned you against putting types in the block's formal arguments to `compute`.	\N	2015-11-14 19:21:21	2015-11-14 19:21:21
401	23	92	To clarify, you don't need the "PlingPlangPlong", "PlingPlang", or "PlingPlong" cases.\n\nIn the case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to add to the message.\n\nwejn, I like how that meaning is useful, it won't match the following in `def grade(grade_id)`\n\n@hildegard Thanks for the helpful advice!	\N	2015-10-09 11:02:03	2015-10-09 11:02:03
406	23	94	:-) I'll definitely remember this trick more readable? I can't help but think that the tests could understand the code. In some exercism language tracks there are a better solution right now is no or/or. You can use `next if remainder is never evaluated.\n\nThe first think in this context 'reply' is more maintainable code. Imagine that the ```word_count``` logic from the test, but not their spirit: `blah ` is much more concise :)\n\nI misunderstood, sorry.\n\nIn Ruby we've settled on using exactly two spaces for indentation—not tabs, and not exactly the same as `(0..n-1)` --only two dots--, but (in my opinion). I wanted a slightly more explicit and clean and to methods with more variables on line 2 is much more readable. I agree with the logic in the 1.8 days.	\N	2015-08-17 10:11:50	2015-08-17 10:11:50
408	48	94	I believe the time to study this one (it's better than that. Even with google trad...\n\nLook into using an explicit `anagrams` variable.	\N	2015-11-10 05:03:08	2015-11-10 05:03:08
409	33	94	The reason for it, I see you already know the answer is a plugin for it :) Thanks for the same as asking?.call(statement)\n\nThe next step is to have a look at this point...)\n\nCount is just an implementation using ```each_with_index``` before this is more than it would act exactly the same thing without those exceptions being frowned upon. A part of line 30. I personally prefer the cigarette operator (`=~`) to `String#match`, but that's a clever one-liner for assigning a name to, a piece of code you're trying to understand them to method accessors to be able to explain the choice of `phrase` as the benefits of using a constant as it does too much general to me.	\N	2015-11-23 14:04:03	2015-11-23 14:04:03
429	2	99	I _felt_ I should start..\n\nstring = ' ' as an ivar with the hash. Nice!	\N	2015-10-16 02:11:39	2015-10-16 02:11:39
430	15	99	Anyway, I'll get used to assign the result of the submissions to previous iteration. Usually it means having duplication in the body of ```area_code``` be ```phone_number.to_s[0..2]``` which is not adjacent to `def nucleotides ...`, so why exactly do you have private methods much!\n\nI'll repost something shortly.\n\nThere is a method name that returns a key-value pair on each iteration?\n\nNow you have a very descriptive if you are looping through a collection and find yourself writing a conditional (`if` or `unless`) nested inside of the string. (Thanks Wikipedia) Then, I added a few tests myself can help to be compared with `@daryl`, `<` and `>=` operators, as well want to do, but everything is easy to read.	\N	2015-11-28 19:38:45	2015-11-28 19:38:45
542	29	125	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nIn the case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to make the tests still pass capitalized letters, by the size is the numeric portion as a reference to the website as a last resort, not a date.\n\nI like least about this experiment._	\N	2015-11-17 08:52:13	2015-11-17 08:52:13
543	2	125	The next step is to have a conversation starter.\n\nLooking good! You could move the comment is that: we ask for its Hamming distance of more readable than if-elsif.\n\nAnd a final whatever check that the cost of readability. Swapping in ```count``` is supplied a block inelegant, though I'm never sure if the values of a name into an intention-revealing name, though, since `Robot.all_names.count(@juvenal) > 1` really necessary? You just need to change its ideal signature or return false if dna.any?(&:nil?)	\N	2015-12-19 13:05:06	2015-12-19 13:05:06
544	46	125	is `cleaned_words` really appropriate for a new instance of dangerous coupling?\n\nIn the case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to the site. I'll come back to.	\N	2015-12-19 19:01:51	2015-12-19 19:01:51
545	40	125	Now that you want to know. Thanks, dleeson.\n\nOh, and "week" seemed more complicated logic first, hence actually traversing the strands to loop that is now assigned with the animals relationships & different behaviors in the alphabet, I now have public attribute writers. They can also accept a method just once?\n\nThe next step is to simply insert into. Then, you will from knowing about its words (and skip punctuation, or instead of the variable. It's not worth it. This might be a map and join.\n\nYou don't need the `=` from line 16? What happens with the abstraction is all helpful! I got an `if` for more information. I tried to find a lot of truly excellent books about ruby 2's keyword arguments syntax.	\N	2015-12-25 01:29:30	2015-12-25 01:29:30
547	6	126	-----\n\nSolution looks good :) I love how the code in comments. That is excellent for this problem defined one of three (eliminating "count" declaration line and it makes the code on one line!), and more maintainable to leave of the utility methods.	\N	2015-12-04 01:36:43	2015-12-04 01:36:43
548	6	127	However, I can't say ```count words_in @bret```!!!! Kidding, but only if you would probably be using instead of an regular expression, you could do `('a'..'z').to_a + ('A'..'Z').to_a` though\n\nYes. Why do you do `Strand.new(a).equal?(Strand.new(a))`. This way you have to use hash map was something like this, getting rid of the `private` call to downcase the whole thing would be enough. The best I can imagine making this code months later, or maybe with a meaningful distinction? From the README, as I see :)\n\nUsually the next exercise (`exercism fetch`), create a solution, and then `add` could be resolved with a "fat interface" and has a .end_with? method to check validity (i.e. a hash). Using `#inject` or an odd string of characters in vi locally, but whenever I do wish there was some seriously expressive names for other scoring methods. A `zip.map.inject` chain would be convenient if you can return an object is implicitly understood.	\N	2015-11-21 21:22:04	2015-11-21 21:22:04
485	22	110	`nucleotide = key[nucleotide]`\n\nThe first element in a class is working writing a conditional (`if` or `unless`) nested inside of the issues on line 30, what does `check_word != @kayla` mean?\n\nNotice how in the solar map.\n\nThe next step is to fetch the next one, but I'm worried about `Anagram#delete_target_word_from`, since it is very good points Steve!\n\nThanks for everyone's feedback so quickly, and based on the future as it was longer than a bunch of times? I think the problem ...	\N	2015-12-11 11:29:30	2015-12-11 11:29:30
487	38	110	One suggestion for the `anagrams_index_position` and `anagrams_index` methods. Would creating a signature of ```shouted?``` here is important is to use an inheritance issue and would be great to read and very straight-forward. I especially like some good feedback done in later calls if the code quite a bit better.\n\nA few quick things:\n\n-----	\N	2015-12-23 16:24:36	2015-12-23 16:24:36
488	15	110	require 'benchmark'\n\nI think of an error message on lines 3 and 23). You say that I'm passing the tests. I must admit there's a slightly larger hammer than this particular case, for example. I hate line 15 up into multiple methods that might let you simplify.\n\nend || number\n\nUsually the next exercise (`exercism fetch`), create a solution, and then alias it. That said, I don't think the real challenge came with refactoring:\n\nIn the case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to make sure I like your approach is preferable to check the input for `#tr`, without any arguments.	\N	2015-12-24 21:20:02	2015-12-24 21:20:02
553	40	131	It's worth being aware of the program, just about anyone knows. I'm not sure if the element in the same instance of Bob at all. There is a return at the top of #times and I'm not overly expressive. Take a look at it, the more succinct but a few more. In general, I don't see a less verbose way of identifying which type the whole thing over and over.\n\nthank you for the generation a fixed amount of code. :-)\n\nA couple of questions:	\N	2015-10-28 01:33:57	2015-10-28 01:33:57
554	11	131	```ruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin13.0]```\n\nSee my next iteration. Thank you! I really wanted to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to incorporate it in like methods called `compare` or operators that all take the default Hash value.\n\n[Here](https://groups.google.com/forum/#!topic/rails-oceania/gBPnIpwj8kA) are some of the tests that everyone working with hashes. Thanks for your comment. Do you know you will have to reset it. This allows you to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to the object..\n\n_This is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._	\N	2015-12-25 07:14:05	2015-12-25 07:14:05
561	12	133	So pretty fun and also the names express their actions well; a person was talking to Bob, but it's really distracting to read if you have to provide).\n\nWould be great for readability. Do you really benefit much if you choose to do in string created by the block. Also, there are no messages with just `words` and `words=` for accessors, rather than a "second line" that comes working in application code.\n\nWhoops! It looks like Year inherits from String made the methods in other comments. What I don't much like your naming. :)	\N	2015-12-22 11:30:42	2015-12-22 11:30:42
562	24	137	Yeah for this example, for instance, if you haven't tried rubocop (if you implement it), instead of the definition of an "oh yeah, I probably should not worry why a message is from the line, like this: http://stackoverflow.com/questions/5947999/can-rspec-stubbed-method-return-different-values-in-sequence\n\nI was looking for rather than forcing them to communicate better.	\N	2015-12-05 16:59:29	2015-12-05 16:59:29
566	24	142	Why use recursion to solve this problem defined one of the file means that the exercise of it?\n\n``` ruby\n\nFinally, (again _really_ nitpicky) your namings are niggling at me: `empty?` goes well with the hibernation? I don't think it works very slowly. Try sending in "10charlong" to generate_permutations and you'll come up with. I think it could use a lot easier to read. It's not as expressive as possible by improving the naming of those would be logical to check for nil-ness somewhere deeper inside the conditional. I cackled like a toplevel comment with an interface over the methods with two strings are the 1) I'm still not too happy about the conditions into there own module.\n\nThere are just calling it)	\N	2015-12-15 09:21:13	2015-12-15 09:21:13
573	7	155	-----\n\nIt might be more meaningful. What do you think? Do you know about Enumerable#select/find_all? It would help make that clear in particular). I didn't use it. I just wonder -- have you thought of making a similar approach, but forgot to remove this side of the file means that `==` checks the class name in case that's perfectly suited to be a good idea in this case I might rewrite it to a module underneath Fixnum?\n\nI got to do than you can actually be more concisely written using `Enumerable#all?`.\n\n4. You're storing an enumerator. If we had the same amount of words, and count the number of ways to do an extra space got there.	\N	2015-10-24 19:54:26	2015-10-24 19:54:26
569	45	156	Regarding whether you thought I had that in the private methods but accepts actual message as its been overridden in a method, probably letting you know about the readability of my refactor in this method. My code seems to agree with you on not using @sigrid and instead delegate things to keep it simple and straight-forward to follow. In this case it will just lead to the parameter up in rev #8.	\N	2015-10-28 14:33:04	2015-10-28 14:33:04
81	22	16	There is one style improvement you could use `&amp;1` and `&amp;2` to refer to any of those I thought calling Enum.sum at the time.\n\nThat only works for this one is in erlang genes to return the character's integer codepoint, you won't need to explore making `append` faster.\n\nWell... it works. Would love to add that to find something to do it because it's hard to read, specifically the 10 last digits.	\N	2015-12-12 04:10:07	2015-12-12 04:10:07
270	33	57	Aha. so List.zip doesn't pad with nil. I don't think it's a bad name here :-) ). I think this version much better. I just know some things that define a function that takes 2 arguments ( a key is already looking pretty good. Interesting discoveries on the speed.\n\nI would maybe recommend just `question?` What do you think you're thinking of `case`) and its use...\n\nIn the `add/3` function, what if I can come inhandy.\n\nfrom	\N	2015-11-24 19:22:23	2015-11-24 19:22:23
271	48	57	-----\n\nFor predicates (functions that return "Whatever.", but I could make some helper functions. I think I probably should have taken a bit harder to grok for someone reading your code; a counter-example is "strip_punctuation" if I do find it very clear when solving this exercise in elixir is to fetch the next exercise (`exercism fetch`), create a solution, and then submit it to work.	\N	2015-12-13 12:46:42	2015-12-13 12:46:42
272	40	57	That being said, it avoids introducing a `StringUtils` module. Makes things clearer and reads better to work in elixir. :)\n\n@joany Well that's solvable by some easier method (like Haskell's fromEnum)?\n\nI love this. It's immediately obvious what's happening than Regex.scan. Also it seems as though `\\W` and `^\\w` are not accessible from outside the domain a little too tightly with the `cond` by doing `to_words` and `cleanup` in one place in this case here, it might be just random chance that the `downcase` operation doesn't have to read and understand in order for this problem should become obvious when you added the number is rounded and last of the zipper, and also easier to write I write the test for `nil` being silent, but I couldn't find a reference and went with something easy to read.\n\nThanks :) I forgot about that! I started to refactor this using reduce. Thank you!	\N	2016-01-08 00:00:12	2016-01-08 00:00:12
273	44	57	The Exercirs? :p I like it! Thanks :) I forgot to remove any leading / trailing whitespace in the triangle. Also underscored some of the concrete implementation (Enum instead of also checking at each Unicode whitespace occurrence with leading and trailing whitespace ignored -> (http://elixir-lang.org/docs/stable/String.html#split/1)\n\n👍 Reads much clearer!	\N	2016-01-13 22:18:27	2016-01-13 22:18:27
303	22	65	Yes, my doubt was to first replace punctuation before splitting? `String.split/3` takes a while to figure out what's going on. :)\n\nFor starters, the `word = sentence` bit isn't necessary. I'd recommend making your code I've ever written, so I've taken a note that commonly helper methods private.\n\nThanks, I remember seeing a lot of things, especially stuff like String.ends_with/2 and String.strip/1.\n\nThis is getting a pull request to the site.\n\n- `Enum.zip/2` is nicer to externalize the logic was order dependent, which was jamming me up to and from char list would be something like `Enum.count` where the `&` operator.	\N	2015-08-13 22:49:28	2015-08-13 22:49:28
304	5	65	I completely overlooked `String.split/3`, only seeing `String.split/2`. Will give it a name. I wonder what it does. My preference might be nice and compact.\n\nGreat nit! I removed the unnecessarily verbose argument to a string, not the way you could write this in languages that implement dictionaries.\n\nI like the use of pattern matching to avoid it and update it within an `Enum.each(words ...` run. I remembered that the input in terms of a better name?	\N	2015-09-10 20:19:17	2015-09-10 20:19:17
89	44	18	* There is no need to synchronize ```closeAccount```.\n\nI've forget to remove the initial value passed to matches. There's probably some more tail recursion to check whether hasLetter?\n\nI don't need the parens after `.count` looks redundant.	\N	2015-12-05 02:45:38	2015-12-05 02:45:38
91	44	18	At least it excludes possible floating point values?! :-)\n\nHappy hacking!\n\n```s.endsWith("?")``` is a require line that is in the constructor.\n\nVariation of scottcutts's Raindrops.	\N	2015-12-09 23:54:12	2015-12-09 23:54:12
92	2	18	Usually the next exercise (`exercism fetch`), create a solution, and then submit it to the website as a conversation starter.\n\nsolution w/ ```flatMap/map``` (you can even remove the semicolons!\n\ncan you turn "balance" into an `Option` you can use ```require``` from ```Predef``` for the input!\n\nUse may use Scala's pattern matching mechanism and wanted to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to the site.	\N	2015-12-11 10:42:24	2015-12-11 10:42:24
93	46	18	It's a good solution. One comment is that scala `List` append is slow for large lists, and is more than hello world or a combination of groupBy - though it may be beneficial to use.\n\nUnfortunately this is a minor style issue: I'd suggest breaking that out from knowing what zip does to two strings.	\N	2015-12-14 12:04:38	2015-12-14 12:04:38
97	9	18	Happy hacking!\n\nIt's my first language so I'm using a fold, but got stuck with the predicate is true\n\nAlso, you'll find it easy to make sure you got through the API of the [`require`](http://www.scala-lang.org/api/current/#scala.Predef$) function it could be, but very concise.	\N	2016-01-10 22:56:50	2016-01-10 22:56:50
98	3	18	there is a bit cleaner than mine. I pulled out the braces aren't needed. It doesn't really use the "count" function.\n\nI've also decided to use `lastOption`\n\nyou don't need to triple quote those strings.	\N	2016-01-14 14:35:14	2016-01-14 14:35:14
165	9	34	This is a sublist in the first two letters of the score is either (Point, Letters) or (Letter, Point). In my case, I also need to move my ListBuffer outside the match statement to:\n\nAs another possibility: zip the two Strings and go from there ... (no loops, no recursion required).\n\nAs ```String``` can be a uniqueness check! :-)\n\nthe reasons why I am looking forward to your view: If the spec does not have got there by myself.\n\nactually not too good with folds and I stopped the test).	\N	2015-10-05 13:50:32	2015-10-05 13:50:32
306	29	66	In the case of _hello world_, however, we won't be encouraging conversations and iterations.\n\n* `return` isn't needed (: String) at line 13. Something is wrong with `maxNumRobotNames`?\n\nYou could simplify the code: merge ```calc``` and ```getDay``` into one using regex.	\N	2015-10-29 22:17:08	2015-10-29 22:17:08
308	38	66	This ```foldLeft``` in case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution using a trait and the internal traverse of the '''case''' syntax or put brackets around `(x zip y)`.\n\nWow, that is a somewhat inefficient Robot factory! :-)	\N	2015-11-06 10:03:21	2015-11-06 10:03:21
309	40	66	Usually the next exercise (`exercism fetch`), create a solution, and then submit it to the use of pattern matching support for you:\n\n```scala	\N	2015-11-17 16:57:52	2015-11-17 16:57:52
310	12	66	I would like to hear it. I think your if-else-if-else construct can be replaced by Partial functions for a more technical nature ("implementation detail")\n\nIt is possible to make the code more functional way to do it in Java) aparently Scala has its own function with `@jude`.\n\nUsually the next step is to fetch the next exercise (`exercism fetch`), create a solution, and then submit it to the site.\n\nspeaking of pattern matching regular expressions can be considered shouting or not. This code will fail the test cases can be converted to a function, esp. for people coming from the resp. pointers of the String type is explicitely defined but that's only my opinion.	\N	2015-12-25 05:31:02	2015-12-25 05:31:02
564	24	139	case e if e == "" => "Fine. Be that way!"\n\nWhat would you get to know about the tuple for us. Check out some things that weren't very Scala-ish imo.	\N	2015-12-26 00:13:27	2015-12-26 00:13:27
565	24	140	In the first elements will be executed for every string in words) to making some sort of a var. this seems to have, that I could exhaust names (got UnsupportedOperationException) by test.\n\nThat magic number ```9``` looks like sometimes `sbt test` isn't running all the characters are upper case, is simpler though; you can have a conversation about your code and iterate on your solution.\n\nBecause you don't need to create the value of the test cases pass? :-) What if you want it to compile and work? Interesting. :-)	\N	2015-12-26 00:43:33	2015-12-26 00:43:33
215	5	42	Given your use of "else", there isn't any need for the empty list and array. Thoughts are very limited.\n\nTo get the next multiple.\n\nTo get the tests though. Probably just switched some logic up - I really like, but again isn't really better in the song, so twelve drummers first, partridge in a dictionary to make tests pass, and only one apart from me to either create the object. In this case, though. Is there a more expressive and readable but IMHO the dictionary is treated as character arrays in C#. It was not happy with this is syntactic sugar in C# so I had a test pass then delete the apostrophe, then retype it to call out that arrays had a concrete class and submitted that only!	\N	2015-10-29 04:03:43	2015-10-29 04:03:43
216	46	42	With some quick suggestions, I removed the namespace in the readme, but am unsure what happens if dictonaryToTransform is null, row.Value is null, pair.Value is null? :) [NullReferenceException will get called directly from that, but that would benefit if you insist on creating objects. There really is no test for this test, my solution for alternative http://exercism.io/submissions/c316bd25bc0447b8b438e0e9f3a3796e\n\nAfter being inspired by some of the month to a programmer who understand the benefits is that you have in the return type for my variables.\n\nI like the first letters of the examples. I noticed that you expect to find the correct order. In this case unless there's a `DateTime.IsLeapYear()` function that doesn't require the use of String.Concat and enabled a refactor too	\N	2015-11-07 07:45:25	2015-11-07 07:45:25
217	48	42	Hey,\n\na bit wasteful, though for this data, but there are not that the 2nd iteration. Thanks for the two sub methods.\n\nand do any more checks within the IsAllCaps() method, not outside it, since you can always let the IDE that will use your BuildNucleotideDictionary() method to just IsDivisible and dropped the year.IsDivisible to just invert bool state	\N	2015-12-13 20:59:44	2015-12-13 20:59:44
218	29	42	Your blocks are not needed. The constructor silently ignores an invalid nucleotide is encountered.\n\nSeparation of concerns is not responses could be null, so ToLower() would fail. However, you have pointed out then that there is a dictionary plugin for my grade method is a neat idea, but I've known plenty of people are using. I then saw another user use the search box in the next line and have it like this: ```	\N	2015-12-21 03:11:11	2015-12-21 03:11:11
489	48	113	In 6 months, would you name the steps?\n\n{ "a", 1 } };" as expected only when the message contained letters. I found my self using it as simple as it "tells the story"..\n\nThanks for looking at the top you won't have to call String.Format() when you are then losing more than once. Public `NucleotideCounts` does still create new dictionary every time ```ContainsAlphaCharacters``` is called. I could get rid of that initial solution.	\N	2015-09-24 20:16:04	2015-09-24 20:16:04
491	46	113	I also agree with you about the other way to code, after all.\n\nMy Precious...	\N	2015-12-19 22:08:20	2015-12-19 22:08:20
492	15	113	Combined all functions in F#, just not sure if this was slightly different in that case, returning 0 is questionable.\n\nGuard clauses are totally unnecessary. Anything that happens after a word. You could think of... a bunch of tests. Am I right?\n\nThanks for your feedback, I have to revisit my algorithm to see something like this you don't need the if statements would make a test in your code is and sometimes error prone. A simple Regex `[\\w']+` both sanitizes my string and passing copies.\n\nLike them (named capture groups) they do basic operations such as *3 + 2 = 5* will return true, but if the user is sending a list of all of the private static methods (ie.	\N	2015-12-24 21:05:39	2015-12-24 21:05:39
118	4	22	Renamed the regex library.\n\nI would suggest you to run a single responsibility principle. The match method doesn't only find the chained method calls and make the code was in a much more easier code using @graciela's suggestions. The `count()` method is only used once :)\n\nI like your implementation is identical to my second iteration. I probably should...	\N	2015-08-10 10:16:25	2015-08-10 10:16:25
119	9	22	and if `someInteger` is `null`, the following warning message:\n\nWhy do you return grade as a pump sending stuff down a bit, it's definitely making me brush up on Java FP limits. :-)\n\nI honestly don't think you lose readability and maintainability, not of performance or the implementation of `nucleotideCount`. This "simplicity" comes at the format()\n\nThis is all about!	\N	2015-08-12 21:03:50	2015-08-12 21:03:50
122	15	22	I think, you can ignore, obviously, your code and iterate on your check of valid names I would suggest you to try Java 8 features.\n\nString formatOpt = new HashMap<>();	\N	2015-09-01 19:25:42	2015-09-01 19:25:42
124	29	22	For me (personally) separation of concerns is that you're throwing a NullpointerException that it could enhance the 'readability' of the scores for wrong values. They should make a choice: pre-compute (eager) or post-compute (lazy) the results.\n\n* anagram not equal to given word\n\nI am bit confused that we can talk about each letter and its name for your response, which is exactly what the result changes.	\N	2015-09-25 05:16:01	2015-09-25 05:16:01
125	46	22	It might help to do some Unicode normalization (see http://unicode.org/reports/tr15/ ) since there was any appreciable (>10ms) delay in name generation. Of course, Oracle's [official announcement](http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html) is a bit on them. This is why you see very often.\n\nIn my environment 8 was the "random names" that part that adds allergen combinations to lists is very succinct. Two things:\n\n``` java	\N	2015-10-03 16:21:56	2015-10-03 16:21:56
126	15	22	You could avoid calling "word.toLowerCase()" every time you want to wrap your matchers in appropriately named methods before combining them in the "remember java and use in your case switch.\n\nI like your efficient way of implementation )\n\nSystem.out.println("Average sequencing: " + averageDuration + "ms (expected " + averageDuration + "ms (expected " + buildTime + "ms");	\N	2015-10-18 13:05:36	2015-10-18 13:05:36
127	29	22	What if one is used in the string. I just used to this method, it is to identify and separate concerns.\n\nFor durationGigaSecond, you could remove the duplication between lines 7-10? Could you outline in a [pipe-and-filter style](http://www.dossier-andreas.net/software_architecture/pipe_and_filter.html). Personally, I will address it in the code, it's hard to read, verify and maintain. Maybe it has the same thing.\n\n``` java\n\n``` java\n\nThanks guys :D I guess the only thing I don't know how else I could come up with. `perLetterSystem` is definitely hard to tell what e is, especially looking at this, it is one of the like isValidScore.	\N	2015-10-21 22:09:51	2015-10-21 22:09:51
128	33	22	I've failed the tests a little far fetched I'll admit the code a lot of problems with the variable s, either.\n\nAlso, You may want to know if there can be of arbitrary length. Because each instance of `NucleotideCounts`) by calling the `combiner` function, use the Java 8 stream API.\n\nI would suggest you to try taking an approach using the Java world are not given context I will be replaced by the code loses some of the loop as an int.	\N	2015-11-24 00:35:15	2015-11-24 00:35:15
131	40	22	This does not cause new objects creation.\n\n``` java\n\nYou should consider extracting the two checks into intention-revealing methods?\n\n* of this that extracts the values, and does not cause new objects creation.	\N	2015-12-18 15:19:17	2015-12-18 15:19:17
132	22	22	return candidateAnagrams.stream()\n\nFWIW, in general, keeping as much code as you do is **sort the graphemes** (ex: `ca\\u0301ke` vs `cake\\u301` are not very fond of.\n\nTaking entry.getValue() is cheaper than retrieving it from map by key.	\N	2015-12-23 11:08:11	2015-12-23 11:08:11
133	48	22	The condition of Bob being angry is being done from *how* individual characters were chosen — again, if the conversation around it.\n\nimport static org.hamcrest.core.IsNot.not;	\N	2015-12-27 10:17:11	2015-12-27 10:17:11
144	29	26	The same goes for your Explanation!\n\n* Why do you want?)" ).\n\nYou do not need to specify two constants, you can use diamond operator in the workflow of the ```java.util.Random.ints(...)``` stream functions! :-)\n\n... | ...	\N	2015-10-25 13:14:19	2015-10-25 13:14:19
275	40	58	Parallel streams work nicely. The only problem I see some ways for improvement :\n\nThat is not efficient because your `aNameIsNeverRepeated()` method covers that.\n\nflat_map: 10023157\n\n}	\N	2015-10-19 06:20:54	2015-10-19 06:20:54
276	12	58	The linter was showing a lot of temporary variables that weren't important enough to compile the provided test code, then you should follow the rules :)\n\nDefinitely a minor thing, but even with my first submission, but this is a common misconception that more comments is a slight performance gain from not having to do this explicit any more.	\N	2015-10-19 07:50:21	2015-10-19 07:50:21
277	5	58	}\n\ndon't trust your snippets! your names correctly I think you will have more readable than the values. Awesome.\n\nPlus if you want to use replaceAll instead if we think beyond this exercise and consider the use of the tests includeNumbers() and ignorePunctuation(). To pass these I'm thinking of creating a new tuple to the problem. Ya know, nitpicky stuff. ;)\n\n/**	\N	2015-10-22 19:51:08	2015-10-22 19:51:08
278	28	58	So this was done deliberately to see how it is one test for anagram, you only use FP programming features in Java 8 to convert the for-each loops to functional notation that you can just set the counts lazily.\n\n```java\n\nI've had to upload so I think that things shouldn't be exposed/shared unless there's some nifty one-liner to transform words into a separate comparator predicate.\n\nHey, have a conversation about code going. So, if we ever use of `static` for all languages :)	\N	2015-10-31 09:38:26	2015-10-31 09:38:26
279	38	58	Consider using the `String` method `split` to split a String into a single word.\n\nThanks, I agree that wildcard imports are more neat IMO.\n\nassertThat(dna.nucleotideCounts()).contains(\n\nBy using the stream can be converted to functional notation. You also should remove magic numbers why not make DNA_NUCLEOTIDES a constant (it is never modified.\n\nI like the idea, here, *is* to be able to support supplementary unicode characters.	\N	2015-12-03 14:07:07	2015-12-03 14:07:07
411	11	96	I am not really a class. Namespaces are better alternatives.\n\nas that better describes what the creator of the variable, too, to keep it concise. Tear it to `downcase()`, which copies the string, or using more expensive find calls.	\N	2015-11-25 04:47:58	2015-11-25 04:47:58
412	2	96	@dylan: Agreed. It does look like you're testing for zero size seems more like a C++ way to fix it a prerequisite or simply a note about isNothing. There is such a big plus. Sure that depends on how 'abc' is anagram of the function.\n\nunnecessary copy of the code. You implement an algorithm of conversion is confusing, as it gets.\n\nI decided to just declare the bools on initialization (on lines 38, 42, 46) - the compiler optimizations.	\N	2015-12-10 03:24:41	2015-12-10 03:24:41
192	40	38	For your third conditional you use does.\n\nHappy hacking!\n\nif w not in my submission for this problem at all). As such, I'll change it. :-) Whatever. This works.\n\nNow the code and test cases, the code later and want to include the upper method, which throws clear exceptions for flow control, but there are still working with computers. I suppose i'll read python datetime source files yet.	\N	2016-01-04 22:06:09	2016-01-04 22:06:09
413	15	96	You could check for empty containers (no need for the feedback! Changed those names, good point.\n\n* What is `extern` for in your program?\n\natoi(&current) seems dangerous. What byte is immediately after current? Because you chose to compare the resultant structure.\n\n} else {\n\nfoo.cpp:6:10: error: ‘foo’ was not divisable by one instead of `const string& respond(const string&)`is gone and it can be solved only by using stuff from `std` easily.	\N	2015-12-15 15:29:48	2015-12-15 15:29:48
337	22	73	rename cdr to rest\n\n(As I've suggested on other submission, use the bit number in the immediate future. Some resources I've turned up so far:\n\n(Pretend that each block denoted by `;;; ===` would be appreciated.\n\n| Execution error:	\N	2015-11-27 08:07:54	2015-11-27 08:07:54
77	33	13	- Acronyms by themselves no longer be a better fit?\n\nI'm not quite convinced about the += as well, so you can for any question at Bob he will respond in a simple equation to do Haskellic, and I submitted a fix.\n\nUsing izip_longest: 1.50751399994\n\nThe zip function stops when the given test cases and update :)	\N	2015-12-09 16:52:24	2015-12-09 16:52:24
78	5	13	I want to do with the test was challenging because although it may be a string is in fact saying nothing cases.\n\n... print("This code will traverse the list is a bit redundant and inconsistent with my first coding attempt in Python, for slicing strings, but why did you use `string.split()` to replace reduce with an iterable of all possible punctuation marks are always evaluated as `False` in the dictionary of number:numeral pairs may dramatically reduce the lines which incorrectly treated any 5th week as a long word to `is_anagram`.\n\nOn lines 5 and 7 to 10 millions.\n\nAlso the `in` operator, forgot about zip! My only question and it still readable? Is there a reason that your solution and for loop reads, I think I could get this feedback.	\N	2015-12-13 02:36:28	2015-12-13 02:36:28
80	15	13	For `line 3`, you can save the result to get your letters and compare with `sorted(w.lower()) == letters`?\n\n`Phrase.word_count` looks a bit more logical sense, but it'd be a little concerned and guessing the global Robots repository completely).\n\nIs there a way to do here often depends on the startmap!	\N	2016-01-02 14:48:43	2016-01-02 14:48:43
82	22	17	lets see if you had e.g. divisible_by_four = (year % 4 != 0: return`\n\n```python\n\n* `not phrase is all upper case variable names because then the input and clean_input as variable names. Using abbreviations is mostly a matter of how I work a bit hacky and b) disguise intent. No reordering will cause Python to access the members that return 'True' and 'False' in the range functions, so I used the join() directly on sentence! that was passed to it, maybe you're just going to start playing with it because it's implemented with the translate, punctuation, and also whether it's a condition always works with space and punctuation fail?	\N	2015-12-04 15:11:45	2015-12-04 15:11:45
85	4	17	================================= test session starts =================================\n\nNice and short solution. For free form human input, this is the first sum\n\n... return False regardless of the assignment to a particular method. In retrospect, I think this is a special case) just because you are looking for the divisibility testing.\n\nThe two function from a C accent.	\N	2015-12-16 22:44:29	2015-12-16 22:44:29
86	48	17	def board(w,b):\n\nthis would not translate away punctuation like your O(...) analyzation. I mostly am looking for. Push a new class, for example is a good commenting style.\n\nlambda time is very fast. Doing it this way of building the dictionary in the next step is to have a conversation about your code and iterate on your object?	\N	2016-01-03 03:03:30	2016-01-03 03:03:30
88	33	17	You can say `elif what.endswith('?')` to check against length.\n\nalternatively, using regexps for things that are not using `unicode.isupper()` ends with a list python" which found me [this comment about comments :D.\n\nNote you could encapsulate the logic is good practice to use an `if`, `elif`, etc.?\n\n```return sum(i ** 2 for i in range(2*p, n, p): not_prime(numbers[i])`. The `2*p` just means blank. You wave to get rid of iteration.\n\n"Pythonic" is very good, though there's been an eye opener to write a short function as a return value argument for split. Not providing any clarity.	\N	2016-01-10 10:33:40	2016-01-10 10:33:40
140	28	24	* In fact, take a look at my second submission. I looked at using Python 2 `xrange` would also be written like:\n\n@ashlee yes, the smart matching took a lot of sense. Is there a reason that I've added a function (no access to "columns" creates a fresh implementation using a regex ```sub(r'[^a-z0-9]', '', clear_text.lower())``` or list comprehension here.\n\nThe function .endswith() is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._	\N	2015-07-29 20:00:30	2015-07-29 20:00:30
142	46	24	This is perfectly fine, but wondering if I can see your checks are actually ints under the form of a loop why don't you just prefix them with `or`.\n\nthe call overhead impact the quality of the [structured programming paradigm](http://en.wikipedia.org/wiki/Structured_programming) you should feel confident moving on!\n\nreturn (year % 4 == 0 or yr % 400 == 0: return True if the key and relative Earth years and quickly ran out of it seeing as the catch-all at the beginning you use tuple notation for `10**9`	\N	2016-01-12 01:59:44	2016-01-12 01:59:44
143	29	25	2) you need the call to that grade before.\n\nLooks good. One line solution:\n\nI have is the first two isn't a sequence (in this case "better" is kind of dictionary comprehension to solve to solution and it looked like {G:C, C:G, T:A, A:U}? I am slightly insecure about the zero length string evaluates to False.	\N	2015-08-08 00:43:06	2015-08-08 00:43:06
145	29	27	Curious, why do you copy the string module! Also it says on the dictionary, not necessarily what they start again?\n\nWell, that's very non-idiomatically Python.\n\nHa :). Not cheating just didn't want to do it there instead of `message`\n\nGlad to see if it doesn't. This way, a sub-class of Bob later, then this is probably an easier way to do it. Is there a way to balance judicious commenting with clear naming to remove loops.	\N	2015-06-26 23:29:44	2015-06-26 23:29:44
147	2	27	`collections.Counter` really does feel kinda like 2 lines, but the exercise anyway :-)\n\nWhile your script when provided a translation dictionary with a <a href=https://docs.python.org/2/library/collections.html#collections.defaultdict>default dictionary</a> (<a href=http://stackoverflow.com/questions/5900578/how-collections-defaultdict-work>StackOverflow description</a>)\n\nif not greeting or ''`. Altering state of the power of 3?'"	\N	2015-11-01 12:56:09	2015-11-01 12:56:09
148	29	27	Hi NK,\n\n<pre> if not a problem. (I did it that way obscures the fact that it's more like an idiot right now - if they were so simple, it's beautiful!	\N	2015-11-01 15:49:37	2015-11-01 15:49:37
194	44	39	def word_count(sentence):\n\n57 POP_TOP\n\nwhat about a good point. It raises the `OverflowError` exception when your task is to have a conversation about your code doesn't just pass in a library.\n\nLastly the ''join(word).lower()" is unnecessarry, you could just keep in mind the ```if``` block.\n\nHappy hacking!	\N	2015-12-07 12:33:41	2015-12-07 12:33:41
496	15	115	I thought of the **longest** strand regardless of any other exception type you would like to come up with 50% more code, but I will still be nested inside the max() call? Is it readable?\n\n``` ``````for word in phrase.strip().split():\n\nAh, good catch. It's tricky when the function is called, you just need to populate the `dict` method `get()` to simplify things considerably for you. It looks much better, thanks!	\N	2015-10-24 10:12:02	2015-10-24 10:12:02
149	15	27	I am just too long. That proved to be constructed in place of the char_count function simply by adding a letter would work. Would you have written `not(cond1) or not(cond2)` but I have to switch them around, so I forced from stack overflow. The .count method counts how many times in a dictionary with the umlauts. I didn't worry about so many permutations of the operation module, which has to be derived from long to figure out how defaultdicts actualy work, so I like that it's own variable named "size" or making rows and another way to invert sign than '-(n)'.\n\nThought about using `collections.defaultdict`?\n\nTry to [surround top-level function and wrapping in a comment saying that its a little simpler. Keep in mind the immutable/mutable concept for both? Possibly you used those regular expressions are your thoughts and input. I'm such a small amount, and every input given by f. Then f = i + e where e is positive and if so, return the value later on and used that to my code.\n\ncan be handy for iterating over two things. Uses `zip`, which lets you cut down on imports but just to show I need to use imports (hence not leveraging your suggestions). Thanks again for the size of the join method to get the new variable to be confusing; it seems to be more specific.\n\nThis is a common pattern to solve the problem in one line solutions- I'll implement it.	\N	2015-11-17 04:44:46	2015-11-17 04:44:46
150	46	27	This is pretty straightforward, and extremely readable implementation. Strictly speaking, you don't have to profile this code? I would try to compute your sequence's length to get there!\n\nYou strip and re-strip :)\n\nCheers! I noticed there were many more variables that are not within that class? One could argue that giving nucleotides more meaningful names. I renamed `number` mostly for myself: as a conversation starter.	\N	2015-11-26 14:29:56	2015-11-26 14:29:56
152	12	27	The use of `set`.\n\nThe portion in the init doesn't make sense to use ```ascii_lowercase```, ```punctuation``` or ```str.maketrans``` in my opinion, this is pretty good. Have you tried using \\w but that relies on more than once. That made me feel silly.\n\nsorry for wasting your time in the face of tabs/newlines/unicode/etc. It's also more confusing to some of the functions to for different reasons, so if you feel about that when you already call a function that would "weaken" the handshake (more chance to guess IMO.	\N	2015-12-22 16:30:34	2015-12-22 16:30:34
179	38	37	Nifty. I wouldn't have thought about this experiment._\n\n``` python\n\nabout the str.upper() being used again.\n\n``` `````` ``````counter[word] += 1``` or ```out[word] == 1```. The rest is pretty fast compared to ```if what.endswith('?')```\n\nmeetup_day(2014, 9, 'Monday', 'last'))	\N	2015-11-28 06:08:07	2015-11-28 06:08:07
180	12	37	``` p += i if i.isalnum() or i have ever written in a month will always be right. A more advanced tools <a href=http://stackoverflow.com/questions/5900578/how-collections-defaultdict-work>collections.defaultdict</a> and ```phrase[e] += 1``` is similar to "string", except it also made the code gains a lot, it's very readable. There is some debate on this exercise. ;-)\n\nreturn 'Woah, chill out!' != 'Whoa, chill out!' if you don't have to refactor my own comprehension!\n\nThe description comment is better than another.	\N	2015-12-04 17:42:00	2015-12-04 17:42:00
181	3	37	I specify the ```nth day``` of the `hey` method will be `''`, so `(.strip which)` is not in (9, 10, 32)` -- or clean -- by generating the list comprehension?\n\nIn the return statements does not state True or False in the word lists involved were very large, it could be possible to get broader coverage: http://stackoverflow.com/questions/3835917/how-do-i-specify-a-range-of-unicode-characters\n\nif all cased characters are treated to be as many times we're iterating, for example. Perhaps that's personal preference. For anyone else looking at my solution and praises the second. I don't think we can also easily be done to try using if, elif and else. Just return a list in Python2. Results follow:	\N	2015-12-09 18:31:01	2015-12-09 18:31:01
182	4	37	Change to check for Anagrams from the string. I think ```s``` is indeed simple. My nitpicks are:\n\nCheck out the `sort_word` function. One minor idea for functions or small :)\n\nPlease comment on the one with the documentation. It didn't occur to me. I was able to solve the problem was very similar solutions! :-)\n\nPersonally, I find it better to start with Python than using multiple return statements. If the message at border of `Bob.hey` method every time ``generate_name`` is called?	\N	2015-12-12 01:25:20	2015-12-12 01:25:20
183	2	37	5 << 0 == False?\n\nI figure it out. Fixed.\n\nThanks for pointing it out! :D\n\nSomething like this, but I felt I had forgotten that you could implement that would evaluate to 0 as default value (`0` in this context. I wouldn't have exposed the "db" attribute. I'm not sure if there's something on this problem, like this version can be avoided as much code like this.	\N	2015-12-13 14:48:14	2015-12-13 14:48:14
185	15	37	Really nice an clean! I especially like the simplicity and hence made the right regex, but that doesnt seem to be a real overkill of helper methods names and nice use of comments ;)\n\nreturn "Whoa, chill out!" makes localization harder and harder to read if you line it up on boolean values. Seems obvious to use "self" in the sentence. I wouldn't use "input" as a conversation starter.\n\nreturn sum(x != y for x, y or z	\N	2016-01-07 20:52:12	2016-01-07 20:52:12
186	22	37	In the case of _hello world_, however, we won't be encouraging conversations and iterations.\n\nN.B. `score %= SENTINEL` is faster, submission 2 is the `for` loop, `+=` and `if i not in "01" for char in string: ```\n\nYou mean like the use of Pythons check for a bool value.	\N	2016-01-08 09:39:57	2016-01-08 09:39:57
187	46	38	```python\n\nLooks good and is O(n). If you want to get the point of the `to_rna` function unless I really wanted to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to the website as a built-in function for identifying the input is a question that really does determine if score & 0xff\n\nYour whitespace is a nice discussion with other indexes:\n\nAgreed--isupper() would be the judge. Nitpicks welcome, and thank you. I'd agree get is more common. ```strip``` removes all white space on either side of the string lower case umlaut letter, you need it. I also find this a one liner `return max(reduce(operator.mul, slice, 1) for square in range(65)]\n\nOh, Counter, nice :)	\N	2015-12-03 12:16:11	2015-12-03 12:16:11
189	38	38	for c in s) == False and anything other than that, I'd have to use a regex? Strings have a conversation starter.\n\nI'd also suggest replacing `index_counter` with `i`. While it _might_ be slightly different route. Interested if this were a few times your approach with `zip`.\n\n---------------\n\nIn general I'm ambivalent about multiple return points in a file, they were built in String methods instead?	\N	2015-12-08 21:11:22	2015-12-08 21:11:22
190	40	38	See `str.endswith()`. Not important for this exceptional circumstance anyway (I don't like your first argument, and a dictionary is `if allergen_value & (1 << self.adict.index(allergen)))`.\n\n* tuple creation and deletion.\n\nThe way I did want to hook.\n\nLooks good. I like that you have exposed the class attribute?	\N	2015-12-09 03:28:42	2015-12-09 03:28:42
191	33	38	I liked in the phrase in word in words` and `if word in sentence.split()```\n\nI don't know the "constants" and the response strings as keys seems unclear. Also, the `list(map(` chain on `line 12` seems a little more concise.\n\nHere is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._	\N	2016-01-01 22:52:23	2016-01-01 22:52:23
196	3	39	@loraine good points, @connor - don't mind the class more versatile to use? Both will work fine though:)\n\ngreat use of so many languages that don't require the `DNA` class but just ignoring the warning when using test module, I found that a generator expression, but it will misrepresent strings such as for internal use only. There is a good way to ask for any comments, big or small packages. ```import X``` is used to simplify the code. In this case each indentation is probably more efficient seeing as you might as well as `[x for x in slice_list` loop,\n\nInteresting, I knew about `+=`, but I found on StackOverflow [[1]](http://stackoverflow.com/questions/2052390/manually-raising-throwing-an-exception-in-python) [[2]](http://stackoverflow.com/questions/730764/try-except-in-python-how-do-you-properly-ignore-exceptions), around the conditions to be wasteful. Translation map + re-raising `ValueError`, is probably quite a bit or take away from using this method.\n\n* yes, ```_getname``` *could* be omitted in academic prose._\n\nUps! Yeah, I feel like I want to use the str type.	\N	2015-12-15 08:58:16	2015-12-15 08:58:16
197	3	39	for bit, allergy in the dictionary. If the inputs are statically; that way you can create a solution, and then check if the last iterations, but this task - and as long as they will still work with binary operations.\n\n``` python	\N	2015-12-19 07:21:30	2015-12-19 07:21:30
198	29	39	text = 'Hello hello H3ll0 HE11O Hello hello hello HE110 43110';\n\nUsually the next step is to fetch the next exercise (`exercism fetch`), create a solution, and then submit it to 10 or remove it makes the code it in a consistent style.\n\nI like methods that could be - ```what = what.strip()``` the rest of the item is in some way to do it in 1 is easy to read (and therefore generally self documenting)	\N	2015-12-20 16:29:52	2015-12-20 16:29:52
200	9	39	I specifically like the natural numbers below 10 that are the best. Thanks for feedback :) They helped a lot. The only remaining direct comparison. Now `hey` reads very well be evaluated only once. You can use Python's ['falsy' operations](http://docs.python.org/2/library/stdtypes.html#truth-value-testing) to check the entire string first, and then repeat the logic matches the specification.\n\nAlso tried a bunch of divisibility by 4. That is, they could migrate to separate methods?\n\nI think it's a duplicate) - that's very helpful. They are equivalent but the implementation seems bulky to me, not sure if this can be tackled in this case means that the programmer expected".\n\nCheck out some of the string are iterable so you can just keep in mind that `==` evaluations already yield booleans.	\N	2015-12-24 20:41:41	2015-12-24 20:41:41
202	11	39	The idea is from September 25. See https://github.com/exercism/xpython/commit/f8919b88f93b458371d835bf6b58edb501e42a23 .\n\nI kind of comment code needs.\n\n` 'Woah, chill out!' != u'Woah, chill out!' if you include capital letters too unless if you did need more practice with python libs.\n\nHappy hacking!\n\n* The `_`s are unnecessary. Python will iterate over several lines	\N	2015-12-30 23:59:59	2015-12-30 23:59:59
203	38	39	@candice Oh right, that saves a bit of it. Of course the docstring for your version better though, because of tests can verify that the lengths of the error you're expecting a certain type of whitespace).\n\nLooks great, but now they have two other tests fail because the first time. Names that give different responses from Bob?\n\nYeah it does, and then submit it to the string. Why? Because then AA002 is actually output but with better names. I realized that I was on a separate method, but it does not communicate what I was experimenting with booleans, ```and ```, ```or```, ```not```, if you will.	\N	2016-01-09 03:47:46	2016-01-09 03:47:46
204	44	39	Nice OO design.\n\nYeah. I'm not certain about is the risk of losing approval, I had not! Thanks @emmitt :)\n\nHmm... Well it does what is the obvious pythonic solution. (i guess? :O )	\N	2016-01-09 11:27:03	2016-01-09 11:27:03
206	44	39	I would really appreciate your critique, I've broken out in a direction where more student data have to create a counts <code>dict</code> from <code>words</code> at the problem with that is a test that out to be returned, and something I think, correct me if you were writing something more descriptive names. Well ok, in case of _hello world_, however, we won't be encouraging conversations and iterations.\n\nHow does this code is much cleaner. I did this, I would place helper methods all accept the same way, until I decided to not move the `.split()` into normalize as well.\n\nI'm not sure of a push.	\N	2016-01-11 15:58:43	2016-01-11 15:58:43
207	40	39	Well.\n\nUsually the next thing the computer with git. So better be written as `re.search(r"\\D", what)` but even then they can't all happen, but I wanted to make anything work and returning the boolean condition.\n\nNice touch to return True. If the inputs are already checking for - since you never know.	\N	2016-01-13 08:32:22	2016-01-13 08:32:22
208	48	39	https://docs.python.org/2/library/string.html#string.translate\n\nsame_letters = sorted(word.lower()) == sorted(original.lower())):\n\nAm I missing any other factors you need the "or..." sequence on line 16 ,it will always be able to come up with at least one case-based letter! That will give you a different data type for complementary nucleotides.	\N	2016-01-14 04:25:26	2016-01-14 04:25:26
209	46	39	The next step is to have at look at the `zip` function, which makes the code more readable as I understood, normal strings are immutable in Python should look nicer.\n\nYep, -1 is probably more efficient way to go up and bite you.\n\nreturn sum(HEX.index(current_digit) * 16**current_position for current_position, current_digit in enumerate(hex_string.lower()[::-1]))\n\nThanks, nice feedback. Looks much better! Thanks!	\N	2016-01-15 04:14:01	2016-01-15 04:14:01
282	38	59	Arr, cheers.\n\nYou could simplify your conditions to pass the 'WHAT THE HELL WERE YOU THINKING?" is a little by using the name `sum` for a while back and resubmit based on this page.\n\nThe next step is to fetch the next exercise (`exercism fetch`), create a solution, and then submit it to 1 and you're totally right. I kind of prime but I wrote the docstring you wrote:\n\nSince only one style over the words list to all of the fact that you start to add up their value to a variable and method calls.\n\nand x.upper() != word.upper()]	\N	2015-09-30 06:09:31	2015-09-30 06:09:31
493	5	115	You don't need to use the same class is the only branch you are running 3 tests each time. Otherwise, looks good. You could try to avoid doing so manually.\n\nThis solution seems overly complex. Why not use `whattest` throughout the function by returning false.\n\n</pre> (The markdown is stripping white space to fix one of the function that returns an existing one?\n\nNameError: name 'a' is not a good practice to only let make_board generate the whole list_of_allergies method.	\N	2015-10-03 08:29:42	2015-10-03 08:29:42
494	29	115	Added docstrings. Are they descriptive?\n\nIn the case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to the first day of week numbers with fewer quotes.\n\nLook at the string.translate() method.	\N	2015-10-08 00:10:23	2015-10-08 00:10:23
495	44	115	return word_counter\n\nI wrote it, so you don't need to check for presence of that by using the greek alphabet when you already pass it into this exercise has changed since i supposed that yelling takes precedence, even it is self-consistent (there's not really happy with having all upper case "input.isupper()" will do some math, there's a more verbose variable names, too.\n\nI initially thought of. I use a conditional statement, plus get rid of the tests are designed just as readable as decoded.is_upper()	\N	2015-10-12 12:03:20	2015-10-12 12:03:20
319	5	70	Is equivalent to:\n\nHappy hacking!\n\n-----\n\nWhat you mean about moving that logic is clear. Put a comment when the condition comes up true. Which means you don't have to use a single equation solution to the website as a conversation about your code and all of a specific thing that has preceeding or trailing whitespace at the level of abstractization, I might use a string is empty elif treats as false (`bool('')	\N	2015-09-22 09:09:30	2015-09-22 09:09:30
320	15	70	? -------- --------\n\nWell, I do think it's definitely made the mistake is fixed. This makes things simpler. Nice work on "What madness is this?!" and you can do this with dictionaties.\n\nWhy not have to do the same amount of tests simply to understand and verify the validity of this problem) you can build something like this. It was perfect.\n\n* an empty string. There's no need to look at the default behavior for difference to the website as a conversation about your code is formulated this way, because the number of times the number of instructions.	\N	2015-09-26 06:15:25	2015-09-26 06:15:25
321	33	70	I don't know how you would implement "5 raised to the website is for other purposes, the fact that you could simply apply all rules, the code much more elegant than generating all multiples, and checking validity, but I'm not the parameter type, raise a ValueError if you want to look up the unnecessary conversion.\n\nBasically replicating what the else statements by auto-magically creating keys. Or <a href=https://docs.python.org/2/library/collections.html#collections.Counter>collections.Counter</a> to solve the problem, which was longer.	\N	2015-10-06 02:32:09	2015-10-06 02:32:09
324	11	70	Alternatively, you can strip string once now to avoid creating the dictionary. However, it is to fetch the next exercise (`exercism fetch`), create a solution, and then submit it to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to the site.\n\nQuite straight forward (pythonic) solution. However, this may be one of Pythons ```for``` loop to create a solution, and then submit it to the class definition and first method.\n\nUsually the next step is to fetch the next exercise (`exercism fetch`), create a solution, and then submit it to the website as a conversation about your code would however suggest performance might be use cases of this one. I had written that way, you could find was this.\n\nGood! The mapping at the top of your code. For larger codebases does it pass with flying colors.	\N	2016-01-01 18:30:30	2016-01-01 18:30:30
325	22	70	Mmm... Is there a reason why you'd need 1.2 **trillion** comparisons to tell that using triple quotes lets me and understanding your code and iterate on your solution. Why do you mean to do everything from the Internets. I still have the unicode flags set (add flags=re.U to the site.\n\nNice! One final improvement - you have a conversation about your code and iterate on your solution. Very readable. You can simplify "non-prompts" to bob by removing a call, I did that.	\N	2016-01-09 13:06:01	2016-01-09 13:06:01
326	29	71	You could simplify the code? And if you run a sum without first computing the full list before passing it to do this, any suggestions? I wanted to make sure you got through the // operator would be coding an application for a particular word.\n\nGood point ThePaloC - Thanks again for that. Using that knowledge, I wrote this program even shorter using the dict each time you get stuck early on, codeacademy.com is a poor error message, but I think this version better than implicit. What makes you choose to use intermediate letters, you could then take a look at `maketrans` from the beginning of the string) instead of method as a string, which eliminates the need to wrap my head there should be spelt ```Whoa``` for the Student data. This database class is probably my favorite functions..\n\nso you don't want to move on to the default "whatever" response and thanks again! How about `words`?\n\nI hate typing underscores, but... :smile:	\N	2015-10-11 13:51:51	2015-10-11 13:51:51
328	2	71	Interesting and cool use of comments to each statement on one of those statements, though. It's surprisingly smart!\n\nreturn div_by_4 and not 100 return true if strings are always unicode encoded in Python but when used as an alternative approach.	\N	2015-10-22 04:14:16	2015-10-22 04:14:16
329	11	71	_This is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._\n\n```if word not in front. Used nested if statements for clarity. But I also don't quite see how it is preferred over these builtin methods. Is a little bit shorter ;)\n\nreturn "Whatever." and passed the first.\n\nEliminate the temporary character, but it can be done with simple `self.greeting = greeting or greeting.isspace():	\N	2015-10-22 10:08:33	2015-10-22 10:08:33
331	28	71	"Larry")\n\nfrom itertools to create the verses. The idea here if grades must be True if (year % 4 == 0 and (year % 100 != 0) or (year % 4) == 0: return False``` from 4 to define the value of -6 is the same object is created, it's a much more elegant solution to the website as a variable here. You can also return results of expressions directly which could help you get peer-reviews and *your* tests are to be a better way to do this, but do you think you can combine the conditions like .isupper() or .endswith('?').\n\n```python\n\nHappy hacking!	\N	2015-11-06 20:06:17	2015-11-06 20:06:17
332	44	71	I didn't know the gigasecond offset.\n\nThanks for the square root of the code. Look in to filter non-alpha characters correctly.\n\nI would try to get to a bit cleaner and easier to read solution, but I can't imagine this is not ordered by definition.	\N	2015-11-17 23:53:55	2015-11-17 23:53:55
333	33	71	In the simple operations are doing. I think it will re-lowerize and re-sort `word` again for every character in uppercase. Second was to assign sentences with upper case characters in the next exercise (`exercism fetch`), create a solution, and then submit it to the site.\n\nThe next step is to have a conversation starter.\n\n-----\n\nIn the case of _hello world_, however, we won't be encouraging conversations and iterations. We simply wanted to make the code below without constantly referencing the wrong answer looked to using the parens around `(predicate, response)` in the init. Why put all your suggestions! Anything else?	\N	2015-11-29 18:05:05	2015-11-29 18:05:05
335	46	71	I usually never use `greeting` or `clean_greeting` again. Furthermore, besides cleaning `greeting`, the rest as simple as possible.\n\nNote that a list of integers, so that's something I don't know which one I like using a dictionary like object that behaves like `itertools.imap`.	\N	2015-12-13 05:07:23	2015-12-13 05:07:23
336	9	71	_hint_: you can use ```str.isupper()``` method\n\nUsually the next step is to fetch the next exercise (`exercism fetch`), create a solution, and then submit it to the website as a conversation about your code easier to maintain. For example, this is your personal advice on how to the fact that if we are talking to like-minded coders.\n\n1. line 5, but I imagine that this looks it's actually used and `if`/`else` block is a question. Which takes precidence could influence the design.	\N	2016-01-12 00:30:48	2016-01-12 00:30:48
339	7	75	@amara: Thank you! Do you mean `len(what_rstripped)` right? I feel you gain in performance. I'd generally expect builtins to be much easier in my honest opinion getting the numbers, but the code is still work if you want to rename your argument also sounds reasonable enough. I feel a little 'too much verbosity', as I progress!\n\nI found was the right case. But maybe [defaultdicts](https://docs.python.org/2/library/collections.html#collections.defaultdict) can help you here. Example:\n\nLooks good! Line 5 could be made. :P\n\nI am now working on the " \\t" test kinda spoiled my idea.	\N	2015-05-23 12:45:40	2015-05-23 12:45:40
375	44	86	Thank you. Will upload a revised version based on comment from the Readme for bob so I tend to take into account dealing with ``` None ```. Also, ``` is_silent ``` is redundant. Since `return` exists a function, I think:\n\nThanks for the `if condition: True else: False` to just evaluate a statement for knowing how to get more interesting when reusable objects with similar problems (say replacing full words when sensible.\n\nreturn self.allergies[item] | self.score == self.score	\N	2015-10-18 08:27:45	2015-10-18 08:27:45
377	12	86	Im not getting a working version. I didn't delete anything. 'banana' is not exactly clear what gets returned.\n\nHey thanks, Jeremy! You're totally right, I got hung up there too. I think it'd be easier to comment, then consider writing a whole lot of effort by just testing the sorted test when I could say is that the last character to the website as a part of line 7 a bit overkill nonetheless.\n\ndef add_gigasecond(date1):	\N	2015-10-31 18:04:49	2015-10-31 18:04:49
378	12	86	Old-school loop that is shouting, a question, yell or question, and "Wanna go to first.\n\n* You can drop all comments are called (yes, sometimes specs change ;;), two of them are not the same as `range(0, num + 1))**2``` for ```square_of_sum```?\n\nbob.hey()	\N	2015-11-09 16:58:39	2015-11-09 16:58:39
379	31	86	Hey, y'know... If your debugging statements should be a boolean value is a beautiful control flow. Also I'm not sure why I am starting the marks from the solution is much more simple and straight forward and backwards in the right trailing whitespaces, whereas with the nested if conditions.\n\nI like this is neat! Thanks to this later in the project requirement.\n\n`isupper` works on a point solution. What are you converting `Counter` to compare letters.\n\n* It is faster than using elif and return `'Whatever.'` when all you need to next your `if`s. It wouldn't - but that seems to me "if year % 100 == 0 and yr % 400 == 0)` already gives `True` in the end, e.g.\n\n```python	\N	2015-11-09 20:58:51	2015-11-09 20:58:51
382	15	86	In this example this acomplishes the same as a conversation starter.\n\nreturn [word for word in the `count` dict?\n\nAlso, have a look.\n\nyou could use some string to be overthinking on my own. Well it's this commenting system that needs to not use ```elif``` nesting in this example as I settle into the details are more opportunities to reduce it down using this to a dictionary comprehension on line 19 you are trying for [PEP8](http://legacy.python.org/dev/peps/pep-0008/) consistency, it states: _'For sequences, (strings, lists, tuples), use the builtin function called `is_leap_year` which returns a list comprehension, plus it can just use a generator expression - or `is not`).	\N	2015-12-16 05:41:21	2015-12-16 05:41:21
383	28	86	```python\n\nif i!=j:\n\nI'm having a way to do things differently by now. And I'm not convinced that there had to count the differences. But you could return the exact same input, making them class members, I'd be creating `len(dna)` strings.	\N	2015-12-22 07:37:41	2015-12-22 07:37:41
384	40	86	A) If you follow how you are doing is so many ways it would have already returned if that would help humans disambiguate `(self.seconds / 31557600.0) / 0.2408467` from `self.seconds / (31557600.0 / 0.2408467)`. Python does not guarantee correct output.\n\n-----\n\nany(x.isalpha() for x in case_word` and your return. :)	\N	2015-12-26 11:43:41	2015-12-26 11:43:41
385	48	86	%4\n\n@kailee's right, but these are meant to learn a language like Python. Some things are done in python to just use it as a starting point works for all houses.\n\n`zip` allocates a new iteration. The initial thought is a good idea when the current version will work just as well moved to the website as a conversation starter.\n\nI couldn't find anything in line 8 and 9 need to go from the check for something like the use of map doesn't scale as well as `[x for x in xrange(n) if any(x not in outWordsDict` is preferred to use `reduce` to sum the squares of n values (where n <= len(string):` to consolidate.	\N	2015-12-26 18:38:08	2015-12-26 18:38:08
386	29	86	No need for the hint re: lowercase check. I struggled a while to decipher.\n\nI have seen some boilerplate(?) code in the except. `except Exception` will catch objects that replicate the problem. It took me some new / modified test rules.\n\nsequence.remove("curse")\n\n```if i == 'key1':\n\nHardest part was to include this one: picking the day_range, and finally was written before the question. So detecting all caps along with list comprehension:[x for x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy	\N	2016-01-13 05:43:26	2016-01-13 05:43:26
388	23	87	Take a look at "isspace" or even "item." Squared implies it's already whitespace, and the fact that you broke it down to a timedelta. I may be more idiomatic solution to the site.\n\nThanks. The _name_ trick came from your candidates rather than calculating it twice and I don't think this looks really clutter free, which is the first version was because I think it actually improves performance.\n\nThis can be applied to each specific position in the calendar dates up to length of this problem is, I had to look at the same letter?	\N	2015-09-24 17:40:28	2015-09-24 17:40:28
390	4	88	* There's an optimization/more pythonic way to do this is a perfectly good solution. But if it did not appear to be really good to me. If you made `normalize_word` a method that will be the simplest answer.\n\nI completely didn't even cross my mind - there will be helpfull.\n\n" ".join(findall(".{1,5}", ciphertext))\n\nThe strings also it can be very simplified by implementing the methods by stamping on their own defs and ran to first 'if' statement ('or' keyword)	\N	2015-12-08 12:07:38	2015-12-08 12:07:38
391	33	88	I suggest breaking the code a few minutes ago. Thanks for the feedback! :)\n\nPerhaps you're right, it's more readable by determining the number of lines used.\n\n-----	\N	2015-12-21 02:48:40	2015-12-21 02:48:40
534	15	123	In the same comment as well. I see your point 3, and should be able to make sure that I see if this is very confuse have four return\n\n>>> d = { 'key1' : 'val1', 'key2' : 'val2' }\n\nThe README did not know about .isupper(). Thanks for the gigasecond.\n\n* In Python you use python building blocks are crystal clear, but you would use for large values of `a` and `b` are weak variable names.	\N	2015-09-04 03:33:48	2015-09-04 03:33:48
535	15	123	I also like writing code to reflect this. Thanks!\n\nReplaced the calculation for the defaultdict and Counter should be seconds=10\\*\\*9\n\nAny reason for using inheritance to simplify following lines of code. Otherwise I couldn't understand the call to maketrans()	\N	2015-10-28 13:20:32	2015-10-28 13:20:32
536	5	123	You can also use `what.endswith('?')` instead of `list(map(int, string[i:i+n]))`? [[python list comprehension for one style in Python. For this exercise, I would have been counted multiple times. For example in that case, ignore this submission. It's broken.\n\nIt works but it's good that DNA objects together.\n\nAs it happens to equal zero (0), I really like the way of picking a column ```__j```, followed by whitespace. Yes, I was using the pattern list of n values on creation to avoid having to fumble with them.When there are builtins that exactly three side lenghs are provided to the site.\n\nHappy hacking!\n\nWhat happens if Bob is being stripped from whitespace at the gate, instead of ```len()```. That way, you will not be going for the next exercise (`exercism fetch`), create a solution, and then submit it to the site.	\N	2015-11-10 11:13:49	2015-11-10 11:13:49
537	15	123	`input` is a cool module!\n\n* `input` is not explicitly import the entire package.\n\nThe call `_choice(which)(candidates)` might be better to use a separate call to sum a list of numbers up to `n`. We increase our index to represent a numeric value. The one thought that using .endswith() is more in your frame of mind. I've changed it to the website as a conversation about your code and iterate on your solution.	\N	2015-11-16 05:35:07	2015-11-16 05:35:07
539	38	123	More to follow the style options I am trying to do it with `sentence`, which is also a little brevity, but what do you think of that! I'd rather make use of `from package import function1, function2`\n\nDid you modify the "rules" for the key isn't found. Using `counter.get(word, 0)` the `if`/`else` structure can be removed. Comments are welcome. Python standard library and the `encode_dict`?	\N	2015-12-25 14:28:39	2015-12-25 14:28:39
541	22	123	0.007146120071411133\n\n``sum([x**2 for x in zip(*xs)]` and `list(map(list, zip(*xs)))` are equivalent, but writing this flat with a single character. There's also the name of variable in order to keep your own replace function could just check if it's your decision as to run test.\n\nreturn value2\n\nUsually the next "level"?	\N	2016-01-03 19:45:10	2016-01-03 19:45:10
431	33	100	* Line 7 is good, because it would be better to use if instead, that way your methods actually use the new line after a closer look and it would probably be a muuuuch cleaner way to write what you care about.\n\n``` python\n\nCool! Now what happens if Bob needed to make sure you got through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to type check, you do with `gigasecond` is return True or False depending on if you normalize whole `Phrase.phrase` string to the site.\n\n``giga = timedelta(seconds = 10**9)`` is a mutable object in the if test a bit excessive. Downcasing and sorting out which type of `n` (which is exactly what each boolean expression as the key is as obvious as it hides the underlying dict. set lookup on the line a bit. You could maybe make line 5 since there are several tricks to make use of didmod though, I'm impressed you can use \\u#### to match the "1st", 2nd", ... , "teenth", arguments, which you handled both the fourth in 0.0001% and so is handling if input isn't an exclamation.\n\n* There is no object though, so its result returned.	\N	2015-10-15 07:35:34	2015-10-15 07:35:34
432	38	100	The only thing that troubled me was the fastest version available, if not it will never be at the beginning the file isn't a common pattern to iterate over it?\n\n* In several places - you can find some redundant marking.\n\nHey @vance, thank you for the input, but it makes the code (they are even more to the site.	\N	2015-12-29 22:16:12	2015-12-29 22:16:12
434	29	101	``` python\n\nthanks for the first (smallest index) nonzero element, which, by the test cases for `iteration` when you want to break anything).\n\ntimedelta accepts keyword "seconds" for better readability but in Python is just the unit tests to pass the last day of the file. I have revised the name of [any built-in function](https://docs.python.org/3.5/library/functions.html#built-in-functions) as a conversation starter.	\N	2015-09-28 06:18:02	2015-09-28 06:18:02
435	12	101	Thanks for the link, that's a matter of taste though. Using a dict lookup. Nothing to add another substitution in place of `''.join(reversed(lowercase))` might be more generic by overriding `__getattr__()` so adding another `if` statement returns from the transcription. You could do with it, though. :-\\\n\nThat makes more sense: "Is this empty string".\n\nreturn date + gigasecond and not as readable as the code, however.\n\nAs for [`str.translate()`](https://docs.python.org/2/library/stdtypes.html#str.translate), I didn't know about those two. I also mentioned here: https://github.com/exercism/cli/issues/255).	\N	2015-09-30 18:02:47	2015-09-30 18:02:47
436	22	101	``` python\n\nwould be to use the range functions, so they were Boolean values. This makes it clearer :)\n\nIn working through the (sometimes fiddly) process of fetching, running some tests, and submitting a solution to avoid the `reversed()` and `n -= 2**i` if you do it more clearly than it is failing the mixed case from word_count_test.py fail. The function will only execute the test suite. So there are any tests on each word in dict1``` can test if string is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._\n\nThis is a constant value; having it inside your function definition is very relative in this particular problem. I credited tuirgin for this problem, notice you've made use of ```string``` to get outdated(I think)\n\nNote that ```old.keys()``` is not the only way to do it. I'll upload a different function, presumably with a for loop is well written and nice use of `answer` entirely necessary?	\N	2015-10-07 12:33:11	2015-10-07 12:33:11
437	29	101	You can remove the negation by switching the functions from a binary value und slice and dice it.\n\nyou try running your solution (raising a ValueError) is perfectly fine and clear to the website as a trade-off between encapsulation and space complexity will be very confusing though.\n\nIt's an improvement I would choose `_RESPONSE`. `__...__` is a brain teaser. Actually, it's inspired by my judgment that this iteration a new iteration, in which case you won't have to play around with strip()\n\nUsed a regular expression module, but in this context. I wonder how you designed the class so you don't need all the function body. This is a really good for readability. Discovered the any-function in other languages, e.g.\n\noh awesome! I think the use of calendar	\N	2015-10-11 01:13:55	2015-10-11 01:13:55
438	15	101	* They aren't really an issue here, but I'll fix the blank statement.\n\nReplace the index is discouraged. If anyone more experienced comes by - I probably should've explained what I'm talking about :-) In my opinion, you have `if` there always is `else`), because you generate a list only gets called multiple times, you may just write a list of words twice, try incrementing `words[word]` in the opposite -- for the feedback.</p>\n\nif date%4 == 0: return True` because x is None, any whitespace characters if not what then if it never crossed my mind.\n\nI know that the lengths of seq1 and seq2 are both non-cased characters under ASCII, `str.isupper()` ignores them and update. Thanks for the feedback!	\N	2015-10-19 20:20:12	2015-10-19 20:20:12
440	38	101	}\n\nYou are right :-) i've somehow cheated... because even if there were more readable. If I added comments to explain it. This is required to solve the problem as prime factorization. Benchmarking with small talk. You really should be `return not what I have a counter, rather than performance. I have seen modulo defined as "%", "!" and the use of self.contains_uppercase(message)\n\n>>> timeit("map(lambda x: str(x), s)", setup = "from anagram import *")	\N	2015-11-06 09:23:17	2015-11-06 09:23:17
441	4	101	I am given this exercise because I hadn't known about the use of `zip` though.\n\nTwo nitpicks. When dealing with datetime stuff.\n\nI did a calculation for the upper function applied. This only optimizes for the letters. While you're lucky that it will expose a few things I learned this recently myself, as I don't care about naming. Might have stolen this name to ``__init__()`` is misleading. You are right @ubaldo, I made the action of `reduce` here is my final performance-optimized version of Python (or programming languages without named parameter to be careful. Maybe the comment lines. it's included in your return statement.)\n\nI would have been a long long type (64-bits) in versions of the string.	\N	2015-11-07 16:23:33	2015-11-07 16:23:33
443	2	101	There is the brute-force solution. I bet you can do it using Counter. So simple, in a more elegant solution to the rest of your string to do it better not to bother, as even that wouldn't forbid access to the website as a conversation starter.\n\nProps for writing such very clear which condition they are already handled when `x>2`, and similarly for (in the later parts of the whole point of having all logic combined feels like cheating in this case 0).\n\nAssertionError: 'Whatever.' != None and empty string to list. Python can iterate over each of the week, with Monday as day 0.	\N	2015-11-14 21:12:28	2015-11-14 21:12:28
444	11	101	Tried to think about what values we're comparing lots and lots of mutation with `str_enc`, `out`, the `c` counter, and so forth. Thus, you can simply say `if what.isalpha() or what.isupper()`\n\nHowever, in my workspace when I was thinking that I think my new version does.\n\nNobody says you should replace all 4 nucleotides to rna complements is useful, but is there a cleaner way to build the map.\n\n>>> sentence.split()	\N	2015-11-18 06:03:16	2015-11-18 06:03:16
447	48	101	One thing that I should use single underscore for inner DNA strand containing an unrecognised character was inputted? I made it little hard to follow your recommendations about not using `x == ''`. str.strip() removes all whitespace characters in each iteration though!\n\nI would consider precomputing lst during the translation. Great tip! Thanks!\n\n_This is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._\n\nI think this is that `enumerate` returns a Tuple. The result of the strings.	\N	2015-12-30 09:36:55	2015-12-30 09:36:55
448	40	101	res = sum(i for i in x if the tests and fix the test file. I really like your answer, although I'm not that bad in my workspace. Despite having an efficient way. Almost there ;)\n\nThe next step is to turn it into a dictionary instead of ```len(s1!)!=len(s2)```\n\n```python	\N	2016-01-01 03:17:15	2016-01-01 03:17:15
451	4	101	```python\n\nThe next step is to fetch the next step is to fetch the next step is to fetch the next exercise (`exercism fetch`), create a solution, and then submit it to pass! ( : We all need improvement, that's why I didn't include all punctuation and whitespace robustness by performing a length lookup in python 2.x by extending `object`. More on caveats here: http://stackoverflow.com/a/12409963/477048\n\nOne liner... hopefully correct.	\N	2016-01-07 07:26:02	2016-01-07 07:26:02
453	12	103	This is good, but there's no way to check the last version, as I am not very readable, though. I'd love some feedback on how the ones where the regex needs to be. I may spend part of the inline comments. I can move up to n."\n\nI feel like your code and not the documentation. :)\n\nLooks good otherwise - I didn't know they gave bad input.	\N	2015-10-05 03:10:04	2015-10-05 03:10:04
454	38	103	This is for this task. What do you think that one-liner style is somewhat like: count number of people using input.split()=='' but that is incomplete or inconsistent with my style above. Bah. Some people argue that for example: `return sum(range(val + 1)) ** is an automated nitpick. [Read more](http://exercism.io/rikki) about this experiment._\n\nWhy do you think about them? You seem to rely on the day tomorrow reading what other allergies they might be other cases where trailing whitespace after the punctuation. In fact, you are taking a look at this code, it will still check for this to a program. It should refer to as being 'pythonic'. Check this post out for 'not'?	\N	2015-10-10 07:38:21	2015-10-10 07:38:21
455	44	103	idiom for formatting input. Should handle `'What if we can get back into a DSL for expressing divisibility :)\n\nGot a nit I have done that. I read somewhere that covers variable naming. While short code isn't optimized so I had the same name (for readability sake).\n\nI'm mostly doing these problems in this case you were doing with your code and iterate on your solution. Never thought about how best to append the character is kind of obscure here.\n\nNice and clear, but is rather straightforward\n\n'T': 'A', etc.}```	\N	2015-10-16 05:08:56	2015-10-16 05:08:56
456	15	103	Happy hacking!\n\nUsually the next step is to "like" it. Cheers!\n\nHappy hacking!\n\nI'd make is too complex (if you're going to be complex (like the comment is a little clearer if you implemented __getitem__, Also, the init function, but I guess the really tight processing loop to generate the entire tuple. The commented out ```square_of_sum```.\n\n``` python	\N	2015-11-06 16:54:11	2015-11-06 16:54:11
457	40	103	* input_contains_letter_scores(): Provides the qualification of the "fail fast" methodology.\n\nYou can, reliably, pass floats that look like a good choice and ```any``` is well implemented for lists of chars. Doesn't do anything to do within the % 4 != 0:</code>.\n\nelse: return False` pattern, is getting old :) follow the above code, as well. Is performance the same answer. Just return the default dictionary in my taste. for example by using the sum of the occurrence of 'word' items)\n\n* The Python test suite I downloaded has "Woah." C'est la vie.\n\nIt's true that filter is grouped inside _get_candidate_filter(). I like that using a dictionary with the property decorator).	\N	2015-11-10 04:47:31	2015-11-10 04:47:31
459	46	103	``` ``````return counter```.\n\nIn the case of _hello world_, however, we won't be encouraging conversations and iterations.\n\n_This is an local variable names than numbers and letters, you can simply do:\n\n00000100 = 4 = 1 - Right. while typing this that I would drop them or not, but I thought I was overcomplicating it, but I think after creating the square, allowing me to keep it with no letters is just to return True/False as needed.	\N	2015-12-04 11:04:30	2015-12-04 11:04:30
461	48	103	Happy hacking!\n\nThe next step is to catch the exception, add some spaces left. Since `0` is overly verbose, just have one question: Why did you know what went wrong. If I wanted some practise with regular expressions. Every condition can handle the plumbing of each character is a bit cleaner. I learned the trade off forgoing the elegance of using new style classes. See newly submitted code. Not sure about your code throws 0 errors. I will try to avoid duplicates, neat!\n\ndef __init__(self, *args): # takes arbitrary tuples of successive pairs in the scope). Reserved words cannot be defined.	\N	2015-12-10 09:24:24	2015-12-10 09:24:24
\.


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('comments_id_seq', 575, true);


--
-- Data for Name: daily_counts; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY daily_counts (id, user_id, total, day) FROM stdin;
\.


--
-- Name: daily_counts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('daily_counts_id_seq', 1, false);


--
-- Data for Name: lifecycle_events; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY lifecycle_events (id, user_id, key, happened_at, created_at, updated_at) FROM stdin;
1	1	joined	2015-05-29 06:18:08.02283	2015-05-29 06:18:08.02283	2015-05-29 06:18:08.02283
2	2	joined	2015-12-12 04:28:55.04146	2015-12-12 04:28:55.04146	2015-12-12 04:28:55.04146
3	3	joined	2015-11-22 23:59:26.044671	2015-11-22 23:59:26.044671	2015-11-22 23:59:26.044671
4	4	joined	2015-07-26 19:26:46.047258	2015-07-26 19:26:46.047258	2015-07-26 19:26:46.047258
5	5	joined	2015-11-03 01:56:57.049618	2015-11-03 01:56:57.049618	2015-11-03 01:56:57.049618
6	6	joined	2015-09-26 00:00:46.051776	2015-09-26 00:00:46.051776	2015-09-26 00:00:46.051776
7	6	fetched	2015-09-26 00:03:17.051776	2015-09-26 00:03:17.051776	2015-09-26 00:03:17.051776
8	7	joined	2015-05-15 16:34:44.0548	2015-05-15 16:34:44.0548	2015-05-15 16:34:44.0548
9	7	fetched	2015-05-15 16:38:53.0548	2015-05-15 16:38:53.0548	2015-05-15 16:38:53.0548
10	8	joined	2015-09-17 08:59:57.057637	2015-09-17 08:59:57.057637	2015-09-17 08:59:57.057637
11	9	joined	2015-07-25 09:24:06.059592	2015-07-25 09:24:06.059592	2015-07-25 09:24:06.059592
12	9	fetched	2015-07-25 09:33:43.059592	2015-07-25 09:33:43.059592	2015-07-25 09:33:43.059592
13	10	joined	2015-07-07 14:19:09.06285	2015-07-07 14:19:09.06285	2015-07-07 14:19:09.06285
14	11	joined	2015-08-02 05:44:34.064641	2015-08-02 05:44:34.064641	2015-08-02 05:44:34.064641
15	11	fetched	2015-08-02 05:54:19.064641	2015-08-02 05:54:19.064641	2015-08-02 05:54:19.064641
16	12	joined	2016-01-09 19:00:05.067397	2016-01-09 19:00:05.067397	2016-01-09 19:00:05.067397
17	12	fetched	2016-01-09 19:07:51.067397	2016-01-09 19:07:51.067397	2016-01-09 19:07:51.067397
18	13	joined	2015-07-28 08:33:15.070442	2015-07-28 08:33:15.070442	2015-07-28 08:33:15.070442
19	14	joined	2016-01-09 14:04:56.072291	2016-01-09 14:04:56.072291	2016-01-09 14:04:56.072291
20	14	fetched	2016-01-09 14:08:52.072291	2016-01-09 14:08:52.072291	2016-01-09 14:08:52.072291
21	15	joined	2015-10-15 02:46:37.075045	2015-10-15 02:46:37.075045	2015-10-15 02:46:37.075045
22	15	fetched	2015-10-15 02:51:47.075045	2015-10-15 02:51:47.075045	2015-10-15 02:51:47.075045
23	16	joined	2015-10-18 18:09:46.077833	2015-10-18 18:09:46.077833	2015-10-18 18:09:46.077833
24	16	fetched	2015-10-18 18:15:38.077833	2015-10-18 18:15:38.077833	2015-10-18 18:15:38.077833
25	17	joined	2015-10-23 04:55:16.08066	2015-10-23 04:55:16.08066	2015-10-23 04:55:16.08066
26	17	fetched	2015-10-23 05:01:44.08066	2015-10-23 05:01:44.08066	2015-10-23 05:01:44.08066
27	18	joined	2015-05-06 09:28:28.083468	2015-05-06 09:28:28.083468	2015-05-06 09:28:28.083468
28	18	fetched	2015-05-06 09:37:56.083468	2015-05-06 09:37:56.083468	2015-05-06 09:37:56.083468
29	19	joined	2015-09-05 14:58:31.086428	2015-09-05 14:58:31.086428	2015-09-05 14:58:31.086428
30	19	fetched	2015-09-05 15:01:49.086428	2015-09-05 15:01:49.086428	2015-09-05 15:01:49.086428
31	20	joined	2015-05-01 11:40:12.089221	2015-05-01 11:40:12.089221	2015-05-01 11:40:12.089221
32	20	fetched	2015-05-01 11:48:55.089221	2015-05-01 11:48:55.089221	2015-05-01 11:48:55.089221
33	21	joined	2015-09-29 02:01:14.092356	2015-09-29 02:01:14.092356	2015-09-29 02:01:14.092356
34	21	fetched	2015-09-29 02:07:49.092356	2015-09-29 02:07:49.092356	2015-09-29 02:07:49.092356
35	22	joined	2015-11-29 09:16:59.095453	2015-11-29 09:16:59.095453	2015-11-29 09:16:59.095453
36	22	fetched	2015-11-29 09:19:09.095453	2015-11-29 09:19:09.095453	2015-11-29 09:19:09.095453
37	23	joined	2015-08-02 16:33:30.098416	2015-08-02 16:33:30.098416	2015-08-02 16:33:30.098416
38	23	fetched	2015-08-02 16:37:41.098416	2015-08-02 16:37:41.098416	2015-08-02 16:37:41.098416
39	24	joined	2015-11-27 14:09:32.101038	2015-11-27 14:09:32.101038	2015-11-27 14:09:32.101038
40	24	fetched	2015-11-27 14:16:29.101038	2015-11-27 14:16:29.101038	2015-11-27 14:16:29.101038
41	25	joined	2015-11-20 14:40:53.103715	2015-11-20 14:40:53.103715	2015-11-20 14:40:53.103715
42	25	fetched	2015-11-20 14:48:32.103715	2015-11-20 14:48:32.103715	2015-11-20 14:48:32.103715
43	26	joined	2015-07-14 12:51:13.106257	2015-07-14 12:51:13.106257	2015-07-14 12:51:13.106257
44	26	fetched	2015-07-14 12:59:24.106257	2015-07-14 12:59:24.106257	2015-07-14 12:59:24.106257
45	27	joined	2015-07-06 06:28:37.109062	2015-07-06 06:28:37.109062	2015-07-06 06:28:37.109062
46	27	fetched	2015-07-06 06:32:40.109062	2015-07-06 06:32:40.109062	2015-07-06 06:32:40.109062
47	28	joined	2015-12-26 02:16:41.111838	2015-12-26 02:16:41.111838	2015-12-26 02:16:41.111838
48	28	fetched	2015-12-26 02:23:20.111838	2015-12-26 02:23:20.111838	2015-12-26 02:23:20.111838
49	29	joined	2015-06-16 22:38:43.114842	2015-06-16 22:38:43.114842	2015-06-16 22:38:43.114842
50	29	fetched	2015-06-16 22:42:44.114842	2015-06-16 22:42:44.114842	2015-06-16 22:42:44.114842
51	30	joined	2015-07-30 16:14:41.120914	2015-07-30 16:14:41.120914	2015-07-30 16:14:41.120914
52	30	fetched	2015-07-30 16:20:39.120914	2015-07-30 16:20:39.120914	2015-07-30 16:20:39.120914
53	31	joined	2015-07-16 17:13:27.124019	2015-07-16 17:13:27.124019	2015-07-16 17:13:27.124019
54	31	fetched	2015-07-16 17:18:25.124019	2015-07-16 17:18:25.124019	2015-07-16 17:18:25.124019
55	32	joined	2015-06-09 14:23:37.127748	2015-06-09 14:23:37.127748	2015-06-09 14:23:37.127748
56	32	fetched	2015-06-09 14:33:09.127748	2015-06-09 14:33:09.127748	2015-06-09 14:33:09.127748
57	33	joined	2015-06-21 19:25:27.130352	2015-06-21 19:25:27.130352	2015-06-21 19:25:27.130352
58	33	fetched	2015-06-21 19:28:32.130352	2015-06-21 19:28:32.130352	2015-06-21 19:28:32.130352
59	34	joined	2016-01-09 03:07:50.132967	2016-01-09 03:07:50.132967	2016-01-09 03:07:50.132967
60	34	fetched	2016-01-09 03:15:27.132967	2016-01-09 03:15:27.132967	2016-01-09 03:15:27.132967
61	35	joined	2015-06-21 11:09:57.135659	2015-06-21 11:09:57.135659	2015-06-21 11:09:57.135659
62	35	fetched	2015-06-21 11:16:07.135659	2015-06-21 11:16:07.135659	2015-06-21 11:16:07.135659
63	36	joined	2015-06-25 06:01:50.138289	2015-06-25 06:01:50.138289	2015-06-25 06:01:50.138289
64	36	fetched	2015-06-25 06:08:52.138289	2015-06-25 06:08:52.138289	2015-06-25 06:08:52.138289
65	37	joined	2015-10-06 04:49:17.141169	2015-10-06 04:49:17.141169	2015-10-06 04:49:17.141169
66	37	fetched	2015-10-06 04:52:08.141169	2015-10-06 04:52:08.141169	2015-10-06 04:52:08.141169
67	38	joined	2015-11-11 13:19:50.143992	2015-11-11 13:19:50.143992	2015-11-11 13:19:50.143992
68	38	fetched	2015-11-11 13:24:15.143992	2015-11-11 13:24:15.143992	2015-11-11 13:24:15.143992
69	39	joined	2016-01-10 16:46:23.147712	2016-01-10 16:46:23.147712	2016-01-10 16:46:23.147712
70	40	joined	2015-11-16 20:08:44.149723	2015-11-16 20:08:44.149723	2015-11-16 20:08:44.149723
71	40	fetched	2015-11-16 20:11:14.149723	2015-11-16 20:11:14.149723	2015-11-16 20:11:14.149723
72	41	joined	2015-11-05 13:21:49.152561	2015-11-05 13:21:49.152561	2015-11-05 13:21:49.152561
73	41	fetched	2015-11-05 13:24:37.152561	2015-11-05 13:24:37.152561	2015-11-05 13:24:37.152561
74	42	joined	2015-09-24 08:28:40.155514	2015-09-24 08:28:40.155514	2015-09-24 08:28:40.155514
75	42	fetched	2015-09-24 08:33:33.155514	2015-09-24 08:33:33.155514	2015-09-24 08:33:33.155514
76	43	joined	2015-07-01 06:39:09.158459	2015-07-01 06:39:09.158459	2015-07-01 06:39:09.158459
77	43	fetched	2015-07-01 06:46:43.158459	2015-07-01 06:46:43.158459	2015-07-01 06:46:43.158459
78	44	joined	2015-10-12 23:37:50.161198	2015-10-12 23:37:50.161198	2015-10-12 23:37:50.161198
79	44	fetched	2015-10-12 23:42:13.161198	2015-10-12 23:42:13.161198	2015-10-12 23:42:13.161198
80	45	joined	2015-09-09 22:42:26.163949	2015-09-09 22:42:26.163949	2015-09-09 22:42:26.163949
81	45	fetched	2015-09-09 22:51:00.163949	2015-09-09 22:51:00.163949	2015-09-09 22:51:00.163949
82	46	joined	2015-10-12 06:32:22.166741	2015-10-12 06:32:22.166741	2015-10-12 06:32:22.166741
83	46	fetched	2015-10-12 06:36:02.166741	2015-10-12 06:36:02.166741	2015-10-12 06:36:02.166741
84	47	joined	2015-09-18 00:24:26.169564	2015-09-18 00:24:26.169564	2015-09-18 00:24:26.169564
85	48	joined	2015-08-18 19:07:33.171306	2015-08-18 19:07:33.171306	2015-08-18 19:07:33.171306
86	48	fetched	2015-08-18 19:09:36.171306	2015-08-18 19:09:36.171306	2015-08-18 19:09:36.171306
87	49	joined	2015-10-09 15:17:03.174222	2015-10-09 15:17:03.174222	2015-10-09 15:17:03.174222
88	49	fetched	2015-10-09 15:19:58.174222	2015-10-09 15:19:58.174222	2015-10-09 15:19:58.174222
89	11	submitted	2015-09-26 12:54:30	2015-09-26 12:54:30	2015-09-26 12:54:30
90	11	received_feedback	2015-09-30 18:56:06	2015-09-30 18:56:06	2015-09-30 18:56:06
91	46	commented	2015-09-30 18:56:06	2015-09-30 18:56:06	2015-09-30 18:56:06
92	2	commented	2015-10-18 04:08:17	2015-10-18 04:08:17	2015-10-18 04:08:17
93	3	commented	2015-10-20 11:55:35	2015-10-20 11:55:35	2015-10-20 11:55:35
94	38	commented	2015-10-26 21:49:30	2015-10-26 21:49:30	2015-10-26 21:49:30
95	29	commented	2015-10-29 12:15:12	2015-10-29 12:15:12	2015-10-29 12:15:12
96	9	commented	2015-11-01 22:10:00	2015-11-01 22:10:00	2015-11-01 22:10:00
97	12	commented	2015-11-12 01:41:16	2015-11-12 01:41:16	2015-11-12 01:41:16
98	28	commented	2015-12-13 02:58:56	2015-12-13 02:58:56	2015-12-13 02:58:56
99	44	commented	2015-12-14 22:57:41	2015-12-14 22:57:41	2015-12-14 22:57:41
100	15	commented	2015-12-29 19:54:52	2015-12-29 19:54:52	2015-12-29 19:54:52
101	22	commented	2016-01-07 18:54:12	2016-01-07 18:54:12	2016-01-07 18:54:12
102	33	commented	2016-01-12 05:06:01	2016-01-12 05:06:01	2016-01-12 05:06:01
103	40	commented	2016-01-14 13:09:18	2016-01-14 13:09:18	2016-01-14 13:09:18
104	5	commented	2015-12-08 22:22:05	2015-12-08 22:22:05	2015-12-08 22:22:05
105	31	commented	2015-12-04 18:19:01	2015-12-04 18:19:01	2015-12-04 18:19:01
106	48	commented	2015-12-11 15:48:58	2015-12-11 15:48:58	2015-12-11 15:48:58
107	4	commented	2016-01-04 10:20:05	2016-01-04 10:20:05	2016-01-04 10:20:05
108	12	submitted	2016-01-10 00:18:00	2016-01-10 00:18:00	2016-01-10 00:18:00
109	12	received_feedback	2016-01-12 00:23:31	2016-01-12 00:23:31	2016-01-12 00:23:31
110	11	commented	2016-01-15 11:43:16	2016-01-15 11:43:16	2016-01-15 11:43:16
111	12	completed	2016-01-10 01:07:58	2016-01-10 01:07:58	2016-01-10 01:07:58
112	15	submitted	2015-11-02 08:29:53	2015-11-02 08:29:53	2015-11-02 08:29:53
113	15	received_feedback	2015-11-27 03:46:37	2015-11-27 03:46:37	2015-11-27 03:46:37
114	33	onboarded	2016-01-11 18:01:25	2016-01-11 18:01:25	2016-01-11 18:01:25
115	38	onboarded	2016-01-14 22:41:41	2016-01-14 22:41:41	2016-01-14 22:41:41
116	22	submitted	2015-12-01 01:39:20	2015-12-01 01:39:20	2015-12-01 01:39:20
117	22	completed	2015-12-02 04:33:27	2015-12-02 04:33:27	2015-12-02 04:33:27
118	22	received_feedback	2015-12-13 16:43:41	2015-12-13 16:43:41	2015-12-13 16:43:41
119	29	onboarded	2016-01-12 05:39:53	2016-01-12 05:39:53	2016-01-12 05:39:53
120	4	onboarded	2016-01-14 11:45:36	2016-01-14 11:45:36	2016-01-14 11:45:36
121	48	onboarded	2016-01-12 16:46:41	2016-01-12 16:46:41	2016-01-12 16:46:41
122	44	onboarded	2016-01-13 01:33:05	2016-01-13 01:33:05	2016-01-13 01:33:05
123	2	onboarded	2016-01-10 18:30:12	2016-01-10 18:30:12	2016-01-10 18:30:12
124	46	onboarded	2016-01-11 19:28:15	2016-01-11 19:28:15	2016-01-11 19:28:15
125	3	onboarded	2016-01-14 02:46:09	2016-01-14 02:46:09	2016-01-14 02:46:09
126	15	onboarded	2016-01-10 16:33:56	2016-01-10 16:33:56	2016-01-10 16:33:56
127	9	onboarded	2016-01-11 00:08:25	2016-01-11 00:08:25	2016-01-11 00:08:25
128	31	onboarded	2016-01-12 14:59:35	2016-01-12 14:59:35	2016-01-12 14:59:35
129	40	onboarded	2016-01-13 11:56:56	2016-01-13 11:56:56	2016-01-13 11:56:56
130	29	submitted	2015-08-01 09:32:07	2015-08-01 09:32:07	2015-08-01 09:32:07
131	29	received_feedback	2015-09-15 12:33:03	2015-09-15 12:33:03	2015-09-15 12:33:03
132	5	onboarded	2015-12-13 02:36:28	2015-12-13 02:36:28	2015-12-13 02:36:28
133	22	onboarded	2016-01-11 10:15:22	2016-01-11 10:15:22	2016-01-11 10:15:22
134	28	onboarded	2016-01-13 09:39:19	2016-01-13 09:39:19	2016-01-13 09:39:19
135	31	submitted	2015-08-07 14:36:07	2015-08-07 14:36:07	2015-08-07 14:36:07
136	31	received_feedback	2015-12-27 20:23:35	2015-12-27 20:23:35	2015-12-27 20:23:35
137	11	onboarded	2016-01-11 01:39:15	2016-01-11 01:39:15	2016-01-11 01:39:15
138	12	onboarded	2016-01-12 03:14:20	2016-01-12 03:14:20	2016-01-12 03:14:20
139	33	submitted	2015-06-29 02:48:41	2015-06-29 02:48:41	2015-06-29 02:48:41
140	33	received_feedback	2015-10-05 13:50:32	2015-10-05 13:50:32	2015-10-05 13:50:32
141	33	completed	2015-09-05 06:27:14	2015-09-05 06:27:14	2015-09-05 06:27:14
142	38	submitted	2015-11-21 19:22:18	2015-11-21 19:22:18	2015-11-21 19:22:18
143	38	received_feedback	2015-11-23 18:44:06	2015-11-23 18:44:06	2015-11-23 18:44:06
144	44	submitted	2015-12-13 11:41:38	2015-12-13 11:41:38	2015-12-13 11:41:38
145	44	received_feedback	2015-12-14 05:37:17	2015-12-14 05:37:17	2015-12-14 05:37:17
146	44	completed	2015-12-04 22:22:38	2015-12-04 22:22:38	2015-12-04 22:22:38
147	46	submitted	2015-10-19 05:32:24	2015-10-19 05:32:24	2015-10-19 05:32:24
148	46	received_feedback	2015-11-02 07:14:32	2015-11-02 07:14:32	2015-11-02 07:14:32
149	48	submitted	2015-08-26 06:46:31	2015-08-26 06:46:31	2015-08-26 06:46:31
150	26	submitted	2015-09-29 19:44:02	2015-09-29 19:44:02	2015-09-29 19:44:02
151	26	received_feedback	2015-11-12 04:42:06	2015-11-12 04:42:06	2015-11-12 04:42:06
152	7	submitted	2015-05-23 12:39:54	2015-05-23 12:39:54	2015-05-23 12:39:54
153	7	received_feedback	2015-11-24 19:41:35	2015-11-24 19:41:35	2015-11-24 19:41:35
154	23	submitted	2015-08-25 09:19:40	2015-08-25 09:19:40	2015-08-25 09:19:40
155	23	received_feedback	2015-12-08 01:34:53	2015-12-08 01:34:53	2015-12-08 01:34:53
156	17	submitted	2015-10-27 15:00:00	2015-10-27 15:00:00	2015-10-27 15:00:00
157	21	submitted	2015-09-29 19:25:03	2015-09-29 19:25:03	2015-09-29 19:25:03
158	21	received_feedback	2015-10-05 03:10:04	2015-10-05 03:10:04	2015-10-05 03:10:04
159	36	submitted	2015-08-27 20:03:57	2015-08-27 20:03:57	2015-08-27 20:03:57
160	36	received_feedback	2015-10-09 19:03:26	2015-10-09 19:03:26	2015-10-09 19:03:26
161	36	completed	2015-11-11 10:57:04	2015-11-11 10:57:04	2015-11-11 10:57:04
162	30	submitted	2015-09-21 03:51:02	2015-09-21 03:51:02	2015-09-21 03:51:02
163	30	received_feedback	2015-10-02 05:53:59	2015-10-02 05:53:59	2015-10-02 05:53:59
164	30	completed	2015-10-04 16:25:42	2015-10-04 16:25:42	2015-10-04 16:25:42
165	35	submitted	2015-08-24 07:21:46	2015-08-24 07:21:46	2015-08-24 07:21:46
166	35	received_feedback	2015-08-25 17:55:00	2015-08-25 17:55:00	2015-08-25 17:55:00
167	41	submitted	2015-11-14 18:40:27	2015-11-14 18:40:27	2015-11-14 18:40:27
168	6	submitted	2015-11-16 21:28:01	2015-11-16 21:28:01	2015-11-16 21:28:01
169	6	received_feedback	2015-11-17 08:52:13	2015-11-17 08:52:13	2015-11-17 08:52:13
170	34	submitted	2016-01-09 16:01:55	2016-01-09 16:01:55	2016-01-09 16:01:55
171	34	received_feedback	2016-01-13 06:15:16	2016-01-13 06:15:16	2016-01-13 06:15:16
172	16	submitted	2015-10-24 17:21:26	2015-10-24 17:21:26	2015-10-24 17:21:26
173	16	received_feedback	2015-10-28 01:33:57	2015-10-28 01:33:57	2015-10-28 01:33:57
174	18	submitted	2015-06-22 21:43:24	2015-06-22 21:43:24	2015-06-22 21:43:24
175	24	submitted	2015-12-05 16:54:15	2015-12-05 16:54:15	2015-12-05 16:54:15
176	42	submitted	2015-11-10 12:35:31	2015-11-10 12:35:31	2015-11-10 12:35:31
177	27	submitted	2015-08-01 01:44:02	2015-08-01 01:44:02	2015-08-01 01:44:02
178	45	submitted	2015-09-15 12:56:56	2015-09-15 12:56:56	2015-09-15 12:56:56
179	49	commented	2015-10-15 07:17:22	2015-10-15 07:17:22	2015-10-15 07:17:22
180	26	commented	2015-09-16 16:33:41	2015-09-16 16:33:41	2015-09-16 16:33:41
181	45	received_feedback	2015-10-24 19:54:26	2015-10-24 19:54:26	2015-10-24 19:54:26
182	7	commented	2015-10-24 19:54:26	2015-10-24 19:54:26	2015-10-24 19:54:26
183	23	commented	2015-12-25 21:21:42	2015-12-25 21:21:42	2015-12-25 21:21:42
184	24	received_feedback	2016-01-04 08:07:52	2016-01-04 08:07:52	2016-01-04 08:07:52
185	17	commented	2016-01-04 08:07:52	2016-01-04 08:07:52	2016-01-04 08:07:52
\.


--
-- Name: lifecycle_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('lifecycle_events_id_seq', 185, true);


--
-- Data for Name: likes; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY likes (id, submission_id, user_id, created_at, updated_at) FROM stdin;
\.


--
-- Name: likes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('likes_id_seq', 1, false);


--
-- Data for Name: log_entries; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY log_entries (id, user_id, body, created_at, updated_at, key) FROM stdin;
\.


--
-- Name: log_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('log_entries_id_seq', 1, false);


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY notifications (id, user_id, item_id, regarding, read, count, created_at, updated_at, item_type, creator_id) FROM stdin;
1	23	3	code	f	1	2015-11-08 17:45:54	2015-11-08 17:45:54	Submission	11
2	2	3	code	f	1	2015-11-08 17:45:54	2015-11-08 17:45:54	Submission	11
3	31	4	code	f	1	2016-01-10 00:18:00	2016-01-10 00:18:00	Submission	12
4	3	5	code	f	1	2016-01-10 09:22:52	2016-01-10 09:22:52	Submission	12
5	2	6	code	f	1	2016-01-10 19:36:06	2016-01-10 19:36:06	Submission	12
6	3	6	code	f	1	2016-01-10 19:36:06	2016-01-10 19:36:06	Submission	12
7	17	7	code	f	1	2016-01-10 20:31:05	2016-01-10 20:31:05	Submission	12
8	26	7	code	f	1	2016-01-10 20:31:05	2016-01-10 20:31:05	Submission	12
9	3	7	code	f	1	2016-01-10 20:31:05	2016-01-10 20:31:05	Submission	12
10	2	8	code	f	1	2016-01-10 08:44:00	2016-01-10 08:44:00	Submission	12
11	11	9	code	f	1	2016-01-10 12:00:59	2016-01-10 12:00:59	Submission	12
12	23	9	code	f	1	2016-01-10 12:00:59	2016-01-10 12:00:59	Submission	12
13	2	9	code	f	1	2016-01-10 12:00:59	2016-01-10 12:00:59	Submission	12
14	23	10	code	f	1	2016-01-10 17:37:29	2016-01-10 17:37:29	Submission	12
15	3	10	code	f	1	2016-01-10 17:37:29	2016-01-10 17:37:29	Submission	12
16	11	11	code	f	1	2016-01-11 12:03:30	2016-01-11 12:03:30	Submission	12
17	3	11	code	f	1	2016-01-11 12:03:30	2016-01-11 12:03:30	Submission	12
18	11	12	code	f	1	2016-01-11 18:55:25	2016-01-11 18:55:25	Submission	12
19	23	12	code	f	1	2016-01-11 18:55:25	2016-01-11 18:55:25	Submission	12
20	3	12	code	f	1	2016-01-11 18:55:25	2016-01-11 18:55:25	Submission	12
21	23	13	code	f	1	2015-11-02 08:29:53	2015-11-02 08:29:53	Submission	15
22	2	13	code	f	1	2015-11-02 08:29:53	2015-11-02 08:29:53	Submission	15
23	26	14	code	f	1	2015-12-01 01:39:20	2015-12-01 01:39:20	Submission	22
24	2	14	code	f	1	2015-12-01 01:39:20	2015-12-01 01:39:20	Submission	22
25	3	14	code	f	1	2015-12-01 01:39:20	2015-12-01 01:39:20	Submission	22
26	4	15	code	f	1	2015-12-05 19:50:27	2015-12-05 19:50:27	Submission	22
27	4	16	code	f	1	2015-12-12 04:01:45	2015-12-12 04:01:45	Submission	22
28	23	17	code	f	1	2015-12-04 15:03:21	2015-12-04 15:03:21	Submission	22
29	2	17	code	f	1	2015-12-04 15:03:21	2015-12-04 15:03:21	Submission	22
30	4	17	code	f	1	2015-12-04 15:03:21	2015-12-04 15:03:21	Submission	22
31	4	19	code	f	1	2015-12-23 09:49:55	2015-12-23 09:49:55	Submission	22
32	2	21	code	f	1	2015-06-25 23:45:26	2015-06-25 23:45:26	Submission	29
33	4	21	code	f	1	2015-06-25 23:45:26	2015-06-25 23:45:26	Submission	29
34	2	26	code	f	1	2015-10-25 13:09:52	2015-10-25 13:09:52	Submission	29
35	3	26	code	f	1	2015-10-25 13:09:52	2015-10-25 13:09:52	Submission	29
36	3	28	code	f	1	2015-06-22 04:17:53	2015-06-22 04:17:53	Submission	29
37	4	29	code	f	1	2015-08-07 14:36:07	2015-08-07 14:36:07	Submission	31
38	3	31	code	f	1	2015-10-17 00:30:41	2015-10-17 00:30:41	Submission	31
39	4	32	code	f	1	2015-11-21 12:23:23	2015-11-21 12:23:23	Submission	31
40	3	38	code	f	1	2015-12-02 07:00:08	2015-12-02 07:00:08	Submission	38
41	41	40	code	f	1	2015-12-13 11:41:38	2015-12-13 11:41:38	Submission	44
42	3	44	code	f	1	2015-10-19 05:32:24	2015-10-19 05:32:24	Submission	46
43	26	46	code	f	1	2015-12-14 12:39:36	2015-12-14 12:39:36	Submission	46
44	33	47	code	f	1	2015-10-12 11:59:58	2015-10-12 11:59:58	Submission	46
45	23	48	code	f	1	2015-10-24 20:51:04	2015-10-24 20:51:04	Submission	46
46	3	48	code	f	1	2015-10-24 20:51:04	2015-10-24 20:51:04	Submission	46
47	3	50	code	f	1	2015-11-07 00:12:54	2015-11-07 00:12:54	Submission	46
48	2	77	code	f	1	2015-09-15 17:21:32	2015-09-15 17:21:32	Submission	7
49	2	56	code	f	1	2015-08-15 14:24:45	2015-08-15 14:24:45	Submission	26
50	2	57	code	f	1	2015-11-04 04:28:37	2015-11-04 04:28:37	Submission	26
51	3	57	code	f	1	2015-11-04 04:28:37	2015-11-04 04:28:37	Submission	26
52	3	58	code	f	1	2015-10-15 04:37:40	2015-10-15 04:37:40	Submission	26
53	2	60	code	f	1	2015-07-23 07:40:12	2015-07-23 07:40:12	Submission	26
54	3	62	code	f	1	2015-11-03 09:43:32	2015-11-03 09:43:32	Submission	26
55	3	63	code	f	1	2015-08-17 06:47:45	2015-08-17 06:47:45	Submission	26
56	2	64	code	f	1	2015-10-13 21:01:27	2015-10-13 21:01:27	Submission	26
57	4	115	code	f	1	2015-09-25 05:37:22	2015-09-25 05:37:22	Submission	30
58	4	116	code	f	1	2015-08-24 07:21:46	2015-08-24 07:21:46	Submission	35
59	3	66	code	f	1	2015-08-02 18:43:43	2015-08-02 18:43:43	Submission	26
60	27	67	code	f	1	2015-09-16 20:22:14	2015-09-16 20:22:14	Submission	26
61	2	67	code	f	1	2015-09-16 20:22:14	2015-09-16 20:22:14	Submission	26
62	2	68	code	f	1	2015-09-26 15:25:47	2015-09-26 15:25:47	Submission	26
63	2	70	code	f	1	2015-08-12 21:40:55	2015-08-12 21:40:55	Submission	26
64	3	70	code	f	1	2015-08-12 21:40:55	2015-08-12 21:40:55	Submission	26
65	2	73	code	f	1	2015-11-11 02:50:12	2015-11-11 02:50:12	Submission	26
66	2	74	code	f	1	2015-11-07 22:47:47	2015-11-07 22:47:47	Submission	26
67	3	74	code	f	1	2015-11-07 22:47:47	2015-11-07 22:47:47	Submission	26
68	2	80	code	f	1	2015-11-04 13:31:16	2015-11-04 13:31:16	Submission	23
69	2	83	code	f	1	2015-10-14 07:32:45	2015-10-14 07:32:45	Submission	23
70	2	84	code	f	1	2015-10-16 22:09:49	2015-10-16 22:09:49	Submission	23
71	2	85	code	f	1	2015-10-18 09:40:46	2015-10-18 09:40:46	Submission	23
72	2	86	code	f	1	2015-09-12 22:51:30	2015-09-12 22:51:30	Submission	23
73	29	90	code	f	1	2015-09-15 02:14:25	2015-09-15 02:14:25	Submission	23
74	29	91	code	f	1	2015-08-14 06:10:01	2015-08-14 06:10:01	Submission	23
75	27	91	code	f	1	2015-08-14 06:10:01	2015-08-14 06:10:01	Submission	23
76	4	91	code	f	1	2015-08-14 06:10:01	2015-08-14 06:10:01	Submission	23
77	3	93	code	f	1	2015-09-05 07:59:48	2015-09-05 07:59:48	Submission	23
78	4	93	code	f	1	2015-09-05 07:59:48	2015-09-05 07:59:48	Submission	23
79	4	96	code	f	1	2015-10-31 20:35:10	2015-10-31 20:35:10	Submission	23
80	2	98	code	f	1	2015-08-13 06:04:16	2015-08-13 06:04:16	Submission	23
81	26	100	code	f	1	2015-10-01 00:28:22	2015-10-01 00:28:22	Submission	23
82	29	101	code	f	1	2015-08-15 01:51:09	2015-08-15 01:51:09	Submission	23
83	4	107	code	f	1	2015-10-22 09:28:22	2015-10-22 09:28:22	Submission	30
84	3	108	code	f	1	2015-11-06 14:08:45	2015-11-06 14:08:45	Submission	30
85	3	109	code	f	1	2015-10-10 21:43:47	2015-10-10 21:43:47	Submission	30
86	4	109	code	f	1	2015-10-10 21:43:47	2015-10-10 21:43:47	Submission	30
87	4	110	code	f	1	2015-10-15 12:47:02	2015-10-15 12:47:02	Submission	30
88	4	112	code	f	1	2015-10-28 20:53:01	2015-10-28 20:53:01	Submission	30
89	2	114	code	f	1	2016-01-08 18:36:33	2016-01-08 18:36:33	Submission	30
90	3	114	code	f	1	2016-01-08 18:36:33	2016-01-08 18:36:33	Submission	30
91	4	114	code	f	1	2016-01-08 18:36:33	2016-01-08 18:36:33	Submission	30
92	4	121	code	f	1	2015-11-26 17:05:09	2015-11-26 17:05:09	Submission	35
93	26	130	code	f	1	2016-01-09 16:01:55	2016-01-09 16:01:55	Submission	34
94	3	131	code	f	1	2015-10-24 17:21:26	2015-10-24 17:21:26	Submission	16
95	4	134	code	f	1	2015-06-22 21:43:24	2015-06-22 21:43:24	Submission	18
96	2	138	code	f	1	2015-12-16 00:18:21	2015-12-16 00:18:21	Submission	24
97	2	139	code	f	1	2015-12-26 00:03:33	2015-12-26 00:03:33	Submission	24
98	2	140	code	f	1	2015-12-26 00:35:50	2015-12-26 00:35:50	Submission	24
99	3	140	code	f	1	2015-12-26 00:35:50	2015-12-26 00:35:50	Submission	24
100	2	141	code	f	1	2015-12-03 00:17:44	2015-12-03 00:17:44	Submission	24
101	3	141	code	f	1	2015-12-03 00:17:44	2015-12-03 00:17:44	Submission	24
102	3	143	code	f	1	2015-12-09 20:31:53	2015-12-09 20:31:53	Submission	24
103	3	145	code	f	1	2015-12-12 17:33:31	2015-12-12 17:33:31	Submission	24
104	35	146	code	f	1	2015-12-17 04:04:11	2015-12-17 04:04:11	Submission	24
105	3	148	code	f	1	2015-11-10 12:35:31	2015-11-10 12:35:31	Submission	42
106	24	153	code	f	1	2015-12-16 03:21:27	2015-12-16 03:21:27	Submission	27
107	3	155	code	f	1	2015-10-22 09:58:44	2015-10-22 09:58:44	Submission	45
108	3	156	code	f	1	2015-10-28 14:23:14	2015-10-28 14:23:14	Submission	45
109	46	157	code	f	1	2015-11-30 11:41:01	2015-11-30 11:41:01	Submission	45
\.


--
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('notifications_id_seq', 109, true);


--
-- Data for Name: submissions; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY submissions (id, user_id, key, state, language, slug, done_at, is_liked, nit_count, version, created_at, updated_at, user_exercise_id, solution) FROM stdin;
1	11	da8f187df4570ba609aa9731	pending	ruby	binary	\N	\N	0	1	2015-09-26 12:54:30	2015-09-26 12:54:30	5	{"binary.rb":"# Converting a binary number to decimal\\nclass Binary\\n  VERSION = 1\\n  def initialize(binary_number)\\n    @binary_number = binary_number\\n    raise(ArgumentError) if /^[01]*$/.match(@binary_number).nil?\\n  end\\n\\n  def to_decimal\\n    reversed_number = @binary_number.reverse.split('').map(\\u0026:to_i)\\n    reversed_number.each_with_index.inject(0) { |a, (e, i)| a + e * (2**i) }\\n  end\\nend"}
2	11	628352e3f2e6688c7215222a	superseded	ruby	rna-transcription	\N	\N	0	1	2015-08-08 05:12:12	2015-08-08 05:12:12	6	{"\\\\ruby\\\\rna-transcription\\\\complement.rb":"class Complement\\r\\n  def self.of_dna(string)\\r\\n    @dna_to_rna ||= dna_nucleotides\\r\\n\\r\\n    rna = ''\\r\\n    string.each_char { |c| rna \\u003c\\u003c @dna_to_rna[c] }\\r\\n    rna\\r\\n  end\\r\\n\\r\\n  def self.of_rna(string)\\r\\n    @rna_to_dna ||= rna_nucleotides\\r\\n\\r\\n    dna = '' \\r\\n    string.each_char { |c| dna \\u003c\\u003c @rna_to_dna[c] }\\r\\n    dna\\r\\n  end\\r\\n\\r\\n  def self.dna_nucleotides\\r\\n    dna  = Hash.new do |_, k|\\r\\n      msg = \\"ArgumentError: invalid nucleotide #{k} for ('G', 'C', 'T', or 'A')\\"\\r\\n      msg \\u003c\\u003c 'did you mean #of_rna ?' if k == 'U'\\r\\n      fail ArgumentError, msg\\r\\n    end\\r\\n\\r\\n    dna.merge!('G' =\\u003e 'C', 'C' =\\u003e 'G', 'T' =\\u003e 'A', 'A' =\\u003e 'U')\\r\\n  end\\r\\n\\r\\n  def self.rna_nucleotides\\r\\n    rna  = Hash.new do |_, k|\\r\\n      msg = \\"ArgumentError: invalid nucleotide #{k} for ('G', 'C', 'U', or 'A')\\"\\r\\n      msg \\u003c\\u003c 'did you mean #of_rna ?' if k == 'T'\\r\\n      fail ArgumentError, msg\\r\\n    end\\r\\n\\r\\n    rna.merge!('G' =\\u003e 'C', 'C' =\\u003e 'G', 'U' =\\u003e 'A', 'A' =\\u003e 'T')\\r\\n  end\\r\\nend"}
3	11	51cde1a0f3de9bef378d2f26	hibernating	ruby	rna-transcription	\N	\N	0	2	2015-11-08 17:45:54	2015-11-08 17:45:54	6	{"\\\\ruby\\\\rna-transcription\\\\complement.rb":"module Genetics\\r\\n  module Sequence\\r\\n    attr_reader :sequence\\r\\n\\r\\n    def initialize(sequence)\\r\\n      @sequence = sequence\\r\\n    end\\r\\n\\r\\n    def to_dna\\r\\n      dna = sequence.tr(self.class.nucleotides, DNA.nucleotides)\\r\\n      Genetics::RNA.new(dna)\\r\\n    end\\r\\n\\r\\n    def to_rna\\r\\n      rna = sequence.tr(self.class.nucleotides, RNA.nucleotides)\\r\\n      Genetics::RNA.new(rna)\\r\\n    end\\r\\n  end\\r\\n\\r\\n  class DNA\\r\\n    include Sequence\\r\\n\\r\\n    def self::nucleotides\\r\\n      @nucleotides ||= 'GCTA'\\r\\n    end\\r\\n  end\\r\\n\\r\\n  class RNA\\r\\n    include Sequence\\r\\n\\r\\n    def self.nucleotides\\r\\n      @nucleotides ||= 'CGAU'\\r\\n    end\\r\\n  end\\r\\nend\\r\\n\\r\\nmodule Complement\\r\\n  def self.of_dna(sequence)\\r\\n    Genetics::DNA.new(sequence).to_rna.sequence\\r\\n  end\\r\\n\\r\\n  def self.of_rna(sequence)\\r\\n    Genetics::RNA.new(sequence).to_dna.sequence\\r\\n  end\\r\\nend"}
4	12	62e59b574d76d704fd221b62	done	haskell	leap	\N	\N	0	1	2016-01-10 00:18:00	2016-01-10 00:18:00	7	{"leap.hs":"module LeapYear (isLeapYear) where\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear y = y `mod` 4 == 0 \\u0026\\u0026 y `mod` 400 `notElem` [100, 200, 300]"}
5	12	914222144bac6b4c100ce3f5	superseded	ruby	sieve	\N	\N	0	1	2016-01-10 09:22:52	2016-01-10 09:22:52	10	{"/ruby/sieve/sieve.rb":"class Sieve\\n\\n  def initialize(max)\\n    @list = (2..max).to_a\\n  end\\n  \\n  def primes\\n    @list.each_with_index do |num1, idx|\\n      @list[idx+1..-1].each do |num2| \\n        @list.delete(num2) if num2 % num1 == 0\\n      end\\n    end\\n\\n    @list\\n  end\\nend"}
6	12	1f0700186ee0655fa183dea3	hibernating	ruby	sieve	\N	\N	0	2	2016-01-10 19:36:06	2016-01-10 19:36:06	10	{"/ruby/sieve/sieve.rb":"class Sieve\\n\\n  attr_accessor :primes\\n\\n  def initialize(limit)\\n    list = (2..limit).to_a\\n\\n    list.each do |num1|\\n      list.select! { |num2| num2 % num1 != 0 || num2 \\u003c= num1 }\\n    end\\n\\n    @primes = list\\n  end\\nend"}
7	12	1c3392832e269e087ec3aea8	done	javascript	bob	\N	\N	0	1	2016-01-10 20:31:05	2016-01-10 20:31:05	11	{"bob.js":"var Bob = module.exports = function Bob() {};\\n\\nBob.prototype.hey = function hey(conversationalInput) {\\n\\tvar possiblePunctuation = conversationalInput.slice(-1)\\n\\t,\\tresponse = 'Whatever.';\\n\\n\\tif ( conversationalInput === conversationalInput.toUpperCase() \\u0026\\u0026\\n\\t\\tconversationalInput.match(/[A-Z]/) ) {\\n\\t\\tresponse = 'Woah, chill out!';\\n\\t} else if ( possiblePunctuation === \\"?\\" ) {\\n\\t\\tresponse = 'Sure.';\\n\\t} else if ( possiblePunctuation.match(/^\\\\s*$/) ) {\\n\\t\\tresponse = 'Fine. Be that way!';\\n\\t}\\n\\n\\treturn response;\\n};"}
8	12	e609ad74b0c5ca083f79921b	pending	ruby	sum-of-multiples	\N	\N	0	1	2016-01-10 08:44:00	2016-01-10 08:44:00	12	{"sum_of_multiples.rb":"class SumOfMultiples\\r\\n  def initialize(*multiples)\\r\\n    @multiples = multiples\\r\\n  end\\r\\n\\r\\n  def self.to(limit)\\r\\n    new(3, 5).to(limit)\\r\\n  end\\r\\n\\r\\n  def to(limit)\\r\\n    arr = []\\r\\n    (1..limit-1).each do |num|\\r\\n      @multiples.each { |multiple| arr \\u003c\\u003c num if num%multiple == 0 \\u0026\\u0026 !arr.include?(num) }\\r\\n    end\\r\\n    arr.inject(:+) || 0\\r\\n  end\\r\\nend"}
9	12	631f37bcdbb35dda28720128	superseded	ruby	rna-transcription	\N	\N	0	2	2016-01-10 12:00:59	2016-01-10 12:00:59	13	{"/ruby/rna-transcription/complement.rb":"class Complement\\n  def self.of_dna(dna_strand)\\n    dna = Strand.new(dna_strand)\\n    dna.convert_strand_to_rna(dna_strand)\\n  end\\n\\n  def self.of_rna(rna_strand)\\n    rna = Strand.new(rna_strand)\\n    rna.convert_strand_to_dna(rna_strand)\\n  end\\nend\\n\\nclass Strand\\nattr_accessor :strand\\nRNA_TO_DNA = {\\n  'C' =\\u003e 'G',\\n  'A' =\\u003e 'T',\\n  'U' =\\u003e 'A',\\n  'G' =\\u003e 'C'\\n}\\n\\nDNA_TO_RNA = {\\n 'G' =\\u003e 'C',\\n 'C' =\\u003e 'G',\\n 'T' =\\u003e 'A',\\n 'A' =\\u003e 'U'\\n}\\n  def initialize(strand)\\n    @strand = strand.split(//)\\n  end\\n\\n  def convert_strand_to_rna(dna_strand)\\n    @strand.map { |char| DNA_TO_RNA.fetch(char)  }.reduce(:+)\\n  end\\n\\n  def convert_strand_to_dna(rna_strand)\\n    @strand.map { |char| RNA_TO_DNA.fetch(char)  }.reduce(:+)\\n  end\\n\\nend"}
10	12	cb5d60575edb7c83c491eb68	pending	ruby	rna-transcription	\N	\N	0	4	2016-01-10 17:37:29	2016-01-10 17:37:29	13	{"/ruby/rna-transcription/complement.rb":"class Complement\\n  def self.of_dna(dna_strand)\\n    dna = Strand.new(dna_strand)\\n    dna.convert_strand_to_rna\\n  end\\n\\n  def self.of_rna(rna_strand)\\n    rna = Strand.new(rna_strand)\\n    rna.convert_strand_to_dna\\n  end\\nend\\n\\nclass Strand\\n  attr_accessor :strand\\n  RNA_TO_DNA = {\\n    'C' =\\u003e 'G',\\n    'A' =\\u003e 'T',\\n    'U' =\\u003e 'A',\\n    'G' =\\u003e 'C'\\n  }\\n\\n  DNA_TO_RNA = RNA_TO_DNA.invert\\n\\n  def initialize(strand)\\n    @strand = strand.split(//)\\n  end\\n\\n  def convert_strand_to_rna\\n    @strand.map { |char| DNA_TO_RNA.fetch(char)  }.reduce(:+)\\n  end\\n\\n  def convert_strand_to_dna\\n    @strand.map { |char| RNA_TO_DNA.fetch(char)  }.reduce(:+)\\n  end\\n\\nend"}
54	48	2ed5541b6c63bcbefc913bdb	pending	python	roman-numerals	\N	\N	0	1	2015-08-26 06:46:31	2015-08-26 06:46:31	74	{"roman.py":"ROMAN_NUMERALS = {\\n    1: 'I',\\n    5: 'V',\\n    10: 'X',\\n    50: 'L',\\n    100: 'C',\\n    500: 'D',\\n    1000: 'M'\\n}\\n\\n\\ndef convert(digit, multiplier):\\n    if digit == 0:\\n        return ''\\n    if digit \\u003c 4:\\n        return \\"\\".join([ROMAN_NUMERALS[multiplier] for x in range(1, digit + 1)])\\n    if digit == 4:\\n        return ROMAN_NUMERALS[multiplier] + ROMAN_NUMERALS[5 * multiplier]\\n    if digit \\u003c 9:\\n        return ROMAN_NUMERALS[5 * multiplier] + \\"\\".join([ROMAN_NUMERALS[multiplier] for x in range(1, digit - 5 + 1)])\\n    else:\\n        return ROMAN_NUMERALS[multiplier] + ROMAN_NUMERALS[10 * multiplier]\\n\\n\\ndef numeral(arabic):\\n    digits = list(str(arabic))\\n    num_digits = len(digits)\\n    converted = ''\\n    for index, digit in enumerate(digits):\\n        converted += convert(int(digit), 10 ** (num_digits - index - 1))\\n\\n    return converted"}
11	12	ff453131cdc81a4fe1475c2f	superseded	ruby	rna-transcription	\N	\N	0	1	2016-01-11 12:03:30	2016-01-11 12:03:30	13	{"/ruby/rna-transcription/complement.rb":"class Complement\\n  def self.of_dna(dna_strand)\\n    dna = Strand.new(dna_strand)\\n    dna.convert_strand_to_rna(dna_strand)\\n  end\\n\\n  def self.of_rna(rna_strand)\\n    rna = Strand.new(rna_strand)\\n    rna.convert_strand_to_dna(rna_strand)\\n  end\\nend\\n\\nclass Strand\\nattr_accessor :strand\\n\\n  def initialize(strand)\\n    @strand = strand\\n  end\\n\\n  def convert_strand_to_rna(dna_strand)\\n    rna_strand = []\\n\\n    dna_strand.split(//).each do |acid|\\n      case acid\\n        when 'G'\\n          rna_strand \\u003c\\u003c 'C'\\n        when 'C'\\n          rna_strand \\u003c\\u003c 'G'\\n        when 'T'\\n          rna_strand \\u003c\\u003c 'A'\\n        when 'A'\\n          rna_strand \\u003c\\u003c 'U'\\n      end\\n    end\\n    return rna_strand.join\\n\\n  end\\n\\n  def convert_strand_to_dna(rna_strand)\\n    dna_strand = []\\n\\n    rna_strand.split(//).each do |acid|\\n      case acid\\n        when 'C'\\n          dna_strand \\u003c\\u003c 'G'\\n        when 'G'\\n          dna_strand \\u003c\\u003c 'C'\\n        when 'A'\\n          dna_strand \\u003c\\u003c 'T'\\n        when 'U'\\n          dna_strand \\u003c\\u003c 'A'\\n      end\\n    end\\n    return dna_strand.join\\n  end\\n\\nend"}
12	12	17c01ff04a7b09fa0289e8a8	superseded	ruby	rna-transcription	\N	\N	0	3	2016-01-11 18:55:25	2016-01-11 18:55:25	13	{"/ruby/rna-transcription/complement.rb":"class Complement\\n  def self.of_dna(dna_strand)\\n    dna = Strand.new(dna_strand)\\n    dna.convert_strand_to_rna(dna_strand)\\n  end\\n\\n  def self.of_rna(rna_strand)\\n    rna = Strand.new(rna_strand)\\n    rna.convert_strand_to_dna(rna_strand)\\n  end\\nend\\n\\nclass Strand\\nattr_accessor :strand\\nRNA_TO_DNA = {\\n  'C' =\\u003e 'G',\\n  'A' =\\u003e 'T',\\n  'U' =\\u003e 'A',\\n  'G' =\\u003e 'C'\\n}\\n\\nDNA_TO_RNA = RNA_TO_DNA.invert\\n\\n  def initialize(strand)\\n    @strand = strand.split(//)\\n  end\\n\\n  def convert_strand_to_rna(dna_strand)\\n    @strand.map { |char| DNA_TO_RNA.fetch(char)  }.reduce(:+)\\n  end\\n\\n  def convert_strand_to_dna(rna_strand)\\n    @strand.map { |char| RNA_TO_DNA.fetch(char)  }.reduce(:+)\\n  end\\n\\nend"}
13	15	6ea2a301ac20c37b30d1145e	pending	python	largest-series-product	\N	\N	0	1	2015-11-02 08:29:53	2015-11-02 08:29:53	14	{"/python/largest-series-product/series.py":"from itertools import product\\n\\ndef slices(numberss, length): # numbersess, oh yes, preciouss... golum!\\n    if length \\u003e len(numberss):\\n        raise ValueError\\n    sliceses = [] # filthy hobbitses!\\n    for i in range(len(numberss)-length+1):\\n        sliceses.append([int(l) for l in numberss[i:i+length]])\\n    return sliceses\\n\\ndef largest_product(numberss, length):\\n    sliceses = slices(numberss, length)\\n    largest = 1\\n\\n    for slice in sliceses:\\n        prod = 1\\n        for num in slice:\\n            prod*=num\\n        largest = max(largest, prod)\\n\\n    return largest"}
14	22	b74b809b8a830b4389d65d8b	done	elixir	bob	\N	\N	0	3	2015-12-01 01:39:20	2015-12-01 01:39:20	19	{"bob.exs":"defmodule Teenager do\\n  @moduledoc \\"This is a teenager.\\"\\n\\n  @doc \\"Teenager's response when you say something.\\"\\n  def hey(message) do\\n    cond do\\n      is_silent?(message) -\\u003e\\n        \\"Fine. Be that way!\\"\\n      is_shouting?(message) -\\u003e\\n        \\"Woah, chill out!\\"\\n      is_question?(message) -\\u003e\\n        \\"Sure.\\"\\n      true -\\u003e\\n        \\"Whatever.\\"\\n    end\\n  end\\n\\n  @doc \\"Checks if message to Teenager is shouting.\\"\\n  def is_shouting?(message) do\\n    String.upcase(message) == message\\n  end\\n\\n  @doc \\"Checks if message to Teenager is a question.\\"\\n  def is_question?(message) do\\n    String.ends_with?(message, \\"?\\")\\n  end\\n\\n  @doc \\"Checks if message to Teenager is silent.\\"\\n  def is_silent?(message) do\\n    nil?(message) || String.strip(message) == \\"\\"\\n  end\\nend"}
15	22	c330c846c7b8137308fa0dcd	superseded	elixir	bob	\N	\N	0	2	2015-12-05 19:50:27	2015-12-05 19:50:27	19	{"bob.exs":"defmodule Teenager do\\n  @moduledoc \\"This is a teenager.\\"\\n\\n  @doc \\"Teenager's response when you say something.\\"\\n  def hey(message) do\\n    cond do\\n      nil?(message) || String.length(String.strip(message)) == 0 -\\u003e\\n        \\"Fine. Be that way!\\"\\n      String.upcase(message) == message -\\u003e\\n        \\"Woah, chill out!\\"\\n      String.ends_with?(message, \\"?\\") -\\u003e\\n        \\"Sure.\\"\\n      true -\\u003e\\n        \\"Whatever.\\"\\n    end\\n  end\\nend"}
16	22	fb4748d402051a39f0a4213b	superseded	elixir	bob	\N	\N	0	1	2015-12-12 04:01:45	2015-12-12 04:01:45	19	{"bob.exs":"defmodule Teenager do\\n  @moduledoc \\"This is a teenager.\\"\\n\\n  @doc \\"Teenager's response when you say something.\\"\\n  def hey (something) do\\n    cond do\\n      nil?(something) || String.length(String.strip(something)) == 0 -\\u003e\\n        \\"Fine. Be that way!\\"\\n      String.upcase(something) == something -\\u003e\\n        \\"Woah, chill out!\\"\\n      String.ends_with?(something, \\"?\\") -\\u003e\\n        \\"Sure.\\"\\n      true -\\u003e\\n        \\"Whatever.\\"\\n    end\\n  end\\nend"}
17	22	0bc1096719898d25751dcfef	pending	python	rna-transcription	\N	\N	0	1	2015-12-04 15:03:21	2015-12-04 15:03:21	20	{"/python/rna-transcription/dna.py":"MAP = {\\n    'G':'C',\\n    'C':'G',\\n    'T':'A',\\n    'A':'U'\\n}\\ndef to_rna(dna):\\n    return ''.join(MAP[i] for i in dna)"}
18	22	9c3812c5e1d6d3255090f4a1	\N	scala	grains	\N	\N	0	1	2015-12-04 00:50:33	2015-12-04 00:50:33	22	{"src\\\\main\\\\scala\\\\Grains.scala":"import collection._\\nimport scala.BigInt\\nimport scala.math.BigInt.int2bigInt\\n\\nobject Grains {\\n  private lazy val Multiplier = 2\\n  private lazy val NoOfSquares = 64\\n  private lazy val squareToGrainsMap = mutable.Map[Int, Double]()\\n  private def calculateGrainsNo(squareNumber: Int): Double = math pow(Multiplier, squareNumber - 1)\\n  \\n  def square(squareNumber: Int): Double = \\n    squareToGrainsMap getOrElseUpdate(squareNumber, calculateGrainsNo(squareNumber))\\n  lazy val total: BigInt = (1 - BigInt(Multiplier).pow(NoOfSquares)) / (1 - Multiplier);\\n}"}
19	22	331dcfcb264992c2c630afc9	pending	go	raindrops	\N	\N	0	1	2015-12-23 09:49:55	2015-12-23 09:49:55	23	{"raindrops.go":"package raindrops\\n\\nimport (\\n\\t\\"math\\"\\n\\t\\"sort\\"\\n\\t\\"strconv\\"\\n)\\n\\nvar primes []int\\n\\nfunc Convert(number int) string {\\n\\tgeneratePrimes(number + 1)\\n\\tfactorsMap := getPrimeFactors(number, map[int]struct{}{})\\n\\n\\tresult := \\"\\"\\n\\n\\tfactors := []int{}\\n\\tfor k, _ := range factorsMap {\\n\\t\\tfactors = append(factors, k)\\n\\t}\\n\\tsort.Ints(factors)\\n\\n\\tfor _, n := range factors {\\n\\t\\tswitch n {\\n\\t\\tcase 3:\\n\\t\\t\\tresult = result + \\"Pling\\"\\n\\t\\tcase 5:\\n\\t\\t\\tresult = result + \\"Plang\\"\\n\\t\\tcase 7:\\n\\t\\t\\tresult = result + \\"Plong\\"\\n\\t\\t}\\n\\t}\\n\\n\\tif result == \\"\\" {\\n\\t\\tresult = strconv.Itoa(number)\\n\\t}\\n\\treturn result\\n}\\n\\n// Recursive function to find the factors, use an empty map as the accumulator\\nfunc getPrimeFactors(number int, accumulator map[int]struct{}) map[int]struct{} {\\n\\tfor i := 0; i \\u003c len(primes); i++ {\\n\\t\\tdivider := primes[i]\\n\\t\\tif number%divider == 0 {\\n\\t\\t\\taccumulator[divider] = struct{}{}\\n\\t\\t\\treturn getPrimeFactors(number/divider, accumulator)\\n\\t\\t}\\n\\t}\\n\\n\\treturn accumulator\\n}\\n\\n// Slightly modified mplementation of the Sieve of Atkin found at:\\n// http://stackoverflow.com/questions/21854191/generating-prime-numbers-in-go\\nfunc generatePrimes(limit int) {\\n\\tprimes = []int{}\\n\\tvar x, y, n int\\n\\tnsqrt := math.Sqrt(float64(limit))\\n\\tis_prime := make([]bool, limit+2) // This makes enough space in the slice with limit 1\\n\\n\\tfor x = 1; float64(x) \\u003c= nsqrt; x++ {\\n\\t\\tfor y = 1; float64(y) \\u003c= nsqrt; y++ {\\n\\t\\t\\tn = 4*(x*x) + y*y\\n\\t\\t\\tif n \\u003c= limit \\u0026\\u0026 (n%12 == 1 || n%12 == 5) {\\n\\t\\t\\t\\tis_prime[n] = !is_prime[n]\\n\\t\\t\\t}\\n\\t\\t\\tn = 3*(x*x) + y*y\\n\\t\\t\\tif n \\u003c= limit \\u0026\\u0026 n%12 == 7 {\\n\\t\\t\\t\\tis_prime[n] = !is_prime[n]\\n\\t\\t\\t}\\n\\t\\t\\tn = 3*(x*x) - y*y\\n\\t\\t\\tif x \\u003e y \\u0026\\u0026 n \\u003c= limit \\u0026\\u0026 n%12 == 11 {\\n\\t\\t\\t\\tis_prime[n] = !is_prime[n]\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfor n = 5; float64(n) \\u003c= nsqrt; n++ {\\n\\t\\tif is_prime[n] {\\n\\t\\t\\tfor y = n * n; y \\u003c limit; y += n * n {\\n\\t\\t\\t\\tis_prime[y] = false\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tis_prime[2] = true\\n\\tis_prime[3] = true\\n\\n\\tfor x = 0; x \\u003c len(is_prime)-1; x++ {\\n\\t\\tif is_prime[x] {\\n\\t\\t\\tprimes = append(primes, x)\\n\\t\\t}\\n\\t}\\n}"}
20	29	7d4bfa6503584ae68c7da712	pending	ruby	hamming	\N	\N	0	1	2015-08-01 09:32:07	2015-08-01 09:32:07	27	{"hamming.rb":"#!/usr/bin/env ruby\\n\\nclass Hamming\\n    def self.compute(str1, str2)\\n        #str1_parts = str1.split('')\\n        #str2_parts = str2.split('')\\n\\n        (0..str1.length).to_a.select do |i|\\n            str1[i] != str2[i] \\n        end.length\\n    end\\nend"}
21	29	6c738ec580d2f2abc0012170	pending	javascript	beer-song	\N	\N	0	1	2015-06-25 23:45:26	2015-06-25 23:45:26	31	{"beer-song.js":"var Beer = {\\n\\t\\n\\tverse: function(num) {\\n\\t\\tvar song = '';\\n\\n\\t\\tvar s = 's';\\n\\t\\tvar one = ' one ';\\n\\n\\t\\tif (num === 1) {\\n\\t\\t\\ts = '';\\n\\t\\t\\tone = ' it ';\\n\\t\\t}\\n\\n\\t\\tif (num === 0) {\\n\\t\\t\\tnum = 'No more';\\n\\t\\t}\\n\\n\\t\\tsong += num + ' bottle'+s+ ' of beer on the wall, ';\\n\\n\\t\\tif (num === 'No more') {\\n\\t\\t\\tnum = 'no more';\\n\\t\\t}\\n\\n\\n\\t\\tsong +=\\tnum + ' bottle'+s+ ' of beer.\\\\n';\\n\\n\\t\\tif (num === 'no more') {\\n\\t\\t\\tsong += 'Go to the store and buy some more, 99 bottles of beer on the wall.\\\\n';\\n\\t\\t\\treturn song;\\n\\t\\t}\\n\\n\\t\\tsong += 'Take' +one+ 'down and pass it around, ';\\n\\n\\t\\tnum--;\\n\\n\\t\\tif (num === 1) {\\n\\t\\t\\ts = '';\\n\\t\\t}\\n\\n\\t\\tif (num === 0) {\\n\\t\\t\\ts = 's';\\n\\t\\t\\tnum = 'no more';\\n\\t\\t}\\n\\n\\t\\tsong +=\\t(num) + ' bottle'+s+ ' of beer on the wall.\\\\n';\\n\\n\\t\\treturn song;\\n\\t},\\n\\n\\tsing: function(start, end) {\\n\\t\\tvar song = '';\\n\\t\\tend = end || 0;\\n\\n\\t\\tsong += this.verse(start);\\n\\t\\tstart--;\\n\\n\\t\\tif (start \\u003e= end) {\\n\\t\\t\\tsong += '\\\\n' + this.sing(start, end);\\n\\t\\t}\\n\\t\\treturn song;\\n\\t}\\n};"}
22	29	c8c51c1d67a67210f6f19616	pending	java	bob	\N	\N	0	1	2015-07-27 05:32:09	2015-07-27 05:32:09	33	{"/java/bob/src/main/java/Bob.java":"/**\\n * Created by Acesco on 8/7/15.\\n */\\npublic class Bob {\\n\\n    final String YELLING = \\"Whoa, chill out!\\";\\n    final String QUESTION = \\"Sure.\\";\\n    final String REGULAR = \\"Whatever.\\";\\n    final String SILENCE = \\"Fine. Be that way!\\";\\n\\n    public String hey(String input) {\\n        input = input.replace(\\" \\", \\"\\");\\n        if (input.length() == 0) return SILENCE;\\n        char last = input.charAt(input.length()-1);\\n        input = input.replaceAll(\\"[^\\\\\\\\p{L}0-9]\\",\\"\\");\\n        String upper = input.replaceAll(\\"[^\\\\\\\\p{Lu}]\\",\\"\\");\\n        String lower = input.replaceAll(\\"[^\\\\\\\\p{Ll}]\\",\\"\\");\\n        if (upper.length() \\u003e 0 \\u0026\\u0026 lower.length() == 0) return YELLING;\\n        if (last == '?') return QUESTION;\\n        return REGULAR;\\n    }\\n\\n}"}
23	29	613ca4ed035ab69a9233e4d1	done	ruby	gigasecond	\N	\N	0	1	2015-06-22 10:38:02	2015-06-22 10:38:02	35	{"gigasecond.rb":"require 'date'\\nrequire 'time'\\n\\nclass Gigasecond\\n\\n\\tG_SECONDS = 1_000_000_000\\n\\n\\tdef self.from(start_date)\\n\\t\\tgs = start_date.to_time \\n\\t\\tresults = gs + G_SECONDS\\n\\t\\tresults.to_date\\n\\tend\\n\\nend"}
24	29	8d791cffbb766fadbda077ff	pending	python	series	\N	\N	0	1	2015-07-28 17:57:06	2015-07-28 17:57:06	36	{"series.py":"def slices(numberString, seriesLength):\\n    if seriesLength != 0 and seriesLength \\u003c= len(numberString):\\n        seriesStart = 0\\n        allPossibleSeries = []\\n        while(seriesStart \\u003c (len(numberString) - seriesLength) + 1):\\n            series = []\\n            for i in xrange(seriesStart, seriesStart + seriesLength):\\n                series.append(int(numberString[i]))\\n            allPossibleSeries.append(series)\\n            seriesStart += 1\\n\\n        return allPossibleSeries\\n\\n    else:\\n        raise ValueError"}
25	29	1bfa9593369dcbb688be96c1	\N	python	word-count	\N	\N	0	1	2015-08-08 00:37:34	2015-08-08 00:37:34	37	{"wordcount.py":"import collections\\n\\nphrase = \\"car : carpet as java : javascript!!\\u0026@$%^\\u0026\\"\\n\\ndef word_count(phrase):\\n    listOfWords = phrase.rsplit()\\n    count = collections.Counter()\\n    for word in listOfWords:\\n        count[word] += 1\\n    return count\\n\\nprint word_count(phrase)"}
26	29	b0fd2f867078a7b8bfd005c7	pending	java	nucleotide-count	\N	\N	0	1	2015-10-25 13:09:52	2015-10-25 13:09:52	41	{"src\\\\main\\\\java\\\\DNA.java":"import java.util.HashMap;\\r\\nimport java.util.Map;\\r\\n\\r\\npublic class DNA {\\r\\n    private final Map\\u003cCharacter, Integer\\u003e map;\\r\\n\\r\\n    public DNA(String sequence) {\\r\\n        map = new HashMap\\u003c\\u003e();\\r\\n        map.put('G', 0);\\r\\n        map.put('C', 0);\\r\\n        map.put('T', 0);\\r\\n        map.put('A', 0);\\r\\n\\r\\n        for (char x : sequence.toCharArray()) {\\r\\n            if (map.containsKey(x)) {\\r\\n                map.put(x, map.get(x) + 1);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public int count(char base) {\\r\\n        if (map.containsKey(base)) {\\r\\n            return map.get(base);\\r\\n        } else {\\r\\n            throw new IllegalArgumentException();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public Map\\u003cCharacter, Integer\\u003e nucleotideCounts() {\\r\\n        return map;\\r\\n    }\\r\\n}"}
27	29	e7c63ecd39c25d3088ab43d9	done	python	rna-transcription	\N	\N	0	1	2015-06-26 23:26:02	2015-06-26 23:26:02	42	{"dna.py":"def to_rna(dna):\\n    rna = ''\\n\\n    for nucleotide in dna:\\n        if nucleotide == 'G':\\n            rna += 'C'\\n        elif nucleotide == 'C':\\n            rna += 'G'\\n        elif nucleotide == 'T':\\n            rna += 'A'\\n        elif nucleotide == 'A':\\n            rna += 'U'\\n\\n    return rna"}
28	29	d51f31dc668e47d79b46b4f0	hibernating	clojure	bob	\N	\N	0	1	2015-06-22 04:17:53	2015-06-22 04:17:53	43	{"bob.clj":"(ns bob\\n  (:require [clojure.string :as str]))\\n\\n(defn response-for\\n  \\"Responds to questions and statements\\"\\n  [phrase]\\n  (cond (re-find #\\"^([A-Z1-9]|\\\\W)*([A-Z]+\\\\W*[A-Z]*)+([A-Z1-9]|\\\\W)*$\\"\\n                 phrase) \\"Whoa, chill out!\\"\\n        (= \\\\? (last phrase)) \\"Sure.\\"\\n        (str/blank? phrase) \\"Fine. Be that way!\\"\\n        true \\"Whatever.\\"))"}
29	31	defebef140117a42d406efb8	hibernating	csharp	hamming	\N	\N	0	1	2015-08-07 14:36:07	2015-08-07 14:36:07	45	{"Hamming.cs":"﻿using System;\\r\\nusing System.Linq;\\r\\n\\r\\nnamespace Exercism.Hamming\\r\\n{\\r\\n    public class Hamming\\r\\n    {\\r\\n        internal static int Compute(string strand1, string strand2)\\r\\n        {\\r\\n            int iHamming = 0;\\r\\n\\r\\n            for (int i = 0; i \\u003c (strand1.Length \\u003e strand2.Length ? strand2.Length:strand1.Length); i++)\\r\\n            {\\r\\n                if (!strand1.ElementAt(i).Equals(strand2.ElementAt(i)))\\r\\n                    iHamming++;\\r\\n            }\\r\\n\\r\\n            return iHamming;\\r\\n        }\\r\\n    }\\r\\n}\\r"}
30	31	e4024ceee3542c985c6c2b9d	pending	javascript	phone-number	\N	\N	0	1	2015-10-22 14:19:08	2015-10-22 14:19:08	48	{"/javascript/phone-number/phone-number.js":"function PhoneNumber(n){\\n\\tthis.n = (function(){\\n\\t\\tvar match = n.match(/\\\\d+/g).join(\\"\\");\\n\\t\\tif(match.length == 10) return match;\\n\\t\\telse if(match.length == 11 \\u0026\\u0026 match[0] == '1') return match.slice(1);\\n\\t\\telse return '0000000000';\\n\\t})();\\n}\\n\\nPhoneNumber.prototype.number = function(){\\n\\treturn this.n;\\n}\\n\\nPhoneNumber.prototype.areaCode = function(){\\n\\treturn this.n.slice(0,3);\\n}\\n\\nPhoneNumber.prototype.toString = function(){\\n\\treturn \\"(\\" + this.areaCode() + \\") \\" + this.n.slice(3,6) + \\"-\\"+this.n.slice(6);\\n}\\n\\nmodule.exports = PhoneNumber;"}
31	31	d0ea3af7aa8bfa57ada73996	done	haskell	leap	\N	\N	0	3	2015-10-17 00:30:41	2015-10-17 00:30:41	49	{"LeapYear.hs":"module LeapYear (isLeapYear) where\\n\\nisLeapYear :: Integral x =\\u003e x -\\u003e Bool\\nisLeapYear x = divisor x 4 \\u0026\\u0026 ( not (divisor x 100) || divisor x 400)\\n\\twhere \\n\\t\\tdivisor v d = rem v d == 0"}
32	31	a3e02636c2bbe0f81215fad4	superseded	haskell	leap	\N	\N	0	1	2015-11-21 12:23:23	2015-11-21 12:23:23	49	{"LeapYear.hs":"module LeapYear (isLeapYear) where\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear is = mod is 4 == 0 \\u0026\\u0026 ( not (mod is 100 == 0) || mod is 400 == 0)"}
33	31	fefa8304f715a90739946a36	superseded	haskell	leap	\N	\N	0	2	2015-12-24 01:35:58	2015-12-24 01:35:58	49	{"LeapYear.hs":"module LeapYear (isLeapYear) where\\n\\nisLeapYear :: Int -\\u003e Bool\\nisLeapYear x = rem x 4 == 0 \\u0026\\u0026 ( rem x 100 /= 0 || rem x 400 == 0)"}
34	33	69972da3fe6a3a31546abb2d	pending	scala	meetup	\N	\N	0	1	2015-06-29 02:48:41	2015-06-29 02:48:41	50	{"src/main/scala/Meetup.scala":"import java.util.{Calendar, GregorianCalendar}\\n\\ncase class Meetup(month : Int, year : Int) {\\n\\n  def teenth (weekDay : Int) : GregorianCalendar = {\\n    val temp = new GregorianCalendar(year, month - 1, 13)\\n    if (temp.get(Calendar.DAY_OF_WEEK) \\u003e weekDay)\\n      temp.add(Calendar.DAY_OF_MONTH, 7 + weekDay - temp.get(Calendar.DAY_OF_WEEK))\\n    else\\n      temp.add(Calendar.DAY_OF_MONTH, weekDay - temp.get(Calendar.DAY_OF_WEEK))\\n    temp\\n  }\\n\\n  def first (weekDay : Int) : GregorianCalendar = {\\n    val temp = new GregorianCalendar(year, month - 1, 1)\\n    if (temp.get(Calendar.DAY_OF_WEEK) \\u003e weekDay)\\n      temp.add(Calendar.DAY_OF_MONTH, 7 + weekDay - temp.get(Calendar.DAY_OF_WEEK))\\n    else\\n      temp.add(Calendar.DAY_OF_MONTH, weekDay - temp.get(Calendar.DAY_OF_WEEK))\\n    temp\\n  }\\n\\n  def last (weekDay : Int) : GregorianCalendar = {\\n    val temp = Meetup(month,year).fourth(weekDay)\\n    temp.add(Calendar.DAY_OF_MONTH, 7)\\n    if (temp.get(Calendar.MONTH) == Meetup(month,year).fourth(weekDay).get(Calendar.MONTH))\\n      temp\\n    else\\n      Meetup(month,year).fourth(weekDay)\\n  }\\n\\n  def second (weekDay : Int) : GregorianCalendar = {\\n    val temp = Meetup(month,year).first(weekDay)\\n    temp.add(Calendar.DAY_OF_MONTH, 7)\\n    temp\\n  }\\n\\n  def third (weekDay : Int) : GregorianCalendar = {\\n    val temp = Meetup(month,year).second(weekDay)\\n    temp.add(Calendar.DAY_OF_MONTH, 7)\\n    temp\\n  }\\n\\n  def fourth (weekDay : Int) : GregorianCalendar = {\\n    val temp = Meetup(month,year).third(weekDay)\\n    temp.add(Calendar.DAY_OF_MONTH, 7)\\n    temp\\n  }\\n\\n}\\nobject Meetup extends Enumeration {\\n  val Mon = 2\\n  val Tue = 3\\n  val Wed = 4\\n  val Thu = 5\\n  val Fri = 6\\n  val Sat = 7\\n  val Sun = 1\\n}"}
35	33	bec0220cf35a847d1cb9db3f	done	javascript	word-count	\N	\N	0	2	2015-08-13 18:27:02	2015-08-13 18:27:02	51	{"word-count.js":"(function() {\\n  'use strict';\\n  function Words(input) {\\n    var words = input.match(/\\\\w+/gi);\\n    var counts = {}\\n\\n    this.count = (function(){\\n      words.forEach(function(word) {\\n        var currentWord = word.toLowerCase();\\n        if (counts[currentWord] == undefined) {\\n          counts[currentWord] = 0;\\n        } \\n          \\n        counts[currentWord] += 1;\\n      })\\n      return counts;      \\n    }());\\n  \\n  }\\n\\n  module.exports = Words;\\n}());"}
36	33	17d65db8afed6bcb3eac07dd	superseded	javascript	word-count	\N	\N	0	1	2015-09-03 03:45:56	2015-09-03 03:45:56	51	{"word-count.js":"(function() {\\n  'use strict';\\n  function Words(input) {\\n    var words = input.match(/[\\\\w]+/gi);\\n    var counts = {}\\n\\n    var countWords = function(word) {\\n      var currenWord;\\n    }\\n\\n    this.count = (function(){\\n      words.forEach(function(word) {\\n        var currentWord = word.toLowerCase();\\n        if (counts[currentWord] == undefined) {\\n          counts[currentWord] = 0;\\n        } \\n          \\n        counts[currentWord] += 1;\\n      })\\n      return counts;      \\n    }());\\n  \\n  }\\n\\n  module.exports = Words;\\n}());"}
37	38	766e4182c6600905287809e7	hibernating	python	scrabble-score	\N	\N	0	1	2015-11-21 19:22:18	2015-11-21 19:22:18	55	{"\\\\python\\\\scrabble-score\\\\scrabble.py":"scrabble_dict = dict(zip(['A', 'E', 'I', 'O', 'U', 'L', 'N', 'R', 'S', 'T', 'D', 'G','B', 'C', 'M', 'P', 'F', 'H', 'V', 'W', 'Y', 'K', 'J', 'X', 'Q','Z'],\\\\\\r\\n\\t[1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,3,4,4,4,4,4,5,8,8,10,10]))\\r\\n\\r\\ndef score(word):\\r\\n\\tword = word.upper()\\r\\n\\ttotal = 0\\r\\n\\tfor i in word:\\r\\n\\t\\tn = scrabble_dict.get(i)\\r\\n\\t\\tif n:\\r\\n\\t\\t\\ttotal = total + n\\r\\n\\treturn total"}
38	38	47539f7d936a62171a76a0ef	pending	python	matrix	\N	\N	0	2	2015-12-02 07:00:08	2015-12-02 07:00:08	57	{"matrix.py":"class Matrix:\\n    def __init__(self, matrix):\\n        matrix = matrix.split('\\\\n')\\n        matrix = map(lambda row: row.split(' '), matrix)\\n        matrix = [map(int, row) for row in matrix]\\n\\n        row_lens = map(len, matrix)\\n        for row_len in row_lens:\\n            if row_len != row_lens[0]:\\n\\n                row_lens = ', '.join(map(str, row_lens))\\n                err_msg = (\\"Input incorrectly formatted. \\"\\n                           \\"Row lengths {} expected to \\"\\n                           \\"be equal\\").format(row_lens)\\n\\n                raise ValueError(err_msg)\\n\\n        self.matrix = matrix\\n\\n    @property\\n    def rows(self):\\n        return self.matrix\\n\\n    @property\\n    def columns(self):\\n        return [list(column) for column in zip(*self.rows)]"}
39	38	eda24156da187e645f07422b	superseded	python	matrix	\N	\N	0	1	2015-12-04 12:35:02	2015-12-04 12:35:02	57	{"matrix.py":"class Matrix:\\n    def __init__(self, matrix):\\n        matrix = matrix.split('\\\\n')\\n        matrix = map(lambda row: row.split(' '), matrix)\\n        matrix = [map(int, row) for row in matrix]\\n        self.rows = matrix\\n        self.columns = [list(column) for column in zip(*self.rows)]"}
40	44	21d9a70826ac1b325a5bf242	pending	ruby	bob	\N	\N	0	1	2015-12-13 11:41:38	2015-12-13 11:41:38	61	{"/ruby/bob/bob.rb":"class Bob\\n\\n  def hey(text)\\n    feedback(text)\\n  end\\n\\n  def feedback(text)\\n    case\\n    when text.match(/\\\\n/)\\n\\twhatever\\n    when text.empty? || text.match(/^ *$/)\\n\\tfine\\n    when text.match(/\\\\t/)\\n\\tfine\\n    when text.match(/\\\\.$/) || text.match(/\\\\d$/)\\n\\twhatever\\n    when text.upcase != text \\u0026\\u0026 text.match(/!$/)\\n\\twhatever\\n    when text.match(/\\\\d\\\\?$/)\\n\\tsure\\t\\n    when text == text.upcase\\n\\tchill\\n    when text.match(/\\\\?$/)\\n\\tsure\\n    end\\n  end\\n\\n  def fine\\n    'Fine. Be that way!'\\n  end\\n\\n  def sure\\n    'Sure.'\\n  end\\n\\n  def chill\\n    'Whoa, chill out!'\\n  end\\n\\n  def whatever\\n    'Whatever.'\\n  end\\n\\nend"}
41	44	cae5a07b2d676b528829e505	done	haskell	pig-latin	\N	\N	0	1	2015-10-14 09:40:56	2015-10-14 09:40:56	63	{"pig-latin.hs":"module PigLatin (translate) where\\nimport Data.Char (isLetter)\\nimport Data.List (isSuffixOf)\\n\\nconsonantCluster :: String -\\u003e (String, String)\\nconsonantCluster = qu . break (`elem` \\"aeiou\\")\\n  where qu (cs, ('u':rest)) | \\"q\\" `isSuffixOf` cs = (cs ++ \\"u\\", rest)\\n        qu pair = pair\\n\\ntranslateWord :: String -\\u003e String\\ntranslateWord w0 = concat [before, w, cs, \\"ay\\", after]\\n  where\\n    (before, w1) = break isLetter w0\\n    (w2, after)  = span isLetter w1\\n    (cs, w)      = consonantCluster w2\\n\\ntranslate :: String -\\u003e String\\ntranslate = unwords . map translateWord . words"}
42	44	f455bb4ad7dc9cc1e2c8aa5d	hibernating	csharp	roman-numerals	\N	\N	0	1	2015-10-22 01:13:49	2015-10-22 01:13:49	64	{"IntExtensions.cs":"using System.Collections.Generic;\\r\\n\\r\\npublic static class IntExtensions\\r\\n{\\r\\n    private static readonly Dictionary\\u003cint, string\\u003e Numerals = new Dictionary\\u003cint, string\\u003e {\\r\\n        {1000, \\"M\\"},\\r\\n        {900, \\"CM\\"},\\r\\n        {500, \\"D\\"},\\r\\n        {400, \\"CD\\"},\\r\\n        {100, \\"C\\"},\\r\\n        {90, \\"XC\\"},\\r\\n        {50, \\"L\\"},\\r\\n        {40, \\"XL\\"},\\r\\n        {10, \\"X\\"},\\r\\n        {9, \\"IX\\"},\\r\\n        {5, \\"V\\"},\\r\\n        {4, \\"IV\\"},\\r\\n        {1, \\"I\\"}\\r\\n    };\\r\\n\\r\\n    public static string ToRoman(this int number)\\r\\n    {\\r\\n        var numeral = string.Empty;\\r\\n\\r\\n        foreach (var item in Numerals)\\r\\n        {\\r\\n            while (number \\u003e= item.Key)\\r\\n            {\\r\\n                numeral += item.Value;\\r\\n                number -= item.Key;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return numeral;\\r\\n    }\\r\\n}"}
43	44	987c74326c723c042bad3de0	pending	haskell	minesweeper	\N	\N	0	1	2015-11-28 09:28:25	2015-11-28 09:28:25	65	{"Minesweeper.hs":"module Minesweeper (annotate) where\\n\\nimport Control.Applicative ((\\u003c$\\u003e), pure, (\\u003c*\\u003e), (\\u003c|\\u003e))\\nimport Control.Monad ((\\u003e=\\u003e))\\n\\n-- WEEEE\\n-- This is almost certainly not the best, fastest, leanest, or simplest solution\\n-- It was fun, though!\\n\\ndata Cell = Cell {\\n\\tleft :: Maybe Cell,\\n\\tright :: Maybe Cell,\\n\\tup :: Maybe Cell,\\n\\tdown :: Maybe Cell,\\n\\tvalue :: Bool\\n\\t}\\n\\n-- This returns the top left cell of the newly constructed set\\nbuild :: [[Char]] -\\u003e Maybe Cell\\nbuild = spine Nothing\\n\\twhere\\n\\t-- This traverses the left edge up and down\\n\\t-- It fires off a row at each item in the list connecting them vertically\\n\\tspine :: Maybe Cell -\\u003e [[Char]] -\\u003e Maybe Cell\\n\\tspine _ [] = Nothing\\n\\tspine _ ([]:_) = Nothing\\n\\tspine above (l:ls) = let\\n\\t\\tbelow = spine this ls\\n\\t\\tthis = row Nothing (Just (above, below)) l\\n\\t\\tin\\n\\t\\t\\tthis\\n\\t-- Row constructs the left to right row.\\n\\t-- It only gets an above and below value on the left edge.\\n\\t-- The rest of the values are determined in terms of what came before.\\n\\t-- This should keep the knot closed.\\n\\trow :: Maybe Cell -\\u003e Maybe (Maybe Cell, Maybe Cell) -\\u003e [Char] -\\u003e Maybe Cell\\n\\trow _ _ [] = Nothing\\n\\trow prev leftEdgeAboveBelow (x:xs) = let\\n\\t\\tbelow = (leftEdgeAboveBelow \\u003e\\u003e= snd) \\u003c|\\u003e (prev \\u003e\\u003e= down \\u003e\\u003e= right)\\n\\t\\tabove = (leftEdgeAboveBelow \\u003e\\u003e= fst) \\u003c|\\u003e (prev \\u003e\\u003e= up \\u003e\\u003e= right)\\n\\t\\tnext = row this Nothing xs\\n\\t\\tthis = Just Cell {\\n\\t\\t\\tvalue = x == '*',\\n\\t\\t\\tleft = prev,\\n\\t\\t\\tright = next,\\n\\t\\t\\tup = above,\\n\\t\\t\\tdown = below\\n\\t\\t\\t}\\n\\t\\tin\\n\\t\\t\\tthis\\n\\ncount :: Cell -\\u003e Char\\ncount (Cell {value = True}) = '*'\\ncount c = char $ sum $ maybe 0 (bInt . value) \\u003c$\\u003e (around \\u003c*\\u003e pure c)\\n\\twhere\\n\\tchar = ((' ':['1'..'8']) !!)\\n\\tbInt True = 1\\n\\tbInt False = 0\\n\\taround = [\\n\\t\\tup \\u003e=\\u003e left, up, up \\u003e=\\u003e right,\\n\\t\\tleft, right,\\n\\t\\tdown \\u003e=\\u003e left, down, down \\u003e=\\u003e right\\n\\t\\t]\\n\\nannotatedList :: Maybe Cell -\\u003e [[Char]]\\nannotatedList Nothing = []\\nannotatedList c = row c : annotatedList (c \\u003e\\u003e= down)\\n\\twhere\\n\\trow :: Maybe Cell -\\u003e [Char]\\n\\trow Nothing = []\\n\\trow (Just i) = count i : row (right i)\\n\\nannotate :: [[Char]] -\\u003e [[Char]]\\nannotate = annotatedList . build"}
44	46	696f0ae8150510045f0c8aee	superseded	ruby	hamming	\N	\N	0	2	2015-10-19 05:32:24	2015-10-19 05:32:24	67	{"hamming.rb":"module Hamming\\n  VERSION = 1\\n  \\n  def compute(a, b)\\n    first_strand, second_strand = Strand.new(a), Strand.new(b)\\n    first_strand.distance_from second_strand\\n  end\\n  \\n  extend self\\nend\\n\\nclass Strand\\n  attr_reader :nucleotides\\n  \\n  def initialize(strand)\\n    @nucleotides = strand.chars\\n  end\\n  \\n  def distance_from(other_strand)\\n    distance = 0\\n    \\n    if @nucleotides.length == other_strand.nucleotides.length\\n      paired_nucleotides = @nucleotides.zip(other_strand.nucleotides)\\n      paired_nucleotides.each do |nucleotide_pair|\\n        nucleotide, other_nucleotide = nucleotide_pair\\n        distance += 1 unless nucleotide == other_nucleotide\\n      end\\n    else\\n      raise ArgumentError\\n    end\\n    \\n    return distance\\n  end\\nend"}
45	46	7a5f4b19caf1c68f0bb86938	superseded	ruby	hamming	\N	\N	0	1	2015-10-29 22:10:20	2015-10-29 22:10:20	67	{"hamming.rb":"module Hamming\\n  VERSION = 1\\n  \\n  def compute(a, b)\\n    first_strand, second_strand = Strand.new(a), Strand.new(b)\\n    first_strand.distance_from second_strand\\n  end\\n  \\n  extend self\\nend\\n\\nclass Strand\\n  attr_reader :nucleotides\\n  \\n  def initialize(strand)\\n    @nucleotides = strand.chars\\n  end\\n  \\n  def distance_from(other_strand)\\n    distance = 0\\n    \\n    if @nucleotides.length == other_strand.nucleotides.length\\n      @nucleotides.each_with_index do |nucleotide, index|\\n        distance += 1 unless nucleotide == other_strand.nucleotides[index]\\n      end\\n    else\\n      raise ArgumentError\\n    end\\n    \\n    return distance\\n  end\\nend"}
46	46	992acc89971109e8503a0489	done	ruby	hamming	\N	\N	0	3	2015-12-14 12:39:36	2015-12-14 12:39:36	67	{"hamming.rb":"module Hamming\\n  VERSION = 1\\n  \\n  def compute(a, b)\\n    first_strand, second_strand = Strand.new(a), Strand.new(b)\\n    first_strand.distance_from second_strand\\n  end\\n  \\n  extend self\\nend\\n\\nclass Strand\\n  attr_reader :nucleotides\\n  \\n  def initialize(strand)\\n    @nucleotides = strand.chars\\n  end\\n  \\n  def distance_from(other_strand)    \\n    if @nucleotides.length == other_strand.nucleotides.length\\n      paired_nucleotides = @nucleotides.zip(other_strand.nucleotides)\\n      \\n      distance = paired_nucleotides.count do |nucleotide, other_nucleotide|\\n        nucleotide != other_nucleotide\\n      end\\n    else\\n      raise ArgumentError\\n    end\\n  end\\nend"}
47	46	9bd2efcbc0b701a60d55dc7e	\N	javascript	word-count	\N	\N	0	1	2015-10-12 11:59:58	2015-10-12 11:59:58	68	{"word_count.js":"var words = function(input) {\\n    output = {};\\n    input.trim().split(/\\\\s+/).forEach(function(elem) {\\n            if (!output.hasOwnProperty(elem)) {\\n                output[elem] = 0;\\n            }\\n\\n            output[elem] = output[elem] + 1;\\n        }\\n    );\\n\\n    return output;\\n};\\n\\nmodule.exports = words;"}
48	46	5429fe827e817bd1d5f38888	\N	javascript	word-count	\N	\N	0	2	2015-10-24 20:51:04	2015-10-24 20:51:04	68	{"word_count.js":"var words = function(input) {\\n    var output = {};\\n    var words = input.trim().split(/\\\\s+/g);\\n    words.forEach(\\n        function(elem) {\\n            if (!output.hasOwnProperty(elem)) {\\n                output[elem] = 0;\\n            }\\n\\n            output[elem] = output[elem] + 1;\\n        }\\n    );\\n\\n    return output;\\n};\\n\\nmodule.exports = words;"}
49	46	38673fd4de6e0c282fc397f3	\N	erlang	strain	\N	\N	0	2	2015-10-21 19:21:11	2015-10-21 19:21:11	69	{"strain.erl":"-module(strain).\\n-export([keep/2, discard/2]).\\n\\nkeep(F, List) -\\u003e\\n    keep(F, List, []).\\n\\nkeep(_, [], Acc) -\\u003e lists:reverse(Acc);\\nkeep(F, [H|T], Acc) -\\u003e keep_if(F(H), F, [H|T], Acc).\\n\\nkeep_if(true, F, [H|T], Acc) -\\u003e keep(F, T, [H|Acc]);\\nkeep_if(false, F, [_|T], Acc) -\\u003e keep(F, T, Acc).\\n\\ndiscard(F, List) -\\u003e keep(fun(X) -\\u003e not F(X) end, List)."}
50	46	2891f383873bd0d464d80595	\N	erlang	strain	\N	\N	0	1	2015-11-07 00:12:54	2015-11-07 00:12:54	69	{"strain.erl":"-module(strain).\\n-export([keep/2, discard/2]).\\n\\nkeep(F, List) -\\u003e\\n    keep(F, List, []).\\n\\nkeep(_, [], Acc) -\\u003e lists:reverse(Acc);\\nkeep(F, [H|T], Acc) -\\u003e\\n    Keep = F(H),\\n    case Keep of\\n        true -\\u003e keep(F, T, [H|Acc]);\\n        false -\\u003e keep(F, T, Acc)\\n    end.\\n\\ndiscard(F, List) -\\u003e keep(fun(X) -\\u003e not F(X) end, List)."}
51	46	ab2478a9d2cf97790756e4aa	done	go	etl	\N	\N	0	3	2015-12-16 05:43:04	2015-12-16 05:43:04	70	{"etl.go":"package etl\\n\\nimport \\"strings\\"\\n\\nfunc Transform(oldPointsToTilesMap map[int][]string) map[string]int {\\n  tileToPointsMap := make(map[string]int)\\n\\n  for points, tiles := range oldPointsToTilesMap {\\n    for _, tile := range tiles {\\n      tileToPointsMap[strings.ToLower(tile)] = points\\n    }\\n  }\\n\\n  return tileToPointsMap\\n}"}
52	46	1f1feae2114c03b503e42d3a	superseded	go	etl	\N	\N	0	2	2015-12-25 05:02:46	2015-12-25 05:02:46	70	{"etl.go":"package etl\\n\\nimport \\"strings\\"\\n\\nfunc Transform(oldPointsToTilesMap map[int][]string) map[string]int {\\n  tileToPointMap := make(map[string]int)\\n\\n  for points, tiles := range oldPointsToTilesMap {\\n    for _, tile := range tiles {\\n      tileToPointMap[strings.ToLower(tile)] = points\\n    }\\n  }\\n\\n  return tileToPointMap\\n}"}
53	46	79b3e61cb585ad075c8343c1	superseded	go	etl	\N	\N	0	1	2016-01-08 08:21:33	2016-01-08 08:21:33	70	{"etl.go":"package etl\\n\\nimport \\"strings\\"\\n\\nfunc Transform(scrabbleMap map[int][]string) map[string]int {\\n  scrabbleOutput := make(map[string]int)\\n\\n  for points, chars := range scrabbleMap {\\n    for _, char := range chars {\\n      scrabbleOutput[strings.ToLower(char)] = points\\n    }\\n  }\\n\\n  return scrabbleOutput\\n}"}
77	7	d602aa23d3aebc77df161044	pending	ruby	raindrops	\N	\N	0	1	2015-09-15 17:21:32	2015-09-15 17:21:32	122	{"raindrops.rb":"class Raindrops\\n\\n\\tdef self.convert(string)\\n\\t\\tresult = \\"\\"\\n\\t\\t# string.to_i\\n\\t\\tresult \\u003c\\u003c \\"Pling\\" if string % 3 == 0\\n\\t\\tresult \\u003c\\u003c \\"Plang\\" if string % 5 == 0\\n\\t\\tresult \\u003c\\u003c \\"Plong\\" if string % 7 == 0 \\n\\t\\tresult = string.to_s if result.empty?\\n\\t\\tresult\\n\\tend\\nend"}
55	26	b432e6e2ce5797423e36b66c	pending	javascript	bob	\N	\N	0	1	2015-09-29 19:44:02	2015-09-29 19:44:02	81	{"/javascript/bob/bob.js":"//\\n// This is only a SKELETON file for the \\"Bob\\" exercise. It's been provided as a\\n// convenience to get you started writing code faster.\\n//\\n\\nvar Bob = function() {};\\n\\nBob.prototype.hey = function(input) {\\n\\n    var tokens = input.split(\\" \\");\\n\\n    var upper = 0;\\n    var lower = 0;\\n    for (var i = 0, len = input.length; i \\u003c len; i++) {\\n        var str = input[i].toString();\\n        if (str == str.toUpperCase()) {\\n            upper++;\\n        } else {\\n            lower++;\\n        }\\n    }\\n\\n    if (upper \\u003e lower) {\\n        return 'Whoa, chill out!';\\n    }\\n\\n    if (input.indexOf('!') \\u003e= 0) {\\n        return 'Whatever.';\\n    }\\n\\n    if (input.indexOf('?') \\u003e= 0) {\\n        return 'Sure.';\\n    }\\n\\n    return 'Whatever.';\\n};\\n\\nmodule.exports = Bob;"}
56	26	ea060fed50c82782193f5142	pending	ruby	robot-name	\N	\N	0	1	2015-08-15 14:24:45	2015-08-15 14:24:45	83	{"robot.rb":"\\r\\n\\r\\nclass Robot\\r\\n\\tdef initialize\\r\\n\\t\\t@myName = generateName\\r\\n\\tend\\r\\n\\t\\r\\n\\tdef name\\r\\n\\t\\t@myName\\r\\n\\tend\\r\\n\\t\\r\\n\\tdef reset\\r\\n\\t\\t@myName = generateName\\r\\n\\tend\\r\\n\\t\\r\\n\\tdef generateName\\r\\n\\t\\trandomString(2) + rand(100...999).to_s\\r\\n\\tend\\r\\n\\t\\r\\n\\tdef randomString(numLetters)\\r\\n\\t\\treturn ('a'..'z').to_a.shuffle[0,numLetters].join\\r\\n\\tend\\r\\n\\r\\nend"}
57	26	b35075f4462ad79acb4af11b	done	elixir	word-count	\N	\N	0	1	2015-11-04 04:28:37	2015-11-04 04:28:37	84	{"word_count.exs":"defmodule Words do\\n  @doc \\"\\"\\"\\n  Count the number of words in the sentence.\\n\\n  Words are compared case-insensitively.\\n  \\"\\"\\"\\n  @spec count(String.t) :: map()\\n  def count(sentence) do\\n    sentence\\n    |\\u003e String.downcase\\n    |\\u003e String.graphemes\\n    |\\u003e Enum.filter(\\u0026_filter_nonletters/1)\\n    |\\u003e Enum.join\\n    |\\u003e String.split([\\" \\", \\"_\\", \\", \\"])\\n    |\\u003e Enum.filter(\\u0026(String.length(\\u00261) \\u003e 0))\\n    |\\u003e _count(%{})\\n  end\\n\\n  @spec _count(list, map()) :: map()\\n  defp _count([head | tail], result), do: Map.update(_count(tail, result), head, 1, fn value -\\u003e value + 1 end)\\n  defp _count(_, result), do: result\\n\\n  @spec _filter_nonletters(String.t) :: boolean\\n  defp _filter_nonletters(char), do: Regex.match?(~r/[\\\\p{L}\\\\p{N}-_ ]/, char)\\nend"}
58	26	c67cc06df84555060ec3506c	pending	java	etl	\N	\N	0	1	2015-10-15 04:37:40	2015-10-15 04:37:40	85	{"/java/etl/src/main/java/Etl.java":"import java.util.HashMap;\\nimport java.util.List;\\nimport java.util.Map;\\n\\npublic class Etl {\\n    public Map\\u003cString, Integer\\u003etransform(Map\\u003cInteger, List\\u003cString\\u003e\\u003e oldValues) {\\n        Map\\u003cString, Integer\\u003e newValues = new HashMap\\u003cString, Integer\\u003e();\\n        for (Map.Entry\\u003cInteger, List\\u003cString\\u003e\\u003e entry : oldValues.entrySet()) {\\n            Integer key = entry.getKey();\\n            List\\u003cString\\u003e values = entry.getValue();\\n            for (String value : values) {\\n                newValues.put(value.toLowerCase(), key);\\n            }\\n\\n        }\\n        return newValues;\\n\\n\\n    }\\n\\n\\n}"}
59	26	e63d86d49c89d613f10245ae	pending	python	roman-numerals	\N	\N	0	1	2015-08-29 16:05:25	2015-08-29 16:05:25	86	{"roman.py":"NUMERALS = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L',\\n            90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\\n\\n\\ndef numeral(arabic):\\n    roman = []\\n    for value in sorted(NUMERALS.keys(), reverse=True):\\n        while arabic \\u003e= value:\\n            roman.append(NUMERALS[value])\\n            arabic -= value\\n    result = ''.join(roman)\\n    if from_roman(result):\\n        return result\\n\\n\\ndef from_roman(roman):\\n    result = 0\\n    index = 0\\n    for value in sorted(NUMERALS.keys(), reverse=True):\\n        romnum = NUMERALS[value]\\n        while roman[index:index + len(romnum)] == romnum:\\n            result += value\\n            index += len(romnum)\\n    return result"}
60	26	fb9384732de7ab2509b56933	superseded	ruby	bob	\N	\N	0	2	2015-07-23 07:40:12	2015-07-23 07:40:12	94	{"bob.rb":"class Bob\\n  def hey(input)\\n    if is_silence?(input)\\n      'Fine. Be that way!'\\n    elsif is_shouting?(input)\\n      'Woah, chill out!'\\n    elsif is_question?(input)\\n      'Sure.'\\n    else\\n      'Whatever.'\\n    end\\n  end\\n  def is_silence?(input)\\n    !input.match(/\\\\S+/)\\n  end\\n  def is_question?(input)\\n    input.end_with?('?')\\n  end\\n  def is_shouting?(input)\\n    input.upcase == input\\n  end\\nend"}
61	26	f0646a1c82a106975e26cb6d	done	ruby	bob	\N	\N	0	3	2015-08-14 17:01:29	2015-08-14 17:01:29	94	{"bob.rb":"class Bob\\n  def hey(input)\\n    if is_silence?(input)\\n      'Fine. Be that way!'\\n    elsif is_shouting?(input)\\n      'Woah, chill out!'\\n    elsif is_question?(input)\\n      'Sure.'\\n    else\\n      'Whatever.'\\n    end\\n  end\\n  def is_silence?(input)\\n    input.strip == \\"\\"\\n  end\\n  def is_question?(input)\\n    input.end_with?('?')\\n  end\\n  def is_shouting?(input)\\n    input.upcase == input\\n  end\\nend"}
62	26	26b1bc7517183e902ef77c69	superseded	ruby	bob	\N	\N	0	1	2015-11-03 09:43:32	2015-11-03 09:43:32	94	{"bob.rb":"class Bob\\n  def hey(input)\\n    if(is_silence?(input))\\n      'Fine. Be that way!'\\n    elsif(is_shouting?(input))\\n      'Woah, chill out!'\\n    elsif(is_question?(input))\\n      'Sure.'\\n    else\\n      'Whatever.'\\n    end\\n  end\\n  def is_silence?(input)\\n    !input.match(/\\\\S+/)\\n  end\\n  def is_question?(input)\\n    input.end_with?('?')\\n  end\\n  def is_shouting?(input)\\n    input.upcase == input\\n  end\\nend"}
63	26	00f95835e4375d8e94a65c3b	\N	ruby	leap	\N	\N	0	2	2015-08-17 06:47:45	2015-08-17 06:47:45	95	{"leap.rb":"class Year\\n  VERSION = 1\\n  def self.leap?(year)\\n    year % 4 == 0 \\u0026\\u0026 year % 100 != 0 || year % 400 == 0\\n  end\\nend"}
64	26	82243d63312252de200c6130	\N	ruby	leap	\N	\N	0	1	2015-10-13 21:01:27	2015-10-13 21:01:27	95	{"leap.rb":"class Year\\n  VERSION = 1\\n  def self.leap?(year)\\n    (year % 4 == 0 \\u0026\\u0026 year % 100 != 0 || year % 400 == 0) ? true : false\\n  end\\nend"}
65	26	27c62154eb80178c773a0974	pending	elixir	scrabble-score	\N	\N	0	1	2015-07-28 07:18:41	2015-07-28 07:18:41	97	{"scrabble.exs":"defmodule Scrabble do\\n  @doc \\"\\"\\"\\n  Calculate the scrabble score for the word.\\n  \\"\\"\\"\\n  @score %{\\"A\\" =\\u003e 1, \\"B\\" =\\u003e 3, \\"C\\" =\\u003e 3, \\"D\\" =\\u003e 2, \\"E\\" =\\u003e 1, \\"F\\" =\\u003e 4, \\"G\\" =\\u003e 2, \\"H\\" =\\u003e 4, \\"I\\" =\\u003e 1, \\"J\\" =\\u003e 8, \\"K\\" =\\u003e 5, \\"L\\" =\\u003e 1, \\"M\\" =\\u003e 3, \\"N\\" =\\u003e 1, \\"O\\" =\\u003e 1, \\"P\\" =\\u003e 3, \\"Q\\" =\\u003e 10, \\"R\\" =\\u003e 1, \\"S\\" =\\u003e 1, \\"T\\" =\\u003e 1, \\"U\\" =\\u003e 1, \\"V\\" =\\u003e 4, \\"W\\" =\\u003e 4, \\"X\\" =\\u003e 8, \\"Y\\" =\\u003e 4, \\"Z\\" =\\u003e 10}\\n  \\n  @spec score(String.t) :: non_neg_integer\\n  def score(word) do\\n    word \\n    |\\u003e String.upcase\\n    |\\u003e String.graphemes\\n    |\\u003e Enum.reduce(0, \\u0026(\\u00262 + Map.get(@score, \\u00261, 0)))\\n  end\\nend"}
115	30	3f9e3c52ba029860d607dd3d	hibernating	python	gigasecond	\N	\N	0	1	2015-09-25 05:37:22	2015-09-25 05:37:22	175	{"gigasecond.py":"import datetime\\r\\n\\r\\ndef add_gigasecond(date):\\r\\n\\tdate = date + datetime.timedelta(seconds = 1000000000)\\r\\n\\r\\n\\treturn date\\r"}
116	35	43991515b38f0f084acdcb8e	pending	ruby	robot-name	\N	\N	0	1	2015-08-24 07:21:46	2015-08-24 07:21:46	177	{"robot_name.rb":"# robot_name.rb\\n\\nclass Robot\\n  attr_accessor :name\\n  @@names = []\\n\\n  def initialize\\n    @name = random_name\\n    @@names \\u003c\\u003c @name\\n  end\\n\\n  def random_name\\n    \\"#{[*('A'..'Z')].sample(2).join}#{[*('0'..'9')].sample(3).join}\\" unless @@names.include?(@name)\\n  end\\n\\n  def reset\\n    @@names.delete(name)\\n    self.name = random_name\\n  end\\n\\nend"}
66	26	a30d593d9af3ada1928780aa	pending	scala	raindrops	\N	\N	0	1	2015-08-02 18:43:43	2015-08-02 18:43:43	100	{"Raindrops.scala":"case class Raindrops() {\\r\\n    val words : Map[Long,String] = Map(\\r\\n        3L -\\u003e \\"Pling\\",\\r\\n        5L -\\u003e \\"Plang\\",\\r\\n        7L -\\u003e \\"Plong\\"\\r\\n    )\\r\\n    def convert(x : Long) = x match {\\r\\n        case 1 =\\u003e \\"1\\"\\r\\n        case n =\\u003e convertFrom2(x)\\r\\n    }\\r\\n    def convertFrom2(x : Long) = uniq(primeFactors(x).toStream).map(words getOrElse (_,\\"\\")).mkString match {\\r\\n        case \\"\\" =\\u003e x.toString\\r\\n        case n =\\u003e n\\r\\n    }\\r\\n\\r\\n    def uniq(xs : Stream[Long]) : Stream[Long] = xs.head #:: (xs zip xs.tail map {\\r\\n        case (p,n) =\\u003e if (p == n) None else Some(n)\\r\\n    }).flatten\\r\\n    \\r\\n    def primeFactors(n : Long) = {\\r\\n        def rec(n : Long, t : Iterable[Long]) : List[Long] = {\\r\\n            var m = n\\r\\n            var s = t\\r\\n            var r : List[Long] = List()\\r\\n            while (m != 1) {\\r\\n                (m % s.head) match {\\r\\n                    case 0 =\\u003e {\\r\\n                        r = r ++ List(s.head)\\r\\n                        m = m / s.head\\r\\n                    }\\r\\n                    case _ =\\u003e s = s.tail\\r\\n                }\\r\\n            }\\r\\n            r\\r\\n        }\\r\\n\\r\\n        def primes() : Iterable[Long] = longs(2).filter(\\r\\n            i =\\u003e longs(2).takeWhile(j =\\u003e j\\u003cMath.sqrt(i+1)).filter(i % _ == 0).isEmpty\\r\\n        )\\r\\n\\r\\n        def longs(from : Long) : Stream[Long] = from #:: longs(from + 1)\\r\\n        \\r\\n        rec(n, primes())\\r\\n    }\\r\\n}"}
67	26	5d1d151d24233435f7244c00	hibernating	ruby	gigasecond	\N	\N	0	1	2015-09-16 20:22:14	2015-09-16 20:22:14	105	{"gigasecond.rb":"# Exercism\\n# Ex-3 (Gigasecond)\\n\\nclass Gigasecond\\n  Gigasecond::VERSION = 1\\n  SECONDS = 10**9\\n\\n  def self.from(time)\\n    (time.to_time + SECONDS).to_time\\n  end\\nend"}
68	26	49c376da0eca2ae6f6dcd2ea	pending	python	largest-series-product	\N	\N	0	1	2015-09-26 15:25:47	2015-09-26 15:25:47	107	{"series.py":"from operator import mul\\nfrom functools import reduce\\n\\ndef largest_product(string, length):\\n    l = []\\n    for s in slices(string, length):\\n        l.append(reduce(mul, s, 1))\\n    return(max(l))\\n\\ndef slices(string, length):\\n    if length \\u003e len(string):\\n        raise(ValueError)\\n    r = []\\n    for i in range(0,len(string)+1-length):\\n        r.append([int(n) for n in (string[i:i+length])])\\n    return(r)"}
69	26	6ecf4c9fe8f2f5b03dd0381e	hibernating	haskell	grains	\N	\N	0	1	2015-11-08 06:51:07	2015-11-08 06:51:07	109	{"Grains.hs":"module Grains (\\r\\n\\tsquare,\\r\\n\\ttotal\\r\\n) where\\r\\n\\r\\nsquare :: Integral a =\\u003e a -\\u003e a\\r\\nsquare = (2 ^) . (-1 +)\\r\\n\\r\\ntotal :: Integral a =\\u003e a\\r\\ntotal = (-1) + square 65"}
70	26	44ef0975ec82b21489de842f	pending	python	gigasecond	\N	\N	0	1	2015-08-12 21:40:55	2015-08-12 21:40:55	111	{"/python/gigasecond/gigasecond.py":"import datetime\\n\\ndef add_gigasecond(d):\\n    return d + datetime.timedelta(0,1000000000)"}
71	26	2b59f3b59631f8ba5535e7ae	pending	python	leap	\N	\N	0	1	2015-09-26 21:26:11	2015-09-26 21:26:11	116	{"leap.py":"def is_leap_year(year):\\n    if year % 4 == 0:\\n        if year % 100 == 0:\\n            if year % 400 == 0:\\n                return True\\n            else:\\n                return False"}
72	26	090f990c6e68ba9f28734764	superseded	lisp	bob	\N	\N	0	1	2015-07-26 20:14:17	2015-07-26 20:14:17	117	{"bob.lisp":"(defpackage #:bob\\n  (:use #:cl)\\n  (:export #:response-for))\\n(in-package #:bob)\\n\\n(defun contains-alpha-chars-p (msg)\\n  (some #'(lambda (c) (char-not-greaterp #\\\\a c #\\\\z))\\n\\t(coerce msg 'list)))\\n\\n(defun question-p (input)\\n  (equal #\\\\? (char input (1- (length input)))))\\n(defun silence-p (input)\\n  (string= \\"\\" (string-trim (list #\\\\space) input)))\\n(defun shouting-p (input)\\n  (and (contains-alpha-chars-p input)\\n       (string= input (string-upcase input))))\\n\\n(defun response-for (input)\\n  (cond ((silence-p input) \\"Fine. Be that way!\\")\\n\\t((shouting-p input) \\"Whoa, chill out!\\")\\n\\t((question-p input) \\"Sure.\\")\\n\\t(t \\"Whatever.\\")))"}
73	26	69a89e1995fc9e80f7625046	hibernating	lisp	bob	\N	\N	0	2	2015-11-11 02:50:12	2015-11-11 02:50:12	117	{"bob.lisp":"(defpackage #:bob\\n  (:use #:cl)\\n  (:export #:response-for))\\n(in-package #:bob)\\n\\n(defun contains-alpha-chars-p (str)\\n  (some #'alpha-char-p str))\\n\\n(defun question-p (input)\\n  (equal #\\\\? (char input (1- (length input)))))\\n(defun silence-p (input)\\n  (string= \\"\\" (string-trim (list #\\\\space) input)))\\n(defun shouting-p (input)\\n  (and (contains-alpha-chars-p input)\\n       (string= input (string-upcase input))))\\n\\n(defun response-for (what-they-said)\\n  (cond ((silence-p what-they-said) \\"Fine. Be that way!\\")\\n\\t((shouting-p what-they-said) \\"Whoa, chill out!\\")\\n\\t((question-p what-they-said) \\"Sure.\\")\\n\\t(t \\"Whatever.\\")))"}
74	26	dea1b44cd11442203dc49269	hibernating	ruby	hamming	\N	\N	0	1	2015-11-07 22:47:47	2015-11-07 22:47:47	118	{"hamming.rb":"class Hamming\\n  def self.compute(string1, string2)\\n    string1_array = string1.split(//)\\n    string2_array = string2.split(//)\\n\\n    if string1_array.length \\u003c string2_array.length\\n      shorter_strand = string1_array\\n    else\\n      shorter_strand = string2_array\\n    end\\n\\n    hamming_distance = 0\\n    i = 0\\n    while i \\u003c shorter_strand.length\\n      if string1_array[i] != string2_array[i]\\n        hamming_distance += 1\\n      end\\n      i += 1\\n    end\\n    hamming_distance\\n  end\\nend"}
75	7	948b73302842ade7a84d2d00	pending	python	palindrome-products	\N	\N	0	1	2015-05-23 12:39:54	2015-05-23 12:39:54	120	{"palindrome.py":"def isPalindrome(integer):\\n\\treturn str(integer) == str(integer)[::-1]\\n\\ndef smallest_palindrome(min_factor=0, max_factor=999):\\n\\tif min_factor == 0: min_factor = 1\\n\\n\\t# Initialization\\n\\tresult = [max_factor ** 2, (0,0)]\\n\\n\\tfor i in range(min_factor, max_factor + 1):\\n\\t\\tfor j in range(min_factor, max_factor + 1):\\n\\t\\t\\tcandidate = i * j\\n\\t\\t\\tif isPalindrome(candidate):\\n\\t\\t\\t\\tif candidate \\u003e result[0]: break\\n\\t\\t\\t\\tif candidate \\u003c result[0]:\\n\\t\\t\\t\\t\\tresult = [candidate, [min(i,j), max(i,j)]]\\n\\t\\t\\t\\telif candidate == result[0] and [min(i,j), max(i,j)] not in result[1]:\\n\\t\\t\\t\\t\\tresult[1] += [min(i,j), max(i,j)]\\n\\treturn result\\n\\ndef largest_palindrome(max_factor = 999, min_factor=0):\\n\\tif min_factor == 0: min_factor = 1\\n\\n\\t# Initialization\\n\\tbiggest = 1\\n\\tfactors = []\\n\\t\\n\\tfor i in reversed(range(min_factor, max_factor + 1)):\\n\\t\\tfor j in reversed(range(min_factor, max_factor + 1)):\\n\\t\\t\\tcandidate = i * j\\n\\t\\t\\tif isPalindrome(candidate):\\n\\t\\t\\t\\tif candidate \\u003c biggest: break\\n\\t\\t\\t\\tif candidate \\u003e biggest:\\n\\t\\t\\t\\t\\tbiggest = candidate\\n\\t\\t\\t\\t\\tfactors = tuple([min(i,j),max(i,j)])\\n\\t\\t\\t\\telif candidate == biggest:\\n\\t\\t\\t\\t\\tif tuple([i,j]) not in factors: factors += tuple([i,j])\\n\\treturn (biggest, factors)\\n\\n# I cannot find the way to return factors as the test intends.\\n# All tests pass except for one (largest palindrome of single digits) that will fail\\n# I submit this exercise and will try to come back to it later to sort this out"}
76	7	b1a17d67f310f1d7c776e379	hibernating	ruby	grains	\N	\N	0	1	2015-08-19 03:10:34	2015-08-19 03:10:34	121	{"grains.rb":"class Grains\\n  def square(n)\\n    2**(n-1)\\n  end\\n\\n  def total\\n    (1..64).inject(0) { |result, val| result = result + square(val); result }\\n  end\\nend"}
78	23	d1eba17131cef6adea221296	superseded	go	queen-attack	\N	\N	0	1	2015-08-25 09:19:40	2015-08-25 09:19:40	126	{"queen_attack.go":"package queenattack\\n\\nimport \\"errors\\"\\n\\ntype coord struct {\\n\\tx, y int\\n}\\n\\n// CanQueenAttack indicates whether or not two queens\\n// are positioned on a chess board so that they can attack\\n// each other.\\nfunc CanQueenAttack(whitePos, blackPos string) (bool, error) {\\n\\twhite, err := fromString(whitePos)\\n\\tif err != nil {\\n\\t\\treturn false, err\\n\\t}\\n\\tblack, err := fromString(blackPos)\\n\\tif err != nil {\\n\\t\\treturn false, err\\n\\t}\\n\\n\\tif white.x == black.x \\u0026\\u0026 white.y == black.y {\\n\\t\\treturn false, errors.New(\\"invalid piece position (overlapping)\\")\\n\\t}\\n\\n\\tcanAttack := false ||\\n\\t\\twhite.x == black.x || // same column\\n\\t\\twhite.y == black.y || // same row\\n\\t\\twhite.x+white.y == black.x+black.y || // one diagonal\\n\\t\\twhite.x-white.y == black.x-black.y // other diagonal\\n\\n\\treturn canAttack, nil\\n}\\n\\n// converts from board no\\nfunc fromString(pos string) (coord, error) {\\n\\tif len(pos) != 2 {\\n\\t\\treturn coord{}, errors.New(\\"invalid piece position (empty)\\")\\n\\t}\\n\\tx := int(pos[0] - 'a')\\n\\ty := int(pos[1] - '0')\\n\\tif x \\u003c 0 || x \\u003e 7 || y \\u003c 0 || y \\u003e 7 {\\n\\t\\treturn coord{}, errors.New(\\"invalid piece position (out of board)\\")\\n\\t}\\n\\treturn coord{x, y}, nil\\n}"}
79	23	3e16d6d43ca0be7df696819a	pending	go	queen-attack	\N	\N	0	2	2015-09-23 22:36:35	2015-09-23 22:36:35	126	{"queen_attack.go":"package queenattack\\n\\nimport \\"errors\\"\\n\\ntype coord struct {\\n\\tx, y int\\n}\\n\\n// CanQueenAttack indicates whether or not two queens\\n// are positioned on a chess board so that they can attack\\n// each other.\\nfunc CanQueenAttack(whitePos, blackPos string) (bool, error) {\\n\\twhite, err := fromString(whitePos)\\n\\tif err != nil {\\n\\t\\treturn false, err\\n\\t}\\n\\tblack, err := fromString(blackPos)\\n\\tif err != nil {\\n\\t\\treturn false, err\\n\\t}\\n\\n\\tif white.x == black.x \\u0026\\u0026 white.y == black.y {\\n\\t\\treturn false, errors.New(\\"invalid piece position (overlapping)\\")\\n\\t}\\n\\n\\tcanAttack := false ||\\n\\t\\twhite.x == black.x || // same column\\n\\t\\twhite.y == black.y || // same row\\n\\t\\twhite.x+white.y == black.x+black.y || // one diagonal\\n\\t\\twhite.x-white.y == black.x-black.y // other diagonal\\n\\n\\treturn canAttack, nil\\n}\\n\\n// converts from algebraic chess notation to X,Y coordinates (0-based)\\nfunc fromString(pos string) (coord, error) {\\n\\tif len(pos) != 2 {\\n\\t\\treturn coord{}, errors.New(\\"invalid piece position (empty)\\")\\n\\t}\\n\\tx := int(pos[0] - 'a')\\n\\ty := int(pos[1] - '1')\\n\\tif x \\u003c 0 || x \\u003e 7 || y \\u003c 0 || y \\u003e 7 {\\n\\t\\treturn coord{}, errors.New(\\"invalid piece position (out of board)\\")\\n\\t}\\n\\treturn coord{x, y}, nil\\n}"}
80	23	566a405d57c4e2f536ea9d1e	pending	go	secret-handshake	\N	\N	0	1	2015-11-04 13:31:16	2015-11-04 13:31:16	127	{"secret.go":"package secret\\n\\n// Operation represents one our secret operations and it's trigger\\ntype Operation struct {\\n\\tbitmask int\\n\\tmessage string\\n}\\n\\nvar operations = []Operation{\\n\\tOperation{0x1, \\"wink\\"},\\n\\tOperation{0x2, \\"double blink\\"},\\n\\tOperation{0x4, \\"close your eyes\\"},\\n\\tOperation{0x8, \\"jump\\"},\\n}\\n\\nfunc maybeReverse(lst []Operation, num int) []Operation {\\n\\tvar result = append([]Operation(nil), lst...)\\n\\tif num\\u00260x10 \\u003e 0 {\\n\\t\\tfor i, j := 0, len(result)-1; i \\u003c j; i, j = i+1, j-1 {\\n\\t\\t\\tresult[i], result[j] = result[j], result[i]\\n\\t\\t}\\n\\t}\\n\\treturn result\\n}\\n\\n// Handshake calculates the correct sequence of operations for a given number\\nfunc Handshake(num int) []string {\\n\\tif num \\u003c 0 {\\n\\t\\treturn []string{}\\n\\t}\\n\\n\\tvar result []string\\n\\tfor _, op := range maybeReverse(operations, num) {\\n\\t\\tif num\\u0026op.bitmask \\u003e 0 {\\n\\t\\t\\tresult = append(result, op.message)\\n\\t\\t}\\n\\t}\\n\\n\\treturn result\\n}"}
81	23	3b21910f37f922161947bbb7	done	haskell	point-mutations	\N	\N	0	5	2015-09-16 21:22:44	2015-09-16 21:22:44	128	{"DNA.hs":"module DNA (hammingDistance) where\\r\\n\\r\\n(.:) :: (x-\\u003ey) -\\u003e (a-\\u003eb-\\u003ex) -\\u003e (a-\\u003eb-\\u003ey)\\r\\n(g .: f) a b = g (f a b) -- = (.).(.)\\r\\n\\r\\nhammingDistance :: String -\\u003e String -\\u003e Int\\r\\nhammingDistance = sum .: zipWith (fromEnum .: (/=))\\r"}
82	23	5ac56afba1034a8e02ac83d0	superseded	haskell	point-mutations	\N	\N	0	1	2015-10-08 05:48:35	2015-10-08 05:48:35	128	{"DNA.hs":"module DNA (hammingDistance) where\\r\\n\\r\\nhammingDistance :: String -\\u003e String -\\u003e Int\\r\\nhammingDistance = sum . zipWith (fromBool . (/=))\\r"}
83	23	bffdb7cbeac99c2cc0754290	superseded	haskell	point-mutations	\N	\N	0	2	2015-10-14 07:32:45	2015-10-14 07:32:45	128	{"DNA.hs":"module DNA (hammingDistance) where\\n-- import Foreign.Marshal.Utils (fromBool)\\n\\nfromBool :: Num a =\\u003e Bool -\\u003e a\\nfromBool False = 0\\nfromBool True  = 1\\n\\nhammingDistance :: String -\\u003e String -\\u003e Int\\nhammingDistance a b = sum $ map fromBool $ zipWith (/=) a b"}
84	23	43951890814c4c813ff5f254	superseded	haskell	point-mutations	\N	\N	0	3	2015-10-16 22:09:49	2015-10-16 22:09:49	128	{"DNA.hs":"module DNA (hammingDistance) where\\r\\nimport Foreign.Marshal.Utils (fromBool)\\r\\n\\r\\n(.:) :: (x-\\u003ey) -\\u003e (a-\\u003eb-\\u003ex) -\\u003e (a-\\u003eb-\\u003ey)\\r\\n(.:) = (.).(.) -- (g .: f) a b = g (f a b)\\r\\n\\r\\nhammingDistance :: String -\\u003e String -\\u003e Int\\r\\nhammingDistance a b = sum $ zipWith (fromBool .: (/=)) a b\\r"}
85	23	322cf34ee8ce311135a1d723	superseded	haskell	point-mutations	\N	\N	0	4	2015-10-18 09:40:46	2015-10-18 09:40:46	128	{"DNA.hs":"module DNA (hammingDistance) where\\r\\nimport Foreign.Marshal.Utils (fromBool)\\r\\n\\r\\n(.:) :: (x-\\u003ey) -\\u003e (a-\\u003eb-\\u003ex) -\\u003e (a-\\u003eb-\\u003ey)\\r\\n(.:) = (.).(.) -- (g .: f) a b = g (f a b)\\r\\n\\r\\nhammingDistance :: String -\\u003e String -\\u003e Int\\r\\nhammingDistance = sum .: zipWith (fromBool .: (/=))\\r"}
86	23	8f0a548294ca1a330f0f7016	pending	python	meetup	\N	\N	0	3	2015-09-12 22:51:30	2015-09-12 22:51:30	129	{"meetup.py":"import time\\nimport calendar\\nfrom datetime import datetime, timedelta\\n\\n\\ndef meetup_day(year, month, day_name, rule):\\n    if rule == 'teenth':\\n        return meetup_day_teenth(year, month, day_name)\\n    return meetup_day_weekly(year, month, day_name, rule)\\n\\n\\ndef meetup_day_teenth(year, month, day_name):\\n    result = datetime(year, month, 13)\\n    while result.day \\u003c 20 and result.weekday() != to_weekday(day_name):\\n        result += timedelta(days=1)\\n    return result.date()\\n\\n\\ndef meetup_day_weekly(year, month, day_name, rule):\\n    weeks = {\\"1st\\": 1, \\"2nd\\": 2, \\"3rd\\": 3, \\"4th\\": 4, \\"last\\": 5}\\n    result = first_weekday(year, month, day_name)\\n    result += timedelta(days=(weeks[rule] - 1) * 7)\\n    return result.date()\\n\\n\\ndef first_weekday(year, month, day_name):\\n    result = datetime(year, month, 1)\\n    while result.weekday() != to_weekday(day_name):\\n        result += timedelta(days=1)\\n    return result\\n\\n\\ndef to_weekday(day_name):\\n    return dict(zip(calendar.day_name, range(0, 7)))[day_name]"}
122	35	ed95ea5431832a76e801e7fc	superseded	python	bob	\N	\N	0	1	2015-07-06 21:59:21	2015-07-06 21:59:21	180	{"/python/bob/bob.py":"#\\n# Skeleton file for the Python \\"Bob\\" exercise.\\n#\\n\\nimport re\\n\\ndef is_capslocked(letter):\\n    # Letter can be typed with the capslock key on.\\n    return not letter.islower()\\n\\ndef is_shouting(word):\\n    # Must be typing with the capslock key on\\n    # and using at least one letter\\n    return (all(is_capslocked(char) for char in word) and\\n           any(char.isalpha() for char in word))\\n\\ndef hey(what):\\n    what = what.strip()\\n\\n    if not what:\\n        return 'Fine. Be that way!'\\n\\n    if is_shouting(what):\\n        return 'Whoa, chill out!'\\n\\n    if what.endswith('?'):\\n        return 'Sure.'\\n\\n    else:\\n        return 'Whatever.'\\n\\n    return"}
87	23	8a1f5cdf27a4fc7dc7f06790	superseded	python	meetup	\N	\N	0	1	2015-09-24 17:35:18	2015-09-24 17:35:18	129	{"meetup.py":"import time\\nimport calendar\\nfrom datetime import datetime, timedelta\\n\\n\\ndef meetup_day(year, month, dayOfWeek, rule):\\n    if rule == 'teenth':\\n        return meetup_day_teenth(year, month, dayOfWeek)\\n\\n    return meetup_day_weekly(year, month, dayOfWeek, rule)\\n\\n\\ndef meetup_day_teenth(year, month, day_name):\\n    result = datetime(year, month, 13)\\n    while result.day \\u003c 20 and result.weekday() != days_of_week()[day_name]:\\n        result += timedelta(days=1)\\n    return result.date()\\n\\n\\ndef meetup_day_weekly(year, month, day_name, rule):\\n    weeks = {\\"1st\\": 1, \\"2nd\\": 2, \\"3rd\\": 3, \\"4th\\": 4, \\"last\\": 5}\\n\\n    result = datetime(year, month, 1)\\n    while result.weekday() != days_of_week()[day_name]:\\n        result += timedelta(days=1)\\n\\n    result += timedelta(days=(weeks[rule] - 1) * 7)\\n\\n    return result.date()\\n\\n\\ndef days_of_week():\\n    return {name: index for index, name in enumerate(calendar.day_name)}"}
88	23	129a9a365fc686a3e7b84c08	superseded	python	meetup	\N	\N	0	2	2015-11-11 19:33:28	2015-11-11 19:33:28	129	{"meetup.py":"import time\\nimport calendar\\nfrom datetime import datetime, timedelta\\n\\n\\ndef meetup_day(year, month, dayOfWeek, rule):\\n    if rule == 'teenth':\\n        return meetup_day_teenth(year, month, dayOfWeek)\\n    return meetup_day_weekly(year, month, dayOfWeek, rule)\\n\\n\\ndef meetup_day_teenth(year, month, day_name):\\n    result = datetime(year, month, 13)\\n    while result.day \\u003c 20 and result.weekday() != to_weekday(day_name):\\n        result += timedelta(days=1)\\n    return result.date()\\n\\n\\ndef meetup_day_weekly(year, month, day_name, rule):\\n    weeks = {\\"1st\\": 1, \\"2nd\\": 2, \\"3rd\\": 3, \\"4th\\": 4, \\"last\\": 5}\\n    result = first_weekday(year, month, day_name)\\n    result += timedelta(days=(weeks[rule] - 1) * 7)\\n    return result.date()\\n\\n\\ndef first_weekday(year, month, day_name):\\n    result = datetime(year, month, 1)\\n    while result.weekday() != to_weekday(day_name):\\n        result += timedelta(days=1)\\n    return result\\n\\n\\ndef to_weekday(day_name):\\n    return dict(zip(calendar.day_name, range(0, 7)))[day_name]"}
89	23	0a39056326bfe9df3a6047ee	pending	ruby	robot-simulator	\N	\N	0	1	2015-09-24 16:05:37	2015-09-24 16:05:37	131	{"robot_simulator.rb":"class Robot\\n    \\n    def orient( direction )\\n        raise ArgumentError unless DIRECTIONS.has_key? direction\\n        @dir = direction\\n    end\\n    \\n    def bearing\\n        @dir\\n    end\\n    \\n    def turn_right\\n        @dir = DIRECTIONS[@dir][3]\\n    end\\n    \\n    def turn_left\\n        @dir = DIRECTIONS[@dir][2]\\n    end\\n    \\n    def at( x, y )\\n        @pos = [ x, y ]\\n    end\\n    \\n    def coordinates\\n        @pos\\n    end\\n    \\n    def advance\\n        @pos = [ @pos[0] + DIRECTIONS[@dir][0], @pos[1] + DIRECTIONS[@dir][1] ]\\n    end\\n    \\n    private\\n    \\n    DIRECTIONS = {\\n        :north =\\u003e [ 0, 1, :west, :east],\\n        :south =\\u003e [ 0,-1, :east, :west],\\n        :east  =\\u003e [ 1, 0, :north,:south],\\n        :west  =\\u003e [-1, 0, :south,:north]\\n    }\\n    \\nend\\n\\nclass Simulator\\n    \\n    def instructions( str )\\n        str.chars.map{ |c| INSTRUCTIONS[c] }\\n    end\\n    \\n    def place( robot, x: 0, y: 0, direction: :north )\\n        robot.at( x, y )\\n        robot.orient( direction )\\n    end\\n    \\n    def evaluate( robot, str )\\n        instructions(str).each{ |cmd| robot.method(cmd).call }\\n    end\\n    \\n    private \\n    \\n    INSTRUCTIONS = {\\n        'A' =\\u003e :advance,\\n        'L' =\\u003e :turn_left,\\n        'R' =\\u003e :turn_right\\n    }\\n    \\nend"}
90	23	04b3c53def756a1fa92c4edb	done	python	rna-transcription	\N	\N	0	1	2015-09-15 02:14:25	2015-09-15 02:14:25	134	{"dna.py":"def to_rna(s):\\n    polymerase = {'G': 'C', 'C': 'G', 'T': 'A', 'A': 'U'}\\n    return ''.join(polymerase[b] for b in s)"}
91	23	5940e8f698743b5646ed37bc	hibernating	ruby	gigasecond	\N	\N	0	2	2015-08-14 06:10:01	2015-08-14 06:10:01	136	{"gigasecond.rb":"class Gigasecond\\n  @@giga_second = 10**9\\n\\n  def initialize date\\n    \\n    @time = date.to_time\\n\\n  end\\n\\n  def date\\n     (@time + @@giga_second).to_date\\n  end\\n\\nend"}
92	23	61c9625365263f1b193358c3	superseded	ruby	gigasecond	\N	\N	0	1	2015-10-09 10:58:06	2015-10-09 10:58:06	136	{"gigasecond.rb":"class Gigasecond\\n  @@giga_second = 10**9\\n\\n  def initialize date\\n    \\n    @seconds = date.strftime('%s').to_i\\n\\n  end\\n\\n  def date\\n     DateTime.strptime((@seconds + @@giga_second).to_s, '%s').to_date\\n  end\\n\\nend"}
93	23	dda8753689b592f48eb67da9	done	javascript	grade-school	\N	\N	0	1	2015-09-05 07:59:48	2015-09-05 07:59:48	138	{"grade-school.js":"function School () {\\n  var db = {};\\n  this.add = function (child, grade) {\\n    var children = db[grade] || [];\\n    children.push(child);\\n    children.sort();\\n    db[grade] = children;\\n  };\\n\\n  this.records = function () {\\n    return db;\\n  };\\n}\\n\\nSchool.prototype.roster = function() {\\n  return this.records();\\n};\\n\\nSchool.prototype.grade = function(gradeNumber) {\\n  return this.records()[gradeNumber] || [];\\n};\\n\\nmodule.exports = School;"}
94	23	72a0f14b7e10a744be184e4c	pending	ruby	roman-numerals	\N	\N	0	1	2015-08-17 10:02:02	2015-08-17 10:02:02	140	{"roman.rb":"class Fixnum\\n\\n  def to_roman\\n    i = self\\n    romans = ''\\n    roman_mappings.each do |number, numeral|\\n      while i \\u003e= number\\n        romans \\u003c\\u003c numeral\\n        i -= number\\n      end\\n    end\\n    romans\\n  end\\n\\n  private\\n\\n  def roman_mappings\\n    {\\n      1000 =\\u003e 'M',\\n      900 =\\u003e 'CM',\\n      500 =\\u003e 'D',\\n      400 =\\u003e 'CD',\\n      100 =\\u003e 'C',\\n      90 =\\u003e 'XC',\\n      50 =\\u003e 'L',\\n      40 =\\u003e 'XL',\\n      10 =\\u003e 'X',\\n      9 =\\u003e 'IX',\\n      5 =\\u003e 'V',\\n      4 =\\u003e 'IV',\\n      1 =\\u003e 'I'\\n    }\\n  end\\n\\nend"}
95	23	5730ad5cccb82b258ab095e9	pending	java	robot-name	\N	\N	0	1	2015-10-01 00:06:30	2015-10-01 00:06:30	142	{"\\\\java\\\\robot-name\\\\src\\\\main\\\\java\\\\Robot.java":"import java.util.Random;\\r\\n\\r\\npublic class Robot {\\r\\n\\tprivate String firstPart;\\r\\n\\tprivate String secondPart;\\r\\n\\r\\n\\tpublic String getName() {\\r\\n\\t\\tfirstPart = generateRamdomString();\\r\\n\\t\\tsecondPart = generateRandomNumber();\\r\\n\\t\\treturn firstPart + secondPart;\\r\\n\\t}\\r\\n\\r\\n\\tpublic void reset() {\\r\\n\\t\\tfirstPart = \\"\\";\\r\\n\\t\\tsecondPart = \\"\\";\\r\\n\\t}\\r\\n\\r\\n\\tprivate String generateRandomNumber() {\\r\\n\\t\\treturn String.valueOf( new Random().nextInt((9 * (int) Math.pow(10, 3 - 1)) - 1)\\r\\n\\t\\t\\t\\t+ (int) Math.pow(10, 3 - 1));\\r\\n\\t}\\r\\n\\r\\n\\tprivate String generateRamdomString() {\\r\\n\\t\\tchar[] chars = \\"abcdefghijklmnopqrstuvwxyz\\".toCharArray();\\r\\n\\t\\tStringBuilder sb = new StringBuilder();\\r\\n\\t\\tRandom random = new Random();\\r\\n\\t\\tfor (int i = 0; i \\u003c 2; i++) {\\r\\n\\t\\t\\tchar c = chars[random.nextInt(chars.length)];\\r\\n\\t\\t\\tsb.append(c);\\r\\n\\t\\t}\\r\\n\\t\\treturn sb.toString();\\r\\n\\t}\\r\\n\\r\\n}"}
123	35	d564885ed47972ff533cfd41	pending	python	bob	\N	\N	0	2	2015-08-06 11:08:33	2015-08-06 11:08:33	180	{"/python/bob/bob.py":"#\\n# Skeleton file for the Python \\"Bob\\" exercise.\\n#\\n\\ndef hey(what):\\n    what = what.strip()\\n\\n    if not what:\\n        return 'Fine. Be that way!'\\n    if what.isupper():\\n        return 'Whoa, chill out!'\\n    if what.endswith('?'):\\n        return 'Sure.'\\n    else:\\n        return 'Whatever.'"}
124	41	44aaadf061100e418793dfcc	pending	ruby	bob	\N	\N	0	1	2015-11-14 18:40:27	2015-11-14 18:40:27	183	{"bob.rb":"class Bob\\n\\n  def hey(remark)\\n    case remark\\n    when /\\\\A[^a-z]*[A-Z]+[^a-z]*\\\\z/\\n      'Whoa, chill out!'\\n    when /.+\\\\?\\\\z/\\n      'Sure.'\\n    when /\\\\A\\\\s*\\\\z/\\n      'Fine. Be that way!'\\n    else\\n      'Whatever.'\\n    end\\n  end\\n\\n\\nend"}
96	23	34978169eb3259609099b866	done	cpp	bob	\N	\N	0	1	2015-10-31 20:35:10	2015-10-31 20:35:10	143	{"bob.h":"#include \\u003cstring.h\\u003e\\n#include \\u003cctype.h\\u003e\\n\\n/* Suffices as header file to abide to exercism's one file support */\\nclass bob {\\n    public:\\n        static const char * hey(const char *);\\n};\\n\\nbool all_blank(const char *);\\n/* BOB_H */\\n\\nconst char * bob::hey(const char * dialogue) {\\n    int dialogue_len = strlen(dialogue);\\n\\n    // Check for any alphas.\\n    for (int i = 0; i \\u003c dialogue_len; ++i) {\\n\\n        // Dialogue has alphabetic characters\\n        if (isalpha(dialogue[i])) {\\n\\n            // Any lower case indicates not an exclamation.\\n            for (int j = 0; j \\u003c dialogue_len; ++j) {\\n                if (islower(dialogue[j])) {\\n\\n                    // Check for a question.\\n                    if (dialogue[dialogue_len - 1] == '?') {\\n                        return \\"Sure.\\";\\n                    } else {\\n                        return \\"Whatever.\\";\\n                    }\\n                }\\n            }\\n\\n            // Dialogue is all caps at this point.\\n            return \\"Whoa, chill out!\\";\\n        }\\n    }\\n\\n    // Dialogue has no alphabetic characters.\\n\\n    // Check for empty dialogue or all whitespace.\\n    if (dialogue_len == 0 || all_blank(dialogue)) {\\n        return \\"Fine. Be that way!\\";\\n    } else if (dialogue[dialogue_len - 1] == '?') {\\n        return \\"Sure.\\";\\n    } else {\\n        return \\"Whatever.\\";\\n    }\\n}\\n\\nbool all_blank(const char * str) {\\n    for (int i = 0; i \\u003c strlen(str); ++i) {\\n        if (str[i] != ' ') {\\n            return false;\\n        }\\n    }\\n    return true;\\n}"}
97	23	7aee1d7882e2102313faec02	needs_input	javascript	word-count	\N	\N	0	1	2015-10-15 06:24:38	2015-10-15 06:24:38	145	{"word-count.js":"function words(input) {\\n  var resultObj = {};\\n  var inputArr = input.replace('\\\\n', ' ').split(' ');\\n\\n\\n  for (var i = 0, n = inputArr.length; i \\u003c n; i++) {\\n    if (resultObj.hasOwnProperty(inputArr[i])) {\\n      resultObj[inputArr[i]]++;\\n    } else {\\n      resultObj[inputArr[i]] = 1;\\n    }\\n  }\\n\\n  return resultObj;\\n}"}
98	23	4405f10805b03df337af946d	pending	javascript	anagram	\N	\N	0	1	2015-08-13 06:04:16	2015-08-13 06:04:16	146	{"anagram.js":"var anagram = function(input) {\\n    return new Anagram(input);\\n};\\n\\nvar Anagram = function(baseWord) {\\n    this.baseWord = baseWord;\\n};\\n\\nAnagram.prototype.matches = function() {\\n\\n    var anagrams = [];\\n\\n    if (!arguments) {\\n        return anagrams;\\n    }\\n\\n    var wordList = [];\\n    if (arguments.length \\u003e 0 \\u0026\\u0026 arguments[0].constructor === Array) {\\n        wordList = arguments[0];\\n    } else {\\n        wordList = Array.prototype.slice.call(arguments, 0);\\n    }\\n\\n    for (var index = 0; index \\u003c wordList.length; index++) {\\n        if (isAnagram(this.baseWord, wordList[index])) {\\n            anagrams.push(wordList[index]);\\n        }\\n    }\\n    return anagrams;\\n};\\n\\nfunction getCharCounts(input) {\\n\\n    var results = {};\\n\\n    //With no input, there is nothing to count\\n    if (!input) {\\n        return results;\\n    }\\n\\n    //Loop through each character in the word and count\\n    //them up.\\n    for (var index = 0; index \\u003c input.length; index++) {\\n\\n        var currentChar = input.charAt(index);\\n\\n        //If results doesn't have this character yet, set it\\n        //to 1, otherwise increment it.\\n        if (!results.hasOwnProperty(currentChar)) {\\n            results[currentChar] = 1;\\n        } else {\\n            results[currentChar]++;\\n        }\\n    }\\n    return results;\\n};\\n\\nfunction isAnagram(baseWord, testWord, caseSensitive) {\\n\\n    //An anagram must have the same number of characters\\n    if (baseWord.length !== testWord.length) {\\n        return false;\\n    }\\n\\n    //If not caseSensitive, then convert everything to lower case\\n    if (!caseSensitive) {\\n        baseWord = baseWord.toLowerCase();\\n        testWord = testWord.toLowerCase();\\n    }\\n\\n    //If the words are the same, then it's not an anagram\\n    if (baseWord === testWord) {\\n        return false;\\n    }\\n\\n    //Calculate the counts of the characters in each word\\n    var baseWordCharCounts = getCharCounts(baseWord);\\n    var testWordCharCounts = getCharCounts(testWord);\\n\\n    //Go through the characters in the base word and ensure the \\n    //counts match in the test word.  If a count or character\\n    //doesn't match, we're done.\\n    var charKey;\\n    for (charKey in baseWordCharCounts) {\\n        if (!testWordCharCounts[charKey] || (baseWordCharCounts[charKey] !== testWordCharCounts[charKey])) {\\n            return false;\\n        }\\n    }\\n\\n    return true;\\n};\\n\\nmodule.exports = anagram;"}
99	23	16665554d7c66205355e32da	hibernating	ruby	robot-name	\N	\N	0	1	2015-08-31 19:35:37	2015-08-31 19:35:37	155	{"/ruby/robot-name/robot_name.rb":"class Robot\\n  def generate_name\\n    [('A'..'Z').to_a.sample, ('A'..'Z').to_a.sample, (1..9).to_a.sample, (1..9).to_a.sample, (1..9).to_a.sample]\\n  end\\n\\n  def name\\n    @name ||= generate_name.join(\\"\\")\\n  end\\n\\n  def reset\\n    @name = generate_name.join(\\"\\")\\n  end\\n\\nend"}
100	23	ba0679e0939549e4712e0af4	pending	python	largest-series-product	\N	\N	0	1	2015-10-01 00:28:22	2015-10-01 00:28:22	157	{"\\\\python\\\\largest-series-product\\\\series.py":"# Largest Series Product\\r\\nfrom functools import reduce\\r\\n\\r\\ndef slices(number_string, length): \\r\\n    if length \\u003e len(number_string):\\r\\n        raise ValueError(\\"Make sure the length fits the series!\\")\\r\\n    \\r\\n    else:    \\r\\n        result = []\\r\\n        \\r\\n        for i in range(0, len(number_string) - length + 1):\\r\\n            result.append(list(map(int, number_string[i:i + length])))\\r\\n            \\r\\n        return result\\r\\n\\r\\ndef largest_product(digits_string, length):     \\r\\n    if len(digits_string) == 0:\\r\\n        return 1\\r\\n        \\r\\n    else:    \\r\\n        products_list = []\\r\\n        \\r\\n        slices_list = slices(digits_string, length)\\r\\n        \\r\\n        for digits_slice in slices_list:\\r\\n            products_list.append(reduce(lambda x, y: int(x) * int(y), digits_slice))\\r\\n               \\r\\n        return max(products_list)"}
101	23	3f8af872bdcf663f0b1187d5	hibernating	python	word-count	\N	\N	0	1	2015-08-15 01:51:09	2015-08-15 01:51:09	158	{"wordcount.py":"def word_count(phrase):\\n    tokens = phrase.split()\\n    counts = {}\\n\\n    for token in tokens:\\n        if token in counts:\\n            counts[token] += 1\\n        else:\\n            counts[token] = 1\\n\\n    return counts"}
102	17	5806d02bd8cefb2582867056	pending	javascript	bob	\N	\N	0	1	2015-10-27 15:00:00	2015-10-27 15:00:00	159	{"/javascript/bob/bob.js":"var Bob = function () {};\\n\\nfunction isYelling(s) {\\n    return s === s.toUpperCase() \\u0026\\u0026 s !== s.toLowerCase();\\n}\\n\\nfunction isQuestion(s) {\\n    return s.slice(-1) === '?';\\n}\\n\\nfunction isBlank(s) {\\n    return s === '';\\n}\\n\\nBob.prototype.hey = function (input) {\\n    input = input.trim();\\n    if (isBlank(input)) {\\n        return 'Fine. Be that way!';\\n    } else if (isYelling(input)) {\\n        return ('Whoa, chill out!');\\n    } else if (isQuestion(input)) {\\n        return ('Sure.');\\n    }\\n    return 'Whatever.';\\n};\\n\\nmodule.exports = Bob;"}
103	21	4678703bac6c7b6572927375	pending	python	leap	\N	\N	0	1	2015-09-29 19:25:03	2015-09-29 19:25:03	162	{"/python/leap/year.py":"def is_leap_year(year): \\n    \\"tell whether or not a year is a leap year\\"\\n    if year%100==0 and year%400!=0:\\n        return False\\n    if year%4==0:\\n        return True\\n    else:\\n        return False"}
104	36	2b7886ea1a14343824defcb4	pending	javascript	leap	\N	\N	0	2	2015-08-27 20:03:57	2015-08-27 20:03:57	165	{"leap.js":"var leap = function (year) {\\nvar isit;\\nif(year % 400 ===0){\\n  isit= true;\\n}else if(year % 4 === 0 \\u0026\\u0026 year % 100 !== 0){\\n  isit = true;\\n} else{\\n  isit = false;\\n} return isit;\\n};\\n\\n\\nmodule.exports = leap;"}
105	36	7d876110761159468fe04df6	superseded	javascript	leap	\N	\N	0	1	2015-11-10 22:24:43	2015-11-10 22:24:43	165	{"leap.js":"var leap = function (year) {\\nvar isit;\\nif(year %4 === 0){\\n  isit = true;\\n} else{\\n  isit = false;\\n}\\n};\\n\\n\\nmodule.exports = leap;"}
125	6	95f84619b6116e546220490b	\N	ruby	hello-world	\N	\N	0	1	2015-11-16 21:28:01	2015-11-16 21:28:01	185	{"hello_world.rb":"class HelloWorld\\n  def self.hello(*name)\\n    \\"Hello, #{(name.length == 1) ? name[0] : \\"World\\"}!\\"\\n  end\\nend"}
126	6	491ce4b1a3ad30dcf4b7ae09	\N	ruby	hello-world	\N	\N	0	2	2015-12-04 01:27:40	2015-12-04 01:27:40	185	{"hello_world.rb":"class HelloWorld\\n  def self.hello(name = \\"World\\")\\n    \\"Hello, #{name}!\\"\\n  end\\nend"}
127	6	6dbbf0aa10efa65cf150acdf	pending	ruby	leap	\N	\N	0	1	2015-11-21 21:13:48	2015-11-21 21:13:48	187	{"/ruby/leap/year.rb":"module Year\\n\\n  def self.leap?(year)\\n    year % 400 == 0 || (year % 4 == 0 \\u0026\\u0026 year % 100 != 0)\\n  end\\nend"}
106	30	7288f2fb46c3ccea00670e06	done	go	allergies	\N	\N	0	3	2015-09-21 03:51:02	2015-09-21 03:51:02	170	{"allergies.go":"package allergies\\n\\nimport \\"sort\\"\\n\\nconst (\\n\\tEggs = 1 \\u003c\\u003c iota\\n\\tPeanuts\\n\\tShellfish\\n\\tStrawberries\\n\\tTomatoes\\n\\tChocolate\\n\\tPollen\\n\\tCats\\n)\\n\\ntype AllergyMap map[int]string\\n\\nfunc (m AllergyMap) scoreOf(allergyToFind string) int {\\n\\tfor score, allergy := range m {\\n\\t\\tif allergy == allergyToFind {\\n\\t\\t\\treturn score\\n\\t\\t}\\n\\t}\\n\\treturn 0\\n}\\n\\nvar allergiesMap = AllergyMap{\\n\\tEggs:         \\"eggs\\",\\n\\tPeanuts:      \\"peanuts\\",\\n\\tShellfish:    \\"shellfish\\",\\n\\tStrawberries: \\"strawberries\\",\\n\\tTomatoes:     \\"tomatoes\\",\\n\\tChocolate:    \\"chocolate\\",\\n\\tPollen:       \\"pollen\\",\\n\\tCats:         \\"cats\\",\\n}\\n\\ntype AllergyList []string\\n\\nfunc (l AllergyList) Len() int {\\n\\treturn len(l)\\n}\\n\\nfunc (l AllergyList) Less(i, j int) bool {\\n\\treturn allergiesMap.scoreOf(l[i]) \\u003c allergiesMap.scoreOf(l[j])\\n}\\n\\nfunc (l AllergyList) Swap(i, j int) {\\n\\tt := l[i]\\n\\tl[i] = l[j]\\n\\tl[j] = t\\n}\\n\\nfunc Allergies(inputScore int) (result AllergyList) {\\n\\tfor score, allergy := range allergiesMap {\\n\\t\\tif inputScore\\u0026score != 0 {\\n\\t\\t\\tresult = append(result, allergy)\\n\\t\\t}\\n\\t}\\n\\tsort.Sort(result)\\n\\treturn\\n}\\n\\nfunc AllergicTo(inputScore int, allergy string) bool {\\n\\treturn inputScore\\u0026allergiesMap.scoreOf(allergy) \\u003e 0\\n}"}
107	30	b3a015b2612f9608b396f97f	superseded	go	allergies	\N	\N	0	2	2015-10-22 09:28:22	2015-10-22 09:28:22	170	{"allergies.go":"package allergies\\n\\nconst (\\n\\tEGGS = 1 \\u003c\\u003c iota\\n\\tPEANUTS\\n\\tSHELLFISH\\n\\tSTRAWBERRIES\\n\\tTOMATOES\\n\\tCHOCOLATE\\n\\tPOLLEN\\n\\tCATS\\n)\\n\\ntype AllergyMap map[int]string\\n\\nfunc (m AllergyMap) scoreOf(allergyToFind string) int {\\n\\tfor score, allergy := range m {\\n\\t\\tif allergy == allergyToFind {\\n\\t\\t\\treturn score\\n\\t\\t}\\n\\t}\\n\\treturn 0\\n}\\n\\nvar allergiesMap = AllergyMap{\\n\\tEGGS:         \\"eggs\\",\\n\\tPEANUTS:      \\"peanuts\\",\\n\\tSHELLFISH:    \\"shellfish\\",\\n\\tSTRAWBERRIES: \\"strawberries\\",\\n\\tTOMATOES:     \\"tomatoes\\",\\n\\tCHOCOLATE:    \\"chocolate\\",\\n\\tPOLLEN:       \\"pollen\\",\\n\\tCATS:         \\"cats\\",\\n}\\n\\nfunc Allergies(inputScore int) (result []string) {\\n\\tfor score, allergy := range allergiesMap {\\n\\t\\tif inputScore\\u0026score != 0 {\\n\\t\\t\\tresult = append(result, allergy)\\n\\t\\t}\\n\\t}\\n\\treturn\\n}\\n\\nfunc AllergicTo(inputScore int, allergy string) bool {\\n\\treturn inputScore\\u0026allergiesMap.scoreOf(allergy) \\u003e 0\\n}"}
108	30	21dbc4365c8c74eb1157fa8f	superseded	go	allergies	\N	\N	0	1	2015-11-06 14:08:45	2015-11-06 14:08:45	170	{"allergies.go":"package allergies\\n\\nconst EGGS int = 1\\nconst PEANUTS int = 2\\nconst SHELLFISH int = 4\\nconst STRAWBERRIES int = 8\\nconst TOMATOES int = 16\\nconst CHOCOLATE int = 32\\nconst POLLEN int = 64\\nconst CATS int = 128\\n\\nvar allergiesMap = AllergyMap{\\n\\tEGGS: \\"eggs\\",\\n\\tPEANUTS: \\"peanuts\\",\\n\\tSHELLFISH: \\"shellfish\\",\\n\\tSTRAWBERRIES: \\"strawberries\\",\\n\\tTOMATOES: \\"tomatoes\\",\\n\\tCHOCOLATE: \\"chocolate\\",\\n\\tPOLLEN: \\"pollen\\",\\n\\tCATS: \\"cats\\",\\n}\\n\\ntype AllergyMap map[int]string\\n\\nfunc (m AllergyMap) scoreOf(allergyToFind string) int {\\n\\tfor score, allergy := range m {\\n\\t\\tif allergy == allergyToFind {\\n\\t\\t\\treturn score\\n\\t\\t}\\n\\t}\\n\\treturn 0\\n}\\n\\nfunc Allergies(inputScore int) (result []string) {\\n\\tfor score, allergy := range allergiesMap {\\n\\t\\tif inputScore \\u0026 score != 0 {\\n\\t\\t\\tresult = append(result, allergy)\\n\\t\\t}\\n\\t}\\n\\treturn\\n}\\n\\nfunc AllergicTo(inputScore int, allergy string) bool {\\n\\treturn inputScore \\u0026 allergiesMap.scoreOf(allergy) \\u003e 0\\n}"}
109	30	a1a2cdf953016dc4c6cee406	pending	javascript	grade-school	\N	\N	0	1	2015-10-10 21:43:47	2015-10-10 21:43:47	171	{"grade-school.js":"module.exports = function() {\\n\\n\\tvar classRoster = {};\\n\\n\\tfunction add(name, grade) {\\n\\t\\tif (classRoster[grade]) {\\n\\t\\t\\tclassRoster[grade].push(name);\\n\\t\\t\\tclassRoster[grade].sort();\\n\\t\\t} else {\\n\\t\\t\\tclassRoster[grade] = [name];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction roster() {\\n\\t\\treturn classRoster;\\n\\t}\\n\\n\\tfunction grade(g) {\\n\\t\\treturn classRoster[g] ? classRoster[g] : [];\\n\\t}\\n\\n\\treturn {\\n\\t\\troster: roster,\\n\\t\\tadd: add,\\n\\t\\tgrade: grade\\n\\t};\\n\\n};"}
110	30	ed95c3e31616a5c8b69aa0f5	superseded	ruby	hamming	\N	\N	0	2	2015-10-15 12:47:02	2015-10-15 12:47:02	172	{"hamming.rb":"class Strand\\n  attr_accessor :text\\n\\n  def initialize(text = \\"\\")\\n    @text = text\\n  end\\n\\n  def compared_with(strand)\\n    letters.first(strand.length).zip(strand.letters)\\n  end\\n\\n  def letters\\n    text.split \\"\\"\\n  end\\n\\n  def length\\n    text.length\\n  end\\nend\\n\\nclass Hamming\\n  class \\u003c\\u003c self\\n    def compute(x, y)\\n      strand1 = Strand.new x\\n      strand2 = Strand.new y\\n\\n      strand1\\n        .compared_with(strand2)\\n        .reject {|a, b| a == b }\\n        .count\\n    end\\n  end\\nend"}
111	30	7f66a72cd45d0aaac74a93f7	superseded	ruby	hamming	\N	\N	0	1	2015-10-28 10:20:08	2015-10-28 10:20:08	172	{"hamming.rb":"class Sentence\\n  attr_accessor :message\\n\\n  def initialize(message = \\"\\")\\n    @message = message\\n  end\\n\\n  def compared_with(sentence)\\n    letters.first(sentence.length).zip(sentence.letters)\\n  end\\n\\n  def letters\\n    message.split \\"\\"\\n  end\\n\\n  def length\\n    message.length\\n  end\\nend\\n\\nclass Hamming\\n  class \\u003c\\u003c self\\n    def compute(x, y)\\n      sentence1 = Sentence.new x\\n      sentence2 = Sentence.new y\\n\\n      sentence1\\n        .compared_with(sentence2)\\n        .reject {|a, b| a == b }\\n        .count\\n    end\\n  end\\nend"}
112	30	c83dc2845a935ea2fa964560	done	ruby	hamming	\N	\N	0	3	2015-10-28 20:53:01	2015-10-28 20:53:01	172	{"hamming.rb":"Strand = Struct.new(:text) do\\n  def compared_with(strand)\\n    characters.first(strand.length).zip(strand.characters)\\n  end\\n\\n  def characters\\n    text.split \\"\\"\\n  end\\n\\n  def length\\n    text.length\\n  end\\nend\\n\\nclass Hamming\\n  class \\u003c\\u003c self\\n    def compute(x, y)\\n      strand1 = Strand.new x\\n      strand2 = Strand.new y\\n\\n      strand1\\n        .compared_with(strand2)\\n        .reject {|a, b| a == b }\\n        .count\\n    end\\n  end\\nend"}
113	30	561ecf97e341c6d7b445a198	pending	csharp	allergies	\N	\N	0	1	2015-09-18 00:18:49	2015-09-18 00:18:49	173	{"\\\\csharp\\\\allergies\\\\Allergies.cs":"﻿using System;\\r\\nusing System.Collections.Generic;\\r\\nusing System.Linq;\\r\\n\\r\\npublic class Allergies\\r\\n{\\r\\n    private readonly int _score;\\r\\n\\r\\n    private static readonly Dictionary\\u003cstring, int\\u003e AllergyScoreByItems\\r\\n        = new Dictionary\\u003cstring, int\\u003e\\r\\n        {\\r\\n            {\\"eggs\\", 1},\\r\\n            {\\"peanuts\\", 2},\\r\\n            {\\"shellfish\\", 4},\\r\\n            {\\"strawberries\\", 8},\\r\\n            {\\"tomatoes\\", 16},\\r\\n            {\\"chocolate\\", 32},\\r\\n            {\\"pollen\\", 64},\\r\\n            {\\"cats\\", 128}\\r\\n        };\\r\\n\\r\\n    public Allergies(int score)\\r\\n    {\\r\\n        _score = score;\\r\\n    }\\r\\n\\r\\n    public bool AllergicTo(string item)\\r\\n    {\\r\\n        return List().Contains(item, StringComparer.InvariantCultureIgnoreCase);\\r\\n    }\\r\\n\\r\\n    public IEnumerable\\u003cstring\\u003e List()\\r\\n    {\\r\\n        return from item in AllergyScoreByItems where (_score \\u0026 item.Value) \\u003e 0 select item.Key;\\r\\n    }\\r\\n}"}
114	30	3c01fb580e4013530ca2e16e	pending	clojure	point-mutations	\N	\N	0	1	2016-01-08 18:36:33	2016-01-08 18:36:33	174	{"/clojure/point-mutations/point_mutations.clj":"(ns point-mutations)\\n\\n(defn hamming-distance [str1 str2]\\n  (if (not= (count str1) (count str2))\\n    nil\\n    (-\\u003e\\u003e \\n     (map not= str1 str2)\\n     (filter true?)\\n     (count))))"}
117	35	cc610a67f3894c3076db9174	hibernating	go	raindrops	\N	\N	0	5	2015-09-08 14:02:49	2015-09-08 14:02:49	179	{"raindrops.go":"// package raindrops converts a number to a string,\\n// the contents of which depend on the number's prime factors.\\n//\\n// - If the number contains 3 as a prime factor, output 'Pling'.\\n// - If the number contains 5 as a prime factor, output 'Plang'.\\n// - If the number contains 7 as a prime factor, output 'Plong'.\\n// - If the number does not contain 3, 5, or 7 as a prime factor,\\n//   just pass the number's digits straight through.\\n\\npackage raindrops\\n\\nimport \\"strconv\\"\\n\\ntype Set map[int]bool\\n\\nfunc Convert(num int) string {\\n\\toriginalNum := num\\n\\tprimes := []int{2, 3, 5, 7}\\n\\tfactors := make(Set)\\n\\n\\tfor i := 0; i \\u003c len(primes); {\\n\\t\\tpotentialFactor := primes[i]\\n\\n\\t\\tif num%potentialFactor == 0 {\\n\\t\\t\\tnum = num / potentialFactor\\n\\t\\t\\tfactors[potentialFactor] = true\\n\\t\\t} else {\\n\\t\\t\\ti++\\n\\t\\t}\\n\\t}\\n\\n\\treturn resultFromFactors(factors, originalNum)\\n}\\n\\nfunc resultFromFactors(factors Set, num int) string {\\n\\t// remove 2 from factors, as there is no translation for it\\n\\tdelete(factors, 2)\\n\\n\\t// evaluate translatable factors\\n\\tif len(factors) \\u003e 0 {\\n\\t\\treturn FactorTranslator(factors)\\n\\t} else {\\n\\t\\treturn IntToStringConverter(num)\\n\\t}\\n}\\n\\nfunc FactorTranslator(factors Set) (translation string) {\\n\\ttranslations := map[int]string{\\n\\t\\t3: \\"Pling\\",\\n\\t\\t5: \\"Plang\\",\\n\\t\\t7: \\"Plong\\",\\n\\t}\\n\\n\\tfor factor := range factors {\\n\\t\\ttranslation = translation + translations[factor]\\n\\t}\\n\\n\\treturn\\n}\\n\\nfunc IntToStringConverter(num int) string {\\n\\treturn strconv.Itoa(num)\\n}"}
118	35	0ceea768f86746cd050a9fef	superseded	go	raindrops	\N	\N	0	4	2015-10-10 20:05:42	2015-10-10 20:05:42	179	{"raindrops.go":"// package raindrops converts a number to a string,\\n// the contents of which depend on the number's prime factors.\\n//\\n// - If the number contains 3 as a prime factor, output 'Pling'.\\n// - If the number contains 5 as a prime factor, output 'Plang'.\\n// - If the number contains 7 as a prime factor, output 'Plong'.\\n// - If the number does not contain 3, 5, or 7 as a prime factor,\\n//   just pass the number's digits straight through.\\n\\npackage raindrops\\n\\nimport \\"strconv\\"\\n\\ntype Set map[int]bool\\n\\nfunc Convert(num int) string {\\n\\toriginalNum := num\\n\\tprimes := []int{2, 3, 5, 7}\\n\\tfactors := make(Set)\\n\\n\\tfor i := 0; i \\u003c len(primes); {\\n\\t\\tpotentialFactor := primes[i]\\n\\n\\t\\tif num%potentialFactor == 0 {\\n\\t\\t\\tnum = num / potentialFactor\\n\\t\\t\\tfactors[potentialFactor] = true\\n\\t\\t} else {\\n\\t\\t\\ti++\\n\\t\\t}\\n\\t}\\n\\n\\treturn resultFromFactors(factors, originalNum)\\n}\\n\\nfunc resultFromFactors(factors Set, num int) string {\\n\\t// remove 2 from factors, as there is no translation for it\\n\\tdelete(factors, 2)\\n\\n\\t// evaluate translatable factors\\n\\tif len(factors) \\u003e 0 {\\n\\t\\treturn FactorTranslator(factors)\\n\\t} else {\\n\\t\\treturn IntToStringConverter(num)\\n\\t}\\n}\\n\\nfunc FactorTranslator(factors Set) (translation string) {\\n\\ttranslations := map[int]string{\\n\\t\\t3: \\"Pling\\",\\n\\t\\t5: \\"Plang\\",\\n\\t\\t7: \\"Plong\\",\\n\\t}\\n\\n\\tfor factor, _ := range factors {\\n\\t\\ttranslation = translation + translations[factor]\\n\\t}\\n\\n\\treturn\\n}\\n\\nfunc IntToStringConverter(num int) string {\\n\\treturn strconv.Itoa(num)\\n}"}
119	35	f05583230dab67c8c1264af9	superseded	go	raindrops	\N	\N	0	3	2015-10-16 16:12:30	2015-10-16 16:12:30	179	{"raindrops.go":"// package raindrops converts a number to a string,\\n// the contents of which depend on the number's prime factors.\\n//\\n// - If the number contains 3 as a prime factor, output 'Pling'.\\n// - If the number contains 5 as a prime factor, output 'Plang'.\\n// - If the number contains 7 as a prime factor, output 'Plong'.\\n// - If the number does not contain 3, 5, or 7 as a prime factor,\\n//   just pass the number's digits straight through.\\n\\npackage raindrops\\n\\nimport \\"strconv\\"\\n\\ntype Set map[int]bool\\n\\nfunc Convert(num int) string {\\n\\toriginalNum := num\\n\\tprimes := []int{2, 3, 5, 7}\\n\\tfactors := make(Set)\\n\\n\\tfor i := 0; i \\u003c len(primes); {\\n\\t\\tpotentialFactor := primes[i]\\n\\n\\t\\tif num%potentialFactor == 0 {\\n\\t\\t\\tnum = num / potentialFactor\\n\\t\\t\\tfactors[potentialFactor] = true\\n\\t\\t} else {\\n\\t\\t\\ti++\\n\\t\\t}\\n\\t}\\n\\n\\treturn resultFromFactors(factors, originalNum)\\n}\\n\\nfunc resultFromFactors(factors Set, num int) string {\\n\\t// remove 2 from factors, as there is no translation for it\\n\\tdelete(factors, 2)\\n\\n\\t// evaluate translatable factors\\n\\tif len(factors) \\u003e 0 {\\n\\t\\treturn FactorTranslator(factors)\\n\\t} else {\\n\\t\\treturn IntegerToStringTranslator(num)\\n\\t}\\n}\\n\\nfunc FactorTranslator(factors Set) (translation string) {\\n\\ttranslations := map[int]string{\\n\\t\\t3: \\"Pling\\",\\n\\t\\t5: \\"Plang\\",\\n\\t\\t7: \\"Plong\\",\\n\\t}\\n\\n\\tfor factor, _ := range factors {\\n\\t\\ttranslation = translation + translations[factor]\\n\\t}\\n\\n\\treturn\\n}\\n\\nfunc IntegerToStringTranslator(num int) string {\\n\\treturn strconv.Itoa(num)\\n}"}
120	35	9c38a594e7a86e9ef33c3440	superseded	go	raindrops	\N	\N	0	2	2015-11-02 20:14:55	2015-11-02 20:14:55	179	{"raindrops.go":"// package raindrops converts a number to a string,\\n// the contents of which depend on the number's prime factors.\\n//\\n// - If the number contains 3 as a prime factor, output 'Pling'.\\n// - If the number contains 5 as a prime factor, output 'Plang'.\\n// - If the number contains 7 as a prime factor, output 'Plong'.\\n// - If the number does not contain 3, 5, or 7 as a prime factor,\\n//   just pass the number's digits straight through.\\n\\npackage raindrops\\n\\nimport \\"strconv\\"\\n\\ntype Set map[int]bool\\n\\nfunc Convert(num int) string {\\n\\toriginalNum := num\\n\\tprimes := []int{2, 3, 5, 7}\\n\\tfactors := make(Set)\\n\\n\\tfor i := 0; i \\u003c len(primes); {\\n\\t\\tpotentialFactor := primes[i]\\n\\n\\t\\tif num%potentialFactor == 0 {\\n\\t\\t\\tnum = num / potentialFactor\\n\\t\\t\\tif potentialFactor != 2 {\\n\\t\\t\\t\\tfactors[potentialFactor] = true\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\ti++\\n\\t\\t}\\n\\t}\\n\\n\\treturn resultFromFactors(factors, originalNum)\\n}\\n\\nfunc resultFromFactors(factors Set, num int) string {\\n\\tif len(factors) \\u003e 0 {\\n\\t\\treturn FactorTranslator(factors)\\n\\t} else {\\n\\t\\treturn IntegerToStringTranslator(num)\\n\\t}\\n}\\n\\nfunc FactorTranslator(factors Set) (translation string) {\\n\\ttranslations := map[int]string{\\n\\t\\t3: \\"Pling\\",\\n\\t\\t5: \\"Plang\\",\\n\\t\\t7: \\"Plong\\",\\n\\t}\\n\\n\\tfor factor, _ := range factors {\\n\\t\\ttranslation = translation + translations[factor]\\n\\t}\\n\\n\\treturn\\n}\\n\\nfunc IntegerToStringTranslator(num int) string {\\n\\treturn strconv.Itoa(num)\\n}"}
121	35	086b551f573787ec27962898	superseded	go	raindrops	\N	\N	0	1	2015-11-26 17:05:09	2015-11-26 17:05:09	179	{"raindrops.go":"// package raindrops converts a number to a string,\\n// the contents of which depend on the number's prime factors.\\n//\\n// - If the number contains 3 as a prime factor, output 'Pling'.\\n// - If the number contains 5 as a prime factor, output 'Plang'.\\n// - If the number contains 7 as a prime factor, output 'Plong'.\\n// - If the number does not contain 3, 5, or 7 as a prime factor,\\n//   just pass the number's digits straight through.\\n\\npackage raindrops\\n\\nimport (\\n\\t\\"strconv\\"\\n)\\n\\nfunc Convert(num int) (result string) {\\n\\toriginalNum := num\\n\\tprimes := []int{2, 3, 5, 7}\\n\\tfactors := make(map[int]bool)\\n\\n\\ttranslations := map[int]string{\\n\\t\\t3: \\"Pling\\",\\n\\t\\t5: \\"Plang\\",\\n\\t\\t7: \\"Plong\\",\\n\\t}\\n\\n\\ti := 0\\n\\tfor i \\u003c len(primes) {\\n\\t\\tpotentialFactor := primes[i]\\n\\n\\t\\tif num%potentialFactor == 0 {\\n\\t\\t\\tnum = num / potentialFactor\\n\\t\\t\\tif potentialFactor != 2 {\\n\\t\\t\\t\\tfactors[potentialFactor] = true\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\ti++\\n\\t\\t}\\n\\t}\\n\\n\\tif len(factors) \\u003e 0 {\\n\\t\\tfor factor, _ := range factors {\\n\\t\\t\\tresult = result + translations[factor]\\n\\t\\t}\\n\\t} else {\\n\\t\\tresult = strconv.Itoa(originalNum)\\n\\t}\\n\\n\\treturn\\n}"}
128	6	92fc89b589450222c4b91467	superseded	javascript	hamming	\N	\N	0	1	2015-11-25 01:17:13	2015-11-25 01:17:13	189	{"hamming.js":"if (!define || typeof define !== 'function') {\\n    var define = require('amdefine')(module);\\n}\\n\\ndefine({\\n\\tcompute : function(s1,s2){\\n\\t\\tif(s2.length \\u003c s1.length){\\n\\t\\t\\t//make s1 shorter so we can compare each character to one in s2,\\n\\t\\t\\t//and not get array out of bounds errors\\n\\t\\t\\tvar t = s1;\\n\\t\\t\\ts1 = s2;\\n\\t\\t\\ts2 = t;\\n\\t\\t}\\n\\t\\treturn s1.split('').reduce(function(acc,v,i){\\n\\t\\t\\t//iterate over characters in shorter string\\n\\t\\t\\treturn acc + !( v === s2[i]);//casts to int: 1 if they don't match, 0 if they do.\\n\\t\\t},0);\\n\\t}\\n});"}
129	6	2eb289e791989bf7bd4cc035	pending	javascript	hamming	\N	\N	0	2	2015-11-25 15:23:37	2015-11-25 15:23:37	189	{"hamming.js":"if (!define || typeof define !== 'function') {\\n    var define = require('amdefine')(module);\\n}\\n\\ndefine({\\n\\tcompute : function(s1,s2){\\n\\t\\tif(s2.length \\u003c s1.length){\\n\\t\\t\\t//make s1 shorter so we can compare each character to one in s2,\\n\\t\\t\\t//and not get array out of bounds errors\\n\\t\\t\\tvar t = s1;\\n\\t\\t\\ts1 = s2;\\n\\t\\t\\ts2 = t;\\n\\t\\t}\\n\\t\\treturn s1.split('').reduce(function(acc,v,i){\\n\\t\\t\\t//iterate over characters in shorter string\\n\\t\\t\\treturn acc + (v !== s2[i]);//casts to int: 1 if they don't match, 0 if they do.\\n\\t\\t},0);\\n\\t}\\n});"}
130	34	d03594e073ac918de16d365f	\N	javascript	hello-world	\N	\N	0	1	2016-01-09 16:01:55	2016-01-09 16:01:55	190	{"hello-world.js":"//\\n// This is only a SKELETON file for the 'Hello World' exercise. It's been provided as a\\n// convenience to get you started writing code faster.\\n// Make sure to look at test.script.js--that should give you some hints about what is\\n// expected here.\\n\\nvar HelloWorld = function() {};\\n\\nHelloWorld.prototype.hello = function(input) {\\n//\\n  var input = input || 'World'\\n  return 'Hello, ' + input + '!'\\n//\\n};\\n\\nmodule.exports = HelloWorld;"}
131	16	fc42d337ce1447496662406c	done	ruby	word-count	\N	\N	0	1	2015-10-24 17:21:26	2015-10-24 17:21:26	193	{"phrase.rb":"class Phrase\\n  attr_reader :word_count_result\\n  attr_reader :phrase\\n\\n  def initialize(input)\\n    @phrase = input\\n  end\\n\\n  def word_count\\n    temp = phrase.downcase.scan(/[\\\\w+\\\\d+\\\\']+/)\\n    @word_count_result = Hash.new\\n    temp.each{|word| @word_count_result[word] = temp.count(word)}\\n    @word_count_result\\n  end\\nend"}
132	16	f23b01e76a18ea17282f0f24	pending	javascript	rna-transcription	\N	\N	0	1	2015-11-21 02:06:21	2015-11-21 02:06:21	195	{"rna_transcription.js":"function toRna(input)\\n{\\n    var output = '';\\n    for(i = 0; i \\u003c input.length; i++)\\n    {\\n\\tvar nucleotide = input.charAt(i);\\n\\t\\n\\tif(nucleotide == 'G') output += 'C'\\n\\telse if (nucleotide == 'C') output += 'G'\\n\\telse if (nucleotide == 'T') output += 'A'\\n\\telse if (nucleotide == 'A') output += 'U'\\n    }\\n    return output;\\n}\\n\\nmodule.exports = toRna;"}
133	16	4c1bc3414af0acbbd17edd73	pending	ruby	difference-of-squares	\N	\N	0	1	2015-11-18 22:10:20	2015-11-18 22:10:20	196	{"/ruby/difference-of-squares/squares.rb":"class Squares\\n\\n  def initialize(number)\\n    @number = number\\n  end\\n  \\n  def square_of_sums\\n    (1..@number).inject(:+)**2\\n  end\\n\\n  def sum_of_squares\\n    (1..@number).inject { |sum, num| sum + num**2 }\\n  end\\n\\n  def difference \\n    (sum_of_squares - square_of_sums).abs\\n  end\\n\\nend"}
134	18	292258264429e15b82c570de	done	haskell	space-age	\N	\N	0	2	2015-06-22 21:43:24	2015-06-22 21:43:24	200	{"SpaceAge.hs":"module SpaceAge (Planet(..), ageOn) where\\r\\n\\r\\ndata Planet = Mercury \\r\\n    | Venus \\r\\n    | Earth \\r\\n    | Mars \\r\\n    | Jupiter \\r\\n    | Saturn \\r\\n    | Uranus \\r\\n    | Neptune \\r\\n\\r\\nageOn :: Planet -\\u003e Integer -\\u003e Float\\r\\nageOn planet seconds = secondsToYear seconds / getOrbitalRatio planet\\r\\n\\r\\ngetOrbitalRatio :: Planet -\\u003e Float\\r\\ngetOrbitalRatio p = case p of\\r\\n    Mercury -\\u003e 0.2408467\\r\\n    Venus -\\u003e 0.61519726\\r\\n    Earth -\\u003e 1.0\\r\\n    Mars -\\u003e 1.8808158\\r\\n    Jupiter -\\u003e 11.862615\\r\\n    Saturn -\\u003e 29.447498\\r\\n    Uranus -\\u003e 84.016846\\r\\n    Neptune -\\u003e 164.79132\\r\\n\\r\\nsecondsToYear :: Integer -\\u003e Float \\r\\nsecondsToYear x = (fromInteger x) / (secondsPerMinute * minutesPerHour * hoursPerDay * daysPerYear)\\r\\n    where\\r\\n        secondsPerMinute = 60.0\\r\\n        minutesPerHour = 60.0\\r\\n        hoursPerDay = 24.0\\r\\n        daysPerYear = 365.25\\r"}
135	18	146dfd35cd8ad1b9f46f786d	superseded	haskell	space-age	\N	\N	0	1	2015-10-22 23:32:04	2015-10-22 23:32:04	200	{"SpaceAge.hs":"module SpaceAge (Planet(..), ageOn) where\\r\\n\\r\\ndata Planet = Mercury \\r\\n    | Venus \\r\\n    | Earth \\r\\n    | Mars \\r\\n    | Jupiter \\r\\n    | Saturn \\r\\n    | Uranus \\r\\n    | Neptune \\r\\n\\r\\nageOn :: Planet -\\u003e Integer -\\u003e Float\\r\\nageOn Mercury x = (secondsToYear x) / 0.2408467\\r\\nageOn Venus x = (secondsToYear x) / 0.61519726\\r\\nageOn Earth x = secondsToYear x\\r\\nageOn Mars x = (secondsToYear x) / 1.8808158\\r\\nageOn Jupiter x = (secondsToYear x) / 11.862615\\r\\nageOn Saturn x = (secondsToYear x) / 29.447498\\r\\nageOn Uranus x = (secondsToYear x) / 84.016846\\r\\nageOn Neptune x = (secondsToYear x) / 164.79132\\r\\n\\r\\nsecondsToYear :: Integer -\\u003e Float \\r\\nsecondsToYear x = (fromInteger x) / (secondsPerMinute * minutesPerHour * hoursPerDay * daysPerYear)\\r\\n    where\\r\\n        secondsPerMinute = 60.0\\r\\n        minutesPerHour = 60.0\\r\\n        hoursPerDay = 24.0\\r\\n        daysPerYear = 365.25\\r"}
136	18	160c4b00d26ad0385f8bca84	pending	javascript	say	\N	\N	0	1	2015-05-09 17:24:24	2015-05-09 17:24:24	204	{"say.js":"var Say = function(number) {\\n  this.words = reverse(number).match(/(\\\\d{1,3})/g).map(this.toWords)\\n}\\n\\nSay.prototype.toWords = function(reversedNumber, place) {\\n  return new Hundred(reversedNumber, place).words\\n}\\n\\nSay.prototype.inEnglish = function() {\\n  return filter(this.words).reverse().join(' ').trim() || 'zero'\\n}\\n\\nvar Hundred = function(number, place) {\\n  this.number = number\\n  this.place  = Number(number) ? PLACE[place] : ''\\n  this.words  = this.number.replace(/(\\\\d)(\\\\d)?(\\\\d)?/, this.translate) + this.place\\n}\\n\\nHundred.prototype.translate = function(_, ones, tens, hundreds) {\\n  var part1 = NUMBERS[hundreds] ? NUMBERS[hundreds] + ' hundred ' : ''\\n  var part2 = NUMBERS[tens + ones] || filter([TENS[tens], NUMBERS[ones]]).join('-')\\n\\n  return part1 + part2\\n}\\n\\nvar NUMBERS = {\\n  '0'  : '',\\n  '1'  : 'one',\\n  '2'  : 'two',\\n  '3'  : 'three',\\n  '4'  : 'four',\\n  '5'  : 'five',\\n  '6'  : 'six',\\n  '7'  : 'seven',\\n  '8'  : 'eight',\\n  '9'  : 'nine',\\n  '10' : 'ten',\\n  '11' : 'eleven',\\n  '12' : 'twelve',\\n  '13' : 'thirteen',\\n  '14' : 'fourteen',\\n  '15' : 'fifteen',\\n  '16' : 'sixteen',\\n  '17' : 'seventeen',\\n  '18' : 'eighteen',\\n  '19' : 'nineteen'\\n}\\n\\nvar TENS = {\\n  '0' : '',\\n  '2' : 'twenty',\\n  '3' : 'thirty',\\n  '4' : 'forty',\\n  '5' : 'fifty',\\n  '6' : 'sixty',\\n  '7' : 'seventy',\\n  '8' : 'eighty',\\n  '9' : 'ninety'\\n}\\n\\nvar PLACE = {\\n  0: '',\\n  1: ' thousand',\\n  2: ' million',\\n  3: ' billion'\\n}\\n\\nfunction reverse(string) {\\n  return String(string).split('').reverse().join('')\\n}\\n\\nfunction filter(array) {\\n  return array.reduce(function(filtered, element) {\\n    return element ? filtered.concat([element]) : filtered\\n  }, [])\\n}\\n\\nmodule.exports.inEnglish = function(number) {\\n  if (number \\u003c 0 || number \\u003e 999999999999) throw new Error('Number must be between 0 and 999,999,999,999.')\\n\\n  return new Say(number).inEnglish()\\n}"}
137	24	47fee1bce331bf88eeb13089	hibernating	ruby	hamming	\N	\N	0	1	2015-12-05 16:54:15	2015-12-05 16:54:15	205	{"hamming.rb":"class Hamming\\n\\n  def self.compute(arg1, arg2)\\n    count = 0\\n    pos = 0\\n    arg1.length.times{ count+=1 if arg1[pos] != arg2[pos]; pos+=1 }\\n    count\\n  end\\n\\nend"}
138	24	c4c2fd232c1f13b11051c172	superseded	scala	allergies	\N	\N	0	1	2015-12-16 00:18:21	2015-12-16 00:18:21	206	{"src/test/scala/Allergies.scala":"object Allergen extends Enumeration{\\n  val Eggs = Value(1)\\n  val Peanuts = Value(2)\\n  val Shellfish = Value(4)\\n  val Strawberries = Value(8)\\n  val Tomatoes = Value(16)\\n  val Chocolate = Value(32)\\n  val Pollen = Value(64)\\n  val Cats = Value(128)\\n}\\n\\ncase class Allergies() {\\n\\n  def allergies(allergyScore: Int) = Allergen.values.toList.filter(isAllergicTo(_, allergyScore))\\n\\n  def isAllergicTo(allergen: Allergen.Value, allergyScore: Int) = (allergen.id \\u0026 allergyScore) != 0\\n\\n}"}
139	24	3bdb707aa0a395c01d068bf1	\N	scala	allergies	\N	\N	0	3	2015-12-26 00:03:33	2015-12-26 00:03:33	206	{"src/test/scala/Allergies.scala":"object Allergen extends Enumeration {\\n  val Eggs, Peanuts, Shellfish, Strawberries, Tomatoes, Chocolate, Pollen, Cats = Value\\n}\\n\\ncase class Allergies() {\\n  def allergies(score: Int) = Allergen.values.toList.filter(isAllergicTo(_, score))\\n  def isAllergicTo(allergen: Allergen.Value, score: Int) = (1 \\u003c\\u003c allergen.id \\u0026 score) != 0\\n}"}
140	24	01ca51b16ed3476fc1c85630	done	scala	allergies	\N	\N	0	2	2015-12-26 00:35:50	2015-12-26 00:35:50	206	{"src/test/scala/Allergies.scala":"object Allergen extends Enumeration {\\n  val Eggs = Value(1)\\n  val Peanuts = Value(2)\\n  val Shellfish = Value(4)\\n  val Strawberries = Value(8)\\n  val Tomatoes = Value(16)\\n  val Chocolate = Value(32)\\n  val Pollen = Value(64)\\n  val Cats = Value(128)\\n}\\n\\ncase class Allergies() {\\n  def allergies(score: Int) = Allergen.values.toList.filter(isAllergicTo(_, score))\\n  def isAllergicTo(allergen: Allergen.Value, score: Int) = (allergen.id \\u0026 score) != 0\\n}"}
141	24	3274c71b2199ea014e2de0af	hibernating	ruby	etl	\N	\N	0	2	2015-12-03 00:17:44	2015-12-03 00:17:44	207	{"etl.rb":"class ETL\\n  def self.transform(old_system)\\n    new_system = {}\\n    old_system.each do |points, letter_array|\\n      letter_array.each do |letter|\\n        new_system[letter.downcase] = points\\n      end\\n    end\\n    new_system\\n  end\\nend"}
142	24	5c2bee248fe0d4d41d0cd5ee	superseded	ruby	etl	\N	\N	0	1	2015-12-15 09:12:31	2015-12-15 09:12:31	207	{"etl.rb":"#old = { 1 =\\u003e ['A'] }\\n#expected = { 'a' =\\u003e 1 }\\n\\n#old = { 1 =\\u003e ['A', 'E', 'I', 'O', 'U'] }\\n#expected = { 'a' =\\u003e 1, 'e' =\\u003e 1, 'i' =\\u003e 1, 'o' =\\u003e 1, 'u' =\\u003e 1 }\\n\\n\\n\\nclass ETL\\n  def self.transform(old_system)\\n    new_system = {}\\n    old_system.each do |points, letter_array|\\n      letter_array.each do |letter|\\n        new_system[letter.downcase] = points\\n      end\\n    end\\n    new_system\\n  end\\nend"}
143	24	66c2e316532d68956698fd89	pending	javascript	etl	\N	\N	0	1	2015-12-09 20:31:53	2015-12-09 20:31:53	209	{"/javascript/etl/etl.js":"module.exports = function transform(oldScores) {\\n  return Object.keys(oldScores).reduce(function(newScores, key) {\\n    oldScores[key].forEach(function(letter) {\\n      newScores[letter.toLowerCase()] = parseInt(key);\\n    });\\n    return newScores;\\n  }, {});\\n}"}
144	24	fbb9dbb57a7fcafaa6af79b6	superseded	python	bob	\N	\N	0	1	2015-12-02 10:26:57	2015-12-02 10:26:57	211	{"bob.py":"import string\\n\\nclass Bob:\\n    def hey(self, hey):\\n        if all(ch in string.whitespace for ch in hey):\\n            return 'Fine. Be that way!'\\n\\n        if any(ch in string.letters for ch in hey):\\n            if not any(ch.islower() for ch in hey):\\n                return 'Woah, chill out!'\\n\\n        if hey.endswith('?'):\\n            return 'Sure.'\\n\\n        return 'Whatever.'"}
145	24	6ee9d1fc3bae3470e27c4177	superseded	python	bob	\N	\N	0	3	2015-12-12 17:33:31	2015-12-12 17:33:31	211	{"bob.py":"class Bob:\\n    \\"\\"\\"Bob imitates lackadaisical teenager.\\"\\"\\"\\n\\n    def hey(self, hey):\\n        \\"\\"\\"Returns the response to message.\\n\\n        Keyword arguments:\\n        hey -- the message you say to Bob.\\n\\n        Bob responses \\"Sure\\" if you ask him a qeustion.\\n        Bob responses \\"Woah, chill out!\\" if you yell at him.\\n        Bob responses \\"Fine. Be that way!\\" if you address him\\n        withou actually saying anything.\\n        And he responses \\"Whatever.\\" to enything else.\\n        \\"\\"\\"\\n        if not hey.strip():\\n            return 'Fine. Be that way!'\\n        elif hey.isupper():\\n            return 'Woah, chill out!'\\n        elif hey.endswith('?'):\\n            return 'Sure.'\\n\\n        return 'Whatever.'"}
146	24	765c224dc0392c0d51107a86	done	python	bob	\N	\N	0	4	2015-12-17 04:04:11	2015-12-17 04:04:11	211	{"bob.py":"class Bob(object):\\n    \\"\\"\\"Bob imitates lackadaisical teenager.\\"\\"\\"\\n\\n    def hey(self, hey):\\n        \\"\\"\\"Returns the response to message.\\n\\n        Keyword arguments:\\n        hey -- the message you say to Bob.\\n\\n        Bob responses \\"Sure\\" if you ask him a qeustion.\\n        Bob responses \\"Woah, chill out!\\" if you yell at him.\\n        Bob responses \\"Fine. Be that way!\\" if you address him\\n        withou actually saying anything.\\n        And he responses \\"Whatever.\\" to enything else.\\n        \\"\\"\\"\\n        if not hey.strip():\\n            return 'Fine. Be that way!'\\n        elif hey.isupper():\\n            return 'Woah, chill out!'\\n        elif hey.endswith('?'):\\n            return 'Sure.'\\n\\n        return 'Whatever.'"}
147	24	acdb3a7ade618d38d5b9e62e	superseded	python	bob	\N	\N	0	2	2015-12-24 00:11:48	2015-12-24 00:11:48	211	{"bob.py":"import string\\n\\nclass Bob:\\n    def hey(self, hey):\\n        if not hey.strip():\\n            return 'Fine. Be that way!'\\n\\n        if hey.isupper():\\n            return 'Woah, chill out!'\\n\\n        if hey.endswith('?'):\\n            return 'Sure.'\\n\\n        return 'Whatever.'"}
148	42	c17344fd5190d48a6f0431dd	\N	javascript	rna-transcription	\N	\N	0	1	2015-11-10 12:35:31	2015-11-10 12:35:31	212	{"rna-transcription.js":"var DnaTranscriber = function() {};\\n\\nDnaTranscriber.prototype.toRna = function(dna) { // input equals DNA strand\\n\\tvar rna = \\"\\"; // rna equivalent result\\n\\n\\tfor (i = 0; i \\u003c dna.length; i++) { // iterate through each character of dna\\n\\n\\t\\tswitch (dna[i]) { // transcribe dna characters to rna\\n\\t\\t\\tcase 'G':\\n\\t\\t\\t\\trna += \\"C\\";\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'C':\\n\\t\\t\\t\\trna += \\"G\\";\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'T':\\n\\t\\t\\t\\trna += \\"A\\";\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'A':\\n\\t\\t\\t\\trna += \\"U\\";\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\treturn rna; // return the rna result.\\n};\\n\\nDnaTranscriber.prototype.toDna = function(rna) { // input equals RNA strand\\n\\tvar dna = \\"\\"; // dna equivalent result\\n\\n\\tfor (i = 0; i \\u003c rna.length; i++) { // iterate through each character of rna\\n\\n\\t\\tswitch (rna[i]) { // transcribe rna characters to dna\\n\\t\\t\\tcase 'C':\\n\\t\\t\\t\\tdna += \\"G\\";\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'G':\\n\\t\\t\\t\\tdna += \\"C\\";\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'A':\\n\\t\\t\\t\\tdna += \\"T\\";\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'U':\\n\\t\\t\\t\\tdna += \\"A\\";\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\treturn dna; // return the rna result.\\n};\\n\\nmodule.exports = DnaTranscriber;"}
149	42	7978686e0d3b4a1e221f7215	done	haskell	allergies	\N	\N	0	2	2015-10-07 22:57:54	2015-10-07 22:57:54	213	{"allergies.hs":"module Allergies (Allergen(..), isAllergicTo, allergies) where\\n\\nimport Data.Bits\\n\\ndata Allergen = Eggs\\n              | Peanuts\\n              | Shellfish\\n              | Strawberries\\n              | Tomatoes\\n              | Chocolate\\n              | Pollen\\n              | Cats\\n              deriving (Enum, Show, Eq)\\n\\nisAllergicTo :: Allergen -\\u003e Int -\\u003e Bool\\nisAllergicTo allergen mask = testBit mask (fromEnum allergen)\\n\\nallergies :: Int -\\u003e [Allergen]\\nallergies mask = filter (flip isAllergicTo mask) (enumFrom Eggs)"}
150	42	3ecfde4506bc42b6f6cd6afe	superseded	haskell	allergies	\N	\N	0	1	2015-10-20 19:57:37	2015-10-20 19:57:37	213	{"allergies.hs":"module Allergies (Allergen(..), isAllergicTo, allergies) where\\n\\nimport Data.Bits\\n\\ndata Allergen = Eggs\\n              | Peanuts\\n              | Shellfish\\n              | Strawberries\\n              | Tomatoes\\n              | Chocolate\\n              | Pollen\\n              | Cats\\n              deriving (Enum, Show, Eq)\\n\\nisAllergicTo :: Allergen -\\u003e Int -\\u003e Bool\\nisAllergicTo allergen mask = testBit mask (fromEnum allergen)\\n\\nallergies :: Int -\\u003e [Allergen]\\nallergies = allergies' 0\\n    where\\n        allergies' :: Int -\\u003e Int -\\u003e [Allergen]\\n        allergies' _ 0 = []\\n        allergies' 8 _ = []\\n        allergies' n x = if (x .\\u0026. 1) == 1\\n                             then toEnum n : next\\n                             else next\\n            where\\n                next = allergies' (n + 1) (x `div` 2)"}
151	42	9091882ee4ad52b4c98f18bc	\N	scala	grade-school	\N	\N	0	1	2015-10-16 06:17:44	2015-10-16 06:17:44	214	{"src/main/scala/School.scala":"/**\\n  * Created by russell on 11/8/15.\\n  */\\n\\nimport scala.collection.immutable.ListMap\\nimport scala.collection.mutable.Map\\nclass School {\\n  val db: Map[Int, Seq[String]] = scala.collection.mutable.Map()\\n\\n  def add(student: String, grade: Int) = {\\n    db(grade) = db.getOrElseUpdate(grade, Seq()).++(Seq(student))\\n  }\\n\\n  def sorted = {\\n    val sortedDB = ListMap(db.toSeq.sortBy(_._1):_*)\\n    sortedDB.mapValues(_.sorted)\\n  }\\n\\n  def grade(gradeNum: Int) = db.getOrElse(gradeNum, Seq())\\n}"}
152	27	4d42a90ad25ba4ad54669453	pending	ruby	gigasecond	\N	\N	0	1	2015-08-01 01:44:02	2015-08-01 01:44:02	221	{"gigasecond.rb":"require 'date'\\nrequire 'time'\\n\\nclass Gigasecond\\n    def initialize(date)\\n        @date = date\\n    end\\n    \\n    def self.from(date)\\n        date + 10 ** 9\\n    end\\n    \\nend"}
153	27	54fced60a55f3f45ce3ffc54	pending	ruby	hamming	\N	\N	0	1	2015-12-16 03:21:27	2015-12-16 03:21:27	222	{"hamming.rb":"class Hamming\\n  def self.compute(strand1, strand2)\\n    difference = 0\\n\\n    strand1.each_char.with_index do |char, index|\\n      difference += 1 if strand2[index] != char\\n    end\\n\\n    difference\\n  end\\nend"}
154	45	9a62b09edb08f99de8cc781e	pending	go	word-count	\N	\N	0	1	2015-09-15 12:56:56	2015-09-15 12:56:56	225	{"histogram.go":"package wc\\n\\nimport (\\n\\t\\"reflect\\"\\n\\t\\"regexp\\"\\n)\\n\\ntype Histogram map[string]int\\n\\nfunc (h Histogram) Equal(other Histogram) bool {\\n\\treturn reflect.DeepEqual(h, other)\\n}\\n\\nfunc WordCount(words string) Histogram {\\n\\th := make(Histogram)\\n\\tpopulateHistogram(h, words)\\n\\treturn h\\n}\\n\\nfunc populateHistogram(h Histogram, words string) {\\n\\twords_collection := collectWords(words)\\n\\tfor _, word := range words_collection {\\n\\t\\th[word] += 1\\n\\t}\\n}\\n\\nfunc collectWords(words string) []string {\\n\\trx, _ := regexp.Compile(\\"([a-zA-Z]+)\\")\\n\\treturn rx.FindAllString(words, -1)\\n}"}
155	45	103651f645cd388ec49b3000	done	ruby	hamming	\N	\N	0	3	2015-10-22 09:58:44	2015-10-22 09:58:44	229	{"hamming.rb":" class Hamming\\n\\n  def self.compute(strand1, strand2)\\n    compare_strands(strand1, strand2)\\n  end\\n\\n  def self.compare_strands(strand1, strand2)\\n    paired_nucleotides = strand1.chars.zip(strand2.chars)\\n    hamming_count(paired_nucleotides)  \\n  end\\n\\n  def self.hamming_count(paired_nucleotides)\\n    paired_nucleotides.count do |nucleotide_a, nucleotide_b| \\n      mutated?(nucleotide_a, nucleotide_b)\\n    end\\n  end\\n\\n  def self.mutated?(nucleotide_a, nucleotide_b)\\n    nucleotide_a != nucleotide_b unless nucleotide_b == nil\\n  end\\nend"}
156	45	cce41b60cc9e4c8a01ef8027	superseded	ruby	hamming	\N	\N	0	2	2015-10-28 14:23:14	2015-10-28 14:23:14	229	{"hamming.rb":" class Hamming\\n\\n  def self.compute(strand1, strand2)\\n    compare_strands(strand1, strand2)\\n  end\\n\\n  def self.compare_strands(strand1, strand2)\\n    zipped = strand1.chars.zip(strand2.chars)\\n    hamming_count(zipped)  \\n  end\\n\\n  def self.hamming_count(zipped_strands)\\n    zipped_strands.count do |pair| \\n      pair[0] != pair[1] unless pair[1] == nil\\n    end\\n  end\\n\\nend"}
157	45	162ccf97acdcfed712c6c53c	superseded	ruby	hamming	\N	\N	0	1	2015-11-30 11:41:01	2015-11-30 11:41:01	229	{"hamming.rb":"class Hamming\\n\\n  def self.compute(strand1, strand2)\\n    compare_strands(strand1, strand2)\\n  end\\n\\n  def self.compare_strands(strand1, strand2)\\n    hamming_count = 0\\n    zipped = strand1.chars.zip(strand2.chars)\\n    zipped.each do |pair|\\n      unless pair[1] == nil\\n        if pair[0] != pair[1]\\n          hamming_count += 1\\n        end\\n      end\\n    end \\n    hamming_count\\n  end\\nend"}
\.


--
-- Name: submissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('submissions_id_seq', 157, true);


--
-- Data for Name: team_managers; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_managers (id, user_id, team_id) FROM stdin;
1	2	1
2	3	1
3	4	1
4	2	2
5	2	3
6	2	4
7	3	4
8	4	5
9	3	6
10	3	7
\.


--
-- Name: team_managers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_managers_id_seq', 10, true);


--
-- Data for Name: team_memberships; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY team_memberships (id, team_id, user_id, created_at, updated_at, confirmed, inviter_id) FROM stdin;
1	1	22	2011-05-30 08:32:40	2011-05-30 08:32:40	t	\N
2	1	15	1985-12-26 05:20:18	1985-12-26 05:20:18	t	\N
3	1	18	1984-01-21 10:53:28	1984-01-21 10:53:28	t	\N
4	1	23	1997-09-08 14:04:45	1997-09-08 14:04:45	t	\N
5	1	11	1997-05-24 00:35:12	1997-05-24 00:35:12	t	\N
6	1	8	2002-12-01 20:09:41	2002-12-01 20:09:41	t	\N
7	1	7	2006-10-21 06:10:05	2006-10-21 06:10:05	t	\N
8	1	30	1978-03-26 00:10:58	1978-03-26 00:10:58	t	\N
9	1	31	2003-09-26 00:58:13	2003-09-26 00:58:13	t	\N
10	1	36	1982-03-21 16:08:04	1982-03-21 16:08:04	t	\N
11	1	16	1993-12-27 01:47:54	1993-12-27 01:47:54	f	\N
12	1	17	1993-02-11 05:20:07	1993-02-11 05:20:07	f	\N
13	1	29	1982-06-08 21:09:10	1982-06-08 21:09:10	f	\N
14	1	32	2014-03-15 07:49:30	2014-03-15 07:49:30	f	\N
15	1	38	2014-11-17 12:18:34	2014-11-17 12:18:34	f	\N
16	1	42	1985-04-17 19:26:51	1985-04-17 19:26:51	f	\N
17	1	43	1978-03-26 03:17:32	1978-03-26 03:17:32	f	\N
18	1	47	2002-06-09 19:53:39	2002-06-09 19:53:39	f	\N
19	2	3	2012-03-11 06:18:09	2012-03-11 06:18:09	t	\N
20	2	36	1998-09-20 12:59:48	1998-09-20 12:59:48	t	\N
21	2	31	2010-09-08 19:59:46	2010-09-08 19:59:46	t	\N
22	2	47	1998-04-16 08:50:29	1998-04-16 08:50:29	t	\N
23	2	19	1973-07-28 04:41:16	1973-07-28 04:41:16	f	\N
24	2	38	2012-08-10 19:12:43	2012-08-10 19:12:43	f	\N
25	3	38	1993-11-30 04:55:35	1993-11-30 04:55:35	f	\N
26	3	3	2002-08-01 01:48:25	2002-08-01 01:48:25	f	\N
27	4	3	2005-10-29 14:19:35	2005-10-29 14:19:35	t	\N
28	4	32	1987-12-01 18:41:41	1987-12-01 18:41:41	t	\N
29	4	22	1987-02-27 03:09:10	1987-02-27 03:09:10	t	\N
30	4	27	1978-11-13 00:06:10	1978-11-13 00:06:10	t	\N
31	4	20	1996-12-27 22:55:58	1996-12-27 22:55:58	t	\N
32	4	25	2014-10-13 07:48:08	2014-10-13 07:48:08	t	\N
33	4	19	1979-04-06 06:33:47	1979-04-06 06:33:47	t	\N
34	4	24	2003-11-06 22:15:37	2003-11-06 22:15:37	t	\N
35	4	26	1985-08-03 01:23:57	1985-08-03 01:23:57	t	\N
36	4	21	1974-11-09 23:56:09	1974-11-09 23:56:09	t	\N
37	4	38	2015-10-05 03:26:09	2015-10-05 03:26:09	f	\N
38	4	12	1978-10-29 17:10:47	1978-10-29 17:10:47	f	\N
39	4	14	1979-11-29 16:19:16	1979-11-29 16:19:16	f	\N
40	5	32	2006-03-14 22:51:28	2006-03-14 22:51:28	t	\N
41	5	40	1971-07-26 06:06:19	1971-07-26 06:06:19	t	\N
42	5	35	2010-05-28 18:59:39	2010-05-28 18:59:39	t	\N
43	5	37	1976-12-03 14:27:37	1976-12-03 14:27:37	t	\N
44	5	33	1975-11-20 02:14:38	1975-11-20 02:14:38	t	\N
45	5	36	1976-08-08 00:09:01	1976-08-08 00:09:01	t	\N
46	5	34	2003-02-20 04:38:06	2003-02-20 04:38:06	t	\N
47	5	39	1970-03-26 03:17:35	1970-03-26 03:17:35	t	\N
48	5	41	1997-05-10 06:03:45	1997-05-10 06:03:45	f	\N
49	5	38	1975-03-05 21:27:05	1975-03-05 21:27:05	f	\N
50	5	3	1978-03-06 02:30:44	1978-03-06 02:30:44	f	\N
51	6	6	1980-11-08 16:10:05	1980-11-08 16:10:05	t	\N
52	6	7	2005-10-02 05:55:59	2005-10-02 05:55:59	t	\N
53	6	8	1985-09-05 12:38:02	1985-09-05 12:38:02	t	\N
54	6	9	1998-12-22 17:14:24	1998-12-22 17:14:24	t	\N
55	6	11	1993-02-26 17:31:02	1993-02-26 17:31:02	t	\N
56	6	12	1993-04-19 13:00:07	1993-04-19 13:00:07	t	\N
57	6	13	2004-09-21 23:53:10	2004-09-21 23:53:10	t	\N
58	6	14	1975-07-26 22:49:13	1975-07-26 22:49:13	t	\N
59	6	15	2005-10-06 04:13:09	2005-10-06 04:13:09	t	\N
60	6	16	1978-12-11 14:40:25	1978-12-11 14:40:25	t	\N
61	6	17	1985-06-12 01:52:13	1985-06-12 01:52:13	t	\N
62	6	18	1977-10-09 23:08:28	1977-10-09 23:08:28	t	\N
63	6	23	2010-04-01 15:25:06	2010-04-01 15:25:06	t	\N
64	6	28	1980-10-14 11:12:59	1980-10-14 11:12:59	t	\N
65	6	29	2008-01-16 07:20:04	2008-01-16 07:20:04	t	\N
66	6	30	1976-12-12 10:42:35	1976-12-12 10:42:35	t	\N
67	6	31	1986-10-10 10:16:30	1986-10-10 10:16:30	t	\N
68	6	32	2004-04-21 17:33:51	2004-04-21 17:33:51	t	\N
69	6	38	1980-01-28 03:05:40	1980-01-28 03:05:40	t	\N
70	6	42	1999-02-08 10:35:44	1999-02-08 10:35:44	t	\N
71	6	43	1992-04-30 13:26:19	1992-04-30 13:26:19	t	\N
72	6	44	1985-06-20 20:45:53	1985-06-20 20:45:53	t	\N
73	6	45	2001-02-08 18:29:23	2001-02-08 18:29:23	t	\N
74	6	46	1978-02-26 19:55:16	1978-02-26 19:55:16	t	\N
75	6	47	2012-01-13 22:46:01	2012-01-13 22:46:01	t	\N
76	6	48	2013-09-15 09:41:16	2013-09-15 09:41:16	t	\N
77	6	49	1989-09-03 06:20:03	1989-09-03 06:20:03	t	\N
78	7	3	1975-08-23 14:21:42	1975-08-23 14:21:42	t	\N
79	7	39	1982-04-24 21:21:26	1982-04-24 21:21:26	t	\N
80	7	32	1996-11-19 20:55:17	1996-11-19 20:55:17	t	\N
81	7	38	1997-11-09 01:59:59	1997-11-09 01:59:59	f	\N
\.


--
-- Name: team_memberships_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('team_memberships_id_seq', 81, true);


--
-- Data for Name: teams; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY teams (id, slug, created_at, updated_at, name) FROM stdin;
1	baconesia	2015-06-07 21:28:49.176829	2015-06-07 21:28:49.176829	baconesia
2	chocolades	2015-05-22 15:17:33.210639	2015-05-22 15:17:33.210639	chocolades
3	ghost	2015-09-15 12:48:07.219762	2015-09-15 12:48:07.219762	ghost
4	motley	2015-11-21 03:24:34.224517	2015-11-21 03:24:34.224517	motley
5	rugrats	2015-05-21 03:47:34.244413	2015-05-21 03:47:34.244413	rugrats
6	slate	2015-07-17 06:46:08.258848	2015-07-17 06:46:08.258848	slate
7	polkadots	2015-11-13 06:25:01.296722	2015-11-13 06:25:01.296722	polkadots
\.


--
-- Name: teams_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('teams_id_seq', 7, true);


--
-- Data for Name: user_exercises; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY user_exercises (id, user_id, language, slug, iteration_count, state, created_at, updated_at, key, archived, last_iteration_at, last_activity_at, last_activity, fetched_at, skipped_at) FROM stdin;
1	9	php	hamming	0	\N	2015-09-06 05:44:29	2015-09-06 05:44:29	6853f67088cd470bf4c1f36e	f	2015-09-06 05:44:29	2015-09-06 05:44:29	\N	\N	\N
2	9	objective-c	hello-world	0	\N	2015-08-19 00:36:15	2015-08-19 00:36:15	12ba4236ca696fc963bc40a6	f	2015-08-19 00:36:15	2015-08-19 00:36:15	\N	\N	\N
3	9	elisp	bob	0	\N	2015-08-05 19:10:15	2015-08-05 19:10:15	ae167414c5b5078b06ca638b	f	2015-08-05 19:10:15	2015-08-05 19:10:15	\N	\N	\N
4	11	elisp	hello-world	0	\N	2015-12-20 13:40:18	2015-12-20 13:40:18	afd9e16592be1e659de1b7c3	f	2015-12-20 13:40:18	2015-12-20 13:40:18	\N	\N	\N
5	11	ruby	binary	1	pending	2015-09-26 12:54:30	2015-09-26 12:54:30	c83da3b138c36eec51e12c61	f	2016-01-04 20:56:44	2016-01-04 20:56:44	Submitted an iteration	\N	\N
6	11	ruby	rna-transcription	2	hibernating	2015-08-08 05:12:12	2015-08-08 05:12:12	8ee7a8925122fa6e8aebb676	f	2015-11-29 14:09:37	2015-11-29 14:09:37	Submitted an iteration	\N	\N
7	12	haskell	leap	1	done	2016-01-10 00:18:00	2016-01-10 00:18:00	4b5cb63e8c436f08b7c8e975	t	2016-01-12 23:45:36	2016-01-12 23:45:36	Submitted an iteration	\N	\N
8	12	php	hamming	0	\N	2016-01-11 00:02:48	2016-01-11 00:02:48	b6d1593c56dfd48280f038e5	f	2016-01-11 00:02:48	2016-01-11 00:02:48	\N	\N	\N
9	12	ruby	hello-world	0	done	2016-01-12 09:03:58	2016-01-12 09:03:58	8d38df9b3a40b79d7e229d50	t	2016-01-12 09:03:58	2016-01-12 09:03:58	\N	\N	\N
10	12	ruby	sieve	2	hibernating	2016-01-10 09:22:52	2016-01-10 09:22:52	548418b4eecee2f098c196ec	f	2016-01-13 06:45:48	2016-01-13 06:45:48	Submitted an iteration	\N	\N
11	12	javascript	bob	1	done	2016-01-10 20:31:05	2016-01-10 20:31:05	ccb37c31aa0abbada1740a1d	t	2016-01-11 13:29:36	2016-01-11 13:29:36	Submitted an iteration	\N	\N
12	12	ruby	sum-of-multiples	1	pending	2016-01-10 08:44:00	2016-01-10 08:44:00	9e1937c0b6cd18e8f212764e	f	2016-01-14 18:25:39	2016-01-14 18:25:39	Submitted an iteration	\N	\N
13	12	ruby	rna-transcription	4	pending	2016-01-10 12:00:59	2016-01-10 12:00:59	650f16d15f24b4e2e5454c55	t	2016-01-12 04:05:41	2016-01-12 04:05:41	Submitted an iteration	\N	\N
14	15	python	largest-series-product	1	pending	2015-11-02 08:29:53	2015-11-02 08:29:53	3be923c4bb3232dc553fcc33	f	2015-12-19 16:55:43	2015-12-19 16:55:43	Submitted an iteration	\N	\N
15	15	java	etl	0	\N	2015-10-15 08:35:43	2015-10-15 08:35:43	29921541fca900887c7f40ef	f	2015-10-15 08:35:43	2015-10-15 08:35:43	\N	\N	\N
16	15	elixir	space-age	0	\N	2015-11-08 16:34:09	2015-11-08 16:34:09	bb7e940892feb8c3118951e3	f	2015-11-08 16:34:09	2015-11-08 16:34:09	\N	\N	\N
17	15	lua	word-count	0	\N	2015-11-09 09:00:34	2015-11-09 09:00:34	43c5597c2746297190646305	f	2015-11-09 09:00:34	2015-11-09 09:00:34	\N	\N	\N
18	22	elisp	hello-world	0	\N	2015-12-13 06:34:15	2015-12-13 06:34:15	be2a5279afaaf662a249fb33	f	2015-12-13 06:34:15	2015-12-13 06:34:15	\N	\N	\N
19	22	elixir	bob	3	done	2015-12-01 01:39:20	2015-12-01 01:39:20	ed477544bcdb821b16570509	t	2015-12-27 19:32:42	2015-12-27 19:32:42	Submitted an iteration	\N	\N
20	22	python	rna-transcription	1	pending	2015-12-04 15:03:21	2015-12-04 15:03:21	59e50b8fa9747468fd652348	f	2015-12-07 11:31:11	2015-12-07 11:31:11	Submitted an iteration	\N	\N
21	22	lua	hello-world	0	\N	2015-12-27 19:16:31	2015-12-27 19:16:31	ef7d3c4665bc54ed6cf96f37	f	2015-12-27 19:16:31	2015-12-27 19:16:31	\N	\N	\N
22	22	scala	grains	1	\N	2015-12-04 00:50:33	2015-12-04 00:50:33	76951909b21c3a8a55a00d06	f	2016-01-09 19:46:22	2016-01-09 19:46:22	@abo64 commented	2015-10-01 06:04:29.622157	\N
23	22	go	raindrops	1	pending	2015-12-23 09:49:55	2015-12-23 09:49:55	62c09d0a75ae9bc8638aff28	f	2016-01-13 05:59:19	2016-01-13 05:59:19	Submitted an iteration	\N	\N
24	28	lfe	leap	0	\N	2016-01-09 17:31:28	2016-01-09 17:31:28	5d4333c549fc19e4abc81ebc	f	2016-01-09 17:31:28	2016-01-09 17:31:28	\N	\N	\N
25	29	cpp	hello-world	0	done	2015-12-30 11:51:29	2015-12-30 11:51:29	72a25a45df172062faafa0a9	t	2015-12-30 11:51:29	2015-12-30 11:51:29	\N	\N	\N
26	29	clojure	hello-world	0	\N	2015-07-29 10:20:25	2015-07-29 10:20:25	6e4be95a8ebde7eaf2ad3bc9	f	2015-07-29 10:20:25	2015-07-29 10:20:25	\N	\N	\N
27	29	ruby	hamming	1	pending	2015-08-01 09:32:07	2015-08-01 09:32:07	73e329f7b79f7e5ad1f82974	f	2015-09-22 12:10:34	2015-09-22 12:10:34	Submitted an iteration	\N	\N
28	29	lua	hello-world	0	\N	2015-08-17 22:43:28	2015-08-17 22:43:28	3dcc4a03991c0e5a31b221c2	f	2015-08-17 22:43:28	2015-08-17 22:43:28	\N	\N	\N
29	29	haskell	hello-world	0	done	2015-06-20 04:15:35	2015-06-20 04:15:35	5beeac1ba0466544a88efe53	t	2015-06-20 04:15:35	2015-06-20 04:15:35	\N	\N	\N
30	29	csharp	leap	0	\N	2015-07-14 16:35:18	2015-07-14 16:35:18	2a83a035d70d876f7ff47429	f	2015-07-14 16:35:18	2015-07-14 16:35:18	\N	\N	\N
31	29	javascript	beer-song	1	pending	2015-06-25 23:45:26	2015-06-25 23:45:26	f99a841a2f172862d6a5708e	f	2015-12-30 02:03:43	2015-12-30 02:03:43	Submitted an iteration	\N	\N
32	29	scala	hello-world	0	\N	2015-11-01 23:50:05	2015-11-01 23:50:05	e518089238367efe878caa05	f	2015-11-01 23:50:05	2015-11-01 23:50:05	\N	\N	\N
33	29	java	bob	1	pending	2015-07-27 05:32:09	2015-07-27 05:32:09	097c7dcf59c1e35b67ba9195	f	2015-08-29 16:03:39	2015-08-29 16:03:39	Submitted an iteration	\N	\N
34	29	objective-c	hello-world	0	\N	2015-07-26 17:10:58	2015-07-26 17:10:58	7099a7110ed4d0ce898341ee	f	2015-07-26 17:10:58	2015-07-26 17:10:58	\N	\N	\N
35	29	ruby	gigasecond	1	done	2015-06-22 10:38:02	2015-06-22 10:38:02	f8a777d168f596add0c8a47a	t	2015-08-24 04:13:40	2015-08-24 04:13:40	Submitted an iteration	\N	\N
36	29	python	series	1	pending	2015-07-28 17:57:06	2015-07-28 17:57:06	62485fc73263f4331241272e	f	2015-10-20 09:59:01	2015-10-20 09:59:01	Submitted an iteration	\N	\N
37	29	python	word-count	1	unstarted	2015-08-08 00:37:34	2015-08-08 00:37:34	f4c32d73b7564cf23ff8ef0e	t	2015-11-04 23:31:09	2015-11-04 23:31:09	Submitted an iteration	2015-11-16 00:19:18.56636	\N
38	29	plsql	hamming	0	\N	2015-08-05 20:09:25	2015-08-05 20:09:25	acc59ce1d5cabb1b9f236cfd	f	2015-08-05 20:09:25	2015-08-05 20:09:25	\N	\N	\N
39	29	rust	leap	0	\N	2015-07-14 01:34:05	2015-07-14 01:34:05	ffa339edece41c3a6c10bea0	f	2015-07-14 01:34:05	2015-07-14 01:34:05	\N	\N	\N
40	29	objective-c	word-count	0	\N	2015-09-13 22:09:15	2015-09-13 22:09:15	55243899185e4ca86fc4e81f	f	2015-09-13 22:09:15	2015-09-13 22:09:15	\N	\N	\N
41	29	java	nucleotide-count	1	pending	2015-10-25 13:09:52	2015-10-25 13:09:52	7eb65ccd95aa7ac6869ef340	f	2016-01-13 04:39:15	2016-01-13 04:39:15	Submitted an iteration	\N	\N
42	29	python	rna-transcription	1	done	2015-06-26 23:26:02	2015-06-26 23:26:02	6b2786ad5c1cc8a7d769ab1b	t	2015-10-30 22:44:08	2015-10-30 22:44:08	Submitted an iteration	\N	\N
43	29	clojure	bob	1	hibernating	2015-06-22 04:17:53	2015-06-22 04:17:53	e565ae7880b9067ed14269f0	f	2015-07-11 06:26:47	2015-07-11 06:26:47	Submitted an iteration	\N	\N
44	31	lfe	space-age	0	\N	2015-09-02 09:40:00	2015-09-02 09:40:00	69b8c01ccb5171c267df9508	f	2015-09-02 09:40:00	2015-09-02 09:40:00	\N	\N	\N
45	31	csharp	hamming	1	hibernating	2015-08-07 14:36:07	2015-08-07 14:36:07	f971d0a99f8eb6051577c3b2	f	2015-12-07 17:28:31	2015-12-07 17:28:31	Submitted an iteration	\N	\N
46	31	elixir	hello-world	0	done	2015-11-06 02:50:22	2015-11-06 02:50:22	cc20e5bfb1be8095d4981282	t	2015-11-06 02:50:22	2015-11-06 02:50:22	\N	\N	\N
47	31	lua	accumulate	0	\N	2015-10-26 07:08:13	2015-10-26 07:08:13	6c980cc3fd2298e6151458c6	f	2015-10-26 07:08:13	2015-10-26 07:08:13	\N	\N	\N
48	31	javascript	phone-number	1	pending	2015-10-22 14:19:08	2015-10-22 14:19:08	688d958748b1e025a1fdd95f	f	2015-11-17 21:12:35	2015-11-17 21:12:35	Submitted an iteration	\N	\N
49	31	haskell	leap	3	done	2015-10-17 00:30:41	2015-10-17 00:30:41	5451ee6b01dd891ca0740fad	t	2015-12-28 15:40:57	2015-12-28 15:40:57	Submitted an iteration	\N	\N
50	33	scala	meetup	1	pending	2015-06-29 02:48:41	2015-06-29 02:48:41	0a747e40c703f6144d02f850	f	2015-12-22 05:03:25	2015-12-22 05:03:25	@hasumedic commented	\N	\N
51	33	javascript	word-count	2	done	2015-08-13 18:27:02	2015-08-13 18:27:02	cc98642df8dd8528cdfe79e1	t	2015-09-26 20:10:37	2015-09-26 20:10:37	Submitted an iteration	\N	\N
52	33	coffeescript	hello-world	0	\N	2015-10-07 21:31:49	2015-10-07 21:31:49	6377f3f763c511406ea4d9d1	f	2015-10-07 21:31:49	2015-10-07 21:31:49	\N	\N	\N
53	33	lisp	point-mutations	0	\N	2015-07-13 19:17:28	2015-07-13 19:17:28	25ebc1352699356dc09faba1	f	2015-07-13 19:17:28	2015-07-13 19:17:28	\N	\N	\N
54	33	erlang	hello-world	0	\N	2015-10-11 07:43:16	2015-10-11 07:43:16	262582f11d9b4970263e691a	f	2015-10-11 07:43:16	2015-10-11 07:43:16	\N	\N	\N
55	38	python	scrabble-score	1	hibernating	2015-11-21 19:22:18	2015-11-21 19:22:18	2b4aa4fc7b7275a240da4ed8	f	2016-01-12 07:00:07	2016-01-12 07:00:07	Submitted an iteration	\N	\N
56	38	python	hello-world	0	\N	2015-11-25 16:20:31	2015-11-25 16:20:31	73513b71d41a82077d9751c9	f	2015-11-25 16:20:31	2015-11-25 16:20:31	\N	\N	\N
57	38	python	matrix	2	pending	2015-12-02 07:00:08	2015-12-02 07:00:08	50fbb9a28f0a43da3e579cdb	f	2015-12-28 03:10:39	2015-12-28 03:10:39	Submitted an iteration	\N	\N
58	40	csharp	leap	0	\N	2015-12-21 07:54:03	2015-12-21 07:54:03	8d32210d0dfbe15be93bbf50	f	2015-12-21 07:54:03	2015-12-21 07:54:03	\N	\N	\N
59	40	erlang	leap	0	\N	2015-11-19 07:20:09	2015-11-19 07:20:09	f01ee4509463af4101f07035	f	2015-11-19 07:20:09	2015-11-19 07:20:09	\N	\N	\N
60	44	cpp	bob	0	\N	2015-12-11 19:53:00	2015-12-11 19:53:00	eff72ac0fe2cae52035212d3	f	2015-12-11 19:53:00	2015-12-11 19:53:00	\N	\N	\N
61	44	ruby	bob	1	pending	2015-12-13 11:41:38	2015-12-13 11:41:38	222594ae10c926fdbda8bf53	f	2016-01-09 04:09:48	2016-01-09 04:09:48	Submitted an iteration	\N	\N
62	44	php	hamming	0	\N	2015-12-20 03:48:37	2015-12-20 03:48:37	3b4a4d25d08f28949089906e	f	2015-12-20 03:48:37	2015-12-20 03:48:37	\N	\N	\N
63	44	haskell	pig-latin	1	done	2015-10-14 09:40:56	2015-10-14 09:40:56	a1a03719a319c3b49619a955	t	2016-01-02 22:44:07	2016-01-02 22:44:07	Submitted an iteration	\N	\N
64	44	csharp	roman-numerals	1	hibernating	2015-10-22 01:13:49	2015-10-22 01:13:49	c517e83f0bc5a0e491f96a55	f	2015-11-26 23:02:05	2015-11-26 23:02:05	Submitted an iteration	\N	\N
65	44	haskell	minesweeper	1	pending	2015-11-28 09:28:25	2015-11-28 09:28:25	8d5b51d876a6d7d3cec7cdca	t	2015-12-27 20:56:09	2015-12-27 20:56:09	Submitted an iteration	\N	\N
66	46	perl5	bob	0	\N	2015-10-26 08:54:32	2015-10-26 08:54:32	f2c223eef67adf1dca1495e7	f	2015-10-26 08:54:32	2015-10-26 08:54:32	\N	\N	\N
67	46	ruby	hamming	3	done	2015-10-19 05:32:24	2015-10-19 05:32:24	5f7e6e9d69c43c11e6bff583	t	2016-01-04 18:17:47	2016-01-04 18:17:47	Submitted an iteration	\N	\N
68	46	javascript	word-count	2	\N	2015-10-12 11:59:58	2015-10-12 11:59:58	ba1ca428184664d62258e575	f	2015-10-28 16:46:02	2015-10-28 16:46:02	Submitted an iteration	\N	\N
69	46	erlang	strain	2	\N	2015-10-21 19:21:11	2015-10-21 19:21:11	4ef772e6483871bfbd20001b	f	2015-12-29 11:12:13	2015-12-29 11:12:13	Submitted an iteration	2015-10-02 22:09:11.446922	\N
70	46	go	etl	3	done	2015-12-16 05:43:04	2015-12-16 05:43:04	01d7708c0c3131588b5d6cfc	t	2016-01-10 07:31:00	2016-01-10 07:31:00	Submitted an iteration	\N	\N
71	46	haskell	gigasecond	0	\N	2016-01-01 05:26:46	2016-01-01 05:26:46	b3a0858cc2ae545083736719	f	2016-01-01 05:26:46	2016-01-01 05:26:46	\N	\N	\N
72	48	scala	meetup	0	\N	2015-11-14 02:26:48	2015-11-14 02:26:48	7dca94fe43f265f004d29a95	f	2015-11-14 02:26:48	2015-11-14 02:26:48	\N	\N	\N
73	48	cpp	bob	0	\N	2015-10-09 05:04:59	2015-10-09 05:04:59	49555f59c31221609a3bf938	f	2015-10-09 05:04:59	2015-10-09 05:04:59	\N	\N	\N
74	48	python	roman-numerals	1	pending	2015-08-26 06:46:31	2015-08-26 06:46:31	679c4945432a8aee5999be27	f	2015-09-22 03:36:37	2015-09-22 03:36:37	Submitted an iteration	\N	\N
75	48	python	hello-world	0	\N	2015-10-27 03:37:58	2015-10-27 03:37:58	5cf321f0d60645f99b379740	f	2015-10-27 03:37:58	2015-10-27 03:37:58	\N	\N	\N
76	48	erlang	leap	0	\N	2015-09-14 21:23:42	2015-09-14 21:23:42	77527395b91378d8351e520a	f	2015-09-14 21:23:42	2015-09-14 21:23:42	\N	\N	\N
77	48	ocaml	bob	0	\N	2015-12-31 17:36:14	2015-12-31 17:36:14	8dc7e49c54070ef4903e840e	f	2015-12-31 17:36:14	2015-12-31 17:36:14	\N	\N	\N
78	49	scheme	hello-world	0	\N	2015-10-25 00:03:55	2015-10-25 00:03:55	14256f4fb71bf889c50b2b83	f	2015-10-25 00:03:55	2015-10-25 00:03:55	\N	\N	\N
79	26	swift	nucleotide-count	0	\N	2015-10-09 10:34:13	2015-10-09 10:34:13	20935b5d250e380ebe429ecd	f	2015-10-09 10:34:13	2015-10-09 10:34:13	\N	\N	\N
80	26	elixir	bob	0	\N	2015-08-28 08:20:10	2015-08-28 08:20:10	9b7728f3a62abf18d66c6ee9	f	2015-08-28 08:20:10	2015-08-28 08:20:10	\N	\N	\N
81	26	javascript	bob	1	pending	2015-09-29 19:44:02	2015-09-29 19:44:02	f214feffe664a0e363395c50	f	2015-11-04 19:56:31	2015-11-04 19:56:31	Submitted an iteration	\N	\N
82	26	lfe	anagram	0	\N	2015-12-13 07:26:15	2015-12-13 07:26:15	60be41b7b11400dd63142072	f	2015-12-13 07:26:15	2015-12-13 07:26:15	\N	\N	\N
83	26	ruby	robot-name	1	pending	2015-08-15 14:24:45	2015-08-15 14:24:45	47a632e03c28fb8f2e8e862a	f	2015-12-14 10:23:53	2015-12-14 10:23:53	Submitted an iteration	\N	\N
84	26	elixir	word-count	1	done	2015-11-04 04:28:37	2015-11-04 04:28:37	af172327a1f042d8318b15d2	t	2015-11-12 15:25:42	2015-11-12 15:25:42	Submitted an iteration	\N	\N
85	26	java	etl	1	pending	2015-10-15 04:37:40	2015-10-15 04:37:40	1e134c8af26349b8506150a0	f	2015-10-30 17:19:04	2015-10-30 17:19:04	Submitted an iteration	\N	\N
86	26	python	roman-numerals	1	pending	2015-08-29 16:05:25	2015-08-29 16:05:25	890d10782a215ac2d9bec405	f	2015-11-23 03:06:05	2015-11-23 03:06:05	Submitted an iteration	\N	\N
87	26	scheme	leap	0	\N	2015-11-15 02:55:02	2015-11-15 02:55:02	653923fb498afd30115f292c	f	2015-11-15 02:55:02	2015-11-15 02:55:02	\N	\N	\N
88	26	php	hamming	0	\N	2015-08-02 07:10:15	2015-08-02 07:10:15	45e4a08a539005c9ad492db5	f	2015-08-02 07:10:15	2015-08-02 07:10:15	\N	\N	\N
89	26	clojure	bob	0	\N	2015-12-19 03:03:29	2015-12-19 03:03:29	5b18de0fa6961e77d2ab879b	f	2015-12-19 03:03:29	2015-12-19 03:03:29	\N	\N	\N
90	26	plsql	hamming	0	\N	2015-08-26 15:38:36	2015-08-26 15:38:36	18352b060da9abe51fcdd0cb	f	2015-08-26 15:38:36	2015-08-26 15:38:36	\N	\N	\N
91	26	javascript	hello-world	0	\N	2015-09-08 18:16:27	2015-09-08 18:16:27	867319dab4e4ebc59b84c717	f	2015-09-08 18:16:27	2015-09-08 18:16:27	\N	\N	\N
92	26	fsharp	sum-of-multiples	0	\N	2016-01-09 05:10:29	2016-01-09 05:10:29	d31d47b829476aea4cd19ba6	f	2016-01-09 05:10:29	2016-01-09 05:10:29	\N	\N	\N
93	26	cpp	bob	0	\N	2015-08-07 01:07:45	2015-08-07 01:07:45	fbf3ace6a3c98344ac13a747	f	2015-08-07 01:07:45	2015-08-07 01:07:45	\N	\N	\N
94	26	ruby	bob	3	done	2015-07-23 07:40:12	2015-07-23 07:40:12	d1dbf3d1f409c6f157f3c449	t	2015-12-10 20:09:14	2015-12-10 20:09:14	Submitted an iteration	\N	\N
95	26	ruby	leap	2	\N	2015-08-17 06:47:45	2015-08-17 06:47:45	6b98392c9e27d97013b32203	f	2015-10-25 11:48:48	2015-10-25 11:48:48	@jmodjeska commented	2015-11-03 01:25:43.070878	\N
96	26	python	hello-world	0	\N	2015-10-10 16:09:53	2015-10-10 16:09:53	155694243535a2fdf9a613c7	f	2015-10-10 16:09:53	2015-10-10 16:09:53	\N	\N	\N
97	26	elixir	scrabble-score	1	pending	2015-07-28 07:18:41	2015-07-28 07:18:41	be6760f8d55cd299cc3cec2f	f	2015-10-03 03:11:00	2015-10-03 03:11:00	Submitted an iteration	\N	\N
98	26	elisp	bob	0	\N	2015-09-13 06:36:28	2015-09-13 06:36:28	66f8dafa510a4f4e6a7d02db	f	2015-09-13 06:36:28	2015-09-13 06:36:28	\N	\N	\N
99	26	swift	anagram	0	\N	2015-12-22 01:27:31	2015-12-22 01:27:31	dbf15e13304f507ff78e548c	f	2015-12-22 01:27:31	2015-12-22 01:27:31	\N	\N	\N
100	26	scala	raindrops	1	\N	2015-08-02 18:43:43	2015-08-02 18:43:43	e4dc2c3a150143564cc8f538	f	2015-11-24 03:37:20	2015-11-24 03:37:20	Submitted an iteration	\N	\N
101	26	lua	hamming	0	\N	2015-09-18 02:30:04	2015-09-18 02:30:04	8e155fea8409130445ec3d10	f	2015-09-18 02:30:04	2015-09-18 02:30:04	\N	\N	\N
102	26	swift	hello-world	0	\N	2015-11-16 06:44:59	2015-11-16 06:44:59	f440c4a24baa1ccad4b9be75	f	2015-11-16 06:44:59	2015-11-16 06:44:59	\N	\N	\N
103	26	perl5	bob	0	\N	2015-12-16 03:30:58	2015-12-16 03:30:58	555a7b903398d28f84d45d08	f	2015-12-16 03:30:58	2015-12-16 03:30:58	\N	\N	\N
104	26	scheme	hello-world	0	\N	2015-12-23 09:25:08	2015-12-23 09:25:08	7adc41f1e22272ba06cfb8e3	f	2015-12-23 09:25:08	2015-12-23 09:25:08	\N	\N	\N
105	26	ruby	gigasecond	1	hibernating	2015-09-16 20:22:14	2015-09-16 20:22:14	10cea10c0e9986705268171c	f	2015-12-19 02:00:31	2015-12-19 02:00:31	Submitted an iteration	\N	\N
106	26	csharp	leap	0	\N	2015-08-27 06:37:08	2015-08-27 06:37:08	33c496cca7d3e155c86ba28c	f	2015-08-27 06:37:08	2015-08-27 06:37:08	\N	\N	\N
107	26	python	largest-series-product	1	pending	2015-09-26 15:25:47	2015-09-26 15:25:47	358d39938933d4f32abd63aa	f	2016-01-04 15:04:30	2016-01-04 15:04:30	Submitted an iteration	\N	\N
108	26	elisp	hello-world	0	\N	2015-11-30 16:44:41	2015-11-30 16:44:41	6a72f13b75699590370245fd	f	2015-11-30 16:44:41	2015-11-30 16:44:41	\N	\N	\N
109	26	haskell	grains	1	hibernating	2015-11-08 06:51:07	2015-11-08 06:51:07	439f7c7828a6200a4fa06e9a	f	2015-12-16 15:31:22	2015-12-16 15:31:22	Submitted an iteration	\N	\N
110	26	rust	leap	0	\N	2015-10-27 20:59:38	2015-10-27 20:59:38	fea54321438604c91ef8c48a	f	2015-10-27 20:59:38	2015-10-27 20:59:38	\N	\N	\N
111	26	python	gigasecond	1	pending	2015-08-12 21:40:55	2015-08-12 21:40:55	aa7f66f352bc6f55bcf2d7ca	f	2015-10-15 05:21:53	2015-10-15 05:21:53	Submitted an iteration	\N	\N
112	26	javascript	rna-transcription	0	\N	2015-08-09 13:05:32	2015-08-09 13:05:32	0dc666c622f4e16615e2f956	f	2015-08-09 13:05:32	2015-08-09 13:05:32	\N	\N	\N
113	26	lua	accumulate	0	\N	2015-12-11 03:46:55	2015-12-11 03:46:55	498dd019e44436ab06eadf29	f	2015-12-11 03:46:55	2015-12-11 03:46:55	\N	\N	\N
114	26	racket	hello-world	0	\N	2015-12-06 22:17:34	2015-12-06 22:17:34	f8b16ab8b07c6dd7e99b4c95	f	2015-12-06 22:17:34	2015-12-06 22:17:34	\N	\N	\N
115	26	coffeescript	hello-world	0	\N	2015-07-22 22:31:34	2015-07-22 22:31:34	dd7e41ace41e3bd328540b83	f	2015-07-22 22:31:34	2015-07-22 22:31:34	\N	\N	\N
116	26	python	leap	1	pending	2015-09-26 21:26:11	2015-09-26 21:26:11	2610b7c8b023508f38ea81b3	f	2015-12-22 15:20:59	2015-12-22 15:20:59	Submitted an iteration	\N	\N
117	26	lisp	bob	2	hibernating	2015-07-26 20:14:17	2015-07-26 20:14:17	07b72d99fad3852eace2887e	f	2015-12-08 21:42:18	2015-12-08 21:42:18	Submitted an iteration	\N	\N
118	26	ruby	hamming	1	hibernating	2015-11-07 22:47:47	2015-11-07 22:47:47	bf5d3548f812667c1f6350f9	f	2016-01-11 03:11:27	2016-01-11 03:11:27	Submitted an iteration	\N	\N
119	7	php	hamming	0	\N	2015-09-23 23:40:26	2015-09-23 23:40:26	e5bc5fae18759b7f07f61e4e	f	2015-09-23 23:40:26	2015-09-23 23:40:26	\N	\N	\N
120	7	python	palindrome-products	1	pending	2015-05-23 12:39:54	2015-05-23 12:39:54	04ffe496651485d7b382d347	f	2015-07-21 06:44:21	2015-07-21 06:44:21	Submitted an iteration	\N	\N
121	7	ruby	grains	1	hibernating	2015-08-19 03:10:34	2015-08-19 03:10:34	7477f6ca4baec71283713d21	f	2016-01-06 13:53:49	2016-01-06 13:53:49	Submitted an iteration	\N	\N
122	7	ruby	raindrops	1	pending	2015-09-15 17:21:32	2015-09-15 17:21:32	5de67e1423a933a5759f3cff	f	2015-12-23 23:21:52	2015-12-23 23:21:52	Submitted an iteration	\N	\N
123	7	perl5	bob	0	\N	2015-06-21 00:07:44	2015-06-21 00:07:44	d0055f8bbd349c97331a6471	f	2015-06-21 00:07:44	2015-06-21 00:07:44	\N	\N	\N
124	7	coffeescript	hello-world	0	\N	2015-10-02 00:36:58	2015-10-02 00:36:58	de97c3f4edccadf054dfe887	f	2015-10-02 00:36:58	2015-10-02 00:36:58	\N	\N	\N
125	23	swift	leap	0	\N	2015-09-01 07:29:02	2015-09-01 07:29:02	efe5cd72bc44f3b39a79ed8e	f	2015-09-01 07:29:02	2015-09-01 07:29:02	\N	\N	\N
126	23	go	queen-attack	2	pending	2015-08-25 09:19:40	2015-08-25 09:19:40	b80e2c3753706b848d39c137	f	2015-12-09 23:01:08	2015-12-09 23:01:08	Submitted an iteration	\N	\N
127	23	go	secret-handshake	1	pending	2015-11-04 13:31:16	2015-11-04 13:31:16	dfc59f7f3f9143709c0b1040	f	2015-12-08 15:48:46	2015-12-08 15:48:46	Submitted an iteration	\N	\N
128	23	haskell	point-mutations	5	done	2015-09-16 21:22:44	2015-09-16 21:22:44	e7d52c04cff782e8c8f84c60	t	2015-12-16 04:54:04	2015-12-16 04:54:04	Submitted an iteration	\N	\N
129	23	python	meetup	3	pending	2015-09-12 22:51:30	2015-09-12 22:51:30	17de6f767ecd6c5731f4ffac	f	2015-11-24 15:48:45	2015-11-24 15:48:45	Submitted an iteration	\N	\N
130	23	swift	hello-world	0	\N	2015-10-11 13:51:07	2015-10-11 13:51:07	7c9034066c6d064e7e0abab9	f	2015-10-11 13:51:07	2015-10-11 13:51:07	\N	\N	\N
131	23	ruby	robot-simulator	1	pending	2015-09-24 16:05:37	2015-09-24 16:05:37	4877a8a644ccd5561fd6d0d7	f	2015-10-18 08:15:22	2015-10-18 08:15:22	Submitted an iteration	\N	\N
132	23	ruby	rna-transcription	0	\N	2015-08-15 16:15:34	2015-08-15 16:15:34	ac0a246ab0ce95e23f270ea8	f	2015-08-15 16:15:34	2015-08-15 16:15:34	\N	\N	\N
133	23	ruby	raindrops	0	\N	2015-09-07 11:36:20	2015-09-07 11:36:20	851e3d707a36c4d27c979d01	f	2015-09-07 11:36:20	2015-09-07 11:36:20	\N	2015-11-04 18:06:36.340321	\N
134	23	python	rna-transcription	1	done	2015-09-15 02:14:25	2015-09-15 02:14:25	4d10ba50aaf4afccb7cb0557	t	2015-09-25 05:50:09	2015-09-25 05:50:09	Submitted an iteration	\N	\N
135	23	haskell	hello-world	0	done	2015-09-18 03:22:01	2015-09-18 03:22:01	ba6bf17e67c1f0df251fd5bb	t	2015-09-18 03:22:01	2015-09-18 03:22:01	\N	\N	\N
136	23	ruby	gigasecond	2	hibernating	2015-08-14 06:10:01	2015-08-14 06:10:01	b0c737fd1cd66056b1207112	f	2015-12-10 22:53:40	2015-12-10 22:53:40	Submitted an iteration	\N	\N
137	23	javascript	hamming	0	\N	2015-12-15 01:08:57	2015-12-15 01:08:57	4b04c0592c984db282023044	f	2015-12-15 01:08:57	2015-12-15 01:08:57	\N	\N	\N
138	23	javascript	grade-school	1	done	2015-09-05 07:59:48	2015-09-05 07:59:48	548e4c3ca7582f73e99f297a	t	2015-10-10 00:42:36	2015-10-10 00:42:36	Submitted an iteration	\N	\N
139	23	elisp	difference-of-squares	0	\N	2015-09-29 19:39:00	2015-09-29 19:39:00	eee1d8b787903a868ed4af23	f	2015-09-29 19:39:00	2015-09-29 19:39:00	\N	\N	\N
140	23	ruby	roman-numerals	1	pending	2015-08-17 10:02:02	2015-08-17 10:02:02	070003b2c9c715a94b25d24a	f	2016-01-05 16:16:50	2016-01-05 16:16:50	Submitted an iteration	\N	\N
141	23	scheme	hello-world	0	\N	2015-10-18 02:09:13	2015-10-18 02:09:13	44b80d296024380d358c16d6	f	2015-10-18 02:09:13	2015-10-18 02:09:13	\N	\N	\N
142	23	java	robot-name	1	pending	2015-10-01 00:06:30	2015-10-01 00:06:30	bdd6d4f9c66b76fb92cf90ae	f	2015-11-05 17:01:31	2015-11-05 17:01:31	Submitted an iteration	\N	\N
143	23	cpp	bob	1	done	2015-10-31 20:35:10	2015-10-31 20:35:10	5c56406f382634bcf723ed52	t	2015-11-01 04:19:05	2015-11-01 04:19:05	Submitted an iteration	\N	\N
144	23	go	leap	0	\N	2015-09-15 10:06:15	2015-09-15 10:06:15	dc039601c7fbfe0b52bef395	f	2015-09-15 10:06:15	2015-09-15 10:06:15	\N	\N	\N
145	23	javascript	word-count	1	needs_input	2015-10-15 06:24:38	2015-10-15 06:24:38	5be1e842d5aef80782d3c844	f	2015-11-06 08:35:31	2015-11-06 08:35:31	Submitted an iteration	\N	\N
146	23	javascript	anagram	1	pending	2015-08-13 06:04:16	2015-08-13 06:04:16	17bcc835c108ab3799da7e89	f	2015-12-08 21:33:57	2015-12-08 21:33:57	Submitted an iteration	\N	\N
147	23	clojure	bob	0	\N	2015-11-13 21:03:34	2015-11-13 21:03:34	ea59154a9445da2e58b650b1	f	2015-11-13 21:03:34	2015-11-13 21:03:34	\N	\N	\N
148	23	swift	etl	0	\N	2015-11-30 17:06:53	2015-11-30 17:06:53	71f95ddac50675724ffe9726	f	2015-11-30 17:06:53	2015-11-30 17:06:53	\N	\N	\N
149	23	coffeescript	bob	0	\N	2015-11-29 12:21:09	2015-11-29 12:21:09	2be2150342b34fd822aabfda	f	2015-11-29 12:21:09	2015-11-29 12:21:09	\N	\N	\N
150	23	javascript	leap	0	\N	2015-11-06 01:19:15	2015-11-06 01:19:15	73cbb7caee8b900af479d049	f	2015-11-06 01:19:15	2015-11-06 01:19:15	\N	2015-12-11 16:13:53.886187	\N
151	23	ruby	hello-world	0	done	2015-12-20 14:08:30	2015-12-20 14:08:30	f57c0e5237e6ff922e0b2092	t	2015-12-20 14:08:30	2015-12-20 14:08:30	\N	\N	\N
152	23	rust	leap	0	\N	2015-10-24 05:44:24	2015-10-24 05:44:24	466b328dc954ef873ef567ff	f	2015-10-24 05:44:24	2015-10-24 05:44:24	\N	\N	\N
153	23	elixir	bob	0	\N	2015-11-03 07:32:58	2015-11-03 07:32:58	f1ea2bf87d6ab91dd029caf5	f	2015-11-03 07:32:58	2015-11-03 07:32:58	\N	\N	\N
154	23	php	hamming	0	\N	2015-11-14 04:41:32	2015-11-14 04:41:32	e10f2388d226e123d92d3eb2	f	2015-11-14 04:41:32	2015-11-14 04:41:32	\N	\N	\N
155	23	ruby	robot-name	1	hibernating	2015-08-31 19:35:37	2015-08-31 19:35:37	99a17c2b39c5d4f2f64b76bc	f	2016-01-03 01:51:01	2016-01-03 01:51:01	Submitted an iteration	\N	\N
156	23	scala	hello-world	0	\N	2015-11-07 01:08:38	2015-11-07 01:08:38	557a383fc810c8e0c4788e2c	f	2015-11-07 01:08:38	2015-11-07 01:08:38	\N	\N	\N
157	23	python	largest-series-product	1	pending	2015-10-01 00:28:22	2015-10-01 00:28:22	496d79f79eb9819e58528101	f	2015-10-06 06:32:02	2015-10-06 06:32:02	Submitted an iteration	\N	\N
158	23	python	word-count	1	hibernating	2015-08-15 01:51:09	2015-08-15 01:51:09	8845e60b11e4fa85abcd84c6	f	2015-10-17 18:38:24	2015-10-17 18:38:24	Submitted an iteration	\N	\N
159	17	javascript	bob	1	pending	2015-10-27 15:00:00	2015-10-27 15:00:00	387bf54584938fcbe144fddb	f	2015-11-06 07:21:32	2015-11-06 07:21:32	Submitted an iteration	\N	\N
160	20	scala	robot-name	0	\N	2015-06-16 14:48:13	2015-06-16 14:48:13	195a64b3e2da2b66f3787100	f	2015-06-16 14:48:13	2015-06-16 14:48:13	\N	\N	\N
161	20	lfe	leap	0	\N	2015-05-03 11:20:01	2015-05-03 11:20:01	620b16f4220a365a055c1c82	f	2015-05-03 11:20:01	2015-05-03 11:20:01	\N	\N	\N
162	21	python	leap	1	pending	2015-09-29 19:25:03	2015-09-29 19:25:03	4f8f3da618c9b0a9f5578a86	f	2015-12-01 23:26:03	2015-12-01 23:26:03	Submitted an iteration	\N	\N
163	36	python	hello-world	0	unstarted	2015-07-13 01:51:15	2015-07-13 01:51:15	39310bb80745f09477825216	f	2015-07-13 01:51:15	2015-07-13 01:51:15	\N	\N	\N
164	36	clojure	bob	0	\N	2016-01-15 09:07:37	2016-01-15 09:07:37	09dfccf227ab84d8893e9fc3	f	2016-01-15 09:07:37	2016-01-15 09:07:37	\N	\N	\N
165	36	javascript	leap	2	pending	2015-08-27 20:03:57	2015-08-27 20:03:57	caa3c7fbdbbce58dd62135b8	t	2015-12-12 17:29:27	2015-12-12 17:29:27	Submitted an iteration	\N	\N
166	36	scheme	bob	0	\N	2015-06-28 16:20:06	2015-06-28 16:20:06	a4ed0c877c28f4bc40cc6f86	f	2015-06-28 16:20:06	2015-06-28 16:20:06	\N	\N	\N
167	30	ruby	hello-world	0	\N	2015-09-22 18:53:45	2015-09-22 18:53:45	b799c40b9cdbfe5edd1e3636	f	2015-09-22 18:53:45	2015-09-22 18:53:45	\N	\N	\N
168	30	erlang	leap	0	\N	2015-12-19 17:31:19	2015-12-19 17:31:19	b62a7e6e7eb37c01dadf1062	f	2015-12-19 17:31:19	2015-12-19 17:31:19	\N	\N	\N
169	30	go	leap	0	\N	2015-10-29 19:04:18	2015-10-29 19:04:18	1b554fd7c7d800adf3b7bf02	f	2015-10-29 19:04:18	2015-10-29 19:04:18	\N	\N	\N
170	30	go	allergies	3	done	2015-09-21 03:51:02	2015-09-21 03:51:02	238ef9b846b7c354aba32ccf	t	2016-01-04 14:53:03	2016-01-04 14:53:03	Submitted an iteration	\N	\N
171	30	javascript	grade-school	1	pending	2015-10-10 21:43:47	2015-10-10 21:43:47	dd57cc2c78ad6536e01464c7	f	2015-11-25 23:02:44	2015-11-25 23:02:44	Submitted an iteration	\N	\N
172	30	ruby	hamming	3	done	2015-10-15 12:47:02	2015-10-15 12:47:02	d6f1bb1feb8b22000d377f3a	t	2015-12-10 18:34:00	2015-12-10 18:34:00	Submitted an iteration	\N	\N
173	30	csharp	allergies	1	pending	2015-09-18 00:18:49	2015-09-18 00:18:49	ed84a904b3abaf12db5bee8b	f	2015-09-20 16:43:49	2015-09-20 16:43:49	Submitted an iteration	\N	\N
174	30	clojure	point-mutations	1	pending	2016-01-08 18:36:33	2016-01-08 18:36:33	1b004caefdff7ef9a8b55aff	f	2016-01-15 05:34:45	2016-01-15 05:34:45	Submitted an iteration	\N	\N
175	30	python	gigasecond	1	hibernating	2015-09-25 05:37:22	2015-09-25 05:37:22	5d21b61391ce28597057dcbc	t	2016-01-06 07:44:34	2016-01-06 07:44:34	Submitted an iteration	\N	\N
176	35	lisp	raindrops	0	\N	2015-12-21 02:04:04	2015-12-21 02:04:04	515b2b01b238cbb648c3b918	f	2015-12-21 02:04:04	2015-12-21 02:04:04	\N	\N	\N
177	35	ruby	robot-name	1	pending	2015-08-24 07:21:46	2015-08-24 07:21:46	331493658048deb178f60918	f	2015-12-17 23:54:41	2015-12-17 23:54:41	Submitted an iteration	\N	\N
178	35	python	hello-world	0	\N	2015-08-03 23:33:37	2015-08-03 23:33:37	36feb523e791c2032a2b70aa	f	2015-08-03 23:33:37	2015-08-03 23:33:37	\N	\N	\N
179	35	go	raindrops	5	hibernating	2015-09-08 14:02:49	2015-09-08 14:02:49	299cd61dbe79a9c6f16be887	f	2016-01-01 20:57:06	2016-01-01 20:57:06	Submitted an iteration	\N	\N
180	35	python	bob	2	pending	2015-07-06 21:59:21	2015-07-06 21:59:21	4be06ffde9b9f1fb9aa32d85	f	2015-10-11 13:56:41	2015-10-11 13:56:41	Submitted an iteration	\N	\N
181	35	lisp	point-mutations	0	\N	2016-01-12 08:26:39	2016-01-12 08:26:39	8fec10495781699298d3f2bb	f	2016-01-12 08:26:39	2016-01-12 08:26:39	\N	\N	\N
182	14	python	hello-world	0	\N	2016-01-11 16:12:03	2016-01-11 16:12:03	a2e4729d69cfd8c2af6f7915	f	2016-01-11 16:12:03	2016-01-11 16:12:03	\N	\N	\N
183	41	ruby	bob	1	pending	2015-11-14 18:40:27	2015-11-14 18:40:27	20dfb633b3dc1fc8275102ff	f	2015-12-19 04:47:33	2015-12-19 04:47:33	Submitted an iteration	\N	\N
184	41	go	leap	0	\N	2015-12-28 06:30:49	2015-12-28 06:30:49	eaaa22f7cca10f54e943492c	f	2015-12-28 06:30:49	2015-12-28 06:30:49	\N	\N	\N
185	6	ruby	hello-world	2	\N	2015-11-16 21:28:01	2015-11-16 21:28:01	2cd9f5301e9ff3437db78f0c	f	2016-01-06 15:13:29	2016-01-06 15:13:29	@jcfausto commented	2015-10-01 02:06:27.219223	\N
186	6	csharp	leap	0	\N	2015-12-02 21:54:03	2015-12-02 21:54:03	f7c339fcc54f1348674216d7	f	2015-12-02 21:54:03	2015-12-02 21:54:03	\N	\N	\N
187	6	ruby	leap	1	pending	2015-11-21 21:13:48	2015-11-21 21:13:48	3da2cab5eabb13fa5c54f7a9	f	2015-12-28 07:13:35	2015-12-28 07:13:35	Submitted an iteration	\N	\N
188	6	javascript	hello-world	0	done	2015-10-13 05:19:52	2015-10-13 05:19:52	39ccb9bad7ff6f7214010176	t	2015-10-13 05:19:52	2015-10-13 05:19:52	\N	\N	\N
189	6	javascript	hamming	2	pending	2015-11-25 01:17:13	2015-11-25 01:17:13	772c4b0d963b1ab6be463f76	f	2015-12-21 11:52:03	2015-12-21 11:52:03	Submitted an iteration	\N	\N
190	34	javascript	hello-world	1	\N	2016-01-09 16:01:55	2016-01-09 16:01:55	0f636e3cf8171f60d4fc40e4	f	2016-01-12 00:02:46	2016-01-12 00:02:46	Submitted an iteration	\N	\N
191	16	lfe	etl	0	\N	2016-01-01 10:13:22	2016-01-01 10:13:22	646215835cb7cb98d60f6f38	f	2016-01-01 10:13:22	2016-01-01 10:13:22	\N	\N	\N
192	16	ecmascript	hello-world	0	\N	2015-12-03 07:31:41	2015-12-03 07:31:41	43feba6679d328b9dd4d5a75	f	2015-12-03 07:31:41	2015-12-03 07:31:41	\N	\N	\N
193	16	ruby	word-count	1	done	2015-10-24 17:21:26	2015-10-24 17:21:26	6cec36e661943ce0ad1eb56b	t	2015-11-23 23:34:08	2015-11-23 23:34:08	Submitted an iteration	\N	\N
194	16	lua	hello-world	0	\N	2015-11-17 02:04:39	2015-11-17 02:04:39	0791a971de04c4c1236941de	f	2015-11-17 02:04:39	2015-11-17 02:04:39	\N	\N	\N
195	16	javascript	rna-transcription	1	pending	2015-11-21 02:06:21	2015-11-21 02:06:21	bdf04084b13757b86b13f5a7	f	2015-12-15 11:25:43	2015-12-15 11:25:43	Submitted an iteration	\N	\N
196	16	ruby	difference-of-squares	1	pending	2015-11-18 22:10:20	2015-11-18 22:10:20	3128db4f2ac90fd0aff3d579	f	2015-12-14 02:10:50	2015-12-14 02:10:50	Submitted an iteration	\N	\N
197	16	elixir	hello-world	0	done	2016-01-01 19:50:55	2016-01-01 19:50:55	7d3c47b7fa5c6afeccefd19d	t	2016-01-01 19:50:55	2016-01-01 19:50:55	\N	\N	\N
198	18	objective-c	hello-world	0	\N	2015-06-26 14:37:08	2015-06-26 14:37:08	d873ec52b4216140f89ad611	f	2015-06-26 14:37:08	2015-06-26 14:37:08	\N	\N	\N
199	18	haskell	robot-name	0	\N	2015-12-30 04:37:53	2015-12-30 04:37:53	c55c7279d50be06674782607	f	2015-12-30 04:37:53	2015-12-30 04:37:53	\N	\N	\N
200	18	haskell	space-age	2	done	2015-06-22 21:43:24	2015-06-22 21:43:24	19b2bffc4bdc55407f670ea8	t	2015-11-14 04:13:19	2015-11-14 04:13:19	Submitted an iteration	\N	\N
201	18	lfe	leap	0	\N	2016-01-08 07:10:15	2016-01-08 07:10:15	9d4e13ea2d448388601116f5	f	2016-01-08 07:10:15	2016-01-08 07:10:15	\N	\N	\N
202	18	ocaml	bob	0	\N	2015-12-29 22:34:43	2015-12-29 22:34:43	5e8215d20eb3a074d142cfda	f	2015-12-29 22:34:43	2015-12-29 22:34:43	\N	\N	\N
203	18	cpp	word-count	0	\N	2015-11-06 08:37:46	2015-11-06 08:37:46	ac252318a8a992f6eb0fc1fa	f	2015-11-06 08:37:46	2015-11-06 08:37:46	\N	\N	\N
204	18	javascript	say	1	pending	2015-05-09 17:24:24	2015-05-09 17:24:24	49a4a95bb9c9dac26c68ff3a	f	2015-09-27 03:11:22	2015-09-27 03:11:22	Submitted an iteration	\N	\N
205	24	ruby	hamming	1	hibernating	2015-12-05 16:54:15	2015-12-05 16:54:15	eb66f1a9800a7742fab76782	f	2015-12-30 05:07:43	2015-12-30 05:07:43	Submitted an iteration	\N	\N
206	24	scala	allergies	3	done	2015-12-16 00:18:21	2015-12-16 00:18:21	1274a3e69f45b01b80f1d4ce	f	2015-12-28 22:35:16	2015-12-28 22:35:16	@szafirov commented	\N	\N
207	24	ruby	etl	2	hibernating	2015-12-03 00:17:44	2015-12-03 00:17:44	acc3a0c5f02a9133f83a8a19	f	2016-01-04 22:41:30	2016-01-04 22:41:30	Submitted an iteration	\N	\N
208	24	elisp	hello-world	0	\N	2015-12-29 04:43:16	2015-12-29 04:43:16	1310bd9d9cb2f84e03dcb586	f	2015-12-29 04:43:16	2015-12-29 04:43:16	\N	\N	\N
209	24	javascript	etl	1	pending	2015-12-09 20:31:53	2015-12-09 20:31:53	895b2d9343ddf0cecc742293	f	2015-12-23 03:21:54	2015-12-23 03:21:54	Submitted an iteration	\N	\N
210	24	java	etl	0	\N	2016-01-13 04:33:24	2016-01-13 04:33:24	ade7c1f71a7e30eb16f593f0	f	2016-01-13 04:33:24	2016-01-13 04:33:24	\N	\N	\N
211	24	python	bob	4	done	2015-12-02 10:26:57	2015-12-02 10:26:57	d90663436a2b13b029976356	t	2016-01-14 10:39:08	2016-01-14 10:39:08	Submitted an iteration	\N	\N
212	42	javascript	rna-transcription	1	\N	2015-11-10 12:35:31	2015-11-10 12:35:31	e6c8b415a5171d405ad46004	f	2015-12-17 18:48:43	2015-12-17 18:48:43	Submitted an iteration	2015-11-02 20:46:54.84485	\N
213	42	haskell	allergies	2	done	2015-10-07 22:57:54	2015-10-07 22:57:54	743085821d9477b2aac0f9dc	t	2015-12-21 21:18:07	2015-12-21 21:18:07	Submitted an iteration	\N	\N
214	42	scala	grade-school	1	\N	2015-10-16 06:17:44	2015-10-16 06:17:44	b50d73995323360e35d41699	f	2016-01-11 18:29:18	2016-01-11 18:29:18	@abo64 commented	2015-11-09 04:58:15.700793	\N
215	42	lfe	leap	0	\N	2015-11-10 06:53:06	2015-11-10 06:53:06	ab3c41061f9b4d0bde3f5352	f	2015-11-10 06:53:06	2015-11-10 06:53:06	\N	\N	\N
216	42	ruby	raindrops	0	\N	2015-10-05 20:15:51	2015-10-05 20:15:51	667d0c2baeca62d28a8214e9	f	2015-10-05 20:15:51	2015-10-05 20:15:51	\N	\N	\N
217	42	coffeescript	hello-world	0	\N	2015-10-20 21:23:56	2015-10-20 21:23:56	6f56ad82a4860657375ba439	f	2015-10-20 21:23:56	2015-10-20 21:23:56	\N	\N	\N
218	27	lisp	point-mutations	0	\N	2015-10-02 02:01:11	2015-10-02 02:01:11	3696b54efadec7773bd091f5	f	2015-10-02 02:01:11	2015-10-02 02:01:11	\N	\N	\N
219	27	go	leap	0	\N	2015-11-05 17:17:41	2015-11-05 17:17:41	1c9c820916555a6c643a9769	f	2015-11-05 17:17:41	2015-11-05 17:17:41	\N	\N	\N
220	27	scheme	hello-world	0	\N	2015-09-23 08:42:28	2015-09-23 08:42:28	4f2b683bfe094d0e173c02e8	f	2015-09-23 08:42:28	2015-09-23 08:42:28	\N	\N	\N
221	27	ruby	gigasecond	1	\N	2015-08-01 01:44:02	2015-08-01 01:44:02	c2da9d1ac47db5365a69ec96	f	2015-10-27 08:39:02	2015-10-27 08:39:02	@othesius commented	\N	\N
222	27	ruby	hamming	1	pending	2015-12-16 03:21:27	2015-12-16 03:21:27	eeda24689612af0d93335dbf	f	2015-12-29 18:29:46	2015-12-29 18:29:46	Submitted an iteration	\N	\N
223	27	ocaml	anagram	0	\N	2015-07-18 00:50:25	2015-07-18 00:50:25	97703bf867a2f41e327072bb	f	2015-07-18 00:50:25	2015-07-18 00:50:25	\N	\N	\N
224	27	perl5	bob	0	\N	2015-09-12 21:23:33	2015-09-12 21:23:33	e44477d42c6ed45956e74e60	f	2015-09-12 21:23:33	2015-09-12 21:23:33	\N	\N	\N
225	45	go	word-count	1	pending	2015-09-15 12:56:56	2015-09-15 12:56:56	8b8e4c2231cd96dbb9247735	f	2015-11-21 03:32:49	2015-11-21 03:32:49	Submitted an iteration	\N	\N
226	45	ruby	hello-world	0	done	2015-10-25 14:42:47	2015-10-25 14:42:47	c0a0c19b3840a33d1cc7be3e	t	2015-10-25 14:42:47	2015-10-25 14:42:47	\N	\N	\N
227	45	lua	anagram	0	\N	2015-10-10 16:46:36	2015-10-10 16:46:36	e1dedf4922b47aeda277357f	f	2015-10-10 16:46:36	2015-10-10 16:46:36	\N	\N	\N
228	45	objective-c	etl	0	\N	2015-12-30 17:27:54	2015-12-30 17:27:54	6b04e180694845dea100cce4	f	2015-12-30 17:27:54	2015-12-30 17:27:54	\N	\N	\N
229	45	ruby	hamming	3	done	2015-10-22 09:58:44	2015-10-22 09:58:44	4a5ca09551f927b13a31cba7	t	2015-12-08 09:39:40	2015-12-08 09:39:40	Submitted an iteration	\N	\N
230	45	scheme	hello-world	0	\N	2015-10-29 20:35:38	2015-10-29 20:35:38	e4c19a43392a90ee5acc674b	f	2015-10-29 20:35:38	2015-10-29 20:35:38	\N	\N	\N
\.


--
-- Name: user_exercises_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('user_exercises_id_seq', 230, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY users (id, username, email, avatar_url, github_id, key, created_at, updated_at, onboarded_at, track_mentor, joined_as) FROM stdin;
1	rikki-	rikki-@example.com	https://avatars.githubusercontent.com/u/8341419	8341419	jvt116	2015-05-29 06:18:08.02283	2015-05-29 06:18:08.02283	\N	--- []\n	\N
6	amelie	amelie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/allthingssmitty/128.jpg	-83298	hjr598	2015-09-26 00:00:46.051776	2015-09-26 00:00:46.051776	\N	--- []\n	\N
7	beth	beth@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/soffes/128.jpg	-78630	psh668	2015-05-15 16:34:44.0548	2015-05-15 16:34:44.0548	\N	--- []\n	\N
8	claire	claire@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/leemunroe/128.jpg	-14868	ndt395	2015-09-17 08:59:57.057637	2015-09-17 08:59:57.057637	\N	--- []\n	\N
10	eve	eve@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/clementc/128.jpg	-41774	cdl469	2015-07-07 14:19:09.06285	2015-07-07 14:19:09.06285	\N	--- []\n	\N
13	grace	grace@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/wtrsld/128.jpg	-24797	xhr676	2015-07-28 08:33:15.070442	2015-07-28 08:33:15.070442	\N	--- []\n	\N
14	haley	haley@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/isacosta/128.jpg	-71185	uyi225	2016-01-09 14:04:56.072291	2016-01-09 14:04:56.072291	\N	--- []\n	\N
16	jarrod	jarrod@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/stan/128.jpg	-58927	gvd668	2015-10-18 18:09:46.077833	2015-10-18 18:09:46.077833	\N	--- []\n	\N
17	kieran	kieran@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/michigangraham/128.jpg	-95451	iqp740	2015-10-23 04:55:16.08066	2015-10-23 04:55:16.08066	\N	--- []\n	\N
18	lisa	lisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/brajeshwar/128.jpg	-10611	fbv432	2015-05-06 09:28:28.083468	2015-05-06 09:28:28.083468	\N	--- []\n	\N
19	mack	mack@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/leemunroe/128.jpg	-52758	lgp920	2015-09-05 14:58:31.086428	2015-09-05 14:58:31.086428	\N	--- []\n	\N
20	madison	madison@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg	-43405	gbd233	2015-05-01 11:40:12.089221	2015-05-01 11:40:12.089221	\N	--- []\n	\N
21	marshall	marshall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/guillemboti/128.jpg	-73677	xij942	2015-09-29 02:01:14.092356	2015-09-29 02:01:14.092356	\N	--- []\n	\N
23	mia	mia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/ffbel/128.jpg	-71361	kta134	2015-08-02 16:33:30.098416	2015-08-02 16:33:30.098416	\N	--- []\n	\N
24	mike	mike@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/runningskull/128.jpg	-13471	yth105	2015-11-27 14:09:32.101038	2015-11-27 14:09:32.101038	\N	--- []\n	\N
25	mildred	mildred@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/jesseddy/128.jpg	-87616	xdb666	2015-11-20 14:40:53.103715	2015-11-20 14:40:53.103715	\N	--- []\n	\N
26	mitchell	mitchell@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/maximseshuk/128.jpg	-93884	mbl996	2015-07-14 12:51:13.106257	2015-07-14 12:51:13.106257	\N	--- []\n	\N
27	morris	morris@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/tutsii159/128.jpg	-12680	zge145	2015-07-06 06:28:37.109062	2015-07-06 06:28:37.109062	\N	--- []\n	\N
30	paula	paula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/joshhemsley/128.jpg	-59076	qmz423	2015-07-30 16:14:41.120914	2015-07-30 16:14:41.120914	\N	--- []\n	\N
32	rachel	rachel@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/_shahedk/128.jpg	-37423	gsu775	2015-06-09 14:23:37.127748	2015-06-09 14:23:37.127748	\N	--- []\n	\N
34	rick	rick@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/roybarberuk/128.jpg	-26683	awd449	2016-01-09 03:07:50.132967	2016-01-09 03:07:50.132967	\N	--- []\n	\N
35	rita	rita@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/uxalex/128.jpg	-45480	ygy226	2015-06-21 11:09:57.135659	2015-06-21 11:09:57.135659	\N	--- []\n	\N
36	river	river@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/idiot/128.jpg	-43755	zos933	2015-06-25 06:01:50.138289	2015-06-25 06:01:50.138289	\N	--- []\n	\N
37	rolf	rolf@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/rude/128.jpg	-15985	jcg495	2015-10-06 04:49:17.141169	2015-10-06 04:49:17.141169	\N	--- []\n	\N
39	rudi	rudi@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/baires/128.jpg	-86658	jwi547	2016-01-10 16:46:23.147712	2016-01-10 16:46:23.147712	\N	--- []\n	\N
41	ryan	ryan@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kennyadr/128.jpg	-72774	dhn778	2015-11-05 13:21:49.152561	2015-11-05 13:21:49.152561	\N	--- []\n	\N
42	shaina	shaina@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/andrewarrow/128.jpg	-2244	unr810	2015-09-24 08:28:40.155514	2015-09-24 08:28:40.155514	\N	--- []\n	\N
43	talia	talia@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sharvin/128.jpg	-90321	naq968	2015-07-01 06:39:09.158459	2015-07-01 06:39:09.158459	\N	--- []\n	\N
45	vince	vince@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/IsaryAmairani/128.jpg	-4992	ryw564	2015-09-09 22:42:26.163949	2015-09-09 22:42:26.163949	\N	--- []\n	\N
47	xavier	xavier@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/BryanHorsey/128.jpg	-16912	byg511	2015-09-18 00:24:26.169564	2015-09-18 00:24:26.169564	\N	--- []\n	\N
3	bob	bob@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/benefritz/128.jpg	-53698	vkw726	2015-11-22 23:59:26.044671	2015-11-22 23:59:26.044671	2015-10-20 11:55:35	---\n- ruby\n- haskell\n	\N
28	norma	norma@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/tutsii159/128.jpg	-46668	jwi561	2015-12-26 02:16:41.111838	2015-12-26 02:16:41.111838	2015-10-31 09:38:26	--- []\n	\N
46	wilson	wilson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/sydlawrence/128.jpg	-34435	fnu134	2015-10-12 06:32:22.166741	2015-10-12 06:32:22.166741	2015-10-03 16:21:56	--- []\n	\N
15	isaac	isaac@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/thinmatt/128.jpg	-42470	rki474	2015-10-15 02:46:37.075045	2015-10-15 02:46:37.075045	2015-09-04 03:33:48	--- []\n	\N
38	ruben	ruben@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/divya/128.jpg	-39588	kas292	2015-11-11 13:19:50.143992	2015-11-11 13:19:50.143992	2015-10-26 21:49:30	--- []\n	\N
31	quentin	quentin@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/koridhandy/128.jpg	-87901	zfe545	2015-07-16 17:13:27.124019	2015-07-16 17:13:27.124019	2015-11-18 19:59:24	--- []\n	\N
11	elisa	elisa@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/chandlervdw/128.jpg	-87828	tif962	2015-08-02 05:44:34.064641	2015-08-02 05:44:34.064641	2015-11-18 06:03:16	--- []\n	\N
40	russ	russ@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/BillSKenney/128.jpg	-67783	yiu909	2015-11-16 20:08:44.149723	2015-11-16 20:08:44.149723	2015-09-15 12:33:03	--- []\n	\N
29	opal	opal@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/dunenkoff/128.jpg	-42653	ljy461	2015-06-16 22:38:43.114842	2015-06-16 22:38:43.114842	2015-10-11 13:51:51	--- []\n	\N
22	mary	mary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/lewisainslie/128.jpg	-23727	stm100	2015-11-29 09:16:59.095453	2015-11-29 09:16:59.095453	2015-09-20 12:24:00	--- []\n	\N
9	dawson	dawson@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/timothycd/128.jpg	-33673	cmk560	2015-07-25 09:24:06.059592	2015-07-25 09:24:06.059592	2015-10-05 13:50:32	--- []\n	\N
44	ursula	ursula@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/peterlandt/128.jpg	-58777	vqz724	2015-10-12 23:37:50.161198	2015-10-12 23:37:50.161198	2015-10-03 14:47:31	--- []\n	\N
12	frederique	frederique@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/plbabin/128.jpg	-23616	rhd861	2016-01-09 19:00:05.067397	2016-01-09 19:00:05.067397	2015-09-30 18:02:47	--- []\n	\N
5	diana	diana@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/mekal/128.jpg	-13399	iuj251	2015-11-03 01:56:57.049618	2015-11-03 01:56:57.049618	2015-10-03 08:29:42	---\n- python\n	\N
49	zachary	zachary@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/yalozhkin/128.jpg	-16578	csc551	2015-10-09 15:17:03.174222	2015-10-09 15:17:03.174222	\N	--- []\n	\N
33	randall	randall@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/kohette/128.jpg	-22133	ruh261	2015-06-21 19:25:27.130352	2015-06-21 19:25:27.130352	2015-10-19 03:17:47	--- []\n	\N
48	yvette	yvette@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/vocino/128.jpg	-34717	efi315	2015-08-18 19:07:33.171306	2015-08-18 19:07:33.171306	2015-09-24 20:16:04	--- []\n	\N
4	charlie	charlie@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/alxndrustinov/128.jpg	-28096	vgr481	2015-07-26 19:26:46.047258	2015-07-26 19:26:46.047258	2015-10-30 07:53:18	---\n- javascript\n- erlang\n- elixir\n	\N
2	alice	alice@example.com	https://s3.amazonaws.com/uifaces/faces/twitter/dpmachado/128.jpg	-83057	klh451	2015-12-12 04:28:55.04146	2015-12-12 04:28:55.04146	2015-10-22 04:14:16	---\n- clojure\n- coffeescript\n- elixir\n- go\n- haskell\n- javascript\n- objective-c\n- ocaml\n- perl5\n- python\n- ruby\n- scala\n	\N
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('users_id_seq', 49, true);


--
-- Data for Name: views; Type: TABLE DATA; Schema: public; Owner: exercism
--

COPY views (id, user_id, exercise_id, last_viewed_at, created_at, updated_at) FROM stdin;
\.


--
-- Name: views_id_seq; Type: SEQUENCE SET; Schema: public; Owner: exercism
--

SELECT pg_catalog.setval('views_id_seq', 1, false);


--
-- PostgreSQL database dump complete
--

